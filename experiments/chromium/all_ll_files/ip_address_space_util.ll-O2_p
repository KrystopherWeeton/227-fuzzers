; ModuleID = '../../services/network/public/cpp/ip_address_space_util.cc'
source_filename = "../../services/network/public/cpp/ip_address_space_util.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.base::NoDestructor" = type { [24 x i8] }
%"class.net::IPEndPoint" = type { %"class.net::IPAddress", i16 }
%"class.net::IPAddress" = type { %"class.net::IPAddressBytes" }
%"class.net::IPAddressBytes" = type { %"struct.std::__1::array", i8 }
%"struct.std::__1::array" = type { [16 x i8] }
%"class.network::(anonymous namespace)::AddressSpaceMapEntry" = type <{ %"class.net::IPAddress", [7 x i8], i64, i32, [4 x i8] }>
%"class.base::BasicStringPiece" = type { i8*, i64 }
%"class.std::__1::vector.29" = type { %"class.std::__1::__vector_base.30" }
%"class.std::__1::__vector_base.30" = type { %"class.base::BasicStringPiece"*, %"class.base::BasicStringPiece"*, %"class.std::__1::__compressed_pair.31" }
%"class.std::__1::__compressed_pair.31" = type { %"struct.std::__1::__compressed_pair_elem.32" }
%"struct.std::__1::__compressed_pair_elem.32" = type { %"class.base::BasicStringPiece"* }
%"class.absl::optional.42" = type { %"class.absl::optional_internal::optional_data.43" }
%"class.absl::optional_internal::optional_data.43" = type { %"class.absl::optional_internal::optional_data_base.44" }
%"class.absl::optional_internal::optional_data_base.44" = type { %"class.absl::optional_internal::optional_data_dtor_base.45" }
%"class.absl::optional_internal::optional_data_dtor_base.45" = type { i8, %union.anon.46 }
%union.anon.46 = type { %"class.net::IPEndPoint" }
%"struct.network::(anonymous namespace)::EndpointOverride" = type { %"class.net::IPEndPoint", i32 }
%"class.absl::optional.37" = type { %"class.absl::optional_internal::optional_data.38" }
%"class.absl::optional_internal::optional_data.38" = type { %"class.absl::optional_internal::optional_data_base.39" }
%"class.absl::optional_internal::optional_data_base.39" = type { %"class.absl::optional_internal::optional_data_dtor_base.40" }
%"class.absl::optional_internal::optional_data_dtor_base.40" = type { i8, %union.anon.41 }
%union.anon.41 = type { %"struct.network::(anonymous namespace)::EndpointOverride" }
%"class.std::__1::basic_string" = type { %"class.std::__1::__compressed_pair.3" }
%"class.std::__1::__compressed_pair.3" = type { %"struct.std::__1::__compressed_pair_elem.4" }
%"struct.std::__1::__compressed_pair_elem.4" = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" = type { %union.anon.5 }
%union.anon.5 = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" = type { i8*, i64, i64 }
%"class.std::__1::vector.22" = type { %"class.std::__1::__vector_base.23" }
%"class.std::__1::__vector_base.23" = type { %"struct.network::(anonymous namespace)::EndpointOverride"*, %"struct.network::(anonymous namespace)::EndpointOverride"*, %"class.std::__1::__compressed_pair.24" }
%"class.std::__1::__compressed_pair.24" = type { %"struct.std::__1::__compressed_pair_elem.25" }
%"struct.std::__1::__compressed_pair_elem.25" = type { %"struct.network::(anonymous namespace)::EndpointOverride"* }
%"class.base::CommandLine" = type { %"class.std::__1::vector.1", %"class.std::__1::map", i64 }
%"class.std::__1::vector.1" = type { %"class.std::__1::__vector_base.2" }
%"class.std::__1::__vector_base.2" = type { %"class.std::__1::basic_string"*, %"class.std::__1::basic_string"*, %"class.std::__1::__compressed_pair.9" }
%"class.std::__1::__compressed_pair.9" = type { %"struct.std::__1::__compressed_pair_elem.10" }
%"struct.std::__1::__compressed_pair_elem.10" = type { %"class.std::__1::basic_string"* }
%"class.std::__1::map" = type { %"class.std::__1::__tree" }
%"class.std::__1::__tree" = type { %"class.std::__1::__tree_end_node"*, %"class.std::__1::__compressed_pair.14", %"class.std::__1::__compressed_pair.19" }
%"class.std::__1::__tree_end_node" = type { %"class.std::__1::__tree_node_base"* }
%"class.std::__1::__tree_node_base" = type opaque
%"class.std::__1::__compressed_pair.14" = type { %"struct.std::__1::__compressed_pair_elem.15" }
%"struct.std::__1::__compressed_pair_elem.15" = type { %"class.std::__1::__tree_end_node" }
%"class.std::__1::__compressed_pair.19" = type { %"struct.std::__1::__compressed_pair_elem.20" }
%"struct.std::__1::__compressed_pair_elem.20" = type { i64 }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short" = type { [23 x i8], %struct.anon }
%struct.anon = type { i8 }
%"class.std::__1::__vector_base_common" = type { i8 }

@_ZN7network8switches24kIpAddressSpaceOverridesE = external constant [0 x i8], align 1
@.str.2 = private unnamed_addr constant [2 x i8] c",\00", align 1
@.str.3 = private unnamed_addr constant [2 x i8] c"=\00", align 1
@.str.5 = private unnamed_addr constant [7 x i8] c"public\00", align 1
@.str.6 = private unnamed_addr constant [8 x i8] c"private\00", align 1
@.str.7 = private unnamed_addr constant [6 x i8] c"local\00", align 1
@_ZZN7network12_GLOBAL__N_124NonPublicAddressSpaceMapEvE4kMap = internal global %"class.base::NoDestructor" zeroinitializer, align 8
@_ZGVZN7network12_GLOBAL__N_124NonPublicAddressSpaceMapEvE4kMap = internal global i64 0, align 8

; Function Attrs: nounwind ssp uwtable
define hidden i32 @_ZN7network26IPEndPointToIPAddressSpaceERKN3net10IPEndPointE(%"class.net::IPEndPoint"* dereferenceable(20)) local_unnamed_addr #0 {
  %2 = alloca [8 x %"class.network::(anonymous namespace)::AddressSpaceMapEntry"], align 8
  %3 = alloca %"class.net::IPAddress", align 1
  %4 = alloca %"class.net::IPAddress", align 1
  %5 = alloca %"class.net::IPAddress", align 1
  %6 = alloca %"class.net::IPAddress", align 1
  %7 = alloca %"class.net::IPAddress", align 1
  %8 = alloca %"class.net::IPAddress", align 1
  %9 = alloca %"class.net::IPAddress", align 1
  %10 = alloca %"class.net::IPAddress", align 1
  %11 = alloca %"class.base::BasicStringPiece", align 8
  %12 = alloca %"class.base::BasicStringPiece", align 8
  %13 = alloca %"class.net::IPAddress", align 1
  %14 = alloca i32, align 4
  %15 = alloca %"class.net::IPEndPoint", align 2
  %16 = alloca %"class.std::__1::vector.29", align 8
  %17 = alloca %"class.absl::optional.42", align 2
  %18 = alloca %"struct.network::(anonymous namespace)::EndpointOverride", align 4
  %19 = alloca %"class.std::__1::vector.29", align 8
  %20 = alloca %"class.absl::optional.37", align 4
  %21 = alloca %"class.std::__1::basic_string", align 8
  %22 = alloca %"class.std::__1::vector.22", align 8
  %23 = getelementptr inbounds %"class.net::IPEndPoint", %"class.net::IPEndPoint"* %0, i64 0, i32 0
  %24 = tail call zeroext i1 @_ZNK3net9IPAddress7IsValidEv(%"class.net::IPAddress"* %23) #12
  br i1 %24, label %25, label %400

25:                                               ; preds = %1
  %26 = tail call %"class.base::CommandLine"* @_ZN4base11CommandLine17ForCurrentProcessEv() #12
  %27 = tail call zeroext i1 @_ZNK4base11CommandLine9HasSwitchEPKc(%"class.base::CommandLine"* %26, i8* getelementptr inbounds ([0 x i8], [0 x i8]* @_ZN7network8switches24kIpAddressSpaceOverridesE, i64 0, i64 0)) #12
  br i1 %27, label %28, label %308

28:                                               ; preds = %25
  %29 = bitcast %"class.std::__1::basic_string"* %21 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %29) #12
  %30 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %21, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %31 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %21, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %29, i8 -86, i64 24, i1 false) #12
  %32 = tail call i64 @strlen(i8* nonnull getelementptr inbounds ([0 x i8], [0 x i8]* @_ZN7network8switches24kIpAddressSpaceOverridesE, i64 0, i64 0)) #12
  call void @_ZNK4base11CommandLine19GetSwitchValueASCIIENS_16BasicStringPieceIcNSt3__111char_traitsIcEEEE(%"class.std::__1::basic_string"* nonnull sret %21, %"class.base::CommandLine"* %26, i8* getelementptr inbounds ([0 x i8], [0 x i8]* @_ZN7network8switches24kIpAddressSpaceOverridesE, i64 0, i64 0), i64 %32) #12
  %33 = bitcast %"class.std::__1::vector.22"* %22 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %33) #12
  %34 = getelementptr inbounds %"class.std::__1::vector.22", %"class.std::__1::vector.22"* %22, i64 0, i32 0, i32 0
  %35 = getelementptr inbounds %"class.std::__1::vector.22", %"class.std::__1::vector.22"* %22, i64 0, i32 0, i32 1
  %36 = getelementptr inbounds %"class.std::__1::vector.22", %"class.std::__1::vector.22"* %22, i64 0, i32 0, i32 2, i32 0, i32 0
  %37 = bitcast %"class.std::__1::basic_string"* %21 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %38 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %37, i64 0, i32 1, i32 0
  %39 = load i8, i8* %38, align 1
  %40 = icmp slt i8 %39, 0
  %41 = load i8*, i8** %30, align 8
  %42 = select i1 %40, i8* %41, i8* %29
  %43 = load i64, i64* %31, align 8
  %44 = zext i8 %39 to i64
  %45 = select i1 %40, i64 %43, i64 %44
  %46 = bitcast %"class.std::__1::vector.29"* %19 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %46) #12, !noalias !2
  %47 = getelementptr inbounds %"class.std::__1::vector.29", %"class.std::__1::vector.29"* %19, i64 0, i32 0, i32 0
  %48 = getelementptr inbounds %"class.std::__1::vector.29", %"class.std::__1::vector.29"* %19, i64 0, i32 0, i32 1
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %46, i8 -86, i64 24, i1 false) #12, !noalias !2
  call void @_ZN4base16SplitStringPieceENS_16BasicStringPieceIcNSt3__111char_traitsIcEEEES4_NS_18WhitespaceHandlingENS_11SplitResultE(%"class.std::__1::vector.29"* nonnull sret %19, i8* %42, i64 %45, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.2, i64 0, i64 0), i64 1, i32 1, i32 1) #12, !noalias !2
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %33, i8 0, i64 24, i1 false) #12, !alias.scope !2
  %49 = load %"class.base::BasicStringPiece"*, %"class.base::BasicStringPiece"** %47, align 8, !noalias !2
  %50 = load %"class.base::BasicStringPiece"*, %"class.base::BasicStringPiece"** %48, align 8, !noalias !2
  %51 = icmp eq %"class.base::BasicStringPiece"* %49, %50
  br i1 %51, label %82, label %52

52:                                               ; preds = %28
  %53 = getelementptr inbounds %"class.absl::optional.37", %"class.absl::optional.37"* %20, i64 0, i32 0, i32 0, i32 0, i32 0
  %54 = bitcast %"class.std::__1::vector.29"* %16 to i8*
  %55 = getelementptr inbounds %"class.std::__1::vector.29", %"class.std::__1::vector.29"* %16, i64 0, i32 0, i32 0
  %56 = getelementptr inbounds %"class.std::__1::vector.29", %"class.std::__1::vector.29"* %16, i64 0, i32 0, i32 1
  %57 = bitcast %"class.base::BasicStringPiece"** %56 to i64*
  %58 = bitcast %"class.std::__1::vector.29"* %16 to i64*
  %59 = getelementptr inbounds %"class.absl::optional.37", %"class.absl::optional.37"* %20, i64 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i64 0
  %60 = getelementptr inbounds %"class.absl::optional.42", %"class.absl::optional.42"* %17, i64 0, i32 0, i32 0, i32 0, i32 0
  %61 = bitcast %"class.base::BasicStringPiece"* %11 to i8*
  %62 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %11, i64 0, i32 0
  %63 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %11, i64 0, i32 1
  %64 = bitcast %"class.base::BasicStringPiece"* %12 to i8*
  %65 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %12, i64 0, i32 0
  %66 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %12, i64 0, i32 1
  %67 = getelementptr inbounds %"class.net::IPAddress", %"class.net::IPAddress"* %13, i64 0, i32 0, i32 0, i32 0, i64 0
  %68 = getelementptr inbounds %"class.absl::optional.42", %"class.absl::optional.42"* %17, i64 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0, i64 0
  %69 = bitcast i32* %14 to i8*
  %70 = getelementptr inbounds %"class.net::IPEndPoint", %"class.net::IPEndPoint"* %15, i64 0, i32 0, i32 0, i32 0, i32 0, i64 0
  %71 = getelementptr inbounds %"class.absl::optional.42", %"class.absl::optional.42"* %17, i64 0, i32 0, i32 0, i32 0, i32 1, i32 0
  %72 = getelementptr inbounds %"struct.network::(anonymous namespace)::EndpointOverride", %"struct.network::(anonymous namespace)::EndpointOverride"* %18, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i64 0
  %73 = getelementptr inbounds %"struct.network::(anonymous namespace)::EndpointOverride", %"struct.network::(anonymous namespace)::EndpointOverride"* %18, i64 0, i32 0
  %74 = getelementptr inbounds %"struct.network::(anonymous namespace)::EndpointOverride", %"struct.network::(anonymous namespace)::EndpointOverride"* %18, i64 0, i32 1
  %75 = getelementptr inbounds %"class.absl::optional.37", %"class.absl::optional.37"* %20, i64 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0
  %76 = getelementptr inbounds %"class.absl::optional.37", %"class.absl::optional.37"* %20, i64 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 1
  %77 = bitcast %"struct.network::(anonymous namespace)::EndpointOverride"** %35 to i64*
  %78 = bitcast %"class.std::__1::vector.22"* %22 to i64*
  %79 = bitcast %"struct.network::(anonymous namespace)::EndpointOverride"** %36 to i64*
  br label %89

80:                                               ; preds = %262
  %81 = load %"class.base::BasicStringPiece"*, %"class.base::BasicStringPiece"** %47, align 8, !noalias !2
  br label %82

82:                                               ; preds = %80, %28
  %83 = phi %"class.base::BasicStringPiece"* [ %81, %80 ], [ %49, %28 ]
  %84 = icmp eq %"class.base::BasicStringPiece"* %83, null
  br i1 %84, label %265, label %85

85:                                               ; preds = %82
  %86 = ptrtoint %"class.base::BasicStringPiece"* %83 to i64
  %87 = bitcast %"class.base::BasicStringPiece"** %48 to i64*
  store i64 %86, i64* %87, align 8, !noalias !2
  %88 = bitcast %"class.base::BasicStringPiece"* %83 to i8*
  call void @_ZdlPv(i8* %88) #13
  br label %265

89:                                               ; preds = %262, %52
  %90 = phi %"class.base::BasicStringPiece"* [ %49, %52 ], [ %263, %262 ]
  %91 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %90, i64 0, i32 0
  %92 = load i8*, i8** %91, align 8, !noalias !2
  %93 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %90, i64 0, i32 1
  %94 = load i64, i64* %93, align 8, !noalias !2
  call void @llvm.lifetime.start.p0i8(i64 28, i8* nonnull %53) #12, !noalias !2
  call void @llvm.memset.p0i8.i64(i8* nonnull align 4 %53, i8 -86, i64 28, i1 false) #12, !noalias !2
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %54) #12, !noalias !5
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %54, i8 -86, i64 24, i1 false) #12, !noalias !5
  call void @_ZN4base16SplitStringPieceENS_16BasicStringPieceIcNSt3__111char_traitsIcEEEES4_NS_18WhitespaceHandlingENS_11SplitResultE(%"class.std::__1::vector.29"* nonnull sret %16, i8* %92, i64 %94, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.3, i64 0, i64 0), i64 1, i32 1, i32 0) #12, !noalias !5
  %95 = load i64, i64* %57, align 8, !noalias !5
  %96 = load i64, i64* %58, align 8, !noalias !5
  %97 = sub i64 %95, %96
  %98 = icmp eq i64 %97, 32
  %99 = inttoptr i64 %96 to %"class.base::BasicStringPiece"*
  br i1 %98, label %101, label %100

100:                                              ; preds = %89
  store i8 0, i8* %53, align 4, !alias.scope !8, !noalias !2
  call void @llvm.memset.p0i8.i64(i8* align 4 %59, i8 0, i64 24, i1 false) #12, !alias.scope !8, !noalias !2
  br label %173

101:                                              ; preds = %89
  %102 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %99, i64 0, i32 0
  %103 = load i8*, i8** %102, align 8, !noalias !8
  %104 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %99, i64 0, i32 1
  %105 = load i64, i64* %104, align 8, !noalias !8
  %106 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %99, i64 1, i32 0
  %107 = load i8*, i8** %106, align 8, !noalias !8
  %108 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %99, i64 1, i32 1
  %109 = load i64, i64* %108, align 8, !noalias !8
  call void @llvm.lifetime.start.p0i8(i64 22, i8* nonnull %60) #12, !noalias !5
  call void @llvm.memset.p0i8.i64(i8* nonnull align 2 %60, i8 -86, i64 22, i1 false) #12, !noalias !5
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %61) #12, !noalias !5
  store i8* %103, i8** %62, align 8, !noalias !9
  store i64 %105, i64* %63, align 8, !noalias !9
  %110 = icmp eq i64 %105, 0
  br i1 %110, label %124, label %111

111:                                              ; preds = %101
  %112 = add i64 %105, -1
  %113 = getelementptr inbounds i8, i8* %103, i64 %112
  %114 = load i8, i8* %113, align 1, !noalias !12
  %115 = icmp eq i8 %114, 58
  br i1 %115, label %125, label %116

116:                                              ; preds = %111, %119
  %117 = phi i64 [ %120, %119 ], [ %112, %111 ]
  %118 = icmp eq i64 %117, 0
  br i1 %118, label %124, label %119

119:                                              ; preds = %116
  %120 = add i64 %117, -1
  %121 = getelementptr inbounds i8, i8* %103, i64 %120
  %122 = load i8, i8* %121, align 1, !noalias !13
  %123 = icmp eq i8 %122, 58
  br i1 %123, label %125, label %116

124:                                              ; preds = %116, %101
  store i8 0, i8* %60, align 2, !alias.scope !13, !noalias !5
  call void @llvm.memset.p0i8.i64(i8* align 2 %68, i8 0, i64 20, i1 false) #12, !alias.scope !13, !noalias !5
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %61) #12, !noalias !5
  br label %149

125:                                              ; preds = %119, %111
  %126 = phi i64 [ %112, %111 ], [ %120, %119 ]
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %64) #12, !noalias !9
  %127 = call { i8*, i64 } @_ZNK4base16BasicStringPieceIcNSt3__111char_traitsIcEEE6substrEmm(%"class.base::BasicStringPiece"* nonnull %11, i64 0, i64 %126) #12, !noalias !12
  %128 = extractvalue { i8*, i64 } %127, 0
  store i8* %128, i8** %65, align 8, !noalias !9
  %129 = extractvalue { i8*, i64 } %127, 1
  store i64 %129, i64* %66, align 8, !noalias !9
  %130 = add nuw i64 %126, 1
  %131 = call { i8*, i64 } @_ZNK4base16BasicStringPieceIcNSt3__111char_traitsIcEEE6substrEmm(%"class.base::BasicStringPiece"* nonnull %11, i64 %130, i64 -1) #12, !noalias !12
  call void @llvm.lifetime.start.p0i8(i64 17, i8* nonnull %67) #12, !noalias !9
  call void @llvm.memset.p0i8.i64(i8* nonnull align 1 %67, i8 -86, i64 17, i1 false) #12, !noalias !9
  call void @_ZN3net9IPAddressC1Ev(%"class.net::IPAddress"* nonnull %13) #12, !noalias !12
  %132 = call zeroext i1 @_ZN3net25ParseURLHostnameToAddressERKN4base16BasicStringPieceIcNSt3__111char_traitsIcEEEEPNS_9IPAddressE(%"class.base::BasicStringPiece"* nonnull dereferenceable(16) %12, %"class.net::IPAddress"* nonnull %13) #12, !noalias !12
  br i1 %132, label %134, label %133

133:                                              ; preds = %125
  store i8 0, i8* %60, align 2, !alias.scope !13, !noalias !5
  call void @llvm.memset.p0i8.i64(i8* align 2 %68, i8 0, i64 20, i1 false) #12, !alias.scope !13, !noalias !5
  br label %146

134:                                              ; preds = %125
  %135 = extractvalue { i8*, i64 } %131, 1
  %136 = extractvalue { i8*, i64 } %131, 0
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %69) #12, !noalias !9
  store i32 0, i32* %14, align 4, !noalias !9
  %137 = call zeroext i1 @_ZN4base12StringToUintENS_16BasicStringPieceIcNSt3__111char_traitsIcEEEEPj(i8* %136, i64 %135, i32* nonnull %14) #12, !noalias !13
  br i1 %137, label %139, label %138

138:                                              ; preds = %134
  store i8 0, i8* %60, align 2, !alias.scope !13, !noalias !5
  call void @llvm.memset.p0i8.i64(i8* align 2 %68, i8 0, i64 20, i1 false) #12, !alias.scope !13, !noalias !5
  br label %145

139:                                              ; preds = %134
  %140 = load i32, i32* %14, align 4, !noalias !9
  %141 = icmp ult i32 %140, 65536
  br i1 %141, label %143, label %142

142:                                              ; preds = %139
  store i8 0, i8* %60, align 2, !alias.scope !13, !noalias !5
  call void @llvm.memset.p0i8.i64(i8* align 2 %68, i8 0, i64 20, i1 false) #12, !alias.scope !13, !noalias !5
  br label %145

143:                                              ; preds = %139
  %144 = trunc i32 %140 to i16
  call void @llvm.lifetime.start.p0i8(i64 20, i8* nonnull %70) #12, !noalias !9
  call void @_ZN3net10IPEndPointC1ERKNS_9IPAddressEt(%"class.net::IPEndPoint"* nonnull %15, %"class.net::IPAddress"* nonnull dereferenceable(17) %13, i16 zeroext %144) #12, !noalias !13
  store i8 1, i8* %60, align 2, !alias.scope !13, !noalias !5
  call void @_ZN3net10IPEndPointC1ERKS0_(%"class.net::IPEndPoint"* %71, %"class.net::IPEndPoint"* nonnull dereferenceable(20) %15) #12
  call void @_ZN3net10IPEndPointD1Ev(%"class.net::IPEndPoint"* nonnull %15) #12
  call void @llvm.lifetime.end.p0i8(i64 20, i8* nonnull %70) #12, !noalias !9
  br label %145

145:                                              ; preds = %143, %142, %138
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %69) #12, !noalias !9
  br label %146

146:                                              ; preds = %145, %133
  call void @_ZN3net9IPAddressD1Ev(%"class.net::IPAddress"* nonnull %13) #12, !noalias !8
  call void @llvm.lifetime.end.p0i8(i64 17, i8* nonnull %67) #12, !noalias !9
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %64) #12, !noalias !9
  %147 = load i8, i8* %60, align 2, !noalias !5
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %61) #12, !noalias !5
  %148 = icmp eq i8 %147, 0
  br i1 %148, label %149, label %150

149:                                              ; preds = %146, %124
  store i8 0, i8* %53, align 4, !alias.scope !8, !noalias !2
  call void @llvm.memset.p0i8.i64(i8* align 4 %59, i8 0, i64 24, i1 false) #12, !alias.scope !8, !noalias !2
  br label %171

150:                                              ; preds = %146
  switch i64 %109, label %160 [
    i64 6, label %151
    i64 7, label %154
    i64 5, label %157
  ]

151:                                              ; preds = %150
  %152 = call i32 @bcmp(i8* %107, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.5, i64 0, i64 0), i64 6) #12
  %153 = icmp eq i32 %152, 0
  br i1 %153, label %161, label %160

154:                                              ; preds = %150
  %155 = call i32 @bcmp(i8* %107, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.6, i64 0, i64 0), i64 7) #12
  %156 = icmp eq i32 %155, 0
  br i1 %156, label %161, label %160

157:                                              ; preds = %150
  %158 = call i32 @bcmp(i8* %107, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.7, i64 0, i64 0), i64 5) #12
  %159 = icmp eq i32 %158, 0
  br i1 %159, label %161, label %160

160:                                              ; preds = %157, %154, %151, %150
  store i8 0, i8* %53, align 4, !alias.scope !8, !noalias !2
  call void @llvm.memset.p0i8.i64(i8* align 4 %59, i8 0, i64 24, i1 false) #12, !alias.scope !8, !noalias !2
  br label %170

161:                                              ; preds = %157, %154, %151
  %162 = phi i32 [ 0, %157 ], [ 1, %154 ], [ 2, %151 ]
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %72) #12, !noalias !5
  call void @llvm.memset.p0i8.i64(i8* nonnull align 4 %72, i8 -86, i64 24, i1 false) #12, !noalias !5
  call void @_ZN3net10IPEndPointC1Ev(%"class.net::IPEndPoint"* nonnull %73) #12, !noalias !8
  %163 = load i8, i8* %60, align 2, !range !14, !noalias !5
  %164 = icmp eq i8 %163, 0
  br i1 %164, label %165, label %166, !prof !15

165:                                              ; preds = %161
  call void @llvm.trap() #12
  unreachable

166:                                              ; preds = %161
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %72, i8* align 2 %68, i64 20, i1 false) #12, !noalias !5
  store i32 %162, i32* %74, align 4, !noalias !5
  store i8 1, i8* %53, align 4, !alias.scope !8, !noalias !2
  call void @_ZN3net10IPEndPointC1ERKS0_(%"class.net::IPEndPoint"* %75, %"class.net::IPEndPoint"* nonnull dereferenceable(20) %73) #12
  %167 = load i32, i32* %74, align 4, !noalias !5
  store i32 %167, i32* %76, align 4, !alias.scope !8, !noalias !2
  call void @_ZN3net10IPEndPointD1Ev(%"class.net::IPEndPoint"* nonnull %73) #12
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %72) #12, !noalias !5
  %168 = load i8, i8* %60, align 2, !range !14, !noalias !5
  %169 = icmp eq i8 %168, 0
  br i1 %169, label %171, label %170

170:                                              ; preds = %166, %160
  call void @_ZN3net10IPEndPointD1Ev(%"class.net::IPEndPoint"* %71) #12
  store i8 0, i8* %60, align 2, !noalias !5
  br label %171

171:                                              ; preds = %170, %166, %149
  call void @llvm.lifetime.end.p0i8(i64 22, i8* nonnull %60) #12, !noalias !5
  %172 = load %"class.base::BasicStringPiece"*, %"class.base::BasicStringPiece"** %55, align 8, !noalias !5
  br label %173

173:                                              ; preds = %171, %100
  %174 = phi %"class.base::BasicStringPiece"* [ %172, %171 ], [ %99, %100 ]
  %175 = icmp eq %"class.base::BasicStringPiece"* %174, null
  br i1 %175, label %179, label %176

176:                                              ; preds = %173
  %177 = ptrtoint %"class.base::BasicStringPiece"* %174 to i64
  store i64 %177, i64* %57, align 8, !noalias !5
  %178 = bitcast %"class.base::BasicStringPiece"* %174 to i8*
  call void @_ZdlPv(i8* %178) #13
  br label %179

179:                                              ; preds = %176, %173
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %54) #12, !noalias !5
  %180 = load i8, i8* %53, align 4, !range !14, !noalias !2
  %181 = icmp eq i8 %180, 0
  br i1 %181, label %262, label %182

182:                                              ; preds = %179
  %183 = load %"struct.network::(anonymous namespace)::EndpointOverride"*, %"struct.network::(anonymous namespace)::EndpointOverride"** %35, align 8, !alias.scope !2
  %184 = load %"struct.network::(anonymous namespace)::EndpointOverride"*, %"struct.network::(anonymous namespace)::EndpointOverride"** %36, align 8, !alias.scope !2
  %185 = icmp ult %"struct.network::(anonymous namespace)::EndpointOverride"* %183, %184
  %186 = ptrtoint %"struct.network::(anonymous namespace)::EndpointOverride"* %184 to i64
  br i1 %185, label %187, label %193

187:                                              ; preds = %182
  %188 = getelementptr inbounds %"struct.network::(anonymous namespace)::EndpointOverride", %"struct.network::(anonymous namespace)::EndpointOverride"* %183, i64 0, i32 0
  call void @_ZN3net10IPEndPointC1ERKS0_(%"class.net::IPEndPoint"* %188, %"class.net::IPEndPoint"* dereferenceable(20) %75) #12
  %189 = getelementptr inbounds %"struct.network::(anonymous namespace)::EndpointOverride", %"struct.network::(anonymous namespace)::EndpointOverride"* %183, i64 0, i32 1
  %190 = load i32, i32* %76, align 4, !noalias !2
  store i32 %190, i32* %189, align 4
  %191 = getelementptr inbounds %"struct.network::(anonymous namespace)::EndpointOverride", %"struct.network::(anonymous namespace)::EndpointOverride"* %183, i64 1
  %192 = ptrtoint %"struct.network::(anonymous namespace)::EndpointOverride"* %191 to i64
  store i64 %192, i64* %77, align 8, !alias.scope !2
  br label %258

193:                                              ; preds = %182
  %194 = ptrtoint %"struct.network::(anonymous namespace)::EndpointOverride"* %183 to i64
  %195 = load i64, i64* %78, align 8, !alias.scope !2
  %196 = sub i64 %194, %195
  %197 = sdiv exact i64 %196, 24
  %198 = add nsw i64 %197, 1
  %199 = icmp ugt i64 %198, 768614336404564650
  br i1 %199, label %200, label %202

200:                                              ; preds = %193
  %201 = bitcast %"class.std::__1::vector.22"* %22 to %"class.std::__1::__vector_base_common"*
  call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* nonnull %201) #14
  unreachable

202:                                              ; preds = %193
  %203 = sub i64 %186, %195
  %204 = sdiv exact i64 %203, 24
  %205 = icmp ult i64 %204, 384307168202282325
  br i1 %205, label %206, label %211

206:                                              ; preds = %202
  %207 = shl nsw i64 %204, 1
  %208 = icmp ult i64 %207, %198
  %209 = select i1 %208, i64 %198, i64 %207
  %210 = icmp eq i64 %209, 0
  br i1 %210, label %216, label %211

211:                                              ; preds = %206, %202
  %212 = phi i64 [ %209, %206 ], [ 768614336404564650, %202 ]
  %213 = mul i64 %212, 24
  %214 = call i8* @_Znwm(i64 %213) #13
  %215 = bitcast i8* %214 to %"struct.network::(anonymous namespace)::EndpointOverride"*
  br label %216

216:                                              ; preds = %211, %206
  %217 = phi i64 [ %212, %211 ], [ 0, %206 ]
  %218 = phi %"struct.network::(anonymous namespace)::EndpointOverride"* [ %215, %211 ], [ null, %206 ]
  %219 = getelementptr inbounds %"struct.network::(anonymous namespace)::EndpointOverride", %"struct.network::(anonymous namespace)::EndpointOverride"* %218, i64 %197
  %220 = getelementptr inbounds %"struct.network::(anonymous namespace)::EndpointOverride", %"struct.network::(anonymous namespace)::EndpointOverride"* %218, i64 %217
  %221 = ptrtoint %"struct.network::(anonymous namespace)::EndpointOverride"* %220 to i64
  %222 = getelementptr inbounds %"struct.network::(anonymous namespace)::EndpointOverride", %"struct.network::(anonymous namespace)::EndpointOverride"* %219, i64 0, i32 0
  call void @_ZN3net10IPEndPointC1ERKS0_(%"class.net::IPEndPoint"* %222, %"class.net::IPEndPoint"* dereferenceable(20) %75) #12
  %223 = getelementptr inbounds %"struct.network::(anonymous namespace)::EndpointOverride", %"struct.network::(anonymous namespace)::EndpointOverride"* %218, i64 %197, i32 1
  %224 = load i32, i32* %76, align 4, !noalias !2
  store i32 %224, i32* %223, align 4, !noalias !2
  %225 = getelementptr inbounds %"struct.network::(anonymous namespace)::EndpointOverride", %"struct.network::(anonymous namespace)::EndpointOverride"* %219, i64 1
  %226 = ptrtoint %"struct.network::(anonymous namespace)::EndpointOverride"* %225 to i64
  %227 = load %"struct.network::(anonymous namespace)::EndpointOverride"*, %"struct.network::(anonymous namespace)::EndpointOverride"** %34, align 8, !alias.scope !2
  %228 = load %"struct.network::(anonymous namespace)::EndpointOverride"*, %"struct.network::(anonymous namespace)::EndpointOverride"** %35, align 8, !alias.scope !2
  %229 = icmp eq %"struct.network::(anonymous namespace)::EndpointOverride"* %228, %227
  br i1 %229, label %230, label %232

230:                                              ; preds = %216
  %231 = ptrtoint %"struct.network::(anonymous namespace)::EndpointOverride"* %219 to i64
  store i64 %231, i64* %78, align 8, !alias.scope !2
  store i64 %226, i64* %77, align 8, !alias.scope !2
  store i64 %221, i64* %79, align 8, !alias.scope !2
  br label %253

232:                                              ; preds = %216, %232
  %233 = phi %"struct.network::(anonymous namespace)::EndpointOverride"* [ %241, %232 ], [ %219, %216 ]
  %234 = phi %"struct.network::(anonymous namespace)::EndpointOverride"* [ %235, %232 ], [ %228, %216 ]
  %235 = getelementptr inbounds %"struct.network::(anonymous namespace)::EndpointOverride", %"struct.network::(anonymous namespace)::EndpointOverride"* %234, i64 -1
  %236 = getelementptr inbounds %"struct.network::(anonymous namespace)::EndpointOverride", %"struct.network::(anonymous namespace)::EndpointOverride"* %233, i64 -1, i32 0
  %237 = getelementptr inbounds %"struct.network::(anonymous namespace)::EndpointOverride", %"struct.network::(anonymous namespace)::EndpointOverride"* %235, i64 0, i32 0
  call void @_ZN3net10IPEndPointC1ERKS0_(%"class.net::IPEndPoint"* %236, %"class.net::IPEndPoint"* dereferenceable(20) %237) #12
  %238 = getelementptr inbounds %"struct.network::(anonymous namespace)::EndpointOverride", %"struct.network::(anonymous namespace)::EndpointOverride"* %233, i64 -1, i32 1
  %239 = getelementptr inbounds %"struct.network::(anonymous namespace)::EndpointOverride", %"struct.network::(anonymous namespace)::EndpointOverride"* %234, i64 -1, i32 1
  %240 = load i32, i32* %239, align 4
  store i32 %240, i32* %238, align 4, !noalias !2
  %241 = getelementptr inbounds %"struct.network::(anonymous namespace)::EndpointOverride", %"struct.network::(anonymous namespace)::EndpointOverride"* %233, i64 -1
  %242 = icmp eq %"struct.network::(anonymous namespace)::EndpointOverride"* %235, %227
  br i1 %242, label %243, label %232

243:                                              ; preds = %232
  %244 = load %"struct.network::(anonymous namespace)::EndpointOverride"*, %"struct.network::(anonymous namespace)::EndpointOverride"** %34, align 8, !alias.scope !2
  %245 = load %"struct.network::(anonymous namespace)::EndpointOverride"*, %"struct.network::(anonymous namespace)::EndpointOverride"** %35, align 8, !alias.scope !2
  %246 = ptrtoint %"struct.network::(anonymous namespace)::EndpointOverride"* %241 to i64
  store i64 %246, i64* %78, align 8, !alias.scope !2
  store i64 %226, i64* %77, align 8, !alias.scope !2
  store i64 %221, i64* %79, align 8, !alias.scope !2
  %247 = icmp eq %"struct.network::(anonymous namespace)::EndpointOverride"* %245, %244
  br i1 %247, label %253, label %248

248:                                              ; preds = %243, %248
  %249 = phi %"struct.network::(anonymous namespace)::EndpointOverride"* [ %250, %248 ], [ %245, %243 ]
  %250 = getelementptr inbounds %"struct.network::(anonymous namespace)::EndpointOverride", %"struct.network::(anonymous namespace)::EndpointOverride"* %249, i64 -1
  %251 = getelementptr inbounds %"struct.network::(anonymous namespace)::EndpointOverride", %"struct.network::(anonymous namespace)::EndpointOverride"* %250, i64 0, i32 0
  call void @_ZN3net10IPEndPointD1Ev(%"class.net::IPEndPoint"* %251) #12
  %252 = icmp eq %"struct.network::(anonymous namespace)::EndpointOverride"* %250, %244
  br i1 %252, label %253, label %248

253:                                              ; preds = %248, %243, %230
  %254 = phi %"struct.network::(anonymous namespace)::EndpointOverride"* [ %227, %230 ], [ %244, %243 ], [ %244, %248 ]
  %255 = icmp eq %"struct.network::(anonymous namespace)::EndpointOverride"* %254, null
  br i1 %255, label %258, label %256

256:                                              ; preds = %253
  %257 = getelementptr inbounds %"struct.network::(anonymous namespace)::EndpointOverride", %"struct.network::(anonymous namespace)::EndpointOverride"* %254, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i64 0
  call void @_ZdlPv(i8* %257) #13
  br label %258

258:                                              ; preds = %256, %253, %187
  %259 = load i8, i8* %53, align 4, !noalias !2
  %260 = icmp eq i8 %259, 0
  br i1 %260, label %262, label %261

261:                                              ; preds = %258
  call void @_ZN3net10IPEndPointD1Ev(%"class.net::IPEndPoint"* %75) #12
  store i8 0, i8* %53, align 4, !noalias !2
  br label %262

262:                                              ; preds = %261, %258, %179
  call void @llvm.lifetime.end.p0i8(i64 28, i8* nonnull %53) #12, !noalias !2
  %263 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %90, i64 1
  %264 = icmp eq %"class.base::BasicStringPiece"* %263, %50
  br i1 %264, label %80, label %89

265:                                              ; preds = %85, %82
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %46) #12, !noalias !2
  %266 = load %"struct.network::(anonymous namespace)::EndpointOverride"*, %"struct.network::(anonymous namespace)::EndpointOverride"** %34, align 8
  %267 = load %"struct.network::(anonymous namespace)::EndpointOverride"*, %"struct.network::(anonymous namespace)::EndpointOverride"** %35, align 8
  %268 = icmp eq %"struct.network::(anonymous namespace)::EndpointOverride"* %266, %267
  br i1 %268, label %283, label %269

269:                                              ; preds = %265, %273
  %270 = phi %"struct.network::(anonymous namespace)::EndpointOverride"* [ %274, %273 ], [ %266, %265 ]
  %271 = getelementptr inbounds %"struct.network::(anonymous namespace)::EndpointOverride", %"struct.network::(anonymous namespace)::EndpointOverride"* %270, i64 0, i32 0
  %272 = call zeroext i1 @_ZNK3net10IPEndPointeqERKS0_(%"class.net::IPEndPoint"* %271, %"class.net::IPEndPoint"* dereferenceable(20) %0) #12
  br i1 %272, label %276, label %273

273:                                              ; preds = %269
  %274 = getelementptr inbounds %"struct.network::(anonymous namespace)::EndpointOverride", %"struct.network::(anonymous namespace)::EndpointOverride"* %270, i64 1
  %275 = icmp eq %"struct.network::(anonymous namespace)::EndpointOverride"* %274, %267
  br i1 %275, label %279, label %269

276:                                              ; preds = %269
  %277 = getelementptr inbounds %"struct.network::(anonymous namespace)::EndpointOverride", %"struct.network::(anonymous namespace)::EndpointOverride"* %270, i64 0, i32 1
  %278 = load i32, i32* %277, align 4
  br label %279

279:                                              ; preds = %273, %276
  %280 = phi i32 [ %278, %276 ], [ undef, %273 ]
  %281 = phi i8 [ 1, %276 ], [ 0, %273 ]
  %282 = load %"struct.network::(anonymous namespace)::EndpointOverride"*, %"struct.network::(anonymous namespace)::EndpointOverride"** %34, align 8
  br label %283

283:                                              ; preds = %279, %265
  %284 = phi %"struct.network::(anonymous namespace)::EndpointOverride"* [ %282, %279 ], [ %266, %265 ]
  %285 = phi i32 [ %280, %279 ], [ undef, %265 ]
  %286 = phi i8 [ %281, %279 ], [ 0, %265 ]
  %287 = icmp eq %"struct.network::(anonymous namespace)::EndpointOverride"* %284, null
  br i1 %287, label %301, label %288

288:                                              ; preds = %283
  %289 = load %"struct.network::(anonymous namespace)::EndpointOverride"*, %"struct.network::(anonymous namespace)::EndpointOverride"** %35, align 8
  %290 = icmp eq %"struct.network::(anonymous namespace)::EndpointOverride"* %289, %284
  br i1 %290, label %298, label %291

291:                                              ; preds = %288, %291
  %292 = phi %"struct.network::(anonymous namespace)::EndpointOverride"* [ %293, %291 ], [ %289, %288 ]
  %293 = getelementptr inbounds %"struct.network::(anonymous namespace)::EndpointOverride", %"struct.network::(anonymous namespace)::EndpointOverride"* %292, i64 -1
  %294 = getelementptr inbounds %"struct.network::(anonymous namespace)::EndpointOverride", %"struct.network::(anonymous namespace)::EndpointOverride"* %293, i64 0, i32 0
  call void @_ZN3net10IPEndPointD1Ev(%"class.net::IPEndPoint"* %294) #12
  %295 = icmp eq %"struct.network::(anonymous namespace)::EndpointOverride"* %293, %284
  br i1 %295, label %296, label %291

296:                                              ; preds = %291
  %297 = load %"struct.network::(anonymous namespace)::EndpointOverride"*, %"struct.network::(anonymous namespace)::EndpointOverride"** %34, align 8
  br label %298

298:                                              ; preds = %296, %288
  %299 = phi %"struct.network::(anonymous namespace)::EndpointOverride"* [ %297, %296 ], [ %284, %288 ]
  store %"struct.network::(anonymous namespace)::EndpointOverride"* %284, %"struct.network::(anonymous namespace)::EndpointOverride"** %35, align 8
  %300 = getelementptr inbounds %"struct.network::(anonymous namespace)::EndpointOverride", %"struct.network::(anonymous namespace)::EndpointOverride"* %299, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i64 0
  call void @_ZdlPv(i8* %300) #13
  br label %301

301:                                              ; preds = %298, %283
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %33) #12
  %302 = load i8, i8* %38, align 1
  %303 = icmp slt i8 %302, 0
  br i1 %303, label %304, label %306

304:                                              ; preds = %301
  %305 = load i8*, i8** %30, align 8
  call void @_ZdlPv(i8* %305) #13
  br label %306

306:                                              ; preds = %301, %304
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %29) #12
  %307 = icmp eq i8 %286, 0
  br i1 %307, label %308, label %400

308:                                              ; preds = %25, %306
  %309 = getelementptr inbounds %"class.net::IPAddress", %"class.net::IPAddress"* %3, i64 0, i32 0, i32 0, i32 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 17, i8* nonnull %309)
  %310 = getelementptr inbounds %"class.net::IPAddress", %"class.net::IPAddress"* %4, i64 0, i32 0, i32 0, i32 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 17, i8* nonnull %310)
  %311 = getelementptr inbounds %"class.net::IPAddress", %"class.net::IPAddress"* %5, i64 0, i32 0, i32 0, i32 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 17, i8* nonnull %311)
  %312 = getelementptr inbounds %"class.net::IPAddress", %"class.net::IPAddress"* %6, i64 0, i32 0, i32 0, i32 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 17, i8* nonnull %312)
  %313 = getelementptr inbounds %"class.net::IPAddress", %"class.net::IPAddress"* %7, i64 0, i32 0, i32 0, i32 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 17, i8* nonnull %313)
  %314 = getelementptr inbounds %"class.net::IPAddress", %"class.net::IPAddress"* %8, i64 0, i32 0, i32 0, i32 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 17, i8* nonnull %314)
  %315 = getelementptr inbounds %"class.net::IPAddress", %"class.net::IPAddress"* %9, i64 0, i32 0, i32 0, i32 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 17, i8* nonnull %315)
  %316 = getelementptr inbounds %"class.net::IPAddress", %"class.net::IPAddress"* %10, i64 0, i32 0, i32 0, i32 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 17, i8* nonnull %316)
  %317 = load atomic i8, i8* bitcast (i64* @_ZGVZN7network12_GLOBAL__N_124NonPublicAddressSpaceMapEvE4kMap to i8*) acquire, align 8
  %318 = icmp eq i8 %317, 0
  br i1 %318, label %319, label %384, !prof !16

319:                                              ; preds = %308
  %320 = call i32 @__cxa_guard_acquire(i64* nonnull @_ZGVZN7network12_GLOBAL__N_124NonPublicAddressSpaceMapEvE4kMap) #12
  %321 = icmp eq i32 %320, 0
  br i1 %321, label %384, label %322

322:                                              ; preds = %319
  %323 = getelementptr inbounds [8 x %"class.network::(anonymous namespace)::AddressSpaceMapEntry"], [8 x %"class.network::(anonymous namespace)::AddressSpaceMapEntry"]* %2, i64 0, i64 0, i32 0, i32 0, i32 0, i32 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 320, i8* nonnull %323) #12
  call void @_ZN3net9IPAddress13IPv6LocalhostEv(%"class.net::IPAddress"* nonnull sret %3) #12
  %324 = getelementptr inbounds [8 x %"class.network::(anonymous namespace)::AddressSpaceMapEntry"], [8 x %"class.network::(anonymous namespace)::AddressSpaceMapEntry"]* %2, i64 0, i64 0, i32 0
  call void @_ZN3net9IPAddressC1ERKS0_(%"class.net::IPAddress"* nonnull %324, %"class.net::IPAddress"* nonnull dereferenceable(17) %3) #12
  %325 = getelementptr inbounds [8 x %"class.network::(anonymous namespace)::AddressSpaceMapEntry"], [8 x %"class.network::(anonymous namespace)::AddressSpaceMapEntry"]* %2, i64 0, i64 0, i32 2
  store i64 128, i64* %325, align 8
  %326 = getelementptr inbounds [8 x %"class.network::(anonymous namespace)::AddressSpaceMapEntry"], [8 x %"class.network::(anonymous namespace)::AddressSpaceMapEntry"]* %2, i64 0, i64 0, i32 3
  store i32 0, i32* %326, align 8
  call void @_ZN3net9IPAddressC1Ehhhhhhhhhhhhhhhh(%"class.net::IPAddress"* nonnull %4, i8 zeroext -4, i8 zeroext 0, i8 zeroext 0, i8 zeroext 0, i8 zeroext 0, i8 zeroext 0, i8 zeroext 0, i8 zeroext 0, i8 zeroext 0, i8 zeroext 0, i8 zeroext 0, i8 zeroext 0, i8 zeroext 0, i8 zeroext 0, i8 zeroext 0, i8 zeroext 0) #12
  %327 = getelementptr inbounds [8 x %"class.network::(anonymous namespace)::AddressSpaceMapEntry"], [8 x %"class.network::(anonymous namespace)::AddressSpaceMapEntry"]* %2, i64 0, i64 1, i32 0
  call void @_ZN3net9IPAddressC1ERKS0_(%"class.net::IPAddress"* %327, %"class.net::IPAddress"* nonnull dereferenceable(17) %4) #12
  %328 = getelementptr inbounds [8 x %"class.network::(anonymous namespace)::AddressSpaceMapEntry"], [8 x %"class.network::(anonymous namespace)::AddressSpaceMapEntry"]* %2, i64 0, i64 1, i32 2
  store i64 7, i64* %328, align 8
  %329 = getelementptr inbounds [8 x %"class.network::(anonymous namespace)::AddressSpaceMapEntry"], [8 x %"class.network::(anonymous namespace)::AddressSpaceMapEntry"]* %2, i64 0, i64 1, i32 3
  store i32 1, i32* %329, align 8
  call void @_ZN3net9IPAddressC1Ehhhhhhhhhhhhhhhh(%"class.net::IPAddress"* nonnull %5, i8 zeroext -2, i8 zeroext -128, i8 zeroext 0, i8 zeroext 0, i8 zeroext 0, i8 zeroext 0, i8 zeroext 0, i8 zeroext 0, i8 zeroext 0, i8 zeroext 0, i8 zeroext 0, i8 zeroext 0, i8 zeroext 0, i8 zeroext 0, i8 zeroext 0, i8 zeroext 0) #12
  %330 = getelementptr inbounds [8 x %"class.network::(anonymous namespace)::AddressSpaceMapEntry"], [8 x %"class.network::(anonymous namespace)::AddressSpaceMapEntry"]* %2, i64 0, i64 2, i32 0
  call void @_ZN3net9IPAddressC1ERKS0_(%"class.net::IPAddress"* %330, %"class.net::IPAddress"* nonnull dereferenceable(17) %5) #12
  %331 = getelementptr inbounds [8 x %"class.network::(anonymous namespace)::AddressSpaceMapEntry"], [8 x %"class.network::(anonymous namespace)::AddressSpaceMapEntry"]* %2, i64 0, i64 2, i32 2
  store i64 10, i64* %331, align 8
  %332 = getelementptr inbounds [8 x %"class.network::(anonymous namespace)::AddressSpaceMapEntry"], [8 x %"class.network::(anonymous namespace)::AddressSpaceMapEntry"]* %2, i64 0, i64 2, i32 3
  store i32 1, i32* %332, align 8
  call void @_ZN3net9IPAddressC1Ehhhh(%"class.net::IPAddress"* nonnull %6, i8 zeroext 127, i8 zeroext 0, i8 zeroext 0, i8 zeroext 0) #12
  %333 = getelementptr inbounds [8 x %"class.network::(anonymous namespace)::AddressSpaceMapEntry"], [8 x %"class.network::(anonymous namespace)::AddressSpaceMapEntry"]* %2, i64 0, i64 3, i32 0
  call void @_ZN3net9IPAddressC1ERKS0_(%"class.net::IPAddress"* %333, %"class.net::IPAddress"* nonnull dereferenceable(17) %6) #12
  %334 = getelementptr inbounds [8 x %"class.network::(anonymous namespace)::AddressSpaceMapEntry"], [8 x %"class.network::(anonymous namespace)::AddressSpaceMapEntry"]* %2, i64 0, i64 3, i32 2
  store i64 8, i64* %334, align 8
  %335 = getelementptr inbounds [8 x %"class.network::(anonymous namespace)::AddressSpaceMapEntry"], [8 x %"class.network::(anonymous namespace)::AddressSpaceMapEntry"]* %2, i64 0, i64 3, i32 3
  store i32 0, i32* %335, align 8
  call void @_ZN3net9IPAddressC1Ehhhh(%"class.net::IPAddress"* nonnull %7, i8 zeroext 10, i8 zeroext 0, i8 zeroext 0, i8 zeroext 0) #12
  %336 = getelementptr inbounds [8 x %"class.network::(anonymous namespace)::AddressSpaceMapEntry"], [8 x %"class.network::(anonymous namespace)::AddressSpaceMapEntry"]* %2, i64 0, i64 4, i32 0
  call void @_ZN3net9IPAddressC1ERKS0_(%"class.net::IPAddress"* %336, %"class.net::IPAddress"* nonnull dereferenceable(17) %7) #12
  %337 = getelementptr inbounds [8 x %"class.network::(anonymous namespace)::AddressSpaceMapEntry"], [8 x %"class.network::(anonymous namespace)::AddressSpaceMapEntry"]* %2, i64 0, i64 4, i32 2
  store i64 8, i64* %337, align 8
  %338 = getelementptr inbounds [8 x %"class.network::(anonymous namespace)::AddressSpaceMapEntry"], [8 x %"class.network::(anonymous namespace)::AddressSpaceMapEntry"]* %2, i64 0, i64 4, i32 3
  store i32 1, i32* %338, align 8
  call void @_ZN3net9IPAddressC1Ehhhh(%"class.net::IPAddress"* nonnull %8, i8 zeroext -84, i8 zeroext 16, i8 zeroext 0, i8 zeroext 0) #12
  %339 = getelementptr inbounds [8 x %"class.network::(anonymous namespace)::AddressSpaceMapEntry"], [8 x %"class.network::(anonymous namespace)::AddressSpaceMapEntry"]* %2, i64 0, i64 5, i32 0
  call void @_ZN3net9IPAddressC1ERKS0_(%"class.net::IPAddress"* %339, %"class.net::IPAddress"* nonnull dereferenceable(17) %8) #12
  %340 = getelementptr inbounds [8 x %"class.network::(anonymous namespace)::AddressSpaceMapEntry"], [8 x %"class.network::(anonymous namespace)::AddressSpaceMapEntry"]* %2, i64 0, i64 5, i32 2
  store i64 12, i64* %340, align 8
  %341 = getelementptr inbounds [8 x %"class.network::(anonymous namespace)::AddressSpaceMapEntry"], [8 x %"class.network::(anonymous namespace)::AddressSpaceMapEntry"]* %2, i64 0, i64 5, i32 3
  store i32 1, i32* %341, align 8
  call void @_ZN3net9IPAddressC1Ehhhh(%"class.net::IPAddress"* nonnull %9, i8 zeroext -64, i8 zeroext -88, i8 zeroext 0, i8 zeroext 0) #12
  %342 = getelementptr inbounds [8 x %"class.network::(anonymous namespace)::AddressSpaceMapEntry"], [8 x %"class.network::(anonymous namespace)::AddressSpaceMapEntry"]* %2, i64 0, i64 6, i32 0
  call void @_ZN3net9IPAddressC1ERKS0_(%"class.net::IPAddress"* %342, %"class.net::IPAddress"* nonnull dereferenceable(17) %9) #12
  %343 = getelementptr inbounds [8 x %"class.network::(anonymous namespace)::AddressSpaceMapEntry"], [8 x %"class.network::(anonymous namespace)::AddressSpaceMapEntry"]* %2, i64 0, i64 6, i32 2
  store i64 16, i64* %343, align 8
  %344 = getelementptr inbounds [8 x %"class.network::(anonymous namespace)::AddressSpaceMapEntry"], [8 x %"class.network::(anonymous namespace)::AddressSpaceMapEntry"]* %2, i64 0, i64 6, i32 3
  store i32 1, i32* %344, align 8
  call void @_ZN3net9IPAddressC1Ehhhh(%"class.net::IPAddress"* nonnull %10, i8 zeroext -87, i8 zeroext -2, i8 zeroext 0, i8 zeroext 0) #12
  %345 = getelementptr inbounds [8 x %"class.network::(anonymous namespace)::AddressSpaceMapEntry"], [8 x %"class.network::(anonymous namespace)::AddressSpaceMapEntry"]* %2, i64 0, i64 7, i32 0
  call void @_ZN3net9IPAddressC1ERKS0_(%"class.net::IPAddress"* %345, %"class.net::IPAddress"* nonnull dereferenceable(17) %10) #12
  %346 = getelementptr inbounds [8 x %"class.network::(anonymous namespace)::AddressSpaceMapEntry"], [8 x %"class.network::(anonymous namespace)::AddressSpaceMapEntry"]* %2, i64 0, i64 7, i32 2
  store i64 16, i64* %346, align 8
  %347 = getelementptr inbounds [8 x %"class.network::(anonymous namespace)::AddressSpaceMapEntry"], [8 x %"class.network::(anonymous namespace)::AddressSpaceMapEntry"]* %2, i64 0, i64 7, i32 3
  store i32 1, i32* %347, align 8
  %348 = call i8* @_Znwm(i64 320) #13
  %349 = ptrtoint i8* %348 to i64
  %350 = getelementptr inbounds i8, i8* %348, i64 320
  %351 = ptrtoint i8* %350 to i64
  %352 = bitcast i8* %348 to %"class.net::IPAddress"*
  call void @_ZN3net9IPAddressC1ERKS0_(%"class.net::IPAddress"* nonnull %352, %"class.net::IPAddress"* nonnull dereferenceable(17) %324) #12
  %353 = getelementptr inbounds i8, i8* %348, i64 24
  %354 = bitcast i64* %325 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %353, i8* align 8 %354, i64 12, i1 false) #12
  %355 = getelementptr inbounds i8, i8* %348, i64 40
  %356 = bitcast i8* %355 to %"class.net::IPAddress"*
  call void @_ZN3net9IPAddressC1ERKS0_(%"class.net::IPAddress"* %356, %"class.net::IPAddress"* dereferenceable(17) %327) #12
  %357 = getelementptr inbounds i8, i8* %348, i64 64
  %358 = bitcast i64* %328 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %357, i8* align 8 %358, i64 12, i1 false) #12
  %359 = getelementptr inbounds i8, i8* %348, i64 80
  %360 = bitcast i8* %359 to %"class.net::IPAddress"*
  call void @_ZN3net9IPAddressC1ERKS0_(%"class.net::IPAddress"* %360, %"class.net::IPAddress"* dereferenceable(17) %330) #12
  %361 = getelementptr inbounds i8, i8* %348, i64 104
  %362 = bitcast i64* %331 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %361, i8* align 8 %362, i64 12, i1 false) #12
  %363 = getelementptr inbounds i8, i8* %348, i64 120
  %364 = bitcast i8* %363 to %"class.net::IPAddress"*
  call void @_ZN3net9IPAddressC1ERKS0_(%"class.net::IPAddress"* %364, %"class.net::IPAddress"* dereferenceable(17) %333) #12
  %365 = getelementptr inbounds i8, i8* %348, i64 144
  %366 = bitcast i64* %334 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %365, i8* align 8 %366, i64 12, i1 false) #12
  %367 = getelementptr inbounds i8, i8* %348, i64 160
  %368 = bitcast i8* %367 to %"class.net::IPAddress"*
  call void @_ZN3net9IPAddressC1ERKS0_(%"class.net::IPAddress"* %368, %"class.net::IPAddress"* dereferenceable(17) %336) #12
  %369 = getelementptr inbounds i8, i8* %348, i64 184
  %370 = bitcast i64* %337 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %369, i8* align 8 %370, i64 12, i1 false) #12
  %371 = getelementptr inbounds i8, i8* %348, i64 200
  %372 = bitcast i8* %371 to %"class.net::IPAddress"*
  call void @_ZN3net9IPAddressC1ERKS0_(%"class.net::IPAddress"* %372, %"class.net::IPAddress"* dereferenceable(17) %339) #12
  %373 = getelementptr inbounds i8, i8* %348, i64 224
  %374 = bitcast i64* %340 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %373, i8* align 8 %374, i64 12, i1 false) #12
  %375 = getelementptr inbounds i8, i8* %348, i64 240
  %376 = bitcast i8* %375 to %"class.net::IPAddress"*
  call void @_ZN3net9IPAddressC1ERKS0_(%"class.net::IPAddress"* %376, %"class.net::IPAddress"* dereferenceable(17) %342) #12
  %377 = getelementptr inbounds i8, i8* %348, i64 264
  %378 = bitcast i64* %343 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %377, i8* align 8 %378, i64 12, i1 false) #12
  %379 = getelementptr inbounds i8, i8* %348, i64 280
  %380 = bitcast i8* %379 to %"class.net::IPAddress"*
  call void @_ZN3net9IPAddressC1ERKS0_(%"class.net::IPAddress"* %380, %"class.net::IPAddress"* dereferenceable(17) %345) #12
  %381 = getelementptr inbounds i8, i8* %348, i64 304
  %382 = bitcast i64* %346 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %381, i8* align 8 %382, i64 12, i1 false) #12
  store i64 %349, i64* bitcast (%"class.base::NoDestructor"* @_ZZN7network12_GLOBAL__N_124NonPublicAddressSpaceMapEvE4kMap to i64*), align 8
  store i64 %351, i64* bitcast (i8* getelementptr inbounds (%"class.base::NoDestructor", %"class.base::NoDestructor"* @_ZZN7network12_GLOBAL__N_124NonPublicAddressSpaceMapEvE4kMap, i64 0, i32 0, i64 8) to i64*), align 8
  store i64 %351, i64* bitcast (i8* getelementptr inbounds (%"class.base::NoDestructor", %"class.base::NoDestructor"* @_ZZN7network12_GLOBAL__N_124NonPublicAddressSpaceMapEvE4kMap, i64 0, i32 0, i64 16) to i64*), align 8
  call void @_ZN3net9IPAddressD1Ev(%"class.net::IPAddress"* %345) #12
  call void @_ZN3net9IPAddressD1Ev(%"class.net::IPAddress"* %342) #12
  call void @_ZN3net9IPAddressD1Ev(%"class.net::IPAddress"* %339) #12
  call void @_ZN3net9IPAddressD1Ev(%"class.net::IPAddress"* %336) #12
  call void @_ZN3net9IPAddressD1Ev(%"class.net::IPAddress"* %333) #12
  call void @_ZN3net9IPAddressD1Ev(%"class.net::IPAddress"* %330) #12
  call void @_ZN3net9IPAddressD1Ev(%"class.net::IPAddress"* %327) #12
  call void @_ZN3net9IPAddressD1Ev(%"class.net::IPAddress"* nonnull %324) #12
  call void @_ZN3net9IPAddressD1Ev(%"class.net::IPAddress"* nonnull %10) #12
  call void @_ZN3net9IPAddressD1Ev(%"class.net::IPAddress"* nonnull %9) #12
  call void @_ZN3net9IPAddressD1Ev(%"class.net::IPAddress"* nonnull %8) #12
  call void @_ZN3net9IPAddressD1Ev(%"class.net::IPAddress"* nonnull %7) #12
  call void @_ZN3net9IPAddressD1Ev(%"class.net::IPAddress"* nonnull %6) #12
  call void @_ZN3net9IPAddressD1Ev(%"class.net::IPAddress"* nonnull %5) #12
  call void @_ZN3net9IPAddressD1Ev(%"class.net::IPAddress"* nonnull %4) #12
  call void @_ZN3net9IPAddressD1Ev(%"class.net::IPAddress"* nonnull %3) #12
  call void @llvm.lifetime.end.p0i8(i64 320, i8* nonnull %323) #12
  %383 = call {}* @llvm.invariant.start.p0i8(i64 24, i8* getelementptr inbounds (%"class.base::NoDestructor", %"class.base::NoDestructor"* @_ZZN7network12_GLOBAL__N_124NonPublicAddressSpaceMapEvE4kMap, i64 0, i32 0, i64 0)) #12
  call void @__cxa_guard_release(i64* nonnull @_ZGVZN7network12_GLOBAL__N_124NonPublicAddressSpaceMapEvE4kMap) #12
  br label %384

384:                                              ; preds = %308, %319, %322
  call void @llvm.lifetime.end.p0i8(i64 17, i8* nonnull %309)
  call void @llvm.lifetime.end.p0i8(i64 17, i8* nonnull %310)
  call void @llvm.lifetime.end.p0i8(i64 17, i8* nonnull %311)
  call void @llvm.lifetime.end.p0i8(i64 17, i8* nonnull %312)
  call void @llvm.lifetime.end.p0i8(i64 17, i8* nonnull %313)
  call void @llvm.lifetime.end.p0i8(i64 17, i8* nonnull %314)
  call void @llvm.lifetime.end.p0i8(i64 17, i8* nonnull %315)
  call void @llvm.lifetime.end.p0i8(i64 17, i8* nonnull %316)
  %385 = load %"class.network::(anonymous namespace)::AddressSpaceMapEntry"*, %"class.network::(anonymous namespace)::AddressSpaceMapEntry"** bitcast (%"class.base::NoDestructor"* @_ZZN7network12_GLOBAL__N_124NonPublicAddressSpaceMapEvE4kMap to %"class.network::(anonymous namespace)::AddressSpaceMapEntry"**), align 8
  %386 = load %"class.network::(anonymous namespace)::AddressSpaceMapEntry"*, %"class.network::(anonymous namespace)::AddressSpaceMapEntry"** bitcast (i8* getelementptr inbounds (%"class.base::NoDestructor", %"class.base::NoDestructor"* @_ZZN7network12_GLOBAL__N_124NonPublicAddressSpaceMapEvE4kMap, i64 0, i32 0, i64 8) to %"class.network::(anonymous namespace)::AddressSpaceMapEntry"**), align 8
  %387 = icmp eq %"class.network::(anonymous namespace)::AddressSpaceMapEntry"* %385, %386
  br i1 %387, label %400, label %388

388:                                              ; preds = %384, %397
  %389 = phi %"class.network::(anonymous namespace)::AddressSpaceMapEntry"* [ %398, %397 ], [ %385, %384 ]
  %390 = getelementptr inbounds %"class.network::(anonymous namespace)::AddressSpaceMapEntry", %"class.network::(anonymous namespace)::AddressSpaceMapEntry"* %389, i64 0, i32 0
  %391 = getelementptr inbounds %"class.network::(anonymous namespace)::AddressSpaceMapEntry", %"class.network::(anonymous namespace)::AddressSpaceMapEntry"* %389, i64 0, i32 2
  %392 = load i64, i64* %391, align 8
  %393 = call zeroext i1 @_ZN3net22IPAddressMatchesPrefixERKNS_9IPAddressES2_m(%"class.net::IPAddress"* dereferenceable(17) %23, %"class.net::IPAddress"* dereferenceable(17) %390, i64 %392) #12
  br i1 %393, label %394, label %397

394:                                              ; preds = %388
  %395 = getelementptr inbounds %"class.network::(anonymous namespace)::AddressSpaceMapEntry", %"class.network::(anonymous namespace)::AddressSpaceMapEntry"* %389, i64 0, i32 3
  %396 = load i32, i32* %395, align 4
  br label %400

397:                                              ; preds = %388
  %398 = getelementptr inbounds %"class.network::(anonymous namespace)::AddressSpaceMapEntry", %"class.network::(anonymous namespace)::AddressSpaceMapEntry"* %389, i64 1
  %399 = icmp eq %"class.network::(anonymous namespace)::AddressSpaceMapEntry"* %398, %386
  br i1 %399, label %400, label %388

400:                                              ; preds = %397, %394, %384, %306, %1
  %401 = phi i32 [ 3, %1 ], [ %285, %306 ], [ 2, %384 ], [ %396, %394 ], [ 2, %397 ]
  ret i32 %401
}

declare zeroext i1 @_ZNK3net9IPAddress7IsValidEv(%"class.net::IPAddress"*) local_unnamed_addr #1

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #2

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden zeroext i1 @_ZN7network24IsLessPublicAddressSpaceENS_5mojom14IPAddressSpaceES1_(i32, i32) local_unnamed_addr #3 {
  %3 = icmp eq i32 %0, 3
  %4 = select i1 %3, i32 2, i32 %0
  %5 = icmp eq i32 %1, 3
  %6 = select i1 %5, i32 2, i32 %1
  %7 = icmp slt i32 %4, %6
  ret i1 %7
}

declare %"class.base::CommandLine"* @_ZN4base11CommandLine17ForCurrentProcessEv() local_unnamed_addr #1

declare zeroext i1 @_ZNK4base11CommandLine9HasSwitchEPKc(%"class.base::CommandLine"*, i8*) local_unnamed_addr #1

declare void @_ZNK4base11CommandLine19GetSwitchValueASCIIENS_16BasicStringPieceIcNSt3__111char_traitsIcEEEE(%"class.std::__1::basic_string"* sret, %"class.base::CommandLine"*, i8*, i64) local_unnamed_addr #1

declare zeroext i1 @_ZNK3net10IPEndPointeqERKS0_(%"class.net::IPEndPoint"*, %"class.net::IPEndPoint"* dereferenceable(20)) local_unnamed_addr #1

; Function Attrs: argmemonly nofree nounwind readonly
declare i64 @strlen(i8* nocapture) local_unnamed_addr #4

declare void @_ZN4base16SplitStringPieceENS_16BasicStringPieceIcNSt3__111char_traitsIcEEEES4_NS_18WhitespaceHandlingENS_11SplitResultE(%"class.std::__1::vector.29"* sret, i8*, i64, i8*, i64, i32, i32) local_unnamed_addr #1

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #2

; Function Attrs: nounwind ssp uwtable
declare { i8*, i64 } @_ZNK4base16BasicStringPieceIcNSt3__111char_traitsIcEEE6substrEmm(%"class.base::BasicStringPiece"*, i64, i64) local_unnamed_addr #0 align 2

declare void @_ZN3net9IPAddressC1Ev(%"class.net::IPAddress"*) unnamed_addr #1

declare zeroext i1 @_ZN3net25ParseURLHostnameToAddressERKN4base16BasicStringPieceIcNSt3__111char_traitsIcEEEEPNS_9IPAddressE(%"class.base::BasicStringPiece"* dereferenceable(16), %"class.net::IPAddress"*) local_unnamed_addr #1

declare zeroext i1 @_ZN4base12StringToUintENS_16BasicStringPieceIcNSt3__111char_traitsIcEEEEPj(i8*, i64, i32*) local_unnamed_addr #1

declare void @_ZN3net10IPEndPointC1ERKNS_9IPAddressEt(%"class.net::IPEndPoint"*, %"class.net::IPAddress"* dereferenceable(17), i16 zeroext) unnamed_addr #1

; Function Attrs: nounwind
declare void @_ZN3net10IPEndPointD1Ev(%"class.net::IPEndPoint"*) unnamed_addr #5

; Function Attrs: nounwind
declare void @_ZN3net9IPAddressD1Ev(%"class.net::IPAddress"*) unnamed_addr #5

; Function Attrs: cold noreturn nounwind
declare void @llvm.trap() #6

declare void @_ZN3net10IPEndPointC1ERKS0_(%"class.net::IPEndPoint"*, %"class.net::IPEndPoint"* dereferenceable(20)) unnamed_addr #1

declare void @_ZN3net10IPEndPointC1Ev(%"class.net::IPEndPoint"*) unnamed_addr #1

; Function Attrs: noreturn
declare void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"*) local_unnamed_addr #7

; Function Attrs: nobuiltin nofree
declare noalias nonnull i8* @_Znwm(i64) local_unnamed_addr #8

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #9

; Function Attrs: nofree nounwind
declare i32 @__cxa_guard_acquire(i64*) local_unnamed_addr #10

declare void @_ZN3net9IPAddress13IPv6LocalhostEv(%"class.net::IPAddress"* sret) local_unnamed_addr #1

declare void @_ZN3net9IPAddressC1Ehhhhhhhhhhhhhhhh(%"class.net::IPAddress"*, i8 zeroext, i8 zeroext, i8 zeroext, i8 zeroext, i8 zeroext, i8 zeroext, i8 zeroext, i8 zeroext, i8 zeroext, i8 zeroext, i8 zeroext, i8 zeroext, i8 zeroext, i8 zeroext, i8 zeroext, i8 zeroext) unnamed_addr #1

declare void @_ZN3net9IPAddressC1Ehhhh(%"class.net::IPAddress"*, i8 zeroext, i8 zeroext, i8 zeroext, i8 zeroext) unnamed_addr #1

; Function Attrs: argmemonly nounwind
declare {}* @llvm.invariant.start.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare void @__cxa_guard_release(i64*) local_unnamed_addr #10

declare void @_ZN3net9IPAddressC1ERKS0_(%"class.net::IPAddress"*, %"class.net::IPAddress"* dereferenceable(17)) unnamed_addr #1

declare zeroext i1 @_ZN3net22IPAddressMatchesPrefixERKNS_9IPAddressES2_m(%"class.net::IPAddress"* dereferenceable(17), %"class.net::IPAddress"* dereferenceable(17), i64) local_unnamed_addr #1

; Function Attrs: nofree nounwind readonly
declare i32 @bcmp(i8* nocapture, i8* nocapture, i64) local_unnamed_addr #11

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind }
attributes #3 = { norecurse nounwind readnone ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { argmemonly nofree nounwind readonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { cold noreturn nounwind }
attributes #7 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { nobuiltin nofree "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #9 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #10 = { nofree nounwind }
attributes #11 = { nofree nounwind readonly }
attributes #12 = { nounwind }
attributes #13 = { builtin nounwind }
attributes #14 = { noreturn nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{!3}
!3 = distinct !{!3, !4, !"_ZN7network12_GLOBAL__N_125ParseEndpointOverrideListEN4base16BasicStringPieceIcNSt3__111char_traitsIcEEEE: argument 0"}
!4 = distinct !{!4, !"_ZN7network12_GLOBAL__N_125ParseEndpointOverrideListEN4base16BasicStringPieceIcNSt3__111char_traitsIcEEEE"}
!5 = !{!6, !3}
!6 = distinct !{!6, !7, !"_ZN7network12_GLOBAL__N_121ParseEndpointOverrideEN4base16BasicStringPieceIcNSt3__111char_traitsIcEEEE: argument 0"}
!7 = distinct !{!7, !"_ZN7network12_GLOBAL__N_121ParseEndpointOverrideEN4base16BasicStringPieceIcNSt3__111char_traitsIcEEEE"}
!8 = !{!6}
!9 = !{!10, !6, !3}
!10 = distinct !{!10, !11, !"_ZN7network12_GLOBAL__N_113ParseEndpointEN4base16BasicStringPieceIcNSt3__111char_traitsIcEEEE: argument 0"}
!11 = distinct !{!11, !"_ZN7network12_GLOBAL__N_113ParseEndpointEN4base16BasicStringPieceIcNSt3__111char_traitsIcEEEE"}
!12 = !{!10, !6}
!13 = !{!10}
!14 = !{i8 0, i8 2}
!15 = !{!"branch_weights", i32 1, i32 2000}
!16 = !{!"branch_weights", i32 1, i32 1048575}
