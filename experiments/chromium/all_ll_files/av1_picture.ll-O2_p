; ModuleID = '../../media/gpu/av1_picture.cc'
source_filename = "../../media/gpu/av1_picture.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.media::AV1Picture" = type { %"class.media::CodecPicture.base", %"struct.libgav1::ObuFrameHeader" }
%"class.media::CodecPicture.base" = type <{ i32 (...)**, %"class.base::RefCountedThreadSafe", i32, %"class.gfx::Rect", %"class.std::__1::unique_ptr", %"class.media::VideoColorSpace" }>
%"class.base::RefCountedThreadSafe" = type { %"class.base::subtle::RefCountedThreadSafeBase" }
%"class.base::subtle::RefCountedThreadSafeBase" = type { %"class.base::AtomicRefCount" }
%"class.base::AtomicRefCount" = type { %"struct.std::__1::atomic" }
%"struct.std::__1::atomic" = type { %"struct.std::__1::__atomic_base" }
%"struct.std::__1::__atomic_base" = type { %"struct.std::__1::__atomic_base.0" }
%"struct.std::__1::__atomic_base.0" = type { %"struct.std::__1::__cxx_atomic_impl" }
%"struct.std::__1::__cxx_atomic_impl" = type { %"struct.std::__1::__cxx_atomic_base_impl" }
%"struct.std::__1::__cxx_atomic_base_impl" = type { i32 }
%"class.gfx::Rect" = type { %"class.gfx::Point", %"class.gfx::Size" }
%"class.gfx::Point" = type { i32, i32 }
%"class.gfx::Size" = type { i32, i32 }
%"class.std::__1::unique_ptr" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %"class.media::DecryptConfig"* }
%"class.media::DecryptConfig" = type <{ i32, [4 x i8], %"class.std::__1::basic_string", %"class.std::__1::basic_string", %"class.std::__1::vector", %"class.absl::optional", [4 x i8] }>
%"class.std::__1::basic_string" = type { %"class.std::__1::__compressed_pair.1" }
%"class.std::__1::__compressed_pair.1" = type { %"struct.std::__1::__compressed_pair_elem.2" }
%"struct.std::__1::__compressed_pair_elem.2" = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" = type { %union.anon }
%union.anon = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" = type { i8*, i64, i64 }
%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { %"struct.media::SubsampleEntry"*, %"struct.media::SubsampleEntry"*, %"class.std::__1::__compressed_pair.4" }
%"struct.media::SubsampleEntry" = type { i32, i32 }
%"class.std::__1::__compressed_pair.4" = type { %"struct.std::__1::__compressed_pair_elem.5" }
%"struct.std::__1::__compressed_pair_elem.5" = type { %"struct.media::SubsampleEntry"* }
%"class.absl::optional" = type { %"class.absl::optional_internal::optional_data" }
%"class.absl::optional_internal::optional_data" = type { %"class.absl::optional_internal::optional_data_base" }
%"class.absl::optional_internal::optional_data_base" = type { %"class.absl::optional_internal::optional_data_dtor_base" }
%"class.absl::optional_internal::optional_data_dtor_base" = type { i8, %union.anon.9 }
%union.anon.9 = type { %"class.media::EncryptionPattern" }
%"class.media::EncryptionPattern" = type { i32, i32 }
%"class.media::VideoColorSpace" = type { i8, i8, i8, i8 }
%"struct.libgav1::ObuFrameHeader" = type { i16, i16, i64, [7 x i16], i32, i32, i32, i32, i32, i32, i32, %"struct.libgav1::LoopRestoration", [32 x i32], i32, %"struct.std::__1::array", %"struct.libgav1::TileInfo", %"struct.libgav1::QuantizerParameters", %"struct.libgav1::Segmentation", i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, [2 x i8], i8, i8, i8, %"struct.libgav1::Delta", %"struct.libgav1::Delta", [7 x i8], [8 x i8], %"struct.libgav1::LoopFilter", %"struct.libgav1::Cdef", %"struct.libgav1::FilmGrainParams" }
%"struct.libgav1::LoopRestoration" = type { [3 x i8], [3 x i32] }
%"struct.std::__1::array" = type { [8 x %"struct.libgav1::GlobalMotion"] }
%"struct.libgav1::GlobalMotion" = type { i8, [6 x i32], i16, i16, i16, i16 }
%"struct.libgav1::TileInfo" = type { i8, i32, i32, i32, i32, i32, [65 x i32], [65 x i32], i32, i32, [65 x i32], [65 x i32], i16, i8 }
%"struct.libgav1::QuantizerParameters" = type { i8, [3 x i8], [3 x i8], i8, [3 x i8] }
%"struct.libgav1::Segmentation" = type { i8, i8, i8, i8, i8, i8, [8 x [8 x i8]], [8 x [8 x i16]], [8 x i8], [8 x i8] }
%"struct.libgav1::Delta" = type { i8, i8, i8 }
%"struct.libgav1::LoopFilter" = type { %"struct.std::__1::array.11", i8, i8, i8, %"struct.std::__1::array.12", %"struct.std::__1::array.13" }
%"struct.std::__1::array.11" = type { [4 x i8] }
%"struct.std::__1::array.12" = type { [8 x i8] }
%"struct.std::__1::array.13" = type { [2 x i8] }
%"struct.libgav1::Cdef" = type { i8, i8, [8 x i8], [8 x i8], [8 x i8], [8 x i8] }
%"struct.libgav1::FilmGrainParams" = type { i8, i8, i8, i8, i8, i8, i8, i8, [14 x i8], [14 x i8], [10 x i8], [10 x i8], [10 x i8], [10 x i8], i8, i8, [24 x i8], [25 x i8], [25 x i8], i8, i16, i32, i32, i8, i8, i16, i8, i8, i16 }
%"class.media::CodecPicture" = type <{ i32 (...)**, %"class.base::RefCountedThreadSafe", i32, %"class.gfx::Rect", %"class.std::__1::unique_ptr", %"class.media::VideoColorSpace", [4 x i8] }>

@_ZTVN5media10AV1PictureE = hidden unnamed_addr constant { [5 x i8*] } { [5 x i8*] [i8* null, i8* null, i8* bitcast (void (%"class.media::AV1Picture"*)* @_ZN5media10AV1PictureD2Ev to i8*), i8* bitcast (void (%"class.media::AV1Picture"*)* @_ZN5media10AV1PictureD0Ev to i8*), i8* bitcast (%"class.media::AV1Picture"* (%"class.media::AV1Picture"*)* @_ZN5media10AV1Picture15CreateDuplicateEv to i8*)] }, align 8

@_ZN5media10AV1PictureC1Ev = hidden unnamed_addr alias void (%"class.media::AV1Picture"*), void (%"class.media::AV1Picture"*)* @_ZN5media10AV1PictureC2Ev
@_ZN5media10AV1PictureD1Ev = hidden unnamed_addr alias void (%"class.media::AV1Picture"*), void (%"class.media::AV1Picture"*)* @_ZN5media10AV1PictureD2Ev

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5media10AV1PictureC2Ev(%"class.media::AV1Picture"*) unnamed_addr #0 align 2 {
  %2 = bitcast %"class.media::AV1Picture"* %0 to %"class.media::CodecPicture"*
  tail call void @_ZN5media12CodecPictureC2Ev(%"class.media::CodecPicture"* %2) #6
  %3 = getelementptr inbounds %"class.media::AV1Picture", %"class.media::AV1Picture"* %0, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [5 x i8*] }, { [5 x i8*] }* @_ZTVN5media10AV1PictureE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %3, align 8
  %4 = getelementptr inbounds %"class.media::AV1Picture", %"class.media::AV1Picture"* %0, i64 0, i32 1, i32 0
  store i16 0, i16* %4, align 8
  %5 = getelementptr inbounds %"class.media::AV1Picture", %"class.media::AV1Picture"* %0, i64 0, i32 1, i32 1
  store i16 0, i16* %5, align 2
  %6 = getelementptr inbounds %"class.media::AV1Picture", %"class.media::AV1Picture"* %0, i64 0, i32 1, i32 2
  %7 = getelementptr inbounds %"class.media::AV1Picture", %"class.media::AV1Picture"* %0, i64 0, i32 1, i32 4
  %8 = getelementptr inbounds %"class.media::AV1Picture", %"class.media::AV1Picture"* %0, i64 0, i32 1, i32 11, i32 1
  %9 = getelementptr inbounds %"class.media::AV1Picture", %"class.media::AV1Picture"* %0, i64 0, i32 1, i32 17, i32 0
  %10 = getelementptr inbounds %"class.media::AV1Picture", %"class.media::AV1Picture"* %0, i64 0, i32 1, i32 56, i32 0
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %10, i8 0, i64 172, i1 false)
  %11 = bitcast i64* %6 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %11, i8 0, i64 22, i1 false)
  %12 = bitcast i32* %7 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %12, i8 0, i64 31, i1 false)
  %13 = bitcast [3 x i32]* %8 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 4 %13, i8 0, i64 1519, i1 false)
  call void @llvm.memset.p0i8.i64(i8* align 8 %9, i8 0, i64 319, i1 false)
  ret void
}

declare void @_ZN5media12CodecPictureC2Ev(%"class.media::CodecPicture"*) unnamed_addr #1

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #2

; Function Attrs: nounwind
declare void @_ZN5media12CodecPictureD2Ev(%"class.media::CodecPicture"*) unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5media10AV1PictureD2Ev(%"class.media::AV1Picture"*) unnamed_addr #0 align 2 {
  %2 = bitcast %"class.media::AV1Picture"* %0 to %"class.media::CodecPicture"*
  tail call void @_ZN5media12CodecPictureD2Ev(%"class.media::CodecPicture"* %2) #6
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5media10AV1PictureD0Ev(%"class.media::AV1Picture"*) unnamed_addr #0 align 2 {
  %2 = bitcast %"class.media::AV1Picture"* %0 to %"class.media::CodecPicture"*
  tail call void @_ZN5media12CodecPictureD2Ev(%"class.media::CodecPicture"* %2) #6
  %3 = bitcast %"class.media::AV1Picture"* %0 to i8*
  tail call void @_ZdlPv(i8* %3) #7
  ret void
}

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #4

; Function Attrs: nounwind ssp uwtable
define hidden %"class.media::AV1Picture"* @_ZN5media10AV1Picture9DuplicateEv(%"class.media::AV1Picture"*) local_unnamed_addr #0 align 2 {
  %2 = bitcast %"class.media::AV1Picture"* %0 to %"class.media::AV1Picture"* (%"class.media::AV1Picture"*)***
  %3 = load %"class.media::AV1Picture"* (%"class.media::AV1Picture"*)**, %"class.media::AV1Picture"* (%"class.media::AV1Picture"*)*** %2, align 8
  %4 = getelementptr inbounds %"class.media::AV1Picture"* (%"class.media::AV1Picture"*)*, %"class.media::AV1Picture"* (%"class.media::AV1Picture"*)** %3, i64 2
  %5 = load %"class.media::AV1Picture"* (%"class.media::AV1Picture"*)*, %"class.media::AV1Picture"* (%"class.media::AV1Picture"*)** %4, align 8
  %6 = tail call %"class.media::AV1Picture"* %5(%"class.media::AV1Picture"* %0) #6
  %7 = icmp eq %"class.media::AV1Picture"* %6, null
  br i1 %7, label %26, label %8

8:                                                ; preds = %1
  %9 = getelementptr inbounds %"class.media::AV1Picture", %"class.media::AV1Picture"* %0, i64 0, i32 1
  %10 = getelementptr inbounds %"class.media::AV1Picture", %"class.media::AV1Picture"* %6, i64 0, i32 1
  %11 = bitcast %"struct.libgav1::ObuFrameHeader"* %10 to i8*
  %12 = bitcast %"struct.libgav1::ObuFrameHeader"* %9 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %11, i8* align 8 %12, i64 2080, i1 false)
  %13 = getelementptr inbounds %"class.media::AV1Picture", %"class.media::AV1Picture"* %0, i64 0, i32 0, i32 2
  %14 = load i32, i32* %13, align 4
  %15 = getelementptr inbounds %"class.media::AV1Picture", %"class.media::AV1Picture"* %6, i64 0, i32 0, i32 2
  store i32 %14, i32* %15, align 4
  %16 = getelementptr inbounds %"class.media::AV1Picture", %"class.media::AV1Picture"* %0, i64 0, i32 0, i32 3
  %17 = bitcast %"class.gfx::Rect"* %16 to <2 x i64>*
  %18 = load <2 x i64>, <2 x i64>* %17, align 8
  %19 = getelementptr inbounds %"class.media::AV1Picture", %"class.media::AV1Picture"* %6, i64 0, i32 0, i32 3
  %20 = bitcast %"class.gfx::Rect"* %19 to <2 x i64>*
  store <2 x i64> %18, <2 x i64>* %20, align 8
  %21 = getelementptr inbounds %"class.media::AV1Picture", %"class.media::AV1Picture"* %0, i64 0, i32 0, i32 5
  %22 = getelementptr inbounds %"class.media::AV1Picture", %"class.media::AV1Picture"* %6, i64 0, i32 0, i32 5, i32 0
  %23 = bitcast %"class.media::VideoColorSpace"* %21 to i32*
  %24 = bitcast i8* %22 to i32*
  %25 = load i32, i32* %23, align 1
  store i32 %25, i32* %24, align 8
  br label %26

26:                                               ; preds = %1, %8
  ret %"class.media::AV1Picture"* %6
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #2

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden %"class.media::AV1Picture"* @_ZN5media10AV1Picture15CreateDuplicateEv(%"class.media::AV1Picture"* nocapture readnone) unnamed_addr #5 align 2 {
  ret %"class.media::AV1Picture"* null
}

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind }
attributes #3 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { norecurse nounwind readnone ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nounwind }
attributes #7 = { builtin nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
