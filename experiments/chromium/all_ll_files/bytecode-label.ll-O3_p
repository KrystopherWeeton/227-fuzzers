; ModuleID = '../../v8/src/interpreter/bytecode-label.cc'
source_filename = "../../v8/src/interpreter/bytecode-label.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.v8::internal::interpreter::BytecodeLabel" = type { i8, i64 }
%"class.v8::internal::interpreter::BytecodeLabels" = type <{ %"class.v8::internal::ZoneLinkedList", i8, [7 x i8] }>
%"class.v8::internal::ZoneLinkedList" = type { %"class.std::__1::list" }
%"class.std::__1::list" = type { %"class.std::__1::__list_imp" }
%"class.std::__1::__list_imp" = type { %"struct.std::__1::__list_node_base", %"class.std::__1::__compressed_pair" }
%"struct.std::__1::__list_node_base" = type { %"struct.std::__1::__list_node_base"*, %"struct.std::__1::__list_node_base"* }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem", %"struct.std::__1::__compressed_pair_elem.0" }
%"struct.std::__1::__compressed_pair_elem" = type { i64 }
%"struct.std::__1::__compressed_pair_elem.0" = type { %"class.v8::internal::ZoneAllocator" }
%"class.v8::internal::ZoneAllocator" = type { %"class.v8::internal::Zone"* }
%"class.v8::internal::Zone" = type <{ i64, i64, i64, i64, %"class.v8::internal::AccountingAllocator"*, %"class.v8::internal::Segment"*, i8*, i8, i8, [6 x i8] }>
%"class.v8::internal::AccountingAllocator" = type { i32 (...)**, %"struct.std::__1::atomic", %"struct.std::__1::atomic", %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr.5" }
%"struct.std::__1::atomic" = type { %"struct.std::__1::__atomic_base" }
%"struct.std::__1::__atomic_base" = type { %"struct.std::__1::__atomic_base.1" }
%"struct.std::__1::__atomic_base.1" = type { %"struct.std::__1::__cxx_atomic_impl" }
%"struct.std::__1::__cxx_atomic_impl" = type { %"struct.std::__1::__cxx_atomic_base_impl" }
%"struct.std::__1::__cxx_atomic_base_impl" = type { i64 }
%"class.std::__1::unique_ptr" = type { %"class.std::__1::__compressed_pair.2" }
%"class.std::__1::__compressed_pair.2" = type { %"struct.std::__1::__compressed_pair_elem.3" }
%"struct.std::__1::__compressed_pair_elem.3" = type { %"class.v8::internal::VirtualMemory"* }
%"class.v8::internal::VirtualMemory" = type { %"class.v8::PageAllocator"*, %"class.v8::base::AddressRegion" }
%"class.v8::PageAllocator" = type { i32 (...)** }
%"class.v8::base::AddressRegion" = type { i64, i64 }
%"class.std::__1::unique_ptr.5" = type { %"class.std::__1::__compressed_pair.6" }
%"class.std::__1::__compressed_pair.6" = type { %"struct.std::__1::__compressed_pair_elem.7" }
%"struct.std::__1::__compressed_pair_elem.7" = type { %"class.v8::base::BoundedPageAllocator"* }
%"class.v8::base::BoundedPageAllocator" = type { %"class.v8::PageAllocator", %"class.v8::base::Mutex", i64, i64, %"class.v8::PageAllocator"*, %"class.v8::base::RegionAllocator" }
%"class.v8::base::Mutex" = type { %union.pthread_mutex_t }
%union.pthread_mutex_t = type { %struct.__pthread_mutex_s }
%struct.__pthread_mutex_s = type { i32, i32, i32, i32, i32, i16, i16, %struct.__pthread_internal_list }
%struct.__pthread_internal_list = type { %struct.__pthread_internal_list*, %struct.__pthread_internal_list* }
%"class.v8::base::RegionAllocator" = type { %"class.v8::base::RegionAllocator::Region", i64, i64, i64, i64, %"class.std::__1::set", %"class.std::__1::set.13" }
%"class.v8::base::RegionAllocator::Region" = type <{ %"class.v8::base::AddressRegion", i32, [4 x i8] }>
%"class.std::__1::set" = type { %"class.std::__1::__tree" }
%"class.std::__1::__tree" = type { %"class.std::__1::__tree_end_node"*, %"class.std::__1::__compressed_pair.8", %"class.std::__1::__compressed_pair.11" }
%"class.std::__1::__tree_end_node" = type { %"class.std::__1::__tree_node_base"* }
%"class.std::__1::__tree_node_base" = type <{ %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_end_node"*, i8, [7 x i8] }>
%"class.std::__1::__compressed_pair.8" = type { %"struct.std::__1::__compressed_pair_elem.9" }
%"struct.std::__1::__compressed_pair_elem.9" = type { %"class.std::__1::__tree_end_node" }
%"class.std::__1::__compressed_pair.11" = type { %"struct.std::__1::__compressed_pair_elem" }
%"class.std::__1::set.13" = type { %"class.std::__1::__tree.14" }
%"class.std::__1::__tree.14" = type { %"class.std::__1::__tree_end_node"*, %"class.std::__1::__compressed_pair.8", %"class.std::__1::__compressed_pair.15" }
%"class.std::__1::__compressed_pair.15" = type { %"struct.std::__1::__compressed_pair_elem" }
%"class.v8::internal::Segment" = type { %"class.v8::internal::Zone"*, %"class.v8::internal::Segment"*, i64 }
%"struct.std::__1::__list_node" = type { %"struct.std::__1::__list_node_base", %"class.v8::internal::interpreter::BytecodeLabel" }
%"class.v8::internal::interpreter::BytecodeArrayBuilder" = type { %"class.v8::internal::Zone"*, %"class.v8::internal::FeedbackVectorSpec"*, i8, %"class.v8::internal::interpreter::ConstantArrayBuilder", %"class.v8::internal::interpreter::HandlerTableBuilder", i32, i32, %"class.v8::internal::interpreter::BytecodeRegisterAllocator", %"class.v8::internal::interpreter::BytecodeArrayWriter", %"class.v8::internal::interpreter::BytecodeRegisterOptimizer"*, %"class.v8::internal::interpreter::BytecodeSourceInfo", %"class.v8::internal::interpreter::BytecodeSourceInfo" }
%"class.v8::internal::FeedbackVectorSpec" = type <{ %"class.v8::internal::ZoneVector", i32, [4 x i8] }>
%"class.v8::internal::ZoneVector" = type { %"class.std::__1::vector" }
%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { i8*, i8*, %"class.std::__1::__compressed_pair.20" }
%"class.std::__1::__compressed_pair.20" = type { %"struct.std::__1::__compressed_pair_elem.21", %"struct.std::__1::__compressed_pair_elem.22" }
%"struct.std::__1::__compressed_pair_elem.21" = type { i8* }
%"struct.std::__1::__compressed_pair_elem.22" = type { %"class.v8::internal::ZoneAllocator.23" }
%"class.v8::internal::ZoneAllocator.23" = type { %"class.v8::internal::Zone"* }
%"class.v8::internal::interpreter::ConstantArrayBuilder" = type { [3 x %"struct.v8::internal::interpreter::ConstantArrayBuilder::ConstantArraySlice"*], %"class.v8::base::TemplateHashMapImpl", %"class.v8::internal::ZoneMap", %"class.v8::internal::ZoneVector.39", %"class.v8::internal::ZoneMap.46", i32, i32, i32, i32, i32, i32, i32, i32 }
%"struct.v8::internal::interpreter::ConstantArrayBuilder::ConstantArraySlice" = type { i64, i64, i64, i8, %"class.v8::internal::ZoneVector.24" }
%"class.v8::internal::ZoneVector.24" = type { %"class.std::__1::vector.25" }
%"class.std::__1::vector.25" = type { %"class.std::__1::__vector_base.26" }
%"class.std::__1::__vector_base.26" = type { %"class.v8::internal::interpreter::ConstantArrayBuilder::Entry"*, %"class.v8::internal::interpreter::ConstantArrayBuilder::Entry"*, %"class.std::__1::__compressed_pair.29" }
%"class.v8::internal::interpreter::ConstantArrayBuilder::Entry" = type <{ %union.anon, i8, [7 x i8] }>
%union.anon = type { %"class.v8::internal::Handle" }
%"class.v8::internal::Handle" = type { %"class.v8::internal::HandleBase" }
%"class.v8::internal::HandleBase" = type { i64* }
%"class.std::__1::__compressed_pair.29" = type { %"struct.std::__1::__compressed_pair_elem.30", %"struct.std::__1::__compressed_pair_elem.31" }
%"struct.std::__1::__compressed_pair_elem.30" = type { %"class.v8::internal::interpreter::ConstantArrayBuilder::Entry"* }
%"struct.std::__1::__compressed_pair_elem.31" = type { %"class.v8::internal::ZoneAllocator.32" }
%"class.v8::internal::ZoneAllocator.32" = type { %"class.v8::internal::Zone"* }
%"class.v8::base::TemplateHashMapImpl" = type { %"struct.v8::base::TemplateHashMapImpl<long, unsigned int, v8::base::KeyEqualityMatcher<long>, v8::internal::ZoneAllocationPolicy>::Impl" }
%"struct.v8::base::TemplateHashMapImpl<long, unsigned int, v8::base::KeyEqualityMatcher<long>, v8::internal::ZoneAllocationPolicy>::Impl" = type { %"class.v8::internal::ZoneAllocationPolicy", %"struct.v8::base::TemplateHashMapEntry"*, i32, i32 }
%"class.v8::internal::ZoneAllocationPolicy" = type { %"class.v8::internal::Zone"* }
%"struct.v8::base::TemplateHashMapEntry" = type opaque
%"class.v8::internal::ZoneMap" = type { %"class.std::__1::map" }
%"class.std::__1::map" = type { %"class.std::__1::__tree.33" }
%"class.std::__1::__tree.33" = type { %"class.std::__1::__tree_end_node"*, %"class.std::__1::__compressed_pair.34", %"class.std::__1::__compressed_pair.37" }
%"class.std::__1::__compressed_pair.34" = type { %"struct.std::__1::__compressed_pair_elem.9", %"struct.std::__1::__compressed_pair_elem.35" }
%"struct.std::__1::__compressed_pair_elem.35" = type { %"class.v8::internal::ZoneAllocator.36" }
%"class.v8::internal::ZoneAllocator.36" = type { %"class.v8::internal::Zone"* }
%"class.std::__1::__compressed_pair.37" = type { %"struct.std::__1::__compressed_pair_elem" }
%"class.v8::internal::ZoneVector.39" = type { %"class.std::__1::vector.40" }
%"class.std::__1::vector.40" = type { %"class.std::__1::__vector_base.41" }
%"class.std::__1::__vector_base.41" = type { %"struct.std::__1::pair"*, %"struct.std::__1::pair"*, %"class.std::__1::__compressed_pair.42" }
%"struct.std::__1::pair" = type opaque
%"class.std::__1::__compressed_pair.42" = type { %"struct.std::__1::__compressed_pair_elem.43", %"struct.std::__1::__compressed_pair_elem.44" }
%"struct.std::__1::__compressed_pair_elem.43" = type { %"struct.std::__1::pair"* }
%"struct.std::__1::__compressed_pair_elem.44" = type { %"class.v8::internal::ZoneAllocator.45" }
%"class.v8::internal::ZoneAllocator.45" = type { %"class.v8::internal::Zone"* }
%"class.v8::internal::ZoneMap.46" = type { %"class.std::__1::map.47" }
%"class.std::__1::map.47" = type { %"class.std::__1::__tree.48" }
%"class.std::__1::__tree.48" = type { %"class.std::__1::__tree_end_node"*, %"class.std::__1::__compressed_pair.49", %"class.std::__1::__compressed_pair.52" }
%"class.std::__1::__compressed_pair.49" = type { %"struct.std::__1::__compressed_pair_elem.9", %"struct.std::__1::__compressed_pair_elem.50" }
%"struct.std::__1::__compressed_pair_elem.50" = type { %"class.v8::internal::ZoneAllocator.51" }
%"class.v8::internal::ZoneAllocator.51" = type { %"class.v8::internal::Zone"* }
%"class.std::__1::__compressed_pair.52" = type { %"struct.std::__1::__compressed_pair_elem" }
%"class.v8::internal::interpreter::HandlerTableBuilder" = type { %"class.v8::internal::ZoneVector.57" }
%"class.v8::internal::ZoneVector.57" = type { %"class.std::__1::vector.58" }
%"class.std::__1::vector.58" = type { %"class.std::__1::__vector_base.59" }
%"class.std::__1::__vector_base.59" = type { %"struct.v8::internal::interpreter::HandlerTableBuilder::Entry"*, %"struct.v8::internal::interpreter::HandlerTableBuilder::Entry"*, %"class.std::__1::__compressed_pair.60" }
%"struct.v8::internal::interpreter::HandlerTableBuilder::Entry" = type { i64, i64, i64, %"class.v8::internal::interpreter::Register", i32 }
%"class.v8::internal::interpreter::Register" = type { i32 }
%"class.std::__1::__compressed_pair.60" = type { %"struct.std::__1::__compressed_pair_elem.61", %"struct.std::__1::__compressed_pair_elem.62" }
%"struct.std::__1::__compressed_pair_elem.61" = type { %"struct.v8::internal::interpreter::HandlerTableBuilder::Entry"* }
%"struct.std::__1::__compressed_pair_elem.62" = type { %"class.v8::internal::ZoneAllocator.63" }
%"class.v8::internal::ZoneAllocator.63" = type { %"class.v8::internal::Zone"* }
%"class.v8::internal::interpreter::BytecodeRegisterAllocator" = type { i32, i32, %"class.v8::internal::interpreter::BytecodeRegisterAllocator::Observer"* }
%"class.v8::internal::interpreter::BytecodeRegisterAllocator::Observer" = type { i32 (...)** }
%"class.v8::internal::interpreter::BytecodeArrayWriter" = type <{ i32, i32, i32, [4 x i8], %"class.v8::internal::ZoneVector.64", i32, [4 x i8], %"class.v8::internal::SourcePositionTableBuilder", %"class.v8::internal::interpreter::ConstantArrayBuilder"*, i8, [7 x i8], i64, i8, i8, i8, [5 x i8] }>
%"class.v8::internal::ZoneVector.64" = type { %"class.std::__1::vector.65" }
%"class.std::__1::vector.65" = type { %"class.std::__1::__vector_base.66" }
%"class.std::__1::__vector_base.66" = type { i8*, i8*, %"class.std::__1::__compressed_pair.67" }
%"class.std::__1::__compressed_pair.67" = type { %"struct.std::__1::__compressed_pair_elem.68", %"struct.std::__1::__compressed_pair_elem.69" }
%"struct.std::__1::__compressed_pair_elem.68" = type { i8* }
%"struct.std::__1::__compressed_pair_elem.69" = type { %"class.v8::internal::ZoneAllocator.70" }
%"class.v8::internal::ZoneAllocator.70" = type { %"class.v8::internal::Zone"* }
%"class.v8::internal::SourcePositionTableBuilder" = type { i32, %"class.v8::internal::ZoneVector.64", %"struct.v8::internal::PositionTableEntry" }
%"struct.v8::internal::PositionTableEntry" = type <{ i32, [4 x i8], i64, i8, [7 x i8] }>
%"class.v8::internal::interpreter::BytecodeRegisterOptimizer" = type opaque
%"class.v8::internal::interpreter::BytecodeSourceInfo" = type { i8, i32 }

; Function Attrs: nounwind ssp uwtable
define hidden %"class.v8::internal::interpreter::BytecodeLabel"* @_ZN2v88internal11interpreter14BytecodeLabels3NewEv(%"class.v8::internal::interpreter::BytecodeLabels"*) local_unnamed_addr #0 align 2 {
  %2 = alloca [7 x i8], align 1
  %3 = getelementptr inbounds [7 x i8], [7 x i8]* %2, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 7, i8* nonnull %3)
  %4 = getelementptr inbounds %"class.v8::internal::interpreter::BytecodeLabels", %"class.v8::internal::interpreter::BytecodeLabels"* %0, i64 0, i32 0, i32 0, i32 0, i32 1, i32 1, i32 0, i32 0
  %5 = load %"class.v8::internal::Zone"*, %"class.v8::internal::Zone"** %4, align 8, !noalias !2
  %6 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %5, i64 0, i32 2
  %7 = load i64, i64* %6, align 8, !noalias !2
  %8 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %5, i64 0, i32 3
  %9 = load i64, i64* %8, align 8, !noalias !2
  %10 = sub i64 %9, %7
  %11 = icmp ult i64 %10, 32
  br i1 %11, label %12, label %14, !prof !5

12:                                               ; preds = %1
  %13 = tail call i64 @_ZN2v88internal4Zone9NewExpandEm(%"class.v8::internal::Zone"* %5, i64 32) #3, !noalias !2
  br label %16

14:                                               ; preds = %1
  %15 = add i64 %7, 32
  store i64 %15, i64* %6, align 8, !noalias !2
  br label %16

16:                                               ; preds = %12, %14
  %17 = phi i64 [ %13, %12 ], [ %7, %14 ]
  %18 = inttoptr i64 %17 to %"struct.std::__1::__list_node"*
  %19 = getelementptr inbounds %"struct.std::__1::__list_node", %"struct.std::__1::__list_node"* %18, i64 0, i32 0, i32 0
  store %"struct.std::__1::__list_node_base"* null, %"struct.std::__1::__list_node_base"** %19, align 8, !noalias !2
  %20 = getelementptr inbounds %"struct.std::__1::__list_node", %"struct.std::__1::__list_node"* %18, i64 0, i32 1, i32 0
  store i8 0, i8* %20, align 8
  %21 = inttoptr i64 %17 to i8*
  %22 = getelementptr inbounds i8, i8* %21, i64 17
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %22, i8* nonnull align 1 %3, i64 7, i1 false)
  %23 = getelementptr inbounds %"struct.std::__1::__list_node", %"struct.std::__1::__list_node"* %18, i64 0, i32 1, i32 1
  store i64 -1, i64* %23, align 8
  %24 = getelementptr inbounds %"struct.std::__1::__list_node", %"struct.std::__1::__list_node"* %18, i64 0, i32 0
  %25 = getelementptr inbounds %"class.v8::internal::interpreter::BytecodeLabels", %"class.v8::internal::interpreter::BytecodeLabels"* %0, i64 0, i32 0, i32 0, i32 0, i32 0
  %26 = getelementptr inbounds %"struct.std::__1::__list_node", %"struct.std::__1::__list_node"* %18, i64 0, i32 0, i32 1
  store %"struct.std::__1::__list_node_base"* %25, %"struct.std::__1::__list_node_base"** %26, align 8
  %27 = getelementptr inbounds %"class.v8::internal::interpreter::BytecodeLabels", %"class.v8::internal::interpreter::BytecodeLabels"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %28 = load %"struct.std::__1::__list_node_base"*, %"struct.std::__1::__list_node_base"** %27, align 8
  store %"struct.std::__1::__list_node_base"* %28, %"struct.std::__1::__list_node_base"** %19, align 8
  %29 = getelementptr inbounds %"struct.std::__1::__list_node_base", %"struct.std::__1::__list_node_base"* %28, i64 0, i32 1
  store %"struct.std::__1::__list_node_base"* %24, %"struct.std::__1::__list_node_base"** %29, align 8
  store %"struct.std::__1::__list_node_base"* %24, %"struct.std::__1::__list_node_base"** %27, align 8
  %30 = getelementptr inbounds %"class.v8::internal::interpreter::BytecodeLabels", %"class.v8::internal::interpreter::BytecodeLabels"* %0, i64 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0
  %31 = load i64, i64* %30, align 8
  %32 = add i64 %31, 1
  store i64 %32, i64* %30, align 8
  call void @llvm.lifetime.end.p0i8(i64 7, i8* nonnull %3)
  %33 = getelementptr inbounds %"struct.std::__1::__list_node", %"struct.std::__1::__list_node"* %18, i64 0, i32 1
  ret %"class.v8::internal::interpreter::BytecodeLabel"* %33
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal11interpreter14BytecodeLabels4BindEPNS1_20BytecodeArrayBuilderE(%"class.v8::internal::interpreter::BytecodeLabels"*, %"class.v8::internal::interpreter::BytecodeArrayBuilder"*) local_unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.v8::internal::interpreter::BytecodeLabels", %"class.v8::internal::interpreter::BytecodeLabels"* %0, i64 0, i32 1
  store i8 1, i8* %3, align 8
  %4 = getelementptr inbounds %"class.v8::internal::interpreter::BytecodeLabels", %"class.v8::internal::interpreter::BytecodeLabels"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %5 = getelementptr inbounds %"class.v8::internal::interpreter::BytecodeLabels", %"class.v8::internal::interpreter::BytecodeLabels"* %0, i64 0, i32 0, i32 0, i32 0, i32 0
  %6 = bitcast %"struct.std::__1::__list_node_base"** %4 to i64*
  %7 = load i64, i64* %6, align 8
  %8 = inttoptr i64 %7 to %"struct.std::__1::__list_node_base"*
  %9 = icmp eq %"struct.std::__1::__list_node_base"* %5, %8
  br i1 %9, label %10, label %11

10:                                               ; preds = %11, %2
  ret void

11:                                               ; preds = %2, %11
  %12 = phi %"struct.std::__1::__list_node_base"* [ %20, %11 ], [ %8, %2 ]
  %13 = phi i64 [ %19, %11 ], [ %7, %2 ]
  %14 = inttoptr i64 %13 to %"struct.std::__1::__list_node"*
  %15 = getelementptr inbounds %"struct.std::__1::__list_node", %"struct.std::__1::__list_node"* %14, i64 0, i32 1
  %16 = tail call dereferenceable(432) %"class.v8::internal::interpreter::BytecodeArrayBuilder"* @_ZN2v88internal11interpreter20BytecodeArrayBuilder4BindEPNS1_13BytecodeLabelE(%"class.v8::internal::interpreter::BytecodeArrayBuilder"* %1, %"class.v8::internal::interpreter::BytecodeLabel"* %15) #3
  %17 = getelementptr inbounds %"struct.std::__1::__list_node_base", %"struct.std::__1::__list_node_base"* %12, i64 0, i32 1
  %18 = bitcast %"struct.std::__1::__list_node_base"** %17 to i64*
  %19 = load i64, i64* %18, align 8
  %20 = inttoptr i64 %19 to %"struct.std::__1::__list_node_base"*
  %21 = icmp eq %"struct.std::__1::__list_node_base"* %5, %20
  br i1 %21, label %10, label %11
}

declare dereferenceable(432) %"class.v8::internal::interpreter::BytecodeArrayBuilder"* @_ZN2v88internal11interpreter20BytecodeArrayBuilder4BindEPNS1_13BytecodeLabelE(%"class.v8::internal::interpreter::BytecodeArrayBuilder"*, %"class.v8::internal::interpreter::BytecodeLabel"*) local_unnamed_addr #2

declare i64 @_ZN2v88internal4Zone9NewExpandEm(%"class.v8::internal::Zone"*, i64) local_unnamed_addr #2

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #1

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{!3}
!3 = distinct !{!3, !4, !"_ZNSt3__14listIN2v88internal11interpreter13BytecodeLabelENS2_13ZoneAllocatorIS4_EEE15__allocate_nodeERNS5_INS_11__list_nodeIS4_PvEEEE: argument 0"}
!4 = distinct !{!4, !"_ZNSt3__14listIN2v88internal11interpreter13BytecodeLabelENS2_13ZoneAllocatorIS4_EEE15__allocate_nodeERNS5_INS_11__list_nodeIS4_PvEEEE"}
!5 = !{!"branch_weights", i32 1, i32 2000}
