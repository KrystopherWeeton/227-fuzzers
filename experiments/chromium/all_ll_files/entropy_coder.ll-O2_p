; ModuleID = '../../third_party/libjxl/src/lib/jxl/entropy_coder.cc'
source_filename = "../../third_party/libjxl/src/lib/jxl/entropy_coder.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.jxl::BitReader" = type { i64, i64, i8*, i8*, i8*, i64, i8, i64 }
%"struct.jxl::BlockCtxMap" = type { [3 x %"class.std::__1::vector"], %"class.std::__1::vector.1", %"class.std::__1::vector.8", i64, i64 }
%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { i32*, i32*, %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { i32* }
%"class.std::__1::vector.1" = type { %"class.std::__1::__vector_base.2" }
%"class.std::__1::__vector_base.2" = type { i32*, i32*, %"class.std::__1::__compressed_pair.3" }
%"class.std::__1::__compressed_pair.3" = type { %"struct.std::__1::__compressed_pair_elem.4" }
%"struct.std::__1::__compressed_pair_elem.4" = type { i32* }
%"class.std::__1::vector.8" = type { %"class.std::__1::__vector_base.9" }
%"class.std::__1::__vector_base.9" = type { i8*, i8*, %"class.std::__1::__compressed_pair.10" }
%"class.std::__1::__compressed_pair.10" = type { %"struct.std::__1::__compressed_pair_elem.11" }
%"struct.std::__1::__compressed_pair_elem.11" = type { i8* }
%"class.std::__1::__vector_base_common" = type { i8 }

$_ZN3jxl11BlockCtxMapaSEOS0_ = comdat any

$_ZN3jxl9BitReader19BoundsCheckedRefillEv = comdat any

$_ZNSt3__16vectorIjNS_9allocatorIjEEE8__appendEm = comdat any

$_ZNSt3__16vectorIiNS_9allocatorIiEEE8__appendEm = comdat any

$_ZNSt3__16vectorIhNS_9allocatorIhEEE8__appendEm = comdat any

@.ref.tmp = private constant [3 x i32] [i32 0, i32 1, i32 2], align 4
@_ZN3jxl11BlockCtxMap14kDefaultCtxMapE = hidden local_unnamed_addr constant [39 x i8] c"\00\01\02\02\03\03\04\05\06\06\06\06\06\07\08\09\09\0A\0B\0C\0D\0E\0E\0E\0E\0E\07\08\09\09\0A\0B\0C\0D\0E\0E\0E\0E\0E", align 16

; Function Attrs: nounwind ssp uwtable
define hidden i32 @_ZN3jxl17DecodeBlockCtxMapEPNS_9BitReaderEPNS_11BlockCtxMapE(%"class.jxl::BitReader"*, %"struct.jxl::BlockCtxMap"*) local_unnamed_addr #0 {
  %3 = alloca %"struct.jxl::BlockCtxMap", align 8
  %4 = getelementptr inbounds %"struct.jxl::BlockCtxMap", %"struct.jxl::BlockCtxMap"* %1, i64 0, i32 1
  %5 = getelementptr inbounds %"struct.jxl::BlockCtxMap", %"struct.jxl::BlockCtxMap"* %1, i64 0, i32 2
  %6 = getelementptr inbounds %"class.jxl::BitReader", %"class.jxl::BitReader"* %0, i64 0, i32 2
  %7 = load i8*, i8** %6, align 8
  %8 = getelementptr inbounds %"class.jxl::BitReader", %"class.jxl::BitReader"* %0, i64 0, i32 3
  %9 = load i8*, i8** %8, align 8
  %10 = icmp ugt i8* %7, %9
  br i1 %10, label %11, label %16, !prof !2

11:                                               ; preds = %2
  tail call void @_ZN3jxl9BitReader19BoundsCheckedRefillEv(%"class.jxl::BitReader"* %0) #9
  %12 = getelementptr inbounds %"class.jxl::BitReader", %"class.jxl::BitReader"* %0, i64 0, i32 0
  %13 = load i64, i64* %12, align 8
  %14 = getelementptr inbounds %"class.jxl::BitReader", %"class.jxl::BitReader"* %0, i64 0, i32 1
  %15 = load i64, i64* %14, align 8
  br label %29

16:                                               ; preds = %2
  %17 = bitcast i8* %7 to i64*
  %18 = load i64, i64* %17, align 1
  %19 = getelementptr inbounds %"class.jxl::BitReader", %"class.jxl::BitReader"* %0, i64 0, i32 1
  %20 = load i64, i64* %19, align 8
  %21 = shl i64 %18, %20
  %22 = getelementptr inbounds %"class.jxl::BitReader", %"class.jxl::BitReader"* %0, i64 0, i32 0
  %23 = load i64, i64* %22, align 8
  %24 = or i64 %23, %21
  store i64 %24, i64* %22, align 8
  %25 = sub i64 63, %20
  %26 = lshr i64 %25, 3
  %27 = getelementptr inbounds i8, i8* %7, i64 %26
  store i8* %27, i8** %6, align 8
  %28 = or i64 %20, 56
  store i64 %28, i64* %19, align 8
  br label %29

29:                                               ; preds = %11, %16
  %30 = phi i64 [ %15, %11 ], [ %28, %16 ]
  %31 = phi i64 [ %13, %11 ], [ %24, %16 ]
  %32 = getelementptr inbounds %"class.jxl::BitReader", %"class.jxl::BitReader"* %0, i64 0, i32 0
  %33 = and i64 %31, 1
  %34 = getelementptr inbounds %"class.jxl::BitReader", %"class.jxl::BitReader"* %0, i64 0, i32 1
  %35 = add i64 %30, -1
  store i64 %35, i64* %34, align 8
  %36 = lshr i64 %31, 1
  store i64 %36, i64* %32, align 8
  %37 = icmp eq i64 %33, 0
  br i1 %37, label %120, label %38

38:                                               ; preds = %29
  %39 = bitcast %"struct.jxl::BlockCtxMap"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 136, i8* nonnull %39) #9
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %39, i8 0, i64 96, i1 false) #9
  %40 = getelementptr inbounds %"struct.jxl::BlockCtxMap", %"struct.jxl::BlockCtxMap"* %3, i64 0, i32 2, i32 0, i32 2, i32 0, i32 0
  %41 = getelementptr inbounds %"struct.jxl::BlockCtxMap", %"struct.jxl::BlockCtxMap"* %3, i64 0, i32 2, i32 0, i32 0
  %42 = tail call i8* @_Znwm(i64 39) #10
  %43 = getelementptr inbounds %"struct.jxl::BlockCtxMap", %"struct.jxl::BlockCtxMap"* %3, i64 0, i32 2, i32 0, i32 1
  store i8* %42, i8** %41, align 8
  %44 = getelementptr inbounds i8, i8* %42, i64 39
  store i8* %44, i8** %40, align 8
  %45 = bitcast i8** %43 to i64*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 1 %42, i8* align 16 getelementptr inbounds ([39 x i8], [39 x i8]* @_ZN3jxl11BlockCtxMap14kDefaultCtxMapE, i64 0, i64 0), i64 39, i1 false) #9
  %46 = ptrtoint i8* %44 to i64
  store i64 %46, i64* %45, align 8
  %47 = getelementptr inbounds %"struct.jxl::BlockCtxMap", %"struct.jxl::BlockCtxMap"* %3, i64 0, i32 2, i32 0, i32 1
  %48 = ptrtoint i8* %42 to i64
  br label %49

49:                                               ; preds = %49, %38
  %50 = phi i64 [ 1, %38 ], [ %67, %49 ]
  %51 = phi i64 [ %48, %38 ], [ %66, %49 ]
  %52 = getelementptr inbounds i8, i8* %42, i64 %50
  %53 = ptrtoint i8* %52 to i64
  %54 = inttoptr i64 %51 to i8*
  %55 = load i8, i8* %54, align 1
  %56 = load i8, i8* %52, align 1
  %57 = icmp ult i8 %55, %56
  %58 = select i1 %57, i64 %53, i64 %51
  %59 = add nuw nsw i64 %50, 1
  %60 = getelementptr inbounds i8, i8* %42, i64 %59
  %61 = ptrtoint i8* %60 to i64
  %62 = inttoptr i64 %58 to i8*
  %63 = load i8, i8* %62, align 1
  %64 = load i8, i8* %60, align 1
  %65 = icmp ult i8 %63, %64
  %66 = select i1 %65, i64 %61, i64 %58
  %67 = add nuw nsw i64 %50, 2
  %68 = icmp eq i64 %67, 39
  br i1 %68, label %69, label %49

69:                                               ; preds = %49
  %70 = inttoptr i64 %66 to i8*
  %71 = load i8, i8* %70, align 1
  %72 = zext i8 %71 to i64
  %73 = add nuw nsw i64 %72, 1
  %74 = getelementptr inbounds %"struct.jxl::BlockCtxMap", %"struct.jxl::BlockCtxMap"* %3, i64 0, i32 3
  store i64 %73, i64* %74, align 8
  %75 = getelementptr inbounds %"struct.jxl::BlockCtxMap", %"struct.jxl::BlockCtxMap"* %3, i64 0, i32 4
  store i64 1, i64* %75, align 8
  %76 = call dereferenceable(136) %"struct.jxl::BlockCtxMap"* @_ZN3jxl11BlockCtxMapaSEOS0_(%"struct.jxl::BlockCtxMap"* %1, %"struct.jxl::BlockCtxMap"* nonnull dereferenceable(136) %3) #9
  %77 = getelementptr inbounds %"struct.jxl::BlockCtxMap", %"struct.jxl::BlockCtxMap"* %3, i64 0, i32 2, i32 0, i32 0
  %78 = load i8*, i8** %77, align 8
  %79 = icmp eq i8* %78, null
  br i1 %79, label %83, label %80

80:                                               ; preds = %69
  %81 = ptrtoint i8* %78 to i64
  %82 = bitcast i8** %47 to i64*
  store i64 %81, i64* %82, align 8
  call void @_ZdlPv(i8* nonnull %78) #10
  br label %83

83:                                               ; preds = %80, %69
  %84 = getelementptr inbounds %"struct.jxl::BlockCtxMap", %"struct.jxl::BlockCtxMap"* %3, i64 0, i32 1, i32 0, i32 0
  %85 = load i32*, i32** %84, align 8
  %86 = icmp eq i32* %85, null
  br i1 %86, label %92, label %87

87:                                               ; preds = %83
  %88 = ptrtoint i32* %85 to i64
  %89 = getelementptr inbounds %"struct.jxl::BlockCtxMap", %"struct.jxl::BlockCtxMap"* %3, i64 0, i32 1, i32 0, i32 1
  %90 = bitcast i32** %89 to i64*
  store i64 %88, i64* %90, align 8
  %91 = bitcast i32* %85 to i8*
  call void @_ZdlPv(i8* %91) #10
  br label %92

92:                                               ; preds = %87, %83
  %93 = getelementptr inbounds %"struct.jxl::BlockCtxMap", %"struct.jxl::BlockCtxMap"* %3, i64 0, i32 0, i64 2, i32 0, i32 0
  %94 = load i32*, i32** %93, align 8
  %95 = icmp eq i32* %94, null
  br i1 %95, label %101, label %96

96:                                               ; preds = %92
  %97 = ptrtoint i32* %94 to i64
  %98 = getelementptr inbounds %"struct.jxl::BlockCtxMap", %"struct.jxl::BlockCtxMap"* %3, i64 0, i32 0, i64 2, i32 0, i32 1
  %99 = bitcast i32** %98 to i64*
  store i64 %97, i64* %99, align 8
  %100 = bitcast i32* %94 to i8*
  call void @_ZdlPv(i8* %100) #10
  br label %101

101:                                              ; preds = %96, %92
  %102 = getelementptr inbounds %"struct.jxl::BlockCtxMap", %"struct.jxl::BlockCtxMap"* %3, i64 0, i32 0, i64 1, i32 0, i32 0
  %103 = load i32*, i32** %102, align 8
  %104 = icmp eq i32* %103, null
  br i1 %104, label %110, label %105

105:                                              ; preds = %101
  %106 = ptrtoint i32* %103 to i64
  %107 = getelementptr inbounds %"struct.jxl::BlockCtxMap", %"struct.jxl::BlockCtxMap"* %3, i64 0, i32 0, i64 1, i32 0, i32 1
  %108 = bitcast i32** %107 to i64*
  store i64 %106, i64* %108, align 8
  %109 = bitcast i32* %103 to i8*
  call void @_ZdlPv(i8* %109) #10
  br label %110

110:                                              ; preds = %105, %101
  %111 = getelementptr inbounds %"struct.jxl::BlockCtxMap", %"struct.jxl::BlockCtxMap"* %3, i64 0, i32 0, i64 0, i32 0, i32 0
  %112 = load i32*, i32** %111, align 8
  %113 = icmp eq i32* %112, null
  br i1 %113, label %119, label %114

114:                                              ; preds = %110
  %115 = ptrtoint i32* %112 to i64
  %116 = getelementptr inbounds %"struct.jxl::BlockCtxMap", %"struct.jxl::BlockCtxMap"* %3, i64 0, i32 0, i64 0, i32 0, i32 1
  %117 = bitcast i32** %116 to i64*
  store i64 %115, i64* %117, align 8
  %118 = bitcast i32* %112 to i8*
  call void @_ZdlPv(i8* %118) #10
  br label %119

119:                                              ; preds = %110, %114
  call void @llvm.lifetime.end.p0i8(i64 136, i8* nonnull %39) #9
  br label %287

120:                                              ; preds = %29
  %121 = getelementptr inbounds %"struct.jxl::BlockCtxMap", %"struct.jxl::BlockCtxMap"* %1, i64 0, i32 4
  store i64 1, i64* %121, align 8
  br label %174

122:                                              ; preds = %232
  %123 = load i8*, i8** %6, align 8
  %124 = load i8*, i8** %8, align 8
  %125 = icmp ugt i8* %123, %124
  br i1 %125, label %126, label %129, !prof !2

126:                                              ; preds = %122
  tail call void @_ZN3jxl9BitReader19BoundsCheckedRefillEv(%"class.jxl::BitReader"* %0) #9
  %127 = load i64, i64* %32, align 8
  %128 = load i64, i64* %34, align 8
  br label %140

129:                                              ; preds = %122
  %130 = bitcast i8* %123 to i64*
  %131 = load i64, i64* %130, align 1
  %132 = load i64, i64* %34, align 8
  %133 = shl i64 %131, %132
  %134 = load i64, i64* %32, align 8
  %135 = or i64 %134, %133
  store i64 %135, i64* %32, align 8
  %136 = sub i64 63, %132
  %137 = lshr i64 %136, 3
  %138 = getelementptr inbounds i8, i8* %123, i64 %137
  store i8* %138, i8** %6, align 8
  %139 = or i64 %132, 56
  store i64 %139, i64* %34, align 8
  br label %140

140:                                              ; preds = %126, %129
  %141 = phi i64 [ %128, %126 ], [ %139, %129 ]
  %142 = phi i64 [ %127, %126 ], [ %135, %129 ]
  %143 = and i64 %142, 15
  %144 = add i64 %141, -4
  store i64 %144, i64* %34, align 8
  %145 = lshr i64 %142, 4
  store i64 %145, i64* %32, align 8
  %146 = getelementptr inbounds %"struct.jxl::BlockCtxMap", %"struct.jxl::BlockCtxMap"* %1, i64 0, i32 1, i32 0, i32 1
  %147 = bitcast i32** %146 to i64*
  %148 = load i64, i64* %147, align 8
  %149 = bitcast %"class.std::__1::vector.1"* %4 to i64*
  %150 = load i64, i64* %149, align 8
  %151 = sub i64 %148, %150
  %152 = ashr exact i64 %151, 2
  %153 = icmp ugt i64 %143, %152
  %154 = inttoptr i64 %150 to i32*
  br i1 %153, label %155, label %162

155:                                              ; preds = %140
  %156 = sub nsw i64 %143, %152
  tail call void @_ZNSt3__16vectorIjNS_9allocatorIjEEE8__appendEm(%"class.std::__1::vector.1"* %4, i64 %156) #9
  %157 = getelementptr inbounds %"class.std::__1::vector.1", %"class.std::__1::vector.1"* %4, i64 0, i32 0, i32 0
  %158 = load i32*, i32** %157, align 8
  %159 = load i32*, i32** %146, align 8
  %160 = ptrtoint i32* %159 to i64
  %161 = ptrtoint i32* %158 to i64
  br label %168

162:                                              ; preds = %140
  %163 = inttoptr i64 %148 to i32*
  %164 = icmp ult i64 %143, %152
  br i1 %164, label %165, label %168

165:                                              ; preds = %162
  %166 = getelementptr inbounds i32, i32* %154, i64 %143
  store i32* %166, i32** %146, align 8
  %167 = ptrtoint i32* %166 to i64
  br label %168

168:                                              ; preds = %155, %162, %165
  %169 = phi i64 [ %161, %155 ], [ %150, %162 ], [ %150, %165 ]
  %170 = phi i64 [ %160, %155 ], [ %148, %162 ], [ %167, %165 ]
  %171 = phi i32* [ %159, %155 ], [ %163, %162 ], [ %166, %165 ]
  %172 = phi i32* [ %158, %155 ], [ %154, %162 ], [ %154, %165 ]
  %173 = icmp eq i32* %172, %171
  br i1 %173, label %249, label %258

174:                                              ; preds = %120, %232
  %175 = phi i32* [ getelementptr inbounds ([3 x i32], [3 x i32]* @.ref.tmp, i64 0, i64 0), %120 ], [ %233, %232 ]
  %176 = load i32, i32* %175, align 4
  %177 = sext i32 %176 to i64
  %178 = getelementptr inbounds %"struct.jxl::BlockCtxMap", %"struct.jxl::BlockCtxMap"* %1, i64 0, i32 0, i64 %177
  %179 = load i8*, i8** %6, align 8
  %180 = load i8*, i8** %8, align 8
  %181 = icmp ugt i8* %179, %180
  br i1 %181, label %182, label %185, !prof !2

182:                                              ; preds = %174
  tail call void @_ZN3jxl9BitReader19BoundsCheckedRefillEv(%"class.jxl::BitReader"* %0) #9
  %183 = load i64, i64* %32, align 8
  %184 = load i64, i64* %34, align 8
  br label %196

185:                                              ; preds = %174
  %186 = bitcast i8* %179 to i64*
  %187 = load i64, i64* %186, align 1
  %188 = load i64, i64* %34, align 8
  %189 = shl i64 %187, %188
  %190 = load i64, i64* %32, align 8
  %191 = or i64 %190, %189
  store i64 %191, i64* %32, align 8
  %192 = sub i64 63, %188
  %193 = lshr i64 %192, 3
  %194 = getelementptr inbounds i8, i8* %179, i64 %193
  store i8* %194, i8** %6, align 8
  %195 = or i64 %188, 56
  store i64 %195, i64* %34, align 8
  br label %196

196:                                              ; preds = %182, %185
  %197 = phi i64 [ %184, %182 ], [ %195, %185 ]
  %198 = phi i64 [ %183, %182 ], [ %191, %185 ]
  %199 = and i64 %198, 15
  %200 = add i64 %197, -4
  store i64 %200, i64* %34, align 8
  %201 = lshr i64 %198, 4
  store i64 %201, i64* %32, align 8
  %202 = getelementptr inbounds %"struct.jxl::BlockCtxMap", %"struct.jxl::BlockCtxMap"* %1, i64 0, i32 0, i64 %177, i32 0, i32 1
  %203 = bitcast i32** %202 to i64*
  %204 = load i64, i64* %203, align 8
  %205 = bitcast %"class.std::__1::vector"* %178 to i64*
  %206 = load i64, i64* %205, align 8
  %207 = sub i64 %204, %206
  %208 = ashr exact i64 %207, 2
  %209 = icmp ugt i64 %199, %208
  %210 = inttoptr i64 %206 to i32*
  br i1 %209, label %211, label %215

211:                                              ; preds = %196
  %212 = sub nsw i64 %199, %208
  tail call void @_ZNSt3__16vectorIiNS_9allocatorIiEEE8__appendEm(%"class.std::__1::vector"* %178, i64 %212) #9
  %213 = load i64, i64* %203, align 8
  %214 = load i64, i64* %205, align 8
  br label %220

215:                                              ; preds = %196
  %216 = icmp ult i64 %199, %208
  br i1 %216, label %217, label %220

217:                                              ; preds = %215
  %218 = getelementptr inbounds i32, i32* %210, i64 %199
  store i32* %218, i32** %202, align 8
  %219 = ptrtoint i32* %218 to i64
  br label %220

220:                                              ; preds = %211, %215, %217
  %221 = phi i64 [ %214, %211 ], [ %206, %215 ], [ %206, %217 ]
  %222 = phi i64 [ %213, %211 ], [ %204, %215 ], [ %219, %217 ]
  %223 = sub i64 %222, %221
  %224 = ashr exact i64 %223, 2
  %225 = add nsw i64 %224, 1
  %226 = load i64, i64* %121, align 8
  %227 = mul i64 %225, %226
  store i64 %227, i64* %121, align 8
  %228 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %178, i64 0, i32 0, i32 0
  %229 = load i32*, i32** %228, align 8
  %230 = load i32*, i32** %202, align 8
  %231 = icmp eq i32* %229, %230
  br i1 %231, label %232, label %235

232:                                              ; preds = %235, %220
  %233 = getelementptr inbounds i32, i32* %175, i64 1
  %234 = icmp eq i32* %233, getelementptr inbounds ([3 x i32], [3 x i32]* @.ref.tmp, i64 1, i64 0)
  br i1 %234, label %122, label %174

235:                                              ; preds = %220, %235
  %236 = phi i32* [ %244, %235 ], [ %229, %220 ]
  %237 = tail call i32 @_ZN3jxl8U32Coder4ReadENS_6U32EncEPNS_9BitReaderE(i64 2229088026627, i64 9044715794080271, %"class.jxl::BitReader"* %0) #9
  %238 = zext i32 %237 to i64
  %239 = lshr i64 %238, 1
  %240 = shl i64 %238, 63
  %241 = ashr exact i64 %240, 63
  %242 = xor i64 %241, %239
  %243 = trunc i64 %242 to i32
  store i32 %243, i32* %236, align 4
  %244 = getelementptr inbounds i32, i32* %236, i64 1
  %245 = icmp eq i32* %244, %230
  br i1 %245, label %232, label %235

246:                                              ; preds = %258
  %247 = load i64, i64* %147, align 8
  %248 = load i64, i64* %149, align 8
  br label %249

249:                                              ; preds = %246, %168
  %250 = phi i64 [ %248, %246 ], [ %169, %168 ]
  %251 = phi i64 [ %247, %246 ], [ %170, %168 ]
  %252 = load i64, i64* %121, align 8
  %253 = sub i64 %251, %250
  %254 = ashr exact i64 %253, 2
  %255 = add nsw i64 %254, 1
  %256 = mul i64 %255, %252
  %257 = icmp ugt i64 %256, 64
  br i1 %257, label %287, label %264

258:                                              ; preds = %168, %258
  %259 = phi i32* [ %262, %258 ], [ %172, %168 ]
  %260 = tail call i32 @_ZN3jxl8U32Coder4ReadENS_6U32EncEPNS_9BitReaderE(i64 558345748481, i64 6077378724228, %"class.jxl::BitReader"* %0) #9
  %261 = add i32 %260, 1
  store i32 %261, i32* %259, align 4
  %262 = getelementptr inbounds i32, i32* %259, i64 1
  %263 = icmp eq i32* %262, %171
  br i1 %263, label %246, label %258

264:                                              ; preds = %249
  %265 = mul i64 %256, 39
  %266 = getelementptr inbounds %"struct.jxl::BlockCtxMap", %"struct.jxl::BlockCtxMap"* %1, i64 0, i32 2, i32 0, i32 1
  %267 = bitcast i8** %266 to i64*
  %268 = load i64, i64* %267, align 8
  %269 = bitcast %"class.std::__1::vector.8"* %5 to i64*
  %270 = load i64, i64* %269, align 8
  %271 = sub i64 %268, %270
  %272 = icmp ugt i64 %265, %271
  %273 = inttoptr i64 %270 to i8*
  br i1 %272, label %274, label %276

274:                                              ; preds = %264
  %275 = sub i64 %265, %271
  tail call void @_ZNSt3__16vectorIhNS_9allocatorIhEEE8__appendEm(%"class.std::__1::vector.8"* %5, i64 %275) #9
  br label %280

276:                                              ; preds = %264
  %277 = icmp ult i64 %265, %271
  br i1 %277, label %278, label %280

278:                                              ; preds = %276
  %279 = getelementptr inbounds i8, i8* %273, i64 %265
  store i8* %279, i8** %266, align 8
  br label %280

280:                                              ; preds = %274, %276, %278
  %281 = getelementptr inbounds %"struct.jxl::BlockCtxMap", %"struct.jxl::BlockCtxMap"* %1, i64 0, i32 3
  %282 = tail call zeroext i1 @_ZN3jxl16DecodeContextMapEPNSt3__16vectorIhNS0_9allocatorIhEEEEPmPNS_9BitReaderE(%"class.std::__1::vector.8"* %5, i64* %281, %"class.jxl::BitReader"* %0) #9
  br i1 %282, label %283, label %287

283:                                              ; preds = %280
  %284 = load i64, i64* %281, align 8
  %285 = icmp ugt i64 %284, 16
  %286 = zext i1 %285 to i32
  ret i32 %286

287:                                              ; preds = %280, %249, %119
  %288 = phi i32 [ 0, %119 ], [ 1, %249 ], [ 1, %280 ]
  ret i32 %288
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden dereferenceable(136) %"struct.jxl::BlockCtxMap"* @_ZN3jxl11BlockCtxMapaSEOS0_(%"struct.jxl::BlockCtxMap"*, %"struct.jxl::BlockCtxMap"* dereferenceable(136)) local_unnamed_addr #2 comdat align 2 {
  %3 = getelementptr inbounds %"struct.jxl::BlockCtxMap", %"struct.jxl::BlockCtxMap"* %0, i64 0, i32 0, i64 0, i32 0, i32 0
  %4 = load i32*, i32** %3, align 8
  %5 = icmp eq i32* %4, null
  br i1 %5, label %62, label %56

6:                                                ; preds = %114
  %7 = ptrtoint i32* %132 to i64
  %8 = getelementptr inbounds %"struct.jxl::BlockCtxMap", %"struct.jxl::BlockCtxMap"* %0, i64 0, i32 1, i32 0, i32 1
  %9 = bitcast i32** %8 to i64*
  store i64 %7, i64* %9, align 8
  %10 = bitcast i32* %132 to i8*
  tail call void @_ZdlPv(i8* %10) #10
  %11 = bitcast %"class.std::__1::vector.1"* %129 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %11, i8 0, i64 24, i1 false) #9
  br label %12

12:                                               ; preds = %114, %6
  %13 = bitcast %"class.std::__1::vector.1"* %130 to i64*
  %14 = load i64, i64* %13, align 8
  %15 = bitcast %"class.std::__1::vector.1"* %129 to i64*
  store i64 %14, i64* %15, align 8
  %16 = getelementptr inbounds %"struct.jxl::BlockCtxMap", %"struct.jxl::BlockCtxMap"* %1, i64 0, i32 1, i32 0, i32 1
  %17 = bitcast i32** %16 to i64*
  %18 = load i64, i64* %17, align 8
  %19 = getelementptr inbounds %"struct.jxl::BlockCtxMap", %"struct.jxl::BlockCtxMap"* %0, i64 0, i32 1, i32 0, i32 1
  %20 = bitcast i32** %19 to i64*
  store i64 %18, i64* %20, align 8
  %21 = getelementptr inbounds %"struct.jxl::BlockCtxMap", %"struct.jxl::BlockCtxMap"* %1, i64 0, i32 1, i32 0, i32 2, i32 0, i32 0
  %22 = bitcast i32** %21 to i64*
  %23 = load i64, i64* %22, align 8
  %24 = getelementptr inbounds %"struct.jxl::BlockCtxMap", %"struct.jxl::BlockCtxMap"* %0, i64 0, i32 1, i32 0, i32 2, i32 0, i32 0
  %25 = bitcast i32** %24 to i64*
  store i64 %23, i64* %25, align 8
  %26 = bitcast %"class.std::__1::vector.1"* %130 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %26, i8 0, i64 24, i1 false) #9
  %27 = getelementptr inbounds %"struct.jxl::BlockCtxMap", %"struct.jxl::BlockCtxMap"* %0, i64 0, i32 2
  %28 = getelementptr inbounds %"struct.jxl::BlockCtxMap", %"struct.jxl::BlockCtxMap"* %1, i64 0, i32 2
  %29 = getelementptr inbounds %"class.std::__1::vector.8", %"class.std::__1::vector.8"* %27, i64 0, i32 0, i32 0
  %30 = load i8*, i8** %29, align 8
  %31 = icmp eq i8* %30, null
  br i1 %31, label %37, label %32

32:                                               ; preds = %12
  %33 = ptrtoint i8* %30 to i64
  %34 = getelementptr inbounds %"struct.jxl::BlockCtxMap", %"struct.jxl::BlockCtxMap"* %0, i64 0, i32 2, i32 0, i32 1
  %35 = bitcast i8** %34 to i64*
  store i64 %33, i64* %35, align 8
  tail call void @_ZdlPv(i8* nonnull %30) #10
  %36 = bitcast %"class.std::__1::vector.8"* %27 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %36, i8 0, i64 24, i1 false) #9
  br label %37

37:                                               ; preds = %12, %32
  %38 = bitcast %"class.std::__1::vector.8"* %28 to i64*
  %39 = load i64, i64* %38, align 8
  %40 = bitcast %"class.std::__1::vector.8"* %27 to i64*
  store i64 %39, i64* %40, align 8
  %41 = getelementptr inbounds %"struct.jxl::BlockCtxMap", %"struct.jxl::BlockCtxMap"* %1, i64 0, i32 2, i32 0, i32 1
  %42 = bitcast i8** %41 to i64*
  %43 = load i64, i64* %42, align 8
  %44 = getelementptr inbounds %"struct.jxl::BlockCtxMap", %"struct.jxl::BlockCtxMap"* %0, i64 0, i32 2, i32 0, i32 1
  %45 = bitcast i8** %44 to i64*
  store i64 %43, i64* %45, align 8
  %46 = getelementptr inbounds %"struct.jxl::BlockCtxMap", %"struct.jxl::BlockCtxMap"* %1, i64 0, i32 2, i32 0, i32 2, i32 0, i32 0
  %47 = bitcast i8** %46 to i64*
  %48 = load i64, i64* %47, align 8
  %49 = getelementptr inbounds %"struct.jxl::BlockCtxMap", %"struct.jxl::BlockCtxMap"* %0, i64 0, i32 2, i32 0, i32 2, i32 0, i32 0
  %50 = bitcast i8** %49 to i64*
  store i64 %48, i64* %50, align 8
  %51 = bitcast %"class.std::__1::vector.8"* %28 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %51, i8 0, i64 24, i1 false) #9
  %52 = getelementptr inbounds %"struct.jxl::BlockCtxMap", %"struct.jxl::BlockCtxMap"* %0, i64 0, i32 3
  %53 = getelementptr inbounds %"struct.jxl::BlockCtxMap", %"struct.jxl::BlockCtxMap"* %1, i64 0, i32 3
  %54 = bitcast i64* %52 to i8*
  %55 = bitcast i64* %53 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %54, i8* align 8 %55, i64 16, i1 false)
  ret %"struct.jxl::BlockCtxMap"* %0

56:                                               ; preds = %2
  %57 = ptrtoint i32* %4 to i64
  %58 = getelementptr inbounds %"struct.jxl::BlockCtxMap", %"struct.jxl::BlockCtxMap"* %0, i64 0, i32 0, i64 0, i32 0, i32 1
  %59 = bitcast i32** %58 to i64*
  store i64 %57, i64* %59, align 8
  %60 = bitcast i32* %4 to i8*
  tail call void @_ZdlPv(i8* %60) #10
  %61 = bitcast %"struct.jxl::BlockCtxMap"* %0 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %61, i8 0, i64 24, i1 false) #9
  br label %62

62:                                               ; preds = %2, %56
  %63 = bitcast %"struct.jxl::BlockCtxMap"* %1 to i64*
  %64 = load i64, i64* %63, align 8
  %65 = bitcast %"struct.jxl::BlockCtxMap"* %0 to i64*
  store i64 %64, i64* %65, align 8
  %66 = getelementptr inbounds %"struct.jxl::BlockCtxMap", %"struct.jxl::BlockCtxMap"* %1, i64 0, i32 0, i64 0, i32 0, i32 1
  %67 = bitcast i32** %66 to i64*
  %68 = load i64, i64* %67, align 8
  %69 = getelementptr inbounds %"struct.jxl::BlockCtxMap", %"struct.jxl::BlockCtxMap"* %0, i64 0, i32 0, i64 0, i32 0, i32 1
  %70 = bitcast i32** %69 to i64*
  store i64 %68, i64* %70, align 8
  %71 = getelementptr inbounds %"struct.jxl::BlockCtxMap", %"struct.jxl::BlockCtxMap"* %1, i64 0, i32 0, i64 0, i32 0, i32 2, i32 0, i32 0
  %72 = bitcast i32** %71 to i64*
  %73 = load i64, i64* %72, align 8
  %74 = getelementptr inbounds %"struct.jxl::BlockCtxMap", %"struct.jxl::BlockCtxMap"* %0, i64 0, i32 0, i64 0, i32 0, i32 2, i32 0, i32 0
  %75 = bitcast i32** %74 to i64*
  store i64 %73, i64* %75, align 8
  %76 = bitcast %"struct.jxl::BlockCtxMap"* %1 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %76, i8 0, i64 24, i1 false) #9
  %77 = getelementptr inbounds %"struct.jxl::BlockCtxMap", %"struct.jxl::BlockCtxMap"* %0, i64 0, i32 0, i64 1
  %78 = getelementptr inbounds %"struct.jxl::BlockCtxMap", %"struct.jxl::BlockCtxMap"* %1, i64 0, i32 0, i64 1
  %79 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %77, i64 0, i32 0, i32 0
  %80 = load i32*, i32** %79, align 8
  %81 = icmp eq i32* %80, null
  br i1 %81, label %88, label %82

82:                                               ; preds = %62
  %83 = ptrtoint i32* %80 to i64
  %84 = getelementptr inbounds %"struct.jxl::BlockCtxMap", %"struct.jxl::BlockCtxMap"* %0, i64 0, i32 0, i64 1, i32 0, i32 1
  %85 = bitcast i32** %84 to i64*
  store i64 %83, i64* %85, align 8
  %86 = bitcast i32* %80 to i8*
  tail call void @_ZdlPv(i8* %86) #10
  %87 = bitcast %"class.std::__1::vector"* %77 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %87, i8 0, i64 24, i1 false) #9
  br label %88

88:                                               ; preds = %62, %82
  %89 = bitcast %"class.std::__1::vector"* %78 to i64*
  %90 = load i64, i64* %89, align 8
  %91 = bitcast %"class.std::__1::vector"* %77 to i64*
  store i64 %90, i64* %91, align 8
  %92 = getelementptr inbounds %"struct.jxl::BlockCtxMap", %"struct.jxl::BlockCtxMap"* %1, i64 0, i32 0, i64 1, i32 0, i32 1
  %93 = bitcast i32** %92 to i64*
  %94 = load i64, i64* %93, align 8
  %95 = getelementptr inbounds %"struct.jxl::BlockCtxMap", %"struct.jxl::BlockCtxMap"* %0, i64 0, i32 0, i64 1, i32 0, i32 1
  %96 = bitcast i32** %95 to i64*
  store i64 %94, i64* %96, align 8
  %97 = getelementptr inbounds %"struct.jxl::BlockCtxMap", %"struct.jxl::BlockCtxMap"* %1, i64 0, i32 0, i64 1, i32 0, i32 2, i32 0, i32 0
  %98 = bitcast i32** %97 to i64*
  %99 = load i64, i64* %98, align 8
  %100 = getelementptr inbounds %"struct.jxl::BlockCtxMap", %"struct.jxl::BlockCtxMap"* %0, i64 0, i32 0, i64 1, i32 0, i32 2, i32 0, i32 0
  %101 = bitcast i32** %100 to i64*
  store i64 %99, i64* %101, align 8
  %102 = bitcast %"class.std::__1::vector"* %78 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %102, i8 0, i64 24, i1 false) #9
  %103 = getelementptr inbounds %"struct.jxl::BlockCtxMap", %"struct.jxl::BlockCtxMap"* %0, i64 0, i32 0, i64 2
  %104 = getelementptr inbounds %"struct.jxl::BlockCtxMap", %"struct.jxl::BlockCtxMap"* %1, i64 0, i32 0, i64 2
  %105 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %103, i64 0, i32 0, i32 0
  %106 = load i32*, i32** %105, align 8
  %107 = icmp eq i32* %106, null
  br i1 %107, label %114, label %108

108:                                              ; preds = %88
  %109 = ptrtoint i32* %106 to i64
  %110 = getelementptr inbounds %"struct.jxl::BlockCtxMap", %"struct.jxl::BlockCtxMap"* %0, i64 0, i32 0, i64 2, i32 0, i32 1
  %111 = bitcast i32** %110 to i64*
  store i64 %109, i64* %111, align 8
  %112 = bitcast i32* %106 to i8*
  tail call void @_ZdlPv(i8* %112) #10
  %113 = bitcast %"class.std::__1::vector"* %103 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %113, i8 0, i64 24, i1 false) #9
  br label %114

114:                                              ; preds = %88, %108
  %115 = bitcast %"class.std::__1::vector"* %104 to i64*
  %116 = load i64, i64* %115, align 8
  %117 = bitcast %"class.std::__1::vector"* %103 to i64*
  store i64 %116, i64* %117, align 8
  %118 = getelementptr inbounds %"struct.jxl::BlockCtxMap", %"struct.jxl::BlockCtxMap"* %1, i64 0, i32 0, i64 2, i32 0, i32 1
  %119 = bitcast i32** %118 to i64*
  %120 = load i64, i64* %119, align 8
  %121 = getelementptr inbounds %"struct.jxl::BlockCtxMap", %"struct.jxl::BlockCtxMap"* %0, i64 0, i32 0, i64 2, i32 0, i32 1
  %122 = bitcast i32** %121 to i64*
  store i64 %120, i64* %122, align 8
  %123 = getelementptr inbounds %"struct.jxl::BlockCtxMap", %"struct.jxl::BlockCtxMap"* %1, i64 0, i32 0, i64 2, i32 0, i32 2, i32 0, i32 0
  %124 = bitcast i32** %123 to i64*
  %125 = load i64, i64* %124, align 8
  %126 = getelementptr inbounds %"struct.jxl::BlockCtxMap", %"struct.jxl::BlockCtxMap"* %0, i64 0, i32 0, i64 2, i32 0, i32 2, i32 0, i32 0
  %127 = bitcast i32** %126 to i64*
  store i64 %125, i64* %127, align 8
  %128 = bitcast %"class.std::__1::vector"* %104 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %128, i8 0, i64 24, i1 false) #9
  %129 = getelementptr inbounds %"struct.jxl::BlockCtxMap", %"struct.jxl::BlockCtxMap"* %0, i64 0, i32 1
  %130 = getelementptr inbounds %"struct.jxl::BlockCtxMap", %"struct.jxl::BlockCtxMap"* %1, i64 0, i32 1
  %131 = getelementptr inbounds %"class.std::__1::vector.1", %"class.std::__1::vector.1"* %129, i64 0, i32 0, i32 0
  %132 = load i32*, i32** %131, align 8
  %133 = icmp eq i32* %132, null
  br i1 %133, label %12, label %6
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

declare i32 @_ZN3jxl8U32Coder4ReadENS_6U32EncEPNS_9BitReaderE(i64, i64, %"class.jxl::BitReader"*) local_unnamed_addr #3

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #1

declare zeroext i1 @_ZN3jxl16DecodeContextMapEPNSt3__16vectorIhNS0_9allocatorIhEEEEPmPNS_9BitReaderE(%"class.std::__1::vector.8"*, i64*, %"class.jxl::BitReader"*) local_unnamed_addr #3

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #4

; Function Attrs: noreturn
declare void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"*) local_unnamed_addr #5

; Function Attrs: noreturn nounwind
declare void @abort() local_unnamed_addr #6

; Function Attrs: nobuiltin nofree
declare noalias nonnull i8* @_Znwm(i64) local_unnamed_addr #7

; Function Attrs: noinline nounwind ssp uwtable
define linkonce_odr hidden void @_ZN3jxl9BitReader19BoundsCheckedRefillEv(%"class.jxl::BitReader"*) local_unnamed_addr #8 comdat align 2 {
  %2 = getelementptr inbounds %"class.jxl::BitReader", %"class.jxl::BitReader"* %0, i64 0, i32 3
  %3 = load i8*, i8** %2, align 8
  %4 = getelementptr inbounds i8, i8* %3, i64 8
  %5 = getelementptr inbounds %"class.jxl::BitReader", %"class.jxl::BitReader"* %0, i64 0, i32 2
  %6 = getelementptr inbounds %"class.jxl::BitReader", %"class.jxl::BitReader"* %0, i64 0, i32 1
  %7 = load i64, i64* %6, align 8
  %8 = icmp ult i64 %7, 56
  br i1 %8, label %9, label %24

9:                                                ; preds = %1
  %10 = getelementptr inbounds %"class.jxl::BitReader", %"class.jxl::BitReader"* %0, i64 0, i32 0
  %11 = load i8*, i8** %5, align 8
  %12 = icmp ult i8* %11, %4
  br i1 %12, label %13, label %24

13:                                               ; preds = %9
  %14 = getelementptr inbounds i8, i8* %11, i64 1
  store i8* %14, i8** %5, align 8
  %15 = load i8, i8* %11, align 1
  %16 = zext i8 %15 to i64
  %17 = shl i64 %16, %7
  %18 = load i64, i64* %10, align 8
  %19 = or i64 %17, %18
  store i64 %19, i64* %10, align 8
  %20 = add nuw nsw i64 %7, 8
  store i64 %20, i64* %6, align 8
  %21 = icmp ult i64 %20, 56
  %22 = icmp ult i8* %14, %4
  %23 = and i1 %21, %22
  br i1 %23, label %33, label %24

24:                                               ; preds = %13, %9, %33, %44, %55, %66, %77, %88, %1
  %25 = phi i64 [ %7, %1 ], [ %7, %9 ], [ %20, %13 ], [ %40, %33 ], [ %51, %44 ], [ %62, %55 ], [ %73, %66 ], [ %84, %77 ], [ %95, %88 ]
  %26 = sub i64 63, %25
  %27 = lshr i64 %26, 3
  %28 = getelementptr inbounds %"class.jxl::BitReader", %"class.jxl::BitReader"* %0, i64 0, i32 5
  %29 = load i64, i64* %28, align 8
  %30 = add i64 %29, %27
  store i64 %30, i64* %28, align 8
  %31 = and i64 %26, -8
  %32 = add i64 %31, %25
  store i64 %32, i64* %6, align 8
  ret void

33:                                               ; preds = %13
  %34 = getelementptr inbounds i8, i8* %11, i64 2
  store i8* %34, i8** %5, align 8
  %35 = load i8, i8* %14, align 1
  %36 = zext i8 %35 to i64
  %37 = shl i64 %36, %20
  %38 = load i64, i64* %10, align 8
  %39 = or i64 %37, %38
  store i64 %39, i64* %10, align 8
  %40 = add nuw nsw i64 %7, 16
  store i64 %40, i64* %6, align 8
  %41 = icmp ult i64 %40, 56
  %42 = icmp ult i8* %34, %4
  %43 = and i1 %41, %42
  br i1 %43, label %44, label %24

44:                                               ; preds = %33
  %45 = getelementptr inbounds i8, i8* %11, i64 3
  store i8* %45, i8** %5, align 8
  %46 = load i8, i8* %34, align 1
  %47 = zext i8 %46 to i64
  %48 = shl i64 %47, %40
  %49 = load i64, i64* %10, align 8
  %50 = or i64 %48, %49
  store i64 %50, i64* %10, align 8
  %51 = add nuw nsw i64 %7, 24
  store i64 %51, i64* %6, align 8
  %52 = icmp ult i64 %51, 56
  %53 = icmp ult i8* %45, %4
  %54 = and i1 %52, %53
  br i1 %54, label %55, label %24

55:                                               ; preds = %44
  %56 = getelementptr inbounds i8, i8* %11, i64 4
  store i8* %56, i8** %5, align 8
  %57 = load i8, i8* %45, align 1
  %58 = zext i8 %57 to i64
  %59 = shl i64 %58, %51
  %60 = load i64, i64* %10, align 8
  %61 = or i64 %59, %60
  store i64 %61, i64* %10, align 8
  %62 = add nuw nsw i64 %7, 32
  store i64 %62, i64* %6, align 8
  %63 = icmp ult i64 %62, 56
  %64 = icmp ult i8* %56, %4
  %65 = and i1 %63, %64
  br i1 %65, label %66, label %24

66:                                               ; preds = %55
  %67 = getelementptr inbounds i8, i8* %11, i64 5
  store i8* %67, i8** %5, align 8
  %68 = load i8, i8* %56, align 1
  %69 = zext i8 %68 to i64
  %70 = shl i64 %69, %62
  %71 = load i64, i64* %10, align 8
  %72 = or i64 %70, %71
  store i64 %72, i64* %10, align 8
  %73 = add nuw nsw i64 %7, 40
  store i64 %73, i64* %6, align 8
  %74 = icmp ult i64 %73, 56
  %75 = icmp ult i8* %67, %4
  %76 = and i1 %74, %75
  br i1 %76, label %77, label %24

77:                                               ; preds = %66
  %78 = getelementptr inbounds i8, i8* %11, i64 6
  store i8* %78, i8** %5, align 8
  %79 = load i8, i8* %67, align 1
  %80 = zext i8 %79 to i64
  %81 = shl i64 %80, %73
  %82 = load i64, i64* %10, align 8
  %83 = or i64 %81, %82
  store i64 %83, i64* %10, align 8
  %84 = add nuw nsw i64 %7, 48
  store i64 %84, i64* %6, align 8
  %85 = icmp ult i64 %84, 56
  %86 = icmp ult i8* %78, %4
  %87 = and i1 %85, %86
  br i1 %87, label %88, label %24

88:                                               ; preds = %77
  %89 = getelementptr inbounds i8, i8* %11, i64 7
  store i8* %89, i8** %5, align 8
  %90 = load i8, i8* %78, align 1
  %91 = zext i8 %90 to i64
  %92 = shl i64 %91, %84
  %93 = load i64, i64* %10, align 8
  %94 = or i64 %92, %93
  store i64 %94, i64* %10, align 8
  %95 = add nuw nsw i64 %7, 56
  store i64 %95, i64* %6, align 8
  br label %24
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__16vectorIjNS_9allocatorIjEEE8__appendEm(%"class.std::__1::vector.1"*, i64) local_unnamed_addr #0 comdat align 2 {
  %3 = getelementptr inbounds %"class.std::__1::vector.1", %"class.std::__1::vector.1"* %0, i64 0, i32 0, i32 2, i32 0, i32 0
  %4 = bitcast i32** %3 to i64*
  %5 = load i64, i64* %4, align 8
  %6 = getelementptr inbounds %"class.std::__1::vector.1", %"class.std::__1::vector.1"* %0, i64 0, i32 0, i32 1
  %7 = bitcast i32** %6 to i64*
  %8 = load i64, i64* %7, align 8
  %9 = sub i64 %5, %8
  %10 = ashr exact i64 %9, 2
  %11 = icmp ult i64 %10, %1
  br i1 %11, label %29, label %12

12:                                               ; preds = %2
  %13 = inttoptr i64 %8 to i32*
  %14 = icmp eq i64 %1, 0
  br i1 %14, label %27, label %15

15:                                               ; preds = %12
  %16 = getelementptr inbounds i32, i32* %13, i64 %1
  %17 = inttoptr i64 %8 to i8*
  %18 = add i64 %1, -1
  %19 = getelementptr i32, i32* %13, i64 %18
  %20 = bitcast i32* %19 to i8*
  %21 = sub i64 0, %8
  %22 = getelementptr i8, i8* %20, i64 %21
  %23 = ptrtoint i8* %22 to i64
  %24 = add i64 %23, 4
  %25 = and i64 %24, -4
  tail call void @llvm.memset.p0i8.i64(i8* align 4 %17, i8 0, i64 %25, i1 false) #9
  %26 = ptrtoint i32* %16 to i64
  br label %27

27:                                               ; preds = %12, %15
  %28 = phi i64 [ %26, %15 ], [ %8, %12 ]
  store i64 %28, i64* %7, align 8
  br label %84

29:                                               ; preds = %2
  %30 = bitcast %"class.std::__1::vector.1"* %0 to i64*
  %31 = load i64, i64* %30, align 8
  %32 = sub i64 %8, %31
  %33 = ashr exact i64 %32, 2
  %34 = add i64 %33, %1
  %35 = icmp ugt i64 %34, 4611686018427387903
  br i1 %35, label %36, label %38

36:                                               ; preds = %29
  %37 = bitcast %"class.std::__1::vector.1"* %0 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %37) #11
  unreachable

38:                                               ; preds = %29
  %39 = sub i64 %5, %31
  %40 = ashr exact i64 %39, 2
  %41 = icmp ult i64 %40, 2305843009213693951
  br i1 %41, label %42, label %50

42:                                               ; preds = %38
  %43 = ashr exact i64 %39, 1
  %44 = icmp ult i64 %43, %34
  %45 = select i1 %44, i64 %34, i64 %43
  %46 = icmp eq i64 %45, 0
  br i1 %46, label %55, label %47

47:                                               ; preds = %42
  %48 = icmp ugt i64 %45, 4611686018427387903
  br i1 %48, label %49, label %50

49:                                               ; preds = %47
  tail call void @abort() #11
  unreachable

50:                                               ; preds = %38, %47
  %51 = phi i64 [ %45, %47 ], [ 4611686018427387903, %38 ]
  %52 = shl i64 %51, 2
  %53 = tail call i8* @_Znwm(i64 %52) #10
  %54 = bitcast i8* %53 to i32*
  br label %55

55:                                               ; preds = %50, %42
  %56 = phi i64 [ %51, %50 ], [ 0, %42 ]
  %57 = phi i32* [ %54, %50 ], [ null, %42 ]
  %58 = getelementptr inbounds i32, i32* %57, i64 %33
  %59 = getelementptr inbounds i32, i32* %57, i64 %56
  %60 = getelementptr inbounds i32, i32* %58, i64 %1
  %61 = bitcast i32* %58 to i8*
  %62 = shl i64 %1, 2
  tail call void @llvm.memset.p0i8.i64(i8* align 4 %61, i8 0, i64 %62, i1 false) #9
  %63 = ptrtoint i32* %59 to i64
  %64 = ptrtoint i32* %60 to i64
  %65 = getelementptr inbounds %"class.std::__1::vector.1", %"class.std::__1::vector.1"* %0, i64 0, i32 0, i32 0
  %66 = load i32*, i32** %65, align 8
  %67 = load i64, i64* %7, align 8
  %68 = ptrtoint i32* %66 to i64
  %69 = sub i64 %67, %68
  %70 = ashr exact i64 %69, 2
  %71 = sub nsw i64 0, %70
  %72 = getelementptr inbounds i32, i32* %58, i64 %71
  %73 = ptrtoint i32* %72 to i64
  %74 = icmp sgt i64 %69, 0
  br i1 %74, label %75, label %79

75:                                               ; preds = %55
  %76 = bitcast i32* %72 to i8*
  %77 = bitcast i32* %66 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %76, i8* align 4 %77, i64 %69, i1 false) #9
  %78 = load i32*, i32** %65, align 8
  br label %79

79:                                               ; preds = %55, %75
  %80 = phi i32* [ %66, %55 ], [ %78, %75 ]
  store i64 %73, i64* %30, align 8
  store i64 %64, i64* %7, align 8
  store i64 %63, i64* %4, align 8
  %81 = icmp eq i32* %80, null
  br i1 %81, label %84, label %82

82:                                               ; preds = %79
  %83 = bitcast i32* %80 to i8*
  tail call void @_ZdlPv(i8* %83) #10
  br label %84

84:                                               ; preds = %82, %79, %27
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__16vectorIiNS_9allocatorIiEEE8__appendEm(%"class.std::__1::vector"*, i64) local_unnamed_addr #0 comdat align 2 {
  %3 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 0, i32 2, i32 0, i32 0
  %4 = bitcast i32** %3 to i64*
  %5 = load i64, i64* %4, align 8
  %6 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 0, i32 1
  %7 = bitcast i32** %6 to i64*
  %8 = load i64, i64* %7, align 8
  %9 = sub i64 %5, %8
  %10 = ashr exact i64 %9, 2
  %11 = icmp ult i64 %10, %1
  br i1 %11, label %29, label %12

12:                                               ; preds = %2
  %13 = inttoptr i64 %8 to i32*
  %14 = icmp eq i64 %1, 0
  br i1 %14, label %27, label %15

15:                                               ; preds = %12
  %16 = getelementptr inbounds i32, i32* %13, i64 %1
  %17 = inttoptr i64 %8 to i8*
  %18 = add i64 %1, -1
  %19 = getelementptr i32, i32* %13, i64 %18
  %20 = bitcast i32* %19 to i8*
  %21 = sub i64 0, %8
  %22 = getelementptr i8, i8* %20, i64 %21
  %23 = ptrtoint i8* %22 to i64
  %24 = add i64 %23, 4
  %25 = and i64 %24, -4
  tail call void @llvm.memset.p0i8.i64(i8* align 4 %17, i8 0, i64 %25, i1 false) #9
  %26 = ptrtoint i32* %16 to i64
  br label %27

27:                                               ; preds = %12, %15
  %28 = phi i64 [ %26, %15 ], [ %8, %12 ]
  store i64 %28, i64* %7, align 8
  br label %84

29:                                               ; preds = %2
  %30 = bitcast %"class.std::__1::vector"* %0 to i64*
  %31 = load i64, i64* %30, align 8
  %32 = sub i64 %8, %31
  %33 = ashr exact i64 %32, 2
  %34 = add i64 %33, %1
  %35 = icmp ugt i64 %34, 4611686018427387903
  br i1 %35, label %36, label %38

36:                                               ; preds = %29
  %37 = bitcast %"class.std::__1::vector"* %0 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %37) #11
  unreachable

38:                                               ; preds = %29
  %39 = sub i64 %5, %31
  %40 = ashr exact i64 %39, 2
  %41 = icmp ult i64 %40, 2305843009213693951
  br i1 %41, label %42, label %50

42:                                               ; preds = %38
  %43 = ashr exact i64 %39, 1
  %44 = icmp ult i64 %43, %34
  %45 = select i1 %44, i64 %34, i64 %43
  %46 = icmp eq i64 %45, 0
  br i1 %46, label %55, label %47

47:                                               ; preds = %42
  %48 = icmp ugt i64 %45, 4611686018427387903
  br i1 %48, label %49, label %50

49:                                               ; preds = %47
  tail call void @abort() #11
  unreachable

50:                                               ; preds = %38, %47
  %51 = phi i64 [ %45, %47 ], [ 4611686018427387903, %38 ]
  %52 = shl i64 %51, 2
  %53 = tail call i8* @_Znwm(i64 %52) #10
  %54 = bitcast i8* %53 to i32*
  br label %55

55:                                               ; preds = %50, %42
  %56 = phi i64 [ %51, %50 ], [ 0, %42 ]
  %57 = phi i32* [ %54, %50 ], [ null, %42 ]
  %58 = getelementptr inbounds i32, i32* %57, i64 %33
  %59 = getelementptr inbounds i32, i32* %57, i64 %56
  %60 = getelementptr inbounds i32, i32* %58, i64 %1
  %61 = bitcast i32* %58 to i8*
  %62 = shl i64 %1, 2
  tail call void @llvm.memset.p0i8.i64(i8* align 4 %61, i8 0, i64 %62, i1 false) #9
  %63 = ptrtoint i32* %59 to i64
  %64 = ptrtoint i32* %60 to i64
  %65 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 0, i32 0
  %66 = load i32*, i32** %65, align 8
  %67 = load i64, i64* %7, align 8
  %68 = ptrtoint i32* %66 to i64
  %69 = sub i64 %67, %68
  %70 = ashr exact i64 %69, 2
  %71 = sub nsw i64 0, %70
  %72 = getelementptr inbounds i32, i32* %58, i64 %71
  %73 = ptrtoint i32* %72 to i64
  %74 = icmp sgt i64 %69, 0
  br i1 %74, label %75, label %79

75:                                               ; preds = %55
  %76 = bitcast i32* %72 to i8*
  %77 = bitcast i32* %66 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %76, i8* align 4 %77, i64 %69, i1 false) #9
  %78 = load i32*, i32** %65, align 8
  br label %79

79:                                               ; preds = %55, %75
  %80 = phi i32* [ %66, %55 ], [ %78, %75 ]
  store i64 %73, i64* %30, align 8
  store i64 %64, i64* %7, align 8
  store i64 %63, i64* %4, align 8
  %81 = icmp eq i32* %80, null
  br i1 %81, label %84, label %82

82:                                               ; preds = %79
  %83 = bitcast i32* %80 to i8*
  tail call void @_ZdlPv(i8* %83) #10
  br label %84

84:                                               ; preds = %82, %79, %27
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__16vectorIhNS_9allocatorIhEEE8__appendEm(%"class.std::__1::vector.8"*, i64) local_unnamed_addr #0 comdat align 2 {
  %3 = getelementptr inbounds %"class.std::__1::vector.8", %"class.std::__1::vector.8"* %0, i64 0, i32 0, i32 2, i32 0, i32 0
  %4 = bitcast i8** %3 to i64*
  %5 = load i64, i64* %4, align 8
  %6 = getelementptr inbounds %"class.std::__1::vector.8", %"class.std::__1::vector.8"* %0, i64 0, i32 0, i32 1
  %7 = bitcast i8** %6 to i64*
  %8 = load i64, i64* %7, align 8
  %9 = sub i64 %5, %8
  %10 = icmp ult i64 %9, %1
  br i1 %10, label %22, label %11

11:                                               ; preds = %2
  %12 = inttoptr i64 %8 to i8*
  %13 = icmp eq i64 %1, 0
  br i1 %13, label %20, label %14

14:                                               ; preds = %11
  %15 = getelementptr inbounds i8, i8* %12, i64 %1
  %16 = sub i64 %1, %8
  %17 = getelementptr i8, i8* %12, i64 %16
  %18 = ptrtoint i8* %17 to i64
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %12, i8 0, i64 %18, i1 false) #9
  %19 = ptrtoint i8* %15 to i64
  br label %20

20:                                               ; preds = %11, %14
  %21 = phi i64 [ %19, %14 ], [ %8, %11 ]
  store i64 %21, i64* %7, align 8
  br label %68

22:                                               ; preds = %2
  %23 = bitcast %"class.std::__1::vector.8"* %0 to i64*
  %24 = load i64, i64* %23, align 8
  %25 = sub i64 %8, %24
  %26 = add i64 %25, %1
  %27 = icmp slt i64 %26, 0
  br i1 %27, label %28, label %30

28:                                               ; preds = %22
  %29 = bitcast %"class.std::__1::vector.8"* %0 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %29) #11
  unreachable

30:                                               ; preds = %22
  %31 = sub i64 %5, %24
  %32 = icmp ult i64 %31, 4611686018427387903
  br i1 %32, label %33, label %38

33:                                               ; preds = %30
  %34 = shl i64 %31, 1
  %35 = icmp ult i64 %34, %26
  %36 = select i1 %35, i64 %26, i64 %34
  %37 = icmp eq i64 %36, 0
  br i1 %37, label %41, label %38

38:                                               ; preds = %30, %33
  %39 = phi i64 [ %36, %33 ], [ 9223372036854775807, %30 ]
  %40 = tail call i8* @_Znwm(i64 %39) #10
  br label %41

41:                                               ; preds = %38, %33
  %42 = phi i64 [ %39, %38 ], [ 0, %33 ]
  %43 = phi i8* [ %40, %38 ], [ null, %33 ]
  %44 = getelementptr inbounds i8, i8* %43, i64 %25
  %45 = ptrtoint i8* %44 to i64
  %46 = getelementptr inbounds i8, i8* %43, i64 %42
  %47 = getelementptr inbounds i8, i8* %44, i64 %1
  %48 = sub i64 %1, %45
  %49 = getelementptr i8, i8* %44, i64 %48
  %50 = ptrtoint i8* %49 to i64
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %44, i8 0, i64 %50, i1 false) #9
  %51 = ptrtoint i8* %46 to i64
  %52 = ptrtoint i8* %47 to i64
  %53 = getelementptr inbounds %"class.std::__1::vector.8", %"class.std::__1::vector.8"* %0, i64 0, i32 0, i32 0
  %54 = load i8*, i8** %53, align 8
  %55 = load i64, i64* %7, align 8
  %56 = ptrtoint i8* %54 to i64
  %57 = sub i64 %55, %56
  %58 = sub i64 0, %57
  %59 = getelementptr inbounds i8, i8* %44, i64 %58
  %60 = ptrtoint i8* %59 to i64
  %61 = icmp sgt i64 %57, 0
  br i1 %61, label %62, label %64

62:                                               ; preds = %41
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %59, i8* align 1 %54, i64 %57, i1 false) #9
  %63 = load i8*, i8** %53, align 8
  br label %64

64:                                               ; preds = %41, %62
  %65 = phi i8* [ %54, %41 ], [ %63, %62 ]
  store i64 %60, i64* %23, align 8
  store i64 %52, i64* %7, align 8
  store i64 %51, i64* %4, align 8
  %66 = icmp eq i8* %65, null
  br i1 %66, label %68, label %67

67:                                               ; preds = %64
  tail call void @_ZdlPv(i8* nonnull %65) #10
  br label %68

68:                                               ; preds = %67, %64, %20
  ret void
}

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { inlinehint nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { noreturn nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { nobuiltin nofree "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { noinline nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #9 = { nounwind }
attributes #10 = { builtin nounwind }
attributes #11 = { noreturn nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{!"branch_weights", i32 1, i32 2000}
