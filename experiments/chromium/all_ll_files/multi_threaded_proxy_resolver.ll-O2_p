; ModuleID = '../../net/proxy_resolution/multi_threaded_proxy_resolver.cc'
source_filename = "../../net/proxy_resolution/multi_threaded_proxy_resolver.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.net::MultiThreadedProxyResolverFactory" = type { %"class.net::ProxyResolverFactory.base", i64, %"class.std::__1::set" }
%"class.net::ProxyResolverFactory.base" = type <{ i32 (...)**, i8 }>
%"class.std::__1::set" = type { %"class.std::__1::__tree" }
%"class.std::__1::__tree" = type { %"class.std::__1::__tree_end_node"*, %"class.std::__1::__compressed_pair", %"class.std::__1::__compressed_pair.1" }
%"class.std::__1::__tree_end_node" = type { %"class.std::__1::__tree_node_base"* }
%"class.std::__1::__tree_node_base" = type <{ %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_end_node"*, i8, [7 x i8] }>
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %"class.std::__1::__tree_end_node" }
%"class.std::__1::__compressed_pair.1" = type { %"struct.std::__1::__compressed_pair_elem.2" }
%"struct.std::__1::__compressed_pair_elem.2" = type { i64 }
%"class.net::ProxyResolverFactory" = type <{ i32 (...)**, i8, [7 x i8] }>
%"class.std::__1::__tree_node" = type { %"class.std::__1::__tree_node_base.base", %"class.net::MultiThreadedProxyResolverFactory::Job"* }
%"class.std::__1::__tree_node_base.base" = type <{ %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_end_node"*, i8 }>
%"class.net::MultiThreadedProxyResolverFactory::Job" = type { %"class.net::ProxyResolverFactory::Request", %"class.net::(anonymous namespace)::Executor::Coordinator", %"class.net::MultiThreadedProxyResolverFactory"*, %"class.std::__1::unique_ptr"*, %"class.std::__1::unique_ptr.7", i64, %class.scoped_refptr, %class.scoped_refptr.34, %"class.base::OnceCallback" }
%"class.net::ProxyResolverFactory::Request" = type { i32 (...)** }
%"class.net::(anonymous namespace)::Executor::Coordinator" = type { i32 (...)** }
%"class.std::__1::unique_ptr" = type { %"class.std::__1::__compressed_pair.4" }
%"class.std::__1::__compressed_pair.4" = type { %"struct.std::__1::__compressed_pair_elem.5" }
%"struct.std::__1::__compressed_pair_elem.5" = type { %"class.net::ProxyResolver"* }
%"class.net::ProxyResolver" = type { i32 (...)** }
%"class.std::__1::unique_ptr.7" = type { %"class.std::__1::__compressed_pair.8" }
%"class.std::__1::__compressed_pair.8" = type { %"struct.std::__1::__compressed_pair_elem.9" }
%"struct.std::__1::__compressed_pair_elem.9" = type { %"class.net::ProxyResolverFactory"* }
%class.scoped_refptr = type { %"class.net::PacFileData"* }
%"class.net::PacFileData" = type { i32 (...)**, %"class.base::RefCountedThreadSafe", i32, %class.GURL, %"class.std::__1::basic_string.25" }
%"class.base::RefCountedThreadSafe" = type { %"class.base::subtle::RefCountedThreadSafeBase" }
%"class.base::subtle::RefCountedThreadSafeBase" = type { %"class.base::AtomicRefCount" }
%"class.base::AtomicRefCount" = type { %"struct.std::__1::atomic" }
%"struct.std::__1::atomic" = type { %"struct.std::__1::__atomic_base" }
%"struct.std::__1::__atomic_base" = type { %"struct.std::__1::__atomic_base.13" }
%"struct.std::__1::__atomic_base.13" = type { %"struct.std::__1::__cxx_atomic_impl" }
%"struct.std::__1::__cxx_atomic_impl" = type { %"struct.std::__1::__cxx_atomic_base_impl" }
%"struct.std::__1::__cxx_atomic_base_impl" = type { i32 }
%class.GURL = type { %"class.std::__1::basic_string", i8, %"struct.url::Parsed", %"class.std::__1::unique_ptr.19" }
%"class.std::__1::basic_string" = type { %"class.std::__1::__compressed_pair.14" }
%"class.std::__1::__compressed_pair.14" = type { %"struct.std::__1::__compressed_pair_elem.15" }
%"struct.std::__1::__compressed_pair_elem.15" = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" = type { %union.anon }
%union.anon = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" = type { i8*, i64, i64 }
%"struct.url::Parsed" = type { %"struct.url::Component", %"struct.url::Component", %"struct.url::Component", %"struct.url::Component", %"struct.url::Component", %"struct.url::Component", %"struct.url::Component", %"struct.url::Component", i8, %"struct.url::Parsed"* }
%"struct.url::Component" = type { i32, i32 }
%"class.std::__1::unique_ptr.19" = type { %"class.std::__1::__compressed_pair.20" }
%"class.std::__1::__compressed_pair.20" = type { %"struct.std::__1::__compressed_pair_elem.21" }
%"struct.std::__1::__compressed_pair_elem.21" = type { %class.GURL* }
%"class.std::__1::basic_string.25" = type { %"class.std::__1::__compressed_pair.26" }
%"class.std::__1::__compressed_pair.26" = type { %"struct.std::__1::__compressed_pair_elem.27" }
%"struct.std::__1::__compressed_pair_elem.27" = type { %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__rep" }
%"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__rep" = type { %union.anon.28 }
%union.anon.28 = type { %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__long" }
%"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__long" = type { i16*, i64, i64 }
%class.scoped_refptr.34 = type { %"class.net::(anonymous namespace)::Executor"* }
%"class.net::(anonymous namespace)::Executor" = type { %"class.base::RefCountedThreadSafe.35", %"class.net::(anonymous namespace)::Executor::Coordinator"*, i32, %class.scoped_refptr.36, %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr.38" }
%"class.base::RefCountedThreadSafe.35" = type { %"class.base::subtle::RefCountedThreadSafeBase" }
%class.scoped_refptr.36 = type { %"class.net::(anonymous namespace)::Job"* }
%"class.net::(anonymous namespace)::Job" = type <{ i32 (...)**, %"class.base::RefCountedThreadSafe.37", [4 x i8], %"class.net::(anonymous namespace)::Executor"*, i8, [7 x i8] }>
%"class.base::RefCountedThreadSafe.37" = type { %"class.base::subtle::RefCountedThreadSafeBase" }
%"class.std::__1::unique_ptr.38" = type { %"class.std::__1::__compressed_pair.39" }
%"class.std::__1::__compressed_pair.39" = type { %"struct.std::__1::__compressed_pair_elem.40" }
%"struct.std::__1::__compressed_pair_elem.40" = type { %"class.base::Thread"* }
%"class.base::Thread" = type <{ %"class.base::PlatformThread::Delegate", i8, i8, i8, [5 x i8], %"class.base::Lock", %"class.base::PlatformThreadHandle", %"class.base::Lock", i32, [4 x i8], %"class.base::WaitableEvent", %"class.std::__1::unique_ptr.47", %"class.base::RunLoop"*, i32, [4 x i8], %"class.std::__1::basic_string", %"class.base::WaitableEvent", %"class.base::SequenceCheckerDoNothing", [7 x i8] }>
%"class.base::PlatformThread::Delegate" = type { i32 (...)** }
%"class.base::PlatformThreadHandle" = type { i64 }
%"class.base::Lock" = type { %"class.base::internal::LockImpl" }
%"class.base::internal::LockImpl" = type { %union.pthread_mutex_t }
%union.pthread_mutex_t = type { %struct.__pthread_mutex_s }
%struct.__pthread_mutex_s = type { i32, i32, i32, i32, i32, i16, i16, %struct.__pthread_internal_list }
%struct.__pthread_internal_list = type { %struct.__pthread_internal_list*, %struct.__pthread_internal_list* }
%"class.std::__1::unique_ptr.47" = type { %"class.std::__1::__compressed_pair.48" }
%"class.std::__1::__compressed_pair.48" = type { %"struct.std::__1::__compressed_pair_elem.49" }
%"struct.std::__1::__compressed_pair_elem.49" = type { %"class.base::Thread::Delegate"* }
%"class.base::Thread::Delegate" = type { i32 (...)** }
%"class.base::RunLoop" = type { %"class.base::RunLoop::Delegate"*, i32, i8, i8, i8, i8, i8, %class.scoped_refptr.65, %"class.base::WeakPtrFactory" }
%"class.base::RunLoop::Delegate" = type <{ i32 (...)**, %"class.std::__1::stack", %"class.base::ObserverList", i8, [7 x i8] }>
%"class.std::__1::stack" = type { %"class.std::__1::vector" }
%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { %"class.base::RunLoop"**, %"class.base::RunLoop"**, %"class.std::__1::__compressed_pair.53" }
%"class.std::__1::__compressed_pair.53" = type { %"struct.std::__1::__compressed_pair_elem.54" }
%"struct.std::__1::__compressed_pair_elem.54" = type { %"class.base::RunLoop"** }
%"class.base::ObserverList" = type <{ %"class.std::__1::vector.58", %"class.base::LinkedList", i64, i32, [4 x i8] }>
%"class.std::__1::vector.58" = type { %"class.std::__1::__vector_base.59" }
%"class.std::__1::__vector_base.59" = type { %"class.base::internal::UncheckedObserverAdapter"*, %"class.base::internal::UncheckedObserverAdapter"*, %"class.std::__1::__compressed_pair.60" }
%"class.base::internal::UncheckedObserverAdapter" = type { i8* }
%"class.std::__1::__compressed_pair.60" = type { %"struct.std::__1::__compressed_pair_elem.61" }
%"struct.std::__1::__compressed_pair_elem.61" = type { %"class.base::internal::UncheckedObserverAdapter"* }
%"class.base::LinkedList" = type { %"class.base::LinkNode" }
%"class.base::LinkNode" = type { %"class.base::internal::LinkNodeBase" }
%"class.base::internal::LinkNodeBase" = type { %"class.base::internal::LinkNodeBase"*, %"class.base::internal::LinkNodeBase"* }
%class.scoped_refptr.65 = type { %"class.base::SingleThreadTaskRunner"* }
%"class.base::SingleThreadTaskRunner" = type { %"class.base::SequencedTaskRunner.base", [4 x i8] }
%"class.base::SequencedTaskRunner.base" = type { %"class.base::TaskRunner.base" }
%"class.base::TaskRunner.base" = type <{ i32 (...)**, %"class.base::RefCountedThreadSafe.66" }>
%"class.base::RefCountedThreadSafe.66" = type { %"class.base::subtle::RefCountedThreadSafeBase" }
%"class.base::WeakPtrFactory" = type { %"class.base::internal::WeakPtrFactoryBase" }
%"class.base::internal::WeakPtrFactoryBase" = type { %"class.base::internal::WeakReferenceOwner", i64 }
%"class.base::internal::WeakReferenceOwner" = type { %class.scoped_refptr.67 }
%class.scoped_refptr.67 = type { %"class.base::internal::WeakReference::Flag"* }
%"class.base::internal::WeakReference::Flag" = type <{ %"class.base::RefCountedThreadSafe.68", %"class.base::AtomicFlag", [3 x i8] }>
%"class.base::RefCountedThreadSafe.68" = type { %"class.base::subtle::RefCountedThreadSafeBase" }
%"class.base::AtomicFlag" = type { %"struct.std::__1::atomic.69" }
%"struct.std::__1::atomic.69" = type { %"struct.std::__1::__atomic_base.70" }
%"struct.std::__1::__atomic_base.70" = type { %"struct.std::__1::__atomic_base.71" }
%"struct.std::__1::__atomic_base.71" = type { %"struct.std::__1::__cxx_atomic_impl.72" }
%"struct.std::__1::__cxx_atomic_impl.72" = type { %"struct.std::__1::__cxx_atomic_base_impl.73" }
%"struct.std::__1::__cxx_atomic_base_impl.73" = type { i8 }
%"class.base::WaitableEvent" = type <{ %class.scoped_refptr.41, i8, [7 x i8] }>
%class.scoped_refptr.41 = type { %"struct.base::WaitableEvent::WaitableEventKernel"* }
%"struct.base::WaitableEvent::WaitableEventKernel" = type { %"class.base::RefCountedThreadSafe.42", %"class.base::Lock", i8, i8, %"class.std::__1::list" }
%"class.base::RefCountedThreadSafe.42" = type { %"class.base::subtle::RefCountedThreadSafeBase" }
%"class.std::__1::list" = type { %"class.std::__1::__list_imp" }
%"class.std::__1::__list_imp" = type { %"struct.std::__1::__list_node_base", %"class.std::__1::__compressed_pair.43" }
%"struct.std::__1::__list_node_base" = type { %"struct.std::__1::__list_node_base"*, %"struct.std::__1::__list_node_base"* }
%"class.std::__1::__compressed_pair.43" = type { %"struct.std::__1::__compressed_pair_elem.2" }
%"class.base::SequenceCheckerDoNothing" = type { i8 }
%"class.base::OnceCallback" = type { %"class.base::internal::CallbackBase" }
%"class.base::internal::CallbackBase" = type { %class.scoped_refptr.77 }
%class.scoped_refptr.77 = type { %"class.base::internal::BindStateBase"* }
%"class.base::internal::BindStateBase" = type { %"class.base::RefCountedThreadSafe.78", void ()*, void (%"class.base::internal::BindStateBase"*)*, i1 (%"class.base::internal::BindStateBase"*, i32)* }
%"class.base::RefCountedThreadSafe.78" = type { %"class.base::subtle::RefCountedThreadSafeBase" }
%"class.std::__1::unique_ptr.79" = type { %"class.std::__1::__compressed_pair.80" }
%"class.std::__1::__compressed_pair.80" = type { %"struct.std::__1::__compressed_pair_elem.81" }
%"struct.std::__1::__compressed_pair_elem.81" = type { %"class.net::ProxyResolverFactory::Request"* }
%"class.base::Location" = type { i8*, i8*, i32, i8* }
%"class.net::MultiThreadedProxyResolverScopedAllowJoinOnIO" = type { %"class.base::ScopedAllowBaseSyncPrimitivesOutsideBlockingScope" }
%"class.base::ScopedAllowBaseSyncPrimitivesOutsideBlockingScope" = type { %"class.base::IgnoreHangsInScope" }
%"class.base::IgnoreHangsInScope" = type { i8 }
%"class.logging::CheckError" = type { %"class.logging::LogMessage"* }
%"class.logging::LogMessage" = type { i32 (...)**, i32, %"class.std::__1::basic_ostringstream", i64, i8*, i32, %"class.base::ScopedClearLastErrorBase" }
%"class.std::__1::basic_ostringstream" = type { %"class.std::__1::basic_ostream.base", %"class.std::__1::basic_stringbuf", %"class.std::__1::basic_ios.base" }
%"class.std::__1::basic_ostream.base" = type { i32 (...)** }
%"class.std::__1::basic_stringbuf" = type <{ %"class.std::__1::basic_streambuf", %"class.std::__1::basic_string", i8*, i32, [4 x i8] }>
%"class.std::__1::basic_streambuf" = type { i32 (...)**, %"class.std::__1::locale", i8*, i8*, i8*, i8*, i8*, i8* }
%"class.std::__1::locale" = type { %"class.std::__1::locale::__imp"* }
%"class.std::__1::locale::__imp" = type opaque
%"class.std::__1::basic_ios.base" = type <{ %"class.std::__1::ios_base", %"class.std::__1::basic_ostream"*, i32 }>
%"class.std::__1::ios_base" = type { i32 (...)**, i32, i64, i64, i32, i32, i8*, i8*, void (i32, %"class.std::__1::ios_base"*, i32)**, i32*, i64, i64, i64*, i64, i64, i8**, i64, i64 }
%"class.std::__1::basic_ostream" = type { i32 (...)**, %"class.std::__1::basic_ios.base" }
%"class.base::ScopedClearLastErrorBase" = type { i32 }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short" = type { [23 x i8], %struct.anon }
%struct.anon = type { i8 }
%"class.base::OnceCallback.91" = type { %"class.base::internal::CallbackBase" }
%"class.base::TaskRunner" = type <{ i32 (...)**, %"class.base::RefCountedThreadSafe.66", [4 x i8] }>
%"struct.std::__1::__split_buffer" = type { %class.scoped_refptr.34*, %class.scoped_refptr.34*, %class.scoped_refptr.34*, %"class.std::__1::__compressed_pair.158" }
%"class.std::__1::__compressed_pair.158" = type { %"struct.std::__1::__compressed_pair_elem.109", %"struct.std::__1::__compressed_pair_elem.159" }
%"struct.std::__1::__compressed_pair_elem.109" = type { %class.scoped_refptr.34* }
%"struct.std::__1::__compressed_pair_elem.159" = type { %"class.std::__1::allocator.111"* }
%"class.std::__1::allocator.111" = type { i8 }
%"class.std::__1::__vector_base_common" = type { i8 }
%"class.net::(anonymous namespace)::CreateResolverJob" = type { %"class.net::(anonymous namespace)::Job.base", %class.scoped_refptr, %"class.net::ProxyResolverFactory"*, %"class.std::__1::unique_ptr" }
%"class.net::(anonymous namespace)::Job.base" = type <{ i32 (...)**, %"class.base::RefCountedThreadSafe.37", [4 x i8], %"class.net::(anonymous namespace)::Executor"*, i8 }>
%"class.net::(anonymous namespace)::MultiThreadedProxyResolver" = type { %"class.net::ProxyResolver", %"class.net::(anonymous namespace)::Executor::Coordinator", %"class.std::__1::unique_ptr.7", i64, %"class.base::circular_deque", %"class.std::__1::vector.106", %class.scoped_refptr }
%"class.base::circular_deque" = type { %"class.base::internal::VectorBuffer", i64, i64 }
%"class.base::internal::VectorBuffer" = type { %class.scoped_refptr.36*, i64 }
%"class.std::__1::vector.106" = type { %"class.std::__1::__vector_base.107" }
%"class.std::__1::__vector_base.107" = type { %class.scoped_refptr.34*, %class.scoped_refptr.34*, %"class.std::__1::__compressed_pair.108" }
%"class.std::__1::__compressed_pair.108" = type { %"struct.std::__1::__compressed_pair_elem.109" }
%"class.net::NetworkIsolationKey" = type { i8, %"class.absl::optional", %"class.absl::optional" }
%"class.absl::optional" = type { %"class.absl::optional_internal::optional_data" }
%"class.absl::optional_internal::optional_data" = type { %"class.absl::optional_internal::optional_data_base" }
%"class.absl::optional_internal::optional_data_base" = type { %"class.absl::optional_internal::optional_data_dtor_base" }
%"class.absl::optional_internal::optional_data_dtor_base" = type { i8, %union.anon.116 }
%union.anon.116 = type { %"class.net::SchemefulSite" }
%"class.net::SchemefulSite" = type { %"class.url::Origin" }
%"class.url::Origin" = type { %"class.url::SchemeHostPort", %"class.absl::optional.117" }
%"class.url::SchemeHostPort" = type <{ %"class.std::__1::basic_string", %"class.std::__1::basic_string", i16, [6 x i8] }>
%"class.absl::optional.117" = type { %"class.absl::optional_internal::optional_data.118" }
%"class.absl::optional_internal::optional_data.118" = type { %"class.absl::optional_internal::optional_data_base.119" }
%"class.absl::optional_internal::optional_data_base.119" = type { %"class.absl::optional_internal::optional_data_dtor_base.120" }
%"class.absl::optional_internal::optional_data_dtor_base.120" = type { i8, %union.anon.121 }
%union.anon.121 = type { %"class.url::Origin::Nonce" }
%"class.url::Origin::Nonce" = type { %"class.base::UnguessableToken" }
%"class.base::UnguessableToken" = type { %"class.base::Token" }
%"class.base::Token" = type { i64, i64 }
%"class.net::ProxyInfo" = type { %"class.net::ProxyList", %"class.std::__1::map", %"struct.net::MutableNetworkTrafficAnnotationTag", i8, %"class.base::TimeTicks", %"class.base::TimeTicks" }
%"class.net::ProxyList" = type { %"class.std::__1::vector.122" }
%"class.std::__1::vector.122" = type { %"class.std::__1::__vector_base.123" }
%"class.std::__1::__vector_base.123" = type { %"class.net::ProxyServer"*, %"class.net::ProxyServer"*, %"class.std::__1::__compressed_pair.124" }
%"class.net::ProxyServer" = type { i32, [4 x i8], %"class.net::HostPortPair" }
%"class.net::HostPortPair" = type <{ %"class.std::__1::basic_string", i16, [6 x i8] }>
%"class.std::__1::__compressed_pair.124" = type { %"struct.std::__1::__compressed_pair_elem.125" }
%"struct.std::__1::__compressed_pair_elem.125" = type { %"class.net::ProxyServer"* }
%"class.std::__1::map" = type { %"class.std::__1::__tree.129" }
%"class.std::__1::__tree.129" = type { %"class.std::__1::__tree_end_node"*, %"class.std::__1::__compressed_pair.130", %"class.std::__1::__compressed_pair.134" }
%"class.std::__1::__compressed_pair.130" = type { %"struct.std::__1::__compressed_pair_elem" }
%"class.std::__1::__compressed_pair.134" = type { %"struct.std::__1::__compressed_pair_elem.2" }
%"struct.net::MutableNetworkTrafficAnnotationTag" = type { i32 }
%"class.base::TimeTicks" = type { %"class.base::time_internal::TimeBase" }
%"class.base::time_internal::TimeBase" = type { i64 }
%"class.std::__1::unique_ptr.138" = type { %"class.std::__1::__compressed_pair.139" }
%"class.std::__1::__compressed_pair.139" = type { %"struct.std::__1::__compressed_pair_elem.140" }
%"struct.std::__1::__compressed_pair_elem.140" = type { %"class.net::ProxyResolver::Request"* }
%"class.net::ProxyResolver::Request" = type { i32 (...)** }
%"class.net::NetLogWithSource" = type { %"struct.net::NetLogSource", %"class.net::NetLog"* }
%"struct.net::NetLogSource" = type { i32, i32, %"class.base::TimeTicks" }
%"class.net::NetLog" = type { i32 (...)**, %"class.base::Lock", i32, i32, %"class.std::__1::vector.144", %"class.std::__1::vector.151" }
%"class.std::__1::vector.144" = type { %"class.std::__1::__vector_base.145" }
%"class.std::__1::__vector_base.145" = type { %"class.net::NetLog::ThreadSafeObserver"**, %"class.net::NetLog::ThreadSafeObserver"**, %"class.std::__1::__compressed_pair.146" }
%"class.net::NetLog::ThreadSafeObserver" = type { i32 (...)**, i32, %"class.net::NetLog"* }
%"class.std::__1::__compressed_pair.146" = type { %"struct.std::__1::__compressed_pair_elem.147" }
%"struct.std::__1::__compressed_pair_elem.147" = type { %"class.net::NetLog::ThreadSafeObserver"** }
%"class.std::__1::vector.151" = type { %"class.std::__1::__vector_base.152" }
%"class.std::__1::__vector_base.152" = type { %"class.net::NetLog::ThreadSafeCaptureModeObserver"**, %"class.net::NetLog::ThreadSafeCaptureModeObserver"**, %"class.std::__1::__compressed_pair.153" }
%"class.net::NetLog::ThreadSafeCaptureModeObserver" = type { i32 (...)**, %"class.net::NetLog"* }
%"class.std::__1::__compressed_pair.153" = type { %"struct.std::__1::__compressed_pair_elem.154" }
%"struct.std::__1::__compressed_pair_elem.154" = type { %"class.net::NetLog::ThreadSafeCaptureModeObserver"** }
%"class.logging::CheckOpResult" = type { i8* }
%"class.net::(anonymous namespace)::MultiThreadedProxyResolver::GetProxyForURLJob" = type <{ %"class.net::(anonymous namespace)::Job.base", [7 x i8], %"class.base::OnceCallback", %"class.net::ProxyInfo"*, %"class.net::NetLogWithSource", %class.GURL, %"class.net::NetworkIsolationKey", %"class.net::ProxyInfo", i8, [7 x i8] }>
%"class.net::(anonymous namespace)::MultiThreadedProxyResolver::RequestImpl" = type { %"class.net::ProxyResolver::Request", %class.scoped_refptr.36 }

$_ZN3net33MultiThreadedProxyResolverFactory3JobC2EPS0_RK13scoped_refptrINS_11PacFileDataEEPNSt3__110unique_ptrINS_13ProxyResolverENS8_14default_deleteISA_EEEENS9_INS_20ProxyResolverFactoryENSB_ISF_EEEEmN4base12OnceCallbackIFviEEE = comdat any

$_ZN3net33MultiThreadedProxyResolverFactory3JobD2Ev = comdat any

$_ZN3net33MultiThreadedProxyResolverFactory3JobD0Ev = comdat any

$_ZThn8_N3net33MultiThreadedProxyResolverFactory3JobD1Ev = comdat any

$_ZThn8_N3net33MultiThreadedProxyResolverFactory3JobD0Ev = comdat any

$_ZNSt3__16__treeIPN3net33MultiThreadedProxyResolverFactory3JobENS_4lessIS4_EENS_9allocatorIS4_EEE7destroyEPNS_11__tree_nodeIS4_PvEE = comdat any

$_ZNSt3__127__tree_balance_after_insertIPNS_16__tree_node_baseIPvEEEEvT_S5_ = comdat any

$_ZNSt3__113__tree_removeIPNS_16__tree_node_baseIPvEEEEvT_S5_ = comdat any

$_ZTVN3net33MultiThreadedProxyResolverFactory3JobE = comdat any

@_ZTVN3net33MultiThreadedProxyResolverFactoryE = hidden unnamed_addr constant { [6 x i8*] } { [6 x i8*] [i8* null, i8* null, i8* bitcast (void (%"class.net::MultiThreadedProxyResolverFactory"*)* @_ZN3net33MultiThreadedProxyResolverFactoryD2Ev to i8*), i8* bitcast (void (%"class.net::MultiThreadedProxyResolverFactory"*)* @_ZN3net33MultiThreadedProxyResolverFactoryD0Ev to i8*), i8* bitcast (i32 (%"class.net::MultiThreadedProxyResolverFactory"*, %class.scoped_refptr*, %"class.std::__1::unique_ptr"*, %"class.base::OnceCallback"*, %"class.std::__1::unique_ptr.79"*)* @_ZN3net33MultiThreadedProxyResolverFactory19CreateProxyResolverERK13scoped_refptrINS_11PacFileDataEEPNSt3__110unique_ptrINS_13ProxyResolverENS6_14default_deleteIS8_EEEEN4base12OnceCallbackIFviEEEPNS7_INS_20ProxyResolverFactory7RequestENS9_ISI_EEEE to i8*), i8* bitcast (void ()* @__cxa_pure_virtual to i8*)] }, align 8
@.str = private unnamed_addr constant [46 x i8] c"MultiThreadedProxyResolverScopedAllowJoinOnIO\00", align 1
@.str.1 = private unnamed_addr constant [60 x i8] c"../../net/proxy_resolution/multi_threaded_proxy_resolver.cc\00", align 1
@_ZTVN3net33MultiThreadedProxyResolverFactory3JobE = linkonce_odr hidden unnamed_addr constant { [5 x i8*], [5 x i8*] } { [5 x i8*] [i8* null, i8* null, i8* bitcast (void (%"class.net::MultiThreadedProxyResolverFactory::Job"*)* @_ZN3net33MultiThreadedProxyResolverFactory3JobD2Ev to i8*), i8* bitcast (void (%"class.net::MultiThreadedProxyResolverFactory::Job"*)* @_ZN3net33MultiThreadedProxyResolverFactory3JobD0Ev to i8*), i8* bitcast (void (%"class.net::MultiThreadedProxyResolverFactory::Job"*, %"class.net::(anonymous namespace)::Executor"*)* @_ZN3net33MultiThreadedProxyResolverFactory3Job15OnExecutorReadyEPNS_12_GLOBAL__N_18ExecutorE to i8*)], [5 x i8*] [i8* inttoptr (i64 -8 to i8*), i8* null, i8* bitcast (void (%"class.net::MultiThreadedProxyResolverFactory::Job"*, %"class.net::(anonymous namespace)::Executor"*)* @_ZThn8_N3net33MultiThreadedProxyResolverFactory3Job15OnExecutorReadyEPNS_12_GLOBAL__N_18ExecutorE to i8*), i8* bitcast (void (%"class.net::MultiThreadedProxyResolverFactory::Job"*)* @_ZThn8_N3net33MultiThreadedProxyResolverFactory3JobD1Ev to i8*), i8* bitcast (void (%"class.net::MultiThreadedProxyResolverFactory::Job"*)* @_ZThn8_N3net33MultiThreadedProxyResolverFactory3JobD0Ev to i8*)] }, comdat, align 8
@.str.2 = private unnamed_addr constant [15 x i8] c"PAC thread #%d\00", align 1
@.str.3 = private unnamed_addr constant [17 x i8] c"thread_->Start()\00", align 1
@.str.4 = private unnamed_addr constant [9 x i8] c"StartJob\00", align 1
@_ZTVN3net12_GLOBAL__N_117CreateResolverJobE = internal unnamed_addr constant { [7 x i8*] } { [7 x i8*] [i8* null, i8* null, i8* bitcast (void (%"class.net::(anonymous namespace)::Job"*)* @_ZN3net12_GLOBAL__N_13Job16WaitingForThreadEv to i8*), i8* bitcast (void (%"class.net::(anonymous namespace)::Job"*)* @_ZN3net12_GLOBAL__N_13Job24FinishedWaitingForThreadEv to i8*), i8* bitcast (void (%"class.net::(anonymous namespace)::CreateResolverJob"*, %"class.base::SingleThreadTaskRunner"*)* @_ZN3net12_GLOBAL__N_117CreateResolverJob3RunE13scoped_refptrIN4base22SingleThreadTaskRunnerEE to i8*), i8* bitcast (void (%"class.net::(anonymous namespace)::CreateResolverJob"*)* @_ZN3net12_GLOBAL__N_117CreateResolverJobD2Ev to i8*), i8* bitcast (void (%"class.net::(anonymous namespace)::CreateResolverJob"*)* @_ZN3net12_GLOBAL__N_117CreateResolverJobD0Ev to i8*)] }, align 8
@.str.5 = private unnamed_addr constant [4 x i8] c"Run\00", align 1
@_ZTVN3net12_GLOBAL__N_126MultiThreadedProxyResolverE = internal unnamed_addr constant { [6 x i8*], [5 x i8*] } { [6 x i8*] [i8* null, i8* null, i8* bitcast (void (%"class.net::(anonymous namespace)::MultiThreadedProxyResolver"*)* @_ZN3net12_GLOBAL__N_126MultiThreadedProxyResolverD2Ev to i8*), i8* bitcast (void (%"class.net::(anonymous namespace)::MultiThreadedProxyResolver"*)* @_ZN3net12_GLOBAL__N_126MultiThreadedProxyResolverD0Ev to i8*), i8* bitcast (i32 (%"class.net::(anonymous namespace)::MultiThreadedProxyResolver"*, %class.GURL*, %"class.net::NetworkIsolationKey"*, %"class.net::ProxyInfo"*, %"class.base::OnceCallback"*, %"class.std::__1::unique_ptr.138"*, %"class.net::NetLogWithSource"*)* @_ZN3net12_GLOBAL__N_126MultiThreadedProxyResolver14GetProxyForURLERK4GURLRKNS_19NetworkIsolationKeyEPNS_9ProxyInfoEN4base12OnceCallbackIFviEEEPNSt3__110unique_ptrINS_13ProxyResolver7RequestENSE_14default_deleteISH_EEEERKNS_16NetLogWithSourceE to i8*), i8* bitcast (void (%"class.net::(anonymous namespace)::MultiThreadedProxyResolver"*, %"class.net::(anonymous namespace)::Executor"*)* @_ZN3net12_GLOBAL__N_126MultiThreadedProxyResolver15OnExecutorReadyEPNS0_8ExecutorE to i8*)], [5 x i8*] [i8* inttoptr (i64 -8 to i8*), i8* null, i8* bitcast (void (%"class.net::(anonymous namespace)::MultiThreadedProxyResolver"*, %"class.net::(anonymous namespace)::Executor"*)* @_ZThn8_N3net12_GLOBAL__N_126MultiThreadedProxyResolver15OnExecutorReadyEPNS0_8ExecutorE to i8*), i8* bitcast (void (%"class.net::(anonymous namespace)::MultiThreadedProxyResolver"*)* @_ZThn8_N3net12_GLOBAL__N_126MultiThreadedProxyResolverD1Ev to i8*), i8* bitcast (void (%"class.net::(anonymous namespace)::MultiThreadedProxyResolver"*)* @_ZThn8_N3net12_GLOBAL__N_126MultiThreadedProxyResolverD0Ev to i8*)] }, align 8
@.str.7 = private unnamed_addr constant [13 x i8] c"begin <= end\00", align 1
@.str.8 = private unnamed_addr constant [38 x i8] c"../../base/containers/vector_buffer.h\00", align 1
@.str.9 = private unnamed_addr constant [15 x i8] c"i <= capacity_\00", align 1
@_ZTVN3net12_GLOBAL__N_126MultiThreadedProxyResolver17GetProxyForURLJobE = internal unnamed_addr constant { [7 x i8*] } { [7 x i8*] [i8* null, i8* null, i8* bitcast (void (%"class.net::(anonymous namespace)::MultiThreadedProxyResolver::GetProxyForURLJob"*)* @_ZN3net12_GLOBAL__N_126MultiThreadedProxyResolver17GetProxyForURLJob16WaitingForThreadEv to i8*), i8* bitcast (void (%"class.net::(anonymous namespace)::MultiThreadedProxyResolver::GetProxyForURLJob"*)* @_ZN3net12_GLOBAL__N_126MultiThreadedProxyResolver17GetProxyForURLJob24FinishedWaitingForThreadEv to i8*), i8* bitcast (void (%"class.net::(anonymous namespace)::MultiThreadedProxyResolver::GetProxyForURLJob"*, %"class.base::SingleThreadTaskRunner"*)* @_ZN3net12_GLOBAL__N_126MultiThreadedProxyResolver17GetProxyForURLJob3RunE13scoped_refptrIN4base22SingleThreadTaskRunnerEE to i8*), i8* bitcast (void (%"class.net::(anonymous namespace)::MultiThreadedProxyResolver::GetProxyForURLJob"*)* @_ZN3net12_GLOBAL__N_126MultiThreadedProxyResolver17GetProxyForURLJobD2Ev to i8*), i8* bitcast (void (%"class.net::(anonymous namespace)::MultiThreadedProxyResolver::GetProxyForURLJob"*)* @_ZN3net12_GLOBAL__N_126MultiThreadedProxyResolver17GetProxyForURLJobD0Ev to i8*)] }, align 8
@.str.10 = private unnamed_addr constant [14 x i8] c"thread_number\00", align 1
@_ZTVN3net12_GLOBAL__N_126MultiThreadedProxyResolver11RequestImplE = internal unnamed_addr constant { [5 x i8*] } { [5 x i8*] [i8* null, i8* null, i8* bitcast (void (%"class.net::(anonymous namespace)::MultiThreadedProxyResolver::RequestImpl"*)* @_ZN3net12_GLOBAL__N_126MultiThreadedProxyResolver11RequestImplD2Ev to i8*), i8* bitcast (void (%"class.net::(anonymous namespace)::MultiThreadedProxyResolver::RequestImpl"*)* @_ZN3net12_GLOBAL__N_126MultiThreadedProxyResolver11RequestImplD0Ev to i8*), i8* bitcast (i32 (%"class.net::(anonymous namespace)::MultiThreadedProxyResolver::RequestImpl"*)* @_ZN3net12_GLOBAL__N_126MultiThreadedProxyResolver11RequestImpl12GetLoadStateEv to i8*)] }, align 8
@.str.13 = private unnamed_addr constant [41 x i8] c"!RangesOverlap(from_begin, from_end, to)\00", align 1

@_ZN3net33MultiThreadedProxyResolverFactoryD1Ev = hidden unnamed_addr alias void (%"class.net::MultiThreadedProxyResolverFactory"*), void (%"class.net::MultiThreadedProxyResolverFactory"*)* @_ZN3net33MultiThreadedProxyResolverFactoryD2Ev

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN3net33MultiThreadedProxyResolverFactoryC2Emb(%"class.net::MultiThreadedProxyResolverFactory"*, i64, i1 zeroext) unnamed_addr #0 align 2 {
  %4 = bitcast %"class.net::MultiThreadedProxyResolverFactory"* %0 to %"class.net::ProxyResolverFactory"*
  tail call void @_ZN3net20ProxyResolverFactoryC2Eb(%"class.net::ProxyResolverFactory"* %4, i1 zeroext %2) #14
  %5 = getelementptr inbounds %"class.net::MultiThreadedProxyResolverFactory", %"class.net::MultiThreadedProxyResolverFactory"* %0, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [6 x i8*] }, { [6 x i8*] }* @_ZTVN3net33MultiThreadedProxyResolverFactoryE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %5, align 8
  %6 = getelementptr inbounds %"class.net::MultiThreadedProxyResolverFactory", %"class.net::MultiThreadedProxyResolverFactory"* %0, i64 0, i32 1
  store i64 %1, i64* %6, align 8
  %7 = getelementptr inbounds %"class.net::MultiThreadedProxyResolverFactory", %"class.net::MultiThreadedProxyResolverFactory"* %0, i64 0, i32 2, i32 0, i32 1, i32 0, i32 0, i32 0
  %8 = getelementptr inbounds %"class.net::MultiThreadedProxyResolverFactory", %"class.net::MultiThreadedProxyResolverFactory"* %0, i64 0, i32 2, i32 0, i32 1, i32 0, i32 0
  %9 = getelementptr inbounds %"class.net::MultiThreadedProxyResolverFactory", %"class.net::MultiThreadedProxyResolverFactory"* %0, i64 0, i32 2, i32 0, i32 0
  %10 = bitcast %"class.std::__1::__tree_node_base"** %7 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %10, i8 0, i64 16, i1 false) #14
  store %"class.std::__1::__tree_end_node"* %8, %"class.std::__1::__tree_end_node"** %9, align 8
  ret void
}

declare void @_ZN3net20ProxyResolverFactoryC2Eb(%"class.net::ProxyResolverFactory"*, i1 zeroext) unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN3net33MultiThreadedProxyResolverFactoryD2Ev(%"class.net::MultiThreadedProxyResolverFactory"*) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.net::MultiThreadedProxyResolverFactory", %"class.net::MultiThreadedProxyResolverFactory"* %0, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [6 x i8*] }, { [6 x i8*] }* @_ZTVN3net33MultiThreadedProxyResolverFactoryE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8
  %3 = getelementptr inbounds %"class.net::MultiThreadedProxyResolverFactory", %"class.net::MultiThreadedProxyResolverFactory"* %0, i64 0, i32 2
  %4 = getelementptr inbounds %"class.std::__1::set", %"class.std::__1::set"* %3, i64 0, i32 0, i32 0
  %5 = load %"class.std::__1::__tree_end_node"*, %"class.std::__1::__tree_end_node"** %4, align 8
  %6 = getelementptr inbounds %"class.net::MultiThreadedProxyResolverFactory", %"class.net::MultiThreadedProxyResolverFactory"* %0, i64 0, i32 2, i32 0, i32 1, i32 0, i32 0
  %7 = icmp eq %"class.std::__1::__tree_end_node"* %5, %6
  br i1 %7, label %8, label %13

8:                                                ; preds = %97, %1
  %9 = getelementptr inbounds %"class.std::__1::set", %"class.std::__1::set"* %3, i64 0, i32 0
  %10 = bitcast %"class.std::__1::__tree_end_node"* %6 to %"class.std::__1::__tree_node"**
  %11 = load %"class.std::__1::__tree_node"*, %"class.std::__1::__tree_node"** %10, align 8
  tail call void @_ZNSt3__16__treeIPN3net33MultiThreadedProxyResolverFactory3JobENS_4lessIS4_EENS_9allocatorIS4_EEE7destroyEPNS_11__tree_nodeIS4_PvEE(%"class.std::__1::__tree"* %9, %"class.std::__1::__tree_node"* %11) #14
  %12 = bitcast %"class.net::MultiThreadedProxyResolverFactory"* %0 to %"class.net::ProxyResolverFactory"*
  tail call void @_ZN3net20ProxyResolverFactoryD2Ev(%"class.net::ProxyResolverFactory"* %12) #14
  ret void

13:                                               ; preds = %1, %97
  %14 = phi %"class.std::__1::__tree_end_node"* [ %98, %97 ], [ %5, %1 ]
  %15 = getelementptr inbounds %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_end_node"* %14, i64 4
  %16 = bitcast %"class.std::__1::__tree_end_node"* %15 to %"class.net::MultiThreadedProxyResolverFactory::Job"**
  %17 = load %"class.net::MultiThreadedProxyResolverFactory::Job"*, %"class.net::MultiThreadedProxyResolverFactory::Job"** %16, align 8
  %18 = getelementptr inbounds %"class.net::MultiThreadedProxyResolverFactory::Job", %"class.net::MultiThreadedProxyResolverFactory::Job"* %17, i64 0, i32 7
  %19 = getelementptr inbounds %class.scoped_refptr.34, %class.scoped_refptr.34* %18, i64 0, i32 0
  %20 = load %"class.net::(anonymous namespace)::Executor"*, %"class.net::(anonymous namespace)::Executor"** %19, align 8
  tail call fastcc void @_ZN3net12_GLOBAL__N_18Executor7DestroyEv(%"class.net::(anonymous namespace)::Executor"* %20) #14
  %21 = bitcast %class.scoped_refptr.34* %18 to i64*
  %22 = load %"class.net::(anonymous namespace)::Executor"*, %"class.net::(anonymous namespace)::Executor"** %19, align 8
  store i64 0, i64* %21, align 8
  %23 = icmp eq %"class.net::(anonymous namespace)::Executor"* %22, null
  br i1 %23, label %68, label %24

24:                                               ; preds = %13
  %25 = getelementptr inbounds %"class.net::(anonymous namespace)::Executor", %"class.net::(anonymous namespace)::Executor"* %22, i64 0, i32 0
  %26 = getelementptr inbounds %"class.net::(anonymous namespace)::Executor", %"class.net::(anonymous namespace)::Executor"* %22, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %27 = atomicrmw sub i32* %26, i32 1 acq_rel
  %28 = icmp eq i32 %27, 1
  br i1 %28, label %29, label %68

29:                                               ; preds = %24
  %30 = getelementptr inbounds %"class.base::RefCountedThreadSafe.35", %"class.base::RefCountedThreadSafe.35"* %25, i64 10
  %31 = bitcast %"class.base::RefCountedThreadSafe.35"* %30 to %"class.base::Thread"**
  %32 = load %"class.base::Thread"*, %"class.base::Thread"** %31, align 8
  store %"class.base::Thread"* null, %"class.base::Thread"** %31, align 8
  %33 = icmp eq %"class.base::Thread"* %32, null
  br i1 %33, label %39, label %34

34:                                               ; preds = %29
  %35 = bitcast %"class.base::Thread"* %32 to void (%"class.base::Thread"*)***
  %36 = load void (%"class.base::Thread"*)**, void (%"class.base::Thread"*)*** %35, align 8
  %37 = getelementptr inbounds void (%"class.base::Thread"*)*, void (%"class.base::Thread"*)** %36, i64 3
  %38 = load void (%"class.base::Thread"*)*, void (%"class.base::Thread"*)** %37, align 8
  tail call void %38(%"class.base::Thread"* nonnull %32) #14
  br label %39

39:                                               ; preds = %34, %29
  %40 = getelementptr inbounds %"class.base::RefCountedThreadSafe.35", %"class.base::RefCountedThreadSafe.35"* %25, i64 8
  %41 = bitcast %"class.base::RefCountedThreadSafe.35"* %40 to %"class.net::ProxyResolver"**
  %42 = load %"class.net::ProxyResolver"*, %"class.net::ProxyResolver"** %41, align 8
  store %"class.net::ProxyResolver"* null, %"class.net::ProxyResolver"** %41, align 8
  %43 = icmp eq %"class.net::ProxyResolver"* %42, null
  br i1 %43, label %49, label %44

44:                                               ; preds = %39
  %45 = bitcast %"class.net::ProxyResolver"* %42 to void (%"class.net::ProxyResolver"*)***
  %46 = load void (%"class.net::ProxyResolver"*)**, void (%"class.net::ProxyResolver"*)*** %45, align 8
  %47 = getelementptr inbounds void (%"class.net::ProxyResolver"*)*, void (%"class.net::ProxyResolver"*)** %46, i64 1
  %48 = load void (%"class.net::ProxyResolver"*)*, void (%"class.net::ProxyResolver"*)** %47, align 8
  tail call void %48(%"class.net::ProxyResolver"* nonnull %42) #14
  br label %49

49:                                               ; preds = %44, %39
  %50 = getelementptr inbounds %"class.base::RefCountedThreadSafe.35", %"class.base::RefCountedThreadSafe.35"* %25, i64 6
  %51 = bitcast %"class.base::RefCountedThreadSafe.35"* %50 to %"class.net::(anonymous namespace)::Job"**
  %52 = load %"class.net::(anonymous namespace)::Job"*, %"class.net::(anonymous namespace)::Job"** %51, align 8
  %53 = icmp eq %"class.net::(anonymous namespace)::Job"* %52, null
  br i1 %53, label %66, label %54

54:                                               ; preds = %49
  %55 = getelementptr inbounds %"class.net::(anonymous namespace)::Job", %"class.net::(anonymous namespace)::Job"* %52, i64 0, i32 1
  %56 = getelementptr inbounds %"class.base::RefCountedThreadSafe.37", %"class.base::RefCountedThreadSafe.37"* %55, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %57 = atomicrmw sub i32* %56, i32 1 acq_rel
  %58 = icmp eq i32 %57, 1
  br i1 %58, label %59, label %66

59:                                               ; preds = %54
  %60 = getelementptr inbounds %"class.base::RefCountedThreadSafe.37", %"class.base::RefCountedThreadSafe.37"* %55, i64 -2
  %61 = bitcast %"class.base::RefCountedThreadSafe.37"* %60 to %"class.net::(anonymous namespace)::Job"*
  %62 = bitcast %"class.base::RefCountedThreadSafe.37"* %60 to void (%"class.net::(anonymous namespace)::Job"*)***
  %63 = load void (%"class.net::(anonymous namespace)::Job"*)**, void (%"class.net::(anonymous namespace)::Job"*)*** %62, align 8
  %64 = getelementptr inbounds void (%"class.net::(anonymous namespace)::Job"*)*, void (%"class.net::(anonymous namespace)::Job"*)** %63, i64 4
  %65 = load void (%"class.net::(anonymous namespace)::Job"*)*, void (%"class.net::(anonymous namespace)::Job"*)** %64, align 8
  tail call void %65(%"class.net::(anonymous namespace)::Job"* nonnull %61) #14
  br label %66

66:                                               ; preds = %59, %54, %49
  %67 = bitcast %"class.net::(anonymous namespace)::Executor"* %22 to i8*
  tail call void @_ZdlPv(i8* %67) #15
  br label %68

68:                                               ; preds = %13, %24, %66
  %69 = getelementptr inbounds %"class.net::MultiThreadedProxyResolverFactory::Job", %"class.net::MultiThreadedProxyResolverFactory::Job"* %17, i64 0, i32 2
  store %"class.net::MultiThreadedProxyResolverFactory"* null, %"class.net::MultiThreadedProxyResolverFactory"** %69, align 8
  %70 = getelementptr inbounds %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_end_node"* %14, i64 1, i32 0
  %71 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %70, align 8
  %72 = icmp eq %"class.std::__1::__tree_node_base"* %71, null
  br i1 %72, label %73, label %81

73:                                               ; preds = %68
  %74 = bitcast %"class.std::__1::__tree_end_node"* %14 to %"class.std::__1::__tree_node_base"*
  %75 = getelementptr inbounds %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_end_node"* %14, i64 2
  %76 = bitcast %"class.std::__1::__tree_end_node"* %75 to %"class.std::__1::__tree_end_node"**
  %77 = load %"class.std::__1::__tree_end_node"*, %"class.std::__1::__tree_end_node"** %76, align 8
  %78 = getelementptr inbounds %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_end_node"* %77, i64 0, i32 0
  %79 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %78, align 8
  %80 = icmp eq %"class.std::__1::__tree_node_base"* %79, %74
  br i1 %80, label %97, label %88

81:                                               ; preds = %68, %81
  %82 = phi %"class.std::__1::__tree_node_base"* [ %84, %81 ], [ %71, %68 ]
  %83 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %82, i64 0, i32 0, i32 0
  %84 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %83, align 8
  %85 = icmp eq %"class.std::__1::__tree_node_base"* %84, null
  br i1 %85, label %86, label %81

86:                                               ; preds = %81
  %87 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %82, i64 0, i32 0
  br label %97

88:                                               ; preds = %73, %88
  %89 = phi %"class.std::__1::__tree_end_node"** [ %92, %88 ], [ %76, %73 ]
  %90 = bitcast %"class.std::__1::__tree_end_node"** %89 to %"class.std::__1::__tree_node_base"**
  %91 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %90, align 8
  %92 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %91, i64 0, i32 2
  %93 = load %"class.std::__1::__tree_end_node"*, %"class.std::__1::__tree_end_node"** %92, align 8
  %94 = getelementptr inbounds %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_end_node"* %93, i64 0, i32 0
  %95 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %94, align 8
  %96 = icmp eq %"class.std::__1::__tree_node_base"* %95, %91
  br i1 %96, label %97, label %88

97:                                               ; preds = %88, %73, %86
  %98 = phi %"class.std::__1::__tree_end_node"* [ %87, %86 ], [ %77, %73 ], [ %93, %88 ]
  %99 = icmp eq %"class.std::__1::__tree_end_node"* %98, %6
  br i1 %99, label %8, label %13
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nounwind
declare void @_ZN3net20ProxyResolverFactoryD2Ev(%"class.net::ProxyResolverFactory"*) unnamed_addr #3

; Function Attrs: noreturn nounwind ssp uwtable
define hidden void @_ZN3net33MultiThreadedProxyResolverFactoryD0Ev(%"class.net::MultiThreadedProxyResolverFactory"* nocapture readnone) unnamed_addr #4 align 2 {
  tail call void @llvm.trap() #16
  unreachable
}

; Function Attrs: cold noreturn nounwind
declare void @llvm.trap() #5

; Function Attrs: nounwind ssp uwtable
define hidden i32 @_ZN3net33MultiThreadedProxyResolverFactory19CreateProxyResolverERK13scoped_refptrINS_11PacFileDataEEPNSt3__110unique_ptrINS_13ProxyResolverENS6_14default_deleteIS8_EEEEN4base12OnceCallbackIFviEEEPNS7_INS_20ProxyResolverFactory7RequestENS9_ISI_EEEE(%"class.net::MultiThreadedProxyResolverFactory"*, %class.scoped_refptr* dereferenceable(8), %"class.std::__1::unique_ptr"*, %"class.base::OnceCallback"* nocapture, %"class.std::__1::unique_ptr.79"* nocapture) unnamed_addr #0 align 2 {
  %6 = alloca %"class.base::OnceCallback", align 8
  %7 = tail call i8* @_Znwm(i64 72) #15
  %8 = bitcast i8* %7 to %"class.net::MultiThreadedProxyResolverFactory::Job"*
  %9 = bitcast %"class.net::MultiThreadedProxyResolverFactory"* %0 to %"class.net::ProxyResolverFactory"* (%"class.net::MultiThreadedProxyResolverFactory"*)***
  %10 = load %"class.net::ProxyResolverFactory"* (%"class.net::MultiThreadedProxyResolverFactory"*)**, %"class.net::ProxyResolverFactory"* (%"class.net::MultiThreadedProxyResolverFactory"*)*** %9, align 8
  %11 = getelementptr inbounds %"class.net::ProxyResolverFactory"* (%"class.net::MultiThreadedProxyResolverFactory"*)*, %"class.net::ProxyResolverFactory"* (%"class.net::MultiThreadedProxyResolverFactory"*)** %10, i64 3
  %12 = load %"class.net::ProxyResolverFactory"* (%"class.net::MultiThreadedProxyResolverFactory"*)*, %"class.net::ProxyResolverFactory"* (%"class.net::MultiThreadedProxyResolverFactory"*)** %11, align 8
  %13 = tail call %"class.net::ProxyResolverFactory"* %12(%"class.net::MultiThreadedProxyResolverFactory"* %0) #14
  %14 = getelementptr inbounds %"class.net::MultiThreadedProxyResolverFactory", %"class.net::MultiThreadedProxyResolverFactory"* %0, i64 0, i32 1
  %15 = load i64, i64* %14, align 8
  %16 = getelementptr inbounds %"class.base::OnceCallback", %"class.base::OnceCallback"* %3, i64 0, i32 0, i32 0, i32 0
  %17 = bitcast %"class.base::OnceCallback"* %3 to i64*
  %18 = load i64, i64* %17, align 8
  %19 = bitcast %"class.base::OnceCallback"* %6 to i64*
  store i64 %18, i64* %19, align 8
  store %"class.base::internal::BindStateBase"* null, %"class.base::internal::BindStateBase"** %16, align 8
  call void @_ZN3net33MultiThreadedProxyResolverFactory3JobC2EPS0_RK13scoped_refptrINS_11PacFileDataEEPNSt3__110unique_ptrINS_13ProxyResolverENS8_14default_deleteISA_EEEENS9_INS_20ProxyResolverFactoryENSB_ISF_EEEEmN4base12OnceCallbackIFviEEE(%"class.net::MultiThreadedProxyResolverFactory::Job"* nonnull %8, %"class.net::MultiThreadedProxyResolverFactory"* %0, %class.scoped_refptr* dereferenceable(8) %1, %"class.std::__1::unique_ptr"* %2, %"class.net::ProxyResolverFactory"* %13, i64 %15, %"class.base::OnceCallback"* nonnull %6)
  %20 = ptrtoint i8* %7 to i64
  %21 = getelementptr inbounds %"class.base::OnceCallback", %"class.base::OnceCallback"* %6, i64 0, i32 0
  call void @_ZN4base8internal12CallbackBaseD2Ev(%"class.base::internal::CallbackBase"* nonnull %21) #14
  %22 = getelementptr inbounds %"class.net::MultiThreadedProxyResolverFactory", %"class.net::MultiThreadedProxyResolverFactory"* %0, i64 0, i32 2
  %23 = getelementptr inbounds %"class.net::MultiThreadedProxyResolverFactory", %"class.net::MultiThreadedProxyResolverFactory"* %0, i64 0, i32 2, i32 0, i32 1, i32 0, i32 0
  %24 = bitcast %"class.std::__1::__tree_end_node"* %23 to %"class.std::__1::__tree_node"**
  %25 = load %"class.std::__1::__tree_node"*, %"class.std::__1::__tree_node"** %24, align 8
  %26 = icmp eq %"class.std::__1::__tree_node"* %25, null
  br i1 %26, label %55, label %27

27:                                               ; preds = %5
  %28 = getelementptr inbounds %"class.net::MultiThreadedProxyResolverFactory", %"class.net::MultiThreadedProxyResolverFactory"* %0, i64 0, i32 2, i32 0, i32 1, i32 0, i32 0, i32 0
  br label %29

29:                                               ; preds = %51, %27
  %30 = phi %"class.std::__1::__tree_node"* [ %54, %51 ], [ %25, %27 ]
  %31 = phi %"class.std::__1::__tree_node_base"** [ %53, %51 ], [ %28, %27 ]
  %32 = getelementptr inbounds %"class.std::__1::__tree_node", %"class.std::__1::__tree_node"* %30, i64 0, i32 1
  %33 = load %"class.net::MultiThreadedProxyResolverFactory::Job"*, %"class.net::MultiThreadedProxyResolverFactory::Job"** %32, align 8
  %34 = icmp ugt %"class.net::MultiThreadedProxyResolverFactory::Job"* %33, %8
  br i1 %34, label %35, label %41

35:                                               ; preds = %29
  %36 = getelementptr inbounds %"class.std::__1::__tree_node", %"class.std::__1::__tree_node"* %30, i64 0, i32 0, i32 0, i32 0
  %37 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %36, align 8
  %38 = icmp eq %"class.std::__1::__tree_node_base"* %37, null
  br i1 %38, label %39, label %51

39:                                               ; preds = %35
  %40 = getelementptr inbounds %"class.std::__1::__tree_node", %"class.std::__1::__tree_node"* %30, i64 0, i32 0, i32 0
  br label %57

41:                                               ; preds = %29
  %42 = icmp ult %"class.net::MultiThreadedProxyResolverFactory::Job"* %33, %8
  br i1 %42, label %43, label %49

43:                                               ; preds = %41
  %44 = getelementptr inbounds %"class.std::__1::__tree_node", %"class.std::__1::__tree_node"* %30, i64 0, i32 0, i32 1
  %45 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %44, align 8
  %46 = icmp eq %"class.std::__1::__tree_node_base"* %45, null
  br i1 %46, label %47, label %51

47:                                               ; preds = %43
  %48 = getelementptr inbounds %"class.std::__1::__tree_node", %"class.std::__1::__tree_node"* %30, i64 0, i32 0, i32 0
  br label %57

49:                                               ; preds = %41
  %50 = getelementptr inbounds %"class.std::__1::__tree_node", %"class.std::__1::__tree_node"* %30, i64 0, i32 0, i32 0
  br label %57

51:                                               ; preds = %43, %35
  %52 = phi %"class.std::__1::__tree_node_base"* [ %37, %35 ], [ %45, %43 ]
  %53 = phi %"class.std::__1::__tree_node_base"** [ %36, %35 ], [ %44, %43 ]
  %54 = bitcast %"class.std::__1::__tree_node_base"* %52 to %"class.std::__1::__tree_node"*
  br label %29

55:                                               ; preds = %5
  %56 = getelementptr inbounds %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_end_node"* %23, i64 0, i32 0
  br label %57

57:                                               ; preds = %55, %49, %47, %39
  %58 = phi %"class.std::__1::__tree_end_node"* [ %23, %55 ], [ %40, %39 ], [ %48, %47 ], [ %50, %49 ]
  %59 = phi %"class.std::__1::__tree_node_base"** [ %56, %55 ], [ %36, %39 ], [ %44, %47 ], [ %31, %49 ]
  %60 = bitcast %"class.std::__1::__tree_node_base"** %59 to %"class.std::__1::__tree_node"**
  %61 = load %"class.std::__1::__tree_node"*, %"class.std::__1::__tree_node"** %60, align 8
  %62 = icmp eq %"class.std::__1::__tree_node"* %61, null
  br i1 %62, label %63, label %87

63:                                               ; preds = %57
  %64 = call i8* @_Znwm(i64 40) #15, !noalias !2
  %65 = getelementptr inbounds i8, i8* %64, i64 32
  %66 = bitcast i8* %65 to i64*
  store i64 %20, i64* %66, align 8, !noalias !2
  %67 = bitcast i8* %64 to %"class.std::__1::__tree_node_base"*
  %68 = getelementptr inbounds i8, i8* %64, i64 16
  %69 = bitcast i8* %68 to %"class.std::__1::__tree_end_node"**
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %64, i8 0, i64 16, i1 false) #14
  store %"class.std::__1::__tree_end_node"* %58, %"class.std::__1::__tree_end_node"** %69, align 8
  %70 = bitcast %"class.std::__1::__tree_node_base"** %59 to i8**
  store i8* %64, i8** %70, align 8
  %71 = getelementptr inbounds %"class.std::__1::set", %"class.std::__1::set"* %22, i64 0, i32 0, i32 0
  %72 = load %"class.std::__1::__tree_end_node"*, %"class.std::__1::__tree_end_node"** %71, align 8
  %73 = getelementptr inbounds %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_end_node"* %72, i64 0, i32 0
  %74 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %73, align 8
  %75 = icmp eq %"class.std::__1::__tree_node_base"* %74, null
  br i1 %75, label %80, label %76

76:                                               ; preds = %63
  %77 = ptrtoint %"class.std::__1::__tree_node_base"* %74 to i64
  %78 = bitcast %"class.std::__1::set"* %22 to i64*
  store i64 %77, i64* %78, align 8
  %79 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %59, align 8
  br label %80

80:                                               ; preds = %76, %63
  %81 = phi %"class.std::__1::__tree_node_base"* [ %67, %63 ], [ %79, %76 ]
  %82 = getelementptr inbounds %"class.net::MultiThreadedProxyResolverFactory", %"class.net::MultiThreadedProxyResolverFactory"* %0, i64 0, i32 2, i32 0, i32 1, i32 0, i32 0, i32 0
  %83 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %82, align 8
  call void @_ZNSt3__127__tree_balance_after_insertIPNS_16__tree_node_baseIPvEEEEvT_S5_(%"class.std::__1::__tree_node_base"* %83, %"class.std::__1::__tree_node_base"* %81) #14
  %84 = getelementptr inbounds %"class.net::MultiThreadedProxyResolverFactory", %"class.net::MultiThreadedProxyResolverFactory"* %0, i64 0, i32 2, i32 0, i32 2, i32 0, i32 0
  %85 = load i64, i64* %84, align 8
  %86 = add i64 %85, 1
  store i64 %86, i64* %84, align 8
  br label %87

87:                                               ; preds = %57, %80
  %88 = getelementptr inbounds %"class.std::__1::unique_ptr.79", %"class.std::__1::unique_ptr.79"* %4, i64 0, i32 0, i32 0, i32 0
  %89 = load %"class.net::ProxyResolverFactory::Request"*, %"class.net::ProxyResolverFactory::Request"** %88, align 8
  %90 = bitcast %"class.std::__1::unique_ptr.79"* %4 to i8**
  store i8* %7, i8** %90, align 8
  %91 = icmp eq %"class.net::ProxyResolverFactory::Request"* %89, null
  br i1 %91, label %97, label %92

92:                                               ; preds = %87
  %93 = bitcast %"class.net::ProxyResolverFactory::Request"* %89 to void (%"class.net::ProxyResolverFactory::Request"*)***
  %94 = load void (%"class.net::ProxyResolverFactory::Request"*)**, void (%"class.net::ProxyResolverFactory::Request"*)*** %93, align 8
  %95 = getelementptr inbounds void (%"class.net::ProxyResolverFactory::Request"*)*, void (%"class.net::ProxyResolverFactory::Request"*)** %94, i64 1
  %96 = load void (%"class.net::ProxyResolverFactory::Request"*)*, void (%"class.net::ProxyResolverFactory::Request"*)** %95, align 8
  call void %96(%"class.net::ProxyResolverFactory::Request"* nonnull %89) #14
  br label %97

97:                                               ; preds = %92, %87
  ret i32 -1
}

; Function Attrs: nobuiltin nofree
declare noalias nonnull i8* @_Znwm(i64) local_unnamed_addr #6

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN3net33MultiThreadedProxyResolverFactory3JobC2EPS0_RK13scoped_refptrINS_11PacFileDataEEPNSt3__110unique_ptrINS_13ProxyResolverENS8_14default_deleteISA_EEEENS9_INS_20ProxyResolverFactoryENSB_ISF_EEEEmN4base12OnceCallbackIFviEEE(%"class.net::MultiThreadedProxyResolverFactory::Job"*, %"class.net::MultiThreadedProxyResolverFactory"*, %class.scoped_refptr* dereferenceable(8), %"class.std::__1::unique_ptr"*, %"class.net::ProxyResolverFactory"*, i64, %"class.base::OnceCallback"*) unnamed_addr #0 comdat align 2 {
  %8 = ptrtoint %"class.net::ProxyResolverFactory"* %4 to i64
  %9 = getelementptr inbounds %"class.net::MultiThreadedProxyResolverFactory::Job", %"class.net::MultiThreadedProxyResolverFactory::Job"* %0, i64 0, i32 1
  %10 = bitcast %"class.net::MultiThreadedProxyResolverFactory::Job"* %0 to <2 x i32 (...)**>*
  store <2 x i32 (...)**> <i32 (...)** bitcast (i8** getelementptr inbounds ({ [5 x i8*], [5 x i8*] }, { [5 x i8*], [5 x i8*] }* @_ZTVN3net33MultiThreadedProxyResolverFactory3JobE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)** bitcast (i8** getelementptr inbounds ({ [5 x i8*], [5 x i8*] }, { [5 x i8*], [5 x i8*] }* @_ZTVN3net33MultiThreadedProxyResolverFactory3JobE, i64 0, inrange i32 1, i64 2) to i32 (...)**)>, <2 x i32 (...)**>* %10, align 8
  %11 = getelementptr inbounds %"class.net::MultiThreadedProxyResolverFactory::Job", %"class.net::MultiThreadedProxyResolverFactory::Job"* %0, i64 0, i32 2
  store %"class.net::MultiThreadedProxyResolverFactory"* %1, %"class.net::MultiThreadedProxyResolverFactory"** %11, align 8
  %12 = getelementptr inbounds %"class.net::MultiThreadedProxyResolverFactory::Job", %"class.net::MultiThreadedProxyResolverFactory::Job"* %0, i64 0, i32 3
  store %"class.std::__1::unique_ptr"* %3, %"class.std::__1::unique_ptr"** %12, align 8
  %13 = getelementptr inbounds %"class.net::MultiThreadedProxyResolverFactory::Job", %"class.net::MultiThreadedProxyResolverFactory::Job"* %0, i64 0, i32 4
  %14 = bitcast %"class.std::__1::unique_ptr.7"* %13 to i64*
  store i64 %8, i64* %14, align 8
  %15 = getelementptr inbounds %"class.net::MultiThreadedProxyResolverFactory::Job", %"class.net::MultiThreadedProxyResolverFactory::Job"* %0, i64 0, i32 5
  store i64 %5, i64* %15, align 8
  %16 = getelementptr inbounds %class.scoped_refptr, %class.scoped_refptr* %2, i64 0, i32 0
  %17 = load %"class.net::PacFileData"*, %"class.net::PacFileData"** %16, align 8
  %18 = getelementptr inbounds %"class.net::MultiThreadedProxyResolverFactory::Job", %"class.net::MultiThreadedProxyResolverFactory::Job"* %0, i64 0, i32 6, i32 0
  store %"class.net::PacFileData"* %17, %"class.net::PacFileData"** %18, align 8
  %19 = icmp eq %"class.net::PacFileData"* %17, null
  br i1 %19, label %23, label %20

20:                                               ; preds = %7
  %21 = getelementptr inbounds %"class.net::PacFileData", %"class.net::PacFileData"* %17, i64 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %22 = atomicrmw add i32* %21, i32 1 monotonic
  br label %23

23:                                               ; preds = %7, %20
  %24 = tail call i8* @_Znwm(i64 48) #15
  %25 = bitcast i8* %24 to %"class.net::(anonymous namespace)::Executor"*
  tail call fastcc void @_ZN3net12_GLOBAL__N_18ExecutorC2EPNS1_11CoordinatorEi(%"class.net::(anonymous namespace)::Executor"* nonnull %25, %"class.net::(anonymous namespace)::Executor::Coordinator"* %9, i32 0)
  %26 = getelementptr inbounds %"class.net::MultiThreadedProxyResolverFactory::Job", %"class.net::MultiThreadedProxyResolverFactory::Job"* %0, i64 0, i32 7, i32 0
  %27 = bitcast %"class.net::(anonymous namespace)::Executor"** %26 to i8**
  store i8* %24, i8** %27, align 8
  %28 = bitcast i8* %24 to i32*
  %29 = atomicrmw add i32* %28, i32 1 monotonic
  %30 = getelementptr inbounds %"class.net::MultiThreadedProxyResolverFactory::Job", %"class.net::MultiThreadedProxyResolverFactory::Job"* %0, i64 0, i32 8
  %31 = getelementptr inbounds %"class.base::OnceCallback", %"class.base::OnceCallback"* %6, i64 0, i32 0, i32 0, i32 0
  %32 = bitcast %"class.base::OnceCallback"* %6 to i64*
  %33 = load i64, i64* %32, align 8
  %34 = bitcast %"class.base::OnceCallback"* %30 to i64*
  store i64 %33, i64* %34, align 8
  store %"class.base::internal::BindStateBase"* null, %"class.base::internal::BindStateBase"** %31, align 8
  %35 = load %"class.net::(anonymous namespace)::Executor"*, %"class.net::(anonymous namespace)::Executor"** %26, align 8
  %36 = tail call i8* @_Znwm(i64 56) #15
  %37 = load i64, i64* %14, align 8
  %38 = getelementptr inbounds i8, i8* %36, i64 8
  %39 = bitcast i8* %38 to i32*
  store i32 0, i32* %39, align 4
  %40 = bitcast i8* %36 to i32 (...)***
  %41 = getelementptr inbounds i8, i8* %36, i64 16
  %42 = bitcast i8* %41 to %"class.net::(anonymous namespace)::Executor"**
  store %"class.net::(anonymous namespace)::Executor"* null, %"class.net::(anonymous namespace)::Executor"** %42, align 8
  %43 = getelementptr inbounds i8, i8* %36, i64 24
  store i8 0, i8* %43, align 8
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [7 x i8*] }, { [7 x i8*] }* @_ZTVN3net12_GLOBAL__N_117CreateResolverJobE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %40, align 8
  %44 = load %"class.net::PacFileData"*, %"class.net::PacFileData"** %18, align 8
  %45 = getelementptr inbounds i8, i8* %36, i64 32
  %46 = bitcast i8* %45 to %"class.net::PacFileData"**
  store %"class.net::PacFileData"* %44, %"class.net::PacFileData"** %46, align 8
  %47 = icmp eq %"class.net::PacFileData"* %44, null
  br i1 %47, label %51, label %48

48:                                               ; preds = %23
  %49 = getelementptr inbounds %"class.net::PacFileData", %"class.net::PacFileData"* %44, i64 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %50 = atomicrmw add i32* %49, i32 1 monotonic
  br label %51

51:                                               ; preds = %48, %23
  %52 = getelementptr inbounds i8, i8* %36, i64 40
  %53 = bitcast i8* %52 to i64*
  store i64 %37, i64* %53, align 8
  %54 = getelementptr inbounds i8, i8* %36, i64 48
  %55 = bitcast i8* %54 to i64*
  store i64 0, i64* %55, align 8
  %56 = bitcast i8* %36 to %"class.net::(anonymous namespace)::Job"*
  tail call fastcc void @_ZN3net12_GLOBAL__N_18Executor8StartJobEPNS0_3JobE(%"class.net::(anonymous namespace)::Executor"* %35, %"class.net::(anonymous namespace)::Job"* nonnull %56)
  ret void
}

; Function Attrs: nounwind
declare void @_ZN4base8internal12CallbackBaseD2Ev(%"class.base::internal::CallbackBase"*) unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN3net33MultiThreadedProxyResolverFactory9RemoveJobEPNS0_3JobE(%"class.net::MultiThreadedProxyResolverFactory"*, %"class.net::MultiThreadedProxyResolverFactory::Job"*) local_unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.net::MultiThreadedProxyResolverFactory", %"class.net::MultiThreadedProxyResolverFactory"* %0, i64 0, i32 2, i32 0
  %4 = getelementptr inbounds %"class.net::MultiThreadedProxyResolverFactory", %"class.net::MultiThreadedProxyResolverFactory"* %0, i64 0, i32 2, i32 0, i32 1, i32 0, i32 0
  %5 = bitcast %"class.std::__1::__tree_end_node"* %4 to %"class.std::__1::__tree_node"**
  %6 = load %"class.std::__1::__tree_node"*, %"class.std::__1::__tree_node"** %5, align 8
  %7 = icmp eq %"class.std::__1::__tree_node"* %6, null
  %8 = bitcast %"class.std::__1::__tree_node"* %6 to %"class.std::__1::__tree_node_base"*
  br i1 %7, label %72, label %9

9:                                                ; preds = %2, %9
  %10 = phi %"class.std::__1::__tree_end_node"* [ %20, %9 ], [ %4, %2 ]
  %11 = phi %"class.std::__1::__tree_node"* [ %21, %9 ], [ %6, %2 ]
  %12 = getelementptr inbounds %"class.std::__1::__tree_node", %"class.std::__1::__tree_node"* %11, i64 0, i32 1
  %13 = load %"class.net::MultiThreadedProxyResolverFactory::Job"*, %"class.net::MultiThreadedProxyResolverFactory::Job"** %12, align 8
  %14 = icmp ult %"class.net::MultiThreadedProxyResolverFactory::Job"* %13, %1
  %15 = getelementptr inbounds %"class.std::__1::__tree_node", %"class.std::__1::__tree_node"* %11, i64 0, i32 0, i32 1
  %16 = bitcast %"class.std::__1::__tree_node_base"** %15 to %"class.std::__1::__tree_node"**
  %17 = getelementptr inbounds %"class.std::__1::__tree_node", %"class.std::__1::__tree_node"* %11, i64 0, i32 0, i32 0
  %18 = bitcast %"class.std::__1::__tree_node"* %11 to %"class.std::__1::__tree_node"**
  %19 = select i1 %14, %"class.std::__1::__tree_node"** %16, %"class.std::__1::__tree_node"** %18
  %20 = select i1 %14, %"class.std::__1::__tree_end_node"* %10, %"class.std::__1::__tree_end_node"* %17
  %21 = load %"class.std::__1::__tree_node"*, %"class.std::__1::__tree_node"** %19, align 8
  %22 = icmp eq %"class.std::__1::__tree_node"* %21, null
  br i1 %22, label %23, label %9

23:                                               ; preds = %9
  %24 = icmp eq %"class.std::__1::__tree_end_node"* %20, %4
  br i1 %24, label %72, label %25

25:                                               ; preds = %23
  %26 = getelementptr inbounds %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_end_node"* %20, i64 4
  %27 = bitcast %"class.std::__1::__tree_end_node"* %26 to %"class.net::MultiThreadedProxyResolverFactory::Job"**
  %28 = load %"class.net::MultiThreadedProxyResolverFactory::Job"*, %"class.net::MultiThreadedProxyResolverFactory::Job"** %27, align 8
  %29 = icmp ugt %"class.net::MultiThreadedProxyResolverFactory::Job"* %28, %1
  br i1 %29, label %72, label %30

30:                                               ; preds = %25
  %31 = getelementptr inbounds %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_end_node"* %20, i64 1, i32 0
  %32 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %31, align 8
  %33 = icmp eq %"class.std::__1::__tree_node_base"* %32, null
  br i1 %33, label %34, label %42

34:                                               ; preds = %30
  %35 = bitcast %"class.std::__1::__tree_end_node"* %20 to %"class.std::__1::__tree_node_base"*
  %36 = getelementptr inbounds %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_end_node"* %20, i64 2
  %37 = bitcast %"class.std::__1::__tree_end_node"* %36 to %"class.std::__1::__tree_end_node"**
  %38 = load %"class.std::__1::__tree_end_node"*, %"class.std::__1::__tree_end_node"** %37, align 8
  %39 = getelementptr inbounds %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_end_node"* %38, i64 0, i32 0
  %40 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %39, align 8
  %41 = icmp eq %"class.std::__1::__tree_node_base"* %40, %35
  br i1 %41, label %58, label %49

42:                                               ; preds = %30, %42
  %43 = phi %"class.std::__1::__tree_node_base"* [ %45, %42 ], [ %32, %30 ]
  %44 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %43, i64 0, i32 0, i32 0
  %45 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %44, align 8
  %46 = icmp eq %"class.std::__1::__tree_node_base"* %45, null
  br i1 %46, label %47, label %42

47:                                               ; preds = %42
  %48 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %43, i64 0, i32 0
  br label %58

49:                                               ; preds = %34, %49
  %50 = phi %"class.std::__1::__tree_end_node"** [ %53, %49 ], [ %37, %34 ]
  %51 = bitcast %"class.std::__1::__tree_end_node"** %50 to %"class.std::__1::__tree_node_base"**
  %52 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %51, align 8
  %53 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %52, i64 0, i32 2
  %54 = load %"class.std::__1::__tree_end_node"*, %"class.std::__1::__tree_end_node"** %53, align 8
  %55 = getelementptr inbounds %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_end_node"* %54, i64 0, i32 0
  %56 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %55, align 8
  %57 = icmp eq %"class.std::__1::__tree_node_base"* %56, %52
  br i1 %57, label %58, label %49

58:                                               ; preds = %49, %47, %34
  %59 = phi %"class.std::__1::__tree_end_node"* [ %48, %47 ], [ %38, %34 ], [ %54, %49 ]
  %60 = getelementptr inbounds %"class.std::__1::__tree", %"class.std::__1::__tree"* %3, i64 0, i32 0
  %61 = load %"class.std::__1::__tree_end_node"*, %"class.std::__1::__tree_end_node"** %60, align 8
  %62 = icmp eq %"class.std::__1::__tree_end_node"* %61, %20
  br i1 %62, label %63, label %66

63:                                               ; preds = %58
  %64 = ptrtoint %"class.std::__1::__tree_end_node"* %59 to i64
  %65 = bitcast %"class.std::__1::__tree"* %3 to i64*
  store i64 %64, i64* %65, align 8
  br label %66

66:                                               ; preds = %63, %58
  %67 = getelementptr inbounds %"class.net::MultiThreadedProxyResolverFactory", %"class.net::MultiThreadedProxyResolverFactory"* %0, i64 0, i32 2, i32 0, i32 2, i32 0, i32 0
  %68 = load i64, i64* %67, align 8
  %69 = add i64 %68, -1
  store i64 %69, i64* %67, align 8
  %70 = bitcast %"class.std::__1::__tree_end_node"* %20 to %"class.std::__1::__tree_node_base"*
  tail call void @_ZNSt3__113__tree_removeIPNS_16__tree_node_baseIPvEEEEvT_S5_(%"class.std::__1::__tree_node_base"* nonnull %8, %"class.std::__1::__tree_node_base"* %70) #14
  %71 = bitcast %"class.std::__1::__tree_end_node"* %20 to i8*
  tail call void @_ZdlPv(i8* %71) #15
  br label %72

72:                                               ; preds = %2, %23, %25, %66
  ret void
}

declare void @__cxa_pure_virtual() unnamed_addr

; Function Attrs: nounwind ssp uwtable
define internal fastcc void @_ZN3net12_GLOBAL__N_18Executor7DestroyEv(%"class.net::(anonymous namespace)::Executor"* nocapture) unnamed_addr #0 align 2 {
  %2 = alloca %"class.base::Location", align 8
  %3 = alloca %"class.net::MultiThreadedProxyResolverScopedAllowJoinOnIO", align 1
  %4 = getelementptr inbounds %"class.net::MultiThreadedProxyResolverScopedAllowJoinOnIO", %"class.net::MultiThreadedProxyResolverScopedAllowJoinOnIO"* %3, i64 0, i32 0, i32 0, i32 0
  call void @llvm.lifetime.start.p0i8(i64 1, i8* nonnull %4) #14
  store i8 -86, i8* %4, align 1
  %5 = getelementptr inbounds %"class.net::MultiThreadedProxyResolverScopedAllowJoinOnIO", %"class.net::MultiThreadedProxyResolverScopedAllowJoinOnIO"* %3, i64 0, i32 0
  %6 = bitcast %"class.base::Location"* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %6) #14
  call void @_ZN4base8Location7CurrentEPKcS2_i(%"class.base::Location"* nonnull sret %2, i8* getelementptr inbounds ([46 x i8], [46 x i8]* @.str, i64 0, i64 0), i8* getelementptr inbounds ([60 x i8], [60 x i8]* @.str.1, i64 0, i64 0), i32 35) #14
  call void @_ZN4base49ScopedAllowBaseSyncPrimitivesOutsideBlockingScopeC2ERKNS_8LocationE(%"class.base::ScopedAllowBaseSyncPrimitivesOutsideBlockingScope"* nonnull %5, %"class.base::Location"* nonnull dereferenceable(32) %2) #14
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %6) #14
  %7 = getelementptr inbounds %"class.net::(anonymous namespace)::Executor", %"class.net::(anonymous namespace)::Executor"* %0, i64 0, i32 5, i32 0, i32 0, i32 0
  %8 = load %"class.base::Thread"*, %"class.base::Thread"** %7, align 8
  store %"class.base::Thread"* null, %"class.base::Thread"** %7, align 8
  %9 = icmp eq %"class.base::Thread"* %8, null
  br i1 %9, label %15, label %10

10:                                               ; preds = %1
  %11 = bitcast %"class.base::Thread"* %8 to void (%"class.base::Thread"*)***
  %12 = load void (%"class.base::Thread"*)**, void (%"class.base::Thread"*)*** %11, align 8
  %13 = getelementptr inbounds void (%"class.base::Thread"*)*, void (%"class.base::Thread"*)** %12, i64 3
  %14 = load void (%"class.base::Thread"*)*, void (%"class.base::Thread"*)** %13, align 8
  call void %14(%"class.base::Thread"* nonnull %8) #14
  br label %15

15:                                               ; preds = %1, %10
  call void @_ZN4base49ScopedAllowBaseSyncPrimitivesOutsideBlockingScopeD2Ev(%"class.base::ScopedAllowBaseSyncPrimitivesOutsideBlockingScope"* nonnull %5) #14
  call void @llvm.lifetime.end.p0i8(i64 1, i8* nonnull %4) #14
  %16 = getelementptr inbounds %"class.net::(anonymous namespace)::Executor", %"class.net::(anonymous namespace)::Executor"* %0, i64 0, i32 3
  %17 = getelementptr inbounds %class.scoped_refptr.36, %class.scoped_refptr.36* %16, i64 0, i32 0
  %18 = load %"class.net::(anonymous namespace)::Job"*, %"class.net::(anonymous namespace)::Job"** %17, align 8
  %19 = icmp eq %"class.net::(anonymous namespace)::Job"* %18, null
  br i1 %19, label %24, label %20

20:                                               ; preds = %15
  %21 = getelementptr inbounds %"class.net::(anonymous namespace)::Job", %"class.net::(anonymous namespace)::Job"* %18, i64 0, i32 4
  store i8 1, i8* %21, align 8
  %22 = load %"class.net::(anonymous namespace)::Job"*, %"class.net::(anonymous namespace)::Job"** %17, align 8
  %23 = getelementptr inbounds %"class.net::(anonymous namespace)::Job", %"class.net::(anonymous namespace)::Job"* %22, i64 0, i32 3
  store %"class.net::(anonymous namespace)::Executor"* null, %"class.net::(anonymous namespace)::Executor"** %23, align 8
  br label %24

24:                                               ; preds = %15, %20
  %25 = getelementptr inbounds %"class.net::(anonymous namespace)::Executor", %"class.net::(anonymous namespace)::Executor"* %0, i64 0, i32 4, i32 0, i32 0, i32 0
  %26 = load %"class.net::ProxyResolver"*, %"class.net::ProxyResolver"** %25, align 8
  store %"class.net::ProxyResolver"* null, %"class.net::ProxyResolver"** %25, align 8
  %27 = icmp eq %"class.net::ProxyResolver"* %26, null
  br i1 %27, label %33, label %28

28:                                               ; preds = %24
  %29 = bitcast %"class.net::ProxyResolver"* %26 to void (%"class.net::ProxyResolver"*)***
  %30 = load void (%"class.net::ProxyResolver"*)**, void (%"class.net::ProxyResolver"*)*** %29, align 8
  %31 = getelementptr inbounds void (%"class.net::ProxyResolver"*)*, void (%"class.net::ProxyResolver"*)** %30, i64 1
  %32 = load void (%"class.net::ProxyResolver"*)*, void (%"class.net::ProxyResolver"*)** %31, align 8
  call void %32(%"class.net::ProxyResolver"* nonnull %26) #14
  br label %33

33:                                               ; preds = %24, %28
  %34 = getelementptr inbounds %"class.net::(anonymous namespace)::Executor", %"class.net::(anonymous namespace)::Executor"* %0, i64 0, i32 1
  store %"class.net::(anonymous namespace)::Executor::Coordinator"* null, %"class.net::(anonymous namespace)::Executor::Coordinator"** %34, align 8
  %35 = bitcast %class.scoped_refptr.36* %16 to i64*
  %36 = load %"class.net::(anonymous namespace)::Job"*, %"class.net::(anonymous namespace)::Job"** %17, align 8
  store i64 0, i64* %35, align 8
  %37 = icmp eq %"class.net::(anonymous namespace)::Job"* %36, null
  br i1 %37, label %50, label %38

38:                                               ; preds = %33
  %39 = getelementptr inbounds %"class.net::(anonymous namespace)::Job", %"class.net::(anonymous namespace)::Job"* %36, i64 0, i32 1
  %40 = getelementptr inbounds %"class.base::RefCountedThreadSafe.37", %"class.base::RefCountedThreadSafe.37"* %39, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %41 = atomicrmw sub i32* %40, i32 1 acq_rel
  %42 = icmp eq i32 %41, 1
  br i1 %42, label %43, label %50

43:                                               ; preds = %38
  %44 = getelementptr inbounds %"class.base::RefCountedThreadSafe.37", %"class.base::RefCountedThreadSafe.37"* %39, i64 -2
  %45 = bitcast %"class.base::RefCountedThreadSafe.37"* %44 to %"class.net::(anonymous namespace)::Job"*
  %46 = bitcast %"class.base::RefCountedThreadSafe.37"* %44 to void (%"class.net::(anonymous namespace)::Job"*)***
  %47 = load void (%"class.net::(anonymous namespace)::Job"*)**, void (%"class.net::(anonymous namespace)::Job"*)*** %46, align 8
  %48 = getelementptr inbounds void (%"class.net::(anonymous namespace)::Job"*)*, void (%"class.net::(anonymous namespace)::Job"*)** %47, i64 4
  %49 = load void (%"class.net::(anonymous namespace)::Job"*)*, void (%"class.net::(anonymous namespace)::Job"*)** %48, align 8
  call void %49(%"class.net::(anonymous namespace)::Job"* nonnull %45) #14
  br label %50

50:                                               ; preds = %33, %38, %43
  ret void
}

; Function Attrs: nounwind
declare void @_ZN4base49ScopedAllowBaseSyncPrimitivesOutsideBlockingScopeD2Ev(%"class.base::ScopedAllowBaseSyncPrimitivesOutsideBlockingScope"*) unnamed_addr #3

declare void @_ZN4base8Location7CurrentEPKcS2_i(%"class.base::Location"* sret, i8*, i8*, i32) local_unnamed_addr #1

declare void @_ZN4base49ScopedAllowBaseSyncPrimitivesOutsideBlockingScopeC2ERKNS_8LocationE(%"class.base::ScopedAllowBaseSyncPrimitivesOutsideBlockingScope"*, %"class.base::Location"* dereferenceable(32)) unnamed_addr #1

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #2

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #7

; Function Attrs: nounwind ssp uwtable
define internal fastcc void @_ZN3net12_GLOBAL__N_18ExecutorC2EPNS1_11CoordinatorEi(%"class.net::(anonymous namespace)::Executor"* nocapture, %"class.net::(anonymous namespace)::Executor::Coordinator"*, i32) unnamed_addr #0 align 2 {
  %4 = alloca %"class.std::__1::basic_string", align 8
  %5 = alloca %"class.logging::CheckError", align 8
  %6 = getelementptr inbounds %"class.net::(anonymous namespace)::Executor", %"class.net::(anonymous namespace)::Executor"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  store i32 0, i32* %6, align 4
  %7 = getelementptr inbounds %"class.net::(anonymous namespace)::Executor", %"class.net::(anonymous namespace)::Executor"* %0, i64 0, i32 1
  store %"class.net::(anonymous namespace)::Executor::Coordinator"* %1, %"class.net::(anonymous namespace)::Executor::Coordinator"** %7, align 8
  %8 = getelementptr inbounds %"class.net::(anonymous namespace)::Executor", %"class.net::(anonymous namespace)::Executor"* %0, i64 0, i32 2
  store i32 %2, i32* %8, align 8
  %9 = getelementptr inbounds %"class.net::(anonymous namespace)::Executor", %"class.net::(anonymous namespace)::Executor"* %0, i64 0, i32 3, i32 0
  %10 = getelementptr inbounds %"class.net::(anonymous namespace)::Executor", %"class.net::(anonymous namespace)::Executor"* %0, i64 0, i32 5
  %11 = bitcast %"class.std::__1::unique_ptr.38"* %10 to i64*
  %12 = bitcast %"class.std::__1::basic_string"* %4 to i8*
  %13 = bitcast %"class.net::(anonymous namespace)::Job"** %9 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %13, i8 0, i64 24, i1 false)
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %12) #14
  call void (%"class.std::__1::basic_string"*, i8*, ...) @_ZN4base12StringPrintfEPKcz(%"class.std::__1::basic_string"* nonnull sret %4, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.2, i64 0, i64 0), i32 %2) #14
  %14 = call i8* @_Znwm(i64 200) #15
  %15 = bitcast i8* %14 to %"class.base::Thread"*
  call void @_ZN4base6ThreadC1ERKNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEE(%"class.base::Thread"* nonnull %15, %"class.std::__1::basic_string"* nonnull dereferenceable(24) %4) #14
  %16 = ptrtoint i8* %14 to i64
  %17 = getelementptr inbounds %"class.std::__1::unique_ptr.38", %"class.std::__1::unique_ptr.38"* %10, i64 0, i32 0, i32 0, i32 0
  %18 = load %"class.base::Thread"*, %"class.base::Thread"** %17, align 8
  store i64 %16, i64* %11, align 8
  %19 = icmp eq %"class.base::Thread"* %18, null
  br i1 %19, label %25, label %20

20:                                               ; preds = %3
  %21 = bitcast %"class.base::Thread"* %18 to void (%"class.base::Thread"*)***
  %22 = load void (%"class.base::Thread"*)**, void (%"class.base::Thread"*)*** %21, align 8
  %23 = getelementptr inbounds void (%"class.base::Thread"*)*, void (%"class.base::Thread"*)** %22, i64 3
  %24 = load void (%"class.base::Thread"*)*, void (%"class.base::Thread"*)** %23, align 8
  call void %24(%"class.base::Thread"* nonnull %18) #14
  br label %25

25:                                               ; preds = %20, %3
  %26 = bitcast %"class.std::__1::basic_string"* %4 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %27 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %26, i64 0, i32 1, i32 0
  %28 = load i8, i8* %27, align 1
  %29 = icmp slt i8 %28, 0
  br i1 %29, label %30, label %33

30:                                               ; preds = %25
  %31 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %4, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %32 = load i8*, i8** %31, align 8
  call void @_ZdlPv(i8* %32) #15
  br label %33

33:                                               ; preds = %25, %30
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %12) #14
  %34 = load %"class.base::Thread"*, %"class.base::Thread"** %17, align 8
  %35 = call zeroext i1 @_ZN4base6Thread5StartEv(%"class.base::Thread"* %34) #14
  br i1 %35, label %39, label %36

36:                                               ; preds = %33
  %37 = bitcast %"class.logging::CheckError"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %37) #14
  call void @_ZN7logging10CheckError5CheckEPKciS2_(%"class.logging::CheckError"* nonnull sret %5, i8* getelementptr inbounds ([60 x i8], [60 x i8]* @.str.1, i64 0, i64 0), i32 361, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.3, i64 0, i64 0)) #14
  %38 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %5) #14
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %5) #14
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %37) #14
  br label %39

39:                                               ; preds = %33, %36
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal fastcc void @_ZN3net12_GLOBAL__N_18Executor8StartJobEPNS0_3JobE(%"class.net::(anonymous namespace)::Executor"*, %"class.net::(anonymous namespace)::Job"*) unnamed_addr #0 align 2 {
  %3 = alloca %"class.base::Location", align 8
  %4 = alloca %"class.base::OnceCallback.91", align 8
  %5 = getelementptr inbounds %"class.net::(anonymous namespace)::Executor", %"class.net::(anonymous namespace)::Executor"* %0, i64 0, i32 3
  %6 = icmp eq %"class.net::(anonymous namespace)::Job"* %1, null
  br i1 %6, label %10, label %7

7:                                                ; preds = %2
  %8 = getelementptr inbounds %"class.net::(anonymous namespace)::Job", %"class.net::(anonymous namespace)::Job"* %1, i64 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %9 = atomicrmw add i32* %8, i32 1 monotonic
  br label %10

10:                                               ; preds = %7, %2
  %11 = ptrtoint %"class.net::(anonymous namespace)::Job"* %1 to i64
  %12 = bitcast %class.scoped_refptr.36* %5 to i64*
  %13 = getelementptr inbounds %class.scoped_refptr.36, %class.scoped_refptr.36* %5, i64 0, i32 0
  %14 = load %"class.net::(anonymous namespace)::Job"*, %"class.net::(anonymous namespace)::Job"** %13, align 8
  store i64 %11, i64* %12, align 8
  %15 = icmp eq %"class.net::(anonymous namespace)::Job"* %14, null
  br i1 %15, label %28, label %16

16:                                               ; preds = %10
  %17 = getelementptr inbounds %"class.net::(anonymous namespace)::Job", %"class.net::(anonymous namespace)::Job"* %14, i64 0, i32 1
  %18 = getelementptr inbounds %"class.base::RefCountedThreadSafe.37", %"class.base::RefCountedThreadSafe.37"* %17, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %19 = atomicrmw sub i32* %18, i32 1 acq_rel
  %20 = icmp eq i32 %19, 1
  br i1 %20, label %21, label %28

21:                                               ; preds = %16
  %22 = getelementptr inbounds %"class.base::RefCountedThreadSafe.37", %"class.base::RefCountedThreadSafe.37"* %17, i64 -2
  %23 = bitcast %"class.base::RefCountedThreadSafe.37"* %22 to %"class.net::(anonymous namespace)::Job"*
  %24 = bitcast %"class.base::RefCountedThreadSafe.37"* %22 to void (%"class.net::(anonymous namespace)::Job"*)***
  %25 = load void (%"class.net::(anonymous namespace)::Job"*)**, void (%"class.net::(anonymous namespace)::Job"*)*** %24, align 8
  %26 = getelementptr inbounds void (%"class.net::(anonymous namespace)::Job"*)*, void (%"class.net::(anonymous namespace)::Job"*)** %25, i64 4
  %27 = load void (%"class.net::(anonymous namespace)::Job"*)*, void (%"class.net::(anonymous namespace)::Job"*)** %26, align 8
  tail call void %27(%"class.net::(anonymous namespace)::Job"* nonnull %23) #14
  br label %28

28:                                               ; preds = %10, %16, %21
  %29 = getelementptr inbounds %"class.net::(anonymous namespace)::Job", %"class.net::(anonymous namespace)::Job"* %1, i64 0, i32 3
  store %"class.net::(anonymous namespace)::Executor"* %0, %"class.net::(anonymous namespace)::Executor"** %29, align 8
  %30 = bitcast %"class.net::(anonymous namespace)::Job"* %1 to void (%"class.net::(anonymous namespace)::Job"*)***
  %31 = load void (%"class.net::(anonymous namespace)::Job"*)**, void (%"class.net::(anonymous namespace)::Job"*)*** %30, align 8
  %32 = getelementptr inbounds void (%"class.net::(anonymous namespace)::Job"*)*, void (%"class.net::(anonymous namespace)::Job"*)** %31, i64 1
  %33 = load void (%"class.net::(anonymous namespace)::Job"*)*, void (%"class.net::(anonymous namespace)::Job"*)** %32, align 8
  tail call void %33(%"class.net::(anonymous namespace)::Job"* %1) #14
  %34 = getelementptr inbounds %"class.net::(anonymous namespace)::Executor", %"class.net::(anonymous namespace)::Executor"* %0, i64 0, i32 5, i32 0, i32 0, i32 0
  %35 = load %"class.base::Thread"*, %"class.base::Thread"** %34, align 8
  %36 = getelementptr inbounds %"class.base::Thread", %"class.base::Thread"* %35, i64 0, i32 11, i32 0, i32 0, i32 0
  %37 = load %"class.base::Thread::Delegate"*, %"class.base::Thread::Delegate"** %36, align 8
  %38 = icmp eq %"class.base::Thread::Delegate"* %37, null
  br i1 %38, label %45, label %39

39:                                               ; preds = %28
  %40 = bitcast %"class.base::Thread::Delegate"* %37 to %"class.base::SingleThreadTaskRunner"* (%"class.base::Thread::Delegate"*)***
  %41 = load %"class.base::SingleThreadTaskRunner"* (%"class.base::Thread::Delegate"*)**, %"class.base::SingleThreadTaskRunner"* (%"class.base::Thread::Delegate"*)*** %40, align 8
  %42 = getelementptr inbounds %"class.base::SingleThreadTaskRunner"* (%"class.base::Thread::Delegate"*)*, %"class.base::SingleThreadTaskRunner"* (%"class.base::Thread::Delegate"*)** %41, i64 2
  %43 = load %"class.base::SingleThreadTaskRunner"* (%"class.base::Thread::Delegate"*)*, %"class.base::SingleThreadTaskRunner"* (%"class.base::Thread::Delegate"*)** %42, align 8
  %44 = tail call %"class.base::SingleThreadTaskRunner"* %43(%"class.base::Thread::Delegate"* nonnull %37) #14
  br label %45

45:                                               ; preds = %28, %39
  %46 = phi %"class.base::SingleThreadTaskRunner"* [ %44, %39 ], [ null, %28 ]
  %47 = bitcast %"class.base::SingleThreadTaskRunner"* %46 to %"class.base::TaskRunner"*
  %48 = bitcast %"class.base::Location"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %48) #14
  call void @_ZN4base8Location7CurrentEPKcS2_i(%"class.base::Location"* nonnull sret %3, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.4, i64 0, i64 0), i8* getelementptr inbounds ([60 x i8], [60 x i8]* @.str.1, i64 0, i64 0), i32 373) #14
  %49 = call dereferenceable(8) %class.scoped_refptr.65* @_ZN4base22ThreadTaskRunnerHandle3GetEv() #14
  %50 = call i8* @_Znwm(i64 64) #15, !noalias !5
  %51 = bitcast i8* %50 to %"class.base::internal::BindStateBase"*
  call void @_ZN4base8internal13BindStateBaseC2EPFvvEPFvPKS1_E(%"class.base::internal::BindStateBase"* nonnull %51, void ()* bitcast (void (%"class.base::internal::BindStateBase"*)* @_ZN4base8internal7InvokerINS0_9BindStateIMN3net12_GLOBAL__N_13JobEFv13scoped_refptrINS_22SingleThreadTaskRunnerEEEJS6_IS5_ES8_EEEFvvEE7RunOnceEPNS0_13BindStateBaseE to void ()*), void (%"class.base::internal::BindStateBase"*)* nonnull @_ZN4base8internal9BindStateIMN3net12_GLOBAL__N_13JobEFv13scoped_refptrINS_22SingleThreadTaskRunnerEEEJS5_IS4_ES7_EE7DestroyEPKNS0_13BindStateBaseE) #14, !noalias !5
  %52 = getelementptr inbounds i8, i8* %50, i64 32
  %53 = bitcast i8* %52 to <2 x i64>*
  store <2 x i64> <i64 17, i64 0>, <2 x i64>* %53, align 8, !noalias !5
  %54 = getelementptr inbounds i8, i8* %50, i64 48
  %55 = bitcast i8* %54 to %"class.net::(anonymous namespace)::Job"**
  store %"class.net::(anonymous namespace)::Job"* %1, %"class.net::(anonymous namespace)::Job"** %55, align 8, !noalias !5
  br i1 %6, label %59, label %56

56:                                               ; preds = %45
  %57 = getelementptr inbounds %"class.net::(anonymous namespace)::Job", %"class.net::(anonymous namespace)::Job"* %1, i64 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %58 = atomicrmw add i32* %57, i32 1 monotonic, !noalias !5
  br label %59

59:                                               ; preds = %56, %45
  %60 = getelementptr inbounds %class.scoped_refptr.65, %class.scoped_refptr.65* %49, i64 0, i32 0
  %61 = load %"class.base::SingleThreadTaskRunner"*, %"class.base::SingleThreadTaskRunner"** %60, align 8, !noalias !5
  %62 = getelementptr inbounds i8, i8* %50, i64 56
  %63 = bitcast i8* %62 to %"class.base::SingleThreadTaskRunner"**
  store %"class.base::SingleThreadTaskRunner"* %61, %"class.base::SingleThreadTaskRunner"** %63, align 8, !noalias !5
  %64 = icmp eq %"class.base::SingleThreadTaskRunner"* %61, null
  br i1 %64, label %68, label %65

65:                                               ; preds = %59
  %66 = getelementptr inbounds %"class.base::SingleThreadTaskRunner", %"class.base::SingleThreadTaskRunner"* %61, i64 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %67 = atomicrmw add i32* %66, i32 1 monotonic, !noalias !5
  br label %68

68:                                               ; preds = %59, %65
  %69 = bitcast %"class.base::OnceCallback.91"* %4 to i8**
  store i8* %50, i8** %69, align 8, !alias.scope !5
  %70 = call zeroext i1 @_ZN4base10TaskRunner8PostTaskERKNS_8LocationENS_12OnceCallbackIFvvEEE(%"class.base::TaskRunner"* %47, %"class.base::Location"* nonnull dereferenceable(32) %3, %"class.base::OnceCallback.91"* nonnull %4) #14
  %71 = getelementptr inbounds %"class.base::OnceCallback.91", %"class.base::OnceCallback.91"* %4, i64 0, i32 0
  call void @_ZN4base8internal12CallbackBaseD2Ev(%"class.base::internal::CallbackBase"* nonnull %71) #14
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %48) #14
  %72 = icmp eq %"class.base::SingleThreadTaskRunner"* %46, null
  br i1 %72, label %81, label %73

73:                                               ; preds = %68
  %74 = getelementptr inbounds %"class.base::SingleThreadTaskRunner", %"class.base::SingleThreadTaskRunner"* %46, i64 0, i32 0, i32 0, i32 1
  %75 = getelementptr inbounds %"class.base::RefCountedThreadSafe.66", %"class.base::RefCountedThreadSafe.66"* %74, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %76 = atomicrmw sub i32* %75, i32 1 acq_rel
  %77 = icmp eq i32 %76, 1
  br i1 %77, label %78, label %81

78:                                               ; preds = %73
  %79 = getelementptr inbounds %"class.base::RefCountedThreadSafe.66", %"class.base::RefCountedThreadSafe.66"* %74, i64 -2
  %80 = bitcast %"class.base::RefCountedThreadSafe.66"* %79 to %"class.base::TaskRunner"*
  call void @_ZN4base16TaskRunnerTraits8DestructEPKNS_10TaskRunnerE(%"class.base::TaskRunner"* %80) #14
  br label %81

81:                                               ; preds = %68, %73, %78
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN3net33MultiThreadedProxyResolverFactory3JobD2Ev(%"class.net::MultiThreadedProxyResolverFactory::Job"*) unnamed_addr #0 comdat align 2 {
  %2 = bitcast %"class.net::MultiThreadedProxyResolverFactory::Job"* %0 to <2 x i32 (...)**>*
  store <2 x i32 (...)**> <i32 (...)** bitcast (i8** getelementptr inbounds ({ [5 x i8*], [5 x i8*] }, { [5 x i8*], [5 x i8*] }* @_ZTVN3net33MultiThreadedProxyResolverFactory3JobE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)** bitcast (i8** getelementptr inbounds ({ [5 x i8*], [5 x i8*] }, { [5 x i8*], [5 x i8*] }* @_ZTVN3net33MultiThreadedProxyResolverFactory3JobE, i64 0, inrange i32 1, i64 2) to i32 (...)**)>, <2 x i32 (...)**>* %2, align 8
  %3 = getelementptr inbounds %"class.net::MultiThreadedProxyResolverFactory::Job", %"class.net::MultiThreadedProxyResolverFactory::Job"* %0, i64 0, i32 2
  %4 = load %"class.net::MultiThreadedProxyResolverFactory"*, %"class.net::MultiThreadedProxyResolverFactory"** %3, align 8
  %5 = icmp eq %"class.net::MultiThreadedProxyResolverFactory"* %4, null
  br i1 %5, label %79, label %6

6:                                                ; preds = %1
  %7 = getelementptr inbounds %"class.net::MultiThreadedProxyResolverFactory::Job", %"class.net::MultiThreadedProxyResolverFactory::Job"* %0, i64 0, i32 7, i32 0
  %8 = load %"class.net::(anonymous namespace)::Executor"*, %"class.net::(anonymous namespace)::Executor"** %7, align 8
  tail call fastcc void @_ZN3net12_GLOBAL__N_18Executor7DestroyEv(%"class.net::(anonymous namespace)::Executor"* %8)
  %9 = load %"class.net::MultiThreadedProxyResolverFactory"*, %"class.net::MultiThreadedProxyResolverFactory"** %3, align 8
  %10 = getelementptr inbounds %"class.net::MultiThreadedProxyResolverFactory", %"class.net::MultiThreadedProxyResolverFactory"* %9, i64 0, i32 2, i32 0
  %11 = getelementptr inbounds %"class.net::MultiThreadedProxyResolverFactory", %"class.net::MultiThreadedProxyResolverFactory"* %9, i64 0, i32 2, i32 0, i32 1, i32 0, i32 0
  %12 = bitcast %"class.std::__1::__tree_end_node"* %11 to %"class.std::__1::__tree_node"**
  %13 = load %"class.std::__1::__tree_node"*, %"class.std::__1::__tree_node"** %12, align 8
  %14 = icmp eq %"class.std::__1::__tree_node"* %13, null
  %15 = bitcast %"class.std::__1::__tree_node"* %13 to %"class.std::__1::__tree_node_base"*
  br i1 %14, label %79, label %16

16:                                               ; preds = %6, %16
  %17 = phi %"class.std::__1::__tree_end_node"* [ %27, %16 ], [ %11, %6 ]
  %18 = phi %"class.std::__1::__tree_node"* [ %28, %16 ], [ %13, %6 ]
  %19 = getelementptr inbounds %"class.std::__1::__tree_node", %"class.std::__1::__tree_node"* %18, i64 0, i32 1
  %20 = load %"class.net::MultiThreadedProxyResolverFactory::Job"*, %"class.net::MultiThreadedProxyResolverFactory::Job"** %19, align 8
  %21 = icmp ult %"class.net::MultiThreadedProxyResolverFactory::Job"* %20, %0
  %22 = getelementptr inbounds %"class.std::__1::__tree_node", %"class.std::__1::__tree_node"* %18, i64 0, i32 0, i32 1
  %23 = bitcast %"class.std::__1::__tree_node_base"** %22 to %"class.std::__1::__tree_node"**
  %24 = getelementptr inbounds %"class.std::__1::__tree_node", %"class.std::__1::__tree_node"* %18, i64 0, i32 0, i32 0
  %25 = bitcast %"class.std::__1::__tree_node"* %18 to %"class.std::__1::__tree_node"**
  %26 = select i1 %21, %"class.std::__1::__tree_node"** %23, %"class.std::__1::__tree_node"** %25
  %27 = select i1 %21, %"class.std::__1::__tree_end_node"* %17, %"class.std::__1::__tree_end_node"* %24
  %28 = load %"class.std::__1::__tree_node"*, %"class.std::__1::__tree_node"** %26, align 8
  %29 = icmp eq %"class.std::__1::__tree_node"* %28, null
  br i1 %29, label %30, label %16

30:                                               ; preds = %16
  %31 = icmp eq %"class.std::__1::__tree_end_node"* %27, %11
  br i1 %31, label %79, label %32

32:                                               ; preds = %30
  %33 = getelementptr inbounds %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_end_node"* %27, i64 4
  %34 = bitcast %"class.std::__1::__tree_end_node"* %33 to %"class.net::MultiThreadedProxyResolverFactory::Job"**
  %35 = load %"class.net::MultiThreadedProxyResolverFactory::Job"*, %"class.net::MultiThreadedProxyResolverFactory::Job"** %34, align 8
  %36 = icmp ugt %"class.net::MultiThreadedProxyResolverFactory::Job"* %35, %0
  br i1 %36, label %79, label %37

37:                                               ; preds = %32
  %38 = getelementptr inbounds %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_end_node"* %27, i64 1, i32 0
  %39 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %38, align 8
  %40 = icmp eq %"class.std::__1::__tree_node_base"* %39, null
  br i1 %40, label %41, label %49

41:                                               ; preds = %37
  %42 = bitcast %"class.std::__1::__tree_end_node"* %27 to %"class.std::__1::__tree_node_base"*
  %43 = getelementptr inbounds %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_end_node"* %27, i64 2
  %44 = bitcast %"class.std::__1::__tree_end_node"* %43 to %"class.std::__1::__tree_end_node"**
  %45 = load %"class.std::__1::__tree_end_node"*, %"class.std::__1::__tree_end_node"** %44, align 8
  %46 = getelementptr inbounds %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_end_node"* %45, i64 0, i32 0
  %47 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %46, align 8
  %48 = icmp eq %"class.std::__1::__tree_node_base"* %47, %42
  br i1 %48, label %65, label %56

49:                                               ; preds = %37, %49
  %50 = phi %"class.std::__1::__tree_node_base"* [ %52, %49 ], [ %39, %37 ]
  %51 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %50, i64 0, i32 0, i32 0
  %52 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %51, align 8
  %53 = icmp eq %"class.std::__1::__tree_node_base"* %52, null
  br i1 %53, label %54, label %49

54:                                               ; preds = %49
  %55 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %50, i64 0, i32 0
  br label %65

56:                                               ; preds = %41, %56
  %57 = phi %"class.std::__1::__tree_end_node"** [ %60, %56 ], [ %44, %41 ]
  %58 = bitcast %"class.std::__1::__tree_end_node"** %57 to %"class.std::__1::__tree_node_base"**
  %59 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %58, align 8
  %60 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %59, i64 0, i32 2
  %61 = load %"class.std::__1::__tree_end_node"*, %"class.std::__1::__tree_end_node"** %60, align 8
  %62 = getelementptr inbounds %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_end_node"* %61, i64 0, i32 0
  %63 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %62, align 8
  %64 = icmp eq %"class.std::__1::__tree_node_base"* %63, %59
  br i1 %64, label %65, label %56

65:                                               ; preds = %56, %54, %41
  %66 = phi %"class.std::__1::__tree_end_node"* [ %55, %54 ], [ %45, %41 ], [ %61, %56 ]
  %67 = getelementptr inbounds %"class.std::__1::__tree", %"class.std::__1::__tree"* %10, i64 0, i32 0
  %68 = load %"class.std::__1::__tree_end_node"*, %"class.std::__1::__tree_end_node"** %67, align 8
  %69 = icmp eq %"class.std::__1::__tree_end_node"* %68, %27
  br i1 %69, label %70, label %73

70:                                               ; preds = %65
  %71 = ptrtoint %"class.std::__1::__tree_end_node"* %66 to i64
  %72 = bitcast %"class.std::__1::__tree"* %10 to i64*
  store i64 %71, i64* %72, align 8
  br label %73

73:                                               ; preds = %70, %65
  %74 = getelementptr inbounds %"class.net::MultiThreadedProxyResolverFactory", %"class.net::MultiThreadedProxyResolverFactory"* %9, i64 0, i32 2, i32 0, i32 2, i32 0, i32 0
  %75 = load i64, i64* %74, align 8
  %76 = add i64 %75, -1
  store i64 %76, i64* %74, align 8
  %77 = bitcast %"class.std::__1::__tree_end_node"* %27 to %"class.std::__1::__tree_node_base"*
  tail call void @_ZNSt3__113__tree_removeIPNS_16__tree_node_baseIPvEEEEvT_S5_(%"class.std::__1::__tree_node_base"* nonnull %15, %"class.std::__1::__tree_node_base"* %77) #14
  %78 = bitcast %"class.std::__1::__tree_end_node"* %27 to i8*
  tail call void @_ZdlPv(i8* %78) #15
  br label %79

79:                                               ; preds = %73, %32, %30, %6, %1
  %80 = getelementptr inbounds %"class.net::MultiThreadedProxyResolverFactory::Job", %"class.net::MultiThreadedProxyResolverFactory::Job"* %0, i64 0, i32 8, i32 0
  tail call void @_ZN4base8internal12CallbackBaseD2Ev(%"class.base::internal::CallbackBase"* %80) #14
  %81 = getelementptr inbounds %"class.net::MultiThreadedProxyResolverFactory::Job", %"class.net::MultiThreadedProxyResolverFactory::Job"* %0, i64 0, i32 7, i32 0
  %82 = load %"class.net::(anonymous namespace)::Executor"*, %"class.net::(anonymous namespace)::Executor"** %81, align 8
  %83 = icmp eq %"class.net::(anonymous namespace)::Executor"* %82, null
  br i1 %83, label %128, label %84

84:                                               ; preds = %79
  %85 = getelementptr inbounds %"class.net::(anonymous namespace)::Executor", %"class.net::(anonymous namespace)::Executor"* %82, i64 0, i32 0
  %86 = getelementptr inbounds %"class.net::(anonymous namespace)::Executor", %"class.net::(anonymous namespace)::Executor"* %82, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %87 = atomicrmw sub i32* %86, i32 1 acq_rel
  %88 = icmp eq i32 %87, 1
  br i1 %88, label %89, label %128

89:                                               ; preds = %84
  %90 = getelementptr inbounds %"class.base::RefCountedThreadSafe.35", %"class.base::RefCountedThreadSafe.35"* %85, i64 10
  %91 = bitcast %"class.base::RefCountedThreadSafe.35"* %90 to %"class.base::Thread"**
  %92 = load %"class.base::Thread"*, %"class.base::Thread"** %91, align 8
  store %"class.base::Thread"* null, %"class.base::Thread"** %91, align 8
  %93 = icmp eq %"class.base::Thread"* %92, null
  br i1 %93, label %99, label %94

94:                                               ; preds = %89
  %95 = bitcast %"class.base::Thread"* %92 to void (%"class.base::Thread"*)***
  %96 = load void (%"class.base::Thread"*)**, void (%"class.base::Thread"*)*** %95, align 8
  %97 = getelementptr inbounds void (%"class.base::Thread"*)*, void (%"class.base::Thread"*)** %96, i64 3
  %98 = load void (%"class.base::Thread"*)*, void (%"class.base::Thread"*)** %97, align 8
  tail call void %98(%"class.base::Thread"* nonnull %92) #14
  br label %99

99:                                               ; preds = %94, %89
  %100 = getelementptr inbounds %"class.base::RefCountedThreadSafe.35", %"class.base::RefCountedThreadSafe.35"* %85, i64 8
  %101 = bitcast %"class.base::RefCountedThreadSafe.35"* %100 to %"class.net::ProxyResolver"**
  %102 = load %"class.net::ProxyResolver"*, %"class.net::ProxyResolver"** %101, align 8
  store %"class.net::ProxyResolver"* null, %"class.net::ProxyResolver"** %101, align 8
  %103 = icmp eq %"class.net::ProxyResolver"* %102, null
  br i1 %103, label %109, label %104

104:                                              ; preds = %99
  %105 = bitcast %"class.net::ProxyResolver"* %102 to void (%"class.net::ProxyResolver"*)***
  %106 = load void (%"class.net::ProxyResolver"*)**, void (%"class.net::ProxyResolver"*)*** %105, align 8
  %107 = getelementptr inbounds void (%"class.net::ProxyResolver"*)*, void (%"class.net::ProxyResolver"*)** %106, i64 1
  %108 = load void (%"class.net::ProxyResolver"*)*, void (%"class.net::ProxyResolver"*)** %107, align 8
  tail call void %108(%"class.net::ProxyResolver"* nonnull %102) #14
  br label %109

109:                                              ; preds = %104, %99
  %110 = getelementptr inbounds %"class.base::RefCountedThreadSafe.35", %"class.base::RefCountedThreadSafe.35"* %85, i64 6
  %111 = bitcast %"class.base::RefCountedThreadSafe.35"* %110 to %"class.net::(anonymous namespace)::Job"**
  %112 = load %"class.net::(anonymous namespace)::Job"*, %"class.net::(anonymous namespace)::Job"** %111, align 8
  %113 = icmp eq %"class.net::(anonymous namespace)::Job"* %112, null
  br i1 %113, label %126, label %114

114:                                              ; preds = %109
  %115 = getelementptr inbounds %"class.net::(anonymous namespace)::Job", %"class.net::(anonymous namespace)::Job"* %112, i64 0, i32 1
  %116 = getelementptr inbounds %"class.base::RefCountedThreadSafe.37", %"class.base::RefCountedThreadSafe.37"* %115, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %117 = atomicrmw sub i32* %116, i32 1 acq_rel
  %118 = icmp eq i32 %117, 1
  br i1 %118, label %119, label %126

119:                                              ; preds = %114
  %120 = getelementptr inbounds %"class.base::RefCountedThreadSafe.37", %"class.base::RefCountedThreadSafe.37"* %115, i64 -2
  %121 = bitcast %"class.base::RefCountedThreadSafe.37"* %120 to %"class.net::(anonymous namespace)::Job"*
  %122 = bitcast %"class.base::RefCountedThreadSafe.37"* %120 to void (%"class.net::(anonymous namespace)::Job"*)***
  %123 = load void (%"class.net::(anonymous namespace)::Job"*)**, void (%"class.net::(anonymous namespace)::Job"*)*** %122, align 8
  %124 = getelementptr inbounds void (%"class.net::(anonymous namespace)::Job"*)*, void (%"class.net::(anonymous namespace)::Job"*)** %123, i64 4
  %125 = load void (%"class.net::(anonymous namespace)::Job"*)*, void (%"class.net::(anonymous namespace)::Job"*)** %124, align 8
  tail call void %125(%"class.net::(anonymous namespace)::Job"* nonnull %121) #14
  br label %126

126:                                              ; preds = %119, %114, %109
  %127 = bitcast %"class.net::(anonymous namespace)::Executor"* %82 to i8*
  tail call void @_ZdlPv(i8* %127) #15
  br label %128

128:                                              ; preds = %79, %84, %126
  %129 = getelementptr inbounds %"class.net::MultiThreadedProxyResolverFactory::Job", %"class.net::MultiThreadedProxyResolverFactory::Job"* %0, i64 0, i32 6, i32 0
  %130 = load %"class.net::PacFileData"*, %"class.net::PacFileData"** %129, align 8
  %131 = icmp eq %"class.net::PacFileData"* %130, null
  br i1 %131, label %144, label %132

132:                                              ; preds = %128
  %133 = getelementptr inbounds %"class.net::PacFileData", %"class.net::PacFileData"* %130, i64 0, i32 1
  %134 = getelementptr inbounds %"class.base::RefCountedThreadSafe", %"class.base::RefCountedThreadSafe"* %133, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %135 = atomicrmw sub i32* %134, i32 1 acq_rel
  %136 = icmp eq i32 %135, 1
  br i1 %136, label %137, label %144

137:                                              ; preds = %132
  %138 = getelementptr inbounds %"class.base::RefCountedThreadSafe", %"class.base::RefCountedThreadSafe"* %133, i64 -2
  %139 = bitcast %"class.base::RefCountedThreadSafe"* %138 to %"class.net::PacFileData"*
  %140 = bitcast %"class.base::RefCountedThreadSafe"* %138 to void (%"class.net::PacFileData"*)***
  %141 = load void (%"class.net::PacFileData"*)**, void (%"class.net::PacFileData"*)*** %140, align 8
  %142 = getelementptr inbounds void (%"class.net::PacFileData"*)*, void (%"class.net::PacFileData"*)** %141, i64 1
  %143 = load void (%"class.net::PacFileData"*)*, void (%"class.net::PacFileData"*)** %142, align 8
  tail call void %143(%"class.net::PacFileData"* nonnull %139) #14
  br label %144

144:                                              ; preds = %128, %132, %137
  %145 = getelementptr inbounds %"class.net::MultiThreadedProxyResolverFactory::Job", %"class.net::MultiThreadedProxyResolverFactory::Job"* %0, i64 0, i32 4, i32 0, i32 0, i32 0
  %146 = load %"class.net::ProxyResolverFactory"*, %"class.net::ProxyResolverFactory"** %145, align 8
  store %"class.net::ProxyResolverFactory"* null, %"class.net::ProxyResolverFactory"** %145, align 8
  %147 = icmp eq %"class.net::ProxyResolverFactory"* %146, null
  br i1 %147, label %153, label %148

148:                                              ; preds = %144
  %149 = bitcast %"class.net::ProxyResolverFactory"* %146 to void (%"class.net::ProxyResolverFactory"*)***
  %150 = load void (%"class.net::ProxyResolverFactory"*)**, void (%"class.net::ProxyResolverFactory"*)*** %149, align 8
  %151 = getelementptr inbounds void (%"class.net::ProxyResolverFactory"*)*, void (%"class.net::ProxyResolverFactory"*)** %150, i64 1
  %152 = load void (%"class.net::ProxyResolverFactory"*)*, void (%"class.net::ProxyResolverFactory"*)** %151, align 8
  tail call void %152(%"class.net::ProxyResolverFactory"* nonnull %146) #14
  br label %153

153:                                              ; preds = %144, %148
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN3net33MultiThreadedProxyResolverFactory3JobD0Ev(%"class.net::MultiThreadedProxyResolverFactory::Job"*) unnamed_addr #0 comdat align 2 {
  tail call void @_ZN3net33MultiThreadedProxyResolverFactory3JobD2Ev(%"class.net::MultiThreadedProxyResolverFactory::Job"* %0) #14
  %2 = bitcast %"class.net::MultiThreadedProxyResolverFactory::Job"* %0 to i8*
  tail call void @_ZdlPv(i8* %2) #15
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN3net33MultiThreadedProxyResolverFactory3Job15OnExecutorReadyEPNS_12_GLOBAL__N_18ExecutorE(%"class.net::MultiThreadedProxyResolverFactory::Job"*, %"class.net::(anonymous namespace)::Executor"* nocapture readonly) unnamed_addr #0 align 2 {
  %3 = alloca %"struct.std::__1::__split_buffer", align 8
  %4 = alloca %"class.base::OnceCallback", align 8
  %5 = getelementptr inbounds %"class.net::(anonymous namespace)::Executor", %"class.net::(anonymous namespace)::Executor"* %1, i64 0, i32 4, i32 0, i32 0, i32 0
  %6 = load %"class.net::ProxyResolver"*, %"class.net::ProxyResolver"** %5, align 8
  %7 = icmp eq %"class.net::ProxyResolver"* %6, null
  br i1 %7, label %257, label %8

8:                                                ; preds = %2
  %9 = getelementptr inbounds %"class.net::MultiThreadedProxyResolverFactory::Job", %"class.net::MultiThreadedProxyResolverFactory::Job"* %0, i64 0, i32 4
  %10 = tail call i8* @_Znwm(i64 96) #15
  %11 = getelementptr inbounds %"class.std::__1::unique_ptr.7", %"class.std::__1::unique_ptr.7"* %9, i64 0, i32 0, i32 0, i32 0
  %12 = bitcast %"class.std::__1::unique_ptr.7"* %9 to <2 x i64>*
  %13 = load <2 x i64>, <2 x i64>* %12, align 8
  store %"class.net::ProxyResolverFactory"* null, %"class.net::ProxyResolverFactory"** %11, align 8
  %14 = getelementptr inbounds %"class.net::MultiThreadedProxyResolverFactory::Job", %"class.net::MultiThreadedProxyResolverFactory::Job"* %0, i64 0, i32 7, i32 0
  %15 = load %"class.net::(anonymous namespace)::Executor"*, %"class.net::(anonymous namespace)::Executor"** %14, align 8
  %16 = icmp eq %"class.net::(anonymous namespace)::Executor"* %15, null
  br i1 %16, label %20, label %17

17:                                               ; preds = %8
  %18 = getelementptr inbounds %"class.net::(anonymous namespace)::Executor", %"class.net::(anonymous namespace)::Executor"* %15, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %19 = atomicrmw add i32* %18, i32 1 monotonic
  br label %20

20:                                               ; preds = %17, %8
  %21 = getelementptr inbounds i8, i8* %10, i64 8
  %22 = bitcast i8* %10 to <2 x i32 (...)**>*
  store <2 x i32 (...)**> <i32 (...)** bitcast (i8** getelementptr inbounds ({ [6 x i8*], [5 x i8*] }, { [6 x i8*], [5 x i8*] }* @_ZTVN3net12_GLOBAL__N_126MultiThreadedProxyResolverE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)** bitcast (i8** getelementptr inbounds ({ [6 x i8*], [5 x i8*] }, { [6 x i8*], [5 x i8*] }* @_ZTVN3net12_GLOBAL__N_126MultiThreadedProxyResolverE, i64 0, inrange i32 1, i64 2) to i32 (...)**)>, <2 x i32 (...)**>* %22, align 8
  %23 = getelementptr inbounds i8, i8* %10, i64 16
  %24 = bitcast i8* %23 to <2 x i64>*
  store <2 x i64> %13, <2 x i64>* %24, align 8
  %25 = getelementptr inbounds i8, i8* %10, i64 32
  %26 = getelementptr inbounds i8, i8* %10, i64 64
  %27 = getelementptr inbounds %"class.net::MultiThreadedProxyResolverFactory::Job", %"class.net::MultiThreadedProxyResolverFactory::Job"* %0, i64 0, i32 6, i32 0
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %25, i8 0, i64 56, i1 false) #14
  %28 = load %"class.net::PacFileData"*, %"class.net::PacFileData"** %27, align 8
  %29 = getelementptr inbounds i8, i8* %10, i64 88
  %30 = bitcast i8* %29 to %"class.net::PacFileData"**
  store %"class.net::PacFileData"* %28, %"class.net::PacFileData"** %30, align 8
  %31 = icmp eq %"class.net::PacFileData"* %28, null
  br i1 %31, label %35, label %32

32:                                               ; preds = %20
  %33 = getelementptr inbounds %"class.net::PacFileData", %"class.net::PacFileData"* %28, i64 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %34 = atomicrmw add i32* %33, i32 1 monotonic
  br label %35

35:                                               ; preds = %32, %20
  %36 = getelementptr inbounds %"class.net::(anonymous namespace)::Executor", %"class.net::(anonymous namespace)::Executor"* %15, i64 0, i32 1
  %37 = bitcast %"class.net::(anonymous namespace)::Executor::Coordinator"** %36 to i8**
  store i8* %21, i8** %37, align 8
  %38 = getelementptr inbounds i8, i8* %10, i64 72
  %39 = bitcast i8* %38 to %class.scoped_refptr.34**
  %40 = load %class.scoped_refptr.34*, %class.scoped_refptr.34** %39, align 8
  %41 = getelementptr inbounds i8, i8* %10, i64 80
  %42 = bitcast i8* %41 to %class.scoped_refptr.34**
  %43 = load %class.scoped_refptr.34*, %class.scoped_refptr.34** %42, align 8
  %44 = icmp eq %class.scoped_refptr.34* %40, %43
  %45 = ptrtoint %class.scoped_refptr.34* %43 to i64
  br i1 %44, label %55, label %46

46:                                               ; preds = %35
  %47 = getelementptr inbounds %class.scoped_refptr.34, %class.scoped_refptr.34* %40, i64 0, i32 0
  store %"class.net::(anonymous namespace)::Executor"* %15, %"class.net::(anonymous namespace)::Executor"** %47, align 8
  br i1 %16, label %51, label %48

48:                                               ; preds = %46
  %49 = getelementptr inbounds %"class.net::(anonymous namespace)::Executor", %"class.net::(anonymous namespace)::Executor"* %15, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %50 = atomicrmw add i32* %49, i32 1 monotonic
  br label %51

51:                                               ; preds = %48, %46
  %52 = getelementptr inbounds %class.scoped_refptr.34, %class.scoped_refptr.34* %40, i64 1
  %53 = ptrtoint %class.scoped_refptr.34* %52 to i64
  %54 = bitcast i8* %38 to i64*
  store i64 %53, i64* %54, align 8
  br label %200

55:                                               ; preds = %35
  %56 = ptrtoint %class.scoped_refptr.34* %40 to i64
  %57 = bitcast %"struct.std::__1::__split_buffer"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %57) #14
  %58 = getelementptr inbounds %"struct.std::__1::__split_buffer", %"struct.std::__1::__split_buffer"* %3, i64 0, i32 0
  %59 = getelementptr inbounds %"struct.std::__1::__split_buffer", %"struct.std::__1::__split_buffer"* %3, i64 0, i32 1
  %60 = getelementptr inbounds %"struct.std::__1::__split_buffer", %"struct.std::__1::__split_buffer"* %3, i64 0, i32 2
  %61 = getelementptr inbounds %"struct.std::__1::__split_buffer", %"struct.std::__1::__split_buffer"* %3, i64 0, i32 3, i32 0, i32 0
  %62 = getelementptr inbounds %"struct.std::__1::__split_buffer", %"struct.std::__1::__split_buffer"* %3, i64 0, i32 3, i32 1, i32 0
  %63 = bitcast i8* %38 to i64*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %57, i8 -86, i64 40, i1 false) #14
  %64 = bitcast i8* %26 to i64*
  %65 = load i64, i64* %64, align 8
  %66 = sub i64 %56, %65
  %67 = ashr exact i64 %66, 3
  %68 = add nsw i64 %67, 1
  %69 = icmp ugt i64 %68, 2305843009213693951
  %70 = inttoptr i64 %65 to %class.scoped_refptr.34*
  br i1 %69, label %71, label %73

71:                                               ; preds = %55
  %72 = bitcast i8* %26 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %72) #16
  unreachable

73:                                               ; preds = %55
  %74 = bitcast i8* %41 to i64*
  %75 = sub i64 %45, %65
  %76 = ashr exact i64 %75, 3
  %77 = icmp ult i64 %76, 1152921504606846975
  br i1 %77, label %80, label %78

78:                                               ; preds = %73
  store %class.scoped_refptr.34* null, %class.scoped_refptr.34** %61, align 8
  %79 = bitcast %"class.std::__1::allocator.111"** %62 to i8**
  store i8* %41, i8** %79, align 8
  br label %89

80:                                               ; preds = %73
  %81 = ashr exact i64 %75, 2
  %82 = icmp ult i64 %81, %68
  %83 = select i1 %82, i64 %68, i64 %81
  store %class.scoped_refptr.34* null, %class.scoped_refptr.34** %61, align 8
  %84 = bitcast %"class.std::__1::allocator.111"** %62 to i8**
  store i8* %41, i8** %84, align 8
  %85 = icmp eq i64 %83, 0
  br i1 %85, label %94, label %86

86:                                               ; preds = %80
  %87 = icmp ugt i64 %83, 2305843009213693951
  br i1 %87, label %88, label %89

88:                                               ; preds = %86
  tail call void @abort() #16
  unreachable

89:                                               ; preds = %86, %78
  %90 = phi i64 [ 2305843009213693951, %78 ], [ %83, %86 ]
  %91 = shl i64 %90, 3
  %92 = tail call i8* @_Znwm(i64 %91) #15
  %93 = bitcast i8* %92 to %class.scoped_refptr.34*
  br label %94

94:                                               ; preds = %89, %80
  %95 = phi i64 [ %90, %89 ], [ 0, %80 ]
  %96 = phi %class.scoped_refptr.34* [ %93, %89 ], [ null, %80 ]
  store %class.scoped_refptr.34* %96, %class.scoped_refptr.34** %58, align 8
  %97 = getelementptr inbounds %class.scoped_refptr.34, %class.scoped_refptr.34* %96, i64 %67
  store %class.scoped_refptr.34* %97, %class.scoped_refptr.34** %60, align 8
  store %class.scoped_refptr.34* %97, %class.scoped_refptr.34** %59, align 8
  %98 = getelementptr inbounds %class.scoped_refptr.34, %class.scoped_refptr.34* %96, i64 %95
  store %class.scoped_refptr.34* %98, %class.scoped_refptr.34** %61, align 8
  %99 = getelementptr inbounds %class.scoped_refptr.34, %class.scoped_refptr.34* %97, i64 0, i32 0
  store %"class.net::(anonymous namespace)::Executor"* %15, %"class.net::(anonymous namespace)::Executor"** %99, align 8
  %100 = ptrtoint %class.scoped_refptr.34* %98 to i64
  br i1 %16, label %107, label %101

101:                                              ; preds = %94
  %102 = getelementptr inbounds %"class.net::(anonymous namespace)::Executor", %"class.net::(anonymous namespace)::Executor"* %15, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %103 = atomicrmw add i32* %102, i32 1 monotonic
  %104 = bitcast i8* %26 to %class.scoped_refptr.34**
  %105 = load %class.scoped_refptr.34*, %class.scoped_refptr.34** %104, align 8
  %106 = load %class.scoped_refptr.34*, %class.scoped_refptr.34** %39, align 8
  br label %107

107:                                              ; preds = %101, %94
  %108 = phi %class.scoped_refptr.34* [ %106, %101 ], [ %40, %94 ]
  %109 = phi %class.scoped_refptr.34* [ %105, %101 ], [ %70, %94 ]
  %110 = ptrtoint %class.scoped_refptr.34* %109 to i64
  %111 = getelementptr inbounds %class.scoped_refptr.34, %class.scoped_refptr.34* %97, i64 1
  store %class.scoped_refptr.34* %111, %class.scoped_refptr.34** %60, align 8
  %112 = icmp eq %class.scoped_refptr.34* %108, %109
  br i1 %112, label %140, label %113

113:                                              ; preds = %107
  %114 = getelementptr %class.scoped_refptr.34, %class.scoped_refptr.34* %108, i64 -1, i32 0
  %115 = ptrtoint %"class.net::(anonymous namespace)::Executor"** %114 to i64
  %116 = sub i64 %115, %110
  %117 = lshr i64 %116, 3
  %118 = add nuw nsw i64 %117, 1
  %119 = and i64 %118, 3
  %120 = icmp eq i64 %119, 0
  br i1 %120, label %135, label %121

121:                                              ; preds = %113, %121
  %122 = phi %class.scoped_refptr.34* [ %132, %121 ], [ %97, %113 ]
  %123 = phi %class.scoped_refptr.34* [ %126, %121 ], [ %108, %113 ]
  %124 = phi i64 [ %133, %121 ], [ %119, %113 ]
  %125 = getelementptr inbounds %class.scoped_refptr.34, %class.scoped_refptr.34* %122, i64 -1
  %126 = getelementptr inbounds %class.scoped_refptr.34, %class.scoped_refptr.34* %123, i64 -1
  %127 = getelementptr inbounds %class.scoped_refptr.34, %class.scoped_refptr.34* %126, i64 0, i32 0
  %128 = bitcast %class.scoped_refptr.34* %126 to i64*
  %129 = load i64, i64* %128, align 8
  %130 = bitcast %class.scoped_refptr.34* %125 to i64*
  store i64 %129, i64* %130, align 8
  store %"class.net::(anonymous namespace)::Executor"* null, %"class.net::(anonymous namespace)::Executor"** %127, align 8
  %131 = load %class.scoped_refptr.34*, %class.scoped_refptr.34** %59, align 8
  %132 = getelementptr inbounds %class.scoped_refptr.34, %class.scoped_refptr.34* %131, i64 -1
  store %class.scoped_refptr.34* %132, %class.scoped_refptr.34** %59, align 8
  %133 = add i64 %124, -1
  %134 = icmp eq i64 %133, 0
  br i1 %134, label %135, label %121, !llvm.loop !10

135:                                              ; preds = %121, %113
  %136 = phi %class.scoped_refptr.34* [ undef, %113 ], [ %132, %121 ]
  %137 = phi %class.scoped_refptr.34* [ %97, %113 ], [ %132, %121 ]
  %138 = phi %class.scoped_refptr.34* [ %108, %113 ], [ %126, %121 ]
  %139 = icmp ult i64 %116, 24
  br i1 %139, label %180, label %144

140:                                              ; preds = %107
  %141 = ptrtoint %class.scoped_refptr.34* %111 to i64
  %142 = bitcast %class.scoped_refptr.34** %60 to i64*
  %143 = bitcast %class.scoped_refptr.34** %61 to i64*
  br label %188

144:                                              ; preds = %135, %144
  %145 = phi %class.scoped_refptr.34* [ %178, %144 ], [ %137, %135 ]
  %146 = phi %class.scoped_refptr.34* [ %172, %144 ], [ %138, %135 ]
  %147 = getelementptr inbounds %class.scoped_refptr.34, %class.scoped_refptr.34* %145, i64 -1
  %148 = getelementptr inbounds %class.scoped_refptr.34, %class.scoped_refptr.34* %146, i64 -1
  %149 = getelementptr inbounds %class.scoped_refptr.34, %class.scoped_refptr.34* %148, i64 0, i32 0
  %150 = bitcast %class.scoped_refptr.34* %148 to i64*
  %151 = load i64, i64* %150, align 8
  %152 = bitcast %class.scoped_refptr.34* %147 to i64*
  store i64 %151, i64* %152, align 8
  store %"class.net::(anonymous namespace)::Executor"* null, %"class.net::(anonymous namespace)::Executor"** %149, align 8
  %153 = load %class.scoped_refptr.34*, %class.scoped_refptr.34** %59, align 8
  %154 = getelementptr inbounds %class.scoped_refptr.34, %class.scoped_refptr.34* %153, i64 -1
  store %class.scoped_refptr.34* %154, %class.scoped_refptr.34** %59, align 8
  %155 = getelementptr inbounds %class.scoped_refptr.34, %class.scoped_refptr.34* %153, i64 -2
  %156 = getelementptr inbounds %class.scoped_refptr.34, %class.scoped_refptr.34* %146, i64 -2
  %157 = getelementptr inbounds %class.scoped_refptr.34, %class.scoped_refptr.34* %156, i64 0, i32 0
  %158 = bitcast %class.scoped_refptr.34* %156 to i64*
  %159 = load i64, i64* %158, align 8
  %160 = bitcast %class.scoped_refptr.34* %155 to i64*
  store i64 %159, i64* %160, align 8
  store %"class.net::(anonymous namespace)::Executor"* null, %"class.net::(anonymous namespace)::Executor"** %157, align 8
  %161 = load %class.scoped_refptr.34*, %class.scoped_refptr.34** %59, align 8
  %162 = getelementptr inbounds %class.scoped_refptr.34, %class.scoped_refptr.34* %161, i64 -1
  store %class.scoped_refptr.34* %162, %class.scoped_refptr.34** %59, align 8
  %163 = getelementptr inbounds %class.scoped_refptr.34, %class.scoped_refptr.34* %161, i64 -2
  %164 = getelementptr inbounds %class.scoped_refptr.34, %class.scoped_refptr.34* %146, i64 -3
  %165 = getelementptr inbounds %class.scoped_refptr.34, %class.scoped_refptr.34* %164, i64 0, i32 0
  %166 = bitcast %class.scoped_refptr.34* %164 to i64*
  %167 = load i64, i64* %166, align 8
  %168 = bitcast %class.scoped_refptr.34* %163 to i64*
  store i64 %167, i64* %168, align 8
  store %"class.net::(anonymous namespace)::Executor"* null, %"class.net::(anonymous namespace)::Executor"** %165, align 8
  %169 = load %class.scoped_refptr.34*, %class.scoped_refptr.34** %59, align 8
  %170 = getelementptr inbounds %class.scoped_refptr.34, %class.scoped_refptr.34* %169, i64 -1
  store %class.scoped_refptr.34* %170, %class.scoped_refptr.34** %59, align 8
  %171 = getelementptr inbounds %class.scoped_refptr.34, %class.scoped_refptr.34* %169, i64 -2
  %172 = getelementptr inbounds %class.scoped_refptr.34, %class.scoped_refptr.34* %146, i64 -4
  %173 = getelementptr inbounds %class.scoped_refptr.34, %class.scoped_refptr.34* %172, i64 0, i32 0
  %174 = bitcast %class.scoped_refptr.34* %172 to i64*
  %175 = load i64, i64* %174, align 8
  %176 = bitcast %class.scoped_refptr.34* %171 to i64*
  store i64 %175, i64* %176, align 8
  store %"class.net::(anonymous namespace)::Executor"* null, %"class.net::(anonymous namespace)::Executor"** %173, align 8
  %177 = load %class.scoped_refptr.34*, %class.scoped_refptr.34** %59, align 8
  %178 = getelementptr inbounds %class.scoped_refptr.34, %class.scoped_refptr.34* %177, i64 -1
  store %class.scoped_refptr.34* %178, %class.scoped_refptr.34** %59, align 8
  %179 = icmp eq %class.scoped_refptr.34* %172, %109
  br i1 %179, label %180, label %144

180:                                              ; preds = %144, %135
  %181 = phi %class.scoped_refptr.34* [ %136, %135 ], [ %178, %144 ]
  %182 = load i64, i64* %64, align 8
  %183 = load i64, i64* %63, align 8
  %184 = bitcast %class.scoped_refptr.34** %60 to i64*
  %185 = load i64, i64* %184, align 8
  %186 = bitcast %class.scoped_refptr.34** %61 to i64*
  %187 = load i64, i64* %186, align 8
  br label %188

188:                                              ; preds = %180, %140
  %189 = phi i64* [ %143, %140 ], [ %186, %180 ]
  %190 = phi i64* [ %142, %140 ], [ %184, %180 ]
  %191 = phi i64 [ %100, %140 ], [ %187, %180 ]
  %192 = phi i64 [ %141, %140 ], [ %185, %180 ]
  %193 = phi i64 [ %110, %140 ], [ %183, %180 ]
  %194 = phi %class.scoped_refptr.34* [ %97, %140 ], [ %181, %180 ]
  %195 = phi i64 [ %110, %140 ], [ %182, %180 ]
  %196 = ptrtoint %class.scoped_refptr.34* %194 to i64
  %197 = bitcast %class.scoped_refptr.34** %59 to i64*
  store i64 %196, i64* %64, align 8
  store i64 %195, i64* %197, align 8
  store i64 %192, i64* %63, align 8
  store i64 %193, i64* %190, align 8
  %198 = load i64, i64* %74, align 8
  store i64 %191, i64* %74, align 8
  store i64 %198, i64* %189, align 8
  %199 = bitcast %"struct.std::__1::__split_buffer"* %3 to i64*
  store i64 %195, i64* %199, align 8
  call fastcc void @_ZNSt3__114__split_bufferI13scoped_refptrIN3net12_GLOBAL__N_18ExecutorEERNS_9allocatorIS5_EEED2Ev(%"struct.std::__1::__split_buffer"* nonnull %3) #14
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %57) #14
  br label %200

200:                                              ; preds = %188, %51
  br i1 %16, label %245, label %201

201:                                              ; preds = %200
  %202 = getelementptr inbounds %"class.net::(anonymous namespace)::Executor", %"class.net::(anonymous namespace)::Executor"* %15, i64 0, i32 0
  %203 = getelementptr inbounds %"class.net::(anonymous namespace)::Executor", %"class.net::(anonymous namespace)::Executor"* %15, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %204 = atomicrmw sub i32* %203, i32 1 acq_rel
  %205 = icmp eq i32 %204, 1
  br i1 %205, label %206, label %245

206:                                              ; preds = %201
  %207 = getelementptr inbounds %"class.base::RefCountedThreadSafe.35", %"class.base::RefCountedThreadSafe.35"* %202, i64 10
  %208 = bitcast %"class.base::RefCountedThreadSafe.35"* %207 to %"class.base::Thread"**
  %209 = load %"class.base::Thread"*, %"class.base::Thread"** %208, align 8
  store %"class.base::Thread"* null, %"class.base::Thread"** %208, align 8
  %210 = icmp eq %"class.base::Thread"* %209, null
  br i1 %210, label %216, label %211

211:                                              ; preds = %206
  %212 = bitcast %"class.base::Thread"* %209 to void (%"class.base::Thread"*)***
  %213 = load void (%"class.base::Thread"*)**, void (%"class.base::Thread"*)*** %212, align 8
  %214 = getelementptr inbounds void (%"class.base::Thread"*)*, void (%"class.base::Thread"*)** %213, i64 3
  %215 = load void (%"class.base::Thread"*)*, void (%"class.base::Thread"*)** %214, align 8
  tail call void %215(%"class.base::Thread"* nonnull %209) #14
  br label %216

216:                                              ; preds = %211, %206
  %217 = getelementptr inbounds %"class.base::RefCountedThreadSafe.35", %"class.base::RefCountedThreadSafe.35"* %202, i64 8
  %218 = bitcast %"class.base::RefCountedThreadSafe.35"* %217 to %"class.net::ProxyResolver"**
  %219 = load %"class.net::ProxyResolver"*, %"class.net::ProxyResolver"** %218, align 8
  store %"class.net::ProxyResolver"* null, %"class.net::ProxyResolver"** %218, align 8
  %220 = icmp eq %"class.net::ProxyResolver"* %219, null
  br i1 %220, label %226, label %221

221:                                              ; preds = %216
  %222 = bitcast %"class.net::ProxyResolver"* %219 to void (%"class.net::ProxyResolver"*)***
  %223 = load void (%"class.net::ProxyResolver"*)**, void (%"class.net::ProxyResolver"*)*** %222, align 8
  %224 = getelementptr inbounds void (%"class.net::ProxyResolver"*)*, void (%"class.net::ProxyResolver"*)** %223, i64 1
  %225 = load void (%"class.net::ProxyResolver"*)*, void (%"class.net::ProxyResolver"*)** %224, align 8
  tail call void %225(%"class.net::ProxyResolver"* nonnull %219) #14
  br label %226

226:                                              ; preds = %221, %216
  %227 = getelementptr inbounds %"class.base::RefCountedThreadSafe.35", %"class.base::RefCountedThreadSafe.35"* %202, i64 6
  %228 = bitcast %"class.base::RefCountedThreadSafe.35"* %227 to %"class.net::(anonymous namespace)::Job"**
  %229 = load %"class.net::(anonymous namespace)::Job"*, %"class.net::(anonymous namespace)::Job"** %228, align 8
  %230 = icmp eq %"class.net::(anonymous namespace)::Job"* %229, null
  br i1 %230, label %243, label %231

231:                                              ; preds = %226
  %232 = getelementptr inbounds %"class.net::(anonymous namespace)::Job", %"class.net::(anonymous namespace)::Job"* %229, i64 0, i32 1
  %233 = getelementptr inbounds %"class.base::RefCountedThreadSafe.37", %"class.base::RefCountedThreadSafe.37"* %232, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %234 = atomicrmw sub i32* %233, i32 1 acq_rel
  %235 = icmp eq i32 %234, 1
  br i1 %235, label %236, label %243

236:                                              ; preds = %231
  %237 = getelementptr inbounds %"class.base::RefCountedThreadSafe.37", %"class.base::RefCountedThreadSafe.37"* %232, i64 -2
  %238 = bitcast %"class.base::RefCountedThreadSafe.37"* %237 to %"class.net::(anonymous namespace)::Job"*
  %239 = bitcast %"class.base::RefCountedThreadSafe.37"* %237 to void (%"class.net::(anonymous namespace)::Job"*)***
  %240 = load void (%"class.net::(anonymous namespace)::Job"*)**, void (%"class.net::(anonymous namespace)::Job"*)*** %239, align 8
  %241 = getelementptr inbounds void (%"class.net::(anonymous namespace)::Job"*)*, void (%"class.net::(anonymous namespace)::Job"*)** %240, i64 4
  %242 = load void (%"class.net::(anonymous namespace)::Job"*)*, void (%"class.net::(anonymous namespace)::Job"*)** %241, align 8
  tail call void %242(%"class.net::(anonymous namespace)::Job"* nonnull %238) #14
  br label %243

243:                                              ; preds = %236, %231, %226
  %244 = bitcast %"class.net::(anonymous namespace)::Executor"* %15 to i8*
  tail call void @_ZdlPv(i8* %244) #15
  br label %245

245:                                              ; preds = %200, %201, %243
  %246 = getelementptr inbounds %"class.net::MultiThreadedProxyResolverFactory::Job", %"class.net::MultiThreadedProxyResolverFactory::Job"* %0, i64 0, i32 3
  %247 = load %"class.std::__1::unique_ptr"*, %"class.std::__1::unique_ptr"** %246, align 8
  %248 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %247, i64 0, i32 0, i32 0, i32 0
  %249 = load %"class.net::ProxyResolver"*, %"class.net::ProxyResolver"** %248, align 8
  %250 = bitcast %"class.std::__1::unique_ptr"* %247 to i8**
  store i8* %10, i8** %250, align 8
  %251 = icmp eq %"class.net::ProxyResolver"* %249, null
  br i1 %251, label %260, label %252

252:                                              ; preds = %245
  %253 = bitcast %"class.net::ProxyResolver"* %249 to void (%"class.net::ProxyResolver"*)***
  %254 = load void (%"class.net::ProxyResolver"*)**, void (%"class.net::ProxyResolver"*)*** %253, align 8
  %255 = getelementptr inbounds void (%"class.net::ProxyResolver"*)*, void (%"class.net::ProxyResolver"*)** %254, i64 1
  %256 = load void (%"class.net::ProxyResolver"*)*, void (%"class.net::ProxyResolver"*)** %255, align 8
  tail call void %256(%"class.net::ProxyResolver"* nonnull %249) #14
  br label %260

257:                                              ; preds = %2
  %258 = getelementptr inbounds %"class.net::MultiThreadedProxyResolverFactory::Job", %"class.net::MultiThreadedProxyResolverFactory::Job"* %0, i64 0, i32 7, i32 0
  %259 = load %"class.net::(anonymous namespace)::Executor"*, %"class.net::(anonymous namespace)::Executor"** %258, align 8
  tail call fastcc void @_ZN3net12_GLOBAL__N_18Executor7DestroyEv(%"class.net::(anonymous namespace)::Executor"* %259)
  br label %260

260:                                              ; preds = %245, %252, %257
  %261 = phi i32 [ -327, %257 ], [ 0, %252 ], [ 0, %245 ]
  %262 = getelementptr inbounds %"class.net::MultiThreadedProxyResolverFactory::Job", %"class.net::MultiThreadedProxyResolverFactory::Job"* %0, i64 0, i32 2
  %263 = load %"class.net::MultiThreadedProxyResolverFactory"*, %"class.net::MultiThreadedProxyResolverFactory"** %262, align 8
  %264 = getelementptr inbounds %"class.net::MultiThreadedProxyResolverFactory", %"class.net::MultiThreadedProxyResolverFactory"* %263, i64 0, i32 2, i32 0
  %265 = getelementptr inbounds %"class.net::MultiThreadedProxyResolverFactory", %"class.net::MultiThreadedProxyResolverFactory"* %263, i64 0, i32 2, i32 0, i32 1, i32 0, i32 0
  %266 = bitcast %"class.std::__1::__tree_end_node"* %265 to %"class.std::__1::__tree_node"**
  %267 = load %"class.std::__1::__tree_node"*, %"class.std::__1::__tree_node"** %266, align 8
  %268 = icmp eq %"class.std::__1::__tree_node"* %267, null
  %269 = bitcast %"class.std::__1::__tree_node"* %267 to %"class.std::__1::__tree_node_base"*
  br i1 %268, label %333, label %270

270:                                              ; preds = %260, %270
  %271 = phi %"class.std::__1::__tree_end_node"* [ %281, %270 ], [ %265, %260 ]
  %272 = phi %"class.std::__1::__tree_node"* [ %282, %270 ], [ %267, %260 ]
  %273 = getelementptr inbounds %"class.std::__1::__tree_node", %"class.std::__1::__tree_node"* %272, i64 0, i32 1
  %274 = load %"class.net::MultiThreadedProxyResolverFactory::Job"*, %"class.net::MultiThreadedProxyResolverFactory::Job"** %273, align 8
  %275 = icmp ult %"class.net::MultiThreadedProxyResolverFactory::Job"* %274, %0
  %276 = getelementptr inbounds %"class.std::__1::__tree_node", %"class.std::__1::__tree_node"* %272, i64 0, i32 0, i32 1
  %277 = bitcast %"class.std::__1::__tree_node_base"** %276 to %"class.std::__1::__tree_node"**
  %278 = getelementptr inbounds %"class.std::__1::__tree_node", %"class.std::__1::__tree_node"* %272, i64 0, i32 0, i32 0
  %279 = bitcast %"class.std::__1::__tree_node"* %272 to %"class.std::__1::__tree_node"**
  %280 = select i1 %275, %"class.std::__1::__tree_node"** %277, %"class.std::__1::__tree_node"** %279
  %281 = select i1 %275, %"class.std::__1::__tree_end_node"* %271, %"class.std::__1::__tree_end_node"* %278
  %282 = load %"class.std::__1::__tree_node"*, %"class.std::__1::__tree_node"** %280, align 8
  %283 = icmp eq %"class.std::__1::__tree_node"* %282, null
  br i1 %283, label %284, label %270

284:                                              ; preds = %270
  %285 = icmp eq %"class.std::__1::__tree_end_node"* %281, %265
  br i1 %285, label %333, label %286

286:                                              ; preds = %284
  %287 = getelementptr inbounds %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_end_node"* %281, i64 4
  %288 = bitcast %"class.std::__1::__tree_end_node"* %287 to %"class.net::MultiThreadedProxyResolverFactory::Job"**
  %289 = load %"class.net::MultiThreadedProxyResolverFactory::Job"*, %"class.net::MultiThreadedProxyResolverFactory::Job"** %288, align 8
  %290 = icmp ugt %"class.net::MultiThreadedProxyResolverFactory::Job"* %289, %0
  br i1 %290, label %333, label %291

291:                                              ; preds = %286
  %292 = getelementptr inbounds %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_end_node"* %281, i64 1, i32 0
  %293 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %292, align 8
  %294 = icmp eq %"class.std::__1::__tree_node_base"* %293, null
  br i1 %294, label %295, label %303

295:                                              ; preds = %291
  %296 = bitcast %"class.std::__1::__tree_end_node"* %281 to %"class.std::__1::__tree_node_base"*
  %297 = getelementptr inbounds %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_end_node"* %281, i64 2
  %298 = bitcast %"class.std::__1::__tree_end_node"* %297 to %"class.std::__1::__tree_end_node"**
  %299 = load %"class.std::__1::__tree_end_node"*, %"class.std::__1::__tree_end_node"** %298, align 8
  %300 = getelementptr inbounds %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_end_node"* %299, i64 0, i32 0
  %301 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %300, align 8
  %302 = icmp eq %"class.std::__1::__tree_node_base"* %301, %296
  br i1 %302, label %319, label %310

303:                                              ; preds = %291, %303
  %304 = phi %"class.std::__1::__tree_node_base"* [ %306, %303 ], [ %293, %291 ]
  %305 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %304, i64 0, i32 0, i32 0
  %306 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %305, align 8
  %307 = icmp eq %"class.std::__1::__tree_node_base"* %306, null
  br i1 %307, label %308, label %303

308:                                              ; preds = %303
  %309 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %304, i64 0, i32 0
  br label %319

310:                                              ; preds = %295, %310
  %311 = phi %"class.std::__1::__tree_end_node"** [ %314, %310 ], [ %298, %295 ]
  %312 = bitcast %"class.std::__1::__tree_end_node"** %311 to %"class.std::__1::__tree_node_base"**
  %313 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %312, align 8
  %314 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %313, i64 0, i32 2
  %315 = load %"class.std::__1::__tree_end_node"*, %"class.std::__1::__tree_end_node"** %314, align 8
  %316 = getelementptr inbounds %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_end_node"* %315, i64 0, i32 0
  %317 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %316, align 8
  %318 = icmp eq %"class.std::__1::__tree_node_base"* %317, %313
  br i1 %318, label %319, label %310

319:                                              ; preds = %310, %308, %295
  %320 = phi %"class.std::__1::__tree_end_node"* [ %309, %308 ], [ %299, %295 ], [ %315, %310 ]
  %321 = getelementptr inbounds %"class.std::__1::__tree", %"class.std::__1::__tree"* %264, i64 0, i32 0
  %322 = load %"class.std::__1::__tree_end_node"*, %"class.std::__1::__tree_end_node"** %321, align 8
  %323 = icmp eq %"class.std::__1::__tree_end_node"* %322, %281
  br i1 %323, label %324, label %327

324:                                              ; preds = %319
  %325 = ptrtoint %"class.std::__1::__tree_end_node"* %320 to i64
  %326 = bitcast %"class.std::__1::__tree"* %264 to i64*
  store i64 %325, i64* %326, align 8
  br label %327

327:                                              ; preds = %324, %319
  %328 = getelementptr inbounds %"class.net::MultiThreadedProxyResolverFactory", %"class.net::MultiThreadedProxyResolverFactory"* %263, i64 0, i32 2, i32 0, i32 2, i32 0, i32 0
  %329 = load i64, i64* %328, align 8
  %330 = add i64 %329, -1
  store i64 %330, i64* %328, align 8
  %331 = bitcast %"class.std::__1::__tree_end_node"* %281 to %"class.std::__1::__tree_node_base"*
  tail call void @_ZNSt3__113__tree_removeIPNS_16__tree_node_baseIPvEEEEvT_S5_(%"class.std::__1::__tree_node_base"* nonnull %269, %"class.std::__1::__tree_node_base"* %331) #14
  %332 = bitcast %"class.std::__1::__tree_end_node"* %281 to i8*
  tail call void @_ZdlPv(i8* %332) #15
  br label %333

333:                                              ; preds = %260, %284, %286, %327
  store %"class.net::MultiThreadedProxyResolverFactory"* null, %"class.net::MultiThreadedProxyResolverFactory"** %262, align 8
  %334 = getelementptr inbounds %"class.net::MultiThreadedProxyResolverFactory::Job", %"class.net::MultiThreadedProxyResolverFactory::Job"* %0, i64 0, i32 8
  %335 = bitcast %"class.base::OnceCallback"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %335) #14
  %336 = getelementptr inbounds %"class.base::OnceCallback", %"class.base::OnceCallback"* %334, i64 0, i32 0, i32 0, i32 0
  %337 = bitcast %"class.base::OnceCallback"* %334 to i64*
  %338 = load i64, i64* %337, align 8
  %339 = bitcast %"class.base::OnceCallback"* %4 to i64*
  store i64 %338, i64* %339, align 8
  store %"class.base::internal::BindStateBase"* null, %"class.base::internal::BindStateBase"** %336, align 8
  %340 = getelementptr inbounds %"class.base::OnceCallback", %"class.base::OnceCallback"* %4, i64 0, i32 0
  %341 = inttoptr i64 %338 to %"class.base::internal::BindStateBase"*
  %342 = getelementptr inbounds %"class.base::internal::BindStateBase", %"class.base::internal::BindStateBase"* %341, i64 0, i32 1
  %343 = bitcast void ()** %342 to void (%"class.base::internal::BindStateBase"*, i32)**
  %344 = load void (%"class.base::internal::BindStateBase"*, i32)*, void (%"class.base::internal::BindStateBase"*, i32)** %343, align 8
  tail call void %344(%"class.base::internal::BindStateBase"* %341, i32 %261) #14
  call void @_ZN4base8internal12CallbackBaseD2Ev(%"class.base::internal::CallbackBase"* nonnull %340) #14
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %335) #14
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZThn8_N3net33MultiThreadedProxyResolverFactory3Job15OnExecutorReadyEPNS_12_GLOBAL__N_18ExecutorE(%"class.net::MultiThreadedProxyResolverFactory::Job"*, %"class.net::(anonymous namespace)::Executor"* nocapture readonly) unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.net::MultiThreadedProxyResolverFactory::Job", %"class.net::MultiThreadedProxyResolverFactory::Job"* %0, i64 -1, i32 8
  %4 = bitcast %"class.base::OnceCallback"* %3 to %"class.net::MultiThreadedProxyResolverFactory::Job"*
  tail call void @_ZN3net33MultiThreadedProxyResolverFactory3Job15OnExecutorReadyEPNS_12_GLOBAL__N_18ExecutorE(%"class.net::MultiThreadedProxyResolverFactory::Job"* %4, %"class.net::(anonymous namespace)::Executor"* %1)
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZThn8_N3net33MultiThreadedProxyResolverFactory3JobD1Ev(%"class.net::MultiThreadedProxyResolverFactory::Job"*) unnamed_addr #0 comdat align 2 {
  %2 = getelementptr inbounds %"class.net::MultiThreadedProxyResolverFactory::Job", %"class.net::MultiThreadedProxyResolverFactory::Job"* %0, i64 -1, i32 8
  %3 = bitcast %"class.base::OnceCallback"* %2 to %"class.net::MultiThreadedProxyResolverFactory::Job"*
  tail call void @_ZN3net33MultiThreadedProxyResolverFactory3JobD2Ev(%"class.net::MultiThreadedProxyResolverFactory::Job"* %3) #14
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZThn8_N3net33MultiThreadedProxyResolverFactory3JobD0Ev(%"class.net::MultiThreadedProxyResolverFactory::Job"*) unnamed_addr #0 comdat align 2 {
  %2 = getelementptr inbounds %"class.net::MultiThreadedProxyResolverFactory::Job", %"class.net::MultiThreadedProxyResolverFactory::Job"* %0, i64 -1, i32 8
  %3 = bitcast %"class.base::OnceCallback"* %2 to %"class.net::MultiThreadedProxyResolverFactory::Job"*
  tail call void @_ZN3net33MultiThreadedProxyResolverFactory3JobD2Ev(%"class.net::MultiThreadedProxyResolverFactory::Job"* %3) #14
  %4 = bitcast %"class.base::OnceCallback"* %2 to i8*
  tail call void @_ZdlPv(i8* %4) #15
  ret void
}

declare void @_ZN4base12StringPrintfEPKcz(%"class.std::__1::basic_string"* sret, i8*, ...) local_unnamed_addr #1

declare zeroext i1 @_ZN4base6Thread5StartEv(%"class.base::Thread"*) local_unnamed_addr #1

declare void @_ZN7logging10CheckError5CheckEPKciS2_(%"class.logging::CheckError"* sret, i8*, i32, i8*) local_unnamed_addr #1

declare dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"*) local_unnamed_addr #1

; Function Attrs: nounwind
declare void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"*) unnamed_addr #3

declare void @_ZN4base6ThreadC1ERKNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEE(%"class.base::Thread"*, %"class.std::__1::basic_string"* dereferenceable(24)) unnamed_addr #1

declare zeroext i1 @_ZN4base10TaskRunner8PostTaskERKNS_8LocationENS_12OnceCallbackIFvvEEE(%"class.base::TaskRunner"*, %"class.base::Location"* dereferenceable(32), %"class.base::OnceCallback.91"*) local_unnamed_addr #1

declare dereferenceable(8) %class.scoped_refptr.65* @_ZN4base22ThreadTaskRunnerHandle3GetEv() local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN4base8internal7InvokerINS0_9BindStateIMN3net12_GLOBAL__N_13JobEFv13scoped_refptrINS_22SingleThreadTaskRunnerEEEJS6_IS5_ES8_EEEFvvEE7RunOnceEPNS0_13BindStateBaseE(%"class.base::internal::BindStateBase"* nocapture) #0 align 2 {
  %2 = getelementptr inbounds %"class.base::internal::BindStateBase", %"class.base::internal::BindStateBase"* %0, i64 1
  %3 = getelementptr inbounds %"class.base::internal::BindStateBase", %"class.base::internal::BindStateBase"* %0, i64 1, i32 2
  %4 = bitcast %"class.base::internal::BindStateBase"* %2 to i64*
  %5 = load i64, i64* %4, align 8
  %6 = getelementptr inbounds %"class.base::internal::BindStateBase", %"class.base::internal::BindStateBase"* %0, i64 1, i32 1
  %7 = bitcast void ()** %6 to i64*
  %8 = load i64, i64* %7, align 8
  %9 = bitcast void (%"class.base::internal::BindStateBase"*)** %3 to i8**
  %10 = load i8*, i8** %9, align 8
  %11 = getelementptr inbounds i8, i8* %10, i64 %8
  %12 = bitcast i8* %11 to %"class.net::(anonymous namespace)::Job"*
  %13 = and i64 %5, 1
  %14 = icmp eq i64 %13, 0
  br i1 %14, label %22, label %15

15:                                               ; preds = %1
  %16 = bitcast i8* %11 to i8**
  %17 = load i8*, i8** %16, align 8
  %18 = add i64 %5, -1
  %19 = getelementptr i8, i8* %17, i64 %18
  %20 = bitcast i8* %19 to void (%"class.net::(anonymous namespace)::Job"*, %"class.base::SingleThreadTaskRunner"*)**
  %21 = load void (%"class.net::(anonymous namespace)::Job"*, %"class.base::SingleThreadTaskRunner"*)*, void (%"class.net::(anonymous namespace)::Job"*, %"class.base::SingleThreadTaskRunner"*)** %20, align 8
  br label %24

22:                                               ; preds = %1
  %23 = inttoptr i64 %5 to void (%"class.net::(anonymous namespace)::Job"*, %"class.base::SingleThreadTaskRunner"*)*
  br label %24

24:                                               ; preds = %15, %22
  %25 = phi void (%"class.net::(anonymous namespace)::Job"*, %"class.base::SingleThreadTaskRunner"*)* [ %21, %15 ], [ %23, %22 ]
  %26 = getelementptr inbounds void (%"class.base::internal::BindStateBase"*)*, void (%"class.base::internal::BindStateBase"*)** %3, i64 1
  %27 = bitcast void (%"class.base::internal::BindStateBase"*)** %26 to %"class.base::SingleThreadTaskRunner"**
  %28 = load %"class.base::SingleThreadTaskRunner"*, %"class.base::SingleThreadTaskRunner"** %27, align 8
  store %"class.base::SingleThreadTaskRunner"* null, %"class.base::SingleThreadTaskRunner"** %27, align 8
  tail call void %25(%"class.net::(anonymous namespace)::Job"* %12, %"class.base::SingleThreadTaskRunner"* %28) #14
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN4base8internal9BindStateIMN3net12_GLOBAL__N_13JobEFv13scoped_refptrINS_22SingleThreadTaskRunnerEEEJS5_IS4_ES7_EE7DestroyEPKNS0_13BindStateBaseE(%"class.base::internal::BindStateBase"*) #0 align 2 {
  %2 = icmp eq %"class.base::internal::BindStateBase"* %0, null
  br i1 %2, label %35, label %3

3:                                                ; preds = %1
  %4 = getelementptr inbounds %"class.base::internal::BindStateBase", %"class.base::internal::BindStateBase"* %0, i64 1, i32 3
  %5 = bitcast i1 (%"class.base::internal::BindStateBase"*, i32)** %4 to %"class.base::SingleThreadTaskRunner"**
  %6 = load %"class.base::SingleThreadTaskRunner"*, %"class.base::SingleThreadTaskRunner"** %5, align 8
  %7 = icmp eq %"class.base::SingleThreadTaskRunner"* %6, null
  br i1 %7, label %16, label %8

8:                                                ; preds = %3
  %9 = getelementptr inbounds %"class.base::SingleThreadTaskRunner", %"class.base::SingleThreadTaskRunner"* %6, i64 0, i32 0, i32 0, i32 1
  %10 = getelementptr inbounds %"class.base::RefCountedThreadSafe.66", %"class.base::RefCountedThreadSafe.66"* %9, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %11 = atomicrmw sub i32* %10, i32 1 acq_rel
  %12 = icmp eq i32 %11, 1
  br i1 %12, label %13, label %16

13:                                               ; preds = %8
  %14 = getelementptr inbounds %"class.base::RefCountedThreadSafe.66", %"class.base::RefCountedThreadSafe.66"* %9, i64 -2
  %15 = bitcast %"class.base::RefCountedThreadSafe.66"* %14 to %"class.base::TaskRunner"*
  tail call void @_ZN4base16TaskRunnerTraits8DestructEPKNS_10TaskRunnerE(%"class.base::TaskRunner"* %15) #14
  br label %16

16:                                               ; preds = %13, %8, %3
  %17 = getelementptr inbounds %"class.base::internal::BindStateBase", %"class.base::internal::BindStateBase"* %0, i64 1, i32 2
  %18 = bitcast void (%"class.base::internal::BindStateBase"*)** %17 to %"class.net::(anonymous namespace)::Job"**
  %19 = load %"class.net::(anonymous namespace)::Job"*, %"class.net::(anonymous namespace)::Job"** %18, align 8
  %20 = icmp eq %"class.net::(anonymous namespace)::Job"* %19, null
  br i1 %20, label %33, label %21

21:                                               ; preds = %16
  %22 = getelementptr inbounds %"class.net::(anonymous namespace)::Job", %"class.net::(anonymous namespace)::Job"* %19, i64 0, i32 1
  %23 = getelementptr inbounds %"class.base::RefCountedThreadSafe.37", %"class.base::RefCountedThreadSafe.37"* %22, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %24 = atomicrmw sub i32* %23, i32 1 acq_rel
  %25 = icmp eq i32 %24, 1
  br i1 %25, label %26, label %33

26:                                               ; preds = %21
  %27 = getelementptr inbounds %"class.base::RefCountedThreadSafe.37", %"class.base::RefCountedThreadSafe.37"* %22, i64 -2
  %28 = bitcast %"class.base::RefCountedThreadSafe.37"* %27 to %"class.net::(anonymous namespace)::Job"*
  %29 = bitcast %"class.base::RefCountedThreadSafe.37"* %27 to void (%"class.net::(anonymous namespace)::Job"*)***
  %30 = load void (%"class.net::(anonymous namespace)::Job"*)**, void (%"class.net::(anonymous namespace)::Job"*)*** %29, align 8
  %31 = getelementptr inbounds void (%"class.net::(anonymous namespace)::Job"*)*, void (%"class.net::(anonymous namespace)::Job"*)** %30, i64 4
  %32 = load void (%"class.net::(anonymous namespace)::Job"*)*, void (%"class.net::(anonymous namespace)::Job"*)** %31, align 8
  tail call void %32(%"class.net::(anonymous namespace)::Job"* nonnull %28) #14
  br label %33

33:                                               ; preds = %16, %21, %26
  %34 = bitcast %"class.base::internal::BindStateBase"* %0 to i8*
  tail call void @_ZdlPv(i8* %34) #15
  br label %35

35:                                               ; preds = %33, %1
  ret void
}

declare void @_ZN4base8internal13BindStateBaseC2EPFvvEPFvPKS1_E(%"class.base::internal::BindStateBase"*, void ()*, void (%"class.base::internal::BindStateBase"*)*) unnamed_addr #1

declare void @_ZN4base16TaskRunnerTraits8DestructEPKNS_10TaskRunnerE(%"class.base::TaskRunner"*) local_unnamed_addr #1

; Function Attrs: norecurse nounwind readnone ssp uwtable
define internal void @_ZN3net12_GLOBAL__N_13Job16WaitingForThreadEv(%"class.net::(anonymous namespace)::Job"* nocapture) unnamed_addr #8 align 2 {
  ret void
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define internal void @_ZN3net12_GLOBAL__N_13Job24FinishedWaitingForThreadEv(%"class.net::(anonymous namespace)::Job"* nocapture) unnamed_addr #8 align 2 {
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN3net12_GLOBAL__N_117CreateResolverJob3RunE13scoped_refptrIN4base22SingleThreadTaskRunnerEE(%"class.net::(anonymous namespace)::CreateResolverJob"*, %"class.base::SingleThreadTaskRunner"*) unnamed_addr #0 align 2 {
  %3 = alloca %"class.std::__1::unique_ptr.79", align 8
  %4 = alloca %"class.base::OnceCallback", align 8
  %5 = alloca %"class.base::Location", align 8
  %6 = alloca %"class.base::OnceCallback.91", align 8
  %7 = bitcast %"class.std::__1::unique_ptr.79"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %7) #14
  %8 = getelementptr inbounds %"class.std::__1::unique_ptr.79", %"class.std::__1::unique_ptr.79"* %3, i64 0, i32 0, i32 0, i32 0
  %9 = bitcast %"class.std::__1::unique_ptr.79"* %3 to i64*
  store i64 0, i64* %9, align 8
  %10 = getelementptr inbounds %"class.net::(anonymous namespace)::CreateResolverJob", %"class.net::(anonymous namespace)::CreateResolverJob"* %0, i64 0, i32 2
  %11 = load %"class.net::ProxyResolverFactory"*, %"class.net::ProxyResolverFactory"** %10, align 8
  %12 = getelementptr inbounds %"class.net::(anonymous namespace)::CreateResolverJob", %"class.net::(anonymous namespace)::CreateResolverJob"* %0, i64 0, i32 1
  %13 = getelementptr inbounds %"class.net::(anonymous namespace)::CreateResolverJob", %"class.net::(anonymous namespace)::CreateResolverJob"* %0, i64 0, i32 3
  %14 = getelementptr inbounds %"class.base::OnceCallback", %"class.base::OnceCallback"* %4, i64 0, i32 0, i32 0, i32 0
  store %"class.base::internal::BindStateBase"* null, %"class.base::internal::BindStateBase"** %14, align 8
  %15 = bitcast %"class.net::ProxyResolverFactory"* %11 to i32 (%"class.net::ProxyResolverFactory"*, %class.scoped_refptr*, %"class.std::__1::unique_ptr"*, %"class.base::OnceCallback"*, %"class.std::__1::unique_ptr.79"*)***
  %16 = load i32 (%"class.net::ProxyResolverFactory"*, %class.scoped_refptr*, %"class.std::__1::unique_ptr"*, %"class.base::OnceCallback"*, %"class.std::__1::unique_ptr.79"*)**, i32 (%"class.net::ProxyResolverFactory"*, %class.scoped_refptr*, %"class.std::__1::unique_ptr"*, %"class.base::OnceCallback"*, %"class.std::__1::unique_ptr.79"*)*** %15, align 8
  %17 = getelementptr inbounds i32 (%"class.net::ProxyResolverFactory"*, %class.scoped_refptr*, %"class.std::__1::unique_ptr"*, %"class.base::OnceCallback"*, %"class.std::__1::unique_ptr.79"*)*, i32 (%"class.net::ProxyResolverFactory"*, %class.scoped_refptr*, %"class.std::__1::unique_ptr"*, %"class.base::OnceCallback"*, %"class.std::__1::unique_ptr.79"*)** %16, i64 2
  %18 = load i32 (%"class.net::ProxyResolverFactory"*, %class.scoped_refptr*, %"class.std::__1::unique_ptr"*, %"class.base::OnceCallback"*, %"class.std::__1::unique_ptr.79"*)*, i32 (%"class.net::ProxyResolverFactory"*, %class.scoped_refptr*, %"class.std::__1::unique_ptr"*, %"class.base::OnceCallback"*, %"class.std::__1::unique_ptr.79"*)** %17, align 8
  %19 = call i32 %18(%"class.net::ProxyResolverFactory"* %11, %class.scoped_refptr* dereferenceable(8) %12, %"class.std::__1::unique_ptr"* %13, %"class.base::OnceCallback"* nonnull %4, %"class.std::__1::unique_ptr.79"* nonnull %3) #14
  %20 = getelementptr inbounds %"class.base::OnceCallback", %"class.base::OnceCallback"* %4, i64 0, i32 0
  call void @_ZN4base8internal12CallbackBaseD2Ev(%"class.base::internal::CallbackBase"* nonnull %20) #14
  %21 = bitcast %"class.base::SingleThreadTaskRunner"* %1 to %"class.base::TaskRunner"*
  %22 = bitcast %"class.base::Location"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %22) #14
  call void @_ZN4base8Location7CurrentEPKcS2_i(%"class.base::Location"* nonnull sret %5, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.5, i64 0, i64 0), i8* getelementptr inbounds ([60 x i8], [60 x i8]* @.str.1, i64 0, i64 0), i32 245) #14
  %23 = call i8* @_Znwm(i64 64) #15, !noalias !12
  %24 = bitcast i8* %23 to %"class.base::internal::BindStateBase"*
  call void @_ZN4base8internal13BindStateBaseC2EPFvvEPFvPKS1_E(%"class.base::internal::BindStateBase"* nonnull %24, void ()* bitcast (void (%"class.base::internal::BindStateBase"*)* @_ZN4base8internal7InvokerINS0_9BindStateIMN3net12_GLOBAL__N_117CreateResolverJobEFviEJ13scoped_refptrIS5_EiEEEFvvEE7RunOnceEPNS0_13BindStateBaseE to void ()*), void (%"class.base::internal::BindStateBase"*)* nonnull @_ZN4base8internal9BindStateIMN3net12_GLOBAL__N_117CreateResolverJobEFviEJ13scoped_refptrIS4_EiEE7DestroyEPKNS0_13BindStateBaseE) #14, !noalias !12
  %25 = getelementptr inbounds i8, i8* %23, i64 32
  %26 = bitcast i8* %25 to <2 x i64>*
  store <2 x i64> <i64 ptrtoint (void (%"class.net::(anonymous namespace)::CreateResolverJob"*, i32)* @_ZN3net12_GLOBAL__N_117CreateResolverJob15RequestCompleteEi to i64), i64 0>, <2 x i64>* %26, align 8, !noalias !12
  %27 = getelementptr inbounds i8, i8* %23, i64 48
  %28 = bitcast i8* %27 to %"class.net::(anonymous namespace)::CreateResolverJob"**
  store %"class.net::(anonymous namespace)::CreateResolverJob"* %0, %"class.net::(anonymous namespace)::CreateResolverJob"** %28, align 8, !noalias !12
  %29 = icmp eq %"class.net::(anonymous namespace)::CreateResolverJob"* %0, null
  br i1 %29, label %33, label %30

30:                                               ; preds = %2
  %31 = getelementptr inbounds %"class.net::(anonymous namespace)::CreateResolverJob", %"class.net::(anonymous namespace)::CreateResolverJob"* %0, i64 0, i32 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %32 = atomicrmw add i32* %31, i32 1 monotonic, !noalias !12
  br label %33

33:                                               ; preds = %2, %30
  %34 = getelementptr inbounds i8, i8* %23, i64 56
  %35 = bitcast i8* %34 to i32*
  store i32 %19, i32* %35, align 4, !noalias !12
  %36 = bitcast %"class.base::OnceCallback.91"* %6 to i8**
  store i8* %23, i8** %36, align 8, !alias.scope !12
  %37 = call zeroext i1 @_ZN4base10TaskRunner8PostTaskERKNS_8LocationENS_12OnceCallbackIFvvEEE(%"class.base::TaskRunner"* %21, %"class.base::Location"* nonnull dereferenceable(32) %5, %"class.base::OnceCallback.91"* nonnull %6) #14
  %38 = getelementptr inbounds %"class.base::OnceCallback.91", %"class.base::OnceCallback.91"* %6, i64 0, i32 0
  call void @_ZN4base8internal12CallbackBaseD2Ev(%"class.base::internal::CallbackBase"* nonnull %38) #14
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %22) #14
  %39 = load %"class.net::ProxyResolverFactory::Request"*, %"class.net::ProxyResolverFactory::Request"** %8, align 8
  store %"class.net::ProxyResolverFactory::Request"* null, %"class.net::ProxyResolverFactory::Request"** %8, align 8
  %40 = icmp eq %"class.net::ProxyResolverFactory::Request"* %39, null
  br i1 %40, label %46, label %41

41:                                               ; preds = %33
  %42 = bitcast %"class.net::ProxyResolverFactory::Request"* %39 to void (%"class.net::ProxyResolverFactory::Request"*)***
  %43 = load void (%"class.net::ProxyResolverFactory::Request"*)**, void (%"class.net::ProxyResolverFactory::Request"*)*** %42, align 8
  %44 = getelementptr inbounds void (%"class.net::ProxyResolverFactory::Request"*)*, void (%"class.net::ProxyResolverFactory::Request"*)** %43, i64 1
  %45 = load void (%"class.net::ProxyResolverFactory::Request"*)*, void (%"class.net::ProxyResolverFactory::Request"*)** %44, align 8
  call void %45(%"class.net::ProxyResolverFactory::Request"* nonnull %39) #14
  br label %46

46:                                               ; preds = %33, %41
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %7) #14
  %47 = icmp eq %"class.base::SingleThreadTaskRunner"* %1, null
  br i1 %47, label %56, label %48

48:                                               ; preds = %46
  %49 = getelementptr inbounds %"class.base::SingleThreadTaskRunner", %"class.base::SingleThreadTaskRunner"* %1, i64 0, i32 0, i32 0, i32 1
  %50 = getelementptr inbounds %"class.base::RefCountedThreadSafe.66", %"class.base::RefCountedThreadSafe.66"* %49, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %51 = atomicrmw sub i32* %50, i32 1 acq_rel
  %52 = icmp eq i32 %51, 1
  br i1 %52, label %53, label %56

53:                                               ; preds = %48
  %54 = getelementptr inbounds %"class.base::RefCountedThreadSafe.66", %"class.base::RefCountedThreadSafe.66"* %49, i64 -2
  %55 = bitcast %"class.base::RefCountedThreadSafe.66"* %54 to %"class.base::TaskRunner"*
  call void @_ZN4base16TaskRunnerTraits8DestructEPKNS_10TaskRunnerE(%"class.base::TaskRunner"* %55) #14
  br label %56

56:                                               ; preds = %46, %48, %53
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN3net12_GLOBAL__N_117CreateResolverJobD2Ev(%"class.net::(anonymous namespace)::CreateResolverJob"* nocapture) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.net::(anonymous namespace)::CreateResolverJob", %"class.net::(anonymous namespace)::CreateResolverJob"* %0, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [7 x i8*] }, { [7 x i8*] }* @_ZTVN3net12_GLOBAL__N_117CreateResolverJobE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8
  %3 = getelementptr inbounds %"class.net::(anonymous namespace)::CreateResolverJob", %"class.net::(anonymous namespace)::CreateResolverJob"* %0, i64 0, i32 3, i32 0, i32 0, i32 0
  %4 = load %"class.net::ProxyResolver"*, %"class.net::ProxyResolver"** %3, align 8
  store %"class.net::ProxyResolver"* null, %"class.net::ProxyResolver"** %3, align 8
  %5 = icmp eq %"class.net::ProxyResolver"* %4, null
  br i1 %5, label %11, label %6

6:                                                ; preds = %1
  %7 = bitcast %"class.net::ProxyResolver"* %4 to void (%"class.net::ProxyResolver"*)***
  %8 = load void (%"class.net::ProxyResolver"*)**, void (%"class.net::ProxyResolver"*)*** %7, align 8
  %9 = getelementptr inbounds void (%"class.net::ProxyResolver"*)*, void (%"class.net::ProxyResolver"*)** %8, i64 1
  %10 = load void (%"class.net::ProxyResolver"*)*, void (%"class.net::ProxyResolver"*)** %9, align 8
  tail call void %10(%"class.net::ProxyResolver"* nonnull %4) #14
  br label %11

11:                                               ; preds = %1, %6
  %12 = getelementptr inbounds %"class.net::(anonymous namespace)::CreateResolverJob", %"class.net::(anonymous namespace)::CreateResolverJob"* %0, i64 0, i32 1, i32 0
  %13 = load %"class.net::PacFileData"*, %"class.net::PacFileData"** %12, align 8
  %14 = icmp eq %"class.net::PacFileData"* %13, null
  br i1 %14, label %27, label %15

15:                                               ; preds = %11
  %16 = getelementptr inbounds %"class.net::PacFileData", %"class.net::PacFileData"* %13, i64 0, i32 1
  %17 = getelementptr inbounds %"class.base::RefCountedThreadSafe", %"class.base::RefCountedThreadSafe"* %16, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %18 = atomicrmw sub i32* %17, i32 1 acq_rel
  %19 = icmp eq i32 %18, 1
  br i1 %19, label %20, label %27

20:                                               ; preds = %15
  %21 = getelementptr inbounds %"class.base::RefCountedThreadSafe", %"class.base::RefCountedThreadSafe"* %16, i64 -2
  %22 = bitcast %"class.base::RefCountedThreadSafe"* %21 to %"class.net::PacFileData"*
  %23 = bitcast %"class.base::RefCountedThreadSafe"* %21 to void (%"class.net::PacFileData"*)***
  %24 = load void (%"class.net::PacFileData"*)**, void (%"class.net::PacFileData"*)*** %23, align 8
  %25 = getelementptr inbounds void (%"class.net::PacFileData"*)*, void (%"class.net::PacFileData"*)** %24, i64 1
  %26 = load void (%"class.net::PacFileData"*)*, void (%"class.net::PacFileData"*)** %25, align 8
  tail call void %26(%"class.net::PacFileData"* nonnull %22) #14
  br label %27

27:                                               ; preds = %11, %15, %20
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN3net12_GLOBAL__N_117CreateResolverJobD0Ev(%"class.net::(anonymous namespace)::CreateResolverJob"*) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.net::(anonymous namespace)::CreateResolverJob", %"class.net::(anonymous namespace)::CreateResolverJob"* %0, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [7 x i8*] }, { [7 x i8*] }* @_ZTVN3net12_GLOBAL__N_117CreateResolverJobE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8
  %3 = getelementptr inbounds %"class.net::(anonymous namespace)::CreateResolverJob", %"class.net::(anonymous namespace)::CreateResolverJob"* %0, i64 0, i32 3, i32 0, i32 0, i32 0
  %4 = load %"class.net::ProxyResolver"*, %"class.net::ProxyResolver"** %3, align 8
  store %"class.net::ProxyResolver"* null, %"class.net::ProxyResolver"** %3, align 8
  %5 = icmp eq %"class.net::ProxyResolver"* %4, null
  br i1 %5, label %11, label %6

6:                                                ; preds = %1
  %7 = bitcast %"class.net::ProxyResolver"* %4 to void (%"class.net::ProxyResolver"*)***
  %8 = load void (%"class.net::ProxyResolver"*)**, void (%"class.net::ProxyResolver"*)*** %7, align 8
  %9 = getelementptr inbounds void (%"class.net::ProxyResolver"*)*, void (%"class.net::ProxyResolver"*)** %8, i64 1
  %10 = load void (%"class.net::ProxyResolver"*)*, void (%"class.net::ProxyResolver"*)** %9, align 8
  tail call void %10(%"class.net::ProxyResolver"* nonnull %4) #14
  br label %11

11:                                               ; preds = %6, %1
  %12 = getelementptr inbounds %"class.net::(anonymous namespace)::CreateResolverJob", %"class.net::(anonymous namespace)::CreateResolverJob"* %0, i64 0, i32 1, i32 0
  %13 = load %"class.net::PacFileData"*, %"class.net::PacFileData"** %12, align 8
  %14 = icmp eq %"class.net::PacFileData"* %13, null
  br i1 %14, label %27, label %15

15:                                               ; preds = %11
  %16 = getelementptr inbounds %"class.net::PacFileData", %"class.net::PacFileData"* %13, i64 0, i32 1
  %17 = getelementptr inbounds %"class.base::RefCountedThreadSafe", %"class.base::RefCountedThreadSafe"* %16, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %18 = atomicrmw sub i32* %17, i32 1 acq_rel
  %19 = icmp eq i32 %18, 1
  br i1 %19, label %20, label %27

20:                                               ; preds = %15
  %21 = getelementptr inbounds %"class.base::RefCountedThreadSafe", %"class.base::RefCountedThreadSafe"* %16, i64 -2
  %22 = bitcast %"class.base::RefCountedThreadSafe"* %21 to %"class.net::PacFileData"*
  %23 = bitcast %"class.base::RefCountedThreadSafe"* %21 to void (%"class.net::PacFileData"*)***
  %24 = load void (%"class.net::PacFileData"*)**, void (%"class.net::PacFileData"*)*** %23, align 8
  %25 = getelementptr inbounds void (%"class.net::PacFileData"*)*, void (%"class.net::PacFileData"*)** %24, i64 1
  %26 = load void (%"class.net::PacFileData"*)*, void (%"class.net::PacFileData"*)** %25, align 8
  tail call void %26(%"class.net::PacFileData"* nonnull %22) #14
  br label %27

27:                                               ; preds = %11, %15, %20
  %28 = bitcast %"class.net::(anonymous namespace)::CreateResolverJob"* %0 to i8*
  tail call void @_ZdlPv(i8* %28) #15
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN3net12_GLOBAL__N_117CreateResolverJob15RequestCompleteEi(%"class.net::(anonymous namespace)::CreateResolverJob"* nocapture, i32) #0 align 2 {
  %3 = getelementptr inbounds %"class.net::(anonymous namespace)::CreateResolverJob", %"class.net::(anonymous namespace)::CreateResolverJob"* %0, i64 0, i32 0, i32 4
  %4 = load i8, i8* %3, align 8, !range !17
  %5 = icmp eq i8 %4, 0
  br i1 %5, label %6, label %23

6:                                                ; preds = %2
  %7 = getelementptr inbounds %"class.net::(anonymous namespace)::CreateResolverJob", %"class.net::(anonymous namespace)::CreateResolverJob"* %0, i64 0, i32 0, i32 3
  %8 = load %"class.net::(anonymous namespace)::Executor"*, %"class.net::(anonymous namespace)::Executor"** %7, align 8
  %9 = getelementptr inbounds %"class.net::(anonymous namespace)::CreateResolverJob", %"class.net::(anonymous namespace)::CreateResolverJob"* %0, i64 0, i32 3
  %10 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %9, i64 0, i32 0, i32 0, i32 0
  %11 = bitcast %"class.std::__1::unique_ptr"* %9 to i64*
  %12 = load i64, i64* %11, align 8
  store %"class.net::ProxyResolver"* null, %"class.net::ProxyResolver"** %10, align 8
  %13 = getelementptr inbounds %"class.net::(anonymous namespace)::Executor", %"class.net::(anonymous namespace)::Executor"* %8, i64 0, i32 4
  %14 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %13, i64 0, i32 0, i32 0, i32 0
  %15 = load %"class.net::ProxyResolver"*, %"class.net::ProxyResolver"** %14, align 8
  %16 = bitcast %"class.std::__1::unique_ptr"* %13 to i64*
  store i64 %12, i64* %16, align 8
  %17 = icmp eq %"class.net::ProxyResolver"* %15, null
  br i1 %17, label %23, label %18

18:                                               ; preds = %6
  %19 = bitcast %"class.net::ProxyResolver"* %15 to void (%"class.net::ProxyResolver"*)***
  %20 = load void (%"class.net::ProxyResolver"*)**, void (%"class.net::ProxyResolver"*)*** %19, align 8
  %21 = getelementptr inbounds void (%"class.net::ProxyResolver"*)*, void (%"class.net::ProxyResolver"*)** %20, i64 1
  %22 = load void (%"class.net::ProxyResolver"*)*, void (%"class.net::ProxyResolver"*)** %21, align 8
  tail call void %22(%"class.net::ProxyResolver"* nonnull %15) #14
  br label %23

23:                                               ; preds = %2, %18, %6
  %24 = getelementptr inbounds %"class.net::(anonymous namespace)::CreateResolverJob", %"class.net::(anonymous namespace)::CreateResolverJob"* %0, i64 0, i32 0, i32 3
  %25 = load %"class.net::(anonymous namespace)::Executor"*, %"class.net::(anonymous namespace)::Executor"** %24, align 8
  %26 = icmp eq %"class.net::(anonymous namespace)::Executor"* %25, null
  br i1 %26, label %51, label %27

27:                                               ; preds = %23
  %28 = getelementptr inbounds %"class.net::(anonymous namespace)::Executor", %"class.net::(anonymous namespace)::Executor"* %25, i64 0, i32 3
  %29 = bitcast %class.scoped_refptr.36* %28 to i64*
  %30 = getelementptr inbounds %class.scoped_refptr.36, %class.scoped_refptr.36* %28, i64 0, i32 0
  %31 = load %"class.net::(anonymous namespace)::Job"*, %"class.net::(anonymous namespace)::Job"** %30, align 8
  store i64 0, i64* %29, align 8
  %32 = icmp eq %"class.net::(anonymous namespace)::Job"* %31, null
  br i1 %32, label %45, label %33

33:                                               ; preds = %27
  %34 = getelementptr inbounds %"class.net::(anonymous namespace)::Job", %"class.net::(anonymous namespace)::Job"* %31, i64 0, i32 1
  %35 = getelementptr inbounds %"class.base::RefCountedThreadSafe.37", %"class.base::RefCountedThreadSafe.37"* %34, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %36 = atomicrmw sub i32* %35, i32 1 acq_rel
  %37 = icmp eq i32 %36, 1
  br i1 %37, label %38, label %45

38:                                               ; preds = %33
  %39 = getelementptr inbounds %"class.base::RefCountedThreadSafe.37", %"class.base::RefCountedThreadSafe.37"* %34, i64 -2
  %40 = bitcast %"class.base::RefCountedThreadSafe.37"* %39 to %"class.net::(anonymous namespace)::Job"*
  %41 = bitcast %"class.base::RefCountedThreadSafe.37"* %39 to void (%"class.net::(anonymous namespace)::Job"*)***
  %42 = load void (%"class.net::(anonymous namespace)::Job"*)**, void (%"class.net::(anonymous namespace)::Job"*)*** %41, align 8
  %43 = getelementptr inbounds void (%"class.net::(anonymous namespace)::Job"*)*, void (%"class.net::(anonymous namespace)::Job"*)** %42, i64 4
  %44 = load void (%"class.net::(anonymous namespace)::Job"*)*, void (%"class.net::(anonymous namespace)::Job"*)** %43, align 8
  tail call void %44(%"class.net::(anonymous namespace)::Job"* nonnull %40) #14
  br label %45

45:                                               ; preds = %38, %33, %27
  %46 = getelementptr inbounds %"class.net::(anonymous namespace)::Executor", %"class.net::(anonymous namespace)::Executor"* %25, i64 0, i32 1
  %47 = load %"class.net::(anonymous namespace)::Executor::Coordinator"*, %"class.net::(anonymous namespace)::Executor::Coordinator"** %46, align 8
  %48 = bitcast %"class.net::(anonymous namespace)::Executor::Coordinator"* %47 to void (%"class.net::(anonymous namespace)::Executor::Coordinator"*, %"class.net::(anonymous namespace)::Executor"*)***
  %49 = load void (%"class.net::(anonymous namespace)::Executor::Coordinator"*, %"class.net::(anonymous namespace)::Executor"*)**, void (%"class.net::(anonymous namespace)::Executor::Coordinator"*, %"class.net::(anonymous namespace)::Executor"*)*** %48, align 8
  %50 = load void (%"class.net::(anonymous namespace)::Executor::Coordinator"*, %"class.net::(anonymous namespace)::Executor"*)*, void (%"class.net::(anonymous namespace)::Executor::Coordinator"*, %"class.net::(anonymous namespace)::Executor"*)** %49, align 8
  tail call void %50(%"class.net::(anonymous namespace)::Executor::Coordinator"* %47, %"class.net::(anonymous namespace)::Executor"* nonnull %25) #14
  br label %51

51:                                               ; preds = %23, %45
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN4base8internal7InvokerINS0_9BindStateIMN3net12_GLOBAL__N_117CreateResolverJobEFviEJ13scoped_refptrIS5_EiEEEFvvEE7RunOnceEPNS0_13BindStateBaseE(%"class.base::internal::BindStateBase"* nocapture readonly) #0 align 2 {
  %2 = getelementptr inbounds %"class.base::internal::BindStateBase", %"class.base::internal::BindStateBase"* %0, i64 1
  %3 = getelementptr inbounds %"class.base::internal::BindStateBase", %"class.base::internal::BindStateBase"* %0, i64 1, i32 2
  %4 = getelementptr inbounds void (%"class.base::internal::BindStateBase"*)*, void (%"class.base::internal::BindStateBase"*)** %3, i64 1
  %5 = bitcast void (%"class.base::internal::BindStateBase"*)** %4 to i32*
  %6 = bitcast %"class.base::internal::BindStateBase"* %2 to i64*
  %7 = load i64, i64* %6, align 8
  %8 = getelementptr inbounds %"class.base::internal::BindStateBase", %"class.base::internal::BindStateBase"* %0, i64 1, i32 1
  %9 = bitcast void ()** %8 to i64*
  %10 = load i64, i64* %9, align 8
  %11 = bitcast void (%"class.base::internal::BindStateBase"*)** %3 to i8**
  %12 = load i8*, i8** %11, align 8
  %13 = getelementptr inbounds i8, i8* %12, i64 %10
  %14 = bitcast i8* %13 to %"class.net::(anonymous namespace)::CreateResolverJob"*
  %15 = and i64 %7, 1
  %16 = icmp eq i64 %15, 0
  br i1 %16, label %24, label %17

17:                                               ; preds = %1
  %18 = bitcast i8* %13 to i8**
  %19 = load i8*, i8** %18, align 8
  %20 = add i64 %7, -1
  %21 = getelementptr i8, i8* %19, i64 %20
  %22 = bitcast i8* %21 to void (%"class.net::(anonymous namespace)::CreateResolverJob"*, i32)**
  %23 = load void (%"class.net::(anonymous namespace)::CreateResolverJob"*, i32)*, void (%"class.net::(anonymous namespace)::CreateResolverJob"*, i32)** %22, align 8
  br label %26

24:                                               ; preds = %1
  %25 = inttoptr i64 %7 to void (%"class.net::(anonymous namespace)::CreateResolverJob"*, i32)*
  br label %26

26:                                               ; preds = %17, %24
  %27 = phi void (%"class.net::(anonymous namespace)::CreateResolverJob"*, i32)* [ %23, %17 ], [ %25, %24 ]
  %28 = load i32, i32* %5, align 4
  tail call void %27(%"class.net::(anonymous namespace)::CreateResolverJob"* %14, i32 %28) #14
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN4base8internal9BindStateIMN3net12_GLOBAL__N_117CreateResolverJobEFviEJ13scoped_refptrIS4_EiEE7DestroyEPKNS0_13BindStateBaseE(%"class.base::internal::BindStateBase"*) #0 align 2 {
  %2 = icmp eq %"class.base::internal::BindStateBase"* %0, null
  br i1 %2, label %22, label %3

3:                                                ; preds = %1
  %4 = getelementptr inbounds %"class.base::internal::BindStateBase", %"class.base::internal::BindStateBase"* %0, i64 1, i32 2
  %5 = bitcast void (%"class.base::internal::BindStateBase"*)** %4 to %"class.net::(anonymous namespace)::CreateResolverJob"**
  %6 = load %"class.net::(anonymous namespace)::CreateResolverJob"*, %"class.net::(anonymous namespace)::CreateResolverJob"** %5, align 8
  %7 = icmp eq %"class.net::(anonymous namespace)::CreateResolverJob"* %6, null
  br i1 %7, label %20, label %8

8:                                                ; preds = %3
  %9 = getelementptr inbounds %"class.net::(anonymous namespace)::CreateResolverJob", %"class.net::(anonymous namespace)::CreateResolverJob"* %6, i64 0, i32 0, i32 1
  %10 = getelementptr inbounds %"class.base::RefCountedThreadSafe.37", %"class.base::RefCountedThreadSafe.37"* %9, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %11 = atomicrmw sub i32* %10, i32 1 acq_rel
  %12 = icmp eq i32 %11, 1
  br i1 %12, label %13, label %20

13:                                               ; preds = %8
  %14 = getelementptr inbounds %"class.base::RefCountedThreadSafe.37", %"class.base::RefCountedThreadSafe.37"* %9, i64 -2
  %15 = bitcast %"class.base::RefCountedThreadSafe.37"* %14 to %"class.net::(anonymous namespace)::Job"*
  %16 = bitcast %"class.base::RefCountedThreadSafe.37"* %14 to void (%"class.net::(anonymous namespace)::Job"*)***
  %17 = load void (%"class.net::(anonymous namespace)::Job"*)**, void (%"class.net::(anonymous namespace)::Job"*)*** %16, align 8
  %18 = getelementptr inbounds void (%"class.net::(anonymous namespace)::Job"*)*, void (%"class.net::(anonymous namespace)::Job"*)** %17, i64 4
  %19 = load void (%"class.net::(anonymous namespace)::Job"*)*, void (%"class.net::(anonymous namespace)::Job"*)** %18, align 8
  tail call void %19(%"class.net::(anonymous namespace)::Job"* nonnull %15) #14
  br label %20

20:                                               ; preds = %3, %8, %13
  %21 = bitcast %"class.base::internal::BindStateBase"* %0 to i8*
  tail call void @_ZdlPv(i8* %21) #15
  br label %22

22:                                               ; preds = %20, %1
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN3net12_GLOBAL__N_126MultiThreadedProxyResolverD2Ev(%"class.net::(anonymous namespace)::MultiThreadedProxyResolver"* nocapture) unnamed_addr #0 align 2 {
  %2 = bitcast %"class.net::(anonymous namespace)::MultiThreadedProxyResolver"* %0 to <2 x i32 (...)**>*
  store <2 x i32 (...)**> <i32 (...)** bitcast (i8** getelementptr inbounds ({ [6 x i8*], [5 x i8*] }, { [6 x i8*], [5 x i8*] }* @_ZTVN3net12_GLOBAL__N_126MultiThreadedProxyResolverE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)** bitcast (i8** getelementptr inbounds ({ [6 x i8*], [5 x i8*] }, { [6 x i8*], [5 x i8*] }* @_ZTVN3net12_GLOBAL__N_126MultiThreadedProxyResolverE, i64 0, inrange i32 1, i64 2) to i32 (...)**)>, <2 x i32 (...)**>* %2, align 8
  %3 = getelementptr inbounds %"class.net::(anonymous namespace)::MultiThreadedProxyResolver", %"class.net::(anonymous namespace)::MultiThreadedProxyResolver"* %0, i64 0, i32 4
  %4 = getelementptr inbounds %"class.net::(anonymous namespace)::MultiThreadedProxyResolver", %"class.net::(anonymous namespace)::MultiThreadedProxyResolver"* %0, i64 0, i32 4, i32 1
  %5 = load i64, i64* %4, align 8
  %6 = getelementptr inbounds %"class.net::(anonymous namespace)::MultiThreadedProxyResolver", %"class.net::(anonymous namespace)::MultiThreadedProxyResolver"* %0, i64 0, i32 4, i32 2
  %7 = load i64, i64* %6, align 8
  tail call fastcc void @_ZN4base14circular_dequeI13scoped_refptrIN3net12_GLOBAL__N_13JobEEE13DestructRangeEmm(%"class.base::circular_deque"* %3, i64 %5, i64 %7) #14
  %8 = bitcast i64* %4 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %8, i8 0, i64 16, i1 false) #14
  %9 = bitcast %"class.base::circular_deque"* %3 to i8**
  %10 = load i8*, i8** %9, align 8
  tail call void @free(i8* %10) #14
  %11 = bitcast %"class.base::circular_deque"* %3 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %11, i8 0, i64 16, i1 false) #14
  %12 = getelementptr inbounds %"class.net::(anonymous namespace)::MultiThreadedProxyResolver", %"class.net::(anonymous namespace)::MultiThreadedProxyResolver"* %0, i64 0, i32 5
  %13 = getelementptr inbounds %"class.std::__1::vector.106", %"class.std::__1::vector.106"* %12, i64 0, i32 0, i32 0
  %14 = load %class.scoped_refptr.34*, %class.scoped_refptr.34** %13, align 8
  %15 = getelementptr inbounds %"class.net::(anonymous namespace)::MultiThreadedProxyResolver", %"class.net::(anonymous namespace)::MultiThreadedProxyResolver"* %0, i64 0, i32 5, i32 0, i32 1
  %16 = load %class.scoped_refptr.34*, %class.scoped_refptr.34** %15, align 8
  %17 = icmp eq %class.scoped_refptr.34* %14, %16
  br i1 %17, label %18, label %111

18:                                               ; preds = %111, %1
  %19 = getelementptr inbounds %"class.net::(anonymous namespace)::MultiThreadedProxyResolver", %"class.net::(anonymous namespace)::MultiThreadedProxyResolver"* %0, i64 0, i32 6, i32 0
  %20 = load %"class.net::PacFileData"*, %"class.net::PacFileData"** %19, align 8
  %21 = icmp eq %"class.net::PacFileData"* %20, null
  br i1 %21, label %34, label %22

22:                                               ; preds = %18
  %23 = getelementptr inbounds %"class.net::PacFileData", %"class.net::PacFileData"* %20, i64 0, i32 1
  %24 = getelementptr inbounds %"class.base::RefCountedThreadSafe", %"class.base::RefCountedThreadSafe"* %23, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %25 = atomicrmw sub i32* %24, i32 1 acq_rel
  %26 = icmp eq i32 %25, 1
  br i1 %26, label %27, label %34

27:                                               ; preds = %22
  %28 = getelementptr inbounds %"class.base::RefCountedThreadSafe", %"class.base::RefCountedThreadSafe"* %23, i64 -2
  %29 = bitcast %"class.base::RefCountedThreadSafe"* %28 to %"class.net::PacFileData"*
  %30 = bitcast %"class.base::RefCountedThreadSafe"* %28 to void (%"class.net::PacFileData"*)***
  %31 = load void (%"class.net::PacFileData"*)**, void (%"class.net::PacFileData"*)*** %30, align 8
  %32 = getelementptr inbounds void (%"class.net::PacFileData"*)*, void (%"class.net::PacFileData"*)** %31, i64 1
  %33 = load void (%"class.net::PacFileData"*)*, void (%"class.net::PacFileData"*)** %32, align 8
  tail call void %33(%"class.net::PacFileData"* nonnull %29) #14
  br label %34

34:                                               ; preds = %18, %22, %27
  %35 = load %class.scoped_refptr.34*, %class.scoped_refptr.34** %13, align 8
  %36 = icmp eq %class.scoped_refptr.34* %35, null
  br i1 %36, label %98, label %37

37:                                               ; preds = %34
  %38 = bitcast %class.scoped_refptr.34* %35 to i8*
  %39 = load %class.scoped_refptr.34*, %class.scoped_refptr.34** %15, align 8
  %40 = icmp eq %class.scoped_refptr.34* %39, %35
  br i1 %40, label %96, label %41

41:                                               ; preds = %37, %91
  %42 = phi %class.scoped_refptr.34* [ %43, %91 ], [ %39, %37 ]
  %43 = getelementptr inbounds %class.scoped_refptr.34, %class.scoped_refptr.34* %42, i64 -1
  %44 = getelementptr inbounds %class.scoped_refptr.34, %class.scoped_refptr.34* %43, i64 0, i32 0
  %45 = load %"class.net::(anonymous namespace)::Executor"*, %"class.net::(anonymous namespace)::Executor"** %44, align 8
  %46 = icmp eq %"class.net::(anonymous namespace)::Executor"* %45, null
  br i1 %46, label %91, label %47

47:                                               ; preds = %41
  %48 = getelementptr inbounds %"class.net::(anonymous namespace)::Executor", %"class.net::(anonymous namespace)::Executor"* %45, i64 0, i32 0
  %49 = getelementptr inbounds %"class.net::(anonymous namespace)::Executor", %"class.net::(anonymous namespace)::Executor"* %45, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %50 = atomicrmw sub i32* %49, i32 1 acq_rel
  %51 = icmp eq i32 %50, 1
  br i1 %51, label %52, label %91

52:                                               ; preds = %47
  %53 = getelementptr inbounds %"class.base::RefCountedThreadSafe.35", %"class.base::RefCountedThreadSafe.35"* %48, i64 10
  %54 = bitcast %"class.base::RefCountedThreadSafe.35"* %53 to %"class.base::Thread"**
  %55 = load %"class.base::Thread"*, %"class.base::Thread"** %54, align 8
  store %"class.base::Thread"* null, %"class.base::Thread"** %54, align 8
  %56 = icmp eq %"class.base::Thread"* %55, null
  br i1 %56, label %62, label %57

57:                                               ; preds = %52
  %58 = bitcast %"class.base::Thread"* %55 to void (%"class.base::Thread"*)***
  %59 = load void (%"class.base::Thread"*)**, void (%"class.base::Thread"*)*** %58, align 8
  %60 = getelementptr inbounds void (%"class.base::Thread"*)*, void (%"class.base::Thread"*)** %59, i64 3
  %61 = load void (%"class.base::Thread"*)*, void (%"class.base::Thread"*)** %60, align 8
  tail call void %61(%"class.base::Thread"* nonnull %55) #14
  br label %62

62:                                               ; preds = %57, %52
  %63 = getelementptr inbounds %"class.base::RefCountedThreadSafe.35", %"class.base::RefCountedThreadSafe.35"* %48, i64 8
  %64 = bitcast %"class.base::RefCountedThreadSafe.35"* %63 to %"class.net::ProxyResolver"**
  %65 = load %"class.net::ProxyResolver"*, %"class.net::ProxyResolver"** %64, align 8
  store %"class.net::ProxyResolver"* null, %"class.net::ProxyResolver"** %64, align 8
  %66 = icmp eq %"class.net::ProxyResolver"* %65, null
  br i1 %66, label %72, label %67

67:                                               ; preds = %62
  %68 = bitcast %"class.net::ProxyResolver"* %65 to void (%"class.net::ProxyResolver"*)***
  %69 = load void (%"class.net::ProxyResolver"*)**, void (%"class.net::ProxyResolver"*)*** %68, align 8
  %70 = getelementptr inbounds void (%"class.net::ProxyResolver"*)*, void (%"class.net::ProxyResolver"*)** %69, i64 1
  %71 = load void (%"class.net::ProxyResolver"*)*, void (%"class.net::ProxyResolver"*)** %70, align 8
  tail call void %71(%"class.net::ProxyResolver"* nonnull %65) #14
  br label %72

72:                                               ; preds = %67, %62
  %73 = getelementptr inbounds %"class.base::RefCountedThreadSafe.35", %"class.base::RefCountedThreadSafe.35"* %48, i64 6
  %74 = bitcast %"class.base::RefCountedThreadSafe.35"* %73 to %"class.net::(anonymous namespace)::Job"**
  %75 = load %"class.net::(anonymous namespace)::Job"*, %"class.net::(anonymous namespace)::Job"** %74, align 8
  %76 = icmp eq %"class.net::(anonymous namespace)::Job"* %75, null
  br i1 %76, label %89, label %77

77:                                               ; preds = %72
  %78 = getelementptr inbounds %"class.net::(anonymous namespace)::Job", %"class.net::(anonymous namespace)::Job"* %75, i64 0, i32 1
  %79 = getelementptr inbounds %"class.base::RefCountedThreadSafe.37", %"class.base::RefCountedThreadSafe.37"* %78, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %80 = atomicrmw sub i32* %79, i32 1 acq_rel
  %81 = icmp eq i32 %80, 1
  br i1 %81, label %82, label %89

82:                                               ; preds = %77
  %83 = getelementptr inbounds %"class.base::RefCountedThreadSafe.37", %"class.base::RefCountedThreadSafe.37"* %78, i64 -2
  %84 = bitcast %"class.base::RefCountedThreadSafe.37"* %83 to %"class.net::(anonymous namespace)::Job"*
  %85 = bitcast %"class.base::RefCountedThreadSafe.37"* %83 to void (%"class.net::(anonymous namespace)::Job"*)***
  %86 = load void (%"class.net::(anonymous namespace)::Job"*)**, void (%"class.net::(anonymous namespace)::Job"*)*** %85, align 8
  %87 = getelementptr inbounds void (%"class.net::(anonymous namespace)::Job"*)*, void (%"class.net::(anonymous namespace)::Job"*)** %86, i64 4
  %88 = load void (%"class.net::(anonymous namespace)::Job"*)*, void (%"class.net::(anonymous namespace)::Job"*)** %87, align 8
  tail call void %88(%"class.net::(anonymous namespace)::Job"* nonnull %84) #14
  br label %89

89:                                               ; preds = %82, %77, %72
  %90 = bitcast %"class.net::(anonymous namespace)::Executor"* %45 to i8*
  tail call void @_ZdlPv(i8* %90) #15
  br label %91

91:                                               ; preds = %89, %47, %41
  %92 = icmp eq %class.scoped_refptr.34* %43, %35
  br i1 %92, label %93, label %41

93:                                               ; preds = %91
  %94 = bitcast %"class.std::__1::vector.106"* %12 to i8**
  %95 = load i8*, i8** %94, align 8
  br label %96

96:                                               ; preds = %93, %37
  %97 = phi i8* [ %95, %93 ], [ %38, %37 ]
  store %class.scoped_refptr.34* %35, %class.scoped_refptr.34** %15, align 8
  tail call void @_ZdlPv(i8* %97) #15
  br label %98

98:                                               ; preds = %34, %96
  %99 = load i64, i64* %4, align 8
  %100 = load i64, i64* %6, align 8
  tail call fastcc void @_ZN4base14circular_dequeI13scoped_refptrIN3net12_GLOBAL__N_13JobEEE13DestructRangeEmm(%"class.base::circular_deque"* %3, i64 %99, i64 %100) #14
  %101 = load i8*, i8** %9, align 8
  tail call void @free(i8* %101) #14
  %102 = getelementptr inbounds %"class.net::(anonymous namespace)::MultiThreadedProxyResolver", %"class.net::(anonymous namespace)::MultiThreadedProxyResolver"* %0, i64 0, i32 2, i32 0, i32 0, i32 0
  %103 = load %"class.net::ProxyResolverFactory"*, %"class.net::ProxyResolverFactory"** %102, align 8
  store %"class.net::ProxyResolverFactory"* null, %"class.net::ProxyResolverFactory"** %102, align 8
  %104 = icmp eq %"class.net::ProxyResolverFactory"* %103, null
  br i1 %104, label %110, label %105

105:                                              ; preds = %98
  %106 = bitcast %"class.net::ProxyResolverFactory"* %103 to void (%"class.net::ProxyResolverFactory"*)***
  %107 = load void (%"class.net::ProxyResolverFactory"*)**, void (%"class.net::ProxyResolverFactory"*)*** %106, align 8
  %108 = getelementptr inbounds void (%"class.net::ProxyResolverFactory"*)*, void (%"class.net::ProxyResolverFactory"*)** %107, i64 1
  %109 = load void (%"class.net::ProxyResolverFactory"*)*, void (%"class.net::ProxyResolverFactory"*)** %108, align 8
  tail call void %109(%"class.net::ProxyResolverFactory"* nonnull %103) #14
  br label %110

110:                                              ; preds = %98, %105
  ret void

111:                                              ; preds = %1, %111
  %112 = phi %class.scoped_refptr.34* [ %115, %111 ], [ %14, %1 ]
  %113 = getelementptr inbounds %class.scoped_refptr.34, %class.scoped_refptr.34* %112, i64 0, i32 0
  %114 = load %"class.net::(anonymous namespace)::Executor"*, %"class.net::(anonymous namespace)::Executor"** %113, align 8
  tail call fastcc void @_ZN3net12_GLOBAL__N_18Executor7DestroyEv(%"class.net::(anonymous namespace)::Executor"* %114)
  %115 = getelementptr inbounds %class.scoped_refptr.34, %class.scoped_refptr.34* %112, i64 1
  %116 = icmp eq %class.scoped_refptr.34* %115, %16
  br i1 %116, label %18, label %111
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN3net12_GLOBAL__N_126MultiThreadedProxyResolverD0Ev(%"class.net::(anonymous namespace)::MultiThreadedProxyResolver"*) unnamed_addr #0 align 2 {
  tail call void @_ZN3net12_GLOBAL__N_126MultiThreadedProxyResolverD2Ev(%"class.net::(anonymous namespace)::MultiThreadedProxyResolver"* %0) #14
  %2 = bitcast %"class.net::(anonymous namespace)::MultiThreadedProxyResolver"* %0 to i8*
  tail call void @_ZdlPv(i8* %2) #15
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal i32 @_ZN3net12_GLOBAL__N_126MultiThreadedProxyResolver14GetProxyForURLERK4GURLRKNS_19NetworkIsolationKeyEPNS_9ProxyInfoEN4base12OnceCallbackIFviEEEPNSt3__110unique_ptrINS_13ProxyResolver7RequestENSE_14default_deleteISH_EEEERKNS_16NetLogWithSourceE(%"class.net::(anonymous namespace)::MultiThreadedProxyResolver"*, %class.GURL* dereferenceable(120), %"class.net::NetworkIsolationKey"* dereferenceable(184), %"class.net::ProxyInfo"*, %"class.base::OnceCallback"* nocapture, %"class.std::__1::unique_ptr.138"*, %"class.net::NetLogWithSource"* nocapture readonly dereferenceable(24)) unnamed_addr #0 align 2 {
  %8 = alloca %"class.logging::CheckOpResult", align 8
  %9 = alloca %"class.logging::CheckOpResult", align 8
  %10 = alloca %"class.logging::CheckError", align 8
  %11 = alloca %"class.logging::CheckOpResult", align 8
  %12 = alloca %"class.logging::CheckOpResult", align 8
  %13 = alloca %"class.logging::CheckError", align 8
  %14 = alloca %"struct.std::__1::__split_buffer", align 8
  %15 = alloca %"class.base::OnceCallback", align 8
  %16 = tail call i8* @_Znwm(i64 456) #15
  %17 = bitcast i8* %16 to %"class.net::(anonymous namespace)::MultiThreadedProxyResolver::GetProxyForURLJob"*
  %18 = getelementptr inbounds %"class.base::OnceCallback", %"class.base::OnceCallback"* %4, i64 0, i32 0, i32 0, i32 0
  %19 = bitcast %"class.base::OnceCallback"* %4 to i64*
  %20 = load i64, i64* %19, align 8
  store %"class.base::internal::BindStateBase"* null, %"class.base::internal::BindStateBase"** %18, align 8
  %21 = getelementptr inbounds i8, i8* %16, i64 8
  %22 = bitcast i8* %21 to i32*
  store i32 0, i32* %22, align 4
  %23 = bitcast i8* %16 to i32 (...)***
  %24 = getelementptr inbounds i8, i8* %16, i64 16
  %25 = bitcast i8* %24 to %"class.net::(anonymous namespace)::Executor"**
  store %"class.net::(anonymous namespace)::Executor"* null, %"class.net::(anonymous namespace)::Executor"** %25, align 8
  %26 = getelementptr inbounds i8, i8* %16, i64 24
  store i8 0, i8* %26, align 8
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [7 x i8*] }, { [7 x i8*] }* @_ZTVN3net12_GLOBAL__N_126MultiThreadedProxyResolver17GetProxyForURLJobE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %23, align 8
  %27 = getelementptr inbounds i8, i8* %16, i64 32
  %28 = getelementptr inbounds %"class.base::OnceCallback", %"class.base::OnceCallback"* %15, i64 0, i32 0, i32 0, i32 0
  %29 = bitcast i8* %27 to i64*
  store i64 %20, i64* %29, align 8
  store %"class.base::internal::BindStateBase"* null, %"class.base::internal::BindStateBase"** %28, align 8
  %30 = getelementptr inbounds i8, i8* %16, i64 40
  %31 = bitcast i8* %30 to %"class.net::ProxyInfo"**
  store %"class.net::ProxyInfo"* %3, %"class.net::ProxyInfo"** %31, align 8
  %32 = getelementptr inbounds i8, i8* %16, i64 48
  %33 = bitcast %"class.net::NetLogWithSource"* %6 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %32, i8* align 8 %33, i64 24, i1 false) #14
  %34 = getelementptr inbounds i8, i8* %16, i64 72
  %35 = bitcast i8* %34 to %class.GURL*
  tail call void @_ZN4GURLC1ERKS_(%class.GURL* %35, %class.GURL* dereferenceable(120) %1) #14
  %36 = getelementptr inbounds i8, i8* %16, i64 192
  %37 = bitcast i8* %36 to %"class.net::NetworkIsolationKey"*
  tail call void @_ZN3net19NetworkIsolationKeyC1ERKS0_(%"class.net::NetworkIsolationKey"* %37, %"class.net::NetworkIsolationKey"* dereferenceable(184) %2) #14
  %38 = getelementptr inbounds i8, i8* %16, i64 376
  %39 = bitcast i8* %38 to %"class.net::ProxyInfo"*
  tail call void @_ZN3net9ProxyInfoC1Ev(%"class.net::ProxyInfo"* %39) #14
  %40 = getelementptr inbounds i8, i8* %16, i64 448
  store i8 0, i8* %40, align 8
  %41 = atomicrmw add i32* %22, i32 1 monotonic
  %42 = getelementptr inbounds %"class.base::OnceCallback", %"class.base::OnceCallback"* %15, i64 0, i32 0
  call void @_ZN4base8internal12CallbackBaseD2Ev(%"class.base::internal::CallbackBase"* nonnull %42) #14
  %43 = icmp eq %"class.std::__1::unique_ptr.138"* %5, null
  br i1 %43, label %60, label %44

44:                                               ; preds = %7
  %45 = call i8* @_Znwm(i64 16) #15
  %46 = atomicrmw add i32* %22, i32 1 monotonic
  %47 = ptrtoint i8* %16 to i64
  %48 = bitcast i8* %45 to i32 (...)***
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [5 x i8*] }, { [5 x i8*] }* @_ZTVN3net12_GLOBAL__N_126MultiThreadedProxyResolver11RequestImplE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %48, align 8
  %49 = getelementptr inbounds i8, i8* %45, i64 8
  %50 = bitcast i8* %49 to i64*
  store i64 %47, i64* %50, align 8
  %51 = getelementptr inbounds %"class.std::__1::unique_ptr.138", %"class.std::__1::unique_ptr.138"* %5, i64 0, i32 0, i32 0, i32 0
  %52 = load %"class.net::ProxyResolver::Request"*, %"class.net::ProxyResolver::Request"** %51, align 8
  %53 = bitcast %"class.std::__1::unique_ptr.138"* %5 to i8**
  store i8* %45, i8** %53, align 8
  %54 = icmp eq %"class.net::ProxyResolver::Request"* %52, null
  br i1 %54, label %60, label %55

55:                                               ; preds = %44
  %56 = bitcast %"class.net::ProxyResolver::Request"* %52 to void (%"class.net::ProxyResolver::Request"*)***
  %57 = load void (%"class.net::ProxyResolver::Request"*)**, void (%"class.net::ProxyResolver::Request"*)*** %56, align 8
  %58 = getelementptr inbounds void (%"class.net::ProxyResolver::Request"*)*, void (%"class.net::ProxyResolver::Request"*)** %57, i64 1
  %59 = load void (%"class.net::ProxyResolver::Request"*)*, void (%"class.net::ProxyResolver::Request"*)** %58, align 8
  call void %59(%"class.net::ProxyResolver::Request"* nonnull %52) #14
  br label %60

60:                                               ; preds = %44, %55, %7
  %61 = getelementptr inbounds %"class.net::(anonymous namespace)::MultiThreadedProxyResolver", %"class.net::(anonymous namespace)::MultiThreadedProxyResolver"* %0, i64 0, i32 5, i32 0, i32 0
  %62 = load %class.scoped_refptr.34*, %class.scoped_refptr.34** %61, align 8
  %63 = getelementptr inbounds %"class.net::(anonymous namespace)::MultiThreadedProxyResolver", %"class.net::(anonymous namespace)::MultiThreadedProxyResolver"* %0, i64 0, i32 5, i32 0, i32 1
  %64 = load %class.scoped_refptr.34*, %class.scoped_refptr.34** %63, align 8
  %65 = icmp eq %class.scoped_refptr.34* %62, %64
  br i1 %65, label %80, label %68

66:                                               ; preds = %68
  %67 = icmp eq %class.scoped_refptr.34* %75, %64
  br i1 %67, label %80, label %68

68:                                               ; preds = %60, %66
  %69 = phi %class.scoped_refptr.34* [ %75, %66 ], [ %62, %60 ]
  %70 = getelementptr inbounds %class.scoped_refptr.34, %class.scoped_refptr.34* %69, i64 0, i32 0
  %71 = load %"class.net::(anonymous namespace)::Executor"*, %"class.net::(anonymous namespace)::Executor"** %70, align 8
  %72 = getelementptr inbounds %"class.net::(anonymous namespace)::Executor", %"class.net::(anonymous namespace)::Executor"* %71, i64 0, i32 3, i32 0
  %73 = load %"class.net::(anonymous namespace)::Job"*, %"class.net::(anonymous namespace)::Job"** %72, align 8
  %74 = icmp eq %"class.net::(anonymous namespace)::Job"* %73, null
  %75 = getelementptr inbounds %class.scoped_refptr.34, %class.scoped_refptr.34* %69, i64 1
  br i1 %74, label %76, label %66

76:                                               ; preds = %68
  %77 = icmp eq %"class.net::(anonymous namespace)::Executor"* %71, null
  br i1 %77, label %80, label %78

78:                                               ; preds = %76
  %79 = bitcast i8* %16 to %"class.net::(anonymous namespace)::Job"*
  call fastcc void @_ZN3net12_GLOBAL__N_18Executor8StartJobEPNS0_3JobE(%"class.net::(anonymous namespace)::Executor"* nonnull %71, %"class.net::(anonymous namespace)::Job"* nonnull %79)
  br label %354

80:                                               ; preds = %66, %60, %76
  %81 = bitcast i8* %16 to void (%"class.net::(anonymous namespace)::MultiThreadedProxyResolver::GetProxyForURLJob"*)***
  %82 = load void (%"class.net::(anonymous namespace)::MultiThreadedProxyResolver::GetProxyForURLJob"*)**, void (%"class.net::(anonymous namespace)::MultiThreadedProxyResolver::GetProxyForURLJob"*)*** %81, align 8
  %83 = load void (%"class.net::(anonymous namespace)::MultiThreadedProxyResolver::GetProxyForURLJob"*)*, void (%"class.net::(anonymous namespace)::MultiThreadedProxyResolver::GetProxyForURLJob"*)** %82, align 8
  call void %83(%"class.net::(anonymous namespace)::MultiThreadedProxyResolver::GetProxyForURLJob"* nonnull %17) #14
  %84 = getelementptr inbounds %"class.net::(anonymous namespace)::MultiThreadedProxyResolver", %"class.net::(anonymous namespace)::MultiThreadedProxyResolver"* %0, i64 0, i32 4
  %85 = ptrtoint i8* %16 to i64
  %86 = atomicrmw add i32* %22, i32 1 monotonic
  %87 = getelementptr inbounds %"class.net::(anonymous namespace)::MultiThreadedProxyResolver", %"class.net::(anonymous namespace)::MultiThreadedProxyResolver"* %0, i64 0, i32 4, i32 1
  %88 = load i64, i64* %87, align 8
  %89 = getelementptr inbounds %"class.net::(anonymous namespace)::MultiThreadedProxyResolver", %"class.net::(anonymous namespace)::MultiThreadedProxyResolver"* %0, i64 0, i32 4, i32 2
  %90 = load i64, i64* %89, align 8
  %91 = icmp ult i64 %90, %88
  br i1 %91, label %96, label %92

92:                                               ; preds = %80
  %93 = sub i64 %90, %88
  %94 = getelementptr inbounds %"class.net::(anonymous namespace)::MultiThreadedProxyResolver", %"class.net::(anonymous namespace)::MultiThreadedProxyResolver"* %0, i64 0, i32 4, i32 0, i32 1
  %95 = load i64, i64* %94, align 8
  br label %101

96:                                               ; preds = %80
  %97 = getelementptr inbounds %"class.net::(anonymous namespace)::MultiThreadedProxyResolver", %"class.net::(anonymous namespace)::MultiThreadedProxyResolver"* %0, i64 0, i32 4, i32 0, i32 1
  %98 = load i64, i64* %97, align 8
  %99 = sub i64 %90, %88
  %100 = add i64 %99, %98
  br label %101

101:                                              ; preds = %96, %92
  %102 = phi i64 [ %95, %92 ], [ %98, %96 ]
  %103 = phi i64 [ %93, %92 ], [ %100, %96 ]
  %104 = add i64 %103, 1
  %105 = icmp eq i64 %102, 0
  %106 = add i64 %102, -1
  %107 = select i1 %105, i64 0, i64 %106
  %108 = icmp ult i64 %107, %104
  br i1 %108, label %109, label %119

109:                                              ; preds = %101
  %110 = icmp ugt i64 %104, 3
  %111 = select i1 %110, i64 %104, i64 3
  %112 = lshr i64 %107, 2
  %113 = add i64 %112, %107
  %114 = icmp ult i64 %111, %113
  %115 = select i1 %114, i64 %113, i64 %111
  call fastcc void @_ZN4base14circular_dequeI13scoped_refptrIN3net12_GLOBAL__N_13JobEEE13SetCapacityToEm(%"class.base::circular_deque"* %84, i64 %115) #14
  %116 = load i64, i64* %89, align 8
  %117 = getelementptr inbounds %"class.net::(anonymous namespace)::MultiThreadedProxyResolver", %"class.net::(anonymous namespace)::MultiThreadedProxyResolver"* %0, i64 0, i32 4, i32 0, i32 1
  %118 = load i64, i64* %117, align 8
  br label %119

119:                                              ; preds = %109, %101
  %120 = phi i64 [ %102, %101 ], [ %118, %109 ]
  %121 = phi i64 [ %90, %101 ], [ %116, %109 ]
  %122 = bitcast %"class.logging::CheckOpResult"* %12 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %122) #14
  %123 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %12, i64 0, i32 0
  %124 = getelementptr inbounds %"class.net::(anonymous namespace)::MultiThreadedProxyResolver", %"class.net::(anonymous namespace)::MultiThreadedProxyResolver"* %0, i64 0, i32 4, i32 0, i32 1
  %125 = bitcast %"class.logging::CheckOpResult"* %11 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %125) #14
  %126 = icmp ugt i64 %121, %120
  br i1 %126, label %128, label %127

127:                                              ; preds = %119
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %125) #14
  store i8* null, i8** %123, align 8
  br label %137

128:                                              ; preds = %119
  %129 = call i8* @_ZN7logging15CheckOpValueStrEm(i64 %121) #14
  %130 = call i8* @_ZN7logging15CheckOpValueStrEm(i64 %120) #14
  call void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"* nonnull %11, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.9, i64 0, i64 0), i8* %129, i8* %130) #14
  %131 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %11, i64 0, i32 0
  %132 = load i8*, i8** %131, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %125) #14
  store i8* %132, i8** %123, align 8
  %133 = icmp eq i8* %132, null
  br i1 %133, label %137, label %134

134:                                              ; preds = %128
  %135 = bitcast %"class.logging::CheckError"* %13 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %135) #14
  call void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* nonnull sret %13, i8* getelementptr inbounds ([38 x i8], [38 x i8]* @.str.8, i64 0, i64 0), i32 84, %"class.logging::CheckOpResult"* nonnull %12) #14
  %136 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %13) #14
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %13) #14
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %135) #14
  br label %137

137:                                              ; preds = %134, %128, %127
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %122) #14
  %138 = getelementptr inbounds %"class.base::circular_deque", %"class.base::circular_deque"* %84, i64 0, i32 0, i32 0
  %139 = load %class.scoped_refptr.36*, %class.scoped_refptr.36** %138, align 8
  %140 = getelementptr inbounds %class.scoped_refptr.36, %class.scoped_refptr.36* %139, i64 %121
  %141 = bitcast %class.scoped_refptr.36* %140 to i64*
  store i64 %85, i64* %141, align 8
  %142 = load i64, i64* %89, align 8
  %143 = load i64, i64* %124, align 8
  %144 = add i64 %143, -1
  %145 = icmp eq i64 %142, %144
  br i1 %145, label %146, label %147

146:                                              ; preds = %137
  store i64 0, i64* %89, align 8
  br label %150

147:                                              ; preds = %137
  %148 = add i64 %142, 1
  store i64 %148, i64* %89, align 8
  %149 = icmp eq i64 %148, 0
  br i1 %149, label %150, label %151

150:                                              ; preds = %147, %146
  br label %151

151:                                              ; preds = %150, %147
  %152 = phi i64 [ %144, %150 ], [ %142, %147 ]
  %153 = bitcast %"class.logging::CheckOpResult"* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %153) #14
  %154 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %9, i64 0, i32 0
  store i8* inttoptr (i64 -6148914691236517206 to i8*), i8** %154, align 8
  %155 = bitcast %"class.logging::CheckOpResult"* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %155) #14
  %156 = icmp ult i64 %143, %152
  br i1 %156, label %158, label %157

157:                                              ; preds = %151
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %155) #14
  store i8* null, i8** %154, align 8
  br label %167

158:                                              ; preds = %151
  %159 = call i8* @_ZN7logging15CheckOpValueStrEm(i64 %152) #14
  %160 = call i8* @_ZN7logging15CheckOpValueStrEm(i64 %143) #14
  call void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"* nonnull %8, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.9, i64 0, i64 0), i8* %159, i8* %160) #14
  %161 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %8, i64 0, i32 0
  %162 = load i8*, i8** %161, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %155) #14
  store i8* %162, i8** %154, align 8
  %163 = icmp eq i8* %162, null
  br i1 %163, label %167, label %164

164:                                              ; preds = %158
  %165 = bitcast %"class.logging::CheckError"* %10 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %165) #14
  call void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* nonnull sret %10, i8* getelementptr inbounds ([38 x i8], [38 x i8]* @.str.8, i64 0, i64 0), i32 89, %"class.logging::CheckOpResult"* nonnull %9) #14
  %166 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %10) #14
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %10) #14
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %165) #14
  br label %167

167:                                              ; preds = %164, %158, %157
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %153) #14
  %168 = getelementptr inbounds %"class.net::(anonymous namespace)::MultiThreadedProxyResolver", %"class.net::(anonymous namespace)::MultiThreadedProxyResolver"* %0, i64 0, i32 5
  %169 = bitcast %class.scoped_refptr.34** %63 to i64*
  %170 = load i64, i64* %169, align 8
  %171 = bitcast %"class.std::__1::vector.106"* %168 to i64*
  %172 = load i64, i64* %171, align 8
  %173 = sub i64 %170, %172
  %174 = ashr exact i64 %173, 3
  %175 = getelementptr inbounds %"class.net::(anonymous namespace)::MultiThreadedProxyResolver", %"class.net::(anonymous namespace)::MultiThreadedProxyResolver"* %0, i64 0, i32 3
  %176 = load i64, i64* %175, align 8
  %177 = icmp ult i64 %174, %176
  br i1 %177, label %178, label %354

178:                                              ; preds = %167
  %179 = lshr exact i64 %173, 3
  %180 = trunc i64 %179 to i32
  %181 = call i8* @_Znwm(i64 48) #15
  %182 = bitcast i8* %181 to %"class.net::(anonymous namespace)::Executor"*
  %183 = getelementptr inbounds %"class.net::(anonymous namespace)::MultiThreadedProxyResolver", %"class.net::(anonymous namespace)::MultiThreadedProxyResolver"* %0, i64 0, i32 1
  call fastcc void @_ZN3net12_GLOBAL__N_18ExecutorC2EPNS1_11CoordinatorEi(%"class.net::(anonymous namespace)::Executor"* nonnull %182, %"class.net::(anonymous namespace)::Executor::Coordinator"* %183, i32 %180) #14
  %184 = call i8* @_Znwm(i64 56) #15
  %185 = getelementptr inbounds %"class.net::(anonymous namespace)::MultiThreadedProxyResolver", %"class.net::(anonymous namespace)::MultiThreadedProxyResolver"* %0, i64 0, i32 2, i32 0, i32 0, i32 0
  %186 = bitcast %"class.net::ProxyResolverFactory"** %185 to i64*
  %187 = load i64, i64* %186, align 8
  %188 = getelementptr inbounds i8, i8* %184, i64 8
  %189 = bitcast i8* %188 to i32*
  store i32 0, i32* %189, align 4
  %190 = bitcast i8* %184 to i32 (...)***
  %191 = getelementptr inbounds i8, i8* %184, i64 16
  %192 = bitcast i8* %191 to %"class.net::(anonymous namespace)::Executor"**
  store %"class.net::(anonymous namespace)::Executor"* null, %"class.net::(anonymous namespace)::Executor"** %192, align 8
  %193 = getelementptr inbounds i8, i8* %184, i64 24
  store i8 0, i8* %193, align 8
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [7 x i8*] }, { [7 x i8*] }* @_ZTVN3net12_GLOBAL__N_117CreateResolverJobE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %190, align 8
  %194 = getelementptr inbounds %"class.net::(anonymous namespace)::MultiThreadedProxyResolver", %"class.net::(anonymous namespace)::MultiThreadedProxyResolver"* %0, i64 0, i32 6, i32 0
  %195 = load %"class.net::PacFileData"*, %"class.net::PacFileData"** %194, align 8
  %196 = getelementptr inbounds i8, i8* %184, i64 32
  %197 = bitcast i8* %196 to %"class.net::PacFileData"**
  store %"class.net::PacFileData"* %195, %"class.net::PacFileData"** %197, align 8
  %198 = icmp eq %"class.net::PacFileData"* %195, null
  br i1 %198, label %202, label %199

199:                                              ; preds = %178
  %200 = getelementptr inbounds %"class.net::PacFileData", %"class.net::PacFileData"* %195, i64 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %201 = atomicrmw add i32* %200, i32 1 monotonic
  br label %202

202:                                              ; preds = %199, %178
  %203 = getelementptr inbounds i8, i8* %184, i64 40
  %204 = bitcast i8* %203 to i64*
  store i64 %187, i64* %204, align 8
  %205 = getelementptr inbounds i8, i8* %184, i64 48
  %206 = bitcast i8* %205 to i64*
  store i64 0, i64* %206, align 8
  %207 = bitcast i8* %184 to %"class.net::(anonymous namespace)::Job"*
  call fastcc void @_ZN3net12_GLOBAL__N_18Executor8StartJobEPNS0_3JobE(%"class.net::(anonymous namespace)::Executor"* nonnull %182, %"class.net::(anonymous namespace)::Job"* nonnull %207) #14
  %208 = bitcast i8* %181 to i32*
  %209 = atomicrmw add i32* %208, i32 1 monotonic
  %210 = ptrtoint i8* %181 to i64
  %211 = load %class.scoped_refptr.34*, %class.scoped_refptr.34** %63, align 8
  %212 = getelementptr inbounds %"class.net::(anonymous namespace)::MultiThreadedProxyResolver", %"class.net::(anonymous namespace)::MultiThreadedProxyResolver"* %0, i64 0, i32 5, i32 0, i32 2, i32 0, i32 0
  %213 = load %class.scoped_refptr.34*, %class.scoped_refptr.34** %212, align 8
  %214 = icmp ult %class.scoped_refptr.34* %211, %213
  %215 = ptrtoint %class.scoped_refptr.34* %213 to i64
  br i1 %214, label %216, label %220

216:                                              ; preds = %202
  %217 = bitcast %class.scoped_refptr.34* %211 to i64*
  store i64 %210, i64* %217, align 8
  %218 = getelementptr inbounds %class.scoped_refptr.34, %class.scoped_refptr.34* %211, i64 1
  %219 = ptrtoint %class.scoped_refptr.34* %218 to i64
  store i64 %219, i64* %169, align 8
  br label %354

220:                                              ; preds = %202
  %221 = ptrtoint %class.scoped_refptr.34* %211 to i64
  %222 = getelementptr inbounds %"class.net::(anonymous namespace)::MultiThreadedProxyResolver", %"class.net::(anonymous namespace)::MultiThreadedProxyResolver"* %0, i64 0, i32 5, i32 0, i32 2
  %223 = bitcast %"struct.std::__1::__split_buffer"* %14 to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %223) #14
  %224 = getelementptr inbounds %"struct.std::__1::__split_buffer", %"struct.std::__1::__split_buffer"* %14, i64 0, i32 0
  %225 = getelementptr inbounds %"struct.std::__1::__split_buffer", %"struct.std::__1::__split_buffer"* %14, i64 0, i32 1
  %226 = getelementptr inbounds %"struct.std::__1::__split_buffer", %"struct.std::__1::__split_buffer"* %14, i64 0, i32 2
  %227 = getelementptr inbounds %"struct.std::__1::__split_buffer", %"struct.std::__1::__split_buffer"* %14, i64 0, i32 3, i32 0, i32 0
  %228 = getelementptr inbounds %"struct.std::__1::__split_buffer", %"struct.std::__1::__split_buffer"* %14, i64 0, i32 3, i32 1, i32 0
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %223, i8 -86, i64 40, i1 false) #14
  %229 = load i64, i64* %171, align 8
  %230 = sub i64 %221, %229
  %231 = ashr exact i64 %230, 3
  %232 = add nsw i64 %231, 1
  %233 = icmp ugt i64 %232, 2305843009213693951
  br i1 %233, label %234, label %236

234:                                              ; preds = %220
  %235 = bitcast %"class.std::__1::vector.106"* %168 to %"class.std::__1::__vector_base_common"*
  call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %235) #16
  unreachable

236:                                              ; preds = %220
  %237 = bitcast %class.scoped_refptr.34** %212 to i64*
  %238 = sub i64 %215, %229
  %239 = ashr exact i64 %238, 3
  %240 = icmp ult i64 %239, 1152921504606846975
  br i1 %240, label %243, label %241

241:                                              ; preds = %236
  store %class.scoped_refptr.34* null, %class.scoped_refptr.34** %227, align 8
  %242 = bitcast %"class.std::__1::allocator.111"** %228 to %"class.std::__1::__compressed_pair.108"**
  store %"class.std::__1::__compressed_pair.108"* %222, %"class.std::__1::__compressed_pair.108"** %242, align 8
  br label %252

243:                                              ; preds = %236
  %244 = ashr exact i64 %238, 2
  %245 = icmp ult i64 %244, %232
  %246 = select i1 %245, i64 %232, i64 %244
  store %class.scoped_refptr.34* null, %class.scoped_refptr.34** %227, align 8
  %247 = bitcast %"class.std::__1::allocator.111"** %228 to %"class.std::__1::__compressed_pair.108"**
  store %"class.std::__1::__compressed_pair.108"* %222, %"class.std::__1::__compressed_pair.108"** %247, align 8
  %248 = icmp eq i64 %246, 0
  br i1 %248, label %257, label %249

249:                                              ; preds = %243
  %250 = icmp ugt i64 %246, 2305843009213693951
  br i1 %250, label %251, label %252

251:                                              ; preds = %249
  call void @abort() #16
  unreachable

252:                                              ; preds = %249, %241
  %253 = phi i64 [ 2305843009213693951, %241 ], [ %246, %249 ]
  %254 = shl i64 %253, 3
  %255 = call i8* @_Znwm(i64 %254) #15
  %256 = bitcast i8* %255 to %class.scoped_refptr.34*
  br label %257

257:                                              ; preds = %252, %243
  %258 = phi i64 [ %253, %252 ], [ 0, %243 ]
  %259 = phi %class.scoped_refptr.34* [ %256, %252 ], [ null, %243 ]
  store %class.scoped_refptr.34* %259, %class.scoped_refptr.34** %224, align 8
  %260 = getelementptr inbounds %class.scoped_refptr.34, %class.scoped_refptr.34* %259, i64 %231
  store %class.scoped_refptr.34* %260, %class.scoped_refptr.34** %225, align 8
  %261 = getelementptr inbounds %class.scoped_refptr.34, %class.scoped_refptr.34* %259, i64 %258
  store %class.scoped_refptr.34* %261, %class.scoped_refptr.34** %227, align 8
  %262 = bitcast %class.scoped_refptr.34* %260 to i64*
  store i64 %210, i64* %262, align 8
  %263 = getelementptr inbounds %class.scoped_refptr.34, %class.scoped_refptr.34* %260, i64 1
  store %class.scoped_refptr.34* %263, %class.scoped_refptr.34** %226, align 8
  %264 = getelementptr inbounds %"class.std::__1::vector.106", %"class.std::__1::vector.106"* %168, i64 0, i32 0, i32 0
  %265 = load %class.scoped_refptr.34*, %class.scoped_refptr.34** %264, align 8
  %266 = ptrtoint %class.scoped_refptr.34* %265 to i64
  %267 = load %class.scoped_refptr.34*, %class.scoped_refptr.34** %63, align 8
  %268 = icmp eq %class.scoped_refptr.34* %267, %265
  br i1 %268, label %296, label %269

269:                                              ; preds = %257
  %270 = getelementptr %class.scoped_refptr.34, %class.scoped_refptr.34* %267, i64 -1, i32 0
  %271 = ptrtoint %"class.net::(anonymous namespace)::Executor"** %270 to i64
  %272 = sub i64 %271, %266
  %273 = lshr i64 %272, 3
  %274 = add nuw nsw i64 %273, 1
  %275 = and i64 %274, 3
  %276 = icmp eq i64 %275, 0
  br i1 %276, label %291, label %277

277:                                              ; preds = %269, %277
  %278 = phi %class.scoped_refptr.34* [ %288, %277 ], [ %260, %269 ]
  %279 = phi %class.scoped_refptr.34* [ %282, %277 ], [ %267, %269 ]
  %280 = phi i64 [ %289, %277 ], [ %275, %269 ]
  %281 = getelementptr inbounds %class.scoped_refptr.34, %class.scoped_refptr.34* %278, i64 -1
  %282 = getelementptr inbounds %class.scoped_refptr.34, %class.scoped_refptr.34* %279, i64 -1
  %283 = getelementptr inbounds %class.scoped_refptr.34, %class.scoped_refptr.34* %282, i64 0, i32 0
  %284 = bitcast %class.scoped_refptr.34* %282 to i64*
  %285 = load i64, i64* %284, align 8
  %286 = bitcast %class.scoped_refptr.34* %281 to i64*
  store i64 %285, i64* %286, align 8
  store %"class.net::(anonymous namespace)::Executor"* null, %"class.net::(anonymous namespace)::Executor"** %283, align 8
  %287 = load %class.scoped_refptr.34*, %class.scoped_refptr.34** %225, align 8
  %288 = getelementptr inbounds %class.scoped_refptr.34, %class.scoped_refptr.34* %287, i64 -1
  store %class.scoped_refptr.34* %288, %class.scoped_refptr.34** %225, align 8
  %289 = add i64 %280, -1
  %290 = icmp eq i64 %289, 0
  br i1 %290, label %291, label %277, !llvm.loop !18

291:                                              ; preds = %277, %269
  %292 = phi %class.scoped_refptr.34* [ undef, %269 ], [ %288, %277 ]
  %293 = phi %class.scoped_refptr.34* [ %260, %269 ], [ %288, %277 ]
  %294 = phi %class.scoped_refptr.34* [ %267, %269 ], [ %282, %277 ]
  %295 = icmp ult i64 %272, 24
  br i1 %295, label %336, label %300

296:                                              ; preds = %257
  %297 = insertelement <2 x %class.scoped_refptr.34*> undef, %class.scoped_refptr.34* %263, i32 0
  %298 = insertelement <2 x %class.scoped_refptr.34*> %297, %class.scoped_refptr.34* %261, i32 1
  %299 = ptrtoint <2 x %class.scoped_refptr.34*> %298 to <2 x i64>
  br label %342

300:                                              ; preds = %291, %300
  %301 = phi %class.scoped_refptr.34* [ %334, %300 ], [ %293, %291 ]
  %302 = phi %class.scoped_refptr.34* [ %328, %300 ], [ %294, %291 ]
  %303 = getelementptr inbounds %class.scoped_refptr.34, %class.scoped_refptr.34* %301, i64 -1
  %304 = getelementptr inbounds %class.scoped_refptr.34, %class.scoped_refptr.34* %302, i64 -1
  %305 = getelementptr inbounds %class.scoped_refptr.34, %class.scoped_refptr.34* %304, i64 0, i32 0
  %306 = bitcast %class.scoped_refptr.34* %304 to i64*
  %307 = load i64, i64* %306, align 8
  %308 = bitcast %class.scoped_refptr.34* %303 to i64*
  store i64 %307, i64* %308, align 8
  store %"class.net::(anonymous namespace)::Executor"* null, %"class.net::(anonymous namespace)::Executor"** %305, align 8
  %309 = load %class.scoped_refptr.34*, %class.scoped_refptr.34** %225, align 8
  %310 = getelementptr inbounds %class.scoped_refptr.34, %class.scoped_refptr.34* %309, i64 -1
  store %class.scoped_refptr.34* %310, %class.scoped_refptr.34** %225, align 8
  %311 = getelementptr inbounds %class.scoped_refptr.34, %class.scoped_refptr.34* %309, i64 -2
  %312 = getelementptr inbounds %class.scoped_refptr.34, %class.scoped_refptr.34* %302, i64 -2
  %313 = getelementptr inbounds %class.scoped_refptr.34, %class.scoped_refptr.34* %312, i64 0, i32 0
  %314 = bitcast %class.scoped_refptr.34* %312 to i64*
  %315 = load i64, i64* %314, align 8
  %316 = bitcast %class.scoped_refptr.34* %311 to i64*
  store i64 %315, i64* %316, align 8
  store %"class.net::(anonymous namespace)::Executor"* null, %"class.net::(anonymous namespace)::Executor"** %313, align 8
  %317 = load %class.scoped_refptr.34*, %class.scoped_refptr.34** %225, align 8
  %318 = getelementptr inbounds %class.scoped_refptr.34, %class.scoped_refptr.34* %317, i64 -1
  store %class.scoped_refptr.34* %318, %class.scoped_refptr.34** %225, align 8
  %319 = getelementptr inbounds %class.scoped_refptr.34, %class.scoped_refptr.34* %317, i64 -2
  %320 = getelementptr inbounds %class.scoped_refptr.34, %class.scoped_refptr.34* %302, i64 -3
  %321 = getelementptr inbounds %class.scoped_refptr.34, %class.scoped_refptr.34* %320, i64 0, i32 0
  %322 = bitcast %class.scoped_refptr.34* %320 to i64*
  %323 = load i64, i64* %322, align 8
  %324 = bitcast %class.scoped_refptr.34* %319 to i64*
  store i64 %323, i64* %324, align 8
  store %"class.net::(anonymous namespace)::Executor"* null, %"class.net::(anonymous namespace)::Executor"** %321, align 8
  %325 = load %class.scoped_refptr.34*, %class.scoped_refptr.34** %225, align 8
  %326 = getelementptr inbounds %class.scoped_refptr.34, %class.scoped_refptr.34* %325, i64 -1
  store %class.scoped_refptr.34* %326, %class.scoped_refptr.34** %225, align 8
  %327 = getelementptr inbounds %class.scoped_refptr.34, %class.scoped_refptr.34* %325, i64 -2
  %328 = getelementptr inbounds %class.scoped_refptr.34, %class.scoped_refptr.34* %302, i64 -4
  %329 = getelementptr inbounds %class.scoped_refptr.34, %class.scoped_refptr.34* %328, i64 0, i32 0
  %330 = bitcast %class.scoped_refptr.34* %328 to i64*
  %331 = load i64, i64* %330, align 8
  %332 = bitcast %class.scoped_refptr.34* %327 to i64*
  store i64 %331, i64* %332, align 8
  store %"class.net::(anonymous namespace)::Executor"* null, %"class.net::(anonymous namespace)::Executor"** %329, align 8
  %333 = load %class.scoped_refptr.34*, %class.scoped_refptr.34** %225, align 8
  %334 = getelementptr inbounds %class.scoped_refptr.34, %class.scoped_refptr.34* %333, i64 -1
  store %class.scoped_refptr.34* %334, %class.scoped_refptr.34** %225, align 8
  %335 = icmp eq %class.scoped_refptr.34* %328, %265
  br i1 %335, label %336, label %300

336:                                              ; preds = %300, %291
  %337 = phi %class.scoped_refptr.34* [ %292, %291 ], [ %334, %300 ]
  %338 = load i64, i64* %171, align 8
  %339 = load i64, i64* %169, align 8
  %340 = bitcast %class.scoped_refptr.34** %226 to <2 x i64>*
  %341 = load <2 x i64>, <2 x i64>* %340, align 8
  br label %342

342:                                              ; preds = %336, %296
  %343 = phi i64 [ %266, %296 ], [ %339, %336 ]
  %344 = phi %class.scoped_refptr.34* [ %260, %296 ], [ %337, %336 ]
  %345 = phi i64 [ %266, %296 ], [ %338, %336 ]
  %346 = phi <2 x i64> [ %299, %296 ], [ %341, %336 ]
  %347 = bitcast %class.scoped_refptr.34** %226 to i64*
  %348 = bitcast %class.scoped_refptr.34** %227 to i64*
  %349 = ptrtoint %class.scoped_refptr.34* %344 to i64
  %350 = bitcast %class.scoped_refptr.34** %225 to i64*
  store i64 %349, i64* %171, align 8
  store i64 %345, i64* %350, align 8
  store i64 %343, i64* %347, align 8
  %351 = load i64, i64* %237, align 8
  %352 = bitcast %class.scoped_refptr.34** %63 to <2 x i64>*
  store <2 x i64> %346, <2 x i64>* %352, align 8
  store i64 %351, i64* %348, align 8
  %353 = bitcast %"struct.std::__1::__split_buffer"* %14 to i64*
  store i64 %345, i64* %353, align 8
  call fastcc void @_ZNSt3__114__split_bufferI13scoped_refptrIN3net12_GLOBAL__N_18ExecutorEERNS_9allocatorIS5_EEED2Ev(%"struct.std::__1::__split_buffer"* nonnull %14) #14
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %223) #14
  br label %354

354:                                              ; preds = %78, %167, %216, %342
  %355 = atomicrmw sub i32* %22, i32 1 acq_rel
  %356 = icmp eq i32 %355, 1
  br i1 %356, label %357, label %363

357:                                              ; preds = %354
  %358 = bitcast i8* %16 to %"class.net::(anonymous namespace)::Job"*
  %359 = bitcast i8* %16 to void (%"class.net::(anonymous namespace)::Job"*)***
  %360 = load void (%"class.net::(anonymous namespace)::Job"*)**, void (%"class.net::(anonymous namespace)::Job"*)*** %359, align 8
  %361 = getelementptr inbounds void (%"class.net::(anonymous namespace)::Job"*)*, void (%"class.net::(anonymous namespace)::Job"*)** %360, i64 4
  %362 = load void (%"class.net::(anonymous namespace)::Job"*)*, void (%"class.net::(anonymous namespace)::Job"*)** %361, align 8
  call void %362(%"class.net::(anonymous namespace)::Job"* nonnull %358) #14
  br label %363

363:                                              ; preds = %354, %357
  ret i32 -1
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN3net12_GLOBAL__N_126MultiThreadedProxyResolver15OnExecutorReadyEPNS0_8ExecutorE(%"class.net::(anonymous namespace)::MultiThreadedProxyResolver"* nocapture, %"class.net::(anonymous namespace)::Executor"*) unnamed_addr #0 align 2 {
  %3 = alloca %"class.logging::CheckOpResult", align 8
  %4 = alloca %"class.logging::CheckOpResult", align 8
  %5 = alloca %"class.logging::CheckOpResult", align 8
  %6 = alloca %"class.logging::CheckError", align 8
  %7 = alloca %"class.logging::CheckOpResult", align 8
  %8 = alloca %"class.logging::CheckError", align 8
  %9 = alloca %"class.logging::CheckOpResult", align 8
  %10 = alloca %"class.logging::CheckOpResult", align 8
  %11 = alloca %"class.logging::CheckError", align 8
  %12 = getelementptr inbounds %"class.net::(anonymous namespace)::MultiThreadedProxyResolver", %"class.net::(anonymous namespace)::MultiThreadedProxyResolver"* %0, i64 0, i32 4
  %13 = getelementptr inbounds %"class.net::(anonymous namespace)::MultiThreadedProxyResolver", %"class.net::(anonymous namespace)::MultiThreadedProxyResolver"* %0, i64 0, i32 4, i32 1
  %14 = load i64, i64* %13, align 8
  %15 = getelementptr inbounds %"class.net::(anonymous namespace)::MultiThreadedProxyResolver", %"class.net::(anonymous namespace)::MultiThreadedProxyResolver"* %0, i64 0, i32 4, i32 2
  %16 = load i64, i64* %15, align 8
  %17 = icmp eq i64 %14, %16
  br i1 %17, label %144, label %18

18:                                               ; preds = %2
  %19 = bitcast %"class.logging::CheckOpResult"* %10 to i8*
  %20 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %10, i64 0, i32 0
  %21 = getelementptr inbounds %"class.net::(anonymous namespace)::MultiThreadedProxyResolver", %"class.net::(anonymous namespace)::MultiThreadedProxyResolver"* %0, i64 0, i32 4, i32 0, i32 1
  %22 = bitcast %"class.logging::CheckOpResult"* %9 to i8*
  %23 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %9, i64 0, i32 0
  %24 = bitcast %"class.logging::CheckError"* %11 to i8*
  %25 = getelementptr inbounds %"class.base::circular_deque", %"class.base::circular_deque"* %12, i64 0, i32 0, i32 0
  %26 = bitcast %"class.logging::CheckOpResult"* %7 to i8*
  %27 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %7, i64 0, i32 0
  %28 = bitcast %"class.logging::CheckOpResult"* %4 to i8*
  %29 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %4, i64 0, i32 0
  %30 = bitcast %"class.logging::CheckError"* %8 to i8*
  %31 = bitcast %"class.logging::CheckOpResult"* %5 to i8*
  %32 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %5, i64 0, i32 0
  %33 = bitcast %"class.logging::CheckOpResult"* %3 to i8*
  %34 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %3, i64 0, i32 0
  %35 = bitcast %"class.logging::CheckError"* %6 to i8*
  br label %36

36:                                               ; preds = %18, %140
  %37 = phi i64 [ %14, %18 ], [ %141, %140 ]
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %19) #14
  %38 = load i64, i64* %21, align 8
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %22) #14
  %39 = icmp ugt i64 %37, %38
  br i1 %39, label %41, label %40

40:                                               ; preds = %36
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %22) #14
  store i8* null, i8** %20, align 8
  br label %48

41:                                               ; preds = %36
  %42 = call i8* @_ZN7logging15CheckOpValueStrEm(i64 %37) #14
  %43 = call i8* @_ZN7logging15CheckOpValueStrEm(i64 %38) #14
  call void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"* nonnull %9, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.9, i64 0, i64 0), i8* %42, i8* %43) #14
  %44 = load i8*, i8** %23, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %22) #14
  store i8* %44, i8** %20, align 8
  %45 = icmp eq i8* %44, null
  br i1 %45, label %48, label %46

46:                                               ; preds = %41
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %24) #14
  call void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* nonnull sret %11, i8* getelementptr inbounds ([38 x i8], [38 x i8]* @.str.8, i64 0, i64 0), i32 84, %"class.logging::CheckOpResult"* nonnull %10) #14
  %47 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %11) #14
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %11) #14
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %24) #14
  br label %48

48:                                               ; preds = %40, %41, %46
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %19) #14
  %49 = load %class.scoped_refptr.36*, %class.scoped_refptr.36** %25, align 8
  %50 = getelementptr inbounds %class.scoped_refptr.36, %class.scoped_refptr.36* %49, i64 %37, i32 0
  %51 = load %"class.net::(anonymous namespace)::Job"*, %"class.net::(anonymous namespace)::Job"** %50, align 8
  %52 = icmp eq %"class.net::(anonymous namespace)::Job"* %51, null
  br i1 %52, label %56, label %53

53:                                               ; preds = %48
  %54 = getelementptr inbounds %"class.net::(anonymous namespace)::Job", %"class.net::(anonymous namespace)::Job"* %51, i64 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %55 = atomicrmw add i32* %54, i32 1 monotonic
  br label %56

56:                                               ; preds = %48, %53
  %57 = load i64, i64* %13, align 8
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %26) #14
  %58 = load i64, i64* %21, align 8
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %28) #14
  %59 = icmp ugt i64 %57, %58
  br i1 %59, label %61, label %60

60:                                               ; preds = %56
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %28) #14
  store i8* null, i8** %27, align 8
  br label %68

61:                                               ; preds = %56
  %62 = call i8* @_ZN7logging15CheckOpValueStrEm(i64 %57) #14
  %63 = call i8* @_ZN7logging15CheckOpValueStrEm(i64 %58) #14
  call void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"* nonnull %4, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.9, i64 0, i64 0), i8* %62, i8* %63) #14
  %64 = load i8*, i8** %29, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %28) #14
  store i8* %64, i8** %27, align 8
  %65 = icmp eq i8* %64, null
  br i1 %65, label %68, label %66

66:                                               ; preds = %61
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %30) #14
  call void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* nonnull sret %8, i8* getelementptr inbounds ([38 x i8], [38 x i8]* @.str.8, i64 0, i64 0), i32 84, %"class.logging::CheckOpResult"* nonnull %7) #14
  %67 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %8) #14
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %8) #14
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %30) #14
  br label %68

68:                                               ; preds = %66, %61, %60
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %26) #14
  %69 = load %class.scoped_refptr.36*, %class.scoped_refptr.36** %25, align 8
  %70 = getelementptr inbounds %class.scoped_refptr.36, %class.scoped_refptr.36* %69, i64 %57
  %71 = load i64, i64* %13, align 8
  %72 = add i64 %71, 1
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %31) #14
  %73 = load i64, i64* %21, align 8
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %33) #14
  %74 = icmp ugt i64 %72, %73
  br i1 %74, label %76, label %75

75:                                               ; preds = %68
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %33) #14
  store i8* null, i8** %32, align 8
  br label %83

76:                                               ; preds = %68
  %77 = call i8* @_ZN7logging15CheckOpValueStrEm(i64 %72) #14
  %78 = call i8* @_ZN7logging15CheckOpValueStrEm(i64 %73) #14
  call void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"* nonnull %3, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.9, i64 0, i64 0), i8* %77, i8* %78) #14
  %79 = load i8*, i8** %34, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %33) #14
  store i8* %79, i8** %32, align 8
  %80 = icmp eq i8* %79, null
  br i1 %80, label %83, label %81

81:                                               ; preds = %76
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %35) #14
  call void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* nonnull sret %6, i8* getelementptr inbounds ([38 x i8], [38 x i8]* @.str.8, i64 0, i64 0), i32 84, %"class.logging::CheckOpResult"* nonnull %5) #14
  %82 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %6) #14
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %6) #14
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %35) #14
  br label %83

83:                                               ; preds = %81, %76, %75
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %31) #14
  %84 = load %class.scoped_refptr.36*, %class.scoped_refptr.36** %25, align 8
  %85 = getelementptr inbounds %class.scoped_refptr.36, %class.scoped_refptr.36* %84, i64 %72
  call fastcc void @_ZN4base8internal12VectorBufferI13scoped_refptrIN3net12_GLOBAL__N_13JobEEE13DestructRangeIS6_Li0EEEvPS6_S9_(%class.scoped_refptr.36* %70, %class.scoped_refptr.36* %85) #14
  %86 = load i64, i64* %13, align 8
  %87 = add i64 %86, 1
  %88 = load i64, i64* %21, align 8
  %89 = icmp eq i64 %87, %88
  %90 = select i1 %89, i64 0, i64 %87
  store i64 %90, i64* %13, align 8
  %91 = icmp eq i64 %88, 0
  %92 = add i64 %88, -1
  %93 = select i1 %91, i64 0, i64 %92
  %94 = icmp ult i64 %93, 4
  br i1 %94, label %110, label %95

95:                                               ; preds = %83
  %96 = load i64, i64* %15, align 8
  %97 = icmp ult i64 %96, %90
  %98 = sub i64 %96, %90
  %99 = select i1 %97, i64 %88, i64 0
  %100 = add i64 %99, %98
  %101 = sub i64 %93, %100
  %102 = icmp ult i64 %101, %100
  br i1 %102, label %110, label %103

103:                                              ; preds = %95
  %104 = lshr i64 %100, 2
  %105 = add i64 %104, %100
  %106 = icmp ugt i64 %105, 3
  %107 = select i1 %106, i64 %105, i64 3
  %108 = icmp ult i64 %107, %93
  br i1 %108, label %109, label %110

109:                                              ; preds = %103
  call fastcc void @_ZN4base14circular_dequeI13scoped_refptrIN3net12_GLOBAL__N_13JobEEE13SetCapacityToEm(%"class.base::circular_deque"* %12, i64 %107) #14
  br label %110

110:                                              ; preds = %83, %95, %103, %109
  %111 = getelementptr inbounds %"class.net::(anonymous namespace)::Job", %"class.net::(anonymous namespace)::Job"* %51, i64 0, i32 4
  %112 = load i8, i8* %111, align 8, !range !17
  %113 = icmp eq i8 %112, 0
  br i1 %113, label %114, label %127

114:                                              ; preds = %110
  call fastcc void @_ZN3net12_GLOBAL__N_18Executor8StartJobEPNS0_3JobE(%"class.net::(anonymous namespace)::Executor"* %1, %"class.net::(anonymous namespace)::Job"* %51)
  br i1 %52, label %144, label %115

115:                                              ; preds = %114
  %116 = getelementptr inbounds %"class.net::(anonymous namespace)::Job", %"class.net::(anonymous namespace)::Job"* %51, i64 0, i32 1
  %117 = getelementptr inbounds %"class.base::RefCountedThreadSafe.37", %"class.base::RefCountedThreadSafe.37"* %116, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %118 = atomicrmw sub i32* %117, i32 1 acq_rel
  %119 = icmp eq i32 %118, 1
  br i1 %119, label %120, label %144

120:                                              ; preds = %115
  %121 = getelementptr inbounds %"class.base::RefCountedThreadSafe.37", %"class.base::RefCountedThreadSafe.37"* %116, i64 -2
  %122 = bitcast %"class.base::RefCountedThreadSafe.37"* %121 to %"class.net::(anonymous namespace)::Job"*
  %123 = bitcast %"class.base::RefCountedThreadSafe.37"* %121 to void (%"class.net::(anonymous namespace)::Job"*)***
  %124 = load void (%"class.net::(anonymous namespace)::Job"*)**, void (%"class.net::(anonymous namespace)::Job"*)*** %123, align 8
  %125 = getelementptr inbounds void (%"class.net::(anonymous namespace)::Job"*)*, void (%"class.net::(anonymous namespace)::Job"*)** %124, i64 4
  %126 = load void (%"class.net::(anonymous namespace)::Job"*)*, void (%"class.net::(anonymous namespace)::Job"*)** %125, align 8
  call void %126(%"class.net::(anonymous namespace)::Job"* nonnull %122) #14
  br label %144

127:                                              ; preds = %110
  br i1 %52, label %140, label %128

128:                                              ; preds = %127
  %129 = getelementptr inbounds %"class.net::(anonymous namespace)::Job", %"class.net::(anonymous namespace)::Job"* %51, i64 0, i32 1
  %130 = getelementptr inbounds %"class.base::RefCountedThreadSafe.37", %"class.base::RefCountedThreadSafe.37"* %129, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %131 = atomicrmw sub i32* %130, i32 1 acq_rel
  %132 = icmp eq i32 %131, 1
  br i1 %132, label %133, label %140

133:                                              ; preds = %128
  %134 = getelementptr inbounds %"class.base::RefCountedThreadSafe.37", %"class.base::RefCountedThreadSafe.37"* %129, i64 -2
  %135 = bitcast %"class.base::RefCountedThreadSafe.37"* %134 to %"class.net::(anonymous namespace)::Job"*
  %136 = bitcast %"class.base::RefCountedThreadSafe.37"* %134 to void (%"class.net::(anonymous namespace)::Job"*)***
  %137 = load void (%"class.net::(anonymous namespace)::Job"*)**, void (%"class.net::(anonymous namespace)::Job"*)*** %136, align 8
  %138 = getelementptr inbounds void (%"class.net::(anonymous namespace)::Job"*)*, void (%"class.net::(anonymous namespace)::Job"*)** %137, i64 4
  %139 = load void (%"class.net::(anonymous namespace)::Job"*)*, void (%"class.net::(anonymous namespace)::Job"*)** %138, align 8
  call void %139(%"class.net::(anonymous namespace)::Job"* nonnull %135) #14
  br label %140

140:                                              ; preds = %127, %128, %133
  %141 = load i64, i64* %13, align 8
  %142 = load i64, i64* %15, align 8
  %143 = icmp eq i64 %141, %142
  br i1 %143, label %144, label %36

144:                                              ; preds = %140, %2, %120, %115, %114
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZThn8_N3net12_GLOBAL__N_126MultiThreadedProxyResolver15OnExecutorReadyEPNS0_8ExecutorE(%"class.net::(anonymous namespace)::MultiThreadedProxyResolver"* nocapture, %"class.net::(anonymous namespace)::Executor"*) unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.net::(anonymous namespace)::MultiThreadedProxyResolver", %"class.net::(anonymous namespace)::MultiThreadedProxyResolver"* %0, i64 -1, i32 6
  %4 = bitcast %class.scoped_refptr* %3 to %"class.net::(anonymous namespace)::MultiThreadedProxyResolver"*
  tail call void @_ZN3net12_GLOBAL__N_126MultiThreadedProxyResolver15OnExecutorReadyEPNS0_8ExecutorE(%"class.net::(anonymous namespace)::MultiThreadedProxyResolver"* %4, %"class.net::(anonymous namespace)::Executor"* %1)
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZThn8_N3net12_GLOBAL__N_126MultiThreadedProxyResolverD1Ev(%"class.net::(anonymous namespace)::MultiThreadedProxyResolver"* nocapture) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.net::(anonymous namespace)::MultiThreadedProxyResolver", %"class.net::(anonymous namespace)::MultiThreadedProxyResolver"* %0, i64 -1, i32 6
  %3 = bitcast %class.scoped_refptr* %2 to %"class.net::(anonymous namespace)::MultiThreadedProxyResolver"*
  tail call void @_ZN3net12_GLOBAL__N_126MultiThreadedProxyResolverD2Ev(%"class.net::(anonymous namespace)::MultiThreadedProxyResolver"* %3) #14
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZThn8_N3net12_GLOBAL__N_126MultiThreadedProxyResolverD0Ev(%"class.net::(anonymous namespace)::MultiThreadedProxyResolver"*) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.net::(anonymous namespace)::MultiThreadedProxyResolver", %"class.net::(anonymous namespace)::MultiThreadedProxyResolver"* %0, i64 -1, i32 6
  %3 = bitcast %class.scoped_refptr* %2 to %"class.net::(anonymous namespace)::MultiThreadedProxyResolver"*
  tail call void @_ZN3net12_GLOBAL__N_126MultiThreadedProxyResolverD2Ev(%"class.net::(anonymous namespace)::MultiThreadedProxyResolver"* %3) #14
  %4 = bitcast %class.scoped_refptr* %2 to i8*
  tail call void @_ZdlPv(i8* %4) #15
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal fastcc void @_ZNSt3__114__split_bufferI13scoped_refptrIN3net12_GLOBAL__N_18ExecutorEERNS_9allocatorIS5_EEED2Ev(%"struct.std::__1::__split_buffer"* nocapture) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"struct.std::__1::__split_buffer", %"struct.std::__1::__split_buffer"* %0, i64 0, i32 1
  %3 = load %class.scoped_refptr.34*, %class.scoped_refptr.34** %2, align 8
  %4 = getelementptr inbounds %"struct.std::__1::__split_buffer", %"struct.std::__1::__split_buffer"* %0, i64 0, i32 2
  %5 = load %class.scoped_refptr.34*, %class.scoped_refptr.34** %4, align 8
  %6 = icmp eq %class.scoped_refptr.34* %5, %3
  br i1 %6, label %60, label %7

7:                                                ; preds = %1, %57
  %8 = phi %class.scoped_refptr.34* [ %58, %57 ], [ %5, %1 ]
  %9 = getelementptr inbounds %class.scoped_refptr.34, %class.scoped_refptr.34* %8, i64 -1
  store %class.scoped_refptr.34* %9, %class.scoped_refptr.34** %4, align 8
  %10 = getelementptr inbounds %class.scoped_refptr.34, %class.scoped_refptr.34* %9, i64 0, i32 0
  %11 = load %"class.net::(anonymous namespace)::Executor"*, %"class.net::(anonymous namespace)::Executor"** %10, align 8
  %12 = icmp eq %"class.net::(anonymous namespace)::Executor"* %11, null
  br i1 %12, label %57, label %13

13:                                               ; preds = %7
  %14 = getelementptr inbounds %"class.net::(anonymous namespace)::Executor", %"class.net::(anonymous namespace)::Executor"* %11, i64 0, i32 0
  %15 = getelementptr inbounds %"class.net::(anonymous namespace)::Executor", %"class.net::(anonymous namespace)::Executor"* %11, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %16 = atomicrmw sub i32* %15, i32 1 acq_rel
  %17 = icmp eq i32 %16, 1
  br i1 %17, label %18, label %57

18:                                               ; preds = %13
  %19 = getelementptr inbounds %"class.base::RefCountedThreadSafe.35", %"class.base::RefCountedThreadSafe.35"* %14, i64 10
  %20 = bitcast %"class.base::RefCountedThreadSafe.35"* %19 to %"class.base::Thread"**
  %21 = load %"class.base::Thread"*, %"class.base::Thread"** %20, align 8
  store %"class.base::Thread"* null, %"class.base::Thread"** %20, align 8
  %22 = icmp eq %"class.base::Thread"* %21, null
  br i1 %22, label %28, label %23

23:                                               ; preds = %18
  %24 = bitcast %"class.base::Thread"* %21 to void (%"class.base::Thread"*)***
  %25 = load void (%"class.base::Thread"*)**, void (%"class.base::Thread"*)*** %24, align 8
  %26 = getelementptr inbounds void (%"class.base::Thread"*)*, void (%"class.base::Thread"*)** %25, i64 3
  %27 = load void (%"class.base::Thread"*)*, void (%"class.base::Thread"*)** %26, align 8
  tail call void %27(%"class.base::Thread"* nonnull %21) #14
  br label %28

28:                                               ; preds = %23, %18
  %29 = getelementptr inbounds %"class.base::RefCountedThreadSafe.35", %"class.base::RefCountedThreadSafe.35"* %14, i64 8
  %30 = bitcast %"class.base::RefCountedThreadSafe.35"* %29 to %"class.net::ProxyResolver"**
  %31 = load %"class.net::ProxyResolver"*, %"class.net::ProxyResolver"** %30, align 8
  store %"class.net::ProxyResolver"* null, %"class.net::ProxyResolver"** %30, align 8
  %32 = icmp eq %"class.net::ProxyResolver"* %31, null
  br i1 %32, label %38, label %33

33:                                               ; preds = %28
  %34 = bitcast %"class.net::ProxyResolver"* %31 to void (%"class.net::ProxyResolver"*)***
  %35 = load void (%"class.net::ProxyResolver"*)**, void (%"class.net::ProxyResolver"*)*** %34, align 8
  %36 = getelementptr inbounds void (%"class.net::ProxyResolver"*)*, void (%"class.net::ProxyResolver"*)** %35, i64 1
  %37 = load void (%"class.net::ProxyResolver"*)*, void (%"class.net::ProxyResolver"*)** %36, align 8
  tail call void %37(%"class.net::ProxyResolver"* nonnull %31) #14
  br label %38

38:                                               ; preds = %33, %28
  %39 = getelementptr inbounds %"class.base::RefCountedThreadSafe.35", %"class.base::RefCountedThreadSafe.35"* %14, i64 6
  %40 = bitcast %"class.base::RefCountedThreadSafe.35"* %39 to %"class.net::(anonymous namespace)::Job"**
  %41 = load %"class.net::(anonymous namespace)::Job"*, %"class.net::(anonymous namespace)::Job"** %40, align 8
  %42 = icmp eq %"class.net::(anonymous namespace)::Job"* %41, null
  br i1 %42, label %55, label %43

43:                                               ; preds = %38
  %44 = getelementptr inbounds %"class.net::(anonymous namespace)::Job", %"class.net::(anonymous namespace)::Job"* %41, i64 0, i32 1
  %45 = getelementptr inbounds %"class.base::RefCountedThreadSafe.37", %"class.base::RefCountedThreadSafe.37"* %44, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %46 = atomicrmw sub i32* %45, i32 1 acq_rel
  %47 = icmp eq i32 %46, 1
  br i1 %47, label %48, label %55

48:                                               ; preds = %43
  %49 = getelementptr inbounds %"class.base::RefCountedThreadSafe.37", %"class.base::RefCountedThreadSafe.37"* %44, i64 -2
  %50 = bitcast %"class.base::RefCountedThreadSafe.37"* %49 to %"class.net::(anonymous namespace)::Job"*
  %51 = bitcast %"class.base::RefCountedThreadSafe.37"* %49 to void (%"class.net::(anonymous namespace)::Job"*)***
  %52 = load void (%"class.net::(anonymous namespace)::Job"*)**, void (%"class.net::(anonymous namespace)::Job"*)*** %51, align 8
  %53 = getelementptr inbounds void (%"class.net::(anonymous namespace)::Job"*)*, void (%"class.net::(anonymous namespace)::Job"*)** %52, i64 4
  %54 = load void (%"class.net::(anonymous namespace)::Job"*)*, void (%"class.net::(anonymous namespace)::Job"*)** %53, align 8
  tail call void %54(%"class.net::(anonymous namespace)::Job"* nonnull %50) #14
  br label %55

55:                                               ; preds = %48, %43, %38
  %56 = bitcast %"class.net::(anonymous namespace)::Executor"* %11 to i8*
  tail call void @_ZdlPv(i8* %56) #15
  br label %57

57:                                               ; preds = %55, %13, %7
  %58 = load %class.scoped_refptr.34*, %class.scoped_refptr.34** %4, align 8
  %59 = icmp eq %class.scoped_refptr.34* %58, %3
  br i1 %59, label %60, label %7

60:                                               ; preds = %57, %1
  %61 = getelementptr inbounds %"struct.std::__1::__split_buffer", %"struct.std::__1::__split_buffer"* %0, i64 0, i32 0
  %62 = load %class.scoped_refptr.34*, %class.scoped_refptr.34** %61, align 8
  %63 = icmp eq %class.scoped_refptr.34* %62, null
  br i1 %63, label %66, label %64

64:                                               ; preds = %60
  %65 = bitcast %class.scoped_refptr.34* %62 to i8*
  tail call void @_ZdlPv(i8* %65) #15
  br label %66

66:                                               ; preds = %60, %64
  ret void
}

; Function Attrs: noreturn
declare void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"*) local_unnamed_addr #9

; Function Attrs: noreturn nounwind
declare void @abort() local_unnamed_addr #10

; Function Attrs: nounwind ssp uwtable
define internal fastcc void @_ZN4base14circular_dequeI13scoped_refptrIN3net12_GLOBAL__N_13JobEEE13DestructRangeEmm(%"class.base::circular_deque"* nocapture readonly, i64, i64) unnamed_addr #0 align 2 {
  %4 = alloca %"class.logging::CheckOpResult", align 8
  %5 = alloca %"class.logging::CheckOpResult", align 8
  %6 = alloca %"class.logging::CheckOpResult", align 8
  %7 = alloca %"class.logging::CheckOpResult", align 8
  %8 = alloca %"class.logging::CheckError", align 8
  %9 = alloca %"class.logging::CheckOpResult", align 8
  %10 = alloca %"class.logging::CheckError", align 8
  %11 = alloca %"class.logging::CheckOpResult", align 8
  %12 = alloca %"class.logging::CheckError", align 8
  %13 = icmp eq i64 %2, %1
  br i1 %13, label %76, label %14

14:                                               ; preds = %3
  %15 = icmp ugt i64 %2, %1
  %16 = bitcast %"class.logging::CheckOpResult"* %11 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %16) #14
  %17 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %11, i64 0, i32 0
  %18 = getelementptr inbounds %"class.base::circular_deque", %"class.base::circular_deque"* %0, i64 0, i32 0, i32 1
  %19 = load i64, i64* %18, align 8
  %20 = bitcast %"class.logging::CheckOpResult"* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %20)
  %21 = icmp ult i64 %19, %1
  br i1 %21, label %23, label %22

22:                                               ; preds = %14
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %20)
  store i8* null, i8** %17, align 8
  br label %32

23:                                               ; preds = %14
  %24 = tail call i8* @_ZN7logging15CheckOpValueStrEm(i64 %1) #14
  %25 = tail call i8* @_ZN7logging15CheckOpValueStrEm(i64 %19) #14
  call void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"* nonnull %6, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.9, i64 0, i64 0), i8* %24, i8* %25) #14
  %26 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %6, i64 0, i32 0
  %27 = load i8*, i8** %26, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %20)
  store i8* %27, i8** %17, align 8
  %28 = icmp eq i8* %27, null
  br i1 %28, label %32, label %29

29:                                               ; preds = %23
  %30 = bitcast %"class.logging::CheckError"* %12 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %30) #14
  call void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* nonnull sret %12, i8* getelementptr inbounds ([38 x i8], [38 x i8]* @.str.8, i64 0, i64 0), i32 84, %"class.logging::CheckOpResult"* nonnull %11) #14
  %31 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %12) #14
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %12) #14
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %30) #14
  br label %32

32:                                               ; preds = %22, %23, %29
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %16) #14
  %33 = getelementptr inbounds %"class.base::circular_deque", %"class.base::circular_deque"* %0, i64 0, i32 0, i32 0
  %34 = load %class.scoped_refptr.36*, %class.scoped_refptr.36** %33, align 8
  %35 = getelementptr inbounds %class.scoped_refptr.36, %class.scoped_refptr.36* %34, i64 %1
  br i1 %15, label %36, label %52

36:                                               ; preds = %32
  %37 = bitcast %"class.logging::CheckOpResult"* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %37) #14
  %38 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %9, i64 0, i32 0
  %39 = load i64, i64* %18, align 8
  %40 = bitcast %"class.logging::CheckOpResult"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %40)
  %41 = icmp ult i64 %39, %2
  br i1 %41, label %43, label %42

42:                                               ; preds = %36
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %40)
  store i8* null, i8** %38, align 8
  br label %71

43:                                               ; preds = %36
  %44 = call i8* @_ZN7logging15CheckOpValueStrEm(i64 %2) #14
  %45 = call i8* @_ZN7logging15CheckOpValueStrEm(i64 %39) #14
  call void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"* nonnull %5, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.9, i64 0, i64 0), i8* %44, i8* %45) #14
  %46 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %5, i64 0, i32 0
  %47 = load i8*, i8** %46, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %40)
  store i8* %47, i8** %38, align 8
  %48 = icmp eq i8* %47, null
  br i1 %48, label %71, label %49

49:                                               ; preds = %43
  %50 = bitcast %"class.logging::CheckError"* %10 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %50) #14
  call void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* nonnull sret %10, i8* getelementptr inbounds ([38 x i8], [38 x i8]* @.str.8, i64 0, i64 0), i32 84, %"class.logging::CheckOpResult"* nonnull %9) #14
  %51 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %10) #14
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %10) #14
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %50) #14
  br label %71

52:                                               ; preds = %32
  %53 = load i64, i64* %18, align 8
  %54 = getelementptr inbounds %class.scoped_refptr.36, %class.scoped_refptr.36* %34, i64 %53
  call fastcc void @_ZN4base8internal12VectorBufferI13scoped_refptrIN3net12_GLOBAL__N_13JobEEE13DestructRangeIS6_Li0EEEvPS6_S9_(%class.scoped_refptr.36* %35, %class.scoped_refptr.36* %54)
  %55 = load %class.scoped_refptr.36*, %class.scoped_refptr.36** %33, align 8
  %56 = bitcast %"class.logging::CheckOpResult"* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %56) #14
  %57 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %7, i64 0, i32 0
  %58 = load i64, i64* %18, align 8
  %59 = bitcast %"class.logging::CheckOpResult"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %59)
  %60 = icmp ult i64 %58, %2
  br i1 %60, label %62, label %61

61:                                               ; preds = %52
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %59)
  store i8* null, i8** %57, align 8
  br label %71

62:                                               ; preds = %52
  %63 = call i8* @_ZN7logging15CheckOpValueStrEm(i64 %2) #14
  %64 = call i8* @_ZN7logging15CheckOpValueStrEm(i64 %58) #14
  call void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"* nonnull %4, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.9, i64 0, i64 0), i8* %63, i8* %64) #14
  %65 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %4, i64 0, i32 0
  %66 = load i8*, i8** %65, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %59)
  store i8* %66, i8** %57, align 8
  %67 = icmp eq i8* %66, null
  br i1 %67, label %71, label %68

68:                                               ; preds = %62
  %69 = bitcast %"class.logging::CheckError"* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %69) #14
  call void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* nonnull sret %8, i8* getelementptr inbounds ([38 x i8], [38 x i8]* @.str.8, i64 0, i64 0), i32 84, %"class.logging::CheckOpResult"* nonnull %7) #14
  %70 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %8) #14
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %8) #14
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %69) #14
  br label %71

71:                                               ; preds = %68, %62, %61, %49, %43, %42
  %72 = phi i8* [ %37, %42 ], [ %37, %43 ], [ %37, %49 ], [ %56, %61 ], [ %56, %62 ], [ %56, %68 ]
  %73 = phi %class.scoped_refptr.36* [ %35, %42 ], [ %35, %43 ], [ %35, %49 ], [ %55, %61 ], [ %55, %62 ], [ %55, %68 ]
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %72) #14
  %74 = load %class.scoped_refptr.36*, %class.scoped_refptr.36** %33, align 8
  %75 = getelementptr inbounds %class.scoped_refptr.36, %class.scoped_refptr.36* %74, i64 %2
  call fastcc void @_ZN4base8internal12VectorBufferI13scoped_refptrIN3net12_GLOBAL__N_13JobEEE13DestructRangeIS6_Li0EEEvPS6_S9_(%class.scoped_refptr.36* %73, %class.scoped_refptr.36* %75)
  br label %76

76:                                               ; preds = %71, %3
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal fastcc void @_ZN4base8internal12VectorBufferI13scoped_refptrIN3net12_GLOBAL__N_13JobEEE13DestructRangeIS6_Li0EEEvPS6_S9_(%class.scoped_refptr.36*, %class.scoped_refptr.36*) unnamed_addr #0 align 2 {
  %3 = alloca %"class.logging::CheckOpResult", align 8
  %4 = alloca %class.scoped_refptr.36*, align 8
  %5 = alloca %class.scoped_refptr.36*, align 8
  %6 = alloca %"class.logging::CheckOpResult", align 8
  %7 = alloca %"class.logging::CheckError", align 8
  store %class.scoped_refptr.36* %0, %class.scoped_refptr.36** %4, align 8
  store %class.scoped_refptr.36* %1, %class.scoped_refptr.36** %5, align 8
  %8 = bitcast %"class.logging::CheckOpResult"* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %8) #14
  %9 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %6, i64 0, i32 0
  store i8* inttoptr (i64 -6148914691236517206 to i8*), i8** %9, align 8
  %10 = bitcast %"class.logging::CheckOpResult"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %10)
  %11 = icmp ugt %class.scoped_refptr.36* %0, %1
  br i1 %11, label %13, label %12

12:                                               ; preds = %2
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %10)
  store i8* null, i8** %9, align 8
  br label %24

13:                                               ; preds = %2
  %14 = bitcast %class.scoped_refptr.36** %4 to i8*
  %15 = call i8* @_ZN7logging14StreamValToStrEPKvPFvRNSt3__113basic_ostreamIcNS2_11char_traitsIcEEEES1_E(i8* nonnull %14, void (%"class.std::__1::basic_ostream"*, i8*)* nonnull @_ZZN7logging15CheckOpValueStrIP13scoped_refptrIN3net12_GLOBAL__N_13JobEEEENSt3__19enable_ifIXaasr4base8internal23SupportsOstreamOperatorIRKT_EE5valuentsr3std11is_functionINS7_14remove_pointerIS9_E4typeEEE5valueEPcE4typeESB_ENUlRNS7_13basic_ostreamIcNS7_11char_traitsIcEEEEPKvE_8__invokeESM_SO_) #14
  %16 = bitcast %class.scoped_refptr.36** %5 to i8*
  %17 = call i8* @_ZN7logging14StreamValToStrEPKvPFvRNSt3__113basic_ostreamIcNS2_11char_traitsIcEEEES1_E(i8* nonnull %16, void (%"class.std::__1::basic_ostream"*, i8*)* nonnull @_ZZN7logging15CheckOpValueStrIP13scoped_refptrIN3net12_GLOBAL__N_13JobEEEENSt3__19enable_ifIXaasr4base8internal23SupportsOstreamOperatorIRKT_EE5valuentsr3std11is_functionINS7_14remove_pointerIS9_E4typeEEE5valueEPcE4typeESB_ENUlRNS7_13basic_ostreamIcNS7_11char_traitsIcEEEEPKvE_8__invokeESM_SO_) #14
  call void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"* nonnull %3, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.7, i64 0, i64 0), i8* %15, i8* %17) #14
  %18 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %3, i64 0, i32 0
  %19 = load i8*, i8** %18, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %10)
  store i8* %19, i8** %9, align 8
  %20 = icmp eq i8* %19, null
  br i1 %20, label %24, label %21

21:                                               ; preds = %13
  %22 = bitcast %"class.logging::CheckError"* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %22) #14
  call void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* nonnull sret %7, i8* getelementptr inbounds ([38 x i8], [38 x i8]* @.str.8, i64 0, i64 0), i32 110, %"class.logging::CheckOpResult"* nonnull %6) #14
  %23 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %7) #14
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %7) #14
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %22) #14
  br label %24

24:                                               ; preds = %12, %13, %21
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %8) #14
  %25 = load %class.scoped_refptr.36*, %class.scoped_refptr.36** %4, align 8
  %26 = load %class.scoped_refptr.36*, %class.scoped_refptr.36** %5, align 8
  %27 = icmp eq %class.scoped_refptr.36* %25, %26
  br i1 %27, label %50, label %28

28:                                               ; preds = %24, %45
  %29 = phi %class.scoped_refptr.36* [ %47, %45 ], [ %25, %24 ]
  %30 = getelementptr inbounds %class.scoped_refptr.36, %class.scoped_refptr.36* %29, i64 0, i32 0
  %31 = load %"class.net::(anonymous namespace)::Job"*, %"class.net::(anonymous namespace)::Job"** %30, align 8
  %32 = icmp eq %"class.net::(anonymous namespace)::Job"* %31, null
  br i1 %32, label %45, label %33

33:                                               ; preds = %28
  %34 = getelementptr inbounds %"class.net::(anonymous namespace)::Job", %"class.net::(anonymous namespace)::Job"* %31, i64 0, i32 1
  %35 = getelementptr inbounds %"class.base::RefCountedThreadSafe.37", %"class.base::RefCountedThreadSafe.37"* %34, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %36 = atomicrmw sub i32* %35, i32 1 acq_rel
  %37 = icmp eq i32 %36, 1
  br i1 %37, label %38, label %45

38:                                               ; preds = %33
  %39 = getelementptr inbounds %"class.base::RefCountedThreadSafe.37", %"class.base::RefCountedThreadSafe.37"* %34, i64 -2
  %40 = bitcast %"class.base::RefCountedThreadSafe.37"* %39 to %"class.net::(anonymous namespace)::Job"*
  %41 = bitcast %"class.base::RefCountedThreadSafe.37"* %39 to void (%"class.net::(anonymous namespace)::Job"*)***
  %42 = load void (%"class.net::(anonymous namespace)::Job"*)**, void (%"class.net::(anonymous namespace)::Job"*)*** %41, align 8
  %43 = getelementptr inbounds void (%"class.net::(anonymous namespace)::Job"*)*, void (%"class.net::(anonymous namespace)::Job"*)** %42, i64 4
  %44 = load void (%"class.net::(anonymous namespace)::Job"*)*, void (%"class.net::(anonymous namespace)::Job"*)** %43, align 8
  call void %44(%"class.net::(anonymous namespace)::Job"* nonnull %40) #14
  br label %45

45:                                               ; preds = %28, %33, %38
  %46 = load %class.scoped_refptr.36*, %class.scoped_refptr.36** %4, align 8
  %47 = getelementptr inbounds %class.scoped_refptr.36, %class.scoped_refptr.36* %46, i64 1
  store %class.scoped_refptr.36* %47, %class.scoped_refptr.36** %4, align 8
  %48 = load %class.scoped_refptr.36*, %class.scoped_refptr.36** %5, align 8
  %49 = icmp eq %class.scoped_refptr.36* %47, %48
  br i1 %49, label %50, label %28

50:                                               ; preds = %45, %24
  ret void
}

declare void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* sret, i8*, i32, %"class.logging::CheckOpResult"*) local_unnamed_addr #1

declare void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"*, i8*, i8*, i8*) unnamed_addr #1

declare i8* @_ZN7logging14StreamValToStrEPKvPFvRNSt3__113basic_ostreamIcNS2_11char_traitsIcEEEES1_E(i8*, void (%"class.std::__1::basic_ostream"*, i8*)*) local_unnamed_addr #1

; Function Attrs: inlinehint nounwind ssp uwtable
define internal void @_ZZN7logging15CheckOpValueStrIP13scoped_refptrIN3net12_GLOBAL__N_13JobEEEENSt3__19enable_ifIXaasr4base8internal23SupportsOstreamOperatorIRKT_EE5valuentsr3std11is_functionINS7_14remove_pointerIS9_E4typeEEE5valueEPcE4typeESB_ENUlRNS7_13basic_ostreamIcNS7_11char_traitsIcEEEEPKvE_8__invokeESM_SO_(%"class.std::__1::basic_ostream"* dereferenceable(160), i8* nocapture readonly) #11 align 2 {
  %3 = bitcast i8* %1 to i8**
  %4 = load i8*, i8** %3, align 8
  %5 = tail call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEElsEPKv(%"class.std::__1::basic_ostream"* %0, i8* %4) #14
  ret void
}

declare dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEElsEPKv(%"class.std::__1::basic_ostream"*, i8*) local_unnamed_addr #1

declare i8* @_ZN7logging15CheckOpValueStrEm(i64) local_unnamed_addr #1

; Function Attrs: nounwind
declare void @free(i8* nocapture) local_unnamed_addr #3

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #2

declare void @_ZN4GURLC1ERKS_(%class.GURL*, %class.GURL* dereferenceable(120)) unnamed_addr #1

declare void @_ZN3net19NetworkIsolationKeyC1ERKS0_(%"class.net::NetworkIsolationKey"*, %"class.net::NetworkIsolationKey"* dereferenceable(184)) unnamed_addr #1

declare void @_ZN3net9ProxyInfoC1Ev(%"class.net::ProxyInfo"*) unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN3net12_GLOBAL__N_126MultiThreadedProxyResolver17GetProxyForURLJob16WaitingForThreadEv(%"class.net::(anonymous namespace)::MultiThreadedProxyResolver::GetProxyForURLJob"*) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.net::(anonymous namespace)::MultiThreadedProxyResolver::GetProxyForURLJob", %"class.net::(anonymous namespace)::MultiThreadedProxyResolver::GetProxyForURLJob"* %0, i64 0, i32 8
  store i8 1, i8* %2, align 8
  %3 = getelementptr inbounds %"class.net::(anonymous namespace)::MultiThreadedProxyResolver::GetProxyForURLJob", %"class.net::(anonymous namespace)::MultiThreadedProxyResolver::GetProxyForURLJob"* %0, i64 0, i32 4
  tail call void @_ZNK3net16NetLogWithSource10BeginEventENS_15NetLogEventTypeE(%"class.net::NetLogWithSource"* %3, i32 32) #14
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN3net12_GLOBAL__N_126MultiThreadedProxyResolver17GetProxyForURLJob24FinishedWaitingForThreadEv(%"class.net::(anonymous namespace)::MultiThreadedProxyResolver::GetProxyForURLJob"*) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.net::(anonymous namespace)::MultiThreadedProxyResolver::GetProxyForURLJob", %"class.net::(anonymous namespace)::MultiThreadedProxyResolver::GetProxyForURLJob"* %0, i64 0, i32 8
  %3 = load i8, i8* %2, align 8, !range !17
  %4 = icmp eq i8 %3, 0
  br i1 %4, label %7, label %5

5:                                                ; preds = %1
  %6 = getelementptr inbounds %"class.net::(anonymous namespace)::MultiThreadedProxyResolver::GetProxyForURLJob", %"class.net::(anonymous namespace)::MultiThreadedProxyResolver::GetProxyForURLJob"* %0, i64 0, i32 4
  tail call void @_ZNK3net16NetLogWithSource8EndEventENS_15NetLogEventTypeE(%"class.net::NetLogWithSource"* %6, i32 32) #14
  br label %7

7:                                                ; preds = %1, %5
  %8 = getelementptr inbounds %"class.net::(anonymous namespace)::MultiThreadedProxyResolver::GetProxyForURLJob", %"class.net::(anonymous namespace)::MultiThreadedProxyResolver::GetProxyForURLJob"* %0, i64 0, i32 4
  %9 = getelementptr inbounds %"class.net::(anonymous namespace)::MultiThreadedProxyResolver::GetProxyForURLJob", %"class.net::(anonymous namespace)::MultiThreadedProxyResolver::GetProxyForURLJob"* %0, i64 0, i32 0, i32 3
  %10 = load %"class.net::(anonymous namespace)::Executor"*, %"class.net::(anonymous namespace)::Executor"** %9, align 8
  %11 = getelementptr inbounds %"class.net::(anonymous namespace)::Executor", %"class.net::(anonymous namespace)::Executor"* %10, i64 0, i32 2
  %12 = load i32, i32* %11, align 8
  tail call void @_ZNK3net16NetLogWithSource21AddEventWithIntParamsENS_15NetLogEventTypeEN4base16BasicStringPieceIcNSt3__111char_traitsIcEEEEi(%"class.net::NetLogWithSource"* %8, i32 33, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.10, i64 0, i64 0), i64 13, i32 %12) #14
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN3net12_GLOBAL__N_126MultiThreadedProxyResolver17GetProxyForURLJob3RunE13scoped_refptrIN4base22SingleThreadTaskRunnerEE(%"class.net::(anonymous namespace)::MultiThreadedProxyResolver::GetProxyForURLJob"*, %"class.base::SingleThreadTaskRunner"*) unnamed_addr #0 align 2 {
  %3 = alloca %"class.base::OnceCallback", align 8
  %4 = alloca %"class.base::Location", align 8
  %5 = alloca %"class.base::OnceCallback.91", align 8
  %6 = getelementptr inbounds %"class.net::(anonymous namespace)::MultiThreadedProxyResolver::GetProxyForURLJob", %"class.net::(anonymous namespace)::MultiThreadedProxyResolver::GetProxyForURLJob"* %0, i64 0, i32 0, i32 3
  %7 = load %"class.net::(anonymous namespace)::Executor"*, %"class.net::(anonymous namespace)::Executor"** %6, align 8
  %8 = getelementptr inbounds %"class.net::(anonymous namespace)::Executor", %"class.net::(anonymous namespace)::Executor"* %7, i64 0, i32 4, i32 0, i32 0, i32 0
  %9 = load %"class.net::ProxyResolver"*, %"class.net::ProxyResolver"** %8, align 8
  %10 = getelementptr inbounds %"class.net::(anonymous namespace)::MultiThreadedProxyResolver::GetProxyForURLJob", %"class.net::(anonymous namespace)::MultiThreadedProxyResolver::GetProxyForURLJob"* %0, i64 0, i32 5
  %11 = getelementptr inbounds %"class.net::(anonymous namespace)::MultiThreadedProxyResolver::GetProxyForURLJob", %"class.net::(anonymous namespace)::MultiThreadedProxyResolver::GetProxyForURLJob"* %0, i64 0, i32 6
  %12 = getelementptr inbounds %"class.net::(anonymous namespace)::MultiThreadedProxyResolver::GetProxyForURLJob", %"class.net::(anonymous namespace)::MultiThreadedProxyResolver::GetProxyForURLJob"* %0, i64 0, i32 7
  %13 = getelementptr inbounds %"class.base::OnceCallback", %"class.base::OnceCallback"* %3, i64 0, i32 0, i32 0, i32 0
  store %"class.base::internal::BindStateBase"* null, %"class.base::internal::BindStateBase"** %13, align 8
  %14 = getelementptr inbounds %"class.net::(anonymous namespace)::MultiThreadedProxyResolver::GetProxyForURLJob", %"class.net::(anonymous namespace)::MultiThreadedProxyResolver::GetProxyForURLJob"* %0, i64 0, i32 4
  %15 = bitcast %"class.net::ProxyResolver"* %9 to i32 (%"class.net::ProxyResolver"*, %class.GURL*, %"class.net::NetworkIsolationKey"*, %"class.net::ProxyInfo"*, %"class.base::OnceCallback"*, %"class.std::__1::unique_ptr.138"*, %"class.net::NetLogWithSource"*)***
  %16 = load i32 (%"class.net::ProxyResolver"*, %class.GURL*, %"class.net::NetworkIsolationKey"*, %"class.net::ProxyInfo"*, %"class.base::OnceCallback"*, %"class.std::__1::unique_ptr.138"*, %"class.net::NetLogWithSource"*)**, i32 (%"class.net::ProxyResolver"*, %class.GURL*, %"class.net::NetworkIsolationKey"*, %"class.net::ProxyInfo"*, %"class.base::OnceCallback"*, %"class.std::__1::unique_ptr.138"*, %"class.net::NetLogWithSource"*)*** %15, align 8
  %17 = getelementptr inbounds i32 (%"class.net::ProxyResolver"*, %class.GURL*, %"class.net::NetworkIsolationKey"*, %"class.net::ProxyInfo"*, %"class.base::OnceCallback"*, %"class.std::__1::unique_ptr.138"*, %"class.net::NetLogWithSource"*)*, i32 (%"class.net::ProxyResolver"*, %class.GURL*, %"class.net::NetworkIsolationKey"*, %"class.net::ProxyInfo"*, %"class.base::OnceCallback"*, %"class.std::__1::unique_ptr.138"*, %"class.net::NetLogWithSource"*)** %16, i64 2
  %18 = load i32 (%"class.net::ProxyResolver"*, %class.GURL*, %"class.net::NetworkIsolationKey"*, %"class.net::ProxyInfo"*, %"class.base::OnceCallback"*, %"class.std::__1::unique_ptr.138"*, %"class.net::NetLogWithSource"*)*, i32 (%"class.net::ProxyResolver"*, %class.GURL*, %"class.net::NetworkIsolationKey"*, %"class.net::ProxyInfo"*, %"class.base::OnceCallback"*, %"class.std::__1::unique_ptr.138"*, %"class.net::NetLogWithSource"*)** %17, align 8
  %19 = call i32 %18(%"class.net::ProxyResolver"* %9, %class.GURL* dereferenceable(120) %10, %"class.net::NetworkIsolationKey"* dereferenceable(184) %11, %"class.net::ProxyInfo"* %12, %"class.base::OnceCallback"* nonnull %3, %"class.std::__1::unique_ptr.138"* null, %"class.net::NetLogWithSource"* dereferenceable(24) %14) #14
  %20 = getelementptr inbounds %"class.base::OnceCallback", %"class.base::OnceCallback"* %3, i64 0, i32 0
  call void @_ZN4base8internal12CallbackBaseD2Ev(%"class.base::internal::CallbackBase"* nonnull %20) #14
  %21 = bitcast %"class.base::SingleThreadTaskRunner"* %1 to %"class.base::TaskRunner"*
  %22 = bitcast %"class.base::Location"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %22) #14
  call void @_ZN4base8Location7CurrentEPKcS2_i(%"class.base::Location"* nonnull sret %4, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.5, i64 0, i64 0), i8* getelementptr inbounds ([60 x i8], [60 x i8]* @.str.1, i64 0, i64 0), i32 317) #14
  %23 = call i8* @_Znwm(i64 64) #15, !noalias !19
  %24 = bitcast i8* %23 to %"class.base::internal::BindStateBase"*
  call void @_ZN4base8internal13BindStateBaseC2EPFvvEPFvPKS1_E(%"class.base::internal::BindStateBase"* nonnull %24, void ()* bitcast (void (%"class.base::internal::BindStateBase"*)* @_ZN4base8internal7InvokerINS0_9BindStateIMN3net12_GLOBAL__N_126MultiThreadedProxyResolver17GetProxyForURLJobEFviEJ13scoped_refptrIS6_EiEEEFvvEE7RunOnceEPNS0_13BindStateBaseE to void ()*), void (%"class.base::internal::BindStateBase"*)* nonnull @_ZN4base8internal9BindStateIMN3net12_GLOBAL__N_126MultiThreadedProxyResolver17GetProxyForURLJobEFviEJ13scoped_refptrIS5_EiEE7DestroyEPKNS0_13BindStateBaseE) #14, !noalias !19
  %25 = getelementptr inbounds i8, i8* %23, i64 32
  %26 = bitcast i8* %25 to <2 x i64>*
  store <2 x i64> <i64 ptrtoint (void (%"class.net::(anonymous namespace)::MultiThreadedProxyResolver::GetProxyForURLJob"*, i32)* @_ZN3net12_GLOBAL__N_126MultiThreadedProxyResolver17GetProxyForURLJob13QueryCompleteEi to i64), i64 0>, <2 x i64>* %26, align 8, !noalias !19
  %27 = getelementptr inbounds i8, i8* %23, i64 48
  %28 = bitcast i8* %27 to %"class.net::(anonymous namespace)::MultiThreadedProxyResolver::GetProxyForURLJob"**
  store %"class.net::(anonymous namespace)::MultiThreadedProxyResolver::GetProxyForURLJob"* %0, %"class.net::(anonymous namespace)::MultiThreadedProxyResolver::GetProxyForURLJob"** %28, align 8, !noalias !19
  %29 = icmp eq %"class.net::(anonymous namespace)::MultiThreadedProxyResolver::GetProxyForURLJob"* %0, null
  br i1 %29, label %33, label %30

30:                                               ; preds = %2
  %31 = getelementptr inbounds %"class.net::(anonymous namespace)::MultiThreadedProxyResolver::GetProxyForURLJob", %"class.net::(anonymous namespace)::MultiThreadedProxyResolver::GetProxyForURLJob"* %0, i64 0, i32 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %32 = atomicrmw add i32* %31, i32 1 monotonic, !noalias !19
  br label %33

33:                                               ; preds = %2, %30
  %34 = getelementptr inbounds i8, i8* %23, i64 56
  %35 = bitcast i8* %34 to i32*
  store i32 %19, i32* %35, align 4, !noalias !19
  %36 = bitcast %"class.base::OnceCallback.91"* %5 to i8**
  store i8* %23, i8** %36, align 8, !alias.scope !19
  %37 = call zeroext i1 @_ZN4base10TaskRunner8PostTaskERKNS_8LocationENS_12OnceCallbackIFvvEEE(%"class.base::TaskRunner"* %21, %"class.base::Location"* nonnull dereferenceable(32) %4, %"class.base::OnceCallback.91"* nonnull %5) #14
  %38 = getelementptr inbounds %"class.base::OnceCallback.91", %"class.base::OnceCallback.91"* %5, i64 0, i32 0
  call void @_ZN4base8internal12CallbackBaseD2Ev(%"class.base::internal::CallbackBase"* nonnull %38) #14
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %22) #14
  %39 = icmp eq %"class.base::SingleThreadTaskRunner"* %1, null
  br i1 %39, label %48, label %40

40:                                               ; preds = %33
  %41 = getelementptr inbounds %"class.base::SingleThreadTaskRunner", %"class.base::SingleThreadTaskRunner"* %1, i64 0, i32 0, i32 0, i32 1
  %42 = getelementptr inbounds %"class.base::RefCountedThreadSafe.66", %"class.base::RefCountedThreadSafe.66"* %41, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %43 = atomicrmw sub i32* %42, i32 1 acq_rel
  %44 = icmp eq i32 %43, 1
  br i1 %44, label %45, label %48

45:                                               ; preds = %40
  %46 = getelementptr inbounds %"class.base::RefCountedThreadSafe.66", %"class.base::RefCountedThreadSafe.66"* %41, i64 -2
  %47 = bitcast %"class.base::RefCountedThreadSafe.66"* %46 to %"class.base::TaskRunner"*
  call void @_ZN4base16TaskRunnerTraits8DestructEPKNS_10TaskRunnerE(%"class.base::TaskRunner"* %47) #14
  br label %48

48:                                               ; preds = %33, %40, %45
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN3net12_GLOBAL__N_126MultiThreadedProxyResolver17GetProxyForURLJobD2Ev(%"class.net::(anonymous namespace)::MultiThreadedProxyResolver::GetProxyForURLJob"*) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.net::(anonymous namespace)::MultiThreadedProxyResolver::GetProxyForURLJob", %"class.net::(anonymous namespace)::MultiThreadedProxyResolver::GetProxyForURLJob"* %0, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [7 x i8*] }, { [7 x i8*] }* @_ZTVN3net12_GLOBAL__N_126MultiThreadedProxyResolver17GetProxyForURLJobE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8
  %3 = getelementptr inbounds %"class.net::(anonymous namespace)::MultiThreadedProxyResolver::GetProxyForURLJob", %"class.net::(anonymous namespace)::MultiThreadedProxyResolver::GetProxyForURLJob"* %0, i64 0, i32 7
  tail call void @_ZN3net9ProxyInfoD1Ev(%"class.net::ProxyInfo"* %3) #14
  %4 = getelementptr inbounds %"class.net::(anonymous namespace)::MultiThreadedProxyResolver::GetProxyForURLJob", %"class.net::(anonymous namespace)::MultiThreadedProxyResolver::GetProxyForURLJob"* %0, i64 0, i32 6
  tail call void @_ZN3net19NetworkIsolationKeyD1Ev(%"class.net::NetworkIsolationKey"* %4) #14
  %5 = getelementptr inbounds %"class.net::(anonymous namespace)::MultiThreadedProxyResolver::GetProxyForURLJob", %"class.net::(anonymous namespace)::MultiThreadedProxyResolver::GetProxyForURLJob"* %0, i64 0, i32 5
  tail call void @_ZN4GURLD1Ev(%class.GURL* %5) #14
  %6 = getelementptr inbounds %"class.net::(anonymous namespace)::MultiThreadedProxyResolver::GetProxyForURLJob", %"class.net::(anonymous namespace)::MultiThreadedProxyResolver::GetProxyForURLJob"* %0, i64 0, i32 4
  tail call void @_ZN3net16NetLogWithSourceD1Ev(%"class.net::NetLogWithSource"* %6) #14
  %7 = getelementptr inbounds %"class.net::(anonymous namespace)::MultiThreadedProxyResolver::GetProxyForURLJob", %"class.net::(anonymous namespace)::MultiThreadedProxyResolver::GetProxyForURLJob"* %0, i64 0, i32 2, i32 0
  tail call void @_ZN4base8internal12CallbackBaseD2Ev(%"class.base::internal::CallbackBase"* %7) #14
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN3net12_GLOBAL__N_126MultiThreadedProxyResolver17GetProxyForURLJobD0Ev(%"class.net::(anonymous namespace)::MultiThreadedProxyResolver::GetProxyForURLJob"*) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.net::(anonymous namespace)::MultiThreadedProxyResolver::GetProxyForURLJob", %"class.net::(anonymous namespace)::MultiThreadedProxyResolver::GetProxyForURLJob"* %0, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [7 x i8*] }, { [7 x i8*] }* @_ZTVN3net12_GLOBAL__N_126MultiThreadedProxyResolver17GetProxyForURLJobE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8
  %3 = getelementptr inbounds %"class.net::(anonymous namespace)::MultiThreadedProxyResolver::GetProxyForURLJob", %"class.net::(anonymous namespace)::MultiThreadedProxyResolver::GetProxyForURLJob"* %0, i64 0, i32 7
  tail call void @_ZN3net9ProxyInfoD1Ev(%"class.net::ProxyInfo"* %3) #14
  %4 = getelementptr inbounds %"class.net::(anonymous namespace)::MultiThreadedProxyResolver::GetProxyForURLJob", %"class.net::(anonymous namespace)::MultiThreadedProxyResolver::GetProxyForURLJob"* %0, i64 0, i32 6
  tail call void @_ZN3net19NetworkIsolationKeyD1Ev(%"class.net::NetworkIsolationKey"* %4) #14
  %5 = getelementptr inbounds %"class.net::(anonymous namespace)::MultiThreadedProxyResolver::GetProxyForURLJob", %"class.net::(anonymous namespace)::MultiThreadedProxyResolver::GetProxyForURLJob"* %0, i64 0, i32 5
  tail call void @_ZN4GURLD1Ev(%class.GURL* %5) #14
  %6 = getelementptr inbounds %"class.net::(anonymous namespace)::MultiThreadedProxyResolver::GetProxyForURLJob", %"class.net::(anonymous namespace)::MultiThreadedProxyResolver::GetProxyForURLJob"* %0, i64 0, i32 4
  tail call void @_ZN3net16NetLogWithSourceD1Ev(%"class.net::NetLogWithSource"* %6) #14
  %7 = getelementptr inbounds %"class.net::(anonymous namespace)::MultiThreadedProxyResolver::GetProxyForURLJob", %"class.net::(anonymous namespace)::MultiThreadedProxyResolver::GetProxyForURLJob"* %0, i64 0, i32 2, i32 0
  tail call void @_ZN4base8internal12CallbackBaseD2Ev(%"class.base::internal::CallbackBase"* %7) #14
  %8 = bitcast %"class.net::(anonymous namespace)::MultiThreadedProxyResolver::GetProxyForURLJob"* %0 to i8*
  tail call void @_ZdlPv(i8* %8) #15
  ret void
}

declare void @_ZNK3net16NetLogWithSource10BeginEventENS_15NetLogEventTypeE(%"class.net::NetLogWithSource"*, i32) local_unnamed_addr #1

declare void @_ZNK3net16NetLogWithSource8EndEventENS_15NetLogEventTypeE(%"class.net::NetLogWithSource"*, i32) local_unnamed_addr #1

declare void @_ZNK3net16NetLogWithSource21AddEventWithIntParamsENS_15NetLogEventTypeEN4base16BasicStringPieceIcNSt3__111char_traitsIcEEEEi(%"class.net::NetLogWithSource"*, i32, i8*, i64, i32) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN3net12_GLOBAL__N_126MultiThreadedProxyResolver17GetProxyForURLJob13QueryCompleteEi(%"class.net::(anonymous namespace)::MultiThreadedProxyResolver::GetProxyForURLJob"*, i32) #0 align 2 {
  %3 = alloca %"class.base::OnceCallback", align 8
  %4 = getelementptr inbounds %"class.net::(anonymous namespace)::MultiThreadedProxyResolver::GetProxyForURLJob", %"class.net::(anonymous namespace)::MultiThreadedProxyResolver::GetProxyForURLJob"* %0, i64 0, i32 0, i32 4
  %5 = load i8, i8* %4, align 8, !range !17
  %6 = icmp eq i8 %5, 0
  br i1 %6, label %7, label %25

7:                                                ; preds = %2
  %8 = icmp sgt i32 %1, -1
  br i1 %8, label %9, label %13

9:                                                ; preds = %7
  %10 = getelementptr inbounds %"class.net::(anonymous namespace)::MultiThreadedProxyResolver::GetProxyForURLJob", %"class.net::(anonymous namespace)::MultiThreadedProxyResolver::GetProxyForURLJob"* %0, i64 0, i32 3
  %11 = load %"class.net::ProxyInfo"*, %"class.net::ProxyInfo"** %10, align 8
  %12 = getelementptr inbounds %"class.net::(anonymous namespace)::MultiThreadedProxyResolver::GetProxyForURLJob", %"class.net::(anonymous namespace)::MultiThreadedProxyResolver::GetProxyForURLJob"* %0, i64 0, i32 7
  tail call void @_ZN3net9ProxyInfo3UseERKS0_(%"class.net::ProxyInfo"* %11, %"class.net::ProxyInfo"* dereferenceable(72) %12) #14
  br label %13

13:                                               ; preds = %9, %7
  %14 = getelementptr inbounds %"class.net::(anonymous namespace)::MultiThreadedProxyResolver::GetProxyForURLJob", %"class.net::(anonymous namespace)::MultiThreadedProxyResolver::GetProxyForURLJob"* %0, i64 0, i32 2
  %15 = bitcast %"class.base::OnceCallback"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %15) #14
  %16 = getelementptr inbounds %"class.base::OnceCallback", %"class.base::OnceCallback"* %14, i64 0, i32 0, i32 0, i32 0
  %17 = bitcast %"class.base::OnceCallback"* %14 to i64*
  %18 = load i64, i64* %17, align 8
  %19 = bitcast %"class.base::OnceCallback"* %3 to i64*
  store i64 %18, i64* %19, align 8
  store %"class.base::internal::BindStateBase"* null, %"class.base::internal::BindStateBase"** %16, align 8
  %20 = getelementptr inbounds %"class.base::OnceCallback", %"class.base::OnceCallback"* %3, i64 0, i32 0
  %21 = inttoptr i64 %18 to %"class.base::internal::BindStateBase"*
  %22 = getelementptr inbounds %"class.base::internal::BindStateBase", %"class.base::internal::BindStateBase"* %21, i64 0, i32 1
  %23 = bitcast void ()** %22 to void (%"class.base::internal::BindStateBase"*, i32)**
  %24 = load void (%"class.base::internal::BindStateBase"*, i32)*, void (%"class.base::internal::BindStateBase"*, i32)** %23, align 8
  tail call void %24(%"class.base::internal::BindStateBase"* %21, i32 %1) #14
  call void @_ZN4base8internal12CallbackBaseD2Ev(%"class.base::internal::CallbackBase"* nonnull %20) #14
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %15) #14
  br label %25

25:                                               ; preds = %2, %13
  %26 = getelementptr inbounds %"class.net::(anonymous namespace)::MultiThreadedProxyResolver::GetProxyForURLJob", %"class.net::(anonymous namespace)::MultiThreadedProxyResolver::GetProxyForURLJob"* %0, i64 0, i32 0, i32 3
  %27 = load %"class.net::(anonymous namespace)::Executor"*, %"class.net::(anonymous namespace)::Executor"** %26, align 8
  %28 = icmp eq %"class.net::(anonymous namespace)::Executor"* %27, null
  br i1 %28, label %53, label %29

29:                                               ; preds = %25
  %30 = getelementptr inbounds %"class.net::(anonymous namespace)::Executor", %"class.net::(anonymous namespace)::Executor"* %27, i64 0, i32 3
  %31 = bitcast %class.scoped_refptr.36* %30 to i64*
  %32 = getelementptr inbounds %class.scoped_refptr.36, %class.scoped_refptr.36* %30, i64 0, i32 0
  %33 = load %"class.net::(anonymous namespace)::Job"*, %"class.net::(anonymous namespace)::Job"** %32, align 8
  store i64 0, i64* %31, align 8
  %34 = icmp eq %"class.net::(anonymous namespace)::Job"* %33, null
  br i1 %34, label %47, label %35

35:                                               ; preds = %29
  %36 = getelementptr inbounds %"class.net::(anonymous namespace)::Job", %"class.net::(anonymous namespace)::Job"* %33, i64 0, i32 1
  %37 = getelementptr inbounds %"class.base::RefCountedThreadSafe.37", %"class.base::RefCountedThreadSafe.37"* %36, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %38 = atomicrmw sub i32* %37, i32 1 acq_rel
  %39 = icmp eq i32 %38, 1
  br i1 %39, label %40, label %47

40:                                               ; preds = %35
  %41 = getelementptr inbounds %"class.base::RefCountedThreadSafe.37", %"class.base::RefCountedThreadSafe.37"* %36, i64 -2
  %42 = bitcast %"class.base::RefCountedThreadSafe.37"* %41 to %"class.net::(anonymous namespace)::Job"*
  %43 = bitcast %"class.base::RefCountedThreadSafe.37"* %41 to void (%"class.net::(anonymous namespace)::Job"*)***
  %44 = load void (%"class.net::(anonymous namespace)::Job"*)**, void (%"class.net::(anonymous namespace)::Job"*)*** %43, align 8
  %45 = getelementptr inbounds void (%"class.net::(anonymous namespace)::Job"*)*, void (%"class.net::(anonymous namespace)::Job"*)** %44, i64 4
  %46 = load void (%"class.net::(anonymous namespace)::Job"*)*, void (%"class.net::(anonymous namespace)::Job"*)** %45, align 8
  call void %46(%"class.net::(anonymous namespace)::Job"* nonnull %42) #14
  br label %47

47:                                               ; preds = %40, %35, %29
  %48 = getelementptr inbounds %"class.net::(anonymous namespace)::Executor", %"class.net::(anonymous namespace)::Executor"* %27, i64 0, i32 1
  %49 = load %"class.net::(anonymous namespace)::Executor::Coordinator"*, %"class.net::(anonymous namespace)::Executor::Coordinator"** %48, align 8
  %50 = bitcast %"class.net::(anonymous namespace)::Executor::Coordinator"* %49 to void (%"class.net::(anonymous namespace)::Executor::Coordinator"*, %"class.net::(anonymous namespace)::Executor"*)***
  %51 = load void (%"class.net::(anonymous namespace)::Executor::Coordinator"*, %"class.net::(anonymous namespace)::Executor"*)**, void (%"class.net::(anonymous namespace)::Executor::Coordinator"*, %"class.net::(anonymous namespace)::Executor"*)*** %50, align 8
  %52 = load void (%"class.net::(anonymous namespace)::Executor::Coordinator"*, %"class.net::(anonymous namespace)::Executor"*)*, void (%"class.net::(anonymous namespace)::Executor::Coordinator"*, %"class.net::(anonymous namespace)::Executor"*)** %51, align 8
  call void %52(%"class.net::(anonymous namespace)::Executor::Coordinator"* %49, %"class.net::(anonymous namespace)::Executor"* nonnull %27) #14
  br label %53

53:                                               ; preds = %25, %47
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN4base8internal7InvokerINS0_9BindStateIMN3net12_GLOBAL__N_126MultiThreadedProxyResolver17GetProxyForURLJobEFviEJ13scoped_refptrIS6_EiEEEFvvEE7RunOnceEPNS0_13BindStateBaseE(%"class.base::internal::BindStateBase"* nocapture readonly) #0 align 2 {
  %2 = getelementptr inbounds %"class.base::internal::BindStateBase", %"class.base::internal::BindStateBase"* %0, i64 1
  %3 = getelementptr inbounds %"class.base::internal::BindStateBase", %"class.base::internal::BindStateBase"* %0, i64 1, i32 2
  %4 = getelementptr inbounds void (%"class.base::internal::BindStateBase"*)*, void (%"class.base::internal::BindStateBase"*)** %3, i64 1
  %5 = bitcast void (%"class.base::internal::BindStateBase"*)** %4 to i32*
  %6 = bitcast %"class.base::internal::BindStateBase"* %2 to i64*
  %7 = load i64, i64* %6, align 8
  %8 = getelementptr inbounds %"class.base::internal::BindStateBase", %"class.base::internal::BindStateBase"* %0, i64 1, i32 1
  %9 = bitcast void ()** %8 to i64*
  %10 = load i64, i64* %9, align 8
  %11 = bitcast void (%"class.base::internal::BindStateBase"*)** %3 to i8**
  %12 = load i8*, i8** %11, align 8
  %13 = getelementptr inbounds i8, i8* %12, i64 %10
  %14 = bitcast i8* %13 to %"class.net::(anonymous namespace)::MultiThreadedProxyResolver::GetProxyForURLJob"*
  %15 = and i64 %7, 1
  %16 = icmp eq i64 %15, 0
  br i1 %16, label %24, label %17

17:                                               ; preds = %1
  %18 = bitcast i8* %13 to i8**
  %19 = load i8*, i8** %18, align 8
  %20 = add i64 %7, -1
  %21 = getelementptr i8, i8* %19, i64 %20
  %22 = bitcast i8* %21 to void (%"class.net::(anonymous namespace)::MultiThreadedProxyResolver::GetProxyForURLJob"*, i32)**
  %23 = load void (%"class.net::(anonymous namespace)::MultiThreadedProxyResolver::GetProxyForURLJob"*, i32)*, void (%"class.net::(anonymous namespace)::MultiThreadedProxyResolver::GetProxyForURLJob"*, i32)** %22, align 8
  br label %26

24:                                               ; preds = %1
  %25 = inttoptr i64 %7 to void (%"class.net::(anonymous namespace)::MultiThreadedProxyResolver::GetProxyForURLJob"*, i32)*
  br label %26

26:                                               ; preds = %17, %24
  %27 = phi void (%"class.net::(anonymous namespace)::MultiThreadedProxyResolver::GetProxyForURLJob"*, i32)* [ %23, %17 ], [ %25, %24 ]
  %28 = load i32, i32* %5, align 4
  tail call void %27(%"class.net::(anonymous namespace)::MultiThreadedProxyResolver::GetProxyForURLJob"* %14, i32 %28) #14
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN4base8internal9BindStateIMN3net12_GLOBAL__N_126MultiThreadedProxyResolver17GetProxyForURLJobEFviEJ13scoped_refptrIS5_EiEE7DestroyEPKNS0_13BindStateBaseE(%"class.base::internal::BindStateBase"*) #0 align 2 {
  %2 = icmp eq %"class.base::internal::BindStateBase"* %0, null
  br i1 %2, label %22, label %3

3:                                                ; preds = %1
  %4 = getelementptr inbounds %"class.base::internal::BindStateBase", %"class.base::internal::BindStateBase"* %0, i64 1, i32 2
  %5 = bitcast void (%"class.base::internal::BindStateBase"*)** %4 to %"class.net::(anonymous namespace)::MultiThreadedProxyResolver::GetProxyForURLJob"**
  %6 = load %"class.net::(anonymous namespace)::MultiThreadedProxyResolver::GetProxyForURLJob"*, %"class.net::(anonymous namespace)::MultiThreadedProxyResolver::GetProxyForURLJob"** %5, align 8
  %7 = icmp eq %"class.net::(anonymous namespace)::MultiThreadedProxyResolver::GetProxyForURLJob"* %6, null
  br i1 %7, label %20, label %8

8:                                                ; preds = %3
  %9 = getelementptr inbounds %"class.net::(anonymous namespace)::MultiThreadedProxyResolver::GetProxyForURLJob", %"class.net::(anonymous namespace)::MultiThreadedProxyResolver::GetProxyForURLJob"* %6, i64 0, i32 0, i32 1
  %10 = getelementptr inbounds %"class.base::RefCountedThreadSafe.37", %"class.base::RefCountedThreadSafe.37"* %9, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %11 = atomicrmw sub i32* %10, i32 1 acq_rel
  %12 = icmp eq i32 %11, 1
  br i1 %12, label %13, label %20

13:                                               ; preds = %8
  %14 = getelementptr inbounds %"class.base::RefCountedThreadSafe.37", %"class.base::RefCountedThreadSafe.37"* %9, i64 -2
  %15 = bitcast %"class.base::RefCountedThreadSafe.37"* %14 to %"class.net::(anonymous namespace)::Job"*
  %16 = bitcast %"class.base::RefCountedThreadSafe.37"* %14 to void (%"class.net::(anonymous namespace)::Job"*)***
  %17 = load void (%"class.net::(anonymous namespace)::Job"*)**, void (%"class.net::(anonymous namespace)::Job"*)*** %16, align 8
  %18 = getelementptr inbounds void (%"class.net::(anonymous namespace)::Job"*)*, void (%"class.net::(anonymous namespace)::Job"*)** %17, i64 4
  %19 = load void (%"class.net::(anonymous namespace)::Job"*)*, void (%"class.net::(anonymous namespace)::Job"*)** %18, align 8
  tail call void %19(%"class.net::(anonymous namespace)::Job"* nonnull %15) #14
  br label %20

20:                                               ; preds = %3, %8, %13
  %21 = bitcast %"class.base::internal::BindStateBase"* %0 to i8*
  tail call void @_ZdlPv(i8* %21) #15
  br label %22

22:                                               ; preds = %20, %1
  ret void
}

declare void @_ZN3net9ProxyInfo3UseERKS0_(%"class.net::ProxyInfo"*, %"class.net::ProxyInfo"* dereferenceable(72)) local_unnamed_addr #1

; Function Attrs: nounwind
declare void @_ZN3net9ProxyInfoD1Ev(%"class.net::ProxyInfo"*) unnamed_addr #3

; Function Attrs: nounwind
declare void @_ZN3net19NetworkIsolationKeyD1Ev(%"class.net::NetworkIsolationKey"*) unnamed_addr #3

; Function Attrs: nounwind
declare void @_ZN4GURLD1Ev(%class.GURL*) unnamed_addr #3

; Function Attrs: nounwind
declare void @_ZN3net16NetLogWithSourceD1Ev(%"class.net::NetLogWithSource"*) unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN3net12_GLOBAL__N_126MultiThreadedProxyResolver11RequestImplD2Ev(%"class.net::(anonymous namespace)::MultiThreadedProxyResolver::RequestImpl"* nocapture) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.net::(anonymous namespace)::MultiThreadedProxyResolver::RequestImpl", %"class.net::(anonymous namespace)::MultiThreadedProxyResolver::RequestImpl"* %0, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [5 x i8*] }, { [5 x i8*] }* @_ZTVN3net12_GLOBAL__N_126MultiThreadedProxyResolver11RequestImplE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8
  %3 = getelementptr inbounds %"class.net::(anonymous namespace)::MultiThreadedProxyResolver::RequestImpl", %"class.net::(anonymous namespace)::MultiThreadedProxyResolver::RequestImpl"* %0, i64 0, i32 1, i32 0
  %4 = load %"class.net::(anonymous namespace)::Job"*, %"class.net::(anonymous namespace)::Job"** %3, align 8
  %5 = getelementptr inbounds %"class.net::(anonymous namespace)::Job", %"class.net::(anonymous namespace)::Job"* %4, i64 0, i32 4
  store i8 1, i8* %5, align 8
  %6 = load %"class.net::(anonymous namespace)::Job"*, %"class.net::(anonymous namespace)::Job"** %3, align 8
  %7 = icmp eq %"class.net::(anonymous namespace)::Job"* %6, null
  br i1 %7, label %20, label %8

8:                                                ; preds = %1
  %9 = getelementptr inbounds %"class.net::(anonymous namespace)::Job", %"class.net::(anonymous namespace)::Job"* %6, i64 0, i32 1
  %10 = getelementptr inbounds %"class.base::RefCountedThreadSafe.37", %"class.base::RefCountedThreadSafe.37"* %9, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %11 = atomicrmw sub i32* %10, i32 1 acq_rel
  %12 = icmp eq i32 %11, 1
  br i1 %12, label %13, label %20

13:                                               ; preds = %8
  %14 = getelementptr inbounds %"class.base::RefCountedThreadSafe.37", %"class.base::RefCountedThreadSafe.37"* %9, i64 -2
  %15 = bitcast %"class.base::RefCountedThreadSafe.37"* %14 to %"class.net::(anonymous namespace)::Job"*
  %16 = bitcast %"class.base::RefCountedThreadSafe.37"* %14 to void (%"class.net::(anonymous namespace)::Job"*)***
  %17 = load void (%"class.net::(anonymous namespace)::Job"*)**, void (%"class.net::(anonymous namespace)::Job"*)*** %16, align 8
  %18 = getelementptr inbounds void (%"class.net::(anonymous namespace)::Job"*)*, void (%"class.net::(anonymous namespace)::Job"*)** %17, i64 4
  %19 = load void (%"class.net::(anonymous namespace)::Job"*)*, void (%"class.net::(anonymous namespace)::Job"*)** %18, align 8
  tail call void %19(%"class.net::(anonymous namespace)::Job"* nonnull %15) #14
  br label %20

20:                                               ; preds = %1, %8, %13
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN3net12_GLOBAL__N_126MultiThreadedProxyResolver11RequestImplD0Ev(%"class.net::(anonymous namespace)::MultiThreadedProxyResolver::RequestImpl"*) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.net::(anonymous namespace)::MultiThreadedProxyResolver::RequestImpl", %"class.net::(anonymous namespace)::MultiThreadedProxyResolver::RequestImpl"* %0, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [5 x i8*] }, { [5 x i8*] }* @_ZTVN3net12_GLOBAL__N_126MultiThreadedProxyResolver11RequestImplE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8
  %3 = getelementptr inbounds %"class.net::(anonymous namespace)::MultiThreadedProxyResolver::RequestImpl", %"class.net::(anonymous namespace)::MultiThreadedProxyResolver::RequestImpl"* %0, i64 0, i32 1, i32 0
  %4 = load %"class.net::(anonymous namespace)::Job"*, %"class.net::(anonymous namespace)::Job"** %3, align 8
  %5 = getelementptr inbounds %"class.net::(anonymous namespace)::Job", %"class.net::(anonymous namespace)::Job"* %4, i64 0, i32 4
  store i8 1, i8* %5, align 8
  %6 = load %"class.net::(anonymous namespace)::Job"*, %"class.net::(anonymous namespace)::Job"** %3, align 8
  %7 = icmp eq %"class.net::(anonymous namespace)::Job"* %6, null
  br i1 %7, label %20, label %8

8:                                                ; preds = %1
  %9 = getelementptr inbounds %"class.net::(anonymous namespace)::Job", %"class.net::(anonymous namespace)::Job"* %6, i64 0, i32 1
  %10 = getelementptr inbounds %"class.base::RefCountedThreadSafe.37", %"class.base::RefCountedThreadSafe.37"* %9, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %11 = atomicrmw sub i32* %10, i32 1 acq_rel
  %12 = icmp eq i32 %11, 1
  br i1 %12, label %13, label %20

13:                                               ; preds = %8
  %14 = getelementptr inbounds %"class.base::RefCountedThreadSafe.37", %"class.base::RefCountedThreadSafe.37"* %9, i64 -2
  %15 = bitcast %"class.base::RefCountedThreadSafe.37"* %14 to %"class.net::(anonymous namespace)::Job"*
  %16 = bitcast %"class.base::RefCountedThreadSafe.37"* %14 to void (%"class.net::(anonymous namespace)::Job"*)***
  %17 = load void (%"class.net::(anonymous namespace)::Job"*)**, void (%"class.net::(anonymous namespace)::Job"*)*** %16, align 8
  %18 = getelementptr inbounds void (%"class.net::(anonymous namespace)::Job"*)*, void (%"class.net::(anonymous namespace)::Job"*)** %17, i64 4
  %19 = load void (%"class.net::(anonymous namespace)::Job"*)*, void (%"class.net::(anonymous namespace)::Job"*)** %18, align 8
  tail call void %19(%"class.net::(anonymous namespace)::Job"* nonnull %15) #14
  br label %20

20:                                               ; preds = %1, %8, %13
  %21 = bitcast %"class.net::(anonymous namespace)::MultiThreadedProxyResolver::RequestImpl"* %0 to i8*
  tail call void @_ZdlPv(i8* %21) #15
  ret void
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define internal i32 @_ZN3net12_GLOBAL__N_126MultiThreadedProxyResolver11RequestImpl12GetLoadStateEv(%"class.net::(anonymous namespace)::MultiThreadedProxyResolver::RequestImpl"* nocapture readnone) unnamed_addr #8 align 2 {
  ret i32 7
}

; Function Attrs: nounwind ssp uwtable
define internal fastcc void @_ZN4base14circular_dequeI13scoped_refptrIN3net12_GLOBAL__N_13JobEEE13SetCapacityToEm(%"class.base::circular_deque"* nocapture, i64) unnamed_addr #0 align 2 {
  %3 = alloca %"class.logging::CheckOpResult", align 8
  %4 = alloca %"class.logging::CheckOpResult", align 8
  %5 = alloca %"class.logging::CheckOpResult", align 8
  %6 = alloca %"class.logging::CheckOpResult", align 8
  %7 = alloca %"class.logging::CheckOpResult", align 8
  %8 = alloca %"class.logging::CheckOpResult", align 8
  %9 = alloca %"class.logging::CheckOpResult", align 8
  %10 = alloca %"class.logging::CheckError", align 8
  %11 = alloca %"class.logging::CheckOpResult", align 8
  %12 = alloca %"class.logging::CheckError", align 8
  %13 = alloca %"class.logging::CheckError", align 8
  %14 = alloca %"class.logging::CheckOpResult", align 8
  %15 = alloca %"class.logging::CheckError", align 8
  %16 = alloca %"class.logging::CheckOpResult", align 8
  %17 = alloca %"class.logging::CheckError", align 8
  %18 = alloca %"class.logging::CheckError", align 8
  %19 = alloca %"class.logging::CheckOpResult", align 8
  %20 = alloca %"class.logging::CheckError", align 8
  %21 = alloca %"class.logging::CheckOpResult", align 8
  %22 = alloca %"class.logging::CheckError", align 8
  %23 = alloca %"class.logging::CheckError", align 8
  %24 = add i64 %1, 1
  %25 = tail call { i64, i1 } @llvm.umul.with.overflow.i64(i64 %24, i64 8) #14
  %26 = extractvalue { i64, i1 } %25, 1
  br i1 %26, label %27, label %28, !prof !24

27:                                               ; preds = %2
  tail call void @llvm.trap() #14
  unreachable

28:                                               ; preds = %2
  %29 = extractvalue { i64, i1 } %25, 0
  %30 = tail call noalias i8* @malloc(i64 %29) #14
  %31 = ptrtoint i8* %30 to i64
  %32 = getelementptr inbounds %"class.base::circular_deque", %"class.base::circular_deque"* %0, i64 0, i32 1
  %33 = load i64, i64* %32, align 8
  %34 = getelementptr inbounds %"class.base::circular_deque", %"class.base::circular_deque"* %0, i64 0, i32 2
  %35 = load i64, i64* %34, align 8
  %36 = getelementptr inbounds %"class.base::circular_deque", %"class.base::circular_deque"* %0, i64 0, i32 0, i32 1
  %37 = load i64, i64* %36, align 8
  store i64 0, i64* %32, align 8
  %38 = icmp ugt i64 %35, %33
  br i1 %38, label %39, label %177

39:                                               ; preds = %28
  %40 = bitcast %"class.logging::CheckOpResult"* %21 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %40) #14
  %41 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %21, i64 0, i32 0
  %42 = bitcast %"class.logging::CheckOpResult"* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %42) #14
  %43 = icmp ult i64 %37, %33
  br i1 %43, label %45, label %44

44:                                               ; preds = %39
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %42) #14
  store i8* null, i8** %41, align 8
  br label %54

45:                                               ; preds = %39
  %46 = tail call i8* @_ZN7logging15CheckOpValueStrEm(i64 %33) #14
  %47 = tail call i8* @_ZN7logging15CheckOpValueStrEm(i64 %37) #14
  call void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"* nonnull %8, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.9, i64 0, i64 0), i8* %46, i8* %47) #14
  %48 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %8, i64 0, i32 0
  %49 = load i8*, i8** %48, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %42) #14
  store i8* %49, i8** %41, align 8
  %50 = icmp eq i8* %49, null
  br i1 %50, label %54, label %51

51:                                               ; preds = %45
  %52 = bitcast %"class.logging::CheckError"* %22 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %52) #14
  call void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* nonnull sret %22, i8* getelementptr inbounds ([38 x i8], [38 x i8]* @.str.8, i64 0, i64 0), i32 84, %"class.logging::CheckOpResult"* nonnull %21) #14
  %53 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %22) #14
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %22) #14
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %52) #14
  br label %54

54:                                               ; preds = %51, %45, %44
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %40) #14
  %55 = getelementptr inbounds %"class.base::circular_deque", %"class.base::circular_deque"* %0, i64 0, i32 0, i32 0
  %56 = load %class.scoped_refptr.36*, %class.scoped_refptr.36** %55, align 8
  %57 = ptrtoint %class.scoped_refptr.36* %56 to i64
  %58 = getelementptr inbounds %class.scoped_refptr.36, %class.scoped_refptr.36* %56, i64 %33
  %59 = bitcast %"class.logging::CheckOpResult"* %19 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %59) #14
  %60 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %19, i64 0, i32 0
  %61 = load i64, i64* %36, align 8
  %62 = bitcast %"class.logging::CheckOpResult"* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %62) #14
  %63 = icmp ult i64 %61, %35
  br i1 %63, label %65, label %64

64:                                               ; preds = %54
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %62) #14
  store i8* null, i8** %60, align 8
  br label %74

65:                                               ; preds = %54
  %66 = call i8* @_ZN7logging15CheckOpValueStrEm(i64 %35) #14
  %67 = call i8* @_ZN7logging15CheckOpValueStrEm(i64 %61) #14
  call void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"* nonnull %7, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.9, i64 0, i64 0), i8* %66, i8* %67) #14
  %68 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %7, i64 0, i32 0
  %69 = load i8*, i8** %68, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %62) #14
  store i8* %69, i8** %60, align 8
  %70 = icmp eq i8* %69, null
  br i1 %70, label %74, label %71

71:                                               ; preds = %65
  %72 = bitcast %"class.logging::CheckError"* %20 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %72) #14
  call void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* nonnull sret %20, i8* getelementptr inbounds ([38 x i8], [38 x i8]* @.str.8, i64 0, i64 0), i32 84, %"class.logging::CheckOpResult"* nonnull %19) #14
  %73 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %20) #14
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %20) #14
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %72) #14
  br label %74

74:                                               ; preds = %71, %65, %64
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %59) #14
  %75 = load %class.scoped_refptr.36*, %class.scoped_refptr.36** %55, align 8
  %76 = getelementptr inbounds %class.scoped_refptr.36, %class.scoped_refptr.36* %75, i64 %35
  %77 = bitcast i8* %30 to %class.scoped_refptr.36*
  %78 = ptrtoint %class.scoped_refptr.36* %58 to i64
  %79 = icmp ugt %class.scoped_refptr.36* %76, %77
  br i1 %79, label %80, label %95

80:                                               ; preds = %74
  %81 = ptrtoint %class.scoped_refptr.36* %76 to i64
  %82 = call { i64, i1 } @llvm.usub.with.overflow.i64(i64 %81, i64 %78) #14
  %83 = extractvalue { i64, i1 } %82, 1
  %84 = extractvalue { i64, i1 } %82, 0
  %85 = call { i64, i1 } @llvm.uadd.with.overflow.i64(i64 %31, i64 %84) #14
  %86 = extractvalue { i64, i1 } %85, 1
  %87 = or i1 %83, %86
  br i1 %87, label %88, label %89, !prof !24

88:                                               ; preds = %80
  call void @llvm.trap() #14
  unreachable

89:                                               ; preds = %80
  %90 = extractvalue { i64, i1 } %85, 0
  %91 = icmp ugt i64 %90, %78
  br i1 %91, label %92, label %95

92:                                               ; preds = %89
  %93 = bitcast %"class.logging::CheckError"* %18 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %93) #14
  call void @_ZN7logging10CheckError5CheckEPKciS2_(%"class.logging::CheckError"* nonnull sret %18, i8* getelementptr inbounds ([38 x i8], [38 x i8]* @.str.8, i64 0, i64 0), i32 150, i8* getelementptr inbounds ([41 x i8], [41 x i8]* @.str.13, i64 0, i64 0)) #14
  %94 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %18) #14
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %18) #14
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %93) #14
  br label %95

95:                                               ; preds = %92, %89, %74
  %96 = icmp eq %class.scoped_refptr.36* %58, %76
  br i1 %96, label %175, label %97

97:                                               ; preds = %95
  %98 = xor i64 %33, -1
  %99 = add i64 %35, %98
  %100 = getelementptr %class.scoped_refptr.36, %class.scoped_refptr.36* %75, i64 %99, i32 0
  %101 = ptrtoint %"class.net::(anonymous namespace)::Job"** %100 to i64
  %102 = sub i64 %101, %57
  %103 = lshr i64 %102, 3
  %104 = add nuw nsw i64 %103, 1
  %105 = and i64 %104, 7
  %106 = icmp eq i64 %105, 0
  br i1 %106, label %119, label %107

107:                                              ; preds = %97, %107
  %108 = phi %class.scoped_refptr.36* [ %116, %107 ], [ %77, %97 ]
  %109 = phi %class.scoped_refptr.36* [ %115, %107 ], [ %58, %97 ]
  %110 = phi i64 [ %117, %107 ], [ %105, %97 ]
  %111 = getelementptr inbounds %class.scoped_refptr.36, %class.scoped_refptr.36* %109, i64 0, i32 0
  %112 = bitcast %class.scoped_refptr.36* %109 to i64*
  %113 = load i64, i64* %112, align 8
  %114 = bitcast %class.scoped_refptr.36* %108 to i64*
  store i64 %113, i64* %114, align 8
  store %"class.net::(anonymous namespace)::Job"* null, %"class.net::(anonymous namespace)::Job"** %111, align 8
  %115 = getelementptr inbounds %class.scoped_refptr.36, %class.scoped_refptr.36* %109, i64 1
  %116 = getelementptr inbounds %class.scoped_refptr.36, %class.scoped_refptr.36* %108, i64 1
  %117 = add i64 %110, -1
  %118 = icmp eq i64 %117, 0
  br i1 %118, label %119, label %107, !llvm.loop !25

119:                                              ; preds = %107, %97
  %120 = phi %class.scoped_refptr.36* [ %77, %97 ], [ %116, %107 ]
  %121 = phi %class.scoped_refptr.36* [ %58, %97 ], [ %115, %107 ]
  %122 = icmp ult i64 %102, 56
  br i1 %122, label %175, label %123

123:                                              ; preds = %119, %123
  %124 = phi %class.scoped_refptr.36* [ %173, %123 ], [ %120, %119 ]
  %125 = phi %class.scoped_refptr.36* [ %172, %123 ], [ %121, %119 ]
  %126 = getelementptr inbounds %class.scoped_refptr.36, %class.scoped_refptr.36* %125, i64 0, i32 0
  %127 = bitcast %class.scoped_refptr.36* %125 to i64*
  %128 = load i64, i64* %127, align 8
  %129 = bitcast %class.scoped_refptr.36* %124 to i64*
  store i64 %128, i64* %129, align 8
  store %"class.net::(anonymous namespace)::Job"* null, %"class.net::(anonymous namespace)::Job"** %126, align 8
  %130 = getelementptr inbounds %class.scoped_refptr.36, %class.scoped_refptr.36* %125, i64 1
  %131 = getelementptr inbounds %class.scoped_refptr.36, %class.scoped_refptr.36* %124, i64 1
  %132 = getelementptr inbounds %class.scoped_refptr.36, %class.scoped_refptr.36* %130, i64 0, i32 0
  %133 = bitcast %class.scoped_refptr.36* %130 to i64*
  %134 = load i64, i64* %133, align 8
  %135 = bitcast %class.scoped_refptr.36* %131 to i64*
  store i64 %134, i64* %135, align 8
  store %"class.net::(anonymous namespace)::Job"* null, %"class.net::(anonymous namespace)::Job"** %132, align 8
  %136 = getelementptr inbounds %class.scoped_refptr.36, %class.scoped_refptr.36* %125, i64 2
  %137 = getelementptr inbounds %class.scoped_refptr.36, %class.scoped_refptr.36* %124, i64 2
  %138 = getelementptr inbounds %class.scoped_refptr.36, %class.scoped_refptr.36* %136, i64 0, i32 0
  %139 = bitcast %class.scoped_refptr.36* %136 to i64*
  %140 = load i64, i64* %139, align 8
  %141 = bitcast %class.scoped_refptr.36* %137 to i64*
  store i64 %140, i64* %141, align 8
  store %"class.net::(anonymous namespace)::Job"* null, %"class.net::(anonymous namespace)::Job"** %138, align 8
  %142 = getelementptr inbounds %class.scoped_refptr.36, %class.scoped_refptr.36* %125, i64 3
  %143 = getelementptr inbounds %class.scoped_refptr.36, %class.scoped_refptr.36* %124, i64 3
  %144 = getelementptr inbounds %class.scoped_refptr.36, %class.scoped_refptr.36* %142, i64 0, i32 0
  %145 = bitcast %class.scoped_refptr.36* %142 to i64*
  %146 = load i64, i64* %145, align 8
  %147 = bitcast %class.scoped_refptr.36* %143 to i64*
  store i64 %146, i64* %147, align 8
  store %"class.net::(anonymous namespace)::Job"* null, %"class.net::(anonymous namespace)::Job"** %144, align 8
  %148 = getelementptr inbounds %class.scoped_refptr.36, %class.scoped_refptr.36* %125, i64 4
  %149 = getelementptr inbounds %class.scoped_refptr.36, %class.scoped_refptr.36* %124, i64 4
  %150 = getelementptr inbounds %class.scoped_refptr.36, %class.scoped_refptr.36* %148, i64 0, i32 0
  %151 = bitcast %class.scoped_refptr.36* %148 to i64*
  %152 = load i64, i64* %151, align 8
  %153 = bitcast %class.scoped_refptr.36* %149 to i64*
  store i64 %152, i64* %153, align 8
  store %"class.net::(anonymous namespace)::Job"* null, %"class.net::(anonymous namespace)::Job"** %150, align 8
  %154 = getelementptr inbounds %class.scoped_refptr.36, %class.scoped_refptr.36* %125, i64 5
  %155 = getelementptr inbounds %class.scoped_refptr.36, %class.scoped_refptr.36* %124, i64 5
  %156 = getelementptr inbounds %class.scoped_refptr.36, %class.scoped_refptr.36* %154, i64 0, i32 0
  %157 = bitcast %class.scoped_refptr.36* %154 to i64*
  %158 = load i64, i64* %157, align 8
  %159 = bitcast %class.scoped_refptr.36* %155 to i64*
  store i64 %158, i64* %159, align 8
  store %"class.net::(anonymous namespace)::Job"* null, %"class.net::(anonymous namespace)::Job"** %156, align 8
  %160 = getelementptr inbounds %class.scoped_refptr.36, %class.scoped_refptr.36* %125, i64 6
  %161 = getelementptr inbounds %class.scoped_refptr.36, %class.scoped_refptr.36* %124, i64 6
  %162 = getelementptr inbounds %class.scoped_refptr.36, %class.scoped_refptr.36* %160, i64 0, i32 0
  %163 = bitcast %class.scoped_refptr.36* %160 to i64*
  %164 = load i64, i64* %163, align 8
  %165 = bitcast %class.scoped_refptr.36* %161 to i64*
  store i64 %164, i64* %165, align 8
  store %"class.net::(anonymous namespace)::Job"* null, %"class.net::(anonymous namespace)::Job"** %162, align 8
  %166 = getelementptr inbounds %class.scoped_refptr.36, %class.scoped_refptr.36* %125, i64 7
  %167 = getelementptr inbounds %class.scoped_refptr.36, %class.scoped_refptr.36* %124, i64 7
  %168 = getelementptr inbounds %class.scoped_refptr.36, %class.scoped_refptr.36* %166, i64 0, i32 0
  %169 = bitcast %class.scoped_refptr.36* %166 to i64*
  %170 = load i64, i64* %169, align 8
  %171 = bitcast %class.scoped_refptr.36* %167 to i64*
  store i64 %170, i64* %171, align 8
  store %"class.net::(anonymous namespace)::Job"* null, %"class.net::(anonymous namespace)::Job"** %168, align 8
  %172 = getelementptr inbounds %class.scoped_refptr.36, %class.scoped_refptr.36* %125, i64 8
  %173 = getelementptr inbounds %class.scoped_refptr.36, %class.scoped_refptr.36* %124, i64 8
  %174 = icmp eq %class.scoped_refptr.36* %172, %76
  br i1 %174, label %175, label %123

175:                                              ; preds = %119, %123, %95
  %176 = sub i64 %35, %33
  br label %451

177:                                              ; preds = %28
  %178 = icmp ult i64 %35, %33
  br i1 %178, label %179, label %451

179:                                              ; preds = %177
  %180 = bitcast %"class.logging::CheckOpResult"* %16 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %180) #14
  %181 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %16, i64 0, i32 0
  %182 = bitcast %"class.logging::CheckOpResult"* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %182) #14
  %183 = icmp ult i64 %37, %33
  br i1 %183, label %185, label %184

184:                                              ; preds = %179
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %182) #14
  store i8* null, i8** %181, align 8
  br label %194

185:                                              ; preds = %179
  %186 = tail call i8* @_ZN7logging15CheckOpValueStrEm(i64 %33) #14
  %187 = tail call i8* @_ZN7logging15CheckOpValueStrEm(i64 %37) #14
  call void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"* nonnull %6, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.9, i64 0, i64 0), i8* %186, i8* %187) #14
  %188 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %6, i64 0, i32 0
  %189 = load i8*, i8** %188, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %182) #14
  store i8* %189, i8** %181, align 8
  %190 = icmp eq i8* %189, null
  br i1 %190, label %194, label %191

191:                                              ; preds = %185
  %192 = bitcast %"class.logging::CheckError"* %17 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %192) #14
  call void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* nonnull sret %17, i8* getelementptr inbounds ([38 x i8], [38 x i8]* @.str.8, i64 0, i64 0), i32 84, %"class.logging::CheckOpResult"* nonnull %16) #14
  %193 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %17) #14
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %17) #14
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %192) #14
  br label %194

194:                                              ; preds = %191, %185, %184
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %180) #14
  %195 = getelementptr inbounds %"class.base::circular_deque", %"class.base::circular_deque"* %0, i64 0, i32 0, i32 0
  %196 = load %class.scoped_refptr.36*, %class.scoped_refptr.36** %195, align 8
  %197 = ptrtoint %class.scoped_refptr.36* %196 to i64
  %198 = getelementptr inbounds %class.scoped_refptr.36, %class.scoped_refptr.36* %196, i64 %33
  %199 = bitcast %"class.logging::CheckOpResult"* %14 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %199) #14
  %200 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %14, i64 0, i32 0
  %201 = load i64, i64* %36, align 8
  %202 = bitcast %"class.logging::CheckOpResult"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %202) #14
  %203 = icmp ugt i64 %37, %201
  br i1 %203, label %205, label %204

204:                                              ; preds = %194
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %202) #14
  store i8* null, i8** %200, align 8
  br label %214

205:                                              ; preds = %194
  %206 = call i8* @_ZN7logging15CheckOpValueStrEm(i64 %37) #14
  %207 = call i8* @_ZN7logging15CheckOpValueStrEm(i64 %201) #14
  call void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"* nonnull %5, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.9, i64 0, i64 0), i8* %206, i8* %207) #14
  %208 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %5, i64 0, i32 0
  %209 = load i8*, i8** %208, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %202) #14
  store i8* %209, i8** %200, align 8
  %210 = icmp eq i8* %209, null
  br i1 %210, label %214, label %211

211:                                              ; preds = %205
  %212 = bitcast %"class.logging::CheckError"* %15 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %212) #14
  call void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* nonnull sret %15, i8* getelementptr inbounds ([38 x i8], [38 x i8]* @.str.8, i64 0, i64 0), i32 84, %"class.logging::CheckOpResult"* nonnull %14) #14
  %213 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %15) #14
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %15) #14
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %212) #14
  br label %214

214:                                              ; preds = %211, %205, %204
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %199) #14
  %215 = load %class.scoped_refptr.36*, %class.scoped_refptr.36** %195, align 8
  %216 = getelementptr inbounds %class.scoped_refptr.36, %class.scoped_refptr.36* %215, i64 %37
  %217 = bitcast i8* %30 to %class.scoped_refptr.36*
  %218 = ptrtoint %class.scoped_refptr.36* %198 to i64
  %219 = icmp ugt %class.scoped_refptr.36* %216, %217
  br i1 %219, label %220, label %235

220:                                              ; preds = %214
  %221 = ptrtoint %class.scoped_refptr.36* %216 to i64
  %222 = call { i64, i1 } @llvm.usub.with.overflow.i64(i64 %221, i64 %218) #14
  %223 = extractvalue { i64, i1 } %222, 1
  %224 = extractvalue { i64, i1 } %222, 0
  %225 = call { i64, i1 } @llvm.uadd.with.overflow.i64(i64 %31, i64 %224) #14
  %226 = extractvalue { i64, i1 } %225, 1
  %227 = or i1 %223, %226
  br i1 %227, label %228, label %229, !prof !24

228:                                              ; preds = %220
  call void @llvm.trap() #14
  unreachable

229:                                              ; preds = %220
  %230 = extractvalue { i64, i1 } %225, 0
  %231 = icmp ugt i64 %230, %218
  br i1 %231, label %232, label %235

232:                                              ; preds = %229
  %233 = bitcast %"class.logging::CheckError"* %13 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %233) #14
  call void @_ZN7logging10CheckError5CheckEPKciS2_(%"class.logging::CheckError"* nonnull sret %13, i8* getelementptr inbounds ([38 x i8], [38 x i8]* @.str.8, i64 0, i64 0), i32 150, i8* getelementptr inbounds ([41 x i8], [41 x i8]* @.str.13, i64 0, i64 0)) #14
  %234 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %13) #14
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %13) #14
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %233) #14
  br label %235

235:                                              ; preds = %232, %229, %214
  %236 = icmp eq %class.scoped_refptr.36* %198, %216
  br i1 %236, label %315, label %237

237:                                              ; preds = %235
  %238 = xor i64 %33, -1
  %239 = add i64 %37, %238
  %240 = getelementptr %class.scoped_refptr.36, %class.scoped_refptr.36* %215, i64 %239, i32 0
  %241 = ptrtoint %"class.net::(anonymous namespace)::Job"** %240 to i64
  %242 = sub i64 %241, %197
  %243 = lshr i64 %242, 3
  %244 = add nuw nsw i64 %243, 1
  %245 = and i64 %244, 7
  %246 = icmp eq i64 %245, 0
  br i1 %246, label %259, label %247

247:                                              ; preds = %237, %247
  %248 = phi %class.scoped_refptr.36* [ %256, %247 ], [ %217, %237 ]
  %249 = phi %class.scoped_refptr.36* [ %255, %247 ], [ %198, %237 ]
  %250 = phi i64 [ %257, %247 ], [ %245, %237 ]
  %251 = getelementptr inbounds %class.scoped_refptr.36, %class.scoped_refptr.36* %249, i64 0, i32 0
  %252 = bitcast %class.scoped_refptr.36* %249 to i64*
  %253 = load i64, i64* %252, align 8
  %254 = bitcast %class.scoped_refptr.36* %248 to i64*
  store i64 %253, i64* %254, align 8
  store %"class.net::(anonymous namespace)::Job"* null, %"class.net::(anonymous namespace)::Job"** %251, align 8
  %255 = getelementptr inbounds %class.scoped_refptr.36, %class.scoped_refptr.36* %249, i64 1
  %256 = getelementptr inbounds %class.scoped_refptr.36, %class.scoped_refptr.36* %248, i64 1
  %257 = add i64 %250, -1
  %258 = icmp eq i64 %257, 0
  br i1 %258, label %259, label %247, !llvm.loop !26

259:                                              ; preds = %247, %237
  %260 = phi %class.scoped_refptr.36* [ %217, %237 ], [ %256, %247 ]
  %261 = phi %class.scoped_refptr.36* [ %198, %237 ], [ %255, %247 ]
  %262 = icmp ult i64 %242, 56
  br i1 %262, label %315, label %263

263:                                              ; preds = %259, %263
  %264 = phi %class.scoped_refptr.36* [ %313, %263 ], [ %260, %259 ]
  %265 = phi %class.scoped_refptr.36* [ %312, %263 ], [ %261, %259 ]
  %266 = getelementptr inbounds %class.scoped_refptr.36, %class.scoped_refptr.36* %265, i64 0, i32 0
  %267 = bitcast %class.scoped_refptr.36* %265 to i64*
  %268 = load i64, i64* %267, align 8
  %269 = bitcast %class.scoped_refptr.36* %264 to i64*
  store i64 %268, i64* %269, align 8
  store %"class.net::(anonymous namespace)::Job"* null, %"class.net::(anonymous namespace)::Job"** %266, align 8
  %270 = getelementptr inbounds %class.scoped_refptr.36, %class.scoped_refptr.36* %265, i64 1
  %271 = getelementptr inbounds %class.scoped_refptr.36, %class.scoped_refptr.36* %264, i64 1
  %272 = getelementptr inbounds %class.scoped_refptr.36, %class.scoped_refptr.36* %270, i64 0, i32 0
  %273 = bitcast %class.scoped_refptr.36* %270 to i64*
  %274 = load i64, i64* %273, align 8
  %275 = bitcast %class.scoped_refptr.36* %271 to i64*
  store i64 %274, i64* %275, align 8
  store %"class.net::(anonymous namespace)::Job"* null, %"class.net::(anonymous namespace)::Job"** %272, align 8
  %276 = getelementptr inbounds %class.scoped_refptr.36, %class.scoped_refptr.36* %265, i64 2
  %277 = getelementptr inbounds %class.scoped_refptr.36, %class.scoped_refptr.36* %264, i64 2
  %278 = getelementptr inbounds %class.scoped_refptr.36, %class.scoped_refptr.36* %276, i64 0, i32 0
  %279 = bitcast %class.scoped_refptr.36* %276 to i64*
  %280 = load i64, i64* %279, align 8
  %281 = bitcast %class.scoped_refptr.36* %277 to i64*
  store i64 %280, i64* %281, align 8
  store %"class.net::(anonymous namespace)::Job"* null, %"class.net::(anonymous namespace)::Job"** %278, align 8
  %282 = getelementptr inbounds %class.scoped_refptr.36, %class.scoped_refptr.36* %265, i64 3
  %283 = getelementptr inbounds %class.scoped_refptr.36, %class.scoped_refptr.36* %264, i64 3
  %284 = getelementptr inbounds %class.scoped_refptr.36, %class.scoped_refptr.36* %282, i64 0, i32 0
  %285 = bitcast %class.scoped_refptr.36* %282 to i64*
  %286 = load i64, i64* %285, align 8
  %287 = bitcast %class.scoped_refptr.36* %283 to i64*
  store i64 %286, i64* %287, align 8
  store %"class.net::(anonymous namespace)::Job"* null, %"class.net::(anonymous namespace)::Job"** %284, align 8
  %288 = getelementptr inbounds %class.scoped_refptr.36, %class.scoped_refptr.36* %265, i64 4
  %289 = getelementptr inbounds %class.scoped_refptr.36, %class.scoped_refptr.36* %264, i64 4
  %290 = getelementptr inbounds %class.scoped_refptr.36, %class.scoped_refptr.36* %288, i64 0, i32 0
  %291 = bitcast %class.scoped_refptr.36* %288 to i64*
  %292 = load i64, i64* %291, align 8
  %293 = bitcast %class.scoped_refptr.36* %289 to i64*
  store i64 %292, i64* %293, align 8
  store %"class.net::(anonymous namespace)::Job"* null, %"class.net::(anonymous namespace)::Job"** %290, align 8
  %294 = getelementptr inbounds %class.scoped_refptr.36, %class.scoped_refptr.36* %265, i64 5
  %295 = getelementptr inbounds %class.scoped_refptr.36, %class.scoped_refptr.36* %264, i64 5
  %296 = getelementptr inbounds %class.scoped_refptr.36, %class.scoped_refptr.36* %294, i64 0, i32 0
  %297 = bitcast %class.scoped_refptr.36* %294 to i64*
  %298 = load i64, i64* %297, align 8
  %299 = bitcast %class.scoped_refptr.36* %295 to i64*
  store i64 %298, i64* %299, align 8
  store %"class.net::(anonymous namespace)::Job"* null, %"class.net::(anonymous namespace)::Job"** %296, align 8
  %300 = getelementptr inbounds %class.scoped_refptr.36, %class.scoped_refptr.36* %265, i64 6
  %301 = getelementptr inbounds %class.scoped_refptr.36, %class.scoped_refptr.36* %264, i64 6
  %302 = getelementptr inbounds %class.scoped_refptr.36, %class.scoped_refptr.36* %300, i64 0, i32 0
  %303 = bitcast %class.scoped_refptr.36* %300 to i64*
  %304 = load i64, i64* %303, align 8
  %305 = bitcast %class.scoped_refptr.36* %301 to i64*
  store i64 %304, i64* %305, align 8
  store %"class.net::(anonymous namespace)::Job"* null, %"class.net::(anonymous namespace)::Job"** %302, align 8
  %306 = getelementptr inbounds %class.scoped_refptr.36, %class.scoped_refptr.36* %265, i64 7
  %307 = getelementptr inbounds %class.scoped_refptr.36, %class.scoped_refptr.36* %264, i64 7
  %308 = getelementptr inbounds %class.scoped_refptr.36, %class.scoped_refptr.36* %306, i64 0, i32 0
  %309 = bitcast %class.scoped_refptr.36* %306 to i64*
  %310 = load i64, i64* %309, align 8
  %311 = bitcast %class.scoped_refptr.36* %307 to i64*
  store i64 %310, i64* %311, align 8
  store %"class.net::(anonymous namespace)::Job"* null, %"class.net::(anonymous namespace)::Job"** %308, align 8
  %312 = getelementptr inbounds %class.scoped_refptr.36, %class.scoped_refptr.36* %265, i64 8
  %313 = getelementptr inbounds %class.scoped_refptr.36, %class.scoped_refptr.36* %264, i64 8
  %314 = icmp eq %class.scoped_refptr.36* %312, %216
  br i1 %314, label %315, label %263

315:                                              ; preds = %259, %263, %235
  %316 = sub i64 %37, %33
  %317 = load %class.scoped_refptr.36*, %class.scoped_refptr.36** %195, align 8
  %318 = ptrtoint %class.scoped_refptr.36* %317 to i64
  %319 = bitcast %"class.logging::CheckOpResult"* %11 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %319) #14
  %320 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %11, i64 0, i32 0
  %321 = load i64, i64* %36, align 8
  %322 = bitcast %"class.logging::CheckOpResult"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %322) #14
  %323 = icmp ult i64 %321, %35
  br i1 %323, label %325, label %324

324:                                              ; preds = %315
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %322) #14
  store i8* null, i8** %320, align 8
  br label %334

325:                                              ; preds = %315
  %326 = call i8* @_ZN7logging15CheckOpValueStrEm(i64 %35) #14
  %327 = call i8* @_ZN7logging15CheckOpValueStrEm(i64 %321) #14
  call void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"* nonnull %4, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.9, i64 0, i64 0), i8* %326, i8* %327) #14
  %328 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %4, i64 0, i32 0
  %329 = load i8*, i8** %328, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %322) #14
  store i8* %329, i8** %320, align 8
  %330 = icmp eq i8* %329, null
  br i1 %330, label %334, label %331

331:                                              ; preds = %325
  %332 = bitcast %"class.logging::CheckError"* %12 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %332) #14
  call void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* nonnull sret %12, i8* getelementptr inbounds ([38 x i8], [38 x i8]* @.str.8, i64 0, i64 0), i32 84, %"class.logging::CheckOpResult"* nonnull %11) #14
  %333 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %12) #14
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %12) #14
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %332) #14
  br label %334

334:                                              ; preds = %331, %325, %324
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %319) #14
  %335 = load %class.scoped_refptr.36*, %class.scoped_refptr.36** %195, align 8
  %336 = getelementptr inbounds %class.scoped_refptr.36, %class.scoped_refptr.36* %335, i64 %35
  %337 = bitcast %"class.logging::CheckOpResult"* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %337) #14
  %338 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %9, i64 0, i32 0
  %339 = bitcast %"class.logging::CheckOpResult"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %339) #14
  %340 = icmp ugt i64 %316, %24
  br i1 %340, label %342, label %341

341:                                              ; preds = %334
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %339) #14
  store i8* null, i8** %338, align 8
  br label %351

342:                                              ; preds = %334
  %343 = call i8* @_ZN7logging15CheckOpValueStrEm(i64 %316) #14
  %344 = call i8* @_ZN7logging15CheckOpValueStrEm(i64 %24) #14
  call void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"* nonnull %3, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.9, i64 0, i64 0), i8* %343, i8* %344) #14
  %345 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %3, i64 0, i32 0
  %346 = load i8*, i8** %345, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %339) #14
  store i8* %346, i8** %338, align 8
  %347 = icmp eq i8* %346, null
  br i1 %347, label %351, label %348

348:                                              ; preds = %342
  %349 = bitcast %"class.logging::CheckError"* %10 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %349) #14
  call void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* nonnull sret %10, i8* getelementptr inbounds ([38 x i8], [38 x i8]* @.str.8, i64 0, i64 0), i32 84, %"class.logging::CheckOpResult"* nonnull %9) #14
  %350 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %10) #14
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %10) #14
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %349) #14
  br label %351

351:                                              ; preds = %348, %342, %341
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %337) #14
  %352 = getelementptr inbounds %class.scoped_refptr.36, %class.scoped_refptr.36* %217, i64 %316
  %353 = icmp ult %class.scoped_refptr.36* %352, %336
  br i1 %353, label %354, label %370

354:                                              ; preds = %351
  %355 = ptrtoint %class.scoped_refptr.36* %352 to i64
  %356 = ptrtoint %class.scoped_refptr.36* %336 to i64
  %357 = call { i64, i1 } @llvm.usub.with.overflow.i64(i64 %356, i64 %318) #14
  %358 = extractvalue { i64, i1 } %357, 1
  %359 = extractvalue { i64, i1 } %357, 0
  %360 = call { i64, i1 } @llvm.uadd.with.overflow.i64(i64 %355, i64 %359) #14
  %361 = extractvalue { i64, i1 } %360, 1
  %362 = or i1 %358, %361
  br i1 %362, label %363, label %364, !prof !24

363:                                              ; preds = %354
  call void @llvm.trap() #14
  unreachable

364:                                              ; preds = %354
  %365 = extractvalue { i64, i1 } %360, 0
  %366 = icmp ugt i64 %365, %318
  br i1 %366, label %367, label %370

367:                                              ; preds = %364
  %368 = bitcast %"class.logging::CheckError"* %23 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %368) #14
  call void @_ZN7logging10CheckError5CheckEPKciS2_(%"class.logging::CheckError"* nonnull sret %23, i8* getelementptr inbounds ([38 x i8], [38 x i8]* @.str.8, i64 0, i64 0), i32 150, i8* getelementptr inbounds ([41 x i8], [41 x i8]* @.str.13, i64 0, i64 0)) #14
  %369 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %23) #14
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %23) #14
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %368) #14
  br label %370

370:                                              ; preds = %367, %364, %351
  %371 = icmp eq %class.scoped_refptr.36* %317, %336
  br i1 %371, label %449, label %372

372:                                              ; preds = %370
  %373 = add i64 %35, -1
  %374 = getelementptr %class.scoped_refptr.36, %class.scoped_refptr.36* %335, i64 %373, i32 0
  %375 = ptrtoint %"class.net::(anonymous namespace)::Job"** %374 to i64
  %376 = sub i64 %375, %318
  %377 = lshr i64 %376, 3
  %378 = add nuw nsw i64 %377, 1
  %379 = and i64 %378, 7
  %380 = icmp eq i64 %379, 0
  br i1 %380, label %393, label %381

381:                                              ; preds = %372, %381
  %382 = phi %class.scoped_refptr.36* [ %390, %381 ], [ %352, %372 ]
  %383 = phi %class.scoped_refptr.36* [ %389, %381 ], [ %317, %372 ]
  %384 = phi i64 [ %391, %381 ], [ %379, %372 ]
  %385 = getelementptr inbounds %class.scoped_refptr.36, %class.scoped_refptr.36* %383, i64 0, i32 0
  %386 = bitcast %class.scoped_refptr.36* %383 to i64*
  %387 = load i64, i64* %386, align 8
  %388 = bitcast %class.scoped_refptr.36* %382 to i64*
  store i64 %387, i64* %388, align 8
  store %"class.net::(anonymous namespace)::Job"* null, %"class.net::(anonymous namespace)::Job"** %385, align 8
  %389 = getelementptr inbounds %class.scoped_refptr.36, %class.scoped_refptr.36* %383, i64 1
  %390 = getelementptr inbounds %class.scoped_refptr.36, %class.scoped_refptr.36* %382, i64 1
  %391 = add i64 %384, -1
  %392 = icmp eq i64 %391, 0
  br i1 %392, label %393, label %381, !llvm.loop !27

393:                                              ; preds = %381, %372
  %394 = phi %class.scoped_refptr.36* [ %352, %372 ], [ %390, %381 ]
  %395 = phi %class.scoped_refptr.36* [ %317, %372 ], [ %389, %381 ]
  %396 = icmp ult i64 %376, 56
  br i1 %396, label %449, label %397

397:                                              ; preds = %393, %397
  %398 = phi %class.scoped_refptr.36* [ %447, %397 ], [ %394, %393 ]
  %399 = phi %class.scoped_refptr.36* [ %446, %397 ], [ %395, %393 ]
  %400 = getelementptr inbounds %class.scoped_refptr.36, %class.scoped_refptr.36* %399, i64 0, i32 0
  %401 = bitcast %class.scoped_refptr.36* %399 to i64*
  %402 = load i64, i64* %401, align 8
  %403 = bitcast %class.scoped_refptr.36* %398 to i64*
  store i64 %402, i64* %403, align 8
  store %"class.net::(anonymous namespace)::Job"* null, %"class.net::(anonymous namespace)::Job"** %400, align 8
  %404 = getelementptr inbounds %class.scoped_refptr.36, %class.scoped_refptr.36* %399, i64 1
  %405 = getelementptr inbounds %class.scoped_refptr.36, %class.scoped_refptr.36* %398, i64 1
  %406 = getelementptr inbounds %class.scoped_refptr.36, %class.scoped_refptr.36* %404, i64 0, i32 0
  %407 = bitcast %class.scoped_refptr.36* %404 to i64*
  %408 = load i64, i64* %407, align 8
  %409 = bitcast %class.scoped_refptr.36* %405 to i64*
  store i64 %408, i64* %409, align 8
  store %"class.net::(anonymous namespace)::Job"* null, %"class.net::(anonymous namespace)::Job"** %406, align 8
  %410 = getelementptr inbounds %class.scoped_refptr.36, %class.scoped_refptr.36* %399, i64 2
  %411 = getelementptr inbounds %class.scoped_refptr.36, %class.scoped_refptr.36* %398, i64 2
  %412 = getelementptr inbounds %class.scoped_refptr.36, %class.scoped_refptr.36* %410, i64 0, i32 0
  %413 = bitcast %class.scoped_refptr.36* %410 to i64*
  %414 = load i64, i64* %413, align 8
  %415 = bitcast %class.scoped_refptr.36* %411 to i64*
  store i64 %414, i64* %415, align 8
  store %"class.net::(anonymous namespace)::Job"* null, %"class.net::(anonymous namespace)::Job"** %412, align 8
  %416 = getelementptr inbounds %class.scoped_refptr.36, %class.scoped_refptr.36* %399, i64 3
  %417 = getelementptr inbounds %class.scoped_refptr.36, %class.scoped_refptr.36* %398, i64 3
  %418 = getelementptr inbounds %class.scoped_refptr.36, %class.scoped_refptr.36* %416, i64 0, i32 0
  %419 = bitcast %class.scoped_refptr.36* %416 to i64*
  %420 = load i64, i64* %419, align 8
  %421 = bitcast %class.scoped_refptr.36* %417 to i64*
  store i64 %420, i64* %421, align 8
  store %"class.net::(anonymous namespace)::Job"* null, %"class.net::(anonymous namespace)::Job"** %418, align 8
  %422 = getelementptr inbounds %class.scoped_refptr.36, %class.scoped_refptr.36* %399, i64 4
  %423 = getelementptr inbounds %class.scoped_refptr.36, %class.scoped_refptr.36* %398, i64 4
  %424 = getelementptr inbounds %class.scoped_refptr.36, %class.scoped_refptr.36* %422, i64 0, i32 0
  %425 = bitcast %class.scoped_refptr.36* %422 to i64*
  %426 = load i64, i64* %425, align 8
  %427 = bitcast %class.scoped_refptr.36* %423 to i64*
  store i64 %426, i64* %427, align 8
  store %"class.net::(anonymous namespace)::Job"* null, %"class.net::(anonymous namespace)::Job"** %424, align 8
  %428 = getelementptr inbounds %class.scoped_refptr.36, %class.scoped_refptr.36* %399, i64 5
  %429 = getelementptr inbounds %class.scoped_refptr.36, %class.scoped_refptr.36* %398, i64 5
  %430 = getelementptr inbounds %class.scoped_refptr.36, %class.scoped_refptr.36* %428, i64 0, i32 0
  %431 = bitcast %class.scoped_refptr.36* %428 to i64*
  %432 = load i64, i64* %431, align 8
  %433 = bitcast %class.scoped_refptr.36* %429 to i64*
  store i64 %432, i64* %433, align 8
  store %"class.net::(anonymous namespace)::Job"* null, %"class.net::(anonymous namespace)::Job"** %430, align 8
  %434 = getelementptr inbounds %class.scoped_refptr.36, %class.scoped_refptr.36* %399, i64 6
  %435 = getelementptr inbounds %class.scoped_refptr.36, %class.scoped_refptr.36* %398, i64 6
  %436 = getelementptr inbounds %class.scoped_refptr.36, %class.scoped_refptr.36* %434, i64 0, i32 0
  %437 = bitcast %class.scoped_refptr.36* %434 to i64*
  %438 = load i64, i64* %437, align 8
  %439 = bitcast %class.scoped_refptr.36* %435 to i64*
  store i64 %438, i64* %439, align 8
  store %"class.net::(anonymous namespace)::Job"* null, %"class.net::(anonymous namespace)::Job"** %436, align 8
  %440 = getelementptr inbounds %class.scoped_refptr.36, %class.scoped_refptr.36* %399, i64 7
  %441 = getelementptr inbounds %class.scoped_refptr.36, %class.scoped_refptr.36* %398, i64 7
  %442 = getelementptr inbounds %class.scoped_refptr.36, %class.scoped_refptr.36* %440, i64 0, i32 0
  %443 = bitcast %class.scoped_refptr.36* %440 to i64*
  %444 = load i64, i64* %443, align 8
  %445 = bitcast %class.scoped_refptr.36* %441 to i64*
  store i64 %444, i64* %445, align 8
  store %"class.net::(anonymous namespace)::Job"* null, %"class.net::(anonymous namespace)::Job"** %442, align 8
  %446 = getelementptr inbounds %class.scoped_refptr.36, %class.scoped_refptr.36* %399, i64 8
  %447 = getelementptr inbounds %class.scoped_refptr.36, %class.scoped_refptr.36* %398, i64 8
  %448 = icmp eq %class.scoped_refptr.36* %446, %336
  br i1 %448, label %449, label %397

449:                                              ; preds = %393, %397, %370
  %450 = add i64 %316, %35
  br label %451

451:                                              ; preds = %177, %175, %449
  %452 = phi i64 [ %176, %175 ], [ %450, %449 ], [ 0, %177 ]
  store i64 %452, i64* %34, align 8
  %453 = bitcast %"class.base::circular_deque"* %0 to i8**
  %454 = load i8*, i8** %453, align 8
  call void @free(i8* %454) #14
  %455 = bitcast %"class.base::circular_deque"* %0 to i64*
  store i64 %31, i64* %455, align 8
  store i64 %24, i64* %36, align 8
  ret void
}

; Function Attrs: nofree nounwind
declare noalias i8* @malloc(i64) local_unnamed_addr #12

; Function Attrs: nounwind readnone speculatable
declare { i64, i1 } @llvm.umul.with.overflow.i64(i64, i64) #13

; Function Attrs: nounwind readnone speculatable
declare { i64, i1 } @llvm.uadd.with.overflow.i64(i64, i64) #13

; Function Attrs: nounwind readnone speculatable
declare { i64, i1 } @llvm.usub.with.overflow.i64(i64, i64) #13

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__16__treeIPN3net33MultiThreadedProxyResolverFactory3JobENS_4lessIS4_EENS_9allocatorIS4_EEE7destroyEPNS_11__tree_nodeIS4_PvEE(%"class.std::__1::__tree"*, %"class.std::__1::__tree_node"*) local_unnamed_addr #0 comdat align 2 {
  %3 = icmp eq %"class.std::__1::__tree_node"* %1, null
  br i1 %3, label %11, label %4

4:                                                ; preds = %2
  %5 = bitcast %"class.std::__1::__tree_node"* %1 to %"class.std::__1::__tree_node"**
  %6 = load %"class.std::__1::__tree_node"*, %"class.std::__1::__tree_node"** %5, align 8
  tail call void @_ZNSt3__16__treeIPN3net33MultiThreadedProxyResolverFactory3JobENS_4lessIS4_EENS_9allocatorIS4_EEE7destroyEPNS_11__tree_nodeIS4_PvEE(%"class.std::__1::__tree"* %0, %"class.std::__1::__tree_node"* %6) #14
  %7 = getelementptr inbounds %"class.std::__1::__tree_node", %"class.std::__1::__tree_node"* %1, i64 0, i32 0, i32 1
  %8 = bitcast %"class.std::__1::__tree_node_base"** %7 to %"class.std::__1::__tree_node"**
  %9 = load %"class.std::__1::__tree_node"*, %"class.std::__1::__tree_node"** %8, align 8
  tail call void @_ZNSt3__16__treeIPN3net33MultiThreadedProxyResolverFactory3JobENS_4lessIS4_EENS_9allocatorIS4_EEE7destroyEPNS_11__tree_nodeIS4_PvEE(%"class.std::__1::__tree"* %0, %"class.std::__1::__tree_node"* %9) #14
  %10 = bitcast %"class.std::__1::__tree_node"* %1 to i8*
  tail call void @_ZdlPv(i8* %10) #15
  ret void

11:                                               ; preds = %2
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__127__tree_balance_after_insertIPNS_16__tree_node_baseIPvEEEEvT_S5_(%"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"*) local_unnamed_addr #0 comdat {
  %3 = icmp eq %"class.std::__1::__tree_node_base"* %1, %0
  %4 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %1, i64 0, i32 3
  %5 = zext i1 %3 to i8
  store i8 %5, i8* %4, align 8
  br i1 %3, label %156, label %6

6:                                                ; preds = %2, %149
  %7 = phi %"class.std::__1::__tree_node_base"* [ %20, %149 ], [ %1, %2 ]
  %8 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %7, i64 0, i32 2
  %9 = bitcast %"class.std::__1::__tree_end_node"** %8 to %"class.std::__1::__tree_node_base"**
  %10 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %9, align 8
  %11 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %10, i64 0, i32 3
  %12 = load i8, i8* %11, align 8, !range !17
  %13 = icmp eq i8 %12, 0
  br i1 %13, label %14, label %156

14:                                               ; preds = %6
  %15 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %10, i64 0, i32 2
  %16 = load %"class.std::__1::__tree_end_node"*, %"class.std::__1::__tree_end_node"** %15, align 8
  %17 = getelementptr inbounds %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_end_node"* %16, i64 0, i32 0
  %18 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %17, align 8
  %19 = icmp eq %"class.std::__1::__tree_node_base"* %18, %10
  %20 = bitcast %"class.std::__1::__tree_end_node"* %16 to %"class.std::__1::__tree_node_base"*
  br i1 %19, label %21, label %87

21:                                               ; preds = %14
  %22 = getelementptr inbounds %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_end_node"* %16, i64 1, i32 0
  %23 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %22, align 8
  %24 = icmp eq %"class.std::__1::__tree_node_base"* %23, null
  br i1 %24, label %29, label %25

25:                                               ; preds = %21
  %26 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %23, i64 0, i32 3
  %27 = load i8, i8* %26, align 8, !range !17
  %28 = icmp eq i8 %27, 0
  br i1 %28, label %149, label %29

29:                                               ; preds = %25, %21
  %30 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %10, i64 0, i32 2
  %31 = bitcast %"class.std::__1::__tree_end_node"* %16 to %"class.std::__1::__tree_node_base"*
  %32 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %10, i64 0, i32 0, i32 0
  %33 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %32, align 8
  %34 = icmp eq %"class.std::__1::__tree_node_base"* %33, %7
  br i1 %34, label %61, label %35

35:                                               ; preds = %29
  %36 = ptrtoint %"class.std::__1::__tree_end_node"* %16 to i64
  %37 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %10, i64 0, i32 1
  %38 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %37, align 8
  %39 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %38, i64 0, i32 0, i32 0
  %40 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %39, align 8
  store %"class.std::__1::__tree_node_base"* %40, %"class.std::__1::__tree_node_base"** %37, align 8
  %41 = icmp eq %"class.std::__1::__tree_node_base"* %40, null
  br i1 %41, label %47, label %42

42:                                               ; preds = %35
  %43 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %10, i64 0, i32 0
  %44 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %40, i64 0, i32 2
  store %"class.std::__1::__tree_end_node"* %43, %"class.std::__1::__tree_end_node"** %44, align 8
  %45 = bitcast %"class.std::__1::__tree_end_node"** %30 to i64*
  %46 = load i64, i64* %45, align 8
  br label %47

47:                                               ; preds = %35, %42
  %48 = phi i64 [ %46, %42 ], [ %36, %35 ]
  %49 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %38, i64 0, i32 2
  %50 = bitcast %"class.std::__1::__tree_end_node"** %49 to i64*
  store i64 %48, i64* %50, align 8
  %51 = load %"class.std::__1::__tree_end_node"*, %"class.std::__1::__tree_end_node"** %30, align 8
  %52 = getelementptr inbounds %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_end_node"* %51, i64 0, i32 0
  %53 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %52, align 8
  %54 = icmp eq %"class.std::__1::__tree_node_base"* %53, %10
  %55 = getelementptr inbounds %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_end_node"* %51, i64 1, i32 0
  %56 = select i1 %54, %"class.std::__1::__tree_node_base"** %52, %"class.std::__1::__tree_node_base"** %55
  store %"class.std::__1::__tree_node_base"* %38, %"class.std::__1::__tree_node_base"** %56, align 8
  store %"class.std::__1::__tree_node_base"* %10, %"class.std::__1::__tree_node_base"** %39, align 8
  %57 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %38, i64 0, i32 0
  store %"class.std::__1::__tree_end_node"* %57, %"class.std::__1::__tree_end_node"** %30, align 8
  %58 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %38, i64 0, i32 2
  %59 = bitcast %"class.std::__1::__tree_end_node"** %58 to %"class.std::__1::__tree_node_base"**
  %60 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %59, align 8
  br label %61

61:                                               ; preds = %47, %29
  %62 = phi %"class.std::__1::__tree_node_base"* [ %31, %29 ], [ %60, %47 ]
  %63 = phi %"class.std::__1::__tree_node_base"* [ %10, %29 ], [ %38, %47 ]
  %64 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %63, i64 0, i32 3
  store i8 1, i8* %64, align 8
  %65 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %62, i64 0, i32 3
  store i8 0, i8* %65, align 8
  %66 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %62, i64 0, i32 0, i32 0
  %67 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %66, align 8
  %68 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %67, i64 0, i32 1
  %69 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %68, align 8
  store %"class.std::__1::__tree_node_base"* %69, %"class.std::__1::__tree_node_base"** %66, align 8
  %70 = icmp eq %"class.std::__1::__tree_node_base"* %69, null
  br i1 %70, label %74, label %71

71:                                               ; preds = %61
  %72 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %62, i64 0, i32 0
  %73 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %69, i64 0, i32 2
  store %"class.std::__1::__tree_end_node"* %72, %"class.std::__1::__tree_end_node"** %73, align 8
  br label %74

74:                                               ; preds = %71, %61
  %75 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %62, i64 0, i32 2
  %76 = bitcast %"class.std::__1::__tree_end_node"** %75 to i64*
  %77 = load i64, i64* %76, align 8
  %78 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %67, i64 0, i32 2
  %79 = bitcast %"class.std::__1::__tree_end_node"** %78 to i64*
  store i64 %77, i64* %79, align 8
  %80 = load %"class.std::__1::__tree_end_node"*, %"class.std::__1::__tree_end_node"** %75, align 8
  %81 = getelementptr inbounds %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_end_node"* %80, i64 0, i32 0
  %82 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %81, align 8
  %83 = icmp eq %"class.std::__1::__tree_node_base"* %82, %62
  %84 = getelementptr inbounds %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_end_node"* %80, i64 1, i32 0
  %85 = select i1 %83, %"class.std::__1::__tree_node_base"** %81, %"class.std::__1::__tree_node_base"** %84
  store %"class.std::__1::__tree_node_base"* %67, %"class.std::__1::__tree_node_base"** %85, align 8
  store %"class.std::__1::__tree_node_base"* %62, %"class.std::__1::__tree_node_base"** %68, align 8
  %86 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %67, i64 0, i32 0
  store %"class.std::__1::__tree_end_node"* %86, %"class.std::__1::__tree_end_node"** %75, align 8
  br label %156

87:                                               ; preds = %14
  %88 = icmp eq %"class.std::__1::__tree_node_base"* %18, null
  br i1 %88, label %93, label %89

89:                                               ; preds = %87
  %90 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %18, i64 0, i32 3
  %91 = load i8, i8* %90, align 8, !range !17
  %92 = icmp eq i8 %91, 0
  br i1 %92, label %149, label %93

93:                                               ; preds = %89, %87
  %94 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %10, i64 0, i32 2
  %95 = bitcast %"class.std::__1::__tree_end_node"* %16 to %"class.std::__1::__tree_node_base"*
  %96 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %10, i64 0, i32 0, i32 0
  %97 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %96, align 8
  %98 = icmp eq %"class.std::__1::__tree_node_base"* %97, %7
  br i1 %98, label %99, label %123

99:                                               ; preds = %93
  %100 = ptrtoint %"class.std::__1::__tree_end_node"* %16 to i64
  %101 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %10, i64 0, i32 0, i32 0
  %102 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %7, i64 0, i32 1
  %103 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %102, align 8
  store %"class.std::__1::__tree_node_base"* %103, %"class.std::__1::__tree_node_base"** %101, align 8
  %104 = icmp eq %"class.std::__1::__tree_node_base"* %103, null
  br i1 %104, label %110, label %105

105:                                              ; preds = %99
  %106 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %10, i64 0, i32 0
  %107 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %103, i64 0, i32 2
  store %"class.std::__1::__tree_end_node"* %106, %"class.std::__1::__tree_end_node"** %107, align 8
  %108 = bitcast %"class.std::__1::__tree_end_node"** %94 to i64*
  %109 = load i64, i64* %108, align 8
  br label %110

110:                                              ; preds = %99, %105
  %111 = phi i64 [ %109, %105 ], [ %100, %99 ]
  %112 = bitcast %"class.std::__1::__tree_end_node"** %8 to i64*
  store i64 %111, i64* %112, align 8
  %113 = load %"class.std::__1::__tree_end_node"*, %"class.std::__1::__tree_end_node"** %94, align 8
  %114 = getelementptr inbounds %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_end_node"* %113, i64 0, i32 0
  %115 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %114, align 8
  %116 = icmp eq %"class.std::__1::__tree_node_base"* %115, %10
  %117 = getelementptr inbounds %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_end_node"* %113, i64 1, i32 0
  %118 = select i1 %116, %"class.std::__1::__tree_node_base"** %114, %"class.std::__1::__tree_node_base"** %117
  store %"class.std::__1::__tree_node_base"* %7, %"class.std::__1::__tree_node_base"** %118, align 8
  store %"class.std::__1::__tree_node_base"* %10, %"class.std::__1::__tree_node_base"** %102, align 8
  %119 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %7, i64 0, i32 0
  store %"class.std::__1::__tree_end_node"* %119, %"class.std::__1::__tree_end_node"** %94, align 8
  %120 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %7, i64 0, i32 2
  %121 = bitcast %"class.std::__1::__tree_end_node"** %120 to %"class.std::__1::__tree_node_base"**
  %122 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %121, align 8
  br label %123

123:                                              ; preds = %93, %110
  %124 = phi %"class.std::__1::__tree_node_base"* [ %122, %110 ], [ %95, %93 ]
  %125 = phi %"class.std::__1::__tree_node_base"* [ %7, %110 ], [ %10, %93 ]
  %126 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %125, i64 0, i32 3
  store i8 1, i8* %126, align 8
  %127 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %124, i64 0, i32 3
  store i8 0, i8* %127, align 8
  %128 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %124, i64 0, i32 1
  %129 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %128, align 8
  %130 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %129, i64 0, i32 0, i32 0
  %131 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %130, align 8
  store %"class.std::__1::__tree_node_base"* %131, %"class.std::__1::__tree_node_base"** %128, align 8
  %132 = icmp eq %"class.std::__1::__tree_node_base"* %131, null
  br i1 %132, label %136, label %133

133:                                              ; preds = %123
  %134 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %124, i64 0, i32 0
  %135 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %131, i64 0, i32 2
  store %"class.std::__1::__tree_end_node"* %134, %"class.std::__1::__tree_end_node"** %135, align 8
  br label %136

136:                                              ; preds = %133, %123
  %137 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %124, i64 0, i32 2
  %138 = bitcast %"class.std::__1::__tree_end_node"** %137 to i64*
  %139 = load i64, i64* %138, align 8
  %140 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %129, i64 0, i32 2
  %141 = bitcast %"class.std::__1::__tree_end_node"** %140 to i64*
  store i64 %139, i64* %141, align 8
  %142 = load %"class.std::__1::__tree_end_node"*, %"class.std::__1::__tree_end_node"** %137, align 8
  %143 = getelementptr inbounds %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_end_node"* %142, i64 0, i32 0
  %144 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %143, align 8
  %145 = icmp eq %"class.std::__1::__tree_node_base"* %144, %124
  %146 = getelementptr inbounds %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_end_node"* %142, i64 1, i32 0
  %147 = select i1 %145, %"class.std::__1::__tree_node_base"** %143, %"class.std::__1::__tree_node_base"** %146
  store %"class.std::__1::__tree_node_base"* %129, %"class.std::__1::__tree_node_base"** %147, align 8
  store %"class.std::__1::__tree_node_base"* %124, %"class.std::__1::__tree_node_base"** %130, align 8
  %148 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %129, i64 0, i32 0
  store %"class.std::__1::__tree_end_node"* %148, %"class.std::__1::__tree_end_node"** %137, align 8
  br label %156

149:                                              ; preds = %89, %25
  %150 = phi i8* [ %26, %25 ], [ %90, %89 ]
  store i8 1, i8* %11, align 8
  %151 = icmp eq %"class.std::__1::__tree_node_base"* %20, %0
  %152 = getelementptr inbounds %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_end_node"* %16, i64 3
  %153 = bitcast %"class.std::__1::__tree_end_node"* %152 to i8*
  %154 = zext i1 %151 to i8
  store i8 %154, i8* %153, align 8
  store i8 1, i8* %150, align 8
  %155 = icmp eq %"class.std::__1::__tree_node_base"* %20, %0
  br i1 %155, label %156, label %6

156:                                              ; preds = %6, %149, %2, %136, %74
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__113__tree_removeIPNS_16__tree_node_baseIPvEEEEvT_S5_(%"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"*) local_unnamed_addr #0 comdat {
  %3 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %1, i64 0, i32 0, i32 0
  %4 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %3, align 8
  %5 = icmp eq %"class.std::__1::__tree_node_base"* %4, null
  br i1 %5, label %17, label %6

6:                                                ; preds = %2
  %7 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %1, i64 0, i32 1
  %8 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %7, align 8
  %9 = icmp eq %"class.std::__1::__tree_node_base"* %8, null
  br i1 %9, label %15, label %10

10:                                               ; preds = %6, %10
  %11 = phi %"class.std::__1::__tree_node_base"* [ %13, %10 ], [ %8, %6 ]
  %12 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %11, i64 0, i32 0, i32 0
  %13 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %12, align 8
  %14 = icmp eq %"class.std::__1::__tree_node_base"* %13, null
  br i1 %14, label %17, label %10

15:                                               ; preds = %6
  %16 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %1, i64 0, i32 0, i32 0
  br label %23

17:                                               ; preds = %10, %2
  %18 = phi %"class.std::__1::__tree_node_base"* [ %1, %2 ], [ %11, %10 ]
  %19 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %18, i64 0, i32 0, i32 0
  %20 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %18, i64 0, i32 1
  %21 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %20, align 8
  %22 = icmp eq %"class.std::__1::__tree_node_base"* %21, null
  br i1 %22, label %32, label %23

23:                                               ; preds = %15, %17
  %24 = phi %"class.std::__1::__tree_node_base"** [ %19, %17 ], [ %16, %15 ]
  %25 = phi %"class.std::__1::__tree_node_base"* [ %18, %17 ], [ %1, %15 ]
  %26 = phi %"class.std::__1::__tree_node_base"* [ %21, %17 ], [ %4, %15 ]
  %27 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %25, i64 0, i32 2
  %28 = bitcast %"class.std::__1::__tree_end_node"** %27 to i64*
  %29 = load i64, i64* %28, align 8
  %30 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %26, i64 0, i32 2
  %31 = bitcast %"class.std::__1::__tree_end_node"** %30 to i64*
  store i64 %29, i64* %31, align 8
  br label %32

32:                                               ; preds = %17, %23
  %33 = phi %"class.std::__1::__tree_node_base"** [ %24, %23 ], [ %19, %17 ]
  %34 = phi %"class.std::__1::__tree_node_base"* [ %25, %23 ], [ %18, %17 ]
  %35 = phi i1 [ true, %23 ], [ false, %17 ]
  %36 = phi %"class.std::__1::__tree_node_base"* [ %26, %23 ], [ null, %17 ]
  %37 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %34, i64 0, i32 2
  %38 = load %"class.std::__1::__tree_end_node"*, %"class.std::__1::__tree_end_node"** %37, align 8
  %39 = getelementptr inbounds %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_end_node"* %38, i64 0, i32 0
  %40 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %39, align 8
  %41 = icmp eq %"class.std::__1::__tree_node_base"* %40, %34
  br i1 %41, label %42, label %48

42:                                               ; preds = %32
  store %"class.std::__1::__tree_node_base"* %36, %"class.std::__1::__tree_node_base"** %39, align 8
  %43 = icmp eq %"class.std::__1::__tree_node_base"* %34, %0
  br i1 %43, label %55, label %44

44:                                               ; preds = %42
  %45 = bitcast %"class.std::__1::__tree_end_node"** %37 to %"class.std::__1::__tree_node_base"**
  %46 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %45, align 8
  %47 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %46, i64 0, i32 1
  br label %52

48:                                               ; preds = %32
  %49 = getelementptr inbounds %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_end_node"* %38, i64 1, i32 0
  store %"class.std::__1::__tree_node_base"* %36, %"class.std::__1::__tree_node_base"** %49, align 8
  %50 = load %"class.std::__1::__tree_end_node"*, %"class.std::__1::__tree_end_node"** %37, align 8
  %51 = getelementptr inbounds %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_end_node"* %50, i64 0, i32 0
  br label %52

52:                                               ; preds = %48, %44
  %53 = phi %"class.std::__1::__tree_node_base"** [ %47, %44 ], [ %51, %48 ]
  %54 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %53, align 8
  br label %55

55:                                               ; preds = %52, %42
  %56 = phi %"class.std::__1::__tree_node_base"* [ %36, %42 ], [ %0, %52 ]
  %57 = phi %"class.std::__1::__tree_node_base"* [ null, %42 ], [ %54, %52 ]
  %58 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %34, i64 0, i32 3
  %59 = load i8, i8* %58, align 8, !range !17
  %60 = icmp ne i8 %59, 0
  %61 = icmp eq %"class.std::__1::__tree_node_base"* %34, %1
  br i1 %61, label %90, label %62

62:                                               ; preds = %55
  %63 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %1, i64 0, i32 2
  %64 = bitcast %"class.std::__1::__tree_end_node"** %63 to i64*
  %65 = load i64, i64* %64, align 8
  %66 = bitcast %"class.std::__1::__tree_end_node"** %37 to i64*
  store i64 %65, i64* %66, align 8
  %67 = load %"class.std::__1::__tree_end_node"*, %"class.std::__1::__tree_end_node"** %63, align 8
  %68 = getelementptr inbounds %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_end_node"* %67, i64 0, i32 0
  %69 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %68, align 8
  %70 = icmp eq %"class.std::__1::__tree_node_base"* %69, %1
  %71 = inttoptr i64 %65 to %"class.std::__1::__tree_node_base"*
  %72 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %71, i64 0, i32 1
  %73 = inttoptr i64 %65 to %"class.std::__1::__tree_end_node"*
  %74 = getelementptr inbounds %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_end_node"* %73, i64 0, i32 0
  %75 = select i1 %70, %"class.std::__1::__tree_node_base"** %74, %"class.std::__1::__tree_node_base"** %72
  store %"class.std::__1::__tree_node_base"* %34, %"class.std::__1::__tree_node_base"** %75, align 8
  %76 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %3, align 8
  store %"class.std::__1::__tree_node_base"* %76, %"class.std::__1::__tree_node_base"** %33, align 8
  %77 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %34, i64 0, i32 0
  %78 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %76, i64 0, i32 2
  store %"class.std::__1::__tree_end_node"* %77, %"class.std::__1::__tree_end_node"** %78, align 8
  %79 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %1, i64 0, i32 1
  %80 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %79, align 8
  %81 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %34, i64 0, i32 1
  store %"class.std::__1::__tree_node_base"* %80, %"class.std::__1::__tree_node_base"** %81, align 8
  %82 = icmp eq %"class.std::__1::__tree_node_base"* %80, null
  br i1 %82, label %85, label %83

83:                                               ; preds = %62
  %84 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %80, i64 0, i32 2
  store %"class.std::__1::__tree_end_node"* %77, %"class.std::__1::__tree_end_node"** %84, align 8
  br label %85

85:                                               ; preds = %62, %83
  %86 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %1, i64 0, i32 3
  %87 = load i8, i8* %86, align 8, !range !17
  store i8 %87, i8* %58, align 8
  %88 = icmp eq %"class.std::__1::__tree_node_base"* %56, %1
  %89 = select i1 %88, %"class.std::__1::__tree_node_base"* %34, %"class.std::__1::__tree_node_base"* %56
  br label %90

90:                                               ; preds = %85, %55
  %91 = phi %"class.std::__1::__tree_node_base"* [ %56, %55 ], [ %89, %85 ]
  %92 = icmp ne %"class.std::__1::__tree_node_base"* %91, null
  %93 = and i1 %60, %92
  br i1 %93, label %94, label %382

94:                                               ; preds = %90
  br i1 %35, label %95, label %97

95:                                               ; preds = %94
  %96 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %36, i64 0, i32 3
  store i8 1, i8* %96, align 8
  br label %382

97:                                               ; preds = %94, %371
  %98 = phi %"class.std::__1::__tree_node_base"* [ %373, %371 ], [ %91, %94 ]
  %99 = phi %"class.std::__1::__tree_node_base"* [ %381, %371 ], [ %57, %94 ]
  %100 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %99, i64 0, i32 2
  %101 = load %"class.std::__1::__tree_end_node"*, %"class.std::__1::__tree_end_node"** %100, align 8
  %102 = getelementptr inbounds %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_end_node"* %101, i64 0, i32 0
  %103 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %102, align 8
  %104 = icmp eq %"class.std::__1::__tree_node_base"* %103, %99
  %105 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %99, i64 0, i32 3
  %106 = load i8, i8* %105, align 8, !range !17
  %107 = icmp ne i8 %106, 0
  br i1 %104, label %242, label %108

108:                                              ; preds = %97
  br i1 %107, label %141, label %109

109:                                              ; preds = %108
  store i8 1, i8* %105, align 8
  %110 = bitcast %"class.std::__1::__tree_end_node"** %100 to %"class.std::__1::__tree_node_base"**
  %111 = getelementptr inbounds %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_end_node"* %101, i64 3
  %112 = bitcast %"class.std::__1::__tree_end_node"* %111 to i8*
  store i8 0, i8* %112, align 8
  %113 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %110, align 8
  %114 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %113, i64 0, i32 1
  %115 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %114, align 8
  %116 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %115, i64 0, i32 0, i32 0
  %117 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %116, align 8
  store %"class.std::__1::__tree_node_base"* %117, %"class.std::__1::__tree_node_base"** %114, align 8
  %118 = icmp eq %"class.std::__1::__tree_node_base"* %117, null
  br i1 %118, label %122, label %119

119:                                              ; preds = %109
  %120 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %113, i64 0, i32 0
  %121 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %117, i64 0, i32 2
  store %"class.std::__1::__tree_end_node"* %120, %"class.std::__1::__tree_end_node"** %121, align 8
  br label %122

122:                                              ; preds = %119, %109
  %123 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %113, i64 0, i32 2
  %124 = bitcast %"class.std::__1::__tree_end_node"** %123 to i64*
  %125 = load i64, i64* %124, align 8
  %126 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %115, i64 0, i32 2
  %127 = bitcast %"class.std::__1::__tree_end_node"** %126 to i64*
  store i64 %125, i64* %127, align 8
  %128 = load %"class.std::__1::__tree_end_node"*, %"class.std::__1::__tree_end_node"** %123, align 8
  %129 = getelementptr inbounds %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_end_node"* %128, i64 0, i32 0
  %130 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %129, align 8
  %131 = icmp eq %"class.std::__1::__tree_node_base"* %130, %113
  %132 = getelementptr inbounds %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_end_node"* %128, i64 1, i32 0
  %133 = select i1 %131, %"class.std::__1::__tree_node_base"** %129, %"class.std::__1::__tree_node_base"** %132
  store %"class.std::__1::__tree_node_base"* %115, %"class.std::__1::__tree_node_base"** %133, align 8
  store %"class.std::__1::__tree_node_base"* %113, %"class.std::__1::__tree_node_base"** %116, align 8
  %134 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %115, i64 0, i32 0
  store %"class.std::__1::__tree_end_node"* %134, %"class.std::__1::__tree_end_node"** %123, align 8
  %135 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %99, i64 0, i32 0, i32 0
  %136 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %135, align 8
  %137 = icmp eq %"class.std::__1::__tree_node_base"* %98, %136
  %138 = select i1 %137, %"class.std::__1::__tree_node_base"* %99, %"class.std::__1::__tree_node_base"* %98
  %139 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %136, i64 0, i32 1
  %140 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %139, align 8
  br label %141

141:                                              ; preds = %122, %108
  %142 = phi %"class.std::__1::__tree_node_base"* [ %98, %108 ], [ %138, %122 ]
  %143 = phi %"class.std::__1::__tree_node_base"* [ %99, %108 ], [ %140, %122 ]
  %144 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %143, i64 0, i32 0, i32 0
  %145 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %144, align 8
  %146 = icmp eq %"class.std::__1::__tree_node_base"* %145, null
  br i1 %146, label %151, label %147

147:                                              ; preds = %141
  %148 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %145, i64 0, i32 3
  %149 = load i8, i8* %148, align 8, !range !17
  %150 = icmp eq i8 %149, 0
  br i1 %150, label %172, label %151

151:                                              ; preds = %147, %141
  %152 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %143, i64 0, i32 1
  %153 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %152, align 8
  %154 = icmp eq %"class.std::__1::__tree_node_base"* %153, null
  br i1 %154, label %159, label %155

155:                                              ; preds = %151
  %156 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %153, i64 0, i32 3
  %157 = load i8, i8* %156, align 8, !range !17
  %158 = icmp eq i8 %157, 0
  br i1 %158, label %177, label %159

159:                                              ; preds = %155, %151
  %160 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %143, i64 0, i32 3
  store i8 0, i8* %160, align 8
  %161 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %143, i64 0, i32 2
  %162 = bitcast %"class.std::__1::__tree_end_node"** %161 to %"class.std::__1::__tree_node_base"**
  %163 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %162, align 8
  %164 = icmp eq %"class.std::__1::__tree_node_base"* %163, %142
  br i1 %164, label %169, label %165

165:                                              ; preds = %159
  %166 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %163, i64 0, i32 3
  %167 = load i8, i8* %166, align 8, !range !17
  %168 = icmp eq i8 %167, 0
  br i1 %168, label %169, label %371

169:                                              ; preds = %165, %159
  %170 = phi %"class.std::__1::__tree_node_base"* [ %163, %165 ], [ %142, %159 ]
  %171 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %170, i64 0, i32 3
  store i8 1, i8* %171, align 8
  br label %382

172:                                              ; preds = %147
  %173 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %143, i64 0, i32 0, i32 0
  %174 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %143, i64 0, i32 1
  %175 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %174, align 8
  %176 = icmp eq %"class.std::__1::__tree_node_base"* %175, null
  br i1 %176, label %185, label %179

177:                                              ; preds = %155
  %178 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %143, i64 0, i32 0, i32 0
  br label %179

179:                                              ; preds = %177, %172
  %180 = phi %"class.std::__1::__tree_node_base"** [ %173, %172 ], [ %178, %177 ]
  %181 = phi %"class.std::__1::__tree_node_base"* [ %175, %172 ], [ %153, %177 ]
  %182 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %181, i64 0, i32 3
  %183 = load i8, i8* %182, align 8, !range !17
  %184 = icmp eq i8 %183, 0
  br i1 %184, label %209, label %185

185:                                              ; preds = %179, %172
  %186 = phi %"class.std::__1::__tree_node_base"** [ %180, %179 ], [ %173, %172 ]
  %187 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %145, i64 0, i32 3
  store i8 1, i8* %187, align 8
  %188 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %143, i64 0, i32 3
  store i8 0, i8* %188, align 8
  %189 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %186, align 8
  %190 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %189, i64 0, i32 1
  %191 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %190, align 8
  store %"class.std::__1::__tree_node_base"* %191, %"class.std::__1::__tree_node_base"** %186, align 8
  %192 = icmp eq %"class.std::__1::__tree_node_base"* %191, null
  br i1 %192, label %196, label %193

193:                                              ; preds = %185
  %194 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %143, i64 0, i32 0
  %195 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %191, i64 0, i32 2
  store %"class.std::__1::__tree_end_node"* %194, %"class.std::__1::__tree_end_node"** %195, align 8
  br label %196

196:                                              ; preds = %193, %185
  %197 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %143, i64 0, i32 2
  %198 = bitcast %"class.std::__1::__tree_end_node"** %197 to i64*
  %199 = load i64, i64* %198, align 8
  %200 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %189, i64 0, i32 2
  %201 = bitcast %"class.std::__1::__tree_end_node"** %200 to i64*
  store i64 %199, i64* %201, align 8
  %202 = load %"class.std::__1::__tree_end_node"*, %"class.std::__1::__tree_end_node"** %197, align 8
  %203 = getelementptr inbounds %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_end_node"* %202, i64 0, i32 0
  %204 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %203, align 8
  %205 = icmp eq %"class.std::__1::__tree_node_base"* %204, %143
  %206 = getelementptr inbounds %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_end_node"* %202, i64 1, i32 0
  %207 = select i1 %205, %"class.std::__1::__tree_node_base"** %203, %"class.std::__1::__tree_node_base"** %206
  store %"class.std::__1::__tree_node_base"* %189, %"class.std::__1::__tree_node_base"** %207, align 8
  store %"class.std::__1::__tree_node_base"* %143, %"class.std::__1::__tree_node_base"** %190, align 8
  %208 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %189, i64 0, i32 0
  store %"class.std::__1::__tree_end_node"* %208, %"class.std::__1::__tree_end_node"** %197, align 8
  br label %209

209:                                              ; preds = %179, %196
  %210 = phi %"class.std::__1::__tree_node_base"* [ %189, %196 ], [ %143, %179 ]
  %211 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %210, i64 0, i32 2
  %212 = bitcast %"class.std::__1::__tree_end_node"** %211 to %"class.std::__1::__tree_node_base"**
  %213 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %212, align 8
  %214 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %213, i64 0, i32 3
  %215 = load i8, i8* %214, align 8, !range !17
  %216 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %210, i64 0, i32 3
  store i8 %215, i8* %216, align 8
  store i8 1, i8* %214, align 8
  %217 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %210, i64 0, i32 1
  %218 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %217, align 8
  %219 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %218, i64 0, i32 3
  store i8 1, i8* %219, align 8
  %220 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %212, align 8
  %221 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %220, i64 0, i32 1
  %222 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %221, align 8
  %223 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %222, i64 0, i32 0, i32 0
  %224 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %223, align 8
  store %"class.std::__1::__tree_node_base"* %224, %"class.std::__1::__tree_node_base"** %221, align 8
  %225 = icmp eq %"class.std::__1::__tree_node_base"* %224, null
  br i1 %225, label %229, label %226

226:                                              ; preds = %209
  %227 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %220, i64 0, i32 0
  %228 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %224, i64 0, i32 2
  store %"class.std::__1::__tree_end_node"* %227, %"class.std::__1::__tree_end_node"** %228, align 8
  br label %229

229:                                              ; preds = %226, %209
  %230 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %220, i64 0, i32 2
  %231 = bitcast %"class.std::__1::__tree_end_node"** %230 to i64*
  %232 = load i64, i64* %231, align 8
  %233 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %222, i64 0, i32 2
  %234 = bitcast %"class.std::__1::__tree_end_node"** %233 to i64*
  store i64 %232, i64* %234, align 8
  %235 = load %"class.std::__1::__tree_end_node"*, %"class.std::__1::__tree_end_node"** %230, align 8
  %236 = getelementptr inbounds %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_end_node"* %235, i64 0, i32 0
  %237 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %236, align 8
  %238 = icmp eq %"class.std::__1::__tree_node_base"* %237, %220
  %239 = getelementptr inbounds %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_end_node"* %235, i64 1, i32 0
  %240 = select i1 %238, %"class.std::__1::__tree_node_base"** %236, %"class.std::__1::__tree_node_base"** %239
  store %"class.std::__1::__tree_node_base"* %222, %"class.std::__1::__tree_node_base"** %240, align 8
  store %"class.std::__1::__tree_node_base"* %220, %"class.std::__1::__tree_node_base"** %223, align 8
  %241 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %222, i64 0, i32 0
  store %"class.std::__1::__tree_end_node"* %241, %"class.std::__1::__tree_end_node"** %230, align 8
  br label %382

242:                                              ; preds = %97
  br i1 %107, label %275, label %243

243:                                              ; preds = %242
  store i8 1, i8* %105, align 8
  %244 = bitcast %"class.std::__1::__tree_end_node"** %100 to %"class.std::__1::__tree_node_base"**
  %245 = getelementptr inbounds %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_end_node"* %101, i64 3
  %246 = bitcast %"class.std::__1::__tree_end_node"* %245 to i8*
  store i8 0, i8* %246, align 8
  %247 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %244, align 8
  %248 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %247, i64 0, i32 0, i32 0
  %249 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %248, align 8
  %250 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %249, i64 0, i32 1
  %251 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %250, align 8
  store %"class.std::__1::__tree_node_base"* %251, %"class.std::__1::__tree_node_base"** %248, align 8
  %252 = icmp eq %"class.std::__1::__tree_node_base"* %251, null
  br i1 %252, label %256, label %253

253:                                              ; preds = %243
  %254 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %247, i64 0, i32 0
  %255 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %251, i64 0, i32 2
  store %"class.std::__1::__tree_end_node"* %254, %"class.std::__1::__tree_end_node"** %255, align 8
  br label %256

256:                                              ; preds = %253, %243
  %257 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %247, i64 0, i32 2
  %258 = bitcast %"class.std::__1::__tree_end_node"** %257 to i64*
  %259 = load i64, i64* %258, align 8
  %260 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %249, i64 0, i32 2
  %261 = bitcast %"class.std::__1::__tree_end_node"** %260 to i64*
  store i64 %259, i64* %261, align 8
  %262 = load %"class.std::__1::__tree_end_node"*, %"class.std::__1::__tree_end_node"** %257, align 8
  %263 = getelementptr inbounds %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_end_node"* %262, i64 0, i32 0
  %264 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %263, align 8
  %265 = icmp eq %"class.std::__1::__tree_node_base"* %264, %247
  %266 = getelementptr inbounds %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_end_node"* %262, i64 1, i32 0
  %267 = select i1 %265, %"class.std::__1::__tree_node_base"** %263, %"class.std::__1::__tree_node_base"** %266
  store %"class.std::__1::__tree_node_base"* %249, %"class.std::__1::__tree_node_base"** %267, align 8
  store %"class.std::__1::__tree_node_base"* %247, %"class.std::__1::__tree_node_base"** %250, align 8
  %268 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %249, i64 0, i32 0
  store %"class.std::__1::__tree_end_node"* %268, %"class.std::__1::__tree_end_node"** %257, align 8
  %269 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %99, i64 0, i32 1
  %270 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %269, align 8
  %271 = icmp eq %"class.std::__1::__tree_node_base"* %98, %270
  %272 = select i1 %271, %"class.std::__1::__tree_node_base"* %99, %"class.std::__1::__tree_node_base"* %98
  %273 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %270, i64 0, i32 0, i32 0
  %274 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %273, align 8
  br label %275

275:                                              ; preds = %256, %242
  %276 = phi %"class.std::__1::__tree_node_base"* [ %98, %242 ], [ %272, %256 ]
  %277 = phi %"class.std::__1::__tree_node_base"* [ %99, %242 ], [ %274, %256 ]
  %278 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %277, i64 0, i32 0, i32 0
  %279 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %278, align 8
  %280 = icmp eq %"class.std::__1::__tree_node_base"* %279, null
  br i1 %280, label %285, label %281

281:                                              ; preds = %275
  %282 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %279, i64 0, i32 3
  %283 = load i8, i8* %282, align 8, !range !17
  %284 = icmp eq i8 %283, 0
  br i1 %284, label %338, label %285

285:                                              ; preds = %281, %275
  %286 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %277, i64 0, i32 1
  %287 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %286, align 8
  %288 = icmp eq %"class.std::__1::__tree_node_base"* %287, null
  br i1 %288, label %293, label %289

289:                                              ; preds = %285
  %290 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %287, i64 0, i32 3
  %291 = load i8, i8* %290, align 8, !range !17
  %292 = icmp eq i8 %291, 0
  br i1 %292, label %305, label %293

293:                                              ; preds = %289, %285
  %294 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %277, i64 0, i32 3
  store i8 0, i8* %294, align 8
  %295 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %277, i64 0, i32 2
  %296 = bitcast %"class.std::__1::__tree_end_node"** %295 to %"class.std::__1::__tree_node_base"**
  %297 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %296, align 8
  %298 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %297, i64 0, i32 3
  %299 = load i8, i8* %298, align 8, !range !17
  %300 = icmp eq i8 %299, 0
  %301 = icmp eq %"class.std::__1::__tree_node_base"* %297, %276
  %302 = or i1 %301, %300
  br i1 %302, label %303, label %371

303:                                              ; preds = %293
  %304 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %297, i64 0, i32 3
  store i8 1, i8* %304, align 8
  br label %382

305:                                              ; preds = %289
  br i1 %280, label %313, label %306

306:                                              ; preds = %305
  %307 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %279, i64 0, i32 3
  %308 = load i8, i8* %307, align 8, !range !17
  %309 = icmp eq i8 %308, 0
  br i1 %309, label %338, label %310

310:                                              ; preds = %306
  %311 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %277, i64 0, i32 1
  %312 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %311, align 8
  br label %313

313:                                              ; preds = %310, %305
  %314 = phi %"class.std::__1::__tree_node_base"* [ %312, %310 ], [ %287, %305 ]
  %315 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %277, i64 0, i32 1
  %316 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %314, i64 0, i32 3
  store i8 1, i8* %316, align 8
  %317 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %277, i64 0, i32 3
  store i8 0, i8* %317, align 8
  %318 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %315, align 8
  %319 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %318, i64 0, i32 0, i32 0
  %320 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %319, align 8
  store %"class.std::__1::__tree_node_base"* %320, %"class.std::__1::__tree_node_base"** %315, align 8
  %321 = icmp eq %"class.std::__1::__tree_node_base"* %320, null
  br i1 %321, label %325, label %322

322:                                              ; preds = %313
  %323 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %277, i64 0, i32 0
  %324 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %320, i64 0, i32 2
  store %"class.std::__1::__tree_end_node"* %323, %"class.std::__1::__tree_end_node"** %324, align 8
  br label %325

325:                                              ; preds = %322, %313
  %326 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %277, i64 0, i32 2
  %327 = bitcast %"class.std::__1::__tree_end_node"** %326 to i64*
  %328 = load i64, i64* %327, align 8
  %329 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %318, i64 0, i32 2
  %330 = bitcast %"class.std::__1::__tree_end_node"** %329 to i64*
  store i64 %328, i64* %330, align 8
  %331 = load %"class.std::__1::__tree_end_node"*, %"class.std::__1::__tree_end_node"** %326, align 8
  %332 = getelementptr inbounds %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_end_node"* %331, i64 0, i32 0
  %333 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %332, align 8
  %334 = icmp eq %"class.std::__1::__tree_node_base"* %333, %277
  %335 = getelementptr inbounds %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_end_node"* %331, i64 1, i32 0
  %336 = select i1 %334, %"class.std::__1::__tree_node_base"** %332, %"class.std::__1::__tree_node_base"** %335
  store %"class.std::__1::__tree_node_base"* %318, %"class.std::__1::__tree_node_base"** %336, align 8
  store %"class.std::__1::__tree_node_base"* %277, %"class.std::__1::__tree_node_base"** %319, align 8
  %337 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %318, i64 0, i32 0
  store %"class.std::__1::__tree_end_node"* %337, %"class.std::__1::__tree_end_node"** %326, align 8
  br label %338

338:                                              ; preds = %281, %306, %325
  %339 = phi %"class.std::__1::__tree_node_base"* [ %318, %325 ], [ %277, %306 ], [ %277, %281 ]
  %340 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %339, i64 0, i32 2
  %341 = bitcast %"class.std::__1::__tree_end_node"** %340 to %"class.std::__1::__tree_node_base"**
  %342 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %341, align 8
  %343 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %342, i64 0, i32 3
  %344 = load i8, i8* %343, align 8, !range !17
  %345 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %339, i64 0, i32 3
  store i8 %344, i8* %345, align 8
  store i8 1, i8* %343, align 8
  %346 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %339, i64 0, i32 0, i32 0
  %347 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %346, align 8
  %348 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %347, i64 0, i32 3
  store i8 1, i8* %348, align 8
  %349 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %341, align 8
  %350 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %349, i64 0, i32 0, i32 0
  %351 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %350, align 8
  %352 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %351, i64 0, i32 1
  %353 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %352, align 8
  store %"class.std::__1::__tree_node_base"* %353, %"class.std::__1::__tree_node_base"** %350, align 8
  %354 = icmp eq %"class.std::__1::__tree_node_base"* %353, null
  br i1 %354, label %358, label %355

355:                                              ; preds = %338
  %356 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %349, i64 0, i32 0
  %357 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %353, i64 0, i32 2
  store %"class.std::__1::__tree_end_node"* %356, %"class.std::__1::__tree_end_node"** %357, align 8
  br label %358

358:                                              ; preds = %355, %338
  %359 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %349, i64 0, i32 2
  %360 = bitcast %"class.std::__1::__tree_end_node"** %359 to i64*
  %361 = load i64, i64* %360, align 8
  %362 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %351, i64 0, i32 2
  %363 = bitcast %"class.std::__1::__tree_end_node"** %362 to i64*
  store i64 %361, i64* %363, align 8
  %364 = load %"class.std::__1::__tree_end_node"*, %"class.std::__1::__tree_end_node"** %359, align 8
  %365 = getelementptr inbounds %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_end_node"* %364, i64 0, i32 0
  %366 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %365, align 8
  %367 = icmp eq %"class.std::__1::__tree_node_base"* %366, %349
  %368 = getelementptr inbounds %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_end_node"* %364, i64 1, i32 0
  %369 = select i1 %367, %"class.std::__1::__tree_node_base"** %365, %"class.std::__1::__tree_node_base"** %368
  store %"class.std::__1::__tree_node_base"* %351, %"class.std::__1::__tree_node_base"** %369, align 8
  store %"class.std::__1::__tree_node_base"* %349, %"class.std::__1::__tree_node_base"** %352, align 8
  %370 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %351, i64 0, i32 0
  store %"class.std::__1::__tree_end_node"* %370, %"class.std::__1::__tree_end_node"** %359, align 8
  br label %382

371:                                              ; preds = %293, %165
  %372 = phi %"class.std::__1::__tree_node_base"* [ %163, %165 ], [ %297, %293 ]
  %373 = phi %"class.std::__1::__tree_node_base"* [ %142, %165 ], [ %276, %293 ]
  %374 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %372, i64 0, i32 2
  %375 = load %"class.std::__1::__tree_end_node"*, %"class.std::__1::__tree_end_node"** %374, align 8
  %376 = getelementptr inbounds %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_end_node"* %375, i64 0, i32 0
  %377 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %376, align 8
  %378 = icmp eq %"class.std::__1::__tree_node_base"* %377, %372
  %379 = getelementptr inbounds %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_end_node"* %375, i64 1, i32 0
  %380 = select i1 %378, %"class.std::__1::__tree_node_base"** %379, %"class.std::__1::__tree_node_base"** %376
  %381 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %380, align 8
  br label %97

382:                                              ; preds = %95, %358, %303, %229, %169, %90
  ret void
}

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind }
attributes #3 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { noreturn nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { cold noreturn nounwind }
attributes #6 = { nobuiltin nofree "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { norecurse nounwind readnone ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #9 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #10 = { noreturn nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #11 = { inlinehint nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #12 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #13 = { nounwind readnone speculatable }
attributes #14 = { nounwind }
attributes #15 = { builtin nounwind }
attributes #16 = { noreturn nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{!3}
!3 = distinct !{!3, !4, !"_ZNSt3__16__treeIPN3net33MultiThreadedProxyResolverFactory3JobENS_4lessIS4_EENS_9allocatorIS4_EEE16__construct_nodeIJS4_EEENS_10unique_ptrINS_11__tree_nodeIS4_PvEENS_22__tree_node_destructorINS7_ISE_EEEEEEDpOT_: argument 0"}
!4 = distinct !{!4, !"_ZNSt3__16__treeIPN3net33MultiThreadedProxyResolverFactory3JobENS_4lessIS4_EENS_9allocatorIS4_EEE16__construct_nodeIJS4_EEENS_10unique_ptrINS_11__tree_nodeIS4_PvEENS_22__tree_node_destructorINS7_ISE_EEEEEEDpOT_"}
!5 = !{!6, !8}
!6 = distinct !{!6, !7, !"_ZN4base8internal8BindImplINS_12OnceCallbackEMN3net12_GLOBAL__N_13JobEFv13scoped_refptrINS_22SingleThreadTaskRunnerEEEJRPS5_RKS8_EEEDcOT0_DpOT1_: argument 0"}
!7 = distinct !{!7, !"_ZN4base8internal8BindImplINS_12OnceCallbackEMN3net12_GLOBAL__N_13JobEFv13scoped_refptrINS_22SingleThreadTaskRunnerEEEJRPS5_RKS8_EEEDcOT0_DpOT1_"}
!8 = distinct !{!8, !9, !"_ZN4base8BindOnceIMN3net12_GLOBAL__N_13JobEFv13scoped_refptrINS_22SingleThreadTaskRunnerEEEJRPS3_RKS6_EEENS_12OnceCallbackINS_8internal14BindTypeHelperIT_JDpT0_EE14UnboundRunTypeEEEOSG_DpOSH_: argument 0"}
!9 = distinct !{!9, !"_ZN4base8BindOnceIMN3net12_GLOBAL__N_13JobEFv13scoped_refptrINS_22SingleThreadTaskRunnerEEEJRPS3_RKS6_EEENS_12OnceCallbackINS_8internal14BindTypeHelperIT_JDpT0_EE14UnboundRunTypeEEEOSG_DpOSH_"}
!10 = distinct !{!10, !11}
!11 = !{!"llvm.loop.unroll.disable"}
!12 = !{!13, !15}
!13 = distinct !{!13, !14, !"_ZN4base8internal8BindImplINS_12OnceCallbackEMN3net12_GLOBAL__N_117CreateResolverJobEFviEJPS5_RiEEEDcOT0_DpOT1_: argument 0"}
!14 = distinct !{!14, !"_ZN4base8internal8BindImplINS_12OnceCallbackEMN3net12_GLOBAL__N_117CreateResolverJobEFviEJPS5_RiEEEDcOT0_DpOT1_"}
!15 = distinct !{!15, !16, !"_ZN4base8BindOnceIMN3net12_GLOBAL__N_117CreateResolverJobEFviEJPS3_RiEEENS_12OnceCallbackINS_8internal14BindTypeHelperIT_JDpT0_EE14UnboundRunTypeEEEOSB_DpOSC_: argument 0"}
!16 = distinct !{!16, !"_ZN4base8BindOnceIMN3net12_GLOBAL__N_117CreateResolverJobEFviEJPS3_RiEEENS_12OnceCallbackINS_8internal14BindTypeHelperIT_JDpT0_EE14UnboundRunTypeEEEOSB_DpOSC_"}
!17 = !{i8 0, i8 2}
!18 = distinct !{!18, !11}
!19 = !{!20, !22}
!20 = distinct !{!20, !21, !"_ZN4base8internal8BindImplINS_12OnceCallbackEMN3net12_GLOBAL__N_126MultiThreadedProxyResolver17GetProxyForURLJobEFviEJPS6_RiEEEDcOT0_DpOT1_: argument 0"}
!21 = distinct !{!21, !"_ZN4base8internal8BindImplINS_12OnceCallbackEMN3net12_GLOBAL__N_126MultiThreadedProxyResolver17GetProxyForURLJobEFviEJPS6_RiEEEDcOT0_DpOT1_"}
!22 = distinct !{!22, !23, !"_ZN4base8BindOnceIMN3net12_GLOBAL__N_126MultiThreadedProxyResolver17GetProxyForURLJobEFviEJPS4_RiEEENS_12OnceCallbackINS_8internal14BindTypeHelperIT_JDpT0_EE14UnboundRunTypeEEEOSC_DpOSD_: argument 0"}
!23 = distinct !{!23, !"_ZN4base8BindOnceIMN3net12_GLOBAL__N_126MultiThreadedProxyResolver17GetProxyForURLJobEFviEJPS4_RiEEENS_12OnceCallbackINS_8internal14BindTypeHelperIT_JDpT0_EE14UnboundRunTypeEEEOSC_DpOSD_"}
!24 = !{!"branch_weights", i32 1, i32 2000}
!25 = distinct !{!25, !11}
!26 = distinct !{!26, !11}
!27 = distinct !{!27, !11}
