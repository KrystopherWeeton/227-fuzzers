; ModuleID = '../../third_party/libyuv/source/compare_common.cc'
source_filename = "../../third_party/libyuv/source/compare_common.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden i32 @HammingDistance_C(i8* nocapture readonly, i8* nocapture readonly, i32) local_unnamed_addr #0 {
  %4 = add nsw i32 %2, -3
  %5 = icmp sgt i32 %4, 0
  br i1 %5, label %6, label %89

6:                                                ; preds = %3
  %7 = add i32 %2, -4
  %8 = and i32 %7, -4
  %9 = zext i32 %8 to i64
  %10 = add nuw nsw i64 %9, 4
  %11 = getelementptr i8, i8* %0, i64 %10
  %12 = lshr i32 %7, 2
  %13 = add nuw nsw i32 %12, 1
  %14 = zext i32 %13 to i64
  %15 = icmp ult i32 %13, 8
  br i1 %15, label %16, label %21

16:                                               ; preds = %77, %6
  %17 = phi i8* [ %0, %6 ], [ %24, %77 ]
  %18 = phi i8* [ %1, %6 ], [ %26, %77 ]
  %19 = phi i32 [ 0, %6 ], [ %83, %77 ]
  %20 = phi i32 [ 0, %6 ], [ %28, %77 ]
  br label %165

21:                                               ; preds = %6
  %22 = and i64 %14, 2147483640
  %23 = shl nuw nsw i64 %22, 2
  %24 = getelementptr i8, i8* %0, i64 %23
  %25 = shl nuw nsw i64 %22, 2
  %26 = getelementptr i8, i8* %1, i64 %25
  %27 = trunc i64 %22 to i32
  %28 = shl i32 %27, 2
  br label %29

29:                                               ; preds = %29, %21
  %30 = phi i64 [ 0, %21 ], [ %75, %29 ]
  %31 = phi <4 x i32> [ zeroinitializer, %21 ], [ %73, %29 ]
  %32 = phi <4 x i32> [ zeroinitializer, %21 ], [ %74, %29 ]
  %33 = shl i64 %30, 2
  %34 = getelementptr i8, i8* %0, i64 %33
  %35 = shl i64 %30, 2
  %36 = getelementptr i8, i8* %1, i64 %35
  %37 = bitcast i8* %34 to <4 x i32>*
  %38 = load <4 x i32>, <4 x i32>* %37, align 4
  %39 = getelementptr i8, i8* %34, i64 16
  %40 = bitcast i8* %39 to <4 x i32>*
  %41 = load <4 x i32>, <4 x i32>* %40, align 4
  %42 = bitcast i8* %36 to <4 x i32>*
  %43 = load <4 x i32>, <4 x i32>* %42, align 4
  %44 = getelementptr i8, i8* %36, i64 16
  %45 = bitcast i8* %44 to <4 x i32>*
  %46 = load <4 x i32>, <4 x i32>* %45, align 4
  %47 = xor <4 x i32> %43, %38
  %48 = xor <4 x i32> %46, %41
  %49 = lshr <4 x i32> %47, <i32 1, i32 1, i32 1, i32 1>
  %50 = lshr <4 x i32> %48, <i32 1, i32 1, i32 1, i32 1>
  %51 = and <4 x i32> %49, <i32 1431655765, i32 1431655765, i32 1431655765, i32 1431655765>
  %52 = and <4 x i32> %50, <i32 1431655765, i32 1431655765, i32 1431655765, i32 1431655765>
  %53 = sub <4 x i32> %47, %51
  %54 = sub <4 x i32> %48, %52
  %55 = lshr <4 x i32> %53, <i32 2, i32 2, i32 2, i32 2>
  %56 = lshr <4 x i32> %54, <i32 2, i32 2, i32 2, i32 2>
  %57 = and <4 x i32> %55, <i32 858993459, i32 858993459, i32 858993459, i32 858993459>
  %58 = and <4 x i32> %56, <i32 858993459, i32 858993459, i32 858993459, i32 858993459>
  %59 = and <4 x i32> %53, <i32 858993459, i32 858993459, i32 858993459, i32 858993459>
  %60 = and <4 x i32> %54, <i32 858993459, i32 858993459, i32 858993459, i32 858993459>
  %61 = add nuw nsw <4 x i32> %57, %59
  %62 = add nuw nsw <4 x i32> %58, %60
  %63 = lshr <4 x i32> %61, <i32 4, i32 4, i32 4, i32 4>
  %64 = lshr <4 x i32> %62, <i32 4, i32 4, i32 4, i32 4>
  %65 = add nuw nsw <4 x i32> %63, %61
  %66 = add nuw nsw <4 x i32> %64, %62
  %67 = and <4 x i32> %65, <i32 252645135, i32 252645135, i32 252645135, i32 252645135>
  %68 = and <4 x i32> %66, <i32 252645135, i32 252645135, i32 252645135, i32 252645135>
  %69 = mul <4 x i32> %67, <i32 16843009, i32 16843009, i32 16843009, i32 16843009>
  %70 = mul <4 x i32> %68, <i32 16843009, i32 16843009, i32 16843009, i32 16843009>
  %71 = lshr <4 x i32> %69, <i32 24, i32 24, i32 24, i32 24>
  %72 = lshr <4 x i32> %70, <i32 24, i32 24, i32 24, i32 24>
  %73 = add <4 x i32> %71, %31
  %74 = add <4 x i32> %72, %32
  %75 = add i64 %30, 8
  %76 = icmp eq i64 %75, %22
  br i1 %76, label %77, label %29, !llvm.loop !2

77:                                               ; preds = %29
  %78 = add <4 x i32> %74, %73
  %79 = shufflevector <4 x i32> %78, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %80 = add <4 x i32> %78, %79
  %81 = shufflevector <4 x i32> %80, <4 x i32> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %82 = add <4 x i32> %80, %81
  %83 = extractelement <4 x i32> %82, i32 0
  %84 = icmp eq i64 %22, %14
  br i1 %84, label %85, label %16

85:                                               ; preds = %165, %77
  %86 = phi i32 [ %83, %77 ], [ %187, %165 ]
  %87 = getelementptr i8, i8* %1, i64 %10
  %88 = and i32 %2, -4
  br label %89

89:                                               ; preds = %85, %3
  %90 = phi i32 [ 0, %3 ], [ %88, %85 ]
  %91 = phi i32 [ 0, %3 ], [ %86, %85 ]
  %92 = phi i8* [ %1, %3 ], [ %87, %85 ]
  %93 = phi i8* [ %0, %3 ], [ %11, %85 ]
  %94 = icmp slt i32 %90, %2
  br i1 %94, label %95, label %216

95:                                               ; preds = %89
  %96 = xor i32 %90, -1
  %97 = add i32 %96, %2
  %98 = zext i32 %97 to i64
  %99 = add nuw nsw i64 %98, 1
  %100 = icmp ult i64 %99, 8
  br i1 %100, label %101, label %106

101:                                              ; preds = %157, %95
  %102 = phi i8* [ %93, %95 ], [ %108, %157 ]
  %103 = phi i8* [ %92, %95 ], [ %109, %157 ]
  %104 = phi i32 [ %91, %95 ], [ %163, %157 ]
  %105 = phi i32 [ %90, %95 ], [ %111, %157 ]
  br label %192

106:                                              ; preds = %95
  %107 = and i64 %99, 8589934584
  %108 = getelementptr i8, i8* %93, i64 %107
  %109 = getelementptr i8, i8* %92, i64 %107
  %110 = trunc i64 %107 to i32
  %111 = add i32 %90, %110
  %112 = insertelement <4 x i32> <i32 undef, i32 0, i32 0, i32 0>, i32 %91, i32 0
  br label %113

113:                                              ; preds = %113, %106
  %114 = phi i64 [ 0, %106 ], [ %155, %113 ]
  %115 = phi <4 x i32> [ %112, %106 ], [ %153, %113 ]
  %116 = phi <4 x i32> [ zeroinitializer, %106 ], [ %154, %113 ]
  %117 = getelementptr i8, i8* %93, i64 %114
  %118 = getelementptr i8, i8* %92, i64 %114
  %119 = bitcast i8* %117 to <4 x i8>*
  %120 = load <4 x i8>, <4 x i8>* %119, align 1
  %121 = getelementptr i8, i8* %117, i64 4
  %122 = bitcast i8* %121 to <4 x i8>*
  %123 = load <4 x i8>, <4 x i8>* %122, align 1
  %124 = bitcast i8* %118 to <4 x i8>*
  %125 = load <4 x i8>, <4 x i8>* %124, align 1
  %126 = getelementptr i8, i8* %118, i64 4
  %127 = bitcast i8* %126 to <4 x i8>*
  %128 = load <4 x i8>, <4 x i8>* %127, align 1
  %129 = xor <4 x i8> %125, %120
  %130 = xor <4 x i8> %128, %123
  %131 = zext <4 x i8> %129 to <4 x i32>
  %132 = zext <4 x i8> %130 to <4 x i32>
  %133 = lshr <4 x i32> %131, <i32 1, i32 1, i32 1, i32 1>
  %134 = lshr <4 x i32> %132, <i32 1, i32 1, i32 1, i32 1>
  %135 = and <4 x i32> %133, <i32 85, i32 85, i32 85, i32 85>
  %136 = and <4 x i32> %134, <i32 85, i32 85, i32 85, i32 85>
  %137 = sub nsw <4 x i32> %131, %135
  %138 = sub nsw <4 x i32> %132, %136
  %139 = lshr <4 x i32> %137, <i32 2, i32 2, i32 2, i32 2>
  %140 = lshr <4 x i32> %138, <i32 2, i32 2, i32 2, i32 2>
  %141 = and <4 x i32> %139, <i32 51, i32 51, i32 51, i32 51>
  %142 = and <4 x i32> %140, <i32 51, i32 51, i32 51, i32 51>
  %143 = and <4 x i32> %137, <i32 51, i32 51, i32 51, i32 51>
  %144 = and <4 x i32> %138, <i32 51, i32 51, i32 51, i32 51>
  %145 = add nuw nsw <4 x i32> %141, %143
  %146 = add nuw nsw <4 x i32> %142, %144
  %147 = lshr <4 x i32> %145, <i32 4, i32 4, i32 4, i32 4>
  %148 = lshr <4 x i32> %146, <i32 4, i32 4, i32 4, i32 4>
  %149 = add nuw nsw <4 x i32> %147, %145
  %150 = add nuw nsw <4 x i32> %148, %146
  %151 = and <4 x i32> %149, <i32 15, i32 15, i32 15, i32 15>
  %152 = and <4 x i32> %150, <i32 15, i32 15, i32 15, i32 15>
  %153 = add <4 x i32> %151, %115
  %154 = add <4 x i32> %152, %116
  %155 = add i64 %114, 8
  %156 = icmp eq i64 %155, %107
  br i1 %156, label %157, label %113, !llvm.loop !4

157:                                              ; preds = %113
  %158 = add <4 x i32> %154, %153
  %159 = shufflevector <4 x i32> %158, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %160 = add <4 x i32> %158, %159
  %161 = shufflevector <4 x i32> %160, <4 x i32> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %162 = add <4 x i32> %160, %161
  %163 = extractelement <4 x i32> %162, i32 0
  %164 = icmp eq i64 %99, %107
  br i1 %164, label %216, label %101

165:                                              ; preds = %16, %165
  %166 = phi i8* [ %188, %165 ], [ %17, %16 ]
  %167 = phi i8* [ %189, %165 ], [ %18, %16 ]
  %168 = phi i32 [ %187, %165 ], [ %19, %16 ]
  %169 = phi i32 [ %190, %165 ], [ %20, %16 ]
  %170 = bitcast i8* %166 to i32*
  %171 = load i32, i32* %170, align 4
  %172 = bitcast i8* %167 to i32*
  %173 = load i32, i32* %172, align 4
  %174 = xor i32 %173, %171
  %175 = lshr i32 %174, 1
  %176 = and i32 %175, 1431655765
  %177 = sub i32 %174, %176
  %178 = lshr i32 %177, 2
  %179 = and i32 %178, 858993459
  %180 = and i32 %177, 858993459
  %181 = add nuw nsw i32 %179, %180
  %182 = lshr i32 %181, 4
  %183 = add nuw nsw i32 %182, %181
  %184 = and i32 %183, 252645135
  %185 = mul i32 %184, 16843009
  %186 = lshr i32 %185, 24
  %187 = add i32 %186, %168
  %188 = getelementptr inbounds i8, i8* %166, i64 4
  %189 = getelementptr inbounds i8, i8* %167, i64 4
  %190 = add nuw nsw i32 %169, 4
  %191 = icmp slt i32 %190, %4
  br i1 %191, label %165, label %85, !llvm.loop !5

192:                                              ; preds = %101, %192
  %193 = phi i8* [ %212, %192 ], [ %102, %101 ]
  %194 = phi i8* [ %213, %192 ], [ %103, %101 ]
  %195 = phi i32 [ %211, %192 ], [ %104, %101 ]
  %196 = phi i32 [ %214, %192 ], [ %105, %101 ]
  %197 = load i8, i8* %193, align 1
  %198 = load i8, i8* %194, align 1
  %199 = xor i8 %198, %197
  %200 = zext i8 %199 to i32
  %201 = lshr i32 %200, 1
  %202 = and i32 %201, 85
  %203 = sub nsw i32 %200, %202
  %204 = lshr i32 %203, 2
  %205 = and i32 %204, 51
  %206 = and i32 %203, 51
  %207 = add nuw nsw i32 %205, %206
  %208 = lshr i32 %207, 4
  %209 = add nuw nsw i32 %208, %207
  %210 = and i32 %209, 15
  %211 = add i32 %210, %195
  %212 = getelementptr inbounds i8, i8* %193, i64 1
  %213 = getelementptr inbounds i8, i8* %194, i64 1
  %214 = add nuw nsw i32 %196, 1
  %215 = icmp eq i32 %214, %2
  br i1 %215, label %216, label %192, !llvm.loop !7

216:                                              ; preds = %192, %157, %89
  %217 = phi i32 [ %91, %89 ], [ %163, %157 ], [ %211, %192 ]
  ret i32 %217
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden i32 @SumSquareError_C(i8* nocapture readonly, i8* nocapture readonly, i32) local_unnamed_addr #0 {
  %4 = icmp sgt i32 %2, 0
  br i1 %4, label %5, label %63

5:                                                ; preds = %3
  %6 = zext i32 %2 to i64
  %7 = icmp ult i32 %2, 8
  br i1 %7, label %46, label %8

8:                                                ; preds = %5
  %9 = and i64 %6, 4294967288
  br label %10

10:                                               ; preds = %10, %8
  %11 = phi i64 [ 0, %8 ], [ %36, %10 ]
  %12 = phi <4 x i32> [ zeroinitializer, %8 ], [ %34, %10 ]
  %13 = phi <4 x i32> [ zeroinitializer, %8 ], [ %35, %10 ]
  %14 = getelementptr inbounds i8, i8* %0, i64 %11
  %15 = bitcast i8* %14 to <4 x i8>*
  %16 = load <4 x i8>, <4 x i8>* %15, align 1
  %17 = getelementptr inbounds i8, i8* %14, i64 4
  %18 = bitcast i8* %17 to <4 x i8>*
  %19 = load <4 x i8>, <4 x i8>* %18, align 1
  %20 = zext <4 x i8> %16 to <4 x i32>
  %21 = zext <4 x i8> %19 to <4 x i32>
  %22 = getelementptr inbounds i8, i8* %1, i64 %11
  %23 = bitcast i8* %22 to <4 x i8>*
  %24 = load <4 x i8>, <4 x i8>* %23, align 1
  %25 = getelementptr inbounds i8, i8* %22, i64 4
  %26 = bitcast i8* %25 to <4 x i8>*
  %27 = load <4 x i8>, <4 x i8>* %26, align 1
  %28 = zext <4 x i8> %24 to <4 x i32>
  %29 = zext <4 x i8> %27 to <4 x i32>
  %30 = sub nsw <4 x i32> %20, %28
  %31 = sub nsw <4 x i32> %21, %29
  %32 = mul nsw <4 x i32> %30, %30
  %33 = mul nsw <4 x i32> %31, %31
  %34 = add <4 x i32> %32, %12
  %35 = add <4 x i32> %33, %13
  %36 = add i64 %11, 8
  %37 = icmp eq i64 %36, %9
  br i1 %37, label %38, label %10, !llvm.loop !8

38:                                               ; preds = %10
  %39 = add <4 x i32> %35, %34
  %40 = shufflevector <4 x i32> %39, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %41 = add <4 x i32> %39, %40
  %42 = shufflevector <4 x i32> %41, <4 x i32> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %43 = add <4 x i32> %41, %42
  %44 = extractelement <4 x i32> %43, i32 0
  %45 = icmp eq i64 %9, %6
  br i1 %45, label %63, label %46

46:                                               ; preds = %38, %5
  %47 = phi i64 [ 0, %5 ], [ %9, %38 ]
  %48 = phi i32 [ 0, %5 ], [ %44, %38 ]
  br label %49

49:                                               ; preds = %46, %49
  %50 = phi i64 [ %61, %49 ], [ %47, %46 ]
  %51 = phi i32 [ %60, %49 ], [ %48, %46 ]
  %52 = getelementptr inbounds i8, i8* %0, i64 %50
  %53 = load i8, i8* %52, align 1
  %54 = zext i8 %53 to i32
  %55 = getelementptr inbounds i8, i8* %1, i64 %50
  %56 = load i8, i8* %55, align 1
  %57 = zext i8 %56 to i32
  %58 = sub nsw i32 %54, %57
  %59 = mul nsw i32 %58, %58
  %60 = add i32 %59, %51
  %61 = add nuw nsw i64 %50, 1
  %62 = icmp eq i64 %61, %6
  br i1 %62, label %63, label %49, !llvm.loop !9

63:                                               ; preds = %49, %38, %3
  %64 = phi i32 [ 0, %3 ], [ %44, %38 ], [ %60, %49 ]
  ret i32 %64
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden i32 @HashDjb2_C(i8* nocapture readonly, i32, i32) local_unnamed_addr #0 {
  %4 = icmp sgt i32 %1, 0
  br i1 %4, label %5, label %59

5:                                                ; preds = %3
  %6 = zext i32 %1 to i64
  %7 = add nsw i64 %6, -1
  %8 = and i64 %6, 3
  %9 = icmp ult i64 %7, 3
  br i1 %9, label %42, label %10

10:                                               ; preds = %5
  %11 = sub nsw i64 %6, %8
  br label %12

12:                                               ; preds = %12, %10
  %13 = phi i64 [ 0, %10 ], [ %39, %12 ]
  %14 = phi i32 [ %2, %10 ], [ %38, %12 ]
  %15 = phi i64 [ %11, %10 ], [ %40, %12 ]
  %16 = getelementptr inbounds i8, i8* %0, i64 %13
  %17 = load i8, i8* %16, align 1
  %18 = zext i8 %17 to i32
  %19 = mul i32 %14, 33
  %20 = add i32 %19, %18
  %21 = or i64 %13, 1
  %22 = getelementptr inbounds i8, i8* %0, i64 %21
  %23 = load i8, i8* %22, align 1
  %24 = zext i8 %23 to i32
  %25 = mul i32 %20, 33
  %26 = add i32 %25, %24
  %27 = or i64 %13, 2
  %28 = getelementptr inbounds i8, i8* %0, i64 %27
  %29 = load i8, i8* %28, align 1
  %30 = zext i8 %29 to i32
  %31 = mul i32 %26, 33
  %32 = add i32 %31, %30
  %33 = or i64 %13, 3
  %34 = getelementptr inbounds i8, i8* %0, i64 %33
  %35 = load i8, i8* %34, align 1
  %36 = zext i8 %35 to i32
  %37 = mul i32 %32, 33
  %38 = add i32 %37, %36
  %39 = add nuw nsw i64 %13, 4
  %40 = add i64 %15, -4
  %41 = icmp eq i64 %40, 0
  br i1 %41, label %42, label %12

42:                                               ; preds = %12, %5
  %43 = phi i32 [ undef, %5 ], [ %38, %12 ]
  %44 = phi i64 [ 0, %5 ], [ %39, %12 ]
  %45 = phi i32 [ %2, %5 ], [ %38, %12 ]
  %46 = icmp eq i64 %8, 0
  br i1 %46, label %59, label %47

47:                                               ; preds = %42, %47
  %48 = phi i64 [ %56, %47 ], [ %44, %42 ]
  %49 = phi i32 [ %55, %47 ], [ %45, %42 ]
  %50 = phi i64 [ %57, %47 ], [ %8, %42 ]
  %51 = getelementptr inbounds i8, i8* %0, i64 %48
  %52 = load i8, i8* %51, align 1
  %53 = zext i8 %52 to i32
  %54 = mul i32 %49, 33
  %55 = add i32 %54, %53
  %56 = add nuw nsw i64 %48, 1
  %57 = add i64 %50, -1
  %58 = icmp eq i64 %57, 0
  br i1 %58, label %59, label %47, !llvm.loop !10

59:                                               ; preds = %42, %47, %3
  %60 = phi i32 [ %2, %3 ], [ %43, %42 ], [ %55, %47 ]
  ret i32 %60
}

attributes #0 = { norecurse nounwind readonly ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = distinct !{!2, !3}
!3 = !{!"llvm.loop.isvectorized", i32 1}
!4 = distinct !{!4, !3}
!5 = distinct !{!5, !6, !3}
!6 = !{!"llvm.loop.unroll.runtime.disable"}
!7 = distinct !{!7, !6, !3}
!8 = distinct !{!8, !3}
!9 = distinct !{!9, !6, !3}
!10 = distinct !{!10, !11}
!11 = !{!"llvm.loop.unroll.disable"}
