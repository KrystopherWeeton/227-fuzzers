; ModuleID = '../../third_party/brotli/enc/compress_fragment_two_pass.c'
source_filename = "../../third_party/brotli/enc/compress_fragment_two_pass.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%struct.MemoryManager = type { i8* (i8*, i64)*, void (i8*, i8*)*, i8* }
%struct.HuffmanTree = type { i32, i16, i16 }

@kBrotliLog2Table = external hidden local_unnamed_addr constant [256 x double], align 16
@StoreCommands.kNumExtraBits = internal unnamed_addr constant [128 x i32] [i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1, i32 1, i32 2, i32 2, i32 3, i32 3, i32 4, i32 4, i32 5, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 12, i32 14, i32 24, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1, i32 1, i32 2, i32 2, i32 3, i32 3, i32 4, i32 4, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1, i32 1, i32 2, i32 2, i32 3, i32 3, i32 4, i32 4, i32 5, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 24, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1, i32 1, i32 2, i32 2, i32 3, i32 3, i32 4, i32 4, i32 5, i32 5, i32 6, i32 6, i32 7, i32 7, i32 8, i32 8, i32 9, i32 9, i32 10, i32 10, i32 11, i32 11, i32 12, i32 12, i32 13, i32 13, i32 14, i32 14, i32 15, i32 15, i32 16, i32 16, i32 17, i32 17, i32 18, i32 18, i32 19, i32 19, i32 20, i32 20, i32 21, i32 21, i32 22, i32 22, i32 23, i32 23, i32 24, i32 24], align 16
@StoreCommands.kInsertOffset = internal unnamed_addr constant [24 x i32] [i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 8, i32 10, i32 14, i32 18, i32 26, i32 34, i32 50, i32 66, i32 98, i32 130, i32 194, i32 322, i32 578, i32 1090, i32 2114, i32 6210, i32 22594], align 16

; Function Attrs: nounwind ssp uwtable
define hidden void @BrotliCompressFragmentTwoPass(%struct.MemoryManager*, i8*, i64, i32, i32*, i8*, i32* nocapture, i64, i64*, i8*) local_unnamed_addr #0 {
  %11 = load i64, i64* %8, align 8
  %12 = trunc i64 %7 to i32
  %13 = tail call i32 @llvm.ctlz.i32(i32 %12, i1 true) #6, !range !2
  %14 = xor i32 %13, 31
  switch i32 %14, label %25 [
    i32 8, label %15
    i32 9, label %16
    i32 10, label %17
    i32 11, label %18
    i32 12, label %19
    i32 13, label %20
    i32 14, label %21
    i32 15, label %22
    i32 16, label %23
    i32 17, label %24
  ]

15:                                               ; preds = %10
  tail call fastcc void @BrotliCompressFragmentTwoPassImpl8(%struct.MemoryManager* %0, i8* %1, i64 %2, i32* %4, i8* %5, i32* %6, i64* %8, i8* %9)
  br label %25

16:                                               ; preds = %10
  tail call fastcc void @BrotliCompressFragmentTwoPassImpl9(%struct.MemoryManager* %0, i8* %1, i64 %2, i32* %4, i8* %5, i32* %6, i64* %8, i8* %9)
  br label %25

17:                                               ; preds = %10
  tail call fastcc void @BrotliCompressFragmentTwoPassImpl10(%struct.MemoryManager* %0, i8* %1, i64 %2, i32* %4, i8* %5, i32* %6, i64* %8, i8* %9)
  br label %25

18:                                               ; preds = %10
  tail call fastcc void @BrotliCompressFragmentTwoPassImpl11(%struct.MemoryManager* %0, i8* %1, i64 %2, i32* %4, i8* %5, i32* %6, i64* %8, i8* %9)
  br label %25

19:                                               ; preds = %10
  tail call fastcc void @BrotliCompressFragmentTwoPassImpl12(%struct.MemoryManager* %0, i8* %1, i64 %2, i32* %4, i8* %5, i32* %6, i64* %8, i8* %9)
  br label %25

20:                                               ; preds = %10
  tail call fastcc void @BrotliCompressFragmentTwoPassImpl13(%struct.MemoryManager* %0, i8* %1, i64 %2, i32* %4, i8* %5, i32* %6, i64* %8, i8* %9)
  br label %25

21:                                               ; preds = %10
  tail call fastcc void @BrotliCompressFragmentTwoPassImpl14(%struct.MemoryManager* %0, i8* %1, i64 %2, i32* %4, i8* %5, i32* %6, i64* %8, i8* %9)
  br label %25

22:                                               ; preds = %10
  tail call fastcc void @BrotliCompressFragmentTwoPassImpl15(%struct.MemoryManager* %0, i8* %1, i64 %2, i32* %4, i8* %5, i32* %6, i64* %8, i8* %9)
  br label %25

23:                                               ; preds = %10
  tail call fastcc void @BrotliCompressFragmentTwoPassImpl16(%struct.MemoryManager* %0, i8* %1, i64 %2, i32* %4, i8* %5, i32* %6, i64* %8, i8* %9)
  br label %25

24:                                               ; preds = %10
  tail call fastcc void @BrotliCompressFragmentTwoPassImpl17(%struct.MemoryManager* %0, i8* %1, i64 %2, i32* %4, i8* %5, i32* %6, i64* %8, i8* %9)
  br label %25

25:                                               ; preds = %10, %24, %23, %22, %21, %20, %19, %18, %17, %16, %15
  %26 = load i64, i64* %8, align 8
  %27 = sub i64 %26, %11
  %28 = shl i64 %2, 3
  %29 = add i64 %28, 31
  %30 = icmp ugt i64 %27, %29
  br i1 %30, label %31, label %87

31:                                               ; preds = %25
  %32 = trunc i64 %11 to i32
  %33 = and i32 %32, 7
  %34 = shl nsw i32 -1, %33
  %35 = lshr i64 %11, 3
  %36 = getelementptr inbounds i8, i8* %9, i64 %35
  %37 = load i8, i8* %36, align 1
  %38 = trunc i32 %34 to i8
  %39 = and i8 %38, 127
  %40 = xor i8 %39, 127
  %41 = and i8 %37, %40
  store i8 %41, i8* %36, align 1
  store i64 %11, i64* %8, align 8
  %42 = load i8, i8* %36, align 1, !alias.scope !3, !noalias !6
  %43 = zext i8 %42 to i64
  %44 = bitcast i8* %36 to i64*
  store i64 %43, i64* %44, align 8, !alias.scope !3, !noalias !6
  %45 = add i64 %11, 1
  %46 = icmp ult i64 %2, 65537
  %47 = icmp ult i64 %2, 1048577
  %48 = select i1 %47, i64 5, i64 6
  %49 = select i1 %46, i64 4, i64 %48
  %50 = add nsw i64 %49, -4
  %51 = lshr i64 %45, 3
  %52 = getelementptr inbounds i8, i8* %9, i64 %51
  %53 = load i8, i8* %52, align 1, !alias.scope !8, !noalias !11
  %54 = zext i8 %53 to i64
  %55 = and i64 %45, 7
  %56 = shl i64 %50, %55
  %57 = or i64 %56, %54
  %58 = bitcast i8* %52 to i64*
  store i64 %57, i64* %58, align 8, !alias.scope !8, !noalias !11
  %59 = add i64 %11, 3
  %60 = shl nuw nsw i64 %49, 2
  %61 = add i64 %2, -1
  %62 = lshr i64 %59, 3
  %63 = getelementptr inbounds i8, i8* %9, i64 %62
  %64 = load i8, i8* %63, align 1, !alias.scope !13, !noalias !16
  %65 = zext i8 %64 to i64
  %66 = and i64 %59, 7
  %67 = shl i64 %61, %66
  %68 = or i64 %67, %65
  %69 = bitcast i8* %63 to i64*
  store i64 %68, i64* %69, align 8, !alias.scope !13, !noalias !16
  %70 = add i64 %59, %60
  %71 = lshr i64 %70, 3
  %72 = getelementptr inbounds i8, i8* %9, i64 %71
  %73 = load i8, i8* %72, align 1, !alias.scope !18, !noalias !21
  %74 = zext i8 %73 to i64
  %75 = and i64 %70, 7
  %76 = shl i64 1, %75
  %77 = or i64 %76, %74
  %78 = bitcast i8* %72 to i64*
  store i64 %77, i64* %78, align 8, !alias.scope !18, !noalias !21
  %79 = add i64 %70, 8
  %80 = and i64 %79, 4294967288
  store i64 %80, i64* %8, align 8
  %81 = lshr exact i64 %80, 3
  %82 = getelementptr inbounds i8, i8* %9, i64 %81
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %82, i8* align 1 %1, i64 %2, i1 false) #6
  %83 = load i64, i64* %8, align 8
  %84 = add i64 %83, %28
  store i64 %84, i64* %8, align 8
  %85 = lshr i64 %84, 3
  %86 = getelementptr inbounds i8, i8* %9, i64 %85
  store i8 0, i8* %86, align 1
  br label %87

87:                                               ; preds = %31, %25
  %88 = icmp eq i32 %3, 0
  br i1 %88, label %110, label %89

89:                                               ; preds = %87
  %90 = load i64, i64* %8, align 8, !alias.scope !23, !noalias !26
  %91 = lshr i64 %90, 3
  %92 = getelementptr inbounds i8, i8* %9, i64 %91
  %93 = load i8, i8* %92, align 1, !alias.scope !26, !noalias !23
  %94 = zext i8 %93 to i64
  %95 = and i64 %90, 7
  %96 = shl i64 1, %95
  %97 = or i64 %96, %94
  %98 = bitcast i8* %92 to i64*
  store i64 %97, i64* %98, align 8, !alias.scope !26, !noalias !23
  %99 = add i64 %90, 1
  store i64 %99, i64* %8, align 8, !alias.scope !23, !noalias !26
  %100 = lshr i64 %99, 3
  %101 = getelementptr inbounds i8, i8* %9, i64 %100
  %102 = load i8, i8* %101, align 1, !alias.scope !28, !noalias !31
  %103 = zext i8 %102 to i64
  %104 = and i64 %99, 7
  %105 = shl i64 1, %104
  %106 = or i64 %105, %103
  %107 = bitcast i8* %101 to i64*
  store i64 %106, i64* %107, align 8, !alias.scope !28, !noalias !31
  %108 = add i64 %90, 9
  %109 = and i64 %108, 4294967288
  store i64 %109, i64* %8, align 8
  br label %110

110:                                              ; preds = %87, %89
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: noinline nounwind ssp uwtable
define internal fastcc void @BrotliCompressFragmentTwoPassImpl8(%struct.MemoryManager*, i8*, i64, i32*, i8*, i32* nocapture, i64*, i8*) unnamed_addr #2 {
  %9 = alloca [129 x %struct.HuffmanTree], align 16
  %10 = alloca [704 x i8], align 16
  %11 = alloca [64 x i16], align 16
  %12 = alloca [256 x i8], align 16
  %13 = alloca [256 x i16], align 16
  %14 = alloca [256 x i32], align 16
  %15 = alloca [128 x i8], align 16
  %16 = alloca [128 x i16], align 16
  %17 = alloca [128 x i32], align 16
  %18 = icmp eq i64 %2, 0
  br i1 %18, label %1106, label %19

19:                                               ; preds = %8
  %20 = ptrtoint i32* %3 to i64
  %21 = ptrtoint i8* %4 to i64
  %22 = ptrtoint i8* %1 to i64
  %23 = bitcast [256 x i32]* %14 to i8*
  %24 = getelementptr inbounds [256 x i8], [256 x i8]* %12, i64 0, i64 0
  %25 = bitcast [256 x i16]* %13 to i8*
  %26 = getelementptr inbounds [128 x i8], [128 x i8]* %15, i64 0, i64 0
  %27 = bitcast [128 x i16]* %16 to i8*
  %28 = bitcast [128 x i32]* %17 to i8*
  %29 = getelementptr inbounds [256 x i32], [256 x i32]* %14, i64 0, i64 0
  %30 = getelementptr inbounds [256 x i16], [256 x i16]* %13, i64 0, i64 0
  %31 = getelementptr inbounds [128 x i32], [128 x i32]* %17, i64 0, i64 1
  %32 = getelementptr inbounds [128 x i32], [128 x i32]* %17, i64 0, i64 2
  %33 = getelementptr inbounds [128 x i32], [128 x i32]* %17, i64 0, i64 64
  %34 = getelementptr inbounds [128 x i32], [128 x i32]* %17, i64 0, i64 84
  %35 = getelementptr inbounds [128 x i32], [128 x i32]* %17, i64 0, i64 0
  %36 = bitcast [129 x %struct.HuffmanTree]* %9 to i8*
  %37 = getelementptr inbounds [704 x i8], [704 x i8]* %10, i64 0, i64 0
  %38 = bitcast [64 x i16]* %11 to i8*
  %39 = getelementptr inbounds [129 x %struct.HuffmanTree], [129 x %struct.HuffmanTree]* %9, i64 0, i64 0
  %40 = getelementptr inbounds [128 x i8], [128 x i8]* %15, i64 0, i64 64
  %41 = getelementptr inbounds [128 x i8], [128 x i8]* %15, i64 0, i64 24
  %42 = getelementptr inbounds [704 x i8], [704 x i8]* %10, i64 0, i64 24
  %43 = bitcast [128 x i8]* %15 to i64*
  %44 = bitcast i8* %42 to i64*
  %45 = getelementptr inbounds [704 x i8], [704 x i8]* %10, i64 0, i64 32
  %46 = getelementptr inbounds [128 x i8], [128 x i8]* %15, i64 0, i64 48
  %47 = bitcast i8* %46 to i64*
  %48 = bitcast i8* %45 to i64*
  %49 = getelementptr inbounds [704 x i8], [704 x i8]* %10, i64 0, i64 40
  %50 = getelementptr inbounds [128 x i8], [128 x i8]* %15, i64 0, i64 8
  %51 = bitcast i8* %50 to i64*
  %52 = bitcast i8* %49 to i64*
  %53 = getelementptr inbounds [704 x i8], [704 x i8]* %10, i64 0, i64 48
  %54 = getelementptr inbounds [128 x i8], [128 x i8]* %15, i64 0, i64 56
  %55 = bitcast i8* %54 to i64*
  %56 = bitcast i8* %53 to i64*
  %57 = getelementptr inbounds [704 x i8], [704 x i8]* %10, i64 0, i64 56
  %58 = getelementptr inbounds [128 x i8], [128 x i8]* %15, i64 0, i64 16
  %59 = bitcast i8* %58 to i64*
  %60 = bitcast i8* %57 to i64*
  %61 = getelementptr inbounds [64 x i16], [64 x i16]* %11, i64 0, i64 0
  %62 = getelementptr inbounds [64 x i16], [64 x i16]* %11, i64 0, i64 24
  %63 = bitcast i16* %62 to i8*
  %64 = getelementptr inbounds [128 x i16], [128 x i16]* %16, i64 0, i64 8
  %65 = bitcast i16* %64 to i8*
  %66 = getelementptr inbounds [64 x i16], [64 x i16]* %11, i64 0, i64 40
  %67 = bitcast i16* %66 to i8*
  %68 = getelementptr inbounds [128 x i16], [128 x i16]* %16, i64 0, i64 16
  %69 = bitcast i16* %68 to i8*
  %70 = getelementptr inbounds [64 x i16], [64 x i16]* %11, i64 0, i64 56
  %71 = bitcast i16* %70 to i8*
  %72 = getelementptr inbounds [128 x i16], [128 x i16]* %16, i64 0, i64 24
  %73 = bitcast i16* %72 to i8*
  %74 = getelementptr inbounds [128 x i16], [128 x i16]* %16, i64 0, i64 48
  %75 = bitcast i16* %74 to i8*
  %76 = getelementptr inbounds [64 x i16], [64 x i16]* %11, i64 0, i64 32
  %77 = bitcast i16* %76 to i8*
  %78 = getelementptr inbounds [128 x i16], [128 x i16]* %16, i64 0, i64 56
  %79 = bitcast i16* %78 to i8*
  %80 = getelementptr inbounds [64 x i16], [64 x i16]* %11, i64 0, i64 48
  %81 = bitcast i16* %80 to i8*
  %82 = getelementptr inbounds [128 x i16], [128 x i16]* %16, i64 0, i64 64
  %83 = bitcast i8* %41 to i64*
  %84 = bitcast [704 x i8]* %10 to i64*
  %85 = getelementptr inbounds [704 x i8], [704 x i8]* %10, i64 0, i64 64
  %86 = getelementptr inbounds [128 x i8], [128 x i8]* %15, i64 0, i64 32
  %87 = bitcast i8* %86 to i64*
  %88 = bitcast i8* %85 to i64*
  %89 = getelementptr inbounds [704 x i8], [704 x i8]* %10, i64 0, i64 128
  %90 = getelementptr inbounds [128 x i8], [128 x i8]* %15, i64 0, i64 40
  %91 = bitcast i8* %90 to i64*
  %92 = bitcast i8* %89 to i64*
  %93 = getelementptr inbounds [704 x i8], [704 x i8]* %10, i64 0, i64 192
  %94 = bitcast i8* %93 to i64*
  %95 = getelementptr inbounds [704 x i8], [704 x i8]* %10, i64 0, i64 384
  %96 = bitcast i8* %95 to i64*
  %97 = getelementptr inbounds [704 x i8], [704 x i8]* %10, i64 0, i64 256
  %98 = getelementptr inbounds [704 x i8], [704 x i8]* %10, i64 0, i64 448
  %99 = getelementptr inbounds [128 x i8], [128 x i8]* %15, i64 0, i64 1
  %100 = getelementptr inbounds [704 x i8], [704 x i8]* %10, i64 0, i64 136
  %101 = getelementptr inbounds [128 x i8], [128 x i8]* %15, i64 0, i64 9
  %102 = getelementptr inbounds [704 x i8], [704 x i8]* %10, i64 0, i64 264
  %103 = getelementptr inbounds [128 x i8], [128 x i8]* %15, i64 0, i64 17
  %104 = getelementptr inbounds [704 x i8], [704 x i8]* %10, i64 0, i64 456
  %105 = getelementptr inbounds [128 x i8], [128 x i8]* %15, i64 0, i64 2
  %106 = getelementptr inbounds [704 x i8], [704 x i8]* %10, i64 0, i64 144
  %107 = getelementptr inbounds [128 x i8], [128 x i8]* %15, i64 0, i64 10
  %108 = getelementptr inbounds [704 x i8], [704 x i8]* %10, i64 0, i64 272
  %109 = getelementptr inbounds [128 x i8], [128 x i8]* %15, i64 0, i64 18
  %110 = getelementptr inbounds [704 x i8], [704 x i8]* %10, i64 0, i64 464
  %111 = getelementptr inbounds [128 x i8], [128 x i8]* %15, i64 0, i64 3
  %112 = getelementptr inbounds [704 x i8], [704 x i8]* %10, i64 0, i64 152
  %113 = getelementptr inbounds [128 x i8], [128 x i8]* %15, i64 0, i64 11
  %114 = getelementptr inbounds [704 x i8], [704 x i8]* %10, i64 0, i64 280
  %115 = getelementptr inbounds [128 x i8], [128 x i8]* %15, i64 0, i64 19
  %116 = getelementptr inbounds [704 x i8], [704 x i8]* %10, i64 0, i64 472
  %117 = getelementptr inbounds [128 x i8], [128 x i8]* %15, i64 0, i64 4
  %118 = getelementptr inbounds [704 x i8], [704 x i8]* %10, i64 0, i64 160
  %119 = getelementptr inbounds [128 x i8], [128 x i8]* %15, i64 0, i64 12
  %120 = getelementptr inbounds [704 x i8], [704 x i8]* %10, i64 0, i64 288
  %121 = getelementptr inbounds [128 x i8], [128 x i8]* %15, i64 0, i64 20
  %122 = getelementptr inbounds [704 x i8], [704 x i8]* %10, i64 0, i64 480
  %123 = getelementptr inbounds [128 x i8], [128 x i8]* %15, i64 0, i64 5
  %124 = getelementptr inbounds [704 x i8], [704 x i8]* %10, i64 0, i64 168
  %125 = getelementptr inbounds [128 x i8], [128 x i8]* %15, i64 0, i64 13
  %126 = getelementptr inbounds [704 x i8], [704 x i8]* %10, i64 0, i64 296
  %127 = getelementptr inbounds [128 x i8], [128 x i8]* %15, i64 0, i64 21
  %128 = getelementptr inbounds [704 x i8], [704 x i8]* %10, i64 0, i64 488
  %129 = getelementptr inbounds [128 x i8], [128 x i8]* %15, i64 0, i64 6
  %130 = getelementptr inbounds [704 x i8], [704 x i8]* %10, i64 0, i64 176
  %131 = getelementptr inbounds [128 x i8], [128 x i8]* %15, i64 0, i64 14
  %132 = getelementptr inbounds [704 x i8], [704 x i8]* %10, i64 0, i64 304
  %133 = getelementptr inbounds [128 x i8], [128 x i8]* %15, i64 0, i64 22
  %134 = getelementptr inbounds [704 x i8], [704 x i8]* %10, i64 0, i64 496
  %135 = getelementptr inbounds [128 x i8], [128 x i8]* %15, i64 0, i64 7
  %136 = getelementptr inbounds [704 x i8], [704 x i8]* %10, i64 0, i64 184
  %137 = getelementptr inbounds [128 x i8], [128 x i8]* %15, i64 0, i64 15
  %138 = getelementptr inbounds [704 x i8], [704 x i8]* %10, i64 0, i64 312
  %139 = getelementptr inbounds [128 x i8], [128 x i8]* %15, i64 0, i64 23
  %140 = getelementptr inbounds [704 x i8], [704 x i8]* %10, i64 0, i64 504
  %141 = getelementptr inbounds i8, i8* %1, i64 4
  %142 = xor i64 %21, -1
  br label %143

143:                                              ; preds = %1103, %19
  %144 = phi i8* [ %1, %19 ], [ %148, %1103 ]
  %145 = phi i64 [ %2, %19 ], [ %1104, %1103 ]
  %146 = icmp ult i64 %145, 131072
  %147 = select i1 %146, i64 %145, i64 131072
  %148 = getelementptr inbounds i8, i8* %144, i64 %147
  %149 = icmp ugt i64 %147, 15
  br i1 %149, label %150, label %595, !prof !33

150:                                              ; preds = %143
  %151 = add nsw i64 %147, -4
  %152 = add i64 %145, -16
  %153 = icmp ult i64 %151, %152
  %154 = select i1 %153, i64 %151, i64 %152
  %155 = getelementptr inbounds i8, i8* %144, i64 %154
  %156 = ptrtoint i8* %148 to i64
  br label %157

157:                                              ; preds = %585, %150
  %158 = phi i64 [ %20, %150 ], [ %586, %585 ]
  %159 = phi i64 [ %21, %150 ], [ %318, %585 ]
  %160 = phi i8* [ %144, %150 ], [ %587, %585 ]
  %161 = phi i32 [ -1, %150 ], [ %588, %585 ]
  %162 = getelementptr inbounds i8, i8* %160, i64 1
  %163 = bitcast i8* %162 to i64*
  %164 = load i64, i64* %163, align 8
  %165 = sext i32 %161 to i64
  %166 = sub nsw i64 0, %165
  %167 = icmp slt i32 %161, 1
  br label %168

168:                                              ; preds = %206, %157
  %169 = phi i64 [ %164, %157 ], [ %181, %206 ]
  %170 = phi i32 [ 32, %157 ], [ %174, %206 ]
  %171 = phi i8* [ %162, %157 ], [ %177, %206 ]
  %172 = mul i64 %169, 2176830425094160384
  %173 = lshr i64 %172, 56
  %174 = add i32 %170, 1
  %175 = lshr i32 %170, 5
  %176 = zext i32 %175 to i64
  %177 = getelementptr inbounds i8, i8* %171, i64 %176
  %178 = icmp ugt i8* %177, %155
  br i1 %178, label %595, label %179, !prof !34

179:                                              ; preds = %168
  %180 = bitcast i8* %177 to i64*
  %181 = load i64, i64* %180, align 8
  %182 = getelementptr inbounds i8, i8* %171, i64 %166
  %183 = bitcast i8* %171 to i32*
  %184 = load i32, i32* %183, align 4
  %185 = bitcast i8* %182 to i32*
  %186 = load i32, i32* %185, align 4
  %187 = icmp ne i32 %184, %186
  %188 = or i1 %167, %187
  br i1 %188, label %194, label %189, !prof !35

189:                                              ; preds = %179
  %190 = ptrtoint i8* %171 to i64
  %191 = sub i64 %190, %22
  %192 = trunc i64 %191 to i32
  %193 = getelementptr inbounds i32, i32* %5, i64 %173
  store i32 %192, i32* %193, align 4
  br label %209

194:                                              ; preds = %179
  %195 = getelementptr inbounds i32, i32* %5, i64 %173
  %196 = load i32, i32* %195, align 4
  %197 = sext i32 %196 to i64
  %198 = getelementptr inbounds i8, i8* %1, i64 %197
  %199 = ptrtoint i8* %171 to i64
  %200 = sub i64 %199, %22
  %201 = trunc i64 %200 to i32
  store i32 %201, i32* %195, align 4
  %202 = load i32, i32* %183, align 4
  %203 = bitcast i8* %198 to i32*
  %204 = load i32, i32* %203, align 4
  %205 = icmp eq i32 %202, %204
  br i1 %205, label %207, label %206

206:                                              ; preds = %194, %209
  br label %168

207:                                              ; preds = %194
  %208 = ptrtoint i8* %171 to i64
  br label %209

209:                                              ; preds = %207, %189
  %210 = phi i64 [ %190, %189 ], [ %208, %207 ]
  %211 = phi i8* [ %182, %189 ], [ %198, %207 ]
  %212 = ptrtoint i8* %211 to i64
  %213 = sub i64 %210, %212
  %214 = icmp sgt i64 %213, 262128
  br i1 %214, label %206, label %215

215:                                              ; preds = %209
  %216 = getelementptr inbounds i8, i8* %211, i64 4
  %217 = getelementptr inbounds i8, i8* %171, i64 4
  %218 = sub i64 %156, %210
  %219 = add i64 %218, -4
  %220 = lshr i64 %219, 3
  %221 = icmp eq i64 %220, 0
  br i1 %221, label %242, label %222, !prof !34

222:                                              ; preds = %215, %232
  %223 = phi i64 [ %235, %232 ], [ %220, %215 ]
  %224 = phi i8* [ %233, %232 ], [ %217, %215 ]
  %225 = phi i64 [ %234, %232 ], [ 0, %215 ]
  %226 = bitcast i8* %224 to i64*
  %227 = load i64, i64* %226, align 8
  %228 = getelementptr inbounds i8, i8* %216, i64 %225
  %229 = bitcast i8* %228 to i64*
  %230 = load i64, i64* %229, align 8
  %231 = icmp eq i64 %227, %230
  br i1 %231, label %232, label %237, !prof !34

232:                                              ; preds = %222
  %233 = getelementptr inbounds i8, i8* %224, i64 8
  %234 = add nuw i64 %225, 8
  %235 = add nsw i64 %223, -1
  %236 = icmp eq i64 %235, 0
  br i1 %236, label %242, label %222, !prof !34

237:                                              ; preds = %222
  %238 = xor i64 %230, %227
  %239 = call i64 @llvm.cttz.i64(i64 %238, i1 true) #6, !range !36
  %240 = lshr i64 %239, 3
  %241 = or i64 %240, %225
  br label %255

242:                                              ; preds = %232, %215
  %243 = phi i64 [ 0, %215 ], [ %234, %232 ]
  %244 = phi i8* [ %217, %215 ], [ %233, %232 ]
  %245 = and i64 %219, 7
  %246 = icmp eq i64 %245, 0
  br i1 %246, label %255, label %247

247:                                              ; preds = %242
  %248 = getelementptr inbounds i8, i8* %216, i64 %243
  %249 = load i8, i8* %248, align 1
  %250 = load i8, i8* %244, align 1
  %251 = icmp eq i8 %249, %250
  br i1 %251, label %252, label %255, !prof !33

252:                                              ; preds = %247
  %253 = add i64 %243, 1
  %254 = icmp eq i64 %245, 1
  br i1 %254, label %255, label %1107

255:                                              ; preds = %1152, %252, %247, %1107, %1113, %1116, %1122, %1125, %1131, %1134, %1140, %1143, %1149, %242, %237
  %256 = phi i64 [ %241, %237 ], [ %243, %242 ], [ %253, %252 ], [ %243, %247 ], [ %253, %1107 ], [ %1114, %1113 ], [ %1114, %1116 ], [ %1123, %1122 ], [ %1123, %1125 ], [ %1132, %1131 ], [ %1132, %1134 ], [ %1141, %1140 ], [ %1141, %1143 ], [ %1150, %1149 ], [ %1159, %1152 ]
  %257 = add i64 %256, 4
  %258 = trunc i64 %213 to i32
  %259 = ptrtoint i8* %160 to i64
  %260 = sub i64 %210, %259
  %261 = trunc i64 %260 to i32
  %262 = getelementptr inbounds i8, i8* %171, i64 %257
  %263 = icmp ult i32 %261, 6
  br i1 %263, label %264, label %266

264:                                              ; preds = %255
  %265 = inttoptr i64 %158 to i32*
  store i32 %261, i32* %265, align 4
  br label %311

266:                                              ; preds = %255
  %267 = icmp ult i32 %261, 130
  br i1 %267, label %268, label %281

268:                                              ; preds = %266
  %269 = add nsw i32 %261, -2
  %270 = call i32 @llvm.ctlz.i32(i32 %269, i1 true) #6, !range !2
  %271 = sub nsw i32 30, %270
  %272 = lshr i32 %269, %271
  %273 = shl nsw i32 %271, 1
  %274 = add nuw nsw i32 %272, 2
  %275 = add i32 %274, %273
  %276 = shl i32 %272, %271
  %277 = sub i32 %269, %276
  %278 = shl i32 %277, 8
  %279 = or i32 %278, %275
  %280 = inttoptr i64 %158 to i32*
  store i32 %279, i32* %280, align 4
  br label %311

281:                                              ; preds = %266
  %282 = icmp ult i32 %261, 2114
  br i1 %282, label %283, label %293

283:                                              ; preds = %281
  %284 = add nsw i32 %261, -66
  %285 = call i32 @llvm.ctlz.i32(i32 %284, i1 true) #6, !range !2
  %286 = xor i32 %285, 31
  %287 = add nuw nsw i32 %286, 10
  %288 = shl i32 1, %286
  %289 = sub i32 %284, %288
  %290 = shl i32 %289, 8
  %291 = or i32 %290, %287
  %292 = inttoptr i64 %158 to i32*
  store i32 %291, i32* %292, align 4
  br label %311

293:                                              ; preds = %281
  %294 = icmp ult i32 %261, 6210
  br i1 %294, label %295, label %300

295:                                              ; preds = %293
  %296 = shl i32 %261, 8
  %297 = add nsw i32 %296, -541184
  %298 = or i32 %297, 21
  %299 = inttoptr i64 %158 to i32*
  store i32 %298, i32* %299, align 4
  br label %311

300:                                              ; preds = %293
  %301 = icmp ult i32 %261, 22594
  %302 = shl i32 %261, 8
  br i1 %301, label %303, label %307

303:                                              ; preds = %300
  %304 = add i32 %302, -1589760
  %305 = or i32 %304, 22
  %306 = inttoptr i64 %158 to i32*
  store i32 %305, i32* %306, align 4
  br label %311

307:                                              ; preds = %300
  %308 = add i32 %302, -5784064
  %309 = or i32 %308, 23
  %310 = inttoptr i64 %158 to i32*
  store i32 %309, i32* %310, align 4
  br label %311

311:                                              ; preds = %307, %303, %295, %283, %268, %264
  %312 = phi i32* [ %310, %307 ], [ %306, %303 ], [ %299, %295 ], [ %292, %283 ], [ %280, %268 ], [ %265, %264 ]
  %313 = getelementptr inbounds i32, i32* %312, i64 1
  %314 = inttoptr i64 %159 to i8*
  %315 = shl i64 %260, 32
  %316 = ashr exact i64 %315, 32
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %314, i8* align 1 %160, i64 %316, i1 false) #6
  %317 = getelementptr inbounds i8, i8* %314, i64 %316
  %318 = ptrtoint i8* %317 to i64
  %319 = icmp eq i32 %161, %258
  br i1 %319, label %336, label %320

320:                                              ; preds = %311
  %321 = add i32 %258, 3
  %322 = call i32 @llvm.ctlz.i32(i32 %321, i1 true) #6, !range !2
  %323 = xor i32 %322, 31
  %324 = add nsw i32 %323, -1
  %325 = lshr i32 %321, %324
  %326 = and i32 %325, 1
  %327 = or i32 %326, 2
  %328 = shl i32 %327, %324
  %329 = shl nuw nsw i32 %323, 1
  %330 = add nsw i32 %329, -4
  %331 = or i32 %326, %330
  %332 = add nsw i32 %331, 80
  %333 = sub i32 %321, %328
  %334 = shl i32 %333, 8
  %335 = or i32 %334, %332
  br label %336

336:                                              ; preds = %320, %311
  %337 = phi i32 [ %335, %320 ], [ 64, %311 ]
  %338 = phi i32 [ %258, %320 ], [ %161, %311 ]
  store i32 %337, i32* %313, align 4
  %339 = getelementptr inbounds i32, i32* %312, i64 2
  %340 = icmp ult i64 %257, 12
  br i1 %340, label %341, label %344

341:                                              ; preds = %336
  %342 = trunc i64 %257 to i32
  %343 = add nuw nsw i32 %342, 20
  store i32 %343, i32* %339, align 4
  br label %393

344:                                              ; preds = %336
  %345 = icmp ult i64 %257, 72
  br i1 %345, label %346, label %361

346:                                              ; preds = %344
  %347 = add nsw i64 %256, -4
  %348 = trunc i64 %347 to i32
  %349 = call i32 @llvm.ctlz.i32(i32 %348, i1 true) #6, !range !2
  %350 = sub nsw i32 30, %349
  %351 = zext i32 %350 to i64
  %352 = lshr i64 %347, %351
  %353 = shl nuw nsw i64 %351, 1
  %354 = add nuw nsw i64 %352, 28
  %355 = add nuw nsw i64 %354, %353
  %356 = shl i64 %352, %351
  %357 = sub i64 %347, %356
  %358 = shl i64 %357, 8
  %359 = or i64 %358, %355
  %360 = trunc i64 %359 to i32
  store i32 %360, i32* %339, align 4
  br label %393

361:                                              ; preds = %344
  %362 = icmp ult i64 %257, 136
  br i1 %362, label %363, label %372

363:                                              ; preds = %361
  %364 = add nsw i64 %256, -4
  %365 = lshr i64 %364, 5
  %366 = add nuw nsw i64 %365, 54
  %367 = shl i64 %364, 8
  %368 = and i64 %367, 7936
  %369 = or i64 %366, %368
  %370 = trunc i64 %369 to i32
  store i32 %370, i32* %339, align 4
  %371 = getelementptr inbounds i32, i32* %312, i64 3
  store i32 64, i32* %371, align 4
  br label %393

372:                                              ; preds = %361
  %373 = icmp ult i64 %257, 2120
  br i1 %373, label %374, label %387

374:                                              ; preds = %372
  %375 = add nsw i64 %256, -68
  %376 = trunc i64 %375 to i32
  %377 = call i32 @llvm.ctlz.i32(i32 %376, i1 true) #6, !range !2
  %378 = xor i32 %377, 31
  %379 = zext i32 %378 to i64
  %380 = add nuw nsw i64 %379, 52
  %381 = shl i64 1, %379
  %382 = sub i64 %375, %381
  %383 = shl i64 %382, 8
  %384 = or i64 %383, %380
  %385 = trunc i64 %384 to i32
  store i32 %385, i32* %339, align 4
  %386 = getelementptr inbounds i32, i32* %312, i64 3
  store i32 64, i32* %386, align 4
  br label %393

387:                                              ; preds = %372
  %388 = trunc i64 %257 to i32
  %389 = shl i32 %388, 8
  %390 = add i32 %389, -542720
  %391 = or i32 %390, 63
  store i32 %391, i32* %339, align 4
  %392 = getelementptr inbounds i32, i32* %312, i64 3
  store i32 64, i32* %392, align 4
  br label %393

393:                                              ; preds = %387, %374, %363, %346, %341
  %394 = phi i64 [ 4, %387 ], [ 4, %374 ], [ 4, %363 ], [ 3, %346 ], [ 3, %341 ]
  %395 = getelementptr inbounds i32, i32* %312, i64 %394
  %396 = ptrtoint i32* %395 to i64
  %397 = icmp ult i8* %262, %155
  br i1 %397, label %398, label %592, !prof !33

398:                                              ; preds = %393
  %399 = getelementptr inbounds i8, i8* %262, i64 -3
  %400 = bitcast i8* %399 to i64*
  %401 = load i64, i64* %400, align 8
  %402 = lshr i64 %401, 24
  %403 = mul i64 %402, 2176830425094160384
  %404 = mul i64 %401, 2176830425094160384
  %405 = lshr i64 %404, 56
  %406 = ptrtoint i8* %262 to i64
  %407 = sub i64 %406, %22
  %408 = trunc i64 %407 to i32
  %409 = getelementptr inbounds i32, i32* %5, i64 %405
  %410 = lshr i64 %401, 8
  %411 = mul i64 %410, 2176830425094160384
  %412 = lshr i64 %411, 56
  %413 = add i32 %408, -2
  %414 = getelementptr inbounds i32, i32* %5, i64 %412
  store i32 %413, i32* %414, align 4
  %415 = add i32 %408, -1
  store i32 %415, i32* %409, align 4
  %416 = lshr i64 %403, 56
  %417 = getelementptr inbounds i32, i32* %5, i64 %416
  %418 = load i32, i32* %417, align 4
  store i32 %408, i32* %417, align 4
  %419 = sext i32 %418 to i64
  %420 = getelementptr inbounds i8, i8* %1, i64 %419
  %421 = ptrtoint i8* %420 to i64
  %422 = sub i64 %406, %421
  %423 = icmp slt i64 %422, 262129
  br i1 %423, label %424, label %585

424:                                              ; preds = %398
  %425 = bitcast i8* %262 to i32*
  %426 = load i32, i32* %425, align 4
  %427 = bitcast i8* %420 to i32*
  %428 = load i32, i32* %427, align 4
  %429 = icmp eq i32 %426, %428
  br i1 %429, label %436, label %585

430:                                              ; preds = %551
  %431 = bitcast i8* %484 to i32*
  %432 = load i32, i32* %431, align 4
  %433 = bitcast i8* %578 to i32*
  %434 = load i32, i32* %433, align 4
  %435 = icmp eq i32 %432, %434
  br i1 %435, label %436, label %582

436:                                              ; preds = %424, %430
  %437 = phi i8* [ %484, %430 ], [ %262, %424 ]
  %438 = phi i64 [ %577, %430 ], [ %419, %424 ]
  %439 = phi i64 [ %559, %430 ], [ %406, %424 ]
  %440 = phi i64 [ %580, %430 ], [ %422, %424 ]
  %441 = phi i64 [ %549, %430 ], [ %396, %424 ]
  %442 = getelementptr inbounds i8, i8* %141, i64 %438
  %443 = getelementptr inbounds i8, i8* %437, i64 4
  %444 = sub i64 %156, %439
  %445 = add i64 %444, -4
  %446 = lshr i64 %445, 3
  %447 = icmp eq i64 %446, 0
  br i1 %447, label %468, label %448, !prof !34

448:                                              ; preds = %436, %458
  %449 = phi i64 [ %461, %458 ], [ %446, %436 ]
  %450 = phi i8* [ %459, %458 ], [ %443, %436 ]
  %451 = phi i64 [ %460, %458 ], [ 0, %436 ]
  %452 = bitcast i8* %450 to i64*
  %453 = load i64, i64* %452, align 8
  %454 = getelementptr inbounds i8, i8* %442, i64 %451
  %455 = bitcast i8* %454 to i64*
  %456 = load i64, i64* %455, align 8
  %457 = icmp eq i64 %453, %456
  br i1 %457, label %458, label %463, !prof !34

458:                                              ; preds = %448
  %459 = getelementptr inbounds i8, i8* %450, i64 8
  %460 = add nuw i64 %451, 8
  %461 = add nsw i64 %449, -1
  %462 = icmp eq i64 %461, 0
  br i1 %462, label %468, label %448, !prof !34

463:                                              ; preds = %448
  %464 = xor i64 %456, %453
  %465 = call i64 @llvm.cttz.i64(i64 %464, i1 true) #6, !range !36
  %466 = lshr i64 %465, 3
  %467 = or i64 %466, %451
  br label %481

468:                                              ; preds = %458, %436
  %469 = phi i64 [ 0, %436 ], [ %460, %458 ]
  %470 = phi i8* [ %443, %436 ], [ %459, %458 ]
  %471 = and i64 %445, 7
  %472 = icmp eq i64 %471, 0
  br i1 %472, label %481, label %473

473:                                              ; preds = %468
  %474 = getelementptr inbounds i8, i8* %442, i64 %469
  %475 = load i8, i8* %474, align 1
  %476 = load i8, i8* %470, align 1
  %477 = icmp eq i8 %475, %476
  br i1 %477, label %478, label %481, !prof !33

478:                                              ; preds = %473
  %479 = add i64 %469, 1
  %480 = icmp eq i64 %471, 1
  br i1 %480, label %481, label %1160

481:                                              ; preds = %1205, %478, %473, %1160, %1166, %1169, %1175, %1178, %1184, %1187, %1193, %1196, %1202, %468, %463
  %482 = phi i64 [ %467, %463 ], [ %469, %468 ], [ %479, %478 ], [ %469, %473 ], [ %479, %1160 ], [ %1167, %1166 ], [ %1167, %1169 ], [ %1176, %1175 ], [ %1176, %1178 ], [ %1185, %1184 ], [ %1185, %1187 ], [ %1194, %1193 ], [ %1194, %1196 ], [ %1203, %1202 ], [ %1212, %1205 ]
  %483 = add i64 %482, 4
  %484 = getelementptr inbounds i8, i8* %437, i64 %483
  %485 = trunc i64 %440 to i32
  %486 = icmp ult i64 %483, 10
  br i1 %486, label %487, label %491

487:                                              ; preds = %481
  %488 = trunc i64 %483 to i32
  %489 = add nuw nsw i32 %488, 38
  %490 = inttoptr i64 %441 to i32*
  store i32 %489, i32* %490, align 4
  br label %530

491:                                              ; preds = %481
  %492 = icmp ult i64 %483, 134
  br i1 %492, label %493, label %509

493:                                              ; preds = %491
  %494 = add nsw i64 %482, -2
  %495 = trunc i64 %494 to i32
  %496 = call i32 @llvm.ctlz.i32(i32 %495, i1 true) #6, !range !2
  %497 = sub nsw i32 30, %496
  %498 = zext i32 %497 to i64
  %499 = lshr i64 %494, %498
  %500 = shl nuw nsw i64 %498, 1
  %501 = add nuw nsw i64 %499, 44
  %502 = add nuw nsw i64 %501, %500
  %503 = shl i64 %499, %498
  %504 = sub i64 %494, %503
  %505 = shl i64 %504, 8
  %506 = or i64 %505, %502
  %507 = trunc i64 %506 to i32
  %508 = inttoptr i64 %441 to i32*
  store i32 %507, i32* %508, align 4
  br label %530

509:                                              ; preds = %491
  %510 = icmp ult i64 %483, 2118
  br i1 %510, label %511, label %524

511:                                              ; preds = %509
  %512 = add nsw i64 %482, -66
  %513 = trunc i64 %512 to i32
  %514 = call i32 @llvm.ctlz.i32(i32 %513, i1 true) #6, !range !2
  %515 = xor i32 %514, 31
  %516 = zext i32 %515 to i64
  %517 = add nuw nsw i64 %516, 52
  %518 = shl i64 1, %516
  %519 = sub i64 %512, %518
  %520 = shl i64 %519, 8
  %521 = or i64 %520, %517
  %522 = trunc i64 %521 to i32
  %523 = inttoptr i64 %441 to i32*
  store i32 %522, i32* %523, align 4
  br label %530

524:                                              ; preds = %509
  %525 = trunc i64 %483 to i32
  %526 = shl i32 %525, 8
  %527 = add i32 %526, -542208
  %528 = or i32 %527, 63
  %529 = inttoptr i64 %441 to i32*
  store i32 %528, i32* %529, align 4
  br label %530

530:                                              ; preds = %524, %511, %493, %487
  %531 = phi i32* [ %529, %524 ], [ %523, %511 ], [ %508, %493 ], [ %490, %487 ]
  %532 = getelementptr inbounds i32, i32* %531, i64 1
  %533 = add i32 %485, 3
  %534 = call i32 @llvm.ctlz.i32(i32 %533, i1 true) #6, !range !2
  %535 = xor i32 %534, 31
  %536 = add nsw i32 %535, -1
  %537 = lshr i32 %533, %536
  %538 = and i32 %537, 1
  %539 = or i32 %538, 2
  %540 = shl i32 %539, %536
  %541 = shl nuw nsw i32 %535, 1
  %542 = add nsw i32 %541, -4
  %543 = or i32 %538, %542
  %544 = add nsw i32 %543, 80
  %545 = sub i32 %533, %540
  %546 = shl i32 %545, 8
  %547 = or i32 %546, %544
  store i32 %547, i32* %532, align 4
  %548 = getelementptr inbounds i32, i32* %531, i64 2
  %549 = ptrtoint i32* %548 to i64
  %550 = icmp ult i8* %484, %155
  br i1 %550, label %551, label %589, !prof !33

551:                                              ; preds = %530
  %552 = getelementptr inbounds i8, i8* %484, i64 -3
  %553 = bitcast i8* %552 to i64*
  %554 = load i64, i64* %553, align 8
  %555 = lshr i64 %554, 24
  %556 = mul i64 %555, 2176830425094160384
  %557 = mul i64 %554, 2176830425094160384
  %558 = lshr i64 %557, 56
  %559 = ptrtoint i8* %484 to i64
  %560 = sub i64 %559, %22
  %561 = trunc i64 %560 to i32
  %562 = add i32 %561, -3
  %563 = getelementptr inbounds i32, i32* %5, i64 %558
  store i32 %562, i32* %563, align 4
  %564 = lshr i64 %554, 8
  %565 = mul i64 %564, 2176830425094160384
  %566 = lshr i64 %565, 56
  %567 = add i32 %561, -2
  %568 = getelementptr inbounds i32, i32* %5, i64 %566
  store i32 %567, i32* %568, align 4
  %569 = lshr i64 %554, 16
  %570 = mul i64 %569, 2176830425094160384
  %571 = lshr i64 %570, 56
  %572 = add i32 %561, -1
  %573 = getelementptr inbounds i32, i32* %5, i64 %571
  store i32 %572, i32* %573, align 4
  %574 = lshr i64 %556, 56
  %575 = getelementptr inbounds i32, i32* %5, i64 %574
  %576 = load i32, i32* %575, align 4
  store i32 %561, i32* %575, align 4
  %577 = sext i32 %576 to i64
  %578 = getelementptr inbounds i8, i8* %1, i64 %577
  %579 = ptrtoint i8* %578 to i64
  %580 = sub i64 %559, %579
  %581 = icmp slt i64 %580, 262129
  br i1 %581, label %430, label %582

582:                                              ; preds = %551, %430
  %583 = trunc i64 %440 to i32
  %584 = ptrtoint i32* %548 to i64
  br label %585

585:                                              ; preds = %582, %424, %398
  %586 = phi i64 [ %396, %398 ], [ %396, %424 ], [ %584, %582 ]
  %587 = phi i8* [ %262, %398 ], [ %262, %424 ], [ %484, %582 ]
  %588 = phi i32 [ %338, %398 ], [ %338, %424 ], [ %583, %582 ]
  br label %157

589:                                              ; preds = %530
  %590 = ptrtoint i8* %317 to i64
  %591 = ptrtoint i32* %548 to i64
  br label %595

592:                                              ; preds = %393
  %593 = ptrtoint i8* %317 to i64
  %594 = ptrtoint i32* %395 to i64
  br label %595

595:                                              ; preds = %168, %592, %589, %143
  %596 = phi i64 [ %20, %143 ], [ %591, %589 ], [ %594, %592 ], [ %158, %168 ]
  %597 = phi i64 [ %21, %143 ], [ %590, %589 ], [ %593, %592 ], [ %159, %168 ]
  %598 = phi i8* [ %144, %143 ], [ %484, %589 ], [ %262, %592 ], [ %160, %168 ]
  %599 = icmp ult i8* %598, %148
  br i1 %599, label %600, label %661

600:                                              ; preds = %595
  %601 = ptrtoint i8* %148 to i64
  %602 = ptrtoint i8* %598 to i64
  %603 = sub i64 %601, %602
  %604 = trunc i64 %603 to i32
  %605 = icmp ult i32 %604, 6
  br i1 %605, label %606, label %608

606:                                              ; preds = %600
  %607 = inttoptr i64 %596 to i32*
  store i32 %604, i32* %607, align 4
  br label %653

608:                                              ; preds = %600
  %609 = icmp ult i32 %604, 130
  br i1 %609, label %610, label %623

610:                                              ; preds = %608
  %611 = add nsw i32 %604, -2
  %612 = call i32 @llvm.ctlz.i32(i32 %611, i1 true) #6, !range !2
  %613 = sub nsw i32 30, %612
  %614 = lshr i32 %611, %613
  %615 = shl nsw i32 %613, 1
  %616 = add nuw nsw i32 %614, 2
  %617 = add i32 %616, %615
  %618 = shl i32 %614, %613
  %619 = sub i32 %611, %618
  %620 = shl i32 %619, 8
  %621 = or i32 %620, %617
  %622 = inttoptr i64 %596 to i32*
  store i32 %621, i32* %622, align 4
  br label %653

623:                                              ; preds = %608
  %624 = icmp ult i32 %604, 2114
  br i1 %624, label %625, label %635

625:                                              ; preds = %623
  %626 = add nsw i32 %604, -66
  %627 = call i32 @llvm.ctlz.i32(i32 %626, i1 true) #6, !range !2
  %628 = xor i32 %627, 31
  %629 = add nuw nsw i32 %628, 10
  %630 = shl i32 1, %628
  %631 = sub i32 %626, %630
  %632 = shl i32 %631, 8
  %633 = or i32 %632, %629
  %634 = inttoptr i64 %596 to i32*
  store i32 %633, i32* %634, align 4
  br label %653

635:                                              ; preds = %623
  %636 = icmp ult i32 %604, 6210
  br i1 %636, label %637, label %642

637:                                              ; preds = %635
  %638 = shl i32 %604, 8
  %639 = add nsw i32 %638, -541184
  %640 = or i32 %639, 21
  %641 = inttoptr i64 %596 to i32*
  store i32 %640, i32* %641, align 4
  br label %653

642:                                              ; preds = %635
  %643 = icmp ult i32 %604, 22594
  %644 = shl i32 %604, 8
  br i1 %643, label %645, label %649

645:                                              ; preds = %642
  %646 = add i32 %644, -1589760
  %647 = or i32 %646, 22
  %648 = inttoptr i64 %596 to i32*
  store i32 %647, i32* %648, align 4
  br label %653

649:                                              ; preds = %642
  %650 = add i32 %644, -5784064
  %651 = or i32 %650, 23
  %652 = inttoptr i64 %596 to i32*
  store i32 %651, i32* %652, align 4
  br label %653

653:                                              ; preds = %649, %645, %637, %625, %610, %606
  %654 = phi i32* [ %652, %649 ], [ %648, %645 ], [ %641, %637 ], [ %634, %625 ], [ %622, %610 ], [ %607, %606 ]
  %655 = getelementptr inbounds i32, i32* %654, i64 1
  %656 = ptrtoint i32* %655 to i64
  %657 = inttoptr i64 %597 to i8*
  %658 = and i64 %603, 4294967295
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %657, i8* align 1 %598, i64 %658, i1 false) #6
  %659 = getelementptr inbounds i8, i8* %657, i64 %658
  %660 = ptrtoint i8* %659 to i64
  br label %661

661:                                              ; preds = %653, %595
  %662 = phi i64 [ %656, %653 ], [ %596, %595 ]
  %663 = phi i64 [ %660, %653 ], [ %597, %595 ]
  %664 = sub i64 %663, %21
  %665 = uitofp i64 %147 to double
  %666 = uitofp i64 %664 to double
  %667 = fmul double %665, 0x3FEF5C28F5C28F5C
  %668 = fcmp ogt double %667, %666
  br i1 %668, label %743, label %669

669:                                              ; preds = %661
  call void @llvm.lifetime.start.p0i8(i64 1024, i8* nonnull %23) #6
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %23, i8 0, i64 1024, i1 false) #6
  %670 = fmul double %665, 8.000000e+00
  %671 = fmul double %670, 0x3FEF5C28F5C28F5C
  %672 = fdiv double %671, 4.300000e+01
  %673 = icmp eq i64 %147, 0
  br i1 %673, label %684, label %674

674:                                              ; preds = %669, %674
  %675 = phi i64 [ %682, %674 ], [ 0, %669 ]
  %676 = getelementptr inbounds i8, i8* %144, i64 %675
  %677 = load i8, i8* %676, align 1
  %678 = zext i8 %677 to i64
  %679 = getelementptr inbounds [256 x i32], [256 x i32]* %14, i64 0, i64 %678
  %680 = load i32, i32* %679, align 4
  %681 = add i32 %680, 1
  store i32 %681, i32* %679, align 4
  %682 = add i64 %675, 43
  %683 = icmp ult i64 %682, %147
  br i1 %683, label %674, label %684

684:                                              ; preds = %674, %669
  br label %685

685:                                              ; preds = %684, %719
  %686 = phi double [ %722, %719 ], [ 0.000000e+00, %684 ]
  %687 = phi i64 [ %711, %719 ], [ 0, %684 ]
  %688 = phi i64 [ %708, %719 ], [ 0, %684 ]
  %689 = getelementptr inbounds [256 x i32], [256 x i32]* %14, i64 0, i64 %688
  %690 = load i32, i32* %689, align 8
  %691 = zext i32 %690 to i64
  %692 = icmp ult i32 %690, 256
  br i1 %692, label %693, label %697

693:                                              ; preds = %685
  %694 = getelementptr inbounds [256 x double], [256 x double]* @kBrotliLog2Table, i64 0, i64 %691
  %695 = load double, double* %694, align 8
  %696 = uitofp i32 %690 to double
  br label %700

697:                                              ; preds = %685
  %698 = uitofp i32 %690 to double
  %699 = call double @log2(double %698) #6
  br label %700

700:                                              ; preds = %697, %693
  %701 = phi double [ %696, %693 ], [ %698, %697 ]
  %702 = phi double [ %695, %693 ], [ %699, %697 ]
  %703 = or i64 %688, 1
  %704 = getelementptr inbounds [256 x i32], [256 x i32]* %14, i64 0, i64 %703
  %705 = fmul double %701, %702
  %706 = fsub double %686, %705
  %707 = add i64 %687, %691
  %708 = add nuw nsw i64 %688, 2
  %709 = load i32, i32* %704, align 4
  %710 = zext i32 %709 to i64
  %711 = add i64 %707, %710
  %712 = uitofp i32 %709 to double
  %713 = icmp ult i32 %709, 256
  br i1 %713, label %714, label %717

714:                                              ; preds = %700
  %715 = getelementptr inbounds [256 x double], [256 x double]* @kBrotliLog2Table, i64 0, i64 %710
  %716 = load double, double* %715, align 8
  br label %719

717:                                              ; preds = %700
  %718 = call double @log2(double %712) #6
  br label %719

719:                                              ; preds = %717, %714
  %720 = phi double [ %716, %714 ], [ %718, %717 ]
  %721 = fmul double %720, %712
  %722 = fsub double %706, %721
  %723 = icmp ult i64 %708, 256
  br i1 %723, label %685, label %724

724:                                              ; preds = %719
  %725 = icmp eq i64 %711, 0
  %726 = uitofp i64 %711 to double
  br i1 %725, label %738, label %727

727:                                              ; preds = %724
  %728 = icmp ult i64 %711, 256
  br i1 %728, label %729, label %732

729:                                              ; preds = %727
  %730 = getelementptr inbounds [256 x double], [256 x double]* @kBrotliLog2Table, i64 0, i64 %711
  %731 = load double, double* %730, align 8
  br label %734

732:                                              ; preds = %727
  %733 = call double @log2(double %726) #6
  br label %734

734:                                              ; preds = %732, %729
  %735 = phi double [ %731, %729 ], [ %733, %732 ]
  %736 = fmul double %735, %726
  %737 = fadd double %722, %736
  br label %738

738:                                              ; preds = %734, %724
  %739 = phi double [ %737, %734 ], [ %722, %724 ]
  %740 = fcmp olt double %739, %726
  %741 = select i1 %740, double %726, double %739
  %742 = fcmp uge double %741, %672
  call void @llvm.lifetime.end.p0i8(i64 1024, i8* nonnull %23) #6
  br i1 %742, label %1055, label %743

743:                                              ; preds = %738, %661
  %744 = sub i64 %662, %20
  %745 = ashr exact i64 %744, 2
  %746 = load i64, i64* %6, align 8, !alias.scope !37, !noalias !40
  %747 = lshr i64 %746, 3
  %748 = getelementptr inbounds i8, i8* %7, i64 %747
  %749 = load i8, i8* %748, align 1, !alias.scope !40, !noalias !37
  %750 = zext i8 %749 to i64
  %751 = bitcast i8* %748 to i64*
  store i64 %750, i64* %751, align 8, !alias.scope !40, !noalias !37
  %752 = add i64 %746, 1
  %753 = icmp ult i64 %147, 65537
  %754 = select i1 %753, i64 4, i64 5
  %755 = add nsw i64 %754, -4
  %756 = lshr i64 %752, 3
  %757 = getelementptr inbounds i8, i8* %7, i64 %756
  %758 = load i8, i8* %757, align 1, !alias.scope !42, !noalias !45
  %759 = zext i8 %758 to i64
  %760 = and i64 %752, 7
  %761 = shl i64 %755, %760
  %762 = or i64 %761, %759
  %763 = bitcast i8* %757 to i64*
  store i64 %762, i64* %763, align 8, !alias.scope !42, !noalias !45
  %764 = add i64 %746, 3
  %765 = shl nuw nsw i64 %754, 2
  %766 = add nsw i64 %147, -1
  %767 = lshr i64 %764, 3
  %768 = getelementptr inbounds i8, i8* %7, i64 %767
  %769 = load i8, i8* %768, align 1, !alias.scope !47, !noalias !50
  %770 = zext i8 %769 to i64
  %771 = and i64 %764, 7
  %772 = shl i64 %766, %771
  %773 = or i64 %772, %770
  %774 = bitcast i8* %768 to i64*
  store i64 %773, i64* %774, align 8, !alias.scope !47, !noalias !50
  %775 = add i64 %764, %765
  %776 = lshr i64 %775, 3
  %777 = getelementptr inbounds i8, i8* %7, i64 %776
  %778 = load i8, i8* %777, align 1, !alias.scope !52, !noalias !55
  %779 = zext i8 %778 to i64
  %780 = bitcast i8* %777 to i64*
  store i64 %779, i64* %780, align 8, !alias.scope !52, !noalias !55
  %781 = add i64 %775, 1
  %782 = lshr i64 %781, 3
  %783 = getelementptr inbounds i8, i8* %7, i64 %782
  %784 = load i8, i8* %783, align 1, !alias.scope !57, !noalias !60
  %785 = zext i8 %784 to i64
  %786 = bitcast i8* %783 to i64*
  store i64 %785, i64* %786, align 8, !alias.scope !57, !noalias !60
  %787 = add i64 %775, 14
  store i64 %787, i64* %6, align 8, !alias.scope !60, !noalias !57
  call void @llvm.lifetime.start.p0i8(i64 256, i8* nonnull %24) #6
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %24, i8 -86, i64 256, i1 false) #6
  call void @llvm.lifetime.start.p0i8(i64 512, i8* nonnull %25) #6
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %25, i8 -86, i64 512, i1 false) #6
  call void @llvm.lifetime.start.p0i8(i64 1024, i8* nonnull %23) #6
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %23, i8 0, i64 1024, i1 false) #6
  call void @llvm.lifetime.start.p0i8(i64 128, i8* nonnull %26) #6
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %26, i8 0, i64 128, i1 false) #6
  call void @llvm.lifetime.start.p0i8(i64 256, i8* nonnull %27) #6
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %27, i8 0, i64 256, i1 false) #6
  call void @llvm.lifetime.start.p0i8(i64 512, i8* nonnull %28) #6
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %28, i8 0, i64 512, i1 false) #6
  %788 = icmp eq i64 %664, 0
  br i1 %788, label %843, label %789

789:                                              ; preds = %743
  %790 = add i64 %663, %142
  %791 = and i64 %664, 3
  %792 = icmp ult i64 %790, 3
  br i1 %792, label %828, label %793

793:                                              ; preds = %789
  %794 = sub i64 %664, %791
  br label %795

795:                                              ; preds = %795, %793
  %796 = phi i64 [ 0, %793 ], [ %825, %795 ]
  %797 = phi i64 [ %794, %793 ], [ %826, %795 ]
  %798 = getelementptr inbounds i8, i8* %4, i64 %796
  %799 = load i8, i8* %798, align 1
  %800 = zext i8 %799 to i64
  %801 = getelementptr inbounds [256 x i32], [256 x i32]* %14, i64 0, i64 %800
  %802 = load i32, i32* %801, align 4
  %803 = add i32 %802, 1
  store i32 %803, i32* %801, align 4
  %804 = or i64 %796, 1
  %805 = getelementptr inbounds i8, i8* %4, i64 %804
  %806 = load i8, i8* %805, align 1
  %807 = zext i8 %806 to i64
  %808 = getelementptr inbounds [256 x i32], [256 x i32]* %14, i64 0, i64 %807
  %809 = load i32, i32* %808, align 4
  %810 = add i32 %809, 1
  store i32 %810, i32* %808, align 4
  %811 = or i64 %796, 2
  %812 = getelementptr inbounds i8, i8* %4, i64 %811
  %813 = load i8, i8* %812, align 1
  %814 = zext i8 %813 to i64
  %815 = getelementptr inbounds [256 x i32], [256 x i32]* %14, i64 0, i64 %814
  %816 = load i32, i32* %815, align 4
  %817 = add i32 %816, 1
  store i32 %817, i32* %815, align 4
  %818 = or i64 %796, 3
  %819 = getelementptr inbounds i8, i8* %4, i64 %818
  %820 = load i8, i8* %819, align 1
  %821 = zext i8 %820 to i64
  %822 = getelementptr inbounds [256 x i32], [256 x i32]* %14, i64 0, i64 %821
  %823 = load i32, i32* %822, align 4
  %824 = add i32 %823, 1
  store i32 %824, i32* %822, align 4
  %825 = add nuw i64 %796, 4
  %826 = add i64 %797, -4
  %827 = icmp eq i64 %826, 0
  br i1 %827, label %828, label %795

828:                                              ; preds = %795, %789
  %829 = phi i64 [ 0, %789 ], [ %825, %795 ]
  %830 = icmp eq i64 %791, 0
  br i1 %830, label %843, label %831

831:                                              ; preds = %828, %831
  %832 = phi i64 [ %840, %831 ], [ %829, %828 ]
  %833 = phi i64 [ %841, %831 ], [ %791, %828 ]
  %834 = getelementptr inbounds i8, i8* %4, i64 %832
  %835 = load i8, i8* %834, align 1
  %836 = zext i8 %835 to i64
  %837 = getelementptr inbounds [256 x i32], [256 x i32]* %14, i64 0, i64 %836
  %838 = load i32, i32* %837, align 4
  %839 = add i32 %838, 1
  store i32 %839, i32* %837, align 4
  %840 = add nuw i64 %832, 1
  %841 = add i64 %833, -1
  %842 = icmp eq i64 %841, 0
  br i1 %842, label %843, label %831, !llvm.loop !62

843:                                              ; preds = %828, %831, %743
  call void @BrotliBuildAndStoreHuffmanTreeFast(%struct.MemoryManager* %0, i32* nonnull %29, i64 %664, i64 8, i8* nonnull %24, i16* nonnull %30, i64* %6, i8* %7) #6
  %844 = icmp eq i64 %744, 0
  br i1 %844, label %891, label %845

845:                                              ; preds = %843
  %846 = and i64 %745, 1
  %847 = icmp eq i64 %744, 4
  br i1 %847, label %871, label %848

848:                                              ; preds = %845
  %849 = sub nsw i64 %745, %846
  br label %850

850:                                              ; preds = %850, %848
  %851 = phi i64 [ 0, %848 ], [ %868, %850 ]
  %852 = phi i64 [ %849, %848 ], [ %869, %850 ]
  %853 = getelementptr inbounds i32, i32* %3, i64 %851
  %854 = load i32, i32* %853, align 4
  %855 = and i32 %854, 255
  %856 = zext i32 %855 to i64
  %857 = getelementptr inbounds [128 x i32], [128 x i32]* %17, i64 0, i64 %856
  %858 = load i32, i32* %857, align 4
  %859 = add i32 %858, 1
  store i32 %859, i32* %857, align 4
  %860 = or i64 %851, 1
  %861 = getelementptr inbounds i32, i32* %3, i64 %860
  %862 = load i32, i32* %861, align 4
  %863 = and i32 %862, 255
  %864 = zext i32 %863 to i64
  %865 = getelementptr inbounds [128 x i32], [128 x i32]* %17, i64 0, i64 %864
  %866 = load i32, i32* %865, align 4
  %867 = add i32 %866, 1
  store i32 %867, i32* %865, align 4
  %868 = add nuw i64 %851, 2
  %869 = add i64 %852, -2
  %870 = icmp eq i64 %869, 0
  br i1 %870, label %871, label %850

871:                                              ; preds = %850, %845
  %872 = phi i64 [ 0, %845 ], [ %868, %850 ]
  %873 = icmp eq i64 %846, 0
  br i1 %873, label %882, label %874

874:                                              ; preds = %871
  %875 = getelementptr inbounds i32, i32* %3, i64 %872
  %876 = load i32, i32* %875, align 4
  %877 = and i32 %876, 255
  %878 = zext i32 %877 to i64
  %879 = getelementptr inbounds [128 x i32], [128 x i32]* %17, i64 0, i64 %878
  %880 = load i32, i32* %879, align 4
  %881 = add i32 %880, 1
  store i32 %881, i32* %879, align 4
  br label %882

882:                                              ; preds = %871, %874
  %883 = load i32, i32* %31, align 4
  %884 = load i32, i32* %32, align 8
  %885 = load i32, i32* %33, align 16
  %886 = load i32, i32* %34, align 16
  %887 = add i32 %883, 1
  %888 = add i32 %884, 1
  %889 = add i32 %885, 1
  %890 = add i32 %886, 1
  br label %891

891:                                              ; preds = %882, %843
  %892 = phi i32 [ %890, %882 ], [ 1, %843 ]
  %893 = phi i32 [ %889, %882 ], [ 1, %843 ]
  %894 = phi i32 [ %888, %882 ], [ 1, %843 ]
  %895 = phi i32 [ %887, %882 ], [ 1, %843 ]
  store i32 %895, i32* %31, align 4
  store i32 %894, i32* %32, align 8
  store i32 %893, i32* %33, align 16
  store i32 %892, i32* %34, align 16
  call void @llvm.lifetime.start.p0i8(i64 1032, i8* nonnull %36) #6
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %36, i8 -86, i64 1032, i1 false) #6
  call void @llvm.lifetime.start.p0i8(i64 704, i8* nonnull %37) #6
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %37, i8 0, i64 704, i1 false) #6
  call void @llvm.lifetime.start.p0i8(i64 128, i8* nonnull %38) #6
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %38, i8 -86, i64 128, i1 false) #6
  call void @BrotliCreateHuffmanTree(i32* nonnull %35, i64 64, i32 15, %struct.HuffmanTree* nonnull %39, i8* nonnull %26) #6
  call void @BrotliCreateHuffmanTree(i32* %33, i64 64, i32 14, %struct.HuffmanTree* nonnull %39, i8* %40) #6
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 16 %37, i8* align 8 %41, i64 24, i1 false) #6
  %896 = load i64, i64* %43, align 16
  store i64 %896, i64* %44, align 8
  %897 = load i64, i64* %47, align 16
  store i64 %897, i64* %48, align 16
  %898 = load i64, i64* %51, align 8
  store i64 %898, i64* %52, align 8
  %899 = load i64, i64* %55, align 8
  store i64 %899, i64* %56, align 16
  %900 = load i64, i64* %59, align 16
  store i64 %900, i64* %60, align 8
  call void @BrotliConvertBitDepthsToSymbols(i8* nonnull %37, i64 64, i16* nonnull %61) #6
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 16 %27, i8* align 16 %63, i64 16, i1 false) #6
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 16 %65, i8* align 16 %67, i64 16, i1 false) #6
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 16 %69, i8* align 16 %71, i64 16, i1 false) #6
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 16 %73, i8* nonnull align 16 %38, i64 48, i1 false) #6
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 16 %75, i8* align 16 %77, i64 16, i1 false) #6
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 16 %79, i8* align 16 %81, i64 16, i1 false) #6
  call void @BrotliConvertBitDepthsToSymbols(i8* %40, i64 64, i16* %82) #6
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %37, i8 0, i64 64, i1 false) #6
  %901 = load i64, i64* %83, align 8
  store i64 %901, i64* %84, align 16
  %902 = load i64, i64* %87, align 16
  store i64 %902, i64* %88, align 16
  %903 = load i64, i64* %91, align 8
  store i64 %903, i64* %92, align 16
  %904 = load i64, i64* %47, align 16
  store i64 %904, i64* %94, align 16
  %905 = load i64, i64* %55, align 8
  store i64 %905, i64* %96, align 16
  %906 = load i8, i8* %26, align 16
  store i8 %906, i8* %89, align 16
  %907 = load i8, i8* %50, align 8
  store i8 %907, i8* %97, align 16
  %908 = load i8, i8* %58, align 16
  store i8 %908, i8* %98, align 16
  %909 = load i8, i8* %99, align 1
  store i8 %909, i8* %100, align 8
  %910 = load i8, i8* %101, align 1
  store i8 %910, i8* %102, align 8
  %911 = load i8, i8* %103, align 1
  store i8 %911, i8* %104, align 8
  %912 = load i8, i8* %105, align 2
  store i8 %912, i8* %106, align 16
  %913 = load i8, i8* %107, align 2
  store i8 %913, i8* %108, align 16
  %914 = load i8, i8* %109, align 2
  store i8 %914, i8* %110, align 16
  %915 = load i8, i8* %111, align 1
  store i8 %915, i8* %112, align 8
  %916 = load i8, i8* %113, align 1
  store i8 %916, i8* %114, align 8
  %917 = load i8, i8* %115, align 1
  store i8 %917, i8* %116, align 8
  %918 = load i8, i8* %117, align 4
  store i8 %918, i8* %118, align 16
  %919 = load i8, i8* %119, align 4
  store i8 %919, i8* %120, align 16
  %920 = load i8, i8* %121, align 4
  store i8 %920, i8* %122, align 16
  %921 = load i8, i8* %123, align 1
  store i8 %921, i8* %124, align 8
  %922 = load i8, i8* %125, align 1
  store i8 %922, i8* %126, align 8
  %923 = load i8, i8* %127, align 1
  store i8 %923, i8* %128, align 8
  %924 = load i8, i8* %129, align 2
  store i8 %924, i8* %130, align 16
  %925 = load i8, i8* %131, align 2
  store i8 %925, i8* %132, align 16
  %926 = load i8, i8* %133, align 2
  store i8 %926, i8* %134, align 16
  %927 = load i8, i8* %135, align 1
  store i8 %927, i8* %136, align 8
  %928 = load i8, i8* %137, align 1
  store i8 %928, i8* %138, align 8
  %929 = load i8, i8* %139, align 1
  store i8 %929, i8* %140, align 8
  call void @BrotliStoreHuffmanTree(i8* nonnull %37, i64 704, %struct.HuffmanTree* nonnull %39, i64* %6, i8* %7) #6
  call void @BrotliStoreHuffmanTree(i8* %40, i64 64, %struct.HuffmanTree* nonnull %39, i64* %6, i8* %7) #6
  call void @llvm.lifetime.end.p0i8(i64 128, i8* nonnull %38) #6
  call void @llvm.lifetime.end.p0i8(i64 704, i8* nonnull %37) #6
  call void @llvm.lifetime.end.p0i8(i64 1032, i8* nonnull %36) #6
  br i1 %844, label %1054, label %930

930:                                              ; preds = %891
  %931 = load i64, i64* %6, align 8, !alias.scope !64, !noalias !67
  br label %932

932:                                              ; preds = %1049, %930
  %933 = phi i64 [ %1050, %1049 ], [ %931, %930 ]
  %934 = phi i8* [ %1051, %1049 ], [ %4, %930 ]
  %935 = phi i64 [ %1052, %1049 ], [ 0, %930 ]
  %936 = getelementptr inbounds i32, i32* %3, i64 %935
  %937 = load i32, i32* %936, align 4
  %938 = and i32 %937, 255
  %939 = lshr i32 %937, 8
  %940 = zext i32 %938 to i64
  %941 = getelementptr inbounds [128 x i8], [128 x i8]* %15, i64 0, i64 %940
  %942 = load i8, i8* %941, align 1
  %943 = zext i8 %942 to i64
  %944 = getelementptr inbounds [128 x i16], [128 x i16]* %16, i64 0, i64 %940
  %945 = load i16, i16* %944, align 2
  %946 = zext i16 %945 to i64
  %947 = lshr i64 %933, 3
  %948 = getelementptr inbounds i8, i8* %7, i64 %947
  %949 = load i8, i8* %948, align 1, !alias.scope !67, !noalias !64
  %950 = zext i8 %949 to i64
  %951 = and i64 %933, 7
  %952 = shl i64 %946, %951
  %953 = or i64 %952, %950
  %954 = bitcast i8* %948 to i64*
  store i64 %953, i64* %954, align 8, !alias.scope !67, !noalias !64
  %955 = add i64 %933, %943
  %956 = getelementptr inbounds [128 x i32], [128 x i32]* @StoreCommands.kNumExtraBits, i64 0, i64 %940
  %957 = load i32, i32* %956, align 4
  %958 = zext i32 %957 to i64
  %959 = zext i32 %939 to i64
  %960 = lshr i64 %955, 3
  %961 = getelementptr inbounds i8, i8* %7, i64 %960
  %962 = load i8, i8* %961, align 1, !alias.scope !69, !noalias !72
  %963 = zext i8 %962 to i64
  %964 = and i64 %955, 7
  %965 = shl i64 %959, %964
  %966 = or i64 %965, %963
  %967 = bitcast i8* %961 to i64*
  store i64 %966, i64* %967, align 8, !alias.scope !69, !noalias !72
  %968 = add i64 %955, %958
  store i64 %968, i64* %6, align 8, !alias.scope !72, !noalias !69
  %969 = icmp ult i32 %938, 24
  br i1 %969, label %970, label %1049

970:                                              ; preds = %932
  %971 = getelementptr inbounds [24 x i32], [24 x i32]* @StoreCommands.kInsertOffset, i64 0, i64 %940
  %972 = load i32, i32* %971, align 4
  %973 = add i32 %972, %939
  %974 = icmp eq i32 %973, 0
  br i1 %974, label %1049, label %975

975:                                              ; preds = %970
  %976 = add i32 %972, -1
  %977 = and i32 %973, 1
  %978 = sub nsw i32 0, %939
  %979 = icmp eq i32 %976, %978
  br i1 %979, label %1024, label %980

980:                                              ; preds = %975
  %981 = sub i32 %973, %977
  br label %982

982:                                              ; preds = %982, %980
  %983 = phi i64 [ %968, %980 ], [ %1020, %982 ]
  %984 = phi i8* [ %934, %980 ], [ %1021, %982 ]
  %985 = phi i32 [ %981, %980 ], [ %1022, %982 ]
  %986 = load i8, i8* %984, align 1
  %987 = zext i8 %986 to i64
  %988 = getelementptr inbounds [256 x i8], [256 x i8]* %12, i64 0, i64 %987
  %989 = load i8, i8* %988, align 1
  %990 = zext i8 %989 to i64
  %991 = getelementptr inbounds [256 x i16], [256 x i16]* %13, i64 0, i64 %987
  %992 = load i16, i16* %991, align 2
  %993 = zext i16 %992 to i64
  %994 = lshr i64 %983, 3
  %995 = getelementptr inbounds i8, i8* %7, i64 %994
  %996 = load i8, i8* %995, align 1, !alias.scope !74, !noalias !77
  %997 = zext i8 %996 to i64
  %998 = and i64 %983, 7
  %999 = shl i64 %993, %998
  %1000 = or i64 %999, %997
  %1001 = bitcast i8* %995 to i64*
  store i64 %1000, i64* %1001, align 8, !alias.scope !74, !noalias !77
  %1002 = add i64 %983, %990
  store i64 %1002, i64* %6, align 8, !alias.scope !77, !noalias !74
  %1003 = getelementptr inbounds i8, i8* %984, i64 1
  %1004 = load i8, i8* %1003, align 1
  %1005 = zext i8 %1004 to i64
  %1006 = getelementptr inbounds [256 x i8], [256 x i8]* %12, i64 0, i64 %1005
  %1007 = load i8, i8* %1006, align 1
  %1008 = zext i8 %1007 to i64
  %1009 = getelementptr inbounds [256 x i16], [256 x i16]* %13, i64 0, i64 %1005
  %1010 = load i16, i16* %1009, align 2
  %1011 = zext i16 %1010 to i64
  %1012 = lshr i64 %1002, 3
  %1013 = getelementptr inbounds i8, i8* %7, i64 %1012
  %1014 = load i8, i8* %1013, align 1, !alias.scope !74, !noalias !77
  %1015 = zext i8 %1014 to i64
  %1016 = and i64 %1002, 7
  %1017 = shl i64 %1011, %1016
  %1018 = or i64 %1017, %1015
  %1019 = bitcast i8* %1013 to i64*
  store i64 %1018, i64* %1019, align 8, !alias.scope !74, !noalias !77
  %1020 = add i64 %1002, %1008
  store i64 %1020, i64* %6, align 8, !alias.scope !77, !noalias !74
  %1021 = getelementptr inbounds i8, i8* %984, i64 2
  %1022 = add i32 %985, -2
  %1023 = icmp eq i32 %1022, 0
  br i1 %1023, label %1024, label %982

1024:                                             ; preds = %982, %975
  %1025 = phi i64 [ undef, %975 ], [ %1020, %982 ]
  %1026 = phi i8* [ undef, %975 ], [ %1021, %982 ]
  %1027 = phi i64 [ %968, %975 ], [ %1020, %982 ]
  %1028 = phi i8* [ %934, %975 ], [ %1021, %982 ]
  %1029 = icmp eq i32 %977, 0
  br i1 %1029, label %1049, label %1030

1030:                                             ; preds = %1024
  %1031 = load i8, i8* %1028, align 1
  %1032 = zext i8 %1031 to i64
  %1033 = getelementptr inbounds [256 x i8], [256 x i8]* %12, i64 0, i64 %1032
  %1034 = load i8, i8* %1033, align 1
  %1035 = zext i8 %1034 to i64
  %1036 = getelementptr inbounds [256 x i16], [256 x i16]* %13, i64 0, i64 %1032
  %1037 = load i16, i16* %1036, align 2
  %1038 = zext i16 %1037 to i64
  %1039 = lshr i64 %1027, 3
  %1040 = getelementptr inbounds i8, i8* %7, i64 %1039
  %1041 = load i8, i8* %1040, align 1, !alias.scope !74, !noalias !77
  %1042 = zext i8 %1041 to i64
  %1043 = and i64 %1027, 7
  %1044 = shl i64 %1038, %1043
  %1045 = or i64 %1044, %1042
  %1046 = bitcast i8* %1040 to i64*
  store i64 %1045, i64* %1046, align 8, !alias.scope !74, !noalias !77
  %1047 = add i64 %1027, %1035
  store i64 %1047, i64* %6, align 8, !alias.scope !77, !noalias !74
  %1048 = getelementptr inbounds i8, i8* %1028, i64 1
  br label %1049

1049:                                             ; preds = %1030, %1024, %970, %932
  %1050 = phi i64 [ %968, %932 ], [ %968, %970 ], [ %1025, %1024 ], [ %1047, %1030 ]
  %1051 = phi i8* [ %934, %932 ], [ %934, %970 ], [ %1026, %1024 ], [ %1048, %1030 ]
  %1052 = add nuw i64 %935, 1
  %1053 = icmp eq i64 %1052, %745
  br i1 %1053, label %1054, label %932

1054:                                             ; preds = %1049, %891
  call void @llvm.lifetime.end.p0i8(i64 512, i8* nonnull %28) #6
  call void @llvm.lifetime.end.p0i8(i64 256, i8* nonnull %27) #6
  call void @llvm.lifetime.end.p0i8(i64 128, i8* nonnull %26) #6
  call void @llvm.lifetime.end.p0i8(i64 1024, i8* nonnull %23) #6
  call void @llvm.lifetime.end.p0i8(i64 512, i8* nonnull %25) #6
  call void @llvm.lifetime.end.p0i8(i64 256, i8* nonnull %24) #6
  br label %1103

1055:                                             ; preds = %738
  %1056 = load i64, i64* %6, align 8, !alias.scope !79, !noalias !82
  %1057 = lshr i64 %1056, 3
  %1058 = getelementptr inbounds i8, i8* %7, i64 %1057
  %1059 = load i8, i8* %1058, align 1, !alias.scope !82, !noalias !79
  %1060 = zext i8 %1059 to i64
  %1061 = bitcast i8* %1058 to i64*
  store i64 %1060, i64* %1061, align 8, !alias.scope !82, !noalias !79
  %1062 = add i64 %1056, 1
  %1063 = icmp ult i64 %147, 65537
  %1064 = select i1 %1063, i64 4, i64 5
  %1065 = add nsw i64 %1064, -4
  %1066 = lshr i64 %1062, 3
  %1067 = getelementptr inbounds i8, i8* %7, i64 %1066
  %1068 = load i8, i8* %1067, align 1, !alias.scope !84, !noalias !87
  %1069 = zext i8 %1068 to i64
  %1070 = and i64 %1062, 7
  %1071 = shl i64 %1065, %1070
  %1072 = or i64 %1071, %1069
  %1073 = bitcast i8* %1067 to i64*
  store i64 %1072, i64* %1073, align 8, !alias.scope !84, !noalias !87
  %1074 = add i64 %1056, 3
  %1075 = shl nuw nsw i64 %1064, 2
  %1076 = add nsw i64 %147, -1
  %1077 = lshr i64 %1074, 3
  %1078 = getelementptr inbounds i8, i8* %7, i64 %1077
  %1079 = load i8, i8* %1078, align 1, !alias.scope !89, !noalias !92
  %1080 = zext i8 %1079 to i64
  %1081 = and i64 %1074, 7
  %1082 = shl i64 %1076, %1081
  %1083 = or i64 %1082, %1080
  %1084 = bitcast i8* %1078 to i64*
  store i64 %1083, i64* %1084, align 8, !alias.scope !89, !noalias !92
  %1085 = add i64 %1074, %1075
  %1086 = lshr i64 %1085, 3
  %1087 = getelementptr inbounds i8, i8* %7, i64 %1086
  %1088 = load i8, i8* %1087, align 1, !alias.scope !94, !noalias !97
  %1089 = zext i8 %1088 to i64
  %1090 = and i64 %1085, 7
  %1091 = shl i64 1, %1090
  %1092 = or i64 %1091, %1089
  %1093 = bitcast i8* %1087 to i64*
  store i64 %1092, i64* %1093, align 8, !alias.scope !94, !noalias !97
  %1094 = add i64 %1085, 8
  %1095 = and i64 %1094, 4294967288
  store i64 %1095, i64* %6, align 8
  %1096 = lshr exact i64 %1095, 3
  %1097 = getelementptr inbounds i8, i8* %7, i64 %1096
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %1097, i8* align 1 %144, i64 %147, i1 false) #6
  %1098 = shl nuw nsw i64 %147, 3
  %1099 = load i64, i64* %6, align 8
  %1100 = add i64 %1099, %1098
  store i64 %1100, i64* %6, align 8
  %1101 = lshr i64 %1100, 3
  %1102 = getelementptr inbounds i8, i8* %7, i64 %1101
  store i8 0, i8* %1102, align 1
  br label %1103

1103:                                             ; preds = %1055, %1054
  %1104 = sub i64 %145, %147
  %1105 = icmp eq i64 %1104, 0
  br i1 %1105, label %1106, label %143

1106:                                             ; preds = %1103, %8
  ret void

1107:                                             ; preds = %252
  %1108 = getelementptr inbounds i8, i8* %244, i64 1
  %1109 = getelementptr inbounds i8, i8* %216, i64 %253
  %1110 = load i8, i8* %1109, align 1
  %1111 = load i8, i8* %1108, align 1
  %1112 = icmp eq i8 %1110, %1111
  br i1 %1112, label %1113, label %255, !prof !33

1113:                                             ; preds = %1107
  %1114 = add i64 %243, 2
  %1115 = icmp eq i64 %245, 2
  br i1 %1115, label %255, label %1116

1116:                                             ; preds = %1113
  %1117 = getelementptr inbounds i8, i8* %244, i64 2
  %1118 = getelementptr inbounds i8, i8* %216, i64 %1114
  %1119 = load i8, i8* %1118, align 1
  %1120 = load i8, i8* %1117, align 1
  %1121 = icmp eq i8 %1119, %1120
  br i1 %1121, label %1122, label %255, !prof !33

1122:                                             ; preds = %1116
  %1123 = add i64 %243, 3
  %1124 = icmp eq i64 %245, 3
  br i1 %1124, label %255, label %1125

1125:                                             ; preds = %1122
  %1126 = getelementptr inbounds i8, i8* %244, i64 3
  %1127 = getelementptr inbounds i8, i8* %216, i64 %1123
  %1128 = load i8, i8* %1127, align 1
  %1129 = load i8, i8* %1126, align 1
  %1130 = icmp eq i8 %1128, %1129
  br i1 %1130, label %1131, label %255, !prof !33

1131:                                             ; preds = %1125
  %1132 = add i64 %243, 4
  %1133 = icmp eq i64 %245, 4
  br i1 %1133, label %255, label %1134

1134:                                             ; preds = %1131
  %1135 = getelementptr inbounds i8, i8* %244, i64 4
  %1136 = getelementptr inbounds i8, i8* %216, i64 %1132
  %1137 = load i8, i8* %1136, align 1
  %1138 = load i8, i8* %1135, align 1
  %1139 = icmp eq i8 %1137, %1138
  br i1 %1139, label %1140, label %255, !prof !33

1140:                                             ; preds = %1134
  %1141 = add i64 %243, 5
  %1142 = icmp eq i64 %245, 5
  br i1 %1142, label %255, label %1143

1143:                                             ; preds = %1140
  %1144 = getelementptr inbounds i8, i8* %244, i64 5
  %1145 = getelementptr inbounds i8, i8* %216, i64 %1141
  %1146 = load i8, i8* %1145, align 1
  %1147 = load i8, i8* %1144, align 1
  %1148 = icmp eq i8 %1146, %1147
  br i1 %1148, label %1149, label %255, !prof !33

1149:                                             ; preds = %1143
  %1150 = add i64 %243, 6
  %1151 = icmp eq i64 %245, 6
  br i1 %1151, label %255, label %1152

1152:                                             ; preds = %1149
  %1153 = getelementptr inbounds i8, i8* %244, i64 6
  %1154 = getelementptr inbounds i8, i8* %216, i64 %1150
  %1155 = load i8, i8* %1154, align 1
  %1156 = load i8, i8* %1153, align 1
  %1157 = icmp eq i8 %1155, %1156
  %1158 = add i64 %243, 7
  %1159 = select i1 %1157, i64 %1158, i64 %1150, !prof !33
  br label %255

1160:                                             ; preds = %478
  %1161 = getelementptr inbounds i8, i8* %470, i64 1
  %1162 = getelementptr inbounds i8, i8* %442, i64 %479
  %1163 = load i8, i8* %1162, align 1
  %1164 = load i8, i8* %1161, align 1
  %1165 = icmp eq i8 %1163, %1164
  br i1 %1165, label %1166, label %481, !prof !33

1166:                                             ; preds = %1160
  %1167 = add i64 %469, 2
  %1168 = icmp eq i64 %471, 2
  br i1 %1168, label %481, label %1169

1169:                                             ; preds = %1166
  %1170 = getelementptr inbounds i8, i8* %470, i64 2
  %1171 = getelementptr inbounds i8, i8* %442, i64 %1167
  %1172 = load i8, i8* %1171, align 1
  %1173 = load i8, i8* %1170, align 1
  %1174 = icmp eq i8 %1172, %1173
  br i1 %1174, label %1175, label %481, !prof !33

1175:                                             ; preds = %1169
  %1176 = add i64 %469, 3
  %1177 = icmp eq i64 %471, 3
  br i1 %1177, label %481, label %1178

1178:                                             ; preds = %1175
  %1179 = getelementptr inbounds i8, i8* %470, i64 3
  %1180 = getelementptr inbounds i8, i8* %442, i64 %1176
  %1181 = load i8, i8* %1180, align 1
  %1182 = load i8, i8* %1179, align 1
  %1183 = icmp eq i8 %1181, %1182
  br i1 %1183, label %1184, label %481, !prof !33

1184:                                             ; preds = %1178
  %1185 = add i64 %469, 4
  %1186 = icmp eq i64 %471, 4
  br i1 %1186, label %481, label %1187

1187:                                             ; preds = %1184
  %1188 = getelementptr inbounds i8, i8* %470, i64 4
  %1189 = getelementptr inbounds i8, i8* %442, i64 %1185
  %1190 = load i8, i8* %1189, align 1
  %1191 = load i8, i8* %1188, align 1
  %1192 = icmp eq i8 %1190, %1191
  br i1 %1192, label %1193, label %481, !prof !33

1193:                                             ; preds = %1187
  %1194 = add i64 %469, 5
  %1195 = icmp eq i64 %471, 5
  br i1 %1195, label %481, label %1196

1196:                                             ; preds = %1193
  %1197 = getelementptr inbounds i8, i8* %470, i64 5
  %1198 = getelementptr inbounds i8, i8* %442, i64 %1194
  %1199 = load i8, i8* %1198, align 1
  %1200 = load i8, i8* %1197, align 1
  %1201 = icmp eq i8 %1199, %1200
  br i1 %1201, label %1202, label %481, !prof !33

1202:                                             ; preds = %1196
  %1203 = add i64 %469, 6
  %1204 = icmp eq i64 %471, 6
  br i1 %1204, label %481, label %1205

1205:                                             ; preds = %1202
  %1206 = getelementptr inbounds i8, i8* %470, i64 6
  %1207 = getelementptr inbounds i8, i8* %442, i64 %1203
  %1208 = load i8, i8* %1207, align 1
  %1209 = load i8, i8* %1206, align 1
  %1210 = icmp eq i8 %1208, %1209
  %1211 = add i64 %469, 7
  %1212 = select i1 %1210, i64 %1211, i64 %1203, !prof !33
  br label %481
}

; Function Attrs: noinline nounwind ssp uwtable
define internal fastcc void @BrotliCompressFragmentTwoPassImpl9(%struct.MemoryManager*, i8*, i64, i32*, i8*, i32* nocapture, i64*, i8*) unnamed_addr #2 {
  %9 = alloca [129 x %struct.HuffmanTree], align 16
  %10 = alloca [704 x i8], align 16
  %11 = alloca [64 x i16], align 16
  %12 = alloca [256 x i8], align 16
  %13 = alloca [256 x i16], align 16
  %14 = alloca [256 x i32], align 16
  %15 = alloca [128 x i8], align 16
  %16 = alloca [128 x i16], align 16
  %17 = alloca [128 x i32], align 16
  %18 = icmp eq i64 %2, 0
  br i1 %18, label %1106, label %19

19:                                               ; preds = %8
  %20 = ptrtoint i32* %3 to i64
  %21 = ptrtoint i8* %4 to i64
  %22 = ptrtoint i8* %1 to i64
  %23 = bitcast [256 x i32]* %14 to i8*
  %24 = getelementptr inbounds [256 x i8], [256 x i8]* %12, i64 0, i64 0
  %25 = bitcast [256 x i16]* %13 to i8*
  %26 = getelementptr inbounds [128 x i8], [128 x i8]* %15, i64 0, i64 0
  %27 = bitcast [128 x i16]* %16 to i8*
  %28 = bitcast [128 x i32]* %17 to i8*
  %29 = getelementptr inbounds [256 x i32], [256 x i32]* %14, i64 0, i64 0
  %30 = getelementptr inbounds [256 x i16], [256 x i16]* %13, i64 0, i64 0
  %31 = getelementptr inbounds [128 x i32], [128 x i32]* %17, i64 0, i64 1
  %32 = getelementptr inbounds [128 x i32], [128 x i32]* %17, i64 0, i64 2
  %33 = getelementptr inbounds [128 x i32], [128 x i32]* %17, i64 0, i64 64
  %34 = getelementptr inbounds [128 x i32], [128 x i32]* %17, i64 0, i64 84
  %35 = getelementptr inbounds [128 x i32], [128 x i32]* %17, i64 0, i64 0
  %36 = bitcast [129 x %struct.HuffmanTree]* %9 to i8*
  %37 = getelementptr inbounds [704 x i8], [704 x i8]* %10, i64 0, i64 0
  %38 = bitcast [64 x i16]* %11 to i8*
  %39 = getelementptr inbounds [129 x %struct.HuffmanTree], [129 x %struct.HuffmanTree]* %9, i64 0, i64 0
  %40 = getelementptr inbounds [128 x i8], [128 x i8]* %15, i64 0, i64 64
  %41 = getelementptr inbounds [128 x i8], [128 x i8]* %15, i64 0, i64 24
  %42 = getelementptr inbounds [704 x i8], [704 x i8]* %10, i64 0, i64 24
  %43 = bitcast [128 x i8]* %15 to i64*
  %44 = bitcast i8* %42 to i64*
  %45 = getelementptr inbounds [704 x i8], [704 x i8]* %10, i64 0, i64 32
  %46 = getelementptr inbounds [128 x i8], [128 x i8]* %15, i64 0, i64 48
  %47 = bitcast i8* %46 to i64*
  %48 = bitcast i8* %45 to i64*
  %49 = getelementptr inbounds [704 x i8], [704 x i8]* %10, i64 0, i64 40
  %50 = getelementptr inbounds [128 x i8], [128 x i8]* %15, i64 0, i64 8
  %51 = bitcast i8* %50 to i64*
  %52 = bitcast i8* %49 to i64*
  %53 = getelementptr inbounds [704 x i8], [704 x i8]* %10, i64 0, i64 48
  %54 = getelementptr inbounds [128 x i8], [128 x i8]* %15, i64 0, i64 56
  %55 = bitcast i8* %54 to i64*
  %56 = bitcast i8* %53 to i64*
  %57 = getelementptr inbounds [704 x i8], [704 x i8]* %10, i64 0, i64 56
  %58 = getelementptr inbounds [128 x i8], [128 x i8]* %15, i64 0, i64 16
  %59 = bitcast i8* %58 to i64*
  %60 = bitcast i8* %57 to i64*
  %61 = getelementptr inbounds [64 x i16], [64 x i16]* %11, i64 0, i64 0
  %62 = getelementptr inbounds [64 x i16], [64 x i16]* %11, i64 0, i64 24
  %63 = bitcast i16* %62 to i8*
  %64 = getelementptr inbounds [128 x i16], [128 x i16]* %16, i64 0, i64 8
  %65 = bitcast i16* %64 to i8*
  %66 = getelementptr inbounds [64 x i16], [64 x i16]* %11, i64 0, i64 40
  %67 = bitcast i16* %66 to i8*
  %68 = getelementptr inbounds [128 x i16], [128 x i16]* %16, i64 0, i64 16
  %69 = bitcast i16* %68 to i8*
  %70 = getelementptr inbounds [64 x i16], [64 x i16]* %11, i64 0, i64 56
  %71 = bitcast i16* %70 to i8*
  %72 = getelementptr inbounds [128 x i16], [128 x i16]* %16, i64 0, i64 24
  %73 = bitcast i16* %72 to i8*
  %74 = getelementptr inbounds [128 x i16], [128 x i16]* %16, i64 0, i64 48
  %75 = bitcast i16* %74 to i8*
  %76 = getelementptr inbounds [64 x i16], [64 x i16]* %11, i64 0, i64 32
  %77 = bitcast i16* %76 to i8*
  %78 = getelementptr inbounds [128 x i16], [128 x i16]* %16, i64 0, i64 56
  %79 = bitcast i16* %78 to i8*
  %80 = getelementptr inbounds [64 x i16], [64 x i16]* %11, i64 0, i64 48
  %81 = bitcast i16* %80 to i8*
  %82 = getelementptr inbounds [128 x i16], [128 x i16]* %16, i64 0, i64 64
  %83 = bitcast i8* %41 to i64*
  %84 = bitcast [704 x i8]* %10 to i64*
  %85 = getelementptr inbounds [704 x i8], [704 x i8]* %10, i64 0, i64 64
  %86 = getelementptr inbounds [128 x i8], [128 x i8]* %15, i64 0, i64 32
  %87 = bitcast i8* %86 to i64*
  %88 = bitcast i8* %85 to i64*
  %89 = getelementptr inbounds [704 x i8], [704 x i8]* %10, i64 0, i64 128
  %90 = getelementptr inbounds [128 x i8], [128 x i8]* %15, i64 0, i64 40
  %91 = bitcast i8* %90 to i64*
  %92 = bitcast i8* %89 to i64*
  %93 = getelementptr inbounds [704 x i8], [704 x i8]* %10, i64 0, i64 192
  %94 = bitcast i8* %93 to i64*
  %95 = getelementptr inbounds [704 x i8], [704 x i8]* %10, i64 0, i64 384
  %96 = bitcast i8* %95 to i64*
  %97 = getelementptr inbounds [704 x i8], [704 x i8]* %10, i64 0, i64 256
  %98 = getelementptr inbounds [704 x i8], [704 x i8]* %10, i64 0, i64 448
  %99 = getelementptr inbounds [128 x i8], [128 x i8]* %15, i64 0, i64 1
  %100 = getelementptr inbounds [704 x i8], [704 x i8]* %10, i64 0, i64 136
  %101 = getelementptr inbounds [128 x i8], [128 x i8]* %15, i64 0, i64 9
  %102 = getelementptr inbounds [704 x i8], [704 x i8]* %10, i64 0, i64 264
  %103 = getelementptr inbounds [128 x i8], [128 x i8]* %15, i64 0, i64 17
  %104 = getelementptr inbounds [704 x i8], [704 x i8]* %10, i64 0, i64 456
  %105 = getelementptr inbounds [128 x i8], [128 x i8]* %15, i64 0, i64 2
  %106 = getelementptr inbounds [704 x i8], [704 x i8]* %10, i64 0, i64 144
  %107 = getelementptr inbounds [128 x i8], [128 x i8]* %15, i64 0, i64 10
  %108 = getelementptr inbounds [704 x i8], [704 x i8]* %10, i64 0, i64 272
  %109 = getelementptr inbounds [128 x i8], [128 x i8]* %15, i64 0, i64 18
  %110 = getelementptr inbounds [704 x i8], [704 x i8]* %10, i64 0, i64 464
  %111 = getelementptr inbounds [128 x i8], [128 x i8]* %15, i64 0, i64 3
  %112 = getelementptr inbounds [704 x i8], [704 x i8]* %10, i64 0, i64 152
  %113 = getelementptr inbounds [128 x i8], [128 x i8]* %15, i64 0, i64 11
  %114 = getelementptr inbounds [704 x i8], [704 x i8]* %10, i64 0, i64 280
  %115 = getelementptr inbounds [128 x i8], [128 x i8]* %15, i64 0, i64 19
  %116 = getelementptr inbounds [704 x i8], [704 x i8]* %10, i64 0, i64 472
  %117 = getelementptr inbounds [128 x i8], [128 x i8]* %15, i64 0, i64 4
  %118 = getelementptr inbounds [704 x i8], [704 x i8]* %10, i64 0, i64 160
  %119 = getelementptr inbounds [128 x i8], [128 x i8]* %15, i64 0, i64 12
  %120 = getelementptr inbounds [704 x i8], [704 x i8]* %10, i64 0, i64 288
  %121 = getelementptr inbounds [128 x i8], [128 x i8]* %15, i64 0, i64 20
  %122 = getelementptr inbounds [704 x i8], [704 x i8]* %10, i64 0, i64 480
  %123 = getelementptr inbounds [128 x i8], [128 x i8]* %15, i64 0, i64 5
  %124 = getelementptr inbounds [704 x i8], [704 x i8]* %10, i64 0, i64 168
  %125 = getelementptr inbounds [128 x i8], [128 x i8]* %15, i64 0, i64 13
  %126 = getelementptr inbounds [704 x i8], [704 x i8]* %10, i64 0, i64 296
  %127 = getelementptr inbounds [128 x i8], [128 x i8]* %15, i64 0, i64 21
  %128 = getelementptr inbounds [704 x i8], [704 x i8]* %10, i64 0, i64 488
  %129 = getelementptr inbounds [128 x i8], [128 x i8]* %15, i64 0, i64 6
  %130 = getelementptr inbounds [704 x i8], [704 x i8]* %10, i64 0, i64 176
  %131 = getelementptr inbounds [128 x i8], [128 x i8]* %15, i64 0, i64 14
  %132 = getelementptr inbounds [704 x i8], [704 x i8]* %10, i64 0, i64 304
  %133 = getelementptr inbounds [128 x i8], [128 x i8]* %15, i64 0, i64 22
  %134 = getelementptr inbounds [704 x i8], [704 x i8]* %10, i64 0, i64 496
  %135 = getelementptr inbounds [128 x i8], [128 x i8]* %15, i64 0, i64 7
  %136 = getelementptr inbounds [704 x i8], [704 x i8]* %10, i64 0, i64 184
  %137 = getelementptr inbounds [128 x i8], [128 x i8]* %15, i64 0, i64 15
  %138 = getelementptr inbounds [704 x i8], [704 x i8]* %10, i64 0, i64 312
  %139 = getelementptr inbounds [128 x i8], [128 x i8]* %15, i64 0, i64 23
  %140 = getelementptr inbounds [704 x i8], [704 x i8]* %10, i64 0, i64 504
  %141 = getelementptr inbounds i8, i8* %1, i64 4
  %142 = xor i64 %21, -1
  br label %143

143:                                              ; preds = %1103, %19
  %144 = phi i8* [ %1, %19 ], [ %148, %1103 ]
  %145 = phi i64 [ %2, %19 ], [ %1104, %1103 ]
  %146 = icmp ult i64 %145, 131072
  %147 = select i1 %146, i64 %145, i64 131072
  %148 = getelementptr inbounds i8, i8* %144, i64 %147
  %149 = icmp ugt i64 %147, 15
  br i1 %149, label %150, label %595, !prof !33

150:                                              ; preds = %143
  %151 = add nsw i64 %147, -4
  %152 = add i64 %145, -16
  %153 = icmp ult i64 %151, %152
  %154 = select i1 %153, i64 %151, i64 %152
  %155 = getelementptr inbounds i8, i8* %144, i64 %154
  %156 = ptrtoint i8* %148 to i64
  br label %157

157:                                              ; preds = %585, %150
  %158 = phi i64 [ %20, %150 ], [ %586, %585 ]
  %159 = phi i64 [ %21, %150 ], [ %318, %585 ]
  %160 = phi i8* [ %144, %150 ], [ %587, %585 ]
  %161 = phi i32 [ -1, %150 ], [ %588, %585 ]
  %162 = getelementptr inbounds i8, i8* %160, i64 1
  %163 = bitcast i8* %162 to i64*
  %164 = load i64, i64* %163, align 8
  %165 = sext i32 %161 to i64
  %166 = sub nsw i64 0, %165
  %167 = icmp slt i32 %161, 1
  br label %168

168:                                              ; preds = %206, %157
  %169 = phi i64 [ %164, %157 ], [ %181, %206 ]
  %170 = phi i32 [ 32, %157 ], [ %174, %206 ]
  %171 = phi i8* [ %162, %157 ], [ %177, %206 ]
  %172 = mul i64 %169, 2176830425094160384
  %173 = lshr i64 %172, 55
  %174 = add i32 %170, 1
  %175 = lshr i32 %170, 5
  %176 = zext i32 %175 to i64
  %177 = getelementptr inbounds i8, i8* %171, i64 %176
  %178 = icmp ugt i8* %177, %155
  br i1 %178, label %595, label %179, !prof !34

179:                                              ; preds = %168
  %180 = bitcast i8* %177 to i64*
  %181 = load i64, i64* %180, align 8
  %182 = getelementptr inbounds i8, i8* %171, i64 %166
  %183 = bitcast i8* %171 to i32*
  %184 = load i32, i32* %183, align 4
  %185 = bitcast i8* %182 to i32*
  %186 = load i32, i32* %185, align 4
  %187 = icmp ne i32 %184, %186
  %188 = or i1 %167, %187
  br i1 %188, label %194, label %189, !prof !35

189:                                              ; preds = %179
  %190 = ptrtoint i8* %171 to i64
  %191 = sub i64 %190, %22
  %192 = trunc i64 %191 to i32
  %193 = getelementptr inbounds i32, i32* %5, i64 %173
  store i32 %192, i32* %193, align 4
  br label %209

194:                                              ; preds = %179
  %195 = getelementptr inbounds i32, i32* %5, i64 %173
  %196 = load i32, i32* %195, align 4
  %197 = sext i32 %196 to i64
  %198 = getelementptr inbounds i8, i8* %1, i64 %197
  %199 = ptrtoint i8* %171 to i64
  %200 = sub i64 %199, %22
  %201 = trunc i64 %200 to i32
  store i32 %201, i32* %195, align 4
  %202 = load i32, i32* %183, align 4
  %203 = bitcast i8* %198 to i32*
  %204 = load i32, i32* %203, align 4
  %205 = icmp eq i32 %202, %204
  br i1 %205, label %207, label %206

206:                                              ; preds = %194, %209
  br label %168

207:                                              ; preds = %194
  %208 = ptrtoint i8* %171 to i64
  br label %209

209:                                              ; preds = %207, %189
  %210 = phi i64 [ %190, %189 ], [ %208, %207 ]
  %211 = phi i8* [ %182, %189 ], [ %198, %207 ]
  %212 = ptrtoint i8* %211 to i64
  %213 = sub i64 %210, %212
  %214 = icmp sgt i64 %213, 262128
  br i1 %214, label %206, label %215

215:                                              ; preds = %209
  %216 = getelementptr inbounds i8, i8* %211, i64 4
  %217 = getelementptr inbounds i8, i8* %171, i64 4
  %218 = sub i64 %156, %210
  %219 = add i64 %218, -4
  %220 = lshr i64 %219, 3
  %221 = icmp eq i64 %220, 0
  br i1 %221, label %242, label %222, !prof !34

222:                                              ; preds = %215, %232
  %223 = phi i64 [ %235, %232 ], [ %220, %215 ]
  %224 = phi i8* [ %233, %232 ], [ %217, %215 ]
  %225 = phi i64 [ %234, %232 ], [ 0, %215 ]
  %226 = bitcast i8* %224 to i64*
  %227 = load i64, i64* %226, align 8
  %228 = getelementptr inbounds i8, i8* %216, i64 %225
  %229 = bitcast i8* %228 to i64*
  %230 = load i64, i64* %229, align 8
  %231 = icmp eq i64 %227, %230
  br i1 %231, label %232, label %237, !prof !34

232:                                              ; preds = %222
  %233 = getelementptr inbounds i8, i8* %224, i64 8
  %234 = add nuw i64 %225, 8
  %235 = add nsw i64 %223, -1
  %236 = icmp eq i64 %235, 0
  br i1 %236, label %242, label %222, !prof !34

237:                                              ; preds = %222
  %238 = xor i64 %230, %227
  %239 = call i64 @llvm.cttz.i64(i64 %238, i1 true) #6, !range !36
  %240 = lshr i64 %239, 3
  %241 = or i64 %240, %225
  br label %255

242:                                              ; preds = %232, %215
  %243 = phi i64 [ 0, %215 ], [ %234, %232 ]
  %244 = phi i8* [ %217, %215 ], [ %233, %232 ]
  %245 = and i64 %219, 7
  %246 = icmp eq i64 %245, 0
  br i1 %246, label %255, label %247

247:                                              ; preds = %242
  %248 = getelementptr inbounds i8, i8* %216, i64 %243
  %249 = load i8, i8* %248, align 1
  %250 = load i8, i8* %244, align 1
  %251 = icmp eq i8 %249, %250
  br i1 %251, label %252, label %255, !prof !33

252:                                              ; preds = %247
  %253 = add i64 %243, 1
  %254 = icmp eq i64 %245, 1
  br i1 %254, label %255, label %1107

255:                                              ; preds = %1152, %252, %247, %1107, %1113, %1116, %1122, %1125, %1131, %1134, %1140, %1143, %1149, %242, %237
  %256 = phi i64 [ %241, %237 ], [ %243, %242 ], [ %253, %252 ], [ %243, %247 ], [ %253, %1107 ], [ %1114, %1113 ], [ %1114, %1116 ], [ %1123, %1122 ], [ %1123, %1125 ], [ %1132, %1131 ], [ %1132, %1134 ], [ %1141, %1140 ], [ %1141, %1143 ], [ %1150, %1149 ], [ %1159, %1152 ]
  %257 = add i64 %256, 4
  %258 = trunc i64 %213 to i32
  %259 = ptrtoint i8* %160 to i64
  %260 = sub i64 %210, %259
  %261 = trunc i64 %260 to i32
  %262 = getelementptr inbounds i8, i8* %171, i64 %257
  %263 = icmp ult i32 %261, 6
  br i1 %263, label %264, label %266

264:                                              ; preds = %255
  %265 = inttoptr i64 %158 to i32*
  store i32 %261, i32* %265, align 4
  br label %311

266:                                              ; preds = %255
  %267 = icmp ult i32 %261, 130
  br i1 %267, label %268, label %281

268:                                              ; preds = %266
  %269 = add nsw i32 %261, -2
  %270 = call i32 @llvm.ctlz.i32(i32 %269, i1 true) #6, !range !2
  %271 = sub nsw i32 30, %270
  %272 = lshr i32 %269, %271
  %273 = shl nsw i32 %271, 1
  %274 = add nuw nsw i32 %272, 2
  %275 = add i32 %274, %273
  %276 = shl i32 %272, %271
  %277 = sub i32 %269, %276
  %278 = shl i32 %277, 8
  %279 = or i32 %278, %275
  %280 = inttoptr i64 %158 to i32*
  store i32 %279, i32* %280, align 4
  br label %311

281:                                              ; preds = %266
  %282 = icmp ult i32 %261, 2114
  br i1 %282, label %283, label %293

283:                                              ; preds = %281
  %284 = add nsw i32 %261, -66
  %285 = call i32 @llvm.ctlz.i32(i32 %284, i1 true) #6, !range !2
  %286 = xor i32 %285, 31
  %287 = add nuw nsw i32 %286, 10
  %288 = shl i32 1, %286
  %289 = sub i32 %284, %288
  %290 = shl i32 %289, 8
  %291 = or i32 %290, %287
  %292 = inttoptr i64 %158 to i32*
  store i32 %291, i32* %292, align 4
  br label %311

293:                                              ; preds = %281
  %294 = icmp ult i32 %261, 6210
  br i1 %294, label %295, label %300

295:                                              ; preds = %293
  %296 = shl i32 %261, 8
  %297 = add nsw i32 %296, -541184
  %298 = or i32 %297, 21
  %299 = inttoptr i64 %158 to i32*
  store i32 %298, i32* %299, align 4
  br label %311

300:                                              ; preds = %293
  %301 = icmp ult i32 %261, 22594
  %302 = shl i32 %261, 8
  br i1 %301, label %303, label %307

303:                                              ; preds = %300
  %304 = add i32 %302, -1589760
  %305 = or i32 %304, 22
  %306 = inttoptr i64 %158 to i32*
  store i32 %305, i32* %306, align 4
  br label %311

307:                                              ; preds = %300
  %308 = add i32 %302, -5784064
  %309 = or i32 %308, 23
  %310 = inttoptr i64 %158 to i32*
  store i32 %309, i32* %310, align 4
  br label %311

311:                                              ; preds = %307, %303, %295, %283, %268, %264
  %312 = phi i32* [ %310, %307 ], [ %306, %303 ], [ %299, %295 ], [ %292, %283 ], [ %280, %268 ], [ %265, %264 ]
  %313 = getelementptr inbounds i32, i32* %312, i64 1
  %314 = inttoptr i64 %159 to i8*
  %315 = shl i64 %260, 32
  %316 = ashr exact i64 %315, 32
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %314, i8* align 1 %160, i64 %316, i1 false) #6
  %317 = getelementptr inbounds i8, i8* %314, i64 %316
  %318 = ptrtoint i8* %317 to i64
  %319 = icmp eq i32 %161, %258
  br i1 %319, label %336, label %320

320:                                              ; preds = %311
  %321 = add i32 %258, 3
  %322 = call i32 @llvm.ctlz.i32(i32 %321, i1 true) #6, !range !2
  %323 = xor i32 %322, 31
  %324 = add nsw i32 %323, -1
  %325 = lshr i32 %321, %324
  %326 = and i32 %325, 1
  %327 = or i32 %326, 2
  %328 = shl i32 %327, %324
  %329 = shl nuw nsw i32 %323, 1
  %330 = add nsw i32 %329, -4
  %331 = or i32 %326, %330
  %332 = add nsw i32 %331, 80
  %333 = sub i32 %321, %328
  %334 = shl i32 %333, 8
  %335 = or i32 %334, %332
  br label %336

336:                                              ; preds = %320, %311
  %337 = phi i32 [ %335, %320 ], [ 64, %311 ]
  %338 = phi i32 [ %258, %320 ], [ %161, %311 ]
  store i32 %337, i32* %313, align 4
  %339 = getelementptr inbounds i32, i32* %312, i64 2
  %340 = icmp ult i64 %257, 12
  br i1 %340, label %341, label %344

341:                                              ; preds = %336
  %342 = trunc i64 %257 to i32
  %343 = add nuw nsw i32 %342, 20
  store i32 %343, i32* %339, align 4
  br label %393

344:                                              ; preds = %336
  %345 = icmp ult i64 %257, 72
  br i1 %345, label %346, label %361

346:                                              ; preds = %344
  %347 = add nsw i64 %256, -4
  %348 = trunc i64 %347 to i32
  %349 = call i32 @llvm.ctlz.i32(i32 %348, i1 true) #6, !range !2
  %350 = sub nsw i32 30, %349
  %351 = zext i32 %350 to i64
  %352 = lshr i64 %347, %351
  %353 = shl nuw nsw i64 %351, 1
  %354 = add nuw nsw i64 %352, 28
  %355 = add nuw nsw i64 %354, %353
  %356 = shl i64 %352, %351
  %357 = sub i64 %347, %356
  %358 = shl i64 %357, 8
  %359 = or i64 %358, %355
  %360 = trunc i64 %359 to i32
  store i32 %360, i32* %339, align 4
  br label %393

361:                                              ; preds = %344
  %362 = icmp ult i64 %257, 136
  br i1 %362, label %363, label %372

363:                                              ; preds = %361
  %364 = add nsw i64 %256, -4
  %365 = lshr i64 %364, 5
  %366 = add nuw nsw i64 %365, 54
  %367 = shl i64 %364, 8
  %368 = and i64 %367, 7936
  %369 = or i64 %366, %368
  %370 = trunc i64 %369 to i32
  store i32 %370, i32* %339, align 4
  %371 = getelementptr inbounds i32, i32* %312, i64 3
  store i32 64, i32* %371, align 4
  br label %393

372:                                              ; preds = %361
  %373 = icmp ult i64 %257, 2120
  br i1 %373, label %374, label %387

374:                                              ; preds = %372
  %375 = add nsw i64 %256, -68
  %376 = trunc i64 %375 to i32
  %377 = call i32 @llvm.ctlz.i32(i32 %376, i1 true) #6, !range !2
  %378 = xor i32 %377, 31
  %379 = zext i32 %378 to i64
  %380 = add nuw nsw i64 %379, 52
  %381 = shl i64 1, %379
  %382 = sub i64 %375, %381
  %383 = shl i64 %382, 8
  %384 = or i64 %383, %380
  %385 = trunc i64 %384 to i32
  store i32 %385, i32* %339, align 4
  %386 = getelementptr inbounds i32, i32* %312, i64 3
  store i32 64, i32* %386, align 4
  br label %393

387:                                              ; preds = %372
  %388 = trunc i64 %257 to i32
  %389 = shl i32 %388, 8
  %390 = add i32 %389, -542720
  %391 = or i32 %390, 63
  store i32 %391, i32* %339, align 4
  %392 = getelementptr inbounds i32, i32* %312, i64 3
  store i32 64, i32* %392, align 4
  br label %393

393:                                              ; preds = %387, %374, %363, %346, %341
  %394 = phi i64 [ 4, %387 ], [ 4, %374 ], [ 4, %363 ], [ 3, %346 ], [ 3, %341 ]
  %395 = getelementptr inbounds i32, i32* %312, i64 %394
  %396 = ptrtoint i32* %395 to i64
  %397 = icmp ult i8* %262, %155
  br i1 %397, label %398, label %592, !prof !33

398:                                              ; preds = %393
  %399 = getelementptr inbounds i8, i8* %262, i64 -3
  %400 = bitcast i8* %399 to i64*
  %401 = load i64, i64* %400, align 8
  %402 = lshr i64 %401, 24
  %403 = mul i64 %402, 2176830425094160384
  %404 = mul i64 %401, 2176830425094160384
  %405 = lshr i64 %404, 55
  %406 = ptrtoint i8* %262 to i64
  %407 = sub i64 %406, %22
  %408 = trunc i64 %407 to i32
  %409 = getelementptr inbounds i32, i32* %5, i64 %405
  %410 = lshr i64 %401, 8
  %411 = mul i64 %410, 2176830425094160384
  %412 = lshr i64 %411, 55
  %413 = add i32 %408, -2
  %414 = getelementptr inbounds i32, i32* %5, i64 %412
  store i32 %413, i32* %414, align 4
  %415 = add i32 %408, -1
  store i32 %415, i32* %409, align 4
  %416 = lshr i64 %403, 55
  %417 = getelementptr inbounds i32, i32* %5, i64 %416
  %418 = load i32, i32* %417, align 4
  store i32 %408, i32* %417, align 4
  %419 = sext i32 %418 to i64
  %420 = getelementptr inbounds i8, i8* %1, i64 %419
  %421 = ptrtoint i8* %420 to i64
  %422 = sub i64 %406, %421
  %423 = icmp slt i64 %422, 262129
  br i1 %423, label %424, label %585

424:                                              ; preds = %398
  %425 = bitcast i8* %262 to i32*
  %426 = load i32, i32* %425, align 4
  %427 = bitcast i8* %420 to i32*
  %428 = load i32, i32* %427, align 4
  %429 = icmp eq i32 %426, %428
  br i1 %429, label %436, label %585

430:                                              ; preds = %551
  %431 = bitcast i8* %484 to i32*
  %432 = load i32, i32* %431, align 4
  %433 = bitcast i8* %578 to i32*
  %434 = load i32, i32* %433, align 4
  %435 = icmp eq i32 %432, %434
  br i1 %435, label %436, label %582

436:                                              ; preds = %424, %430
  %437 = phi i8* [ %484, %430 ], [ %262, %424 ]
  %438 = phi i64 [ %577, %430 ], [ %419, %424 ]
  %439 = phi i64 [ %559, %430 ], [ %406, %424 ]
  %440 = phi i64 [ %580, %430 ], [ %422, %424 ]
  %441 = phi i64 [ %549, %430 ], [ %396, %424 ]
  %442 = getelementptr inbounds i8, i8* %141, i64 %438
  %443 = getelementptr inbounds i8, i8* %437, i64 4
  %444 = sub i64 %156, %439
  %445 = add i64 %444, -4
  %446 = lshr i64 %445, 3
  %447 = icmp eq i64 %446, 0
  br i1 %447, label %468, label %448, !prof !34

448:                                              ; preds = %436, %458
  %449 = phi i64 [ %461, %458 ], [ %446, %436 ]
  %450 = phi i8* [ %459, %458 ], [ %443, %436 ]
  %451 = phi i64 [ %460, %458 ], [ 0, %436 ]
  %452 = bitcast i8* %450 to i64*
  %453 = load i64, i64* %452, align 8
  %454 = getelementptr inbounds i8, i8* %442, i64 %451
  %455 = bitcast i8* %454 to i64*
  %456 = load i64, i64* %455, align 8
  %457 = icmp eq i64 %453, %456
  br i1 %457, label %458, label %463, !prof !34

458:                                              ; preds = %448
  %459 = getelementptr inbounds i8, i8* %450, i64 8
  %460 = add nuw i64 %451, 8
  %461 = add nsw i64 %449, -1
  %462 = icmp eq i64 %461, 0
  br i1 %462, label %468, label %448, !prof !34

463:                                              ; preds = %448
  %464 = xor i64 %456, %453
  %465 = call i64 @llvm.cttz.i64(i64 %464, i1 true) #6, !range !36
  %466 = lshr i64 %465, 3
  %467 = or i64 %466, %451
  br label %481

468:                                              ; preds = %458, %436
  %469 = phi i64 [ 0, %436 ], [ %460, %458 ]
  %470 = phi i8* [ %443, %436 ], [ %459, %458 ]
  %471 = and i64 %445, 7
  %472 = icmp eq i64 %471, 0
  br i1 %472, label %481, label %473

473:                                              ; preds = %468
  %474 = getelementptr inbounds i8, i8* %442, i64 %469
  %475 = load i8, i8* %474, align 1
  %476 = load i8, i8* %470, align 1
  %477 = icmp eq i8 %475, %476
  br i1 %477, label %478, label %481, !prof !33

478:                                              ; preds = %473
  %479 = add i64 %469, 1
  %480 = icmp eq i64 %471, 1
  br i1 %480, label %481, label %1160

481:                                              ; preds = %1205, %478, %473, %1160, %1166, %1169, %1175, %1178, %1184, %1187, %1193, %1196, %1202, %468, %463
  %482 = phi i64 [ %467, %463 ], [ %469, %468 ], [ %479, %478 ], [ %469, %473 ], [ %479, %1160 ], [ %1167, %1166 ], [ %1167, %1169 ], [ %1176, %1175 ], [ %1176, %1178 ], [ %1185, %1184 ], [ %1185, %1187 ], [ %1194, %1193 ], [ %1194, %1196 ], [ %1203, %1202 ], [ %1212, %1205 ]
  %483 = add i64 %482, 4
  %484 = getelementptr inbounds i8, i8* %437, i64 %483
  %485 = trunc i64 %440 to i32
  %486 = icmp ult i64 %483, 10
  br i1 %486, label %487, label %491

487:                                              ; preds = %481
  %488 = trunc i64 %483 to i32
  %489 = add nuw nsw i32 %488, 38
  %490 = inttoptr i64 %441 to i32*
  store i32 %489, i32* %490, align 4
  br label %530

491:                                              ; preds = %481
  %492 = icmp ult i64 %483, 134
  br i1 %492, label %493, label %509

493:                                              ; preds = %491
  %494 = add nsw i64 %482, -2
  %495 = trunc i64 %494 to i32
  %496 = call i32 @llvm.ctlz.i32(i32 %495, i1 true) #6, !range !2
  %497 = sub nsw i32 30, %496
  %498 = zext i32 %497 to i64
  %499 = lshr i64 %494, %498
  %500 = shl nuw nsw i64 %498, 1
  %501 = add nuw nsw i64 %499, 44
  %502 = add nuw nsw i64 %501, %500
  %503 = shl i64 %499, %498
  %504 = sub i64 %494, %503
  %505 = shl i64 %504, 8
  %506 = or i64 %505, %502
  %507 = trunc i64 %506 to i32
  %508 = inttoptr i64 %441 to i32*
  store i32 %507, i32* %508, align 4
  br label %530

509:                                              ; preds = %491
  %510 = icmp ult i64 %483, 2118
  br i1 %510, label %511, label %524

511:                                              ; preds = %509
  %512 = add nsw i64 %482, -66
  %513 = trunc i64 %512 to i32
  %514 = call i32 @llvm.ctlz.i32(i32 %513, i1 true) #6, !range !2
  %515 = xor i32 %514, 31
  %516 = zext i32 %515 to i64
  %517 = add nuw nsw i64 %516, 52
  %518 = shl i64 1, %516
  %519 = sub i64 %512, %518
  %520 = shl i64 %519, 8
  %521 = or i64 %520, %517
  %522 = trunc i64 %521 to i32
  %523 = inttoptr i64 %441 to i32*
  store i32 %522, i32* %523, align 4
  br label %530

524:                                              ; preds = %509
  %525 = trunc i64 %483 to i32
  %526 = shl i32 %525, 8
  %527 = add i32 %526, -542208
  %528 = or i32 %527, 63
  %529 = inttoptr i64 %441 to i32*
  store i32 %528, i32* %529, align 4
  br label %530

530:                                              ; preds = %524, %511, %493, %487
  %531 = phi i32* [ %529, %524 ], [ %523, %511 ], [ %508, %493 ], [ %490, %487 ]
  %532 = getelementptr inbounds i32, i32* %531, i64 1
  %533 = add i32 %485, 3
  %534 = call i32 @llvm.ctlz.i32(i32 %533, i1 true) #6, !range !2
  %535 = xor i32 %534, 31
  %536 = add nsw i32 %535, -1
  %537 = lshr i32 %533, %536
  %538 = and i32 %537, 1
  %539 = or i32 %538, 2
  %540 = shl i32 %539, %536
  %541 = shl nuw nsw i32 %535, 1
  %542 = add nsw i32 %541, -4
  %543 = or i32 %538, %542
  %544 = add nsw i32 %543, 80
  %545 = sub i32 %533, %540
  %546 = shl i32 %545, 8
  %547 = or i32 %546, %544
  store i32 %547, i32* %532, align 4
  %548 = getelementptr inbounds i32, i32* %531, i64 2
  %549 = ptrtoint i32* %548 to i64
  %550 = icmp ult i8* %484, %155
  br i1 %550, label %551, label %589, !prof !33

551:                                              ; preds = %530
  %552 = getelementptr inbounds i8, i8* %484, i64 -3
  %553 = bitcast i8* %552 to i64*
  %554 = load i64, i64* %553, align 8
  %555 = lshr i64 %554, 24
  %556 = mul i64 %555, 2176830425094160384
  %557 = mul i64 %554, 2176830425094160384
  %558 = lshr i64 %557, 55
  %559 = ptrtoint i8* %484 to i64
  %560 = sub i64 %559, %22
  %561 = trunc i64 %560 to i32
  %562 = add i32 %561, -3
  %563 = getelementptr inbounds i32, i32* %5, i64 %558
  store i32 %562, i32* %563, align 4
  %564 = lshr i64 %554, 8
  %565 = mul i64 %564, 2176830425094160384
  %566 = lshr i64 %565, 55
  %567 = add i32 %561, -2
  %568 = getelementptr inbounds i32, i32* %5, i64 %566
  store i32 %567, i32* %568, align 4
  %569 = lshr i64 %554, 16
  %570 = mul i64 %569, 2176830425094160384
  %571 = lshr i64 %570, 55
  %572 = add i32 %561, -1
  %573 = getelementptr inbounds i32, i32* %5, i64 %571
  store i32 %572, i32* %573, align 4
  %574 = lshr i64 %556, 55
  %575 = getelementptr inbounds i32, i32* %5, i64 %574
  %576 = load i32, i32* %575, align 4
  store i32 %561, i32* %575, align 4
  %577 = sext i32 %576 to i64
  %578 = getelementptr inbounds i8, i8* %1, i64 %577
  %579 = ptrtoint i8* %578 to i64
  %580 = sub i64 %559, %579
  %581 = icmp slt i64 %580, 262129
  br i1 %581, label %430, label %582

582:                                              ; preds = %551, %430
  %583 = trunc i64 %440 to i32
  %584 = ptrtoint i32* %548 to i64
  br label %585

585:                                              ; preds = %582, %424, %398
  %586 = phi i64 [ %396, %398 ], [ %396, %424 ], [ %584, %582 ]
  %587 = phi i8* [ %262, %398 ], [ %262, %424 ], [ %484, %582 ]
  %588 = phi i32 [ %338, %398 ], [ %338, %424 ], [ %583, %582 ]
  br label %157

589:                                              ; preds = %530
  %590 = ptrtoint i8* %317 to i64
  %591 = ptrtoint i32* %548 to i64
  br label %595

592:                                              ; preds = %393
  %593 = ptrtoint i8* %317 to i64
  %594 = ptrtoint i32* %395 to i64
  br label %595

595:                                              ; preds = %168, %592, %589, %143
  %596 = phi i64 [ %20, %143 ], [ %591, %589 ], [ %594, %592 ], [ %158, %168 ]
  %597 = phi i64 [ %21, %143 ], [ %590, %589 ], [ %593, %592 ], [ %159, %168 ]
  %598 = phi i8* [ %144, %143 ], [ %484, %589 ], [ %262, %592 ], [ %160, %168 ]
  %599 = icmp ult i8* %598, %148
  br i1 %599, label %600, label %661

600:                                              ; preds = %595
  %601 = ptrtoint i8* %148 to i64
  %602 = ptrtoint i8* %598 to i64
  %603 = sub i64 %601, %602
  %604 = trunc i64 %603 to i32
  %605 = icmp ult i32 %604, 6
  br i1 %605, label %606, label %608

606:                                              ; preds = %600
  %607 = inttoptr i64 %596 to i32*
  store i32 %604, i32* %607, align 4
  br label %653

608:                                              ; preds = %600
  %609 = icmp ult i32 %604, 130
  br i1 %609, label %610, label %623

610:                                              ; preds = %608
  %611 = add nsw i32 %604, -2
  %612 = call i32 @llvm.ctlz.i32(i32 %611, i1 true) #6, !range !2
  %613 = sub nsw i32 30, %612
  %614 = lshr i32 %611, %613
  %615 = shl nsw i32 %613, 1
  %616 = add nuw nsw i32 %614, 2
  %617 = add i32 %616, %615
  %618 = shl i32 %614, %613
  %619 = sub i32 %611, %618
  %620 = shl i32 %619, 8
  %621 = or i32 %620, %617
  %622 = inttoptr i64 %596 to i32*
  store i32 %621, i32* %622, align 4
  br label %653

623:                                              ; preds = %608
  %624 = icmp ult i32 %604, 2114
  br i1 %624, label %625, label %635

625:                                              ; preds = %623
  %626 = add nsw i32 %604, -66
  %627 = call i32 @llvm.ctlz.i32(i32 %626, i1 true) #6, !range !2
  %628 = xor i32 %627, 31
  %629 = add nuw nsw i32 %628, 10
  %630 = shl i32 1, %628
  %631 = sub i32 %626, %630
  %632 = shl i32 %631, 8
  %633 = or i32 %632, %629
  %634 = inttoptr i64 %596 to i32*
  store i32 %633, i32* %634, align 4
  br label %653

635:                                              ; preds = %623
  %636 = icmp ult i32 %604, 6210
  br i1 %636, label %637, label %642

637:                                              ; preds = %635
  %638 = shl i32 %604, 8
  %639 = add nsw i32 %638, -541184
  %640 = or i32 %639, 21
  %641 = inttoptr i64 %596 to i32*
  store i32 %640, i32* %641, align 4
  br label %653

642:                                              ; preds = %635
  %643 = icmp ult i32 %604, 22594
  %644 = shl i32 %604, 8
  br i1 %643, label %645, label %649

645:                                              ; preds = %642
  %646 = add i32 %644, -1589760
  %647 = or i32 %646, 22
  %648 = inttoptr i64 %596 to i32*
  store i32 %647, i32* %648, align 4
  br label %653

649:                                              ; preds = %642
  %650 = add i32 %644, -5784064
  %651 = or i32 %650, 23
  %652 = inttoptr i64 %596 to i32*
  store i32 %651, i32* %652, align 4
  br label %653

653:                                              ; preds = %649, %645, %637, %625, %610, %606
  %654 = phi i32* [ %652, %649 ], [ %648, %645 ], [ %641, %637 ], [ %634, %625 ], [ %622, %610 ], [ %607, %606 ]
  %655 = getelementptr inbounds i32, i32* %654, i64 1
  %656 = ptrtoint i32* %655 to i64
  %657 = inttoptr i64 %597 to i8*
  %658 = and i64 %603, 4294967295
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %657, i8* align 1 %598, i64 %658, i1 false) #6
  %659 = getelementptr inbounds i8, i8* %657, i64 %658
  %660 = ptrtoint i8* %659 to i64
  br label %661

661:                                              ; preds = %653, %595
  %662 = phi i64 [ %656, %653 ], [ %596, %595 ]
  %663 = phi i64 [ %660, %653 ], [ %597, %595 ]
  %664 = sub i64 %663, %21
  %665 = uitofp i64 %147 to double
  %666 = uitofp i64 %664 to double
  %667 = fmul double %665, 0x3FEF5C28F5C28F5C
  %668 = fcmp ogt double %667, %666
  br i1 %668, label %743, label %669

669:                                              ; preds = %661
  call void @llvm.lifetime.start.p0i8(i64 1024, i8* nonnull %23) #6
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %23, i8 0, i64 1024, i1 false) #6
  %670 = fmul double %665, 8.000000e+00
  %671 = fmul double %670, 0x3FEF5C28F5C28F5C
  %672 = fdiv double %671, 4.300000e+01
  %673 = icmp eq i64 %147, 0
  br i1 %673, label %684, label %674

674:                                              ; preds = %669, %674
  %675 = phi i64 [ %682, %674 ], [ 0, %669 ]
  %676 = getelementptr inbounds i8, i8* %144, i64 %675
  %677 = load i8, i8* %676, align 1
  %678 = zext i8 %677 to i64
  %679 = getelementptr inbounds [256 x i32], [256 x i32]* %14, i64 0, i64 %678
  %680 = load i32, i32* %679, align 4
  %681 = add i32 %680, 1
  store i32 %681, i32* %679, align 4
  %682 = add i64 %675, 43
  %683 = icmp ult i64 %682, %147
  br i1 %683, label %674, label %684

684:                                              ; preds = %674, %669
  br label %685

685:                                              ; preds = %684, %719
  %686 = phi double [ %722, %719 ], [ 0.000000e+00, %684 ]
  %687 = phi i64 [ %711, %719 ], [ 0, %684 ]
  %688 = phi i64 [ %708, %719 ], [ 0, %684 ]
  %689 = getelementptr inbounds [256 x i32], [256 x i32]* %14, i64 0, i64 %688
  %690 = load i32, i32* %689, align 8
  %691 = zext i32 %690 to i64
  %692 = icmp ult i32 %690, 256
  br i1 %692, label %693, label %697

693:                                              ; preds = %685
  %694 = getelementptr inbounds [256 x double], [256 x double]* @kBrotliLog2Table, i64 0, i64 %691
  %695 = load double, double* %694, align 8
  %696 = uitofp i32 %690 to double
  br label %700

697:                                              ; preds = %685
  %698 = uitofp i32 %690 to double
  %699 = call double @log2(double %698) #6
  br label %700

700:                                              ; preds = %697, %693
  %701 = phi double [ %696, %693 ], [ %698, %697 ]
  %702 = phi double [ %695, %693 ], [ %699, %697 ]
  %703 = or i64 %688, 1
  %704 = getelementptr inbounds [256 x i32], [256 x i32]* %14, i64 0, i64 %703
  %705 = fmul double %701, %702
  %706 = fsub double %686, %705
  %707 = add i64 %687, %691
  %708 = add nuw nsw i64 %688, 2
  %709 = load i32, i32* %704, align 4
  %710 = zext i32 %709 to i64
  %711 = add i64 %707, %710
  %712 = uitofp i32 %709 to double
  %713 = icmp ult i32 %709, 256
  br i1 %713, label %714, label %717

714:                                              ; preds = %700
  %715 = getelementptr inbounds [256 x double], [256 x double]* @kBrotliLog2Table, i64 0, i64 %710
  %716 = load double, double* %715, align 8
  br label %719

717:                                              ; preds = %700
  %718 = call double @log2(double %712) #6
  br label %719

719:                                              ; preds = %717, %714
  %720 = phi double [ %716, %714 ], [ %718, %717 ]
  %721 = fmul double %720, %712
  %722 = fsub double %706, %721
  %723 = icmp ult i64 %708, 256
  br i1 %723, label %685, label %724

724:                                              ; preds = %719
  %725 = icmp eq i64 %711, 0
  %726 = uitofp i64 %711 to double
  br i1 %725, label %738, label %727

727:                                              ; preds = %724
  %728 = icmp ult i64 %711, 256
  br i1 %728, label %729, label %732

729:                                              ; preds = %727
  %730 = getelementptr inbounds [256 x double], [256 x double]* @kBrotliLog2Table, i64 0, i64 %711
  %731 = load double, double* %730, align 8
  br label %734

732:                                              ; preds = %727
  %733 = call double @log2(double %726) #6
  br label %734

734:                                              ; preds = %732, %729
  %735 = phi double [ %731, %729 ], [ %733, %732 ]
  %736 = fmul double %735, %726
  %737 = fadd double %722, %736
  br label %738

738:                                              ; preds = %734, %724
  %739 = phi double [ %737, %734 ], [ %722, %724 ]
  %740 = fcmp olt double %739, %726
  %741 = select i1 %740, double %726, double %739
  %742 = fcmp uge double %741, %672
  call void @llvm.lifetime.end.p0i8(i64 1024, i8* nonnull %23) #6
  br i1 %742, label %1055, label %743

743:                                              ; preds = %738, %661
  %744 = sub i64 %662, %20
  %745 = ashr exact i64 %744, 2
  %746 = load i64, i64* %6, align 8, !alias.scope !99, !noalias !102
  %747 = lshr i64 %746, 3
  %748 = getelementptr inbounds i8, i8* %7, i64 %747
  %749 = load i8, i8* %748, align 1, !alias.scope !102, !noalias !99
  %750 = zext i8 %749 to i64
  %751 = bitcast i8* %748 to i64*
  store i64 %750, i64* %751, align 8, !alias.scope !102, !noalias !99
  %752 = add i64 %746, 1
  %753 = icmp ult i64 %147, 65537
  %754 = select i1 %753, i64 4, i64 5
  %755 = add nsw i64 %754, -4
  %756 = lshr i64 %752, 3
  %757 = getelementptr inbounds i8, i8* %7, i64 %756
  %758 = load i8, i8* %757, align 1, !alias.scope !104, !noalias !107
  %759 = zext i8 %758 to i64
  %760 = and i64 %752, 7
  %761 = shl i64 %755, %760
  %762 = or i64 %761, %759
  %763 = bitcast i8* %757 to i64*
  store i64 %762, i64* %763, align 8, !alias.scope !104, !noalias !107
  %764 = add i64 %746, 3
  %765 = shl nuw nsw i64 %754, 2
  %766 = add nsw i64 %147, -1
  %767 = lshr i64 %764, 3
  %768 = getelementptr inbounds i8, i8* %7, i64 %767
  %769 = load i8, i8* %768, align 1, !alias.scope !109, !noalias !112
  %770 = zext i8 %769 to i64
  %771 = and i64 %764, 7
  %772 = shl i64 %766, %771
  %773 = or i64 %772, %770
  %774 = bitcast i8* %768 to i64*
  store i64 %773, i64* %774, align 8, !alias.scope !109, !noalias !112
  %775 = add i64 %764, %765
  %776 = lshr i64 %775, 3
  %777 = getelementptr inbounds i8, i8* %7, i64 %776
  %778 = load i8, i8* %777, align 1, !alias.scope !114, !noalias !117
  %779 = zext i8 %778 to i64
  %780 = bitcast i8* %777 to i64*
  store i64 %779, i64* %780, align 8, !alias.scope !114, !noalias !117
  %781 = add i64 %775, 1
  %782 = lshr i64 %781, 3
  %783 = getelementptr inbounds i8, i8* %7, i64 %782
  %784 = load i8, i8* %783, align 1, !alias.scope !119, !noalias !122
  %785 = zext i8 %784 to i64
  %786 = bitcast i8* %783 to i64*
  store i64 %785, i64* %786, align 8, !alias.scope !119, !noalias !122
  %787 = add i64 %775, 14
  store i64 %787, i64* %6, align 8, !alias.scope !122, !noalias !119
  call void @llvm.lifetime.start.p0i8(i64 256, i8* nonnull %24) #6
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %24, i8 -86, i64 256, i1 false) #6
  call void @llvm.lifetime.start.p0i8(i64 512, i8* nonnull %25) #6
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %25, i8 -86, i64 512, i1 false) #6
  call void @llvm.lifetime.start.p0i8(i64 1024, i8* nonnull %23) #6
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %23, i8 0, i64 1024, i1 false) #6
  call void @llvm.lifetime.start.p0i8(i64 128, i8* nonnull %26) #6
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %26, i8 0, i64 128, i1 false) #6
  call void @llvm.lifetime.start.p0i8(i64 256, i8* nonnull %27) #6
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %27, i8 0, i64 256, i1 false) #6
  call void @llvm.lifetime.start.p0i8(i64 512, i8* nonnull %28) #6
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %28, i8 0, i64 512, i1 false) #6
  %788 = icmp eq i64 %664, 0
  br i1 %788, label %843, label %789

789:                                              ; preds = %743
  %790 = add i64 %663, %142
  %791 = and i64 %664, 3
  %792 = icmp ult i64 %790, 3
  br i1 %792, label %828, label %793

793:                                              ; preds = %789
  %794 = sub i64 %664, %791
  br label %795

795:                                              ; preds = %795, %793
  %796 = phi i64 [ 0, %793 ], [ %825, %795 ]
  %797 = phi i64 [ %794, %793 ], [ %826, %795 ]
  %798 = getelementptr inbounds i8, i8* %4, i64 %796
  %799 = load i8, i8* %798, align 1
  %800 = zext i8 %799 to i64
  %801 = getelementptr inbounds [256 x i32], [256 x i32]* %14, i64 0, i64 %800
  %802 = load i32, i32* %801, align 4
  %803 = add i32 %802, 1
  store i32 %803, i32* %801, align 4
  %804 = or i64 %796, 1
  %805 = getelementptr inbounds i8, i8* %4, i64 %804
  %806 = load i8, i8* %805, align 1
  %807 = zext i8 %806 to i64
  %808 = getelementptr inbounds [256 x i32], [256 x i32]* %14, i64 0, i64 %807
  %809 = load i32, i32* %808, align 4
  %810 = add i32 %809, 1
  store i32 %810, i32* %808, align 4
  %811 = or i64 %796, 2
  %812 = getelementptr inbounds i8, i8* %4, i64 %811
  %813 = load i8, i8* %812, align 1
  %814 = zext i8 %813 to i64
  %815 = getelementptr inbounds [256 x i32], [256 x i32]* %14, i64 0, i64 %814
  %816 = load i32, i32* %815, align 4
  %817 = add i32 %816, 1
  store i32 %817, i32* %815, align 4
  %818 = or i64 %796, 3
  %819 = getelementptr inbounds i8, i8* %4, i64 %818
  %820 = load i8, i8* %819, align 1
  %821 = zext i8 %820 to i64
  %822 = getelementptr inbounds [256 x i32], [256 x i32]* %14, i64 0, i64 %821
  %823 = load i32, i32* %822, align 4
  %824 = add i32 %823, 1
  store i32 %824, i32* %822, align 4
  %825 = add nuw i64 %796, 4
  %826 = add i64 %797, -4
  %827 = icmp eq i64 %826, 0
  br i1 %827, label %828, label %795

828:                                              ; preds = %795, %789
  %829 = phi i64 [ 0, %789 ], [ %825, %795 ]
  %830 = icmp eq i64 %791, 0
  br i1 %830, label %843, label %831

831:                                              ; preds = %828, %831
  %832 = phi i64 [ %840, %831 ], [ %829, %828 ]
  %833 = phi i64 [ %841, %831 ], [ %791, %828 ]
  %834 = getelementptr inbounds i8, i8* %4, i64 %832
  %835 = load i8, i8* %834, align 1
  %836 = zext i8 %835 to i64
  %837 = getelementptr inbounds [256 x i32], [256 x i32]* %14, i64 0, i64 %836
  %838 = load i32, i32* %837, align 4
  %839 = add i32 %838, 1
  store i32 %839, i32* %837, align 4
  %840 = add nuw i64 %832, 1
  %841 = add i64 %833, -1
  %842 = icmp eq i64 %841, 0
  br i1 %842, label %843, label %831, !llvm.loop !124

843:                                              ; preds = %828, %831, %743
  call void @BrotliBuildAndStoreHuffmanTreeFast(%struct.MemoryManager* %0, i32* nonnull %29, i64 %664, i64 8, i8* nonnull %24, i16* nonnull %30, i64* %6, i8* %7) #6
  %844 = icmp eq i64 %744, 0
  br i1 %844, label %891, label %845

845:                                              ; preds = %843
  %846 = and i64 %745, 1
  %847 = icmp eq i64 %744, 4
  br i1 %847, label %871, label %848

848:                                              ; preds = %845
  %849 = sub nsw i64 %745, %846
  br label %850

850:                                              ; preds = %850, %848
  %851 = phi i64 [ 0, %848 ], [ %868, %850 ]
  %852 = phi i64 [ %849, %848 ], [ %869, %850 ]
  %853 = getelementptr inbounds i32, i32* %3, i64 %851
  %854 = load i32, i32* %853, align 4
  %855 = and i32 %854, 255
  %856 = zext i32 %855 to i64
  %857 = getelementptr inbounds [128 x i32], [128 x i32]* %17, i64 0, i64 %856
  %858 = load i32, i32* %857, align 4
  %859 = add i32 %858, 1
  store i32 %859, i32* %857, align 4
  %860 = or i64 %851, 1
  %861 = getelementptr inbounds i32, i32* %3, i64 %860
  %862 = load i32, i32* %861, align 4
  %863 = and i32 %862, 255
  %864 = zext i32 %863 to i64
  %865 = getelementptr inbounds [128 x i32], [128 x i32]* %17, i64 0, i64 %864
  %866 = load i32, i32* %865, align 4
  %867 = add i32 %866, 1
  store i32 %867, i32* %865, align 4
  %868 = add nuw i64 %851, 2
  %869 = add i64 %852, -2
  %870 = icmp eq i64 %869, 0
  br i1 %870, label %871, label %850

871:                                              ; preds = %850, %845
  %872 = phi i64 [ 0, %845 ], [ %868, %850 ]
  %873 = icmp eq i64 %846, 0
  br i1 %873, label %882, label %874

874:                                              ; preds = %871
  %875 = getelementptr inbounds i32, i32* %3, i64 %872
  %876 = load i32, i32* %875, align 4
  %877 = and i32 %876, 255
  %878 = zext i32 %877 to i64
  %879 = getelementptr inbounds [128 x i32], [128 x i32]* %17, i64 0, i64 %878
  %880 = load i32, i32* %879, align 4
  %881 = add i32 %880, 1
  store i32 %881, i32* %879, align 4
  br label %882

882:                                              ; preds = %871, %874
  %883 = load i32, i32* %31, align 4
  %884 = load i32, i32* %32, align 8
  %885 = load i32, i32* %33, align 16
  %886 = load i32, i32* %34, align 16
  %887 = add i32 %883, 1
  %888 = add i32 %884, 1
  %889 = add i32 %885, 1
  %890 = add i32 %886, 1
  br label %891

891:                                              ; preds = %882, %843
  %892 = phi i32 [ %890, %882 ], [ 1, %843 ]
  %893 = phi i32 [ %889, %882 ], [ 1, %843 ]
  %894 = phi i32 [ %888, %882 ], [ 1, %843 ]
  %895 = phi i32 [ %887, %882 ], [ 1, %843 ]
  store i32 %895, i32* %31, align 4
  store i32 %894, i32* %32, align 8
  store i32 %893, i32* %33, align 16
  store i32 %892, i32* %34, align 16
  call void @llvm.lifetime.start.p0i8(i64 1032, i8* nonnull %36) #6
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %36, i8 -86, i64 1032, i1 false) #6
  call void @llvm.lifetime.start.p0i8(i64 704, i8* nonnull %37) #6
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %37, i8 0, i64 704, i1 false) #6
  call void @llvm.lifetime.start.p0i8(i64 128, i8* nonnull %38) #6
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %38, i8 -86, i64 128, i1 false) #6
  call void @BrotliCreateHuffmanTree(i32* nonnull %35, i64 64, i32 15, %struct.HuffmanTree* nonnull %39, i8* nonnull %26) #6
  call void @BrotliCreateHuffmanTree(i32* %33, i64 64, i32 14, %struct.HuffmanTree* nonnull %39, i8* %40) #6
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 16 %37, i8* align 8 %41, i64 24, i1 false) #6
  %896 = load i64, i64* %43, align 16
  store i64 %896, i64* %44, align 8
  %897 = load i64, i64* %47, align 16
  store i64 %897, i64* %48, align 16
  %898 = load i64, i64* %51, align 8
  store i64 %898, i64* %52, align 8
  %899 = load i64, i64* %55, align 8
  store i64 %899, i64* %56, align 16
  %900 = load i64, i64* %59, align 16
  store i64 %900, i64* %60, align 8
  call void @BrotliConvertBitDepthsToSymbols(i8* nonnull %37, i64 64, i16* nonnull %61) #6
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 16 %27, i8* align 16 %63, i64 16, i1 false) #6
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 16 %65, i8* align 16 %67, i64 16, i1 false) #6
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 16 %69, i8* align 16 %71, i64 16, i1 false) #6
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 16 %73, i8* nonnull align 16 %38, i64 48, i1 false) #6
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 16 %75, i8* align 16 %77, i64 16, i1 false) #6
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 16 %79, i8* align 16 %81, i64 16, i1 false) #6
  call void @BrotliConvertBitDepthsToSymbols(i8* %40, i64 64, i16* %82) #6
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %37, i8 0, i64 64, i1 false) #6
  %901 = load i64, i64* %83, align 8
  store i64 %901, i64* %84, align 16
  %902 = load i64, i64* %87, align 16
  store i64 %902, i64* %88, align 16
  %903 = load i64, i64* %91, align 8
  store i64 %903, i64* %92, align 16
  %904 = load i64, i64* %47, align 16
  store i64 %904, i64* %94, align 16
  %905 = load i64, i64* %55, align 8
  store i64 %905, i64* %96, align 16
  %906 = load i8, i8* %26, align 16
  store i8 %906, i8* %89, align 16
  %907 = load i8, i8* %50, align 8
  store i8 %907, i8* %97, align 16
  %908 = load i8, i8* %58, align 16
  store i8 %908, i8* %98, align 16
  %909 = load i8, i8* %99, align 1
  store i8 %909, i8* %100, align 8
  %910 = load i8, i8* %101, align 1
  store i8 %910, i8* %102, align 8
  %911 = load i8, i8* %103, align 1
  store i8 %911, i8* %104, align 8
  %912 = load i8, i8* %105, align 2
  store i8 %912, i8* %106, align 16
  %913 = load i8, i8* %107, align 2
  store i8 %913, i8* %108, align 16
  %914 = load i8, i8* %109, align 2
  store i8 %914, i8* %110, align 16
  %915 = load i8, i8* %111, align 1
  store i8 %915, i8* %112, align 8
  %916 = load i8, i8* %113, align 1
  store i8 %916, i8* %114, align 8
  %917 = load i8, i8* %115, align 1
  store i8 %917, i8* %116, align 8
  %918 = load i8, i8* %117, align 4
  store i8 %918, i8* %118, align 16
  %919 = load i8, i8* %119, align 4
  store i8 %919, i8* %120, align 16
  %920 = load i8, i8* %121, align 4
  store i8 %920, i8* %122, align 16
  %921 = load i8, i8* %123, align 1
  store i8 %921, i8* %124, align 8
  %922 = load i8, i8* %125, align 1
  store i8 %922, i8* %126, align 8
  %923 = load i8, i8* %127, align 1
  store i8 %923, i8* %128, align 8
  %924 = load i8, i8* %129, align 2
  store i8 %924, i8* %130, align 16
  %925 = load i8, i8* %131, align 2
  store i8 %925, i8* %132, align 16
  %926 = load i8, i8* %133, align 2
  store i8 %926, i8* %134, align 16
  %927 = load i8, i8* %135, align 1
  store i8 %927, i8* %136, align 8
  %928 = load i8, i8* %137, align 1
  store i8 %928, i8* %138, align 8
  %929 = load i8, i8* %139, align 1
  store i8 %929, i8* %140, align 8
  call void @BrotliStoreHuffmanTree(i8* nonnull %37, i64 704, %struct.HuffmanTree* nonnull %39, i64* %6, i8* %7) #6
  call void @BrotliStoreHuffmanTree(i8* %40, i64 64, %struct.HuffmanTree* nonnull %39, i64* %6, i8* %7) #6
  call void @llvm.lifetime.end.p0i8(i64 128, i8* nonnull %38) #6
  call void @llvm.lifetime.end.p0i8(i64 704, i8* nonnull %37) #6
  call void @llvm.lifetime.end.p0i8(i64 1032, i8* nonnull %36) #6
  br i1 %844, label %1054, label %930

930:                                              ; preds = %891
  %931 = load i64, i64* %6, align 8, !alias.scope !125, !noalias !128
  br label %932

932:                                              ; preds = %1049, %930
  %933 = phi i64 [ %1050, %1049 ], [ %931, %930 ]
  %934 = phi i8* [ %1051, %1049 ], [ %4, %930 ]
  %935 = phi i64 [ %1052, %1049 ], [ 0, %930 ]
  %936 = getelementptr inbounds i32, i32* %3, i64 %935
  %937 = load i32, i32* %936, align 4
  %938 = and i32 %937, 255
  %939 = lshr i32 %937, 8
  %940 = zext i32 %938 to i64
  %941 = getelementptr inbounds [128 x i8], [128 x i8]* %15, i64 0, i64 %940
  %942 = load i8, i8* %941, align 1
  %943 = zext i8 %942 to i64
  %944 = getelementptr inbounds [128 x i16], [128 x i16]* %16, i64 0, i64 %940
  %945 = load i16, i16* %944, align 2
  %946 = zext i16 %945 to i64
  %947 = lshr i64 %933, 3
  %948 = getelementptr inbounds i8, i8* %7, i64 %947
  %949 = load i8, i8* %948, align 1, !alias.scope !128, !noalias !125
  %950 = zext i8 %949 to i64
  %951 = and i64 %933, 7
  %952 = shl i64 %946, %951
  %953 = or i64 %952, %950
  %954 = bitcast i8* %948 to i64*
  store i64 %953, i64* %954, align 8, !alias.scope !128, !noalias !125
  %955 = add i64 %933, %943
  %956 = getelementptr inbounds [128 x i32], [128 x i32]* @StoreCommands.kNumExtraBits, i64 0, i64 %940
  %957 = load i32, i32* %956, align 4
  %958 = zext i32 %957 to i64
  %959 = zext i32 %939 to i64
  %960 = lshr i64 %955, 3
  %961 = getelementptr inbounds i8, i8* %7, i64 %960
  %962 = load i8, i8* %961, align 1, !alias.scope !130, !noalias !133
  %963 = zext i8 %962 to i64
  %964 = and i64 %955, 7
  %965 = shl i64 %959, %964
  %966 = or i64 %965, %963
  %967 = bitcast i8* %961 to i64*
  store i64 %966, i64* %967, align 8, !alias.scope !130, !noalias !133
  %968 = add i64 %955, %958
  store i64 %968, i64* %6, align 8, !alias.scope !133, !noalias !130
  %969 = icmp ult i32 %938, 24
  br i1 %969, label %970, label %1049

970:                                              ; preds = %932
  %971 = getelementptr inbounds [24 x i32], [24 x i32]* @StoreCommands.kInsertOffset, i64 0, i64 %940
  %972 = load i32, i32* %971, align 4
  %973 = add i32 %972, %939
  %974 = icmp eq i32 %973, 0
  br i1 %974, label %1049, label %975

975:                                              ; preds = %970
  %976 = add i32 %972, -1
  %977 = and i32 %973, 1
  %978 = sub nsw i32 0, %939
  %979 = icmp eq i32 %976, %978
  br i1 %979, label %1024, label %980

980:                                              ; preds = %975
  %981 = sub i32 %973, %977
  br label %982

982:                                              ; preds = %982, %980
  %983 = phi i64 [ %968, %980 ], [ %1020, %982 ]
  %984 = phi i8* [ %934, %980 ], [ %1021, %982 ]
  %985 = phi i32 [ %981, %980 ], [ %1022, %982 ]
  %986 = load i8, i8* %984, align 1
  %987 = zext i8 %986 to i64
  %988 = getelementptr inbounds [256 x i8], [256 x i8]* %12, i64 0, i64 %987
  %989 = load i8, i8* %988, align 1
  %990 = zext i8 %989 to i64
  %991 = getelementptr inbounds [256 x i16], [256 x i16]* %13, i64 0, i64 %987
  %992 = load i16, i16* %991, align 2
  %993 = zext i16 %992 to i64
  %994 = lshr i64 %983, 3
  %995 = getelementptr inbounds i8, i8* %7, i64 %994
  %996 = load i8, i8* %995, align 1, !alias.scope !135, !noalias !138
  %997 = zext i8 %996 to i64
  %998 = and i64 %983, 7
  %999 = shl i64 %993, %998
  %1000 = or i64 %999, %997
  %1001 = bitcast i8* %995 to i64*
  store i64 %1000, i64* %1001, align 8, !alias.scope !135, !noalias !138
  %1002 = add i64 %983, %990
  store i64 %1002, i64* %6, align 8, !alias.scope !138, !noalias !135
  %1003 = getelementptr inbounds i8, i8* %984, i64 1
  %1004 = load i8, i8* %1003, align 1
  %1005 = zext i8 %1004 to i64
  %1006 = getelementptr inbounds [256 x i8], [256 x i8]* %12, i64 0, i64 %1005
  %1007 = load i8, i8* %1006, align 1
  %1008 = zext i8 %1007 to i64
  %1009 = getelementptr inbounds [256 x i16], [256 x i16]* %13, i64 0, i64 %1005
  %1010 = load i16, i16* %1009, align 2
  %1011 = zext i16 %1010 to i64
  %1012 = lshr i64 %1002, 3
  %1013 = getelementptr inbounds i8, i8* %7, i64 %1012
  %1014 = load i8, i8* %1013, align 1, !alias.scope !135, !noalias !138
  %1015 = zext i8 %1014 to i64
  %1016 = and i64 %1002, 7
  %1017 = shl i64 %1011, %1016
  %1018 = or i64 %1017, %1015
  %1019 = bitcast i8* %1013 to i64*
  store i64 %1018, i64* %1019, align 8, !alias.scope !135, !noalias !138
  %1020 = add i64 %1002, %1008
  store i64 %1020, i64* %6, align 8, !alias.scope !138, !noalias !135
  %1021 = getelementptr inbounds i8, i8* %984, i64 2
  %1022 = add i32 %985, -2
  %1023 = icmp eq i32 %1022, 0
  br i1 %1023, label %1024, label %982

1024:                                             ; preds = %982, %975
  %1025 = phi i64 [ undef, %975 ], [ %1020, %982 ]
  %1026 = phi i8* [ undef, %975 ], [ %1021, %982 ]
  %1027 = phi i64 [ %968, %975 ], [ %1020, %982 ]
  %1028 = phi i8* [ %934, %975 ], [ %1021, %982 ]
  %1029 = icmp eq i32 %977, 0
  br i1 %1029, label %1049, label %1030

1030:                                             ; preds = %1024
  %1031 = load i8, i8* %1028, align 1
  %1032 = zext i8 %1031 to i64
  %1033 = getelementptr inbounds [256 x i8], [256 x i8]* %12, i64 0, i64 %1032
  %1034 = load i8, i8* %1033, align 1
  %1035 = zext i8 %1034 to i64
  %1036 = getelementptr inbounds [256 x i16], [256 x i16]* %13, i64 0, i64 %1032
  %1037 = load i16, i16* %1036, align 2
  %1038 = zext i16 %1037 to i64
  %1039 = lshr i64 %1027, 3
  %1040 = getelementptr inbounds i8, i8* %7, i64 %1039
  %1041 = load i8, i8* %1040, align 1, !alias.scope !135, !noalias !138
  %1042 = zext i8 %1041 to i64
  %1043 = and i64 %1027, 7
  %1044 = shl i64 %1038, %1043
  %1045 = or i64 %1044, %1042
  %1046 = bitcast i8* %1040 to i64*
  store i64 %1045, i64* %1046, align 8, !alias.scope !135, !noalias !138
  %1047 = add i64 %1027, %1035
  store i64 %1047, i64* %6, align 8, !alias.scope !138, !noalias !135
  %1048 = getelementptr inbounds i8, i8* %1028, i64 1
  br label %1049

1049:                                             ; preds = %1030, %1024, %970, %932
  %1050 = phi i64 [ %968, %932 ], [ %968, %970 ], [ %1025, %1024 ], [ %1047, %1030 ]
  %1051 = phi i8* [ %934, %932 ], [ %934, %970 ], [ %1026, %1024 ], [ %1048, %1030 ]
  %1052 = add nuw i64 %935, 1
  %1053 = icmp eq i64 %1052, %745
  br i1 %1053, label %1054, label %932

1054:                                             ; preds = %1049, %891
  call void @llvm.lifetime.end.p0i8(i64 512, i8* nonnull %28) #6
  call void @llvm.lifetime.end.p0i8(i64 256, i8* nonnull %27) #6
  call void @llvm.lifetime.end.p0i8(i64 128, i8* nonnull %26) #6
  call void @llvm.lifetime.end.p0i8(i64 1024, i8* nonnull %23) #6
  call void @llvm.lifetime.end.p0i8(i64 512, i8* nonnull %25) #6
  call void @llvm.lifetime.end.p0i8(i64 256, i8* nonnull %24) #6
  br label %1103

1055:                                             ; preds = %738
  %1056 = load i64, i64* %6, align 8, !alias.scope !140, !noalias !143
  %1057 = lshr i64 %1056, 3
  %1058 = getelementptr inbounds i8, i8* %7, i64 %1057
  %1059 = load i8, i8* %1058, align 1, !alias.scope !143, !noalias !140
  %1060 = zext i8 %1059 to i64
  %1061 = bitcast i8* %1058 to i64*
  store i64 %1060, i64* %1061, align 8, !alias.scope !143, !noalias !140
  %1062 = add i64 %1056, 1
  %1063 = icmp ult i64 %147, 65537
  %1064 = select i1 %1063, i64 4, i64 5
  %1065 = add nsw i64 %1064, -4
  %1066 = lshr i64 %1062, 3
  %1067 = getelementptr inbounds i8, i8* %7, i64 %1066
  %1068 = load i8, i8* %1067, align 1, !alias.scope !145, !noalias !148
  %1069 = zext i8 %1068 to i64
  %1070 = and i64 %1062, 7
  %1071 = shl i64 %1065, %1070
  %1072 = or i64 %1071, %1069
  %1073 = bitcast i8* %1067 to i64*
  store i64 %1072, i64* %1073, align 8, !alias.scope !145, !noalias !148
  %1074 = add i64 %1056, 3
  %1075 = shl nuw nsw i64 %1064, 2
  %1076 = add nsw i64 %147, -1
  %1077 = lshr i64 %1074, 3
  %1078 = getelementptr inbounds i8, i8* %7, i64 %1077
  %1079 = load i8, i8* %1078, align 1, !alias.scope !150, !noalias !153
  %1080 = zext i8 %1079 to i64
  %1081 = and i64 %1074, 7
  %1082 = shl i64 %1076, %1081
  %1083 = or i64 %1082, %1080
  %1084 = bitcast i8* %1078 to i64*
  store i64 %1083, i64* %1084, align 8, !alias.scope !150, !noalias !153
  %1085 = add i64 %1074, %1075
  %1086 = lshr i64 %1085, 3
  %1087 = getelementptr inbounds i8, i8* %7, i64 %1086
  %1088 = load i8, i8* %1087, align 1, !alias.scope !155, !noalias !158
  %1089 = zext i8 %1088 to i64
  %1090 = and i64 %1085, 7
  %1091 = shl i64 1, %1090
  %1092 = or i64 %1091, %1089
  %1093 = bitcast i8* %1087 to i64*
  store i64 %1092, i64* %1093, align 8, !alias.scope !155, !noalias !158
  %1094 = add i64 %1085, 8
  %1095 = and i64 %1094, 4294967288
  store i64 %1095, i64* %6, align 8
  %1096 = lshr exact i64 %1095, 3
  %1097 = getelementptr inbounds i8, i8* %7, i64 %1096
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %1097, i8* align 1 %144, i64 %147, i1 false) #6
  %1098 = shl nuw nsw i64 %147, 3
  %1099 = load i64, i64* %6, align 8
  %1100 = add i64 %1099, %1098
  store i64 %1100, i64* %6, align 8
  %1101 = lshr i64 %1100, 3
  %1102 = getelementptr inbounds i8, i8* %7, i64 %1101
  store i8 0, i8* %1102, align 1
  br label %1103

1103:                                             ; preds = %1055, %1054
  %1104 = sub i64 %145, %147
  %1105 = icmp eq i64 %1104, 0
  br i1 %1105, label %1106, label %143

1106:                                             ; preds = %1103, %8
  ret void

1107:                                             ; preds = %252
  %1108 = getelementptr inbounds i8, i8* %244, i64 1
  %1109 = getelementptr inbounds i8, i8* %216, i64 %253
  %1110 = load i8, i8* %1109, align 1
  %1111 = load i8, i8* %1108, align 1
  %1112 = icmp eq i8 %1110, %1111
  br i1 %1112, label %1113, label %255, !prof !33

1113:                                             ; preds = %1107
  %1114 = add i64 %243, 2
  %1115 = icmp eq i64 %245, 2
  br i1 %1115, label %255, label %1116

1116:                                             ; preds = %1113
  %1117 = getelementptr inbounds i8, i8* %244, i64 2
  %1118 = getelementptr inbounds i8, i8* %216, i64 %1114
  %1119 = load i8, i8* %1118, align 1
  %1120 = load i8, i8* %1117, align 1
  %1121 = icmp eq i8 %1119, %1120
  br i1 %1121, label %1122, label %255, !prof !33

1122:                                             ; preds = %1116
  %1123 = add i64 %243, 3
  %1124 = icmp eq i64 %245, 3
  br i1 %1124, label %255, label %1125

1125:                                             ; preds = %1122
  %1126 = getelementptr inbounds i8, i8* %244, i64 3
  %1127 = getelementptr inbounds i8, i8* %216, i64 %1123
  %1128 = load i8, i8* %1127, align 1
  %1129 = load i8, i8* %1126, align 1
  %1130 = icmp eq i8 %1128, %1129
  br i1 %1130, label %1131, label %255, !prof !33

1131:                                             ; preds = %1125
  %1132 = add i64 %243, 4
  %1133 = icmp eq i64 %245, 4
  br i1 %1133, label %255, label %1134

1134:                                             ; preds = %1131
  %1135 = getelementptr inbounds i8, i8* %244, i64 4
  %1136 = getelementptr inbounds i8, i8* %216, i64 %1132
  %1137 = load i8, i8* %1136, align 1
  %1138 = load i8, i8* %1135, align 1
  %1139 = icmp eq i8 %1137, %1138
  br i1 %1139, label %1140, label %255, !prof !33

1140:                                             ; preds = %1134
  %1141 = add i64 %243, 5
  %1142 = icmp eq i64 %245, 5
  br i1 %1142, label %255, label %1143

1143:                                             ; preds = %1140
  %1144 = getelementptr inbounds i8, i8* %244, i64 5
  %1145 = getelementptr inbounds i8, i8* %216, i64 %1141
  %1146 = load i8, i8* %1145, align 1
  %1147 = load i8, i8* %1144, align 1
  %1148 = icmp eq i8 %1146, %1147
  br i1 %1148, label %1149, label %255, !prof !33

1149:                                             ; preds = %1143
  %1150 = add i64 %243, 6
  %1151 = icmp eq i64 %245, 6
  br i1 %1151, label %255, label %1152

1152:                                             ; preds = %1149
  %1153 = getelementptr inbounds i8, i8* %244, i64 6
  %1154 = getelementptr inbounds i8, i8* %216, i64 %1150
  %1155 = load i8, i8* %1154, align 1
  %1156 = load i8, i8* %1153, align 1
  %1157 = icmp eq i8 %1155, %1156
  %1158 = add i64 %243, 7
  %1159 = select i1 %1157, i64 %1158, i64 %1150, !prof !33
  br label %255

1160:                                             ; preds = %478
  %1161 = getelementptr inbounds i8, i8* %470, i64 1
  %1162 = getelementptr inbounds i8, i8* %442, i64 %479
  %1163 = load i8, i8* %1162, align 1
  %1164 = load i8, i8* %1161, align 1
  %1165 = icmp eq i8 %1163, %1164
  br i1 %1165, label %1166, label %481, !prof !33

1166:                                             ; preds = %1160
  %1167 = add i64 %469, 2
  %1168 = icmp eq i64 %471, 2
  br i1 %1168, label %481, label %1169

1169:                                             ; preds = %1166
  %1170 = getelementptr inbounds i8, i8* %470, i64 2
  %1171 = getelementptr inbounds i8, i8* %442, i64 %1167
  %1172 = load i8, i8* %1171, align 1
  %1173 = load i8, i8* %1170, align 1
  %1174 = icmp eq i8 %1172, %1173
  br i1 %1174, label %1175, label %481, !prof !33

1175:                                             ; preds = %1169
  %1176 = add i64 %469, 3
  %1177 = icmp eq i64 %471, 3
  br i1 %1177, label %481, label %1178

1178:                                             ; preds = %1175
  %1179 = getelementptr inbounds i8, i8* %470, i64 3
  %1180 = getelementptr inbounds i8, i8* %442, i64 %1176
  %1181 = load i8, i8* %1180, align 1
  %1182 = load i8, i8* %1179, align 1
  %1183 = icmp eq i8 %1181, %1182
  br i1 %1183, label %1184, label %481, !prof !33

1184:                                             ; preds = %1178
  %1185 = add i64 %469, 4
  %1186 = icmp eq i64 %471, 4
  br i1 %1186, label %481, label %1187

1187:                                             ; preds = %1184
  %1188 = getelementptr inbounds i8, i8* %470, i64 4
  %1189 = getelementptr inbounds i8, i8* %442, i64 %1185
  %1190 = load i8, i8* %1189, align 1
  %1191 = load i8, i8* %1188, align 1
  %1192 = icmp eq i8 %1190, %1191
  br i1 %1192, label %1193, label %481, !prof !33

1193:                                             ; preds = %1187
  %1194 = add i64 %469, 5
  %1195 = icmp eq i64 %471, 5
  br i1 %1195, label %481, label %1196

1196:                                             ; preds = %1193
  %1197 = getelementptr inbounds i8, i8* %470, i64 5
  %1198 = getelementptr inbounds i8, i8* %442, i64 %1194
  %1199 = load i8, i8* %1198, align 1
  %1200 = load i8, i8* %1197, align 1
  %1201 = icmp eq i8 %1199, %1200
  br i1 %1201, label %1202, label %481, !prof !33

1202:                                             ; preds = %1196
  %1203 = add i64 %469, 6
  %1204 = icmp eq i64 %471, 6
  br i1 %1204, label %481, label %1205

1205:                                             ; preds = %1202
  %1206 = getelementptr inbounds i8, i8* %470, i64 6
  %1207 = getelementptr inbounds i8, i8* %442, i64 %1203
  %1208 = load i8, i8* %1207, align 1
  %1209 = load i8, i8* %1206, align 1
  %1210 = icmp eq i8 %1208, %1209
  %1211 = add i64 %469, 7
  %1212 = select i1 %1210, i64 %1211, i64 %1203, !prof !33
  br label %481
}

; Function Attrs: noinline nounwind ssp uwtable
define internal fastcc void @BrotliCompressFragmentTwoPassImpl10(%struct.MemoryManager*, i8*, i64, i32*, i8*, i32* nocapture, i64*, i8*) unnamed_addr #2 {
  %9 = alloca [129 x %struct.HuffmanTree], align 16
  %10 = alloca [704 x i8], align 16
  %11 = alloca [64 x i16], align 16
  %12 = alloca [256 x i8], align 16
  %13 = alloca [256 x i16], align 16
  %14 = alloca [256 x i32], align 16
  %15 = alloca [128 x i8], align 16
  %16 = alloca [128 x i16], align 16
  %17 = alloca [128 x i32], align 16
  %18 = icmp eq i64 %2, 0
  br i1 %18, label %1106, label %19

19:                                               ; preds = %8
  %20 = ptrtoint i32* %3 to i64
  %21 = ptrtoint i8* %4 to i64
  %22 = ptrtoint i8* %1 to i64
  %23 = bitcast [256 x i32]* %14 to i8*
  %24 = getelementptr inbounds [256 x i8], [256 x i8]* %12, i64 0, i64 0
  %25 = bitcast [256 x i16]* %13 to i8*
  %26 = getelementptr inbounds [128 x i8], [128 x i8]* %15, i64 0, i64 0
  %27 = bitcast [128 x i16]* %16 to i8*
  %28 = bitcast [128 x i32]* %17 to i8*
  %29 = getelementptr inbounds [256 x i32], [256 x i32]* %14, i64 0, i64 0
  %30 = getelementptr inbounds [256 x i16], [256 x i16]* %13, i64 0, i64 0
  %31 = getelementptr inbounds [128 x i32], [128 x i32]* %17, i64 0, i64 1
  %32 = getelementptr inbounds [128 x i32], [128 x i32]* %17, i64 0, i64 2
  %33 = getelementptr inbounds [128 x i32], [128 x i32]* %17, i64 0, i64 64
  %34 = getelementptr inbounds [128 x i32], [128 x i32]* %17, i64 0, i64 84
  %35 = getelementptr inbounds [128 x i32], [128 x i32]* %17, i64 0, i64 0
  %36 = bitcast [129 x %struct.HuffmanTree]* %9 to i8*
  %37 = getelementptr inbounds [704 x i8], [704 x i8]* %10, i64 0, i64 0
  %38 = bitcast [64 x i16]* %11 to i8*
  %39 = getelementptr inbounds [129 x %struct.HuffmanTree], [129 x %struct.HuffmanTree]* %9, i64 0, i64 0
  %40 = getelementptr inbounds [128 x i8], [128 x i8]* %15, i64 0, i64 64
  %41 = getelementptr inbounds [128 x i8], [128 x i8]* %15, i64 0, i64 24
  %42 = getelementptr inbounds [704 x i8], [704 x i8]* %10, i64 0, i64 24
  %43 = bitcast [128 x i8]* %15 to i64*
  %44 = bitcast i8* %42 to i64*
  %45 = getelementptr inbounds [704 x i8], [704 x i8]* %10, i64 0, i64 32
  %46 = getelementptr inbounds [128 x i8], [128 x i8]* %15, i64 0, i64 48
  %47 = bitcast i8* %46 to i64*
  %48 = bitcast i8* %45 to i64*
  %49 = getelementptr inbounds [704 x i8], [704 x i8]* %10, i64 0, i64 40
  %50 = getelementptr inbounds [128 x i8], [128 x i8]* %15, i64 0, i64 8
  %51 = bitcast i8* %50 to i64*
  %52 = bitcast i8* %49 to i64*
  %53 = getelementptr inbounds [704 x i8], [704 x i8]* %10, i64 0, i64 48
  %54 = getelementptr inbounds [128 x i8], [128 x i8]* %15, i64 0, i64 56
  %55 = bitcast i8* %54 to i64*
  %56 = bitcast i8* %53 to i64*
  %57 = getelementptr inbounds [704 x i8], [704 x i8]* %10, i64 0, i64 56
  %58 = getelementptr inbounds [128 x i8], [128 x i8]* %15, i64 0, i64 16
  %59 = bitcast i8* %58 to i64*
  %60 = bitcast i8* %57 to i64*
  %61 = getelementptr inbounds [64 x i16], [64 x i16]* %11, i64 0, i64 0
  %62 = getelementptr inbounds [64 x i16], [64 x i16]* %11, i64 0, i64 24
  %63 = bitcast i16* %62 to i8*
  %64 = getelementptr inbounds [128 x i16], [128 x i16]* %16, i64 0, i64 8
  %65 = bitcast i16* %64 to i8*
  %66 = getelementptr inbounds [64 x i16], [64 x i16]* %11, i64 0, i64 40
  %67 = bitcast i16* %66 to i8*
  %68 = getelementptr inbounds [128 x i16], [128 x i16]* %16, i64 0, i64 16
  %69 = bitcast i16* %68 to i8*
  %70 = getelementptr inbounds [64 x i16], [64 x i16]* %11, i64 0, i64 56
  %71 = bitcast i16* %70 to i8*
  %72 = getelementptr inbounds [128 x i16], [128 x i16]* %16, i64 0, i64 24
  %73 = bitcast i16* %72 to i8*
  %74 = getelementptr inbounds [128 x i16], [128 x i16]* %16, i64 0, i64 48
  %75 = bitcast i16* %74 to i8*
  %76 = getelementptr inbounds [64 x i16], [64 x i16]* %11, i64 0, i64 32
  %77 = bitcast i16* %76 to i8*
  %78 = getelementptr inbounds [128 x i16], [128 x i16]* %16, i64 0, i64 56
  %79 = bitcast i16* %78 to i8*
  %80 = getelementptr inbounds [64 x i16], [64 x i16]* %11, i64 0, i64 48
  %81 = bitcast i16* %80 to i8*
  %82 = getelementptr inbounds [128 x i16], [128 x i16]* %16, i64 0, i64 64
  %83 = bitcast i8* %41 to i64*
  %84 = bitcast [704 x i8]* %10 to i64*
  %85 = getelementptr inbounds [704 x i8], [704 x i8]* %10, i64 0, i64 64
  %86 = getelementptr inbounds [128 x i8], [128 x i8]* %15, i64 0, i64 32
  %87 = bitcast i8* %86 to i64*
  %88 = bitcast i8* %85 to i64*
  %89 = getelementptr inbounds [704 x i8], [704 x i8]* %10, i64 0, i64 128
  %90 = getelementptr inbounds [128 x i8], [128 x i8]* %15, i64 0, i64 40
  %91 = bitcast i8* %90 to i64*
  %92 = bitcast i8* %89 to i64*
  %93 = getelementptr inbounds [704 x i8], [704 x i8]* %10, i64 0, i64 192
  %94 = bitcast i8* %93 to i64*
  %95 = getelementptr inbounds [704 x i8], [704 x i8]* %10, i64 0, i64 384
  %96 = bitcast i8* %95 to i64*
  %97 = getelementptr inbounds [704 x i8], [704 x i8]* %10, i64 0, i64 256
  %98 = getelementptr inbounds [704 x i8], [704 x i8]* %10, i64 0, i64 448
  %99 = getelementptr inbounds [128 x i8], [128 x i8]* %15, i64 0, i64 1
  %100 = getelementptr inbounds [704 x i8], [704 x i8]* %10, i64 0, i64 136
  %101 = getelementptr inbounds [128 x i8], [128 x i8]* %15, i64 0, i64 9
  %102 = getelementptr inbounds [704 x i8], [704 x i8]* %10, i64 0, i64 264
  %103 = getelementptr inbounds [128 x i8], [128 x i8]* %15, i64 0, i64 17
  %104 = getelementptr inbounds [704 x i8], [704 x i8]* %10, i64 0, i64 456
  %105 = getelementptr inbounds [128 x i8], [128 x i8]* %15, i64 0, i64 2
  %106 = getelementptr inbounds [704 x i8], [704 x i8]* %10, i64 0, i64 144
  %107 = getelementptr inbounds [128 x i8], [128 x i8]* %15, i64 0, i64 10
  %108 = getelementptr inbounds [704 x i8], [704 x i8]* %10, i64 0, i64 272
  %109 = getelementptr inbounds [128 x i8], [128 x i8]* %15, i64 0, i64 18
  %110 = getelementptr inbounds [704 x i8], [704 x i8]* %10, i64 0, i64 464
  %111 = getelementptr inbounds [128 x i8], [128 x i8]* %15, i64 0, i64 3
  %112 = getelementptr inbounds [704 x i8], [704 x i8]* %10, i64 0, i64 152
  %113 = getelementptr inbounds [128 x i8], [128 x i8]* %15, i64 0, i64 11
  %114 = getelementptr inbounds [704 x i8], [704 x i8]* %10, i64 0, i64 280
  %115 = getelementptr inbounds [128 x i8], [128 x i8]* %15, i64 0, i64 19
  %116 = getelementptr inbounds [704 x i8], [704 x i8]* %10, i64 0, i64 472
  %117 = getelementptr inbounds [128 x i8], [128 x i8]* %15, i64 0, i64 4
  %118 = getelementptr inbounds [704 x i8], [704 x i8]* %10, i64 0, i64 160
  %119 = getelementptr inbounds [128 x i8], [128 x i8]* %15, i64 0, i64 12
  %120 = getelementptr inbounds [704 x i8], [704 x i8]* %10, i64 0, i64 288
  %121 = getelementptr inbounds [128 x i8], [128 x i8]* %15, i64 0, i64 20
  %122 = getelementptr inbounds [704 x i8], [704 x i8]* %10, i64 0, i64 480
  %123 = getelementptr inbounds [128 x i8], [128 x i8]* %15, i64 0, i64 5
  %124 = getelementptr inbounds [704 x i8], [704 x i8]* %10, i64 0, i64 168
  %125 = getelementptr inbounds [128 x i8], [128 x i8]* %15, i64 0, i64 13
  %126 = getelementptr inbounds [704 x i8], [704 x i8]* %10, i64 0, i64 296
  %127 = getelementptr inbounds [128 x i8], [128 x i8]* %15, i64 0, i64 21
  %128 = getelementptr inbounds [704 x i8], [704 x i8]* %10, i64 0, i64 488
  %129 = getelementptr inbounds [128 x i8], [128 x i8]* %15, i64 0, i64 6
  %130 = getelementptr inbounds [704 x i8], [704 x i8]* %10, i64 0, i64 176
  %131 = getelementptr inbounds [128 x i8], [128 x i8]* %15, i64 0, i64 14
  %132 = getelementptr inbounds [704 x i8], [704 x i8]* %10, i64 0, i64 304
  %133 = getelementptr inbounds [128 x i8], [128 x i8]* %15, i64 0, i64 22
  %134 = getelementptr inbounds [704 x i8], [704 x i8]* %10, i64 0, i64 496
  %135 = getelementptr inbounds [128 x i8], [128 x i8]* %15, i64 0, i64 7
  %136 = getelementptr inbounds [704 x i8], [704 x i8]* %10, i64 0, i64 184
  %137 = getelementptr inbounds [128 x i8], [128 x i8]* %15, i64 0, i64 15
  %138 = getelementptr inbounds [704 x i8], [704 x i8]* %10, i64 0, i64 312
  %139 = getelementptr inbounds [128 x i8], [128 x i8]* %15, i64 0, i64 23
  %140 = getelementptr inbounds [704 x i8], [704 x i8]* %10, i64 0, i64 504
  %141 = getelementptr inbounds i8, i8* %1, i64 4
  %142 = xor i64 %21, -1
  br label %143

143:                                              ; preds = %1103, %19
  %144 = phi i8* [ %1, %19 ], [ %148, %1103 ]
  %145 = phi i64 [ %2, %19 ], [ %1104, %1103 ]
  %146 = icmp ult i64 %145, 131072
  %147 = select i1 %146, i64 %145, i64 131072
  %148 = getelementptr inbounds i8, i8* %144, i64 %147
  %149 = icmp ugt i64 %147, 15
  br i1 %149, label %150, label %595, !prof !33

150:                                              ; preds = %143
  %151 = add nsw i64 %147, -4
  %152 = add i64 %145, -16
  %153 = icmp ult i64 %151, %152
  %154 = select i1 %153, i64 %151, i64 %152
  %155 = getelementptr inbounds i8, i8* %144, i64 %154
  %156 = ptrtoint i8* %148 to i64
  br label %157

157:                                              ; preds = %585, %150
  %158 = phi i64 [ %20, %150 ], [ %586, %585 ]
  %159 = phi i64 [ %21, %150 ], [ %318, %585 ]
  %160 = phi i8* [ %144, %150 ], [ %587, %585 ]
  %161 = phi i32 [ -1, %150 ], [ %588, %585 ]
  %162 = getelementptr inbounds i8, i8* %160, i64 1
  %163 = bitcast i8* %162 to i64*
  %164 = load i64, i64* %163, align 8
  %165 = sext i32 %161 to i64
  %166 = sub nsw i64 0, %165
  %167 = icmp slt i32 %161, 1
  br label %168

168:                                              ; preds = %206, %157
  %169 = phi i64 [ %164, %157 ], [ %181, %206 ]
  %170 = phi i32 [ 32, %157 ], [ %174, %206 ]
  %171 = phi i8* [ %162, %157 ], [ %177, %206 ]
  %172 = mul i64 %169, 2176830425094160384
  %173 = lshr i64 %172, 54
  %174 = add i32 %170, 1
  %175 = lshr i32 %170, 5
  %176 = zext i32 %175 to i64
  %177 = getelementptr inbounds i8, i8* %171, i64 %176
  %178 = icmp ugt i8* %177, %155
  br i1 %178, label %595, label %179, !prof !34

179:                                              ; preds = %168
  %180 = bitcast i8* %177 to i64*
  %181 = load i64, i64* %180, align 8
  %182 = getelementptr inbounds i8, i8* %171, i64 %166
  %183 = bitcast i8* %171 to i32*
  %184 = load i32, i32* %183, align 4
  %185 = bitcast i8* %182 to i32*
  %186 = load i32, i32* %185, align 4
  %187 = icmp ne i32 %184, %186
  %188 = or i1 %167, %187
  br i1 %188, label %194, label %189, !prof !35

189:                                              ; preds = %179
  %190 = ptrtoint i8* %171 to i64
  %191 = sub i64 %190, %22
  %192 = trunc i64 %191 to i32
  %193 = getelementptr inbounds i32, i32* %5, i64 %173
  store i32 %192, i32* %193, align 4
  br label %209

194:                                              ; preds = %179
  %195 = getelementptr inbounds i32, i32* %5, i64 %173
  %196 = load i32, i32* %195, align 4
  %197 = sext i32 %196 to i64
  %198 = getelementptr inbounds i8, i8* %1, i64 %197
  %199 = ptrtoint i8* %171 to i64
  %200 = sub i64 %199, %22
  %201 = trunc i64 %200 to i32
  store i32 %201, i32* %195, align 4
  %202 = load i32, i32* %183, align 4
  %203 = bitcast i8* %198 to i32*
  %204 = load i32, i32* %203, align 4
  %205 = icmp eq i32 %202, %204
  br i1 %205, label %207, label %206

206:                                              ; preds = %194, %209
  br label %168

207:                                              ; preds = %194
  %208 = ptrtoint i8* %171 to i64
  br label %209

209:                                              ; preds = %207, %189
  %210 = phi i64 [ %190, %189 ], [ %208, %207 ]
  %211 = phi i8* [ %182, %189 ], [ %198, %207 ]
  %212 = ptrtoint i8* %211 to i64
  %213 = sub i64 %210, %212
  %214 = icmp sgt i64 %213, 262128
  br i1 %214, label %206, label %215

215:                                              ; preds = %209
  %216 = getelementptr inbounds i8, i8* %211, i64 4
  %217 = getelementptr inbounds i8, i8* %171, i64 4
  %218 = sub i64 %156, %210
  %219 = add i64 %218, -4
  %220 = lshr i64 %219, 3
  %221 = icmp eq i64 %220, 0
  br i1 %221, label %242, label %222, !prof !34

222:                                              ; preds = %215, %232
  %223 = phi i64 [ %235, %232 ], [ %220, %215 ]
  %224 = phi i8* [ %233, %232 ], [ %217, %215 ]
  %225 = phi i64 [ %234, %232 ], [ 0, %215 ]
  %226 = bitcast i8* %224 to i64*
  %227 = load i64, i64* %226, align 8
  %228 = getelementptr inbounds i8, i8* %216, i64 %225
  %229 = bitcast i8* %228 to i64*
  %230 = load i64, i64* %229, align 8
  %231 = icmp eq i64 %227, %230
  br i1 %231, label %232, label %237, !prof !34

232:                                              ; preds = %222
  %233 = getelementptr inbounds i8, i8* %224, i64 8
  %234 = add nuw i64 %225, 8
  %235 = add nsw i64 %223, -1
  %236 = icmp eq i64 %235, 0
  br i1 %236, label %242, label %222, !prof !34

237:                                              ; preds = %222
  %238 = xor i64 %230, %227
  %239 = call i64 @llvm.cttz.i64(i64 %238, i1 true) #6, !range !36
  %240 = lshr i64 %239, 3
  %241 = or i64 %240, %225
  br label %255

242:                                              ; preds = %232, %215
  %243 = phi i64 [ 0, %215 ], [ %234, %232 ]
  %244 = phi i8* [ %217, %215 ], [ %233, %232 ]
  %245 = and i64 %219, 7
  %246 = icmp eq i64 %245, 0
  br i1 %246, label %255, label %247

247:                                              ; preds = %242
  %248 = getelementptr inbounds i8, i8* %216, i64 %243
  %249 = load i8, i8* %248, align 1
  %250 = load i8, i8* %244, align 1
  %251 = icmp eq i8 %249, %250
  br i1 %251, label %252, label %255, !prof !33

252:                                              ; preds = %247
  %253 = add i64 %243, 1
  %254 = icmp eq i64 %245, 1
  br i1 %254, label %255, label %1107

255:                                              ; preds = %1152, %252, %247, %1107, %1113, %1116, %1122, %1125, %1131, %1134, %1140, %1143, %1149, %242, %237
  %256 = phi i64 [ %241, %237 ], [ %243, %242 ], [ %253, %252 ], [ %243, %247 ], [ %253, %1107 ], [ %1114, %1113 ], [ %1114, %1116 ], [ %1123, %1122 ], [ %1123, %1125 ], [ %1132, %1131 ], [ %1132, %1134 ], [ %1141, %1140 ], [ %1141, %1143 ], [ %1150, %1149 ], [ %1159, %1152 ]
  %257 = add i64 %256, 4
  %258 = trunc i64 %213 to i32
  %259 = ptrtoint i8* %160 to i64
  %260 = sub i64 %210, %259
  %261 = trunc i64 %260 to i32
  %262 = getelementptr inbounds i8, i8* %171, i64 %257
  %263 = icmp ult i32 %261, 6
  br i1 %263, label %264, label %266

264:                                              ; preds = %255
  %265 = inttoptr i64 %158 to i32*
  store i32 %261, i32* %265, align 4
  br label %311

266:                                              ; preds = %255
  %267 = icmp ult i32 %261, 130
  br i1 %267, label %268, label %281

268:                                              ; preds = %266
  %269 = add nsw i32 %261, -2
  %270 = call i32 @llvm.ctlz.i32(i32 %269, i1 true) #6, !range !2
  %271 = sub nsw i32 30, %270
  %272 = lshr i32 %269, %271
  %273 = shl nsw i32 %271, 1
  %274 = add nuw nsw i32 %272, 2
  %275 = add i32 %274, %273
  %276 = shl i32 %272, %271
  %277 = sub i32 %269, %276
  %278 = shl i32 %277, 8
  %279 = or i32 %278, %275
  %280 = inttoptr i64 %158 to i32*
  store i32 %279, i32* %280, align 4
  br label %311

281:                                              ; preds = %266
  %282 = icmp ult i32 %261, 2114
  br i1 %282, label %283, label %293

283:                                              ; preds = %281
  %284 = add nsw i32 %261, -66
  %285 = call i32 @llvm.ctlz.i32(i32 %284, i1 true) #6, !range !2
  %286 = xor i32 %285, 31
  %287 = add nuw nsw i32 %286, 10
  %288 = shl i32 1, %286
  %289 = sub i32 %284, %288
  %290 = shl i32 %289, 8
  %291 = or i32 %290, %287
  %292 = inttoptr i64 %158 to i32*
  store i32 %291, i32* %292, align 4
  br label %311

293:                                              ; preds = %281
  %294 = icmp ult i32 %261, 6210
  br i1 %294, label %295, label %300

295:                                              ; preds = %293
  %296 = shl i32 %261, 8
  %297 = add nsw i32 %296, -541184
  %298 = or i32 %297, 21
  %299 = inttoptr i64 %158 to i32*
  store i32 %298, i32* %299, align 4
  br label %311

300:                                              ; preds = %293
  %301 = icmp ult i32 %261, 22594
  %302 = shl i32 %261, 8
  br i1 %301, label %303, label %307

303:                                              ; preds = %300
  %304 = add i32 %302, -1589760
  %305 = or i32 %304, 22
  %306 = inttoptr i64 %158 to i32*
  store i32 %305, i32* %306, align 4
  br label %311

307:                                              ; preds = %300
  %308 = add i32 %302, -5784064
  %309 = or i32 %308, 23
  %310 = inttoptr i64 %158 to i32*
  store i32 %309, i32* %310, align 4
  br label %311

311:                                              ; preds = %307, %303, %295, %283, %268, %264
  %312 = phi i32* [ %310, %307 ], [ %306, %303 ], [ %299, %295 ], [ %292, %283 ], [ %280, %268 ], [ %265, %264 ]
  %313 = getelementptr inbounds i32, i32* %312, i64 1
  %314 = inttoptr i64 %159 to i8*
  %315 = shl i64 %260, 32
  %316 = ashr exact i64 %315, 32
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %314, i8* align 1 %160, i64 %316, i1 false) #6
  %317 = getelementptr inbounds i8, i8* %314, i64 %316
  %318 = ptrtoint i8* %317 to i64
  %319 = icmp eq i32 %161, %258
  br i1 %319, label %336, label %320

320:                                              ; preds = %311
  %321 = add i32 %258, 3
  %322 = call i32 @llvm.ctlz.i32(i32 %321, i1 true) #6, !range !2
  %323 = xor i32 %322, 31
  %324 = add nsw i32 %323, -1
  %325 = lshr i32 %321, %324
  %326 = and i32 %325, 1
  %327 = or i32 %326, 2
  %328 = shl i32 %327, %324
  %329 = shl nuw nsw i32 %323, 1
  %330 = add nsw i32 %329, -4
  %331 = or i32 %326, %330
  %332 = add nsw i32 %331, 80
  %333 = sub i32 %321, %328
  %334 = shl i32 %333, 8
  %335 = or i32 %334, %332
  br label %336

336:                                              ; preds = %320, %311
  %337 = phi i32 [ %335, %320 ], [ 64, %311 ]
  %338 = phi i32 [ %258, %320 ], [ %161, %311 ]
  store i32 %337, i32* %313, align 4
  %339 = getelementptr inbounds i32, i32* %312, i64 2
  %340 = icmp ult i64 %257, 12
  br i1 %340, label %341, label %344

341:                                              ; preds = %336
  %342 = trunc i64 %257 to i32
  %343 = add nuw nsw i32 %342, 20
  store i32 %343, i32* %339, align 4
  br label %393

344:                                              ; preds = %336
  %345 = icmp ult i64 %257, 72
  br i1 %345, label %346, label %361

346:                                              ; preds = %344
  %347 = add nsw i64 %256, -4
  %348 = trunc i64 %347 to i32
  %349 = call i32 @llvm.ctlz.i32(i32 %348, i1 true) #6, !range !2
  %350 = sub nsw i32 30, %349
  %351 = zext i32 %350 to i64
  %352 = lshr i64 %347, %351
  %353 = shl nuw nsw i64 %351, 1
  %354 = add nuw nsw i64 %352, 28
  %355 = add nuw nsw i64 %354, %353
  %356 = shl i64 %352, %351
  %357 = sub i64 %347, %356
  %358 = shl i64 %357, 8
  %359 = or i64 %358, %355
  %360 = trunc i64 %359 to i32
  store i32 %360, i32* %339, align 4
  br label %393

361:                                              ; preds = %344
  %362 = icmp ult i64 %257, 136
  br i1 %362, label %363, label %372

363:                                              ; preds = %361
  %364 = add nsw i64 %256, -4
  %365 = lshr i64 %364, 5
  %366 = add nuw nsw i64 %365, 54
  %367 = shl i64 %364, 8
  %368 = and i64 %367, 7936
  %369 = or i64 %366, %368
  %370 = trunc i64 %369 to i32
  store i32 %370, i32* %339, align 4
  %371 = getelementptr inbounds i32, i32* %312, i64 3
  store i32 64, i32* %371, align 4
  br label %393

372:                                              ; preds = %361
  %373 = icmp ult i64 %257, 2120
  br i1 %373, label %374, label %387

374:                                              ; preds = %372
  %375 = add nsw i64 %256, -68
  %376 = trunc i64 %375 to i32
  %377 = call i32 @llvm.ctlz.i32(i32 %376, i1 true) #6, !range !2
  %378 = xor i32 %377, 31
  %379 = zext i32 %378 to i64
  %380 = add nuw nsw i64 %379, 52
  %381 = shl i64 1, %379
  %382 = sub i64 %375, %381
  %383 = shl i64 %382, 8
  %384 = or i64 %383, %380
  %385 = trunc i64 %384 to i32
  store i32 %385, i32* %339, align 4
  %386 = getelementptr inbounds i32, i32* %312, i64 3
  store i32 64, i32* %386, align 4
  br label %393

387:                                              ; preds = %372
  %388 = trunc i64 %257 to i32
  %389 = shl i32 %388, 8
  %390 = add i32 %389, -542720
  %391 = or i32 %390, 63
  store i32 %391, i32* %339, align 4
  %392 = getelementptr inbounds i32, i32* %312, i64 3
  store i32 64, i32* %392, align 4
  br label %393

393:                                              ; preds = %387, %374, %363, %346, %341
  %394 = phi i64 [ 4, %387 ], [ 4, %374 ], [ 4, %363 ], [ 3, %346 ], [ 3, %341 ]
  %395 = getelementptr inbounds i32, i32* %312, i64 %394
  %396 = ptrtoint i32* %395 to i64
  %397 = icmp ult i8* %262, %155
  br i1 %397, label %398, label %592, !prof !33

398:                                              ; preds = %393
  %399 = getelementptr inbounds i8, i8* %262, i64 -3
  %400 = bitcast i8* %399 to i64*
  %401 = load i64, i64* %400, align 8
  %402 = lshr i64 %401, 24
  %403 = mul i64 %402, 2176830425094160384
  %404 = mul i64 %401, 2176830425094160384
  %405 = lshr i64 %404, 54
  %406 = ptrtoint i8* %262 to i64
  %407 = sub i64 %406, %22
  %408 = trunc i64 %407 to i32
  %409 = getelementptr inbounds i32, i32* %5, i64 %405
  %410 = lshr i64 %401, 8
  %411 = mul i64 %410, 2176830425094160384
  %412 = lshr i64 %411, 54
  %413 = add i32 %408, -2
  %414 = getelementptr inbounds i32, i32* %5, i64 %412
  store i32 %413, i32* %414, align 4
  %415 = add i32 %408, -1
  store i32 %415, i32* %409, align 4
  %416 = lshr i64 %403, 54
  %417 = getelementptr inbounds i32, i32* %5, i64 %416
  %418 = load i32, i32* %417, align 4
  store i32 %408, i32* %417, align 4
  %419 = sext i32 %418 to i64
  %420 = getelementptr inbounds i8, i8* %1, i64 %419
  %421 = ptrtoint i8* %420 to i64
  %422 = sub i64 %406, %421
  %423 = icmp slt i64 %422, 262129
  br i1 %423, label %424, label %585

424:                                              ; preds = %398
  %425 = bitcast i8* %262 to i32*
  %426 = load i32, i32* %425, align 4
  %427 = bitcast i8* %420 to i32*
  %428 = load i32, i32* %427, align 4
  %429 = icmp eq i32 %426, %428
  br i1 %429, label %436, label %585

430:                                              ; preds = %551
  %431 = bitcast i8* %484 to i32*
  %432 = load i32, i32* %431, align 4
  %433 = bitcast i8* %578 to i32*
  %434 = load i32, i32* %433, align 4
  %435 = icmp eq i32 %432, %434
  br i1 %435, label %436, label %582

436:                                              ; preds = %424, %430
  %437 = phi i8* [ %484, %430 ], [ %262, %424 ]
  %438 = phi i64 [ %577, %430 ], [ %419, %424 ]
  %439 = phi i64 [ %559, %430 ], [ %406, %424 ]
  %440 = phi i64 [ %580, %430 ], [ %422, %424 ]
  %441 = phi i64 [ %549, %430 ], [ %396, %424 ]
  %442 = getelementptr inbounds i8, i8* %141, i64 %438
  %443 = getelementptr inbounds i8, i8* %437, i64 4
  %444 = sub i64 %156, %439
  %445 = add i64 %444, -4
  %446 = lshr i64 %445, 3
  %447 = icmp eq i64 %446, 0
  br i1 %447, label %468, label %448, !prof !34

448:                                              ; preds = %436, %458
  %449 = phi i64 [ %461, %458 ], [ %446, %436 ]
  %450 = phi i8* [ %459, %458 ], [ %443, %436 ]
  %451 = phi i64 [ %460, %458 ], [ 0, %436 ]
  %452 = bitcast i8* %450 to i64*
  %453 = load i64, i64* %452, align 8
  %454 = getelementptr inbounds i8, i8* %442, i64 %451
  %455 = bitcast i8* %454 to i64*
  %456 = load i64, i64* %455, align 8
  %457 = icmp eq i64 %453, %456
  br i1 %457, label %458, label %463, !prof !34

458:                                              ; preds = %448
  %459 = getelementptr inbounds i8, i8* %450, i64 8
  %460 = add nuw i64 %451, 8
  %461 = add nsw i64 %449, -1
  %462 = icmp eq i64 %461, 0
  br i1 %462, label %468, label %448, !prof !34

463:                                              ; preds = %448
  %464 = xor i64 %456, %453
  %465 = call i64 @llvm.cttz.i64(i64 %464, i1 true) #6, !range !36
  %466 = lshr i64 %465, 3
  %467 = or i64 %466, %451
  br label %481

468:                                              ; preds = %458, %436
  %469 = phi i64 [ 0, %436 ], [ %460, %458 ]
  %470 = phi i8* [ %443, %436 ], [ %459, %458 ]
  %471 = and i64 %445, 7
  %472 = icmp eq i64 %471, 0
  br i1 %472, label %481, label %473

473:                                              ; preds = %468
  %474 = getelementptr inbounds i8, i8* %442, i64 %469
  %475 = load i8, i8* %474, align 1
  %476 = load i8, i8* %470, align 1
  %477 = icmp eq i8 %475, %476
  br i1 %477, label %478, label %481, !prof !33

478:                                              ; preds = %473
  %479 = add i64 %469, 1
  %480 = icmp eq i64 %471, 1
  br i1 %480, label %481, label %1160

481:                                              ; preds = %1205, %478, %473, %1160, %1166, %1169, %1175, %1178, %1184, %1187, %1193, %1196, %1202, %468, %463
  %482 = phi i64 [ %467, %463 ], [ %469, %468 ], [ %479, %478 ], [ %469, %473 ], [ %479, %1160 ], [ %1167, %1166 ], [ %1167, %1169 ], [ %1176, %1175 ], [ %1176, %1178 ], [ %1185, %1184 ], [ %1185, %1187 ], [ %1194, %1193 ], [ %1194, %1196 ], [ %1203, %1202 ], [ %1212, %1205 ]
  %483 = add i64 %482, 4
  %484 = getelementptr inbounds i8, i8* %437, i64 %483
  %485 = trunc i64 %440 to i32
  %486 = icmp ult i64 %483, 10
  br i1 %486, label %487, label %491

487:                                              ; preds = %481
  %488 = trunc i64 %483 to i32
  %489 = add nuw nsw i32 %488, 38
  %490 = inttoptr i64 %441 to i32*
  store i32 %489, i32* %490, align 4
  br label %530

491:                                              ; preds = %481
  %492 = icmp ult i64 %483, 134
  br i1 %492, label %493, label %509

493:                                              ; preds = %491
  %494 = add nsw i64 %482, -2
  %495 = trunc i64 %494 to i32
  %496 = call i32 @llvm.ctlz.i32(i32 %495, i1 true) #6, !range !2
  %497 = sub nsw i32 30, %496
  %498 = zext i32 %497 to i64
  %499 = lshr i64 %494, %498
  %500 = shl nuw nsw i64 %498, 1
  %501 = add nuw nsw i64 %499, 44
  %502 = add nuw nsw i64 %501, %500
  %503 = shl i64 %499, %498
  %504 = sub i64 %494, %503
  %505 = shl i64 %504, 8
  %506 = or i64 %505, %502
  %507 = trunc i64 %506 to i32
  %508 = inttoptr i64 %441 to i32*
  store i32 %507, i32* %508, align 4
  br label %530

509:                                              ; preds = %491
  %510 = icmp ult i64 %483, 2118
  br i1 %510, label %511, label %524

511:                                              ; preds = %509
  %512 = add nsw i64 %482, -66
  %513 = trunc i64 %512 to i32
  %514 = call i32 @llvm.ctlz.i32(i32 %513, i1 true) #6, !range !2
  %515 = xor i32 %514, 31
  %516 = zext i32 %515 to i64
  %517 = add nuw nsw i64 %516, 52
  %518 = shl i64 1, %516
  %519 = sub i64 %512, %518
  %520 = shl i64 %519, 8
  %521 = or i64 %520, %517
  %522 = trunc i64 %521 to i32
  %523 = inttoptr i64 %441 to i32*
  store i32 %522, i32* %523, align 4
  br label %530

524:                                              ; preds = %509
  %525 = trunc i64 %483 to i32
  %526 = shl i32 %525, 8
  %527 = add i32 %526, -542208
  %528 = or i32 %527, 63
  %529 = inttoptr i64 %441 to i32*
  store i32 %528, i32* %529, align 4
  br label %530

530:                                              ; preds = %524, %511, %493, %487
  %531 = phi i32* [ %529, %524 ], [ %523, %511 ], [ %508, %493 ], [ %490, %487 ]
  %532 = getelementptr inbounds i32, i32* %531, i64 1
  %533 = add i32 %485, 3
  %534 = call i32 @llvm.ctlz.i32(i32 %533, i1 true) #6, !range !2
  %535 = xor i32 %534, 31
  %536 = add nsw i32 %535, -1
  %537 = lshr i32 %533, %536
  %538 = and i32 %537, 1
  %539 = or i32 %538, 2
  %540 = shl i32 %539, %536
  %541 = shl nuw nsw i32 %535, 1
  %542 = add nsw i32 %541, -4
  %543 = or i32 %538, %542
  %544 = add nsw i32 %543, 80
  %545 = sub i32 %533, %540
  %546 = shl i32 %545, 8
  %547 = or i32 %546, %544
  store i32 %547, i32* %532, align 4
  %548 = getelementptr inbounds i32, i32* %531, i64 2
  %549 = ptrtoint i32* %548 to i64
  %550 = icmp ult i8* %484, %155
  br i1 %550, label %551, label %589, !prof !33

551:                                              ; preds = %530
  %552 = getelementptr inbounds i8, i8* %484, i64 -3
  %553 = bitcast i8* %552 to i64*
  %554 = load i64, i64* %553, align 8
  %555 = lshr i64 %554, 24
  %556 = mul i64 %555, 2176830425094160384
  %557 = mul i64 %554, 2176830425094160384
  %558 = lshr i64 %557, 54
  %559 = ptrtoint i8* %484 to i64
  %560 = sub i64 %559, %22
  %561 = trunc i64 %560 to i32
  %562 = add i32 %561, -3
  %563 = getelementptr inbounds i32, i32* %5, i64 %558
  store i32 %562, i32* %563, align 4
  %564 = lshr i64 %554, 8
  %565 = mul i64 %564, 2176830425094160384
  %566 = lshr i64 %565, 54
  %567 = add i32 %561, -2
  %568 = getelementptr inbounds i32, i32* %5, i64 %566
  store i32 %567, i32* %568, align 4
  %569 = lshr i64 %554, 16
  %570 = mul i64 %569, 2176830425094160384
  %571 = lshr i64 %570, 54
  %572 = add i32 %561, -1
  %573 = getelementptr inbounds i32, i32* %5, i64 %571
  store i32 %572, i32* %573, align 4
  %574 = lshr i64 %556, 54
  %575 = getelementptr inbounds i32, i32* %5, i64 %574
  %576 = load i32, i32* %575, align 4
  store i32 %561, i32* %575, align 4
  %577 = sext i32 %576 to i64
  %578 = getelementptr inbounds i8, i8* %1, i64 %577
  %579 = ptrtoint i8* %578 to i64
  %580 = sub i64 %559, %579
  %581 = icmp slt i64 %580, 262129
  br i1 %581, label %430, label %582

582:                                              ; preds = %551, %430
  %583 = trunc i64 %440 to i32
  %584 = ptrtoint i32* %548 to i64
  br label %585

585:                                              ; preds = %582, %424, %398
  %586 = phi i64 [ %396, %398 ], [ %396, %424 ], [ %584, %582 ]
  %587 = phi i8* [ %262, %398 ], [ %262, %424 ], [ %484, %582 ]
  %588 = phi i32 [ %338, %398 ], [ %338, %424 ], [ %583, %582 ]
  br label %157

589:                                              ; preds = %530
  %590 = ptrtoint i8* %317 to i64
  %591 = ptrtoint i32* %548 to i64
  br label %595

592:                                              ; preds = %393
  %593 = ptrtoint i8* %317 to i64
  %594 = ptrtoint i32* %395 to i64
  br label %595

595:                                              ; preds = %168, %592, %589, %143
  %596 = phi i64 [ %20, %143 ], [ %591, %589 ], [ %594, %592 ], [ %158, %168 ]
  %597 = phi i64 [ %21, %143 ], [ %590, %589 ], [ %593, %592 ], [ %159, %168 ]
  %598 = phi i8* [ %144, %143 ], [ %484, %589 ], [ %262, %592 ], [ %160, %168 ]
  %599 = icmp ult i8* %598, %148
  br i1 %599, label %600, label %661

600:                                              ; preds = %595
  %601 = ptrtoint i8* %148 to i64
  %602 = ptrtoint i8* %598 to i64
  %603 = sub i64 %601, %602
  %604 = trunc i64 %603 to i32
  %605 = icmp ult i32 %604, 6
  br i1 %605, label %606, label %608

606:                                              ; preds = %600
  %607 = inttoptr i64 %596 to i32*
  store i32 %604, i32* %607, align 4
  br label %653

608:                                              ; preds = %600
  %609 = icmp ult i32 %604, 130
  br i1 %609, label %610, label %623

610:                                              ; preds = %608
  %611 = add nsw i32 %604, -2
  %612 = call i32 @llvm.ctlz.i32(i32 %611, i1 true) #6, !range !2
  %613 = sub nsw i32 30, %612
  %614 = lshr i32 %611, %613
  %615 = shl nsw i32 %613, 1
  %616 = add nuw nsw i32 %614, 2
  %617 = add i32 %616, %615
  %618 = shl i32 %614, %613
  %619 = sub i32 %611, %618
  %620 = shl i32 %619, 8
  %621 = or i32 %620, %617
  %622 = inttoptr i64 %596 to i32*
  store i32 %621, i32* %622, align 4
  br label %653

623:                                              ; preds = %608
  %624 = icmp ult i32 %604, 2114
  br i1 %624, label %625, label %635

625:                                              ; preds = %623
  %626 = add nsw i32 %604, -66
  %627 = call i32 @llvm.ctlz.i32(i32 %626, i1 true) #6, !range !2
  %628 = xor i32 %627, 31
  %629 = add nuw nsw i32 %628, 10
  %630 = shl i32 1, %628
  %631 = sub i32 %626, %630
  %632 = shl i32 %631, 8
  %633 = or i32 %632, %629
  %634 = inttoptr i64 %596 to i32*
  store i32 %633, i32* %634, align 4
  br label %653

635:                                              ; preds = %623
  %636 = icmp ult i32 %604, 6210
  br i1 %636, label %637, label %642

637:                                              ; preds = %635
  %638 = shl i32 %604, 8
  %639 = add nsw i32 %638, -541184
  %640 = or i32 %639, 21
  %641 = inttoptr i64 %596 to i32*
  store i32 %640, i32* %641, align 4
  br label %653

642:                                              ; preds = %635
  %643 = icmp ult i32 %604, 22594
  %644 = shl i32 %604, 8
  br i1 %643, label %645, label %649

645:                                              ; preds = %642
  %646 = add i32 %644, -1589760
  %647 = or i32 %646, 22
  %648 = inttoptr i64 %596 to i32*
  store i32 %647, i32* %648, align 4
  br label %653

649:                                              ; preds = %642
  %650 = add i32 %644, -5784064
  %651 = or i32 %650, 23
  %652 = inttoptr i64 %596 to i32*
  store i32 %651, i32* %652, align 4
  br label %653

653:                                              ; preds = %649, %645, %637, %625, %610, %606
  %654 = phi i32* [ %652, %649 ], [ %648, %645 ], [ %641, %637 ], [ %634, %625 ], [ %622, %610 ], [ %607, %606 ]
  %655 = getelementptr inbounds i32, i32* %654, i64 1
  %656 = ptrtoint i32* %655 to i64
  %657 = inttoptr i64 %597 to i8*
  %658 = and i64 %603, 4294967295
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %657, i8* align 1 %598, i64 %658, i1 false) #6
  %659 = getelementptr inbounds i8, i8* %657, i64 %658
  %660 = ptrtoint i8* %659 to i64
  br label %661

661:                                              ; preds = %653, %595
  %662 = phi i64 [ %656, %653 ], [ %596, %595 ]
  %663 = phi i64 [ %660, %653 ], [ %597, %595 ]
  %664 = sub i64 %663, %21
  %665 = uitofp i64 %147 to double
  %666 = uitofp i64 %664 to double
  %667 = fmul double %665, 0x3FEF5C28F5C28F5C
  %668 = fcmp ogt double %667, %666
  br i1 %668, label %743, label %669

669:                                              ; preds = %661
  call void @llvm.lifetime.start.p0i8(i64 1024, i8* nonnull %23) #6
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %23, i8 0, i64 1024, i1 false) #6
  %670 = fmul double %665, 8.000000e+00
  %671 = fmul double %670, 0x3FEF5C28F5C28F5C
  %672 = fdiv double %671, 4.300000e+01
  %673 = icmp eq i64 %147, 0
  br i1 %673, label %684, label %674

674:                                              ; preds = %669, %674
  %675 = phi i64 [ %682, %674 ], [ 0, %669 ]
  %676 = getelementptr inbounds i8, i8* %144, i64 %675
  %677 = load i8, i8* %676, align 1
  %678 = zext i8 %677 to i64
  %679 = getelementptr inbounds [256 x i32], [256 x i32]* %14, i64 0, i64 %678
  %680 = load i32, i32* %679, align 4
  %681 = add i32 %680, 1
  store i32 %681, i32* %679, align 4
  %682 = add i64 %675, 43
  %683 = icmp ult i64 %682, %147
  br i1 %683, label %674, label %684

684:                                              ; preds = %674, %669
  br label %685

685:                                              ; preds = %684, %719
  %686 = phi double [ %722, %719 ], [ 0.000000e+00, %684 ]
  %687 = phi i64 [ %711, %719 ], [ 0, %684 ]
  %688 = phi i64 [ %708, %719 ], [ 0, %684 ]
  %689 = getelementptr inbounds [256 x i32], [256 x i32]* %14, i64 0, i64 %688
  %690 = load i32, i32* %689, align 8
  %691 = zext i32 %690 to i64
  %692 = icmp ult i32 %690, 256
  br i1 %692, label %693, label %697

693:                                              ; preds = %685
  %694 = getelementptr inbounds [256 x double], [256 x double]* @kBrotliLog2Table, i64 0, i64 %691
  %695 = load double, double* %694, align 8
  %696 = uitofp i32 %690 to double
  br label %700

697:                                              ; preds = %685
  %698 = uitofp i32 %690 to double
  %699 = call double @log2(double %698) #6
  br label %700

700:                                              ; preds = %697, %693
  %701 = phi double [ %696, %693 ], [ %698, %697 ]
  %702 = phi double [ %695, %693 ], [ %699, %697 ]
  %703 = or i64 %688, 1
  %704 = getelementptr inbounds [256 x i32], [256 x i32]* %14, i64 0, i64 %703
  %705 = fmul double %701, %702
  %706 = fsub double %686, %705
  %707 = add i64 %687, %691
  %708 = add nuw nsw i64 %688, 2
  %709 = load i32, i32* %704, align 4
  %710 = zext i32 %709 to i64
  %711 = add i64 %707, %710
  %712 = uitofp i32 %709 to double
  %713 = icmp ult i32 %709, 256
  br i1 %713, label %714, label %717

714:                                              ; preds = %700
  %715 = getelementptr inbounds [256 x double], [256 x double]* @kBrotliLog2Table, i64 0, i64 %710
  %716 = load double, double* %715, align 8
  br label %719

717:                                              ; preds = %700
  %718 = call double @log2(double %712) #6
  br label %719

719:                                              ; preds = %717, %714
  %720 = phi double [ %716, %714 ], [ %718, %717 ]
  %721 = fmul double %720, %712
  %722 = fsub double %706, %721
  %723 = icmp ult i64 %708, 256
  br i1 %723, label %685, label %724

724:                                              ; preds = %719
  %725 = icmp eq i64 %711, 0
  %726 = uitofp i64 %711 to double
  br i1 %725, label %738, label %727

727:                                              ; preds = %724
  %728 = icmp ult i64 %711, 256
  br i1 %728, label %729, label %732

729:                                              ; preds = %727
  %730 = getelementptr inbounds [256 x double], [256 x double]* @kBrotliLog2Table, i64 0, i64 %711
  %731 = load double, double* %730, align 8
  br label %734

732:                                              ; preds = %727
  %733 = call double @log2(double %726) #6
  br label %734

734:                                              ; preds = %732, %729
  %735 = phi double [ %731, %729 ], [ %733, %732 ]
  %736 = fmul double %735, %726
  %737 = fadd double %722, %736
  br label %738

738:                                              ; preds = %734, %724
  %739 = phi double [ %737, %734 ], [ %722, %724 ]
  %740 = fcmp olt double %739, %726
  %741 = select i1 %740, double %726, double %739
  %742 = fcmp uge double %741, %672
  call void @llvm.lifetime.end.p0i8(i64 1024, i8* nonnull %23) #6
  br i1 %742, label %1055, label %743

743:                                              ; preds = %738, %661
  %744 = sub i64 %662, %20
  %745 = ashr exact i64 %744, 2
  %746 = load i64, i64* %6, align 8, !alias.scope !160, !noalias !163
  %747 = lshr i64 %746, 3
  %748 = getelementptr inbounds i8, i8* %7, i64 %747
  %749 = load i8, i8* %748, align 1, !alias.scope !163, !noalias !160
  %750 = zext i8 %749 to i64
  %751 = bitcast i8* %748 to i64*
  store i64 %750, i64* %751, align 8, !alias.scope !163, !noalias !160
  %752 = add i64 %746, 1
  %753 = icmp ult i64 %147, 65537
  %754 = select i1 %753, i64 4, i64 5
  %755 = add nsw i64 %754, -4
  %756 = lshr i64 %752, 3
  %757 = getelementptr inbounds i8, i8* %7, i64 %756
  %758 = load i8, i8* %757, align 1, !alias.scope !165, !noalias !168
  %759 = zext i8 %758 to i64
  %760 = and i64 %752, 7
  %761 = shl i64 %755, %760
  %762 = or i64 %761, %759
  %763 = bitcast i8* %757 to i64*
  store i64 %762, i64* %763, align 8, !alias.scope !165, !noalias !168
  %764 = add i64 %746, 3
  %765 = shl nuw nsw i64 %754, 2
  %766 = add nsw i64 %147, -1
  %767 = lshr i64 %764, 3
  %768 = getelementptr inbounds i8, i8* %7, i64 %767
  %769 = load i8, i8* %768, align 1, !alias.scope !170, !noalias !173
  %770 = zext i8 %769 to i64
  %771 = and i64 %764, 7
  %772 = shl i64 %766, %771
  %773 = or i64 %772, %770
  %774 = bitcast i8* %768 to i64*
  store i64 %773, i64* %774, align 8, !alias.scope !170, !noalias !173
  %775 = add i64 %764, %765
  %776 = lshr i64 %775, 3
  %777 = getelementptr inbounds i8, i8* %7, i64 %776
  %778 = load i8, i8* %777, align 1, !alias.scope !175, !noalias !178
  %779 = zext i8 %778 to i64
  %780 = bitcast i8* %777 to i64*
  store i64 %779, i64* %780, align 8, !alias.scope !175, !noalias !178
  %781 = add i64 %775, 1
  %782 = lshr i64 %781, 3
  %783 = getelementptr inbounds i8, i8* %7, i64 %782
  %784 = load i8, i8* %783, align 1, !alias.scope !180, !noalias !183
  %785 = zext i8 %784 to i64
  %786 = bitcast i8* %783 to i64*
  store i64 %785, i64* %786, align 8, !alias.scope !180, !noalias !183
  %787 = add i64 %775, 14
  store i64 %787, i64* %6, align 8, !alias.scope !183, !noalias !180
  call void @llvm.lifetime.start.p0i8(i64 256, i8* nonnull %24) #6
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %24, i8 -86, i64 256, i1 false) #6
  call void @llvm.lifetime.start.p0i8(i64 512, i8* nonnull %25) #6
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %25, i8 -86, i64 512, i1 false) #6
  call void @llvm.lifetime.start.p0i8(i64 1024, i8* nonnull %23) #6
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %23, i8 0, i64 1024, i1 false) #6
  call void @llvm.lifetime.start.p0i8(i64 128, i8* nonnull %26) #6
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %26, i8 0, i64 128, i1 false) #6
  call void @llvm.lifetime.start.p0i8(i64 256, i8* nonnull %27) #6
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %27, i8 0, i64 256, i1 false) #6
  call void @llvm.lifetime.start.p0i8(i64 512, i8* nonnull %28) #6
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %28, i8 0, i64 512, i1 false) #6
  %788 = icmp eq i64 %664, 0
  br i1 %788, label %843, label %789

789:                                              ; preds = %743
  %790 = add i64 %663, %142
  %791 = and i64 %664, 3
  %792 = icmp ult i64 %790, 3
  br i1 %792, label %828, label %793

793:                                              ; preds = %789
  %794 = sub i64 %664, %791
  br label %795

795:                                              ; preds = %795, %793
  %796 = phi i64 [ 0, %793 ], [ %825, %795 ]
  %797 = phi i64 [ %794, %793 ], [ %826, %795 ]
  %798 = getelementptr inbounds i8, i8* %4, i64 %796
  %799 = load i8, i8* %798, align 1
  %800 = zext i8 %799 to i64
  %801 = getelementptr inbounds [256 x i32], [256 x i32]* %14, i64 0, i64 %800
  %802 = load i32, i32* %801, align 4
  %803 = add i32 %802, 1
  store i32 %803, i32* %801, align 4
  %804 = or i64 %796, 1
  %805 = getelementptr inbounds i8, i8* %4, i64 %804
  %806 = load i8, i8* %805, align 1
  %807 = zext i8 %806 to i64
  %808 = getelementptr inbounds [256 x i32], [256 x i32]* %14, i64 0, i64 %807
  %809 = load i32, i32* %808, align 4
  %810 = add i32 %809, 1
  store i32 %810, i32* %808, align 4
  %811 = or i64 %796, 2
  %812 = getelementptr inbounds i8, i8* %4, i64 %811
  %813 = load i8, i8* %812, align 1
  %814 = zext i8 %813 to i64
  %815 = getelementptr inbounds [256 x i32], [256 x i32]* %14, i64 0, i64 %814
  %816 = load i32, i32* %815, align 4
  %817 = add i32 %816, 1
  store i32 %817, i32* %815, align 4
  %818 = or i64 %796, 3
  %819 = getelementptr inbounds i8, i8* %4, i64 %818
  %820 = load i8, i8* %819, align 1
  %821 = zext i8 %820 to i64
  %822 = getelementptr inbounds [256 x i32], [256 x i32]* %14, i64 0, i64 %821
  %823 = load i32, i32* %822, align 4
  %824 = add i32 %823, 1
  store i32 %824, i32* %822, align 4
  %825 = add nuw i64 %796, 4
  %826 = add i64 %797, -4
  %827 = icmp eq i64 %826, 0
  br i1 %827, label %828, label %795

828:                                              ; preds = %795, %789
  %829 = phi i64 [ 0, %789 ], [ %825, %795 ]
  %830 = icmp eq i64 %791, 0
  br i1 %830, label %843, label %831

831:                                              ; preds = %828, %831
  %832 = phi i64 [ %840, %831 ], [ %829, %828 ]
  %833 = phi i64 [ %841, %831 ], [ %791, %828 ]
  %834 = getelementptr inbounds i8, i8* %4, i64 %832
  %835 = load i8, i8* %834, align 1
  %836 = zext i8 %835 to i64
  %837 = getelementptr inbounds [256 x i32], [256 x i32]* %14, i64 0, i64 %836
  %838 = load i32, i32* %837, align 4
  %839 = add i32 %838, 1
  store i32 %839, i32* %837, align 4
  %840 = add nuw i64 %832, 1
  %841 = add i64 %833, -1
  %842 = icmp eq i64 %841, 0
  br i1 %842, label %843, label %831, !llvm.loop !185

843:                                              ; preds = %828, %831, %743
  call void @BrotliBuildAndStoreHuffmanTreeFast(%struct.MemoryManager* %0, i32* nonnull %29, i64 %664, i64 8, i8* nonnull %24, i16* nonnull %30, i64* %6, i8* %7) #6
  %844 = icmp eq i64 %744, 0
  br i1 %844, label %891, label %845

845:                                              ; preds = %843
  %846 = and i64 %745, 1
  %847 = icmp eq i64 %744, 4
  br i1 %847, label %871, label %848

848:                                              ; preds = %845
  %849 = sub nsw i64 %745, %846
  br label %850

850:                                              ; preds = %850, %848
  %851 = phi i64 [ 0, %848 ], [ %868, %850 ]
  %852 = phi i64 [ %849, %848 ], [ %869, %850 ]
  %853 = getelementptr inbounds i32, i32* %3, i64 %851
  %854 = load i32, i32* %853, align 4
  %855 = and i32 %854, 255
  %856 = zext i32 %855 to i64
  %857 = getelementptr inbounds [128 x i32], [128 x i32]* %17, i64 0, i64 %856
  %858 = load i32, i32* %857, align 4
  %859 = add i32 %858, 1
  store i32 %859, i32* %857, align 4
  %860 = or i64 %851, 1
  %861 = getelementptr inbounds i32, i32* %3, i64 %860
  %862 = load i32, i32* %861, align 4
  %863 = and i32 %862, 255
  %864 = zext i32 %863 to i64
  %865 = getelementptr inbounds [128 x i32], [128 x i32]* %17, i64 0, i64 %864
  %866 = load i32, i32* %865, align 4
  %867 = add i32 %866, 1
  store i32 %867, i32* %865, align 4
  %868 = add nuw i64 %851, 2
  %869 = add i64 %852, -2
  %870 = icmp eq i64 %869, 0
  br i1 %870, label %871, label %850

871:                                              ; preds = %850, %845
  %872 = phi i64 [ 0, %845 ], [ %868, %850 ]
  %873 = icmp eq i64 %846, 0
  br i1 %873, label %882, label %874

874:                                              ; preds = %871
  %875 = getelementptr inbounds i32, i32* %3, i64 %872
  %876 = load i32, i32* %875, align 4
  %877 = and i32 %876, 255
  %878 = zext i32 %877 to i64
  %879 = getelementptr inbounds [128 x i32], [128 x i32]* %17, i64 0, i64 %878
  %880 = load i32, i32* %879, align 4
  %881 = add i32 %880, 1
  store i32 %881, i32* %879, align 4
  br label %882

882:                                              ; preds = %871, %874
  %883 = load i32, i32* %31, align 4
  %884 = load i32, i32* %32, align 8
  %885 = load i32, i32* %33, align 16
  %886 = load i32, i32* %34, align 16
  %887 = add i32 %883, 1
  %888 = add i32 %884, 1
  %889 = add i32 %885, 1
  %890 = add i32 %886, 1
  br label %891

891:                                              ; preds = %882, %843
  %892 = phi i32 [ %890, %882 ], [ 1, %843 ]
  %893 = phi i32 [ %889, %882 ], [ 1, %843 ]
  %894 = phi i32 [ %888, %882 ], [ 1, %843 ]
  %895 = phi i32 [ %887, %882 ], [ 1, %843 ]
  store i32 %895, i32* %31, align 4
  store i32 %894, i32* %32, align 8
  store i32 %893, i32* %33, align 16
  store i32 %892, i32* %34, align 16
  call void @llvm.lifetime.start.p0i8(i64 1032, i8* nonnull %36) #6
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %36, i8 -86, i64 1032, i1 false) #6
  call void @llvm.lifetime.start.p0i8(i64 704, i8* nonnull %37) #6
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %37, i8 0, i64 704, i1 false) #6
  call void @llvm.lifetime.start.p0i8(i64 128, i8* nonnull %38) #6
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %38, i8 -86, i64 128, i1 false) #6
  call void @BrotliCreateHuffmanTree(i32* nonnull %35, i64 64, i32 15, %struct.HuffmanTree* nonnull %39, i8* nonnull %26) #6
  call void @BrotliCreateHuffmanTree(i32* %33, i64 64, i32 14, %struct.HuffmanTree* nonnull %39, i8* %40) #6
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 16 %37, i8* align 8 %41, i64 24, i1 false) #6
  %896 = load i64, i64* %43, align 16
  store i64 %896, i64* %44, align 8
  %897 = load i64, i64* %47, align 16
  store i64 %897, i64* %48, align 16
  %898 = load i64, i64* %51, align 8
  store i64 %898, i64* %52, align 8
  %899 = load i64, i64* %55, align 8
  store i64 %899, i64* %56, align 16
  %900 = load i64, i64* %59, align 16
  store i64 %900, i64* %60, align 8
  call void @BrotliConvertBitDepthsToSymbols(i8* nonnull %37, i64 64, i16* nonnull %61) #6
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 16 %27, i8* align 16 %63, i64 16, i1 false) #6
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 16 %65, i8* align 16 %67, i64 16, i1 false) #6
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 16 %69, i8* align 16 %71, i64 16, i1 false) #6
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 16 %73, i8* nonnull align 16 %38, i64 48, i1 false) #6
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 16 %75, i8* align 16 %77, i64 16, i1 false) #6
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 16 %79, i8* align 16 %81, i64 16, i1 false) #6
  call void @BrotliConvertBitDepthsToSymbols(i8* %40, i64 64, i16* %82) #6
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %37, i8 0, i64 64, i1 false) #6
  %901 = load i64, i64* %83, align 8
  store i64 %901, i64* %84, align 16
  %902 = load i64, i64* %87, align 16
  store i64 %902, i64* %88, align 16
  %903 = load i64, i64* %91, align 8
  store i64 %903, i64* %92, align 16
  %904 = load i64, i64* %47, align 16
  store i64 %904, i64* %94, align 16
  %905 = load i64, i64* %55, align 8
  store i64 %905, i64* %96, align 16
  %906 = load i8, i8* %26, align 16
  store i8 %906, i8* %89, align 16
  %907 = load i8, i8* %50, align 8
  store i8 %907, i8* %97, align 16
  %908 = load i8, i8* %58, align 16
  store i8 %908, i8* %98, align 16
  %909 = load i8, i8* %99, align 1
  store i8 %909, i8* %100, align 8
  %910 = load i8, i8* %101, align 1
  store i8 %910, i8* %102, align 8
  %911 = load i8, i8* %103, align 1
  store i8 %911, i8* %104, align 8
  %912 = load i8, i8* %105, align 2
  store i8 %912, i8* %106, align 16
  %913 = load i8, i8* %107, align 2
  store i8 %913, i8* %108, align 16
  %914 = load i8, i8* %109, align 2
  store i8 %914, i8* %110, align 16
  %915 = load i8, i8* %111, align 1
  store i8 %915, i8* %112, align 8
  %916 = load i8, i8* %113, align 1
  store i8 %916, i8* %114, align 8
  %917 = load i8, i8* %115, align 1
  store i8 %917, i8* %116, align 8
  %918 = load i8, i8* %117, align 4
  store i8 %918, i8* %118, align 16
  %919 = load i8, i8* %119, align 4
  store i8 %919, i8* %120, align 16
  %920 = load i8, i8* %121, align 4
  store i8 %920, i8* %122, align 16
  %921 = load i8, i8* %123, align 1
  store i8 %921, i8* %124, align 8
  %922 = load i8, i8* %125, align 1
  store i8 %922, i8* %126, align 8
  %923 = load i8, i8* %127, align 1
  store i8 %923, i8* %128, align 8
  %924 = load i8, i8* %129, align 2
  store i8 %924, i8* %130, align 16
  %925 = load i8, i8* %131, align 2
  store i8 %925, i8* %132, align 16
  %926 = load i8, i8* %133, align 2
  store i8 %926, i8* %134, align 16
  %927 = load i8, i8* %135, align 1
  store i8 %927, i8* %136, align 8
  %928 = load i8, i8* %137, align 1
  store i8 %928, i8* %138, align 8
  %929 = load i8, i8* %139, align 1
  store i8 %929, i8* %140, align 8
  call void @BrotliStoreHuffmanTree(i8* nonnull %37, i64 704, %struct.HuffmanTree* nonnull %39, i64* %6, i8* %7) #6
  call void @BrotliStoreHuffmanTree(i8* %40, i64 64, %struct.HuffmanTree* nonnull %39, i64* %6, i8* %7) #6
  call void @llvm.lifetime.end.p0i8(i64 128, i8* nonnull %38) #6
  call void @llvm.lifetime.end.p0i8(i64 704, i8* nonnull %37) #6
  call void @llvm.lifetime.end.p0i8(i64 1032, i8* nonnull %36) #6
  br i1 %844, label %1054, label %930

930:                                              ; preds = %891
  %931 = load i64, i64* %6, align 8, !alias.scope !186, !noalias !189
  br label %932

932:                                              ; preds = %1049, %930
  %933 = phi i64 [ %1050, %1049 ], [ %931, %930 ]
  %934 = phi i8* [ %1051, %1049 ], [ %4, %930 ]
  %935 = phi i64 [ %1052, %1049 ], [ 0, %930 ]
  %936 = getelementptr inbounds i32, i32* %3, i64 %935
  %937 = load i32, i32* %936, align 4
  %938 = and i32 %937, 255
  %939 = lshr i32 %937, 8
  %940 = zext i32 %938 to i64
  %941 = getelementptr inbounds [128 x i8], [128 x i8]* %15, i64 0, i64 %940
  %942 = load i8, i8* %941, align 1
  %943 = zext i8 %942 to i64
  %944 = getelementptr inbounds [128 x i16], [128 x i16]* %16, i64 0, i64 %940
  %945 = load i16, i16* %944, align 2
  %946 = zext i16 %945 to i64
  %947 = lshr i64 %933, 3
  %948 = getelementptr inbounds i8, i8* %7, i64 %947
  %949 = load i8, i8* %948, align 1, !alias.scope !189, !noalias !186
  %950 = zext i8 %949 to i64
  %951 = and i64 %933, 7
  %952 = shl i64 %946, %951
  %953 = or i64 %952, %950
  %954 = bitcast i8* %948 to i64*
  store i64 %953, i64* %954, align 8, !alias.scope !189, !noalias !186
  %955 = add i64 %933, %943
  %956 = getelementptr inbounds [128 x i32], [128 x i32]* @StoreCommands.kNumExtraBits, i64 0, i64 %940
  %957 = load i32, i32* %956, align 4
  %958 = zext i32 %957 to i64
  %959 = zext i32 %939 to i64
  %960 = lshr i64 %955, 3
  %961 = getelementptr inbounds i8, i8* %7, i64 %960
  %962 = load i8, i8* %961, align 1, !alias.scope !191, !noalias !194
  %963 = zext i8 %962 to i64
  %964 = and i64 %955, 7
  %965 = shl i64 %959, %964
  %966 = or i64 %965, %963
  %967 = bitcast i8* %961 to i64*
  store i64 %966, i64* %967, align 8, !alias.scope !191, !noalias !194
  %968 = add i64 %955, %958
  store i64 %968, i64* %6, align 8, !alias.scope !194, !noalias !191
  %969 = icmp ult i32 %938, 24
  br i1 %969, label %970, label %1049

970:                                              ; preds = %932
  %971 = getelementptr inbounds [24 x i32], [24 x i32]* @StoreCommands.kInsertOffset, i64 0, i64 %940
  %972 = load i32, i32* %971, align 4
  %973 = add i32 %972, %939
  %974 = icmp eq i32 %973, 0
  br i1 %974, label %1049, label %975

975:                                              ; preds = %970
  %976 = add i32 %972, -1
  %977 = and i32 %973, 1
  %978 = sub nsw i32 0, %939
  %979 = icmp eq i32 %976, %978
  br i1 %979, label %1024, label %980

980:                                              ; preds = %975
  %981 = sub i32 %973, %977
  br label %982

982:                                              ; preds = %982, %980
  %983 = phi i64 [ %968, %980 ], [ %1020, %982 ]
  %984 = phi i8* [ %934, %980 ], [ %1021, %982 ]
  %985 = phi i32 [ %981, %980 ], [ %1022, %982 ]
  %986 = load i8, i8* %984, align 1
  %987 = zext i8 %986 to i64
  %988 = getelementptr inbounds [256 x i8], [256 x i8]* %12, i64 0, i64 %987
  %989 = load i8, i8* %988, align 1
  %990 = zext i8 %989 to i64
  %991 = getelementptr inbounds [256 x i16], [256 x i16]* %13, i64 0, i64 %987
  %992 = load i16, i16* %991, align 2
  %993 = zext i16 %992 to i64
  %994 = lshr i64 %983, 3
  %995 = getelementptr inbounds i8, i8* %7, i64 %994
  %996 = load i8, i8* %995, align 1, !alias.scope !196, !noalias !199
  %997 = zext i8 %996 to i64
  %998 = and i64 %983, 7
  %999 = shl i64 %993, %998
  %1000 = or i64 %999, %997
  %1001 = bitcast i8* %995 to i64*
  store i64 %1000, i64* %1001, align 8, !alias.scope !196, !noalias !199
  %1002 = add i64 %983, %990
  store i64 %1002, i64* %6, align 8, !alias.scope !199, !noalias !196
  %1003 = getelementptr inbounds i8, i8* %984, i64 1
  %1004 = load i8, i8* %1003, align 1
  %1005 = zext i8 %1004 to i64
  %1006 = getelementptr inbounds [256 x i8], [256 x i8]* %12, i64 0, i64 %1005
  %1007 = load i8, i8* %1006, align 1
  %1008 = zext i8 %1007 to i64
  %1009 = getelementptr inbounds [256 x i16], [256 x i16]* %13, i64 0, i64 %1005
  %1010 = load i16, i16* %1009, align 2
  %1011 = zext i16 %1010 to i64
  %1012 = lshr i64 %1002, 3
  %1013 = getelementptr inbounds i8, i8* %7, i64 %1012
  %1014 = load i8, i8* %1013, align 1, !alias.scope !196, !noalias !199
  %1015 = zext i8 %1014 to i64
  %1016 = and i64 %1002, 7
  %1017 = shl i64 %1011, %1016
  %1018 = or i64 %1017, %1015
  %1019 = bitcast i8* %1013 to i64*
  store i64 %1018, i64* %1019, align 8, !alias.scope !196, !noalias !199
  %1020 = add i64 %1002, %1008
  store i64 %1020, i64* %6, align 8, !alias.scope !199, !noalias !196
  %1021 = getelementptr inbounds i8, i8* %984, i64 2
  %1022 = add i32 %985, -2
  %1023 = icmp eq i32 %1022, 0
  br i1 %1023, label %1024, label %982

1024:                                             ; preds = %982, %975
  %1025 = phi i64 [ undef, %975 ], [ %1020, %982 ]
  %1026 = phi i8* [ undef, %975 ], [ %1021, %982 ]
  %1027 = phi i64 [ %968, %975 ], [ %1020, %982 ]
  %1028 = phi i8* [ %934, %975 ], [ %1021, %982 ]
  %1029 = icmp eq i32 %977, 0
  br i1 %1029, label %1049, label %1030

1030:                                             ; preds = %1024
  %1031 = load i8, i8* %1028, align 1
  %1032 = zext i8 %1031 to i64
  %1033 = getelementptr inbounds [256 x i8], [256 x i8]* %12, i64 0, i64 %1032
  %1034 = load i8, i8* %1033, align 1
  %1035 = zext i8 %1034 to i64
  %1036 = getelementptr inbounds [256 x i16], [256 x i16]* %13, i64 0, i64 %1032
  %1037 = load i16, i16* %1036, align 2
  %1038 = zext i16 %1037 to i64
  %1039 = lshr i64 %1027, 3
  %1040 = getelementptr inbounds i8, i8* %7, i64 %1039
  %1041 = load i8, i8* %1040, align 1, !alias.scope !196, !noalias !199
  %1042 = zext i8 %1041 to i64
  %1043 = and i64 %1027, 7
  %1044 = shl i64 %1038, %1043
  %1045 = or i64 %1044, %1042
  %1046 = bitcast i8* %1040 to i64*
  store i64 %1045, i64* %1046, align 8, !alias.scope !196, !noalias !199
  %1047 = add i64 %1027, %1035
  store i64 %1047, i64* %6, align 8, !alias.scope !199, !noalias !196
  %1048 = getelementptr inbounds i8, i8* %1028, i64 1
  br label %1049

1049:                                             ; preds = %1030, %1024, %970, %932
  %1050 = phi i64 [ %968, %932 ], [ %968, %970 ], [ %1025, %1024 ], [ %1047, %1030 ]
  %1051 = phi i8* [ %934, %932 ], [ %934, %970 ], [ %1026, %1024 ], [ %1048, %1030 ]
  %1052 = add nuw i64 %935, 1
  %1053 = icmp eq i64 %1052, %745
  br i1 %1053, label %1054, label %932

1054:                                             ; preds = %1049, %891
  call void @llvm.lifetime.end.p0i8(i64 512, i8* nonnull %28) #6
  call void @llvm.lifetime.end.p0i8(i64 256, i8* nonnull %27) #6
  call void @llvm.lifetime.end.p0i8(i64 128, i8* nonnull %26) #6
  call void @llvm.lifetime.end.p0i8(i64 1024, i8* nonnull %23) #6
  call void @llvm.lifetime.end.p0i8(i64 512, i8* nonnull %25) #6
  call void @llvm.lifetime.end.p0i8(i64 256, i8* nonnull %24) #6
  br label %1103

1055:                                             ; preds = %738
  %1056 = load i64, i64* %6, align 8, !alias.scope !201, !noalias !204
  %1057 = lshr i64 %1056, 3
  %1058 = getelementptr inbounds i8, i8* %7, i64 %1057
  %1059 = load i8, i8* %1058, align 1, !alias.scope !204, !noalias !201
  %1060 = zext i8 %1059 to i64
  %1061 = bitcast i8* %1058 to i64*
  store i64 %1060, i64* %1061, align 8, !alias.scope !204, !noalias !201
  %1062 = add i64 %1056, 1
  %1063 = icmp ult i64 %147, 65537
  %1064 = select i1 %1063, i64 4, i64 5
  %1065 = add nsw i64 %1064, -4
  %1066 = lshr i64 %1062, 3
  %1067 = getelementptr inbounds i8, i8* %7, i64 %1066
  %1068 = load i8, i8* %1067, align 1, !alias.scope !206, !noalias !209
  %1069 = zext i8 %1068 to i64
  %1070 = and i64 %1062, 7
  %1071 = shl i64 %1065, %1070
  %1072 = or i64 %1071, %1069
  %1073 = bitcast i8* %1067 to i64*
  store i64 %1072, i64* %1073, align 8, !alias.scope !206, !noalias !209
  %1074 = add i64 %1056, 3
  %1075 = shl nuw nsw i64 %1064, 2
  %1076 = add nsw i64 %147, -1
  %1077 = lshr i64 %1074, 3
  %1078 = getelementptr inbounds i8, i8* %7, i64 %1077
  %1079 = load i8, i8* %1078, align 1, !alias.scope !211, !noalias !214
  %1080 = zext i8 %1079 to i64
  %1081 = and i64 %1074, 7
  %1082 = shl i64 %1076, %1081
  %1083 = or i64 %1082, %1080
  %1084 = bitcast i8* %1078 to i64*
  store i64 %1083, i64* %1084, align 8, !alias.scope !211, !noalias !214
  %1085 = add i64 %1074, %1075
  %1086 = lshr i64 %1085, 3
  %1087 = getelementptr inbounds i8, i8* %7, i64 %1086
  %1088 = load i8, i8* %1087, align 1, !alias.scope !216, !noalias !219
  %1089 = zext i8 %1088 to i64
  %1090 = and i64 %1085, 7
  %1091 = shl i64 1, %1090
  %1092 = or i64 %1091, %1089
  %1093 = bitcast i8* %1087 to i64*
  store i64 %1092, i64* %1093, align 8, !alias.scope !216, !noalias !219
  %1094 = add i64 %1085, 8
  %1095 = and i64 %1094, 4294967288
  store i64 %1095, i64* %6, align 8
  %1096 = lshr exact i64 %1095, 3
  %1097 = getelementptr inbounds i8, i8* %7, i64 %1096
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %1097, i8* align 1 %144, i64 %147, i1 false) #6
  %1098 = shl nuw nsw i64 %147, 3
  %1099 = load i64, i64* %6, align 8
  %1100 = add i64 %1099, %1098
  store i64 %1100, i64* %6, align 8
  %1101 = lshr i64 %1100, 3
  %1102 = getelementptr inbounds i8, i8* %7, i64 %1101
  store i8 0, i8* %1102, align 1
  br label %1103

1103:                                             ; preds = %1055, %1054
  %1104 = sub i64 %145, %147
  %1105 = icmp eq i64 %1104, 0
  br i1 %1105, label %1106, label %143

1106:                                             ; preds = %1103, %8
  ret void

1107:                                             ; preds = %252
  %1108 = getelementptr inbounds i8, i8* %244, i64 1
  %1109 = getelementptr inbounds i8, i8* %216, i64 %253
  %1110 = load i8, i8* %1109, align 1
  %1111 = load i8, i8* %1108, align 1
  %1112 = icmp eq i8 %1110, %1111
  br i1 %1112, label %1113, label %255, !prof !33

1113:                                             ; preds = %1107
  %1114 = add i64 %243, 2
  %1115 = icmp eq i64 %245, 2
  br i1 %1115, label %255, label %1116

1116:                                             ; preds = %1113
  %1117 = getelementptr inbounds i8, i8* %244, i64 2
  %1118 = getelementptr inbounds i8, i8* %216, i64 %1114
  %1119 = load i8, i8* %1118, align 1
  %1120 = load i8, i8* %1117, align 1
  %1121 = icmp eq i8 %1119, %1120
  br i1 %1121, label %1122, label %255, !prof !33

1122:                                             ; preds = %1116
  %1123 = add i64 %243, 3
  %1124 = icmp eq i64 %245, 3
  br i1 %1124, label %255, label %1125

1125:                                             ; preds = %1122
  %1126 = getelementptr inbounds i8, i8* %244, i64 3
  %1127 = getelementptr inbounds i8, i8* %216, i64 %1123
  %1128 = load i8, i8* %1127, align 1
  %1129 = load i8, i8* %1126, align 1
  %1130 = icmp eq i8 %1128, %1129
  br i1 %1130, label %1131, label %255, !prof !33

1131:                                             ; preds = %1125
  %1132 = add i64 %243, 4
  %1133 = icmp eq i64 %245, 4
  br i1 %1133, label %255, label %1134

1134:                                             ; preds = %1131
  %1135 = getelementptr inbounds i8, i8* %244, i64 4
  %1136 = getelementptr inbounds i8, i8* %216, i64 %1132
  %1137 = load i8, i8* %1136, align 1
  %1138 = load i8, i8* %1135, align 1
  %1139 = icmp eq i8 %1137, %1138
  br i1 %1139, label %1140, label %255, !prof !33

1140:                                             ; preds = %1134
  %1141 = add i64 %243, 5
  %1142 = icmp eq i64 %245, 5
  br i1 %1142, label %255, label %1143

1143:                                             ; preds = %1140
  %1144 = getelementptr inbounds i8, i8* %244, i64 5
  %1145 = getelementptr inbounds i8, i8* %216, i64 %1141
  %1146 = load i8, i8* %1145, align 1
  %1147 = load i8, i8* %1144, align 1
  %1148 = icmp eq i8 %1146, %1147
  br i1 %1148, label %1149, label %255, !prof !33

1149:                                             ; preds = %1143
  %1150 = add i64 %243, 6
  %1151 = icmp eq i64 %245, 6
  br i1 %1151, label %255, label %1152

1152:                                             ; preds = %1149
  %1153 = getelementptr inbounds i8, i8* %244, i64 6
  %1154 = getelementptr inbounds i8, i8* %216, i64 %1150
  %1155 = load i8, i8* %1154, align 1
  %1156 = load i8, i8* %1153, align 1
  %1157 = icmp eq i8 %1155, %1156
  %1158 = add i64 %243, 7
  %1159 = select i1 %1157, i64 %1158, i64 %1150, !prof !33
  br label %255

1160:                                             ; preds = %478
  %1161 = getelementptr inbounds i8, i8* %470, i64 1
  %1162 = getelementptr inbounds i8, i8* %442, i64 %479
  %1163 = load i8, i8* %1162, align 1
  %1164 = load i8, i8* %1161, align 1
  %1165 = icmp eq i8 %1163, %1164
  br i1 %1165, label %1166, label %481, !prof !33

1166:                                             ; preds = %1160
  %1167 = add i64 %469, 2
  %1168 = icmp eq i64 %471, 2
  br i1 %1168, label %481, label %1169

1169:                                             ; preds = %1166
  %1170 = getelementptr inbounds i8, i8* %470, i64 2
  %1171 = getelementptr inbounds i8, i8* %442, i64 %1167
  %1172 = load i8, i8* %1171, align 1
  %1173 = load i8, i8* %1170, align 1
  %1174 = icmp eq i8 %1172, %1173
  br i1 %1174, label %1175, label %481, !prof !33

1175:                                             ; preds = %1169
  %1176 = add i64 %469, 3
  %1177 = icmp eq i64 %471, 3
  br i1 %1177, label %481, label %1178

1178:                                             ; preds = %1175
  %1179 = getelementptr inbounds i8, i8* %470, i64 3
  %1180 = getelementptr inbounds i8, i8* %442, i64 %1176
  %1181 = load i8, i8* %1180, align 1
  %1182 = load i8, i8* %1179, align 1
  %1183 = icmp eq i8 %1181, %1182
  br i1 %1183, label %1184, label %481, !prof !33

1184:                                             ; preds = %1178
  %1185 = add i64 %469, 4
  %1186 = icmp eq i64 %471, 4
  br i1 %1186, label %481, label %1187

1187:                                             ; preds = %1184
  %1188 = getelementptr inbounds i8, i8* %470, i64 4
  %1189 = getelementptr inbounds i8, i8* %442, i64 %1185
  %1190 = load i8, i8* %1189, align 1
  %1191 = load i8, i8* %1188, align 1
  %1192 = icmp eq i8 %1190, %1191
  br i1 %1192, label %1193, label %481, !prof !33

1193:                                             ; preds = %1187
  %1194 = add i64 %469, 5
  %1195 = icmp eq i64 %471, 5
  br i1 %1195, label %481, label %1196

1196:                                             ; preds = %1193
  %1197 = getelementptr inbounds i8, i8* %470, i64 5
  %1198 = getelementptr inbounds i8, i8* %442, i64 %1194
  %1199 = load i8, i8* %1198, align 1
  %1200 = load i8, i8* %1197, align 1
  %1201 = icmp eq i8 %1199, %1200
  br i1 %1201, label %1202, label %481, !prof !33

1202:                                             ; preds = %1196
  %1203 = add i64 %469, 6
  %1204 = icmp eq i64 %471, 6
  br i1 %1204, label %481, label %1205

1205:                                             ; preds = %1202
  %1206 = getelementptr inbounds i8, i8* %470, i64 6
  %1207 = getelementptr inbounds i8, i8* %442, i64 %1203
  %1208 = load i8, i8* %1207, align 1
  %1209 = load i8, i8* %1206, align 1
  %1210 = icmp eq i8 %1208, %1209
  %1211 = add i64 %469, 7
  %1212 = select i1 %1210, i64 %1211, i64 %1203, !prof !33
  br label %481
}

; Function Attrs: noinline nounwind ssp uwtable
define internal fastcc void @BrotliCompressFragmentTwoPassImpl11(%struct.MemoryManager*, i8*, i64, i32*, i8*, i32* nocapture, i64*, i8*) unnamed_addr #2 {
  %9 = alloca [129 x %struct.HuffmanTree], align 16
  %10 = alloca [704 x i8], align 16
  %11 = alloca [64 x i16], align 16
  %12 = alloca [256 x i8], align 16
  %13 = alloca [256 x i16], align 16
  %14 = alloca [256 x i32], align 16
  %15 = alloca [128 x i8], align 16
  %16 = alloca [128 x i16], align 16
  %17 = alloca [128 x i32], align 16
  %18 = icmp eq i64 %2, 0
  br i1 %18, label %1106, label %19

19:                                               ; preds = %8
  %20 = ptrtoint i32* %3 to i64
  %21 = ptrtoint i8* %4 to i64
  %22 = ptrtoint i8* %1 to i64
  %23 = bitcast [256 x i32]* %14 to i8*
  %24 = getelementptr inbounds [256 x i8], [256 x i8]* %12, i64 0, i64 0
  %25 = bitcast [256 x i16]* %13 to i8*
  %26 = getelementptr inbounds [128 x i8], [128 x i8]* %15, i64 0, i64 0
  %27 = bitcast [128 x i16]* %16 to i8*
  %28 = bitcast [128 x i32]* %17 to i8*
  %29 = getelementptr inbounds [256 x i32], [256 x i32]* %14, i64 0, i64 0
  %30 = getelementptr inbounds [256 x i16], [256 x i16]* %13, i64 0, i64 0
  %31 = getelementptr inbounds [128 x i32], [128 x i32]* %17, i64 0, i64 1
  %32 = getelementptr inbounds [128 x i32], [128 x i32]* %17, i64 0, i64 2
  %33 = getelementptr inbounds [128 x i32], [128 x i32]* %17, i64 0, i64 64
  %34 = getelementptr inbounds [128 x i32], [128 x i32]* %17, i64 0, i64 84
  %35 = getelementptr inbounds [128 x i32], [128 x i32]* %17, i64 0, i64 0
  %36 = bitcast [129 x %struct.HuffmanTree]* %9 to i8*
  %37 = getelementptr inbounds [704 x i8], [704 x i8]* %10, i64 0, i64 0
  %38 = bitcast [64 x i16]* %11 to i8*
  %39 = getelementptr inbounds [129 x %struct.HuffmanTree], [129 x %struct.HuffmanTree]* %9, i64 0, i64 0
  %40 = getelementptr inbounds [128 x i8], [128 x i8]* %15, i64 0, i64 64
  %41 = getelementptr inbounds [128 x i8], [128 x i8]* %15, i64 0, i64 24
  %42 = getelementptr inbounds [704 x i8], [704 x i8]* %10, i64 0, i64 24
  %43 = bitcast [128 x i8]* %15 to i64*
  %44 = bitcast i8* %42 to i64*
  %45 = getelementptr inbounds [704 x i8], [704 x i8]* %10, i64 0, i64 32
  %46 = getelementptr inbounds [128 x i8], [128 x i8]* %15, i64 0, i64 48
  %47 = bitcast i8* %46 to i64*
  %48 = bitcast i8* %45 to i64*
  %49 = getelementptr inbounds [704 x i8], [704 x i8]* %10, i64 0, i64 40
  %50 = getelementptr inbounds [128 x i8], [128 x i8]* %15, i64 0, i64 8
  %51 = bitcast i8* %50 to i64*
  %52 = bitcast i8* %49 to i64*
  %53 = getelementptr inbounds [704 x i8], [704 x i8]* %10, i64 0, i64 48
  %54 = getelementptr inbounds [128 x i8], [128 x i8]* %15, i64 0, i64 56
  %55 = bitcast i8* %54 to i64*
  %56 = bitcast i8* %53 to i64*
  %57 = getelementptr inbounds [704 x i8], [704 x i8]* %10, i64 0, i64 56
  %58 = getelementptr inbounds [128 x i8], [128 x i8]* %15, i64 0, i64 16
  %59 = bitcast i8* %58 to i64*
  %60 = bitcast i8* %57 to i64*
  %61 = getelementptr inbounds [64 x i16], [64 x i16]* %11, i64 0, i64 0
  %62 = getelementptr inbounds [64 x i16], [64 x i16]* %11, i64 0, i64 24
  %63 = bitcast i16* %62 to i8*
  %64 = getelementptr inbounds [128 x i16], [128 x i16]* %16, i64 0, i64 8
  %65 = bitcast i16* %64 to i8*
  %66 = getelementptr inbounds [64 x i16], [64 x i16]* %11, i64 0, i64 40
  %67 = bitcast i16* %66 to i8*
  %68 = getelementptr inbounds [128 x i16], [128 x i16]* %16, i64 0, i64 16
  %69 = bitcast i16* %68 to i8*
  %70 = getelementptr inbounds [64 x i16], [64 x i16]* %11, i64 0, i64 56
  %71 = bitcast i16* %70 to i8*
  %72 = getelementptr inbounds [128 x i16], [128 x i16]* %16, i64 0, i64 24
  %73 = bitcast i16* %72 to i8*
  %74 = getelementptr inbounds [128 x i16], [128 x i16]* %16, i64 0, i64 48
  %75 = bitcast i16* %74 to i8*
  %76 = getelementptr inbounds [64 x i16], [64 x i16]* %11, i64 0, i64 32
  %77 = bitcast i16* %76 to i8*
  %78 = getelementptr inbounds [128 x i16], [128 x i16]* %16, i64 0, i64 56
  %79 = bitcast i16* %78 to i8*
  %80 = getelementptr inbounds [64 x i16], [64 x i16]* %11, i64 0, i64 48
  %81 = bitcast i16* %80 to i8*
  %82 = getelementptr inbounds [128 x i16], [128 x i16]* %16, i64 0, i64 64
  %83 = bitcast i8* %41 to i64*
  %84 = bitcast [704 x i8]* %10 to i64*
  %85 = getelementptr inbounds [704 x i8], [704 x i8]* %10, i64 0, i64 64
  %86 = getelementptr inbounds [128 x i8], [128 x i8]* %15, i64 0, i64 32
  %87 = bitcast i8* %86 to i64*
  %88 = bitcast i8* %85 to i64*
  %89 = getelementptr inbounds [704 x i8], [704 x i8]* %10, i64 0, i64 128
  %90 = getelementptr inbounds [128 x i8], [128 x i8]* %15, i64 0, i64 40
  %91 = bitcast i8* %90 to i64*
  %92 = bitcast i8* %89 to i64*
  %93 = getelementptr inbounds [704 x i8], [704 x i8]* %10, i64 0, i64 192
  %94 = bitcast i8* %93 to i64*
  %95 = getelementptr inbounds [704 x i8], [704 x i8]* %10, i64 0, i64 384
  %96 = bitcast i8* %95 to i64*
  %97 = getelementptr inbounds [704 x i8], [704 x i8]* %10, i64 0, i64 256
  %98 = getelementptr inbounds [704 x i8], [704 x i8]* %10, i64 0, i64 448
  %99 = getelementptr inbounds [128 x i8], [128 x i8]* %15, i64 0, i64 1
  %100 = getelementptr inbounds [704 x i8], [704 x i8]* %10, i64 0, i64 136
  %101 = getelementptr inbounds [128 x i8], [128 x i8]* %15, i64 0, i64 9
  %102 = getelementptr inbounds [704 x i8], [704 x i8]* %10, i64 0, i64 264
  %103 = getelementptr inbounds [128 x i8], [128 x i8]* %15, i64 0, i64 17
  %104 = getelementptr inbounds [704 x i8], [704 x i8]* %10, i64 0, i64 456
  %105 = getelementptr inbounds [128 x i8], [128 x i8]* %15, i64 0, i64 2
  %106 = getelementptr inbounds [704 x i8], [704 x i8]* %10, i64 0, i64 144
  %107 = getelementptr inbounds [128 x i8], [128 x i8]* %15, i64 0, i64 10
  %108 = getelementptr inbounds [704 x i8], [704 x i8]* %10, i64 0, i64 272
  %109 = getelementptr inbounds [128 x i8], [128 x i8]* %15, i64 0, i64 18
  %110 = getelementptr inbounds [704 x i8], [704 x i8]* %10, i64 0, i64 464
  %111 = getelementptr inbounds [128 x i8], [128 x i8]* %15, i64 0, i64 3
  %112 = getelementptr inbounds [704 x i8], [704 x i8]* %10, i64 0, i64 152
  %113 = getelementptr inbounds [128 x i8], [128 x i8]* %15, i64 0, i64 11
  %114 = getelementptr inbounds [704 x i8], [704 x i8]* %10, i64 0, i64 280
  %115 = getelementptr inbounds [128 x i8], [128 x i8]* %15, i64 0, i64 19
  %116 = getelementptr inbounds [704 x i8], [704 x i8]* %10, i64 0, i64 472
  %117 = getelementptr inbounds [128 x i8], [128 x i8]* %15, i64 0, i64 4
  %118 = getelementptr inbounds [704 x i8], [704 x i8]* %10, i64 0, i64 160
  %119 = getelementptr inbounds [128 x i8], [128 x i8]* %15, i64 0, i64 12
  %120 = getelementptr inbounds [704 x i8], [704 x i8]* %10, i64 0, i64 288
  %121 = getelementptr inbounds [128 x i8], [128 x i8]* %15, i64 0, i64 20
  %122 = getelementptr inbounds [704 x i8], [704 x i8]* %10, i64 0, i64 480
  %123 = getelementptr inbounds [128 x i8], [128 x i8]* %15, i64 0, i64 5
  %124 = getelementptr inbounds [704 x i8], [704 x i8]* %10, i64 0, i64 168
  %125 = getelementptr inbounds [128 x i8], [128 x i8]* %15, i64 0, i64 13
  %126 = getelementptr inbounds [704 x i8], [704 x i8]* %10, i64 0, i64 296
  %127 = getelementptr inbounds [128 x i8], [128 x i8]* %15, i64 0, i64 21
  %128 = getelementptr inbounds [704 x i8], [704 x i8]* %10, i64 0, i64 488
  %129 = getelementptr inbounds [128 x i8], [128 x i8]* %15, i64 0, i64 6
  %130 = getelementptr inbounds [704 x i8], [704 x i8]* %10, i64 0, i64 176
  %131 = getelementptr inbounds [128 x i8], [128 x i8]* %15, i64 0, i64 14
  %132 = getelementptr inbounds [704 x i8], [704 x i8]* %10, i64 0, i64 304
  %133 = getelementptr inbounds [128 x i8], [128 x i8]* %15, i64 0, i64 22
  %134 = getelementptr inbounds [704 x i8], [704 x i8]* %10, i64 0, i64 496
  %135 = getelementptr inbounds [128 x i8], [128 x i8]* %15, i64 0, i64 7
  %136 = getelementptr inbounds [704 x i8], [704 x i8]* %10, i64 0, i64 184
  %137 = getelementptr inbounds [128 x i8], [128 x i8]* %15, i64 0, i64 15
  %138 = getelementptr inbounds [704 x i8], [704 x i8]* %10, i64 0, i64 312
  %139 = getelementptr inbounds [128 x i8], [128 x i8]* %15, i64 0, i64 23
  %140 = getelementptr inbounds [704 x i8], [704 x i8]* %10, i64 0, i64 504
  %141 = getelementptr inbounds i8, i8* %1, i64 4
  %142 = xor i64 %21, -1
  br label %143

143:                                              ; preds = %1103, %19
  %144 = phi i8* [ %1, %19 ], [ %148, %1103 ]
  %145 = phi i64 [ %2, %19 ], [ %1104, %1103 ]
  %146 = icmp ult i64 %145, 131072
  %147 = select i1 %146, i64 %145, i64 131072
  %148 = getelementptr inbounds i8, i8* %144, i64 %147
  %149 = icmp ugt i64 %147, 15
  br i1 %149, label %150, label %595, !prof !33

150:                                              ; preds = %143
  %151 = add nsw i64 %147, -4
  %152 = add i64 %145, -16
  %153 = icmp ult i64 %151, %152
  %154 = select i1 %153, i64 %151, i64 %152
  %155 = getelementptr inbounds i8, i8* %144, i64 %154
  %156 = ptrtoint i8* %148 to i64
  br label %157

157:                                              ; preds = %585, %150
  %158 = phi i64 [ %20, %150 ], [ %586, %585 ]
  %159 = phi i64 [ %21, %150 ], [ %318, %585 ]
  %160 = phi i8* [ %144, %150 ], [ %587, %585 ]
  %161 = phi i32 [ -1, %150 ], [ %588, %585 ]
  %162 = getelementptr inbounds i8, i8* %160, i64 1
  %163 = bitcast i8* %162 to i64*
  %164 = load i64, i64* %163, align 8
  %165 = sext i32 %161 to i64
  %166 = sub nsw i64 0, %165
  %167 = icmp slt i32 %161, 1
  br label %168

168:                                              ; preds = %206, %157
  %169 = phi i64 [ %164, %157 ], [ %181, %206 ]
  %170 = phi i32 [ 32, %157 ], [ %174, %206 ]
  %171 = phi i8* [ %162, %157 ], [ %177, %206 ]
  %172 = mul i64 %169, 2176830425094160384
  %173 = lshr i64 %172, 53
  %174 = add i32 %170, 1
  %175 = lshr i32 %170, 5
  %176 = zext i32 %175 to i64
  %177 = getelementptr inbounds i8, i8* %171, i64 %176
  %178 = icmp ugt i8* %177, %155
  br i1 %178, label %595, label %179, !prof !34

179:                                              ; preds = %168
  %180 = bitcast i8* %177 to i64*
  %181 = load i64, i64* %180, align 8
  %182 = getelementptr inbounds i8, i8* %171, i64 %166
  %183 = bitcast i8* %171 to i32*
  %184 = load i32, i32* %183, align 4
  %185 = bitcast i8* %182 to i32*
  %186 = load i32, i32* %185, align 4
  %187 = icmp ne i32 %184, %186
  %188 = or i1 %167, %187
  br i1 %188, label %194, label %189, !prof !35

189:                                              ; preds = %179
  %190 = ptrtoint i8* %171 to i64
  %191 = sub i64 %190, %22
  %192 = trunc i64 %191 to i32
  %193 = getelementptr inbounds i32, i32* %5, i64 %173
  store i32 %192, i32* %193, align 4
  br label %209

194:                                              ; preds = %179
  %195 = getelementptr inbounds i32, i32* %5, i64 %173
  %196 = load i32, i32* %195, align 4
  %197 = sext i32 %196 to i64
  %198 = getelementptr inbounds i8, i8* %1, i64 %197
  %199 = ptrtoint i8* %171 to i64
  %200 = sub i64 %199, %22
  %201 = trunc i64 %200 to i32
  store i32 %201, i32* %195, align 4
  %202 = load i32, i32* %183, align 4
  %203 = bitcast i8* %198 to i32*
  %204 = load i32, i32* %203, align 4
  %205 = icmp eq i32 %202, %204
  br i1 %205, label %207, label %206

206:                                              ; preds = %194, %209
  br label %168

207:                                              ; preds = %194
  %208 = ptrtoint i8* %171 to i64
  br label %209

209:                                              ; preds = %207, %189
  %210 = phi i64 [ %190, %189 ], [ %208, %207 ]
  %211 = phi i8* [ %182, %189 ], [ %198, %207 ]
  %212 = ptrtoint i8* %211 to i64
  %213 = sub i64 %210, %212
  %214 = icmp sgt i64 %213, 262128
  br i1 %214, label %206, label %215

215:                                              ; preds = %209
  %216 = getelementptr inbounds i8, i8* %211, i64 4
  %217 = getelementptr inbounds i8, i8* %171, i64 4
  %218 = sub i64 %156, %210
  %219 = add i64 %218, -4
  %220 = lshr i64 %219, 3
  %221 = icmp eq i64 %220, 0
  br i1 %221, label %242, label %222, !prof !34

222:                                              ; preds = %215, %232
  %223 = phi i64 [ %235, %232 ], [ %220, %215 ]
  %224 = phi i8* [ %233, %232 ], [ %217, %215 ]
  %225 = phi i64 [ %234, %232 ], [ 0, %215 ]
  %226 = bitcast i8* %224 to i64*
  %227 = load i64, i64* %226, align 8
  %228 = getelementptr inbounds i8, i8* %216, i64 %225
  %229 = bitcast i8* %228 to i64*
  %230 = load i64, i64* %229, align 8
  %231 = icmp eq i64 %227, %230
  br i1 %231, label %232, label %237, !prof !34

232:                                              ; preds = %222
  %233 = getelementptr inbounds i8, i8* %224, i64 8
  %234 = add nuw i64 %225, 8
  %235 = add nsw i64 %223, -1
  %236 = icmp eq i64 %235, 0
  br i1 %236, label %242, label %222, !prof !34

237:                                              ; preds = %222
  %238 = xor i64 %230, %227
  %239 = call i64 @llvm.cttz.i64(i64 %238, i1 true) #6, !range !36
  %240 = lshr i64 %239, 3
  %241 = or i64 %240, %225
  br label %255

242:                                              ; preds = %232, %215
  %243 = phi i64 [ 0, %215 ], [ %234, %232 ]
  %244 = phi i8* [ %217, %215 ], [ %233, %232 ]
  %245 = and i64 %219, 7
  %246 = icmp eq i64 %245, 0
  br i1 %246, label %255, label %247

247:                                              ; preds = %242
  %248 = getelementptr inbounds i8, i8* %216, i64 %243
  %249 = load i8, i8* %248, align 1
  %250 = load i8, i8* %244, align 1
  %251 = icmp eq i8 %249, %250
  br i1 %251, label %252, label %255, !prof !33

252:                                              ; preds = %247
  %253 = add i64 %243, 1
  %254 = icmp eq i64 %245, 1
  br i1 %254, label %255, label %1107

255:                                              ; preds = %1152, %252, %247, %1107, %1113, %1116, %1122, %1125, %1131, %1134, %1140, %1143, %1149, %242, %237
  %256 = phi i64 [ %241, %237 ], [ %243, %242 ], [ %253, %252 ], [ %243, %247 ], [ %253, %1107 ], [ %1114, %1113 ], [ %1114, %1116 ], [ %1123, %1122 ], [ %1123, %1125 ], [ %1132, %1131 ], [ %1132, %1134 ], [ %1141, %1140 ], [ %1141, %1143 ], [ %1150, %1149 ], [ %1159, %1152 ]
  %257 = add i64 %256, 4
  %258 = trunc i64 %213 to i32
  %259 = ptrtoint i8* %160 to i64
  %260 = sub i64 %210, %259
  %261 = trunc i64 %260 to i32
  %262 = getelementptr inbounds i8, i8* %171, i64 %257
  %263 = icmp ult i32 %261, 6
  br i1 %263, label %264, label %266

264:                                              ; preds = %255
  %265 = inttoptr i64 %158 to i32*
  store i32 %261, i32* %265, align 4
  br label %311

266:                                              ; preds = %255
  %267 = icmp ult i32 %261, 130
  br i1 %267, label %268, label %281

268:                                              ; preds = %266
  %269 = add nsw i32 %261, -2
  %270 = call i32 @llvm.ctlz.i32(i32 %269, i1 true) #6, !range !2
  %271 = sub nsw i32 30, %270
  %272 = lshr i32 %269, %271
  %273 = shl nsw i32 %271, 1
  %274 = add nuw nsw i32 %272, 2
  %275 = add i32 %274, %273
  %276 = shl i32 %272, %271
  %277 = sub i32 %269, %276
  %278 = shl i32 %277, 8
  %279 = or i32 %278, %275
  %280 = inttoptr i64 %158 to i32*
  store i32 %279, i32* %280, align 4
  br label %311

281:                                              ; preds = %266
  %282 = icmp ult i32 %261, 2114
  br i1 %282, label %283, label %293

283:                                              ; preds = %281
  %284 = add nsw i32 %261, -66
  %285 = call i32 @llvm.ctlz.i32(i32 %284, i1 true) #6, !range !2
  %286 = xor i32 %285, 31
  %287 = add nuw nsw i32 %286, 10
  %288 = shl i32 1, %286
  %289 = sub i32 %284, %288
  %290 = shl i32 %289, 8
  %291 = or i32 %290, %287
  %292 = inttoptr i64 %158 to i32*
  store i32 %291, i32* %292, align 4
  br label %311

293:                                              ; preds = %281
  %294 = icmp ult i32 %261, 6210
  br i1 %294, label %295, label %300

295:                                              ; preds = %293
  %296 = shl i32 %261, 8
  %297 = add nsw i32 %296, -541184
  %298 = or i32 %297, 21
  %299 = inttoptr i64 %158 to i32*
  store i32 %298, i32* %299, align 4
  br label %311

300:                                              ; preds = %293
  %301 = icmp ult i32 %261, 22594
  %302 = shl i32 %261, 8
  br i1 %301, label %303, label %307

303:                                              ; preds = %300
  %304 = add i32 %302, -1589760
  %305 = or i32 %304, 22
  %306 = inttoptr i64 %158 to i32*
  store i32 %305, i32* %306, align 4
  br label %311

307:                                              ; preds = %300
  %308 = add i32 %302, -5784064
  %309 = or i32 %308, 23
  %310 = inttoptr i64 %158 to i32*
  store i32 %309, i32* %310, align 4
  br label %311

311:                                              ; preds = %307, %303, %295, %283, %268, %264
  %312 = phi i32* [ %310, %307 ], [ %306, %303 ], [ %299, %295 ], [ %292, %283 ], [ %280, %268 ], [ %265, %264 ]
  %313 = getelementptr inbounds i32, i32* %312, i64 1
  %314 = inttoptr i64 %159 to i8*
  %315 = shl i64 %260, 32
  %316 = ashr exact i64 %315, 32
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %314, i8* align 1 %160, i64 %316, i1 false) #6
  %317 = getelementptr inbounds i8, i8* %314, i64 %316
  %318 = ptrtoint i8* %317 to i64
  %319 = icmp eq i32 %161, %258
  br i1 %319, label %336, label %320

320:                                              ; preds = %311
  %321 = add i32 %258, 3
  %322 = call i32 @llvm.ctlz.i32(i32 %321, i1 true) #6, !range !2
  %323 = xor i32 %322, 31
  %324 = add nsw i32 %323, -1
  %325 = lshr i32 %321, %324
  %326 = and i32 %325, 1
  %327 = or i32 %326, 2
  %328 = shl i32 %327, %324
  %329 = shl nuw nsw i32 %323, 1
  %330 = add nsw i32 %329, -4
  %331 = or i32 %326, %330
  %332 = add nsw i32 %331, 80
  %333 = sub i32 %321, %328
  %334 = shl i32 %333, 8
  %335 = or i32 %334, %332
  br label %336

336:                                              ; preds = %320, %311
  %337 = phi i32 [ %335, %320 ], [ 64, %311 ]
  %338 = phi i32 [ %258, %320 ], [ %161, %311 ]
  store i32 %337, i32* %313, align 4
  %339 = getelementptr inbounds i32, i32* %312, i64 2
  %340 = icmp ult i64 %257, 12
  br i1 %340, label %341, label %344

341:                                              ; preds = %336
  %342 = trunc i64 %257 to i32
  %343 = add nuw nsw i32 %342, 20
  store i32 %343, i32* %339, align 4
  br label %393

344:                                              ; preds = %336
  %345 = icmp ult i64 %257, 72
  br i1 %345, label %346, label %361

346:                                              ; preds = %344
  %347 = add nsw i64 %256, -4
  %348 = trunc i64 %347 to i32
  %349 = call i32 @llvm.ctlz.i32(i32 %348, i1 true) #6, !range !2
  %350 = sub nsw i32 30, %349
  %351 = zext i32 %350 to i64
  %352 = lshr i64 %347, %351
  %353 = shl nuw nsw i64 %351, 1
  %354 = add nuw nsw i64 %352, 28
  %355 = add nuw nsw i64 %354, %353
  %356 = shl i64 %352, %351
  %357 = sub i64 %347, %356
  %358 = shl i64 %357, 8
  %359 = or i64 %358, %355
  %360 = trunc i64 %359 to i32
  store i32 %360, i32* %339, align 4
  br label %393

361:                                              ; preds = %344
  %362 = icmp ult i64 %257, 136
  br i1 %362, label %363, label %372

363:                                              ; preds = %361
  %364 = add nsw i64 %256, -4
  %365 = lshr i64 %364, 5
  %366 = add nuw nsw i64 %365, 54
  %367 = shl i64 %364, 8
  %368 = and i64 %367, 7936
  %369 = or i64 %366, %368
  %370 = trunc i64 %369 to i32
  store i32 %370, i32* %339, align 4
  %371 = getelementptr inbounds i32, i32* %312, i64 3
  store i32 64, i32* %371, align 4
  br label %393

372:                                              ; preds = %361
  %373 = icmp ult i64 %257, 2120
  br i1 %373, label %374, label %387

374:                                              ; preds = %372
  %375 = add nsw i64 %256, -68
  %376 = trunc i64 %375 to i32
  %377 = call i32 @llvm.ctlz.i32(i32 %376, i1 true) #6, !range !2
  %378 = xor i32 %377, 31
  %379 = zext i32 %378 to i64
  %380 = add nuw nsw i64 %379, 52
  %381 = shl i64 1, %379
  %382 = sub i64 %375, %381
  %383 = shl i64 %382, 8
  %384 = or i64 %383, %380
  %385 = trunc i64 %384 to i32
  store i32 %385, i32* %339, align 4
  %386 = getelementptr inbounds i32, i32* %312, i64 3
  store i32 64, i32* %386, align 4
  br label %393

387:                                              ; preds = %372
  %388 = trunc i64 %257 to i32
  %389 = shl i32 %388, 8
  %390 = add i32 %389, -542720
  %391 = or i32 %390, 63
  store i32 %391, i32* %339, align 4
  %392 = getelementptr inbounds i32, i32* %312, i64 3
  store i32 64, i32* %392, align 4
  br label %393

393:                                              ; preds = %387, %374, %363, %346, %341
  %394 = phi i64 [ 4, %387 ], [ 4, %374 ], [ 4, %363 ], [ 3, %346 ], [ 3, %341 ]
  %395 = getelementptr inbounds i32, i32* %312, i64 %394
  %396 = ptrtoint i32* %395 to i64
  %397 = icmp ult i8* %262, %155
  br i1 %397, label %398, label %592, !prof !33

398:                                              ; preds = %393
  %399 = getelementptr inbounds i8, i8* %262, i64 -3
  %400 = bitcast i8* %399 to i64*
  %401 = load i64, i64* %400, align 8
  %402 = lshr i64 %401, 24
  %403 = mul i64 %402, 2176830425094160384
  %404 = mul i64 %401, 2176830425094160384
  %405 = lshr i64 %404, 53
  %406 = ptrtoint i8* %262 to i64
  %407 = sub i64 %406, %22
  %408 = trunc i64 %407 to i32
  %409 = getelementptr inbounds i32, i32* %5, i64 %405
  %410 = lshr i64 %401, 8
  %411 = mul i64 %410, 2176830425094160384
  %412 = lshr i64 %411, 53
  %413 = add i32 %408, -2
  %414 = getelementptr inbounds i32, i32* %5, i64 %412
  store i32 %413, i32* %414, align 4
  %415 = add i32 %408, -1
  store i32 %415, i32* %409, align 4
  %416 = lshr i64 %403, 53
  %417 = getelementptr inbounds i32, i32* %5, i64 %416
  %418 = load i32, i32* %417, align 4
  store i32 %408, i32* %417, align 4
  %419 = sext i32 %418 to i64
  %420 = getelementptr inbounds i8, i8* %1, i64 %419
  %421 = ptrtoint i8* %420 to i64
  %422 = sub i64 %406, %421
  %423 = icmp slt i64 %422, 262129
  br i1 %423, label %424, label %585

424:                                              ; preds = %398
  %425 = bitcast i8* %262 to i32*
  %426 = load i32, i32* %425, align 4
  %427 = bitcast i8* %420 to i32*
  %428 = load i32, i32* %427, align 4
  %429 = icmp eq i32 %426, %428
  br i1 %429, label %436, label %585

430:                                              ; preds = %551
  %431 = bitcast i8* %484 to i32*
  %432 = load i32, i32* %431, align 4
  %433 = bitcast i8* %578 to i32*
  %434 = load i32, i32* %433, align 4
  %435 = icmp eq i32 %432, %434
  br i1 %435, label %436, label %582

436:                                              ; preds = %424, %430
  %437 = phi i8* [ %484, %430 ], [ %262, %424 ]
  %438 = phi i64 [ %577, %430 ], [ %419, %424 ]
  %439 = phi i64 [ %559, %430 ], [ %406, %424 ]
  %440 = phi i64 [ %580, %430 ], [ %422, %424 ]
  %441 = phi i64 [ %549, %430 ], [ %396, %424 ]
  %442 = getelementptr inbounds i8, i8* %141, i64 %438
  %443 = getelementptr inbounds i8, i8* %437, i64 4
  %444 = sub i64 %156, %439
  %445 = add i64 %444, -4
  %446 = lshr i64 %445, 3
  %447 = icmp eq i64 %446, 0
  br i1 %447, label %468, label %448, !prof !34

448:                                              ; preds = %436, %458
  %449 = phi i64 [ %461, %458 ], [ %446, %436 ]
  %450 = phi i8* [ %459, %458 ], [ %443, %436 ]
  %451 = phi i64 [ %460, %458 ], [ 0, %436 ]
  %452 = bitcast i8* %450 to i64*
  %453 = load i64, i64* %452, align 8
  %454 = getelementptr inbounds i8, i8* %442, i64 %451
  %455 = bitcast i8* %454 to i64*
  %456 = load i64, i64* %455, align 8
  %457 = icmp eq i64 %453, %456
  br i1 %457, label %458, label %463, !prof !34

458:                                              ; preds = %448
  %459 = getelementptr inbounds i8, i8* %450, i64 8
  %460 = add nuw i64 %451, 8
  %461 = add nsw i64 %449, -1
  %462 = icmp eq i64 %461, 0
  br i1 %462, label %468, label %448, !prof !34

463:                                              ; preds = %448
  %464 = xor i64 %456, %453
  %465 = call i64 @llvm.cttz.i64(i64 %464, i1 true) #6, !range !36
  %466 = lshr i64 %465, 3
  %467 = or i64 %466, %451
  br label %481

468:                                              ; preds = %458, %436
  %469 = phi i64 [ 0, %436 ], [ %460, %458 ]
  %470 = phi i8* [ %443, %436 ], [ %459, %458 ]
  %471 = and i64 %445, 7
  %472 = icmp eq i64 %471, 0
  br i1 %472, label %481, label %473

473:                                              ; preds = %468
  %474 = getelementptr inbounds i8, i8* %442, i64 %469
  %475 = load i8, i8* %474, align 1
  %476 = load i8, i8* %470, align 1
  %477 = icmp eq i8 %475, %476
  br i1 %477, label %478, label %481, !prof !33

478:                                              ; preds = %473
  %479 = add i64 %469, 1
  %480 = icmp eq i64 %471, 1
  br i1 %480, label %481, label %1160

481:                                              ; preds = %1205, %478, %473, %1160, %1166, %1169, %1175, %1178, %1184, %1187, %1193, %1196, %1202, %468, %463
  %482 = phi i64 [ %467, %463 ], [ %469, %468 ], [ %479, %478 ], [ %469, %473 ], [ %479, %1160 ], [ %1167, %1166 ], [ %1167, %1169 ], [ %1176, %1175 ], [ %1176, %1178 ], [ %1185, %1184 ], [ %1185, %1187 ], [ %1194, %1193 ], [ %1194, %1196 ], [ %1203, %1202 ], [ %1212, %1205 ]
  %483 = add i64 %482, 4
  %484 = getelementptr inbounds i8, i8* %437, i64 %483
  %485 = trunc i64 %440 to i32
  %486 = icmp ult i64 %483, 10
  br i1 %486, label %487, label %491

487:                                              ; preds = %481
  %488 = trunc i64 %483 to i32
  %489 = add nuw nsw i32 %488, 38
  %490 = inttoptr i64 %441 to i32*
  store i32 %489, i32* %490, align 4
  br label %530

491:                                              ; preds = %481
  %492 = icmp ult i64 %483, 134
  br i1 %492, label %493, label %509

493:                                              ; preds = %491
  %494 = add nsw i64 %482, -2
  %495 = trunc i64 %494 to i32
  %496 = call i32 @llvm.ctlz.i32(i32 %495, i1 true) #6, !range !2
  %497 = sub nsw i32 30, %496
  %498 = zext i32 %497 to i64
  %499 = lshr i64 %494, %498
  %500 = shl nuw nsw i64 %498, 1
  %501 = add nuw nsw i64 %499, 44
  %502 = add nuw nsw i64 %501, %500
  %503 = shl i64 %499, %498
  %504 = sub i64 %494, %503
  %505 = shl i64 %504, 8
  %506 = or i64 %505, %502
  %507 = trunc i64 %506 to i32
  %508 = inttoptr i64 %441 to i32*
  store i32 %507, i32* %508, align 4
  br label %530

509:                                              ; preds = %491
  %510 = icmp ult i64 %483, 2118
  br i1 %510, label %511, label %524

511:                                              ; preds = %509
  %512 = add nsw i64 %482, -66
  %513 = trunc i64 %512 to i32
  %514 = call i32 @llvm.ctlz.i32(i32 %513, i1 true) #6, !range !2
  %515 = xor i32 %514, 31
  %516 = zext i32 %515 to i64
  %517 = add nuw nsw i64 %516, 52
  %518 = shl i64 1, %516
  %519 = sub i64 %512, %518
  %520 = shl i64 %519, 8
  %521 = or i64 %520, %517
  %522 = trunc i64 %521 to i32
  %523 = inttoptr i64 %441 to i32*
  store i32 %522, i32* %523, align 4
  br label %530

524:                                              ; preds = %509
  %525 = trunc i64 %483 to i32
  %526 = shl i32 %525, 8
  %527 = add i32 %526, -542208
  %528 = or i32 %527, 63
  %529 = inttoptr i64 %441 to i32*
  store i32 %528, i32* %529, align 4
  br label %530

530:                                              ; preds = %524, %511, %493, %487
  %531 = phi i32* [ %529, %524 ], [ %523, %511 ], [ %508, %493 ], [ %490, %487 ]
  %532 = getelementptr inbounds i32, i32* %531, i64 1
  %533 = add i32 %485, 3
  %534 = call i32 @llvm.ctlz.i32(i32 %533, i1 true) #6, !range !2
  %535 = xor i32 %534, 31
  %536 = add nsw i32 %535, -1
  %537 = lshr i32 %533, %536
  %538 = and i32 %537, 1
  %539 = or i32 %538, 2
  %540 = shl i32 %539, %536
  %541 = shl nuw nsw i32 %535, 1
  %542 = add nsw i32 %541, -4
  %543 = or i32 %538, %542
  %544 = add nsw i32 %543, 80
  %545 = sub i32 %533, %540
  %546 = shl i32 %545, 8
  %547 = or i32 %546, %544
  store i32 %547, i32* %532, align 4
  %548 = getelementptr inbounds i32, i32* %531, i64 2
  %549 = ptrtoint i32* %548 to i64
  %550 = icmp ult i8* %484, %155
  br i1 %550, label %551, label %589, !prof !33

551:                                              ; preds = %530
  %552 = getelementptr inbounds i8, i8* %484, i64 -3
  %553 = bitcast i8* %552 to i64*
  %554 = load i64, i64* %553, align 8
  %555 = lshr i64 %554, 24
  %556 = mul i64 %555, 2176830425094160384
  %557 = mul i64 %554, 2176830425094160384
  %558 = lshr i64 %557, 53
  %559 = ptrtoint i8* %484 to i64
  %560 = sub i64 %559, %22
  %561 = trunc i64 %560 to i32
  %562 = add i32 %561, -3
  %563 = getelementptr inbounds i32, i32* %5, i64 %558
  store i32 %562, i32* %563, align 4
  %564 = lshr i64 %554, 8
  %565 = mul i64 %564, 2176830425094160384
  %566 = lshr i64 %565, 53
  %567 = add i32 %561, -2
  %568 = getelementptr inbounds i32, i32* %5, i64 %566
  store i32 %567, i32* %568, align 4
  %569 = lshr i64 %554, 16
  %570 = mul i64 %569, 2176830425094160384
  %571 = lshr i64 %570, 53
  %572 = add i32 %561, -1
  %573 = getelementptr inbounds i32, i32* %5, i64 %571
  store i32 %572, i32* %573, align 4
  %574 = lshr i64 %556, 53
  %575 = getelementptr inbounds i32, i32* %5, i64 %574
  %576 = load i32, i32* %575, align 4
  store i32 %561, i32* %575, align 4
  %577 = sext i32 %576 to i64
  %578 = getelementptr inbounds i8, i8* %1, i64 %577
  %579 = ptrtoint i8* %578 to i64
  %580 = sub i64 %559, %579
  %581 = icmp slt i64 %580, 262129
  br i1 %581, label %430, label %582

582:                                              ; preds = %551, %430
  %583 = trunc i64 %440 to i32
  %584 = ptrtoint i32* %548 to i64
  br label %585

585:                                              ; preds = %582, %424, %398
  %586 = phi i64 [ %396, %398 ], [ %396, %424 ], [ %584, %582 ]
  %587 = phi i8* [ %262, %398 ], [ %262, %424 ], [ %484, %582 ]
  %588 = phi i32 [ %338, %398 ], [ %338, %424 ], [ %583, %582 ]
  br label %157

589:                                              ; preds = %530
  %590 = ptrtoint i8* %317 to i64
  %591 = ptrtoint i32* %548 to i64
  br label %595

592:                                              ; preds = %393
  %593 = ptrtoint i8* %317 to i64
  %594 = ptrtoint i32* %395 to i64
  br label %595

595:                                              ; preds = %168, %592, %589, %143
  %596 = phi i64 [ %20, %143 ], [ %591, %589 ], [ %594, %592 ], [ %158, %168 ]
  %597 = phi i64 [ %21, %143 ], [ %590, %589 ], [ %593, %592 ], [ %159, %168 ]
  %598 = phi i8* [ %144, %143 ], [ %484, %589 ], [ %262, %592 ], [ %160, %168 ]
  %599 = icmp ult i8* %598, %148
  br i1 %599, label %600, label %661

600:                                              ; preds = %595
  %601 = ptrtoint i8* %148 to i64
  %602 = ptrtoint i8* %598 to i64
  %603 = sub i64 %601, %602
  %604 = trunc i64 %603 to i32
  %605 = icmp ult i32 %604, 6
  br i1 %605, label %606, label %608

606:                                              ; preds = %600
  %607 = inttoptr i64 %596 to i32*
  store i32 %604, i32* %607, align 4
  br label %653

608:                                              ; preds = %600
  %609 = icmp ult i32 %604, 130
  br i1 %609, label %610, label %623

610:                                              ; preds = %608
  %611 = add nsw i32 %604, -2
  %612 = call i32 @llvm.ctlz.i32(i32 %611, i1 true) #6, !range !2
  %613 = sub nsw i32 30, %612
  %614 = lshr i32 %611, %613
  %615 = shl nsw i32 %613, 1
  %616 = add nuw nsw i32 %614, 2
  %617 = add i32 %616, %615
  %618 = shl i32 %614, %613
  %619 = sub i32 %611, %618
  %620 = shl i32 %619, 8
  %621 = or i32 %620, %617
  %622 = inttoptr i64 %596 to i32*
  store i32 %621, i32* %622, align 4
  br label %653

623:                                              ; preds = %608
  %624 = icmp ult i32 %604, 2114
  br i1 %624, label %625, label %635

625:                                              ; preds = %623
  %626 = add nsw i32 %604, -66
  %627 = call i32 @llvm.ctlz.i32(i32 %626, i1 true) #6, !range !2
  %628 = xor i32 %627, 31
  %629 = add nuw nsw i32 %628, 10
  %630 = shl i32 1, %628
  %631 = sub i32 %626, %630
  %632 = shl i32 %631, 8
  %633 = or i32 %632, %629
  %634 = inttoptr i64 %596 to i32*
  store i32 %633, i32* %634, align 4
  br label %653

635:                                              ; preds = %623
  %636 = icmp ult i32 %604, 6210
  br i1 %636, label %637, label %642

637:                                              ; preds = %635
  %638 = shl i32 %604, 8
  %639 = add nsw i32 %638, -541184
  %640 = or i32 %639, 21
  %641 = inttoptr i64 %596 to i32*
  store i32 %640, i32* %641, align 4
  br label %653

642:                                              ; preds = %635
  %643 = icmp ult i32 %604, 22594
  %644 = shl i32 %604, 8
  br i1 %643, label %645, label %649

645:                                              ; preds = %642
  %646 = add i32 %644, -1589760
  %647 = or i32 %646, 22
  %648 = inttoptr i64 %596 to i32*
  store i32 %647, i32* %648, align 4
  br label %653

649:                                              ; preds = %642
  %650 = add i32 %644, -5784064
  %651 = or i32 %650, 23
  %652 = inttoptr i64 %596 to i32*
  store i32 %651, i32* %652, align 4
  br label %653

653:                                              ; preds = %649, %645, %637, %625, %610, %606
  %654 = phi i32* [ %652, %649 ], [ %648, %645 ], [ %641, %637 ], [ %634, %625 ], [ %622, %610 ], [ %607, %606 ]
  %655 = getelementptr inbounds i32, i32* %654, i64 1
  %656 = ptrtoint i32* %655 to i64
  %657 = inttoptr i64 %597 to i8*
  %658 = and i64 %603, 4294967295
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %657, i8* align 1 %598, i64 %658, i1 false) #6
  %659 = getelementptr inbounds i8, i8* %657, i64 %658
  %660 = ptrtoint i8* %659 to i64
  br label %661

661:                                              ; preds = %653, %595
  %662 = phi i64 [ %656, %653 ], [ %596, %595 ]
  %663 = phi i64 [ %660, %653 ], [ %597, %595 ]
  %664 = sub i64 %663, %21
  %665 = uitofp i64 %147 to double
  %666 = uitofp i64 %664 to double
  %667 = fmul double %665, 0x3FEF5C28F5C28F5C
  %668 = fcmp ogt double %667, %666
  br i1 %668, label %743, label %669

669:                                              ; preds = %661
  call void @llvm.lifetime.start.p0i8(i64 1024, i8* nonnull %23) #6
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %23, i8 0, i64 1024, i1 false) #6
  %670 = fmul double %665, 8.000000e+00
  %671 = fmul double %670, 0x3FEF5C28F5C28F5C
  %672 = fdiv double %671, 4.300000e+01
  %673 = icmp eq i64 %147, 0
  br i1 %673, label %684, label %674

674:                                              ; preds = %669, %674
  %675 = phi i64 [ %682, %674 ], [ 0, %669 ]
  %676 = getelementptr inbounds i8, i8* %144, i64 %675
  %677 = load i8, i8* %676, align 1
  %678 = zext i8 %677 to i64
  %679 = getelementptr inbounds [256 x i32], [256 x i32]* %14, i64 0, i64 %678
  %680 = load i32, i32* %679, align 4
  %681 = add i32 %680, 1
  store i32 %681, i32* %679, align 4
  %682 = add i64 %675, 43
  %683 = icmp ult i64 %682, %147
  br i1 %683, label %674, label %684

684:                                              ; preds = %674, %669
  br label %685

685:                                              ; preds = %684, %719
  %686 = phi double [ %722, %719 ], [ 0.000000e+00, %684 ]
  %687 = phi i64 [ %711, %719 ], [ 0, %684 ]
  %688 = phi i64 [ %708, %719 ], [ 0, %684 ]
  %689 = getelementptr inbounds [256 x i32], [256 x i32]* %14, i64 0, i64 %688
  %690 = load i32, i32* %689, align 8
  %691 = zext i32 %690 to i64
  %692 = icmp ult i32 %690, 256
  br i1 %692, label %693, label %697

693:                                              ; preds = %685
  %694 = getelementptr inbounds [256 x double], [256 x double]* @kBrotliLog2Table, i64 0, i64 %691
  %695 = load double, double* %694, align 8
  %696 = uitofp i32 %690 to double
  br label %700

697:                                              ; preds = %685
  %698 = uitofp i32 %690 to double
  %699 = call double @log2(double %698) #6
  br label %700

700:                                              ; preds = %697, %693
  %701 = phi double [ %696, %693 ], [ %698, %697 ]
  %702 = phi double [ %695, %693 ], [ %699, %697 ]
  %703 = or i64 %688, 1
  %704 = getelementptr inbounds [256 x i32], [256 x i32]* %14, i64 0, i64 %703
  %705 = fmul double %701, %702
  %706 = fsub double %686, %705
  %707 = add i64 %687, %691
  %708 = add nuw nsw i64 %688, 2
  %709 = load i32, i32* %704, align 4
  %710 = zext i32 %709 to i64
  %711 = add i64 %707, %710
  %712 = uitofp i32 %709 to double
  %713 = icmp ult i32 %709, 256
  br i1 %713, label %714, label %717

714:                                              ; preds = %700
  %715 = getelementptr inbounds [256 x double], [256 x double]* @kBrotliLog2Table, i64 0, i64 %710
  %716 = load double, double* %715, align 8
  br label %719

717:                                              ; preds = %700
  %718 = call double @log2(double %712) #6
  br label %719

719:                                              ; preds = %717, %714
  %720 = phi double [ %716, %714 ], [ %718, %717 ]
  %721 = fmul double %720, %712
  %722 = fsub double %706, %721
  %723 = icmp ult i64 %708, 256
  br i1 %723, label %685, label %724

724:                                              ; preds = %719
  %725 = icmp eq i64 %711, 0
  %726 = uitofp i64 %711 to double
  br i1 %725, label %738, label %727

727:                                              ; preds = %724
  %728 = icmp ult i64 %711, 256
  br i1 %728, label %729, label %732

729:                                              ; preds = %727
  %730 = getelementptr inbounds [256 x double], [256 x double]* @kBrotliLog2Table, i64 0, i64 %711
  %731 = load double, double* %730, align 8
  br label %734

732:                                              ; preds = %727
  %733 = call double @log2(double %726) #6
  br label %734

734:                                              ; preds = %732, %729
  %735 = phi double [ %731, %729 ], [ %733, %732 ]
  %736 = fmul double %735, %726
  %737 = fadd double %722, %736
  br label %738

738:                                              ; preds = %734, %724
  %739 = phi double [ %737, %734 ], [ %722, %724 ]
  %740 = fcmp olt double %739, %726
  %741 = select i1 %740, double %726, double %739
  %742 = fcmp uge double %741, %672
  call void @llvm.lifetime.end.p0i8(i64 1024, i8* nonnull %23) #6
  br i1 %742, label %1055, label %743

743:                                              ; preds = %738, %661
  %744 = sub i64 %662, %20
  %745 = ashr exact i64 %744, 2
  %746 = load i64, i64* %6, align 8, !alias.scope !221, !noalias !224
  %747 = lshr i64 %746, 3
  %748 = getelementptr inbounds i8, i8* %7, i64 %747
  %749 = load i8, i8* %748, align 1, !alias.scope !224, !noalias !221
  %750 = zext i8 %749 to i64
  %751 = bitcast i8* %748 to i64*
  store i64 %750, i64* %751, align 8, !alias.scope !224, !noalias !221
  %752 = add i64 %746, 1
  %753 = icmp ult i64 %147, 65537
  %754 = select i1 %753, i64 4, i64 5
  %755 = add nsw i64 %754, -4
  %756 = lshr i64 %752, 3
  %757 = getelementptr inbounds i8, i8* %7, i64 %756
  %758 = load i8, i8* %757, align 1, !alias.scope !226, !noalias !229
  %759 = zext i8 %758 to i64
  %760 = and i64 %752, 7
  %761 = shl i64 %755, %760
  %762 = or i64 %761, %759
  %763 = bitcast i8* %757 to i64*
  store i64 %762, i64* %763, align 8, !alias.scope !226, !noalias !229
  %764 = add i64 %746, 3
  %765 = shl nuw nsw i64 %754, 2
  %766 = add nsw i64 %147, -1
  %767 = lshr i64 %764, 3
  %768 = getelementptr inbounds i8, i8* %7, i64 %767
  %769 = load i8, i8* %768, align 1, !alias.scope !231, !noalias !234
  %770 = zext i8 %769 to i64
  %771 = and i64 %764, 7
  %772 = shl i64 %766, %771
  %773 = or i64 %772, %770
  %774 = bitcast i8* %768 to i64*
  store i64 %773, i64* %774, align 8, !alias.scope !231, !noalias !234
  %775 = add i64 %764, %765
  %776 = lshr i64 %775, 3
  %777 = getelementptr inbounds i8, i8* %7, i64 %776
  %778 = load i8, i8* %777, align 1, !alias.scope !236, !noalias !239
  %779 = zext i8 %778 to i64
  %780 = bitcast i8* %777 to i64*
  store i64 %779, i64* %780, align 8, !alias.scope !236, !noalias !239
  %781 = add i64 %775, 1
  %782 = lshr i64 %781, 3
  %783 = getelementptr inbounds i8, i8* %7, i64 %782
  %784 = load i8, i8* %783, align 1, !alias.scope !241, !noalias !244
  %785 = zext i8 %784 to i64
  %786 = bitcast i8* %783 to i64*
  store i64 %785, i64* %786, align 8, !alias.scope !241, !noalias !244
  %787 = add i64 %775, 14
  store i64 %787, i64* %6, align 8, !alias.scope !244, !noalias !241
  call void @llvm.lifetime.start.p0i8(i64 256, i8* nonnull %24) #6
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %24, i8 -86, i64 256, i1 false) #6
  call void @llvm.lifetime.start.p0i8(i64 512, i8* nonnull %25) #6
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %25, i8 -86, i64 512, i1 false) #6
  call void @llvm.lifetime.start.p0i8(i64 1024, i8* nonnull %23) #6
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %23, i8 0, i64 1024, i1 false) #6
  call void @llvm.lifetime.start.p0i8(i64 128, i8* nonnull %26) #6
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %26, i8 0, i64 128, i1 false) #6
  call void @llvm.lifetime.start.p0i8(i64 256, i8* nonnull %27) #6
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %27, i8 0, i64 256, i1 false) #6
  call void @llvm.lifetime.start.p0i8(i64 512, i8* nonnull %28) #6
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %28, i8 0, i64 512, i1 false) #6
  %788 = icmp eq i64 %664, 0
  br i1 %788, label %843, label %789

789:                                              ; preds = %743
  %790 = add i64 %663, %142
  %791 = and i64 %664, 3
  %792 = icmp ult i64 %790, 3
  br i1 %792, label %828, label %793

793:                                              ; preds = %789
  %794 = sub i64 %664, %791
  br label %795

795:                                              ; preds = %795, %793
  %796 = phi i64 [ 0, %793 ], [ %825, %795 ]
  %797 = phi i64 [ %794, %793 ], [ %826, %795 ]
  %798 = getelementptr inbounds i8, i8* %4, i64 %796
  %799 = load i8, i8* %798, align 1
  %800 = zext i8 %799 to i64
  %801 = getelementptr inbounds [256 x i32], [256 x i32]* %14, i64 0, i64 %800
  %802 = load i32, i32* %801, align 4
  %803 = add i32 %802, 1
  store i32 %803, i32* %801, align 4
  %804 = or i64 %796, 1
  %805 = getelementptr inbounds i8, i8* %4, i64 %804
  %806 = load i8, i8* %805, align 1
  %807 = zext i8 %806 to i64
  %808 = getelementptr inbounds [256 x i32], [256 x i32]* %14, i64 0, i64 %807
  %809 = load i32, i32* %808, align 4
  %810 = add i32 %809, 1
  store i32 %810, i32* %808, align 4
  %811 = or i64 %796, 2
  %812 = getelementptr inbounds i8, i8* %4, i64 %811
  %813 = load i8, i8* %812, align 1
  %814 = zext i8 %813 to i64
  %815 = getelementptr inbounds [256 x i32], [256 x i32]* %14, i64 0, i64 %814
  %816 = load i32, i32* %815, align 4
  %817 = add i32 %816, 1
  store i32 %817, i32* %815, align 4
  %818 = or i64 %796, 3
  %819 = getelementptr inbounds i8, i8* %4, i64 %818
  %820 = load i8, i8* %819, align 1
  %821 = zext i8 %820 to i64
  %822 = getelementptr inbounds [256 x i32], [256 x i32]* %14, i64 0, i64 %821
  %823 = load i32, i32* %822, align 4
  %824 = add i32 %823, 1
  store i32 %824, i32* %822, align 4
  %825 = add nuw i64 %796, 4
  %826 = add i64 %797, -4
  %827 = icmp eq i64 %826, 0
  br i1 %827, label %828, label %795

828:                                              ; preds = %795, %789
  %829 = phi i64 [ 0, %789 ], [ %825, %795 ]
  %830 = icmp eq i64 %791, 0
  br i1 %830, label %843, label %831

831:                                              ; preds = %828, %831
  %832 = phi i64 [ %840, %831 ], [ %829, %828 ]
  %833 = phi i64 [ %841, %831 ], [ %791, %828 ]
  %834 = getelementptr inbounds i8, i8* %4, i64 %832
  %835 = load i8, i8* %834, align 1
  %836 = zext i8 %835 to i64
  %837 = getelementptr inbounds [256 x i32], [256 x i32]* %14, i64 0, i64 %836
  %838 = load i32, i32* %837, align 4
  %839 = add i32 %838, 1
  store i32 %839, i32* %837, align 4
  %840 = add nuw i64 %832, 1
  %841 = add i64 %833, -1
  %842 = icmp eq i64 %841, 0
  br i1 %842, label %843, label %831, !llvm.loop !246

843:                                              ; preds = %828, %831, %743
  call void @BrotliBuildAndStoreHuffmanTreeFast(%struct.MemoryManager* %0, i32* nonnull %29, i64 %664, i64 8, i8* nonnull %24, i16* nonnull %30, i64* %6, i8* %7) #6
  %844 = icmp eq i64 %744, 0
  br i1 %844, label %891, label %845

845:                                              ; preds = %843
  %846 = and i64 %745, 1
  %847 = icmp eq i64 %744, 4
  br i1 %847, label %871, label %848

848:                                              ; preds = %845
  %849 = sub nsw i64 %745, %846
  br label %850

850:                                              ; preds = %850, %848
  %851 = phi i64 [ 0, %848 ], [ %868, %850 ]
  %852 = phi i64 [ %849, %848 ], [ %869, %850 ]
  %853 = getelementptr inbounds i32, i32* %3, i64 %851
  %854 = load i32, i32* %853, align 4
  %855 = and i32 %854, 255
  %856 = zext i32 %855 to i64
  %857 = getelementptr inbounds [128 x i32], [128 x i32]* %17, i64 0, i64 %856
  %858 = load i32, i32* %857, align 4
  %859 = add i32 %858, 1
  store i32 %859, i32* %857, align 4
  %860 = or i64 %851, 1
  %861 = getelementptr inbounds i32, i32* %3, i64 %860
  %862 = load i32, i32* %861, align 4
  %863 = and i32 %862, 255
  %864 = zext i32 %863 to i64
  %865 = getelementptr inbounds [128 x i32], [128 x i32]* %17, i64 0, i64 %864
  %866 = load i32, i32* %865, align 4
  %867 = add i32 %866, 1
  store i32 %867, i32* %865, align 4
  %868 = add nuw i64 %851, 2
  %869 = add i64 %852, -2
  %870 = icmp eq i64 %869, 0
  br i1 %870, label %871, label %850

871:                                              ; preds = %850, %845
  %872 = phi i64 [ 0, %845 ], [ %868, %850 ]
  %873 = icmp eq i64 %846, 0
  br i1 %873, label %882, label %874

874:                                              ; preds = %871
  %875 = getelementptr inbounds i32, i32* %3, i64 %872
  %876 = load i32, i32* %875, align 4
  %877 = and i32 %876, 255
  %878 = zext i32 %877 to i64
  %879 = getelementptr inbounds [128 x i32], [128 x i32]* %17, i64 0, i64 %878
  %880 = load i32, i32* %879, align 4
  %881 = add i32 %880, 1
  store i32 %881, i32* %879, align 4
  br label %882

882:                                              ; preds = %871, %874
  %883 = load i32, i32* %31, align 4
  %884 = load i32, i32* %32, align 8
  %885 = load i32, i32* %33, align 16
  %886 = load i32, i32* %34, align 16
  %887 = add i32 %883, 1
  %888 = add i32 %884, 1
  %889 = add i32 %885, 1
  %890 = add i32 %886, 1
  br label %891

891:                                              ; preds = %882, %843
  %892 = phi i32 [ %890, %882 ], [ 1, %843 ]
  %893 = phi i32 [ %889, %882 ], [ 1, %843 ]
  %894 = phi i32 [ %888, %882 ], [ 1, %843 ]
  %895 = phi i32 [ %887, %882 ], [ 1, %843 ]
  store i32 %895, i32* %31, align 4
  store i32 %894, i32* %32, align 8
  store i32 %893, i32* %33, align 16
  store i32 %892, i32* %34, align 16
  call void @llvm.lifetime.start.p0i8(i64 1032, i8* nonnull %36) #6
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %36, i8 -86, i64 1032, i1 false) #6
  call void @llvm.lifetime.start.p0i8(i64 704, i8* nonnull %37) #6
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %37, i8 0, i64 704, i1 false) #6
  call void @llvm.lifetime.start.p0i8(i64 128, i8* nonnull %38) #6
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %38, i8 -86, i64 128, i1 false) #6
  call void @BrotliCreateHuffmanTree(i32* nonnull %35, i64 64, i32 15, %struct.HuffmanTree* nonnull %39, i8* nonnull %26) #6
  call void @BrotliCreateHuffmanTree(i32* %33, i64 64, i32 14, %struct.HuffmanTree* nonnull %39, i8* %40) #6
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 16 %37, i8* align 8 %41, i64 24, i1 false) #6
  %896 = load i64, i64* %43, align 16
  store i64 %896, i64* %44, align 8
  %897 = load i64, i64* %47, align 16
  store i64 %897, i64* %48, align 16
  %898 = load i64, i64* %51, align 8
  store i64 %898, i64* %52, align 8
  %899 = load i64, i64* %55, align 8
  store i64 %899, i64* %56, align 16
  %900 = load i64, i64* %59, align 16
  store i64 %900, i64* %60, align 8
  call void @BrotliConvertBitDepthsToSymbols(i8* nonnull %37, i64 64, i16* nonnull %61) #6
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 16 %27, i8* align 16 %63, i64 16, i1 false) #6
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 16 %65, i8* align 16 %67, i64 16, i1 false) #6
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 16 %69, i8* align 16 %71, i64 16, i1 false) #6
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 16 %73, i8* nonnull align 16 %38, i64 48, i1 false) #6
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 16 %75, i8* align 16 %77, i64 16, i1 false) #6
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 16 %79, i8* align 16 %81, i64 16, i1 false) #6
  call void @BrotliConvertBitDepthsToSymbols(i8* %40, i64 64, i16* %82) #6
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %37, i8 0, i64 64, i1 false) #6
  %901 = load i64, i64* %83, align 8
  store i64 %901, i64* %84, align 16
  %902 = load i64, i64* %87, align 16
  store i64 %902, i64* %88, align 16
  %903 = load i64, i64* %91, align 8
  store i64 %903, i64* %92, align 16
  %904 = load i64, i64* %47, align 16
  store i64 %904, i64* %94, align 16
  %905 = load i64, i64* %55, align 8
  store i64 %905, i64* %96, align 16
  %906 = load i8, i8* %26, align 16
  store i8 %906, i8* %89, align 16
  %907 = load i8, i8* %50, align 8
  store i8 %907, i8* %97, align 16
  %908 = load i8, i8* %58, align 16
  store i8 %908, i8* %98, align 16
  %909 = load i8, i8* %99, align 1
  store i8 %909, i8* %100, align 8
  %910 = load i8, i8* %101, align 1
  store i8 %910, i8* %102, align 8
  %911 = load i8, i8* %103, align 1
  store i8 %911, i8* %104, align 8
  %912 = load i8, i8* %105, align 2
  store i8 %912, i8* %106, align 16
  %913 = load i8, i8* %107, align 2
  store i8 %913, i8* %108, align 16
  %914 = load i8, i8* %109, align 2
  store i8 %914, i8* %110, align 16
  %915 = load i8, i8* %111, align 1
  store i8 %915, i8* %112, align 8
  %916 = load i8, i8* %113, align 1
  store i8 %916, i8* %114, align 8
  %917 = load i8, i8* %115, align 1
  store i8 %917, i8* %116, align 8
  %918 = load i8, i8* %117, align 4
  store i8 %918, i8* %118, align 16
  %919 = load i8, i8* %119, align 4
  store i8 %919, i8* %120, align 16
  %920 = load i8, i8* %121, align 4
  store i8 %920, i8* %122, align 16
  %921 = load i8, i8* %123, align 1
  store i8 %921, i8* %124, align 8
  %922 = load i8, i8* %125, align 1
  store i8 %922, i8* %126, align 8
  %923 = load i8, i8* %127, align 1
  store i8 %923, i8* %128, align 8
  %924 = load i8, i8* %129, align 2
  store i8 %924, i8* %130, align 16
  %925 = load i8, i8* %131, align 2
  store i8 %925, i8* %132, align 16
  %926 = load i8, i8* %133, align 2
  store i8 %926, i8* %134, align 16
  %927 = load i8, i8* %135, align 1
  store i8 %927, i8* %136, align 8
  %928 = load i8, i8* %137, align 1
  store i8 %928, i8* %138, align 8
  %929 = load i8, i8* %139, align 1
  store i8 %929, i8* %140, align 8
  call void @BrotliStoreHuffmanTree(i8* nonnull %37, i64 704, %struct.HuffmanTree* nonnull %39, i64* %6, i8* %7) #6
  call void @BrotliStoreHuffmanTree(i8* %40, i64 64, %struct.HuffmanTree* nonnull %39, i64* %6, i8* %7) #6
  call void @llvm.lifetime.end.p0i8(i64 128, i8* nonnull %38) #6
  call void @llvm.lifetime.end.p0i8(i64 704, i8* nonnull %37) #6
  call void @llvm.lifetime.end.p0i8(i64 1032, i8* nonnull %36) #6
  br i1 %844, label %1054, label %930

930:                                              ; preds = %891
  %931 = load i64, i64* %6, align 8, !alias.scope !247, !noalias !250
  br label %932

932:                                              ; preds = %1049, %930
  %933 = phi i64 [ %1050, %1049 ], [ %931, %930 ]
  %934 = phi i8* [ %1051, %1049 ], [ %4, %930 ]
  %935 = phi i64 [ %1052, %1049 ], [ 0, %930 ]
  %936 = getelementptr inbounds i32, i32* %3, i64 %935
  %937 = load i32, i32* %936, align 4
  %938 = and i32 %937, 255
  %939 = lshr i32 %937, 8
  %940 = zext i32 %938 to i64
  %941 = getelementptr inbounds [128 x i8], [128 x i8]* %15, i64 0, i64 %940
  %942 = load i8, i8* %941, align 1
  %943 = zext i8 %942 to i64
  %944 = getelementptr inbounds [128 x i16], [128 x i16]* %16, i64 0, i64 %940
  %945 = load i16, i16* %944, align 2
  %946 = zext i16 %945 to i64
  %947 = lshr i64 %933, 3
  %948 = getelementptr inbounds i8, i8* %7, i64 %947
  %949 = load i8, i8* %948, align 1, !alias.scope !250, !noalias !247
  %950 = zext i8 %949 to i64
  %951 = and i64 %933, 7
  %952 = shl i64 %946, %951
  %953 = or i64 %952, %950
  %954 = bitcast i8* %948 to i64*
  store i64 %953, i64* %954, align 8, !alias.scope !250, !noalias !247
  %955 = add i64 %933, %943
  %956 = getelementptr inbounds [128 x i32], [128 x i32]* @StoreCommands.kNumExtraBits, i64 0, i64 %940
  %957 = load i32, i32* %956, align 4
  %958 = zext i32 %957 to i64
  %959 = zext i32 %939 to i64
  %960 = lshr i64 %955, 3
  %961 = getelementptr inbounds i8, i8* %7, i64 %960
  %962 = load i8, i8* %961, align 1, !alias.scope !252, !noalias !255
  %963 = zext i8 %962 to i64
  %964 = and i64 %955, 7
  %965 = shl i64 %959, %964
  %966 = or i64 %965, %963
  %967 = bitcast i8* %961 to i64*
  store i64 %966, i64* %967, align 8, !alias.scope !252, !noalias !255
  %968 = add i64 %955, %958
  store i64 %968, i64* %6, align 8, !alias.scope !255, !noalias !252
  %969 = icmp ult i32 %938, 24
  br i1 %969, label %970, label %1049

970:                                              ; preds = %932
  %971 = getelementptr inbounds [24 x i32], [24 x i32]* @StoreCommands.kInsertOffset, i64 0, i64 %940
  %972 = load i32, i32* %971, align 4
  %973 = add i32 %972, %939
  %974 = icmp eq i32 %973, 0
  br i1 %974, label %1049, label %975

975:                                              ; preds = %970
  %976 = add i32 %972, -1
  %977 = and i32 %973, 1
  %978 = sub nsw i32 0, %939
  %979 = icmp eq i32 %976, %978
  br i1 %979, label %1024, label %980

980:                                              ; preds = %975
  %981 = sub i32 %973, %977
  br label %982

982:                                              ; preds = %982, %980
  %983 = phi i64 [ %968, %980 ], [ %1020, %982 ]
  %984 = phi i8* [ %934, %980 ], [ %1021, %982 ]
  %985 = phi i32 [ %981, %980 ], [ %1022, %982 ]
  %986 = load i8, i8* %984, align 1
  %987 = zext i8 %986 to i64
  %988 = getelementptr inbounds [256 x i8], [256 x i8]* %12, i64 0, i64 %987
  %989 = load i8, i8* %988, align 1
  %990 = zext i8 %989 to i64
  %991 = getelementptr inbounds [256 x i16], [256 x i16]* %13, i64 0, i64 %987
  %992 = load i16, i16* %991, align 2
  %993 = zext i16 %992 to i64
  %994 = lshr i64 %983, 3
  %995 = getelementptr inbounds i8, i8* %7, i64 %994
  %996 = load i8, i8* %995, align 1, !alias.scope !257, !noalias !260
  %997 = zext i8 %996 to i64
  %998 = and i64 %983, 7
  %999 = shl i64 %993, %998
  %1000 = or i64 %999, %997
  %1001 = bitcast i8* %995 to i64*
  store i64 %1000, i64* %1001, align 8, !alias.scope !257, !noalias !260
  %1002 = add i64 %983, %990
  store i64 %1002, i64* %6, align 8, !alias.scope !260, !noalias !257
  %1003 = getelementptr inbounds i8, i8* %984, i64 1
  %1004 = load i8, i8* %1003, align 1
  %1005 = zext i8 %1004 to i64
  %1006 = getelementptr inbounds [256 x i8], [256 x i8]* %12, i64 0, i64 %1005
  %1007 = load i8, i8* %1006, align 1
  %1008 = zext i8 %1007 to i64
  %1009 = getelementptr inbounds [256 x i16], [256 x i16]* %13, i64 0, i64 %1005
  %1010 = load i16, i16* %1009, align 2
  %1011 = zext i16 %1010 to i64
  %1012 = lshr i64 %1002, 3
  %1013 = getelementptr inbounds i8, i8* %7, i64 %1012
  %1014 = load i8, i8* %1013, align 1, !alias.scope !257, !noalias !260
  %1015 = zext i8 %1014 to i64
  %1016 = and i64 %1002, 7
  %1017 = shl i64 %1011, %1016
  %1018 = or i64 %1017, %1015
  %1019 = bitcast i8* %1013 to i64*
  store i64 %1018, i64* %1019, align 8, !alias.scope !257, !noalias !260
  %1020 = add i64 %1002, %1008
  store i64 %1020, i64* %6, align 8, !alias.scope !260, !noalias !257
  %1021 = getelementptr inbounds i8, i8* %984, i64 2
  %1022 = add i32 %985, -2
  %1023 = icmp eq i32 %1022, 0
  br i1 %1023, label %1024, label %982

1024:                                             ; preds = %982, %975
  %1025 = phi i64 [ undef, %975 ], [ %1020, %982 ]
  %1026 = phi i8* [ undef, %975 ], [ %1021, %982 ]
  %1027 = phi i64 [ %968, %975 ], [ %1020, %982 ]
  %1028 = phi i8* [ %934, %975 ], [ %1021, %982 ]
  %1029 = icmp eq i32 %977, 0
  br i1 %1029, label %1049, label %1030

1030:                                             ; preds = %1024
  %1031 = load i8, i8* %1028, align 1
  %1032 = zext i8 %1031 to i64
  %1033 = getelementptr inbounds [256 x i8], [256 x i8]* %12, i64 0, i64 %1032
  %1034 = load i8, i8* %1033, align 1
  %1035 = zext i8 %1034 to i64
  %1036 = getelementptr inbounds [256 x i16], [256 x i16]* %13, i64 0, i64 %1032
  %1037 = load i16, i16* %1036, align 2
  %1038 = zext i16 %1037 to i64
  %1039 = lshr i64 %1027, 3
  %1040 = getelementptr inbounds i8, i8* %7, i64 %1039
  %1041 = load i8, i8* %1040, align 1, !alias.scope !257, !noalias !260
  %1042 = zext i8 %1041 to i64
  %1043 = and i64 %1027, 7
  %1044 = shl i64 %1038, %1043
  %1045 = or i64 %1044, %1042
  %1046 = bitcast i8* %1040 to i64*
  store i64 %1045, i64* %1046, align 8, !alias.scope !257, !noalias !260
  %1047 = add i64 %1027, %1035
  store i64 %1047, i64* %6, align 8, !alias.scope !260, !noalias !257
  %1048 = getelementptr inbounds i8, i8* %1028, i64 1
  br label %1049

1049:                                             ; preds = %1030, %1024, %970, %932
  %1050 = phi i64 [ %968, %932 ], [ %968, %970 ], [ %1025, %1024 ], [ %1047, %1030 ]
  %1051 = phi i8* [ %934, %932 ], [ %934, %970 ], [ %1026, %1024 ], [ %1048, %1030 ]
  %1052 = add nuw i64 %935, 1
  %1053 = icmp eq i64 %1052, %745
  br i1 %1053, label %1054, label %932

1054:                                             ; preds = %1049, %891
  call void @llvm.lifetime.end.p0i8(i64 512, i8* nonnull %28) #6
  call void @llvm.lifetime.end.p0i8(i64 256, i8* nonnull %27) #6
  call void @llvm.lifetime.end.p0i8(i64 128, i8* nonnull %26) #6
  call void @llvm.lifetime.end.p0i8(i64 1024, i8* nonnull %23) #6
  call void @llvm.lifetime.end.p0i8(i64 512, i8* nonnull %25) #6
  call void @llvm.lifetime.end.p0i8(i64 256, i8* nonnull %24) #6
  br label %1103

1055:                                             ; preds = %738
  %1056 = load i64, i64* %6, align 8, !alias.scope !262, !noalias !265
  %1057 = lshr i64 %1056, 3
  %1058 = getelementptr inbounds i8, i8* %7, i64 %1057
  %1059 = load i8, i8* %1058, align 1, !alias.scope !265, !noalias !262
  %1060 = zext i8 %1059 to i64
  %1061 = bitcast i8* %1058 to i64*
  store i64 %1060, i64* %1061, align 8, !alias.scope !265, !noalias !262
  %1062 = add i64 %1056, 1
  %1063 = icmp ult i64 %147, 65537
  %1064 = select i1 %1063, i64 4, i64 5
  %1065 = add nsw i64 %1064, -4
  %1066 = lshr i64 %1062, 3
  %1067 = getelementptr inbounds i8, i8* %7, i64 %1066
  %1068 = load i8, i8* %1067, align 1, !alias.scope !267, !noalias !270
  %1069 = zext i8 %1068 to i64
  %1070 = and i64 %1062, 7
  %1071 = shl i64 %1065, %1070
  %1072 = or i64 %1071, %1069
  %1073 = bitcast i8* %1067 to i64*
  store i64 %1072, i64* %1073, align 8, !alias.scope !267, !noalias !270
  %1074 = add i64 %1056, 3
  %1075 = shl nuw nsw i64 %1064, 2
  %1076 = add nsw i64 %147, -1
  %1077 = lshr i64 %1074, 3
  %1078 = getelementptr inbounds i8, i8* %7, i64 %1077
  %1079 = load i8, i8* %1078, align 1, !alias.scope !272, !noalias !275
  %1080 = zext i8 %1079 to i64
  %1081 = and i64 %1074, 7
  %1082 = shl i64 %1076, %1081
  %1083 = or i64 %1082, %1080
  %1084 = bitcast i8* %1078 to i64*
  store i64 %1083, i64* %1084, align 8, !alias.scope !272, !noalias !275
  %1085 = add i64 %1074, %1075
  %1086 = lshr i64 %1085, 3
  %1087 = getelementptr inbounds i8, i8* %7, i64 %1086
  %1088 = load i8, i8* %1087, align 1, !alias.scope !277, !noalias !280
  %1089 = zext i8 %1088 to i64
  %1090 = and i64 %1085, 7
  %1091 = shl i64 1, %1090
  %1092 = or i64 %1091, %1089
  %1093 = bitcast i8* %1087 to i64*
  store i64 %1092, i64* %1093, align 8, !alias.scope !277, !noalias !280
  %1094 = add i64 %1085, 8
  %1095 = and i64 %1094, 4294967288
  store i64 %1095, i64* %6, align 8
  %1096 = lshr exact i64 %1095, 3
  %1097 = getelementptr inbounds i8, i8* %7, i64 %1096
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %1097, i8* align 1 %144, i64 %147, i1 false) #6
  %1098 = shl nuw nsw i64 %147, 3
  %1099 = load i64, i64* %6, align 8
  %1100 = add i64 %1099, %1098
  store i64 %1100, i64* %6, align 8
  %1101 = lshr i64 %1100, 3
  %1102 = getelementptr inbounds i8, i8* %7, i64 %1101
  store i8 0, i8* %1102, align 1
  br label %1103

1103:                                             ; preds = %1055, %1054
  %1104 = sub i64 %145, %147
  %1105 = icmp eq i64 %1104, 0
  br i1 %1105, label %1106, label %143

1106:                                             ; preds = %1103, %8
  ret void

1107:                                             ; preds = %252
  %1108 = getelementptr inbounds i8, i8* %244, i64 1
  %1109 = getelementptr inbounds i8, i8* %216, i64 %253
  %1110 = load i8, i8* %1109, align 1
  %1111 = load i8, i8* %1108, align 1
  %1112 = icmp eq i8 %1110, %1111
  br i1 %1112, label %1113, label %255, !prof !33

1113:                                             ; preds = %1107
  %1114 = add i64 %243, 2
  %1115 = icmp eq i64 %245, 2
  br i1 %1115, label %255, label %1116

1116:                                             ; preds = %1113
  %1117 = getelementptr inbounds i8, i8* %244, i64 2
  %1118 = getelementptr inbounds i8, i8* %216, i64 %1114
  %1119 = load i8, i8* %1118, align 1
  %1120 = load i8, i8* %1117, align 1
  %1121 = icmp eq i8 %1119, %1120
  br i1 %1121, label %1122, label %255, !prof !33

1122:                                             ; preds = %1116
  %1123 = add i64 %243, 3
  %1124 = icmp eq i64 %245, 3
  br i1 %1124, label %255, label %1125

1125:                                             ; preds = %1122
  %1126 = getelementptr inbounds i8, i8* %244, i64 3
  %1127 = getelementptr inbounds i8, i8* %216, i64 %1123
  %1128 = load i8, i8* %1127, align 1
  %1129 = load i8, i8* %1126, align 1
  %1130 = icmp eq i8 %1128, %1129
  br i1 %1130, label %1131, label %255, !prof !33

1131:                                             ; preds = %1125
  %1132 = add i64 %243, 4
  %1133 = icmp eq i64 %245, 4
  br i1 %1133, label %255, label %1134

1134:                                             ; preds = %1131
  %1135 = getelementptr inbounds i8, i8* %244, i64 4
  %1136 = getelementptr inbounds i8, i8* %216, i64 %1132
  %1137 = load i8, i8* %1136, align 1
  %1138 = load i8, i8* %1135, align 1
  %1139 = icmp eq i8 %1137, %1138
  br i1 %1139, label %1140, label %255, !prof !33

1140:                                             ; preds = %1134
  %1141 = add i64 %243, 5
  %1142 = icmp eq i64 %245, 5
  br i1 %1142, label %255, label %1143

1143:                                             ; preds = %1140
  %1144 = getelementptr inbounds i8, i8* %244, i64 5
  %1145 = getelementptr inbounds i8, i8* %216, i64 %1141
  %1146 = load i8, i8* %1145, align 1
  %1147 = load i8, i8* %1144, align 1
  %1148 = icmp eq i8 %1146, %1147
  br i1 %1148, label %1149, label %255, !prof !33

1149:                                             ; preds = %1143
  %1150 = add i64 %243, 6
  %1151 = icmp eq i64 %245, 6
  br i1 %1151, label %255, label %1152

1152:                                             ; preds = %1149
  %1153 = getelementptr inbounds i8, i8* %244, i64 6
  %1154 = getelementptr inbounds i8, i8* %216, i64 %1150
  %1155 = load i8, i8* %1154, align 1
  %1156 = load i8, i8* %1153, align 1
  %1157 = icmp eq i8 %1155, %1156
  %1158 = add i64 %243, 7
  %1159 = select i1 %1157, i64 %1158, i64 %1150, !prof !33
  br label %255

1160:                                             ; preds = %478
  %1161 = getelementptr inbounds i8, i8* %470, i64 1
  %1162 = getelementptr inbounds i8, i8* %442, i64 %479
  %1163 = load i8, i8* %1162, align 1
  %1164 = load i8, i8* %1161, align 1
  %1165 = icmp eq i8 %1163, %1164
  br i1 %1165, label %1166, label %481, !prof !33

1166:                                             ; preds = %1160
  %1167 = add i64 %469, 2
  %1168 = icmp eq i64 %471, 2
  br i1 %1168, label %481, label %1169

1169:                                             ; preds = %1166
  %1170 = getelementptr inbounds i8, i8* %470, i64 2
  %1171 = getelementptr inbounds i8, i8* %442, i64 %1167
  %1172 = load i8, i8* %1171, align 1
  %1173 = load i8, i8* %1170, align 1
  %1174 = icmp eq i8 %1172, %1173
  br i1 %1174, label %1175, label %481, !prof !33

1175:                                             ; preds = %1169
  %1176 = add i64 %469, 3
  %1177 = icmp eq i64 %471, 3
  br i1 %1177, label %481, label %1178

1178:                                             ; preds = %1175
  %1179 = getelementptr inbounds i8, i8* %470, i64 3
  %1180 = getelementptr inbounds i8, i8* %442, i64 %1176
  %1181 = load i8, i8* %1180, align 1
  %1182 = load i8, i8* %1179, align 1
  %1183 = icmp eq i8 %1181, %1182
  br i1 %1183, label %1184, label %481, !prof !33

1184:                                             ; preds = %1178
  %1185 = add i64 %469, 4
  %1186 = icmp eq i64 %471, 4
  br i1 %1186, label %481, label %1187

1187:                                             ; preds = %1184
  %1188 = getelementptr inbounds i8, i8* %470, i64 4
  %1189 = getelementptr inbounds i8, i8* %442, i64 %1185
  %1190 = load i8, i8* %1189, align 1
  %1191 = load i8, i8* %1188, align 1
  %1192 = icmp eq i8 %1190, %1191
  br i1 %1192, label %1193, label %481, !prof !33

1193:                                             ; preds = %1187
  %1194 = add i64 %469, 5
  %1195 = icmp eq i64 %471, 5
  br i1 %1195, label %481, label %1196

1196:                                             ; preds = %1193
  %1197 = getelementptr inbounds i8, i8* %470, i64 5
  %1198 = getelementptr inbounds i8, i8* %442, i64 %1194
  %1199 = load i8, i8* %1198, align 1
  %1200 = load i8, i8* %1197, align 1
  %1201 = icmp eq i8 %1199, %1200
  br i1 %1201, label %1202, label %481, !prof !33

1202:                                             ; preds = %1196
  %1203 = add i64 %469, 6
  %1204 = icmp eq i64 %471, 6
  br i1 %1204, label %481, label %1205

1205:                                             ; preds = %1202
  %1206 = getelementptr inbounds i8, i8* %470, i64 6
  %1207 = getelementptr inbounds i8, i8* %442, i64 %1203
  %1208 = load i8, i8* %1207, align 1
  %1209 = load i8, i8* %1206, align 1
  %1210 = icmp eq i8 %1208, %1209
  %1211 = add i64 %469, 7
  %1212 = select i1 %1210, i64 %1211, i64 %1203, !prof !33
  br label %481
}

; Function Attrs: noinline nounwind ssp uwtable
define internal fastcc void @BrotliCompressFragmentTwoPassImpl12(%struct.MemoryManager*, i8*, i64, i32*, i8*, i32* nocapture, i64*, i8*) unnamed_addr #2 {
  %9 = alloca [129 x %struct.HuffmanTree], align 16
  %10 = alloca [704 x i8], align 16
  %11 = alloca [64 x i16], align 16
  %12 = alloca [256 x i8], align 16
  %13 = alloca [256 x i16], align 16
  %14 = alloca [256 x i32], align 16
  %15 = alloca [128 x i8], align 16
  %16 = alloca [128 x i16], align 16
  %17 = alloca [128 x i32], align 16
  %18 = icmp eq i64 %2, 0
  br i1 %18, label %1106, label %19

19:                                               ; preds = %8
  %20 = ptrtoint i32* %3 to i64
  %21 = ptrtoint i8* %4 to i64
  %22 = ptrtoint i8* %1 to i64
  %23 = bitcast [256 x i32]* %14 to i8*
  %24 = getelementptr inbounds [256 x i8], [256 x i8]* %12, i64 0, i64 0
  %25 = bitcast [256 x i16]* %13 to i8*
  %26 = getelementptr inbounds [128 x i8], [128 x i8]* %15, i64 0, i64 0
  %27 = bitcast [128 x i16]* %16 to i8*
  %28 = bitcast [128 x i32]* %17 to i8*
  %29 = getelementptr inbounds [256 x i32], [256 x i32]* %14, i64 0, i64 0
  %30 = getelementptr inbounds [256 x i16], [256 x i16]* %13, i64 0, i64 0
  %31 = getelementptr inbounds [128 x i32], [128 x i32]* %17, i64 0, i64 1
  %32 = getelementptr inbounds [128 x i32], [128 x i32]* %17, i64 0, i64 2
  %33 = getelementptr inbounds [128 x i32], [128 x i32]* %17, i64 0, i64 64
  %34 = getelementptr inbounds [128 x i32], [128 x i32]* %17, i64 0, i64 84
  %35 = getelementptr inbounds [128 x i32], [128 x i32]* %17, i64 0, i64 0
  %36 = bitcast [129 x %struct.HuffmanTree]* %9 to i8*
  %37 = getelementptr inbounds [704 x i8], [704 x i8]* %10, i64 0, i64 0
  %38 = bitcast [64 x i16]* %11 to i8*
  %39 = getelementptr inbounds [129 x %struct.HuffmanTree], [129 x %struct.HuffmanTree]* %9, i64 0, i64 0
  %40 = getelementptr inbounds [128 x i8], [128 x i8]* %15, i64 0, i64 64
  %41 = getelementptr inbounds [128 x i8], [128 x i8]* %15, i64 0, i64 24
  %42 = getelementptr inbounds [704 x i8], [704 x i8]* %10, i64 0, i64 24
  %43 = bitcast [128 x i8]* %15 to i64*
  %44 = bitcast i8* %42 to i64*
  %45 = getelementptr inbounds [704 x i8], [704 x i8]* %10, i64 0, i64 32
  %46 = getelementptr inbounds [128 x i8], [128 x i8]* %15, i64 0, i64 48
  %47 = bitcast i8* %46 to i64*
  %48 = bitcast i8* %45 to i64*
  %49 = getelementptr inbounds [704 x i8], [704 x i8]* %10, i64 0, i64 40
  %50 = getelementptr inbounds [128 x i8], [128 x i8]* %15, i64 0, i64 8
  %51 = bitcast i8* %50 to i64*
  %52 = bitcast i8* %49 to i64*
  %53 = getelementptr inbounds [704 x i8], [704 x i8]* %10, i64 0, i64 48
  %54 = getelementptr inbounds [128 x i8], [128 x i8]* %15, i64 0, i64 56
  %55 = bitcast i8* %54 to i64*
  %56 = bitcast i8* %53 to i64*
  %57 = getelementptr inbounds [704 x i8], [704 x i8]* %10, i64 0, i64 56
  %58 = getelementptr inbounds [128 x i8], [128 x i8]* %15, i64 0, i64 16
  %59 = bitcast i8* %58 to i64*
  %60 = bitcast i8* %57 to i64*
  %61 = getelementptr inbounds [64 x i16], [64 x i16]* %11, i64 0, i64 0
  %62 = getelementptr inbounds [64 x i16], [64 x i16]* %11, i64 0, i64 24
  %63 = bitcast i16* %62 to i8*
  %64 = getelementptr inbounds [128 x i16], [128 x i16]* %16, i64 0, i64 8
  %65 = bitcast i16* %64 to i8*
  %66 = getelementptr inbounds [64 x i16], [64 x i16]* %11, i64 0, i64 40
  %67 = bitcast i16* %66 to i8*
  %68 = getelementptr inbounds [128 x i16], [128 x i16]* %16, i64 0, i64 16
  %69 = bitcast i16* %68 to i8*
  %70 = getelementptr inbounds [64 x i16], [64 x i16]* %11, i64 0, i64 56
  %71 = bitcast i16* %70 to i8*
  %72 = getelementptr inbounds [128 x i16], [128 x i16]* %16, i64 0, i64 24
  %73 = bitcast i16* %72 to i8*
  %74 = getelementptr inbounds [128 x i16], [128 x i16]* %16, i64 0, i64 48
  %75 = bitcast i16* %74 to i8*
  %76 = getelementptr inbounds [64 x i16], [64 x i16]* %11, i64 0, i64 32
  %77 = bitcast i16* %76 to i8*
  %78 = getelementptr inbounds [128 x i16], [128 x i16]* %16, i64 0, i64 56
  %79 = bitcast i16* %78 to i8*
  %80 = getelementptr inbounds [64 x i16], [64 x i16]* %11, i64 0, i64 48
  %81 = bitcast i16* %80 to i8*
  %82 = getelementptr inbounds [128 x i16], [128 x i16]* %16, i64 0, i64 64
  %83 = bitcast i8* %41 to i64*
  %84 = bitcast [704 x i8]* %10 to i64*
  %85 = getelementptr inbounds [704 x i8], [704 x i8]* %10, i64 0, i64 64
  %86 = getelementptr inbounds [128 x i8], [128 x i8]* %15, i64 0, i64 32
  %87 = bitcast i8* %86 to i64*
  %88 = bitcast i8* %85 to i64*
  %89 = getelementptr inbounds [704 x i8], [704 x i8]* %10, i64 0, i64 128
  %90 = getelementptr inbounds [128 x i8], [128 x i8]* %15, i64 0, i64 40
  %91 = bitcast i8* %90 to i64*
  %92 = bitcast i8* %89 to i64*
  %93 = getelementptr inbounds [704 x i8], [704 x i8]* %10, i64 0, i64 192
  %94 = bitcast i8* %93 to i64*
  %95 = getelementptr inbounds [704 x i8], [704 x i8]* %10, i64 0, i64 384
  %96 = bitcast i8* %95 to i64*
  %97 = getelementptr inbounds [704 x i8], [704 x i8]* %10, i64 0, i64 256
  %98 = getelementptr inbounds [704 x i8], [704 x i8]* %10, i64 0, i64 448
  %99 = getelementptr inbounds [128 x i8], [128 x i8]* %15, i64 0, i64 1
  %100 = getelementptr inbounds [704 x i8], [704 x i8]* %10, i64 0, i64 136
  %101 = getelementptr inbounds [128 x i8], [128 x i8]* %15, i64 0, i64 9
  %102 = getelementptr inbounds [704 x i8], [704 x i8]* %10, i64 0, i64 264
  %103 = getelementptr inbounds [128 x i8], [128 x i8]* %15, i64 0, i64 17
  %104 = getelementptr inbounds [704 x i8], [704 x i8]* %10, i64 0, i64 456
  %105 = getelementptr inbounds [128 x i8], [128 x i8]* %15, i64 0, i64 2
  %106 = getelementptr inbounds [704 x i8], [704 x i8]* %10, i64 0, i64 144
  %107 = getelementptr inbounds [128 x i8], [128 x i8]* %15, i64 0, i64 10
  %108 = getelementptr inbounds [704 x i8], [704 x i8]* %10, i64 0, i64 272
  %109 = getelementptr inbounds [128 x i8], [128 x i8]* %15, i64 0, i64 18
  %110 = getelementptr inbounds [704 x i8], [704 x i8]* %10, i64 0, i64 464
  %111 = getelementptr inbounds [128 x i8], [128 x i8]* %15, i64 0, i64 3
  %112 = getelementptr inbounds [704 x i8], [704 x i8]* %10, i64 0, i64 152
  %113 = getelementptr inbounds [128 x i8], [128 x i8]* %15, i64 0, i64 11
  %114 = getelementptr inbounds [704 x i8], [704 x i8]* %10, i64 0, i64 280
  %115 = getelementptr inbounds [128 x i8], [128 x i8]* %15, i64 0, i64 19
  %116 = getelementptr inbounds [704 x i8], [704 x i8]* %10, i64 0, i64 472
  %117 = getelementptr inbounds [128 x i8], [128 x i8]* %15, i64 0, i64 4
  %118 = getelementptr inbounds [704 x i8], [704 x i8]* %10, i64 0, i64 160
  %119 = getelementptr inbounds [128 x i8], [128 x i8]* %15, i64 0, i64 12
  %120 = getelementptr inbounds [704 x i8], [704 x i8]* %10, i64 0, i64 288
  %121 = getelementptr inbounds [128 x i8], [128 x i8]* %15, i64 0, i64 20
  %122 = getelementptr inbounds [704 x i8], [704 x i8]* %10, i64 0, i64 480
  %123 = getelementptr inbounds [128 x i8], [128 x i8]* %15, i64 0, i64 5
  %124 = getelementptr inbounds [704 x i8], [704 x i8]* %10, i64 0, i64 168
  %125 = getelementptr inbounds [128 x i8], [128 x i8]* %15, i64 0, i64 13
  %126 = getelementptr inbounds [704 x i8], [704 x i8]* %10, i64 0, i64 296
  %127 = getelementptr inbounds [128 x i8], [128 x i8]* %15, i64 0, i64 21
  %128 = getelementptr inbounds [704 x i8], [704 x i8]* %10, i64 0, i64 488
  %129 = getelementptr inbounds [128 x i8], [128 x i8]* %15, i64 0, i64 6
  %130 = getelementptr inbounds [704 x i8], [704 x i8]* %10, i64 0, i64 176
  %131 = getelementptr inbounds [128 x i8], [128 x i8]* %15, i64 0, i64 14
  %132 = getelementptr inbounds [704 x i8], [704 x i8]* %10, i64 0, i64 304
  %133 = getelementptr inbounds [128 x i8], [128 x i8]* %15, i64 0, i64 22
  %134 = getelementptr inbounds [704 x i8], [704 x i8]* %10, i64 0, i64 496
  %135 = getelementptr inbounds [128 x i8], [128 x i8]* %15, i64 0, i64 7
  %136 = getelementptr inbounds [704 x i8], [704 x i8]* %10, i64 0, i64 184
  %137 = getelementptr inbounds [128 x i8], [128 x i8]* %15, i64 0, i64 15
  %138 = getelementptr inbounds [704 x i8], [704 x i8]* %10, i64 0, i64 312
  %139 = getelementptr inbounds [128 x i8], [128 x i8]* %15, i64 0, i64 23
  %140 = getelementptr inbounds [704 x i8], [704 x i8]* %10, i64 0, i64 504
  %141 = getelementptr inbounds i8, i8* %1, i64 4
  %142 = xor i64 %21, -1
  br label %143

143:                                              ; preds = %1103, %19
  %144 = phi i8* [ %1, %19 ], [ %148, %1103 ]
  %145 = phi i64 [ %2, %19 ], [ %1104, %1103 ]
  %146 = icmp ult i64 %145, 131072
  %147 = select i1 %146, i64 %145, i64 131072
  %148 = getelementptr inbounds i8, i8* %144, i64 %147
  %149 = icmp ugt i64 %147, 15
  br i1 %149, label %150, label %595, !prof !33

150:                                              ; preds = %143
  %151 = add nsw i64 %147, -4
  %152 = add i64 %145, -16
  %153 = icmp ult i64 %151, %152
  %154 = select i1 %153, i64 %151, i64 %152
  %155 = getelementptr inbounds i8, i8* %144, i64 %154
  %156 = ptrtoint i8* %148 to i64
  br label %157

157:                                              ; preds = %585, %150
  %158 = phi i64 [ %20, %150 ], [ %586, %585 ]
  %159 = phi i64 [ %21, %150 ], [ %318, %585 ]
  %160 = phi i8* [ %144, %150 ], [ %587, %585 ]
  %161 = phi i32 [ -1, %150 ], [ %588, %585 ]
  %162 = getelementptr inbounds i8, i8* %160, i64 1
  %163 = bitcast i8* %162 to i64*
  %164 = load i64, i64* %163, align 8
  %165 = sext i32 %161 to i64
  %166 = sub nsw i64 0, %165
  %167 = icmp slt i32 %161, 1
  br label %168

168:                                              ; preds = %206, %157
  %169 = phi i64 [ %164, %157 ], [ %181, %206 ]
  %170 = phi i32 [ 32, %157 ], [ %174, %206 ]
  %171 = phi i8* [ %162, %157 ], [ %177, %206 ]
  %172 = mul i64 %169, 2176830425094160384
  %173 = lshr i64 %172, 52
  %174 = add i32 %170, 1
  %175 = lshr i32 %170, 5
  %176 = zext i32 %175 to i64
  %177 = getelementptr inbounds i8, i8* %171, i64 %176
  %178 = icmp ugt i8* %177, %155
  br i1 %178, label %595, label %179, !prof !34

179:                                              ; preds = %168
  %180 = bitcast i8* %177 to i64*
  %181 = load i64, i64* %180, align 8
  %182 = getelementptr inbounds i8, i8* %171, i64 %166
  %183 = bitcast i8* %171 to i32*
  %184 = load i32, i32* %183, align 4
  %185 = bitcast i8* %182 to i32*
  %186 = load i32, i32* %185, align 4
  %187 = icmp ne i32 %184, %186
  %188 = or i1 %167, %187
  br i1 %188, label %194, label %189, !prof !35

189:                                              ; preds = %179
  %190 = ptrtoint i8* %171 to i64
  %191 = sub i64 %190, %22
  %192 = trunc i64 %191 to i32
  %193 = getelementptr inbounds i32, i32* %5, i64 %173
  store i32 %192, i32* %193, align 4
  br label %209

194:                                              ; preds = %179
  %195 = getelementptr inbounds i32, i32* %5, i64 %173
  %196 = load i32, i32* %195, align 4
  %197 = sext i32 %196 to i64
  %198 = getelementptr inbounds i8, i8* %1, i64 %197
  %199 = ptrtoint i8* %171 to i64
  %200 = sub i64 %199, %22
  %201 = trunc i64 %200 to i32
  store i32 %201, i32* %195, align 4
  %202 = load i32, i32* %183, align 4
  %203 = bitcast i8* %198 to i32*
  %204 = load i32, i32* %203, align 4
  %205 = icmp eq i32 %202, %204
  br i1 %205, label %207, label %206

206:                                              ; preds = %194, %209
  br label %168

207:                                              ; preds = %194
  %208 = ptrtoint i8* %171 to i64
  br label %209

209:                                              ; preds = %207, %189
  %210 = phi i64 [ %190, %189 ], [ %208, %207 ]
  %211 = phi i8* [ %182, %189 ], [ %198, %207 ]
  %212 = ptrtoint i8* %211 to i64
  %213 = sub i64 %210, %212
  %214 = icmp sgt i64 %213, 262128
  br i1 %214, label %206, label %215

215:                                              ; preds = %209
  %216 = getelementptr inbounds i8, i8* %211, i64 4
  %217 = getelementptr inbounds i8, i8* %171, i64 4
  %218 = sub i64 %156, %210
  %219 = add i64 %218, -4
  %220 = lshr i64 %219, 3
  %221 = icmp eq i64 %220, 0
  br i1 %221, label %242, label %222, !prof !34

222:                                              ; preds = %215, %232
  %223 = phi i64 [ %235, %232 ], [ %220, %215 ]
  %224 = phi i8* [ %233, %232 ], [ %217, %215 ]
  %225 = phi i64 [ %234, %232 ], [ 0, %215 ]
  %226 = bitcast i8* %224 to i64*
  %227 = load i64, i64* %226, align 8
  %228 = getelementptr inbounds i8, i8* %216, i64 %225
  %229 = bitcast i8* %228 to i64*
  %230 = load i64, i64* %229, align 8
  %231 = icmp eq i64 %227, %230
  br i1 %231, label %232, label %237, !prof !34

232:                                              ; preds = %222
  %233 = getelementptr inbounds i8, i8* %224, i64 8
  %234 = add nuw i64 %225, 8
  %235 = add nsw i64 %223, -1
  %236 = icmp eq i64 %235, 0
  br i1 %236, label %242, label %222, !prof !34

237:                                              ; preds = %222
  %238 = xor i64 %230, %227
  %239 = call i64 @llvm.cttz.i64(i64 %238, i1 true) #6, !range !36
  %240 = lshr i64 %239, 3
  %241 = or i64 %240, %225
  br label %255

242:                                              ; preds = %232, %215
  %243 = phi i64 [ 0, %215 ], [ %234, %232 ]
  %244 = phi i8* [ %217, %215 ], [ %233, %232 ]
  %245 = and i64 %219, 7
  %246 = icmp eq i64 %245, 0
  br i1 %246, label %255, label %247

247:                                              ; preds = %242
  %248 = getelementptr inbounds i8, i8* %216, i64 %243
  %249 = load i8, i8* %248, align 1
  %250 = load i8, i8* %244, align 1
  %251 = icmp eq i8 %249, %250
  br i1 %251, label %252, label %255, !prof !33

252:                                              ; preds = %247
  %253 = add i64 %243, 1
  %254 = icmp eq i64 %245, 1
  br i1 %254, label %255, label %1107

255:                                              ; preds = %1152, %252, %247, %1107, %1113, %1116, %1122, %1125, %1131, %1134, %1140, %1143, %1149, %242, %237
  %256 = phi i64 [ %241, %237 ], [ %243, %242 ], [ %253, %252 ], [ %243, %247 ], [ %253, %1107 ], [ %1114, %1113 ], [ %1114, %1116 ], [ %1123, %1122 ], [ %1123, %1125 ], [ %1132, %1131 ], [ %1132, %1134 ], [ %1141, %1140 ], [ %1141, %1143 ], [ %1150, %1149 ], [ %1159, %1152 ]
  %257 = add i64 %256, 4
  %258 = trunc i64 %213 to i32
  %259 = ptrtoint i8* %160 to i64
  %260 = sub i64 %210, %259
  %261 = trunc i64 %260 to i32
  %262 = getelementptr inbounds i8, i8* %171, i64 %257
  %263 = icmp ult i32 %261, 6
  br i1 %263, label %264, label %266

264:                                              ; preds = %255
  %265 = inttoptr i64 %158 to i32*
  store i32 %261, i32* %265, align 4
  br label %311

266:                                              ; preds = %255
  %267 = icmp ult i32 %261, 130
  br i1 %267, label %268, label %281

268:                                              ; preds = %266
  %269 = add nsw i32 %261, -2
  %270 = call i32 @llvm.ctlz.i32(i32 %269, i1 true) #6, !range !2
  %271 = sub nsw i32 30, %270
  %272 = lshr i32 %269, %271
  %273 = shl nsw i32 %271, 1
  %274 = add nuw nsw i32 %272, 2
  %275 = add i32 %274, %273
  %276 = shl i32 %272, %271
  %277 = sub i32 %269, %276
  %278 = shl i32 %277, 8
  %279 = or i32 %278, %275
  %280 = inttoptr i64 %158 to i32*
  store i32 %279, i32* %280, align 4
  br label %311

281:                                              ; preds = %266
  %282 = icmp ult i32 %261, 2114
  br i1 %282, label %283, label %293

283:                                              ; preds = %281
  %284 = add nsw i32 %261, -66
  %285 = call i32 @llvm.ctlz.i32(i32 %284, i1 true) #6, !range !2
  %286 = xor i32 %285, 31
  %287 = add nuw nsw i32 %286, 10
  %288 = shl i32 1, %286
  %289 = sub i32 %284, %288
  %290 = shl i32 %289, 8
  %291 = or i32 %290, %287
  %292 = inttoptr i64 %158 to i32*
  store i32 %291, i32* %292, align 4
  br label %311

293:                                              ; preds = %281
  %294 = icmp ult i32 %261, 6210
  br i1 %294, label %295, label %300

295:                                              ; preds = %293
  %296 = shl i32 %261, 8
  %297 = add nsw i32 %296, -541184
  %298 = or i32 %297, 21
  %299 = inttoptr i64 %158 to i32*
  store i32 %298, i32* %299, align 4
  br label %311

300:                                              ; preds = %293
  %301 = icmp ult i32 %261, 22594
  %302 = shl i32 %261, 8
  br i1 %301, label %303, label %307

303:                                              ; preds = %300
  %304 = add i32 %302, -1589760
  %305 = or i32 %304, 22
  %306 = inttoptr i64 %158 to i32*
  store i32 %305, i32* %306, align 4
  br label %311

307:                                              ; preds = %300
  %308 = add i32 %302, -5784064
  %309 = or i32 %308, 23
  %310 = inttoptr i64 %158 to i32*
  store i32 %309, i32* %310, align 4
  br label %311

311:                                              ; preds = %307, %303, %295, %283, %268, %264
  %312 = phi i32* [ %310, %307 ], [ %306, %303 ], [ %299, %295 ], [ %292, %283 ], [ %280, %268 ], [ %265, %264 ]
  %313 = getelementptr inbounds i32, i32* %312, i64 1
  %314 = inttoptr i64 %159 to i8*
  %315 = shl i64 %260, 32
  %316 = ashr exact i64 %315, 32
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %314, i8* align 1 %160, i64 %316, i1 false) #6
  %317 = getelementptr inbounds i8, i8* %314, i64 %316
  %318 = ptrtoint i8* %317 to i64
  %319 = icmp eq i32 %161, %258
  br i1 %319, label %336, label %320

320:                                              ; preds = %311
  %321 = add i32 %258, 3
  %322 = call i32 @llvm.ctlz.i32(i32 %321, i1 true) #6, !range !2
  %323 = xor i32 %322, 31
  %324 = add nsw i32 %323, -1
  %325 = lshr i32 %321, %324
  %326 = and i32 %325, 1
  %327 = or i32 %326, 2
  %328 = shl i32 %327, %324
  %329 = shl nuw nsw i32 %323, 1
  %330 = add nsw i32 %329, -4
  %331 = or i32 %326, %330
  %332 = add nsw i32 %331, 80
  %333 = sub i32 %321, %328
  %334 = shl i32 %333, 8
  %335 = or i32 %334, %332
  br label %336

336:                                              ; preds = %320, %311
  %337 = phi i32 [ %335, %320 ], [ 64, %311 ]
  %338 = phi i32 [ %258, %320 ], [ %161, %311 ]
  store i32 %337, i32* %313, align 4
  %339 = getelementptr inbounds i32, i32* %312, i64 2
  %340 = icmp ult i64 %257, 12
  br i1 %340, label %341, label %344

341:                                              ; preds = %336
  %342 = trunc i64 %257 to i32
  %343 = add nuw nsw i32 %342, 20
  store i32 %343, i32* %339, align 4
  br label %393

344:                                              ; preds = %336
  %345 = icmp ult i64 %257, 72
  br i1 %345, label %346, label %361

346:                                              ; preds = %344
  %347 = add nsw i64 %256, -4
  %348 = trunc i64 %347 to i32
  %349 = call i32 @llvm.ctlz.i32(i32 %348, i1 true) #6, !range !2
  %350 = sub nsw i32 30, %349
  %351 = zext i32 %350 to i64
  %352 = lshr i64 %347, %351
  %353 = shl nuw nsw i64 %351, 1
  %354 = add nuw nsw i64 %352, 28
  %355 = add nuw nsw i64 %354, %353
  %356 = shl i64 %352, %351
  %357 = sub i64 %347, %356
  %358 = shl i64 %357, 8
  %359 = or i64 %358, %355
  %360 = trunc i64 %359 to i32
  store i32 %360, i32* %339, align 4
  br label %393

361:                                              ; preds = %344
  %362 = icmp ult i64 %257, 136
  br i1 %362, label %363, label %372

363:                                              ; preds = %361
  %364 = add nsw i64 %256, -4
  %365 = lshr i64 %364, 5
  %366 = add nuw nsw i64 %365, 54
  %367 = shl i64 %364, 8
  %368 = and i64 %367, 7936
  %369 = or i64 %366, %368
  %370 = trunc i64 %369 to i32
  store i32 %370, i32* %339, align 4
  %371 = getelementptr inbounds i32, i32* %312, i64 3
  store i32 64, i32* %371, align 4
  br label %393

372:                                              ; preds = %361
  %373 = icmp ult i64 %257, 2120
  br i1 %373, label %374, label %387

374:                                              ; preds = %372
  %375 = add nsw i64 %256, -68
  %376 = trunc i64 %375 to i32
  %377 = call i32 @llvm.ctlz.i32(i32 %376, i1 true) #6, !range !2
  %378 = xor i32 %377, 31
  %379 = zext i32 %378 to i64
  %380 = add nuw nsw i64 %379, 52
  %381 = shl i64 1, %379
  %382 = sub i64 %375, %381
  %383 = shl i64 %382, 8
  %384 = or i64 %383, %380
  %385 = trunc i64 %384 to i32
  store i32 %385, i32* %339, align 4
  %386 = getelementptr inbounds i32, i32* %312, i64 3
  store i32 64, i32* %386, align 4
  br label %393

387:                                              ; preds = %372
  %388 = trunc i64 %257 to i32
  %389 = shl i32 %388, 8
  %390 = add i32 %389, -542720
  %391 = or i32 %390, 63
  store i32 %391, i32* %339, align 4
  %392 = getelementptr inbounds i32, i32* %312, i64 3
  store i32 64, i32* %392, align 4
  br label %393

393:                                              ; preds = %387, %374, %363, %346, %341
  %394 = phi i64 [ 4, %387 ], [ 4, %374 ], [ 4, %363 ], [ 3, %346 ], [ 3, %341 ]
  %395 = getelementptr inbounds i32, i32* %312, i64 %394
  %396 = ptrtoint i32* %395 to i64
  %397 = icmp ult i8* %262, %155
  br i1 %397, label %398, label %592, !prof !33

398:                                              ; preds = %393
  %399 = getelementptr inbounds i8, i8* %262, i64 -3
  %400 = bitcast i8* %399 to i64*
  %401 = load i64, i64* %400, align 8
  %402 = lshr i64 %401, 24
  %403 = mul i64 %402, 2176830425094160384
  %404 = mul i64 %401, 2176830425094160384
  %405 = lshr i64 %404, 52
  %406 = ptrtoint i8* %262 to i64
  %407 = sub i64 %406, %22
  %408 = trunc i64 %407 to i32
  %409 = getelementptr inbounds i32, i32* %5, i64 %405
  %410 = lshr i64 %401, 8
  %411 = mul i64 %410, 2176830425094160384
  %412 = lshr i64 %411, 52
  %413 = add i32 %408, -2
  %414 = getelementptr inbounds i32, i32* %5, i64 %412
  store i32 %413, i32* %414, align 4
  %415 = add i32 %408, -1
  store i32 %415, i32* %409, align 4
  %416 = lshr i64 %403, 52
  %417 = getelementptr inbounds i32, i32* %5, i64 %416
  %418 = load i32, i32* %417, align 4
  store i32 %408, i32* %417, align 4
  %419 = sext i32 %418 to i64
  %420 = getelementptr inbounds i8, i8* %1, i64 %419
  %421 = ptrtoint i8* %420 to i64
  %422 = sub i64 %406, %421
  %423 = icmp slt i64 %422, 262129
  br i1 %423, label %424, label %585

424:                                              ; preds = %398
  %425 = bitcast i8* %262 to i32*
  %426 = load i32, i32* %425, align 4
  %427 = bitcast i8* %420 to i32*
  %428 = load i32, i32* %427, align 4
  %429 = icmp eq i32 %426, %428
  br i1 %429, label %436, label %585

430:                                              ; preds = %551
  %431 = bitcast i8* %484 to i32*
  %432 = load i32, i32* %431, align 4
  %433 = bitcast i8* %578 to i32*
  %434 = load i32, i32* %433, align 4
  %435 = icmp eq i32 %432, %434
  br i1 %435, label %436, label %582

436:                                              ; preds = %424, %430
  %437 = phi i8* [ %484, %430 ], [ %262, %424 ]
  %438 = phi i64 [ %577, %430 ], [ %419, %424 ]
  %439 = phi i64 [ %559, %430 ], [ %406, %424 ]
  %440 = phi i64 [ %580, %430 ], [ %422, %424 ]
  %441 = phi i64 [ %549, %430 ], [ %396, %424 ]
  %442 = getelementptr inbounds i8, i8* %141, i64 %438
  %443 = getelementptr inbounds i8, i8* %437, i64 4
  %444 = sub i64 %156, %439
  %445 = add i64 %444, -4
  %446 = lshr i64 %445, 3
  %447 = icmp eq i64 %446, 0
  br i1 %447, label %468, label %448, !prof !34

448:                                              ; preds = %436, %458
  %449 = phi i64 [ %461, %458 ], [ %446, %436 ]
  %450 = phi i8* [ %459, %458 ], [ %443, %436 ]
  %451 = phi i64 [ %460, %458 ], [ 0, %436 ]
  %452 = bitcast i8* %450 to i64*
  %453 = load i64, i64* %452, align 8
  %454 = getelementptr inbounds i8, i8* %442, i64 %451
  %455 = bitcast i8* %454 to i64*
  %456 = load i64, i64* %455, align 8
  %457 = icmp eq i64 %453, %456
  br i1 %457, label %458, label %463, !prof !34

458:                                              ; preds = %448
  %459 = getelementptr inbounds i8, i8* %450, i64 8
  %460 = add nuw i64 %451, 8
  %461 = add nsw i64 %449, -1
  %462 = icmp eq i64 %461, 0
  br i1 %462, label %468, label %448, !prof !34

463:                                              ; preds = %448
  %464 = xor i64 %456, %453
  %465 = call i64 @llvm.cttz.i64(i64 %464, i1 true) #6, !range !36
  %466 = lshr i64 %465, 3
  %467 = or i64 %466, %451
  br label %481

468:                                              ; preds = %458, %436
  %469 = phi i64 [ 0, %436 ], [ %460, %458 ]
  %470 = phi i8* [ %443, %436 ], [ %459, %458 ]
  %471 = and i64 %445, 7
  %472 = icmp eq i64 %471, 0
  br i1 %472, label %481, label %473

473:                                              ; preds = %468
  %474 = getelementptr inbounds i8, i8* %442, i64 %469
  %475 = load i8, i8* %474, align 1
  %476 = load i8, i8* %470, align 1
  %477 = icmp eq i8 %475, %476
  br i1 %477, label %478, label %481, !prof !33

478:                                              ; preds = %473
  %479 = add i64 %469, 1
  %480 = icmp eq i64 %471, 1
  br i1 %480, label %481, label %1160

481:                                              ; preds = %1205, %478, %473, %1160, %1166, %1169, %1175, %1178, %1184, %1187, %1193, %1196, %1202, %468, %463
  %482 = phi i64 [ %467, %463 ], [ %469, %468 ], [ %479, %478 ], [ %469, %473 ], [ %479, %1160 ], [ %1167, %1166 ], [ %1167, %1169 ], [ %1176, %1175 ], [ %1176, %1178 ], [ %1185, %1184 ], [ %1185, %1187 ], [ %1194, %1193 ], [ %1194, %1196 ], [ %1203, %1202 ], [ %1212, %1205 ]
  %483 = add i64 %482, 4
  %484 = getelementptr inbounds i8, i8* %437, i64 %483
  %485 = trunc i64 %440 to i32
  %486 = icmp ult i64 %483, 10
  br i1 %486, label %487, label %491

487:                                              ; preds = %481
  %488 = trunc i64 %483 to i32
  %489 = add nuw nsw i32 %488, 38
  %490 = inttoptr i64 %441 to i32*
  store i32 %489, i32* %490, align 4
  br label %530

491:                                              ; preds = %481
  %492 = icmp ult i64 %483, 134
  br i1 %492, label %493, label %509

493:                                              ; preds = %491
  %494 = add nsw i64 %482, -2
  %495 = trunc i64 %494 to i32
  %496 = call i32 @llvm.ctlz.i32(i32 %495, i1 true) #6, !range !2
  %497 = sub nsw i32 30, %496
  %498 = zext i32 %497 to i64
  %499 = lshr i64 %494, %498
  %500 = shl nuw nsw i64 %498, 1
  %501 = add nuw nsw i64 %499, 44
  %502 = add nuw nsw i64 %501, %500
  %503 = shl i64 %499, %498
  %504 = sub i64 %494, %503
  %505 = shl i64 %504, 8
  %506 = or i64 %505, %502
  %507 = trunc i64 %506 to i32
  %508 = inttoptr i64 %441 to i32*
  store i32 %507, i32* %508, align 4
  br label %530

509:                                              ; preds = %491
  %510 = icmp ult i64 %483, 2118
  br i1 %510, label %511, label %524

511:                                              ; preds = %509
  %512 = add nsw i64 %482, -66
  %513 = trunc i64 %512 to i32
  %514 = call i32 @llvm.ctlz.i32(i32 %513, i1 true) #6, !range !2
  %515 = xor i32 %514, 31
  %516 = zext i32 %515 to i64
  %517 = add nuw nsw i64 %516, 52
  %518 = shl i64 1, %516
  %519 = sub i64 %512, %518
  %520 = shl i64 %519, 8
  %521 = or i64 %520, %517
  %522 = trunc i64 %521 to i32
  %523 = inttoptr i64 %441 to i32*
  store i32 %522, i32* %523, align 4
  br label %530

524:                                              ; preds = %509
  %525 = trunc i64 %483 to i32
  %526 = shl i32 %525, 8
  %527 = add i32 %526, -542208
  %528 = or i32 %527, 63
  %529 = inttoptr i64 %441 to i32*
  store i32 %528, i32* %529, align 4
  br label %530

530:                                              ; preds = %524, %511, %493, %487
  %531 = phi i32* [ %529, %524 ], [ %523, %511 ], [ %508, %493 ], [ %490, %487 ]
  %532 = getelementptr inbounds i32, i32* %531, i64 1
  %533 = add i32 %485, 3
  %534 = call i32 @llvm.ctlz.i32(i32 %533, i1 true) #6, !range !2
  %535 = xor i32 %534, 31
  %536 = add nsw i32 %535, -1
  %537 = lshr i32 %533, %536
  %538 = and i32 %537, 1
  %539 = or i32 %538, 2
  %540 = shl i32 %539, %536
  %541 = shl nuw nsw i32 %535, 1
  %542 = add nsw i32 %541, -4
  %543 = or i32 %538, %542
  %544 = add nsw i32 %543, 80
  %545 = sub i32 %533, %540
  %546 = shl i32 %545, 8
  %547 = or i32 %546, %544
  store i32 %547, i32* %532, align 4
  %548 = getelementptr inbounds i32, i32* %531, i64 2
  %549 = ptrtoint i32* %548 to i64
  %550 = icmp ult i8* %484, %155
  br i1 %550, label %551, label %589, !prof !33

551:                                              ; preds = %530
  %552 = getelementptr inbounds i8, i8* %484, i64 -3
  %553 = bitcast i8* %552 to i64*
  %554 = load i64, i64* %553, align 8
  %555 = lshr i64 %554, 24
  %556 = mul i64 %555, 2176830425094160384
  %557 = mul i64 %554, 2176830425094160384
  %558 = lshr i64 %557, 52
  %559 = ptrtoint i8* %484 to i64
  %560 = sub i64 %559, %22
  %561 = trunc i64 %560 to i32
  %562 = add i32 %561, -3
  %563 = getelementptr inbounds i32, i32* %5, i64 %558
  store i32 %562, i32* %563, align 4
  %564 = lshr i64 %554, 8
  %565 = mul i64 %564, 2176830425094160384
  %566 = lshr i64 %565, 52
  %567 = add i32 %561, -2
  %568 = getelementptr inbounds i32, i32* %5, i64 %566
  store i32 %567, i32* %568, align 4
  %569 = lshr i64 %554, 16
  %570 = mul i64 %569, 2176830425094160384
  %571 = lshr i64 %570, 52
  %572 = add i32 %561, -1
  %573 = getelementptr inbounds i32, i32* %5, i64 %571
  store i32 %572, i32* %573, align 4
  %574 = lshr i64 %556, 52
  %575 = getelementptr inbounds i32, i32* %5, i64 %574
  %576 = load i32, i32* %575, align 4
  store i32 %561, i32* %575, align 4
  %577 = sext i32 %576 to i64
  %578 = getelementptr inbounds i8, i8* %1, i64 %577
  %579 = ptrtoint i8* %578 to i64
  %580 = sub i64 %559, %579
  %581 = icmp slt i64 %580, 262129
  br i1 %581, label %430, label %582

582:                                              ; preds = %551, %430
  %583 = trunc i64 %440 to i32
  %584 = ptrtoint i32* %548 to i64
  br label %585

585:                                              ; preds = %582, %424, %398
  %586 = phi i64 [ %396, %398 ], [ %396, %424 ], [ %584, %582 ]
  %587 = phi i8* [ %262, %398 ], [ %262, %424 ], [ %484, %582 ]
  %588 = phi i32 [ %338, %398 ], [ %338, %424 ], [ %583, %582 ]
  br label %157

589:                                              ; preds = %530
  %590 = ptrtoint i8* %317 to i64
  %591 = ptrtoint i32* %548 to i64
  br label %595

592:                                              ; preds = %393
  %593 = ptrtoint i8* %317 to i64
  %594 = ptrtoint i32* %395 to i64
  br label %595

595:                                              ; preds = %168, %592, %589, %143
  %596 = phi i64 [ %20, %143 ], [ %591, %589 ], [ %594, %592 ], [ %158, %168 ]
  %597 = phi i64 [ %21, %143 ], [ %590, %589 ], [ %593, %592 ], [ %159, %168 ]
  %598 = phi i8* [ %144, %143 ], [ %484, %589 ], [ %262, %592 ], [ %160, %168 ]
  %599 = icmp ult i8* %598, %148
  br i1 %599, label %600, label %661

600:                                              ; preds = %595
  %601 = ptrtoint i8* %148 to i64
  %602 = ptrtoint i8* %598 to i64
  %603 = sub i64 %601, %602
  %604 = trunc i64 %603 to i32
  %605 = icmp ult i32 %604, 6
  br i1 %605, label %606, label %608

606:                                              ; preds = %600
  %607 = inttoptr i64 %596 to i32*
  store i32 %604, i32* %607, align 4
  br label %653

608:                                              ; preds = %600
  %609 = icmp ult i32 %604, 130
  br i1 %609, label %610, label %623

610:                                              ; preds = %608
  %611 = add nsw i32 %604, -2
  %612 = call i32 @llvm.ctlz.i32(i32 %611, i1 true) #6, !range !2
  %613 = sub nsw i32 30, %612
  %614 = lshr i32 %611, %613
  %615 = shl nsw i32 %613, 1
  %616 = add nuw nsw i32 %614, 2
  %617 = add i32 %616, %615
  %618 = shl i32 %614, %613
  %619 = sub i32 %611, %618
  %620 = shl i32 %619, 8
  %621 = or i32 %620, %617
  %622 = inttoptr i64 %596 to i32*
  store i32 %621, i32* %622, align 4
  br label %653

623:                                              ; preds = %608
  %624 = icmp ult i32 %604, 2114
  br i1 %624, label %625, label %635

625:                                              ; preds = %623
  %626 = add nsw i32 %604, -66
  %627 = call i32 @llvm.ctlz.i32(i32 %626, i1 true) #6, !range !2
  %628 = xor i32 %627, 31
  %629 = add nuw nsw i32 %628, 10
  %630 = shl i32 1, %628
  %631 = sub i32 %626, %630
  %632 = shl i32 %631, 8
  %633 = or i32 %632, %629
  %634 = inttoptr i64 %596 to i32*
  store i32 %633, i32* %634, align 4
  br label %653

635:                                              ; preds = %623
  %636 = icmp ult i32 %604, 6210
  br i1 %636, label %637, label %642

637:                                              ; preds = %635
  %638 = shl i32 %604, 8
  %639 = add nsw i32 %638, -541184
  %640 = or i32 %639, 21
  %641 = inttoptr i64 %596 to i32*
  store i32 %640, i32* %641, align 4
  br label %653

642:                                              ; preds = %635
  %643 = icmp ult i32 %604, 22594
  %644 = shl i32 %604, 8
  br i1 %643, label %645, label %649

645:                                              ; preds = %642
  %646 = add i32 %644, -1589760
  %647 = or i32 %646, 22
  %648 = inttoptr i64 %596 to i32*
  store i32 %647, i32* %648, align 4
  br label %653

649:                                              ; preds = %642
  %650 = add i32 %644, -5784064
  %651 = or i32 %650, 23
  %652 = inttoptr i64 %596 to i32*
  store i32 %651, i32* %652, align 4
  br label %653

653:                                              ; preds = %649, %645, %637, %625, %610, %606
  %654 = phi i32* [ %652, %649 ], [ %648, %645 ], [ %641, %637 ], [ %634, %625 ], [ %622, %610 ], [ %607, %606 ]
  %655 = getelementptr inbounds i32, i32* %654, i64 1
  %656 = ptrtoint i32* %655 to i64
  %657 = inttoptr i64 %597 to i8*
  %658 = and i64 %603, 4294967295
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %657, i8* align 1 %598, i64 %658, i1 false) #6
  %659 = getelementptr inbounds i8, i8* %657, i64 %658
  %660 = ptrtoint i8* %659 to i64
  br label %661

661:                                              ; preds = %653, %595
  %662 = phi i64 [ %656, %653 ], [ %596, %595 ]
  %663 = phi i64 [ %660, %653 ], [ %597, %595 ]
  %664 = sub i64 %663, %21
  %665 = uitofp i64 %147 to double
  %666 = uitofp i64 %664 to double
  %667 = fmul double %665, 0x3FEF5C28F5C28F5C
  %668 = fcmp ogt double %667, %666
  br i1 %668, label %743, label %669

669:                                              ; preds = %661
  call void @llvm.lifetime.start.p0i8(i64 1024, i8* nonnull %23) #6
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %23, i8 0, i64 1024, i1 false) #6
  %670 = fmul double %665, 8.000000e+00
  %671 = fmul double %670, 0x3FEF5C28F5C28F5C
  %672 = fdiv double %671, 4.300000e+01
  %673 = icmp eq i64 %147, 0
  br i1 %673, label %684, label %674

674:                                              ; preds = %669, %674
  %675 = phi i64 [ %682, %674 ], [ 0, %669 ]
  %676 = getelementptr inbounds i8, i8* %144, i64 %675
  %677 = load i8, i8* %676, align 1
  %678 = zext i8 %677 to i64
  %679 = getelementptr inbounds [256 x i32], [256 x i32]* %14, i64 0, i64 %678
  %680 = load i32, i32* %679, align 4
  %681 = add i32 %680, 1
  store i32 %681, i32* %679, align 4
  %682 = add i64 %675, 43
  %683 = icmp ult i64 %682, %147
  br i1 %683, label %674, label %684

684:                                              ; preds = %674, %669
  br label %685

685:                                              ; preds = %684, %719
  %686 = phi double [ %722, %719 ], [ 0.000000e+00, %684 ]
  %687 = phi i64 [ %711, %719 ], [ 0, %684 ]
  %688 = phi i64 [ %708, %719 ], [ 0, %684 ]
  %689 = getelementptr inbounds [256 x i32], [256 x i32]* %14, i64 0, i64 %688
  %690 = load i32, i32* %689, align 8
  %691 = zext i32 %690 to i64
  %692 = icmp ult i32 %690, 256
  br i1 %692, label %693, label %697

693:                                              ; preds = %685
  %694 = getelementptr inbounds [256 x double], [256 x double]* @kBrotliLog2Table, i64 0, i64 %691
  %695 = load double, double* %694, align 8
  %696 = uitofp i32 %690 to double
  br label %700

697:                                              ; preds = %685
  %698 = uitofp i32 %690 to double
  %699 = call double @log2(double %698) #6
  br label %700

700:                                              ; preds = %697, %693
  %701 = phi double [ %696, %693 ], [ %698, %697 ]
  %702 = phi double [ %695, %693 ], [ %699, %697 ]
  %703 = or i64 %688, 1
  %704 = getelementptr inbounds [256 x i32], [256 x i32]* %14, i64 0, i64 %703
  %705 = fmul double %701, %702
  %706 = fsub double %686, %705
  %707 = add i64 %687, %691
  %708 = add nuw nsw i64 %688, 2
  %709 = load i32, i32* %704, align 4
  %710 = zext i32 %709 to i64
  %711 = add i64 %707, %710
  %712 = uitofp i32 %709 to double
  %713 = icmp ult i32 %709, 256
  br i1 %713, label %714, label %717

714:                                              ; preds = %700
  %715 = getelementptr inbounds [256 x double], [256 x double]* @kBrotliLog2Table, i64 0, i64 %710
  %716 = load double, double* %715, align 8
  br label %719

717:                                              ; preds = %700
  %718 = call double @log2(double %712) #6
  br label %719

719:                                              ; preds = %717, %714
  %720 = phi double [ %716, %714 ], [ %718, %717 ]
  %721 = fmul double %720, %712
  %722 = fsub double %706, %721
  %723 = icmp ult i64 %708, 256
  br i1 %723, label %685, label %724

724:                                              ; preds = %719
  %725 = icmp eq i64 %711, 0
  %726 = uitofp i64 %711 to double
  br i1 %725, label %738, label %727

727:                                              ; preds = %724
  %728 = icmp ult i64 %711, 256
  br i1 %728, label %729, label %732

729:                                              ; preds = %727
  %730 = getelementptr inbounds [256 x double], [256 x double]* @kBrotliLog2Table, i64 0, i64 %711
  %731 = load double, double* %730, align 8
  br label %734

732:                                              ; preds = %727
  %733 = call double @log2(double %726) #6
  br label %734

734:                                              ; preds = %732, %729
  %735 = phi double [ %731, %729 ], [ %733, %732 ]
  %736 = fmul double %735, %726
  %737 = fadd double %722, %736
  br label %738

738:                                              ; preds = %734, %724
  %739 = phi double [ %737, %734 ], [ %722, %724 ]
  %740 = fcmp olt double %739, %726
  %741 = select i1 %740, double %726, double %739
  %742 = fcmp uge double %741, %672
  call void @llvm.lifetime.end.p0i8(i64 1024, i8* nonnull %23) #6
  br i1 %742, label %1055, label %743

743:                                              ; preds = %738, %661
  %744 = sub i64 %662, %20
  %745 = ashr exact i64 %744, 2
  %746 = load i64, i64* %6, align 8, !alias.scope !282, !noalias !285
  %747 = lshr i64 %746, 3
  %748 = getelementptr inbounds i8, i8* %7, i64 %747
  %749 = load i8, i8* %748, align 1, !alias.scope !285, !noalias !282
  %750 = zext i8 %749 to i64
  %751 = bitcast i8* %748 to i64*
  store i64 %750, i64* %751, align 8, !alias.scope !285, !noalias !282
  %752 = add i64 %746, 1
  %753 = icmp ult i64 %147, 65537
  %754 = select i1 %753, i64 4, i64 5
  %755 = add nsw i64 %754, -4
  %756 = lshr i64 %752, 3
  %757 = getelementptr inbounds i8, i8* %7, i64 %756
  %758 = load i8, i8* %757, align 1, !alias.scope !287, !noalias !290
  %759 = zext i8 %758 to i64
  %760 = and i64 %752, 7
  %761 = shl i64 %755, %760
  %762 = or i64 %761, %759
  %763 = bitcast i8* %757 to i64*
  store i64 %762, i64* %763, align 8, !alias.scope !287, !noalias !290
  %764 = add i64 %746, 3
  %765 = shl nuw nsw i64 %754, 2
  %766 = add nsw i64 %147, -1
  %767 = lshr i64 %764, 3
  %768 = getelementptr inbounds i8, i8* %7, i64 %767
  %769 = load i8, i8* %768, align 1, !alias.scope !292, !noalias !295
  %770 = zext i8 %769 to i64
  %771 = and i64 %764, 7
  %772 = shl i64 %766, %771
  %773 = or i64 %772, %770
  %774 = bitcast i8* %768 to i64*
  store i64 %773, i64* %774, align 8, !alias.scope !292, !noalias !295
  %775 = add i64 %764, %765
  %776 = lshr i64 %775, 3
  %777 = getelementptr inbounds i8, i8* %7, i64 %776
  %778 = load i8, i8* %777, align 1, !alias.scope !297, !noalias !300
  %779 = zext i8 %778 to i64
  %780 = bitcast i8* %777 to i64*
  store i64 %779, i64* %780, align 8, !alias.scope !297, !noalias !300
  %781 = add i64 %775, 1
  %782 = lshr i64 %781, 3
  %783 = getelementptr inbounds i8, i8* %7, i64 %782
  %784 = load i8, i8* %783, align 1, !alias.scope !302, !noalias !305
  %785 = zext i8 %784 to i64
  %786 = bitcast i8* %783 to i64*
  store i64 %785, i64* %786, align 8, !alias.scope !302, !noalias !305
  %787 = add i64 %775, 14
  store i64 %787, i64* %6, align 8, !alias.scope !305, !noalias !302
  call void @llvm.lifetime.start.p0i8(i64 256, i8* nonnull %24) #6
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %24, i8 -86, i64 256, i1 false) #6
  call void @llvm.lifetime.start.p0i8(i64 512, i8* nonnull %25) #6
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %25, i8 -86, i64 512, i1 false) #6
  call void @llvm.lifetime.start.p0i8(i64 1024, i8* nonnull %23) #6
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %23, i8 0, i64 1024, i1 false) #6
  call void @llvm.lifetime.start.p0i8(i64 128, i8* nonnull %26) #6
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %26, i8 0, i64 128, i1 false) #6
  call void @llvm.lifetime.start.p0i8(i64 256, i8* nonnull %27) #6
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %27, i8 0, i64 256, i1 false) #6
  call void @llvm.lifetime.start.p0i8(i64 512, i8* nonnull %28) #6
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %28, i8 0, i64 512, i1 false) #6
  %788 = icmp eq i64 %664, 0
  br i1 %788, label %843, label %789

789:                                              ; preds = %743
  %790 = add i64 %663, %142
  %791 = and i64 %664, 3
  %792 = icmp ult i64 %790, 3
  br i1 %792, label %828, label %793

793:                                              ; preds = %789
  %794 = sub i64 %664, %791
  br label %795

795:                                              ; preds = %795, %793
  %796 = phi i64 [ 0, %793 ], [ %825, %795 ]
  %797 = phi i64 [ %794, %793 ], [ %826, %795 ]
  %798 = getelementptr inbounds i8, i8* %4, i64 %796
  %799 = load i8, i8* %798, align 1
  %800 = zext i8 %799 to i64
  %801 = getelementptr inbounds [256 x i32], [256 x i32]* %14, i64 0, i64 %800
  %802 = load i32, i32* %801, align 4
  %803 = add i32 %802, 1
  store i32 %803, i32* %801, align 4
  %804 = or i64 %796, 1
  %805 = getelementptr inbounds i8, i8* %4, i64 %804
  %806 = load i8, i8* %805, align 1
  %807 = zext i8 %806 to i64
  %808 = getelementptr inbounds [256 x i32], [256 x i32]* %14, i64 0, i64 %807
  %809 = load i32, i32* %808, align 4
  %810 = add i32 %809, 1
  store i32 %810, i32* %808, align 4
  %811 = or i64 %796, 2
  %812 = getelementptr inbounds i8, i8* %4, i64 %811
  %813 = load i8, i8* %812, align 1
  %814 = zext i8 %813 to i64
  %815 = getelementptr inbounds [256 x i32], [256 x i32]* %14, i64 0, i64 %814
  %816 = load i32, i32* %815, align 4
  %817 = add i32 %816, 1
  store i32 %817, i32* %815, align 4
  %818 = or i64 %796, 3
  %819 = getelementptr inbounds i8, i8* %4, i64 %818
  %820 = load i8, i8* %819, align 1
  %821 = zext i8 %820 to i64
  %822 = getelementptr inbounds [256 x i32], [256 x i32]* %14, i64 0, i64 %821
  %823 = load i32, i32* %822, align 4
  %824 = add i32 %823, 1
  store i32 %824, i32* %822, align 4
  %825 = add nuw i64 %796, 4
  %826 = add i64 %797, -4
  %827 = icmp eq i64 %826, 0
  br i1 %827, label %828, label %795

828:                                              ; preds = %795, %789
  %829 = phi i64 [ 0, %789 ], [ %825, %795 ]
  %830 = icmp eq i64 %791, 0
  br i1 %830, label %843, label %831

831:                                              ; preds = %828, %831
  %832 = phi i64 [ %840, %831 ], [ %829, %828 ]
  %833 = phi i64 [ %841, %831 ], [ %791, %828 ]
  %834 = getelementptr inbounds i8, i8* %4, i64 %832
  %835 = load i8, i8* %834, align 1
  %836 = zext i8 %835 to i64
  %837 = getelementptr inbounds [256 x i32], [256 x i32]* %14, i64 0, i64 %836
  %838 = load i32, i32* %837, align 4
  %839 = add i32 %838, 1
  store i32 %839, i32* %837, align 4
  %840 = add nuw i64 %832, 1
  %841 = add i64 %833, -1
  %842 = icmp eq i64 %841, 0
  br i1 %842, label %843, label %831, !llvm.loop !307

843:                                              ; preds = %828, %831, %743
  call void @BrotliBuildAndStoreHuffmanTreeFast(%struct.MemoryManager* %0, i32* nonnull %29, i64 %664, i64 8, i8* nonnull %24, i16* nonnull %30, i64* %6, i8* %7) #6
  %844 = icmp eq i64 %744, 0
  br i1 %844, label %891, label %845

845:                                              ; preds = %843
  %846 = and i64 %745, 1
  %847 = icmp eq i64 %744, 4
  br i1 %847, label %871, label %848

848:                                              ; preds = %845
  %849 = sub nsw i64 %745, %846
  br label %850

850:                                              ; preds = %850, %848
  %851 = phi i64 [ 0, %848 ], [ %868, %850 ]
  %852 = phi i64 [ %849, %848 ], [ %869, %850 ]
  %853 = getelementptr inbounds i32, i32* %3, i64 %851
  %854 = load i32, i32* %853, align 4
  %855 = and i32 %854, 255
  %856 = zext i32 %855 to i64
  %857 = getelementptr inbounds [128 x i32], [128 x i32]* %17, i64 0, i64 %856
  %858 = load i32, i32* %857, align 4
  %859 = add i32 %858, 1
  store i32 %859, i32* %857, align 4
  %860 = or i64 %851, 1
  %861 = getelementptr inbounds i32, i32* %3, i64 %860
  %862 = load i32, i32* %861, align 4
  %863 = and i32 %862, 255
  %864 = zext i32 %863 to i64
  %865 = getelementptr inbounds [128 x i32], [128 x i32]* %17, i64 0, i64 %864
  %866 = load i32, i32* %865, align 4
  %867 = add i32 %866, 1
  store i32 %867, i32* %865, align 4
  %868 = add nuw i64 %851, 2
  %869 = add i64 %852, -2
  %870 = icmp eq i64 %869, 0
  br i1 %870, label %871, label %850

871:                                              ; preds = %850, %845
  %872 = phi i64 [ 0, %845 ], [ %868, %850 ]
  %873 = icmp eq i64 %846, 0
  br i1 %873, label %882, label %874

874:                                              ; preds = %871
  %875 = getelementptr inbounds i32, i32* %3, i64 %872
  %876 = load i32, i32* %875, align 4
  %877 = and i32 %876, 255
  %878 = zext i32 %877 to i64
  %879 = getelementptr inbounds [128 x i32], [128 x i32]* %17, i64 0, i64 %878
  %880 = load i32, i32* %879, align 4
  %881 = add i32 %880, 1
  store i32 %881, i32* %879, align 4
  br label %882

882:                                              ; preds = %871, %874
  %883 = load i32, i32* %31, align 4
  %884 = load i32, i32* %32, align 8
  %885 = load i32, i32* %33, align 16
  %886 = load i32, i32* %34, align 16
  %887 = add i32 %883, 1
  %888 = add i32 %884, 1
  %889 = add i32 %885, 1
  %890 = add i32 %886, 1
  br label %891

891:                                              ; preds = %882, %843
  %892 = phi i32 [ %890, %882 ], [ 1, %843 ]
  %893 = phi i32 [ %889, %882 ], [ 1, %843 ]
  %894 = phi i32 [ %888, %882 ], [ 1, %843 ]
  %895 = phi i32 [ %887, %882 ], [ 1, %843 ]
  store i32 %895, i32* %31, align 4
  store i32 %894, i32* %32, align 8
  store i32 %893, i32* %33, align 16
  store i32 %892, i32* %34, align 16
  call void @llvm.lifetime.start.p0i8(i64 1032, i8* nonnull %36) #6
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %36, i8 -86, i64 1032, i1 false) #6
  call void @llvm.lifetime.start.p0i8(i64 704, i8* nonnull %37) #6
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %37, i8 0, i64 704, i1 false) #6
  call void @llvm.lifetime.start.p0i8(i64 128, i8* nonnull %38) #6
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %38, i8 -86, i64 128, i1 false) #6
  call void @BrotliCreateHuffmanTree(i32* nonnull %35, i64 64, i32 15, %struct.HuffmanTree* nonnull %39, i8* nonnull %26) #6
  call void @BrotliCreateHuffmanTree(i32* %33, i64 64, i32 14, %struct.HuffmanTree* nonnull %39, i8* %40) #6
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 16 %37, i8* align 8 %41, i64 24, i1 false) #6
  %896 = load i64, i64* %43, align 16
  store i64 %896, i64* %44, align 8
  %897 = load i64, i64* %47, align 16
  store i64 %897, i64* %48, align 16
  %898 = load i64, i64* %51, align 8
  store i64 %898, i64* %52, align 8
  %899 = load i64, i64* %55, align 8
  store i64 %899, i64* %56, align 16
  %900 = load i64, i64* %59, align 16
  store i64 %900, i64* %60, align 8
  call void @BrotliConvertBitDepthsToSymbols(i8* nonnull %37, i64 64, i16* nonnull %61) #6
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 16 %27, i8* align 16 %63, i64 16, i1 false) #6
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 16 %65, i8* align 16 %67, i64 16, i1 false) #6
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 16 %69, i8* align 16 %71, i64 16, i1 false) #6
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 16 %73, i8* nonnull align 16 %38, i64 48, i1 false) #6
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 16 %75, i8* align 16 %77, i64 16, i1 false) #6
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 16 %79, i8* align 16 %81, i64 16, i1 false) #6
  call void @BrotliConvertBitDepthsToSymbols(i8* %40, i64 64, i16* %82) #6
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %37, i8 0, i64 64, i1 false) #6
  %901 = load i64, i64* %83, align 8
  store i64 %901, i64* %84, align 16
  %902 = load i64, i64* %87, align 16
  store i64 %902, i64* %88, align 16
  %903 = load i64, i64* %91, align 8
  store i64 %903, i64* %92, align 16
  %904 = load i64, i64* %47, align 16
  store i64 %904, i64* %94, align 16
  %905 = load i64, i64* %55, align 8
  store i64 %905, i64* %96, align 16
  %906 = load i8, i8* %26, align 16
  store i8 %906, i8* %89, align 16
  %907 = load i8, i8* %50, align 8
  store i8 %907, i8* %97, align 16
  %908 = load i8, i8* %58, align 16
  store i8 %908, i8* %98, align 16
  %909 = load i8, i8* %99, align 1
  store i8 %909, i8* %100, align 8
  %910 = load i8, i8* %101, align 1
  store i8 %910, i8* %102, align 8
  %911 = load i8, i8* %103, align 1
  store i8 %911, i8* %104, align 8
  %912 = load i8, i8* %105, align 2
  store i8 %912, i8* %106, align 16
  %913 = load i8, i8* %107, align 2
  store i8 %913, i8* %108, align 16
  %914 = load i8, i8* %109, align 2
  store i8 %914, i8* %110, align 16
  %915 = load i8, i8* %111, align 1
  store i8 %915, i8* %112, align 8
  %916 = load i8, i8* %113, align 1
  store i8 %916, i8* %114, align 8
  %917 = load i8, i8* %115, align 1
  store i8 %917, i8* %116, align 8
  %918 = load i8, i8* %117, align 4
  store i8 %918, i8* %118, align 16
  %919 = load i8, i8* %119, align 4
  store i8 %919, i8* %120, align 16
  %920 = load i8, i8* %121, align 4
  store i8 %920, i8* %122, align 16
  %921 = load i8, i8* %123, align 1
  store i8 %921, i8* %124, align 8
  %922 = load i8, i8* %125, align 1
  store i8 %922, i8* %126, align 8
  %923 = load i8, i8* %127, align 1
  store i8 %923, i8* %128, align 8
  %924 = load i8, i8* %129, align 2
  store i8 %924, i8* %130, align 16
  %925 = load i8, i8* %131, align 2
  store i8 %925, i8* %132, align 16
  %926 = load i8, i8* %133, align 2
  store i8 %926, i8* %134, align 16
  %927 = load i8, i8* %135, align 1
  store i8 %927, i8* %136, align 8
  %928 = load i8, i8* %137, align 1
  store i8 %928, i8* %138, align 8
  %929 = load i8, i8* %139, align 1
  store i8 %929, i8* %140, align 8
  call void @BrotliStoreHuffmanTree(i8* nonnull %37, i64 704, %struct.HuffmanTree* nonnull %39, i64* %6, i8* %7) #6
  call void @BrotliStoreHuffmanTree(i8* %40, i64 64, %struct.HuffmanTree* nonnull %39, i64* %6, i8* %7) #6
  call void @llvm.lifetime.end.p0i8(i64 128, i8* nonnull %38) #6
  call void @llvm.lifetime.end.p0i8(i64 704, i8* nonnull %37) #6
  call void @llvm.lifetime.end.p0i8(i64 1032, i8* nonnull %36) #6
  br i1 %844, label %1054, label %930

930:                                              ; preds = %891
  %931 = load i64, i64* %6, align 8, !alias.scope !308, !noalias !311
  br label %932

932:                                              ; preds = %1049, %930
  %933 = phi i64 [ %1050, %1049 ], [ %931, %930 ]
  %934 = phi i8* [ %1051, %1049 ], [ %4, %930 ]
  %935 = phi i64 [ %1052, %1049 ], [ 0, %930 ]
  %936 = getelementptr inbounds i32, i32* %3, i64 %935
  %937 = load i32, i32* %936, align 4
  %938 = and i32 %937, 255
  %939 = lshr i32 %937, 8
  %940 = zext i32 %938 to i64
  %941 = getelementptr inbounds [128 x i8], [128 x i8]* %15, i64 0, i64 %940
  %942 = load i8, i8* %941, align 1
  %943 = zext i8 %942 to i64
  %944 = getelementptr inbounds [128 x i16], [128 x i16]* %16, i64 0, i64 %940
  %945 = load i16, i16* %944, align 2
  %946 = zext i16 %945 to i64
  %947 = lshr i64 %933, 3
  %948 = getelementptr inbounds i8, i8* %7, i64 %947
  %949 = load i8, i8* %948, align 1, !alias.scope !311, !noalias !308
  %950 = zext i8 %949 to i64
  %951 = and i64 %933, 7
  %952 = shl i64 %946, %951
  %953 = or i64 %952, %950
  %954 = bitcast i8* %948 to i64*
  store i64 %953, i64* %954, align 8, !alias.scope !311, !noalias !308
  %955 = add i64 %933, %943
  %956 = getelementptr inbounds [128 x i32], [128 x i32]* @StoreCommands.kNumExtraBits, i64 0, i64 %940
  %957 = load i32, i32* %956, align 4
  %958 = zext i32 %957 to i64
  %959 = zext i32 %939 to i64
  %960 = lshr i64 %955, 3
  %961 = getelementptr inbounds i8, i8* %7, i64 %960
  %962 = load i8, i8* %961, align 1, !alias.scope !313, !noalias !316
  %963 = zext i8 %962 to i64
  %964 = and i64 %955, 7
  %965 = shl i64 %959, %964
  %966 = or i64 %965, %963
  %967 = bitcast i8* %961 to i64*
  store i64 %966, i64* %967, align 8, !alias.scope !313, !noalias !316
  %968 = add i64 %955, %958
  store i64 %968, i64* %6, align 8, !alias.scope !316, !noalias !313
  %969 = icmp ult i32 %938, 24
  br i1 %969, label %970, label %1049

970:                                              ; preds = %932
  %971 = getelementptr inbounds [24 x i32], [24 x i32]* @StoreCommands.kInsertOffset, i64 0, i64 %940
  %972 = load i32, i32* %971, align 4
  %973 = add i32 %972, %939
  %974 = icmp eq i32 %973, 0
  br i1 %974, label %1049, label %975

975:                                              ; preds = %970
  %976 = add i32 %972, -1
  %977 = and i32 %973, 1
  %978 = sub nsw i32 0, %939
  %979 = icmp eq i32 %976, %978
  br i1 %979, label %1024, label %980

980:                                              ; preds = %975
  %981 = sub i32 %973, %977
  br label %982

982:                                              ; preds = %982, %980
  %983 = phi i64 [ %968, %980 ], [ %1020, %982 ]
  %984 = phi i8* [ %934, %980 ], [ %1021, %982 ]
  %985 = phi i32 [ %981, %980 ], [ %1022, %982 ]
  %986 = load i8, i8* %984, align 1
  %987 = zext i8 %986 to i64
  %988 = getelementptr inbounds [256 x i8], [256 x i8]* %12, i64 0, i64 %987
  %989 = load i8, i8* %988, align 1
  %990 = zext i8 %989 to i64
  %991 = getelementptr inbounds [256 x i16], [256 x i16]* %13, i64 0, i64 %987
  %992 = load i16, i16* %991, align 2
  %993 = zext i16 %992 to i64
  %994 = lshr i64 %983, 3
  %995 = getelementptr inbounds i8, i8* %7, i64 %994
  %996 = load i8, i8* %995, align 1, !alias.scope !318, !noalias !321
  %997 = zext i8 %996 to i64
  %998 = and i64 %983, 7
  %999 = shl i64 %993, %998
  %1000 = or i64 %999, %997
  %1001 = bitcast i8* %995 to i64*
  store i64 %1000, i64* %1001, align 8, !alias.scope !318, !noalias !321
  %1002 = add i64 %983, %990
  store i64 %1002, i64* %6, align 8, !alias.scope !321, !noalias !318
  %1003 = getelementptr inbounds i8, i8* %984, i64 1
  %1004 = load i8, i8* %1003, align 1
  %1005 = zext i8 %1004 to i64
  %1006 = getelementptr inbounds [256 x i8], [256 x i8]* %12, i64 0, i64 %1005
  %1007 = load i8, i8* %1006, align 1
  %1008 = zext i8 %1007 to i64
  %1009 = getelementptr inbounds [256 x i16], [256 x i16]* %13, i64 0, i64 %1005
  %1010 = load i16, i16* %1009, align 2
  %1011 = zext i16 %1010 to i64
  %1012 = lshr i64 %1002, 3
  %1013 = getelementptr inbounds i8, i8* %7, i64 %1012
  %1014 = load i8, i8* %1013, align 1, !alias.scope !318, !noalias !321
  %1015 = zext i8 %1014 to i64
  %1016 = and i64 %1002, 7
  %1017 = shl i64 %1011, %1016
  %1018 = or i64 %1017, %1015
  %1019 = bitcast i8* %1013 to i64*
  store i64 %1018, i64* %1019, align 8, !alias.scope !318, !noalias !321
  %1020 = add i64 %1002, %1008
  store i64 %1020, i64* %6, align 8, !alias.scope !321, !noalias !318
  %1021 = getelementptr inbounds i8, i8* %984, i64 2
  %1022 = add i32 %985, -2
  %1023 = icmp eq i32 %1022, 0
  br i1 %1023, label %1024, label %982

1024:                                             ; preds = %982, %975
  %1025 = phi i64 [ undef, %975 ], [ %1020, %982 ]
  %1026 = phi i8* [ undef, %975 ], [ %1021, %982 ]
  %1027 = phi i64 [ %968, %975 ], [ %1020, %982 ]
  %1028 = phi i8* [ %934, %975 ], [ %1021, %982 ]
  %1029 = icmp eq i32 %977, 0
  br i1 %1029, label %1049, label %1030

1030:                                             ; preds = %1024
  %1031 = load i8, i8* %1028, align 1
  %1032 = zext i8 %1031 to i64
  %1033 = getelementptr inbounds [256 x i8], [256 x i8]* %12, i64 0, i64 %1032
  %1034 = load i8, i8* %1033, align 1
  %1035 = zext i8 %1034 to i64
  %1036 = getelementptr inbounds [256 x i16], [256 x i16]* %13, i64 0, i64 %1032
  %1037 = load i16, i16* %1036, align 2
  %1038 = zext i16 %1037 to i64
  %1039 = lshr i64 %1027, 3
  %1040 = getelementptr inbounds i8, i8* %7, i64 %1039
  %1041 = load i8, i8* %1040, align 1, !alias.scope !318, !noalias !321
  %1042 = zext i8 %1041 to i64
  %1043 = and i64 %1027, 7
  %1044 = shl i64 %1038, %1043
  %1045 = or i64 %1044, %1042
  %1046 = bitcast i8* %1040 to i64*
  store i64 %1045, i64* %1046, align 8, !alias.scope !318, !noalias !321
  %1047 = add i64 %1027, %1035
  store i64 %1047, i64* %6, align 8, !alias.scope !321, !noalias !318
  %1048 = getelementptr inbounds i8, i8* %1028, i64 1
  br label %1049

1049:                                             ; preds = %1030, %1024, %970, %932
  %1050 = phi i64 [ %968, %932 ], [ %968, %970 ], [ %1025, %1024 ], [ %1047, %1030 ]
  %1051 = phi i8* [ %934, %932 ], [ %934, %970 ], [ %1026, %1024 ], [ %1048, %1030 ]
  %1052 = add nuw i64 %935, 1
  %1053 = icmp eq i64 %1052, %745
  br i1 %1053, label %1054, label %932

1054:                                             ; preds = %1049, %891
  call void @llvm.lifetime.end.p0i8(i64 512, i8* nonnull %28) #6
  call void @llvm.lifetime.end.p0i8(i64 256, i8* nonnull %27) #6
  call void @llvm.lifetime.end.p0i8(i64 128, i8* nonnull %26) #6
  call void @llvm.lifetime.end.p0i8(i64 1024, i8* nonnull %23) #6
  call void @llvm.lifetime.end.p0i8(i64 512, i8* nonnull %25) #6
  call void @llvm.lifetime.end.p0i8(i64 256, i8* nonnull %24) #6
  br label %1103

1055:                                             ; preds = %738
  %1056 = load i64, i64* %6, align 8, !alias.scope !323, !noalias !326
  %1057 = lshr i64 %1056, 3
  %1058 = getelementptr inbounds i8, i8* %7, i64 %1057
  %1059 = load i8, i8* %1058, align 1, !alias.scope !326, !noalias !323
  %1060 = zext i8 %1059 to i64
  %1061 = bitcast i8* %1058 to i64*
  store i64 %1060, i64* %1061, align 8, !alias.scope !326, !noalias !323
  %1062 = add i64 %1056, 1
  %1063 = icmp ult i64 %147, 65537
  %1064 = select i1 %1063, i64 4, i64 5
  %1065 = add nsw i64 %1064, -4
  %1066 = lshr i64 %1062, 3
  %1067 = getelementptr inbounds i8, i8* %7, i64 %1066
  %1068 = load i8, i8* %1067, align 1, !alias.scope !328, !noalias !331
  %1069 = zext i8 %1068 to i64
  %1070 = and i64 %1062, 7
  %1071 = shl i64 %1065, %1070
  %1072 = or i64 %1071, %1069
  %1073 = bitcast i8* %1067 to i64*
  store i64 %1072, i64* %1073, align 8, !alias.scope !328, !noalias !331
  %1074 = add i64 %1056, 3
  %1075 = shl nuw nsw i64 %1064, 2
  %1076 = add nsw i64 %147, -1
  %1077 = lshr i64 %1074, 3
  %1078 = getelementptr inbounds i8, i8* %7, i64 %1077
  %1079 = load i8, i8* %1078, align 1, !alias.scope !333, !noalias !336
  %1080 = zext i8 %1079 to i64
  %1081 = and i64 %1074, 7
  %1082 = shl i64 %1076, %1081
  %1083 = or i64 %1082, %1080
  %1084 = bitcast i8* %1078 to i64*
  store i64 %1083, i64* %1084, align 8, !alias.scope !333, !noalias !336
  %1085 = add i64 %1074, %1075
  %1086 = lshr i64 %1085, 3
  %1087 = getelementptr inbounds i8, i8* %7, i64 %1086
  %1088 = load i8, i8* %1087, align 1, !alias.scope !338, !noalias !341
  %1089 = zext i8 %1088 to i64
  %1090 = and i64 %1085, 7
  %1091 = shl i64 1, %1090
  %1092 = or i64 %1091, %1089
  %1093 = bitcast i8* %1087 to i64*
  store i64 %1092, i64* %1093, align 8, !alias.scope !338, !noalias !341
  %1094 = add i64 %1085, 8
  %1095 = and i64 %1094, 4294967288
  store i64 %1095, i64* %6, align 8
  %1096 = lshr exact i64 %1095, 3
  %1097 = getelementptr inbounds i8, i8* %7, i64 %1096
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %1097, i8* align 1 %144, i64 %147, i1 false) #6
  %1098 = shl nuw nsw i64 %147, 3
  %1099 = load i64, i64* %6, align 8
  %1100 = add i64 %1099, %1098
  store i64 %1100, i64* %6, align 8
  %1101 = lshr i64 %1100, 3
  %1102 = getelementptr inbounds i8, i8* %7, i64 %1101
  store i8 0, i8* %1102, align 1
  br label %1103

1103:                                             ; preds = %1055, %1054
  %1104 = sub i64 %145, %147
  %1105 = icmp eq i64 %1104, 0
  br i1 %1105, label %1106, label %143

1106:                                             ; preds = %1103, %8
  ret void

1107:                                             ; preds = %252
  %1108 = getelementptr inbounds i8, i8* %244, i64 1
  %1109 = getelementptr inbounds i8, i8* %216, i64 %253
  %1110 = load i8, i8* %1109, align 1
  %1111 = load i8, i8* %1108, align 1
  %1112 = icmp eq i8 %1110, %1111
  br i1 %1112, label %1113, label %255, !prof !33

1113:                                             ; preds = %1107
  %1114 = add i64 %243, 2
  %1115 = icmp eq i64 %245, 2
  br i1 %1115, label %255, label %1116

1116:                                             ; preds = %1113
  %1117 = getelementptr inbounds i8, i8* %244, i64 2
  %1118 = getelementptr inbounds i8, i8* %216, i64 %1114
  %1119 = load i8, i8* %1118, align 1
  %1120 = load i8, i8* %1117, align 1
  %1121 = icmp eq i8 %1119, %1120
  br i1 %1121, label %1122, label %255, !prof !33

1122:                                             ; preds = %1116
  %1123 = add i64 %243, 3
  %1124 = icmp eq i64 %245, 3
  br i1 %1124, label %255, label %1125

1125:                                             ; preds = %1122
  %1126 = getelementptr inbounds i8, i8* %244, i64 3
  %1127 = getelementptr inbounds i8, i8* %216, i64 %1123
  %1128 = load i8, i8* %1127, align 1
  %1129 = load i8, i8* %1126, align 1
  %1130 = icmp eq i8 %1128, %1129
  br i1 %1130, label %1131, label %255, !prof !33

1131:                                             ; preds = %1125
  %1132 = add i64 %243, 4
  %1133 = icmp eq i64 %245, 4
  br i1 %1133, label %255, label %1134

1134:                                             ; preds = %1131
  %1135 = getelementptr inbounds i8, i8* %244, i64 4
  %1136 = getelementptr inbounds i8, i8* %216, i64 %1132
  %1137 = load i8, i8* %1136, align 1
  %1138 = load i8, i8* %1135, align 1
  %1139 = icmp eq i8 %1137, %1138
  br i1 %1139, label %1140, label %255, !prof !33

1140:                                             ; preds = %1134
  %1141 = add i64 %243, 5
  %1142 = icmp eq i64 %245, 5
  br i1 %1142, label %255, label %1143

1143:                                             ; preds = %1140
  %1144 = getelementptr inbounds i8, i8* %244, i64 5
  %1145 = getelementptr inbounds i8, i8* %216, i64 %1141
  %1146 = load i8, i8* %1145, align 1
  %1147 = load i8, i8* %1144, align 1
  %1148 = icmp eq i8 %1146, %1147
  br i1 %1148, label %1149, label %255, !prof !33

1149:                                             ; preds = %1143
  %1150 = add i64 %243, 6
  %1151 = icmp eq i64 %245, 6
  br i1 %1151, label %255, label %1152

1152:                                             ; preds = %1149
  %1153 = getelementptr inbounds i8, i8* %244, i64 6
  %1154 = getelementptr inbounds i8, i8* %216, i64 %1150
  %1155 = load i8, i8* %1154, align 1
  %1156 = load i8, i8* %1153, align 1
  %1157 = icmp eq i8 %1155, %1156
  %1158 = add i64 %243, 7
  %1159 = select i1 %1157, i64 %1158, i64 %1150, !prof !33
  br label %255

1160:                                             ; preds = %478
  %1161 = getelementptr inbounds i8, i8* %470, i64 1
  %1162 = getelementptr inbounds i8, i8* %442, i64 %479
  %1163 = load i8, i8* %1162, align 1
  %1164 = load i8, i8* %1161, align 1
  %1165 = icmp eq i8 %1163, %1164
  br i1 %1165, label %1166, label %481, !prof !33

1166:                                             ; preds = %1160
  %1167 = add i64 %469, 2
  %1168 = icmp eq i64 %471, 2
  br i1 %1168, label %481, label %1169

1169:                                             ; preds = %1166
  %1170 = getelementptr inbounds i8, i8* %470, i64 2
  %1171 = getelementptr inbounds i8, i8* %442, i64 %1167
  %1172 = load i8, i8* %1171, align 1
  %1173 = load i8, i8* %1170, align 1
  %1174 = icmp eq i8 %1172, %1173
  br i1 %1174, label %1175, label %481, !prof !33

1175:                                             ; preds = %1169
  %1176 = add i64 %469, 3
  %1177 = icmp eq i64 %471, 3
  br i1 %1177, label %481, label %1178

1178:                                             ; preds = %1175
  %1179 = getelementptr inbounds i8, i8* %470, i64 3
  %1180 = getelementptr inbounds i8, i8* %442, i64 %1176
  %1181 = load i8, i8* %1180, align 1
  %1182 = load i8, i8* %1179, align 1
  %1183 = icmp eq i8 %1181, %1182
  br i1 %1183, label %1184, label %481, !prof !33

1184:                                             ; preds = %1178
  %1185 = add i64 %469, 4
  %1186 = icmp eq i64 %471, 4
  br i1 %1186, label %481, label %1187

1187:                                             ; preds = %1184
  %1188 = getelementptr inbounds i8, i8* %470, i64 4
  %1189 = getelementptr inbounds i8, i8* %442, i64 %1185
  %1190 = load i8, i8* %1189, align 1
  %1191 = load i8, i8* %1188, align 1
  %1192 = icmp eq i8 %1190, %1191
  br i1 %1192, label %1193, label %481, !prof !33

1193:                                             ; preds = %1187
  %1194 = add i64 %469, 5
  %1195 = icmp eq i64 %471, 5
  br i1 %1195, label %481, label %1196

1196:                                             ; preds = %1193
  %1197 = getelementptr inbounds i8, i8* %470, i64 5
  %1198 = getelementptr inbounds i8, i8* %442, i64 %1194
  %1199 = load i8, i8* %1198, align 1
  %1200 = load i8, i8* %1197, align 1
  %1201 = icmp eq i8 %1199, %1200
  br i1 %1201, label %1202, label %481, !prof !33

1202:                                             ; preds = %1196
  %1203 = add i64 %469, 6
  %1204 = icmp eq i64 %471, 6
  br i1 %1204, label %481, label %1205

1205:                                             ; preds = %1202
  %1206 = getelementptr inbounds i8, i8* %470, i64 6
  %1207 = getelementptr inbounds i8, i8* %442, i64 %1203
  %1208 = load i8, i8* %1207, align 1
  %1209 = load i8, i8* %1206, align 1
  %1210 = icmp eq i8 %1208, %1209
  %1211 = add i64 %469, 7
  %1212 = select i1 %1210, i64 %1211, i64 %1203, !prof !33
  br label %481
}

; Function Attrs: noinline nounwind ssp uwtable
define internal fastcc void @BrotliCompressFragmentTwoPassImpl13(%struct.MemoryManager*, i8*, i64, i32*, i8*, i32* nocapture, i64*, i8*) unnamed_addr #2 {
  %9 = alloca [129 x %struct.HuffmanTree], align 16
  %10 = alloca [704 x i8], align 16
  %11 = alloca [64 x i16], align 16
  %12 = alloca [256 x i8], align 16
  %13 = alloca [256 x i16], align 16
  %14 = alloca [256 x i32], align 16
  %15 = alloca [128 x i8], align 16
  %16 = alloca [128 x i16], align 16
  %17 = alloca [128 x i32], align 16
  %18 = icmp eq i64 %2, 0
  br i1 %18, label %1106, label %19

19:                                               ; preds = %8
  %20 = ptrtoint i32* %3 to i64
  %21 = ptrtoint i8* %4 to i64
  %22 = ptrtoint i8* %1 to i64
  %23 = bitcast [256 x i32]* %14 to i8*
  %24 = getelementptr inbounds [256 x i8], [256 x i8]* %12, i64 0, i64 0
  %25 = bitcast [256 x i16]* %13 to i8*
  %26 = getelementptr inbounds [128 x i8], [128 x i8]* %15, i64 0, i64 0
  %27 = bitcast [128 x i16]* %16 to i8*
  %28 = bitcast [128 x i32]* %17 to i8*
  %29 = getelementptr inbounds [256 x i32], [256 x i32]* %14, i64 0, i64 0
  %30 = getelementptr inbounds [256 x i16], [256 x i16]* %13, i64 0, i64 0
  %31 = getelementptr inbounds [128 x i32], [128 x i32]* %17, i64 0, i64 1
  %32 = getelementptr inbounds [128 x i32], [128 x i32]* %17, i64 0, i64 2
  %33 = getelementptr inbounds [128 x i32], [128 x i32]* %17, i64 0, i64 64
  %34 = getelementptr inbounds [128 x i32], [128 x i32]* %17, i64 0, i64 84
  %35 = getelementptr inbounds [128 x i32], [128 x i32]* %17, i64 0, i64 0
  %36 = bitcast [129 x %struct.HuffmanTree]* %9 to i8*
  %37 = getelementptr inbounds [704 x i8], [704 x i8]* %10, i64 0, i64 0
  %38 = bitcast [64 x i16]* %11 to i8*
  %39 = getelementptr inbounds [129 x %struct.HuffmanTree], [129 x %struct.HuffmanTree]* %9, i64 0, i64 0
  %40 = getelementptr inbounds [128 x i8], [128 x i8]* %15, i64 0, i64 64
  %41 = getelementptr inbounds [128 x i8], [128 x i8]* %15, i64 0, i64 24
  %42 = getelementptr inbounds [704 x i8], [704 x i8]* %10, i64 0, i64 24
  %43 = bitcast [128 x i8]* %15 to i64*
  %44 = bitcast i8* %42 to i64*
  %45 = getelementptr inbounds [704 x i8], [704 x i8]* %10, i64 0, i64 32
  %46 = getelementptr inbounds [128 x i8], [128 x i8]* %15, i64 0, i64 48
  %47 = bitcast i8* %46 to i64*
  %48 = bitcast i8* %45 to i64*
  %49 = getelementptr inbounds [704 x i8], [704 x i8]* %10, i64 0, i64 40
  %50 = getelementptr inbounds [128 x i8], [128 x i8]* %15, i64 0, i64 8
  %51 = bitcast i8* %50 to i64*
  %52 = bitcast i8* %49 to i64*
  %53 = getelementptr inbounds [704 x i8], [704 x i8]* %10, i64 0, i64 48
  %54 = getelementptr inbounds [128 x i8], [128 x i8]* %15, i64 0, i64 56
  %55 = bitcast i8* %54 to i64*
  %56 = bitcast i8* %53 to i64*
  %57 = getelementptr inbounds [704 x i8], [704 x i8]* %10, i64 0, i64 56
  %58 = getelementptr inbounds [128 x i8], [128 x i8]* %15, i64 0, i64 16
  %59 = bitcast i8* %58 to i64*
  %60 = bitcast i8* %57 to i64*
  %61 = getelementptr inbounds [64 x i16], [64 x i16]* %11, i64 0, i64 0
  %62 = getelementptr inbounds [64 x i16], [64 x i16]* %11, i64 0, i64 24
  %63 = bitcast i16* %62 to i8*
  %64 = getelementptr inbounds [128 x i16], [128 x i16]* %16, i64 0, i64 8
  %65 = bitcast i16* %64 to i8*
  %66 = getelementptr inbounds [64 x i16], [64 x i16]* %11, i64 0, i64 40
  %67 = bitcast i16* %66 to i8*
  %68 = getelementptr inbounds [128 x i16], [128 x i16]* %16, i64 0, i64 16
  %69 = bitcast i16* %68 to i8*
  %70 = getelementptr inbounds [64 x i16], [64 x i16]* %11, i64 0, i64 56
  %71 = bitcast i16* %70 to i8*
  %72 = getelementptr inbounds [128 x i16], [128 x i16]* %16, i64 0, i64 24
  %73 = bitcast i16* %72 to i8*
  %74 = getelementptr inbounds [128 x i16], [128 x i16]* %16, i64 0, i64 48
  %75 = bitcast i16* %74 to i8*
  %76 = getelementptr inbounds [64 x i16], [64 x i16]* %11, i64 0, i64 32
  %77 = bitcast i16* %76 to i8*
  %78 = getelementptr inbounds [128 x i16], [128 x i16]* %16, i64 0, i64 56
  %79 = bitcast i16* %78 to i8*
  %80 = getelementptr inbounds [64 x i16], [64 x i16]* %11, i64 0, i64 48
  %81 = bitcast i16* %80 to i8*
  %82 = getelementptr inbounds [128 x i16], [128 x i16]* %16, i64 0, i64 64
  %83 = bitcast i8* %41 to i64*
  %84 = bitcast [704 x i8]* %10 to i64*
  %85 = getelementptr inbounds [704 x i8], [704 x i8]* %10, i64 0, i64 64
  %86 = getelementptr inbounds [128 x i8], [128 x i8]* %15, i64 0, i64 32
  %87 = bitcast i8* %86 to i64*
  %88 = bitcast i8* %85 to i64*
  %89 = getelementptr inbounds [704 x i8], [704 x i8]* %10, i64 0, i64 128
  %90 = getelementptr inbounds [128 x i8], [128 x i8]* %15, i64 0, i64 40
  %91 = bitcast i8* %90 to i64*
  %92 = bitcast i8* %89 to i64*
  %93 = getelementptr inbounds [704 x i8], [704 x i8]* %10, i64 0, i64 192
  %94 = bitcast i8* %93 to i64*
  %95 = getelementptr inbounds [704 x i8], [704 x i8]* %10, i64 0, i64 384
  %96 = bitcast i8* %95 to i64*
  %97 = getelementptr inbounds [704 x i8], [704 x i8]* %10, i64 0, i64 256
  %98 = getelementptr inbounds [704 x i8], [704 x i8]* %10, i64 0, i64 448
  %99 = getelementptr inbounds [128 x i8], [128 x i8]* %15, i64 0, i64 1
  %100 = getelementptr inbounds [704 x i8], [704 x i8]* %10, i64 0, i64 136
  %101 = getelementptr inbounds [128 x i8], [128 x i8]* %15, i64 0, i64 9
  %102 = getelementptr inbounds [704 x i8], [704 x i8]* %10, i64 0, i64 264
  %103 = getelementptr inbounds [128 x i8], [128 x i8]* %15, i64 0, i64 17
  %104 = getelementptr inbounds [704 x i8], [704 x i8]* %10, i64 0, i64 456
  %105 = getelementptr inbounds [128 x i8], [128 x i8]* %15, i64 0, i64 2
  %106 = getelementptr inbounds [704 x i8], [704 x i8]* %10, i64 0, i64 144
  %107 = getelementptr inbounds [128 x i8], [128 x i8]* %15, i64 0, i64 10
  %108 = getelementptr inbounds [704 x i8], [704 x i8]* %10, i64 0, i64 272
  %109 = getelementptr inbounds [128 x i8], [128 x i8]* %15, i64 0, i64 18
  %110 = getelementptr inbounds [704 x i8], [704 x i8]* %10, i64 0, i64 464
  %111 = getelementptr inbounds [128 x i8], [128 x i8]* %15, i64 0, i64 3
  %112 = getelementptr inbounds [704 x i8], [704 x i8]* %10, i64 0, i64 152
  %113 = getelementptr inbounds [128 x i8], [128 x i8]* %15, i64 0, i64 11
  %114 = getelementptr inbounds [704 x i8], [704 x i8]* %10, i64 0, i64 280
  %115 = getelementptr inbounds [128 x i8], [128 x i8]* %15, i64 0, i64 19
  %116 = getelementptr inbounds [704 x i8], [704 x i8]* %10, i64 0, i64 472
  %117 = getelementptr inbounds [128 x i8], [128 x i8]* %15, i64 0, i64 4
  %118 = getelementptr inbounds [704 x i8], [704 x i8]* %10, i64 0, i64 160
  %119 = getelementptr inbounds [128 x i8], [128 x i8]* %15, i64 0, i64 12
  %120 = getelementptr inbounds [704 x i8], [704 x i8]* %10, i64 0, i64 288
  %121 = getelementptr inbounds [128 x i8], [128 x i8]* %15, i64 0, i64 20
  %122 = getelementptr inbounds [704 x i8], [704 x i8]* %10, i64 0, i64 480
  %123 = getelementptr inbounds [128 x i8], [128 x i8]* %15, i64 0, i64 5
  %124 = getelementptr inbounds [704 x i8], [704 x i8]* %10, i64 0, i64 168
  %125 = getelementptr inbounds [128 x i8], [128 x i8]* %15, i64 0, i64 13
  %126 = getelementptr inbounds [704 x i8], [704 x i8]* %10, i64 0, i64 296
  %127 = getelementptr inbounds [128 x i8], [128 x i8]* %15, i64 0, i64 21
  %128 = getelementptr inbounds [704 x i8], [704 x i8]* %10, i64 0, i64 488
  %129 = getelementptr inbounds [128 x i8], [128 x i8]* %15, i64 0, i64 6
  %130 = getelementptr inbounds [704 x i8], [704 x i8]* %10, i64 0, i64 176
  %131 = getelementptr inbounds [128 x i8], [128 x i8]* %15, i64 0, i64 14
  %132 = getelementptr inbounds [704 x i8], [704 x i8]* %10, i64 0, i64 304
  %133 = getelementptr inbounds [128 x i8], [128 x i8]* %15, i64 0, i64 22
  %134 = getelementptr inbounds [704 x i8], [704 x i8]* %10, i64 0, i64 496
  %135 = getelementptr inbounds [128 x i8], [128 x i8]* %15, i64 0, i64 7
  %136 = getelementptr inbounds [704 x i8], [704 x i8]* %10, i64 0, i64 184
  %137 = getelementptr inbounds [128 x i8], [128 x i8]* %15, i64 0, i64 15
  %138 = getelementptr inbounds [704 x i8], [704 x i8]* %10, i64 0, i64 312
  %139 = getelementptr inbounds [128 x i8], [128 x i8]* %15, i64 0, i64 23
  %140 = getelementptr inbounds [704 x i8], [704 x i8]* %10, i64 0, i64 504
  %141 = getelementptr inbounds i8, i8* %1, i64 4
  %142 = xor i64 %21, -1
  br label %143

143:                                              ; preds = %1103, %19
  %144 = phi i8* [ %1, %19 ], [ %148, %1103 ]
  %145 = phi i64 [ %2, %19 ], [ %1104, %1103 ]
  %146 = icmp ult i64 %145, 131072
  %147 = select i1 %146, i64 %145, i64 131072
  %148 = getelementptr inbounds i8, i8* %144, i64 %147
  %149 = icmp ugt i64 %147, 15
  br i1 %149, label %150, label %595, !prof !33

150:                                              ; preds = %143
  %151 = add nsw i64 %147, -4
  %152 = add i64 %145, -16
  %153 = icmp ult i64 %151, %152
  %154 = select i1 %153, i64 %151, i64 %152
  %155 = getelementptr inbounds i8, i8* %144, i64 %154
  %156 = ptrtoint i8* %148 to i64
  br label %157

157:                                              ; preds = %585, %150
  %158 = phi i64 [ %20, %150 ], [ %586, %585 ]
  %159 = phi i64 [ %21, %150 ], [ %318, %585 ]
  %160 = phi i8* [ %144, %150 ], [ %587, %585 ]
  %161 = phi i32 [ -1, %150 ], [ %588, %585 ]
  %162 = getelementptr inbounds i8, i8* %160, i64 1
  %163 = bitcast i8* %162 to i64*
  %164 = load i64, i64* %163, align 8
  %165 = sext i32 %161 to i64
  %166 = sub nsw i64 0, %165
  %167 = icmp slt i32 %161, 1
  br label %168

168:                                              ; preds = %206, %157
  %169 = phi i64 [ %164, %157 ], [ %181, %206 ]
  %170 = phi i32 [ 32, %157 ], [ %174, %206 ]
  %171 = phi i8* [ %162, %157 ], [ %177, %206 ]
  %172 = mul i64 %169, 2176830425094160384
  %173 = lshr i64 %172, 51
  %174 = add i32 %170, 1
  %175 = lshr i32 %170, 5
  %176 = zext i32 %175 to i64
  %177 = getelementptr inbounds i8, i8* %171, i64 %176
  %178 = icmp ugt i8* %177, %155
  br i1 %178, label %595, label %179, !prof !34

179:                                              ; preds = %168
  %180 = bitcast i8* %177 to i64*
  %181 = load i64, i64* %180, align 8
  %182 = getelementptr inbounds i8, i8* %171, i64 %166
  %183 = bitcast i8* %171 to i32*
  %184 = load i32, i32* %183, align 4
  %185 = bitcast i8* %182 to i32*
  %186 = load i32, i32* %185, align 4
  %187 = icmp ne i32 %184, %186
  %188 = or i1 %167, %187
  br i1 %188, label %194, label %189, !prof !35

189:                                              ; preds = %179
  %190 = ptrtoint i8* %171 to i64
  %191 = sub i64 %190, %22
  %192 = trunc i64 %191 to i32
  %193 = getelementptr inbounds i32, i32* %5, i64 %173
  store i32 %192, i32* %193, align 4
  br label %209

194:                                              ; preds = %179
  %195 = getelementptr inbounds i32, i32* %5, i64 %173
  %196 = load i32, i32* %195, align 4
  %197 = sext i32 %196 to i64
  %198 = getelementptr inbounds i8, i8* %1, i64 %197
  %199 = ptrtoint i8* %171 to i64
  %200 = sub i64 %199, %22
  %201 = trunc i64 %200 to i32
  store i32 %201, i32* %195, align 4
  %202 = load i32, i32* %183, align 4
  %203 = bitcast i8* %198 to i32*
  %204 = load i32, i32* %203, align 4
  %205 = icmp eq i32 %202, %204
  br i1 %205, label %207, label %206

206:                                              ; preds = %194, %209
  br label %168

207:                                              ; preds = %194
  %208 = ptrtoint i8* %171 to i64
  br label %209

209:                                              ; preds = %207, %189
  %210 = phi i64 [ %190, %189 ], [ %208, %207 ]
  %211 = phi i8* [ %182, %189 ], [ %198, %207 ]
  %212 = ptrtoint i8* %211 to i64
  %213 = sub i64 %210, %212
  %214 = icmp sgt i64 %213, 262128
  br i1 %214, label %206, label %215

215:                                              ; preds = %209
  %216 = getelementptr inbounds i8, i8* %211, i64 4
  %217 = getelementptr inbounds i8, i8* %171, i64 4
  %218 = sub i64 %156, %210
  %219 = add i64 %218, -4
  %220 = lshr i64 %219, 3
  %221 = icmp eq i64 %220, 0
  br i1 %221, label %242, label %222, !prof !34

222:                                              ; preds = %215, %232
  %223 = phi i64 [ %235, %232 ], [ %220, %215 ]
  %224 = phi i8* [ %233, %232 ], [ %217, %215 ]
  %225 = phi i64 [ %234, %232 ], [ 0, %215 ]
  %226 = bitcast i8* %224 to i64*
  %227 = load i64, i64* %226, align 8
  %228 = getelementptr inbounds i8, i8* %216, i64 %225
  %229 = bitcast i8* %228 to i64*
  %230 = load i64, i64* %229, align 8
  %231 = icmp eq i64 %227, %230
  br i1 %231, label %232, label %237, !prof !34

232:                                              ; preds = %222
  %233 = getelementptr inbounds i8, i8* %224, i64 8
  %234 = add nuw i64 %225, 8
  %235 = add nsw i64 %223, -1
  %236 = icmp eq i64 %235, 0
  br i1 %236, label %242, label %222, !prof !34

237:                                              ; preds = %222
  %238 = xor i64 %230, %227
  %239 = call i64 @llvm.cttz.i64(i64 %238, i1 true) #6, !range !36
  %240 = lshr i64 %239, 3
  %241 = or i64 %240, %225
  br label %255

242:                                              ; preds = %232, %215
  %243 = phi i64 [ 0, %215 ], [ %234, %232 ]
  %244 = phi i8* [ %217, %215 ], [ %233, %232 ]
  %245 = and i64 %219, 7
  %246 = icmp eq i64 %245, 0
  br i1 %246, label %255, label %247

247:                                              ; preds = %242
  %248 = getelementptr inbounds i8, i8* %216, i64 %243
  %249 = load i8, i8* %248, align 1
  %250 = load i8, i8* %244, align 1
  %251 = icmp eq i8 %249, %250
  br i1 %251, label %252, label %255, !prof !33

252:                                              ; preds = %247
  %253 = add i64 %243, 1
  %254 = icmp eq i64 %245, 1
  br i1 %254, label %255, label %1107

255:                                              ; preds = %1152, %252, %247, %1107, %1113, %1116, %1122, %1125, %1131, %1134, %1140, %1143, %1149, %242, %237
  %256 = phi i64 [ %241, %237 ], [ %243, %242 ], [ %253, %252 ], [ %243, %247 ], [ %253, %1107 ], [ %1114, %1113 ], [ %1114, %1116 ], [ %1123, %1122 ], [ %1123, %1125 ], [ %1132, %1131 ], [ %1132, %1134 ], [ %1141, %1140 ], [ %1141, %1143 ], [ %1150, %1149 ], [ %1159, %1152 ]
  %257 = add i64 %256, 4
  %258 = trunc i64 %213 to i32
  %259 = ptrtoint i8* %160 to i64
  %260 = sub i64 %210, %259
  %261 = trunc i64 %260 to i32
  %262 = getelementptr inbounds i8, i8* %171, i64 %257
  %263 = icmp ult i32 %261, 6
  br i1 %263, label %264, label %266

264:                                              ; preds = %255
  %265 = inttoptr i64 %158 to i32*
  store i32 %261, i32* %265, align 4
  br label %311

266:                                              ; preds = %255
  %267 = icmp ult i32 %261, 130
  br i1 %267, label %268, label %281

268:                                              ; preds = %266
  %269 = add nsw i32 %261, -2
  %270 = call i32 @llvm.ctlz.i32(i32 %269, i1 true) #6, !range !2
  %271 = sub nsw i32 30, %270
  %272 = lshr i32 %269, %271
  %273 = shl nsw i32 %271, 1
  %274 = add nuw nsw i32 %272, 2
  %275 = add i32 %274, %273
  %276 = shl i32 %272, %271
  %277 = sub i32 %269, %276
  %278 = shl i32 %277, 8
  %279 = or i32 %278, %275
  %280 = inttoptr i64 %158 to i32*
  store i32 %279, i32* %280, align 4
  br label %311

281:                                              ; preds = %266
  %282 = icmp ult i32 %261, 2114
  br i1 %282, label %283, label %293

283:                                              ; preds = %281
  %284 = add nsw i32 %261, -66
  %285 = call i32 @llvm.ctlz.i32(i32 %284, i1 true) #6, !range !2
  %286 = xor i32 %285, 31
  %287 = add nuw nsw i32 %286, 10
  %288 = shl i32 1, %286
  %289 = sub i32 %284, %288
  %290 = shl i32 %289, 8
  %291 = or i32 %290, %287
  %292 = inttoptr i64 %158 to i32*
  store i32 %291, i32* %292, align 4
  br label %311

293:                                              ; preds = %281
  %294 = icmp ult i32 %261, 6210
  br i1 %294, label %295, label %300

295:                                              ; preds = %293
  %296 = shl i32 %261, 8
  %297 = add nsw i32 %296, -541184
  %298 = or i32 %297, 21
  %299 = inttoptr i64 %158 to i32*
  store i32 %298, i32* %299, align 4
  br label %311

300:                                              ; preds = %293
  %301 = icmp ult i32 %261, 22594
  %302 = shl i32 %261, 8
  br i1 %301, label %303, label %307

303:                                              ; preds = %300
  %304 = add i32 %302, -1589760
  %305 = or i32 %304, 22
  %306 = inttoptr i64 %158 to i32*
  store i32 %305, i32* %306, align 4
  br label %311

307:                                              ; preds = %300
  %308 = add i32 %302, -5784064
  %309 = or i32 %308, 23
  %310 = inttoptr i64 %158 to i32*
  store i32 %309, i32* %310, align 4
  br label %311

311:                                              ; preds = %307, %303, %295, %283, %268, %264
  %312 = phi i32* [ %310, %307 ], [ %306, %303 ], [ %299, %295 ], [ %292, %283 ], [ %280, %268 ], [ %265, %264 ]
  %313 = getelementptr inbounds i32, i32* %312, i64 1
  %314 = inttoptr i64 %159 to i8*
  %315 = shl i64 %260, 32
  %316 = ashr exact i64 %315, 32
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %314, i8* align 1 %160, i64 %316, i1 false) #6
  %317 = getelementptr inbounds i8, i8* %314, i64 %316
  %318 = ptrtoint i8* %317 to i64
  %319 = icmp eq i32 %161, %258
  br i1 %319, label %336, label %320

320:                                              ; preds = %311
  %321 = add i32 %258, 3
  %322 = call i32 @llvm.ctlz.i32(i32 %321, i1 true) #6, !range !2
  %323 = xor i32 %322, 31
  %324 = add nsw i32 %323, -1
  %325 = lshr i32 %321, %324
  %326 = and i32 %325, 1
  %327 = or i32 %326, 2
  %328 = shl i32 %327, %324
  %329 = shl nuw nsw i32 %323, 1
  %330 = add nsw i32 %329, -4
  %331 = or i32 %326, %330
  %332 = add nsw i32 %331, 80
  %333 = sub i32 %321, %328
  %334 = shl i32 %333, 8
  %335 = or i32 %334, %332
  br label %336

336:                                              ; preds = %320, %311
  %337 = phi i32 [ %335, %320 ], [ 64, %311 ]
  %338 = phi i32 [ %258, %320 ], [ %161, %311 ]
  store i32 %337, i32* %313, align 4
  %339 = getelementptr inbounds i32, i32* %312, i64 2
  %340 = icmp ult i64 %257, 12
  br i1 %340, label %341, label %344

341:                                              ; preds = %336
  %342 = trunc i64 %257 to i32
  %343 = add nuw nsw i32 %342, 20
  store i32 %343, i32* %339, align 4
  br label %393

344:                                              ; preds = %336
  %345 = icmp ult i64 %257, 72
  br i1 %345, label %346, label %361

346:                                              ; preds = %344
  %347 = add nsw i64 %256, -4
  %348 = trunc i64 %347 to i32
  %349 = call i32 @llvm.ctlz.i32(i32 %348, i1 true) #6, !range !2
  %350 = sub nsw i32 30, %349
  %351 = zext i32 %350 to i64
  %352 = lshr i64 %347, %351
  %353 = shl nuw nsw i64 %351, 1
  %354 = add nuw nsw i64 %352, 28
  %355 = add nuw nsw i64 %354, %353
  %356 = shl i64 %352, %351
  %357 = sub i64 %347, %356
  %358 = shl i64 %357, 8
  %359 = or i64 %358, %355
  %360 = trunc i64 %359 to i32
  store i32 %360, i32* %339, align 4
  br label %393

361:                                              ; preds = %344
  %362 = icmp ult i64 %257, 136
  br i1 %362, label %363, label %372

363:                                              ; preds = %361
  %364 = add nsw i64 %256, -4
  %365 = lshr i64 %364, 5
  %366 = add nuw nsw i64 %365, 54
  %367 = shl i64 %364, 8
  %368 = and i64 %367, 7936
  %369 = or i64 %366, %368
  %370 = trunc i64 %369 to i32
  store i32 %370, i32* %339, align 4
  %371 = getelementptr inbounds i32, i32* %312, i64 3
  store i32 64, i32* %371, align 4
  br label %393

372:                                              ; preds = %361
  %373 = icmp ult i64 %257, 2120
  br i1 %373, label %374, label %387

374:                                              ; preds = %372
  %375 = add nsw i64 %256, -68
  %376 = trunc i64 %375 to i32
  %377 = call i32 @llvm.ctlz.i32(i32 %376, i1 true) #6, !range !2
  %378 = xor i32 %377, 31
  %379 = zext i32 %378 to i64
  %380 = add nuw nsw i64 %379, 52
  %381 = shl i64 1, %379
  %382 = sub i64 %375, %381
  %383 = shl i64 %382, 8
  %384 = or i64 %383, %380
  %385 = trunc i64 %384 to i32
  store i32 %385, i32* %339, align 4
  %386 = getelementptr inbounds i32, i32* %312, i64 3
  store i32 64, i32* %386, align 4
  br label %393

387:                                              ; preds = %372
  %388 = trunc i64 %257 to i32
  %389 = shl i32 %388, 8
  %390 = add i32 %389, -542720
  %391 = or i32 %390, 63
  store i32 %391, i32* %339, align 4
  %392 = getelementptr inbounds i32, i32* %312, i64 3
  store i32 64, i32* %392, align 4
  br label %393

393:                                              ; preds = %387, %374, %363, %346, %341
  %394 = phi i64 [ 4, %387 ], [ 4, %374 ], [ 4, %363 ], [ 3, %346 ], [ 3, %341 ]
  %395 = getelementptr inbounds i32, i32* %312, i64 %394
  %396 = ptrtoint i32* %395 to i64
  %397 = icmp ult i8* %262, %155
  br i1 %397, label %398, label %592, !prof !33

398:                                              ; preds = %393
  %399 = getelementptr inbounds i8, i8* %262, i64 -3
  %400 = bitcast i8* %399 to i64*
  %401 = load i64, i64* %400, align 8
  %402 = lshr i64 %401, 24
  %403 = mul i64 %402, 2176830425094160384
  %404 = mul i64 %401, 2176830425094160384
  %405 = lshr i64 %404, 51
  %406 = ptrtoint i8* %262 to i64
  %407 = sub i64 %406, %22
  %408 = trunc i64 %407 to i32
  %409 = getelementptr inbounds i32, i32* %5, i64 %405
  %410 = lshr i64 %401, 8
  %411 = mul i64 %410, 2176830425094160384
  %412 = lshr i64 %411, 51
  %413 = add i32 %408, -2
  %414 = getelementptr inbounds i32, i32* %5, i64 %412
  store i32 %413, i32* %414, align 4
  %415 = add i32 %408, -1
  store i32 %415, i32* %409, align 4
  %416 = lshr i64 %403, 51
  %417 = getelementptr inbounds i32, i32* %5, i64 %416
  %418 = load i32, i32* %417, align 4
  store i32 %408, i32* %417, align 4
  %419 = sext i32 %418 to i64
  %420 = getelementptr inbounds i8, i8* %1, i64 %419
  %421 = ptrtoint i8* %420 to i64
  %422 = sub i64 %406, %421
  %423 = icmp slt i64 %422, 262129
  br i1 %423, label %424, label %585

424:                                              ; preds = %398
  %425 = bitcast i8* %262 to i32*
  %426 = load i32, i32* %425, align 4
  %427 = bitcast i8* %420 to i32*
  %428 = load i32, i32* %427, align 4
  %429 = icmp eq i32 %426, %428
  br i1 %429, label %436, label %585

430:                                              ; preds = %551
  %431 = bitcast i8* %484 to i32*
  %432 = load i32, i32* %431, align 4
  %433 = bitcast i8* %578 to i32*
  %434 = load i32, i32* %433, align 4
  %435 = icmp eq i32 %432, %434
  br i1 %435, label %436, label %582

436:                                              ; preds = %424, %430
  %437 = phi i8* [ %484, %430 ], [ %262, %424 ]
  %438 = phi i64 [ %577, %430 ], [ %419, %424 ]
  %439 = phi i64 [ %559, %430 ], [ %406, %424 ]
  %440 = phi i64 [ %580, %430 ], [ %422, %424 ]
  %441 = phi i64 [ %549, %430 ], [ %396, %424 ]
  %442 = getelementptr inbounds i8, i8* %141, i64 %438
  %443 = getelementptr inbounds i8, i8* %437, i64 4
  %444 = sub i64 %156, %439
  %445 = add i64 %444, -4
  %446 = lshr i64 %445, 3
  %447 = icmp eq i64 %446, 0
  br i1 %447, label %468, label %448, !prof !34

448:                                              ; preds = %436, %458
  %449 = phi i64 [ %461, %458 ], [ %446, %436 ]
  %450 = phi i8* [ %459, %458 ], [ %443, %436 ]
  %451 = phi i64 [ %460, %458 ], [ 0, %436 ]
  %452 = bitcast i8* %450 to i64*
  %453 = load i64, i64* %452, align 8
  %454 = getelementptr inbounds i8, i8* %442, i64 %451
  %455 = bitcast i8* %454 to i64*
  %456 = load i64, i64* %455, align 8
  %457 = icmp eq i64 %453, %456
  br i1 %457, label %458, label %463, !prof !34

458:                                              ; preds = %448
  %459 = getelementptr inbounds i8, i8* %450, i64 8
  %460 = add nuw i64 %451, 8
  %461 = add nsw i64 %449, -1
  %462 = icmp eq i64 %461, 0
  br i1 %462, label %468, label %448, !prof !34

463:                                              ; preds = %448
  %464 = xor i64 %456, %453
  %465 = call i64 @llvm.cttz.i64(i64 %464, i1 true) #6, !range !36
  %466 = lshr i64 %465, 3
  %467 = or i64 %466, %451
  br label %481

468:                                              ; preds = %458, %436
  %469 = phi i64 [ 0, %436 ], [ %460, %458 ]
  %470 = phi i8* [ %443, %436 ], [ %459, %458 ]
  %471 = and i64 %445, 7
  %472 = icmp eq i64 %471, 0
  br i1 %472, label %481, label %473

473:                                              ; preds = %468
  %474 = getelementptr inbounds i8, i8* %442, i64 %469
  %475 = load i8, i8* %474, align 1
  %476 = load i8, i8* %470, align 1
  %477 = icmp eq i8 %475, %476
  br i1 %477, label %478, label %481, !prof !33

478:                                              ; preds = %473
  %479 = add i64 %469, 1
  %480 = icmp eq i64 %471, 1
  br i1 %480, label %481, label %1160

481:                                              ; preds = %1205, %478, %473, %1160, %1166, %1169, %1175, %1178, %1184, %1187, %1193, %1196, %1202, %468, %463
  %482 = phi i64 [ %467, %463 ], [ %469, %468 ], [ %479, %478 ], [ %469, %473 ], [ %479, %1160 ], [ %1167, %1166 ], [ %1167, %1169 ], [ %1176, %1175 ], [ %1176, %1178 ], [ %1185, %1184 ], [ %1185, %1187 ], [ %1194, %1193 ], [ %1194, %1196 ], [ %1203, %1202 ], [ %1212, %1205 ]
  %483 = add i64 %482, 4
  %484 = getelementptr inbounds i8, i8* %437, i64 %483
  %485 = trunc i64 %440 to i32
  %486 = icmp ult i64 %483, 10
  br i1 %486, label %487, label %491

487:                                              ; preds = %481
  %488 = trunc i64 %483 to i32
  %489 = add nuw nsw i32 %488, 38
  %490 = inttoptr i64 %441 to i32*
  store i32 %489, i32* %490, align 4
  br label %530

491:                                              ; preds = %481
  %492 = icmp ult i64 %483, 134
  br i1 %492, label %493, label %509

493:                                              ; preds = %491
  %494 = add nsw i64 %482, -2
  %495 = trunc i64 %494 to i32
  %496 = call i32 @llvm.ctlz.i32(i32 %495, i1 true) #6, !range !2
  %497 = sub nsw i32 30, %496
  %498 = zext i32 %497 to i64
  %499 = lshr i64 %494, %498
  %500 = shl nuw nsw i64 %498, 1
  %501 = add nuw nsw i64 %499, 44
  %502 = add nuw nsw i64 %501, %500
  %503 = shl i64 %499, %498
  %504 = sub i64 %494, %503
  %505 = shl i64 %504, 8
  %506 = or i64 %505, %502
  %507 = trunc i64 %506 to i32
  %508 = inttoptr i64 %441 to i32*
  store i32 %507, i32* %508, align 4
  br label %530

509:                                              ; preds = %491
  %510 = icmp ult i64 %483, 2118
  br i1 %510, label %511, label %524

511:                                              ; preds = %509
  %512 = add nsw i64 %482, -66
  %513 = trunc i64 %512 to i32
  %514 = call i32 @llvm.ctlz.i32(i32 %513, i1 true) #6, !range !2
  %515 = xor i32 %514, 31
  %516 = zext i32 %515 to i64
  %517 = add nuw nsw i64 %516, 52
  %518 = shl i64 1, %516
  %519 = sub i64 %512, %518
  %520 = shl i64 %519, 8
  %521 = or i64 %520, %517
  %522 = trunc i64 %521 to i32
  %523 = inttoptr i64 %441 to i32*
  store i32 %522, i32* %523, align 4
  br label %530

524:                                              ; preds = %509
  %525 = trunc i64 %483 to i32
  %526 = shl i32 %525, 8
  %527 = add i32 %526, -542208
  %528 = or i32 %527, 63
  %529 = inttoptr i64 %441 to i32*
  store i32 %528, i32* %529, align 4
  br label %530

530:                                              ; preds = %524, %511, %493, %487
  %531 = phi i32* [ %529, %524 ], [ %523, %511 ], [ %508, %493 ], [ %490, %487 ]
  %532 = getelementptr inbounds i32, i32* %531, i64 1
  %533 = add i32 %485, 3
  %534 = call i32 @llvm.ctlz.i32(i32 %533, i1 true) #6, !range !2
  %535 = xor i32 %534, 31
  %536 = add nsw i32 %535, -1
  %537 = lshr i32 %533, %536
  %538 = and i32 %537, 1
  %539 = or i32 %538, 2
  %540 = shl i32 %539, %536
  %541 = shl nuw nsw i32 %535, 1
  %542 = add nsw i32 %541, -4
  %543 = or i32 %538, %542
  %544 = add nsw i32 %543, 80
  %545 = sub i32 %533, %540
  %546 = shl i32 %545, 8
  %547 = or i32 %546, %544
  store i32 %547, i32* %532, align 4
  %548 = getelementptr inbounds i32, i32* %531, i64 2
  %549 = ptrtoint i32* %548 to i64
  %550 = icmp ult i8* %484, %155
  br i1 %550, label %551, label %589, !prof !33

551:                                              ; preds = %530
  %552 = getelementptr inbounds i8, i8* %484, i64 -3
  %553 = bitcast i8* %552 to i64*
  %554 = load i64, i64* %553, align 8
  %555 = lshr i64 %554, 24
  %556 = mul i64 %555, 2176830425094160384
  %557 = mul i64 %554, 2176830425094160384
  %558 = lshr i64 %557, 51
  %559 = ptrtoint i8* %484 to i64
  %560 = sub i64 %559, %22
  %561 = trunc i64 %560 to i32
  %562 = add i32 %561, -3
  %563 = getelementptr inbounds i32, i32* %5, i64 %558
  store i32 %562, i32* %563, align 4
  %564 = lshr i64 %554, 8
  %565 = mul i64 %564, 2176830425094160384
  %566 = lshr i64 %565, 51
  %567 = add i32 %561, -2
  %568 = getelementptr inbounds i32, i32* %5, i64 %566
  store i32 %567, i32* %568, align 4
  %569 = lshr i64 %554, 16
  %570 = mul i64 %569, 2176830425094160384
  %571 = lshr i64 %570, 51
  %572 = add i32 %561, -1
  %573 = getelementptr inbounds i32, i32* %5, i64 %571
  store i32 %572, i32* %573, align 4
  %574 = lshr i64 %556, 51
  %575 = getelementptr inbounds i32, i32* %5, i64 %574
  %576 = load i32, i32* %575, align 4
  store i32 %561, i32* %575, align 4
  %577 = sext i32 %576 to i64
  %578 = getelementptr inbounds i8, i8* %1, i64 %577
  %579 = ptrtoint i8* %578 to i64
  %580 = sub i64 %559, %579
  %581 = icmp slt i64 %580, 262129
  br i1 %581, label %430, label %582

582:                                              ; preds = %551, %430
  %583 = trunc i64 %440 to i32
  %584 = ptrtoint i32* %548 to i64
  br label %585

585:                                              ; preds = %582, %424, %398
  %586 = phi i64 [ %396, %398 ], [ %396, %424 ], [ %584, %582 ]
  %587 = phi i8* [ %262, %398 ], [ %262, %424 ], [ %484, %582 ]
  %588 = phi i32 [ %338, %398 ], [ %338, %424 ], [ %583, %582 ]
  br label %157

589:                                              ; preds = %530
  %590 = ptrtoint i8* %317 to i64
  %591 = ptrtoint i32* %548 to i64
  br label %595

592:                                              ; preds = %393
  %593 = ptrtoint i8* %317 to i64
  %594 = ptrtoint i32* %395 to i64
  br label %595

595:                                              ; preds = %168, %592, %589, %143
  %596 = phi i64 [ %20, %143 ], [ %591, %589 ], [ %594, %592 ], [ %158, %168 ]
  %597 = phi i64 [ %21, %143 ], [ %590, %589 ], [ %593, %592 ], [ %159, %168 ]
  %598 = phi i8* [ %144, %143 ], [ %484, %589 ], [ %262, %592 ], [ %160, %168 ]
  %599 = icmp ult i8* %598, %148
  br i1 %599, label %600, label %661

600:                                              ; preds = %595
  %601 = ptrtoint i8* %148 to i64
  %602 = ptrtoint i8* %598 to i64
  %603 = sub i64 %601, %602
  %604 = trunc i64 %603 to i32
  %605 = icmp ult i32 %604, 6
  br i1 %605, label %606, label %608

606:                                              ; preds = %600
  %607 = inttoptr i64 %596 to i32*
  store i32 %604, i32* %607, align 4
  br label %653

608:                                              ; preds = %600
  %609 = icmp ult i32 %604, 130
  br i1 %609, label %610, label %623

610:                                              ; preds = %608
  %611 = add nsw i32 %604, -2
  %612 = call i32 @llvm.ctlz.i32(i32 %611, i1 true) #6, !range !2
  %613 = sub nsw i32 30, %612
  %614 = lshr i32 %611, %613
  %615 = shl nsw i32 %613, 1
  %616 = add nuw nsw i32 %614, 2
  %617 = add i32 %616, %615
  %618 = shl i32 %614, %613
  %619 = sub i32 %611, %618
  %620 = shl i32 %619, 8
  %621 = or i32 %620, %617
  %622 = inttoptr i64 %596 to i32*
  store i32 %621, i32* %622, align 4
  br label %653

623:                                              ; preds = %608
  %624 = icmp ult i32 %604, 2114
  br i1 %624, label %625, label %635

625:                                              ; preds = %623
  %626 = add nsw i32 %604, -66
  %627 = call i32 @llvm.ctlz.i32(i32 %626, i1 true) #6, !range !2
  %628 = xor i32 %627, 31
  %629 = add nuw nsw i32 %628, 10
  %630 = shl i32 1, %628
  %631 = sub i32 %626, %630
  %632 = shl i32 %631, 8
  %633 = or i32 %632, %629
  %634 = inttoptr i64 %596 to i32*
  store i32 %633, i32* %634, align 4
  br label %653

635:                                              ; preds = %623
  %636 = icmp ult i32 %604, 6210
  br i1 %636, label %637, label %642

637:                                              ; preds = %635
  %638 = shl i32 %604, 8
  %639 = add nsw i32 %638, -541184
  %640 = or i32 %639, 21
  %641 = inttoptr i64 %596 to i32*
  store i32 %640, i32* %641, align 4
  br label %653

642:                                              ; preds = %635
  %643 = icmp ult i32 %604, 22594
  %644 = shl i32 %604, 8
  br i1 %643, label %645, label %649

645:                                              ; preds = %642
  %646 = add i32 %644, -1589760
  %647 = or i32 %646, 22
  %648 = inttoptr i64 %596 to i32*
  store i32 %647, i32* %648, align 4
  br label %653

649:                                              ; preds = %642
  %650 = add i32 %644, -5784064
  %651 = or i32 %650, 23
  %652 = inttoptr i64 %596 to i32*
  store i32 %651, i32* %652, align 4
  br label %653

653:                                              ; preds = %649, %645, %637, %625, %610, %606
  %654 = phi i32* [ %652, %649 ], [ %648, %645 ], [ %641, %637 ], [ %634, %625 ], [ %622, %610 ], [ %607, %606 ]
  %655 = getelementptr inbounds i32, i32* %654, i64 1
  %656 = ptrtoint i32* %655 to i64
  %657 = inttoptr i64 %597 to i8*
  %658 = and i64 %603, 4294967295
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %657, i8* align 1 %598, i64 %658, i1 false) #6
  %659 = getelementptr inbounds i8, i8* %657, i64 %658
  %660 = ptrtoint i8* %659 to i64
  br label %661

661:                                              ; preds = %653, %595
  %662 = phi i64 [ %656, %653 ], [ %596, %595 ]
  %663 = phi i64 [ %660, %653 ], [ %597, %595 ]
  %664 = sub i64 %663, %21
  %665 = uitofp i64 %147 to double
  %666 = uitofp i64 %664 to double
  %667 = fmul double %665, 0x3FEF5C28F5C28F5C
  %668 = fcmp ogt double %667, %666
  br i1 %668, label %743, label %669

669:                                              ; preds = %661
  call void @llvm.lifetime.start.p0i8(i64 1024, i8* nonnull %23) #6
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %23, i8 0, i64 1024, i1 false) #6
  %670 = fmul double %665, 8.000000e+00
  %671 = fmul double %670, 0x3FEF5C28F5C28F5C
  %672 = fdiv double %671, 4.300000e+01
  %673 = icmp eq i64 %147, 0
  br i1 %673, label %684, label %674

674:                                              ; preds = %669, %674
  %675 = phi i64 [ %682, %674 ], [ 0, %669 ]
  %676 = getelementptr inbounds i8, i8* %144, i64 %675
  %677 = load i8, i8* %676, align 1
  %678 = zext i8 %677 to i64
  %679 = getelementptr inbounds [256 x i32], [256 x i32]* %14, i64 0, i64 %678
  %680 = load i32, i32* %679, align 4
  %681 = add i32 %680, 1
  store i32 %681, i32* %679, align 4
  %682 = add i64 %675, 43
  %683 = icmp ult i64 %682, %147
  br i1 %683, label %674, label %684

684:                                              ; preds = %674, %669
  br label %685

685:                                              ; preds = %684, %719
  %686 = phi double [ %722, %719 ], [ 0.000000e+00, %684 ]
  %687 = phi i64 [ %711, %719 ], [ 0, %684 ]
  %688 = phi i64 [ %708, %719 ], [ 0, %684 ]
  %689 = getelementptr inbounds [256 x i32], [256 x i32]* %14, i64 0, i64 %688
  %690 = load i32, i32* %689, align 8
  %691 = zext i32 %690 to i64
  %692 = icmp ult i32 %690, 256
  br i1 %692, label %693, label %697

693:                                              ; preds = %685
  %694 = getelementptr inbounds [256 x double], [256 x double]* @kBrotliLog2Table, i64 0, i64 %691
  %695 = load double, double* %694, align 8
  %696 = uitofp i32 %690 to double
  br label %700

697:                                              ; preds = %685
  %698 = uitofp i32 %690 to double
  %699 = call double @log2(double %698) #6
  br label %700

700:                                              ; preds = %697, %693
  %701 = phi double [ %696, %693 ], [ %698, %697 ]
  %702 = phi double [ %695, %693 ], [ %699, %697 ]
  %703 = or i64 %688, 1
  %704 = getelementptr inbounds [256 x i32], [256 x i32]* %14, i64 0, i64 %703
  %705 = fmul double %701, %702
  %706 = fsub double %686, %705
  %707 = add i64 %687, %691
  %708 = add nuw nsw i64 %688, 2
  %709 = load i32, i32* %704, align 4
  %710 = zext i32 %709 to i64
  %711 = add i64 %707, %710
  %712 = uitofp i32 %709 to double
  %713 = icmp ult i32 %709, 256
  br i1 %713, label %714, label %717

714:                                              ; preds = %700
  %715 = getelementptr inbounds [256 x double], [256 x double]* @kBrotliLog2Table, i64 0, i64 %710
  %716 = load double, double* %715, align 8
  br label %719

717:                                              ; preds = %700
  %718 = call double @log2(double %712) #6
  br label %719

719:                                              ; preds = %717, %714
  %720 = phi double [ %716, %714 ], [ %718, %717 ]
  %721 = fmul double %720, %712
  %722 = fsub double %706, %721
  %723 = icmp ult i64 %708, 256
  br i1 %723, label %685, label %724

724:                                              ; preds = %719
  %725 = icmp eq i64 %711, 0
  %726 = uitofp i64 %711 to double
  br i1 %725, label %738, label %727

727:                                              ; preds = %724
  %728 = icmp ult i64 %711, 256
  br i1 %728, label %729, label %732

729:                                              ; preds = %727
  %730 = getelementptr inbounds [256 x double], [256 x double]* @kBrotliLog2Table, i64 0, i64 %711
  %731 = load double, double* %730, align 8
  br label %734

732:                                              ; preds = %727
  %733 = call double @log2(double %726) #6
  br label %734

734:                                              ; preds = %732, %729
  %735 = phi double [ %731, %729 ], [ %733, %732 ]
  %736 = fmul double %735, %726
  %737 = fadd double %722, %736
  br label %738

738:                                              ; preds = %734, %724
  %739 = phi double [ %737, %734 ], [ %722, %724 ]
  %740 = fcmp olt double %739, %726
  %741 = select i1 %740, double %726, double %739
  %742 = fcmp uge double %741, %672
  call void @llvm.lifetime.end.p0i8(i64 1024, i8* nonnull %23) #6
  br i1 %742, label %1055, label %743

743:                                              ; preds = %738, %661
  %744 = sub i64 %662, %20
  %745 = ashr exact i64 %744, 2
  %746 = load i64, i64* %6, align 8, !alias.scope !343, !noalias !346
  %747 = lshr i64 %746, 3
  %748 = getelementptr inbounds i8, i8* %7, i64 %747
  %749 = load i8, i8* %748, align 1, !alias.scope !346, !noalias !343
  %750 = zext i8 %749 to i64
  %751 = bitcast i8* %748 to i64*
  store i64 %750, i64* %751, align 8, !alias.scope !346, !noalias !343
  %752 = add i64 %746, 1
  %753 = icmp ult i64 %147, 65537
  %754 = select i1 %753, i64 4, i64 5
  %755 = add nsw i64 %754, -4
  %756 = lshr i64 %752, 3
  %757 = getelementptr inbounds i8, i8* %7, i64 %756
  %758 = load i8, i8* %757, align 1, !alias.scope !348, !noalias !351
  %759 = zext i8 %758 to i64
  %760 = and i64 %752, 7
  %761 = shl i64 %755, %760
  %762 = or i64 %761, %759
  %763 = bitcast i8* %757 to i64*
  store i64 %762, i64* %763, align 8, !alias.scope !348, !noalias !351
  %764 = add i64 %746, 3
  %765 = shl nuw nsw i64 %754, 2
  %766 = add nsw i64 %147, -1
  %767 = lshr i64 %764, 3
  %768 = getelementptr inbounds i8, i8* %7, i64 %767
  %769 = load i8, i8* %768, align 1, !alias.scope !353, !noalias !356
  %770 = zext i8 %769 to i64
  %771 = and i64 %764, 7
  %772 = shl i64 %766, %771
  %773 = or i64 %772, %770
  %774 = bitcast i8* %768 to i64*
  store i64 %773, i64* %774, align 8, !alias.scope !353, !noalias !356
  %775 = add i64 %764, %765
  %776 = lshr i64 %775, 3
  %777 = getelementptr inbounds i8, i8* %7, i64 %776
  %778 = load i8, i8* %777, align 1, !alias.scope !358, !noalias !361
  %779 = zext i8 %778 to i64
  %780 = bitcast i8* %777 to i64*
  store i64 %779, i64* %780, align 8, !alias.scope !358, !noalias !361
  %781 = add i64 %775, 1
  %782 = lshr i64 %781, 3
  %783 = getelementptr inbounds i8, i8* %7, i64 %782
  %784 = load i8, i8* %783, align 1, !alias.scope !363, !noalias !366
  %785 = zext i8 %784 to i64
  %786 = bitcast i8* %783 to i64*
  store i64 %785, i64* %786, align 8, !alias.scope !363, !noalias !366
  %787 = add i64 %775, 14
  store i64 %787, i64* %6, align 8, !alias.scope !366, !noalias !363
  call void @llvm.lifetime.start.p0i8(i64 256, i8* nonnull %24) #6
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %24, i8 -86, i64 256, i1 false) #6
  call void @llvm.lifetime.start.p0i8(i64 512, i8* nonnull %25) #6
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %25, i8 -86, i64 512, i1 false) #6
  call void @llvm.lifetime.start.p0i8(i64 1024, i8* nonnull %23) #6
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %23, i8 0, i64 1024, i1 false) #6
  call void @llvm.lifetime.start.p0i8(i64 128, i8* nonnull %26) #6
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %26, i8 0, i64 128, i1 false) #6
  call void @llvm.lifetime.start.p0i8(i64 256, i8* nonnull %27) #6
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %27, i8 0, i64 256, i1 false) #6
  call void @llvm.lifetime.start.p0i8(i64 512, i8* nonnull %28) #6
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %28, i8 0, i64 512, i1 false) #6
  %788 = icmp eq i64 %664, 0
  br i1 %788, label %843, label %789

789:                                              ; preds = %743
  %790 = add i64 %663, %142
  %791 = and i64 %664, 3
  %792 = icmp ult i64 %790, 3
  br i1 %792, label %828, label %793

793:                                              ; preds = %789
  %794 = sub i64 %664, %791
  br label %795

795:                                              ; preds = %795, %793
  %796 = phi i64 [ 0, %793 ], [ %825, %795 ]
  %797 = phi i64 [ %794, %793 ], [ %826, %795 ]
  %798 = getelementptr inbounds i8, i8* %4, i64 %796
  %799 = load i8, i8* %798, align 1
  %800 = zext i8 %799 to i64
  %801 = getelementptr inbounds [256 x i32], [256 x i32]* %14, i64 0, i64 %800
  %802 = load i32, i32* %801, align 4
  %803 = add i32 %802, 1
  store i32 %803, i32* %801, align 4
  %804 = or i64 %796, 1
  %805 = getelementptr inbounds i8, i8* %4, i64 %804
  %806 = load i8, i8* %805, align 1
  %807 = zext i8 %806 to i64
  %808 = getelementptr inbounds [256 x i32], [256 x i32]* %14, i64 0, i64 %807
  %809 = load i32, i32* %808, align 4
  %810 = add i32 %809, 1
  store i32 %810, i32* %808, align 4
  %811 = or i64 %796, 2
  %812 = getelementptr inbounds i8, i8* %4, i64 %811
  %813 = load i8, i8* %812, align 1
  %814 = zext i8 %813 to i64
  %815 = getelementptr inbounds [256 x i32], [256 x i32]* %14, i64 0, i64 %814
  %816 = load i32, i32* %815, align 4
  %817 = add i32 %816, 1
  store i32 %817, i32* %815, align 4
  %818 = or i64 %796, 3
  %819 = getelementptr inbounds i8, i8* %4, i64 %818
  %820 = load i8, i8* %819, align 1
  %821 = zext i8 %820 to i64
  %822 = getelementptr inbounds [256 x i32], [256 x i32]* %14, i64 0, i64 %821
  %823 = load i32, i32* %822, align 4
  %824 = add i32 %823, 1
  store i32 %824, i32* %822, align 4
  %825 = add nuw i64 %796, 4
  %826 = add i64 %797, -4
  %827 = icmp eq i64 %826, 0
  br i1 %827, label %828, label %795

828:                                              ; preds = %795, %789
  %829 = phi i64 [ 0, %789 ], [ %825, %795 ]
  %830 = icmp eq i64 %791, 0
  br i1 %830, label %843, label %831

831:                                              ; preds = %828, %831
  %832 = phi i64 [ %840, %831 ], [ %829, %828 ]
  %833 = phi i64 [ %841, %831 ], [ %791, %828 ]
  %834 = getelementptr inbounds i8, i8* %4, i64 %832
  %835 = load i8, i8* %834, align 1
  %836 = zext i8 %835 to i64
  %837 = getelementptr inbounds [256 x i32], [256 x i32]* %14, i64 0, i64 %836
  %838 = load i32, i32* %837, align 4
  %839 = add i32 %838, 1
  store i32 %839, i32* %837, align 4
  %840 = add nuw i64 %832, 1
  %841 = add i64 %833, -1
  %842 = icmp eq i64 %841, 0
  br i1 %842, label %843, label %831, !llvm.loop !368

843:                                              ; preds = %828, %831, %743
  call void @BrotliBuildAndStoreHuffmanTreeFast(%struct.MemoryManager* %0, i32* nonnull %29, i64 %664, i64 8, i8* nonnull %24, i16* nonnull %30, i64* %6, i8* %7) #6
  %844 = icmp eq i64 %744, 0
  br i1 %844, label %891, label %845

845:                                              ; preds = %843
  %846 = and i64 %745, 1
  %847 = icmp eq i64 %744, 4
  br i1 %847, label %871, label %848

848:                                              ; preds = %845
  %849 = sub nsw i64 %745, %846
  br label %850

850:                                              ; preds = %850, %848
  %851 = phi i64 [ 0, %848 ], [ %868, %850 ]
  %852 = phi i64 [ %849, %848 ], [ %869, %850 ]
  %853 = getelementptr inbounds i32, i32* %3, i64 %851
  %854 = load i32, i32* %853, align 4
  %855 = and i32 %854, 255
  %856 = zext i32 %855 to i64
  %857 = getelementptr inbounds [128 x i32], [128 x i32]* %17, i64 0, i64 %856
  %858 = load i32, i32* %857, align 4
  %859 = add i32 %858, 1
  store i32 %859, i32* %857, align 4
  %860 = or i64 %851, 1
  %861 = getelementptr inbounds i32, i32* %3, i64 %860
  %862 = load i32, i32* %861, align 4
  %863 = and i32 %862, 255
  %864 = zext i32 %863 to i64
  %865 = getelementptr inbounds [128 x i32], [128 x i32]* %17, i64 0, i64 %864
  %866 = load i32, i32* %865, align 4
  %867 = add i32 %866, 1
  store i32 %867, i32* %865, align 4
  %868 = add nuw i64 %851, 2
  %869 = add i64 %852, -2
  %870 = icmp eq i64 %869, 0
  br i1 %870, label %871, label %850

871:                                              ; preds = %850, %845
  %872 = phi i64 [ 0, %845 ], [ %868, %850 ]
  %873 = icmp eq i64 %846, 0
  br i1 %873, label %882, label %874

874:                                              ; preds = %871
  %875 = getelementptr inbounds i32, i32* %3, i64 %872
  %876 = load i32, i32* %875, align 4
  %877 = and i32 %876, 255
  %878 = zext i32 %877 to i64
  %879 = getelementptr inbounds [128 x i32], [128 x i32]* %17, i64 0, i64 %878
  %880 = load i32, i32* %879, align 4
  %881 = add i32 %880, 1
  store i32 %881, i32* %879, align 4
  br label %882

882:                                              ; preds = %871, %874
  %883 = load i32, i32* %31, align 4
  %884 = load i32, i32* %32, align 8
  %885 = load i32, i32* %33, align 16
  %886 = load i32, i32* %34, align 16
  %887 = add i32 %883, 1
  %888 = add i32 %884, 1
  %889 = add i32 %885, 1
  %890 = add i32 %886, 1
  br label %891

891:                                              ; preds = %882, %843
  %892 = phi i32 [ %890, %882 ], [ 1, %843 ]
  %893 = phi i32 [ %889, %882 ], [ 1, %843 ]
  %894 = phi i32 [ %888, %882 ], [ 1, %843 ]
  %895 = phi i32 [ %887, %882 ], [ 1, %843 ]
  store i32 %895, i32* %31, align 4
  store i32 %894, i32* %32, align 8
  store i32 %893, i32* %33, align 16
  store i32 %892, i32* %34, align 16
  call void @llvm.lifetime.start.p0i8(i64 1032, i8* nonnull %36) #6
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %36, i8 -86, i64 1032, i1 false) #6
  call void @llvm.lifetime.start.p0i8(i64 704, i8* nonnull %37) #6
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %37, i8 0, i64 704, i1 false) #6
  call void @llvm.lifetime.start.p0i8(i64 128, i8* nonnull %38) #6
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %38, i8 -86, i64 128, i1 false) #6
  call void @BrotliCreateHuffmanTree(i32* nonnull %35, i64 64, i32 15, %struct.HuffmanTree* nonnull %39, i8* nonnull %26) #6
  call void @BrotliCreateHuffmanTree(i32* %33, i64 64, i32 14, %struct.HuffmanTree* nonnull %39, i8* %40) #6
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 16 %37, i8* align 8 %41, i64 24, i1 false) #6
  %896 = load i64, i64* %43, align 16
  store i64 %896, i64* %44, align 8
  %897 = load i64, i64* %47, align 16
  store i64 %897, i64* %48, align 16
  %898 = load i64, i64* %51, align 8
  store i64 %898, i64* %52, align 8
  %899 = load i64, i64* %55, align 8
  store i64 %899, i64* %56, align 16
  %900 = load i64, i64* %59, align 16
  store i64 %900, i64* %60, align 8
  call void @BrotliConvertBitDepthsToSymbols(i8* nonnull %37, i64 64, i16* nonnull %61) #6
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 16 %27, i8* align 16 %63, i64 16, i1 false) #6
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 16 %65, i8* align 16 %67, i64 16, i1 false) #6
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 16 %69, i8* align 16 %71, i64 16, i1 false) #6
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 16 %73, i8* nonnull align 16 %38, i64 48, i1 false) #6
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 16 %75, i8* align 16 %77, i64 16, i1 false) #6
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 16 %79, i8* align 16 %81, i64 16, i1 false) #6
  call void @BrotliConvertBitDepthsToSymbols(i8* %40, i64 64, i16* %82) #6
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %37, i8 0, i64 64, i1 false) #6
  %901 = load i64, i64* %83, align 8
  store i64 %901, i64* %84, align 16
  %902 = load i64, i64* %87, align 16
  store i64 %902, i64* %88, align 16
  %903 = load i64, i64* %91, align 8
  store i64 %903, i64* %92, align 16
  %904 = load i64, i64* %47, align 16
  store i64 %904, i64* %94, align 16
  %905 = load i64, i64* %55, align 8
  store i64 %905, i64* %96, align 16
  %906 = load i8, i8* %26, align 16
  store i8 %906, i8* %89, align 16
  %907 = load i8, i8* %50, align 8
  store i8 %907, i8* %97, align 16
  %908 = load i8, i8* %58, align 16
  store i8 %908, i8* %98, align 16
  %909 = load i8, i8* %99, align 1
  store i8 %909, i8* %100, align 8
  %910 = load i8, i8* %101, align 1
  store i8 %910, i8* %102, align 8
  %911 = load i8, i8* %103, align 1
  store i8 %911, i8* %104, align 8
  %912 = load i8, i8* %105, align 2
  store i8 %912, i8* %106, align 16
  %913 = load i8, i8* %107, align 2
  store i8 %913, i8* %108, align 16
  %914 = load i8, i8* %109, align 2
  store i8 %914, i8* %110, align 16
  %915 = load i8, i8* %111, align 1
  store i8 %915, i8* %112, align 8
  %916 = load i8, i8* %113, align 1
  store i8 %916, i8* %114, align 8
  %917 = load i8, i8* %115, align 1
  store i8 %917, i8* %116, align 8
  %918 = load i8, i8* %117, align 4
  store i8 %918, i8* %118, align 16
  %919 = load i8, i8* %119, align 4
  store i8 %919, i8* %120, align 16
  %920 = load i8, i8* %121, align 4
  store i8 %920, i8* %122, align 16
  %921 = load i8, i8* %123, align 1
  store i8 %921, i8* %124, align 8
  %922 = load i8, i8* %125, align 1
  store i8 %922, i8* %126, align 8
  %923 = load i8, i8* %127, align 1
  store i8 %923, i8* %128, align 8
  %924 = load i8, i8* %129, align 2
  store i8 %924, i8* %130, align 16
  %925 = load i8, i8* %131, align 2
  store i8 %925, i8* %132, align 16
  %926 = load i8, i8* %133, align 2
  store i8 %926, i8* %134, align 16
  %927 = load i8, i8* %135, align 1
  store i8 %927, i8* %136, align 8
  %928 = load i8, i8* %137, align 1
  store i8 %928, i8* %138, align 8
  %929 = load i8, i8* %139, align 1
  store i8 %929, i8* %140, align 8
  call void @BrotliStoreHuffmanTree(i8* nonnull %37, i64 704, %struct.HuffmanTree* nonnull %39, i64* %6, i8* %7) #6
  call void @BrotliStoreHuffmanTree(i8* %40, i64 64, %struct.HuffmanTree* nonnull %39, i64* %6, i8* %7) #6
  call void @llvm.lifetime.end.p0i8(i64 128, i8* nonnull %38) #6
  call void @llvm.lifetime.end.p0i8(i64 704, i8* nonnull %37) #6
  call void @llvm.lifetime.end.p0i8(i64 1032, i8* nonnull %36) #6
  br i1 %844, label %1054, label %930

930:                                              ; preds = %891
  %931 = load i64, i64* %6, align 8, !alias.scope !369, !noalias !372
  br label %932

932:                                              ; preds = %1049, %930
  %933 = phi i64 [ %1050, %1049 ], [ %931, %930 ]
  %934 = phi i8* [ %1051, %1049 ], [ %4, %930 ]
  %935 = phi i64 [ %1052, %1049 ], [ 0, %930 ]
  %936 = getelementptr inbounds i32, i32* %3, i64 %935
  %937 = load i32, i32* %936, align 4
  %938 = and i32 %937, 255
  %939 = lshr i32 %937, 8
  %940 = zext i32 %938 to i64
  %941 = getelementptr inbounds [128 x i8], [128 x i8]* %15, i64 0, i64 %940
  %942 = load i8, i8* %941, align 1
  %943 = zext i8 %942 to i64
  %944 = getelementptr inbounds [128 x i16], [128 x i16]* %16, i64 0, i64 %940
  %945 = load i16, i16* %944, align 2
  %946 = zext i16 %945 to i64
  %947 = lshr i64 %933, 3
  %948 = getelementptr inbounds i8, i8* %7, i64 %947
  %949 = load i8, i8* %948, align 1, !alias.scope !372, !noalias !369
  %950 = zext i8 %949 to i64
  %951 = and i64 %933, 7
  %952 = shl i64 %946, %951
  %953 = or i64 %952, %950
  %954 = bitcast i8* %948 to i64*
  store i64 %953, i64* %954, align 8, !alias.scope !372, !noalias !369
  %955 = add i64 %933, %943
  %956 = getelementptr inbounds [128 x i32], [128 x i32]* @StoreCommands.kNumExtraBits, i64 0, i64 %940
  %957 = load i32, i32* %956, align 4
  %958 = zext i32 %957 to i64
  %959 = zext i32 %939 to i64
  %960 = lshr i64 %955, 3
  %961 = getelementptr inbounds i8, i8* %7, i64 %960
  %962 = load i8, i8* %961, align 1, !alias.scope !374, !noalias !377
  %963 = zext i8 %962 to i64
  %964 = and i64 %955, 7
  %965 = shl i64 %959, %964
  %966 = or i64 %965, %963
  %967 = bitcast i8* %961 to i64*
  store i64 %966, i64* %967, align 8, !alias.scope !374, !noalias !377
  %968 = add i64 %955, %958
  store i64 %968, i64* %6, align 8, !alias.scope !377, !noalias !374
  %969 = icmp ult i32 %938, 24
  br i1 %969, label %970, label %1049

970:                                              ; preds = %932
  %971 = getelementptr inbounds [24 x i32], [24 x i32]* @StoreCommands.kInsertOffset, i64 0, i64 %940
  %972 = load i32, i32* %971, align 4
  %973 = add i32 %972, %939
  %974 = icmp eq i32 %973, 0
  br i1 %974, label %1049, label %975

975:                                              ; preds = %970
  %976 = add i32 %972, -1
  %977 = and i32 %973, 1
  %978 = sub nsw i32 0, %939
  %979 = icmp eq i32 %976, %978
  br i1 %979, label %1024, label %980

980:                                              ; preds = %975
  %981 = sub i32 %973, %977
  br label %982

982:                                              ; preds = %982, %980
  %983 = phi i64 [ %968, %980 ], [ %1020, %982 ]
  %984 = phi i8* [ %934, %980 ], [ %1021, %982 ]
  %985 = phi i32 [ %981, %980 ], [ %1022, %982 ]
  %986 = load i8, i8* %984, align 1
  %987 = zext i8 %986 to i64
  %988 = getelementptr inbounds [256 x i8], [256 x i8]* %12, i64 0, i64 %987
  %989 = load i8, i8* %988, align 1
  %990 = zext i8 %989 to i64
  %991 = getelementptr inbounds [256 x i16], [256 x i16]* %13, i64 0, i64 %987
  %992 = load i16, i16* %991, align 2
  %993 = zext i16 %992 to i64
  %994 = lshr i64 %983, 3
  %995 = getelementptr inbounds i8, i8* %7, i64 %994
  %996 = load i8, i8* %995, align 1, !alias.scope !379, !noalias !382
  %997 = zext i8 %996 to i64
  %998 = and i64 %983, 7
  %999 = shl i64 %993, %998
  %1000 = or i64 %999, %997
  %1001 = bitcast i8* %995 to i64*
  store i64 %1000, i64* %1001, align 8, !alias.scope !379, !noalias !382
  %1002 = add i64 %983, %990
  store i64 %1002, i64* %6, align 8, !alias.scope !382, !noalias !379
  %1003 = getelementptr inbounds i8, i8* %984, i64 1
  %1004 = load i8, i8* %1003, align 1
  %1005 = zext i8 %1004 to i64
  %1006 = getelementptr inbounds [256 x i8], [256 x i8]* %12, i64 0, i64 %1005
  %1007 = load i8, i8* %1006, align 1
  %1008 = zext i8 %1007 to i64
  %1009 = getelementptr inbounds [256 x i16], [256 x i16]* %13, i64 0, i64 %1005
  %1010 = load i16, i16* %1009, align 2
  %1011 = zext i16 %1010 to i64
  %1012 = lshr i64 %1002, 3
  %1013 = getelementptr inbounds i8, i8* %7, i64 %1012
  %1014 = load i8, i8* %1013, align 1, !alias.scope !379, !noalias !382
  %1015 = zext i8 %1014 to i64
  %1016 = and i64 %1002, 7
  %1017 = shl i64 %1011, %1016
  %1018 = or i64 %1017, %1015
  %1019 = bitcast i8* %1013 to i64*
  store i64 %1018, i64* %1019, align 8, !alias.scope !379, !noalias !382
  %1020 = add i64 %1002, %1008
  store i64 %1020, i64* %6, align 8, !alias.scope !382, !noalias !379
  %1021 = getelementptr inbounds i8, i8* %984, i64 2
  %1022 = add i32 %985, -2
  %1023 = icmp eq i32 %1022, 0
  br i1 %1023, label %1024, label %982

1024:                                             ; preds = %982, %975
  %1025 = phi i64 [ undef, %975 ], [ %1020, %982 ]
  %1026 = phi i8* [ undef, %975 ], [ %1021, %982 ]
  %1027 = phi i64 [ %968, %975 ], [ %1020, %982 ]
  %1028 = phi i8* [ %934, %975 ], [ %1021, %982 ]
  %1029 = icmp eq i32 %977, 0
  br i1 %1029, label %1049, label %1030

1030:                                             ; preds = %1024
  %1031 = load i8, i8* %1028, align 1
  %1032 = zext i8 %1031 to i64
  %1033 = getelementptr inbounds [256 x i8], [256 x i8]* %12, i64 0, i64 %1032
  %1034 = load i8, i8* %1033, align 1
  %1035 = zext i8 %1034 to i64
  %1036 = getelementptr inbounds [256 x i16], [256 x i16]* %13, i64 0, i64 %1032
  %1037 = load i16, i16* %1036, align 2
  %1038 = zext i16 %1037 to i64
  %1039 = lshr i64 %1027, 3
  %1040 = getelementptr inbounds i8, i8* %7, i64 %1039
  %1041 = load i8, i8* %1040, align 1, !alias.scope !379, !noalias !382
  %1042 = zext i8 %1041 to i64
  %1043 = and i64 %1027, 7
  %1044 = shl i64 %1038, %1043
  %1045 = or i64 %1044, %1042
  %1046 = bitcast i8* %1040 to i64*
  store i64 %1045, i64* %1046, align 8, !alias.scope !379, !noalias !382
  %1047 = add i64 %1027, %1035
  store i64 %1047, i64* %6, align 8, !alias.scope !382, !noalias !379
  %1048 = getelementptr inbounds i8, i8* %1028, i64 1
  br label %1049

1049:                                             ; preds = %1030, %1024, %970, %932
  %1050 = phi i64 [ %968, %932 ], [ %968, %970 ], [ %1025, %1024 ], [ %1047, %1030 ]
  %1051 = phi i8* [ %934, %932 ], [ %934, %970 ], [ %1026, %1024 ], [ %1048, %1030 ]
  %1052 = add nuw i64 %935, 1
  %1053 = icmp eq i64 %1052, %745
  br i1 %1053, label %1054, label %932

1054:                                             ; preds = %1049, %891
  call void @llvm.lifetime.end.p0i8(i64 512, i8* nonnull %28) #6
  call void @llvm.lifetime.end.p0i8(i64 256, i8* nonnull %27) #6
  call void @llvm.lifetime.end.p0i8(i64 128, i8* nonnull %26) #6
  call void @llvm.lifetime.end.p0i8(i64 1024, i8* nonnull %23) #6
  call void @llvm.lifetime.end.p0i8(i64 512, i8* nonnull %25) #6
  call void @llvm.lifetime.end.p0i8(i64 256, i8* nonnull %24) #6
  br label %1103

1055:                                             ; preds = %738
  %1056 = load i64, i64* %6, align 8, !alias.scope !384, !noalias !387
  %1057 = lshr i64 %1056, 3
  %1058 = getelementptr inbounds i8, i8* %7, i64 %1057
  %1059 = load i8, i8* %1058, align 1, !alias.scope !387, !noalias !384
  %1060 = zext i8 %1059 to i64
  %1061 = bitcast i8* %1058 to i64*
  store i64 %1060, i64* %1061, align 8, !alias.scope !387, !noalias !384
  %1062 = add i64 %1056, 1
  %1063 = icmp ult i64 %147, 65537
  %1064 = select i1 %1063, i64 4, i64 5
  %1065 = add nsw i64 %1064, -4
  %1066 = lshr i64 %1062, 3
  %1067 = getelementptr inbounds i8, i8* %7, i64 %1066
  %1068 = load i8, i8* %1067, align 1, !alias.scope !389, !noalias !392
  %1069 = zext i8 %1068 to i64
  %1070 = and i64 %1062, 7
  %1071 = shl i64 %1065, %1070
  %1072 = or i64 %1071, %1069
  %1073 = bitcast i8* %1067 to i64*
  store i64 %1072, i64* %1073, align 8, !alias.scope !389, !noalias !392
  %1074 = add i64 %1056, 3
  %1075 = shl nuw nsw i64 %1064, 2
  %1076 = add nsw i64 %147, -1
  %1077 = lshr i64 %1074, 3
  %1078 = getelementptr inbounds i8, i8* %7, i64 %1077
  %1079 = load i8, i8* %1078, align 1, !alias.scope !394, !noalias !397
  %1080 = zext i8 %1079 to i64
  %1081 = and i64 %1074, 7
  %1082 = shl i64 %1076, %1081
  %1083 = or i64 %1082, %1080
  %1084 = bitcast i8* %1078 to i64*
  store i64 %1083, i64* %1084, align 8, !alias.scope !394, !noalias !397
  %1085 = add i64 %1074, %1075
  %1086 = lshr i64 %1085, 3
  %1087 = getelementptr inbounds i8, i8* %7, i64 %1086
  %1088 = load i8, i8* %1087, align 1, !alias.scope !399, !noalias !402
  %1089 = zext i8 %1088 to i64
  %1090 = and i64 %1085, 7
  %1091 = shl i64 1, %1090
  %1092 = or i64 %1091, %1089
  %1093 = bitcast i8* %1087 to i64*
  store i64 %1092, i64* %1093, align 8, !alias.scope !399, !noalias !402
  %1094 = add i64 %1085, 8
  %1095 = and i64 %1094, 4294967288
  store i64 %1095, i64* %6, align 8
  %1096 = lshr exact i64 %1095, 3
  %1097 = getelementptr inbounds i8, i8* %7, i64 %1096
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %1097, i8* align 1 %144, i64 %147, i1 false) #6
  %1098 = shl nuw nsw i64 %147, 3
  %1099 = load i64, i64* %6, align 8
  %1100 = add i64 %1099, %1098
  store i64 %1100, i64* %6, align 8
  %1101 = lshr i64 %1100, 3
  %1102 = getelementptr inbounds i8, i8* %7, i64 %1101
  store i8 0, i8* %1102, align 1
  br label %1103

1103:                                             ; preds = %1055, %1054
  %1104 = sub i64 %145, %147
  %1105 = icmp eq i64 %1104, 0
  br i1 %1105, label %1106, label %143

1106:                                             ; preds = %1103, %8
  ret void

1107:                                             ; preds = %252
  %1108 = getelementptr inbounds i8, i8* %244, i64 1
  %1109 = getelementptr inbounds i8, i8* %216, i64 %253
  %1110 = load i8, i8* %1109, align 1
  %1111 = load i8, i8* %1108, align 1
  %1112 = icmp eq i8 %1110, %1111
  br i1 %1112, label %1113, label %255, !prof !33

1113:                                             ; preds = %1107
  %1114 = add i64 %243, 2
  %1115 = icmp eq i64 %245, 2
  br i1 %1115, label %255, label %1116

1116:                                             ; preds = %1113
  %1117 = getelementptr inbounds i8, i8* %244, i64 2
  %1118 = getelementptr inbounds i8, i8* %216, i64 %1114
  %1119 = load i8, i8* %1118, align 1
  %1120 = load i8, i8* %1117, align 1
  %1121 = icmp eq i8 %1119, %1120
  br i1 %1121, label %1122, label %255, !prof !33

1122:                                             ; preds = %1116
  %1123 = add i64 %243, 3
  %1124 = icmp eq i64 %245, 3
  br i1 %1124, label %255, label %1125

1125:                                             ; preds = %1122
  %1126 = getelementptr inbounds i8, i8* %244, i64 3
  %1127 = getelementptr inbounds i8, i8* %216, i64 %1123
  %1128 = load i8, i8* %1127, align 1
  %1129 = load i8, i8* %1126, align 1
  %1130 = icmp eq i8 %1128, %1129
  br i1 %1130, label %1131, label %255, !prof !33

1131:                                             ; preds = %1125
  %1132 = add i64 %243, 4
  %1133 = icmp eq i64 %245, 4
  br i1 %1133, label %255, label %1134

1134:                                             ; preds = %1131
  %1135 = getelementptr inbounds i8, i8* %244, i64 4
  %1136 = getelementptr inbounds i8, i8* %216, i64 %1132
  %1137 = load i8, i8* %1136, align 1
  %1138 = load i8, i8* %1135, align 1
  %1139 = icmp eq i8 %1137, %1138
  br i1 %1139, label %1140, label %255, !prof !33

1140:                                             ; preds = %1134
  %1141 = add i64 %243, 5
  %1142 = icmp eq i64 %245, 5
  br i1 %1142, label %255, label %1143

1143:                                             ; preds = %1140
  %1144 = getelementptr inbounds i8, i8* %244, i64 5
  %1145 = getelementptr inbounds i8, i8* %216, i64 %1141
  %1146 = load i8, i8* %1145, align 1
  %1147 = load i8, i8* %1144, align 1
  %1148 = icmp eq i8 %1146, %1147
  br i1 %1148, label %1149, label %255, !prof !33

1149:                                             ; preds = %1143
  %1150 = add i64 %243, 6
  %1151 = icmp eq i64 %245, 6
  br i1 %1151, label %255, label %1152

1152:                                             ; preds = %1149
  %1153 = getelementptr inbounds i8, i8* %244, i64 6
  %1154 = getelementptr inbounds i8, i8* %216, i64 %1150
  %1155 = load i8, i8* %1154, align 1
  %1156 = load i8, i8* %1153, align 1
  %1157 = icmp eq i8 %1155, %1156
  %1158 = add i64 %243, 7
  %1159 = select i1 %1157, i64 %1158, i64 %1150, !prof !33
  br label %255

1160:                                             ; preds = %478
  %1161 = getelementptr inbounds i8, i8* %470, i64 1
  %1162 = getelementptr inbounds i8, i8* %442, i64 %479
  %1163 = load i8, i8* %1162, align 1
  %1164 = load i8, i8* %1161, align 1
  %1165 = icmp eq i8 %1163, %1164
  br i1 %1165, label %1166, label %481, !prof !33

1166:                                             ; preds = %1160
  %1167 = add i64 %469, 2
  %1168 = icmp eq i64 %471, 2
  br i1 %1168, label %481, label %1169

1169:                                             ; preds = %1166
  %1170 = getelementptr inbounds i8, i8* %470, i64 2
  %1171 = getelementptr inbounds i8, i8* %442, i64 %1167
  %1172 = load i8, i8* %1171, align 1
  %1173 = load i8, i8* %1170, align 1
  %1174 = icmp eq i8 %1172, %1173
  br i1 %1174, label %1175, label %481, !prof !33

1175:                                             ; preds = %1169
  %1176 = add i64 %469, 3
  %1177 = icmp eq i64 %471, 3
  br i1 %1177, label %481, label %1178

1178:                                             ; preds = %1175
  %1179 = getelementptr inbounds i8, i8* %470, i64 3
  %1180 = getelementptr inbounds i8, i8* %442, i64 %1176
  %1181 = load i8, i8* %1180, align 1
  %1182 = load i8, i8* %1179, align 1
  %1183 = icmp eq i8 %1181, %1182
  br i1 %1183, label %1184, label %481, !prof !33

1184:                                             ; preds = %1178
  %1185 = add i64 %469, 4
  %1186 = icmp eq i64 %471, 4
  br i1 %1186, label %481, label %1187

1187:                                             ; preds = %1184
  %1188 = getelementptr inbounds i8, i8* %470, i64 4
  %1189 = getelementptr inbounds i8, i8* %442, i64 %1185
  %1190 = load i8, i8* %1189, align 1
  %1191 = load i8, i8* %1188, align 1
  %1192 = icmp eq i8 %1190, %1191
  br i1 %1192, label %1193, label %481, !prof !33

1193:                                             ; preds = %1187
  %1194 = add i64 %469, 5
  %1195 = icmp eq i64 %471, 5
  br i1 %1195, label %481, label %1196

1196:                                             ; preds = %1193
  %1197 = getelementptr inbounds i8, i8* %470, i64 5
  %1198 = getelementptr inbounds i8, i8* %442, i64 %1194
  %1199 = load i8, i8* %1198, align 1
  %1200 = load i8, i8* %1197, align 1
  %1201 = icmp eq i8 %1199, %1200
  br i1 %1201, label %1202, label %481, !prof !33

1202:                                             ; preds = %1196
  %1203 = add i64 %469, 6
  %1204 = icmp eq i64 %471, 6
  br i1 %1204, label %481, label %1205

1205:                                             ; preds = %1202
  %1206 = getelementptr inbounds i8, i8* %470, i64 6
  %1207 = getelementptr inbounds i8, i8* %442, i64 %1203
  %1208 = load i8, i8* %1207, align 1
  %1209 = load i8, i8* %1206, align 1
  %1210 = icmp eq i8 %1208, %1209
  %1211 = add i64 %469, 7
  %1212 = select i1 %1210, i64 %1211, i64 %1203, !prof !33
  br label %481
}

; Function Attrs: noinline nounwind ssp uwtable
define internal fastcc void @BrotliCompressFragmentTwoPassImpl14(%struct.MemoryManager*, i8*, i64, i32*, i8*, i32* nocapture, i64*, i8*) unnamed_addr #2 {
  %9 = alloca [129 x %struct.HuffmanTree], align 16
  %10 = alloca [704 x i8], align 16
  %11 = alloca [64 x i16], align 16
  %12 = alloca [256 x i8], align 16
  %13 = alloca [256 x i16], align 16
  %14 = alloca [256 x i32], align 16
  %15 = alloca [128 x i8], align 16
  %16 = alloca [128 x i16], align 16
  %17 = alloca [128 x i32], align 16
  %18 = icmp eq i64 %2, 0
  br i1 %18, label %1106, label %19

19:                                               ; preds = %8
  %20 = ptrtoint i32* %3 to i64
  %21 = ptrtoint i8* %4 to i64
  %22 = ptrtoint i8* %1 to i64
  %23 = bitcast [256 x i32]* %14 to i8*
  %24 = getelementptr inbounds [256 x i8], [256 x i8]* %12, i64 0, i64 0
  %25 = bitcast [256 x i16]* %13 to i8*
  %26 = getelementptr inbounds [128 x i8], [128 x i8]* %15, i64 0, i64 0
  %27 = bitcast [128 x i16]* %16 to i8*
  %28 = bitcast [128 x i32]* %17 to i8*
  %29 = getelementptr inbounds [256 x i32], [256 x i32]* %14, i64 0, i64 0
  %30 = getelementptr inbounds [256 x i16], [256 x i16]* %13, i64 0, i64 0
  %31 = getelementptr inbounds [128 x i32], [128 x i32]* %17, i64 0, i64 1
  %32 = getelementptr inbounds [128 x i32], [128 x i32]* %17, i64 0, i64 2
  %33 = getelementptr inbounds [128 x i32], [128 x i32]* %17, i64 0, i64 64
  %34 = getelementptr inbounds [128 x i32], [128 x i32]* %17, i64 0, i64 84
  %35 = getelementptr inbounds [128 x i32], [128 x i32]* %17, i64 0, i64 0
  %36 = bitcast [129 x %struct.HuffmanTree]* %9 to i8*
  %37 = getelementptr inbounds [704 x i8], [704 x i8]* %10, i64 0, i64 0
  %38 = bitcast [64 x i16]* %11 to i8*
  %39 = getelementptr inbounds [129 x %struct.HuffmanTree], [129 x %struct.HuffmanTree]* %9, i64 0, i64 0
  %40 = getelementptr inbounds [128 x i8], [128 x i8]* %15, i64 0, i64 64
  %41 = getelementptr inbounds [128 x i8], [128 x i8]* %15, i64 0, i64 24
  %42 = getelementptr inbounds [704 x i8], [704 x i8]* %10, i64 0, i64 24
  %43 = bitcast [128 x i8]* %15 to i64*
  %44 = bitcast i8* %42 to i64*
  %45 = getelementptr inbounds [704 x i8], [704 x i8]* %10, i64 0, i64 32
  %46 = getelementptr inbounds [128 x i8], [128 x i8]* %15, i64 0, i64 48
  %47 = bitcast i8* %46 to i64*
  %48 = bitcast i8* %45 to i64*
  %49 = getelementptr inbounds [704 x i8], [704 x i8]* %10, i64 0, i64 40
  %50 = getelementptr inbounds [128 x i8], [128 x i8]* %15, i64 0, i64 8
  %51 = bitcast i8* %50 to i64*
  %52 = bitcast i8* %49 to i64*
  %53 = getelementptr inbounds [704 x i8], [704 x i8]* %10, i64 0, i64 48
  %54 = getelementptr inbounds [128 x i8], [128 x i8]* %15, i64 0, i64 56
  %55 = bitcast i8* %54 to i64*
  %56 = bitcast i8* %53 to i64*
  %57 = getelementptr inbounds [704 x i8], [704 x i8]* %10, i64 0, i64 56
  %58 = getelementptr inbounds [128 x i8], [128 x i8]* %15, i64 0, i64 16
  %59 = bitcast i8* %58 to i64*
  %60 = bitcast i8* %57 to i64*
  %61 = getelementptr inbounds [64 x i16], [64 x i16]* %11, i64 0, i64 0
  %62 = getelementptr inbounds [64 x i16], [64 x i16]* %11, i64 0, i64 24
  %63 = bitcast i16* %62 to i8*
  %64 = getelementptr inbounds [128 x i16], [128 x i16]* %16, i64 0, i64 8
  %65 = bitcast i16* %64 to i8*
  %66 = getelementptr inbounds [64 x i16], [64 x i16]* %11, i64 0, i64 40
  %67 = bitcast i16* %66 to i8*
  %68 = getelementptr inbounds [128 x i16], [128 x i16]* %16, i64 0, i64 16
  %69 = bitcast i16* %68 to i8*
  %70 = getelementptr inbounds [64 x i16], [64 x i16]* %11, i64 0, i64 56
  %71 = bitcast i16* %70 to i8*
  %72 = getelementptr inbounds [128 x i16], [128 x i16]* %16, i64 0, i64 24
  %73 = bitcast i16* %72 to i8*
  %74 = getelementptr inbounds [128 x i16], [128 x i16]* %16, i64 0, i64 48
  %75 = bitcast i16* %74 to i8*
  %76 = getelementptr inbounds [64 x i16], [64 x i16]* %11, i64 0, i64 32
  %77 = bitcast i16* %76 to i8*
  %78 = getelementptr inbounds [128 x i16], [128 x i16]* %16, i64 0, i64 56
  %79 = bitcast i16* %78 to i8*
  %80 = getelementptr inbounds [64 x i16], [64 x i16]* %11, i64 0, i64 48
  %81 = bitcast i16* %80 to i8*
  %82 = getelementptr inbounds [128 x i16], [128 x i16]* %16, i64 0, i64 64
  %83 = bitcast i8* %41 to i64*
  %84 = bitcast [704 x i8]* %10 to i64*
  %85 = getelementptr inbounds [704 x i8], [704 x i8]* %10, i64 0, i64 64
  %86 = getelementptr inbounds [128 x i8], [128 x i8]* %15, i64 0, i64 32
  %87 = bitcast i8* %86 to i64*
  %88 = bitcast i8* %85 to i64*
  %89 = getelementptr inbounds [704 x i8], [704 x i8]* %10, i64 0, i64 128
  %90 = getelementptr inbounds [128 x i8], [128 x i8]* %15, i64 0, i64 40
  %91 = bitcast i8* %90 to i64*
  %92 = bitcast i8* %89 to i64*
  %93 = getelementptr inbounds [704 x i8], [704 x i8]* %10, i64 0, i64 192
  %94 = bitcast i8* %93 to i64*
  %95 = getelementptr inbounds [704 x i8], [704 x i8]* %10, i64 0, i64 384
  %96 = bitcast i8* %95 to i64*
  %97 = getelementptr inbounds [704 x i8], [704 x i8]* %10, i64 0, i64 256
  %98 = getelementptr inbounds [704 x i8], [704 x i8]* %10, i64 0, i64 448
  %99 = getelementptr inbounds [128 x i8], [128 x i8]* %15, i64 0, i64 1
  %100 = getelementptr inbounds [704 x i8], [704 x i8]* %10, i64 0, i64 136
  %101 = getelementptr inbounds [128 x i8], [128 x i8]* %15, i64 0, i64 9
  %102 = getelementptr inbounds [704 x i8], [704 x i8]* %10, i64 0, i64 264
  %103 = getelementptr inbounds [128 x i8], [128 x i8]* %15, i64 0, i64 17
  %104 = getelementptr inbounds [704 x i8], [704 x i8]* %10, i64 0, i64 456
  %105 = getelementptr inbounds [128 x i8], [128 x i8]* %15, i64 0, i64 2
  %106 = getelementptr inbounds [704 x i8], [704 x i8]* %10, i64 0, i64 144
  %107 = getelementptr inbounds [128 x i8], [128 x i8]* %15, i64 0, i64 10
  %108 = getelementptr inbounds [704 x i8], [704 x i8]* %10, i64 0, i64 272
  %109 = getelementptr inbounds [128 x i8], [128 x i8]* %15, i64 0, i64 18
  %110 = getelementptr inbounds [704 x i8], [704 x i8]* %10, i64 0, i64 464
  %111 = getelementptr inbounds [128 x i8], [128 x i8]* %15, i64 0, i64 3
  %112 = getelementptr inbounds [704 x i8], [704 x i8]* %10, i64 0, i64 152
  %113 = getelementptr inbounds [128 x i8], [128 x i8]* %15, i64 0, i64 11
  %114 = getelementptr inbounds [704 x i8], [704 x i8]* %10, i64 0, i64 280
  %115 = getelementptr inbounds [128 x i8], [128 x i8]* %15, i64 0, i64 19
  %116 = getelementptr inbounds [704 x i8], [704 x i8]* %10, i64 0, i64 472
  %117 = getelementptr inbounds [128 x i8], [128 x i8]* %15, i64 0, i64 4
  %118 = getelementptr inbounds [704 x i8], [704 x i8]* %10, i64 0, i64 160
  %119 = getelementptr inbounds [128 x i8], [128 x i8]* %15, i64 0, i64 12
  %120 = getelementptr inbounds [704 x i8], [704 x i8]* %10, i64 0, i64 288
  %121 = getelementptr inbounds [128 x i8], [128 x i8]* %15, i64 0, i64 20
  %122 = getelementptr inbounds [704 x i8], [704 x i8]* %10, i64 0, i64 480
  %123 = getelementptr inbounds [128 x i8], [128 x i8]* %15, i64 0, i64 5
  %124 = getelementptr inbounds [704 x i8], [704 x i8]* %10, i64 0, i64 168
  %125 = getelementptr inbounds [128 x i8], [128 x i8]* %15, i64 0, i64 13
  %126 = getelementptr inbounds [704 x i8], [704 x i8]* %10, i64 0, i64 296
  %127 = getelementptr inbounds [128 x i8], [128 x i8]* %15, i64 0, i64 21
  %128 = getelementptr inbounds [704 x i8], [704 x i8]* %10, i64 0, i64 488
  %129 = getelementptr inbounds [128 x i8], [128 x i8]* %15, i64 0, i64 6
  %130 = getelementptr inbounds [704 x i8], [704 x i8]* %10, i64 0, i64 176
  %131 = getelementptr inbounds [128 x i8], [128 x i8]* %15, i64 0, i64 14
  %132 = getelementptr inbounds [704 x i8], [704 x i8]* %10, i64 0, i64 304
  %133 = getelementptr inbounds [128 x i8], [128 x i8]* %15, i64 0, i64 22
  %134 = getelementptr inbounds [704 x i8], [704 x i8]* %10, i64 0, i64 496
  %135 = getelementptr inbounds [128 x i8], [128 x i8]* %15, i64 0, i64 7
  %136 = getelementptr inbounds [704 x i8], [704 x i8]* %10, i64 0, i64 184
  %137 = getelementptr inbounds [128 x i8], [128 x i8]* %15, i64 0, i64 15
  %138 = getelementptr inbounds [704 x i8], [704 x i8]* %10, i64 0, i64 312
  %139 = getelementptr inbounds [128 x i8], [128 x i8]* %15, i64 0, i64 23
  %140 = getelementptr inbounds [704 x i8], [704 x i8]* %10, i64 0, i64 504
  %141 = getelementptr inbounds i8, i8* %1, i64 4
  %142 = xor i64 %21, -1
  br label %143

143:                                              ; preds = %1103, %19
  %144 = phi i8* [ %1, %19 ], [ %148, %1103 ]
  %145 = phi i64 [ %2, %19 ], [ %1104, %1103 ]
  %146 = icmp ult i64 %145, 131072
  %147 = select i1 %146, i64 %145, i64 131072
  %148 = getelementptr inbounds i8, i8* %144, i64 %147
  %149 = icmp ugt i64 %147, 15
  br i1 %149, label %150, label %595, !prof !33

150:                                              ; preds = %143
  %151 = add nsw i64 %147, -4
  %152 = add i64 %145, -16
  %153 = icmp ult i64 %151, %152
  %154 = select i1 %153, i64 %151, i64 %152
  %155 = getelementptr inbounds i8, i8* %144, i64 %154
  %156 = ptrtoint i8* %148 to i64
  br label %157

157:                                              ; preds = %585, %150
  %158 = phi i64 [ %20, %150 ], [ %586, %585 ]
  %159 = phi i64 [ %21, %150 ], [ %318, %585 ]
  %160 = phi i8* [ %144, %150 ], [ %587, %585 ]
  %161 = phi i32 [ -1, %150 ], [ %588, %585 ]
  %162 = getelementptr inbounds i8, i8* %160, i64 1
  %163 = bitcast i8* %162 to i64*
  %164 = load i64, i64* %163, align 8
  %165 = sext i32 %161 to i64
  %166 = sub nsw i64 0, %165
  %167 = icmp slt i32 %161, 1
  br label %168

168:                                              ; preds = %206, %157
  %169 = phi i64 [ %164, %157 ], [ %181, %206 ]
  %170 = phi i32 [ 32, %157 ], [ %174, %206 ]
  %171 = phi i8* [ %162, %157 ], [ %177, %206 ]
  %172 = mul i64 %169, 2176830425094160384
  %173 = lshr i64 %172, 50
  %174 = add i32 %170, 1
  %175 = lshr i32 %170, 5
  %176 = zext i32 %175 to i64
  %177 = getelementptr inbounds i8, i8* %171, i64 %176
  %178 = icmp ugt i8* %177, %155
  br i1 %178, label %595, label %179, !prof !34

179:                                              ; preds = %168
  %180 = bitcast i8* %177 to i64*
  %181 = load i64, i64* %180, align 8
  %182 = getelementptr inbounds i8, i8* %171, i64 %166
  %183 = bitcast i8* %171 to i32*
  %184 = load i32, i32* %183, align 4
  %185 = bitcast i8* %182 to i32*
  %186 = load i32, i32* %185, align 4
  %187 = icmp ne i32 %184, %186
  %188 = or i1 %167, %187
  br i1 %188, label %194, label %189, !prof !35

189:                                              ; preds = %179
  %190 = ptrtoint i8* %171 to i64
  %191 = sub i64 %190, %22
  %192 = trunc i64 %191 to i32
  %193 = getelementptr inbounds i32, i32* %5, i64 %173
  store i32 %192, i32* %193, align 4
  br label %209

194:                                              ; preds = %179
  %195 = getelementptr inbounds i32, i32* %5, i64 %173
  %196 = load i32, i32* %195, align 4
  %197 = sext i32 %196 to i64
  %198 = getelementptr inbounds i8, i8* %1, i64 %197
  %199 = ptrtoint i8* %171 to i64
  %200 = sub i64 %199, %22
  %201 = trunc i64 %200 to i32
  store i32 %201, i32* %195, align 4
  %202 = load i32, i32* %183, align 4
  %203 = bitcast i8* %198 to i32*
  %204 = load i32, i32* %203, align 4
  %205 = icmp eq i32 %202, %204
  br i1 %205, label %207, label %206

206:                                              ; preds = %194, %209
  br label %168

207:                                              ; preds = %194
  %208 = ptrtoint i8* %171 to i64
  br label %209

209:                                              ; preds = %207, %189
  %210 = phi i64 [ %190, %189 ], [ %208, %207 ]
  %211 = phi i8* [ %182, %189 ], [ %198, %207 ]
  %212 = ptrtoint i8* %211 to i64
  %213 = sub i64 %210, %212
  %214 = icmp sgt i64 %213, 262128
  br i1 %214, label %206, label %215

215:                                              ; preds = %209
  %216 = getelementptr inbounds i8, i8* %211, i64 4
  %217 = getelementptr inbounds i8, i8* %171, i64 4
  %218 = sub i64 %156, %210
  %219 = add i64 %218, -4
  %220 = lshr i64 %219, 3
  %221 = icmp eq i64 %220, 0
  br i1 %221, label %242, label %222, !prof !34

222:                                              ; preds = %215, %232
  %223 = phi i64 [ %235, %232 ], [ %220, %215 ]
  %224 = phi i8* [ %233, %232 ], [ %217, %215 ]
  %225 = phi i64 [ %234, %232 ], [ 0, %215 ]
  %226 = bitcast i8* %224 to i64*
  %227 = load i64, i64* %226, align 8
  %228 = getelementptr inbounds i8, i8* %216, i64 %225
  %229 = bitcast i8* %228 to i64*
  %230 = load i64, i64* %229, align 8
  %231 = icmp eq i64 %227, %230
  br i1 %231, label %232, label %237, !prof !34

232:                                              ; preds = %222
  %233 = getelementptr inbounds i8, i8* %224, i64 8
  %234 = add nuw i64 %225, 8
  %235 = add nsw i64 %223, -1
  %236 = icmp eq i64 %235, 0
  br i1 %236, label %242, label %222, !prof !34

237:                                              ; preds = %222
  %238 = xor i64 %230, %227
  %239 = call i64 @llvm.cttz.i64(i64 %238, i1 true) #6, !range !36
  %240 = lshr i64 %239, 3
  %241 = or i64 %240, %225
  br label %255

242:                                              ; preds = %232, %215
  %243 = phi i64 [ 0, %215 ], [ %234, %232 ]
  %244 = phi i8* [ %217, %215 ], [ %233, %232 ]
  %245 = and i64 %219, 7
  %246 = icmp eq i64 %245, 0
  br i1 %246, label %255, label %247

247:                                              ; preds = %242
  %248 = getelementptr inbounds i8, i8* %216, i64 %243
  %249 = load i8, i8* %248, align 1
  %250 = load i8, i8* %244, align 1
  %251 = icmp eq i8 %249, %250
  br i1 %251, label %252, label %255, !prof !33

252:                                              ; preds = %247
  %253 = add i64 %243, 1
  %254 = icmp eq i64 %245, 1
  br i1 %254, label %255, label %1107

255:                                              ; preds = %1152, %252, %247, %1107, %1113, %1116, %1122, %1125, %1131, %1134, %1140, %1143, %1149, %242, %237
  %256 = phi i64 [ %241, %237 ], [ %243, %242 ], [ %253, %252 ], [ %243, %247 ], [ %253, %1107 ], [ %1114, %1113 ], [ %1114, %1116 ], [ %1123, %1122 ], [ %1123, %1125 ], [ %1132, %1131 ], [ %1132, %1134 ], [ %1141, %1140 ], [ %1141, %1143 ], [ %1150, %1149 ], [ %1159, %1152 ]
  %257 = add i64 %256, 4
  %258 = trunc i64 %213 to i32
  %259 = ptrtoint i8* %160 to i64
  %260 = sub i64 %210, %259
  %261 = trunc i64 %260 to i32
  %262 = getelementptr inbounds i8, i8* %171, i64 %257
  %263 = icmp ult i32 %261, 6
  br i1 %263, label %264, label %266

264:                                              ; preds = %255
  %265 = inttoptr i64 %158 to i32*
  store i32 %261, i32* %265, align 4
  br label %311

266:                                              ; preds = %255
  %267 = icmp ult i32 %261, 130
  br i1 %267, label %268, label %281

268:                                              ; preds = %266
  %269 = add nsw i32 %261, -2
  %270 = call i32 @llvm.ctlz.i32(i32 %269, i1 true) #6, !range !2
  %271 = sub nsw i32 30, %270
  %272 = lshr i32 %269, %271
  %273 = shl nsw i32 %271, 1
  %274 = add nuw nsw i32 %272, 2
  %275 = add i32 %274, %273
  %276 = shl i32 %272, %271
  %277 = sub i32 %269, %276
  %278 = shl i32 %277, 8
  %279 = or i32 %278, %275
  %280 = inttoptr i64 %158 to i32*
  store i32 %279, i32* %280, align 4
  br label %311

281:                                              ; preds = %266
  %282 = icmp ult i32 %261, 2114
  br i1 %282, label %283, label %293

283:                                              ; preds = %281
  %284 = add nsw i32 %261, -66
  %285 = call i32 @llvm.ctlz.i32(i32 %284, i1 true) #6, !range !2
  %286 = xor i32 %285, 31
  %287 = add nuw nsw i32 %286, 10
  %288 = shl i32 1, %286
  %289 = sub i32 %284, %288
  %290 = shl i32 %289, 8
  %291 = or i32 %290, %287
  %292 = inttoptr i64 %158 to i32*
  store i32 %291, i32* %292, align 4
  br label %311

293:                                              ; preds = %281
  %294 = icmp ult i32 %261, 6210
  br i1 %294, label %295, label %300

295:                                              ; preds = %293
  %296 = shl i32 %261, 8
  %297 = add nsw i32 %296, -541184
  %298 = or i32 %297, 21
  %299 = inttoptr i64 %158 to i32*
  store i32 %298, i32* %299, align 4
  br label %311

300:                                              ; preds = %293
  %301 = icmp ult i32 %261, 22594
  %302 = shl i32 %261, 8
  br i1 %301, label %303, label %307

303:                                              ; preds = %300
  %304 = add i32 %302, -1589760
  %305 = or i32 %304, 22
  %306 = inttoptr i64 %158 to i32*
  store i32 %305, i32* %306, align 4
  br label %311

307:                                              ; preds = %300
  %308 = add i32 %302, -5784064
  %309 = or i32 %308, 23
  %310 = inttoptr i64 %158 to i32*
  store i32 %309, i32* %310, align 4
  br label %311

311:                                              ; preds = %307, %303, %295, %283, %268, %264
  %312 = phi i32* [ %310, %307 ], [ %306, %303 ], [ %299, %295 ], [ %292, %283 ], [ %280, %268 ], [ %265, %264 ]
  %313 = getelementptr inbounds i32, i32* %312, i64 1
  %314 = inttoptr i64 %159 to i8*
  %315 = shl i64 %260, 32
  %316 = ashr exact i64 %315, 32
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %314, i8* align 1 %160, i64 %316, i1 false) #6
  %317 = getelementptr inbounds i8, i8* %314, i64 %316
  %318 = ptrtoint i8* %317 to i64
  %319 = icmp eq i32 %161, %258
  br i1 %319, label %336, label %320

320:                                              ; preds = %311
  %321 = add i32 %258, 3
  %322 = call i32 @llvm.ctlz.i32(i32 %321, i1 true) #6, !range !2
  %323 = xor i32 %322, 31
  %324 = add nsw i32 %323, -1
  %325 = lshr i32 %321, %324
  %326 = and i32 %325, 1
  %327 = or i32 %326, 2
  %328 = shl i32 %327, %324
  %329 = shl nuw nsw i32 %323, 1
  %330 = add nsw i32 %329, -4
  %331 = or i32 %326, %330
  %332 = add nsw i32 %331, 80
  %333 = sub i32 %321, %328
  %334 = shl i32 %333, 8
  %335 = or i32 %334, %332
  br label %336

336:                                              ; preds = %320, %311
  %337 = phi i32 [ %335, %320 ], [ 64, %311 ]
  %338 = phi i32 [ %258, %320 ], [ %161, %311 ]
  store i32 %337, i32* %313, align 4
  %339 = getelementptr inbounds i32, i32* %312, i64 2
  %340 = icmp ult i64 %257, 12
  br i1 %340, label %341, label %344

341:                                              ; preds = %336
  %342 = trunc i64 %257 to i32
  %343 = add nuw nsw i32 %342, 20
  store i32 %343, i32* %339, align 4
  br label %393

344:                                              ; preds = %336
  %345 = icmp ult i64 %257, 72
  br i1 %345, label %346, label %361

346:                                              ; preds = %344
  %347 = add nsw i64 %256, -4
  %348 = trunc i64 %347 to i32
  %349 = call i32 @llvm.ctlz.i32(i32 %348, i1 true) #6, !range !2
  %350 = sub nsw i32 30, %349
  %351 = zext i32 %350 to i64
  %352 = lshr i64 %347, %351
  %353 = shl nuw nsw i64 %351, 1
  %354 = add nuw nsw i64 %352, 28
  %355 = add nuw nsw i64 %354, %353
  %356 = shl i64 %352, %351
  %357 = sub i64 %347, %356
  %358 = shl i64 %357, 8
  %359 = or i64 %358, %355
  %360 = trunc i64 %359 to i32
  store i32 %360, i32* %339, align 4
  br label %393

361:                                              ; preds = %344
  %362 = icmp ult i64 %257, 136
  br i1 %362, label %363, label %372

363:                                              ; preds = %361
  %364 = add nsw i64 %256, -4
  %365 = lshr i64 %364, 5
  %366 = add nuw nsw i64 %365, 54
  %367 = shl i64 %364, 8
  %368 = and i64 %367, 7936
  %369 = or i64 %366, %368
  %370 = trunc i64 %369 to i32
  store i32 %370, i32* %339, align 4
  %371 = getelementptr inbounds i32, i32* %312, i64 3
  store i32 64, i32* %371, align 4
  br label %393

372:                                              ; preds = %361
  %373 = icmp ult i64 %257, 2120
  br i1 %373, label %374, label %387

374:                                              ; preds = %372
  %375 = add nsw i64 %256, -68
  %376 = trunc i64 %375 to i32
  %377 = call i32 @llvm.ctlz.i32(i32 %376, i1 true) #6, !range !2
  %378 = xor i32 %377, 31
  %379 = zext i32 %378 to i64
  %380 = add nuw nsw i64 %379, 52
  %381 = shl i64 1, %379
  %382 = sub i64 %375, %381
  %383 = shl i64 %382, 8
  %384 = or i64 %383, %380
  %385 = trunc i64 %384 to i32
  store i32 %385, i32* %339, align 4
  %386 = getelementptr inbounds i32, i32* %312, i64 3
  store i32 64, i32* %386, align 4
  br label %393

387:                                              ; preds = %372
  %388 = trunc i64 %257 to i32
  %389 = shl i32 %388, 8
  %390 = add i32 %389, -542720
  %391 = or i32 %390, 63
  store i32 %391, i32* %339, align 4
  %392 = getelementptr inbounds i32, i32* %312, i64 3
  store i32 64, i32* %392, align 4
  br label %393

393:                                              ; preds = %387, %374, %363, %346, %341
  %394 = phi i64 [ 4, %387 ], [ 4, %374 ], [ 4, %363 ], [ 3, %346 ], [ 3, %341 ]
  %395 = getelementptr inbounds i32, i32* %312, i64 %394
  %396 = ptrtoint i32* %395 to i64
  %397 = icmp ult i8* %262, %155
  br i1 %397, label %398, label %592, !prof !33

398:                                              ; preds = %393
  %399 = getelementptr inbounds i8, i8* %262, i64 -3
  %400 = bitcast i8* %399 to i64*
  %401 = load i64, i64* %400, align 8
  %402 = lshr i64 %401, 24
  %403 = mul i64 %402, 2176830425094160384
  %404 = mul i64 %401, 2176830425094160384
  %405 = lshr i64 %404, 50
  %406 = ptrtoint i8* %262 to i64
  %407 = sub i64 %406, %22
  %408 = trunc i64 %407 to i32
  %409 = getelementptr inbounds i32, i32* %5, i64 %405
  %410 = lshr i64 %401, 8
  %411 = mul i64 %410, 2176830425094160384
  %412 = lshr i64 %411, 50
  %413 = add i32 %408, -2
  %414 = getelementptr inbounds i32, i32* %5, i64 %412
  store i32 %413, i32* %414, align 4
  %415 = add i32 %408, -1
  store i32 %415, i32* %409, align 4
  %416 = lshr i64 %403, 50
  %417 = getelementptr inbounds i32, i32* %5, i64 %416
  %418 = load i32, i32* %417, align 4
  store i32 %408, i32* %417, align 4
  %419 = sext i32 %418 to i64
  %420 = getelementptr inbounds i8, i8* %1, i64 %419
  %421 = ptrtoint i8* %420 to i64
  %422 = sub i64 %406, %421
  %423 = icmp slt i64 %422, 262129
  br i1 %423, label %424, label %585

424:                                              ; preds = %398
  %425 = bitcast i8* %262 to i32*
  %426 = load i32, i32* %425, align 4
  %427 = bitcast i8* %420 to i32*
  %428 = load i32, i32* %427, align 4
  %429 = icmp eq i32 %426, %428
  br i1 %429, label %436, label %585

430:                                              ; preds = %551
  %431 = bitcast i8* %484 to i32*
  %432 = load i32, i32* %431, align 4
  %433 = bitcast i8* %578 to i32*
  %434 = load i32, i32* %433, align 4
  %435 = icmp eq i32 %432, %434
  br i1 %435, label %436, label %582

436:                                              ; preds = %424, %430
  %437 = phi i8* [ %484, %430 ], [ %262, %424 ]
  %438 = phi i64 [ %577, %430 ], [ %419, %424 ]
  %439 = phi i64 [ %559, %430 ], [ %406, %424 ]
  %440 = phi i64 [ %580, %430 ], [ %422, %424 ]
  %441 = phi i64 [ %549, %430 ], [ %396, %424 ]
  %442 = getelementptr inbounds i8, i8* %141, i64 %438
  %443 = getelementptr inbounds i8, i8* %437, i64 4
  %444 = sub i64 %156, %439
  %445 = add i64 %444, -4
  %446 = lshr i64 %445, 3
  %447 = icmp eq i64 %446, 0
  br i1 %447, label %468, label %448, !prof !34

448:                                              ; preds = %436, %458
  %449 = phi i64 [ %461, %458 ], [ %446, %436 ]
  %450 = phi i8* [ %459, %458 ], [ %443, %436 ]
  %451 = phi i64 [ %460, %458 ], [ 0, %436 ]
  %452 = bitcast i8* %450 to i64*
  %453 = load i64, i64* %452, align 8
  %454 = getelementptr inbounds i8, i8* %442, i64 %451
  %455 = bitcast i8* %454 to i64*
  %456 = load i64, i64* %455, align 8
  %457 = icmp eq i64 %453, %456
  br i1 %457, label %458, label %463, !prof !34

458:                                              ; preds = %448
  %459 = getelementptr inbounds i8, i8* %450, i64 8
  %460 = add nuw i64 %451, 8
  %461 = add nsw i64 %449, -1
  %462 = icmp eq i64 %461, 0
  br i1 %462, label %468, label %448, !prof !34

463:                                              ; preds = %448
  %464 = xor i64 %456, %453
  %465 = call i64 @llvm.cttz.i64(i64 %464, i1 true) #6, !range !36
  %466 = lshr i64 %465, 3
  %467 = or i64 %466, %451
  br label %481

468:                                              ; preds = %458, %436
  %469 = phi i64 [ 0, %436 ], [ %460, %458 ]
  %470 = phi i8* [ %443, %436 ], [ %459, %458 ]
  %471 = and i64 %445, 7
  %472 = icmp eq i64 %471, 0
  br i1 %472, label %481, label %473

473:                                              ; preds = %468
  %474 = getelementptr inbounds i8, i8* %442, i64 %469
  %475 = load i8, i8* %474, align 1
  %476 = load i8, i8* %470, align 1
  %477 = icmp eq i8 %475, %476
  br i1 %477, label %478, label %481, !prof !33

478:                                              ; preds = %473
  %479 = add i64 %469, 1
  %480 = icmp eq i64 %471, 1
  br i1 %480, label %481, label %1160

481:                                              ; preds = %1205, %478, %473, %1160, %1166, %1169, %1175, %1178, %1184, %1187, %1193, %1196, %1202, %468, %463
  %482 = phi i64 [ %467, %463 ], [ %469, %468 ], [ %479, %478 ], [ %469, %473 ], [ %479, %1160 ], [ %1167, %1166 ], [ %1167, %1169 ], [ %1176, %1175 ], [ %1176, %1178 ], [ %1185, %1184 ], [ %1185, %1187 ], [ %1194, %1193 ], [ %1194, %1196 ], [ %1203, %1202 ], [ %1212, %1205 ]
  %483 = add i64 %482, 4
  %484 = getelementptr inbounds i8, i8* %437, i64 %483
  %485 = trunc i64 %440 to i32
  %486 = icmp ult i64 %483, 10
  br i1 %486, label %487, label %491

487:                                              ; preds = %481
  %488 = trunc i64 %483 to i32
  %489 = add nuw nsw i32 %488, 38
  %490 = inttoptr i64 %441 to i32*
  store i32 %489, i32* %490, align 4
  br label %530

491:                                              ; preds = %481
  %492 = icmp ult i64 %483, 134
  br i1 %492, label %493, label %509

493:                                              ; preds = %491
  %494 = add nsw i64 %482, -2
  %495 = trunc i64 %494 to i32
  %496 = call i32 @llvm.ctlz.i32(i32 %495, i1 true) #6, !range !2
  %497 = sub nsw i32 30, %496
  %498 = zext i32 %497 to i64
  %499 = lshr i64 %494, %498
  %500 = shl nuw nsw i64 %498, 1
  %501 = add nuw nsw i64 %499, 44
  %502 = add nuw nsw i64 %501, %500
  %503 = shl i64 %499, %498
  %504 = sub i64 %494, %503
  %505 = shl i64 %504, 8
  %506 = or i64 %505, %502
  %507 = trunc i64 %506 to i32
  %508 = inttoptr i64 %441 to i32*
  store i32 %507, i32* %508, align 4
  br label %530

509:                                              ; preds = %491
  %510 = icmp ult i64 %483, 2118
  br i1 %510, label %511, label %524

511:                                              ; preds = %509
  %512 = add nsw i64 %482, -66
  %513 = trunc i64 %512 to i32
  %514 = call i32 @llvm.ctlz.i32(i32 %513, i1 true) #6, !range !2
  %515 = xor i32 %514, 31
  %516 = zext i32 %515 to i64
  %517 = add nuw nsw i64 %516, 52
  %518 = shl i64 1, %516
  %519 = sub i64 %512, %518
  %520 = shl i64 %519, 8
  %521 = or i64 %520, %517
  %522 = trunc i64 %521 to i32
  %523 = inttoptr i64 %441 to i32*
  store i32 %522, i32* %523, align 4
  br label %530

524:                                              ; preds = %509
  %525 = trunc i64 %483 to i32
  %526 = shl i32 %525, 8
  %527 = add i32 %526, -542208
  %528 = or i32 %527, 63
  %529 = inttoptr i64 %441 to i32*
  store i32 %528, i32* %529, align 4
  br label %530

530:                                              ; preds = %524, %511, %493, %487
  %531 = phi i32* [ %529, %524 ], [ %523, %511 ], [ %508, %493 ], [ %490, %487 ]
  %532 = getelementptr inbounds i32, i32* %531, i64 1
  %533 = add i32 %485, 3
  %534 = call i32 @llvm.ctlz.i32(i32 %533, i1 true) #6, !range !2
  %535 = xor i32 %534, 31
  %536 = add nsw i32 %535, -1
  %537 = lshr i32 %533, %536
  %538 = and i32 %537, 1
  %539 = or i32 %538, 2
  %540 = shl i32 %539, %536
  %541 = shl nuw nsw i32 %535, 1
  %542 = add nsw i32 %541, -4
  %543 = or i32 %538, %542
  %544 = add nsw i32 %543, 80
  %545 = sub i32 %533, %540
  %546 = shl i32 %545, 8
  %547 = or i32 %546, %544
  store i32 %547, i32* %532, align 4
  %548 = getelementptr inbounds i32, i32* %531, i64 2
  %549 = ptrtoint i32* %548 to i64
  %550 = icmp ult i8* %484, %155
  br i1 %550, label %551, label %589, !prof !33

551:                                              ; preds = %530
  %552 = getelementptr inbounds i8, i8* %484, i64 -3
  %553 = bitcast i8* %552 to i64*
  %554 = load i64, i64* %553, align 8
  %555 = lshr i64 %554, 24
  %556 = mul i64 %555, 2176830425094160384
  %557 = mul i64 %554, 2176830425094160384
  %558 = lshr i64 %557, 50
  %559 = ptrtoint i8* %484 to i64
  %560 = sub i64 %559, %22
  %561 = trunc i64 %560 to i32
  %562 = add i32 %561, -3
  %563 = getelementptr inbounds i32, i32* %5, i64 %558
  store i32 %562, i32* %563, align 4
  %564 = lshr i64 %554, 8
  %565 = mul i64 %564, 2176830425094160384
  %566 = lshr i64 %565, 50
  %567 = add i32 %561, -2
  %568 = getelementptr inbounds i32, i32* %5, i64 %566
  store i32 %567, i32* %568, align 4
  %569 = lshr i64 %554, 16
  %570 = mul i64 %569, 2176830425094160384
  %571 = lshr i64 %570, 50
  %572 = add i32 %561, -1
  %573 = getelementptr inbounds i32, i32* %5, i64 %571
  store i32 %572, i32* %573, align 4
  %574 = lshr i64 %556, 50
  %575 = getelementptr inbounds i32, i32* %5, i64 %574
  %576 = load i32, i32* %575, align 4
  store i32 %561, i32* %575, align 4
  %577 = sext i32 %576 to i64
  %578 = getelementptr inbounds i8, i8* %1, i64 %577
  %579 = ptrtoint i8* %578 to i64
  %580 = sub i64 %559, %579
  %581 = icmp slt i64 %580, 262129
  br i1 %581, label %430, label %582

582:                                              ; preds = %551, %430
  %583 = trunc i64 %440 to i32
  %584 = ptrtoint i32* %548 to i64
  br label %585

585:                                              ; preds = %582, %424, %398
  %586 = phi i64 [ %396, %398 ], [ %396, %424 ], [ %584, %582 ]
  %587 = phi i8* [ %262, %398 ], [ %262, %424 ], [ %484, %582 ]
  %588 = phi i32 [ %338, %398 ], [ %338, %424 ], [ %583, %582 ]
  br label %157

589:                                              ; preds = %530
  %590 = ptrtoint i8* %317 to i64
  %591 = ptrtoint i32* %548 to i64
  br label %595

592:                                              ; preds = %393
  %593 = ptrtoint i8* %317 to i64
  %594 = ptrtoint i32* %395 to i64
  br label %595

595:                                              ; preds = %168, %592, %589, %143
  %596 = phi i64 [ %20, %143 ], [ %591, %589 ], [ %594, %592 ], [ %158, %168 ]
  %597 = phi i64 [ %21, %143 ], [ %590, %589 ], [ %593, %592 ], [ %159, %168 ]
  %598 = phi i8* [ %144, %143 ], [ %484, %589 ], [ %262, %592 ], [ %160, %168 ]
  %599 = icmp ult i8* %598, %148
  br i1 %599, label %600, label %661

600:                                              ; preds = %595
  %601 = ptrtoint i8* %148 to i64
  %602 = ptrtoint i8* %598 to i64
  %603 = sub i64 %601, %602
  %604 = trunc i64 %603 to i32
  %605 = icmp ult i32 %604, 6
  br i1 %605, label %606, label %608

606:                                              ; preds = %600
  %607 = inttoptr i64 %596 to i32*
  store i32 %604, i32* %607, align 4
  br label %653

608:                                              ; preds = %600
  %609 = icmp ult i32 %604, 130
  br i1 %609, label %610, label %623

610:                                              ; preds = %608
  %611 = add nsw i32 %604, -2
  %612 = call i32 @llvm.ctlz.i32(i32 %611, i1 true) #6, !range !2
  %613 = sub nsw i32 30, %612
  %614 = lshr i32 %611, %613
  %615 = shl nsw i32 %613, 1
  %616 = add nuw nsw i32 %614, 2
  %617 = add i32 %616, %615
  %618 = shl i32 %614, %613
  %619 = sub i32 %611, %618
  %620 = shl i32 %619, 8
  %621 = or i32 %620, %617
  %622 = inttoptr i64 %596 to i32*
  store i32 %621, i32* %622, align 4
  br label %653

623:                                              ; preds = %608
  %624 = icmp ult i32 %604, 2114
  br i1 %624, label %625, label %635

625:                                              ; preds = %623
  %626 = add nsw i32 %604, -66
  %627 = call i32 @llvm.ctlz.i32(i32 %626, i1 true) #6, !range !2
  %628 = xor i32 %627, 31
  %629 = add nuw nsw i32 %628, 10
  %630 = shl i32 1, %628
  %631 = sub i32 %626, %630
  %632 = shl i32 %631, 8
  %633 = or i32 %632, %629
  %634 = inttoptr i64 %596 to i32*
  store i32 %633, i32* %634, align 4
  br label %653

635:                                              ; preds = %623
  %636 = icmp ult i32 %604, 6210
  br i1 %636, label %637, label %642

637:                                              ; preds = %635
  %638 = shl i32 %604, 8
  %639 = add nsw i32 %638, -541184
  %640 = or i32 %639, 21
  %641 = inttoptr i64 %596 to i32*
  store i32 %640, i32* %641, align 4
  br label %653

642:                                              ; preds = %635
  %643 = icmp ult i32 %604, 22594
  %644 = shl i32 %604, 8
  br i1 %643, label %645, label %649

645:                                              ; preds = %642
  %646 = add i32 %644, -1589760
  %647 = or i32 %646, 22
  %648 = inttoptr i64 %596 to i32*
  store i32 %647, i32* %648, align 4
  br label %653

649:                                              ; preds = %642
  %650 = add i32 %644, -5784064
  %651 = or i32 %650, 23
  %652 = inttoptr i64 %596 to i32*
  store i32 %651, i32* %652, align 4
  br label %653

653:                                              ; preds = %649, %645, %637, %625, %610, %606
  %654 = phi i32* [ %652, %649 ], [ %648, %645 ], [ %641, %637 ], [ %634, %625 ], [ %622, %610 ], [ %607, %606 ]
  %655 = getelementptr inbounds i32, i32* %654, i64 1
  %656 = ptrtoint i32* %655 to i64
  %657 = inttoptr i64 %597 to i8*
  %658 = and i64 %603, 4294967295
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %657, i8* align 1 %598, i64 %658, i1 false) #6
  %659 = getelementptr inbounds i8, i8* %657, i64 %658
  %660 = ptrtoint i8* %659 to i64
  br label %661

661:                                              ; preds = %653, %595
  %662 = phi i64 [ %656, %653 ], [ %596, %595 ]
  %663 = phi i64 [ %660, %653 ], [ %597, %595 ]
  %664 = sub i64 %663, %21
  %665 = uitofp i64 %147 to double
  %666 = uitofp i64 %664 to double
  %667 = fmul double %665, 0x3FEF5C28F5C28F5C
  %668 = fcmp ogt double %667, %666
  br i1 %668, label %743, label %669

669:                                              ; preds = %661
  call void @llvm.lifetime.start.p0i8(i64 1024, i8* nonnull %23) #6
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %23, i8 0, i64 1024, i1 false) #6
  %670 = fmul double %665, 8.000000e+00
  %671 = fmul double %670, 0x3FEF5C28F5C28F5C
  %672 = fdiv double %671, 4.300000e+01
  %673 = icmp eq i64 %147, 0
  br i1 %673, label %684, label %674

674:                                              ; preds = %669, %674
  %675 = phi i64 [ %682, %674 ], [ 0, %669 ]
  %676 = getelementptr inbounds i8, i8* %144, i64 %675
  %677 = load i8, i8* %676, align 1
  %678 = zext i8 %677 to i64
  %679 = getelementptr inbounds [256 x i32], [256 x i32]* %14, i64 0, i64 %678
  %680 = load i32, i32* %679, align 4
  %681 = add i32 %680, 1
  store i32 %681, i32* %679, align 4
  %682 = add i64 %675, 43
  %683 = icmp ult i64 %682, %147
  br i1 %683, label %674, label %684

684:                                              ; preds = %674, %669
  br label %685

685:                                              ; preds = %684, %719
  %686 = phi double [ %722, %719 ], [ 0.000000e+00, %684 ]
  %687 = phi i64 [ %711, %719 ], [ 0, %684 ]
  %688 = phi i64 [ %708, %719 ], [ 0, %684 ]
  %689 = getelementptr inbounds [256 x i32], [256 x i32]* %14, i64 0, i64 %688
  %690 = load i32, i32* %689, align 8
  %691 = zext i32 %690 to i64
  %692 = icmp ult i32 %690, 256
  br i1 %692, label %693, label %697

693:                                              ; preds = %685
  %694 = getelementptr inbounds [256 x double], [256 x double]* @kBrotliLog2Table, i64 0, i64 %691
  %695 = load double, double* %694, align 8
  %696 = uitofp i32 %690 to double
  br label %700

697:                                              ; preds = %685
  %698 = uitofp i32 %690 to double
  %699 = call double @log2(double %698) #6
  br label %700

700:                                              ; preds = %697, %693
  %701 = phi double [ %696, %693 ], [ %698, %697 ]
  %702 = phi double [ %695, %693 ], [ %699, %697 ]
  %703 = or i64 %688, 1
  %704 = getelementptr inbounds [256 x i32], [256 x i32]* %14, i64 0, i64 %703
  %705 = fmul double %701, %702
  %706 = fsub double %686, %705
  %707 = add i64 %687, %691
  %708 = add nuw nsw i64 %688, 2
  %709 = load i32, i32* %704, align 4
  %710 = zext i32 %709 to i64
  %711 = add i64 %707, %710
  %712 = uitofp i32 %709 to double
  %713 = icmp ult i32 %709, 256
  br i1 %713, label %714, label %717

714:                                              ; preds = %700
  %715 = getelementptr inbounds [256 x double], [256 x double]* @kBrotliLog2Table, i64 0, i64 %710
  %716 = load double, double* %715, align 8
  br label %719

717:                                              ; preds = %700
  %718 = call double @log2(double %712) #6
  br label %719

719:                                              ; preds = %717, %714
  %720 = phi double [ %716, %714 ], [ %718, %717 ]
  %721 = fmul double %720, %712
  %722 = fsub double %706, %721
  %723 = icmp ult i64 %708, 256
  br i1 %723, label %685, label %724

724:                                              ; preds = %719
  %725 = icmp eq i64 %711, 0
  %726 = uitofp i64 %711 to double
  br i1 %725, label %738, label %727

727:                                              ; preds = %724
  %728 = icmp ult i64 %711, 256
  br i1 %728, label %729, label %732

729:                                              ; preds = %727
  %730 = getelementptr inbounds [256 x double], [256 x double]* @kBrotliLog2Table, i64 0, i64 %711
  %731 = load double, double* %730, align 8
  br label %734

732:                                              ; preds = %727
  %733 = call double @log2(double %726) #6
  br label %734

734:                                              ; preds = %732, %729
  %735 = phi double [ %731, %729 ], [ %733, %732 ]
  %736 = fmul double %735, %726
  %737 = fadd double %722, %736
  br label %738

738:                                              ; preds = %734, %724
  %739 = phi double [ %737, %734 ], [ %722, %724 ]
  %740 = fcmp olt double %739, %726
  %741 = select i1 %740, double %726, double %739
  %742 = fcmp uge double %741, %672
  call void @llvm.lifetime.end.p0i8(i64 1024, i8* nonnull %23) #6
  br i1 %742, label %1055, label %743

743:                                              ; preds = %738, %661
  %744 = sub i64 %662, %20
  %745 = ashr exact i64 %744, 2
  %746 = load i64, i64* %6, align 8, !alias.scope !404, !noalias !407
  %747 = lshr i64 %746, 3
  %748 = getelementptr inbounds i8, i8* %7, i64 %747
  %749 = load i8, i8* %748, align 1, !alias.scope !407, !noalias !404
  %750 = zext i8 %749 to i64
  %751 = bitcast i8* %748 to i64*
  store i64 %750, i64* %751, align 8, !alias.scope !407, !noalias !404
  %752 = add i64 %746, 1
  %753 = icmp ult i64 %147, 65537
  %754 = select i1 %753, i64 4, i64 5
  %755 = add nsw i64 %754, -4
  %756 = lshr i64 %752, 3
  %757 = getelementptr inbounds i8, i8* %7, i64 %756
  %758 = load i8, i8* %757, align 1, !alias.scope !409, !noalias !412
  %759 = zext i8 %758 to i64
  %760 = and i64 %752, 7
  %761 = shl i64 %755, %760
  %762 = or i64 %761, %759
  %763 = bitcast i8* %757 to i64*
  store i64 %762, i64* %763, align 8, !alias.scope !409, !noalias !412
  %764 = add i64 %746, 3
  %765 = shl nuw nsw i64 %754, 2
  %766 = add nsw i64 %147, -1
  %767 = lshr i64 %764, 3
  %768 = getelementptr inbounds i8, i8* %7, i64 %767
  %769 = load i8, i8* %768, align 1, !alias.scope !414, !noalias !417
  %770 = zext i8 %769 to i64
  %771 = and i64 %764, 7
  %772 = shl i64 %766, %771
  %773 = or i64 %772, %770
  %774 = bitcast i8* %768 to i64*
  store i64 %773, i64* %774, align 8, !alias.scope !414, !noalias !417
  %775 = add i64 %764, %765
  %776 = lshr i64 %775, 3
  %777 = getelementptr inbounds i8, i8* %7, i64 %776
  %778 = load i8, i8* %777, align 1, !alias.scope !419, !noalias !422
  %779 = zext i8 %778 to i64
  %780 = bitcast i8* %777 to i64*
  store i64 %779, i64* %780, align 8, !alias.scope !419, !noalias !422
  %781 = add i64 %775, 1
  %782 = lshr i64 %781, 3
  %783 = getelementptr inbounds i8, i8* %7, i64 %782
  %784 = load i8, i8* %783, align 1, !alias.scope !424, !noalias !427
  %785 = zext i8 %784 to i64
  %786 = bitcast i8* %783 to i64*
  store i64 %785, i64* %786, align 8, !alias.scope !424, !noalias !427
  %787 = add i64 %775, 14
  store i64 %787, i64* %6, align 8, !alias.scope !427, !noalias !424
  call void @llvm.lifetime.start.p0i8(i64 256, i8* nonnull %24) #6
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %24, i8 -86, i64 256, i1 false) #6
  call void @llvm.lifetime.start.p0i8(i64 512, i8* nonnull %25) #6
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %25, i8 -86, i64 512, i1 false) #6
  call void @llvm.lifetime.start.p0i8(i64 1024, i8* nonnull %23) #6
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %23, i8 0, i64 1024, i1 false) #6
  call void @llvm.lifetime.start.p0i8(i64 128, i8* nonnull %26) #6
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %26, i8 0, i64 128, i1 false) #6
  call void @llvm.lifetime.start.p0i8(i64 256, i8* nonnull %27) #6
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %27, i8 0, i64 256, i1 false) #6
  call void @llvm.lifetime.start.p0i8(i64 512, i8* nonnull %28) #6
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %28, i8 0, i64 512, i1 false) #6
  %788 = icmp eq i64 %664, 0
  br i1 %788, label %843, label %789

789:                                              ; preds = %743
  %790 = add i64 %663, %142
  %791 = and i64 %664, 3
  %792 = icmp ult i64 %790, 3
  br i1 %792, label %828, label %793

793:                                              ; preds = %789
  %794 = sub i64 %664, %791
  br label %795

795:                                              ; preds = %795, %793
  %796 = phi i64 [ 0, %793 ], [ %825, %795 ]
  %797 = phi i64 [ %794, %793 ], [ %826, %795 ]
  %798 = getelementptr inbounds i8, i8* %4, i64 %796
  %799 = load i8, i8* %798, align 1
  %800 = zext i8 %799 to i64
  %801 = getelementptr inbounds [256 x i32], [256 x i32]* %14, i64 0, i64 %800
  %802 = load i32, i32* %801, align 4
  %803 = add i32 %802, 1
  store i32 %803, i32* %801, align 4
  %804 = or i64 %796, 1
  %805 = getelementptr inbounds i8, i8* %4, i64 %804
  %806 = load i8, i8* %805, align 1
  %807 = zext i8 %806 to i64
  %808 = getelementptr inbounds [256 x i32], [256 x i32]* %14, i64 0, i64 %807
  %809 = load i32, i32* %808, align 4
  %810 = add i32 %809, 1
  store i32 %810, i32* %808, align 4
  %811 = or i64 %796, 2
  %812 = getelementptr inbounds i8, i8* %4, i64 %811
  %813 = load i8, i8* %812, align 1
  %814 = zext i8 %813 to i64
  %815 = getelementptr inbounds [256 x i32], [256 x i32]* %14, i64 0, i64 %814
  %816 = load i32, i32* %815, align 4
  %817 = add i32 %816, 1
  store i32 %817, i32* %815, align 4
  %818 = or i64 %796, 3
  %819 = getelementptr inbounds i8, i8* %4, i64 %818
  %820 = load i8, i8* %819, align 1
  %821 = zext i8 %820 to i64
  %822 = getelementptr inbounds [256 x i32], [256 x i32]* %14, i64 0, i64 %821
  %823 = load i32, i32* %822, align 4
  %824 = add i32 %823, 1
  store i32 %824, i32* %822, align 4
  %825 = add nuw i64 %796, 4
  %826 = add i64 %797, -4
  %827 = icmp eq i64 %826, 0
  br i1 %827, label %828, label %795

828:                                              ; preds = %795, %789
  %829 = phi i64 [ 0, %789 ], [ %825, %795 ]
  %830 = icmp eq i64 %791, 0
  br i1 %830, label %843, label %831

831:                                              ; preds = %828, %831
  %832 = phi i64 [ %840, %831 ], [ %829, %828 ]
  %833 = phi i64 [ %841, %831 ], [ %791, %828 ]
  %834 = getelementptr inbounds i8, i8* %4, i64 %832
  %835 = load i8, i8* %834, align 1
  %836 = zext i8 %835 to i64
  %837 = getelementptr inbounds [256 x i32], [256 x i32]* %14, i64 0, i64 %836
  %838 = load i32, i32* %837, align 4
  %839 = add i32 %838, 1
  store i32 %839, i32* %837, align 4
  %840 = add nuw i64 %832, 1
  %841 = add i64 %833, -1
  %842 = icmp eq i64 %841, 0
  br i1 %842, label %843, label %831, !llvm.loop !429

843:                                              ; preds = %828, %831, %743
  call void @BrotliBuildAndStoreHuffmanTreeFast(%struct.MemoryManager* %0, i32* nonnull %29, i64 %664, i64 8, i8* nonnull %24, i16* nonnull %30, i64* %6, i8* %7) #6
  %844 = icmp eq i64 %744, 0
  br i1 %844, label %891, label %845

845:                                              ; preds = %843
  %846 = and i64 %745, 1
  %847 = icmp eq i64 %744, 4
  br i1 %847, label %871, label %848

848:                                              ; preds = %845
  %849 = sub nsw i64 %745, %846
  br label %850

850:                                              ; preds = %850, %848
  %851 = phi i64 [ 0, %848 ], [ %868, %850 ]
  %852 = phi i64 [ %849, %848 ], [ %869, %850 ]
  %853 = getelementptr inbounds i32, i32* %3, i64 %851
  %854 = load i32, i32* %853, align 4
  %855 = and i32 %854, 255
  %856 = zext i32 %855 to i64
  %857 = getelementptr inbounds [128 x i32], [128 x i32]* %17, i64 0, i64 %856
  %858 = load i32, i32* %857, align 4
  %859 = add i32 %858, 1
  store i32 %859, i32* %857, align 4
  %860 = or i64 %851, 1
  %861 = getelementptr inbounds i32, i32* %3, i64 %860
  %862 = load i32, i32* %861, align 4
  %863 = and i32 %862, 255
  %864 = zext i32 %863 to i64
  %865 = getelementptr inbounds [128 x i32], [128 x i32]* %17, i64 0, i64 %864
  %866 = load i32, i32* %865, align 4
  %867 = add i32 %866, 1
  store i32 %867, i32* %865, align 4
  %868 = add nuw i64 %851, 2
  %869 = add i64 %852, -2
  %870 = icmp eq i64 %869, 0
  br i1 %870, label %871, label %850

871:                                              ; preds = %850, %845
  %872 = phi i64 [ 0, %845 ], [ %868, %850 ]
  %873 = icmp eq i64 %846, 0
  br i1 %873, label %882, label %874

874:                                              ; preds = %871
  %875 = getelementptr inbounds i32, i32* %3, i64 %872
  %876 = load i32, i32* %875, align 4
  %877 = and i32 %876, 255
  %878 = zext i32 %877 to i64
  %879 = getelementptr inbounds [128 x i32], [128 x i32]* %17, i64 0, i64 %878
  %880 = load i32, i32* %879, align 4
  %881 = add i32 %880, 1
  store i32 %881, i32* %879, align 4
  br label %882

882:                                              ; preds = %871, %874
  %883 = load i32, i32* %31, align 4
  %884 = load i32, i32* %32, align 8
  %885 = load i32, i32* %33, align 16
  %886 = load i32, i32* %34, align 16
  %887 = add i32 %883, 1
  %888 = add i32 %884, 1
  %889 = add i32 %885, 1
  %890 = add i32 %886, 1
  br label %891

891:                                              ; preds = %882, %843
  %892 = phi i32 [ %890, %882 ], [ 1, %843 ]
  %893 = phi i32 [ %889, %882 ], [ 1, %843 ]
  %894 = phi i32 [ %888, %882 ], [ 1, %843 ]
  %895 = phi i32 [ %887, %882 ], [ 1, %843 ]
  store i32 %895, i32* %31, align 4
  store i32 %894, i32* %32, align 8
  store i32 %893, i32* %33, align 16
  store i32 %892, i32* %34, align 16
  call void @llvm.lifetime.start.p0i8(i64 1032, i8* nonnull %36) #6
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %36, i8 -86, i64 1032, i1 false) #6
  call void @llvm.lifetime.start.p0i8(i64 704, i8* nonnull %37) #6
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %37, i8 0, i64 704, i1 false) #6
  call void @llvm.lifetime.start.p0i8(i64 128, i8* nonnull %38) #6
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %38, i8 -86, i64 128, i1 false) #6
  call void @BrotliCreateHuffmanTree(i32* nonnull %35, i64 64, i32 15, %struct.HuffmanTree* nonnull %39, i8* nonnull %26) #6
  call void @BrotliCreateHuffmanTree(i32* %33, i64 64, i32 14, %struct.HuffmanTree* nonnull %39, i8* %40) #6
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 16 %37, i8* align 8 %41, i64 24, i1 false) #6
  %896 = load i64, i64* %43, align 16
  store i64 %896, i64* %44, align 8
  %897 = load i64, i64* %47, align 16
  store i64 %897, i64* %48, align 16
  %898 = load i64, i64* %51, align 8
  store i64 %898, i64* %52, align 8
  %899 = load i64, i64* %55, align 8
  store i64 %899, i64* %56, align 16
  %900 = load i64, i64* %59, align 16
  store i64 %900, i64* %60, align 8
  call void @BrotliConvertBitDepthsToSymbols(i8* nonnull %37, i64 64, i16* nonnull %61) #6
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 16 %27, i8* align 16 %63, i64 16, i1 false) #6
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 16 %65, i8* align 16 %67, i64 16, i1 false) #6
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 16 %69, i8* align 16 %71, i64 16, i1 false) #6
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 16 %73, i8* nonnull align 16 %38, i64 48, i1 false) #6
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 16 %75, i8* align 16 %77, i64 16, i1 false) #6
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 16 %79, i8* align 16 %81, i64 16, i1 false) #6
  call void @BrotliConvertBitDepthsToSymbols(i8* %40, i64 64, i16* %82) #6
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %37, i8 0, i64 64, i1 false) #6
  %901 = load i64, i64* %83, align 8
  store i64 %901, i64* %84, align 16
  %902 = load i64, i64* %87, align 16
  store i64 %902, i64* %88, align 16
  %903 = load i64, i64* %91, align 8
  store i64 %903, i64* %92, align 16
  %904 = load i64, i64* %47, align 16
  store i64 %904, i64* %94, align 16
  %905 = load i64, i64* %55, align 8
  store i64 %905, i64* %96, align 16
  %906 = load i8, i8* %26, align 16
  store i8 %906, i8* %89, align 16
  %907 = load i8, i8* %50, align 8
  store i8 %907, i8* %97, align 16
  %908 = load i8, i8* %58, align 16
  store i8 %908, i8* %98, align 16
  %909 = load i8, i8* %99, align 1
  store i8 %909, i8* %100, align 8
  %910 = load i8, i8* %101, align 1
  store i8 %910, i8* %102, align 8
  %911 = load i8, i8* %103, align 1
  store i8 %911, i8* %104, align 8
  %912 = load i8, i8* %105, align 2
  store i8 %912, i8* %106, align 16
  %913 = load i8, i8* %107, align 2
  store i8 %913, i8* %108, align 16
  %914 = load i8, i8* %109, align 2
  store i8 %914, i8* %110, align 16
  %915 = load i8, i8* %111, align 1
  store i8 %915, i8* %112, align 8
  %916 = load i8, i8* %113, align 1
  store i8 %916, i8* %114, align 8
  %917 = load i8, i8* %115, align 1
  store i8 %917, i8* %116, align 8
  %918 = load i8, i8* %117, align 4
  store i8 %918, i8* %118, align 16
  %919 = load i8, i8* %119, align 4
  store i8 %919, i8* %120, align 16
  %920 = load i8, i8* %121, align 4
  store i8 %920, i8* %122, align 16
  %921 = load i8, i8* %123, align 1
  store i8 %921, i8* %124, align 8
  %922 = load i8, i8* %125, align 1
  store i8 %922, i8* %126, align 8
  %923 = load i8, i8* %127, align 1
  store i8 %923, i8* %128, align 8
  %924 = load i8, i8* %129, align 2
  store i8 %924, i8* %130, align 16
  %925 = load i8, i8* %131, align 2
  store i8 %925, i8* %132, align 16
  %926 = load i8, i8* %133, align 2
  store i8 %926, i8* %134, align 16
  %927 = load i8, i8* %135, align 1
  store i8 %927, i8* %136, align 8
  %928 = load i8, i8* %137, align 1
  store i8 %928, i8* %138, align 8
  %929 = load i8, i8* %139, align 1
  store i8 %929, i8* %140, align 8
  call void @BrotliStoreHuffmanTree(i8* nonnull %37, i64 704, %struct.HuffmanTree* nonnull %39, i64* %6, i8* %7) #6
  call void @BrotliStoreHuffmanTree(i8* %40, i64 64, %struct.HuffmanTree* nonnull %39, i64* %6, i8* %7) #6
  call void @llvm.lifetime.end.p0i8(i64 128, i8* nonnull %38) #6
  call void @llvm.lifetime.end.p0i8(i64 704, i8* nonnull %37) #6
  call void @llvm.lifetime.end.p0i8(i64 1032, i8* nonnull %36) #6
  br i1 %844, label %1054, label %930

930:                                              ; preds = %891
  %931 = load i64, i64* %6, align 8, !alias.scope !430, !noalias !433
  br label %932

932:                                              ; preds = %1049, %930
  %933 = phi i64 [ %1050, %1049 ], [ %931, %930 ]
  %934 = phi i8* [ %1051, %1049 ], [ %4, %930 ]
  %935 = phi i64 [ %1052, %1049 ], [ 0, %930 ]
  %936 = getelementptr inbounds i32, i32* %3, i64 %935
  %937 = load i32, i32* %936, align 4
  %938 = and i32 %937, 255
  %939 = lshr i32 %937, 8
  %940 = zext i32 %938 to i64
  %941 = getelementptr inbounds [128 x i8], [128 x i8]* %15, i64 0, i64 %940
  %942 = load i8, i8* %941, align 1
  %943 = zext i8 %942 to i64
  %944 = getelementptr inbounds [128 x i16], [128 x i16]* %16, i64 0, i64 %940
  %945 = load i16, i16* %944, align 2
  %946 = zext i16 %945 to i64
  %947 = lshr i64 %933, 3
  %948 = getelementptr inbounds i8, i8* %7, i64 %947
  %949 = load i8, i8* %948, align 1, !alias.scope !433, !noalias !430
  %950 = zext i8 %949 to i64
  %951 = and i64 %933, 7
  %952 = shl i64 %946, %951
  %953 = or i64 %952, %950
  %954 = bitcast i8* %948 to i64*
  store i64 %953, i64* %954, align 8, !alias.scope !433, !noalias !430
  %955 = add i64 %933, %943
  %956 = getelementptr inbounds [128 x i32], [128 x i32]* @StoreCommands.kNumExtraBits, i64 0, i64 %940
  %957 = load i32, i32* %956, align 4
  %958 = zext i32 %957 to i64
  %959 = zext i32 %939 to i64
  %960 = lshr i64 %955, 3
  %961 = getelementptr inbounds i8, i8* %7, i64 %960
  %962 = load i8, i8* %961, align 1, !alias.scope !435, !noalias !438
  %963 = zext i8 %962 to i64
  %964 = and i64 %955, 7
  %965 = shl i64 %959, %964
  %966 = or i64 %965, %963
  %967 = bitcast i8* %961 to i64*
  store i64 %966, i64* %967, align 8, !alias.scope !435, !noalias !438
  %968 = add i64 %955, %958
  store i64 %968, i64* %6, align 8, !alias.scope !438, !noalias !435
  %969 = icmp ult i32 %938, 24
  br i1 %969, label %970, label %1049

970:                                              ; preds = %932
  %971 = getelementptr inbounds [24 x i32], [24 x i32]* @StoreCommands.kInsertOffset, i64 0, i64 %940
  %972 = load i32, i32* %971, align 4
  %973 = add i32 %972, %939
  %974 = icmp eq i32 %973, 0
  br i1 %974, label %1049, label %975

975:                                              ; preds = %970
  %976 = add i32 %972, -1
  %977 = and i32 %973, 1
  %978 = sub nsw i32 0, %939
  %979 = icmp eq i32 %976, %978
  br i1 %979, label %1024, label %980

980:                                              ; preds = %975
  %981 = sub i32 %973, %977
  br label %982

982:                                              ; preds = %982, %980
  %983 = phi i64 [ %968, %980 ], [ %1020, %982 ]
  %984 = phi i8* [ %934, %980 ], [ %1021, %982 ]
  %985 = phi i32 [ %981, %980 ], [ %1022, %982 ]
  %986 = load i8, i8* %984, align 1
  %987 = zext i8 %986 to i64
  %988 = getelementptr inbounds [256 x i8], [256 x i8]* %12, i64 0, i64 %987
  %989 = load i8, i8* %988, align 1
  %990 = zext i8 %989 to i64
  %991 = getelementptr inbounds [256 x i16], [256 x i16]* %13, i64 0, i64 %987
  %992 = load i16, i16* %991, align 2
  %993 = zext i16 %992 to i64
  %994 = lshr i64 %983, 3
  %995 = getelementptr inbounds i8, i8* %7, i64 %994
  %996 = load i8, i8* %995, align 1, !alias.scope !440, !noalias !443
  %997 = zext i8 %996 to i64
  %998 = and i64 %983, 7
  %999 = shl i64 %993, %998
  %1000 = or i64 %999, %997
  %1001 = bitcast i8* %995 to i64*
  store i64 %1000, i64* %1001, align 8, !alias.scope !440, !noalias !443
  %1002 = add i64 %983, %990
  store i64 %1002, i64* %6, align 8, !alias.scope !443, !noalias !440
  %1003 = getelementptr inbounds i8, i8* %984, i64 1
  %1004 = load i8, i8* %1003, align 1
  %1005 = zext i8 %1004 to i64
  %1006 = getelementptr inbounds [256 x i8], [256 x i8]* %12, i64 0, i64 %1005
  %1007 = load i8, i8* %1006, align 1
  %1008 = zext i8 %1007 to i64
  %1009 = getelementptr inbounds [256 x i16], [256 x i16]* %13, i64 0, i64 %1005
  %1010 = load i16, i16* %1009, align 2
  %1011 = zext i16 %1010 to i64
  %1012 = lshr i64 %1002, 3
  %1013 = getelementptr inbounds i8, i8* %7, i64 %1012
  %1014 = load i8, i8* %1013, align 1, !alias.scope !440, !noalias !443
  %1015 = zext i8 %1014 to i64
  %1016 = and i64 %1002, 7
  %1017 = shl i64 %1011, %1016
  %1018 = or i64 %1017, %1015
  %1019 = bitcast i8* %1013 to i64*
  store i64 %1018, i64* %1019, align 8, !alias.scope !440, !noalias !443
  %1020 = add i64 %1002, %1008
  store i64 %1020, i64* %6, align 8, !alias.scope !443, !noalias !440
  %1021 = getelementptr inbounds i8, i8* %984, i64 2
  %1022 = add i32 %985, -2
  %1023 = icmp eq i32 %1022, 0
  br i1 %1023, label %1024, label %982

1024:                                             ; preds = %982, %975
  %1025 = phi i64 [ undef, %975 ], [ %1020, %982 ]
  %1026 = phi i8* [ undef, %975 ], [ %1021, %982 ]
  %1027 = phi i64 [ %968, %975 ], [ %1020, %982 ]
  %1028 = phi i8* [ %934, %975 ], [ %1021, %982 ]
  %1029 = icmp eq i32 %977, 0
  br i1 %1029, label %1049, label %1030

1030:                                             ; preds = %1024
  %1031 = load i8, i8* %1028, align 1
  %1032 = zext i8 %1031 to i64
  %1033 = getelementptr inbounds [256 x i8], [256 x i8]* %12, i64 0, i64 %1032
  %1034 = load i8, i8* %1033, align 1
  %1035 = zext i8 %1034 to i64
  %1036 = getelementptr inbounds [256 x i16], [256 x i16]* %13, i64 0, i64 %1032
  %1037 = load i16, i16* %1036, align 2
  %1038 = zext i16 %1037 to i64
  %1039 = lshr i64 %1027, 3
  %1040 = getelementptr inbounds i8, i8* %7, i64 %1039
  %1041 = load i8, i8* %1040, align 1, !alias.scope !440, !noalias !443
  %1042 = zext i8 %1041 to i64
  %1043 = and i64 %1027, 7
  %1044 = shl i64 %1038, %1043
  %1045 = or i64 %1044, %1042
  %1046 = bitcast i8* %1040 to i64*
  store i64 %1045, i64* %1046, align 8, !alias.scope !440, !noalias !443
  %1047 = add i64 %1027, %1035
  store i64 %1047, i64* %6, align 8, !alias.scope !443, !noalias !440
  %1048 = getelementptr inbounds i8, i8* %1028, i64 1
  br label %1049

1049:                                             ; preds = %1030, %1024, %970, %932
  %1050 = phi i64 [ %968, %932 ], [ %968, %970 ], [ %1025, %1024 ], [ %1047, %1030 ]
  %1051 = phi i8* [ %934, %932 ], [ %934, %970 ], [ %1026, %1024 ], [ %1048, %1030 ]
  %1052 = add nuw i64 %935, 1
  %1053 = icmp eq i64 %1052, %745
  br i1 %1053, label %1054, label %932

1054:                                             ; preds = %1049, %891
  call void @llvm.lifetime.end.p0i8(i64 512, i8* nonnull %28) #6
  call void @llvm.lifetime.end.p0i8(i64 256, i8* nonnull %27) #6
  call void @llvm.lifetime.end.p0i8(i64 128, i8* nonnull %26) #6
  call void @llvm.lifetime.end.p0i8(i64 1024, i8* nonnull %23) #6
  call void @llvm.lifetime.end.p0i8(i64 512, i8* nonnull %25) #6
  call void @llvm.lifetime.end.p0i8(i64 256, i8* nonnull %24) #6
  br label %1103

1055:                                             ; preds = %738
  %1056 = load i64, i64* %6, align 8, !alias.scope !445, !noalias !448
  %1057 = lshr i64 %1056, 3
  %1058 = getelementptr inbounds i8, i8* %7, i64 %1057
  %1059 = load i8, i8* %1058, align 1, !alias.scope !448, !noalias !445
  %1060 = zext i8 %1059 to i64
  %1061 = bitcast i8* %1058 to i64*
  store i64 %1060, i64* %1061, align 8, !alias.scope !448, !noalias !445
  %1062 = add i64 %1056, 1
  %1063 = icmp ult i64 %147, 65537
  %1064 = select i1 %1063, i64 4, i64 5
  %1065 = add nsw i64 %1064, -4
  %1066 = lshr i64 %1062, 3
  %1067 = getelementptr inbounds i8, i8* %7, i64 %1066
  %1068 = load i8, i8* %1067, align 1, !alias.scope !450, !noalias !453
  %1069 = zext i8 %1068 to i64
  %1070 = and i64 %1062, 7
  %1071 = shl i64 %1065, %1070
  %1072 = or i64 %1071, %1069
  %1073 = bitcast i8* %1067 to i64*
  store i64 %1072, i64* %1073, align 8, !alias.scope !450, !noalias !453
  %1074 = add i64 %1056, 3
  %1075 = shl nuw nsw i64 %1064, 2
  %1076 = add nsw i64 %147, -1
  %1077 = lshr i64 %1074, 3
  %1078 = getelementptr inbounds i8, i8* %7, i64 %1077
  %1079 = load i8, i8* %1078, align 1, !alias.scope !455, !noalias !458
  %1080 = zext i8 %1079 to i64
  %1081 = and i64 %1074, 7
  %1082 = shl i64 %1076, %1081
  %1083 = or i64 %1082, %1080
  %1084 = bitcast i8* %1078 to i64*
  store i64 %1083, i64* %1084, align 8, !alias.scope !455, !noalias !458
  %1085 = add i64 %1074, %1075
  %1086 = lshr i64 %1085, 3
  %1087 = getelementptr inbounds i8, i8* %7, i64 %1086
  %1088 = load i8, i8* %1087, align 1, !alias.scope !460, !noalias !463
  %1089 = zext i8 %1088 to i64
  %1090 = and i64 %1085, 7
  %1091 = shl i64 1, %1090
  %1092 = or i64 %1091, %1089
  %1093 = bitcast i8* %1087 to i64*
  store i64 %1092, i64* %1093, align 8, !alias.scope !460, !noalias !463
  %1094 = add i64 %1085, 8
  %1095 = and i64 %1094, 4294967288
  store i64 %1095, i64* %6, align 8
  %1096 = lshr exact i64 %1095, 3
  %1097 = getelementptr inbounds i8, i8* %7, i64 %1096
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %1097, i8* align 1 %144, i64 %147, i1 false) #6
  %1098 = shl nuw nsw i64 %147, 3
  %1099 = load i64, i64* %6, align 8
  %1100 = add i64 %1099, %1098
  store i64 %1100, i64* %6, align 8
  %1101 = lshr i64 %1100, 3
  %1102 = getelementptr inbounds i8, i8* %7, i64 %1101
  store i8 0, i8* %1102, align 1
  br label %1103

1103:                                             ; preds = %1055, %1054
  %1104 = sub i64 %145, %147
  %1105 = icmp eq i64 %1104, 0
  br i1 %1105, label %1106, label %143

1106:                                             ; preds = %1103, %8
  ret void

1107:                                             ; preds = %252
  %1108 = getelementptr inbounds i8, i8* %244, i64 1
  %1109 = getelementptr inbounds i8, i8* %216, i64 %253
  %1110 = load i8, i8* %1109, align 1
  %1111 = load i8, i8* %1108, align 1
  %1112 = icmp eq i8 %1110, %1111
  br i1 %1112, label %1113, label %255, !prof !33

1113:                                             ; preds = %1107
  %1114 = add i64 %243, 2
  %1115 = icmp eq i64 %245, 2
  br i1 %1115, label %255, label %1116

1116:                                             ; preds = %1113
  %1117 = getelementptr inbounds i8, i8* %244, i64 2
  %1118 = getelementptr inbounds i8, i8* %216, i64 %1114
  %1119 = load i8, i8* %1118, align 1
  %1120 = load i8, i8* %1117, align 1
  %1121 = icmp eq i8 %1119, %1120
  br i1 %1121, label %1122, label %255, !prof !33

1122:                                             ; preds = %1116
  %1123 = add i64 %243, 3
  %1124 = icmp eq i64 %245, 3
  br i1 %1124, label %255, label %1125

1125:                                             ; preds = %1122
  %1126 = getelementptr inbounds i8, i8* %244, i64 3
  %1127 = getelementptr inbounds i8, i8* %216, i64 %1123
  %1128 = load i8, i8* %1127, align 1
  %1129 = load i8, i8* %1126, align 1
  %1130 = icmp eq i8 %1128, %1129
  br i1 %1130, label %1131, label %255, !prof !33

1131:                                             ; preds = %1125
  %1132 = add i64 %243, 4
  %1133 = icmp eq i64 %245, 4
  br i1 %1133, label %255, label %1134

1134:                                             ; preds = %1131
  %1135 = getelementptr inbounds i8, i8* %244, i64 4
  %1136 = getelementptr inbounds i8, i8* %216, i64 %1132
  %1137 = load i8, i8* %1136, align 1
  %1138 = load i8, i8* %1135, align 1
  %1139 = icmp eq i8 %1137, %1138
  br i1 %1139, label %1140, label %255, !prof !33

1140:                                             ; preds = %1134
  %1141 = add i64 %243, 5
  %1142 = icmp eq i64 %245, 5
  br i1 %1142, label %255, label %1143

1143:                                             ; preds = %1140
  %1144 = getelementptr inbounds i8, i8* %244, i64 5
  %1145 = getelementptr inbounds i8, i8* %216, i64 %1141
  %1146 = load i8, i8* %1145, align 1
  %1147 = load i8, i8* %1144, align 1
  %1148 = icmp eq i8 %1146, %1147
  br i1 %1148, label %1149, label %255, !prof !33

1149:                                             ; preds = %1143
  %1150 = add i64 %243, 6
  %1151 = icmp eq i64 %245, 6
  br i1 %1151, label %255, label %1152

1152:                                             ; preds = %1149
  %1153 = getelementptr inbounds i8, i8* %244, i64 6
  %1154 = getelementptr inbounds i8, i8* %216, i64 %1150
  %1155 = load i8, i8* %1154, align 1
  %1156 = load i8, i8* %1153, align 1
  %1157 = icmp eq i8 %1155, %1156
  %1158 = add i64 %243, 7
  %1159 = select i1 %1157, i64 %1158, i64 %1150, !prof !33
  br label %255

1160:                                             ; preds = %478
  %1161 = getelementptr inbounds i8, i8* %470, i64 1
  %1162 = getelementptr inbounds i8, i8* %442, i64 %479
  %1163 = load i8, i8* %1162, align 1
  %1164 = load i8, i8* %1161, align 1
  %1165 = icmp eq i8 %1163, %1164
  br i1 %1165, label %1166, label %481, !prof !33

1166:                                             ; preds = %1160
  %1167 = add i64 %469, 2
  %1168 = icmp eq i64 %471, 2
  br i1 %1168, label %481, label %1169

1169:                                             ; preds = %1166
  %1170 = getelementptr inbounds i8, i8* %470, i64 2
  %1171 = getelementptr inbounds i8, i8* %442, i64 %1167
  %1172 = load i8, i8* %1171, align 1
  %1173 = load i8, i8* %1170, align 1
  %1174 = icmp eq i8 %1172, %1173
  br i1 %1174, label %1175, label %481, !prof !33

1175:                                             ; preds = %1169
  %1176 = add i64 %469, 3
  %1177 = icmp eq i64 %471, 3
  br i1 %1177, label %481, label %1178

1178:                                             ; preds = %1175
  %1179 = getelementptr inbounds i8, i8* %470, i64 3
  %1180 = getelementptr inbounds i8, i8* %442, i64 %1176
  %1181 = load i8, i8* %1180, align 1
  %1182 = load i8, i8* %1179, align 1
  %1183 = icmp eq i8 %1181, %1182
  br i1 %1183, label %1184, label %481, !prof !33

1184:                                             ; preds = %1178
  %1185 = add i64 %469, 4
  %1186 = icmp eq i64 %471, 4
  br i1 %1186, label %481, label %1187

1187:                                             ; preds = %1184
  %1188 = getelementptr inbounds i8, i8* %470, i64 4
  %1189 = getelementptr inbounds i8, i8* %442, i64 %1185
  %1190 = load i8, i8* %1189, align 1
  %1191 = load i8, i8* %1188, align 1
  %1192 = icmp eq i8 %1190, %1191
  br i1 %1192, label %1193, label %481, !prof !33

1193:                                             ; preds = %1187
  %1194 = add i64 %469, 5
  %1195 = icmp eq i64 %471, 5
  br i1 %1195, label %481, label %1196

1196:                                             ; preds = %1193
  %1197 = getelementptr inbounds i8, i8* %470, i64 5
  %1198 = getelementptr inbounds i8, i8* %442, i64 %1194
  %1199 = load i8, i8* %1198, align 1
  %1200 = load i8, i8* %1197, align 1
  %1201 = icmp eq i8 %1199, %1200
  br i1 %1201, label %1202, label %481, !prof !33

1202:                                             ; preds = %1196
  %1203 = add i64 %469, 6
  %1204 = icmp eq i64 %471, 6
  br i1 %1204, label %481, label %1205

1205:                                             ; preds = %1202
  %1206 = getelementptr inbounds i8, i8* %470, i64 6
  %1207 = getelementptr inbounds i8, i8* %442, i64 %1203
  %1208 = load i8, i8* %1207, align 1
  %1209 = load i8, i8* %1206, align 1
  %1210 = icmp eq i8 %1208, %1209
  %1211 = add i64 %469, 7
  %1212 = select i1 %1210, i64 %1211, i64 %1203, !prof !33
  br label %481
}

; Function Attrs: noinline nounwind ssp uwtable
define internal fastcc void @BrotliCompressFragmentTwoPassImpl15(%struct.MemoryManager*, i8*, i64, i32*, i8*, i32* nocapture, i64*, i8*) unnamed_addr #2 {
  %9 = alloca [129 x %struct.HuffmanTree], align 16
  %10 = alloca [704 x i8], align 16
  %11 = alloca [64 x i16], align 16
  %12 = alloca [256 x i8], align 16
  %13 = alloca [256 x i16], align 16
  %14 = alloca [256 x i32], align 16
  %15 = alloca [128 x i8], align 16
  %16 = alloca [128 x i16], align 16
  %17 = alloca [128 x i32], align 16
  %18 = icmp eq i64 %2, 0
  br i1 %18, label %1106, label %19

19:                                               ; preds = %8
  %20 = ptrtoint i32* %3 to i64
  %21 = ptrtoint i8* %4 to i64
  %22 = ptrtoint i8* %1 to i64
  %23 = bitcast [256 x i32]* %14 to i8*
  %24 = getelementptr inbounds [256 x i8], [256 x i8]* %12, i64 0, i64 0
  %25 = bitcast [256 x i16]* %13 to i8*
  %26 = getelementptr inbounds [128 x i8], [128 x i8]* %15, i64 0, i64 0
  %27 = bitcast [128 x i16]* %16 to i8*
  %28 = bitcast [128 x i32]* %17 to i8*
  %29 = getelementptr inbounds [256 x i32], [256 x i32]* %14, i64 0, i64 0
  %30 = getelementptr inbounds [256 x i16], [256 x i16]* %13, i64 0, i64 0
  %31 = getelementptr inbounds [128 x i32], [128 x i32]* %17, i64 0, i64 1
  %32 = getelementptr inbounds [128 x i32], [128 x i32]* %17, i64 0, i64 2
  %33 = getelementptr inbounds [128 x i32], [128 x i32]* %17, i64 0, i64 64
  %34 = getelementptr inbounds [128 x i32], [128 x i32]* %17, i64 0, i64 84
  %35 = getelementptr inbounds [128 x i32], [128 x i32]* %17, i64 0, i64 0
  %36 = bitcast [129 x %struct.HuffmanTree]* %9 to i8*
  %37 = getelementptr inbounds [704 x i8], [704 x i8]* %10, i64 0, i64 0
  %38 = bitcast [64 x i16]* %11 to i8*
  %39 = getelementptr inbounds [129 x %struct.HuffmanTree], [129 x %struct.HuffmanTree]* %9, i64 0, i64 0
  %40 = getelementptr inbounds [128 x i8], [128 x i8]* %15, i64 0, i64 64
  %41 = getelementptr inbounds [128 x i8], [128 x i8]* %15, i64 0, i64 24
  %42 = getelementptr inbounds [704 x i8], [704 x i8]* %10, i64 0, i64 24
  %43 = bitcast [128 x i8]* %15 to i64*
  %44 = bitcast i8* %42 to i64*
  %45 = getelementptr inbounds [704 x i8], [704 x i8]* %10, i64 0, i64 32
  %46 = getelementptr inbounds [128 x i8], [128 x i8]* %15, i64 0, i64 48
  %47 = bitcast i8* %46 to i64*
  %48 = bitcast i8* %45 to i64*
  %49 = getelementptr inbounds [704 x i8], [704 x i8]* %10, i64 0, i64 40
  %50 = getelementptr inbounds [128 x i8], [128 x i8]* %15, i64 0, i64 8
  %51 = bitcast i8* %50 to i64*
  %52 = bitcast i8* %49 to i64*
  %53 = getelementptr inbounds [704 x i8], [704 x i8]* %10, i64 0, i64 48
  %54 = getelementptr inbounds [128 x i8], [128 x i8]* %15, i64 0, i64 56
  %55 = bitcast i8* %54 to i64*
  %56 = bitcast i8* %53 to i64*
  %57 = getelementptr inbounds [704 x i8], [704 x i8]* %10, i64 0, i64 56
  %58 = getelementptr inbounds [128 x i8], [128 x i8]* %15, i64 0, i64 16
  %59 = bitcast i8* %58 to i64*
  %60 = bitcast i8* %57 to i64*
  %61 = getelementptr inbounds [64 x i16], [64 x i16]* %11, i64 0, i64 0
  %62 = getelementptr inbounds [64 x i16], [64 x i16]* %11, i64 0, i64 24
  %63 = bitcast i16* %62 to i8*
  %64 = getelementptr inbounds [128 x i16], [128 x i16]* %16, i64 0, i64 8
  %65 = bitcast i16* %64 to i8*
  %66 = getelementptr inbounds [64 x i16], [64 x i16]* %11, i64 0, i64 40
  %67 = bitcast i16* %66 to i8*
  %68 = getelementptr inbounds [128 x i16], [128 x i16]* %16, i64 0, i64 16
  %69 = bitcast i16* %68 to i8*
  %70 = getelementptr inbounds [64 x i16], [64 x i16]* %11, i64 0, i64 56
  %71 = bitcast i16* %70 to i8*
  %72 = getelementptr inbounds [128 x i16], [128 x i16]* %16, i64 0, i64 24
  %73 = bitcast i16* %72 to i8*
  %74 = getelementptr inbounds [128 x i16], [128 x i16]* %16, i64 0, i64 48
  %75 = bitcast i16* %74 to i8*
  %76 = getelementptr inbounds [64 x i16], [64 x i16]* %11, i64 0, i64 32
  %77 = bitcast i16* %76 to i8*
  %78 = getelementptr inbounds [128 x i16], [128 x i16]* %16, i64 0, i64 56
  %79 = bitcast i16* %78 to i8*
  %80 = getelementptr inbounds [64 x i16], [64 x i16]* %11, i64 0, i64 48
  %81 = bitcast i16* %80 to i8*
  %82 = getelementptr inbounds [128 x i16], [128 x i16]* %16, i64 0, i64 64
  %83 = bitcast i8* %41 to i64*
  %84 = bitcast [704 x i8]* %10 to i64*
  %85 = getelementptr inbounds [704 x i8], [704 x i8]* %10, i64 0, i64 64
  %86 = getelementptr inbounds [128 x i8], [128 x i8]* %15, i64 0, i64 32
  %87 = bitcast i8* %86 to i64*
  %88 = bitcast i8* %85 to i64*
  %89 = getelementptr inbounds [704 x i8], [704 x i8]* %10, i64 0, i64 128
  %90 = getelementptr inbounds [128 x i8], [128 x i8]* %15, i64 0, i64 40
  %91 = bitcast i8* %90 to i64*
  %92 = bitcast i8* %89 to i64*
  %93 = getelementptr inbounds [704 x i8], [704 x i8]* %10, i64 0, i64 192
  %94 = bitcast i8* %93 to i64*
  %95 = getelementptr inbounds [704 x i8], [704 x i8]* %10, i64 0, i64 384
  %96 = bitcast i8* %95 to i64*
  %97 = getelementptr inbounds [704 x i8], [704 x i8]* %10, i64 0, i64 256
  %98 = getelementptr inbounds [704 x i8], [704 x i8]* %10, i64 0, i64 448
  %99 = getelementptr inbounds [128 x i8], [128 x i8]* %15, i64 0, i64 1
  %100 = getelementptr inbounds [704 x i8], [704 x i8]* %10, i64 0, i64 136
  %101 = getelementptr inbounds [128 x i8], [128 x i8]* %15, i64 0, i64 9
  %102 = getelementptr inbounds [704 x i8], [704 x i8]* %10, i64 0, i64 264
  %103 = getelementptr inbounds [128 x i8], [128 x i8]* %15, i64 0, i64 17
  %104 = getelementptr inbounds [704 x i8], [704 x i8]* %10, i64 0, i64 456
  %105 = getelementptr inbounds [128 x i8], [128 x i8]* %15, i64 0, i64 2
  %106 = getelementptr inbounds [704 x i8], [704 x i8]* %10, i64 0, i64 144
  %107 = getelementptr inbounds [128 x i8], [128 x i8]* %15, i64 0, i64 10
  %108 = getelementptr inbounds [704 x i8], [704 x i8]* %10, i64 0, i64 272
  %109 = getelementptr inbounds [128 x i8], [128 x i8]* %15, i64 0, i64 18
  %110 = getelementptr inbounds [704 x i8], [704 x i8]* %10, i64 0, i64 464
  %111 = getelementptr inbounds [128 x i8], [128 x i8]* %15, i64 0, i64 3
  %112 = getelementptr inbounds [704 x i8], [704 x i8]* %10, i64 0, i64 152
  %113 = getelementptr inbounds [128 x i8], [128 x i8]* %15, i64 0, i64 11
  %114 = getelementptr inbounds [704 x i8], [704 x i8]* %10, i64 0, i64 280
  %115 = getelementptr inbounds [128 x i8], [128 x i8]* %15, i64 0, i64 19
  %116 = getelementptr inbounds [704 x i8], [704 x i8]* %10, i64 0, i64 472
  %117 = getelementptr inbounds [128 x i8], [128 x i8]* %15, i64 0, i64 4
  %118 = getelementptr inbounds [704 x i8], [704 x i8]* %10, i64 0, i64 160
  %119 = getelementptr inbounds [128 x i8], [128 x i8]* %15, i64 0, i64 12
  %120 = getelementptr inbounds [704 x i8], [704 x i8]* %10, i64 0, i64 288
  %121 = getelementptr inbounds [128 x i8], [128 x i8]* %15, i64 0, i64 20
  %122 = getelementptr inbounds [704 x i8], [704 x i8]* %10, i64 0, i64 480
  %123 = getelementptr inbounds [128 x i8], [128 x i8]* %15, i64 0, i64 5
  %124 = getelementptr inbounds [704 x i8], [704 x i8]* %10, i64 0, i64 168
  %125 = getelementptr inbounds [128 x i8], [128 x i8]* %15, i64 0, i64 13
  %126 = getelementptr inbounds [704 x i8], [704 x i8]* %10, i64 0, i64 296
  %127 = getelementptr inbounds [128 x i8], [128 x i8]* %15, i64 0, i64 21
  %128 = getelementptr inbounds [704 x i8], [704 x i8]* %10, i64 0, i64 488
  %129 = getelementptr inbounds [128 x i8], [128 x i8]* %15, i64 0, i64 6
  %130 = getelementptr inbounds [704 x i8], [704 x i8]* %10, i64 0, i64 176
  %131 = getelementptr inbounds [128 x i8], [128 x i8]* %15, i64 0, i64 14
  %132 = getelementptr inbounds [704 x i8], [704 x i8]* %10, i64 0, i64 304
  %133 = getelementptr inbounds [128 x i8], [128 x i8]* %15, i64 0, i64 22
  %134 = getelementptr inbounds [704 x i8], [704 x i8]* %10, i64 0, i64 496
  %135 = getelementptr inbounds [128 x i8], [128 x i8]* %15, i64 0, i64 7
  %136 = getelementptr inbounds [704 x i8], [704 x i8]* %10, i64 0, i64 184
  %137 = getelementptr inbounds [128 x i8], [128 x i8]* %15, i64 0, i64 15
  %138 = getelementptr inbounds [704 x i8], [704 x i8]* %10, i64 0, i64 312
  %139 = getelementptr inbounds [128 x i8], [128 x i8]* %15, i64 0, i64 23
  %140 = getelementptr inbounds [704 x i8], [704 x i8]* %10, i64 0, i64 504
  %141 = getelementptr inbounds i8, i8* %1, i64 4
  %142 = xor i64 %21, -1
  br label %143

143:                                              ; preds = %1103, %19
  %144 = phi i8* [ %1, %19 ], [ %148, %1103 ]
  %145 = phi i64 [ %2, %19 ], [ %1104, %1103 ]
  %146 = icmp ult i64 %145, 131072
  %147 = select i1 %146, i64 %145, i64 131072
  %148 = getelementptr inbounds i8, i8* %144, i64 %147
  %149 = icmp ugt i64 %147, 15
  br i1 %149, label %150, label %595, !prof !33

150:                                              ; preds = %143
  %151 = add nsw i64 %147, -4
  %152 = add i64 %145, -16
  %153 = icmp ult i64 %151, %152
  %154 = select i1 %153, i64 %151, i64 %152
  %155 = getelementptr inbounds i8, i8* %144, i64 %154
  %156 = ptrtoint i8* %148 to i64
  br label %157

157:                                              ; preds = %585, %150
  %158 = phi i64 [ %20, %150 ], [ %586, %585 ]
  %159 = phi i64 [ %21, %150 ], [ %318, %585 ]
  %160 = phi i8* [ %144, %150 ], [ %587, %585 ]
  %161 = phi i32 [ -1, %150 ], [ %588, %585 ]
  %162 = getelementptr inbounds i8, i8* %160, i64 1
  %163 = bitcast i8* %162 to i64*
  %164 = load i64, i64* %163, align 8
  %165 = sext i32 %161 to i64
  %166 = sub nsw i64 0, %165
  %167 = icmp slt i32 %161, 1
  br label %168

168:                                              ; preds = %206, %157
  %169 = phi i64 [ %164, %157 ], [ %181, %206 ]
  %170 = phi i32 [ 32, %157 ], [ %174, %206 ]
  %171 = phi i8* [ %162, %157 ], [ %177, %206 ]
  %172 = mul i64 %169, 2176830425094160384
  %173 = lshr i64 %172, 49
  %174 = add i32 %170, 1
  %175 = lshr i32 %170, 5
  %176 = zext i32 %175 to i64
  %177 = getelementptr inbounds i8, i8* %171, i64 %176
  %178 = icmp ugt i8* %177, %155
  br i1 %178, label %595, label %179, !prof !34

179:                                              ; preds = %168
  %180 = bitcast i8* %177 to i64*
  %181 = load i64, i64* %180, align 8
  %182 = getelementptr inbounds i8, i8* %171, i64 %166
  %183 = bitcast i8* %171 to i32*
  %184 = load i32, i32* %183, align 4
  %185 = bitcast i8* %182 to i32*
  %186 = load i32, i32* %185, align 4
  %187 = icmp ne i32 %184, %186
  %188 = or i1 %167, %187
  br i1 %188, label %194, label %189, !prof !35

189:                                              ; preds = %179
  %190 = ptrtoint i8* %171 to i64
  %191 = sub i64 %190, %22
  %192 = trunc i64 %191 to i32
  %193 = getelementptr inbounds i32, i32* %5, i64 %173
  store i32 %192, i32* %193, align 4
  br label %209

194:                                              ; preds = %179
  %195 = getelementptr inbounds i32, i32* %5, i64 %173
  %196 = load i32, i32* %195, align 4
  %197 = sext i32 %196 to i64
  %198 = getelementptr inbounds i8, i8* %1, i64 %197
  %199 = ptrtoint i8* %171 to i64
  %200 = sub i64 %199, %22
  %201 = trunc i64 %200 to i32
  store i32 %201, i32* %195, align 4
  %202 = load i32, i32* %183, align 4
  %203 = bitcast i8* %198 to i32*
  %204 = load i32, i32* %203, align 4
  %205 = icmp eq i32 %202, %204
  br i1 %205, label %207, label %206

206:                                              ; preds = %194, %209
  br label %168

207:                                              ; preds = %194
  %208 = ptrtoint i8* %171 to i64
  br label %209

209:                                              ; preds = %207, %189
  %210 = phi i64 [ %190, %189 ], [ %208, %207 ]
  %211 = phi i8* [ %182, %189 ], [ %198, %207 ]
  %212 = ptrtoint i8* %211 to i64
  %213 = sub i64 %210, %212
  %214 = icmp sgt i64 %213, 262128
  br i1 %214, label %206, label %215

215:                                              ; preds = %209
  %216 = getelementptr inbounds i8, i8* %211, i64 4
  %217 = getelementptr inbounds i8, i8* %171, i64 4
  %218 = sub i64 %156, %210
  %219 = add i64 %218, -4
  %220 = lshr i64 %219, 3
  %221 = icmp eq i64 %220, 0
  br i1 %221, label %242, label %222, !prof !34

222:                                              ; preds = %215, %232
  %223 = phi i64 [ %235, %232 ], [ %220, %215 ]
  %224 = phi i8* [ %233, %232 ], [ %217, %215 ]
  %225 = phi i64 [ %234, %232 ], [ 0, %215 ]
  %226 = bitcast i8* %224 to i64*
  %227 = load i64, i64* %226, align 8
  %228 = getelementptr inbounds i8, i8* %216, i64 %225
  %229 = bitcast i8* %228 to i64*
  %230 = load i64, i64* %229, align 8
  %231 = icmp eq i64 %227, %230
  br i1 %231, label %232, label %237, !prof !34

232:                                              ; preds = %222
  %233 = getelementptr inbounds i8, i8* %224, i64 8
  %234 = add nuw i64 %225, 8
  %235 = add nsw i64 %223, -1
  %236 = icmp eq i64 %235, 0
  br i1 %236, label %242, label %222, !prof !34

237:                                              ; preds = %222
  %238 = xor i64 %230, %227
  %239 = call i64 @llvm.cttz.i64(i64 %238, i1 true) #6, !range !36
  %240 = lshr i64 %239, 3
  %241 = or i64 %240, %225
  br label %255

242:                                              ; preds = %232, %215
  %243 = phi i64 [ 0, %215 ], [ %234, %232 ]
  %244 = phi i8* [ %217, %215 ], [ %233, %232 ]
  %245 = and i64 %219, 7
  %246 = icmp eq i64 %245, 0
  br i1 %246, label %255, label %247

247:                                              ; preds = %242
  %248 = getelementptr inbounds i8, i8* %216, i64 %243
  %249 = load i8, i8* %248, align 1
  %250 = load i8, i8* %244, align 1
  %251 = icmp eq i8 %249, %250
  br i1 %251, label %252, label %255, !prof !33

252:                                              ; preds = %247
  %253 = add i64 %243, 1
  %254 = icmp eq i64 %245, 1
  br i1 %254, label %255, label %1107

255:                                              ; preds = %1152, %252, %247, %1107, %1113, %1116, %1122, %1125, %1131, %1134, %1140, %1143, %1149, %242, %237
  %256 = phi i64 [ %241, %237 ], [ %243, %242 ], [ %253, %252 ], [ %243, %247 ], [ %253, %1107 ], [ %1114, %1113 ], [ %1114, %1116 ], [ %1123, %1122 ], [ %1123, %1125 ], [ %1132, %1131 ], [ %1132, %1134 ], [ %1141, %1140 ], [ %1141, %1143 ], [ %1150, %1149 ], [ %1159, %1152 ]
  %257 = add i64 %256, 4
  %258 = trunc i64 %213 to i32
  %259 = ptrtoint i8* %160 to i64
  %260 = sub i64 %210, %259
  %261 = trunc i64 %260 to i32
  %262 = getelementptr inbounds i8, i8* %171, i64 %257
  %263 = icmp ult i32 %261, 6
  br i1 %263, label %264, label %266

264:                                              ; preds = %255
  %265 = inttoptr i64 %158 to i32*
  store i32 %261, i32* %265, align 4
  br label %311

266:                                              ; preds = %255
  %267 = icmp ult i32 %261, 130
  br i1 %267, label %268, label %281

268:                                              ; preds = %266
  %269 = add nsw i32 %261, -2
  %270 = call i32 @llvm.ctlz.i32(i32 %269, i1 true) #6, !range !2
  %271 = sub nsw i32 30, %270
  %272 = lshr i32 %269, %271
  %273 = shl nsw i32 %271, 1
  %274 = add nuw nsw i32 %272, 2
  %275 = add i32 %274, %273
  %276 = shl i32 %272, %271
  %277 = sub i32 %269, %276
  %278 = shl i32 %277, 8
  %279 = or i32 %278, %275
  %280 = inttoptr i64 %158 to i32*
  store i32 %279, i32* %280, align 4
  br label %311

281:                                              ; preds = %266
  %282 = icmp ult i32 %261, 2114
  br i1 %282, label %283, label %293

283:                                              ; preds = %281
  %284 = add nsw i32 %261, -66
  %285 = call i32 @llvm.ctlz.i32(i32 %284, i1 true) #6, !range !2
  %286 = xor i32 %285, 31
  %287 = add nuw nsw i32 %286, 10
  %288 = shl i32 1, %286
  %289 = sub i32 %284, %288
  %290 = shl i32 %289, 8
  %291 = or i32 %290, %287
  %292 = inttoptr i64 %158 to i32*
  store i32 %291, i32* %292, align 4
  br label %311

293:                                              ; preds = %281
  %294 = icmp ult i32 %261, 6210
  br i1 %294, label %295, label %300

295:                                              ; preds = %293
  %296 = shl i32 %261, 8
  %297 = add nsw i32 %296, -541184
  %298 = or i32 %297, 21
  %299 = inttoptr i64 %158 to i32*
  store i32 %298, i32* %299, align 4
  br label %311

300:                                              ; preds = %293
  %301 = icmp ult i32 %261, 22594
  %302 = shl i32 %261, 8
  br i1 %301, label %303, label %307

303:                                              ; preds = %300
  %304 = add i32 %302, -1589760
  %305 = or i32 %304, 22
  %306 = inttoptr i64 %158 to i32*
  store i32 %305, i32* %306, align 4
  br label %311

307:                                              ; preds = %300
  %308 = add i32 %302, -5784064
  %309 = or i32 %308, 23
  %310 = inttoptr i64 %158 to i32*
  store i32 %309, i32* %310, align 4
  br label %311

311:                                              ; preds = %307, %303, %295, %283, %268, %264
  %312 = phi i32* [ %310, %307 ], [ %306, %303 ], [ %299, %295 ], [ %292, %283 ], [ %280, %268 ], [ %265, %264 ]
  %313 = getelementptr inbounds i32, i32* %312, i64 1
  %314 = inttoptr i64 %159 to i8*
  %315 = shl i64 %260, 32
  %316 = ashr exact i64 %315, 32
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %314, i8* align 1 %160, i64 %316, i1 false) #6
  %317 = getelementptr inbounds i8, i8* %314, i64 %316
  %318 = ptrtoint i8* %317 to i64
  %319 = icmp eq i32 %161, %258
  br i1 %319, label %336, label %320

320:                                              ; preds = %311
  %321 = add i32 %258, 3
  %322 = call i32 @llvm.ctlz.i32(i32 %321, i1 true) #6, !range !2
  %323 = xor i32 %322, 31
  %324 = add nsw i32 %323, -1
  %325 = lshr i32 %321, %324
  %326 = and i32 %325, 1
  %327 = or i32 %326, 2
  %328 = shl i32 %327, %324
  %329 = shl nuw nsw i32 %323, 1
  %330 = add nsw i32 %329, -4
  %331 = or i32 %326, %330
  %332 = add nsw i32 %331, 80
  %333 = sub i32 %321, %328
  %334 = shl i32 %333, 8
  %335 = or i32 %334, %332
  br label %336

336:                                              ; preds = %320, %311
  %337 = phi i32 [ %335, %320 ], [ 64, %311 ]
  %338 = phi i32 [ %258, %320 ], [ %161, %311 ]
  store i32 %337, i32* %313, align 4
  %339 = getelementptr inbounds i32, i32* %312, i64 2
  %340 = icmp ult i64 %257, 12
  br i1 %340, label %341, label %344

341:                                              ; preds = %336
  %342 = trunc i64 %257 to i32
  %343 = add nuw nsw i32 %342, 20
  store i32 %343, i32* %339, align 4
  br label %393

344:                                              ; preds = %336
  %345 = icmp ult i64 %257, 72
  br i1 %345, label %346, label %361

346:                                              ; preds = %344
  %347 = add nsw i64 %256, -4
  %348 = trunc i64 %347 to i32
  %349 = call i32 @llvm.ctlz.i32(i32 %348, i1 true) #6, !range !2
  %350 = sub nsw i32 30, %349
  %351 = zext i32 %350 to i64
  %352 = lshr i64 %347, %351
  %353 = shl nuw nsw i64 %351, 1
  %354 = add nuw nsw i64 %352, 28
  %355 = add nuw nsw i64 %354, %353
  %356 = shl i64 %352, %351
  %357 = sub i64 %347, %356
  %358 = shl i64 %357, 8
  %359 = or i64 %358, %355
  %360 = trunc i64 %359 to i32
  store i32 %360, i32* %339, align 4
  br label %393

361:                                              ; preds = %344
  %362 = icmp ult i64 %257, 136
  br i1 %362, label %363, label %372

363:                                              ; preds = %361
  %364 = add nsw i64 %256, -4
  %365 = lshr i64 %364, 5
  %366 = add nuw nsw i64 %365, 54
  %367 = shl i64 %364, 8
  %368 = and i64 %367, 7936
  %369 = or i64 %366, %368
  %370 = trunc i64 %369 to i32
  store i32 %370, i32* %339, align 4
  %371 = getelementptr inbounds i32, i32* %312, i64 3
  store i32 64, i32* %371, align 4
  br label %393

372:                                              ; preds = %361
  %373 = icmp ult i64 %257, 2120
  br i1 %373, label %374, label %387

374:                                              ; preds = %372
  %375 = add nsw i64 %256, -68
  %376 = trunc i64 %375 to i32
  %377 = call i32 @llvm.ctlz.i32(i32 %376, i1 true) #6, !range !2
  %378 = xor i32 %377, 31
  %379 = zext i32 %378 to i64
  %380 = add nuw nsw i64 %379, 52
  %381 = shl i64 1, %379
  %382 = sub i64 %375, %381
  %383 = shl i64 %382, 8
  %384 = or i64 %383, %380
  %385 = trunc i64 %384 to i32
  store i32 %385, i32* %339, align 4
  %386 = getelementptr inbounds i32, i32* %312, i64 3
  store i32 64, i32* %386, align 4
  br label %393

387:                                              ; preds = %372
  %388 = trunc i64 %257 to i32
  %389 = shl i32 %388, 8
  %390 = add i32 %389, -542720
  %391 = or i32 %390, 63
  store i32 %391, i32* %339, align 4
  %392 = getelementptr inbounds i32, i32* %312, i64 3
  store i32 64, i32* %392, align 4
  br label %393

393:                                              ; preds = %387, %374, %363, %346, %341
  %394 = phi i64 [ 4, %387 ], [ 4, %374 ], [ 4, %363 ], [ 3, %346 ], [ 3, %341 ]
  %395 = getelementptr inbounds i32, i32* %312, i64 %394
  %396 = ptrtoint i32* %395 to i64
  %397 = icmp ult i8* %262, %155
  br i1 %397, label %398, label %592, !prof !33

398:                                              ; preds = %393
  %399 = getelementptr inbounds i8, i8* %262, i64 -3
  %400 = bitcast i8* %399 to i64*
  %401 = load i64, i64* %400, align 8
  %402 = lshr i64 %401, 24
  %403 = mul i64 %402, 2176830425094160384
  %404 = mul i64 %401, 2176830425094160384
  %405 = lshr i64 %404, 49
  %406 = ptrtoint i8* %262 to i64
  %407 = sub i64 %406, %22
  %408 = trunc i64 %407 to i32
  %409 = getelementptr inbounds i32, i32* %5, i64 %405
  %410 = lshr i64 %401, 8
  %411 = mul i64 %410, 2176830425094160384
  %412 = lshr i64 %411, 49
  %413 = add i32 %408, -2
  %414 = getelementptr inbounds i32, i32* %5, i64 %412
  store i32 %413, i32* %414, align 4
  %415 = add i32 %408, -1
  store i32 %415, i32* %409, align 4
  %416 = lshr i64 %403, 49
  %417 = getelementptr inbounds i32, i32* %5, i64 %416
  %418 = load i32, i32* %417, align 4
  store i32 %408, i32* %417, align 4
  %419 = sext i32 %418 to i64
  %420 = getelementptr inbounds i8, i8* %1, i64 %419
  %421 = ptrtoint i8* %420 to i64
  %422 = sub i64 %406, %421
  %423 = icmp slt i64 %422, 262129
  br i1 %423, label %424, label %585

424:                                              ; preds = %398
  %425 = bitcast i8* %262 to i32*
  %426 = load i32, i32* %425, align 4
  %427 = bitcast i8* %420 to i32*
  %428 = load i32, i32* %427, align 4
  %429 = icmp eq i32 %426, %428
  br i1 %429, label %436, label %585

430:                                              ; preds = %551
  %431 = bitcast i8* %484 to i32*
  %432 = load i32, i32* %431, align 4
  %433 = bitcast i8* %578 to i32*
  %434 = load i32, i32* %433, align 4
  %435 = icmp eq i32 %432, %434
  br i1 %435, label %436, label %582

436:                                              ; preds = %424, %430
  %437 = phi i8* [ %484, %430 ], [ %262, %424 ]
  %438 = phi i64 [ %577, %430 ], [ %419, %424 ]
  %439 = phi i64 [ %559, %430 ], [ %406, %424 ]
  %440 = phi i64 [ %580, %430 ], [ %422, %424 ]
  %441 = phi i64 [ %549, %430 ], [ %396, %424 ]
  %442 = getelementptr inbounds i8, i8* %141, i64 %438
  %443 = getelementptr inbounds i8, i8* %437, i64 4
  %444 = sub i64 %156, %439
  %445 = add i64 %444, -4
  %446 = lshr i64 %445, 3
  %447 = icmp eq i64 %446, 0
  br i1 %447, label %468, label %448, !prof !34

448:                                              ; preds = %436, %458
  %449 = phi i64 [ %461, %458 ], [ %446, %436 ]
  %450 = phi i8* [ %459, %458 ], [ %443, %436 ]
  %451 = phi i64 [ %460, %458 ], [ 0, %436 ]
  %452 = bitcast i8* %450 to i64*
  %453 = load i64, i64* %452, align 8
  %454 = getelementptr inbounds i8, i8* %442, i64 %451
  %455 = bitcast i8* %454 to i64*
  %456 = load i64, i64* %455, align 8
  %457 = icmp eq i64 %453, %456
  br i1 %457, label %458, label %463, !prof !34

458:                                              ; preds = %448
  %459 = getelementptr inbounds i8, i8* %450, i64 8
  %460 = add nuw i64 %451, 8
  %461 = add nsw i64 %449, -1
  %462 = icmp eq i64 %461, 0
  br i1 %462, label %468, label %448, !prof !34

463:                                              ; preds = %448
  %464 = xor i64 %456, %453
  %465 = call i64 @llvm.cttz.i64(i64 %464, i1 true) #6, !range !36
  %466 = lshr i64 %465, 3
  %467 = or i64 %466, %451
  br label %481

468:                                              ; preds = %458, %436
  %469 = phi i64 [ 0, %436 ], [ %460, %458 ]
  %470 = phi i8* [ %443, %436 ], [ %459, %458 ]
  %471 = and i64 %445, 7
  %472 = icmp eq i64 %471, 0
  br i1 %472, label %481, label %473

473:                                              ; preds = %468
  %474 = getelementptr inbounds i8, i8* %442, i64 %469
  %475 = load i8, i8* %474, align 1
  %476 = load i8, i8* %470, align 1
  %477 = icmp eq i8 %475, %476
  br i1 %477, label %478, label %481, !prof !33

478:                                              ; preds = %473
  %479 = add i64 %469, 1
  %480 = icmp eq i64 %471, 1
  br i1 %480, label %481, label %1160

481:                                              ; preds = %1205, %478, %473, %1160, %1166, %1169, %1175, %1178, %1184, %1187, %1193, %1196, %1202, %468, %463
  %482 = phi i64 [ %467, %463 ], [ %469, %468 ], [ %479, %478 ], [ %469, %473 ], [ %479, %1160 ], [ %1167, %1166 ], [ %1167, %1169 ], [ %1176, %1175 ], [ %1176, %1178 ], [ %1185, %1184 ], [ %1185, %1187 ], [ %1194, %1193 ], [ %1194, %1196 ], [ %1203, %1202 ], [ %1212, %1205 ]
  %483 = add i64 %482, 4
  %484 = getelementptr inbounds i8, i8* %437, i64 %483
  %485 = trunc i64 %440 to i32
  %486 = icmp ult i64 %483, 10
  br i1 %486, label %487, label %491

487:                                              ; preds = %481
  %488 = trunc i64 %483 to i32
  %489 = add nuw nsw i32 %488, 38
  %490 = inttoptr i64 %441 to i32*
  store i32 %489, i32* %490, align 4
  br label %530

491:                                              ; preds = %481
  %492 = icmp ult i64 %483, 134
  br i1 %492, label %493, label %509

493:                                              ; preds = %491
  %494 = add nsw i64 %482, -2
  %495 = trunc i64 %494 to i32
  %496 = call i32 @llvm.ctlz.i32(i32 %495, i1 true) #6, !range !2
  %497 = sub nsw i32 30, %496
  %498 = zext i32 %497 to i64
  %499 = lshr i64 %494, %498
  %500 = shl nuw nsw i64 %498, 1
  %501 = add nuw nsw i64 %499, 44
  %502 = add nuw nsw i64 %501, %500
  %503 = shl i64 %499, %498
  %504 = sub i64 %494, %503
  %505 = shl i64 %504, 8
  %506 = or i64 %505, %502
  %507 = trunc i64 %506 to i32
  %508 = inttoptr i64 %441 to i32*
  store i32 %507, i32* %508, align 4
  br label %530

509:                                              ; preds = %491
  %510 = icmp ult i64 %483, 2118
  br i1 %510, label %511, label %524

511:                                              ; preds = %509
  %512 = add nsw i64 %482, -66
  %513 = trunc i64 %512 to i32
  %514 = call i32 @llvm.ctlz.i32(i32 %513, i1 true) #6, !range !2
  %515 = xor i32 %514, 31
  %516 = zext i32 %515 to i64
  %517 = add nuw nsw i64 %516, 52
  %518 = shl i64 1, %516
  %519 = sub i64 %512, %518
  %520 = shl i64 %519, 8
  %521 = or i64 %520, %517
  %522 = trunc i64 %521 to i32
  %523 = inttoptr i64 %441 to i32*
  store i32 %522, i32* %523, align 4
  br label %530

524:                                              ; preds = %509
  %525 = trunc i64 %483 to i32
  %526 = shl i32 %525, 8
  %527 = add i32 %526, -542208
  %528 = or i32 %527, 63
  %529 = inttoptr i64 %441 to i32*
  store i32 %528, i32* %529, align 4
  br label %530

530:                                              ; preds = %524, %511, %493, %487
  %531 = phi i32* [ %529, %524 ], [ %523, %511 ], [ %508, %493 ], [ %490, %487 ]
  %532 = getelementptr inbounds i32, i32* %531, i64 1
  %533 = add i32 %485, 3
  %534 = call i32 @llvm.ctlz.i32(i32 %533, i1 true) #6, !range !2
  %535 = xor i32 %534, 31
  %536 = add nsw i32 %535, -1
  %537 = lshr i32 %533, %536
  %538 = and i32 %537, 1
  %539 = or i32 %538, 2
  %540 = shl i32 %539, %536
  %541 = shl nuw nsw i32 %535, 1
  %542 = add nsw i32 %541, -4
  %543 = or i32 %538, %542
  %544 = add nsw i32 %543, 80
  %545 = sub i32 %533, %540
  %546 = shl i32 %545, 8
  %547 = or i32 %546, %544
  store i32 %547, i32* %532, align 4
  %548 = getelementptr inbounds i32, i32* %531, i64 2
  %549 = ptrtoint i32* %548 to i64
  %550 = icmp ult i8* %484, %155
  br i1 %550, label %551, label %589, !prof !33

551:                                              ; preds = %530
  %552 = getelementptr inbounds i8, i8* %484, i64 -3
  %553 = bitcast i8* %552 to i64*
  %554 = load i64, i64* %553, align 8
  %555 = lshr i64 %554, 24
  %556 = mul i64 %555, 2176830425094160384
  %557 = mul i64 %554, 2176830425094160384
  %558 = lshr i64 %557, 49
  %559 = ptrtoint i8* %484 to i64
  %560 = sub i64 %559, %22
  %561 = trunc i64 %560 to i32
  %562 = add i32 %561, -3
  %563 = getelementptr inbounds i32, i32* %5, i64 %558
  store i32 %562, i32* %563, align 4
  %564 = lshr i64 %554, 8
  %565 = mul i64 %564, 2176830425094160384
  %566 = lshr i64 %565, 49
  %567 = add i32 %561, -2
  %568 = getelementptr inbounds i32, i32* %5, i64 %566
  store i32 %567, i32* %568, align 4
  %569 = lshr i64 %554, 16
  %570 = mul i64 %569, 2176830425094160384
  %571 = lshr i64 %570, 49
  %572 = add i32 %561, -1
  %573 = getelementptr inbounds i32, i32* %5, i64 %571
  store i32 %572, i32* %573, align 4
  %574 = lshr i64 %556, 49
  %575 = getelementptr inbounds i32, i32* %5, i64 %574
  %576 = load i32, i32* %575, align 4
  store i32 %561, i32* %575, align 4
  %577 = sext i32 %576 to i64
  %578 = getelementptr inbounds i8, i8* %1, i64 %577
  %579 = ptrtoint i8* %578 to i64
  %580 = sub i64 %559, %579
  %581 = icmp slt i64 %580, 262129
  br i1 %581, label %430, label %582

582:                                              ; preds = %551, %430
  %583 = trunc i64 %440 to i32
  %584 = ptrtoint i32* %548 to i64
  br label %585

585:                                              ; preds = %582, %424, %398
  %586 = phi i64 [ %396, %398 ], [ %396, %424 ], [ %584, %582 ]
  %587 = phi i8* [ %262, %398 ], [ %262, %424 ], [ %484, %582 ]
  %588 = phi i32 [ %338, %398 ], [ %338, %424 ], [ %583, %582 ]
  br label %157

589:                                              ; preds = %530
  %590 = ptrtoint i8* %317 to i64
  %591 = ptrtoint i32* %548 to i64
  br label %595

592:                                              ; preds = %393
  %593 = ptrtoint i8* %317 to i64
  %594 = ptrtoint i32* %395 to i64
  br label %595

595:                                              ; preds = %168, %592, %589, %143
  %596 = phi i64 [ %20, %143 ], [ %591, %589 ], [ %594, %592 ], [ %158, %168 ]
  %597 = phi i64 [ %21, %143 ], [ %590, %589 ], [ %593, %592 ], [ %159, %168 ]
  %598 = phi i8* [ %144, %143 ], [ %484, %589 ], [ %262, %592 ], [ %160, %168 ]
  %599 = icmp ult i8* %598, %148
  br i1 %599, label %600, label %661

600:                                              ; preds = %595
  %601 = ptrtoint i8* %148 to i64
  %602 = ptrtoint i8* %598 to i64
  %603 = sub i64 %601, %602
  %604 = trunc i64 %603 to i32
  %605 = icmp ult i32 %604, 6
  br i1 %605, label %606, label %608

606:                                              ; preds = %600
  %607 = inttoptr i64 %596 to i32*
  store i32 %604, i32* %607, align 4
  br label %653

608:                                              ; preds = %600
  %609 = icmp ult i32 %604, 130
  br i1 %609, label %610, label %623

610:                                              ; preds = %608
  %611 = add nsw i32 %604, -2
  %612 = call i32 @llvm.ctlz.i32(i32 %611, i1 true) #6, !range !2
  %613 = sub nsw i32 30, %612
  %614 = lshr i32 %611, %613
  %615 = shl nsw i32 %613, 1
  %616 = add nuw nsw i32 %614, 2
  %617 = add i32 %616, %615
  %618 = shl i32 %614, %613
  %619 = sub i32 %611, %618
  %620 = shl i32 %619, 8
  %621 = or i32 %620, %617
  %622 = inttoptr i64 %596 to i32*
  store i32 %621, i32* %622, align 4
  br label %653

623:                                              ; preds = %608
  %624 = icmp ult i32 %604, 2114
  br i1 %624, label %625, label %635

625:                                              ; preds = %623
  %626 = add nsw i32 %604, -66
  %627 = call i32 @llvm.ctlz.i32(i32 %626, i1 true) #6, !range !2
  %628 = xor i32 %627, 31
  %629 = add nuw nsw i32 %628, 10
  %630 = shl i32 1, %628
  %631 = sub i32 %626, %630
  %632 = shl i32 %631, 8
  %633 = or i32 %632, %629
  %634 = inttoptr i64 %596 to i32*
  store i32 %633, i32* %634, align 4
  br label %653

635:                                              ; preds = %623
  %636 = icmp ult i32 %604, 6210
  br i1 %636, label %637, label %642

637:                                              ; preds = %635
  %638 = shl i32 %604, 8
  %639 = add nsw i32 %638, -541184
  %640 = or i32 %639, 21
  %641 = inttoptr i64 %596 to i32*
  store i32 %640, i32* %641, align 4
  br label %653

642:                                              ; preds = %635
  %643 = icmp ult i32 %604, 22594
  %644 = shl i32 %604, 8
  br i1 %643, label %645, label %649

645:                                              ; preds = %642
  %646 = add i32 %644, -1589760
  %647 = or i32 %646, 22
  %648 = inttoptr i64 %596 to i32*
  store i32 %647, i32* %648, align 4
  br label %653

649:                                              ; preds = %642
  %650 = add i32 %644, -5784064
  %651 = or i32 %650, 23
  %652 = inttoptr i64 %596 to i32*
  store i32 %651, i32* %652, align 4
  br label %653

653:                                              ; preds = %649, %645, %637, %625, %610, %606
  %654 = phi i32* [ %652, %649 ], [ %648, %645 ], [ %641, %637 ], [ %634, %625 ], [ %622, %610 ], [ %607, %606 ]
  %655 = getelementptr inbounds i32, i32* %654, i64 1
  %656 = ptrtoint i32* %655 to i64
  %657 = inttoptr i64 %597 to i8*
  %658 = and i64 %603, 4294967295
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %657, i8* align 1 %598, i64 %658, i1 false) #6
  %659 = getelementptr inbounds i8, i8* %657, i64 %658
  %660 = ptrtoint i8* %659 to i64
  br label %661

661:                                              ; preds = %653, %595
  %662 = phi i64 [ %656, %653 ], [ %596, %595 ]
  %663 = phi i64 [ %660, %653 ], [ %597, %595 ]
  %664 = sub i64 %663, %21
  %665 = uitofp i64 %147 to double
  %666 = uitofp i64 %664 to double
  %667 = fmul double %665, 0x3FEF5C28F5C28F5C
  %668 = fcmp ogt double %667, %666
  br i1 %668, label %743, label %669

669:                                              ; preds = %661
  call void @llvm.lifetime.start.p0i8(i64 1024, i8* nonnull %23) #6
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %23, i8 0, i64 1024, i1 false) #6
  %670 = fmul double %665, 8.000000e+00
  %671 = fmul double %670, 0x3FEF5C28F5C28F5C
  %672 = fdiv double %671, 4.300000e+01
  %673 = icmp eq i64 %147, 0
  br i1 %673, label %684, label %674

674:                                              ; preds = %669, %674
  %675 = phi i64 [ %682, %674 ], [ 0, %669 ]
  %676 = getelementptr inbounds i8, i8* %144, i64 %675
  %677 = load i8, i8* %676, align 1
  %678 = zext i8 %677 to i64
  %679 = getelementptr inbounds [256 x i32], [256 x i32]* %14, i64 0, i64 %678
  %680 = load i32, i32* %679, align 4
  %681 = add i32 %680, 1
  store i32 %681, i32* %679, align 4
  %682 = add i64 %675, 43
  %683 = icmp ult i64 %682, %147
  br i1 %683, label %674, label %684

684:                                              ; preds = %674, %669
  br label %685

685:                                              ; preds = %684, %719
  %686 = phi double [ %722, %719 ], [ 0.000000e+00, %684 ]
  %687 = phi i64 [ %711, %719 ], [ 0, %684 ]
  %688 = phi i64 [ %708, %719 ], [ 0, %684 ]
  %689 = getelementptr inbounds [256 x i32], [256 x i32]* %14, i64 0, i64 %688
  %690 = load i32, i32* %689, align 8
  %691 = zext i32 %690 to i64
  %692 = icmp ult i32 %690, 256
  br i1 %692, label %693, label %697

693:                                              ; preds = %685
  %694 = getelementptr inbounds [256 x double], [256 x double]* @kBrotliLog2Table, i64 0, i64 %691
  %695 = load double, double* %694, align 8
  %696 = uitofp i32 %690 to double
  br label %700

697:                                              ; preds = %685
  %698 = uitofp i32 %690 to double
  %699 = call double @log2(double %698) #6
  br label %700

700:                                              ; preds = %697, %693
  %701 = phi double [ %696, %693 ], [ %698, %697 ]
  %702 = phi double [ %695, %693 ], [ %699, %697 ]
  %703 = or i64 %688, 1
  %704 = getelementptr inbounds [256 x i32], [256 x i32]* %14, i64 0, i64 %703
  %705 = fmul double %701, %702
  %706 = fsub double %686, %705
  %707 = add i64 %687, %691
  %708 = add nuw nsw i64 %688, 2
  %709 = load i32, i32* %704, align 4
  %710 = zext i32 %709 to i64
  %711 = add i64 %707, %710
  %712 = uitofp i32 %709 to double
  %713 = icmp ult i32 %709, 256
  br i1 %713, label %714, label %717

714:                                              ; preds = %700
  %715 = getelementptr inbounds [256 x double], [256 x double]* @kBrotliLog2Table, i64 0, i64 %710
  %716 = load double, double* %715, align 8
  br label %719

717:                                              ; preds = %700
  %718 = call double @log2(double %712) #6
  br label %719

719:                                              ; preds = %717, %714
  %720 = phi double [ %716, %714 ], [ %718, %717 ]
  %721 = fmul double %720, %712
  %722 = fsub double %706, %721
  %723 = icmp ult i64 %708, 256
  br i1 %723, label %685, label %724

724:                                              ; preds = %719
  %725 = icmp eq i64 %711, 0
  %726 = uitofp i64 %711 to double
  br i1 %725, label %738, label %727

727:                                              ; preds = %724
  %728 = icmp ult i64 %711, 256
  br i1 %728, label %729, label %732

729:                                              ; preds = %727
  %730 = getelementptr inbounds [256 x double], [256 x double]* @kBrotliLog2Table, i64 0, i64 %711
  %731 = load double, double* %730, align 8
  br label %734

732:                                              ; preds = %727
  %733 = call double @log2(double %726) #6
  br label %734

734:                                              ; preds = %732, %729
  %735 = phi double [ %731, %729 ], [ %733, %732 ]
  %736 = fmul double %735, %726
  %737 = fadd double %722, %736
  br label %738

738:                                              ; preds = %734, %724
  %739 = phi double [ %737, %734 ], [ %722, %724 ]
  %740 = fcmp olt double %739, %726
  %741 = select i1 %740, double %726, double %739
  %742 = fcmp uge double %741, %672
  call void @llvm.lifetime.end.p0i8(i64 1024, i8* nonnull %23) #6
  br i1 %742, label %1055, label %743

743:                                              ; preds = %738, %661
  %744 = sub i64 %662, %20
  %745 = ashr exact i64 %744, 2
  %746 = load i64, i64* %6, align 8, !alias.scope !465, !noalias !468
  %747 = lshr i64 %746, 3
  %748 = getelementptr inbounds i8, i8* %7, i64 %747
  %749 = load i8, i8* %748, align 1, !alias.scope !468, !noalias !465
  %750 = zext i8 %749 to i64
  %751 = bitcast i8* %748 to i64*
  store i64 %750, i64* %751, align 8, !alias.scope !468, !noalias !465
  %752 = add i64 %746, 1
  %753 = icmp ult i64 %147, 65537
  %754 = select i1 %753, i64 4, i64 5
  %755 = add nsw i64 %754, -4
  %756 = lshr i64 %752, 3
  %757 = getelementptr inbounds i8, i8* %7, i64 %756
  %758 = load i8, i8* %757, align 1, !alias.scope !470, !noalias !473
  %759 = zext i8 %758 to i64
  %760 = and i64 %752, 7
  %761 = shl i64 %755, %760
  %762 = or i64 %761, %759
  %763 = bitcast i8* %757 to i64*
  store i64 %762, i64* %763, align 8, !alias.scope !470, !noalias !473
  %764 = add i64 %746, 3
  %765 = shl nuw nsw i64 %754, 2
  %766 = add nsw i64 %147, -1
  %767 = lshr i64 %764, 3
  %768 = getelementptr inbounds i8, i8* %7, i64 %767
  %769 = load i8, i8* %768, align 1, !alias.scope !475, !noalias !478
  %770 = zext i8 %769 to i64
  %771 = and i64 %764, 7
  %772 = shl i64 %766, %771
  %773 = or i64 %772, %770
  %774 = bitcast i8* %768 to i64*
  store i64 %773, i64* %774, align 8, !alias.scope !475, !noalias !478
  %775 = add i64 %764, %765
  %776 = lshr i64 %775, 3
  %777 = getelementptr inbounds i8, i8* %7, i64 %776
  %778 = load i8, i8* %777, align 1, !alias.scope !480, !noalias !483
  %779 = zext i8 %778 to i64
  %780 = bitcast i8* %777 to i64*
  store i64 %779, i64* %780, align 8, !alias.scope !480, !noalias !483
  %781 = add i64 %775, 1
  %782 = lshr i64 %781, 3
  %783 = getelementptr inbounds i8, i8* %7, i64 %782
  %784 = load i8, i8* %783, align 1, !alias.scope !485, !noalias !488
  %785 = zext i8 %784 to i64
  %786 = bitcast i8* %783 to i64*
  store i64 %785, i64* %786, align 8, !alias.scope !485, !noalias !488
  %787 = add i64 %775, 14
  store i64 %787, i64* %6, align 8, !alias.scope !488, !noalias !485
  call void @llvm.lifetime.start.p0i8(i64 256, i8* nonnull %24) #6
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %24, i8 -86, i64 256, i1 false) #6
  call void @llvm.lifetime.start.p0i8(i64 512, i8* nonnull %25) #6
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %25, i8 -86, i64 512, i1 false) #6
  call void @llvm.lifetime.start.p0i8(i64 1024, i8* nonnull %23) #6
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %23, i8 0, i64 1024, i1 false) #6
  call void @llvm.lifetime.start.p0i8(i64 128, i8* nonnull %26) #6
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %26, i8 0, i64 128, i1 false) #6
  call void @llvm.lifetime.start.p0i8(i64 256, i8* nonnull %27) #6
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %27, i8 0, i64 256, i1 false) #6
  call void @llvm.lifetime.start.p0i8(i64 512, i8* nonnull %28) #6
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %28, i8 0, i64 512, i1 false) #6
  %788 = icmp eq i64 %664, 0
  br i1 %788, label %843, label %789

789:                                              ; preds = %743
  %790 = add i64 %663, %142
  %791 = and i64 %664, 3
  %792 = icmp ult i64 %790, 3
  br i1 %792, label %828, label %793

793:                                              ; preds = %789
  %794 = sub i64 %664, %791
  br label %795

795:                                              ; preds = %795, %793
  %796 = phi i64 [ 0, %793 ], [ %825, %795 ]
  %797 = phi i64 [ %794, %793 ], [ %826, %795 ]
  %798 = getelementptr inbounds i8, i8* %4, i64 %796
  %799 = load i8, i8* %798, align 1
  %800 = zext i8 %799 to i64
  %801 = getelementptr inbounds [256 x i32], [256 x i32]* %14, i64 0, i64 %800
  %802 = load i32, i32* %801, align 4
  %803 = add i32 %802, 1
  store i32 %803, i32* %801, align 4
  %804 = or i64 %796, 1
  %805 = getelementptr inbounds i8, i8* %4, i64 %804
  %806 = load i8, i8* %805, align 1
  %807 = zext i8 %806 to i64
  %808 = getelementptr inbounds [256 x i32], [256 x i32]* %14, i64 0, i64 %807
  %809 = load i32, i32* %808, align 4
  %810 = add i32 %809, 1
  store i32 %810, i32* %808, align 4
  %811 = or i64 %796, 2
  %812 = getelementptr inbounds i8, i8* %4, i64 %811
  %813 = load i8, i8* %812, align 1
  %814 = zext i8 %813 to i64
  %815 = getelementptr inbounds [256 x i32], [256 x i32]* %14, i64 0, i64 %814
  %816 = load i32, i32* %815, align 4
  %817 = add i32 %816, 1
  store i32 %817, i32* %815, align 4
  %818 = or i64 %796, 3
  %819 = getelementptr inbounds i8, i8* %4, i64 %818
  %820 = load i8, i8* %819, align 1
  %821 = zext i8 %820 to i64
  %822 = getelementptr inbounds [256 x i32], [256 x i32]* %14, i64 0, i64 %821
  %823 = load i32, i32* %822, align 4
  %824 = add i32 %823, 1
  store i32 %824, i32* %822, align 4
  %825 = add nuw i64 %796, 4
  %826 = add i64 %797, -4
  %827 = icmp eq i64 %826, 0
  br i1 %827, label %828, label %795

828:                                              ; preds = %795, %789
  %829 = phi i64 [ 0, %789 ], [ %825, %795 ]
  %830 = icmp eq i64 %791, 0
  br i1 %830, label %843, label %831

831:                                              ; preds = %828, %831
  %832 = phi i64 [ %840, %831 ], [ %829, %828 ]
  %833 = phi i64 [ %841, %831 ], [ %791, %828 ]
  %834 = getelementptr inbounds i8, i8* %4, i64 %832
  %835 = load i8, i8* %834, align 1
  %836 = zext i8 %835 to i64
  %837 = getelementptr inbounds [256 x i32], [256 x i32]* %14, i64 0, i64 %836
  %838 = load i32, i32* %837, align 4
  %839 = add i32 %838, 1
  store i32 %839, i32* %837, align 4
  %840 = add nuw i64 %832, 1
  %841 = add i64 %833, -1
  %842 = icmp eq i64 %841, 0
  br i1 %842, label %843, label %831, !llvm.loop !490

843:                                              ; preds = %828, %831, %743
  call void @BrotliBuildAndStoreHuffmanTreeFast(%struct.MemoryManager* %0, i32* nonnull %29, i64 %664, i64 8, i8* nonnull %24, i16* nonnull %30, i64* %6, i8* %7) #6
  %844 = icmp eq i64 %744, 0
  br i1 %844, label %891, label %845

845:                                              ; preds = %843
  %846 = and i64 %745, 1
  %847 = icmp eq i64 %744, 4
  br i1 %847, label %871, label %848

848:                                              ; preds = %845
  %849 = sub nsw i64 %745, %846
  br label %850

850:                                              ; preds = %850, %848
  %851 = phi i64 [ 0, %848 ], [ %868, %850 ]
  %852 = phi i64 [ %849, %848 ], [ %869, %850 ]
  %853 = getelementptr inbounds i32, i32* %3, i64 %851
  %854 = load i32, i32* %853, align 4
  %855 = and i32 %854, 255
  %856 = zext i32 %855 to i64
  %857 = getelementptr inbounds [128 x i32], [128 x i32]* %17, i64 0, i64 %856
  %858 = load i32, i32* %857, align 4
  %859 = add i32 %858, 1
  store i32 %859, i32* %857, align 4
  %860 = or i64 %851, 1
  %861 = getelementptr inbounds i32, i32* %3, i64 %860
  %862 = load i32, i32* %861, align 4
  %863 = and i32 %862, 255
  %864 = zext i32 %863 to i64
  %865 = getelementptr inbounds [128 x i32], [128 x i32]* %17, i64 0, i64 %864
  %866 = load i32, i32* %865, align 4
  %867 = add i32 %866, 1
  store i32 %867, i32* %865, align 4
  %868 = add nuw i64 %851, 2
  %869 = add i64 %852, -2
  %870 = icmp eq i64 %869, 0
  br i1 %870, label %871, label %850

871:                                              ; preds = %850, %845
  %872 = phi i64 [ 0, %845 ], [ %868, %850 ]
  %873 = icmp eq i64 %846, 0
  br i1 %873, label %882, label %874

874:                                              ; preds = %871
  %875 = getelementptr inbounds i32, i32* %3, i64 %872
  %876 = load i32, i32* %875, align 4
  %877 = and i32 %876, 255
  %878 = zext i32 %877 to i64
  %879 = getelementptr inbounds [128 x i32], [128 x i32]* %17, i64 0, i64 %878
  %880 = load i32, i32* %879, align 4
  %881 = add i32 %880, 1
  store i32 %881, i32* %879, align 4
  br label %882

882:                                              ; preds = %871, %874
  %883 = load i32, i32* %31, align 4
  %884 = load i32, i32* %32, align 8
  %885 = load i32, i32* %33, align 16
  %886 = load i32, i32* %34, align 16
  %887 = add i32 %883, 1
  %888 = add i32 %884, 1
  %889 = add i32 %885, 1
  %890 = add i32 %886, 1
  br label %891

891:                                              ; preds = %882, %843
  %892 = phi i32 [ %890, %882 ], [ 1, %843 ]
  %893 = phi i32 [ %889, %882 ], [ 1, %843 ]
  %894 = phi i32 [ %888, %882 ], [ 1, %843 ]
  %895 = phi i32 [ %887, %882 ], [ 1, %843 ]
  store i32 %895, i32* %31, align 4
  store i32 %894, i32* %32, align 8
  store i32 %893, i32* %33, align 16
  store i32 %892, i32* %34, align 16
  call void @llvm.lifetime.start.p0i8(i64 1032, i8* nonnull %36) #6
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %36, i8 -86, i64 1032, i1 false) #6
  call void @llvm.lifetime.start.p0i8(i64 704, i8* nonnull %37) #6
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %37, i8 0, i64 704, i1 false) #6
  call void @llvm.lifetime.start.p0i8(i64 128, i8* nonnull %38) #6
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %38, i8 -86, i64 128, i1 false) #6
  call void @BrotliCreateHuffmanTree(i32* nonnull %35, i64 64, i32 15, %struct.HuffmanTree* nonnull %39, i8* nonnull %26) #6
  call void @BrotliCreateHuffmanTree(i32* %33, i64 64, i32 14, %struct.HuffmanTree* nonnull %39, i8* %40) #6
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 16 %37, i8* align 8 %41, i64 24, i1 false) #6
  %896 = load i64, i64* %43, align 16
  store i64 %896, i64* %44, align 8
  %897 = load i64, i64* %47, align 16
  store i64 %897, i64* %48, align 16
  %898 = load i64, i64* %51, align 8
  store i64 %898, i64* %52, align 8
  %899 = load i64, i64* %55, align 8
  store i64 %899, i64* %56, align 16
  %900 = load i64, i64* %59, align 16
  store i64 %900, i64* %60, align 8
  call void @BrotliConvertBitDepthsToSymbols(i8* nonnull %37, i64 64, i16* nonnull %61) #6
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 16 %27, i8* align 16 %63, i64 16, i1 false) #6
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 16 %65, i8* align 16 %67, i64 16, i1 false) #6
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 16 %69, i8* align 16 %71, i64 16, i1 false) #6
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 16 %73, i8* nonnull align 16 %38, i64 48, i1 false) #6
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 16 %75, i8* align 16 %77, i64 16, i1 false) #6
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 16 %79, i8* align 16 %81, i64 16, i1 false) #6
  call void @BrotliConvertBitDepthsToSymbols(i8* %40, i64 64, i16* %82) #6
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %37, i8 0, i64 64, i1 false) #6
  %901 = load i64, i64* %83, align 8
  store i64 %901, i64* %84, align 16
  %902 = load i64, i64* %87, align 16
  store i64 %902, i64* %88, align 16
  %903 = load i64, i64* %91, align 8
  store i64 %903, i64* %92, align 16
  %904 = load i64, i64* %47, align 16
  store i64 %904, i64* %94, align 16
  %905 = load i64, i64* %55, align 8
  store i64 %905, i64* %96, align 16
  %906 = load i8, i8* %26, align 16
  store i8 %906, i8* %89, align 16
  %907 = load i8, i8* %50, align 8
  store i8 %907, i8* %97, align 16
  %908 = load i8, i8* %58, align 16
  store i8 %908, i8* %98, align 16
  %909 = load i8, i8* %99, align 1
  store i8 %909, i8* %100, align 8
  %910 = load i8, i8* %101, align 1
  store i8 %910, i8* %102, align 8
  %911 = load i8, i8* %103, align 1
  store i8 %911, i8* %104, align 8
  %912 = load i8, i8* %105, align 2
  store i8 %912, i8* %106, align 16
  %913 = load i8, i8* %107, align 2
  store i8 %913, i8* %108, align 16
  %914 = load i8, i8* %109, align 2
  store i8 %914, i8* %110, align 16
  %915 = load i8, i8* %111, align 1
  store i8 %915, i8* %112, align 8
  %916 = load i8, i8* %113, align 1
  store i8 %916, i8* %114, align 8
  %917 = load i8, i8* %115, align 1
  store i8 %917, i8* %116, align 8
  %918 = load i8, i8* %117, align 4
  store i8 %918, i8* %118, align 16
  %919 = load i8, i8* %119, align 4
  store i8 %919, i8* %120, align 16
  %920 = load i8, i8* %121, align 4
  store i8 %920, i8* %122, align 16
  %921 = load i8, i8* %123, align 1
  store i8 %921, i8* %124, align 8
  %922 = load i8, i8* %125, align 1
  store i8 %922, i8* %126, align 8
  %923 = load i8, i8* %127, align 1
  store i8 %923, i8* %128, align 8
  %924 = load i8, i8* %129, align 2
  store i8 %924, i8* %130, align 16
  %925 = load i8, i8* %131, align 2
  store i8 %925, i8* %132, align 16
  %926 = load i8, i8* %133, align 2
  store i8 %926, i8* %134, align 16
  %927 = load i8, i8* %135, align 1
  store i8 %927, i8* %136, align 8
  %928 = load i8, i8* %137, align 1
  store i8 %928, i8* %138, align 8
  %929 = load i8, i8* %139, align 1
  store i8 %929, i8* %140, align 8
  call void @BrotliStoreHuffmanTree(i8* nonnull %37, i64 704, %struct.HuffmanTree* nonnull %39, i64* %6, i8* %7) #6
  call void @BrotliStoreHuffmanTree(i8* %40, i64 64, %struct.HuffmanTree* nonnull %39, i64* %6, i8* %7) #6
  call void @llvm.lifetime.end.p0i8(i64 128, i8* nonnull %38) #6
  call void @llvm.lifetime.end.p0i8(i64 704, i8* nonnull %37) #6
  call void @llvm.lifetime.end.p0i8(i64 1032, i8* nonnull %36) #6
  br i1 %844, label %1054, label %930

930:                                              ; preds = %891
  %931 = load i64, i64* %6, align 8, !alias.scope !491, !noalias !494
  br label %932

932:                                              ; preds = %1049, %930
  %933 = phi i64 [ %1050, %1049 ], [ %931, %930 ]
  %934 = phi i8* [ %1051, %1049 ], [ %4, %930 ]
  %935 = phi i64 [ %1052, %1049 ], [ 0, %930 ]
  %936 = getelementptr inbounds i32, i32* %3, i64 %935
  %937 = load i32, i32* %936, align 4
  %938 = and i32 %937, 255
  %939 = lshr i32 %937, 8
  %940 = zext i32 %938 to i64
  %941 = getelementptr inbounds [128 x i8], [128 x i8]* %15, i64 0, i64 %940
  %942 = load i8, i8* %941, align 1
  %943 = zext i8 %942 to i64
  %944 = getelementptr inbounds [128 x i16], [128 x i16]* %16, i64 0, i64 %940
  %945 = load i16, i16* %944, align 2
  %946 = zext i16 %945 to i64
  %947 = lshr i64 %933, 3
  %948 = getelementptr inbounds i8, i8* %7, i64 %947
  %949 = load i8, i8* %948, align 1, !alias.scope !494, !noalias !491
  %950 = zext i8 %949 to i64
  %951 = and i64 %933, 7
  %952 = shl i64 %946, %951
  %953 = or i64 %952, %950
  %954 = bitcast i8* %948 to i64*
  store i64 %953, i64* %954, align 8, !alias.scope !494, !noalias !491
  %955 = add i64 %933, %943
  %956 = getelementptr inbounds [128 x i32], [128 x i32]* @StoreCommands.kNumExtraBits, i64 0, i64 %940
  %957 = load i32, i32* %956, align 4
  %958 = zext i32 %957 to i64
  %959 = zext i32 %939 to i64
  %960 = lshr i64 %955, 3
  %961 = getelementptr inbounds i8, i8* %7, i64 %960
  %962 = load i8, i8* %961, align 1, !alias.scope !496, !noalias !499
  %963 = zext i8 %962 to i64
  %964 = and i64 %955, 7
  %965 = shl i64 %959, %964
  %966 = or i64 %965, %963
  %967 = bitcast i8* %961 to i64*
  store i64 %966, i64* %967, align 8, !alias.scope !496, !noalias !499
  %968 = add i64 %955, %958
  store i64 %968, i64* %6, align 8, !alias.scope !499, !noalias !496
  %969 = icmp ult i32 %938, 24
  br i1 %969, label %970, label %1049

970:                                              ; preds = %932
  %971 = getelementptr inbounds [24 x i32], [24 x i32]* @StoreCommands.kInsertOffset, i64 0, i64 %940
  %972 = load i32, i32* %971, align 4
  %973 = add i32 %972, %939
  %974 = icmp eq i32 %973, 0
  br i1 %974, label %1049, label %975

975:                                              ; preds = %970
  %976 = add i32 %972, -1
  %977 = and i32 %973, 1
  %978 = sub nsw i32 0, %939
  %979 = icmp eq i32 %976, %978
  br i1 %979, label %1024, label %980

980:                                              ; preds = %975
  %981 = sub i32 %973, %977
  br label %982

982:                                              ; preds = %982, %980
  %983 = phi i64 [ %968, %980 ], [ %1020, %982 ]
  %984 = phi i8* [ %934, %980 ], [ %1021, %982 ]
  %985 = phi i32 [ %981, %980 ], [ %1022, %982 ]
  %986 = load i8, i8* %984, align 1
  %987 = zext i8 %986 to i64
  %988 = getelementptr inbounds [256 x i8], [256 x i8]* %12, i64 0, i64 %987
  %989 = load i8, i8* %988, align 1
  %990 = zext i8 %989 to i64
  %991 = getelementptr inbounds [256 x i16], [256 x i16]* %13, i64 0, i64 %987
  %992 = load i16, i16* %991, align 2
  %993 = zext i16 %992 to i64
  %994 = lshr i64 %983, 3
  %995 = getelementptr inbounds i8, i8* %7, i64 %994
  %996 = load i8, i8* %995, align 1, !alias.scope !501, !noalias !504
  %997 = zext i8 %996 to i64
  %998 = and i64 %983, 7
  %999 = shl i64 %993, %998
  %1000 = or i64 %999, %997
  %1001 = bitcast i8* %995 to i64*
  store i64 %1000, i64* %1001, align 8, !alias.scope !501, !noalias !504
  %1002 = add i64 %983, %990
  store i64 %1002, i64* %6, align 8, !alias.scope !504, !noalias !501
  %1003 = getelementptr inbounds i8, i8* %984, i64 1
  %1004 = load i8, i8* %1003, align 1
  %1005 = zext i8 %1004 to i64
  %1006 = getelementptr inbounds [256 x i8], [256 x i8]* %12, i64 0, i64 %1005
  %1007 = load i8, i8* %1006, align 1
  %1008 = zext i8 %1007 to i64
  %1009 = getelementptr inbounds [256 x i16], [256 x i16]* %13, i64 0, i64 %1005
  %1010 = load i16, i16* %1009, align 2
  %1011 = zext i16 %1010 to i64
  %1012 = lshr i64 %1002, 3
  %1013 = getelementptr inbounds i8, i8* %7, i64 %1012
  %1014 = load i8, i8* %1013, align 1, !alias.scope !501, !noalias !504
  %1015 = zext i8 %1014 to i64
  %1016 = and i64 %1002, 7
  %1017 = shl i64 %1011, %1016
  %1018 = or i64 %1017, %1015
  %1019 = bitcast i8* %1013 to i64*
  store i64 %1018, i64* %1019, align 8, !alias.scope !501, !noalias !504
  %1020 = add i64 %1002, %1008
  store i64 %1020, i64* %6, align 8, !alias.scope !504, !noalias !501
  %1021 = getelementptr inbounds i8, i8* %984, i64 2
  %1022 = add i32 %985, -2
  %1023 = icmp eq i32 %1022, 0
  br i1 %1023, label %1024, label %982

1024:                                             ; preds = %982, %975
  %1025 = phi i64 [ undef, %975 ], [ %1020, %982 ]
  %1026 = phi i8* [ undef, %975 ], [ %1021, %982 ]
  %1027 = phi i64 [ %968, %975 ], [ %1020, %982 ]
  %1028 = phi i8* [ %934, %975 ], [ %1021, %982 ]
  %1029 = icmp eq i32 %977, 0
  br i1 %1029, label %1049, label %1030

1030:                                             ; preds = %1024
  %1031 = load i8, i8* %1028, align 1
  %1032 = zext i8 %1031 to i64
  %1033 = getelementptr inbounds [256 x i8], [256 x i8]* %12, i64 0, i64 %1032
  %1034 = load i8, i8* %1033, align 1
  %1035 = zext i8 %1034 to i64
  %1036 = getelementptr inbounds [256 x i16], [256 x i16]* %13, i64 0, i64 %1032
  %1037 = load i16, i16* %1036, align 2
  %1038 = zext i16 %1037 to i64
  %1039 = lshr i64 %1027, 3
  %1040 = getelementptr inbounds i8, i8* %7, i64 %1039
  %1041 = load i8, i8* %1040, align 1, !alias.scope !501, !noalias !504
  %1042 = zext i8 %1041 to i64
  %1043 = and i64 %1027, 7
  %1044 = shl i64 %1038, %1043
  %1045 = or i64 %1044, %1042
  %1046 = bitcast i8* %1040 to i64*
  store i64 %1045, i64* %1046, align 8, !alias.scope !501, !noalias !504
  %1047 = add i64 %1027, %1035
  store i64 %1047, i64* %6, align 8, !alias.scope !504, !noalias !501
  %1048 = getelementptr inbounds i8, i8* %1028, i64 1
  br label %1049

1049:                                             ; preds = %1030, %1024, %970, %932
  %1050 = phi i64 [ %968, %932 ], [ %968, %970 ], [ %1025, %1024 ], [ %1047, %1030 ]
  %1051 = phi i8* [ %934, %932 ], [ %934, %970 ], [ %1026, %1024 ], [ %1048, %1030 ]
  %1052 = add nuw i64 %935, 1
  %1053 = icmp eq i64 %1052, %745
  br i1 %1053, label %1054, label %932

1054:                                             ; preds = %1049, %891
  call void @llvm.lifetime.end.p0i8(i64 512, i8* nonnull %28) #6
  call void @llvm.lifetime.end.p0i8(i64 256, i8* nonnull %27) #6
  call void @llvm.lifetime.end.p0i8(i64 128, i8* nonnull %26) #6
  call void @llvm.lifetime.end.p0i8(i64 1024, i8* nonnull %23) #6
  call void @llvm.lifetime.end.p0i8(i64 512, i8* nonnull %25) #6
  call void @llvm.lifetime.end.p0i8(i64 256, i8* nonnull %24) #6
  br label %1103

1055:                                             ; preds = %738
  %1056 = load i64, i64* %6, align 8, !alias.scope !506, !noalias !509
  %1057 = lshr i64 %1056, 3
  %1058 = getelementptr inbounds i8, i8* %7, i64 %1057
  %1059 = load i8, i8* %1058, align 1, !alias.scope !509, !noalias !506
  %1060 = zext i8 %1059 to i64
  %1061 = bitcast i8* %1058 to i64*
  store i64 %1060, i64* %1061, align 8, !alias.scope !509, !noalias !506
  %1062 = add i64 %1056, 1
  %1063 = icmp ult i64 %147, 65537
  %1064 = select i1 %1063, i64 4, i64 5
  %1065 = add nsw i64 %1064, -4
  %1066 = lshr i64 %1062, 3
  %1067 = getelementptr inbounds i8, i8* %7, i64 %1066
  %1068 = load i8, i8* %1067, align 1, !alias.scope !511, !noalias !514
  %1069 = zext i8 %1068 to i64
  %1070 = and i64 %1062, 7
  %1071 = shl i64 %1065, %1070
  %1072 = or i64 %1071, %1069
  %1073 = bitcast i8* %1067 to i64*
  store i64 %1072, i64* %1073, align 8, !alias.scope !511, !noalias !514
  %1074 = add i64 %1056, 3
  %1075 = shl nuw nsw i64 %1064, 2
  %1076 = add nsw i64 %147, -1
  %1077 = lshr i64 %1074, 3
  %1078 = getelementptr inbounds i8, i8* %7, i64 %1077
  %1079 = load i8, i8* %1078, align 1, !alias.scope !516, !noalias !519
  %1080 = zext i8 %1079 to i64
  %1081 = and i64 %1074, 7
  %1082 = shl i64 %1076, %1081
  %1083 = or i64 %1082, %1080
  %1084 = bitcast i8* %1078 to i64*
  store i64 %1083, i64* %1084, align 8, !alias.scope !516, !noalias !519
  %1085 = add i64 %1074, %1075
  %1086 = lshr i64 %1085, 3
  %1087 = getelementptr inbounds i8, i8* %7, i64 %1086
  %1088 = load i8, i8* %1087, align 1, !alias.scope !521, !noalias !524
  %1089 = zext i8 %1088 to i64
  %1090 = and i64 %1085, 7
  %1091 = shl i64 1, %1090
  %1092 = or i64 %1091, %1089
  %1093 = bitcast i8* %1087 to i64*
  store i64 %1092, i64* %1093, align 8, !alias.scope !521, !noalias !524
  %1094 = add i64 %1085, 8
  %1095 = and i64 %1094, 4294967288
  store i64 %1095, i64* %6, align 8
  %1096 = lshr exact i64 %1095, 3
  %1097 = getelementptr inbounds i8, i8* %7, i64 %1096
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %1097, i8* align 1 %144, i64 %147, i1 false) #6
  %1098 = shl nuw nsw i64 %147, 3
  %1099 = load i64, i64* %6, align 8
  %1100 = add i64 %1099, %1098
  store i64 %1100, i64* %6, align 8
  %1101 = lshr i64 %1100, 3
  %1102 = getelementptr inbounds i8, i8* %7, i64 %1101
  store i8 0, i8* %1102, align 1
  br label %1103

1103:                                             ; preds = %1055, %1054
  %1104 = sub i64 %145, %147
  %1105 = icmp eq i64 %1104, 0
  br i1 %1105, label %1106, label %143

1106:                                             ; preds = %1103, %8
  ret void

1107:                                             ; preds = %252
  %1108 = getelementptr inbounds i8, i8* %244, i64 1
  %1109 = getelementptr inbounds i8, i8* %216, i64 %253
  %1110 = load i8, i8* %1109, align 1
  %1111 = load i8, i8* %1108, align 1
  %1112 = icmp eq i8 %1110, %1111
  br i1 %1112, label %1113, label %255, !prof !33

1113:                                             ; preds = %1107
  %1114 = add i64 %243, 2
  %1115 = icmp eq i64 %245, 2
  br i1 %1115, label %255, label %1116

1116:                                             ; preds = %1113
  %1117 = getelementptr inbounds i8, i8* %244, i64 2
  %1118 = getelementptr inbounds i8, i8* %216, i64 %1114
  %1119 = load i8, i8* %1118, align 1
  %1120 = load i8, i8* %1117, align 1
  %1121 = icmp eq i8 %1119, %1120
  br i1 %1121, label %1122, label %255, !prof !33

1122:                                             ; preds = %1116
  %1123 = add i64 %243, 3
  %1124 = icmp eq i64 %245, 3
  br i1 %1124, label %255, label %1125

1125:                                             ; preds = %1122
  %1126 = getelementptr inbounds i8, i8* %244, i64 3
  %1127 = getelementptr inbounds i8, i8* %216, i64 %1123
  %1128 = load i8, i8* %1127, align 1
  %1129 = load i8, i8* %1126, align 1
  %1130 = icmp eq i8 %1128, %1129
  br i1 %1130, label %1131, label %255, !prof !33

1131:                                             ; preds = %1125
  %1132 = add i64 %243, 4
  %1133 = icmp eq i64 %245, 4
  br i1 %1133, label %255, label %1134

1134:                                             ; preds = %1131
  %1135 = getelementptr inbounds i8, i8* %244, i64 4
  %1136 = getelementptr inbounds i8, i8* %216, i64 %1132
  %1137 = load i8, i8* %1136, align 1
  %1138 = load i8, i8* %1135, align 1
  %1139 = icmp eq i8 %1137, %1138
  br i1 %1139, label %1140, label %255, !prof !33

1140:                                             ; preds = %1134
  %1141 = add i64 %243, 5
  %1142 = icmp eq i64 %245, 5
  br i1 %1142, label %255, label %1143

1143:                                             ; preds = %1140
  %1144 = getelementptr inbounds i8, i8* %244, i64 5
  %1145 = getelementptr inbounds i8, i8* %216, i64 %1141
  %1146 = load i8, i8* %1145, align 1
  %1147 = load i8, i8* %1144, align 1
  %1148 = icmp eq i8 %1146, %1147
  br i1 %1148, label %1149, label %255, !prof !33

1149:                                             ; preds = %1143
  %1150 = add i64 %243, 6
  %1151 = icmp eq i64 %245, 6
  br i1 %1151, label %255, label %1152

1152:                                             ; preds = %1149
  %1153 = getelementptr inbounds i8, i8* %244, i64 6
  %1154 = getelementptr inbounds i8, i8* %216, i64 %1150
  %1155 = load i8, i8* %1154, align 1
  %1156 = load i8, i8* %1153, align 1
  %1157 = icmp eq i8 %1155, %1156
  %1158 = add i64 %243, 7
  %1159 = select i1 %1157, i64 %1158, i64 %1150, !prof !33
  br label %255

1160:                                             ; preds = %478
  %1161 = getelementptr inbounds i8, i8* %470, i64 1
  %1162 = getelementptr inbounds i8, i8* %442, i64 %479
  %1163 = load i8, i8* %1162, align 1
  %1164 = load i8, i8* %1161, align 1
  %1165 = icmp eq i8 %1163, %1164
  br i1 %1165, label %1166, label %481, !prof !33

1166:                                             ; preds = %1160
  %1167 = add i64 %469, 2
  %1168 = icmp eq i64 %471, 2
  br i1 %1168, label %481, label %1169

1169:                                             ; preds = %1166
  %1170 = getelementptr inbounds i8, i8* %470, i64 2
  %1171 = getelementptr inbounds i8, i8* %442, i64 %1167
  %1172 = load i8, i8* %1171, align 1
  %1173 = load i8, i8* %1170, align 1
  %1174 = icmp eq i8 %1172, %1173
  br i1 %1174, label %1175, label %481, !prof !33

1175:                                             ; preds = %1169
  %1176 = add i64 %469, 3
  %1177 = icmp eq i64 %471, 3
  br i1 %1177, label %481, label %1178

1178:                                             ; preds = %1175
  %1179 = getelementptr inbounds i8, i8* %470, i64 3
  %1180 = getelementptr inbounds i8, i8* %442, i64 %1176
  %1181 = load i8, i8* %1180, align 1
  %1182 = load i8, i8* %1179, align 1
  %1183 = icmp eq i8 %1181, %1182
  br i1 %1183, label %1184, label %481, !prof !33

1184:                                             ; preds = %1178
  %1185 = add i64 %469, 4
  %1186 = icmp eq i64 %471, 4
  br i1 %1186, label %481, label %1187

1187:                                             ; preds = %1184
  %1188 = getelementptr inbounds i8, i8* %470, i64 4
  %1189 = getelementptr inbounds i8, i8* %442, i64 %1185
  %1190 = load i8, i8* %1189, align 1
  %1191 = load i8, i8* %1188, align 1
  %1192 = icmp eq i8 %1190, %1191
  br i1 %1192, label %1193, label %481, !prof !33

1193:                                             ; preds = %1187
  %1194 = add i64 %469, 5
  %1195 = icmp eq i64 %471, 5
  br i1 %1195, label %481, label %1196

1196:                                             ; preds = %1193
  %1197 = getelementptr inbounds i8, i8* %470, i64 5
  %1198 = getelementptr inbounds i8, i8* %442, i64 %1194
  %1199 = load i8, i8* %1198, align 1
  %1200 = load i8, i8* %1197, align 1
  %1201 = icmp eq i8 %1199, %1200
  br i1 %1201, label %1202, label %481, !prof !33

1202:                                             ; preds = %1196
  %1203 = add i64 %469, 6
  %1204 = icmp eq i64 %471, 6
  br i1 %1204, label %481, label %1205

1205:                                             ; preds = %1202
  %1206 = getelementptr inbounds i8, i8* %470, i64 6
  %1207 = getelementptr inbounds i8, i8* %442, i64 %1203
  %1208 = load i8, i8* %1207, align 1
  %1209 = load i8, i8* %1206, align 1
  %1210 = icmp eq i8 %1208, %1209
  %1211 = add i64 %469, 7
  %1212 = select i1 %1210, i64 %1211, i64 %1203, !prof !33
  br label %481
}

; Function Attrs: noinline nounwind ssp uwtable
define internal fastcc void @BrotliCompressFragmentTwoPassImpl16(%struct.MemoryManager*, i8*, i64, i32*, i8*, i32* nocapture, i64*, i8*) unnamed_addr #2 {
  %9 = alloca [129 x %struct.HuffmanTree], align 16
  %10 = alloca [704 x i8], align 16
  %11 = alloca [64 x i16], align 16
  %12 = alloca [256 x i8], align 16
  %13 = alloca [256 x i16], align 16
  %14 = alloca [256 x i32], align 16
  %15 = alloca [128 x i8], align 16
  %16 = alloca [128 x i16], align 16
  %17 = alloca [128 x i32], align 16
  %18 = icmp eq i64 %2, 0
  br i1 %18, label %1195, label %19

19:                                               ; preds = %8
  %20 = ptrtoint i32* %3 to i64
  %21 = ptrtoint i8* %4 to i64
  %22 = ptrtoint i8* %1 to i64
  %23 = bitcast [256 x i32]* %14 to i8*
  %24 = getelementptr inbounds [256 x i8], [256 x i8]* %12, i64 0, i64 0
  %25 = bitcast [256 x i16]* %13 to i8*
  %26 = getelementptr inbounds [128 x i8], [128 x i8]* %15, i64 0, i64 0
  %27 = bitcast [128 x i16]* %16 to i8*
  %28 = bitcast [128 x i32]* %17 to i8*
  %29 = getelementptr inbounds [256 x i32], [256 x i32]* %14, i64 0, i64 0
  %30 = getelementptr inbounds [256 x i16], [256 x i16]* %13, i64 0, i64 0
  %31 = getelementptr inbounds [128 x i32], [128 x i32]* %17, i64 0, i64 1
  %32 = getelementptr inbounds [128 x i32], [128 x i32]* %17, i64 0, i64 2
  %33 = getelementptr inbounds [128 x i32], [128 x i32]* %17, i64 0, i64 64
  %34 = getelementptr inbounds [128 x i32], [128 x i32]* %17, i64 0, i64 84
  %35 = getelementptr inbounds [128 x i32], [128 x i32]* %17, i64 0, i64 0
  %36 = bitcast [129 x %struct.HuffmanTree]* %9 to i8*
  %37 = getelementptr inbounds [704 x i8], [704 x i8]* %10, i64 0, i64 0
  %38 = bitcast [64 x i16]* %11 to i8*
  %39 = getelementptr inbounds [129 x %struct.HuffmanTree], [129 x %struct.HuffmanTree]* %9, i64 0, i64 0
  %40 = getelementptr inbounds [128 x i8], [128 x i8]* %15, i64 0, i64 64
  %41 = getelementptr inbounds [128 x i8], [128 x i8]* %15, i64 0, i64 24
  %42 = getelementptr inbounds [704 x i8], [704 x i8]* %10, i64 0, i64 24
  %43 = bitcast [128 x i8]* %15 to i64*
  %44 = bitcast i8* %42 to i64*
  %45 = getelementptr inbounds [704 x i8], [704 x i8]* %10, i64 0, i64 32
  %46 = getelementptr inbounds [128 x i8], [128 x i8]* %15, i64 0, i64 48
  %47 = bitcast i8* %46 to i64*
  %48 = bitcast i8* %45 to i64*
  %49 = getelementptr inbounds [704 x i8], [704 x i8]* %10, i64 0, i64 40
  %50 = getelementptr inbounds [128 x i8], [128 x i8]* %15, i64 0, i64 8
  %51 = bitcast i8* %50 to i64*
  %52 = bitcast i8* %49 to i64*
  %53 = getelementptr inbounds [704 x i8], [704 x i8]* %10, i64 0, i64 48
  %54 = getelementptr inbounds [128 x i8], [128 x i8]* %15, i64 0, i64 56
  %55 = bitcast i8* %54 to i64*
  %56 = bitcast i8* %53 to i64*
  %57 = getelementptr inbounds [704 x i8], [704 x i8]* %10, i64 0, i64 56
  %58 = getelementptr inbounds [128 x i8], [128 x i8]* %15, i64 0, i64 16
  %59 = bitcast i8* %58 to i64*
  %60 = bitcast i8* %57 to i64*
  %61 = getelementptr inbounds [64 x i16], [64 x i16]* %11, i64 0, i64 0
  %62 = getelementptr inbounds [64 x i16], [64 x i16]* %11, i64 0, i64 24
  %63 = bitcast i16* %62 to i8*
  %64 = getelementptr inbounds [128 x i16], [128 x i16]* %16, i64 0, i64 8
  %65 = bitcast i16* %64 to i8*
  %66 = getelementptr inbounds [64 x i16], [64 x i16]* %11, i64 0, i64 40
  %67 = bitcast i16* %66 to i8*
  %68 = getelementptr inbounds [128 x i16], [128 x i16]* %16, i64 0, i64 16
  %69 = bitcast i16* %68 to i8*
  %70 = getelementptr inbounds [64 x i16], [64 x i16]* %11, i64 0, i64 56
  %71 = bitcast i16* %70 to i8*
  %72 = getelementptr inbounds [128 x i16], [128 x i16]* %16, i64 0, i64 24
  %73 = bitcast i16* %72 to i8*
  %74 = getelementptr inbounds [128 x i16], [128 x i16]* %16, i64 0, i64 48
  %75 = bitcast i16* %74 to i8*
  %76 = getelementptr inbounds [64 x i16], [64 x i16]* %11, i64 0, i64 32
  %77 = bitcast i16* %76 to i8*
  %78 = getelementptr inbounds [128 x i16], [128 x i16]* %16, i64 0, i64 56
  %79 = bitcast i16* %78 to i8*
  %80 = getelementptr inbounds [64 x i16], [64 x i16]* %11, i64 0, i64 48
  %81 = bitcast i16* %80 to i8*
  %82 = getelementptr inbounds [128 x i16], [128 x i16]* %16, i64 0, i64 64
  %83 = bitcast i8* %41 to i64*
  %84 = bitcast [704 x i8]* %10 to i64*
  %85 = getelementptr inbounds [704 x i8], [704 x i8]* %10, i64 0, i64 64
  %86 = getelementptr inbounds [128 x i8], [128 x i8]* %15, i64 0, i64 32
  %87 = bitcast i8* %86 to i64*
  %88 = bitcast i8* %85 to i64*
  %89 = getelementptr inbounds [704 x i8], [704 x i8]* %10, i64 0, i64 128
  %90 = getelementptr inbounds [128 x i8], [128 x i8]* %15, i64 0, i64 40
  %91 = bitcast i8* %90 to i64*
  %92 = bitcast i8* %89 to i64*
  %93 = getelementptr inbounds [704 x i8], [704 x i8]* %10, i64 0, i64 192
  %94 = bitcast i8* %93 to i64*
  %95 = getelementptr inbounds [704 x i8], [704 x i8]* %10, i64 0, i64 384
  %96 = bitcast i8* %95 to i64*
  %97 = getelementptr inbounds [704 x i8], [704 x i8]* %10, i64 0, i64 256
  %98 = getelementptr inbounds [704 x i8], [704 x i8]* %10, i64 0, i64 448
  %99 = getelementptr inbounds [128 x i8], [128 x i8]* %15, i64 0, i64 1
  %100 = getelementptr inbounds [704 x i8], [704 x i8]* %10, i64 0, i64 136
  %101 = getelementptr inbounds [128 x i8], [128 x i8]* %15, i64 0, i64 9
  %102 = getelementptr inbounds [704 x i8], [704 x i8]* %10, i64 0, i64 264
  %103 = getelementptr inbounds [128 x i8], [128 x i8]* %15, i64 0, i64 17
  %104 = getelementptr inbounds [704 x i8], [704 x i8]* %10, i64 0, i64 456
  %105 = getelementptr inbounds [128 x i8], [128 x i8]* %15, i64 0, i64 2
  %106 = getelementptr inbounds [704 x i8], [704 x i8]* %10, i64 0, i64 144
  %107 = getelementptr inbounds [128 x i8], [128 x i8]* %15, i64 0, i64 10
  %108 = getelementptr inbounds [704 x i8], [704 x i8]* %10, i64 0, i64 272
  %109 = getelementptr inbounds [128 x i8], [128 x i8]* %15, i64 0, i64 18
  %110 = getelementptr inbounds [704 x i8], [704 x i8]* %10, i64 0, i64 464
  %111 = getelementptr inbounds [128 x i8], [128 x i8]* %15, i64 0, i64 3
  %112 = getelementptr inbounds [704 x i8], [704 x i8]* %10, i64 0, i64 152
  %113 = getelementptr inbounds [128 x i8], [128 x i8]* %15, i64 0, i64 11
  %114 = getelementptr inbounds [704 x i8], [704 x i8]* %10, i64 0, i64 280
  %115 = getelementptr inbounds [128 x i8], [128 x i8]* %15, i64 0, i64 19
  %116 = getelementptr inbounds [704 x i8], [704 x i8]* %10, i64 0, i64 472
  %117 = getelementptr inbounds [128 x i8], [128 x i8]* %15, i64 0, i64 4
  %118 = getelementptr inbounds [704 x i8], [704 x i8]* %10, i64 0, i64 160
  %119 = getelementptr inbounds [128 x i8], [128 x i8]* %15, i64 0, i64 12
  %120 = getelementptr inbounds [704 x i8], [704 x i8]* %10, i64 0, i64 288
  %121 = getelementptr inbounds [128 x i8], [128 x i8]* %15, i64 0, i64 20
  %122 = getelementptr inbounds [704 x i8], [704 x i8]* %10, i64 0, i64 480
  %123 = getelementptr inbounds [128 x i8], [128 x i8]* %15, i64 0, i64 5
  %124 = getelementptr inbounds [704 x i8], [704 x i8]* %10, i64 0, i64 168
  %125 = getelementptr inbounds [128 x i8], [128 x i8]* %15, i64 0, i64 13
  %126 = getelementptr inbounds [704 x i8], [704 x i8]* %10, i64 0, i64 296
  %127 = getelementptr inbounds [128 x i8], [128 x i8]* %15, i64 0, i64 21
  %128 = getelementptr inbounds [704 x i8], [704 x i8]* %10, i64 0, i64 488
  %129 = getelementptr inbounds [128 x i8], [128 x i8]* %15, i64 0, i64 6
  %130 = getelementptr inbounds [704 x i8], [704 x i8]* %10, i64 0, i64 176
  %131 = getelementptr inbounds [128 x i8], [128 x i8]* %15, i64 0, i64 14
  %132 = getelementptr inbounds [704 x i8], [704 x i8]* %10, i64 0, i64 304
  %133 = getelementptr inbounds [128 x i8], [128 x i8]* %15, i64 0, i64 22
  %134 = getelementptr inbounds [704 x i8], [704 x i8]* %10, i64 0, i64 496
  %135 = getelementptr inbounds [128 x i8], [128 x i8]* %15, i64 0, i64 7
  %136 = getelementptr inbounds [704 x i8], [704 x i8]* %10, i64 0, i64 184
  %137 = getelementptr inbounds [128 x i8], [128 x i8]* %15, i64 0, i64 15
  %138 = getelementptr inbounds [704 x i8], [704 x i8]* %10, i64 0, i64 312
  %139 = getelementptr inbounds [128 x i8], [128 x i8]* %15, i64 0, i64 23
  %140 = getelementptr inbounds [704 x i8], [704 x i8]* %10, i64 0, i64 504
  %141 = xor i64 %21, -1
  %142 = getelementptr inbounds i8, i8* %1, i64 6
  br label %143

143:                                              ; preds = %1192, %19
  %144 = phi i8* [ %1, %19 ], [ %148, %1192 ]
  %145 = phi i64 [ %2, %19 ], [ %1193, %1192 ]
  %146 = icmp ult i64 %145, 131072
  %147 = select i1 %146, i64 %145, i64 131072
  %148 = getelementptr inbounds i8, i8* %144, i64 %147
  %149 = icmp ugt i64 %147, 15
  br i1 %149, label %150, label %684, !prof !33

150:                                              ; preds = %143
  %151 = add nsw i64 %147, -6
  %152 = add i64 %145, -16
  %153 = icmp ult i64 %151, %152
  %154 = select i1 %153, i64 %151, i64 %152
  %155 = getelementptr inbounds i8, i8* %144, i64 %154
  %156 = ptrtoint i8* %148 to i64
  br label %160

157:                                              ; preds = %506
  %158 = trunc i64 %516 to i32
  %159 = ptrtoint i32* %623 to i64
  br label %490

160:                                              ; preds = %490, %150
  %161 = phi i64 [ %20, %150 ], [ %491, %490 ]
  %162 = phi i64 [ %21, %150 ], [ %349, %490 ]
  %163 = phi i8* [ %144, %150 ], [ %492, %490 ]
  %164 = phi i32 [ -1, %150 ], [ %493, %490 ]
  %165 = getelementptr inbounds i8, i8* %163, i64 1
  %166 = bitcast i8* %165 to i64*
  %167 = load i64, i64* %166, align 8
  %168 = sext i32 %164 to i64
  %169 = sub nsw i64 0, %168
  %170 = icmp sgt i32 %164, 0
  br label %171

171:                                              ; preds = %237, %160
  %172 = phi i64 [ %167, %160 ], [ %184, %237 ]
  %173 = phi i32 [ 32, %160 ], [ %177, %237 ]
  %174 = phi i8* [ %165, %160 ], [ %180, %237 ]
  %175 = mul i64 %172, 33215796281344
  %176 = lshr i64 %175, 48
  %177 = add i32 %173, 1
  %178 = lshr i32 %173, 5
  %179 = zext i32 %178 to i64
  %180 = getelementptr inbounds i8, i8* %174, i64 %179
  %181 = icmp ugt i8* %180, %155
  br i1 %181, label %684, label %182, !prof !34

182:                                              ; preds = %171
  %183 = bitcast i8* %180 to i64*
  %184 = load i64, i64* %183, align 8
  %185 = getelementptr inbounds i8, i8* %174, i64 %169
  %186 = bitcast i8* %174 to i32*
  %187 = load i32, i32* %186, align 4
  %188 = bitcast i8* %185 to i32*
  %189 = load i32, i32* %188, align 4
  %190 = icmp eq i32 %187, %189
  br i1 %190, label %191, label %209

191:                                              ; preds = %182
  %192 = getelementptr inbounds i8, i8* %174, i64 4
  %193 = load i8, i8* %192, align 1
  %194 = getelementptr inbounds i8, i8* %185, i64 4
  %195 = load i8, i8* %194, align 1
  %196 = icmp eq i8 %193, %195
  br i1 %196, label %197, label %209

197:                                              ; preds = %191
  %198 = getelementptr inbounds i8, i8* %174, i64 5
  %199 = load i8, i8* %198, align 1
  %200 = getelementptr inbounds i8, i8* %185, i64 5
  %201 = load i8, i8* %200, align 1
  %202 = icmp eq i8 %199, %201
  %203 = and i1 %170, %202
  br i1 %203, label %204, label %209, !prof !526

204:                                              ; preds = %197
  %205 = ptrtoint i8* %174 to i64
  %206 = sub i64 %205, %22
  %207 = trunc i64 %206 to i32
  %208 = getelementptr inbounds i32, i32* %5, i64 %176
  store i32 %207, i32* %208, align 4
  br label %240

209:                                              ; preds = %197, %191, %182
  %210 = getelementptr inbounds i32, i32* %5, i64 %176
  %211 = load i32, i32* %210, align 4
  %212 = sext i32 %211 to i64
  %213 = getelementptr inbounds i8, i8* %1, i64 %212
  %214 = ptrtoint i8* %174 to i64
  %215 = sub i64 %214, %22
  %216 = trunc i64 %215 to i32
  store i32 %216, i32* %210, align 4
  %217 = load i32, i32* %186, align 4
  %218 = bitcast i8* %213 to i32*
  %219 = load i32, i32* %218, align 4
  %220 = icmp eq i32 %217, %219
  br i1 %220, label %221, label %234

221:                                              ; preds = %209
  %222 = getelementptr inbounds i8, i8* %174, i64 4
  %223 = load i8, i8* %222, align 1
  %224 = getelementptr inbounds i8, i8* %213, i64 4
  %225 = load i8, i8* %224, align 1
  %226 = icmp eq i8 %223, %225
  br i1 %226, label %227, label %234

227:                                              ; preds = %221
  %228 = getelementptr inbounds i8, i8* %174, i64 5
  %229 = load i8, i8* %228, align 1
  %230 = getelementptr inbounds i8, i8* %213, i64 5
  %231 = load i8, i8* %230, align 1
  %232 = icmp eq i8 %229, %231
  %233 = zext i1 %232 to i32
  br label %234

234:                                              ; preds = %227, %221, %209
  %235 = phi i32 [ 0, %221 ], [ %233, %227 ], [ 0, %209 ]
  %236 = icmp eq i32 %235, 0
  br i1 %236, label %237, label %238, !prof !33

237:                                              ; preds = %234, %240
  br label %171

238:                                              ; preds = %234
  %239 = ptrtoint i8* %174 to i64
  br label %240

240:                                              ; preds = %238, %204
  %241 = phi i64 [ %205, %204 ], [ %239, %238 ]
  %242 = phi i8* [ %185, %204 ], [ %213, %238 ]
  %243 = ptrtoint i8* %242 to i64
  %244 = sub i64 %241, %243
  %245 = icmp sgt i64 %244, 262128
  br i1 %245, label %237, label %246

246:                                              ; preds = %240
  %247 = getelementptr inbounds i8, i8* %242, i64 6
  %248 = getelementptr inbounds i8, i8* %174, i64 6
  %249 = sub i64 %156, %241
  %250 = add i64 %249, -6
  %251 = lshr i64 %250, 3
  %252 = icmp eq i64 %251, 0
  br i1 %252, label %273, label %253, !prof !34

253:                                              ; preds = %246, %263
  %254 = phi i64 [ %266, %263 ], [ %251, %246 ]
  %255 = phi i8* [ %264, %263 ], [ %248, %246 ]
  %256 = phi i64 [ %265, %263 ], [ 0, %246 ]
  %257 = bitcast i8* %255 to i64*
  %258 = load i64, i64* %257, align 8
  %259 = getelementptr inbounds i8, i8* %247, i64 %256
  %260 = bitcast i8* %259 to i64*
  %261 = load i64, i64* %260, align 8
  %262 = icmp eq i64 %258, %261
  br i1 %262, label %263, label %268, !prof !34

263:                                              ; preds = %253
  %264 = getelementptr inbounds i8, i8* %255, i64 8
  %265 = add nuw i64 %256, 8
  %266 = add nsw i64 %254, -1
  %267 = icmp eq i64 %266, 0
  br i1 %267, label %273, label %253, !prof !34

268:                                              ; preds = %253
  %269 = xor i64 %261, %258
  %270 = call i64 @llvm.cttz.i64(i64 %269, i1 true) #6, !range !36
  %271 = lshr i64 %270, 3
  %272 = or i64 %271, %256
  br label %286

273:                                              ; preds = %263, %246
  %274 = phi i64 [ 0, %246 ], [ %265, %263 ]
  %275 = phi i8* [ %248, %246 ], [ %264, %263 ]
  %276 = and i64 %250, 7
  %277 = icmp eq i64 %276, 0
  br i1 %277, label %286, label %278

278:                                              ; preds = %273
  %279 = getelementptr inbounds i8, i8* %247, i64 %274
  %280 = load i8, i8* %279, align 1
  %281 = load i8, i8* %275, align 1
  %282 = icmp eq i8 %280, %281
  br i1 %282, label %283, label %286, !prof !33

283:                                              ; preds = %278
  %284 = add i64 %274, 1
  %285 = icmp eq i64 %276, 1
  br i1 %285, label %286, label %1196

286:                                              ; preds = %1241, %283, %278, %1196, %1202, %1205, %1211, %1214, %1220, %1223, %1229, %1232, %1238, %273, %268
  %287 = phi i64 [ %272, %268 ], [ %274, %273 ], [ %284, %283 ], [ %274, %278 ], [ %284, %1196 ], [ %1203, %1202 ], [ %1203, %1205 ], [ %1212, %1211 ], [ %1212, %1214 ], [ %1221, %1220 ], [ %1221, %1223 ], [ %1230, %1229 ], [ %1230, %1232 ], [ %1239, %1238 ], [ %1248, %1241 ]
  %288 = add i64 %287, 6
  %289 = trunc i64 %244 to i32
  %290 = ptrtoint i8* %163 to i64
  %291 = sub i64 %241, %290
  %292 = trunc i64 %291 to i32
  %293 = getelementptr inbounds i8, i8* %174, i64 %288
  %294 = icmp ult i32 %292, 6
  br i1 %294, label %295, label %297

295:                                              ; preds = %286
  %296 = inttoptr i64 %161 to i32*
  store i32 %292, i32* %296, align 4
  br label %342

297:                                              ; preds = %286
  %298 = icmp ult i32 %292, 130
  br i1 %298, label %299, label %312

299:                                              ; preds = %297
  %300 = add nsw i32 %292, -2
  %301 = call i32 @llvm.ctlz.i32(i32 %300, i1 true) #6, !range !2
  %302 = sub nsw i32 30, %301
  %303 = lshr i32 %300, %302
  %304 = shl nsw i32 %302, 1
  %305 = add nuw nsw i32 %303, 2
  %306 = add i32 %305, %304
  %307 = shl i32 %303, %302
  %308 = sub i32 %300, %307
  %309 = shl i32 %308, 8
  %310 = or i32 %309, %306
  %311 = inttoptr i64 %161 to i32*
  store i32 %310, i32* %311, align 4
  br label %342

312:                                              ; preds = %297
  %313 = icmp ult i32 %292, 2114
  br i1 %313, label %314, label %324

314:                                              ; preds = %312
  %315 = add nsw i32 %292, -66
  %316 = call i32 @llvm.ctlz.i32(i32 %315, i1 true) #6, !range !2
  %317 = xor i32 %316, 31
  %318 = add nuw nsw i32 %317, 10
  %319 = shl i32 1, %317
  %320 = sub i32 %315, %319
  %321 = shl i32 %320, 8
  %322 = or i32 %321, %318
  %323 = inttoptr i64 %161 to i32*
  store i32 %322, i32* %323, align 4
  br label %342

324:                                              ; preds = %312
  %325 = icmp ult i32 %292, 6210
  br i1 %325, label %326, label %331

326:                                              ; preds = %324
  %327 = shl i32 %292, 8
  %328 = add nsw i32 %327, -541184
  %329 = or i32 %328, 21
  %330 = inttoptr i64 %161 to i32*
  store i32 %329, i32* %330, align 4
  br label %342

331:                                              ; preds = %324
  %332 = icmp ult i32 %292, 22594
  %333 = shl i32 %292, 8
  br i1 %332, label %334, label %338

334:                                              ; preds = %331
  %335 = add i32 %333, -1589760
  %336 = or i32 %335, 22
  %337 = inttoptr i64 %161 to i32*
  store i32 %336, i32* %337, align 4
  br label %342

338:                                              ; preds = %331
  %339 = add i32 %333, -5784064
  %340 = or i32 %339, 23
  %341 = inttoptr i64 %161 to i32*
  store i32 %340, i32* %341, align 4
  br label %342

342:                                              ; preds = %338, %334, %326, %314, %299, %295
  %343 = phi i32* [ %341, %338 ], [ %337, %334 ], [ %330, %326 ], [ %323, %314 ], [ %311, %299 ], [ %296, %295 ]
  %344 = getelementptr inbounds i32, i32* %343, i64 1
  %345 = inttoptr i64 %162 to i8*
  %346 = shl i64 %291, 32
  %347 = ashr exact i64 %346, 32
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %345, i8* align 1 %163, i64 %347, i1 false) #6
  %348 = getelementptr inbounds i8, i8* %345, i64 %347
  %349 = ptrtoint i8* %348 to i64
  %350 = icmp eq i32 %164, %289
  br i1 %350, label %367, label %351

351:                                              ; preds = %342
  %352 = add i32 %289, 3
  %353 = call i32 @llvm.ctlz.i32(i32 %352, i1 true) #6, !range !2
  %354 = xor i32 %353, 31
  %355 = add nsw i32 %354, -1
  %356 = lshr i32 %352, %355
  %357 = and i32 %356, 1
  %358 = or i32 %357, 2
  %359 = shl i32 %358, %355
  %360 = shl nuw nsw i32 %354, 1
  %361 = add nsw i32 %360, -4
  %362 = or i32 %357, %361
  %363 = add nsw i32 %362, 80
  %364 = sub i32 %352, %359
  %365 = shl i32 %364, 8
  %366 = or i32 %365, %363
  br label %367

367:                                              ; preds = %351, %342
  %368 = phi i32 [ %366, %351 ], [ 64, %342 ]
  %369 = phi i32 [ %289, %351 ], [ %164, %342 ]
  store i32 %368, i32* %344, align 4
  %370 = getelementptr inbounds i32, i32* %343, i64 2
  %371 = icmp ult i64 %288, 12
  br i1 %371, label %372, label %375

372:                                              ; preds = %367
  %373 = trunc i64 %288 to i32
  %374 = add nuw nsw i32 %373, 20
  store i32 %374, i32* %370, align 4
  br label %424

375:                                              ; preds = %367
  %376 = icmp ult i64 %288, 72
  br i1 %376, label %377, label %392

377:                                              ; preds = %375
  %378 = add nsw i64 %287, -2
  %379 = trunc i64 %378 to i32
  %380 = call i32 @llvm.ctlz.i32(i32 %379, i1 true) #6, !range !2
  %381 = sub nsw i32 30, %380
  %382 = zext i32 %381 to i64
  %383 = lshr i64 %378, %382
  %384 = shl nuw nsw i64 %382, 1
  %385 = add nuw nsw i64 %383, 28
  %386 = add nuw nsw i64 %385, %384
  %387 = shl i64 %383, %382
  %388 = sub i64 %378, %387
  %389 = shl i64 %388, 8
  %390 = or i64 %389, %386
  %391 = trunc i64 %390 to i32
  store i32 %391, i32* %370, align 4
  br label %424

392:                                              ; preds = %375
  %393 = icmp ult i64 %288, 136
  br i1 %393, label %394, label %403

394:                                              ; preds = %392
  %395 = add nsw i64 %287, -2
  %396 = lshr i64 %395, 5
  %397 = add nuw nsw i64 %396, 54
  %398 = shl i64 %395, 8
  %399 = and i64 %398, 7936
  %400 = or i64 %397, %399
  %401 = trunc i64 %400 to i32
  store i32 %401, i32* %370, align 4
  %402 = getelementptr inbounds i32, i32* %343, i64 3
  store i32 64, i32* %402, align 4
  br label %424

403:                                              ; preds = %392
  %404 = icmp ult i64 %288, 2120
  br i1 %404, label %405, label %418

405:                                              ; preds = %403
  %406 = add nsw i64 %287, -66
  %407 = trunc i64 %406 to i32
  %408 = call i32 @llvm.ctlz.i32(i32 %407, i1 true) #6, !range !2
  %409 = xor i32 %408, 31
  %410 = zext i32 %409 to i64
  %411 = add nuw nsw i64 %410, 52
  %412 = shl i64 1, %410
  %413 = sub i64 %406, %412
  %414 = shl i64 %413, 8
  %415 = or i64 %414, %411
  %416 = trunc i64 %415 to i32
  store i32 %416, i32* %370, align 4
  %417 = getelementptr inbounds i32, i32* %343, i64 3
  store i32 64, i32* %417, align 4
  br label %424

418:                                              ; preds = %403
  %419 = trunc i64 %288 to i32
  %420 = shl i32 %419, 8
  %421 = add i32 %420, -542720
  %422 = or i32 %421, 63
  store i32 %422, i32* %370, align 4
  %423 = getelementptr inbounds i32, i32* %343, i64 3
  store i32 64, i32* %423, align 4
  br label %424

424:                                              ; preds = %418, %405, %394, %377, %372
  %425 = phi i64 [ 4, %418 ], [ 4, %405 ], [ 4, %394 ], [ 3, %377 ], [ 3, %372 ]
  %426 = getelementptr inbounds i32, i32* %343, i64 %425
  %427 = ptrtoint i32* %426 to i64
  %428 = icmp ult i8* %293, %155
  br i1 %428, label %429, label %681, !prof !33

429:                                              ; preds = %424
  %430 = getelementptr inbounds i8, i8* %293, i64 -5
  %431 = bitcast i8* %430 to i64*
  %432 = load i64, i64* %431, align 8
  %433 = mul i64 %432, 33215796281344
  %434 = lshr i64 %433, 48
  %435 = ptrtoint i8* %293 to i64
  %436 = sub i64 %435, %22
  %437 = trunc i64 %436 to i32
  %438 = add i32 %437, -5
  %439 = getelementptr inbounds i32, i32* %5, i64 %434
  store i32 %438, i32* %439, align 4
  %440 = lshr i64 %432, 8
  %441 = mul i64 %440, 33215796281344
  %442 = lshr i64 %441, 48
  %443 = add i32 %437, -4
  %444 = getelementptr inbounds i32, i32* %5, i64 %442
  store i32 %443, i32* %444, align 4
  %445 = and i64 %432, -65536
  %446 = mul i64 %445, 506832829
  %447 = lshr i64 %446, 48
  %448 = add i32 %437, -3
  %449 = getelementptr inbounds i32, i32* %5, i64 %447
  store i32 %448, i32* %449, align 4
  %450 = getelementptr inbounds i8, i8* %293, i64 -2
  %451 = bitcast i8* %450 to i64*
  %452 = load i64, i64* %451, align 8
  %453 = and i64 %452, -65536
  %454 = mul i64 %453, 506832829
  %455 = mul i64 %452, 33215796281344
  %456 = lshr i64 %455, 48
  %457 = add i32 %437, -2
  %458 = getelementptr inbounds i32, i32* %5, i64 %456
  store i32 %457, i32* %458, align 4
  %459 = lshr i64 %452, 8
  %460 = mul i64 %459, 33215796281344
  %461 = lshr i64 %460, 48
  %462 = add i32 %437, -1
  %463 = getelementptr inbounds i32, i32* %5, i64 %461
  store i32 %462, i32* %463, align 4
  %464 = lshr i64 %454, 48
  %465 = getelementptr inbounds i32, i32* %5, i64 %464
  %466 = load i32, i32* %465, align 4
  store i32 %437, i32* %465, align 4
  %467 = sext i32 %466 to i64
  %468 = getelementptr inbounds i8, i8* %1, i64 %467
  %469 = ptrtoint i8* %468 to i64
  %470 = sub i64 %435, %469
  %471 = icmp slt i64 %470, 262129
  br i1 %471, label %472, label %490

472:                                              ; preds = %429
  %473 = bitcast i8* %293 to i32*
  %474 = load i32, i32* %473, align 4
  %475 = bitcast i8* %468 to i32*
  %476 = load i32, i32* %475, align 4
  %477 = icmp eq i32 %474, %476
  br i1 %477, label %478, label %490

478:                                              ; preds = %472
  %479 = getelementptr inbounds i8, i8* %293, i64 4
  %480 = load i8, i8* %479, align 1
  %481 = getelementptr inbounds i8, i8* %468, i64 4
  %482 = load i8, i8* %481, align 1
  %483 = icmp eq i8 %480, %482
  br i1 %483, label %484, label %490

484:                                              ; preds = %478
  %485 = getelementptr inbounds i8, i8* %293, i64 5
  %486 = load i8, i8* %485, align 1
  %487 = getelementptr inbounds i8, i8* %468, i64 5
  %488 = load i8, i8* %487, align 1
  %489 = icmp eq i8 %486, %488
  br i1 %489, label %512, label %490

490:                                              ; preds = %484, %669, %672, %675, %478, %472, %429, %157
  %491 = phi i64 [ %427, %429 ], [ %427, %472 ], [ %427, %478 ], [ %671, %669 ], [ %674, %672 ], [ %677, %675 ], [ %427, %484 ], [ %159, %157 ]
  %492 = phi i8* [ %293, %429 ], [ %293, %472 ], [ %293, %478 ], [ %560, %669 ], [ %560, %672 ], [ %560, %675 ], [ %293, %484 ], [ %560, %157 ]
  %493 = phi i32 [ %369, %429 ], [ %369, %472 ], [ %369, %478 ], [ %670, %669 ], [ %673, %672 ], [ %676, %675 ], [ %369, %484 ], [ %158, %157 ]
  br label %160

494:                                              ; preds = %626
  %495 = bitcast i8* %560 to i32*
  %496 = load i32, i32* %495, align 4
  %497 = bitcast i8* %665 to i32*
  %498 = load i32, i32* %497, align 4
  %499 = icmp eq i32 %496, %498
  br i1 %499, label %500, label %672

500:                                              ; preds = %494
  %501 = getelementptr inbounds i8, i8* %560, i64 4
  %502 = load i8, i8* %501, align 1
  %503 = getelementptr inbounds i8, i8* %665, i64 4
  %504 = load i8, i8* %503, align 1
  %505 = icmp eq i8 %502, %504
  br i1 %505, label %506, label %675

506:                                              ; preds = %500
  %507 = getelementptr inbounds i8, i8* %560, i64 5
  %508 = load i8, i8* %507, align 1
  %509 = getelementptr inbounds i8, i8* %665, i64 5
  %510 = load i8, i8* %509, align 1
  %511 = icmp eq i8 %508, %510
  br i1 %511, label %512, label %157

512:                                              ; preds = %484, %506
  %513 = phi i8* [ %560, %506 ], [ %293, %484 ]
  %514 = phi i64 [ %664, %506 ], [ %467, %484 ]
  %515 = phi i64 [ %632, %506 ], [ %435, %484 ]
  %516 = phi i64 [ %667, %506 ], [ %470, %484 ]
  %517 = phi i64 [ %624, %506 ], [ %427, %484 ]
  %518 = getelementptr inbounds i8, i8* %142, i64 %514
  %519 = getelementptr inbounds i8, i8* %513, i64 6
  %520 = sub i64 %156, %515
  %521 = add i64 %520, -6
  %522 = lshr i64 %521, 3
  %523 = icmp eq i64 %522, 0
  br i1 %523, label %544, label %524, !prof !34

524:                                              ; preds = %512, %534
  %525 = phi i64 [ %537, %534 ], [ %522, %512 ]
  %526 = phi i8* [ %535, %534 ], [ %519, %512 ]
  %527 = phi i64 [ %536, %534 ], [ 0, %512 ]
  %528 = bitcast i8* %526 to i64*
  %529 = load i64, i64* %528, align 8
  %530 = getelementptr inbounds i8, i8* %518, i64 %527
  %531 = bitcast i8* %530 to i64*
  %532 = load i64, i64* %531, align 8
  %533 = icmp eq i64 %529, %532
  br i1 %533, label %534, label %539, !prof !34

534:                                              ; preds = %524
  %535 = getelementptr inbounds i8, i8* %526, i64 8
  %536 = add nuw i64 %527, 8
  %537 = add nsw i64 %525, -1
  %538 = icmp eq i64 %537, 0
  br i1 %538, label %544, label %524, !prof !34

539:                                              ; preds = %524
  %540 = xor i64 %532, %529
  %541 = call i64 @llvm.cttz.i64(i64 %540, i1 true) #6, !range !36
  %542 = lshr i64 %541, 3
  %543 = or i64 %542, %527
  br label %557

544:                                              ; preds = %534, %512
  %545 = phi i64 [ 0, %512 ], [ %536, %534 ]
  %546 = phi i8* [ %519, %512 ], [ %535, %534 ]
  %547 = and i64 %521, 7
  %548 = icmp eq i64 %547, 0
  br i1 %548, label %557, label %549

549:                                              ; preds = %544
  %550 = getelementptr inbounds i8, i8* %518, i64 %545
  %551 = load i8, i8* %550, align 1
  %552 = load i8, i8* %546, align 1
  %553 = icmp eq i8 %551, %552
  br i1 %553, label %554, label %557, !prof !33

554:                                              ; preds = %549
  %555 = add i64 %545, 1
  %556 = icmp eq i64 %547, 1
  br i1 %556, label %557, label %1249

557:                                              ; preds = %1294, %554, %549, %1249, %1255, %1258, %1264, %1267, %1273, %1276, %1282, %1285, %1291, %544, %539
  %558 = phi i64 [ %543, %539 ], [ %545, %544 ], [ %555, %554 ], [ %545, %549 ], [ %555, %1249 ], [ %1256, %1255 ], [ %1256, %1258 ], [ %1265, %1264 ], [ %1265, %1267 ], [ %1274, %1273 ], [ %1274, %1276 ], [ %1283, %1282 ], [ %1283, %1285 ], [ %1292, %1291 ], [ %1301, %1294 ]
  %559 = add i64 %558, 6
  %560 = getelementptr inbounds i8, i8* %513, i64 %559
  %561 = trunc i64 %516 to i32
  %562 = icmp ult i64 %559, 10
  br i1 %562, label %563, label %567

563:                                              ; preds = %557
  %564 = trunc i64 %559 to i32
  %565 = add nuw nsw i32 %564, 38
  %566 = inttoptr i64 %517 to i32*
  store i32 %565, i32* %566, align 4
  br label %605

567:                                              ; preds = %557
  %568 = icmp ult i64 %559, 134
  br i1 %568, label %569, label %584

569:                                              ; preds = %567
  %570 = trunc i64 %558 to i32
  %571 = call i32 @llvm.ctlz.i32(i32 %570, i1 true) #6, !range !2
  %572 = sub nsw i32 30, %571
  %573 = zext i32 %572 to i64
  %574 = lshr i64 %558, %573
  %575 = shl nuw nsw i64 %573, 1
  %576 = add nuw nsw i64 %574, 44
  %577 = add nuw nsw i64 %576, %575
  %578 = shl i64 %574, %573
  %579 = sub i64 %558, %578
  %580 = shl i64 %579, 8
  %581 = or i64 %580, %577
  %582 = trunc i64 %581 to i32
  %583 = inttoptr i64 %517 to i32*
  store i32 %582, i32* %583, align 4
  br label %605

584:                                              ; preds = %567
  %585 = icmp ult i64 %559, 2118
  br i1 %585, label %586, label %599

586:                                              ; preds = %584
  %587 = add nsw i64 %558, -64
  %588 = trunc i64 %587 to i32
  %589 = call i32 @llvm.ctlz.i32(i32 %588, i1 true) #6, !range !2
  %590 = xor i32 %589, 31
  %591 = zext i32 %590 to i64
  %592 = add nuw nsw i64 %591, 52
  %593 = shl i64 1, %591
  %594 = sub i64 %587, %593
  %595 = shl i64 %594, 8
  %596 = or i64 %595, %592
  %597 = trunc i64 %596 to i32
  %598 = inttoptr i64 %517 to i32*
  store i32 %597, i32* %598, align 4
  br label %605

599:                                              ; preds = %584
  %600 = trunc i64 %559 to i32
  %601 = shl i32 %600, 8
  %602 = add i32 %601, -542208
  %603 = or i32 %602, 63
  %604 = inttoptr i64 %517 to i32*
  store i32 %603, i32* %604, align 4
  br label %605

605:                                              ; preds = %599, %586, %569, %563
  %606 = phi i32* [ %604, %599 ], [ %598, %586 ], [ %583, %569 ], [ %566, %563 ]
  %607 = getelementptr inbounds i32, i32* %606, i64 1
  %608 = add i32 %561, 3
  %609 = call i32 @llvm.ctlz.i32(i32 %608, i1 true) #6, !range !2
  %610 = xor i32 %609, 31
  %611 = add nsw i32 %610, -1
  %612 = lshr i32 %608, %611
  %613 = and i32 %612, 1
  %614 = or i32 %613, 2
  %615 = shl i32 %614, %611
  %616 = shl nuw nsw i32 %610, 1
  %617 = add nsw i32 %616, -4
  %618 = or i32 %613, %617
  %619 = add nsw i32 %618, 80
  %620 = sub i32 %608, %615
  %621 = shl i32 %620, 8
  %622 = or i32 %621, %619
  store i32 %622, i32* %607, align 4
  %623 = getelementptr inbounds i32, i32* %606, i64 2
  %624 = ptrtoint i32* %623 to i64
  %625 = icmp ult i8* %560, %155
  br i1 %625, label %626, label %678, !prof !33

626:                                              ; preds = %605
  %627 = getelementptr inbounds i8, i8* %560, i64 -5
  %628 = bitcast i8* %627 to i64*
  %629 = load i64, i64* %628, align 8
  %630 = mul i64 %629, 33215796281344
  %631 = lshr i64 %630, 48
  %632 = ptrtoint i8* %560 to i64
  %633 = sub i64 %632, %22
  %634 = trunc i64 %633 to i32
  %635 = add i32 %634, -5
  %636 = getelementptr inbounds i32, i32* %5, i64 %631
  store i32 %635, i32* %636, align 4
  %637 = lshr i64 %629, 8
  %638 = mul i64 %637, 33215796281344
  %639 = lshr i64 %638, 48
  %640 = add i32 %634, -4
  %641 = getelementptr inbounds i32, i32* %5, i64 %639
  store i32 %640, i32* %641, align 4
  %642 = and i64 %629, -65536
  %643 = mul i64 %642, 506832829
  %644 = lshr i64 %643, 48
  %645 = add i32 %634, -3
  %646 = getelementptr inbounds i32, i32* %5, i64 %644
  store i32 %645, i32* %646, align 4
  %647 = getelementptr inbounds i8, i8* %560, i64 -2
  %648 = bitcast i8* %647 to i64*
  %649 = load i64, i64* %648, align 8
  %650 = and i64 %649, -65536
  %651 = mul i64 %650, 506832829
  %652 = mul i64 %649, 33215796281344
  %653 = lshr i64 %652, 48
  %654 = add i32 %634, -2
  %655 = getelementptr inbounds i32, i32* %5, i64 %653
  store i32 %654, i32* %655, align 4
  %656 = lshr i64 %649, 8
  %657 = mul i64 %656, 33215796281344
  %658 = lshr i64 %657, 48
  %659 = add i32 %634, -1
  %660 = getelementptr inbounds i32, i32* %5, i64 %658
  store i32 %659, i32* %660, align 4
  %661 = lshr i64 %651, 48
  %662 = getelementptr inbounds i32, i32* %5, i64 %661
  %663 = load i32, i32* %662, align 4
  store i32 %634, i32* %662, align 4
  %664 = sext i32 %663 to i64
  %665 = getelementptr inbounds i8, i8* %1, i64 %664
  %666 = ptrtoint i8* %665 to i64
  %667 = sub i64 %632, %666
  %668 = icmp slt i64 %667, 262129
  br i1 %668, label %494, label %669

669:                                              ; preds = %626
  %670 = trunc i64 %516 to i32
  %671 = ptrtoint i32* %623 to i64
  br label %490

672:                                              ; preds = %494
  %673 = trunc i64 %516 to i32
  %674 = ptrtoint i32* %623 to i64
  br label %490

675:                                              ; preds = %500
  %676 = trunc i64 %516 to i32
  %677 = ptrtoint i32* %623 to i64
  br label %490

678:                                              ; preds = %605
  %679 = ptrtoint i8* %348 to i64
  %680 = ptrtoint i32* %623 to i64
  br label %684

681:                                              ; preds = %424
  %682 = ptrtoint i8* %348 to i64
  %683 = ptrtoint i32* %426 to i64
  br label %684

684:                                              ; preds = %171, %681, %678, %143
  %685 = phi i64 [ %20, %143 ], [ %680, %678 ], [ %683, %681 ], [ %161, %171 ]
  %686 = phi i64 [ %21, %143 ], [ %679, %678 ], [ %682, %681 ], [ %162, %171 ]
  %687 = phi i8* [ %144, %143 ], [ %560, %678 ], [ %293, %681 ], [ %163, %171 ]
  %688 = icmp ult i8* %687, %148
  br i1 %688, label %689, label %750

689:                                              ; preds = %684
  %690 = ptrtoint i8* %148 to i64
  %691 = ptrtoint i8* %687 to i64
  %692 = sub i64 %690, %691
  %693 = trunc i64 %692 to i32
  %694 = icmp ult i32 %693, 6
  br i1 %694, label %695, label %697

695:                                              ; preds = %689
  %696 = inttoptr i64 %685 to i32*
  store i32 %693, i32* %696, align 4
  br label %742

697:                                              ; preds = %689
  %698 = icmp ult i32 %693, 130
  br i1 %698, label %699, label %712

699:                                              ; preds = %697
  %700 = add nsw i32 %693, -2
  %701 = call i32 @llvm.ctlz.i32(i32 %700, i1 true) #6, !range !2
  %702 = sub nsw i32 30, %701
  %703 = lshr i32 %700, %702
  %704 = shl nsw i32 %702, 1
  %705 = add nuw nsw i32 %703, 2
  %706 = add i32 %705, %704
  %707 = shl i32 %703, %702
  %708 = sub i32 %700, %707
  %709 = shl i32 %708, 8
  %710 = or i32 %709, %706
  %711 = inttoptr i64 %685 to i32*
  store i32 %710, i32* %711, align 4
  br label %742

712:                                              ; preds = %697
  %713 = icmp ult i32 %693, 2114
  br i1 %713, label %714, label %724

714:                                              ; preds = %712
  %715 = add nsw i32 %693, -66
  %716 = call i32 @llvm.ctlz.i32(i32 %715, i1 true) #6, !range !2
  %717 = xor i32 %716, 31
  %718 = add nuw nsw i32 %717, 10
  %719 = shl i32 1, %717
  %720 = sub i32 %715, %719
  %721 = shl i32 %720, 8
  %722 = or i32 %721, %718
  %723 = inttoptr i64 %685 to i32*
  store i32 %722, i32* %723, align 4
  br label %742

724:                                              ; preds = %712
  %725 = icmp ult i32 %693, 6210
  br i1 %725, label %726, label %731

726:                                              ; preds = %724
  %727 = shl i32 %693, 8
  %728 = add nsw i32 %727, -541184
  %729 = or i32 %728, 21
  %730 = inttoptr i64 %685 to i32*
  store i32 %729, i32* %730, align 4
  br label %742

731:                                              ; preds = %724
  %732 = icmp ult i32 %693, 22594
  %733 = shl i32 %693, 8
  br i1 %732, label %734, label %738

734:                                              ; preds = %731
  %735 = add i32 %733, -1589760
  %736 = or i32 %735, 22
  %737 = inttoptr i64 %685 to i32*
  store i32 %736, i32* %737, align 4
  br label %742

738:                                              ; preds = %731
  %739 = add i32 %733, -5784064
  %740 = or i32 %739, 23
  %741 = inttoptr i64 %685 to i32*
  store i32 %740, i32* %741, align 4
  br label %742

742:                                              ; preds = %738, %734, %726, %714, %699, %695
  %743 = phi i32* [ %741, %738 ], [ %737, %734 ], [ %730, %726 ], [ %723, %714 ], [ %711, %699 ], [ %696, %695 ]
  %744 = getelementptr inbounds i32, i32* %743, i64 1
  %745 = ptrtoint i32* %744 to i64
  %746 = inttoptr i64 %686 to i8*
  %747 = and i64 %692, 4294967295
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %746, i8* align 1 %687, i64 %747, i1 false) #6
  %748 = getelementptr inbounds i8, i8* %746, i64 %747
  %749 = ptrtoint i8* %748 to i64
  br label %750

750:                                              ; preds = %742, %684
  %751 = phi i64 [ %745, %742 ], [ %685, %684 ]
  %752 = phi i64 [ %749, %742 ], [ %686, %684 ]
  %753 = sub i64 %752, %21
  %754 = uitofp i64 %147 to double
  %755 = uitofp i64 %753 to double
  %756 = fmul double %754, 0x3FEF5C28F5C28F5C
  %757 = fcmp ogt double %756, %755
  br i1 %757, label %832, label %758

758:                                              ; preds = %750
  call void @llvm.lifetime.start.p0i8(i64 1024, i8* nonnull %23) #6
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %23, i8 0, i64 1024, i1 false) #6
  %759 = fmul double %754, 8.000000e+00
  %760 = fmul double %759, 0x3FEF5C28F5C28F5C
  %761 = fdiv double %760, 4.300000e+01
  %762 = icmp eq i64 %147, 0
  br i1 %762, label %773, label %763

763:                                              ; preds = %758, %763
  %764 = phi i64 [ %771, %763 ], [ 0, %758 ]
  %765 = getelementptr inbounds i8, i8* %144, i64 %764
  %766 = load i8, i8* %765, align 1
  %767 = zext i8 %766 to i64
  %768 = getelementptr inbounds [256 x i32], [256 x i32]* %14, i64 0, i64 %767
  %769 = load i32, i32* %768, align 4
  %770 = add i32 %769, 1
  store i32 %770, i32* %768, align 4
  %771 = add i64 %764, 43
  %772 = icmp ult i64 %771, %147
  br i1 %772, label %763, label %773

773:                                              ; preds = %763, %758
  br label %774

774:                                              ; preds = %773, %808
  %775 = phi double [ %811, %808 ], [ 0.000000e+00, %773 ]
  %776 = phi i64 [ %800, %808 ], [ 0, %773 ]
  %777 = phi i64 [ %797, %808 ], [ 0, %773 ]
  %778 = getelementptr inbounds [256 x i32], [256 x i32]* %14, i64 0, i64 %777
  %779 = load i32, i32* %778, align 8
  %780 = zext i32 %779 to i64
  %781 = icmp ult i32 %779, 256
  br i1 %781, label %782, label %786

782:                                              ; preds = %774
  %783 = getelementptr inbounds [256 x double], [256 x double]* @kBrotliLog2Table, i64 0, i64 %780
  %784 = load double, double* %783, align 8
  %785 = uitofp i32 %779 to double
  br label %789

786:                                              ; preds = %774
  %787 = uitofp i32 %779 to double
  %788 = call double @log2(double %787) #6
  br label %789

789:                                              ; preds = %786, %782
  %790 = phi double [ %785, %782 ], [ %787, %786 ]
  %791 = phi double [ %784, %782 ], [ %788, %786 ]
  %792 = or i64 %777, 1
  %793 = getelementptr inbounds [256 x i32], [256 x i32]* %14, i64 0, i64 %792
  %794 = fmul double %790, %791
  %795 = fsub double %775, %794
  %796 = add i64 %776, %780
  %797 = add nuw nsw i64 %777, 2
  %798 = load i32, i32* %793, align 4
  %799 = zext i32 %798 to i64
  %800 = add i64 %796, %799
  %801 = uitofp i32 %798 to double
  %802 = icmp ult i32 %798, 256
  br i1 %802, label %803, label %806

803:                                              ; preds = %789
  %804 = getelementptr inbounds [256 x double], [256 x double]* @kBrotliLog2Table, i64 0, i64 %799
  %805 = load double, double* %804, align 8
  br label %808

806:                                              ; preds = %789
  %807 = call double @log2(double %801) #6
  br label %808

808:                                              ; preds = %806, %803
  %809 = phi double [ %805, %803 ], [ %807, %806 ]
  %810 = fmul double %809, %801
  %811 = fsub double %795, %810
  %812 = icmp ult i64 %797, 256
  br i1 %812, label %774, label %813

813:                                              ; preds = %808
  %814 = icmp eq i64 %800, 0
  %815 = uitofp i64 %800 to double
  br i1 %814, label %827, label %816

816:                                              ; preds = %813
  %817 = icmp ult i64 %800, 256
  br i1 %817, label %818, label %821

818:                                              ; preds = %816
  %819 = getelementptr inbounds [256 x double], [256 x double]* @kBrotliLog2Table, i64 0, i64 %800
  %820 = load double, double* %819, align 8
  br label %823

821:                                              ; preds = %816
  %822 = call double @log2(double %815) #6
  br label %823

823:                                              ; preds = %821, %818
  %824 = phi double [ %820, %818 ], [ %822, %821 ]
  %825 = fmul double %824, %815
  %826 = fadd double %811, %825
  br label %827

827:                                              ; preds = %823, %813
  %828 = phi double [ %826, %823 ], [ %811, %813 ]
  %829 = fcmp olt double %828, %815
  %830 = select i1 %829, double %815, double %828
  %831 = fcmp uge double %830, %761
  call void @llvm.lifetime.end.p0i8(i64 1024, i8* nonnull %23) #6
  br i1 %831, label %1144, label %832

832:                                              ; preds = %827, %750
  %833 = sub i64 %751, %20
  %834 = ashr exact i64 %833, 2
  %835 = load i64, i64* %6, align 8, !alias.scope !527, !noalias !530
  %836 = lshr i64 %835, 3
  %837 = getelementptr inbounds i8, i8* %7, i64 %836
  %838 = load i8, i8* %837, align 1, !alias.scope !530, !noalias !527
  %839 = zext i8 %838 to i64
  %840 = bitcast i8* %837 to i64*
  store i64 %839, i64* %840, align 8, !alias.scope !530, !noalias !527
  %841 = add i64 %835, 1
  %842 = icmp ult i64 %147, 65537
  %843 = select i1 %842, i64 4, i64 5
  %844 = add nsw i64 %843, -4
  %845 = lshr i64 %841, 3
  %846 = getelementptr inbounds i8, i8* %7, i64 %845
  %847 = load i8, i8* %846, align 1, !alias.scope !532, !noalias !535
  %848 = zext i8 %847 to i64
  %849 = and i64 %841, 7
  %850 = shl i64 %844, %849
  %851 = or i64 %850, %848
  %852 = bitcast i8* %846 to i64*
  store i64 %851, i64* %852, align 8, !alias.scope !532, !noalias !535
  %853 = add i64 %835, 3
  %854 = shl nuw nsw i64 %843, 2
  %855 = add nsw i64 %147, -1
  %856 = lshr i64 %853, 3
  %857 = getelementptr inbounds i8, i8* %7, i64 %856
  %858 = load i8, i8* %857, align 1, !alias.scope !537, !noalias !540
  %859 = zext i8 %858 to i64
  %860 = and i64 %853, 7
  %861 = shl i64 %855, %860
  %862 = or i64 %861, %859
  %863 = bitcast i8* %857 to i64*
  store i64 %862, i64* %863, align 8, !alias.scope !537, !noalias !540
  %864 = add i64 %853, %854
  %865 = lshr i64 %864, 3
  %866 = getelementptr inbounds i8, i8* %7, i64 %865
  %867 = load i8, i8* %866, align 1, !alias.scope !542, !noalias !545
  %868 = zext i8 %867 to i64
  %869 = bitcast i8* %866 to i64*
  store i64 %868, i64* %869, align 8, !alias.scope !542, !noalias !545
  %870 = add i64 %864, 1
  %871 = lshr i64 %870, 3
  %872 = getelementptr inbounds i8, i8* %7, i64 %871
  %873 = load i8, i8* %872, align 1, !alias.scope !547, !noalias !550
  %874 = zext i8 %873 to i64
  %875 = bitcast i8* %872 to i64*
  store i64 %874, i64* %875, align 8, !alias.scope !547, !noalias !550
  %876 = add i64 %864, 14
  store i64 %876, i64* %6, align 8, !alias.scope !550, !noalias !547
  call void @llvm.lifetime.start.p0i8(i64 256, i8* nonnull %24) #6
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %24, i8 -86, i64 256, i1 false) #6
  call void @llvm.lifetime.start.p0i8(i64 512, i8* nonnull %25) #6
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %25, i8 -86, i64 512, i1 false) #6
  call void @llvm.lifetime.start.p0i8(i64 1024, i8* nonnull %23) #6
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %23, i8 0, i64 1024, i1 false) #6
  call void @llvm.lifetime.start.p0i8(i64 128, i8* nonnull %26) #6
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %26, i8 0, i64 128, i1 false) #6
  call void @llvm.lifetime.start.p0i8(i64 256, i8* nonnull %27) #6
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %27, i8 0, i64 256, i1 false) #6
  call void @llvm.lifetime.start.p0i8(i64 512, i8* nonnull %28) #6
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %28, i8 0, i64 512, i1 false) #6
  %877 = icmp eq i64 %753, 0
  br i1 %877, label %932, label %878

878:                                              ; preds = %832
  %879 = add i64 %752, %141
  %880 = and i64 %753, 3
  %881 = icmp ult i64 %879, 3
  br i1 %881, label %917, label %882

882:                                              ; preds = %878
  %883 = sub i64 %753, %880
  br label %884

884:                                              ; preds = %884, %882
  %885 = phi i64 [ 0, %882 ], [ %914, %884 ]
  %886 = phi i64 [ %883, %882 ], [ %915, %884 ]
  %887 = getelementptr inbounds i8, i8* %4, i64 %885
  %888 = load i8, i8* %887, align 1
  %889 = zext i8 %888 to i64
  %890 = getelementptr inbounds [256 x i32], [256 x i32]* %14, i64 0, i64 %889
  %891 = load i32, i32* %890, align 4
  %892 = add i32 %891, 1
  store i32 %892, i32* %890, align 4
  %893 = or i64 %885, 1
  %894 = getelementptr inbounds i8, i8* %4, i64 %893
  %895 = load i8, i8* %894, align 1
  %896 = zext i8 %895 to i64
  %897 = getelementptr inbounds [256 x i32], [256 x i32]* %14, i64 0, i64 %896
  %898 = load i32, i32* %897, align 4
  %899 = add i32 %898, 1
  store i32 %899, i32* %897, align 4
  %900 = or i64 %885, 2
  %901 = getelementptr inbounds i8, i8* %4, i64 %900
  %902 = load i8, i8* %901, align 1
  %903 = zext i8 %902 to i64
  %904 = getelementptr inbounds [256 x i32], [256 x i32]* %14, i64 0, i64 %903
  %905 = load i32, i32* %904, align 4
  %906 = add i32 %905, 1
  store i32 %906, i32* %904, align 4
  %907 = or i64 %885, 3
  %908 = getelementptr inbounds i8, i8* %4, i64 %907
  %909 = load i8, i8* %908, align 1
  %910 = zext i8 %909 to i64
  %911 = getelementptr inbounds [256 x i32], [256 x i32]* %14, i64 0, i64 %910
  %912 = load i32, i32* %911, align 4
  %913 = add i32 %912, 1
  store i32 %913, i32* %911, align 4
  %914 = add nuw i64 %885, 4
  %915 = add i64 %886, -4
  %916 = icmp eq i64 %915, 0
  br i1 %916, label %917, label %884

917:                                              ; preds = %884, %878
  %918 = phi i64 [ 0, %878 ], [ %914, %884 ]
  %919 = icmp eq i64 %880, 0
  br i1 %919, label %932, label %920

920:                                              ; preds = %917, %920
  %921 = phi i64 [ %929, %920 ], [ %918, %917 ]
  %922 = phi i64 [ %930, %920 ], [ %880, %917 ]
  %923 = getelementptr inbounds i8, i8* %4, i64 %921
  %924 = load i8, i8* %923, align 1
  %925 = zext i8 %924 to i64
  %926 = getelementptr inbounds [256 x i32], [256 x i32]* %14, i64 0, i64 %925
  %927 = load i32, i32* %926, align 4
  %928 = add i32 %927, 1
  store i32 %928, i32* %926, align 4
  %929 = add nuw i64 %921, 1
  %930 = add i64 %922, -1
  %931 = icmp eq i64 %930, 0
  br i1 %931, label %932, label %920, !llvm.loop !552

932:                                              ; preds = %917, %920, %832
  call void @BrotliBuildAndStoreHuffmanTreeFast(%struct.MemoryManager* %0, i32* nonnull %29, i64 %753, i64 8, i8* nonnull %24, i16* nonnull %30, i64* %6, i8* %7) #6
  %933 = icmp eq i64 %833, 0
  br i1 %933, label %980, label %934

934:                                              ; preds = %932
  %935 = and i64 %834, 1
  %936 = icmp eq i64 %833, 4
  br i1 %936, label %960, label %937

937:                                              ; preds = %934
  %938 = sub nsw i64 %834, %935
  br label %939

939:                                              ; preds = %939, %937
  %940 = phi i64 [ 0, %937 ], [ %957, %939 ]
  %941 = phi i64 [ %938, %937 ], [ %958, %939 ]
  %942 = getelementptr inbounds i32, i32* %3, i64 %940
  %943 = load i32, i32* %942, align 4
  %944 = and i32 %943, 255
  %945 = zext i32 %944 to i64
  %946 = getelementptr inbounds [128 x i32], [128 x i32]* %17, i64 0, i64 %945
  %947 = load i32, i32* %946, align 4
  %948 = add i32 %947, 1
  store i32 %948, i32* %946, align 4
  %949 = or i64 %940, 1
  %950 = getelementptr inbounds i32, i32* %3, i64 %949
  %951 = load i32, i32* %950, align 4
  %952 = and i32 %951, 255
  %953 = zext i32 %952 to i64
  %954 = getelementptr inbounds [128 x i32], [128 x i32]* %17, i64 0, i64 %953
  %955 = load i32, i32* %954, align 4
  %956 = add i32 %955, 1
  store i32 %956, i32* %954, align 4
  %957 = add nuw i64 %940, 2
  %958 = add i64 %941, -2
  %959 = icmp eq i64 %958, 0
  br i1 %959, label %960, label %939

960:                                              ; preds = %939, %934
  %961 = phi i64 [ 0, %934 ], [ %957, %939 ]
  %962 = icmp eq i64 %935, 0
  br i1 %962, label %971, label %963

963:                                              ; preds = %960
  %964 = getelementptr inbounds i32, i32* %3, i64 %961
  %965 = load i32, i32* %964, align 4
  %966 = and i32 %965, 255
  %967 = zext i32 %966 to i64
  %968 = getelementptr inbounds [128 x i32], [128 x i32]* %17, i64 0, i64 %967
  %969 = load i32, i32* %968, align 4
  %970 = add i32 %969, 1
  store i32 %970, i32* %968, align 4
  br label %971

971:                                              ; preds = %960, %963
  %972 = load i32, i32* %31, align 4
  %973 = load i32, i32* %32, align 8
  %974 = load i32, i32* %33, align 16
  %975 = load i32, i32* %34, align 16
  %976 = add i32 %972, 1
  %977 = add i32 %973, 1
  %978 = add i32 %974, 1
  %979 = add i32 %975, 1
  br label %980

980:                                              ; preds = %971, %932
  %981 = phi i32 [ %979, %971 ], [ 1, %932 ]
  %982 = phi i32 [ %978, %971 ], [ 1, %932 ]
  %983 = phi i32 [ %977, %971 ], [ 1, %932 ]
  %984 = phi i32 [ %976, %971 ], [ 1, %932 ]
  store i32 %984, i32* %31, align 4
  store i32 %983, i32* %32, align 8
  store i32 %982, i32* %33, align 16
  store i32 %981, i32* %34, align 16
  call void @llvm.lifetime.start.p0i8(i64 1032, i8* nonnull %36) #6
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %36, i8 -86, i64 1032, i1 false) #6
  call void @llvm.lifetime.start.p0i8(i64 704, i8* nonnull %37) #6
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %37, i8 0, i64 704, i1 false) #6
  call void @llvm.lifetime.start.p0i8(i64 128, i8* nonnull %38) #6
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %38, i8 -86, i64 128, i1 false) #6
  call void @BrotliCreateHuffmanTree(i32* nonnull %35, i64 64, i32 15, %struct.HuffmanTree* nonnull %39, i8* nonnull %26) #6
  call void @BrotliCreateHuffmanTree(i32* %33, i64 64, i32 14, %struct.HuffmanTree* nonnull %39, i8* %40) #6
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 16 %37, i8* align 8 %41, i64 24, i1 false) #6
  %985 = load i64, i64* %43, align 16
  store i64 %985, i64* %44, align 8
  %986 = load i64, i64* %47, align 16
  store i64 %986, i64* %48, align 16
  %987 = load i64, i64* %51, align 8
  store i64 %987, i64* %52, align 8
  %988 = load i64, i64* %55, align 8
  store i64 %988, i64* %56, align 16
  %989 = load i64, i64* %59, align 16
  store i64 %989, i64* %60, align 8
  call void @BrotliConvertBitDepthsToSymbols(i8* nonnull %37, i64 64, i16* nonnull %61) #6
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 16 %27, i8* align 16 %63, i64 16, i1 false) #6
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 16 %65, i8* align 16 %67, i64 16, i1 false) #6
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 16 %69, i8* align 16 %71, i64 16, i1 false) #6
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 16 %73, i8* nonnull align 16 %38, i64 48, i1 false) #6
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 16 %75, i8* align 16 %77, i64 16, i1 false) #6
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 16 %79, i8* align 16 %81, i64 16, i1 false) #6
  call void @BrotliConvertBitDepthsToSymbols(i8* %40, i64 64, i16* %82) #6
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %37, i8 0, i64 64, i1 false) #6
  %990 = load i64, i64* %83, align 8
  store i64 %990, i64* %84, align 16
  %991 = load i64, i64* %87, align 16
  store i64 %991, i64* %88, align 16
  %992 = load i64, i64* %91, align 8
  store i64 %992, i64* %92, align 16
  %993 = load i64, i64* %47, align 16
  store i64 %993, i64* %94, align 16
  %994 = load i64, i64* %55, align 8
  store i64 %994, i64* %96, align 16
  %995 = load i8, i8* %26, align 16
  store i8 %995, i8* %89, align 16
  %996 = load i8, i8* %50, align 8
  store i8 %996, i8* %97, align 16
  %997 = load i8, i8* %58, align 16
  store i8 %997, i8* %98, align 16
  %998 = load i8, i8* %99, align 1
  store i8 %998, i8* %100, align 8
  %999 = load i8, i8* %101, align 1
  store i8 %999, i8* %102, align 8
  %1000 = load i8, i8* %103, align 1
  store i8 %1000, i8* %104, align 8
  %1001 = load i8, i8* %105, align 2
  store i8 %1001, i8* %106, align 16
  %1002 = load i8, i8* %107, align 2
  store i8 %1002, i8* %108, align 16
  %1003 = load i8, i8* %109, align 2
  store i8 %1003, i8* %110, align 16
  %1004 = load i8, i8* %111, align 1
  store i8 %1004, i8* %112, align 8
  %1005 = load i8, i8* %113, align 1
  store i8 %1005, i8* %114, align 8
  %1006 = load i8, i8* %115, align 1
  store i8 %1006, i8* %116, align 8
  %1007 = load i8, i8* %117, align 4
  store i8 %1007, i8* %118, align 16
  %1008 = load i8, i8* %119, align 4
  store i8 %1008, i8* %120, align 16
  %1009 = load i8, i8* %121, align 4
  store i8 %1009, i8* %122, align 16
  %1010 = load i8, i8* %123, align 1
  store i8 %1010, i8* %124, align 8
  %1011 = load i8, i8* %125, align 1
  store i8 %1011, i8* %126, align 8
  %1012 = load i8, i8* %127, align 1
  store i8 %1012, i8* %128, align 8
  %1013 = load i8, i8* %129, align 2
  store i8 %1013, i8* %130, align 16
  %1014 = load i8, i8* %131, align 2
  store i8 %1014, i8* %132, align 16
  %1015 = load i8, i8* %133, align 2
  store i8 %1015, i8* %134, align 16
  %1016 = load i8, i8* %135, align 1
  store i8 %1016, i8* %136, align 8
  %1017 = load i8, i8* %137, align 1
  store i8 %1017, i8* %138, align 8
  %1018 = load i8, i8* %139, align 1
  store i8 %1018, i8* %140, align 8
  call void @BrotliStoreHuffmanTree(i8* nonnull %37, i64 704, %struct.HuffmanTree* nonnull %39, i64* %6, i8* %7) #6
  call void @BrotliStoreHuffmanTree(i8* %40, i64 64, %struct.HuffmanTree* nonnull %39, i64* %6, i8* %7) #6
  call void @llvm.lifetime.end.p0i8(i64 128, i8* nonnull %38) #6
  call void @llvm.lifetime.end.p0i8(i64 704, i8* nonnull %37) #6
  call void @llvm.lifetime.end.p0i8(i64 1032, i8* nonnull %36) #6
  br i1 %933, label %1143, label %1019

1019:                                             ; preds = %980
  %1020 = load i64, i64* %6, align 8, !alias.scope !553, !noalias !556
  br label %1021

1021:                                             ; preds = %1138, %1019
  %1022 = phi i64 [ %1139, %1138 ], [ %1020, %1019 ]
  %1023 = phi i8* [ %1140, %1138 ], [ %4, %1019 ]
  %1024 = phi i64 [ %1141, %1138 ], [ 0, %1019 ]
  %1025 = getelementptr inbounds i32, i32* %3, i64 %1024
  %1026 = load i32, i32* %1025, align 4
  %1027 = and i32 %1026, 255
  %1028 = lshr i32 %1026, 8
  %1029 = zext i32 %1027 to i64
  %1030 = getelementptr inbounds [128 x i8], [128 x i8]* %15, i64 0, i64 %1029
  %1031 = load i8, i8* %1030, align 1
  %1032 = zext i8 %1031 to i64
  %1033 = getelementptr inbounds [128 x i16], [128 x i16]* %16, i64 0, i64 %1029
  %1034 = load i16, i16* %1033, align 2
  %1035 = zext i16 %1034 to i64
  %1036 = lshr i64 %1022, 3
  %1037 = getelementptr inbounds i8, i8* %7, i64 %1036
  %1038 = load i8, i8* %1037, align 1, !alias.scope !556, !noalias !553
  %1039 = zext i8 %1038 to i64
  %1040 = and i64 %1022, 7
  %1041 = shl i64 %1035, %1040
  %1042 = or i64 %1041, %1039
  %1043 = bitcast i8* %1037 to i64*
  store i64 %1042, i64* %1043, align 8, !alias.scope !556, !noalias !553
  %1044 = add i64 %1022, %1032
  %1045 = getelementptr inbounds [128 x i32], [128 x i32]* @StoreCommands.kNumExtraBits, i64 0, i64 %1029
  %1046 = load i32, i32* %1045, align 4
  %1047 = zext i32 %1046 to i64
  %1048 = zext i32 %1028 to i64
  %1049 = lshr i64 %1044, 3
  %1050 = getelementptr inbounds i8, i8* %7, i64 %1049
  %1051 = load i8, i8* %1050, align 1, !alias.scope !558, !noalias !561
  %1052 = zext i8 %1051 to i64
  %1053 = and i64 %1044, 7
  %1054 = shl i64 %1048, %1053
  %1055 = or i64 %1054, %1052
  %1056 = bitcast i8* %1050 to i64*
  store i64 %1055, i64* %1056, align 8, !alias.scope !558, !noalias !561
  %1057 = add i64 %1044, %1047
  store i64 %1057, i64* %6, align 8, !alias.scope !561, !noalias !558
  %1058 = icmp ult i32 %1027, 24
  br i1 %1058, label %1059, label %1138

1059:                                             ; preds = %1021
  %1060 = getelementptr inbounds [24 x i32], [24 x i32]* @StoreCommands.kInsertOffset, i64 0, i64 %1029
  %1061 = load i32, i32* %1060, align 4
  %1062 = add i32 %1061, %1028
  %1063 = icmp eq i32 %1062, 0
  br i1 %1063, label %1138, label %1064

1064:                                             ; preds = %1059
  %1065 = add i32 %1061, -1
  %1066 = and i32 %1062, 1
  %1067 = sub nsw i32 0, %1028
  %1068 = icmp eq i32 %1065, %1067
  br i1 %1068, label %1113, label %1069

1069:                                             ; preds = %1064
  %1070 = sub i32 %1062, %1066
  br label %1071

1071:                                             ; preds = %1071, %1069
  %1072 = phi i64 [ %1057, %1069 ], [ %1109, %1071 ]
  %1073 = phi i8* [ %1023, %1069 ], [ %1110, %1071 ]
  %1074 = phi i32 [ %1070, %1069 ], [ %1111, %1071 ]
  %1075 = load i8, i8* %1073, align 1
  %1076 = zext i8 %1075 to i64
  %1077 = getelementptr inbounds [256 x i8], [256 x i8]* %12, i64 0, i64 %1076
  %1078 = load i8, i8* %1077, align 1
  %1079 = zext i8 %1078 to i64
  %1080 = getelementptr inbounds [256 x i16], [256 x i16]* %13, i64 0, i64 %1076
  %1081 = load i16, i16* %1080, align 2
  %1082 = zext i16 %1081 to i64
  %1083 = lshr i64 %1072, 3
  %1084 = getelementptr inbounds i8, i8* %7, i64 %1083
  %1085 = load i8, i8* %1084, align 1, !alias.scope !563, !noalias !566
  %1086 = zext i8 %1085 to i64
  %1087 = and i64 %1072, 7
  %1088 = shl i64 %1082, %1087
  %1089 = or i64 %1088, %1086
  %1090 = bitcast i8* %1084 to i64*
  store i64 %1089, i64* %1090, align 8, !alias.scope !563, !noalias !566
  %1091 = add i64 %1072, %1079
  store i64 %1091, i64* %6, align 8, !alias.scope !566, !noalias !563
  %1092 = getelementptr inbounds i8, i8* %1073, i64 1
  %1093 = load i8, i8* %1092, align 1
  %1094 = zext i8 %1093 to i64
  %1095 = getelementptr inbounds [256 x i8], [256 x i8]* %12, i64 0, i64 %1094
  %1096 = load i8, i8* %1095, align 1
  %1097 = zext i8 %1096 to i64
  %1098 = getelementptr inbounds [256 x i16], [256 x i16]* %13, i64 0, i64 %1094
  %1099 = load i16, i16* %1098, align 2
  %1100 = zext i16 %1099 to i64
  %1101 = lshr i64 %1091, 3
  %1102 = getelementptr inbounds i8, i8* %7, i64 %1101
  %1103 = load i8, i8* %1102, align 1, !alias.scope !563, !noalias !566
  %1104 = zext i8 %1103 to i64
  %1105 = and i64 %1091, 7
  %1106 = shl i64 %1100, %1105
  %1107 = or i64 %1106, %1104
  %1108 = bitcast i8* %1102 to i64*
  store i64 %1107, i64* %1108, align 8, !alias.scope !563, !noalias !566
  %1109 = add i64 %1091, %1097
  store i64 %1109, i64* %6, align 8, !alias.scope !566, !noalias !563
  %1110 = getelementptr inbounds i8, i8* %1073, i64 2
  %1111 = add i32 %1074, -2
  %1112 = icmp eq i32 %1111, 0
  br i1 %1112, label %1113, label %1071

1113:                                             ; preds = %1071, %1064
  %1114 = phi i64 [ undef, %1064 ], [ %1109, %1071 ]
  %1115 = phi i8* [ undef, %1064 ], [ %1110, %1071 ]
  %1116 = phi i64 [ %1057, %1064 ], [ %1109, %1071 ]
  %1117 = phi i8* [ %1023, %1064 ], [ %1110, %1071 ]
  %1118 = icmp eq i32 %1066, 0
  br i1 %1118, label %1138, label %1119

1119:                                             ; preds = %1113
  %1120 = load i8, i8* %1117, align 1
  %1121 = zext i8 %1120 to i64
  %1122 = getelementptr inbounds [256 x i8], [256 x i8]* %12, i64 0, i64 %1121
  %1123 = load i8, i8* %1122, align 1
  %1124 = zext i8 %1123 to i64
  %1125 = getelementptr inbounds [256 x i16], [256 x i16]* %13, i64 0, i64 %1121
  %1126 = load i16, i16* %1125, align 2
  %1127 = zext i16 %1126 to i64
  %1128 = lshr i64 %1116, 3
  %1129 = getelementptr inbounds i8, i8* %7, i64 %1128
  %1130 = load i8, i8* %1129, align 1, !alias.scope !563, !noalias !566
  %1131 = zext i8 %1130 to i64
  %1132 = and i64 %1116, 7
  %1133 = shl i64 %1127, %1132
  %1134 = or i64 %1133, %1131
  %1135 = bitcast i8* %1129 to i64*
  store i64 %1134, i64* %1135, align 8, !alias.scope !563, !noalias !566
  %1136 = add i64 %1116, %1124
  store i64 %1136, i64* %6, align 8, !alias.scope !566, !noalias !563
  %1137 = getelementptr inbounds i8, i8* %1117, i64 1
  br label %1138

1138:                                             ; preds = %1119, %1113, %1059, %1021
  %1139 = phi i64 [ %1057, %1021 ], [ %1057, %1059 ], [ %1114, %1113 ], [ %1136, %1119 ]
  %1140 = phi i8* [ %1023, %1021 ], [ %1023, %1059 ], [ %1115, %1113 ], [ %1137, %1119 ]
  %1141 = add nuw i64 %1024, 1
  %1142 = icmp eq i64 %1141, %834
  br i1 %1142, label %1143, label %1021

1143:                                             ; preds = %1138, %980
  call void @llvm.lifetime.end.p0i8(i64 512, i8* nonnull %28) #6
  call void @llvm.lifetime.end.p0i8(i64 256, i8* nonnull %27) #6
  call void @llvm.lifetime.end.p0i8(i64 128, i8* nonnull %26) #6
  call void @llvm.lifetime.end.p0i8(i64 1024, i8* nonnull %23) #6
  call void @llvm.lifetime.end.p0i8(i64 512, i8* nonnull %25) #6
  call void @llvm.lifetime.end.p0i8(i64 256, i8* nonnull %24) #6
  br label %1192

1144:                                             ; preds = %827
  %1145 = load i64, i64* %6, align 8, !alias.scope !568, !noalias !571
  %1146 = lshr i64 %1145, 3
  %1147 = getelementptr inbounds i8, i8* %7, i64 %1146
  %1148 = load i8, i8* %1147, align 1, !alias.scope !571, !noalias !568
  %1149 = zext i8 %1148 to i64
  %1150 = bitcast i8* %1147 to i64*
  store i64 %1149, i64* %1150, align 8, !alias.scope !571, !noalias !568
  %1151 = add i64 %1145, 1
  %1152 = icmp ult i64 %147, 65537
  %1153 = select i1 %1152, i64 4, i64 5
  %1154 = add nsw i64 %1153, -4
  %1155 = lshr i64 %1151, 3
  %1156 = getelementptr inbounds i8, i8* %7, i64 %1155
  %1157 = load i8, i8* %1156, align 1, !alias.scope !573, !noalias !576
  %1158 = zext i8 %1157 to i64
  %1159 = and i64 %1151, 7
  %1160 = shl i64 %1154, %1159
  %1161 = or i64 %1160, %1158
  %1162 = bitcast i8* %1156 to i64*
  store i64 %1161, i64* %1162, align 8, !alias.scope !573, !noalias !576
  %1163 = add i64 %1145, 3
  %1164 = shl nuw nsw i64 %1153, 2
  %1165 = add nsw i64 %147, -1
  %1166 = lshr i64 %1163, 3
  %1167 = getelementptr inbounds i8, i8* %7, i64 %1166
  %1168 = load i8, i8* %1167, align 1, !alias.scope !578, !noalias !581
  %1169 = zext i8 %1168 to i64
  %1170 = and i64 %1163, 7
  %1171 = shl i64 %1165, %1170
  %1172 = or i64 %1171, %1169
  %1173 = bitcast i8* %1167 to i64*
  store i64 %1172, i64* %1173, align 8, !alias.scope !578, !noalias !581
  %1174 = add i64 %1163, %1164
  %1175 = lshr i64 %1174, 3
  %1176 = getelementptr inbounds i8, i8* %7, i64 %1175
  %1177 = load i8, i8* %1176, align 1, !alias.scope !583, !noalias !586
  %1178 = zext i8 %1177 to i64
  %1179 = and i64 %1174, 7
  %1180 = shl i64 1, %1179
  %1181 = or i64 %1180, %1178
  %1182 = bitcast i8* %1176 to i64*
  store i64 %1181, i64* %1182, align 8, !alias.scope !583, !noalias !586
  %1183 = add i64 %1174, 8
  %1184 = and i64 %1183, 4294967288
  store i64 %1184, i64* %6, align 8
  %1185 = lshr exact i64 %1184, 3
  %1186 = getelementptr inbounds i8, i8* %7, i64 %1185
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %1186, i8* align 1 %144, i64 %147, i1 false) #6
  %1187 = shl nuw nsw i64 %147, 3
  %1188 = load i64, i64* %6, align 8
  %1189 = add i64 %1188, %1187
  store i64 %1189, i64* %6, align 8
  %1190 = lshr i64 %1189, 3
  %1191 = getelementptr inbounds i8, i8* %7, i64 %1190
  store i8 0, i8* %1191, align 1
  br label %1192

1192:                                             ; preds = %1144, %1143
  %1193 = sub i64 %145, %147
  %1194 = icmp eq i64 %1193, 0
  br i1 %1194, label %1195, label %143

1195:                                             ; preds = %1192, %8
  ret void

1196:                                             ; preds = %283
  %1197 = getelementptr inbounds i8, i8* %275, i64 1
  %1198 = getelementptr inbounds i8, i8* %247, i64 %284
  %1199 = load i8, i8* %1198, align 1
  %1200 = load i8, i8* %1197, align 1
  %1201 = icmp eq i8 %1199, %1200
  br i1 %1201, label %1202, label %286, !prof !33

1202:                                             ; preds = %1196
  %1203 = add i64 %274, 2
  %1204 = icmp eq i64 %276, 2
  br i1 %1204, label %286, label %1205

1205:                                             ; preds = %1202
  %1206 = getelementptr inbounds i8, i8* %275, i64 2
  %1207 = getelementptr inbounds i8, i8* %247, i64 %1203
  %1208 = load i8, i8* %1207, align 1
  %1209 = load i8, i8* %1206, align 1
  %1210 = icmp eq i8 %1208, %1209
  br i1 %1210, label %1211, label %286, !prof !33

1211:                                             ; preds = %1205
  %1212 = add i64 %274, 3
  %1213 = icmp eq i64 %276, 3
  br i1 %1213, label %286, label %1214

1214:                                             ; preds = %1211
  %1215 = getelementptr inbounds i8, i8* %275, i64 3
  %1216 = getelementptr inbounds i8, i8* %247, i64 %1212
  %1217 = load i8, i8* %1216, align 1
  %1218 = load i8, i8* %1215, align 1
  %1219 = icmp eq i8 %1217, %1218
  br i1 %1219, label %1220, label %286, !prof !33

1220:                                             ; preds = %1214
  %1221 = add i64 %274, 4
  %1222 = icmp eq i64 %276, 4
  br i1 %1222, label %286, label %1223

1223:                                             ; preds = %1220
  %1224 = getelementptr inbounds i8, i8* %275, i64 4
  %1225 = getelementptr inbounds i8, i8* %247, i64 %1221
  %1226 = load i8, i8* %1225, align 1
  %1227 = load i8, i8* %1224, align 1
  %1228 = icmp eq i8 %1226, %1227
  br i1 %1228, label %1229, label %286, !prof !33

1229:                                             ; preds = %1223
  %1230 = add i64 %274, 5
  %1231 = icmp eq i64 %276, 5
  br i1 %1231, label %286, label %1232

1232:                                             ; preds = %1229
  %1233 = getelementptr inbounds i8, i8* %275, i64 5
  %1234 = getelementptr inbounds i8, i8* %247, i64 %1230
  %1235 = load i8, i8* %1234, align 1
  %1236 = load i8, i8* %1233, align 1
  %1237 = icmp eq i8 %1235, %1236
  br i1 %1237, label %1238, label %286, !prof !33

1238:                                             ; preds = %1232
  %1239 = add i64 %274, 6
  %1240 = icmp eq i64 %276, 6
  br i1 %1240, label %286, label %1241

1241:                                             ; preds = %1238
  %1242 = getelementptr inbounds i8, i8* %275, i64 6
  %1243 = getelementptr inbounds i8, i8* %247, i64 %1239
  %1244 = load i8, i8* %1243, align 1
  %1245 = load i8, i8* %1242, align 1
  %1246 = icmp eq i8 %1244, %1245
  %1247 = add i64 %274, 7
  %1248 = select i1 %1246, i64 %1247, i64 %1239, !prof !33
  br label %286

1249:                                             ; preds = %554
  %1250 = getelementptr inbounds i8, i8* %546, i64 1
  %1251 = getelementptr inbounds i8, i8* %518, i64 %555
  %1252 = load i8, i8* %1251, align 1
  %1253 = load i8, i8* %1250, align 1
  %1254 = icmp eq i8 %1252, %1253
  br i1 %1254, label %1255, label %557, !prof !33

1255:                                             ; preds = %1249
  %1256 = add i64 %545, 2
  %1257 = icmp eq i64 %547, 2
  br i1 %1257, label %557, label %1258

1258:                                             ; preds = %1255
  %1259 = getelementptr inbounds i8, i8* %546, i64 2
  %1260 = getelementptr inbounds i8, i8* %518, i64 %1256
  %1261 = load i8, i8* %1260, align 1
  %1262 = load i8, i8* %1259, align 1
  %1263 = icmp eq i8 %1261, %1262
  br i1 %1263, label %1264, label %557, !prof !33

1264:                                             ; preds = %1258
  %1265 = add i64 %545, 3
  %1266 = icmp eq i64 %547, 3
  br i1 %1266, label %557, label %1267

1267:                                             ; preds = %1264
  %1268 = getelementptr inbounds i8, i8* %546, i64 3
  %1269 = getelementptr inbounds i8, i8* %518, i64 %1265
  %1270 = load i8, i8* %1269, align 1
  %1271 = load i8, i8* %1268, align 1
  %1272 = icmp eq i8 %1270, %1271
  br i1 %1272, label %1273, label %557, !prof !33

1273:                                             ; preds = %1267
  %1274 = add i64 %545, 4
  %1275 = icmp eq i64 %547, 4
  br i1 %1275, label %557, label %1276

1276:                                             ; preds = %1273
  %1277 = getelementptr inbounds i8, i8* %546, i64 4
  %1278 = getelementptr inbounds i8, i8* %518, i64 %1274
  %1279 = load i8, i8* %1278, align 1
  %1280 = load i8, i8* %1277, align 1
  %1281 = icmp eq i8 %1279, %1280
  br i1 %1281, label %1282, label %557, !prof !33

1282:                                             ; preds = %1276
  %1283 = add i64 %545, 5
  %1284 = icmp eq i64 %547, 5
  br i1 %1284, label %557, label %1285

1285:                                             ; preds = %1282
  %1286 = getelementptr inbounds i8, i8* %546, i64 5
  %1287 = getelementptr inbounds i8, i8* %518, i64 %1283
  %1288 = load i8, i8* %1287, align 1
  %1289 = load i8, i8* %1286, align 1
  %1290 = icmp eq i8 %1288, %1289
  br i1 %1290, label %1291, label %557, !prof !33

1291:                                             ; preds = %1285
  %1292 = add i64 %545, 6
  %1293 = icmp eq i64 %547, 6
  br i1 %1293, label %557, label %1294

1294:                                             ; preds = %1291
  %1295 = getelementptr inbounds i8, i8* %546, i64 6
  %1296 = getelementptr inbounds i8, i8* %518, i64 %1292
  %1297 = load i8, i8* %1296, align 1
  %1298 = load i8, i8* %1295, align 1
  %1299 = icmp eq i8 %1297, %1298
  %1300 = add i64 %545, 7
  %1301 = select i1 %1299, i64 %1300, i64 %1292, !prof !33
  br label %557
}

; Function Attrs: noinline nounwind ssp uwtable
define internal fastcc void @BrotliCompressFragmentTwoPassImpl17(%struct.MemoryManager*, i8*, i64, i32*, i8*, i32* nocapture, i64*, i8*) unnamed_addr #2 {
  %9 = alloca [129 x %struct.HuffmanTree], align 16
  %10 = alloca [704 x i8], align 16
  %11 = alloca [64 x i16], align 16
  %12 = alloca [256 x i8], align 16
  %13 = alloca [256 x i16], align 16
  %14 = alloca [256 x i32], align 16
  %15 = alloca [128 x i8], align 16
  %16 = alloca [128 x i16], align 16
  %17 = alloca [128 x i32], align 16
  %18 = icmp eq i64 %2, 0
  br i1 %18, label %1195, label %19

19:                                               ; preds = %8
  %20 = ptrtoint i32* %3 to i64
  %21 = ptrtoint i8* %4 to i64
  %22 = ptrtoint i8* %1 to i64
  %23 = bitcast [256 x i32]* %14 to i8*
  %24 = getelementptr inbounds [256 x i8], [256 x i8]* %12, i64 0, i64 0
  %25 = bitcast [256 x i16]* %13 to i8*
  %26 = getelementptr inbounds [128 x i8], [128 x i8]* %15, i64 0, i64 0
  %27 = bitcast [128 x i16]* %16 to i8*
  %28 = bitcast [128 x i32]* %17 to i8*
  %29 = getelementptr inbounds [256 x i32], [256 x i32]* %14, i64 0, i64 0
  %30 = getelementptr inbounds [256 x i16], [256 x i16]* %13, i64 0, i64 0
  %31 = getelementptr inbounds [128 x i32], [128 x i32]* %17, i64 0, i64 1
  %32 = getelementptr inbounds [128 x i32], [128 x i32]* %17, i64 0, i64 2
  %33 = getelementptr inbounds [128 x i32], [128 x i32]* %17, i64 0, i64 64
  %34 = getelementptr inbounds [128 x i32], [128 x i32]* %17, i64 0, i64 84
  %35 = getelementptr inbounds [128 x i32], [128 x i32]* %17, i64 0, i64 0
  %36 = bitcast [129 x %struct.HuffmanTree]* %9 to i8*
  %37 = getelementptr inbounds [704 x i8], [704 x i8]* %10, i64 0, i64 0
  %38 = bitcast [64 x i16]* %11 to i8*
  %39 = getelementptr inbounds [129 x %struct.HuffmanTree], [129 x %struct.HuffmanTree]* %9, i64 0, i64 0
  %40 = getelementptr inbounds [128 x i8], [128 x i8]* %15, i64 0, i64 64
  %41 = getelementptr inbounds [128 x i8], [128 x i8]* %15, i64 0, i64 24
  %42 = getelementptr inbounds [704 x i8], [704 x i8]* %10, i64 0, i64 24
  %43 = bitcast [128 x i8]* %15 to i64*
  %44 = bitcast i8* %42 to i64*
  %45 = getelementptr inbounds [704 x i8], [704 x i8]* %10, i64 0, i64 32
  %46 = getelementptr inbounds [128 x i8], [128 x i8]* %15, i64 0, i64 48
  %47 = bitcast i8* %46 to i64*
  %48 = bitcast i8* %45 to i64*
  %49 = getelementptr inbounds [704 x i8], [704 x i8]* %10, i64 0, i64 40
  %50 = getelementptr inbounds [128 x i8], [128 x i8]* %15, i64 0, i64 8
  %51 = bitcast i8* %50 to i64*
  %52 = bitcast i8* %49 to i64*
  %53 = getelementptr inbounds [704 x i8], [704 x i8]* %10, i64 0, i64 48
  %54 = getelementptr inbounds [128 x i8], [128 x i8]* %15, i64 0, i64 56
  %55 = bitcast i8* %54 to i64*
  %56 = bitcast i8* %53 to i64*
  %57 = getelementptr inbounds [704 x i8], [704 x i8]* %10, i64 0, i64 56
  %58 = getelementptr inbounds [128 x i8], [128 x i8]* %15, i64 0, i64 16
  %59 = bitcast i8* %58 to i64*
  %60 = bitcast i8* %57 to i64*
  %61 = getelementptr inbounds [64 x i16], [64 x i16]* %11, i64 0, i64 0
  %62 = getelementptr inbounds [64 x i16], [64 x i16]* %11, i64 0, i64 24
  %63 = bitcast i16* %62 to i8*
  %64 = getelementptr inbounds [128 x i16], [128 x i16]* %16, i64 0, i64 8
  %65 = bitcast i16* %64 to i8*
  %66 = getelementptr inbounds [64 x i16], [64 x i16]* %11, i64 0, i64 40
  %67 = bitcast i16* %66 to i8*
  %68 = getelementptr inbounds [128 x i16], [128 x i16]* %16, i64 0, i64 16
  %69 = bitcast i16* %68 to i8*
  %70 = getelementptr inbounds [64 x i16], [64 x i16]* %11, i64 0, i64 56
  %71 = bitcast i16* %70 to i8*
  %72 = getelementptr inbounds [128 x i16], [128 x i16]* %16, i64 0, i64 24
  %73 = bitcast i16* %72 to i8*
  %74 = getelementptr inbounds [128 x i16], [128 x i16]* %16, i64 0, i64 48
  %75 = bitcast i16* %74 to i8*
  %76 = getelementptr inbounds [64 x i16], [64 x i16]* %11, i64 0, i64 32
  %77 = bitcast i16* %76 to i8*
  %78 = getelementptr inbounds [128 x i16], [128 x i16]* %16, i64 0, i64 56
  %79 = bitcast i16* %78 to i8*
  %80 = getelementptr inbounds [64 x i16], [64 x i16]* %11, i64 0, i64 48
  %81 = bitcast i16* %80 to i8*
  %82 = getelementptr inbounds [128 x i16], [128 x i16]* %16, i64 0, i64 64
  %83 = bitcast i8* %41 to i64*
  %84 = bitcast [704 x i8]* %10 to i64*
  %85 = getelementptr inbounds [704 x i8], [704 x i8]* %10, i64 0, i64 64
  %86 = getelementptr inbounds [128 x i8], [128 x i8]* %15, i64 0, i64 32
  %87 = bitcast i8* %86 to i64*
  %88 = bitcast i8* %85 to i64*
  %89 = getelementptr inbounds [704 x i8], [704 x i8]* %10, i64 0, i64 128
  %90 = getelementptr inbounds [128 x i8], [128 x i8]* %15, i64 0, i64 40
  %91 = bitcast i8* %90 to i64*
  %92 = bitcast i8* %89 to i64*
  %93 = getelementptr inbounds [704 x i8], [704 x i8]* %10, i64 0, i64 192
  %94 = bitcast i8* %93 to i64*
  %95 = getelementptr inbounds [704 x i8], [704 x i8]* %10, i64 0, i64 384
  %96 = bitcast i8* %95 to i64*
  %97 = getelementptr inbounds [704 x i8], [704 x i8]* %10, i64 0, i64 256
  %98 = getelementptr inbounds [704 x i8], [704 x i8]* %10, i64 0, i64 448
  %99 = getelementptr inbounds [128 x i8], [128 x i8]* %15, i64 0, i64 1
  %100 = getelementptr inbounds [704 x i8], [704 x i8]* %10, i64 0, i64 136
  %101 = getelementptr inbounds [128 x i8], [128 x i8]* %15, i64 0, i64 9
  %102 = getelementptr inbounds [704 x i8], [704 x i8]* %10, i64 0, i64 264
  %103 = getelementptr inbounds [128 x i8], [128 x i8]* %15, i64 0, i64 17
  %104 = getelementptr inbounds [704 x i8], [704 x i8]* %10, i64 0, i64 456
  %105 = getelementptr inbounds [128 x i8], [128 x i8]* %15, i64 0, i64 2
  %106 = getelementptr inbounds [704 x i8], [704 x i8]* %10, i64 0, i64 144
  %107 = getelementptr inbounds [128 x i8], [128 x i8]* %15, i64 0, i64 10
  %108 = getelementptr inbounds [704 x i8], [704 x i8]* %10, i64 0, i64 272
  %109 = getelementptr inbounds [128 x i8], [128 x i8]* %15, i64 0, i64 18
  %110 = getelementptr inbounds [704 x i8], [704 x i8]* %10, i64 0, i64 464
  %111 = getelementptr inbounds [128 x i8], [128 x i8]* %15, i64 0, i64 3
  %112 = getelementptr inbounds [704 x i8], [704 x i8]* %10, i64 0, i64 152
  %113 = getelementptr inbounds [128 x i8], [128 x i8]* %15, i64 0, i64 11
  %114 = getelementptr inbounds [704 x i8], [704 x i8]* %10, i64 0, i64 280
  %115 = getelementptr inbounds [128 x i8], [128 x i8]* %15, i64 0, i64 19
  %116 = getelementptr inbounds [704 x i8], [704 x i8]* %10, i64 0, i64 472
  %117 = getelementptr inbounds [128 x i8], [128 x i8]* %15, i64 0, i64 4
  %118 = getelementptr inbounds [704 x i8], [704 x i8]* %10, i64 0, i64 160
  %119 = getelementptr inbounds [128 x i8], [128 x i8]* %15, i64 0, i64 12
  %120 = getelementptr inbounds [704 x i8], [704 x i8]* %10, i64 0, i64 288
  %121 = getelementptr inbounds [128 x i8], [128 x i8]* %15, i64 0, i64 20
  %122 = getelementptr inbounds [704 x i8], [704 x i8]* %10, i64 0, i64 480
  %123 = getelementptr inbounds [128 x i8], [128 x i8]* %15, i64 0, i64 5
  %124 = getelementptr inbounds [704 x i8], [704 x i8]* %10, i64 0, i64 168
  %125 = getelementptr inbounds [128 x i8], [128 x i8]* %15, i64 0, i64 13
  %126 = getelementptr inbounds [704 x i8], [704 x i8]* %10, i64 0, i64 296
  %127 = getelementptr inbounds [128 x i8], [128 x i8]* %15, i64 0, i64 21
  %128 = getelementptr inbounds [704 x i8], [704 x i8]* %10, i64 0, i64 488
  %129 = getelementptr inbounds [128 x i8], [128 x i8]* %15, i64 0, i64 6
  %130 = getelementptr inbounds [704 x i8], [704 x i8]* %10, i64 0, i64 176
  %131 = getelementptr inbounds [128 x i8], [128 x i8]* %15, i64 0, i64 14
  %132 = getelementptr inbounds [704 x i8], [704 x i8]* %10, i64 0, i64 304
  %133 = getelementptr inbounds [128 x i8], [128 x i8]* %15, i64 0, i64 22
  %134 = getelementptr inbounds [704 x i8], [704 x i8]* %10, i64 0, i64 496
  %135 = getelementptr inbounds [128 x i8], [128 x i8]* %15, i64 0, i64 7
  %136 = getelementptr inbounds [704 x i8], [704 x i8]* %10, i64 0, i64 184
  %137 = getelementptr inbounds [128 x i8], [128 x i8]* %15, i64 0, i64 15
  %138 = getelementptr inbounds [704 x i8], [704 x i8]* %10, i64 0, i64 312
  %139 = getelementptr inbounds [128 x i8], [128 x i8]* %15, i64 0, i64 23
  %140 = getelementptr inbounds [704 x i8], [704 x i8]* %10, i64 0, i64 504
  %141 = xor i64 %21, -1
  %142 = getelementptr inbounds i8, i8* %1, i64 6
  br label %143

143:                                              ; preds = %1192, %19
  %144 = phi i8* [ %1, %19 ], [ %148, %1192 ]
  %145 = phi i64 [ %2, %19 ], [ %1193, %1192 ]
  %146 = icmp ult i64 %145, 131072
  %147 = select i1 %146, i64 %145, i64 131072
  %148 = getelementptr inbounds i8, i8* %144, i64 %147
  %149 = icmp ugt i64 %147, 15
  br i1 %149, label %150, label %684, !prof !33

150:                                              ; preds = %143
  %151 = add nsw i64 %147, -6
  %152 = add i64 %145, -16
  %153 = icmp ult i64 %151, %152
  %154 = select i1 %153, i64 %151, i64 %152
  %155 = getelementptr inbounds i8, i8* %144, i64 %154
  %156 = ptrtoint i8* %148 to i64
  br label %160

157:                                              ; preds = %506
  %158 = trunc i64 %516 to i32
  %159 = ptrtoint i32* %623 to i64
  br label %490

160:                                              ; preds = %490, %150
  %161 = phi i64 [ %20, %150 ], [ %491, %490 ]
  %162 = phi i64 [ %21, %150 ], [ %349, %490 ]
  %163 = phi i8* [ %144, %150 ], [ %492, %490 ]
  %164 = phi i32 [ -1, %150 ], [ %493, %490 ]
  %165 = getelementptr inbounds i8, i8* %163, i64 1
  %166 = bitcast i8* %165 to i64*
  %167 = load i64, i64* %166, align 8
  %168 = sext i32 %164 to i64
  %169 = sub nsw i64 0, %168
  %170 = icmp sgt i32 %164, 0
  br label %171

171:                                              ; preds = %237, %160
  %172 = phi i64 [ %167, %160 ], [ %184, %237 ]
  %173 = phi i32 [ 32, %160 ], [ %177, %237 ]
  %174 = phi i8* [ %165, %160 ], [ %180, %237 ]
  %175 = mul i64 %172, 33215796281344
  %176 = lshr i64 %175, 47
  %177 = add i32 %173, 1
  %178 = lshr i32 %173, 5
  %179 = zext i32 %178 to i64
  %180 = getelementptr inbounds i8, i8* %174, i64 %179
  %181 = icmp ugt i8* %180, %155
  br i1 %181, label %684, label %182, !prof !34

182:                                              ; preds = %171
  %183 = bitcast i8* %180 to i64*
  %184 = load i64, i64* %183, align 8
  %185 = getelementptr inbounds i8, i8* %174, i64 %169
  %186 = bitcast i8* %174 to i32*
  %187 = load i32, i32* %186, align 4
  %188 = bitcast i8* %185 to i32*
  %189 = load i32, i32* %188, align 4
  %190 = icmp eq i32 %187, %189
  br i1 %190, label %191, label %209

191:                                              ; preds = %182
  %192 = getelementptr inbounds i8, i8* %174, i64 4
  %193 = load i8, i8* %192, align 1
  %194 = getelementptr inbounds i8, i8* %185, i64 4
  %195 = load i8, i8* %194, align 1
  %196 = icmp eq i8 %193, %195
  br i1 %196, label %197, label %209

197:                                              ; preds = %191
  %198 = getelementptr inbounds i8, i8* %174, i64 5
  %199 = load i8, i8* %198, align 1
  %200 = getelementptr inbounds i8, i8* %185, i64 5
  %201 = load i8, i8* %200, align 1
  %202 = icmp eq i8 %199, %201
  %203 = and i1 %170, %202
  br i1 %203, label %204, label %209, !prof !526

204:                                              ; preds = %197
  %205 = ptrtoint i8* %174 to i64
  %206 = sub i64 %205, %22
  %207 = trunc i64 %206 to i32
  %208 = getelementptr inbounds i32, i32* %5, i64 %176
  store i32 %207, i32* %208, align 4
  br label %240

209:                                              ; preds = %197, %191, %182
  %210 = getelementptr inbounds i32, i32* %5, i64 %176
  %211 = load i32, i32* %210, align 4
  %212 = sext i32 %211 to i64
  %213 = getelementptr inbounds i8, i8* %1, i64 %212
  %214 = ptrtoint i8* %174 to i64
  %215 = sub i64 %214, %22
  %216 = trunc i64 %215 to i32
  store i32 %216, i32* %210, align 4
  %217 = load i32, i32* %186, align 4
  %218 = bitcast i8* %213 to i32*
  %219 = load i32, i32* %218, align 4
  %220 = icmp eq i32 %217, %219
  br i1 %220, label %221, label %234

221:                                              ; preds = %209
  %222 = getelementptr inbounds i8, i8* %174, i64 4
  %223 = load i8, i8* %222, align 1
  %224 = getelementptr inbounds i8, i8* %213, i64 4
  %225 = load i8, i8* %224, align 1
  %226 = icmp eq i8 %223, %225
  br i1 %226, label %227, label %234

227:                                              ; preds = %221
  %228 = getelementptr inbounds i8, i8* %174, i64 5
  %229 = load i8, i8* %228, align 1
  %230 = getelementptr inbounds i8, i8* %213, i64 5
  %231 = load i8, i8* %230, align 1
  %232 = icmp eq i8 %229, %231
  %233 = zext i1 %232 to i32
  br label %234

234:                                              ; preds = %227, %221, %209
  %235 = phi i32 [ 0, %221 ], [ %233, %227 ], [ 0, %209 ]
  %236 = icmp eq i32 %235, 0
  br i1 %236, label %237, label %238, !prof !33

237:                                              ; preds = %234, %240
  br label %171

238:                                              ; preds = %234
  %239 = ptrtoint i8* %174 to i64
  br label %240

240:                                              ; preds = %238, %204
  %241 = phi i64 [ %205, %204 ], [ %239, %238 ]
  %242 = phi i8* [ %185, %204 ], [ %213, %238 ]
  %243 = ptrtoint i8* %242 to i64
  %244 = sub i64 %241, %243
  %245 = icmp sgt i64 %244, 262128
  br i1 %245, label %237, label %246

246:                                              ; preds = %240
  %247 = getelementptr inbounds i8, i8* %242, i64 6
  %248 = getelementptr inbounds i8, i8* %174, i64 6
  %249 = sub i64 %156, %241
  %250 = add i64 %249, -6
  %251 = lshr i64 %250, 3
  %252 = icmp eq i64 %251, 0
  br i1 %252, label %273, label %253, !prof !34

253:                                              ; preds = %246, %263
  %254 = phi i64 [ %266, %263 ], [ %251, %246 ]
  %255 = phi i8* [ %264, %263 ], [ %248, %246 ]
  %256 = phi i64 [ %265, %263 ], [ 0, %246 ]
  %257 = bitcast i8* %255 to i64*
  %258 = load i64, i64* %257, align 8
  %259 = getelementptr inbounds i8, i8* %247, i64 %256
  %260 = bitcast i8* %259 to i64*
  %261 = load i64, i64* %260, align 8
  %262 = icmp eq i64 %258, %261
  br i1 %262, label %263, label %268, !prof !34

263:                                              ; preds = %253
  %264 = getelementptr inbounds i8, i8* %255, i64 8
  %265 = add nuw i64 %256, 8
  %266 = add nsw i64 %254, -1
  %267 = icmp eq i64 %266, 0
  br i1 %267, label %273, label %253, !prof !34

268:                                              ; preds = %253
  %269 = xor i64 %261, %258
  %270 = call i64 @llvm.cttz.i64(i64 %269, i1 true) #6, !range !36
  %271 = lshr i64 %270, 3
  %272 = or i64 %271, %256
  br label %286

273:                                              ; preds = %263, %246
  %274 = phi i64 [ 0, %246 ], [ %265, %263 ]
  %275 = phi i8* [ %248, %246 ], [ %264, %263 ]
  %276 = and i64 %250, 7
  %277 = icmp eq i64 %276, 0
  br i1 %277, label %286, label %278

278:                                              ; preds = %273
  %279 = getelementptr inbounds i8, i8* %247, i64 %274
  %280 = load i8, i8* %279, align 1
  %281 = load i8, i8* %275, align 1
  %282 = icmp eq i8 %280, %281
  br i1 %282, label %283, label %286, !prof !33

283:                                              ; preds = %278
  %284 = add i64 %274, 1
  %285 = icmp eq i64 %276, 1
  br i1 %285, label %286, label %1196

286:                                              ; preds = %1241, %283, %278, %1196, %1202, %1205, %1211, %1214, %1220, %1223, %1229, %1232, %1238, %273, %268
  %287 = phi i64 [ %272, %268 ], [ %274, %273 ], [ %284, %283 ], [ %274, %278 ], [ %284, %1196 ], [ %1203, %1202 ], [ %1203, %1205 ], [ %1212, %1211 ], [ %1212, %1214 ], [ %1221, %1220 ], [ %1221, %1223 ], [ %1230, %1229 ], [ %1230, %1232 ], [ %1239, %1238 ], [ %1248, %1241 ]
  %288 = add i64 %287, 6
  %289 = trunc i64 %244 to i32
  %290 = ptrtoint i8* %163 to i64
  %291 = sub i64 %241, %290
  %292 = trunc i64 %291 to i32
  %293 = getelementptr inbounds i8, i8* %174, i64 %288
  %294 = icmp ult i32 %292, 6
  br i1 %294, label %295, label %297

295:                                              ; preds = %286
  %296 = inttoptr i64 %161 to i32*
  store i32 %292, i32* %296, align 4
  br label %342

297:                                              ; preds = %286
  %298 = icmp ult i32 %292, 130
  br i1 %298, label %299, label %312

299:                                              ; preds = %297
  %300 = add nsw i32 %292, -2
  %301 = call i32 @llvm.ctlz.i32(i32 %300, i1 true) #6, !range !2
  %302 = sub nsw i32 30, %301
  %303 = lshr i32 %300, %302
  %304 = shl nsw i32 %302, 1
  %305 = add nuw nsw i32 %303, 2
  %306 = add i32 %305, %304
  %307 = shl i32 %303, %302
  %308 = sub i32 %300, %307
  %309 = shl i32 %308, 8
  %310 = or i32 %309, %306
  %311 = inttoptr i64 %161 to i32*
  store i32 %310, i32* %311, align 4
  br label %342

312:                                              ; preds = %297
  %313 = icmp ult i32 %292, 2114
  br i1 %313, label %314, label %324

314:                                              ; preds = %312
  %315 = add nsw i32 %292, -66
  %316 = call i32 @llvm.ctlz.i32(i32 %315, i1 true) #6, !range !2
  %317 = xor i32 %316, 31
  %318 = add nuw nsw i32 %317, 10
  %319 = shl i32 1, %317
  %320 = sub i32 %315, %319
  %321 = shl i32 %320, 8
  %322 = or i32 %321, %318
  %323 = inttoptr i64 %161 to i32*
  store i32 %322, i32* %323, align 4
  br label %342

324:                                              ; preds = %312
  %325 = icmp ult i32 %292, 6210
  br i1 %325, label %326, label %331

326:                                              ; preds = %324
  %327 = shl i32 %292, 8
  %328 = add nsw i32 %327, -541184
  %329 = or i32 %328, 21
  %330 = inttoptr i64 %161 to i32*
  store i32 %329, i32* %330, align 4
  br label %342

331:                                              ; preds = %324
  %332 = icmp ult i32 %292, 22594
  %333 = shl i32 %292, 8
  br i1 %332, label %334, label %338

334:                                              ; preds = %331
  %335 = add i32 %333, -1589760
  %336 = or i32 %335, 22
  %337 = inttoptr i64 %161 to i32*
  store i32 %336, i32* %337, align 4
  br label %342

338:                                              ; preds = %331
  %339 = add i32 %333, -5784064
  %340 = or i32 %339, 23
  %341 = inttoptr i64 %161 to i32*
  store i32 %340, i32* %341, align 4
  br label %342

342:                                              ; preds = %338, %334, %326, %314, %299, %295
  %343 = phi i32* [ %341, %338 ], [ %337, %334 ], [ %330, %326 ], [ %323, %314 ], [ %311, %299 ], [ %296, %295 ]
  %344 = getelementptr inbounds i32, i32* %343, i64 1
  %345 = inttoptr i64 %162 to i8*
  %346 = shl i64 %291, 32
  %347 = ashr exact i64 %346, 32
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %345, i8* align 1 %163, i64 %347, i1 false) #6
  %348 = getelementptr inbounds i8, i8* %345, i64 %347
  %349 = ptrtoint i8* %348 to i64
  %350 = icmp eq i32 %164, %289
  br i1 %350, label %367, label %351

351:                                              ; preds = %342
  %352 = add i32 %289, 3
  %353 = call i32 @llvm.ctlz.i32(i32 %352, i1 true) #6, !range !2
  %354 = xor i32 %353, 31
  %355 = add nsw i32 %354, -1
  %356 = lshr i32 %352, %355
  %357 = and i32 %356, 1
  %358 = or i32 %357, 2
  %359 = shl i32 %358, %355
  %360 = shl nuw nsw i32 %354, 1
  %361 = add nsw i32 %360, -4
  %362 = or i32 %357, %361
  %363 = add nsw i32 %362, 80
  %364 = sub i32 %352, %359
  %365 = shl i32 %364, 8
  %366 = or i32 %365, %363
  br label %367

367:                                              ; preds = %351, %342
  %368 = phi i32 [ %366, %351 ], [ 64, %342 ]
  %369 = phi i32 [ %289, %351 ], [ %164, %342 ]
  store i32 %368, i32* %344, align 4
  %370 = getelementptr inbounds i32, i32* %343, i64 2
  %371 = icmp ult i64 %288, 12
  br i1 %371, label %372, label %375

372:                                              ; preds = %367
  %373 = trunc i64 %288 to i32
  %374 = add nuw nsw i32 %373, 20
  store i32 %374, i32* %370, align 4
  br label %424

375:                                              ; preds = %367
  %376 = icmp ult i64 %288, 72
  br i1 %376, label %377, label %392

377:                                              ; preds = %375
  %378 = add nsw i64 %287, -2
  %379 = trunc i64 %378 to i32
  %380 = call i32 @llvm.ctlz.i32(i32 %379, i1 true) #6, !range !2
  %381 = sub nsw i32 30, %380
  %382 = zext i32 %381 to i64
  %383 = lshr i64 %378, %382
  %384 = shl nuw nsw i64 %382, 1
  %385 = add nuw nsw i64 %383, 28
  %386 = add nuw nsw i64 %385, %384
  %387 = shl i64 %383, %382
  %388 = sub i64 %378, %387
  %389 = shl i64 %388, 8
  %390 = or i64 %389, %386
  %391 = trunc i64 %390 to i32
  store i32 %391, i32* %370, align 4
  br label %424

392:                                              ; preds = %375
  %393 = icmp ult i64 %288, 136
  br i1 %393, label %394, label %403

394:                                              ; preds = %392
  %395 = add nsw i64 %287, -2
  %396 = lshr i64 %395, 5
  %397 = add nuw nsw i64 %396, 54
  %398 = shl i64 %395, 8
  %399 = and i64 %398, 7936
  %400 = or i64 %397, %399
  %401 = trunc i64 %400 to i32
  store i32 %401, i32* %370, align 4
  %402 = getelementptr inbounds i32, i32* %343, i64 3
  store i32 64, i32* %402, align 4
  br label %424

403:                                              ; preds = %392
  %404 = icmp ult i64 %288, 2120
  br i1 %404, label %405, label %418

405:                                              ; preds = %403
  %406 = add nsw i64 %287, -66
  %407 = trunc i64 %406 to i32
  %408 = call i32 @llvm.ctlz.i32(i32 %407, i1 true) #6, !range !2
  %409 = xor i32 %408, 31
  %410 = zext i32 %409 to i64
  %411 = add nuw nsw i64 %410, 52
  %412 = shl i64 1, %410
  %413 = sub i64 %406, %412
  %414 = shl i64 %413, 8
  %415 = or i64 %414, %411
  %416 = trunc i64 %415 to i32
  store i32 %416, i32* %370, align 4
  %417 = getelementptr inbounds i32, i32* %343, i64 3
  store i32 64, i32* %417, align 4
  br label %424

418:                                              ; preds = %403
  %419 = trunc i64 %288 to i32
  %420 = shl i32 %419, 8
  %421 = add i32 %420, -542720
  %422 = or i32 %421, 63
  store i32 %422, i32* %370, align 4
  %423 = getelementptr inbounds i32, i32* %343, i64 3
  store i32 64, i32* %423, align 4
  br label %424

424:                                              ; preds = %418, %405, %394, %377, %372
  %425 = phi i64 [ 4, %418 ], [ 4, %405 ], [ 4, %394 ], [ 3, %377 ], [ 3, %372 ]
  %426 = getelementptr inbounds i32, i32* %343, i64 %425
  %427 = ptrtoint i32* %426 to i64
  %428 = icmp ult i8* %293, %155
  br i1 %428, label %429, label %681, !prof !33

429:                                              ; preds = %424
  %430 = getelementptr inbounds i8, i8* %293, i64 -5
  %431 = bitcast i8* %430 to i64*
  %432 = load i64, i64* %431, align 8
  %433 = mul i64 %432, 33215796281344
  %434 = lshr i64 %433, 47
  %435 = ptrtoint i8* %293 to i64
  %436 = sub i64 %435, %22
  %437 = trunc i64 %436 to i32
  %438 = add i32 %437, -5
  %439 = getelementptr inbounds i32, i32* %5, i64 %434
  store i32 %438, i32* %439, align 4
  %440 = lshr i64 %432, 8
  %441 = mul i64 %440, 33215796281344
  %442 = lshr i64 %441, 47
  %443 = add i32 %437, -4
  %444 = getelementptr inbounds i32, i32* %5, i64 %442
  store i32 %443, i32* %444, align 4
  %445 = and i64 %432, -65536
  %446 = mul i64 %445, 506832829
  %447 = lshr i64 %446, 47
  %448 = add i32 %437, -3
  %449 = getelementptr inbounds i32, i32* %5, i64 %447
  store i32 %448, i32* %449, align 4
  %450 = getelementptr inbounds i8, i8* %293, i64 -2
  %451 = bitcast i8* %450 to i64*
  %452 = load i64, i64* %451, align 8
  %453 = and i64 %452, -65536
  %454 = mul i64 %453, 506832829
  %455 = mul i64 %452, 33215796281344
  %456 = lshr i64 %455, 47
  %457 = add i32 %437, -2
  %458 = getelementptr inbounds i32, i32* %5, i64 %456
  store i32 %457, i32* %458, align 4
  %459 = lshr i64 %452, 8
  %460 = mul i64 %459, 33215796281344
  %461 = lshr i64 %460, 47
  %462 = add i32 %437, -1
  %463 = getelementptr inbounds i32, i32* %5, i64 %461
  store i32 %462, i32* %463, align 4
  %464 = lshr i64 %454, 47
  %465 = getelementptr inbounds i32, i32* %5, i64 %464
  %466 = load i32, i32* %465, align 4
  store i32 %437, i32* %465, align 4
  %467 = sext i32 %466 to i64
  %468 = getelementptr inbounds i8, i8* %1, i64 %467
  %469 = ptrtoint i8* %468 to i64
  %470 = sub i64 %435, %469
  %471 = icmp slt i64 %470, 262129
  br i1 %471, label %472, label %490

472:                                              ; preds = %429
  %473 = bitcast i8* %293 to i32*
  %474 = load i32, i32* %473, align 4
  %475 = bitcast i8* %468 to i32*
  %476 = load i32, i32* %475, align 4
  %477 = icmp eq i32 %474, %476
  br i1 %477, label %478, label %490

478:                                              ; preds = %472
  %479 = getelementptr inbounds i8, i8* %293, i64 4
  %480 = load i8, i8* %479, align 1
  %481 = getelementptr inbounds i8, i8* %468, i64 4
  %482 = load i8, i8* %481, align 1
  %483 = icmp eq i8 %480, %482
  br i1 %483, label %484, label %490

484:                                              ; preds = %478
  %485 = getelementptr inbounds i8, i8* %293, i64 5
  %486 = load i8, i8* %485, align 1
  %487 = getelementptr inbounds i8, i8* %468, i64 5
  %488 = load i8, i8* %487, align 1
  %489 = icmp eq i8 %486, %488
  br i1 %489, label %512, label %490

490:                                              ; preds = %484, %669, %672, %675, %478, %472, %429, %157
  %491 = phi i64 [ %427, %429 ], [ %427, %472 ], [ %427, %478 ], [ %671, %669 ], [ %674, %672 ], [ %677, %675 ], [ %427, %484 ], [ %159, %157 ]
  %492 = phi i8* [ %293, %429 ], [ %293, %472 ], [ %293, %478 ], [ %560, %669 ], [ %560, %672 ], [ %560, %675 ], [ %293, %484 ], [ %560, %157 ]
  %493 = phi i32 [ %369, %429 ], [ %369, %472 ], [ %369, %478 ], [ %670, %669 ], [ %673, %672 ], [ %676, %675 ], [ %369, %484 ], [ %158, %157 ]
  br label %160

494:                                              ; preds = %626
  %495 = bitcast i8* %560 to i32*
  %496 = load i32, i32* %495, align 4
  %497 = bitcast i8* %665 to i32*
  %498 = load i32, i32* %497, align 4
  %499 = icmp eq i32 %496, %498
  br i1 %499, label %500, label %672

500:                                              ; preds = %494
  %501 = getelementptr inbounds i8, i8* %560, i64 4
  %502 = load i8, i8* %501, align 1
  %503 = getelementptr inbounds i8, i8* %665, i64 4
  %504 = load i8, i8* %503, align 1
  %505 = icmp eq i8 %502, %504
  br i1 %505, label %506, label %675

506:                                              ; preds = %500
  %507 = getelementptr inbounds i8, i8* %560, i64 5
  %508 = load i8, i8* %507, align 1
  %509 = getelementptr inbounds i8, i8* %665, i64 5
  %510 = load i8, i8* %509, align 1
  %511 = icmp eq i8 %508, %510
  br i1 %511, label %512, label %157

512:                                              ; preds = %484, %506
  %513 = phi i8* [ %560, %506 ], [ %293, %484 ]
  %514 = phi i64 [ %664, %506 ], [ %467, %484 ]
  %515 = phi i64 [ %632, %506 ], [ %435, %484 ]
  %516 = phi i64 [ %667, %506 ], [ %470, %484 ]
  %517 = phi i64 [ %624, %506 ], [ %427, %484 ]
  %518 = getelementptr inbounds i8, i8* %142, i64 %514
  %519 = getelementptr inbounds i8, i8* %513, i64 6
  %520 = sub i64 %156, %515
  %521 = add i64 %520, -6
  %522 = lshr i64 %521, 3
  %523 = icmp eq i64 %522, 0
  br i1 %523, label %544, label %524, !prof !34

524:                                              ; preds = %512, %534
  %525 = phi i64 [ %537, %534 ], [ %522, %512 ]
  %526 = phi i8* [ %535, %534 ], [ %519, %512 ]
  %527 = phi i64 [ %536, %534 ], [ 0, %512 ]
  %528 = bitcast i8* %526 to i64*
  %529 = load i64, i64* %528, align 8
  %530 = getelementptr inbounds i8, i8* %518, i64 %527
  %531 = bitcast i8* %530 to i64*
  %532 = load i64, i64* %531, align 8
  %533 = icmp eq i64 %529, %532
  br i1 %533, label %534, label %539, !prof !34

534:                                              ; preds = %524
  %535 = getelementptr inbounds i8, i8* %526, i64 8
  %536 = add nuw i64 %527, 8
  %537 = add nsw i64 %525, -1
  %538 = icmp eq i64 %537, 0
  br i1 %538, label %544, label %524, !prof !34

539:                                              ; preds = %524
  %540 = xor i64 %532, %529
  %541 = call i64 @llvm.cttz.i64(i64 %540, i1 true) #6, !range !36
  %542 = lshr i64 %541, 3
  %543 = or i64 %542, %527
  br label %557

544:                                              ; preds = %534, %512
  %545 = phi i64 [ 0, %512 ], [ %536, %534 ]
  %546 = phi i8* [ %519, %512 ], [ %535, %534 ]
  %547 = and i64 %521, 7
  %548 = icmp eq i64 %547, 0
  br i1 %548, label %557, label %549

549:                                              ; preds = %544
  %550 = getelementptr inbounds i8, i8* %518, i64 %545
  %551 = load i8, i8* %550, align 1
  %552 = load i8, i8* %546, align 1
  %553 = icmp eq i8 %551, %552
  br i1 %553, label %554, label %557, !prof !33

554:                                              ; preds = %549
  %555 = add i64 %545, 1
  %556 = icmp eq i64 %547, 1
  br i1 %556, label %557, label %1249

557:                                              ; preds = %1294, %554, %549, %1249, %1255, %1258, %1264, %1267, %1273, %1276, %1282, %1285, %1291, %544, %539
  %558 = phi i64 [ %543, %539 ], [ %545, %544 ], [ %555, %554 ], [ %545, %549 ], [ %555, %1249 ], [ %1256, %1255 ], [ %1256, %1258 ], [ %1265, %1264 ], [ %1265, %1267 ], [ %1274, %1273 ], [ %1274, %1276 ], [ %1283, %1282 ], [ %1283, %1285 ], [ %1292, %1291 ], [ %1301, %1294 ]
  %559 = add i64 %558, 6
  %560 = getelementptr inbounds i8, i8* %513, i64 %559
  %561 = trunc i64 %516 to i32
  %562 = icmp ult i64 %559, 10
  br i1 %562, label %563, label %567

563:                                              ; preds = %557
  %564 = trunc i64 %559 to i32
  %565 = add nuw nsw i32 %564, 38
  %566 = inttoptr i64 %517 to i32*
  store i32 %565, i32* %566, align 4
  br label %605

567:                                              ; preds = %557
  %568 = icmp ult i64 %559, 134
  br i1 %568, label %569, label %584

569:                                              ; preds = %567
  %570 = trunc i64 %558 to i32
  %571 = call i32 @llvm.ctlz.i32(i32 %570, i1 true) #6, !range !2
  %572 = sub nsw i32 30, %571
  %573 = zext i32 %572 to i64
  %574 = lshr i64 %558, %573
  %575 = shl nuw nsw i64 %573, 1
  %576 = add nuw nsw i64 %574, 44
  %577 = add nuw nsw i64 %576, %575
  %578 = shl i64 %574, %573
  %579 = sub i64 %558, %578
  %580 = shl i64 %579, 8
  %581 = or i64 %580, %577
  %582 = trunc i64 %581 to i32
  %583 = inttoptr i64 %517 to i32*
  store i32 %582, i32* %583, align 4
  br label %605

584:                                              ; preds = %567
  %585 = icmp ult i64 %559, 2118
  br i1 %585, label %586, label %599

586:                                              ; preds = %584
  %587 = add nsw i64 %558, -64
  %588 = trunc i64 %587 to i32
  %589 = call i32 @llvm.ctlz.i32(i32 %588, i1 true) #6, !range !2
  %590 = xor i32 %589, 31
  %591 = zext i32 %590 to i64
  %592 = add nuw nsw i64 %591, 52
  %593 = shl i64 1, %591
  %594 = sub i64 %587, %593
  %595 = shl i64 %594, 8
  %596 = or i64 %595, %592
  %597 = trunc i64 %596 to i32
  %598 = inttoptr i64 %517 to i32*
  store i32 %597, i32* %598, align 4
  br label %605

599:                                              ; preds = %584
  %600 = trunc i64 %559 to i32
  %601 = shl i32 %600, 8
  %602 = add i32 %601, -542208
  %603 = or i32 %602, 63
  %604 = inttoptr i64 %517 to i32*
  store i32 %603, i32* %604, align 4
  br label %605

605:                                              ; preds = %599, %586, %569, %563
  %606 = phi i32* [ %604, %599 ], [ %598, %586 ], [ %583, %569 ], [ %566, %563 ]
  %607 = getelementptr inbounds i32, i32* %606, i64 1
  %608 = add i32 %561, 3
  %609 = call i32 @llvm.ctlz.i32(i32 %608, i1 true) #6, !range !2
  %610 = xor i32 %609, 31
  %611 = add nsw i32 %610, -1
  %612 = lshr i32 %608, %611
  %613 = and i32 %612, 1
  %614 = or i32 %613, 2
  %615 = shl i32 %614, %611
  %616 = shl nuw nsw i32 %610, 1
  %617 = add nsw i32 %616, -4
  %618 = or i32 %613, %617
  %619 = add nsw i32 %618, 80
  %620 = sub i32 %608, %615
  %621 = shl i32 %620, 8
  %622 = or i32 %621, %619
  store i32 %622, i32* %607, align 4
  %623 = getelementptr inbounds i32, i32* %606, i64 2
  %624 = ptrtoint i32* %623 to i64
  %625 = icmp ult i8* %560, %155
  br i1 %625, label %626, label %678, !prof !33

626:                                              ; preds = %605
  %627 = getelementptr inbounds i8, i8* %560, i64 -5
  %628 = bitcast i8* %627 to i64*
  %629 = load i64, i64* %628, align 8
  %630 = mul i64 %629, 33215796281344
  %631 = lshr i64 %630, 47
  %632 = ptrtoint i8* %560 to i64
  %633 = sub i64 %632, %22
  %634 = trunc i64 %633 to i32
  %635 = add i32 %634, -5
  %636 = getelementptr inbounds i32, i32* %5, i64 %631
  store i32 %635, i32* %636, align 4
  %637 = lshr i64 %629, 8
  %638 = mul i64 %637, 33215796281344
  %639 = lshr i64 %638, 47
  %640 = add i32 %634, -4
  %641 = getelementptr inbounds i32, i32* %5, i64 %639
  store i32 %640, i32* %641, align 4
  %642 = and i64 %629, -65536
  %643 = mul i64 %642, 506832829
  %644 = lshr i64 %643, 47
  %645 = add i32 %634, -3
  %646 = getelementptr inbounds i32, i32* %5, i64 %644
  store i32 %645, i32* %646, align 4
  %647 = getelementptr inbounds i8, i8* %560, i64 -2
  %648 = bitcast i8* %647 to i64*
  %649 = load i64, i64* %648, align 8
  %650 = and i64 %649, -65536
  %651 = mul i64 %650, 506832829
  %652 = mul i64 %649, 33215796281344
  %653 = lshr i64 %652, 47
  %654 = add i32 %634, -2
  %655 = getelementptr inbounds i32, i32* %5, i64 %653
  store i32 %654, i32* %655, align 4
  %656 = lshr i64 %649, 8
  %657 = mul i64 %656, 33215796281344
  %658 = lshr i64 %657, 47
  %659 = add i32 %634, -1
  %660 = getelementptr inbounds i32, i32* %5, i64 %658
  store i32 %659, i32* %660, align 4
  %661 = lshr i64 %651, 47
  %662 = getelementptr inbounds i32, i32* %5, i64 %661
  %663 = load i32, i32* %662, align 4
  store i32 %634, i32* %662, align 4
  %664 = sext i32 %663 to i64
  %665 = getelementptr inbounds i8, i8* %1, i64 %664
  %666 = ptrtoint i8* %665 to i64
  %667 = sub i64 %632, %666
  %668 = icmp slt i64 %667, 262129
  br i1 %668, label %494, label %669

669:                                              ; preds = %626
  %670 = trunc i64 %516 to i32
  %671 = ptrtoint i32* %623 to i64
  br label %490

672:                                              ; preds = %494
  %673 = trunc i64 %516 to i32
  %674 = ptrtoint i32* %623 to i64
  br label %490

675:                                              ; preds = %500
  %676 = trunc i64 %516 to i32
  %677 = ptrtoint i32* %623 to i64
  br label %490

678:                                              ; preds = %605
  %679 = ptrtoint i8* %348 to i64
  %680 = ptrtoint i32* %623 to i64
  br label %684

681:                                              ; preds = %424
  %682 = ptrtoint i8* %348 to i64
  %683 = ptrtoint i32* %426 to i64
  br label %684

684:                                              ; preds = %171, %681, %678, %143
  %685 = phi i64 [ %20, %143 ], [ %680, %678 ], [ %683, %681 ], [ %161, %171 ]
  %686 = phi i64 [ %21, %143 ], [ %679, %678 ], [ %682, %681 ], [ %162, %171 ]
  %687 = phi i8* [ %144, %143 ], [ %560, %678 ], [ %293, %681 ], [ %163, %171 ]
  %688 = icmp ult i8* %687, %148
  br i1 %688, label %689, label %750

689:                                              ; preds = %684
  %690 = ptrtoint i8* %148 to i64
  %691 = ptrtoint i8* %687 to i64
  %692 = sub i64 %690, %691
  %693 = trunc i64 %692 to i32
  %694 = icmp ult i32 %693, 6
  br i1 %694, label %695, label %697

695:                                              ; preds = %689
  %696 = inttoptr i64 %685 to i32*
  store i32 %693, i32* %696, align 4
  br label %742

697:                                              ; preds = %689
  %698 = icmp ult i32 %693, 130
  br i1 %698, label %699, label %712

699:                                              ; preds = %697
  %700 = add nsw i32 %693, -2
  %701 = call i32 @llvm.ctlz.i32(i32 %700, i1 true) #6, !range !2
  %702 = sub nsw i32 30, %701
  %703 = lshr i32 %700, %702
  %704 = shl nsw i32 %702, 1
  %705 = add nuw nsw i32 %703, 2
  %706 = add i32 %705, %704
  %707 = shl i32 %703, %702
  %708 = sub i32 %700, %707
  %709 = shl i32 %708, 8
  %710 = or i32 %709, %706
  %711 = inttoptr i64 %685 to i32*
  store i32 %710, i32* %711, align 4
  br label %742

712:                                              ; preds = %697
  %713 = icmp ult i32 %693, 2114
  br i1 %713, label %714, label %724

714:                                              ; preds = %712
  %715 = add nsw i32 %693, -66
  %716 = call i32 @llvm.ctlz.i32(i32 %715, i1 true) #6, !range !2
  %717 = xor i32 %716, 31
  %718 = add nuw nsw i32 %717, 10
  %719 = shl i32 1, %717
  %720 = sub i32 %715, %719
  %721 = shl i32 %720, 8
  %722 = or i32 %721, %718
  %723 = inttoptr i64 %685 to i32*
  store i32 %722, i32* %723, align 4
  br label %742

724:                                              ; preds = %712
  %725 = icmp ult i32 %693, 6210
  br i1 %725, label %726, label %731

726:                                              ; preds = %724
  %727 = shl i32 %693, 8
  %728 = add nsw i32 %727, -541184
  %729 = or i32 %728, 21
  %730 = inttoptr i64 %685 to i32*
  store i32 %729, i32* %730, align 4
  br label %742

731:                                              ; preds = %724
  %732 = icmp ult i32 %693, 22594
  %733 = shl i32 %693, 8
  br i1 %732, label %734, label %738

734:                                              ; preds = %731
  %735 = add i32 %733, -1589760
  %736 = or i32 %735, 22
  %737 = inttoptr i64 %685 to i32*
  store i32 %736, i32* %737, align 4
  br label %742

738:                                              ; preds = %731
  %739 = add i32 %733, -5784064
  %740 = or i32 %739, 23
  %741 = inttoptr i64 %685 to i32*
  store i32 %740, i32* %741, align 4
  br label %742

742:                                              ; preds = %738, %734, %726, %714, %699, %695
  %743 = phi i32* [ %741, %738 ], [ %737, %734 ], [ %730, %726 ], [ %723, %714 ], [ %711, %699 ], [ %696, %695 ]
  %744 = getelementptr inbounds i32, i32* %743, i64 1
  %745 = ptrtoint i32* %744 to i64
  %746 = inttoptr i64 %686 to i8*
  %747 = and i64 %692, 4294967295
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %746, i8* align 1 %687, i64 %747, i1 false) #6
  %748 = getelementptr inbounds i8, i8* %746, i64 %747
  %749 = ptrtoint i8* %748 to i64
  br label %750

750:                                              ; preds = %742, %684
  %751 = phi i64 [ %745, %742 ], [ %685, %684 ]
  %752 = phi i64 [ %749, %742 ], [ %686, %684 ]
  %753 = sub i64 %752, %21
  %754 = uitofp i64 %147 to double
  %755 = uitofp i64 %753 to double
  %756 = fmul double %754, 0x3FEF5C28F5C28F5C
  %757 = fcmp ogt double %756, %755
  br i1 %757, label %832, label %758

758:                                              ; preds = %750
  call void @llvm.lifetime.start.p0i8(i64 1024, i8* nonnull %23) #6
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %23, i8 0, i64 1024, i1 false) #6
  %759 = fmul double %754, 8.000000e+00
  %760 = fmul double %759, 0x3FEF5C28F5C28F5C
  %761 = fdiv double %760, 4.300000e+01
  %762 = icmp eq i64 %147, 0
  br i1 %762, label %773, label %763

763:                                              ; preds = %758, %763
  %764 = phi i64 [ %771, %763 ], [ 0, %758 ]
  %765 = getelementptr inbounds i8, i8* %144, i64 %764
  %766 = load i8, i8* %765, align 1
  %767 = zext i8 %766 to i64
  %768 = getelementptr inbounds [256 x i32], [256 x i32]* %14, i64 0, i64 %767
  %769 = load i32, i32* %768, align 4
  %770 = add i32 %769, 1
  store i32 %770, i32* %768, align 4
  %771 = add i64 %764, 43
  %772 = icmp ult i64 %771, %147
  br i1 %772, label %763, label %773

773:                                              ; preds = %763, %758
  br label %774

774:                                              ; preds = %773, %808
  %775 = phi double [ %811, %808 ], [ 0.000000e+00, %773 ]
  %776 = phi i64 [ %800, %808 ], [ 0, %773 ]
  %777 = phi i64 [ %797, %808 ], [ 0, %773 ]
  %778 = getelementptr inbounds [256 x i32], [256 x i32]* %14, i64 0, i64 %777
  %779 = load i32, i32* %778, align 8
  %780 = zext i32 %779 to i64
  %781 = icmp ult i32 %779, 256
  br i1 %781, label %782, label %786

782:                                              ; preds = %774
  %783 = getelementptr inbounds [256 x double], [256 x double]* @kBrotliLog2Table, i64 0, i64 %780
  %784 = load double, double* %783, align 8
  %785 = uitofp i32 %779 to double
  br label %789

786:                                              ; preds = %774
  %787 = uitofp i32 %779 to double
  %788 = call double @log2(double %787) #6
  br label %789

789:                                              ; preds = %786, %782
  %790 = phi double [ %785, %782 ], [ %787, %786 ]
  %791 = phi double [ %784, %782 ], [ %788, %786 ]
  %792 = or i64 %777, 1
  %793 = getelementptr inbounds [256 x i32], [256 x i32]* %14, i64 0, i64 %792
  %794 = fmul double %790, %791
  %795 = fsub double %775, %794
  %796 = add i64 %776, %780
  %797 = add nuw nsw i64 %777, 2
  %798 = load i32, i32* %793, align 4
  %799 = zext i32 %798 to i64
  %800 = add i64 %796, %799
  %801 = uitofp i32 %798 to double
  %802 = icmp ult i32 %798, 256
  br i1 %802, label %803, label %806

803:                                              ; preds = %789
  %804 = getelementptr inbounds [256 x double], [256 x double]* @kBrotliLog2Table, i64 0, i64 %799
  %805 = load double, double* %804, align 8
  br label %808

806:                                              ; preds = %789
  %807 = call double @log2(double %801) #6
  br label %808

808:                                              ; preds = %806, %803
  %809 = phi double [ %805, %803 ], [ %807, %806 ]
  %810 = fmul double %809, %801
  %811 = fsub double %795, %810
  %812 = icmp ult i64 %797, 256
  br i1 %812, label %774, label %813

813:                                              ; preds = %808
  %814 = icmp eq i64 %800, 0
  %815 = uitofp i64 %800 to double
  br i1 %814, label %827, label %816

816:                                              ; preds = %813
  %817 = icmp ult i64 %800, 256
  br i1 %817, label %818, label %821

818:                                              ; preds = %816
  %819 = getelementptr inbounds [256 x double], [256 x double]* @kBrotliLog2Table, i64 0, i64 %800
  %820 = load double, double* %819, align 8
  br label %823

821:                                              ; preds = %816
  %822 = call double @log2(double %815) #6
  br label %823

823:                                              ; preds = %821, %818
  %824 = phi double [ %820, %818 ], [ %822, %821 ]
  %825 = fmul double %824, %815
  %826 = fadd double %811, %825
  br label %827

827:                                              ; preds = %823, %813
  %828 = phi double [ %826, %823 ], [ %811, %813 ]
  %829 = fcmp olt double %828, %815
  %830 = select i1 %829, double %815, double %828
  %831 = fcmp uge double %830, %761
  call void @llvm.lifetime.end.p0i8(i64 1024, i8* nonnull %23) #6
  br i1 %831, label %1144, label %832

832:                                              ; preds = %827, %750
  %833 = sub i64 %751, %20
  %834 = ashr exact i64 %833, 2
  %835 = load i64, i64* %6, align 8, !alias.scope !588, !noalias !591
  %836 = lshr i64 %835, 3
  %837 = getelementptr inbounds i8, i8* %7, i64 %836
  %838 = load i8, i8* %837, align 1, !alias.scope !591, !noalias !588
  %839 = zext i8 %838 to i64
  %840 = bitcast i8* %837 to i64*
  store i64 %839, i64* %840, align 8, !alias.scope !591, !noalias !588
  %841 = add i64 %835, 1
  %842 = icmp ult i64 %147, 65537
  %843 = select i1 %842, i64 4, i64 5
  %844 = add nsw i64 %843, -4
  %845 = lshr i64 %841, 3
  %846 = getelementptr inbounds i8, i8* %7, i64 %845
  %847 = load i8, i8* %846, align 1, !alias.scope !593, !noalias !596
  %848 = zext i8 %847 to i64
  %849 = and i64 %841, 7
  %850 = shl i64 %844, %849
  %851 = or i64 %850, %848
  %852 = bitcast i8* %846 to i64*
  store i64 %851, i64* %852, align 8, !alias.scope !593, !noalias !596
  %853 = add i64 %835, 3
  %854 = shl nuw nsw i64 %843, 2
  %855 = add nsw i64 %147, -1
  %856 = lshr i64 %853, 3
  %857 = getelementptr inbounds i8, i8* %7, i64 %856
  %858 = load i8, i8* %857, align 1, !alias.scope !598, !noalias !601
  %859 = zext i8 %858 to i64
  %860 = and i64 %853, 7
  %861 = shl i64 %855, %860
  %862 = or i64 %861, %859
  %863 = bitcast i8* %857 to i64*
  store i64 %862, i64* %863, align 8, !alias.scope !598, !noalias !601
  %864 = add i64 %853, %854
  %865 = lshr i64 %864, 3
  %866 = getelementptr inbounds i8, i8* %7, i64 %865
  %867 = load i8, i8* %866, align 1, !alias.scope !603, !noalias !606
  %868 = zext i8 %867 to i64
  %869 = bitcast i8* %866 to i64*
  store i64 %868, i64* %869, align 8, !alias.scope !603, !noalias !606
  %870 = add i64 %864, 1
  %871 = lshr i64 %870, 3
  %872 = getelementptr inbounds i8, i8* %7, i64 %871
  %873 = load i8, i8* %872, align 1, !alias.scope !608, !noalias !611
  %874 = zext i8 %873 to i64
  %875 = bitcast i8* %872 to i64*
  store i64 %874, i64* %875, align 8, !alias.scope !608, !noalias !611
  %876 = add i64 %864, 14
  store i64 %876, i64* %6, align 8, !alias.scope !611, !noalias !608
  call void @llvm.lifetime.start.p0i8(i64 256, i8* nonnull %24) #6
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %24, i8 -86, i64 256, i1 false) #6
  call void @llvm.lifetime.start.p0i8(i64 512, i8* nonnull %25) #6
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %25, i8 -86, i64 512, i1 false) #6
  call void @llvm.lifetime.start.p0i8(i64 1024, i8* nonnull %23) #6
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %23, i8 0, i64 1024, i1 false) #6
  call void @llvm.lifetime.start.p0i8(i64 128, i8* nonnull %26) #6
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %26, i8 0, i64 128, i1 false) #6
  call void @llvm.lifetime.start.p0i8(i64 256, i8* nonnull %27) #6
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %27, i8 0, i64 256, i1 false) #6
  call void @llvm.lifetime.start.p0i8(i64 512, i8* nonnull %28) #6
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %28, i8 0, i64 512, i1 false) #6
  %877 = icmp eq i64 %753, 0
  br i1 %877, label %932, label %878

878:                                              ; preds = %832
  %879 = add i64 %752, %141
  %880 = and i64 %753, 3
  %881 = icmp ult i64 %879, 3
  br i1 %881, label %917, label %882

882:                                              ; preds = %878
  %883 = sub i64 %753, %880
  br label %884

884:                                              ; preds = %884, %882
  %885 = phi i64 [ 0, %882 ], [ %914, %884 ]
  %886 = phi i64 [ %883, %882 ], [ %915, %884 ]
  %887 = getelementptr inbounds i8, i8* %4, i64 %885
  %888 = load i8, i8* %887, align 1
  %889 = zext i8 %888 to i64
  %890 = getelementptr inbounds [256 x i32], [256 x i32]* %14, i64 0, i64 %889
  %891 = load i32, i32* %890, align 4
  %892 = add i32 %891, 1
  store i32 %892, i32* %890, align 4
  %893 = or i64 %885, 1
  %894 = getelementptr inbounds i8, i8* %4, i64 %893
  %895 = load i8, i8* %894, align 1
  %896 = zext i8 %895 to i64
  %897 = getelementptr inbounds [256 x i32], [256 x i32]* %14, i64 0, i64 %896
  %898 = load i32, i32* %897, align 4
  %899 = add i32 %898, 1
  store i32 %899, i32* %897, align 4
  %900 = or i64 %885, 2
  %901 = getelementptr inbounds i8, i8* %4, i64 %900
  %902 = load i8, i8* %901, align 1
  %903 = zext i8 %902 to i64
  %904 = getelementptr inbounds [256 x i32], [256 x i32]* %14, i64 0, i64 %903
  %905 = load i32, i32* %904, align 4
  %906 = add i32 %905, 1
  store i32 %906, i32* %904, align 4
  %907 = or i64 %885, 3
  %908 = getelementptr inbounds i8, i8* %4, i64 %907
  %909 = load i8, i8* %908, align 1
  %910 = zext i8 %909 to i64
  %911 = getelementptr inbounds [256 x i32], [256 x i32]* %14, i64 0, i64 %910
  %912 = load i32, i32* %911, align 4
  %913 = add i32 %912, 1
  store i32 %913, i32* %911, align 4
  %914 = add nuw i64 %885, 4
  %915 = add i64 %886, -4
  %916 = icmp eq i64 %915, 0
  br i1 %916, label %917, label %884

917:                                              ; preds = %884, %878
  %918 = phi i64 [ 0, %878 ], [ %914, %884 ]
  %919 = icmp eq i64 %880, 0
  br i1 %919, label %932, label %920

920:                                              ; preds = %917, %920
  %921 = phi i64 [ %929, %920 ], [ %918, %917 ]
  %922 = phi i64 [ %930, %920 ], [ %880, %917 ]
  %923 = getelementptr inbounds i8, i8* %4, i64 %921
  %924 = load i8, i8* %923, align 1
  %925 = zext i8 %924 to i64
  %926 = getelementptr inbounds [256 x i32], [256 x i32]* %14, i64 0, i64 %925
  %927 = load i32, i32* %926, align 4
  %928 = add i32 %927, 1
  store i32 %928, i32* %926, align 4
  %929 = add nuw i64 %921, 1
  %930 = add i64 %922, -1
  %931 = icmp eq i64 %930, 0
  br i1 %931, label %932, label %920, !llvm.loop !613

932:                                              ; preds = %917, %920, %832
  call void @BrotliBuildAndStoreHuffmanTreeFast(%struct.MemoryManager* %0, i32* nonnull %29, i64 %753, i64 8, i8* nonnull %24, i16* nonnull %30, i64* %6, i8* %7) #6
  %933 = icmp eq i64 %833, 0
  br i1 %933, label %980, label %934

934:                                              ; preds = %932
  %935 = and i64 %834, 1
  %936 = icmp eq i64 %833, 4
  br i1 %936, label %960, label %937

937:                                              ; preds = %934
  %938 = sub nsw i64 %834, %935
  br label %939

939:                                              ; preds = %939, %937
  %940 = phi i64 [ 0, %937 ], [ %957, %939 ]
  %941 = phi i64 [ %938, %937 ], [ %958, %939 ]
  %942 = getelementptr inbounds i32, i32* %3, i64 %940
  %943 = load i32, i32* %942, align 4
  %944 = and i32 %943, 255
  %945 = zext i32 %944 to i64
  %946 = getelementptr inbounds [128 x i32], [128 x i32]* %17, i64 0, i64 %945
  %947 = load i32, i32* %946, align 4
  %948 = add i32 %947, 1
  store i32 %948, i32* %946, align 4
  %949 = or i64 %940, 1
  %950 = getelementptr inbounds i32, i32* %3, i64 %949
  %951 = load i32, i32* %950, align 4
  %952 = and i32 %951, 255
  %953 = zext i32 %952 to i64
  %954 = getelementptr inbounds [128 x i32], [128 x i32]* %17, i64 0, i64 %953
  %955 = load i32, i32* %954, align 4
  %956 = add i32 %955, 1
  store i32 %956, i32* %954, align 4
  %957 = add nuw i64 %940, 2
  %958 = add i64 %941, -2
  %959 = icmp eq i64 %958, 0
  br i1 %959, label %960, label %939

960:                                              ; preds = %939, %934
  %961 = phi i64 [ 0, %934 ], [ %957, %939 ]
  %962 = icmp eq i64 %935, 0
  br i1 %962, label %971, label %963

963:                                              ; preds = %960
  %964 = getelementptr inbounds i32, i32* %3, i64 %961
  %965 = load i32, i32* %964, align 4
  %966 = and i32 %965, 255
  %967 = zext i32 %966 to i64
  %968 = getelementptr inbounds [128 x i32], [128 x i32]* %17, i64 0, i64 %967
  %969 = load i32, i32* %968, align 4
  %970 = add i32 %969, 1
  store i32 %970, i32* %968, align 4
  br label %971

971:                                              ; preds = %960, %963
  %972 = load i32, i32* %31, align 4
  %973 = load i32, i32* %32, align 8
  %974 = load i32, i32* %33, align 16
  %975 = load i32, i32* %34, align 16
  %976 = add i32 %972, 1
  %977 = add i32 %973, 1
  %978 = add i32 %974, 1
  %979 = add i32 %975, 1
  br label %980

980:                                              ; preds = %971, %932
  %981 = phi i32 [ %979, %971 ], [ 1, %932 ]
  %982 = phi i32 [ %978, %971 ], [ 1, %932 ]
  %983 = phi i32 [ %977, %971 ], [ 1, %932 ]
  %984 = phi i32 [ %976, %971 ], [ 1, %932 ]
  store i32 %984, i32* %31, align 4
  store i32 %983, i32* %32, align 8
  store i32 %982, i32* %33, align 16
  store i32 %981, i32* %34, align 16
  call void @llvm.lifetime.start.p0i8(i64 1032, i8* nonnull %36) #6
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %36, i8 -86, i64 1032, i1 false) #6
  call void @llvm.lifetime.start.p0i8(i64 704, i8* nonnull %37) #6
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %37, i8 0, i64 704, i1 false) #6
  call void @llvm.lifetime.start.p0i8(i64 128, i8* nonnull %38) #6
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %38, i8 -86, i64 128, i1 false) #6
  call void @BrotliCreateHuffmanTree(i32* nonnull %35, i64 64, i32 15, %struct.HuffmanTree* nonnull %39, i8* nonnull %26) #6
  call void @BrotliCreateHuffmanTree(i32* %33, i64 64, i32 14, %struct.HuffmanTree* nonnull %39, i8* %40) #6
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 16 %37, i8* align 8 %41, i64 24, i1 false) #6
  %985 = load i64, i64* %43, align 16
  store i64 %985, i64* %44, align 8
  %986 = load i64, i64* %47, align 16
  store i64 %986, i64* %48, align 16
  %987 = load i64, i64* %51, align 8
  store i64 %987, i64* %52, align 8
  %988 = load i64, i64* %55, align 8
  store i64 %988, i64* %56, align 16
  %989 = load i64, i64* %59, align 16
  store i64 %989, i64* %60, align 8
  call void @BrotliConvertBitDepthsToSymbols(i8* nonnull %37, i64 64, i16* nonnull %61) #6
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 16 %27, i8* align 16 %63, i64 16, i1 false) #6
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 16 %65, i8* align 16 %67, i64 16, i1 false) #6
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 16 %69, i8* align 16 %71, i64 16, i1 false) #6
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 16 %73, i8* nonnull align 16 %38, i64 48, i1 false) #6
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 16 %75, i8* align 16 %77, i64 16, i1 false) #6
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 16 %79, i8* align 16 %81, i64 16, i1 false) #6
  call void @BrotliConvertBitDepthsToSymbols(i8* %40, i64 64, i16* %82) #6
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %37, i8 0, i64 64, i1 false) #6
  %990 = load i64, i64* %83, align 8
  store i64 %990, i64* %84, align 16
  %991 = load i64, i64* %87, align 16
  store i64 %991, i64* %88, align 16
  %992 = load i64, i64* %91, align 8
  store i64 %992, i64* %92, align 16
  %993 = load i64, i64* %47, align 16
  store i64 %993, i64* %94, align 16
  %994 = load i64, i64* %55, align 8
  store i64 %994, i64* %96, align 16
  %995 = load i8, i8* %26, align 16
  store i8 %995, i8* %89, align 16
  %996 = load i8, i8* %50, align 8
  store i8 %996, i8* %97, align 16
  %997 = load i8, i8* %58, align 16
  store i8 %997, i8* %98, align 16
  %998 = load i8, i8* %99, align 1
  store i8 %998, i8* %100, align 8
  %999 = load i8, i8* %101, align 1
  store i8 %999, i8* %102, align 8
  %1000 = load i8, i8* %103, align 1
  store i8 %1000, i8* %104, align 8
  %1001 = load i8, i8* %105, align 2
  store i8 %1001, i8* %106, align 16
  %1002 = load i8, i8* %107, align 2
  store i8 %1002, i8* %108, align 16
  %1003 = load i8, i8* %109, align 2
  store i8 %1003, i8* %110, align 16
  %1004 = load i8, i8* %111, align 1
  store i8 %1004, i8* %112, align 8
  %1005 = load i8, i8* %113, align 1
  store i8 %1005, i8* %114, align 8
  %1006 = load i8, i8* %115, align 1
  store i8 %1006, i8* %116, align 8
  %1007 = load i8, i8* %117, align 4
  store i8 %1007, i8* %118, align 16
  %1008 = load i8, i8* %119, align 4
  store i8 %1008, i8* %120, align 16
  %1009 = load i8, i8* %121, align 4
  store i8 %1009, i8* %122, align 16
  %1010 = load i8, i8* %123, align 1
  store i8 %1010, i8* %124, align 8
  %1011 = load i8, i8* %125, align 1
  store i8 %1011, i8* %126, align 8
  %1012 = load i8, i8* %127, align 1
  store i8 %1012, i8* %128, align 8
  %1013 = load i8, i8* %129, align 2
  store i8 %1013, i8* %130, align 16
  %1014 = load i8, i8* %131, align 2
  store i8 %1014, i8* %132, align 16
  %1015 = load i8, i8* %133, align 2
  store i8 %1015, i8* %134, align 16
  %1016 = load i8, i8* %135, align 1
  store i8 %1016, i8* %136, align 8
  %1017 = load i8, i8* %137, align 1
  store i8 %1017, i8* %138, align 8
  %1018 = load i8, i8* %139, align 1
  store i8 %1018, i8* %140, align 8
  call void @BrotliStoreHuffmanTree(i8* nonnull %37, i64 704, %struct.HuffmanTree* nonnull %39, i64* %6, i8* %7) #6
  call void @BrotliStoreHuffmanTree(i8* %40, i64 64, %struct.HuffmanTree* nonnull %39, i64* %6, i8* %7) #6
  call void @llvm.lifetime.end.p0i8(i64 128, i8* nonnull %38) #6
  call void @llvm.lifetime.end.p0i8(i64 704, i8* nonnull %37) #6
  call void @llvm.lifetime.end.p0i8(i64 1032, i8* nonnull %36) #6
  br i1 %933, label %1143, label %1019

1019:                                             ; preds = %980
  %1020 = load i64, i64* %6, align 8, !alias.scope !614, !noalias !617
  br label %1021

1021:                                             ; preds = %1138, %1019
  %1022 = phi i64 [ %1139, %1138 ], [ %1020, %1019 ]
  %1023 = phi i8* [ %1140, %1138 ], [ %4, %1019 ]
  %1024 = phi i64 [ %1141, %1138 ], [ 0, %1019 ]
  %1025 = getelementptr inbounds i32, i32* %3, i64 %1024
  %1026 = load i32, i32* %1025, align 4
  %1027 = and i32 %1026, 255
  %1028 = lshr i32 %1026, 8
  %1029 = zext i32 %1027 to i64
  %1030 = getelementptr inbounds [128 x i8], [128 x i8]* %15, i64 0, i64 %1029
  %1031 = load i8, i8* %1030, align 1
  %1032 = zext i8 %1031 to i64
  %1033 = getelementptr inbounds [128 x i16], [128 x i16]* %16, i64 0, i64 %1029
  %1034 = load i16, i16* %1033, align 2
  %1035 = zext i16 %1034 to i64
  %1036 = lshr i64 %1022, 3
  %1037 = getelementptr inbounds i8, i8* %7, i64 %1036
  %1038 = load i8, i8* %1037, align 1, !alias.scope !617, !noalias !614
  %1039 = zext i8 %1038 to i64
  %1040 = and i64 %1022, 7
  %1041 = shl i64 %1035, %1040
  %1042 = or i64 %1041, %1039
  %1043 = bitcast i8* %1037 to i64*
  store i64 %1042, i64* %1043, align 8, !alias.scope !617, !noalias !614
  %1044 = add i64 %1022, %1032
  %1045 = getelementptr inbounds [128 x i32], [128 x i32]* @StoreCommands.kNumExtraBits, i64 0, i64 %1029
  %1046 = load i32, i32* %1045, align 4
  %1047 = zext i32 %1046 to i64
  %1048 = zext i32 %1028 to i64
  %1049 = lshr i64 %1044, 3
  %1050 = getelementptr inbounds i8, i8* %7, i64 %1049
  %1051 = load i8, i8* %1050, align 1, !alias.scope !619, !noalias !622
  %1052 = zext i8 %1051 to i64
  %1053 = and i64 %1044, 7
  %1054 = shl i64 %1048, %1053
  %1055 = or i64 %1054, %1052
  %1056 = bitcast i8* %1050 to i64*
  store i64 %1055, i64* %1056, align 8, !alias.scope !619, !noalias !622
  %1057 = add i64 %1044, %1047
  store i64 %1057, i64* %6, align 8, !alias.scope !622, !noalias !619
  %1058 = icmp ult i32 %1027, 24
  br i1 %1058, label %1059, label %1138

1059:                                             ; preds = %1021
  %1060 = getelementptr inbounds [24 x i32], [24 x i32]* @StoreCommands.kInsertOffset, i64 0, i64 %1029
  %1061 = load i32, i32* %1060, align 4
  %1062 = add i32 %1061, %1028
  %1063 = icmp eq i32 %1062, 0
  br i1 %1063, label %1138, label %1064

1064:                                             ; preds = %1059
  %1065 = add i32 %1061, -1
  %1066 = and i32 %1062, 1
  %1067 = sub nsw i32 0, %1028
  %1068 = icmp eq i32 %1065, %1067
  br i1 %1068, label %1113, label %1069

1069:                                             ; preds = %1064
  %1070 = sub i32 %1062, %1066
  br label %1071

1071:                                             ; preds = %1071, %1069
  %1072 = phi i64 [ %1057, %1069 ], [ %1109, %1071 ]
  %1073 = phi i8* [ %1023, %1069 ], [ %1110, %1071 ]
  %1074 = phi i32 [ %1070, %1069 ], [ %1111, %1071 ]
  %1075 = load i8, i8* %1073, align 1
  %1076 = zext i8 %1075 to i64
  %1077 = getelementptr inbounds [256 x i8], [256 x i8]* %12, i64 0, i64 %1076
  %1078 = load i8, i8* %1077, align 1
  %1079 = zext i8 %1078 to i64
  %1080 = getelementptr inbounds [256 x i16], [256 x i16]* %13, i64 0, i64 %1076
  %1081 = load i16, i16* %1080, align 2
  %1082 = zext i16 %1081 to i64
  %1083 = lshr i64 %1072, 3
  %1084 = getelementptr inbounds i8, i8* %7, i64 %1083
  %1085 = load i8, i8* %1084, align 1, !alias.scope !624, !noalias !627
  %1086 = zext i8 %1085 to i64
  %1087 = and i64 %1072, 7
  %1088 = shl i64 %1082, %1087
  %1089 = or i64 %1088, %1086
  %1090 = bitcast i8* %1084 to i64*
  store i64 %1089, i64* %1090, align 8, !alias.scope !624, !noalias !627
  %1091 = add i64 %1072, %1079
  store i64 %1091, i64* %6, align 8, !alias.scope !627, !noalias !624
  %1092 = getelementptr inbounds i8, i8* %1073, i64 1
  %1093 = load i8, i8* %1092, align 1
  %1094 = zext i8 %1093 to i64
  %1095 = getelementptr inbounds [256 x i8], [256 x i8]* %12, i64 0, i64 %1094
  %1096 = load i8, i8* %1095, align 1
  %1097 = zext i8 %1096 to i64
  %1098 = getelementptr inbounds [256 x i16], [256 x i16]* %13, i64 0, i64 %1094
  %1099 = load i16, i16* %1098, align 2
  %1100 = zext i16 %1099 to i64
  %1101 = lshr i64 %1091, 3
  %1102 = getelementptr inbounds i8, i8* %7, i64 %1101
  %1103 = load i8, i8* %1102, align 1, !alias.scope !624, !noalias !627
  %1104 = zext i8 %1103 to i64
  %1105 = and i64 %1091, 7
  %1106 = shl i64 %1100, %1105
  %1107 = or i64 %1106, %1104
  %1108 = bitcast i8* %1102 to i64*
  store i64 %1107, i64* %1108, align 8, !alias.scope !624, !noalias !627
  %1109 = add i64 %1091, %1097
  store i64 %1109, i64* %6, align 8, !alias.scope !627, !noalias !624
  %1110 = getelementptr inbounds i8, i8* %1073, i64 2
  %1111 = add i32 %1074, -2
  %1112 = icmp eq i32 %1111, 0
  br i1 %1112, label %1113, label %1071

1113:                                             ; preds = %1071, %1064
  %1114 = phi i64 [ undef, %1064 ], [ %1109, %1071 ]
  %1115 = phi i8* [ undef, %1064 ], [ %1110, %1071 ]
  %1116 = phi i64 [ %1057, %1064 ], [ %1109, %1071 ]
  %1117 = phi i8* [ %1023, %1064 ], [ %1110, %1071 ]
  %1118 = icmp eq i32 %1066, 0
  br i1 %1118, label %1138, label %1119

1119:                                             ; preds = %1113
  %1120 = load i8, i8* %1117, align 1
  %1121 = zext i8 %1120 to i64
  %1122 = getelementptr inbounds [256 x i8], [256 x i8]* %12, i64 0, i64 %1121
  %1123 = load i8, i8* %1122, align 1
  %1124 = zext i8 %1123 to i64
  %1125 = getelementptr inbounds [256 x i16], [256 x i16]* %13, i64 0, i64 %1121
  %1126 = load i16, i16* %1125, align 2
  %1127 = zext i16 %1126 to i64
  %1128 = lshr i64 %1116, 3
  %1129 = getelementptr inbounds i8, i8* %7, i64 %1128
  %1130 = load i8, i8* %1129, align 1, !alias.scope !624, !noalias !627
  %1131 = zext i8 %1130 to i64
  %1132 = and i64 %1116, 7
  %1133 = shl i64 %1127, %1132
  %1134 = or i64 %1133, %1131
  %1135 = bitcast i8* %1129 to i64*
  store i64 %1134, i64* %1135, align 8, !alias.scope !624, !noalias !627
  %1136 = add i64 %1116, %1124
  store i64 %1136, i64* %6, align 8, !alias.scope !627, !noalias !624
  %1137 = getelementptr inbounds i8, i8* %1117, i64 1
  br label %1138

1138:                                             ; preds = %1119, %1113, %1059, %1021
  %1139 = phi i64 [ %1057, %1021 ], [ %1057, %1059 ], [ %1114, %1113 ], [ %1136, %1119 ]
  %1140 = phi i8* [ %1023, %1021 ], [ %1023, %1059 ], [ %1115, %1113 ], [ %1137, %1119 ]
  %1141 = add nuw i64 %1024, 1
  %1142 = icmp eq i64 %1141, %834
  br i1 %1142, label %1143, label %1021

1143:                                             ; preds = %1138, %980
  call void @llvm.lifetime.end.p0i8(i64 512, i8* nonnull %28) #6
  call void @llvm.lifetime.end.p0i8(i64 256, i8* nonnull %27) #6
  call void @llvm.lifetime.end.p0i8(i64 128, i8* nonnull %26) #6
  call void @llvm.lifetime.end.p0i8(i64 1024, i8* nonnull %23) #6
  call void @llvm.lifetime.end.p0i8(i64 512, i8* nonnull %25) #6
  call void @llvm.lifetime.end.p0i8(i64 256, i8* nonnull %24) #6
  br label %1192

1144:                                             ; preds = %827
  %1145 = load i64, i64* %6, align 8, !alias.scope !629, !noalias !632
  %1146 = lshr i64 %1145, 3
  %1147 = getelementptr inbounds i8, i8* %7, i64 %1146
  %1148 = load i8, i8* %1147, align 1, !alias.scope !632, !noalias !629
  %1149 = zext i8 %1148 to i64
  %1150 = bitcast i8* %1147 to i64*
  store i64 %1149, i64* %1150, align 8, !alias.scope !632, !noalias !629
  %1151 = add i64 %1145, 1
  %1152 = icmp ult i64 %147, 65537
  %1153 = select i1 %1152, i64 4, i64 5
  %1154 = add nsw i64 %1153, -4
  %1155 = lshr i64 %1151, 3
  %1156 = getelementptr inbounds i8, i8* %7, i64 %1155
  %1157 = load i8, i8* %1156, align 1, !alias.scope !634, !noalias !637
  %1158 = zext i8 %1157 to i64
  %1159 = and i64 %1151, 7
  %1160 = shl i64 %1154, %1159
  %1161 = or i64 %1160, %1158
  %1162 = bitcast i8* %1156 to i64*
  store i64 %1161, i64* %1162, align 8, !alias.scope !634, !noalias !637
  %1163 = add i64 %1145, 3
  %1164 = shl nuw nsw i64 %1153, 2
  %1165 = add nsw i64 %147, -1
  %1166 = lshr i64 %1163, 3
  %1167 = getelementptr inbounds i8, i8* %7, i64 %1166
  %1168 = load i8, i8* %1167, align 1, !alias.scope !639, !noalias !642
  %1169 = zext i8 %1168 to i64
  %1170 = and i64 %1163, 7
  %1171 = shl i64 %1165, %1170
  %1172 = or i64 %1171, %1169
  %1173 = bitcast i8* %1167 to i64*
  store i64 %1172, i64* %1173, align 8, !alias.scope !639, !noalias !642
  %1174 = add i64 %1163, %1164
  %1175 = lshr i64 %1174, 3
  %1176 = getelementptr inbounds i8, i8* %7, i64 %1175
  %1177 = load i8, i8* %1176, align 1, !alias.scope !644, !noalias !647
  %1178 = zext i8 %1177 to i64
  %1179 = and i64 %1174, 7
  %1180 = shl i64 1, %1179
  %1181 = or i64 %1180, %1178
  %1182 = bitcast i8* %1176 to i64*
  store i64 %1181, i64* %1182, align 8, !alias.scope !644, !noalias !647
  %1183 = add i64 %1174, 8
  %1184 = and i64 %1183, 4294967288
  store i64 %1184, i64* %6, align 8
  %1185 = lshr exact i64 %1184, 3
  %1186 = getelementptr inbounds i8, i8* %7, i64 %1185
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %1186, i8* align 1 %144, i64 %147, i1 false) #6
  %1187 = shl nuw nsw i64 %147, 3
  %1188 = load i64, i64* %6, align 8
  %1189 = add i64 %1188, %1187
  store i64 %1189, i64* %6, align 8
  %1190 = lshr i64 %1189, 3
  %1191 = getelementptr inbounds i8, i8* %7, i64 %1190
  store i8 0, i8* %1191, align 1
  br label %1192

1192:                                             ; preds = %1144, %1143
  %1193 = sub i64 %145, %147
  %1194 = icmp eq i64 %1193, 0
  br i1 %1194, label %1195, label %143

1195:                                             ; preds = %1192, %8
  ret void

1196:                                             ; preds = %283
  %1197 = getelementptr inbounds i8, i8* %275, i64 1
  %1198 = getelementptr inbounds i8, i8* %247, i64 %284
  %1199 = load i8, i8* %1198, align 1
  %1200 = load i8, i8* %1197, align 1
  %1201 = icmp eq i8 %1199, %1200
  br i1 %1201, label %1202, label %286, !prof !33

1202:                                             ; preds = %1196
  %1203 = add i64 %274, 2
  %1204 = icmp eq i64 %276, 2
  br i1 %1204, label %286, label %1205

1205:                                             ; preds = %1202
  %1206 = getelementptr inbounds i8, i8* %275, i64 2
  %1207 = getelementptr inbounds i8, i8* %247, i64 %1203
  %1208 = load i8, i8* %1207, align 1
  %1209 = load i8, i8* %1206, align 1
  %1210 = icmp eq i8 %1208, %1209
  br i1 %1210, label %1211, label %286, !prof !33

1211:                                             ; preds = %1205
  %1212 = add i64 %274, 3
  %1213 = icmp eq i64 %276, 3
  br i1 %1213, label %286, label %1214

1214:                                             ; preds = %1211
  %1215 = getelementptr inbounds i8, i8* %275, i64 3
  %1216 = getelementptr inbounds i8, i8* %247, i64 %1212
  %1217 = load i8, i8* %1216, align 1
  %1218 = load i8, i8* %1215, align 1
  %1219 = icmp eq i8 %1217, %1218
  br i1 %1219, label %1220, label %286, !prof !33

1220:                                             ; preds = %1214
  %1221 = add i64 %274, 4
  %1222 = icmp eq i64 %276, 4
  br i1 %1222, label %286, label %1223

1223:                                             ; preds = %1220
  %1224 = getelementptr inbounds i8, i8* %275, i64 4
  %1225 = getelementptr inbounds i8, i8* %247, i64 %1221
  %1226 = load i8, i8* %1225, align 1
  %1227 = load i8, i8* %1224, align 1
  %1228 = icmp eq i8 %1226, %1227
  br i1 %1228, label %1229, label %286, !prof !33

1229:                                             ; preds = %1223
  %1230 = add i64 %274, 5
  %1231 = icmp eq i64 %276, 5
  br i1 %1231, label %286, label %1232

1232:                                             ; preds = %1229
  %1233 = getelementptr inbounds i8, i8* %275, i64 5
  %1234 = getelementptr inbounds i8, i8* %247, i64 %1230
  %1235 = load i8, i8* %1234, align 1
  %1236 = load i8, i8* %1233, align 1
  %1237 = icmp eq i8 %1235, %1236
  br i1 %1237, label %1238, label %286, !prof !33

1238:                                             ; preds = %1232
  %1239 = add i64 %274, 6
  %1240 = icmp eq i64 %276, 6
  br i1 %1240, label %286, label %1241

1241:                                             ; preds = %1238
  %1242 = getelementptr inbounds i8, i8* %275, i64 6
  %1243 = getelementptr inbounds i8, i8* %247, i64 %1239
  %1244 = load i8, i8* %1243, align 1
  %1245 = load i8, i8* %1242, align 1
  %1246 = icmp eq i8 %1244, %1245
  %1247 = add i64 %274, 7
  %1248 = select i1 %1246, i64 %1247, i64 %1239, !prof !33
  br label %286

1249:                                             ; preds = %554
  %1250 = getelementptr inbounds i8, i8* %546, i64 1
  %1251 = getelementptr inbounds i8, i8* %518, i64 %555
  %1252 = load i8, i8* %1251, align 1
  %1253 = load i8, i8* %1250, align 1
  %1254 = icmp eq i8 %1252, %1253
  br i1 %1254, label %1255, label %557, !prof !33

1255:                                             ; preds = %1249
  %1256 = add i64 %545, 2
  %1257 = icmp eq i64 %547, 2
  br i1 %1257, label %557, label %1258

1258:                                             ; preds = %1255
  %1259 = getelementptr inbounds i8, i8* %546, i64 2
  %1260 = getelementptr inbounds i8, i8* %518, i64 %1256
  %1261 = load i8, i8* %1260, align 1
  %1262 = load i8, i8* %1259, align 1
  %1263 = icmp eq i8 %1261, %1262
  br i1 %1263, label %1264, label %557, !prof !33

1264:                                             ; preds = %1258
  %1265 = add i64 %545, 3
  %1266 = icmp eq i64 %547, 3
  br i1 %1266, label %557, label %1267

1267:                                             ; preds = %1264
  %1268 = getelementptr inbounds i8, i8* %546, i64 3
  %1269 = getelementptr inbounds i8, i8* %518, i64 %1265
  %1270 = load i8, i8* %1269, align 1
  %1271 = load i8, i8* %1268, align 1
  %1272 = icmp eq i8 %1270, %1271
  br i1 %1272, label %1273, label %557, !prof !33

1273:                                             ; preds = %1267
  %1274 = add i64 %545, 4
  %1275 = icmp eq i64 %547, 4
  br i1 %1275, label %557, label %1276

1276:                                             ; preds = %1273
  %1277 = getelementptr inbounds i8, i8* %546, i64 4
  %1278 = getelementptr inbounds i8, i8* %518, i64 %1274
  %1279 = load i8, i8* %1278, align 1
  %1280 = load i8, i8* %1277, align 1
  %1281 = icmp eq i8 %1279, %1280
  br i1 %1281, label %1282, label %557, !prof !33

1282:                                             ; preds = %1276
  %1283 = add i64 %545, 5
  %1284 = icmp eq i64 %547, 5
  br i1 %1284, label %557, label %1285

1285:                                             ; preds = %1282
  %1286 = getelementptr inbounds i8, i8* %546, i64 5
  %1287 = getelementptr inbounds i8, i8* %518, i64 %1283
  %1288 = load i8, i8* %1287, align 1
  %1289 = load i8, i8* %1286, align 1
  %1290 = icmp eq i8 %1288, %1289
  br i1 %1290, label %1291, label %557, !prof !33

1291:                                             ; preds = %1285
  %1292 = add i64 %545, 6
  %1293 = icmp eq i64 %547, 6
  br i1 %1293, label %557, label %1294

1294:                                             ; preds = %1291
  %1295 = getelementptr inbounds i8, i8* %546, i64 6
  %1296 = getelementptr inbounds i8, i8* %518, i64 %1292
  %1297 = load i8, i8* %1296, align 1
  %1298 = load i8, i8* %1295, align 1
  %1299 = icmp eq i8 %1297, %1298
  %1300 = add i64 %545, 7
  %1301 = select i1 %1299, i64 %1300, i64 %1292, !prof !33
  br label %557
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nounwind readnone speculatable
declare i32 @llvm.ctlz.i32(i32, i1 immarg) #3

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #1

; Function Attrs: nounwind readnone speculatable
declare i64 @llvm.cttz.i64(i64, i1 immarg) #3

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

; Function Attrs: nofree nounwind
declare double @log2(double) local_unnamed_addr #4

declare hidden void @BrotliBuildAndStoreHuffmanTreeFast(%struct.MemoryManager*, i32*, i64, i64, i8*, i16*, i64*, i8*) local_unnamed_addr #5

declare hidden void @BrotliCreateHuffmanTree(i32*, i64, i32, %struct.HuffmanTree*, i8*) local_unnamed_addr #5

declare hidden void @BrotliConvertBitDepthsToSymbols(i8*, i64, i16*) local_unnamed_addr #5

declare hidden void @BrotliStoreHuffmanTree(i8*, i64, %struct.HuffmanTree*, i64*, i8*) local_unnamed_addr #5

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { noinline nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind readnone speculatable }
attributes #4 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{i32 0, i32 33}
!3 = !{!4}
!4 = distinct !{!4, !5, !"BrotliWriteBits: argument 1"}
!5 = distinct !{!5, !"BrotliWriteBits"}
!6 = !{!7}
!7 = distinct !{!7, !5, !"BrotliWriteBits: argument 0"}
!8 = !{!9}
!9 = distinct !{!9, !10, !"BrotliWriteBits: argument 1"}
!10 = distinct !{!10, !"BrotliWriteBits"}
!11 = !{!12}
!12 = distinct !{!12, !10, !"BrotliWriteBits: argument 0"}
!13 = !{!14}
!14 = distinct !{!14, !15, !"BrotliWriteBits: argument 1"}
!15 = distinct !{!15, !"BrotliWriteBits"}
!16 = !{!17}
!17 = distinct !{!17, !15, !"BrotliWriteBits: argument 0"}
!18 = !{!19}
!19 = distinct !{!19, !20, !"BrotliWriteBits: argument 1"}
!20 = distinct !{!20, !"BrotliWriteBits"}
!21 = !{!22}
!22 = distinct !{!22, !20, !"BrotliWriteBits: argument 0"}
!23 = !{!24}
!24 = distinct !{!24, !25, !"BrotliWriteBits: argument 0"}
!25 = distinct !{!25, !"BrotliWriteBits"}
!26 = !{!27}
!27 = distinct !{!27, !25, !"BrotliWriteBits: argument 1"}
!28 = !{!29}
!29 = distinct !{!29, !30, !"BrotliWriteBits: argument 1"}
!30 = distinct !{!30, !"BrotliWriteBits"}
!31 = !{!32}
!32 = distinct !{!32, !30, !"BrotliWriteBits: argument 0"}
!33 = !{!"branch_weights", i32 2000, i32 1}
!34 = !{!"branch_weights", i32 1, i32 2000}
!35 = !{!"branch_weights", i32 6004, i32 2000}
!36 = !{i64 0, i64 65}
!37 = !{!38}
!38 = distinct !{!38, !39, !"BrotliWriteBits: argument 0"}
!39 = distinct !{!39, !"BrotliWriteBits"}
!40 = !{!41}
!41 = distinct !{!41, !39, !"BrotliWriteBits: argument 1"}
!42 = !{!43}
!43 = distinct !{!43, !44, !"BrotliWriteBits: argument 1"}
!44 = distinct !{!44, !"BrotliWriteBits"}
!45 = !{!46}
!46 = distinct !{!46, !44, !"BrotliWriteBits: argument 0"}
!47 = !{!48}
!48 = distinct !{!48, !49, !"BrotliWriteBits: argument 1"}
!49 = distinct !{!49, !"BrotliWriteBits"}
!50 = !{!51}
!51 = distinct !{!51, !49, !"BrotliWriteBits: argument 0"}
!52 = !{!53}
!53 = distinct !{!53, !54, !"BrotliWriteBits: argument 1"}
!54 = distinct !{!54, !"BrotliWriteBits"}
!55 = !{!56}
!56 = distinct !{!56, !54, !"BrotliWriteBits: argument 0"}
!57 = !{!58}
!58 = distinct !{!58, !59, !"BrotliWriteBits: argument 1"}
!59 = distinct !{!59, !"BrotliWriteBits"}
!60 = !{!61}
!61 = distinct !{!61, !59, !"BrotliWriteBits: argument 0"}
!62 = distinct !{!62, !63}
!63 = !{!"llvm.loop.unroll.disable"}
!64 = !{!65}
!65 = distinct !{!65, !66, !"BrotliWriteBits: argument 0"}
!66 = distinct !{!66, !"BrotliWriteBits"}
!67 = !{!68}
!68 = distinct !{!68, !66, !"BrotliWriteBits: argument 1"}
!69 = !{!70}
!70 = distinct !{!70, !71, !"BrotliWriteBits: argument 1"}
!71 = distinct !{!71, !"BrotliWriteBits"}
!72 = !{!73}
!73 = distinct !{!73, !71, !"BrotliWriteBits: argument 0"}
!74 = !{!75}
!75 = distinct !{!75, !76, !"BrotliWriteBits: argument 1"}
!76 = distinct !{!76, !"BrotliWriteBits"}
!77 = !{!78}
!78 = distinct !{!78, !76, !"BrotliWriteBits: argument 0"}
!79 = !{!80}
!80 = distinct !{!80, !81, !"BrotliWriteBits: argument 0"}
!81 = distinct !{!81, !"BrotliWriteBits"}
!82 = !{!83}
!83 = distinct !{!83, !81, !"BrotliWriteBits: argument 1"}
!84 = !{!85}
!85 = distinct !{!85, !86, !"BrotliWriteBits: argument 1"}
!86 = distinct !{!86, !"BrotliWriteBits"}
!87 = !{!88}
!88 = distinct !{!88, !86, !"BrotliWriteBits: argument 0"}
!89 = !{!90}
!90 = distinct !{!90, !91, !"BrotliWriteBits: argument 1"}
!91 = distinct !{!91, !"BrotliWriteBits"}
!92 = !{!93}
!93 = distinct !{!93, !91, !"BrotliWriteBits: argument 0"}
!94 = !{!95}
!95 = distinct !{!95, !96, !"BrotliWriteBits: argument 1"}
!96 = distinct !{!96, !"BrotliWriteBits"}
!97 = !{!98}
!98 = distinct !{!98, !96, !"BrotliWriteBits: argument 0"}
!99 = !{!100}
!100 = distinct !{!100, !101, !"BrotliWriteBits: argument 0"}
!101 = distinct !{!101, !"BrotliWriteBits"}
!102 = !{!103}
!103 = distinct !{!103, !101, !"BrotliWriteBits: argument 1"}
!104 = !{!105}
!105 = distinct !{!105, !106, !"BrotliWriteBits: argument 1"}
!106 = distinct !{!106, !"BrotliWriteBits"}
!107 = !{!108}
!108 = distinct !{!108, !106, !"BrotliWriteBits: argument 0"}
!109 = !{!110}
!110 = distinct !{!110, !111, !"BrotliWriteBits: argument 1"}
!111 = distinct !{!111, !"BrotliWriteBits"}
!112 = !{!113}
!113 = distinct !{!113, !111, !"BrotliWriteBits: argument 0"}
!114 = !{!115}
!115 = distinct !{!115, !116, !"BrotliWriteBits: argument 1"}
!116 = distinct !{!116, !"BrotliWriteBits"}
!117 = !{!118}
!118 = distinct !{!118, !116, !"BrotliWriteBits: argument 0"}
!119 = !{!120}
!120 = distinct !{!120, !121, !"BrotliWriteBits: argument 1"}
!121 = distinct !{!121, !"BrotliWriteBits"}
!122 = !{!123}
!123 = distinct !{!123, !121, !"BrotliWriteBits: argument 0"}
!124 = distinct !{!124, !63}
!125 = !{!126}
!126 = distinct !{!126, !127, !"BrotliWriteBits: argument 0"}
!127 = distinct !{!127, !"BrotliWriteBits"}
!128 = !{!129}
!129 = distinct !{!129, !127, !"BrotliWriteBits: argument 1"}
!130 = !{!131}
!131 = distinct !{!131, !132, !"BrotliWriteBits: argument 1"}
!132 = distinct !{!132, !"BrotliWriteBits"}
!133 = !{!134}
!134 = distinct !{!134, !132, !"BrotliWriteBits: argument 0"}
!135 = !{!136}
!136 = distinct !{!136, !137, !"BrotliWriteBits: argument 1"}
!137 = distinct !{!137, !"BrotliWriteBits"}
!138 = !{!139}
!139 = distinct !{!139, !137, !"BrotliWriteBits: argument 0"}
!140 = !{!141}
!141 = distinct !{!141, !142, !"BrotliWriteBits: argument 0"}
!142 = distinct !{!142, !"BrotliWriteBits"}
!143 = !{!144}
!144 = distinct !{!144, !142, !"BrotliWriteBits: argument 1"}
!145 = !{!146}
!146 = distinct !{!146, !147, !"BrotliWriteBits: argument 1"}
!147 = distinct !{!147, !"BrotliWriteBits"}
!148 = !{!149}
!149 = distinct !{!149, !147, !"BrotliWriteBits: argument 0"}
!150 = !{!151}
!151 = distinct !{!151, !152, !"BrotliWriteBits: argument 1"}
!152 = distinct !{!152, !"BrotliWriteBits"}
!153 = !{!154}
!154 = distinct !{!154, !152, !"BrotliWriteBits: argument 0"}
!155 = !{!156}
!156 = distinct !{!156, !157, !"BrotliWriteBits: argument 1"}
!157 = distinct !{!157, !"BrotliWriteBits"}
!158 = !{!159}
!159 = distinct !{!159, !157, !"BrotliWriteBits: argument 0"}
!160 = !{!161}
!161 = distinct !{!161, !162, !"BrotliWriteBits: argument 0"}
!162 = distinct !{!162, !"BrotliWriteBits"}
!163 = !{!164}
!164 = distinct !{!164, !162, !"BrotliWriteBits: argument 1"}
!165 = !{!166}
!166 = distinct !{!166, !167, !"BrotliWriteBits: argument 1"}
!167 = distinct !{!167, !"BrotliWriteBits"}
!168 = !{!169}
!169 = distinct !{!169, !167, !"BrotliWriteBits: argument 0"}
!170 = !{!171}
!171 = distinct !{!171, !172, !"BrotliWriteBits: argument 1"}
!172 = distinct !{!172, !"BrotliWriteBits"}
!173 = !{!174}
!174 = distinct !{!174, !172, !"BrotliWriteBits: argument 0"}
!175 = !{!176}
!176 = distinct !{!176, !177, !"BrotliWriteBits: argument 1"}
!177 = distinct !{!177, !"BrotliWriteBits"}
!178 = !{!179}
!179 = distinct !{!179, !177, !"BrotliWriteBits: argument 0"}
!180 = !{!181}
!181 = distinct !{!181, !182, !"BrotliWriteBits: argument 1"}
!182 = distinct !{!182, !"BrotliWriteBits"}
!183 = !{!184}
!184 = distinct !{!184, !182, !"BrotliWriteBits: argument 0"}
!185 = distinct !{!185, !63}
!186 = !{!187}
!187 = distinct !{!187, !188, !"BrotliWriteBits: argument 0"}
!188 = distinct !{!188, !"BrotliWriteBits"}
!189 = !{!190}
!190 = distinct !{!190, !188, !"BrotliWriteBits: argument 1"}
!191 = !{!192}
!192 = distinct !{!192, !193, !"BrotliWriteBits: argument 1"}
!193 = distinct !{!193, !"BrotliWriteBits"}
!194 = !{!195}
!195 = distinct !{!195, !193, !"BrotliWriteBits: argument 0"}
!196 = !{!197}
!197 = distinct !{!197, !198, !"BrotliWriteBits: argument 1"}
!198 = distinct !{!198, !"BrotliWriteBits"}
!199 = !{!200}
!200 = distinct !{!200, !198, !"BrotliWriteBits: argument 0"}
!201 = !{!202}
!202 = distinct !{!202, !203, !"BrotliWriteBits: argument 0"}
!203 = distinct !{!203, !"BrotliWriteBits"}
!204 = !{!205}
!205 = distinct !{!205, !203, !"BrotliWriteBits: argument 1"}
!206 = !{!207}
!207 = distinct !{!207, !208, !"BrotliWriteBits: argument 1"}
!208 = distinct !{!208, !"BrotliWriteBits"}
!209 = !{!210}
!210 = distinct !{!210, !208, !"BrotliWriteBits: argument 0"}
!211 = !{!212}
!212 = distinct !{!212, !213, !"BrotliWriteBits: argument 1"}
!213 = distinct !{!213, !"BrotliWriteBits"}
!214 = !{!215}
!215 = distinct !{!215, !213, !"BrotliWriteBits: argument 0"}
!216 = !{!217}
!217 = distinct !{!217, !218, !"BrotliWriteBits: argument 1"}
!218 = distinct !{!218, !"BrotliWriteBits"}
!219 = !{!220}
!220 = distinct !{!220, !218, !"BrotliWriteBits: argument 0"}
!221 = !{!222}
!222 = distinct !{!222, !223, !"BrotliWriteBits: argument 0"}
!223 = distinct !{!223, !"BrotliWriteBits"}
!224 = !{!225}
!225 = distinct !{!225, !223, !"BrotliWriteBits: argument 1"}
!226 = !{!227}
!227 = distinct !{!227, !228, !"BrotliWriteBits: argument 1"}
!228 = distinct !{!228, !"BrotliWriteBits"}
!229 = !{!230}
!230 = distinct !{!230, !228, !"BrotliWriteBits: argument 0"}
!231 = !{!232}
!232 = distinct !{!232, !233, !"BrotliWriteBits: argument 1"}
!233 = distinct !{!233, !"BrotliWriteBits"}
!234 = !{!235}
!235 = distinct !{!235, !233, !"BrotliWriteBits: argument 0"}
!236 = !{!237}
!237 = distinct !{!237, !238, !"BrotliWriteBits: argument 1"}
!238 = distinct !{!238, !"BrotliWriteBits"}
!239 = !{!240}
!240 = distinct !{!240, !238, !"BrotliWriteBits: argument 0"}
!241 = !{!242}
!242 = distinct !{!242, !243, !"BrotliWriteBits: argument 1"}
!243 = distinct !{!243, !"BrotliWriteBits"}
!244 = !{!245}
!245 = distinct !{!245, !243, !"BrotliWriteBits: argument 0"}
!246 = distinct !{!246, !63}
!247 = !{!248}
!248 = distinct !{!248, !249, !"BrotliWriteBits: argument 0"}
!249 = distinct !{!249, !"BrotliWriteBits"}
!250 = !{!251}
!251 = distinct !{!251, !249, !"BrotliWriteBits: argument 1"}
!252 = !{!253}
!253 = distinct !{!253, !254, !"BrotliWriteBits: argument 1"}
!254 = distinct !{!254, !"BrotliWriteBits"}
!255 = !{!256}
!256 = distinct !{!256, !254, !"BrotliWriteBits: argument 0"}
!257 = !{!258}
!258 = distinct !{!258, !259, !"BrotliWriteBits: argument 1"}
!259 = distinct !{!259, !"BrotliWriteBits"}
!260 = !{!261}
!261 = distinct !{!261, !259, !"BrotliWriteBits: argument 0"}
!262 = !{!263}
!263 = distinct !{!263, !264, !"BrotliWriteBits: argument 0"}
!264 = distinct !{!264, !"BrotliWriteBits"}
!265 = !{!266}
!266 = distinct !{!266, !264, !"BrotliWriteBits: argument 1"}
!267 = !{!268}
!268 = distinct !{!268, !269, !"BrotliWriteBits: argument 1"}
!269 = distinct !{!269, !"BrotliWriteBits"}
!270 = !{!271}
!271 = distinct !{!271, !269, !"BrotliWriteBits: argument 0"}
!272 = !{!273}
!273 = distinct !{!273, !274, !"BrotliWriteBits: argument 1"}
!274 = distinct !{!274, !"BrotliWriteBits"}
!275 = !{!276}
!276 = distinct !{!276, !274, !"BrotliWriteBits: argument 0"}
!277 = !{!278}
!278 = distinct !{!278, !279, !"BrotliWriteBits: argument 1"}
!279 = distinct !{!279, !"BrotliWriteBits"}
!280 = !{!281}
!281 = distinct !{!281, !279, !"BrotliWriteBits: argument 0"}
!282 = !{!283}
!283 = distinct !{!283, !284, !"BrotliWriteBits: argument 0"}
!284 = distinct !{!284, !"BrotliWriteBits"}
!285 = !{!286}
!286 = distinct !{!286, !284, !"BrotliWriteBits: argument 1"}
!287 = !{!288}
!288 = distinct !{!288, !289, !"BrotliWriteBits: argument 1"}
!289 = distinct !{!289, !"BrotliWriteBits"}
!290 = !{!291}
!291 = distinct !{!291, !289, !"BrotliWriteBits: argument 0"}
!292 = !{!293}
!293 = distinct !{!293, !294, !"BrotliWriteBits: argument 1"}
!294 = distinct !{!294, !"BrotliWriteBits"}
!295 = !{!296}
!296 = distinct !{!296, !294, !"BrotliWriteBits: argument 0"}
!297 = !{!298}
!298 = distinct !{!298, !299, !"BrotliWriteBits: argument 1"}
!299 = distinct !{!299, !"BrotliWriteBits"}
!300 = !{!301}
!301 = distinct !{!301, !299, !"BrotliWriteBits: argument 0"}
!302 = !{!303}
!303 = distinct !{!303, !304, !"BrotliWriteBits: argument 1"}
!304 = distinct !{!304, !"BrotliWriteBits"}
!305 = !{!306}
!306 = distinct !{!306, !304, !"BrotliWriteBits: argument 0"}
!307 = distinct !{!307, !63}
!308 = !{!309}
!309 = distinct !{!309, !310, !"BrotliWriteBits: argument 0"}
!310 = distinct !{!310, !"BrotliWriteBits"}
!311 = !{!312}
!312 = distinct !{!312, !310, !"BrotliWriteBits: argument 1"}
!313 = !{!314}
!314 = distinct !{!314, !315, !"BrotliWriteBits: argument 1"}
!315 = distinct !{!315, !"BrotliWriteBits"}
!316 = !{!317}
!317 = distinct !{!317, !315, !"BrotliWriteBits: argument 0"}
!318 = !{!319}
!319 = distinct !{!319, !320, !"BrotliWriteBits: argument 1"}
!320 = distinct !{!320, !"BrotliWriteBits"}
!321 = !{!322}
!322 = distinct !{!322, !320, !"BrotliWriteBits: argument 0"}
!323 = !{!324}
!324 = distinct !{!324, !325, !"BrotliWriteBits: argument 0"}
!325 = distinct !{!325, !"BrotliWriteBits"}
!326 = !{!327}
!327 = distinct !{!327, !325, !"BrotliWriteBits: argument 1"}
!328 = !{!329}
!329 = distinct !{!329, !330, !"BrotliWriteBits: argument 1"}
!330 = distinct !{!330, !"BrotliWriteBits"}
!331 = !{!332}
!332 = distinct !{!332, !330, !"BrotliWriteBits: argument 0"}
!333 = !{!334}
!334 = distinct !{!334, !335, !"BrotliWriteBits: argument 1"}
!335 = distinct !{!335, !"BrotliWriteBits"}
!336 = !{!337}
!337 = distinct !{!337, !335, !"BrotliWriteBits: argument 0"}
!338 = !{!339}
!339 = distinct !{!339, !340, !"BrotliWriteBits: argument 1"}
!340 = distinct !{!340, !"BrotliWriteBits"}
!341 = !{!342}
!342 = distinct !{!342, !340, !"BrotliWriteBits: argument 0"}
!343 = !{!344}
!344 = distinct !{!344, !345, !"BrotliWriteBits: argument 0"}
!345 = distinct !{!345, !"BrotliWriteBits"}
!346 = !{!347}
!347 = distinct !{!347, !345, !"BrotliWriteBits: argument 1"}
!348 = !{!349}
!349 = distinct !{!349, !350, !"BrotliWriteBits: argument 1"}
!350 = distinct !{!350, !"BrotliWriteBits"}
!351 = !{!352}
!352 = distinct !{!352, !350, !"BrotliWriteBits: argument 0"}
!353 = !{!354}
!354 = distinct !{!354, !355, !"BrotliWriteBits: argument 1"}
!355 = distinct !{!355, !"BrotliWriteBits"}
!356 = !{!357}
!357 = distinct !{!357, !355, !"BrotliWriteBits: argument 0"}
!358 = !{!359}
!359 = distinct !{!359, !360, !"BrotliWriteBits: argument 1"}
!360 = distinct !{!360, !"BrotliWriteBits"}
!361 = !{!362}
!362 = distinct !{!362, !360, !"BrotliWriteBits: argument 0"}
!363 = !{!364}
!364 = distinct !{!364, !365, !"BrotliWriteBits: argument 1"}
!365 = distinct !{!365, !"BrotliWriteBits"}
!366 = !{!367}
!367 = distinct !{!367, !365, !"BrotliWriteBits: argument 0"}
!368 = distinct !{!368, !63}
!369 = !{!370}
!370 = distinct !{!370, !371, !"BrotliWriteBits: argument 0"}
!371 = distinct !{!371, !"BrotliWriteBits"}
!372 = !{!373}
!373 = distinct !{!373, !371, !"BrotliWriteBits: argument 1"}
!374 = !{!375}
!375 = distinct !{!375, !376, !"BrotliWriteBits: argument 1"}
!376 = distinct !{!376, !"BrotliWriteBits"}
!377 = !{!378}
!378 = distinct !{!378, !376, !"BrotliWriteBits: argument 0"}
!379 = !{!380}
!380 = distinct !{!380, !381, !"BrotliWriteBits: argument 1"}
!381 = distinct !{!381, !"BrotliWriteBits"}
!382 = !{!383}
!383 = distinct !{!383, !381, !"BrotliWriteBits: argument 0"}
!384 = !{!385}
!385 = distinct !{!385, !386, !"BrotliWriteBits: argument 0"}
!386 = distinct !{!386, !"BrotliWriteBits"}
!387 = !{!388}
!388 = distinct !{!388, !386, !"BrotliWriteBits: argument 1"}
!389 = !{!390}
!390 = distinct !{!390, !391, !"BrotliWriteBits: argument 1"}
!391 = distinct !{!391, !"BrotliWriteBits"}
!392 = !{!393}
!393 = distinct !{!393, !391, !"BrotliWriteBits: argument 0"}
!394 = !{!395}
!395 = distinct !{!395, !396, !"BrotliWriteBits: argument 1"}
!396 = distinct !{!396, !"BrotliWriteBits"}
!397 = !{!398}
!398 = distinct !{!398, !396, !"BrotliWriteBits: argument 0"}
!399 = !{!400}
!400 = distinct !{!400, !401, !"BrotliWriteBits: argument 1"}
!401 = distinct !{!401, !"BrotliWriteBits"}
!402 = !{!403}
!403 = distinct !{!403, !401, !"BrotliWriteBits: argument 0"}
!404 = !{!405}
!405 = distinct !{!405, !406, !"BrotliWriteBits: argument 0"}
!406 = distinct !{!406, !"BrotliWriteBits"}
!407 = !{!408}
!408 = distinct !{!408, !406, !"BrotliWriteBits: argument 1"}
!409 = !{!410}
!410 = distinct !{!410, !411, !"BrotliWriteBits: argument 1"}
!411 = distinct !{!411, !"BrotliWriteBits"}
!412 = !{!413}
!413 = distinct !{!413, !411, !"BrotliWriteBits: argument 0"}
!414 = !{!415}
!415 = distinct !{!415, !416, !"BrotliWriteBits: argument 1"}
!416 = distinct !{!416, !"BrotliWriteBits"}
!417 = !{!418}
!418 = distinct !{!418, !416, !"BrotliWriteBits: argument 0"}
!419 = !{!420}
!420 = distinct !{!420, !421, !"BrotliWriteBits: argument 1"}
!421 = distinct !{!421, !"BrotliWriteBits"}
!422 = !{!423}
!423 = distinct !{!423, !421, !"BrotliWriteBits: argument 0"}
!424 = !{!425}
!425 = distinct !{!425, !426, !"BrotliWriteBits: argument 1"}
!426 = distinct !{!426, !"BrotliWriteBits"}
!427 = !{!428}
!428 = distinct !{!428, !426, !"BrotliWriteBits: argument 0"}
!429 = distinct !{!429, !63}
!430 = !{!431}
!431 = distinct !{!431, !432, !"BrotliWriteBits: argument 0"}
!432 = distinct !{!432, !"BrotliWriteBits"}
!433 = !{!434}
!434 = distinct !{!434, !432, !"BrotliWriteBits: argument 1"}
!435 = !{!436}
!436 = distinct !{!436, !437, !"BrotliWriteBits: argument 1"}
!437 = distinct !{!437, !"BrotliWriteBits"}
!438 = !{!439}
!439 = distinct !{!439, !437, !"BrotliWriteBits: argument 0"}
!440 = !{!441}
!441 = distinct !{!441, !442, !"BrotliWriteBits: argument 1"}
!442 = distinct !{!442, !"BrotliWriteBits"}
!443 = !{!444}
!444 = distinct !{!444, !442, !"BrotliWriteBits: argument 0"}
!445 = !{!446}
!446 = distinct !{!446, !447, !"BrotliWriteBits: argument 0"}
!447 = distinct !{!447, !"BrotliWriteBits"}
!448 = !{!449}
!449 = distinct !{!449, !447, !"BrotliWriteBits: argument 1"}
!450 = !{!451}
!451 = distinct !{!451, !452, !"BrotliWriteBits: argument 1"}
!452 = distinct !{!452, !"BrotliWriteBits"}
!453 = !{!454}
!454 = distinct !{!454, !452, !"BrotliWriteBits: argument 0"}
!455 = !{!456}
!456 = distinct !{!456, !457, !"BrotliWriteBits: argument 1"}
!457 = distinct !{!457, !"BrotliWriteBits"}
!458 = !{!459}
!459 = distinct !{!459, !457, !"BrotliWriteBits: argument 0"}
!460 = !{!461}
!461 = distinct !{!461, !462, !"BrotliWriteBits: argument 1"}
!462 = distinct !{!462, !"BrotliWriteBits"}
!463 = !{!464}
!464 = distinct !{!464, !462, !"BrotliWriteBits: argument 0"}
!465 = !{!466}
!466 = distinct !{!466, !467, !"BrotliWriteBits: argument 0"}
!467 = distinct !{!467, !"BrotliWriteBits"}
!468 = !{!469}
!469 = distinct !{!469, !467, !"BrotliWriteBits: argument 1"}
!470 = !{!471}
!471 = distinct !{!471, !472, !"BrotliWriteBits: argument 1"}
!472 = distinct !{!472, !"BrotliWriteBits"}
!473 = !{!474}
!474 = distinct !{!474, !472, !"BrotliWriteBits: argument 0"}
!475 = !{!476}
!476 = distinct !{!476, !477, !"BrotliWriteBits: argument 1"}
!477 = distinct !{!477, !"BrotliWriteBits"}
!478 = !{!479}
!479 = distinct !{!479, !477, !"BrotliWriteBits: argument 0"}
!480 = !{!481}
!481 = distinct !{!481, !482, !"BrotliWriteBits: argument 1"}
!482 = distinct !{!482, !"BrotliWriteBits"}
!483 = !{!484}
!484 = distinct !{!484, !482, !"BrotliWriteBits: argument 0"}
!485 = !{!486}
!486 = distinct !{!486, !487, !"BrotliWriteBits: argument 1"}
!487 = distinct !{!487, !"BrotliWriteBits"}
!488 = !{!489}
!489 = distinct !{!489, !487, !"BrotliWriteBits: argument 0"}
!490 = distinct !{!490, !63}
!491 = !{!492}
!492 = distinct !{!492, !493, !"BrotliWriteBits: argument 0"}
!493 = distinct !{!493, !"BrotliWriteBits"}
!494 = !{!495}
!495 = distinct !{!495, !493, !"BrotliWriteBits: argument 1"}
!496 = !{!497}
!497 = distinct !{!497, !498, !"BrotliWriteBits: argument 1"}
!498 = distinct !{!498, !"BrotliWriteBits"}
!499 = !{!500}
!500 = distinct !{!500, !498, !"BrotliWriteBits: argument 0"}
!501 = !{!502}
!502 = distinct !{!502, !503, !"BrotliWriteBits: argument 1"}
!503 = distinct !{!503, !"BrotliWriteBits"}
!504 = !{!505}
!505 = distinct !{!505, !503, !"BrotliWriteBits: argument 0"}
!506 = !{!507}
!507 = distinct !{!507, !508, !"BrotliWriteBits: argument 0"}
!508 = distinct !{!508, !"BrotliWriteBits"}
!509 = !{!510}
!510 = distinct !{!510, !508, !"BrotliWriteBits: argument 1"}
!511 = !{!512}
!512 = distinct !{!512, !513, !"BrotliWriteBits: argument 1"}
!513 = distinct !{!513, !"BrotliWriteBits"}
!514 = !{!515}
!515 = distinct !{!515, !513, !"BrotliWriteBits: argument 0"}
!516 = !{!517}
!517 = distinct !{!517, !518, !"BrotliWriteBits: argument 1"}
!518 = distinct !{!518, !"BrotliWriteBits"}
!519 = !{!520}
!520 = distinct !{!520, !518, !"BrotliWriteBits: argument 0"}
!521 = !{!522}
!522 = distinct !{!522, !523, !"BrotliWriteBits: argument 1"}
!523 = distinct !{!523, !"BrotliWriteBits"}
!524 = !{!525}
!525 = distinct !{!525, !523, !"BrotliWriteBits: argument 0"}
!526 = !{!"branch_weights", i32 2000, i32 2002}
!527 = !{!528}
!528 = distinct !{!528, !529, !"BrotliWriteBits: argument 0"}
!529 = distinct !{!529, !"BrotliWriteBits"}
!530 = !{!531}
!531 = distinct !{!531, !529, !"BrotliWriteBits: argument 1"}
!532 = !{!533}
!533 = distinct !{!533, !534, !"BrotliWriteBits: argument 1"}
!534 = distinct !{!534, !"BrotliWriteBits"}
!535 = !{!536}
!536 = distinct !{!536, !534, !"BrotliWriteBits: argument 0"}
!537 = !{!538}
!538 = distinct !{!538, !539, !"BrotliWriteBits: argument 1"}
!539 = distinct !{!539, !"BrotliWriteBits"}
!540 = !{!541}
!541 = distinct !{!541, !539, !"BrotliWriteBits: argument 0"}
!542 = !{!543}
!543 = distinct !{!543, !544, !"BrotliWriteBits: argument 1"}
!544 = distinct !{!544, !"BrotliWriteBits"}
!545 = !{!546}
!546 = distinct !{!546, !544, !"BrotliWriteBits: argument 0"}
!547 = !{!548}
!548 = distinct !{!548, !549, !"BrotliWriteBits: argument 1"}
!549 = distinct !{!549, !"BrotliWriteBits"}
!550 = !{!551}
!551 = distinct !{!551, !549, !"BrotliWriteBits: argument 0"}
!552 = distinct !{!552, !63}
!553 = !{!554}
!554 = distinct !{!554, !555, !"BrotliWriteBits: argument 0"}
!555 = distinct !{!555, !"BrotliWriteBits"}
!556 = !{!557}
!557 = distinct !{!557, !555, !"BrotliWriteBits: argument 1"}
!558 = !{!559}
!559 = distinct !{!559, !560, !"BrotliWriteBits: argument 1"}
!560 = distinct !{!560, !"BrotliWriteBits"}
!561 = !{!562}
!562 = distinct !{!562, !560, !"BrotliWriteBits: argument 0"}
!563 = !{!564}
!564 = distinct !{!564, !565, !"BrotliWriteBits: argument 1"}
!565 = distinct !{!565, !"BrotliWriteBits"}
!566 = !{!567}
!567 = distinct !{!567, !565, !"BrotliWriteBits: argument 0"}
!568 = !{!569}
!569 = distinct !{!569, !570, !"BrotliWriteBits: argument 0"}
!570 = distinct !{!570, !"BrotliWriteBits"}
!571 = !{!572}
!572 = distinct !{!572, !570, !"BrotliWriteBits: argument 1"}
!573 = !{!574}
!574 = distinct !{!574, !575, !"BrotliWriteBits: argument 1"}
!575 = distinct !{!575, !"BrotliWriteBits"}
!576 = !{!577}
!577 = distinct !{!577, !575, !"BrotliWriteBits: argument 0"}
!578 = !{!579}
!579 = distinct !{!579, !580, !"BrotliWriteBits: argument 1"}
!580 = distinct !{!580, !"BrotliWriteBits"}
!581 = !{!582}
!582 = distinct !{!582, !580, !"BrotliWriteBits: argument 0"}
!583 = !{!584}
!584 = distinct !{!584, !585, !"BrotliWriteBits: argument 1"}
!585 = distinct !{!585, !"BrotliWriteBits"}
!586 = !{!587}
!587 = distinct !{!587, !585, !"BrotliWriteBits: argument 0"}
!588 = !{!589}
!589 = distinct !{!589, !590, !"BrotliWriteBits: argument 0"}
!590 = distinct !{!590, !"BrotliWriteBits"}
!591 = !{!592}
!592 = distinct !{!592, !590, !"BrotliWriteBits: argument 1"}
!593 = !{!594}
!594 = distinct !{!594, !595, !"BrotliWriteBits: argument 1"}
!595 = distinct !{!595, !"BrotliWriteBits"}
!596 = !{!597}
!597 = distinct !{!597, !595, !"BrotliWriteBits: argument 0"}
!598 = !{!599}
!599 = distinct !{!599, !600, !"BrotliWriteBits: argument 1"}
!600 = distinct !{!600, !"BrotliWriteBits"}
!601 = !{!602}
!602 = distinct !{!602, !600, !"BrotliWriteBits: argument 0"}
!603 = !{!604}
!604 = distinct !{!604, !605, !"BrotliWriteBits: argument 1"}
!605 = distinct !{!605, !"BrotliWriteBits"}
!606 = !{!607}
!607 = distinct !{!607, !605, !"BrotliWriteBits: argument 0"}
!608 = !{!609}
!609 = distinct !{!609, !610, !"BrotliWriteBits: argument 1"}
!610 = distinct !{!610, !"BrotliWriteBits"}
!611 = !{!612}
!612 = distinct !{!612, !610, !"BrotliWriteBits: argument 0"}
!613 = distinct !{!613, !63}
!614 = !{!615}
!615 = distinct !{!615, !616, !"BrotliWriteBits: argument 0"}
!616 = distinct !{!616, !"BrotliWriteBits"}
!617 = !{!618}
!618 = distinct !{!618, !616, !"BrotliWriteBits: argument 1"}
!619 = !{!620}
!620 = distinct !{!620, !621, !"BrotliWriteBits: argument 1"}
!621 = distinct !{!621, !"BrotliWriteBits"}
!622 = !{!623}
!623 = distinct !{!623, !621, !"BrotliWriteBits: argument 0"}
!624 = !{!625}
!625 = distinct !{!625, !626, !"BrotliWriteBits: argument 1"}
!626 = distinct !{!626, !"BrotliWriteBits"}
!627 = !{!628}
!628 = distinct !{!628, !626, !"BrotliWriteBits: argument 0"}
!629 = !{!630}
!630 = distinct !{!630, !631, !"BrotliWriteBits: argument 0"}
!631 = distinct !{!631, !"BrotliWriteBits"}
!632 = !{!633}
!633 = distinct !{!633, !631, !"BrotliWriteBits: argument 1"}
!634 = !{!635}
!635 = distinct !{!635, !636, !"BrotliWriteBits: argument 1"}
!636 = distinct !{!636, !"BrotliWriteBits"}
!637 = !{!638}
!638 = distinct !{!638, !636, !"BrotliWriteBits: argument 0"}
!639 = !{!640}
!640 = distinct !{!640, !641, !"BrotliWriteBits: argument 1"}
!641 = distinct !{!641, !"BrotliWriteBits"}
!642 = !{!643}
!643 = distinct !{!643, !641, !"BrotliWriteBits: argument 0"}
!644 = !{!645}
!645 = distinct !{!645, !646, !"BrotliWriteBits: argument 1"}
!646 = distinct !{!646, !"BrotliWriteBits"}
!647 = !{!648}
!648 = distinct !{!648, !646, !"BrotliWriteBits: argument 0"}
