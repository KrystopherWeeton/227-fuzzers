; ModuleID = '../../third_party/boringssl/src/ssl/dtls_record.cc'
source_filename = "../../third_party/boringssl/src/ssl/dtls_record.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.ssl_st = type <{ %"struct.bssl::SSL_PROTOCOL_METHOD"*, %"class.std::__1::unique_ptr.2", i16, i16, [4 x i8], %"class.std::__1::unique_ptr.91", %"class.std::__1::unique_ptr.91", i32 (%"struct.bssl::SSL_HANDSHAKE"*)*, %"struct.bssl::SSL3_STATE"*, %"struct.bssl::DTLS1_STATE"*, void (i32, i32, i32, i8*, i64, %struct.ssl_st*, i8*)*, i8*, i32, [4 x i8], %"class.std::__1::unique_ptr.58", void (%struct.ssl_st*, i32, i32)*, %"class.std::__1::unique_ptr.106", %"class.std::__1::unique_ptr.106", %struct.crypto_ex_data_st, i32, i32, i32, [4 x i8], %"class.std::__1::unique_ptr.29", %struct.ssl_quic_method_st*, i32, i8, [3 x i8] }>
%"struct.bssl::SSL_PROTOCOL_METHOD" = type { i8, i1 (%struct.ssl_st*)*, void (%struct.ssl_st*)*, i1 (%struct.ssl_st*, %"struct.bssl::SSLMessage"*)*, void (%struct.ssl_st*)*, i1 (%struct.ssl_st*)*, i32 (%struct.ssl_st*, i64*, i8*, i8*, i64)*, i32 (%struct.ssl_st*, i64*, i8*, i8*, i64)*, i32 (%struct.ssl_st*, %"class.bssl::Span"*, i64*, i8*, i8*, i64)*, i32 (%struct.ssl_st*, i8*, i8*, i32)*, i32 (%struct.ssl_st*)*, i1 (%struct.ssl_st*, %struct.cbb_st*, %struct.cbb_st*, i8)*, i1 (%struct.ssl_st*, %struct.cbb_st*, %"class.bssl::Array"*)*, i1 (%struct.ssl_st*, %"class.bssl::Array"*)*, i1 (%struct.ssl_st*)*, i32 (%struct.ssl_st*)*, void (%struct.ssl_st*)*, i1 (%struct.ssl_st*, i32, %"class.bssl::SSLAEADContext"*, i8*, i64)*, i1 (%struct.ssl_st*, i32, %"class.bssl::SSLAEADContext"*, i8*, i64)* }
%"struct.bssl::SSLMessage" = type { i8, i8, %struct.cbs_st, %struct.cbs_st }
%struct.cbs_st = type { i8*, i64 }
%struct.cbb_st = type { %struct.cbb_buffer_st*, %struct.cbb_st*, i64, i8, i8, i8 }
%struct.cbb_buffer_st = type { i8*, i64, i64, i8, i8 }
%"class.bssl::Array" = type { i8*, i64 }
%"class.bssl::SSLAEADContext" = type <{ %struct.ssl_cipher_st*, %"class.bssl::internal::StackAllocated", [12 x i8], i8, i8, i16, i8, i8, [6 x i8] }>
%struct.ssl_cipher_st = type { i8*, i8*, i32, i32, i32, i32, i32, i32 }
%"class.bssl::internal::StackAllocated" = type { %struct.evp_aead_ctx_st }
%struct.evp_aead_ctx_st = type { %struct.evp_aead_st*, %union.evp_aead_ctx_st_state, i8 }
%struct.evp_aead_st = type opaque
%union.evp_aead_ctx_st_state = type { i64, [576 x i8] }
%"class.std::__1::unique_ptr.2" = type { %"class.std::__1::__compressed_pair.3" }
%"class.std::__1::__compressed_pair.3" = type { %"struct.std::__1::__compressed_pair_elem.4" }
%"struct.std::__1::__compressed_pair_elem.4" = type { %"struct.bssl::SSL_CONFIG"* }
%"struct.bssl::SSL_CONFIG" = type <{ %struct.ssl_st*, i16, i16, [4 x i8], %struct.X509_VERIFY_PARAM_st*, %"class.std::__1::unique_ptr.5", %"class.std::__1::unique_ptr.15", i32 (i32, %struct.x509_store_ctx_st*)*, i32 (%struct.ssl_st*, i8*)*, %"class.std::__1::unique_ptr.29", i32 (%struct.ssl_st*, i8*, i8*, i32, i8*, i32)*, i32 (%struct.ssl_st*, i8*, i8*, i32)*, %"class.std::__1::unique_ptr.23", %struct.stack_st_X509_NAME*, %"class.bssl::Array.56", %"class.std::__1::unique_ptr.18", %"class.bssl::Array", %"class.bssl::GrowableArray.82", %"class.bssl::Array", %"class.bssl::Array", %"class.bssl::Array.56", %"class.std::__1::unique_ptr.84", i8, i16, [5 x i8] }>
%struct.X509_VERIFY_PARAM_st = type { i8*, i64, i64, i64, i32, i32, i32, %struct.stack_st_ASN1_OBJECT*, %struct.X509_VERIFY_PARAM_ID_st* }
%struct.stack_st_ASN1_OBJECT = type opaque
%struct.X509_VERIFY_PARAM_ID_st = type opaque
%"class.std::__1::unique_ptr.5" = type { %"class.std::__1::__compressed_pair.6" }
%"class.std::__1::__compressed_pair.6" = type { %"struct.std::__1::__compressed_pair_elem.7" }
%"struct.std::__1::__compressed_pair_elem.7" = type { %"struct.bssl::SSLCipherPreferenceList"* }
%"struct.bssl::SSLCipherPreferenceList" = type { %"class.std::__1::unique_ptr.8", i8* }
%"class.std::__1::unique_ptr.8" = type { %"class.std::__1::__compressed_pair.9" }
%"class.std::__1::__compressed_pair.9" = type { %"struct.std::__1::__compressed_pair_elem.10" }
%"struct.std::__1::__compressed_pair_elem.10" = type { %struct.stack_st_SSL_CIPHER* }
%struct.stack_st_SSL_CIPHER = type opaque
%"class.std::__1::unique_ptr.15" = type { %"class.std::__1::__compressed_pair.16" }
%"class.std::__1::__compressed_pair.16" = type { %"struct.std::__1::__compressed_pair_elem.17" }
%"struct.std::__1::__compressed_pair_elem.17" = type { %"struct.bssl::CERT"* }
%"struct.bssl::CERT" = type { %"class.std::__1::unique_ptr.18", %"class.std::__1::unique_ptr.23", %struct.stack_st_X509*, %struct.x509_st*, %struct.x509_st*, %struct.ssl_private_key_method_st*, %"struct.bssl::SSL_X509_METHOD"*, %"class.bssl::Array.56", i32 (%struct.ssl_st*, i8*)*, i8*, %struct.x509_store_st*, %"class.std::__1::unique_ptr.34", %"class.std::__1::unique_ptr.34", i8, [32 x i8], %"class.std::__1::unique_ptr.75", %"class.std::__1::unique_ptr.18", %struct.ssl_private_key_method_st* }
%struct.stack_st_X509 = type opaque
%struct.x509_st = type { %struct.x509_cinf_st*, %struct.X509_algor_st*, %struct.asn1_string_st*, i32, %struct.crypto_ex_data_st, i64, i64, i64, i64, i64, i64, %struct.asn1_string_st*, %struct.AUTHORITY_KEYID_st*, %struct.X509_POLICY_CACHE_st*, %struct.stack_st_DIST_POINT*, %struct.stack_st_GENERAL_NAME*, %struct.NAME_CONSTRAINTS_st*, [20 x i8], %struct.x509_cert_aux_st*, %struct.crypto_buffer_st*, %union.crypto_mutex_st }
%struct.x509_cinf_st = type { %struct.asn1_string_st*, %struct.asn1_string_st*, %struct.X509_algor_st*, %struct.X509_name_st*, %struct.X509_val_st*, %struct.X509_name_st*, %struct.X509_pubkey_st*, %struct.asn1_string_st*, %struct.asn1_string_st*, %struct.stack_st_X509_EXTENSION*, %struct.ASN1_ENCODING_st }
%struct.X509_val_st = type opaque
%struct.X509_name_st = type { %struct.stack_st_X509_NAME_ENTRY*, i32, %struct.buf_mem_st*, i8*, i32 }
%struct.stack_st_X509_NAME_ENTRY = type opaque
%struct.buf_mem_st = type { i64, i8*, i64 }
%struct.X509_pubkey_st = type opaque
%struct.stack_st_X509_EXTENSION = type opaque
%struct.ASN1_ENCODING_st = type { i8*, i64, i32, i8 }
%struct.X509_algor_st = type { %struct.asn1_object_st*, %struct.asn1_type_st* }
%struct.asn1_object_st = type { i8*, i8*, i32, i32, i8*, i32 }
%struct.asn1_type_st = type { i32, %union.anon.28 }
%union.anon.28 = type { i8* }
%struct.asn1_string_st = type { i32, i32, i8*, i64 }
%struct.AUTHORITY_KEYID_st = type opaque
%struct.X509_POLICY_CACHE_st = type opaque
%struct.stack_st_DIST_POINT = type opaque
%struct.stack_st_GENERAL_NAME = type opaque
%struct.NAME_CONSTRAINTS_st = type opaque
%struct.x509_cert_aux_st = type opaque
%struct.crypto_buffer_st = type opaque
%union.crypto_mutex_st = type { double, [48 x i8] }
%"struct.bssl::SSL_X509_METHOD" = type { i1 (%struct.stack_st_CRYPTO_BUFFER*)*, void (%"struct.bssl::CERT"*)*, void (%"struct.bssl::CERT"*)*, void (%"struct.bssl::CERT"*, %"struct.bssl::CERT"*)*, void (%"struct.bssl::CERT"*)*, void (%"struct.bssl::CERT"*)*, i1 (%struct.ssl_session_st*)*, i1 (%struct.ssl_session_st*, %struct.ssl_session_st*)*, void (%struct.ssl_session_st*)*, i1 (%struct.ssl_session_st*, %"struct.bssl::SSL_HANDSHAKE"*, i8*)*, void (%"struct.bssl::SSL_HANDSHAKE"*)*, i1 (%"struct.bssl::SSL_HANDSHAKE"*)*, void (%"struct.bssl::SSL_CONFIG"*)*, void (%"struct.bssl::SSL_CONFIG"*)*, i1 (%"struct.bssl::SSL_HANDSHAKE"*)*, i1 (%struct.ssl_ctx_st*)*, void (%struct.ssl_ctx_st*)*, void (%struct.ssl_ctx_st*)* }
%struct.stack_st_CRYPTO_BUFFER = type opaque
%struct.ssl_session_st = type { i32, i16, i16, i16, i32, [48 x i8], i32, [32 x i8], i8, [32 x i8], %"class.std::__1::unique_ptr.29", %"class.std::__1::unique_ptr.23", %"struct.bssl::SSL_X509_METHOD"*, %struct.x509_st*, %struct.stack_st_X509*, %struct.stack_st_X509*, i64, i32, i32, i64, %struct.ssl_cipher_st*, %struct.crypto_ex_data_st, %struct.ssl_session_st*, %struct.ssl_session_st*, %"class.bssl::Array", %"class.std::__1::unique_ptr.34", %"class.std::__1::unique_ptr.34", [32 x i8], [64 x i8], i8, i32, i32, i32, %"class.bssl::Array", %"class.bssl::Array", %"class.bssl::Array", i8, %"class.bssl::Array" }
%"struct.bssl::SSL_HANDSHAKE" = type <{ %struct.ssl_st*, %"struct.bssl::SSL_CONFIG"*, i32, i32, i32, i16, i16, i64, [48 x i8], [48 x i8], [48 x i8], [48 x i8], [48 x i8], [48 x i8], [48 x i8], %union.anon.39, i16, [2 x i8], %"class.std::__1::unique_ptr.40", [2 x %"class.std::__1::unique_ptr.45"], %"class.bssl::SSLTranscript", %"class.bssl::Array", %"class.bssl::Array", %"class.bssl::Array", %"class.bssl::Array", %"class.bssl::Array", %"class.bssl::Array.56", %"class.bssl::Array.56", %"class.bssl::Array.56", %"class.bssl::Array", i16, [6 x i8], %"class.bssl::internal::StackAllocated.57", %"class.bssl::Array", %"class.std::__1::unique_ptr.29", %"class.std::__1::unique_ptr.23", %struct.stack_st_X509_NAME*, %"class.bssl::Array", %"class.std::__1::unique_ptr.18", %"class.std::__1::unique_ptr.18", %"class.std::__1::unique_ptr.58", %"class.std::__1::unique_ptr.58", %"class.std::__1::unique_ptr.63", %struct.ssl_cipher_st*, %"class.bssl::Array", %"class.std::__1::unique_ptr.70", i32, i16, i16, i16, i8, [32 x i8], i8, [6 x i8], [6 x i8] }>
%union.anon.39 = type { i32 }
%"class.std::__1::unique_ptr.40" = type { %"class.std::__1::__compressed_pair.41" }
%"class.std::__1::__compressed_pair.41" = type { %"struct.std::__1::__compressed_pair_elem.42" }
%"struct.std::__1::__compressed_pair_elem.42" = type { %struct.err_save_state_st* }
%struct.err_save_state_st = type opaque
%"class.std::__1::unique_ptr.45" = type { %"class.std::__1::__compressed_pair.46" }
%"class.std::__1::__compressed_pair.46" = type { %"struct.std::__1::__compressed_pair_elem.47" }
%"struct.std::__1::__compressed_pair_elem.47" = type { %"class.bssl::SSLKeyShare"* }
%"class.bssl::SSLKeyShare" = type { i32 (...)** }
%"class.bssl::SSLTranscript" = type { %"class.std::__1::unique_ptr.50", %"class.bssl::internal::StackAllocated.55" }
%"class.std::__1::unique_ptr.50" = type { %"class.std::__1::__compressed_pair.51" }
%"class.std::__1::__compressed_pair.51" = type { %"struct.std::__1::__compressed_pair_elem.52" }
%"struct.std::__1::__compressed_pair_elem.52" = type { %struct.buf_mem_st* }
%"class.bssl::internal::StackAllocated.55" = type { %struct.env_md_ctx_st }
%struct.env_md_ctx_st = type { %struct.env_md_st*, i8*, %struct.evp_pkey_ctx_st*, %struct.evp_md_pctx_ops* }
%struct.env_md_st = type opaque
%struct.evp_pkey_ctx_st = type opaque
%struct.evp_md_pctx_ops = type opaque
%"class.bssl::internal::StackAllocated.57" = type { %struct.evp_hpke_ctx_st }
%struct.evp_hpke_ctx_st = type { %struct.evp_hpke_aead_st*, %struct.evp_hpke_kdf_st*, %struct.evp_aead_ctx_st, [24 x i8], [64 x i8], i64, i32 }
%struct.evp_hpke_aead_st = type opaque
%struct.evp_hpke_kdf_st = type opaque
%"class.std::__1::unique_ptr.63" = type { %"class.std::__1::__compressed_pair.64" }
%"class.std::__1::__compressed_pair.64" = type { %"struct.std::__1::__compressed_pair_elem.65" }
%"struct.std::__1::__compressed_pair_elem.65" = type { %struct.ssl_ech_server_config_list_st* }
%struct.ssl_ech_server_config_list_st = type <{ %"class.bssl::GrowableArray", i32, [4 x i8] }>
%"class.bssl::GrowableArray" = type { i64, %"class.bssl::Array.66" }
%"class.bssl::Array.66" = type { %"class.std::__1::unique_ptr.67"*, i64 }
%"class.std::__1::unique_ptr.67" = type opaque
%"class.std::__1::unique_ptr.70" = type { %"class.std::__1::__compressed_pair.71" }
%"class.std::__1::__compressed_pair.71" = type { %"struct.std::__1::__compressed_pair_elem.72" }
%"struct.std::__1::__compressed_pair_elem.72" = type { %"struct.bssl::SSL_HANDSHAKE_HINTS"* }
%"struct.bssl::SSL_HANDSHAKE_HINTS" = type <{ %"class.bssl::Array", i16, [6 x i8], %"class.bssl::Array", %"class.bssl::Array", i16, [6 x i8], %"class.bssl::Array", %"class.bssl::Array", %"class.bssl::Array", %"class.bssl::Array", i8, [7 x i8] }>
%struct.ssl_ctx_st = type <{ %"struct.bssl::SSL_PROTOCOL_METHOD"*, %"struct.bssl::SSL_X509_METHOD"*, %union.crypto_mutex_st, i16, i16, [4 x i8], %struct.ssl_quic_method_st*, %"class.std::__1::unique_ptr.5", %struct.x509_store_st*, %struct.lhash_st_SSL_SESSION*, i64, %struct.ssl_session_st*, %struct.ssl_session_st*, i32, i32, i32, i32, i32 (%struct.ssl_st*, %struct.ssl_session_st*)*, void (%struct.ssl_ctx_st*, %struct.ssl_session_st*)*, %struct.ssl_session_st* (%struct.ssl_st*, i8*, i32, i32*)*, i32, [4 x i8], i32 (%struct.x509_store_ctx_st*, i8*)*, i8*, i32 (%struct.ssl_st*, i8*)*, i32 (i8*, i32, i32, i8*)*, i8*, i32 (%struct.ssl_st*, %struct.x509_st**, %struct.evp_pkey_st**)*, void (%struct.ssl_st*, %struct.evp_pkey_st**)*, %struct.crypto_ex_data_st, void (%struct.ssl_st*, i32, i32)*, %"class.std::__1::unique_ptr.23", %struct.stack_st_X509_NAME*, i32, i32, i32, [4 x i8], %"class.std::__1::unique_ptr.15", void (i32, i32, i32, i8*, i64, %struct.ssl_st*, i8*)*, i8*, i32, [4 x i8], i32 (i32, %struct.x509_store_ctx_st*)*, %struct.X509_VERIFY_PARAM_st*, i32 (%struct.ssl_early_callback_ctx*)*, i32 (%struct.ssl_early_callback_ctx*)*, i8, i8, i16, [4 x i8], i32 (%struct.ssl_st*, i32*, i8*)*, i8*, %"class.std::__1::unique_ptr.109", %"class.std::__1::unique_ptr.109", i32 (%struct.ssl_st*, i8*, i8*, %struct.evp_cipher_ctx_st*, %struct.hmac_ctx_st*, i32)*, %"class.std::__1::unique_ptr.29", i32 (%struct.ssl_st*, i8*, i8*, i32, i8*, i32)*, i32 (%struct.ssl_st*, i8*, i8*, i32)*, i32 (%struct.ssl_st*, i8**, i32*, i8*)*, i8*, i32 (%struct.ssl_st*, i8**, i8*, i8*, i32, i8*)*, i8*, i32 (%struct.ssl_st*, i8**, i8*, i8*, i32, i8*)*, i8*, %"class.bssl::Array", %"class.std::__1::unique_ptr.84", %"class.bssl::GrowableArray.114", %"class.bssl::Array.56", %"class.std::__1::unique_ptr.18", %"class.std::__1::unique_ptr.63", void (%struct.ssl_st*, i8*)*, void (%struct.ssl_st*, %struct.timeval*)*, %struct.crypto_buffer_pool_st*, %struct.ssl_ticket_aead_method_st*, i32 (%struct.ssl_st*, i8*)*, i8*, %"class.bssl::Array.56", i16, [6 x i8] }>
%struct.lhash_st_SSL_SESSION = type opaque
%struct.x509_store_ctx_st = type { %struct.x509_store_st*, %struct.x509_st*, %struct.stack_st_X509*, %struct.stack_st_X509_CRL*, %struct.X509_VERIFY_PARAM_st*, i8*, {}*, i32 (i32, %struct.x509_store_ctx_st*)*, i32 (%struct.x509_st**, %struct.x509_store_ctx_st*, %struct.x509_st*)*, i32 (%struct.x509_store_ctx_st*, %struct.x509_st*, %struct.x509_st*)*, {}*, i32 (%struct.x509_store_ctx_st*, %struct.X509_crl_st**, %struct.x509_st*)*, i32 (%struct.x509_store_ctx_st*, %struct.X509_crl_st*)*, i32 (%struct.x509_store_ctx_st*, %struct.X509_crl_st*, %struct.x509_st*)*, {}*, %struct.stack_st_X509* (%struct.x509_store_ctx_st*, %struct.X509_name_st*)*, %struct.stack_st_X509_CRL* (%struct.x509_store_ctx_st*, %struct.X509_name_st*)*, {}*, i32, i32, %struct.stack_st_X509*, %struct.X509_POLICY_TREE_st*, i32, i32, i32, %struct.x509_st*, %struct.x509_st*, %struct.X509_crl_st*, i32, i32, %struct.x509_store_ctx_st*, %struct.crypto_ex_data_st }
%struct.stack_st_X509_CRL = type opaque
%struct.X509_POLICY_TREE_st = type opaque
%struct.X509_crl_st = type { %struct.X509_crl_info_st*, %struct.X509_algor_st*, %struct.asn1_string_st*, i32, i32, %struct.AUTHORITY_KEYID_st*, %struct.ISSUING_DIST_POINT_st*, i32, i32, %struct.asn1_string_st*, %struct.asn1_string_st*, [20 x i8], %struct.stack_st_GENERAL_NAMES*, %struct.x509_crl_method_st*, i8* }
%struct.X509_crl_info_st = type { %struct.asn1_string_st*, %struct.X509_algor_st*, %struct.X509_name_st*, %struct.asn1_string_st*, %struct.asn1_string_st*, %struct.stack_st_X509_REVOKED*, %struct.stack_st_X509_EXTENSION*, %struct.ASN1_ENCODING_st }
%struct.stack_st_X509_REVOKED = type opaque
%struct.ISSUING_DIST_POINT_st = type opaque
%struct.stack_st_GENERAL_NAMES = type opaque
%struct.x509_crl_method_st = type opaque
%struct.evp_pkey_st = type { i32, i32, %union.anon, %struct.evp_pkey_asn1_method_st* }
%union.anon = type { i8* }
%struct.evp_pkey_asn1_method_st = type opaque
%struct.ssl_early_callback_ctx = type { %struct.ssl_st*, i8*, i64, i16, i8*, i64, i8*, i64, i8*, i64, i8*, i64, i8*, i64 }
%"class.std::__1::unique_ptr.109" = type { %"class.std::__1::__compressed_pair.110" }
%"class.std::__1::__compressed_pair.110" = type { %"struct.std::__1::__compressed_pair_elem.111" }
%"struct.std::__1::__compressed_pair_elem.111" = type { %"struct.bssl::TicketKey"* }
%"struct.bssl::TicketKey" = type { [16 x i8], [16 x i8], [16 x i8], i64 }
%struct.evp_cipher_ctx_st = type { %struct.evp_cipher_st*, i8*, i8*, i32, i32, i32, [16 x i8], [16 x i8], [32 x i8], i32, i32, i32, [32 x i8] }
%struct.evp_cipher_st = type { i32, i32, i32, i32, i32, i32, i8*, i32 (%struct.evp_cipher_ctx_st*, i8*, i8*, i32)*, i32 (%struct.evp_cipher_ctx_st*, i8*, i8*, i64)*, void (%struct.evp_cipher_ctx_st*)*, i32 (%struct.evp_cipher_ctx_st*, i32, i32, i8*)* }
%struct.hmac_ctx_st = type { %struct.env_md_st*, %struct.env_md_ctx_st, %struct.env_md_ctx_st, %struct.env_md_ctx_st }
%"class.bssl::GrowableArray.114" = type { i64, %"class.bssl::Array.115" }
%"class.bssl::Array.115" = type { %"struct.bssl::CertCompressionAlg"*, i64 }
%"struct.bssl::CertCompressionAlg" = type <{ i32 (%struct.ssl_st*, %struct.cbb_st*, i8*, i64)*, i32 (%struct.ssl_st*, %struct.crypto_buffer_st**, i64, i8*, i64)*, i16, [6 x i8] }>
%struct.timeval = type { i64, i64 }
%struct.crypto_buffer_pool_st = type opaque
%struct.ssl_ticket_aead_method_st = type { i64 (%struct.ssl_st*)*, i32 (%struct.ssl_st*, i8*, i64*, i64, i8*, i64)*, i32 (%struct.ssl_st*, i8*, i64*, i64, i8*, i64)* }
%struct.x509_store_st = type { i32, %struct.stack_st_X509_OBJECT*, %union.crypto_mutex_st, %struct.stack_st_X509*, %struct.stack_st_X509_LOOKUP*, %struct.X509_VERIFY_PARAM_st*, i32 (%struct.x509_store_ctx_st*)*, i32 (i32, %struct.x509_store_ctx_st*)*, i32 (%struct.x509_st**, %struct.x509_store_ctx_st*, %struct.x509_st*)*, i32 (%struct.x509_store_ctx_st*, %struct.x509_st*, %struct.x509_st*)*, i32 (%struct.x509_store_ctx_st*)*, i32 (%struct.x509_store_ctx_st*, %struct.X509_crl_st**, %struct.x509_st*)*, i32 (%struct.x509_store_ctx_st*, %struct.X509_crl_st*)*, i32 (%struct.x509_store_ctx_st*, %struct.X509_crl_st*, %struct.x509_st*)*, %struct.stack_st_X509* (%struct.x509_store_ctx_st*, %struct.X509_name_st*)*, %struct.stack_st_X509_CRL* (%struct.x509_store_ctx_st*, %struct.X509_name_st*)*, i32 (%struct.x509_store_ctx_st*)*, i32 }
%struct.stack_st_X509_OBJECT = type opaque
%struct.stack_st_X509_LOOKUP = type opaque
%"class.std::__1::unique_ptr.34" = type { %"class.std::__1::__compressed_pair.35" }
%"class.std::__1::__compressed_pair.35" = type { %"struct.std::__1::__compressed_pair_elem.36" }
%"struct.std::__1::__compressed_pair_elem.36" = type { %struct.crypto_buffer_st* }
%"class.std::__1::unique_ptr.75" = type { %"class.std::__1::__compressed_pair.76" }
%"class.std::__1::__compressed_pair.76" = type { %"struct.std::__1::__compressed_pair_elem.77" }
%"struct.std::__1::__compressed_pair_elem.77" = type { %"struct.bssl::DC"* }
%"struct.bssl::DC" = type { %"class.std::__1::unique_ptr.34", i16, %"class.std::__1::unique_ptr.18" }
%struct.ssl_private_key_method_st = type { i32 (%struct.ssl_st*, i8*, i64*, i64, i16, i8*, i64)*, i32 (%struct.ssl_st*, i8*, i64*, i64, i8*, i64)*, i32 (%struct.ssl_st*, i8*, i64*, i64)* }
%"class.std::__1::unique_ptr.23" = type { %"class.std::__1::__compressed_pair.24" }
%"class.std::__1::__compressed_pair.24" = type { %"struct.std::__1::__compressed_pair_elem.25" }
%"struct.std::__1::__compressed_pair_elem.25" = type { %struct.stack_st_CRYPTO_BUFFER* }
%struct.stack_st_X509_NAME = type opaque
%"class.std::__1::unique_ptr.18" = type { %"class.std::__1::__compressed_pair.19" }
%"class.std::__1::__compressed_pair.19" = type { %"struct.std::__1::__compressed_pair_elem.20" }
%"struct.std::__1::__compressed_pair_elem.20" = type { %struct.evp_pkey_st* }
%"class.bssl::GrowableArray.82" = type { i64, %"class.bssl::Array.83" }
%"class.bssl::Array.83" = type { %"struct.bssl::ALPSConfig"*, i64 }
%"struct.bssl::ALPSConfig" = type { %"class.bssl::Array", %"class.bssl::Array" }
%"class.bssl::Array.56" = type { i16*, i64 }
%"class.std::__1::unique_ptr.84" = type { %"class.std::__1::__compressed_pair.85" }
%"class.std::__1::__compressed_pair.85" = type { %"struct.std::__1::__compressed_pair_elem.86" }
%"struct.std::__1::__compressed_pair_elem.86" = type { %struct.stack_st_SRTP_PROTECTION_PROFILE* }
%struct.stack_st_SRTP_PROTECTION_PROFILE = type opaque
%"class.std::__1::unique_ptr.91" = type { %"class.std::__1::__compressed_pair.92" }
%"class.std::__1::__compressed_pair.92" = type { %"struct.std::__1::__compressed_pair_elem.93" }
%"struct.std::__1::__compressed_pair_elem.93" = type { %struct.bio_st* }
%struct.bio_st = type { %struct.bio_method_st*, i32, i32, i32, i32, i32, i32, i8*, %struct.bio_st*, i64, i64 }
%struct.bio_method_st = type { i32, i8*, i32 (%struct.bio_st*, i8*, i32)*, i32 (%struct.bio_st*, i8*, i32)*, i32 (%struct.bio_st*, i8*)*, i32 (%struct.bio_st*, i8*, i32)*, i64 (%struct.bio_st*, i32, i64, i8*)*, i32 (%struct.bio_st*)*, i32 (%struct.bio_st*)*, i64 (%struct.bio_st*, i32, i64 (%struct.bio_st*, i32, i8*, i32, i64, i64)*)* }
%"struct.bssl::SSL3_STATE" = type <{ [8 x i8], [8 x i8], [32 x i8], [32 x i8], %"class.bssl::SSLBuffer", %"class.bssl::SSLBuffer", %"class.bssl::Span", i32, i32, i32, i32, i8*, i32, i32, %"class.std::__1::unique_ptr.40", i32, i32, i32, i32, i16, i8, i8, i8, i16, i8, %"class.std::__1::unique_ptr.50", %"class.std::__1::unique_ptr.50", %"class.std::__1::unique_ptr.50", i32, i32, i32, [4 x i8], %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr.96", [48 x i8], [48 x i8], [48 x i8], i8, i8, i8, [12 x i8], i8, i8, [12 x i8], [2 x i8], i8, %"class.std::__1::unique_ptr.58", %"class.bssl::Array", %"class.bssl::Array", %"class.std::__1::unique_ptr.29", [64 x i8], %"class.bssl::Array", %struct.srtp_protection_profile_st* }>
%"class.bssl::SSLBuffer" = type <{ i8*, i16, i16, i16, [5 x i8], i8, [4 x i8] }>
%"class.bssl::Span" = type { i8*, i64 }
%"class.std::__1::unique_ptr" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %"class.bssl::SSLAEADContext"* }
%"class.std::__1::unique_ptr.96" = type { %"class.std::__1::__compressed_pair.97" }
%"class.std::__1::__compressed_pair.97" = type { %"struct.std::__1::__compressed_pair_elem.98" }
%"struct.std::__1::__compressed_pair_elem.98" = type { %"struct.bssl::SSL_HANDSHAKE"* }
%struct.srtp_protection_profile_st = type { i8*, i64 }
%"struct.bssl::DTLS1_STATE" = type <{ i8, [256 x i8], [7 x i8], i64, i16, i16, [4 x i8], %"struct.bssl::DTLS1_BITMAP", i16, i16, [8 x i8], [4 x i8], %"class.std::__1::unique_ptr", [7 x %"class.std::__1::unique_ptr.101"], [7 x %"struct.bssl::DTLS_OUTGOING_MESSAGE"], i8, i8, [2 x i8], i32, i32, i32, %"struct.bssl::OPENSSL_timeval", i32, [4 x i8] }>
%"struct.bssl::DTLS1_BITMAP" = type { i64, i64 }
%"class.std::__1::unique_ptr.101" = type { %"class.std::__1::__compressed_pair.102" }
%"class.std::__1::__compressed_pair.102" = type { %"struct.std::__1::__compressed_pair_elem.103" }
%"struct.std::__1::__compressed_pair_elem.103" = type { %"struct.bssl::hm_fragment"* }
%"struct.bssl::hm_fragment" = type { i8, i16, i32, i8*, i8* }
%"struct.bssl::DTLS_OUTGOING_MESSAGE" = type <{ i8*, i32, i16, i8, i8 }>
%"struct.bssl::OPENSSL_timeval" = type { i64, i32 }
%"class.std::__1::unique_ptr.58" = type { %"class.std::__1::__compressed_pair.59" }
%"class.std::__1::__compressed_pair.59" = type { %"struct.std::__1::__compressed_pair_elem.60" }
%"struct.std::__1::__compressed_pair_elem.60" = type { %struct.ssl_session_st* }
%"class.std::__1::unique_ptr.106" = type { %"class.std::__1::__compressed_pair.107" }
%"class.std::__1::__compressed_pair.107" = type { %"struct.std::__1::__compressed_pair_elem.108" }
%"struct.std::__1::__compressed_pair_elem.108" = type { %struct.ssl_ctx_st* }
%struct.crypto_ex_data_st = type { %struct.stack_st_void* }
%struct.stack_st_void = type opaque
%"class.std::__1::unique_ptr.29" = type { %"class.std::__1::__compressed_pair.30" }
%"class.std::__1::__compressed_pair.30" = type { %"struct.std::__1::__compressed_pair_elem.31" }
%"struct.std::__1::__compressed_pair_elem.31" = type { i8* }
%struct.ssl_quic_method_st = type { i32 (%struct.ssl_st*, i32, %struct.ssl_cipher_st*, i8*, i64)*, i32 (%struct.ssl_st*, i32, %struct.ssl_cipher_st*, i8*, i64)*, i32 (%struct.ssl_st*, i32, i8*, i64)*, i32 (%struct.ssl_st*)*, i32 (%struct.ssl_st*, i32, i8)* }
%"class.bssl::Span.1" = type { i8*, i64 }

@.str = private unnamed_addr constant [51 x i8] c"../../third_party/boringssl/src/ssl/dtls_record.cc\00", align 1

; Function Attrs: nounwind ssp uwtable
define hidden i32 @_ZN4bssl16dtls_open_recordEP6ssl_stPhPNS_4SpanIhEEPmS2_S4_(%struct.ssl_st*, i8* nocapture, %"class.bssl::Span"*, i64* nocapture, i8*, %"class.bssl::Span"* nocapture readonly byval(%"class.bssl::Span") align 8) local_unnamed_addr #0 {
  %7 = alloca %struct.cbs_st, align 8
  %8 = alloca i8, align 1
  %9 = alloca i16, align 2
  %10 = alloca i64, align 8
  %11 = bitcast i64* %10 to [8 x i8]*
  %12 = alloca %struct.cbs_st, align 8
  %13 = alloca %"class.bssl::Span.1", align 8
  %14 = alloca %"class.bssl::Span", align 8
  store i64 0, i64* %3, align 8
  %15 = getelementptr inbounds %struct.ssl_st, %struct.ssl_st* %0, i64 0, i32 8
  %16 = load %"struct.bssl::SSL3_STATE"*, %"struct.bssl::SSL3_STATE"** %15, align 8
  %17 = getelementptr inbounds %"struct.bssl::SSL3_STATE", %"struct.bssl::SSL3_STATE"* %16, i64 0, i32 12
  %18 = load i32, i32* %17, align 8
  %19 = icmp eq i32 %18, 1
  br i1 %19, label %221, label %20

20:                                               ; preds = %6
  %21 = getelementptr inbounds %"class.bssl::Span", %"class.bssl::Span"* %5, i64 0, i32 1
  %22 = load i64, i64* %21, align 8
  %23 = icmp eq i64 %22, 0
  br i1 %23, label %221, label %24

24:                                               ; preds = %20
  %25 = bitcast %struct.cbs_st* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %25) #3
  %26 = getelementptr inbounds %struct.cbs_st, %struct.cbs_st* %7, i64 0, i32 1
  %27 = bitcast %"class.bssl::Span"* %5 to i64*
  %28 = load i64, i64* %27, align 8
  %29 = bitcast %struct.cbs_st* %7 to i64*
  store i64 %28, i64* %29, align 8
  store i64 %22, i64* %26, align 8
  call void @llvm.lifetime.start.p0i8(i64 1, i8* nonnull %8) #3
  store i8 -86, i8* %8, align 1
  %30 = bitcast i16* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 2, i8* nonnull %30) #3
  store i16 -21846, i16* %9, align 2
  %31 = bitcast i64* %10 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %31) #3
  %32 = getelementptr inbounds [8 x i8], [8 x i8]* %11, i64 0, i64 1
  %33 = getelementptr inbounds [8 x i8], [8 x i8]* %11, i64 0, i64 2
  %34 = getelementptr inbounds [8 x i8], [8 x i8]* %11, i64 0, i64 3
  %35 = getelementptr inbounds [8 x i8], [8 x i8]* %11, i64 0, i64 4
  %36 = getelementptr inbounds [8 x i8], [8 x i8]* %11, i64 0, i64 5
  %37 = getelementptr inbounds [8 x i8], [8 x i8]* %11, i64 0, i64 6
  %38 = getelementptr inbounds [8 x i8], [8 x i8]* %11, i64 0, i64 7
  %39 = bitcast %struct.cbs_st* %12 to i8*
  store i64 -6148914691236517206, i64* %10, align 8
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %39) #3
  %40 = bitcast %struct.cbs_st* %12 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %40, i8 -86, i64 16, i1 false)
  %41 = call i32 @CBS_get_u8(%struct.cbs_st* nonnull %7, i8* nonnull %8) #3
  %42 = icmp eq i32 %41, 0
  %43 = inttoptr i64 %28 to i8*
  br i1 %42, label %56, label %44

44:                                               ; preds = %24
  %45 = call i32 @CBS_get_u16(%struct.cbs_st* nonnull %7, i16* nonnull %9) #3
  %46 = icmp eq i32 %45, 0
  br i1 %46, label %56, label %47

47:                                               ; preds = %44
  %48 = call i32 @CBS_copy_bytes(%struct.cbs_st* nonnull %7, i8* nonnull %31, i64 8) #3
  %49 = icmp eq i32 %48, 0
  br i1 %49, label %56, label %50

50:                                               ; preds = %47
  %51 = call i32 @CBS_get_u16_length_prefixed(%struct.cbs_st* nonnull %7, %struct.cbs_st* nonnull %12) #3
  %52 = icmp eq i32 %51, 0
  br i1 %52, label %56, label %53

53:                                               ; preds = %50
  %54 = call i64 @CBS_len(%struct.cbs_st* nonnull %12) #3
  %55 = icmp ugt i64 %54, 16704
  br i1 %55, label %56, label %57

56:                                               ; preds = %50, %47, %44, %24, %53
  store i64 %22, i64* %3, align 8
  br label %219

57:                                               ; preds = %53
  %58 = load %"struct.bssl::SSL3_STATE"*, %"struct.bssl::SSL3_STATE"** %15, align 8
  %59 = getelementptr inbounds %"struct.bssl::SSL3_STATE", %"struct.bssl::SSL3_STATE"* %58, i64 0, i32 32, i32 0, i32 0, i32 0
  %60 = load %"class.bssl::SSLAEADContext"*, %"class.bssl::SSLAEADContext"** %59, align 8
  %61 = getelementptr inbounds %"class.bssl::SSLAEADContext", %"class.bssl::SSLAEADContext"* %60, i64 0, i32 0
  %62 = load %struct.ssl_cipher_st*, %struct.ssl_cipher_st** %61, align 8
  %63 = icmp eq %struct.ssl_cipher_st* %62, null
  %64 = load i16, i16* %9, align 2
  br i1 %63, label %65, label %68

65:                                               ; preds = %57
  %66 = and i16 %64, -256
  %67 = icmp eq i16 %66, -512
  br i1 %67, label %72, label %71

68:                                               ; preds = %57
  %69 = call zeroext i16 @_ZNK4bssl14SSLAEADContext13RecordVersionEv(%"class.bssl::SSLAEADContext"* %60) #3
  %70 = icmp eq i16 %64, %69
  br i1 %70, label %72, label %71

71:                                               ; preds = %65, %68
  store i64 %22, i64* %3, align 8
  br label %219

72:                                               ; preds = %65, %68
  %73 = icmp ult i64 %22, 13
  %74 = select i1 %73, i64 %22, i64 13
  call void @_ZN4bssl19ssl_do_msg_callbackEPK6ssl_stiiNS_4SpanIKhEE(%struct.ssl_st* %0, i32 0, i32 256, i8* %43, i64 %74) #3
  %75 = load i8, i8* %31, align 8
  %76 = zext i8 %75 to i32
  %77 = shl nuw nsw i32 %76, 8
  %78 = load i8, i8* %32, align 1
  %79 = zext i8 %78 to i32
  %80 = or i32 %77, %79
  %81 = getelementptr inbounds %struct.ssl_st, %struct.ssl_st* %0, i64 0, i32 9
  %82 = load %"struct.bssl::DTLS1_STATE"*, %"struct.bssl::DTLS1_STATE"** %81, align 8
  %83 = getelementptr inbounds %"struct.bssl::DTLS1_STATE", %"struct.bssl::DTLS1_STATE"* %82, i64 0, i32 4
  %84 = load i16, i16* %83, align 8
  %85 = zext i16 %84 to i32
  %86 = icmp eq i32 %80, %85
  br i1 %86, label %87, label %128

87:                                               ; preds = %72
  %88 = zext i8 %75 to i64
  %89 = shl nuw nsw i64 %88, 8
  %90 = zext i8 %78 to i64
  %91 = or i64 %89, %90
  %92 = shl nuw nsw i64 %91, 8
  %93 = load i8, i8* %33, align 2
  %94 = zext i8 %93 to i64
  %95 = or i64 %92, %94
  %96 = shl nuw nsw i64 %95, 8
  %97 = load i8, i8* %34, align 1
  %98 = zext i8 %97 to i64
  %99 = or i64 %96, %98
  %100 = shl i64 %99, 8
  %101 = load i8, i8* %35, align 4
  %102 = zext i8 %101 to i64
  %103 = or i64 %100, %102
  %104 = shl i64 %103, 8
  %105 = load i8, i8* %36, align 1
  %106 = zext i8 %105 to i64
  %107 = or i64 %104, %106
  %108 = shl i64 %107, 8
  %109 = load i8, i8* %37, align 2
  %110 = zext i8 %109 to i64
  %111 = or i64 %108, %110
  %112 = shl i64 %111, 8
  %113 = load i8, i8* %38, align 1
  %114 = zext i8 %113 to i64
  %115 = or i64 %112, %114
  %116 = getelementptr inbounds %"struct.bssl::DTLS1_STATE", %"struct.bssl::DTLS1_STATE"* %82, i64 0, i32 7, i32 1
  %117 = load i64, i64* %116, align 8
  %118 = icmp ult i64 %117, %115
  br i1 %118, label %131, label %119

119:                                              ; preds = %87
  %120 = sub i64 %117, %115
  %121 = icmp ugt i64 %120, 63
  br i1 %121, label %128, label %122

122:                                              ; preds = %119
  %123 = getelementptr inbounds %"struct.bssl::DTLS1_STATE", %"struct.bssl::DTLS1_STATE"* %82, i64 0, i32 7, i32 0
  %124 = load i64, i64* %123, align 8
  %125 = shl i64 1, %120
  %126 = and i64 %124, %125
  %127 = icmp eq i64 %126, 0
  br i1 %127, label %131, label %128

128:                                              ; preds = %122, %119, %72
  %129 = call i64 @CBS_len(%struct.cbs_st* nonnull %7) #3
  %130 = sub i64 %22, %129
  store i64 %130, i64* %3, align 8
  br label %219

131:                                              ; preds = %122, %87
  %132 = load %"struct.bssl::SSL3_STATE"*, %"struct.bssl::SSL3_STATE"** %15, align 8
  %133 = getelementptr inbounds %"struct.bssl::SSL3_STATE", %"struct.bssl::SSL3_STATE"* %132, i64 0, i32 32, i32 0, i32 0, i32 0
  %134 = load %"class.bssl::SSLAEADContext"*, %"class.bssl::SSLAEADContext"** %133, align 8
  %135 = load i8, i8* %8, align 1
  %136 = load i16, i16* %9, align 2
  %137 = bitcast %"class.bssl::Span.1"* %13 to i64*
  store i64 %28, i64* %137, align 8
  %138 = getelementptr inbounds %"class.bssl::Span.1", %"class.bssl::Span.1"* %13, i64 0, i32 1
  store i64 %74, i64* %138, align 8
  %139 = call i8* @CBS_data(%struct.cbs_st* nonnull %12) #3
  %140 = call i64 @CBS_len(%struct.cbs_st* nonnull %12) #3
  %141 = getelementptr inbounds %"class.bssl::Span", %"class.bssl::Span"* %14, i64 0, i32 0
  store i8* %139, i8** %141, align 8
  %142 = getelementptr inbounds %"class.bssl::Span", %"class.bssl::Span"* %14, i64 0, i32 1
  store i64 %140, i64* %142, align 8
  %143 = call zeroext i1 @_ZN4bssl14SSLAEADContext4OpenEPNS_4SpanIhEEhtPKhNS1_IS4_EES2_(%"class.bssl::SSLAEADContext"* %134, %"class.bssl::Span"* %2, i8 zeroext %135, i16 zeroext %136, i8* nonnull %31, %"class.bssl::Span.1"* nonnull byval(%"class.bssl::Span.1") align 8 %13, %"class.bssl::Span"* nonnull byval(%"class.bssl::Span") align 8 %14) #3
  br i1 %143, label %147, label %144

144:                                              ; preds = %131
  call void @ERR_clear_error() #3
  %145 = call i64 @CBS_len(%struct.cbs_st* nonnull %7) #3
  %146 = sub i64 %22, %145
  store i64 %146, i64* %3, align 8
  br label %219

147:                                              ; preds = %131
  %148 = call i64 @CBS_len(%struct.cbs_st* nonnull %7) #3
  %149 = sub i64 %22, %148
  store i64 %149, i64* %3, align 8
  %150 = getelementptr inbounds %"class.bssl::Span", %"class.bssl::Span"* %2, i64 0, i32 1
  %151 = load i64, i64* %150, align 8
  %152 = icmp ugt i64 %151, 16384
  br i1 %152, label %153, label %154

153:                                              ; preds = %147
  call void @ERR_put_error(i32 16, i32 0, i32 136, i8* getelementptr inbounds ([51 x i8], [51 x i8]* @.str, i64 0, i64 0), i32 254) #3
  store i8 22, i8* %4, align 1
  br label %219

154:                                              ; preds = %147
  %155 = load %"struct.bssl::DTLS1_STATE"*, %"struct.bssl::DTLS1_STATE"** %81, align 8
  %156 = getelementptr inbounds %"struct.bssl::DTLS1_STATE", %"struct.bssl::DTLS1_STATE"* %155, i64 0, i32 7
  %157 = load i8, i8* %31, align 8
  %158 = zext i8 %157 to i64
  %159 = shl nuw nsw i64 %158, 8
  %160 = load i8, i8* %32, align 1
  %161 = zext i8 %160 to i64
  %162 = or i64 %159, %161
  %163 = shl nuw nsw i64 %162, 8
  %164 = load i8, i8* %33, align 2
  %165 = zext i8 %164 to i64
  %166 = or i64 %163, %165
  %167 = shl nuw nsw i64 %166, 8
  %168 = load i8, i8* %34, align 1
  %169 = zext i8 %168 to i64
  %170 = or i64 %167, %169
  %171 = shl i64 %170, 8
  %172 = load i8, i8* %35, align 4
  %173 = zext i8 %172 to i64
  %174 = or i64 %171, %173
  %175 = shl i64 %174, 8
  %176 = load i8, i8* %36, align 1
  %177 = zext i8 %176 to i64
  %178 = or i64 %175, %177
  %179 = shl i64 %178, 8
  %180 = load i8, i8* %37, align 2
  %181 = zext i8 %180 to i64
  %182 = or i64 %179, %181
  %183 = shl i64 %182, 8
  %184 = load i8, i8* %38, align 1
  %185 = zext i8 %184 to i64
  %186 = or i64 %183, %185
  %187 = getelementptr inbounds %"struct.bssl::DTLS1_STATE", %"struct.bssl::DTLS1_STATE"* %155, i64 0, i32 7, i32 1
  %188 = load i64, i64* %187, align 8
  %189 = icmp ugt i64 %186, %188
  br i1 %189, label %190, label %199

190:                                              ; preds = %154
  %191 = sub i64 %186, %188
  %192 = icmp ugt i64 %191, 63
  %193 = getelementptr inbounds %"struct.bssl::DTLS1_BITMAP", %"struct.bssl::DTLS1_BITMAP"* %156, i64 0, i32 0
  br i1 %192, label %197, label %194

194:                                              ; preds = %190
  %195 = load i64, i64* %193, align 8
  %196 = shl i64 %195, %191
  br label %197

197:                                              ; preds = %194, %190
  %198 = phi i64 [ %196, %194 ], [ 0, %190 ]
  store i64 %198, i64* %193, align 8
  store i64 %186, i64* %187, align 8
  br label %199

199:                                              ; preds = %197, %154
  %200 = phi i64 [ %186, %197 ], [ %188, %154 ]
  %201 = sub i64 %200, %186
  %202 = icmp ult i64 %201, 64
  br i1 %202, label %203, label %208

203:                                              ; preds = %199
  %204 = shl i64 1, %201
  %205 = getelementptr inbounds %"struct.bssl::DTLS1_BITMAP", %"struct.bssl::DTLS1_BITMAP"* %156, i64 0, i32 0
  %206 = load i64, i64* %205, align 8
  %207 = or i64 %206, %204
  store i64 %207, i64* %205, align 8
  br label %208

208:                                              ; preds = %199, %203
  %209 = load i8, i8* %8, align 1
  %210 = icmp eq i8 %209, 21
  br i1 %210, label %211, label %216

211:                                              ; preds = %208
  %212 = getelementptr inbounds %"class.bssl::Span", %"class.bssl::Span"* %2, i64 0, i32 0
  %213 = load i8*, i8** %212, align 8
  %214 = load i64, i64* %150, align 8
  %215 = call i32 @_ZN4bssl17ssl_process_alertEP6ssl_stPhNS_4SpanIKhEE(%struct.ssl_st* %0, i8* %4, i8* %213, i64 %214) #3
  br label %219

216:                                              ; preds = %208
  %217 = load %"struct.bssl::SSL3_STATE"*, %"struct.bssl::SSL3_STATE"** %15, align 8
  %218 = getelementptr inbounds %"struct.bssl::SSL3_STATE", %"struct.bssl::SSL3_STATE"* %217, i64 0, i32 21
  store i8 0, i8* %218, align 1
  store i8 %209, i8* %1, align 1
  br label %219

219:                                              ; preds = %128, %144, %153, %211, %216, %71, %56
  %220 = phi i32 [ 1, %56 ], [ 1, %71 ], [ 1, %128 ], [ 1, %144 ], [ 4, %153 ], [ %215, %211 ], [ 0, %216 ]
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %39) #3
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %31) #3
  call void @llvm.lifetime.end.p0i8(i64 2, i8* nonnull %30) #3
  call void @llvm.lifetime.end.p0i8(i64 1, i8* nonnull %8) #3
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %25) #3
  br label %221

221:                                              ; preds = %20, %6, %219
  %222 = phi i32 [ %220, %219 ], [ 3, %6 ], [ 2, %20 ]
  ret i32 %222
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

declare i32 @CBS_get_u8(%struct.cbs_st*, i8*) local_unnamed_addr #2

declare i32 @CBS_get_u16(%struct.cbs_st*, i16*) local_unnamed_addr #2

declare i32 @CBS_copy_bytes(%struct.cbs_st*, i8*, i64) local_unnamed_addr #2

declare i32 @CBS_get_u16_length_prefixed(%struct.cbs_st*, %struct.cbs_st*) local_unnamed_addr #2

declare i64 @CBS_len(%struct.cbs_st*) local_unnamed_addr #2

declare zeroext i16 @_ZNK4bssl14SSLAEADContext13RecordVersionEv(%"class.bssl::SSLAEADContext"*) local_unnamed_addr #2

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

declare void @_ZN4bssl19ssl_do_msg_callbackEPK6ssl_stiiNS_4SpanIKhEE(%struct.ssl_st*, i32, i32, i8*, i64) local_unnamed_addr #2

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #1

declare zeroext i1 @_ZN4bssl14SSLAEADContext4OpenEPNS_4SpanIhEEhtPKhNS1_IS4_EES2_(%"class.bssl::SSLAEADContext"*, %"class.bssl::Span"*, i8 zeroext, i16 zeroext, i8*, %"class.bssl::Span.1"* byval(%"class.bssl::Span.1") align 8, %"class.bssl::Span"* byval(%"class.bssl::Span") align 8) local_unnamed_addr #2

declare i8* @CBS_data(%struct.cbs_st*) local_unnamed_addr #2

declare void @ERR_clear_error() local_unnamed_addr #2

declare void @ERR_put_error(i32, i32, i32, i8*, i32) local_unnamed_addr #2

declare i32 @_ZN4bssl17ssl_process_alertEP6ssl_stPhNS_4SpanIKhEE(%struct.ssl_st*, i8*, i8*, i64) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden i64 @_ZN4bssl22dtls_max_seal_overheadEPK6ssl_stNS_17dtls1_use_epoch_tE(%struct.ssl_st* nocapture readonly, i32) local_unnamed_addr #0 {
  %3 = icmp eq i32 %1, 0
  br i1 %3, label %4, label %8

4:                                                ; preds = %2
  %5 = getelementptr inbounds %struct.ssl_st, %struct.ssl_st* %0, i64 0, i32 9
  %6 = load %"struct.bssl::DTLS1_STATE"*, %"struct.bssl::DTLS1_STATE"** %5, align 8
  %7 = getelementptr inbounds %"struct.bssl::DTLS1_STATE", %"struct.bssl::DTLS1_STATE"* %6, i64 0, i32 12, i32 0, i32 0, i32 0
  br label %12

8:                                                ; preds = %2
  %9 = getelementptr inbounds %struct.ssl_st, %struct.ssl_st* %0, i64 0, i32 8
  %10 = load %"struct.bssl::SSL3_STATE"*, %"struct.bssl::SSL3_STATE"** %9, align 8
  %11 = getelementptr inbounds %"struct.bssl::SSL3_STATE", %"struct.bssl::SSL3_STATE"* %10, i64 0, i32 33, i32 0, i32 0, i32 0
  br label %12

12:                                               ; preds = %4, %8
  %13 = phi %"class.bssl::SSLAEADContext"** [ %7, %4 ], [ %11, %8 ]
  %14 = load %"class.bssl::SSLAEADContext"*, %"class.bssl::SSLAEADContext"** %13, align 8
  %15 = tail call i64 @_ZNK4bssl14SSLAEADContext11MaxOverheadEv(%"class.bssl::SSLAEADContext"* %14) #3
  %16 = add i64 %15, 13
  ret i64 %16
}

declare i64 @_ZNK4bssl14SSLAEADContext11MaxOverheadEv(%"class.bssl::SSLAEADContext"*) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden i64 @_ZN4bssl20dtls_seal_prefix_lenEPK6ssl_stNS_17dtls1_use_epoch_tE(%struct.ssl_st* nocapture readonly, i32) local_unnamed_addr #0 {
  %3 = icmp eq i32 %1, 0
  br i1 %3, label %4, label %8

4:                                                ; preds = %2
  %5 = getelementptr inbounds %struct.ssl_st, %struct.ssl_st* %0, i64 0, i32 9
  %6 = load %"struct.bssl::DTLS1_STATE"*, %"struct.bssl::DTLS1_STATE"** %5, align 8
  %7 = getelementptr inbounds %"struct.bssl::DTLS1_STATE", %"struct.bssl::DTLS1_STATE"* %6, i64 0, i32 12, i32 0, i32 0, i32 0
  br label %12

8:                                                ; preds = %2
  %9 = getelementptr inbounds %struct.ssl_st, %struct.ssl_st* %0, i64 0, i32 8
  %10 = load %"struct.bssl::SSL3_STATE"*, %"struct.bssl::SSL3_STATE"** %9, align 8
  %11 = getelementptr inbounds %"struct.bssl::SSL3_STATE", %"struct.bssl::SSL3_STATE"* %10, i64 0, i32 33, i32 0, i32 0, i32 0
  br label %12

12:                                               ; preds = %4, %8
  %13 = phi %"class.bssl::SSLAEADContext"** [ %7, %4 ], [ %11, %8 ]
  %14 = load %"class.bssl::SSLAEADContext"*, %"class.bssl::SSLAEADContext"** %13, align 8
  %15 = tail call i64 @_ZNK4bssl14SSLAEADContext16ExplicitNonceLenEv(%"class.bssl::SSLAEADContext"* %14) #3
  %16 = add i64 %15, 13
  ret i64 %16
}

declare i64 @_ZNK4bssl14SSLAEADContext16ExplicitNonceLenEv(%"class.bssl::SSLAEADContext"*) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN4bssl16dtls_seal_recordEP6ssl_stPhPmmhPKhmNS_17dtls1_use_epoch_tE(%struct.ssl_st*, i8*, i64* nocapture, i64, i8 zeroext, i8*, i64, i32) local_unnamed_addr #0 {
  %9 = alloca i64, align 8
  %10 = alloca i64, align 8
  %11 = alloca %"class.bssl::Span.1", align 8
  %12 = icmp eq i32 %7, 0
  br i1 %12, label %13, label %17

13:                                               ; preds = %8
  %14 = getelementptr inbounds %struct.ssl_st, %struct.ssl_st* %0, i64 0, i32 9
  %15 = load %"struct.bssl::DTLS1_STATE"*, %"struct.bssl::DTLS1_STATE"** %14, align 8
  %16 = getelementptr inbounds %"struct.bssl::DTLS1_STATE", %"struct.bssl::DTLS1_STATE"* %15, i64 0, i32 12, i32 0, i32 0, i32 0
  br label %21

17:                                               ; preds = %8
  %18 = getelementptr inbounds %struct.ssl_st, %struct.ssl_st* %0, i64 0, i32 8
  %19 = load %"struct.bssl::SSL3_STATE"*, %"struct.bssl::SSL3_STATE"** %18, align 8
  %20 = getelementptr inbounds %"struct.bssl::SSL3_STATE", %"struct.bssl::SSL3_STATE"* %19, i64 0, i32 33, i32 0, i32 0, i32 0
  br label %21

21:                                               ; preds = %13, %17
  %22 = phi %"class.bssl::SSLAEADContext"** [ %16, %13 ], [ %20, %17 ]
  %23 = load %"class.bssl::SSLAEADContext"*, %"class.bssl::SSLAEADContext"** %22, align 8
  %24 = tail call i64 @_ZNK4bssl14SSLAEADContext16ExplicitNonceLenEv(%"class.bssl::SSLAEADContext"* %23) #3
  %25 = add i64 %24, 13
  %26 = ptrtoint i8* %5 to i64
  %27 = ptrtoint i8* %1 to i64
  %28 = add i64 %26, %6
  %29 = icmp ugt i64 %28, %27
  %30 = add i64 %27, %3
  %31 = icmp ugt i64 %30, %26
  %32 = and i1 %31, %29
  br i1 %32, label %33, label %39

33:                                               ; preds = %21
  %34 = icmp ule i64 %25, %3
  %35 = getelementptr inbounds i8, i8* %1, i64 %25
  %36 = icmp eq i8* %35, %5
  %37 = and i1 %34, %36
  br i1 %37, label %39, label %38

38:                                               ; preds = %33
  tail call void @ERR_put_error(i32 16, i32 0, i32 189, i8* getelementptr inbounds ([51 x i8], [51 x i8]* @.str, i64 0, i64 0), i32 300) #3
  br label %99

39:                                               ; preds = %21, %33
  %40 = getelementptr inbounds %struct.ssl_st, %struct.ssl_st* %0, i64 0, i32 9
  %41 = load %"struct.bssl::DTLS1_STATE"*, %"struct.bssl::DTLS1_STATE"** %40, align 8
  %42 = getelementptr inbounds %"struct.bssl::DTLS1_STATE", %"struct.bssl::DTLS1_STATE"* %41, i64 0, i32 5
  %43 = load i16, i16* %42, align 2
  %44 = getelementptr inbounds %struct.ssl_st, %struct.ssl_st* %0, i64 0, i32 8
  %45 = load %"struct.bssl::SSL3_STATE"*, %"struct.bssl::SSL3_STATE"** %44, align 8
  %46 = getelementptr inbounds %"struct.bssl::SSL3_STATE", %"struct.bssl::SSL3_STATE"* %45, i64 0, i32 33, i32 0, i32 0, i32 0
  %47 = getelementptr inbounds %"struct.bssl::DTLS1_STATE", %"struct.bssl::DTLS1_STATE"* %41, i64 0, i32 12, i32 0, i32 0, i32 0
  %48 = zext i1 %12 to i16
  %49 = sub i16 %43, %48
  %50 = select i1 %12, %"class.bssl::SSLAEADContext"** %47, %"class.bssl::SSLAEADContext"** %46
  %51 = load %"class.bssl::SSLAEADContext"*, %"class.bssl::SSLAEADContext"** %50, align 8
  %52 = icmp ult i64 %3, 13
  br i1 %52, label %53, label %54

53:                                               ; preds = %39
  tail call void @ERR_put_error(i32 16, i32 0, i32 121, i8* getelementptr inbounds ([51 x i8], [51 x i8]* @.str, i64 0, i64 0), i32 316) #3
  br label %99

54:                                               ; preds = %39
  %55 = getelementptr inbounds %"struct.bssl::DTLS1_STATE", %"struct.bssl::DTLS1_STATE"* %41, i64 0, i32 10, i64 0
  %56 = getelementptr inbounds %"struct.bssl::SSL3_STATE", %"struct.bssl::SSL3_STATE"* %45, i64 0, i32 1, i64 0
  %57 = select i1 %12, i8* %55, i8* %56
  store i8 %4, i8* %1, align 1
  %58 = load %"struct.bssl::SSL3_STATE"*, %"struct.bssl::SSL3_STATE"** %44, align 8
  %59 = getelementptr inbounds %"struct.bssl::SSL3_STATE", %"struct.bssl::SSL3_STATE"* %58, i64 0, i32 33, i32 0, i32 0, i32 0
  %60 = load %"class.bssl::SSLAEADContext"*, %"class.bssl::SSLAEADContext"** %59, align 8
  %61 = tail call zeroext i16 @_ZNK4bssl14SSLAEADContext13RecordVersionEv(%"class.bssl::SSLAEADContext"* %60) #3
  %62 = lshr i16 %61, 8
  %63 = trunc i16 %62 to i8
  %64 = getelementptr inbounds i8, i8* %1, i64 1
  store i8 %63, i8* %64, align 1
  %65 = trunc i16 %61 to i8
  %66 = getelementptr inbounds i8, i8* %1, i64 2
  store i8 %65, i8* %66, align 1
  %67 = lshr i16 %49, 8
  %68 = trunc i16 %67 to i8
  %69 = getelementptr inbounds i8, i8* %1, i64 3
  store i8 %68, i8* %69, align 1
  %70 = trunc i16 %49 to i8
  %71 = getelementptr inbounds i8, i8* %1, i64 4
  store i8 %70, i8* %71, align 1
  %72 = getelementptr inbounds i8, i8* %1, i64 5
  %73 = getelementptr inbounds i8, i8* %57, i64 2
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %72, i8* align 1 %73, i64 6, i1 false) #3
  %74 = bitcast i64* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %74) #3
  store i64 -6148914691236517206, i64* %9, align 8
  %75 = call zeroext i1 @_ZNK4bssl14SSLAEADContext13CiphertextLenEPmmm(%"class.bssl::SSLAEADContext"* %51, i64* nonnull %9, i64 %6, i64 0) #3
  br i1 %75, label %77, label %76

76:                                               ; preds = %54
  call void @ERR_put_error(i32 16, i32 0, i32 200, i8* getelementptr inbounds ([51 x i8], [51 x i8]* @.str, i64 0, i64 0), i32 332) #3
  br label %97

77:                                               ; preds = %54
  %78 = load i64, i64* %9, align 8
  %79 = lshr i64 %78, 8
  %80 = trunc i64 %79 to i8
  %81 = getelementptr inbounds i8, i8* %1, i64 11
  store i8 %80, i8* %81, align 1
  %82 = trunc i64 %78 to i8
  %83 = getelementptr inbounds i8, i8* %1, i64 12
  store i8 %82, i8* %83, align 1
  %84 = bitcast i64* %10 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %84) #3
  store i64 -6148914691236517206, i64* %10, align 8
  %85 = getelementptr inbounds i8, i8* %1, i64 13
  %86 = add i64 %3, -13
  %87 = getelementptr inbounds %"class.bssl::Span.1", %"class.bssl::Span.1"* %11, i64 0, i32 0
  store i8* %1, i8** %87, align 8
  %88 = getelementptr inbounds %"class.bssl::Span.1", %"class.bssl::Span.1"* %11, i64 0, i32 1
  store i64 13, i64* %88, align 8
  %89 = call zeroext i1 @_ZN4bssl14SSLAEADContext4SealEPhPmmhtPKhNS_4SpanIS3_EES4_m(%"class.bssl::SSLAEADContext"* %51, i8* %85, i64* nonnull %10, i64 %86, i8 zeroext %4, i16 zeroext %61, i8* %69, %"class.bssl::Span.1"* nonnull byval(%"class.bssl::Span.1") align 8 %11, i8* %5, i64 %6) #3
  br i1 %89, label %90, label %95

90:                                               ; preds = %77
  %91 = call zeroext i1 @_ZN4bssl26ssl_record_sequence_updateEPhm(i8* %73, i64 6) #3
  br i1 %91, label %92, label %95

92:                                               ; preds = %90
  %93 = load i64, i64* %9, align 8
  %94 = add i64 %93, 13
  store i64 %94, i64* %2, align 8
  call void @_ZN4bssl19ssl_do_msg_callbackEPK6ssl_stiiNS_4SpanIKhEE(%struct.ssl_st* %0, i32 1, i32 256, i8* %1, i64 13) #3
  br label %95

95:                                               ; preds = %77, %90, %92
  %96 = phi i1 [ true, %92 ], [ false, %90 ], [ false, %77 ]
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %84) #3
  br label %97

97:                                               ; preds = %95, %76
  %98 = phi i1 [ %96, %95 ], [ false, %76 ]
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %74) #3
  br label %99

99:                                               ; preds = %53, %97, %38
  %100 = phi i1 [ false, %38 ], [ false, %53 ], [ %98, %97 ]
  ret i1 %100
}

declare zeroext i1 @_ZNK4bssl14SSLAEADContext13CiphertextLenEPmmm(%"class.bssl::SSLAEADContext"*, i64*, i64, i64) local_unnamed_addr #2

declare zeroext i1 @_ZN4bssl14SSLAEADContext4SealEPhPmmhtPKhNS_4SpanIS3_EES4_m(%"class.bssl::SSLAEADContext"*, i8*, i64*, i64, i8 zeroext, i16 zeroext, i8*, %"class.bssl::Span.1"* byval(%"class.bssl::Span.1") align 8, i8*, i64) local_unnamed_addr #2

declare zeroext i1 @_ZN4bssl26ssl_record_sequence_updateEPhm(i8*, i64) local_unnamed_addr #2

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
