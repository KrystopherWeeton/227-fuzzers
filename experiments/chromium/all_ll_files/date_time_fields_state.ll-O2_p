; ModuleID = '../../third_party/blink/renderer/core/html/forms/date_time_fields_state.cc'
source_filename = "../../third_party/blink/renderer/core/html/forms/date_time_fields_state.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.WTF::String" = type { %class.scoped_refptr }
%class.scoped_refptr = type { %"class.WTF::StringImpl"* }
%"class.WTF::StringImpl" = type { i32, i32, %"struct.std::__1::atomic" }
%"struct.std::__1::atomic" = type { %"struct.std::__1::__atomic_base" }
%"struct.std::__1::__atomic_base" = type { %"struct.std::__1::__atomic_base.0" }
%"struct.std::__1::__atomic_base.0" = type { %"struct.std::__1::__cxx_atomic_impl" }
%"struct.std::__1::__cxx_atomic_impl" = type { %"struct.std::__1::__cxx_atomic_base_impl" }
%"struct.std::__1::__cxx_atomic_base_impl" = type { i32 }
%"class.blink::DateTimeFieldsState" = type { i32, i32, i32, i32, i32, i32, i32, i32, i32 }
%"class.blink::FormControlState" = type { i32, %"class.WTF::Vector" }
%"class.WTF::Vector" = type { %"class.WTF::VectorBuffer" }
%"class.WTF::VectorBuffer" = type { %"class.WTF::VectorBufferBase" }
%"class.WTF::VectorBufferBase" = type { %"class.WTF::String"*, i32, i32 }
%"class.WTF::StringView" = type <{ %"class.WTF::StringImpl"*, i8*, i32, [4 x i8] }>
%"class.WTF::IntegerToStringConverter" = type <{ [12 x i8], [4 x i8], i8*, i32, [4 x i8] }>
%"class.logging::CheckOpResult" = type { i8* }
%"class.logging::CheckError" = type { %"class.logging::LogMessage"* }
%"class.logging::LogMessage" = type { i32 (...)**, i32, %"class.std::__1::basic_ostringstream", i64, i8*, i32, %"class.base::ScopedClearLastErrorBase" }
%"class.std::__1::basic_ostringstream" = type { %"class.std::__1::basic_ostream.base", %"class.std::__1::basic_stringbuf", %"class.std::__1::basic_ios.base" }
%"class.std::__1::basic_ostream.base" = type { i32 (...)** }
%"class.std::__1::basic_stringbuf" = type <{ %"class.std::__1::basic_streambuf", %"class.std::__1::basic_string", i8*, i32, [4 x i8] }>
%"class.std::__1::basic_streambuf" = type { i32 (...)**, %"class.std::__1::locale", i8*, i8*, i8*, i8*, i8*, i8* }
%"class.std::__1::locale" = type { %"class.std::__1::locale::__imp"* }
%"class.std::__1::locale::__imp" = type opaque
%"class.std::__1::basic_string" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" = type { %union.anon }
%union.anon = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" = type { i8*, i64, i64 }
%"class.std::__1::basic_ios.base" = type <{ %"class.std::__1::ios_base", %"class.std::__1::basic_ostream"*, i32 }>
%"class.std::__1::ios_base" = type { i32 (...)**, i32, i64, i64, i32, i32, i8*, i8*, void (i32, %"class.std::__1::ios_base"*, i32)**, i32*, i64, i64, i64*, i64, i64, i8**, i64, i64 }
%"class.std::__1::basic_ostream" = type { i32 (...)**, %"class.std::__1::basic_ios.base" }
%"class.base::ScopedClearLastErrorBase" = type { i32 }

$_ZNK3WTF6VectorINS_6StringELj0ENS_18PartitionAllocatorEE2atEj = comdat any

$_ZN3WTF6VectorINS_6StringELj0ENS_18PartitionAllocatorEE14AppendSlowCaseIRKS1_EEvOT_ = comdat any

$_ZN3WTF18PartitionAllocator13QuantizedSizeINS_6StringEEEmm = comdat any

@_ZN5blink19DateTimeFieldsState11kEmptyValueE = hidden local_unnamed_addr constant i32 -1, align 4
@_ZN3WTF14g_empty_stringE = external local_unnamed_addr constant %"class.WTF::String"*, align 8
@.str = private unnamed_addr constant [2 x i8] c"A\00", align 1
@.str.1 = private unnamed_addr constant [2 x i8] c"P\00", align 1
@.str.2 = private unnamed_addr constant [11 x i8] c"i < size()\00", align 1
@.str.3 = private unnamed_addr constant [55 x i8] c"../../third_party/blink/renderer/platform/wtf/vector.h\00", align 1
@_ZN3WTF10StringImpl6empty_E = external local_unnamed_addr global %"class.WTF::StringImpl"*, align 8
@.str.5 = private unnamed_addr constant [44 x i8] c"count <= MaxElementCountInBackingStore<T>()\00", align 1
@.str.6 = private unnamed_addr constant [78 x i8] c"../../third_party/blink/renderer/platform/wtf/allocator/partition_allocator.h\00", align 1
@__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameINS_6StringEEEPKcv = private unnamed_addr constant [59 x i8] c"const char *WTF::GetStringWithTypeName() [T = WTF::String]\00", align 1

@_ZN5blink19DateTimeFieldsStateC1Ev = hidden unnamed_addr alias void (%"class.blink::DateTimeFieldsState"*), void (%"class.blink::DateTimeFieldsState"*)* @_ZN5blink19DateTimeFieldsStateC2Ev

; Function Attrs: nofree norecurse nounwind ssp uwtable writeonly
define hidden void @_ZN5blink19DateTimeFieldsStateC2Ev(%"class.blink::DateTimeFieldsState"* nocapture) unnamed_addr #0 align 2 {
  %2 = bitcast %"class.blink::DateTimeFieldsState"* %0 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 4 %2, i8 -1, i64 36, i1 false)
  ret void
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden i32 @_ZNK5blink19DateTimeFieldsState6Hour23Ev(%"class.blink::DateTimeFieldsState"* nocapture readonly) local_unnamed_addr #1 align 2 {
  %2 = getelementptr inbounds %"class.blink::DateTimeFieldsState", %"class.blink::DateTimeFieldsState"* %0, i64 0, i32 3
  %3 = load i32, i32* %2, align 4
  %4 = icmp eq i32 %3, -1
  br i1 %4, label %14, label %5

5:                                                ; preds = %1
  %6 = getelementptr inbounds %"class.blink::DateTimeFieldsState", %"class.blink::DateTimeFieldsState"* %0, i64 0, i32 8
  %7 = load i32, i32* %6, align 4
  %8 = icmp eq i32 %7, -1
  br i1 %8, label %14, label %9

9:                                                ; preds = %5
  %10 = urem i32 %3, 12
  %11 = icmp eq i32 %7, 1
  %12 = select i1 %11, i32 12, i32 0
  %13 = add nuw nsw i32 %12, %10
  br label %14

14:                                               ; preds = %5, %1, %9
  %15 = phi i32 [ %13, %9 ], [ -1, %5 ], [ -1, %1 ]
  ret i32 %15
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink19DateTimeFieldsState23RestoreFormControlStateERKNS_16FormControlStateE(%"class.blink::DateTimeFieldsState"* noalias nocapture sret, %"class.blink::FormControlState"* dereferenceable(24)) local_unnamed_addr #2 align 2 {
  %3 = alloca i8, align 1
  %4 = alloca i8, align 1
  %5 = alloca i8, align 1
  %6 = alloca i8, align 1
  %7 = alloca i8, align 1
  %8 = alloca i8, align 1
  %9 = alloca i8, align 1
  %10 = alloca i8, align 1
  %11 = alloca %"class.WTF::StringView", align 8
  %12 = alloca %"class.WTF::StringView", align 8
  %13 = alloca %"class.WTF::StringView", align 8
  %14 = alloca %"class.WTF::StringView", align 8
  %15 = bitcast %"class.blink::DateTimeFieldsState"* %0 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 4 %15, i8 -1, i64 36, i1 false) #9
  %16 = getelementptr inbounds %"class.blink::FormControlState", %"class.blink::FormControlState"* %1, i64 0, i32 1, i32 0, i32 0, i32 2
  %17 = load i32, i32* %16, align 4
  %18 = icmp eq i32 %17, 0
  br i1 %18, label %19, label %21

19:                                               ; preds = %2
  %20 = getelementptr inbounds %"class.blink::DateTimeFieldsState", %"class.blink::DateTimeFieldsState"* %0, i64 0, i32 0
  store i32 -1, i32* %20, align 4
  br label %31

21:                                               ; preds = %2
  call void @llvm.lifetime.start.p0i8(i64 1, i8* nonnull %10) #9
  store i8 -86, i8* %10, align 1
  %22 = getelementptr inbounds %"class.blink::FormControlState", %"class.blink::FormControlState"* %1, i64 0, i32 1
  %23 = tail call dereferenceable(8) %"class.WTF::String"* @_ZNK3WTF6VectorINS_6StringELj0ENS_18PartitionAllocatorEE2atEj(%"class.WTF::Vector"* %22, i32 0) #9
  %24 = call i32 @_ZNK3WTF6String6ToUIntEPb(%"class.WTF::String"* %23, i8* nonnull %10) #9
  %25 = load i8, i8* %10, align 1, !range !2
  %26 = icmp eq i8 %25, 0
  %27 = select i1 %26, i32 -1, i32 %24
  call void @llvm.lifetime.end.p0i8(i64 1, i8* nonnull %10) #9
  %28 = load i32, i32* %16, align 4
  %29 = getelementptr inbounds %"class.blink::DateTimeFieldsState", %"class.blink::DateTimeFieldsState"* %0, i64 0, i32 0
  store i32 %27, i32* %29, align 4
  %30 = icmp ugt i32 %28, 1
  br i1 %30, label %34, label %31

31:                                               ; preds = %21, %19
  %32 = getelementptr inbounds %"class.blink::DateTimeFieldsState", %"class.blink::DateTimeFieldsState"* %0, i64 0, i32 1
  store i32 -1, i32* %32, align 4
  %33 = getelementptr inbounds %"class.blink::DateTimeFieldsState", %"class.blink::DateTimeFieldsState"* %0, i64 0, i32 2
  store i32 -1, i32* %33, align 4
  br label %55

34:                                               ; preds = %21
  call void @llvm.lifetime.start.p0i8(i64 1, i8* nonnull %9) #9
  store i8 -86, i8* %9, align 1
  %35 = call dereferenceable(8) %"class.WTF::String"* @_ZNK3WTF6VectorINS_6StringELj0ENS_18PartitionAllocatorEE2atEj(%"class.WTF::Vector"* %22, i32 1) #9
  %36 = call i32 @_ZNK3WTF6String6ToUIntEPb(%"class.WTF::String"* %35, i8* nonnull %9) #9
  %37 = load i8, i8* %9, align 1, !range !2
  %38 = icmp eq i8 %37, 0
  %39 = select i1 %38, i32 -1, i32 %36
  call void @llvm.lifetime.end.p0i8(i64 1, i8* nonnull %9) #9
  %40 = load i32, i32* %16, align 4
  %41 = getelementptr inbounds %"class.blink::DateTimeFieldsState", %"class.blink::DateTimeFieldsState"* %0, i64 0, i32 1
  store i32 %39, i32* %41, align 4
  %42 = icmp ugt i32 %40, 2
  br i1 %42, label %46, label %43

43:                                               ; preds = %34
  %44 = getelementptr inbounds %"class.blink::DateTimeFieldsState", %"class.blink::DateTimeFieldsState"* %0, i64 0, i32 2
  store i32 -1, i32* %44, align 4
  %45 = getelementptr inbounds %"class.blink::DateTimeFieldsState", %"class.blink::DateTimeFieldsState"* %0, i64 0, i32 3
  store i32 -1, i32* %45, align 4
  br label %68

46:                                               ; preds = %34
  call void @llvm.lifetime.start.p0i8(i64 1, i8* nonnull %8) #9
  store i8 -86, i8* %8, align 1
  %47 = call dereferenceable(8) %"class.WTF::String"* @_ZNK3WTF6VectorINS_6StringELj0ENS_18PartitionAllocatorEE2atEj(%"class.WTF::Vector"* %22, i32 2) #9
  %48 = call i32 @_ZNK3WTF6String6ToUIntEPb(%"class.WTF::String"* %47, i8* nonnull %8) #9
  %49 = load i8, i8* %8, align 1, !range !2
  %50 = icmp eq i8 %49, 0
  %51 = select i1 %50, i32 -1, i32 %48
  call void @llvm.lifetime.end.p0i8(i64 1, i8* nonnull %8) #9
  %52 = load i32, i32* %16, align 4
  %53 = getelementptr inbounds %"class.blink::DateTimeFieldsState", %"class.blink::DateTimeFieldsState"* %0, i64 0, i32 2
  store i32 %51, i32* %53, align 4
  %54 = icmp ugt i32 %52, 3
  br i1 %54, label %58, label %55

55:                                               ; preds = %46, %31
  %56 = getelementptr inbounds %"class.blink::DateTimeFieldsState", %"class.blink::DateTimeFieldsState"* %0, i64 0, i32 3
  store i32 -1, i32* %56, align 4
  %57 = getelementptr inbounds %"class.blink::DateTimeFieldsState", %"class.blink::DateTimeFieldsState"* %0, i64 0, i32 4
  store i32 -1, i32* %57, align 4
  br label %81

58:                                               ; preds = %46
  call void @llvm.lifetime.start.p0i8(i64 1, i8* nonnull %7) #9
  store i8 -86, i8* %7, align 1
  %59 = getelementptr inbounds %"class.blink::FormControlState", %"class.blink::FormControlState"* %1, i64 0, i32 1
  %60 = call dereferenceable(8) %"class.WTF::String"* @_ZNK3WTF6VectorINS_6StringELj0ENS_18PartitionAllocatorEE2atEj(%"class.WTF::Vector"* %59, i32 3) #9
  %61 = call i32 @_ZNK3WTF6String6ToUIntEPb(%"class.WTF::String"* %60, i8* nonnull %7) #9
  %62 = load i8, i8* %7, align 1, !range !2
  %63 = icmp eq i8 %62, 0
  %64 = select i1 %63, i32 -1, i32 %61
  call void @llvm.lifetime.end.p0i8(i64 1, i8* nonnull %7) #9
  %65 = load i32, i32* %16, align 4
  %66 = getelementptr inbounds %"class.blink::DateTimeFieldsState", %"class.blink::DateTimeFieldsState"* %0, i64 0, i32 3
  store i32 %64, i32* %66, align 4
  %67 = icmp ugt i32 %65, 4
  br i1 %67, label %71, label %68

68:                                               ; preds = %58, %43
  %69 = getelementptr inbounds %"class.blink::DateTimeFieldsState", %"class.blink::DateTimeFieldsState"* %0, i64 0, i32 4
  store i32 -1, i32* %69, align 4
  %70 = getelementptr inbounds %"class.blink::DateTimeFieldsState", %"class.blink::DateTimeFieldsState"* %0, i64 0, i32 5
  store i32 -1, i32* %70, align 4
  br label %94

71:                                               ; preds = %58
  call void @llvm.lifetime.start.p0i8(i64 1, i8* nonnull %6) #9
  store i8 -86, i8* %6, align 1
  %72 = getelementptr inbounds %"class.blink::FormControlState", %"class.blink::FormControlState"* %1, i64 0, i32 1
  %73 = call dereferenceable(8) %"class.WTF::String"* @_ZNK3WTF6VectorINS_6StringELj0ENS_18PartitionAllocatorEE2atEj(%"class.WTF::Vector"* %72, i32 4) #9
  %74 = call i32 @_ZNK3WTF6String6ToUIntEPb(%"class.WTF::String"* %73, i8* nonnull %6) #9
  %75 = load i8, i8* %6, align 1, !range !2
  %76 = icmp eq i8 %75, 0
  %77 = select i1 %76, i32 -1, i32 %74
  call void @llvm.lifetime.end.p0i8(i64 1, i8* nonnull %6) #9
  %78 = load i32, i32* %16, align 4
  %79 = getelementptr inbounds %"class.blink::DateTimeFieldsState", %"class.blink::DateTimeFieldsState"* %0, i64 0, i32 4
  store i32 %77, i32* %79, align 4
  %80 = icmp ugt i32 %78, 5
  br i1 %80, label %84, label %81

81:                                               ; preds = %71, %55
  %82 = getelementptr inbounds %"class.blink::DateTimeFieldsState", %"class.blink::DateTimeFieldsState"* %0, i64 0, i32 5
  store i32 -1, i32* %82, align 4
  %83 = getelementptr inbounds %"class.blink::DateTimeFieldsState", %"class.blink::DateTimeFieldsState"* %0, i64 0, i32 6
  store i32 -1, i32* %83, align 4
  br label %107

84:                                               ; preds = %71
  call void @llvm.lifetime.start.p0i8(i64 1, i8* nonnull %5) #9
  store i8 -86, i8* %5, align 1
  %85 = getelementptr inbounds %"class.blink::FormControlState", %"class.blink::FormControlState"* %1, i64 0, i32 1
  %86 = call dereferenceable(8) %"class.WTF::String"* @_ZNK3WTF6VectorINS_6StringELj0ENS_18PartitionAllocatorEE2atEj(%"class.WTF::Vector"* %85, i32 5) #9
  %87 = call i32 @_ZNK3WTF6String6ToUIntEPb(%"class.WTF::String"* %86, i8* nonnull %5) #9
  %88 = load i8, i8* %5, align 1, !range !2
  %89 = icmp eq i8 %88, 0
  %90 = select i1 %89, i32 -1, i32 %87
  call void @llvm.lifetime.end.p0i8(i64 1, i8* nonnull %5) #9
  %91 = load i32, i32* %16, align 4
  %92 = getelementptr inbounds %"class.blink::DateTimeFieldsState", %"class.blink::DateTimeFieldsState"* %0, i64 0, i32 5
  store i32 %90, i32* %92, align 4
  %93 = icmp ugt i32 %91, 6
  br i1 %93, label %97, label %94

94:                                               ; preds = %84, %68
  %95 = getelementptr inbounds %"class.blink::DateTimeFieldsState", %"class.blink::DateTimeFieldsState"* %0, i64 0, i32 6
  store i32 -1, i32* %95, align 4
  %96 = getelementptr inbounds %"class.blink::DateTimeFieldsState", %"class.blink::DateTimeFieldsState"* %0, i64 0, i32 7
  store i32 -1, i32* %96, align 4
  br label %205

97:                                               ; preds = %84
  call void @llvm.lifetime.start.p0i8(i64 1, i8* nonnull %4) #9
  store i8 -86, i8* %4, align 1
  %98 = getelementptr inbounds %"class.blink::FormControlState", %"class.blink::FormControlState"* %1, i64 0, i32 1
  %99 = call dereferenceable(8) %"class.WTF::String"* @_ZNK3WTF6VectorINS_6StringELj0ENS_18PartitionAllocatorEE2atEj(%"class.WTF::Vector"* %98, i32 6) #9
  %100 = call i32 @_ZNK3WTF6String6ToUIntEPb(%"class.WTF::String"* %99, i8* nonnull %4) #9
  %101 = load i8, i8* %4, align 1, !range !2
  %102 = icmp eq i8 %101, 0
  %103 = select i1 %102, i32 -1, i32 %100
  call void @llvm.lifetime.end.p0i8(i64 1, i8* nonnull %4) #9
  %104 = load i32, i32* %16, align 4
  %105 = getelementptr inbounds %"class.blink::DateTimeFieldsState", %"class.blink::DateTimeFieldsState"* %0, i64 0, i32 6
  store i32 %103, i32* %105, align 4
  %106 = icmp ugt i32 %104, 7
  br i1 %106, label %109, label %107

107:                                              ; preds = %81, %97
  %108 = getelementptr inbounds %"class.blink::DateTimeFieldsState", %"class.blink::DateTimeFieldsState"* %0, i64 0, i32 7
  store i32 -1, i32* %108, align 4
  br label %205

109:                                              ; preds = %97
  call void @llvm.lifetime.start.p0i8(i64 1, i8* nonnull %3) #9
  store i8 -86, i8* %3, align 1
  %110 = getelementptr inbounds %"class.blink::FormControlState", %"class.blink::FormControlState"* %1, i64 0, i32 1
  %111 = call dereferenceable(8) %"class.WTF::String"* @_ZNK3WTF6VectorINS_6StringELj0ENS_18PartitionAllocatorEE2atEj(%"class.WTF::Vector"* %110, i32 7) #9
  %112 = call i32 @_ZNK3WTF6String6ToUIntEPb(%"class.WTF::String"* %111, i8* nonnull %3) #9
  %113 = load i8, i8* %3, align 1, !range !2
  %114 = icmp eq i8 %113, 0
  %115 = select i1 %114, i32 -1, i32 %112
  call void @llvm.lifetime.end.p0i8(i64 1, i8* nonnull %3) #9
  %116 = load i32, i32* %16, align 4
  %117 = getelementptr inbounds %"class.blink::DateTimeFieldsState", %"class.blink::DateTimeFieldsState"* %0, i64 0, i32 7
  store i32 %115, i32* %117, align 4
  %118 = icmp ult i32 %116, 9
  br i1 %118, label %205, label %119

119:                                              ; preds = %109
  %120 = getelementptr inbounds %"class.blink::FormControlState", %"class.blink::FormControlState"* %1, i64 0, i32 1
  %121 = call dereferenceable(8) %"class.WTF::String"* @_ZNK3WTF6VectorINS_6StringELj0ENS_18PartitionAllocatorEE2atEj(%"class.WTF::Vector"* %120, i32 8) #9
  %122 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %121, i64 0, i32 0, i32 0
  %123 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %122, align 8
  %124 = icmp eq %"class.WTF::StringImpl"* %123, null
  br i1 %124, label %142, label %125

125:                                              ; preds = %119
  %126 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %123, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %127 = load atomic i32, i32* %126 monotonic, align 4
  %128 = and i32 %127, 2
  %129 = icmp eq i32 %128, 0
  br i1 %129, label %130, label %147

130:                                              ; preds = %125
  %131 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %123, i64 0, i32 0
  %132 = load i32, i32* %131, align 4
  %133 = zext i32 %132 to i33
  %134 = call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %133, i33 1) #9
  %135 = extractvalue { i33, i1 } %134, 1
  %136 = extractvalue { i33, i1 } %134, 0
  %137 = icmp slt i33 %136, 0
  %138 = or i1 %135, %137
  br i1 %138, label %139, label %140, !prof !3

139:                                              ; preds = %130
  call void @llvm.trap() #9
  unreachable

140:                                              ; preds = %130
  %141 = trunc i33 %136 to i32
  store i32 %141, i32* %131, align 4
  br label %147

142:                                              ; preds = %119
  %143 = bitcast %"class.WTF::StringView"* %11 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %143) #9
  %144 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %11, i64 0, i32 1
  store i8* null, i8** %144, align 8
  %145 = load i64, i64* bitcast (%"class.WTF::StringImpl"** @_ZN3WTF10StringImpl6empty_E to i64*), align 8
  %146 = bitcast %"class.WTF::StringView"* %11 to i64*
  store i64 %145, i64* %146, align 8
  br label %156

147:                                              ; preds = %140, %125
  %148 = bitcast %"class.WTF::StringView"* %11 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %148) #9
  %149 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %11, i64 0, i32 0
  store %"class.WTF::StringImpl"* %123, %"class.WTF::StringImpl"** %149, align 8
  %150 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %123, i64 0, i32 1
  %151 = load i32, i32* %150, align 4
  %152 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %123, i64 1
  %153 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %11, i64 0, i32 1
  %154 = bitcast i8** %153 to %"class.WTF::StringImpl"**
  store %"class.WTF::StringImpl"* %152, %"class.WTF::StringImpl"** %154, align 8
  %155 = load i64, i64* bitcast (%"class.WTF::StringImpl"** @_ZN3WTF10StringImpl6empty_E to i64*), align 8
  br label %156

156:                                              ; preds = %147, %142
  %157 = phi i64 [ %155, %147 ], [ %145, %142 ]
  %158 = phi i8* [ %148, %147 ], [ %143, %142 ]
  %159 = phi i32 [ %151, %147 ], [ 0, %142 ]
  %160 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %11, i64 0, i32 2
  store i32 %159, i32* %160, align 8
  %161 = bitcast %"class.WTF::StringView"* %12 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %161) #9
  %162 = bitcast %"class.WTF::StringView"* %12 to i64*
  store i64 %157, i64* %162, align 8
  %163 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %12, i64 0, i32 1
  store i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str, i64 0, i64 0), i8** %163, align 8
  %164 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %12, i64 0, i32 2
  store i32 1, i32* %164, align 8
  %165 = call zeroext i1 @_ZN3WTF15EqualStringViewERKNS_10StringViewES2_(%"class.WTF::StringView"* nonnull dereferenceable(24) %11, %"class.WTF::StringView"* nonnull dereferenceable(24) %12) #9
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %161) #9
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %158) #9
  br i1 %165, label %190, label %166

166:                                              ; preds = %156
  %167 = bitcast %"class.WTF::StringView"* %13 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %167) #9
  br i1 %124, label %168, label %172

168:                                              ; preds = %166
  %169 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %13, i64 0, i32 1
  store i8* null, i8** %169, align 8
  %170 = load i64, i64* bitcast (%"class.WTF::StringImpl"** @_ZN3WTF10StringImpl6empty_E to i64*), align 8
  %171 = bitcast %"class.WTF::StringView"* %13 to i64*
  store i64 %170, i64* %171, align 8
  br label %180

172:                                              ; preds = %166
  %173 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %13, i64 0, i32 0
  store %"class.WTF::StringImpl"* %123, %"class.WTF::StringImpl"** %173, align 8
  %174 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %123, i64 0, i32 1
  %175 = load i32, i32* %174, align 4
  %176 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %123, i64 1
  %177 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %13, i64 0, i32 1
  %178 = bitcast i8** %177 to %"class.WTF::StringImpl"**
  store %"class.WTF::StringImpl"* %176, %"class.WTF::StringImpl"** %178, align 8
  %179 = load i64, i64* bitcast (%"class.WTF::StringImpl"** @_ZN3WTF10StringImpl6empty_E to i64*), align 8
  br label %180

180:                                              ; preds = %172, %168
  %181 = phi i64 [ %179, %172 ], [ %170, %168 ]
  %182 = phi i32 [ %175, %172 ], [ 0, %168 ]
  %183 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %13, i64 0, i32 2
  store i32 %182, i32* %183, align 8
  %184 = bitcast %"class.WTF::StringView"* %14 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %184) #9
  %185 = bitcast %"class.WTF::StringView"* %14 to i64*
  store i64 %181, i64* %185, align 8
  %186 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %14, i64 0, i32 1
  store i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0), i8** %186, align 8
  %187 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %14, i64 0, i32 2
  store i32 1, i32* %187, align 8
  %188 = call zeroext i1 @_ZN3WTF15EqualStringViewERKNS_10StringViewES2_(%"class.WTF::StringView"* nonnull dereferenceable(24) %13, %"class.WTF::StringView"* nonnull dereferenceable(24) %14) #9
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %184) #9
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %167) #9
  %189 = select i1 %188, i32 1, i32 -1
  br label %190

190:                                              ; preds = %180, %156
  %191 = phi i32 [ 0, %156 ], [ %189, %180 ]
  br i1 %124, label %205, label %192

192:                                              ; preds = %190
  %193 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %123, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %194 = load atomic i32, i32* %193 monotonic, align 4
  %195 = and i32 %194, 2
  %196 = icmp eq i32 %195, 0
  %197 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %123, i64 0, i32 0
  %198 = load i32, i32* %197, align 4
  br i1 %196, label %199, label %201

199:                                              ; preds = %192
  %200 = add i32 %198, -1
  store i32 %200, i32* %197, align 4
  br label %201

201:                                              ; preds = %199, %192
  %202 = phi i32 [ %200, %199 ], [ %198, %192 ]
  %203 = icmp eq i32 %202, 0
  br i1 %203, label %204, label %205

204:                                              ; preds = %201
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %123) #9
  br label %205

205:                                              ; preds = %94, %107, %109, %190, %201, %204
  %206 = phi i32 [ -1, %109 ], [ %191, %190 ], [ %191, %201 ], [ %191, %204 ], [ -1, %107 ], [ -1, %94 ]
  %207 = getelementptr inbounds %"class.blink::DateTimeFieldsState", %"class.blink::DateTimeFieldsState"* %0, i64 0, i32 8
  store i32 %206, i32* %207, align 4
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #3

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZNK5blink19DateTimeFieldsState20SaveFormControlStateEv(%"class.blink::FormControlState"* noalias sret, %"class.blink::DateTimeFieldsState"* nocapture readonly) local_unnamed_addr #2 align 2 {
  %3 = alloca %"class.WTF::IntegerToStringConverter", align 8
  %4 = alloca %"class.WTF::IntegerToStringConverter", align 8
  %5 = alloca %"class.WTF::IntegerToStringConverter", align 8
  %6 = alloca %"class.WTF::IntegerToStringConverter", align 8
  %7 = alloca %"class.WTF::IntegerToStringConverter", align 8
  %8 = alloca %"class.WTF::IntegerToStringConverter", align 8
  %9 = alloca %"class.WTF::IntegerToStringConverter", align 8
  %10 = alloca %"class.WTF::IntegerToStringConverter", align 8
  %11 = alloca %"class.WTF::String", align 8
  %12 = alloca %"class.WTF::String", align 8
  %13 = alloca %"class.WTF::String", align 8
  %14 = alloca %"class.WTF::String", align 8
  %15 = alloca %"class.WTF::String", align 8
  %16 = alloca %"class.WTF::String", align 8
  %17 = alloca %"class.WTF::String", align 8
  %18 = alloca %"class.WTF::String", align 8
  %19 = alloca %"class.WTF::String", align 8
  %20 = bitcast %"class.blink::FormControlState"* %0 to i64*
  store i64 -6148914691236517206, i64* %20, align 8
  %21 = getelementptr inbounds %"class.blink::FormControlState", %"class.blink::FormControlState"* %0, i64 0, i32 0
  store i32 0, i32* %21, align 8
  %22 = getelementptr inbounds %"class.blink::FormControlState", %"class.blink::FormControlState"* %0, i64 0, i32 1
  %23 = bitcast %"class.WTF::Vector"* %22 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %23, i8 0, i64 16, i1 false) #9
  %24 = bitcast %"class.WTF::String"* %11 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %24) #9
  %25 = getelementptr inbounds %"class.blink::DateTimeFieldsState", %"class.blink::DateTimeFieldsState"* %1, i64 0, i32 0
  %26 = load i32, i32* %25, align 4
  %27 = icmp eq i32 %26, -1
  br i1 %27, label %76, label %28

28:                                               ; preds = %2
  %29 = getelementptr inbounds %"class.WTF::IntegerToStringConverter", %"class.WTF::IntegerToStringConverter"* %10, i64 0, i32 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %29) #9
  %30 = getelementptr inbounds %"class.WTF::IntegerToStringConverter", %"class.WTF::IntegerToStringConverter"* %10, i64 0, i32 0, i64 11
  %31 = getelementptr inbounds %"class.WTF::IntegerToStringConverter", %"class.WTF::IntegerToStringConverter"* %10, i64 0, i32 2
  %32 = getelementptr inbounds %"class.WTF::IntegerToStringConverter", %"class.WTF::IntegerToStringConverter"* %10, i64 0, i32 3
  %33 = getelementptr inbounds %"class.WTF::IntegerToStringConverter", %"class.WTF::IntegerToStringConverter"* %10, i64 0, i32 0, i64 12
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %29, i8 -86, i64 32, i1 false) #9
  store i8* %30, i8** %31, align 8
  %34 = urem i32 %26, 10
  %35 = udiv i32 %26, 10
  %36 = trunc i32 %34 to i8
  %37 = or i8 %36, 48
  store i8 %37, i8* %30, align 1
  %38 = icmp ugt i32 %26, 9
  br i1 %38, label %39, label %54

39:                                               ; preds = %28
  %40 = getelementptr inbounds %"class.WTF::IntegerToStringConverter", %"class.WTF::IntegerToStringConverter"* %10, i64 0, i32 0, i64 10
  store i8* %40, i8** %31, align 8
  %41 = urem i32 %35, 10
  %42 = trunc i32 %41 to i8
  %43 = or i8 %42, 48
  store i8 %43, i8* %40, align 2
  %44 = icmp ugt i32 %26, 99
  br i1 %44, label %45, label %52

45:                                               ; preds = %39
  %46 = udiv i32 %26, 100
  %47 = getelementptr inbounds %"class.WTF::IntegerToStringConverter", %"class.WTF::IntegerToStringConverter"* %10, i64 0, i32 0, i64 9
  store i8* %47, i8** %31, align 8
  %48 = urem i32 %46, 10
  %49 = trunc i32 %48 to i8
  %50 = or i8 %49, 48
  store i8 %50, i8* %47, align 1
  %51 = icmp ugt i32 %26, 999
  br i1 %51, label %56, label %65

52:                                               ; preds = %39
  %53 = ptrtoint i8* %40 to i64
  br label %68

54:                                               ; preds = %28
  %55 = ptrtoint i8* %30 to i64
  br label %68

56:                                               ; preds = %45, %56
  %57 = phi i32 [ %59, %56 ], [ %46, %45 ]
  %58 = load i8*, i8** %31, align 8
  %59 = udiv i32 %57, 10
  %60 = getelementptr inbounds i8, i8* %58, i64 -1
  store i8* %60, i8** %31, align 8
  %61 = urem i32 %59, 10
  %62 = trunc i32 %61 to i8
  %63 = or i8 %62, 48
  store i8 %63, i8* %60, align 1
  %64 = icmp ugt i32 %57, 99
  br i1 %64, label %56, label %65

65:                                               ; preds = %56, %45
  %66 = bitcast i8** %31 to i64*
  %67 = load i64, i64* %66, align 8
  br label %68

68:                                               ; preds = %65, %52, %54
  %69 = phi i64 [ %55, %54 ], [ %67, %65 ], [ %53, %52 ]
  %70 = ptrtoint i8* %33 to i64
  %71 = sub i64 %70, %69
  %72 = trunc i64 %71 to i32
  store i32 %72, i32* %32, align 8
  %73 = inttoptr i64 %69 to i8*
  %74 = call %"class.WTF::StringImpl"* @_ZN3WTF10StringImpl6CreateEPKhj(i8* %73, i32 %72) #9
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %29) #9
  %75 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %11, i64 0, i32 0, i32 0
  store %"class.WTF::StringImpl"* %74, %"class.WTF::StringImpl"** %75, align 8
  br label %99

76:                                               ; preds = %2
  %77 = load %"class.WTF::String"*, %"class.WTF::String"** @_ZN3WTF14g_empty_stringE, align 8
  %78 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %77, i64 0, i32 0, i32 0
  %79 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %78, align 8
  %80 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %11, i64 0, i32 0, i32 0
  store %"class.WTF::StringImpl"* %79, %"class.WTF::StringImpl"** %80, align 8
  %81 = icmp eq %"class.WTF::StringImpl"* %79, null
  br i1 %81, label %99, label %82

82:                                               ; preds = %76
  %83 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %79, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %84 = load atomic i32, i32* %83 monotonic, align 4
  %85 = and i32 %84, 2
  %86 = icmp eq i32 %85, 0
  br i1 %86, label %87, label %99

87:                                               ; preds = %82
  %88 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %79, i64 0, i32 0
  %89 = load i32, i32* %88, align 4
  %90 = zext i32 %89 to i33
  %91 = tail call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %90, i33 1) #9
  %92 = extractvalue { i33, i1 } %91, 1
  %93 = extractvalue { i33, i1 } %91, 0
  %94 = icmp slt i33 %93, 0
  %95 = or i1 %92, %94
  br i1 %95, label %96, label %97, !prof !3

96:                                               ; preds = %87
  tail call void @llvm.trap() #9
  unreachable

97:                                               ; preds = %87
  %98 = trunc i33 %93 to i32
  store i32 %98, i32* %88, align 4
  br label %99

99:                                               ; preds = %97, %82, %76, %68
  store i32 1, i32* %21, align 8
  %100 = getelementptr inbounds %"class.blink::FormControlState", %"class.blink::FormControlState"* %0, i64 0, i32 1, i32 0, i32 0, i32 2
  %101 = load i32, i32* %100, align 4
  %102 = getelementptr inbounds %"class.blink::FormControlState", %"class.blink::FormControlState"* %0, i64 0, i32 1, i32 0, i32 0, i32 1
  %103 = load i32, i32* %102, align 8
  %104 = icmp eq i32 %101, %103
  br i1 %104, label %133, label %105, !prof !3

105:                                              ; preds = %99
  %106 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %22, i64 0, i32 0, i32 0, i32 0
  %107 = load %"class.WTF::String"*, %"class.WTF::String"** %106, align 8
  %108 = zext i32 %101 to i64
  %109 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %11, i64 0, i32 0, i32 0
  %110 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %109, align 8
  %111 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %107, i64 %108, i32 0, i32 0
  store %"class.WTF::StringImpl"* %110, %"class.WTF::StringImpl"** %111, align 8
  %112 = icmp eq %"class.WTF::StringImpl"* %110, null
  br i1 %112, label %130, label %113

113:                                              ; preds = %105
  %114 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %110, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %115 = load atomic i32, i32* %114 monotonic, align 4
  %116 = and i32 %115, 2
  %117 = icmp eq i32 %116, 0
  br i1 %117, label %118, label %130

118:                                              ; preds = %113
  %119 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %110, i64 0, i32 0
  %120 = load i32, i32* %119, align 4
  %121 = zext i32 %120 to i33
  %122 = call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %121, i33 1) #9
  %123 = extractvalue { i33, i1 } %122, 1
  %124 = extractvalue { i33, i1 } %122, 0
  %125 = icmp slt i33 %124, 0
  %126 = or i1 %123, %125
  br i1 %126, label %127, label %128, !prof !3

127:                                              ; preds = %118
  call void @llvm.trap() #9
  unreachable

128:                                              ; preds = %118
  %129 = trunc i33 %124 to i32
  store i32 %129, i32* %119, align 4
  br label %130

130:                                              ; preds = %128, %113, %105
  %131 = load i32, i32* %100, align 4
  %132 = add i32 %131, 1
  store i32 %132, i32* %100, align 4
  br label %134

133:                                              ; preds = %99
  call void @_ZN3WTF6VectorINS_6StringELj0ENS_18PartitionAllocatorEE14AppendSlowCaseIRKS1_EEvOT_(%"class.WTF::Vector"* %22, %"class.WTF::String"* nonnull dereferenceable(8) %11) #9
  br label %134

134:                                              ; preds = %130, %133
  %135 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %11, i64 0, i32 0, i32 0
  %136 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %135, align 8
  %137 = icmp eq %"class.WTF::StringImpl"* %136, null
  br i1 %137, label %151, label %138

138:                                              ; preds = %134
  %139 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %136, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %140 = load atomic i32, i32* %139 monotonic, align 4
  %141 = and i32 %140, 2
  %142 = icmp eq i32 %141, 0
  %143 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %136, i64 0, i32 0
  %144 = load i32, i32* %143, align 4
  br i1 %142, label %145, label %147

145:                                              ; preds = %138
  %146 = add i32 %144, -1
  store i32 %146, i32* %143, align 4
  br label %147

147:                                              ; preds = %145, %138
  %148 = phi i32 [ %146, %145 ], [ %144, %138 ]
  %149 = icmp eq i32 %148, 0
  br i1 %149, label %150, label %151

150:                                              ; preds = %147
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %136) #9
  br label %151

151:                                              ; preds = %134, %147, %150
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %24) #9
  %152 = bitcast %"class.WTF::String"* %12 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %152) #9
  %153 = getelementptr inbounds %"class.blink::DateTimeFieldsState", %"class.blink::DateTimeFieldsState"* %1, i64 0, i32 1
  %154 = load i32, i32* %153, align 4
  %155 = icmp eq i32 %154, -1
  br i1 %155, label %204, label %156

156:                                              ; preds = %151
  %157 = getelementptr inbounds %"class.WTF::IntegerToStringConverter", %"class.WTF::IntegerToStringConverter"* %9, i64 0, i32 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %157) #9
  %158 = getelementptr inbounds %"class.WTF::IntegerToStringConverter", %"class.WTF::IntegerToStringConverter"* %9, i64 0, i32 0, i64 11
  %159 = getelementptr inbounds %"class.WTF::IntegerToStringConverter", %"class.WTF::IntegerToStringConverter"* %9, i64 0, i32 2
  %160 = getelementptr inbounds %"class.WTF::IntegerToStringConverter", %"class.WTF::IntegerToStringConverter"* %9, i64 0, i32 3
  %161 = getelementptr inbounds %"class.WTF::IntegerToStringConverter", %"class.WTF::IntegerToStringConverter"* %9, i64 0, i32 0, i64 12
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %157, i8 -86, i64 32, i1 false) #9
  store i8* %158, i8** %159, align 8
  %162 = urem i32 %154, 10
  %163 = udiv i32 %154, 10
  %164 = trunc i32 %162 to i8
  %165 = or i8 %164, 48
  store i8 %165, i8* %158, align 1
  %166 = icmp ugt i32 %154, 9
  br i1 %166, label %167, label %182

167:                                              ; preds = %156
  %168 = getelementptr inbounds %"class.WTF::IntegerToStringConverter", %"class.WTF::IntegerToStringConverter"* %9, i64 0, i32 0, i64 10
  store i8* %168, i8** %159, align 8
  %169 = urem i32 %163, 10
  %170 = trunc i32 %169 to i8
  %171 = or i8 %170, 48
  store i8 %171, i8* %168, align 2
  %172 = icmp ugt i32 %154, 99
  br i1 %172, label %173, label %180

173:                                              ; preds = %167
  %174 = udiv i32 %154, 100
  %175 = getelementptr inbounds %"class.WTF::IntegerToStringConverter", %"class.WTF::IntegerToStringConverter"* %9, i64 0, i32 0, i64 9
  store i8* %175, i8** %159, align 8
  %176 = urem i32 %174, 10
  %177 = trunc i32 %176 to i8
  %178 = or i8 %177, 48
  store i8 %178, i8* %175, align 1
  %179 = icmp ugt i32 %154, 999
  br i1 %179, label %184, label %193

180:                                              ; preds = %167
  %181 = ptrtoint i8* %168 to i64
  br label %196

182:                                              ; preds = %156
  %183 = ptrtoint i8* %158 to i64
  br label %196

184:                                              ; preds = %173, %184
  %185 = phi i32 [ %187, %184 ], [ %174, %173 ]
  %186 = load i8*, i8** %159, align 8
  %187 = udiv i32 %185, 10
  %188 = getelementptr inbounds i8, i8* %186, i64 -1
  store i8* %188, i8** %159, align 8
  %189 = urem i32 %187, 10
  %190 = trunc i32 %189 to i8
  %191 = or i8 %190, 48
  store i8 %191, i8* %188, align 1
  %192 = icmp ugt i32 %185, 99
  br i1 %192, label %184, label %193

193:                                              ; preds = %184, %173
  %194 = bitcast i8** %159 to i64*
  %195 = load i64, i64* %194, align 8
  br label %196

196:                                              ; preds = %193, %180, %182
  %197 = phi i64 [ %183, %182 ], [ %195, %193 ], [ %181, %180 ]
  %198 = ptrtoint i8* %161 to i64
  %199 = sub i64 %198, %197
  %200 = trunc i64 %199 to i32
  store i32 %200, i32* %160, align 8
  %201 = inttoptr i64 %197 to i8*
  %202 = call %"class.WTF::StringImpl"* @_ZN3WTF10StringImpl6CreateEPKhj(i8* %201, i32 %200) #9
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %157) #9
  %203 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %12, i64 0, i32 0, i32 0
  store %"class.WTF::StringImpl"* %202, %"class.WTF::StringImpl"** %203, align 8
  br label %227

204:                                              ; preds = %151
  %205 = load %"class.WTF::String"*, %"class.WTF::String"** @_ZN3WTF14g_empty_stringE, align 8
  %206 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %205, i64 0, i32 0, i32 0
  %207 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %206, align 8
  %208 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %12, i64 0, i32 0, i32 0
  store %"class.WTF::StringImpl"* %207, %"class.WTF::StringImpl"** %208, align 8
  %209 = icmp eq %"class.WTF::StringImpl"* %207, null
  br i1 %209, label %227, label %210

210:                                              ; preds = %204
  %211 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %207, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %212 = load atomic i32, i32* %211 monotonic, align 4
  %213 = and i32 %212, 2
  %214 = icmp eq i32 %213, 0
  br i1 %214, label %215, label %227

215:                                              ; preds = %210
  %216 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %207, i64 0, i32 0
  %217 = load i32, i32* %216, align 4
  %218 = zext i32 %217 to i33
  %219 = call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %218, i33 1) #9
  %220 = extractvalue { i33, i1 } %219, 1
  %221 = extractvalue { i33, i1 } %219, 0
  %222 = icmp slt i33 %221, 0
  %223 = or i1 %220, %222
  br i1 %223, label %224, label %225, !prof !3

224:                                              ; preds = %215
  call void @llvm.trap() #9
  unreachable

225:                                              ; preds = %215
  %226 = trunc i33 %221 to i32
  store i32 %226, i32* %216, align 4
  br label %227

227:                                              ; preds = %225, %210, %204, %196
  store i32 1, i32* %21, align 8
  %228 = load i32, i32* %100, align 4
  %229 = load i32, i32* %102, align 8
  %230 = icmp eq i32 %228, %229
  br i1 %230, label %259, label %231, !prof !3

231:                                              ; preds = %227
  %232 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %22, i64 0, i32 0, i32 0, i32 0
  %233 = load %"class.WTF::String"*, %"class.WTF::String"** %232, align 8
  %234 = zext i32 %228 to i64
  %235 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %12, i64 0, i32 0, i32 0
  %236 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %235, align 8
  %237 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %233, i64 %234, i32 0, i32 0
  store %"class.WTF::StringImpl"* %236, %"class.WTF::StringImpl"** %237, align 8
  %238 = icmp eq %"class.WTF::StringImpl"* %236, null
  br i1 %238, label %256, label %239

239:                                              ; preds = %231
  %240 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %236, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %241 = load atomic i32, i32* %240 monotonic, align 4
  %242 = and i32 %241, 2
  %243 = icmp eq i32 %242, 0
  br i1 %243, label %244, label %256

244:                                              ; preds = %239
  %245 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %236, i64 0, i32 0
  %246 = load i32, i32* %245, align 4
  %247 = zext i32 %246 to i33
  %248 = call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %247, i33 1) #9
  %249 = extractvalue { i33, i1 } %248, 1
  %250 = extractvalue { i33, i1 } %248, 0
  %251 = icmp slt i33 %250, 0
  %252 = or i1 %249, %251
  br i1 %252, label %253, label %254, !prof !3

253:                                              ; preds = %244
  call void @llvm.trap() #9
  unreachable

254:                                              ; preds = %244
  %255 = trunc i33 %250 to i32
  store i32 %255, i32* %245, align 4
  br label %256

256:                                              ; preds = %254, %239, %231
  %257 = load i32, i32* %100, align 4
  %258 = add i32 %257, 1
  store i32 %258, i32* %100, align 4
  br label %260

259:                                              ; preds = %227
  call void @_ZN3WTF6VectorINS_6StringELj0ENS_18PartitionAllocatorEE14AppendSlowCaseIRKS1_EEvOT_(%"class.WTF::Vector"* %22, %"class.WTF::String"* nonnull dereferenceable(8) %12) #9
  br label %260

260:                                              ; preds = %256, %259
  %261 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %12, i64 0, i32 0, i32 0
  %262 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %261, align 8
  %263 = icmp eq %"class.WTF::StringImpl"* %262, null
  br i1 %263, label %277, label %264

264:                                              ; preds = %260
  %265 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %262, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %266 = load atomic i32, i32* %265 monotonic, align 4
  %267 = and i32 %266, 2
  %268 = icmp eq i32 %267, 0
  %269 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %262, i64 0, i32 0
  %270 = load i32, i32* %269, align 4
  br i1 %268, label %271, label %273

271:                                              ; preds = %264
  %272 = add i32 %270, -1
  store i32 %272, i32* %269, align 4
  br label %273

273:                                              ; preds = %271, %264
  %274 = phi i32 [ %272, %271 ], [ %270, %264 ]
  %275 = icmp eq i32 %274, 0
  br i1 %275, label %276, label %277

276:                                              ; preds = %273
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %262) #9
  br label %277

277:                                              ; preds = %260, %273, %276
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %152) #9
  %278 = bitcast %"class.WTF::String"* %13 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %278) #9
  %279 = getelementptr inbounds %"class.blink::DateTimeFieldsState", %"class.blink::DateTimeFieldsState"* %1, i64 0, i32 2
  %280 = load i32, i32* %279, align 4
  %281 = icmp eq i32 %280, -1
  br i1 %281, label %330, label %282

282:                                              ; preds = %277
  %283 = getelementptr inbounds %"class.WTF::IntegerToStringConverter", %"class.WTF::IntegerToStringConverter"* %8, i64 0, i32 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %283) #9
  %284 = getelementptr inbounds %"class.WTF::IntegerToStringConverter", %"class.WTF::IntegerToStringConverter"* %8, i64 0, i32 0, i64 11
  %285 = getelementptr inbounds %"class.WTF::IntegerToStringConverter", %"class.WTF::IntegerToStringConverter"* %8, i64 0, i32 2
  %286 = getelementptr inbounds %"class.WTF::IntegerToStringConverter", %"class.WTF::IntegerToStringConverter"* %8, i64 0, i32 3
  %287 = getelementptr inbounds %"class.WTF::IntegerToStringConverter", %"class.WTF::IntegerToStringConverter"* %8, i64 0, i32 0, i64 12
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %283, i8 -86, i64 32, i1 false) #9
  store i8* %284, i8** %285, align 8
  %288 = urem i32 %280, 10
  %289 = udiv i32 %280, 10
  %290 = trunc i32 %288 to i8
  %291 = or i8 %290, 48
  store i8 %291, i8* %284, align 1
  %292 = icmp ugt i32 %280, 9
  br i1 %292, label %293, label %308

293:                                              ; preds = %282
  %294 = getelementptr inbounds %"class.WTF::IntegerToStringConverter", %"class.WTF::IntegerToStringConverter"* %8, i64 0, i32 0, i64 10
  store i8* %294, i8** %285, align 8
  %295 = urem i32 %289, 10
  %296 = trunc i32 %295 to i8
  %297 = or i8 %296, 48
  store i8 %297, i8* %294, align 2
  %298 = icmp ugt i32 %280, 99
  br i1 %298, label %299, label %306

299:                                              ; preds = %293
  %300 = udiv i32 %280, 100
  %301 = getelementptr inbounds %"class.WTF::IntegerToStringConverter", %"class.WTF::IntegerToStringConverter"* %8, i64 0, i32 0, i64 9
  store i8* %301, i8** %285, align 8
  %302 = urem i32 %300, 10
  %303 = trunc i32 %302 to i8
  %304 = or i8 %303, 48
  store i8 %304, i8* %301, align 1
  %305 = icmp ugt i32 %280, 999
  br i1 %305, label %310, label %319

306:                                              ; preds = %293
  %307 = ptrtoint i8* %294 to i64
  br label %322

308:                                              ; preds = %282
  %309 = ptrtoint i8* %284 to i64
  br label %322

310:                                              ; preds = %299, %310
  %311 = phi i32 [ %313, %310 ], [ %300, %299 ]
  %312 = load i8*, i8** %285, align 8
  %313 = udiv i32 %311, 10
  %314 = getelementptr inbounds i8, i8* %312, i64 -1
  store i8* %314, i8** %285, align 8
  %315 = urem i32 %313, 10
  %316 = trunc i32 %315 to i8
  %317 = or i8 %316, 48
  store i8 %317, i8* %314, align 1
  %318 = icmp ugt i32 %311, 99
  br i1 %318, label %310, label %319

319:                                              ; preds = %310, %299
  %320 = bitcast i8** %285 to i64*
  %321 = load i64, i64* %320, align 8
  br label %322

322:                                              ; preds = %319, %306, %308
  %323 = phi i64 [ %309, %308 ], [ %321, %319 ], [ %307, %306 ]
  %324 = ptrtoint i8* %287 to i64
  %325 = sub i64 %324, %323
  %326 = trunc i64 %325 to i32
  store i32 %326, i32* %286, align 8
  %327 = inttoptr i64 %323 to i8*
  %328 = call %"class.WTF::StringImpl"* @_ZN3WTF10StringImpl6CreateEPKhj(i8* %327, i32 %326) #9
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %283) #9
  %329 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %13, i64 0, i32 0, i32 0
  store %"class.WTF::StringImpl"* %328, %"class.WTF::StringImpl"** %329, align 8
  br label %353

330:                                              ; preds = %277
  %331 = load %"class.WTF::String"*, %"class.WTF::String"** @_ZN3WTF14g_empty_stringE, align 8
  %332 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %331, i64 0, i32 0, i32 0
  %333 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %332, align 8
  %334 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %13, i64 0, i32 0, i32 0
  store %"class.WTF::StringImpl"* %333, %"class.WTF::StringImpl"** %334, align 8
  %335 = icmp eq %"class.WTF::StringImpl"* %333, null
  br i1 %335, label %353, label %336

336:                                              ; preds = %330
  %337 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %333, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %338 = load atomic i32, i32* %337 monotonic, align 4
  %339 = and i32 %338, 2
  %340 = icmp eq i32 %339, 0
  br i1 %340, label %341, label %353

341:                                              ; preds = %336
  %342 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %333, i64 0, i32 0
  %343 = load i32, i32* %342, align 4
  %344 = zext i32 %343 to i33
  %345 = call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %344, i33 1) #9
  %346 = extractvalue { i33, i1 } %345, 1
  %347 = extractvalue { i33, i1 } %345, 0
  %348 = icmp slt i33 %347, 0
  %349 = or i1 %346, %348
  br i1 %349, label %350, label %351, !prof !3

350:                                              ; preds = %341
  call void @llvm.trap() #9
  unreachable

351:                                              ; preds = %341
  %352 = trunc i33 %347 to i32
  store i32 %352, i32* %342, align 4
  br label %353

353:                                              ; preds = %351, %336, %330, %322
  store i32 1, i32* %21, align 8
  %354 = load i32, i32* %100, align 4
  %355 = load i32, i32* %102, align 8
  %356 = icmp eq i32 %354, %355
  br i1 %356, label %385, label %357, !prof !3

357:                                              ; preds = %353
  %358 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %22, i64 0, i32 0, i32 0, i32 0
  %359 = load %"class.WTF::String"*, %"class.WTF::String"** %358, align 8
  %360 = zext i32 %354 to i64
  %361 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %13, i64 0, i32 0, i32 0
  %362 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %361, align 8
  %363 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %359, i64 %360, i32 0, i32 0
  store %"class.WTF::StringImpl"* %362, %"class.WTF::StringImpl"** %363, align 8
  %364 = icmp eq %"class.WTF::StringImpl"* %362, null
  br i1 %364, label %382, label %365

365:                                              ; preds = %357
  %366 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %362, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %367 = load atomic i32, i32* %366 monotonic, align 4
  %368 = and i32 %367, 2
  %369 = icmp eq i32 %368, 0
  br i1 %369, label %370, label %382

370:                                              ; preds = %365
  %371 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %362, i64 0, i32 0
  %372 = load i32, i32* %371, align 4
  %373 = zext i32 %372 to i33
  %374 = call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %373, i33 1) #9
  %375 = extractvalue { i33, i1 } %374, 1
  %376 = extractvalue { i33, i1 } %374, 0
  %377 = icmp slt i33 %376, 0
  %378 = or i1 %375, %377
  br i1 %378, label %379, label %380, !prof !3

379:                                              ; preds = %370
  call void @llvm.trap() #9
  unreachable

380:                                              ; preds = %370
  %381 = trunc i33 %376 to i32
  store i32 %381, i32* %371, align 4
  br label %382

382:                                              ; preds = %380, %365, %357
  %383 = load i32, i32* %100, align 4
  %384 = add i32 %383, 1
  store i32 %384, i32* %100, align 4
  br label %386

385:                                              ; preds = %353
  call void @_ZN3WTF6VectorINS_6StringELj0ENS_18PartitionAllocatorEE14AppendSlowCaseIRKS1_EEvOT_(%"class.WTF::Vector"* %22, %"class.WTF::String"* nonnull dereferenceable(8) %13) #9
  br label %386

386:                                              ; preds = %382, %385
  %387 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %13, i64 0, i32 0, i32 0
  %388 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %387, align 8
  %389 = icmp eq %"class.WTF::StringImpl"* %388, null
  br i1 %389, label %403, label %390

390:                                              ; preds = %386
  %391 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %388, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %392 = load atomic i32, i32* %391 monotonic, align 4
  %393 = and i32 %392, 2
  %394 = icmp eq i32 %393, 0
  %395 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %388, i64 0, i32 0
  %396 = load i32, i32* %395, align 4
  br i1 %394, label %397, label %399

397:                                              ; preds = %390
  %398 = add i32 %396, -1
  store i32 %398, i32* %395, align 4
  br label %399

399:                                              ; preds = %397, %390
  %400 = phi i32 [ %398, %397 ], [ %396, %390 ]
  %401 = icmp eq i32 %400, 0
  br i1 %401, label %402, label %403

402:                                              ; preds = %399
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %388) #9
  br label %403

403:                                              ; preds = %386, %399, %402
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %278) #9
  %404 = bitcast %"class.WTF::String"* %14 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %404) #9
  %405 = getelementptr inbounds %"class.blink::DateTimeFieldsState", %"class.blink::DateTimeFieldsState"* %1, i64 0, i32 3
  %406 = load i32, i32* %405, align 4
  %407 = icmp eq i32 %406, -1
  br i1 %407, label %456, label %408

408:                                              ; preds = %403
  %409 = getelementptr inbounds %"class.WTF::IntegerToStringConverter", %"class.WTF::IntegerToStringConverter"* %6, i64 0, i32 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %409) #9
  %410 = getelementptr inbounds %"class.WTF::IntegerToStringConverter", %"class.WTF::IntegerToStringConverter"* %6, i64 0, i32 0, i64 11
  %411 = getelementptr inbounds %"class.WTF::IntegerToStringConverter", %"class.WTF::IntegerToStringConverter"* %6, i64 0, i32 2
  %412 = getelementptr inbounds %"class.WTF::IntegerToStringConverter", %"class.WTF::IntegerToStringConverter"* %6, i64 0, i32 3
  %413 = getelementptr inbounds %"class.WTF::IntegerToStringConverter", %"class.WTF::IntegerToStringConverter"* %6, i64 0, i32 0, i64 12
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %409, i8 -86, i64 32, i1 false) #9
  store i8* %410, i8** %411, align 8
  %414 = urem i32 %406, 10
  %415 = udiv i32 %406, 10
  %416 = trunc i32 %414 to i8
  %417 = or i8 %416, 48
  store i8 %417, i8* %410, align 1
  %418 = icmp ugt i32 %406, 9
  br i1 %418, label %419, label %434

419:                                              ; preds = %408
  %420 = getelementptr inbounds %"class.WTF::IntegerToStringConverter", %"class.WTF::IntegerToStringConverter"* %6, i64 0, i32 0, i64 10
  store i8* %420, i8** %411, align 8
  %421 = urem i32 %415, 10
  %422 = trunc i32 %421 to i8
  %423 = or i8 %422, 48
  store i8 %423, i8* %420, align 2
  %424 = icmp ugt i32 %406, 99
  br i1 %424, label %425, label %432

425:                                              ; preds = %419
  %426 = udiv i32 %406, 100
  %427 = getelementptr inbounds %"class.WTF::IntegerToStringConverter", %"class.WTF::IntegerToStringConverter"* %6, i64 0, i32 0, i64 9
  store i8* %427, i8** %411, align 8
  %428 = urem i32 %426, 10
  %429 = trunc i32 %428 to i8
  %430 = or i8 %429, 48
  store i8 %430, i8* %427, align 1
  %431 = icmp ugt i32 %406, 999
  br i1 %431, label %436, label %445

432:                                              ; preds = %419
  %433 = ptrtoint i8* %420 to i64
  br label %448

434:                                              ; preds = %408
  %435 = ptrtoint i8* %410 to i64
  br label %448

436:                                              ; preds = %425, %436
  %437 = phi i32 [ %439, %436 ], [ %426, %425 ]
  %438 = load i8*, i8** %411, align 8
  %439 = udiv i32 %437, 10
  %440 = getelementptr inbounds i8, i8* %438, i64 -1
  store i8* %440, i8** %411, align 8
  %441 = urem i32 %439, 10
  %442 = trunc i32 %441 to i8
  %443 = or i8 %442, 48
  store i8 %443, i8* %440, align 1
  %444 = icmp ugt i32 %437, 99
  br i1 %444, label %436, label %445

445:                                              ; preds = %436, %425
  %446 = bitcast i8** %411 to i64*
  %447 = load i64, i64* %446, align 8
  br label %448

448:                                              ; preds = %445, %432, %434
  %449 = phi i64 [ %435, %434 ], [ %447, %445 ], [ %433, %432 ]
  %450 = ptrtoint i8* %413 to i64
  %451 = sub i64 %450, %449
  %452 = trunc i64 %451 to i32
  store i32 %452, i32* %412, align 8
  %453 = inttoptr i64 %449 to i8*
  %454 = call %"class.WTF::StringImpl"* @_ZN3WTF10StringImpl6CreateEPKhj(i8* %453, i32 %452) #9
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %409) #9
  %455 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %14, i64 0, i32 0, i32 0
  store %"class.WTF::StringImpl"* %454, %"class.WTF::StringImpl"** %455, align 8
  br label %479

456:                                              ; preds = %403
  %457 = load %"class.WTF::String"*, %"class.WTF::String"** @_ZN3WTF14g_empty_stringE, align 8
  %458 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %457, i64 0, i32 0, i32 0
  %459 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %458, align 8
  %460 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %14, i64 0, i32 0, i32 0
  store %"class.WTF::StringImpl"* %459, %"class.WTF::StringImpl"** %460, align 8
  %461 = icmp eq %"class.WTF::StringImpl"* %459, null
  br i1 %461, label %479, label %462

462:                                              ; preds = %456
  %463 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %459, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %464 = load atomic i32, i32* %463 monotonic, align 4
  %465 = and i32 %464, 2
  %466 = icmp eq i32 %465, 0
  br i1 %466, label %467, label %479

467:                                              ; preds = %462
  %468 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %459, i64 0, i32 0
  %469 = load i32, i32* %468, align 4
  %470 = zext i32 %469 to i33
  %471 = call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %470, i33 1) #9
  %472 = extractvalue { i33, i1 } %471, 1
  %473 = extractvalue { i33, i1 } %471, 0
  %474 = icmp slt i33 %473, 0
  %475 = or i1 %472, %474
  br i1 %475, label %476, label %477, !prof !3

476:                                              ; preds = %467
  call void @llvm.trap() #9
  unreachable

477:                                              ; preds = %467
  %478 = trunc i33 %473 to i32
  store i32 %478, i32* %468, align 4
  br label %479

479:                                              ; preds = %477, %462, %456, %448
  store i32 1, i32* %21, align 8
  %480 = load i32, i32* %100, align 4
  %481 = load i32, i32* %102, align 8
  %482 = icmp eq i32 %480, %481
  br i1 %482, label %511, label %483, !prof !3

483:                                              ; preds = %479
  %484 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %22, i64 0, i32 0, i32 0, i32 0
  %485 = load %"class.WTF::String"*, %"class.WTF::String"** %484, align 8
  %486 = zext i32 %480 to i64
  %487 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %14, i64 0, i32 0, i32 0
  %488 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %487, align 8
  %489 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %485, i64 %486, i32 0, i32 0
  store %"class.WTF::StringImpl"* %488, %"class.WTF::StringImpl"** %489, align 8
  %490 = icmp eq %"class.WTF::StringImpl"* %488, null
  br i1 %490, label %508, label %491

491:                                              ; preds = %483
  %492 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %488, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %493 = load atomic i32, i32* %492 monotonic, align 4
  %494 = and i32 %493, 2
  %495 = icmp eq i32 %494, 0
  br i1 %495, label %496, label %508

496:                                              ; preds = %491
  %497 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %488, i64 0, i32 0
  %498 = load i32, i32* %497, align 4
  %499 = zext i32 %498 to i33
  %500 = call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %499, i33 1) #9
  %501 = extractvalue { i33, i1 } %500, 1
  %502 = extractvalue { i33, i1 } %500, 0
  %503 = icmp slt i33 %502, 0
  %504 = or i1 %501, %503
  br i1 %504, label %505, label %506, !prof !3

505:                                              ; preds = %496
  call void @llvm.trap() #9
  unreachable

506:                                              ; preds = %496
  %507 = trunc i33 %502 to i32
  store i32 %507, i32* %497, align 4
  br label %508

508:                                              ; preds = %506, %491, %483
  %509 = load i32, i32* %100, align 4
  %510 = add i32 %509, 1
  store i32 %510, i32* %100, align 4
  br label %512

511:                                              ; preds = %479
  call void @_ZN3WTF6VectorINS_6StringELj0ENS_18PartitionAllocatorEE14AppendSlowCaseIRKS1_EEvOT_(%"class.WTF::Vector"* %22, %"class.WTF::String"* nonnull dereferenceable(8) %14) #9
  br label %512

512:                                              ; preds = %508, %511
  %513 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %14, i64 0, i32 0, i32 0
  %514 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %513, align 8
  %515 = icmp eq %"class.WTF::StringImpl"* %514, null
  br i1 %515, label %529, label %516

516:                                              ; preds = %512
  %517 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %514, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %518 = load atomic i32, i32* %517 monotonic, align 4
  %519 = and i32 %518, 2
  %520 = icmp eq i32 %519, 0
  %521 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %514, i64 0, i32 0
  %522 = load i32, i32* %521, align 4
  br i1 %520, label %523, label %525

523:                                              ; preds = %516
  %524 = add i32 %522, -1
  store i32 %524, i32* %521, align 4
  br label %525

525:                                              ; preds = %523, %516
  %526 = phi i32 [ %524, %523 ], [ %522, %516 ]
  %527 = icmp eq i32 %526, 0
  br i1 %527, label %528, label %529

528:                                              ; preds = %525
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %514) #9
  br label %529

529:                                              ; preds = %512, %525, %528
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %404) #9
  %530 = bitcast %"class.WTF::String"* %15 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %530) #9
  %531 = getelementptr inbounds %"class.blink::DateTimeFieldsState", %"class.blink::DateTimeFieldsState"* %1, i64 0, i32 4
  %532 = load i32, i32* %531, align 4
  %533 = icmp eq i32 %532, -1
  br i1 %533, label %582, label %534

534:                                              ; preds = %529
  %535 = getelementptr inbounds %"class.WTF::IntegerToStringConverter", %"class.WTF::IntegerToStringConverter"* %5, i64 0, i32 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %535) #9
  %536 = getelementptr inbounds %"class.WTF::IntegerToStringConverter", %"class.WTF::IntegerToStringConverter"* %5, i64 0, i32 0, i64 11
  %537 = getelementptr inbounds %"class.WTF::IntegerToStringConverter", %"class.WTF::IntegerToStringConverter"* %5, i64 0, i32 2
  %538 = getelementptr inbounds %"class.WTF::IntegerToStringConverter", %"class.WTF::IntegerToStringConverter"* %5, i64 0, i32 3
  %539 = getelementptr inbounds %"class.WTF::IntegerToStringConverter", %"class.WTF::IntegerToStringConverter"* %5, i64 0, i32 0, i64 12
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %535, i8 -86, i64 32, i1 false) #9
  store i8* %536, i8** %537, align 8
  %540 = urem i32 %532, 10
  %541 = udiv i32 %532, 10
  %542 = trunc i32 %540 to i8
  %543 = or i8 %542, 48
  store i8 %543, i8* %536, align 1
  %544 = icmp ugt i32 %532, 9
  br i1 %544, label %545, label %560

545:                                              ; preds = %534
  %546 = getelementptr inbounds %"class.WTF::IntegerToStringConverter", %"class.WTF::IntegerToStringConverter"* %5, i64 0, i32 0, i64 10
  store i8* %546, i8** %537, align 8
  %547 = urem i32 %541, 10
  %548 = trunc i32 %547 to i8
  %549 = or i8 %548, 48
  store i8 %549, i8* %546, align 2
  %550 = icmp ugt i32 %532, 99
  br i1 %550, label %551, label %558

551:                                              ; preds = %545
  %552 = udiv i32 %532, 100
  %553 = getelementptr inbounds %"class.WTF::IntegerToStringConverter", %"class.WTF::IntegerToStringConverter"* %5, i64 0, i32 0, i64 9
  store i8* %553, i8** %537, align 8
  %554 = urem i32 %552, 10
  %555 = trunc i32 %554 to i8
  %556 = or i8 %555, 48
  store i8 %556, i8* %553, align 1
  %557 = icmp ugt i32 %532, 999
  br i1 %557, label %562, label %571

558:                                              ; preds = %545
  %559 = ptrtoint i8* %546 to i64
  br label %574

560:                                              ; preds = %534
  %561 = ptrtoint i8* %536 to i64
  br label %574

562:                                              ; preds = %551, %562
  %563 = phi i32 [ %565, %562 ], [ %552, %551 ]
  %564 = load i8*, i8** %537, align 8
  %565 = udiv i32 %563, 10
  %566 = getelementptr inbounds i8, i8* %564, i64 -1
  store i8* %566, i8** %537, align 8
  %567 = urem i32 %565, 10
  %568 = trunc i32 %567 to i8
  %569 = or i8 %568, 48
  store i8 %569, i8* %566, align 1
  %570 = icmp ugt i32 %563, 99
  br i1 %570, label %562, label %571

571:                                              ; preds = %562, %551
  %572 = bitcast i8** %537 to i64*
  %573 = load i64, i64* %572, align 8
  br label %574

574:                                              ; preds = %571, %558, %560
  %575 = phi i64 [ %561, %560 ], [ %573, %571 ], [ %559, %558 ]
  %576 = ptrtoint i8* %539 to i64
  %577 = sub i64 %576, %575
  %578 = trunc i64 %577 to i32
  store i32 %578, i32* %538, align 8
  %579 = inttoptr i64 %575 to i8*
  %580 = call %"class.WTF::StringImpl"* @_ZN3WTF10StringImpl6CreateEPKhj(i8* %579, i32 %578) #9
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %535) #9
  %581 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %15, i64 0, i32 0, i32 0
  store %"class.WTF::StringImpl"* %580, %"class.WTF::StringImpl"** %581, align 8
  br label %605

582:                                              ; preds = %529
  %583 = load %"class.WTF::String"*, %"class.WTF::String"** @_ZN3WTF14g_empty_stringE, align 8
  %584 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %583, i64 0, i32 0, i32 0
  %585 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %584, align 8
  %586 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %15, i64 0, i32 0, i32 0
  store %"class.WTF::StringImpl"* %585, %"class.WTF::StringImpl"** %586, align 8
  %587 = icmp eq %"class.WTF::StringImpl"* %585, null
  br i1 %587, label %605, label %588

588:                                              ; preds = %582
  %589 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %585, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %590 = load atomic i32, i32* %589 monotonic, align 4
  %591 = and i32 %590, 2
  %592 = icmp eq i32 %591, 0
  br i1 %592, label %593, label %605

593:                                              ; preds = %588
  %594 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %585, i64 0, i32 0
  %595 = load i32, i32* %594, align 4
  %596 = zext i32 %595 to i33
  %597 = call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %596, i33 1) #9
  %598 = extractvalue { i33, i1 } %597, 1
  %599 = extractvalue { i33, i1 } %597, 0
  %600 = icmp slt i33 %599, 0
  %601 = or i1 %598, %600
  br i1 %601, label %602, label %603, !prof !3

602:                                              ; preds = %593
  call void @llvm.trap() #9
  unreachable

603:                                              ; preds = %593
  %604 = trunc i33 %599 to i32
  store i32 %604, i32* %594, align 4
  br label %605

605:                                              ; preds = %603, %588, %582, %574
  store i32 1, i32* %21, align 8
  %606 = load i32, i32* %100, align 4
  %607 = load i32, i32* %102, align 8
  %608 = icmp eq i32 %606, %607
  br i1 %608, label %637, label %609, !prof !3

609:                                              ; preds = %605
  %610 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %22, i64 0, i32 0, i32 0, i32 0
  %611 = load %"class.WTF::String"*, %"class.WTF::String"** %610, align 8
  %612 = zext i32 %606 to i64
  %613 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %15, i64 0, i32 0, i32 0
  %614 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %613, align 8
  %615 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %611, i64 %612, i32 0, i32 0
  store %"class.WTF::StringImpl"* %614, %"class.WTF::StringImpl"** %615, align 8
  %616 = icmp eq %"class.WTF::StringImpl"* %614, null
  br i1 %616, label %634, label %617

617:                                              ; preds = %609
  %618 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %614, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %619 = load atomic i32, i32* %618 monotonic, align 4
  %620 = and i32 %619, 2
  %621 = icmp eq i32 %620, 0
  br i1 %621, label %622, label %634

622:                                              ; preds = %617
  %623 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %614, i64 0, i32 0
  %624 = load i32, i32* %623, align 4
  %625 = zext i32 %624 to i33
  %626 = call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %625, i33 1) #9
  %627 = extractvalue { i33, i1 } %626, 1
  %628 = extractvalue { i33, i1 } %626, 0
  %629 = icmp slt i33 %628, 0
  %630 = or i1 %627, %629
  br i1 %630, label %631, label %632, !prof !3

631:                                              ; preds = %622
  call void @llvm.trap() #9
  unreachable

632:                                              ; preds = %622
  %633 = trunc i33 %628 to i32
  store i32 %633, i32* %623, align 4
  br label %634

634:                                              ; preds = %632, %617, %609
  %635 = load i32, i32* %100, align 4
  %636 = add i32 %635, 1
  store i32 %636, i32* %100, align 4
  br label %638

637:                                              ; preds = %605
  call void @_ZN3WTF6VectorINS_6StringELj0ENS_18PartitionAllocatorEE14AppendSlowCaseIRKS1_EEvOT_(%"class.WTF::Vector"* %22, %"class.WTF::String"* nonnull dereferenceable(8) %15) #9
  br label %638

638:                                              ; preds = %634, %637
  %639 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %15, i64 0, i32 0, i32 0
  %640 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %639, align 8
  %641 = icmp eq %"class.WTF::StringImpl"* %640, null
  br i1 %641, label %655, label %642

642:                                              ; preds = %638
  %643 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %640, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %644 = load atomic i32, i32* %643 monotonic, align 4
  %645 = and i32 %644, 2
  %646 = icmp eq i32 %645, 0
  %647 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %640, i64 0, i32 0
  %648 = load i32, i32* %647, align 4
  br i1 %646, label %649, label %651

649:                                              ; preds = %642
  %650 = add i32 %648, -1
  store i32 %650, i32* %647, align 4
  br label %651

651:                                              ; preds = %649, %642
  %652 = phi i32 [ %650, %649 ], [ %648, %642 ]
  %653 = icmp eq i32 %652, 0
  br i1 %653, label %654, label %655

654:                                              ; preds = %651
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %640) #9
  br label %655

655:                                              ; preds = %638, %651, %654
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %530) #9
  %656 = bitcast %"class.WTF::String"* %16 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %656) #9
  %657 = getelementptr inbounds %"class.blink::DateTimeFieldsState", %"class.blink::DateTimeFieldsState"* %1, i64 0, i32 5
  %658 = load i32, i32* %657, align 4
  %659 = icmp eq i32 %658, -1
  br i1 %659, label %708, label %660

660:                                              ; preds = %655
  %661 = getelementptr inbounds %"class.WTF::IntegerToStringConverter", %"class.WTF::IntegerToStringConverter"* %3, i64 0, i32 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %661) #9
  %662 = getelementptr inbounds %"class.WTF::IntegerToStringConverter", %"class.WTF::IntegerToStringConverter"* %3, i64 0, i32 0, i64 11
  %663 = getelementptr inbounds %"class.WTF::IntegerToStringConverter", %"class.WTF::IntegerToStringConverter"* %3, i64 0, i32 2
  %664 = getelementptr inbounds %"class.WTF::IntegerToStringConverter", %"class.WTF::IntegerToStringConverter"* %3, i64 0, i32 3
  %665 = getelementptr inbounds %"class.WTF::IntegerToStringConverter", %"class.WTF::IntegerToStringConverter"* %3, i64 0, i32 0, i64 12
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %661, i8 -86, i64 32, i1 false) #9
  store i8* %662, i8** %663, align 8
  %666 = urem i32 %658, 10
  %667 = udiv i32 %658, 10
  %668 = trunc i32 %666 to i8
  %669 = or i8 %668, 48
  store i8 %669, i8* %662, align 1
  %670 = icmp ugt i32 %658, 9
  br i1 %670, label %671, label %686

671:                                              ; preds = %660
  %672 = getelementptr inbounds %"class.WTF::IntegerToStringConverter", %"class.WTF::IntegerToStringConverter"* %3, i64 0, i32 0, i64 10
  store i8* %672, i8** %663, align 8
  %673 = urem i32 %667, 10
  %674 = trunc i32 %673 to i8
  %675 = or i8 %674, 48
  store i8 %675, i8* %672, align 2
  %676 = icmp ugt i32 %658, 99
  br i1 %676, label %677, label %684

677:                                              ; preds = %671
  %678 = udiv i32 %658, 100
  %679 = getelementptr inbounds %"class.WTF::IntegerToStringConverter", %"class.WTF::IntegerToStringConverter"* %3, i64 0, i32 0, i64 9
  store i8* %679, i8** %663, align 8
  %680 = urem i32 %678, 10
  %681 = trunc i32 %680 to i8
  %682 = or i8 %681, 48
  store i8 %682, i8* %679, align 1
  %683 = icmp ugt i32 %658, 999
  br i1 %683, label %688, label %697

684:                                              ; preds = %671
  %685 = ptrtoint i8* %672 to i64
  br label %700

686:                                              ; preds = %660
  %687 = ptrtoint i8* %662 to i64
  br label %700

688:                                              ; preds = %677, %688
  %689 = phi i32 [ %691, %688 ], [ %678, %677 ]
  %690 = load i8*, i8** %663, align 8
  %691 = udiv i32 %689, 10
  %692 = getelementptr inbounds i8, i8* %690, i64 -1
  store i8* %692, i8** %663, align 8
  %693 = urem i32 %691, 10
  %694 = trunc i32 %693 to i8
  %695 = or i8 %694, 48
  store i8 %695, i8* %692, align 1
  %696 = icmp ugt i32 %689, 99
  br i1 %696, label %688, label %697

697:                                              ; preds = %688, %677
  %698 = bitcast i8** %663 to i64*
  %699 = load i64, i64* %698, align 8
  br label %700

700:                                              ; preds = %697, %684, %686
  %701 = phi i64 [ %687, %686 ], [ %699, %697 ], [ %685, %684 ]
  %702 = ptrtoint i8* %665 to i64
  %703 = sub i64 %702, %701
  %704 = trunc i64 %703 to i32
  store i32 %704, i32* %664, align 8
  %705 = inttoptr i64 %701 to i8*
  %706 = call %"class.WTF::StringImpl"* @_ZN3WTF10StringImpl6CreateEPKhj(i8* %705, i32 %704) #9
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %661) #9
  %707 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %16, i64 0, i32 0, i32 0
  store %"class.WTF::StringImpl"* %706, %"class.WTF::StringImpl"** %707, align 8
  br label %731

708:                                              ; preds = %655
  %709 = load %"class.WTF::String"*, %"class.WTF::String"** @_ZN3WTF14g_empty_stringE, align 8
  %710 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %709, i64 0, i32 0, i32 0
  %711 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %710, align 8
  %712 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %16, i64 0, i32 0, i32 0
  store %"class.WTF::StringImpl"* %711, %"class.WTF::StringImpl"** %712, align 8
  %713 = icmp eq %"class.WTF::StringImpl"* %711, null
  br i1 %713, label %731, label %714

714:                                              ; preds = %708
  %715 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %711, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %716 = load atomic i32, i32* %715 monotonic, align 4
  %717 = and i32 %716, 2
  %718 = icmp eq i32 %717, 0
  br i1 %718, label %719, label %731

719:                                              ; preds = %714
  %720 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %711, i64 0, i32 0
  %721 = load i32, i32* %720, align 4
  %722 = zext i32 %721 to i33
  %723 = call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %722, i33 1) #9
  %724 = extractvalue { i33, i1 } %723, 1
  %725 = extractvalue { i33, i1 } %723, 0
  %726 = icmp slt i33 %725, 0
  %727 = or i1 %724, %726
  br i1 %727, label %728, label %729, !prof !3

728:                                              ; preds = %719
  call void @llvm.trap() #9
  unreachable

729:                                              ; preds = %719
  %730 = trunc i33 %725 to i32
  store i32 %730, i32* %720, align 4
  br label %731

731:                                              ; preds = %729, %714, %708, %700
  store i32 1, i32* %21, align 8
  %732 = load i32, i32* %100, align 4
  %733 = load i32, i32* %102, align 8
  %734 = icmp eq i32 %732, %733
  br i1 %734, label %763, label %735, !prof !3

735:                                              ; preds = %731
  %736 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %22, i64 0, i32 0, i32 0, i32 0
  %737 = load %"class.WTF::String"*, %"class.WTF::String"** %736, align 8
  %738 = zext i32 %732 to i64
  %739 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %16, i64 0, i32 0, i32 0
  %740 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %739, align 8
  %741 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %737, i64 %738, i32 0, i32 0
  store %"class.WTF::StringImpl"* %740, %"class.WTF::StringImpl"** %741, align 8
  %742 = icmp eq %"class.WTF::StringImpl"* %740, null
  br i1 %742, label %760, label %743

743:                                              ; preds = %735
  %744 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %740, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %745 = load atomic i32, i32* %744 monotonic, align 4
  %746 = and i32 %745, 2
  %747 = icmp eq i32 %746, 0
  br i1 %747, label %748, label %760

748:                                              ; preds = %743
  %749 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %740, i64 0, i32 0
  %750 = load i32, i32* %749, align 4
  %751 = zext i32 %750 to i33
  %752 = call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %751, i33 1) #9
  %753 = extractvalue { i33, i1 } %752, 1
  %754 = extractvalue { i33, i1 } %752, 0
  %755 = icmp slt i33 %754, 0
  %756 = or i1 %753, %755
  br i1 %756, label %757, label %758, !prof !3

757:                                              ; preds = %748
  call void @llvm.trap() #9
  unreachable

758:                                              ; preds = %748
  %759 = trunc i33 %754 to i32
  store i32 %759, i32* %749, align 4
  br label %760

760:                                              ; preds = %758, %743, %735
  %761 = load i32, i32* %100, align 4
  %762 = add i32 %761, 1
  store i32 %762, i32* %100, align 4
  br label %764

763:                                              ; preds = %731
  call void @_ZN3WTF6VectorINS_6StringELj0ENS_18PartitionAllocatorEE14AppendSlowCaseIRKS1_EEvOT_(%"class.WTF::Vector"* %22, %"class.WTF::String"* nonnull dereferenceable(8) %16) #9
  br label %764

764:                                              ; preds = %760, %763
  %765 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %16, i64 0, i32 0, i32 0
  %766 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %765, align 8
  %767 = icmp eq %"class.WTF::StringImpl"* %766, null
  br i1 %767, label %781, label %768

768:                                              ; preds = %764
  %769 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %766, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %770 = load atomic i32, i32* %769 monotonic, align 4
  %771 = and i32 %770, 2
  %772 = icmp eq i32 %771, 0
  %773 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %766, i64 0, i32 0
  %774 = load i32, i32* %773, align 4
  br i1 %772, label %775, label %777

775:                                              ; preds = %768
  %776 = add i32 %774, -1
  store i32 %776, i32* %773, align 4
  br label %777

777:                                              ; preds = %775, %768
  %778 = phi i32 [ %776, %775 ], [ %774, %768 ]
  %779 = icmp eq i32 %778, 0
  br i1 %779, label %780, label %781

780:                                              ; preds = %777
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %766) #9
  br label %781

781:                                              ; preds = %764, %777, %780
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %656) #9
  %782 = bitcast %"class.WTF::String"* %17 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %782) #9
  %783 = getelementptr inbounds %"class.blink::DateTimeFieldsState", %"class.blink::DateTimeFieldsState"* %1, i64 0, i32 6
  %784 = load i32, i32* %783, align 4
  %785 = icmp eq i32 %784, -1
  br i1 %785, label %834, label %786

786:                                              ; preds = %781
  %787 = getelementptr inbounds %"class.WTF::IntegerToStringConverter", %"class.WTF::IntegerToStringConverter"* %4, i64 0, i32 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %787) #9
  %788 = getelementptr inbounds %"class.WTF::IntegerToStringConverter", %"class.WTF::IntegerToStringConverter"* %4, i64 0, i32 0, i64 11
  %789 = getelementptr inbounds %"class.WTF::IntegerToStringConverter", %"class.WTF::IntegerToStringConverter"* %4, i64 0, i32 2
  %790 = getelementptr inbounds %"class.WTF::IntegerToStringConverter", %"class.WTF::IntegerToStringConverter"* %4, i64 0, i32 3
  %791 = getelementptr inbounds %"class.WTF::IntegerToStringConverter", %"class.WTF::IntegerToStringConverter"* %4, i64 0, i32 0, i64 12
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %787, i8 -86, i64 32, i1 false) #9
  store i8* %788, i8** %789, align 8
  %792 = urem i32 %784, 10
  %793 = udiv i32 %784, 10
  %794 = trunc i32 %792 to i8
  %795 = or i8 %794, 48
  store i8 %795, i8* %788, align 1
  %796 = icmp ugt i32 %784, 9
  br i1 %796, label %797, label %812

797:                                              ; preds = %786
  %798 = getelementptr inbounds %"class.WTF::IntegerToStringConverter", %"class.WTF::IntegerToStringConverter"* %4, i64 0, i32 0, i64 10
  store i8* %798, i8** %789, align 8
  %799 = urem i32 %793, 10
  %800 = trunc i32 %799 to i8
  %801 = or i8 %800, 48
  store i8 %801, i8* %798, align 2
  %802 = icmp ugt i32 %784, 99
  br i1 %802, label %803, label %810

803:                                              ; preds = %797
  %804 = udiv i32 %784, 100
  %805 = getelementptr inbounds %"class.WTF::IntegerToStringConverter", %"class.WTF::IntegerToStringConverter"* %4, i64 0, i32 0, i64 9
  store i8* %805, i8** %789, align 8
  %806 = urem i32 %804, 10
  %807 = trunc i32 %806 to i8
  %808 = or i8 %807, 48
  store i8 %808, i8* %805, align 1
  %809 = icmp ugt i32 %784, 999
  br i1 %809, label %814, label %823

810:                                              ; preds = %797
  %811 = ptrtoint i8* %798 to i64
  br label %826

812:                                              ; preds = %786
  %813 = ptrtoint i8* %788 to i64
  br label %826

814:                                              ; preds = %803, %814
  %815 = phi i32 [ %817, %814 ], [ %804, %803 ]
  %816 = load i8*, i8** %789, align 8
  %817 = udiv i32 %815, 10
  %818 = getelementptr inbounds i8, i8* %816, i64 -1
  store i8* %818, i8** %789, align 8
  %819 = urem i32 %817, 10
  %820 = trunc i32 %819 to i8
  %821 = or i8 %820, 48
  store i8 %821, i8* %818, align 1
  %822 = icmp ugt i32 %815, 99
  br i1 %822, label %814, label %823

823:                                              ; preds = %814, %803
  %824 = bitcast i8** %789 to i64*
  %825 = load i64, i64* %824, align 8
  br label %826

826:                                              ; preds = %823, %810, %812
  %827 = phi i64 [ %813, %812 ], [ %825, %823 ], [ %811, %810 ]
  %828 = ptrtoint i8* %791 to i64
  %829 = sub i64 %828, %827
  %830 = trunc i64 %829 to i32
  store i32 %830, i32* %790, align 8
  %831 = inttoptr i64 %827 to i8*
  %832 = call %"class.WTF::StringImpl"* @_ZN3WTF10StringImpl6CreateEPKhj(i8* %831, i32 %830) #9
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %787) #9
  %833 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %17, i64 0, i32 0, i32 0
  store %"class.WTF::StringImpl"* %832, %"class.WTF::StringImpl"** %833, align 8
  br label %857

834:                                              ; preds = %781
  %835 = load %"class.WTF::String"*, %"class.WTF::String"** @_ZN3WTF14g_empty_stringE, align 8
  %836 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %835, i64 0, i32 0, i32 0
  %837 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %836, align 8
  %838 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %17, i64 0, i32 0, i32 0
  store %"class.WTF::StringImpl"* %837, %"class.WTF::StringImpl"** %838, align 8
  %839 = icmp eq %"class.WTF::StringImpl"* %837, null
  br i1 %839, label %857, label %840

840:                                              ; preds = %834
  %841 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %837, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %842 = load atomic i32, i32* %841 monotonic, align 4
  %843 = and i32 %842, 2
  %844 = icmp eq i32 %843, 0
  br i1 %844, label %845, label %857

845:                                              ; preds = %840
  %846 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %837, i64 0, i32 0
  %847 = load i32, i32* %846, align 4
  %848 = zext i32 %847 to i33
  %849 = call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %848, i33 1) #9
  %850 = extractvalue { i33, i1 } %849, 1
  %851 = extractvalue { i33, i1 } %849, 0
  %852 = icmp slt i33 %851, 0
  %853 = or i1 %850, %852
  br i1 %853, label %854, label %855, !prof !3

854:                                              ; preds = %845
  call void @llvm.trap() #9
  unreachable

855:                                              ; preds = %845
  %856 = trunc i33 %851 to i32
  store i32 %856, i32* %846, align 4
  br label %857

857:                                              ; preds = %855, %840, %834, %826
  store i32 1, i32* %21, align 8
  %858 = load i32, i32* %100, align 4
  %859 = load i32, i32* %102, align 8
  %860 = icmp eq i32 %858, %859
  br i1 %860, label %889, label %861, !prof !3

861:                                              ; preds = %857
  %862 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %22, i64 0, i32 0, i32 0, i32 0
  %863 = load %"class.WTF::String"*, %"class.WTF::String"** %862, align 8
  %864 = zext i32 %858 to i64
  %865 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %17, i64 0, i32 0, i32 0
  %866 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %865, align 8
  %867 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %863, i64 %864, i32 0, i32 0
  store %"class.WTF::StringImpl"* %866, %"class.WTF::StringImpl"** %867, align 8
  %868 = icmp eq %"class.WTF::StringImpl"* %866, null
  br i1 %868, label %886, label %869

869:                                              ; preds = %861
  %870 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %866, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %871 = load atomic i32, i32* %870 monotonic, align 4
  %872 = and i32 %871, 2
  %873 = icmp eq i32 %872, 0
  br i1 %873, label %874, label %886

874:                                              ; preds = %869
  %875 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %866, i64 0, i32 0
  %876 = load i32, i32* %875, align 4
  %877 = zext i32 %876 to i33
  %878 = call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %877, i33 1) #9
  %879 = extractvalue { i33, i1 } %878, 1
  %880 = extractvalue { i33, i1 } %878, 0
  %881 = icmp slt i33 %880, 0
  %882 = or i1 %879, %881
  br i1 %882, label %883, label %884, !prof !3

883:                                              ; preds = %874
  call void @llvm.trap() #9
  unreachable

884:                                              ; preds = %874
  %885 = trunc i33 %880 to i32
  store i32 %885, i32* %875, align 4
  br label %886

886:                                              ; preds = %884, %869, %861
  %887 = load i32, i32* %100, align 4
  %888 = add i32 %887, 1
  store i32 %888, i32* %100, align 4
  br label %890

889:                                              ; preds = %857
  call void @_ZN3WTF6VectorINS_6StringELj0ENS_18PartitionAllocatorEE14AppendSlowCaseIRKS1_EEvOT_(%"class.WTF::Vector"* %22, %"class.WTF::String"* nonnull dereferenceable(8) %17) #9
  br label %890

890:                                              ; preds = %886, %889
  %891 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %17, i64 0, i32 0, i32 0
  %892 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %891, align 8
  %893 = icmp eq %"class.WTF::StringImpl"* %892, null
  br i1 %893, label %907, label %894

894:                                              ; preds = %890
  %895 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %892, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %896 = load atomic i32, i32* %895 monotonic, align 4
  %897 = and i32 %896, 2
  %898 = icmp eq i32 %897, 0
  %899 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %892, i64 0, i32 0
  %900 = load i32, i32* %899, align 4
  br i1 %898, label %901, label %903

901:                                              ; preds = %894
  %902 = add i32 %900, -1
  store i32 %902, i32* %899, align 4
  br label %903

903:                                              ; preds = %901, %894
  %904 = phi i32 [ %902, %901 ], [ %900, %894 ]
  %905 = icmp eq i32 %904, 0
  br i1 %905, label %906, label %907

906:                                              ; preds = %903
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %892) #9
  br label %907

907:                                              ; preds = %890, %903, %906
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %782) #9
  %908 = bitcast %"class.WTF::String"* %18 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %908) #9
  %909 = getelementptr inbounds %"class.blink::DateTimeFieldsState", %"class.blink::DateTimeFieldsState"* %1, i64 0, i32 7
  %910 = load i32, i32* %909, align 4
  %911 = icmp eq i32 %910, -1
  br i1 %911, label %960, label %912

912:                                              ; preds = %907
  %913 = getelementptr inbounds %"class.WTF::IntegerToStringConverter", %"class.WTF::IntegerToStringConverter"* %7, i64 0, i32 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %913) #9
  %914 = getelementptr inbounds %"class.WTF::IntegerToStringConverter", %"class.WTF::IntegerToStringConverter"* %7, i64 0, i32 0, i64 11
  %915 = getelementptr inbounds %"class.WTF::IntegerToStringConverter", %"class.WTF::IntegerToStringConverter"* %7, i64 0, i32 2
  %916 = getelementptr inbounds %"class.WTF::IntegerToStringConverter", %"class.WTF::IntegerToStringConverter"* %7, i64 0, i32 3
  %917 = getelementptr inbounds %"class.WTF::IntegerToStringConverter", %"class.WTF::IntegerToStringConverter"* %7, i64 0, i32 0, i64 12
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %913, i8 -86, i64 32, i1 false) #9
  store i8* %914, i8** %915, align 8
  %918 = urem i32 %910, 10
  %919 = udiv i32 %910, 10
  %920 = trunc i32 %918 to i8
  %921 = or i8 %920, 48
  store i8 %921, i8* %914, align 1
  %922 = icmp ugt i32 %910, 9
  br i1 %922, label %923, label %938

923:                                              ; preds = %912
  %924 = getelementptr inbounds %"class.WTF::IntegerToStringConverter", %"class.WTF::IntegerToStringConverter"* %7, i64 0, i32 0, i64 10
  store i8* %924, i8** %915, align 8
  %925 = urem i32 %919, 10
  %926 = trunc i32 %925 to i8
  %927 = or i8 %926, 48
  store i8 %927, i8* %924, align 2
  %928 = icmp ugt i32 %910, 99
  br i1 %928, label %929, label %936

929:                                              ; preds = %923
  %930 = udiv i32 %910, 100
  %931 = getelementptr inbounds %"class.WTF::IntegerToStringConverter", %"class.WTF::IntegerToStringConverter"* %7, i64 0, i32 0, i64 9
  store i8* %931, i8** %915, align 8
  %932 = urem i32 %930, 10
  %933 = trunc i32 %932 to i8
  %934 = or i8 %933, 48
  store i8 %934, i8* %931, align 1
  %935 = icmp ugt i32 %910, 999
  br i1 %935, label %940, label %949

936:                                              ; preds = %923
  %937 = ptrtoint i8* %924 to i64
  br label %952

938:                                              ; preds = %912
  %939 = ptrtoint i8* %914 to i64
  br label %952

940:                                              ; preds = %929, %940
  %941 = phi i32 [ %943, %940 ], [ %930, %929 ]
  %942 = load i8*, i8** %915, align 8
  %943 = udiv i32 %941, 10
  %944 = getelementptr inbounds i8, i8* %942, i64 -1
  store i8* %944, i8** %915, align 8
  %945 = urem i32 %943, 10
  %946 = trunc i32 %945 to i8
  %947 = or i8 %946, 48
  store i8 %947, i8* %944, align 1
  %948 = icmp ugt i32 %941, 99
  br i1 %948, label %940, label %949

949:                                              ; preds = %940, %929
  %950 = bitcast i8** %915 to i64*
  %951 = load i64, i64* %950, align 8
  br label %952

952:                                              ; preds = %949, %936, %938
  %953 = phi i64 [ %939, %938 ], [ %951, %949 ], [ %937, %936 ]
  %954 = ptrtoint i8* %917 to i64
  %955 = sub i64 %954, %953
  %956 = trunc i64 %955 to i32
  store i32 %956, i32* %916, align 8
  %957 = inttoptr i64 %953 to i8*
  %958 = call %"class.WTF::StringImpl"* @_ZN3WTF10StringImpl6CreateEPKhj(i8* %957, i32 %956) #9
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %913) #9
  %959 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %18, i64 0, i32 0, i32 0
  store %"class.WTF::StringImpl"* %958, %"class.WTF::StringImpl"** %959, align 8
  br label %983

960:                                              ; preds = %907
  %961 = load %"class.WTF::String"*, %"class.WTF::String"** @_ZN3WTF14g_empty_stringE, align 8
  %962 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %961, i64 0, i32 0, i32 0
  %963 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %962, align 8
  %964 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %18, i64 0, i32 0, i32 0
  store %"class.WTF::StringImpl"* %963, %"class.WTF::StringImpl"** %964, align 8
  %965 = icmp eq %"class.WTF::StringImpl"* %963, null
  br i1 %965, label %983, label %966

966:                                              ; preds = %960
  %967 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %963, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %968 = load atomic i32, i32* %967 monotonic, align 4
  %969 = and i32 %968, 2
  %970 = icmp eq i32 %969, 0
  br i1 %970, label %971, label %983

971:                                              ; preds = %966
  %972 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %963, i64 0, i32 0
  %973 = load i32, i32* %972, align 4
  %974 = zext i32 %973 to i33
  %975 = call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %974, i33 1) #9
  %976 = extractvalue { i33, i1 } %975, 1
  %977 = extractvalue { i33, i1 } %975, 0
  %978 = icmp slt i33 %977, 0
  %979 = or i1 %976, %978
  br i1 %979, label %980, label %981, !prof !3

980:                                              ; preds = %971
  call void @llvm.trap() #9
  unreachable

981:                                              ; preds = %971
  %982 = trunc i33 %977 to i32
  store i32 %982, i32* %972, align 4
  br label %983

983:                                              ; preds = %981, %966, %960, %952
  store i32 1, i32* %21, align 8
  %984 = load i32, i32* %100, align 4
  %985 = load i32, i32* %102, align 8
  %986 = icmp eq i32 %984, %985
  br i1 %986, label %1015, label %987, !prof !3

987:                                              ; preds = %983
  %988 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %22, i64 0, i32 0, i32 0, i32 0
  %989 = load %"class.WTF::String"*, %"class.WTF::String"** %988, align 8
  %990 = zext i32 %984 to i64
  %991 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %18, i64 0, i32 0, i32 0
  %992 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %991, align 8
  %993 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %989, i64 %990, i32 0, i32 0
  store %"class.WTF::StringImpl"* %992, %"class.WTF::StringImpl"** %993, align 8
  %994 = icmp eq %"class.WTF::StringImpl"* %992, null
  br i1 %994, label %1012, label %995

995:                                              ; preds = %987
  %996 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %992, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %997 = load atomic i32, i32* %996 monotonic, align 4
  %998 = and i32 %997, 2
  %999 = icmp eq i32 %998, 0
  br i1 %999, label %1000, label %1012

1000:                                             ; preds = %995
  %1001 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %992, i64 0, i32 0
  %1002 = load i32, i32* %1001, align 4
  %1003 = zext i32 %1002 to i33
  %1004 = call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %1003, i33 1) #9
  %1005 = extractvalue { i33, i1 } %1004, 1
  %1006 = extractvalue { i33, i1 } %1004, 0
  %1007 = icmp slt i33 %1006, 0
  %1008 = or i1 %1005, %1007
  br i1 %1008, label %1009, label %1010, !prof !3

1009:                                             ; preds = %1000
  call void @llvm.trap() #9
  unreachable

1010:                                             ; preds = %1000
  %1011 = trunc i33 %1006 to i32
  store i32 %1011, i32* %1001, align 4
  br label %1012

1012:                                             ; preds = %1010, %995, %987
  %1013 = load i32, i32* %100, align 4
  %1014 = add i32 %1013, 1
  store i32 %1014, i32* %100, align 4
  br label %1016

1015:                                             ; preds = %983
  call void @_ZN3WTF6VectorINS_6StringELj0ENS_18PartitionAllocatorEE14AppendSlowCaseIRKS1_EEvOT_(%"class.WTF::Vector"* %22, %"class.WTF::String"* nonnull dereferenceable(8) %18) #9
  br label %1016

1016:                                             ; preds = %1012, %1015
  %1017 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %18, i64 0, i32 0, i32 0
  %1018 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %1017, align 8
  %1019 = icmp eq %"class.WTF::StringImpl"* %1018, null
  br i1 %1019, label %1033, label %1020

1020:                                             ; preds = %1016
  %1021 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %1018, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %1022 = load atomic i32, i32* %1021 monotonic, align 4
  %1023 = and i32 %1022, 2
  %1024 = icmp eq i32 %1023, 0
  %1025 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %1018, i64 0, i32 0
  %1026 = load i32, i32* %1025, align 4
  br i1 %1024, label %1027, label %1029

1027:                                             ; preds = %1020
  %1028 = add i32 %1026, -1
  store i32 %1028, i32* %1025, align 4
  br label %1029

1029:                                             ; preds = %1027, %1020
  %1030 = phi i32 [ %1028, %1027 ], [ %1026, %1020 ]
  %1031 = icmp eq i32 %1030, 0
  br i1 %1031, label %1032, label %1033

1032:                                             ; preds = %1029
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %1018) #9
  br label %1033

1033:                                             ; preds = %1016, %1029, %1032
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %908) #9
  %1034 = getelementptr inbounds %"class.blink::DateTimeFieldsState", %"class.blink::DateTimeFieldsState"* %1, i64 0, i32 8
  %1035 = load i32, i32* %1034, align 4
  %1036 = icmp eq i32 %1035, -1
  br i1 %1036, label %1092, label %1037

1037:                                             ; preds = %1033
  %1038 = bitcast %"class.WTF::String"* %19 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %1038) #9
  %1039 = icmp eq i32 %1035, 0
  %1040 = select i1 %1039, [2 x i8]* @.str, [2 x i8]* @.str.1
  %1041 = getelementptr inbounds [2 x i8], [2 x i8]* %1040, i64 0, i64 0
  call void @_ZN3WTF6StringC2EPKcm(%"class.WTF::String"* nonnull %19, i8* nonnull %1041, i64 1) #9
  store i32 1, i32* %21, align 8
  %1042 = load i32, i32* %100, align 4
  %1043 = load i32, i32* %102, align 8
  %1044 = icmp eq i32 %1042, %1043
  br i1 %1044, label %1073, label %1045, !prof !3

1045:                                             ; preds = %1037
  %1046 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %22, i64 0, i32 0, i32 0, i32 0
  %1047 = load %"class.WTF::String"*, %"class.WTF::String"** %1046, align 8
  %1048 = zext i32 %1042 to i64
  %1049 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %19, i64 0, i32 0, i32 0
  %1050 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %1049, align 8
  %1051 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %1047, i64 %1048, i32 0, i32 0
  store %"class.WTF::StringImpl"* %1050, %"class.WTF::StringImpl"** %1051, align 8
  %1052 = icmp eq %"class.WTF::StringImpl"* %1050, null
  br i1 %1052, label %1070, label %1053

1053:                                             ; preds = %1045
  %1054 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %1050, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %1055 = load atomic i32, i32* %1054 monotonic, align 4
  %1056 = and i32 %1055, 2
  %1057 = icmp eq i32 %1056, 0
  br i1 %1057, label %1058, label %1070

1058:                                             ; preds = %1053
  %1059 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %1050, i64 0, i32 0
  %1060 = load i32, i32* %1059, align 4
  %1061 = zext i32 %1060 to i33
  %1062 = call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %1061, i33 1) #9
  %1063 = extractvalue { i33, i1 } %1062, 1
  %1064 = extractvalue { i33, i1 } %1062, 0
  %1065 = icmp slt i33 %1064, 0
  %1066 = or i1 %1063, %1065
  br i1 %1066, label %1067, label %1068, !prof !3

1067:                                             ; preds = %1058
  call void @llvm.trap() #9
  unreachable

1068:                                             ; preds = %1058
  %1069 = trunc i33 %1064 to i32
  store i32 %1069, i32* %1059, align 4
  br label %1070

1070:                                             ; preds = %1068, %1053, %1045
  %1071 = load i32, i32* %100, align 4
  %1072 = add i32 %1071, 1
  store i32 %1072, i32* %100, align 4
  br label %1074

1073:                                             ; preds = %1037
  call void @_ZN3WTF6VectorINS_6StringELj0ENS_18PartitionAllocatorEE14AppendSlowCaseIRKS1_EEvOT_(%"class.WTF::Vector"* %22, %"class.WTF::String"* nonnull dereferenceable(8) %19) #9
  br label %1074

1074:                                             ; preds = %1070, %1073
  %1075 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %19, i64 0, i32 0, i32 0
  %1076 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %1075, align 8
  %1077 = icmp eq %"class.WTF::StringImpl"* %1076, null
  br i1 %1077, label %1091, label %1078

1078:                                             ; preds = %1074
  %1079 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %1076, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %1080 = load atomic i32, i32* %1079 monotonic, align 4
  %1081 = and i32 %1080, 2
  %1082 = icmp eq i32 %1081, 0
  %1083 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %1076, i64 0, i32 0
  %1084 = load i32, i32* %1083, align 4
  br i1 %1082, label %1085, label %1087

1085:                                             ; preds = %1078
  %1086 = add i32 %1084, -1
  store i32 %1086, i32* %1083, align 4
  br label %1087

1087:                                             ; preds = %1085, %1078
  %1088 = phi i32 [ %1086, %1085 ], [ %1084, %1078 ]
  %1089 = icmp eq i32 %1088, 0
  br i1 %1089, label %1090, label %1091

1090:                                             ; preds = %1087
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %1076) #9
  br label %1091

1091:                                             ; preds = %1074, %1087, %1090
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %1038) #9
  br label %1126

1092:                                             ; preds = %1033
  %1093 = load %"class.WTF::String"*, %"class.WTF::String"** @_ZN3WTF14g_empty_stringE, align 8
  store i32 1, i32* %21, align 8
  %1094 = load i32, i32* %100, align 4
  %1095 = load i32, i32* %102, align 8
  %1096 = icmp eq i32 %1094, %1095
  br i1 %1096, label %1125, label %1097, !prof !3

1097:                                             ; preds = %1092
  %1098 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %22, i64 0, i32 0, i32 0, i32 0
  %1099 = load %"class.WTF::String"*, %"class.WTF::String"** %1098, align 8
  %1100 = zext i32 %1094 to i64
  %1101 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %1093, i64 0, i32 0, i32 0
  %1102 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %1101, align 8
  %1103 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %1099, i64 %1100, i32 0, i32 0
  store %"class.WTF::StringImpl"* %1102, %"class.WTF::StringImpl"** %1103, align 8
  %1104 = icmp eq %"class.WTF::StringImpl"* %1102, null
  br i1 %1104, label %1122, label %1105

1105:                                             ; preds = %1097
  %1106 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %1102, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %1107 = load atomic i32, i32* %1106 monotonic, align 4
  %1108 = and i32 %1107, 2
  %1109 = icmp eq i32 %1108, 0
  br i1 %1109, label %1110, label %1122

1110:                                             ; preds = %1105
  %1111 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %1102, i64 0, i32 0
  %1112 = load i32, i32* %1111, align 4
  %1113 = zext i32 %1112 to i33
  %1114 = call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %1113, i33 1) #9
  %1115 = extractvalue { i33, i1 } %1114, 1
  %1116 = extractvalue { i33, i1 } %1114, 0
  %1117 = icmp slt i33 %1116, 0
  %1118 = or i1 %1115, %1117
  br i1 %1118, label %1119, label %1120, !prof !3

1119:                                             ; preds = %1110
  call void @llvm.trap() #9
  unreachable

1120:                                             ; preds = %1110
  %1121 = trunc i33 %1116 to i32
  store i32 %1121, i32* %1111, align 4
  br label %1122

1122:                                             ; preds = %1120, %1105, %1097
  %1123 = load i32, i32* %100, align 4
  %1124 = add i32 %1123, 1
  store i32 %1124, i32* %100, align 4
  br label %1126

1125:                                             ; preds = %1092
  call void @_ZN3WTF6VectorINS_6StringELj0ENS_18PartitionAllocatorEE14AppendSlowCaseIRKS1_EEvOT_(%"class.WTF::Vector"* %22, %"class.WTF::String"* dereferenceable(8) %1093) #9
  br label %1126

1126:                                             ; preds = %1125, %1122, %1091
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #3

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #3

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #3

declare i32 @_ZNK3WTF6String6ToUIntEPb(%"class.WTF::String"*, i8*) local_unnamed_addr #4

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden dereferenceable(8) %"class.WTF::String"* @_ZNK3WTF6VectorINS_6StringELj0ENS_18PartitionAllocatorEE2atEj(%"class.WTF::Vector"*, i32) local_unnamed_addr #2 comdat align 2 {
  %3 = alloca %"class.logging::CheckOpResult", align 8
  %4 = alloca %"class.logging::CheckOpResult", align 8
  %5 = alloca %"class.logging::CheckError", align 8
  %6 = bitcast %"class.logging::CheckOpResult"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %6) #9
  %7 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %4, i64 0, i32 0
  store i8* inttoptr (i64 -6148914691236517206 to i8*), i8** %7, align 8
  %8 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %0, i64 0, i32 0, i32 0, i32 2
  %9 = load i32, i32* %8, align 4
  %10 = bitcast %"class.logging::CheckOpResult"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %10)
  %11 = icmp ugt i32 %9, %1
  br i1 %11, label %12, label %13

12:                                               ; preds = %2
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %10)
  store i8* null, i8** %7, align 8
  br label %22

13:                                               ; preds = %2
  %14 = tail call i8* @_ZN7logging15CheckOpValueStrEj(i32 %1) #9
  %15 = tail call i8* @_ZN7logging15CheckOpValueStrEj(i32 %9) #9
  call void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"* nonnull %3, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.2, i64 0, i64 0), i8* %14, i8* %15) #9
  %16 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %3, i64 0, i32 0
  %17 = load i8*, i8** %16, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %10)
  store i8* %17, i8** %7, align 8
  %18 = icmp eq i8* %17, null
  br i1 %18, label %22, label %19

19:                                               ; preds = %13
  %20 = bitcast %"class.logging::CheckError"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %20) #9
  call void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* nonnull sret %5, i8* getelementptr inbounds ([55 x i8], [55 x i8]* @.str.3, i64 0, i64 0), i32 1176, %"class.logging::CheckOpResult"* nonnull %4) #9
  %21 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %5) #9
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %5) #9
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %20) #9
  br label %22

22:                                               ; preds = %12, %13, %19
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %6) #9
  %23 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %0, i64 0, i32 0, i32 0, i32 0
  %24 = load %"class.WTF::String"*, %"class.WTF::String"** %23, align 8
  %25 = zext i32 %1 to i64
  %26 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %24, i64 %25
  ret %"class.WTF::String"* %26
}

declare void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* sret, i8*, i32, %"class.logging::CheckOpResult"*) local_unnamed_addr #4

declare dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"*) local_unnamed_addr #4

; Function Attrs: nounwind
declare void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"*) unnamed_addr #5

declare i8* @_ZN7logging15CheckOpValueStrEj(i32) local_unnamed_addr #4

declare void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"*, i8*, i8*, i8*) unnamed_addr #4

declare zeroext i1 @_ZN3WTF15EqualStringViewERKNS_10StringViewES2_(%"class.WTF::StringView"* dereferenceable(24), %"class.WTF::StringView"* dereferenceable(24)) local_unnamed_addr #4

; Function Attrs: cold noreturn nounwind
declare void @llvm.trap() #6

; Function Attrs: noinline nounwind ssp uwtable
define linkonce_odr hidden void @_ZN3WTF6VectorINS_6StringELj0ENS_18PartitionAllocatorEE14AppendSlowCaseIRKS1_EEvOT_(%"class.WTF::Vector"*, %"class.WTF::String"* dereferenceable(8)) local_unnamed_addr #7 comdat align 2 {
  %3 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %0, i64 0, i32 0, i32 0, i32 2
  %4 = load i32, i32* %3, align 4
  %5 = add i32 %4, 1
  %6 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %0, i64 0, i32 0, i32 0, i32 0
  %7 = load %"class.WTF::String"*, %"class.WTF::String"** %6, align 8
  %8 = icmp ugt %"class.WTF::String"* %7, %1
  br i1 %8, label %13, label %9

9:                                                ; preds = %2
  %10 = zext i32 %4 to i64
  %11 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %7, i64 %10
  %12 = icmp ugt %"class.WTF::String"* %11, %1
  br i1 %12, label %54, label %13

13:                                               ; preds = %9, %2
  %14 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %0, i64 0, i32 0, i32 0, i32 1
  %15 = load i32, i32* %14, align 8
  %16 = lshr i32 %15, 2
  %17 = add i32 %15, 1
  %18 = add i32 %17, %16
  %19 = icmp ugt i32 %18, 4
  %20 = select i1 %19, i32 %18, i32 4
  %21 = icmp ugt i32 %20, %5
  %22 = select i1 %21, i32 %20, i32 %5
  %23 = icmp ult i32 %15, %22
  br i1 %23, label %24, label %99, !prof !4

24:                                               ; preds = %13
  %25 = icmp eq %"class.WTF::String"* %7, null
  %26 = zext i32 %22 to i64
  %27 = tail call i64 @_ZN3WTF18PartitionAllocator13QuantizedSizeINS_6StringEEEmm(i64 %26) #9
  %28 = tail call i8* @_ZN3WTF18PartitionAllocator15AllocateBackingEmPKc(i64 %27, i8* getelementptr inbounds ([59 x i8], [59 x i8]* @__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameINS_6StringEEEPKcv, i64 0, i64 0)) #9
  br i1 %25, label %29, label %35

29:                                               ; preds = %24
  %30 = ptrtoint i8* %28 to i64
  %31 = bitcast %"class.WTF::Vector"* %0 to i64*
  store atomic i64 %30, i64* %31 monotonic, align 8
  %32 = lshr i64 %27, 3
  %33 = trunc i64 %32 to i32
  store i32 %33, i32* %14, align 8
  %34 = bitcast i8* %28 to %"class.WTF::String"*
  br label %99

35:                                               ; preds = %24
  %36 = lshr i64 %27, 3
  %37 = ptrtoint i8* %28 to i64
  %38 = load %"class.WTF::String"*, %"class.WTF::String"** %6, align 8
  %39 = icmp ne i8* %28, null
  %40 = icmp ne %"class.WTF::String"* %38, null
  %41 = and i1 %39, %40
  %42 = bitcast %"class.WTF::String"* %38 to i8*
  br i1 %41, label %43, label %49, !prof !4

43:                                               ; preds = %35
  %44 = load i32, i32* %3, align 4
  %45 = zext i32 %44 to i64
  %46 = shl nuw nsw i64 %45, 3
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %28, i8* nonnull align 8 %42, i64 %46, i1 false) #9
  %47 = bitcast %"class.WTF::Vector"* %0 to i8**
  %48 = load i8*, i8** %47, align 8
  br label %49

49:                                               ; preds = %43, %35
  %50 = phi i8* [ %48, %43 ], [ %42, %35 ]
  tail call void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8* %50) #9
  %51 = bitcast %"class.WTF::Vector"* %0 to i64*
  store atomic i64 %37, i64* %51 monotonic, align 8
  %52 = trunc i64 %36 to i32
  store i32 %52, i32* %14, align 8
  %53 = bitcast i8* %28 to %"class.WTF::String"*
  br label %99

54:                                               ; preds = %9
  %55 = ptrtoint %"class.WTF::String"* %1 to i64
  %56 = ptrtoint %"class.WTF::String"* %7 to i64
  %57 = sub i64 %55, %56
  %58 = ashr exact i64 %57, 3
  %59 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %0, i64 0, i32 0, i32 0, i32 1
  %60 = load i32, i32* %59, align 8
  %61 = lshr i32 %60, 2
  %62 = add i32 %60, 1
  %63 = add i32 %62, %61
  %64 = icmp ugt i32 %63, 4
  %65 = select i1 %64, i32 %63, i32 4
  %66 = icmp ugt i32 %65, %5
  %67 = select i1 %66, i32 %65, i32 %5
  %68 = icmp ult i32 %60, %67
  br i1 %68, label %69, label %96, !prof !4

69:                                               ; preds = %54
  %70 = icmp eq %"class.WTF::String"* %7, null
  %71 = zext i32 %67 to i64
  %72 = tail call i64 @_ZN3WTF18PartitionAllocator13QuantizedSizeINS_6StringEEEmm(i64 %71) #9
  %73 = tail call i8* @_ZN3WTF18PartitionAllocator15AllocateBackingEmPKc(i64 %72, i8* getelementptr inbounds ([59 x i8], [59 x i8]* @__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameINS_6StringEEEPKcv, i64 0, i64 0)) #9
  %74 = ptrtoint i8* %73 to i64
  br i1 %70, label %75, label %77

75:                                               ; preds = %69
  %76 = bitcast %"class.WTF::Vector"* %0 to i64*
  store atomic i64 %74, i64* %76 monotonic, align 8
  br label %92

77:                                               ; preds = %69
  %78 = load %"class.WTF::String"*, %"class.WTF::String"** %6, align 8
  %79 = icmp ne i8* %73, null
  %80 = icmp ne %"class.WTF::String"* %78, null
  %81 = and i1 %79, %80
  %82 = bitcast %"class.WTF::String"* %78 to i8*
  br i1 %81, label %83, label %89, !prof !4

83:                                               ; preds = %77
  %84 = load i32, i32* %3, align 4
  %85 = zext i32 %84 to i64
  %86 = shl nuw nsw i64 %85, 3
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %73, i8* nonnull align 8 %82, i64 %86, i1 false) #9
  %87 = bitcast %"class.WTF::Vector"* %0 to i8**
  %88 = load i8*, i8** %87, align 8
  br label %89

89:                                               ; preds = %83, %77
  %90 = phi i8* [ %88, %83 ], [ %82, %77 ]
  tail call void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8* %90) #9
  %91 = bitcast %"class.WTF::Vector"* %0 to i64*
  store atomic i64 %74, i64* %91 monotonic, align 8
  br label %92

92:                                               ; preds = %89, %75
  %93 = lshr i64 %72, 3
  %94 = trunc i64 %93 to i32
  store i32 %94, i32* %59, align 8
  %95 = bitcast i8* %73 to %"class.WTF::String"*
  br label %96

96:                                               ; preds = %92, %54
  %97 = phi %"class.WTF::String"* [ %7, %54 ], [ %95, %92 ]
  %98 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %97, i64 %58
  br label %99

99:                                               ; preds = %49, %29, %13, %96
  %100 = phi %"class.WTF::String"* [ %97, %96 ], [ %7, %13 ], [ %34, %29 ], [ %53, %49 ]
  %101 = phi %"class.WTF::String"* [ %98, %96 ], [ %1, %13 ], [ %1, %29 ], [ %1, %49 ]
  %102 = load i32, i32* %3, align 4
  %103 = zext i32 %102 to i64
  %104 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %101, i64 0, i32 0, i32 0
  %105 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %104, align 8
  %106 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %100, i64 %103, i32 0, i32 0
  store %"class.WTF::StringImpl"* %105, %"class.WTF::StringImpl"** %106, align 8
  %107 = icmp eq %"class.WTF::StringImpl"* %105, null
  br i1 %107, label %125, label %108

108:                                              ; preds = %99
  %109 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %105, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %110 = load atomic i32, i32* %109 monotonic, align 4
  %111 = and i32 %110, 2
  %112 = icmp eq i32 %111, 0
  br i1 %112, label %113, label %125

113:                                              ; preds = %108
  %114 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %105, i64 0, i32 0
  %115 = load i32, i32* %114, align 4
  %116 = zext i32 %115 to i33
  %117 = tail call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %116, i33 1) #9
  %118 = extractvalue { i33, i1 } %117, 1
  %119 = extractvalue { i33, i1 } %117, 0
  %120 = icmp slt i33 %119, 0
  %121 = or i1 %118, %120
  br i1 %121, label %122, label %123, !prof !3

122:                                              ; preds = %113
  tail call void @llvm.trap() #9
  unreachable

123:                                              ; preds = %113
  %124 = trunc i33 %119 to i32
  store i32 %124, i32* %114, align 4
  br label %125

125:                                              ; preds = %99, %108, %123
  %126 = load i32, i32* %3, align 4
  %127 = add i32 %126, 1
  store i32 %127, i32* %3, align 4
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i64 @_ZN3WTF18PartitionAllocator13QuantizedSizeINS_6StringEEEmm(i64) local_unnamed_addr #2 comdat align 2 {
  %2 = alloca %"class.logging::CheckOpResult", align 8
  %3 = alloca %"class.logging::CheckOpResult", align 8
  %4 = alloca %"class.logging::CheckError", align 8
  %5 = bitcast %"class.logging::CheckOpResult"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %5) #9
  %6 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %3, i64 0, i32 0
  store i8* inttoptr (i64 -6148914691236517206 to i8*), i8** %6, align 8
  %7 = bitcast %"class.logging::CheckOpResult"* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %7)
  %8 = icmp ugt i64 %0, 268173312
  br i1 %8, label %10, label %9

9:                                                ; preds = %1
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %7)
  store i8* null, i8** %6, align 8
  br label %19

10:                                               ; preds = %1
  %11 = tail call i8* @_ZN7logging15CheckOpValueStrEm(i64 %0) #9
  %12 = tail call i8* @_ZN7logging15CheckOpValueStrEm(i64 268173312) #9
  call void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"* nonnull %2, i8* getelementptr inbounds ([44 x i8], [44 x i8]* @.str.5, i64 0, i64 0), i8* %11, i8* %12) #9
  %13 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %2, i64 0, i32 0
  %14 = load i8*, i8** %13, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %7)
  store i8* %14, i8** %6, align 8
  %15 = icmp eq i8* %14, null
  br i1 %15, label %19, label %16

16:                                               ; preds = %10
  %17 = bitcast %"class.logging::CheckError"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %17) #9
  call void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* nonnull sret %4, i8* getelementptr inbounds ([78 x i8], [78 x i8]* @.str.6, i64 0, i64 0), i32 31, %"class.logging::CheckOpResult"* nonnull %3) #9
  %18 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %4) #9
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %4) #9
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %17) #9
  br label %19

19:                                               ; preds = %9, %10, %16
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %5) #9
  %20 = shl i64 %0, 3
  %21 = call i64 @_ZN3WTF10Partitions23BufferPotentialCapacityEm(i64 %20) #9
  ret i64 %21
}

declare i64 @_ZN3WTF10Partitions23BufferPotentialCapacityEm(i64) local_unnamed_addr #4

declare i8* @_ZN7logging15CheckOpValueStrEm(i64) local_unnamed_addr #4

declare i8* @_ZN3WTF18PartitionAllocator15AllocateBackingEmPKc(i64, i8*) local_unnamed_addr #4

declare void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8*) local_unnamed_addr #4

; Function Attrs: nounwind readnone speculatable
declare { i33, i1 } @llvm.sadd.with.overflow.i33(i33, i33) #8

declare void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"*) local_unnamed_addr #4

declare void @_ZN3WTF6StringC2EPKcm(%"class.WTF::String"*, i8*, i64) unnamed_addr #4

declare %"class.WTF::StringImpl"* @_ZN3WTF10StringImpl6CreateEPKhj(i8*, i32) local_unnamed_addr #4

attributes #0 = { nofree norecurse nounwind ssp uwtable writeonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { norecurse nounwind readonly ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { argmemonly nounwind }
attributes #4 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { cold noreturn nounwind }
attributes #7 = { noinline nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { nounwind readnone speculatable }
attributes #9 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{i8 0, i8 2}
!3 = !{!"branch_weights", i32 1, i32 2000}
!4 = !{!"branch_weights", i32 2000, i32 1}
