; ModuleID = '../../third_party/webrtc/modules/audio_coding/neteq/timestamp_scaler.cc'
source_filename = "../../third_party/webrtc/modules/audio_coding/neteq/timestamp_scaler.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.webrtc::TimestampScaler" = type { i32 (...)**, i8, i32, i32, i32, i32, %"class.webrtc::DecoderDatabase"* }
%"class.webrtc::DecoderDatabase" = type { i32 (...)**, %"class.std::__1::map", i32, i32, %"class.std::__1::unique_ptr", %"class.rtc::scoped_refptr", %"class.absl::optional" }
%"class.std::__1::map" = type { %"class.std::__1::__tree" }
%"class.std::__1::__tree" = type { %"class.std::__1::__tree_end_node"*, %"class.std::__1::__compressed_pair", %"class.std::__1::__compressed_pair.1" }
%"class.std::__1::__tree_end_node" = type { %"class.std::__1::__tree_node_base"* }
%"class.std::__1::__tree_node_base" = type opaque
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %"class.std::__1::__tree_end_node" }
%"class.std::__1::__compressed_pair.1" = type { %"struct.std::__1::__compressed_pair_elem.2" }
%"struct.std::__1::__compressed_pair_elem.2" = type { i64 }
%"class.std::__1::unique_ptr" = type { %"class.std::__1::__compressed_pair.4" }
%"class.std::__1::__compressed_pair.4" = type { %"struct.std::__1::__compressed_pair_elem.5" }
%"struct.std::__1::__compressed_pair_elem.5" = type { %"class.webrtc::ComfortNoiseDecoder"* }
%"class.webrtc::ComfortNoiseDecoder" = type <{ i32, i32, i32, [13 x i16], [13 x i16], [13 x i16], [13 x i16], i16, i16, i16, [2 x i8] }>
%"class.rtc::scoped_refptr" = type { %"class.webrtc::AudioDecoderFactory"* }
%"class.webrtc::AudioDecoderFactory" = type { %"class.rtc::RefCountInterface" }
%"class.rtc::RefCountInterface" = type { i32 (...)** }
%"class.absl::optional" = type { %"class.absl::optional_internal::optional_data" }
%"class.absl::optional_internal::optional_data" = type { %"class.absl::optional_internal::optional_data_base" }
%"class.absl::optional_internal::optional_data_base" = type { %"class.absl::optional_internal::optional_data_dtor_base" }
%"class.absl::optional_internal::optional_data_dtor_base" = type { i8, %union.anon }
%union.anon = type { %"class.webrtc::AudioCodecPairId" }
%"class.webrtc::AudioCodecPairId" = type { i64 }
%"struct.webrtc::Packet" = type { i32, i16, i8, %"class.rtc::BufferT", %"struct.webrtc::Packet::Priority", %"class.webrtc::RtpPacketInfo", %"class.std::__1::unique_ptr.33", %"class.std::__1::unique_ptr.39" }
%"class.rtc::BufferT" = type { i64, i64, %"class.std::__1::unique_ptr.7" }
%"class.std::__1::unique_ptr.7" = type { %"class.std::__1::__compressed_pair.8" }
%"class.std::__1::__compressed_pair.8" = type { %"struct.std::__1::__compressed_pair_elem.9" }
%"struct.std::__1::__compressed_pair_elem.9" = type { i8* }
%"struct.webrtc::Packet::Priority" = type { i32, i32 }
%"class.webrtc::RtpPacketInfo" = type { i32, %"class.std::__1::vector", i32, %"class.absl::optional.18", %"class.absl::optional.23", %"class.absl::optional.28", %"class.webrtc::Timestamp" }
%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { i32*, i32*, %"class.std::__1::__compressed_pair.13" }
%"class.std::__1::__compressed_pair.13" = type { %"struct.std::__1::__compressed_pair_elem.14" }
%"struct.std::__1::__compressed_pair_elem.14" = type { i32* }
%"class.absl::optional.18" = type { %"class.absl::optional_internal::optional_data.19" }
%"class.absl::optional_internal::optional_data.19" = type { %"class.absl::optional_internal::optional_data_base.20" }
%"class.absl::optional_internal::optional_data_base.20" = type { %"class.absl::optional_internal::optional_data_dtor_base.21" }
%"class.absl::optional_internal::optional_data_dtor_base.21" = type { i8, %union.anon.22 }
%union.anon.22 = type { i8 }
%"class.absl::optional.23" = type { %"class.absl::optional_internal::optional_data.24" }
%"class.absl::optional_internal::optional_data.24" = type { %"class.absl::optional_internal::optional_data_base.25" }
%"class.absl::optional_internal::optional_data_base.25" = type { %"class.absl::optional_internal::optional_data_dtor_base.26" }
%"class.absl::optional_internal::optional_data_dtor_base.26" = type { i8, %union.anon.27 }
%union.anon.27 = type { %"struct.webrtc::AbsoluteCaptureTime" }
%"struct.webrtc::AbsoluteCaptureTime" = type { i64, %"class.absl::optional.28" }
%"class.absl::optional.28" = type { %"class.absl::optional_internal::optional_data.29" }
%"class.absl::optional_internal::optional_data.29" = type { %"class.absl::optional_internal::optional_data_base.30" }
%"class.absl::optional_internal::optional_data_base.30" = type { %"class.absl::optional_internal::optional_data_dtor_base.31" }
%"class.absl::optional_internal::optional_data_dtor_base.31" = type { i8, %union.anon.32 }
%union.anon.32 = type { i64 }
%"class.webrtc::Timestamp" = type { %"class.webrtc::rtc_units_impl::UnitBase" }
%"class.webrtc::rtc_units_impl::UnitBase" = type { i64 }
%"class.std::__1::unique_ptr.33" = type { %"class.std::__1::__compressed_pair.34" }
%"class.std::__1::__compressed_pair.34" = type { %"struct.std::__1::__compressed_pair_elem.35" }
%"struct.std::__1::__compressed_pair_elem.35" = type { %"class.webrtc::TickTimer::Stopwatch"* }
%"class.webrtc::TickTimer::Stopwatch" = type { %"class.webrtc::TickTimer"*, i64 }
%"class.webrtc::TickTimer" = type <{ i64, i32, [4 x i8] }>
%"class.std::__1::unique_ptr.39" = type { %"class.std::__1::__compressed_pair.40" }
%"class.std::__1::__compressed_pair.40" = type { %"struct.std::__1::__compressed_pair_elem.41" }
%"struct.std::__1::__compressed_pair_elem.41" = type { %"class.webrtc::AudioDecoder::EncodedAudioFrame"* }
%"class.webrtc::AudioDecoder::EncodedAudioFrame" = type { i32 (...)** }
%"class.std::__1::list" = type { %"class.std::__1::__list_imp" }
%"class.std::__1::__list_imp" = type { %"struct.std::__1::__list_node_base", %"class.std::__1::__compressed_pair.45" }
%"struct.std::__1::__list_node_base" = type { %"struct.std::__1::__list_node_base"*, %"struct.std::__1::__list_node_base"* }
%"class.std::__1::__compressed_pair.45" = type { %"struct.std::__1::__compressed_pair_elem.2" }
%"struct.std::__1::__list_node" = type { %"struct.std::__1::__list_node_base", %"struct.webrtc::Packet" }
%"class.webrtc::DecoderDatabase::DecoderInfo" = type <{ %"class.std::__1::basic_string", %"struct.webrtc::SdpAudioFormat", %"class.absl::optional", %"class.webrtc::AudioDecoderFactory"*, %"class.std::__1::unique_ptr.66", %"class.absl::optional.72", i8, [7 x i8] }>
%"class.std::__1::basic_string" = type { %"class.std::__1::__compressed_pair.49" }
%"class.std::__1::__compressed_pair.49" = type { %"struct.std::__1::__compressed_pair_elem.50" }
%"struct.std::__1::__compressed_pair_elem.50" = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" = type { %union.anon.51 }
%union.anon.51 = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" = type { i8*, i64, i64 }
%"struct.webrtc::SdpAudioFormat" = type { %"class.std::__1::basic_string", i32, i64, %"class.std::__1::map.55" }
%"class.std::__1::map.55" = type { %"class.std::__1::__tree.56" }
%"class.std::__1::__tree.56" = type { %"class.std::__1::__tree_end_node"*, %"class.std::__1::__compressed_pair.57", %"class.std::__1::__compressed_pair.61" }
%"class.std::__1::__compressed_pair.57" = type { %"struct.std::__1::__compressed_pair_elem" }
%"class.std::__1::__compressed_pair.61" = type { %"struct.std::__1::__compressed_pair_elem.2" }
%"class.std::__1::unique_ptr.66" = type { %"class.std::__1::__compressed_pair.67" }
%"class.std::__1::__compressed_pair.67" = type { %"struct.std::__1::__compressed_pair_elem.68" }
%"struct.std::__1::__compressed_pair_elem.68" = type { %"class.webrtc::AudioDecoder"* }
%"class.webrtc::AudioDecoder" = type { i32 (...)** }
%"class.absl::optional.72" = type { %"class.absl::optional_internal::optional_data.73" }
%"class.absl::optional_internal::optional_data.73" = type { %"class.absl::optional_internal::optional_data_base.74" }
%"class.absl::optional_internal::optional_data_base.74" = type { %"class.absl::optional_internal::optional_data_dtor_base.75" }
%"class.absl::optional_internal::optional_data_dtor_base.75" = type { i8, %union.anon.76 }
%union.anon.76 = type { %"struct.webrtc::DecoderDatabase::DecoderInfo::CngDecoder" }
%"struct.webrtc::DecoderDatabase::DecoderInfo::CngDecoder" = type { i32 }

$_ZN6webrtc15TimestampScalerD2Ev = comdat any

$_ZN6webrtc15TimestampScalerD0Ev = comdat any

@_ZTVN6webrtc15TimestampScalerE = hidden unnamed_addr constant { [9 x i8*] } { [9 x i8*] [i8* null, i8* null, i8* bitcast (void (%"class.webrtc::TimestampScaler"*)* @_ZN6webrtc15TimestampScalerD2Ev to i8*), i8* bitcast (void (%"class.webrtc::TimestampScaler"*)* @_ZN6webrtc15TimestampScalerD0Ev to i8*), i8* bitcast (void (%"class.webrtc::TimestampScaler"*)* @_ZN6webrtc15TimestampScaler5ResetEv to i8*), i8* bitcast (void (%"class.webrtc::TimestampScaler"*, %"struct.webrtc::Packet"*)* @_ZN6webrtc15TimestampScaler10ToInternalEPNS_6PacketE to i8*), i8* bitcast (void (%"class.webrtc::TimestampScaler"*, %"class.std::__1::list"*)* @_ZN6webrtc15TimestampScaler10ToInternalEPNSt3__14listINS_6PacketENS1_9allocatorIS3_EEEE to i8*), i8* bitcast (i32 (%"class.webrtc::TimestampScaler"*, i32, i8)* @_ZN6webrtc15TimestampScaler10ToInternalEjh to i8*), i8* bitcast (i32 (%"class.webrtc::TimestampScaler"*, i32)* @_ZNK6webrtc15TimestampScaler10ToExternalEj to i8*)] }, align 8

; Function Attrs: nofree norecurse nounwind ssp uwtable writeonly
define hidden void @_ZN6webrtc15TimestampScaler5ResetEv(%"class.webrtc::TimestampScaler"* nocapture) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.webrtc::TimestampScaler", %"class.webrtc::TimestampScaler"* %0, i64 0, i32 1
  store i8 0, i8* %2, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN6webrtc15TimestampScaler10ToInternalEPNS_6PacketE(%"class.webrtc::TimestampScaler"*, %"struct.webrtc::Packet"*) unnamed_addr #1 align 2 {
  %3 = icmp eq %"struct.webrtc::Packet"* %1, null
  br i1 %3, label %14, label %4

4:                                                ; preds = %2
  %5 = getelementptr inbounds %"struct.webrtc::Packet", %"struct.webrtc::Packet"* %1, i64 0, i32 0
  %6 = load i32, i32* %5, align 8
  %7 = getelementptr inbounds %"struct.webrtc::Packet", %"struct.webrtc::Packet"* %1, i64 0, i32 2
  %8 = load i8, i8* %7, align 2
  %9 = bitcast %"class.webrtc::TimestampScaler"* %0 to i32 (%"class.webrtc::TimestampScaler"*, i32, i8)***
  %10 = load i32 (%"class.webrtc::TimestampScaler"*, i32, i8)**, i32 (%"class.webrtc::TimestampScaler"*, i32, i8)*** %9, align 8
  %11 = getelementptr inbounds i32 (%"class.webrtc::TimestampScaler"*, i32, i8)*, i32 (%"class.webrtc::TimestampScaler"*, i32, i8)** %10, i64 5
  %12 = load i32 (%"class.webrtc::TimestampScaler"*, i32, i8)*, i32 (%"class.webrtc::TimestampScaler"*, i32, i8)** %11, align 8
  %13 = tail call i32 %12(%"class.webrtc::TimestampScaler"* %0, i32 %6, i8 zeroext %8) #6
  store i32 %13, i32* %5, align 8
  br label %14

14:                                               ; preds = %2, %4
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN6webrtc15TimestampScaler10ToInternalEPNSt3__14listINS_6PacketENS1_9allocatorIS3_EEEE(%"class.webrtc::TimestampScaler"*, %"class.std::__1::list"*) unnamed_addr #1 align 2 {
  %3 = getelementptr inbounds %"class.std::__1::list", %"class.std::__1::list"* %1, i64 0, i32 0, i32 0, i32 1
  %4 = bitcast %"struct.std::__1::__list_node_base"** %3 to i64*
  %5 = load i64, i64* %4, align 8
  %6 = getelementptr inbounds %"class.std::__1::list", %"class.std::__1::list"* %1, i64 0, i32 0, i32 0
  %7 = inttoptr i64 %5 to %"struct.std::__1::__list_node_base"*
  %8 = icmp eq %"struct.std::__1::__list_node_base"* %6, %7
  br i1 %8, label %24, label %9

9:                                                ; preds = %2
  %10 = bitcast %"class.webrtc::TimestampScaler"* %0 to void (%"class.webrtc::TimestampScaler"*, %"struct.webrtc::Packet"*)***
  br label %11

11:                                               ; preds = %9, %11
  %12 = phi %"struct.std::__1::__list_node_base"* [ %7, %9 ], [ %22, %11 ]
  %13 = phi i64 [ %5, %9 ], [ %21, %11 ]
  %14 = inttoptr i64 %13 to %"struct.std::__1::__list_node"*
  %15 = getelementptr inbounds %"struct.std::__1::__list_node", %"struct.std::__1::__list_node"* %14, i64 0, i32 1
  %16 = load void (%"class.webrtc::TimestampScaler"*, %"struct.webrtc::Packet"*)**, void (%"class.webrtc::TimestampScaler"*, %"struct.webrtc::Packet"*)*** %10, align 8
  %17 = getelementptr inbounds void (%"class.webrtc::TimestampScaler"*, %"struct.webrtc::Packet"*)*, void (%"class.webrtc::TimestampScaler"*, %"struct.webrtc::Packet"*)** %16, i64 3
  %18 = load void (%"class.webrtc::TimestampScaler"*, %"struct.webrtc::Packet"*)*, void (%"class.webrtc::TimestampScaler"*, %"struct.webrtc::Packet"*)** %17, align 8
  tail call void %18(%"class.webrtc::TimestampScaler"* %0, %"struct.webrtc::Packet"* %15) #6
  %19 = getelementptr inbounds %"struct.std::__1::__list_node_base", %"struct.std::__1::__list_node_base"* %12, i64 0, i32 1
  %20 = bitcast %"struct.std::__1::__list_node_base"** %19 to i64*
  %21 = load i64, i64* %20, align 8
  %22 = inttoptr i64 %21 to %"struct.std::__1::__list_node_base"*
  %23 = icmp eq %"struct.std::__1::__list_node_base"* %6, %22
  br i1 %23, label %24, label %11

24:                                               ; preds = %11, %2
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @_ZN6webrtc15TimestampScaler10ToInternalEjh(%"class.webrtc::TimestampScaler"* nocapture, i32, i8 zeroext) unnamed_addr #1 align 2 {
  %4 = getelementptr inbounds %"class.webrtc::TimestampScaler", %"class.webrtc::TimestampScaler"* %0, i64 0, i32 6
  %5 = load %"class.webrtc::DecoderDatabase"*, %"class.webrtc::DecoderDatabase"** %4, align 8
  %6 = bitcast %"class.webrtc::DecoderDatabase"* %5 to %"class.webrtc::DecoderDatabase::DecoderInfo"* (%"class.webrtc::DecoderDatabase"*, i8)***
  %7 = load %"class.webrtc::DecoderDatabase::DecoderInfo"* (%"class.webrtc::DecoderDatabase"*, i8)**, %"class.webrtc::DecoderDatabase::DecoderInfo"* (%"class.webrtc::DecoderDatabase"*, i8)*** %6, align 8
  %8 = getelementptr inbounds %"class.webrtc::DecoderDatabase::DecoderInfo"* (%"class.webrtc::DecoderDatabase"*, i8)*, %"class.webrtc::DecoderDatabase::DecoderInfo"* (%"class.webrtc::DecoderDatabase"*, i8)** %7, i64 9
  %9 = load %"class.webrtc::DecoderDatabase::DecoderInfo"* (%"class.webrtc::DecoderDatabase"*, i8)*, %"class.webrtc::DecoderDatabase::DecoderInfo"* (%"class.webrtc::DecoderDatabase"*, i8)** %8, align 8
  %10 = tail call %"class.webrtc::DecoderDatabase::DecoderInfo"* %9(%"class.webrtc::DecoderDatabase"* %5, i8 zeroext %2) #6
  %11 = icmp eq %"class.webrtc::DecoderDatabase::DecoderInfo"* %10, null
  br i1 %11, label %77, label %12

12:                                               ; preds = %3
  %13 = getelementptr inbounds %"class.webrtc::DecoderDatabase::DecoderInfo", %"class.webrtc::DecoderDatabase::DecoderInfo"* %10, i64 0, i32 6
  %14 = load i8, i8* %13, align 8
  %15 = add i8 %14, -1
  %16 = icmp ult i8 %15, 2
  br i1 %16, label %17, label %22

17:                                               ; preds = %12
  %18 = getelementptr inbounds %"class.webrtc::TimestampScaler", %"class.webrtc::TimestampScaler"* %0, i64 0, i32 2
  %19 = load i32, i32* %18, align 4
  %20 = getelementptr inbounds %"class.webrtc::TimestampScaler", %"class.webrtc::TimestampScaler"* %0, i64 0, i32 3
  %21 = load i32, i32* %20, align 8
  br label %48

22:                                               ; preds = %12
  %23 = tail call %"class.webrtc::AudioDecoder"* @_ZNK6webrtc15DecoderDatabase11DecoderInfo10GetDecoderEv(%"class.webrtc::DecoderDatabase::DecoderInfo"* nonnull %10) #6
  %24 = icmp eq %"class.webrtc::AudioDecoder"* %23, null
  br i1 %24, label %31, label %25

25:                                               ; preds = %22
  %26 = bitcast %"class.webrtc::AudioDecoder"* %23 to i32 (%"class.webrtc::AudioDecoder"*)***
  %27 = load i32 (%"class.webrtc::AudioDecoder"*)**, i32 (%"class.webrtc::AudioDecoder"*)*** %26, align 8
  %28 = getelementptr inbounds i32 (%"class.webrtc::AudioDecoder"*)*, i32 (%"class.webrtc::AudioDecoder"*)** %27, i64 11
  %29 = load i32 (%"class.webrtc::AudioDecoder"*)*, i32 (%"class.webrtc::AudioDecoder"*)** %28, align 8
  %30 = tail call i32 %29(%"class.webrtc::AudioDecoder"* nonnull %23) #6
  br label %39

31:                                               ; preds = %22
  %32 = getelementptr inbounds %"class.webrtc::DecoderDatabase::DecoderInfo", %"class.webrtc::DecoderDatabase::DecoderInfo"* %10, i64 0, i32 5, i32 0, i32 0, i32 0, i32 0
  %33 = load i8, i8* %32, align 4, !range !2
  %34 = icmp eq i8 %33, 0
  br i1 %34, label %35, label %36, !prof !3

35:                                               ; preds = %31
  tail call void @llvm.trap() #6
  unreachable

36:                                               ; preds = %31
  %37 = getelementptr inbounds %"class.webrtc::DecoderDatabase::DecoderInfo", %"class.webrtc::DecoderDatabase::DecoderInfo"* %10, i64 0, i32 5, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0
  %38 = load i32, i32* %37, align 4
  br label %39

39:                                               ; preds = %25, %36
  %40 = phi i32 [ %30, %25 ], [ %38, %36 ]
  %41 = getelementptr inbounds %"class.webrtc::TimestampScaler", %"class.webrtc::TimestampScaler"* %0, i64 0, i32 2
  store i32 %40, i32* %41, align 4
  %42 = getelementptr inbounds %"class.webrtc::DecoderDatabase::DecoderInfo", %"class.webrtc::DecoderDatabase::DecoderInfo"* %10, i64 0, i32 1, i32 1
  %43 = load i32, i32* %42, align 8
  %44 = icmp eq i32 %43, 0
  %45 = getelementptr inbounds %"class.webrtc::TimestampScaler", %"class.webrtc::TimestampScaler"* %0, i64 0, i32 3
  br i1 %44, label %46, label %47

46:                                               ; preds = %39
  store i32 %40, i32* %45, align 8
  br label %77

47:                                               ; preds = %39
  store i32 %43, i32* %45, align 8
  br label %48

48:                                               ; preds = %17, %47
  %49 = phi i32 [ %21, %17 ], [ %43, %47 ]
  %50 = phi i32 [ %19, %17 ], [ %40, %47 ]
  %51 = icmp eq i32 %50, %49
  br i1 %51, label %77, label %52

52:                                               ; preds = %48
  %53 = getelementptr inbounds %"class.webrtc::TimestampScaler", %"class.webrtc::TimestampScaler"* %0, i64 0, i32 1
  %54 = load i8, i8* %53, align 8, !range !2
  %55 = icmp eq i8 %54, 0
  %56 = getelementptr inbounds %"class.webrtc::TimestampScaler", %"class.webrtc::TimestampScaler"* %0, i64 0, i32 4
  br i1 %55, label %61, label %57

57:                                               ; preds = %52
  %58 = load i32, i32* %56, align 4
  %59 = getelementptr inbounds %"class.webrtc::TimestampScaler", %"class.webrtc::TimestampScaler"* %0, i64 0, i32 5
  %60 = load i32, i32* %59, align 8
  br label %63

61:                                               ; preds = %52
  store i32 %1, i32* %56, align 4
  %62 = getelementptr inbounds %"class.webrtc::TimestampScaler", %"class.webrtc::TimestampScaler"* %0, i64 0, i32 5
  store i32 %1, i32* %62, align 8
  store i8 1, i8* %53, align 8
  br label %63

63:                                               ; preds = %57, %61
  %64 = phi i32 [ %60, %57 ], [ %1, %61 ]
  %65 = phi i32 [ %58, %57 ], [ %1, %61 ]
  %66 = zext i32 %1 to i64
  %67 = getelementptr inbounds %"class.webrtc::TimestampScaler", %"class.webrtc::TimestampScaler"* %0, i64 0, i32 4
  %68 = zext i32 %65 to i64
  %69 = sub nsw i64 %66, %68
  store i32 %1, i32* %67, align 4
  %70 = sext i32 %50 to i64
  %71 = mul nsw i64 %69, %70
  %72 = sext i32 %49 to i64
  %73 = sdiv i64 %71, %72
  %74 = getelementptr inbounds %"class.webrtc::TimestampScaler", %"class.webrtc::TimestampScaler"* %0, i64 0, i32 5
  %75 = trunc i64 %73 to i32
  %76 = add i32 %64, %75
  store i32 %76, i32* %74, align 8
  br label %77

77:                                               ; preds = %46, %48, %3, %63
  %78 = phi i32 [ %76, %63 ], [ %1, %3 ], [ %1, %48 ], [ %1, %46 ]
  ret i32 %78
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden i32 @_ZNK6webrtc15TimestampScaler10ToExternalEj(%"class.webrtc::TimestampScaler"* nocapture readonly, i32) unnamed_addr #2 align 2 {
  %3 = getelementptr inbounds %"class.webrtc::TimestampScaler", %"class.webrtc::TimestampScaler"* %0, i64 0, i32 1
  %4 = load i8, i8* %3, align 8, !range !2
  %5 = icmp eq i8 %4, 0
  br i1 %5, label %26, label %6

6:                                                ; preds = %2
  %7 = getelementptr inbounds %"class.webrtc::TimestampScaler", %"class.webrtc::TimestampScaler"* %0, i64 0, i32 2
  %8 = load i32, i32* %7, align 4
  %9 = getelementptr inbounds %"class.webrtc::TimestampScaler", %"class.webrtc::TimestampScaler"* %0, i64 0, i32 3
  %10 = load i32, i32* %9, align 8
  %11 = icmp eq i32 %8, %10
  br i1 %11, label %26, label %12

12:                                               ; preds = %6
  %13 = zext i32 %1 to i64
  %14 = getelementptr inbounds %"class.webrtc::TimestampScaler", %"class.webrtc::TimestampScaler"* %0, i64 0, i32 5
  %15 = load i32, i32* %14, align 8
  %16 = zext i32 %15 to i64
  %17 = sub nsw i64 %13, %16
  %18 = getelementptr inbounds %"class.webrtc::TimestampScaler", %"class.webrtc::TimestampScaler"* %0, i64 0, i32 4
  %19 = load i32, i32* %18, align 4
  %20 = sext i32 %10 to i64
  %21 = mul nsw i64 %17, %20
  %22 = sext i32 %8 to i64
  %23 = sdiv i64 %21, %22
  %24 = trunc i64 %23 to i32
  %25 = add i32 %19, %24
  br label %26

26:                                               ; preds = %6, %2, %12
  %27 = phi i32 [ %25, %12 ], [ %1, %2 ], [ %1, %6 ]
  ret i32 %27
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN6webrtc15TimestampScalerD2Ev(%"class.webrtc::TimestampScaler"*) unnamed_addr #1 comdat align 2 {
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN6webrtc15TimestampScalerD0Ev(%"class.webrtc::TimestampScaler"*) unnamed_addr #1 comdat align 2 {
  %2 = bitcast %"class.webrtc::TimestampScaler"* %0 to i8*
  tail call void @_ZdlPv(i8* %2) #7
  ret void
}

declare %"class.webrtc::AudioDecoder"* @_ZNK6webrtc15DecoderDatabase11DecoderInfo10GetDecoderEv(%"class.webrtc::DecoderDatabase::DecoderInfo"*) local_unnamed_addr #3

; Function Attrs: cold noreturn nounwind
declare void @llvm.trap() #4

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #5

attributes #0 = { nofree norecurse nounwind ssp uwtable writeonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { norecurse nounwind readonly ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { cold noreturn nounwind }
attributes #5 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nounwind }
attributes #7 = { builtin nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{i8 0, i8 2}
!3 = !{!"branch_weights", i32 1, i32 2000}
