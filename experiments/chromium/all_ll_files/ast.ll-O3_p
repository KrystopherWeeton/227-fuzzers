; ModuleID = '../../v8/src/ast/ast.cc'
source_filename = "../../v8/src/ast/ast.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.v8::internal::VariableProxy" = type { %"class.v8::internal::Expression", %union.anon, %"class.v8::internal::VariableProxy"* }
%"class.v8::internal::Expression" = type { %"class.v8::internal::AstNode" }
%"class.v8::internal::AstNode" = type { i32, i32 }
%union.anon = type { %"class.v8::internal::AstRawString"* }
%"class.v8::internal::AstRawString" = type <{ %union.anon.19, %"class.v8::internal::Vector", i32, i8, [3 x i8] }>
%union.anon.19 = type { %"class.v8::internal::AstRawString"* }
%"class.v8::internal::Vector" = type { i8*, i64 }
%"class.v8::internal::Variable" = type <{ %"class.v8::internal::Scope"*, %"class.v8::internal::AstRawString"*, %"class.v8::internal::Variable"*, %"class.v8::internal::Variable"*, i32, i32, i16, [6 x i8] }>
%"class.v8::internal::Scope" = type <{ %"class.v8::internal::Scope"*, %"class.v8::internal::Scope"*, %"class.v8::internal::Scope"*, %"class.v8::internal::VariableMap", %"class.v8::base::ThreadedListBase", %"class.v8::base::ThreadedListBase.18", %"class.v8::base::ThreadedListBase.21", %"class.v8::internal::Handle.22", i32, i32, i32, i32, i8, i16, [5 x i8] }>
%"class.v8::internal::VariableMap" = type { %"class.v8::base::PointerTemplateHashMapImpl" }
%"class.v8::base::PointerTemplateHashMapImpl" = type { %"class.v8::base::TemplateHashMapImpl" }
%"class.v8::base::TemplateHashMapImpl" = type { %"struct.v8::base::TemplateHashMapImpl<void *, void *, v8::base::KeyEqualityMatcher<void *>, v8::internal::ZoneAllocationPolicy>::Impl" }
%"struct.v8::base::TemplateHashMapImpl<void *, void *, v8::base::KeyEqualityMatcher<void *>, v8::internal::ZoneAllocationPolicy>::Impl" = type { %"class.v8::internal::ZoneAllocationPolicy", %"struct.v8::base::TemplateHashMapEntry"*, i32, i32 }
%"class.v8::internal::ZoneAllocationPolicy" = type { %"class.v8::internal::Zone"* }
%"class.v8::internal::Zone" = type <{ i64, i64, i64, i64, %"class.v8::internal::AccountingAllocator"*, %"class.v8::internal::Segment"*, i8*, i8, i8, [6 x i8] }>
%"class.v8::internal::AccountingAllocator" = type { i32 (...)**, %"struct.std::__1::atomic", %"struct.std::__1::atomic", %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr.2" }
%"struct.std::__1::atomic" = type { %"struct.std::__1::__atomic_base" }
%"struct.std::__1::__atomic_base" = type { %"struct.std::__1::__atomic_base.0" }
%"struct.std::__1::__atomic_base.0" = type { %"struct.std::__1::__cxx_atomic_impl" }
%"struct.std::__1::__cxx_atomic_impl" = type { %"struct.std::__1::__cxx_atomic_base_impl" }
%"struct.std::__1::__cxx_atomic_base_impl" = type { i64 }
%"class.std::__1::unique_ptr" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %"class.v8::internal::VirtualMemory"* }
%"class.v8::internal::VirtualMemory" = type { %"class.v8::PageAllocator"*, %"class.v8::base::AddressRegion" }
%"class.v8::PageAllocator" = type { i32 (...)** }
%"class.v8::base::AddressRegion" = type { i64, i64 }
%"class.std::__1::unique_ptr.2" = type { %"class.std::__1::__compressed_pair.3" }
%"class.std::__1::__compressed_pair.3" = type { %"struct.std::__1::__compressed_pair_elem.4" }
%"struct.std::__1::__compressed_pair_elem.4" = type { %"class.v8::base::BoundedPageAllocator"* }
%"class.v8::base::BoundedPageAllocator" = type { %"class.v8::PageAllocator", %"class.v8::base::Mutex", i64, i64, %"class.v8::PageAllocator"*, %"class.v8::base::RegionAllocator" }
%"class.v8::base::Mutex" = type { %union.pthread_mutex_t }
%union.pthread_mutex_t = type { %struct.__pthread_mutex_s }
%struct.__pthread_mutex_s = type { i32, i32, i32, i32, i32, i16, i16, %struct.__pthread_internal_list }
%struct.__pthread_internal_list = type { %struct.__pthread_internal_list*, %struct.__pthread_internal_list* }
%"class.v8::base::RegionAllocator" = type { %"class.v8::base::RegionAllocator::Region", i64, i64, i64, i64, %"class.std::__1::set", %"class.std::__1::set.11" }
%"class.v8::base::RegionAllocator::Region" = type <{ %"class.v8::base::AddressRegion", i32, [4 x i8] }>
%"class.std::__1::set" = type { %"class.std::__1::__tree" }
%"class.std::__1::__tree" = type { %"class.std::__1::__tree_end_node"*, %"class.std::__1::__compressed_pair.5", %"class.std::__1::__compressed_pair.8" }
%"class.std::__1::__tree_end_node" = type { %"class.std::__1::__tree_node_base"* }
%"class.std::__1::__tree_node_base" = type <{ %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_end_node"*, i8, [7 x i8] }>
%"class.std::__1::__compressed_pair.5" = type { %"struct.std::__1::__compressed_pair_elem.6" }
%"struct.std::__1::__compressed_pair_elem.6" = type { %"class.std::__1::__tree_end_node" }
%"class.std::__1::__compressed_pair.8" = type { %"struct.std::__1::__compressed_pair_elem.9" }
%"struct.std::__1::__compressed_pair_elem.9" = type { i64 }
%"class.std::__1::set.11" = type { %"class.std::__1::__tree.12" }
%"class.std::__1::__tree.12" = type { %"class.std::__1::__tree_end_node"*, %"class.std::__1::__compressed_pair.5", %"class.std::__1::__compressed_pair.13" }
%"class.std::__1::__compressed_pair.13" = type { %"struct.std::__1::__compressed_pair_elem.9" }
%"class.v8::internal::Segment" = type { %"class.v8::internal::Zone"*, %"class.v8::internal::Segment"*, i64 }
%"struct.v8::base::TemplateHashMapEntry" = type <{ i8*, i8*, i32, [4 x i8] }>
%"class.v8::base::ThreadedListBase" = type { %"class.v8::internal::Variable"*, %"class.v8::internal::Variable"** }
%"class.v8::base::ThreadedListBase.18" = type { %"class.v8::internal::VariableProxy"*, %"class.v8::internal::VariableProxy"** }
%"class.v8::base::ThreadedListBase.21" = type { %"class.v8::internal::Declaration"*, %"class.v8::internal::Declaration"** }
%"class.v8::internal::Declaration" = type { %"class.v8::internal::AstNode", %"class.v8::internal::Variable"*, %"class.v8::internal::Declaration"* }
%"class.v8::internal::Handle.22" = type { %"class.v8::internal::HandleBase" }
%"class.v8::internal::HandleBase" = type { i64* }
%"class.v8::internal::Assignment" = type { %"class.v8::internal::Expression", %"class.v8::internal::Expression"*, %"class.v8::internal::Expression"* }
%"class.v8::internal::ObjectLiteralProperty" = type <{ %"class.v8::internal::LiteralProperty", i8, i8, [6 x i8] }>
%"class.v8::internal::LiteralProperty" = type { %"class.v8::internal::PointerWithPayload", %"class.v8::internal::Expression"* }
%"class.v8::internal::PointerWithPayload" = type { i64 }
%"class.v8::internal::AstValueFactory" = type { %"class.v8::base::TemplateHashMapImpl.963", %"class.v8::internal::AstRawString"*, %"class.v8::internal::AstRawString"**, %"class.v8::internal::AstStringConstants"*, %"class.v8::internal::AstConsString"*, [128 x %"class.v8::internal::AstRawString"*], %"class.v8::internal::Zone"*, i64 }
%"class.v8::base::TemplateHashMapImpl.963" = type { %"struct.v8::base::TemplateHashMapImpl<const v8::internal::AstRawString *, v8::base::NoHashMapValue, v8::internal::AstRawStringMapMatcher, v8::base::DefaultAllocationPolicy>::Impl" }
%"struct.v8::base::TemplateHashMapImpl<const v8::internal::AstRawString *, v8::base::NoHashMapValue, v8::internal::AstRawStringMapMatcher, v8::base::DefaultAllocationPolicy>::Impl" = type { %"struct.v8::base::TemplateHashMapEntry.964"*, i32, i32 }
%"struct.v8::base::TemplateHashMapEntry.964" = type <{ %union.anon.1187, i32, [4 x i8] }>
%union.anon.1187 = type { %"class.v8::internal::AstRawString"* }
%"class.v8::internal::AstStringConstants" = type { %"class.v8::internal::Zone", %"class.v8::base::TemplateHashMapImpl.963", i64, %"class.v8::internal::AstRawString"*, %"class.v8::internal::AstRawString"*, %"class.v8::internal::AstRawString"*, %"class.v8::internal::AstRawString"*, %"class.v8::internal::AstRawString"*, %"class.v8::internal::AstRawString"*, %"class.v8::internal::AstRawString"*, %"class.v8::internal::AstRawString"*, %"class.v8::internal::AstRawString"*, %"class.v8::internal::AstRawString"*, %"class.v8::internal::AstRawString"*, %"class.v8::internal::AstRawString"*, %"class.v8::internal::AstRawString"*, %"class.v8::internal::AstRawString"*, %"class.v8::internal::AstRawString"*, %"class.v8::internal::AstRawString"*, %"class.v8::internal::AstRawString"*, %"class.v8::internal::AstRawString"*, %"class.v8::internal::AstRawString"*, %"class.v8::internal::AstRawString"*, %"class.v8::internal::AstRawString"*, %"class.v8::internal::AstRawString"*, %"class.v8::internal::AstRawString"*, %"class.v8::internal::AstRawString"*, %"class.v8::internal::AstRawString"*, %"class.v8::internal::AstRawString"*, %"class.v8::internal::AstRawString"*, %"class.v8::internal::AstRawString"*, %"class.v8::internal::AstRawString"*, %"class.v8::internal::AstRawString"*, %"class.v8::internal::AstRawString"*, %"class.v8::internal::AstRawString"*, %"class.v8::internal::AstRawString"*, %"class.v8::internal::AstRawString"*, %"class.v8::internal::AstRawString"*, %"class.v8::internal::AstRawString"*, %"class.v8::internal::AstRawString"*, %"class.v8::internal::AstRawString"*, %"class.v8::internal::AstRawString"*, %"class.v8::internal::AstRawString"*, %"class.v8::internal::AstRawString"*, %"class.v8::internal::AstRawString"*, %"class.v8::internal::AstRawString"*, %"class.v8::internal::AstRawString"*, %"class.v8::internal::AstRawString"*, %"class.v8::internal::AstRawString"*, %"class.v8::internal::AstRawString"*, %"class.v8::internal::AstRawString"*, %"class.v8::internal::AstRawString"*, %"class.v8::internal::AstRawString"*, %"class.v8::internal::AstRawString"*, %"class.v8::internal::AstRawString"*, %"class.v8::internal::AstRawString"*, %"class.v8::internal::AstRawString"* }
%"class.v8::internal::AstConsString" = type { %"class.v8::internal::Handle.20", %"struct.v8::internal::AstConsString::Segment" }
%"class.v8::internal::Handle.20" = type { %"class.v8::internal::HandleBase" }
%"struct.v8::internal::AstConsString::Segment" = type { %"class.v8::internal::AstRawString"*, %"struct.v8::internal::AstConsString::Segment"* }
%"class.v8::internal::ClassLiteralProperty" = type { %"class.v8::internal::LiteralProperty", i8, i8, i8, %"class.v8::internal::Variable"* }
%"class.v8::internal::CaseClause" = type { %"class.v8::internal::Expression"*, %"class.v8::internal::ZoneList.1167" }
%"class.v8::internal::ZoneList.1167" = type { %"class.v8::internal::Statement"**, i32, i32 }
%"class.v8::internal::Statement" = type { %"class.v8::internal::AstNode" }
%"class.v8::internal::ScopedList.1185" = type { %"class.std::__1::vector.1165"*, i64, i64 }
%"class.std::__1::vector.1165" = type { %"class.std::__1::__vector_base.1189" }
%"class.std::__1::__vector_base.1189" = type { i8**, i8**, %"class.std::__1::__compressed_pair.1190" }
%"class.std::__1::__compressed_pair.1190" = type { %"struct.std::__1::__compressed_pair_elem.1191" }
%"struct.std::__1::__compressed_pair_elem.1191" = type { i8** }
%"class.v8::internal::ObjectLiteral" = type { %"class.v8::internal::AggregateLiteral", i32, %"class.v8::internal::Handle", %"class.v8::internal::ZoneList", %"class.v8::internal::Variable"* }
%"class.v8::internal::AggregateLiteral" = type { %"class.v8::internal::MaterializedLiteral", i32 }
%"class.v8::internal::MaterializedLiteral" = type { %"class.v8::internal::Expression" }
%"class.v8::internal::Handle" = type { %"class.v8::internal::HandleBase" }
%"class.v8::internal::ZoneList" = type { %"class.v8::internal::ObjectLiteralProperty"**, i32, i32 }
%"class.v8::internal::Isolate" = type { %"class.v8::internal::IsolateData", %"class.std::__1::unique_ptr.29", %"class.v8::internal::Heap", %"class.v8::internal::ReadOnlyHeap"*, %"class.std::__1::shared_ptr.657", %"class.std::__1::unique_ptr.678", i32, %"class.v8::internal::Isolate::EntryStackItem"*, i32, %"class.v8::internal::StringStream"*, [13 x i64], %"class.v8::internal::Bootstrapper"*, %"class.v8::internal::RuntimeProfiler"*, %"class.v8::internal::CompilationCache"*, %"class.std::__1::shared_ptr.688", %"class.v8::base::RecursiveMutex", %"class.v8::base::SharedMutex", %"class.v8::base::SharedMutex", %"class.v8::base::SharedMutex", %"class.v8::base::SharedMutex", %"class.v8::base::SharedMutex", %"class.v8::internal::Logger"*, %"class.v8::internal::StubCache"*, %"class.v8::internal::StubCache"*, %"class.v8::internal::Deoptimizer"*, i8, %"class.v8::internal::MaterializedObjectStore"*, i8, i32, i32, %"class.v8::internal::DescriptorLookupCache"*, %"struct.v8::internal::HandleScopeData", %"class.v8::internal::HandleScopeImplementer"*, %"class.v8::internal::UnicodeCache"*, %"class.v8::internal::AccountingAllocator"*, %"class.v8::internal::InnerPointerToCodeCache"*, %"class.v8::internal::GlobalHandles"*, %"class.v8::internal::EternalHandles"*, %"class.v8::internal::ThreadManager"*, %"class.v8::bigint::Processor"*, %"class.v8::internal::RuntimeState", %"class.v8::internal::Builtins", %"class.v8::internal::SetupIsolateDelegate"*, %"class.v8::internal::RegExpStack"*, %"class.std::__1::vector.822", %"class.v8::internal::DateCache"*, %"class.v8::base::RandomNumberGenerator"*, %"class.v8::base::RandomNumberGenerator"*, %"struct.std::__1::atomic.835", {}*, i8*, void (i32, %"class.v8::Promise"*, %"class.v8::Value"*)*, {}*, {}*, %"struct.std::__1::atomic.845", {}*, %"class.v8::base::Mutex", double, %"class.std::__1::basic_string", %"class.std::__1::unordered_map.856", %"struct.std::__1::atomic.182", i8, i8, i8, i8, i8, i8, double, %"class.v8::internal::Debug"*, %"class.v8::internal::HeapProfiler"*, %"class.std::__1::unique_ptr.931", %"class.v8::internal::AstStringConstants"*, %"class.v8::internal::interpreter::Interpreter"*, %"class.v8::internal::compiler::PerIsolateCompilerCache"*, %"class.v8::internal::Zone"*, %"class.v8::internal::CompilerDispatcher"*, %"class.std::__1::queue", void (i8*, i8*)*, void (i8*, i1)*, void (i8*, i32)*, i1 (%"class.v8::Context"*, %"class.v8::String"*)*, { i8, %"class.v8::String"* } (%"class.v8::Context"*, %"class.v8::Value"*)*, { i8, %"class.v8::String"* } (%"class.v8::Context"*, %"class.v8::Value"*, i1)*, i1 (%"class.v8::Context"*, %"class.v8::String"*)*, i1 (%"class.v8::FunctionCallbackInfo"*)*, i1 (%"class.v8::FunctionCallbackInfo"*)*, i1 (%"class.v8::Context"*)*, void (%"class.v8::FunctionCallbackInfo"*)*, %"class.v8::String"* (%"class.v8::Isolate"*, i8*)*, i1 (%"class.v8::Context"*)*, i1 (%"class.v8::Context"*)*, %"class.v8::internal::Relocatable"*, %"class.std::__1::vector.976"*, %"class.v8::internal::Object", i64*, %"class.v8::internal::AddressToIndexHashMap"*, %"class.v8::internal::HeapObjectToIndexHashMap"*, %"class.v8::internal::MicrotaskQueue"*, %"class.v8::internal::CompilationStatistics"*, %"class.v8::internal::CodeTracer"*, i32, void (%"class.v8::PromiseRejectMessage"*)*, %"class.v8::StartupData"*, i32, i32, i32, i64, i8, i8, i32, i8, i32, %"class.v8_inspector::V8Inspector"*, i8, i8, i8, i32, i32, %"class.v8::internal::compiler::NodeObserver"*, i8, [128 x i32], [256 x i32], [251 x i32], [251 x i32], %"class.v8::internal::OptimizingCompileDispatcher"*, %"class.std::__1::unique_ptr.985", i32, i8, i8, i32, i32, %"class.std::__1::vector.991", %"class.std::__1::vector.991", void (%"class.v8::Isolate"*, i32)*, %"class.std::__1::shared_ptr.998", i64, %"class.std::__1::unordered_map.999", i64, %"struct.v8::metrics::LongTaskStats", %"class.std::__1::vector.553", %"class.v8::internal::BuiltinsConstantsTableBuilder"*, i8*, i32, i8*, i32, %"class.v8::ArrayBuffer::Allocator"*, %"class.std::__1::shared_ptr.190", %"class.v8::internal::FutexWaitListNode", %"class.v8::internal::CancelableTaskManager"*, %"class.v8::debug::ConsoleDelegate"*, %"class.v8::debug::AsyncEventDelegate"*, i32, i32, %"class.std::__1::unique_ptr.1055", i1 (%"class.v8::Isolate"*)*, i8, %"class.v8::base::Mutex", %"struct.v8::internal::ManagedPtrDestructor"*, i64, i64, %"class.v8::internal::wasm::WasmEngine"*, %"class.std::__1::unique_ptr.1093", %"class.v8::internal::EmbeddedFileWriterInterface"*, %"class.v8::Context::BackupIncumbentScope"*, {}*, %"class.v8::base::Mutex", %"class.v8::internal::Isolate::ThreadDataTable", i8, %"class.v8::internal::Isolate"*, %"class.v8::base::Mutex", %"class.v8::internal::Isolate"*, %"class.v8::internal::Isolate"*, %"class.v8::internal::Isolate"*, %"struct.std::__1::atomic.1127", %"class.std::__1::vector.1131", %"class.std::__1::vector.1131", void (i32, %"class.std::__1::basic_string"*)* }
%"class.v8::internal::IsolateData" = type { [4 x i8*], i64, i64, i64, i64, i64, %"class.v8::internal::StackGuard", %"class.v8::internal::RootsTable", %"class.v8::internal::ExternalReferenceTable", %"class.v8::internal::ThreadLocalTop", [1711 x i64], [1711 x i64], i8, [15 x i8] }
%"class.v8::internal::StackGuard" = type { %"class.v8::internal::Isolate"*, %"class.v8::internal::StackGuard::ThreadLocal" }
%"class.v8::internal::StackGuard::ThreadLocal" = type { i64, i64, i64, i64, %"class.v8::internal::InterruptsScope"*, i64 }
%"class.v8::internal::InterruptsScope" = type { i32 (...)**, %"class.v8::internal::StackGuard"*, i64, i64, i32, %"class.v8::internal::InterruptsScope"* }
%"class.v8::internal::RootsTable" = type { [669 x i64] }
%"class.v8::internal::ExternalReferenceTable" = type { [1042 x i64], i32, i32 }
%"class.v8::internal::ThreadLocalTop" = type { %"class.v8::TryCatch"*, %"class.v8::internal::Isolate"*, %"class.v8::internal::Context", %"struct.std::__1::atomic.23", %"class.v8::internal::Object", %"class.v8::internal::Context", i64, i64, i64, i64, i64, %"class.v8::internal::Object", i8, i8, %"class.v8::internal::Object", i64, i64, i64, %"class.v8::internal::PromiseOnStack"*, %"class.v8::internal::Simulator"*, i64, %"class.v8::internal::ExternalCallbackScope"*, i32, void (%"class.v8::Object"*, i32, %"class.v8::Value"*)*, i64 }
%"class.v8::TryCatch" = type <{ %"class.v8::internal::Isolate"*, %"class.v8::TryCatch"*, i8*, i8*, i8*, i8, [7 x i8] }>
%"struct.std::__1::atomic.23" = type { %"struct.std::__1::__atomic_base.24" }
%"struct.std::__1::__atomic_base.24" = type { %"struct.std::__1::__cxx_atomic_impl.25" }
%"struct.std::__1::__cxx_atomic_impl.25" = type { %"struct.std::__1::__cxx_atomic_base_impl.26" }
%"struct.std::__1::__cxx_atomic_base_impl.26" = type { %"class.v8::internal::ThreadId" }
%"class.v8::internal::ThreadId" = type { i32 }
%"class.v8::internal::Context" = type { %"class.v8::internal::TorqueGeneratedContext" }
%"class.v8::internal::TorqueGeneratedContext" = type { %"class.v8::internal::HeapObject" }
%"class.v8::internal::HeapObject" = type { %"class.v8::internal::Object" }
%"class.v8::internal::PromiseOnStack" = type { %"class.v8::internal::Handle.27", %"class.v8::internal::PromiseOnStack"* }
%"class.v8::internal::Handle.27" = type { %"class.v8::internal::HandleBase" }
%"class.v8::internal::Simulator" = type opaque
%"class.v8::internal::ExternalCallbackScope" = type opaque
%"class.v8::Object" = type { i8 }
%"class.v8::Value" = type { i8 }
%"class.std::__1::unique_ptr.29" = type { %"class.std::__1::__compressed_pair.30" }
%"class.std::__1::__compressed_pair.30" = type { %"struct.std::__1::__compressed_pair_elem.31" }
%"struct.std::__1::__compressed_pair_elem.31" = type { %"class.v8::internal::IsolateAllocator"* }
%"class.v8::internal::IsolateAllocator" = type { i8*, %"class.v8::PageAllocator"* }
%"class.v8::internal::Heap" = type { %"class.std::__1::unordered_map", %"struct.std::__1::atomic", %"class.v8::internal::Heap::ExternalMemoryAccounting", %"class.v8::internal::Isolate"*, i64, i64, i64, i64, %"struct.std::__1::atomic", i64, i64, i64, i64, i64, i8, i64, i64, %"struct.std::__1::atomic", i64, i64, %"struct.std::__1::atomic", %"struct.std::__1::atomic.58", %"class.std::__1::vector", i32, %"class.v8::internal::NewSpace"*, %"class.v8::internal::OldSpace"*, %"class.v8::internal::CodeSpace"*, %"class.v8::internal::MapSpace"*, %"class.v8::internal::OldLargeObjectSpace"*, %"class.v8::internal::CodeLargeObjectSpace"*, %"class.v8::internal::NewLargeObjectSpace"*, %"class.v8::internal::ReadOnlySpace"*, %"class.v8::internal::OldSpace"*, %"class.v8::internal::MapSpace"*, %"class.std::__1::unique_ptr.176", %"class.std::__1::unique_ptr.176", [8 x %"class.v8::internal::Space"*], %"class.v8::internal::LocalHeap"*, %"class.v8::internal::ArrayBufferExtension"*, %"class.v8::internal::ArrayBufferExtension"*, i8, i64, %"struct.std::__1::atomic.191", i32, i32, i32, i32, %"class.v8::internal::AllocationObserver"*, %"class.v8::internal::StressScavengeObserver"*, double, i32, i32, i32, i64, i32, [128 x i64], %"struct.std::__1::atomic", i64, i8, %"struct.std::__1::atomic", %"class.v8::internal::Object", %"class.v8::internal::Object", %"class.v8::internal::Object", %"class.std::__1::vector.195", %"class.std::__1::vector.195", i64 ()*, [113 x i32], i64, double, double, i64, i64, double, i32, i32, i32, i32, double, double, double, %"class.std::__1::unique_ptr.202", %"class.std::__1::unique_ptr.208", %"class.v8::internal::MinorMarkCompactCollector"*, %"class.std::__1::unique_ptr.338", %"class.std::__1::unique_ptr.344", %"class.std::__1::unique_ptr.350", %"class.std::__1::unique_ptr.389", %"class.std::__1::unique_ptr.428", %"class.std::__1::unique_ptr.458", %"class.std::__1::unique_ptr.464", %"class.std::__1::unique_ptr.474", %"class.std::__1::unique_ptr.480", %"class.std::__1::unique_ptr.480", %"class.std::__1::unique_ptr.486", %"class.std::__1::unique_ptr.492", %"class.std::__1::unique_ptr.492", %"class.std::__1::unique_ptr.498", %"class.std::__1::unique_ptr.504", %"class.std::__1::shared_ptr.510", %"class.v8::CppHeap"*, %"class.v8::EmbedderRootsHandler"*, %"class.v8::internal::StrongRootsEntry"*, %"class.v8::base::Mutex", i8, i64, i64, i64, i64, %"class.std::__1::unordered_map.515", %"class.std::__1::unique_ptr.541", [512 x i8], i8, i8, i64, i8, i32, i32, %"class.std::__1::unique_ptr.547", i8, %"class.v8::internal::Heap::ExternalStringTable", %"class.v8::base::Mutex", %"class.std::__1::unique_ptr.560", i32, i8, i8, i8, i8, i8, %"class.v8::internal::HeapObject", %"class.v8::base::SharedMutex", %"class.v8::base::Mutex", %"class.std::__1::unordered_set.360", i8, [7 x i8], %"class.std::__1::unordered_map.566", %"class.std::__1::unordered_map.592", %"class.std::__1::unordered_map.566", %"class.std::__1::unordered_map.616", %"class.std::__1::vector.644", i8, %"class.std::__1::unique_ptr.651", i32, i32 }
%"class.std::__1::unordered_map" = type { %"class.std::__1::__hash_table" }
%"class.std::__1::__hash_table" = type <{ %"class.std::__1::unique_ptr.35", %"class.std::__1::__compressed_pair.43", %"class.std::__1::__compressed_pair.48", %"class.std::__1::__compressed_pair.50", [4 x i8] }>
%"class.std::__1::unique_ptr.35" = type { %"class.std::__1::__compressed_pair.36" }
%"class.std::__1::__compressed_pair.36" = type { %"struct.std::__1::__compressed_pair_elem.37", %"struct.std::__1::__compressed_pair_elem.38" }
%"struct.std::__1::__compressed_pair_elem.37" = type { %"struct.std::__1::__hash_node_base"** }
%"struct.std::__1::__hash_node_base" = type { %"struct.std::__1::__hash_node_base"* }
%"struct.std::__1::__compressed_pair_elem.38" = type { %"class.std::__1::__bucket_list_deallocator" }
%"class.std::__1::__bucket_list_deallocator" = type { %"class.std::__1::__compressed_pair.39" }
%"class.std::__1::__compressed_pair.39" = type { %"struct.std::__1::__compressed_pair_elem.9" }
%"class.std::__1::__compressed_pair.43" = type { %"struct.std::__1::__compressed_pair_elem.44" }
%"struct.std::__1::__compressed_pair_elem.44" = type { %"struct.std::__1::__hash_node_base" }
%"class.std::__1::__compressed_pair.48" = type { %"struct.std::__1::__compressed_pair_elem.9" }
%"class.std::__1::__compressed_pair.50" = type { %"struct.std::__1::__compressed_pair_elem.51" }
%"struct.std::__1::__compressed_pair_elem.51" = type { float }
%"class.v8::internal::Heap::ExternalMemoryAccounting" = type { %"struct.std::__1::atomic.53", %"struct.std::__1::atomic.53", %"struct.std::__1::atomic.53" }
%"struct.std::__1::atomic.53" = type { %"struct.std::__1::__atomic_base.54" }
%"struct.std::__1::__atomic_base.54" = type { %"struct.std::__1::__atomic_base.55" }
%"struct.std::__1::__atomic_base.55" = type { %"struct.std::__1::__cxx_atomic_impl.56" }
%"struct.std::__1::__cxx_atomic_impl.56" = type { %"struct.std::__1::__cxx_atomic_base_impl.57" }
%"struct.std::__1::__cxx_atomic_base_impl.57" = type { i64 }
%"struct.std::__1::atomic.58" = type { %"struct.std::__1::__atomic_base.59" }
%"struct.std::__1::__atomic_base.59" = type { %"struct.std::__1::__cxx_atomic_impl.60" }
%"struct.std::__1::__cxx_atomic_impl.60" = type { %"struct.std::__1::__cxx_atomic_base_impl.61" }
%"struct.std::__1::__cxx_atomic_base_impl.61" = type { i32 }
%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { %"struct.std::__1::pair"*, %"struct.std::__1::pair"*, %"class.std::__1::__compressed_pair.62" }
%"struct.std::__1::pair" = type opaque
%"class.std::__1::__compressed_pair.62" = type { %"struct.std::__1::__compressed_pair_elem.63" }
%"struct.std::__1::__compressed_pair_elem.63" = type { %"struct.std::__1::pair"* }
%"class.v8::internal::NewSpace" = type { %"class.v8::internal::SpaceWithLinearArea", %"class.v8::base::Mutex", %"struct.std::__1::atomic", %"struct.std::__1::atomic", %"class.v8::internal::SemiSpace", %"class.v8::internal::SemiSpace", %"class.v8::internal::VirtualMemory", %"class.std::__1::vector.133" }
%"class.v8::internal::SpaceWithLinearArea" = type { %"class.v8::internal::Space", %"class.v8::internal::LinearAllocationArea", [3 x i64] }
%"class.v8::internal::Space" = type { %"class.v8::internal::BaseSpace", %"class.v8::internal::AllocationCounter", %"class.v8::internal::heap::List", %"struct.std::__1::atomic"*, %"class.std::__1::unique_ptr.127" }
%"class.v8::internal::BaseSpace" = type { i32 (...)**, %"class.v8::internal::Heap"*, i32, %"struct.std::__1::atomic", i64 }
%"class.v8::internal::AllocationCounter" = type <{ %"class.std::__1::vector.67", %"class.std::__1::vector.67", %"class.std::__1::unordered_set", i8, [7 x i8], i64, i64, i8, [7 x i8] }>
%"class.std::__1::vector.67" = type { %"class.std::__1::__vector_base.68" }
%"class.std::__1::__vector_base.68" = type { %"struct.v8::internal::AllocationCounter::AllocationObserverCounter"*, %"struct.v8::internal::AllocationCounter::AllocationObserverCounter"*, %"class.std::__1::__compressed_pair.69" }
%"struct.v8::internal::AllocationCounter::AllocationObserverCounter" = type { %"class.v8::internal::AllocationObserver"*, i64, i64 }
%"class.std::__1::__compressed_pair.69" = type { %"struct.std::__1::__compressed_pair_elem.70" }
%"struct.std::__1::__compressed_pair_elem.70" = type { %"struct.v8::internal::AllocationCounter::AllocationObserverCounter"* }
%"class.std::__1::unordered_set" = type { %"class.std::__1::__hash_table.74" }
%"class.std::__1::__hash_table.74" = type <{ %"class.std::__1::unique_ptr.75", %"class.std::__1::__compressed_pair.85", %"class.std::__1::__compressed_pair.90", %"class.std::__1::__compressed_pair.92", [4 x i8] }>
%"class.std::__1::unique_ptr.75" = type { %"class.std::__1::__compressed_pair.76" }
%"class.std::__1::__compressed_pair.76" = type { %"struct.std::__1::__compressed_pair_elem.77", %"struct.std::__1::__compressed_pair_elem.79" }
%"struct.std::__1::__compressed_pair_elem.77" = type { %"struct.std::__1::__hash_node_base.78"** }
%"struct.std::__1::__hash_node_base.78" = type { %"struct.std::__1::__hash_node_base.78"* }
%"struct.std::__1::__compressed_pair_elem.79" = type { %"class.std::__1::__bucket_list_deallocator.80" }
%"class.std::__1::__bucket_list_deallocator.80" = type { %"class.std::__1::__compressed_pair.81" }
%"class.std::__1::__compressed_pair.81" = type { %"struct.std::__1::__compressed_pair_elem.9" }
%"class.std::__1::__compressed_pair.85" = type { %"struct.std::__1::__compressed_pair_elem.86" }
%"struct.std::__1::__compressed_pair_elem.86" = type { %"struct.std::__1::__hash_node_base.78" }
%"class.std::__1::__compressed_pair.90" = type { %"struct.std::__1::__compressed_pair_elem.9" }
%"class.std::__1::__compressed_pair.92" = type { %"struct.std::__1::__compressed_pair_elem.51" }
%"class.v8::internal::heap::List" = type { %"class.v8::internal::MemoryChunk"*, %"class.v8::internal::MemoryChunk"* }
%"class.v8::internal::MemoryChunk" = type { %"class.v8::internal::BasicMemoryChunk", [2 x %"class.v8::internal::SlotSet"*], %"struct.std::__1::atomic", %"struct.std::__1::atomic.53", %"class.v8::internal::SlotSet"*, [2 x %"class.v8::internal::TypedSlotSet"*], [2 x %"class.std::__1::set.108"*], %"class.v8::base::Mutex"*, %"struct.std::__1::atomic.116", %"class.v8::base::Mutex"*, i64, [2 x %"struct.std::__1::atomic"], %"class.v8::internal::heap::ListNode", %"class.v8::internal::FreeListCategory"**, %"struct.std::__1::atomic.53", %"class.v8::internal::Bitmap"*, %"class.v8::internal::CodeObjectRegistry"*, %"class.v8::internal::PossiblyEmptyBuckets" }
%"class.v8::internal::BasicMemoryChunk" = type { i64, i64, %"class.v8::internal::Heap"*, i64, i64, i64, i64, %"struct.std::__1::atomic.53", %"struct.std::__1::atomic.97", %"class.v8::internal::VirtualMemory" }
%"struct.std::__1::atomic.97" = type { %"struct.std::__1::__atomic_base.98" }
%"struct.std::__1::__atomic_base.98" = type { %"struct.std::__1::__cxx_atomic_impl.99" }
%"struct.std::__1::__cxx_atomic_impl.99" = type { %"struct.std::__1::__cxx_atomic_base_impl.100" }
%"struct.std::__1::__cxx_atomic_base_impl.100" = type { %"class.v8::internal::BaseSpace"* }
%"class.v8::internal::SlotSet" = type { i8 }
%"class.v8::internal::TypedSlotSet" = type { %"class.v8::internal::TypedSlots", i64 }
%"class.v8::internal::TypedSlots" = type { i32 (...)**, %"struct.v8::internal::TypedSlots::Chunk"*, %"struct.v8::internal::TypedSlots::Chunk"* }
%"struct.v8::internal::TypedSlots::Chunk" = type { %"struct.v8::internal::TypedSlots::Chunk"*, %"class.std::__1::vector.101" }
%"class.std::__1::vector.101" = type { %"class.std::__1::__vector_base.102" }
%"class.std::__1::__vector_base.102" = type { %"struct.v8::internal::TypedSlots::TypedSlot"*, %"struct.v8::internal::TypedSlots::TypedSlot"*, %"class.std::__1::__compressed_pair.103" }
%"struct.v8::internal::TypedSlots::TypedSlot" = type { i32 }
%"class.std::__1::__compressed_pair.103" = type { %"struct.std::__1::__compressed_pair_elem.104" }
%"struct.std::__1::__compressed_pair_elem.104" = type { %"struct.v8::internal::TypedSlots::TypedSlot"* }
%"class.std::__1::set.108" = type { %"class.std::__1::__tree.109" }
%"class.std::__1::__tree.109" = type { %"class.std::__1::__tree_end_node"*, %"class.std::__1::__compressed_pair.110", %"class.std::__1::__compressed_pair.114" }
%"class.std::__1::__compressed_pair.110" = type { %"struct.std::__1::__compressed_pair_elem.6" }
%"class.std::__1::__compressed_pair.114" = type { %"struct.std::__1::__compressed_pair_elem.9" }
%"struct.std::__1::atomic.116" = type { %"struct.std::__1::__atomic_base.117" }
%"struct.std::__1::__atomic_base.117" = type { %"struct.std::__1::__cxx_atomic_impl.118" }
%"struct.std::__1::__cxx_atomic_impl.118" = type { %"struct.std::__1::__cxx_atomic_base_impl.119" }
%"struct.std::__1::__cxx_atomic_base_impl.119" = type { i64 }
%"class.v8::internal::heap::ListNode" = type { %"class.v8::internal::MemoryChunk"*, %"class.v8::internal::MemoryChunk"* }
%"class.v8::internal::FreeListCategory" = type { i32, i32, %"class.v8::internal::FreeSpace", %"class.v8::internal::FreeListCategory"*, %"class.v8::internal::FreeListCategory"* }
%"class.v8::internal::FreeSpace" = type { %"class.v8::internal::TorqueGeneratedFreeSpace" }
%"class.v8::internal::TorqueGeneratedFreeSpace" = type { %"class.v8::internal::HeapObject" }
%"class.v8::internal::Bitmap" = type { i8 }
%"class.v8::internal::CodeObjectRegistry" = type <{ %"class.std::__1::vector.120", i8, [7 x i8] }>
%"class.std::__1::vector.120" = type { %"class.std::__1::__vector_base.121" }
%"class.std::__1::__vector_base.121" = type { i64*, i64*, %"class.std::__1::__compressed_pair.122" }
%"class.std::__1::__compressed_pair.122" = type { %"struct.std::__1::__compressed_pair_elem.123" }
%"struct.std::__1::__compressed_pair_elem.123" = type { i64* }
%"class.v8::internal::PossiblyEmptyBuckets" = type { i64 }
%"class.std::__1::unique_ptr.127" = type { %"class.std::__1::__compressed_pair.128" }
%"class.std::__1::__compressed_pair.128" = type { %"struct.std::__1::__compressed_pair_elem.129" }
%"struct.std::__1::__compressed_pair_elem.129" = type { %"class.v8::internal::FreeList"* }
%"class.v8::internal::FreeList" = type { i32 (...)**, i32, i32, i64, %"struct.std::__1::atomic", %"class.v8::internal::FreeListCategory"**, i64 }
%"class.v8::internal::LinearAllocationArea" = type { i64, i64, i64 }
%"class.v8::internal::SemiSpace" = type { %"class.v8::internal::Space", i64, i64, i64, i64, i64, i32, %"class.v8::internal::Page"* }
%"class.v8::internal::Page" = type { %"class.v8::internal::MemoryChunk" }
%"class.std::__1::vector.133" = type { %"class.std::__1::__vector_base.134" }
%"class.std::__1::__vector_base.134" = type { %"struct.std::__1::pair.135"*, %"struct.std::__1::pair.135"*, %"class.std::__1::__compressed_pair.136" }
%"struct.std::__1::pair.135" = type { i32, i64 }
%"class.std::__1::__compressed_pair.136" = type { %"struct.std::__1::__compressed_pair_elem.137" }
%"struct.std::__1::__compressed_pair_elem.137" = type { %"struct.std::__1::pair.135"* }
%"class.v8::internal::CodeSpace" = type { %"class.v8::internal::PagedSpace" }
%"class.v8::internal::PagedSpace" = type { %"class.v8::internal::SpaceWithLinearArea", i32, i32, i64, %"class.v8::internal::AllocationStats", %"class.v8::base::Mutex", i64, i64 }
%"class.v8::internal::AllocationStats" = type { %"struct.std::__1::atomic", i64, %"struct.std::__1::atomic" }
%"class.v8::internal::OldLargeObjectSpace" = type { %"class.v8::internal::LargeObjectSpace" }
%"class.v8::internal::LargeObjectSpace" = type { %"class.v8::internal::Space", %"struct.std::__1::atomic", i32, %"struct.std::__1::atomic", %"class.v8::base::Mutex", %"struct.std::__1::atomic" }
%"class.v8::internal::CodeLargeObjectSpace" = type { %"class.v8::internal::OldLargeObjectSpace", %"class.std::__1::unordered_map.141" }
%"class.std::__1::unordered_map.141" = type { %"class.std::__1::__hash_table.142" }
%"class.std::__1::__hash_table.142" = type <{ %"class.std::__1::unique_ptr.143", %"class.std::__1::__compressed_pair.153", %"class.std::__1::__compressed_pair.158", %"class.std::__1::__compressed_pair.163", [4 x i8] }>
%"class.std::__1::unique_ptr.143" = type { %"class.std::__1::__compressed_pair.144" }
%"class.std::__1::__compressed_pair.144" = type { %"struct.std::__1::__compressed_pair_elem.145", %"struct.std::__1::__compressed_pair_elem.147" }
%"struct.std::__1::__compressed_pair_elem.145" = type { %"struct.std::__1::__hash_node_base.146"** }
%"struct.std::__1::__hash_node_base.146" = type { %"struct.std::__1::__hash_node_base.146"* }
%"struct.std::__1::__compressed_pair_elem.147" = type { %"class.std::__1::__bucket_list_deallocator.148" }
%"class.std::__1::__bucket_list_deallocator.148" = type { %"class.std::__1::__compressed_pair.149" }
%"class.std::__1::__compressed_pair.149" = type { %"struct.std::__1::__compressed_pair_elem.9" }
%"class.std::__1::__compressed_pair.153" = type { %"struct.std::__1::__compressed_pair_elem.154" }
%"struct.std::__1::__compressed_pair_elem.154" = type { %"struct.std::__1::__hash_node_base.146" }
%"class.std::__1::__compressed_pair.158" = type { %"struct.std::__1::__compressed_pair_elem.9" }
%"class.std::__1::__compressed_pair.163" = type { %"struct.std::__1::__compressed_pair_elem.51" }
%"class.v8::internal::NewLargeObjectSpace" = type { %"class.v8::internal::LargeObjectSpace", i64 }
%"class.v8::internal::ReadOnlySpace" = type { %"class.v8::internal::BaseSpace", i8, %"class.v8::internal::AllocationStats", %"class.std::__1::vector.169", i64, i64, i8, i64, i64 }
%"class.std::__1::vector.169" = type { %"class.std::__1::__vector_base.170" }
%"class.std::__1::__vector_base.170" = type { %"class.v8::internal::ReadOnlyPage"**, %"class.v8::internal::ReadOnlyPage"**, %"class.std::__1::__compressed_pair.171" }
%"class.v8::internal::ReadOnlyPage" = type { %"class.v8::internal::BasicMemoryChunk" }
%"class.std::__1::__compressed_pair.171" = type { %"struct.std::__1::__compressed_pair_elem.172" }
%"struct.std::__1::__compressed_pair_elem.172" = type { %"class.v8::internal::ReadOnlyPage"** }
%"class.v8::internal::OldSpace" = type { %"class.v8::internal::PagedSpace" }
%"class.v8::internal::MapSpace" = type { %"class.v8::internal::PagedSpace" }
%"class.std::__1::unique_ptr.176" = type { %"class.std::__1::__compressed_pair.177" }
%"class.std::__1::__compressed_pair.177" = type { %"struct.std::__1::__compressed_pair_elem.178" }
%"struct.std::__1::__compressed_pair_elem.178" = type { %"class.v8::internal::ConcurrentAllocator"* }
%"class.v8::internal::ConcurrentAllocator" = type { %"class.v8::internal::LocalHeap"*, %"class.v8::internal::PagedSpace"*, %"class.v8::internal::LocalAllocationBuffer" }
%"class.v8::internal::LocalAllocationBuffer" = type { %"class.v8::internal::Heap"*, %"class.v8::internal::LinearAllocationArea" }
%"class.v8::internal::LocalHeap" = type { %"class.v8::internal::Heap"*, i8, %"struct.std::__1::atomic.1060", i8, i8, %"class.v8::internal::LocalHeap"*, %"class.v8::internal::LocalHeap"*, %"class.std::__1::unique_ptr.1064", %"class.std::__1::unique_ptr.1070", %"class.std::__1::unique_ptr.504", %"class.std::__1::vector.1076", %"class.v8::internal::ConcurrentAllocator" }
%"struct.std::__1::atomic.1060" = type { %"struct.std::__1::__atomic_base.1061" }
%"struct.std::__1::__atomic_base.1061" = type { %"struct.std::__1::__cxx_atomic_impl.1062" }
%"struct.std::__1::__cxx_atomic_impl.1062" = type { %"struct.std::__1::__cxx_atomic_base_impl.1063" }
%"struct.std::__1::__cxx_atomic_base_impl.1063" = type { i32 }
%"class.std::__1::unique_ptr.1064" = type { %"class.std::__1::__compressed_pair.1065" }
%"class.std::__1::__compressed_pair.1065" = type { %"struct.std::__1::__compressed_pair_elem.1066" }
%"struct.std::__1::__compressed_pair_elem.1066" = type { %"class.v8::internal::LocalHandles"* }
%"class.v8::internal::LocalHandles" = type { %"struct.v8::internal::HandleScopeData", %"class.std::__1::vector.815" }
%"class.std::__1::vector.815" = type { %"class.std::__1::__vector_base.816" }
%"class.std::__1::__vector_base.816" = type { i64**, i64**, %"class.std::__1::__compressed_pair.817" }
%"class.std::__1::__compressed_pair.817" = type { %"struct.std::__1::__compressed_pair_elem.818" }
%"struct.std::__1::__compressed_pair_elem.818" = type { i64** }
%"class.std::__1::unique_ptr.1070" = type { %"class.std::__1::__compressed_pair.1071" }
%"class.std::__1::__compressed_pair.1071" = type { %"struct.std::__1::__compressed_pair_elem.1072" }
%"struct.std::__1::__compressed_pair_elem.1072" = type { %"class.v8::internal::PersistentHandles"* }
%"class.v8::internal::PersistentHandles" = type { %"class.v8::internal::Isolate"*, %"class.std::__1::vector.815", i64*, i64*, %"class.v8::internal::PersistentHandles"*, %"class.v8::internal::PersistentHandles"* }
%"class.std::__1::vector.1076" = type { %"class.std::__1::__vector_base.1077" }
%"class.std::__1::__vector_base.1077" = type { %"struct.std::__1::pair.1078"*, %"struct.std::__1::pair.1078"*, %"class.std::__1::__compressed_pair.1079" }
%"struct.std::__1::pair.1078" = type opaque
%"class.std::__1::__compressed_pair.1079" = type { %"struct.std::__1::__compressed_pair_elem.1080" }
%"struct.std::__1::__compressed_pair_elem.1080" = type { %"struct.std::__1::pair.1078"* }
%"class.v8::internal::ArrayBufferExtension" = type { %"struct.std::__1::atomic.182", %"struct.std::__1::atomic.186", %"class.std::__1::shared_ptr", %"class.v8::internal::ArrayBufferExtension"*, %"struct.std::__1::atomic" }
%"struct.std::__1::atomic.186" = type { %"struct.std::__1::__atomic_base.187" }
%"struct.std::__1::__atomic_base.187" = type { %"struct.std::__1::__cxx_atomic_impl.188" }
%"struct.std::__1::__cxx_atomic_impl.188" = type { %"struct.std::__1::__cxx_atomic_base_impl.189" }
%"struct.std::__1::__cxx_atomic_base_impl.189" = type { i8 }
%"class.std::__1::shared_ptr" = type { %"class.v8::internal::BackingStore"*, %"class.std::__1::__shared_weak_count"* }
%"class.v8::internal::BackingStore" = type <{ i8*, %"struct.std::__1::atomic", i64, %"union.v8::internal::BackingStore::TypeSpecificData", i16, [6 x i8] }>
%"union.v8::internal::BackingStore::TypeSpecificData" = type { %"class.std::__1::shared_ptr.190" }
%"class.std::__1::__shared_weak_count" = type { %"class.std::__1::__shared_count", i64 }
%"class.std::__1::__shared_count" = type { i32 (...)**, i64 }
%"struct.std::__1::atomic.191" = type { %"struct.std::__1::__atomic_base.192" }
%"struct.std::__1::__atomic_base.192" = type { %"struct.std::__1::__cxx_atomic_impl.193" }
%"struct.std::__1::__cxx_atomic_impl.193" = type { %"struct.std::__1::__cxx_atomic_base_impl.194" }
%"struct.std::__1::__cxx_atomic_base_impl.194" = type { i32 }
%"class.v8::internal::AllocationObserver" = type { i32 (...)**, i64 }
%"class.v8::internal::StressScavengeObserver" = type opaque
%"class.std::__1::vector.195" = type { %"class.std::__1::__vector_base.196" }
%"class.std::__1::__vector_base.196" = type { %"struct.v8::internal::Heap::GCCallbackTuple"*, %"struct.v8::internal::Heap::GCCallbackTuple"*, %"class.std::__1::__compressed_pair.197" }
%"struct.v8::internal::Heap::GCCallbackTuple" = type { void (%"class.v8::Isolate"*, i32, i32, i8*)*, i32, i8* }
%"class.v8::Isolate" = type { i8 }
%"class.std::__1::__compressed_pair.197" = type { %"struct.std::__1::__compressed_pair_elem.198" }
%"struct.std::__1::__compressed_pair_elem.198" = type { %"struct.v8::internal::Heap::GCCallbackTuple"* }
%"class.std::__1::unique_ptr.202" = type { %"class.std::__1::__compressed_pair.203" }
%"class.std::__1::__compressed_pair.203" = type { %"struct.std::__1::__compressed_pair_elem.204" }
%"struct.std::__1::__compressed_pair_elem.204" = type { %"class.v8::internal::GCTracer"* }
%"class.v8::internal::GCTracer" = type opaque
%"class.std::__1::unique_ptr.208" = type { %"class.std::__1::__compressed_pair.209" }
%"class.std::__1::__compressed_pair.209" = type { %"struct.std::__1::__compressed_pair_elem.210" }
%"struct.std::__1::__compressed_pair_elem.210" = type { %"class.v8::internal::MarkCompactCollector"* }
%"class.v8::internal::MarkCompactCollector" = type <{ %"class.v8::internal::MarkCompactCollectorBase", %"class.v8::base::Mutex", %"class.v8::base::Semaphore", i8, i8, i8, i8, i8, i8, [2 x i8], %"class.v8::internal::MarkingWorklists", %"class.v8::internal::WeakObjects", %"struct.v8::internal::EphemeronMarking", %"class.std::__1::unique_ptr.250", %"class.std::__1::unique_ptr.256", %"class.v8::internal::NativeContextInferrer", [7 x i8], %"class.v8::internal::NativeContextStats", %"class.std::__1::vector.310", %"class.std::__1::vector.310", %"class.std::__1::vector.310", %"class.std::__1::vector.317", %"class.v8::internal::Sweeper"*, %"class.v8::internal::MajorMarkingState", %"class.v8::internal::MajorNonAtomicMarkingState", [2 x i8], i32, i32, [4 x i8] }>
%"class.v8::internal::MarkCompactCollectorBase" = type { i32 (...)**, %"class.v8::internal::Heap"* }
%"class.v8::base::Semaphore" = type { %union.sem_t }
%union.sem_t = type { i64, [24 x i8] }
%"class.v8::internal::MarkingWorklists" = type { %"class.heap::base::Worklist", %"class.heap::base::Worklist", %"class.heap::base::Worklist.211", %"class.std::__1::vector.212", %"class.std::__1::vector.219", %"class.heap::base::Worklist" }
%"class.heap::base::Worklist.211" = type { %"class.v8::base::Mutex", %"class.heap::base::Worklist<v8::internal::HeapObject, 16>::Segment"*, %"struct.std::__1::atomic" }
%"class.heap::base::Worklist<v8::internal::HeapObject, 16>::Segment" = type opaque
%"class.std::__1::vector.212" = type { %"class.std::__1::__vector_base.213" }
%"class.std::__1::__vector_base.213" = type { %"struct.v8::internal::ContextWorklistPair"*, %"struct.v8::internal::ContextWorklistPair"*, %"class.std::__1::__compressed_pair.214" }
%"struct.v8::internal::ContextWorklistPair" = type { i64, %"class.heap::base::Worklist"* }
%"class.std::__1::__compressed_pair.214" = type { %"struct.std::__1::__compressed_pair_elem.215" }
%"struct.std::__1::__compressed_pair_elem.215" = type { %"struct.v8::internal::ContextWorklistPair"* }
%"class.std::__1::vector.219" = type { %"class.std::__1::__vector_base.220" }
%"class.std::__1::__vector_base.220" = type { %"class.std::__1::unique_ptr.221"*, %"class.std::__1::unique_ptr.221"*, %"class.std::__1::__compressed_pair.222" }
%"class.std::__1::unique_ptr.221" = type opaque
%"class.std::__1::__compressed_pair.222" = type { %"struct.std::__1::__compressed_pair_elem.223" }
%"struct.std::__1::__compressed_pair_elem.223" = type { %"class.std::__1::unique_ptr.221"* }
%"class.heap::base::Worklist" = type { %"class.v8::base::Mutex", %"class.heap::base::Worklist<v8::internal::HeapObject, 64>::Segment"*, %"struct.std::__1::atomic" }
%"class.heap::base::Worklist<v8::internal::HeapObject, 64>::Segment" = type opaque
%"class.v8::internal::WeakObjects" = type { %"class.v8::internal::Worklist", %"class.v8::internal::Worklist.227", %"class.v8::internal::Worklist.229", %"class.v8::internal::Worklist.229", %"class.v8::internal::Worklist.229", %"class.v8::internal::Worklist.231", %"class.v8::internal::Worklist.233", %"class.v8::internal::Worklist.235", %"class.v8::internal::Worklist.237", %"class.v8::internal::Worklist.239", %"class.v8::internal::Worklist.241" }
%"class.v8::internal::Worklist" = type <{ [8 x %"struct.v8::internal::Worklist<v8::internal::TransitionArray, 64>::PrivateSegmentHolder"], %"class.v8::internal::Worklist<v8::internal::TransitionArray, 64>::GlobalPool", i32, [4 x i8] }>
%"struct.v8::internal::Worklist<v8::internal::TransitionArray, 64>::PrivateSegmentHolder" = type { %"class.v8::internal::Worklist<v8::internal::TransitionArray, 64>::Segment"*, %"class.v8::internal::Worklist<v8::internal::TransitionArray, 64>::Segment"*, [64 x i8] }
%"class.v8::internal::Worklist<v8::internal::TransitionArray, 64>::Segment" = type opaque
%"class.v8::internal::Worklist<v8::internal::TransitionArray, 64>::GlobalPool" = type { %"class.v8::base::Mutex", %"class.v8::internal::Worklist<v8::internal::TransitionArray, 64>::Segment"*, %"struct.std::__1::atomic" }
%"class.v8::internal::Worklist.227" = type <{ [8 x %"struct.v8::internal::Worklist<v8::internal::EphemeronHashTable, 64>::PrivateSegmentHolder"], %"class.v8::internal::Worklist<v8::internal::EphemeronHashTable, 64>::GlobalPool", i32, [4 x i8] }>
%"struct.v8::internal::Worklist<v8::internal::EphemeronHashTable, 64>::PrivateSegmentHolder" = type { %"class.v8::internal::Worklist<v8::internal::EphemeronHashTable, 64>::Segment"*, %"class.v8::internal::Worklist<v8::internal::EphemeronHashTable, 64>::Segment"*, [64 x i8] }
%"class.v8::internal::Worklist<v8::internal::EphemeronHashTable, 64>::Segment" = type opaque
%"class.v8::internal::Worklist<v8::internal::EphemeronHashTable, 64>::GlobalPool" = type { %"class.v8::base::Mutex", %"class.v8::internal::Worklist<v8::internal::EphemeronHashTable, 64>::Segment"*, %"struct.std::__1::atomic" }
%"class.v8::internal::Worklist.229" = type <{ [8 x %"struct.v8::internal::Worklist<v8::internal::Ephemeron, 64>::PrivateSegmentHolder"], %"class.v8::internal::Worklist<v8::internal::Ephemeron, 64>::GlobalPool", i32, [4 x i8] }>
%"struct.v8::internal::Worklist<v8::internal::Ephemeron, 64>::PrivateSegmentHolder" = type { %"class.v8::internal::Worklist<v8::internal::Ephemeron, 64>::Segment"*, %"class.v8::internal::Worklist<v8::internal::Ephemeron, 64>::Segment"*, [64 x i8] }
%"class.v8::internal::Worklist<v8::internal::Ephemeron, 64>::Segment" = type opaque
%"class.v8::internal::Worklist<v8::internal::Ephemeron, 64>::GlobalPool" = type { %"class.v8::base::Mutex", %"class.v8::internal::Worklist<v8::internal::Ephemeron, 64>::Segment"*, %"struct.std::__1::atomic" }
%"class.v8::internal::Worklist.231" = type <{ [8 x %"struct.v8::internal::Worklist<std::__1::pair<v8::internal::HeapObject, v8::internal::CompressedHeapObjectSlot>, 64>::PrivateSegmentHolder"], %"class.v8::internal::Worklist<std::__1::pair<v8::internal::HeapObject, v8::internal::CompressedHeapObjectSlot>, 64>::GlobalPool", i32, [4 x i8] }>
%"struct.v8::internal::Worklist<std::__1::pair<v8::internal::HeapObject, v8::internal::CompressedHeapObjectSlot>, 64>::PrivateSegmentHolder" = type { %"class.v8::internal::Worklist<std::__1::pair<v8::internal::HeapObject, v8::internal::CompressedHeapObjectSlot>, 64>::Segment"*, %"class.v8::internal::Worklist<std::__1::pair<v8::internal::HeapObject, v8::internal::CompressedHeapObjectSlot>, 64>::Segment"*, [64 x i8] }
%"class.v8::internal::Worklist<std::__1::pair<v8::internal::HeapObject, v8::internal::CompressedHeapObjectSlot>, 64>::Segment" = type opaque
%"class.v8::internal::Worklist<std::__1::pair<v8::internal::HeapObject, v8::internal::CompressedHeapObjectSlot>, 64>::GlobalPool" = type { %"class.v8::base::Mutex", %"class.v8::internal::Worklist<std::__1::pair<v8::internal::HeapObject, v8::internal::CompressedHeapObjectSlot>, 64>::Segment"*, %"struct.std::__1::atomic" }
%"class.v8::internal::Worklist.233" = type <{ [8 x %"struct.v8::internal::Worklist<std::__1::pair<v8::internal::HeapObject, v8::internal::Code>, 64>::PrivateSegmentHolder"], %"class.v8::internal::Worklist<std::__1::pair<v8::internal::HeapObject, v8::internal::Code>, 64>::GlobalPool", i32, [4 x i8] }>
%"struct.v8::internal::Worklist<std::__1::pair<v8::internal::HeapObject, v8::internal::Code>, 64>::PrivateSegmentHolder" = type { %"class.v8::internal::Worklist<std::__1::pair<v8::internal::HeapObject, v8::internal::Code>, 64>::Segment"*, %"class.v8::internal::Worklist<std::__1::pair<v8::internal::HeapObject, v8::internal::Code>, 64>::Segment"*, [64 x i8] }
%"class.v8::internal::Worklist<std::__1::pair<v8::internal::HeapObject, v8::internal::Code>, 64>::Segment" = type opaque
%"class.v8::internal::Worklist<std::__1::pair<v8::internal::HeapObject, v8::internal::Code>, 64>::GlobalPool" = type { %"class.v8::base::Mutex", %"class.v8::internal::Worklist<std::__1::pair<v8::internal::HeapObject, v8::internal::Code>, 64>::Segment"*, %"struct.std::__1::atomic" }
%"class.v8::internal::Worklist.235" = type <{ [8 x %"struct.v8::internal::Worklist<v8::internal::JSWeakRef, 64>::PrivateSegmentHolder"], %"class.v8::internal::Worklist<v8::internal::JSWeakRef, 64>::GlobalPool", i32, [4 x i8] }>
%"struct.v8::internal::Worklist<v8::internal::JSWeakRef, 64>::PrivateSegmentHolder" = type { %"class.v8::internal::Worklist<v8::internal::JSWeakRef, 64>::Segment"*, %"class.v8::internal::Worklist<v8::internal::JSWeakRef, 64>::Segment"*, [64 x i8] }
%"class.v8::internal::Worklist<v8::internal::JSWeakRef, 64>::Segment" = type opaque
%"class.v8::internal::Worklist<v8::internal::JSWeakRef, 64>::GlobalPool" = type { %"class.v8::base::Mutex", %"class.v8::internal::Worklist<v8::internal::JSWeakRef, 64>::Segment"*, %"struct.std::__1::atomic" }
%"class.v8::internal::Worklist.237" = type <{ [8 x %"struct.v8::internal::Worklist<v8::internal::WeakCell, 64>::PrivateSegmentHolder"], %"class.v8::internal::Worklist<v8::internal::WeakCell, 64>::GlobalPool", i32, [4 x i8] }>
%"struct.v8::internal::Worklist<v8::internal::WeakCell, 64>::PrivateSegmentHolder" = type { %"class.v8::internal::Worklist<v8::internal::WeakCell, 64>::Segment"*, %"class.v8::internal::Worklist<v8::internal::WeakCell, 64>::Segment"*, [64 x i8] }
%"class.v8::internal::Worklist<v8::internal::WeakCell, 64>::Segment" = type opaque
%"class.v8::internal::Worklist<v8::internal::WeakCell, 64>::GlobalPool" = type { %"class.v8::base::Mutex", %"class.v8::internal::Worklist<v8::internal::WeakCell, 64>::Segment"*, %"struct.std::__1::atomic" }
%"class.v8::internal::Worklist.239" = type <{ [8 x %"struct.v8::internal::Worklist<v8::internal::SharedFunctionInfo, 64>::PrivateSegmentHolder"], %"class.v8::internal::Worklist<v8::internal::SharedFunctionInfo, 64>::GlobalPool", i32, [4 x i8] }>
%"struct.v8::internal::Worklist<v8::internal::SharedFunctionInfo, 64>::PrivateSegmentHolder" = type { %"class.v8::internal::Worklist<v8::internal::SharedFunctionInfo, 64>::Segment"*, %"class.v8::internal::Worklist<v8::internal::SharedFunctionInfo, 64>::Segment"*, [64 x i8] }
%"class.v8::internal::Worklist<v8::internal::SharedFunctionInfo, 64>::Segment" = type opaque
%"class.v8::internal::Worklist<v8::internal::SharedFunctionInfo, 64>::GlobalPool" = type { %"class.v8::base::Mutex", %"class.v8::internal::Worklist<v8::internal::SharedFunctionInfo, 64>::Segment"*, %"struct.std::__1::atomic" }
%"class.v8::internal::Worklist.241" = type <{ [8 x %"struct.v8::internal::Worklist<v8::internal::JSFunction, 64>::PrivateSegmentHolder"], %"class.v8::internal::Worklist<v8::internal::JSFunction, 64>::GlobalPool", i32, [4 x i8] }>
%"struct.v8::internal::Worklist<v8::internal::JSFunction, 64>::PrivateSegmentHolder" = type { %"class.v8::internal::Worklist<v8::internal::JSFunction, 64>::Segment"*, %"class.v8::internal::Worklist<v8::internal::JSFunction, 64>::Segment"*, [64 x i8] }
%"class.v8::internal::Worklist<v8::internal::JSFunction, 64>::Segment" = type opaque
%"class.v8::internal::Worklist<v8::internal::JSFunction, 64>::GlobalPool" = type { %"class.v8::base::Mutex", %"class.v8::internal::Worklist<v8::internal::JSFunction, 64>::Segment"*, %"struct.std::__1::atomic" }
%"struct.v8::internal::EphemeronMarking" = type { %"class.std::__1::vector.243", i8, i64 }
%"class.std::__1::vector.243" = type { %"class.std::__1::__vector_base.244" }
%"class.std::__1::__vector_base.244" = type { %"class.v8::internal::HeapObject"*, %"class.v8::internal::HeapObject"*, %"class.std::__1::__compressed_pair.245" }
%"class.std::__1::__compressed_pair.245" = type { %"struct.std::__1::__compressed_pair_elem.246" }
%"struct.std::__1::__compressed_pair_elem.246" = type { %"class.v8::internal::HeapObject"* }
%"class.std::__1::unique_ptr.250" = type { %"class.std::__1::__compressed_pair.251" }
%"class.std::__1::__compressed_pair.251" = type { %"struct.std::__1::__compressed_pair_elem.252" }
%"struct.std::__1::__compressed_pair_elem.252" = type { %"class.v8::internal::MainMarkingVisitor"* }
%"class.v8::internal::MainMarkingVisitor" = type opaque
%"class.std::__1::unique_ptr.256" = type { %"class.std::__1::__compressed_pair.257" }
%"class.std::__1::__compressed_pair.257" = type { %"struct.std::__1::__compressed_pair_elem.258" }
%"struct.std::__1::__compressed_pair_elem.258" = type { %"class.v8::internal::MarkingWorklists::Local"* }
%"class.v8::internal::MarkingWorklists::Local" = type { %"class.heap::base::Worklist<v8::internal::HeapObject, 64>::Local", %"class.heap::base::Worklist<v8::internal::HeapObject, 16>::Local", %"class.heap::base::Worklist<v8::internal::HeapObject, 64>::Local", i64, %"class.heap::base::Worklist<v8::internal::HeapObject, 64>::Local"*, i8, [7 x i8], %"class.std::__1::unordered_map.259" }
%"class.heap::base::Worklist<v8::internal::HeapObject, 16>::Local" = type { %"class.heap::base::Worklist.211"*, %"class.heap::base::internal::SegmentBase"*, %"class.heap::base::internal::SegmentBase"* }
%"class.heap::base::internal::SegmentBase" = type { i16, i16 }
%"class.heap::base::Worklist<v8::internal::HeapObject, 64>::Local" = type { %"class.heap::base::Worklist"*, %"class.heap::base::internal::SegmentBase"*, %"class.heap::base::internal::SegmentBase"* }
%"class.std::__1::unordered_map.259" = type { %"class.std::__1::__hash_table.260" }
%"class.std::__1::__hash_table.260" = type <{ %"class.std::__1::unique_ptr.261", %"class.std::__1::__compressed_pair.271", %"class.std::__1::__compressed_pair.276", %"class.std::__1::__compressed_pair.279", [4 x i8] }>
%"class.std::__1::unique_ptr.261" = type { %"class.std::__1::__compressed_pair.262" }
%"class.std::__1::__compressed_pair.262" = type { %"struct.std::__1::__compressed_pair_elem.263", %"struct.std::__1::__compressed_pair_elem.265" }
%"struct.std::__1::__compressed_pair_elem.263" = type { %"struct.std::__1::__hash_node_base.264"** }
%"struct.std::__1::__hash_node_base.264" = type { %"struct.std::__1::__hash_node_base.264"* }
%"struct.std::__1::__compressed_pair_elem.265" = type { %"class.std::__1::__bucket_list_deallocator.266" }
%"class.std::__1::__bucket_list_deallocator.266" = type { %"class.std::__1::__compressed_pair.267" }
%"class.std::__1::__compressed_pair.267" = type { %"struct.std::__1::__compressed_pair_elem.9" }
%"class.std::__1::__compressed_pair.271" = type { %"struct.std::__1::__compressed_pair_elem.272" }
%"struct.std::__1::__compressed_pair_elem.272" = type { %"struct.std::__1::__hash_node_base.264" }
%"class.std::__1::__compressed_pair.276" = type { %"struct.std::__1::__compressed_pair_elem.9" }
%"class.std::__1::__compressed_pair.279" = type { %"struct.std::__1::__compressed_pair_elem.51" }
%"class.v8::internal::NativeContextInferrer" = type { i8 }
%"class.v8::internal::NativeContextStats" = type { %"class.std::__1::unordered_map.286" }
%"class.std::__1::unordered_map.286" = type { %"class.std::__1::__hash_table.287" }
%"class.std::__1::__hash_table.287" = type <{ %"class.std::__1::unique_ptr.288", %"class.std::__1::__compressed_pair.298", %"class.std::__1::__compressed_pair.303", %"class.std::__1::__compressed_pair.306", [4 x i8] }>
%"class.std::__1::unique_ptr.288" = type { %"class.std::__1::__compressed_pair.289" }
%"class.std::__1::__compressed_pair.289" = type { %"struct.std::__1::__compressed_pair_elem.290", %"struct.std::__1::__compressed_pair_elem.292" }
%"struct.std::__1::__compressed_pair_elem.290" = type { %"struct.std::__1::__hash_node_base.291"** }
%"struct.std::__1::__hash_node_base.291" = type { %"struct.std::__1::__hash_node_base.291"* }
%"struct.std::__1::__compressed_pair_elem.292" = type { %"class.std::__1::__bucket_list_deallocator.293" }
%"class.std::__1::__bucket_list_deallocator.293" = type { %"class.std::__1::__compressed_pair.294" }
%"class.std::__1::__compressed_pair.294" = type { %"struct.std::__1::__compressed_pair_elem.9" }
%"class.std::__1::__compressed_pair.298" = type { %"struct.std::__1::__compressed_pair_elem.299" }
%"struct.std::__1::__compressed_pair_elem.299" = type { %"struct.std::__1::__hash_node_base.291" }
%"class.std::__1::__compressed_pair.303" = type { %"struct.std::__1::__compressed_pair_elem.9" }
%"class.std::__1::__compressed_pair.306" = type { %"struct.std::__1::__compressed_pair_elem.51" }
%"class.std::__1::vector.310" = type { %"class.std::__1::__vector_base.311" }
%"class.std::__1::__vector_base.311" = type { %"class.v8::internal::Page"**, %"class.v8::internal::Page"**, %"class.std::__1::__compressed_pair.312" }
%"class.std::__1::__compressed_pair.312" = type { %"struct.std::__1::__compressed_pair_elem.313" }
%"struct.std::__1::__compressed_pair_elem.313" = type { %"class.v8::internal::Page"** }
%"class.std::__1::vector.317" = type { %"class.std::__1::__vector_base.318" }
%"class.std::__1::__vector_base.318" = type { %"struct.std::__1::pair.319"*, %"struct.std::__1::pair.319"*, %"class.std::__1::__compressed_pair.320" }
%"struct.std::__1::pair.319" = type opaque
%"class.std::__1::__compressed_pair.320" = type { %"struct.std::__1::__compressed_pair_elem.321" }
%"struct.std::__1::__compressed_pair_elem.321" = type { %"struct.std::__1::pair.319"* }
%"class.v8::internal::Sweeper" = type <{ %"class.v8::internal::Heap"*, %"class.v8::internal::MajorNonAtomicMarkingState"*, %"class.std::__1::unique_ptr.325", %"class.v8::base::Mutex", [3 x %"class.std::__1::vector.310"], [3 x %"class.std::__1::vector.310"], i8, %"struct.std::__1::atomic.182", [6 x i8], %"class.std::__1::vector.310", i64, %"class.v8::base::Semaphore", i8, i8, i8, [5 x i8] }>
%"class.std::__1::unique_ptr.325" = type { %"class.std::__1::__compressed_pair.326" }
%"class.std::__1::__compressed_pair.326" = type { %"struct.std::__1::__compressed_pair_elem.327" }
%"struct.std::__1::__compressed_pair_elem.327" = type { %"class.v8::JobHandle"* }
%"class.v8::JobHandle" = type { i32 (...)** }
%"class.v8::internal::MajorMarkingState" = type { i8 }
%"class.v8::internal::MajorNonAtomicMarkingState" = type { i8 }
%"class.v8::internal::MinorMarkCompactCollector" = type <{ %"class.v8::internal::MarkCompactCollectorBase", %"class.v8::internal::Worklist.335"*, %"class.v8::internal::YoungGenerationMarkingVisitor"*, %"class.v8::base::Semaphore", %"class.std::__1::vector.310", %"class.std::__1::vector.310", %"class.v8::internal::MinorMarkingState", %"class.v8::internal::MinorNonAtomicMarkingState", [6 x i8] }>
%"class.v8::internal::Worklist.335" = type opaque
%"class.v8::internal::YoungGenerationMarkingVisitor" = type opaque
%"class.v8::internal::MinorMarkingState" = type { i8 }
%"class.v8::internal::MinorNonAtomicMarkingState" = type { i8 }
%"class.std::__1::unique_ptr.338" = type { %"class.std::__1::__compressed_pair.339" }
%"class.std::__1::__compressed_pair.339" = type { %"struct.std::__1::__compressed_pair_elem.340" }
%"struct.std::__1::__compressed_pair_elem.340" = type { %"class.v8::internal::ScavengerCollector"* }
%"class.v8::internal::ScavengerCollector" = type opaque
%"class.std::__1::unique_ptr.344" = type { %"class.std::__1::__compressed_pair.345" }
%"class.std::__1::__compressed_pair.345" = type { %"struct.std::__1::__compressed_pair_elem.346" }
%"struct.std::__1::__compressed_pair_elem.346" = type { %"class.v8::internal::ArrayBufferSweeper"* }
%"class.v8::internal::ArrayBufferSweeper" = type opaque
%"class.std::__1::unique_ptr.350" = type { %"class.std::__1::__compressed_pair.351" }
%"class.std::__1::__compressed_pair.351" = type { %"struct.std::__1::__compressed_pair_elem.352" }
%"struct.std::__1::__compressed_pair_elem.352" = type { %"class.v8::internal::MemoryAllocator"* }
%"class.v8::internal::MemoryAllocator" = type { %"class.v8::internal::Isolate"*, %"class.v8::PageAllocator"*, %"class.v8::PageAllocator"*, i64, %"struct.std::__1::atomic", %"struct.std::__1::atomic", %"struct.std::__1::atomic", %"struct.std::__1::atomic", %"class.v8::internal::VirtualMemory", %"class.v8::internal::MemoryAllocator::Unmapper", %"class.std::__1::unordered_set.360", %"class.v8::base::Mutex" }
%"class.v8::internal::MemoryAllocator::Unmapper" = type { %"class.v8::internal::Heap"*, %"class.v8::internal::MemoryAllocator"*, %"class.v8::base::Mutex", [3 x %"class.std::__1::vector.353"], %"class.std::__1::unique_ptr.325" }
%"class.std::__1::vector.353" = type { %"class.std::__1::__vector_base.354" }
%"class.std::__1::__vector_base.354" = type { %"class.v8::internal::MemoryChunk"**, %"class.v8::internal::MemoryChunk"**, %"class.std::__1::__compressed_pair.355" }
%"class.std::__1::__compressed_pair.355" = type { %"struct.std::__1::__compressed_pair_elem.356" }
%"struct.std::__1::__compressed_pair_elem.356" = type { %"class.v8::internal::MemoryChunk"** }
%"class.std::__1::unique_ptr.389" = type { %"class.std::__1::__compressed_pair.390" }
%"class.std::__1::__compressed_pair.390" = type { %"struct.std::__1::__compressed_pair_elem.391" }
%"struct.std::__1::__compressed_pair_elem.391" = type { %"class.v8::internal::IncrementalMarking"* }
%"class.v8::internal::IncrementalMarking" = type { %"class.v8::internal::Heap"*, %"class.v8::internal::MarkCompactCollector"*, %"class.v8::internal::WeakObjects"*, double, double, i64, i64, i64, i64, double, i64, %"struct.std::__1::atomic.392", i8, i8, i8, i8, [3 x i8], %"class.v8::internal::IncrementalMarkingJob", %"struct.std::__1::atomic.396", %"class.v8::internal::IncrementalMarking::Observer", %"class.v8::internal::IncrementalMarking::Observer", %"class.v8::internal::MajorMarkingState", %"class.v8::internal::MajorAtomicMarkingState", %"class.v8::internal::MajorNonAtomicMarkingState", %"class.v8::base::Mutex", %"class.std::__1::unordered_map.401" }
%"struct.std::__1::atomic.392" = type { %"struct.std::__1::__atomic_base.393" }
%"struct.std::__1::__atomic_base.393" = type { %"struct.std::__1::__cxx_atomic_impl.394" }
%"struct.std::__1::__cxx_atomic_impl.394" = type { %"struct.std::__1::__cxx_atomic_base_impl.395" }
%"struct.std::__1::__cxx_atomic_base_impl.395" = type { i8 }
%"class.v8::internal::IncrementalMarkingJob" = type <{ %"class.v8::base::Mutex", double, i8, i8, [6 x i8] }>
%"struct.std::__1::atomic.396" = type { %"struct.std::__1::__atomic_base.397" }
%"struct.std::__1::__atomic_base.397" = type { %"struct.std::__1::__cxx_atomic_impl.398" }
%"struct.std::__1::__cxx_atomic_impl.398" = type { %"struct.std::__1::__cxx_atomic_base_impl.399" }
%"struct.std::__1::__cxx_atomic_base_impl.399" = type { i32 }
%"class.v8::internal::IncrementalMarking::Observer" = type { %"class.v8::internal::AllocationObserver", %"class.v8::internal::IncrementalMarking"* }
%"class.v8::internal::MajorAtomicMarkingState" = type { i8 }
%"class.std::__1::unordered_map.401" = type { %"class.std::__1::__hash_table.402" }
%"class.std::__1::__hash_table.402" = type <{ %"class.std::__1::unique_ptr.403", %"class.std::__1::__compressed_pair.413", %"class.std::__1::__compressed_pair.418", %"class.std::__1::__compressed_pair.421", [4 x i8] }>
%"class.std::__1::unique_ptr.403" = type { %"class.std::__1::__compressed_pair.404" }
%"class.std::__1::__compressed_pair.404" = type { %"struct.std::__1::__compressed_pair_elem.405", %"struct.std::__1::__compressed_pair_elem.407" }
%"struct.std::__1::__compressed_pair_elem.405" = type { %"struct.std::__1::__hash_node_base.406"** }
%"struct.std::__1::__hash_node_base.406" = type { %"struct.std::__1::__hash_node_base.406"* }
%"struct.std::__1::__compressed_pair_elem.407" = type { %"class.std::__1::__bucket_list_deallocator.408" }
%"class.std::__1::__bucket_list_deallocator.408" = type { %"class.std::__1::__compressed_pair.409" }
%"class.std::__1::__compressed_pair.409" = type { %"struct.std::__1::__compressed_pair_elem.9" }
%"class.std::__1::__compressed_pair.413" = type { %"struct.std::__1::__compressed_pair_elem.414" }
%"struct.std::__1::__compressed_pair_elem.414" = type { %"struct.std::__1::__hash_node_base.406" }
%"class.std::__1::__compressed_pair.418" = type { %"struct.std::__1::__compressed_pair_elem.9" }
%"class.std::__1::__compressed_pair.421" = type { %"struct.std::__1::__compressed_pair_elem.51" }
%"class.std::__1::unique_ptr.428" = type { %"class.std::__1::__compressed_pair.429" }
%"class.std::__1::__compressed_pair.429" = type { %"struct.std::__1::__compressed_pair_elem.430" }
%"struct.std::__1::__compressed_pair_elem.430" = type { %"class.v8::internal::ConcurrentMarking"* }
%"class.v8::internal::ConcurrentMarking" = type <{ %"class.std::__1::unique_ptr.325", %"class.v8::internal::Heap"*, %"class.v8::internal::MarkingWorklists"*, %"class.v8::internal::WeakObjects"*, [8 x %"struct.v8::internal::ConcurrentMarking::TaskState"], %"struct.std::__1::atomic", %"struct.std::__1::atomic.182", [7 x i8] }>
%"struct.v8::internal::ConcurrentMarking::TaskState" = type { i64, %"class.std::__1::unordered_map.431", %"class.v8::internal::NativeContextInferrer", [7 x i8], %"class.v8::internal::NativeContextStats", [64 x i8] }
%"class.std::__1::unordered_map.431" = type { %"class.std::__1::__hash_table.432" }
%"class.std::__1::__hash_table.432" = type <{ %"class.std::__1::unique_ptr.433", %"class.std::__1::__compressed_pair.443", %"class.std::__1::__compressed_pair.448", %"class.std::__1::__compressed_pair.451", [4 x i8] }>
%"class.std::__1::unique_ptr.433" = type { %"class.std::__1::__compressed_pair.434" }
%"class.std::__1::__compressed_pair.434" = type { %"struct.std::__1::__compressed_pair_elem.435", %"struct.std::__1::__compressed_pair_elem.437" }
%"struct.std::__1::__compressed_pair_elem.435" = type { %"struct.std::__1::__hash_node_base.436"** }
%"struct.std::__1::__hash_node_base.436" = type { %"struct.std::__1::__hash_node_base.436"* }
%"struct.std::__1::__compressed_pair_elem.437" = type { %"class.std::__1::__bucket_list_deallocator.438" }
%"class.std::__1::__bucket_list_deallocator.438" = type { %"class.std::__1::__compressed_pair.439" }
%"class.std::__1::__compressed_pair.439" = type { %"struct.std::__1::__compressed_pair_elem.9" }
%"class.std::__1::__compressed_pair.443" = type { %"struct.std::__1::__compressed_pair_elem.444" }
%"struct.std::__1::__compressed_pair_elem.444" = type { %"struct.std::__1::__hash_node_base.436" }
%"class.std::__1::__compressed_pair.448" = type { %"struct.std::__1::__compressed_pair_elem.9" }
%"class.std::__1::__compressed_pair.451" = type { %"struct.std::__1::__compressed_pair_elem.51" }
%"class.std::__1::unique_ptr.458" = type { %"class.std::__1::__compressed_pair.459" }
%"class.std::__1::__compressed_pair.459" = type { %"struct.std::__1::__compressed_pair_elem.460" }
%"struct.std::__1::__compressed_pair_elem.460" = type { %"class.v8::internal::GCIdleTimeHandler"* }
%"class.v8::internal::GCIdleTimeHandler" = type opaque
%"class.std::__1::unique_ptr.464" = type { %"class.std::__1::__compressed_pair.465" }
%"class.std::__1::__compressed_pair.465" = type { %"struct.std::__1::__compressed_pair_elem.466" }
%"struct.std::__1::__compressed_pair_elem.466" = type { %"class.v8::internal::MemoryMeasurement"* }
%"class.v8::internal::MemoryMeasurement" = type { %"class.std::__1::list", %"class.std::__1::list", %"class.std::__1::list", %"class.v8::internal::Isolate"*, i8, i8, i8, %"class.v8::base::RandomNumberGenerator" }
%"class.std::__1::list" = type { %"class.std::__1::__list_imp" }
%"class.std::__1::__list_imp" = type { %"struct.std::__1::__list_node_base", %"class.std::__1::__compressed_pair.467" }
%"struct.std::__1::__list_node_base" = type { %"struct.std::__1::__list_node_base"*, %"struct.std::__1::__list_node_base"* }
%"class.std::__1::__compressed_pair.467" = type { %"struct.std::__1::__compressed_pair_elem.9" }
%"class.v8::base::RandomNumberGenerator" = type { i64, i64, i64 }
%"class.std::__1::unique_ptr.474" = type { %"class.std::__1::__compressed_pair.475" }
%"class.std::__1::__compressed_pair.475" = type { %"struct.std::__1::__compressed_pair_elem.476" }
%"struct.std::__1::__compressed_pair_elem.476" = type { %"class.v8::internal::MemoryReducer"* }
%"class.v8::internal::MemoryReducer" = type opaque
%"class.std::__1::unique_ptr.480" = type { %"class.std::__1::__compressed_pair.481" }
%"class.std::__1::__compressed_pair.481" = type { %"struct.std::__1::__compressed_pair_elem.482" }
%"struct.std::__1::__compressed_pair_elem.482" = type { %"class.v8::internal::ObjectStats"* }
%"class.v8::internal::ObjectStats" = type opaque
%"class.std::__1::unique_ptr.486" = type { %"class.std::__1::__compressed_pair.487" }
%"class.std::__1::__compressed_pair.487" = type { %"struct.std::__1::__compressed_pair_elem.488" }
%"struct.std::__1::__compressed_pair_elem.488" = type { %"class.v8::internal::ScavengeJob"* }
%"class.v8::internal::ScavengeJob" = type opaque
%"class.std::__1::unique_ptr.492" = type { %"class.std::__1::__compressed_pair.493" }
%"class.std::__1::__compressed_pair.493" = type { %"struct.std::__1::__compressed_pair_elem.494" }
%"struct.std::__1::__compressed_pair_elem.494" = type { %"class.v8::internal::AllocationObserver"* }
%"class.std::__1::unique_ptr.498" = type { %"class.std::__1::__compressed_pair.499" }
%"class.std::__1::__compressed_pair.499" = type { %"struct.std::__1::__compressed_pair_elem.500" }
%"struct.std::__1::__compressed_pair_elem.500" = type { %"class.v8::internal::LocalEmbedderHeapTracer"* }
%"class.v8::internal::LocalEmbedderHeapTracer" = type opaque
%"class.std::__1::unique_ptr.504" = type { %"class.std::__1::__compressed_pair.505" }
%"class.std::__1::__compressed_pair.505" = type { %"struct.std::__1::__compressed_pair_elem.506" }
%"struct.std::__1::__compressed_pair_elem.506" = type { %"class.v8::internal::MarkingBarrier"* }
%"class.v8::internal::MarkingBarrier" = type opaque
%"class.std::__1::shared_ptr.510" = type { %"class.v8::internal::CodeRange"*, %"class.std::__1::__shared_weak_count"* }
%"class.v8::internal::CodeRange" = type { %"class.v8::internal::VirtualMemoryCage", %"struct.std::__1::atomic.511", %"class.v8::base::Mutex" }
%"class.v8::internal::VirtualMemoryCage" = type { i32 (...)**, i64, %"class.std::__1::unique_ptr.2", %"class.v8::internal::VirtualMemory" }
%"struct.std::__1::atomic.511" = type { %"struct.std::__1::__atomic_base.512" }
%"struct.std::__1::__atomic_base.512" = type { %"struct.std::__1::__cxx_atomic_impl.513" }
%"struct.std::__1::__cxx_atomic_impl.513" = type { %"struct.std::__1::__cxx_atomic_base_impl.514" }
%"struct.std::__1::__cxx_atomic_base_impl.514" = type { i8* }
%"class.v8::CppHeap" = type opaque
%"class.v8::EmbedderRootsHandler" = type { i32 (...)** }
%"class.v8::internal::StrongRootsEntry" = type { %"class.v8::internal::FullObjectSlot", %"class.v8::internal::FullObjectSlot", %"class.v8::internal::StrongRootsEntry"*, %"class.v8::internal::StrongRootsEntry"* }
%"class.v8::internal::FullObjectSlot" = type { %"class.v8::internal::SlotBase" }
%"class.v8::internal::SlotBase" = type { i64 }
%"class.std::__1::unordered_map.515" = type { %"class.std::__1::__hash_table.516" }
%"class.std::__1::__hash_table.516" = type <{ %"class.std::__1::unique_ptr.517", %"class.std::__1::__compressed_pair.527", %"class.std::__1::__compressed_pair.532", %"class.std::__1::__compressed_pair.535", [4 x i8] }>
%"class.std::__1::unique_ptr.517" = type { %"class.std::__1::__compressed_pair.518" }
%"class.std::__1::__compressed_pair.518" = type { %"struct.std::__1::__compressed_pair_elem.519", %"struct.std::__1::__compressed_pair_elem.521" }
%"struct.std::__1::__compressed_pair_elem.519" = type { %"struct.std::__1::__hash_node_base.520"** }
%"struct.std::__1::__hash_node_base.520" = type { %"struct.std::__1::__hash_node_base.520"* }
%"struct.std::__1::__compressed_pair_elem.521" = type { %"class.std::__1::__bucket_list_deallocator.522" }
%"class.std::__1::__bucket_list_deallocator.522" = type { %"class.std::__1::__compressed_pair.523" }
%"class.std::__1::__compressed_pair.523" = type { %"struct.std::__1::__compressed_pair_elem.9" }
%"class.std::__1::__compressed_pair.527" = type { %"struct.std::__1::__compressed_pair_elem.528" }
%"struct.std::__1::__compressed_pair_elem.528" = type { %"struct.std::__1::__hash_node_base.520" }
%"class.std::__1::__compressed_pair.532" = type { %"struct.std::__1::__compressed_pair_elem.9" }
%"class.std::__1::__compressed_pair.535" = type { %"struct.std::__1::__compressed_pair_elem.51" }
%"class.std::__1::unique_ptr.541" = type { %"class.std::__1::__compressed_pair.542" }
%"class.std::__1::__compressed_pair.542" = type { %"struct.std::__1::__compressed_pair_elem.543" }
%"struct.std::__1::__compressed_pair_elem.543" = type { %"class.v8::internal::GlobalHandleVector"* }
%"class.v8::internal::GlobalHandleVector" = type opaque
%"class.std::__1::unique_ptr.547" = type { %"class.std::__1::__compressed_pair.548" }
%"class.std::__1::__compressed_pair.548" = type { %"struct.std::__1::__compressed_pair_elem.549" }
%"struct.std::__1::__compressed_pair_elem.549" = type { %"class.v8::internal::GlobalSafepoint"* }
%"class.v8::internal::GlobalSafepoint" = type opaque
%"class.v8::internal::Heap::ExternalStringTable" = type { %"class.v8::internal::Heap"*, %"class.std::__1::vector.553", %"class.std::__1::vector.553" }
%"class.std::__1::unique_ptr.560" = type { %"class.std::__1::__compressed_pair.561" }
%"class.std::__1::__compressed_pair.561" = type { %"struct.std::__1::__compressed_pair_elem.562" }
%"struct.std::__1::__compressed_pair_elem.562" = type { %"class.v8::internal::CollectionBarrier"* }
%"class.v8::internal::CollectionBarrier" = type opaque
%"class.std::__1::unordered_set.360" = type { %"class.std::__1::__hash_table.361" }
%"class.std::__1::__hash_table.361" = type <{ %"class.std::__1::unique_ptr.362", %"class.std::__1::__compressed_pair.372", %"class.std::__1::__compressed_pair.377", %"class.std::__1::__compressed_pair.381", [4 x i8] }>
%"class.std::__1::unique_ptr.362" = type { %"class.std::__1::__compressed_pair.363" }
%"class.std::__1::__compressed_pair.363" = type { %"struct.std::__1::__compressed_pair_elem.364", %"struct.std::__1::__compressed_pair_elem.366" }
%"struct.std::__1::__compressed_pair_elem.364" = type { %"struct.std::__1::__hash_node_base.365"** }
%"struct.std::__1::__hash_node_base.365" = type { %"struct.std::__1::__hash_node_base.365"* }
%"struct.std::__1::__compressed_pair_elem.366" = type { %"class.std::__1::__bucket_list_deallocator.367" }
%"class.std::__1::__bucket_list_deallocator.367" = type { %"class.std::__1::__compressed_pair.368" }
%"class.std::__1::__compressed_pair.368" = type { %"struct.std::__1::__compressed_pair_elem.9" }
%"class.std::__1::__compressed_pair.372" = type { %"struct.std::__1::__compressed_pair_elem.373" }
%"struct.std::__1::__compressed_pair_elem.373" = type { %"struct.std::__1::__hash_node_base.365" }
%"class.std::__1::__compressed_pair.377" = type { %"struct.std::__1::__compressed_pair_elem.9" }
%"class.std::__1::__compressed_pair.381" = type { %"struct.std::__1::__compressed_pair_elem.51" }
%"class.std::__1::unordered_map.592" = type { %"class.std::__1::__hash_table.593" }
%"class.std::__1::__hash_table.593" = type <{ %"class.std::__1::unique_ptr.594", %"class.std::__1::__compressed_pair.604", %"class.std::__1::__compressed_pair.609", %"class.std::__1::__compressed_pair.612", [4 x i8] }>
%"class.std::__1::unique_ptr.594" = type { %"class.std::__1::__compressed_pair.595" }
%"class.std::__1::__compressed_pair.595" = type { %"struct.std::__1::__compressed_pair_elem.596", %"struct.std::__1::__compressed_pair_elem.598" }
%"struct.std::__1::__compressed_pair_elem.596" = type { %"struct.std::__1::__hash_node_base.597"** }
%"struct.std::__1::__hash_node_base.597" = type { %"struct.std::__1::__hash_node_base.597"* }
%"struct.std::__1::__compressed_pair_elem.598" = type { %"class.std::__1::__bucket_list_deallocator.599" }
%"class.std::__1::__bucket_list_deallocator.599" = type { %"class.std::__1::__compressed_pair.600" }
%"class.std::__1::__compressed_pair.600" = type { %"struct.std::__1::__compressed_pair_elem.9" }
%"class.std::__1::__compressed_pair.604" = type { %"struct.std::__1::__compressed_pair_elem.605" }
%"struct.std::__1::__compressed_pair_elem.605" = type { %"struct.std::__1::__hash_node_base.597" }
%"class.std::__1::__compressed_pair.609" = type { %"struct.std::__1::__compressed_pair_elem.9" }
%"class.std::__1::__compressed_pair.612" = type { %"struct.std::__1::__compressed_pair_elem.51" }
%"class.std::__1::unordered_map.566" = type { %"class.std::__1::__hash_table.567" }
%"class.std::__1::__hash_table.567" = type <{ %"class.std::__1::unique_ptr.568", %"class.std::__1::__compressed_pair.578", %"class.std::__1::__compressed_pair.583", %"class.std::__1::__compressed_pair.586", [4 x i8] }>
%"class.std::__1::unique_ptr.568" = type { %"class.std::__1::__compressed_pair.569" }
%"class.std::__1::__compressed_pair.569" = type { %"struct.std::__1::__compressed_pair_elem.570", %"struct.std::__1::__compressed_pair_elem.572" }
%"struct.std::__1::__compressed_pair_elem.570" = type { %"struct.std::__1::__hash_node_base.571"** }
%"struct.std::__1::__hash_node_base.571" = type { %"struct.std::__1::__hash_node_base.571"* }
%"struct.std::__1::__compressed_pair_elem.572" = type { %"class.std::__1::__bucket_list_deallocator.573" }
%"class.std::__1::__bucket_list_deallocator.573" = type { %"class.std::__1::__compressed_pair.574" }
%"class.std::__1::__compressed_pair.574" = type { %"struct.std::__1::__compressed_pair_elem.9" }
%"class.std::__1::__compressed_pair.578" = type { %"struct.std::__1::__compressed_pair_elem.579" }
%"struct.std::__1::__compressed_pair_elem.579" = type { %"struct.std::__1::__hash_node_base.571" }
%"class.std::__1::__compressed_pair.583" = type { %"struct.std::__1::__compressed_pair_elem.9" }
%"class.std::__1::__compressed_pair.586" = type { %"struct.std::__1::__compressed_pair_elem.51" }
%"class.std::__1::unordered_map.616" = type { %"class.std::__1::__hash_table.617" }
%"class.std::__1::__hash_table.617" = type <{ %"class.std::__1::unique_ptr.618", %"class.std::__1::__compressed_pair.628", %"class.std::__1::__compressed_pair.633", %"class.std::__1::__compressed_pair.638", [4 x i8] }>
%"class.std::__1::unique_ptr.618" = type { %"class.std::__1::__compressed_pair.619" }
%"class.std::__1::__compressed_pair.619" = type { %"struct.std::__1::__compressed_pair_elem.620", %"struct.std::__1::__compressed_pair_elem.622" }
%"struct.std::__1::__compressed_pair_elem.620" = type { %"struct.std::__1::__hash_node_base.621"** }
%"struct.std::__1::__hash_node_base.621" = type { %"struct.std::__1::__hash_node_base.621"* }
%"struct.std::__1::__compressed_pair_elem.622" = type { %"class.std::__1::__bucket_list_deallocator.623" }
%"class.std::__1::__bucket_list_deallocator.623" = type { %"class.std::__1::__compressed_pair.624" }
%"class.std::__1::__compressed_pair.624" = type { %"struct.std::__1::__compressed_pair_elem.9" }
%"class.std::__1::__compressed_pair.628" = type { %"struct.std::__1::__compressed_pair_elem.629" }
%"struct.std::__1::__compressed_pair_elem.629" = type { %"struct.std::__1::__hash_node_base.621" }
%"class.std::__1::__compressed_pair.633" = type { %"struct.std::__1::__compressed_pair_elem.9" }
%"class.std::__1::__compressed_pair.638" = type { %"struct.std::__1::__compressed_pair_elem.51" }
%"class.std::__1::vector.644" = type { %"class.std::__1::__vector_base.645" }
%"class.std::__1::__vector_base.645" = type { %"class.v8::internal::HeapObjectAllocationTracker"**, %"class.v8::internal::HeapObjectAllocationTracker"**, %"class.std::__1::__compressed_pair.646" }
%"class.v8::internal::HeapObjectAllocationTracker" = type { i32 (...)** }
%"class.std::__1::__compressed_pair.646" = type { %"struct.std::__1::__compressed_pair_elem.647" }
%"struct.std::__1::__compressed_pair_elem.647" = type { %"class.v8::internal::HeapObjectAllocationTracker"** }
%"class.std::__1::unique_ptr.651" = type { %"class.std::__1::__compressed_pair.652" }
%"class.std::__1::__compressed_pair.652" = type { %"struct.std::__1::__compressed_pair_elem.653" }
%"struct.std::__1::__compressed_pair_elem.653" = type { %"class.v8::internal::third_party_heap::Heap"* }
%"class.v8::internal::third_party_heap::Heap" = type { i8 }
%"class.v8::internal::ReadOnlyHeap" = type { i32 (...)**, i8, %"class.v8::internal::ReadOnlySpace"*, %"class.std::__1::vector.553" }
%"class.std::__1::shared_ptr.657" = type { %"class.v8::internal::ReadOnlyArtifacts"*, %"class.std::__1::__shared_weak_count"* }
%"class.v8::internal::ReadOnlyArtifacts" = type { i32 (...)**, %"class.std::__1::vector.169", %"class.v8::internal::AllocationStats", %"class.std::__1::unique_ptr.658", %"class.std::__1::unique_ptr.672" }
%"class.std::__1::unique_ptr.658" = type { %"class.std::__1::__compressed_pair.659" }
%"class.std::__1::__compressed_pair.659" = type { %"struct.std::__1::__compressed_pair_elem.660" }
%"struct.std::__1::__compressed_pair_elem.660" = type { %"class.v8::internal::SharedReadOnlySpace"* }
%"class.v8::internal::SharedReadOnlySpace" = type { %"class.v8::internal::ReadOnlySpace", %"class.std::__1::vector.661" }
%"class.std::__1::vector.661" = type { %"class.std::__1::__vector_base.662" }
%"class.std::__1::__vector_base.662" = type { %"class.std::__1::unique_ptr.663"*, %"class.std::__1::unique_ptr.663"*, %"class.std::__1::__compressed_pair.664" }
%"class.std::__1::unique_ptr.663" = type { %"class.std::__1::__compressed_pair.1195" }
%"class.std::__1::__compressed_pair.1195" = type { %"struct.std::__1::__compressed_pair_elem.1196" }
%"struct.std::__1::__compressed_pair_elem.1196" = type { %"class.v8::PageAllocator::SharedMemoryMapping"* }
%"class.v8::PageAllocator::SharedMemoryMapping" = type { i32 (...)** }
%"class.std::__1::__compressed_pair.664" = type { %"struct.std::__1::__compressed_pair_elem.665" }
%"struct.std::__1::__compressed_pair_elem.665" = type { %"class.std::__1::unique_ptr.663"* }
%"class.std::__1::unique_ptr.672" = type { %"class.std::__1::__compressed_pair.673" }
%"class.std::__1::__compressed_pair.673" = type { %"struct.std::__1::__compressed_pair_elem.674" }
%"struct.std::__1::__compressed_pair_elem.674" = type { %"class.v8::internal::ReadOnlyHeap"* }
%"class.std::__1::unique_ptr.678" = type { %"class.std::__1::__compressed_pair.679" }
%"class.std::__1::__compressed_pair.679" = type { %"struct.std::__1::__compressed_pair_elem.680" }
%"struct.std::__1::__compressed_pair_elem.680" = type { %"class.v8::internal::StringTable"* }
%"class.v8::internal::StringTable" = type { %"struct.std::__1::atomic.681", %"class.v8::base::Mutex" }
%"struct.std::__1::atomic.681" = type { %"struct.std::__1::__atomic_base.682" }
%"struct.std::__1::__atomic_base.682" = type { %"struct.std::__1::__cxx_atomic_impl.683" }
%"struct.std::__1::__cxx_atomic_impl.683" = type { %"struct.std::__1::__cxx_atomic_base_impl.684" }
%"struct.std::__1::__cxx_atomic_base_impl.684" = type { %"class.v8::internal::StringTable::Data"* }
%"class.v8::internal::StringTable::Data" = type opaque
%"class.v8::internal::Isolate::EntryStackItem" = type { i32, %"class.v8::internal::Isolate::PerIsolateThreadData"*, %"class.v8::internal::Isolate"*, %"class.v8::internal::Isolate::EntryStackItem"* }
%"class.v8::internal::Isolate::PerIsolateThreadData" = type { %"class.v8::internal::Isolate"*, %"class.v8::internal::ThreadId", i64, %"class.v8::internal::ThreadState"* }
%"class.v8::internal::ThreadState" = type opaque
%"class.v8::internal::StringStream" = type { %"class.v8::internal::StringAllocator"*, i32, i32, i32, i8* }
%"class.v8::internal::StringAllocator" = type { i32 (...)** }
%"class.v8::internal::Bootstrapper" = type { %"class.v8::internal::Isolate"*, i32, %"class.v8::internal::SourceCodeCache" }
%"class.v8::internal::SourceCodeCache" = type { i32, %"class.v8::internal::FixedArray" }
%"class.v8::internal::FixedArray" = type { %"class.v8::internal::TorqueGeneratedFixedArray" }
%"class.v8::internal::TorqueGeneratedFixedArray" = type { %"class.v8::internal::FixedArrayBase" }
%"class.v8::internal::FixedArrayBase" = type { %"class.v8::internal::TorqueGeneratedFixedArrayBase" }
%"class.v8::internal::TorqueGeneratedFixedArrayBase" = type { %"class.v8::internal::HeapObject" }
%"class.v8::internal::RuntimeProfiler" = type opaque
%"class.v8::internal::CompilationCache" = type opaque
%"class.std::__1::shared_ptr.688" = type { %"class.v8::internal::Counters"*, %"class.std::__1::__shared_weak_count"* }
%"class.v8::internal::Counters" = type { %"class.std::__1::enable_shared_from_this", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::HistogramTimer", %"class.v8::internal::HistogramTimer", %"class.v8::internal::HistogramTimer", %"class.v8::internal::HistogramTimer", %"class.v8::internal::HistogramTimer", %"class.v8::internal::HistogramTimer", %"class.v8::internal::HistogramTimer", %"class.v8::internal::HistogramTimer", %"class.v8::internal::HistogramTimer", %"class.v8::internal::HistogramTimer", %"class.v8::internal::HistogramTimer", %"class.v8::internal::HistogramTimer", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::AggregatableHistogramTimer", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounterThreadSafe", %"class.v8::internal::StatsCounterThreadSafe", %"class.v8::internal::StatsCounterThreadSafe", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::RuntimeCallStats", %"class.v8::internal::WorkerThreadRuntimeCallStats", %"class.v8::internal::Isolate"*, %"class.v8::internal::StatsTable" }
%"class.std::__1::enable_shared_from_this" = type { %"class.std::__1::weak_ptr" }
%"class.std::__1::weak_ptr" = type { %"class.v8::internal::Counters"*, %"class.std::__1::__shared_weak_count"* }
%"class.v8::internal::HistogramTimer" = type { %"class.v8::internal::TimedHistogram.base", %"class.v8::base::ElapsedTimer" }
%"class.v8::internal::TimedHistogram.base" = type <{ %"class.v8::internal::Histogram", i32 }>
%"class.v8::base::ElapsedTimer" = type { %"class.v8::base::TimeTicks" }
%"class.v8::base::TimeTicks" = type { %"class.v8::base::time_internal::TimeBase" }
%"class.v8::base::time_internal::TimeBase" = type { i64 }
%"class.v8::internal::TimedHistogram" = type <{ %"class.v8::internal::Histogram", i32, [4 x i8] }>
%"class.v8::internal::AggregatableHistogramTimer" = type { %"class.v8::internal::Histogram", %"class.v8::base::TimeDelta" }
%"class.v8::base::TimeDelta" = type { i64 }
%"class.v8::internal::Histogram" = type { i8*, i32, i32, i32, i8*, %"class.v8::internal::Counters"* }
%"class.v8::internal::StatsCounterThreadSafe" = type { %"class.v8::internal::StatsCounterBase", %"class.v8::base::Mutex" }
%"class.v8::internal::StatsCounterBase" = type { %"class.v8::internal::Counters"*, i8*, i32* }
%"class.v8::internal::StatsCounter" = type <{ %"class.v8::internal::StatsCounterBase", i8, [7 x i8] }>
%"class.v8::internal::RuntimeCallStats" = type { %"class.v8::base::AtomicValue", %"class.v8::base::AtomicValue.689", i8, i32, %"class.v8::internal::ThreadId", [1370 x %"class.v8::internal::RuntimeCallCounter"] }
%"class.v8::base::AtomicValue" = type { i64 }
%"class.v8::base::AtomicValue.689" = type { i64 }
%"class.v8::internal::RuntimeCallCounter" = type { i8*, i64, i64 }
%"class.v8::internal::WorkerThreadRuntimeCallStats" = type <{ %"class.v8::base::Mutex", %"class.std::__1::vector.690", %"class.v8::base::Optional", %"class.v8::internal::ThreadId", [4 x i8] }>
%"class.std::__1::vector.690" = type { %"class.std::__1::__vector_base.691" }
%"class.std::__1::__vector_base.691" = type { %"class.std::__1::unique_ptr.692"*, %"class.std::__1::unique_ptr.692"*, %"class.std::__1::__compressed_pair.693" }
%"class.std::__1::unique_ptr.692" = type opaque
%"class.std::__1::__compressed_pair.693" = type { %"struct.std::__1::__compressed_pair_elem.694" }
%"struct.std::__1::__compressed_pair_elem.694" = type { %"class.std::__1::unique_ptr.692"* }
%"class.v8::base::Optional" = type { %"class.v8::base::internal::OptionalBase" }
%"class.v8::base::internal::OptionalBase" = type { %"struct.v8::base::internal::OptionalStorage" }
%"struct.v8::base::internal::OptionalStorage" = type { %"struct.v8::base::internal::OptionalStorageBase" }
%"struct.v8::base::internal::OptionalStorageBase" = type { i8, %union.anon.698 }
%union.anon.698 = type { i32 }
%"class.v8::internal::StatsTable" = type { i32* (i8*)*, i8* (i8*, i32, i32, i64)*, void (i8*, i32)* }
%"class.v8::base::RecursiveMutex" = type { %union.pthread_mutex_t }
%"class.v8::base::SharedMutex" = type { %union.pthread_rwlock_t }
%union.pthread_rwlock_t = type { %struct.__pthread_rwlock_arch_t }
%struct.__pthread_rwlock_arch_t = type { i32, i32, i32, i32, i32, i32, i32, i32, i8, [7 x i8], i64, i32 }
%"class.v8::internal::Logger" = type { %"class.v8::internal::CodeEventListener", %"class.v8::internal::Isolate"*, %"class.std::__1::unique_ptr.699", %"class.std::__1::unique_ptr.705", %"struct.std::__1::atomic.182", %"class.std::__1::unique_ptr.711", %"class.std::__1::unique_ptr.717", %"class.std::__1::unique_ptr.723", %"class.std::__1::unique_ptr.729", %"class.std::__1::unique_ptr.735", %"class.std::__1::set.741", i32, i8, %"class.v8::internal::ExistingCodeLogger", %"class.v8::base::ElapsedTimer" }
%"class.v8::internal::CodeEventListener" = type { i32 (...)** }
%"class.std::__1::unique_ptr.699" = type { %"class.std::__1::__compressed_pair.700" }
%"class.std::__1::__compressed_pair.700" = type { %"struct.std::__1::__compressed_pair_elem.701" }
%"struct.std::__1::__compressed_pair_elem.701" = type { %"class.v8::internal::Ticker"* }
%"class.v8::internal::Ticker" = type opaque
%"class.std::__1::unique_ptr.705" = type { %"class.std::__1::__compressed_pair.706" }
%"class.std::__1::__compressed_pair.706" = type { %"struct.std::__1::__compressed_pair_elem.707" }
%"struct.std::__1::__compressed_pair_elem.707" = type { %"class.v8::internal::Profiler"* }
%"class.v8::internal::Profiler" = type opaque
%"class.std::__1::unique_ptr.711" = type { %"class.std::__1::__compressed_pair.712" }
%"class.std::__1::__compressed_pair.712" = type { %"struct.std::__1::__compressed_pair_elem.713" }
%"struct.std::__1::__compressed_pair_elem.713" = type { %"class.v8::internal::Log"* }
%"class.v8::internal::Log" = type opaque
%"class.std::__1::unique_ptr.717" = type { %"class.std::__1::__compressed_pair.718" }
%"class.std::__1::__compressed_pair.718" = type { %"struct.std::__1::__compressed_pair_elem.719" }
%"struct.std::__1::__compressed_pair_elem.719" = type { %"class.v8::internal::PerfBasicLogger"* }
%"class.v8::internal::PerfBasicLogger" = type opaque
%"class.std::__1::unique_ptr.723" = type { %"class.std::__1::__compressed_pair.724" }
%"class.std::__1::__compressed_pair.724" = type { %"struct.std::__1::__compressed_pair_elem.725" }
%"struct.std::__1::__compressed_pair_elem.725" = type { %"class.v8::internal::PerfJitLogger"* }
%"class.v8::internal::PerfJitLogger" = type opaque
%"class.std::__1::unique_ptr.729" = type { %"class.std::__1::__compressed_pair.730" }
%"class.std::__1::__compressed_pair.730" = type { %"struct.std::__1::__compressed_pair_elem.731" }
%"struct.std::__1::__compressed_pair_elem.731" = type { %"class.v8::internal::LowLevelLogger"* }
%"class.v8::internal::LowLevelLogger" = type opaque
%"class.std::__1::unique_ptr.735" = type { %"class.std::__1::__compressed_pair.736" }
%"class.std::__1::__compressed_pair.736" = type { %"struct.std::__1::__compressed_pair_elem.737" }
%"struct.std::__1::__compressed_pair_elem.737" = type { %"class.v8::internal::JitLogger"* }
%"class.v8::internal::JitLogger" = type opaque
%"class.std::__1::set.741" = type { %"class.std::__1::__tree.742" }
%"class.std::__1::__tree.742" = type { %"class.std::__1::__tree_end_node"*, %"class.std::__1::__compressed_pair.743", %"class.std::__1::__compressed_pair.747" }
%"class.std::__1::__compressed_pair.743" = type { %"struct.std::__1::__compressed_pair_elem.6" }
%"class.std::__1::__compressed_pair.747" = type { %"struct.std::__1::__compressed_pair_elem.9" }
%"class.v8::internal::ExistingCodeLogger" = type { %"class.v8::internal::Isolate"*, %"class.v8::internal::CodeEventListener"* }
%"class.v8::internal::StubCache" = type { [2048 x %"struct.v8::internal::StubCache::Entry"], [512 x %"struct.v8::internal::StubCache::Entry"], %"class.v8::internal::Isolate"* }
%"struct.v8::internal::StubCache::Entry" = type { %"class.v8::internal::StrongTaggedValue", %"class.v8::internal::TaggedValue", %"class.v8::internal::StrongTaggedValue" }
%"class.v8::internal::TaggedValue" = type { %"class.v8::internal::TaggedImpl.750" }
%"class.v8::internal::TaggedImpl.750" = type { i32 }
%"class.v8::internal::StrongTaggedValue" = type { %"class.v8::internal::TaggedImpl.749" }
%"class.v8::internal::TaggedImpl.749" = type { i32 }
%"class.v8::internal::Deoptimizer" = type opaque
%"class.v8::internal::MaterializedObjectStore" = type opaque
%"class.v8::internal::DescriptorLookupCache" = type { [64 x %"struct.v8::internal::DescriptorLookupCache::Key"], [64 x i32] }
%"struct.v8::internal::DescriptorLookupCache::Key" = type { %"class.v8::internal::Map", %"class.v8::internal::Name" }
%"class.v8::internal::Map" = type { %"class.v8::internal::HeapObject" }
%"class.v8::internal::Name" = type { %"class.v8::internal::TorqueGeneratedName" }
%"class.v8::internal::TorqueGeneratedName" = type { %"class.v8::internal::PrimitiveHeapObject" }
%"class.v8::internal::PrimitiveHeapObject" = type { %"class.v8::internal::TorqueGeneratedPrimitiveHeapObject" }
%"class.v8::internal::TorqueGeneratedPrimitiveHeapObject" = type { %"class.v8::internal::HeapObject" }
%"struct.v8::internal::HandleScopeData" = type { i64*, i64*, i32, i32, %"class.v8::internal::CanonicalHandleScope"* }
%"class.v8::internal::CanonicalHandleScope" = type { %"class.v8::internal::Isolate"*, %"class.v8::internal::OptimizedCompilationInfo"*, %"class.v8::internal::Zone"*, %"class.v8::internal::RootIndexMap"*, %"class.std::__1::unique_ptr.751", i32, %"class.v8::internal::CanonicalHandleScope"* }
%"class.v8::internal::OptimizedCompilationInfo" = type opaque
%"class.v8::internal::RootIndexMap" = type opaque
%"class.std::__1::unique_ptr.751" = type { %"class.std::__1::__compressed_pair.752" }
%"class.std::__1::__compressed_pair.752" = type { %"struct.std::__1::__compressed_pair_elem.753" }
%"struct.std::__1::__compressed_pair_elem.753" = type { %"class.v8::internal::IdentityMap"* }
%"class.v8::internal::IdentityMap" = type opaque
%"class.v8::internal::HandleScopeImplementer" = type { %"class.v8::internal::Isolate"*, %"class.v8::internal::DetachableVector", %"class.v8::internal::DetachableVector.757", %"class.v8::internal::DetachableVector.758", %"class.v8::internal::DetachableVector.757", i64*, i64*, %"struct.v8::internal::HandleScopeData" }
%"class.v8::internal::DetachableVector" = type { %"class.v8::internal::DetachableVectorBase" }
%"class.v8::internal::DetachableVectorBase" = type { i8*, i64, i64 }
%"class.v8::internal::DetachableVector.758" = type { %"class.v8::internal::DetachableVectorBase" }
%"class.v8::internal::DetachableVector.757" = type { %"class.v8::internal::DetachableVectorBase" }
%"class.v8::internal::UnicodeCache" = type opaque
%"class.v8::internal::InnerPointerToCodeCache" = type opaque
%"class.v8::internal::GlobalHandles" = type { %"class.v8::internal::Isolate"*, %"class.std::__1::unique_ptr.759", %"class.std::__1::vector.765", %"class.std::__1::unique_ptr.772", %"class.std::__1::vector.779", %"class.std::__1::unique_ptr.786", i64, %"class.std::__1::vector.792", %"class.std::__1::vector.800", %"class.std::__1::vector.808", i8, i8, i32 }
%"class.std::__1::unique_ptr.759" = type { %"class.std::__1::__compressed_pair.760" }
%"class.std::__1::__compressed_pair.760" = type { %"struct.std::__1::__compressed_pair_elem.761" }
%"struct.std::__1::__compressed_pair_elem.761" = type { %"class.v8::internal::GlobalHandles::NodeSpace"* }
%"class.v8::internal::GlobalHandles::NodeSpace" = type opaque
%"class.std::__1::vector.765" = type { %"class.std::__1::__vector_base.766" }
%"class.std::__1::__vector_base.766" = type { %"class.v8::internal::GlobalHandles::Node"**, %"class.v8::internal::GlobalHandles::Node"**, %"class.std::__1::__compressed_pair.767" }
%"class.v8::internal::GlobalHandles::Node" = type opaque
%"class.std::__1::__compressed_pair.767" = type { %"struct.std::__1::__compressed_pair_elem.768" }
%"struct.std::__1::__compressed_pair_elem.768" = type { %"class.v8::internal::GlobalHandles::Node"** }
%"class.std::__1::unique_ptr.772" = type { %"class.std::__1::__compressed_pair.773" }
%"class.std::__1::__compressed_pair.773" = type { %"struct.std::__1::__compressed_pair_elem.774" }
%"struct.std::__1::__compressed_pair_elem.774" = type { %"class.v8::internal::GlobalHandles::NodeSpace.775"* }
%"class.v8::internal::GlobalHandles::NodeSpace.775" = type opaque
%"class.std::__1::vector.779" = type { %"class.std::__1::__vector_base.780" }
%"class.std::__1::__vector_base.780" = type { %"class.v8::internal::GlobalHandles::TracedNode"**, %"class.v8::internal::GlobalHandles::TracedNode"**, %"class.std::__1::__compressed_pair.781" }
%"class.v8::internal::GlobalHandles::TracedNode" = type opaque
%"class.std::__1::__compressed_pair.781" = type { %"struct.std::__1::__compressed_pair_elem.782" }
%"struct.std::__1::__compressed_pair_elem.782" = type { %"class.v8::internal::GlobalHandles::TracedNode"** }
%"class.std::__1::unique_ptr.786" = type { %"class.std::__1::__compressed_pair.787" }
%"class.std::__1::__compressed_pair.787" = type { %"struct.std::__1::__compressed_pair_elem.788" }
%"struct.std::__1::__compressed_pair_elem.788" = type { %"class.v8::internal::GlobalHandles::OnStackTracedNodeSpace"* }
%"class.v8::internal::GlobalHandles::OnStackTracedNodeSpace" = type opaque
%"class.std::__1::vector.792" = type { %"class.std::__1::__vector_base.793" }
%"class.std::__1::__vector_base.793" = type { %"struct.std::__1::pair.794"*, %"struct.std::__1::pair.794"*, %"class.std::__1::__compressed_pair.795" }
%"struct.std::__1::pair.794" = type opaque
%"class.std::__1::__compressed_pair.795" = type { %"struct.std::__1::__compressed_pair_elem.796" }
%"struct.std::__1::__compressed_pair_elem.796" = type { %"struct.std::__1::pair.794"* }
%"class.std::__1::vector.800" = type { %"class.std::__1::__vector_base.801" }
%"class.std::__1::__vector_base.801" = type { %"struct.std::__1::pair.802"*, %"struct.std::__1::pair.802"*, %"class.std::__1::__compressed_pair.803" }
%"struct.std::__1::pair.802" = type opaque
%"class.std::__1::__compressed_pair.803" = type { %"struct.std::__1::__compressed_pair_elem.804" }
%"struct.std::__1::__compressed_pair_elem.804" = type { %"struct.std::__1::pair.802"* }
%"class.std::__1::vector.808" = type { %"class.std::__1::__vector_base.809" }
%"class.std::__1::__vector_base.809" = type { %"class.v8::internal::GlobalHandles::PendingPhantomCallback"*, %"class.v8::internal::GlobalHandles::PendingPhantomCallback"*, %"class.std::__1::__compressed_pair.810" }
%"class.v8::internal::GlobalHandles::PendingPhantomCallback" = type { void (%"class.v8::WeakCallbackInfo"*)*, i8*, [2 x i8*] }
%"class.v8::WeakCallbackInfo" = type { %"class.v8::Isolate"*, i8*, {}**, [2 x i8*] }
%"class.std::__1::__compressed_pair.810" = type { %"struct.std::__1::__compressed_pair_elem.811" }
%"struct.std::__1::__compressed_pair_elem.811" = type { %"class.v8::internal::GlobalHandles::PendingPhantomCallback"* }
%"class.v8::internal::EternalHandles" = type { i32, %"class.std::__1::vector.815", %"class.std::__1::vector.822" }
%"class.v8::internal::ThreadManager" = type opaque
%"class.v8::bigint::Processor" = type opaque
%"class.v8::internal::RuntimeState" = type { %"class.std::__1::unique_ptr.829" }
%"class.std::__1::unique_ptr.829" = type { %"class.std::__1::__compressed_pair.830" }
%"class.std::__1::__compressed_pair.830" = type { %"struct.std::__1::__compressed_pair_elem.831" }
%"struct.std::__1::__compressed_pair_elem.831" = type { %"struct.v8::internal::Runtime::Function"* }
%"struct.v8::internal::Runtime::Function" = type { i32, i32, i8*, i64, i8, i8 }
%"class.v8::internal::Builtins" = type { %"class.v8::internal::Isolate"*, i8, i32 }
%"class.v8::internal::SetupIsolateDelegate" = type opaque
%"class.v8::internal::RegExpStack" = type opaque
%"class.std::__1::vector.822" = type { %"class.std::__1::__vector_base.823" }
%"class.std::__1::__vector_base.823" = type { i32*, i32*, %"class.std::__1::__compressed_pair.824" }
%"class.std::__1::__compressed_pair.824" = type { %"struct.std::__1::__compressed_pair_elem.825" }
%"struct.std::__1::__compressed_pair_elem.825" = type { i32* }
%"class.v8::internal::DateCache" = type opaque
%"struct.std::__1::atomic.835" = type { %"struct.std::__1::__atomic_base.836" }
%"struct.std::__1::__atomic_base.836" = type { %"struct.std::__1::__cxx_atomic_impl.837" }
%"struct.std::__1::__cxx_atomic_impl.837" = type { %"struct.std::__1::__cxx_atomic_base_impl.838" }
%"struct.std::__1::__cxx_atomic_base_impl.838" = type { i32 }
%"class.v8::Promise" = type { i8 }
%"struct.std::__1::atomic.845" = type { %"struct.std::__1::__atomic_base.846" }
%"struct.std::__1::__atomic_base.846" = type { %"struct.std::__1::__cxx_atomic_impl.847" }
%"struct.std::__1::__cxx_atomic_impl.847" = type { %"struct.std::__1::__cxx_atomic_base_impl.848" }
%"struct.std::__1::__cxx_atomic_base_impl.848" = type { i32 }
%"class.std::__1::basic_string" = type { %"class.std::__1::__compressed_pair.850" }
%"class.std::__1::__compressed_pair.850" = type { %"struct.std::__1::__compressed_pair_elem.851" }
%"struct.std::__1::__compressed_pair_elem.851" = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" = type { %union.anon.852 }
%union.anon.852 = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" = type { i8*, i64, i64 }
%"class.std::__1::unordered_map.856" = type { %"class.std::__1::__hash_table.857" }
%"class.std::__1::__hash_table.857" = type <{ %"class.std::__1::unique_ptr.858", %"class.std::__1::__compressed_pair.868", %"class.std::__1::__compressed_pair.873", %"class.std::__1::__compressed_pair.876", [4 x i8] }>
%"class.std::__1::unique_ptr.858" = type { %"class.std::__1::__compressed_pair.859" }
%"class.std::__1::__compressed_pair.859" = type { %"struct.std::__1::__compressed_pair_elem.860", %"struct.std::__1::__compressed_pair_elem.862" }
%"struct.std::__1::__compressed_pair_elem.860" = type { %"struct.std::__1::__hash_node_base.861"** }
%"struct.std::__1::__hash_node_base.861" = type { %"struct.std::__1::__hash_node_base.861"* }
%"struct.std::__1::__compressed_pair_elem.862" = type { %"class.std::__1::__bucket_list_deallocator.863" }
%"class.std::__1::__bucket_list_deallocator.863" = type { %"class.std::__1::__compressed_pair.864" }
%"class.std::__1::__compressed_pair.864" = type { %"struct.std::__1::__compressed_pair_elem.9" }
%"class.std::__1::__compressed_pair.868" = type { %"struct.std::__1::__compressed_pair_elem.869" }
%"struct.std::__1::__compressed_pair_elem.869" = type { %"struct.std::__1::__hash_node_base.861" }
%"class.std::__1::__compressed_pair.873" = type { %"struct.std::__1::__compressed_pair_elem.9" }
%"class.std::__1::__compressed_pair.876" = type { %"struct.std::__1::__compressed_pair_elem.51" }
%"struct.std::__1::atomic.182" = type { %"struct.std::__1::__atomic_base.183" }
%"struct.std::__1::__atomic_base.183" = type { %"struct.std::__1::__cxx_atomic_impl.184" }
%"struct.std::__1::__cxx_atomic_impl.184" = type { %"struct.std::__1::__cxx_atomic_base_impl.185" }
%"struct.std::__1::__cxx_atomic_base_impl.185" = type { i8 }
%"class.v8::internal::Debug" = type { %"class.v8::debug::DebugDelegate"*, i8, i8, i8, i8, i8, i8, i8, i8, i8, %"class.v8::internal::DebugInfoListNode"*, %"class.std::__1::unique_ptr.882", %"class.v8::internal::Handle.888", %"class.v8::internal::DebugFeatureTracker", %"class.v8::internal::Debug::ThreadLocal", %"class.v8::internal::Handle.889", %"class.v8::internal::Isolate"* }
%"class.v8::debug::DebugDelegate" = type { i32 (...)** }
%"class.v8::internal::DebugInfoListNode" = type { i64*, %"class.v8::internal::DebugInfoListNode"* }
%"class.std::__1::unique_ptr.882" = type { %"class.std::__1::__compressed_pair.883" }
%"class.std::__1::__compressed_pair.883" = type { %"struct.std::__1::__compressed_pair_elem.884" }
%"struct.std::__1::__compressed_pair_elem.884" = type { %"class.v8::internal::Debug::TemporaryObjectsTracker"* }
%"class.v8::internal::Debug::TemporaryObjectsTracker" = type opaque
%"class.v8::internal::Handle.888" = type { %"class.v8::internal::HandleBase" }
%"class.v8::internal::DebugFeatureTracker" = type <{ %"class.v8::internal::Isolate"*, i32, [4 x i8] }>
%"class.v8::internal::Debug::ThreadLocal" = type <{ i64, i32, i8, [3 x i8], %"class.v8::internal::Object", i8, [3 x i8], i32, i32, i32, %"class.v8::internal::Object", %"class.v8::internal::Object", i32, i8, [3 x i8] }>
%"class.v8::internal::Handle.889" = type { %"class.v8::internal::HandleBase" }
%"class.v8::internal::HeapProfiler" = type { %"class.v8::internal::HeapObjectAllocationTracker", %"class.std::__1::unique_ptr.890", %"class.std::__1::vector.896", %"class.std::__1::unique_ptr.904", %"class.std::__1::unique_ptr.910", i8, i8, %"class.v8::base::Mutex", %"class.std::__1::unique_ptr.916", %"class.std::__1::vector.922", %"struct.std::__1::pair.930" }
%"class.std::__1::unique_ptr.890" = type { %"class.std::__1::__compressed_pair.891" }
%"class.std::__1::__compressed_pair.891" = type { %"struct.std::__1::__compressed_pair_elem.892" }
%"struct.std::__1::__compressed_pair_elem.892" = type { %"class.v8::internal::HeapObjectsMap"* }
%"class.v8::internal::HeapObjectsMap" = type opaque
%"class.std::__1::vector.896" = type { %"class.std::__1::__vector_base.897" }
%"class.std::__1::__vector_base.897" = type { %"class.std::__1::unique_ptr.898"*, %"class.std::__1::unique_ptr.898"*, %"class.std::__1::__compressed_pair.899" }
%"class.std::__1::unique_ptr.898" = type opaque
%"class.std::__1::__compressed_pair.899" = type { %"struct.std::__1::__compressed_pair_elem.900" }
%"struct.std::__1::__compressed_pair_elem.900" = type { %"class.std::__1::unique_ptr.898"* }
%"class.std::__1::unique_ptr.904" = type { %"class.std::__1::__compressed_pair.905" }
%"class.std::__1::__compressed_pair.905" = type { %"struct.std::__1::__compressed_pair_elem.906" }
%"struct.std::__1::__compressed_pair_elem.906" = type { %"class.v8::internal::StringsStorage"* }
%"class.v8::internal::StringsStorage" = type opaque
%"class.std::__1::unique_ptr.910" = type { %"class.std::__1::__compressed_pair.911" }
%"class.std::__1::__compressed_pair.911" = type { %"struct.std::__1::__compressed_pair_elem.912" }
%"struct.std::__1::__compressed_pair_elem.912" = type { %"class.v8::internal::AllocationTracker"* }
%"class.v8::internal::AllocationTracker" = type opaque
%"class.std::__1::unique_ptr.916" = type { %"class.std::__1::__compressed_pair.917" }
%"class.std::__1::__compressed_pair.917" = type { %"struct.std::__1::__compressed_pair_elem.918" }
%"struct.std::__1::__compressed_pair_elem.918" = type { %"class.v8::internal::SamplingHeapProfiler"* }
%"class.v8::internal::SamplingHeapProfiler" = type opaque
%"class.std::__1::vector.922" = type { %"class.std::__1::__vector_base.923" }
%"class.std::__1::__vector_base.923" = type { %"struct.std::__1::pair.924"*, %"struct.std::__1::pair.924"*, %"class.std::__1::__compressed_pair.925" }
%"struct.std::__1::pair.924" = type opaque
%"class.std::__1::__compressed_pair.925" = type { %"struct.std::__1::__compressed_pair_elem.926" }
%"struct.std::__1::__compressed_pair_elem.926" = type { %"struct.std::__1::pair.924"* }
%"struct.std::__1::pair.930" = type { i8 (%"class.v8::Isolate"*, %"class.v8::Local.28"*, i16, i8*)*, i8* }
%"class.v8::Local.28" = type { %"class.v8::Value"* }
%"class.std::__1::unique_ptr.931" = type { %"class.std::__1::__compressed_pair.932" }
%"class.std::__1::__compressed_pair.932" = type { %"struct.std::__1::__compressed_pair_elem.933" }
%"struct.std::__1::__compressed_pair_elem.933" = type { %"class.v8::internal::CodeEventDispatcher"* }
%"class.v8::internal::CodeEventDispatcher" = type { %"class.v8::internal::CodeEventListener", %"class.std::__1::unordered_set.934", %"class.v8::base::Mutex" }
%"class.std::__1::unordered_set.934" = type { %"class.std::__1::__hash_table.935" }
%"class.std::__1::__hash_table.935" = type <{ %"class.std::__1::unique_ptr.936", %"class.std::__1::__compressed_pair.946", %"class.std::__1::__compressed_pair.951", %"class.std::__1::__compressed_pair.955", [4 x i8] }>
%"class.std::__1::unique_ptr.936" = type { %"class.std::__1::__compressed_pair.937" }
%"class.std::__1::__compressed_pair.937" = type { %"struct.std::__1::__compressed_pair_elem.938", %"struct.std::__1::__compressed_pair_elem.940" }
%"struct.std::__1::__compressed_pair_elem.938" = type { %"struct.std::__1::__hash_node_base.939"** }
%"struct.std::__1::__hash_node_base.939" = type { %"struct.std::__1::__hash_node_base.939"* }
%"struct.std::__1::__compressed_pair_elem.940" = type { %"class.std::__1::__bucket_list_deallocator.941" }
%"class.std::__1::__bucket_list_deallocator.941" = type { %"class.std::__1::__compressed_pair.942" }
%"class.std::__1::__compressed_pair.942" = type { %"struct.std::__1::__compressed_pair_elem.9" }
%"class.std::__1::__compressed_pair.946" = type { %"struct.std::__1::__compressed_pair_elem.947" }
%"struct.std::__1::__compressed_pair_elem.947" = type { %"struct.std::__1::__hash_node_base.939" }
%"class.std::__1::__compressed_pair.951" = type { %"struct.std::__1::__compressed_pair_elem.9" }
%"class.std::__1::__compressed_pair.955" = type { %"struct.std::__1::__compressed_pair_elem.51" }
%"class.v8::internal::interpreter::Interpreter" = type opaque
%"class.v8::internal::compiler::PerIsolateCompilerCache" = type opaque
%"class.v8::internal::CompilerDispatcher" = type opaque
%"class.std::__1::queue" = type { %"class.std::__1::deque" }
%"class.std::__1::deque" = type { %"class.std::__1::__deque_base" }
%"class.std::__1::__deque_base" = type { %"struct.std::__1::__split_buffer", i64, %"class.std::__1::__compressed_pair.971" }
%"struct.std::__1::__split_buffer" = type { %"struct.std::__1::pair.965"**, %"struct.std::__1::pair.965"**, %"struct.std::__1::pair.965"**, %"class.std::__1::__compressed_pair.966" }
%"struct.std::__1::pair.965" = type opaque
%"class.std::__1::__compressed_pair.966" = type { %"struct.std::__1::__compressed_pair_elem.967" }
%"struct.std::__1::__compressed_pair_elem.967" = type { %"struct.std::__1::pair.965"** }
%"class.std::__1::__compressed_pair.971" = type { %"struct.std::__1::__compressed_pair_elem.9" }
%"class.v8::String" = type { i8 }
%"class.v8::Context" = type { i8 }
%"class.v8::FunctionCallbackInfo" = type <{ i64*, i64*, i32, [4 x i8] }>
%"class.v8::internal::Relocatable" = type { i32 (...)**, %"class.v8::internal::Isolate"*, %"class.v8::internal::Relocatable"* }
%"class.std::__1::vector.976" = type { %"class.std::__1::__vector_base.977" }
%"class.std::__1::__vector_base.977" = type { %"class.v8::internal::Handle.978"*, %"class.v8::internal::Handle.978"*, %"class.std::__1::__compressed_pair.979" }
%"class.v8::internal::Handle.978" = type { %"class.v8::internal::HandleBase" }
%"class.std::__1::__compressed_pair.979" = type { %"struct.std::__1::__compressed_pair_elem.980" }
%"struct.std::__1::__compressed_pair_elem.980" = type { %"class.v8::internal::Handle.978"* }
%"class.v8::internal::Object" = type { %"class.v8::internal::TaggedImpl" }
%"class.v8::internal::TaggedImpl" = type { i64 }
%"class.v8::internal::AddressToIndexHashMap" = type opaque
%"class.v8::internal::HeapObjectToIndexHashMap" = type opaque
%"class.v8::internal::MicrotaskQueue" = type opaque
%"class.v8::internal::CompilationStatistics" = type opaque
%"class.v8::internal::CodeTracer" = type <{ %"class.v8::internal::EmbeddedVector", %struct._IO_FILE*, i32, [4 x i8] }>
%"class.v8::internal::EmbeddedVector" = type { %"class.v8::internal::Vector.984", [128 x i8] }
%"class.v8::internal::Vector.984" = type { i8*, i64 }
%struct._IO_FILE = type { i32, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, %struct._IO_marker*, %struct._IO_FILE*, i32, i32, i64, i16, i8, [1 x i8], i8*, i64, %struct._IO_codecvt*, %struct._IO_wide_data*, %struct._IO_FILE*, i8*, i64, i32, [20 x i8] }
%struct._IO_marker = type opaque
%struct._IO_codecvt = type opaque
%struct._IO_wide_data = type opaque
%"class.v8::PromiseRejectMessage" = type { %"class.v8::Local.840", i32, %"class.v8::Local.28" }
%"class.v8::Local.840" = type { %"class.v8::Promise"* }
%"class.v8::StartupData" = type { i8*, i32 }
%"class.v8_inspector::V8Inspector" = type opaque
%"class.v8::internal::compiler::NodeObserver" = type opaque
%"class.v8::internal::OptimizingCompileDispatcher" = type opaque
%"class.std::__1::unique_ptr.985" = type { %"class.std::__1::__compressed_pair.986" }
%"class.std::__1::__compressed_pair.986" = type { %"struct.std::__1::__compressed_pair_elem.987" }
%"struct.std::__1::__compressed_pair_elem.987" = type { %"class.v8::internal::PersistentHandlesList"* }
%"class.v8::internal::PersistentHandlesList" = type { %"class.v8::base::Mutex", %"class.v8::internal::PersistentHandles"* }
%"class.std::__1::vector.991" = type { %"class.std::__1::__vector_base.992" }
%"class.std::__1::__vector_base.992" = type { void (%"class.v8::Isolate"*)**, void (%"class.v8::Isolate"*)**, %"class.std::__1::__compressed_pair.993" }
%"class.std::__1::__compressed_pair.993" = type { %"struct.std::__1::__compressed_pair_elem.994" }
%"struct.std::__1::__compressed_pair_elem.994" = type { void (%"class.v8::Isolate"*)** }
%"class.std::__1::shared_ptr.998" = type { %"class.v8::internal::metrics::Recorder"*, %"class.std::__1::__shared_weak_count"* }
%"class.v8::internal::metrics::Recorder" = type opaque
%"class.std::__1::unordered_map.999" = type { %"class.std::__1::__hash_table.1000" }
%"class.std::__1::__hash_table.1000" = type <{ %"class.std::__1::unique_ptr.1001", %"class.std::__1::__compressed_pair.1011", %"class.std::__1::__compressed_pair.1016", %"class.std::__1::__compressed_pair.1019", [4 x i8] }>
%"class.std::__1::unique_ptr.1001" = type { %"class.std::__1::__compressed_pair.1002" }
%"class.std::__1::__compressed_pair.1002" = type { %"struct.std::__1::__compressed_pair_elem.1003", %"struct.std::__1::__compressed_pair_elem.1005" }
%"struct.std::__1::__compressed_pair_elem.1003" = type { %"struct.std::__1::__hash_node_base.1004"** }
%"struct.std::__1::__hash_node_base.1004" = type { %"struct.std::__1::__hash_node_base.1004"* }
%"struct.std::__1::__compressed_pair_elem.1005" = type { %"class.std::__1::__bucket_list_deallocator.1006" }
%"class.std::__1::__bucket_list_deallocator.1006" = type { %"class.std::__1::__compressed_pair.1007" }
%"class.std::__1::__compressed_pair.1007" = type { %"struct.std::__1::__compressed_pair_elem.9" }
%"class.std::__1::__compressed_pair.1011" = type { %"struct.std::__1::__compressed_pair_elem.1012" }
%"struct.std::__1::__compressed_pair_elem.1012" = type { %"struct.std::__1::__hash_node_base.1004" }
%"class.std::__1::__compressed_pair.1016" = type { %"struct.std::__1::__compressed_pair_elem.9" }
%"class.std::__1::__compressed_pair.1019" = type { %"struct.std::__1::__compressed_pair_elem.51" }
%"struct.v8::metrics::LongTaskStats" = type { i64, i64, i64 }
%"class.std::__1::vector.553" = type { %"class.std::__1::__vector_base.554" }
%"class.std::__1::__vector_base.554" = type { %"class.v8::internal::Object"*, %"class.v8::internal::Object"*, %"class.std::__1::__compressed_pair.555" }
%"class.std::__1::__compressed_pair.555" = type { %"struct.std::__1::__compressed_pair_elem.556" }
%"struct.std::__1::__compressed_pair_elem.556" = type { %"class.v8::internal::Object"* }
%"class.v8::internal::BuiltinsConstantsTableBuilder" = type opaque
%"class.v8::ArrayBuffer::Allocator" = type { i32 (...)** }
%"class.std::__1::shared_ptr.190" = type { %"class.v8::ArrayBuffer::Allocator"*, %"class.std::__1::__shared_weak_count"* }
%"class.v8::internal::FutexWaitListNode" = type { %"class.v8::internal::Isolate"*, %"class.std::__1::shared_ptr.1023", %"class.v8::internal::CancelableTaskManager"*, %"class.v8::base::ConditionVariable", %"class.v8::internal::FutexWaitListNode"*, %"class.v8::internal::FutexWaitListNode"*, %"class.std::__1::weak_ptr.1052", i64, i8*, i8, i8, %"class.v8::Global", %"class.v8::Global.1053", %"class.v8::base::TimeTicks", i64 }
%"class.std::__1::shared_ptr.1023" = type { %"class.v8::TaskRunner"*, %"class.std::__1::__shared_weak_count"* }
%"class.v8::TaskRunner" = type { i32 (...)** }
%"class.v8::base::ConditionVariable" = type { %union.pthread_cond_t }
%union.pthread_cond_t = type { %struct.__pthread_cond_s }
%struct.__pthread_cond_s = type { %union.anon.1048, %union.anon.1050, [2 x i32], [2 x i32], i32, i32, [2 x i32] }
%union.anon.1048 = type { i64 }
%union.anon.1050 = type { i64 }
%"class.std::__1::weak_ptr.1052" = type { %"class.v8::internal::BackingStore"*, %"class.std::__1::__shared_weak_count"* }
%"class.v8::Global" = type { %"class.v8::PersistentBase" }
%"class.v8::PersistentBase" = type { %"class.v8::Promise"* }
%"class.v8::Global.1053" = type { %"class.v8::PersistentBase.1054" }
%"class.v8::PersistentBase.1054" = type { %"class.v8::Context"* }
%"class.v8::internal::CancelableTaskManager" = type <{ i64, %"class.std::__1::unordered_map.1024", %"class.v8::base::ConditionVariable", %"class.v8::base::Mutex", i8, [7 x i8] }>
%"class.std::__1::unordered_map.1024" = type { %"class.std::__1::__hash_table.1025" }
%"class.std::__1::__hash_table.1025" = type <{ %"class.std::__1::unique_ptr.1026", %"class.std::__1::__compressed_pair.1036", %"class.std::__1::__compressed_pair.1041", %"class.std::__1::__compressed_pair.1044", [4 x i8] }>
%"class.std::__1::unique_ptr.1026" = type { %"class.std::__1::__compressed_pair.1027" }
%"class.std::__1::__compressed_pair.1027" = type { %"struct.std::__1::__compressed_pair_elem.1028", %"struct.std::__1::__compressed_pair_elem.1030" }
%"struct.std::__1::__compressed_pair_elem.1028" = type { %"struct.std::__1::__hash_node_base.1029"** }
%"struct.std::__1::__hash_node_base.1029" = type { %"struct.std::__1::__hash_node_base.1029"* }
%"struct.std::__1::__compressed_pair_elem.1030" = type { %"class.std::__1::__bucket_list_deallocator.1031" }
%"class.std::__1::__bucket_list_deallocator.1031" = type { %"class.std::__1::__compressed_pair.1032" }
%"class.std::__1::__compressed_pair.1032" = type { %"struct.std::__1::__compressed_pair_elem.9" }
%"class.std::__1::__compressed_pair.1036" = type { %"struct.std::__1::__compressed_pair_elem.1037" }
%"struct.std::__1::__compressed_pair_elem.1037" = type { %"struct.std::__1::__hash_node_base.1029" }
%"class.std::__1::__compressed_pair.1041" = type { %"struct.std::__1::__compressed_pair_elem.9" }
%"class.std::__1::__compressed_pair.1044" = type { %"struct.std::__1::__compressed_pair_elem.51" }
%"class.v8::debug::ConsoleDelegate" = type { i32 (...)** }
%"class.v8::debug::AsyncEventDelegate" = type { i32 (...)** }
%"class.std::__1::unique_ptr.1055" = type { %"class.std::__1::__compressed_pair.1056" }
%"class.std::__1::__compressed_pair.1056" = type { %"struct.std::__1::__compressed_pair_elem.1057" }
%"struct.std::__1::__compressed_pair_elem.1057" = type { %"class.v8::internal::LocalIsolate"* }
%"class.v8::internal::LocalIsolate" = type { %"class.v8::internal::HiddenLocalFactory", %"class.v8::internal::LocalHeap", %"class.v8::internal::Isolate"*, %"class.std::__1::unique_ptr.1084", %"class.v8::internal::ThreadId", i64, %"class.v8::internal::RuntimeCallStats"* }
%"class.v8::internal::HiddenLocalFactory" = type { %"class.v8::internal::LocalFactory" }
%"class.v8::internal::LocalFactory" = type { %"class.v8::internal::ReadOnlyRoots" }
%"class.v8::internal::ReadOnlyRoots" = type { i64* }
%"class.std::__1::unique_ptr.1084" = type { %"class.std::__1::__compressed_pair.1085" }
%"class.std::__1::__compressed_pair.1085" = type { %"struct.std::__1::__compressed_pair_elem.1086" }
%"struct.std::__1::__compressed_pair_elem.1086" = type { %"class.v8::internal::LocalLogger"* }
%"class.v8::internal::LocalLogger" = type opaque
%"struct.v8::internal::ManagedPtrDestructor" = type { i64, %"struct.v8::internal::ManagedPtrDestructor"*, %"struct.v8::internal::ManagedPtrDestructor"*, i8*, void (i8*)*, i64* }
%"class.v8::internal::wasm::WasmEngine" = type opaque
%"class.std::__1::unique_ptr.1093" = type { %"class.std::__1::__compressed_pair.1094" }
%"class.std::__1::__compressed_pair.1094" = type { %"struct.std::__1::__compressed_pair_elem.1095" }
%"struct.std::__1::__compressed_pair_elem.1095" = type { %"class.v8::internal::TracingCpuProfilerImpl"* }
%"class.v8::internal::TracingCpuProfilerImpl" = type opaque
%"class.v8::internal::EmbeddedFileWriterInterface" = type opaque
%"class.v8::Context::BackupIncumbentScope" = type { %"class.v8::Local.841", i64, %"class.v8::Context::BackupIncumbentScope"* }
%"class.v8::Local.841" = type { %"class.v8::Context"* }
%"class.v8::internal::Isolate::ThreadDataTable" = type { %"class.std::__1::unordered_map.1101" }
%"class.std::__1::unordered_map.1101" = type { %"class.std::__1::__hash_table.1102" }
%"class.std::__1::__hash_table.1102" = type <{ %"class.std::__1::unique_ptr.1103", %"class.std::__1::__compressed_pair.1113", %"class.std::__1::__compressed_pair.1118", %"class.std::__1::__compressed_pair.1121", [4 x i8] }>
%"class.std::__1::unique_ptr.1103" = type { %"class.std::__1::__compressed_pair.1104" }
%"class.std::__1::__compressed_pair.1104" = type { %"struct.std::__1::__compressed_pair_elem.1105", %"struct.std::__1::__compressed_pair_elem.1107" }
%"struct.std::__1::__compressed_pair_elem.1105" = type { %"struct.std::__1::__hash_node_base.1106"** }
%"struct.std::__1::__hash_node_base.1106" = type { %"struct.std::__1::__hash_node_base.1106"* }
%"struct.std::__1::__compressed_pair_elem.1107" = type { %"class.std::__1::__bucket_list_deallocator.1108" }
%"class.std::__1::__bucket_list_deallocator.1108" = type { %"class.std::__1::__compressed_pair.1109" }
%"class.std::__1::__compressed_pair.1109" = type { %"struct.std::__1::__compressed_pair_elem.9" }
%"class.std::__1::__compressed_pair.1113" = type { %"struct.std::__1::__compressed_pair_elem.1114" }
%"struct.std::__1::__compressed_pair_elem.1114" = type { %"struct.std::__1::__hash_node_base.1106" }
%"class.std::__1::__compressed_pair.1118" = type { %"struct.std::__1::__compressed_pair_elem.9" }
%"class.std::__1::__compressed_pair.1121" = type { %"struct.std::__1::__compressed_pair_elem.51" }
%"struct.std::__1::atomic.1127" = type { %"struct.std::__1::__atomic_base.1128" }
%"struct.std::__1::__atomic_base.1128" = type { %"struct.std::__1::__cxx_atomic_impl.1129" }
%"struct.std::__1::__cxx_atomic_impl.1129" = type { %"struct.std::__1::__cxx_atomic_base_impl.1130" }
%"struct.std::__1::__cxx_atomic_base_impl.1130" = type { %"class.std::__1::vector.1131"* }
%"class.std::__1::vector.1131" = type { %"class.std::__1::__vector_base.1132" }
%"class.std::__1::__vector_base.1132" = type { %"struct.v8::MemoryRange"*, %"struct.v8::MemoryRange"*, %"class.std::__1::__compressed_pair.1133" }
%"struct.v8::MemoryRange" = type { i8*, i64 }
%"class.std::__1::__compressed_pair.1133" = type { %"struct.std::__1::__compressed_pair_elem.1134" }
%"struct.std::__1::__compressed_pair_elem.1134" = type { %"struct.v8::MemoryRange"* }
%"class.v8::internal::Handle<v8::internal::ObjectBoilerplateDescription>::ObjectRef" = type { %"class.v8::internal::ObjectBoilerplateDescription" }
%"class.v8::internal::ObjectBoilerplateDescription" = type { %"class.v8::internal::FixedArray" }
%"class.v8::internal::FactoryBase" = type { i8 }
%"class.v8::internal::Literal" = type { %"class.v8::internal::Expression", %union.anon.1138 }
%union.anon.1138 = type { %"class.v8::internal::AstRawString"* }
%"class.v8::internal::ArrayLiteral" = type { %"class.v8::internal::AggregateLiteral", i32, %"class.v8::internal::Handle.1140", %"class.v8::internal::ZoneList.1141" }
%"class.v8::internal::Handle.1140" = type { %"class.v8::internal::HandleBase" }
%"class.v8::internal::ZoneList.1141" = type { %"class.v8::internal::Expression"**, i32, i32 }
%"class.v8::internal::FactoryBase.1058" = type { i8 }
%"class.v8::internal::LocalHandleScope" = type { %"class.v8::internal::LocalHeap"*, i64*, i64* }
%"class.v8::internal::GetTemplateObject" = type { %"class.v8::internal::Expression", %"class.v8::internal::ZoneList.1149"*, %"class.v8::internal::ZoneList.1149"* }
%"class.v8::internal::ZoneList.1149" = type { %"class.v8::internal::AstRawString"**, i32, i32 }
%"class.v8::internal::IterationStatement" = type { %"class.v8::internal::BreakableStatement", %"class.v8::internal::Statement"* }
%"class.v8::internal::BreakableStatement" = type { %"class.v8::internal::Statement" }
%"class.v8::internal::DeclarationScope" = type <{ %"class.v8::internal::Scope.base", i16, i8, [2 x i8], i32, [4 x i8], %"class.v8::internal::ZoneList.1152", %"class.v8::base::ThreadedListBase.1153", %"class.v8::internal::Variable"*, %"class.v8::internal::Variable"*, %"class.v8::internal::Variable"*, %"class.v8::internal::Variable"*, %"class.v8::internal::PreparseDataBuilder"*, %"struct.v8::internal::DeclarationScope::RareData"* }>
%"class.v8::internal::Scope.base" = type <{ %"class.v8::internal::Scope"*, %"class.v8::internal::Scope"*, %"class.v8::internal::Scope"*, %"class.v8::internal::VariableMap", %"class.v8::base::ThreadedListBase", %"class.v8::base::ThreadedListBase.18", %"class.v8::base::ThreadedListBase.21", %"class.v8::internal::Handle.22", i32, i32, i32, i32, i8, i16 }>
%"class.v8::internal::ZoneList.1152" = type { %"class.v8::internal::Variable"**, i32, i32 }
%"class.v8::base::ThreadedListBase.1153" = type { %"class.v8::internal::SloppyBlockFunctionStatement"*, %"class.v8::internal::SloppyBlockFunctionStatement"** }
%"class.v8::internal::SloppyBlockFunctionStatement" = type { %"class.v8::internal::Statement", %"class.v8::internal::Variable"*, %"class.v8::internal::Statement"*, %"class.v8::internal::SloppyBlockFunctionStatement"* }
%"class.v8::internal::PreparseDataBuilder" = type <{ %"class.v8::internal::PreparseDataBuilder"*, %"class.v8::internal::PreparseDataBuilder::ByteData", %union.anon.1164, %"class.v8::internal::DeclarationScope"*, i32, i32, i32, i8, [3 x i8] }>
%"class.v8::internal::PreparseDataBuilder::ByteData" = type <{ %union.anon.1154, i8, [7 x i8] }>
%union.anon.1154 = type { %struct.anon.1155 }
%struct.anon.1155 = type { %"class.std::__1::vector.1156"*, i32 }
%"class.std::__1::vector.1156" = type { %"class.std::__1::__vector_base.1157" }
%"class.std::__1::__vector_base.1157" = type { i8*, i8*, %"class.std::__1::__compressed_pair.1158" }
%"class.std::__1::__compressed_pair.1158" = type { %"struct.std::__1::__compressed_pair_elem.1159" }
%"struct.std::__1::__compressed_pair_elem.1159" = type { i8* }
%union.anon.1164 = type { %"class.v8::internal::ScopedList" }
%"class.v8::internal::ScopedList" = type { %"class.std::__1::vector.1165"*, i64, i64 }
%"struct.v8::internal::DeclarationScope::RareData" = type { %"class.v8::internal::Variable"*, %"class.v8::internal::Variable"* }
%"class.v8::internal::FunctionLiteral" = type { %"class.v8::internal::Expression", i32, i32, i32, i32, i32, i32, %"class.v8::internal::AstConsString"*, %"class.v8::internal::DeclarationScope"*, %"class.v8::internal::ZoneList.1167", %"class.v8::internal::AstConsString"*, %"class.v8::internal::Handle.20", %"class.v8::internal::ProducedPreparseData"* }
%"class.v8::internal::ProducedPreparseData" = type { i32 (...)** }
%"class.v8::internal::Handle<v8::internal::String>::ObjectRef" = type { %"class.v8::internal::String" }
%"class.v8::internal::String" = type { %"class.v8::internal::TorqueGeneratedString" }
%"class.v8::internal::TorqueGeneratedString" = type { %"class.v8::internal::Name" }
%"class.std::__1::vector.1176" = type { %"class.std::__1::__vector_base.1177" }
%"class.std::__1::__vector_base.1177" = type { i8*, i8*, %"class.std::__1::__compressed_pair.1178" }
%"class.std::__1::__compressed_pair.1178" = type { %"struct.std::__1::__compressed_pair_elem.1172" }
%"struct.std::__1::__compressed_pair_elem.1172" = type { i8* }
%"class.std::__1::forward_list" = type { %"class.std::__1::__forward_list_base" }
%"class.std::__1::__forward_list_base" = type { %"class.std::__1::__compressed_pair.1179" }
%"class.std::__1::__compressed_pair.1179" = type { %"struct.std::__1::__compressed_pair_elem.1180" }
%"struct.std::__1::__compressed_pair_elem.1180" = type { %"struct.std::__1::__forward_begin_node" }
%"struct.std::__1::__forward_begin_node" = type { %"struct.std::__1::__forward_list_node"* }
%"struct.std::__1::__forward_list_node" = type { %"struct.std::__1::__forward_begin_node", %"class.v8::internal::AstRawString"* }
%"class.std::__1::__vector_base_common" = type { i8 }
%class.anon.1217 = type { i8** }
%class.anon = type { i8 }
%"class.v8::base::CustomMatcherTemplateHashMapImpl" = type { %"class.v8::base::TemplateHashMapImpl.1184" }
%"class.v8::base::TemplateHashMapImpl.1184" = type { %"struct.v8::base::TemplateHashMapImpl<void *, void *, v8::base::HashEqualityThenKeyMatcher<void *, bool (*)(void *, void *)>, v8::internal::ZoneAllocationPolicy>::Impl" }
%"struct.v8::base::TemplateHashMapImpl<void *, void *, v8::base::HashEqualityThenKeyMatcher<void *, bool (*)(void *, void *)>, v8::internal::ZoneAllocationPolicy>::Impl" = type { %"struct.v8::base::HashEqualityThenKeyMatcher", %"class.v8::internal::ZoneAllocationPolicy", %"struct.v8::base::TemplateHashMapEntry"*, i32, i32 }
%"struct.v8::base::HashEqualityThenKeyMatcher" = type { i1 (i8*, i8*)* }
%"class.v8::internal::BinaryOperation" = type { %"class.v8::internal::Expression", %"class.v8::internal::Expression"*, %"class.v8::internal::Expression"* }
%"class.v8::internal::Smi" = type { %"class.v8::internal::Object" }
%"class.v8::internal::CompareOperation" = type { %"class.v8::internal::Expression", %"class.v8::internal::Expression"*, %"class.v8::internal::Expression"* }
%"class.v8::internal::UnaryOperation" = type { %"class.v8::internal::Expression", %"class.v8::internal::Expression"* }
%"class.v8::internal::CallBase" = type { %"class.v8::internal::Expression", %"class.v8::internal::Expression"*, %"class.v8::internal::ZoneList.1141" }
%"class.v8::internal::Call" = type { %"class.v8::internal::CallBase" }
%"class.v8::internal::Vector.1186" = type { %"class.v8::internal::Statement"**, i64 }
%"class.v8::internal::AstNodeFactory" = type { %"class.v8::internal::Zone"*, %"class.v8::internal::AstValueFactory"*, %"class.v8::internal::EmptyStatement"*, %"class.v8::internal::ThisExpression"*, %"class.v8::internal::FailureExpression"* }
%"class.v8::internal::EmptyStatement" = type { %"class.v8::internal::Statement" }
%"class.v8::internal::ThisExpression" = type { %"class.v8::internal::Expression" }
%"class.v8::internal::FailureExpression" = type { %"class.v8::internal::Expression" }
%"class.v8::internal::CallRuntime" = type { %"class.v8::internal::Expression", i32, %"struct.v8::internal::Runtime::Function"*, %"class.v8::internal::ZoneList.1141" }

$_ZN2v88internal13ObjectLiteral27BuildBoilerplateDescriptionINS0_7IsolateEEEvPT_ = comdat any

$_ZN2v88internal19MaterializedLiteral14BuildConstantsINS0_7IsolateEEEvPT_ = comdat any

$_ZN2v88internal19MaterializedLiteral19GetBoilerplateValueINS0_7IsolateEEENS0_6HandleINS0_6ObjectEEEPNS0_10ExpressionEPT_ = comdat any

$_ZN2v88internal28ObjectBoilerplateDescription13set_key_valueEiNS0_6ObjectES2_ = comdat any

$_ZN2v88internal13ObjectLiteral27BuildBoilerplateDescriptionINS0_12LocalIsolateEEEvPT_ = comdat any

$_ZN2v88internal19MaterializedLiteral14BuildConstantsINS0_12LocalIsolateEEEvPT_ = comdat any

$_ZN2v88internal19MaterializedLiteral19GetBoilerplateValueINS0_12LocalIsolateEEENS0_6HandleINS0_6ObjectEEEPNS0_10ExpressionEPT_ = comdat any

$_ZN2v88internal12ArrayLiteral27BuildBoilerplateDescriptionINS0_7IsolateEEEvPT_ = comdat any

$_ZN2v88internal12ArrayLiteral27BuildBoilerplateDescriptionINS0_12LocalIsolateEEEvPT_ = comdat any

$_ZNK2v88internal7Literal10BuildValueINS0_7IsolateEEENS0_6HandleINS0_6ObjectEEEPT_ = comdat any

$_ZNK2v88internal7Literal10BuildValueINS0_12LocalIsolateEEENS0_6HandleINS0_6ObjectEEEPT_ = comdat any

$_ZN2v88internal17GetTemplateObject21GetOrBuildDescriptionINS0_7IsolateEEENS0_6HandleINS0_25TemplateObjectDescriptionEEEPT_ = comdat any

$_ZN2v88internal17GetTemplateObject21GetOrBuildDescriptionINS0_12LocalIsolateEEENS0_6HandleINS0_25TemplateObjectDescriptionEEEPT_ = comdat any

$_ZN2v88internal8Variable16SetMaybeAssignedEv = comdat any

$_ZN2v88internal8ZoneListIPNS0_9StatementEEC2ERKNS0_6VectorIKS3_EEPNS0_4ZoneE = comdat any

$_ZN2v84base19TemplateHashMapImplIPvS2_NS0_26HashEqualityThenKeyMatcherIS2_PFbS2_S2_EEENS_8internal20ZoneAllocationPolicyEE14LookupOrInsertIS2_ZNS9_14LookupOrInsertIZNS9_14LookupOrInsertERKS2_jEUlvE_EEPNS0_20TemplateHashMapEntryIS2_S2_EESD_jRKT_EUlvE_SE_EESH_SK_jRKT0_RKT1_ = comdat any

$_ZN2v84base19TemplateHashMapImplIPvS2_NS0_26HashEqualityThenKeyMatcherIS2_PFbS2_S2_EEENS_8internal20ZoneAllocationPolicyEE6ResizeEv = comdat any

@.str = private unnamed_addr constant [17 x i8] c"unreachable code\00", align 1
@.str.1 = private unnamed_addr constant [10 x i8] c"undefined\00", align 1
@.str.2 = private unnamed_addr constant [19 x i8] c"(context function)\00", align 1
@.str.4 = private unnamed_addr constant [35 x i8] c"Out of memory: HashMap::Initialize\00", align 1
@.str.5 = private unnamed_addr constant [18 x i8] c"Check failed: %s.\00", align 1
@.str.6 = private unnamed_addr constant [23 x i8] c"(location_) != nullptr\00", align 1

@_ZN2v88internal13VariableProxyC1EPNS0_8VariableEi = hidden unnamed_addr alias void (%"class.v8::internal::VariableProxy"*, %"class.v8::internal::Variable"*, i32), void (%"class.v8::internal::VariableProxy"*, %"class.v8::internal::Variable"*, i32)* @_ZN2v88internal13VariableProxyC2EPNS0_8VariableEi
@_ZN2v88internal13VariableProxyC1EPKS1_ = hidden unnamed_addr alias void (%"class.v8::internal::VariableProxy"*, %"class.v8::internal::VariableProxy"*), void (%"class.v8::internal::VariableProxy"*, %"class.v8::internal::VariableProxy"*)* @_ZN2v88internal13VariableProxyC2EPKS1_
@_ZN2v88internal10AssignmentC1ENS0_7AstNode8NodeTypeENS0_5Token5ValueEPNS0_10ExpressionES7_i = hidden unnamed_addr alias void (%"class.v8::internal::Assignment"*, i8, i8, %"class.v8::internal::Expression"*, %"class.v8::internal::Expression"*, i32), void (%"class.v8::internal::Assignment"*, i8, i8, %"class.v8::internal::Expression"*, %"class.v8::internal::Expression"*, i32)* @_ZN2v88internal10AssignmentC2ENS0_7AstNode8NodeTypeENS0_5Token5ValueEPNS0_10ExpressionES7_i
@_ZN2v88internal21ObjectLiteralPropertyC1EPNS0_10ExpressionES3_NS1_4KindEb = hidden unnamed_addr alias void (%"class.v8::internal::ObjectLiteralProperty"*, %"class.v8::internal::Expression"*, %"class.v8::internal::Expression"*, i8, i1), void (%"class.v8::internal::ObjectLiteralProperty"*, %"class.v8::internal::Expression"*, %"class.v8::internal::Expression"*, i8, i1)* @_ZN2v88internal21ObjectLiteralPropertyC2EPNS0_10ExpressionES3_NS1_4KindEb
@_ZN2v88internal21ObjectLiteralPropertyC1EPNS0_15AstValueFactoryEPNS0_10ExpressionES5_b = hidden unnamed_addr alias void (%"class.v8::internal::ObjectLiteralProperty"*, %"class.v8::internal::AstValueFactory"*, %"class.v8::internal::Expression"*, %"class.v8::internal::Expression"*, i1), void (%"class.v8::internal::ObjectLiteralProperty"*, %"class.v8::internal::AstValueFactory"*, %"class.v8::internal::Expression"*, %"class.v8::internal::Expression"*, i1)* @_ZN2v88internal21ObjectLiteralPropertyC2EPNS0_15AstValueFactoryEPNS0_10ExpressionES5_b
@_ZN2v88internal20ClassLiteralPropertyC1EPNS0_10ExpressionES3_NS1_4KindEbbb = hidden unnamed_addr alias void (%"class.v8::internal::ClassLiteralProperty"*, %"class.v8::internal::Expression"*, %"class.v8::internal::Expression"*, i8, i1, i1, i1), void (%"class.v8::internal::ClassLiteralProperty"*, %"class.v8::internal::Expression"*, %"class.v8::internal::Expression"*, i8, i1, i1, i1)* @_ZN2v88internal20ClassLiteralPropertyC2EPNS0_10ExpressionES3_NS1_4KindEbbb
@_ZN2v88internal10CaseClauseC1EPNS0_4ZoneEPNS0_10ExpressionERKNS0_10ScopedListIPNS0_9StatementEPvEE = hidden unnamed_addr alias void (%"class.v8::internal::CaseClause"*, %"class.v8::internal::Zone"*, %"class.v8::internal::Expression"*, %"class.v8::internal::ScopedList.1185"*), void (%"class.v8::internal::CaseClause"*, %"class.v8::internal::Zone"*, %"class.v8::internal::Expression"*, %"class.v8::internal::ScopedList.1185"*)* @_ZN2v88internal10CaseClauseC2EPNS0_4ZoneEPNS0_10ExpressionERKNS0_10ScopedListIPNS0_9StatementEPvEE

; Function Attrs: nounwind ssp uwtable
define weak_odr hidden void @_ZN2v88internal13ObjectLiteral27BuildBoilerplateDescriptionINS0_7IsolateEEEvPT_(%"class.v8::internal::ObjectLiteral"*, %"class.v8::internal::Isolate"*) local_unnamed_addr #0 comdat align 2 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca %"class.v8::internal::Handle<v8::internal::ObjectBoilerplateDescription>::ObjectRef", align 8
  %6 = getelementptr inbounds %"class.v8::internal::ObjectLiteral", %"class.v8::internal::ObjectLiteral"* %0, i64 0, i32 2
  %7 = getelementptr inbounds %"class.v8::internal::Handle", %"class.v8::internal::Handle"* %6, i64 0, i32 0, i32 0
  %8 = load i64*, i64** %7, align 8
  %9 = icmp eq i64* %8, null
  br i1 %9, label %10, label %244

10:                                               ; preds = %2
  %11 = getelementptr inbounds %"class.v8::internal::ObjectLiteral", %"class.v8::internal::ObjectLiteral"* %0, i64 0, i32 3
  %12 = getelementptr inbounds %"class.v8::internal::ObjectLiteral", %"class.v8::internal::ObjectLiteral"* %0, i64 0, i32 3, i32 2
  %13 = load i32, i32* %12, align 4
  %14 = icmp sgt i32 %13, 0
  br i1 %14, label %15, label %18

15:                                               ; preds = %10
  %16 = getelementptr inbounds %"class.v8::internal::ZoneList", %"class.v8::internal::ZoneList"* %11, i64 0, i32 0
  %17 = bitcast i32* %3 to i8*
  br label %41

18:                                               ; preds = %79, %10
  %19 = phi i8 [ 0, %10 ], [ %81, %79 ]
  %20 = phi i32 [ 0, %10 ], [ %82, %79 ]
  %21 = phi i32 [ %13, %10 ], [ %80, %79 ]
  %22 = bitcast %"class.v8::internal::Isolate"* %1 to %"class.v8::internal::FactoryBase"*
  %23 = getelementptr inbounds %"class.v8::internal::ObjectLiteral", %"class.v8::internal::ObjectLiteral"* %0, i64 0, i32 1
  %24 = load i32, i32* %23, align 4
  %25 = and i8 %19, 1
  %26 = icmp ne i8 %25, 0
  %27 = call i64* @_ZN2v88internal11FactoryBaseINS0_7FactoryEE31NewObjectBoilerplateDescriptionEiiib(%"class.v8::internal::FactoryBase"* %22, i32 %24, i32 %21, i32 %20, i1 zeroext %26) #11
  %28 = ptrtoint i64* %27 to i64
  %29 = load i32, i32* %12, align 4
  %30 = icmp sgt i32 %29, 0
  br i1 %30, label %31, label %235

31:                                               ; preds = %18
  %32 = getelementptr inbounds %"class.v8::internal::ZoneList", %"class.v8::internal::ZoneList"* %11, i64 0, i32 0
  %33 = bitcast i32* %4 to i8*
  %34 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %1, i64 0, i32 31, i32 4
  %35 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %1, i64 0, i32 31, i32 0
  %36 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %1, i64 0, i32 31, i32 1
  %37 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %1, i64 0, i32 0, i32 7, i32 0, i64 3
  %38 = bitcast %"class.v8::internal::Handle<v8::internal::ObjectBoilerplateDescription>::ObjectRef"* %5 to i8*
  %39 = getelementptr inbounds %"class.v8::internal::Handle<v8::internal::ObjectBoilerplateDescription>::ObjectRef", %"class.v8::internal::Handle<v8::internal::ObjectBoilerplateDescription>::ObjectRef"* %5, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %40 = getelementptr inbounds %"class.v8::internal::Handle<v8::internal::ObjectBoilerplateDescription>::ObjectRef", %"class.v8::internal::Handle<v8::internal::ObjectBoilerplateDescription>::ObjectRef"* %5, i64 0, i32 0
  br label %86

41:                                               ; preds = %15, %79
  %42 = phi i32 [ %13, %15 ], [ %80, %79 ]
  %43 = phi i64 [ 0, %15 ], [ %83, %79 ]
  %44 = phi i32 [ 0, %15 ], [ %82, %79 ]
  %45 = phi i8 [ 0, %15 ], [ %81, %79 ]
  %46 = load %"class.v8::internal::ObjectLiteralProperty"**, %"class.v8::internal::ObjectLiteralProperty"*** %16, align 8
  %47 = getelementptr inbounds %"class.v8::internal::ObjectLiteralProperty"*, %"class.v8::internal::ObjectLiteralProperty"** %46, i64 %43
  %48 = load %"class.v8::internal::ObjectLiteralProperty"*, %"class.v8::internal::ObjectLiteralProperty"** %47, align 8
  %49 = getelementptr inbounds %"class.v8::internal::ObjectLiteralProperty", %"class.v8::internal::ObjectLiteralProperty"* %48, i64 0, i32 1
  %50 = load i8, i8* %49, align 8
  %51 = icmp eq i8 %50, 5
  br i1 %51, label %79, label %52

52:                                               ; preds = %41
  %53 = getelementptr inbounds %"class.v8::internal::ObjectLiteralProperty", %"class.v8::internal::ObjectLiteralProperty"* %48, i64 0, i32 0, i32 0, i32 0
  %54 = load i64, i64* %53, align 8
  %55 = and i64 %54, 1
  %56 = icmp eq i64 %55, 0
  br i1 %56, label %57, label %79

57:                                               ; preds = %52
  %58 = and i64 %54, -2
  %59 = inttoptr i64 %58 to %"class.v8::internal::Expression"*
  %60 = getelementptr inbounds %"class.v8::internal::Expression", %"class.v8::internal::Expression"* %59, i64 0, i32 0, i32 1
  %61 = load i32, i32* %60, align 4
  %62 = and i32 %61, 63
  %63 = icmp eq i32 %62, 41
  %64 = inttoptr i64 %58 to %"class.v8::internal::Literal"*
  %65 = select i1 %63, %"class.v8::internal::Literal"* %64, %"class.v8::internal::Literal"* null
  %66 = getelementptr inbounds %"class.v8::internal::Literal", %"class.v8::internal::Literal"* %65, i64 0, i32 0, i32 0, i32 1
  %67 = load i32, i32* %66, align 4
  %68 = and i32 %67, 1920
  %69 = icmp eq i32 %68, 384
  br i1 %69, label %72, label %70

70:                                               ; preds = %57
  %71 = add nsw i32 %44, 1
  br label %79

72:                                               ; preds = %57
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %17) #11
  %73 = getelementptr inbounds %"class.v8::internal::Literal", %"class.v8::internal::Literal"* %65, i64 0, i32 1, i32 0
  %74 = load %"class.v8::internal::AstRawString"*, %"class.v8::internal::AstRawString"** %73, align 8
  %75 = call zeroext i1 @_ZNK2v88internal12AstRawString12AsArrayIndexEPj(%"class.v8::internal::AstRawString"* %74, i32* nonnull %3) #11
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %17) #11
  %76 = zext i1 %75 to i32
  %77 = add nsw i32 %44, %76
  %78 = load i32, i32* %12, align 4
  br label %79

79:                                               ; preds = %52, %72, %70, %41
  %80 = phi i32 [ %42, %41 ], [ %42, %52 ], [ %42, %70 ], [ %78, %72 ]
  %81 = phi i8 [ 1, %41 ], [ %45, %52 ], [ %45, %70 ], [ %45, %72 ]
  %82 = phi i32 [ %44, %41 ], [ %44, %52 ], [ %71, %70 ], [ %77, %72 ]
  %83 = add nuw nsw i64 %43, 1
  %84 = sext i32 %80 to i64
  %85 = icmp slt i64 %83, %84
  br i1 %85, label %41, label %18

86:                                               ; preds = %31, %229
  %87 = phi i32 [ %29, %31 ], [ %230, %229 ]
  %88 = phi i64 [ 0, %31 ], [ %232, %229 ]
  %89 = phi i32 [ 0, %31 ], [ %231, %229 ]
  %90 = load %"class.v8::internal::ObjectLiteralProperty"**, %"class.v8::internal::ObjectLiteralProperty"*** %32, align 8
  %91 = getelementptr inbounds %"class.v8::internal::ObjectLiteralProperty"*, %"class.v8::internal::ObjectLiteralProperty"** %90, i64 %88
  %92 = load %"class.v8::internal::ObjectLiteralProperty"*, %"class.v8::internal::ObjectLiteralProperty"** %91, align 8
  %93 = getelementptr inbounds %"class.v8::internal::ObjectLiteralProperty", %"class.v8::internal::ObjectLiteralProperty"* %92, i64 0, i32 1
  %94 = load i8, i8* %93, align 8
  %95 = icmp eq i8 %94, 5
  br i1 %95, label %229, label %96

96:                                               ; preds = %86
  %97 = load i32, i32* %23, align 4
  %98 = icmp eq i32 %89, %97
  br i1 %98, label %235, label %99

99:                                               ; preds = %96
  %100 = getelementptr inbounds %"class.v8::internal::ObjectLiteralProperty", %"class.v8::internal::ObjectLiteralProperty"* %92, i64 0, i32 0, i32 1
  %101 = load %"class.v8::internal::Expression"*, %"class.v8::internal::Expression"** %100, align 8
  %102 = getelementptr inbounds %"class.v8::internal::Expression", %"class.v8::internal::Expression"* %101, i64 0, i32 0, i32 1
  %103 = load i32, i32* %102, align 4
  %104 = trunc i32 %103 to i8
  %105 = and i8 %104, 63
  %106 = add nsw i8 %105, -22
  %107 = icmp ugt i8 %106, 2
  %108 = icmp eq %"class.v8::internal::Expression"* %101, null
  %109 = or i1 %108, %107
  br i1 %109, label %116, label %110

110:                                              ; preds = %99
  %111 = and i32 %103, 63
  switch i32 %111, label %116 [
    i32 24, label %112
    i32 23, label %114
  ]

112:                                              ; preds = %110
  %113 = bitcast %"class.v8::internal::Expression"* %101 to %"class.v8::internal::ArrayLiteral"*
  call void @_ZN2v88internal12ArrayLiteral27BuildBoilerplateDescriptionINS0_7IsolateEEEvPT_(%"class.v8::internal::ArrayLiteral"* nonnull %113, %"class.v8::internal::Isolate"* %1) #11
  br label %116

114:                                              ; preds = %110
  %115 = bitcast %"class.v8::internal::Expression"* %101 to %"class.v8::internal::ObjectLiteral"*
  call void @_ZN2v88internal13ObjectLiteral27BuildBoilerplateDescriptionINS0_7IsolateEEEvPT_(%"class.v8::internal::ObjectLiteral"* nonnull %115, %"class.v8::internal::Isolate"* %1) #11
  br label %116

116:                                              ; preds = %99, %110, %114, %112
  %117 = getelementptr inbounds %"class.v8::internal::ObjectLiteralProperty", %"class.v8::internal::ObjectLiteralProperty"* %92, i64 0, i32 0, i32 0, i32 0
  %118 = load i64, i64* %117, align 8
  %119 = and i64 %118, -2
  %120 = inttoptr i64 %119 to %"class.v8::internal::Expression"*
  %121 = getelementptr inbounds %"class.v8::internal::Expression", %"class.v8::internal::Expression"* %120, i64 0, i32 0, i32 1
  %122 = load i32, i32* %121, align 4
  %123 = and i32 %122, 63
  %124 = icmp eq i32 %123, 41
  %125 = inttoptr i64 %119 to %"class.v8::internal::Literal"*
  %126 = select i1 %124, %"class.v8::internal::Literal"* %125, %"class.v8::internal::Literal"* null
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %33) #11
  store i32 0, i32* %4, align 4
  %127 = getelementptr inbounds %"class.v8::internal::Literal", %"class.v8::internal::Literal"* %126, i64 0, i32 0, i32 0, i32 1
  %128 = load i32, i32* %127, align 4
  %129 = lshr i32 %128, 7
  %130 = and i32 %129, 15
  switch i32 %130, label %185 [
    i32 3, label %131
    i32 0, label %137
    i32 1, label %143
  ]

131:                                              ; preds = %116
  %132 = getelementptr inbounds %"class.v8::internal::Literal", %"class.v8::internal::Literal"* %126, i64 0, i32 1, i32 0
  %133 = load %"class.v8::internal::AstRawString"*, %"class.v8::internal::AstRawString"** %132, align 8
  %134 = call zeroext i1 @_ZNK2v88internal12AstRawString12AsArrayIndexEPj(%"class.v8::internal::AstRawString"* %133, i32* nonnull %4) #11
  br i1 %134, label %135, label %185

135:                                              ; preds = %131
  %136 = load i32, i32* %4, align 4
  br label %155

137:                                              ; preds = %116
  %138 = getelementptr inbounds %"class.v8::internal::Literal", %"class.v8::internal::Literal"* %126, i64 0, i32 1
  %139 = bitcast %union.anon.1138* %138 to i32*
  %140 = load i32, i32* %139, align 8
  %141 = icmp slt i32 %140, 0
  br i1 %141, label %185, label %142

142:                                              ; preds = %137
  store i32 %140, i32* %4, align 4
  br label %158

143:                                              ; preds = %116
  %144 = getelementptr inbounds %"class.v8::internal::Literal", %"class.v8::internal::Literal"* %126, i64 0, i32 1
  %145 = bitcast %union.anon.1138* %144 to double*
  %146 = load double, double* %145, align 8
  %147 = fadd double %146, 0x4330000000000000
  %148 = bitcast double %147 to i64
  %149 = and i64 %148, -4294967296
  %150 = icmp eq i64 %149, 4841369599423283200
  br i1 %150, label %151, label %185

151:                                              ; preds = %143
  %152 = trunc i64 %148 to i32
  store i32 %152, i32* %4, align 4
  %153 = uitofp i32 %152 to double
  %154 = fcmp oeq double %146, %153
  br i1 %154, label %155, label %185

155:                                              ; preds = %135, %151
  %156 = phi i32 [ %136, %135 ], [ %152, %151 ]
  %157 = icmp eq i32 %156, -1
  br i1 %157, label %185, label %158

158:                                              ; preds = %155, %142
  %159 = phi i32 [ %140, %142 ], [ %156, %155 ]
  %160 = icmp ult i32 %159, 1073741824
  br i1 %160, label %161, label %179

161:                                              ; preds = %158
  %162 = sext i32 %159 to i64
  %163 = shl nsw i64 %162, 1
  %164 = load %"class.v8::internal::CanonicalHandleScope"*, %"class.v8::internal::CanonicalHandleScope"** %34, align 8
  %165 = icmp eq %"class.v8::internal::CanonicalHandleScope"* %164, null
  br i1 %165, label %168, label %166

166:                                              ; preds = %161
  %167 = call i64* @_ZN2v88internal20CanonicalHandleScope6LookupEm(%"class.v8::internal::CanonicalHandleScope"* nonnull %164, i64 %163) #11
  br label %190

168:                                              ; preds = %161
  %169 = load i64*, i64** %35, align 8
  %170 = load i64*, i64** %36, align 8
  %171 = icmp eq i64* %169, %170
  br i1 %171, label %172, label %174

172:                                              ; preds = %168
  %173 = call i64* @_ZN2v88internal11HandleScope6ExtendEPNS0_7IsolateE(%"class.v8::internal::Isolate"* %1) #11
  br label %174

174:                                              ; preds = %172, %168
  %175 = phi i64* [ %173, %172 ], [ %169, %168 ]
  %176 = ptrtoint i64* %175 to i64
  %177 = add i64 %176, 8
  %178 = inttoptr i64 %177 to i64*
  store i64* %178, i64** %35, align 8
  store i64 %163, i64* %175, align 8
  br label %190

179:                                              ; preds = %158
  %180 = uitofp i32 %159 to double
  %181 = call i64* @_ZN2v88internal11FactoryBaseINS0_7FactoryEE13NewHeapNumberILNS0_14AllocationTypeE1EEENS0_6HandleINS0_10HeapNumberEEEv(%"class.v8::internal::FactoryBase"* %22) #11
  %182 = load i64, i64* %181, align 8
  %183 = add i64 %182, 3
  %184 = inttoptr i64 %183 to double*
  store double %180, double* %184, align 1
  br label %190

185:                                              ; preds = %155, %143, %116, %137, %131, %151
  %186 = getelementptr inbounds %"class.v8::internal::Literal", %"class.v8::internal::Literal"* %126, i64 0, i32 1, i32 0
  %187 = bitcast %"class.v8::internal::AstRawString"** %186 to i64***
  %188 = load i64**, i64*** %187, align 8
  %189 = load i64*, i64** %188, align 8
  br label %190

190:                                              ; preds = %179, %174, %166, %185
  %191 = phi i64* [ %189, %185 ], [ %181, %179 ], [ %167, %166 ], [ %175, %174 ]
  %192 = load %"class.v8::internal::Expression"*, %"class.v8::internal::Expression"** %100, align 8
  %193 = getelementptr inbounds %"class.v8::internal::Expression", %"class.v8::internal::Expression"* %192, i64 0, i32 0, i32 1
  %194 = load i32, i32* %193, align 4
  %195 = and i32 %194, 63
  %196 = icmp eq i32 %195, 41
  br i1 %196, label %197, label %200

197:                                              ; preds = %190
  %198 = bitcast %"class.v8::internal::Expression"* %192 to %"class.v8::internal::Literal"*
  %199 = call i64* @_ZNK2v88internal7Literal10BuildValueINS0_7IsolateEEENS0_6HandleINS0_6ObjectEEEPT_(%"class.v8::internal::Literal"* %198, %"class.v8::internal::Isolate"* %1) #11
  br label %222

200:                                              ; preds = %190
  %201 = trunc i32 %194 to i8
  %202 = and i8 %201, 63
  %203 = add nsw i8 %202, -22
  %204 = icmp ugt i8 %203, 2
  %205 = icmp eq %"class.v8::internal::Expression"* %192, null
  %206 = or i1 %205, %204
  br i1 %206, label %222, label %207

207:                                              ; preds = %200
  switch i32 %195, label %222 [
    i32 24, label %208
    i32 23, label %211
  ]

208:                                              ; preds = %207
  %209 = and i32 %194, 256
  %210 = icmp eq i32 %209, 0
  br i1 %210, label %222, label %218

211:                                              ; preds = %207
  %212 = and i32 %194, 256
  %213 = icmp eq i32 %212, 0
  br i1 %213, label %222, label %214

214:                                              ; preds = %211
  %215 = getelementptr inbounds %"class.v8::internal::Expression", %"class.v8::internal::Expression"* %192, i64 2
  %216 = bitcast %"class.v8::internal::Expression"* %215 to i64**
  %217 = load i64*, i64** %216, align 8
  br label %222

218:                                              ; preds = %208
  %219 = getelementptr inbounds %"class.v8::internal::Expression", %"class.v8::internal::Expression"* %192, i64 2
  %220 = bitcast %"class.v8::internal::Expression"* %219 to i64**
  %221 = load i64*, i64** %220, align 8
  br label %222

222:                                              ; preds = %200, %207, %208, %211, %197, %214, %218
  %223 = phi i64* [ %199, %197 ], [ %217, %214 ], [ %221, %218 ], [ %37, %211 ], [ %37, %208 ], [ %37, %207 ], [ %37, %200 ]
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %38) #11
  %224 = load i64, i64* %27, align 8
  store i64 %224, i64* %39, align 8
  %225 = add nsw i32 %89, 1
  %226 = load i64, i64* %191, align 8
  %227 = load i64, i64* %223, align 8
  call void @_ZN2v88internal28ObjectBoilerplateDescription13set_key_valueEiNS0_6ObjectES2_(%"class.v8::internal::ObjectBoilerplateDescription"* nonnull %40, i32 %89, i64 %226, i64 %227)
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %38) #11
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %33) #11
  %228 = load i32, i32* %12, align 4
  br label %229

229:                                              ; preds = %222, %86
  %230 = phi i32 [ %87, %86 ], [ %228, %222 ]
  %231 = phi i32 [ %89, %86 ], [ %225, %222 ]
  %232 = add nuw nsw i64 %88, 1
  %233 = sext i32 %230 to i64
  %234 = icmp slt i64 %232, %233
  br i1 %234, label %86, label %235

235:                                              ; preds = %229, %96, %18
  %236 = load i64, i64* %27, align 8
  %237 = getelementptr inbounds %"class.v8::internal::ObjectLiteral", %"class.v8::internal::ObjectLiteral"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %238 = load i32, i32* %237, align 4
  %239 = lshr i32 %238, 10
  %240 = and i32 %239, 48
  %241 = add i64 %236, 7
  %242 = inttoptr i64 %241 to i32*
  store atomic volatile i32 %240, i32* %242 monotonic, align 4
  %243 = bitcast %"class.v8::internal::Handle"* %6 to i64*
  store i64 %28, i64* %243, align 8
  br label %244

244:                                              ; preds = %2, %235
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZNK2v88internal7Literal14IsPropertyNameEv(%"class.v8::internal::Literal"* nocapture readonly) local_unnamed_addr #0 align 2 {
  %2 = alloca i32, align 4
  %3 = getelementptr inbounds %"class.v8::internal::Literal", %"class.v8::internal::Literal"* %0, i64 0, i32 0, i32 0, i32 1
  %4 = load i32, i32* %3, align 4
  %5 = and i32 %4, 1920
  %6 = icmp eq i32 %5, 384
  br i1 %6, label %7, label %13

7:                                                ; preds = %1
  %8 = bitcast i32* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %8) #11
  %9 = getelementptr inbounds %"class.v8::internal::Literal", %"class.v8::internal::Literal"* %0, i64 0, i32 1, i32 0
  %10 = load %"class.v8::internal::AstRawString"*, %"class.v8::internal::AstRawString"** %9, align 8
  %11 = call zeroext i1 @_ZNK2v88internal12AstRawString12AsArrayIndexEPj(%"class.v8::internal::AstRawString"* %10, i32* nonnull %2) #11
  %12 = xor i1 %11, true
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %8) #11
  br label %13

13:                                               ; preds = %1, %7
  %14 = phi i1 [ %12, %7 ], [ false, %1 ]
  ret i1 %14
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

declare i64* @_ZN2v88internal11FactoryBaseINS0_7FactoryEE31NewObjectBoilerplateDescriptionEiiib(%"class.v8::internal::FactoryBase"*, i32, i32, i32, i1 zeroext) local_unnamed_addr #2

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden %"class.v8::internal::MaterializedLiteral"* @_ZN2v88internal7AstNode21AsMaterializedLiteralEv(%"class.v8::internal::AstNode"* readonly) local_unnamed_addr #3 align 2 {
  %2 = getelementptr inbounds %"class.v8::internal::AstNode", %"class.v8::internal::AstNode"* %0, i64 0, i32 1
  %3 = load i32, i32* %2, align 4
  %4 = trunc i32 %3 to i8
  %5 = and i8 %4, 63
  switch i8 %5, label %12 [
    i8 22, label %6
    i8 23, label %8
    i8 24, label %10
  ]

6:                                                ; preds = %1
  %7 = bitcast %"class.v8::internal::AstNode"* %0 to %"class.v8::internal::MaterializedLiteral"*
  br label %12

8:                                                ; preds = %1
  %9 = bitcast %"class.v8::internal::AstNode"* %0 to %"class.v8::internal::MaterializedLiteral"*
  br label %12

10:                                               ; preds = %1
  %11 = bitcast %"class.v8::internal::AstNode"* %0 to %"class.v8::internal::MaterializedLiteral"*
  br label %12

12:                                               ; preds = %1, %10, %8, %6
  %13 = phi %"class.v8::internal::MaterializedLiteral"* [ %11, %10 ], [ %9, %8 ], [ %7, %6 ], [ null, %1 ]
  ret %"class.v8::internal::MaterializedLiteral"* %13
}

; Function Attrs: nounwind ssp uwtable
define weak_odr hidden void @_ZN2v88internal19MaterializedLiteral14BuildConstantsINS0_7IsolateEEEvPT_(%"class.v8::internal::MaterializedLiteral"*, %"class.v8::internal::Isolate"*) local_unnamed_addr #0 comdat align 2 {
  %3 = getelementptr inbounds %"class.v8::internal::MaterializedLiteral", %"class.v8::internal::MaterializedLiteral"* %0, i64 0, i32 0, i32 0, i32 1
  %4 = load i32, i32* %3, align 4
  %5 = and i32 %4, 63
  switch i32 %5, label %10 [
    i32 24, label %6
    i32 23, label %8
  ]

6:                                                ; preds = %2
  %7 = bitcast %"class.v8::internal::MaterializedLiteral"* %0 to %"class.v8::internal::ArrayLiteral"*
  tail call void @_ZN2v88internal12ArrayLiteral27BuildBoilerplateDescriptionINS0_7IsolateEEEvPT_(%"class.v8::internal::ArrayLiteral"* %7, %"class.v8::internal::Isolate"* %1)
  br label %10

8:                                                ; preds = %2
  %9 = bitcast %"class.v8::internal::MaterializedLiteral"* %0 to %"class.v8::internal::ObjectLiteral"*
  tail call void @_ZN2v88internal13ObjectLiteral27BuildBoilerplateDescriptionINS0_7IsolateEEEvPT_(%"class.v8::internal::ObjectLiteral"* %9, %"class.v8::internal::Isolate"* %1)
  br label %10

10:                                               ; preds = %2, %6, %8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZNK2v88internal7Literal12AsArrayIndexEPj(%"class.v8::internal::Literal"* nocapture readonly, i32*) local_unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.v8::internal::Literal", %"class.v8::internal::Literal"* %0, i64 0, i32 0, i32 0, i32 1
  %4 = load i32, i32* %3, align 4
  %5 = lshr i32 %4, 7
  %6 = and i32 %5, 15
  switch i32 %6, label %34 [
    i32 3, label %7
    i32 0, label %13
    i32 1, label %19
  ]

7:                                                ; preds = %2
  %8 = getelementptr inbounds %"class.v8::internal::Literal", %"class.v8::internal::Literal"* %0, i64 0, i32 1, i32 0
  %9 = load %"class.v8::internal::AstRawString"*, %"class.v8::internal::AstRawString"** %8, align 8
  %10 = tail call zeroext i1 @_ZNK2v88internal12AstRawString12AsArrayIndexEPj(%"class.v8::internal::AstRawString"* %9, i32* %1) #11
  br i1 %10, label %11, label %34

11:                                               ; preds = %7
  %12 = load i32, i32* %1, align 4
  br label %31

13:                                               ; preds = %2
  %14 = getelementptr inbounds %"class.v8::internal::Literal", %"class.v8::internal::Literal"* %0, i64 0, i32 1
  %15 = bitcast %union.anon.1138* %14 to i32*
  %16 = load i32, i32* %15, align 8
  %17 = icmp slt i32 %16, 0
  br i1 %17, label %34, label %18

18:                                               ; preds = %13
  store i32 %16, i32* %1, align 4
  br label %31

19:                                               ; preds = %2
  %20 = getelementptr inbounds %"class.v8::internal::Literal", %"class.v8::internal::Literal"* %0, i64 0, i32 1
  %21 = bitcast %union.anon.1138* %20 to double*
  %22 = load double, double* %21, align 8
  %23 = fadd double %22, 0x4330000000000000
  %24 = bitcast double %23 to i64
  %25 = and i64 %24, -4294967296
  %26 = icmp eq i64 %25, 4841369599423283200
  br i1 %26, label %27, label %34

27:                                               ; preds = %19
  %28 = trunc i64 %24 to i32
  store i32 %28, i32* %1, align 4
  %29 = uitofp i32 %28 to double
  %30 = fcmp oeq double %22, %29
  br i1 %30, label %31, label %34

31:                                               ; preds = %11, %18, %27
  %32 = phi i32 [ %12, %11 ], [ %16, %18 ], [ %28, %27 ]
  %33 = icmp ne i32 %32, -1
  br label %34

34:                                               ; preds = %19, %2, %13, %7, %31, %27
  %35 = phi i1 [ false, %27 ], [ %33, %31 ], [ false, %7 ], [ false, %13 ], [ false, %2 ], [ false, %19 ]
  ret i1 %35
}

; Function Attrs: nounwind ssp uwtable
define weak_odr hidden i64* @_ZN2v88internal19MaterializedLiteral19GetBoilerplateValueINS0_7IsolateEEENS0_6HandleINS0_6ObjectEEEPNS0_10ExpressionEPT_(%"class.v8::internal::MaterializedLiteral"*, %"class.v8::internal::Expression"*, %"class.v8::internal::Isolate"*) local_unnamed_addr #0 comdat align 2 {
  %4 = getelementptr inbounds %"class.v8::internal::Expression", %"class.v8::internal::Expression"* %1, i64 0, i32 0, i32 1
  %5 = load i32, i32* %4, align 4
  %6 = and i32 %5, 63
  %7 = icmp eq i32 %6, 41
  br i1 %7, label %8, label %11

8:                                                ; preds = %3
  %9 = bitcast %"class.v8::internal::Expression"* %1 to %"class.v8::internal::Literal"*
  %10 = tail call i64* @_ZNK2v88internal7Literal10BuildValueINS0_7IsolateEEENS0_6HandleINS0_6ObjectEEEPT_(%"class.v8::internal::Literal"* %9, %"class.v8::internal::Isolate"* %2)
  br label %35

11:                                               ; preds = %3
  %12 = trunc i32 %5 to i8
  %13 = and i8 %12, 63
  %14 = add nsw i8 %13, -22
  %15 = icmp ugt i8 %14, 2
  %16 = icmp eq %"class.v8::internal::Expression"* %1, null
  %17 = or i1 %16, %15
  br i1 %17, label %33, label %18

18:                                               ; preds = %11
  switch i32 %6, label %33 [
    i32 24, label %19
    i32 23, label %22
  ]

19:                                               ; preds = %18
  %20 = and i32 %5, 256
  %21 = icmp eq i32 %20, 0
  br i1 %21, label %33, label %29

22:                                               ; preds = %18
  %23 = and i32 %5, 256
  %24 = icmp eq i32 %23, 0
  br i1 %24, label %33, label %25

25:                                               ; preds = %22
  %26 = getelementptr inbounds %"class.v8::internal::Expression", %"class.v8::internal::Expression"* %1, i64 2
  %27 = bitcast %"class.v8::internal::Expression"* %26 to i64**
  %28 = load i64*, i64** %27, align 8
  br label %35

29:                                               ; preds = %19
  %30 = getelementptr inbounds %"class.v8::internal::Expression", %"class.v8::internal::Expression"* %1, i64 2
  %31 = bitcast %"class.v8::internal::Expression"* %30 to i64**
  %32 = load i64*, i64** %31, align 8
  br label %35

33:                                               ; preds = %19, %22, %11, %18
  %34 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %2, i64 0, i32 0, i32 7, i32 0, i64 3
  br label %35

35:                                               ; preds = %33, %29, %25, %8
  %36 = phi i64* [ %10, %8 ], [ %28, %25 ], [ %32, %29 ], [ %34, %33 ]
  ret i64* %36
}

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZN2v88internal28ObjectBoilerplateDescription13set_key_valueEiNS0_6ObjectES2_(%"class.v8::internal::ObjectBoilerplateDescription"*, i32, i64, i64) local_unnamed_addr #4 comdat align 2 {
  %5 = shl i32 %1, 3
  %6 = or i32 %5, 4
  %7 = getelementptr inbounds %"class.v8::internal::ObjectBoilerplateDescription", %"class.v8::internal::ObjectBoilerplateDescription"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %8 = load i64, i64* %7, align 8
  %9 = sext i32 %6 to i64
  %10 = add nsw i64 %9, 7
  %11 = add i64 %8, %10
  %12 = inttoptr i64 %11 to i32*
  %13 = trunc i64 %2 to i32
  store atomic volatile i32 %13, i32* %12 monotonic, align 4
  %14 = load i64, i64* %7, align 8
  %15 = add i64 %14, %10
  %16 = and i64 %2, 1
  %17 = icmp eq i64 %16, 0
  br i1 %17, label %49, label %18

18:                                               ; preds = %4
  %19 = and i64 %14, -262144
  %20 = or i64 %19, 8
  %21 = inttoptr i64 %20 to i64*
  %22 = load i64, i64* %21, align 8
  %23 = and i64 %22, 262144
  %24 = icmp eq i64 %23, 0
  br i1 %24, label %31, label %25

25:                                               ; preds = %18
  %26 = or i64 %19, 16
  %27 = inttoptr i64 %26 to %"class.v8::internal::Heap"**
  %28 = load %"class.v8::internal::Heap"*, %"class.v8::internal::Heap"** %27, align 16
  tail call void @_ZN2v88internal12WriteBarrier11MarkingSlowEPNS0_4HeapENS0_10HeapObjectENS0_24CompressedHeapObjectSlotES4_(%"class.v8::internal::Heap"* %28, i64 %14, i64 %15, i64 %2) #11
  %29 = load i64, i64* %7, align 8
  %30 = add i64 %29, %10
  br label %31

31:                                               ; preds = %25, %18
  %32 = phi i64 [ %15, %18 ], [ %30, %25 ]
  %33 = phi i64 [ %14, %18 ], [ %29, %25 ]
  %34 = and i64 %2, -262144
  %35 = or i64 %34, 8
  %36 = inttoptr i64 %35 to i64*
  %37 = load i64, i64* %36, align 8
  %38 = and i64 %37, 24
  %39 = icmp eq i64 %38, 0
  br i1 %39, label %49, label %40

40:                                               ; preds = %31
  %41 = and i64 %33, -262144
  %42 = or i64 %41, 8
  %43 = inttoptr i64 %42 to i64*
  %44 = load i64, i64* %43, align 8
  %45 = and i64 %44, 24
  %46 = icmp eq i64 %45, 0
  br i1 %46, label %47, label %49

47:                                               ; preds = %40
  tail call void @_ZN2v88internal28Heap_GenerationalBarrierSlowENS0_10HeapObjectEmS1_(i64 %33, i64 %32, i64 %2) #11
  %48 = load i64, i64* %7, align 8
  br label %49

49:                                               ; preds = %4, %31, %40, %47
  %50 = phi i64 [ %14, %4 ], [ %33, %31 ], [ %33, %40 ], [ %48, %47 ]
  %51 = add i32 %6, 4
  %52 = or i32 %51, 7
  %53 = sext i32 %52 to i64
  %54 = add i64 %50, %53
  %55 = inttoptr i64 %54 to i32*
  %56 = trunc i64 %3 to i32
  store atomic volatile i32 %56, i32* %55 monotonic, align 4
  %57 = load i64, i64* %7, align 8
  %58 = add i64 %57, %53
  %59 = and i64 %3, 1
  %60 = icmp eq i64 %59, 0
  br i1 %60, label %91, label %61

61:                                               ; preds = %49
  %62 = and i64 %57, -262144
  %63 = or i64 %62, 8
  %64 = inttoptr i64 %63 to i64*
  %65 = load i64, i64* %64, align 8
  %66 = and i64 %65, 262144
  %67 = icmp eq i64 %66, 0
  br i1 %67, label %74, label %68

68:                                               ; preds = %61
  %69 = or i64 %62, 16
  %70 = inttoptr i64 %69 to %"class.v8::internal::Heap"**
  %71 = load %"class.v8::internal::Heap"*, %"class.v8::internal::Heap"** %70, align 16
  tail call void @_ZN2v88internal12WriteBarrier11MarkingSlowEPNS0_4HeapENS0_10HeapObjectENS0_24CompressedHeapObjectSlotES4_(%"class.v8::internal::Heap"* %71, i64 %57, i64 %58, i64 %3) #11
  %72 = load i64, i64* %7, align 8
  %73 = add i64 %72, %53
  br label %74

74:                                               ; preds = %68, %61
  %75 = phi i64 [ %58, %61 ], [ %73, %68 ]
  %76 = phi i64 [ %57, %61 ], [ %72, %68 ]
  %77 = and i64 %3, -262144
  %78 = or i64 %77, 8
  %79 = inttoptr i64 %78 to i64*
  %80 = load i64, i64* %79, align 8
  %81 = and i64 %80, 24
  %82 = icmp eq i64 %81, 0
  br i1 %82, label %91, label %83

83:                                               ; preds = %74
  %84 = and i64 %76, -262144
  %85 = or i64 %84, 8
  %86 = inttoptr i64 %85 to i64*
  %87 = load i64, i64* %86, align 8
  %88 = and i64 %87, 24
  %89 = icmp eq i64 %88, 0
  br i1 %89, label %90, label %91

90:                                               ; preds = %83
  tail call void @_ZN2v88internal28Heap_GenerationalBarrierSlowENS0_10HeapObjectEmS1_(i64 %76, i64 %75, i64 %3) #11
  br label %91

91:                                               ; preds = %49, %74, %83, %90
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #1

; Function Attrs: nounwind ssp uwtable
define weak_odr hidden void @_ZN2v88internal13ObjectLiteral27BuildBoilerplateDescriptionINS0_12LocalIsolateEEEvPT_(%"class.v8::internal::ObjectLiteral"*, %"class.v8::internal::LocalIsolate"*) local_unnamed_addr #0 comdat align 2 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca %"class.v8::internal::Handle<v8::internal::ObjectBoilerplateDescription>::ObjectRef", align 8
  %6 = getelementptr inbounds %"class.v8::internal::ObjectLiteral", %"class.v8::internal::ObjectLiteral"* %0, i64 0, i32 2
  %7 = getelementptr inbounds %"class.v8::internal::Handle", %"class.v8::internal::Handle"* %6, i64 0, i32 0, i32 0
  %8 = load i64*, i64** %7, align 8
  %9 = icmp eq i64* %8, null
  br i1 %9, label %10, label %250

10:                                               ; preds = %2
  %11 = getelementptr inbounds %"class.v8::internal::ObjectLiteral", %"class.v8::internal::ObjectLiteral"* %0, i64 0, i32 3
  %12 = getelementptr inbounds %"class.v8::internal::ObjectLiteral", %"class.v8::internal::ObjectLiteral"* %0, i64 0, i32 3, i32 2
  %13 = load i32, i32* %12, align 4
  %14 = icmp sgt i32 %13, 0
  br i1 %14, label %15, label %18

15:                                               ; preds = %10
  %16 = getelementptr inbounds %"class.v8::internal::ZoneList", %"class.v8::internal::ZoneList"* %11, i64 0, i32 0
  %17 = bitcast i32* %3 to i8*
  br label %41

18:                                               ; preds = %79, %10
  %19 = phi i8 [ 0, %10 ], [ %81, %79 ]
  %20 = phi i32 [ 0, %10 ], [ %82, %79 ]
  %21 = phi i32 [ %13, %10 ], [ %80, %79 ]
  %22 = bitcast %"class.v8::internal::LocalIsolate"* %1 to %"class.v8::internal::FactoryBase.1058"*
  %23 = getelementptr inbounds %"class.v8::internal::ObjectLiteral", %"class.v8::internal::ObjectLiteral"* %0, i64 0, i32 1
  %24 = load i32, i32* %23, align 4
  %25 = and i8 %19, 1
  %26 = icmp ne i8 %25, 0
  %27 = call i64* @_ZN2v88internal11FactoryBaseINS0_12LocalFactoryEE31NewObjectBoilerplateDescriptionEiiib(%"class.v8::internal::FactoryBase.1058"* %22, i32 %24, i32 %21, i32 %20, i1 zeroext %26) #11
  %28 = ptrtoint i64* %27 to i64
  %29 = load i32, i32* %12, align 4
  %30 = icmp sgt i32 %29, 0
  br i1 %30, label %31, label %241

31:                                               ; preds = %18
  %32 = getelementptr inbounds %"class.v8::internal::ZoneList", %"class.v8::internal::ZoneList"* %11, i64 0, i32 0
  %33 = bitcast i32* %4 to i8*
  %34 = getelementptr inbounds %"class.v8::internal::LocalIsolate", %"class.v8::internal::LocalIsolate"* %1, i64 0, i32 1, i32 1
  %35 = getelementptr inbounds %"class.v8::internal::LocalIsolate", %"class.v8::internal::LocalIsolate"* %1, i64 0, i32 1
  %36 = getelementptr inbounds %"class.v8::internal::LocalIsolate", %"class.v8::internal::LocalIsolate"* %1, i64 0, i32 1, i32 7, i32 0, i32 0, i32 0
  %37 = getelementptr inbounds %"class.v8::internal::LocalIsolate", %"class.v8::internal::LocalIsolate"* %1, i64 0, i32 0, i32 0, i32 0, i32 0
  %38 = bitcast %"class.v8::internal::Handle<v8::internal::ObjectBoilerplateDescription>::ObjectRef"* %5 to i8*
  %39 = getelementptr inbounds %"class.v8::internal::Handle<v8::internal::ObjectBoilerplateDescription>::ObjectRef", %"class.v8::internal::Handle<v8::internal::ObjectBoilerplateDescription>::ObjectRef"* %5, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %40 = getelementptr inbounds %"class.v8::internal::Handle<v8::internal::ObjectBoilerplateDescription>::ObjectRef", %"class.v8::internal::Handle<v8::internal::ObjectBoilerplateDescription>::ObjectRef"* %5, i64 0, i32 0
  br label %86

41:                                               ; preds = %15, %79
  %42 = phi i32 [ %13, %15 ], [ %80, %79 ]
  %43 = phi i64 [ 0, %15 ], [ %83, %79 ]
  %44 = phi i32 [ 0, %15 ], [ %82, %79 ]
  %45 = phi i8 [ 0, %15 ], [ %81, %79 ]
  %46 = load %"class.v8::internal::ObjectLiteralProperty"**, %"class.v8::internal::ObjectLiteralProperty"*** %16, align 8
  %47 = getelementptr inbounds %"class.v8::internal::ObjectLiteralProperty"*, %"class.v8::internal::ObjectLiteralProperty"** %46, i64 %43
  %48 = load %"class.v8::internal::ObjectLiteralProperty"*, %"class.v8::internal::ObjectLiteralProperty"** %47, align 8
  %49 = getelementptr inbounds %"class.v8::internal::ObjectLiteralProperty", %"class.v8::internal::ObjectLiteralProperty"* %48, i64 0, i32 1
  %50 = load i8, i8* %49, align 8
  %51 = icmp eq i8 %50, 5
  br i1 %51, label %79, label %52

52:                                               ; preds = %41
  %53 = getelementptr inbounds %"class.v8::internal::ObjectLiteralProperty", %"class.v8::internal::ObjectLiteralProperty"* %48, i64 0, i32 0, i32 0, i32 0
  %54 = load i64, i64* %53, align 8
  %55 = and i64 %54, 1
  %56 = icmp eq i64 %55, 0
  br i1 %56, label %57, label %79

57:                                               ; preds = %52
  %58 = and i64 %54, -2
  %59 = inttoptr i64 %58 to %"class.v8::internal::Expression"*
  %60 = getelementptr inbounds %"class.v8::internal::Expression", %"class.v8::internal::Expression"* %59, i64 0, i32 0, i32 1
  %61 = load i32, i32* %60, align 4
  %62 = and i32 %61, 63
  %63 = icmp eq i32 %62, 41
  %64 = inttoptr i64 %58 to %"class.v8::internal::Literal"*
  %65 = select i1 %63, %"class.v8::internal::Literal"* %64, %"class.v8::internal::Literal"* null
  %66 = getelementptr inbounds %"class.v8::internal::Literal", %"class.v8::internal::Literal"* %65, i64 0, i32 0, i32 0, i32 1
  %67 = load i32, i32* %66, align 4
  %68 = and i32 %67, 1920
  %69 = icmp eq i32 %68, 384
  br i1 %69, label %72, label %70

70:                                               ; preds = %57
  %71 = add nsw i32 %44, 1
  br label %79

72:                                               ; preds = %57
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %17) #11
  %73 = getelementptr inbounds %"class.v8::internal::Literal", %"class.v8::internal::Literal"* %65, i64 0, i32 1, i32 0
  %74 = load %"class.v8::internal::AstRawString"*, %"class.v8::internal::AstRawString"** %73, align 8
  %75 = call zeroext i1 @_ZNK2v88internal12AstRawString12AsArrayIndexEPj(%"class.v8::internal::AstRawString"* %74, i32* nonnull %3) #11
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %17) #11
  %76 = zext i1 %75 to i32
  %77 = add nsw i32 %44, %76
  %78 = load i32, i32* %12, align 4
  br label %79

79:                                               ; preds = %52, %72, %70, %41
  %80 = phi i32 [ %42, %41 ], [ %42, %52 ], [ %42, %70 ], [ %78, %72 ]
  %81 = phi i8 [ 1, %41 ], [ %45, %52 ], [ %45, %70 ], [ %45, %72 ]
  %82 = phi i32 [ %44, %41 ], [ %44, %52 ], [ %71, %70 ], [ %77, %72 ]
  %83 = add nuw nsw i64 %43, 1
  %84 = sext i32 %80 to i64
  %85 = icmp slt i64 %83, %84
  br i1 %85, label %41, label %18

86:                                               ; preds = %31, %235
  %87 = phi i32 [ %29, %31 ], [ %236, %235 ]
  %88 = phi i64 [ 0, %31 ], [ %238, %235 ]
  %89 = phi i32 [ 0, %31 ], [ %237, %235 ]
  %90 = load %"class.v8::internal::ObjectLiteralProperty"**, %"class.v8::internal::ObjectLiteralProperty"*** %32, align 8
  %91 = getelementptr inbounds %"class.v8::internal::ObjectLiteralProperty"*, %"class.v8::internal::ObjectLiteralProperty"** %90, i64 %88
  %92 = load %"class.v8::internal::ObjectLiteralProperty"*, %"class.v8::internal::ObjectLiteralProperty"** %91, align 8
  %93 = getelementptr inbounds %"class.v8::internal::ObjectLiteralProperty", %"class.v8::internal::ObjectLiteralProperty"* %92, i64 0, i32 1
  %94 = load i8, i8* %93, align 8
  %95 = icmp eq i8 %94, 5
  br i1 %95, label %235, label %96

96:                                               ; preds = %86
  %97 = load i32, i32* %23, align 4
  %98 = icmp eq i32 %89, %97
  br i1 %98, label %241, label %99

99:                                               ; preds = %96
  %100 = getelementptr inbounds %"class.v8::internal::ObjectLiteralProperty", %"class.v8::internal::ObjectLiteralProperty"* %92, i64 0, i32 0, i32 1
  %101 = load %"class.v8::internal::Expression"*, %"class.v8::internal::Expression"** %100, align 8
  %102 = getelementptr inbounds %"class.v8::internal::Expression", %"class.v8::internal::Expression"* %101, i64 0, i32 0, i32 1
  %103 = load i32, i32* %102, align 4
  %104 = trunc i32 %103 to i8
  %105 = and i8 %104, 63
  %106 = add nsw i8 %105, -22
  %107 = icmp ugt i8 %106, 2
  %108 = icmp eq %"class.v8::internal::Expression"* %101, null
  %109 = or i1 %108, %107
  br i1 %109, label %116, label %110

110:                                              ; preds = %99
  %111 = and i32 %103, 63
  switch i32 %111, label %116 [
    i32 24, label %112
    i32 23, label %114
  ]

112:                                              ; preds = %110
  %113 = bitcast %"class.v8::internal::Expression"* %101 to %"class.v8::internal::ArrayLiteral"*
  call void @_ZN2v88internal12ArrayLiteral27BuildBoilerplateDescriptionINS0_12LocalIsolateEEEvPT_(%"class.v8::internal::ArrayLiteral"* nonnull %113, %"class.v8::internal::LocalIsolate"* %1) #11
  br label %116

114:                                              ; preds = %110
  %115 = bitcast %"class.v8::internal::Expression"* %101 to %"class.v8::internal::ObjectLiteral"*
  call void @_ZN2v88internal13ObjectLiteral27BuildBoilerplateDescriptionINS0_12LocalIsolateEEEvPT_(%"class.v8::internal::ObjectLiteral"* nonnull %115, %"class.v8::internal::LocalIsolate"* %1) #11
  br label %116

116:                                              ; preds = %99, %110, %114, %112
  %117 = getelementptr inbounds %"class.v8::internal::ObjectLiteralProperty", %"class.v8::internal::ObjectLiteralProperty"* %92, i64 0, i32 0, i32 0, i32 0
  %118 = load i64, i64* %117, align 8
  %119 = and i64 %118, -2
  %120 = inttoptr i64 %119 to %"class.v8::internal::Expression"*
  %121 = getelementptr inbounds %"class.v8::internal::Expression", %"class.v8::internal::Expression"* %120, i64 0, i32 0, i32 1
  %122 = load i32, i32* %121, align 4
  %123 = and i32 %122, 63
  %124 = icmp eq i32 %123, 41
  %125 = inttoptr i64 %119 to %"class.v8::internal::Literal"*
  %126 = select i1 %124, %"class.v8::internal::Literal"* %125, %"class.v8::internal::Literal"* null
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %33) #11
  store i32 0, i32* %4, align 4
  %127 = getelementptr inbounds %"class.v8::internal::Literal", %"class.v8::internal::Literal"* %126, i64 0, i32 0, i32 0, i32 1
  %128 = load i32, i32* %127, align 4
  %129 = lshr i32 %128, 7
  %130 = and i32 %129, 15
  switch i32 %130, label %188 [
    i32 3, label %131
    i32 0, label %137
    i32 1, label %143
  ]

131:                                              ; preds = %116
  %132 = getelementptr inbounds %"class.v8::internal::Literal", %"class.v8::internal::Literal"* %126, i64 0, i32 1, i32 0
  %133 = load %"class.v8::internal::AstRawString"*, %"class.v8::internal::AstRawString"** %132, align 8
  %134 = call zeroext i1 @_ZNK2v88internal12AstRawString12AsArrayIndexEPj(%"class.v8::internal::AstRawString"* %133, i32* nonnull %4) #11
  br i1 %134, label %135, label %188

135:                                              ; preds = %131
  %136 = load i32, i32* %4, align 4
  br label %155

137:                                              ; preds = %116
  %138 = getelementptr inbounds %"class.v8::internal::Literal", %"class.v8::internal::Literal"* %126, i64 0, i32 1
  %139 = bitcast %union.anon.1138* %138 to i32*
  %140 = load i32, i32* %139, align 8
  %141 = icmp slt i32 %140, 0
  br i1 %141, label %188, label %142

142:                                              ; preds = %137
  store i32 %140, i32* %4, align 4
  br label %158

143:                                              ; preds = %116
  %144 = getelementptr inbounds %"class.v8::internal::Literal", %"class.v8::internal::Literal"* %126, i64 0, i32 1
  %145 = bitcast %union.anon.1138* %144 to double*
  %146 = load double, double* %145, align 8
  %147 = fadd double %146, 0x4330000000000000
  %148 = bitcast double %147 to i64
  %149 = and i64 %148, -4294967296
  %150 = icmp eq i64 %149, 4841369599423283200
  br i1 %150, label %151, label %188

151:                                              ; preds = %143
  %152 = trunc i64 %148 to i32
  store i32 %152, i32* %4, align 4
  %153 = uitofp i32 %152 to double
  %154 = fcmp oeq double %146, %153
  br i1 %154, label %155, label %188

155:                                              ; preds = %135, %151
  %156 = phi i32 [ %136, %135 ], [ %152, %151 ]
  %157 = icmp eq i32 %156, -1
  br i1 %157, label %188, label %158

158:                                              ; preds = %155, %142
  %159 = phi i32 [ %140, %142 ], [ %156, %155 ]
  %160 = icmp ult i32 %159, 1073741824
  br i1 %160, label %161, label %182

161:                                              ; preds = %158
  %162 = sext i32 %159 to i64
  %163 = shl nsw i64 %162, 1
  %164 = load i8, i8* %34, align 8, !range !2
  %165 = icmp eq i8 %164, 0
  br i1 %165, label %168, label %166

166:                                              ; preds = %161
  %167 = call i64* @_ZN2v88internal16LocalHandleScope19GetMainThreadHandleEPNS0_9LocalHeapEm(%"class.v8::internal::LocalHeap"* %35, i64 %163) #11
  br label %193

168:                                              ; preds = %161
  %169 = load %"class.v8::internal::LocalHandles"*, %"class.v8::internal::LocalHandles"** %36, align 8
  %170 = getelementptr inbounds %"class.v8::internal::LocalHandles", %"class.v8::internal::LocalHandles"* %169, i64 0, i32 0, i32 0
  %171 = load i64*, i64** %170, align 8
  %172 = getelementptr inbounds %"class.v8::internal::LocalHandles", %"class.v8::internal::LocalHandles"* %169, i64 0, i32 0, i32 1
  %173 = load i64*, i64** %172, align 8
  %174 = icmp eq i64* %171, %173
  br i1 %174, label %175, label %178

175:                                              ; preds = %168
  %176 = call i64* @_ZN2v88internal12LocalHandles8AddBlockEv(%"class.v8::internal::LocalHandles"* %169) #11
  %177 = load i64*, i64** %170, align 8
  br label %178

178:                                              ; preds = %175, %168
  %179 = phi i64* [ %177, %175 ], [ %171, %168 ]
  %180 = phi i64* [ %176, %175 ], [ %171, %168 ]
  %181 = getelementptr inbounds i64, i64* %179, i64 1
  store i64* %181, i64** %170, align 8
  store i64 %163, i64* %180, align 8
  br label %193

182:                                              ; preds = %158
  %183 = uitofp i32 %159 to double
  %184 = call i64* @_ZN2v88internal11FactoryBaseINS0_12LocalFactoryEE13NewHeapNumberILNS0_14AllocationTypeE1EEENS0_6HandleINS0_10HeapNumberEEEv(%"class.v8::internal::FactoryBase.1058"* %22) #11
  %185 = load i64, i64* %184, align 8
  %186 = add i64 %185, 3
  %187 = inttoptr i64 %186 to double*
  store double %183, double* %187, align 1
  br label %193

188:                                              ; preds = %155, %143, %116, %137, %131, %151
  %189 = getelementptr inbounds %"class.v8::internal::Literal", %"class.v8::internal::Literal"* %126, i64 0, i32 1, i32 0
  %190 = bitcast %"class.v8::internal::AstRawString"** %189 to i64***
  %191 = load i64**, i64*** %190, align 8
  %192 = load i64*, i64** %191, align 8
  br label %193

193:                                              ; preds = %182, %178, %166, %188
  %194 = phi i64* [ %192, %188 ], [ %184, %182 ], [ %167, %166 ], [ %180, %178 ]
  %195 = load %"class.v8::internal::Expression"*, %"class.v8::internal::Expression"** %100, align 8
  %196 = getelementptr inbounds %"class.v8::internal::Expression", %"class.v8::internal::Expression"* %195, i64 0, i32 0, i32 1
  %197 = load i32, i32* %196, align 4
  %198 = and i32 %197, 63
  %199 = icmp eq i32 %198, 41
  br i1 %199, label %200, label %203

200:                                              ; preds = %193
  %201 = bitcast %"class.v8::internal::Expression"* %195 to %"class.v8::internal::Literal"*
  %202 = call i64* @_ZNK2v88internal7Literal10BuildValueINS0_12LocalIsolateEEENS0_6HandleINS0_6ObjectEEEPT_(%"class.v8::internal::Literal"* %201, %"class.v8::internal::LocalIsolate"* %1) #11
  br label %228

203:                                              ; preds = %193
  %204 = trunc i32 %197 to i8
  %205 = and i8 %204, 63
  %206 = add nsw i8 %205, -22
  %207 = icmp ugt i8 %206, 2
  %208 = icmp eq %"class.v8::internal::Expression"* %195, null
  %209 = or i1 %208, %207
  br i1 %209, label %225, label %210

210:                                              ; preds = %203
  switch i32 %198, label %225 [
    i32 24, label %211
    i32 23, label %214
  ]

211:                                              ; preds = %210
  %212 = and i32 %197, 256
  %213 = icmp eq i32 %212, 0
  br i1 %213, label %225, label %221

214:                                              ; preds = %210
  %215 = and i32 %197, 256
  %216 = icmp eq i32 %215, 0
  br i1 %216, label %225, label %217

217:                                              ; preds = %214
  %218 = getelementptr inbounds %"class.v8::internal::Expression", %"class.v8::internal::Expression"* %195, i64 2
  %219 = bitcast %"class.v8::internal::Expression"* %218 to i64**
  %220 = load i64*, i64** %219, align 8
  br label %228

221:                                              ; preds = %211
  %222 = getelementptr inbounds %"class.v8::internal::Expression", %"class.v8::internal::Expression"* %195, i64 2
  %223 = bitcast %"class.v8::internal::Expression"* %222 to i64**
  %224 = load i64*, i64** %223, align 8
  br label %228

225:                                              ; preds = %214, %211, %210, %203
  %226 = load i64*, i64** %37, align 8
  %227 = getelementptr inbounds i64, i64* %226, i64 3
  br label %228

228:                                              ; preds = %200, %217, %221, %225
  %229 = phi i64* [ %202, %200 ], [ %220, %217 ], [ %224, %221 ], [ %227, %225 ]
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %38) #11
  %230 = load i64, i64* %27, align 8
  store i64 %230, i64* %39, align 8
  %231 = add nsw i32 %89, 1
  %232 = load i64, i64* %194, align 8
  %233 = load i64, i64* %229, align 8
  call void @_ZN2v88internal28ObjectBoilerplateDescription13set_key_valueEiNS0_6ObjectES2_(%"class.v8::internal::ObjectBoilerplateDescription"* nonnull %40, i32 %89, i64 %232, i64 %233)
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %38) #11
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %33) #11
  %234 = load i32, i32* %12, align 4
  br label %235

235:                                              ; preds = %228, %86
  %236 = phi i32 [ %87, %86 ], [ %234, %228 ]
  %237 = phi i32 [ %89, %86 ], [ %231, %228 ]
  %238 = add nuw nsw i64 %88, 1
  %239 = sext i32 %236 to i64
  %240 = icmp slt i64 %238, %239
  br i1 %240, label %86, label %241

241:                                              ; preds = %235, %96, %18
  %242 = load i64, i64* %27, align 8
  %243 = getelementptr inbounds %"class.v8::internal::ObjectLiteral", %"class.v8::internal::ObjectLiteral"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %244 = load i32, i32* %243, align 4
  %245 = lshr i32 %244, 10
  %246 = and i32 %245, 48
  %247 = add i64 %242, 7
  %248 = inttoptr i64 %247 to i32*
  store atomic volatile i32 %246, i32* %248 monotonic, align 4
  %249 = bitcast %"class.v8::internal::Handle"* %6 to i64*
  store i64 %28, i64* %249, align 8
  br label %250

250:                                              ; preds = %2, %241
  ret void
}

declare i64* @_ZN2v88internal11FactoryBaseINS0_12LocalFactoryEE31NewObjectBoilerplateDescriptionEiiib(%"class.v8::internal::FactoryBase.1058"*, i32, i32, i32, i1 zeroext) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define weak_odr hidden void @_ZN2v88internal19MaterializedLiteral14BuildConstantsINS0_12LocalIsolateEEEvPT_(%"class.v8::internal::MaterializedLiteral"*, %"class.v8::internal::LocalIsolate"*) local_unnamed_addr #0 comdat align 2 {
  %3 = getelementptr inbounds %"class.v8::internal::MaterializedLiteral", %"class.v8::internal::MaterializedLiteral"* %0, i64 0, i32 0, i32 0, i32 1
  %4 = load i32, i32* %3, align 4
  %5 = and i32 %4, 63
  switch i32 %5, label %10 [
    i32 24, label %6
    i32 23, label %8
  ]

6:                                                ; preds = %2
  %7 = bitcast %"class.v8::internal::MaterializedLiteral"* %0 to %"class.v8::internal::ArrayLiteral"*
  tail call void @_ZN2v88internal12ArrayLiteral27BuildBoilerplateDescriptionINS0_12LocalIsolateEEEvPT_(%"class.v8::internal::ArrayLiteral"* %7, %"class.v8::internal::LocalIsolate"* %1)
  br label %10

8:                                                ; preds = %2
  %9 = bitcast %"class.v8::internal::MaterializedLiteral"* %0 to %"class.v8::internal::ObjectLiteral"*
  tail call void @_ZN2v88internal13ObjectLiteral27BuildBoilerplateDescriptionINS0_12LocalIsolateEEEvPT_(%"class.v8::internal::ObjectLiteral"* %9, %"class.v8::internal::LocalIsolate"* %1)
  br label %10

10:                                               ; preds = %2, %6, %8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define weak_odr hidden i64* @_ZN2v88internal19MaterializedLiteral19GetBoilerplateValueINS0_12LocalIsolateEEENS0_6HandleINS0_6ObjectEEEPNS0_10ExpressionEPT_(%"class.v8::internal::MaterializedLiteral"*, %"class.v8::internal::Expression"*, %"class.v8::internal::LocalIsolate"*) local_unnamed_addr #0 comdat align 2 {
  %4 = getelementptr inbounds %"class.v8::internal::Expression", %"class.v8::internal::Expression"* %1, i64 0, i32 0, i32 1
  %5 = load i32, i32* %4, align 4
  %6 = and i32 %5, 63
  %7 = icmp eq i32 %6, 41
  br i1 %7, label %8, label %11

8:                                                ; preds = %3
  %9 = bitcast %"class.v8::internal::Expression"* %1 to %"class.v8::internal::Literal"*
  %10 = tail call i64* @_ZNK2v88internal7Literal10BuildValueINS0_12LocalIsolateEEENS0_6HandleINS0_6ObjectEEEPT_(%"class.v8::internal::Literal"* %9, %"class.v8::internal::LocalIsolate"* %2)
  br label %37

11:                                               ; preds = %3
  %12 = trunc i32 %5 to i8
  %13 = and i8 %12, 63
  %14 = add nsw i8 %13, -22
  %15 = icmp ugt i8 %14, 2
  %16 = icmp eq %"class.v8::internal::Expression"* %1, null
  %17 = or i1 %16, %15
  br i1 %17, label %33, label %18

18:                                               ; preds = %11
  switch i32 %6, label %33 [
    i32 24, label %19
    i32 23, label %22
  ]

19:                                               ; preds = %18
  %20 = and i32 %5, 256
  %21 = icmp eq i32 %20, 0
  br i1 %21, label %33, label %29

22:                                               ; preds = %18
  %23 = and i32 %5, 256
  %24 = icmp eq i32 %23, 0
  br i1 %24, label %33, label %25

25:                                               ; preds = %22
  %26 = getelementptr inbounds %"class.v8::internal::Expression", %"class.v8::internal::Expression"* %1, i64 2
  %27 = bitcast %"class.v8::internal::Expression"* %26 to i64**
  %28 = load i64*, i64** %27, align 8
  br label %37

29:                                               ; preds = %19
  %30 = getelementptr inbounds %"class.v8::internal::Expression", %"class.v8::internal::Expression"* %1, i64 2
  %31 = bitcast %"class.v8::internal::Expression"* %30 to i64**
  %32 = load i64*, i64** %31, align 8
  br label %37

33:                                               ; preds = %19, %22, %11, %18
  %34 = getelementptr inbounds %"class.v8::internal::LocalIsolate", %"class.v8::internal::LocalIsolate"* %2, i64 0, i32 0, i32 0, i32 0, i32 0
  %35 = load i64*, i64** %34, align 8
  %36 = getelementptr inbounds i64, i64* %35, i64 3
  br label %37

37:                                               ; preds = %33, %29, %25, %8
  %38 = phi i64* [ %10, %8 ], [ %28, %25 ], [ %32, %29 ], [ %36, %33 ]
  ret i64* %38
}

; Function Attrs: nounwind ssp uwtable
define weak_odr hidden void @_ZN2v88internal12ArrayLiteral27BuildBoilerplateDescriptionINS0_7IsolateEEEvPT_(%"class.v8::internal::ArrayLiteral"*, %"class.v8::internal::Isolate"*) local_unnamed_addr #0 comdat align 2 {
  %3 = getelementptr inbounds %"class.v8::internal::ArrayLiteral", %"class.v8::internal::ArrayLiteral"* %0, i64 0, i32 2, i32 0, i32 0
  %4 = load i64*, i64** %3, align 8
  %5 = icmp eq i64* %4, null
  br i1 %5, label %6, label %254

6:                                                ; preds = %2
  %7 = getelementptr inbounds %"class.v8::internal::ArrayLiteral", %"class.v8::internal::ArrayLiteral"* %0, i64 0, i32 1
  %8 = load i32, i32* %7, align 4
  %9 = icmp sgt i32 %8, -1
  br i1 %9, label %13, label %10

10:                                               ; preds = %6
  %11 = getelementptr inbounds %"class.v8::internal::ArrayLiteral", %"class.v8::internal::ArrayLiteral"* %0, i64 0, i32 3, i32 2
  %12 = load i32, i32* %11, align 4
  br label %13

13:                                               ; preds = %6, %10
  %14 = phi i32 [ %12, %10 ], [ %8, %6 ]
  %15 = getelementptr inbounds %"class.v8::internal::ArrayLiteral", %"class.v8::internal::ArrayLiteral"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %16 = load i32, i32* %15, align 4
  %17 = lshr i32 %16, 9
  %18 = trunc i32 %17 to i8
  %19 = and i8 %18, 7
  %20 = and i8 %18, 6
  %21 = icmp eq i8 %20, 4
  %22 = bitcast %"class.v8::internal::Isolate"* %1 to %"class.v8::internal::FactoryBase"*
  br i1 %21, label %23, label %25

23:                                               ; preds = %13
  %24 = tail call i64* @_ZN2v88internal11FactoryBaseINS0_7FactoryEE19NewFixedDoubleArrayEiNS0_14AllocationTypeE(%"class.v8::internal::FactoryBase"* %22, i32 %14, i8 zeroext 1) #11
  br label %27

25:                                               ; preds = %13
  %26 = tail call i64* @_ZN2v88internal11FactoryBaseINS0_7FactoryEE22NewFixedArrayWithHolesEiNS0_14AllocationTypeE(%"class.v8::internal::FactoryBase"* %22, i32 %14, i8 zeroext 1) #11
  br label %27

27:                                               ; preds = %25, %23
  %28 = phi i64* [ %24, %23 ], [ %26, %25 ]
  %29 = icmp sgt i32 %14, 0
  br i1 %29, label %30, label %216

30:                                               ; preds = %27
  %31 = getelementptr inbounds %"class.v8::internal::ArrayLiteral", %"class.v8::internal::ArrayLiteral"* %0, i64 0, i32 3, i32 0
  %32 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %1, i64 0, i32 31
  %33 = bitcast %"struct.v8::internal::HandleScopeData"* %32 to i64*
  %34 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %1, i64 0, i32 31, i32 1
  %35 = bitcast i64** %34 to i64*
  %36 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %1, i64 0, i32 31, i32 2
  %37 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %1, i64 0, i32 0, i32 7, i32 0, i64 3
  %38 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %1, i64 0, i32 0, i32 7, i32 0, i64 5
  %39 = icmp eq %"class.v8::internal::Isolate"* %1, null
  %40 = getelementptr inbounds %"struct.v8::internal::HandleScopeData", %"struct.v8::internal::HandleScopeData"* %32, i64 0, i32 0
  %41 = zext i32 %14 to i64
  br label %42

42:                                               ; preds = %213, %30
  %43 = phi i64 [ 0, %30 ], [ %214, %213 ]
  %44 = load %"class.v8::internal::Expression"**, %"class.v8::internal::Expression"*** %31, align 8
  %45 = getelementptr inbounds %"class.v8::internal::Expression"*, %"class.v8::internal::Expression"** %44, i64 %43
  %46 = load %"class.v8::internal::Expression"*, %"class.v8::internal::Expression"** %45, align 8
  %47 = getelementptr inbounds %"class.v8::internal::Expression", %"class.v8::internal::Expression"* %46, i64 0, i32 0, i32 1
  %48 = load i32, i32* %47, align 4
  br i1 %21, label %49, label %95

49:                                               ; preds = %42
  %50 = and i32 %48, 63
  %51 = icmp ne i32 %50, 41
  %52 = icmp eq %"class.v8::internal::Expression"* %46, null
  %53 = or i1 %52, %51
  br i1 %53, label %88, label %54

54:                                               ; preds = %49
  %55 = lshr i32 %48, 7
  %56 = and i32 %55, 15
  %57 = icmp eq i32 %56, 7
  br i1 %57, label %58, label %65

58:                                               ; preds = %54
  %59 = load i64, i64* %28, align 8
  %60 = shl i64 %43, 3
  %61 = and i64 %60, 4294967288
  %62 = or i64 %61, 7
  %63 = add i64 %59, %62
  %64 = inttoptr i64 %63 to i64*
  store i64 -2251799814209537, i64* %64, align 1
  br label %213

65:                                               ; preds = %54
  %66 = and i32 %48, 1792
  %67 = icmp eq i32 %66, 0
  br i1 %67, label %68, label %88

68:                                               ; preds = %65
  %69 = load i64, i64* %28, align 8
  switch i32 %56, label %78 [
    i32 0, label %70
    i32 1, label %74
  ]

70:                                               ; preds = %68
  %71 = getelementptr inbounds %"class.v8::internal::Expression", %"class.v8::internal::Expression"* %46, i64 1, i32 0, i32 0
  %72 = load i32, i32* %71, align 8
  %73 = sitofp i32 %72 to double
  br label %79

74:                                               ; preds = %68
  %75 = getelementptr inbounds %"class.v8::internal::Expression", %"class.v8::internal::Expression"* %46, i64 1
  %76 = bitcast %"class.v8::internal::Expression"* %75 to double*
  %77 = load double, double* %76, align 8
  br label %79

78:                                               ; preds = %68
  tail call void (i8*, ...) @_Z8V8_FatalPKcz(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str, i64 0, i64 0)) #12
  unreachable

79:                                               ; preds = %70, %74
  %80 = phi double [ %77, %74 ], [ %73, %70 ]
  %81 = shl i64 %43, 3
  %82 = fcmp uno double %80, 0.000000e+00
  %83 = and i64 %81, 4294967288
  %84 = or i64 %83, 7
  %85 = add i64 %69, %84
  %86 = inttoptr i64 %85 to double*
  %87 = select i1 %82, double 0x7FF8000000000000, double %80
  store double %87, double* %86, align 1
  br label %213

88:                                               ; preds = %49, %65
  %89 = load i64, i64* %28, align 8
  %90 = shl i64 %43, 3
  %91 = and i64 %90, 4294967288
  %92 = or i64 %91, 7
  %93 = add i64 %89, %92
  %94 = inttoptr i64 %93 to double*
  store double 0.000000e+00, double* %94, align 1
  br label %213

95:                                               ; preds = %42
  %96 = trunc i32 %48 to i8
  %97 = and i8 %96, 63
  %98 = add nsw i8 %97, -22
  %99 = icmp ugt i8 %98, 2
  %100 = icmp eq %"class.v8::internal::Expression"* %46, null
  %101 = or i1 %100, %99
  br i1 %101, label %108, label %102

102:                                              ; preds = %95
  %103 = and i32 %48, 63
  switch i32 %103, label %108 [
    i32 24, label %104
    i32 23, label %106
  ]

104:                                              ; preds = %102
  %105 = bitcast %"class.v8::internal::Expression"* %46 to %"class.v8::internal::ArrayLiteral"*
  tail call void @_ZN2v88internal12ArrayLiteral27BuildBoilerplateDescriptionINS0_7IsolateEEEvPT_(%"class.v8::internal::ArrayLiteral"* nonnull %105, %"class.v8::internal::Isolate"* %1) #11
  br label %108

106:                                              ; preds = %102
  %107 = bitcast %"class.v8::internal::Expression"* %46 to %"class.v8::internal::ObjectLiteral"*
  tail call void @_ZN2v88internal13ObjectLiteral27BuildBoilerplateDescriptionINS0_7IsolateEEEvPT_(%"class.v8::internal::ObjectLiteral"* nonnull %107, %"class.v8::internal::Isolate"* %1) #11
  br label %108

108:                                              ; preds = %95, %102, %106, %104
  %109 = load i64, i64* %33, align 8
  %110 = load i64, i64* %35, align 8
  %111 = load i32, i32* %36, align 8
  %112 = add nsw i32 %111, 1
  store i32 %112, i32* %36, align 8
  %113 = load i32, i32* %47, align 4
  %114 = and i32 %113, 63
  %115 = icmp eq i32 %114, 41
  br i1 %115, label %116, label %119

116:                                              ; preds = %108
  %117 = bitcast %"class.v8::internal::Expression"* %46 to %"class.v8::internal::Literal"*
  %118 = tail call i64* @_ZNK2v88internal7Literal10BuildValueINS0_7IsolateEEENS0_6HandleINS0_6ObjectEEEPT_(%"class.v8::internal::Literal"* %117, %"class.v8::internal::Isolate"* %1) #11
  br label %140

119:                                              ; preds = %108
  %120 = trunc i32 %113 to i8
  %121 = and i8 %120, 63
  %122 = add nsw i8 %121, -22
  %123 = icmp ugt i8 %122, 2
  %124 = or i1 %100, %123
  br i1 %124, label %140, label %125

125:                                              ; preds = %119
  switch i32 %114, label %140 [
    i32 24, label %126
    i32 23, label %129
  ]

126:                                              ; preds = %125
  %127 = and i32 %113, 256
  %128 = icmp eq i32 %127, 0
  br i1 %128, label %140, label %136

129:                                              ; preds = %125
  %130 = and i32 %113, 256
  %131 = icmp eq i32 %130, 0
  br i1 %131, label %140, label %132

132:                                              ; preds = %129
  %133 = getelementptr inbounds %"class.v8::internal::Expression", %"class.v8::internal::Expression"* %46, i64 2
  %134 = bitcast %"class.v8::internal::Expression"* %133 to i64**
  %135 = load i64*, i64** %134, align 8
  br label %140

136:                                              ; preds = %126
  %137 = getelementptr inbounds %"class.v8::internal::Expression", %"class.v8::internal::Expression"* %46, i64 2
  %138 = bitcast %"class.v8::internal::Expression"* %137 to i64**
  %139 = load i64*, i64** %138, align 8
  br label %140

140:                                              ; preds = %119, %125, %126, %129, %116, %132, %136
  %141 = phi i64* [ %118, %116 ], [ %135, %132 ], [ %139, %136 ], [ %37, %129 ], [ %37, %126 ], [ %37, %125 ], [ %37, %119 ]
  %142 = load i64, i64* %141, align 8
  %143 = load i64, i64* %38, align 8
  %144 = trunc i64 %142 to i32
  %145 = trunc i64 %143 to i32
  %146 = icmp eq i32 %144, %145
  br i1 %146, label %199, label %147

147:                                              ; preds = %140
  %148 = load i64, i64* %37, align 8
  %149 = trunc i64 %148 to i32
  %150 = icmp eq i32 %144, %149
  %151 = select i1 %150, i64 0, i64 %142
  %152 = load i64, i64* %28, align 8
  %153 = trunc i64 %43 to i32
  %154 = shl i32 %153, 2
  %155 = sext i32 %154 to i64
  %156 = add nsw i64 %155, 7
  %157 = add i64 %156, %152
  %158 = inttoptr i64 %157 to i32*
  %159 = trunc i64 %151 to i32
  store atomic volatile i32 %159, i32* %158 monotonic, align 4
  %160 = and i64 %151, 1
  %161 = icmp eq i64 %160, 0
  br i1 %161, label %185, label %162

162:                                              ; preds = %147
  %163 = and i64 %152, -262144
  %164 = or i64 %163, 8
  %165 = inttoptr i64 %164 to i64*
  %166 = load i64, i64* %165, align 8
  %167 = and i64 %166, 262144
  %168 = icmp eq i64 %167, 0
  br i1 %168, label %173, label %169

169:                                              ; preds = %162
  %170 = or i64 %163, 16
  %171 = inttoptr i64 %170 to %"class.v8::internal::Heap"**
  %172 = load %"class.v8::internal::Heap"*, %"class.v8::internal::Heap"** %171, align 16
  tail call void @_ZN2v88internal12WriteBarrier11MarkingSlowEPNS0_4HeapENS0_10HeapObjectENS0_24CompressedHeapObjectSlotES4_(%"class.v8::internal::Heap"* %172, i64 %152, i64 %157, i64 %151) #11
  br label %173

173:                                              ; preds = %169, %162
  %174 = and i64 %151, -262144
  %175 = or i64 %174, 8
  %176 = inttoptr i64 %175 to i64*
  %177 = load i64, i64* %176, align 8
  %178 = and i64 %177, 24
  %179 = icmp eq i64 %178, 0
  br i1 %179, label %185, label %180

180:                                              ; preds = %173
  %181 = load i64, i64* %165, align 8
  %182 = and i64 %181, 24
  %183 = icmp eq i64 %182, 0
  br i1 %183, label %184, label %185

184:                                              ; preds = %180
  tail call void @_ZN2v88internal28Heap_GenerationalBarrierSlowENS0_10HeapObjectEmS1_(i64 %152, i64 %157, i64 %151) #11
  br label %185

185:                                              ; preds = %147, %173, %180, %184
  br i1 %39, label %213, label %186

186:                                              ; preds = %185
  %187 = inttoptr i64 %109 to i64*
  %188 = inttoptr i64 %110 to i64*
  %189 = load i64*, i64** %40, align 8
  store i64 %109, i64* %33, align 8
  %190 = load i32, i32* %36, align 8
  %191 = add nsw i32 %190, -1
  store i32 %191, i32* %36, align 8
  %192 = load i64*, i64** %34, align 8
  %193 = icmp eq i64* %192, %188
  br i1 %193, label %196, label %194

194:                                              ; preds = %186
  store i64* %188, i64** %34, align 8
  tail call void @_ZN2v88internal11HandleScope16DeleteExtensionsEPNS0_7IsolateE(%"class.v8::internal::Isolate"* nonnull %1) #11
  %195 = load i64*, i64** %40, align 8
  br label %196

196:                                              ; preds = %194, %186
  %197 = phi i64* [ %195, %194 ], [ %187, %186 ]
  %198 = phi i64* [ %188, %194 ], [ %189, %186 ]
  tail call void @_ZN2v88internal11HandleScope8ZapRangeEPmS2_(i64* %197, i64* %198) #11
  br label %213

199:                                              ; preds = %140
  br i1 %39, label %213, label %200

200:                                              ; preds = %199
  %201 = inttoptr i64 %109 to i64*
  %202 = inttoptr i64 %110 to i64*
  %203 = load i64*, i64** %40, align 8
  store i64 %109, i64* %33, align 8
  %204 = load i32, i32* %36, align 8
  %205 = add nsw i32 %204, -1
  store i32 %205, i32* %36, align 8
  %206 = load i64*, i64** %34, align 8
  %207 = icmp eq i64* %206, %202
  br i1 %207, label %210, label %208

208:                                              ; preds = %200
  store i64* %202, i64** %34, align 8
  tail call void @_ZN2v88internal11HandleScope16DeleteExtensionsEPNS0_7IsolateE(%"class.v8::internal::Isolate"* nonnull %1) #11
  %209 = load i64*, i64** %40, align 8
  br label %210

210:                                              ; preds = %208, %200
  %211 = phi i64* [ %209, %208 ], [ %201, %200 ]
  %212 = phi i64* [ %202, %208 ], [ %203, %200 ]
  tail call void @_ZN2v88internal11HandleScope8ZapRangeEPmS2_(i64* %211, i64* %212) #11
  br label %213

213:                                              ; preds = %210, %199, %196, %185, %88, %79, %58
  %214 = add nuw nsw i64 %43, 1
  %215 = icmp eq i64 %214, %41
  br i1 %215, label %216, label %42

216:                                              ; preds = %213, %27
  %217 = phi i32 [ 0, %27 ], [ 1, %213 ]
  %218 = load i32, i32* %15, align 4
  %219 = and i32 %218, 256
  %220 = icmp eq i32 %219, 0
  br i1 %220, label %252, label %221

221:                                              ; preds = %216
  %222 = getelementptr inbounds %"class.v8::internal::ArrayLiteral", %"class.v8::internal::ArrayLiteral"* %0, i64 0, i32 0, i32 1
  %223 = load i32, i32* %222, align 4
  %224 = and i32 %223, 2147483647
  %225 = icmp eq i32 %224, 1
  %226 = icmp ne i32 %217, 0
  %227 = and i1 %226, %225
  %228 = icmp ult i8 %19, 4
  %229 = and i1 %228, %227
  br i1 %229, label %230, label %252

230:                                              ; preds = %221
  %231 = load i64, i64* %28, align 8
  %232 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %1, i64 0, i32 0, i32 7, i32 0, i64 13
  %233 = load i64, i64* %232, align 8
  %234 = add i64 %231, -1
  %235 = inttoptr i64 %234 to i32*
  %236 = trunc i64 %233 to i32
  store atomic volatile i32 %236, i32* %235 monotonic, align 4
  %237 = icmp eq i32 %236, 0
  %238 = and i64 %233, 1
  %239 = icmp eq i64 %238, 0
  %240 = or i1 %237, %239
  br i1 %240, label %252, label %241

241:                                              ; preds = %230
  %242 = and i64 %231, -262144
  %243 = or i64 %242, 8
  %244 = inttoptr i64 %243 to i64*
  %245 = load i64, i64* %244, align 8
  %246 = and i64 %245, 262144
  %247 = icmp eq i64 %246, 0
  br i1 %247, label %252, label %248

248:                                              ; preds = %241
  %249 = or i64 %242, 16
  %250 = inttoptr i64 %249 to %"class.v8::internal::Heap"**
  %251 = load %"class.v8::internal::Heap"*, %"class.v8::internal::Heap"** %250, align 16
  tail call void @_ZN2v88internal12WriteBarrier11MarkingSlowEPNS0_4HeapENS0_10HeapObjectENS0_24CompressedHeapObjectSlotES4_(%"class.v8::internal::Heap"* %251, i64 %231, i64 0, i64 %233) #11
  br label %252

252:                                              ; preds = %216, %248, %241, %230, %221
  %253 = tail call i64* @_ZN2v88internal11FactoryBaseINS0_7FactoryEE30NewArrayBoilerplateDescriptionENS0_12ElementsKindENS0_6HandleINS0_14FixedArrayBaseEEE(%"class.v8::internal::FactoryBase"* %22, i8 zeroext %19, i64* %28) #11
  store i64* %253, i64** %3, align 8
  br label %254

254:                                              ; preds = %2, %252
  ret void
}

declare i64* @_ZN2v88internal11FactoryBaseINS0_7FactoryEE19NewFixedDoubleArrayEiNS0_14AllocationTypeE(%"class.v8::internal::FactoryBase"*, i32, i8 zeroext) local_unnamed_addr #2

declare i64* @_ZN2v88internal11FactoryBaseINS0_7FactoryEE22NewFixedArrayWithHolesEiNS0_14AllocationTypeE(%"class.v8::internal::FactoryBase"*, i32, i8 zeroext) local_unnamed_addr #2

declare i64* @_ZN2v88internal11FactoryBaseINS0_7FactoryEE30NewArrayBoilerplateDescriptionENS0_12ElementsKindENS0_6HandleINS0_14FixedArrayBaseEEE(%"class.v8::internal::FactoryBase"*, i8 zeroext, i64*) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define weak_odr hidden void @_ZN2v88internal12ArrayLiteral27BuildBoilerplateDescriptionINS0_12LocalIsolateEEEvPT_(%"class.v8::internal::ArrayLiteral"*, %"class.v8::internal::LocalIsolate"*) local_unnamed_addr #0 comdat align 2 {
  %3 = alloca %"class.v8::internal::LocalHandleScope", align 8
  %4 = getelementptr inbounds %"class.v8::internal::ArrayLiteral", %"class.v8::internal::ArrayLiteral"* %0, i64 0, i32 2, i32 0, i32 0
  %5 = load i64*, i64** %4, align 8
  %6 = icmp eq i64* %5, null
  br i1 %6, label %7, label %296

7:                                                ; preds = %2
  %8 = getelementptr inbounds %"class.v8::internal::ArrayLiteral", %"class.v8::internal::ArrayLiteral"* %0, i64 0, i32 1
  %9 = load i32, i32* %8, align 4
  %10 = icmp sgt i32 %9, -1
  br i1 %10, label %14, label %11

11:                                               ; preds = %7
  %12 = getelementptr inbounds %"class.v8::internal::ArrayLiteral", %"class.v8::internal::ArrayLiteral"* %0, i64 0, i32 3, i32 2
  %13 = load i32, i32* %12, align 4
  br label %14

14:                                               ; preds = %7, %11
  %15 = phi i32 [ %13, %11 ], [ %9, %7 ]
  %16 = getelementptr inbounds %"class.v8::internal::ArrayLiteral", %"class.v8::internal::ArrayLiteral"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %17 = load i32, i32* %16, align 4
  %18 = lshr i32 %17, 9
  %19 = trunc i32 %18 to i8
  %20 = and i8 %19, 7
  %21 = and i8 %19, 6
  %22 = icmp eq i8 %21, 4
  %23 = bitcast %"class.v8::internal::LocalIsolate"* %1 to %"class.v8::internal::FactoryBase.1058"*
  br i1 %22, label %24, label %26

24:                                               ; preds = %14
  %25 = tail call i64* @_ZN2v88internal11FactoryBaseINS0_12LocalFactoryEE19NewFixedDoubleArrayEiNS0_14AllocationTypeE(%"class.v8::internal::FactoryBase.1058"* %23, i32 %15, i8 zeroext 1) #11
  br label %28

26:                                               ; preds = %14
  %27 = tail call i64* @_ZN2v88internal11FactoryBaseINS0_12LocalFactoryEE22NewFixedArrayWithHolesEiNS0_14AllocationTypeE(%"class.v8::internal::FactoryBase.1058"* %23, i32 %15, i8 zeroext 1) #11
  br label %28

28:                                               ; preds = %26, %24
  %29 = phi i64* [ %25, %24 ], [ %27, %26 ]
  %30 = icmp sgt i32 %15, 0
  br i1 %30, label %31, label %256

31:                                               ; preds = %28
  %32 = getelementptr inbounds %"class.v8::internal::ArrayLiteral", %"class.v8::internal::ArrayLiteral"* %0, i64 0, i32 3, i32 0
  %33 = bitcast %"class.v8::internal::LocalHandleScope"* %3 to i8*
  %34 = getelementptr inbounds %"class.v8::internal::LocalIsolate", %"class.v8::internal::LocalIsolate"* %1, i64 0, i32 1
  %35 = getelementptr inbounds %"class.v8::internal::LocalIsolate", %"class.v8::internal::LocalIsolate"* %1, i64 0, i32 1, i32 1
  %36 = getelementptr inbounds %"class.v8::internal::LocalIsolate", %"class.v8::internal::LocalIsolate"* %1, i64 0, i32 1, i32 7, i32 0, i32 0, i32 0
  %37 = getelementptr inbounds %"class.v8::internal::LocalHandleScope", %"class.v8::internal::LocalHandleScope"* %3, i64 0, i32 0
  %38 = getelementptr inbounds %"class.v8::internal::LocalHandleScope", %"class.v8::internal::LocalHandleScope"* %3, i64 0, i32 2
  %39 = bitcast i64** %38 to i64*
  %40 = getelementptr inbounds %"class.v8::internal::LocalHandleScope", %"class.v8::internal::LocalHandleScope"* %3, i64 0, i32 1
  %41 = bitcast i64** %40 to i64*
  %42 = getelementptr inbounds %"class.v8::internal::LocalIsolate", %"class.v8::internal::LocalIsolate"* %1, i64 0, i32 0, i32 0, i32 0, i32 0
  %43 = zext i32 %15 to i64
  br label %44

44:                                               ; preds = %253, %31
  %45 = phi i64 [ 0, %31 ], [ %254, %253 ]
  %46 = load %"class.v8::internal::Expression"**, %"class.v8::internal::Expression"*** %32, align 8
  %47 = getelementptr inbounds %"class.v8::internal::Expression"*, %"class.v8::internal::Expression"** %46, i64 %45
  %48 = load %"class.v8::internal::Expression"*, %"class.v8::internal::Expression"** %47, align 8
  %49 = getelementptr inbounds %"class.v8::internal::Expression", %"class.v8::internal::Expression"* %48, i64 0, i32 0, i32 1
  %50 = load i32, i32* %49, align 4
  br i1 %22, label %51, label %97

51:                                               ; preds = %44
  %52 = and i32 %50, 63
  %53 = icmp ne i32 %52, 41
  %54 = icmp eq %"class.v8::internal::Expression"* %48, null
  %55 = or i1 %54, %53
  br i1 %55, label %90, label %56

56:                                               ; preds = %51
  %57 = lshr i32 %50, 7
  %58 = and i32 %57, 15
  %59 = icmp eq i32 %58, 7
  br i1 %59, label %60, label %67

60:                                               ; preds = %56
  %61 = load i64, i64* %29, align 8
  %62 = shl i64 %45, 3
  %63 = and i64 %62, 4294967288
  %64 = or i64 %63, 7
  %65 = add i64 %61, %64
  %66 = inttoptr i64 %65 to i64*
  store i64 -2251799814209537, i64* %66, align 1
  br label %253

67:                                               ; preds = %56
  %68 = and i32 %50, 1792
  %69 = icmp eq i32 %68, 0
  br i1 %69, label %70, label %90

70:                                               ; preds = %67
  %71 = load i64, i64* %29, align 8
  switch i32 %58, label %80 [
    i32 0, label %72
    i32 1, label %76
  ]

72:                                               ; preds = %70
  %73 = getelementptr inbounds %"class.v8::internal::Expression", %"class.v8::internal::Expression"* %48, i64 1, i32 0, i32 0
  %74 = load i32, i32* %73, align 8
  %75 = sitofp i32 %74 to double
  br label %81

76:                                               ; preds = %70
  %77 = getelementptr inbounds %"class.v8::internal::Expression", %"class.v8::internal::Expression"* %48, i64 1
  %78 = bitcast %"class.v8::internal::Expression"* %77 to double*
  %79 = load double, double* %78, align 8
  br label %81

80:                                               ; preds = %70
  call void (i8*, ...) @_Z8V8_FatalPKcz(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str, i64 0, i64 0)) #12
  unreachable

81:                                               ; preds = %72, %76
  %82 = phi double [ %79, %76 ], [ %75, %72 ]
  %83 = shl i64 %45, 3
  %84 = fcmp uno double %82, 0.000000e+00
  %85 = and i64 %83, 4294967288
  %86 = or i64 %85, 7
  %87 = add i64 %71, %86
  %88 = inttoptr i64 %87 to double*
  %89 = select i1 %84, double 0x7FF8000000000000, double %82
  store double %89, double* %88, align 1
  br label %253

90:                                               ; preds = %51, %67
  %91 = load i64, i64* %29, align 8
  %92 = shl i64 %45, 3
  %93 = and i64 %92, 4294967288
  %94 = or i64 %93, 7
  %95 = add i64 %91, %94
  %96 = inttoptr i64 %95 to double*
  store double 0.000000e+00, double* %96, align 1
  br label %253

97:                                               ; preds = %44
  %98 = trunc i32 %50 to i8
  %99 = and i8 %98, 63
  %100 = add nsw i8 %99, -22
  %101 = icmp ugt i8 %100, 2
  %102 = icmp eq %"class.v8::internal::Expression"* %48, null
  %103 = or i1 %102, %101
  br i1 %103, label %110, label %104

104:                                              ; preds = %97
  %105 = and i32 %50, 63
  switch i32 %105, label %110 [
    i32 24, label %106
    i32 23, label %108
  ]

106:                                              ; preds = %104
  %107 = bitcast %"class.v8::internal::Expression"* %48 to %"class.v8::internal::ArrayLiteral"*
  call void @_ZN2v88internal12ArrayLiteral27BuildBoilerplateDescriptionINS0_12LocalIsolateEEEvPT_(%"class.v8::internal::ArrayLiteral"* nonnull %107, %"class.v8::internal::LocalIsolate"* %1) #11
  br label %110

108:                                              ; preds = %104
  %109 = bitcast %"class.v8::internal::Expression"* %48 to %"class.v8::internal::ObjectLiteral"*
  call void @_ZN2v88internal13ObjectLiteral27BuildBoilerplateDescriptionINS0_12LocalIsolateEEEvPT_(%"class.v8::internal::ObjectLiteral"* nonnull %109, %"class.v8::internal::LocalIsolate"* %1) #11
  br label %110

110:                                              ; preds = %97, %104, %108, %106
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %33) #11
  %111 = load i8, i8* %35, align 8, !range !2
  %112 = icmp eq i8 %111, 0
  br i1 %112, label %114, label %113

113:                                              ; preds = %110
  call void @_ZN2v88internal16LocalHandleScope19OpenMainThreadScopeEPNS0_9LocalHeapE(%"class.v8::internal::LocalHandleScope"* nonnull %3, %"class.v8::internal::LocalHeap"* %34) #11
  br label %124

114:                                              ; preds = %110
  %115 = load %"class.v8::internal::LocalHandles"*, %"class.v8::internal::LocalHandles"** %36, align 8
  store %"class.v8::internal::LocalHeap"* %34, %"class.v8::internal::LocalHeap"** %37, align 8
  %116 = bitcast %"class.v8::internal::LocalHandles"* %115 to i64*
  %117 = load i64, i64* %116, align 8
  store i64 %117, i64* %39, align 8
  %118 = getelementptr inbounds %"class.v8::internal::LocalHandles", %"class.v8::internal::LocalHandles"* %115, i64 0, i32 0, i32 1
  %119 = bitcast i64** %118 to i64*
  %120 = load i64, i64* %119, align 8
  store i64 %120, i64* %41, align 8
  %121 = getelementptr inbounds %"class.v8::internal::LocalHandles", %"class.v8::internal::LocalHandles"* %115, i64 0, i32 0, i32 2
  %122 = load i32, i32* %121, align 8
  %123 = add nsw i32 %122, 1
  store i32 %123, i32* %121, align 8
  br label %124

124:                                              ; preds = %113, %114
  %125 = load i32, i32* %49, align 4
  %126 = and i32 %125, 63
  %127 = icmp eq i32 %126, 41
  br i1 %127, label %128, label %131

128:                                              ; preds = %124
  %129 = bitcast %"class.v8::internal::Expression"* %48 to %"class.v8::internal::Literal"*
  %130 = call i64* @_ZNK2v88internal7Literal10BuildValueINS0_12LocalIsolateEEENS0_6HandleINS0_6ObjectEEEPT_(%"class.v8::internal::Literal"* %129, %"class.v8::internal::LocalIsolate"* %1) #11
  br label %155

131:                                              ; preds = %124
  %132 = trunc i32 %125 to i8
  %133 = and i8 %132, 63
  %134 = add nsw i8 %133, -22
  %135 = icmp ugt i8 %134, 2
  %136 = or i1 %102, %135
  br i1 %136, label %152, label %137

137:                                              ; preds = %131
  switch i32 %126, label %152 [
    i32 24, label %138
    i32 23, label %141
  ]

138:                                              ; preds = %137
  %139 = and i32 %125, 256
  %140 = icmp eq i32 %139, 0
  br i1 %140, label %152, label %148

141:                                              ; preds = %137
  %142 = and i32 %125, 256
  %143 = icmp eq i32 %142, 0
  br i1 %143, label %152, label %144

144:                                              ; preds = %141
  %145 = getelementptr inbounds %"class.v8::internal::Expression", %"class.v8::internal::Expression"* %48, i64 2
  %146 = bitcast %"class.v8::internal::Expression"* %145 to i64**
  %147 = load i64*, i64** %146, align 8
  br label %155

148:                                              ; preds = %138
  %149 = getelementptr inbounds %"class.v8::internal::Expression", %"class.v8::internal::Expression"* %48, i64 2
  %150 = bitcast %"class.v8::internal::Expression"* %149 to i64**
  %151 = load i64*, i64** %150, align 8
  br label %155

152:                                              ; preds = %141, %138, %137, %131
  %153 = load i64*, i64** %42, align 8
  %154 = getelementptr inbounds i64, i64* %153, i64 3
  br label %155

155:                                              ; preds = %128, %144, %148, %152
  %156 = phi i64* [ %130, %128 ], [ %147, %144 ], [ %151, %148 ], [ %154, %152 ]
  %157 = load i64, i64* %156, align 8
  %158 = load i64*, i64** %42, align 8
  %159 = getelementptr inbounds i64, i64* %158, i64 5
  %160 = load i64, i64* %159, align 8
  %161 = trunc i64 %157 to i32
  %162 = trunc i64 %160 to i32
  %163 = icmp eq i32 %161, %162
  br i1 %163, label %228, label %164

164:                                              ; preds = %155
  %165 = getelementptr inbounds i64, i64* %158, i64 3
  %166 = load i64, i64* %165, align 8
  %167 = trunc i64 %166 to i32
  %168 = icmp eq i32 %161, %167
  %169 = select i1 %168, i64 0, i64 %157
  %170 = load i64, i64* %29, align 8
  %171 = trunc i64 %45 to i32
  %172 = shl i32 %171, 2
  %173 = sext i32 %172 to i64
  %174 = add nsw i64 %173, 7
  %175 = add i64 %174, %170
  %176 = inttoptr i64 %175 to i32*
  %177 = trunc i64 %169 to i32
  store atomic volatile i32 %177, i32* %176 monotonic, align 4
  %178 = and i64 %169, 1
  %179 = icmp eq i64 %178, 0
  br i1 %179, label %203, label %180

180:                                              ; preds = %164
  %181 = and i64 %170, -262144
  %182 = or i64 %181, 8
  %183 = inttoptr i64 %182 to i64*
  %184 = load i64, i64* %183, align 8
  %185 = and i64 %184, 262144
  %186 = icmp eq i64 %185, 0
  br i1 %186, label %191, label %187

187:                                              ; preds = %180
  %188 = or i64 %181, 16
  %189 = inttoptr i64 %188 to %"class.v8::internal::Heap"**
  %190 = load %"class.v8::internal::Heap"*, %"class.v8::internal::Heap"** %189, align 16
  call void @_ZN2v88internal12WriteBarrier11MarkingSlowEPNS0_4HeapENS0_10HeapObjectENS0_24CompressedHeapObjectSlotES4_(%"class.v8::internal::Heap"* %190, i64 %170, i64 %175, i64 %169) #11
  br label %191

191:                                              ; preds = %187, %180
  %192 = and i64 %169, -262144
  %193 = or i64 %192, 8
  %194 = inttoptr i64 %193 to i64*
  %195 = load i64, i64* %194, align 8
  %196 = and i64 %195, 24
  %197 = icmp eq i64 %196, 0
  br i1 %197, label %203, label %198

198:                                              ; preds = %191
  %199 = load i64, i64* %183, align 8
  %200 = and i64 %199, 24
  %201 = icmp eq i64 %200, 0
  br i1 %201, label %202, label %203

202:                                              ; preds = %198
  call void @_ZN2v88internal28Heap_GenerationalBarrierSlowENS0_10HeapObjectEmS1_(i64 %170, i64 %175, i64 %169) #11
  br label %203

203:                                              ; preds = %164, %191, %198, %202
  %204 = load %"class.v8::internal::LocalHeap"*, %"class.v8::internal::LocalHeap"** %37, align 8
  %205 = getelementptr inbounds %"class.v8::internal::LocalHeap", %"class.v8::internal::LocalHeap"* %204, i64 0, i32 1
  %206 = load i8, i8* %205, align 8, !range !2
  %207 = icmp eq i8 %206, 0
  %208 = load i64*, i64** %38, align 8
  %209 = load i64*, i64** %40, align 8
  br i1 %207, label %211, label %210

210:                                              ; preds = %203
  call void @_ZN2v88internal16LocalHandleScope20CloseMainThreadScopeEPNS0_9LocalHeapEPmS4_(%"class.v8::internal::LocalHeap"* %204, i64* %208, i64* %209) #11
  br label %227

211:                                              ; preds = %203
  %212 = getelementptr inbounds %"class.v8::internal::LocalHeap", %"class.v8::internal::LocalHeap"* %204, i64 0, i32 7, i32 0, i32 0, i32 0
  %213 = load %"class.v8::internal::LocalHandles"*, %"class.v8::internal::LocalHandles"** %212, align 8
  %214 = getelementptr inbounds %"class.v8::internal::LocalHandles", %"class.v8::internal::LocalHandles"* %213, i64 0, i32 0, i32 1
  %215 = load i64*, i64** %214, align 8
  %216 = getelementptr inbounds %"class.v8::internal::LocalHandles", %"class.v8::internal::LocalHandles"* %213, i64 0, i32 0, i32 0
  store i64* %208, i64** %216, align 8
  store i64* %209, i64** %214, align 8
  %217 = getelementptr inbounds %"class.v8::internal::LocalHandles", %"class.v8::internal::LocalHandles"* %213, i64 0, i32 0, i32 2
  %218 = load i32, i32* %217, align 8
  %219 = add nsw i32 %218, -1
  store i32 %219, i32* %217, align 8
  %220 = icmp eq i64* %215, %209
  br i1 %220, label %224, label %221

221:                                              ; preds = %211
  call void @_ZN2v88internal12LocalHandles18RemoveUnusedBlocksEv(%"class.v8::internal::LocalHandles"* %213) #11
  %222 = load i64*, i64** %214, align 8
  %223 = load i64*, i64** %216, align 8
  br label %224

224:                                              ; preds = %221, %211
  %225 = phi i64* [ %223, %221 ], [ %208, %211 ]
  %226 = phi i64* [ %222, %221 ], [ %209, %211 ]
  call void @_ZN2v88internal12LocalHandles8ZapRangeEPmS2_(i64* %225, i64* %226) #11
  br label %227

227:                                              ; preds = %210, %224
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %33) #11
  br label %253

228:                                              ; preds = %155
  %229 = load %"class.v8::internal::LocalHeap"*, %"class.v8::internal::LocalHeap"** %37, align 8
  %230 = getelementptr inbounds %"class.v8::internal::LocalHeap", %"class.v8::internal::LocalHeap"* %229, i64 0, i32 1
  %231 = load i8, i8* %230, align 8, !range !2
  %232 = icmp eq i8 %231, 0
  %233 = load i64*, i64** %38, align 8
  %234 = load i64*, i64** %40, align 8
  br i1 %232, label %236, label %235

235:                                              ; preds = %228
  call void @_ZN2v88internal16LocalHandleScope20CloseMainThreadScopeEPNS0_9LocalHeapEPmS4_(%"class.v8::internal::LocalHeap"* %229, i64* %233, i64* %234) #11
  br label %252

236:                                              ; preds = %228
  %237 = getelementptr inbounds %"class.v8::internal::LocalHeap", %"class.v8::internal::LocalHeap"* %229, i64 0, i32 7, i32 0, i32 0, i32 0
  %238 = load %"class.v8::internal::LocalHandles"*, %"class.v8::internal::LocalHandles"** %237, align 8
  %239 = getelementptr inbounds %"class.v8::internal::LocalHandles", %"class.v8::internal::LocalHandles"* %238, i64 0, i32 0, i32 1
  %240 = load i64*, i64** %239, align 8
  %241 = getelementptr inbounds %"class.v8::internal::LocalHandles", %"class.v8::internal::LocalHandles"* %238, i64 0, i32 0, i32 0
  store i64* %233, i64** %241, align 8
  store i64* %234, i64** %239, align 8
  %242 = getelementptr inbounds %"class.v8::internal::LocalHandles", %"class.v8::internal::LocalHandles"* %238, i64 0, i32 0, i32 2
  %243 = load i32, i32* %242, align 8
  %244 = add nsw i32 %243, -1
  store i32 %244, i32* %242, align 8
  %245 = icmp eq i64* %240, %234
  br i1 %245, label %249, label %246

246:                                              ; preds = %236
  call void @_ZN2v88internal12LocalHandles18RemoveUnusedBlocksEv(%"class.v8::internal::LocalHandles"* %238) #11
  %247 = load i64*, i64** %239, align 8
  %248 = load i64*, i64** %241, align 8
  br label %249

249:                                              ; preds = %246, %236
  %250 = phi i64* [ %248, %246 ], [ %233, %236 ]
  %251 = phi i64* [ %247, %246 ], [ %234, %236 ]
  call void @_ZN2v88internal12LocalHandles8ZapRangeEPmS2_(i64* %250, i64* %251) #11
  br label %252

252:                                              ; preds = %235, %249
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %33) #11
  br label %253

253:                                              ; preds = %90, %81, %227, %252, %60
  %254 = add nuw nsw i64 %45, 1
  %255 = icmp eq i64 %254, %43
  br i1 %255, label %256, label %44

256:                                              ; preds = %253, %28
  %257 = phi i32 [ 0, %28 ], [ 1, %253 ]
  %258 = load i32, i32* %16, align 4
  %259 = and i32 %258, 256
  %260 = icmp eq i32 %259, 0
  br i1 %260, label %294, label %261

261:                                              ; preds = %256
  %262 = getelementptr inbounds %"class.v8::internal::ArrayLiteral", %"class.v8::internal::ArrayLiteral"* %0, i64 0, i32 0, i32 1
  %263 = load i32, i32* %262, align 4
  %264 = and i32 %263, 2147483647
  %265 = icmp eq i32 %264, 1
  %266 = icmp ne i32 %257, 0
  %267 = and i1 %266, %265
  %268 = icmp ult i8 %20, 4
  %269 = and i1 %268, %267
  br i1 %269, label %270, label %294

270:                                              ; preds = %261
  %271 = load i64, i64* %29, align 8
  %272 = getelementptr inbounds %"class.v8::internal::LocalIsolate", %"class.v8::internal::LocalIsolate"* %1, i64 0, i32 0, i32 0, i32 0, i32 0
  %273 = load i64*, i64** %272, align 8
  %274 = getelementptr inbounds i64, i64* %273, i64 13
  %275 = load i64, i64* %274, align 8
  %276 = add i64 %271, -1
  %277 = inttoptr i64 %276 to i32*
  %278 = trunc i64 %275 to i32
  store atomic volatile i32 %278, i32* %277 monotonic, align 4
  %279 = icmp eq i32 %278, 0
  %280 = and i64 %275, 1
  %281 = icmp eq i64 %280, 0
  %282 = or i1 %279, %281
  br i1 %282, label %294, label %283

283:                                              ; preds = %270
  %284 = and i64 %271, -262144
  %285 = or i64 %284, 8
  %286 = inttoptr i64 %285 to i64*
  %287 = load i64, i64* %286, align 8
  %288 = and i64 %287, 262144
  %289 = icmp eq i64 %288, 0
  br i1 %289, label %294, label %290

290:                                              ; preds = %283
  %291 = or i64 %284, 16
  %292 = inttoptr i64 %291 to %"class.v8::internal::Heap"**
  %293 = load %"class.v8::internal::Heap"*, %"class.v8::internal::Heap"** %292, align 16
  call void @_ZN2v88internal12WriteBarrier11MarkingSlowEPNS0_4HeapENS0_10HeapObjectENS0_24CompressedHeapObjectSlotES4_(%"class.v8::internal::Heap"* %293, i64 %271, i64 0, i64 %275) #11
  br label %294

294:                                              ; preds = %256, %290, %283, %270, %261
  %295 = call i64* @_ZN2v88internal11FactoryBaseINS0_12LocalFactoryEE30NewArrayBoilerplateDescriptionENS0_12ElementsKindENS0_6HandleINS0_14FixedArrayBaseEEE(%"class.v8::internal::FactoryBase.1058"* %23, i8 zeroext %20, i64* %29) #11
  store i64* %295, i64** %4, align 8
  br label %296

296:                                              ; preds = %2, %294
  ret void
}

declare i64* @_ZN2v88internal11FactoryBaseINS0_12LocalFactoryEE19NewFixedDoubleArrayEiNS0_14AllocationTypeE(%"class.v8::internal::FactoryBase.1058"*, i32, i8 zeroext) local_unnamed_addr #2

declare i64* @_ZN2v88internal11FactoryBaseINS0_12LocalFactoryEE22NewFixedArrayWithHolesEiNS0_14AllocationTypeE(%"class.v8::internal::FactoryBase.1058"*, i32, i8 zeroext) local_unnamed_addr #2

declare i64* @_ZN2v88internal11FactoryBaseINS0_12LocalFactoryEE30NewArrayBoilerplateDescriptionENS0_12ElementsKindENS0_6HandleINS0_14FixedArrayBaseEEE(%"class.v8::internal::FactoryBase.1058"*, i8 zeroext, i64*) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define weak_odr hidden i64* @_ZNK2v88internal7Literal10BuildValueINS0_7IsolateEEENS0_6HandleINS0_6ObjectEEEPT_(%"class.v8::internal::Literal"*, %"class.v8::internal::Isolate"*) local_unnamed_addr #0 comdat align 2 {
  %3 = getelementptr inbounds %"class.v8::internal::Literal", %"class.v8::internal::Literal"* %0, i64 0, i32 0, i32 0, i32 1
  %4 = load i32, i32* %3, align 4
  %5 = lshr i32 %4, 7
  %6 = and i32 %5, 15
  switch i32 %6, label %99 [
    i32 0, label %7
    i32 1, label %31
    i32 3, label %72
    i32 4, label %77
    i32 6, label %86
    i32 5, label %88
    i32 7, label %90
    i32 2, label %92
  ]

7:                                                ; preds = %2
  %8 = getelementptr inbounds %"class.v8::internal::Literal", %"class.v8::internal::Literal"* %0, i64 0, i32 1
  %9 = bitcast %union.anon.1138* %8 to i32*
  %10 = load i32, i32* %9, align 8
  %11 = sext i32 %10 to i64
  %12 = shl nsw i64 %11, 1
  %13 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %1, i64 0, i32 31, i32 4
  %14 = load %"class.v8::internal::CanonicalHandleScope"*, %"class.v8::internal::CanonicalHandleScope"** %13, align 8
  %15 = icmp eq %"class.v8::internal::CanonicalHandleScope"* %14, null
  br i1 %15, label %18, label %16

16:                                               ; preds = %7
  %17 = tail call i64* @_ZN2v88internal20CanonicalHandleScope6LookupEm(%"class.v8::internal::CanonicalHandleScope"* nonnull %14, i64 %12) #11
  br label %100

18:                                               ; preds = %7
  %19 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %1, i64 0, i32 31, i32 0
  %20 = load i64*, i64** %19, align 8
  %21 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %1, i64 0, i32 31, i32 1
  %22 = load i64*, i64** %21, align 8
  %23 = icmp eq i64* %20, %22
  br i1 %23, label %24, label %26

24:                                               ; preds = %18
  %25 = tail call i64* @_ZN2v88internal11HandleScope6ExtendEPNS0_7IsolateE(%"class.v8::internal::Isolate"* %1) #11
  br label %26

26:                                               ; preds = %24, %18
  %27 = phi i64* [ %25, %24 ], [ %20, %18 ]
  %28 = ptrtoint i64* %27 to i64
  %29 = add i64 %28, 8
  %30 = inttoptr i64 %29 to i64*
  store i64* %30, i64** %19, align 8
  store i64 %12, i64* %27, align 8
  br label %100

31:                                               ; preds = %2
  %32 = bitcast %"class.v8::internal::Isolate"* %1 to %"class.v8::internal::FactoryBase"*
  %33 = getelementptr inbounds %"class.v8::internal::Literal", %"class.v8::internal::Literal"* %0, i64 0, i32 1
  %34 = bitcast %union.anon.1138* %33 to double*
  %35 = load double, double* %34, align 8
  %36 = fcmp ult double %35, 0xC1D0000000000000
  %37 = fcmp ugt double %35, 0x41CFFFFFFF800000
  %38 = or i1 %37, %36
  %39 = bitcast double %35 to i64
  %40 = icmp eq i64 %39, -9223372036854775808
  %41 = or i1 %38, %40
  br i1 %41, label %67, label %42

42:                                               ; preds = %31
  %43 = fptosi double %35 to i32
  %44 = sitofp i32 %43 to double
  %45 = fcmp oeq double %35, %44
  br i1 %45, label %46, label %67

46:                                               ; preds = %42
  %47 = sext i32 %43 to i64
  %48 = shl nsw i64 %47, 1
  %49 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %1, i64 0, i32 31, i32 4
  %50 = load %"class.v8::internal::CanonicalHandleScope"*, %"class.v8::internal::CanonicalHandleScope"** %49, align 8
  %51 = icmp eq %"class.v8::internal::CanonicalHandleScope"* %50, null
  br i1 %51, label %54, label %52

52:                                               ; preds = %46
  %53 = tail call i64* @_ZN2v88internal20CanonicalHandleScope6LookupEm(%"class.v8::internal::CanonicalHandleScope"* nonnull %50, i64 %48) #11
  br label %100

54:                                               ; preds = %46
  %55 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %1, i64 0, i32 31, i32 0
  %56 = load i64*, i64** %55, align 8
  %57 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %1, i64 0, i32 31, i32 1
  %58 = load i64*, i64** %57, align 8
  %59 = icmp eq i64* %56, %58
  br i1 %59, label %60, label %62

60:                                               ; preds = %54
  %61 = tail call i64* @_ZN2v88internal11HandleScope6ExtendEPNS0_7IsolateE(%"class.v8::internal::Isolate"* %1) #11
  br label %62

62:                                               ; preds = %60, %54
  %63 = phi i64* [ %61, %60 ], [ %56, %54 ]
  %64 = ptrtoint i64* %63 to i64
  %65 = add i64 %64, 8
  %66 = inttoptr i64 %65 to i64*
  store i64* %66, i64** %55, align 8
  store i64 %48, i64* %63, align 8
  br label %100

67:                                               ; preds = %42, %31
  %68 = tail call i64* @_ZN2v88internal11FactoryBaseINS0_7FactoryEE13NewHeapNumberILNS0_14AllocationTypeE1EEENS0_6HandleINS0_10HeapNumberEEEv(%"class.v8::internal::FactoryBase"* %32) #11
  %69 = load i64, i64* %68, align 8
  %70 = add i64 %69, 3
  %71 = inttoptr i64 %70 to double*
  store double %35, double* %71, align 1
  br label %100

72:                                               ; preds = %2
  %73 = getelementptr inbounds %"class.v8::internal::Literal", %"class.v8::internal::Literal"* %0, i64 0, i32 1, i32 0
  %74 = bitcast %"class.v8::internal::AstRawString"** %73 to i64***
  %75 = load i64**, i64*** %74, align 8
  %76 = load i64*, i64** %75, align 8
  br label %100

77:                                               ; preds = %2
  %78 = bitcast %"class.v8::internal::Isolate"* %1 to %"class.v8::internal::FactoryBase"*
  %79 = getelementptr inbounds %"class.v8::internal::Literal", %"class.v8::internal::Literal"* %0, i64 0, i32 1
  %80 = bitcast %union.anon.1138* %79 to i8*
  %81 = load i8, i8* %80, align 8, !range !2
  %82 = icmp eq i8 %81, 0
  %83 = select i1 %82, i64 192, i64 184
  %84 = getelementptr inbounds %"class.v8::internal::FactoryBase", %"class.v8::internal::FactoryBase"* %78, i64 %83
  %85 = bitcast %"class.v8::internal::FactoryBase"* %84 to i64*
  br label %100

86:                                               ; preds = %2
  %87 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %1, i64 0, i32 0, i32 7, i32 0, i64 6
  br label %100

88:                                               ; preds = %2
  %89 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %1, i64 0, i32 0, i32 7, i32 0, i64 4
  br label %100

90:                                               ; preds = %2
  %91 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %1, i64 0, i32 0, i32 7, i32 0, i64 5
  br label %100

92:                                               ; preds = %2
  %93 = getelementptr inbounds %"class.v8::internal::Literal", %"class.v8::internal::Literal"* %0, i64 0, i32 1
  %94 = bitcast %union.anon.1138* %93 to i8**
  %95 = load i8*, i8** %94, align 8
  %96 = tail call i64* @_ZN2v88internal13BigIntLiteralINS0_7IsolateEEENS0_11MaybeHandleINS0_6BigIntEEEPT_PKc(%"class.v8::internal::Isolate"* %1, i8* %95) #11
  %97 = icmp eq i64* %96, null
  br i1 %97, label %98, label %100, !prof !3

98:                                               ; preds = %92
  tail call void (i8*, ...) @_Z8V8_FatalPKcz(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.5, i64 0, i64 0), i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.6, i64 0, i64 0)) #12
  unreachable

99:                                               ; preds = %2
  tail call void (i8*, ...) @_Z8V8_FatalPKcz(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str, i64 0, i64 0)) #12
  unreachable

100:                                              ; preds = %92, %67, %62, %52, %26, %16, %90, %88, %86, %77, %72
  %101 = phi i64* [ %91, %90 ], [ %89, %88 ], [ %87, %86 ], [ %85, %77 ], [ %76, %72 ], [ %17, %16 ], [ %27, %26 ], [ %68, %67 ], [ %53, %52 ], [ %63, %62 ], [ %96, %92 ]
  ret i64* %101
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden zeroext i1 @_ZN2v88internal10Expression18IsCompileTimeValueEv(%"class.v8::internal::Expression"* readonly) local_unnamed_addr #3 align 2 {
  %2 = getelementptr inbounds %"class.v8::internal::Expression", %"class.v8::internal::Expression"* %0, i64 0, i32 0, i32 1
  %3 = load i32, i32* %2, align 4
  %4 = and i32 %3, 63
  %5 = icmp eq i32 %4, 41
  br i1 %5, label %20, label %6

6:                                                ; preds = %1
  %7 = trunc i32 %3 to i8
  %8 = and i8 %7, 63
  %9 = add nsw i8 %8, -22
  %10 = icmp ugt i8 %9, 2
  %11 = icmp eq %"class.v8::internal::Expression"* %0, null
  %12 = or i1 %11, %10
  br i1 %12, label %20, label %13

13:                                               ; preds = %6
  switch i32 %4, label %20 [
    i32 24, label %14
    i32 23, label %17
  ]

14:                                               ; preds = %13
  %15 = and i32 %3, 256
  %16 = icmp ne i32 %15, 0
  br label %20

17:                                               ; preds = %13
  %18 = and i32 %3, 256
  %19 = icmp ne i32 %18, 0
  br label %20

20:                                               ; preds = %6, %17, %14, %13, %1
  %21 = phi i1 [ true, %1 ], [ %16, %14 ], [ %19, %17 ], [ false, %13 ], [ false, %6 ]
  ret i1 %21
}

; Function Attrs: nounwind ssp uwtable
define weak_odr hidden i64* @_ZNK2v88internal7Literal10BuildValueINS0_12LocalIsolateEEENS0_6HandleINS0_6ObjectEEEPT_(%"class.v8::internal::Literal"*, %"class.v8::internal::LocalIsolate"*) local_unnamed_addr #0 comdat align 2 {
  %3 = getelementptr inbounds %"class.v8::internal::Literal", %"class.v8::internal::Literal"* %0, i64 0, i32 0, i32 0, i32 1
  %4 = load i32, i32* %3, align 4
  %5 = lshr i32 %4, 7
  %6 = and i32 %5, 15
  switch i32 %6, label %111 [
    i32 0, label %7
    i32 1, label %34
    i32 3, label %78
    i32 4, label %83
    i32 6, label %92
    i32 5, label %96
    i32 7, label %100
    i32 2, label %104
  ]

7:                                                ; preds = %2
  %8 = getelementptr inbounds %"class.v8::internal::Literal", %"class.v8::internal::Literal"* %0, i64 0, i32 1
  %9 = bitcast %union.anon.1138* %8 to i32*
  %10 = load i32, i32* %9, align 8
  %11 = sext i32 %10 to i64
  %12 = shl nsw i64 %11, 1
  %13 = getelementptr inbounds %"class.v8::internal::LocalIsolate", %"class.v8::internal::LocalIsolate"* %1, i64 0, i32 1, i32 1
  %14 = load i8, i8* %13, align 8, !range !2
  %15 = icmp eq i8 %14, 0
  br i1 %15, label %19, label %16

16:                                               ; preds = %7
  %17 = getelementptr inbounds %"class.v8::internal::LocalIsolate", %"class.v8::internal::LocalIsolate"* %1, i64 0, i32 1
  %18 = tail call i64* @_ZN2v88internal16LocalHandleScope19GetMainThreadHandleEPNS0_9LocalHeapEm(%"class.v8::internal::LocalHeap"* %17, i64 %12) #11
  br label %112

19:                                               ; preds = %7
  %20 = getelementptr inbounds %"class.v8::internal::LocalIsolate", %"class.v8::internal::LocalIsolate"* %1, i64 0, i32 1, i32 7, i32 0, i32 0, i32 0
  %21 = load %"class.v8::internal::LocalHandles"*, %"class.v8::internal::LocalHandles"** %20, align 8
  %22 = getelementptr inbounds %"class.v8::internal::LocalHandles", %"class.v8::internal::LocalHandles"* %21, i64 0, i32 0, i32 0
  %23 = load i64*, i64** %22, align 8
  %24 = getelementptr inbounds %"class.v8::internal::LocalHandles", %"class.v8::internal::LocalHandles"* %21, i64 0, i32 0, i32 1
  %25 = load i64*, i64** %24, align 8
  %26 = icmp eq i64* %23, %25
  br i1 %26, label %27, label %30

27:                                               ; preds = %19
  %28 = tail call i64* @_ZN2v88internal12LocalHandles8AddBlockEv(%"class.v8::internal::LocalHandles"* %21) #11
  %29 = load i64*, i64** %22, align 8
  br label %30

30:                                               ; preds = %27, %19
  %31 = phi i64* [ %29, %27 ], [ %23, %19 ]
  %32 = phi i64* [ %28, %27 ], [ %23, %19 ]
  %33 = getelementptr inbounds i64, i64* %31, i64 1
  store i64* %33, i64** %22, align 8
  store i64 %12, i64* %32, align 8
  br label %112

34:                                               ; preds = %2
  %35 = bitcast %"class.v8::internal::LocalIsolate"* %1 to %"class.v8::internal::FactoryBase.1058"*
  %36 = getelementptr inbounds %"class.v8::internal::Literal", %"class.v8::internal::Literal"* %0, i64 0, i32 1
  %37 = bitcast %union.anon.1138* %36 to double*
  %38 = load double, double* %37, align 8
  %39 = fcmp ult double %38, 0xC1D0000000000000
  %40 = fcmp ugt double %38, 0x41CFFFFFFF800000
  %41 = or i1 %40, %39
  %42 = bitcast double %38 to i64
  %43 = icmp eq i64 %42, -9223372036854775808
  %44 = or i1 %41, %43
  br i1 %44, label %73, label %45

45:                                               ; preds = %34
  %46 = fptosi double %38 to i32
  %47 = sitofp i32 %46 to double
  %48 = fcmp oeq double %38, %47
  br i1 %48, label %49, label %73

49:                                               ; preds = %45
  %50 = sext i32 %46 to i64
  %51 = shl nsw i64 %50, 1
  %52 = getelementptr inbounds %"class.v8::internal::LocalIsolate", %"class.v8::internal::LocalIsolate"* %1, i64 0, i32 1, i32 1
  %53 = load i8, i8* %52, align 8, !range !2
  %54 = icmp eq i8 %53, 0
  br i1 %54, label %58, label %55

55:                                               ; preds = %49
  %56 = getelementptr inbounds %"class.v8::internal::LocalIsolate", %"class.v8::internal::LocalIsolate"* %1, i64 0, i32 1
  %57 = tail call i64* @_ZN2v88internal16LocalHandleScope19GetMainThreadHandleEPNS0_9LocalHeapEm(%"class.v8::internal::LocalHeap"* %56, i64 %51) #11
  br label %112

58:                                               ; preds = %49
  %59 = getelementptr inbounds %"class.v8::internal::LocalIsolate", %"class.v8::internal::LocalIsolate"* %1, i64 0, i32 1, i32 7, i32 0, i32 0, i32 0
  %60 = load %"class.v8::internal::LocalHandles"*, %"class.v8::internal::LocalHandles"** %59, align 8
  %61 = getelementptr inbounds %"class.v8::internal::LocalHandles", %"class.v8::internal::LocalHandles"* %60, i64 0, i32 0, i32 0
  %62 = load i64*, i64** %61, align 8
  %63 = getelementptr inbounds %"class.v8::internal::LocalHandles", %"class.v8::internal::LocalHandles"* %60, i64 0, i32 0, i32 1
  %64 = load i64*, i64** %63, align 8
  %65 = icmp eq i64* %62, %64
  br i1 %65, label %66, label %69

66:                                               ; preds = %58
  %67 = tail call i64* @_ZN2v88internal12LocalHandles8AddBlockEv(%"class.v8::internal::LocalHandles"* %60) #11
  %68 = load i64*, i64** %61, align 8
  br label %69

69:                                               ; preds = %66, %58
  %70 = phi i64* [ %68, %66 ], [ %62, %58 ]
  %71 = phi i64* [ %67, %66 ], [ %62, %58 ]
  %72 = getelementptr inbounds i64, i64* %70, i64 1
  store i64* %72, i64** %61, align 8
  store i64 %51, i64* %71, align 8
  br label %112

73:                                               ; preds = %45, %34
  %74 = tail call i64* @_ZN2v88internal11FactoryBaseINS0_12LocalFactoryEE13NewHeapNumberILNS0_14AllocationTypeE1EEENS0_6HandleINS0_10HeapNumberEEEv(%"class.v8::internal::FactoryBase.1058"* %35) #11
  %75 = load i64, i64* %74, align 8
  %76 = add i64 %75, 3
  %77 = inttoptr i64 %76 to double*
  store double %38, double* %77, align 1
  br label %112

78:                                               ; preds = %2
  %79 = getelementptr inbounds %"class.v8::internal::Literal", %"class.v8::internal::Literal"* %0, i64 0, i32 1, i32 0
  %80 = bitcast %"class.v8::internal::AstRawString"** %79 to i64***
  %81 = load i64**, i64*** %80, align 8
  %82 = load i64*, i64** %81, align 8
  br label %112

83:                                               ; preds = %2
  %84 = getelementptr inbounds %"class.v8::internal::Literal", %"class.v8::internal::Literal"* %0, i64 0, i32 1
  %85 = bitcast %union.anon.1138* %84 to i8*
  %86 = load i8, i8* %85, align 8, !range !2
  %87 = icmp eq i8 %86, 0
  %88 = getelementptr inbounds %"class.v8::internal::LocalIsolate", %"class.v8::internal::LocalIsolate"* %1, i64 0, i32 0, i32 0, i32 0, i32 0
  %89 = load i64*, i64** %88, align 8
  %90 = select i1 %87, i64 8, i64 7
  %91 = getelementptr inbounds i64, i64* %89, i64 %90
  br label %112

92:                                               ; preds = %2
  %93 = getelementptr inbounds %"class.v8::internal::LocalIsolate", %"class.v8::internal::LocalIsolate"* %1, i64 0, i32 0, i32 0, i32 0, i32 0
  %94 = load i64*, i64** %93, align 8
  %95 = getelementptr inbounds i64, i64* %94, i64 6
  br label %112

96:                                               ; preds = %2
  %97 = getelementptr inbounds %"class.v8::internal::LocalIsolate", %"class.v8::internal::LocalIsolate"* %1, i64 0, i32 0, i32 0, i32 0, i32 0
  %98 = load i64*, i64** %97, align 8
  %99 = getelementptr inbounds i64, i64* %98, i64 4
  br label %112

100:                                              ; preds = %2
  %101 = getelementptr inbounds %"class.v8::internal::LocalIsolate", %"class.v8::internal::LocalIsolate"* %1, i64 0, i32 0, i32 0, i32 0, i32 0
  %102 = load i64*, i64** %101, align 8
  %103 = getelementptr inbounds i64, i64* %102, i64 5
  br label %112

104:                                              ; preds = %2
  %105 = getelementptr inbounds %"class.v8::internal::Literal", %"class.v8::internal::Literal"* %0, i64 0, i32 1
  %106 = bitcast %union.anon.1138* %105 to i8**
  %107 = load i8*, i8** %106, align 8
  %108 = tail call i64* @_ZN2v88internal13BigIntLiteralINS0_12LocalIsolateEEENS0_11MaybeHandleINS0_6BigIntEEEPT_PKc(%"class.v8::internal::LocalIsolate"* %1, i8* %107) #11
  %109 = icmp eq i64* %108, null
  br i1 %109, label %110, label %112, !prof !3

110:                                              ; preds = %104
  tail call void (i8*, ...) @_Z8V8_FatalPKcz(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.5, i64 0, i64 0), i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.6, i64 0, i64 0)) #12
  unreachable

111:                                              ; preds = %2
  tail call void (i8*, ...) @_Z8V8_FatalPKcz(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str, i64 0, i64 0)) #12
  unreachable

112:                                              ; preds = %104, %73, %69, %55, %30, %16, %100, %96, %92, %83, %78
  %113 = phi i64* [ %103, %100 ], [ %99, %96 ], [ %95, %92 ], [ %91, %83 ], [ %82, %78 ], [ %18, %16 ], [ %32, %30 ], [ %74, %73 ], [ %57, %55 ], [ %71, %69 ], [ %108, %104 ]
  ret i64* %113
}

; Function Attrs: nounwind ssp uwtable
define weak_odr hidden i64* @_ZN2v88internal17GetTemplateObject21GetOrBuildDescriptionINS0_7IsolateEEENS0_6HandleINS0_25TemplateObjectDescriptionEEEPT_(%"class.v8::internal::GetTemplateObject"*, %"class.v8::internal::Isolate"*) local_unnamed_addr #0 comdat align 2 {
  %3 = bitcast %"class.v8::internal::Isolate"* %1 to %"class.v8::internal::FactoryBase"*
  %4 = getelementptr inbounds %"class.v8::internal::GetTemplateObject", %"class.v8::internal::GetTemplateObject"* %0, i64 0, i32 2
  %5 = load %"class.v8::internal::ZoneList.1149"*, %"class.v8::internal::ZoneList.1149"** %4, align 8
  %6 = getelementptr inbounds %"class.v8::internal::ZoneList.1149", %"class.v8::internal::ZoneList.1149"* %5, i64 0, i32 2
  %7 = load i32, i32* %6, align 4
  %8 = tail call i64* @_ZN2v88internal11FactoryBaseINS0_7FactoryEE13NewFixedArrayEiNS0_14AllocationTypeE(%"class.v8::internal::FactoryBase"* %3, i32 %7, i8 zeroext 1) #11
  %9 = load i64, i64* %8, align 8
  %10 = add i64 %9, 3
  %11 = inttoptr i64 %10 to i32*
  %12 = load i32, i32* %11, align 4
  %13 = icmp sgt i32 %12, 1
  br i1 %13, label %14, label %180

14:                                               ; preds = %2
  %15 = getelementptr inbounds %"class.v8::internal::GetTemplateObject", %"class.v8::internal::GetTemplateObject"* %0, i64 0, i32 1
  br label %19

16:                                               ; preds = %70
  %17 = and i8 %34, 1
  %18 = icmp eq i8 %17, 0
  br i1 %18, label %79, label %180

19:                                               ; preds = %14, %70
  %20 = phi i64 [ 0, %14 ], [ %71, %70 ]
  %21 = phi i64 [ %9, %14 ], [ %72, %70 ]
  %22 = phi i8 [ 1, %14 ], [ %34, %70 ]
  %23 = load %"class.v8::internal::ZoneList.1149"*, %"class.v8::internal::ZoneList.1149"** %4, align 8
  %24 = getelementptr inbounds %"class.v8::internal::ZoneList.1149", %"class.v8::internal::ZoneList.1149"* %23, i64 0, i32 0
  %25 = load %"class.v8::internal::AstRawString"**, %"class.v8::internal::AstRawString"*** %24, align 8
  %26 = getelementptr inbounds %"class.v8::internal::AstRawString"*, %"class.v8::internal::AstRawString"** %25, i64 %20
  %27 = load %"class.v8::internal::AstRawString"*, %"class.v8::internal::AstRawString"** %26, align 8
  %28 = load %"class.v8::internal::ZoneList.1149"*, %"class.v8::internal::ZoneList.1149"** %15, align 8
  %29 = getelementptr inbounds %"class.v8::internal::ZoneList.1149", %"class.v8::internal::ZoneList.1149"* %28, i64 0, i32 0
  %30 = load %"class.v8::internal::AstRawString"**, %"class.v8::internal::AstRawString"*** %29, align 8
  %31 = getelementptr inbounds %"class.v8::internal::AstRawString"*, %"class.v8::internal::AstRawString"** %30, i64 %20
  %32 = load %"class.v8::internal::AstRawString"*, %"class.v8::internal::AstRawString"** %31, align 8
  %33 = icmp eq %"class.v8::internal::AstRawString"* %27, %32
  %34 = select i1 %33, i8 %22, i8 0
  %35 = bitcast %"class.v8::internal::AstRawString"* %27 to i64**
  %36 = load i64*, i64** %35, align 8
  %37 = load i64, i64* %36, align 8
  %38 = trunc i64 %20 to i32
  %39 = shl i32 %38, 2
  %40 = sext i32 %39 to i64
  %41 = add nsw i64 %40, 7
  %42 = add i64 %41, %21
  %43 = inttoptr i64 %42 to i32*
  %44 = trunc i64 %37 to i32
  store atomic volatile i32 %44, i32* %43 monotonic, align 4
  %45 = and i64 %37, 1
  %46 = icmp eq i64 %45, 0
  br i1 %46, label %70, label %47

47:                                               ; preds = %19
  %48 = and i64 %21, -262144
  %49 = or i64 %48, 8
  %50 = inttoptr i64 %49 to i64*
  %51 = load i64, i64* %50, align 8
  %52 = and i64 %51, 262144
  %53 = icmp eq i64 %52, 0
  br i1 %53, label %58, label %54

54:                                               ; preds = %47
  %55 = or i64 %48, 16
  %56 = inttoptr i64 %55 to %"class.v8::internal::Heap"**
  %57 = load %"class.v8::internal::Heap"*, %"class.v8::internal::Heap"** %56, align 16
  tail call void @_ZN2v88internal12WriteBarrier11MarkingSlowEPNS0_4HeapENS0_10HeapObjectENS0_24CompressedHeapObjectSlotES4_(%"class.v8::internal::Heap"* %57, i64 %21, i64 %42, i64 %37) #11
  br label %58

58:                                               ; preds = %54, %47
  %59 = and i64 %37, -262144
  %60 = or i64 %59, 8
  %61 = inttoptr i64 %60 to i64*
  %62 = load i64, i64* %61, align 8
  %63 = and i64 %62, 24
  %64 = icmp eq i64 %63, 0
  br i1 %64, label %70, label %65

65:                                               ; preds = %58
  %66 = load i64, i64* %50, align 8
  %67 = and i64 %66, 24
  %68 = icmp eq i64 %67, 0
  br i1 %68, label %69, label %70

69:                                               ; preds = %65
  tail call void @_ZN2v88internal28Heap_GenerationalBarrierSlowENS0_10HeapObjectEmS1_(i64 %21, i64 %42, i64 %37) #11
  br label %70

70:                                               ; preds = %19, %58, %65, %69
  %71 = add nuw nsw i64 %20, 1
  %72 = load i64, i64* %8, align 8
  %73 = add i64 %72, 3
  %74 = inttoptr i64 %73 to i32*
  %75 = load i32, i32* %74, align 4
  %76 = ashr i32 %75, 1
  %77 = sext i32 %76 to i64
  %78 = icmp slt i64 %71, %77
  br i1 %78, label %19, label %16

79:                                               ; preds = %16
  %80 = getelementptr inbounds %"class.v8::internal::GetTemplateObject", %"class.v8::internal::GetTemplateObject"* %0, i64 0, i32 1
  %81 = load %"class.v8::internal::ZoneList.1149"*, %"class.v8::internal::ZoneList.1149"** %80, align 8
  %82 = getelementptr inbounds %"class.v8::internal::ZoneList.1149", %"class.v8::internal::ZoneList.1149"* %81, i64 0, i32 2
  %83 = load i32, i32* %82, align 4
  %84 = tail call i64* @_ZN2v88internal11FactoryBaseINS0_7FactoryEE13NewFixedArrayEiNS0_14AllocationTypeE(%"class.v8::internal::FactoryBase"* %3, i32 %83, i8 zeroext 1) #11
  %85 = load i64, i64* %84, align 8
  %86 = add i64 %85, 3
  %87 = inttoptr i64 %86 to i32*
  %88 = load i32, i32* %87, align 4
  %89 = icmp sgt i32 %88, 1
  br i1 %89, label %90, label %180

90:                                               ; preds = %79
  %91 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %1, i64 0, i32 0, i32 7, i32 0, i64 4
  br label %92

92:                                               ; preds = %90, %171
  %93 = phi i64 [ 0, %90 ], [ %172, %171 ]
  %94 = phi i64 [ %85, %90 ], [ %173, %171 ]
  %95 = load %"class.v8::internal::ZoneList.1149"*, %"class.v8::internal::ZoneList.1149"** %80, align 8
  %96 = getelementptr inbounds %"class.v8::internal::ZoneList.1149", %"class.v8::internal::ZoneList.1149"* %95, i64 0, i32 0
  %97 = load %"class.v8::internal::AstRawString"**, %"class.v8::internal::AstRawString"*** %96, align 8
  %98 = getelementptr inbounds %"class.v8::internal::AstRawString"*, %"class.v8::internal::AstRawString"** %97, i64 %93
  %99 = load %"class.v8::internal::AstRawString"*, %"class.v8::internal::AstRawString"** %98, align 8
  %100 = icmp eq %"class.v8::internal::AstRawString"* %99, null
  br i1 %100, label %137, label %101

101:                                              ; preds = %92
  %102 = bitcast %"class.v8::internal::AstRawString"* %99 to i64**
  %103 = load i64*, i64** %102, align 8
  %104 = load i64, i64* %103, align 8
  %105 = trunc i64 %93 to i32
  %106 = shl i32 %105, 2
  %107 = sext i32 %106 to i64
  %108 = add i64 %94, 7
  %109 = add i64 %108, %107
  %110 = inttoptr i64 %109 to i32*
  %111 = trunc i64 %104 to i32
  store atomic volatile i32 %111, i32* %110 monotonic, align 4
  %112 = and i64 %104, 1
  %113 = icmp eq i64 %112, 0
  br i1 %113, label %171, label %114

114:                                              ; preds = %101
  %115 = and i64 %94, -262144
  %116 = or i64 %115, 8
  %117 = inttoptr i64 %116 to i64*
  %118 = load i64, i64* %117, align 8
  %119 = and i64 %118, 262144
  %120 = icmp eq i64 %119, 0
  br i1 %120, label %125, label %121

121:                                              ; preds = %114
  %122 = or i64 %115, 16
  %123 = inttoptr i64 %122 to %"class.v8::internal::Heap"**
  %124 = load %"class.v8::internal::Heap"*, %"class.v8::internal::Heap"** %123, align 16
  tail call void @_ZN2v88internal12WriteBarrier11MarkingSlowEPNS0_4HeapENS0_10HeapObjectENS0_24CompressedHeapObjectSlotES4_(%"class.v8::internal::Heap"* %124, i64 %94, i64 %109, i64 %104) #11
  br label %125

125:                                              ; preds = %121, %114
  %126 = and i64 %104, -262144
  %127 = or i64 %126, 8
  %128 = inttoptr i64 %127 to i64*
  %129 = load i64, i64* %128, align 8
  %130 = and i64 %129, 24
  %131 = icmp eq i64 %130, 0
  br i1 %131, label %171, label %132

132:                                              ; preds = %125
  %133 = load i64, i64* %117, align 8
  %134 = and i64 %133, 24
  %135 = icmp eq i64 %134, 0
  br i1 %135, label %136, label %171

136:                                              ; preds = %132
  tail call void @_ZN2v88internal28Heap_GenerationalBarrierSlowENS0_10HeapObjectEmS1_(i64 %94, i64 %109, i64 %104) #11
  br label %171

137:                                              ; preds = %92
  %138 = load i64, i64* %91, align 8
  %139 = trunc i64 %93 to i32
  %140 = shl i32 %139, 2
  %141 = sext i32 %140 to i64
  %142 = add i64 %94, 7
  %143 = add i64 %142, %141
  %144 = inttoptr i64 %143 to i32*
  %145 = trunc i64 %138 to i32
  store atomic volatile i32 %145, i32* %144 monotonic, align 4
  %146 = and i64 %138, 1
  %147 = icmp eq i64 %146, 0
  br i1 %147, label %171, label %148

148:                                              ; preds = %137
  %149 = and i64 %94, -262144
  %150 = or i64 %149, 8
  %151 = inttoptr i64 %150 to i64*
  %152 = load i64, i64* %151, align 8
  %153 = and i64 %152, 262144
  %154 = icmp eq i64 %153, 0
  br i1 %154, label %159, label %155

155:                                              ; preds = %148
  %156 = or i64 %149, 16
  %157 = inttoptr i64 %156 to %"class.v8::internal::Heap"**
  %158 = load %"class.v8::internal::Heap"*, %"class.v8::internal::Heap"** %157, align 16
  tail call void @_ZN2v88internal12WriteBarrier11MarkingSlowEPNS0_4HeapENS0_10HeapObjectENS0_24CompressedHeapObjectSlotES4_(%"class.v8::internal::Heap"* %158, i64 %94, i64 %143, i64 %138) #11
  br label %159

159:                                              ; preds = %155, %148
  %160 = and i64 %138, -262144
  %161 = or i64 %160, 8
  %162 = inttoptr i64 %161 to i64*
  %163 = load i64, i64* %162, align 8
  %164 = and i64 %163, 24
  %165 = icmp eq i64 %164, 0
  br i1 %165, label %171, label %166

166:                                              ; preds = %159
  %167 = load i64, i64* %151, align 8
  %168 = and i64 %167, 24
  %169 = icmp eq i64 %168, 0
  br i1 %169, label %170, label %171

170:                                              ; preds = %166
  tail call void @_ZN2v88internal28Heap_GenerationalBarrierSlowENS0_10HeapObjectEmS1_(i64 %94, i64 %143, i64 %138) #11
  br label %171

171:                                              ; preds = %170, %166, %159, %137, %136, %132, %125, %101
  %172 = add nuw nsw i64 %93, 1
  %173 = load i64, i64* %84, align 8
  %174 = add i64 %173, 3
  %175 = inttoptr i64 %174 to i32*
  %176 = load i32, i32* %175, align 4
  %177 = ashr i32 %176, 1
  %178 = sext i32 %177 to i64
  %179 = icmp slt i64 %172, %178
  br i1 %179, label %92, label %180

180:                                              ; preds = %171, %2, %79, %16
  %181 = phi i64* [ %8, %16 ], [ %84, %79 ], [ %8, %2 ], [ %84, %171 ]
  %182 = tail call i64* @_ZN2v88internal11FactoryBaseINS0_7FactoryEE28NewTemplateObjectDescriptionENS0_6HandleINS0_10FixedArrayEEES6_(%"class.v8::internal::FactoryBase"* %3, i64* %8, i64* %181) #11
  ret i64* %182
}

declare i64* @_ZN2v88internal11FactoryBaseINS0_7FactoryEE13NewFixedArrayEiNS0_14AllocationTypeE(%"class.v8::internal::FactoryBase"*, i32, i8 zeroext) local_unnamed_addr #2

declare i64* @_ZN2v88internal11FactoryBaseINS0_7FactoryEE28NewTemplateObjectDescriptionENS0_6HandleINS0_10FixedArrayEEES6_(%"class.v8::internal::FactoryBase"*, i64*, i64*) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define weak_odr hidden i64* @_ZN2v88internal17GetTemplateObject21GetOrBuildDescriptionINS0_12LocalIsolateEEENS0_6HandleINS0_25TemplateObjectDescriptionEEEPT_(%"class.v8::internal::GetTemplateObject"*, %"class.v8::internal::LocalIsolate"*) local_unnamed_addr #0 comdat align 2 {
  %3 = bitcast %"class.v8::internal::LocalIsolate"* %1 to %"class.v8::internal::FactoryBase.1058"*
  %4 = getelementptr inbounds %"class.v8::internal::GetTemplateObject", %"class.v8::internal::GetTemplateObject"* %0, i64 0, i32 2
  %5 = load %"class.v8::internal::ZoneList.1149"*, %"class.v8::internal::ZoneList.1149"** %4, align 8
  %6 = getelementptr inbounds %"class.v8::internal::ZoneList.1149", %"class.v8::internal::ZoneList.1149"* %5, i64 0, i32 2
  %7 = load i32, i32* %6, align 4
  %8 = tail call i64* @_ZN2v88internal11FactoryBaseINS0_12LocalFactoryEE13NewFixedArrayEiNS0_14AllocationTypeE(%"class.v8::internal::FactoryBase.1058"* %3, i32 %7, i8 zeroext 1) #11
  %9 = load i64, i64* %8, align 8
  %10 = add i64 %9, 3
  %11 = inttoptr i64 %10 to i32*
  %12 = load i32, i32* %11, align 4
  %13 = icmp sgt i32 %12, 1
  br i1 %13, label %14, label %182

14:                                               ; preds = %2
  %15 = getelementptr inbounds %"class.v8::internal::GetTemplateObject", %"class.v8::internal::GetTemplateObject"* %0, i64 0, i32 1
  br label %19

16:                                               ; preds = %70
  %17 = and i8 %34, 1
  %18 = icmp eq i8 %17, 0
  br i1 %18, label %79, label %182

19:                                               ; preds = %14, %70
  %20 = phi i64 [ 0, %14 ], [ %71, %70 ]
  %21 = phi i64 [ %9, %14 ], [ %72, %70 ]
  %22 = phi i8 [ 1, %14 ], [ %34, %70 ]
  %23 = load %"class.v8::internal::ZoneList.1149"*, %"class.v8::internal::ZoneList.1149"** %4, align 8
  %24 = getelementptr inbounds %"class.v8::internal::ZoneList.1149", %"class.v8::internal::ZoneList.1149"* %23, i64 0, i32 0
  %25 = load %"class.v8::internal::AstRawString"**, %"class.v8::internal::AstRawString"*** %24, align 8
  %26 = getelementptr inbounds %"class.v8::internal::AstRawString"*, %"class.v8::internal::AstRawString"** %25, i64 %20
  %27 = load %"class.v8::internal::AstRawString"*, %"class.v8::internal::AstRawString"** %26, align 8
  %28 = load %"class.v8::internal::ZoneList.1149"*, %"class.v8::internal::ZoneList.1149"** %15, align 8
  %29 = getelementptr inbounds %"class.v8::internal::ZoneList.1149", %"class.v8::internal::ZoneList.1149"* %28, i64 0, i32 0
  %30 = load %"class.v8::internal::AstRawString"**, %"class.v8::internal::AstRawString"*** %29, align 8
  %31 = getelementptr inbounds %"class.v8::internal::AstRawString"*, %"class.v8::internal::AstRawString"** %30, i64 %20
  %32 = load %"class.v8::internal::AstRawString"*, %"class.v8::internal::AstRawString"** %31, align 8
  %33 = icmp eq %"class.v8::internal::AstRawString"* %27, %32
  %34 = select i1 %33, i8 %22, i8 0
  %35 = bitcast %"class.v8::internal::AstRawString"* %27 to i64**
  %36 = load i64*, i64** %35, align 8
  %37 = load i64, i64* %36, align 8
  %38 = trunc i64 %20 to i32
  %39 = shl i32 %38, 2
  %40 = sext i32 %39 to i64
  %41 = add nsw i64 %40, 7
  %42 = add i64 %41, %21
  %43 = inttoptr i64 %42 to i32*
  %44 = trunc i64 %37 to i32
  store atomic volatile i32 %44, i32* %43 monotonic, align 4
  %45 = and i64 %37, 1
  %46 = icmp eq i64 %45, 0
  br i1 %46, label %70, label %47

47:                                               ; preds = %19
  %48 = and i64 %21, -262144
  %49 = or i64 %48, 8
  %50 = inttoptr i64 %49 to i64*
  %51 = load i64, i64* %50, align 8
  %52 = and i64 %51, 262144
  %53 = icmp eq i64 %52, 0
  br i1 %53, label %58, label %54

54:                                               ; preds = %47
  %55 = or i64 %48, 16
  %56 = inttoptr i64 %55 to %"class.v8::internal::Heap"**
  %57 = load %"class.v8::internal::Heap"*, %"class.v8::internal::Heap"** %56, align 16
  tail call void @_ZN2v88internal12WriteBarrier11MarkingSlowEPNS0_4HeapENS0_10HeapObjectENS0_24CompressedHeapObjectSlotES4_(%"class.v8::internal::Heap"* %57, i64 %21, i64 %42, i64 %37) #11
  br label %58

58:                                               ; preds = %54, %47
  %59 = and i64 %37, -262144
  %60 = or i64 %59, 8
  %61 = inttoptr i64 %60 to i64*
  %62 = load i64, i64* %61, align 8
  %63 = and i64 %62, 24
  %64 = icmp eq i64 %63, 0
  br i1 %64, label %70, label %65

65:                                               ; preds = %58
  %66 = load i64, i64* %50, align 8
  %67 = and i64 %66, 24
  %68 = icmp eq i64 %67, 0
  br i1 %68, label %69, label %70

69:                                               ; preds = %65
  tail call void @_ZN2v88internal28Heap_GenerationalBarrierSlowENS0_10HeapObjectEmS1_(i64 %21, i64 %42, i64 %37) #11
  br label %70

70:                                               ; preds = %19, %58, %65, %69
  %71 = add nuw nsw i64 %20, 1
  %72 = load i64, i64* %8, align 8
  %73 = add i64 %72, 3
  %74 = inttoptr i64 %73 to i32*
  %75 = load i32, i32* %74, align 4
  %76 = ashr i32 %75, 1
  %77 = sext i32 %76 to i64
  %78 = icmp slt i64 %71, %77
  br i1 %78, label %19, label %16

79:                                               ; preds = %16
  %80 = getelementptr inbounds %"class.v8::internal::GetTemplateObject", %"class.v8::internal::GetTemplateObject"* %0, i64 0, i32 1
  %81 = load %"class.v8::internal::ZoneList.1149"*, %"class.v8::internal::ZoneList.1149"** %80, align 8
  %82 = getelementptr inbounds %"class.v8::internal::ZoneList.1149", %"class.v8::internal::ZoneList.1149"* %81, i64 0, i32 2
  %83 = load i32, i32* %82, align 4
  %84 = tail call i64* @_ZN2v88internal11FactoryBaseINS0_12LocalFactoryEE13NewFixedArrayEiNS0_14AllocationTypeE(%"class.v8::internal::FactoryBase.1058"* %3, i32 %83, i8 zeroext 1) #11
  %85 = load i64, i64* %84, align 8
  %86 = add i64 %85, 3
  %87 = inttoptr i64 %86 to i32*
  %88 = load i32, i32* %87, align 4
  %89 = icmp sgt i32 %88, 1
  br i1 %89, label %90, label %182

90:                                               ; preds = %79
  %91 = getelementptr inbounds %"class.v8::internal::LocalIsolate", %"class.v8::internal::LocalIsolate"* %1, i64 0, i32 0, i32 0, i32 0, i32 0
  br label %92

92:                                               ; preds = %90, %173
  %93 = phi i64 [ 0, %90 ], [ %174, %173 ]
  %94 = phi i64 [ %85, %90 ], [ %175, %173 ]
  %95 = load %"class.v8::internal::ZoneList.1149"*, %"class.v8::internal::ZoneList.1149"** %80, align 8
  %96 = getelementptr inbounds %"class.v8::internal::ZoneList.1149", %"class.v8::internal::ZoneList.1149"* %95, i64 0, i32 0
  %97 = load %"class.v8::internal::AstRawString"**, %"class.v8::internal::AstRawString"*** %96, align 8
  %98 = getelementptr inbounds %"class.v8::internal::AstRawString"*, %"class.v8::internal::AstRawString"** %97, i64 %93
  %99 = load %"class.v8::internal::AstRawString"*, %"class.v8::internal::AstRawString"** %98, align 8
  %100 = icmp eq %"class.v8::internal::AstRawString"* %99, null
  br i1 %100, label %137, label %101

101:                                              ; preds = %92
  %102 = bitcast %"class.v8::internal::AstRawString"* %99 to i64**
  %103 = load i64*, i64** %102, align 8
  %104 = load i64, i64* %103, align 8
  %105 = trunc i64 %93 to i32
  %106 = shl i32 %105, 2
  %107 = sext i32 %106 to i64
  %108 = add i64 %94, 7
  %109 = add i64 %108, %107
  %110 = inttoptr i64 %109 to i32*
  %111 = trunc i64 %104 to i32
  store atomic volatile i32 %111, i32* %110 monotonic, align 4
  %112 = and i64 %104, 1
  %113 = icmp eq i64 %112, 0
  br i1 %113, label %173, label %114

114:                                              ; preds = %101
  %115 = and i64 %94, -262144
  %116 = or i64 %115, 8
  %117 = inttoptr i64 %116 to i64*
  %118 = load i64, i64* %117, align 8
  %119 = and i64 %118, 262144
  %120 = icmp eq i64 %119, 0
  br i1 %120, label %125, label %121

121:                                              ; preds = %114
  %122 = or i64 %115, 16
  %123 = inttoptr i64 %122 to %"class.v8::internal::Heap"**
  %124 = load %"class.v8::internal::Heap"*, %"class.v8::internal::Heap"** %123, align 16
  tail call void @_ZN2v88internal12WriteBarrier11MarkingSlowEPNS0_4HeapENS0_10HeapObjectENS0_24CompressedHeapObjectSlotES4_(%"class.v8::internal::Heap"* %124, i64 %94, i64 %109, i64 %104) #11
  br label %125

125:                                              ; preds = %121, %114
  %126 = and i64 %104, -262144
  %127 = or i64 %126, 8
  %128 = inttoptr i64 %127 to i64*
  %129 = load i64, i64* %128, align 8
  %130 = and i64 %129, 24
  %131 = icmp eq i64 %130, 0
  br i1 %131, label %173, label %132

132:                                              ; preds = %125
  %133 = load i64, i64* %117, align 8
  %134 = and i64 %133, 24
  %135 = icmp eq i64 %134, 0
  br i1 %135, label %136, label %173

136:                                              ; preds = %132
  tail call void @_ZN2v88internal28Heap_GenerationalBarrierSlowENS0_10HeapObjectEmS1_(i64 %94, i64 %109, i64 %104) #11
  br label %173

137:                                              ; preds = %92
  %138 = load i64*, i64** %91, align 8
  %139 = getelementptr inbounds i64, i64* %138, i64 4
  %140 = load i64, i64* %139, align 8
  %141 = trunc i64 %93 to i32
  %142 = shl i32 %141, 2
  %143 = sext i32 %142 to i64
  %144 = add i64 %94, 7
  %145 = add i64 %144, %143
  %146 = inttoptr i64 %145 to i32*
  %147 = trunc i64 %140 to i32
  store atomic volatile i32 %147, i32* %146 monotonic, align 4
  %148 = and i64 %140, 1
  %149 = icmp eq i64 %148, 0
  br i1 %149, label %173, label %150

150:                                              ; preds = %137
  %151 = and i64 %94, -262144
  %152 = or i64 %151, 8
  %153 = inttoptr i64 %152 to i64*
  %154 = load i64, i64* %153, align 8
  %155 = and i64 %154, 262144
  %156 = icmp eq i64 %155, 0
  br i1 %156, label %161, label %157

157:                                              ; preds = %150
  %158 = or i64 %151, 16
  %159 = inttoptr i64 %158 to %"class.v8::internal::Heap"**
  %160 = load %"class.v8::internal::Heap"*, %"class.v8::internal::Heap"** %159, align 16
  tail call void @_ZN2v88internal12WriteBarrier11MarkingSlowEPNS0_4HeapENS0_10HeapObjectENS0_24CompressedHeapObjectSlotES4_(%"class.v8::internal::Heap"* %160, i64 %94, i64 %145, i64 %140) #11
  br label %161

161:                                              ; preds = %157, %150
  %162 = and i64 %140, -262144
  %163 = or i64 %162, 8
  %164 = inttoptr i64 %163 to i64*
  %165 = load i64, i64* %164, align 8
  %166 = and i64 %165, 24
  %167 = icmp eq i64 %166, 0
  br i1 %167, label %173, label %168

168:                                              ; preds = %161
  %169 = load i64, i64* %153, align 8
  %170 = and i64 %169, 24
  %171 = icmp eq i64 %170, 0
  br i1 %171, label %172, label %173

172:                                              ; preds = %168
  tail call void @_ZN2v88internal28Heap_GenerationalBarrierSlowENS0_10HeapObjectEmS1_(i64 %94, i64 %145, i64 %140) #11
  br label %173

173:                                              ; preds = %172, %168, %161, %137, %136, %132, %125, %101
  %174 = add nuw nsw i64 %93, 1
  %175 = load i64, i64* %84, align 8
  %176 = add i64 %175, 3
  %177 = inttoptr i64 %176 to i32*
  %178 = load i32, i32* %177, align 4
  %179 = ashr i32 %178, 1
  %180 = sext i32 %179 to i64
  %181 = icmp slt i64 %174, %180
  br i1 %181, label %92, label %182

182:                                              ; preds = %173, %2, %79, %16
  %183 = phi i64* [ %8, %16 ], [ %84, %79 ], [ %8, %2 ], [ %84, %173 ]
  %184 = tail call i64* @_ZN2v88internal11FactoryBaseINS0_12LocalFactoryEE28NewTemplateObjectDescriptionENS0_6HandleINS0_10FixedArrayEEES6_(%"class.v8::internal::FactoryBase.1058"* %3, i64* %8, i64* %183) #11
  ret i64* %184
}

declare i64* @_ZN2v88internal11FactoryBaseINS0_12LocalFactoryEE13NewFixedArrayEiNS0_14AllocationTypeE(%"class.v8::internal::FactoryBase.1058"*, i32, i8 zeroext) local_unnamed_addr #2

declare i64* @_ZN2v88internal11FactoryBaseINS0_12LocalFactoryEE28NewTemplateObjectDescriptionENS0_6HandleINS0_10FixedArrayEEES6_(%"class.v8::internal::FactoryBase.1058"*, i64*, i64*) local_unnamed_addr #2

declare i64* @_ZN2v88internal13BigIntLiteralINS0_7IsolateEEENS0_11MaybeHandleINS0_6BigIntEEEPT_PKc(%"class.v8::internal::Isolate"*, i8*) local_unnamed_addr #2

; Function Attrs: noreturn
declare void @_Z8V8_FatalPKcz(i8*, ...) local_unnamed_addr #5

declare i64* @_ZN2v88internal13BigIntLiteralINS0_12LocalIsolateEEENS0_11MaybeHandleINS0_6BigIntEEEPT_PKc(%"class.v8::internal::LocalIsolate"*, i8*) local_unnamed_addr #2

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden %"class.v8::internal::IterationStatement"* @_ZN2v88internal7AstNode20AsIterationStatementEv(%"class.v8::internal::AstNode"* readonly) local_unnamed_addr #3 align 2 {
  %2 = getelementptr inbounds %"class.v8::internal::AstNode", %"class.v8::internal::AstNode"* %0, i64 0, i32 1
  %3 = load i32, i32* %2, align 4
  %4 = trunc i32 %3 to i8
  %5 = and i8 %4, 63
  switch i8 %5, label %16 [
    i8 2, label %6
    i8 3, label %8
    i8 4, label %10
    i8 5, label %12
    i8 6, label %14
  ]

6:                                                ; preds = %1
  %7 = bitcast %"class.v8::internal::AstNode"* %0 to %"class.v8::internal::IterationStatement"*
  br label %16

8:                                                ; preds = %1
  %9 = bitcast %"class.v8::internal::AstNode"* %0 to %"class.v8::internal::IterationStatement"*
  br label %16

10:                                               ; preds = %1
  %11 = bitcast %"class.v8::internal::AstNode"* %0 to %"class.v8::internal::IterationStatement"*
  br label %16

12:                                               ; preds = %1
  %13 = bitcast %"class.v8::internal::AstNode"* %0 to %"class.v8::internal::IterationStatement"*
  br label %16

14:                                               ; preds = %1
  %15 = bitcast %"class.v8::internal::AstNode"* %0 to %"class.v8::internal::IterationStatement"*
  br label %16

16:                                               ; preds = %1, %14, %12, %10, %8, %6
  %17 = phi %"class.v8::internal::IterationStatement"* [ %15, %14 ], [ %13, %12 ], [ %11, %10 ], [ %9, %8 ], [ %7, %6 ], [ null, %1 ]
  ret %"class.v8::internal::IterationStatement"* %17
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden zeroext i1 @_ZNK2v88internal10Expression12IsSmiLiteralEv(%"class.v8::internal::Expression"* nocapture readonly) local_unnamed_addr #3 align 2 {
  %2 = getelementptr inbounds %"class.v8::internal::Expression", %"class.v8::internal::Expression"* %0, i64 0, i32 0, i32 1
  %3 = load i32, i32* %2, align 4
  %4 = and i32 %3, 1983
  %5 = icmp eq i32 %4, 41
  ret i1 %5
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden zeroext i1 @_ZNK2v88internal10Expression15IsNumberLiteralEv(%"class.v8::internal::Expression"* nocapture readonly) local_unnamed_addr #3 align 2 {
  %2 = getelementptr inbounds %"class.v8::internal::Expression", %"class.v8::internal::Expression"* %0, i64 0, i32 0, i32 1
  %3 = load i32, i32* %2, align 4
  %4 = and i32 %3, 1855
  %5 = icmp eq i32 %4, 41
  ret i1 %5
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden zeroext i1 @_ZNK2v88internal10Expression15IsStringLiteralEv(%"class.v8::internal::Expression"* nocapture readonly) local_unnamed_addr #3 align 2 {
  %2 = getelementptr inbounds %"class.v8::internal::Expression", %"class.v8::internal::Expression"* %0, i64 0, i32 0, i32 1
  %3 = load i32, i32* %2, align 4
  %4 = and i32 %3, 1983
  %5 = icmp eq i32 %4, 425
  ret i1 %5
}

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZNK2v88internal10Expression14IsPropertyNameEv(%"class.v8::internal::Expression"* nocapture readonly) local_unnamed_addr #0 align 2 {
  %2 = alloca i32, align 4
  %3 = getelementptr inbounds %"class.v8::internal::Expression", %"class.v8::internal::Expression"* %0, i64 0, i32 0, i32 1
  %4 = load i32, i32* %3, align 4
  %5 = and i32 %4, 1983
  %6 = icmp eq i32 %5, 425
  br i1 %6, label %7, label %14

7:                                                ; preds = %1
  %8 = bitcast i32* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %8) #11
  %9 = getelementptr inbounds %"class.v8::internal::Expression", %"class.v8::internal::Expression"* %0, i64 1
  %10 = bitcast %"class.v8::internal::Expression"* %9 to %"class.v8::internal::AstRawString"**
  %11 = load %"class.v8::internal::AstRawString"*, %"class.v8::internal::AstRawString"** %10, align 8
  %12 = call zeroext i1 @_ZNK2v88internal12AstRawString12AsArrayIndexEPj(%"class.v8::internal::AstRawString"* %11, i32* nonnull %2) #11
  %13 = xor i1 %12, true
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %8) #11
  br label %14

14:                                               ; preds = %7, %1
  %15 = phi i1 [ false, %1 ], [ %13, %7 ]
  ret i1 %15
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden zeroext i1 @_ZNK2v88internal10Expression13IsNullLiteralEv(%"class.v8::internal::Expression"* nocapture readonly) local_unnamed_addr #3 align 2 {
  %2 = getelementptr inbounds %"class.v8::internal::Expression", %"class.v8::internal::Expression"* %0, i64 0, i32 0, i32 1
  %3 = load i32, i32* %2, align 4
  %4 = and i32 %3, 1983
  %5 = icmp eq i32 %4, 809
  ret i1 %5
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden zeroext i1 @_ZNK2v88internal10Expression16IsTheHoleLiteralEv(%"class.v8::internal::Expression"* nocapture readonly) local_unnamed_addr #3 align 2 {
  %2 = getelementptr inbounds %"class.v8::internal::Expression", %"class.v8::internal::Expression"* %0, i64 0, i32 0, i32 1
  %3 = load i32, i32* %2, align 4
  %4 = and i32 %3, 1983
  %5 = icmp eq i32 %4, 937
  ret i1 %5
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden zeroext i1 @_ZNK2v88internal19MaterializedLiteral8IsSimpleEv(%"class.v8::internal::MaterializedLiteral"* nocapture readonly) local_unnamed_addr #3 align 2 {
  %2 = getelementptr inbounds %"class.v8::internal::MaterializedLiteral", %"class.v8::internal::MaterializedLiteral"* %0, i64 0, i32 0, i32 0, i32 1
  %3 = load i32, i32* %2, align 4
  %4 = and i32 %3, 63
  switch i32 %4, label %11 [
    i32 24, label %5
    i32 23, label %8
  ]

5:                                                ; preds = %1
  %6 = and i32 %3, 256
  %7 = icmp ne i32 %6, 0
  br label %11

8:                                                ; preds = %1
  %9 = and i32 %3, 256
  %10 = icmp ne i32 %9, 0
  br label %11

11:                                               ; preds = %1, %8, %5
  %12 = phi i1 [ %7, %5 ], [ %10, %8 ], [ false, %1 ]
  ret i1 %12
}

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZNK2v88internal10Expression18IsUndefinedLiteralEv(%"class.v8::internal::Expression"* readonly) local_unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.v8::internal::Expression", %"class.v8::internal::Expression"* %0, i64 0, i32 0, i32 1
  %3 = load i32, i32* %2, align 4
  %4 = and i32 %3, 63
  %5 = icmp eq i32 %4, 41
  br i1 %5, label %6, label %9

6:                                                ; preds = %1
  %7 = and i32 %3, 1920
  %8 = icmp eq i32 %7, 640
  ret i1 %8

9:                                                ; preds = %1
  %10 = icmp ne i32 %4, 52
  %11 = icmp eq %"class.v8::internal::Expression"* %0, null
  %12 = or i1 %11, %10
  br i1 %12, label %31, label %13

13:                                               ; preds = %9
  %14 = getelementptr inbounds %"class.v8::internal::Expression", %"class.v8::internal::Expression"* %0, i64 1
  %15 = bitcast %"class.v8::internal::Expression"* %14 to %"class.v8::internal::Variable"**
  %16 = load %"class.v8::internal::Variable"*, %"class.v8::internal::Variable"** %15, align 8
  %17 = icmp eq %"class.v8::internal::Variable"* %16, null
  br i1 %17, label %31, label %18

18:                                               ; preds = %13
  %19 = getelementptr inbounds %"class.v8::internal::Variable", %"class.v8::internal::Variable"* %16, i64 0, i32 6
  %20 = load i16, i16* %19, align 8
  %21 = and i16 %20, 896
  %22 = icmp eq i16 %21, 0
  br i1 %22, label %23, label %31

23:                                               ; preds = %18
  %24 = and i32 %3, 256
  %25 = icmp eq i32 %24, 0
  %26 = getelementptr inbounds %"class.v8::internal::Variable", %"class.v8::internal::Variable"* %16, i64 0, i32 1
  %27 = bitcast %"class.v8::internal::Expression"* %14 to %"class.v8::internal::AstRawString"**
  %28 = select i1 %25, %"class.v8::internal::AstRawString"** %27, %"class.v8::internal::AstRawString"** %26
  %29 = load %"class.v8::internal::AstRawString"*, %"class.v8::internal::AstRawString"** %28, align 8
  %30 = tail call zeroext i1 @_ZNK2v88internal12AstRawString16IsOneByteEqualToEPKc(%"class.v8::internal::AstRawString"* %29, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.1, i64 0, i64 0)) #11
  br label %31

31:                                               ; preds = %9, %13, %23, %18
  %32 = phi i1 [ false, %9 ], [ false, %18 ], [ false, %13 ], [ %30, %23 ]
  ret i1 %32
}

declare zeroext i1 @_ZNK2v88internal12AstRawString16IsOneByteEqualToEPKc(%"class.v8::internal::AstRawString"*, i8*) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZNK2v88internal10Expression30IsLiteralButNotNullOrUndefinedEv(%"class.v8::internal::Expression"* readonly) local_unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.v8::internal::Expression", %"class.v8::internal::Expression"* %0, i64 0, i32 0, i32 1
  %3 = load i32, i32* %2, align 4
  %4 = and i32 %3, 63
  %5 = icmp ne i32 %4, 41
  %6 = and i32 %3, 1983
  %7 = icmp eq i32 %6, 809
  %8 = or i1 %5, %7
  br i1 %8, label %12, label %9

9:                                                ; preds = %1
  %10 = and i32 %3, 1920
  %11 = icmp ne i32 %10, 640
  br label %12

12:                                               ; preds = %1, %9
  %13 = phi i1 [ false, %1 ], [ %11, %9 ]
  ret i1 %13
}

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZNK2v88internal10Expression15ToBooleanIsTrueEv(%"class.v8::internal::Expression"* nocapture readonly) local_unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.v8::internal::Expression", %"class.v8::internal::Expression"* %0, i64 0, i32 0, i32 1
  %3 = load i32, i32* %2, align 4
  %4 = and i32 %3, 63
  %5 = icmp eq i32 %4, 41
  br i1 %5, label %6, label %9

6:                                                ; preds = %1
  %7 = bitcast %"class.v8::internal::Expression"* %0 to %"class.v8::internal::Literal"*
  %8 = tail call zeroext i1 @_ZNK2v88internal7Literal15ToBooleanIsTrueEv(%"class.v8::internal::Literal"* %7)
  br label %9

9:                                                ; preds = %6, %1
  %10 = phi i1 [ false, %1 ], [ %8, %6 ]
  ret i1 %10
}

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZNK2v88internal7Literal15ToBooleanIsTrueEv(%"class.v8::internal::Literal"* nocapture readonly) local_unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.v8::internal::Literal", %"class.v8::internal::Literal"* %0, i64 0, i32 0, i32 0, i32 1
  %3 = load i32, i32* %2, align 4
  %4 = lshr i32 %3, 7
  %5 = and i32 %4, 15
  switch i32 %5, label %52 [
    i32 0, label %6
    i32 1, label %11
    i32 3, label %16
    i32 6, label %49
    i32 5, label %49
    i32 4, label %23
    i32 2, label %28
    i32 7, label %51
  ]

6:                                                ; preds = %1
  %7 = getelementptr inbounds %"class.v8::internal::Literal", %"class.v8::internal::Literal"* %0, i64 0, i32 1
  %8 = bitcast %union.anon.1138* %7 to i32*
  %9 = load i32, i32* %8, align 8
  %10 = icmp ne i32 %9, 0
  br label %49

11:                                               ; preds = %1
  %12 = getelementptr inbounds %"class.v8::internal::Literal", %"class.v8::internal::Literal"* %0, i64 0, i32 1
  %13 = bitcast %union.anon.1138* %12 to double*
  %14 = load double, double* %13, align 8
  %15 = tail call zeroext i1 @_ZN2v88internal15DoubleToBooleanEd(double %14) #11
  br label %49

16:                                               ; preds = %1
  %17 = getelementptr inbounds %"class.v8::internal::Literal", %"class.v8::internal::Literal"* %0, i64 0, i32 1, i32 0
  %18 = load %"class.v8::internal::AstRawString"*, %"class.v8::internal::AstRawString"** %17, align 8
  %19 = getelementptr inbounds %"class.v8::internal::AstRawString", %"class.v8::internal::AstRawString"* %18, i64 0, i32 1, i32 1
  %20 = load i64, i64* %19, align 8
  %21 = trunc i64 %20 to i32
  %22 = icmp ne i32 %21, 0
  br label %49

23:                                               ; preds = %1
  %24 = getelementptr inbounds %"class.v8::internal::Literal", %"class.v8::internal::Literal"* %0, i64 0, i32 1
  %25 = bitcast %union.anon.1138* %24 to i8*
  %26 = load i8, i8* %25, align 8, !range !2
  %27 = icmp ne i8 %26, 0
  br label %49

28:                                               ; preds = %1
  %29 = getelementptr inbounds %"class.v8::internal::Literal", %"class.v8::internal::Literal"* %0, i64 0, i32 1
  %30 = bitcast %union.anon.1138* %29 to i8**
  %31 = load i8*, i8** %30, align 8
  %32 = tail call i64 @strlen(i8* %31) #13
  %33 = icmp eq i64 %32, 1
  %34 = load i8, i8* %31, align 1
  %35 = icmp eq i8 %34, 48
  %36 = and i1 %33, %35
  br i1 %36, label %49, label %37

37:                                               ; preds = %28
  %38 = icmp eq i8 %34, 48
  %39 = select i1 %38, i64 2, i64 0
  %40 = icmp ult i64 %39, %32
  br i1 %40, label %43, label %49

41:                                               ; preds = %43
  %42 = icmp eq i64 %48, %32
  br i1 %42, label %49, label %43

43:                                               ; preds = %37, %41
  %44 = phi i64 [ %48, %41 ], [ %39, %37 ]
  %45 = getelementptr inbounds i8, i8* %31, i64 %44
  %46 = load i8, i8* %45, align 1
  %47 = icmp eq i8 %46, 48
  %48 = add i64 %44, 1
  br i1 %47, label %41, label %49

49:                                               ; preds = %43, %41, %28, %37, %6, %11, %16, %23, %1, %1
  %50 = phi i1 [ %27, %23 ], [ %22, %16 ], [ %15, %11 ], [ %10, %6 ], [ false, %1 ], [ false, %1 ], [ false, %37 ], [ false, %28 ], [ true, %43 ], [ false, %41 ]
  ret i1 %50

51:                                               ; preds = %1
  tail call void (i8*, ...) @_Z8V8_FatalPKcz(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str, i64 0, i64 0)) #12
  unreachable

52:                                               ; preds = %1
  tail call void (i8*, ...) @_Z8V8_FatalPKcz(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str, i64 0, i64 0)) #12
  unreachable
}

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZNK2v88internal10Expression16ToBooleanIsFalseEv(%"class.v8::internal::Expression"* nocapture readonly) local_unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.v8::internal::Expression", %"class.v8::internal::Expression"* %0, i64 0, i32 0, i32 1
  %3 = load i32, i32* %2, align 4
  %4 = and i32 %3, 63
  %5 = icmp eq i32 %4, 41
  br i1 %5, label %6, label %10

6:                                                ; preds = %1
  %7 = bitcast %"class.v8::internal::Expression"* %0 to %"class.v8::internal::Literal"*
  %8 = tail call zeroext i1 @_ZNK2v88internal7Literal15ToBooleanIsTrueEv(%"class.v8::internal::Literal"* %7) #11
  %9 = xor i1 %8, true
  br label %10

10:                                               ; preds = %6, %1
  %11 = phi i1 [ false, %1 ], [ %9, %6 ]
  ret i1 %11
}

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZNK2v88internal10Expression13IsPrivateNameEv(%"class.v8::internal::Expression"* nocapture readonly) local_unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.v8::internal::Expression", %"class.v8::internal::Expression"* %0, i64 0, i32 0, i32 1
  %3 = load i32, i32* %2, align 4
  %4 = and i32 %3, 63
  %5 = icmp eq i32 %4, 52
  br i1 %5, label %6, label %31

6:                                                ; preds = %1
  %7 = and i32 %3, 256
  %8 = icmp eq i32 %7, 0
  %9 = getelementptr inbounds %"class.v8::internal::Expression", %"class.v8::internal::Expression"* %0, i64 1
  br i1 %8, label %14, label %10

10:                                               ; preds = %6
  %11 = bitcast %"class.v8::internal::Expression"* %9 to %"class.v8::internal::Variable"**
  %12 = load %"class.v8::internal::Variable"*, %"class.v8::internal::Variable"** %11, align 8
  %13 = getelementptr inbounds %"class.v8::internal::Variable", %"class.v8::internal::Variable"* %12, i64 0, i32 1
  br label %16

14:                                               ; preds = %6
  %15 = bitcast %"class.v8::internal::Expression"* %9 to %"class.v8::internal::AstRawString"**
  br label %16

16:                                               ; preds = %14, %10
  %17 = phi %"class.v8::internal::AstRawString"** [ %13, %10 ], [ %15, %14 ]
  %18 = load %"class.v8::internal::AstRawString"*, %"class.v8::internal::AstRawString"** %17, align 8
  %19 = getelementptr inbounds %"class.v8::internal::AstRawString", %"class.v8::internal::AstRawString"* %18, i64 0, i32 3
  %20 = load i8, i8* %19, align 4, !range !2
  %21 = icmp eq i8 %20, 0
  %22 = getelementptr inbounds %"class.v8::internal::AstRawString", %"class.v8::internal::AstRawString"* %18, i64 0, i32 1, i32 1
  %23 = load i64, i64* %22, align 8
  %24 = trunc i64 %23 to i32
  %25 = sdiv i32 %24, 2
  %26 = select i1 %21, i32 %25, i32 %24
  %27 = icmp sgt i32 %26, 0
  br i1 %27, label %28, label %31

28:                                               ; preds = %16
  %29 = tail call zeroext i16 @_ZNK2v88internal12AstRawString14FirstCharacterEv(%"class.v8::internal::AstRawString"* %18) #11
  %30 = icmp eq i16 %29, 35
  br label %31

31:                                               ; preds = %28, %16, %1
  %32 = phi i1 [ false, %1 ], [ false, %16 ], [ %30, %28 ]
  ret i1 %32
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden zeroext i1 @_ZNK2v88internal10Expression26IsValidReferenceExpressionEv(%"class.v8::internal::Expression"* nocapture readonly) local_unnamed_addr #3 align 2 {
  %2 = getelementptr inbounds %"class.v8::internal::Expression", %"class.v8::internal::Expression"* %0, i64 0, i32 0, i32 1
  %3 = load i32, i32* %2, align 4
  %4 = and i32 %3, 63
  switch i32 %4, label %8 [
    i32 44, label %9
    i32 52, label %5
  ]

5:                                                ; preds = %1
  %6 = and i32 %3, 1024
  %7 = icmp eq i32 %6, 0
  br label %9

8:                                                ; preds = %1
  br label %9

9:                                                ; preds = %1, %8, %5
  %10 = phi i1 [ true, %1 ], [ %7, %5 ], [ false, %8 ]
  ret i1 %10
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden zeroext i1 @_ZNK2v88internal10Expression29IsAnonymousFunctionDefinitionEv(%"class.v8::internal::Expression"* nocapture readonly) local_unnamed_addr #3 align 2 {
  %2 = getelementptr inbounds %"class.v8::internal::Expression", %"class.v8::internal::Expression"* %0, i64 0, i32 0, i32 1
  %3 = load i32, i32* %2, align 4
  %4 = and i32 %3, 63
  switch i32 %4, label %11 [
    i32 38, label %5
    i32 32, label %8
  ]

5:                                                ; preds = %1
  %6 = and i32 %3, 896
  %7 = icmp eq i32 %6, 0
  ret i1 %7

8:                                                ; preds = %1
  %9 = and i32 %3, 512
  %10 = icmp ne i32 %9, 0
  br label %11

11:                                               ; preds = %1, %8
  %12 = phi i1 [ %10, %8 ], [ false, %1 ]
  ret i1 %12
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden zeroext i1 @_ZNK2v88internal10Expression25IsConciseMethodDefinitionEv(%"class.v8::internal::Expression"* nocapture readonly) local_unnamed_addr #3 align 2 {
  %2 = getelementptr inbounds %"class.v8::internal::Expression", %"class.v8::internal::Expression"* %0, i64 0, i32 0, i32 1
  %3 = load i32, i32* %2, align 4
  %4 = and i32 %3, 63
  %5 = icmp eq i32 %4, 38
  br i1 %5, label %6, label %17

6:                                                ; preds = %1
  %7 = getelementptr inbounds %"class.v8::internal::Expression", %"class.v8::internal::Expression"* %0, i64 5
  %8 = bitcast %"class.v8::internal::Expression"* %7 to %"class.v8::internal::DeclarationScope"**
  %9 = load %"class.v8::internal::DeclarationScope"*, %"class.v8::internal::DeclarationScope"** %8, align 8
  %10 = getelementptr inbounds %"class.v8::internal::DeclarationScope", %"class.v8::internal::DeclarationScope"* %9, i64 0, i32 2
  %11 = load i8, i8* %10, align 1
  %12 = add i8 %11, -14
  %13 = icmp ult i8 %12, 4
  %14 = add i8 %11, -20
  %15 = icmp ult i8 %14, 6
  %16 = or i1 %13, %15
  br label %17

17:                                               ; preds = %6, %1
  %18 = phi i1 [ false, %1 ], [ %16, %6 ]
  ret i1 %18
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden zeroext i8 @_ZNK2v88internal15FunctionLiteral4kindEv(%"class.v8::internal::FunctionLiteral"* nocapture readonly) local_unnamed_addr #3 align 2 {
  %2 = getelementptr inbounds %"class.v8::internal::FunctionLiteral", %"class.v8::internal::FunctionLiteral"* %0, i64 0, i32 8
  %3 = load %"class.v8::internal::DeclarationScope"*, %"class.v8::internal::DeclarationScope"** %2, align 8
  %4 = getelementptr inbounds %"class.v8::internal::DeclarationScope", %"class.v8::internal::DeclarationScope"* %3, i64 0, i32 2
  %5 = load i8, i8* %4, align 1
  ret i8 %5
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden zeroext i1 @_ZNK2v88internal10Expression28IsAccessorFunctionDefinitionEv(%"class.v8::internal::Expression"* nocapture readonly) local_unnamed_addr #3 align 2 {
  %2 = getelementptr inbounds %"class.v8::internal::Expression", %"class.v8::internal::Expression"* %0, i64 0, i32 0, i32 1
  %3 = load i32, i32* %2, align 4
  %4 = and i32 %3, 63
  %5 = icmp eq i32 %4, 38
  br i1 %5, label %6, label %14

6:                                                ; preds = %1
  %7 = getelementptr inbounds %"class.v8::internal::Expression", %"class.v8::internal::Expression"* %0, i64 5
  %8 = bitcast %"class.v8::internal::Expression"* %7 to %"class.v8::internal::DeclarationScope"**
  %9 = load %"class.v8::internal::DeclarationScope"*, %"class.v8::internal::DeclarationScope"** %8, align 8
  %10 = getelementptr inbounds %"class.v8::internal::DeclarationScope", %"class.v8::internal::DeclarationScope"* %9, i64 0, i32 2
  %11 = load i8, i8* %10, align 1
  %12 = add i8 %11, -7
  %13 = icmp ult i8 %12, 4
  br label %14

14:                                               ; preds = %6, %1
  %15 = phi i1 [ false, %1 ], [ %13, %6 ]
  ret i1 %15
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal13VariableProxyC2EPNS0_8VariableEi(%"class.v8::internal::VariableProxy"* nocapture, %"class.v8::internal::Variable"*, i32) unnamed_addr #0 align 2 {
  %4 = getelementptr inbounds %"class.v8::internal::VariableProxy", %"class.v8::internal::VariableProxy"* %0, i64 0, i32 0, i32 0, i32 0
  store i32 %2, i32* %4, align 4
  %5 = getelementptr inbounds %"class.v8::internal::VariableProxy", %"class.v8::internal::VariableProxy"* %0, i64 0, i32 0, i32 0, i32 1
  %6 = getelementptr inbounds %"class.v8::internal::VariableProxy", %"class.v8::internal::VariableProxy"* %0, i64 0, i32 2
  store %"class.v8::internal::VariableProxy"* null, %"class.v8::internal::VariableProxy"** %6, align 8
  %7 = getelementptr inbounds %"class.v8::internal::VariableProxy", %"class.v8::internal::VariableProxy"* %0, i64 0, i32 1
  %8 = bitcast %union.anon* %7 to %"class.v8::internal::Variable"**
  store %"class.v8::internal::Variable"* %1, %"class.v8::internal::Variable"** %8, align 8
  store i32 2356, i32* %5, align 4
  %9 = getelementptr inbounds %"class.v8::internal::Variable", %"class.v8::internal::Variable"* %1, i64 0, i32 6
  %10 = load i16, i16* %9, align 8
  %11 = or i16 %10, 2048
  store i16 %11, i16* %9, align 8
  %12 = load i32, i32* %5, align 4
  %13 = trunc i32 %12 to i8
  %14 = icmp slt i8 %13, 0
  br i1 %14, label %15, label %16

15:                                               ; preds = %3
  tail call void @_ZN2v88internal8Variable16SetMaybeAssignedEv(%"class.v8::internal::Variable"* %1) #11
  br label %16

16:                                               ; preds = %3, %15
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal13VariableProxy6BindToEPNS0_8VariableE(%"class.v8::internal::VariableProxy"* nocapture, %"class.v8::internal::Variable"*) local_unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.v8::internal::VariableProxy", %"class.v8::internal::VariableProxy"* %0, i64 0, i32 1
  %4 = bitcast %union.anon* %3 to %"class.v8::internal::Variable"**
  store %"class.v8::internal::Variable"* %1, %"class.v8::internal::Variable"** %4, align 8
  %5 = getelementptr inbounds %"class.v8::internal::VariableProxy", %"class.v8::internal::VariableProxy"* %0, i64 0, i32 0, i32 0, i32 1
  %6 = load i32, i32* %5, align 4
  %7 = or i32 %6, 256
  store i32 %7, i32* %5, align 4
  %8 = getelementptr inbounds %"class.v8::internal::Variable", %"class.v8::internal::Variable"* %1, i64 0, i32 6
  %9 = load i16, i16* %8, align 8
  %10 = or i16 %9, 2048
  store i16 %10, i16* %8, align 8
  %11 = load i32, i32* %5, align 4
  %12 = trunc i32 %11 to i8
  %13 = icmp slt i8 %12, 0
  br i1 %13, label %14, label %15

14:                                               ; preds = %2
  tail call void @_ZN2v88internal8Variable16SetMaybeAssignedEv(%"class.v8::internal::Variable"* %1)
  br label %15

15:                                               ; preds = %14, %2
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @_ZN2v88internal13VariableProxyC2EPKS1_(%"class.v8::internal::VariableProxy"* nocapture, %"class.v8::internal::VariableProxy"* nocapture readonly) unnamed_addr #6 align 2 {
  %3 = getelementptr inbounds %"class.v8::internal::VariableProxy", %"class.v8::internal::VariableProxy"* %1, i64 0, i32 0, i32 0, i32 0
  %4 = load i32, i32* %3, align 4
  %5 = getelementptr inbounds %"class.v8::internal::VariableProxy", %"class.v8::internal::VariableProxy"* %0, i64 0, i32 0, i32 0, i32 0
  store i32 %4, i32* %5, align 4
  %6 = getelementptr inbounds %"class.v8::internal::VariableProxy", %"class.v8::internal::VariableProxy"* %0, i64 0, i32 0, i32 0, i32 1
  store i32 52, i32* %6, align 4
  %7 = getelementptr inbounds %"class.v8::internal::VariableProxy", %"class.v8::internal::VariableProxy"* %0, i64 0, i32 2
  store %"class.v8::internal::VariableProxy"* null, %"class.v8::internal::VariableProxy"** %7, align 8
  %8 = getelementptr inbounds %"class.v8::internal::VariableProxy", %"class.v8::internal::VariableProxy"* %1, i64 0, i32 0, i32 0, i32 1
  %9 = load i32, i32* %8, align 4
  store i32 %9, i32* %6, align 4
  %10 = getelementptr inbounds %"class.v8::internal::VariableProxy", %"class.v8::internal::VariableProxy"* %1, i64 0, i32 1, i32 0
  %11 = bitcast %"class.v8::internal::AstRawString"** %10 to i64*
  %12 = load i64, i64* %11, align 8
  %13 = getelementptr inbounds %"class.v8::internal::VariableProxy", %"class.v8::internal::VariableProxy"* %0, i64 0, i32 1
  %14 = bitcast %union.anon* %13 to i64*
  store i64 %12, i64* %14, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN2v88internal8Variable16SetMaybeAssignedEv(%"class.v8::internal::Variable"*) local_unnamed_addr #0 comdat align 2 {
  %2 = getelementptr inbounds %"class.v8::internal::Variable", %"class.v8::internal::Variable"* %0, i64 0, i32 6
  %3 = load i16, i16* %2, align 8
  %4 = and i16 %3, 15
  %5 = icmp eq i16 %4, 1
  br i1 %5, label %33, label %6

6:                                                ; preds = %1
  %7 = getelementptr inbounds %"class.v8::internal::Variable", %"class.v8::internal::Variable"* %0, i64 0, i32 1
  %8 = load %"class.v8::internal::AstRawString"*, %"class.v8::internal::AstRawString"** %7, align 8
  %9 = getelementptr inbounds %"class.v8::internal::AstRawString", %"class.v8::internal::AstRawString"* %8, i64 0, i32 3
  %10 = load i8, i8* %9, align 4, !range !2
  %11 = icmp eq i8 %10, 0
  %12 = getelementptr inbounds %"class.v8::internal::AstRawString", %"class.v8::internal::AstRawString"* %8, i64 0, i32 1, i32 1
  %13 = load i64, i64* %12, align 8
  %14 = trunc i64 %13 to i32
  %15 = sdiv i32 %14, 2
  %16 = select i1 %11, i32 %15, i32 %14
  %17 = icmp sgt i32 %16, 0
  br i1 %17, label %18, label %21

18:                                               ; preds = %6
  %19 = tail call zeroext i16 @_ZNK2v88internal12AstRawString14FirstCharacterEv(%"class.v8::internal::AstRawString"* %8) #11
  %20 = icmp eq i16 %19, 35
  br i1 %20, label %33, label %21

21:                                               ; preds = %6, %18
  %22 = getelementptr inbounds %"class.v8::internal::Variable", %"class.v8::internal::Variable"* %0, i64 0, i32 2
  %23 = load %"class.v8::internal::Variable"*, %"class.v8::internal::Variable"** %22, align 8
  %24 = icmp eq %"class.v8::internal::Variable"* %23, null
  br i1 %24, label %30, label %25

25:                                               ; preds = %21
  %26 = load i16, i16* %2, align 8
  %27 = and i16 %26, 16384
  %28 = icmp eq i16 %27, 0
  br i1 %28, label %29, label %30

29:                                               ; preds = %25
  tail call void @_ZN2v88internal8Variable16SetMaybeAssignedEv(%"class.v8::internal::Variable"* nonnull %23)
  br label %30

30:                                               ; preds = %21, %25, %29
  %31 = load i16, i16* %2, align 8
  %32 = or i16 %31, 16384
  store i16 %32, i16* %2, align 8
  br label %33

33:                                               ; preds = %18, %1, %30
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @_ZN2v88internal10AssignmentC2ENS0_7AstNode8NodeTypeENS0_5Token5ValueEPNS0_10ExpressionES7_i(%"class.v8::internal::Assignment"* nocapture, i8 zeroext, i8 zeroext, %"class.v8::internal::Expression"*, %"class.v8::internal::Expression"*, i32) unnamed_addr #6 align 2 {
  %7 = getelementptr inbounds %"class.v8::internal::Assignment", %"class.v8::internal::Assignment"* %0, i64 0, i32 0, i32 0, i32 0
  store i32 %5, i32* %7, align 4
  %8 = getelementptr inbounds %"class.v8::internal::Assignment", %"class.v8::internal::Assignment"* %0, i64 0, i32 0, i32 0, i32 1
  %9 = zext i8 %1 to i32
  %10 = getelementptr inbounds %"class.v8::internal::Assignment", %"class.v8::internal::Assignment"* %0, i64 0, i32 1
  store %"class.v8::internal::Expression"* %3, %"class.v8::internal::Expression"** %10, align 8
  %11 = getelementptr inbounds %"class.v8::internal::Assignment", %"class.v8::internal::Assignment"* %0, i64 0, i32 2
  store %"class.v8::internal::Expression"* %4, %"class.v8::internal::Expression"** %11, align 8
  %12 = zext i8 %2 to i32
  %13 = shl nuw nsw i32 %12, 7
  %14 = or i32 %13, %9
  store i32 %14, i32* %8, align 4
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @_ZN2v88internal15FunctionLiteral17set_inferred_nameENS0_6HandleINS0_6StringEEE(%"class.v8::internal::FunctionLiteral"* nocapture, i64*) local_unnamed_addr #6 align 2 {
  %3 = getelementptr inbounds %"class.v8::internal::FunctionLiteral", %"class.v8::internal::FunctionLiteral"* %0, i64 0, i32 11, i32 0, i32 0
  store i64* %1, i64** %3, align 8
  %4 = getelementptr inbounds %"class.v8::internal::FunctionLiteral", %"class.v8::internal::FunctionLiteral"* %0, i64 0, i32 10
  store %"class.v8::internal::AstConsString"* null, %"class.v8::internal::AstConsString"** %4, align 8
  %5 = getelementptr inbounds %"class.v8::internal::FunctionLiteral", %"class.v8::internal::FunctionLiteral"* %0, i64 0, i32 8
  %6 = load %"class.v8::internal::DeclarationScope"*, %"class.v8::internal::DeclarationScope"** %5, align 8
  %7 = getelementptr inbounds %"class.v8::internal::DeclarationScope", %"class.v8::internal::DeclarationScope"* %6, i64 0, i32 1
  %8 = load i16, i16* %7, align 1
  %9 = or i16 %8, 512
  store i16 %9, i16* %7, align 1
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal15FunctionLiteral21set_raw_inferred_nameEPNS0_13AstConsStringE(%"class.v8::internal::FunctionLiteral"* nocapture, %"class.v8::internal::AstConsString"*) local_unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.v8::internal::FunctionLiteral", %"class.v8::internal::FunctionLiteral"* %0, i64 0, i32 10
  store %"class.v8::internal::AstConsString"* %1, %"class.v8::internal::AstConsString"** %3, align 8
  %4 = getelementptr inbounds %"class.v8::internal::FunctionLiteral", %"class.v8::internal::FunctionLiteral"* %0, i64 0, i32 11
  %5 = bitcast %"class.v8::internal::Handle.20"* %4 to i64*
  store i64 0, i64* %5, align 8
  %6 = getelementptr inbounds %"class.v8::internal::FunctionLiteral", %"class.v8::internal::FunctionLiteral"* %0, i64 0, i32 8
  %7 = load %"class.v8::internal::DeclarationScope"*, %"class.v8::internal::DeclarationScope"** %6, align 8
  %8 = getelementptr inbounds %"class.v8::internal::DeclarationScope", %"class.v8::internal::DeclarationScope"* %7, i64 0, i32 1
  %9 = load i16, i16* %8, align 1
  %10 = or i16 %9, 512
  store i16 %10, i16* %8, align 1
  ret void
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden zeroext i1 @_ZNK2v88internal15FunctionLiteral18ShouldEagerCompileEv(%"class.v8::internal::FunctionLiteral"* nocapture readonly) local_unnamed_addr #3 align 2 {
  %2 = getelementptr inbounds %"class.v8::internal::FunctionLiteral", %"class.v8::internal::FunctionLiteral"* %0, i64 0, i32 8
  %3 = load %"class.v8::internal::DeclarationScope"*, %"class.v8::internal::DeclarationScope"** %2, align 8
  %4 = getelementptr inbounds %"class.v8::internal::DeclarationScope", %"class.v8::internal::DeclarationScope"* %3, i64 0, i32 1
  %5 = load i16, i16* %4, align 1
  %6 = and i16 %5, 68
  %7 = icmp ne i16 %6, 0
  ret i1 %7
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal15FunctionLiteral21SetShouldEagerCompileEv(%"class.v8::internal::FunctionLiteral"* nocapture readonly) local_unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.v8::internal::FunctionLiteral", %"class.v8::internal::FunctionLiteral"* %0, i64 0, i32 8
  %3 = load %"class.v8::internal::DeclarationScope"*, %"class.v8::internal::DeclarationScope"** %2, align 8
  tail call void @_ZN2v88internal16DeclarationScope24set_should_eager_compileEv(%"class.v8::internal::DeclarationScope"* %3) #11
  ret void
}

declare void @_ZN2v88internal16DeclarationScope24set_should_eager_compileEv(%"class.v8::internal::DeclarationScope"*) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN2v88internal15FunctionLiteral21AllowsLazyCompilationEv(%"class.v8::internal::FunctionLiteral"* nocapture readonly) local_unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.v8::internal::FunctionLiteral", %"class.v8::internal::FunctionLiteral"* %0, i64 0, i32 8
  %3 = load %"class.v8::internal::DeclarationScope"*, %"class.v8::internal::DeclarationScope"** %2, align 8
  %4 = tail call zeroext i1 @_ZNK2v88internal16DeclarationScope21AllowsLazyCompilationEv(%"class.v8::internal::DeclarationScope"* %3) #11
  ret i1 %4
}

declare zeroext i1 @_ZNK2v88internal16DeclarationScope21AllowsLazyCompilationEv(%"class.v8::internal::DeclarationScope"*) local_unnamed_addr #2

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden i32 @_ZNK2v88internal15FunctionLiteral14start_positionEv(%"class.v8::internal::FunctionLiteral"* nocapture readonly) local_unnamed_addr #3 align 2 {
  %2 = getelementptr inbounds %"class.v8::internal::FunctionLiteral", %"class.v8::internal::FunctionLiteral"* %0, i64 0, i32 8
  %3 = bitcast %"class.v8::internal::DeclarationScope"** %2 to %"class.v8::internal::Scope"**
  %4 = load %"class.v8::internal::Scope"*, %"class.v8::internal::Scope"** %3, align 8
  %5 = getelementptr inbounds %"class.v8::internal::Scope", %"class.v8::internal::Scope"* %4, i64 0, i32 8
  %6 = load i32, i32* %5, align 8
  ret i32 %6
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden i32 @_ZNK2v88internal15FunctionLiteral12end_positionEv(%"class.v8::internal::FunctionLiteral"* nocapture readonly) local_unnamed_addr #3 align 2 {
  %2 = getelementptr inbounds %"class.v8::internal::FunctionLiteral", %"class.v8::internal::FunctionLiteral"* %0, i64 0, i32 8
  %3 = bitcast %"class.v8::internal::DeclarationScope"** %2 to %"class.v8::internal::Scope"**
  %4 = load %"class.v8::internal::Scope"*, %"class.v8::internal::Scope"** %3, align 8
  %5 = getelementptr inbounds %"class.v8::internal::Scope", %"class.v8::internal::Scope"* %4, i64 0, i32 9
  %6 = load i32, i32* %5, align 4
  ret i32 %6
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden zeroext i1 @_ZNK2v88internal15FunctionLiteral13language_modeEv(%"class.v8::internal::FunctionLiteral"* nocapture readonly) local_unnamed_addr #3 align 2 {
  %2 = getelementptr inbounds %"class.v8::internal::FunctionLiteral", %"class.v8::internal::FunctionLiteral"* %0, i64 0, i32 8
  %3 = bitcast %"class.v8::internal::DeclarationScope"** %2 to %"class.v8::internal::Scope"**
  %4 = load %"class.v8::internal::Scope"*, %"class.v8::internal::Scope"** %3, align 8
  %5 = getelementptr inbounds %"class.v8::internal::Scope", %"class.v8::internal::Scope"* %4, i64 0, i32 13
  %6 = load i16, i16* %5, align 1
  %7 = and i16 %6, 1
  %8 = icmp ne i16 %7, 0
  ret i1 %8
}

; Function Attrs: nounwind ssp uwtable
define hidden i8* @_ZNK2v88internal15FunctionLiteral12GetDebugNameEv(%"class.v8::internal::FunctionLiteral"* nocapture readonly) local_unnamed_addr #0 align 2 {
  %2 = alloca %"class.v8::internal::Handle<v8::internal::String>::ObjectRef", align 8
  %3 = alloca %"class.std::__1::vector.1176", align 8
  %4 = alloca %"class.std::__1::forward_list", align 8
  %5 = getelementptr inbounds %"class.v8::internal::FunctionLiteral", %"class.v8::internal::FunctionLiteral"* %0, i64 0, i32 7
  %6 = load %"class.v8::internal::AstConsString"*, %"class.v8::internal::AstConsString"** %5, align 8
  %7 = icmp eq %"class.v8::internal::AstConsString"* %6, null
  br i1 %7, label %12, label %8

8:                                                ; preds = %1
  %9 = getelementptr inbounds %"class.v8::internal::AstConsString", %"class.v8::internal::AstConsString"* %6, i64 0, i32 1, i32 0
  %10 = load %"class.v8::internal::AstRawString"*, %"class.v8::internal::AstRawString"** %9, align 8
  %11 = icmp eq %"class.v8::internal::AstRawString"* %10, null
  br i1 %11, label %12, label %32

12:                                               ; preds = %1, %8
  %13 = getelementptr inbounds %"class.v8::internal::FunctionLiteral", %"class.v8::internal::FunctionLiteral"* %0, i64 0, i32 10
  %14 = load %"class.v8::internal::AstConsString"*, %"class.v8::internal::AstConsString"** %13, align 8
  %15 = icmp eq %"class.v8::internal::AstConsString"* %14, null
  br i1 %15, label %20, label %16

16:                                               ; preds = %12
  %17 = getelementptr inbounds %"class.v8::internal::AstConsString", %"class.v8::internal::AstConsString"* %14, i64 0, i32 1, i32 0
  %18 = load %"class.v8::internal::AstRawString"*, %"class.v8::internal::AstRawString"** %17, align 8
  %19 = icmp eq %"class.v8::internal::AstRawString"* %18, null
  br i1 %19, label %20, label %32

20:                                               ; preds = %12, %16
  %21 = getelementptr inbounds %"class.v8::internal::FunctionLiteral", %"class.v8::internal::FunctionLiteral"* %0, i64 0, i32 11, i32 0, i32 0
  %22 = load i64*, i64** %21, align 8
  %23 = icmp eq i64* %22, null
  br i1 %23, label %30, label %24

24:                                               ; preds = %20
  %25 = bitcast %"class.v8::internal::Handle<v8::internal::String>::ObjectRef"* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %25) #11
  %26 = load i64, i64* %22, align 8
  %27 = getelementptr inbounds %"class.v8::internal::Handle<v8::internal::String>::ObjectRef", %"class.v8::internal::Handle<v8::internal::String>::ObjectRef"* %2, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  store i64 %26, i64* %27, align 8
  %28 = getelementptr inbounds %"class.v8::internal::Handle<v8::internal::String>::ObjectRef", %"class.v8::internal::Handle<v8::internal::String>::ObjectRef"* %2, i64 0, i32 0
  %29 = call i8* @_ZN2v88internal6String9ToCStringENS0_14AllowNullsFlagENS0_14RobustnessFlagEPi(%"class.v8::internal::String"* nonnull %28, i32 1, i32 1, i32* null) #11
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %25) #11
  br label %152

30:                                               ; preds = %20
  %31 = tail call i8* @_Znam(i64 1) #14
  store i8 0, i8* %31, align 1
  br label %152

32:                                               ; preds = %16, %8
  %33 = phi %"class.v8::internal::AstConsString"* [ %6, %8 ], [ %14, %16 ]
  %34 = bitcast %"class.std::__1::vector.1176"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %34) #11
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %34, i8 0, i64 24, i1 false) #11
  %35 = bitcast %"class.std::__1::forward_list"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %35) #11
  call void @_ZNK2v88internal13AstConsString12ToRawStringsEv(%"class.std::__1::forward_list"* nonnull sret %4, %"class.v8::internal::AstConsString"* nonnull %33) #11
  %36 = getelementptr inbounds %"class.std::__1::forward_list", %"class.std::__1::forward_list"* %4, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %37 = load %"struct.std::__1::__forward_list_node"*, %"struct.std::__1::__forward_list_node"** %36, align 8
  %38 = icmp eq %"struct.std::__1::__forward_list_node"* %37, null
  br i1 %38, label %124, label %39

39:                                               ; preds = %32
  %40 = getelementptr inbounds %"class.std::__1::vector.1176", %"class.std::__1::vector.1176"* %3, i64 0, i32 0, i32 1
  %41 = getelementptr inbounds %"class.std::__1::vector.1176", %"class.std::__1::vector.1176"* %3, i64 0, i32 0, i32 2, i32 0, i32 0
  %42 = bitcast i8** %40 to i64*
  %43 = bitcast %"class.std::__1::vector.1176"* %3 to i64*
  %44 = bitcast i8** %41 to i64*
  br label %45

45:                                               ; preds = %39, %115
  %46 = phi %"struct.std::__1::__forward_list_node"* [ %37, %39 ], [ %117, %115 ]
  %47 = getelementptr inbounds %"struct.std::__1::__forward_list_node", %"struct.std::__1::__forward_list_node"* %46, i64 0, i32 1
  %48 = load %"class.v8::internal::AstRawString"*, %"class.v8::internal::AstRawString"** %47, align 8
  %49 = getelementptr inbounds %"class.v8::internal::AstRawString", %"class.v8::internal::AstRawString"* %48, i64 0, i32 3
  %50 = load i8, i8* %49, align 4, !range !2
  %51 = icmp eq i8 %50, 0
  br i1 %51, label %119, label %52

52:                                               ; preds = %45
  %53 = getelementptr inbounds %"class.v8::internal::AstRawString", %"class.v8::internal::AstRawString"* %48, i64 0, i32 1, i32 1
  %54 = load i64, i64* %53, align 8
  %55 = trunc i64 %54 to i32
  %56 = icmp sgt i32 %55, 0
  br i1 %56, label %57, label %115

57:                                               ; preds = %52
  %58 = getelementptr inbounds %"class.v8::internal::AstRawString", %"class.v8::internal::AstRawString"* %48, i64 0, i32 1, i32 0
  br label %59

59:                                               ; preds = %57, %105
  %60 = phi i64 [ 0, %57 ], [ %106, %105 ]
  %61 = load i8*, i8** %58, align 8
  %62 = getelementptr inbounds i8, i8* %61, i64 %60
  %63 = load i8, i8* %62, align 1
  %64 = load i8*, i8** %40, align 8
  %65 = load i8*, i8** %41, align 8
  %66 = icmp ult i8* %64, %65
  %67 = ptrtoint i8* %65 to i64
  br i1 %66, label %68, label %71

68:                                               ; preds = %59
  store i8 %63, i8* %64, align 1
  %69 = getelementptr inbounds i8, i8* %64, i64 1
  %70 = ptrtoint i8* %69 to i64
  store i64 %70, i64* %42, align 8
  br label %105

71:                                               ; preds = %59
  %72 = ptrtoint i8* %64 to i64
  %73 = load i64, i64* %43, align 8
  %74 = sub i64 %72, %73
  %75 = add i64 %74, 1
  %76 = icmp slt i64 %75, 0
  %77 = inttoptr i64 %73 to i8*
  br i1 %76, label %78, label %80

78:                                               ; preds = %71
  %79 = bitcast %"class.std::__1::vector.1176"* %3 to %"class.std::__1::__vector_base_common"*
  call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* nonnull %79) #12
  unreachable

80:                                               ; preds = %71
  %81 = sub i64 %67, %73
  %82 = icmp ult i64 %81, 4611686018427387903
  br i1 %82, label %83, label %88

83:                                               ; preds = %80
  %84 = shl i64 %81, 1
  %85 = icmp ult i64 %84, %75
  %86 = select i1 %85, i64 %75, i64 %84
  %87 = icmp eq i64 %86, 0
  br i1 %87, label %91, label %88

88:                                               ; preds = %83, %80
  %89 = phi i64 [ %86, %83 ], [ 9223372036854775807, %80 ]
  %90 = call i8* @_Znwm(i64 %89) #14
  br label %91

91:                                               ; preds = %88, %83
  %92 = phi i64 [ %89, %88 ], [ 0, %83 ]
  %93 = phi i8* [ %90, %88 ], [ null, %83 ]
  %94 = getelementptr inbounds i8, i8* %93, i64 %74
  %95 = getelementptr inbounds i8, i8* %93, i64 %92
  %96 = ptrtoint i8* %95 to i64
  store i8 %63, i8* %94, align 1
  %97 = getelementptr inbounds i8, i8* %94, i64 1
  %98 = ptrtoint i8* %97 to i64
  %99 = ptrtoint i8* %93 to i64
  %100 = icmp sgt i64 %74, 0
  br i1 %100, label %101, label %102

101:                                              ; preds = %91
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %93, i8* align 1 %77, i64 %74, i1 false) #11
  br label %102

102:                                              ; preds = %101, %91
  store i64 %99, i64* %43, align 8
  store i64 %98, i64* %42, align 8
  store i64 %96, i64* %44, align 8
  %103 = icmp eq i64 %73, 0
  br i1 %103, label %105, label %104

104:                                              ; preds = %102
  call void @_ZdlPv(i8* nonnull %77) #14
  br label %105

105:                                              ; preds = %68, %102, %104
  %106 = add nuw nsw i64 %60, 1
  %107 = load i8, i8* %49, align 4, !range !2
  %108 = icmp eq i8 %107, 0
  %109 = load i64, i64* %53, align 8
  %110 = trunc i64 %109 to i32
  %111 = sdiv i32 %110, 2
  %112 = select i1 %108, i32 %111, i32 %110
  %113 = sext i32 %112 to i64
  %114 = icmp slt i64 %106, %113
  br i1 %114, label %59, label %115

115:                                              ; preds = %105, %52
  %116 = getelementptr inbounds %"struct.std::__1::__forward_list_node", %"struct.std::__1::__forward_list_node"* %46, i64 0, i32 0, i32 0
  %117 = load %"struct.std::__1::__forward_list_node"*, %"struct.std::__1::__forward_list_node"** %116, align 8
  %118 = icmp eq %"struct.std::__1::__forward_list_node"* %117, null
  br i1 %118, label %119, label %45

119:                                              ; preds = %45, %115
  %120 = load i64, i64* %42, align 8
  %121 = load i64, i64* %43, align 8
  %122 = load %"struct.std::__1::__forward_list_node"*, %"struct.std::__1::__forward_list_node"** %36, align 8
  %123 = inttoptr i64 %121 to i8*
  br label %124

124:                                              ; preds = %32, %119
  %125 = phi i8* [ %123, %119 ], [ null, %32 ]
  %126 = phi %"struct.std::__1::__forward_list_node"* [ %122, %119 ], [ null, %32 ]
  %127 = phi i64 [ %121, %119 ], [ 0, %32 ]
  %128 = phi i64 [ %120, %119 ], [ 0, %32 ]
  %129 = getelementptr inbounds %"class.std::__1::vector.1176", %"class.std::__1::vector.1176"* %3, i64 0, i32 0, i32 1
  %130 = bitcast i8** %129 to i64*
  %131 = sub i64 %128, %127
  %132 = add i64 %131, 1
  %133 = call i8* @_Znam(i64 %132) #14
  %134 = getelementptr inbounds %"class.std::__1::vector.1176", %"class.std::__1::vector.1176"* %3, i64 0, i32 0, i32 0
  %135 = inttoptr i64 %127 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 1 %133, i8* align 1 %135, i64 %131, i1 false) #11
  %136 = getelementptr inbounds i8, i8* %133, i64 %131
  store i8 0, i8* %136, align 1
  %137 = icmp eq %"struct.std::__1::__forward_list_node"* %126, null
  br i1 %137, label %146, label %138

138:                                              ; preds = %124, %138
  %139 = phi %"struct.std::__1::__forward_list_node"* [ %142, %138 ], [ %126, %124 ]
  %140 = bitcast %"struct.std::__1::__forward_list_node"* %139 to i8*
  %141 = getelementptr inbounds %"struct.std::__1::__forward_list_node", %"struct.std::__1::__forward_list_node"* %139, i64 0, i32 0, i32 0
  %142 = load %"struct.std::__1::__forward_list_node"*, %"struct.std::__1::__forward_list_node"** %141, align 8
  call void @_ZdlPv(i8* %140) #14
  %143 = icmp eq %"struct.std::__1::__forward_list_node"* %142, null
  br i1 %143, label %144, label %138

144:                                              ; preds = %138
  %145 = load i8*, i8** %134, align 8
  br label %146

146:                                              ; preds = %144, %124
  %147 = phi i8* [ %145, %144 ], [ %125, %124 ]
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %35) #11
  %148 = icmp eq i8* %147, null
  br i1 %148, label %151, label %149

149:                                              ; preds = %146
  %150 = ptrtoint i8* %147 to i64
  store i64 %150, i64* %130, align 8
  call void @_ZdlPv(i8* nonnull %147) #14
  br label %151

151:                                              ; preds = %146, %149
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %34) #11
  br label %152

152:                                              ; preds = %151, %30, %24
  %153 = phi i8* [ %31, %30 ], [ %29, %24 ], [ %133, %151 ]
  ret i8* %153
}

declare i8* @_ZN2v88internal6String9ToCStringENS0_14AllowNullsFlagENS0_14RobustnessFlagEPi(%"class.v8::internal::String"*, i32, i32, i32*) local_unnamed_addr #2

; Function Attrs: nobuiltin nofree
declare noalias nonnull i8* @_Znam(i64) local_unnamed_addr #7

declare void @_ZNK2v88internal13AstConsString12ToRawStringsEv(%"class.std::__1::forward_list"* sret, %"class.v8::internal::AstConsString"*) local_unnamed_addr #2

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden zeroext i1 @_ZNK2v88internal15FunctionLiteral37private_name_lookup_skips_outer_classEv(%"class.v8::internal::FunctionLiteral"* nocapture readonly) local_unnamed_addr #3 align 2 {
  %2 = getelementptr inbounds %"class.v8::internal::FunctionLiteral", %"class.v8::internal::FunctionLiteral"* %0, i64 0, i32 8
  %3 = bitcast %"class.v8::internal::DeclarationScope"** %2 to %"class.v8::internal::Scope"**
  %4 = load %"class.v8::internal::Scope"*, %"class.v8::internal::Scope"** %3, align 8
  %5 = getelementptr inbounds %"class.v8::internal::Scope", %"class.v8::internal::Scope"* %4, i64 0, i32 13
  %6 = load i16, i16* %5, align 1
  %7 = and i16 %6, 512
  %8 = icmp ne i16 %7, 0
  ret i1 %8
}

; Function Attrs: nofree norecurse nounwind ssp uwtable writeonly
define hidden void @_ZN2v88internal21ObjectLiteralPropertyC2EPNS0_10ExpressionES3_NS1_4KindEb(%"class.v8::internal::ObjectLiteralProperty"* nocapture, %"class.v8::internal::Expression"*, %"class.v8::internal::Expression"*, i8 zeroext, i1 zeroext) unnamed_addr #8 align 2 {
  %6 = getelementptr inbounds %"class.v8::internal::ObjectLiteralProperty", %"class.v8::internal::ObjectLiteralProperty"* %0, i64 0, i32 0, i32 0, i32 0
  %7 = ptrtoint %"class.v8::internal::Expression"* %1 to i64
  %8 = zext i1 %4 to i64
  %9 = or i64 %8, %7
  store i64 %9, i64* %6, align 8
  %10 = getelementptr inbounds %"class.v8::internal::ObjectLiteralProperty", %"class.v8::internal::ObjectLiteralProperty"* %0, i64 0, i32 0, i32 1
  store %"class.v8::internal::Expression"* %2, %"class.v8::internal::Expression"** %10, align 8
  %11 = getelementptr inbounds %"class.v8::internal::ObjectLiteralProperty", %"class.v8::internal::ObjectLiteralProperty"* %0, i64 0, i32 1
  store i8 %3, i8* %11, align 8
  %12 = getelementptr inbounds %"class.v8::internal::ObjectLiteralProperty", %"class.v8::internal::ObjectLiteralProperty"* %0, i64 0, i32 2
  store i8 1, i8* %12, align 1
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @_ZN2v88internal21ObjectLiteralPropertyC2EPNS0_15AstValueFactoryEPNS0_10ExpressionES5_b(%"class.v8::internal::ObjectLiteralProperty"* nocapture, %"class.v8::internal::AstValueFactory"* nocapture readonly, %"class.v8::internal::Expression"*, %"class.v8::internal::Expression"*, i1 zeroext) unnamed_addr #6 align 2 {
  %6 = getelementptr inbounds %"class.v8::internal::ObjectLiteralProperty", %"class.v8::internal::ObjectLiteralProperty"* %0, i64 0, i32 0, i32 0, i32 0
  %7 = ptrtoint %"class.v8::internal::Expression"* %2 to i64
  %8 = zext i1 %4 to i64
  %9 = or i64 %8, %7
  store i64 %9, i64* %6, align 8
  %10 = getelementptr inbounds %"class.v8::internal::ObjectLiteralProperty", %"class.v8::internal::ObjectLiteralProperty"* %0, i64 0, i32 0, i32 1
  store %"class.v8::internal::Expression"* %3, %"class.v8::internal::Expression"** %10, align 8
  %11 = getelementptr inbounds %"class.v8::internal::ObjectLiteralProperty", %"class.v8::internal::ObjectLiteralProperty"* %0, i64 0, i32 2
  store i8 1, i8* %11, align 1
  br i1 %4, label %33, label %12

12:                                               ; preds = %5
  %13 = getelementptr inbounds %"class.v8::internal::Expression", %"class.v8::internal::Expression"* %2, i64 0, i32 0, i32 1
  %14 = load i32, i32* %13, align 4
  %15 = and i32 %14, 63
  %16 = icmp eq i32 %15, 41
  %17 = bitcast %"class.v8::internal::Expression"* %2 to %"class.v8::internal::Literal"*
  %18 = select i1 %16, %"class.v8::internal::Literal"* %17, %"class.v8::internal::Literal"* null
  %19 = getelementptr inbounds %"class.v8::internal::Literal", %"class.v8::internal::Literal"* %18, i64 0, i32 0, i32 0, i32 1
  %20 = load i32, i32* %19, align 4
  %21 = and i32 %20, 1920
  %22 = icmp eq i32 %21, 384
  br i1 %22, label %23, label %33

23:                                               ; preds = %12
  %24 = getelementptr inbounds %"class.v8::internal::Literal", %"class.v8::internal::Literal"* %18, i64 0, i32 1, i32 0
  %25 = load %"class.v8::internal::AstRawString"*, %"class.v8::internal::AstRawString"** %24, align 8
  %26 = getelementptr inbounds %"class.v8::internal::AstValueFactory", %"class.v8::internal::AstValueFactory"* %1, i64 0, i32 3
  %27 = load %"class.v8::internal::AstStringConstants"*, %"class.v8::internal::AstStringConstants"** %26, align 8
  %28 = getelementptr inbounds %"class.v8::internal::AstStringConstants", %"class.v8::internal::AstStringConstants"* %27, i64 0, i32 44
  %29 = load %"class.v8::internal::AstRawString"*, %"class.v8::internal::AstRawString"** %28, align 8
  %30 = icmp eq %"class.v8::internal::AstRawString"* %25, %29
  br i1 %30, label %31, label %33

31:                                               ; preds = %23
  %32 = getelementptr inbounds %"class.v8::internal::ObjectLiteralProperty", %"class.v8::internal::ObjectLiteralProperty"* %0, i64 0, i32 1
  store i8 5, i8* %32, align 8
  br label %50

33:                                               ; preds = %23, %12, %5
  %34 = getelementptr inbounds %"class.v8::internal::Expression", %"class.v8::internal::Expression"* %3, i64 0, i32 0, i32 1
  %35 = load i32, i32* %34, align 4
  %36 = trunc i32 %35 to i8
  %37 = and i8 %36, 63
  %38 = add nsw i8 %37, -22
  %39 = icmp ugt i8 %38, 2
  %40 = icmp eq %"class.v8::internal::Expression"* %3, null
  %41 = or i1 %40, %39
  br i1 %41, label %44, label %42

42:                                               ; preds = %33
  %43 = getelementptr inbounds %"class.v8::internal::ObjectLiteralProperty", %"class.v8::internal::ObjectLiteralProperty"* %0, i64 0, i32 1
  store i8 2, i8* %43, align 8
  br label %50

44:                                               ; preds = %33
  %45 = and i32 %35, 63
  %46 = icmp eq i32 %45, 41
  %47 = getelementptr inbounds %"class.v8::internal::ObjectLiteralProperty", %"class.v8::internal::ObjectLiteralProperty"* %0, i64 0, i32 1
  br i1 %46, label %48, label %49

48:                                               ; preds = %44
  store i8 0, i8* %47, align 8
  br label %50

49:                                               ; preds = %44
  store i8 1, i8* %47, align 8
  br label %50

50:                                               ; preds = %42, %49, %48, %31
  ret void
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden zeroext i1 @_ZNK2v88internal15LiteralProperty20NeedsSetFunctionNameEv(%"class.v8::internal::LiteralProperty"* nocapture readonly) local_unnamed_addr #3 align 2 {
  %2 = getelementptr inbounds %"class.v8::internal::LiteralProperty", %"class.v8::internal::LiteralProperty"* %0, i64 0, i32 0, i32 0
  %3 = load i64, i64* %2, align 8
  %4 = and i64 %3, 1
  %5 = icmp eq i64 %4, 0
  br i1 %5, label %34, label %6

6:                                                ; preds = %1
  %7 = getelementptr inbounds %"class.v8::internal::LiteralProperty", %"class.v8::internal::LiteralProperty"* %0, i64 0, i32 1
  %8 = load %"class.v8::internal::Expression"*, %"class.v8::internal::Expression"** %7, align 8
  %9 = getelementptr inbounds %"class.v8::internal::Expression", %"class.v8::internal::Expression"* %8, i64 0, i32 0, i32 1
  %10 = load i32, i32* %9, align 4
  %11 = and i32 %10, 63
  switch i32 %11, label %34 [
    i32 38, label %12
    i32 32, label %15
  ]

12:                                               ; preds = %6
  %13 = and i32 %10, 896
  %14 = icmp eq i32 %13, 0
  br i1 %14, label %34, label %18

15:                                               ; preds = %6
  %16 = and i32 %10, 512
  %17 = icmp ne i32 %16, 0
  ret i1 %17

18:                                               ; preds = %12
  %19 = getelementptr inbounds %"class.v8::internal::Expression", %"class.v8::internal::Expression"* %8, i64 5
  %20 = bitcast %"class.v8::internal::Expression"* %19 to %"class.v8::internal::DeclarationScope"**
  %21 = load %"class.v8::internal::DeclarationScope"*, %"class.v8::internal::DeclarationScope"** %20, align 8
  %22 = getelementptr inbounds %"class.v8::internal::DeclarationScope", %"class.v8::internal::DeclarationScope"* %21, i64 0, i32 2
  %23 = load i8, i8* %22, align 1
  %24 = add i8 %23, -14
  %25 = icmp ult i8 %24, 12
  br i1 %25, label %29, label %26

26:                                               ; preds = %29, %18
  %27 = add i8 %23, -7
  %28 = icmp ult i8 %27, 4
  br label %34

29:                                               ; preds = %18
  %30 = zext i8 %24 to i16
  %31 = lshr i16 4047, %30
  %32 = and i16 %31, 1
  %33 = icmp eq i16 %32, 0
  br i1 %33, label %26, label %34

34:                                               ; preds = %12, %26, %6, %1, %29
  %35 = phi i1 [ true, %29 ], [ false, %1 ], [ true, %12 ], [ %28, %26 ], [ false, %6 ]
  ret i1 %35
}

; Function Attrs: nofree norecurse nounwind ssp uwtable writeonly
define hidden void @_ZN2v88internal20ClassLiteralPropertyC2EPNS0_10ExpressionES3_NS1_4KindEbbb(%"class.v8::internal::ClassLiteralProperty"* nocapture, %"class.v8::internal::Expression"*, %"class.v8::internal::Expression"*, i8 zeroext, i1 zeroext, i1 zeroext, i1 zeroext) unnamed_addr #8 align 2 {
  %8 = zext i1 %4 to i8
  %9 = zext i1 %6 to i8
  %10 = getelementptr inbounds %"class.v8::internal::ClassLiteralProperty", %"class.v8::internal::ClassLiteralProperty"* %0, i64 0, i32 0, i32 0, i32 0
  %11 = ptrtoint %"class.v8::internal::Expression"* %1 to i64
  %12 = zext i1 %5 to i64
  %13 = or i64 %12, %11
  store i64 %13, i64* %10, align 8
  %14 = getelementptr inbounds %"class.v8::internal::ClassLiteralProperty", %"class.v8::internal::ClassLiteralProperty"* %0, i64 0, i32 0, i32 1
  store %"class.v8::internal::Expression"* %2, %"class.v8::internal::Expression"** %14, align 8
  %15 = getelementptr inbounds %"class.v8::internal::ClassLiteralProperty", %"class.v8::internal::ClassLiteralProperty"* %0, i64 0, i32 1
  store i8 %3, i8* %15, align 8
  %16 = getelementptr inbounds %"class.v8::internal::ClassLiteralProperty", %"class.v8::internal::ClassLiteralProperty"* %0, i64 0, i32 2
  store i8 %8, i8* %16, align 1
  %17 = getelementptr inbounds %"class.v8::internal::ClassLiteralProperty", %"class.v8::internal::ClassLiteralProperty"* %0, i64 0, i32 3
  store i8 %9, i8* %17, align 2
  %18 = getelementptr inbounds %"class.v8::internal::ClassLiteralProperty", %"class.v8::internal::ClassLiteralProperty"* %0, i64 0, i32 4
  store %"class.v8::internal::Variable"* null, %"class.v8::internal::Variable"** %18, align 8
  ret void
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden zeroext i1 @_ZNK2v88internal21ObjectLiteralProperty18IsCompileTimeValueEv(%"class.v8::internal::ObjectLiteralProperty"* nocapture readonly) local_unnamed_addr #3 align 2 {
  %2 = getelementptr inbounds %"class.v8::internal::ObjectLiteralProperty", %"class.v8::internal::ObjectLiteralProperty"* %0, i64 0, i32 1
  %3 = load i8, i8* %2, align 8
  switch i8 %3, label %25 [
    i8 0, label %26
    i8 2, label %4
  ]

4:                                                ; preds = %1
  %5 = getelementptr inbounds %"class.v8::internal::ObjectLiteralProperty", %"class.v8::internal::ObjectLiteralProperty"* %0, i64 0, i32 0, i32 1
  %6 = load %"class.v8::internal::Expression"*, %"class.v8::internal::Expression"** %5, align 8
  %7 = getelementptr inbounds %"class.v8::internal::Expression", %"class.v8::internal::Expression"* %6, i64 0, i32 0, i32 1
  %8 = load i32, i32* %7, align 4
  %9 = and i32 %8, 63
  %10 = icmp eq i32 %9, 41
  br i1 %10, label %26, label %11

11:                                               ; preds = %4
  %12 = trunc i32 %8 to i8
  %13 = and i8 %12, 63
  %14 = add nsw i8 %13, -22
  %15 = icmp ugt i8 %14, 2
  %16 = icmp eq %"class.v8::internal::Expression"* %6, null
  %17 = or i1 %16, %15
  br i1 %17, label %26, label %18

18:                                               ; preds = %11
  switch i32 %9, label %26 [
    i32 24, label %19
    i32 23, label %22
  ]

19:                                               ; preds = %18
  %20 = and i32 %8, 256
  %21 = icmp ne i32 %20, 0
  br label %26

22:                                               ; preds = %18
  %23 = and i32 %8, 256
  %24 = icmp ne i32 %23, 0
  br label %26

25:                                               ; preds = %1
  br label %26

26:                                               ; preds = %22, %19, %18, %11, %4, %1, %25
  %27 = phi i1 [ true, %1 ], [ false, %25 ], [ true, %4 ], [ %21, %19 ], [ %24, %22 ], [ false, %18 ], [ false, %11 ]
  ret i1 %27
}

; Function Attrs: nofree norecurse nounwind ssp uwtable writeonly
define hidden void @_ZN2v88internal21ObjectLiteralProperty14set_emit_storeEb(%"class.v8::internal::ObjectLiteralProperty"* nocapture, i1 zeroext) local_unnamed_addr #8 align 2 {
  %3 = zext i1 %1 to i8
  %4 = getelementptr inbounds %"class.v8::internal::ObjectLiteralProperty", %"class.v8::internal::ObjectLiteralProperty"* %0, i64 0, i32 2
  store i8 %3, i8* %4, align 1
  ret void
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden zeroext i1 @_ZNK2v88internal21ObjectLiteralProperty10emit_storeEv(%"class.v8::internal::ObjectLiteralProperty"* nocapture readonly) local_unnamed_addr #3 align 2 {
  %2 = getelementptr inbounds %"class.v8::internal::ObjectLiteralProperty", %"class.v8::internal::ObjectLiteralProperty"* %0, i64 0, i32 2
  %3 = load i8, i8* %2, align 1, !range !2
  %4 = icmp ne i8 %3, 0
  ret i1 %4
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal13ObjectLiteral18CalculateEmitStoreEPNS0_4ZoneE(%"class.v8::internal::ObjectLiteral"* nocapture readonly, %"class.v8::internal::Zone"*) local_unnamed_addr #0 align 2 {
  %3 = alloca %class.anon.1217, align 8
  %4 = alloca %class.anon, align 1
  %5 = alloca %"class.v8::base::CustomMatcherTemplateHashMapImpl", align 8
  %6 = alloca i8*, align 8
  %7 = bitcast %"class.v8::base::CustomMatcherTemplateHashMapImpl"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %7) #11
  %8 = ptrtoint %"class.v8::internal::Zone"* %1 to i64
  %9 = bitcast %"class.v8::base::CustomMatcherTemplateHashMapImpl"* %5 to i64*
  store i64 ptrtoint (i1 (i8*, i8*)* @_ZN2v88internal7Literal5MatchEPvS2_ to i64), i64* %9, align 8
  %10 = getelementptr inbounds %"class.v8::base::CustomMatcherTemplateHashMapImpl", %"class.v8::base::CustomMatcherTemplateHashMapImpl"* %5, i64 0, i32 0, i32 0, i32 1
  %11 = bitcast %"class.v8::internal::ZoneAllocationPolicy"* %10 to i64*
  store i64 %8, i64* %11, align 8
  %12 = getelementptr inbounds %"class.v8::base::CustomMatcherTemplateHashMapImpl", %"class.v8::base::CustomMatcherTemplateHashMapImpl"* %5, i64 0, i32 0, i32 0, i32 2
  %13 = bitcast %"struct.v8::base::TemplateHashMapEntry"** %12 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %13, i8 0, i64 16, i1 false) #11
  %14 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %1, i64 0, i32 2
  %15 = load i64, i64* %14, align 8
  %16 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %1, i64 0, i32 3
  %17 = load i64, i64* %16, align 8
  %18 = sub i64 %17, %15
  %19 = icmp ult i64 %18, 192
  br i1 %19, label %20, label %22, !prof !3

20:                                               ; preds = %2
  %21 = tail call i64 @_ZN2v88internal4Zone9NewExpandEm(%"class.v8::internal::Zone"* %1, i64 192) #11
  br label %24

22:                                               ; preds = %2
  %23 = add i64 %15, 192
  store i64 %23, i64* %14, align 8
  br label %24

24:                                               ; preds = %22, %20
  %25 = phi i64 [ %21, %20 ], [ %15, %22 ]
  %26 = inttoptr i64 %25 to %"struct.v8::base::TemplateHashMapEntry"*
  store %"struct.v8::base::TemplateHashMapEntry"* %26, %"struct.v8::base::TemplateHashMapEntry"** %12, align 8
  %27 = icmp eq i64 %25, 0
  br i1 %27, label %28, label %29

28:                                               ; preds = %24
  tail call void (i8*, ...) @_Z8V8_FatalPKcz(i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.4, i64 0, i64 0)) #12
  unreachable

29:                                               ; preds = %24
  %30 = getelementptr inbounds %"class.v8::base::CustomMatcherTemplateHashMapImpl", %"class.v8::base::CustomMatcherTemplateHashMapImpl"* %5, i64 0, i32 0, i32 0, i32 3
  store i32 8, i32* %30, align 8
  %31 = getelementptr inbounds %"struct.v8::base::TemplateHashMapEntry", %"struct.v8::base::TemplateHashMapEntry"* %26, i64 0, i32 0
  store i8* null, i8** %31, align 8
  %32 = load i32, i32* %30, align 8
  %33 = icmp ugt i32 %32, 1
  br i1 %33, label %34, label %42

34:                                               ; preds = %29, %34
  %35 = phi i64 [ %38, %34 ], [ 1, %29 ]
  %36 = load %"struct.v8::base::TemplateHashMapEntry"*, %"struct.v8::base::TemplateHashMapEntry"** %12, align 8
  %37 = getelementptr inbounds %"struct.v8::base::TemplateHashMapEntry", %"struct.v8::base::TemplateHashMapEntry"* %36, i64 %35, i32 0
  store i8* null, i8** %37, align 8
  %38 = add nuw nsw i64 %35, 1
  %39 = load i32, i32* %30, align 8
  %40 = zext i32 %39 to i64
  %41 = icmp ult i64 %38, %40
  br i1 %41, label %34, label %42

42:                                               ; preds = %34, %29
  %43 = getelementptr inbounds %"class.v8::base::CustomMatcherTemplateHashMapImpl", %"class.v8::base::CustomMatcherTemplateHashMapImpl"* %5, i64 0, i32 0, i32 0, i32 4
  store i32 0, i32* %43, align 4
  %44 = getelementptr inbounds %"class.v8::internal::ObjectLiteral", %"class.v8::internal::ObjectLiteral"* %0, i64 0, i32 3, i32 2
  %45 = load i32, i32* %44, align 4
  %46 = icmp sgt i32 %45, 0
  br i1 %46, label %47, label %56

47:                                               ; preds = %42
  %48 = getelementptr inbounds %"class.v8::internal::ObjectLiteral", %"class.v8::internal::ObjectLiteral"* %0, i64 0, i32 3, i32 0
  %49 = getelementptr inbounds %"class.v8::base::CustomMatcherTemplateHashMapImpl", %"class.v8::base::CustomMatcherTemplateHashMapImpl"* %5, i64 0, i32 0
  %50 = bitcast i8** %6 to i8*
  %51 = bitcast i8** %6 to %"class.v8::internal::Literal"**
  %52 = getelementptr inbounds %class.anon, %class.anon* %4, i64 0, i32 0
  %53 = bitcast %class.anon.1217* %3 to i8*
  %54 = getelementptr inbounds %class.anon.1217, %class.anon.1217* %3, i64 0, i32 0
  %55 = sext i32 %45 to i64
  br label %57

56:                                               ; preds = %144, %42
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %7) #11
  ret void

57:                                               ; preds = %47, %144
  %58 = phi i64 [ %55, %47 ], [ %59, %144 ]
  %59 = add nsw i64 %58, -1
  %60 = load %"class.v8::internal::ObjectLiteralProperty"**, %"class.v8::internal::ObjectLiteralProperty"*** %48, align 8
  %61 = getelementptr inbounds %"class.v8::internal::ObjectLiteralProperty"*, %"class.v8::internal::ObjectLiteralProperty"** %60, i64 %59
  %62 = load %"class.v8::internal::ObjectLiteralProperty"*, %"class.v8::internal::ObjectLiteralProperty"** %61, align 8
  %63 = getelementptr inbounds %"class.v8::internal::ObjectLiteralProperty", %"class.v8::internal::ObjectLiteralProperty"* %62, i64 0, i32 0, i32 0, i32 0
  %64 = load i64, i64* %63, align 8
  %65 = and i64 %64, 1
  %66 = icmp eq i64 %65, 0
  br i1 %66, label %67, label %144

67:                                               ; preds = %57
  %68 = getelementptr inbounds %"class.v8::internal::ObjectLiteralProperty", %"class.v8::internal::ObjectLiteralProperty"* %62, i64 0, i32 1
  %69 = load i8, i8* %68, align 8
  %70 = icmp eq i8 %69, 5
  br i1 %70, label %144, label %71

71:                                               ; preds = %67
  %72 = and i64 %64, -2
  %73 = inttoptr i64 %72 to %"class.v8::internal::Expression"*
  %74 = getelementptr inbounds %"class.v8::internal::Expression", %"class.v8::internal::Expression"* %73, i64 0, i32 0, i32 1
  %75 = load i32, i32* %74, align 4
  %76 = and i32 %75, 63
  %77 = icmp eq i32 %76, 41
  %78 = inttoptr i64 %72 to %"class.v8::internal::Literal"*
  %79 = select i1 %77, %"class.v8::internal::Literal"* %78, %"class.v8::internal::Literal"* null
  %80 = getelementptr inbounds %"class.v8::internal::Literal", %"class.v8::internal::Literal"* %79, i64 0, i32 0, i32 0, i32 1
  %81 = load i32, i32* %80, align 4
  %82 = and i32 %81, 1920
  %83 = icmp eq i32 %82, 384
  br i1 %83, label %84, label %90

84:                                               ; preds = %71
  %85 = getelementptr inbounds %"class.v8::internal::Literal", %"class.v8::internal::Literal"* %79, i64 0, i32 1, i32 0
  %86 = load %"class.v8::internal::AstRawString"*, %"class.v8::internal::AstRawString"** %85, align 8
  %87 = getelementptr inbounds %"class.v8::internal::AstRawString", %"class.v8::internal::AstRawString"* %86, i64 0, i32 2
  %88 = load i32, i32* %87, align 8
  %89 = lshr i32 %88, 2
  br label %119

90:                                               ; preds = %71
  %91 = lshr i32 %81, 7
  %92 = and i32 %91, 15
  switch i32 %92, label %102 [
    i32 0, label %93
    i32 1, label %98
  ]

93:                                               ; preds = %90
  %94 = getelementptr inbounds %"class.v8::internal::Literal", %"class.v8::internal::Literal"* %79, i64 0, i32 1
  %95 = bitcast %union.anon.1138* %94 to i32*
  %96 = load i32, i32* %95, align 8
  %97 = sitofp i32 %96 to double
  br label %103

98:                                               ; preds = %90
  %99 = getelementptr inbounds %"class.v8::internal::Literal", %"class.v8::internal::Literal"* %79, i64 0, i32 1
  %100 = bitcast %union.anon.1138* %99 to double*
  %101 = load double, double* %100, align 8
  br label %103

102:                                              ; preds = %90
  call void (i8*, ...) @_Z8V8_FatalPKcz(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str, i64 0, i64 0)) #12
  unreachable

103:                                              ; preds = %98, %93
  %104 = phi double [ %101, %98 ], [ %97, %93 ]
  %105 = bitcast double %104 to i64
  %106 = xor i64 %105, -1
  %107 = shl i64 %105, 18
  %108 = add i64 %107, %106
  %109 = lshr i64 %108, 31
  %110 = xor i64 %109, %108
  %111 = mul i64 %110, 21
  %112 = lshr i64 %111, 11
  %113 = xor i64 %112, %111
  %114 = mul i64 %113, 65
  %115 = lshr i64 %114, 22
  %116 = xor i64 %115, %114
  %117 = trunc i64 %116 to i32
  %118 = and i32 %117, 1073741823
  br label %119

119:                                              ; preds = %84, %103
  %120 = phi i32 [ %89, %84 ], [ %118, %103 ]
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %50) #11
  store %"class.v8::internal::Literal"* %79, %"class.v8::internal::Literal"** %51, align 8
  call void @llvm.lifetime.start.p0i8(i64 1, i8* nonnull %52) #11
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %53) #11
  store i8** %6, i8*** %54, align 8
  %121 = call %"struct.v8::base::TemplateHashMapEntry"* @_ZN2v84base19TemplateHashMapImplIPvS2_NS0_26HashEqualityThenKeyMatcherIS2_PFbS2_S2_EEENS_8internal20ZoneAllocationPolicyEE14LookupOrInsertIS2_ZNS9_14LookupOrInsertIZNS9_14LookupOrInsertERKS2_jEUlvE_EEPNS0_20TemplateHashMapEntryIS2_S2_EESD_jRKT_EUlvE_SE_EESH_SK_jRKT0_RKT1_(%"class.v8::base::TemplateHashMapImpl.1184"* nonnull %49, i8** nonnull dereferenceable(8) %6, i32 %120, %class.anon.1217* nonnull dereferenceable(8) %3, %class.anon* nonnull dereferenceable(1) %4) #11
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %53) #11
  call void @llvm.lifetime.end.p0i8(i64 1, i8* nonnull %52) #11
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %50) #11
  %122 = getelementptr inbounds %"struct.v8::base::TemplateHashMapEntry", %"struct.v8::base::TemplateHashMapEntry"* %121, i64 0, i32 1
  %123 = load i8*, i8** %122, align 8
  %124 = icmp eq i8* %123, null
  br i1 %124, label %125, label %127

125:                                              ; preds = %119
  %126 = bitcast i8** %122 to %"class.v8::internal::ObjectLiteralProperty"**
  store %"class.v8::internal::ObjectLiteralProperty"* %62, %"class.v8::internal::ObjectLiteralProperty"** %126, align 8
  br label %144

127:                                              ; preds = %119
  %128 = getelementptr inbounds i8, i8* %123, i64 16
  %129 = load i8, i8* %128, align 8
  %130 = load i8, i8* %68, align 8
  %131 = icmp eq i8 %130, 3
  %132 = icmp eq i8 %129, 4
  %133 = and i1 %132, %131
  br i1 %133, label %144, label %134

134:                                              ; preds = %127
  %135 = icmp eq i8 %130, 4
  %136 = icmp eq i8 %129, 3
  %137 = and i1 %136, %135
  br i1 %137, label %144, label %138

138:                                              ; preds = %134
  %139 = getelementptr inbounds %"class.v8::internal::ObjectLiteralProperty", %"class.v8::internal::ObjectLiteralProperty"* %62, i64 0, i32 2
  store i8 0, i8* %139, align 1
  %140 = add i8 %129, -3
  %141 = icmp ult i8 %140, 2
  br i1 %141, label %142, label %144

142:                                              ; preds = %138
  %143 = bitcast i8** %122 to %"class.v8::internal::ObjectLiteralProperty"**
  store %"class.v8::internal::ObjectLiteralProperty"* %62, %"class.v8::internal::ObjectLiteralProperty"** %143, align 8
  br label %144

144:                                              ; preds = %57, %138, %125, %127, %142, %134, %67
  %145 = icmp sgt i64 %59, 0
  br i1 %145, label %57, label %56
}

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN2v88internal7Literal5MatchEPvS2_(i8* nocapture readonly, i8* nocapture readonly) #0 align 2 {
  %3 = getelementptr inbounds i8, i8* %0, i64 4
  %4 = bitcast i8* %3 to i32*
  %5 = load i32, i32* %4, align 4
  %6 = and i32 %5, 1920
  %7 = icmp eq i32 %6, 384
  br i1 %7, label %8, label %22

8:                                                ; preds = %2
  %9 = getelementptr inbounds i8, i8* %1, i64 4
  %10 = bitcast i8* %9 to i32*
  %11 = load i32, i32* %10, align 4
  %12 = and i32 %11, 1920
  %13 = icmp eq i32 %12, 384
  br i1 %13, label %14, label %22

14:                                               ; preds = %8
  %15 = getelementptr inbounds i8, i8* %0, i64 8
  %16 = bitcast i8* %15 to %"class.v8::internal::AstRawString"**
  %17 = load %"class.v8::internal::AstRawString"*, %"class.v8::internal::AstRawString"** %16, align 8
  %18 = getelementptr inbounds i8, i8* %1, i64 8
  %19 = bitcast i8* %18 to %"class.v8::internal::AstRawString"**
  %20 = load %"class.v8::internal::AstRawString"*, %"class.v8::internal::AstRawString"** %19, align 8
  %21 = icmp eq %"class.v8::internal::AstRawString"* %17, %20
  br i1 %21, label %61, label %22

22:                                               ; preds = %14, %8, %2
  %23 = and i32 %5, 1792
  %24 = icmp eq i32 %23, 0
  br i1 %24, label %25, label %61

25:                                               ; preds = %22
  %26 = getelementptr inbounds i8, i8* %1, i64 4
  %27 = bitcast i8* %26 to i32*
  %28 = load i32, i32* %27, align 4
  %29 = and i32 %28, 1792
  %30 = icmp eq i32 %29, 0
  br i1 %30, label %31, label %61

31:                                               ; preds = %25
  %32 = lshr i32 %5, 7
  %33 = and i32 %32, 15
  switch i32 %33, label %43 [
    i32 0, label %34
    i32 1, label %39
  ]

34:                                               ; preds = %31
  %35 = getelementptr inbounds i8, i8* %0, i64 8
  %36 = bitcast i8* %35 to i32*
  %37 = load i32, i32* %36, align 8
  %38 = sitofp i32 %37 to double
  br label %44

39:                                               ; preds = %31
  %40 = getelementptr inbounds i8, i8* %0, i64 8
  %41 = bitcast i8* %40 to double*
  %42 = load double, double* %41, align 8
  br label %44

43:                                               ; preds = %31
  tail call void (i8*, ...) @_Z8V8_FatalPKcz(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str, i64 0, i64 0)) #12
  unreachable

44:                                               ; preds = %34, %39
  %45 = phi double [ %42, %39 ], [ %38, %34 ]
  %46 = lshr i32 %28, 7
  %47 = and i32 %46, 15
  switch i32 %47, label %57 [
    i32 0, label %48
    i32 1, label %53
  ]

48:                                               ; preds = %44
  %49 = getelementptr inbounds i8, i8* %1, i64 8
  %50 = bitcast i8* %49 to i32*
  %51 = load i32, i32* %50, align 8
  %52 = sitofp i32 %51 to double
  br label %58

53:                                               ; preds = %44
  %54 = getelementptr inbounds i8, i8* %1, i64 8
  %55 = bitcast i8* %54 to double*
  %56 = load double, double* %55, align 8
  br label %58

57:                                               ; preds = %44
  tail call void (i8*, ...) @_Z8V8_FatalPKcz(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str, i64 0, i64 0)) #12
  unreachable

58:                                               ; preds = %48, %53
  %59 = phi double [ %56, %53 ], [ %52, %48 ]
  %60 = fcmp oeq double %45, %59
  br label %61

61:                                               ; preds = %22, %25, %58, %14
  %62 = phi i1 [ true, %14 ], [ false, %25 ], [ false, %22 ], [ %60, %58 ]
  ret i1 %62
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @_ZN2v88internal7Literal4HashEv(%"class.v8::internal::Literal"* nocapture readonly) local_unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.v8::internal::Literal", %"class.v8::internal::Literal"* %0, i64 0, i32 0, i32 0, i32 1
  %3 = load i32, i32* %2, align 4
  %4 = and i32 %3, 1920
  %5 = icmp eq i32 %4, 384
  br i1 %5, label %6, label %12

6:                                                ; preds = %1
  %7 = getelementptr inbounds %"class.v8::internal::Literal", %"class.v8::internal::Literal"* %0, i64 0, i32 1, i32 0
  %8 = load %"class.v8::internal::AstRawString"*, %"class.v8::internal::AstRawString"** %7, align 8
  %9 = getelementptr inbounds %"class.v8::internal::AstRawString", %"class.v8::internal::AstRawString"* %8, i64 0, i32 2
  %10 = load i32, i32* %9, align 8
  %11 = lshr i32 %10, 2
  br label %41

12:                                               ; preds = %1
  %13 = lshr i32 %3, 7
  %14 = and i32 %13, 15
  switch i32 %14, label %24 [
    i32 0, label %15
    i32 1, label %20
  ]

15:                                               ; preds = %12
  %16 = getelementptr inbounds %"class.v8::internal::Literal", %"class.v8::internal::Literal"* %0, i64 0, i32 1
  %17 = bitcast %union.anon.1138* %16 to i32*
  %18 = load i32, i32* %17, align 8
  %19 = sitofp i32 %18 to double
  br label %25

20:                                               ; preds = %12
  %21 = getelementptr inbounds %"class.v8::internal::Literal", %"class.v8::internal::Literal"* %0, i64 0, i32 1
  %22 = bitcast %union.anon.1138* %21 to double*
  %23 = load double, double* %22, align 8
  br label %25

24:                                               ; preds = %12
  tail call void (i8*, ...) @_Z8V8_FatalPKcz(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str, i64 0, i64 0)) #12
  unreachable

25:                                               ; preds = %15, %20
  %26 = phi double [ %23, %20 ], [ %19, %15 ]
  %27 = bitcast double %26 to i64
  %28 = xor i64 %27, -1
  %29 = shl i64 %27, 18
  %30 = add i64 %29, %28
  %31 = lshr i64 %30, 31
  %32 = xor i64 %31, %30
  %33 = mul i64 %32, 21
  %34 = lshr i64 %33, 11
  %35 = xor i64 %34, %33
  %36 = mul i64 %35, 65
  %37 = lshr i64 %36, 22
  %38 = xor i64 %37, %36
  %39 = trunc i64 %38 to i32
  %40 = and i32 %39, 1073741823
  br label %41

41:                                               ; preds = %25, %6
  %42 = phi i32 [ %11, %6 ], [ %40, %25 ]
  ret i32 %42
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @_ZN2v88internal13ObjectLiteral32InitFlagsForPendingNullPrototypeEi(%"class.v8::internal::ObjectLiteral"* nocapture, i32) local_unnamed_addr #6 align 2 {
  %3 = getelementptr inbounds %"class.v8::internal::ObjectLiteral", %"class.v8::internal::ObjectLiteral"* %0, i64 0, i32 3, i32 2
  %4 = load i32, i32* %3, align 4
  %5 = icmp sgt i32 %4, %1
  br i1 %5, label %6, label %32

6:                                                ; preds = %2
  %7 = getelementptr inbounds %"class.v8::internal::ObjectLiteral", %"class.v8::internal::ObjectLiteral"* %0, i64 0, i32 3, i32 0
  %8 = load %"class.v8::internal::ObjectLiteralProperty"**, %"class.v8::internal::ObjectLiteralProperty"*** %7, align 8
  %9 = sext i32 %1 to i64
  %10 = sext i32 %4 to i64
  br label %11

11:                                               ; preds = %6, %29
  %12 = phi i64 [ %9, %6 ], [ %30, %29 ]
  %13 = getelementptr inbounds %"class.v8::internal::ObjectLiteralProperty"*, %"class.v8::internal::ObjectLiteralProperty"** %8, i64 %12
  %14 = load %"class.v8::internal::ObjectLiteralProperty"*, %"class.v8::internal::ObjectLiteralProperty"** %13, align 8
  %15 = getelementptr inbounds %"class.v8::internal::ObjectLiteralProperty", %"class.v8::internal::ObjectLiteralProperty"* %14, i64 0, i32 1
  %16 = load i8, i8* %15, align 8
  %17 = icmp eq i8 %16, 5
  br i1 %17, label %18, label %29

18:                                               ; preds = %11
  %19 = getelementptr inbounds %"class.v8::internal::ObjectLiteralProperty", %"class.v8::internal::ObjectLiteralProperty"* %14, i64 0, i32 0, i32 1
  %20 = load %"class.v8::internal::Expression"*, %"class.v8::internal::Expression"** %19, align 8
  %21 = getelementptr inbounds %"class.v8::internal::Expression", %"class.v8::internal::Expression"* %20, i64 0, i32 0, i32 1
  %22 = load i32, i32* %21, align 4
  %23 = and i32 %22, 1983
  %24 = icmp eq i32 %23, 809
  br i1 %24, label %25, label %29

25:                                               ; preds = %18
  %26 = getelementptr inbounds %"class.v8::internal::ObjectLiteral", %"class.v8::internal::ObjectLiteral"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %27 = load i32, i32* %26, align 4
  %28 = or i32 %27, 32768
  store i32 %28, i32* %26, align 4
  br label %32

29:                                               ; preds = %11, %18
  %30 = add nsw i64 %12, 1
  %31 = icmp slt i64 %30, %10
  br i1 %31, label %11, label %32

32:                                               ; preds = %29, %2, %25
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @_ZN2v88internal13ObjectLiteral17InitDepthAndFlagsEv(%"class.v8::internal::ObjectLiteral"* nocapture) local_unnamed_addr #0 align 2 {
  %2 = alloca i32, align 4
  %3 = getelementptr inbounds %"class.v8::internal::ObjectLiteral", %"class.v8::internal::ObjectLiteral"* %0, i64 0, i32 0, i32 1
  %4 = load i32, i32* %3, align 4
  %5 = shl i32 %4, 1
  %6 = icmp sgt i32 %5, 0
  br i1 %6, label %16, label %7

7:                                                ; preds = %1
  %8 = getelementptr inbounds %"class.v8::internal::ObjectLiteral", %"class.v8::internal::ObjectLiteral"* %0, i64 0, i32 3, i32 2
  %9 = load i32, i32* %8, align 4
  %10 = icmp sgt i32 %9, 0
  br i1 %10, label %11, label %206

11:                                               ; preds = %7
  %12 = getelementptr inbounds %"class.v8::internal::ObjectLiteral", %"class.v8::internal::ObjectLiteral"* %0, i64 0, i32 3, i32 0
  %13 = getelementptr inbounds %"class.v8::internal::ObjectLiteral", %"class.v8::internal::ObjectLiteral"* %0, i64 0, i32 1
  %14 = bitcast i32* %2 to i8*
  %15 = getelementptr inbounds %"class.v8::internal::ObjectLiteral", %"class.v8::internal::ObjectLiteral"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 1
  br label %18

16:                                               ; preds = %1
  %17 = and i32 %4, 2147483647
  br label %237

18:                                               ; preds = %11, %194
  %19 = phi i32 [ %9, %11 ], [ %195, %194 ]
  %20 = phi i64 [ 0, %11 ], [ %203, %194 ]
  %21 = phi i8 [ 1, %11 ], [ %202, %194 ]
  %22 = phi i8 [ 0, %11 ], [ %201, %194 ]
  %23 = phi i8 [ 0, %11 ], [ %200, %194 ]
  %24 = phi i32 [ 1, %11 ], [ %199, %194 ]
  %25 = phi i32 [ 0, %11 ], [ %198, %194 ]
  %26 = phi i32 [ 0, %11 ], [ %197, %194 ]
  %27 = phi i32 [ 0, %11 ], [ %196, %194 ]
  %28 = load %"class.v8::internal::ObjectLiteralProperty"**, %"class.v8::internal::ObjectLiteralProperty"*** %12, align 8
  %29 = getelementptr inbounds %"class.v8::internal::ObjectLiteralProperty"*, %"class.v8::internal::ObjectLiteralProperty"** %28, i64 %20
  %30 = load %"class.v8::internal::ObjectLiteralProperty"*, %"class.v8::internal::ObjectLiteralProperty"** %29, align 8
  %31 = getelementptr inbounds %"class.v8::internal::ObjectLiteralProperty", %"class.v8::internal::ObjectLiteralProperty"* %30, i64 0, i32 1
  %32 = load i8, i8* %31, align 8
  %33 = icmp eq i8 %32, 5
  br i1 %33, label %34, label %44

34:                                               ; preds = %18
  %35 = getelementptr inbounds %"class.v8::internal::ObjectLiteralProperty", %"class.v8::internal::ObjectLiteralProperty"* %30, i64 0, i32 0, i32 1
  %36 = load %"class.v8::internal::Expression"*, %"class.v8::internal::Expression"** %35, align 8
  %37 = getelementptr inbounds %"class.v8::internal::Expression", %"class.v8::internal::Expression"* %36, i64 0, i32 0, i32 1
  %38 = load i32, i32* %37, align 4
  %39 = and i32 %38, 1983
  %40 = icmp eq i32 %39, 809
  br i1 %40, label %41, label %194

41:                                               ; preds = %34
  %42 = load i32, i32* %15, align 4
  %43 = or i32 %42, 32768
  store i32 %43, i32* %15, align 4
  br label %194

44:                                               ; preds = %18
  %45 = load i32, i32* %13, align 4
  %46 = icmp eq i32 %25, %45
  br i1 %46, label %47, label %76

47:                                               ; preds = %44
  %48 = and i8 %22, 1
  %49 = icmp eq i8 %48, 0
  %50 = trunc i64 %20 to i32
  %51 = icmp sgt i32 %19, %50
  %52 = and i1 %49, %51
  br i1 %52, label %53, label %206

53:                                               ; preds = %47
  %54 = and i64 %20, 4294967295
  %55 = sext i32 %19 to i64
  br label %56

56:                                               ; preds = %73, %53
  %57 = phi i64 [ %54, %53 ], [ %74, %73 ]
  %58 = getelementptr inbounds %"class.v8::internal::ObjectLiteralProperty"*, %"class.v8::internal::ObjectLiteralProperty"** %28, i64 %57
  %59 = load %"class.v8::internal::ObjectLiteralProperty"*, %"class.v8::internal::ObjectLiteralProperty"** %58, align 8
  %60 = getelementptr inbounds %"class.v8::internal::ObjectLiteralProperty", %"class.v8::internal::ObjectLiteralProperty"* %59, i64 0, i32 1
  %61 = load i8, i8* %60, align 8
  %62 = icmp eq i8 %61, 5
  br i1 %62, label %63, label %73

63:                                               ; preds = %56
  %64 = getelementptr inbounds %"class.v8::internal::ObjectLiteralProperty", %"class.v8::internal::ObjectLiteralProperty"* %59, i64 0, i32 0, i32 1
  %65 = load %"class.v8::internal::Expression"*, %"class.v8::internal::Expression"** %64, align 8
  %66 = getelementptr inbounds %"class.v8::internal::Expression", %"class.v8::internal::Expression"* %65, i64 0, i32 0, i32 1
  %67 = load i32, i32* %66, align 4
  %68 = and i32 %67, 1983
  %69 = icmp eq i32 %68, 809
  br i1 %69, label %70, label %73

70:                                               ; preds = %63
  %71 = load i32, i32* %15, align 4
  %72 = or i32 %71, 32768
  store i32 %72, i32* %15, align 4
  br label %206

73:                                               ; preds = %63, %56
  %74 = add nuw nsw i64 %57, 1
  %75 = icmp eq i64 %74, %55
  br i1 %75, label %206, label %56

76:                                               ; preds = %44
  %77 = getelementptr inbounds %"class.v8::internal::ObjectLiteralProperty", %"class.v8::internal::ObjectLiteralProperty"* %30, i64 0, i32 0, i32 1
  %78 = load %"class.v8::internal::Expression"*, %"class.v8::internal::Expression"** %77, align 8
  %79 = getelementptr inbounds %"class.v8::internal::Expression", %"class.v8::internal::Expression"* %78, i64 0, i32 0, i32 1
  %80 = load i32, i32* %79, align 4
  %81 = trunc i32 %80 to i8
  %82 = and i8 %81, 63
  %83 = add nsw i8 %82, -22
  %84 = icmp ugt i8 %83, 2
  %85 = icmp eq %"class.v8::internal::Expression"* %78, null
  %86 = or i1 %85, %84
  br i1 %86, label %116, label %87

87:                                               ; preds = %76
  %88 = and i32 %80, 63
  switch i32 %88, label %95 [
    i32 24, label %89
    i32 23, label %92
  ]

89:                                               ; preds = %87
  %90 = bitcast %"class.v8::internal::Expression"* %78 to %"class.v8::internal::ArrayLiteral"*
  %91 = call i32 @_ZN2v88internal12ArrayLiteral17InitDepthAndFlagsEv(%"class.v8::internal::ArrayLiteral"* nonnull %90) #11
  br label %95

92:                                               ; preds = %87
  %93 = bitcast %"class.v8::internal::Expression"* %78 to %"class.v8::internal::ObjectLiteral"*
  %94 = call i32 @_ZN2v88internal13ObjectLiteral17InitDepthAndFlagsEv(%"class.v8::internal::ObjectLiteral"* nonnull %93) #11
  br label %95

95:                                               ; preds = %87, %89, %92
  %96 = phi i32 [ %91, %89 ], [ %94, %92 ], [ 1, %87 ]
  %97 = icmp slt i32 %96, %24
  %98 = add nsw i32 %96, 1
  %99 = select i1 %97, i32 %24, i32 %98
  %100 = load i32, i32* %79, align 4
  %101 = and i32 %100, 63
  switch i32 %101, label %108 [
    i32 24, label %102
    i32 23, label %105
  ]

102:                                              ; preds = %95
  %103 = trunc i32 %100 to i8
  %104 = icmp slt i8 %103, 0
  br label %108

105:                                              ; preds = %95
  %106 = trunc i32 %100 to i8
  %107 = icmp slt i8 %106, 0
  br label %108

108:                                              ; preds = %95, %102, %105
  %109 = phi i1 [ %104, %102 ], [ %107, %105 ], [ false, %95 ]
  %110 = zext i1 %109 to i8
  %111 = and i8 %23, 1
  %112 = or i8 %111, %110
  %113 = load %"class.v8::internal::Expression"*, %"class.v8::internal::Expression"** %77, align 8
  %114 = getelementptr inbounds %"class.v8::internal::Expression", %"class.v8::internal::Expression"* %113, i64 0, i32 0, i32 1
  %115 = load i32, i32* %114, align 4
  br label %116

116:                                              ; preds = %76, %108
  %117 = phi i32 [ %115, %108 ], [ %80, %76 ]
  %118 = phi %"class.v8::internal::Expression"* [ %113, %108 ], [ %78, %76 ]
  %119 = phi i32 [ %99, %108 ], [ %24, %76 ]
  %120 = phi i8 [ %112, %108 ], [ %23, %76 ]
  %121 = getelementptr inbounds %"class.v8::internal::ObjectLiteralProperty", %"class.v8::internal::ObjectLiteralProperty"* %30, i64 0, i32 0, i32 0, i32 0
  %122 = load i64, i64* %121, align 8
  %123 = and i64 %122, -2
  %124 = inttoptr i64 %123 to %"class.v8::internal::Expression"*
  %125 = getelementptr inbounds %"class.v8::internal::Expression", %"class.v8::internal::Expression"* %124, i64 0, i32 0, i32 1
  %126 = load i32, i32* %125, align 4
  %127 = and i32 %126, 63
  %128 = icmp eq i32 %127, 41
  %129 = inttoptr i64 %123 to %"class.v8::internal::Literal"*
  %130 = select i1 %128, %"class.v8::internal::Literal"* %129, %"class.v8::internal::Literal"* null
  %131 = and i32 %117, 63
  %132 = icmp eq i32 %131, 41
  br i1 %132, label %147, label %133

133:                                              ; preds = %116
  %134 = trunc i32 %117 to i8
  %135 = and i8 %134, 63
  %136 = add nsw i8 %135, -22
  %137 = icmp ugt i8 %136, 2
  %138 = icmp eq %"class.v8::internal::Expression"* %118, null
  %139 = or i1 %138, %137
  br i1 %139, label %147, label %140

140:                                              ; preds = %133
  switch i32 %131, label %147 [
    i32 24, label %141
    i32 23, label %144
  ]

141:                                              ; preds = %140
  %142 = and i32 %117, 256
  %143 = icmp ne i32 %142, 0
  br label %147

144:                                              ; preds = %140
  %145 = and i32 %117, 256
  %146 = icmp ne i32 %145, 0
  br label %147

147:                                              ; preds = %116, %133, %140, %141, %144
  %148 = phi i1 [ true, %116 ], [ %143, %141 ], [ %146, %144 ], [ false, %140 ], [ false, %133 ]
  %149 = and i8 %21, 1
  %150 = icmp ne i8 %149, 0
  %151 = and i1 %150, %148
  %152 = zext i1 %151 to i8
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %14) #11
  store i32 0, i32* %2, align 4
  %153 = getelementptr inbounds %"class.v8::internal::Literal", %"class.v8::internal::Literal"* %130, i64 0, i32 0, i32 0, i32 1
  %154 = load i32, i32* %153, align 4
  %155 = lshr i32 %154, 7
  %156 = and i32 %155, 15
  switch i32 %156, label %189 [
    i32 3, label %157
    i32 0, label %163
    i32 1, label %169
  ]

157:                                              ; preds = %147
  %158 = getelementptr inbounds %"class.v8::internal::Literal", %"class.v8::internal::Literal"* %130, i64 0, i32 1, i32 0
  %159 = load %"class.v8::internal::AstRawString"*, %"class.v8::internal::AstRawString"** %158, align 8
  %160 = call zeroext i1 @_ZNK2v88internal12AstRawString12AsArrayIndexEPj(%"class.v8::internal::AstRawString"* %159, i32* nonnull %2) #11
  br i1 %160, label %161, label %189

161:                                              ; preds = %157
  %162 = load i32, i32* %2, align 4
  br label %181

163:                                              ; preds = %147
  %164 = getelementptr inbounds %"class.v8::internal::Literal", %"class.v8::internal::Literal"* %130, i64 0, i32 1
  %165 = bitcast %union.anon.1138* %164 to i32*
  %166 = load i32, i32* %165, align 8
  %167 = icmp slt i32 %166, 0
  br i1 %167, label %189, label %168

168:                                              ; preds = %163
  store i32 %166, i32* %2, align 4
  br label %184

169:                                              ; preds = %147
  %170 = getelementptr inbounds %"class.v8::internal::Literal", %"class.v8::internal::Literal"* %130, i64 0, i32 1
  %171 = bitcast %union.anon.1138* %170 to double*
  %172 = load double, double* %171, align 8
  %173 = fadd double %172, 0x4330000000000000
  %174 = bitcast double %173 to i64
  %175 = and i64 %174, -4294967296
  %176 = icmp eq i64 %175, 4841369599423283200
  br i1 %176, label %177, label %189

177:                                              ; preds = %169
  %178 = trunc i64 %174 to i32
  store i32 %178, i32* %2, align 4
  %179 = uitofp i32 %178 to double
  %180 = fcmp oeq double %172, %179
  br i1 %180, label %181, label %189

181:                                              ; preds = %161, %177
  %182 = phi i32 [ %162, %161 ], [ %178, %177 ]
  %183 = icmp eq i32 %182, -1
  br i1 %183, label %189, label %184

184:                                              ; preds = %181, %168
  %185 = phi i32 [ %182, %181 ], [ %166, %168 ]
  %186 = icmp ult i32 %185, %27
  %187 = select i1 %186, i32 %27, i32 %185
  %188 = add i32 %26, 1
  br label %189

189:                                              ; preds = %181, %169, %147, %163, %157, %177, %184
  %190 = phi i32 [ %187, %184 ], [ %27, %181 ], [ %27, %177 ], [ %27, %157 ], [ %27, %163 ], [ %27, %147 ], [ %27, %169 ]
  %191 = phi i32 [ %188, %184 ], [ %26, %181 ], [ %26, %177 ], [ %26, %157 ], [ %26, %163 ], [ %26, %147 ], [ %26, %169 ]
  %192 = add i32 %25, 1
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %14) #11
  %193 = load i32, i32* %8, align 4
  br label %194

194:                                              ; preds = %41, %189, %34
  %195 = phi i32 [ %19, %41 ], [ %19, %34 ], [ %193, %189 ]
  %196 = phi i32 [ %27, %41 ], [ %27, %34 ], [ %190, %189 ]
  %197 = phi i32 [ %26, %41 ], [ %26, %34 ], [ %191, %189 ]
  %198 = phi i32 [ %25, %41 ], [ %25, %34 ], [ %192, %189 ]
  %199 = phi i32 [ %24, %41 ], [ %24, %34 ], [ %119, %189 ]
  %200 = phi i8 [ %23, %41 ], [ %23, %34 ], [ %120, %189 ]
  %201 = phi i8 [ 1, %41 ], [ 1, %34 ], [ %22, %189 ]
  %202 = phi i8 [ %21, %41 ], [ 0, %34 ], [ %152, %189 ]
  %203 = add nuw nsw i64 %20, 1
  %204 = sext i32 %195 to i64
  %205 = icmp slt i64 %203, %204
  br i1 %205, label %18, label %206

206:                                              ; preds = %194, %73, %7, %70, %47
  %207 = phi i32 [ %27, %47 ], [ %27, %70 ], [ 0, %7 ], [ %27, %73 ], [ %196, %194 ]
  %208 = phi i32 [ %26, %47 ], [ %26, %70 ], [ 0, %7 ], [ %26, %73 ], [ %197, %194 ]
  %209 = phi i32 [ %24, %47 ], [ %24, %70 ], [ 1, %7 ], [ %24, %73 ], [ %199, %194 ]
  %210 = phi i8 [ %23, %47 ], [ %23, %70 ], [ 0, %7 ], [ %23, %73 ], [ %200, %194 ]
  %211 = phi i8 [ 0, %47 ], [ 0, %70 ], [ 1, %7 ], [ 0, %73 ], [ %202, %194 ]
  %212 = load i32, i32* %3, align 4
  %213 = and i32 %209, 2147483647
  %214 = and i32 %212, -2147483648
  %215 = or i32 %214, %213
  store i32 %215, i32* %3, align 4
  %216 = and i8 %211, 1
  %217 = getelementptr inbounds %"class.v8::internal::ObjectLiteral", %"class.v8::internal::ObjectLiteral"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %218 = load i32, i32* %217, align 4
  %219 = and i32 %218, -20865
  %220 = zext i8 %216 to i32
  %221 = shl nuw nsw i32 %220, 8
  %222 = shl i8 %210, 7
  %223 = zext i8 %222 to i32
  %224 = or i32 %221, %223
  %225 = or i32 %224, %219
  %226 = icmp ne i32 %208, 0
  %227 = zext i1 %226 to i32
  %228 = shl nuw nsw i32 %227, 12
  %229 = icmp ult i32 %207, 33
  %230 = shl i32 %208, 1
  %231 = icmp uge i32 %230, %207
  %232 = or i1 %229, %231
  %233 = zext i1 %232 to i32
  %234 = shl nuw nsw i32 %233, 14
  %235 = or i32 %234, %228
  %236 = or i32 %235, %225
  store i32 %236, i32* %217, align 4
  br label %237

237:                                              ; preds = %206, %16
  %238 = phi i32 [ %17, %16 ], [ %209, %206 ]
  ret i32 %238
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @_ZN2v88internal19MaterializedLiteral17InitDepthAndFlagsEv(%"class.v8::internal::MaterializedLiteral"*) local_unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.v8::internal::MaterializedLiteral", %"class.v8::internal::MaterializedLiteral"* %0, i64 0, i32 0, i32 0, i32 1
  %3 = load i32, i32* %2, align 4
  %4 = and i32 %3, 63
  switch i32 %4, label %11 [
    i32 24, label %5
    i32 23, label %8
  ]

5:                                                ; preds = %1
  %6 = bitcast %"class.v8::internal::MaterializedLiteral"* %0 to %"class.v8::internal::ArrayLiteral"*
  %7 = tail call i32 @_ZN2v88internal12ArrayLiteral17InitDepthAndFlagsEv(%"class.v8::internal::ArrayLiteral"* %6)
  br label %11

8:                                                ; preds = %1
  %9 = bitcast %"class.v8::internal::MaterializedLiteral"* %0 to %"class.v8::internal::ObjectLiteral"*
  %10 = tail call i32 @_ZN2v88internal13ObjectLiteral17InitDepthAndFlagsEv(%"class.v8::internal::ObjectLiteral"* %9)
  br label %11

11:                                               ; preds = %1, %8, %5
  %12 = phi i32 [ %7, %5 ], [ %10, %8 ], [ 1, %1 ]
  ret i32 %12
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden zeroext i1 @_ZN2v88internal19MaterializedLiteral26NeedsInitialAllocationSiteEv(%"class.v8::internal::MaterializedLiteral"* nocapture readonly) local_unnamed_addr #3 align 2 {
  %2 = getelementptr inbounds %"class.v8::internal::MaterializedLiteral", %"class.v8::internal::MaterializedLiteral"* %0, i64 0, i32 0, i32 0, i32 1
  %3 = load i32, i32* %2, align 4
  %4 = and i32 %3, 63
  switch i32 %4, label %11 [
    i32 24, label %5
    i32 23, label %8
  ]

5:                                                ; preds = %1
  %6 = trunc i32 %3 to i8
  %7 = icmp slt i8 %6, 0
  br label %11

8:                                                ; preds = %1
  %9 = trunc i32 %3 to i8
  %10 = icmp slt i8 %9, 0
  br label %11

11:                                               ; preds = %1, %8, %5
  %12 = phi i1 [ %7, %5 ], [ %10, %8 ], [ false, %1 ]
  ret i1 %12
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden zeroext i1 @_ZNK2v88internal13ObjectLiteral22IsFastCloningSupportedEv(%"class.v8::internal::ObjectLiteral"* nocapture readonly) local_unnamed_addr #3 align 2 {
  %2 = getelementptr inbounds %"class.v8::internal::ObjectLiteral", %"class.v8::internal::ObjectLiteral"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %3 = load i32, i32* %2, align 4
  %4 = and i32 %3, 16384
  %5 = icmp eq i32 %4, 0
  br i1 %5, label %15, label %6

6:                                                ; preds = %1
  %7 = getelementptr inbounds %"class.v8::internal::ObjectLiteral", %"class.v8::internal::ObjectLiteral"* %0, i64 0, i32 0, i32 1
  %8 = load i32, i32* %7, align 4
  %9 = and i32 %8, 2147483647
  %10 = icmp eq i32 %9, 1
  br i1 %10, label %11, label %15

11:                                               ; preds = %6
  %12 = getelementptr inbounds %"class.v8::internal::ObjectLiteral", %"class.v8::internal::ObjectLiteral"* %0, i64 0, i32 1
  %13 = load i32, i32* %12, align 4
  %14 = icmp slt i32 %13, 2731
  br label %15

15:                                               ; preds = %1, %11, %6
  %16 = phi i1 [ false, %6 ], [ false, %1 ], [ %14, %11 ]
  ret i1 %16
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @_ZN2v88internal12ArrayLiteral17InitDepthAndFlagsEv(%"class.v8::internal::ArrayLiteral"* nocapture) local_unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.v8::internal::ArrayLiteral", %"class.v8::internal::ArrayLiteral"* %0, i64 0, i32 0, i32 1
  %3 = load i32, i32* %2, align 4
  %4 = shl i32 %3, 1
  %5 = icmp sgt i32 %4, 0
  br i1 %5, label %6, label %8

6:                                                ; preds = %1
  %7 = and i32 %3, 2147483647
  br label %115

8:                                                ; preds = %1
  %9 = getelementptr inbounds %"class.v8::internal::ArrayLiteral", %"class.v8::internal::ArrayLiteral"* %0, i64 0, i32 1
  %10 = load i32, i32* %9, align 4
  %11 = icmp sgt i32 %10, -1
  br i1 %11, label %15, label %12

12:                                               ; preds = %8
  %13 = getelementptr inbounds %"class.v8::internal::ArrayLiteral", %"class.v8::internal::ArrayLiteral"* %0, i64 0, i32 3, i32 2
  %14 = load i32, i32* %13, align 4
  br label %15

15:                                               ; preds = %8, %12
  %16 = phi i32 [ %14, %12 ], [ %10, %8 ]
  %17 = lshr i32 %10, 31
  %18 = trunc i32 %17 to i8
  %19 = icmp sgt i32 %16, 0
  br i1 %19, label %20, label %96

20:                                               ; preds = %15
  %21 = getelementptr inbounds %"class.v8::internal::ArrayLiteral", %"class.v8::internal::ArrayLiteral"* %0, i64 0, i32 3, i32 0
  %22 = zext i32 %16 to i64
  br label %23

23:                                               ; preds = %82, %20
  %24 = phi i64 [ 0, %20 ], [ %86, %82 ]
  %25 = phi i8 [ %18, %20 ], [ %85, %82 ]
  %26 = phi i8 [ 0, %20 ], [ %84, %82 ]
  %27 = phi i8 [ 0, %20 ], [ %83, %82 ]
  %28 = phi i32 [ 1, %20 ], [ %56, %82 ]
  %29 = load %"class.v8::internal::Expression"**, %"class.v8::internal::Expression"*** %21, align 8
  %30 = getelementptr inbounds %"class.v8::internal::Expression"*, %"class.v8::internal::Expression"** %29, i64 %24
  %31 = load %"class.v8::internal::Expression"*, %"class.v8::internal::Expression"** %30, align 8
  %32 = getelementptr inbounds %"class.v8::internal::Expression", %"class.v8::internal::Expression"* %31, i64 0, i32 0, i32 1
  %33 = load i32, i32* %32, align 4
  %34 = trunc i32 %33 to i8
  %35 = and i8 %34, 63
  %36 = add nsw i8 %35, -22
  %37 = icmp ugt i8 %36, 2
  %38 = icmp eq %"class.v8::internal::Expression"* %31, null
  %39 = or i1 %38, %37
  br i1 %39, label %54, label %40

40:                                               ; preds = %23
  %41 = and i32 %33, 63
  switch i32 %41, label %48 [
    i32 24, label %42
    i32 23, label %45
  ]

42:                                               ; preds = %40
  %43 = bitcast %"class.v8::internal::Expression"* %31 to %"class.v8::internal::ArrayLiteral"*
  %44 = tail call i32 @_ZN2v88internal12ArrayLiteral17InitDepthAndFlagsEv(%"class.v8::internal::ArrayLiteral"* nonnull %43) #11
  br label %48

45:                                               ; preds = %40
  %46 = bitcast %"class.v8::internal::Expression"* %31 to %"class.v8::internal::ObjectLiteral"*
  %47 = tail call i32 @_ZN2v88internal13ObjectLiteral17InitDepthAndFlagsEv(%"class.v8::internal::ObjectLiteral"* nonnull %46) #11
  br label %48

48:                                               ; preds = %40, %42, %45
  %49 = phi i32 [ %44, %42 ], [ %47, %45 ], [ 1, %40 ]
  %50 = icmp slt i32 %49, %28
  %51 = add nsw i32 %49, 1
  %52 = select i1 %50, i32 %28, i32 %51
  %53 = load i32, i32* %32, align 4
  br label %54

54:                                               ; preds = %23, %48
  %55 = phi i32 [ %53, %48 ], [ %33, %23 ]
  %56 = phi i32 [ %52, %48 ], [ %28, %23 ]
  %57 = and i32 %55, 63
  %58 = icmp eq i32 %57, 41
  br i1 %58, label %73, label %59

59:                                               ; preds = %54
  %60 = trunc i32 %55 to i8
  %61 = and i8 %60, 63
  %62 = add nsw i8 %61, -22
  %63 = icmp ugt i8 %62, 2
  %64 = or i1 %38, %63
  br i1 %64, label %82, label %65

65:                                               ; preds = %59
  switch i32 %57, label %82 [
    i32 24, label %66
    i32 23, label %69
  ]

66:                                               ; preds = %65
  %67 = and i32 %55, 256
  %68 = icmp eq i32 %67, 0
  br i1 %68, label %82, label %72

69:                                               ; preds = %65
  %70 = and i32 %55, 256
  %71 = icmp eq i32 %70, 0
  br i1 %71, label %82, label %72

72:                                               ; preds = %66, %69
  br label %82

73:                                               ; preds = %54
  br i1 %38, label %82, label %74

74:                                               ; preds = %73
  %75 = lshr i32 %55, 7
  %76 = and i32 %75, 15
  switch i32 %76, label %82 [
    i32 7, label %77
    i32 1, label %78
    i32 6, label %81
    i32 2, label %81
    i32 3, label %81
    i32 4, label %81
    i32 5, label %81
  ]

77:                                               ; preds = %74
  br label %82

78:                                               ; preds = %74
  %79 = icmp eq i8 %27, 0
  %80 = select i1 %79, i8 4, i8 %27
  br label %82

81:                                               ; preds = %74, %74, %74, %74, %74
  br label %82

82:                                               ; preds = %72, %66, %69, %59, %65, %78, %74, %81, %77, %73
  %83 = phi i8 [ %27, %69 ], [ %27, %74 ], [ 2, %81 ], [ %27, %77 ], [ 2, %73 ], [ %80, %78 ], [ %27, %66 ], [ %27, %65 ], [ %27, %59 ], [ 2, %72 ]
  %84 = phi i8 [ %26, %69 ], [ %26, %74 ], [ %26, %81 ], [ 1, %77 ], [ %26, %73 ], [ %26, %78 ], [ %26, %66 ], [ %26, %65 ], [ %26, %59 ], [ %26, %72 ]
  %85 = phi i8 [ 0, %69 ], [ %25, %74 ], [ %25, %81 ], [ %25, %77 ], [ %25, %73 ], [ %25, %78 ], [ 0, %66 ], [ 0, %65 ], [ 0, %59 ], [ %25, %72 ]
  %86 = add nuw nsw i64 %24, 1
  %87 = icmp eq i64 %86, %22
  br i1 %87, label %88, label %23

88:                                               ; preds = %82
  %89 = and i8 %84, 1
  %90 = icmp eq i8 %89, 0
  br i1 %90, label %96, label %91

91:                                               ; preds = %88
  switch i8 %83, label %95 [
    i8 0, label %96
    i8 4, label %92
    i8 2, label %93
    i8 6, label %94
  ]

92:                                               ; preds = %91
  br label %96

93:                                               ; preds = %91
  br label %96

94:                                               ; preds = %91
  br label %96

95:                                               ; preds = %91
  br label %96

96:                                               ; preds = %15, %95, %94, %93, %92, %91, %88
  %97 = phi i8 [ %85, %88 ], [ %85, %92 ], [ %85, %93 ], [ %85, %94 ], [ %85, %95 ], [ %85, %91 ], [ %18, %15 ]
  %98 = phi i32 [ %56, %88 ], [ %56, %92 ], [ %56, %93 ], [ %56, %94 ], [ %56, %95 ], [ %56, %91 ], [ 1, %15 ]
  %99 = phi i8 [ %83, %88 ], [ 5, %92 ], [ 3, %93 ], [ 7, %94 ], [ %83, %95 ], [ 1, %91 ], [ 0, %15 ]
  %100 = load i32, i32* %2, align 4
  %101 = and i32 %98, 2147483647
  %102 = and i32 %100, -2147483648
  %103 = or i32 %102, %101
  store i32 %103, i32* %2, align 4
  %104 = and i8 %97, 1
  %105 = getelementptr inbounds %"class.v8::internal::ArrayLiteral", %"class.v8::internal::ArrayLiteral"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %106 = load i32, i32* %105, align 4
  %107 = and i32 %106, -3969
  %108 = zext i8 %104 to i32
  %109 = shl nuw nsw i32 %108, 8
  %110 = zext i8 %99 to i32
  %111 = shl nuw nsw i32 %110, 9
  %112 = or i32 %109, %111
  %113 = or i32 %112, %107
  %114 = or i32 %113, 128
  store i32 %114, i32* %105, align 4
  br label %115

115:                                              ; preds = %96, %6
  %116 = phi i32 [ %7, %6 ], [ %98, %96 ]
  ret i32 %116
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden zeroext i1 @_ZNK2v88internal12ArrayLiteral22IsFastCloningSupportedEv(%"class.v8::internal::ArrayLiteral"* nocapture readonly) local_unnamed_addr #3 align 2 {
  %2 = getelementptr inbounds %"class.v8::internal::ArrayLiteral", %"class.v8::internal::ArrayLiteral"* %0, i64 0, i32 0, i32 1
  %3 = load i32, i32* %2, align 4
  %4 = shl i32 %3, 1
  %5 = icmp slt i32 %4, 4
  br i1 %5, label %6, label %10

6:                                                ; preds = %1
  %7 = getelementptr inbounds %"class.v8::internal::ArrayLiteral", %"class.v8::internal::ArrayLiteral"* %0, i64 0, i32 3, i32 2
  %8 = load i32, i32* %7, align 4
  %9 = icmp slt i32 %8, 16381
  br label %10

10:                                               ; preds = %6, %1
  %11 = phi i1 [ false, %1 ], [ %9, %6 ]
  ret i1 %11
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden zeroext i1 @_ZN2v88internal15BinaryOperation21IsSmiLiteralOperationEPPNS0_10ExpressionEPNS0_3SmiE(%"class.v8::internal::BinaryOperation"* nocapture readonly, %"class.v8::internal::Expression"** nocapture, %"class.v8::internal::Smi"* nocapture) local_unnamed_addr #6 align 2 {
  %4 = getelementptr inbounds %"class.v8::internal::BinaryOperation", %"class.v8::internal::BinaryOperation"* %0, i64 0, i32 1
  %5 = getelementptr inbounds %"class.v8::internal::BinaryOperation", %"class.v8::internal::BinaryOperation"* %0, i64 0, i32 2
  %6 = load %"class.v8::internal::Expression"*, %"class.v8::internal::Expression"** %5, align 8
  %7 = getelementptr inbounds %"class.v8::internal::Expression", %"class.v8::internal::Expression"* %6, i64 0, i32 0, i32 1
  %8 = load i32, i32* %7, align 4
  %9 = and i32 %8, 1983
  %10 = icmp eq i32 %9, 41
  %11 = ptrtoint %"class.v8::internal::Expression"* %6 to i64
  br i1 %10, label %12, label %27

12:                                               ; preds = %3
  %13 = bitcast %"class.v8::internal::Expression"** %4 to i64*
  %14 = load i64, i64* %13, align 8
  %15 = bitcast %"class.v8::internal::Expression"** %1 to i64*
  store i64 %14, i64* %15, align 8
  %16 = load i32, i32* %7, align 4
  %17 = and i32 %16, 63
  %18 = icmp eq i32 %17, 41
  %19 = bitcast %"class.v8::internal::Expression"* %6 to %"class.v8::internal::Literal"*
  %20 = select i1 %18, %"class.v8::internal::Literal"* %19, %"class.v8::internal::Literal"* null
  %21 = getelementptr inbounds %"class.v8::internal::Literal", %"class.v8::internal::Literal"* %20, i64 0, i32 1
  %22 = bitcast %union.anon.1138* %21 to i32*
  %23 = load i32, i32* %22, align 8
  %24 = sext i32 %23 to i64
  %25 = shl nsw i64 %24, 1
  %26 = getelementptr inbounds %"class.v8::internal::Smi", %"class.v8::internal::Smi"* %2, i64 0, i32 0, i32 0, i32 0
  store i64 %25, i64* %26, align 8
  br label %52

27:                                               ; preds = %3
  %28 = getelementptr inbounds %"class.v8::internal::BinaryOperation", %"class.v8::internal::BinaryOperation"* %0, i64 0, i32 0, i32 0, i32 1
  %29 = load i32, i32* %28, align 4
  %30 = lshr i32 %29, 7
  %31 = trunc i32 %30 to i8
  %32 = and i8 %31, 127
  switch i8 %32, label %52 [
    i8 43, label %33
    i8 39, label %33
    i8 37, label %33
    i8 38, label %33
  ]

33:                                               ; preds = %27, %27, %27, %27
  %34 = load %"class.v8::internal::Expression"*, %"class.v8::internal::Expression"** %4, align 8
  %35 = getelementptr inbounds %"class.v8::internal::Expression", %"class.v8::internal::Expression"* %34, i64 0, i32 0, i32 1
  %36 = load i32, i32* %35, align 4
  %37 = and i32 %36, 1983
  %38 = icmp eq i32 %37, 41
  br i1 %38, label %39, label %52

39:                                               ; preds = %33
  %40 = bitcast %"class.v8::internal::Expression"** %1 to i64*
  store i64 %11, i64* %40, align 8
  %41 = load i32, i32* %35, align 4
  %42 = and i32 %41, 63
  %43 = icmp eq i32 %42, 41
  %44 = bitcast %"class.v8::internal::Expression"* %34 to %"class.v8::internal::Literal"*
  %45 = select i1 %43, %"class.v8::internal::Literal"* %44, %"class.v8::internal::Literal"* null
  %46 = getelementptr inbounds %"class.v8::internal::Literal", %"class.v8::internal::Literal"* %45, i64 0, i32 1
  %47 = bitcast %union.anon.1138* %46 to i32*
  %48 = load i32, i32* %47, align 8
  %49 = sext i32 %48 to i64
  %50 = shl nsw i64 %49, 1
  %51 = getelementptr inbounds %"class.v8::internal::Smi", %"class.v8::internal::Smi"* %2, i64 0, i32 0, i32 0, i32 0
  store i64 %50, i64* %51, align 8
  br label %52

52:                                               ; preds = %39, %33, %27, %12
  %53 = phi i1 [ true, %12 ], [ false, %27 ], [ true, %39 ], [ false, %33 ]
  ret i1 %53
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden zeroext i1 @_ZN2v88internal16CompareOperation22IsLiteralCompareTypeofEPPNS0_10ExpressionEPPNS0_7LiteralE(%"class.v8::internal::CompareOperation"* nocapture readonly, %"class.v8::internal::Expression"** nocapture, %"class.v8::internal::Literal"** nocapture) local_unnamed_addr #6 align 2 {
  %4 = getelementptr inbounds %"class.v8::internal::CompareOperation", %"class.v8::internal::CompareOperation"* %0, i64 0, i32 1
  %5 = load %"class.v8::internal::Expression"*, %"class.v8::internal::Expression"** %4, align 8
  %6 = getelementptr inbounds %"class.v8::internal::CompareOperation", %"class.v8::internal::CompareOperation"* %0, i64 0, i32 0, i32 0, i32 1
  %7 = getelementptr inbounds %"class.v8::internal::CompareOperation", %"class.v8::internal::CompareOperation"* %0, i64 0, i32 2
  %8 = load %"class.v8::internal::Expression"*, %"class.v8::internal::Expression"** %7, align 8
  %9 = getelementptr inbounds %"class.v8::internal::Expression", %"class.v8::internal::Expression"* %5, i64 0, i32 0, i32 1
  %10 = load i32, i32* %9, align 4
  %11 = icmp ne %"class.v8::internal::Expression"* %5, null
  %12 = and i32 %10, 16319
  %13 = icmp eq i32 %12, 6707
  %14 = and i1 %11, %13
  br i1 %14, label %18, label %15

15:                                               ; preds = %3
  %16 = getelementptr inbounds %"class.v8::internal::Expression", %"class.v8::internal::Expression"* %8, i64 0, i32 0, i32 1
  %17 = load i32, i32* %16, align 4
  br label %41

18:                                               ; preds = %3
  %19 = load i32, i32* %6, align 4
  %20 = getelementptr inbounds %"class.v8::internal::Expression", %"class.v8::internal::Expression"* %8, i64 0, i32 0, i32 1
  %21 = load i32, i32* %20, align 4
  %22 = and i32 %21, 1983
  %23 = icmp eq i32 %22, 425
  %24 = and i32 %19, 16128
  %25 = icmp eq i32 %24, 7168
  %26 = and i1 %25, %23
  br i1 %26, label %27, label %41

27:                                               ; preds = %18
  %28 = and i32 %10, 63
  %29 = icmp eq i32 %28, 51
  %30 = bitcast %"class.v8::internal::Expression"* %5 to %"class.v8::internal::UnaryOperation"*
  %31 = select i1 %29, %"class.v8::internal::UnaryOperation"* %30, %"class.v8::internal::UnaryOperation"* null
  %32 = getelementptr inbounds %"class.v8::internal::UnaryOperation", %"class.v8::internal::UnaryOperation"* %31, i64 0, i32 1
  %33 = bitcast %"class.v8::internal::Expression"** %32 to i64*
  %34 = load i64, i64* %33, align 8
  %35 = bitcast %"class.v8::internal::Expression"** %1 to i64*
  store i64 %34, i64* %35, align 8
  %36 = load i32, i32* %20, align 4
  %37 = and i32 %36, 63
  %38 = icmp eq i32 %37, 41
  %39 = bitcast %"class.v8::internal::Expression"* %8 to %"class.v8::internal::Literal"*
  %40 = select i1 %38, %"class.v8::internal::Literal"* %39, %"class.v8::internal::Literal"* null
  store %"class.v8::internal::Literal"* %40, %"class.v8::internal::Literal"** %2, align 8
  br label %68

41:                                               ; preds = %15, %18
  %42 = phi i32 [ %17, %15 ], [ %21, %18 ]
  %43 = icmp ne %"class.v8::internal::Expression"* %8, null
  %44 = and i32 %42, 16319
  %45 = icmp eq i32 %44, 6707
  %46 = and i1 %43, %45
  br i1 %46, label %47, label %68

47:                                               ; preds = %41
  %48 = load i32, i32* %6, align 4
  %49 = and i32 %10, 1983
  %50 = icmp eq i32 %49, 425
  %51 = and i32 %48, 16128
  %52 = icmp eq i32 %51, 7168
  %53 = and i1 %52, %50
  br i1 %53, label %54, label %68

54:                                               ; preds = %47
  %55 = and i32 %42, 63
  %56 = icmp eq i32 %55, 51
  %57 = bitcast %"class.v8::internal::Expression"* %8 to %"class.v8::internal::UnaryOperation"*
  %58 = select i1 %56, %"class.v8::internal::UnaryOperation"* %57, %"class.v8::internal::UnaryOperation"* null
  %59 = getelementptr inbounds %"class.v8::internal::UnaryOperation", %"class.v8::internal::UnaryOperation"* %58, i64 0, i32 1
  %60 = bitcast %"class.v8::internal::Expression"** %59 to i64*
  %61 = load i64, i64* %60, align 8
  %62 = bitcast %"class.v8::internal::Expression"** %1 to i64*
  store i64 %61, i64* %62, align 8
  %63 = load i32, i32* %9, align 4
  %64 = and i32 %63, 63
  %65 = icmp eq i32 %64, 41
  %66 = bitcast %"class.v8::internal::Expression"* %5 to %"class.v8::internal::Literal"*
  %67 = select i1 %65, %"class.v8::internal::Literal"* %66, %"class.v8::internal::Literal"* null
  store %"class.v8::internal::Literal"* %67, %"class.v8::internal::Literal"** %2, align 8
  br label %68

68:                                               ; preds = %54, %47, %41, %27
  %69 = phi i1 [ true, %27 ], [ true, %54 ], [ false, %47 ], [ false, %41 ]
  ret i1 %69
}

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN2v88internal16CompareOperation25IsLiteralCompareUndefinedEPPNS0_10ExpressionE(%"class.v8::internal::CompareOperation"* nocapture readonly, %"class.v8::internal::Expression"** nocapture) local_unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.v8::internal::CompareOperation", %"class.v8::internal::CompareOperation"* %0, i64 0, i32 1
  %4 = load %"class.v8::internal::Expression"*, %"class.v8::internal::Expression"** %3, align 8
  %5 = getelementptr inbounds %"class.v8::internal::CompareOperation", %"class.v8::internal::CompareOperation"* %0, i64 0, i32 0, i32 0, i32 1
  %6 = load i32, i32* %5, align 4
  %7 = lshr i32 %6, 7
  %8 = trunc i32 %7 to i8
  %9 = getelementptr inbounds %"class.v8::internal::CompareOperation", %"class.v8::internal::CompareOperation"* %0, i64 0, i32 2
  %10 = bitcast %"class.v8::internal::Expression"** %9 to i64*
  %11 = load i64, i64* %10, align 8
  %12 = getelementptr inbounds %"class.v8::internal::Expression", %"class.v8::internal::Expression"* %4, i64 0, i32 0, i32 1
  %13 = load i32, i32* %12, align 4
  %14 = icmp ne %"class.v8::internal::Expression"* %4, null
  %15 = and i32 %13, 16319
  %16 = icmp eq i32 %15, 6835
  %17 = and i1 %14, %16
  br i1 %17, label %18, label %31

18:                                               ; preds = %2
  %19 = getelementptr inbounds %"class.v8::internal::Expression", %"class.v8::internal::Expression"* %4, i64 1
  %20 = bitcast %"class.v8::internal::Expression"* %19 to %"class.v8::internal::Expression"**
  %21 = load %"class.v8::internal::Expression"*, %"class.v8::internal::Expression"** %20, align 8
  %22 = getelementptr inbounds %"class.v8::internal::Expression", %"class.v8::internal::Expression"* %21, i64 0, i32 0, i32 1
  %23 = load i32, i32* %22, align 4
  %24 = and i32 %23, 63
  %25 = icmp eq i32 %24, 41
  %26 = and i8 %8, 126
  %27 = icmp eq i8 %26, 56
  %28 = and i1 %27, %25
  br i1 %28, label %29, label %31

29:                                               ; preds = %18
  %30 = bitcast %"class.v8::internal::Expression"** %1 to i64*
  store i64 %11, i64* %30, align 8
  br label %123

31:                                               ; preds = %18, %2
  %32 = and i32 %13, 63
  %33 = icmp eq i32 %32, 41
  br i1 %33, label %34, label %37

34:                                               ; preds = %31
  %35 = and i32 %13, 1920
  %36 = icmp eq i32 %35, 640
  br i1 %36, label %59, label %64

37:                                               ; preds = %31
  %38 = icmp ne i32 %32, 52
  %39 = icmp eq %"class.v8::internal::Expression"* %4, null
  %40 = or i1 %39, %38
  br i1 %40, label %64, label %41

41:                                               ; preds = %37
  %42 = getelementptr inbounds %"class.v8::internal::Expression", %"class.v8::internal::Expression"* %4, i64 1
  %43 = bitcast %"class.v8::internal::Expression"* %42 to %"class.v8::internal::Variable"**
  %44 = load %"class.v8::internal::Variable"*, %"class.v8::internal::Variable"** %43, align 8
  %45 = icmp eq %"class.v8::internal::Variable"* %44, null
  br i1 %45, label %64, label %46

46:                                               ; preds = %41
  %47 = getelementptr inbounds %"class.v8::internal::Variable", %"class.v8::internal::Variable"* %44, i64 0, i32 6
  %48 = load i16, i16* %47, align 8
  %49 = and i16 %48, 896
  %50 = icmp eq i16 %49, 0
  br i1 %50, label %51, label %64

51:                                               ; preds = %46
  %52 = and i32 %13, 256
  %53 = icmp eq i32 %52, 0
  %54 = getelementptr inbounds %"class.v8::internal::Variable", %"class.v8::internal::Variable"* %44, i64 0, i32 1
  %55 = bitcast %"class.v8::internal::Expression"* %42 to %"class.v8::internal::AstRawString"**
  %56 = select i1 %53, %"class.v8::internal::AstRawString"** %55, %"class.v8::internal::AstRawString"** %54
  %57 = load %"class.v8::internal::AstRawString"*, %"class.v8::internal::AstRawString"** %56, align 8
  %58 = tail call zeroext i1 @_ZNK2v88internal12AstRawString16IsOneByteEqualToEPKc(%"class.v8::internal::AstRawString"* %57, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.1, i64 0, i64 0)) #11
  br i1 %58, label %59, label %64

59:                                               ; preds = %51, %34
  %60 = and i8 %8, 126
  %61 = icmp eq i8 %60, 56
  br i1 %61, label %62, label %64

62:                                               ; preds = %59
  %63 = bitcast %"class.v8::internal::Expression"** %1 to i64*
  store i64 %11, i64* %63, align 8
  br label %123

64:                                               ; preds = %59, %51, %34, %37, %46, %41
  %65 = load %"class.v8::internal::Expression"*, %"class.v8::internal::Expression"** %9, align 8
  %66 = load i32, i32* %5, align 4
  %67 = lshr i32 %66, 7
  %68 = trunc i32 %67 to i8
  %69 = bitcast %"class.v8::internal::Expression"** %3 to i64*
  %70 = load i64, i64* %69, align 8
  %71 = getelementptr inbounds %"class.v8::internal::Expression", %"class.v8::internal::Expression"* %65, i64 0, i32 0, i32 1
  %72 = load i32, i32* %71, align 4
  %73 = icmp ne %"class.v8::internal::Expression"* %65, null
  %74 = and i32 %72, 16319
  %75 = icmp eq i32 %74, 6835
  %76 = and i1 %73, %75
  br i1 %76, label %77, label %90

77:                                               ; preds = %64
  %78 = getelementptr inbounds %"class.v8::internal::Expression", %"class.v8::internal::Expression"* %65, i64 1
  %79 = bitcast %"class.v8::internal::Expression"* %78 to %"class.v8::internal::Expression"**
  %80 = load %"class.v8::internal::Expression"*, %"class.v8::internal::Expression"** %79, align 8
  %81 = getelementptr inbounds %"class.v8::internal::Expression", %"class.v8::internal::Expression"* %80, i64 0, i32 0, i32 1
  %82 = load i32, i32* %81, align 4
  %83 = and i32 %82, 63
  %84 = icmp eq i32 %83, 41
  %85 = and i8 %68, 126
  %86 = icmp eq i8 %85, 56
  %87 = and i1 %86, %84
  br i1 %87, label %88, label %90

88:                                               ; preds = %77
  %89 = bitcast %"class.v8::internal::Expression"** %1 to i64*
  store i64 %70, i64* %89, align 8
  br label %123

90:                                               ; preds = %77, %64
  %91 = and i32 %72, 63
  %92 = icmp eq i32 %91, 41
  br i1 %92, label %93, label %96

93:                                               ; preds = %90
  %94 = and i32 %72, 1920
  %95 = icmp eq i32 %94, 640
  br i1 %95, label %118, label %123

96:                                               ; preds = %90
  %97 = icmp ne i32 %91, 52
  %98 = icmp eq %"class.v8::internal::Expression"* %65, null
  %99 = or i1 %98, %97
  br i1 %99, label %123, label %100

100:                                              ; preds = %96
  %101 = getelementptr inbounds %"class.v8::internal::Expression", %"class.v8::internal::Expression"* %65, i64 1
  %102 = bitcast %"class.v8::internal::Expression"* %101 to %"class.v8::internal::Variable"**
  %103 = load %"class.v8::internal::Variable"*, %"class.v8::internal::Variable"** %102, align 8
  %104 = icmp eq %"class.v8::internal::Variable"* %103, null
  br i1 %104, label %123, label %105

105:                                              ; preds = %100
  %106 = getelementptr inbounds %"class.v8::internal::Variable", %"class.v8::internal::Variable"* %103, i64 0, i32 6
  %107 = load i16, i16* %106, align 8
  %108 = and i16 %107, 896
  %109 = icmp eq i16 %108, 0
  br i1 %109, label %110, label %123

110:                                              ; preds = %105
  %111 = and i32 %72, 256
  %112 = icmp eq i32 %111, 0
  %113 = getelementptr inbounds %"class.v8::internal::Variable", %"class.v8::internal::Variable"* %103, i64 0, i32 1
  %114 = bitcast %"class.v8::internal::Expression"* %101 to %"class.v8::internal::AstRawString"**
  %115 = select i1 %112, %"class.v8::internal::AstRawString"** %114, %"class.v8::internal::AstRawString"** %113
  %116 = load %"class.v8::internal::AstRawString"*, %"class.v8::internal::AstRawString"** %115, align 8
  %117 = tail call zeroext i1 @_ZNK2v88internal12AstRawString16IsOneByteEqualToEPKc(%"class.v8::internal::AstRawString"* %116, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.1, i64 0, i64 0)) #11
  br i1 %117, label %118, label %123

118:                                              ; preds = %110, %93
  %119 = and i8 %68, 126
  %120 = icmp eq i8 %119, 56
  br i1 %120, label %121, label %123

121:                                              ; preds = %118
  %122 = bitcast %"class.v8::internal::Expression"** %1 to i64*
  store i64 %70, i64* %122, align 8
  br label %123

123:                                              ; preds = %121, %118, %110, %105, %100, %96, %93, %88, %62, %29
  %124 = phi i1 [ true, %29 ], [ true, %62 ], [ true, %88 ], [ true, %121 ], [ false, %118 ], [ false, %110 ], [ false, %93 ], [ false, %96 ], [ false, %105 ], [ false, %100 ]
  ret i1 %124
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden zeroext i1 @_ZN2v88internal16CompareOperation20IsLiteralCompareNullEPPNS0_10ExpressionE(%"class.v8::internal::CompareOperation"* nocapture readonly, %"class.v8::internal::Expression"** nocapture) local_unnamed_addr #6 align 2 {
  %3 = getelementptr inbounds %"class.v8::internal::CompareOperation", %"class.v8::internal::CompareOperation"* %0, i64 0, i32 1
  %4 = load %"class.v8::internal::Expression"*, %"class.v8::internal::Expression"** %3, align 8
  %5 = getelementptr inbounds %"class.v8::internal::CompareOperation", %"class.v8::internal::CompareOperation"* %0, i64 0, i32 0, i32 0, i32 1
  %6 = load i32, i32* %5, align 4
  %7 = getelementptr inbounds %"class.v8::internal::CompareOperation", %"class.v8::internal::CompareOperation"* %0, i64 0, i32 2
  %8 = getelementptr %"class.v8::internal::Expression", %"class.v8::internal::Expression"* %4, i64 0, i32 0, i32 1
  %9 = load i32, i32* %8, align 4
  %10 = and i32 %9, 1983
  %11 = icmp eq i32 %10, 809
  %12 = and i32 %6, 16128
  %13 = icmp eq i32 %12, 7168
  %14 = and i1 %13, %11
  br i1 %14, label %15, label %18

15:                                               ; preds = %2
  %16 = bitcast %"class.v8::internal::Expression"** %7 to i64*
  %17 = load i64, i64* %16, align 8
  br label %26

18:                                               ; preds = %2
  %19 = ptrtoint %"class.v8::internal::Expression"* %4 to i64
  %20 = load %"class.v8::internal::Expression"*, %"class.v8::internal::Expression"** %7, align 8
  %21 = getelementptr %"class.v8::internal::Expression", %"class.v8::internal::Expression"* %20, i64 0, i32 0, i32 1
  %22 = load i32, i32* %21, align 4
  %23 = and i32 %22, 1983
  %24 = icmp eq i32 %23, 809
  %25 = and i1 %13, %24
  br i1 %25, label %26, label %29

26:                                               ; preds = %18, %15
  %27 = phi i64 [ %17, %15 ], [ %19, %18 ]
  %28 = bitcast %"class.v8::internal::Expression"** %1 to i64*
  store i64 %27, i64* %28, align 8
  br label %29

29:                                               ; preds = %26, %18
  %30 = phi i1 [ false, %18 ], [ true, %26 ]
  ret i1 %30
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @_ZN2v88internal8CallBase21ComputeSpreadPositionEv(%"class.v8::internal::CallBase"* nocapture) local_unnamed_addr #6 align 2 {
  %2 = getelementptr inbounds %"class.v8::internal::CallBase", %"class.v8::internal::CallBase"* %0, i64 0, i32 2, i32 2
  %3 = load i32, i32* %2, align 4
  %4 = icmp sgt i32 %3, 0
  br i1 %4, label %5, label %25

5:                                                ; preds = %1
  %6 = getelementptr inbounds %"class.v8::internal::CallBase", %"class.v8::internal::CallBase"* %0, i64 0, i32 2, i32 0
  %7 = load %"class.v8::internal::Expression"**, %"class.v8::internal::Expression"*** %6, align 8
  %8 = zext i32 %3 to i64
  br label %9

9:                                                ; preds = %19, %5
  %10 = phi i64 [ 0, %5 ], [ %20, %19 ]
  %11 = phi i32 [ 0, %5 ], [ %21, %19 ]
  %12 = getelementptr inbounds %"class.v8::internal::Expression"*, %"class.v8::internal::Expression"** %7, i64 %10
  %13 = bitcast %"class.v8::internal::Expression"** %12 to %"class.v8::internal::AstNode"**
  %14 = load %"class.v8::internal::AstNode"*, %"class.v8::internal::AstNode"** %13, align 8
  %15 = getelementptr inbounds %"class.v8::internal::AstNode", %"class.v8::internal::AstNode"* %14, i64 0, i32 1
  %16 = load i32, i32* %15, align 4
  %17 = and i32 %16, 63
  %18 = icmp eq i32 %17, 45
  br i1 %18, label %23, label %19

19:                                               ; preds = %9
  %20 = add nuw nsw i64 %10, 1
  %21 = add nuw nsw i32 %11, 1
  %22 = icmp eq i64 %20, %8
  br i1 %22, label %25, label %9

23:                                               ; preds = %9
  %24 = trunc i64 %10 to i32
  br label %25

25:                                               ; preds = %19, %23, %1
  %26 = phi i32 [ 0, %1 ], [ %24, %23 ], [ %21, %19 ]
  %27 = add nsw i32 %3, -1
  %28 = icmp eq i32 %26, %27
  %29 = select i1 %28, i32 128, i32 256
  %30 = getelementptr inbounds %"class.v8::internal::CallBase", %"class.v8::internal::CallBase"* %0, i64 0, i32 0, i32 0, i32 1
  %31 = load i32, i32* %30, align 4
  %32 = or i32 %31, %29
  store i32 %32, i32* %30, align 4
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @_ZNK2v88internal4Call11GetCallTypeEv(%"class.v8::internal::Call"* nocapture readonly) local_unnamed_addr #0 align 2 {
  %2 = alloca i32, align 4
  %3 = getelementptr inbounds %"class.v8::internal::Call", %"class.v8::internal::Call"* %0, i64 0, i32 0, i32 1
  %4 = load %"class.v8::internal::Expression"*, %"class.v8::internal::Expression"** %3, align 8
  %5 = getelementptr inbounds %"class.v8::internal::Expression", %"class.v8::internal::Expression"* %4, i64 0, i32 0, i32 1
  %6 = load i32, i32* %5, align 4
  %7 = and i32 %6, 63
  %8 = icmp ne i32 %7, 52
  %9 = icmp eq %"class.v8::internal::Expression"* %4, null
  %10 = or i1 %9, %8
  br i1 %10, label %23, label %11

11:                                               ; preds = %1
  %12 = getelementptr inbounds %"class.v8::internal::Expression", %"class.v8::internal::Expression"* %4, i64 1
  %13 = bitcast %"class.v8::internal::Expression"* %12 to %"class.v8::internal::Variable"**
  %14 = load %"class.v8::internal::Variable"*, %"class.v8::internal::Variable"** %13, align 8
  %15 = getelementptr inbounds %"class.v8::internal::Variable", %"class.v8::internal::Variable"* %14, i64 0, i32 6
  %16 = load i16, i16* %15, align 8
  %17 = and i16 %16, 896
  switch i16 %17, label %18 [
    i16 0, label %105
    i16 512, label %19
  ]

18:                                               ; preds = %11
  br label %105

19:                                               ; preds = %11
  %20 = and i16 %16, 15
  %21 = icmp eq i16 %20, 4
  %22 = select i1 %21, i32 1, i32 11
  br label %105

23:                                               ; preds = %1
  %24 = icmp eq i32 %7, 46
  br i1 %24, label %105, label %25

25:                                               ; preds = %23
  %26 = icmp ne i32 %7, 44
  %27 = or i1 %9, %26
  br i1 %27, label %28, label %40

28:                                               ; preds = %25
  %29 = icmp eq i32 %7, 43
  br i1 %29, label %30, label %105, !prof !3

30:                                               ; preds = %28
  %31 = getelementptr inbounds %"class.v8::internal::Expression", %"class.v8::internal::Expression"* %4, i64 1
  %32 = bitcast %"class.v8::internal::Expression"* %31 to %"class.v8::internal::Expression"**
  %33 = load %"class.v8::internal::Expression"*, %"class.v8::internal::Expression"** %32, align 8
  %34 = getelementptr inbounds %"class.v8::internal::Expression", %"class.v8::internal::Expression"* %33, i64 0, i32 0, i32 1
  %35 = load i32, i32* %34, align 4
  %36 = and i32 %35, 63
  %37 = icmp ne i32 %36, 44
  %38 = icmp eq %"class.v8::internal::Expression"* %33, null
  %39 = or i1 %38, %37
  br i1 %39, label %105, label %40

40:                                               ; preds = %30, %25
  %41 = phi i1 [ false, %25 ], [ true, %30 ]
  %42 = phi %"class.v8::internal::Expression"* [ %4, %25 ], [ %33, %30 ]
  %43 = getelementptr inbounds %"class.v8::internal::Expression", %"class.v8::internal::Expression"* %42, i64 2
  %44 = bitcast %"class.v8::internal::Expression"* %43 to %"class.v8::internal::Expression"**
  %45 = load %"class.v8::internal::Expression"*, %"class.v8::internal::Expression"** %44, align 8
  %46 = getelementptr inbounds %"class.v8::internal::Expression", %"class.v8::internal::Expression"* %45, i64 0, i32 0, i32 1
  %47 = load i32, i32* %46, align 4
  %48 = and i32 %47, 63
  %49 = icmp eq i32 %48, 52
  br i1 %49, label %50, label %81

50:                                               ; preds = %40
  %51 = and i32 %47, 256
  %52 = icmp eq i32 %51, 0
  %53 = getelementptr inbounds %"class.v8::internal::Expression", %"class.v8::internal::Expression"* %45, i64 1
  br i1 %52, label %58, label %54

54:                                               ; preds = %50
  %55 = bitcast %"class.v8::internal::Expression"* %53 to %"class.v8::internal::Variable"**
  %56 = load %"class.v8::internal::Variable"*, %"class.v8::internal::Variable"** %55, align 8
  %57 = getelementptr inbounds %"class.v8::internal::Variable", %"class.v8::internal::Variable"* %56, i64 0, i32 1
  br label %60

58:                                               ; preds = %50
  %59 = bitcast %"class.v8::internal::Expression"* %53 to %"class.v8::internal::AstRawString"**
  br label %60

60:                                               ; preds = %58, %54
  %61 = phi %"class.v8::internal::AstRawString"** [ %57, %54 ], [ %59, %58 ]
  %62 = load %"class.v8::internal::AstRawString"*, %"class.v8::internal::AstRawString"** %61, align 8
  %63 = getelementptr inbounds %"class.v8::internal::AstRawString", %"class.v8::internal::AstRawString"* %62, i64 0, i32 3
  %64 = load i8, i8* %63, align 4, !range !2
  %65 = icmp eq i8 %64, 0
  %66 = getelementptr inbounds %"class.v8::internal::AstRawString", %"class.v8::internal::AstRawString"* %62, i64 0, i32 1, i32 1
  %67 = load i64, i64* %66, align 8
  %68 = trunc i64 %67 to i32
  %69 = sdiv i32 %68, 2
  %70 = select i1 %65, i32 %69, i32 %68
  %71 = icmp sgt i32 %70, 0
  br i1 %71, label %72, label %81

72:                                               ; preds = %60
  %73 = tail call zeroext i16 @_ZNK2v88internal12AstRawString14FirstCharacterEv(%"class.v8::internal::AstRawString"* %62) #11
  %74 = icmp eq i16 %73, 35
  br i1 %74, label %79, label %75

75:                                               ; preds = %72
  %76 = load %"class.v8::internal::Expression"*, %"class.v8::internal::Expression"** %44, align 8
  %77 = getelementptr inbounds %"class.v8::internal::Expression", %"class.v8::internal::Expression"* %76, i64 0, i32 0, i32 1
  %78 = load i32, i32* %77, align 4
  br label %81

79:                                               ; preds = %72
  %80 = select i1 %41, i32 9, i32 8
  br label %105

81:                                               ; preds = %75, %60, %40
  %82 = phi i32 [ %78, %75 ], [ %47, %60 ], [ %47, %40 ]
  %83 = phi %"class.v8::internal::Expression"* [ %76, %75 ], [ %45, %60 ], [ %45, %40 ]
  %84 = getelementptr inbounds %"class.v8::internal::Expression", %"class.v8::internal::Expression"* %42, i64 1
  %85 = bitcast %"class.v8::internal::Expression"* %84 to %"class.v8::internal::Expression"**
  %86 = load %"class.v8::internal::Expression"*, %"class.v8::internal::Expression"** %85, align 8
  %87 = getelementptr inbounds %"class.v8::internal::Expression", %"class.v8::internal::Expression"* %86, i64 0, i32 0, i32 1
  %88 = load i32, i32* %87, align 4
  %89 = and i32 %88, 63
  %90 = icmp eq i32 %89, 47
  %91 = and i32 %82, 1983
  %92 = icmp eq i32 %91, 425
  br i1 %92, label %93, label %102

93:                                               ; preds = %81
  %94 = bitcast i32* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %94) #11
  %95 = getelementptr inbounds %"class.v8::internal::Expression", %"class.v8::internal::Expression"* %83, i64 1
  %96 = bitcast %"class.v8::internal::Expression"* %95 to %"class.v8::internal::AstRawString"**
  %97 = load %"class.v8::internal::AstRawString"*, %"class.v8::internal::AstRawString"** %96, align 8
  %98 = call zeroext i1 @_ZNK2v88internal12AstRawString12AsArrayIndexEPj(%"class.v8::internal::AstRawString"* %97, i32* nonnull %2) #11
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %94) #11
  br i1 %98, label %102, label %99

99:                                               ; preds = %93
  %100 = select i1 %41, i32 4, i32 2
  %101 = select i1 %90, i32 6, i32 %100
  ret i32 %101

102:                                              ; preds = %93, %81
  %103 = select i1 %41, i32 5, i32 3
  %104 = select i1 %90, i32 7, i32 %103
  br label %105

105:                                              ; preds = %18, %30, %11, %28, %102, %79, %23, %19
  %106 = phi i32 [ %22, %19 ], [ 0, %11 ], [ 10, %23 ], [ %80, %79 ], [ %104, %102 ], [ 11, %30 ], [ 11, %28 ], [ 11, %18 ]
  ret i32 %106
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal10CaseClauseC2EPNS0_4ZoneEPNS0_10ExpressionERKNS0_10ScopedListIPNS0_9StatementEPvEE(%"class.v8::internal::CaseClause"*, %"class.v8::internal::Zone"*, %"class.v8::internal::Expression"*, %"class.v8::internal::ScopedList.1185"* nocapture readonly dereferenceable(24)) unnamed_addr #0 align 2 {
  %5 = alloca %"class.v8::internal::Vector.1186", align 8
  %6 = getelementptr inbounds %"class.v8::internal::CaseClause", %"class.v8::internal::CaseClause"* %0, i64 0, i32 0
  store %"class.v8::internal::Expression"* %2, %"class.v8::internal::Expression"** %6, align 8
  %7 = getelementptr inbounds %"class.v8::internal::CaseClause", %"class.v8::internal::CaseClause"* %0, i64 0, i32 1
  %8 = bitcast %"class.v8::internal::Vector.1186"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %8) #11
  %9 = getelementptr inbounds %"class.v8::internal::ScopedList.1185", %"class.v8::internal::ScopedList.1185"* %3, i64 0, i32 0
  %10 = load %"class.std::__1::vector.1165"*, %"class.std::__1::vector.1165"** %9, align 8
  %11 = getelementptr inbounds %"class.std::__1::vector.1165", %"class.std::__1::vector.1165"* %10, i64 0, i32 0, i32 0
  %12 = load i8**, i8*** %11, align 8
  %13 = getelementptr inbounds %"class.v8::internal::ScopedList.1185", %"class.v8::internal::ScopedList.1185"* %3, i64 0, i32 1
  %14 = load i64, i64* %13, align 8
  %15 = getelementptr inbounds i8*, i8** %12, i64 %14
  %16 = getelementptr inbounds %"class.v8::internal::ScopedList.1185", %"class.v8::internal::ScopedList.1185"* %3, i64 0, i32 2
  %17 = load i64, i64* %16, align 8
  %18 = sub i64 %17, %14
  %19 = shl i64 %18, 32
  %20 = ashr exact i64 %19, 32
  %21 = bitcast %"class.v8::internal::Vector.1186"* %5 to i8***
  store i8** %15, i8*** %21, align 8
  %22 = getelementptr inbounds %"class.v8::internal::Vector.1186", %"class.v8::internal::Vector.1186"* %5, i64 0, i32 1
  store i64 %20, i64* %22, align 8
  call void @_ZN2v88internal8ZoneListIPNS0_9StatementEEC2ERKNS0_6VectorIKS3_EEPNS0_4ZoneE(%"class.v8::internal::ZoneList.1167"* %7, %"class.v8::internal::Vector.1186"* nonnull dereferenceable(16) %5, %"class.v8::internal::Zone"* %1)
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %8) #11
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN2v88internal8ZoneListIPNS0_9StatementEEC2ERKNS0_6VectorIKS3_EEPNS0_4ZoneE(%"class.v8::internal::ZoneList.1167"*, %"class.v8::internal::Vector.1186"* dereferenceable(16), %"class.v8::internal::Zone"*) unnamed_addr #0 comdat align 2 {
  %4 = getelementptr inbounds %"class.v8::internal::Vector.1186", %"class.v8::internal::Vector.1186"* %1, i64 0, i32 1
  %5 = load i64, i64* %4, align 8
  %6 = trunc i64 %5 to i32
  %7 = getelementptr inbounds %"class.v8::internal::ZoneList.1167", %"class.v8::internal::ZoneList.1167"* %0, i64 0, i32 0
  store %"class.v8::internal::Statement"** null, %"class.v8::internal::Statement"*** %7, align 8
  %8 = getelementptr inbounds %"class.v8::internal::ZoneList.1167", %"class.v8::internal::ZoneList.1167"* %0, i64 0, i32 1
  store i32 %6, i32* %8, align 8
  %9 = getelementptr inbounds %"class.v8::internal::ZoneList.1167", %"class.v8::internal::ZoneList.1167"* %0, i64 0, i32 2
  store i32 0, i32* %9, align 4
  %10 = icmp sgt i32 %6, 0
  br i1 %10, label %11, label %27

11:                                               ; preds = %3
  %12 = shl i64 %5, 32
  %13 = ashr exact i64 %12, 29
  %14 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %2, i64 0, i32 2
  %15 = load i64, i64* %14, align 8
  %16 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %2, i64 0, i32 3
  %17 = load i64, i64* %16, align 8
  %18 = sub i64 %17, %15
  %19 = icmp ugt i64 %13, %18
  br i1 %19, label %20, label %22, !prof !3

20:                                               ; preds = %11
  %21 = tail call i64 @_ZN2v88internal4Zone9NewExpandEm(%"class.v8::internal::Zone"* %2, i64 %13) #11
  br label %24

22:                                               ; preds = %11
  %23 = add i64 %15, %13
  store i64 %23, i64* %14, align 8
  br label %24

24:                                               ; preds = %22, %20
  %25 = phi i64 [ %21, %20 ], [ %15, %22 ]
  %26 = inttoptr i64 %25 to %"class.v8::internal::Statement"**
  br label %27

27:                                               ; preds = %3, %24
  %28 = phi %"class.v8::internal::Statement"** [ %26, %24 ], [ null, %3 ]
  store %"class.v8::internal::Statement"** %28, %"class.v8::internal::Statement"*** %7, align 8
  %29 = load i64, i64* %4, align 8
  %30 = trunc i64 %29 to i32
  %31 = icmp eq i32 %30, 0
  br i1 %31, label %79, label %32

32:                                               ; preds = %27
  %33 = load i32, i32* %9, align 4
  %34 = add nsw i32 %33, %30
  %35 = load i32, i32* %8, align 8
  %36 = icmp slt i32 %35, %34
  br i1 %36, label %37, label %69

37:                                               ; preds = %32
  %38 = sext i32 %34 to i64
  %39 = shl nsw i64 %38, 3
  %40 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %2, i64 0, i32 2
  %41 = load i64, i64* %40, align 8
  %42 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %2, i64 0, i32 3
  %43 = load i64, i64* %42, align 8
  %44 = sub i64 %43, %41
  %45 = icmp ugt i64 %39, %44
  br i1 %45, label %46, label %48, !prof !3

46:                                               ; preds = %37
  %47 = tail call i64 @_ZN2v88internal4Zone9NewExpandEm(%"class.v8::internal::Zone"* %2, i64 %39) #11
  br label %50

48:                                               ; preds = %37
  %49 = add i64 %41, %39
  store i64 %49, i64* %40, align 8
  br label %50

50:                                               ; preds = %48, %46
  %51 = phi i64 [ %47, %46 ], [ %41, %48 ]
  %52 = inttoptr i64 %51 to %"class.v8::internal::Statement"**
  %53 = load i32, i32* %9, align 4
  %54 = icmp sgt i32 %53, 0
  br i1 %54, label %55, label %67

55:                                               ; preds = %50
  %56 = inttoptr i64 %51 to i8*
  %57 = bitcast %"class.v8::internal::ZoneList.1167"* %0 to i8**
  %58 = load i8*, i8** %57, align 8
  %59 = sext i32 %53 to i64
  %60 = shl nsw i64 %59, 3
  switch i64 %60, label %66 [
    i64 16, label %65
    i64 8, label %61
  ]

61:                                               ; preds = %55
  %62 = bitcast i8* %58 to i64*
  %63 = inttoptr i64 %51 to i64*
  %64 = load i64, i64* %62, align 1
  store i64 %64, i64* %63, align 1
  br label %67

65:                                               ; preds = %55
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %56, i8* align 1 %58, i64 16, i1 false) #11
  br label %67

66:                                               ; preds = %55
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %56, i8* align 1 %58, i64 %60, i1 false) #11
  br label %67

67:                                               ; preds = %66, %65, %61, %50
  store %"class.v8::internal::Statement"** %52, %"class.v8::internal::Statement"*** %7, align 8
  store i32 %34, i32* %8, align 8
  %68 = load i32, i32* %9, align 4
  br label %69

69:                                               ; preds = %32, %67
  %70 = phi i32 [ %68, %67 ], [ %33, %32 ]
  %71 = phi %"class.v8::internal::Statement"** [ %52, %67 ], [ %28, %32 ]
  %72 = sext i32 %70 to i64
  %73 = getelementptr inbounds %"class.v8::internal::Statement"*, %"class.v8::internal::Statement"** %71, i64 %72
  %74 = bitcast %"class.v8::internal::Statement"** %73 to i8*
  %75 = bitcast %"class.v8::internal::Vector.1186"* %1 to i8**
  %76 = load i8*, i8** %75, align 8
  %77 = shl i64 %29, 32
  %78 = ashr exact i64 %77, 29
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %74, i8* align 1 %76, i64 %78, i1 false) #11
  store i32 %34, i32* %9, align 4
  br label %79

79:                                               ; preds = %27, %69
  ret void
}

declare zeroext i1 @_ZNK2v88internal12AstRawString12AsArrayIndexEPj(%"class.v8::internal::AstRawString"*, i32*) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZNK2v88internal7Literal8ToUint32EPj(%"class.v8::internal::Literal"* nocapture readonly, i32*) local_unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.v8::internal::Literal", %"class.v8::internal::Literal"* %0, i64 0, i32 0, i32 0, i32 1
  %4 = load i32, i32* %3, align 4
  %5 = lshr i32 %4, 7
  %6 = and i32 %5, 15
  switch i32 %6, label %29 [
    i32 3, label %7
    i32 0, label %11
    i32 1, label %17
  ]

7:                                                ; preds = %2
  %8 = getelementptr inbounds %"class.v8::internal::Literal", %"class.v8::internal::Literal"* %0, i64 0, i32 1, i32 0
  %9 = load %"class.v8::internal::AstRawString"*, %"class.v8::internal::AstRawString"** %8, align 8
  %10 = tail call zeroext i1 @_ZNK2v88internal12AstRawString12AsArrayIndexEPj(%"class.v8::internal::AstRawString"* %9, i32* %1) #11
  br label %29

11:                                               ; preds = %2
  %12 = getelementptr inbounds %"class.v8::internal::Literal", %"class.v8::internal::Literal"* %0, i64 0, i32 1
  %13 = bitcast %union.anon.1138* %12 to i32*
  %14 = load i32, i32* %13, align 8
  %15 = icmp slt i32 %14, 0
  br i1 %15, label %29, label %16

16:                                               ; preds = %11
  store i32 %14, i32* %1, align 4
  br label %29

17:                                               ; preds = %2
  %18 = getelementptr inbounds %"class.v8::internal::Literal", %"class.v8::internal::Literal"* %0, i64 0, i32 1
  %19 = bitcast %union.anon.1138* %18 to double*
  %20 = load double, double* %19, align 8
  %21 = fadd double %20, 0x4330000000000000
  %22 = bitcast double %21 to i64
  %23 = and i64 %22, -4294967296
  %24 = icmp eq i64 %23, 4841369599423283200
  br i1 %24, label %25, label %29

25:                                               ; preds = %17
  %26 = trunc i64 %22 to i32
  store i32 %26, i32* %1, align 4
  %27 = uitofp i32 %26 to double
  %28 = fcmp oeq double %20, %27
  br label %29

29:                                               ; preds = %25, %17, %2, %11, %16, %7
  %30 = phi i1 [ true, %16 ], [ %10, %7 ], [ false, %11 ], [ false, %2 ], [ %28, %25 ], [ false, %17 ]
  ret i1 %30
}

declare zeroext i1 @_ZN2v88internal15DoubleToBooleanEd(double) local_unnamed_addr #2

; Function Attrs: argmemonly nofree nounwind readonly
declare i64 @strlen(i8* nocapture) local_unnamed_addr #9

; Function Attrs: nounwind ssp uwtable
define hidden %"class.v8::internal::Literal"* @_ZN2v88internal14AstNodeFactory16NewNumberLiteralEdi(%"class.v8::internal::AstNodeFactory"* nocapture readonly, double, i32) local_unnamed_addr #0 align 2 {
  %4 = bitcast double %1 to i64
  %5 = fcmp ult double %1, 0xC1D0000000000000
  %6 = fcmp ugt double %1, 0x41CFFFFFFF800000
  %7 = or i1 %6, %5
  %8 = icmp eq i64 %4, -9223372036854775808
  %9 = or i1 %7, %8
  br i1 %9, label %34, label %10

10:                                               ; preds = %3
  %11 = fptosi double %1 to i32
  %12 = sitofp i32 %11 to double
  %13 = fcmp oeq double %12, %1
  br i1 %13, label %14, label %34

14:                                               ; preds = %10
  %15 = getelementptr inbounds %"class.v8::internal::AstNodeFactory", %"class.v8::internal::AstNodeFactory"* %0, i64 0, i32 0
  %16 = load %"class.v8::internal::Zone"*, %"class.v8::internal::Zone"** %15, align 8
  %17 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %16, i64 0, i32 2
  %18 = load i64, i64* %17, align 8
  %19 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %16, i64 0, i32 3
  %20 = load i64, i64* %19, align 8
  %21 = sub i64 %20, %18
  %22 = icmp ult i64 %21, 16
  br i1 %22, label %23, label %25, !prof !3

23:                                               ; preds = %14
  %24 = tail call i64 @_ZN2v88internal4Zone9NewExpandEm(%"class.v8::internal::Zone"* %16, i64 16) #11
  br label %27

25:                                               ; preds = %14
  %26 = add i64 %18, 16
  store i64 %26, i64* %17, align 8
  br label %27

27:                                               ; preds = %23, %25
  %28 = phi i64 [ %24, %23 ], [ %18, %25 ]
  %29 = inttoptr i64 %28 to %"class.v8::internal::Literal"*
  %30 = getelementptr inbounds %"class.v8::internal::Literal", %"class.v8::internal::Literal"* %29, i64 0, i32 0, i32 0, i32 0
  store i32 %2, i32* %30, align 4
  %31 = getelementptr inbounds %"class.v8::internal::Literal", %"class.v8::internal::Literal"* %29, i64 0, i32 0, i32 0, i32 1
  %32 = getelementptr inbounds %"class.v8::internal::Literal", %"class.v8::internal::Literal"* %29, i64 0, i32 1
  %33 = bitcast %union.anon.1138* %32 to i32*
  store i32 %11, i32* %33, align 8
  store i32 41, i32* %31, align 4
  br label %54

34:                                               ; preds = %10, %3
  %35 = getelementptr inbounds %"class.v8::internal::AstNodeFactory", %"class.v8::internal::AstNodeFactory"* %0, i64 0, i32 0
  %36 = load %"class.v8::internal::Zone"*, %"class.v8::internal::Zone"** %35, align 8
  %37 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %36, i64 0, i32 2
  %38 = load i64, i64* %37, align 8
  %39 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %36, i64 0, i32 3
  %40 = load i64, i64* %39, align 8
  %41 = sub i64 %40, %38
  %42 = icmp ult i64 %41, 16
  br i1 %42, label %43, label %45, !prof !3

43:                                               ; preds = %34
  %44 = tail call i64 @_ZN2v88internal4Zone9NewExpandEm(%"class.v8::internal::Zone"* %36, i64 16) #11
  br label %47

45:                                               ; preds = %34
  %46 = add i64 %38, 16
  store i64 %46, i64* %37, align 8
  br label %47

47:                                               ; preds = %43, %45
  %48 = phi i64 [ %44, %43 ], [ %38, %45 ]
  %49 = inttoptr i64 %48 to %"class.v8::internal::Literal"*
  %50 = getelementptr inbounds %"class.v8::internal::Literal", %"class.v8::internal::Literal"* %49, i64 0, i32 0, i32 0, i32 0
  store i32 %2, i32* %50, align 4
  %51 = getelementptr inbounds %"class.v8::internal::Literal", %"class.v8::internal::Literal"* %49, i64 0, i32 0, i32 0, i32 1
  %52 = getelementptr inbounds %"class.v8::internal::Literal", %"class.v8::internal::Literal"* %49, i64 0, i32 1
  %53 = bitcast %union.anon.1138* %52 to double*
  store double %1, double* %53, align 8
  store i32 169, i32* %51, align 4
  br label %54

54:                                               ; preds = %47, %27
  %55 = phi %"class.v8::internal::Literal"* [ %29, %27 ], [ %49, %47 ]
  ret %"class.v8::internal::Literal"* %55
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden i8* @_ZN2v88internal11CallRuntime10debug_nameEv(%"class.v8::internal::CallRuntime"* nocapture readonly) local_unnamed_addr #3 align 2 {
  %2 = getelementptr inbounds %"class.v8::internal::CallRuntime", %"class.v8::internal::CallRuntime"* %0, i64 0, i32 2
  %3 = load %"struct.v8::internal::Runtime::Function"*, %"struct.v8::internal::Runtime::Function"** %2, align 8
  %4 = icmp eq %"struct.v8::internal::Runtime::Function"* %3, null
  br i1 %4, label %8, label %5

5:                                                ; preds = %1
  %6 = getelementptr inbounds %"struct.v8::internal::Runtime::Function", %"struct.v8::internal::Runtime::Function"* %3, i64 0, i32 2
  %7 = load i8*, i8** %6, align 8
  br label %8

8:                                                ; preds = %1, %5
  %9 = phi i8* [ %7, %5 ], [ getelementptr inbounds ([19 x i8], [19 x i8]* @.str.2, i64 0, i64 0), %1 ]
  ret i8* %9
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

declare void @_ZN2v88internal12WriteBarrier11MarkingSlowEPNS0_4HeapENS0_10HeapObjectENS0_24CompressedHeapObjectSlotES4_(%"class.v8::internal::Heap"*, i64, i64, i64) local_unnamed_addr #2

declare void @_ZN2v88internal28Heap_GenerationalBarrierSlowENS0_10HeapObjectEmS1_(i64, i64, i64) local_unnamed_addr #2

declare void @_ZN2v88internal11HandleScope16DeleteExtensionsEPNS0_7IsolateE(%"class.v8::internal::Isolate"*) local_unnamed_addr #2

declare void @_ZN2v88internal11HandleScope8ZapRangeEPmS2_(i64*, i64*) local_unnamed_addr #2

declare void @_ZN2v88internal16LocalHandleScope19OpenMainThreadScopeEPNS0_9LocalHeapE(%"class.v8::internal::LocalHandleScope"*, %"class.v8::internal::LocalHeap"*) local_unnamed_addr #2

declare void @_ZN2v88internal16LocalHandleScope20CloseMainThreadScopeEPNS0_9LocalHeapEPmS4_(%"class.v8::internal::LocalHeap"*, i64*, i64*) local_unnamed_addr #2

declare void @_ZN2v88internal12LocalHandles18RemoveUnusedBlocksEv(%"class.v8::internal::LocalHandles"*) local_unnamed_addr #2

declare void @_ZN2v88internal12LocalHandles8ZapRangeEPmS2_(i64*, i64*) local_unnamed_addr #2

declare zeroext i16 @_ZNK2v88internal12AstRawString14FirstCharacterEv(%"class.v8::internal::AstRawString"*) local_unnamed_addr #2

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #10

declare i64 @_ZN2v88internal4Zone9NewExpandEm(%"class.v8::internal::Zone"*, i64) local_unnamed_addr #2

declare i64* @_ZN2v88internal20CanonicalHandleScope6LookupEm(%"class.v8::internal::CanonicalHandleScope"*, i64) local_unnamed_addr #2

declare i64* @_ZN2v88internal11HandleScope6ExtendEPNS0_7IsolateE(%"class.v8::internal::Isolate"*) local_unnamed_addr #2

declare i64* @_ZN2v88internal11FactoryBaseINS0_12LocalFactoryEE13NewHeapNumberILNS0_14AllocationTypeE1EEENS0_6HandleINS0_10HeapNumberEEEv(%"class.v8::internal::FactoryBase.1058"*) local_unnamed_addr #2

; Function Attrs: noreturn
declare void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"*) local_unnamed_addr #5

; Function Attrs: nobuiltin nofree
declare noalias nonnull i8* @_Znwm(i64) local_unnamed_addr #7

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden %"struct.v8::base::TemplateHashMapEntry"* @_ZN2v84base19TemplateHashMapImplIPvS2_NS0_26HashEqualityThenKeyMatcherIS2_PFbS2_S2_EEENS_8internal20ZoneAllocationPolicyEE14LookupOrInsertIS2_ZNS9_14LookupOrInsertIZNS9_14LookupOrInsertERKS2_jEUlvE_EEPNS0_20TemplateHashMapEntryIS2_S2_EESD_jRKT_EUlvE_SE_EESH_SK_jRKT0_RKT1_(%"class.v8::base::TemplateHashMapImpl.1184"*, i8** dereferenceable(8), i32, %class.anon.1217* dereferenceable(8), %class.anon* dereferenceable(1)) local_unnamed_addr #0 comdat align 2 {
  %6 = getelementptr inbounds %"class.v8::base::TemplateHashMapImpl.1184", %"class.v8::base::TemplateHashMapImpl.1184"* %0, i64 0, i32 0, i32 3
  %7 = load i32, i32* %6, align 8
  %8 = add i32 %7, -1
  %9 = and i32 %8, %2
  %10 = zext i32 %9 to i64
  %11 = getelementptr inbounds %"class.v8::base::TemplateHashMapImpl.1184", %"class.v8::base::TemplateHashMapImpl.1184"* %0, i64 0, i32 0, i32 2
  %12 = load %"struct.v8::base::TemplateHashMapEntry"*, %"struct.v8::base::TemplateHashMapEntry"** %11, align 8
  %13 = getelementptr inbounds %"struct.v8::base::TemplateHashMapEntry", %"struct.v8::base::TemplateHashMapEntry"* %12, i64 %10
  %14 = getelementptr inbounds %"struct.v8::base::TemplateHashMapEntry", %"struct.v8::base::TemplateHashMapEntry"* %13, i64 0, i32 0
  %15 = load i8*, i8** %14, align 8
  %16 = icmp eq i8* %15, null
  br i1 %16, label %47, label %17

17:                                               ; preds = %5
  %18 = getelementptr inbounds %"class.v8::base::TemplateHashMapImpl.1184", %"class.v8::base::TemplateHashMapImpl.1184"* %0, i64 0, i32 0, i32 0, i32 0
  br label %19

19:                                               ; preds = %33, %17
  %20 = phi i32 [ %7, %17 ], [ %34, %33 ]
  %21 = phi i8* [ %15, %17 ], [ %41, %33 ]
  %22 = phi %"struct.v8::base::TemplateHashMapEntry"* [ %13, %17 ], [ %39, %33 ]
  %23 = phi i64 [ %10, %17 ], [ %38, %33 ]
  %24 = getelementptr inbounds %"struct.v8::base::TemplateHashMapEntry", %"struct.v8::base::TemplateHashMapEntry"* %12, i64 %23, i32 2
  %25 = load i32, i32* %24, align 8
  %26 = icmp eq i32 %25, %2
  br i1 %26, label %27, label %33

27:                                               ; preds = %19
  %28 = load i1 (i8*, i8*)*, i1 (i8*, i8*)** %18, align 8
  %29 = load i8*, i8** %1, align 8
  %30 = tail call zeroext i1 %28(i8* %29, i8* nonnull %21) #11
  br i1 %30, label %43, label %31

31:                                               ; preds = %27
  %32 = load i32, i32* %6, align 8
  br label %33

33:                                               ; preds = %31, %19
  %34 = phi i32 [ %32, %31 ], [ %20, %19 ]
  %35 = add nuw nsw i64 %23, 1
  %36 = add i32 %34, -1
  %37 = zext i32 %36 to i64
  %38 = and i64 %35, %37
  %39 = getelementptr inbounds %"struct.v8::base::TemplateHashMapEntry", %"struct.v8::base::TemplateHashMapEntry"* %12, i64 %38
  %40 = getelementptr inbounds %"struct.v8::base::TemplateHashMapEntry", %"struct.v8::base::TemplateHashMapEntry"* %39, i64 0, i32 0
  %41 = load i8*, i8** %40, align 8
  %42 = icmp eq i8* %41, null
  br i1 %42, label %47, label %19

43:                                               ; preds = %27
  %44 = getelementptr inbounds %"struct.v8::base::TemplateHashMapEntry", %"struct.v8::base::TemplateHashMapEntry"* %22, i64 0, i32 0
  %45 = load i8*, i8** %44, align 8
  %46 = icmp eq i8* %45, null
  br i1 %46, label %47, label %99

47:                                               ; preds = %33, %5, %43
  %48 = phi %"struct.v8::base::TemplateHashMapEntry"* [ %22, %43 ], [ %13, %5 ], [ %39, %33 ]
  %49 = getelementptr inbounds %class.anon.1217, %class.anon.1217* %3, i64 0, i32 0
  %50 = load i8**, i8*** %49, align 8
  %51 = load i8*, i8** %50, align 8
  %52 = ptrtoint i8* %51 to i64
  %53 = bitcast %"struct.v8::base::TemplateHashMapEntry"* %48 to i64*
  store i64 %52, i64* %53, align 8
  %54 = getelementptr inbounds %"struct.v8::base::TemplateHashMapEntry", %"struct.v8::base::TemplateHashMapEntry"* %48, i64 0, i32 1
  %55 = bitcast i8** %54 to i64*
  store i64 0, i64* %55, align 8
  %56 = getelementptr inbounds %"struct.v8::base::TemplateHashMapEntry", %"struct.v8::base::TemplateHashMapEntry"* %48, i64 0, i32 2
  store i32 %2, i32* %56, align 8
  %57 = getelementptr inbounds %"class.v8::base::TemplateHashMapImpl.1184", %"class.v8::base::TemplateHashMapImpl.1184"* %0, i64 0, i32 0, i32 4
  %58 = load i32, i32* %57, align 4
  %59 = add i32 %58, 1
  store i32 %59, i32* %57, align 4
  %60 = lshr i32 %59, 2
  %61 = add i32 %60, %59
  %62 = load i32, i32* %6, align 8
  %63 = icmp ult i32 %61, %62
  br i1 %63, label %99, label %64

64:                                               ; preds = %47
  tail call void @_ZN2v84base19TemplateHashMapImplIPvS2_NS0_26HashEqualityThenKeyMatcherIS2_PFbS2_S2_EEENS_8internal20ZoneAllocationPolicyEE6ResizeEv(%"class.v8::base::TemplateHashMapImpl.1184"* %0) #11
  %65 = load i32, i32* %6, align 8
  %66 = add i32 %65, -1
  %67 = and i32 %66, %2
  %68 = zext i32 %67 to i64
  %69 = load %"struct.v8::base::TemplateHashMapEntry"*, %"struct.v8::base::TemplateHashMapEntry"** %11, align 8
  %70 = getelementptr inbounds %"struct.v8::base::TemplateHashMapEntry", %"struct.v8::base::TemplateHashMapEntry"* %69, i64 %68
  %71 = getelementptr inbounds %"struct.v8::base::TemplateHashMapEntry", %"struct.v8::base::TemplateHashMapEntry"* %70, i64 0, i32 0
  %72 = load i8*, i8** %71, align 8
  %73 = icmp eq i8* %72, null
  br i1 %73, label %99, label %74

74:                                               ; preds = %64
  %75 = getelementptr inbounds %"class.v8::base::TemplateHashMapImpl.1184", %"class.v8::base::TemplateHashMapImpl.1184"* %0, i64 0, i32 0, i32 0, i32 0
  br label %76

76:                                               ; preds = %89, %74
  %77 = phi i32 [ %65, %74 ], [ %90, %89 ]
  %78 = phi i8* [ %72, %74 ], [ %97, %89 ]
  %79 = phi %"struct.v8::base::TemplateHashMapEntry"* [ %70, %74 ], [ %95, %89 ]
  %80 = phi i64 [ %68, %74 ], [ %94, %89 ]
  %81 = getelementptr inbounds %"struct.v8::base::TemplateHashMapEntry", %"struct.v8::base::TemplateHashMapEntry"* %69, i64 %80, i32 2
  %82 = load i32, i32* %81, align 8
  %83 = icmp eq i32 %82, %2
  br i1 %83, label %84, label %89

84:                                               ; preds = %76
  %85 = load i1 (i8*, i8*)*, i1 (i8*, i8*)** %75, align 8
  %86 = tail call zeroext i1 %85(i8* %51, i8* nonnull %78) #11
  br i1 %86, label %99, label %87

87:                                               ; preds = %84
  %88 = load i32, i32* %6, align 8
  br label %89

89:                                               ; preds = %87, %76
  %90 = phi i32 [ %88, %87 ], [ %77, %76 ]
  %91 = add nuw nsw i64 %80, 1
  %92 = add i32 %90, -1
  %93 = zext i32 %92 to i64
  %94 = and i64 %91, %93
  %95 = getelementptr inbounds %"struct.v8::base::TemplateHashMapEntry", %"struct.v8::base::TemplateHashMapEntry"* %69, i64 %94
  %96 = getelementptr inbounds %"struct.v8::base::TemplateHashMapEntry", %"struct.v8::base::TemplateHashMapEntry"* %95, i64 0, i32 0
  %97 = load i8*, i8** %96, align 8
  %98 = icmp eq i8* %97, null
  br i1 %98, label %99, label %76

99:                                               ; preds = %89, %84, %43, %64, %47
  %100 = phi %"struct.v8::base::TemplateHashMapEntry"* [ %22, %43 ], [ %48, %47 ], [ %70, %64 ], [ %95, %89 ], [ %79, %84 ]
  ret %"struct.v8::base::TemplateHashMapEntry"* %100
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN2v84base19TemplateHashMapImplIPvS2_NS0_26HashEqualityThenKeyMatcherIS2_PFbS2_S2_EEENS_8internal20ZoneAllocationPolicyEE6ResizeEv(%"class.v8::base::TemplateHashMapImpl.1184"*) local_unnamed_addr #0 comdat align 2 {
  %2 = getelementptr inbounds %"class.v8::base::TemplateHashMapImpl.1184", %"class.v8::base::TemplateHashMapImpl.1184"* %0, i64 0, i32 0, i32 2
  %3 = load %"struct.v8::base::TemplateHashMapEntry"*, %"struct.v8::base::TemplateHashMapEntry"** %2, align 8
  %4 = getelementptr inbounds %"class.v8::base::TemplateHashMapImpl.1184", %"class.v8::base::TemplateHashMapImpl.1184"* %0, i64 0, i32 0, i32 3
  %5 = load i32, i32* %4, align 8
  %6 = getelementptr inbounds %"class.v8::base::TemplateHashMapImpl.1184", %"class.v8::base::TemplateHashMapImpl.1184"* %0, i64 0, i32 0, i32 4
  %7 = load i32, i32* %6, align 4
  %8 = shl i32 %5, 1
  %9 = zext i32 %8 to i64
  %10 = getelementptr inbounds %"class.v8::base::TemplateHashMapImpl.1184", %"class.v8::base::TemplateHashMapImpl.1184"* %0, i64 0, i32 0, i32 1, i32 0
  %11 = load %"class.v8::internal::Zone"*, %"class.v8::internal::Zone"** %10, align 8
  %12 = mul nuw nsw i64 %9, 24
  %13 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %11, i64 0, i32 2
  %14 = load i64, i64* %13, align 8
  %15 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %11, i64 0, i32 3
  %16 = load i64, i64* %15, align 8
  %17 = sub i64 %16, %14
  %18 = icmp ugt i64 %12, %17
  br i1 %18, label %19, label %21, !prof !3

19:                                               ; preds = %1
  %20 = tail call i64 @_ZN2v88internal4Zone9NewExpandEm(%"class.v8::internal::Zone"* %11, i64 %12) #11
  br label %23

21:                                               ; preds = %1
  %22 = add i64 %14, %12
  store i64 %22, i64* %13, align 8
  br label %23

23:                                               ; preds = %21, %19
  %24 = phi i64 [ %20, %19 ], [ %14, %21 ]
  %25 = inttoptr i64 %24 to %"struct.v8::base::TemplateHashMapEntry"*
  store %"struct.v8::base::TemplateHashMapEntry"* %25, %"struct.v8::base::TemplateHashMapEntry"** %2, align 8
  %26 = icmp eq i64 %24, 0
  br i1 %26, label %27, label %28

27:                                               ; preds = %23
  tail call void (i8*, ...) @_Z8V8_FatalPKcz(i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.4, i64 0, i64 0)) #12
  unreachable

28:                                               ; preds = %23
  store i32 %8, i32* %4, align 8
  %29 = icmp eq i32 %8, 0
  br i1 %29, label %42, label %30

30:                                               ; preds = %28
  %31 = getelementptr inbounds %"struct.v8::base::TemplateHashMapEntry", %"struct.v8::base::TemplateHashMapEntry"* %25, i64 0, i32 0
  store i8* null, i8** %31, align 8
  %32 = load i32, i32* %4, align 8
  %33 = icmp ugt i32 %32, 1
  br i1 %33, label %34, label %42

34:                                               ; preds = %30, %34
  %35 = phi i64 [ %38, %34 ], [ 1, %30 ]
  %36 = load %"struct.v8::base::TemplateHashMapEntry"*, %"struct.v8::base::TemplateHashMapEntry"** %2, align 8
  %37 = getelementptr inbounds %"struct.v8::base::TemplateHashMapEntry", %"struct.v8::base::TemplateHashMapEntry"* %36, i64 %35, i32 0
  store i8* null, i8** %37, align 8
  %38 = add nuw nsw i64 %35, 1
  %39 = load i32, i32* %4, align 8
  %40 = zext i32 %39 to i64
  %41 = icmp ult i64 %38, %40
  br i1 %41, label %34, label %42

42:                                               ; preds = %34, %30, %28
  store i32 0, i32* %6, align 4
  %43 = icmp eq i32 %7, 0
  br i1 %43, label %46, label %44

44:                                               ; preds = %42
  %45 = getelementptr inbounds %"class.v8::base::TemplateHashMapImpl.1184", %"class.v8::base::TemplateHashMapImpl.1184"* %0, i64 0, i32 0, i32 0, i32 0
  br label %47

46:                                               ; preds = %145, %42
  ret void

47:                                               ; preds = %44, %145
  %48 = phi i32 [ %7, %44 ], [ %146, %145 ]
  %49 = phi %"struct.v8::base::TemplateHashMapEntry"* [ %3, %44 ], [ %147, %145 ]
  %50 = getelementptr inbounds %"struct.v8::base::TemplateHashMapEntry", %"struct.v8::base::TemplateHashMapEntry"* %49, i64 0, i32 0
  %51 = load i8*, i8** %50, align 8
  %52 = icmp eq i8* %51, null
  br i1 %52, label %145, label %53

53:                                               ; preds = %47
  %54 = ptrtoint i8* %51 to i64
  %55 = getelementptr inbounds %"struct.v8::base::TemplateHashMapEntry", %"struct.v8::base::TemplateHashMapEntry"* %49, i64 0, i32 2
  %56 = load i32, i32* %55, align 8
  %57 = load i32, i32* %4, align 8
  %58 = add i32 %57, -1
  %59 = and i32 %58, %56
  %60 = zext i32 %59 to i64
  %61 = load %"struct.v8::base::TemplateHashMapEntry"*, %"struct.v8::base::TemplateHashMapEntry"** %2, align 8
  %62 = getelementptr inbounds %"struct.v8::base::TemplateHashMapEntry", %"struct.v8::base::TemplateHashMapEntry"* %61, i64 %60
  %63 = getelementptr inbounds %"struct.v8::base::TemplateHashMapEntry", %"struct.v8::base::TemplateHashMapEntry"* %62, i64 0, i32 0
  %64 = load i8*, i8** %63, align 8
  %65 = icmp eq i8* %64, null
  br i1 %65, label %95, label %66

66:                                               ; preds = %53, %80
  %67 = phi i32 [ %81, %80 ], [ %57, %53 ]
  %68 = phi i8* [ %88, %80 ], [ %64, %53 ]
  %69 = phi %"struct.v8::base::TemplateHashMapEntry"* [ %86, %80 ], [ %62, %53 ]
  %70 = phi i64 [ %85, %80 ], [ %60, %53 ]
  %71 = getelementptr inbounds %"struct.v8::base::TemplateHashMapEntry", %"struct.v8::base::TemplateHashMapEntry"* %61, i64 %70, i32 2
  %72 = load i32, i32* %71, align 8
  %73 = icmp eq i32 %72, %56
  br i1 %73, label %74, label %80

74:                                               ; preds = %66
  %75 = load i1 (i8*, i8*)*, i1 (i8*, i8*)** %45, align 8
  %76 = load i8*, i8** %50, align 8
  %77 = tail call zeroext i1 %75(i8* %76, i8* nonnull %68) #11
  br i1 %77, label %90, label %78

78:                                               ; preds = %74
  %79 = load i32, i32* %4, align 8
  br label %80

80:                                               ; preds = %78, %66
  %81 = phi i32 [ %79, %78 ], [ %67, %66 ]
  %82 = add nuw nsw i64 %70, 1
  %83 = add i32 %81, -1
  %84 = zext i32 %83 to i64
  %85 = and i64 %82, %84
  %86 = getelementptr inbounds %"struct.v8::base::TemplateHashMapEntry", %"struct.v8::base::TemplateHashMapEntry"* %61, i64 %85
  %87 = getelementptr inbounds %"struct.v8::base::TemplateHashMapEntry", %"struct.v8::base::TemplateHashMapEntry"* %86, i64 0, i32 0
  %88 = load i8*, i8** %87, align 8
  %89 = icmp eq i8* %88, null
  br i1 %89, label %90, label %66

90:                                               ; preds = %80, %74
  %91 = phi %"struct.v8::base::TemplateHashMapEntry"* [ %86, %80 ], [ %69, %74 ]
  %92 = load i32, i32* %55, align 8
  %93 = bitcast %"struct.v8::base::TemplateHashMapEntry"* %49 to i64*
  %94 = load i64, i64* %93, align 8
  br label %95

95:                                               ; preds = %53, %90
  %96 = phi i64 [ %94, %90 ], [ %54, %53 ]
  %97 = phi i32 [ %92, %90 ], [ %56, %53 ]
  %98 = phi %"struct.v8::base::TemplateHashMapEntry"* [ %91, %90 ], [ %62, %53 ]
  %99 = getelementptr inbounds %"struct.v8::base::TemplateHashMapEntry", %"struct.v8::base::TemplateHashMapEntry"* %49, i64 0, i32 1
  %100 = bitcast i8** %99 to i64*
  %101 = load i64, i64* %100, align 8
  %102 = bitcast %"struct.v8::base::TemplateHashMapEntry"* %98 to i64*
  store i64 %96, i64* %102, align 8
  %103 = getelementptr inbounds %"struct.v8::base::TemplateHashMapEntry", %"struct.v8::base::TemplateHashMapEntry"* %98, i64 0, i32 1
  %104 = bitcast i8** %103 to i64*
  store i64 %101, i64* %104, align 8
  %105 = getelementptr inbounds %"struct.v8::base::TemplateHashMapEntry", %"struct.v8::base::TemplateHashMapEntry"* %98, i64 0, i32 2
  store i32 %97, i32* %105, align 8
  %106 = load i32, i32* %6, align 4
  %107 = add i32 %106, 1
  store i32 %107, i32* %6, align 4
  %108 = lshr i32 %107, 2
  %109 = add i32 %108, %107
  %110 = load i32, i32* %4, align 8
  %111 = icmp ult i32 %109, %110
  br i1 %111, label %143, label %112

112:                                              ; preds = %95
  tail call void @_ZN2v84base19TemplateHashMapImplIPvS2_NS0_26HashEqualityThenKeyMatcherIS2_PFbS2_S2_EEENS_8internal20ZoneAllocationPolicyEE6ResizeEv(%"class.v8::base::TemplateHashMapImpl.1184"* %0) #11
  %113 = load i32, i32* %4, align 8
  %114 = add i32 %113, -1
  %115 = and i32 %114, %97
  %116 = zext i32 %115 to i64
  %117 = load %"struct.v8::base::TemplateHashMapEntry"*, %"struct.v8::base::TemplateHashMapEntry"** %2, align 8
  %118 = getelementptr inbounds %"struct.v8::base::TemplateHashMapEntry", %"struct.v8::base::TemplateHashMapEntry"* %117, i64 %116, i32 0
  %119 = load i8*, i8** %118, align 8
  %120 = icmp eq i8* %119, null
  br i1 %120, label %143, label %121

121:                                              ; preds = %112, %134
  %122 = phi i32 [ %135, %134 ], [ %113, %112 ]
  %123 = phi i8* [ %141, %134 ], [ %119, %112 ]
  %124 = phi i64 [ %139, %134 ], [ %116, %112 ]
  %125 = getelementptr inbounds %"struct.v8::base::TemplateHashMapEntry", %"struct.v8::base::TemplateHashMapEntry"* %117, i64 %124, i32 2
  %126 = load i32, i32* %125, align 8
  %127 = icmp eq i32 %126, %97
  br i1 %127, label %128, label %134

128:                                              ; preds = %121
  %129 = load i1 (i8*, i8*)*, i1 (i8*, i8*)** %45, align 8
  %130 = load i8*, i8** %50, align 8
  %131 = tail call zeroext i1 %129(i8* %130, i8* nonnull %123) #11
  br i1 %131, label %143, label %132

132:                                              ; preds = %128
  %133 = load i32, i32* %4, align 8
  br label %134

134:                                              ; preds = %132, %121
  %135 = phi i32 [ %133, %132 ], [ %122, %121 ]
  %136 = add nuw nsw i64 %124, 1
  %137 = add i32 %135, -1
  %138 = zext i32 %137 to i64
  %139 = and i64 %136, %138
  %140 = getelementptr inbounds %"struct.v8::base::TemplateHashMapEntry", %"struct.v8::base::TemplateHashMapEntry"* %117, i64 %139, i32 0
  %141 = load i8*, i8** %140, align 8
  %142 = icmp eq i8* %141, null
  br i1 %142, label %143, label %121

143:                                              ; preds = %128, %134, %112, %95
  %144 = add i32 %48, -1
  br label %145

145:                                              ; preds = %47, %143
  %146 = phi i32 [ %144, %143 ], [ %48, %47 ]
  %147 = getelementptr inbounds %"struct.v8::base::TemplateHashMapEntry", %"struct.v8::base::TemplateHashMapEntry"* %49, i64 1
  %148 = icmp eq i32 %146, 0
  br i1 %148, label %46, label %47
}

declare i64* @_ZN2v88internal11FactoryBaseINS0_7FactoryEE13NewHeapNumberILNS0_14AllocationTypeE1EEENS0_6HandleINS0_10HeapNumberEEEv(%"class.v8::internal::FactoryBase"*) local_unnamed_addr #2

declare i64* @_ZN2v88internal16LocalHandleScope19GetMainThreadHandleEPNS0_9LocalHeapEm(%"class.v8::internal::LocalHeap"*, i64) local_unnamed_addr #2

declare i64* @_ZN2v88internal12LocalHandles8AddBlockEv(%"class.v8::internal::LocalHandles"*) local_unnamed_addr #2

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { norecurse nounwind readonly ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { inlinehint nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nofree norecurse nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { nobuiltin nofree "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { nofree norecurse nounwind ssp uwtable writeonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #9 = { argmemonly nofree nounwind readonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #10 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #11 = { nounwind }
attributes #12 = { noreturn nounwind }
attributes #13 = { nounwind readonly }
attributes #14 = { builtin nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{i8 0, i8 2}
!3 = !{!"branch_weights", i32 1, i32 2000}
