; ModuleID = '../../base/task/thread_pool/task_tracker_posix.cc'
source_filename = "../../base/task/thread_pool/task_tracker_posix.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.base::internal::TaskTrackerPosix" = type { %"class.base::internal::TaskTracker", %class.scoped_refptr.40 }
%"class.base::internal::TaskTracker" = type { i32 (...)**, %"class.base::TaskAnnotator", %"class.std::__1::basic_string", i8, %"class.std::__1::unique_ptr", %"struct.std::__1::atomic", %"struct.std::__1::atomic.5", %"class.base::internal::CheckedLock", %"class.std::__1::unique_ptr.9", %"class.base::OnceCallback", %"class.base::internal::CheckedLock", %"class.std::__1::unique_ptr.19", %"class.base::internal::TrackedRefFactory" }
%"class.base::TaskAnnotator" = type { i8 }
%"class.std::__1::basic_string" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" = type { %union.anon }
%union.anon = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" = type { i8*, i64, i64 }
%"class.std::__1::unique_ptr" = type { %"class.std::__1::__compressed_pair.1" }
%"class.std::__1::__compressed_pair.1" = type { %"struct.std::__1::__compressed_pair_elem.2" }
%"struct.std::__1::__compressed_pair_elem.2" = type { %"class.base::internal::TaskTracker::State"* }
%"class.base::internal::TaskTracker::State" = type opaque
%"struct.std::__1::atomic" = type { %"struct.std::__1::__atomic_base" }
%"struct.std::__1::__atomic_base" = type { %"struct.std::__1::__atomic_base.4" }
%"struct.std::__1::__atomic_base.4" = type { %"struct.std::__1::__cxx_atomic_impl" }
%"struct.std::__1::__cxx_atomic_impl" = type { %"struct.std::__1::__cxx_atomic_base_impl" }
%"struct.std::__1::__cxx_atomic_base_impl" = type { i32 }
%"struct.std::__1::atomic.5" = type { %"struct.std::__1::__atomic_base.6" }
%"struct.std::__1::__atomic_base.6" = type { %"struct.std::__1::__cxx_atomic_impl.7" }
%"struct.std::__1::__cxx_atomic_impl.7" = type { %"struct.std::__1::__cxx_atomic_base_impl.8" }
%"struct.std::__1::__cxx_atomic_base_impl.8" = type { i32 }
%"class.std::__1::unique_ptr.9" = type { %"class.std::__1::__compressed_pair.10" }
%"class.std::__1::__compressed_pair.10" = type { %"struct.std::__1::__compressed_pair_elem.11" }
%"struct.std::__1::__compressed_pair_elem.11" = type { %"class.base::ConditionVariable"* }
%"class.base::ConditionVariable" = type <{ %union.pthread_cond_t, %union.pthread_mutex_t*, i8, [7 x i8] }>
%union.pthread_cond_t = type { %struct.__pthread_cond_s }
%struct.__pthread_cond_s = type { %union.anon.12, %union.anon.14, [2 x i32], [2 x i32], i32, i32, [2 x i32] }
%union.anon.12 = type { i64 }
%union.anon.14 = type { i64 }
%union.pthread_mutex_t = type { %struct.__pthread_mutex_s }
%struct.__pthread_mutex_s = type { i32, i32, i32, i32, i32, i16, i16, %struct.__pthread_internal_list }
%struct.__pthread_internal_list = type { %struct.__pthread_internal_list*, %struct.__pthread_internal_list* }
%"class.base::OnceCallback" = type { %"class.base::internal::CallbackBase" }
%"class.base::internal::CallbackBase" = type { %class.scoped_refptr }
%class.scoped_refptr = type { %"class.base::internal::BindStateBase"* }
%"class.base::internal::BindStateBase" = type { %"class.base::RefCountedThreadSafe", void ()*, void (%"class.base::internal::BindStateBase"*)*, i1 (%"class.base::internal::BindStateBase"*, i32)* }
%"class.base::RefCountedThreadSafe" = type { %"class.base::subtle::RefCountedThreadSafeBase" }
%"class.base::subtle::RefCountedThreadSafeBase" = type { %"class.base::AtomicRefCount" }
%"class.base::AtomicRefCount" = type { %"struct.std::__1::atomic" }
%"class.base::internal::CheckedLock" = type { %"class.base::Lock" }
%"class.base::Lock" = type { %"class.base::internal::LockImpl" }
%"class.base::internal::LockImpl" = type { %union.pthread_mutex_t }
%"class.std::__1::unique_ptr.19" = type { %"class.std::__1::__compressed_pair.20" }
%"class.std::__1::__compressed_pair.20" = type { %"struct.std::__1::__compressed_pair_elem.21" }
%"struct.std::__1::__compressed_pair_elem.21" = type { %"class.base::WaitableEvent"* }
%"class.base::WaitableEvent" = type <{ %class.scoped_refptr.22, i8, [7 x i8] }>
%class.scoped_refptr.22 = type { %"struct.base::WaitableEvent::WaitableEventKernel"* }
%"struct.base::WaitableEvent::WaitableEventKernel" = type { %"class.base::RefCountedThreadSafe.23", %"class.base::Lock", i8, i8, %"class.std::__1::list" }
%"class.base::RefCountedThreadSafe.23" = type { %"class.base::subtle::RefCountedThreadSafeBase" }
%"class.std::__1::list" = type { %"class.std::__1::__list_imp" }
%"class.std::__1::__list_imp" = type { %"struct.std::__1::__list_node_base", %"class.std::__1::__compressed_pair.24" }
%"struct.std::__1::__list_node_base" = type { %"struct.std::__1::__list_node_base"*, %"struct.std::__1::__list_node_base"* }
%"class.std::__1::__compressed_pair.24" = type { %"struct.std::__1::__compressed_pair_elem.25" }
%"struct.std::__1::__compressed_pair_elem.25" = type { i64 }
%"class.base::internal::TrackedRefFactory" = type { %"class.base::internal::TaskTracker"*, %"class.base::AtomicRefCount", [4 x i8], %"class.absl::optional", %"class.absl::optional.33" }
%"class.absl::optional" = type { %"class.absl::optional_internal::optional_data" }
%"class.absl::optional_internal::optional_data" = type { %"class.absl::optional_internal::optional_data_base" }
%"class.absl::optional_internal::optional_data_base" = type { %"class.absl::optional_internal::optional_data_dtor_base" }
%"class.absl::optional_internal::optional_data_dtor_base" = type { i8, [7 x i8], %union.anon.32 }
%union.anon.32 = type { %"class.base::WaitableEvent" }
%"class.absl::optional.33" = type { %"class.absl::optional_internal::optional_data.34" }
%"class.absl::optional_internal::optional_data.34" = type { %"class.absl::optional_internal::optional_data_base.35" }
%"class.absl::optional_internal::optional_data_base.35" = type { %"class.absl::optional_internal::optional_data_dtor_base.36" }
%"class.absl::optional_internal::optional_data_dtor_base.36" = type { i8, %union.anon.37 }
%union.anon.37 = type { %"class.base::internal::TrackedRef" }
%"class.base::internal::TrackedRef" = type { %"class.base::internal::TaskTracker"*, %"class.base::internal::TrackedRefFactory"* }
%class.scoped_refptr.40 = type { %"class.base::SingleThreadTaskRunner"* }
%"class.base::SingleThreadTaskRunner" = type { %"class.base::SequencedTaskRunner.base", [4 x i8] }
%"class.base::SequencedTaskRunner.base" = type { %"class.base::TaskRunner.base" }
%"class.base::TaskRunner.base" = type <{ i32 (...)**, %"class.base::RefCountedThreadSafe.41" }>
%"class.base::RefCountedThreadSafe.41" = type { %"class.base::subtle::RefCountedThreadSafeBase" }
%"class.base::TaskRunner" = type <{ i32 (...)**, %"class.base::RefCountedThreadSafe.41", [4 x i8] }>
%"struct.base::internal::Task" = type { %"struct.base::PendingTask.base", [3 x i8] }
%"struct.base::PendingTask.base" = type <{ %"class.base::OnceCallback", %"class.base::Location", %"class.base::TimeTicks", %"class.base::TimeTicks", %"struct.std::__1::array.47", i32, [4 x i8], i8*, i32, i8 }>
%"class.base::Location" = type { i8*, i8*, i32, i8* }
%"class.base::TimeTicks" = type { %"class.base::time_internal::TimeBase" }
%"class.base::time_internal::TimeBase" = type { i64 }
%"struct.std::__1::array.47" = type { [4 x i8*] }
%"class.base::internal::TaskSource" = type <{ i32 (...)**, %"class.base::RefCountedThreadSafe.42", %"class.base::TaskTraits", %"struct.std::__1::atomic.43", [4 x i8], %"class.base::internal::CheckedLock", %"class.base::HeapHandle", %"class.base::TaskRunner"*, i32, [4 x i8] }>
%"class.base::RefCountedThreadSafe.42" = type { %"class.base::subtle::RefCountedThreadSafeBase" }
%"class.base::TaskTraits" = type { %"struct.base::TaskTraitsExtensionStorage", i8, i8, i8, i8, i8, i8 }
%"struct.base::TaskTraitsExtensionStorage" = type { i8, %"struct.std::__1::array" }
%"struct.std::__1::array" = type { [8 x i8] }
%"struct.std::__1::atomic.43" = type { %"struct.std::__1::__atomic_base.44" }
%"struct.std::__1::__atomic_base.44" = type { %"struct.std::__1::__cxx_atomic_impl.45" }
%"struct.std::__1::__cxx_atomic_impl.45" = type { %"struct.std::__1::__cxx_atomic_base_impl.46" }
%"struct.std::__1::__cxx_atomic_base_impl.46" = type { i8 }
%"class.base::HeapHandle" = type { i64 }
%"class.base::FileDescriptorWatcher" = type { %class.scoped_refptr.40 }
%"struct.base::PendingTask" = type <{ %"class.base::OnceCallback", %"class.base::Location", %"class.base::TimeTicks", %"class.base::TimeTicks", %"struct.std::__1::array.47", i32, [4 x i8], i8*, i32, i8, [3 x i8] }>

@_ZTVN4base8internal16TaskTrackerPosixE = hidden unnamed_addr constant { [6 x i8*] } { [6 x i8*] [i8* null, i8* null, i8* bitcast (void (%"class.base::internal::TaskTrackerPosix"*)* @_ZN4base8internal16TaskTrackerPosixD2Ev to i8*), i8* bitcast (void (%"class.base::internal::TaskTrackerPosix"*)* @_ZN4base8internal16TaskTrackerPosixD0Ev to i8*), i8* bitcast (void (%"class.base::internal::TaskTrackerPosix"*, %"struct.base::internal::Task"*, %"class.base::internal::TaskSource"*, %"class.base::TaskTraits"*)* @_ZN4base8internal16TaskTrackerPosix7RunTaskENS0_4TaskEPNS0_10TaskSourceERKNS_10TaskTraitsE to i8*), i8* bitcast (void (%"class.base::internal::TaskTracker"*, %"class.base::WaitableEvent"*)* @_ZN4base8internal11TaskTracker21BeginCompleteShutdownERNS_13WaitableEventE to i8*)] }, align 8

@_ZN4base8internal16TaskTrackerPosixC1Ev = hidden unnamed_addr alias void (%"class.base::internal::TaskTrackerPosix"*), void (%"class.base::internal::TaskTrackerPosix"*)* @_ZN4base8internal16TaskTrackerPosixC2Ev
@_ZN4base8internal16TaskTrackerPosixD1Ev = hidden unnamed_addr alias void (%"class.base::internal::TaskTrackerPosix"*), void (%"class.base::internal::TaskTrackerPosix"*)* @_ZN4base8internal16TaskTrackerPosixD2Ev

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN4base8internal16TaskTrackerPosixC2Ev(%"class.base::internal::TaskTrackerPosix"*) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.base::internal::TaskTrackerPosix", %"class.base::internal::TaskTrackerPosix"* %0, i64 0, i32 0
  tail call void @_ZN4base8internal11TaskTrackerC2Ev(%"class.base::internal::TaskTracker"* %2) #5
  %3 = getelementptr inbounds %"class.base::internal::TaskTrackerPosix", %"class.base::internal::TaskTrackerPosix"* %0, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [6 x i8*] }, { [6 x i8*] }* @_ZTVN4base8internal16TaskTrackerPosixE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %3, align 8
  %4 = getelementptr inbounds %"class.base::internal::TaskTrackerPosix", %"class.base::internal::TaskTrackerPosix"* %0, i64 0, i32 1, i32 0
  store %"class.base::SingleThreadTaskRunner"* null, %"class.base::SingleThreadTaskRunner"** %4, align 8
  ret void
}

declare void @_ZN4base8internal11TaskTrackerC2Ev(%"class.base::internal::TaskTracker"*) unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN4base8internal16TaskTrackerPosixD2Ev(%"class.base::internal::TaskTrackerPosix"*) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.base::internal::TaskTrackerPosix", %"class.base::internal::TaskTrackerPosix"* %0, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [6 x i8*] }, { [6 x i8*] }* @_ZTVN4base8internal16TaskTrackerPosixE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8
  %3 = getelementptr inbounds %"class.base::internal::TaskTrackerPosix", %"class.base::internal::TaskTrackerPosix"* %0, i64 0, i32 1, i32 0
  %4 = load %"class.base::SingleThreadTaskRunner"*, %"class.base::SingleThreadTaskRunner"** %3, align 8
  %5 = icmp eq %"class.base::SingleThreadTaskRunner"* %4, null
  br i1 %5, label %14, label %6

6:                                                ; preds = %1
  %7 = getelementptr inbounds %"class.base::SingleThreadTaskRunner", %"class.base::SingleThreadTaskRunner"* %4, i64 0, i32 0, i32 0, i32 1
  %8 = getelementptr inbounds %"class.base::RefCountedThreadSafe.41", %"class.base::RefCountedThreadSafe.41"* %7, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %9 = atomicrmw sub i32* %8, i32 1 acq_rel
  %10 = icmp eq i32 %9, 1
  br i1 %10, label %11, label %14

11:                                               ; preds = %6
  %12 = getelementptr inbounds %"class.base::RefCountedThreadSafe.41", %"class.base::RefCountedThreadSafe.41"* %7, i64 -2
  %13 = bitcast %"class.base::RefCountedThreadSafe.41"* %12 to %"class.base::TaskRunner"*
  tail call void @_ZN4base16TaskRunnerTraits8DestructEPKNS_10TaskRunnerE(%"class.base::TaskRunner"* %13) #5
  br label %14

14:                                               ; preds = %1, %6, %11
  %15 = getelementptr inbounds %"class.base::internal::TaskTrackerPosix", %"class.base::internal::TaskTrackerPosix"* %0, i64 0, i32 0
  tail call void @_ZN4base8internal11TaskTrackerD2Ev(%"class.base::internal::TaskTracker"* %15) #5
  ret void
}

; Function Attrs: nounwind
declare void @_ZN4base8internal11TaskTrackerD2Ev(%"class.base::internal::TaskTracker"*) unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN4base8internal16TaskTrackerPosixD0Ev(%"class.base::internal::TaskTrackerPosix"*) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.base::internal::TaskTrackerPosix", %"class.base::internal::TaskTrackerPosix"* %0, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [6 x i8*] }, { [6 x i8*] }* @_ZTVN4base8internal16TaskTrackerPosixE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8
  %3 = getelementptr inbounds %"class.base::internal::TaskTrackerPosix", %"class.base::internal::TaskTrackerPosix"* %0, i64 0, i32 1, i32 0
  %4 = load %"class.base::SingleThreadTaskRunner"*, %"class.base::SingleThreadTaskRunner"** %3, align 8
  %5 = icmp eq %"class.base::SingleThreadTaskRunner"* %4, null
  br i1 %5, label %14, label %6

6:                                                ; preds = %1
  %7 = getelementptr inbounds %"class.base::SingleThreadTaskRunner", %"class.base::SingleThreadTaskRunner"* %4, i64 0, i32 0, i32 0, i32 1
  %8 = getelementptr inbounds %"class.base::RefCountedThreadSafe.41", %"class.base::RefCountedThreadSafe.41"* %7, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %9 = atomicrmw sub i32* %8, i32 1 acq_rel
  %10 = icmp eq i32 %9, 1
  br i1 %10, label %11, label %14

11:                                               ; preds = %6
  %12 = getelementptr inbounds %"class.base::RefCountedThreadSafe.41", %"class.base::RefCountedThreadSafe.41"* %7, i64 -2
  %13 = bitcast %"class.base::RefCountedThreadSafe.41"* %12 to %"class.base::TaskRunner"*
  tail call void @_ZN4base16TaskRunnerTraits8DestructEPKNS_10TaskRunnerE(%"class.base::TaskRunner"* %13) #5
  br label %14

14:                                               ; preds = %1, %6, %11
  %15 = getelementptr inbounds %"class.base::internal::TaskTrackerPosix", %"class.base::internal::TaskTrackerPosix"* %0, i64 0, i32 0
  tail call void @_ZN4base8internal11TaskTrackerD2Ev(%"class.base::internal::TaskTracker"* %15) #5
  %16 = bitcast %"class.base::internal::TaskTrackerPosix"* %0 to i8*
  tail call void @_ZdlPv(i8* %16) #6
  ret void
}

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN4base8internal16TaskTrackerPosix7RunTaskENS0_4TaskEPNS0_10TaskSourceERKNS_10TaskTraitsE(%"class.base::internal::TaskTrackerPosix"*, %"struct.base::internal::Task"*, %"class.base::internal::TaskSource"*, %"class.base::TaskTraits"* dereferenceable(15)) unnamed_addr #0 align 2 {
  %5 = alloca %"class.base::FileDescriptorWatcher", align 8
  %6 = alloca %"struct.base::internal::Task", align 8
  %7 = bitcast %"class.base::FileDescriptorWatcher"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %7) #5
  %8 = getelementptr inbounds %"class.base::FileDescriptorWatcher", %"class.base::FileDescriptorWatcher"* %5, i64 0, i32 0, i32 0
  store %"class.base::SingleThreadTaskRunner"* inttoptr (i64 -6148914691236517206 to %"class.base::SingleThreadTaskRunner"*), %"class.base::SingleThreadTaskRunner"** %8, align 8
  %9 = getelementptr inbounds %"class.base::internal::TaskTrackerPosix", %"class.base::internal::TaskTrackerPosix"* %0, i64 0, i32 1, i32 0
  %10 = load %"class.base::SingleThreadTaskRunner"*, %"class.base::SingleThreadTaskRunner"** %9, align 8
  %11 = icmp eq %"class.base::SingleThreadTaskRunner"* %10, null
  br i1 %11, label %15, label %12

12:                                               ; preds = %4
  %13 = getelementptr inbounds %"class.base::SingleThreadTaskRunner", %"class.base::SingleThreadTaskRunner"* %10, i64 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %14 = atomicrmw add i32* %13, i32 1 monotonic
  br label %15

15:                                               ; preds = %4, %12
  call void @_ZN4base21FileDescriptorWatcherC1E13scoped_refptrINS_22SingleThreadTaskRunnerEE(%"class.base::FileDescriptorWatcher"* nonnull %5, %"class.base::SingleThreadTaskRunner"* %10) #5
  %16 = getelementptr inbounds %"class.base::internal::TaskTrackerPosix", %"class.base::internal::TaskTrackerPosix"* %0, i64 0, i32 0
  call void @_ZN4base8internal4TaskC1EOS1_(%"struct.base::internal::Task"* nonnull %6, %"struct.base::internal::Task"* dereferenceable(112) %1) #5
  call void @_ZN4base8internal11TaskTracker7RunTaskENS0_4TaskEPNS0_10TaskSourceERKNS_10TaskTraitsE(%"class.base::internal::TaskTracker"* %16, %"struct.base::internal::Task"* nonnull %6, %"class.base::internal::TaskSource"* %2, %"class.base::TaskTraits"* dereferenceable(15) %3) #5
  %17 = bitcast %"struct.base::internal::Task"* %6 to %"struct.base::PendingTask"*
  call void @_ZN4base11PendingTaskD2Ev(%"struct.base::PendingTask"* nonnull %17) #5
  call void @_ZN4base21FileDescriptorWatcherD1Ev(%"class.base::FileDescriptorWatcher"* nonnull %5) #5
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %7) #5
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #4

declare void @_ZN4base21FileDescriptorWatcherC1E13scoped_refptrINS_22SingleThreadTaskRunnerEE(%"class.base::FileDescriptorWatcher"*, %"class.base::SingleThreadTaskRunner"*) unnamed_addr #1

declare void @_ZN4base8internal11TaskTracker7RunTaskENS0_4TaskEPNS0_10TaskSourceERKNS_10TaskTraitsE(%"class.base::internal::TaskTracker"*, %"struct.base::internal::Task"*, %"class.base::internal::TaskSource"*, %"class.base::TaskTraits"* dereferenceable(15)) unnamed_addr #1

; Function Attrs: nounwind
declare void @_ZN4base8internal4TaskC1EOS1_(%"struct.base::internal::Task"*, %"struct.base::internal::Task"* dereferenceable(112)) unnamed_addr #2

; Function Attrs: nounwind
declare void @_ZN4base11PendingTaskD2Ev(%"struct.base::PendingTask"*) unnamed_addr #2

; Function Attrs: nounwind
declare void @_ZN4base21FileDescriptorWatcherD1Ev(%"class.base::FileDescriptorWatcher"*) unnamed_addr #2

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #4

declare void @_ZN4base8internal11TaskTracker21BeginCompleteShutdownERNS_13WaitableEventE(%"class.base::internal::TaskTracker"*, %"class.base::WaitableEvent"* dereferenceable(16)) unnamed_addr #1

declare void @_ZN4base16TaskRunnerTraits8DestructEPKNS_10TaskRunnerE(%"class.base::TaskRunner"*) local_unnamed_addr #1

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { argmemonly nounwind }
attributes #5 = { nounwind }
attributes #6 = { builtin nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
