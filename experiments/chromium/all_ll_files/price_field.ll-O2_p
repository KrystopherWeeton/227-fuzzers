; ModuleID = '../../components/autofill/core/browser/form_parsing/price_field.cc'
source_filename = "../../components/autofill/core/browser/form_parsing/price_field.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.autofill::PriceField" = type { %"class.autofill::FormField", %"class.autofill::AutofillField"* }
%"class.autofill::FormField" = type { i32 (...)** }
%"class.autofill::AutofillField" = type <{ i32 (...)**, %"struct.autofill::FormFieldData", %"class.absl::optional.22", %"class.std::__1::basic_string", i32, i8, [3 x i8], %"class.std::__1::vector.29", i8, [7 x i8], %"class.absl::optional.37", i32, %"class.autofill::AutofillType", i32, i32, %"class.autofill::DenseSet", %"class.std::__1::map", i32, %"class.absl::optional.50", [4 x i8], i64, i8, i8, [6 x i8], %"class.std::__1::basic_string", %"class.std::__1::basic_string", i32, i8, [3 x i8], i32, i8, [3 x i8] }>
%"struct.autofill::FormFieldData" = type { %"class.std::__1::basic_string", %"class.std::__1::basic_string", %"class.std::__1::basic_string", %"class.std::__1::basic_string", %"class.std::__1::basic_string", %"class.std::__1::basic_string.4", %"class.std::__1::basic_string.4", %"class.std::__1::basic_string", %"class.std::__1::basic_string", %"class.std::__1::basic_string", %"class.std::__1::basic_string", %"class.autofill::internal::TokenType", %"class.autofill::FieldRendererId", %"class.autofill::FormRendererId", %"class.url::Origin", i32, %"class.std::__1::basic_string.4", i64, i8, i32, i8, i8, i32, i32, i32, i8, i8, %"class.std::__1::basic_string", %"class.std::__1::vector", %"class.std::__1::vector", i32, %"class.gfx::RectF", %"class.std::__1::vector", %"class.std::__1::vector" }
%"class.autofill::internal::TokenType" = type { %"class.base::StrongAlias" }
%"class.base::StrongAlias" = type { %"class.base::UnguessableToken" }
%"class.base::UnguessableToken" = type { %"class.base::Token" }
%"class.base::Token" = type { i64, i64 }
%"class.autofill::FieldRendererId" = type { %"class.util::IdType" }
%"class.util::IdType" = type { %"class.base::StrongAlias.13" }
%"class.base::StrongAlias.13" = type { i32 }
%"class.autofill::FormRendererId" = type { %"class.util::IdType.14" }
%"class.util::IdType.14" = type { %"class.base::StrongAlias.15" }
%"class.base::StrongAlias.15" = type { i32 }
%"class.url::Origin" = type { %"class.url::SchemeHostPort", %"class.absl::optional" }
%"class.url::SchemeHostPort" = type <{ %"class.std::__1::basic_string.4", %"class.std::__1::basic_string.4", i16, [6 x i8] }>
%"class.absl::optional" = type { %"class.absl::optional_internal::optional_data" }
%"class.absl::optional_internal::optional_data" = type { %"class.absl::optional_internal::optional_data_base" }
%"class.absl::optional_internal::optional_data_base" = type { %"class.absl::optional_internal::optional_data_dtor_base" }
%"class.absl::optional_internal::optional_data_dtor_base" = type { i8, %union.anon.16 }
%union.anon.16 = type { %"class.url::Origin::Nonce" }
%"class.url::Origin::Nonce" = type { %"class.base::UnguessableToken" }
%"class.std::__1::basic_string.4" = type { %"class.std::__1::__compressed_pair.5" }
%"class.std::__1::__compressed_pair.5" = type { %"struct.std::__1::__compressed_pair_elem.6" }
%"struct.std::__1::__compressed_pair_elem.6" = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" = type { %union.anon.7 }
%union.anon.7 = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" = type { i8*, i64, i64 }
%"class.gfx::RectF" = type { %"class.gfx::PointF", %"class.gfx::SizeF" }
%"class.gfx::PointF" = type { float, float }
%"class.gfx::SizeF" = type { float, float }
%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { %"class.std::__1::basic_string"*, %"class.std::__1::basic_string"*, %"class.std::__1::__compressed_pair.17" }
%"class.std::__1::__compressed_pair.17" = type { %"struct.std::__1::__compressed_pair_elem.18" }
%"struct.std::__1::__compressed_pair_elem.18" = type { %"class.std::__1::basic_string"* }
%"class.absl::optional.22" = type { %"class.absl::optional_internal::optional_data.23" }
%"class.absl::optional_internal::optional_data.23" = type { %"class.absl::optional_internal::optional_data_base.24" }
%"class.absl::optional_internal::optional_data_base.24" = type { %"class.absl::optional_internal::optional_data_dtor_base.25" }
%"class.absl::optional_internal::optional_data_dtor_base.25" = type { i8, %union.anon.26 }
%union.anon.26 = type { %"class.autofill::FieldSignature" }
%"class.autofill::FieldSignature" = type { %"class.util::IdType.27" }
%"class.util::IdType.27" = type { %"class.base::StrongAlias.28" }
%"class.base::StrongAlias.28" = type { i32 }
%"class.std::__1::vector.29" = type { %"class.std::__1::__vector_base.30" }
%"class.std::__1::__vector_base.30" = type { %"class.autofill::AutofillQueryResponse_FormSuggestion_FieldSuggestion_FieldPrediction"*, %"class.autofill::AutofillQueryResponse_FormSuggestion_FieldSuggestion_FieldPrediction"*, %"class.std::__1::__compressed_pair.32" }
%"class.autofill::AutofillQueryResponse_FormSuggestion_FieldSuggestion_FieldPrediction" = type <{ %"class.google::protobuf::MessageLite", %"class.google::protobuf::internal::HasBits", %"class.google::protobuf::internal::CachedSize", i32, i8, [3 x i8] }>
%"class.google::protobuf::MessageLite" = type { i32 (...)**, %"class.google::protobuf::internal::InternalMetadata" }
%"class.google::protobuf::internal::InternalMetadata" = type { i8* }
%"class.google::protobuf::internal::HasBits" = type { [1 x i32] }
%"class.google::protobuf::internal::CachedSize" = type { %"struct.std::__1::atomic" }
%"struct.std::__1::atomic" = type { %"struct.std::__1::__atomic_base" }
%"struct.std::__1::__atomic_base" = type { %"struct.std::__1::__atomic_base.31" }
%"struct.std::__1::__atomic_base.31" = type { %"struct.std::__1::__cxx_atomic_impl" }
%"struct.std::__1::__cxx_atomic_impl" = type { %"struct.std::__1::__cxx_atomic_base_impl" }
%"struct.std::__1::__cxx_atomic_base_impl" = type { i32 }
%"class.std::__1::__compressed_pair.32" = type { %"struct.std::__1::__compressed_pair_elem.33" }
%"struct.std::__1::__compressed_pair_elem.33" = type { %"class.autofill::AutofillQueryResponse_FormSuggestion_FieldSuggestion_FieldPrediction"* }
%"class.absl::optional.37" = type { %"class.absl::optional_internal::optional_data.38" }
%"class.absl::optional_internal::optional_data.38" = type { %"class.absl::optional_internal::optional_data_base.39" }
%"class.absl::optional_internal::optional_data_base.39" = type { %"class.absl::optional_internal::optional_data_dtor_base.40" }
%"class.absl::optional_internal::optional_data_dtor_base.40" = type { i8, %union.anon.41 }
%union.anon.41 = type { %"class.autofill::PasswordRequirementsSpec" }
%"class.autofill::PasswordRequirementsSpec" = type { %"class.google::protobuf::MessageLite", %"class.google::protobuf::internal::HasBits", %"class.google::protobuf::internal::CachedSize", %"class.autofill::PasswordRequirementsSpec_CharacterClass"*, %"class.autofill::PasswordRequirementsSpec_CharacterClass"*, %"class.autofill::PasswordRequirementsSpec_CharacterClass"*, %"class.autofill::PasswordRequirementsSpec_CharacterClass"*, %"class.autofill::PasswordRequirementsSpec_CharacterClass"*, i32, i32, i32, i32 }
%"class.autofill::PasswordRequirementsSpec_CharacterClass" = type { %"class.google::protobuf::MessageLite", %"class.google::protobuf::internal::HasBits", %"class.google::protobuf::internal::CachedSize", %"struct.google::protobuf::internal::ArenaStringPtr", i32, i32 }
%"struct.google::protobuf::internal::ArenaStringPtr" = type { %"class.std::__1::basic_string.4"* }
%"class.autofill::AutofillType" = type { i32, i32, i32 }
%"class.autofill::DenseSet" = type { %"class.std::__1::bitset" }
%"class.std::__1::bitset" = type { %"class.std::__1::__bitset" }
%"class.std::__1::__bitset" = type { [2 x i64] }
%"class.std::__1::map" = type { %"class.std::__1::__tree" }
%"class.std::__1::__tree" = type { %"class.std::__1::__tree_end_node"*, %"class.std::__1::__compressed_pair.42", %"class.std::__1::__compressed_pair.47" }
%"class.std::__1::__tree_end_node" = type { %"class.std::__1::__tree_node_base"* }
%"class.std::__1::__tree_node_base" = type <{ %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_end_node"*, i8, [7 x i8] }>
%"class.std::__1::__compressed_pair.42" = type { %"struct.std::__1::__compressed_pair_elem.43" }
%"struct.std::__1::__compressed_pair_elem.43" = type { %"class.std::__1::__tree_end_node" }
%"class.std::__1::__compressed_pair.47" = type { %"struct.std::__1::__compressed_pair_elem.48" }
%"struct.std::__1::__compressed_pair_elem.48" = type { i64 }
%"class.absl::optional.50" = type { %"class.absl::optional_internal::optional_data.51" }
%"class.absl::optional_internal::optional_data.51" = type { %"class.absl::optional_internal::optional_data_base.52" }
%"class.absl::optional_internal::optional_data_base.52" = type { %"class.absl::optional_internal::optional_data_dtor_base.53" }
%"class.absl::optional_internal::optional_data_dtor_base.53" = type { i8, %union.anon.54 }
%union.anon.54 = type { i32 }
%"class.std::__1::basic_string" = type { %"class.std::__1::__compressed_pair.1" }
%"class.std::__1::__compressed_pair.1" = type { %"struct.std::__1::__compressed_pair_elem.2" }
%"struct.std::__1::__compressed_pair_elem.2" = type { %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__rep" }
%"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__rep" = type { %union.anon }
%union.anon = type { %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__long" }
%"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__long" = type { i16*, i64, i64 }
%"class.autofill::AutofillScanner" = type { %"class.std::__1::__wrap_iter", %"class.std::__1::__wrap_iter", %"class.std::__1::__wrap_iter", %"class.std::__1::__wrap_iter", %"class.std::__1::vector.55" }
%"class.std::__1::__wrap_iter" = type { %"class.autofill::AutofillField"** }
%"class.std::__1::vector.55" = type { %"class.std::__1::__vector_base.56" }
%"class.std::__1::__vector_base.56" = type { %"class.autofill::AutofillField"**, %"class.autofill::AutofillField"**, %"class.std::__1::__compressed_pair.57" }
%"class.std::__1::__compressed_pair.57" = type { %"struct.std::__1::__compressed_pair_elem.58" }
%"struct.std::__1::__compressed_pair_elem.58" = type { %"class.autofill::AutofillField"** }
%"class.autofill::LanguageCode" = type { %"class.base::StrongAlias.62" }
%"class.base::StrongAlias.62" = type { %"class.std::__1::basic_string.4" }
%"class.autofill::LogManager" = type opaque
%"class.std::__1::vector.63" = type { %"class.std::__1::__vector_base.64" }
%"class.std::__1::__vector_base.64" = type { %"struct.autofill::MatchingPattern"*, %"struct.autofill::MatchingPattern"*, %"class.std::__1::__compressed_pair.65" }
%"struct.autofill::MatchingPattern" = type { %"class.autofill::LanguageCode", %"class.std::__1::basic_string", %"class.std::__1::basic_string", float, i8, i16 }
%"class.std::__1::__compressed_pair.65" = type { %"struct.std::__1::__compressed_pair_elem.66" }
%"struct.std::__1::__compressed_pair_elem.66" = type { %"struct.autofill::MatchingPattern"* }
%"struct.autofill::RegExLogging" = type { %"class.autofill::LogManager"*, i8* }
%"class.autofill::PatternProvider" = type { %"class.std::__1::map.70", %"class.base::Version" }
%"class.std::__1::map.70" = type { %"class.std::__1::__tree.71" }
%"class.std::__1::__tree.71" = type { %"class.std::__1::__tree_end_node"*, %"class.std::__1::__compressed_pair.72", %"class.std::__1::__compressed_pair.76" }
%"class.std::__1::__compressed_pair.72" = type { %"struct.std::__1::__compressed_pair_elem.43" }
%"class.std::__1::__compressed_pair.76" = type { %"struct.std::__1::__compressed_pair_elem.48" }
%"class.base::Version" = type { %"class.std::__1::vector.81" }
%"class.std::__1::vector.81" = type { %"class.std::__1::__vector_base.82" }
%"class.std::__1::__vector_base.82" = type { i32*, i32*, %"class.std::__1::__compressed_pair.83" }
%"class.std::__1::__compressed_pair.83" = type { %"struct.std::__1::__compressed_pair_elem.84" }
%"struct.std::__1::__compressed_pair_elem.84" = type { i32* }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short" = type { [23 x i8], %struct.anon.8 }
%struct.anon.8 = type { i8 }
%"class.base::flat_map" = type opaque

$_ZN8autofill9FormFieldD2Ev = comdat any

$_ZN8autofill10PriceFieldD0Ev = comdat any

@.str = private unnamed_addr constant [6 x i8] c"PRICE\00", align 1
@_ZN8autofill8kPriceReE = external constant [0 x i16], align 2
@.str.1 = private unnamed_addr constant [9 x i8] c"kPriceRe\00", align 1
@_ZTVN8autofill10PriceFieldE = hidden unnamed_addr constant { [5 x i8*] } { [5 x i8*] [i8* null, i8* null, i8* bitcast (void (%"class.autofill::FormField"*)* @_ZN8autofill9FormFieldD2Ev to i8*), i8* bitcast (void (%"class.autofill::PriceField"*)* @_ZN8autofill10PriceFieldD0Ev to i8*), i8* bitcast (void (%"class.autofill::PriceField"*, %"class.base::flat_map"*)* @_ZNK8autofill10PriceField18AddClassificationsEPN4base8flat_mapINS_8internal8GlobalIdINS_15FieldRendererIdEEENS_15FieldCandidatesENSt3__14lessIvEENS8_6vectorINS8_4pairIS6_S7_EENS8_9allocatorISD_EEEEEE to i8*)] }, align 8
@_ZN8autofill9FormField21kBasePriceParserScoreE = external local_unnamed_addr constant float, align 4

@_ZN8autofill10PriceFieldC1EPKNS_13AutofillFieldE = hidden unnamed_addr alias void (%"class.autofill::PriceField"*, %"class.autofill::AutofillField"*), void (%"class.autofill::PriceField"*, %"class.autofill::AutofillField"*)* @_ZN8autofill10PriceFieldC2EPKNS_13AutofillFieldE

; Function Attrs: nounwind ssp uwtable
define hidden %"class.autofill::FormField"* @_ZN8autofill10PriceField5ParseEPNS_15AutofillScannerERKNS_12LanguageCodeEPNS_10LogManagerE(%"class.autofill::AutofillScanner"*, %"class.autofill::LanguageCode"* dereferenceable(24), %"class.autofill::LogManager"*) local_unnamed_addr #0 align 2 {
  %4 = alloca %"class.autofill::AutofillField"*, align 8
  %5 = alloca %"class.std::__1::vector.63", align 8
  %6 = alloca %"class.std::__1::basic_string.4", align 8
  %7 = alloca %"struct.autofill::RegExLogging", align 8
  %8 = bitcast %"class.autofill::AutofillField"** %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %8) #8
  store %"class.autofill::AutofillField"* inttoptr (i64 -6148914691236517206 to %"class.autofill::AutofillField"*), %"class.autofill::AutofillField"** %4, align 8
  %9 = bitcast %"class.std::__1::vector.63"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %9) #8
  %10 = tail call dereferenceable(48) %"class.autofill::PatternProvider"* @_ZN8autofill15PatternProvider11GetInstanceEv() #8
  %11 = bitcast %"class.std::__1::basic_string.4"* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %11) #8
  %12 = bitcast %"class.std::__1::basic_string.4"* %6 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %13 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %12, i64 0, i32 1, i32 0
  store i8 5, i8* %13, align 1
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %11, i8* align 1 getelementptr inbounds ([6 x i8], [6 x i8]* @.str, i64 0, i64 0), i64 5, i1 false) #8
  %14 = getelementptr inbounds i8, i8* %11, i64 5
  store i8 0, i8* %14, align 1
  call void @_ZNK8autofill15PatternProvider16GetMatchPatternsERKNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEERKNS_12LanguageCodeE(%"class.std::__1::vector.63"* nonnull sret %5, %"class.autofill::PatternProvider"* %10, %"class.std::__1::basic_string.4"* nonnull dereferenceable(24) %6, %"class.autofill::LanguageCode"* dereferenceable(24) %1) #8
  %15 = load i8, i8* %13, align 1
  %16 = icmp slt i8 %15, 0
  br i1 %16, label %17, label %20

17:                                               ; preds = %3
  %18 = getelementptr inbounds %"class.std::__1::basic_string.4", %"class.std::__1::basic_string.4"* %6, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %19 = load i8*, i8** %18, align 8
  call void @_ZdlPv(i8* %19) #9
  br label %20

20:                                               ; preds = %3, %17
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %11) #8
  %21 = load i16, i16* getelementptr inbounds ([0 x i16], [0 x i16]* @_ZN8autofill8kPriceReE, i64 0, i64 0), align 2
  %22 = icmp eq i16 %21, 0
  br i1 %22, label %30, label %23

23:                                               ; preds = %20, %23
  %24 = phi i64 [ %26, %23 ], [ 0, %20 ]
  %25 = phi i16* [ %27, %23 ], [ getelementptr inbounds ([0 x i16], [0 x i16]* @_ZN8autofill8kPriceReE, i64 0, i64 0), %20 ]
  %26 = add i64 %24, 1
  %27 = getelementptr inbounds i16, i16* %25, i64 1
  %28 = load i16, i16* %27, align 2
  %29 = icmp eq i16 %28, 0
  br i1 %29, label %30, label %23

30:                                               ; preds = %23, %20
  %31 = phi i64 [ 0, %20 ], [ %26, %23 ]
  %32 = bitcast %"struct.autofill::RegExLogging"* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %32) #8
  %33 = getelementptr inbounds %"struct.autofill::RegExLogging", %"struct.autofill::RegExLogging"* %7, i64 0, i32 0
  store %"class.autofill::LogManager"* %2, %"class.autofill::LogManager"** %33, align 8
  %34 = getelementptr inbounds %"struct.autofill::RegExLogging", %"struct.autofill::RegExLogging"* %7, i64 0, i32 1
  store i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.1, i64 0, i64 0), i8** %34, align 8
  %35 = call zeroext i1 @_ZN8autofill9FormField19ParseFieldSpecificsEPNS_15AutofillScannerEN4base16BasicStringPieceIDsNSt3__111char_traitsIDsEEEEiRKNS5_6vectorINS_15MatchingPatternENS5_9allocatorISA_EEEEPPNS_13AutofillFieldERKNS_12RegExLoggingENS0_18MatchFieldBitmasksE(%"class.autofill::AutofillScanner"* %0, i16* getelementptr inbounds ([0 x i16], [0 x i16]* @_ZN8autofill8kPriceReE, i64 0, i64 0), i64 %31, i32 871, %"class.std::__1::vector.63"* nonnull dereferenceable(24) %5, %"class.autofill::AutofillField"** nonnull %4, %"struct.autofill::RegExLogging"* nonnull dereferenceable(16) %7, i64 4294967295) #8
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %32) #8
  br i1 %35, label %36, label %44

36:                                               ; preds = %30
  %37 = call i8* @_Znwm(i64 16) #9
  %38 = bitcast %"class.autofill::AutofillField"** %4 to i64*
  %39 = load i64, i64* %38, align 8
  %40 = bitcast i8* %37 to i32 (...)***
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [5 x i8*] }, { [5 x i8*] }* @_ZTVN8autofill10PriceFieldE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %40, align 8
  %41 = getelementptr inbounds i8, i8* %37, i64 8
  %42 = bitcast i8* %41 to i64*
  store i64 %39, i64* %42, align 8
  %43 = bitcast i8* %37 to %"class.autofill::FormField"*
  br label %44

44:                                               ; preds = %30, %36
  %45 = phi %"class.autofill::FormField"* [ %43, %36 ], [ null, %30 ]
  %46 = getelementptr inbounds %"class.std::__1::vector.63", %"class.std::__1::vector.63"* %5, i64 0, i32 0, i32 0
  %47 = load %"struct.autofill::MatchingPattern"*, %"struct.autofill::MatchingPattern"** %46, align 8
  %48 = icmp eq %"struct.autofill::MatchingPattern"* %47, null
  br i1 %48, label %63, label %49

49:                                               ; preds = %44
  %50 = bitcast %"struct.autofill::MatchingPattern"* %47 to i8*
  %51 = getelementptr inbounds %"class.std::__1::vector.63", %"class.std::__1::vector.63"* %5, i64 0, i32 0, i32 1
  %52 = load %"struct.autofill::MatchingPattern"*, %"struct.autofill::MatchingPattern"** %51, align 8
  %53 = icmp eq %"struct.autofill::MatchingPattern"* %52, %47
  br i1 %53, label %61, label %54

54:                                               ; preds = %49, %54
  %55 = phi %"struct.autofill::MatchingPattern"* [ %56, %54 ], [ %52, %49 ]
  %56 = getelementptr inbounds %"struct.autofill::MatchingPattern", %"struct.autofill::MatchingPattern"* %55, i64 -1
  call void @_ZN8autofill15MatchingPatternD1Ev(%"struct.autofill::MatchingPattern"* %56) #8
  %57 = icmp eq %"struct.autofill::MatchingPattern"* %56, %47
  br i1 %57, label %58, label %54

58:                                               ; preds = %54
  %59 = bitcast %"class.std::__1::vector.63"* %5 to i8**
  %60 = load i8*, i8** %59, align 8
  br label %61

61:                                               ; preds = %58, %49
  %62 = phi i8* [ %60, %58 ], [ %50, %49 ]
  store %"struct.autofill::MatchingPattern"* %47, %"struct.autofill::MatchingPattern"** %51, align 8
  call void @_ZdlPv(i8* %62) #9
  br label %63

63:                                               ; preds = %44, %61
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %9) #8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %8) #8
  ret %"class.autofill::FormField"* %45
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

declare dereferenceable(48) %"class.autofill::PatternProvider"* @_ZN8autofill15PatternProvider11GetInstanceEv() local_unnamed_addr #2

declare void @_ZNK8autofill15PatternProvider16GetMatchPatternsERKNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEERKNS_12LanguageCodeE(%"class.std::__1::vector.63"* sret, %"class.autofill::PatternProvider"*, %"class.std::__1::basic_string.4"* dereferenceable(24), %"class.autofill::LanguageCode"* dereferenceable(24)) local_unnamed_addr #2

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

declare zeroext i1 @_ZN8autofill9FormField19ParseFieldSpecificsEPNS_15AutofillScannerEN4base16BasicStringPieceIDsNSt3__111char_traitsIDsEEEEiRKNS5_6vectorINS_15MatchingPatternENS5_9allocatorISA_EEEEPPNS_13AutofillFieldERKNS_12RegExLoggingENS0_18MatchFieldBitmasksE(%"class.autofill::AutofillScanner"*, i16*, i64, i32, %"class.std::__1::vector.63"* dereferenceable(24), %"class.autofill::AutofillField"**, %"struct.autofill::RegExLogging"* dereferenceable(16), i64) local_unnamed_addr #2

; Function Attrs: nofree norecurse nounwind ssp uwtable writeonly
define hidden void @_ZN8autofill10PriceFieldC2EPKNS_13AutofillFieldE(%"class.autofill::PriceField"* nocapture, %"class.autofill::AutofillField"*) unnamed_addr #3 align 2 {
  %3 = getelementptr inbounds %"class.autofill::PriceField", %"class.autofill::PriceField"* %0, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [5 x i8*] }, { [5 x i8*] }* @_ZTVN8autofill10PriceFieldE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %3, align 8
  %4 = getelementptr inbounds %"class.autofill::PriceField", %"class.autofill::PriceField"* %0, i64 0, i32 1
  store %"class.autofill::AutofillField"* %1, %"class.autofill::AutofillField"** %4, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZNK8autofill10PriceField18AddClassificationsEPN4base8flat_mapINS_8internal8GlobalIdINS_15FieldRendererIdEEENS_15FieldCandidatesENSt3__14lessIvEENS8_6vectorINS8_4pairIS6_S7_EENS8_9allocatorISD_EEEEEE(%"class.autofill::PriceField"* nocapture readonly, %"class.base::flat_map"*) unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.autofill::PriceField", %"class.autofill::PriceField"* %0, i64 0, i32 1
  %4 = load %"class.autofill::AutofillField"*, %"class.autofill::AutofillField"** %3, align 8
  %5 = load float, float* @_ZN8autofill9FormField21kBasePriceParserScoreE, align 4
  tail call void @_ZN8autofill9FormField17AddClassificationEPKNS_13AutofillFieldENS_15ServerFieldTypeEfPN4base8flat_mapINS_8internal8GlobalIdINS_15FieldRendererIdEEENS_15FieldCandidatesENSt3__14lessIvEENSC_6vectorINSC_4pairISA_SB_EENSC_9allocatorISH_EEEEEE(%"class.autofill::AutofillField"* %4, i32 98, float %5, %"class.base::flat_map"* %1) #8
  ret void
}

declare void @_ZN8autofill9FormField17AddClassificationEPKNS_13AutofillFieldENS_15ServerFieldTypeEfPN4base8flat_mapINS_8internal8GlobalIdINS_15FieldRendererIdEEENS_15FieldCandidatesENSt3__14lessIvEENSC_6vectorINSC_4pairISA_SB_EENSC_9allocatorISH_EEEEEE(%"class.autofill::AutofillField"*, i32, float, %"class.base::flat_map"*) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN8autofill9FormFieldD2Ev(%"class.autofill::FormField"*) unnamed_addr #0 comdat align 2 {
  ret void
}

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZN8autofill10PriceFieldD0Ev(%"class.autofill::PriceField"*) unnamed_addr #4 comdat align 2 {
  %2 = bitcast %"class.autofill::PriceField"* %0 to i8*
  tail call void @_ZdlPv(i8* %2) #9
  ret void
}

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #5

; Function Attrs: nobuiltin nofree
declare noalias nonnull i8* @_Znwm(i64) local_unnamed_addr #6

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #1

; Function Attrs: nounwind
declare void @_ZN8autofill15MatchingPatternD1Ev(%"struct.autofill::MatchingPattern"*) unnamed_addr #7

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nofree norecurse nounwind ssp uwtable writeonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { inlinehint nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nobuiltin nofree "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { nounwind }
attributes #9 = { builtin nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
