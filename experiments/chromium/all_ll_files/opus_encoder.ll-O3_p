; ModuleID = '../../third_party/opus/src/src/opus_encoder.c'
source_filename = "../../third_party/opus/src/src/opus_encoder.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"
module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"
module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%struct.OpusEncoder = type { i32, i32, %struct.silk_EncControlStruct, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %struct.TonalityAnalysisState, i32, i16, i32, float, [4 x float], i32, i32, i32, i32, i32, i32, i32, i32, float*, %struct.StereoWidthState, [960 x float], i32, i32, float, i32, i32 }
%struct.silk_EncControlStruct = type { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }
%struct.TonalityAnalysisState = type { i32, i32, i32, [240 x float], [240 x float], [240 x float], [720 x float], i32, [18 x float], float, i32, [8 x [18 x float]], [8 x [18 x float]], [18 x float], [18 x float], [19 x float], [32 x float], [8 x float], [9 x float], float, float, i32, i32, i32, i32, i32, i32, float, i32, [32 x float], [3 x float], [100 x %struct.AnalysisInfo] }
%struct.AnalysisInfo = type { i32, float, float, float, float, float, float, float, i32, float, float, [19 x i8] }
%struct.StereoWidthState = type { float, float, float, float, float }
%struct.OpusCustomEncoder = type opaque
%struct.ec_ctx = type { i8*, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }
%struct.OpusCustomMode = type { i32, i32, i32, i32, [4 x float], i16*, i32, i32, i32, i32, i8*, i16*, float*, %struct.mdct_lookup, %struct.PulseCache }
%struct.mdct_lookup = type { i32, i32, [4 x %struct.kiss_fft_state*], float* }
%struct.kiss_fft_state = type { i32, float, i32, [16 x i16], i16*, %struct.kiss_twiddle_cpx*, %struct.arch_fft_state* }
%struct.kiss_twiddle_cpx = type { float, float }
%struct.arch_fft_state = type { i32, i8* }
%struct.PulseCache = type { i32, i16*, i8*, i8* }
%struct.SILKInfo = type { i32, i32 }
%struct.OpusRepacketizer = type { i8, i32, [48 x i8*], [48 x i16], i32 }
%struct.__va_list_tag = type { i32, i32, i8*, i8* }

@__const.opus_encode_native.analysis_info = private unnamed_addr constant { i32, float, float, float, float, float, float, float, i32, float, float, [19 x i8], [1 x i8] } { i32 -1431655766, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, i32 -1431655766, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, [19 x i8] c"\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA", [1 x i8] c"\AA" }, align 4
@mono_voice_bandwidth_thresholds = internal unnamed_addr constant [8 x i32] [i32 9000, i32 700, i32 9000, i32 700, i32 13500, i32 1000, i32 14000, i32 2000], align 16
@mono_music_bandwidth_thresholds = internal unnamed_addr constant [8 x i32] [i32 9000, i32 700, i32 9000, i32 700, i32 11000, i32 1000, i32 12000, i32 2000], align 16
@.str = private unnamed_addr constant [87 x i8] c"assertion failed: st->mode == MODE_HYBRID || curr_bandwidth == OPUS_BANDWIDTH_WIDEBAND\00", align 1
@.str.1 = private unnamed_addr constant [46 x i8] c"../../third_party/opus/src/src/opus_encoder.c\00", align 1
@.str.2 = private unnamed_addr constant [60 x i8] c"assertion failed: st->silk_mode.internalSampleRate == 16000\00", align 1
@fec_thresholds = internal unnamed_addr constant [10 x i32] [i32 12000, i32 1000, i32 14000, i32 1000, i32 16000, i32 1000, i32 20000, i32 1000, i32 22000, i32 1000], align 16
@compute_silk_rate_for_hybrid.rate_table = internal unnamed_addr constant [7 x [5 x i32]] [[5 x i32] zeroinitializer, [5 x i32] [i32 12000, i32 10000, i32 10000, i32 11000, i32 11000], [5 x i32] [i32 16000, i32 13500, i32 13500, i32 15000, i32 15000], [5 x i32] [i32 20000, i32 16000, i32 16000, i32 18000, i32 18000], [5 x i32] [i32 24000, i32 18000, i32 18000, i32 21000, i32 21000], [5 x i32] [i32 32000, i32 22000, i32 22000, i32 28000, i32 28000], [5 x i32] [i32 64000, i32 38000, i32 38000, i32 50000, i32 50000]], align 16
@switch.table.opus_encode_native = private unnamed_addr constant [4 x i32] [i32 13, i32 17, i32 17, i32 19], align 4

; Function Attrs: nounwind ssp uwtable
define hidden i32 @opus_encoder_get_size(i32) local_unnamed_addr #0 {
  %2 = alloca i32, align 4
  %3 = bitcast i32* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %3) #10
  store i32 -1431655766, i32* %2, align 4
  %4 = add i32 %0, -1
  %5 = icmp ugt i32 %4, 1
  br i1 %5, label %17, label %6

6:                                                ; preds = %1
  %7 = call i32 @silk_Get_Encoder_Size(i32* nonnull %2) #10
  %8 = icmp eq i32 %7, 0
  br i1 %8, label %9, label %17

9:                                                ; preds = %6
  %10 = load i32, i32* %2, align 4
  %11 = add i32 %10, 7
  %12 = and i32 %11, -8
  store i32 %12, i32* %2, align 4
  %13 = call i32 @celt_encoder_get_size(i32 %0) #10
  %14 = load i32, i32* %2, align 4
  %15 = add i32 %13, 18144
  %16 = add i32 %15, %14
  br label %17

17:                                               ; preds = %6, %1, %9
  %18 = phi i32 [ %16, %9 ], [ 0, %1 ], [ 0, %6 ]
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %3) #10
  ret i32 %18
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

declare i32 @silk_Get_Encoder_Size(i32*) local_unnamed_addr #2

declare i32 @celt_encoder_get_size(i32) local_unnamed_addr #2

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nounwind ssp uwtable
define hidden i32 @opus_encoder_init(%struct.OpusEncoder*, i32, i32, i32) local_unnamed_addr #0 {
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  %7 = bitcast i32* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %7) #10
  store i32 -1431655766, i32* %6, align 4
  switch i32 %1, label %100 [
    i32 48000, label %8
    i32 24000, label %8
    i32 16000, label %8
    i32 12000, label %8
    i32 8000, label %8
  ]

8:                                                ; preds = %4, %4, %4, %4, %4
  %9 = add i32 %2, -1
  %10 = icmp ugt i32 %9, 1
  br i1 %10, label %100, label %11

11:                                               ; preds = %8
  switch i32 %3, label %100 [
    i32 2051, label %12
    i32 2049, label %12
    i32 2048, label %12
  ]

12:                                               ; preds = %11, %11, %11
  %13 = bitcast %struct.OpusEncoder* %0 to i8*
  %14 = bitcast i32* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %14) #10
  store i32 -1431655766, i32* %5, align 4
  %15 = call i32 @silk_Get_Encoder_Size(i32* nonnull %5) #10
  %16 = icmp eq i32 %15, 0
  br i1 %16, label %17, label %26

17:                                               ; preds = %12
  %18 = load i32, i32* %5, align 4
  %19 = add i32 %18, 7
  %20 = and i32 %19, -8
  store i32 %20, i32* %5, align 4
  %21 = call i32 @celt_encoder_get_size(i32 %2) #10
  %22 = load i32, i32* %5, align 4
  %23 = add i32 %21, 18144
  %24 = add i32 %23, %22
  %25 = sext i32 %24 to i64
  br label %26

26:                                               ; preds = %12, %17
  %27 = phi i64 [ %25, %17 ], [ 0, %12 ]
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %14) #10
  call void @llvm.memset.p0i8.i64(i8* align 1 %13, i8 0, i64 %27, i1 false)
  %28 = call i32 @silk_Get_Encoder_Size(i32* nonnull %6) #10
  %29 = icmp eq i32 %28, 0
  br i1 %29, label %30, label %100

30:                                               ; preds = %26
  %31 = load i32, i32* %6, align 4
  %32 = add i32 %31, 7
  %33 = and i32 %32, -8
  store i32 %33, i32* %6, align 4
  %34 = getelementptr inbounds %struct.OpusEncoder, %struct.OpusEncoder* %0, i64 0, i32 1
  store i32 18144, i32* %34, align 4
  %35 = add nsw i32 %33, 18144
  %36 = getelementptr inbounds %struct.OpusEncoder, %struct.OpusEncoder* %0, i64 0, i32 0
  store i32 %35, i32* %36, align 8
  %37 = getelementptr inbounds %struct.OpusEncoder, %struct.OpusEncoder* %0, i64 1
  %38 = bitcast %struct.OpusEncoder* %37 to i8*
  %39 = sext i32 %35 to i64
  %40 = getelementptr inbounds i8, i8* %13, i64 %39
  %41 = bitcast i8* %40 to %struct.OpusCustomEncoder*
  %42 = getelementptr inbounds %struct.OpusEncoder, %struct.OpusEncoder* %0, i64 0, i32 4
  store i32 %2, i32* %42, align 8
  %43 = getelementptr inbounds %struct.OpusEncoder, %struct.OpusEncoder* %0, i64 0, i32 24
  store i32 %2, i32* %43, align 8
  %44 = getelementptr inbounds %struct.OpusEncoder, %struct.OpusEncoder* %0, i64 0, i32 12
  store i32 %1, i32* %44, align 8
  %45 = call i32 @opus_select_arch() #10
  %46 = getelementptr inbounds %struct.OpusEncoder, %struct.OpusEncoder* %0, i64 0, i32 21
  store i32 %45, i32* %46, align 4
  %47 = getelementptr inbounds %struct.OpusEncoder, %struct.OpusEncoder* %0, i64 0, i32 2
  %48 = call i32 @silk_InitEncoder(i8* %38, i32 %45, %struct.silk_EncControlStruct* %47) #10
  %49 = icmp eq i32 %48, 0
  br i1 %49, label %50, label %100

50:                                               ; preds = %30
  %51 = getelementptr inbounds %struct.silk_EncControlStruct, %struct.silk_EncControlStruct* %47, i64 0, i32 0
  store i32 %2, i32* %51, align 8
  %52 = getelementptr inbounds %struct.OpusEncoder, %struct.OpusEncoder* %0, i64 0, i32 2, i32 1
  store i32 %2, i32* %52, align 4
  %53 = load i32, i32* %44, align 8
  %54 = getelementptr inbounds %struct.OpusEncoder, %struct.OpusEncoder* %0, i64 0, i32 2, i32 2
  store i32 %53, i32* %54, align 8
  %55 = getelementptr inbounds %struct.OpusEncoder, %struct.OpusEncoder* %0, i64 0, i32 2, i32 3
  %56 = bitcast i32* %55 to <4 x i32>*
  store <4 x i32> <i32 16000, i32 8000, i32 16000, i32 20>, <4 x i32>* %56, align 4
  %57 = getelementptr inbounds %struct.OpusEncoder, %struct.OpusEncoder* %0, i64 0, i32 2, i32 7
  %58 = bitcast i32* %57 to <4 x i32>*
  store <4 x i32> <i32 25000, i32 0, i32 9, i32 0>, <4 x i32>* %58, align 4
  %59 = getelementptr inbounds %struct.OpusEncoder, %struct.OpusEncoder* %0, i64 0, i32 2, i32 12
  store i32 0, i32* %59, align 8
  %60 = getelementptr inbounds %struct.OpusEncoder, %struct.OpusEncoder* %0, i64 0, i32 2, i32 13
  store i32 0, i32* %60, align 4
  %61 = getelementptr inbounds %struct.OpusEncoder, %struct.OpusEncoder* %0, i64 0, i32 2, i32 17
  store i32 0, i32* %61, align 4
  %62 = load i32, i32* %46, align 4
  %63 = call i32 @celt_encoder_init(%struct.OpusCustomEncoder* %41, i32 %1, i32 %2, i32 %62) #10
  %64 = icmp eq i32 %63, 0
  br i1 %64, label %65, label %100

65:                                               ; preds = %50
  %66 = getelementptr inbounds %struct.OpusEncoder, %struct.OpusEncoder* %0, i64 0, i32 2, i32 9
  %67 = call i32 (%struct.OpusCustomEncoder*, i32, ...) @opus_custom_encoder_ctl(%struct.OpusCustomEncoder* %41, i32 10016, i32 0) #10
  %68 = load i32, i32* %66, align 4
  %69 = call i32 (%struct.OpusCustomEncoder*, i32, ...) @opus_custom_encoder_ctl(%struct.OpusCustomEncoder* %41, i32 4010, i32 %68) #10
  %70 = getelementptr inbounds %struct.OpusEncoder, %struct.OpusEncoder* %0, i64 0, i32 13
  store i32 1, i32* %70, align 4
  %71 = getelementptr inbounds %struct.OpusEncoder, %struct.OpusEncoder* %0, i64 0, i32 14
  store i32 1, i32* %71, align 8
  %72 = getelementptr inbounds %struct.OpusEncoder, %struct.OpusEncoder* %0, i64 0, i32 17
  store i32 -1000, i32* %72, align 4
  %73 = mul nsw i32 %2, %1
  %74 = add nuw nsw i32 %73, 3000
  %75 = getelementptr inbounds %struct.OpusEncoder, %struct.OpusEncoder* %0, i64 0, i32 16
  store i32 %74, i32* %75, align 8
  %76 = getelementptr inbounds %struct.OpusEncoder, %struct.OpusEncoder* %0, i64 0, i32 3
  store i32 %3, i32* %76, align 4
  %77 = getelementptr inbounds %struct.OpusEncoder, %struct.OpusEncoder* %0, i64 0, i32 6
  %78 = bitcast i32* %77 to <4 x i32>*
  store <4 x i32> <i32 -1000, i32 -1000, i32 -1000, i32 1105>, <4 x i32>* %78, align 8
  %79 = getelementptr inbounds %struct.OpusEncoder, %struct.OpusEncoder* %0, i64 0, i32 10
  store i32 -1000, i32* %79, align 8
  %80 = getelementptr inbounds %struct.OpusEncoder, %struct.OpusEncoder* %0, i64 0, i32 11
  store i32 -1, i32* %80, align 4
  %81 = load i32, i32* %44, align 8
  %82 = sdiv i32 %81, 100
  %83 = getelementptr inbounds %struct.OpusEncoder, %struct.OpusEncoder* %0, i64 0, i32 19
  store i32 %82, i32* %83, align 4
  %84 = getelementptr inbounds %struct.OpusEncoder, %struct.OpusEncoder* %0, i64 0, i32 18
  store i32 24, i32* %84, align 8
  %85 = getelementptr inbounds %struct.OpusEncoder, %struct.OpusEncoder* %0, i64 0, i32 15
  store i32 5000, i32* %85, align 4
  %86 = sdiv i32 %81, 250
  %87 = getelementptr inbounds %struct.OpusEncoder, %struct.OpusEncoder* %0, i64 0, i32 5
  store i32 %86, i32* %87, align 4
  %88 = getelementptr inbounds %struct.OpusEncoder, %struct.OpusEncoder* %0, i64 0, i32 25
  store i16 16384, i16* %88, align 4
  %89 = getelementptr inbounds %struct.OpusEncoder, %struct.OpusEncoder* %0, i64 0, i32 27
  store float 1.000000e+00, float* %89, align 4
  %90 = call i32 @silk_lin2log(i32 60) #10
  %91 = shl i32 %90, 8
  %92 = getelementptr inbounds %struct.OpusEncoder, %struct.OpusEncoder* %0, i64 0, i32 26
  store i32 %91, i32* %92, align 8
  %93 = getelementptr inbounds %struct.OpusEncoder, %struct.OpusEncoder* %0, i64 0, i32 36
  store i32 1, i32* %93, align 4
  %94 = getelementptr inbounds %struct.OpusEncoder, %struct.OpusEncoder* %0, i64 0, i32 29
  store i32 1001, i32* %94, align 8
  %95 = getelementptr inbounds %struct.OpusEncoder, %struct.OpusEncoder* %0, i64 0, i32 33
  store i32 1105, i32* %95, align 8
  %96 = getelementptr inbounds %struct.OpusEncoder, %struct.OpusEncoder* %0, i64 0, i32 23
  %97 = load i32, i32* %44, align 8
  call void @tonality_analysis_init(%struct.TonalityAnalysisState* %96, i32 %97) #10
  %98 = load i32, i32* %76, align 4
  %99 = getelementptr inbounds %struct.OpusEncoder, %struct.OpusEncoder* %0, i64 0, i32 23, i32 1
  store i32 %98, i32* %99, align 4
  br label %100

100:                                              ; preds = %50, %30, %26, %8, %4, %11, %65
  %101 = phi i32 [ 0, %65 ], [ -1, %11 ], [ -1, %4 ], [ -1, %8 ], [ -1, %26 ], [ -3, %30 ], [ -3, %50 ]
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %7) #10
  ret i32 %101
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

declare i32 @opus_select_arch() local_unnamed_addr #2

declare i32 @silk_InitEncoder(i8*, i32, %struct.silk_EncControlStruct*) local_unnamed_addr #2

declare i32 @celt_encoder_init(%struct.OpusCustomEncoder*, i32, i32, i32) local_unnamed_addr #2

declare i32 @opus_custom_encoder_ctl(%struct.OpusCustomEncoder*, i32, ...) local_unnamed_addr #2

declare i32 @silk_lin2log(i32) local_unnamed_addr #2

declare void @tonality_analysis_init(%struct.TonalityAnalysisState*, i32) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden %struct.OpusEncoder* @opus_encoder_create(i32, i32, i32, i32*) local_unnamed_addr #0 {
  %5 = alloca i32, align 4
  switch i32 %0, label %10 [
    i32 48000, label %6
    i32 24000, label %6
    i32 16000, label %6
    i32 12000, label %6
    i32 8000, label %6
  ]

6:                                                ; preds = %4, %4, %4, %4, %4
  %7 = add i32 %1, -1
  %8 = icmp ugt i32 %7, 1
  br i1 %8, label %10, label %9

9:                                                ; preds = %6
  switch i32 %2, label %10 [
    i32 2051, label %13
    i32 2049, label %13
    i32 2048, label %13
  ]

10:                                               ; preds = %9, %4, %6
  %11 = icmp eq i32* %3, null
  br i1 %11, label %41, label %12

12:                                               ; preds = %10
  store i32 -1, i32* %3, align 4
  br label %41

13:                                               ; preds = %9, %9, %9
  %14 = bitcast i32* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %14) #10
  store i32 -1431655766, i32* %5, align 4
  %15 = call i32 @silk_Get_Encoder_Size(i32* nonnull %5) #10
  %16 = icmp eq i32 %15, 0
  br i1 %16, label %17, label %26

17:                                               ; preds = %13
  %18 = load i32, i32* %5, align 4
  %19 = add i32 %18, 7
  %20 = and i32 %19, -8
  store i32 %20, i32* %5, align 4
  %21 = call i32 @celt_encoder_get_size(i32 %1) #10
  %22 = load i32, i32* %5, align 4
  %23 = add i32 %21, 18144
  %24 = add i32 %23, %22
  %25 = sext i32 %24 to i64
  br label %26

26:                                               ; preds = %13, %17
  %27 = phi i64 [ %25, %17 ], [ 0, %13 ]
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %14) #10
  %28 = call noalias i8* @malloc(i64 %27) #10
  %29 = bitcast i8* %28 to %struct.OpusEncoder*
  %30 = icmp eq i8* %28, null
  br i1 %30, label %31, label %34

31:                                               ; preds = %26
  %32 = icmp eq i32* %3, null
  br i1 %32, label %41, label %33

33:                                               ; preds = %31
  store i32 -7, i32* %3, align 4
  br label %41

34:                                               ; preds = %26
  %35 = call i32 @opus_encoder_init(%struct.OpusEncoder* nonnull %29, i32 %0, i32 %1, i32 %2)
  %36 = icmp eq i32* %3, null
  br i1 %36, label %38, label %37

37:                                               ; preds = %34
  store i32 %35, i32* %3, align 4
  br label %38

38:                                               ; preds = %34, %37
  %39 = icmp eq i32 %35, 0
  br i1 %39, label %41, label %40

40:                                               ; preds = %38
  call void @free(i8* nonnull %28) #10
  br label %41

41:                                               ; preds = %40, %38, %33, %31, %12, %10
  %42 = phi %struct.OpusEncoder* [ null, %10 ], [ null, %12 ], [ null, %31 ], [ null, %33 ], [ null, %40 ], [ %29, %38 ]
  ret %struct.OpusEncoder* %42
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @downmix_float(i8* nocapture readonly, float* nocapture, i32, i32, i32, i32, i32) #3 {
  %8 = bitcast i8* %0 to float*
  %9 = icmp sgt i32 %2, 0
  br i1 %9, label %10, label %51

10:                                               ; preds = %7
  %11 = sext i32 %3 to i64
  %12 = sext i32 %6 to i64
  %13 = sext i32 %4 to i64
  %14 = zext i32 %2 to i64
  %15 = and i64 %14, 1
  %16 = icmp eq i32 %2, 1
  br i1 %16, label %40, label %17

17:                                               ; preds = %10
  %18 = sub nsw i64 %14, %15
  br label %19

19:                                               ; preds = %19, %17
  %20 = phi i64 [ 0, %17 ], [ %37, %19 ]
  %21 = phi i64 [ %18, %17 ], [ %38, %19 ]
  %22 = add nsw i64 %20, %11
  %23 = mul nsw i64 %22, %12
  %24 = add nsw i64 %23, %13
  %25 = getelementptr inbounds float, float* %8, i64 %24
  %26 = load float, float* %25, align 4
  %27 = fmul float %26, 3.276800e+04
  %28 = getelementptr inbounds float, float* %1, i64 %20
  store float %27, float* %28, align 4
  %29 = or i64 %20, 1
  %30 = add nsw i64 %29, %11
  %31 = mul nsw i64 %30, %12
  %32 = add nsw i64 %31, %13
  %33 = getelementptr inbounds float, float* %8, i64 %32
  %34 = load float, float* %33, align 4
  %35 = fmul float %34, 3.276800e+04
  %36 = getelementptr inbounds float, float* %1, i64 %29
  store float %35, float* %36, align 4
  %37 = add nuw nsw i64 %20, 2
  %38 = add i64 %21, -2
  %39 = icmp eq i64 %38, 0
  br i1 %39, label %40, label %19

40:                                               ; preds = %19, %10
  %41 = phi i64 [ 0, %10 ], [ %37, %19 ]
  %42 = icmp eq i64 %15, 0
  br i1 %42, label %51, label %43

43:                                               ; preds = %40
  %44 = add nsw i64 %41, %11
  %45 = mul nsw i64 %44, %12
  %46 = add nsw i64 %45, %13
  %47 = getelementptr inbounds float, float* %8, i64 %46
  %48 = load float, float* %47, align 4
  %49 = fmul float %48, 3.276800e+04
  %50 = getelementptr inbounds float, float* %1, i64 %41
  store float %49, float* %50, align 4
  br label %51

51:                                               ; preds = %43, %40, %7
  %52 = icmp sgt i32 %5, -1
  br i1 %52, label %53, label %88

53:                                               ; preds = %51
  br i1 %9, label %54, label %158

54:                                               ; preds = %53
  %55 = sext i32 %3 to i64
  %56 = sext i32 %6 to i64
  %57 = sext i32 %5 to i64
  %58 = zext i32 %2 to i64
  %59 = and i64 %58, 1
  %60 = icmp eq i32 %2, 1
  br i1 %60, label %145, label %61

61:                                               ; preds = %54
  %62 = sub nsw i64 %58, %59
  br label %63

63:                                               ; preds = %63, %61
  %64 = phi i64 [ 0, %61 ], [ %85, %63 ]
  %65 = phi i64 [ %62, %61 ], [ %86, %63 ]
  %66 = add nsw i64 %64, %55
  %67 = mul nsw i64 %66, %56
  %68 = add nsw i64 %67, %57
  %69 = getelementptr inbounds float, float* %8, i64 %68
  %70 = load float, float* %69, align 4
  %71 = fmul float %70, 3.276800e+04
  %72 = getelementptr inbounds float, float* %1, i64 %64
  %73 = load float, float* %72, align 4
  %74 = fadd float %73, %71
  store float %74, float* %72, align 4
  %75 = or i64 %64, 1
  %76 = add nsw i64 %75, %55
  %77 = mul nsw i64 %76, %56
  %78 = add nsw i64 %77, %57
  %79 = getelementptr inbounds float, float* %8, i64 %78
  %80 = load float, float* %79, align 4
  %81 = fmul float %80, 3.276800e+04
  %82 = getelementptr inbounds float, float* %1, i64 %75
  %83 = load float, float* %82, align 4
  %84 = fadd float %83, %81
  store float %84, float* %82, align 4
  %85 = add nuw nsw i64 %64, 2
  %86 = add i64 %65, -2
  %87 = icmp eq i64 %86, 0
  br i1 %87, label %145, label %63

88:                                               ; preds = %51
  %89 = icmp ne i32 %5, -2
  %90 = icmp slt i32 %6, 2
  %91 = or i1 %90, %89
  %92 = xor i1 %9, true
  %93 = or i1 %91, %92
  br i1 %93, label %158, label %94

94:                                               ; preds = %88
  %95 = sext i32 %3 to i64
  %96 = sext i32 %6 to i64
  %97 = zext i32 %6 to i64
  %98 = zext i32 %2 to i64
  %99 = and i64 %98, 1
  %100 = icmp eq i32 %2, 1
  %101 = sub nsw i64 %98, %99
  %102 = icmp eq i64 %99, 0
  br label %103

103:                                              ; preds = %142, %94
  %104 = phi i64 [ 1, %94 ], [ %143, %142 ]
  br i1 %100, label %130, label %105

105:                                              ; preds = %103, %105
  %106 = phi i64 [ %127, %105 ], [ 0, %103 ]
  %107 = phi i64 [ %128, %105 ], [ %101, %103 ]
  %108 = add nsw i64 %106, %95
  %109 = mul nsw i64 %108, %96
  %110 = add nsw i64 %109, %104
  %111 = getelementptr inbounds float, float* %8, i64 %110
  %112 = load float, float* %111, align 4
  %113 = fmul float %112, 3.276800e+04
  %114 = getelementptr inbounds float, float* %1, i64 %106
  %115 = load float, float* %114, align 4
  %116 = fadd float %115, %113
  store float %116, float* %114, align 4
  %117 = or i64 %106, 1
  %118 = add nsw i64 %117, %95
  %119 = mul nsw i64 %118, %96
  %120 = add nsw i64 %119, %104
  %121 = getelementptr inbounds float, float* %8, i64 %120
  %122 = load float, float* %121, align 4
  %123 = fmul float %122, 3.276800e+04
  %124 = getelementptr inbounds float, float* %1, i64 %117
  %125 = load float, float* %124, align 4
  %126 = fadd float %125, %123
  store float %126, float* %124, align 4
  %127 = add nuw nsw i64 %106, 2
  %128 = add i64 %107, -2
  %129 = icmp eq i64 %128, 0
  br i1 %129, label %130, label %105

130:                                              ; preds = %105, %103
  %131 = phi i64 [ 0, %103 ], [ %127, %105 ]
  br i1 %102, label %142, label %132

132:                                              ; preds = %130
  %133 = add nsw i64 %131, %95
  %134 = mul nsw i64 %133, %96
  %135 = add nsw i64 %134, %104
  %136 = getelementptr inbounds float, float* %8, i64 %135
  %137 = load float, float* %136, align 4
  %138 = fmul float %137, 3.276800e+04
  %139 = getelementptr inbounds float, float* %1, i64 %131
  %140 = load float, float* %139, align 4
  %141 = fadd float %140, %138
  store float %141, float* %139, align 4
  br label %142

142:                                              ; preds = %130, %132
  %143 = add nuw nsw i64 %104, 1
  %144 = icmp eq i64 %143, %97
  br i1 %144, label %158, label %103

145:                                              ; preds = %63, %54
  %146 = phi i64 [ 0, %54 ], [ %85, %63 ]
  %147 = icmp eq i64 %59, 0
  br i1 %147, label %158, label %148

148:                                              ; preds = %145
  %149 = add nsw i64 %146, %55
  %150 = mul nsw i64 %149, %56
  %151 = add nsw i64 %150, %57
  %152 = getelementptr inbounds float, float* %8, i64 %151
  %153 = load float, float* %152, align 4
  %154 = fmul float %153, 3.276800e+04
  %155 = getelementptr inbounds float, float* %1, i64 %146
  %156 = load float, float* %155, align 4
  %157 = fadd float %156, %154
  store float %157, float* %155, align 4
  br label %158

158:                                              ; preds = %142, %148, %145, %88, %53
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @downmix_int(i8* nocapture readonly, float* nocapture, i32, i32, i32, i32, i32) #3 {
  %8 = bitcast i8* %0 to i16*
  %9 = icmp sgt i32 %2, 0
  br i1 %9, label %10, label %51

10:                                               ; preds = %7
  %11 = sext i32 %3 to i64
  %12 = sext i32 %6 to i64
  %13 = sext i32 %4 to i64
  %14 = zext i32 %2 to i64
  %15 = and i64 %14, 1
  %16 = icmp eq i32 %2, 1
  br i1 %16, label %40, label %17

17:                                               ; preds = %10
  %18 = sub nsw i64 %14, %15
  br label %19

19:                                               ; preds = %19, %17
  %20 = phi i64 [ 0, %17 ], [ %37, %19 ]
  %21 = phi i64 [ %18, %17 ], [ %38, %19 ]
  %22 = add nsw i64 %20, %11
  %23 = mul nsw i64 %22, %12
  %24 = add nsw i64 %23, %13
  %25 = getelementptr inbounds i16, i16* %8, i64 %24
  %26 = load i16, i16* %25, align 2
  %27 = sitofp i16 %26 to float
  %28 = getelementptr inbounds float, float* %1, i64 %20
  store float %27, float* %28, align 4
  %29 = or i64 %20, 1
  %30 = add nsw i64 %29, %11
  %31 = mul nsw i64 %30, %12
  %32 = add nsw i64 %31, %13
  %33 = getelementptr inbounds i16, i16* %8, i64 %32
  %34 = load i16, i16* %33, align 2
  %35 = sitofp i16 %34 to float
  %36 = getelementptr inbounds float, float* %1, i64 %29
  store float %35, float* %36, align 4
  %37 = add nuw nsw i64 %20, 2
  %38 = add i64 %21, -2
  %39 = icmp eq i64 %38, 0
  br i1 %39, label %40, label %19

40:                                               ; preds = %19, %10
  %41 = phi i64 [ 0, %10 ], [ %37, %19 ]
  %42 = icmp eq i64 %15, 0
  br i1 %42, label %51, label %43

43:                                               ; preds = %40
  %44 = add nsw i64 %41, %11
  %45 = mul nsw i64 %44, %12
  %46 = add nsw i64 %45, %13
  %47 = getelementptr inbounds i16, i16* %8, i64 %46
  %48 = load i16, i16* %47, align 2
  %49 = sitofp i16 %48 to float
  %50 = getelementptr inbounds float, float* %1, i64 %41
  store float %49, float* %50, align 4
  br label %51

51:                                               ; preds = %43, %40, %7
  %52 = icmp sgt i32 %5, -1
  br i1 %52, label %53, label %88

53:                                               ; preds = %51
  br i1 %9, label %54, label %158

54:                                               ; preds = %53
  %55 = sext i32 %3 to i64
  %56 = sext i32 %6 to i64
  %57 = sext i32 %5 to i64
  %58 = zext i32 %2 to i64
  %59 = and i64 %58, 1
  %60 = icmp eq i32 %2, 1
  br i1 %60, label %145, label %61

61:                                               ; preds = %54
  %62 = sub nsw i64 %58, %59
  br label %63

63:                                               ; preds = %63, %61
  %64 = phi i64 [ 0, %61 ], [ %85, %63 ]
  %65 = phi i64 [ %62, %61 ], [ %86, %63 ]
  %66 = add nsw i64 %64, %55
  %67 = mul nsw i64 %66, %56
  %68 = add nsw i64 %67, %57
  %69 = getelementptr inbounds i16, i16* %8, i64 %68
  %70 = load i16, i16* %69, align 2
  %71 = sitofp i16 %70 to float
  %72 = getelementptr inbounds float, float* %1, i64 %64
  %73 = load float, float* %72, align 4
  %74 = fadd float %73, %71
  store float %74, float* %72, align 4
  %75 = or i64 %64, 1
  %76 = add nsw i64 %75, %55
  %77 = mul nsw i64 %76, %56
  %78 = add nsw i64 %77, %57
  %79 = getelementptr inbounds i16, i16* %8, i64 %78
  %80 = load i16, i16* %79, align 2
  %81 = sitofp i16 %80 to float
  %82 = getelementptr inbounds float, float* %1, i64 %75
  %83 = load float, float* %82, align 4
  %84 = fadd float %83, %81
  store float %84, float* %82, align 4
  %85 = add nuw nsw i64 %64, 2
  %86 = add i64 %65, -2
  %87 = icmp eq i64 %86, 0
  br i1 %87, label %145, label %63

88:                                               ; preds = %51
  %89 = icmp ne i32 %5, -2
  %90 = icmp slt i32 %6, 2
  %91 = or i1 %90, %89
  %92 = xor i1 %9, true
  %93 = or i1 %91, %92
  br i1 %93, label %158, label %94

94:                                               ; preds = %88
  %95 = sext i32 %3 to i64
  %96 = sext i32 %6 to i64
  %97 = zext i32 %6 to i64
  %98 = zext i32 %2 to i64
  %99 = and i64 %98, 1
  %100 = icmp eq i32 %2, 1
  %101 = sub nsw i64 %98, %99
  %102 = icmp eq i64 %99, 0
  br label %103

103:                                              ; preds = %142, %94
  %104 = phi i64 [ 1, %94 ], [ %143, %142 ]
  br i1 %100, label %130, label %105

105:                                              ; preds = %103, %105
  %106 = phi i64 [ %127, %105 ], [ 0, %103 ]
  %107 = phi i64 [ %128, %105 ], [ %101, %103 ]
  %108 = add nsw i64 %106, %95
  %109 = mul nsw i64 %108, %96
  %110 = add nsw i64 %109, %104
  %111 = getelementptr inbounds i16, i16* %8, i64 %110
  %112 = load i16, i16* %111, align 2
  %113 = sitofp i16 %112 to float
  %114 = getelementptr inbounds float, float* %1, i64 %106
  %115 = load float, float* %114, align 4
  %116 = fadd float %115, %113
  store float %116, float* %114, align 4
  %117 = or i64 %106, 1
  %118 = add nsw i64 %117, %95
  %119 = mul nsw i64 %118, %96
  %120 = add nsw i64 %119, %104
  %121 = getelementptr inbounds i16, i16* %8, i64 %120
  %122 = load i16, i16* %121, align 2
  %123 = sitofp i16 %122 to float
  %124 = getelementptr inbounds float, float* %1, i64 %117
  %125 = load float, float* %124, align 4
  %126 = fadd float %125, %123
  store float %126, float* %124, align 4
  %127 = add nuw nsw i64 %106, 2
  %128 = add i64 %107, -2
  %129 = icmp eq i64 %128, 0
  br i1 %129, label %130, label %105

130:                                              ; preds = %105, %103
  %131 = phi i64 [ 0, %103 ], [ %127, %105 ]
  br i1 %102, label %142, label %132

132:                                              ; preds = %130
  %133 = add nsw i64 %131, %95
  %134 = mul nsw i64 %133, %96
  %135 = add nsw i64 %134, %104
  %136 = getelementptr inbounds i16, i16* %8, i64 %135
  %137 = load i16, i16* %136, align 2
  %138 = sitofp i16 %137 to float
  %139 = getelementptr inbounds float, float* %1, i64 %131
  %140 = load float, float* %139, align 4
  %141 = fadd float %140, %138
  store float %141, float* %139, align 4
  br label %142

142:                                              ; preds = %130, %132
  %143 = add nuw nsw i64 %104, 1
  %144 = icmp eq i64 %143, %97
  br i1 %144, label %158, label %103

145:                                              ; preds = %63, %54
  %146 = phi i64 [ 0, %54 ], [ %85, %63 ]
  %147 = icmp eq i64 %59, 0
  br i1 %147, label %158, label %148

148:                                              ; preds = %145
  %149 = add nsw i64 %146, %55
  %150 = mul nsw i64 %149, %56
  %151 = add nsw i64 %150, %57
  %152 = getelementptr inbounds i16, i16* %8, i64 %151
  %153 = load i16, i16* %152, align 2
  %154 = sitofp i16 %153 to float
  %155 = getelementptr inbounds float, float* %1, i64 %146
  %156 = load float, float* %155, align 4
  %157 = fadd float %156, %154
  store float %157, float* %155, align 4
  br label %158

158:                                              ; preds = %142, %148, %145, %88, %53
  ret void
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden i32 @frame_size_select(i32, i32, i32) local_unnamed_addr #4 {
  %4 = sdiv i32 %2, 400
  %5 = icmp sgt i32 %4, %0
  br i1 %5, label %51, label %6

6:                                                ; preds = %3
  %7 = icmp eq i32 %1, 5000
  br i1 %7, label %22, label %8

8:                                                ; preds = %6
  %9 = add i32 %1, -5001
  %10 = icmp ult i32 %9, 9
  br i1 %10, label %11, label %51

11:                                               ; preds = %8
  %12 = icmp slt i32 %1, 5006
  br i1 %12, label %13, label %15

13:                                               ; preds = %11
  %14 = shl i32 %4, %9
  br label %19

15:                                               ; preds = %11
  %16 = add nsw i32 %1, -5003
  %17 = mul nsw i32 %16, %2
  %18 = sdiv i32 %17, 50
  br label %19

19:                                               ; preds = %15, %13
  %20 = phi i32 [ %14, %13 ], [ %18, %15 ]
  %21 = icmp sgt i32 %20, %0
  br i1 %21, label %51, label %22

22:                                               ; preds = %6, %19
  %23 = phi i32 [ %20, %19 ], [ %0, %6 ]
  %24 = mul nsw i32 %23, 400
  %25 = icmp eq i32 %24, %2
  %26 = mul nsw i32 %23, 200
  %27 = icmp eq i32 %26, %2
  %28 = or i1 %25, %27
  %29 = mul nsw i32 %23, 100
  %30 = icmp eq i32 %29, %2
  %31 = or i1 %30, %28
  br i1 %31, label %50, label %32

32:                                               ; preds = %22
  %33 = mul nsw i32 %23, 50
  %34 = icmp eq i32 %33, %2
  %35 = mul nsw i32 %23, 25
  %36 = icmp eq i32 %35, %2
  %37 = or i1 %34, %36
  %38 = mul nsw i32 %2, 3
  %39 = icmp eq i32 %33, %38
  %40 = or i1 %39, %37
  %41 = shl nsw i32 %2, 2
  %42 = icmp eq i32 %33, %41
  %43 = or i1 %42, %40
  %44 = mul nsw i32 %2, 5
  %45 = icmp eq i32 %33, %44
  %46 = or i1 %45, %43
  %47 = mul nsw i32 %2, 6
  %48 = icmp eq i32 %33, %47
  %49 = or i1 %48, %46
  br i1 %49, label %50, label %51

50:                                               ; preds = %32, %22
  br label %51

51:                                               ; preds = %32, %19, %8, %3, %50
  %52 = phi i32 [ %23, %50 ], [ -1, %3 ], [ -1, %8 ], [ -1, %19 ], [ -1, %32 ]
  ret i32 %52
}

; Function Attrs: nounwind ssp uwtable
define hidden float @compute_stereo_width(float* nocapture readonly, i32, i32, %struct.StereoWidthState* nocapture) local_unnamed_addr #0 {
  %5 = sdiv i32 %2, %1
  %6 = icmp sgt i32 %5, 50
  %7 = select i1 %6, i32 %5, i32 50
  %8 = sitofp i32 %7 to float
  %9 = fdiv float 2.500000e+01, %8
  %10 = fsub float 1.000000e+00, %9
  %11 = add nsw i32 %1, -3
  %12 = icmp sgt i32 %11, 0
  br i1 %12, label %13, label %64

13:                                               ; preds = %4
  %14 = sext i32 %11 to i64
  br label %15

15:                                               ; preds = %13, %15
  %16 = phi i64 [ 0, %13 ], [ %59, %15 ]
  %17 = phi float [ 0.000000e+00, %13 ], [ %57, %15 ]
  %18 = phi <2 x float> [ zeroinitializer, %13 ], [ %58, %15 ]
  %19 = shl nuw nsw i64 %16, 1
  %20 = getelementptr inbounds float, float* %0, i64 %19
  %21 = bitcast float* %20 to <2 x float>*
  %22 = load <2 x float>, <2 x float>* %21, align 4
  %23 = extractelement <2 x float> %22, i32 0
  %24 = extractelement <2 x float> %22, i32 1
  %25 = fmul float %23, %24
  %26 = fmul <2 x float> %22, %22
  %27 = or i64 %19, 2
  %28 = getelementptr inbounds float, float* %0, i64 %27
  %29 = bitcast float* %28 to <2 x float>*
  %30 = load <2 x float>, <2 x float>* %29, align 4
  %31 = extractelement <2 x float> %30, i32 0
  %32 = extractelement <2 x float> %30, i32 1
  %33 = fmul float %31, %32
  %34 = fadd float %25, %33
  %35 = fmul <2 x float> %30, %30
  %36 = fadd <2 x float> %26, %35
  %37 = or i64 %19, 4
  %38 = getelementptr inbounds float, float* %0, i64 %37
  %39 = bitcast float* %38 to <2 x float>*
  %40 = load <2 x float>, <2 x float>* %39, align 4
  %41 = extractelement <2 x float> %40, i32 0
  %42 = extractelement <2 x float> %40, i32 1
  %43 = fmul float %41, %42
  %44 = fadd float %34, %43
  %45 = fmul <2 x float> %40, %40
  %46 = fadd <2 x float> %36, %45
  %47 = or i64 %19, 6
  %48 = getelementptr inbounds float, float* %0, i64 %47
  %49 = bitcast float* %48 to <2 x float>*
  %50 = load <2 x float>, <2 x float>* %49, align 4
  %51 = extractelement <2 x float> %50, i32 0
  %52 = extractelement <2 x float> %50, i32 1
  %53 = fmul float %51, %52
  %54 = fadd float %44, %53
  %55 = fmul <2 x float> %50, %50
  %56 = fadd <2 x float> %46, %55
  %57 = fadd float %17, %54
  %58 = fadd <2 x float> %18, %56
  %59 = add nuw nsw i64 %16, 4
  %60 = icmp slt i64 %59, %14
  br i1 %60, label %15, label %61

61:                                               ; preds = %15
  %62 = extractelement <2 x float> %58, i32 0
  %63 = fcmp olt float %62, 1.000000e+09
  br i1 %63, label %64, label %72

64:                                               ; preds = %4, %61
  %65 = phi float [ %57, %61 ], [ 0.000000e+00, %4 ]
  %66 = phi <2 x float> [ %58, %61 ], [ zeroinitializer, %4 ]
  %67 = extractelement <2 x float> %66, i32 1
  %68 = fcmp uge float %67, 1.000000e+09
  %69 = extractelement <2 x float> %66, i32 0
  %70 = fcmp uno float %67, %69
  %71 = or i1 %68, %70
  br i1 %71, label %72, label %73

72:                                               ; preds = %64, %61
  br label %73

73:                                               ; preds = %64, %72
  %74 = phi float [ 0.000000e+00, %72 ], [ %65, %64 ]
  %75 = phi <2 x float> [ zeroinitializer, %72 ], [ %66, %64 ]
  %76 = getelementptr inbounds %struct.StereoWidthState, %struct.StereoWidthState* %3, i64 0, i32 0
  %77 = load float, float* %76, align 4
  %78 = getelementptr inbounds %struct.StereoWidthState, %struct.StereoWidthState* %3, i64 0, i32 1
  %79 = load float, float* %78, align 4
  %80 = fsub float %74, %79
  %81 = fmul float %10, %80
  %82 = fadd float %79, %81
  %83 = getelementptr inbounds %struct.StereoWidthState, %struct.StereoWidthState* %3, i64 0, i32 2
  %84 = load float, float* %83, align 4
  %85 = insertelement <2 x float> undef, float %77, i32 0
  %86 = insertelement <2 x float> %85, float %84, i32 1
  %87 = fsub <2 x float> %75, %86
  %88 = insertelement <2 x float> undef, float %10, i32 0
  %89 = shufflevector <2 x float> %88, <2 x float> undef, <2 x i32> zeroinitializer
  %90 = fmul <2 x float> %89, %87
  %91 = fadd <2 x float> %86, %90
  %92 = fcmp olt <2 x float> %91, zeroinitializer
  %93 = select <2 x i1> %92, <2 x float> zeroinitializer, <2 x float> %91
  %94 = extractelement <2 x float> %93, i32 0
  store float %94, float* %76, align 4
  %95 = fcmp olt float %82, 0.000000e+00
  %96 = select i1 %95, float 0.000000e+00, float %82
  store float %96, float* %78, align 4
  %97 = extractelement <2 x float> %93, i32 1
  store float %97, float* %83, align 4
  %98 = fcmp ogt float %94, %97
  %99 = select i1 %98, float %94, float %97
  %100 = fcmp ogt float %99, 0x3F4A36E2E0000000
  br i1 %100, label %104, label %101

101:                                              ; preds = %73
  %102 = getelementptr inbounds %struct.StereoWidthState, %struct.StereoWidthState* %3, i64 0, i32 4
  %103 = load float, float* %102, align 4
  br label %142

104:                                              ; preds = %73
  %105 = tail call float @sqrtf(float %94) #8
  %106 = load float, float* %83, align 4
  %107 = tail call float @sqrtf(float %106) #8
  %108 = tail call float @sqrtf(float %105) #8
  %109 = tail call float @sqrtf(float %107) #8
  %110 = load float, float* %78, align 4
  %111 = fmul float %105, %107
  %112 = fcmp olt float %110, %111
  %113 = select i1 %112, float %110, float %111
  store float %113, float* %78, align 4
  %114 = fadd float %111, 0x3CD203AFA0000000
  %115 = fdiv float %113, %114
  %116 = fsub float %108, %109
  %117 = tail call float @llvm.fabs.f32(float %116)
  %118 = fadd float %108, 0x3CD203AFA0000000
  %119 = fadd float %118, %109
  %120 = fdiv float %117, %119
  %121 = fmul float %115, %115
  %122 = fsub float 1.000000e+00, %121
  %123 = tail call float @sqrtf(float %122) #8
  %124 = fmul float %123, %120
  %125 = getelementptr inbounds %struct.StereoWidthState, %struct.StereoWidthState* %3, i64 0, i32 3
  %126 = getelementptr inbounds %struct.StereoWidthState, %struct.StereoWidthState* %3, i64 0, i32 4
  %127 = bitcast float* %125 to <2 x float>*
  %128 = load <2 x float>, <2 x float>* %127, align 4
  %129 = extractelement <2 x float> %128, i32 0
  %130 = fsub float %124, %129
  %131 = sitofp i32 %5 to float
  %132 = insertelement <2 x float> <float undef, float 0x3F947AE140000000>, float %130, i32 0
  %133 = insertelement <2 x float> undef, float %131, i32 0
  %134 = shufflevector <2 x float> %133, <2 x float> undef, <2 x i32> zeroinitializer
  %135 = fdiv <2 x float> %132, %134
  %136 = fadd <2 x float> %128, %135
  %137 = fsub <2 x float> %128, %135
  %138 = extractelement <2 x float> %136, i32 0
  store float %138, float* %125, align 4
  %139 = extractelement <2 x float> %137, i32 1
  %140 = fcmp ogt float %139, %138
  %141 = select i1 %140, float %139, float %138
  store float %141, float* %126, align 4
  br label %142

142:                                              ; preds = %101, %104
  %143 = phi float [ %103, %101 ], [ %141, %104 ]
  %144 = fmul float %143, 2.000000e+01
  %145 = fcmp ogt float %144, 1.000000e+00
  %146 = select i1 %145, float 1.000000e+00, float %144
  ret float %146
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden i32 @is_digital_silence(float* nocapture readonly, i32, i32, i32) local_unnamed_addr #5 {
  %5 = mul nsw i32 %2, %1
  %6 = icmp sgt i32 %5, 0
  br i1 %6, label %7, label %70

7:                                                ; preds = %4
  %8 = zext i32 %5 to i64
  %9 = add nsw i64 %8, -1
  %10 = and i64 %8, 3
  %11 = icmp ult i64 %9, 3
  br i1 %11, label %49, label %12

12:                                               ; preds = %7
  %13 = sub nsw i64 %8, %10
  br label %14

14:                                               ; preds = %14, %12
  %15 = phi i64 [ 0, %12 ], [ %46, %14 ]
  %16 = phi float [ 0.000000e+00, %12 ], [ %45, %14 ]
  %17 = phi float [ 0.000000e+00, %12 ], [ %43, %14 ]
  %18 = phi i64 [ %13, %12 ], [ %47, %14 ]
  %19 = getelementptr inbounds float, float* %0, i64 %15
  %20 = load float, float* %19, align 4
  %21 = fcmp ogt float %17, %20
  %22 = select i1 %21, float %17, float %20
  %23 = fcmp olt float %16, %20
  %24 = select i1 %23, float %16, float %20
  %25 = or i64 %15, 1
  %26 = getelementptr inbounds float, float* %0, i64 %25
  %27 = load float, float* %26, align 4
  %28 = fcmp ogt float %22, %27
  %29 = select i1 %28, float %22, float %27
  %30 = fcmp olt float %24, %27
  %31 = select i1 %30, float %24, float %27
  %32 = or i64 %15, 2
  %33 = getelementptr inbounds float, float* %0, i64 %32
  %34 = load float, float* %33, align 4
  %35 = fcmp ogt float %29, %34
  %36 = select i1 %35, float %29, float %34
  %37 = fcmp olt float %31, %34
  %38 = select i1 %37, float %31, float %34
  %39 = or i64 %15, 3
  %40 = getelementptr inbounds float, float* %0, i64 %39
  %41 = load float, float* %40, align 4
  %42 = fcmp ogt float %36, %41
  %43 = select i1 %42, float %36, float %41
  %44 = fcmp olt float %38, %41
  %45 = select i1 %44, float %38, float %41
  %46 = add nuw nsw i64 %15, 4
  %47 = add i64 %18, -4
  %48 = icmp eq i64 %47, 0
  br i1 %48, label %49, label %14

49:                                               ; preds = %14, %7
  %50 = phi float [ undef, %7 ], [ %43, %14 ]
  %51 = phi float [ undef, %7 ], [ %45, %14 ]
  %52 = phi i64 [ 0, %7 ], [ %46, %14 ]
  %53 = phi float [ 0.000000e+00, %7 ], [ %45, %14 ]
  %54 = phi float [ 0.000000e+00, %7 ], [ %43, %14 ]
  %55 = icmp eq i64 %10, 0
  br i1 %55, label %70, label %56

56:                                               ; preds = %49, %56
  %57 = phi i64 [ %67, %56 ], [ %52, %49 ]
  %58 = phi float [ %66, %56 ], [ %53, %49 ]
  %59 = phi float [ %64, %56 ], [ %54, %49 ]
  %60 = phi i64 [ %68, %56 ], [ %10, %49 ]
  %61 = getelementptr inbounds float, float* %0, i64 %57
  %62 = load float, float* %61, align 4
  %63 = fcmp ogt float %59, %62
  %64 = select i1 %63, float %59, float %62
  %65 = fcmp olt float %58, %62
  %66 = select i1 %65, float %58, float %62
  %67 = add nuw nsw i64 %57, 1
  %68 = add i64 %60, -1
  %69 = icmp eq i64 %68, 0
  br i1 %69, label %70, label %56, !llvm.loop !2

70:                                               ; preds = %49, %56, %4
  %71 = phi float [ 0.000000e+00, %4 ], [ %50, %49 ], [ %64, %56 ]
  %72 = phi float [ 0.000000e+00, %4 ], [ %51, %49 ], [ %66, %56 ]
  %73 = fsub float -0.000000e+00, %72
  %74 = fcmp ogt float %71, %73
  %75 = select i1 %74, float %71, float %73
  %76 = shl i32 1, %3
  %77 = sitofp i32 %76 to float
  %78 = fdiv float 1.000000e+00, %77
  %79 = fcmp ole float %75, %78
  %80 = zext i1 %79 to i32
  ret i32 %80
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @opus_encode_native(%struct.OpusEncoder*, float*, i32, i8*, i32, i32, i8*, i32, i32, i32, i32, void (i8*, float*, i32, i32, i32, i32, i32)*, i32) local_unnamed_addr #6 {
  %14 = alloca i32, align 4
  %15 = alloca %struct.ec_ctx, align 8
  %16 = alloca i32, align 4
  %17 = alloca %struct.OpusCustomMode*, align 8
  %18 = alloca %struct.AnalysisInfo, align 4
  %19 = alloca %struct.silk_EncControlStruct, align 4
  %20 = alloca i32, align 4
  %21 = alloca %struct.SILKInfo, align 4
  %22 = alloca [2 x i8], align 1
  %23 = alloca [2 x i8], align 1
  %24 = bitcast i32* %14 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %24) #10
  store i32 -1431655766, i32* %14, align 4
  %25 = bitcast %struct.ec_ctx* %15 to i8*
  call void @llvm.lifetime.start.p0i8(i64 56, i8* nonnull %25) #10
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %25, i8 -86, i64 56, i1 false)
  %26 = bitcast i32* %16 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %26) #10
  store i32 0, i32* %16, align 4
  %27 = bitcast %struct.OpusCustomMode** %17 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %27) #10
  store %struct.OpusCustomMode* inttoptr (i64 -6148914691236517206 to %struct.OpusCustomMode*), %struct.OpusCustomMode** %17, align 8
  %28 = bitcast %struct.AnalysisInfo* %18 to i8*
  call void @llvm.lifetime.start.p0i8(i64 64, i8* nonnull %28) #10
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %28, i8* align 4 bitcast ({ i32, float, float, float, float, float, float, float, i32, float, float, [19 x i8], [1 x i8] }* @__const.opus_encode_native.analysis_info to i8*), i64 64, i1 false)
  %29 = icmp slt i32 %4, 1276
  %30 = select i1 %29, i32 %4, i32 1276
  %31 = getelementptr inbounds %struct.OpusEncoder, %struct.OpusEncoder* %0, i64 0, i32 44
  store i32 0, i32* %31, align 4
  %32 = icmp slt i32 %2, 1
  %33 = icmp slt i32 %30, 1
  %34 = or i1 %32, %33
  br i1 %34, label %2820, label %35

35:                                               ; preds = %13
  %36 = icmp eq i32 %30, 1
  br i1 %36, label %37, label %42

37:                                               ; preds = %35
  %38 = getelementptr inbounds %struct.OpusEncoder, %struct.OpusEncoder* %0, i64 0, i32 12
  %39 = load i32, i32* %38, align 8
  %40 = mul nsw i32 %2, 10
  %41 = icmp eq i32 %39, %40
  br i1 %41, label %2820, label %42

42:                                               ; preds = %37, %35
  %43 = bitcast %struct.OpusEncoder* %0 to i8*
  %44 = getelementptr inbounds %struct.OpusEncoder, %struct.OpusEncoder* %0, i64 0, i32 1
  %45 = load i32, i32* %44, align 4
  %46 = sext i32 %45 to i64
  %47 = getelementptr inbounds i8, i8* %43, i64 %46
  %48 = getelementptr inbounds %struct.OpusEncoder, %struct.OpusEncoder* %0, i64 0, i32 0
  %49 = load i32, i32* %48, align 8
  %50 = sext i32 %49 to i64
  %51 = getelementptr inbounds i8, i8* %43, i64 %50
  %52 = bitcast i8* %51 to %struct.OpusCustomEncoder*
  %53 = getelementptr inbounds %struct.OpusEncoder, %struct.OpusEncoder* %0, i64 0, i32 3
  %54 = load i32, i32* %53, align 4
  %55 = icmp eq i32 %54, 2051
  br i1 %55, label %59, label %56

56:                                               ; preds = %42
  %57 = getelementptr inbounds %struct.OpusEncoder, %struct.OpusEncoder* %0, i64 0, i32 5
  %58 = load i32, i32* %57, align 4
  br label %59

59:                                               ; preds = %42, %56
  %60 = phi i32 [ %58, %56 ], [ 0, %42 ]
  %61 = getelementptr inbounds %struct.OpusEncoder, %struct.OpusEncoder* %0, i64 0, i32 18
  %62 = load i32, i32* %61, align 8
  %63 = icmp sgt i32 %62, %5
  %64 = select i1 %63, i32 %5, i32 %62
  %65 = call i32 (%struct.OpusCustomEncoder*, i32, ...) @opus_custom_encoder_ctl(%struct.OpusCustomEncoder* %52, i32 10015, %struct.OpusCustomMode** nonnull %17) #10
  %66 = getelementptr inbounds %struct.AnalysisInfo, %struct.AnalysisInfo* %18, i64 0, i32 0
  store i32 0, i32* %66, align 4
  %67 = getelementptr inbounds %struct.OpusEncoder, %struct.OpusEncoder* %0, i64 0, i32 2
  %68 = getelementptr inbounds %struct.OpusEncoder, %struct.OpusEncoder* %0, i64 0, i32 2, i32 9
  %69 = load i32, i32* %68, align 4
  %70 = icmp sgt i32 %69, 6
  br i1 %70, label %71, label %184

71:                                               ; preds = %59
  %72 = getelementptr inbounds %struct.OpusEncoder, %struct.OpusEncoder* %0, i64 0, i32 12
  %73 = load i32, i32* %72, align 8
  %74 = icmp sgt i32 %73, 15999
  br i1 %74, label %75, label %184

75:                                               ; preds = %71
  %76 = getelementptr inbounds %struct.OpusEncoder, %struct.OpusEncoder* %0, i64 0, i32 4
  %77 = load i32, i32* %76, align 8
  %78 = mul nsw i32 %77, %2
  %79 = icmp sgt i32 %78, 0
  br i1 %79, label %80, label %143

80:                                               ; preds = %75
  %81 = zext i32 %78 to i64
  %82 = add nsw i64 %81, -1
  %83 = and i64 %81, 3
  %84 = icmp ult i64 %82, 3
  br i1 %84, label %122, label %85

85:                                               ; preds = %80
  %86 = sub nsw i64 %81, %83
  br label %87

87:                                               ; preds = %87, %85
  %88 = phi i64 [ 0, %85 ], [ %119, %87 ]
  %89 = phi float [ 0.000000e+00, %85 ], [ %118, %87 ]
  %90 = phi float [ 0.000000e+00, %85 ], [ %116, %87 ]
  %91 = phi i64 [ %86, %85 ], [ %120, %87 ]
  %92 = getelementptr inbounds float, float* %1, i64 %88
  %93 = load float, float* %92, align 4
  %94 = fcmp ogt float %90, %93
  %95 = select i1 %94, float %90, float %93
  %96 = fcmp olt float %89, %93
  %97 = select i1 %96, float %89, float %93
  %98 = or i64 %88, 1
  %99 = getelementptr inbounds float, float* %1, i64 %98
  %100 = load float, float* %99, align 4
  %101 = fcmp ogt float %95, %100
  %102 = select i1 %101, float %95, float %100
  %103 = fcmp olt float %97, %100
  %104 = select i1 %103, float %97, float %100
  %105 = or i64 %88, 2
  %106 = getelementptr inbounds float, float* %1, i64 %105
  %107 = load float, float* %106, align 4
  %108 = fcmp ogt float %102, %107
  %109 = select i1 %108, float %102, float %107
  %110 = fcmp olt float %104, %107
  %111 = select i1 %110, float %104, float %107
  %112 = or i64 %88, 3
  %113 = getelementptr inbounds float, float* %1, i64 %112
  %114 = load float, float* %113, align 4
  %115 = fcmp ogt float %109, %114
  %116 = select i1 %115, float %109, float %114
  %117 = fcmp olt float %111, %114
  %118 = select i1 %117, float %111, float %114
  %119 = add nuw nsw i64 %88, 4
  %120 = add i64 %91, -4
  %121 = icmp eq i64 %120, 0
  br i1 %121, label %122, label %87

122:                                              ; preds = %87, %80
  %123 = phi float [ undef, %80 ], [ %116, %87 ]
  %124 = phi float [ undef, %80 ], [ %118, %87 ]
  %125 = phi i64 [ 0, %80 ], [ %119, %87 ]
  %126 = phi float [ 0.000000e+00, %80 ], [ %118, %87 ]
  %127 = phi float [ 0.000000e+00, %80 ], [ %116, %87 ]
  %128 = icmp eq i64 %83, 0
  br i1 %128, label %143, label %129

129:                                              ; preds = %122, %129
  %130 = phi i64 [ %140, %129 ], [ %125, %122 ]
  %131 = phi float [ %139, %129 ], [ %126, %122 ]
  %132 = phi float [ %137, %129 ], [ %127, %122 ]
  %133 = phi i64 [ %141, %129 ], [ %83, %122 ]
  %134 = getelementptr inbounds float, float* %1, i64 %130
  %135 = load float, float* %134, align 4
  %136 = fcmp ogt float %132, %135
  %137 = select i1 %136, float %132, float %135
  %138 = fcmp olt float %131, %135
  %139 = select i1 %138, float %131, float %135
  %140 = add nuw nsw i64 %130, 1
  %141 = add i64 %133, -1
  %142 = icmp eq i64 %141, 0
  br i1 %142, label %143, label %129, !llvm.loop !4

143:                                              ; preds = %122, %129, %75
  %144 = phi float [ 0.000000e+00, %75 ], [ %123, %122 ], [ %137, %129 ]
  %145 = phi float [ 0.000000e+00, %75 ], [ %124, %122 ], [ %139, %129 ]
  %146 = fsub float -0.000000e+00, %145
  %147 = fcmp ogt float %144, %146
  %148 = select i1 %147, float %144, float %146
  %149 = shl i32 1, %64
  %150 = sitofp i32 %149 to float
  %151 = fdiv float 1.000000e+00, %150
  %152 = fcmp ugt float %148, %151
  %153 = getelementptr inbounds %struct.OpusEncoder, %struct.OpusEncoder* %0, i64 0, i32 23
  %154 = getelementptr inbounds %struct.OpusEncoder, %struct.OpusEncoder* %0, i64 0, i32 23, i32 25
  %155 = load i32, i32* %154, align 4
  %156 = getelementptr inbounds %struct.OpusEncoder, %struct.OpusEncoder* %0, i64 0, i32 23, i32 26
  %157 = load i32, i32* %156, align 4
  %158 = load %struct.OpusCustomMode*, %struct.OpusCustomMode** %17, align 8
  call void @run_analysis(%struct.TonalityAnalysisState* %153, %struct.OpusCustomMode* %158, i8* %6, i32 %7, i32 %2, i32 %8, i32 %9, i32 %10, i32 %73, i32 %64, void (i8*, float*, i32, i32, i32, i32, i32)* %11, %struct.AnalysisInfo* nonnull %18) #10
  br i1 %152, label %159, label %214

159:                                              ; preds = %143
  %160 = getelementptr inbounds %struct.AnalysisInfo, %struct.AnalysisInfo* %18, i64 0, i32 9
  %161 = load float, float* %160, align 4
  %162 = fcmp ogt float %161, 0x3FB99999A0000000
  br i1 %162, label %163, label %190

163:                                              ; preds = %159
  %164 = getelementptr inbounds %struct.OpusEncoder, %struct.OpusEncoder* %0, i64 0, i32 42
  %165 = load float, float* %164, align 4
  %166 = fmul float %165, 0x3FEFF7CEE0000000
  %167 = load i32, i32* %76, align 8
  %168 = mul nsw i32 %167, %2
  %169 = call float @celt_inner_prod_sse(float* %1, float* %1, i32 %168) #10
  %170 = sitofp i32 %168 to float
  %171 = fdiv float %169, %170
  %172 = fcmp ogt float %166, %171
  br i1 %172, label %173, label %176

173:                                              ; preds = %163
  %174 = load float, float* %164, align 4
  %175 = fmul float %174, 0x3FEFF7CEE0000000
  br label %182

176:                                              ; preds = %163
  %177 = load i32, i32* %76, align 8
  %178 = mul nsw i32 %177, %2
  %179 = call float @celt_inner_prod_sse(float* %1, float* %1, i32 %178) #10
  %180 = sitofp i32 %178 to float
  %181 = fdiv float %179, %180
  br label %182

182:                                              ; preds = %176, %173
  %183 = phi float [ %175, %173 ], [ %181, %176 ]
  store float %183, float* %164, align 4
  br label %190

184:                                              ; preds = %71, %59
  %185 = getelementptr inbounds %struct.OpusEncoder, %struct.OpusEncoder* %0, i64 0, i32 23, i32 28
  %186 = load i32, i32* %185, align 4
  %187 = icmp eq i32 %186, 0
  br i1 %187, label %190, label %188

188:                                              ; preds = %184
  %189 = getelementptr inbounds %struct.OpusEncoder, %struct.OpusEncoder* %0, i64 0, i32 23
  call void @tonality_analysis_reset(%struct.TonalityAnalysisState* %189) #10
  br label %190

190:                                              ; preds = %182, %159, %188, %184
  %191 = phi i32 [ -1, %184 ], [ -1, %188 ], [ %155, %159 ], [ %155, %182 ]
  %192 = phi i32 [ -1, %184 ], [ -1, %188 ], [ %157, %159 ], [ %157, %182 ]
  %193 = getelementptr inbounds %struct.OpusEncoder, %struct.OpusEncoder* %0, i64 0, i32 11
  store i32 -1, i32* %193, align 4
  %194 = load i32, i32* %66, align 4
  %195 = icmp eq i32 %194, 0
  br i1 %195, label %196, label %198

196:                                              ; preds = %190
  %197 = getelementptr inbounds %struct.OpusEncoder, %struct.OpusEncoder* %0, i64 0, i32 40
  store i32 0, i32* %197, align 4
  br label %260

198:                                              ; preds = %190
  %199 = getelementptr inbounds %struct.AnalysisInfo, %struct.AnalysisInfo* %18, i64 0, i32 9
  %200 = load float, float* %199, align 4
  %201 = fcmp ult float %200, 0x3FB99999A0000000
  br i1 %201, label %202, label %214

202:                                              ; preds = %198
  %203 = getelementptr inbounds %struct.OpusEncoder, %struct.OpusEncoder* %0, i64 0, i32 4
  %204 = load i32, i32* %203, align 8
  %205 = mul nsw i32 %204, %2
  %206 = call float @celt_inner_prod_sse(float* %1, float* %1, i32 %205) #10
  %207 = sitofp i32 %205 to float
  %208 = fdiv float %206, %207
  %209 = getelementptr inbounds %struct.OpusEncoder, %struct.OpusEncoder* %0, i64 0, i32 42
  %210 = load float, float* %209, align 4
  %211 = fmul float %208, 0x4073C3AE20000000
  %212 = fcmp olt float %210, %211
  %213 = zext i1 %212 to i32
  br label %214

214:                                              ; preds = %198, %143, %202
  %215 = phi i32 [ 1, %143 ], [ 0, %202 ], [ 0, %198 ]
  %216 = phi i32 [ %157, %143 ], [ %192, %202 ], [ %192, %198 ]
  %217 = phi i32 [ %155, %143 ], [ %191, %202 ], [ %191, %198 ]
  %218 = phi i32 [ 0, %143 ], [ %213, %202 ], [ 1, %198 ]
  %219 = load i32, i32* %66, align 4
  %220 = getelementptr inbounds %struct.OpusEncoder, %struct.OpusEncoder* %0, i64 0, i32 40
  store i32 0, i32* %220, align 4
  %221 = icmp eq i32 %219, 0
  br i1 %221, label %260, label %222

222:                                              ; preds = %214
  %223 = getelementptr inbounds %struct.OpusEncoder, %struct.OpusEncoder* %0, i64 0, i32 7
  %224 = load i32, i32* %223, align 4
  %225 = icmp eq i32 %224, -1000
  br i1 %225, label %226, label %245

226:                                              ; preds = %222
  %227 = getelementptr inbounds %struct.OpusEncoder, %struct.OpusEncoder* %0, i64 0, i32 30
  %228 = load i32, i32* %227, align 4
  switch i32 %228, label %233 [
    i32 0, label %229
    i32 1002, label %231
  ]

229:                                              ; preds = %226
  %230 = getelementptr inbounds %struct.AnalysisInfo, %struct.AnalysisInfo* %18, i64 0, i32 5
  br label %235

231:                                              ; preds = %226
  %232 = getelementptr inbounds %struct.AnalysisInfo, %struct.AnalysisInfo* %18, i64 0, i32 7
  br label %235

233:                                              ; preds = %226
  %234 = getelementptr inbounds %struct.AnalysisInfo, %struct.AnalysisInfo* %18, i64 0, i32 6
  br label %235

235:                                              ; preds = %231, %233, %229
  %236 = phi float* [ %232, %231 ], [ %234, %233 ], [ %230, %229 ]
  %237 = load float, float* %236, align 4
  %238 = fsub float 1.000000e+00, %237
  %239 = fmul float %238, 1.000000e+02
  %240 = fpext float %239 to double
  %241 = fadd double %240, 5.000000e-01
  %242 = call double @llvm.floor.f64(double %241)
  %243 = fptosi double %242 to i32
  %244 = getelementptr inbounds %struct.OpusEncoder, %struct.OpusEncoder* %0, i64 0, i32 11
  store i32 %243, i32* %244, align 4
  br label %245

245:                                              ; preds = %235, %222
  %246 = getelementptr inbounds %struct.AnalysisInfo, %struct.AnalysisInfo* %18, i64 0, i32 8
  %247 = load i32, i32* %246, align 4
  %248 = icmp slt i32 %247, 13
  br i1 %248, label %249, label %250

249:                                              ; preds = %245
  store i32 1101, i32* %220, align 4
  br label %260

250:                                              ; preds = %245
  %251 = icmp slt i32 %247, 15
  br i1 %251, label %252, label %253

252:                                              ; preds = %250
  store i32 1102, i32* %220, align 4
  br label %260

253:                                              ; preds = %250
  %254 = icmp slt i32 %247, 17
  br i1 %254, label %255, label %256

255:                                              ; preds = %253
  store i32 1103, i32* %220, align 4
  br label %260

256:                                              ; preds = %253
  %257 = icmp slt i32 %247, 19
  br i1 %257, label %258, label %259

258:                                              ; preds = %256
  store i32 1104, i32* %220, align 4
  br label %260

259:                                              ; preds = %256
  store i32 1105, i32* %220, align 4
  br label %260

260:                                              ; preds = %196, %249, %255, %259, %258, %252, %214
  %261 = phi i32* [ %197, %196 ], [ %220, %249 ], [ %220, %255 ], [ %220, %259 ], [ %220, %258 ], [ %220, %252 ], [ %220, %214 ]
  %262 = phi i32 [ -1, %196 ], [ %218, %249 ], [ %218, %255 ], [ %218, %259 ], [ %218, %258 ], [ %218, %252 ], [ %218, %214 ]
  %263 = phi i32 [ %191, %196 ], [ %217, %249 ], [ %217, %255 ], [ %217, %259 ], [ %217, %258 ], [ %217, %252 ], [ %217, %214 ]
  %264 = phi i32 [ %192, %196 ], [ %216, %249 ], [ %216, %255 ], [ %216, %259 ], [ %216, %258 ], [ %216, %252 ], [ %216, %214 ]
  %265 = phi i32 [ 0, %196 ], [ %215, %249 ], [ %215, %255 ], [ %215, %259 ], [ %215, %258 ], [ %215, %252 ], [ %215, %214 ]
  %266 = getelementptr inbounds %struct.OpusEncoder, %struct.OpusEncoder* %0, i64 0, i32 4
  %267 = load i32, i32* %266, align 8
  %268 = icmp eq i32 %267, 2
  br i1 %268, label %269, label %278

269:                                              ; preds = %260
  %270 = getelementptr inbounds %struct.OpusEncoder, %struct.OpusEncoder* %0, i64 0, i32 6
  %271 = load i32, i32* %270, align 8
  %272 = icmp eq i32 %271, 1
  br i1 %272, label %278, label %273

273:                                              ; preds = %269
  %274 = getelementptr inbounds %struct.OpusEncoder, %struct.OpusEncoder* %0, i64 0, i32 12
  %275 = load i32, i32* %274, align 8
  %276 = getelementptr inbounds %struct.OpusEncoder, %struct.OpusEncoder* %0, i64 0, i32 38
  %277 = call float @compute_stereo_width(float* %1, i32 %2, i32 %275, %struct.StereoWidthState* %276)
  br label %278

278:                                              ; preds = %260, %269, %273
  %279 = phi float [ %277, %273 ], [ 0.000000e+00, %269 ], [ 0.000000e+00, %260 ]
  %280 = icmp eq i32 %2, 0
  br i1 %280, label %281, label %285

281:                                              ; preds = %278
  %282 = getelementptr inbounds %struct.OpusEncoder, %struct.OpusEncoder* %0, i64 0, i32 12
  %283 = load i32, i32* %282, align 8
  %284 = sdiv i32 %283, 400
  br label %285

285:                                              ; preds = %281, %278
  %286 = phi i32 [ %2, %278 ], [ %284, %281 ]
  %287 = getelementptr inbounds %struct.OpusEncoder, %struct.OpusEncoder* %0, i64 0, i32 17
  %288 = load i32, i32* %287, align 4
  switch i32 %288, label %289 [
    i32 -1000, label %292
    i32 -1, label %300
  ]

289:                                              ; preds = %285
  %290 = getelementptr inbounds %struct.OpusEncoder, %struct.OpusEncoder* %0, i64 0, i32 12
  %291 = load i32, i32* %290, align 8
  br label %306

292:                                              ; preds = %285
  %293 = getelementptr inbounds %struct.OpusEncoder, %struct.OpusEncoder* %0, i64 0, i32 12
  %294 = load i32, i32* %293, align 8
  %295 = mul nsw i32 %294, 60
  %296 = sdiv i32 %295, %286
  %297 = load i32, i32* %266, align 8
  %298 = mul nsw i32 %297, %294
  %299 = add nsw i32 %298, %296
  br label %306

300:                                              ; preds = %285
  %301 = shl i32 %30, 3
  %302 = getelementptr inbounds %struct.OpusEncoder, %struct.OpusEncoder* %0, i64 0, i32 12
  %303 = load i32, i32* %302, align 8
  %304 = mul nsw i32 %301, %303
  %305 = sdiv i32 %304, %286
  br label %306

306:                                              ; preds = %289, %292, %300
  %307 = phi i32 [ %294, %292 ], [ %303, %300 ], [ %291, %289 ]
  %308 = phi i32 [ %299, %292 ], [ %305, %300 ], [ %288, %289 ]
  %309 = getelementptr inbounds %struct.OpusEncoder, %struct.OpusEncoder* %0, i64 0, i32 16
  store i32 %308, i32* %309, align 8
  %310 = getelementptr inbounds %struct.OpusEncoder, %struct.OpusEncoder* %0, i64 0, i32 12
  %311 = sdiv i32 %307, %2
  %312 = getelementptr inbounds %struct.OpusEncoder, %struct.OpusEncoder* %0, i64 0, i32 13
  %313 = load i32, i32* %312, align 4
  %314 = icmp eq i32 %313, 0
  br i1 %314, label %315, label %329

315:                                              ; preds = %306
  %316 = mul nsw i32 %307, 12
  %317 = sdiv i32 %316, %2
  %318 = mul nsw i32 %308, 12
  %319 = sdiv i32 %318, 8
  %320 = sdiv i32 %317, 2
  %321 = add nsw i32 %320, %319
  %322 = sdiv i32 %321, %317
  %323 = icmp slt i32 %322, %30
  %324 = select i1 %323, i32 %322, i32 %30
  %325 = shl i32 %317, 3
  %326 = mul i32 %325, %324
  %327 = sdiv i32 %326, 12
  store i32 %327, i32* %309, align 8
  %328 = icmp sgt i32 %324, 1
  br i1 %328, label %329, label %349

329:                                              ; preds = %315, %306
  %330 = phi i32 [ %308, %306 ], [ %327, %315 ]
  %331 = phi i32 [ %30, %306 ], [ %324, %315 ]
  %332 = icmp slt i32 %331, 3
  %333 = mul i32 %311, 24
  %334 = icmp slt i32 %330, %333
  %335 = or i1 %332, %334
  br i1 %335, label %349, label %336

336:                                              ; preds = %329
  %337 = icmp slt i32 %311, 50
  %338 = mul nsw i32 %331, %311
  br i1 %337, label %339, label %454

339:                                              ; preds = %336
  %340 = icmp slt i32 %338, 300
  %341 = icmp slt i32 %330, 2400
  %342 = or i1 %340, %341
  br i1 %342, label %349, label %343

343:                                              ; preds = %339
  %344 = shl nsw i32 %338, 3
  %345 = load i32, i32* %266, align 8
  %346 = load i32, i32* %68, align 4
  %347 = getelementptr inbounds %struct.OpusEncoder, %struct.OpusEncoder* %0, i64 0, i32 2, i32 8
  %348 = load i32, i32* %347, align 8
  br label %467

349:                                              ; preds = %315, %339, %329
  %350 = phi i32 [ %331, %339 ], [ %331, %329 ], [ 1, %315 ]
  %351 = getelementptr inbounds %struct.OpusEncoder, %struct.OpusEncoder* %0, i64 0, i32 29
  %352 = load i32, i32* %351, align 8
  %353 = getelementptr inbounds %struct.OpusEncoder, %struct.OpusEncoder* %0, i64 0, i32 33
  %354 = load i32, i32* %353, align 8
  %355 = icmp eq i32 %354, 0
  %356 = select i1 %355, i32 1101, i32 %354
  %357 = icmp eq i32 %352, 0
  %358 = select i1 %357, i32 1000, i32 %352
  %359 = icmp sgt i32 %311, 100
  %360 = select i1 %359, i32 1002, i32 %358
  %361 = icmp eq i32 %311, 25
  %362 = icmp ne i32 %360, 1000
  %363 = and i1 %361, %362
  %364 = select i1 %363, i32 50, i32 %311
  %365 = zext i1 %363 to i32
  %366 = icmp slt i32 %364, 17
  br i1 %366, label %367, label %381

367:                                              ; preds = %349
  %368 = icmp eq i32 %4, 1
  br i1 %368, label %373, label %369

369:                                              ; preds = %367
  %370 = icmp eq i32 %360, 1000
  %371 = icmp ne i32 %364, 10
  %372 = and i1 %370, %371
  br i1 %372, label %373, label %378

373:                                              ; preds = %369, %367
  %374 = icmp slt i32 %364, 13
  %375 = zext i1 %374 to i32
  %376 = icmp eq i32 %364, 12
  %377 = select i1 %376, i32 25, i32 16
  br label %381

378:                                              ; preds = %369
  %379 = sdiv i32 50, %364
  %380 = trunc i32 %379 to i8
  br label %381

381:                                              ; preds = %373, %378, %349
  %382 = phi i32 [ %377, %373 ], [ 50, %378 ], [ %364, %349 ]
  %383 = phi i32 [ 1000, %373 ], [ %360, %378 ], [ %360, %349 ]
  %384 = phi i32 [ %375, %373 ], [ 3, %378 ], [ %365, %349 ]
  %385 = phi i8 [ 0, %373 ], [ %380, %378 ], [ 0, %349 ]
  %386 = icmp eq i32 %383, 1000
  %387 = icmp sgt i32 %356, 1103
  %388 = and i1 %387, %386
  br i1 %388, label %398, label %389

389:                                              ; preds = %381
  %390 = icmp eq i32 %383, 1002
  %391 = icmp eq i32 %356, 1102
  %392 = and i1 %391, %390
  br i1 %392, label %398, label %393

393:                                              ; preds = %389
  %394 = icmp eq i32 %383, 1001
  %395 = icmp slt i32 %356, 1105
  %396 = and i1 %395, %394
  %397 = select i1 %396, i32 1104, i32 %356
  br label %398

398:                                              ; preds = %393, %389, %381
  %399 = phi i32 [ 1103, %381 ], [ 1101, %389 ], [ %397, %393 ]
  %400 = getelementptr inbounds %struct.OpusEncoder, %struct.OpusEncoder* %0, i64 0, i32 24
  %401 = load i32, i32* %400, align 8
  %402 = icmp slt i32 %382, 400
  br i1 %402, label %403, label %411

403:                                              ; preds = %398, %403
  %404 = phi i32 [ %406, %403 ], [ %382, %398 ]
  %405 = phi i32 [ %407, %403 ], [ 0, %398 ]
  %406 = shl i32 %404, 1
  %407 = add nuw nsw i32 %405, 1
  %408 = icmp slt i32 %406, 400
  br i1 %408, label %403, label %409

409:                                              ; preds = %403
  %410 = shl i32 %407, 3
  br label %411

411:                                              ; preds = %409, %398
  %412 = phi i32 [ 0, %398 ], [ %410, %409 ]
  switch i32 %383, label %427 [
    i32 1000, label %413
    i32 1002, label %419
  ]

413:                                              ; preds = %411
  %414 = shl i32 %399, 5
  %415 = add i32 %414, 96
  %416 = add i32 %412, -16
  %417 = and i32 %415, 224
  %418 = or i32 %416, %417
  br label %432

419:                                              ; preds = %411
  %420 = icmp sgt i32 %399, 1102
  %421 = select i1 %420, i32 %399, i32 1102
  %422 = shl i32 %421, 5
  %423 = add i32 %422, 64
  %424 = and i32 %423, 96
  %425 = or i32 %424, %412
  %426 = or i32 %425, 128
  br label %432

427:                                              ; preds = %411
  %428 = shl i32 %399, 4
  %429 = add i32 %412, 240
  %430 = or i32 %428, %429
  %431 = or i32 %430, 96
  br label %432

432:                                              ; preds = %413, %419, %427
  %433 = phi i32 [ %418, %413 ], [ %426, %419 ], [ %431, %427 ]
  %434 = icmp eq i32 %401, 2
  %435 = zext i1 %434 to i32
  %436 = shl nuw nsw i32 %435, 2
  %437 = or i32 %436, %384
  %438 = or i32 %437, %433
  %439 = trunc i32 %438 to i8
  store i8 %439, i8* %3, align 1
  %440 = icmp ult i32 %384, 2
  %441 = select i1 %440, i32 1, i32 2
  %442 = icmp sgt i32 %350, %441
  %443 = select i1 %442, i32 %350, i32 %441
  %444 = icmp eq i32 %384, 3
  br i1 %444, label %445, label %447

445:                                              ; preds = %432
  %446 = getelementptr inbounds i8, i8* %3, i64 1
  store i8 %385, i8* %446, align 1
  br label %447

447:                                              ; preds = %445, %432
  %448 = load i32, i32* %312, align 4
  %449 = icmp eq i32 %448, 0
  br i1 %449, label %450, label %2820

450:                                              ; preds = %447
  %451 = call i32 @opus_packet_pad(i8* %3, i32 %441, i32 %443) #10
  %452 = icmp eq i32 %451, 0
  %453 = select i1 %452, i32 %443, i32 -3
  br label %2820

454:                                              ; preds = %336
  %455 = shl nsw i32 %338, 3
  %456 = load i32, i32* %266, align 8
  %457 = load i32, i32* %68, align 4
  %458 = getelementptr inbounds %struct.OpusEncoder, %struct.OpusEncoder* %0, i64 0, i32 2, i32 8
  %459 = load i32, i32* %458, align 8
  %460 = icmp eq i32 %311, 50
  br i1 %460, label %467, label %461

461:                                              ; preds = %454
  %462 = mul nsw i32 %456, 40
  %463 = add nsw i32 %462, 20
  %464 = add nsw i32 %311, -50
  %465 = mul nsw i32 %463, %464
  %466 = sub nsw i32 %330, %465
  br label %467

467:                                              ; preds = %454, %343, %461
  %468 = phi i1 [ true, %461 ], [ false, %454 ], [ false, %343 ]
  %469 = phi i32 [ %459, %461 ], [ %459, %454 ], [ %348, %343 ]
  %470 = phi i32* [ %458, %461 ], [ %458, %454 ], [ %347, %343 ]
  %471 = phi i32 [ %457, %461 ], [ %457, %454 ], [ %346, %343 ]
  %472 = phi i32 [ %456, %461 ], [ %456, %454 ], [ %345, %343 ]
  %473 = phi i32 [ %455, %461 ], [ %455, %454 ], [ %344, %343 ]
  %474 = phi i32 [ %466, %461 ], [ %330, %454 ], [ %330, %343 ]
  br i1 %314, label %475, label %478

475:                                              ; preds = %467
  %476 = sdiv i32 %474, 12
  %477 = sub nsw i32 %474, %476
  br label %478

478:                                              ; preds = %467, %475
  %479 = phi i32 [ %474, %467 ], [ %477, %475 ]
  %480 = add nsw i32 %471, 90
  %481 = mul nsw i32 %479, %480
  %482 = sdiv i32 %481, 100
  %483 = mul nsw i32 %482, %469
  %484 = mul nsw i32 %469, 12
  %485 = add nsw i32 %484, 20
  %486 = sdiv i32 %483, %485
  %487 = sub nsw i32 %482, %486
  %488 = getelementptr inbounds %struct.OpusEncoder, %struct.OpusEncoder* %0, i64 0, i32 7
  %489 = load i32, i32* %488, align 4
  switch i32 %489, label %491 [
    i32 3001, label %507
    i32 3002, label %490
  ]

490:                                              ; preds = %478
  br label %507

491:                                              ; preds = %478
  %492 = getelementptr inbounds %struct.OpusEncoder, %struct.OpusEncoder* %0, i64 0, i32 11
  %493 = load i32, i32* %492, align 4
  %494 = icmp sgt i32 %493, -1
  br i1 %494, label %495, label %503

495:                                              ; preds = %491
  %496 = mul nsw i32 %493, 327
  %497 = ashr i32 %496, 8
  %498 = load i32, i32* %53, align 4
  %499 = icmp eq i32 %498, 2049
  br i1 %499, label %500, label %507

500:                                              ; preds = %495
  %501 = icmp slt i32 %497, 115
  %502 = select i1 %501, i32 %497, i32 115
  br label %507

503:                                              ; preds = %491
  %504 = load i32, i32* %53, align 4
  %505 = icmp eq i32 %504, 2048
  %506 = select i1 %505, i32 115, i32 48
  br label %507

507:                                              ; preds = %503, %478, %490, %495, %500
  %508 = phi i32 [ 0, %490 ], [ %502, %500 ], [ %497, %495 ], [ 127, %478 ], [ %506, %503 ]
  %509 = getelementptr inbounds %struct.OpusEncoder, %struct.OpusEncoder* %0, i64 0, i32 6
  %510 = load i32, i32* %509, align 8
  %511 = icmp eq i32 %510, -1000
  %512 = icmp eq i32 %472, 2
  br i1 %511, label %516, label %513

513:                                              ; preds = %507
  br i1 %512, label %514, label %528

514:                                              ; preds = %513
  %515 = getelementptr inbounds %struct.OpusEncoder, %struct.OpusEncoder* %0, i64 0, i32 24
  store i32 %510, i32* %515, align 8
  br label %530

516:                                              ; preds = %507
  br i1 %512, label %517, label %528

517:                                              ; preds = %516
  %518 = mul nsw i32 %508, %508
  %519 = mul nsw i32 %518, 2000
  %520 = lshr i32 %519, 14
  %521 = getelementptr inbounds %struct.OpusEncoder, %struct.OpusEncoder* %0, i64 0, i32 24
  %522 = load i32, i32* %521, align 8
  %523 = icmp eq i32 %522, 2
  %524 = select i1 %523, i32 16000, i32 18000
  %525 = add nuw nsw i32 %524, %520
  %526 = icmp sgt i32 %487, %525
  %527 = select i1 %526, i32 2, i32 1
  store i32 %527, i32* %521, align 8
  br label %530

528:                                              ; preds = %513, %516
  %529 = getelementptr inbounds %struct.OpusEncoder, %struct.OpusEncoder* %0, i64 0, i32 24
  store i32 %472, i32* %529, align 8
  br label %530

530:                                              ; preds = %517, %528, %514
  %531 = phi i32 [ %527, %517 ], [ %472, %528 ], [ %510, %514 ]
  %532 = getelementptr inbounds %struct.OpusEncoder, %struct.OpusEncoder* %0, i64 0, i32 24
  br i1 %468, label %533, label %539

533:                                              ; preds = %530
  %534 = mul nsw i32 %531, 40
  %535 = add nsw i32 %534, 20
  %536 = add nsw i32 %311, -50
  %537 = mul nsw i32 %535, %536
  %538 = sub nsw i32 %330, %537
  br label %539

539:                                              ; preds = %533, %530
  %540 = phi i32 [ %538, %533 ], [ %330, %530 ]
  br i1 %314, label %541, label %544

541:                                              ; preds = %539
  %542 = sdiv i32 %540, 12
  %543 = sub nsw i32 %540, %542
  br label %544

544:                                              ; preds = %539, %541
  %545 = phi i32 [ %540, %539 ], [ %543, %541 ]
  %546 = mul nsw i32 %545, %480
  %547 = sdiv i32 %546, 100
  %548 = mul nsw i32 %547, %469
  %549 = sdiv i32 %548, %485
  %550 = sub nsw i32 %547, %549
  %551 = getelementptr inbounds %struct.OpusEncoder, %struct.OpusEncoder* %0, i64 0, i32 22
  %552 = load i32, i32* %551, align 8
  %553 = icmp eq i32 %552, 0
  br i1 %553, label %558, label %554

554:                                              ; preds = %544
  %555 = load i32, i32* %66, align 4
  %556 = or i32 %555, %265
  %557 = icmp eq i32 %556, 0
  br label %558

558:                                              ; preds = %544, %554
  %559 = phi i1 [ false, %544 ], [ %557, %554 ]
  %560 = zext i1 %559 to i32
  %561 = getelementptr inbounds %struct.OpusEncoder, %struct.OpusEncoder* %0, i64 0, i32 2, i32 12
  store i32 %560, i32* %561, align 8
  %562 = load i32, i32* %53, align 4
  %563 = icmp eq i32 %562, 2051
  br i1 %563, label %564, label %569

564:                                              ; preds = %558
  %565 = getelementptr inbounds %struct.OpusEncoder, %struct.OpusEncoder* %0, i64 0, i32 29
  store i32 1002, i32* %565, align 8
  %566 = getelementptr inbounds %struct.OpusEncoder, %struct.OpusEncoder* %0, i64 0, i32 29
  %567 = sdiv i32 %307, 100
  %568 = icmp sgt i32 %567, %2
  br label %635

569:                                              ; preds = %558
  %570 = getelementptr inbounds %struct.OpusEncoder, %struct.OpusEncoder* %0, i64 0, i32 10
  %571 = load i32, i32* %570, align 8
  %572 = icmp eq i32 %571, -1000
  br i1 %572, label %573, label %623

573:                                              ; preds = %569
  %574 = fsub float 1.000000e+00, %279
  %575 = fmul float %574, 6.400000e+04
  %576 = fmul float %279, 4.400000e+04
  %577 = fadd float %576, %575
  %578 = fptosi float %577 to i32
  %579 = fmul float %574, 1.000000e+04
  %580 = fmul float %279, 1.000000e+04
  %581 = fadd float %580, %579
  %582 = fptosi float %581 to i32
  %583 = mul nsw i32 %508, %508
  %584 = sub nsw i32 %578, %582
  %585 = mul nsw i32 %583, %584
  %586 = ashr i32 %585, 14
  %587 = add nsw i32 %586, %582
  %588 = icmp eq i32 %562, 2048
  %589 = add nsw i32 %587, 8000
  %590 = select i1 %588, i32 %589, i32 %587
  %591 = getelementptr inbounds %struct.OpusEncoder, %struct.OpusEncoder* %0, i64 0, i32 30
  %592 = load i32, i32* %591, align 4
  %593 = icmp eq i32 %592, 1002
  br i1 %593, label %594, label %596

594:                                              ; preds = %573
  %595 = add nsw i32 %590, -4000
  br label %600

596:                                              ; preds = %573
  %597 = icmp sgt i32 %592, 0
  %598 = add nsw i32 %590, 4000
  %599 = select i1 %597, i32 %598, i32 %590
  br label %600

600:                                              ; preds = %596, %594
  %601 = phi i32 [ %595, %594 ], [ %599, %596 ]
  %602 = icmp slt i32 %550, %601
  %603 = select i1 %602, i32 1000, i32 1002
  %604 = getelementptr inbounds %struct.OpusEncoder, %struct.OpusEncoder* %0, i64 0, i32 29
  store i32 %603, i32* %604, align 8
  %605 = getelementptr inbounds %struct.OpusEncoder, %struct.OpusEncoder* %0, i64 0, i32 2, i32 10
  %606 = load i32, i32* %605, align 8
  %607 = icmp eq i32 %606, 0
  br i1 %607, label %613, label %608

608:                                              ; preds = %600
  %609 = sub nsw i32 128, %508
  %610 = ashr i32 %609, 4
  %611 = icmp sgt i32 %469, %610
  br i1 %611, label %612, label %613

612:                                              ; preds = %608
  store i32 1000, i32* %604, align 8
  br label %613

613:                                              ; preds = %600, %612, %608
  %614 = phi i32 [ %603, %600 ], [ 1000, %612 ], [ %603, %608 ]
  %615 = icmp sgt i32 %508, 100
  %616 = and i1 %615, %559
  %617 = select i1 %468, i32 9000, i32 6000
  %618 = mul nsw i32 %617, %2
  %619 = shl nsw i32 %307, 3
  %620 = sdiv i32 %618, %619
  %621 = icmp slt i32 %331, %620
  %622 = or i1 %616, %621
  br i1 %622, label %625, label %627

623:                                              ; preds = %569
  %624 = getelementptr inbounds %struct.OpusEncoder, %struct.OpusEncoder* %0, i64 0, i32 29
  store i32 %571, i32* %624, align 8
  br label %627

625:                                              ; preds = %613
  %626 = select i1 %621, i32 1002, i32 1000
  store i32 %626, i32* %604, align 8
  br label %627

627:                                              ; preds = %625, %613, %623
  %628 = phi i32 [ %626, %625 ], [ %614, %613 ], [ %571, %623 ]
  %629 = getelementptr inbounds %struct.OpusEncoder, %struct.OpusEncoder* %0, i64 0, i32 29
  %630 = icmp ne i32 %628, 1002
  %631 = sdiv i32 %307, 100
  %632 = icmp sgt i32 %631, %2
  %633 = and i1 %632, %630
  br i1 %633, label %634, label %635

634:                                              ; preds = %627
  store i32 1002, i32* %629, align 8
  br label %635

635:                                              ; preds = %564, %627, %634
  %636 = phi i1 [ %632, %627 ], [ %632, %634 ], [ %568, %564 ]
  %637 = phi i32* [ %629, %627 ], [ %629, %634 ], [ %566, %564 ]
  %638 = phi i32 [ %628, %627 ], [ 1002, %634 ], [ 1002, %564 ]
  %639 = getelementptr inbounds %struct.OpusEncoder, %struct.OpusEncoder* %0, i64 0, i32 20
  %640 = load i32, i32* %639, align 8
  %641 = icmp eq i32 %640, 0
  br i1 %641, label %643, label %642

642:                                              ; preds = %635
  store i32 1002, i32* %637, align 8
  br label %643

643:                                              ; preds = %635, %642
  %644 = phi i32 [ %638, %635 ], [ 1002, %642 ]
  %645 = getelementptr inbounds %struct.OpusEncoder, %struct.OpusEncoder* %0, i64 0, i32 30
  %646 = load i32, i32* %645, align 4
  %647 = icmp sgt i32 %646, 0
  br i1 %647, label %648, label %657

648:                                              ; preds = %643
  %649 = icmp ne i32 %644, 1002
  %650 = icmp eq i32 %646, 1002
  %651 = xor i1 %650, %649
  %652 = or i1 %650, %649
  %653 = xor i1 %651, true
  %654 = zext i1 %653 to i32
  br i1 %652, label %657, label %655

655:                                              ; preds = %648
  br i1 %636, label %657, label %656

656:                                              ; preds = %655
  store i32 %646, i32* %637, align 8
  br label %657

657:                                              ; preds = %648, %655, %656, %643
  %658 = phi i32 [ %646, %656 ], [ %644, %643 ], [ 1002, %655 ], [ %644, %648 ]
  %659 = phi i32 [ 1, %656 ], [ 0, %643 ], [ 0, %655 ], [ %654, %648 ]
  %660 = phi i32 [ 0, %656 ], [ 0, %643 ], [ 0, %655 ], [ %654, %648 ]
  %661 = phi i32 [ 1, %656 ], [ 0, %643 ], [ 0, %655 ], [ 0, %648 ]
  %662 = icmp eq i32 %531, 1
  br i1 %662, label %663, label %676

663:                                              ; preds = %657
  %664 = getelementptr inbounds %struct.OpusEncoder, %struct.OpusEncoder* %0, i64 0, i32 31
  %665 = load i32, i32* %664, align 8
  %666 = icmp eq i32 %665, 2
  br i1 %666, label %667, label %676

667:                                              ; preds = %663
  %668 = getelementptr inbounds %struct.OpusEncoder, %struct.OpusEncoder* %0, i64 0, i32 2, i32 15
  %669 = load i32, i32* %668, align 4
  %670 = icmp eq i32 %669, 0
  br i1 %670, label %671, label %676

671:                                              ; preds = %667
  %672 = icmp eq i32 %658, 1002
  %673 = icmp eq i32 %646, 1002
  %674 = or i1 %673, %672
  br i1 %674, label %676, label %675

675:                                              ; preds = %671
  store i32 1, i32* %668, align 4
  store i32 2, i32* %532, align 8
  br label %678

676:                                              ; preds = %671, %667, %663, %657
  %677 = getelementptr inbounds %struct.OpusEncoder, %struct.OpusEncoder* %0, i64 0, i32 2, i32 15
  store i32 0, i32* %677, align 4
  br label %678

678:                                              ; preds = %676, %675
  %679 = phi i32 [ %531, %676 ], [ 2, %675 ]
  br i1 %468, label %680, label %686

680:                                              ; preds = %678
  %681 = mul nsw i32 %679, 40
  %682 = add nsw i32 %681, 20
  %683 = add nsw i32 %311, -50
  %684 = mul nsw i32 %682, %683
  %685 = sub nsw i32 %330, %684
  br label %686

686:                                              ; preds = %680, %678
  %687 = phi i32 [ %685, %680 ], [ %330, %678 ]
  br i1 %314, label %688, label %691

688:                                              ; preds = %686
  %689 = sdiv i32 %687, 12
  %690 = sub nsw i32 %687, %689
  br label %691

691:                                              ; preds = %688, %686
  %692 = phi i32 [ %687, %686 ], [ %690, %688 ]
  %693 = mul nsw i32 %692, %480
  %694 = sdiv i32 %693, 100
  %695 = or i32 %658, 1
  %696 = icmp eq i32 %695, 1001
  br i1 %696, label %697, label %702

697:                                              ; preds = %691
  %698 = icmp slt i32 %471, 2
  br i1 %698, label %699, label %713

699:                                              ; preds = %697
  %700 = shl nsw i32 %694, 2
  %701 = sdiv i32 %700, 5
  br label %713

702:                                              ; preds = %691
  %703 = icmp eq i32 %658, 1002
  br i1 %703, label %704, label %709

704:                                              ; preds = %702
  %705 = icmp slt i32 %471, 5
  br i1 %705, label %706, label %745

706:                                              ; preds = %704
  %707 = mul nsw i32 %694, 9
  %708 = sdiv i32 %707, 10
  br label %745

709:                                              ; preds = %702
  %710 = mul nsw i32 %694, %469
  %711 = sdiv i32 %710, %485
  %712 = sub nsw i32 %694, %711
  br label %721

713:                                              ; preds = %697, %699
  %714 = phi i32 [ %701, %699 ], [ %694, %697 ]
  %715 = mul nsw i32 %714, %469
  %716 = mul nsw i32 %469, 6
  %717 = add nsw i32 %716, 10
  %718 = sdiv i32 %715, %717
  %719 = sub nsw i32 %714, %718
  %720 = icmp eq i32 %658, 1002
  br i1 %720, label %745, label %721

721:                                              ; preds = %709, %713
  %722 = phi i32 [ %712, %709 ], [ %719, %713 ]
  %723 = icmp eq i32 %646, 1002
  br i1 %723, label %724, label %730

724:                                              ; preds = %721
  %725 = bitcast %struct.silk_EncControlStruct* %19 to i8*
  call void @llvm.lifetime.start.p0i8(i64 100, i8* nonnull %725) #10
  call void @llvm.memset.p0i8.i64(i8* nonnull align 4 %725, i8 -86, i64 100, i1 false)
  %726 = getelementptr inbounds %struct.OpusEncoder, %struct.OpusEncoder* %0, i64 0, i32 21
  %727 = load i32, i32* %726, align 4
  %728 = call i32 @silk_InitEncoder(i8* %47, i32 %727, %struct.silk_EncControlStruct* nonnull %19) #10
  call void @llvm.lifetime.end.p0i8(i64 100, i8* nonnull %725) #10
  %729 = load i32, i32* %637, align 8
  br label %730

730:                                              ; preds = %724, %721
  %731 = phi i32 [ %729, %724 ], [ %658, %721 ]
  %732 = phi i32 [ 1, %724 ], [ 0, %721 ]
  %733 = icmp eq i32 %731, 1002
  br i1 %733, label %745, label %734

734:                                              ; preds = %730
  %735 = getelementptr inbounds %struct.OpusEncoder, %struct.OpusEncoder* %0, i64 0, i32 36
  %736 = load i32, i32* %735, align 4
  %737 = icmp eq i32 %736, 0
  br i1 %737, label %738, label %745

738:                                              ; preds = %734
  %739 = getelementptr inbounds %struct.OpusEncoder, %struct.OpusEncoder* %0, i64 0, i32 2, i32 19
  %740 = load i32, i32* %739, align 4
  %741 = icmp eq i32 %740, 0
  br i1 %741, label %742, label %745

742:                                              ; preds = %738
  %743 = getelementptr inbounds %struct.OpusEncoder, %struct.OpusEncoder* %0, i64 0, i32 33
  %744 = load i32, i32* %743, align 8
  br label %792

745:                                              ; preds = %706, %704, %713, %738, %734, %730
  %746 = phi i1 [ false, %738 ], [ false, %734 ], [ true, %730 ], [ true, %713 ], [ true, %704 ], [ true, %706 ]
  %747 = phi i32 [ %732, %738 ], [ %732, %734 ], [ %732, %730 ], [ 0, %713 ], [ 0, %704 ], [ 0, %706 ]
  %748 = phi i32 [ %722, %738 ], [ %722, %734 ], [ %722, %730 ], [ %719, %713 ], [ %694, %704 ], [ %708, %706 ]
  %749 = phi i32 [ %731, %738 ], [ %731, %734 ], [ 1002, %730 ], [ 1002, %713 ], [ 1002, %704 ], [ 1002, %706 ]
  %750 = load i32, i32* %266, align 8
  %751 = icmp eq i32 %750, 2
  %752 = mul nsw i32 %508, %508
  %753 = mul nsw i32 %752, 2500
  %754 = ashr i32 %753, 14
  %755 = add nsw i32 %754, 11000
  %756 = mul nsw i32 %752, 2000
  %757 = ashr i32 %756, 14
  %758 = add nsw i32 %757, 12000
  %759 = getelementptr inbounds %struct.OpusEncoder, %struct.OpusEncoder* %0, i64 0, i32 36
  %760 = load i32, i32* %759, align 4
  %761 = icmp eq i32 %760, 0
  %762 = getelementptr inbounds %struct.OpusEncoder, %struct.OpusEncoder* %0, i64 0, i32 34
  br i1 %761, label %765, label %763

763:                                              ; preds = %745
  %764 = icmp slt i32 %748, %758
  br i1 %764, label %776, label %778

765:                                              ; preds = %745
  %766 = load i32, i32* %762, align 4
  %767 = icmp slt i32 %766, 1105
  %768 = select i1 %767, i32 2000, i32 -2000
  %769 = add i32 %758, %768
  %770 = icmp slt i32 %748, %769
  br i1 %770, label %771, label %778

771:                                              ; preds = %765
  %772 = icmp slt i32 %766, 1104
  %773 = select i1 %772, i32 1000, i32 -1000
  %774 = add i32 %755, %773
  %775 = icmp slt i32 %748, %774
  br i1 %775, label %2822, label %778

776:                                              ; preds = %763
  %777 = icmp slt i32 %748, %755
  br i1 %777, label %2832, label %778

778:                                              ; preds = %2832, %765, %771, %2822, %763, %776, %2827
  %779 = phi i32 [ 1104, %776 ], [ 1105, %763 ], [ 1103, %2822 ], [ 1104, %771 ], [ 1105, %765 ], [ 1101, %2827 ], [ %2834, %2832 ]
  br label %780

780:                                              ; preds = %2827, %778
  %781 = phi i32 [ %779, %778 ], [ 1103, %2827 ]
  store i32 %781, i32* %762, align 4
  %782 = getelementptr inbounds %struct.OpusEncoder, %struct.OpusEncoder* %0, i64 0, i32 33
  store i32 %781, i32* %782, align 8
  %783 = xor i1 %761, true
  %784 = or i1 %746, %783
  br i1 %784, label %792, label %785

785:                                              ; preds = %780
  %786 = getelementptr inbounds %struct.OpusEncoder, %struct.OpusEncoder* %0, i64 0, i32 2, i32 20
  %787 = load i32, i32* %786, align 8
  %788 = icmp eq i32 %787, 0
  %789 = icmp sgt i32 %781, 1103
  %790 = and i1 %789, %788
  br i1 %790, label %791, label %792

791:                                              ; preds = %785
  store i32 1103, i32* %782, align 8
  br label %792

792:                                              ; preds = %791, %785, %780, %742
  %793 = phi i1 [ false, %742 ], [ %746, %780 ], [ %746, %785 ], [ %746, %791 ]
  %794 = phi i32 [ %732, %742 ], [ %747, %780 ], [ %747, %785 ], [ %747, %791 ]
  %795 = phi i32 [ %722, %742 ], [ %748, %780 ], [ %748, %785 ], [ %748, %791 ]
  %796 = phi i32 [ %731, %742 ], [ %749, %780 ], [ %749, %785 ], [ %749, %791 ]
  %797 = phi i32 [ %744, %742 ], [ %781, %780 ], [ %781, %785 ], [ 1103, %791 ]
  %798 = getelementptr inbounds %struct.OpusEncoder, %struct.OpusEncoder* %0, i64 0, i32 33
  %799 = getelementptr inbounds %struct.OpusEncoder, %struct.OpusEncoder* %0, i64 0, i32 9
  %800 = load i32, i32* %799, align 4
  %801 = icmp sgt i32 %797, %800
  br i1 %801, label %802, label %803

802:                                              ; preds = %792
  store i32 %800, i32* %798, align 8
  br label %803

803:                                              ; preds = %802, %792
  %804 = phi i32 [ %800, %802 ], [ %797, %792 ]
  %805 = getelementptr inbounds %struct.OpusEncoder, %struct.OpusEncoder* %0, i64 0, i32 8
  %806 = load i32, i32* %805, align 8
  %807 = icmp eq i32 %806, -1000
  br i1 %807, label %809, label %808

808:                                              ; preds = %803
  store i32 %806, i32* %798, align 8
  br label %809

809:                                              ; preds = %803, %808
  %810 = phi i32 [ %804, %803 ], [ %806, %808 ]
  %811 = icmp ne i32 %796, 1002
  %812 = icmp slt i32 %338, 1875
  %813 = and i1 %812, %811
  br i1 %813, label %814, label %817

814:                                              ; preds = %809
  %815 = icmp slt i32 %810, 1103
  %816 = select i1 %815, i32 %810, i32 1103
  store i32 %816, i32* %798, align 8
  br label %817

817:                                              ; preds = %814, %809
  %818 = phi i32 [ %816, %814 ], [ %810, %809 ]
  %819 = load i32, i32* %310, align 8
  %820 = icmp slt i32 %819, 24001
  br i1 %820, label %821, label %843

821:                                              ; preds = %817
  %822 = icmp sgt i32 %818, 1104
  br i1 %822, label %823, label %824

823:                                              ; preds = %821
  store i32 1104, i32* %798, align 8
  br label %824

824:                                              ; preds = %823, %821
  %825 = phi i32 [ 1104, %823 ], [ %818, %821 ]
  %826 = icmp slt i32 %819, 16001
  br i1 %826, label %827, label %843

827:                                              ; preds = %824
  %828 = icmp sgt i32 %825, 1103
  br i1 %828, label %829, label %830

829:                                              ; preds = %827
  store i32 1103, i32* %798, align 8
  br label %830

830:                                              ; preds = %829, %827
  %831 = phi i32 [ 1103, %829 ], [ %825, %827 ]
  %832 = icmp slt i32 %819, 12001
  br i1 %832, label %833, label %843

833:                                              ; preds = %830
  %834 = icmp sgt i32 %831, 1102
  %835 = select i1 %834, i32 1102, i32 %831
  %836 = icmp slt i32 %819, 8001
  %837 = icmp sgt i32 %835, 1101
  %838 = and i1 %836, %837
  %839 = select i1 %838, i32 1101, i32 %835
  %840 = and i1 %836, %837
  %841 = or i1 %834, %840
  br i1 %841, label %842, label %843

842:                                              ; preds = %833
  store i32 %839, i32* %798, align 8
  br label %843

843:                                              ; preds = %842, %833, %817, %824, %830
  %844 = phi i32 [ %818, %817 ], [ %825, %824 ], [ %831, %830 ], [ %839, %833 ], [ %839, %842 ]
  %845 = load i32, i32* %261, align 4
  %846 = icmp eq i32 %845, 0
  %847 = xor i1 %807, true
  %848 = or i1 %846, %847
  br i1 %848, label %872, label %849

849:                                              ; preds = %843
  %850 = load i32, i32* %532, align 8
  %851 = mul nsw i32 %850, 18000
  %852 = icmp sgt i32 %795, %851
  %853 = xor i1 %793, true
  %854 = or i1 %852, %853
  br i1 %854, label %855, label %866

855:                                              ; preds = %849
  %856 = mul nsw i32 %850, 24000
  %857 = icmp sgt i32 %795, %856
  %858 = or i1 %857, %853
  br i1 %858, label %859, label %866

859:                                              ; preds = %855
  %860 = mul nsw i32 %850, 30000
  %861 = icmp sgt i32 %795, %860
  br i1 %861, label %862, label %866

862:                                              ; preds = %859
  %863 = mul nsw i32 %850, 44000
  %864 = icmp sgt i32 %795, %863
  %865 = select i1 %864, i32 1105, i32 1104
  br label %866

866:                                              ; preds = %855, %849, %862, %859
  %867 = phi i32 [ 1103, %859 ], [ %865, %862 ], [ 1101, %849 ], [ 1102, %855 ]
  %868 = icmp sgt i32 %845, %867
  %869 = select i1 %868, i32 %845, i32 %867
  store i32 %869, i32* %261, align 4
  %870 = icmp slt i32 %844, %869
  %871 = select i1 %870, i32 %844, i32 %869
  store i32 %871, i32* %798, align 8
  br label %872

872:                                              ; preds = %843, %866
  %873 = phi i32 [ %844, %843 ], [ %871, %866 ]
  %874 = getelementptr inbounds %struct.OpusEncoder, %struct.OpusEncoder* %0, i64 0, i32 2, i32 10
  %875 = load i32, i32* %874, align 8
  %876 = load i32, i32* %470, align 8
  %877 = getelementptr inbounds %struct.OpusEncoder, %struct.OpusEncoder* %0, i64 0, i32 2, i32 11
  %878 = icmp eq i32 %875, 0
  %879 = icmp eq i32 %876, 0
  %880 = or i1 %878, %879
  %881 = or i1 %793, %880
  br i1 %881, label %1008, label %882

882:                                              ; preds = %872
  %883 = load i32, i32* %877, align 4
  %884 = icmp slt i32 %876, 25
  %885 = select i1 %884, i32 %876, i32 25
  %886 = sub nsw i32 125, %885
  %887 = icmp slt i32 %876, 6
  switch i32 %883, label %910 [
    i32 1, label %888
    i32 0, label %948
  ]

888:                                              ; preds = %882
  %889 = shl i32 %873, 1
  %890 = add i32 %889, -2202
  %891 = sext i32 %890 to i64
  %892 = getelementptr inbounds [10 x i32], [10 x i32]* @fec_thresholds, i64 0, i64 %891
  %893 = load i32, i32* %892, align 8
  %894 = add i32 %889, -2201
  %895 = sext i32 %894 to i64
  %896 = getelementptr inbounds [10 x i32], [10 x i32]* @fec_thresholds, i64 0, i64 %895
  %897 = load i32, i32* %896, align 4
  %898 = sub i32 %893, %897
  %899 = mul nsw i32 %898, %886
  %900 = sext i32 %899 to i64
  %901 = mul nsw i64 %900, 655
  %902 = ashr i64 %901, 16
  %903 = trunc i64 %902 to i32
  %904 = icmp sgt i32 %795, %903
  %905 = or i1 %887, %904
  %906 = xor i1 %887, true
  %907 = or i1 %904, %906
  br i1 %905, label %1008, label %908

908:                                              ; preds = %888
  %909 = sext i32 %873 to i64
  br label %925

910:                                              ; preds = %882
  %911 = shl i32 %873, 1
  %912 = add i32 %911, -2202
  %913 = sext i32 %912 to i64
  %914 = getelementptr inbounds [10 x i32], [10 x i32]* @fec_thresholds, i64 0, i64 %913
  %915 = load i32, i32* %914, align 8
  %916 = mul nsw i32 %915, %886
  %917 = sext i32 %916 to i64
  %918 = mul nsw i64 %917, 655
  %919 = ashr i64 %918, 16
  %920 = trunc i64 %919 to i32
  %921 = icmp sgt i32 %795, %920
  %922 = or i1 %887, %921
  br i1 %922, label %1008, label %923

923:                                              ; preds = %910
  %924 = sext i32 %873 to i64
  br label %1004

925:                                              ; preds = %908, %928
  %926 = phi i64 [ %909, %908 ], [ %929, %928 ]
  %927 = icmp sgt i64 %926, 1101
  br i1 %927, label %928, label %1007

928:                                              ; preds = %925
  %929 = add nsw i64 %926, -1
  %930 = trunc i64 %929 to i32
  store i32 %930, i32* %798, align 4
  %931 = trunc i64 %929 to i32
  %932 = shl i32 %931, 1
  %933 = add i32 %932, -2202
  %934 = sext i32 %933 to i64
  %935 = getelementptr inbounds [10 x i32], [10 x i32]* @fec_thresholds, i64 0, i64 %934
  %936 = load i32, i32* %935, align 8
  %937 = add i32 %932, -2201
  %938 = sext i32 %937 to i64
  %939 = getelementptr inbounds [10 x i32], [10 x i32]* @fec_thresholds, i64 0, i64 %938
  %940 = load i32, i32* %939, align 4
  %941 = sub i32 %936, %940
  %942 = mul nsw i32 %941, %886
  %943 = sext i32 %942 to i64
  %944 = mul nsw i64 %943, 655
  %945 = ashr i64 %944, 16
  %946 = trunc i64 %945 to i32
  %947 = icmp sgt i32 %795, %946
  br i1 %947, label %1008, label %925

948:                                              ; preds = %882
  %949 = shl i32 %873, 1
  %950 = add i32 %949, -2202
  %951 = sext i32 %950 to i64
  %952 = getelementptr inbounds [10 x i32], [10 x i32]* @fec_thresholds, i64 0, i64 %951
  %953 = load i32, i32* %952, align 8
  %954 = add i32 %949, -2201
  %955 = sext i32 %954 to i64
  %956 = getelementptr inbounds [10 x i32], [10 x i32]* @fec_thresholds, i64 0, i64 %955
  %957 = load i32, i32* %956, align 4
  %958 = add nsw i32 %957, %953
  %959 = mul nsw i32 %958, %886
  %960 = sext i32 %959 to i64
  %961 = mul nsw i64 %960, 655
  %962 = ashr i64 %961, 16
  %963 = trunc i64 %962 to i32
  %964 = icmp sgt i32 %795, %963
  %965 = or i1 %964, %887
  br i1 %965, label %1008, label %966

966:                                              ; preds = %948
  %967 = sext i32 %873 to i64
  br label %968

968:                                              ; preds = %966, %971
  %969 = phi i64 [ %972, %971 ], [ %967, %966 ]
  %970 = icmp sgt i64 %969, 1101
  br i1 %970, label %971, label %1007

971:                                              ; preds = %968
  %972 = add nsw i64 %969, -1
  %973 = trunc i64 %972 to i32
  store i32 %973, i32* %798, align 4
  %974 = shl i32 %973, 1
  %975 = add i32 %974, -2202
  %976 = sext i32 %975 to i64
  %977 = getelementptr inbounds [10 x i32], [10 x i32]* @fec_thresholds, i64 0, i64 %976
  %978 = load i32, i32* %977, align 8
  %979 = add i32 %974, -2201
  %980 = sext i32 %979 to i64
  %981 = getelementptr inbounds [10 x i32], [10 x i32]* @fec_thresholds, i64 0, i64 %980
  %982 = load i32, i32* %981, align 4
  %983 = add nsw i32 %982, %978
  %984 = mul nsw i32 %983, %886
  %985 = sext i32 %984 to i64
  %986 = mul nsw i64 %985, 655
  %987 = ashr i64 %986, 16
  %988 = trunc i64 %987 to i32
  %989 = icmp sgt i32 %795, %988
  br i1 %989, label %1008, label %968

990:                                              ; preds = %1004
  %991 = add nsw i64 %1005, -1
  %992 = trunc i64 %991 to i32
  store i32 %992, i32* %798, align 4
  %993 = shl i32 %992, 1
  %994 = add i32 %993, -2202
  %995 = sext i32 %994 to i64
  %996 = getelementptr inbounds [10 x i32], [10 x i32]* @fec_thresholds, i64 0, i64 %995
  %997 = load i32, i32* %996, align 8
  %998 = mul nsw i32 %997, %886
  %999 = sext i32 %998 to i64
  %1000 = mul nsw i64 %999, 655
  %1001 = ashr i64 %1000, 16
  %1002 = trunc i64 %1001 to i32
  %1003 = icmp sgt i32 %795, %1002
  br i1 %1003, label %1008, label %1004

1004:                                             ; preds = %923, %990
  %1005 = phi i64 [ %991, %990 ], [ %924, %923 ]
  %1006 = icmp sgt i64 %1005, 1101
  br i1 %1006, label %990, label %1007

1007:                                             ; preds = %968, %925, %1004
  store i32 %873, i32* %798, align 4
  br label %1008

1008:                                             ; preds = %971, %928, %990, %888, %948, %910, %872, %1007
  %1009 = phi i1 [ false, %1007 ], [ false, %872 ], [ %964, %948 ], [ %921, %910 ], [ %907, %888 ], [ true, %990 ], [ true, %928 ], [ true, %971 ]
  %1010 = zext i1 %1009 to i32
  store i32 %1010, i32* %877, align 4
  %1011 = call i32 (%struct.OpusCustomEncoder*, i32, ...) @opus_custom_encoder_ctl(%struct.OpusCustomEncoder* %52, i32 4036, i32 %64) #10
  %1012 = load i32, i32* %637, align 8
  %1013 = icmp eq i32 %1012, 1002
  br i1 %1013, label %1014, label %1018

1014:                                             ; preds = %1008
  %1015 = load i32, i32* %798, align 8
  %1016 = icmp eq i32 %1015, 1102
  br i1 %1016, label %1017, label %1018

1017:                                             ; preds = %1014
  store i32 1103, i32* %798, align 8
  br label %1018

1018:                                             ; preds = %1017, %1014, %1008
  %1019 = load i32, i32* %639, align 8
  %1020 = icmp eq i32 %1019, 0
  br i1 %1020, label %1022, label %1021

1021:                                             ; preds = %1018
  store i32 1101, i32* %798, align 8
  br label %1027

1022:                                             ; preds = %1018
  %1023 = load i32, i32* %798, align 8
  %1024 = icmp eq i32 %1012, 1000
  %1025 = icmp sgt i32 %1023, 1103
  %1026 = and i1 %1024, %1025
  br i1 %1026, label %1032, label %1027

1027:                                             ; preds = %1021, %1022
  %1028 = phi i32 [ 1101, %1021 ], [ %1023, %1022 ]
  %1029 = icmp eq i32 %1012, 1001
  %1030 = icmp slt i32 %1028, 1104
  %1031 = and i1 %1030, %1029
  br i1 %1031, label %1032, label %1035

1032:                                             ; preds = %1027, %1022
  %1033 = phi i32 [ 1001, %1022 ], [ 1000, %1027 ]
  %1034 = phi i32 [ %1023, %1022 ], [ %1028, %1027 ]
  store i32 %1033, i32* %637, align 8
  br label %1035

1035:                                             ; preds = %1032, %1027
  %1036 = phi i32 [ %1012, %1027 ], [ %1033, %1032 ]
  %1037 = phi i32 [ %1028, %1027 ], [ %1034, %1032 ]
  %1038 = load i32, i32* %310, align 8
  %1039 = sdiv i32 %1038, 50
  %1040 = icmp sge i32 %1039, %2
  %1041 = icmp eq i32 %1036, 1000
  %1042 = or i1 %1040, %1041
  br i1 %1042, label %1043, label %1059

1043:                                             ; preds = %1035
  %1044 = mul nsw i32 %1038, 3
  %1045 = sdiv i32 %1044, 50
  %1046 = icmp slt i32 %1045, %2
  br i1 %1046, label %1047, label %1068

1047:                                             ; preds = %1043
  %1048 = icmp eq i32 %1036, 1000
  br i1 %1048, label %1049, label %1059

1049:                                             ; preds = %1047
  %1050 = shl nsw i32 %1038, 1
  %1051 = sdiv i32 %1050, 25
  %1052 = icmp eq i32 %1051, %2
  br i1 %1052, label %1053, label %1055

1053:                                             ; preds = %1049
  %1054 = sdiv i32 %1038, 25
  br label %1059

1055:                                             ; preds = %1049
  %1056 = sdiv i32 %1044, 25
  %1057 = icmp eq i32 %1056, %2
  %1058 = select i1 %1057, i32 %1045, i32 %1039
  br label %1059

1059:                                             ; preds = %1055, %1035, %1047, %1053
  %1060 = phi i32 [ %1054, %1053 ], [ %1039, %1047 ], [ %1039, %1035 ], [ %1058, %1055 ]
  %1061 = sdiv i32 %2, %1060
  %1062 = icmp eq i32 %263, -1
  br i1 %1062, label %1066, label %1063

1063:                                             ; preds = %1059
  %1064 = getelementptr inbounds %struct.OpusEncoder, %struct.OpusEncoder* %0, i64 0, i32 23, i32 25
  store i32 %263, i32* %1064, align 4
  %1065 = getelementptr inbounds %struct.OpusEncoder, %struct.OpusEncoder* %0, i64 0, i32 23, i32 26
  store i32 %264, i32* %1065, align 4
  br label %1066

1066:                                             ; preds = %1059, %1063
  %1067 = call fastcc i32 @encode_multiframe_packet(%struct.OpusEncoder* %0, float* %1, i32 %1061, i32 %1060, i8* %3, i32 %4, i32 %661, i32 %64, i32 %12)
  br label %2820

1068:                                             ; preds = %1043
  %1069 = getelementptr inbounds %struct.OpusEncoder, %struct.OpusEncoder* %0, i64 0, i32 35
  %1070 = load i32, i32* %1069, align 8
  %1071 = icmp eq i32 %1070, 0
  br i1 %1071, label %1073, label %1072

1072:                                             ; preds = %1068
  store i32 0, i32* %1069, align 8
  br label %1073

1073:                                             ; preds = %1068, %1072
  %1074 = phi i32 [ 2, %1072 ], [ %794, %1068 ]
  %1075 = phi i32 [ 1, %1072 ], [ %659, %1068 ]
  %1076 = phi i32 [ 1, %1072 ], [ %660, %1068 ]
  %1077 = icmp eq i32 %1036, 1002
  %1078 = icmp eq i32 %1075, 0
  %1079 = or i1 %1078, %1077
  %1080 = load i32, i32* %309, align 8
  br i1 %1079, label %1109, label %1081

1081:                                             ; preds = %1073
  %1082 = load i32, i32* %532, align 8
  %1083 = mul nsw i32 %1082, 40
  %1084 = add nsw i32 %1083, 20
  %1085 = sub nsw i32 200, %311
  %1086 = mul nsw i32 %1084, %1085
  %1087 = add nsw i32 %1086, %1080
  %1088 = mul nsw i32 %1087, 3
  %1089 = sdiv i32 %1088, 3200
  %1090 = shl nsw i32 %331, 3
  %1091 = shl nsw i32 %1084, 1
  %1092 = sub nsw i32 %1090, %1091
  %1093 = mul nsw i32 %1092, 240
  %1094 = sdiv i32 48000, %311
  %1095 = add nsw i32 %1094, 240
  %1096 = sdiv i32 %1093, %1095
  %1097 = add nsw i32 %1096, %1084
  %1098 = sdiv i32 %1097, 8
  %1099 = icmp slt i32 %1089, %1098
  %1100 = select i1 %1099, i32 %1089, i32 %1098
  %1101 = shl nsw i32 %1082, 3
  %1102 = or i32 %1101, 4
  %1103 = icmp sgt i32 %1100, %1102
  %1104 = icmp slt i32 %1100, 257
  %1105 = select i1 %1104, i32 %1100, i32 257
  %1106 = select i1 %1103, i32 %1105, i32 0
  %1107 = icmp eq i32 %1106, 0
  %1108 = select i1 %1107, i32 0, i32 %1075
  br label %1109

1109:                                             ; preds = %1073, %1081
  %1110 = phi i32 [ %1108, %1081 ], [ 0, %1073 ]
  %1111 = phi i32 [ %1106, %1081 ], [ 0, %1073 ]
  %1112 = sub nsw i32 %331, %1111
  %1113 = mul nsw i32 %1080, %2
  %1114 = shl nsw i32 %1038, 3
  %1115 = sdiv i32 %1113, %1114
  %1116 = icmp slt i32 %1112, %1115
  %1117 = select i1 %1116, i32 %1112, i32 %1115
  %1118 = getelementptr inbounds i8, i8* %3, i64 1
  %1119 = add nsw i32 %331, -1
  call void @ec_enc_init(%struct.ec_ctx* nonnull %15, i8* %1118, i32 %1119) #10
  %1120 = add i32 %60, %2
  %1121 = load i32, i32* %266, align 8
  %1122 = mul nsw i32 %1121, %1120
  %1123 = sext i32 %1122 to i64
  %1124 = shl nsw i64 %1123, 2
  %1125 = alloca float, i64 %1123, align 16
  %1126 = bitcast float* %1125 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %1126, i8 -86, i64 %1124, i1 false)
  %1127 = getelementptr inbounds %struct.OpusEncoder, %struct.OpusEncoder* %0, i64 0, i32 39
  %1128 = getelementptr inbounds %struct.OpusEncoder, %struct.OpusEncoder* %0, i64 0, i32 19
  %1129 = load i32, i32* %1128, align 4
  %1130 = sub nsw i32 %1129, %60
  %1131 = mul nsw i32 %1130, %1121
  %1132 = sext i32 %1131 to i64
  %1133 = getelementptr inbounds %struct.OpusEncoder, %struct.OpusEncoder* %0, i64 0, i32 39, i64 %1132
  %1134 = bitcast float* %1133 to i8*
  %1135 = mul nsw i32 %1121, %60
  %1136 = sext i32 %1135 to i64
  %1137 = shl nsw i64 %1136, 2
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 16 %1126, i8* align 4 %1134, i64 %1137, i1 false)
  %1138 = load i32, i32* %637, align 8
  %1139 = icmp eq i32 %1138, 1002
  br i1 %1139, label %1140, label %1143

1140:                                             ; preds = %1109
  %1141 = call i32 @silk_lin2log(i32 60) #10
  %1142 = shl i32 %1141, 8
  br label %1147

1143:                                             ; preds = %1109
  %1144 = getelementptr inbounds i8, i8* %47, i64 8
  %1145 = bitcast i8* %1144 to i32*
  %1146 = load i32, i32* %1145, align 8
  br label %1147

1147:                                             ; preds = %1143, %1140
  %1148 = phi i32 [ %1142, %1140 ], [ %1146, %1143 ]
  %1149 = getelementptr inbounds %struct.OpusEncoder, %struct.OpusEncoder* %0, i64 0, i32 26
  %1150 = load i32, i32* %1149, align 8
  %1151 = sub nsw i32 %1148, %1150
  %1152 = sext i32 %1151 to i64
  %1153 = mul nsw i64 %1152, 983
  %1154 = ashr i64 %1153, 16
  %1155 = trunc i64 %1154 to i32
  %1156 = add i32 %1150, %1155
  store i32 %1156, i32* %1149, align 8
  %1157 = ashr i32 %1156, 8
  %1158 = call i32 @silk_log2lin(i32 %1157) #10
  %1159 = load i32, i32* %53, align 4
  %1160 = icmp eq i32 %1159, 2048
  %1161 = load i32, i32* %266, align 8
  %1162 = mul nsw i32 %1161, %60
  %1163 = sext i32 %1162 to i64
  %1164 = getelementptr inbounds float, float* %1125, i64 %1163
  %1165 = getelementptr inbounds %struct.OpusEncoder, %struct.OpusEncoder* %0, i64 0, i32 28, i64 0
  %1166 = load i32, i32* %310, align 8
  br i1 %1160, label %1167, label %1255

1167:                                             ; preds = %1147
  %1168 = shl i32 %1158, 16
  %1169 = ashr exact i32 %1168, 16
  %1170 = mul nsw i32 %1169, 2471
  %1171 = sdiv i32 %1166, 1000
  %1172 = sdiv i32 %1170, %1171
  %1173 = mul i32 %1172, -471
  %1174 = add i32 %1173, 268435456
  %1175 = mul i32 %1172, 942
  %1176 = add i32 %1175, -536870912
  %1177 = ashr i32 %1174, 6
  %1178 = sext i32 %1177 to i64
  %1179 = sext i32 %1172 to i64
  %1180 = mul nsw i64 %1179, %1179
  %1181 = lshr i64 %1180, 16
  %1182 = shl i64 %1181, 32
  %1183 = add i64 %1182, -36028797018963968
  %1184 = ashr exact i64 %1183, 32
  %1185 = mul nsw i64 %1184, %1178
  %1186 = lshr i64 %1185, 16
  %1187 = trunc i64 %1186 to i32
  %1188 = mul nsw i64 %1178, %1178
  %1189 = lshr i64 %1188, 16
  %1190 = trunc i64 %1189 to i32
  %1191 = sitofp i32 %1187 to float
  %1192 = fmul float %1191, 0x3E30000000000000
  %1193 = sitofp i32 %1190 to float
  %1194 = fmul float %1193, 0x3E30000000000000
  %1195 = sitofp i32 %1174 to float
  %1196 = fmul float %1195, 0x3E30000000000000
  %1197 = sitofp i32 %1176 to float
  %1198 = fmul float %1197, 0x3E30000000000000
  %1199 = icmp sgt i32 %2, 0
  br i1 %1199, label %1200, label %1225

1200:                                             ; preds = %1167
  %1201 = getelementptr inbounds %struct.OpusEncoder, %struct.OpusEncoder* %0, i64 0, i32 28, i64 1
  %1202 = sext i32 %1161 to i64
  %1203 = zext i32 %2 to i64
  %1204 = load float, float* %1165, align 4
  %1205 = load float, float* %1201, align 4
  br label %1206

1206:                                             ; preds = %1206, %1200
  %1207 = phi float [ %1205, %1200 ], [ %1221, %1206 ]
  %1208 = phi float [ %1204, %1200 ], [ %1218, %1206 ]
  %1209 = phi i64 [ 0, %1200 ], [ %1223, %1206 ]
  %1210 = mul nsw i64 %1209, %1202
  %1211 = getelementptr inbounds float, float* %1, i64 %1210
  %1212 = load float, float* %1211, align 4
  %1213 = fmul float %1196, %1212
  %1214 = fadd float %1208, %1213
  %1215 = fmul float %1192, %1214
  %1216 = fsub float %1207, %1215
  %1217 = fmul float %1198, %1212
  %1218 = fadd float %1217, %1216
  store float %1218, float* %1165, align 4
  %1219 = fmul float %1194, %1214
  %1220 = fsub float %1213, %1219
  %1221 = fadd float %1220, 0x39B4484C00000000
  store float %1221, float* %1201, align 4
  %1222 = getelementptr inbounds float, float* %1164, i64 %1210
  store float %1214, float* %1222, align 4
  %1223 = add nuw nsw i64 %1209, 1
  %1224 = icmp eq i64 %1223, %1203
  br i1 %1224, label %1225, label %1206

1225:                                             ; preds = %1206, %1167
  %1226 = icmp eq i32 %1161, 2
  br i1 %1226, label %1227, label %1347

1227:                                             ; preds = %1225
  %1228 = getelementptr inbounds float, float* %1, i64 1
  %1229 = getelementptr inbounds %struct.OpusEncoder, %struct.OpusEncoder* %0, i64 0, i32 28, i64 2
  %1230 = getelementptr inbounds float, float* %1164, i64 1
  br i1 %1199, label %1231, label %1347

1231:                                             ; preds = %1227
  %1232 = getelementptr inbounds %struct.OpusEncoder, %struct.OpusEncoder* %0, i64 0, i32 28, i64 3
  %1233 = zext i32 %2 to i64
  %1234 = load float, float* %1229, align 4
  %1235 = load float, float* %1232, align 4
  br label %1236

1236:                                             ; preds = %1236, %1231
  %1237 = phi float [ %1235, %1231 ], [ %1251, %1236 ]
  %1238 = phi float [ %1234, %1231 ], [ %1248, %1236 ]
  %1239 = phi i64 [ 0, %1231 ], [ %1253, %1236 ]
  %1240 = shl nuw nsw i64 %1239, 1
  %1241 = getelementptr inbounds float, float* %1228, i64 %1240
  %1242 = load float, float* %1241, align 4
  %1243 = fmul float %1196, %1242
  %1244 = fadd float %1238, %1243
  %1245 = fmul float %1192, %1244
  %1246 = fsub float %1237, %1245
  %1247 = fmul float %1198, %1242
  %1248 = fadd float %1247, %1246
  store float %1248, float* %1229, align 4
  %1249 = fmul float %1194, %1244
  %1250 = fsub float %1243, %1249
  %1251 = fadd float %1250, 0x39B4484C00000000
  store float %1251, float* %1232, align 4
  %1252 = getelementptr inbounds float, float* %1230, i64 %1240
  store float %1244, float* %1252, align 4
  %1253 = add nuw nsw i64 %1239, 1
  %1254 = icmp eq i64 %1253, %1233
  br i1 %1254, label %1347, label %1236

1255:                                             ; preds = %1147
  %1256 = sitofp i32 %1166 to float
  %1257 = fdiv float 0x4032E66680000000, %1256
  %1258 = fsub float 1.000000e+00, %1257
  %1259 = icmp eq i32 %1161, 2
  %1260 = load float, float* %1165, align 4
  br i1 %1259, label %1269, label %1261

1261:                                             ; preds = %1255
  %1262 = icmp sgt i32 %2, 0
  br i1 %1262, label %1263, label %1345

1263:                                             ; preds = %1261
  %1264 = zext i32 %2 to i64
  %1265 = and i64 %1264, 1
  %1266 = icmp eq i32 %2, 1
  br i1 %1266, label %1331, label %1267

1267:                                             ; preds = %1263
  %1268 = sub nsw i64 %1264, %1265
  br label %1307

1269:                                             ; preds = %1255
  %1270 = getelementptr inbounds %struct.OpusEncoder, %struct.OpusEncoder* %0, i64 0, i32 28, i64 2
  %1271 = load float, float* %1270, align 4
  %1272 = icmp sgt i32 %2, 0
  %1273 = insertelement <2 x float> undef, float %1260, i32 0
  %1274 = insertelement <2 x float> %1273, float %1271, i32 1
  br i1 %1272, label %1275, label %1303

1275:                                             ; preds = %1269
  %1276 = zext i32 %2 to i64
  %1277 = insertelement <2 x float> undef, float %1258, i32 0
  %1278 = shufflevector <2 x float> %1277, <2 x float> undef, <2 x i32> zeroinitializer
  %1279 = insertelement <2 x float> undef, float %1257, i32 0
  %1280 = shufflevector <2 x float> %1279, <2 x float> undef, <2 x i32> zeroinitializer
  br label %1281

1281:                                             ; preds = %1281, %1275
  %1282 = phi i64 [ 0, %1275 ], [ %1301, %1281 ]
  %1283 = phi <2 x float> [ %1274, %1275 ], [ %1298, %1281 ]
  %1284 = shl nuw nsw i64 %1282, 1
  %1285 = getelementptr inbounds float, float* %1, i64 %1284
  %1286 = or i64 %1284, 1
  %1287 = bitcast float* %1285 to <2 x float>*
  %1288 = load <2 x float>, <2 x float>* %1287, align 4
  %1289 = extractelement <2 x float> %1283, i32 0
  %1290 = extractelement <2 x float> %1288, i32 0
  %1291 = fsub float %1290, %1289
  %1292 = extractelement <2 x float> %1283, i32 1
  %1293 = extractelement <2 x float> %1288, i32 1
  %1294 = fsub float %1293, %1292
  %1295 = fmul <2 x float> %1280, %1288
  %1296 = fadd <2 x float> %1295, <float 0x39B4484C00000000, float 0x39B4484C00000000>
  %1297 = fmul <2 x float> %1278, %1283
  %1298 = fadd <2 x float> %1297, %1296
  %1299 = getelementptr inbounds float, float* %1164, i64 %1284
  store float %1291, float* %1299, align 4
  %1300 = getelementptr inbounds float, float* %1164, i64 %1286
  store float %1294, float* %1300, align 4
  %1301 = add nuw nsw i64 %1282, 1
  %1302 = icmp eq i64 %1301, %1276
  br i1 %1302, label %1303, label %1281

1303:                                             ; preds = %1281, %1269
  %1304 = phi <2 x float> [ %1274, %1269 ], [ %1298, %1281 ]
  %1305 = extractelement <2 x float> %1304, i32 0
  store float %1305, float* %1165, align 4
  %1306 = extractelement <2 x float> %1304, i32 1
  store float %1306, float* %1270, align 4
  br label %1347

1307:                                             ; preds = %1307, %1267
  %1308 = phi i64 [ 0, %1267 ], [ %1328, %1307 ]
  %1309 = phi float [ %1260, %1267 ], [ %1326, %1307 ]
  %1310 = phi i64 [ %1268, %1267 ], [ %1329, %1307 ]
  %1311 = getelementptr inbounds float, float* %1, i64 %1308
  %1312 = load float, float* %1311, align 4
  %1313 = fsub float %1312, %1309
  %1314 = fmul float %1257, %1312
  %1315 = fadd float %1314, 0x39B4484C00000000
  %1316 = fmul float %1258, %1309
  %1317 = fadd float %1316, %1315
  %1318 = getelementptr inbounds float, float* %1164, i64 %1308
  store float %1313, float* %1318, align 4
  %1319 = or i64 %1308, 1
  %1320 = getelementptr inbounds float, float* %1, i64 %1319
  %1321 = load float, float* %1320, align 4
  %1322 = fsub float %1321, %1317
  %1323 = fmul float %1257, %1321
  %1324 = fadd float %1323, 0x39B4484C00000000
  %1325 = fmul float %1258, %1317
  %1326 = fadd float %1325, %1324
  %1327 = getelementptr inbounds float, float* %1164, i64 %1319
  store float %1322, float* %1327, align 4
  %1328 = add nuw nsw i64 %1308, 2
  %1329 = add i64 %1310, -2
  %1330 = icmp eq i64 %1329, 0
  br i1 %1330, label %1331, label %1307

1331:                                             ; preds = %1307, %1263
  %1332 = phi float [ undef, %1263 ], [ %1326, %1307 ]
  %1333 = phi i64 [ 0, %1263 ], [ %1328, %1307 ]
  %1334 = phi float [ %1260, %1263 ], [ %1326, %1307 ]
  %1335 = icmp eq i64 %1265, 0
  br i1 %1335, label %1345, label %1336

1336:                                             ; preds = %1331
  %1337 = getelementptr inbounds float, float* %1, i64 %1333
  %1338 = load float, float* %1337, align 4
  %1339 = fsub float %1338, %1334
  %1340 = getelementptr inbounds float, float* %1164, i64 %1333
  store float %1339, float* %1340, align 4
  %1341 = fmul float %1258, %1334
  %1342 = fmul float %1257, %1338
  %1343 = fadd float %1342, 0x39B4484C00000000
  %1344 = fadd float %1341, %1343
  br label %1345

1345:                                             ; preds = %1336, %1331, %1261
  %1346 = phi float [ %1260, %1261 ], [ %1332, %1331 ], [ %1344, %1336 ]
  store float %1346, float* %1165, align 4
  br label %1347

1347:                                             ; preds = %1236, %1345, %1303, %1227, %1225
  %1348 = icmp eq i32 %12, 0
  br i1 %1348, label %1365, label %1349

1349:                                             ; preds = %1347
  %1350 = mul nsw i32 %1161, %2
  %1351 = call float @celt_inner_prod_sse(float* %1164, float* %1164, i32 %1350) #10
  %1352 = fcmp uge float %1351, 1.000000e+09
  %1353 = fcmp uno float %1351, 0.000000e+00
  %1354 = or i1 %1352, %1353
  br i1 %1354, label %1355, label %1365

1355:                                             ; preds = %1349
  %1356 = load i32, i32* %266, align 8
  %1357 = mul nsw i32 %1356, %60
  %1358 = sext i32 %1357 to i64
  %1359 = getelementptr inbounds float, float* %1125, i64 %1358
  %1360 = bitcast float* %1359 to i8*
  %1361 = mul nsw i32 %1356, %2
  %1362 = sext i32 %1361 to i64
  %1363 = shl nsw i64 %1362, 2
  call void @llvm.memset.p0i8.i64(i8* align 4 %1360, i8 0, i64 %1363, i1 false)
  %1364 = bitcast float* %1165 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %1364, i8 0, i64 16, i1 false)
  br label %1365

1365:                                             ; preds = %1355, %1349, %1347
  %1366 = load i32, i32* %637, align 8
  %1367 = icmp eq i32 %1366, 1002
  br i1 %1367, label %1978, label %1368

1368:                                             ; preds = %1365
  %1369 = load i32, i32* %266, align 8
  %1370 = mul nsw i32 %1369, %2
  %1371 = sext i32 %1370 to i64
  %1372 = shl nsw i64 %1371, 1
  %1373 = alloca i16, i64 %1371, align 16
  %1374 = bitcast i16* %1373 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %1374, i8 -86, i64 %1372, i1 false)
  %1375 = shl i32 %1117, 3
  %1376 = add i32 %1375, -8
  %1377 = mul nsw i32 %1376, %311
  %1378 = icmp eq i32 %1366, 1001
  br i1 %1378, label %1379, label %1456

1379:                                             ; preds = %1368
  %1380 = load i32, i32* %310, align 8
  %1381 = mul nsw i32 %2, 50
  %1382 = icmp eq i32 %1380, %1381
  %1383 = load i32, i32* %312, align 4
  %1384 = load i32, i32* %877, align 4
  %1385 = load i32, i32* %532, align 8
  %1386 = sdiv i32 %1377, %1385
  %1387 = select i1 %1382, i32 2, i32 1
  %1388 = shl nsw i32 %1384, 1
  %1389 = add nsw i32 %1388, %1387
  %1390 = icmp slt i32 %1386, 12000
  br i1 %1390, label %1400, label %1391

1391:                                             ; preds = %1379
  %1392 = icmp slt i32 %1386, 16000
  br i1 %1392, label %1400, label %1421

1393:                                             ; preds = %1427
  %1394 = sext i32 %1389 to i64
  %1395 = getelementptr inbounds [7 x [5 x i32]], [7 x [5 x i32]]* @compute_silk_rate_for_hybrid.rate_table, i64 0, i64 6, i64 %1394
  %1396 = load i32, i32* %1395, align 4
  %1397 = add nsw i32 %1386, -64000
  %1398 = sdiv i32 %1397, 2
  %1399 = add nsw i32 %1396, %1398
  br label %1429

1400:                                             ; preds = %1427, %1425, %1423, %1421, %1391, %1379
  %1401 = phi i32 [ 1, %1379 ], [ 2, %1391 ], [ 3, %1421 ], [ 4, %1423 ], [ 5, %1425 ], [ 6, %1427 ]
  %1402 = zext i32 %1401 to i64
  %1403 = sext i32 %1389 to i64
  %1404 = getelementptr inbounds [7 x [5 x i32]], [7 x [5 x i32]]* @compute_silk_rate_for_hybrid.rate_table, i64 0, i64 %1402, i64 %1403
  %1405 = load i32, i32* %1404, align 4
  %1406 = add nsw i32 %1401, -1
  %1407 = sext i32 %1406 to i64
  %1408 = getelementptr inbounds [7 x [5 x i32]], [7 x [5 x i32]]* @compute_silk_rate_for_hybrid.rate_table, i64 0, i64 %1407, i64 %1403
  %1409 = load i32, i32* %1408, align 4
  %1410 = getelementptr inbounds [7 x [5 x i32]], [7 x [5 x i32]]* @compute_silk_rate_for_hybrid.rate_table, i64 0, i64 %1407, i64 0
  %1411 = load i32, i32* %1410, align 4
  %1412 = getelementptr inbounds [7 x [5 x i32]], [7 x [5 x i32]]* @compute_silk_rate_for_hybrid.rate_table, i64 0, i64 %1402, i64 0
  %1413 = load i32, i32* %1412, align 4
  %1414 = sub nsw i32 %1413, %1386
  %1415 = mul nsw i32 %1414, %1409
  %1416 = sub nsw i32 %1386, %1411
  %1417 = mul nsw i32 %1416, %1405
  %1418 = add nsw i32 %1415, %1417
  %1419 = sub nsw i32 %1413, %1411
  %1420 = sdiv i32 %1418, %1419
  br label %1429

1421:                                             ; preds = %1391
  %1422 = icmp slt i32 %1386, 20000
  br i1 %1422, label %1400, label %1423

1423:                                             ; preds = %1421
  %1424 = icmp slt i32 %1386, 24000
  br i1 %1424, label %1400, label %1425

1425:                                             ; preds = %1423
  %1426 = icmp slt i32 %1386, 32000
  br i1 %1426, label %1400, label %1427

1427:                                             ; preds = %1425
  %1428 = icmp slt i32 %1386, 64000
  br i1 %1428, label %1400, label %1393

1429:                                             ; preds = %1393, %1400
  %1430 = phi i32 [ %1399, %1393 ], [ %1420, %1400 ]
  %1431 = icmp eq i32 %1383, 0
  %1432 = add nsw i32 %1430, 100
  %1433 = select i1 %1431, i32 %1432, i32 %1430
  %1434 = icmp eq i32 %1037, 1104
  %1435 = add nsw i32 %1433, 300
  %1436 = select i1 %1434, i32 %1435, i32 %1433
  %1437 = mul nsw i32 %1436, %1385
  %1438 = icmp eq i32 %1385, 2
  %1439 = icmp sgt i32 %1386, 11999
  %1440 = and i1 %1438, %1439
  %1441 = add nsw i32 %1437, -1000
  %1442 = select i1 %1440, i32 %1441, i32 %1437
  %1443 = getelementptr inbounds %struct.OpusEncoder, %struct.OpusEncoder* %0, i64 0, i32 2, i32 7
  store i32 %1442, i32* %1443, align 4
  %1444 = getelementptr inbounds %struct.OpusEncoder, %struct.OpusEncoder* %0, i64 0, i32 37
  %1445 = load float*, float** %1444, align 8
  %1446 = icmp eq float* %1445, null
  br i1 %1446, label %1447, label %1458

1447:                                             ; preds = %1429
  %1448 = sub i32 %1442, %1377
  %1449 = sitofp i32 %1448 to float
  %1450 = fmul float %1449, 0x3F50000000000000
  %1451 = fpext float %1450 to double
  %1452 = fmul double %1451, 0x3FE62E42FEFA39EF
  %1453 = call double @exp(double %1452) #10
  %1454 = fptrunc double %1453 to float
  %1455 = fsub float 1.000000e+00, %1454
  br label %1458

1456:                                             ; preds = %1368
  %1457 = getelementptr inbounds %struct.OpusEncoder, %struct.OpusEncoder* %0, i64 0, i32 2, i32 7
  store i32 %1377, i32* %1457, align 4
  br label %1458

1458:                                             ; preds = %1429, %1447, %1456
  %1459 = phi float [ 1.000000e+00, %1429 ], [ %1455, %1447 ], [ 1.000000e+00, %1456 ]
  %1460 = getelementptr inbounds %struct.OpusEncoder, %struct.OpusEncoder* %0, i64 0, i32 37
  %1461 = load float*, float** %1460, align 8
  %1462 = icmp eq float* %1461, null
  br i1 %1462, label %1531, label %1463

1463:                                             ; preds = %1458
  %1464 = load i32, i32* %312, align 4
  %1465 = icmp eq i32 %1464, 0
  br i1 %1465, label %1531, label %1466

1466:                                             ; preds = %1463
  %1467 = load i32, i32* %639, align 8
  %1468 = icmp eq i32 %1467, 0
  br i1 %1468, label %1469, label %1531

1469:                                             ; preds = %1466
  %1470 = load i32, i32* %798, align 8
  switch i32 %1470, label %1472 [
    i32 1101, label %1473
    i32 1102, label %1471
  ]

1471:                                             ; preds = %1469
  br label %1473

1472:                                             ; preds = %1469
  br label %1473

1473:                                             ; preds = %1469, %1472, %1471
  %1474 = phi i32 [ 15, %1471 ], [ 13, %1469 ], [ 17, %1472 ]
  %1475 = phi float [ 1.200000e+04, %1471 ], [ 8.000000e+03, %1469 ], [ 1.600000e+04, %1472 ]
  %1476 = load i32, i32* %266, align 8
  %1477 = icmp sgt i32 %1476, 0
  br i1 %1477, label %1478, label %1508

1478:                                             ; preds = %1473
  %1479 = sext i32 %1476 to i64
  %1480 = zext i32 %1474 to i64
  br label %1481

1481:                                             ; preds = %1478, %1505
  %1482 = phi i64 [ 0, %1478 ], [ %1506, %1505 ]
  %1483 = phi float [ 0.000000e+00, %1478 ], [ %1502, %1505 ]
  %1484 = mul i64 %1482, 21
  %1485 = and i64 %1484, 4294967295
  br label %1486

1486:                                             ; preds = %1486, %1481
  %1487 = phi i64 [ 0, %1481 ], [ %1503, %1486 ]
  %1488 = phi float [ %1483, %1481 ], [ %1502, %1486 ]
  %1489 = add nuw nsw i64 %1487, %1485
  %1490 = getelementptr inbounds float, float* %1461, i64 %1489
  %1491 = load float, float* %1490, align 4
  %1492 = fcmp olt float %1491, 5.000000e-01
  %1493 = select i1 %1492, float %1491, float 5.000000e-01
  %1494 = fcmp ule float %1493, -2.000000e+00
  %1495 = xor i1 %1492, true
  %1496 = or i1 %1494, %1495
  %1497 = select i1 %1494, float -2.000000e+00, float 5.000000e-01
  %1498 = select i1 %1496, float %1497, float %1491
  %1499 = fcmp ogt float %1498, 0.000000e+00
  %1500 = fmul float %1498, 5.000000e-01
  %1501 = select i1 %1499, float %1500, float %1498
  %1502 = fadd float %1488, %1501
  %1503 = add nuw nsw i64 %1487, 1
  %1504 = icmp eq i64 %1503, %1480
  br i1 %1504, label %1505, label %1486

1505:                                             ; preds = %1486
  %1506 = add nuw nsw i64 %1482, 1
  %1507 = icmp slt i64 %1506, %1479
  br i1 %1507, label %1481, label %1508

1508:                                             ; preds = %1505, %1473
  %1509 = phi float [ 0.000000e+00, %1473 ], [ %1502, %1505 ]
  %1510 = sitofp i32 %1474 to float
  %1511 = fdiv float %1509, %1510
  %1512 = sitofp i32 %1476 to float
  %1513 = fmul float %1511, %1512
  %1514 = fadd float %1513, 0x3FC99999A0000000
  %1515 = fmul float %1475, %1514
  %1516 = fptosi float %1515 to i32
  %1517 = getelementptr inbounds %struct.OpusEncoder, %struct.OpusEncoder* %0, i64 0, i32 2, i32 7
  %1518 = load i32, i32* %1517, align 4
  %1519 = mul nsw i32 %1518, -2
  %1520 = sdiv i32 %1519, 3
  %1521 = icmp slt i32 %1520, %1516
  %1522 = select i1 %1521, i32 %1516, i32 %1520
  %1523 = and i32 %1470, -2
  %1524 = icmp eq i32 %1523, 1104
  br i1 %1524, label %1525, label %1528

1525:                                             ; preds = %1508
  %1526 = mul nsw i32 %1522, 3
  %1527 = sdiv i32 %1526, 5
  br label %1528

1528:                                             ; preds = %1508, %1525
  %1529 = phi i32 [ %1527, %1525 ], [ %1522, %1508 ]
  %1530 = add nsw i32 %1529, %1518
  store i32 %1530, i32* %1517, align 4
  br label %1531

1531:                                             ; preds = %1466, %1463, %1458, %1528
  %1532 = mul nsw i32 %2, 1000
  %1533 = load i32, i32* %310, align 8
  %1534 = sdiv i32 %1532, %1533
  %1535 = getelementptr inbounds %struct.OpusEncoder, %struct.OpusEncoder* %0, i64 0, i32 2, i32 6
  store i32 %1534, i32* %1535, align 8
  %1536 = load i32, i32* %266, align 8
  %1537 = getelementptr inbounds %struct.silk_EncControlStruct, %struct.silk_EncControlStruct* %67, i64 0, i32 0
  store i32 %1536, i32* %1537, align 8
  %1538 = load i32, i32* %532, align 8
  %1539 = getelementptr inbounds %struct.OpusEncoder, %struct.OpusEncoder* %0, i64 0, i32 2, i32 1
  store i32 %1538, i32* %1539, align 4
  switch i32 %1037, label %1541 [
    i32 1101, label %1547
    i32 1102, label %1540
  ]

1540:                                             ; preds = %1531
  br label %1547

1541:                                             ; preds = %1531
  %1542 = load i32, i32* %637, align 8
  %1543 = icmp eq i32 %1542, 1001
  %1544 = icmp eq i32 %1037, 1103
  %1545 = or i1 %1544, %1543
  br i1 %1545, label %1547, label %1546

1546:                                             ; preds = %1541
  call void @celt_fatal(i8* getelementptr inbounds ([87 x i8], [87 x i8]* @.str, i64 0, i64 0), i8* getelementptr inbounds ([46 x i8], [46 x i8]* @.str.1, i64 0, i64 0), i32 1747) #13
  unreachable

1547:                                             ; preds = %1541, %1531, %1540
  %1548 = phi i32 [ 12000, %1540 ], [ 8000, %1531 ], [ 16000, %1541 ]
  %1549 = getelementptr inbounds %struct.OpusEncoder, %struct.OpusEncoder* %0, i64 0, i32 2, i32 5
  store i32 %1548, i32* %1549, align 4
  %1550 = load i32, i32* %637, align 8
  %1551 = icmp eq i32 %1550, 1001
  %1552 = getelementptr inbounds %struct.OpusEncoder, %struct.OpusEncoder* %0, i64 0, i32 2, i32 4
  %1553 = select i1 %1551, i32 16000, i32 8000
  store i32 %1553, i32* %1552, align 8
  %1554 = getelementptr inbounds %struct.OpusEncoder, %struct.OpusEncoder* %0, i64 0, i32 2, i32 3
  store i32 16000, i32* %1554, align 4
  %1555 = icmp eq i32 %1550, 1000
  br i1 %1555, label %1556, label %1569

1556:                                             ; preds = %1547
  br i1 %468, label %1557, label %1560

1557:                                             ; preds = %1556
  %1558 = shl nsw i32 %338, 4
  %1559 = sdiv i32 %1558, 3
  br label %1560

1560:                                             ; preds = %1557, %1556
  %1561 = phi i32 [ %1559, %1557 ], [ %473, %1556 ]
  %1562 = icmp slt i32 %1561, 8000
  br i1 %1562, label %1563, label %1569

1563:                                             ; preds = %1560
  store i32 12000, i32* %1554, align 4
  %1564 = getelementptr inbounds %struct.OpusEncoder, %struct.OpusEncoder* %0, i64 0, i32 2, i32 5
  %1565 = icmp ult i32 %1548, 12000
  %1566 = select i1 %1565, i32 %1548, i32 12000
  store i32 %1566, i32* %1564, align 4
  %1567 = icmp slt i32 %1561, 7000
  br i1 %1567, label %1568, label %1569

1568:                                             ; preds = %1563
  store i32 8000, i32* %1554, align 4
  store i32 8000, i32* %1564, align 4
  br label %1569

1569:                                             ; preds = %1560, %1563, %1568, %1547
  %1570 = load i32, i32* %312, align 4
  %1571 = icmp eq i32 %1570, 0
  %1572 = zext i1 %1571 to i32
  %1573 = getelementptr inbounds %struct.OpusEncoder, %struct.OpusEncoder* %0, i64 0, i32 2, i32 13
  store i32 %1572, i32* %1573, align 4
  %1574 = shl nsw i32 %1119, 3
  %1575 = getelementptr inbounds %struct.OpusEncoder, %struct.OpusEncoder* %0, i64 0, i32 2, i32 14
  store i32 %1574, i32* %1575, align 8
  %1576 = icmp ne i32 %1110, 0
  %1577 = icmp sgt i32 %1111, 1
  %1578 = and i1 %1576, %1577
  br i1 %1578, label %1579, label %1585

1579:                                             ; preds = %1569
  %1580 = shl nsw i32 %1111, 3
  %1581 = or i32 %1580, 1
  %1582 = sub nsw i32 %1574, %1581
  store i32 %1582, i32* %1575, align 8
  br i1 %1551, label %1583, label %1585

1583:                                             ; preds = %1579
  %1584 = add nsw i32 %1582, -20
  store i32 %1584, i32* %1575, align 8
  br label %1585

1585:                                             ; preds = %1579, %1583, %1569
  %1586 = phi i32 [ %1582, %1579 ], [ %1584, %1583 ], [ %1574, %1569 ]
  br i1 %1571, label %1587, label %1595

1587:                                             ; preds = %1585
  br i1 %1551, label %1588, label %1658

1588:                                             ; preds = %1587
  %1589 = getelementptr inbounds %struct.OpusEncoder, %struct.OpusEncoder* %0, i64 0, i32 2, i32 7
  %1590 = load i32, i32* %1589, align 4
  %1591 = mul nsw i32 %1590, %2
  %1592 = sdiv i32 %1591, %1533
  %1593 = icmp slt i32 %1586, %1592
  %1594 = select i1 %1593, i32 %1586, i32 %1592
  store i32 %1594, i32* %1575, align 8
  br label %1658

1595:                                             ; preds = %1585
  br i1 %1551, label %1596, label %1658

1596:                                             ; preds = %1595
  %1597 = mul nsw i32 %1586, %1533
  %1598 = sdiv i32 %1597, %2
  %1599 = mul nsw i32 %2, 50
  %1600 = icmp eq i32 %1533, %1599
  %1601 = load i32, i32* %877, align 4
  %1602 = sdiv i32 %1598, %1538
  %1603 = select i1 %1600, i32 2, i32 1
  %1604 = shl nsw i32 %1601, 1
  %1605 = add nsw i32 %1604, %1603
  %1606 = icmp slt i32 %1602, 12000
  br i1 %1606, label %1616, label %1607

1607:                                             ; preds = %1596
  %1608 = icmp slt i32 %1602, 16000
  br i1 %1608, label %1616, label %1637

1609:                                             ; preds = %1643
  %1610 = sext i32 %1605 to i64
  %1611 = getelementptr inbounds [7 x [5 x i32]], [7 x [5 x i32]]* @compute_silk_rate_for_hybrid.rate_table, i64 0, i64 6, i64 %1610
  %1612 = load i32, i32* %1611, align 4
  %1613 = add nsw i32 %1602, -64000
  %1614 = sdiv i32 %1613, 2
  %1615 = add nsw i32 %1612, %1614
  br label %1645

1616:                                             ; preds = %1643, %1641, %1639, %1637, %1607, %1596
  %1617 = phi i32 [ 1, %1596 ], [ 2, %1607 ], [ 3, %1637 ], [ 4, %1639 ], [ 5, %1641 ], [ 6, %1643 ]
  %1618 = zext i32 %1617 to i64
  %1619 = sext i32 %1605 to i64
  %1620 = getelementptr inbounds [7 x [5 x i32]], [7 x [5 x i32]]* @compute_silk_rate_for_hybrid.rate_table, i64 0, i64 %1618, i64 %1619
  %1621 = load i32, i32* %1620, align 4
  %1622 = add nsw i32 %1617, -1
  %1623 = sext i32 %1622 to i64
  %1624 = getelementptr inbounds [7 x [5 x i32]], [7 x [5 x i32]]* @compute_silk_rate_for_hybrid.rate_table, i64 0, i64 %1623, i64 %1619
  %1625 = load i32, i32* %1624, align 4
  %1626 = getelementptr inbounds [7 x [5 x i32]], [7 x [5 x i32]]* @compute_silk_rate_for_hybrid.rate_table, i64 0, i64 %1623, i64 0
  %1627 = load i32, i32* %1626, align 4
  %1628 = getelementptr inbounds [7 x [5 x i32]], [7 x [5 x i32]]* @compute_silk_rate_for_hybrid.rate_table, i64 0, i64 %1618, i64 0
  %1629 = load i32, i32* %1628, align 4
  %1630 = sub nsw i32 %1629, %1602
  %1631 = mul nsw i32 %1630, %1625
  %1632 = sub nsw i32 %1602, %1627
  %1633 = mul nsw i32 %1632, %1621
  %1634 = add nsw i32 %1631, %1633
  %1635 = sub nsw i32 %1629, %1627
  %1636 = sdiv i32 %1634, %1635
  br label %1645

1637:                                             ; preds = %1607
  %1638 = icmp slt i32 %1602, 20000
  br i1 %1638, label %1616, label %1639

1639:                                             ; preds = %1637
  %1640 = icmp slt i32 %1602, 24000
  br i1 %1640, label %1616, label %1641

1641:                                             ; preds = %1639
  %1642 = icmp slt i32 %1602, 32000
  br i1 %1642, label %1616, label %1643

1643:                                             ; preds = %1641
  %1644 = icmp slt i32 %1602, 64000
  br i1 %1644, label %1616, label %1609

1645:                                             ; preds = %1609, %1616
  %1646 = phi i32 [ %1615, %1609 ], [ %1636, %1616 ]
  %1647 = icmp eq i32 %1037, 1104
  %1648 = add nsw i32 %1646, 300
  %1649 = select i1 %1647, i32 %1648, i32 %1646
  %1650 = mul nsw i32 %1649, %1538
  %1651 = icmp eq i32 %1538, 2
  %1652 = icmp sgt i32 %1602, 11999
  %1653 = and i1 %1651, %1652
  %1654 = add nsw i32 %1650, -1000
  %1655 = select i1 %1653, i32 %1654, i32 %1650
  %1656 = mul nsw i32 %1655, %2
  %1657 = sdiv i32 %1656, %1533
  store i32 %1657, i32* %1575, align 8
  br label %1658

1658:                                             ; preds = %1595, %1645, %1587, %1588
  %1659 = icmp eq i32 %1074, 0
  br i1 %1659, label %1813, label %1660

1660:                                             ; preds = %1658
  %1661 = bitcast i32* %20 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %1661) #10
  store i32 0, i32* %20, align 4
  %1662 = load i32, i32* %1128, align 4
  %1663 = getelementptr inbounds %struct.OpusEncoder, %struct.OpusEncoder* %0, i64 0, i32 5
  %1664 = load i32, i32* %1663, align 4
  %1665 = sdiv i32 %1533, 400
  %1666 = sub i32 %1662, %1665
  %1667 = sub i32 %1666, %1664
  %1668 = mul nsw i32 %1667, %1536
  %1669 = sext i32 %1668 to i64
  %1670 = getelementptr inbounds %struct.OpusEncoder, %struct.OpusEncoder* %0, i64 0, i32 39, i64 %1669
  %1671 = load %struct.OpusCustomMode*, %struct.OpusCustomMode** %17, align 8
  %1672 = getelementptr inbounds %struct.OpusCustomMode, %struct.OpusCustomMode* %1671, i64 0, i32 1
  %1673 = load i32, i32* %1672, align 4
  %1674 = getelementptr inbounds %struct.OpusCustomMode, %struct.OpusCustomMode* %1671, i64 0, i32 12
  %1675 = load float*, float** %1674, align 8
  %1676 = sdiv i32 48000, %1533
  %1677 = sdiv i32 %1673, %1676
  %1678 = icmp eq i32 %1536, 1
  %1679 = icmp sgt i32 %1677, 0
  br i1 %1678, label %1684, label %1680

1680:                                             ; preds = %1660
  br i1 %1679, label %1681, label %1752

1681:                                             ; preds = %1680
  %1682 = sext i32 %1676 to i64
  %1683 = zext i32 %1677 to i64
  br label %1719

1684:                                             ; preds = %1660
  br i1 %1679, label %1685, label %1752

1685:                                             ; preds = %1684
  %1686 = sext i32 %1676 to i64
  %1687 = zext i32 %1677 to i64
  %1688 = and i64 %1687, 1
  %1689 = icmp eq i32 %1677, 1
  br i1 %1689, label %1738, label %1690

1690:                                             ; preds = %1685
  %1691 = sub nsw i64 %1687, %1688
  br label %1692

1692:                                             ; preds = %1692, %1690
  %1693 = phi i64 [ 0, %1690 ], [ %1716, %1692 ]
  %1694 = phi i64 [ %1691, %1690 ], [ %1717, %1692 ]
  %1695 = mul nsw i64 %1693, %1686
  %1696 = getelementptr inbounds float, float* %1675, i64 %1695
  %1697 = load float, float* %1696, align 4
  %1698 = fmul float %1697, %1697
  %1699 = fsub float 1.000000e+00, %1698
  %1700 = fmul float %1699, 0.000000e+00
  %1701 = fadd float %1698, %1700
  %1702 = getelementptr inbounds float, float* %1670, i64 %1693
  %1703 = load float, float* %1702, align 4
  %1704 = fmul float %1703, %1701
  store float %1704, float* %1702, align 4
  %1705 = or i64 %1693, 1
  %1706 = mul nsw i64 %1705, %1686
  %1707 = getelementptr inbounds float, float* %1675, i64 %1706
  %1708 = load float, float* %1707, align 4
  %1709 = fmul float %1708, %1708
  %1710 = fsub float 1.000000e+00, %1709
  %1711 = fmul float %1710, 0.000000e+00
  %1712 = fadd float %1709, %1711
  %1713 = getelementptr inbounds float, float* %1670, i64 %1705
  %1714 = load float, float* %1713, align 4
  %1715 = fmul float %1714, %1712
  store float %1715, float* %1713, align 4
  %1716 = add nuw nsw i64 %1693, 2
  %1717 = add i64 %1694, -2
  %1718 = icmp eq i64 %1717, 0
  br i1 %1718, label %1738, label %1692

1719:                                             ; preds = %1719, %1681
  %1720 = phi i64 [ 0, %1681 ], [ %1736, %1719 ]
  %1721 = mul nsw i64 %1720, %1682
  %1722 = getelementptr inbounds float, float* %1675, i64 %1721
  %1723 = load float, float* %1722, align 4
  %1724 = fmul float %1723, %1723
  %1725 = fsub float 1.000000e+00, %1724
  %1726 = fmul float %1725, 0.000000e+00
  %1727 = fadd float %1724, %1726
  %1728 = shl nuw nsw i64 %1720, 1
  %1729 = getelementptr inbounds float, float* %1670, i64 %1728
  %1730 = load float, float* %1729, align 4
  %1731 = fmul float %1730, %1727
  store float %1731, float* %1729, align 4
  %1732 = or i64 %1728, 1
  %1733 = getelementptr inbounds float, float* %1670, i64 %1732
  %1734 = load float, float* %1733, align 4
  %1735 = fmul float %1734, %1727
  store float %1735, float* %1733, align 4
  %1736 = add nuw nsw i64 %1720, 1
  %1737 = icmp eq i64 %1736, %1683
  br i1 %1737, label %1752, label %1719

1738:                                             ; preds = %1692, %1685
  %1739 = phi i64 [ 0, %1685 ], [ %1716, %1692 ]
  %1740 = icmp eq i64 %1688, 0
  br i1 %1740, label %1752, label %1741

1741:                                             ; preds = %1738
  %1742 = mul nsw i64 %1739, %1686
  %1743 = getelementptr inbounds float, float* %1675, i64 %1742
  %1744 = load float, float* %1743, align 4
  %1745 = fmul float %1744, %1744
  %1746 = fsub float 1.000000e+00, %1745
  %1747 = fmul float %1746, 0.000000e+00
  %1748 = fadd float %1745, %1747
  %1749 = getelementptr inbounds float, float* %1670, i64 %1739
  %1750 = load float, float* %1749, align 4
  %1751 = fmul float %1750, %1748
  store float %1751, float* %1749, align 4
  br label %1752

1752:                                             ; preds = %1719, %1741, %1738, %1680, %1684
  %1753 = bitcast [960 x float]* %1127 to i8*
  %1754 = shl nsw i64 %1669, 2
  call void @llvm.memset.p0i8.i64(i8* align 4 %1753, i8 0, i64 %1754, i1 false)
  %1755 = load i32, i32* %1128, align 4
  %1756 = load i32, i32* %266, align 8
  %1757 = mul nsw i32 %1756, %1755
  %1758 = icmp sgt i32 %1757, 0
  br i1 %1758, label %1759, label %1809

1759:                                             ; preds = %1752
  %1760 = sext i32 %1757 to i64
  %1761 = and i64 %1760, 1
  %1762 = icmp eq i32 %1757, 1
  br i1 %1762, label %1794, label %1763

1763:                                             ; preds = %1759
  %1764 = sub nsw i64 %1760, %1761
  br label %1765

1765:                                             ; preds = %1765, %1763
  %1766 = phi i64 [ 0, %1763 ], [ %1791, %1765 ]
  %1767 = phi i64 [ %1764, %1763 ], [ %1792, %1765 ]
  %1768 = getelementptr inbounds %struct.OpusEncoder, %struct.OpusEncoder* %0, i64 0, i32 39, i64 %1766
  %1769 = load float, float* %1768, align 4
  %1770 = fmul float %1769, 3.276800e+04
  %1771 = fcmp ogt float %1770, -3.276800e+04
  %1772 = select i1 %1771, float %1770, float -3.276800e+04
  %1773 = fcmp olt float %1772, 3.276700e+04
  %1774 = select i1 %1773, float %1772, float 3.276700e+04
  %1775 = insertelement <4 x float> undef, float %1774, i32 0
  %1776 = call i32 @llvm.x86.sse.cvtss2si(<4 x float> %1775) #10
  %1777 = trunc i32 %1776 to i16
  %1778 = getelementptr inbounds i16, i16* %1373, i64 %1766
  store i16 %1777, i16* %1778, align 4
  %1779 = or i64 %1766, 1
  %1780 = getelementptr inbounds %struct.OpusEncoder, %struct.OpusEncoder* %0, i64 0, i32 39, i64 %1779
  %1781 = load float, float* %1780, align 4
  %1782 = fmul float %1781, 3.276800e+04
  %1783 = fcmp ogt float %1782, -3.276800e+04
  %1784 = select i1 %1783, float %1782, float -3.276800e+04
  %1785 = fcmp olt float %1784, 3.276700e+04
  %1786 = select i1 %1785, float %1784, float 3.276700e+04
  %1787 = insertelement <4 x float> undef, float %1786, i32 0
  %1788 = call i32 @llvm.x86.sse.cvtss2si(<4 x float> %1787) #10
  %1789 = trunc i32 %1788 to i16
  %1790 = getelementptr inbounds i16, i16* %1373, i64 %1779
  store i16 %1789, i16* %1790, align 2
  %1791 = add nuw nsw i64 %1766, 2
  %1792 = add i64 %1767, -2
  %1793 = icmp eq i64 %1792, 0
  br i1 %1793, label %1794, label %1765

1794:                                             ; preds = %1765, %1759
  %1795 = phi i64 [ 0, %1759 ], [ %1791, %1765 ]
  %1796 = icmp eq i64 %1761, 0
  br i1 %1796, label %1809, label %1797

1797:                                             ; preds = %1794
  %1798 = getelementptr inbounds %struct.OpusEncoder, %struct.OpusEncoder* %0, i64 0, i32 39, i64 %1795
  %1799 = load float, float* %1798, align 4
  %1800 = fmul float %1799, 3.276800e+04
  %1801 = fcmp ogt float %1800, -3.276800e+04
  %1802 = select i1 %1801, float %1800, float -3.276800e+04
  %1803 = fcmp olt float %1802, 3.276700e+04
  %1804 = select i1 %1803, float %1802, float 3.276700e+04
  %1805 = insertelement <4 x float> undef, float %1804, i32 0
  %1806 = call i32 @llvm.x86.sse.cvtss2si(<4 x float> %1805) #10
  %1807 = trunc i32 %1806 to i16
  %1808 = getelementptr inbounds i16, i16* %1373, i64 %1795
  store i16 %1807, i16* %1808, align 2
  br label %1809

1809:                                             ; preds = %1797, %1794, %1752
  %1810 = call i32 @silk_Encode(i8* %47, %struct.silk_EncControlStruct* %67, i16* nonnull %1373, i32 %1755, %struct.ec_ctx* null, i32* nonnull %20, i32 %1074, i32 %262) #10
  %1811 = getelementptr inbounds %struct.OpusEncoder, %struct.OpusEncoder* %0, i64 0, i32 2, i32 16
  store i32 0, i32* %1811, align 8
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %1661) #10
  %1812 = load i32, i32* %266, align 8
  br label %1813

1813:                                             ; preds = %1658, %1809
  %1814 = phi i32 [ %1536, %1658 ], [ %1812, %1809 ]
  %1815 = mul nsw i32 %1814, %2
  %1816 = icmp sgt i32 %1815, 0
  br i1 %1816, label %1817, label %1877

1817:                                             ; preds = %1813
  %1818 = sext i32 %1815 to i64
  %1819 = mul nsw i32 %1814, %60
  %1820 = and i64 %1818, 1
  %1821 = icmp eq i32 %1815, 1
  br i1 %1821, label %1859, label %1822

1822:                                             ; preds = %1817
  %1823 = sub nsw i64 %1818, %1820
  br label %1824

1824:                                             ; preds = %1824, %1822
  %1825 = phi i64 [ 0, %1822 ], [ %1856, %1824 ]
  %1826 = phi i64 [ %1823, %1822 ], [ %1857, %1824 ]
  %1827 = trunc i64 %1825 to i32
  %1828 = add nsw i32 %1819, %1827
  %1829 = sext i32 %1828 to i64
  %1830 = getelementptr inbounds float, float* %1125, i64 %1829
  %1831 = load float, float* %1830, align 4
  %1832 = fmul float %1831, 3.276800e+04
  %1833 = fcmp ogt float %1832, -3.276800e+04
  %1834 = select i1 %1833, float %1832, float -3.276800e+04
  %1835 = fcmp olt float %1834, 3.276700e+04
  %1836 = select i1 %1835, float %1834, float 3.276700e+04
  %1837 = insertelement <4 x float> undef, float %1836, i32 0
  %1838 = call i32 @llvm.x86.sse.cvtss2si(<4 x float> %1837) #10
  %1839 = trunc i32 %1838 to i16
  %1840 = getelementptr inbounds i16, i16* %1373, i64 %1825
  store i16 %1839, i16* %1840, align 4
  %1841 = or i64 %1825, 1
  %1842 = trunc i64 %1841 to i32
  %1843 = add nsw i32 %1819, %1842
  %1844 = sext i32 %1843 to i64
  %1845 = getelementptr inbounds float, float* %1125, i64 %1844
  %1846 = load float, float* %1845, align 4
  %1847 = fmul float %1846, 3.276800e+04
  %1848 = fcmp ogt float %1847, -3.276800e+04
  %1849 = select i1 %1848, float %1847, float -3.276800e+04
  %1850 = fcmp olt float %1849, 3.276700e+04
  %1851 = select i1 %1850, float %1849, float 3.276700e+04
  %1852 = insertelement <4 x float> undef, float %1851, i32 0
  %1853 = call i32 @llvm.x86.sse.cvtss2si(<4 x float> %1852) #10
  %1854 = trunc i32 %1853 to i16
  %1855 = getelementptr inbounds i16, i16* %1373, i64 %1841
  store i16 %1854, i16* %1855, align 2
  %1856 = add nuw nsw i64 %1825, 2
  %1857 = add i64 %1826, -2
  %1858 = icmp eq i64 %1857, 0
  br i1 %1858, label %1859, label %1824

1859:                                             ; preds = %1824, %1817
  %1860 = phi i64 [ 0, %1817 ], [ %1856, %1824 ]
  %1861 = icmp eq i64 %1820, 0
  br i1 %1861, label %1877, label %1862

1862:                                             ; preds = %1859
  %1863 = trunc i64 %1860 to i32
  %1864 = add nsw i32 %1819, %1863
  %1865 = sext i32 %1864 to i64
  %1866 = getelementptr inbounds float, float* %1125, i64 %1865
  %1867 = load float, float* %1866, align 4
  %1868 = fmul float %1867, 3.276800e+04
  %1869 = fcmp ogt float %1868, -3.276800e+04
  %1870 = select i1 %1869, float %1868, float -3.276800e+04
  %1871 = fcmp olt float %1870, 3.276700e+04
  %1872 = select i1 %1871, float %1870, float 3.276700e+04
  %1873 = insertelement <4 x float> undef, float %1872, i32 0
  %1874 = call i32 @llvm.x86.sse.cvtss2si(<4 x float> %1873) #10
  %1875 = trunc i32 %1874 to i16
  %1876 = getelementptr inbounds i16, i16* %1373, i64 %1860
  store i16 %1875, i16* %1876, align 2
  br label %1877

1877:                                             ; preds = %1862, %1859, %1813
  %1878 = call i32 @silk_Encode(i8* %47, %struct.silk_EncControlStruct* %67, i16* nonnull %1373, i32 %2, %struct.ec_ctx* nonnull %15, i32* nonnull %14, i32 0, i32 %262) #10
  %1879 = icmp eq i32 %1878, 0
  br i1 %1879, label %1880, label %2820

1880:                                             ; preds = %1877
  %1881 = load i32, i32* %637, align 8
  %1882 = icmp eq i32 %1881, 1000
  %1883 = getelementptr inbounds %struct.OpusEncoder, %struct.OpusEncoder* %0, i64 0, i32 2, i32 18
  %1884 = load i32, i32* %1883, align 8
  br i1 %1882, label %1885, label %1888

1885:                                             ; preds = %1880
  switch i32 %1884, label %1891 [
    i32 8000, label %1892
    i32 12000, label %1886
    i32 16000, label %1887
  ]

1886:                                             ; preds = %1885
  br label %1892

1887:                                             ; preds = %1885
  br label %1892

1888:                                             ; preds = %1880
  %1889 = icmp eq i32 %1884, 16000
  br i1 %1889, label %1892, label %1890

1890:                                             ; preds = %1888
  call void @celt_fatal(i8* getelementptr inbounds ([60 x i8], [60 x i8]* @.str.2, i64 0, i64 0), i8* getelementptr inbounds ([46 x i8], [46 x i8]* @.str.1, i64 0, i64 0), i32 1855) #13
  unreachable

1891:                                             ; preds = %1885
  br label %1892

1892:                                             ; preds = %1885, %1891, %1888, %1887, %1886
  %1893 = phi i32 [ 1102, %1886 ], [ 1103, %1887 ], [ %1037, %1888 ], [ 1101, %1885 ], [ %1037, %1891 ]
  %1894 = getelementptr inbounds %struct.OpusEncoder, %struct.OpusEncoder* %0, i64 0, i32 2, i32 22
  %1895 = load i32, i32* %1894, align 8
  %1896 = icmp eq i32 %1895, 0
  br i1 %1896, label %1901, label %1897

1897:                                             ; preds = %1892
  %1898 = getelementptr inbounds %struct.OpusEncoder, %struct.OpusEncoder* %0, i64 0, i32 43
  %1899 = load i32, i32* %1898, align 8
  %1900 = icmp eq i32 %1899, 0
  br label %1901

1901:                                             ; preds = %1892, %1897
  %1902 = phi i1 [ false, %1892 ], [ %1900, %1897 ]
  %1903 = zext i1 %1902 to i32
  %1904 = getelementptr inbounds %struct.OpusEncoder, %struct.OpusEncoder* %0, i64 0, i32 2, i32 16
  store i32 %1903, i32* %1904, align 8
  %1905 = load i32, i32* %14, align 4
  %1906 = icmp eq i32 %1905, 0
  br i1 %1906, label %1907, label %1948

1907:                                             ; preds = %1901
  store i32 0, i32* %31, align 4
  %1908 = load i32, i32* %310, align 8
  %1909 = sdiv i32 %1908, %2
  %1910 = load i32, i32* %532, align 8
  %1911 = icmp slt i32 %1909, 400
  br i1 %1911, label %1912, label %1920

1912:                                             ; preds = %1907, %1912
  %1913 = phi i32 [ %1915, %1912 ], [ %1909, %1907 ]
  %1914 = phi i32 [ %1916, %1912 ], [ 0, %1907 ]
  %1915 = shl i32 %1913, 1
  %1916 = add nuw nsw i32 %1914, 1
  %1917 = icmp slt i32 %1915, 400
  br i1 %1917, label %1912, label %1918

1918:                                             ; preds = %1912
  %1919 = shl i32 %1916, 3
  br label %1920

1920:                                             ; preds = %1918, %1907
  %1921 = phi i32 [ 0, %1907 ], [ %1919, %1918 ]
  switch i32 %1881, label %1936 [
    i32 1000, label %1922
    i32 1002, label %1928
  ]

1922:                                             ; preds = %1920
  %1923 = shl i32 %1893, 5
  %1924 = add i32 %1923, 96
  %1925 = add i32 %1921, -16
  %1926 = and i32 %1924, 224
  %1927 = or i32 %1925, %1926
  br label %1941

1928:                                             ; preds = %1920
  %1929 = icmp sgt i32 %1893, 1102
  %1930 = select i1 %1929, i32 %1893, i32 1102
  %1931 = shl i32 %1930, 5
  %1932 = add i32 %1931, 64
  %1933 = and i32 %1932, 96
  %1934 = or i32 %1933, %1921
  %1935 = or i32 %1934, 128
  br label %1941

1936:                                             ; preds = %1920
  %1937 = shl i32 %1893, 4
  %1938 = add i32 %1921, 240
  %1939 = or i32 %1937, %1938
  %1940 = or i32 %1939, 96
  br label %1941

1941:                                             ; preds = %1922, %1928, %1936
  %1942 = phi i32 [ %1927, %1922 ], [ %1935, %1928 ], [ %1940, %1936 ]
  %1943 = icmp eq i32 %1910, 2
  %1944 = zext i1 %1943 to i32
  %1945 = shl nuw nsw i32 %1944, 2
  %1946 = or i32 %1942, %1945
  %1947 = trunc i32 %1946 to i8
  store i8 %1947, i8* %3, align 1
  br label %2820

1948:                                             ; preds = %1901
  br i1 %1902, label %1949, label %1978

1949:                                             ; preds = %1948
  %1950 = load i32, i32* %309, align 8
  %1951 = load i32, i32* %532, align 8
  %1952 = mul nsw i32 %1951, 40
  %1953 = add nsw i32 %1952, 20
  %1954 = sub nsw i32 200, %311
  %1955 = mul nsw i32 %1953, %1954
  %1956 = add nsw i32 %1955, %1950
  %1957 = mul nsw i32 %1956, 3
  %1958 = sdiv i32 %1957, 3200
  %1959 = shl nsw i32 %331, 3
  %1960 = shl nsw i32 %1953, 1
  %1961 = sub nsw i32 %1959, %1960
  %1962 = mul nsw i32 %1961, 240
  %1963 = sdiv i32 48000, %311
  %1964 = add nsw i32 %1963, 240
  %1965 = sdiv i32 %1962, %1964
  %1966 = add nsw i32 %1965, %1953
  %1967 = sdiv i32 %1966, 8
  %1968 = icmp slt i32 %1958, %1967
  %1969 = select i1 %1968, i32 %1958, i32 %1967
  %1970 = shl nsw i32 %1951, 3
  %1971 = or i32 %1970, 4
  %1972 = icmp sgt i32 %1969, %1971
  %1973 = icmp slt i32 %1969, 257
  %1974 = select i1 %1973, i32 %1969, i32 257
  %1975 = select i1 %1972, i32 %1974, i32 0
  %1976 = icmp ne i32 %1975, 0
  %1977 = zext i1 %1976 to i32
  store i32 1, i32* %1069, align 8
  br label %1978

1978:                                             ; preds = %1948, %1949, %1365
  %1979 = phi i32 [ %1110, %1365 ], [ %1110, %1948 ], [ %1977, %1949 ]
  %1980 = phi i32 [ %1111, %1365 ], [ %1111, %1948 ], [ %1975, %1949 ]
  %1981 = phi i32 [ %1076, %1365 ], [ %1076, %1948 ], [ 0, %1949 ]
  %1982 = phi i32 [ %1037, %1365 ], [ %1893, %1948 ], [ %1893, %1949 ]
  %1983 = phi float [ 1.000000e+00, %1365 ], [ %1459, %1948 ], [ %1459, %1949 ]
  %1984 = add i32 %1982, -1101
  %1985 = icmp ult i32 %1984, 4
  br i1 %1985, label %1986, label %1990

1986:                                             ; preds = %1978
  %1987 = sext i32 %1984 to i64
  %1988 = getelementptr inbounds [4 x i32], [4 x i32]* @switch.table.opus_encode_native, i64 0, i64 %1987
  %1989 = load i32, i32* %1988, align 4
  br label %1990

1990:                                             ; preds = %1986, %1978
  %1991 = phi i32 [ 21, %1978 ], [ %1989, %1986 ]
  %1992 = call i32 (%struct.OpusCustomEncoder*, i32, ...) @opus_custom_encoder_ctl(%struct.OpusCustomEncoder* %52, i32 10012, i32 %1991) #10
  %1993 = load i32, i32* %532, align 8
  %1994 = call i32 (%struct.OpusCustomEncoder*, i32, ...) @opus_custom_encoder_ctl(%struct.OpusCustomEncoder* %52, i32 10008, i32 %1993) #10
  %1995 = call i32 (%struct.OpusCustomEncoder*, i32, ...) @opus_custom_encoder_ctl(%struct.OpusCustomEncoder* %52, i32 4002, i32 -1) #10
  %1996 = load i32, i32* %637, align 8
  %1997 = icmp eq i32 %1996, 1000
  br i1 %1997, label %2025, label %1998

1998:                                             ; preds = %1990
  %1999 = call i32 (%struct.OpusCustomEncoder*, i32, ...) @opus_custom_encoder_ctl(%struct.OpusCustomEncoder* %52, i32 4006, i32 0) #10
  %2000 = getelementptr inbounds %struct.OpusEncoder, %struct.OpusEncoder* %0, i64 0, i32 2, i32 17
  %2001 = load i32, i32* %2000, align 4
  %2002 = icmp eq i32 %2001, 0
  %2003 = select i1 %2002, i32 2, i32 0
  %2004 = call i32 (%struct.OpusCustomEncoder*, i32, ...) @opus_custom_encoder_ctl(%struct.OpusCustomEncoder* %52, i32 10002, i32 %2003) #10
  %2005 = load i32, i32* %637, align 8
  %2006 = icmp eq i32 %2005, 1001
  %2007 = load i32, i32* %312, align 4
  %2008 = icmp ne i32 %2007, 0
  br i1 %2006, label %2009, label %2017

2009:                                             ; preds = %1998
  br i1 %2008, label %2010, label %2025

2010:                                             ; preds = %2009
  %2011 = load i32, i32* %309, align 8
  %2012 = getelementptr inbounds %struct.OpusEncoder, %struct.OpusEncoder* %0, i64 0, i32 2, i32 7
  %2013 = load i32, i32* %2012, align 4
  %2014 = sub nsw i32 %2011, %2013
  %2015 = call i32 (%struct.OpusCustomEncoder*, i32, ...) @opus_custom_encoder_ctl(%struct.OpusCustomEncoder* %52, i32 4002, i32 %2014) #10
  %2016 = call i32 (%struct.OpusCustomEncoder*, i32, ...) @opus_custom_encoder_ctl(%struct.OpusCustomEncoder* %52, i32 4020, i32 0) #10
  br label %2025

2017:                                             ; preds = %1998
  br i1 %2008, label %2018, label %2025

2018:                                             ; preds = %2017
  %2019 = call i32 (%struct.OpusCustomEncoder*, i32, ...) @opus_custom_encoder_ctl(%struct.OpusCustomEncoder* %52, i32 4006, i32 1) #10
  %2020 = getelementptr inbounds %struct.OpusEncoder, %struct.OpusEncoder* %0, i64 0, i32 14
  %2021 = load i32, i32* %2020, align 8
  %2022 = call i32 (%struct.OpusCustomEncoder*, i32, ...) @opus_custom_encoder_ctl(%struct.OpusCustomEncoder* %52, i32 4020, i32 %2021) #10
  %2023 = load i32, i32* %309, align 8
  %2024 = call i32 (%struct.OpusCustomEncoder*, i32, ...) @opus_custom_encoder_ctl(%struct.OpusCustomEncoder* %52, i32 4002, i32 %2023) #10
  br label %2025

2025:                                             ; preds = %2010, %2009, %2018, %2017, %1990
  %2026 = load i32, i32* %266, align 8
  %2027 = load i32, i32* %310, align 8
  %2028 = mul nsw i32 %2027, %2026
  %2029 = sdiv i32 %2028, 400
  %2030 = sext i32 %2029 to i64
  %2031 = shl nsw i64 %2030, 2
  %2032 = alloca float, i64 %2030, align 16
  %2033 = bitcast float* %2032 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %2033, i8 -86, i64 %2031, i1 false)
  %2034 = load i32, i32* %637, align 8
  %2035 = icmp eq i32 %2034, 1000
  br i1 %2035, label %2050, label %2036

2036:                                             ; preds = %2025
  %2037 = load i32, i32* %645, align 4
  %2038 = icmp ne i32 %2034, %2037
  %2039 = icmp sgt i32 %2037, 0
  %2040 = and i1 %2038, %2039
  br i1 %2040, label %2041, label %2050

2041:                                             ; preds = %2036
  %2042 = load i32, i32* %1128, align 4
  %2043 = sdiv i32 %2027, -400
  %2044 = sub i32 %2043, %60
  %2045 = add i32 %2044, %2042
  %2046 = mul nsw i32 %2045, %2026
  %2047 = sext i32 %2046 to i64
  %2048 = getelementptr inbounds %struct.OpusEncoder, %struct.OpusEncoder* %0, i64 0, i32 39, i64 %2047
  %2049 = bitcast float* %2048 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 16 %2033, i8* align 4 %2049, i64 %2031, i1 false)
  br label %2050

2050:                                             ; preds = %2036, %2025, %2041
  %2051 = load i32, i32* %1128, align 4
  %2052 = sub i32 %2051, %1120
  %2053 = mul nsw i32 %2052, %2026
  %2054 = icmp sgt i32 %2053, 0
  %2055 = bitcast [960 x float]* %1127 to i8*
  br i1 %2054, label %2056, label %2068

2056:                                             ; preds = %2050
  %2057 = mul nsw i32 %2026, %2
  %2058 = sext i32 %2057 to i64
  %2059 = getelementptr inbounds %struct.OpusEncoder, %struct.OpusEncoder* %0, i64 0, i32 39, i64 %2058
  %2060 = bitcast float* %2059 to i8*
  %2061 = sext i32 %2053 to i64
  %2062 = shl nsw i64 %2061, 2
  call void @llvm.memmove.p0i8.p0i8.i64(i8* align 4 %2055, i8* align 4 %2060, i64 %2062, i1 false)
  %2063 = getelementptr inbounds %struct.OpusEncoder, %struct.OpusEncoder* %0, i64 0, i32 39, i64 %2061
  %2064 = bitcast float* %2063 to i8*
  %2065 = mul nsw i32 %2026, %1120
  %2066 = sext i32 %2065 to i64
  %2067 = shl nsw i64 %2066, 2
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %2064, i8* nonnull align 16 %1126, i64 %2067, i1 false)
  br label %2077

2068:                                             ; preds = %2050
  %2069 = sub nsw i32 %1120, %2051
  %2070 = mul nsw i32 %2069, %2026
  %2071 = sext i32 %2070 to i64
  %2072 = getelementptr inbounds float, float* %1125, i64 %2071
  %2073 = bitcast float* %2072 to i8*
  %2074 = mul nsw i32 %2051, %2026
  %2075 = sext i32 %2074 to i64
  %2076 = shl nsw i64 %2075, 2
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %2055, i8* align 4 %2073, i64 %2076, i1 false)
  br label %2077

2077:                                             ; preds = %2068, %2056
  %2078 = getelementptr inbounds %struct.OpusEncoder, %struct.OpusEncoder* %0, i64 0, i32 27
  %2079 = load float, float* %2078, align 4
  %2080 = fcmp olt float %2079, 1.000000e+00
  %2081 = fcmp olt float %1983, 1.000000e+00
  %2082 = or i1 %2081, %2080
  br i1 %2082, label %2083, label %2284

2083:                                             ; preds = %2077
  %2084 = load %struct.OpusCustomMode*, %struct.OpusCustomMode** %17, align 8
  %2085 = getelementptr inbounds %struct.OpusCustomMode, %struct.OpusCustomMode* %2084, i64 0, i32 1
  %2086 = load i32, i32* %2085, align 4
  %2087 = load i32, i32* %266, align 8
  %2088 = getelementptr inbounds %struct.OpusCustomMode, %struct.OpusCustomMode* %2084, i64 0, i32 12
  %2089 = load float*, float** %2088, align 8
  %2090 = load i32, i32* %310, align 8
  %2091 = sdiv i32 48000, %2090
  %2092 = sdiv i32 %2086, %2091
  %2093 = icmp eq i32 %2087, 1
  %2094 = icmp sgt i32 %2092, 0
  br i1 %2093, label %2099, label %2095

2095:                                             ; preds = %2083
  br i1 %2094, label %2096, label %2171

2096:                                             ; preds = %2095
  %2097 = sext i32 %2091 to i64
  %2098 = zext i32 %2092 to i64
  br label %2136

2099:                                             ; preds = %2083
  br i1 %2094, label %2100, label %2171

2100:                                             ; preds = %2099
  %2101 = sext i32 %2091 to i64
  %2102 = zext i32 %2092 to i64
  %2103 = and i64 %2102, 1
  %2104 = icmp eq i32 %2092, 1
  br i1 %2104, label %2156, label %2105

2105:                                             ; preds = %2100
  %2106 = sub nsw i64 %2102, %2103
  br label %2107

2107:                                             ; preds = %2107, %2105
  %2108 = phi i64 [ 0, %2105 ], [ %2133, %2107 ]
  %2109 = phi i64 [ %2106, %2105 ], [ %2134, %2107 ]
  %2110 = mul nsw i64 %2108, %2101
  %2111 = getelementptr inbounds float, float* %2089, i64 %2110
  %2112 = load float, float* %2111, align 4
  %2113 = fmul float %2112, %2112
  %2114 = fmul float %1983, %2113
  %2115 = fsub float 1.000000e+00, %2113
  %2116 = fmul float %2079, %2115
  %2117 = fadd float %2114, %2116
  %2118 = getelementptr inbounds float, float* %1125, i64 %2108
  %2119 = load float, float* %2118, align 8
  %2120 = fmul float %2119, %2117
  store float %2120, float* %2118, align 8
  %2121 = or i64 %2108, 1
  %2122 = mul nsw i64 %2121, %2101
  %2123 = getelementptr inbounds float, float* %2089, i64 %2122
  %2124 = load float, float* %2123, align 4
  %2125 = fmul float %2124, %2124
  %2126 = fmul float %1983, %2125
  %2127 = fsub float 1.000000e+00, %2125
  %2128 = fmul float %2079, %2127
  %2129 = fadd float %2126, %2128
  %2130 = getelementptr inbounds float, float* %1125, i64 %2121
  %2131 = load float, float* %2130, align 4
  %2132 = fmul float %2131, %2129
  store float %2132, float* %2130, align 4
  %2133 = add nuw nsw i64 %2108, 2
  %2134 = add i64 %2109, -2
  %2135 = icmp eq i64 %2134, 0
  br i1 %2135, label %2156, label %2107

2136:                                             ; preds = %2136, %2096
  %2137 = phi i64 [ 0, %2096 ], [ %2154, %2136 ]
  %2138 = mul nsw i64 %2137, %2097
  %2139 = getelementptr inbounds float, float* %2089, i64 %2138
  %2140 = load float, float* %2139, align 4
  %2141 = fmul float %2140, %2140
  %2142 = fmul float %1983, %2141
  %2143 = fsub float 1.000000e+00, %2141
  %2144 = fmul float %2079, %2143
  %2145 = fadd float %2142, %2144
  %2146 = shl nuw nsw i64 %2137, 1
  %2147 = getelementptr inbounds float, float* %1125, i64 %2146
  %2148 = load float, float* %2147, align 8
  %2149 = fmul float %2148, %2145
  store float %2149, float* %2147, align 8
  %2150 = or i64 %2146, 1
  %2151 = getelementptr inbounds float, float* %1125, i64 %2150
  %2152 = load float, float* %2151, align 4
  %2153 = fmul float %2152, %2145
  store float %2153, float* %2151, align 4
  %2154 = add nuw nsw i64 %2137, 1
  %2155 = icmp eq i64 %2154, %2098
  br i1 %2155, label %2171, label %2136

2156:                                             ; preds = %2107, %2100
  %2157 = phi i64 [ 0, %2100 ], [ %2133, %2107 ]
  %2158 = icmp eq i64 %2103, 0
  br i1 %2158, label %2171, label %2159

2159:                                             ; preds = %2156
  %2160 = mul nsw i64 %2157, %2101
  %2161 = getelementptr inbounds float, float* %2089, i64 %2160
  %2162 = load float, float* %2161, align 4
  %2163 = fmul float %2162, %2162
  %2164 = fmul float %1983, %2163
  %2165 = fsub float 1.000000e+00, %2163
  %2166 = fmul float %2079, %2165
  %2167 = fadd float %2164, %2166
  %2168 = getelementptr inbounds float, float* %1125, i64 %2157
  %2169 = load float, float* %2168, align 4
  %2170 = fmul float %2169, %2167
  store float %2170, float* %2168, align 4
  br label %2171

2171:                                             ; preds = %2136, %2159, %2156, %2099, %2095
  %2172 = icmp slt i32 %2092, %2
  br i1 %2172, label %2173, label %2284

2173:                                             ; preds = %2171
  %2174 = sext i32 %2092 to i64
  %2175 = sext i32 %2087 to i64
  %2176 = sext i32 %2 to i64
  %2177 = sub nsw i64 %2176, %2174
  %2178 = sub nsw i64 %2176, %2174
  %2179 = add nsw i64 %2178, -8
  %2180 = lshr i64 %2179, 3
  %2181 = add nuw nsw i64 %2180, 1
  %2182 = icmp ugt i64 %2177, 7
  %2183 = icmp eq i32 %2087, 1
  %2184 = and i1 %2182, %2183
  %2185 = and i64 %2177, -8
  %2186 = add nsw i64 %2185, %2174
  %2187 = insertelement <4 x float> undef, float %1983, i32 0
  %2188 = shufflevector <4 x float> %2187, <4 x float> undef, <4 x i32> zeroinitializer
  %2189 = insertelement <4 x float> undef, float %1983, i32 0
  %2190 = shufflevector <4 x float> %2189, <4 x float> undef, <4 x i32> zeroinitializer
  %2191 = and i64 %2181, 1
  %2192 = icmp eq i64 %2180, 0
  %2193 = sub nuw nsw i64 %2181, %2191
  %2194 = icmp eq i64 %2191, 0
  %2195 = icmp eq i64 %2177, %2185
  %2196 = sub nsw i64 0, %2176
  br label %2197

2197:                                             ; preds = %2281, %2173
  %2198 = phi i64 [ 0, %2173 ], [ %2282, %2281 ]
  br i1 %2184, label %2199, label %2250

2199:                                             ; preds = %2197
  br i1 %2192, label %2233, label %2200

2200:                                             ; preds = %2199, %2200
  %2201 = phi i64 [ %2230, %2200 ], [ 0, %2199 ]
  %2202 = phi i64 [ %2231, %2200 ], [ %2193, %2199 ]
  %2203 = add i64 %2201, %2174
  %2204 = mul nsw i64 %2203, %2175
  %2205 = add nsw i64 %2204, %2198
  %2206 = getelementptr inbounds float, float* %1125, i64 %2205
  %2207 = bitcast float* %2206 to <4 x float>*
  %2208 = load <4 x float>, <4 x float>* %2207, align 4
  %2209 = getelementptr inbounds float, float* %2206, i64 4
  %2210 = bitcast float* %2209 to <4 x float>*
  %2211 = load <4 x float>, <4 x float>* %2210, align 4
  %2212 = fmul <4 x float> %2188, %2208
  %2213 = fmul <4 x float> %2190, %2211
  %2214 = bitcast float* %2206 to <4 x float>*
  store <4 x float> %2212, <4 x float>* %2214, align 4
  %2215 = bitcast float* %2209 to <4 x float>*
  store <4 x float> %2213, <4 x float>* %2215, align 4
  %2216 = or i64 %2201, 8
  %2217 = add i64 %2216, %2174
  %2218 = mul nsw i64 %2217, %2175
  %2219 = add nsw i64 %2218, %2198
  %2220 = getelementptr inbounds float, float* %1125, i64 %2219
  %2221 = bitcast float* %2220 to <4 x float>*
  %2222 = load <4 x float>, <4 x float>* %2221, align 4
  %2223 = getelementptr inbounds float, float* %2220, i64 4
  %2224 = bitcast float* %2223 to <4 x float>*
  %2225 = load <4 x float>, <4 x float>* %2224, align 4
  %2226 = fmul <4 x float> %2188, %2222
  %2227 = fmul <4 x float> %2190, %2225
  %2228 = bitcast float* %2220 to <4 x float>*
  store <4 x float> %2226, <4 x float>* %2228, align 4
  %2229 = bitcast float* %2223 to <4 x float>*
  store <4 x float> %2227, <4 x float>* %2229, align 4
  %2230 = add i64 %2201, 16
  %2231 = add i64 %2202, -2
  %2232 = icmp eq i64 %2231, 0
  br i1 %2232, label %2233, label %2200, !llvm.loop !5

2233:                                             ; preds = %2200, %2199
  %2234 = phi i64 [ 0, %2199 ], [ %2230, %2200 ]
  br i1 %2194, label %2249, label %2235

2235:                                             ; preds = %2233
  %2236 = add i64 %2234, %2174
  %2237 = mul nsw i64 %2236, %2175
  %2238 = add nsw i64 %2237, %2198
  %2239 = getelementptr inbounds float, float* %1125, i64 %2238
  %2240 = bitcast float* %2239 to <4 x float>*
  %2241 = load <4 x float>, <4 x float>* %2240, align 4
  %2242 = getelementptr inbounds float, float* %2239, i64 4
  %2243 = bitcast float* %2242 to <4 x float>*
  %2244 = load <4 x float>, <4 x float>* %2243, align 4
  %2245 = fmul <4 x float> %2188, %2241
  %2246 = fmul <4 x float> %2190, %2244
  %2247 = bitcast float* %2239 to <4 x float>*
  store <4 x float> %2245, <4 x float>* %2247, align 4
  %2248 = bitcast float* %2242 to <4 x float>*
  store <4 x float> %2246, <4 x float>* %2248, align 4
  br label %2249

2249:                                             ; preds = %2233, %2235
  br i1 %2195, label %2281, label %2250

2250:                                             ; preds = %2197, %2249
  %2251 = phi i64 [ %2174, %2197 ], [ %2186, %2249 ]
  %2252 = sub nsw i64 %2176, %2251
  %2253 = xor i64 %2251, -1
  %2254 = and i64 %2252, 1
  %2255 = icmp eq i64 %2254, 0
  br i1 %2255, label %2263, label %2256

2256:                                             ; preds = %2250
  %2257 = mul nsw i64 %2251, %2175
  %2258 = add nsw i64 %2257, %2198
  %2259 = getelementptr inbounds float, float* %1125, i64 %2258
  %2260 = load float, float* %2259, align 4
  %2261 = fmul float %1983, %2260
  store float %2261, float* %2259, align 4
  %2262 = add nsw i64 %2251, 1
  br label %2263

2263:                                             ; preds = %2256, %2250
  %2264 = phi i64 [ %2262, %2256 ], [ %2251, %2250 ]
  %2265 = icmp eq i64 %2253, %2196
  br i1 %2265, label %2281, label %2266

2266:                                             ; preds = %2263, %2266
  %2267 = phi i64 [ %2279, %2266 ], [ %2264, %2263 ]
  %2268 = mul nsw i64 %2267, %2175
  %2269 = add nsw i64 %2268, %2198
  %2270 = getelementptr inbounds float, float* %1125, i64 %2269
  %2271 = load float, float* %2270, align 4
  %2272 = fmul float %1983, %2271
  store float %2272, float* %2270, align 4
  %2273 = add nsw i64 %2267, 1
  %2274 = mul nsw i64 %2273, %2175
  %2275 = add nsw i64 %2274, %2198
  %2276 = getelementptr inbounds float, float* %1125, i64 %2275
  %2277 = load float, float* %2276, align 4
  %2278 = fmul float %1983, %2277
  store float %2278, float* %2276, align 4
  %2279 = add nsw i64 %2267, 2
  %2280 = icmp eq i64 %2279, %2176
  br i1 %2280, label %2281, label %2266, !llvm.loop !7

2281:                                             ; preds = %2263, %2266, %2249
  %2282 = add nuw nsw i64 %2198, 1
  %2283 = icmp slt i64 %2282, %2175
  br i1 %2283, label %2197, label %2284

2284:                                             ; preds = %2281, %2171, %2077
  store float %1983, float* %2078, align 4
  %2285 = load i32, i32* %637, align 8
  %2286 = icmp eq i32 %2285, 1001
  br i1 %2286, label %2287, label %2290

2287:                                             ; preds = %2284
  %2288 = load i32, i32* %532, align 8
  %2289 = icmp eq i32 %2288, 1
  br i1 %2289, label %2290, label %2303

2290:                                             ; preds = %2284, %2287
  %2291 = icmp sgt i32 %795, 32000
  br i1 %2291, label %2300, label %2292

2292:                                             ; preds = %2290
  %2293 = icmp slt i32 %795, 16000
  br i1 %2293, label %2300, label %2294

2294:                                             ; preds = %2292
  %2295 = shl i32 %795, 11
  %2296 = sub nuw nsw i32 65536000, %2295
  %2297 = add nsw i32 %795, -14000
  %2298 = sdiv i32 %2296, %2297
  %2299 = sub nuw nsw i32 16384, %2298
  br label %2300

2300:                                             ; preds = %2292, %2290, %2294
  %2301 = phi i32 [ %2299, %2294 ], [ 16384, %2290 ], [ 0, %2292 ]
  %2302 = getelementptr inbounds %struct.OpusEncoder, %struct.OpusEncoder* %0, i64 0, i32 2, i32 21
  store i32 %2301, i32* %2302, align 4
  br label %2303

2303:                                             ; preds = %2300, %2287
  %2304 = getelementptr inbounds %struct.OpusEncoder, %struct.OpusEncoder* %0, i64 0, i32 37
  %2305 = load float*, float** %2304, align 8
  %2306 = icmp eq float* %2305, null
  br i1 %2306, label %2307, label %2464

2307:                                             ; preds = %2303
  %2308 = load i32, i32* %266, align 8
  %2309 = icmp eq i32 %2308, 2
  br i1 %2309, label %2310, label %2464

2310:                                             ; preds = %2307
  %2311 = getelementptr inbounds %struct.OpusEncoder, %struct.OpusEncoder* %0, i64 0, i32 25
  %2312 = load i16, i16* %2311, align 4
  %2313 = icmp slt i16 %2312, 16384
  %2314 = getelementptr inbounds %struct.OpusEncoder, %struct.OpusEncoder* %0, i64 0, i32 2, i32 21
  %2315 = load i32, i32* %2314, align 4
  %2316 = icmp slt i32 %2315, 16384
  %2317 = or i1 %2313, %2316
  br i1 %2317, label %2318, label %2464

2318:                                             ; preds = %2310
  %2319 = sitofp i16 %2312 to float
  %2320 = sitofp i32 %2315 to float
  %2321 = fmul float %2319, 0x3F10000000000000
  %2322 = fmul float %2320, 0x3F10000000000000
  %2323 = load %struct.OpusCustomMode*, %struct.OpusCustomMode** %17, align 8
  %2324 = getelementptr inbounds %struct.OpusCustomMode, %struct.OpusCustomMode* %2323, i64 0, i32 1
  %2325 = load i32, i32* %2324, align 4
  %2326 = getelementptr inbounds %struct.OpusCustomMode, %struct.OpusCustomMode* %2323, i64 0, i32 12
  %2327 = load float*, float** %2326, align 8
  %2328 = load i32, i32* %310, align 8
  %2329 = sdiv i32 48000, %2328
  %2330 = sdiv i32 %2325, %2329
  %2331 = fsub float 1.000000e+00, %2321
  %2332 = fsub float 1.000000e+00, %2322
  %2333 = icmp sgt i32 %2330, 0
  br i1 %2333, label %2334, label %2386

2334:                                             ; preds = %2318
  %2335 = sext i32 %2329 to i64
  %2336 = zext i32 %2330 to i64
  %2337 = icmp ugt i32 %2330, 3
  %2338 = icmp eq i32 %2329, 1
  %2339 = and i1 %2337, %2338
  br i1 %2339, label %2340, label %2347

2340:                                             ; preds = %2334
  %2341 = shl nuw nsw i64 %2336, 1
  %2342 = getelementptr float, float* %1125, i64 %2341
  %2343 = getelementptr float, float* %2327, i64 %2336
  %2344 = icmp ult float* %1125, %2343
  %2345 = icmp ult float* %2327, %2342
  %2346 = and i1 %2344, %2345
  br i1 %2346, label %2347, label %2349

2347:                                             ; preds = %2334, %2384, %2340
  %2348 = phi i64 [ 0, %2340 ], [ 0, %2334 ], [ %2350, %2384 ]
  br label %2424

2349:                                             ; preds = %2340
  %2350 = and i64 %2336, 4294967292
  %2351 = insertelement <4 x float> undef, float %2332, i32 0
  %2352 = shufflevector <4 x float> %2351, <4 x float> undef, <4 x i32> zeroinitializer
  %2353 = insertelement <4 x float> undef, float %2331, i32 0
  %2354 = shufflevector <4 x float> %2353, <4 x float> undef, <4 x i32> zeroinitializer
  %2355 = getelementptr inbounds float, float* %1125, i64 -1
  br label %2356

2356:                                             ; preds = %2356, %2349
  %2357 = phi i64 [ 0, %2349 ], [ %2382, %2356 ]
  %2358 = mul nsw i64 %2357, %2335
  %2359 = getelementptr inbounds float, float* %2327, i64 %2358
  %2360 = bitcast float* %2359 to <4 x float>*
  %2361 = load <4 x float>, <4 x float>* %2360, align 4, !alias.scope !8
  %2362 = fmul <4 x float> %2361, %2361
  %2363 = fmul <4 x float> %2352, %2362
  %2364 = fsub <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %2362
  %2365 = fmul <4 x float> %2354, %2364
  %2366 = fadd <4 x float> %2363, %2365
  %2367 = shl nuw nsw i64 %2357, 1
  %2368 = getelementptr inbounds float, float* %1125, i64 %2367
  %2369 = bitcast float* %2368 to <8 x float>*
  %2370 = load <8 x float>, <8 x float>* %2369, align 16
  %2371 = shufflevector <8 x float> %2370, <8 x float> undef, <4 x i32> <i32 0, i32 2, i32 4, i32 6>
  %2372 = shufflevector <8 x float> %2370, <8 x float> undef, <4 x i32> <i32 1, i32 3, i32 5, i32 7>
  %2373 = or i64 %2367, 1
  %2374 = fsub <4 x float> %2371, %2372
  %2375 = fmul <4 x float> %2374, <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>
  %2376 = fmul <4 x float> %2366, %2375
  %2377 = fsub <4 x float> %2371, %2376
  %2378 = fadd <4 x float> %2372, %2376
  %2379 = getelementptr inbounds float, float* %2355, i64 %2373
  %2380 = bitcast float* %2379 to <8 x float>*
  %2381 = shufflevector <4 x float> %2377, <4 x float> %2378, <8 x i32> <i32 0, i32 4, i32 1, i32 5, i32 2, i32 6, i32 3, i32 7>
  store <8 x float> %2381, <8 x float>* %2380, align 4
  %2382 = add i64 %2357, 4
  %2383 = icmp eq i64 %2382, %2350
  br i1 %2383, label %2384, label %2356, !llvm.loop !11

2384:                                             ; preds = %2356
  %2385 = icmp eq i64 %2350, %2336
  br i1 %2385, label %2386, label %2347

2386:                                             ; preds = %2424, %2384, %2318
  %2387 = phi i32 [ 0, %2318 ], [ %2330, %2384 ], [ %2330, %2424 ]
  %2388 = icmp slt i32 %2387, %2
  br i1 %2388, label %2389, label %2462

2389:                                             ; preds = %2386
  %2390 = zext i32 %2387 to i64
  %2391 = zext i32 %2 to i64
  %2392 = sub nsw i64 %2391, %2390
  %2393 = icmp ult i64 %2392, 4
  br i1 %2393, label %2394, label %2396

2394:                                             ; preds = %2422, %2389
  %2395 = phi i64 [ %2390, %2389 ], [ %2398, %2422 ]
  br label %2447

2396:                                             ; preds = %2389
  %2397 = and i64 %2392, -4
  %2398 = add nsw i64 %2397, %2390
  %2399 = insertelement <4 x float> undef, float %2332, i32 0
  %2400 = shufflevector <4 x float> %2399, <4 x float> undef, <4 x i32> zeroinitializer
  %2401 = getelementptr inbounds float, float* %1125, i64 -1
  br label %2402

2402:                                             ; preds = %2402, %2396
  %2403 = phi i64 [ 0, %2396 ], [ %2420, %2402 ]
  %2404 = add i64 %2403, %2390
  %2405 = shl nuw nsw i64 %2404, 1
  %2406 = getelementptr inbounds float, float* %1125, i64 %2405
  %2407 = bitcast float* %2406 to <8 x float>*
  %2408 = load <8 x float>, <8 x float>* %2407, align 8
  %2409 = shufflevector <8 x float> %2408, <8 x float> undef, <4 x i32> <i32 0, i32 2, i32 4, i32 6>
  %2410 = shufflevector <8 x float> %2408, <8 x float> undef, <4 x i32> <i32 1, i32 3, i32 5, i32 7>
  %2411 = or i64 %2405, 1
  %2412 = fsub <4 x float> %2409, %2410
  %2413 = fmul <4 x float> %2412, <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>
  %2414 = fmul <4 x float> %2400, %2413
  %2415 = fsub <4 x float> %2409, %2414
  %2416 = fadd <4 x float> %2410, %2414
  %2417 = getelementptr inbounds float, float* %2401, i64 %2411
  %2418 = bitcast float* %2417 to <8 x float>*
  %2419 = shufflevector <4 x float> %2415, <4 x float> %2416, <8 x i32> <i32 0, i32 4, i32 1, i32 5, i32 2, i32 6, i32 3, i32 7>
  store <8 x float> %2419, <8 x float>* %2418, align 4
  %2420 = add i64 %2403, 4
  %2421 = icmp eq i64 %2420, %2397
  br i1 %2421, label %2422, label %2402, !llvm.loop !12

2422:                                             ; preds = %2402
  %2423 = icmp eq i64 %2392, %2397
  br i1 %2423, label %2462, label %2394

2424:                                             ; preds = %2347, %2424
  %2425 = phi i64 [ %2445, %2424 ], [ %2348, %2347 ]
  %2426 = mul nsw i64 %2425, %2335
  %2427 = getelementptr inbounds float, float* %2327, i64 %2426
  %2428 = load float, float* %2427, align 4
  %2429 = fmul float %2428, %2428
  %2430 = fmul float %2332, %2429
  %2431 = fsub float 1.000000e+00, %2429
  %2432 = fmul float %2331, %2431
  %2433 = fadd float %2430, %2432
  %2434 = shl nuw nsw i64 %2425, 1
  %2435 = getelementptr inbounds float, float* %1125, i64 %2434
  %2436 = load float, float* %2435, align 8
  %2437 = or i64 %2434, 1
  %2438 = getelementptr inbounds float, float* %1125, i64 %2437
  %2439 = load float, float* %2438, align 4
  %2440 = fsub float %2436, %2439
  %2441 = fmul float %2440, 5.000000e-01
  %2442 = fmul float %2433, %2441
  %2443 = fsub float %2436, %2442
  store float %2443, float* %2435, align 8
  %2444 = fadd float %2439, %2442
  store float %2444, float* %2438, align 4
  %2445 = add nuw nsw i64 %2425, 1
  %2446 = icmp eq i64 %2445, %2336
  br i1 %2446, label %2386, label %2424, !llvm.loop !13

2447:                                             ; preds = %2394, %2447
  %2448 = phi i64 [ %2460, %2447 ], [ %2395, %2394 ]
  %2449 = shl nuw nsw i64 %2448, 1
  %2450 = getelementptr inbounds float, float* %1125, i64 %2449
  %2451 = load float, float* %2450, align 8
  %2452 = or i64 %2449, 1
  %2453 = getelementptr inbounds float, float* %1125, i64 %2452
  %2454 = load float, float* %2453, align 4
  %2455 = fsub float %2451, %2454
  %2456 = fmul float %2455, 5.000000e-01
  %2457 = fmul float %2332, %2456
  %2458 = fsub float %2451, %2457
  store float %2458, float* %2450, align 8
  %2459 = fadd float %2454, %2457
  store float %2459, float* %2453, align 4
  %2460 = add nuw nsw i64 %2448, 1
  %2461 = icmp eq i64 %2460, %2391
  br i1 %2461, label %2462, label %2447, !llvm.loop !14

2462:                                             ; preds = %2447, %2422, %2386
  %2463 = trunc i32 %2315 to i16
  store i16 %2463, i16* %2311, align 4
  br label %2464

2464:                                             ; preds = %2310, %2303, %2462, %2307
  %2465 = icmp eq i32 %2285, 1002
  br i1 %2465, label %2502, label %2466

2466:                                             ; preds = %2464
  %2467 = getelementptr inbounds %struct.ec_ctx, %struct.ec_ctx* %15, i64 0, i32 5
  %2468 = load i32, i32* %2467, align 8
  %2469 = getelementptr inbounds %struct.ec_ctx, %struct.ec_ctx* %15, i64 0, i32 7
  %2470 = load i32, i32* %2469, align 8
  %2471 = call i32 @llvm.ctlz.i32(i32 %2470, i1 true) #10, !range !16
  %2472 = or i32 %2471, -32
  %2473 = select i1 %2286, i32 37, i32 17
  %2474 = add i32 %2473, %2468
  %2475 = add i32 %2474, %2472
  %2476 = shl nsw i32 %1119, 3
  %2477 = icmp sgt i32 %2475, %2476
  br i1 %2477, label %2502, label %2478

2478:                                             ; preds = %2466
  br i1 %2286, label %2479, label %2480

2479:                                             ; preds = %2478
  call void @ec_enc_bit_logp(%struct.ec_ctx* nonnull %15, i32 %1979, i32 12) #10
  br label %2480

2480:                                             ; preds = %2479, %2478
  %2481 = icmp eq i32 %1979, 0
  br i1 %2481, label %2502, label %2482

2482:                                             ; preds = %2480
  call void @ec_enc_bit_logp(%struct.ec_ctx* nonnull %15, i32 %1981, i32 1) #10
  %2483 = load i32, i32* %637, align 8
  %2484 = icmp eq i32 %2483, 1001
  %2485 = load i32, i32* %2467, align 8
  %2486 = load i32, i32* %2469, align 8
  %2487 = call i32 @llvm.ctlz.i32(i32 %2486, i1 true) #10, !range !16
  %2488 = or i32 %2487, -32
  %2489 = select i1 %2484, i32 18, i32 7
  %2490 = add i32 %2489, %2485
  %2491 = add i32 %2490, %2488
  %2492 = ashr i32 %2491, 3
  %2493 = sub nsw i32 %1119, %2492
  %2494 = icmp slt i32 %2493, %1980
  %2495 = select i1 %2494, i32 %2493, i32 %1980
  %2496 = icmp sgt i32 %2495, 2
  %2497 = select i1 %2496, i32 %2495, i32 2
  %2498 = icmp slt i32 %2497, 257
  %2499 = select i1 %2498, i32 %2497, i32 257
  br i1 %2484, label %2500, label %2503

2500:                                             ; preds = %2482
  %2501 = add nsw i32 %2499, -2
  call void @ec_enc_uint(%struct.ec_ctx* nonnull %15, i32 %2501, i32 256) #10
  br label %2503

2502:                                             ; preds = %2480, %2466, %2464
  store i32 0, i32* %1069, align 8
  br label %2503

2503:                                             ; preds = %2500, %2482, %2502
  %2504 = phi i1 [ false, %2502 ], [ true, %2482 ], [ true, %2500 ]
  %2505 = phi i32 [ 0, %2502 ], [ %1979, %2482 ], [ %1979, %2500 ]
  %2506 = phi i32 [ 0, %2502 ], [ %2499, %2482 ], [ %2499, %2500 ]
  %2507 = load i32, i32* %637, align 8
  %2508 = icmp eq i32 %2507, 1002
  %2509 = select i1 %2508, i32 0, i32 17
  %2510 = icmp eq i32 %2507, 1000
  br i1 %2510, label %2511, label %2521

2511:                                             ; preds = %2503
  %2512 = getelementptr inbounds %struct.ec_ctx, %struct.ec_ctx* %15, i64 0, i32 5
  %2513 = load i32, i32* %2512, align 8
  %2514 = getelementptr inbounds %struct.ec_ctx, %struct.ec_ctx* %15, i64 0, i32 7
  %2515 = load i32, i32* %2514, align 8
  %2516 = call i32 @llvm.ctlz.i32(i32 %2515, i1 true) #10, !range !16
  %2517 = or i32 %2516, -32
  %2518 = add i32 %2513, 7
  %2519 = add i32 %2518, %2517
  %2520 = ashr i32 %2519, 3
  call void @ec_enc_done(%struct.ec_ctx* nonnull %15) #10
  br label %2523

2521:                                             ; preds = %2503
  %2522 = sub nsw i32 %1119, %2506
  call void @ec_enc_shrink(%struct.ec_ctx* nonnull %15, i32 %2522) #10
  br label %2523

2523:                                             ; preds = %2521, %2511
  %2524 = phi i32 [ %2520, %2511 ], [ %2522, %2521 ]
  %2525 = phi i32 [ %2520, %2511 ], [ 0, %2521 ]
  br i1 %2504, label %2531, label %2526

2526:                                             ; preds = %2523
  %2527 = load i32, i32* %637, align 8
  %2528 = icmp eq i32 %2527, 1000
  br i1 %2528, label %2529, label %2531

2529:                                             ; preds = %2526
  %2530 = icmp ne i32 %1981, 0
  br label %2560

2531:                                             ; preds = %2523, %2526
  %2532 = call i32 (%struct.OpusCustomEncoder*, i32, ...) @opus_custom_encoder_ctl(%struct.OpusCustomEncoder* %52, i32 10022, %struct.AnalysisInfo* nonnull %18) #10
  %2533 = load i32, i32* %637, align 8
  %2534 = icmp eq i32 %2533, 1001
  br i1 %2534, label %2535, label %2544

2535:                                             ; preds = %2531
  %2536 = bitcast %struct.SILKInfo* %21 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %2536) #10
  %2537 = getelementptr inbounds %struct.SILKInfo, %struct.SILKInfo* %21, i64 0, i32 0
  %2538 = getelementptr inbounds %struct.SILKInfo, %struct.SILKInfo* %21, i64 0, i32 1
  %2539 = getelementptr inbounds %struct.OpusEncoder, %struct.OpusEncoder* %0, i64 0, i32 2, i32 23
  %2540 = load i32, i32* %2539, align 4
  store i32 %2540, i32* %2537, align 4
  %2541 = getelementptr inbounds %struct.OpusEncoder, %struct.OpusEncoder* %0, i64 0, i32 2, i32 24
  %2542 = load i32, i32* %2541, align 8
  store i32 %2542, i32* %2538, align 4
  %2543 = call i32 (%struct.OpusCustomEncoder*, i32, ...) @opus_custom_encoder_ctl(%struct.OpusCustomEncoder* %52, i32 10028, %struct.SILKInfo* nonnull %21) #10
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %2536) #10
  br label %2544

2544:                                             ; preds = %2535, %2531
  %2545 = icmp ne i32 %1981, 0
  %2546 = and i1 %2545, %2504
  br i1 %2546, label %2547, label %2560

2547:                                             ; preds = %2544
  %2548 = call i32 (%struct.OpusCustomEncoder*, i32, ...) @opus_custom_encoder_ctl(%struct.OpusCustomEncoder* %52, i32 10010, i32 0) #10
  %2549 = call i32 (%struct.OpusCustomEncoder*, i32, ...) @opus_custom_encoder_ctl(%struct.OpusCustomEncoder* %52, i32 4006, i32 0) #10
  %2550 = call i32 (%struct.OpusCustomEncoder*, i32, ...) @opus_custom_encoder_ctl(%struct.OpusCustomEncoder* %52, i32 4002, i32 -1) #10
  %2551 = load i32, i32* %310, align 8
  %2552 = sdiv i32 %2551, 200
  %2553 = sext i32 %2524 to i64
  %2554 = getelementptr inbounds i8, i8* %1118, i64 %2553
  %2555 = call i32 @celt_encode_with_ec(%struct.OpusCustomEncoder* %52, float* nonnull %1125, i32 %2552, i8* %2554, i32 %2506, %struct.ec_ctx* null) #10
  %2556 = icmp slt i32 %2555, 0
  br i1 %2556, label %2820, label %2557

2557:                                             ; preds = %2547
  %2558 = call i32 (%struct.OpusCustomEncoder*, i32, ...) @opus_custom_encoder_ctl(%struct.OpusCustomEncoder* %52, i32 4031, i32* nonnull %16) #10
  %2559 = call i32 (%struct.OpusCustomEncoder*, i32, ...) @opus_custom_encoder_ctl(%struct.OpusCustomEncoder* %52, i32 4028) #10
  br label %2560

2560:                                             ; preds = %2557, %2529, %2544
  %2561 = phi i1 [ false, %2544 ], [ false, %2529 ], [ true, %2557 ]
  %2562 = phi i1 [ %2545, %2544 ], [ %2530, %2529 ], [ true, %2557 ]
  %2563 = call i32 (%struct.OpusCustomEncoder*, i32, ...) @opus_custom_encoder_ctl(%struct.OpusCustomEncoder* %52, i32 10010, i32 %2509) #10
  %2564 = load i32, i32* %637, align 8
  %2565 = icmp eq i32 %2564, 1000
  br i1 %2565, label %2621, label %2566

2566:                                             ; preds = %2560
  %2567 = load i32, i32* %645, align 4
  %2568 = icmp ne i32 %2564, %2567
  %2569 = icmp sgt i32 %2567, 0
  %2570 = and i1 %2568, %2569
  br i1 %2570, label %2571, label %2579

2571:                                             ; preds = %2566
  %2572 = getelementptr inbounds [2 x i8], [2 x i8]* %22, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 2, i8* nonnull %2572) #10
  store i8 -86, i8* %2572, align 1
  %2573 = getelementptr inbounds [2 x i8], [2 x i8]* %22, i64 0, i64 1
  store i8 -86, i8* %2573, align 1
  %2574 = call i32 (%struct.OpusCustomEncoder*, i32, ...) @opus_custom_encoder_ctl(%struct.OpusCustomEncoder* %52, i32 4028) #10
  %2575 = load i32, i32* %310, align 8
  %2576 = sdiv i32 %2575, 400
  %2577 = call i32 @celt_encode_with_ec(%struct.OpusCustomEncoder* %52, float* nonnull %2032, i32 %2576, i8* nonnull %2572, i32 2, %struct.ec_ctx* null) #10
  %2578 = call i32 (%struct.OpusCustomEncoder*, i32, ...) @opus_custom_encoder_ctl(%struct.OpusCustomEncoder* %52, i32 10002, i32 0) #10
  call void @llvm.lifetime.end.p0i8(i64 2, i8* nonnull %2572) #10
  br label %2579

2579:                                             ; preds = %2566, %2571
  %2580 = getelementptr inbounds %struct.ec_ctx, %struct.ec_ctx* %15, i64 0, i32 5
  %2581 = load i32, i32* %2580, align 8
  %2582 = getelementptr inbounds %struct.ec_ctx, %struct.ec_ctx* %15, i64 0, i32 7
  %2583 = load i32, i32* %2582, align 8
  %2584 = call i32 @llvm.ctlz.i32(i32 %2583, i1 true) #10, !range !16
  %2585 = or i32 %2584, -32
  %2586 = add i32 %2585, %2581
  %2587 = shl nsw i32 %2524, 3
  %2588 = icmp sgt i32 %2586, %2587
  br i1 %2588, label %2621, label %2589

2589:                                             ; preds = %2579
  br i1 %2561, label %2590, label %2602

2590:                                             ; preds = %2589
  %2591 = load i32, i32* %637, align 8
  %2592 = icmp eq i32 %2591, 1001
  br i1 %2592, label %2593, label %2602

2593:                                             ; preds = %2590
  %2594 = load i32, i32* %312, align 4
  %2595 = icmp eq i32 %2594, 0
  br i1 %2595, label %2602, label %2596

2596:                                             ; preds = %2593
  %2597 = load i32, i32* %309, align 8
  %2598 = getelementptr inbounds %struct.OpusEncoder, %struct.OpusEncoder* %0, i64 0, i32 2, i32 7
  %2599 = load i32, i32* %2598, align 4
  %2600 = sub nsw i32 %2597, %2599
  %2601 = call i32 (%struct.OpusCustomEncoder*, i32, ...) @opus_custom_encoder_ctl(%struct.OpusCustomEncoder* %52, i32 4002, i32 %2600) #10
  br label %2602

2602:                                             ; preds = %2593, %2596, %2590, %2589
  %2603 = load i32, i32* %312, align 4
  %2604 = call i32 (%struct.OpusCustomEncoder*, i32, ...) @opus_custom_encoder_ctl(%struct.OpusCustomEncoder* %52, i32 4006, i32 %2603) #10
  %2605 = call i32 @celt_encode_with_ec(%struct.OpusCustomEncoder* %52, float* nonnull %1125, i32 %2, i8* null, i32 %2524, %struct.ec_ctx* nonnull %15) #10
  %2606 = icmp slt i32 %2605, 0
  br i1 %2606, label %2820, label %2607

2607:                                             ; preds = %2602
  br i1 %2561, label %2608, label %2621

2608:                                             ; preds = %2607
  %2609 = load i32, i32* %637, align 8
  %2610 = icmp eq i32 %2609, 1001
  br i1 %2610, label %2611, label %2621

2611:                                             ; preds = %2608
  %2612 = load i32, i32* %312, align 4
  %2613 = icmp eq i32 %2612, 0
  br i1 %2613, label %2621, label %2614

2614:                                             ; preds = %2611
  %2615 = sext i32 %2605 to i64
  %2616 = getelementptr inbounds i8, i8* %1118, i64 %2615
  %2617 = sext i32 %2524 to i64
  %2618 = getelementptr inbounds i8, i8* %1118, i64 %2617
  %2619 = sext i32 %2506 to i64
  call void @llvm.memmove.p0i8.p0i8.i64(i8* align 1 %2616, i8* align 1 %2618, i64 %2619, i1 false)
  %2620 = add nsw i32 %2524, %2506
  br label %2621

2621:                                             ; preds = %2611, %2579, %2560, %2614, %2608, %2607
  %2622 = phi i32 [ %2620, %2614 ], [ %2524, %2611 ], [ %2524, %2608 ], [ %2524, %2607 ], [ %2524, %2579 ], [ %2524, %2560 ]
  %2623 = phi i32 [ %2605, %2614 ], [ %2605, %2611 ], [ %2605, %2608 ], [ %2605, %2607 ], [ %2525, %2579 ], [ %2525, %2560 ]
  %2624 = icmp eq i32 %2505, 0
  %2625 = or i1 %2624, %2562
  br i1 %2625, label %2660, label %2626

2626:                                             ; preds = %2621
  %2627 = getelementptr inbounds [2 x i8], [2 x i8]* %23, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 2, i8* nonnull %2627) #10
  store i8 -86, i8* %2627, align 1
  %2628 = getelementptr inbounds [2 x i8], [2 x i8]* %23, i64 0, i64 1
  store i8 -86, i8* %2628, align 1
  %2629 = load i32, i32* %310, align 8
  %2630 = sdiv i32 %2629, 200
  %2631 = sdiv i32 %2629, 400
  %2632 = call i32 (%struct.OpusCustomEncoder*, i32, ...) @opus_custom_encoder_ctl(%struct.OpusCustomEncoder* %52, i32 4028) #10
  %2633 = call i32 (%struct.OpusCustomEncoder*, i32, ...) @opus_custom_encoder_ctl(%struct.OpusCustomEncoder* %52, i32 10010, i32 0) #10
  %2634 = call i32 (%struct.OpusCustomEncoder*, i32, ...) @opus_custom_encoder_ctl(%struct.OpusCustomEncoder* %52, i32 10002, i32 0) #10
  %2635 = call i32 (%struct.OpusCustomEncoder*, i32, ...) @opus_custom_encoder_ctl(%struct.OpusCustomEncoder* %52, i32 4006, i32 0) #10
  %2636 = call i32 (%struct.OpusCustomEncoder*, i32, ...) @opus_custom_encoder_ctl(%struct.OpusCustomEncoder* %52, i32 4002, i32 -1) #10
  %2637 = load i32, i32* %637, align 8
  %2638 = icmp eq i32 %2637, 1001
  br i1 %2638, label %2639, label %2640

2639:                                             ; preds = %2626
  call void @ec_enc_shrink(%struct.ec_ctx* nonnull %15, i32 %2623) #10
  br label %2640

2640:                                             ; preds = %2639, %2626
  %2641 = phi i32 [ %2623, %2639 ], [ %2622, %2626 ]
  %2642 = load i32, i32* %266, align 8
  %2643 = sub nsw i32 %2, %2630
  %2644 = sub nsw i32 %2643, %2631
  %2645 = mul nsw i32 %2642, %2644
  %2646 = sext i32 %2645 to i64
  %2647 = getelementptr inbounds float, float* %1125, i64 %2646
  %2648 = call i32 @celt_encode_with_ec(%struct.OpusCustomEncoder* %52, float* %2647, i32 %2631, i8* nonnull %2627, i32 2, %struct.ec_ctx* null) #10
  %2649 = load i32, i32* %266, align 8
  %2650 = mul nsw i32 %2649, %2643
  %2651 = sext i32 %2650 to i64
  %2652 = getelementptr inbounds float, float* %1125, i64 %2651
  %2653 = sext i32 %2641 to i64
  %2654 = getelementptr inbounds i8, i8* %1118, i64 %2653
  %2655 = call i32 @celt_encode_with_ec(%struct.OpusCustomEncoder* %52, float* %2652, i32 %2630, i8* %2654, i32 %2506, %struct.ec_ctx* null) #10
  %2656 = icmp slt i32 %2655, 0
  br i1 %2656, label %2659, label %2657

2657:                                             ; preds = %2640
  %2658 = call i32 (%struct.OpusCustomEncoder*, i32, ...) @opus_custom_encoder_ctl(%struct.OpusCustomEncoder* %52, i32 4031, i32* nonnull %16) #10
  call void @llvm.lifetime.end.p0i8(i64 2, i8* nonnull %2627) #10
  br label %2660

2659:                                             ; preds = %2640
  call void @llvm.lifetime.end.p0i8(i64 2, i8* nonnull %2627) #10
  br label %2820

2660:                                             ; preds = %2657, %2621
  %2661 = load i32, i32* %637, align 8
  %2662 = load i32, i32* %310, align 8
  %2663 = sdiv i32 %2662, %2
  %2664 = load i32, i32* %532, align 8
  %2665 = icmp slt i32 %2663, 400
  br i1 %2665, label %2666, label %2674

2666:                                             ; preds = %2660, %2666
  %2667 = phi i32 [ %2669, %2666 ], [ %2663, %2660 ]
  %2668 = phi i32 [ %2670, %2666 ], [ 0, %2660 ]
  %2669 = shl i32 %2667, 1
  %2670 = add nuw nsw i32 %2668, 1
  %2671 = icmp slt i32 %2669, 400
  br i1 %2671, label %2666, label %2672

2672:                                             ; preds = %2666
  %2673 = shl i32 %2670, 3
  br label %2674

2674:                                             ; preds = %2672, %2660
  %2675 = phi i32 [ 0, %2660 ], [ %2673, %2672 ]
  switch i32 %2661, label %2690 [
    i32 1000, label %2676
    i32 1002, label %2682
  ]

2676:                                             ; preds = %2674
  %2677 = shl i32 %1982, 5
  %2678 = add i32 %2677, 96
  %2679 = add i32 %2675, -16
  %2680 = and i32 %2678, 224
  %2681 = or i32 %2679, %2680
  br label %2695

2682:                                             ; preds = %2674
  %2683 = icmp sgt i32 %1982, 1102
  %2684 = select i1 %2683, i32 %1982, i32 1102
  %2685 = shl i32 %2684, 5
  %2686 = add i32 %2685, 64
  %2687 = and i32 %2686, 96
  %2688 = or i32 %2687, %2675
  %2689 = or i32 %2688, 128
  br label %2695

2690:                                             ; preds = %2674
  %2691 = shl i32 %1982, 4
  %2692 = add i32 %2675, 240
  %2693 = or i32 %2691, %2692
  %2694 = or i32 %2693, 96
  br label %2695

2695:                                             ; preds = %2676, %2682, %2690
  %2696 = phi i32 [ %2681, %2676 ], [ %2689, %2682 ], [ %2694, %2690 ]
  %2697 = icmp eq i32 %2664, 2
  %2698 = zext i1 %2697 to i32
  %2699 = shl nuw nsw i32 %2698, 2
  %2700 = or i32 %2696, %2699
  %2701 = trunc i32 %2700 to i8
  store i8 %2701, i8* %3, align 1
  %2702 = getelementptr inbounds %struct.ec_ctx, %struct.ec_ctx* %15, i64 0, i32 7
  %2703 = load i32, i32* %2702, align 8
  %2704 = load i32, i32* %16, align 4
  %2705 = xor i32 %2704, %2703
  store i32 %2705, i32* %31, align 4
  %2706 = icmp eq i32 %661, 0
  br i1 %2706, label %2707, label %2709

2707:                                             ; preds = %2695
  %2708 = load i32, i32* %637, align 8
  br label %2709

2709:                                             ; preds = %2695, %2707
  %2710 = phi i32 [ %2708, %2707 ], [ 1002, %2695 ]
  store i32 %2710, i32* %645, align 4
  %2711 = load i32, i32* %532, align 8
  %2712 = getelementptr inbounds %struct.OpusEncoder, %struct.OpusEncoder* %0, i64 0, i32 31
  store i32 %2711, i32* %2712, align 8
  %2713 = getelementptr inbounds %struct.OpusEncoder, %struct.OpusEncoder* %0, i64 0, i32 32
  store i32 %2, i32* %2713, align 4
  %2714 = getelementptr inbounds %struct.OpusEncoder, %struct.OpusEncoder* %0, i64 0, i32 36
  store i32 0, i32* %2714, align 4
  %2715 = load i32, i32* %551, align 8
  %2716 = icmp eq i32 %2715, 0
  br i1 %2716, label %2775, label %2717

2717:                                             ; preds = %2709
  %2718 = load i32, i32* %66, align 4
  %2719 = or i32 %2718, %265
  %2720 = icmp eq i32 %2719, 0
  br i1 %2720, label %2775, label %2721

2721:                                             ; preds = %2717
  %2722 = getelementptr inbounds %struct.OpusEncoder, %struct.OpusEncoder* %0, i64 0, i32 41
  %2723 = load i32, i32* %310, align 8
  %2724 = icmp eq i32 %262, 0
  br i1 %2724, label %2725, label %2734

2725:                                             ; preds = %2721
  %2726 = mul nsw i32 %2, 2000
  %2727 = sdiv i32 %2726, %2723
  %2728 = load i32, i32* %2722, align 4
  %2729 = add nsw i32 %2728, %2727
  store i32 %2729, i32* %2722, align 4
  %2730 = icmp sgt i32 %2729, 400
  br i1 %2730, label %2731, label %2777

2731:                                             ; preds = %2725
  %2732 = icmp slt i32 %2729, 1201
  br i1 %2732, label %2735, label %2733

2733:                                             ; preds = %2731
  store i32 400, i32* %2722, align 4
  br label %2777

2734:                                             ; preds = %2721
  store i32 0, i32* %2722, align 4
  br label %2777

2735:                                             ; preds = %2731
  store i32 0, i32* %31, align 4
  %2736 = load i32, i32* %637, align 8
  %2737 = sdiv i32 %2723, %2
  %2738 = icmp slt i32 %2737, 400
  br i1 %2738, label %2739, label %2747

2739:                                             ; preds = %2735, %2739
  %2740 = phi i32 [ %2742, %2739 ], [ %2737, %2735 ]
  %2741 = phi i32 [ %2743, %2739 ], [ 0, %2735 ]
  %2742 = shl i32 %2740, 1
  %2743 = add nuw nsw i32 %2741, 1
  %2744 = icmp slt i32 %2742, 400
  br i1 %2744, label %2739, label %2745

2745:                                             ; preds = %2739
  %2746 = shl i32 %2743, 3
  br label %2747

2747:                                             ; preds = %2745, %2735
  %2748 = phi i32 [ 0, %2735 ], [ %2746, %2745 ]
  switch i32 %2736, label %2763 [
    i32 1000, label %2749
    i32 1002, label %2755
  ]

2749:                                             ; preds = %2747
  %2750 = shl i32 %1982, 5
  %2751 = add i32 %2750, 96
  %2752 = add i32 %2748, -16
  %2753 = and i32 %2751, 224
  %2754 = or i32 %2752, %2753
  br label %2768

2755:                                             ; preds = %2747
  %2756 = icmp sgt i32 %1982, 1102
  %2757 = select i1 %2756, i32 %1982, i32 1102
  %2758 = shl i32 %2757, 5
  %2759 = add i32 %2758, 64
  %2760 = and i32 %2759, 96
  %2761 = or i32 %2760, %2748
  %2762 = or i32 %2761, 128
  br label %2768

2763:                                             ; preds = %2747
  %2764 = shl i32 %1982, 4
  %2765 = add i32 %2748, 240
  %2766 = or i32 %2764, %2765
  %2767 = or i32 %2766, 96
  br label %2768

2768:                                             ; preds = %2749, %2755, %2763
  %2769 = phi i32 [ %2754, %2749 ], [ %2762, %2755 ], [ %2767, %2763 ]
  %2770 = icmp eq i32 %2711, 2
  %2771 = zext i1 %2770 to i32
  %2772 = shl nuw nsw i32 %2771, 2
  %2773 = or i32 %2769, %2772
  %2774 = trunc i32 %2773 to i8
  store i8 %2774, i8* %3, align 1
  br label %2820

2775:                                             ; preds = %2717, %2709
  %2776 = getelementptr inbounds %struct.OpusEncoder, %struct.OpusEncoder* %0, i64 0, i32 41
  store i32 0, i32* %2776, align 8
  br label %2777

2777:                                             ; preds = %2734, %2733, %2725, %2775
  %2778 = getelementptr inbounds %struct.ec_ctx, %struct.ec_ctx* %15, i64 0, i32 5
  %2779 = load i32, i32* %2778, align 8
  %2780 = call i32 @llvm.ctlz.i32(i32 %2703, i1 true) #10, !range !16
  %2781 = or i32 %2780, -32
  %2782 = add i32 %2779, %2781
  %2783 = shl nsw i32 %1119, 3
  %2784 = icmp sgt i32 %2782, %2783
  br i1 %2784, label %2785, label %2788

2785:                                             ; preds = %2777
  %2786 = icmp slt i32 %331, 2
  br i1 %2786, label %2820, label %2787

2787:                                             ; preds = %2785
  store i8 0, i8* %1118, align 1
  store i32 0, i32* %31, align 4
  br label %2809

2788:                                             ; preds = %2777
  %2789 = load i32, i32* %637, align 8
  %2790 = icmp ne i32 %2789, 1000
  %2791 = or i1 %2504, %2790
  %2792 = xor i1 %2791, true
  %2793 = icmp sgt i32 %2623, 2
  %2794 = and i1 %2793, %2792
  br i1 %2794, label %2795, label %2809

2795:                                             ; preds = %2788
  %2796 = sext i32 %2623 to i64
  br label %2797

2797:                                             ; preds = %2795, %2803
  %2798 = phi i64 [ %2796, %2795 ], [ %2804, %2803 ]
  %2799 = phi i32 [ %2623, %2795 ], [ %2805, %2803 ]
  %2800 = getelementptr inbounds i8, i8* %3, i64 %2798
  %2801 = load i8, i8* %2800, align 1
  %2802 = icmp eq i8 %2801, 0
  br i1 %2802, label %2803, label %2807

2803:                                             ; preds = %2797
  %2804 = add nsw i64 %2798, -1
  %2805 = add nsw i32 %2799, -1
  %2806 = icmp sgt i64 %2804, 2
  br i1 %2806, label %2797, label %2809

2807:                                             ; preds = %2797
  %2808 = trunc i64 %2798 to i32
  br label %2809

2809:                                             ; preds = %2803, %2807, %2788, %2787
  %2810 = phi i32 [ 1, %2787 ], [ %2623, %2788 ], [ %2808, %2807 ], [ %2805, %2803 ]
  %2811 = add nsw i32 %2506, 1
  %2812 = add nsw i32 %2811, %2810
  %2813 = load i32, i32* %312, align 4
  %2814 = icmp eq i32 %2813, 0
  br i1 %2814, label %2815, label %2818

2815:                                             ; preds = %2809
  %2816 = call i32 @opus_packet_pad(i8* %3, i32 %2812, i32 %331) #10
  %2817 = icmp eq i32 %2816, 0
  br i1 %2817, label %2818, label %2820

2818:                                             ; preds = %2815, %2809
  %2819 = phi i32 [ %2812, %2809 ], [ %331, %2815 ]
  br label %2820

2820:                                             ; preds = %2659, %2547, %1941, %1877, %2815, %2785, %2602, %447, %450, %37, %13, %2818, %2768, %1066
  %2821 = phi i32 [ %1067, %1066 ], [ 1, %2768 ], [ %2819, %2818 ], [ -3, %2659 ], [ -1, %13 ], [ -2, %37 ], [ %441, %447 ], [ %453, %450 ], [ -3, %2602 ], [ -2, %2785 ], [ -3, %2815 ], [ 1, %1941 ], [ -3, %1877 ], [ -3, %2547 ]
  call void @llvm.lifetime.end.p0i8(i64 64, i8* nonnull %28) #10
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %27) #10
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %26) #10
  call void @llvm.lifetime.end.p0i8(i64 56, i8* nonnull %25) #10
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %24) #10
  ret i32 %2821

2822:                                             ; preds = %771
  %2823 = icmp slt i32 %766, 1103
  %2824 = select i1 %2823, i32 700, i32 -700
  %2825 = add i32 9000, %2824
  %2826 = icmp slt i32 %748, %2825
  br i1 %2826, label %2827, label %778

2827:                                             ; preds = %2822
  %2828 = icmp slt i32 %766, 1102
  %2829 = select i1 %2828, i32 700, i32 -700
  %2830 = add i32 9000, %2829
  %2831 = icmp slt i32 %748, %2830
  br i1 %2831, label %778, label %780

2832:                                             ; preds = %776
  %2833 = icmp slt i32 %748, 9000
  %2834 = select i1 %2833, i32 1101, i32 1103
  br label %778
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #1

declare void @run_analysis(%struct.TonalityAnalysisState*, %struct.OpusCustomMode*, i8*, i32, i32, i32, i32, i32, i32, i32, void (i8*, float*, i32, i32, i32, i32, i32)*, %struct.AnalysisInfo*) local_unnamed_addr #2

declare void @tonality_analysis_reset(%struct.TonalityAnalysisState*) local_unnamed_addr #2

; Function Attrs: nounwind readnone speculatable
declare double @llvm.floor.f64(double) #7

declare i32 @opus_packet_pad(i8*, i32, i32) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define internal fastcc i32 @encode_multiframe_packet(%struct.OpusEncoder*, float*, i32, i32, i8*, i32, i32, i32, i32) unnamed_addr #0 {
  %10 = icmp eq i32 %2, 2
  %11 = shl i32 %2, 1
  %12 = select i1 %10, i32 3, i32 %11
  %13 = getelementptr inbounds %struct.OpusEncoder, %struct.OpusEncoder* %0, i64 0, i32 13
  %14 = load i32, i32* %13, align 4
  %15 = icmp eq i32 %14, 0
  br i1 %15, label %16, label %32

16:                                               ; preds = %9
  %17 = getelementptr inbounds %struct.OpusEncoder, %struct.OpusEncoder* %0, i64 0, i32 17
  %18 = load i32, i32* %17, align 4
  %19 = icmp eq i32 %18, -1
  br i1 %19, label %32, label %20

20:                                               ; preds = %16
  %21 = getelementptr inbounds %struct.OpusEncoder, %struct.OpusEncoder* %0, i64 0, i32 16
  %22 = load i32, i32* %21, align 8
  %23 = mul nsw i32 %22, 3
  %24 = getelementptr inbounds %struct.OpusEncoder, %struct.OpusEncoder* %0, i64 0, i32 12
  %25 = load i32, i32* %24, align 8
  %26 = mul nsw i32 %25, 24
  %27 = mul nsw i32 %3, %2
  %28 = sdiv i32 %26, %27
  %29 = sdiv i32 %23, %28
  %30 = icmp slt i32 %29, %5
  %31 = select i1 %30, i32 %29, i32 %5
  br label %32

32:                                               ; preds = %16, %9, %20
  %33 = phi i32 [ %31, %20 ], [ %5, %9 ], [ %5, %16 ]
  %34 = sub nsw i32 %33, %12
  %35 = sdiv i32 %34, %2
  %36 = icmp sgt i32 %35, 1275
  %37 = add nsw i32 %35, 1
  %38 = select i1 %36, i32 1276, i32 %37
  %39 = mul nsw i32 %38, %2
  %40 = sext i32 %39 to i64
  %41 = alloca i8, i64 %40, align 16
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %41, i8 -86, i64 %40, i1 false)
  %42 = alloca %struct.OpusRepacketizer, align 16
  %43 = getelementptr inbounds %struct.OpusRepacketizer, %struct.OpusRepacketizer* %42, i64 0, i32 0
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %43, i8 -86, i64 496, i1 false)
  %44 = call %struct.OpusRepacketizer* @opus_repacketizer_init(%struct.OpusRepacketizer* nonnull %42) #10
  %45 = getelementptr inbounds %struct.OpusEncoder, %struct.OpusEncoder* %0, i64 0, i32 10
  %46 = load i32, i32* %45, align 8
  %47 = getelementptr inbounds %struct.OpusEncoder, %struct.OpusEncoder* %0, i64 0, i32 8
  %48 = load i32, i32* %47, align 8
  %49 = getelementptr inbounds %struct.OpusEncoder, %struct.OpusEncoder* %0, i64 0, i32 6
  %50 = load i32, i32* %49, align 8
  %51 = getelementptr inbounds %struct.OpusEncoder, %struct.OpusEncoder* %0, i64 0, i32 29
  %52 = load i32, i32* %51, align 8
  store i32 %52, i32* %45, align 8
  %53 = getelementptr inbounds %struct.OpusEncoder, %struct.OpusEncoder* %0, i64 0, i32 33
  %54 = load i32, i32* %53, align 8
  store i32 %54, i32* %47, align 8
  %55 = getelementptr inbounds %struct.OpusEncoder, %struct.OpusEncoder* %0, i64 0, i32 24
  %56 = load i32, i32* %55, align 8
  store i32 %56, i32* %49, align 8
  %57 = getelementptr inbounds %struct.OpusEncoder, %struct.OpusEncoder* %0, i64 0, i32 2, i32 15
  %58 = load i32, i32* %57, align 4
  %59 = icmp eq i32 %58, 0
  br i1 %59, label %61, label %60

60:                                               ; preds = %32
  store i32 1, i32* %49, align 8
  br label %63

61:                                               ; preds = %32
  %62 = getelementptr inbounds %struct.OpusEncoder, %struct.OpusEncoder* %0, i64 0, i32 31
  store i32 %56, i32* %62, align 8
  br label %63

63:                                               ; preds = %61, %60
  %64 = icmp sgt i32 %2, 0
  br i1 %64, label %65, label %122

65:                                               ; preds = %63
  %66 = add nsw i32 %2, -1
  %67 = getelementptr inbounds %struct.OpusEncoder, %struct.OpusEncoder* %0, i64 0, i32 43
  %68 = icmp eq i32 %6, 0
  %69 = getelementptr inbounds %struct.OpusEncoder, %struct.OpusEncoder* %0, i64 0, i32 4
  br i1 %68, label %70, label %74

70:                                               ; preds = %65
  %71 = sext i32 %38 to i64
  %72 = sext i32 %66 to i64
  %73 = zext i32 %2 to i64
  br label %104

74:                                               ; preds = %65
  %75 = sext i32 %66 to i64
  %76 = zext i32 %66 to i64
  %77 = sext i32 %38 to i64
  %78 = zext i32 %2 to i64
  br label %79

79:                                               ; preds = %84, %74
  %80 = phi i64 [ 0, %74 ], [ %101, %84 ]
  store i32 0, i32* %57, align 4
  %81 = icmp slt i64 %80, %75
  %82 = zext i1 %81 to i32
  store i32 %82, i32* %67, align 8
  %83 = icmp eq i64 %80, %76
  br i1 %83, label %86, label %87

84:                                               ; preds = %98
  %85 = icmp eq i64 %101, %78
  br i1 %85, label %122, label %79

86:                                               ; preds = %79
  store i32 1002, i32* %45, align 8
  br label %87

87:                                               ; preds = %86, %79
  %88 = load i32, i32* %69, align 8
  %89 = trunc i64 %80 to i32
  %90 = mul i32 %89, %3
  %91 = mul i32 %90, %88
  %92 = sext i32 %91 to i64
  %93 = getelementptr inbounds float, float* %1, i64 %92
  %94 = mul nsw i64 %80, %77
  %95 = getelementptr inbounds i8, i8* %41, i64 %94
  %96 = call i32 @opus_encode_native(%struct.OpusEncoder* %0, float* %93, i32 %3, i8* %95, i32 %38, i32 %7, i8* null, i32 0, i32 0, i32 0, i32 0, void (i8*, float*, i32, i32, i32, i32, i32)* null, i32 %8)
  %97 = icmp slt i32 %96, 0
  br i1 %97, label %129, label %98

98:                                               ; preds = %87
  %99 = call i32 @opus_repacketizer_cat(%struct.OpusRepacketizer* nonnull %42, i8* %95, i32 %96) #10
  %100 = icmp slt i32 %99, 0
  %101 = add nuw nsw i64 %80, 1
  br i1 %100, label %129, label %84

102:                                              ; preds = %118
  %103 = icmp eq i64 %121, %73
  br i1 %103, label %122, label %104

104:                                              ; preds = %102, %70
  %105 = phi i64 [ 0, %70 ], [ %121, %102 ]
  store i32 0, i32* %57, align 4
  %106 = icmp slt i64 %105, %72
  %107 = zext i1 %106 to i32
  store i32 %107, i32* %67, align 8
  %108 = load i32, i32* %69, align 8
  %109 = trunc i64 %105 to i32
  %110 = mul i32 %109, %3
  %111 = mul i32 %110, %108
  %112 = sext i32 %111 to i64
  %113 = getelementptr inbounds float, float* %1, i64 %112
  %114 = mul nsw i64 %105, %71
  %115 = getelementptr inbounds i8, i8* %41, i64 %114
  %116 = call i32 @opus_encode_native(%struct.OpusEncoder* %0, float* %113, i32 %3, i8* %115, i32 %38, i32 %7, i8* null, i32 0, i32 0, i32 0, i32 0, void (i8*, float*, i32, i32, i32, i32, i32)* null, i32 %8)
  %117 = icmp slt i32 %116, 0
  br i1 %117, label %129, label %118

118:                                              ; preds = %104
  %119 = call i32 @opus_repacketizer_cat(%struct.OpusRepacketizer* nonnull %42, i8* %115, i32 %116) #10
  %120 = icmp slt i32 %119, 0
  %121 = add nuw nsw i64 %105, 1
  br i1 %120, label %129, label %102

122:                                              ; preds = %84, %102, %63
  %123 = load i32, i32* %13, align 4
  %124 = icmp eq i32 %123, 0
  %125 = zext i1 %124 to i32
  %126 = call i32 @opus_repacketizer_out_range_impl(%struct.OpusRepacketizer* nonnull %42, i32 0, i32 %2, i8* %4, i32 %33, i32 0, i32 %125) #10
  %127 = icmp slt i32 %126, 0
  br i1 %127, label %129, label %128

128:                                              ; preds = %122
  store i32 %46, i32* %45, align 8
  store i32 %48, i32* %47, align 8
  store i32 %50, i32* %49, align 8
  store i32 %58, i32* %57, align 4
  br label %129

129:                                              ; preds = %98, %87, %118, %104, %122, %128
  %130 = phi i32 [ %126, %128 ], [ -3, %122 ], [ -3, %104 ], [ -3, %118 ], [ -3, %87 ], [ -3, %98 ]
  ret i32 %130
}

declare void @ec_enc_init(%struct.ec_ctx*, i8*, i32) local_unnamed_addr #2

declare i32 @silk_log2lin(i32) local_unnamed_addr #2

declare float @celt_inner_prod_sse(float*, float*, i32) local_unnamed_addr #2

; Function Attrs: nofree nounwind
declare double @exp(double) local_unnamed_addr #8

; Function Attrs: noreturn
declare void @celt_fatal(i8*, i8*, i32) local_unnamed_addr #9

declare i32 @silk_Encode(i8*, %struct.silk_EncControlStruct*, i16*, i32, %struct.ec_ctx*, i32*, i32, i32) local_unnamed_addr #2

; Function Attrs: argmemonly nounwind
declare void @llvm.memmove.p0i8.p0i8.i64(i8* nocapture, i8* nocapture readonly, i64, i1 immarg) #1

declare void @ec_enc_bit_logp(%struct.ec_ctx*, i32, i32) local_unnamed_addr #2

declare void @ec_enc_uint(%struct.ec_ctx*, i32, i32) local_unnamed_addr #2

declare void @ec_enc_done(%struct.ec_ctx*) local_unnamed_addr #2

declare void @ec_enc_shrink(%struct.ec_ctx*, i32) local_unnamed_addr #2

declare i32 @celt_encode_with_ec(%struct.OpusCustomEncoder*, float*, i32, i8*, i32, %struct.ec_ctx*) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden i32 @opus_encode(%struct.OpusEncoder*, i16*, i32, i8*, i32) local_unnamed_addr #0 {
  %6 = getelementptr inbounds %struct.OpusEncoder, %struct.OpusEncoder* %0, i64 0, i32 15
  %7 = load i32, i32* %6, align 4
  %8 = getelementptr inbounds %struct.OpusEncoder, %struct.OpusEncoder* %0, i64 0, i32 12
  %9 = load i32, i32* %8, align 8
  %10 = sdiv i32 %9, 400
  %11 = icmp sgt i32 %10, %2
  br i1 %11, label %151, label %12

12:                                               ; preds = %5
  %13 = icmp eq i32 %7, 5000
  br i1 %13, label %28, label %14

14:                                               ; preds = %12
  %15 = add i32 %7, -5001
  %16 = icmp ult i32 %15, 9
  br i1 %16, label %17, label %151

17:                                               ; preds = %14
  %18 = icmp slt i32 %7, 5006
  br i1 %18, label %19, label %21

19:                                               ; preds = %17
  %20 = shl i32 %10, %15
  br label %25

21:                                               ; preds = %17
  %22 = add nsw i32 %7, -5003
  %23 = mul nsw i32 %22, %9
  %24 = sdiv i32 %23, 50
  br label %25

25:                                               ; preds = %21, %19
  %26 = phi i32 [ %20, %19 ], [ %24, %21 ]
  %27 = icmp sgt i32 %26, %2
  br i1 %27, label %151, label %28

28:                                               ; preds = %25, %12
  %29 = phi i32 [ %26, %25 ], [ %2, %12 ]
  %30 = mul nsw i32 %29, 400
  %31 = icmp eq i32 %30, %9
  %32 = mul nsw i32 %29, 200
  %33 = icmp eq i32 %32, %9
  %34 = or i1 %31, %33
  %35 = mul nsw i32 %29, 100
  %36 = icmp eq i32 %35, %9
  %37 = or i1 %36, %34
  br i1 %37, label %59, label %38

38:                                               ; preds = %28
  %39 = mul nsw i32 %29, 50
  %40 = icmp eq i32 %39, %9
  %41 = mul nsw i32 %29, 25
  %42 = icmp eq i32 %41, %9
  %43 = or i1 %40, %42
  %44 = mul nsw i32 %9, 3
  %45 = icmp eq i32 %39, %44
  %46 = or i1 %45, %43
  %47 = shl nsw i32 %9, 2
  %48 = icmp eq i32 %39, %47
  %49 = or i1 %48, %46
  %50 = mul nsw i32 %9, 5
  %51 = icmp eq i32 %39, %50
  %52 = or i1 %51, %49
  %53 = mul nsw i32 %9, 6
  %54 = icmp eq i32 %39, %53
  %55 = or i1 %54, %52
  %56 = xor i1 %55, true
  %57 = icmp slt i32 %29, 1
  %58 = or i1 %57, %56
  br i1 %58, label %151, label %61

59:                                               ; preds = %28
  %60 = icmp slt i32 %29, 1
  br i1 %60, label %151, label %61

61:                                               ; preds = %38, %59
  %62 = getelementptr inbounds %struct.OpusEncoder, %struct.OpusEncoder* %0, i64 0, i32 4
  %63 = load i32, i32* %62, align 8
  %64 = mul i32 %63, %29
  %65 = sext i32 %64 to i64
  %66 = shl nsw i64 %65, 2
  %67 = alloca float, i64 %65, align 16
  %68 = bitcast float* %67 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %68, i8 -86, i64 %66, i1 false)
  %69 = icmp sgt i32 %64, 0
  br i1 %69, label %70, label %148

70:                                               ; preds = %61
  %71 = zext i32 %64 to i64
  %72 = icmp ult i32 %64, 8
  br i1 %72, label %137, label %73

73:                                               ; preds = %70
  %74 = and i64 %71, 4294967288
  %75 = add nsw i64 %74, -8
  %76 = lshr exact i64 %75, 3
  %77 = add nuw nsw i64 %76, 1
  %78 = and i64 %77, 1
  %79 = icmp eq i64 %75, 0
  br i1 %79, label %117, label %80

80:                                               ; preds = %73
  %81 = sub nuw nsw i64 %77, %78
  br label %82

82:                                               ; preds = %82, %80
  %83 = phi i64 [ 0, %80 ], [ %114, %82 ]
  %84 = phi i64 [ %81, %80 ], [ %115, %82 ]
  %85 = getelementptr inbounds i16, i16* %1, i64 %83
  %86 = bitcast i16* %85 to <4 x i16>*
  %87 = load <4 x i16>, <4 x i16>* %86, align 2
  %88 = getelementptr inbounds i16, i16* %85, i64 4
  %89 = bitcast i16* %88 to <4 x i16>*
  %90 = load <4 x i16>, <4 x i16>* %89, align 2
  %91 = sitofp <4 x i16> %87 to <4 x float>
  %92 = sitofp <4 x i16> %90 to <4 x float>
  %93 = fmul <4 x float> %91, <float 0x3F00000000000000, float 0x3F00000000000000, float 0x3F00000000000000, float 0x3F00000000000000>
  %94 = fmul <4 x float> %92, <float 0x3F00000000000000, float 0x3F00000000000000, float 0x3F00000000000000, float 0x3F00000000000000>
  %95 = getelementptr inbounds float, float* %67, i64 %83
  %96 = bitcast float* %95 to <4 x float>*
  store <4 x float> %93, <4 x float>* %96, align 16
  %97 = getelementptr inbounds float, float* %95, i64 4
  %98 = bitcast float* %97 to <4 x float>*
  store <4 x float> %94, <4 x float>* %98, align 16
  %99 = or i64 %83, 8
  %100 = getelementptr inbounds i16, i16* %1, i64 %99
  %101 = bitcast i16* %100 to <4 x i16>*
  %102 = load <4 x i16>, <4 x i16>* %101, align 2
  %103 = getelementptr inbounds i16, i16* %100, i64 4
  %104 = bitcast i16* %103 to <4 x i16>*
  %105 = load <4 x i16>, <4 x i16>* %104, align 2
  %106 = sitofp <4 x i16> %102 to <4 x float>
  %107 = sitofp <4 x i16> %105 to <4 x float>
  %108 = fmul <4 x float> %106, <float 0x3F00000000000000, float 0x3F00000000000000, float 0x3F00000000000000, float 0x3F00000000000000>
  %109 = fmul <4 x float> %107, <float 0x3F00000000000000, float 0x3F00000000000000, float 0x3F00000000000000, float 0x3F00000000000000>
  %110 = getelementptr inbounds float, float* %67, i64 %99
  %111 = bitcast float* %110 to <4 x float>*
  store <4 x float> %108, <4 x float>* %111, align 16
  %112 = getelementptr inbounds float, float* %110, i64 4
  %113 = bitcast float* %112 to <4 x float>*
  store <4 x float> %109, <4 x float>* %113, align 16
  %114 = add i64 %83, 16
  %115 = add i64 %84, -2
  %116 = icmp eq i64 %115, 0
  br i1 %116, label %117, label %82, !llvm.loop !17

117:                                              ; preds = %82, %73
  %118 = phi i64 [ 0, %73 ], [ %114, %82 ]
  %119 = icmp eq i64 %78, 0
  br i1 %119, label %135, label %120

120:                                              ; preds = %117
  %121 = getelementptr inbounds i16, i16* %1, i64 %118
  %122 = bitcast i16* %121 to <4 x i16>*
  %123 = load <4 x i16>, <4 x i16>* %122, align 2
  %124 = getelementptr inbounds i16, i16* %121, i64 4
  %125 = bitcast i16* %124 to <4 x i16>*
  %126 = load <4 x i16>, <4 x i16>* %125, align 2
  %127 = sitofp <4 x i16> %123 to <4 x float>
  %128 = sitofp <4 x i16> %126 to <4 x float>
  %129 = fmul <4 x float> %127, <float 0x3F00000000000000, float 0x3F00000000000000, float 0x3F00000000000000, float 0x3F00000000000000>
  %130 = fmul <4 x float> %128, <float 0x3F00000000000000, float 0x3F00000000000000, float 0x3F00000000000000, float 0x3F00000000000000>
  %131 = getelementptr inbounds float, float* %67, i64 %118
  %132 = bitcast float* %131 to <4 x float>*
  store <4 x float> %129, <4 x float>* %132, align 16
  %133 = getelementptr inbounds float, float* %131, i64 4
  %134 = bitcast float* %133 to <4 x float>*
  store <4 x float> %130, <4 x float>* %134, align 16
  br label %135

135:                                              ; preds = %117, %120
  %136 = icmp eq i64 %74, %71
  br i1 %136, label %148, label %137

137:                                              ; preds = %135, %70
  %138 = phi i64 [ 0, %70 ], [ %74, %135 ]
  br label %139

139:                                              ; preds = %137, %139
  %140 = phi i64 [ %146, %139 ], [ %138, %137 ]
  %141 = getelementptr inbounds i16, i16* %1, i64 %140
  %142 = load i16, i16* %141, align 2
  %143 = sitofp i16 %142 to float
  %144 = fmul float %143, 0x3F00000000000000
  %145 = getelementptr inbounds float, float* %67, i64 %140
  store float %144, float* %145, align 4
  %146 = add nuw nsw i64 %140, 1
  %147 = icmp eq i64 %146, %71
  br i1 %147, label %148, label %139, !llvm.loop !18

148:                                              ; preds = %139, %135, %61
  %149 = bitcast i16* %1 to i8*
  %150 = call i32 @opus_encode_native(%struct.OpusEncoder* %0, float* nonnull %67, i32 %29, i8* %3, i32 %4, i32 16, i8* %149, i32 %2, i32 0, i32 -2, i32 %63, void (i8*, float*, i32, i32, i32, i32, i32)* nonnull @downmix_int, i32 0)
  br label %151

151:                                              ; preds = %38, %25, %14, %5, %59, %148
  %152 = phi i32 [ %150, %148 ], [ -1, %59 ], [ -1, %5 ], [ -1, %14 ], [ -1, %25 ], [ -1, %38 ]
  ret i32 %152
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @opus_encode_float(%struct.OpusEncoder*, float*, i32, i8*, i32) local_unnamed_addr #0 {
  %6 = getelementptr inbounds %struct.OpusEncoder, %struct.OpusEncoder* %0, i64 0, i32 15
  %7 = load i32, i32* %6, align 4
  %8 = getelementptr inbounds %struct.OpusEncoder, %struct.OpusEncoder* %0, i64 0, i32 12
  %9 = load i32, i32* %8, align 8
  %10 = sdiv i32 %9, 400
  %11 = icmp sgt i32 %10, %2
  br i1 %11, label %57, label %12

12:                                               ; preds = %5
  %13 = icmp eq i32 %7, 5000
  br i1 %13, label %28, label %14

14:                                               ; preds = %12
  %15 = add i32 %7, -5001
  %16 = icmp ult i32 %15, 9
  br i1 %16, label %17, label %57

17:                                               ; preds = %14
  %18 = icmp slt i32 %7, 5006
  br i1 %18, label %19, label %21

19:                                               ; preds = %17
  %20 = shl i32 %10, %15
  br label %25

21:                                               ; preds = %17
  %22 = add nsw i32 %7, -5003
  %23 = mul nsw i32 %22, %9
  %24 = sdiv i32 %23, 50
  br label %25

25:                                               ; preds = %21, %19
  %26 = phi i32 [ %20, %19 ], [ %24, %21 ]
  %27 = icmp sgt i32 %26, %2
  br i1 %27, label %57, label %28

28:                                               ; preds = %25, %12
  %29 = phi i32 [ %26, %25 ], [ %2, %12 ]
  %30 = mul nsw i32 %29, 400
  %31 = icmp eq i32 %30, %9
  %32 = mul nsw i32 %29, 200
  %33 = icmp eq i32 %32, %9
  %34 = or i1 %31, %33
  %35 = mul nsw i32 %29, 100
  %36 = icmp eq i32 %35, %9
  %37 = or i1 %36, %34
  br i1 %37, label %56, label %38

38:                                               ; preds = %28
  %39 = mul nsw i32 %29, 50
  %40 = icmp eq i32 %39, %9
  %41 = mul nsw i32 %29, 25
  %42 = icmp eq i32 %41, %9
  %43 = or i1 %40, %42
  %44 = mul nsw i32 %9, 3
  %45 = icmp eq i32 %39, %44
  %46 = or i1 %45, %43
  %47 = shl nsw i32 %9, 2
  %48 = icmp eq i32 %39, %47
  %49 = or i1 %48, %46
  %50 = mul nsw i32 %9, 5
  %51 = icmp eq i32 %39, %50
  %52 = or i1 %51, %49
  %53 = mul nsw i32 %9, 6
  %54 = icmp eq i32 %39, %53
  %55 = or i1 %54, %52
  br i1 %55, label %56, label %57

56:                                               ; preds = %38, %28
  br label %57

57:                                               ; preds = %5, %14, %25, %38, %56
  %58 = phi i32 [ %29, %56 ], [ -1, %5 ], [ -1, %14 ], [ -1, %25 ], [ -1, %38 ]
  %59 = bitcast float* %1 to i8*
  %60 = getelementptr inbounds %struct.OpusEncoder, %struct.OpusEncoder* %0, i64 0, i32 4
  %61 = load i32, i32* %60, align 8
  %62 = tail call i32 @opus_encode_native(%struct.OpusEncoder* %0, float* %1, i32 %58, i8* %3, i32 %4, i32 24, i8* %59, i32 %2, i32 0, i32 -2, i32 %61, void (i8*, float*, i32, i32, i32, i32, i32)* nonnull @downmix_float, i32 1)
  ret i32 %62
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @opus_encoder_ctl(%struct.OpusEncoder*, i32, ...) local_unnamed_addr #0 {
  %3 = alloca [1 x %struct.__va_list_tag], align 16
  %4 = alloca %struct.silk_EncControlStruct, align 4
  %5 = bitcast [1 x %struct.__va_list_tag]* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %5) #10
  %6 = getelementptr inbounds [1 x %struct.__va_list_tag], [1 x %struct.__va_list_tag]* %3, i64 0, i64 0, i32 0
  %7 = getelementptr inbounds [1 x %struct.__va_list_tag], [1 x %struct.__va_list_tag]* %3, i64 0, i64 0, i32 2
  %8 = getelementptr inbounds [1 x %struct.__va_list_tag], [1 x %struct.__va_list_tag]* %3, i64 0, i64 0, i32 3
  %9 = bitcast [1 x %struct.__va_list_tag]* %3 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %9, i8 -86, i64 24, i1 false)
  call void @llvm.va_start(i8* nonnull %5)
  %10 = bitcast %struct.OpusEncoder* %0 to i8*
  %11 = getelementptr inbounds %struct.OpusEncoder, %struct.OpusEncoder* %0, i64 0, i32 0
  %12 = load i32, i32* %11, align 8
  %13 = sext i32 %12 to i64
  %14 = getelementptr inbounds i8, i8* %10, i64 %13
  %15 = bitcast i8* %14 to %struct.OpusCustomEncoder*
  switch i32 %1, label %933 [
    i32 4000, label %16
    i32 4001, label %42
    i32 4002, label %61
    i32 4003, label %89
    i32 4022, label %133
    i32 4023, label %157
    i32 4004, label %176
    i32 4005, label %203
    i32 4008, label %222
    i32 4009, label %247
    i32 4016, label %266
    i32 4017, label %284
    i32 4010, label %303
    i32 4011, label %322
    i32 4012, label %341
    i32 4013, label %359
    i32 4014, label %378
    i32 4015, label %397
    i32 4006, label %416
    i32 4007, label %436
    i32 11018, label %455
    i32 11019, label %474
    i32 4020, label %493
    i32 4021, label %511
    i32 4024, label %530
    i32 4025, label %547
    i32 4027, label %566
    i32 4029, label %593
    i32 4031, label %612
    i32 4036, label %631
    i32 4037, label %650
    i32 4040, label %669
    i32 4041, label %688
    i32 4042, label %707
    i32 4043, label %725
    i32 4046, label %744
    i32 4047, label %762
    i32 4028, label %780
    i32 11002, label %803
    i32 10024, label %820
    i32 10026, label %837
    i32 4049, label %854
    i32 10015, label %915
  ]

16:                                               ; preds = %2
  %17 = load i32, i32* %6, align 16
  %18 = icmp ult i32 %17, 41
  br i1 %18, label %19, label %24

19:                                               ; preds = %16
  %20 = load i8*, i8** %8, align 16
  %21 = sext i32 %17 to i64
  %22 = getelementptr i8, i8* %20, i64 %21
  %23 = add nuw nsw i32 %17, 8
  store i32 %23, i32* %6, align 16
  br label %27

24:                                               ; preds = %16
  %25 = load i8*, i8** %7, align 8
  %26 = getelementptr i8, i8* %25, i64 8
  store i8* %26, i8** %7, align 8
  br label %27

27:                                               ; preds = %24, %19
  %28 = phi i8* [ %22, %19 ], [ %25, %24 ]
  %29 = bitcast i8* %28 to i32*
  %30 = load i32, i32* %29, align 4
  switch i32 %30, label %933 [
    i32 2051, label %31
    i32 2049, label %31
    i32 2048, label %31
  ]

31:                                               ; preds = %27, %27, %27
  %32 = getelementptr inbounds %struct.OpusEncoder, %struct.OpusEncoder* %0, i64 0, i32 36
  %33 = load i32, i32* %32, align 4
  %34 = icmp eq i32 %33, 0
  br i1 %34, label %35, label %39

35:                                               ; preds = %31
  %36 = getelementptr inbounds %struct.OpusEncoder, %struct.OpusEncoder* %0, i64 0, i32 3
  %37 = load i32, i32* %36, align 4
  %38 = icmp eq i32 %37, %30
  br i1 %38, label %39, label %933

39:                                               ; preds = %35, %31
  %40 = getelementptr inbounds %struct.OpusEncoder, %struct.OpusEncoder* %0, i64 0, i32 3
  store i32 %30, i32* %40, align 4
  %41 = getelementptr inbounds %struct.OpusEncoder, %struct.OpusEncoder* %0, i64 0, i32 23, i32 1
  store i32 %30, i32* %41, align 4
  br label %933

42:                                               ; preds = %2
  %43 = load i32, i32* %6, align 16
  %44 = icmp ult i32 %43, 41
  br i1 %44, label %45, label %50

45:                                               ; preds = %42
  %46 = load i8*, i8** %8, align 16
  %47 = sext i32 %43 to i64
  %48 = getelementptr i8, i8* %46, i64 %47
  %49 = add nuw nsw i32 %43, 8
  store i32 %49, i32* %6, align 16
  br label %53

50:                                               ; preds = %42
  %51 = load i8*, i8** %7, align 8
  %52 = getelementptr i8, i8* %51, i64 8
  store i8* %52, i8** %7, align 8
  br label %53

53:                                               ; preds = %50, %45
  %54 = phi i8* [ %48, %45 ], [ %51, %50 ]
  %55 = bitcast i8* %54 to i32**
  %56 = load i32*, i32** %55, align 8
  %57 = icmp eq i32* %56, null
  br i1 %57, label %933, label %58

58:                                               ; preds = %53
  %59 = getelementptr inbounds %struct.OpusEncoder, %struct.OpusEncoder* %0, i64 0, i32 3
  %60 = load i32, i32* %59, align 4
  store i32 %60, i32* %56, align 4
  br label %933

61:                                               ; preds = %2
  %62 = load i32, i32* %6, align 16
  %63 = icmp ult i32 %62, 41
  br i1 %63, label %64, label %69

64:                                               ; preds = %61
  %65 = load i8*, i8** %8, align 16
  %66 = sext i32 %62 to i64
  %67 = getelementptr i8, i8* %65, i64 %66
  %68 = add nuw nsw i32 %62, 8
  store i32 %68, i32* %6, align 16
  br label %72

69:                                               ; preds = %61
  %70 = load i8*, i8** %7, align 8
  %71 = getelementptr i8, i8* %70, i64 8
  store i8* %71, i8** %7, align 8
  br label %72

72:                                               ; preds = %69, %64
  %73 = phi i8* [ %67, %64 ], [ %70, %69 ]
  %74 = bitcast i8* %73 to i32*
  %75 = load i32, i32* %74, align 4
  switch i32 %75, label %76 [
    i32 -1, label %86
    i32 -1000, label %86
  ]

76:                                               ; preds = %72
  %77 = icmp slt i32 %75, 1
  br i1 %77, label %933, label %78

78:                                               ; preds = %76
  %79 = icmp slt i32 %75, 501
  br i1 %79, label %86, label %80

80:                                               ; preds = %78
  %81 = getelementptr inbounds %struct.OpusEncoder, %struct.OpusEncoder* %0, i64 0, i32 4
  %82 = load i32, i32* %81, align 8
  %83 = mul nsw i32 %82, 300000
  %84 = icmp sgt i32 %75, %83
  %85 = select i1 %84, i32 %83, i32 %75
  br label %86

86:                                               ; preds = %72, %72, %78, %80
  %87 = phi i32 [ %75, %72 ], [ %75, %72 ], [ 500, %78 ], [ %85, %80 ]
  %88 = getelementptr inbounds %struct.OpusEncoder, %struct.OpusEncoder* %0, i64 0, i32 17
  store i32 %87, i32* %88, align 4
  br label %933

89:                                               ; preds = %2
  %90 = load i32, i32* %6, align 16
  %91 = icmp ult i32 %90, 41
  br i1 %91, label %92, label %97

92:                                               ; preds = %89
  %93 = load i8*, i8** %8, align 16
  %94 = sext i32 %90 to i64
  %95 = getelementptr i8, i8* %93, i64 %94
  %96 = add nuw nsw i32 %90, 8
  store i32 %96, i32* %6, align 16
  br label %100

97:                                               ; preds = %89
  %98 = load i8*, i8** %7, align 8
  %99 = getelementptr i8, i8* %98, i64 8
  store i8* %99, i8** %7, align 8
  br label %100

100:                                              ; preds = %97, %92
  %101 = phi i8* [ %95, %92 ], [ %98, %97 ]
  %102 = bitcast i8* %101 to i32**
  %103 = load i32*, i32** %102, align 8
  %104 = icmp eq i32* %103, null
  br i1 %104, label %933, label %105

105:                                              ; preds = %100
  %106 = getelementptr inbounds %struct.OpusEncoder, %struct.OpusEncoder* %0, i64 0, i32 32
  %107 = load i32, i32* %106, align 4
  %108 = icmp eq i32 %107, 0
  br i1 %108, label %109, label %113

109:                                              ; preds = %105
  %110 = getelementptr inbounds %struct.OpusEncoder, %struct.OpusEncoder* %0, i64 0, i32 12
  %111 = load i32, i32* %110, align 8
  %112 = sdiv i32 %111, 400
  br label %113

113:                                              ; preds = %109, %105
  %114 = phi i32 [ %107, %105 ], [ %112, %109 ]
  %115 = getelementptr inbounds %struct.OpusEncoder, %struct.OpusEncoder* %0, i64 0, i32 17
  %116 = load i32, i32* %115, align 4
  switch i32 %116, label %131 [
    i32 -1000, label %117
    i32 -1, label %126
  ]

117:                                              ; preds = %113
  %118 = getelementptr inbounds %struct.OpusEncoder, %struct.OpusEncoder* %0, i64 0, i32 12
  %119 = load i32, i32* %118, align 8
  %120 = mul nsw i32 %119, 60
  %121 = sdiv i32 %120, %114
  %122 = getelementptr inbounds %struct.OpusEncoder, %struct.OpusEncoder* %0, i64 0, i32 4
  %123 = load i32, i32* %122, align 8
  %124 = mul nsw i32 %123, %119
  %125 = add nsw i32 %124, %121
  br label %131

126:                                              ; preds = %113
  %127 = getelementptr inbounds %struct.OpusEncoder, %struct.OpusEncoder* %0, i64 0, i32 12
  %128 = load i32, i32* %127, align 8
  %129 = mul nsw i32 %128, 10208
  %130 = sdiv i32 %129, %114
  br label %131

131:                                              ; preds = %126, %117, %113
  %132 = phi i32 [ %125, %117 ], [ %130, %126 ], [ %116, %113 ]
  store i32 %132, i32* %103, align 4
  br label %933

133:                                              ; preds = %2
  %134 = load i32, i32* %6, align 16
  %135 = icmp ult i32 %134, 41
  br i1 %135, label %136, label %141

136:                                              ; preds = %133
  %137 = load i8*, i8** %8, align 16
  %138 = sext i32 %134 to i64
  %139 = getelementptr i8, i8* %137, i64 %138
  %140 = add nuw nsw i32 %134, 8
  store i32 %140, i32* %6, align 16
  br label %144

141:                                              ; preds = %133
  %142 = load i8*, i8** %7, align 8
  %143 = getelementptr i8, i8* %142, i64 8
  store i8* %143, i8** %7, align 8
  br label %144

144:                                              ; preds = %141, %136
  %145 = phi i8* [ %139, %136 ], [ %142, %141 ]
  %146 = bitcast i8* %145 to i32*
  %147 = load i32, i32* %146, align 4
  %148 = icmp slt i32 %147, 1
  br i1 %148, label %153, label %149

149:                                              ; preds = %144
  %150 = getelementptr inbounds %struct.OpusEncoder, %struct.OpusEncoder* %0, i64 0, i32 4
  %151 = load i32, i32* %150, align 8
  %152 = icmp sgt i32 %147, %151
  br i1 %152, label %933, label %155

153:                                              ; preds = %144
  %154 = icmp eq i32 %147, -1000
  br i1 %154, label %155, label %933

155:                                              ; preds = %149, %153
  %156 = getelementptr inbounds %struct.OpusEncoder, %struct.OpusEncoder* %0, i64 0, i32 6
  store i32 %147, i32* %156, align 8
  br label %933

157:                                              ; preds = %2
  %158 = load i32, i32* %6, align 16
  %159 = icmp ult i32 %158, 41
  br i1 %159, label %160, label %165

160:                                              ; preds = %157
  %161 = load i8*, i8** %8, align 16
  %162 = sext i32 %158 to i64
  %163 = getelementptr i8, i8* %161, i64 %162
  %164 = add nuw nsw i32 %158, 8
  store i32 %164, i32* %6, align 16
  br label %168

165:                                              ; preds = %157
  %166 = load i8*, i8** %7, align 8
  %167 = getelementptr i8, i8* %166, i64 8
  store i8* %167, i8** %7, align 8
  br label %168

168:                                              ; preds = %165, %160
  %169 = phi i8* [ %163, %160 ], [ %166, %165 ]
  %170 = bitcast i8* %169 to i32**
  %171 = load i32*, i32** %170, align 8
  %172 = icmp eq i32* %171, null
  br i1 %172, label %933, label %173

173:                                              ; preds = %168
  %174 = getelementptr inbounds %struct.OpusEncoder, %struct.OpusEncoder* %0, i64 0, i32 6
  %175 = load i32, i32* %174, align 8
  store i32 %175, i32* %171, align 4
  br label %933

176:                                              ; preds = %2
  %177 = load i32, i32* %6, align 16
  %178 = icmp ult i32 %177, 41
  br i1 %178, label %179, label %184

179:                                              ; preds = %176
  %180 = load i8*, i8** %8, align 16
  %181 = sext i32 %177 to i64
  %182 = getelementptr i8, i8* %180, i64 %181
  %183 = add nuw nsw i32 %177, 8
  store i32 %183, i32* %6, align 16
  br label %187

184:                                              ; preds = %176
  %185 = load i8*, i8** %7, align 8
  %186 = getelementptr i8, i8* %185, i64 8
  store i8* %186, i8** %7, align 8
  br label %187

187:                                              ; preds = %184, %179
  %188 = phi i8* [ %182, %179 ], [ %185, %184 ]
  %189 = bitcast i8* %188 to i32*
  %190 = load i32, i32* %189, align 4
  %191 = add i32 %190, -1101
  %192 = icmp ugt i32 %191, 4
  br i1 %192, label %933, label %193

193:                                              ; preds = %187
  %194 = getelementptr inbounds %struct.OpusEncoder, %struct.OpusEncoder* %0, i64 0, i32 9
  store i32 %190, i32* %194, align 4
  %195 = icmp eq i32 %190, 1101
  br i1 %195, label %196, label %198

196:                                              ; preds = %193
  %197 = getelementptr inbounds %struct.OpusEncoder, %struct.OpusEncoder* %0, i64 0, i32 2, i32 3
  store i32 8000, i32* %197, align 4
  br label %933

198:                                              ; preds = %193
  %199 = icmp eq i32 %190, 1102
  %200 = getelementptr inbounds %struct.OpusEncoder, %struct.OpusEncoder* %0, i64 0, i32 2, i32 3
  br i1 %199, label %201, label %202

201:                                              ; preds = %198
  store i32 12000, i32* %200, align 4
  br label %933

202:                                              ; preds = %198
  store i32 16000, i32* %200, align 4
  br label %933

203:                                              ; preds = %2
  %204 = load i32, i32* %6, align 16
  %205 = icmp ult i32 %204, 41
  br i1 %205, label %206, label %211

206:                                              ; preds = %203
  %207 = load i8*, i8** %8, align 16
  %208 = sext i32 %204 to i64
  %209 = getelementptr i8, i8* %207, i64 %208
  %210 = add nuw nsw i32 %204, 8
  store i32 %210, i32* %6, align 16
  br label %214

211:                                              ; preds = %203
  %212 = load i8*, i8** %7, align 8
  %213 = getelementptr i8, i8* %212, i64 8
  store i8* %213, i8** %7, align 8
  br label %214

214:                                              ; preds = %211, %206
  %215 = phi i8* [ %209, %206 ], [ %212, %211 ]
  %216 = bitcast i8* %215 to i32**
  %217 = load i32*, i32** %216, align 8
  %218 = icmp eq i32* %217, null
  br i1 %218, label %933, label %219

219:                                              ; preds = %214
  %220 = getelementptr inbounds %struct.OpusEncoder, %struct.OpusEncoder* %0, i64 0, i32 9
  %221 = load i32, i32* %220, align 4
  store i32 %221, i32* %217, align 4
  br label %933

222:                                              ; preds = %2
  %223 = load i32, i32* %6, align 16
  %224 = icmp ult i32 %223, 41
  br i1 %224, label %225, label %230

225:                                              ; preds = %222
  %226 = load i8*, i8** %8, align 16
  %227 = sext i32 %223 to i64
  %228 = getelementptr i8, i8* %226, i64 %227
  %229 = add nuw nsw i32 %223, 8
  store i32 %229, i32* %6, align 16
  br label %233

230:                                              ; preds = %222
  %231 = load i8*, i8** %7, align 8
  %232 = getelementptr i8, i8* %231, i64 8
  store i8* %232, i8** %7, align 8
  br label %233

233:                                              ; preds = %230, %225
  %234 = phi i8* [ %228, %225 ], [ %231, %230 ]
  %235 = bitcast i8* %234 to i32*
  %236 = load i32, i32* %235, align 4
  switch i32 %236, label %933 [
    i32 -1000, label %237
    i32 1105, label %237
    i32 1104, label %237
    i32 1103, label %237
    i32 1102, label %237
    i32 1101, label %237
  ]

237:                                              ; preds = %233, %233, %233, %233, %233, %233
  %238 = getelementptr inbounds %struct.OpusEncoder, %struct.OpusEncoder* %0, i64 0, i32 8
  store i32 %236, i32* %238, align 8
  %239 = icmp eq i32 %236, 1101
  br i1 %239, label %240, label %242

240:                                              ; preds = %237
  %241 = getelementptr inbounds %struct.OpusEncoder, %struct.OpusEncoder* %0, i64 0, i32 2, i32 3
  store i32 8000, i32* %241, align 4
  br label %933

242:                                              ; preds = %237
  %243 = icmp eq i32 %236, 1102
  %244 = getelementptr inbounds %struct.OpusEncoder, %struct.OpusEncoder* %0, i64 0, i32 2, i32 3
  br i1 %243, label %245, label %246

245:                                              ; preds = %242
  store i32 12000, i32* %244, align 4
  br label %933

246:                                              ; preds = %242
  store i32 16000, i32* %244, align 4
  br label %933

247:                                              ; preds = %2
  %248 = load i32, i32* %6, align 16
  %249 = icmp ult i32 %248, 41
  br i1 %249, label %250, label %255

250:                                              ; preds = %247
  %251 = load i8*, i8** %8, align 16
  %252 = sext i32 %248 to i64
  %253 = getelementptr i8, i8* %251, i64 %252
  %254 = add nuw nsw i32 %248, 8
  store i32 %254, i32* %6, align 16
  br label %258

255:                                              ; preds = %247
  %256 = load i8*, i8** %7, align 8
  %257 = getelementptr i8, i8* %256, i64 8
  store i8* %257, i8** %7, align 8
  br label %258

258:                                              ; preds = %255, %250
  %259 = phi i8* [ %253, %250 ], [ %256, %255 ]
  %260 = bitcast i8* %259 to i32**
  %261 = load i32*, i32** %260, align 8
  %262 = icmp eq i32* %261, null
  br i1 %262, label %933, label %263

263:                                              ; preds = %258
  %264 = getelementptr inbounds %struct.OpusEncoder, %struct.OpusEncoder* %0, i64 0, i32 33
  %265 = load i32, i32* %264, align 8
  store i32 %265, i32* %261, align 4
  br label %933

266:                                              ; preds = %2
  %267 = load i32, i32* %6, align 16
  %268 = icmp ult i32 %267, 41
  br i1 %268, label %269, label %274

269:                                              ; preds = %266
  %270 = load i8*, i8** %8, align 16
  %271 = sext i32 %267 to i64
  %272 = getelementptr i8, i8* %270, i64 %271
  %273 = add nuw nsw i32 %267, 8
  store i32 %273, i32* %6, align 16
  br label %277

274:                                              ; preds = %266
  %275 = load i8*, i8** %7, align 8
  %276 = getelementptr i8, i8* %275, i64 8
  store i8* %276, i8** %7, align 8
  br label %277

277:                                              ; preds = %274, %269
  %278 = phi i8* [ %272, %269 ], [ %275, %274 ]
  %279 = bitcast i8* %278 to i32*
  %280 = load i32, i32* %279, align 4
  %281 = icmp ugt i32 %280, 1
  br i1 %281, label %933, label %282

282:                                              ; preds = %277
  %283 = getelementptr inbounds %struct.OpusEncoder, %struct.OpusEncoder* %0, i64 0, i32 22
  store i32 %280, i32* %283, align 8
  br label %933

284:                                              ; preds = %2
  %285 = load i32, i32* %6, align 16
  %286 = icmp ult i32 %285, 41
  br i1 %286, label %287, label %292

287:                                              ; preds = %284
  %288 = load i8*, i8** %8, align 16
  %289 = sext i32 %285 to i64
  %290 = getelementptr i8, i8* %288, i64 %289
  %291 = add nuw nsw i32 %285, 8
  store i32 %291, i32* %6, align 16
  br label %295

292:                                              ; preds = %284
  %293 = load i8*, i8** %7, align 8
  %294 = getelementptr i8, i8* %293, i64 8
  store i8* %294, i8** %7, align 8
  br label %295

295:                                              ; preds = %292, %287
  %296 = phi i8* [ %290, %287 ], [ %293, %292 ]
  %297 = bitcast i8* %296 to i32**
  %298 = load i32*, i32** %297, align 8
  %299 = icmp eq i32* %298, null
  br i1 %299, label %933, label %300

300:                                              ; preds = %295
  %301 = getelementptr inbounds %struct.OpusEncoder, %struct.OpusEncoder* %0, i64 0, i32 22
  %302 = load i32, i32* %301, align 8
  store i32 %302, i32* %298, align 4
  br label %933

303:                                              ; preds = %2
  %304 = load i32, i32* %6, align 16
  %305 = icmp ult i32 %304, 41
  br i1 %305, label %306, label %311

306:                                              ; preds = %303
  %307 = load i8*, i8** %8, align 16
  %308 = sext i32 %304 to i64
  %309 = getelementptr i8, i8* %307, i64 %308
  %310 = add nuw nsw i32 %304, 8
  store i32 %310, i32* %6, align 16
  br label %314

311:                                              ; preds = %303
  %312 = load i8*, i8** %7, align 8
  %313 = getelementptr i8, i8* %312, i64 8
  store i8* %313, i8** %7, align 8
  br label %314

314:                                              ; preds = %311, %306
  %315 = phi i8* [ %309, %306 ], [ %312, %311 ]
  %316 = bitcast i8* %315 to i32*
  %317 = load i32, i32* %316, align 4
  %318 = icmp ugt i32 %317, 10
  br i1 %318, label %933, label %319

319:                                              ; preds = %314
  %320 = getelementptr inbounds %struct.OpusEncoder, %struct.OpusEncoder* %0, i64 0, i32 2, i32 9
  store i32 %317, i32* %320, align 4
  %321 = call i32 (%struct.OpusCustomEncoder*, i32, ...) @opus_custom_encoder_ctl(%struct.OpusCustomEncoder* %15, i32 4010, i32 %317) #10
  br label %933

322:                                              ; preds = %2
  %323 = load i32, i32* %6, align 16
  %324 = icmp ult i32 %323, 41
  br i1 %324, label %325, label %330

325:                                              ; preds = %322
  %326 = load i8*, i8** %8, align 16
  %327 = sext i32 %323 to i64
  %328 = getelementptr i8, i8* %326, i64 %327
  %329 = add nuw nsw i32 %323, 8
  store i32 %329, i32* %6, align 16
  br label %333

330:                                              ; preds = %322
  %331 = load i8*, i8** %7, align 8
  %332 = getelementptr i8, i8* %331, i64 8
  store i8* %332, i8** %7, align 8
  br label %333

333:                                              ; preds = %330, %325
  %334 = phi i8* [ %328, %325 ], [ %331, %330 ]
  %335 = bitcast i8* %334 to i32**
  %336 = load i32*, i32** %335, align 8
  %337 = icmp eq i32* %336, null
  br i1 %337, label %933, label %338

338:                                              ; preds = %333
  %339 = getelementptr inbounds %struct.OpusEncoder, %struct.OpusEncoder* %0, i64 0, i32 2, i32 9
  %340 = load i32, i32* %339, align 4
  store i32 %340, i32* %336, align 4
  br label %933

341:                                              ; preds = %2
  %342 = load i32, i32* %6, align 16
  %343 = icmp ult i32 %342, 41
  br i1 %343, label %344, label %349

344:                                              ; preds = %341
  %345 = load i8*, i8** %8, align 16
  %346 = sext i32 %342 to i64
  %347 = getelementptr i8, i8* %345, i64 %346
  %348 = add nuw nsw i32 %342, 8
  store i32 %348, i32* %6, align 16
  br label %352

349:                                              ; preds = %341
  %350 = load i8*, i8** %7, align 8
  %351 = getelementptr i8, i8* %350, i64 8
  store i8* %351, i8** %7, align 8
  br label %352

352:                                              ; preds = %349, %344
  %353 = phi i8* [ %347, %344 ], [ %350, %349 ]
  %354 = bitcast i8* %353 to i32*
  %355 = load i32, i32* %354, align 4
  %356 = icmp ugt i32 %355, 1
  br i1 %356, label %933, label %357

357:                                              ; preds = %352
  %358 = getelementptr inbounds %struct.OpusEncoder, %struct.OpusEncoder* %0, i64 0, i32 2, i32 10
  store i32 %355, i32* %358, align 8
  br label %933

359:                                              ; preds = %2
  %360 = load i32, i32* %6, align 16
  %361 = icmp ult i32 %360, 41
  br i1 %361, label %362, label %367

362:                                              ; preds = %359
  %363 = load i8*, i8** %8, align 16
  %364 = sext i32 %360 to i64
  %365 = getelementptr i8, i8* %363, i64 %364
  %366 = add nuw nsw i32 %360, 8
  store i32 %366, i32* %6, align 16
  br label %370

367:                                              ; preds = %359
  %368 = load i8*, i8** %7, align 8
  %369 = getelementptr i8, i8* %368, i64 8
  store i8* %369, i8** %7, align 8
  br label %370

370:                                              ; preds = %367, %362
  %371 = phi i8* [ %365, %362 ], [ %368, %367 ]
  %372 = bitcast i8* %371 to i32**
  %373 = load i32*, i32** %372, align 8
  %374 = icmp eq i32* %373, null
  br i1 %374, label %933, label %375

375:                                              ; preds = %370
  %376 = getelementptr inbounds %struct.OpusEncoder, %struct.OpusEncoder* %0, i64 0, i32 2, i32 10
  %377 = load i32, i32* %376, align 8
  store i32 %377, i32* %373, align 4
  br label %933

378:                                              ; preds = %2
  %379 = load i32, i32* %6, align 16
  %380 = icmp ult i32 %379, 41
  br i1 %380, label %381, label %386

381:                                              ; preds = %378
  %382 = load i8*, i8** %8, align 16
  %383 = sext i32 %379 to i64
  %384 = getelementptr i8, i8* %382, i64 %383
  %385 = add nuw nsw i32 %379, 8
  store i32 %385, i32* %6, align 16
  br label %389

386:                                              ; preds = %378
  %387 = load i8*, i8** %7, align 8
  %388 = getelementptr i8, i8* %387, i64 8
  store i8* %388, i8** %7, align 8
  br label %389

389:                                              ; preds = %386, %381
  %390 = phi i8* [ %384, %381 ], [ %387, %386 ]
  %391 = bitcast i8* %390 to i32*
  %392 = load i32, i32* %391, align 4
  %393 = icmp ugt i32 %392, 100
  br i1 %393, label %933, label %394

394:                                              ; preds = %389
  %395 = getelementptr inbounds %struct.OpusEncoder, %struct.OpusEncoder* %0, i64 0, i32 2, i32 8
  store i32 %392, i32* %395, align 8
  %396 = call i32 (%struct.OpusCustomEncoder*, i32, ...) @opus_custom_encoder_ctl(%struct.OpusCustomEncoder* %15, i32 4014, i32 %392) #10
  br label %933

397:                                              ; preds = %2
  %398 = load i32, i32* %6, align 16
  %399 = icmp ult i32 %398, 41
  br i1 %399, label %400, label %405

400:                                              ; preds = %397
  %401 = load i8*, i8** %8, align 16
  %402 = sext i32 %398 to i64
  %403 = getelementptr i8, i8* %401, i64 %402
  %404 = add nuw nsw i32 %398, 8
  store i32 %404, i32* %6, align 16
  br label %408

405:                                              ; preds = %397
  %406 = load i8*, i8** %7, align 8
  %407 = getelementptr i8, i8* %406, i64 8
  store i8* %407, i8** %7, align 8
  br label %408

408:                                              ; preds = %405, %400
  %409 = phi i8* [ %403, %400 ], [ %406, %405 ]
  %410 = bitcast i8* %409 to i32**
  %411 = load i32*, i32** %410, align 8
  %412 = icmp eq i32* %411, null
  br i1 %412, label %933, label %413

413:                                              ; preds = %408
  %414 = getelementptr inbounds %struct.OpusEncoder, %struct.OpusEncoder* %0, i64 0, i32 2, i32 8
  %415 = load i32, i32* %414, align 8
  store i32 %415, i32* %411, align 4
  br label %933

416:                                              ; preds = %2
  %417 = load i32, i32* %6, align 16
  %418 = icmp ult i32 %417, 41
  br i1 %418, label %419, label %424

419:                                              ; preds = %416
  %420 = load i8*, i8** %8, align 16
  %421 = sext i32 %417 to i64
  %422 = getelementptr i8, i8* %420, i64 %421
  %423 = add nuw nsw i32 %417, 8
  store i32 %423, i32* %6, align 16
  br label %427

424:                                              ; preds = %416
  %425 = load i8*, i8** %7, align 8
  %426 = getelementptr i8, i8* %425, i64 8
  store i8* %426, i8** %7, align 8
  br label %427

427:                                              ; preds = %424, %419
  %428 = phi i8* [ %422, %419 ], [ %425, %424 ]
  %429 = bitcast i8* %428 to i32*
  %430 = load i32, i32* %429, align 4
  %431 = icmp ugt i32 %430, 1
  br i1 %431, label %933, label %432

432:                                              ; preds = %427
  %433 = getelementptr inbounds %struct.OpusEncoder, %struct.OpusEncoder* %0, i64 0, i32 13
  store i32 %430, i32* %433, align 4
  %434 = sub nuw nsw i32 1, %430
  %435 = getelementptr inbounds %struct.OpusEncoder, %struct.OpusEncoder* %0, i64 0, i32 2, i32 13
  store i32 %434, i32* %435, align 4
  br label %933

436:                                              ; preds = %2
  %437 = load i32, i32* %6, align 16
  %438 = icmp ult i32 %437, 41
  br i1 %438, label %439, label %444

439:                                              ; preds = %436
  %440 = load i8*, i8** %8, align 16
  %441 = sext i32 %437 to i64
  %442 = getelementptr i8, i8* %440, i64 %441
  %443 = add nuw nsw i32 %437, 8
  store i32 %443, i32* %6, align 16
  br label %447

444:                                              ; preds = %436
  %445 = load i8*, i8** %7, align 8
  %446 = getelementptr i8, i8* %445, i64 8
  store i8* %446, i8** %7, align 8
  br label %447

447:                                              ; preds = %444, %439
  %448 = phi i8* [ %442, %439 ], [ %445, %444 ]
  %449 = bitcast i8* %448 to i32**
  %450 = load i32*, i32** %449, align 8
  %451 = icmp eq i32* %450, null
  br i1 %451, label %933, label %452

452:                                              ; preds = %447
  %453 = getelementptr inbounds %struct.OpusEncoder, %struct.OpusEncoder* %0, i64 0, i32 13
  %454 = load i32, i32* %453, align 4
  store i32 %454, i32* %450, align 4
  br label %933

455:                                              ; preds = %2
  %456 = load i32, i32* %6, align 16
  %457 = icmp ult i32 %456, 41
  br i1 %457, label %458, label %463

458:                                              ; preds = %455
  %459 = load i8*, i8** %8, align 16
  %460 = sext i32 %456 to i64
  %461 = getelementptr i8, i8* %459, i64 %460
  %462 = add nuw nsw i32 %456, 8
  store i32 %462, i32* %6, align 16
  br label %466

463:                                              ; preds = %455
  %464 = load i8*, i8** %7, align 8
  %465 = getelementptr i8, i8* %464, i64 8
  store i8* %465, i8** %7, align 8
  br label %466

466:                                              ; preds = %463, %458
  %467 = phi i8* [ %461, %458 ], [ %464, %463 ]
  %468 = bitcast i8* %467 to i32*
  %469 = load i32, i32* %468, align 4
  %470 = add i32 %469, 1
  %471 = icmp ugt i32 %470, 101
  br i1 %471, label %933, label %472

472:                                              ; preds = %466
  %473 = getelementptr inbounds %struct.OpusEncoder, %struct.OpusEncoder* %0, i64 0, i32 11
  store i32 %469, i32* %473, align 4
  br label %933

474:                                              ; preds = %2
  %475 = load i32, i32* %6, align 16
  %476 = icmp ult i32 %475, 41
  br i1 %476, label %477, label %482

477:                                              ; preds = %474
  %478 = load i8*, i8** %8, align 16
  %479 = sext i32 %475 to i64
  %480 = getelementptr i8, i8* %478, i64 %479
  %481 = add nuw nsw i32 %475, 8
  store i32 %481, i32* %6, align 16
  br label %485

482:                                              ; preds = %474
  %483 = load i8*, i8** %7, align 8
  %484 = getelementptr i8, i8* %483, i64 8
  store i8* %484, i8** %7, align 8
  br label %485

485:                                              ; preds = %482, %477
  %486 = phi i8* [ %480, %477 ], [ %483, %482 ]
  %487 = bitcast i8* %486 to i32**
  %488 = load i32*, i32** %487, align 8
  %489 = icmp eq i32* %488, null
  br i1 %489, label %933, label %490

490:                                              ; preds = %485
  %491 = getelementptr inbounds %struct.OpusEncoder, %struct.OpusEncoder* %0, i64 0, i32 11
  %492 = load i32, i32* %491, align 4
  store i32 %492, i32* %488, align 4
  br label %933

493:                                              ; preds = %2
  %494 = load i32, i32* %6, align 16
  %495 = icmp ult i32 %494, 41
  br i1 %495, label %496, label %501

496:                                              ; preds = %493
  %497 = load i8*, i8** %8, align 16
  %498 = sext i32 %494 to i64
  %499 = getelementptr i8, i8* %497, i64 %498
  %500 = add nuw nsw i32 %494, 8
  store i32 %500, i32* %6, align 16
  br label %504

501:                                              ; preds = %493
  %502 = load i8*, i8** %7, align 8
  %503 = getelementptr i8, i8* %502, i64 8
  store i8* %503, i8** %7, align 8
  br label %504

504:                                              ; preds = %501, %496
  %505 = phi i8* [ %499, %496 ], [ %502, %501 ]
  %506 = bitcast i8* %505 to i32*
  %507 = load i32, i32* %506, align 4
  %508 = icmp ugt i32 %507, 1
  br i1 %508, label %933, label %509

509:                                              ; preds = %504
  %510 = getelementptr inbounds %struct.OpusEncoder, %struct.OpusEncoder* %0, i64 0, i32 14
  store i32 %507, i32* %510, align 8
  br label %933

511:                                              ; preds = %2
  %512 = load i32, i32* %6, align 16
  %513 = icmp ult i32 %512, 41
  br i1 %513, label %514, label %519

514:                                              ; preds = %511
  %515 = load i8*, i8** %8, align 16
  %516 = sext i32 %512 to i64
  %517 = getelementptr i8, i8* %515, i64 %516
  %518 = add nuw nsw i32 %512, 8
  store i32 %518, i32* %6, align 16
  br label %522

519:                                              ; preds = %511
  %520 = load i8*, i8** %7, align 8
  %521 = getelementptr i8, i8* %520, i64 8
  store i8* %521, i8** %7, align 8
  br label %522

522:                                              ; preds = %519, %514
  %523 = phi i8* [ %517, %514 ], [ %520, %519 ]
  %524 = bitcast i8* %523 to i32**
  %525 = load i32*, i32** %524, align 8
  %526 = icmp eq i32* %525, null
  br i1 %526, label %933, label %527

527:                                              ; preds = %522
  %528 = getelementptr inbounds %struct.OpusEncoder, %struct.OpusEncoder* %0, i64 0, i32 14
  %529 = load i32, i32* %528, align 8
  store i32 %529, i32* %525, align 4
  br label %933

530:                                              ; preds = %2
  %531 = load i32, i32* %6, align 16
  %532 = icmp ult i32 %531, 41
  br i1 %532, label %533, label %538

533:                                              ; preds = %530
  %534 = load i8*, i8** %8, align 16
  %535 = sext i32 %531 to i64
  %536 = getelementptr i8, i8* %534, i64 %535
  %537 = add nuw nsw i32 %531, 8
  store i32 %537, i32* %6, align 16
  br label %541

538:                                              ; preds = %530
  %539 = load i8*, i8** %7, align 8
  %540 = getelementptr i8, i8* %539, i64 8
  store i8* %540, i8** %7, align 8
  br label %541

541:                                              ; preds = %538, %533
  %542 = phi i8* [ %536, %533 ], [ %539, %538 ]
  %543 = bitcast i8* %542 to i32*
  %544 = load i32, i32* %543, align 4
  switch i32 %544, label %933 [
    i32 -1000, label %545
    i32 3002, label %545
    i32 3001, label %545
  ]

545:                                              ; preds = %541, %541, %541
  %546 = getelementptr inbounds %struct.OpusEncoder, %struct.OpusEncoder* %0, i64 0, i32 7
  store i32 %544, i32* %546, align 4
  br label %933

547:                                              ; preds = %2
  %548 = load i32, i32* %6, align 16
  %549 = icmp ult i32 %548, 41
  br i1 %549, label %550, label %555

550:                                              ; preds = %547
  %551 = load i8*, i8** %8, align 16
  %552 = sext i32 %548 to i64
  %553 = getelementptr i8, i8* %551, i64 %552
  %554 = add nuw nsw i32 %548, 8
  store i32 %554, i32* %6, align 16
  br label %558

555:                                              ; preds = %547
  %556 = load i8*, i8** %7, align 8
  %557 = getelementptr i8, i8* %556, i64 8
  store i8* %557, i8** %7, align 8
  br label %558

558:                                              ; preds = %555, %550
  %559 = phi i8* [ %553, %550 ], [ %556, %555 ]
  %560 = bitcast i8* %559 to i32**
  %561 = load i32*, i32** %560, align 8
  %562 = icmp eq i32* %561, null
  br i1 %562, label %933, label %563

563:                                              ; preds = %558
  %564 = getelementptr inbounds %struct.OpusEncoder, %struct.OpusEncoder* %0, i64 0, i32 7
  %565 = load i32, i32* %564, align 4
  store i32 %565, i32* %561, align 4
  br label %933

566:                                              ; preds = %2
  %567 = load i32, i32* %6, align 16
  %568 = icmp ult i32 %567, 41
  br i1 %568, label %569, label %574

569:                                              ; preds = %566
  %570 = load i8*, i8** %8, align 16
  %571 = sext i32 %567 to i64
  %572 = getelementptr i8, i8* %570, i64 %571
  %573 = add nuw nsw i32 %567, 8
  store i32 %573, i32* %6, align 16
  br label %577

574:                                              ; preds = %566
  %575 = load i8*, i8** %7, align 8
  %576 = getelementptr i8, i8* %575, i64 8
  store i8* %576, i8** %7, align 8
  br label %577

577:                                              ; preds = %574, %569
  %578 = phi i8* [ %572, %569 ], [ %575, %574 ]
  %579 = bitcast i8* %578 to i32**
  %580 = load i32*, i32** %579, align 8
  %581 = icmp eq i32* %580, null
  br i1 %581, label %933, label %582

582:                                              ; preds = %577
  %583 = getelementptr inbounds %struct.OpusEncoder, %struct.OpusEncoder* %0, i64 0, i32 12
  %584 = load i32, i32* %583, align 8
  %585 = sdiv i32 %584, 400
  store i32 %585, i32* %580, align 4
  %586 = getelementptr inbounds %struct.OpusEncoder, %struct.OpusEncoder* %0, i64 0, i32 3
  %587 = load i32, i32* %586, align 4
  %588 = icmp eq i32 %587, 2051
  br i1 %588, label %933, label %589

589:                                              ; preds = %582
  %590 = getelementptr inbounds %struct.OpusEncoder, %struct.OpusEncoder* %0, i64 0, i32 5
  %591 = load i32, i32* %590, align 4
  %592 = add nsw i32 %591, %585
  store i32 %592, i32* %580, align 4
  br label %933

593:                                              ; preds = %2
  %594 = load i32, i32* %6, align 16
  %595 = icmp ult i32 %594, 41
  br i1 %595, label %596, label %601

596:                                              ; preds = %593
  %597 = load i8*, i8** %8, align 16
  %598 = sext i32 %594 to i64
  %599 = getelementptr i8, i8* %597, i64 %598
  %600 = add nuw nsw i32 %594, 8
  store i32 %600, i32* %6, align 16
  br label %604

601:                                              ; preds = %593
  %602 = load i8*, i8** %7, align 8
  %603 = getelementptr i8, i8* %602, i64 8
  store i8* %603, i8** %7, align 8
  br label %604

604:                                              ; preds = %601, %596
  %605 = phi i8* [ %599, %596 ], [ %602, %601 ]
  %606 = bitcast i8* %605 to i32**
  %607 = load i32*, i32** %606, align 8
  %608 = icmp eq i32* %607, null
  br i1 %608, label %933, label %609

609:                                              ; preds = %604
  %610 = getelementptr inbounds %struct.OpusEncoder, %struct.OpusEncoder* %0, i64 0, i32 12
  %611 = load i32, i32* %610, align 8
  store i32 %611, i32* %607, align 4
  br label %933

612:                                              ; preds = %2
  %613 = load i32, i32* %6, align 16
  %614 = icmp ult i32 %613, 41
  br i1 %614, label %615, label %620

615:                                              ; preds = %612
  %616 = load i8*, i8** %8, align 16
  %617 = sext i32 %613 to i64
  %618 = getelementptr i8, i8* %616, i64 %617
  %619 = add nuw nsw i32 %613, 8
  store i32 %619, i32* %6, align 16
  br label %623

620:                                              ; preds = %612
  %621 = load i8*, i8** %7, align 8
  %622 = getelementptr i8, i8* %621, i64 8
  store i8* %622, i8** %7, align 8
  br label %623

623:                                              ; preds = %620, %615
  %624 = phi i8* [ %618, %615 ], [ %621, %620 ]
  %625 = bitcast i8* %624 to i32**
  %626 = load i32*, i32** %625, align 8
  %627 = icmp eq i32* %626, null
  br i1 %627, label %933, label %628

628:                                              ; preds = %623
  %629 = getelementptr inbounds %struct.OpusEncoder, %struct.OpusEncoder* %0, i64 0, i32 44
  %630 = load i32, i32* %629, align 4
  store i32 %630, i32* %626, align 4
  br label %933

631:                                              ; preds = %2
  %632 = load i32, i32* %6, align 16
  %633 = icmp ult i32 %632, 41
  br i1 %633, label %634, label %639

634:                                              ; preds = %631
  %635 = load i8*, i8** %8, align 16
  %636 = sext i32 %632 to i64
  %637 = getelementptr i8, i8* %635, i64 %636
  %638 = add nuw nsw i32 %632, 8
  store i32 %638, i32* %6, align 16
  br label %642

639:                                              ; preds = %631
  %640 = load i8*, i8** %7, align 8
  %641 = getelementptr i8, i8* %640, i64 8
  store i8* %641, i8** %7, align 8
  br label %642

642:                                              ; preds = %639, %634
  %643 = phi i8* [ %637, %634 ], [ %640, %639 ]
  %644 = bitcast i8* %643 to i32*
  %645 = load i32, i32* %644, align 4
  %646 = add i32 %645, -8
  %647 = icmp ugt i32 %646, 16
  br i1 %647, label %933, label %648

648:                                              ; preds = %642
  %649 = getelementptr inbounds %struct.OpusEncoder, %struct.OpusEncoder* %0, i64 0, i32 18
  store i32 %645, i32* %649, align 8
  br label %933

650:                                              ; preds = %2
  %651 = load i32, i32* %6, align 16
  %652 = icmp ult i32 %651, 41
  br i1 %652, label %653, label %658

653:                                              ; preds = %650
  %654 = load i8*, i8** %8, align 16
  %655 = sext i32 %651 to i64
  %656 = getelementptr i8, i8* %654, i64 %655
  %657 = add nuw nsw i32 %651, 8
  store i32 %657, i32* %6, align 16
  br label %661

658:                                              ; preds = %650
  %659 = load i8*, i8** %7, align 8
  %660 = getelementptr i8, i8* %659, i64 8
  store i8* %660, i8** %7, align 8
  br label %661

661:                                              ; preds = %658, %653
  %662 = phi i8* [ %656, %653 ], [ %659, %658 ]
  %663 = bitcast i8* %662 to i32**
  %664 = load i32*, i32** %663, align 8
  %665 = icmp eq i32* %664, null
  br i1 %665, label %933, label %666

666:                                              ; preds = %661
  %667 = getelementptr inbounds %struct.OpusEncoder, %struct.OpusEncoder* %0, i64 0, i32 18
  %668 = load i32, i32* %667, align 8
  store i32 %668, i32* %664, align 4
  br label %933

669:                                              ; preds = %2
  %670 = load i32, i32* %6, align 16
  %671 = icmp ult i32 %670, 41
  br i1 %671, label %672, label %677

672:                                              ; preds = %669
  %673 = load i8*, i8** %8, align 16
  %674 = sext i32 %670 to i64
  %675 = getelementptr i8, i8* %673, i64 %674
  %676 = add nuw nsw i32 %670, 8
  store i32 %676, i32* %6, align 16
  br label %680

677:                                              ; preds = %669
  %678 = load i8*, i8** %7, align 8
  %679 = getelementptr i8, i8* %678, i64 8
  store i8* %679, i8** %7, align 8
  br label %680

680:                                              ; preds = %677, %672
  %681 = phi i8* [ %675, %672 ], [ %678, %677 ]
  %682 = bitcast i8* %681 to i32*
  %683 = load i32, i32* %682, align 4
  %684 = add i32 %683, -5000
  %685 = icmp ult i32 %684, 10
  br i1 %685, label %686, label %933

686:                                              ; preds = %680
  %687 = getelementptr inbounds %struct.OpusEncoder, %struct.OpusEncoder* %0, i64 0, i32 15
  store i32 %683, i32* %687, align 4
  br label %933

688:                                              ; preds = %2
  %689 = load i32, i32* %6, align 16
  %690 = icmp ult i32 %689, 41
  br i1 %690, label %691, label %696

691:                                              ; preds = %688
  %692 = load i8*, i8** %8, align 16
  %693 = sext i32 %689 to i64
  %694 = getelementptr i8, i8* %692, i64 %693
  %695 = add nuw nsw i32 %689, 8
  store i32 %695, i32* %6, align 16
  br label %699

696:                                              ; preds = %688
  %697 = load i8*, i8** %7, align 8
  %698 = getelementptr i8, i8* %697, i64 8
  store i8* %698, i8** %7, align 8
  br label %699

699:                                              ; preds = %696, %691
  %700 = phi i8* [ %694, %691 ], [ %697, %696 ]
  %701 = bitcast i8* %700 to i32**
  %702 = load i32*, i32** %701, align 8
  %703 = icmp eq i32* %702, null
  br i1 %703, label %933, label %704

704:                                              ; preds = %699
  %705 = getelementptr inbounds %struct.OpusEncoder, %struct.OpusEncoder* %0, i64 0, i32 15
  %706 = load i32, i32* %705, align 4
  store i32 %706, i32* %702, align 4
  br label %933

707:                                              ; preds = %2
  %708 = load i32, i32* %6, align 16
  %709 = icmp ult i32 %708, 41
  br i1 %709, label %710, label %715

710:                                              ; preds = %707
  %711 = load i8*, i8** %8, align 16
  %712 = sext i32 %708 to i64
  %713 = getelementptr i8, i8* %711, i64 %712
  %714 = add nuw nsw i32 %708, 8
  store i32 %714, i32* %6, align 16
  br label %718

715:                                              ; preds = %707
  %716 = load i8*, i8** %7, align 8
  %717 = getelementptr i8, i8* %716, i64 8
  store i8* %717, i8** %7, align 8
  br label %718

718:                                              ; preds = %715, %710
  %719 = phi i8* [ %713, %710 ], [ %716, %715 ]
  %720 = bitcast i8* %719 to i32*
  %721 = load i32, i32* %720, align 4
  %722 = icmp ugt i32 %721, 1
  br i1 %722, label %933, label %723

723:                                              ; preds = %718
  %724 = getelementptr inbounds %struct.OpusEncoder, %struct.OpusEncoder* %0, i64 0, i32 2, i32 17
  store i32 %721, i32* %724, align 4
  br label %933

725:                                              ; preds = %2
  %726 = load i32, i32* %6, align 16
  %727 = icmp ult i32 %726, 41
  br i1 %727, label %728, label %733

728:                                              ; preds = %725
  %729 = load i8*, i8** %8, align 16
  %730 = sext i32 %726 to i64
  %731 = getelementptr i8, i8* %729, i64 %730
  %732 = add nuw nsw i32 %726, 8
  store i32 %732, i32* %6, align 16
  br label %736

733:                                              ; preds = %725
  %734 = load i8*, i8** %7, align 8
  %735 = getelementptr i8, i8* %734, i64 8
  store i8* %735, i8** %7, align 8
  br label %736

736:                                              ; preds = %733, %728
  %737 = phi i8* [ %731, %728 ], [ %734, %733 ]
  %738 = bitcast i8* %737 to i32**
  %739 = load i32*, i32** %738, align 8
  %740 = icmp eq i32* %739, null
  br i1 %740, label %933, label %741

741:                                              ; preds = %736
  %742 = getelementptr inbounds %struct.OpusEncoder, %struct.OpusEncoder* %0, i64 0, i32 2, i32 17
  %743 = load i32, i32* %742, align 4
  store i32 %743, i32* %739, align 4
  br label %933

744:                                              ; preds = %2
  %745 = load i32, i32* %6, align 16
  %746 = icmp ult i32 %745, 41
  br i1 %746, label %747, label %752

747:                                              ; preds = %744
  %748 = load i8*, i8** %8, align 16
  %749 = sext i32 %745 to i64
  %750 = getelementptr i8, i8* %748, i64 %749
  %751 = add nuw nsw i32 %745, 8
  store i32 %751, i32* %6, align 16
  br label %755

752:                                              ; preds = %744
  %753 = load i8*, i8** %7, align 8
  %754 = getelementptr i8, i8* %753, i64 8
  store i8* %754, i8** %7, align 8
  br label %755

755:                                              ; preds = %752, %747
  %756 = phi i8* [ %750, %747 ], [ %753, %752 ]
  %757 = bitcast i8* %756 to i32*
  %758 = load i32, i32* %757, align 4
  %759 = icmp ugt i32 %758, 1
  br i1 %759, label %933, label %760

760:                                              ; preds = %755
  %761 = call i32 (%struct.OpusCustomEncoder*, i32, ...) @opus_custom_encoder_ctl(%struct.OpusCustomEncoder* %15, i32 4046, i32 %758) #10
  br label %933

762:                                              ; preds = %2
  %763 = load i32, i32* %6, align 16
  %764 = icmp ult i32 %763, 41
  br i1 %764, label %765, label %770

765:                                              ; preds = %762
  %766 = load i8*, i8** %8, align 16
  %767 = sext i32 %763 to i64
  %768 = getelementptr i8, i8* %766, i64 %767
  %769 = add nuw nsw i32 %763, 8
  store i32 %769, i32* %6, align 16
  br label %773

770:                                              ; preds = %762
  %771 = load i8*, i8** %7, align 8
  %772 = getelementptr i8, i8* %771, i64 8
  store i8* %772, i8** %7, align 8
  br label %773

773:                                              ; preds = %770, %765
  %774 = phi i8* [ %768, %765 ], [ %771, %770 ]
  %775 = bitcast i8* %774 to i32**
  %776 = load i32*, i32** %775, align 8
  %777 = icmp eq i32* %776, null
  br i1 %777, label %933, label %778

778:                                              ; preds = %773
  %779 = call i32 (%struct.OpusCustomEncoder*, i32, ...) @opus_custom_encoder_ctl(%struct.OpusCustomEncoder* %15, i32 4047, i32* nonnull %776) #10
  br label %933

780:                                              ; preds = %2
  %781 = bitcast %struct.silk_EncControlStruct* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 100, i8* nonnull %781) #10
  call void @llvm.memset.p0i8.i64(i8* nonnull align 4 %781, i8 -86, i64 100, i1 false)
  %782 = getelementptr inbounds %struct.OpusEncoder, %struct.OpusEncoder* %0, i64 0, i32 1
  %783 = load i32, i32* %782, align 4
  %784 = sext i32 %783 to i64
  %785 = getelementptr inbounds i8, i8* %10, i64 %784
  %786 = getelementptr inbounds %struct.OpusEncoder, %struct.OpusEncoder* %0, i64 0, i32 23
  call void @tonality_analysis_reset(%struct.TonalityAnalysisState* %786) #10
  %787 = getelementptr inbounds %struct.OpusEncoder, %struct.OpusEncoder* %0, i64 0, i32 24
  %788 = bitcast i32* %787 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 1 %788, i8 0, i64 3952, i1 false)
  %789 = call i32 (%struct.OpusCustomEncoder*, i32, ...) @opus_custom_encoder_ctl(%struct.OpusCustomEncoder* %15, i32 4028) #10
  %790 = getelementptr inbounds %struct.OpusEncoder, %struct.OpusEncoder* %0, i64 0, i32 21
  %791 = load i32, i32* %790, align 4
  %792 = call i32 @silk_InitEncoder(i8* %785, i32 %791, %struct.silk_EncControlStruct* nonnull %4) #10
  %793 = getelementptr inbounds %struct.OpusEncoder, %struct.OpusEncoder* %0, i64 0, i32 4
  %794 = load i32, i32* %793, align 8
  store i32 %794, i32* %787, align 8
  %795 = getelementptr inbounds %struct.OpusEncoder, %struct.OpusEncoder* %0, i64 0, i32 25
  store i16 16384, i16* %795, align 4
  %796 = getelementptr inbounds %struct.OpusEncoder, %struct.OpusEncoder* %0, i64 0, i32 27
  store float 1.000000e+00, float* %796, align 4
  %797 = getelementptr inbounds %struct.OpusEncoder, %struct.OpusEncoder* %0, i64 0, i32 36
  store i32 1, i32* %797, align 4
  %798 = getelementptr inbounds %struct.OpusEncoder, %struct.OpusEncoder* %0, i64 0, i32 29
  store i32 1001, i32* %798, align 8
  %799 = getelementptr inbounds %struct.OpusEncoder, %struct.OpusEncoder* %0, i64 0, i32 33
  store i32 1105, i32* %799, align 8
  %800 = call i32 @silk_lin2log(i32 60) #10
  %801 = shl i32 %800, 8
  %802 = getelementptr inbounds %struct.OpusEncoder, %struct.OpusEncoder* %0, i64 0, i32 26
  store i32 %801, i32* %802, align 8
  call void @llvm.lifetime.end.p0i8(i64 100, i8* nonnull %781) #10
  br label %933

803:                                              ; preds = %2
  %804 = load i32, i32* %6, align 16
  %805 = icmp ult i32 %804, 41
  br i1 %805, label %806, label %811

806:                                              ; preds = %803
  %807 = load i8*, i8** %8, align 16
  %808 = sext i32 %804 to i64
  %809 = getelementptr i8, i8* %807, i64 %808
  %810 = add nuw nsw i32 %804, 8
  store i32 %810, i32* %6, align 16
  br label %814

811:                                              ; preds = %803
  %812 = load i8*, i8** %7, align 8
  %813 = getelementptr i8, i8* %812, i64 8
  store i8* %813, i8** %7, align 8
  br label %814

814:                                              ; preds = %811, %806
  %815 = phi i8* [ %809, %806 ], [ %812, %811 ]
  %816 = bitcast i8* %815 to i32*
  %817 = load i32, i32* %816, align 4
  switch i32 %817, label %933 [
    i32 -1000, label %818
    i32 1002, label %818
    i32 1001, label %818
    i32 1000, label %818
  ]

818:                                              ; preds = %814, %814, %814, %814
  %819 = getelementptr inbounds %struct.OpusEncoder, %struct.OpusEncoder* %0, i64 0, i32 10
  store i32 %817, i32* %819, align 8
  br label %933

820:                                              ; preds = %2
  %821 = load i32, i32* %6, align 16
  %822 = icmp ult i32 %821, 41
  br i1 %822, label %823, label %828

823:                                              ; preds = %820
  %824 = load i8*, i8** %8, align 16
  %825 = sext i32 %821 to i64
  %826 = getelementptr i8, i8* %824, i64 %825
  %827 = add nuw nsw i32 %821, 8
  store i32 %827, i32* %6, align 16
  br label %831

828:                                              ; preds = %820
  %829 = load i8*, i8** %7, align 8
  %830 = getelementptr i8, i8* %829, i64 8
  store i8* %830, i8** %7, align 8
  br label %831

831:                                              ; preds = %828, %823
  %832 = phi i8* [ %826, %823 ], [ %829, %828 ]
  %833 = bitcast i8* %832 to i32*
  %834 = load i32, i32* %833, align 4
  %835 = getelementptr inbounds %struct.OpusEncoder, %struct.OpusEncoder* %0, i64 0, i32 20
  store i32 %834, i32* %835, align 8
  %836 = call i32 (%struct.OpusCustomEncoder*, i32, ...) @opus_custom_encoder_ctl(%struct.OpusCustomEncoder* %15, i32 10024, i32 %834) #10
  br label %933

837:                                              ; preds = %2
  %838 = load i32, i32* %6, align 16
  %839 = icmp ult i32 %838, 41
  br i1 %839, label %840, label %845

840:                                              ; preds = %837
  %841 = load i8*, i8** %8, align 16
  %842 = sext i32 %838 to i64
  %843 = getelementptr i8, i8* %841, i64 %842
  %844 = add nuw nsw i32 %838, 8
  store i32 %844, i32* %6, align 16
  br label %848

845:                                              ; preds = %837
  %846 = load i8*, i8** %7, align 8
  %847 = getelementptr i8, i8* %846, i64 8
  store i8* %847, i8** %7, align 8
  br label %848

848:                                              ; preds = %845, %840
  %849 = phi i8* [ %843, %840 ], [ %846, %845 ]
  %850 = bitcast i8* %849 to float**
  %851 = load float*, float** %850, align 8
  %852 = getelementptr inbounds %struct.OpusEncoder, %struct.OpusEncoder* %0, i64 0, i32 37
  store float* %851, float** %852, align 8
  %853 = call i32 (%struct.OpusCustomEncoder*, i32, ...) @opus_custom_encoder_ctl(%struct.OpusCustomEncoder* %15, i32 10026, float* %851) #10
  br label %933

854:                                              ; preds = %2
  %855 = load i32, i32* %6, align 16
  %856 = icmp ult i32 %855, 41
  br i1 %856, label %857, label %862

857:                                              ; preds = %854
  %858 = load i8*, i8** %8, align 16
  %859 = sext i32 %855 to i64
  %860 = getelementptr i8, i8* %858, i64 %859
  %861 = add nuw nsw i32 %855, 8
  store i32 %861, i32* %6, align 16
  br label %865

862:                                              ; preds = %854
  %863 = load i8*, i8** %7, align 8
  %864 = getelementptr i8, i8* %863, i64 8
  store i8* %864, i8** %7, align 8
  br label %865

865:                                              ; preds = %862, %857
  %866 = phi i8* [ %860, %857 ], [ %863, %862 ]
  %867 = bitcast i8* %866 to i32**
  %868 = load i32*, i32** %867, align 8
  %869 = icmp eq i32* %868, null
  br i1 %869, label %933, label %870

870:                                              ; preds = %865
  %871 = getelementptr inbounds %struct.OpusEncoder, %struct.OpusEncoder* %0, i64 0, i32 2, i32 12
  %872 = load i32, i32* %871, align 8
  %873 = icmp eq i32 %872, 0
  br i1 %873, label %905, label %874

874:                                              ; preds = %870
  %875 = getelementptr inbounds %struct.OpusEncoder, %struct.OpusEncoder* %0, i64 0, i32 30
  %876 = load i32, i32* %875, align 4
  %877 = and i32 %876, -2
  %878 = icmp eq i32 %877, 1000
  br i1 %878, label %879, label %905

879:                                              ; preds = %874
  %880 = getelementptr inbounds %struct.OpusEncoder, %struct.OpusEncoder* %0, i64 0, i32 1
  %881 = load i32, i32* %880, align 4
  %882 = sext i32 %881 to i64
  %883 = getelementptr inbounds i8, i8* %10, i64 %882
  %884 = getelementptr inbounds i8, i8* %883, i64 6104
  %885 = bitcast i8* %884 to i32*
  %886 = load i32, i32* %885, align 8
  %887 = icmp sgt i32 %886, 9
  %888 = zext i1 %887 to i32
  store i32 %888, i32* %868, align 4
  br i1 %887, label %889, label %933

889:                                              ; preds = %879
  %890 = getelementptr inbounds %struct.OpusEncoder, %struct.OpusEncoder* %0, i64 0, i32 2, i32 1
  %891 = load i32, i32* %890, align 4
  %892 = icmp eq i32 %891, 2
  br i1 %892, label %893, label %933

893:                                              ; preds = %889
  %894 = getelementptr inbounds i8, i8* %883, i64 20260
  %895 = bitcast i8* %894 to i32*
  %896 = load i32, i32* %895, align 4
  %897 = icmp eq i32 %896, 0
  br i1 %897, label %898, label %933

898:                                              ; preds = %893
  %899 = getelementptr inbounds i8, i8* %883, i64 10088
  %900 = getelementptr inbounds i8, i8* %899, i64 6104
  %901 = bitcast i8* %900 to i32*
  %902 = load i32, i32* %901, align 8
  %903 = icmp sgt i32 %902, 9
  %904 = zext i1 %903 to i32
  store i32 %904, i32* %868, align 4
  br label %933

905:                                              ; preds = %874, %870
  %906 = getelementptr inbounds %struct.OpusEncoder, %struct.OpusEncoder* %0, i64 0, i32 22
  %907 = load i32, i32* %906, align 8
  %908 = icmp eq i32 %907, 0
  br i1 %908, label %914, label %909

909:                                              ; preds = %905
  %910 = getelementptr inbounds %struct.OpusEncoder, %struct.OpusEncoder* %0, i64 0, i32 41
  %911 = load i32, i32* %910, align 8
  %912 = icmp sgt i32 %911, 399
  %913 = zext i1 %912 to i32
  store i32 %913, i32* %868, align 4
  br label %933

914:                                              ; preds = %905
  store i32 0, i32* %868, align 4
  br label %933

915:                                              ; preds = %2
  %916 = load i32, i32* %6, align 16
  %917 = icmp ult i32 %916, 41
  br i1 %917, label %918, label %923

918:                                              ; preds = %915
  %919 = load i8*, i8** %8, align 16
  %920 = sext i32 %916 to i64
  %921 = getelementptr i8, i8* %919, i64 %920
  %922 = add nuw nsw i32 %916, 8
  store i32 %922, i32* %6, align 16
  br label %926

923:                                              ; preds = %915
  %924 = load i8*, i8** %7, align 8
  %925 = getelementptr i8, i8* %924, i64 8
  store i8* %925, i8** %7, align 8
  br label %926

926:                                              ; preds = %923, %918
  %927 = phi i8* [ %921, %918 ], [ %924, %923 ]
  %928 = bitcast i8* %927 to %struct.OpusCustomMode***
  %929 = load %struct.OpusCustomMode**, %struct.OpusCustomMode*** %928, align 8
  %930 = icmp eq %struct.OpusCustomMode** %929, null
  br i1 %930, label %933, label %931

931:                                              ; preds = %926
  %932 = call i32 (%struct.OpusCustomEncoder*, i32, ...) @opus_custom_encoder_ctl(%struct.OpusCustomEncoder* %15, i32 10015, %struct.OpusCustomMode** nonnull %929) #10
  br label %933

933:                                              ; preds = %53, %76, %100, %168, %187, %214, %233, %258, %277, %295, %314, %333, %352, %370, %389, %408, %427, %447, %466, %485, %504, %522, %541, %558, %577, %604, %623, %642, %661, %680, %699, %718, %736, %755, %773, %814, %865, %926, %153, %149, %780, %831, %848, %35, %27, %39, %2, %58, %86, %131, %155, %173, %219, %263, %282, %300, %319, %338, %357, %375, %394, %413, %432, %452, %472, %490, %509, %527, %545, %563, %609, %628, %648, %666, %686, %704, %723, %741, %760, %778, %818, %931, %201, %202, %196, %245, %246, %240, %582, %589, %879, %889, %893, %898, %909, %914
  %934 = phi i32 [ %853, %848 ], [ %836, %831 ], [ 0, %780 ], [ 0, %155 ], [ 0, %39 ], [ -1, %27 ], [ -1, %35 ], [ -5, %2 ], [ 0, %58 ], [ 0, %86 ], [ 0, %131 ], [ 0, %173 ], [ 0, %219 ], [ 0, %263 ], [ 0, %282 ], [ 0, %300 ], [ 0, %319 ], [ 0, %338 ], [ 0, %357 ], [ 0, %375 ], [ 0, %394 ], [ 0, %413 ], [ 0, %432 ], [ 0, %452 ], [ 0, %472 ], [ 0, %490 ], [ 0, %509 ], [ 0, %527 ], [ 0, %545 ], [ 0, %563 ], [ 0, %609 ], [ 0, %628 ], [ 0, %648 ], [ 0, %666 ], [ 0, %686 ], [ 0, %704 ], [ 0, %723 ], [ 0, %741 ], [ 0, %760 ], [ 0, %778 ], [ 0, %818 ], [ %932, %931 ], [ 0, %201 ], [ 0, %202 ], [ 0, %196 ], [ 0, %245 ], [ 0, %246 ], [ 0, %240 ], [ 0, %582 ], [ 0, %589 ], [ 0, %879 ], [ 0, %889 ], [ 0, %893 ], [ 0, %898 ], [ 0, %909 ], [ 0, %914 ], [ -1, %149 ], [ -1, %153 ], [ -1, %926 ], [ -1, %865 ], [ -1, %814 ], [ -1, %773 ], [ -1, %755 ], [ -1, %736 ], [ -1, %718 ], [ -1, %699 ], [ -1, %680 ], [ -1, %661 ], [ -1, %642 ], [ -1, %623 ], [ -1, %604 ], [ -1, %577 ], [ -1, %558 ], [ -1, %541 ], [ -1, %522 ], [ -1, %504 ], [ -1, %485 ], [ -1, %466 ], [ -1, %447 ], [ -1, %427 ], [ -1, %408 ], [ -1, %389 ], [ -1, %370 ], [ -1, %352 ], [ -1, %333 ], [ -1, %314 ], [ -1, %295 ], [ -1, %277 ], [ -1, %258 ], [ -1, %233 ], [ -1, %214 ], [ -1, %187 ], [ -1, %168 ], [ -1, %100 ], [ -1, %76 ], [ -1, %53 ]
  call void @llvm.va_end(i8* nonnull %5)
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %5) #10
  ret i32 %934
}

; Function Attrs: nounwind
declare void @llvm.va_start(i8*) #10

; Function Attrs: nounwind
declare void @llvm.va_end(i8*) #10

; Function Attrs: nounwind ssp uwtable
define hidden void @opus_encoder_destroy(%struct.OpusEncoder* nocapture) local_unnamed_addr #0 {
  %2 = bitcast %struct.OpusEncoder* %0 to i8*
  tail call void @free(i8* %2) #10
  ret void
}

; Function Attrs: nofree nounwind
declare noalias i8* @malloc(i64) local_unnamed_addr #8

; Function Attrs: nounwind
declare void @free(i8* nocapture) local_unnamed_addr #11

declare %struct.OpusRepacketizer* @opus_repacketizer_init(%struct.OpusRepacketizer*) local_unnamed_addr #2

declare i32 @opus_repacketizer_cat(%struct.OpusRepacketizer*, i8*, i32) local_unnamed_addr #2

declare i32 @opus_repacketizer_out_range_impl(%struct.OpusRepacketizer*, i32, i32, i8*, i32, i32, i32) local_unnamed_addr #2

; Function Attrs: nounwind readnone
declare i32 @llvm.x86.sse.cvtss2si(<4 x float>) #12

; Function Attrs: nounwind readnone speculatable
declare i32 @llvm.ctlz.i32(i32, i1 immarg) #7

declare float @sqrtf(float) local_unnamed_addr

; Function Attrs: nounwind readnone speculatable
declare float @llvm.fabs.f32(float) #7

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nofree norecurse nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { norecurse nounwind readnone ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { norecurse nounwind readonly ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="128" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { nounwind readnone speculatable }
attributes #8 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #9 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #10 = { nounwind }
attributes #11 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #12 = { nounwind readnone }
attributes #13 = { noreturn nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = distinct !{!2, !3}
!3 = !{!"llvm.loop.unroll.disable"}
!4 = distinct !{!4, !3}
!5 = distinct !{!5, !6}
!6 = !{!"llvm.loop.isvectorized", i32 1}
!7 = distinct !{!7, !6}
!8 = !{!9}
!9 = distinct !{!9, !10}
!10 = distinct !{!10, !"LVerDomain"}
!11 = distinct !{!11, !6}
!12 = distinct !{!12, !6}
!13 = distinct !{!13, !6}
!14 = distinct !{!14, !15, !6}
!15 = !{!"llvm.loop.unroll.runtime.disable"}
!16 = !{i32 0, i32 33}
!17 = distinct !{!17, !6}
!18 = distinct !{!18, !15, !6}
