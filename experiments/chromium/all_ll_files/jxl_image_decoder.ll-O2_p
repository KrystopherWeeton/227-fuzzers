; ModuleID = '../../third_party/blink/renderer/platform/image-decoders/jxl/jxl_image_decoder.cc'
source_filename = "../../third_party/blink/renderer/platform/image-decoders/jxl/jxl_image_decoder.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%struct.JxlPixelFormat = type { i32, i32, i32, i64 }
%struct.skcms_TransferFunction = type { float, float, float, float, float, float, float }
%struct.skcms_Matrix3x3 = type { [3 x [3 x float]] }
%struct.skcms_Matrix3x4 = type { [3 x [4 x float]] }
%"class.blink::JXLImageDecoder" = type { %"class.blink::ImageDecoder", %"class.std::__1::unique_ptr.28", i64, %"class.std::__1::unique_ptr.28", i64, i8, i8, %struct.JxlBasicInfo, i8, %"class.blink::ColorProfileTransform"*, i64, i8, i8, i64, %"class.WTF::Vector.32" }
%"class.blink::ImageDecoder" = type { i32 (...)**, %class.scoped_refptr, %"class.WTF::Vector", i8, i32, %"class.blink::ColorBehavior", %"class.blink::ImageOrientation", %"class.blink::IntSize", i64, i8, %"class.std::__1::unique_ptr", i8, %"class.blink::IntSize", i8, i8, i8, %"class.std::__1::unique_ptr.9", %class.sk_sp.1, i8, %"class.std::__1::unique_ptr.22" }
%class.scoped_refptr = type { %"class.blink::SegmentReader"* }
%"class.blink::SegmentReader" = type <{ i32 (...)**, %"class.WTF::ThreadSafeRefCounted", [4 x i8] }>
%"class.WTF::ThreadSafeRefCounted" = type { %"class.base::RefCountedThreadSafe" }
%"class.base::RefCountedThreadSafe" = type { %"class.base::subtle::RefCountedThreadSafeBase" }
%"class.base::subtle::RefCountedThreadSafeBase" = type { %"class.base::AtomicRefCount" }
%"class.base::AtomicRefCount" = type { %"struct.std::__1::atomic" }
%"struct.std::__1::atomic" = type { %"struct.std::__1::__atomic_base" }
%"struct.std::__1::__atomic_base" = type { %"struct.std::__1::__atomic_base.0" }
%"struct.std::__1::__atomic_base.0" = type { %"struct.std::__1::__cxx_atomic_impl" }
%"struct.std::__1::__cxx_atomic_impl" = type { %"struct.std::__1::__cxx_atomic_base_impl" }
%"struct.std::__1::__cxx_atomic_base_impl" = type { i32 }
%"class.WTF::Vector" = type { %"class.WTF::VectorBuffer" }
%"class.WTF::VectorBuffer" = type { %"class.WTF::VectorBufferBase", [128 x i8] }
%"class.WTF::VectorBufferBase" = type { %"class.blink::ImageFrame"*, i32, i32 }
%"class.blink::ImageFrame" = type { %class.SkBitmap, %"class.SkBitmap::Allocator"*, i8, i32, %"class.blink::IntRect", i32, %"class.base::TimeDelta", i32, i32, i8, i8, i64 }
%class.SkBitmap = type { %class.sk_sp, %class.SkPixmap, %class.sk_sp.7 }
%class.sk_sp = type { %class.SkPixelRef* }
%class.SkPixelRef = type opaque
%class.SkPixmap = type { i8*, i64, %struct.SkImageInfo }
%struct.SkImageInfo = type { %class.SkColorInfo, %struct.SkISize }
%class.SkColorInfo = type { %class.sk_sp.1, i32, i32 }
%struct.SkISize = type { i32, i32 }
%class.sk_sp.7 = type { %class.SkMipmap* }
%class.SkMipmap = type opaque
%"class.SkBitmap::Allocator" = type { %class.SkRefCnt.base, [4 x i8] }
%class.SkRefCnt.base = type { %class.SkRefCntBase.base }
%class.SkRefCntBase.base = type <{ i32 (...)**, %"struct.std::__1::atomic" }>
%"class.blink::IntRect" = type { %"class.blink::IntPoint", %"class.blink::IntSize" }
%"class.blink::IntPoint" = type { i32, i32 }
%"class.base::TimeDelta" = type { i64 }
%"class.blink::ColorBehavior" = type { i32 }
%"class.blink::ImageOrientation" = type { i8 }
%"class.std::__1::unique_ptr" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %"class.blink::ImagePlanes"* }
%"class.blink::ImagePlanes" = type <{ [3 x i8*], [3 x i64], i32, i8, [3 x i8] }>
%"class.blink::IntSize" = type { i32, i32 }
%"class.std::__1::unique_ptr.9" = type { %"class.std::__1::__compressed_pair.10" }
%"class.std::__1::__compressed_pair.10" = type { %"struct.std::__1::__compressed_pair_elem.11" }
%"struct.std::__1::__compressed_pair_elem.11" = type { %"class.blink::ColorProfile"* }
%"class.blink::ColorProfile" = type { %struct.skcms_ICCProfile, %"class.std::__1::unique_ptr.13" }
%struct.skcms_ICCProfile = type { i8*, i32, i32, i32, i32, i8, [3 x %union.skcms_Curve], i8, %struct.skcms_Matrix3x3, i8, %struct.skcms_A2B, i8, %struct.skcms_B2A }
%union.skcms_Curve = type { %struct.anon.12, [8 x i8] }
%struct.anon.12 = type { i32, i8*, i8* }
%struct.skcms_A2B = type { i32, [4 x %union.skcms_Curve], [4 x i8], i8*, i8*, i32, [3 x %union.skcms_Curve], %struct.skcms_Matrix3x4, i32, [3 x %union.skcms_Curve] }
%struct.skcms_B2A = type { i32, [3 x %union.skcms_Curve], i32, %struct.skcms_Matrix3x4, [3 x %union.skcms_Curve], i32, [4 x i8], i8*, i8*, [4 x %union.skcms_Curve] }
%"class.std::__1::unique_ptr.13" = type { %"class.std::__1::__compressed_pair.14" }
%"class.std::__1::__compressed_pair.14" = type { %"struct.std::__1::__compressed_pair_elem.15" }
%"struct.std::__1::__compressed_pair_elem.15" = type { i8* }
%class.sk_sp.1 = type { %class.SkColorSpace* }
%class.SkColorSpace = type <{ %class.SkNVRefCnt, i32, i32, %struct.skcms_TransferFunction, %struct.skcms_Matrix3x3, %struct.skcms_TransferFunction, %struct.skcms_Matrix3x3, %class.SkOnce, [3 x i8] }>
%class.SkNVRefCnt = type { %"struct.std::__1::atomic" }
%class.SkOnce = type { %"struct.std::__1::atomic.2" }
%"struct.std::__1::atomic.2" = type { %"struct.std::__1::__atomic_base.3" }
%"struct.std::__1::__atomic_base.3" = type { %"struct.std::__1::__atomic_base.4" }
%"struct.std::__1::__atomic_base.4" = type { %"struct.std::__1::__cxx_atomic_impl.5" }
%"struct.std::__1::__cxx_atomic_impl.5" = type { %"struct.std::__1::__cxx_atomic_base_impl.6" }
%"struct.std::__1::__cxx_atomic_base_impl.6" = type { i8 }
%"class.std::__1::unique_ptr.22" = type { %"class.std::__1::__compressed_pair.23" }
%"class.std::__1::__compressed_pair.23" = type { %"struct.std::__1::__compressed_pair_elem.24" }
%"struct.std::__1::__compressed_pair_elem.24" = type { %"class.blink::ColorProfileTransform"* }
%"class.std::__1::unique_ptr.28" = type { %"class.std::__1::__compressed_pair.29" }
%"class.std::__1::__compressed_pair.29" = type { %"struct.std::__1::__compressed_pair_elem.30" }
%"struct.std::__1::__compressed_pair_elem.30" = type { %struct.JxlDecoderStruct* }
%struct.JxlDecoderStruct = type opaque
%struct.JxlBasicInfo = type { i32, i32, i32, i32, i32, float, float, i32, float, i32, i32, i32, i32, i32, i32, i32, i32, i32, %struct.JxlPreviewHeader, %struct.JxlAnimationHeader }
%struct.JxlPreviewHeader = type { i32, i32 }
%struct.JxlAnimationHeader = type { i32, i32, i32, i32 }
%"class.blink::ColorProfileTransform" = type { %struct.skcms_ICCProfile*, %struct.skcms_ICCProfile }
%"class.WTF::Vector.32" = type { %"class.WTF::VectorBuffer.33" }
%"class.WTF::VectorBuffer.33" = type { %"class.WTF::VectorBufferBase.34" }
%"class.WTF::VectorBufferBase.34" = type { float*, i32, i32 }
%"class.logging::CheckError" = type { %"class.logging::LogMessage"* }
%"class.logging::LogMessage" = type { i32 (...)**, i32, %"class.std::__1::basic_ostringstream", i64, i8*, i32, %"class.base::ScopedClearLastErrorBase" }
%"class.std::__1::basic_ostringstream" = type { %"class.std::__1::basic_ostream.base", %"class.std::__1::basic_stringbuf", %"class.std::__1::basic_ios.base" }
%"class.std::__1::basic_ostream.base" = type { i32 (...)** }
%"class.std::__1::basic_stringbuf" = type <{ %"class.std::__1::basic_streambuf", %"class.std::__1::basic_string", i8*, i32, [4 x i8] }>
%"class.std::__1::basic_streambuf" = type { i32 (...)**, %"class.std::__1::locale", i8*, i8*, i8*, i8*, i8*, i8* }
%"class.std::__1::locale" = type { %"class.std::__1::locale::__imp"* }
%"class.std::__1::locale::__imp" = type opaque
%"class.std::__1::basic_string" = type { %"class.std::__1::__compressed_pair.55" }
%"class.std::__1::__compressed_pair.55" = type { %"struct.std::__1::__compressed_pair_elem.56" }
%"struct.std::__1::__compressed_pair_elem.56" = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" = type { %union.anon.57 }
%union.anon.57 = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" = type { i8*, i64, i64 }
%"class.std::__1::basic_ios.base" = type <{ %"class.std::__1::ios_base", %"class.std::__1::basic_ostream"*, i32 }>
%"class.std::__1::ios_base" = type { i32 (...)**, i32, i64, i64, i32, i32, i8*, i8*, void (i32, %"class.std::__1::ios_base"*, i32)**, i32*, i64, i64, i64*, i64, i64, i8**, i64, i64 }
%"class.std::__1::basic_ostream" = type { i32 (...)**, %"class.std::__1::basic_ios.base" }
%"class.base::ScopedClearLastErrorBase" = type { i32 }
%"class.blink::FastSharedBufferReader" = type { %class.scoped_refptr, i8*, i64, i64 }
%struct.JxlColorEncoding = type { i32, i32, [2 x double], i32, [2 x double], [2 x double], [2 x double], i32, double, i32 }
%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { i8*, i8*, %"class.std::__1::__compressed_pair.37" }
%"class.std::__1::__compressed_pair.37" = type { %"struct.std::__1::__compressed_pair_elem.15" }
%struct.JxlMemoryManagerStruct = type { i8*, i8* (i8*, i64)*, void (i8*, i8*)* }
%struct.anon = type { i32, %struct.skcms_TransferFunction }
%"class.std::__1::__vector_base_common" = type { i8 }
%struct.JxlFrameHeader = type { i32, i32, i32, i32 }
%"class.WTF::StringImpl" = type { i32, i32, %"struct.std::__1::atomic.40" }
%"struct.std::__1::atomic.40" = type { %"struct.std::__1::__atomic_base.41" }
%"struct.std::__1::__atomic_base.41" = type { %"struct.std::__1::__atomic_base.42" }
%"struct.std::__1::__atomic_base.42" = type { %"struct.std::__1::__cxx_atomic_impl.43" }
%"struct.std::__1::__cxx_atomic_impl.43" = type { %"struct.std::__1::__cxx_atomic_base_impl.44" }
%"struct.std::__1::__cxx_atomic_base_impl.44" = type { i32 }
%"class.WTF::String" = type { %class.scoped_refptr.39 }
%class.scoped_refptr.39 = type { %"class.WTF::StringImpl"* }
%"class.WTF::Vector.45" = type { %"class.WTF::VectorBuffer.46" }
%"class.WTF::VectorBuffer.46" = type { %"class.WTF::VectorBufferBase.47" }
%"class.WTF::VectorBufferBase.47" = type { %struct.SkISize*, i32, i32 }
%"struct.cc::ImageHeaderMetadata" = type <{ i32, i32, %"class.gfx::Size", %"class.absl::optional", i8, i8, %"class.absl::optional.50", %"class.absl::optional.50", [2 x i8] }>
%"class.gfx::Size" = type { i32, i32 }
%"class.absl::optional" = type { %"class.absl::optional_internal::optional_data" }
%"class.absl::optional_internal::optional_data" = type { %"class.absl::optional_internal::optional_data_base" }
%"class.absl::optional_internal::optional_data_base" = type { %"class.absl::optional_internal::optional_data_dtor_base" }
%"class.absl::optional_internal::optional_data_dtor_base" = type { i8, %union.anon }
%union.anon = type { %"class.gfx::Size" }
%"class.absl::optional.50" = type { %"class.absl::optional_internal::optional_data.51" }
%"class.absl::optional_internal::optional_data.51" = type { %"class.absl::optional_internal::optional_data_base.52" }
%"class.absl::optional_internal::optional_data_base.52" = type { %"class.absl::optional_internal::optional_data_dtor_base.53" }
%"class.absl::optional_internal::optional_data_dtor_base.53" = type { i8, %union.anon.54 }
%union.anon.54 = type { i8 }
%"class.logging::CheckOpResult" = type { i8* }

$_ZN5blink12ImageDecoder9SetFailedEv = comdat any

$_ZN5blink12ImageDecoder7SetSizeEjj = comdat any

$_ZN5blink15JXLImageDecoder10DecodeSizeEv = comdat any

$_ZN5blink15JXLImageDecoderD2Ev = comdat any

$_ZN5blink15JXLImageDecoderD0Ev = comdat any

$_ZNK5blink15JXLImageDecoder17FilenameExtensionEv = comdat any

$_ZN5blink15JXLImageDecoder19ImageIsHighBitDepthEv = comdat any

$_ZN5blink12ImageDecoder9OnSetDataEPNS_13SegmentReaderE = comdat any

$_ZNK5blink12ImageDecoder4SizeEv = comdat any

$_ZNK5blink12ImageDecoder23GetSupportedDecodeSizesEv = comdat any

$_ZNK5blink12ImageDecoder11DecodedSizeEv = comdat any

$_ZNK5blink12ImageDecoder17GetYUVSubsamplingEv = comdat any

$_ZNK5blink12ImageDecoder14DecodedYUVSizeEN2cc8YUVIndexE = comdat any

$_ZNK5blink12ImageDecoder20DecodedYUVWidthBytesEN2cc8YUVIndexE = comdat any

$_ZNK5blink12ImageDecoder16GetYUVColorSpaceEv = comdat any

$_ZNK5blink12ImageDecoder14GetYUVBitDepthEv = comdat any

$_ZNK5blink12ImageDecoder16FrameSizeAtIndexEm = comdat any

$_ZNK5blink12ImageDecoder7HotSpotERNS_8IntPointE = comdat any

$_ZN5blink12ImageDecoder18SetMemoryAllocatorEPN8SkBitmap9AllocatorE = comdat any

$_ZN5blink12ImageDecoder11DecodeToYUVEv = comdat any

$_ZNK5blink12ImageDecoder37ImageHasBothStillAndAnimatedSubImagesEv = comdat any

$_ZN5blink15JXLImageDecoder16ClearFrameBufferEm = comdat any

$_ZN5blink15JXLImageDecoder6DecodeEm = comdat any

$_ZN5blink12ImageDecoder34FrameStatusSufficientForSuccessorsEj = comdat any

$_ZN5blink12ImageDecoder17OnInitFrameBufferEm = comdat any

$_ZNK5blink15JXLImageDecoder27CanReusePreviousFrameBufferEm = comdat any

$_ZN5blink12ImageDecoderD2Ev = comdat any

$_ZN3WTF12VectorBufferIN5blink10ImageFrameELj1ENS_18PartitionAllocatorEE22ReallyDeallocateBufferEPS2_ = comdat any

$_ZN3WTF6VectorIN5blink10ImageFrameELj1ENS_18PartitionAllocatorEE2atEj = comdat any

$_ZNK3WTF6VectorIN5blink10ImageFrameELj1ENS_18PartitionAllocatorEE2atEj = comdat any

$_ZNK3WTF6VectorIfLj0ENS_18PartitionAllocatorEE2atEj = comdat any

$_ZN3WTF18PartitionAllocator13QuantizedSizeIfEEmm = comdat any

$_ZN3WTF6VectorIfLj0ENS_18PartitionAllocatorEE2atEj = comdat any

$_ZN3WTF6VectorIfLj0ENS_18PartitionAllocatorEE14AppendSlowCaseIfEEvOT_ = comdat any

@_ZTVN5blink15JXLImageDecoderE = hidden unnamed_addr constant { [37 x i8*] } { [37 x i8*] [i8* null, i8* null, i8* bitcast (void (%"class.blink::JXLImageDecoder"*)* @_ZN5blink15JXLImageDecoderD2Ev to i8*), i8* bitcast (void (%"class.blink::JXLImageDecoder"*)* @_ZN5blink15JXLImageDecoderD0Ev to i8*), i8* bitcast (%"class.WTF::StringImpl"* (%"class.blink::JXLImageDecoder"*)* @_ZNK5blink15JXLImageDecoder17FilenameExtensionEv to i8*), i8* bitcast (i1 (%"class.blink::JXLImageDecoder"*)* @_ZN5blink15JXLImageDecoder19ImageIsHighBitDepthEv to i8*), i8* bitcast (void (%"class.blink::ImageDecoder"*, %"class.blink::SegmentReader"*)* @_ZN5blink12ImageDecoder9OnSetDataEPNS_13SegmentReaderE to i8*), i8* bitcast (i64 (%"class.blink::ImageDecoder"*)* @_ZNK5blink12ImageDecoder4SizeEv to i8*), i8* bitcast (void (%"class.WTF::Vector.45"*, %"class.blink::ImageDecoder"*)* @_ZNK5blink12ImageDecoder23GetSupportedDecodeSizesEv to i8*), i8* bitcast (i64 (%"class.blink::ImageDecoder"*)* @_ZNK5blink12ImageDecoder11DecodedSizeEv to i8*), i8* bitcast (i32 (%"class.blink::ImageDecoder"*)* @_ZNK5blink12ImageDecoder17GetYUVSubsamplingEv to i8*), i8* bitcast (i64 (%"class.blink::ImageDecoder"*, i32)* @_ZNK5blink12ImageDecoder14DecodedYUVSizeEN2cc8YUVIndexE to i8*), i8* bitcast (i64 (%"class.blink::ImageDecoder"*, i32)* @_ZNK5blink12ImageDecoder20DecodedYUVWidthBytesEN2cc8YUVIndexE to i8*), i8* bitcast (i32 (%"class.blink::ImageDecoder"*)* @_ZNK5blink12ImageDecoder16GetYUVColorSpaceEv to i8*), i8* bitcast (i8 (%"class.blink::ImageDecoder"*)* @_ZNK5blink12ImageDecoder14GetYUVBitDepthEv to i8*), i8* bitcast (void (%"struct.cc::ImageHeaderMetadata"*, %"class.blink::ImageDecoder"*)* @_ZNK5blink12ImageDecoder33MakeMetadataForDecodeAccelerationEv to i8*), i8* bitcast (i64 (%"class.blink::ImageDecoder"*, i64)* @_ZNK5blink12ImageDecoder16FrameSizeAtIndexEm to i8*), i8* bitcast (i1 (%"class.blink::ImageDecoder"*, i32, i32)* @_ZN5blink12ImageDecoder7SetSizeEjj to i8*), i8* bitcast (i32 (%"class.blink::JXLImageDecoder"*)* @_ZNK5blink15JXLImageDecoder15RepetitionCountEv to i8*), i8* bitcast (i1 (%"class.blink::ImageDecoder"*, i64)* @_ZNK5blink12ImageDecoder20FrameHasAlphaAtIndexEm to i8*), i8* bitcast (i1 (%"class.blink::JXLImageDecoder"*, i64)* @_ZNK5blink15JXLImageDecoder22FrameIsReceivedAtIndexEm to i8*), i8* bitcast (i64 (%"class.blink::JXLImageDecoder"*, i64)* @_ZNK5blink15JXLImageDecoder20FrameDurationAtIndexEm to i8*), i8* bitcast (i64 (%"class.blink::ImageDecoder"*, i64)* @_ZNK5blink12ImageDecoder17FrameBytesAtIndexEm to i8*), i8* bitcast (i1 (%"class.blink::ImageDecoder"*)* @_ZN5blink12ImageDecoder9SetFailedEv to i8*), i8* bitcast (i64 (%"class.blink::ImageDecoder"*, i64)* @_ZN5blink12ImageDecoder21ClearCacheExceptFrameEm to i8*), i8* bitcast (i1 (%"class.blink::ImageDecoder"*, %"class.blink::IntPoint"*)* @_ZNK5blink12ImageDecoder7HotSpotERNS_8IntPointE to i8*), i8* bitcast (void (%"class.blink::ImageDecoder"*, %"class.SkBitmap::Allocator"*)* @_ZN5blink12ImageDecoder18SetMemoryAllocatorEPN8SkBitmap9AllocatorE to i8*), i8* bitcast (void (%"class.blink::ImageDecoder"*)* @_ZN5blink12ImageDecoder11DecodeToYUVEv to i8*), i8* bitcast (i1 (%"class.blink::ImageDecoder"*)* @_ZNK5blink12ImageDecoder37ImageHasBothStillAndAnimatedSubImagesEv to i8*), i8* bitcast (void (%"class.blink::JXLImageDecoder"*, i64)* @_ZN5blink15JXLImageDecoder16ClearFrameBufferEm to i8*), i8* bitcast (void (%"class.blink::JXLImageDecoder"*)* @_ZN5blink15JXLImageDecoder10DecodeSizeEv to i8*), i8* bitcast (i64 (%"class.blink::JXLImageDecoder"*)* @_ZN5blink15JXLImageDecoder16DecodeFrameCountEv to i8*), i8* bitcast (void (%"class.blink::JXLImageDecoder"*, i64)* @_ZN5blink15JXLImageDecoder18InitializeNewFrameEm to i8*), i8* bitcast (void (%"class.blink::JXLImageDecoder"*, i64)* @_ZN5blink15JXLImageDecoder6DecodeEm to i8*), i8* bitcast (i1 (%"class.blink::ImageDecoder"*, i32)* @_ZN5blink12ImageDecoder34FrameStatusSufficientForSuccessorsEj to i8*), i8* bitcast (void (%"class.blink::ImageDecoder"*, i64)* @_ZN5blink12ImageDecoder17OnInitFrameBufferEm to i8*), i8* bitcast (i1 (%"class.blink::JXLImageDecoder"*, i64)* @_ZNK5blink15JXLImageDecoder27CanReusePreviousFrameBufferEm to i8*)] }, align 8
@_ZZN5blink15JXLImageDecoder10DecodeImplEmbE6format = internal constant %struct.JxlPixelFormat { i32 4, i32 0, i32 0, i64 0 }, align 8
@__const._ZN5blink15JXLImageDecoder10DecodeImplEmb.color_encoding = private unnamed_addr constant { i32, i32, [2 x double], i32, [4 x i8], [2 x double], [2 x double], [2 x double], i32, [4 x i8], double, i32, [4 x i8] } { i32 -1431655766, i32 -1431655766, [2 x double] [double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF], i32 -1431655766, [4 x i8] c"\AA\AA\AA\AA", [2 x double] [double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF], [2 x double] [double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF], [2 x double] [double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF], i32 -1431655766, [4 x i8] c"\AA\AA\AA\AA", double 0xFFFFFFFFFFFFFFFF, i32 -1431655766, [4 x i8] c"\AA\AA\AA\AA" }, align 8
@_ZN17SkNamedTransferFnL3kPQE = internal unnamed_addr constant %struct.skcms_TransferFunction { float -2.000000e+00, float 0xBFEAC00000000000, float 1.000000e+00, float 0x3F89F9B580000000, float 0x4032DA0000000000, float -1.868750e+01, float 0x40191C0D60000000 }, align 4
@_ZN17SkNamedTransferFnL7kLinearE = internal unnamed_addr constant %struct.skcms_TransferFunction { float 1.000000e+00, float 1.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00 }, align 4
@_ZN17SkNamedTransferFnL5kSRGBE = internal unnamed_addr constant %struct.skcms_TransferFunction { float 0x4003333340000000, float 0x3FEE54EDC0000000, float 0x3FAAB12320000000, float 0x3FB3D07220000000, float 0x3FA4B5DCC0000000, float 0.000000e+00, float 0.000000e+00 }, align 4
@_ZN12SkNamedGamutL8kRec2020E = internal unnamed_addr constant %struct.skcms_Matrix3x3 { [3 x [3 x float]] [[3 x float] [float 0x3FE58CF9E0000000, float 0x3FC5346140000000, float 0x3FC00346E0000000], [3 x float] [float 0x3FD1DBAD40000000, float 0x3FE59C5E60000000, float 0x3FA75CA880000000], [3 x float] [float 0xBF5FA4D640000000, float 0x3F9EB2EB80000000, float 0x3FE98259E0000000]] }, align 4
@_ZN12SkNamedGamutL5kSRGBE = internal unnamed_addr constant %struct.skcms_Matrix3x3 { [3 x [3 x float]] [[3 x float] [float 0x3FDBE88000000000, float 0x3FD8A64000000000, float 0x3FC2500000000000], [3 x float] [float 0x3FCC7A8000000000, float 0x3FE6F0A000000000, float 0x3FAF080000000000], [3 x float] [float 0x3F8C800000000000, float 0x3FB8DA0000000000, float 0x3FE6D9E000000000]] }, align 4
@__const._ZN5blink15JXLImageDecoder10DecodeImplEmb.dataProfile = private unnamed_addr constant { i8*, i32, i32, i32, i32, i8, [7 x i8], [3 x { { i32, [4 x i8], i8*, i8* }, [8 x i8] }], i8, [3 x i8], %struct.skcms_Matrix3x3, i8, [7 x i8], { i32, [4 x i8], [4 x { { i32, [4 x i8], i8*, i8* }, [8 x i8] }], [4 x i8], [4 x i8], i8*, i8*, i32, [4 x i8], [3 x { { i32, [4 x i8], i8*, i8* }, [8 x i8] }], %struct.skcms_Matrix3x4, i32, [4 x i8], [3 x { { i32, [4 x i8], i8*, i8* }, [8 x i8] }] }, i8, [7 x i8], { i32, [4 x i8], [3 x { { i32, [4 x i8], i8*, i8* }, [8 x i8] }], i32, %struct.skcms_Matrix3x4, [4 x i8], [3 x { { i32, [4 x i8], i8*, i8* }, [8 x i8] }], i32, [4 x i8], i8*, i8*, [4 x { { i32, [4 x i8], i8*, i8* }, [8 x i8] }] } } { i8* inttoptr (i64 -6148914691236517206 to i8*), i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i8 -86, [7 x i8] c"\AA\AA\AA\AA\AA\AA\AA", [3 x { { i32, [4 x i8], i8*, i8* }, [8 x i8] }] [{ { i32, [4 x i8], i8*, i8* }, [8 x i8] } { { i32, [4 x i8], i8*, i8* } { i32 -1431655766, [4 x i8] c"\AA\AA\AA\AA", i8* inttoptr (i64 -6148914691236517206 to i8*), i8* inttoptr (i64 -6148914691236517206 to i8*) }, [8 x i8] c"\AA\AA\AA\AA\AA\AA\AA\AA" }, { { i32, [4 x i8], i8*, i8* }, [8 x i8] } { { i32, [4 x i8], i8*, i8* } { i32 -1431655766, [4 x i8] c"\AA\AA\AA\AA", i8* inttoptr (i64 -6148914691236517206 to i8*), i8* inttoptr (i64 -6148914691236517206 to i8*) }, [8 x i8] c"\AA\AA\AA\AA\AA\AA\AA\AA" }, { { i32, [4 x i8], i8*, i8* }, [8 x i8] } { { i32, [4 x i8], i8*, i8* } { i32 -1431655766, [4 x i8] c"\AA\AA\AA\AA", i8* inttoptr (i64 -6148914691236517206 to i8*), i8* inttoptr (i64 -6148914691236517206 to i8*) }, [8 x i8] c"\AA\AA\AA\AA\AA\AA\AA\AA" }], i8 -86, [3 x i8] c"\AA\AA\AA", %struct.skcms_Matrix3x3 { [3 x [3 x float]] [[3 x float] [float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000], [3 x float] [float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000], [3 x float] [float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000]] }, i8 -86, [7 x i8] c"\AA\AA\AA\AA\AA\AA\AA", { i32, [4 x i8], [4 x { { i32, [4 x i8], i8*, i8* }, [8 x i8] }], [4 x i8], [4 x i8], i8*, i8*, i32, [4 x i8], [3 x { { i32, [4 x i8], i8*, i8* }, [8 x i8] }], %struct.skcms_Matrix3x4, i32, [4 x i8], [3 x { { i32, [4 x i8], i8*, i8* }, [8 x i8] }] } { i32 -1431655766, [4 x i8] c"\AA\AA\AA\AA", [4 x { { i32, [4 x i8], i8*, i8* }, [8 x i8] }] [{ { i32, [4 x i8], i8*, i8* }, [8 x i8] } { { i32, [4 x i8], i8*, i8* } { i32 -1431655766, [4 x i8] c"\AA\AA\AA\AA", i8* inttoptr (i64 -6148914691236517206 to i8*), i8* inttoptr (i64 -6148914691236517206 to i8*) }, [8 x i8] c"\AA\AA\AA\AA\AA\AA\AA\AA" }, { { i32, [4 x i8], i8*, i8* }, [8 x i8] } { { i32, [4 x i8], i8*, i8* } { i32 -1431655766, [4 x i8] c"\AA\AA\AA\AA", i8* inttoptr (i64 -6148914691236517206 to i8*), i8* inttoptr (i64 -6148914691236517206 to i8*) }, [8 x i8] c"\AA\AA\AA\AA\AA\AA\AA\AA" }, { { i32, [4 x i8], i8*, i8* }, [8 x i8] } { { i32, [4 x i8], i8*, i8* } { i32 -1431655766, [4 x i8] c"\AA\AA\AA\AA", i8* inttoptr (i64 -6148914691236517206 to i8*), i8* inttoptr (i64 -6148914691236517206 to i8*) }, [8 x i8] c"\AA\AA\AA\AA\AA\AA\AA\AA" }, { { i32, [4 x i8], i8*, i8* }, [8 x i8] } { { i32, [4 x i8], i8*, i8* } { i32 -1431655766, [4 x i8] c"\AA\AA\AA\AA", i8* inttoptr (i64 -6148914691236517206 to i8*), i8* inttoptr (i64 -6148914691236517206 to i8*) }, [8 x i8] c"\AA\AA\AA\AA\AA\AA\AA\AA" }], [4 x i8] c"\AA\AA\AA\AA", [4 x i8] c"\AA\AA\AA\AA", i8* inttoptr (i64 -6148914691236517206 to i8*), i8* inttoptr (i64 -6148914691236517206 to i8*), i32 -1431655766, [4 x i8] c"\AA\AA\AA\AA", [3 x { { i32, [4 x i8], i8*, i8* }, [8 x i8] }] [{ { i32, [4 x i8], i8*, i8* }, [8 x i8] } { { i32, [4 x i8], i8*, i8* } { i32 -1431655766, [4 x i8] c"\AA\AA\AA\AA", i8* inttoptr (i64 -6148914691236517206 to i8*), i8* inttoptr (i64 -6148914691236517206 to i8*) }, [8 x i8] c"\AA\AA\AA\AA\AA\AA\AA\AA" }, { { i32, [4 x i8], i8*, i8* }, [8 x i8] } { { i32, [4 x i8], i8*, i8* } { i32 -1431655766, [4 x i8] c"\AA\AA\AA\AA", i8* inttoptr (i64 -6148914691236517206 to i8*), i8* inttoptr (i64 -6148914691236517206 to i8*) }, [8 x i8] c"\AA\AA\AA\AA\AA\AA\AA\AA" }, { { i32, [4 x i8], i8*, i8* }, [8 x i8] } { { i32, [4 x i8], i8*, i8* } { i32 -1431655766, [4 x i8] c"\AA\AA\AA\AA", i8* inttoptr (i64 -6148914691236517206 to i8*), i8* inttoptr (i64 -6148914691236517206 to i8*) }, [8 x i8] c"\AA\AA\AA\AA\AA\AA\AA\AA" }], %struct.skcms_Matrix3x4 { [3 x [4 x float]] [[4 x float] [float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000], [4 x float] [float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000], [4 x float] [float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000]] }, i32 -1431655766, [4 x i8] c"\AA\AA\AA\AA", [3 x { { i32, [4 x i8], i8*, i8* }, [8 x i8] }] [{ { i32, [4 x i8], i8*, i8* }, [8 x i8] } { { i32, [4 x i8], i8*, i8* } { i32 -1431655766, [4 x i8] c"\AA\AA\AA\AA", i8* inttoptr (i64 -6148914691236517206 to i8*), i8* inttoptr (i64 -6148914691236517206 to i8*) }, [8 x i8] c"\AA\AA\AA\AA\AA\AA\AA\AA" }, { { i32, [4 x i8], i8*, i8* }, [8 x i8] } { { i32, [4 x i8], i8*, i8* } { i32 -1431655766, [4 x i8] c"\AA\AA\AA\AA", i8* inttoptr (i64 -6148914691236517206 to i8*), i8* inttoptr (i64 -6148914691236517206 to i8*) }, [8 x i8] c"\AA\AA\AA\AA\AA\AA\AA\AA" }, { { i32, [4 x i8], i8*, i8* }, [8 x i8] } { { i32, [4 x i8], i8*, i8* } { i32 -1431655766, [4 x i8] c"\AA\AA\AA\AA", i8* inttoptr (i64 -6148914691236517206 to i8*), i8* inttoptr (i64 -6148914691236517206 to i8*) }, [8 x i8] c"\AA\AA\AA\AA\AA\AA\AA\AA" }] }, i8 -86, [7 x i8] c"\AA\AA\AA\AA\AA\AA\AA", { i32, [4 x i8], [3 x { { i32, [4 x i8], i8*, i8* }, [8 x i8] }], i32, %struct.skcms_Matrix3x4, [4 x i8], [3 x { { i32, [4 x i8], i8*, i8* }, [8 x i8] }], i32, [4 x i8], i8*, i8*, [4 x { { i32, [4 x i8], i8*, i8* }, [8 x i8] }] } { i32 -1431655766, [4 x i8] c"\AA\AA\AA\AA", [3 x { { i32, [4 x i8], i8*, i8* }, [8 x i8] }] [{ { i32, [4 x i8], i8*, i8* }, [8 x i8] } { { i32, [4 x i8], i8*, i8* } { i32 -1431655766, [4 x i8] c"\AA\AA\AA\AA", i8* inttoptr (i64 -6148914691236517206 to i8*), i8* inttoptr (i64 -6148914691236517206 to i8*) }, [8 x i8] c"\AA\AA\AA\AA\AA\AA\AA\AA" }, { { i32, [4 x i8], i8*, i8* }, [8 x i8] } { { i32, [4 x i8], i8*, i8* } { i32 -1431655766, [4 x i8] c"\AA\AA\AA\AA", i8* inttoptr (i64 -6148914691236517206 to i8*), i8* inttoptr (i64 -6148914691236517206 to i8*) }, [8 x i8] c"\AA\AA\AA\AA\AA\AA\AA\AA" }, { { i32, [4 x i8], i8*, i8* }, [8 x i8] } { { i32, [4 x i8], i8*, i8* } { i32 -1431655766, [4 x i8] c"\AA\AA\AA\AA", i8* inttoptr (i64 -6148914691236517206 to i8*), i8* inttoptr (i64 -6148914691236517206 to i8*) }, [8 x i8] c"\AA\AA\AA\AA\AA\AA\AA\AA" }], i32 -1431655766, %struct.skcms_Matrix3x4 { [3 x [4 x float]] [[4 x float] [float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000], [4 x float] [float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000], [4 x float] [float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000]] }, [4 x i8] c"\AA\AA\AA\AA", [3 x { { i32, [4 x i8], i8*, i8* }, [8 x i8] }] [{ { i32, [4 x i8], i8*, i8* }, [8 x i8] } { { i32, [4 x i8], i8*, i8* } { i32 -1431655766, [4 x i8] c"\AA\AA\AA\AA", i8* inttoptr (i64 -6148914691236517206 to i8*), i8* inttoptr (i64 -6148914691236517206 to i8*) }, [8 x i8] c"\AA\AA\AA\AA\AA\AA\AA\AA" }, { { i32, [4 x i8], i8*, i8* }, [8 x i8] } { { i32, [4 x i8], i8*, i8* } { i32 -1431655766, [4 x i8] c"\AA\AA\AA\AA", i8* inttoptr (i64 -6148914691236517206 to i8*), i8* inttoptr (i64 -6148914691236517206 to i8*) }, [8 x i8] c"\AA\AA\AA\AA\AA\AA\AA\AA" }, { { i32, [4 x i8], i8*, i8* }, [8 x i8] } { { i32, [4 x i8], i8*, i8* } { i32 -1431655766, [4 x i8] c"\AA\AA\AA\AA", i8* inttoptr (i64 -6148914691236517206 to i8*), i8* inttoptr (i64 -6148914691236517206 to i8*) }, [8 x i8] c"\AA\AA\AA\AA\AA\AA\AA\AA" }], i32 -1431655766, [4 x i8] c"\AA\AA\AA\AA", i8* inttoptr (i64 -6148914691236517206 to i8*), i8* inttoptr (i64 -6148914691236517206 to i8*), [4 x { { i32, [4 x i8], i8*, i8* }, [8 x i8] }] [{ { i32, [4 x i8], i8*, i8* }, [8 x i8] } { { i32, [4 x i8], i8*, i8* } { i32 -1431655766, [4 x i8] c"\AA\AA\AA\AA", i8* inttoptr (i64 -6148914691236517206 to i8*), i8* inttoptr (i64 -6148914691236517206 to i8*) }, [8 x i8] c"\AA\AA\AA\AA\AA\AA\AA\AA" }, { { i32, [4 x i8], i8*, i8* }, [8 x i8] } { { i32, [4 x i8], i8*, i8* } { i32 -1431655766, [4 x i8] c"\AA\AA\AA\AA", i8* inttoptr (i64 -6148914691236517206 to i8*), i8* inttoptr (i64 -6148914691236517206 to i8*) }, [8 x i8] c"\AA\AA\AA\AA\AA\AA\AA\AA" }, { { i32, [4 x i8], i8*, i8* }, [8 x i8] } { { i32, [4 x i8], i8*, i8* } { i32 -1431655766, [4 x i8] c"\AA\AA\AA\AA", i8* inttoptr (i64 -6148914691236517206 to i8*), i8* inttoptr (i64 -6148914691236517206 to i8*) }, [8 x i8] c"\AA\AA\AA\AA\AA\AA\AA\AA" }, { { i32, [4 x i8], i8*, i8* }, [8 x i8] } { { i32, [4 x i8], i8*, i8* } { i32 -1431655766, [4 x i8] c"\AA\AA\AA\AA", i8* inttoptr (i64 -6148914691236517206 to i8*), i8* inttoptr (i64 -6148914691236517206 to i8*) }, [8 x i8] c"\AA\AA\AA\AA\AA\AA\AA\AA" }] } }, align 8
@.str = private unnamed_addr constant [3 x i8] c"\FF\0A\00", align 1
@.str.1 = private unnamed_addr constant [13 x i8] c"\00\00\00\0CJXL \0D\0A\87\0A\00", align 1
@_ZTVN5blink12ImageDecoderE = external unnamed_addr constant { [37 x i8*] }, align 8
@.str.2 = private unnamed_addr constant [4 x i8] c"jxl\00", align 1
@.str.3 = private unnamed_addr constant [11 x i8] c"i < size()\00", align 1
@.str.4 = private unnamed_addr constant [55 x i8] c"../../third_party/blink/renderer/platform/wtf/vector.h\00", align 1
@.str.5 = private unnamed_addr constant [32 x i8] c"../../base/memory/ref_counted.h\00", align 1
@.str.6 = private unnamed_addr constant [27 x i8] c"ref_count_.Increment() > 0\00", align 1
@.str.9 = private unnamed_addr constant [44 x i8] c"count <= MaxElementCountInBackingStore<T>()\00", align 1
@.str.10 = private unnamed_addr constant [78 x i8] c"../../third_party/blink/renderer/platform/wtf/allocator/partition_allocator.h\00", align 1
@__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameIfEEPKcv = private unnamed_addr constant [53 x i8] c"const char *WTF::GetStringWithTypeName() [T = float]\00", align 1

@_ZN5blink15JXLImageDecoderC1ENS_12ImageDecoder11AlphaOptionENS1_26HighBitDepthDecodingOptionERKNS_13ColorBehaviorEm = hidden unnamed_addr alias void (%"class.blink::JXLImageDecoder"*, i32, i32, %"class.blink::ColorBehavior"*, i64), void (%"class.blink::JXLImageDecoder"*, i32, i32, %"class.blink::ColorBehavior"*, i64)* @_ZN5blink15JXLImageDecoderC2ENS_12ImageDecoder11AlphaOptionENS1_26HighBitDepthDecodingOptionERKNS_13ColorBehaviorEm

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink15JXLImageDecoderC2ENS_12ImageDecoder11AlphaOptionENS1_26HighBitDepthDecodingOptionERKNS_13ColorBehaviorEm(%"class.blink::JXLImageDecoder"*, i32, i32, %"class.blink::ColorBehavior"* nocapture readonly dereferenceable(4), i64) unnamed_addr #0 align 2 {
  %6 = getelementptr inbounds %"class.blink::JXLImageDecoder", %"class.blink::JXLImageDecoder"* %0, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [37 x i8*] }, { [37 x i8*] }* @_ZTVN5blink12ImageDecoderE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %6, align 8
  %7 = getelementptr inbounds %"class.blink::JXLImageDecoder", %"class.blink::JXLImageDecoder"* %0, i64 0, i32 0, i32 1, i32 0
  store %"class.blink::SegmentReader"* null, %"class.blink::SegmentReader"** %7, align 8
  %8 = getelementptr inbounds %"class.blink::JXLImageDecoder", %"class.blink::JXLImageDecoder"* %0, i64 0, i32 0, i32 2
  %9 = getelementptr inbounds %"class.blink::JXLImageDecoder", %"class.blink::JXLImageDecoder"* %0, i64 0, i32 0, i32 2, i32 0, i32 1, i64 0
  %10 = bitcast %"class.WTF::Vector"* %8 to i8**
  store i8* %9, i8** %10, align 8
  %11 = getelementptr inbounds %"class.blink::JXLImageDecoder", %"class.blink::JXLImageDecoder"* %0, i64 0, i32 0, i32 2, i32 0, i32 0, i32 1
  store i32 1, i32* %11, align 8
  %12 = getelementptr inbounds %"class.blink::JXLImageDecoder", %"class.blink::JXLImageDecoder"* %0, i64 0, i32 0, i32 2, i32 0, i32 0, i32 2
  store i32 0, i32* %12, align 4
  %13 = getelementptr inbounds %"class.blink::JXLImageDecoder", %"class.blink::JXLImageDecoder"* %0, i64 0, i32 0, i32 3
  %14 = icmp eq i32 %1, 0
  %15 = zext i1 %14 to i8
  store i8 %15, i8* %13, align 8
  %16 = getelementptr inbounds %"class.blink::JXLImageDecoder", %"class.blink::JXLImageDecoder"* %0, i64 0, i32 0, i32 4
  store i32 %2, i32* %16, align 4
  %17 = getelementptr inbounds %"class.blink::ColorBehavior", %"class.blink::ColorBehavior"* %3, i64 0, i32 0
  %18 = getelementptr inbounds %"class.blink::JXLImageDecoder", %"class.blink::JXLImageDecoder"* %0, i64 0, i32 0, i32 5, i32 0
  %19 = load i32, i32* %17, align 4
  store i32 %19, i32* %18, align 8
  %20 = getelementptr inbounds %"class.blink::JXLImageDecoder", %"class.blink::JXLImageDecoder"* %0, i64 0, i32 0, i32 6, i32 0
  store i8 1, i8* %20, align 1
  %21 = getelementptr inbounds %"class.blink::JXLImageDecoder", %"class.blink::JXLImageDecoder"* %0, i64 0, i32 0, i32 7, i32 0
  store i32 0, i32* %21, align 4
  %22 = getelementptr inbounds %"class.blink::JXLImageDecoder", %"class.blink::JXLImageDecoder"* %0, i64 0, i32 0, i32 7, i32 1
  store i32 0, i32* %22, align 4
  %23 = getelementptr inbounds %"class.blink::JXLImageDecoder", %"class.blink::JXLImageDecoder"* %0, i64 0, i32 0, i32 8
  store i64 %4, i64* %23, align 8
  %24 = getelementptr inbounds %"class.blink::JXLImageDecoder", %"class.blink::JXLImageDecoder"* %0, i64 0, i32 0, i32 9
  store i8 0, i8* %24, align 8
  %25 = getelementptr inbounds %"class.blink::JXLImageDecoder", %"class.blink::JXLImageDecoder"* %0, i64 0, i32 0, i32 10
  %26 = bitcast %"class.std::__1::unique_ptr"* %25 to i64*
  store i64 0, i64* %26, align 8
  %27 = getelementptr inbounds %"class.blink::JXLImageDecoder", %"class.blink::JXLImageDecoder"* %0, i64 0, i32 0, i32 11
  store i8 0, i8* %27, align 8
  %28 = getelementptr inbounds %"class.blink::JXLImageDecoder", %"class.blink::JXLImageDecoder"* %0, i64 0, i32 0, i32 12, i32 0
  %29 = getelementptr inbounds %"class.blink::JXLImageDecoder", %"class.blink::JXLImageDecoder"* %0, i64 0, i32 0, i32 16
  %30 = getelementptr inbounds %"class.blink::JXLImageDecoder", %"class.blink::JXLImageDecoder"* %0, i64 0, i32 0, i32 19
  %31 = bitcast %"class.std::__1::unique_ptr.22"* %30 to i64*
  store i64 0, i64* %31, align 8
  %32 = bitcast i32* %28 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 4 %32, i8 0, i64 11, i1 false) #13
  %33 = bitcast %"class.std::__1::unique_ptr.9"* %29 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %33, i8 0, i64 17, i1 false) #13
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [37 x i8*] }, { [37 x i8*] }* @_ZTVN5blink15JXLImageDecoderE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %6, align 8
  %34 = getelementptr inbounds %"class.blink::JXLImageDecoder", %"class.blink::JXLImageDecoder"* %0, i64 0, i32 1
  %35 = getelementptr inbounds %"class.blink::JXLImageDecoder", %"class.blink::JXLImageDecoder"* %0, i64 0, i32 8
  store i8 0, i8* %35, align 4
  %36 = getelementptr inbounds %"class.blink::JXLImageDecoder", %"class.blink::JXLImageDecoder"* %0, i64 0, i32 10
  store i64 0, i64* %36, align 8
  %37 = getelementptr inbounds %"class.blink::JXLImageDecoder", %"class.blink::JXLImageDecoder"* %0, i64 0, i32 11
  store i8 0, i8* %37, align 8
  %38 = getelementptr inbounds %"class.blink::JXLImageDecoder", %"class.blink::JXLImageDecoder"* %0, i64 0, i32 12
  store i8 0, i8* %38, align 1
  %39 = getelementptr inbounds %"class.blink::JXLImageDecoder", %"class.blink::JXLImageDecoder"* %0, i64 0, i32 13
  %40 = getelementptr inbounds %"class.blink::JXLImageDecoder", %"class.blink::JXLImageDecoder"* %0, i64 0, i32 7, i32 11
  store i32 0, i32* %40, align 4
  %41 = bitcast %"class.std::__1::unique_ptr.28"* %34 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %41, i8 0, i64 34, i1 false)
  %42 = bitcast i64* %39 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %42, i8 0, i64 24, i1 false)
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink15JXLImageDecoder10DecodeImplEmb(%"class.blink::JXLImageDecoder"*, i64, i1 zeroext) local_unnamed_addr #0 align 2 {
  %4 = alloca %struct.skcms_ICCProfile, align 8
  %5 = alloca %"class.logging::CheckError", align 8
  %6 = alloca %"class.blink::FastSharedBufferReader", align 8
  %7 = alloca i8*, align 8
  %8 = alloca %struct.JxlColorEncoding, align 8
  %9 = alloca %struct.skcms_Matrix3x3, align 4
  %10 = alloca %struct.skcms_TransferFunction, align 4
  %11 = alloca %struct.skcms_ICCProfile, align 8
  %12 = alloca %class.sk_sp.1, align 8
  %13 = alloca i64, align 8
  %14 = alloca %"class.std::__1::vector", align 8
  %15 = alloca %struct.skcms_TransferFunction, align 4
  %16 = alloca %struct.skcms_TransferFunction, align 4
  %17 = alloca %struct.skcms_TransferFunction, align 4
  %18 = alloca [3 x %struct.skcms_TransferFunction], align 4
  %19 = alloca i64, align 8
  %20 = getelementptr inbounds %"class.blink::JXLImageDecoder", %"class.blink::JXLImageDecoder"* %0, i64 0, i32 0
  %21 = getelementptr inbounds %"class.blink::JXLImageDecoder", %"class.blink::JXLImageDecoder"* %0, i64 0, i32 0, i32 15
  %22 = load i8, i8* %21, align 2, !range !2
  %23 = icmp eq i8 %22, 0
  br i1 %23, label %24, label %505

24:                                               ; preds = %3
  %25 = getelementptr inbounds %"class.blink::JXLImageDecoder", %"class.blink::JXLImageDecoder"* %0, i64 0, i32 0, i32 13
  %26 = load i8, i8* %25, align 4, !range !2
  %27 = icmp eq i8 %26, 0
  %28 = xor i1 %2, true
  %29 = or i1 %27, %28
  br i1 %29, label %30, label %505

30:                                               ; preds = %24
  %31 = getelementptr inbounds %"class.blink::JXLImageDecoder", %"class.blink::JXLImageDecoder"* %0, i64 0, i32 11
  %32 = load i8, i8* %31, align 8, !range !2
  %33 = icmp eq i8 %32, 0
  br i1 %33, label %34, label %505

34:                                               ; preds = %30
  %35 = getelementptr inbounds %"class.blink::JXLImageDecoder", %"class.blink::JXLImageDecoder"* %0, i64 0, i32 10
  %36 = load i64, i64* %35, align 8
  %37 = icmp ugt i64 %36, %1
  br i1 %37, label %38, label %45

38:                                               ; preds = %34
  %39 = getelementptr inbounds %"class.blink::JXLImageDecoder", %"class.blink::JXLImageDecoder"* %0, i64 0, i32 0, i32 2
  %40 = trunc i64 %1 to i32
  %41 = tail call dereferenceable(128) %"class.blink::ImageFrame"* @_ZN3WTF6VectorIN5blink10ImageFrameELj1ENS_18PartitionAllocatorEE2atEj(%"class.WTF::Vector"* %39, i32 %40) #13
  %42 = getelementptr inbounds %"class.blink::ImageFrame", %"class.blink::ImageFrame"* %41, i64 0, i32 5
  %43 = load i32, i32* %42, align 8
  %44 = icmp eq i32 %43, 3
  br i1 %44, label %505, label %45

45:                                               ; preds = %38, %34
  %46 = getelementptr inbounds %"class.blink::JXLImageDecoder", %"class.blink::JXLImageDecoder"* %0, i64 0, i32 1
  %47 = getelementptr inbounds %"class.std::__1::unique_ptr.28", %"class.std::__1::unique_ptr.28"* %46, i64 0, i32 0, i32 0, i32 0
  %48 = load %struct.JxlDecoderStruct*, %struct.JxlDecoderStruct** %47, align 8
  %49 = icmp eq %struct.JxlDecoderStruct* %48, null
  br i1 %49, label %50, label %63

50:                                               ; preds = %45
  %51 = tail call %struct.JxlDecoderStruct* @JxlDecoderCreate(%struct.JxlMemoryManagerStruct* null) #13
  %52 = ptrtoint %struct.JxlDecoderStruct* %51 to i64
  %53 = load %struct.JxlDecoderStruct*, %struct.JxlDecoderStruct** %47, align 8
  %54 = bitcast %"class.std::__1::unique_ptr.28"* %46 to i64*
  store i64 %52, i64* %54, align 8
  %55 = icmp eq %struct.JxlDecoderStruct* %53, null
  br i1 %55, label %58, label %56

56:                                               ; preds = %50
  tail call void @JxlDecoderDestroy(%struct.JxlDecoderStruct* nonnull %53) #13
  %57 = load %struct.JxlDecoderStruct*, %struct.JxlDecoderStruct** %47, align 8
  br label %58

58:                                               ; preds = %56, %50
  %59 = phi %struct.JxlDecoderStruct* [ %57, %56 ], [ %51, %50 ]
  %60 = tail call i32 @JxlDecoderSubscribeEvents(%struct.JxlDecoderStruct* %59, i32 4416) #13
  %61 = icmp eq i32 %60, 0
  br i1 %61, label %68, label %62

62:                                               ; preds = %58
  store i8 1, i8* %21, align 2
  br label %505

63:                                               ; preds = %45
  %64 = tail call i64 @JxlDecoderReleaseInput(%struct.JxlDecoderStruct* nonnull %48) #13
  %65 = getelementptr inbounds %"class.blink::JXLImageDecoder", %"class.blink::JXLImageDecoder"* %0, i64 0, i32 2
  %66 = load i64, i64* %65, align 8
  %67 = sub i64 %66, %64
  store i64 %67, i64* %65, align 8
  br label %68

68:                                               ; preds = %58, %63
  %69 = bitcast %"class.blink::FastSharedBufferReader"* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %69) #13
  %70 = getelementptr inbounds %"class.blink::FastSharedBufferReader", %"class.blink::FastSharedBufferReader"* %6, i64 0, i32 0, i32 0
  %71 = getelementptr inbounds %"class.blink::JXLImageDecoder", %"class.blink::JXLImageDecoder"* %0, i64 0, i32 0, i32 1, i32 0
  %72 = bitcast %"class.blink::FastSharedBufferReader"* %6 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %72, i8 -86, i64 32, i1 false)
  %73 = load %"class.blink::SegmentReader"*, %"class.blink::SegmentReader"** %71, align 8
  %74 = icmp eq %"class.blink::SegmentReader"* %73, null
  br i1 %74, label %82, label %75

75:                                               ; preds = %68
  %76 = getelementptr inbounds %"class.blink::SegmentReader", %"class.blink::SegmentReader"* %73, i64 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %77 = atomicrmw add i32* %76, i32 1 monotonic
  %78 = icmp sgt i32 %77, 0
  br i1 %78, label %82, label %79

79:                                               ; preds = %75
  %80 = bitcast %"class.logging::CheckError"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %80) #13
  call void @_ZN7logging10CheckError5CheckEPKciS2_(%"class.logging::CheckError"* nonnull sret %5, i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str.5, i64 0, i64 0), i32 211, i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.6, i64 0, i64 0)) #13
  %81 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %5) #13
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %5) #13
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %80) #13
  br label %82

82:                                               ; preds = %68, %75, %79
  call void @_ZN5blink22FastSharedBufferReaderC1E13scoped_refptrINS_13SegmentReaderEE(%"class.blink::FastSharedBufferReader"* nonnull %6, %"class.blink::SegmentReader"* %73) #13
  %83 = load i8, i8* %21, align 2, !range !2
  %84 = icmp eq i8 %83, 0
  br i1 %84, label %85, label %88

85:                                               ; preds = %82
  %86 = load i8, i8* %25, align 4, !range !2
  %87 = icmp ne i8 %86, 0
  br label %88

88:                                               ; preds = %82, %85
  %89 = phi i1 [ false, %82 ], [ %87, %85 ]
  %90 = getelementptr inbounds %"class.blink::JXLImageDecoder", %"class.blink::JXLImageDecoder"* %0, i64 0, i32 8
  %91 = load i8, i8* %90, align 4, !range !2
  %92 = icmp eq i8 %91, 0
  br i1 %92, label %96, label %93

93:                                               ; preds = %88
  %94 = call %"class.blink::ColorProfileTransform"* @_ZN5blink12ImageDecoder14ColorTransformEv(%"class.blink::ImageDecoder"* %20) #13
  %95 = getelementptr inbounds %"class.blink::JXLImageDecoder", %"class.blink::JXLImageDecoder"* %0, i64 0, i32 9
  store %"class.blink::ColorProfileTransform"* %94, %"class.blink::ColorProfileTransform"** %95, align 8
  br label %96

96:                                               ; preds = %88, %93
  %97 = getelementptr inbounds %"class.blink::JXLImageDecoder", %"class.blink::JXLImageDecoder"* %0, i64 0, i32 0, i32 2
  %98 = getelementptr inbounds %"class.blink::JXLImageDecoder", %"class.blink::JXLImageDecoder"* %0, i64 0, i32 7, i32 15
  %99 = bitcast i64* %19 to i8*
  %100 = getelementptr inbounds %"class.blink::JXLImageDecoder", %"class.blink::JXLImageDecoder"* %0, i64 0, i32 7, i32 1
  %101 = getelementptr inbounds %"class.blink::JXLImageDecoder", %"class.blink::JXLImageDecoder"* %0, i64 0, i32 7, i32 2
  %102 = getelementptr inbounds %"class.blink::JXLImageDecoder", %"class.blink::JXLImageDecoder"* %0, i64 0, i32 9
  %103 = bitcast %"class.blink::JXLImageDecoder"* %0 to i8*
  %104 = getelementptr inbounds %"class.blink::JXLImageDecoder", %"class.blink::JXLImageDecoder"* %0, i64 0, i32 0, i32 5, i32 0
  %105 = getelementptr inbounds %"class.blink::JXLImageDecoder", %"class.blink::JXLImageDecoder"* %0, i64 0, i32 7, i32 3
  %106 = getelementptr inbounds %"class.blink::JXLImageDecoder", %"class.blink::JXLImageDecoder"* %0, i64 0, i32 5
  %107 = bitcast %struct.JxlColorEncoding* %8 to i8*
  %108 = getelementptr inbounds %struct.JxlColorEncoding, %struct.JxlColorEncoding* %8, i64 0, i32 7
  %109 = getelementptr inbounds %"class.blink::JXLImageDecoder", %"class.blink::JXLImageDecoder"* %0, i64 0, i32 0, i32 4
  %110 = getelementptr inbounds %"class.blink::JXLImageDecoder", %"class.blink::JXLImageDecoder"* %0, i64 0, i32 6
  %111 = bitcast %struct.skcms_Matrix3x3* %9 to i8*
  %112 = bitcast %struct.skcms_TransferFunction* %10 to i8*
  %113 = getelementptr inbounds %struct.JxlColorEncoding, %struct.JxlColorEncoding* %8, i64 0, i32 1
  %114 = getelementptr inbounds %struct.JxlColorEncoding, %struct.JxlColorEncoding* %8, i64 0, i32 3
  %115 = bitcast i64* %13 to i8*
  %116 = bitcast %"class.std::__1::vector"* %14 to i8*
  %117 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %14, i64 0, i32 0, i32 0
  %118 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %14, i64 0, i32 0, i32 1
  %119 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %14, i64 0, i32 0, i32 2, i32 0, i32 0
  %120 = bitcast i8** %118 to i64*
  %121 = bitcast %struct.skcms_TransferFunction* %15 to i8*
  %122 = bitcast %struct.skcms_TransferFunction* %16 to i8*
  %123 = bitcast %struct.skcms_TransferFunction* %17 to i8*
  %124 = bitcast [3 x %struct.skcms_TransferFunction]* %18 to i8*
  %125 = getelementptr inbounds [3 x %struct.skcms_TransferFunction], [3 x %struct.skcms_TransferFunction]* %18, i64 0, i64 0
  %126 = getelementptr inbounds [3 x %struct.skcms_TransferFunction], [3 x %struct.skcms_TransferFunction]* %18, i64 0, i64 1
  %127 = bitcast %struct.skcms_TransferFunction* %126 to i8*
  %128 = getelementptr inbounds [3 x %struct.skcms_TransferFunction], [3 x %struct.skcms_TransferFunction]* %18, i64 0, i64 2
  %129 = bitcast %struct.skcms_TransferFunction* %128 to i8*
  %130 = getelementptr inbounds [3 x %struct.skcms_TransferFunction], [3 x %struct.skcms_TransferFunction]* %18, i64 0, i64 3
  %131 = bitcast %struct.skcms_ICCProfile* %4 to i8*
  %132 = getelementptr inbounds %struct.skcms_ICCProfile, %struct.skcms_ICCProfile* %4, i64 0, i32 5
  %133 = getelementptr inbounds %struct.skcms_ICCProfile, %struct.skcms_ICCProfile* %4, i64 0, i32 6, i64 0
  %134 = getelementptr inbounds %union.skcms_Curve, %union.skcms_Curve* %133, i64 0, i32 0, i32 0
  %135 = bitcast %union.skcms_Curve* %133 to %struct.anon*
  %136 = getelementptr inbounds %struct.anon, %struct.anon* %135, i64 0, i32 1, i32 0
  %137 = getelementptr inbounds %struct.anon, %struct.anon* %135, i64 0, i32 1, i32 4
  %138 = bitcast float* %137 to i32*
  %139 = getelementptr inbounds %struct.skcms_ICCProfile, %struct.skcms_ICCProfile* %4, i64 0, i32 6, i64 0, i32 1
  %140 = bitcast [8 x i8]* %139 to i32*
  %141 = getelementptr inbounds %struct.skcms_ICCProfile, %struct.skcms_ICCProfile* %4, i64 0, i32 6, i64 0, i32 1, i64 4
  %142 = bitcast i8* %141 to i32*
  %143 = getelementptr inbounds %struct.skcms_ICCProfile, %struct.skcms_ICCProfile* %4, i64 0, i32 6, i64 1
  %144 = getelementptr inbounds %union.skcms_Curve, %union.skcms_Curve* %143, i64 0, i32 0, i32 0
  %145 = bitcast %union.skcms_Curve* %143 to %struct.anon*
  %146 = getelementptr inbounds %struct.anon, %struct.anon* %145, i64 0, i32 1, i32 0
  %147 = getelementptr inbounds %struct.anon, %struct.anon* %145, i64 0, i32 1, i32 4
  %148 = bitcast float* %147 to i32*
  %149 = getelementptr inbounds %struct.skcms_ICCProfile, %struct.skcms_ICCProfile* %4, i64 0, i32 6, i64 1, i32 1
  %150 = bitcast [8 x i8]* %149 to i32*
  %151 = getelementptr inbounds %struct.skcms_ICCProfile, %struct.skcms_ICCProfile* %4, i64 0, i32 6, i64 1, i32 1, i64 4
  %152 = bitcast i8* %151 to i32*
  %153 = getelementptr inbounds %struct.skcms_ICCProfile, %struct.skcms_ICCProfile* %4, i64 0, i32 6, i64 2
  %154 = getelementptr inbounds %union.skcms_Curve, %union.skcms_Curve* %153, i64 0, i32 0, i32 0
  %155 = bitcast %union.skcms_Curve* %153 to %struct.anon*
  %156 = getelementptr inbounds %struct.anon, %struct.anon* %155, i64 0, i32 1, i32 0
  %157 = getelementptr inbounds %struct.anon, %struct.anon* %155, i64 0, i32 1, i32 4
  %158 = bitcast float* %157 to i32*
  %159 = getelementptr inbounds %struct.skcms_ICCProfile, %struct.skcms_ICCProfile* %4, i64 0, i32 6, i64 2, i32 1
  %160 = bitcast [8 x i8]* %159 to i32*
  %161 = getelementptr inbounds %struct.skcms_ICCProfile, %struct.skcms_ICCProfile* %4, i64 0, i32 6, i64 2, i32 1, i64 4
  %162 = bitcast i8* %161 to i32*
  %163 = bitcast %struct.skcms_ICCProfile* %11 to i8*
  %164 = bitcast %class.sk_sp.1* %12 to i8*
  %165 = getelementptr inbounds %class.sk_sp.1, %class.sk_sp.1* %12, i64 0, i32 0
  %166 = getelementptr inbounds %"class.blink::JXLImageDecoder", %"class.blink::JXLImageDecoder"* %0, i64 0, i32 7
  %167 = bitcast %"class.blink::JXLImageDecoder"* %0 to i1 (%"class.blink::ImageDecoder"*)***
  %168 = getelementptr inbounds %"class.blink::JXLImageDecoder", %"class.blink::JXLImageDecoder"* %0, i64 0, i32 0, i32 12
  %169 = bitcast %"class.blink::IntSize"* %168 to i64*
  %170 = getelementptr inbounds %"class.blink::JXLImageDecoder", %"class.blink::JXLImageDecoder"* %0, i64 0, i32 2
  %171 = bitcast i8** %7 to i8*
  %172 = bitcast %struct.skcms_TransferFunction* %10 to i8*
  %173 = bitcast %struct.skcms_TransferFunction* %15 to i8*
  %174 = bitcast %struct.skcms_TransferFunction* %16 to i8*
  %175 = bitcast %struct.skcms_TransferFunction* %17 to i8*
  %176 = bitcast float* %136 to <4 x i32>*
  %177 = bitcast float* %146 to <4 x i32>*
  %178 = bitcast float* %156 to <4 x i32>*
  br label %179

179:                                              ; preds = %446, %96
  br i1 %2, label %180, label %183

180:                                              ; preds = %179
  %181 = load i8, i8* %90, align 4, !range !2
  %182 = icmp eq i8 %181, 0
  br i1 %182, label %183, label %489

183:                                              ; preds = %180, %179
  %184 = load %struct.JxlDecoderStruct*, %struct.JxlDecoderStruct** %47, align 8
  %185 = call i32 @JxlDecoderProcessInput(%struct.JxlDecoderStruct* %184) #13
  switch i32 %185, label %488 [
    i32 1, label %186
    i32 2, label %187
    i32 64, label %215
    i32 256, label %269
    i32 5, label %447
    i32 4096, label %475
    i32 0, label %483
  ]

186:                                              ; preds = %183
  store i8 1, i8* %21, align 2
  br label %489

187:                                              ; preds = %183
  %188 = load %struct.JxlDecoderStruct*, %struct.JxlDecoderStruct** %47, align 8
  %189 = call i64 @JxlDecoderReleaseInput(%struct.JxlDecoderStruct* %188) #13
  %190 = load i64, i64* %170, align 8
  %191 = sub i64 %190, %189
  store i64 %191, i64* %170, align 8
  %192 = load %"class.blink::SegmentReader"*, %"class.blink::SegmentReader"** %70, align 8
  %193 = bitcast %"class.blink::SegmentReader"* %192 to i64 (%"class.blink::SegmentReader"*)***
  %194 = load i64 (%"class.blink::SegmentReader"*)**, i64 (%"class.blink::SegmentReader"*)*** %193, align 8
  %195 = getelementptr inbounds i64 (%"class.blink::SegmentReader"*)*, i64 (%"class.blink::SegmentReader"*)** %194, i64 2
  %196 = load i64 (%"class.blink::SegmentReader"*)*, i64 (%"class.blink::SegmentReader"*)** %195, align 8
  %197 = call i64 %196(%"class.blink::SegmentReader"* %192) #13
  %198 = icmp ult i64 %191, %197
  br i1 %198, label %204, label %199

199:                                              ; preds = %187
  %200 = getelementptr inbounds %"class.blink::JXLImageDecoder", %"class.blink::JXLImageDecoder"* %0, i64 0, i32 0, i32 14
  %201 = load i8, i8* %200, align 1, !range !2
  %202 = icmp eq i8 %201, 0
  br i1 %202, label %489, label %203

203:                                              ; preds = %199
  store i8 1, i8* %21, align 2
  br label %489

204:                                              ; preds = %187
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %171) #13
  store i8* null, i8** %7, align 8
  %205 = load i64, i64* %170, align 8
  %206 = call i64 @_ZNK5blink22FastSharedBufferReader11GetSomeDataERPKcm(%"class.blink::FastSharedBufferReader"* nonnull %6, i8** nonnull dereferenceable(8) %7, i64 %205) #13
  %207 = load %struct.JxlDecoderStruct*, %struct.JxlDecoderStruct** %47, align 8
  %208 = load i8*, i8** %7, align 8
  %209 = call i32 @JxlDecoderSetInput(%struct.JxlDecoderStruct* %207, i8* %208, i64 %206) #13
  %210 = icmp eq i32 %209, 0
  br i1 %210, label %211, label %214

211:                                              ; preds = %204
  %212 = load i64, i64* %170, align 8
  %213 = add i64 %212, %206
  store i64 %213, i64* %170, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %171) #13
  br label %446

214:                                              ; preds = %204
  store i8 1, i8* %21, align 2
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %171) #13
  br label %489

215:                                              ; preds = %183
  %216 = load %struct.JxlDecoderStruct*, %struct.JxlDecoderStruct** %47, align 8
  %217 = call i32 @JxlDecoderGetBasicInfo(%struct.JxlDecoderStruct* %216, %struct.JxlBasicInfo* %166) #13
  %218 = icmp eq i32 %217, 0
  br i1 %218, label %220, label %219

219:                                              ; preds = %215
  store i8 1, i8* %21, align 2
  br label %489

220:                                              ; preds = %215
  br i1 %89, label %446, label %221

221:                                              ; preds = %220
  %222 = load i32, i32* %100, align 4
  %223 = load i32, i32* %101, align 4
  %224 = load i1 (%"class.blink::ImageDecoder"*)**, i1 (%"class.blink::ImageDecoder"*)*** %167, align 8
  %225 = getelementptr inbounds i1 (%"class.blink::ImageDecoder"*)*, i1 (%"class.blink::ImageDecoder"*)** %224, i64 3
  %226 = load i1 (%"class.blink::ImageDecoder"*)*, i1 (%"class.blink::ImageDecoder"*)** %225, align 8
  %227 = call zeroext i1 %226(%"class.blink::ImageDecoder"* %20) #13
  br i1 %227, label %228, label %232

228:                                              ; preds = %221
  %229 = load i32, i32* %109, align 4
  %230 = icmp eq i32 %229, 1
  %231 = select i1 %230, i32 8, i32 4
  br label %232

232:                                              ; preds = %228, %221
  %233 = phi i32 [ 4, %221 ], [ %231, %228 ]
  %234 = lshr i32 %222, 31
  %235 = icmp eq i32 %234, 1
  br i1 %235, label %264, label %236

236:                                              ; preds = %232
  %237 = icmp slt i32 %222, 0
  %238 = sub i32 0, %222
  %239 = select i1 %237, i32 %238, i32 %222
  %240 = call { i32, i1 } @llvm.umul.with.overflow.i32(i32 %239, i32 %223) #13
  %241 = extractvalue { i32, i1 } %240, 1
  %242 = extractvalue { i32, i1 } %240, 0
  %243 = add nuw nsw i32 %234, 2147483647
  %244 = icmp ugt i32 %242, %243
  %245 = or i1 %241, %244
  %246 = sub i32 0, %242
  %247 = select i1 %237, i32 %246, i32 %242
  br i1 %245, label %264, label %248

248:                                              ; preds = %236
  %249 = icmp slt i32 %247, 0
  %250 = sub i32 0, %247
  %251 = select i1 %249, i32 %250, i32 %247
  %252 = call { i32, i1 } @llvm.umul.with.overflow.i32(i32 %251, i32 %233) #13
  %253 = extractvalue { i32, i1 } %252, 1
  %254 = extractvalue { i32, i1 } %252, 0
  %255 = lshr i32 %247, 31
  %256 = add nuw i32 %255, 2147483647
  %257 = icmp ugt i32 %254, %256
  %258 = or i1 %253, %257
  br i1 %258, label %264, label %259

259:                                              ; preds = %248
  %260 = zext i32 %223 to i64
  %261 = shl nuw i64 %260, 32
  %262 = zext i32 %222 to i64
  %263 = or i64 %261, %262
  store i64 %263, i64* %169, align 4
  store i8 1, i8* %25, align 4
  br label %446

264:                                              ; preds = %232, %236, %248
  %265 = load i1 (%"class.blink::ImageDecoder"*)**, i1 (%"class.blink::ImageDecoder"*)*** %167, align 8
  %266 = getelementptr inbounds i1 (%"class.blink::ImageDecoder"*)*, i1 (%"class.blink::ImageDecoder"*)** %265, i64 21
  %267 = load i1 (%"class.blink::ImageDecoder"*)*, i1 (%"class.blink::ImageDecoder"*)** %266, align 8
  %268 = call zeroext i1 %267(%"class.blink::ImageDecoder"* %20) #13
  br i1 %268, label %446, label %489

269:                                              ; preds = %183
  %270 = load i32, i32* %104, align 4
  %271 = icmp eq i32 %270, 0
  br i1 %271, label %272, label %273

272:                                              ; preds = %269
  store i8 1, i8* %90, align 4
  br label %446

273:                                              ; preds = %269
  br i1 %89, label %446, label %274

274:                                              ; preds = %273
  %275 = load i32, i32* %105, align 4
  %276 = icmp ugt i32 %275, 8
  br i1 %276, label %277, label %278

277:                                              ; preds = %274
  store i8 1, i8* %106, align 8
  br label %278

278:                                              ; preds = %277, %274
  call void @llvm.lifetime.start.p0i8(i64 104, i8* nonnull %107) #13
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %107, i8* align 8 bitcast ({ i32, i32, [2 x double], i32, [4 x i8], [2 x double], [2 x double], [2 x double], i32, [4 x i8], double, i32, [4 x i8] }* @__const._ZN5blink15JXLImageDecoder10DecodeImplEmb.color_encoding to i8*), i64 104, i1 false)
  %279 = load %struct.JxlDecoderStruct*, %struct.JxlDecoderStruct** %47, align 8
  %280 = call i32 @JxlDecoderGetColorAsEncodedProfile(%struct.JxlDecoderStruct* %279, %struct.JxlPixelFormat* nonnull @_ZZN5blink15JXLImageDecoder10DecodeImplEmbE6format, i32 0, %struct.JxlColorEncoding* nonnull %8) #13
  %281 = icmp eq i32 %280, 0
  br i1 %281, label %282, label %285

282:                                              ; preds = %278
  %283 = load i32, i32* %108, align 8
  switch i32 %283, label %285 [
    i32 16, label %284
    i32 18, label %284
  ]

284:                                              ; preds = %282, %282
  store i8 1, i8* %106, align 8
  br label %288

285:                                              ; preds = %282, %278
  %286 = load i8, i8* %106, align 8
  %287 = icmp eq i8 %286, 0
  br i1 %287, label %292, label %288

288:                                              ; preds = %284, %285
  %289 = load i32, i32* %109, align 4
  %290 = icmp eq i32 %289, 1
  br i1 %290, label %291, label %292

291:                                              ; preds = %288
  store i8 1, i8* %110, align 1
  br label %292

292:                                              ; preds = %285, %291, %288
  %293 = load %struct.JxlDecoderStruct*, %struct.JxlDecoderStruct** %47, align 8
  %294 = call i32 @JxlDecoderGetColorAsEncodedProfile(%struct.JxlDecoderStruct* %293, %struct.JxlPixelFormat* nonnull @_ZZN5blink15JXLImageDecoder10DecodeImplEmbE6format, i32 1, %struct.JxlColorEncoding* nonnull %8) #13
  %295 = icmp eq i32 %294, 0
  br i1 %295, label %296, label %327

296:                                              ; preds = %292
  call void @llvm.lifetime.start.p0i8(i64 36, i8* nonnull %111) #13
  call void @llvm.memset.p0i8.i64(i8* nonnull align 4 %111, i8 -1, i64 36, i1 false)
  call void @llvm.lifetime.start.p0i8(i64 28, i8* nonnull %112) #13
  call void @llvm.memset.p0i8.i64(i8* nonnull align 4 %172, i8 -1, i64 28, i1 false)
  %297 = load i32, i32* %108, align 8
  switch i32 %297, label %303 [
    i32 16, label %298
    i32 18, label %299
    i32 8, label %301
    i32 13, label %302
  ]

298:                                              ; preds = %296
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %112, i8* align 4 bitcast (%struct.skcms_TransferFunction* @_ZN17SkNamedTransferFnL3kPQE to i8*), i64 28, i1 false)
  br label %303

299:                                              ; preds = %296
  %300 = call zeroext i1 @skcms_TransferFunction_makeScaledHLGish(%struct.skcms_TransferFunction* nonnull %10, float 0x3FB5555560000000, float 2.000000e+00, float 2.000000e+00, float 0x40165E0520000000, float 0x3FD2380400000000, float 0x3FE1EAC9E0000000) #13
  br label %303

301:                                              ; preds = %296
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %112, i8* align 4 bitcast (%struct.skcms_TransferFunction* @_ZN17SkNamedTransferFnL7kLinearE to i8*), i64 28, i1 false)
  br label %303

302:                                              ; preds = %296
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %112, i8* align 4 bitcast (%struct.skcms_TransferFunction* @_ZN17SkNamedTransferFnL5kSRGBE to i8*), i64 28, i1 false)
  br label %303

303:                                              ; preds = %296, %299, %302, %301, %298
  %304 = phi i1 [ true, %298 ], [ true, %299 ], [ true, %301 ], [ true, %302 ], [ false, %296 ]
  %305 = load i32, i32* %113, align 4
  %306 = icmp eq i32 %305, 1
  br i1 %306, label %307, label %322

307:                                              ; preds = %303
  %308 = load i32, i32* %114, align 8
  switch i32 %308, label %322 [
    i32 9, label %309
    i32 1, label %310
  ]

309:                                              ; preds = %307
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %111, i8* align 4 bitcast (%struct.skcms_Matrix3x3* @_ZN12SkNamedGamutL8kRec2020E to i8*), i64 36, i1 false)
  br label %311

310:                                              ; preds = %307
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %111, i8* align 4 bitcast (%struct.skcms_Matrix3x3* @_ZN12SkNamedGamutL5kSRGBE to i8*), i64 36, i1 false)
  br label %311

311:                                              ; preds = %310, %309
  br i1 %304, label %312, label %322

312:                                              ; preds = %311
  call void @llvm.lifetime.start.p0i8(i64 1008, i8* nonnull %163) #13
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %163, i8* align 8 bitcast ({ i8*, i32, i32, i32, i32, i8, [7 x i8], [3 x { { i32, [4 x i8], i8*, i8* }, [8 x i8] }], i8, [3 x i8], %struct.skcms_Matrix3x3, i8, [7 x i8], { i32, [4 x i8], [4 x { { i32, [4 x i8], i8*, i8* }, [8 x i8] }], [4 x i8], [4 x i8], i8*, i8*, i32, [4 x i8], [3 x { { i32, [4 x i8], i8*, i8* }, [8 x i8] }], %struct.skcms_Matrix3x4, i32, [4 x i8], [3 x { { i32, [4 x i8], i8*, i8* }, [8 x i8] }] }, i8, [7 x i8], { i32, [4 x i8], [3 x { { i32, [4 x i8], i8*, i8* }, [8 x i8] }], i32, %struct.skcms_Matrix3x4, [4 x i8], [3 x { { i32, [4 x i8], i8*, i8* }, [8 x i8] }], i32, [4 x i8], i8*, i8*, [4 x { { i32, [4 x i8], i8*, i8* }, [8 x i8] }] } }* @__const._ZN5blink15JXLImageDecoder10DecodeImplEmb.dataProfile to i8*), i64 1008, i1 false)
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %164) #13
  call void @_ZN12SkColorSpace7MakeRGBERK22skcms_TransferFunctionRK15skcms_Matrix3x3(%class.sk_sp.1* nonnull sret %12, %struct.skcms_TransferFunction* nonnull dereferenceable(28) %10, %struct.skcms_Matrix3x3* nonnull dereferenceable(36) %9) #13
  %313 = load %class.SkColorSpace*, %class.SkColorSpace** %165, align 8
  call void @_ZNK12SkColorSpace9toProfileEP16skcms_ICCProfile(%class.SkColorSpace* %313, %struct.skcms_ICCProfile* nonnull %11) #13
  %314 = load %class.SkColorSpace*, %class.SkColorSpace** %165, align 8
  %315 = icmp eq %class.SkColorSpace* %314, null
  br i1 %315, label %323, label %316

316:                                              ; preds = %312
  %317 = getelementptr inbounds %class.SkColorSpace, %class.SkColorSpace* %314, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %318 = atomicrmw add i32* %317, i32 -1 acq_rel
  %319 = icmp eq i32 %318, 1
  br i1 %319, label %320, label %323

320:                                              ; preds = %316
  %321 = bitcast %class.SkColorSpace* %314 to i8*
  call void @_ZdlPv(i8* %321) #14
  br label %323

322:                                              ; preds = %307, %311, %303
  call void @llvm.lifetime.end.p0i8(i64 28, i8* nonnull %112) #13
  call void @llvm.lifetime.end.p0i8(i64 36, i8* nonnull %111) #13
  br label %327

323:                                              ; preds = %320, %316, %312
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %164) #13
  %324 = call noalias i8* @malloc(i64 1016) #13
  %325 = bitcast i8* %324 to %"class.blink::ColorProfile"*
  call void @_ZN5blink12ColorProfileC1ERK16skcms_ICCProfileNSt3__110unique_ptrIA_hNS4_14default_deleteIS6_EEEE(%"class.blink::ColorProfile"* %325, %struct.skcms_ICCProfile* nonnull dereferenceable(1008) %11, i8* null) #13
  %326 = ptrtoint i8* %324 to i64
  call void @llvm.lifetime.end.p0i8(i64 1008, i8* nonnull %163) #13
  call void @llvm.lifetime.end.p0i8(i64 28, i8* nonnull %112) #13
  call void @llvm.lifetime.end.p0i8(i64 36, i8* nonnull %111) #13
  br label %417

327:                                              ; preds = %292, %322
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %115) #13
  store i64 -6148914691236517206, i64* %13, align 8
  %328 = load %struct.JxlDecoderStruct*, %struct.JxlDecoderStruct** %47, align 8
  %329 = call i32 @JxlDecoderGetICCProfileSize(%struct.JxlDecoderStruct* %328, %struct.JxlPixelFormat* nonnull @_ZZN5blink15JXLImageDecoder10DecodeImplEmbE6format, i32 1, i64* nonnull %13) #13
  %330 = icmp eq i32 %329, 0
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %116) #13
  %331 = load i64, i64* %13, align 8
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %116, i8 0, i64 24, i1 false) #13
  %332 = icmp eq i64 %331, 0
  br i1 %332, label %345, label %333

333:                                              ; preds = %327
  %334 = icmp slt i64 %331, 0
  br i1 %334, label %335, label %337

335:                                              ; preds = %333
  %336 = bitcast %"class.std::__1::vector"* %14 to %"class.std::__1::__vector_base_common"*
  call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* nonnull %336) #15
  unreachable

337:                                              ; preds = %333
  %338 = call i8* @_Znwm(i64 %331) #14
  store i8* %338, i8** %117, align 8
  %339 = getelementptr inbounds i8, i8* %338, i64 %331
  store i8* %339, i8** %119, align 8
  %340 = ptrtoint i8* %338 to i64
  %341 = sub i64 %331, %340
  %342 = getelementptr i8, i8* %338, i64 %341
  %343 = ptrtoint i8* %342 to i64
  call void @llvm.memset.p0i8.i64(i8* nonnull align 1 %338, i8 0, i64 %343, i1 false) #13
  %344 = ptrtoint i8* %339 to i64
  store i64 %344, i64* %120, align 8
  br label %345

345:                                              ; preds = %327, %337
  %346 = phi i64 [ 0, %327 ], [ %344, %337 ]
  %347 = phi i8* [ null, %327 ], [ %338, %337 ]
  br i1 %330, label %348, label %409

348:                                              ; preds = %345
  %349 = load %struct.JxlDecoderStruct*, %struct.JxlDecoderStruct** %47, align 8
  %350 = ptrtoint i8* %347 to i64
  %351 = sub i64 %346, %350
  %352 = call i32 @JxlDecoderGetColorAsICCProfile(%struct.JxlDecoderStruct* %349, %struct.JxlPixelFormat* nonnull @_ZZN5blink15JXLImageDecoder10DecodeImplEmbE6format, i32 1, i8* %347, i64 %351) #13
  %353 = icmp eq i32 %352, 0
  br i1 %353, label %354, label %409

354:                                              ; preds = %348
  %355 = load i8*, i8** %117, align 8
  %356 = load i64, i64* %120, align 8
  %357 = ptrtoint i8* %355 to i64
  %358 = sub i64 %356, %357
  %359 = call %"class.blink::ColorProfile"* @_ZN5blink12ColorProfile6CreateEPKvm(i8* %355, i64 %358) #13
  %360 = ptrtoint %"class.blink::ColorProfile"* %359 to i64
  %361 = getelementptr inbounds %"class.blink::ColorProfile", %"class.blink::ColorProfile"* %359, i64 0, i32 0
  call void @llvm.lifetime.start.p0i8(i64 28, i8* nonnull %121) #13
  call void @llvm.memset.p0i8.i64(i8* nonnull align 4 %173, i8 -1, i64 28, i1 false)
  call void @llvm.lifetime.start.p0i8(i64 28, i8* nonnull %122) #13
  call void @llvm.memset.p0i8.i64(i8* nonnull align 4 %174, i8 -1, i64 28, i1 false)
  call void @llvm.lifetime.start.p0i8(i64 28, i8* nonnull %123) #13
  call void @llvm.memset.p0i8.i64(i8* nonnull align 4 %175, i8 -1, i64 28, i1 false)
  %362 = call zeroext i1 @skcms_TransferFunction_makePQish(%struct.skcms_TransferFunction* nonnull %15, float 0xBFEAC00000000000, float 1.000000e+00, float 0x3F89F9B580000000, float 0x4032DA0000000000, float -1.868750e+01, float 0x40191C0D60000000) #13
  %363 = call zeroext i1 @skcms_TransferFunction_makeScaledHLGish(%struct.skcms_TransferFunction* nonnull %16, float 0x3FB5555560000000, float 2.000000e+00, float 2.000000e+00, float 0x40165E0520000000, float 0x3FD2380400000000, float 0x3FE1EAC9E0000000) #13
  %364 = call zeroext i1 @skcms_TransferFunction_makeScaledHLGish(%struct.skcms_TransferFunction* nonnull %17, float 1.000000e+00, float 2.000000e+00, float 2.000000e+00, float 0x40165E0520000000, float 0x3FD2380400000000, float 0x3FE1EAC9E0000000) #13
  call void @llvm.lifetime.start.p0i8(i64 84, i8* nonnull %124) #13
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %124, i8* nonnull align 4 %121, i64 28, i1 false)
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %127, i8* nonnull align 4 %122, i64 28, i1 false)
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %129, i8* nonnull align 4 %123, i64 28, i1 false)
  %365 = bitcast %"class.blink::ColorProfile"* %359 to i8*
  br label %366

366:                                              ; preds = %354, %403
  %367 = phi %struct.skcms_TransferFunction* [ %125, %354 ], [ %405, %403 ]
  %368 = phi i64 [ %360, %354 ], [ %404, %403 ]
  %369 = bitcast %struct.skcms_TransferFunction* %367 to <4 x i32>*
  %370 = load <4 x i32>, <4 x i32>* %369, align 4
  %371 = getelementptr inbounds %struct.skcms_TransferFunction, %struct.skcms_TransferFunction* %367, i64 0, i32 4
  %372 = bitcast float* %371 to i32*
  %373 = load i32, i32* %372, align 4
  %374 = getelementptr inbounds %struct.skcms_TransferFunction, %struct.skcms_TransferFunction* %367, i64 0, i32 5
  %375 = bitcast float* %374 to i32*
  %376 = load i32, i32* %375, align 4
  %377 = getelementptr inbounds %struct.skcms_TransferFunction, %struct.skcms_TransferFunction* %367, i64 0, i32 6
  %378 = bitcast float* %377 to i32*
  %379 = load i32, i32* %378, align 4
  call void @llvm.lifetime.start.p0i8(i64 1008, i8* nonnull %131) #13
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %131, i8* align 8 %365, i64 1008, i1 false) #13
  store i8 1, i8* %132, align 8
  store i32 0, i32* %134, align 8
  store <4 x i32> %370, <4 x i32>* %176, align 4
  store i32 %373, i32* %138, align 4
  store i32 %376, i32* %140, align 8
  store i32 %379, i32* %142, align 4
  store i32 0, i32* %144, align 8
  store <4 x i32> %370, <4 x i32>* %177, align 4
  store i32 %373, i32* %148, align 4
  store i32 %376, i32* %150, align 8
  store i32 %379, i32* %152, align 4
  store i32 0, i32* %154, align 8
  store <4 x i32> %370, <4 x i32>* %178, align 4
  store i32 %373, i32* %158, align 4
  store i32 %376, i32* %160, align 8
  store i32 %379, i32* %162, align 4
  %380 = call zeroext i1 @skcms_ApproximatelyEqualProfiles(%struct.skcms_ICCProfile* %361, %struct.skcms_ICCProfile* nonnull %4) #13
  br i1 %380, label %382, label %381

381:                                              ; preds = %366
  call void @llvm.lifetime.end.p0i8(i64 1008, i8* nonnull %131) #13
  br label %403

382:                                              ; preds = %366
  %383 = call noalias i8* @malloc(i64 1016) #13
  %384 = bitcast i8* %383 to %"class.blink::ColorProfile"*
  call void @_ZN5blink12ColorProfileC1ERK16skcms_ICCProfileNSt3__110unique_ptrIA_hNS4_14default_deleteIS6_EEEE(%"class.blink::ColorProfile"* %384, %struct.skcms_ICCProfile* nonnull dereferenceable(1008) %4, i8* null) #13
  call void @llvm.lifetime.end.p0i8(i64 1008, i8* nonnull %131) #13
  %385 = ptrtoint i8* %383 to i64
  %386 = icmp eq i8* %383, null
  br i1 %386, label %388, label %387

387:                                              ; preds = %382
  store i8 1, i8* %106, align 8
  br label %388

388:                                              ; preds = %382, %387
  %389 = phi i64 [ %385, %387 ], [ %368, %382 ]
  %390 = phi i64 [ %368, %387 ], [ %385, %382 ]
  %391 = phi i32 [ 5, %387 ], [ 0, %382 ]
  %392 = icmp eq i64 %390, 0
  br i1 %392, label %401, label %393

393:                                              ; preds = %388
  %394 = inttoptr i64 %390 to %"class.blink::ColorProfile"*
  %395 = getelementptr inbounds %"class.blink::ColorProfile", %"class.blink::ColorProfile"* %394, i64 0, i32 1, i32 0, i32 0, i32 0
  %396 = load i8*, i8** %395, align 8
  store i8* null, i8** %395, align 8
  %397 = icmp eq i8* %396, null
  br i1 %397, label %399, label %398

398:                                              ; preds = %393
  call void @_ZdaPv(i8* nonnull %396) #14
  br label %399

399:                                              ; preds = %398, %393
  %400 = inttoptr i64 %390 to i8*
  call void @free(i8* %400) #13
  br label %401

401:                                              ; preds = %388, %399
  %402 = icmp eq i32 %391, 0
  br i1 %402, label %403, label %407

403:                                              ; preds = %381, %401
  %404 = phi i64 [ %368, %381 ], [ %389, %401 ]
  %405 = getelementptr inbounds %struct.skcms_TransferFunction, %struct.skcms_TransferFunction* %367, i64 1
  %406 = icmp eq %struct.skcms_TransferFunction* %405, %130
  br i1 %406, label %407, label %366

407:                                              ; preds = %403, %401
  %408 = phi i64 [ %404, %403 ], [ %389, %401 ]
  call void @llvm.lifetime.end.p0i8(i64 84, i8* nonnull %124) #13
  call void @llvm.lifetime.end.p0i8(i64 28, i8* nonnull %123) #13
  call void @llvm.lifetime.end.p0i8(i64 28, i8* nonnull %122) #13
  call void @llvm.lifetime.end.p0i8(i64 28, i8* nonnull %121) #13
  br label %409

409:                                              ; preds = %407, %348, %345
  %410 = phi i64 [ %408, %407 ], [ 0, %348 ], [ 0, %345 ]
  %411 = phi i8 [ 1, %407 ], [ 0, %348 ], [ 0, %345 ]
  %412 = load i8*, i8** %117, align 8
  %413 = icmp eq i8* %412, null
  br i1 %413, label %416, label %414

414:                                              ; preds = %409
  %415 = ptrtoint i8* %412 to i64
  store i64 %415, i64* %120, align 8
  call void @_ZdlPv(i8* nonnull %412) #14
  br label %416

416:                                              ; preds = %409, %414
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %116) #13
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %115) #13
  br label %417

417:                                              ; preds = %323, %416
  %418 = phi i64 [ %410, %416 ], [ %326, %323 ]
  %419 = phi i8 [ %411, %416 ], [ 1, %323 ]
  %420 = load i8, i8* %106, align 8, !range !2
  %421 = icmp eq i8 %420, 0
  br i1 %421, label %426, label %422

422:                                              ; preds = %417
  %423 = load i32, i32* %109, align 4
  %424 = icmp eq i32 %423, 1
  br i1 %424, label %425, label %426

425:                                              ; preds = %422
  store i8 1, i8* %110, align 1
  br label %426

426:                                              ; preds = %417, %425, %422
  %427 = and i8 %419, 1
  %428 = icmp eq i8 %427, 0
  br i1 %428, label %435, label %429

429:                                              ; preds = %426
  %430 = inttoptr i64 %418 to %"class.blink::ColorProfile"*
  %431 = getelementptr inbounds %"class.blink::ColorProfile", %"class.blink::ColorProfile"* %430, i64 0, i32 0, i32 2
  %432 = load i32, i32* %431, align 4
  %433 = icmp eq i32 %432, 1380401696
  br i1 %433, label %434, label %435

434:                                              ; preds = %429
  call void @_ZN5blink12ImageDecoder23SetEmbeddedColorProfileENSt3__110unique_ptrINS_12ColorProfileENS1_14default_deleteIS3_EEEE(%"class.blink::ImageDecoder"* %20, %"class.blink::ColorProfile"* %430) #13
  store i8 1, i8* %90, align 4
  br label %445

435:                                              ; preds = %426, %429
  store i8 1, i8* %90, align 4
  %436 = icmp eq i64 %418, 0
  br i1 %436, label %445, label %437

437:                                              ; preds = %435
  %438 = inttoptr i64 %418 to %"class.blink::ColorProfile"*
  %439 = getelementptr inbounds %"class.blink::ColorProfile", %"class.blink::ColorProfile"* %438, i64 0, i32 1, i32 0, i32 0, i32 0
  %440 = load i8*, i8** %439, align 8
  store i8* null, i8** %439, align 8
  %441 = icmp eq i8* %440, null
  br i1 %441, label %443, label %442

442:                                              ; preds = %437
  call void @_ZdaPv(i8* nonnull %440) #14
  br label %443

443:                                              ; preds = %442, %437
  %444 = inttoptr i64 %418 to i8*
  call void @free(i8* %444) #13
  br label %445

445:                                              ; preds = %434, %435, %443
  call void @llvm.lifetime.end.p0i8(i64 104, i8* nonnull %107) #13
  br label %446

446:                                              ; preds = %445, %264, %220, %211, %259, %474, %475, %272, %273
  br label %179

447:                                              ; preds = %183
  %448 = load i64, i64* %35, align 8
  %449 = add i64 %448, 1
  store i64 %449, i64* %35, align 8
  %450 = trunc i64 %448 to i32
  %451 = call dereferenceable(128) %"class.blink::ImageFrame"* @_ZN3WTF6VectorIN5blink10ImageFrameELj1ENS_18PartitionAllocatorEE2atEj(%"class.WTF::Vector"* %97, i32 %450) #13
  %452 = call zeroext i1 @_ZN5blink12ImageDecoder15InitFrameBufferEm(%"class.blink::ImageDecoder"* %20, i64 %448) #13
  br i1 %452, label %454, label %453

453:                                              ; preds = %447
  store i8 1, i8* %21, align 2
  br label %489

454:                                              ; preds = %447
  %455 = load i32, i32* %98, align 4
  %456 = icmp ne i32 %455, 0
  call void @_ZN5blink10ImageFrame11SetHasAlphaEb(%"class.blink::ImageFrame"* %451, i1 zeroext %456) #13
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %99) #13
  store i64 -6148914691236517206, i64* %19, align 8
  %457 = load %struct.JxlDecoderStruct*, %struct.JxlDecoderStruct** %47, align 8
  %458 = call i32 @JxlDecoderImageOutBufferSize(%struct.JxlDecoderStruct* %457, %struct.JxlPixelFormat* nonnull @_ZZN5blink15JXLImageDecoder10DecodeImplEmbE6format, i64* nonnull %19) #13
  %459 = icmp eq i32 %458, 0
  br i1 %459, label %460, label %473

460:                                              ; preds = %454
  %461 = load i64, i64* %19, align 8
  %462 = load i32, i32* %100, align 4
  %463 = load i32, i32* %101, align 4
  %464 = shl i32 %462, 4
  %465 = mul i32 %464, %463
  %466 = zext i32 %465 to i64
  %467 = icmp eq i64 %461, %466
  br i1 %467, label %468, label %473

468:                                              ; preds = %460
  %469 = call %"class.blink::ColorProfileTransform"* @_ZN5blink12ImageDecoder14ColorTransformEv(%"class.blink::ImageDecoder"* %20) #13
  store %"class.blink::ColorProfileTransform"* %469, %"class.blink::ColorProfileTransform"** %102, align 8
  %470 = load %struct.JxlDecoderStruct*, %struct.JxlDecoderStruct** %47, align 8
  %471 = call i32 @JxlDecoderSetImageOutCallback(%struct.JxlDecoderStruct* %470, %struct.JxlPixelFormat* nonnull @_ZZN5blink15JXLImageDecoder10DecodeImplEmbE6format, void (i8*, i64, i64, i64, i8*)* nonnull @"_ZZN5blink15JXLImageDecoder10DecodeImplEmbEN3$_08__invokeEPvmmmPKv", i8* %103) #13
  %472 = icmp eq i32 %471, 0
  br i1 %472, label %474, label %473

473:                                              ; preds = %468, %460, %454
  store i8 1, i8* %21, align 2
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %99) #13
  br label %489

474:                                              ; preds = %468
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %99) #13
  br label %446

475:                                              ; preds = %183
  %476 = load i64, i64* %35, align 8
  %477 = trunc i64 %476 to i32
  %478 = add i32 %477, -1
  %479 = call dereferenceable(128) %"class.blink::ImageFrame"* @_ZN3WTF6VectorIN5blink10ImageFrameELj1ENS_18PartitionAllocatorEE2atEj(%"class.WTF::Vector"* %97, i32 %478) #13
  %480 = getelementptr inbounds %"class.blink::ImageFrame", %"class.blink::ImageFrame"* %479, i64 0, i32 10
  store i8 1, i8* %480, align 1
  call void @_ZN5blink10ImageFrame9SetStatusENS0_6StatusE(%"class.blink::ImageFrame"* %479, i32 3) #13
  %481 = load i64, i64* %35, align 8
  %482 = icmp ugt i64 %481, %1
  br i1 %482, label %489, label %446

483:                                              ; preds = %183
  %484 = load %struct.JxlDecoderStruct*, %struct.JxlDecoderStruct** %47, align 8
  store %struct.JxlDecoderStruct* null, %struct.JxlDecoderStruct** %47, align 8
  %485 = icmp eq %struct.JxlDecoderStruct* %484, null
  br i1 %485, label %487, label %486

486:                                              ; preds = %483
  call void @JxlDecoderDestroy(%struct.JxlDecoderStruct* nonnull %484) #13
  br label %487

487:                                              ; preds = %483, %486
  store i8 1, i8* %31, align 8
  br label %489

488:                                              ; preds = %183
  store i8 1, i8* %21, align 2
  br label %489

489:                                              ; preds = %264, %180, %475, %199, %203, %473, %453, %186, %214, %219, %487, %488
  %490 = load %"class.blink::SegmentReader"*, %"class.blink::SegmentReader"** %70, align 8
  %491 = icmp eq %"class.blink::SegmentReader"* %490, null
  br i1 %491, label %504, label %492

492:                                              ; preds = %489
  %493 = getelementptr inbounds %"class.blink::SegmentReader", %"class.blink::SegmentReader"* %490, i64 0, i32 1, i32 0
  %494 = getelementptr inbounds %"class.base::RefCountedThreadSafe", %"class.base::RefCountedThreadSafe"* %493, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %495 = atomicrmw sub i32* %494, i32 1 acq_rel
  %496 = icmp eq i32 %495, 1
  br i1 %496, label %497, label %504

497:                                              ; preds = %492
  %498 = getelementptr inbounds %"class.base::RefCountedThreadSafe", %"class.base::RefCountedThreadSafe"* %493, i64 -2
  %499 = bitcast %"class.base::RefCountedThreadSafe"* %498 to %"class.blink::SegmentReader"*
  %500 = bitcast %"class.base::RefCountedThreadSafe"* %498 to void (%"class.blink::SegmentReader"*)***
  %501 = load void (%"class.blink::SegmentReader"*)**, void (%"class.blink::SegmentReader"*)*** %500, align 8
  %502 = getelementptr inbounds void (%"class.blink::SegmentReader"*)*, void (%"class.blink::SegmentReader"*)** %501, i64 1
  %503 = load void (%"class.blink::SegmentReader"*)*, void (%"class.blink::SegmentReader"*)** %502, align 8
  call void %503(%"class.blink::SegmentReader"* nonnull %499) #13
  br label %504

504:                                              ; preds = %489, %492, %497
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %69) #13
  br label %505

505:                                              ; preds = %3, %62, %24, %30, %38, %504
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

declare i32 @JxlDecoderSubscribeEvents(%struct.JxlDecoderStruct*, i32) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZN5blink12ImageDecoder9SetFailedEv(%"class.blink::ImageDecoder"*) unnamed_addr #0 comdat align 2 {
  %2 = getelementptr inbounds %"class.blink::ImageDecoder", %"class.blink::ImageDecoder"* %0, i64 0, i32 15
  store i8 1, i8* %2, align 2
  ret i1 false
}

declare i64 @JxlDecoderReleaseInput(%struct.JxlDecoderStruct*) local_unnamed_addr #2

declare void @_ZN5blink22FastSharedBufferReaderC1E13scoped_refptrINS_13SegmentReaderEE(%"class.blink::FastSharedBufferReader"*, %"class.blink::SegmentReader"*) unnamed_addr #2

declare %"class.blink::ColorProfileTransform"* @_ZN5blink12ImageDecoder14ColorTransformEv(%"class.blink::ImageDecoder"*) local_unnamed_addr #2

declare i32 @JxlDecoderProcessInput(%struct.JxlDecoderStruct*) local_unnamed_addr #2

declare i64 @_ZNK5blink22FastSharedBufferReader11GetSomeDataERPKcm(%"class.blink::FastSharedBufferReader"*, i8** dereferenceable(8), i64) local_unnamed_addr #2

declare i32 @JxlDecoderSetInput(%struct.JxlDecoderStruct*, i8*, i64) local_unnamed_addr #2

declare i32 @JxlDecoderGetBasicInfo(%struct.JxlDecoderStruct*, %struct.JxlBasicInfo*) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZN5blink12ImageDecoder7SetSizeEjj(%"class.blink::ImageDecoder"*, i32, i32) unnamed_addr #0 comdat align 2 {
  %4 = bitcast %"class.blink::ImageDecoder"* %0 to i1 (%"class.blink::ImageDecoder"*)***
  %5 = load i1 (%"class.blink::ImageDecoder"*)**, i1 (%"class.blink::ImageDecoder"*)*** %4, align 8
  %6 = getelementptr inbounds i1 (%"class.blink::ImageDecoder"*)*, i1 (%"class.blink::ImageDecoder"*)** %5, i64 3
  %7 = load i1 (%"class.blink::ImageDecoder"*)*, i1 (%"class.blink::ImageDecoder"*)** %6, align 8
  %8 = tail call zeroext i1 %7(%"class.blink::ImageDecoder"* %0) #13
  br i1 %8, label %9, label %14

9:                                                ; preds = %3
  %10 = getelementptr inbounds %"class.blink::ImageDecoder", %"class.blink::ImageDecoder"* %0, i64 0, i32 4
  %11 = load i32, i32* %10, align 4
  %12 = icmp eq i32 %11, 1
  %13 = select i1 %12, i32 8, i32 4
  br label %14

14:                                               ; preds = %9, %3
  %15 = phi i32 [ 4, %3 ], [ %13, %9 ]
  %16 = lshr i32 %1, 31
  %17 = icmp eq i32 %16, 1
  br i1 %17, label %41, label %18

18:                                               ; preds = %14
  %19 = icmp slt i32 %1, 0
  %20 = sub i32 0, %1
  %21 = select i1 %19, i32 %20, i32 %1
  %22 = tail call { i32, i1 } @llvm.umul.with.overflow.i32(i32 %21, i32 %2) #13
  %23 = extractvalue { i32, i1 } %22, 1
  %24 = extractvalue { i32, i1 } %22, 0
  %25 = add nuw nsw i32 %16, 2147483647
  %26 = icmp ugt i32 %24, %25
  %27 = or i1 %23, %26
  %28 = sub i32 0, %24
  %29 = select i1 %19, i32 %28, i32 %24
  br i1 %27, label %41, label %30

30:                                               ; preds = %18
  %31 = icmp slt i32 %29, 0
  %32 = sub i32 0, %29
  %33 = select i1 %31, i32 %32, i32 %29
  %34 = tail call { i32, i1 } @llvm.umul.with.overflow.i32(i32 %33, i32 %15) #13
  %35 = extractvalue { i32, i1 } %34, 1
  %36 = extractvalue { i32, i1 } %34, 0
  %37 = lshr i32 %29, 31
  %38 = add nuw i32 %37, 2147483647
  %39 = icmp ugt i32 %36, %38
  %40 = or i1 %35, %39
  br i1 %40, label %41, label %46

41:                                               ; preds = %14, %18, %30
  %42 = load i1 (%"class.blink::ImageDecoder"*)**, i1 (%"class.blink::ImageDecoder"*)*** %4, align 8
  %43 = getelementptr inbounds i1 (%"class.blink::ImageDecoder"*)*, i1 (%"class.blink::ImageDecoder"*)** %42, i64 21
  %44 = load i1 (%"class.blink::ImageDecoder"*)*, i1 (%"class.blink::ImageDecoder"*)** %43, align 8
  %45 = tail call zeroext i1 %44(%"class.blink::ImageDecoder"* %0) #13
  br label %54

46:                                               ; preds = %30
  %47 = getelementptr inbounds %"class.blink::ImageDecoder", %"class.blink::ImageDecoder"* %0, i64 0, i32 12
  %48 = bitcast %"class.blink::IntSize"* %47 to i64*
  %49 = zext i32 %2 to i64
  %50 = shl nuw i64 %49, 32
  %51 = zext i32 %1 to i64
  %52 = or i64 %50, %51
  store i64 %52, i64* %48, align 4
  %53 = getelementptr inbounds %"class.blink::ImageDecoder", %"class.blink::ImageDecoder"* %0, i64 0, i32 13
  store i8 1, i8* %53, align 4
  br label %54

54:                                               ; preds = %46, %41
  %55 = phi i1 [ %45, %41 ], [ true, %46 ]
  ret i1 %55
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #1

declare i32 @JxlDecoderGetColorAsEncodedProfile(%struct.JxlDecoderStruct*, %struct.JxlPixelFormat*, i32, %struct.JxlColorEncoding*) local_unnamed_addr #2

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

declare void @_ZN12SkColorSpace7MakeRGBERK22skcms_TransferFunctionRK15skcms_Matrix3x3(%class.sk_sp.1* sret, %struct.skcms_TransferFunction* dereferenceable(28), %struct.skcms_Matrix3x3* dereferenceable(36)) local_unnamed_addr #2

declare void @_ZNK12SkColorSpace9toProfileEP16skcms_ICCProfile(%class.SkColorSpace*, %struct.skcms_ICCProfile*) local_unnamed_addr #2

declare i32 @JxlDecoderGetICCProfileSize(%struct.JxlDecoderStruct*, %struct.JxlPixelFormat*, i32, i64*) local_unnamed_addr #2

declare i32 @JxlDecoderGetColorAsICCProfile(%struct.JxlDecoderStruct*, %struct.JxlPixelFormat*, i32, i8*, i64) local_unnamed_addr #2

declare %"class.blink::ColorProfile"* @_ZN5blink12ColorProfile6CreateEPKvm(i8*, i64) local_unnamed_addr #2

declare void @_ZN5blink12ImageDecoder23SetEmbeddedColorProfileENSt3__110unique_ptrINS_12ColorProfileENS1_14default_deleteIS3_EEEE(%"class.blink::ImageDecoder"*, %"class.blink::ColorProfile"*) local_unnamed_addr #2

declare zeroext i1 @_ZN5blink12ImageDecoder15InitFrameBufferEm(%"class.blink::ImageDecoder"*, i64) local_unnamed_addr #2

declare void @_ZN5blink10ImageFrame11SetHasAlphaEb(%"class.blink::ImageFrame"*, i1 zeroext) local_unnamed_addr #2

declare i32 @JxlDecoderImageOutBufferSize(%struct.JxlDecoderStruct*, %struct.JxlPixelFormat*, i64*) local_unnamed_addr #2

declare i32 @JxlDecoderSetImageOutCallback(%struct.JxlDecoderStruct*, %struct.JxlPixelFormat*, void (i8*, i64, i64, i64, i8*)*, i8*) local_unnamed_addr #2

declare void @_ZN5blink10ImageFrame9SetStatusENS0_6StatusE(%"class.blink::ImageFrame"*, i32) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN5blink15JXLImageDecoder19MatchesJXLSignatureERKNS_22FastSharedBufferReaderE(%"class.blink::FastSharedBufferReader"* dereferenceable(32)) local_unnamed_addr #0 align 2 {
  %2 = alloca [12 x i8], align 1
  %3 = getelementptr inbounds [12 x i8], [12 x i8]* %2, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 12, i8* nonnull %3) #13
  %4 = getelementptr inbounds %"class.blink::FastSharedBufferReader", %"class.blink::FastSharedBufferReader"* %0, i64 0, i32 0, i32 0
  call void @llvm.memset.p0i8.i64(i8* nonnull align 1 %3, i8 -86, i64 12, i1 false)
  %5 = load %"class.blink::SegmentReader"*, %"class.blink::SegmentReader"** %4, align 8
  %6 = bitcast %"class.blink::SegmentReader"* %5 to i64 (%"class.blink::SegmentReader"*)***
  %7 = load i64 (%"class.blink::SegmentReader"*)**, i64 (%"class.blink::SegmentReader"*)*** %6, align 8
  %8 = getelementptr inbounds i64 (%"class.blink::SegmentReader"*)*, i64 (%"class.blink::SegmentReader"*)** %7, i64 2
  %9 = load i64 (%"class.blink::SegmentReader"*)*, i64 (%"class.blink::SegmentReader"*)** %8, align 8
  %10 = tail call i64 %9(%"class.blink::SegmentReader"* %5) #13
  %11 = icmp ult i64 %10, 12
  br i1 %11, label %19, label %12

12:                                               ; preds = %1
  %13 = call i8* @_ZNK5blink22FastSharedBufferReader18GetConsecutiveDataEmmPc(%"class.blink::FastSharedBufferReader"* %0, i64 0, i64 12, i8* nonnull %3) #13
  %14 = call i32 @bcmp(i8* %13, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i64 0, i64 0), i64 2)
  %15 = icmp eq i32 %14, 0
  br i1 %15, label %19, label %16

16:                                               ; preds = %12
  %17 = call i32 @bcmp(i8* %13, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.1, i64 0, i64 0), i64 12)
  %18 = icmp eq i32 %17, 0
  br label %19

19:                                               ; preds = %12, %16, %1
  %20 = phi i1 [ false, %1 ], [ true, %12 ], [ %18, %16 ]
  call void @llvm.lifetime.end.p0i8(i64 12, i8* nonnull %3) #13
  ret i1 %20
}

declare i8* @_ZNK5blink22FastSharedBufferReader18GetConsecutiveDataEmmPc(%"class.blink::FastSharedBufferReader"*, i64, i64, i8*) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink15JXLImageDecoder18InitializeNewFrameEm(%"class.blink::JXLImageDecoder"*, i64) unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.blink::JXLImageDecoder", %"class.blink::JXLImageDecoder"* %0, i64 0, i32 0, i32 2
  %4 = trunc i64 %1 to i32
  %5 = tail call dereferenceable(128) %"class.blink::ImageFrame"* @_ZN3WTF6VectorIN5blink10ImageFrameELj1ENS_18PartitionAllocatorEE2atEj(%"class.WTF::Vector"* %3, i32 %4) #13
  %6 = getelementptr inbounds %"class.blink::JXLImageDecoder", %"class.blink::JXLImageDecoder"* %0, i64 0, i32 6
  %7 = load i8, i8* %6, align 1, !range !2
  %8 = icmp eq i8 %7, 0
  br i1 %8, label %11, label %9

9:                                                ; preds = %2
  %10 = getelementptr inbounds %"class.blink::ImageFrame", %"class.blink::ImageFrame"* %5, i64 0, i32 3
  store i32 1, i32* %10, align 4
  br label %11

11:                                               ; preds = %2, %9
  %12 = getelementptr inbounds %"class.blink::JXLImageDecoder", %"class.blink::JXLImageDecoder"* %0, i64 0, i32 7, i32 15
  %13 = load i32, i32* %12, align 4
  %14 = icmp ne i32 %13, 0
  tail call void @_ZN5blink10ImageFrame11SetHasAlphaEb(%"class.blink::ImageFrame"* %5, i1 zeroext %14) #13
  %15 = getelementptr inbounds %"class.blink::JXLImageDecoder", %"class.blink::JXLImageDecoder"* %0, i64 0, i32 0, i32 3
  %16 = load i8, i8* %15, align 8, !range !2
  %17 = getelementptr inbounds %"class.blink::ImageFrame", %"class.blink::ImageFrame"* %5, i64 0, i32 9
  store i8 %16, i8* %17, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZNK5blink15JXLImageDecoder22FrameIsReceivedAtIndexEm(%"class.blink::JXLImageDecoder"*, i64) unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.blink::JXLImageDecoder", %"class.blink::JXLImageDecoder"* %0, i64 0, i32 0, i32 14
  %4 = load i8, i8* %3, align 1, !range !2
  %5 = icmp eq i8 %4, 0
  br i1 %5, label %6, label %17

6:                                                ; preds = %2
  %7 = getelementptr inbounds %"class.blink::JXLImageDecoder", %"class.blink::JXLImageDecoder"* %0, i64 0, i32 10
  %8 = load i64, i64* %7, align 8
  %9 = icmp ugt i64 %8, %1
  br i1 %9, label %10, label %17

10:                                               ; preds = %6
  %11 = getelementptr inbounds %"class.blink::JXLImageDecoder", %"class.blink::JXLImageDecoder"* %0, i64 0, i32 0, i32 2
  %12 = trunc i64 %1 to i32
  %13 = tail call dereferenceable(128) %"class.blink::ImageFrame"* @_ZNK3WTF6VectorIN5blink10ImageFrameELj1ENS_18PartitionAllocatorEE2atEj(%"class.WTF::Vector"* %11, i32 %12) #13
  %14 = getelementptr inbounds %"class.blink::ImageFrame", %"class.blink::ImageFrame"* %13, i64 0, i32 5
  %15 = load i32, i32* %14, align 8
  %16 = icmp eq i32 %15, 3
  br label %17

17:                                               ; preds = %2, %6, %10
  %18 = phi i1 [ true, %2 ], [ false, %6 ], [ %16, %10 ]
  ret i1 %18
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden i32 @_ZNK5blink15JXLImageDecoder15RepetitionCountEv(%"class.blink::JXLImageDecoder"* nocapture readonly) unnamed_addr #3 align 2 {
  %2 = getelementptr inbounds %"class.blink::JXLImageDecoder", %"class.blink::JXLImageDecoder"* %0, i64 0, i32 7, i32 11
  %3 = load i32, i32* %2, align 4
  %4 = icmp eq i32 %3, 0
  br i1 %4, label %10, label %5

5:                                                ; preds = %1
  %6 = getelementptr inbounds %"class.blink::JXLImageDecoder", %"class.blink::JXLImageDecoder"* %0, i64 0, i32 7, i32 19, i32 2
  %7 = load i32, i32* %6, align 4
  switch i32 %7, label %9 [
    i32 0, label %10
    i32 1, label %8
  ]

8:                                                ; preds = %5
  br label %10

9:                                                ; preds = %5
  br label %10

10:                                               ; preds = %5, %1, %9, %8
  %11 = phi i32 [ 0, %8 ], [ %7, %9 ], [ -2, %1 ], [ -1, %5 ]
  ret i32 %11
}

; Function Attrs: nounwind ssp uwtable
define hidden i64 @_ZNK5blink15JXLImageDecoder20FrameDurationAtIndexEm(%"class.blink::JXLImageDecoder"*, i64) unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.blink::JXLImageDecoder", %"class.blink::JXLImageDecoder"* %0, i64 0, i32 14, i32 0, i32 0, i32 2
  %4 = load i32, i32* %3, align 4
  %5 = zext i32 %4 to i64
  %6 = icmp ugt i64 %5, %1
  br i1 %6, label %7, label %21

7:                                                ; preds = %2
  %8 = getelementptr inbounds %"class.blink::JXLImageDecoder", %"class.blink::JXLImageDecoder"* %0, i64 0, i32 14
  %9 = trunc i64 %1 to i32
  %10 = tail call dereferenceable(4) float* @_ZNK3WTF6VectorIfLj0ENS_18PartitionAllocatorEE2atEj(%"class.WTF::Vector.32"* %8, i32 %9) #13
  %11 = load float, float* %10, align 4
  %12 = fpext float %11 to double
  %13 = fmul double %12, 1.000000e+06
  %14 = fcmp ult double %13, 0xC3E0000000000000
  %15 = fcmp ugt double %13, 0x43DFFFFFFFFFFFFF
  %16 = fcmp ogt double %13, 0xC3E0000000000000
  %17 = select i1 %16, double %13, double 0xC3E0000000000000
  %18 = fptosi double %17 to i64
  %19 = select i1 %14, i64 0, i64 9223372036854775807
  %20 = select i1 %15, i64 %19, i64 %18
  br label %21

21:                                               ; preds = %2, %7
  %22 = phi i64 [ %20, %7 ], [ 0, %2 ]
  ret i64 %22
}

; Function Attrs: nounwind ssp uwtable
define hidden i64 @_ZN5blink15JXLImageDecoder16DecodeFrameCountEv(%"class.blink::JXLImageDecoder"*) unnamed_addr #0 align 2 {
  %2 = alloca %"class.logging::CheckError", align 8
  %3 = alloca %"class.blink::FastSharedBufferReader", align 8
  %4 = alloca i8*, align 8
  %5 = alloca %struct.JxlFrameHeader, align 4
  %6 = alloca float, align 4
  tail call void @_ZN5blink15JXLImageDecoder10DecodeImplEmb(%"class.blink::JXLImageDecoder"* %0, i64 0, i1 zeroext true) #13
  %7 = getelementptr inbounds %"class.blink::JXLImageDecoder", %"class.blink::JXLImageDecoder"* %0, i64 0, i32 7, i32 11
  %8 = load i32, i32* %7, align 4
  %9 = icmp eq i32 %8, 0
  br i1 %9, label %10, label %57

10:                                               ; preds = %1
  %11 = getelementptr inbounds %"class.blink::JXLImageDecoder", %"class.blink::JXLImageDecoder"* %0, i64 0, i32 14
  %12 = getelementptr inbounds %"class.blink::JXLImageDecoder", %"class.blink::JXLImageDecoder"* %0, i64 0, i32 14, i32 0, i32 0, i32 2
  %13 = load i32, i32* %12, align 4
  %14 = icmp eq i32 %13, 0
  br i1 %14, label %15, label %55

15:                                               ; preds = %10
  %16 = getelementptr inbounds %"class.blink::JXLImageDecoder", %"class.blink::JXLImageDecoder"* %0, i64 0, i32 14, i32 0, i32 0, i32 1
  %17 = load i32, i32* %16, align 8
  %18 = icmp eq i32 %17, 0
  br i1 %18, label %19, label %46

19:                                               ; preds = %15
  %20 = getelementptr inbounds %"class.WTF::Vector.32", %"class.WTF::Vector.32"* %11, i64 0, i32 0, i32 0, i32 0
  %21 = load float*, float** %20, align 8
  %22 = icmp eq float* %21, null
  %23 = tail call i64 @_ZN3WTF18PartitionAllocator13QuantizedSizeIfEEmm(i64 4) #13
  %24 = tail call i8* @_ZN3WTF18PartitionAllocator15AllocateBackingEmPKc(i64 %23, i8* getelementptr inbounds ([53 x i8], [53 x i8]* @__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameIfEEPKcv, i64 0, i64 0)) #13
  %25 = ptrtoint i8* %24 to i64
  br i1 %22, label %26, label %28

26:                                               ; preds = %19
  %27 = bitcast %"class.WTF::Vector.32"* %11 to i64*
  store atomic i64 %25, i64* %27 monotonic, align 8
  br label %43

28:                                               ; preds = %19
  %29 = load float*, float** %20, align 8
  %30 = icmp ne i8* %24, null
  %31 = icmp ne float* %29, null
  %32 = and i1 %30, %31
  %33 = bitcast float* %29 to i8*
  br i1 %32, label %34, label %40, !prof !3

34:                                               ; preds = %28
  %35 = load i32, i32* %12, align 4
  %36 = zext i32 %35 to i64
  %37 = shl nuw nsw i64 %36, 2
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %24, i8* nonnull align 4 %33, i64 %37, i1 false) #13
  %38 = bitcast %"class.WTF::Vector.32"* %11 to i8**
  %39 = load i8*, i8** %38, align 8
  br label %40

40:                                               ; preds = %34, %28
  %41 = phi i8* [ %39, %34 ], [ %33, %28 ]
  tail call void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8* %41) #13
  %42 = bitcast %"class.WTF::Vector.32"* %11 to i64*
  store atomic i64 %25, i64* %42 monotonic, align 8
  br label %43

43:                                               ; preds = %26, %40
  %44 = lshr i64 %23, 2
  %45 = trunc i64 %44 to i32
  store i32 %45, i32* %16, align 8
  br label %46

46:                                               ; preds = %43, %15
  %47 = getelementptr inbounds %"class.WTF::Vector.32", %"class.WTF::Vector.32"* %11, i64 0, i32 0, i32 0, i32 0
  %48 = load float*, float** %47, align 8
  %49 = load i32, i32* %12, align 4
  %50 = zext i32 %49 to i64
  %51 = getelementptr inbounds float, float* %48, i64 %50
  %52 = bitcast float* %51 to i8*
  %53 = shl nuw nsw i64 %50, 2
  %54 = sub nsw i64 4, %53
  tail call void @llvm.memset.p0i8.i64(i8* align 4 %52, i8 0, i64 %54, i1 false) #13
  br label %55

55:                                               ; preds = %10, %46
  store i32 1, i32* %12, align 4
  %56 = tail call dereferenceable(4) float* @_ZN3WTF6VectorIfLj0ENS_18PartitionAllocatorEE2atEj(%"class.WTF::Vector.32"* %11, i32 0) #13
  store float 0.000000e+00, float* %56, align 4
  br label %252

57:                                               ; preds = %1
  %58 = bitcast %"class.blink::FastSharedBufferReader"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %58) #13
  %59 = getelementptr inbounds %"class.blink::FastSharedBufferReader", %"class.blink::FastSharedBufferReader"* %3, i64 0, i32 0, i32 0
  %60 = getelementptr inbounds %"class.blink::JXLImageDecoder", %"class.blink::JXLImageDecoder"* %0, i64 0, i32 0, i32 1, i32 0
  %61 = bitcast %"class.blink::FastSharedBufferReader"* %3 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %61, i8 -86, i64 32, i1 false)
  %62 = load %"class.blink::SegmentReader"*, %"class.blink::SegmentReader"** %60, align 8
  %63 = icmp eq %"class.blink::SegmentReader"* %62, null
  br i1 %63, label %71, label %64

64:                                               ; preds = %57
  %65 = getelementptr inbounds %"class.blink::SegmentReader", %"class.blink::SegmentReader"* %62, i64 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %66 = atomicrmw add i32* %65, i32 1 monotonic
  %67 = icmp sgt i32 %66, 0
  br i1 %67, label %71, label %68

68:                                               ; preds = %64
  %69 = bitcast %"class.logging::CheckError"* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %69) #13
  call void @_ZN7logging10CheckError5CheckEPKciS2_(%"class.logging::CheckError"* nonnull sret %2, i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str.5, i64 0, i64 0), i32 211, i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.6, i64 0, i64 0)) #13
  %70 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %2) #13
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %2) #13
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %69) #13
  br label %71

71:                                               ; preds = %57, %64, %68
  call void @_ZN5blink22FastSharedBufferReaderC1E13scoped_refptrINS_13SegmentReaderEE(%"class.blink::FastSharedBufferReader"* nonnull %3, %"class.blink::SegmentReader"* %62) #13
  %72 = getelementptr inbounds %"class.blink::JXLImageDecoder", %"class.blink::JXLImageDecoder"* %0, i64 0, i32 11
  %73 = load i8, i8* %72, align 8, !range !2
  %74 = icmp eq i8 %73, 0
  br i1 %74, label %75, label %89

75:                                               ; preds = %71
  %76 = getelementptr inbounds %"class.blink::JXLImageDecoder", %"class.blink::JXLImageDecoder"* %0, i64 0, i32 13
  %77 = load i64, i64* %76, align 8
  %78 = load %"class.blink::SegmentReader"*, %"class.blink::SegmentReader"** %59, align 8
  %79 = bitcast %"class.blink::SegmentReader"* %78 to i64 (%"class.blink::SegmentReader"*)***
  %80 = load i64 (%"class.blink::SegmentReader"*)**, i64 (%"class.blink::SegmentReader"*)*** %79, align 8
  %81 = getelementptr inbounds i64 (%"class.blink::SegmentReader"*)*, i64 (%"class.blink::SegmentReader"*)** %80, i64 2
  %82 = load i64 (%"class.blink::SegmentReader"*)*, i64 (%"class.blink::SegmentReader"*)** %81, align 8
  %83 = call i64 %82(%"class.blink::SegmentReader"* %78) #13
  %84 = icmp eq i64 %77, %83
  br i1 %84, label %89, label %85

85:                                               ; preds = %75
  %86 = getelementptr inbounds %"class.blink::JXLImageDecoder", %"class.blink::JXLImageDecoder"* %0, i64 0, i32 12
  %87 = load i8, i8* %86, align 1, !range !2
  %88 = icmp eq i8 %87, 0
  br i1 %88, label %92, label %89

89:                                               ; preds = %85, %71, %75
  %90 = getelementptr inbounds %"class.blink::JXLImageDecoder", %"class.blink::JXLImageDecoder"* %0, i64 0, i32 0, i32 2, i32 0, i32 0, i32 2
  %91 = load i32, i32* %90, align 4
  br label %234

92:                                               ; preds = %85
  %93 = load %"class.blink::SegmentReader"*, %"class.blink::SegmentReader"** %59, align 8
  %94 = bitcast %"class.blink::SegmentReader"* %93 to i64 (%"class.blink::SegmentReader"*)***
  %95 = load i64 (%"class.blink::SegmentReader"*)**, i64 (%"class.blink::SegmentReader"*)*** %94, align 8
  %96 = getelementptr inbounds i64 (%"class.blink::SegmentReader"*)*, i64 (%"class.blink::SegmentReader"*)** %95, i64 2
  %97 = load i64 (%"class.blink::SegmentReader"*)*, i64 (%"class.blink::SegmentReader"*)** %96, align 8
  %98 = call i64 %97(%"class.blink::SegmentReader"* %93) #13
  store i64 %98, i64* %76, align 8
  %99 = getelementptr inbounds %"class.blink::JXLImageDecoder", %"class.blink::JXLImageDecoder"* %0, i64 0, i32 3
  %100 = getelementptr inbounds %"class.std::__1::unique_ptr.28", %"class.std::__1::unique_ptr.28"* %99, i64 0, i32 0, i32 0, i32 0
  %101 = load %struct.JxlDecoderStruct*, %struct.JxlDecoderStruct** %100, align 8
  %102 = icmp eq %struct.JxlDecoderStruct* %101, null
  br i1 %102, label %103, label %134

103:                                              ; preds = %92
  %104 = getelementptr inbounds %"class.blink::JXLImageDecoder", %"class.blink::JXLImageDecoder"* %0, i64 0, i32 14
  %105 = getelementptr inbounds %"class.blink::JXLImageDecoder", %"class.blink::JXLImageDecoder"* %0, i64 0, i32 14, i32 0, i32 0, i32 1
  %106 = load i32, i32* %105, align 8
  %107 = icmp eq i32 %106, 0
  br i1 %107, label %117, label %108

108:                                              ; preds = %103
  %109 = getelementptr inbounds %"class.blink::JXLImageDecoder", %"class.blink::JXLImageDecoder"* %0, i64 0, i32 14, i32 0, i32 0, i32 2
  %110 = load i32, i32* %109, align 4
  %111 = icmp eq i32 %110, 0
  br i1 %111, label %113, label %112

112:                                              ; preds = %108
  store i32 0, i32* %109, align 4
  br label %113

113:                                              ; preds = %112, %108
  %114 = bitcast %"class.WTF::Vector.32"* %104 to i8**
  %115 = load i8*, i8** %114, align 8
  %116 = bitcast %"class.WTF::Vector.32"* %104 to i64*
  store atomic i64 0, i64* %116 monotonic, align 8
  store i32 0, i32* %105, align 8
  call void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8* %115) #13
  br label %117

117:                                              ; preds = %103, %113
  %118 = call %struct.JxlDecoderStruct* @JxlDecoderCreate(%struct.JxlMemoryManagerStruct* null) #13
  %119 = ptrtoint %struct.JxlDecoderStruct* %118 to i64
  %120 = load %struct.JxlDecoderStruct*, %struct.JxlDecoderStruct** %100, align 8
  %121 = bitcast %"class.std::__1::unique_ptr.28"* %99 to i64*
  store i64 %119, i64* %121, align 8
  %122 = icmp eq %struct.JxlDecoderStruct* %120, null
  br i1 %122, label %125, label %123

123:                                              ; preds = %117
  call void @JxlDecoderDestroy(%struct.JxlDecoderStruct* nonnull %120) #13
  %124 = load %struct.JxlDecoderStruct*, %struct.JxlDecoderStruct** %100, align 8
  br label %125

125:                                              ; preds = %123, %117
  %126 = phi %struct.JxlDecoderStruct* [ %124, %123 ], [ %118, %117 ]
  %127 = getelementptr inbounds %"class.blink::JXLImageDecoder", %"class.blink::JXLImageDecoder"* %0, i64 0, i32 4
  store i64 0, i64* %127, align 8
  %128 = call i32 @JxlDecoderSubscribeEvents(%struct.JxlDecoderStruct* %126, i32 1024) #13
  %129 = icmp eq i32 %128, 0
  br i1 %129, label %134, label %130

130:                                              ; preds = %125
  %131 = getelementptr inbounds %"class.blink::JXLImageDecoder", %"class.blink::JXLImageDecoder"* %0, i64 0, i32 0, i32 15
  store i8 1, i8* %131, align 2
  %132 = getelementptr inbounds %"class.blink::JXLImageDecoder", %"class.blink::JXLImageDecoder"* %0, i64 0, i32 0, i32 2, i32 0, i32 0, i32 2
  %133 = load i32, i32* %132, align 4
  br label %234

134:                                              ; preds = %125, %92
  %135 = bitcast %struct.JxlFrameHeader* %5 to i8*
  %136 = getelementptr inbounds %struct.JxlFrameHeader, %struct.JxlFrameHeader* %5, i64 0, i32 0
  %137 = getelementptr inbounds %struct.JxlFrameHeader, %struct.JxlFrameHeader* %5, i64 0, i32 3
  %138 = getelementptr inbounds %"class.blink::JXLImageDecoder", %"class.blink::JXLImageDecoder"* %0, i64 0, i32 14
  %139 = bitcast float* %6 to i8*
  %140 = getelementptr inbounds %"class.blink::JXLImageDecoder", %"class.blink::JXLImageDecoder"* %0, i64 0, i32 7, i32 19, i32 1
  %141 = getelementptr inbounds %"class.blink::JXLImageDecoder", %"class.blink::JXLImageDecoder"* %0, i64 0, i32 7, i32 19, i32 0
  %142 = getelementptr inbounds %"class.blink::JXLImageDecoder", %"class.blink::JXLImageDecoder"* %0, i64 0, i32 14, i32 0, i32 0, i32 2
  %143 = getelementptr inbounds %"class.blink::JXLImageDecoder", %"class.blink::JXLImageDecoder"* %0, i64 0, i32 14, i32 0, i32 0, i32 1
  %144 = getelementptr inbounds %"class.WTF::Vector.32", %"class.WTF::Vector.32"* %138, i64 0, i32 0, i32 0, i32 0
  %145 = getelementptr inbounds %"class.blink::JXLImageDecoder", %"class.blink::JXLImageDecoder"* %0, i64 0, i32 4
  %146 = bitcast i8** %4 to i8*
  %147 = bitcast %struct.JxlFrameHeader* %5 to i8*
  br label %148

148:                                              ; preds = %187, %134
  %149 = load %struct.JxlDecoderStruct*, %struct.JxlDecoderStruct** %100, align 8
  %150 = call i32 @JxlDecoderProcessInput(%struct.JxlDecoderStruct* %149) #13
  switch i32 %150, label %230 [
    i32 1, label %151
    i32 2, label %155
    i32 1024, label %192
    i32 0, label %224
  ]

151:                                              ; preds = %148
  %152 = getelementptr inbounds %"class.blink::JXLImageDecoder", %"class.blink::JXLImageDecoder"* %0, i64 0, i32 0, i32 15
  store i8 1, i8* %152, align 2
  %153 = getelementptr inbounds %"class.blink::JXLImageDecoder", %"class.blink::JXLImageDecoder"* %0, i64 0, i32 0, i32 2, i32 0, i32 0, i32 2
  %154 = load i32, i32* %153, align 4
  br label %234

155:                                              ; preds = %148
  %156 = load %struct.JxlDecoderStruct*, %struct.JxlDecoderStruct** %100, align 8
  %157 = call i64 @JxlDecoderReleaseInput(%struct.JxlDecoderStruct* %156) #13
  %158 = load i64, i64* %145, align 8
  %159 = sub i64 %158, %157
  store i64 %159, i64* %145, align 8
  %160 = load %"class.blink::SegmentReader"*, %"class.blink::SegmentReader"** %59, align 8
  %161 = bitcast %"class.blink::SegmentReader"* %160 to i64 (%"class.blink::SegmentReader"*)***
  %162 = load i64 (%"class.blink::SegmentReader"*)**, i64 (%"class.blink::SegmentReader"*)*** %161, align 8
  %163 = getelementptr inbounds i64 (%"class.blink::SegmentReader"*)*, i64 (%"class.blink::SegmentReader"*)** %162, i64 2
  %164 = load i64 (%"class.blink::SegmentReader"*)*, i64 (%"class.blink::SegmentReader"*)** %163, align 8
  %165 = call i64 %164(%"class.blink::SegmentReader"* %160) #13
  %166 = icmp ult i64 %159, %165
  br i1 %166, label %177, label %167

167:                                              ; preds = %155
  %168 = getelementptr inbounds %"class.blink::JXLImageDecoder", %"class.blink::JXLImageDecoder"* %0, i64 0, i32 0, i32 14
  %169 = load i8, i8* %168, align 1, !range !2
  %170 = icmp eq i8 %169, 0
  br i1 %170, label %175, label %171

171:                                              ; preds = %167
  %172 = getelementptr inbounds %"class.blink::JXLImageDecoder", %"class.blink::JXLImageDecoder"* %0, i64 0, i32 0, i32 15
  store i8 1, i8* %172, align 2
  %173 = getelementptr inbounds %"class.blink::JXLImageDecoder", %"class.blink::JXLImageDecoder"* %0, i64 0, i32 0, i32 2, i32 0, i32 0, i32 2
  %174 = load i32, i32* %173, align 4
  br label %234

175:                                              ; preds = %167
  %176 = load i32, i32* %142, align 4
  br label %234

177:                                              ; preds = %155
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %146) #13
  store i8* null, i8** %4, align 8
  %178 = load i64, i64* %145, align 8
  %179 = call i64 @_ZNK5blink22FastSharedBufferReader11GetSomeDataERPKcm(%"class.blink::FastSharedBufferReader"* nonnull %3, i8** nonnull dereferenceable(8) %4, i64 %178) #13
  %180 = load %struct.JxlDecoderStruct*, %struct.JxlDecoderStruct** %100, align 8
  %181 = load i8*, i8** %4, align 8
  %182 = call i32 @JxlDecoderSetInput(%struct.JxlDecoderStruct* %180, i8* %181, i64 %179) #13
  %183 = icmp eq i32 %182, 0
  br i1 %183, label %184, label %188

184:                                              ; preds = %177
  %185 = load i64, i64* %145, align 8
  %186 = add i64 %185, %179
  store i64 %186, i64* %145, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %146) #13
  br label %187

187:                                              ; preds = %184, %219
  br label %148

188:                                              ; preds = %177
  %189 = getelementptr inbounds %"class.blink::JXLImageDecoder", %"class.blink::JXLImageDecoder"* %0, i64 0, i32 0, i32 15
  store i8 1, i8* %189, align 2
  %190 = getelementptr inbounds %"class.blink::JXLImageDecoder", %"class.blink::JXLImageDecoder"* %0, i64 0, i32 0, i32 2, i32 0, i32 0, i32 2
  %191 = load i32, i32* %190, align 4
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %146) #13
  br label %234

192:                                              ; preds = %148
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %135) #13
  call void @llvm.memset.p0i8.i64(i8* nonnull align 4 %147, i8 -86, i64 16, i1 false)
  %193 = load %struct.JxlDecoderStruct*, %struct.JxlDecoderStruct** %100, align 8
  %194 = call i32 @JxlDecoderGetFrameHeader(%struct.JxlDecoderStruct* %193, %struct.JxlFrameHeader* nonnull %5) #13
  %195 = icmp eq i32 %194, 0
  br i1 %195, label %196, label %220

196:                                              ; preds = %192
  %197 = load i32, i32* %137, align 4
  %198 = icmp eq i32 %197, 0
  br i1 %198, label %200, label %199

199:                                              ; preds = %196
  store i8 1, i8* %86, align 1
  br label %200

200:                                              ; preds = %196, %199
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %139) #13
  %201 = load i32, i32* %136, align 4
  %202 = uitofp i32 %201 to float
  %203 = load i32, i32* %140, align 4
  %204 = uitofp i32 %203 to float
  %205 = fmul float %202, %204
  %206 = load i32, i32* %141, align 4
  %207 = uitofp i32 %206 to float
  %208 = fdiv float %205, %207
  store float %208, float* %6, align 4
  %209 = load i32, i32* %142, align 4
  %210 = load i32, i32* %143, align 8
  %211 = icmp eq i32 %209, %210
  br i1 %211, label %218, label %212, !prof !4

212:                                              ; preds = %200
  %213 = load float*, float** %144, align 8
  %214 = zext i32 %209 to i64
  %215 = getelementptr inbounds float, float* %213, i64 %214
  store float %208, float* %215, align 4
  %216 = load i32, i32* %142, align 4
  %217 = add i32 %216, 1
  store i32 %217, i32* %142, align 4
  br label %219

218:                                              ; preds = %200
  call void @_ZN3WTF6VectorIfLj0ENS_18PartitionAllocatorEE14AppendSlowCaseIfEEvOT_(%"class.WTF::Vector.32"* %138, float* nonnull dereferenceable(4) %6) #13
  br label %219

219:                                              ; preds = %218, %212
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %139) #13
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %135) #13
  br label %187

220:                                              ; preds = %192
  %221 = getelementptr inbounds %"class.blink::JXLImageDecoder", %"class.blink::JXLImageDecoder"* %0, i64 0, i32 0, i32 15
  store i8 1, i8* %221, align 2
  %222 = getelementptr inbounds %"class.blink::JXLImageDecoder", %"class.blink::JXLImageDecoder"* %0, i64 0, i32 0, i32 2, i32 0, i32 0, i32 2
  %223 = load i32, i32* %222, align 4
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %135) #13
  br label %234

224:                                              ; preds = %148
  %225 = load %struct.JxlDecoderStruct*, %struct.JxlDecoderStruct** %100, align 8
  store %struct.JxlDecoderStruct* null, %struct.JxlDecoderStruct** %100, align 8
  %226 = icmp eq %struct.JxlDecoderStruct* %225, null
  br i1 %226, label %228, label %227

227:                                              ; preds = %224
  call void @JxlDecoderDestroy(%struct.JxlDecoderStruct* nonnull %225) #13
  br label %228

228:                                              ; preds = %224, %227
  %229 = load i32, i32* %142, align 4
  br label %234

230:                                              ; preds = %148
  %231 = getelementptr inbounds %"class.blink::JXLImageDecoder", %"class.blink::JXLImageDecoder"* %0, i64 0, i32 0, i32 15
  store i8 1, i8* %231, align 2
  %232 = getelementptr inbounds %"class.blink::JXLImageDecoder", %"class.blink::JXLImageDecoder"* %0, i64 0, i32 0, i32 2, i32 0, i32 0, i32 2
  %233 = load i32, i32* %232, align 4
  br label %234

234:                                              ; preds = %151, %188, %175, %171, %220, %228, %230, %130, %89
  %235 = phi i32 [ %91, %89 ], [ %133, %130 ], [ %154, %151 ], [ %191, %188 ], [ %176, %175 ], [ %174, %171 ], [ %223, %220 ], [ %229, %228 ], [ %233, %230 ]
  %236 = zext i32 %235 to i64
  %237 = load %"class.blink::SegmentReader"*, %"class.blink::SegmentReader"** %59, align 8
  %238 = icmp eq %"class.blink::SegmentReader"* %237, null
  br i1 %238, label %251, label %239

239:                                              ; preds = %234
  %240 = getelementptr inbounds %"class.blink::SegmentReader", %"class.blink::SegmentReader"* %237, i64 0, i32 1, i32 0
  %241 = getelementptr inbounds %"class.base::RefCountedThreadSafe", %"class.base::RefCountedThreadSafe"* %240, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %242 = atomicrmw sub i32* %241, i32 1 acq_rel
  %243 = icmp eq i32 %242, 1
  br i1 %243, label %244, label %251

244:                                              ; preds = %239
  %245 = getelementptr inbounds %"class.base::RefCountedThreadSafe", %"class.base::RefCountedThreadSafe"* %240, i64 -2
  %246 = bitcast %"class.base::RefCountedThreadSafe"* %245 to %"class.blink::SegmentReader"*
  %247 = bitcast %"class.base::RefCountedThreadSafe"* %245 to void (%"class.blink::SegmentReader"*)***
  %248 = load void (%"class.blink::SegmentReader"*)**, void (%"class.blink::SegmentReader"*)*** %247, align 8
  %249 = getelementptr inbounds void (%"class.blink::SegmentReader"*)*, void (%"class.blink::SegmentReader"*)** %248, i64 1
  %250 = load void (%"class.blink::SegmentReader"*)*, void (%"class.blink::SegmentReader"*)** %249, align 8
  call void %250(%"class.blink::SegmentReader"* nonnull %246) #13
  br label %251

251:                                              ; preds = %234, %239, %244
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %58) #13
  br label %252

252:                                              ; preds = %251, %55
  %253 = phi i64 [ %236, %251 ], [ 1, %55 ]
  ret i64 %253
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN5blink15JXLImageDecoder10DecodeSizeEv(%"class.blink::JXLImageDecoder"*) unnamed_addr #0 comdat align 2 {
  tail call void @_ZN5blink15JXLImageDecoder10DecodeImplEmb(%"class.blink::JXLImageDecoder"* %0, i64 0, i1 zeroext true)
  ret void
}

declare i32 @JxlDecoderGetFrameHeader(%struct.JxlDecoderStruct*, %struct.JxlFrameHeader*) local_unnamed_addr #2

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZN5blink15JXLImageDecoderD2Ev(%"class.blink::JXLImageDecoder"*) unnamed_addr #4 comdat align 2 {
  %2 = getelementptr inbounds %"class.blink::JXLImageDecoder", %"class.blink::JXLImageDecoder"* %0, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [37 x i8*] }, { [37 x i8*] }* @_ZTVN5blink15JXLImageDecoderE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8
  %3 = getelementptr inbounds %"class.blink::JXLImageDecoder", %"class.blink::JXLImageDecoder"* %0, i64 0, i32 14, i32 0, i32 0, i32 0
  %4 = load float*, float** %3, align 8
  %5 = icmp eq float* %4, null
  %6 = bitcast float* %4 to i8*
  br i1 %5, label %13, label %7, !prof !3

7:                                                ; preds = %1
  %8 = getelementptr inbounds %"class.blink::JXLImageDecoder", %"class.blink::JXLImageDecoder"* %0, i64 0, i32 14, i32 0, i32 0, i32 2
  %9 = load i32, i32* %8, align 4
  %10 = icmp eq i32 %9, 0
  br i1 %10, label %12, label %11, !prof !4

11:                                               ; preds = %7
  store i32 0, i32* %8, align 4
  br label %12

12:                                               ; preds = %11, %7
  tail call void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8* nonnull %6) #13
  store float* null, float** %3, align 8
  br label %13

13:                                               ; preds = %1, %12
  %14 = getelementptr inbounds %"class.blink::JXLImageDecoder", %"class.blink::JXLImageDecoder"* %0, i64 0, i32 3, i32 0, i32 0, i32 0
  %15 = load %struct.JxlDecoderStruct*, %struct.JxlDecoderStruct** %14, align 8
  store %struct.JxlDecoderStruct* null, %struct.JxlDecoderStruct** %14, align 8
  %16 = icmp eq %struct.JxlDecoderStruct* %15, null
  br i1 %16, label %18, label %17

17:                                               ; preds = %13
  tail call void @JxlDecoderDestroy(%struct.JxlDecoderStruct* nonnull %15) #13
  br label %18

18:                                               ; preds = %13, %17
  %19 = getelementptr inbounds %"class.blink::JXLImageDecoder", %"class.blink::JXLImageDecoder"* %0, i64 0, i32 1, i32 0, i32 0, i32 0
  %20 = load %struct.JxlDecoderStruct*, %struct.JxlDecoderStruct** %19, align 8
  store %struct.JxlDecoderStruct* null, %struct.JxlDecoderStruct** %19, align 8
  %21 = icmp eq %struct.JxlDecoderStruct* %20, null
  br i1 %21, label %23, label %22

22:                                               ; preds = %18
  tail call void @JxlDecoderDestroy(%struct.JxlDecoderStruct* nonnull %20) #13
  br label %23

23:                                               ; preds = %18, %22
  %24 = getelementptr inbounds %"class.blink::JXLImageDecoder", %"class.blink::JXLImageDecoder"* %0, i64 0, i32 0
  tail call void @_ZN5blink12ImageDecoderD2Ev(%"class.blink::ImageDecoder"* %24) #13
  ret void
}

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZN5blink15JXLImageDecoderD0Ev(%"class.blink::JXLImageDecoder"*) unnamed_addr #4 comdat align 2 {
  %2 = getelementptr inbounds %"class.blink::JXLImageDecoder", %"class.blink::JXLImageDecoder"* %0, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [37 x i8*] }, { [37 x i8*] }* @_ZTVN5blink15JXLImageDecoderE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8
  %3 = getelementptr inbounds %"class.blink::JXLImageDecoder", %"class.blink::JXLImageDecoder"* %0, i64 0, i32 14, i32 0, i32 0, i32 0
  %4 = load float*, float** %3, align 8
  %5 = icmp eq float* %4, null
  %6 = bitcast float* %4 to i8*
  br i1 %5, label %13, label %7, !prof !3

7:                                                ; preds = %1
  %8 = getelementptr inbounds %"class.blink::JXLImageDecoder", %"class.blink::JXLImageDecoder"* %0, i64 0, i32 14, i32 0, i32 0, i32 2
  %9 = load i32, i32* %8, align 4
  %10 = icmp eq i32 %9, 0
  br i1 %10, label %12, label %11, !prof !4

11:                                               ; preds = %7
  store i32 0, i32* %8, align 4
  br label %12

12:                                               ; preds = %11, %7
  tail call void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8* nonnull %6) #13
  store float* null, float** %3, align 8
  br label %13

13:                                               ; preds = %12, %1
  %14 = getelementptr inbounds %"class.blink::JXLImageDecoder", %"class.blink::JXLImageDecoder"* %0, i64 0, i32 3, i32 0, i32 0, i32 0
  %15 = load %struct.JxlDecoderStruct*, %struct.JxlDecoderStruct** %14, align 8
  store %struct.JxlDecoderStruct* null, %struct.JxlDecoderStruct** %14, align 8
  %16 = icmp eq %struct.JxlDecoderStruct* %15, null
  br i1 %16, label %18, label %17

17:                                               ; preds = %13
  tail call void @JxlDecoderDestroy(%struct.JxlDecoderStruct* nonnull %15) #13
  br label %18

18:                                               ; preds = %17, %13
  %19 = getelementptr inbounds %"class.blink::JXLImageDecoder", %"class.blink::JXLImageDecoder"* %0, i64 0, i32 1, i32 0, i32 0, i32 0
  %20 = load %struct.JxlDecoderStruct*, %struct.JxlDecoderStruct** %19, align 8
  store %struct.JxlDecoderStruct* null, %struct.JxlDecoderStruct** %19, align 8
  %21 = icmp eq %struct.JxlDecoderStruct* %20, null
  br i1 %21, label %23, label %22

22:                                               ; preds = %18
  tail call void @JxlDecoderDestroy(%struct.JxlDecoderStruct* nonnull %20) #13
  br label %23

23:                                               ; preds = %18, %22
  %24 = getelementptr inbounds %"class.blink::JXLImageDecoder", %"class.blink::JXLImageDecoder"* %0, i64 0, i32 0
  tail call void @_ZN5blink12ImageDecoderD2Ev(%"class.blink::ImageDecoder"* %24) #13
  %25 = bitcast %"class.blink::JXLImageDecoder"* %0 to i8*
  tail call void @free(i8* %25) #13
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden %"class.WTF::StringImpl"* @_ZNK5blink15JXLImageDecoder17FilenameExtensionEv(%"class.blink::JXLImageDecoder"*) unnamed_addr #0 comdat align 2 {
  %2 = alloca %"class.WTF::String", align 8
  call void @_ZN3WTF6StringC2EPKcm(%"class.WTF::String"* nonnull %2, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.2, i64 0, i64 0), i64 3) #13
  %3 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %2, i64 0, i32 0, i32 0
  %4 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %3, align 8
  ret %"class.WTF::StringImpl"* %4
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZN5blink15JXLImageDecoder19ImageIsHighBitDepthEv(%"class.blink::JXLImageDecoder"*) unnamed_addr #0 comdat align 2 {
  %2 = getelementptr inbounds %"class.blink::JXLImageDecoder", %"class.blink::JXLImageDecoder"* %0, i64 0, i32 5
  %3 = load i8, i8* %2, align 8, !range !2
  %4 = icmp ne i8 %3, 0
  ret i1 %4
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN5blink12ImageDecoder9OnSetDataEPNS_13SegmentReaderE(%"class.blink::ImageDecoder"*, %"class.blink::SegmentReader"*) unnamed_addr #0 comdat align 2 {
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i64 @_ZNK5blink12ImageDecoder4SizeEv(%"class.blink::ImageDecoder"*) unnamed_addr #0 comdat align 2 {
  %2 = getelementptr inbounds %"class.blink::ImageDecoder", %"class.blink::ImageDecoder"* %0, i64 0, i32 12
  %3 = bitcast %"class.blink::IntSize"* %2 to i64*
  %4 = load i64, i64* %3, align 4
  ret i64 %4
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNK5blink12ImageDecoder23GetSupportedDecodeSizesEv(%"class.WTF::Vector.45"* noalias sret, %"class.blink::ImageDecoder"*) unnamed_addr #0 comdat align 2 {
  %3 = bitcast %"class.WTF::Vector.45"* %0 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %3, i8 0, i64 16, i1 false) #13
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i64 @_ZNK5blink12ImageDecoder11DecodedSizeEv(%"class.blink::ImageDecoder"*) unnamed_addr #0 comdat align 2 {
  %2 = bitcast %"class.blink::ImageDecoder"* %0 to i64 (%"class.blink::ImageDecoder"*)***
  %3 = load i64 (%"class.blink::ImageDecoder"*)**, i64 (%"class.blink::ImageDecoder"*)*** %2, align 8
  %4 = getelementptr inbounds i64 (%"class.blink::ImageDecoder"*)*, i64 (%"class.blink::ImageDecoder"*)** %3, i64 5
  %5 = load i64 (%"class.blink::ImageDecoder"*)*, i64 (%"class.blink::ImageDecoder"*)** %4, align 8
  %6 = tail call i64 %5(%"class.blink::ImageDecoder"* %0) #13
  ret i64 %6
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i32 @_ZNK5blink12ImageDecoder17GetYUVSubsamplingEv(%"class.blink::ImageDecoder"*) unnamed_addr #0 comdat align 2 {
  ret i32 6
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i64 @_ZNK5blink12ImageDecoder14DecodedYUVSizeEN2cc8YUVIndexE(%"class.blink::ImageDecoder"*, i32) unnamed_addr #0 comdat align 2 {
  ret i64 0
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i64 @_ZNK5blink12ImageDecoder20DecodedYUVWidthBytesEN2cc8YUVIndexE(%"class.blink::ImageDecoder"*, i32) unnamed_addr #0 comdat align 2 {
  ret i64 0
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i32 @_ZNK5blink12ImageDecoder16GetYUVColorSpaceEv(%"class.blink::ImageDecoder"*) unnamed_addr #0 comdat align 2 {
  ret i32 10
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i8 @_ZNK5blink12ImageDecoder14GetYUVBitDepthEv(%"class.blink::ImageDecoder"*) unnamed_addr #0 comdat align 2 {
  ret i8 8
}

declare void @_ZNK5blink12ImageDecoder33MakeMetadataForDecodeAccelerationEv(%"struct.cc::ImageHeaderMetadata"* sret, %"class.blink::ImageDecoder"*) unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i64 @_ZNK5blink12ImageDecoder16FrameSizeAtIndexEm(%"class.blink::ImageDecoder"*, i64) unnamed_addr #0 comdat align 2 {
  %3 = bitcast %"class.blink::ImageDecoder"* %0 to i64 (%"class.blink::ImageDecoder"*)***
  %4 = load i64 (%"class.blink::ImageDecoder"*)**, i64 (%"class.blink::ImageDecoder"*)*** %3, align 8
  %5 = getelementptr inbounds i64 (%"class.blink::ImageDecoder"*)*, i64 (%"class.blink::ImageDecoder"*)** %4, i64 5
  %6 = load i64 (%"class.blink::ImageDecoder"*)*, i64 (%"class.blink::ImageDecoder"*)** %5, align 8
  %7 = tail call i64 %6(%"class.blink::ImageDecoder"* %0) #13
  ret i64 %7
}

declare zeroext i1 @_ZNK5blink12ImageDecoder20FrameHasAlphaAtIndexEm(%"class.blink::ImageDecoder"*, i64) unnamed_addr #2

declare i64 @_ZNK5blink12ImageDecoder17FrameBytesAtIndexEm(%"class.blink::ImageDecoder"*, i64) unnamed_addr #2

declare i64 @_ZN5blink12ImageDecoder21ClearCacheExceptFrameEm(%"class.blink::ImageDecoder"*, i64) unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZNK5blink12ImageDecoder7HotSpotERNS_8IntPointE(%"class.blink::ImageDecoder"*, %"class.blink::IntPoint"* dereferenceable(8)) unnamed_addr #0 comdat align 2 {
  ret i1 false
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN5blink12ImageDecoder18SetMemoryAllocatorEPN8SkBitmap9AllocatorE(%"class.blink::ImageDecoder"*, %"class.SkBitmap::Allocator"*) unnamed_addr #0 comdat align 2 {
  %3 = getelementptr inbounds %"class.blink::ImageDecoder", %"class.blink::ImageDecoder"* %0, i64 0, i32 2
  %4 = getelementptr inbounds %"class.blink::ImageDecoder", %"class.blink::ImageDecoder"* %0, i64 0, i32 2, i32 0, i32 0, i32 2
  %5 = load i32, i32* %4, align 4
  %6 = icmp eq i32 %5, 0
  br i1 %6, label %7, label %10

7:                                                ; preds = %2
  %8 = tail call i64 @_ZN5blink12ImageDecoder10FrameCountEv(%"class.blink::ImageDecoder"* %0) #13
  %9 = icmp eq i64 %8, 0
  br i1 %9, label %13, label %10

10:                                               ; preds = %7, %2
  %11 = tail call dereferenceable(128) %"class.blink::ImageFrame"* @_ZN3WTF6VectorIN5blink10ImageFrameELj1ENS_18PartitionAllocatorEE2atEj(%"class.WTF::Vector"* %3, i32 0) #13
  %12 = getelementptr inbounds %"class.blink::ImageFrame", %"class.blink::ImageFrame"* %11, i64 0, i32 1
  store %"class.SkBitmap::Allocator"* %1, %"class.SkBitmap::Allocator"** %12, align 8
  br label %13

13:                                               ; preds = %7, %10
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN5blink12ImageDecoder11DecodeToYUVEv(%"class.blink::ImageDecoder"*) unnamed_addr #0 comdat align 2 {
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZNK5blink12ImageDecoder37ImageHasBothStillAndAnimatedSubImagesEv(%"class.blink::ImageDecoder"*) unnamed_addr #0 comdat align 2 {
  ret i1 false
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN5blink15JXLImageDecoder16ClearFrameBufferEm(%"class.blink::JXLImageDecoder"*, i64) unnamed_addr #0 comdat align 2 {
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN5blink15JXLImageDecoder6DecodeEm(%"class.blink::JXLImageDecoder"*, i64) unnamed_addr #0 comdat align 2 {
  tail call void @_ZN5blink15JXLImageDecoder10DecodeImplEmb(%"class.blink::JXLImageDecoder"* %0, i64 %1, i1 zeroext false)
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZN5blink12ImageDecoder34FrameStatusSufficientForSuccessorsEj(%"class.blink::ImageDecoder"*, i32) unnamed_addr #0 comdat align 2 {
  %3 = getelementptr inbounds %"class.blink::ImageDecoder", %"class.blink::ImageDecoder"* %0, i64 0, i32 2
  %4 = tail call dereferenceable(128) %"class.blink::ImageFrame"* @_ZN3WTF6VectorIN5blink10ImageFrameELj1ENS_18PartitionAllocatorEE2atEj(%"class.WTF::Vector"* %3, i32 %1) #13
  %5 = getelementptr inbounds %"class.blink::ImageFrame", %"class.blink::ImageFrame"* %4, i64 0, i32 5
  %6 = load i32, i32* %5, align 8
  %7 = or i32 %6, 1
  %8 = icmp eq i32 %7, 3
  ret i1 %8
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN5blink12ImageDecoder17OnInitFrameBufferEm(%"class.blink::ImageDecoder"*, i64) unnamed_addr #0 comdat align 2 {
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZNK5blink15JXLImageDecoder27CanReusePreviousFrameBufferEm(%"class.blink::JXLImageDecoder"*, i64) unnamed_addr #0 comdat align 2 {
  ret i1 false
}

declare %struct.JxlDecoderStruct* @JxlDecoderCreate(%struct.JxlMemoryManagerStruct*) local_unnamed_addr #2

; Function Attrs: nounwind readnone speculatable
declare { i32, i1 } @llvm.umul.with.overflow.i32(i32, i32) #5

declare zeroext i1 @skcms_TransferFunction_makeScaledHLGish(%struct.skcms_TransferFunction*, float, float, float, float, float, float) local_unnamed_addr #2

declare zeroext i1 @skcms_TransferFunction_makePQish(%struct.skcms_TransferFunction*, float, float, float, float, float, float) local_unnamed_addr #2

declare zeroext i1 @skcms_ApproximatelyEqualProfiles(%struct.skcms_ICCProfile*, %struct.skcms_ICCProfile*) local_unnamed_addr #2

; Function Attrs: inlinehint nounwind ssp uwtable
define internal void @"_ZZN5blink15JXLImageDecoder10DecodeImplEmbEN3$_08__invokeEPvmmmPKv"(i8*, i64, i64, i64, i8*) #4 align 2 {
  %6 = alloca %class.SkPixmap, align 8
  %7 = getelementptr inbounds i8, i8* %0, i64 16
  %8 = bitcast i8* %7 to %"class.WTF::Vector"*
  %9 = getelementptr inbounds i8, i8* %0, i64 400
  %10 = bitcast i8* %9 to i64*
  %11 = load i64, i64* %10, align 8
  %12 = trunc i64 %11 to i32
  %13 = add i32 %12, -1
  %14 = tail call dereferenceable(128) %"class.blink::ImageFrame"* @_ZN3WTF6VectorIN5blink10ImageFrameELj1ENS_18PartitionAllocatorEE2atEj(%"class.WTF::Vector"* %8, i32 %13) #13
  %15 = getelementptr inbounds i8, i8* %0, i64 289
  %16 = load i8, i8* %15, align 1, !range !2
  %17 = icmp eq i8 %16, 0
  %18 = trunc i64 %1 to i32
  br i1 %17, label %47, label %19

19:                                               ; preds = %5
  %20 = bitcast %class.SkPixmap* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %20) #13
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %20, i8 0, i64 40, i1 false) #13
  %21 = getelementptr inbounds %"class.blink::ImageFrame", %"class.blink::ImageFrame"* %14, i64 0, i32 0
  %22 = call zeroext i1 @_ZNK8SkBitmap10peekPixelsEP8SkPixmap(%class.SkBitmap* %21, %class.SkPixmap* nonnull %6) #13
  %23 = getelementptr inbounds %class.SkPixmap, %class.SkPixmap* %6, i64 0, i32 0
  %24 = load i8*, i8** %23, align 8
  %25 = shl i64 %2, 32
  %26 = ashr exact i64 %25, 32
  %27 = getelementptr inbounds %class.SkPixmap, %class.SkPixmap* %6, i64 0, i32 1
  %28 = load i64, i64* %27, align 8
  %29 = mul i64 %28, %26
  %30 = getelementptr inbounds i8, i8* %24, i64 %29
  %31 = shl i32 %18, 3
  %32 = sext i32 %31 to i64
  %33 = getelementptr inbounds i8, i8* %30, i64 %32
  %34 = getelementptr inbounds %class.SkPixmap, %class.SkPixmap* %6, i64 0, i32 2, i32 0, i32 0, i32 0
  %35 = load %class.SkColorSpace*, %class.SkColorSpace** %34, align 8
  %36 = icmp eq %class.SkColorSpace* %35, null
  br i1 %36, label %43, label %37

37:                                               ; preds = %19
  %38 = getelementptr inbounds %class.SkColorSpace, %class.SkColorSpace* %35, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %39 = atomicrmw add i32* %38, i32 -1 acq_rel
  %40 = icmp eq i32 %39, 1
  br i1 %40, label %41, label %43

41:                                               ; preds = %37
  %42 = bitcast %class.SkColorSpace* %35 to i8*
  call void @_ZdlPv(i8* %42) #14
  br label %43

43:                                               ; preds = %41, %37, %19
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %20) #13
  %44 = load i8, i8* %15, align 1, !range !2
  %45 = icmp eq i8 %44, 0
  %46 = select i1 %45, i32 13, i32 32
  br label %59

47:                                               ; preds = %5
  %48 = getelementptr inbounds %"class.blink::ImageFrame", %"class.blink::ImageFrame"* %14, i64 0, i32 0, i32 1, i32 0
  %49 = load i8*, i8** %48, align 8
  %50 = shl i64 %2, 32
  %51 = ashr exact i64 %50, 32
  %52 = getelementptr inbounds %"class.blink::ImageFrame", %"class.blink::ImageFrame"* %14, i64 0, i32 0, i32 1, i32 1
  %53 = load i64, i64* %52, align 8
  %54 = mul i64 %53, %51
  %55 = getelementptr inbounds i8, i8* %49, i64 %54
  %56 = shl i32 %18, 2
  %57 = sext i32 %56 to i64
  %58 = getelementptr inbounds i8, i8* %55, i64 %57
  br label %59

59:                                               ; preds = %47, %43
  %60 = phi i32 [ %46, %43 ], [ 13, %47 ]
  %61 = phi i8* [ %33, %43 ], [ %58, %47 ]
  %62 = getelementptr inbounds %"class.blink::ImageFrame", %"class.blink::ImageFrame"* %14, i64 0, i32 9
  %63 = load i8, i8* %62, align 8, !range !2
  %64 = icmp eq i8 %63, 0
  %65 = getelementptr inbounds i8, i8* %0, i64 392
  %66 = bitcast i8* %65 to %"class.blink::ColorProfileTransform"**
  %67 = load %"class.blink::ColorProfileTransform"*, %"class.blink::ColorProfileTransform"** %66, align 8
  br i1 %64, label %74, label %68

68:                                               ; preds = %59
  %69 = getelementptr inbounds i8, i8* %0, i64 352
  %70 = bitcast i8* %69 to i32*
  %71 = load i32, i32* %70, align 4
  %72 = icmp eq i32 %71, 0
  %73 = select i1 %72, i32 1, i32 2
  br label %74

74:                                               ; preds = %68, %59
  %75 = phi i32 [ 1, %59 ], [ %73, %68 ]
  %76 = icmp eq %"class.blink::ColorProfileTransform"* %67, null
  br i1 %76, label %83, label %77

77:                                               ; preds = %74
  %78 = call %struct.skcms_ICCProfile* @_ZNK5blink21ColorProfileTransform10SrcProfileEv(%"class.blink::ColorProfileTransform"* nonnull %67) #13
  %79 = load %"class.blink::ColorProfileTransform"*, %"class.blink::ColorProfileTransform"** %66, align 8
  %80 = icmp eq %"class.blink::ColorProfileTransform"* %79, null
  br i1 %80, label %83, label %81

81:                                               ; preds = %77
  %82 = call %struct.skcms_ICCProfile* @_ZNK5blink21ColorProfileTransform10DstProfileEv(%"class.blink::ColorProfileTransform"* nonnull %79) #13
  br label %83

83:                                               ; preds = %74, %77, %81
  %84 = phi %struct.skcms_ICCProfile* [ %78, %81 ], [ %78, %77 ], [ null, %74 ]
  %85 = phi %struct.skcms_ICCProfile* [ %82, %81 ], [ null, %77 ], [ null, %74 ]
  %86 = call zeroext i1 @skcms_Transform(i8* %4, i32 36, i32 1, %struct.skcms_ICCProfile* %84, i8* %61, i32 %60, i32 %75, %struct.skcms_ICCProfile* %85, i64 %3) #13
  ret void
}

declare %struct.skcms_ICCProfile* @_ZNK5blink21ColorProfileTransform10SrcProfileEv(%"class.blink::ColorProfileTransform"*) local_unnamed_addr #2

declare %struct.skcms_ICCProfile* @_ZNK5blink21ColorProfileTransform10DstProfileEv(%"class.blink::ColorProfileTransform"*) local_unnamed_addr #2

declare zeroext i1 @skcms_Transform(i8*, i32, i32, %struct.skcms_ICCProfile*, i8*, i32, i32, %struct.skcms_ICCProfile*, i64) local_unnamed_addr #2

declare zeroext i1 @_ZNK8SkBitmap10peekPixelsEP8SkPixmap(%class.SkBitmap*, %class.SkPixmap*) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN5blink12ImageDecoderD2Ev(%"class.blink::ImageDecoder"*) unnamed_addr #0 comdat align 2 {
  %2 = getelementptr inbounds %"class.blink::ImageDecoder", %"class.blink::ImageDecoder"* %0, i64 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [37 x i8*] }, { [37 x i8*] }* @_ZTVN5blink12ImageDecoderE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8
  %3 = getelementptr inbounds %"class.blink::ImageDecoder", %"class.blink::ImageDecoder"* %0, i64 0, i32 19, i32 0, i32 0, i32 0
  %4 = load %"class.blink::ColorProfileTransform"*, %"class.blink::ColorProfileTransform"** %3, align 8
  store %"class.blink::ColorProfileTransform"* null, %"class.blink::ColorProfileTransform"** %3, align 8
  %5 = icmp eq %"class.blink::ColorProfileTransform"* %4, null
  br i1 %5, label %8, label %6

6:                                                ; preds = %1
  %7 = bitcast %"class.blink::ColorProfileTransform"* %4 to i8*
  tail call void @free(i8* %7) #13
  br label %8

8:                                                ; preds = %1, %6
  %9 = getelementptr inbounds %"class.blink::ImageDecoder", %"class.blink::ImageDecoder"* %0, i64 0, i32 17, i32 0
  %10 = load %class.SkColorSpace*, %class.SkColorSpace** %9, align 8
  %11 = icmp eq %class.SkColorSpace* %10, null
  br i1 %11, label %18, label %12

12:                                               ; preds = %8
  %13 = getelementptr inbounds %class.SkColorSpace, %class.SkColorSpace* %10, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %14 = atomicrmw add i32* %13, i32 -1 acq_rel
  %15 = icmp eq i32 %14, 1
  br i1 %15, label %16, label %18

16:                                               ; preds = %12
  %17 = bitcast %class.SkColorSpace* %10 to i8*
  tail call void @_ZdlPv(i8* %17) #14
  br label %18

18:                                               ; preds = %8, %12, %16
  %19 = getelementptr inbounds %"class.blink::ImageDecoder", %"class.blink::ImageDecoder"* %0, i64 0, i32 16, i32 0, i32 0, i32 0
  %20 = load %"class.blink::ColorProfile"*, %"class.blink::ColorProfile"** %19, align 8
  store %"class.blink::ColorProfile"* null, %"class.blink::ColorProfile"** %19, align 8
  %21 = icmp eq %"class.blink::ColorProfile"* %20, null
  br i1 %21, label %29, label %22

22:                                               ; preds = %18
  %23 = getelementptr inbounds %"class.blink::ColorProfile", %"class.blink::ColorProfile"* %20, i64 0, i32 1, i32 0, i32 0, i32 0
  %24 = load i8*, i8** %23, align 8
  store i8* null, i8** %23, align 8
  %25 = icmp eq i8* %24, null
  br i1 %25, label %27, label %26

26:                                               ; preds = %22
  tail call void @_ZdaPv(i8* nonnull %24) #14
  br label %27

27:                                               ; preds = %26, %22
  %28 = bitcast %"class.blink::ColorProfile"* %20 to i8*
  tail call void @free(i8* %28) #13
  br label %29

29:                                               ; preds = %18, %27
  %30 = getelementptr inbounds %"class.blink::ImageDecoder", %"class.blink::ImageDecoder"* %0, i64 0, i32 10, i32 0, i32 0, i32 0
  %31 = load %"class.blink::ImagePlanes"*, %"class.blink::ImagePlanes"** %30, align 8
  store %"class.blink::ImagePlanes"* null, %"class.blink::ImagePlanes"** %30, align 8
  %32 = icmp eq %"class.blink::ImagePlanes"* %31, null
  br i1 %32, label %35, label %33

33:                                               ; preds = %29
  %34 = bitcast %"class.blink::ImagePlanes"* %31 to i8*
  tail call void @free(i8* %34) #13
  br label %35

35:                                               ; preds = %29, %33
  %36 = getelementptr inbounds %"class.blink::ImageDecoder", %"class.blink::ImageDecoder"* %0, i64 0, i32 2
  %37 = getelementptr inbounds %"class.blink::ImageDecoder", %"class.blink::ImageDecoder"* %0, i64 0, i32 2, i32 0, i32 0, i32 2
  %38 = load i32, i32* %37, align 4
  %39 = icmp eq i32 %38, 0
  %40 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %36, i64 0, i32 0, i32 0, i32 0
  br i1 %39, label %51, label %41, !prof !4

41:                                               ; preds = %35
  %42 = load %"class.blink::ImageFrame"*, %"class.blink::ImageFrame"** %40, align 8
  %43 = zext i32 %38 to i64
  %44 = getelementptr inbounds %"class.blink::ImageFrame", %"class.blink::ImageFrame"* %42, i64 %43
  br label %45

45:                                               ; preds = %45, %41
  %46 = phi %"class.blink::ImageFrame"* [ %48, %45 ], [ %42, %41 ]
  %47 = getelementptr inbounds %"class.blink::ImageFrame", %"class.blink::ImageFrame"* %46, i64 0, i32 0
  tail call void @_ZN8SkBitmapD1Ev(%class.SkBitmap* %47) #13
  %48 = getelementptr inbounds %"class.blink::ImageFrame", %"class.blink::ImageFrame"* %46, i64 1
  %49 = icmp eq %"class.blink::ImageFrame"* %48, %44
  br i1 %49, label %50, label %45

50:                                               ; preds = %45
  store i32 0, i32* %37, align 4
  br label %51

51:                                               ; preds = %50, %35
  %52 = load %"class.blink::ImageFrame"*, %"class.blink::ImageFrame"** %40, align 8
  %53 = getelementptr inbounds %"class.blink::ImageDecoder", %"class.blink::ImageDecoder"* %0, i64 0, i32 2, i32 0, i32 1, i64 0
  %54 = bitcast i8* %53 to %"class.blink::ImageFrame"*
  %55 = icmp eq %"class.blink::ImageFrame"* %52, %54
  br i1 %55, label %58, label %56, !prof !3

56:                                               ; preds = %51
  %57 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %36, i64 0, i32 0
  tail call void @_ZN3WTF12VectorBufferIN5blink10ImageFrameELj1ENS_18PartitionAllocatorEE22ReallyDeallocateBufferEPS2_(%"class.WTF::VectorBuffer"* %57, %"class.blink::ImageFrame"* %52) #13
  br label %58

58:                                               ; preds = %51, %56
  store %"class.blink::ImageFrame"* null, %"class.blink::ImageFrame"** %40, align 8
  %59 = getelementptr inbounds %"class.blink::ImageDecoder", %"class.blink::ImageDecoder"* %0, i64 0, i32 1, i32 0
  %60 = load %"class.blink::SegmentReader"*, %"class.blink::SegmentReader"** %59, align 8
  %61 = icmp eq %"class.blink::SegmentReader"* %60, null
  br i1 %61, label %74, label %62

62:                                               ; preds = %58
  %63 = getelementptr inbounds %"class.blink::SegmentReader", %"class.blink::SegmentReader"* %60, i64 0, i32 1, i32 0
  %64 = getelementptr inbounds %"class.base::RefCountedThreadSafe", %"class.base::RefCountedThreadSafe"* %63, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %65 = atomicrmw sub i32* %64, i32 1 acq_rel
  %66 = icmp eq i32 %65, 1
  br i1 %66, label %67, label %74

67:                                               ; preds = %62
  %68 = getelementptr inbounds %"class.base::RefCountedThreadSafe", %"class.base::RefCountedThreadSafe"* %63, i64 -2
  %69 = bitcast %"class.base::RefCountedThreadSafe"* %68 to %"class.blink::SegmentReader"*
  %70 = bitcast %"class.base::RefCountedThreadSafe"* %68 to void (%"class.blink::SegmentReader"*)***
  %71 = load void (%"class.blink::SegmentReader"*)**, void (%"class.blink::SegmentReader"*)*** %70, align 8
  %72 = getelementptr inbounds void (%"class.blink::SegmentReader"*)*, void (%"class.blink::SegmentReader"*)** %71, i64 1
  %73 = load void (%"class.blink::SegmentReader"*)*, void (%"class.blink::SegmentReader"*)** %72, align 8
  tail call void %73(%"class.blink::SegmentReader"* nonnull %69) #13
  br label %74

74:                                               ; preds = %58, %62, %67
  ret void
}

declare void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8*) local_unnamed_addr #2

; Function Attrs: nounwind
declare void @free(i8* nocapture) local_unnamed_addr #6

; Function Attrs: nounwind
declare void @_ZN8SkBitmapD1Ev(%class.SkBitmap*) unnamed_addr #6

; Function Attrs: noinline nounwind ssp uwtable
define linkonce_odr hidden void @_ZN3WTF12VectorBufferIN5blink10ImageFrameELj1ENS_18PartitionAllocatorEE22ReallyDeallocateBufferEPS2_(%"class.WTF::VectorBuffer"*, %"class.blink::ImageFrame"*) local_unnamed_addr #7 comdat align 2 {
  %3 = bitcast %"class.blink::ImageFrame"* %1 to i8*
  tail call void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8* %3) #13
  ret void
}

declare void @_ZN3WTF6StringC2EPKcm(%"class.WTF::String"*, i8*, i64) unnamed_addr #2

declare i64 @_ZN5blink12ImageDecoder10FrameCountEv(%"class.blink::ImageDecoder"*) local_unnamed_addr #2

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #8

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden dereferenceable(128) %"class.blink::ImageFrame"* @_ZN3WTF6VectorIN5blink10ImageFrameELj1ENS_18PartitionAllocatorEE2atEj(%"class.WTF::Vector"*, i32) local_unnamed_addr #0 comdat align 2 {
  %3 = alloca %"class.logging::CheckOpResult", align 8
  %4 = alloca %"class.logging::CheckOpResult", align 8
  %5 = alloca %"class.logging::CheckError", align 8
  %6 = bitcast %"class.logging::CheckOpResult"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %6) #13
  %7 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %4, i64 0, i32 0
  store i8* inttoptr (i64 -6148914691236517206 to i8*), i8** %7, align 8
  %8 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %0, i64 0, i32 0, i32 0, i32 2
  %9 = load i32, i32* %8, align 4
  %10 = bitcast %"class.logging::CheckOpResult"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %10)
  %11 = icmp ugt i32 %9, %1
  br i1 %11, label %12, label %13

12:                                               ; preds = %2
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %10)
  store i8* null, i8** %7, align 8
  br label %22

13:                                               ; preds = %2
  %14 = tail call i8* @_ZN7logging15CheckOpValueStrEj(i32 %1) #13
  %15 = tail call i8* @_ZN7logging15CheckOpValueStrEj(i32 %9) #13
  call void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"* nonnull %3, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.3, i64 0, i64 0), i8* %14, i8* %15) #13
  %16 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %3, i64 0, i32 0
  %17 = load i8*, i8** %16, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %10)
  store i8* %17, i8** %7, align 8
  %18 = icmp eq i8* %17, null
  br i1 %18, label %22, label %19

19:                                               ; preds = %13
  %20 = bitcast %"class.logging::CheckError"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %20) #13
  call void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* nonnull sret %5, i8* getelementptr inbounds ([55 x i8], [55 x i8]* @.str.4, i64 0, i64 0), i32 1172, %"class.logging::CheckOpResult"* nonnull %4) #13
  %21 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %5) #13
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %5) #13
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %20) #13
  br label %22

22:                                               ; preds = %12, %13, %19
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %6) #13
  %23 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %0, i64 0, i32 0, i32 0, i32 0
  %24 = load %"class.blink::ImageFrame"*, %"class.blink::ImageFrame"** %23, align 8
  %25 = zext i32 %1 to i64
  %26 = getelementptr inbounds %"class.blink::ImageFrame", %"class.blink::ImageFrame"* %24, i64 %25
  ret %"class.blink::ImageFrame"* %26
}

declare void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* sret, i8*, i32, %"class.logging::CheckOpResult"*) local_unnamed_addr #2

declare dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"*) local_unnamed_addr #2

; Function Attrs: nounwind
declare void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"*) unnamed_addr #6

declare i8* @_ZN7logging15CheckOpValueStrEj(i32) local_unnamed_addr #2

declare void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"*, i8*, i8*, i8*) unnamed_addr #2

; Function Attrs: nobuiltin nounwind
declare void @_ZdaPv(i8*) local_unnamed_addr #8

declare void @JxlDecoderDestroy(%struct.JxlDecoderStruct*) local_unnamed_addr #2

declare void @_ZN5blink12ColorProfileC1ERK16skcms_ICCProfileNSt3__110unique_ptrIA_hNS4_14default_deleteIS6_EEEE(%"class.blink::ColorProfile"*, %struct.skcms_ICCProfile* dereferenceable(1008), i8*) unnamed_addr #2

; Function Attrs: nofree nounwind
declare noalias i8* @malloc(i64) local_unnamed_addr #9

declare void @_ZN7logging10CheckError5CheckEPKciS2_(%"class.logging::CheckError"* sret, i8*, i32, i8*) local_unnamed_addr #2

; Function Attrs: noreturn
declare void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"*) local_unnamed_addr #10

; Function Attrs: nobuiltin nofree
declare noalias nonnull i8* @_Znwm(i64) local_unnamed_addr #11

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden dereferenceable(128) %"class.blink::ImageFrame"* @_ZNK3WTF6VectorIN5blink10ImageFrameELj1ENS_18PartitionAllocatorEE2atEj(%"class.WTF::Vector"*, i32) local_unnamed_addr #0 comdat align 2 {
  %3 = alloca %"class.logging::CheckOpResult", align 8
  %4 = alloca %"class.logging::CheckOpResult", align 8
  %5 = alloca %"class.logging::CheckError", align 8
  %6 = bitcast %"class.logging::CheckOpResult"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %6) #13
  %7 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %4, i64 0, i32 0
  store i8* inttoptr (i64 -6148914691236517206 to i8*), i8** %7, align 8
  %8 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %0, i64 0, i32 0, i32 0, i32 2
  %9 = load i32, i32* %8, align 4
  %10 = bitcast %"class.logging::CheckOpResult"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %10)
  %11 = icmp ugt i32 %9, %1
  br i1 %11, label %12, label %13

12:                                               ; preds = %2
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %10)
  store i8* null, i8** %7, align 8
  br label %22

13:                                               ; preds = %2
  %14 = tail call i8* @_ZN7logging15CheckOpValueStrEj(i32 %1) #13
  %15 = tail call i8* @_ZN7logging15CheckOpValueStrEj(i32 %9) #13
  call void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"* nonnull %3, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.3, i64 0, i64 0), i8* %14, i8* %15) #13
  %16 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %3, i64 0, i32 0
  %17 = load i8*, i8** %16, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %10)
  store i8* %17, i8** %7, align 8
  %18 = icmp eq i8* %17, null
  br i1 %18, label %22, label %19

19:                                               ; preds = %13
  %20 = bitcast %"class.logging::CheckError"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %20) #13
  call void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* nonnull sret %5, i8* getelementptr inbounds ([55 x i8], [55 x i8]* @.str.4, i64 0, i64 0), i32 1176, %"class.logging::CheckOpResult"* nonnull %4) #13
  %21 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %5) #13
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %5) #13
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %20) #13
  br label %22

22:                                               ; preds = %12, %13, %19
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %6) #13
  %23 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %0, i64 0, i32 0, i32 0, i32 0
  %24 = load %"class.blink::ImageFrame"*, %"class.blink::ImageFrame"** %23, align 8
  %25 = zext i32 %1 to i64
  %26 = getelementptr inbounds %"class.blink::ImageFrame", %"class.blink::ImageFrame"* %24, i64 %25
  ret %"class.blink::ImageFrame"* %26
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden dereferenceable(4) float* @_ZNK3WTF6VectorIfLj0ENS_18PartitionAllocatorEE2atEj(%"class.WTF::Vector.32"*, i32) local_unnamed_addr #0 comdat align 2 {
  %3 = alloca %"class.logging::CheckOpResult", align 8
  %4 = alloca %"class.logging::CheckOpResult", align 8
  %5 = alloca %"class.logging::CheckError", align 8
  %6 = bitcast %"class.logging::CheckOpResult"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %6) #13
  %7 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %4, i64 0, i32 0
  store i8* inttoptr (i64 -6148914691236517206 to i8*), i8** %7, align 8
  %8 = getelementptr inbounds %"class.WTF::Vector.32", %"class.WTF::Vector.32"* %0, i64 0, i32 0, i32 0, i32 2
  %9 = load i32, i32* %8, align 4
  %10 = bitcast %"class.logging::CheckOpResult"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %10)
  %11 = icmp ugt i32 %9, %1
  br i1 %11, label %12, label %13

12:                                               ; preds = %2
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %10)
  store i8* null, i8** %7, align 8
  br label %22

13:                                               ; preds = %2
  %14 = tail call i8* @_ZN7logging15CheckOpValueStrEj(i32 %1) #13
  %15 = tail call i8* @_ZN7logging15CheckOpValueStrEj(i32 %9) #13
  call void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"* nonnull %3, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.3, i64 0, i64 0), i8* %14, i8* %15) #13
  %16 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %3, i64 0, i32 0
  %17 = load i8*, i8** %16, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %10)
  store i8* %17, i8** %7, align 8
  %18 = icmp eq i8* %17, null
  br i1 %18, label %22, label %19

19:                                               ; preds = %13
  %20 = bitcast %"class.logging::CheckError"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %20) #13
  call void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* nonnull sret %5, i8* getelementptr inbounds ([55 x i8], [55 x i8]* @.str.4, i64 0, i64 0), i32 1176, %"class.logging::CheckOpResult"* nonnull %4) #13
  %21 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %5) #13
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %5) #13
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %20) #13
  br label %22

22:                                               ; preds = %12, %13, %19
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %6) #13
  %23 = getelementptr inbounds %"class.WTF::Vector.32", %"class.WTF::Vector.32"* %0, i64 0, i32 0, i32 0, i32 0
  %24 = load float*, float** %23, align 8
  %25 = zext i32 %1 to i64
  %26 = getelementptr inbounds float, float* %24, i64 %25
  ret float* %26
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i64 @_ZN3WTF18PartitionAllocator13QuantizedSizeIfEEmm(i64) local_unnamed_addr #0 comdat align 2 {
  %2 = alloca %"class.logging::CheckOpResult", align 8
  %3 = alloca %"class.logging::CheckOpResult", align 8
  %4 = alloca %"class.logging::CheckError", align 8
  %5 = bitcast %"class.logging::CheckOpResult"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %5) #13
  %6 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %3, i64 0, i32 0
  store i8* inttoptr (i64 -6148914691236517206 to i8*), i8** %6, align 8
  %7 = bitcast %"class.logging::CheckOpResult"* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %7)
  %8 = icmp ugt i64 %0, 536346624
  br i1 %8, label %10, label %9

9:                                                ; preds = %1
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %7)
  store i8* null, i8** %6, align 8
  br label %19

10:                                               ; preds = %1
  %11 = tail call i8* @_ZN7logging15CheckOpValueStrEm(i64 %0) #13
  %12 = tail call i8* @_ZN7logging15CheckOpValueStrEm(i64 536346624) #13
  call void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"* nonnull %2, i8* getelementptr inbounds ([44 x i8], [44 x i8]* @.str.9, i64 0, i64 0), i8* %11, i8* %12) #13
  %13 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %2, i64 0, i32 0
  %14 = load i8*, i8** %13, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %7)
  store i8* %14, i8** %6, align 8
  %15 = icmp eq i8* %14, null
  br i1 %15, label %19, label %16

16:                                               ; preds = %10
  %17 = bitcast %"class.logging::CheckError"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %17) #13
  call void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* nonnull sret %4, i8* getelementptr inbounds ([78 x i8], [78 x i8]* @.str.10, i64 0, i64 0), i32 31, %"class.logging::CheckOpResult"* nonnull %3) #13
  %18 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %4) #13
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %4) #13
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %17) #13
  br label %19

19:                                               ; preds = %9, %10, %16
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %5) #13
  %20 = shl i64 %0, 2
  %21 = call i64 @_ZN3WTF10Partitions23BufferPotentialCapacityEm(i64 %20) #13
  ret i64 %21
}

declare i64 @_ZN3WTF10Partitions23BufferPotentialCapacityEm(i64) local_unnamed_addr #2

declare i8* @_ZN7logging15CheckOpValueStrEm(i64) local_unnamed_addr #2

declare i8* @_ZN3WTF18PartitionAllocator15AllocateBackingEmPKc(i64, i8*) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden dereferenceable(4) float* @_ZN3WTF6VectorIfLj0ENS_18PartitionAllocatorEE2atEj(%"class.WTF::Vector.32"*, i32) local_unnamed_addr #0 comdat align 2 {
  %3 = alloca %"class.logging::CheckOpResult", align 8
  %4 = alloca %"class.logging::CheckOpResult", align 8
  %5 = alloca %"class.logging::CheckError", align 8
  %6 = bitcast %"class.logging::CheckOpResult"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %6) #13
  %7 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %4, i64 0, i32 0
  store i8* inttoptr (i64 -6148914691236517206 to i8*), i8** %7, align 8
  %8 = getelementptr inbounds %"class.WTF::Vector.32", %"class.WTF::Vector.32"* %0, i64 0, i32 0, i32 0, i32 2
  %9 = load i32, i32* %8, align 4
  %10 = bitcast %"class.logging::CheckOpResult"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %10)
  %11 = icmp ugt i32 %9, %1
  br i1 %11, label %12, label %13

12:                                               ; preds = %2
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %10)
  store i8* null, i8** %7, align 8
  br label %22

13:                                               ; preds = %2
  %14 = tail call i8* @_ZN7logging15CheckOpValueStrEj(i32 %1) #13
  %15 = tail call i8* @_ZN7logging15CheckOpValueStrEj(i32 %9) #13
  call void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"* nonnull %3, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.3, i64 0, i64 0), i8* %14, i8* %15) #13
  %16 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %3, i64 0, i32 0
  %17 = load i8*, i8** %16, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %10)
  store i8* %17, i8** %7, align 8
  %18 = icmp eq i8* %17, null
  br i1 %18, label %22, label %19

19:                                               ; preds = %13
  %20 = bitcast %"class.logging::CheckError"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %20) #13
  call void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* nonnull sret %5, i8* getelementptr inbounds ([55 x i8], [55 x i8]* @.str.4, i64 0, i64 0), i32 1172, %"class.logging::CheckOpResult"* nonnull %4) #13
  %21 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %5) #13
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %5) #13
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %20) #13
  br label %22

22:                                               ; preds = %12, %13, %19
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %6) #13
  %23 = getelementptr inbounds %"class.WTF::Vector.32", %"class.WTF::Vector.32"* %0, i64 0, i32 0, i32 0, i32 0
  %24 = load float*, float** %23, align 8
  %25 = zext i32 %1 to i64
  %26 = getelementptr inbounds float, float* %24, i64 %25
  ret float* %26
}

; Function Attrs: noinline nounwind ssp uwtable
define linkonce_odr hidden void @_ZN3WTF6VectorIfLj0ENS_18PartitionAllocatorEE14AppendSlowCaseIfEEvOT_(%"class.WTF::Vector.32"*, float* dereferenceable(4)) local_unnamed_addr #7 comdat align 2 {
  %3 = getelementptr inbounds %"class.WTF::Vector.32", %"class.WTF::Vector.32"* %0, i64 0, i32 0, i32 0, i32 2
  %4 = load i32, i32* %3, align 4
  %5 = add i32 %4, 1
  %6 = getelementptr inbounds %"class.WTF::Vector.32", %"class.WTF::Vector.32"* %0, i64 0, i32 0, i32 0, i32 0
  %7 = load float*, float** %6, align 8
  %8 = icmp ugt float* %7, %1
  br i1 %8, label %13, label %9

9:                                                ; preds = %2
  %10 = zext i32 %4 to i64
  %11 = getelementptr inbounds float, float* %7, i64 %10
  %12 = icmp ugt float* %11, %1
  br i1 %12, label %54, label %13

13:                                               ; preds = %9, %2
  %14 = getelementptr inbounds %"class.WTF::Vector.32", %"class.WTF::Vector.32"* %0, i64 0, i32 0, i32 0, i32 1
  %15 = load i32, i32* %14, align 8
  %16 = lshr i32 %15, 2
  %17 = add i32 %15, 1
  %18 = add i32 %17, %16
  %19 = icmp ugt i32 %18, 4
  %20 = select i1 %19, i32 %18, i32 4
  %21 = icmp ugt i32 %20, %5
  %22 = select i1 %21, i32 %20, i32 %5
  %23 = icmp ult i32 %15, %22
  br i1 %23, label %24, label %99, !prof !3

24:                                               ; preds = %13
  %25 = icmp eq float* %7, null
  %26 = zext i32 %22 to i64
  %27 = tail call i64 @_ZN3WTF18PartitionAllocator13QuantizedSizeIfEEmm(i64 %26) #13
  %28 = tail call i8* @_ZN3WTF18PartitionAllocator15AllocateBackingEmPKc(i64 %27, i8* getelementptr inbounds ([53 x i8], [53 x i8]* @__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameIfEEPKcv, i64 0, i64 0)) #13
  br i1 %25, label %29, label %35

29:                                               ; preds = %24
  %30 = ptrtoint i8* %28 to i64
  %31 = bitcast %"class.WTF::Vector.32"* %0 to i64*
  store atomic i64 %30, i64* %31 monotonic, align 8
  %32 = lshr i64 %27, 2
  %33 = trunc i64 %32 to i32
  store i32 %33, i32* %14, align 8
  %34 = bitcast i8* %28 to float*
  br label %99

35:                                               ; preds = %24
  %36 = lshr i64 %27, 2
  %37 = ptrtoint i8* %28 to i64
  %38 = load float*, float** %6, align 8
  %39 = icmp ne i8* %28, null
  %40 = icmp ne float* %38, null
  %41 = and i1 %39, %40
  %42 = bitcast float* %38 to i8*
  br i1 %41, label %43, label %49, !prof !3

43:                                               ; preds = %35
  %44 = load i32, i32* %3, align 4
  %45 = zext i32 %44 to i64
  %46 = shl nuw nsw i64 %45, 2
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %28, i8* nonnull align 4 %42, i64 %46, i1 false) #13
  %47 = bitcast %"class.WTF::Vector.32"* %0 to i8**
  %48 = load i8*, i8** %47, align 8
  br label %49

49:                                               ; preds = %43, %35
  %50 = phi i8* [ %48, %43 ], [ %42, %35 ]
  tail call void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8* %50) #13
  %51 = bitcast %"class.WTF::Vector.32"* %0 to i64*
  store atomic i64 %37, i64* %51 monotonic, align 8
  %52 = trunc i64 %36 to i32
  store i32 %52, i32* %14, align 8
  %53 = bitcast i8* %28 to float*
  br label %99

54:                                               ; preds = %9
  %55 = ptrtoint float* %1 to i64
  %56 = ptrtoint float* %7 to i64
  %57 = sub i64 %55, %56
  %58 = ashr exact i64 %57, 2
  %59 = getelementptr inbounds %"class.WTF::Vector.32", %"class.WTF::Vector.32"* %0, i64 0, i32 0, i32 0, i32 1
  %60 = load i32, i32* %59, align 8
  %61 = lshr i32 %60, 2
  %62 = add i32 %60, 1
  %63 = add i32 %62, %61
  %64 = icmp ugt i32 %63, 4
  %65 = select i1 %64, i32 %63, i32 4
  %66 = icmp ugt i32 %65, %5
  %67 = select i1 %66, i32 %65, i32 %5
  %68 = icmp ult i32 %60, %67
  br i1 %68, label %69, label %96, !prof !3

69:                                               ; preds = %54
  %70 = icmp eq float* %7, null
  %71 = zext i32 %67 to i64
  %72 = tail call i64 @_ZN3WTF18PartitionAllocator13QuantizedSizeIfEEmm(i64 %71) #13
  %73 = tail call i8* @_ZN3WTF18PartitionAllocator15AllocateBackingEmPKc(i64 %72, i8* getelementptr inbounds ([53 x i8], [53 x i8]* @__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameIfEEPKcv, i64 0, i64 0)) #13
  %74 = ptrtoint i8* %73 to i64
  br i1 %70, label %75, label %77

75:                                               ; preds = %69
  %76 = bitcast %"class.WTF::Vector.32"* %0 to i64*
  store atomic i64 %74, i64* %76 monotonic, align 8
  br label %92

77:                                               ; preds = %69
  %78 = load float*, float** %6, align 8
  %79 = icmp ne i8* %73, null
  %80 = icmp ne float* %78, null
  %81 = and i1 %79, %80
  %82 = bitcast float* %78 to i8*
  br i1 %81, label %83, label %89, !prof !3

83:                                               ; preds = %77
  %84 = load i32, i32* %3, align 4
  %85 = zext i32 %84 to i64
  %86 = shl nuw nsw i64 %85, 2
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %73, i8* nonnull align 4 %82, i64 %86, i1 false) #13
  %87 = bitcast %"class.WTF::Vector.32"* %0 to i8**
  %88 = load i8*, i8** %87, align 8
  br label %89

89:                                               ; preds = %83, %77
  %90 = phi i8* [ %88, %83 ], [ %82, %77 ]
  tail call void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8* %90) #13
  %91 = bitcast %"class.WTF::Vector.32"* %0 to i64*
  store atomic i64 %74, i64* %91 monotonic, align 8
  br label %92

92:                                               ; preds = %89, %75
  %93 = lshr i64 %72, 2
  %94 = trunc i64 %93 to i32
  store i32 %94, i32* %59, align 8
  %95 = bitcast i8* %73 to float*
  br label %96

96:                                               ; preds = %92, %54
  %97 = phi float* [ %7, %54 ], [ %95, %92 ]
  %98 = getelementptr inbounds float, float* %97, i64 %58
  br label %99

99:                                               ; preds = %49, %29, %13, %96
  %100 = phi float* [ %97, %96 ], [ %7, %13 ], [ %34, %29 ], [ %53, %49 ]
  %101 = phi float* [ %98, %96 ], [ %1, %13 ], [ %1, %29 ], [ %1, %49 ]
  %102 = load i32, i32* %3, align 4
  %103 = zext i32 %102 to i64
  %104 = getelementptr inbounds float, float* %100, i64 %103
  %105 = bitcast float* %101 to i32*
  %106 = load i32, i32* %105, align 4
  %107 = bitcast float* %104 to i32*
  store i32 %106, i32* %107, align 4
  %108 = load i32, i32* %3, align 4
  %109 = add i32 %108, 1
  store i32 %109, i32* %3, align 4
  ret void
}

; Function Attrs: nofree nounwind readonly
declare i32 @bcmp(i8* nocapture, i8* nocapture, i64) local_unnamed_addr #12

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { norecurse nounwind readonly ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { inlinehint nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind readnone speculatable }
attributes #6 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { noinline nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #9 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #10 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #11 = { nobuiltin nofree "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #12 = { nofree nounwind readonly }
attributes #13 = { nounwind }
attributes #14 = { builtin nounwind }
attributes #15 = { noreturn nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{i8 0, i8 2}
!3 = !{!"branch_weights", i32 2000, i32 1}
!4 = !{!"branch_weights", i32 1, i32 2000}
