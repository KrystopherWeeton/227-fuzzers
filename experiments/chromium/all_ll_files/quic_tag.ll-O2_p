; ModuleID = '../../net/third_party/quiche/src/quic/core/quic_tag.cc'
source_filename = "../../net/third_party/quiche/src/quic/core/quic_tag.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { i32*, i32*, %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { i32* }
%"class.std::__1::basic_string" = type { %"class.std::__1::__compressed_pair.1" }
%"class.std::__1::__compressed_pair.1" = type { %"struct.std::__1::__compressed_pair_elem.2" }
%"struct.std::__1::__compressed_pair_elem.2" = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" = type { %union.anon }
%union.anon = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" = type { i8*, i64, i64 }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short" = type { [23 x i8], %struct.anon }
%struct.anon = type { i8 }
%"struct.absl::strings_internal::Splitter<absl::ByChar, absl::AllowEmpty, absl::string_view>::ConvertToContainer" = type { i8 }
%"class.std::__1::vector.6" = type { %"class.std::__1::__vector_base.7" }
%"class.std::__1::__vector_base.7" = type { %"class.absl::string_view"*, %"class.absl::string_view"*, %"class.std::__1::__compressed_pair.8" }
%"class.absl::string_view" = type { i8*, i64 }
%"class.std::__1::__compressed_pair.8" = type { %"struct.std::__1::__compressed_pair_elem.9" }
%"struct.std::__1::__compressed_pair_elem.9" = type { %"class.absl::string_view"* }
%"class.absl::strings_internal::Splitter" = type <{ %"class.absl::string_view", %"class.absl::ByChar", %"struct.absl::AllowEmpty", [6 x i8] }>
%"class.absl::ByChar" = type { i8 }
%"struct.absl::AllowEmpty" = type { i8 }
%"class.std::__1::__vector_base_common" = type { i8 }
%"struct.std::__1::array" = type { [16 x %struct.raw_view] }
%struct.raw_view = type { i8*, i64 }
%"class.absl::strings_internal::SplitIterator" = type <{ i64, i32, [4 x i8], %"class.absl::string_view", %"class.absl::strings_internal::Splitter"*, %"class.absl::ByChar", %"struct.absl::AllowEmpty", [6 x i8] }>

$_ZNK4absl16strings_internal8SplitterINS_6ByCharENS_10AllowEmptyENS_11string_viewEE18ConvertToContainerINSt3__16vectorIS4_NS7_9allocatorIS4_EEEES4_Lb0EEclERKS5_ = comdat any

$_ZNSt3__16vectorIN4absl11string_viewENS_9allocatorIS2_EEE6insertIPZNKS1_16strings_internal8SplitterINS1_6ByCharENS1_10AllowEmptyES2_E18ConvertToContainerIS5_S2_Lb0EEclERKSB_E8raw_viewEENS_9enable_ifIXaasr27__is_cpp17_forward_iteratorIT_EE5valuesr16is_constructibleIS2_NS_15iterator_traitsISJ_E9referenceEEE5valueENS_11__wrap_iterIPS2_EEE4typeENSN_IPKS2_EESJ_SJ_ = comdat any

@_ZN4absl14ascii_internal13kPropertyBitsE = external local_unnamed_addr constant [256 x i8], align 16
@.str.1 = private unnamed_addr constant [26 x i8] c"absl::string_view::substr\00", align 1

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden zeroext i1 @_ZN4quic17FindMutualQuicTagERKNSt3__16vectorIjNS0_9allocatorIjEEEES6_PjPm(%"class.std::__1::vector"* nocapture readonly dereferenceable(24), %"class.std::__1::vector"* nocapture readonly dereferenceable(24), i32* nocapture, i64*) local_unnamed_addr #0 {
  %5 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 0, i32 1
  %6 = bitcast i32** %5 to i64*
  %7 = load i64, i64* %6, align 8
  %8 = bitcast %"class.std::__1::vector"* %0 to i64*
  %9 = load i64, i64* %8, align 8
  %10 = sub i64 %7, %9
  %11 = ashr exact i64 %10, 2
  %12 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %1, i64 0, i32 0, i32 1
  %13 = bitcast i32** %12 to i64*
  %14 = load i64, i64* %13, align 8
  %15 = bitcast %"class.std::__1::vector"* %1 to i64*
  %16 = load i64, i64* %15, align 8
  %17 = sub i64 %14, %16
  %18 = ashr exact i64 %17, 2
  %19 = icmp eq i64 %10, 0
  %20 = inttoptr i64 %9 to i32*
  %21 = inttoptr i64 %16 to i32*
  br i1 %19, label %43, label %22

22:                                               ; preds = %4
  %23 = icmp eq i64 %17, 0
  br label %24

24:                                               ; preds = %22, %40
  %25 = phi i64 [ 0, %22 ], [ %41, %40 ]
  br i1 %23, label %40, label %26

26:                                               ; preds = %24
  %27 = getelementptr inbounds i32, i32* %20, i64 %25
  %28 = load i32, i32* %27, align 4
  br label %29

29:                                               ; preds = %26, %37
  %30 = phi i64 [ 0, %26 ], [ %38, %37 ]
  %31 = getelementptr inbounds i32, i32* %21, i64 %30
  %32 = load i32, i32* %31, align 4
  %33 = icmp eq i32 %28, %32
  br i1 %33, label %34, label %37

34:                                               ; preds = %29
  store i32 %28, i32* %2, align 4
  %35 = icmp eq i64* %3, null
  br i1 %35, label %43, label %36

36:                                               ; preds = %34
  store i64 %30, i64* %3, align 8
  br label %43

37:                                               ; preds = %29
  %38 = add nuw i64 %30, 1
  %39 = icmp ult i64 %38, %18
  br i1 %39, label %29, label %40

40:                                               ; preds = %37, %24
  %41 = add nuw i64 %25, 1
  %42 = icmp ult i64 %41, %11
  br i1 %42, label %24, label %43

43:                                               ; preds = %40, %4, %36, %34
  %44 = phi i1 [ true, %34 ], [ true, %36 ], [ false, %4 ], [ false, %40 ]
  ret i1 %44
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN4quic15QuicTagToStringEj(%"class.std::__1::basic_string"* noalias sret, i32) local_unnamed_addr #2 {
  %3 = alloca i32, align 4
  %4 = bitcast i32* %3 to [4 x i8]*
  %5 = alloca i32, align 4
  %6 = icmp eq i32 %1, 0
  br i1 %6, label %7, label %12

7:                                                ; preds = %2
  %8 = bitcast %"class.std::__1::basic_string"* %0 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %9 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %8, i64 0, i32 1, i32 0
  store i8 1, i8* %9, align 1
  %10 = bitcast %"class.std::__1::basic_string"* %0 to i8*
  store i8 48, i8* %10, align 8
  %11 = getelementptr inbounds i8, i8* %10, i64 1
  store i8 0, i8* %11, align 1
  br label %39

12:                                               ; preds = %2
  %13 = bitcast i32* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %13) #12
  %14 = getelementptr inbounds [4 x i8], [4 x i8]* %4, i64 0, i64 2
  %15 = getelementptr inbounds [4 x i8], [4 x i8]* %4, i64 0, i64 3
  %16 = bitcast i32* %5 to i8*
  store i32 -1431655766, i32* %3, align 4
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %16) #12
  store i32 %1, i32* %5, align 4
  %17 = tail call i16** @__ctype_b_loc() #13
  %18 = load i16*, i16** %17, align 8
  %19 = trunc i32 %1 to i8
  %20 = bitcast i32* %3 to i8*
  store i8 %19, i8* %20, align 4
  %21 = and i32 %1, 255
  %22 = zext i32 %21 to i64
  %23 = getelementptr inbounds i16, i16* %18, i64 %22
  %24 = load i16, i16* %23, align 2
  %25 = and i16 %24, 16384
  %26 = icmp eq i16 %25, 0
  br i1 %26, label %37, label %27

27:                                               ; preds = %12
  %28 = getelementptr inbounds [4 x i8], [4 x i8]* %4, i64 0, i64 1
  %29 = lshr i32 %1, 8
  %30 = trunc i32 %29 to i8
  store i8 %30, i8* %28, align 1
  %31 = and i32 %29, 255
  %32 = zext i32 %31 to i64
  %33 = getelementptr inbounds i16, i16* %18, i64 %32
  %34 = load i16, i16* %33, align 2
  %35 = and i16 %34, 16384
  %36 = icmp eq i16 %35, 0
  br i1 %36, label %37, label %40

37:                                               ; preds = %54, %40, %27, %12
  call void @_ZN4absl16BytesToHexStringENS_11string_viewE(%"class.std::__1::basic_string"* sret %0, i8* nonnull %16, i64 4) #12
  br label %38

38:                                               ; preds = %37, %61
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %16) #12
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %13) #12
  br label %39

39:                                               ; preds = %38, %7
  ret void

40:                                               ; preds = %27
  %41 = lshr i32 %1, 16
  %42 = trunc i32 %41 to i8
  store i8 %42, i8* %14, align 2
  %43 = and i32 %41, 255
  %44 = zext i32 %43 to i64
  %45 = getelementptr inbounds i16, i16* %18, i64 %44
  %46 = load i16, i16* %45, align 2
  %47 = and i16 %46, 16384
  %48 = icmp eq i16 %47, 0
  br i1 %48, label %37, label %49

49:                                               ; preds = %40
  %50 = lshr i32 %1, 24
  %51 = trunc i32 %50 to i8
  store i8 %51, i8* %15, align 1
  %52 = and i32 %1, -16777216
  switch i32 %52, label %54 [
    i32 0, label %53
    i32 -16777216, label %53
  ]

53:                                               ; preds = %49, %49
  store i8 32, i8* %15, align 1
  br label %54

54:                                               ; preds = %53, %49
  %55 = phi i8 [ 32, %53 ], [ %51, %49 ]
  %56 = zext i8 %55 to i64
  %57 = getelementptr inbounds i16, i16* %18, i64 %56
  %58 = load i16, i16* %57, align 2
  %59 = and i16 %58, 16384
  %60 = icmp eq i16 %59, 0
  br i1 %60, label %37, label %61

61:                                               ; preds = %54
  %62 = bitcast %"class.std::__1::basic_string"* %0 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %63 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %62, i64 0, i32 1, i32 0
  store i8 4, i8* %63, align 1
  %64 = bitcast %"class.std::__1::basic_string"* %0 to i8*
  %65 = bitcast %"class.std::__1::basic_string"* %0 to i32*
  %66 = load i32, i32* %3, align 4
  store i32 %66, i32* %65, align 8
  %67 = getelementptr inbounds i8, i8* %64, i64 4
  store i8 0, i8* %67, align 4
  br label %38
}

declare void @_ZN4absl16BytesToHexStringENS_11string_viewE(%"class.std::__1::basic_string"* sret, i8*, i64) local_unnamed_addr #3

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden i32 @_ZN4quic11MakeQuicTagEcccc(i8 signext, i8 signext, i8 signext, i8 signext) local_unnamed_addr #4 {
  %5 = sext i8 %0 to i32
  %6 = sext i8 %1 to i32
  %7 = shl nsw i32 %6, 8
  %8 = or i32 %7, %5
  %9 = sext i8 %2 to i32
  %10 = shl nsw i32 %9, 16
  %11 = or i32 %8, %10
  %12 = zext i8 %3 to i32
  %13 = shl nuw i32 %12, 24
  %14 = or i32 %11, %13
  ret i32 %14
}

; Function Attrs: nounwind readonly ssp uwtable
define hidden zeroext i1 @_ZN4quic15ContainsQuicTagERKNSt3__16vectorIjNS0_9allocatorIjEEEEj(%"class.std::__1::vector"* nocapture readonly dereferenceable(24), i32) local_unnamed_addr #5 {
  %3 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 0, i32 0
  %4 = load i32*, i32** %3, align 8
  %5 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 0, i32 1
  %6 = load i32*, i32** %5, align 8
  %7 = icmp eq i32* %4, %6
  br i1 %7, label %15, label %8

8:                                                ; preds = %2, %12
  %9 = phi i32* [ %13, %12 ], [ %4, %2 ]
  %10 = load i32, i32* %9, align 4
  %11 = icmp eq i32 %10, %1
  br i1 %11, label %15, label %12

12:                                               ; preds = %8
  %13 = getelementptr inbounds i32, i32* %9, i64 1
  %14 = icmp eq i32* %13, %6
  br i1 %14, label %15, label %8

15:                                               ; preds = %8, %12, %2
  %16 = phi i32* [ %4, %2 ], [ %9, %8 ], [ %6, %12 ]
  %17 = icmp ne i32* %16, %6
  ret i1 %17
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @_ZN4quic12ParseQuicTagEN4absl11string_viewE(i8*, i64) local_unnamed_addr #2 {
  %3 = alloca %"class.std::__1::basic_string", align 8
  %4 = bitcast %"class.std::__1::basic_string"* %3 to i8*
  %5 = alloca %"class.std::__1::basic_string", align 8
  %6 = ptrtoint i8* %0 to i64
  %7 = getelementptr inbounds i8, i8* %0, i64 %1
  %8 = icmp eq i64 %1, 0
  br i1 %8, label %23, label %9

9:                                                ; preds = %2, %17
  %10 = phi i8* [ %18, %17 ], [ %0, %2 ]
  %11 = load i8, i8* %10, align 1
  %12 = zext i8 %11 to i64
  %13 = getelementptr inbounds [256 x i8], [256 x i8]* @_ZN4absl14ascii_internal13kPropertyBitsE, i64 0, i64 %12
  %14 = load i8, i8* %13, align 1
  %15 = and i8 %14, 8
  %16 = icmp eq i8 %15, 0
  br i1 %16, label %20, label %17

17:                                               ; preds = %9
  %18 = getelementptr inbounds i8, i8* %10, i64 1
  %19 = icmp eq i8* %18, %7
  br i1 %19, label %20, label %9

20:                                               ; preds = %9, %17
  %21 = phi i8* [ %10, %9 ], [ %7, %17 ]
  %22 = ptrtoint i8* %21 to i64
  br label %23

23:                                               ; preds = %20, %2
  %24 = phi i64 [ %22, %20 ], [ %6, %2 ]
  %25 = phi i8* [ %21, %20 ], [ %0, %2 ]
  %26 = sub i64 %24, %6
  %27 = icmp ugt i64 %26, %1
  br i1 %27, label %28, label %29, !prof !2

28:                                               ; preds = %23
  tail call void @_ZN4absl13base_internal18ThrowStdOutOfRangeEPKc(i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.1, i64 0, i64 0)) #14
  unreachable

29:                                               ; preds = %23
  %30 = sub i64 %1, %26
  %31 = icmp sgt i64 %30, -1
  br i1 %31, label %33, label %32, !prof !3

32:                                               ; preds = %29
  tail call void @llvm.trap() #12
  unreachable

33:                                               ; preds = %29
  %34 = getelementptr inbounds i8, i8* %25, i64 %30
  br label %35

35:                                               ; preds = %38, %33
  %36 = phi i8* [ %34, %33 ], [ %39, %38 ]
  %37 = icmp eq i8* %36, %25
  br i1 %37, label %48, label %38

38:                                               ; preds = %35
  %39 = getelementptr inbounds i8, i8* %36, i64 -1
  %40 = load i8, i8* %39, align 1
  %41 = zext i8 %40 to i64
  %42 = getelementptr inbounds [256 x i8], [256 x i8]* @_ZN4absl14ascii_internal13kPropertyBitsE, i64 0, i64 %41
  %43 = load i8, i8* %42, align 1
  %44 = and i8 %43, 8
  %45 = icmp eq i8 %44, 0
  br i1 %45, label %46, label %35

46:                                               ; preds = %38
  %47 = ptrtoint i8* %36 to i64
  br label %48

48:                                               ; preds = %35, %46
  %49 = phi i64 [ %47, %46 ], [ %24, %35 ]
  %50 = sub i64 %49, %24
  %51 = icmp ult i64 %50, %30
  %52 = select i1 %51, i64 %50, i64 %30
  %53 = icmp sgt i64 %52, -1
  br i1 %53, label %55, label %54, !prof !3

54:                                               ; preds = %48
  tail call void @llvm.trap() #12
  unreachable

55:                                               ; preds = %48
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %4) #12
  %56 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %3, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %57 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %3, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %4, i8 0, i64 24, i1 false) #12
  %58 = icmp eq i64 %52, 8
  br i1 %58, label %59, label %77

59:                                               ; preds = %55
  %60 = bitcast %"class.std::__1::basic_string"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %60) #12
  call void @_ZN4absl16HexStringToBytesENS_11string_viewE(%"class.std::__1::basic_string"* nonnull sret %5, i8* %25, i64 8) #12
  %61 = bitcast %"class.std::__1::basic_string"* %3 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %62 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %61, i64 0, i32 1, i32 0
  %63 = load i8, i8* %62, align 1
  %64 = icmp slt i8 %63, 0
  br i1 %64, label %65, label %67

65:                                               ; preds = %59
  %66 = load i8*, i8** %56, align 8
  call void @_ZdlPv(i8* %66) #15
  br label %67

67:                                               ; preds = %65, %59
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %4, i8* nonnull align 8 %60, i64 24, i1 false) #12
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %60) #12
  %68 = load i8, i8* %62, align 1
  %69 = icmp slt i8 %68, 0
  br i1 %69, label %72, label %70

70:                                               ; preds = %67
  %71 = zext i8 %68 to i64
  br label %77

72:                                               ; preds = %67
  %73 = load i8*, i8** %56, align 8
  %74 = load i64, i64* %57, align 8
  %75 = icmp sgt i64 %74, -1
  br i1 %75, label %77, label %76, !prof !3

76:                                               ; preds = %72
  call void @llvm.trap() #12
  unreachable

77:                                               ; preds = %72, %70, %55
  %78 = phi i8 [ 0, %55 ], [ %68, %72 ], [ %68, %70 ]
  %79 = phi i8* [ %25, %55 ], [ %73, %72 ], [ %4, %70 ]
  %80 = phi i64 [ %52, %55 ], [ %74, %72 ], [ %71, %70 ]
  %81 = icmp eq i64 %80, 0
  br i1 %81, label %105, label %82

82:                                               ; preds = %77
  %83 = getelementptr inbounds i8, i8* %79, i64 %80
  %84 = add i64 %80, -1
  %85 = and i64 %80, 7
  %86 = icmp ult i64 %84, 7
  br i1 %86, label %89, label %87

87:                                               ; preds = %82
  %88 = sub i64 %80, %85
  br label %111

89:                                               ; preds = %111, %82
  %90 = phi i32 [ undef, %82 ], [ %154, %111 ]
  %91 = phi i32 [ 0, %82 ], [ %154, %111 ]
  %92 = phi i8* [ %83, %82 ], [ %150, %111 ]
  %93 = icmp eq i64 %85, 0
  br i1 %93, label %105, label %94

94:                                               ; preds = %89, %94
  %95 = phi i32 [ %102, %94 ], [ %91, %89 ]
  %96 = phi i8* [ %98, %94 ], [ %92, %89 ]
  %97 = phi i64 [ %103, %94 ], [ %85, %89 ]
  %98 = getelementptr inbounds i8, i8* %96, i64 -1
  %99 = load i8, i8* %98, align 1
  %100 = shl i32 %95, 8
  %101 = zext i8 %99 to i32
  %102 = or i32 %100, %101
  %103 = add i64 %97, -1
  %104 = icmp eq i64 %103, 0
  br i1 %104, label %105, label %94, !llvm.loop !4

105:                                              ; preds = %89, %94, %77
  %106 = phi i32 [ 0, %77 ], [ %90, %89 ], [ %102, %94 ]
  %107 = icmp slt i8 %78, 0
  br i1 %107, label %108, label %110

108:                                              ; preds = %105
  %109 = load i8*, i8** %56, align 8
  call void @_ZdlPv(i8* %109) #15
  br label %110

110:                                              ; preds = %105, %108
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %4) #12
  ret i32 %106

111:                                              ; preds = %111, %87
  %112 = phi i32 [ 0, %87 ], [ %154, %111 ]
  %113 = phi i8* [ %83, %87 ], [ %150, %111 ]
  %114 = phi i64 [ %88, %87 ], [ %155, %111 ]
  %115 = getelementptr inbounds i8, i8* %113, i64 -1
  %116 = load i8, i8* %115, align 1
  %117 = shl i32 %112, 8
  %118 = zext i8 %116 to i32
  %119 = or i32 %117, %118
  %120 = getelementptr inbounds i8, i8* %113, i64 -2
  %121 = load i8, i8* %120, align 1
  %122 = shl i32 %119, 8
  %123 = zext i8 %121 to i32
  %124 = or i32 %122, %123
  %125 = getelementptr inbounds i8, i8* %113, i64 -3
  %126 = load i8, i8* %125, align 1
  %127 = shl i32 %124, 8
  %128 = zext i8 %126 to i32
  %129 = or i32 %127, %128
  %130 = getelementptr inbounds i8, i8* %113, i64 -4
  %131 = load i8, i8* %130, align 1
  %132 = shl i32 %129, 8
  %133 = zext i8 %131 to i32
  %134 = or i32 %132, %133
  %135 = getelementptr inbounds i8, i8* %113, i64 -5
  %136 = load i8, i8* %135, align 1
  %137 = shl i32 %134, 8
  %138 = zext i8 %136 to i32
  %139 = or i32 %137, %138
  %140 = getelementptr inbounds i8, i8* %113, i64 -6
  %141 = load i8, i8* %140, align 1
  %142 = shl i32 %139, 8
  %143 = zext i8 %141 to i32
  %144 = or i32 %142, %143
  %145 = getelementptr inbounds i8, i8* %113, i64 -7
  %146 = load i8, i8* %145, align 1
  %147 = shl i32 %144, 8
  %148 = zext i8 %146 to i32
  %149 = or i32 %147, %148
  %150 = getelementptr inbounds i8, i8* %113, i64 -8
  %151 = load i8, i8* %150, align 1
  %152 = shl i32 %149, 8
  %153 = zext i8 %151 to i32
  %154 = or i32 %152, %153
  %155 = add i64 %114, -8
  %156 = icmp eq i64 %155, 0
  br i1 %156, label %89, label %111
}

declare void @_ZN4absl16HexStringToBytesENS_11string_viewE(%"class.std::__1::basic_string"* sret, i8*, i64) local_unnamed_addr #3

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #1

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN4quic18ParseQuicTagVectorEN4absl11string_viewE(%"class.std::__1::vector"* noalias sret, i8*, i64) local_unnamed_addr #2 {
  %4 = alloca %"struct.absl::strings_internal::Splitter<absl::ByChar, absl::AllowEmpty, absl::string_view>::ConvertToContainer", align 1
  %5 = alloca %"class.std::__1::vector.6", align 8
  %6 = alloca %"class.absl::strings_internal::Splitter", align 8
  %7 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 0, i32 1
  %8 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 0, i32 2, i32 0, i32 0
  %9 = bitcast %"class.std::__1::vector"* %0 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %9, i8 0, i64 24, i1 false) #12
  %10 = getelementptr inbounds i8, i8* %1, i64 %2
  %11 = icmp eq i64 %2, 0
  br i1 %11, label %23, label %12

12:                                               ; preds = %3, %20
  %13 = phi i8* [ %21, %20 ], [ %1, %3 ]
  %14 = load i8, i8* %13, align 1
  %15 = zext i8 %14 to i64
  %16 = getelementptr inbounds [256 x i8], [256 x i8]* @_ZN4absl14ascii_internal13kPropertyBitsE, i64 0, i64 %15
  %17 = load i8, i8* %16, align 1
  %18 = and i8 %17, 8
  %19 = icmp eq i8 %18, 0
  br i1 %19, label %23, label %20

20:                                               ; preds = %12
  %21 = getelementptr inbounds i8, i8* %13, i64 1
  %22 = icmp eq i8* %21, %10
  br i1 %22, label %23, label %12

23:                                               ; preds = %20, %12, %3
  %24 = phi i8* [ %1, %3 ], [ %10, %20 ], [ %13, %12 ]
  %25 = ptrtoint i8* %24 to i64
  %26 = ptrtoint i8* %1 to i64
  %27 = sub i64 %25, %26
  %28 = icmp ugt i64 %27, %2
  br i1 %28, label %29, label %30, !prof !2

29:                                               ; preds = %23
  tail call void @_ZN4absl13base_internal18ThrowStdOutOfRangeEPKc(i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.1, i64 0, i64 0)) #14
  unreachable

30:                                               ; preds = %23
  %31 = sub i64 %2, %27
  %32 = icmp sgt i64 %31, -1
  br i1 %32, label %34, label %33, !prof !3

33:                                               ; preds = %30
  tail call void @llvm.trap() #12
  unreachable

34:                                               ; preds = %30
  %35 = getelementptr inbounds i8, i8* %24, i64 %31
  br label %36

36:                                               ; preds = %39, %34
  %37 = phi i8* [ %35, %34 ], [ %40, %39 ]
  %38 = icmp eq i8* %37, %24
  br i1 %38, label %49, label %39

39:                                               ; preds = %36
  %40 = getelementptr inbounds i8, i8* %37, i64 -1
  %41 = load i8, i8* %40, align 1
  %42 = zext i8 %41 to i64
  %43 = getelementptr inbounds [256 x i8], [256 x i8]* @_ZN4absl14ascii_internal13kPropertyBitsE, i64 0, i64 %42
  %44 = load i8, i8* %43, align 1
  %45 = and i8 %44, 8
  %46 = icmp eq i8 %45, 0
  br i1 %46, label %47, label %36

47:                                               ; preds = %39
  %48 = ptrtoint i8* %37 to i64
  br label %49

49:                                               ; preds = %36, %47
  %50 = phi i64 [ %48, %47 ], [ %25, %36 ]
  %51 = sub i64 %50, %25
  %52 = icmp ult i64 %51, %31
  %53 = select i1 %52, i64 %51, i64 %31
  %54 = icmp sgt i64 %53, -1
  br i1 %54, label %56, label %55, !prof !3

55:                                               ; preds = %49
  tail call void @llvm.trap() #12
  unreachable

56:                                               ; preds = %49
  %57 = icmp eq i64 %53, 0
  br i1 %57, label %154, label %58

58:                                               ; preds = %56
  %59 = bitcast %"class.std::__1::vector.6"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %59) #12
  %60 = getelementptr inbounds %"class.std::__1::vector.6", %"class.std::__1::vector.6"* %5, i64 0, i32 0, i32 0
  %61 = getelementptr inbounds %"class.std::__1::vector.6", %"class.std::__1::vector.6"* %5, i64 0, i32 0, i32 1
  %62 = bitcast %"class.absl::strings_internal::Splitter"* %6 to i8*
  %63 = bitcast %"class.std::__1::vector.6"* %5 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %63, i8 -86, i64 24, i1 false)
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %62) #12
  %64 = getelementptr inbounds %"class.absl::strings_internal::Splitter", %"class.absl::strings_internal::Splitter"* %6, i64 0, i32 0, i32 0
  store i8* %24, i8** %64, align 8, !alias.scope !6
  %65 = getelementptr inbounds %"class.absl::strings_internal::Splitter", %"class.absl::strings_internal::Splitter"* %6, i64 0, i32 0, i32 1
  store i64 %53, i64* %65, align 8, !alias.scope !6
  %66 = getelementptr inbounds %"class.absl::strings_internal::Splitter", %"class.absl::strings_internal::Splitter"* %6, i64 0, i32 1, i32 0
  store i8 44, i8* %66, align 8, !alias.scope !6
  %67 = getelementptr inbounds %"struct.absl::strings_internal::Splitter<absl::ByChar, absl::AllowEmpty, absl::string_view>::ConvertToContainer", %"struct.absl::strings_internal::Splitter<absl::ByChar, absl::AllowEmpty, absl::string_view>::ConvertToContainer"* %4, i64 0, i32 0
  call void @llvm.lifetime.start.p0i8(i64 1, i8* nonnull %67) #12, !noalias !9
  call void @_ZNK4absl16strings_internal8SplitterINS_6ByCharENS_10AllowEmptyENS_11string_viewEE18ConvertToContainerINSt3__16vectorIS4_NS7_9allocatorIS4_EEEES4_Lb0EEclERKS5_(%"class.std::__1::vector.6"* nonnull sret %5, %"struct.absl::strings_internal::Splitter<absl::ByChar, absl::AllowEmpty, absl::string_view>::ConvertToContainer"* nonnull %4, %"class.absl::strings_internal::Splitter"* nonnull dereferenceable(24) %6) #12
  call void @llvm.lifetime.end.p0i8(i64 1, i8* nonnull %67) #12, !noalias !9
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %62) #12
  %68 = load %"class.absl::string_view"*, %"class.absl::string_view"** %60, align 8
  %69 = load %"class.absl::string_view"*, %"class.absl::string_view"** %61, align 8
  %70 = icmp eq %"class.absl::string_view"* %68, %69
  br i1 %70, label %77, label %71

71:                                               ; preds = %58
  %72 = bitcast i32** %7 to i64*
  %73 = bitcast %"class.std::__1::vector"* %0 to i64*
  %74 = bitcast i32** %8 to i64*
  br label %85

75:                                               ; preds = %147
  %76 = load %"class.absl::string_view"*, %"class.absl::string_view"** %60, align 8
  br label %77

77:                                               ; preds = %75, %58
  %78 = phi %"class.absl::string_view"* [ %76, %75 ], [ %68, %58 ]
  %79 = icmp eq %"class.absl::string_view"* %78, null
  br i1 %79, label %84, label %80

80:                                               ; preds = %77
  %81 = ptrtoint %"class.absl::string_view"* %78 to i64
  %82 = bitcast %"class.absl::string_view"** %61 to i64*
  store i64 %81, i64* %82, align 8
  %83 = bitcast %"class.absl::string_view"* %78 to i8*
  call void @_ZdlPv(i8* %83) #15
  br label %84

84:                                               ; preds = %77, %80
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %59) #12
  br label %154

85:                                               ; preds = %150, %71
  %86 = phi i64 [ 0, %71 ], [ %153, %150 ]
  %87 = phi i32* [ null, %71 ], [ %152, %150 ]
  %88 = phi i32* [ null, %71 ], [ %151, %150 ]
  %89 = phi %"class.absl::string_view"* [ %68, %71 ], [ %148, %150 ]
  %90 = getelementptr inbounds %"class.absl::string_view", %"class.absl::string_view"* %89, i64 0, i32 0
  %91 = load i8*, i8** %90, align 8
  %92 = getelementptr inbounds %"class.absl::string_view", %"class.absl::string_view"* %89, i64 0, i32 1
  %93 = load i64, i64* %92, align 8
  %94 = call i32 @_ZN4quic12ParseQuicTagEN4absl11string_viewE(i8* %91, i64 %93)
  %95 = icmp ult i32* %88, %87
  %96 = ptrtoint i32* %87 to i64
  br i1 %95, label %97, label %100

97:                                               ; preds = %85
  store i32 %94, i32* %88, align 4
  %98 = getelementptr inbounds i32, i32* %88, i64 1
  %99 = ptrtoint i32* %98 to i64
  store i64 %99, i64* %72, align 8
  br label %147

100:                                              ; preds = %85
  %101 = ptrtoint i32* %88 to i64
  %102 = load i64, i64* %73, align 8
  %103 = sub i64 %101, %102
  %104 = ashr exact i64 %103, 2
  %105 = add nsw i64 %104, 1
  %106 = icmp ugt i64 %105, 4611686018427387903
  br i1 %106, label %107, label %109

107:                                              ; preds = %100
  %108 = bitcast %"class.std::__1::vector"* %0 to %"class.std::__1::__vector_base_common"*
  call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %108) #14
  unreachable

109:                                              ; preds = %100
  %110 = sub i64 %96, %102
  %111 = ashr exact i64 %110, 2
  %112 = icmp ult i64 %111, 2305843009213693951
  br i1 %112, label %113, label %121

113:                                              ; preds = %109
  %114 = ashr exact i64 %110, 1
  %115 = icmp ult i64 %114, %105
  %116 = select i1 %115, i64 %105, i64 %114
  %117 = icmp eq i64 %116, 0
  br i1 %117, label %126, label %118

118:                                              ; preds = %113
  %119 = icmp ugt i64 %116, 4611686018427387903
  br i1 %119, label %120, label %121

120:                                              ; preds = %118
  call void @abort() #14
  unreachable

121:                                              ; preds = %118, %109
  %122 = phi i64 [ %116, %118 ], [ 4611686018427387903, %109 ]
  %123 = shl i64 %122, 2
  %124 = call i8* @_Znwm(i64 %123) #15
  %125 = bitcast i8* %124 to i32*
  br label %126

126:                                              ; preds = %121, %113
  %127 = phi i64 [ %122, %121 ], [ 0, %113 ]
  %128 = phi i32* [ %125, %121 ], [ null, %113 ]
  %129 = getelementptr inbounds i32, i32* %128, i64 %104
  %130 = getelementptr inbounds i32, i32* %128, i64 %127
  %131 = ptrtoint i32* %130 to i64
  store i32 %94, i32* %129, align 4
  %132 = getelementptr inbounds i32, i32* %129, i64 1
  %133 = ptrtoint i32* %132 to i64
  %134 = sub i64 %86, %102
  %135 = ashr exact i64 %134, 2
  %136 = sub nsw i64 0, %135
  %137 = getelementptr inbounds i32, i32* %129, i64 %136
  %138 = ptrtoint i32* %137 to i64
  %139 = icmp sgt i64 %134, 0
  br i1 %139, label %140, label %143

140:                                              ; preds = %126
  %141 = bitcast i32* %137 to i8*
  %142 = inttoptr i64 %102 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %141, i8* align 4 %142, i64 %134, i1 false) #12
  br label %143

143:                                              ; preds = %140, %126
  store i64 %138, i64* %73, align 8
  store i64 %133, i64* %72, align 8
  store i64 %131, i64* %74, align 8
  %144 = icmp eq i64 %102, 0
  br i1 %144, label %147, label %145

145:                                              ; preds = %143
  %146 = inttoptr i64 %102 to i8*
  call void @_ZdlPv(i8* %146) #15
  br label %147

147:                                              ; preds = %97, %143, %145
  %148 = getelementptr inbounds %"class.absl::string_view", %"class.absl::string_view"* %89, i64 1
  %149 = icmp eq %"class.absl::string_view"* %148, %69
  br i1 %149, label %75, label %150

150:                                              ; preds = %147
  %151 = load i32*, i32** %7, align 8
  %152 = load i32*, i32** %8, align 8
  %153 = ptrtoint i32* %151 to i64
  br label %85

154:                                              ; preds = %56, %84
  ret void
}

; Function Attrs: nounwind readnone
declare i16** @__ctype_b_loc() local_unnamed_addr #6

; Function Attrs: cold noreturn nounwind
declare void @llvm.trap() #7

; Function Attrs: noreturn
declare void @_ZN4absl13base_internal18ThrowStdOutOfRangeEPKc(i8*) local_unnamed_addr #8

; Function Attrs: noreturn nounwind
declare void @abort() local_unnamed_addr #9

; Function Attrs: nobuiltin nofree
declare noalias nonnull i8* @_Znwm(i64) local_unnamed_addr #10

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #11

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNK4absl16strings_internal8SplitterINS_6ByCharENS_10AllowEmptyENS_11string_viewEE18ConvertToContainerINSt3__16vectorIS4_NS7_9allocatorIS4_EEEES4_Lb0EEclERKS5_(%"class.std::__1::vector.6"* noalias sret, %"struct.absl::strings_internal::Splitter<absl::ByChar, absl::AllowEmpty, absl::string_view>::ConvertToContainer"*, %"class.absl::strings_internal::Splitter"* dereferenceable(24)) local_unnamed_addr #2 comdat align 2 {
  %4 = alloca %"struct.std::__1::array", align 8
  %5 = alloca %"class.absl::strings_internal::SplitIterator", align 8
  %6 = getelementptr inbounds %"class.std::__1::vector.6", %"class.std::__1::vector.6"* %0, i64 0, i32 0, i32 1
  %7 = bitcast %"class.std::__1::vector.6"* %0 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %7, i8 0, i64 24, i1 false) #12
  %8 = bitcast %"struct.std::__1::array"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 256, i8* nonnull %8) #12
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %8, i8 -86, i64 256, i1 false)
  %9 = bitcast %"class.absl::strings_internal::SplitIterator"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 48, i8* nonnull %9) #12
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %9, i8 -86, i64 48, i1 false)
  %10 = getelementptr inbounds %"class.absl::strings_internal::SplitIterator", %"class.absl::strings_internal::SplitIterator"* %5, i64 0, i32 0
  store i64 0, i64* %10, align 8, !alias.scope !12
  %11 = getelementptr inbounds %"class.absl::strings_internal::SplitIterator", %"class.absl::strings_internal::SplitIterator"* %5, i64 0, i32 1
  store i32 0, i32* %11, align 8, !alias.scope !12
  %12 = getelementptr inbounds %"class.absl::strings_internal::SplitIterator", %"class.absl::strings_internal::SplitIterator"* %5, i64 0, i32 3
  %13 = bitcast %"class.absl::string_view"* %12 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %13, i8 0, i64 16, i1 false) #12, !alias.scope !12
  %14 = getelementptr inbounds %"class.absl::strings_internal::SplitIterator", %"class.absl::strings_internal::SplitIterator"* %5, i64 0, i32 4
  store %"class.absl::strings_internal::Splitter"* %2, %"class.absl::strings_internal::Splitter"** %14, align 8, !alias.scope !12
  %15 = getelementptr inbounds %"class.absl::strings_internal::SplitIterator", %"class.absl::strings_internal::SplitIterator"* %5, i64 0, i32 5, i32 0
  %16 = getelementptr inbounds %"class.absl::strings_internal::Splitter", %"class.absl::strings_internal::Splitter"* %2, i64 0, i32 1, i32 0
  %17 = load i8, i8* %16, align 1, !noalias !12
  store i8 %17, i8* %15, align 8, !alias.scope !12
  %18 = getelementptr inbounds %"class.absl::strings_internal::Splitter", %"class.absl::strings_internal::Splitter"* %2, i64 0, i32 0, i32 0
  %19 = load i8*, i8** %18, align 8, !noalias !12
  %20 = getelementptr inbounds %"class.absl::strings_internal::Splitter", %"class.absl::strings_internal::Splitter"* %2, i64 0, i32 0, i32 1
  %21 = load i64, i64* %20, align 8, !noalias !12
  %22 = icmp eq i8* %19, null
  br i1 %22, label %23, label %24

23:                                               ; preds = %3
  store i32 2, i32* %11, align 8, !alias.scope !12
  store i64 %21, i64* %10, align 8, !alias.scope !12
  br label %59

24:                                               ; preds = %3
  %25 = getelementptr inbounds %"class.absl::strings_internal::SplitIterator", %"class.absl::strings_internal::SplitIterator"* %5, i64 0, i32 5
  %26 = call { i8*, i64 } @_ZNK4absl6ByChar4FindENS_11string_viewEm(%"class.absl::ByChar"* %25, i8* nonnull %19, i64 %21, i64 0) #12
  %27 = extractvalue { i8*, i64 } %26, 0
  %28 = extractvalue { i8*, i64 } %26, 1
  %29 = getelementptr inbounds i8, i8* %19, i64 %21
  %30 = icmp eq i8* %27, %29
  br i1 %30, label %31, label %32

31:                                               ; preds = %24
  store i32 1, i32* %11, align 8, !alias.scope !12
  br label %32

32:                                               ; preds = %31, %24
  %33 = load i64, i64* %10, align 8, !alias.scope !12
  %34 = getelementptr inbounds i8, i8* %19, i64 %33
  %35 = ptrtoint i8* %27 to i64
  %36 = ptrtoint i8* %34 to i64
  %37 = sub i64 %35, %36
  %38 = icmp ult i64 %21, %33
  br i1 %38, label %39, label %40, !prof !2

39:                                               ; preds = %32
  call void @_ZN4absl13base_internal18ThrowStdOutOfRangeEPKc(i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.1, i64 0, i64 0)) #14
  unreachable

40:                                               ; preds = %32
  %41 = sub i64 %21, %33
  %42 = icmp ugt i64 %41, %37
  %43 = select i1 %42, i64 %37, i64 %41
  %44 = icmp sgt i64 %43, -1
  br i1 %44, label %46, label %45, !prof !3

45:                                               ; preds = %40
  call void @llvm.trap() #12
  unreachable

46:                                               ; preds = %40
  %47 = getelementptr inbounds %"class.absl::strings_internal::SplitIterator", %"class.absl::strings_internal::SplitIterator"* %5, i64 0, i32 3, i32 0
  store i8* %34, i8** %47, align 8, !alias.scope !12
  %48 = getelementptr inbounds %"class.absl::strings_internal::SplitIterator", %"class.absl::strings_internal::SplitIterator"* %5, i64 0, i32 3, i32 1
  store i64 %43, i64* %48, align 8, !alias.scope !12
  %49 = add i64 %33, %28
  %50 = add i64 %49, %43
  %51 = load i32, i32* %11, align 8
  store i64 %50, i64* %10, align 8, !alias.scope !12
  %52 = icmp eq i32 %51, 2
  br i1 %52, label %59, label %53

53:                                               ; preds = %46
  %54 = bitcast %"class.absl::string_view"* %12 to i64*
  %55 = getelementptr inbounds %"class.absl::strings_internal::SplitIterator", %"class.absl::strings_internal::SplitIterator"* %5, i64 0, i32 3, i32 1
  %56 = getelementptr inbounds %"class.absl::strings_internal::SplitIterator", %"class.absl::strings_internal::SplitIterator"* %5, i64 0, i32 5
  %57 = getelementptr inbounds %"class.absl::strings_internal::SplitIterator", %"class.absl::strings_internal::SplitIterator"* %5, i64 0, i32 3, i32 0
  %58 = getelementptr inbounds %"struct.std::__1::array", %"struct.std::__1::array"* %4, i64 0, i32 0, i64 0
  br label %60

59:                                               ; preds = %111, %23, %46
  call void @llvm.lifetime.end.p0i8(i64 48, i8* nonnull %9) #12
  call void @llvm.lifetime.end.p0i8(i64 256, i8* nonnull %8) #12
  ret void

60:                                               ; preds = %106, %53
  %61 = phi i32 [ %51, %53 ], [ %107, %106 ]
  %62 = phi i64 [ %43, %53 ], [ %108, %106 ]
  %63 = phi i64 [ %36, %53 ], [ %109, %106 ]
  %64 = phi i64 [ 0, %53 ], [ %110, %106 ]
  %65 = getelementptr inbounds %"struct.std::__1::array", %"struct.std::__1::array"* %4, i64 0, i32 0, i64 %64
  %66 = bitcast %struct.raw_view* %65 to i64*
  store i64 %63, i64* %66, align 8
  %67 = getelementptr inbounds %"struct.std::__1::array", %"struct.std::__1::array"* %4, i64 0, i32 0, i64 %64, i32 1
  store i64 %62, i64* %67, align 8
  %68 = icmp eq i32 %61, 1
  br i1 %68, label %69, label %71

69:                                               ; preds = %60
  store i32 2, i32* %11, align 8
  %70 = add nuw nsw i64 %64, 1
  br label %111

71:                                               ; preds = %60
  %72 = load %"class.absl::strings_internal::Splitter"*, %"class.absl::strings_internal::Splitter"** %14, align 8
  %73 = getelementptr inbounds %"class.absl::strings_internal::Splitter", %"class.absl::strings_internal::Splitter"* %72, i64 0, i32 0, i32 0
  %74 = load i8*, i8** %73, align 8
  %75 = getelementptr inbounds %"class.absl::strings_internal::Splitter", %"class.absl::strings_internal::Splitter"* %72, i64 0, i32 0, i32 1
  %76 = load i64, i64* %75, align 8
  %77 = load i64, i64* %10, align 8
  %78 = call { i8*, i64 } @_ZNK4absl6ByChar4FindENS_11string_viewEm(%"class.absl::ByChar"* %56, i8* %74, i64 %76, i64 %77) #12
  %79 = extractvalue { i8*, i64 } %78, 0
  %80 = extractvalue { i8*, i64 } %78, 1
  %81 = getelementptr inbounds i8, i8* %74, i64 %76
  %82 = icmp eq i8* %79, %81
  br i1 %82, label %83, label %84

83:                                               ; preds = %71
  store i32 1, i32* %11, align 8
  br label %84

84:                                               ; preds = %83, %71
  %85 = load i64, i64* %10, align 8
  %86 = getelementptr inbounds i8, i8* %74, i64 %85
  %87 = ptrtoint i8* %79 to i64
  %88 = ptrtoint i8* %86 to i64
  %89 = sub i64 %87, %88
  %90 = icmp ult i64 %76, %85
  br i1 %90, label %91, label %92, !prof !2

91:                                               ; preds = %84
  call void @_ZN4absl13base_internal18ThrowStdOutOfRangeEPKc(i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.1, i64 0, i64 0)) #14
  unreachable

92:                                               ; preds = %84
  %93 = sub i64 %76, %85
  %94 = icmp ugt i64 %93, %89
  %95 = select i1 %94, i64 %89, i64 %93
  %96 = icmp sgt i64 %95, -1
  br i1 %96, label %98, label %97, !prof !3

97:                                               ; preds = %92
  call void @llvm.trap() #12
  unreachable

98:                                               ; preds = %92
  store i8* %86, i8** %57, align 8
  store i64 %95, i64* %55, align 8
  %99 = add i64 %85, %80
  %100 = add i64 %99, %95
  store i64 %100, i64* %10, align 8
  %101 = load i32, i32* %11, align 8
  %102 = add nuw nsw i64 %64, 1
  %103 = icmp eq i64 %102, 16
  %104 = icmp eq i32 %101, 2
  %105 = or i1 %103, %104
  br i1 %105, label %111, label %106

106:                                              ; preds = %98, %118
  %107 = phi i32 [ %101, %98 ], [ %116, %118 ]
  %108 = phi i64 [ %95, %98 ], [ %120, %118 ]
  %109 = phi i64 [ %88, %98 ], [ %119, %118 ]
  %110 = phi i64 [ %102, %98 ], [ 0, %118 ]
  br label %60

111:                                              ; preds = %98, %69
  %112 = phi i64 [ %70, %69 ], [ %102, %98 ]
  %113 = load %"class.absl::string_view"*, %"class.absl::string_view"** %6, align 8
  %114 = getelementptr inbounds %"struct.std::__1::array", %"struct.std::__1::array"* %4, i64 0, i32 0, i64 %112
  %115 = call %"class.absl::string_view"* @_ZNSt3__16vectorIN4absl11string_viewENS_9allocatorIS2_EEE6insertIPZNKS1_16strings_internal8SplitterINS1_6ByCharENS1_10AllowEmptyES2_E18ConvertToContainerIS5_S2_Lb0EEclERKSB_E8raw_viewEENS_9enable_ifIXaasr27__is_cpp17_forward_iteratorIT_EE5valuesr16is_constructibleIS2_NS_15iterator_traitsISJ_E9referenceEEE5valueENS_11__wrap_iterIPS2_EEE4typeENSN_IPKS2_EESJ_SJ_(%"class.std::__1::vector.6"* %0, %"class.absl::string_view"* %113, %struct.raw_view* nonnull %58, %struct.raw_view* %114)
  %116 = load i32, i32* %11, align 8
  %117 = icmp eq i32 %116, 2
  br i1 %117, label %59, label %118

118:                                              ; preds = %111
  %119 = load i64, i64* %54, align 8
  %120 = load i64, i64* %55, align 8
  br label %106
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden %"class.absl::string_view"* @_ZNSt3__16vectorIN4absl11string_viewENS_9allocatorIS2_EEE6insertIPZNKS1_16strings_internal8SplitterINS1_6ByCharENS1_10AllowEmptyES2_E18ConvertToContainerIS5_S2_Lb0EEclERKSB_E8raw_viewEENS_9enable_ifIXaasr27__is_cpp17_forward_iteratorIT_EE5valuesr16is_constructibleIS2_NS_15iterator_traitsISJ_E9referenceEEE5valueENS_11__wrap_iterIPS2_EEE4typeENSN_IPKS2_EESJ_SJ_(%"class.std::__1::vector.6"*, %"class.absl::string_view"*, %struct.raw_view*, %struct.raw_view*) local_unnamed_addr #2 comdat align 2 {
  %5 = ptrtoint %"class.absl::string_view"* %1 to i64
  %6 = getelementptr inbounds %"class.std::__1::vector.6", %"class.std::__1::vector.6"* %0, i64 0, i32 0, i32 0
  %7 = ptrtoint %struct.raw_view* %3 to i64
  %8 = ptrtoint %struct.raw_view* %2 to i64
  %9 = sub i64 %7, %8
  %10 = ashr exact i64 %9, 4
  %11 = icmp sgt i64 %9, 0
  br i1 %11, label %12, label %256

12:                                               ; preds = %4
  %13 = getelementptr inbounds %"class.std::__1::vector.6", %"class.std::__1::vector.6"* %0, i64 0, i32 0, i32 2, i32 0, i32 0
  %14 = bitcast %"class.absl::string_view"** %13 to i64*
  %15 = load i64, i64* %14, align 8
  %16 = getelementptr inbounds %"class.std::__1::vector.6", %"class.std::__1::vector.6"* %0, i64 0, i32 0, i32 1
  %17 = load %"class.absl::string_view"*, %"class.absl::string_view"** %16, align 8
  %18 = ptrtoint %"class.absl::string_view"* %17 to i64
  %19 = sub i64 %15, %18
  %20 = ashr exact i64 %19, 4
  %21 = icmp sgt i64 %10, %20
  %22 = bitcast %"class.absl::string_view"** %16 to i64*
  br i1 %21, label %136, label %23

23:                                               ; preds = %12
  %24 = sub i64 %18, %5
  %25 = ashr exact i64 %24, 4
  %26 = icmp sgt i64 %10, %25
  br i1 %26, label %27, label %52

27:                                               ; preds = %23
  %28 = getelementptr inbounds %struct.raw_view, %struct.raw_view* %2, i64 %25
  %29 = icmp eq %struct.raw_view* %28, %3
  br i1 %29, label %47, label %30

30:                                               ; preds = %27, %37
  %31 = phi %"class.absl::string_view"* [ %43, %37 ], [ %17, %27 ]
  %32 = phi %struct.raw_view* [ %42, %37 ], [ %28, %27 ]
  %33 = getelementptr inbounds %struct.raw_view, %struct.raw_view* %32, i64 0, i32 1
  %34 = load i64, i64* %33, align 8
  %35 = icmp sgt i64 %34, -1
  br i1 %35, label %37, label %36, !prof !3

36:                                               ; preds = %30
  tail call void @llvm.trap() #12
  unreachable

37:                                               ; preds = %30
  %38 = bitcast %struct.raw_view* %32 to i64*
  %39 = load i64, i64* %38, align 8
  %40 = bitcast %"class.absl::string_view"* %31 to i64*
  store i64 %39, i64* %40, align 8
  %41 = getelementptr inbounds %"class.absl::string_view", %"class.absl::string_view"* %31, i64 0, i32 1
  store i64 %34, i64* %41, align 8
  %42 = getelementptr inbounds %struct.raw_view, %struct.raw_view* %32, i64 1
  %43 = getelementptr inbounds %"class.absl::string_view", %"class.absl::string_view"* %31, i64 1
  %44 = icmp eq %struct.raw_view* %42, %3
  br i1 %44, label %45, label %30

45:                                               ; preds = %37
  %46 = ptrtoint %"class.absl::string_view"* %43 to i64
  br label %47

47:                                               ; preds = %45, %27
  %48 = phi i64 [ %18, %27 ], [ %46, %45 ]
  store i64 %48, i64* %22, align 8
  %49 = icmp sgt i64 %24, 0
  br i1 %49, label %50, label %256

50:                                               ; preds = %47
  %51 = inttoptr i64 %48 to %"class.absl::string_view"*
  br label %52

52:                                               ; preds = %50, %23
  %53 = phi i64 [ %48, %50 ], [ %18, %23 ]
  %54 = phi %"class.absl::string_view"* [ %51, %50 ], [ %17, %23 ]
  %55 = phi %struct.raw_view* [ %28, %50 ], [ %3, %23 ]
  %56 = getelementptr inbounds %"class.absl::string_view", %"class.absl::string_view"* %1, i64 %10
  %57 = ptrtoint %"class.absl::string_view"* %56 to i64
  %58 = sub i64 %53, %57
  %59 = ashr exact i64 %58, 4
  %60 = getelementptr inbounds %"class.absl::string_view", %"class.absl::string_view"* %1, i64 %59
  %61 = icmp ult %"class.absl::string_view"* %60, %17
  br i1 %61, label %62, label %91

62:                                               ; preds = %52
  %63 = sub nsw i64 0, %59
  %64 = getelementptr %"class.absl::string_view", %"class.absl::string_view"* %17, i64 %63, i32 0
  %65 = bitcast i8** %64 to i8*
  %66 = xor i64 %5, -1
  %67 = getelementptr i8, i8* %65, i64 %66
  %68 = ptrtoint i8* %67 to i64
  %69 = lshr i64 %68, 4
  %70 = add nuw nsw i64 %69, 1
  %71 = and i64 %70, 3
  %72 = icmp eq i64 %71, 0
  br i1 %72, label %83, label %73

73:                                               ; preds = %62, %73
  %74 = phi %"class.absl::string_view"* [ %80, %73 ], [ %54, %62 ]
  %75 = phi %"class.absl::string_view"* [ %79, %73 ], [ %60, %62 ]
  %76 = phi i64 [ %81, %73 ], [ %71, %62 ]
  %77 = bitcast %"class.absl::string_view"* %74 to i8*
  %78 = bitcast %"class.absl::string_view"* %75 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %77, i8* align 8 %78, i64 16, i1 false) #12
  %79 = getelementptr inbounds %"class.absl::string_view", %"class.absl::string_view"* %75, i64 1
  %80 = getelementptr inbounds %"class.absl::string_view", %"class.absl::string_view"* %74, i64 1
  %81 = add i64 %76, -1
  %82 = icmp eq i64 %81, 0
  br i1 %82, label %83, label %73, !llvm.loop !15

83:                                               ; preds = %73, %62
  %84 = phi %"class.absl::string_view"* [ %54, %62 ], [ %80, %73 ]
  %85 = phi %"class.absl::string_view"* [ %60, %62 ], [ %79, %73 ]
  %86 = phi %"class.absl::string_view"* [ undef, %62 ], [ %80, %73 ]
  %87 = icmp ult i8* %67, inttoptr (i64 48 to i8*)
  br i1 %87, label %88, label %99

88:                                               ; preds = %99, %83
  %89 = phi %"class.absl::string_view"* [ %86, %83 ], [ %117, %99 ]
  %90 = ptrtoint %"class.absl::string_view"* %89 to i64
  br label %91

91:                                               ; preds = %88, %52
  %92 = phi i64 [ %90, %88 ], [ %53, %52 ]
  store i64 %92, i64* %22, align 8
  %93 = icmp eq i64 %58, 0
  br i1 %93, label %119, label %94

94:                                               ; preds = %91
  %95 = sub nsw i64 0, %59
  %96 = getelementptr inbounds %"class.absl::string_view", %"class.absl::string_view"* %54, i64 %95
  %97 = bitcast %"class.absl::string_view"* %96 to i8*
  %98 = bitcast %"class.absl::string_view"* %1 to i8*
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* align 8 %97, i8* align 8 %98, i64 %58, i1 false) #12
  br label %119

99:                                               ; preds = %83, %99
  %100 = phi %"class.absl::string_view"* [ %117, %99 ], [ %84, %83 ]
  %101 = phi %"class.absl::string_view"* [ %116, %99 ], [ %85, %83 ]
  %102 = bitcast %"class.absl::string_view"* %100 to i8*
  %103 = bitcast %"class.absl::string_view"* %101 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %102, i8* align 8 %103, i64 16, i1 false) #12
  %104 = getelementptr inbounds %"class.absl::string_view", %"class.absl::string_view"* %101, i64 1
  %105 = getelementptr inbounds %"class.absl::string_view", %"class.absl::string_view"* %100, i64 1
  %106 = bitcast %"class.absl::string_view"* %105 to i8*
  %107 = bitcast %"class.absl::string_view"* %104 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %106, i8* align 8 %107, i64 16, i1 false) #12
  %108 = getelementptr inbounds %"class.absl::string_view", %"class.absl::string_view"* %101, i64 2
  %109 = getelementptr inbounds %"class.absl::string_view", %"class.absl::string_view"* %100, i64 2
  %110 = bitcast %"class.absl::string_view"* %109 to i8*
  %111 = bitcast %"class.absl::string_view"* %108 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %110, i8* align 8 %111, i64 16, i1 false) #12
  %112 = getelementptr inbounds %"class.absl::string_view", %"class.absl::string_view"* %101, i64 3
  %113 = getelementptr inbounds %"class.absl::string_view", %"class.absl::string_view"* %100, i64 3
  %114 = bitcast %"class.absl::string_view"* %113 to i8*
  %115 = bitcast %"class.absl::string_view"* %112 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %114, i8* align 8 %115, i64 16, i1 false) #12
  %116 = getelementptr inbounds %"class.absl::string_view", %"class.absl::string_view"* %101, i64 4
  %117 = getelementptr inbounds %"class.absl::string_view", %"class.absl::string_view"* %100, i64 4
  %118 = icmp ult %"class.absl::string_view"* %116, %17
  br i1 %118, label %99, label %88

119:                                              ; preds = %91, %94
  %120 = icmp eq %struct.raw_view* %55, %2
  br i1 %120, label %256, label %121

121:                                              ; preds = %119, %128
  %122 = phi %struct.raw_view* [ %133, %128 ], [ %2, %119 ]
  %123 = phi %"class.absl::string_view"* [ %134, %128 ], [ %1, %119 ]
  %124 = getelementptr inbounds %struct.raw_view, %struct.raw_view* %122, i64 0, i32 1
  %125 = load i64, i64* %124, align 8
  %126 = icmp sgt i64 %125, -1
  br i1 %126, label %128, label %127, !prof !3

127:                                              ; preds = %121
  tail call void @llvm.trap() #12
  unreachable

128:                                              ; preds = %121
  %129 = bitcast %struct.raw_view* %122 to i64*
  %130 = load i64, i64* %129, align 8
  %131 = bitcast %"class.absl::string_view"* %123 to i64*
  store i64 %130, i64* %131, align 8
  %132 = getelementptr inbounds %"class.absl::string_view", %"class.absl::string_view"* %123, i64 0, i32 1
  store i64 %125, i64* %132, align 8
  %133 = getelementptr inbounds %struct.raw_view, %struct.raw_view* %122, i64 1
  %134 = getelementptr inbounds %"class.absl::string_view", %"class.absl::string_view"* %123, i64 1
  %135 = icmp eq %struct.raw_view* %133, %55
  br i1 %135, label %256, label %121

136:                                              ; preds = %12
  %137 = bitcast %"class.std::__1::vector.6"* %0 to i64*
  %138 = load i64, i64* %137, align 8
  %139 = sub i64 %18, %138
  %140 = ashr exact i64 %139, 4
  %141 = add nsw i64 %140, %10
  %142 = icmp ugt i64 %141, 1152921504606846975
  br i1 %142, label %143, label %145

143:                                              ; preds = %136
  %144 = bitcast %"class.std::__1::vector.6"* %0 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %144) #14
  unreachable

145:                                              ; preds = %136
  %146 = sub i64 %15, %138
  %147 = ashr exact i64 %146, 4
  %148 = icmp ult i64 %147, 576460752303423487
  br i1 %148, label %152, label %149

149:                                              ; preds = %145
  %150 = sub i64 %5, %138
  %151 = ashr exact i64 %150, 4
  br label %162

152:                                              ; preds = %145
  %153 = ashr exact i64 %146, 3
  %154 = icmp ult i64 %153, %141
  %155 = select i1 %154, i64 %141, i64 %153
  %156 = sub i64 %5, %138
  %157 = ashr exact i64 %156, 4
  %158 = icmp eq i64 %155, 0
  br i1 %158, label %168, label %159

159:                                              ; preds = %152
  %160 = icmp ugt i64 %155, 1152921504606846975
  br i1 %160, label %161, label %162

161:                                              ; preds = %159
  tail call void @abort() #14
  unreachable

162:                                              ; preds = %149, %159
  %163 = phi i64 [ 1152921504606846975, %149 ], [ %155, %159 ]
  %164 = phi i64 [ %151, %149 ], [ %157, %159 ]
  %165 = shl i64 %163, 4
  %166 = tail call i8* @_Znwm(i64 %165) #15
  %167 = bitcast i8* %166 to %"class.absl::string_view"*
  br label %168

168:                                              ; preds = %162, %152
  %169 = phi i64 [ %164, %162 ], [ %157, %152 ]
  %170 = phi i64 [ %163, %162 ], [ 0, %152 ]
  %171 = phi %"class.absl::string_view"* [ %167, %162 ], [ null, %152 ]
  %172 = getelementptr inbounds %"class.absl::string_view", %"class.absl::string_view"* %171, i64 %169
  %173 = getelementptr inbounds %"class.absl::string_view", %"class.absl::string_view"* %171, i64 %170
  %174 = ptrtoint %"class.absl::string_view"* %173 to i64
  %175 = getelementptr inbounds %"class.absl::string_view", %"class.absl::string_view"* %172, i64 %10
  br label %176

176:                                              ; preds = %168, %183
  %177 = phi %"class.absl::string_view"* [ %188, %183 ], [ %172, %168 ]
  %178 = phi %struct.raw_view* [ %189, %183 ], [ %2, %168 ]
  %179 = getelementptr inbounds %struct.raw_view, %struct.raw_view* %178, i64 0, i32 1
  %180 = load i64, i64* %179, align 8
  %181 = icmp sgt i64 %180, -1
  br i1 %181, label %183, label %182, !prof !3

182:                                              ; preds = %176
  tail call void @llvm.trap() #12
  unreachable

183:                                              ; preds = %176
  %184 = bitcast %struct.raw_view* %178 to i64*
  %185 = load i64, i64* %184, align 8
  %186 = bitcast %"class.absl::string_view"* %177 to i64*
  store i64 %185, i64* %186, align 8
  %187 = getelementptr inbounds %"class.absl::string_view", %"class.absl::string_view"* %177, i64 0, i32 1
  store i64 %180, i64* %187, align 8
  %188 = getelementptr inbounds %"class.absl::string_view", %"class.absl::string_view"* %177, i64 1
  %189 = getelementptr inbounds %struct.raw_view, %struct.raw_view* %178, i64 1
  %190 = icmp eq %"class.absl::string_view"* %175, %188
  br i1 %190, label %191, label %176

191:                                              ; preds = %183
  %192 = load %"class.absl::string_view"*, %"class.absl::string_view"** %6, align 8
  %193 = ptrtoint %"class.absl::string_view"* %192 to i64
  %194 = sub i64 %5, %193
  %195 = ashr exact i64 %194, 4
  %196 = sub nsw i64 0, %195
  %197 = getelementptr inbounds %"class.absl::string_view", %"class.absl::string_view"* %172, i64 %196
  %198 = ptrtoint %"class.absl::string_view"* %197 to i64
  %199 = icmp sgt i64 %194, 0
  br i1 %199, label %200, label %203

200:                                              ; preds = %191
  %201 = bitcast %"class.absl::string_view"* %197 to i8*
  %202 = bitcast %"class.absl::string_view"* %192 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %201, i8* align 8 %202, i64 %194, i1 false) #12
  br label %203

203:                                              ; preds = %200, %191
  %204 = load %"class.absl::string_view"*, %"class.absl::string_view"** %16, align 8
  %205 = icmp eq %"class.absl::string_view"* %204, %1
  br i1 %205, label %249, label %206

206:                                              ; preds = %203
  %207 = getelementptr %"class.absl::string_view", %"class.absl::string_view"* %204, i64 -1, i32 0
  %208 = ptrtoint i8** %207 to i64
  %209 = sub i64 %208, %5
  %210 = lshr i64 %209, 4
  %211 = add nuw nsw i64 %210, 1
  %212 = and i64 %211, 3
  %213 = icmp eq i64 %212, 0
  br i1 %213, label %224, label %214

214:                                              ; preds = %206, %214
  %215 = phi %"class.absl::string_view"* [ %221, %214 ], [ %175, %206 ]
  %216 = phi %"class.absl::string_view"* [ %220, %214 ], [ %1, %206 ]
  %217 = phi i64 [ %222, %214 ], [ %212, %206 ]
  %218 = bitcast %"class.absl::string_view"* %215 to i8*
  %219 = bitcast %"class.absl::string_view"* %216 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %218, i8* align 8 %219, i64 16, i1 false) #12
  %220 = getelementptr inbounds %"class.absl::string_view", %"class.absl::string_view"* %216, i64 1
  %221 = getelementptr inbounds %"class.absl::string_view", %"class.absl::string_view"* %215, i64 1
  %222 = add i64 %217, -1
  %223 = icmp eq i64 %222, 0
  br i1 %223, label %224, label %214, !llvm.loop !16

224:                                              ; preds = %214, %206
  %225 = phi %"class.absl::string_view"* [ undef, %206 ], [ %221, %214 ]
  %226 = phi %"class.absl::string_view"* [ %175, %206 ], [ %221, %214 ]
  %227 = phi %"class.absl::string_view"* [ %1, %206 ], [ %220, %214 ]
  %228 = icmp ult i64 %209, 48
  br i1 %228, label %249, label %229

229:                                              ; preds = %224, %229
  %230 = phi %"class.absl::string_view"* [ %247, %229 ], [ %226, %224 ]
  %231 = phi %"class.absl::string_view"* [ %246, %229 ], [ %227, %224 ]
  %232 = bitcast %"class.absl::string_view"* %230 to i8*
  %233 = bitcast %"class.absl::string_view"* %231 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %232, i8* align 8 %233, i64 16, i1 false) #12
  %234 = getelementptr inbounds %"class.absl::string_view", %"class.absl::string_view"* %231, i64 1
  %235 = getelementptr inbounds %"class.absl::string_view", %"class.absl::string_view"* %230, i64 1
  %236 = bitcast %"class.absl::string_view"* %235 to i8*
  %237 = bitcast %"class.absl::string_view"* %234 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %236, i8* align 8 %237, i64 16, i1 false) #12
  %238 = getelementptr inbounds %"class.absl::string_view", %"class.absl::string_view"* %231, i64 2
  %239 = getelementptr inbounds %"class.absl::string_view", %"class.absl::string_view"* %230, i64 2
  %240 = bitcast %"class.absl::string_view"* %239 to i8*
  %241 = bitcast %"class.absl::string_view"* %238 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %240, i8* align 8 %241, i64 16, i1 false) #12
  %242 = getelementptr inbounds %"class.absl::string_view", %"class.absl::string_view"* %231, i64 3
  %243 = getelementptr inbounds %"class.absl::string_view", %"class.absl::string_view"* %230, i64 3
  %244 = bitcast %"class.absl::string_view"* %243 to i8*
  %245 = bitcast %"class.absl::string_view"* %242 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %244, i8* align 8 %245, i64 16, i1 false) #12
  %246 = getelementptr inbounds %"class.absl::string_view", %"class.absl::string_view"* %231, i64 4
  %247 = getelementptr inbounds %"class.absl::string_view", %"class.absl::string_view"* %230, i64 4
  %248 = icmp eq %"class.absl::string_view"* %246, %204
  br i1 %248, label %249, label %229

249:                                              ; preds = %224, %229, %203
  %250 = phi %"class.absl::string_view"* [ %175, %203 ], [ %225, %224 ], [ %247, %229 ]
  %251 = ptrtoint %"class.absl::string_view"* %250 to i64
  %252 = load %"class.absl::string_view"*, %"class.absl::string_view"** %6, align 8
  store i64 %198, i64* %137, align 8
  store i64 %251, i64* %22, align 8
  store i64 %174, i64* %14, align 8
  %253 = icmp eq %"class.absl::string_view"* %252, null
  br i1 %253, label %256, label %254

254:                                              ; preds = %249
  %255 = bitcast %"class.absl::string_view"* %252 to i8*
  tail call void @_ZdlPv(i8* %255) #15
  br label %256

256:                                              ; preds = %128, %254, %249, %47, %119, %4
  %257 = phi %"class.absl::string_view"* [ %1, %4 ], [ %1, %119 ], [ %1, %47 ], [ %172, %249 ], [ %172, %254 ], [ %1, %128 ]
  ret %"class.absl::string_view"* %257
}

declare { i8*, i64 } @_ZNK4absl6ByChar4FindENS_11string_viewEm(%"class.absl::ByChar"*, i8*, i64, i64) local_unnamed_addr #3

; Function Attrs: argmemonly nounwind
declare void @llvm.memmove.p0i8.p0i8.i64(i8* nocapture, i8* nocapture readonly, i64, i1 immarg) #1

; Function Attrs: noreturn
declare void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"*) local_unnamed_addr #8

attributes #0 = { nofree norecurse nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { norecurse nounwind readnone ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind readonly ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nounwind readnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { cold noreturn nounwind }
attributes #8 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #9 = { noreturn nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #10 = { nobuiltin nofree "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #11 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #12 = { nounwind }
attributes #13 = { nounwind readnone }
attributes #14 = { noreturn nounwind }
attributes #15 = { builtin nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{!"branch_weights", i32 1, i32 2000}
!3 = !{!"branch_weights", i32 2000, i32 1}
!4 = distinct !{!4, !5}
!5 = !{!"llvm.loop.unroll.disable"}
!6 = !{!7}
!7 = distinct !{!7, !8, !"_ZN4absl8StrSplitIcEENS_16strings_internal8SplitterINS1_15SelectDelimiterIT_E4typeENS_10AllowEmptyENS_11string_viewEEENS1_23ConvertibleToStringViewES4_: argument 0"}
!8 = distinct !{!8, !"_ZN4absl8StrSplitIcEENS_16strings_internal8SplitterINS1_15SelectDelimiterIT_E4typeENS_10AllowEmptyENS_11string_viewEEENS1_23ConvertibleToStringViewES4_"}
!9 = !{!10}
!10 = distinct !{!10, !11, !"_ZNK4absl16strings_internal8SplitterINS_6ByCharENS_10AllowEmptyENS_11string_viewEEcvT_INSt3__16vectorIS4_NS8_9allocatorIS4_EEEEvEEv: argument 0"}
!11 = distinct !{!11, !"_ZNK4absl16strings_internal8SplitterINS_6ByCharENS_10AllowEmptyENS_11string_viewEEcvT_INSt3__16vectorIS4_NS8_9allocatorIS4_EEEEvEEv"}
!12 = !{!13}
!13 = distinct !{!13, !14, !"_ZNK4absl16strings_internal8SplitterINS_6ByCharENS_10AllowEmptyENS_11string_viewEE5beginEv: argument 0"}
!14 = distinct !{!14, !"_ZNK4absl16strings_internal8SplitterINS_6ByCharENS_10AllowEmptyENS_11string_viewEE5beginEv"}
!15 = distinct !{!15, !5}
!16 = distinct !{!16, !5}
