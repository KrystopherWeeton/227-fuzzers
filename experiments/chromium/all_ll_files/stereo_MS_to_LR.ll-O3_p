; ModuleID = '../../third_party/opus/src/silk/stereo_MS_to_LR.c'
source_filename = "../../third_party/opus/src/silk/stereo_MS_to_LR.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"
module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%struct.stereo_dec_state = type { [2 x i16], [2 x i16], [2 x i16] }

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @silk_stereo_MS_to_LR(%struct.stereo_dec_state* nocapture, i16* nocapture, i16* nocapture, i32* nocapture readonly, i32, i32) local_unnamed_addr #0 {
  %7 = getelementptr inbounds %struct.stereo_dec_state, %struct.stereo_dec_state* %0, i64 0, i32 1, i64 0
  %8 = bitcast i16* %7 to i32*
  %9 = bitcast i16* %1 to i32*
  %10 = load i32, i32* %8, align 2
  store i32 %10, i32* %9, align 2
  %11 = getelementptr inbounds %struct.stereo_dec_state, %struct.stereo_dec_state* %0, i64 0, i32 2, i64 0
  %12 = bitcast i16* %11 to i32*
  %13 = bitcast i16* %2 to i32*
  %14 = load i32, i32* %12, align 2
  store i32 %14, i32* %13, align 2
  %15 = sext i32 %5 to i64
  %16 = getelementptr inbounds i16, i16* %1, i64 %15
  %17 = bitcast i16* %16 to i32*
  %18 = load i32, i32* %17, align 2
  store i32 %18, i32* %8, align 2
  %19 = getelementptr inbounds i16, i16* %2, i64 %15
  %20 = bitcast i16* %19 to i32*
  %21 = load i32, i32* %20, align 2
  store i32 %21, i32* %12, align 2
  %22 = getelementptr inbounds %struct.stereo_dec_state, %struct.stereo_dec_state* %0, i64 0, i32 0, i64 0
  %23 = load i16, i16* %22, align 2
  %24 = getelementptr inbounds %struct.stereo_dec_state, %struct.stereo_dec_state* %0, i64 0, i32 0, i64 1
  %25 = load i16, i16* %24, align 2
  %26 = shl i32 %4, 3
  %27 = sdiv i32 65536, %26
  %28 = load i32, i32* %3, align 4
  %29 = trunc i32 %28 to i16
  %30 = sub i16 %29, %23
  %31 = sext i16 %30 to i32
  %32 = shl i32 %27, 16
  %33 = ashr exact i32 %32, 16
  %34 = mul nsw i32 %33, %31
  %35 = ashr i32 %34, 15
  %36 = add nsw i32 %35, 1
  %37 = ashr i32 %36, 1
  %38 = getelementptr inbounds i32, i32* %3, i64 1
  %39 = load i32, i32* %38, align 4
  %40 = trunc i32 %39 to i16
  %41 = sub i16 %40, %25
  %42 = sext i16 %41 to i32
  %43 = mul nsw i32 %33, %42
  %44 = ashr i32 %43, 15
  %45 = add nsw i32 %44, 1
  %46 = ashr i32 %45, 1
  %47 = icmp sgt i32 %4, 0
  br i1 %47, label %48, label %212

48:                                               ; preds = %6
  %49 = sext i16 %25 to i32
  %50 = sext i16 %23 to i32
  %51 = sext i32 %26 to i64
  %52 = icmp sgt i64 %51, 1
  %53 = select i1 %52, i64 %51, i64 1
  %54 = icmp ult i64 %53, 8
  br i1 %54, label %157, label %55

55:                                               ; preds = %48
  %56 = getelementptr i16, i16* %2, i64 1
  %57 = icmp sgt i64 %51, 1
  %58 = select i1 %57, i64 %51, i64 1
  %59 = add nuw nsw i64 %58, 1
  %60 = getelementptr i16, i16* %2, i64 %59
  %61 = or i64 %58, 2
  %62 = getelementptr i16, i16* %1, i64 %61
  %63 = icmp ult i16* %56, %62
  %64 = icmp ugt i16* %60, %1
  %65 = and i1 %63, %64
  br i1 %65, label %157, label %66

66:                                               ; preds = %55
  %67 = and i64 %53, 9223372036854775800
  %68 = trunc i64 %67 to i32
  %69 = mul i32 %46, %68
  %70 = add i32 %69, %49
  %71 = trunc i64 %67 to i32
  %72 = mul i32 %37, %71
  %73 = add i32 %72, %50
  %74 = insertelement <8 x i32> undef, i32 %49, i32 0
  %75 = shufflevector <8 x i32> %74, <8 x i32> undef, <8 x i32> zeroinitializer
  %76 = insertelement <8 x i32> undef, i32 %46, i32 0
  %77 = shufflevector <8 x i32> %76, <8 x i32> undef, <8 x i32> zeroinitializer
  %78 = mul <8 x i32> %77, <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %79 = add <8 x i32> %75, %78
  %80 = shl nsw i32 %46, 3
  %81 = insertelement <8 x i32> undef, i32 %80, i32 0
  %82 = shufflevector <8 x i32> %81, <8 x i32> undef, <8 x i32> zeroinitializer
  %83 = insertelement <8 x i32> undef, i32 %50, i32 0
  %84 = shufflevector <8 x i32> %83, <8 x i32> undef, <8 x i32> zeroinitializer
  %85 = insertelement <8 x i32> undef, i32 %37, i32 0
  %86 = shufflevector <8 x i32> %85, <8 x i32> undef, <8 x i32> zeroinitializer
  %87 = mul <8 x i32> %86, <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %88 = add <8 x i32> %84, %87
  %89 = shl nsw i32 %37, 3
  %90 = insertelement <8 x i32> undef, i32 %89, i32 0
  %91 = shufflevector <8 x i32> %90, <8 x i32> undef, <8 x i32> zeroinitializer
  %92 = insertelement <8 x i32> undef, i32 %37, i32 0
  %93 = shufflevector <8 x i32> %92, <8 x i32> undef, <8 x i32> zeroinitializer
  %94 = insertelement <8 x i32> undef, i32 %46, i32 0
  %95 = shufflevector <8 x i32> %94, <8 x i32> undef, <8 x i32> zeroinitializer
  br label %96

96:                                               ; preds = %96, %66
  %97 = phi i64 [ 0, %66 ], [ %151, %96 ]
  %98 = phi <8 x i32> [ %79, %66 ], [ %152, %96 ]
  %99 = phi <8 x i32> [ %88, %66 ], [ %153, %96 ]
  %100 = add nsw <8 x i32> %99, %93
  %101 = add nsw <8 x i32> %98, %95
  %102 = getelementptr inbounds i16, i16* %1, i64 %97
  %103 = bitcast i16* %102 to <8 x i16>*
  %104 = load <8 x i16>, <8 x i16>* %103, align 2, !alias.scope !2
  %105 = sext <8 x i16> %104 to <8 x i32>
  %106 = or i64 %97, 2
  %107 = getelementptr inbounds i16, i16* %1, i64 %106
  %108 = bitcast i16* %107 to <8 x i16>*
  %109 = load <8 x i16>, <8 x i16>* %108, align 2, !alias.scope !2
  %110 = sext <8 x i16> %109 to <8 x i32>
  %111 = add nsw <8 x i32> %110, %105
  %112 = or i64 %97, 1
  %113 = getelementptr inbounds i16, i16* %1, i64 %112
  %114 = bitcast i16* %113 to <8 x i16>*
  %115 = load <8 x i16>, <8 x i16>* %114, align 2, !alias.scope !2
  %116 = sext <8 x i16> %115 to <8 x i32>
  %117 = shl nsw <8 x i32> %116, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %118 = add nsw <8 x i32> %111, %117
  %119 = shl nsw <8 x i32> %118, <i32 9, i32 9, i32 9, i32 9, i32 9, i32 9, i32 9, i32 9>
  %120 = getelementptr inbounds i16, i16* %2, i64 %112
  %121 = bitcast i16* %120 to <8 x i16>*
  %122 = load <8 x i16>, <8 x i16>* %121, align 2, !alias.scope !5, !noalias !2
  %123 = sext <8 x i16> %122 to <8 x i32>
  %124 = shl nsw <8 x i32> %123, <i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8>
  %125 = sext <8 x i32> %119 to <8 x i64>
  %126 = zext <8 x i32> %100 to <8 x i64>
  %127 = shl <8 x i64> %126, <i64 48, i64 48, i64 48, i64 48, i64 48, i64 48, i64 48, i64 48>
  %128 = ashr exact <8 x i64> %127, <i64 48, i64 48, i64 48, i64 48, i64 48, i64 48, i64 48, i64 48>
  %129 = mul nsw <8 x i64> %128, %125
  %130 = lshr <8 x i64> %129, <i64 16, i64 16, i64 16, i64 16, i64 16, i64 16, i64 16, i64 16>
  %131 = trunc <8 x i64> %130 to <8 x i32>
  %132 = shl nsw <8 x i32> %116, <i32 11, i32 11, i32 11, i32 11, i32 11, i32 11, i32 11, i32 11>
  %133 = sext <8 x i32> %132 to <8 x i64>
  %134 = zext <8 x i32> %101 to <8 x i64>
  %135 = shl <8 x i64> %134, <i64 48, i64 48, i64 48, i64 48, i64 48, i64 48, i64 48, i64 48>
  %136 = ashr exact <8 x i64> %135, <i64 48, i64 48, i64 48, i64 48, i64 48, i64 48, i64 48, i64 48>
  %137 = mul nsw <8 x i64> %136, %133
  %138 = lshr <8 x i64> %137, <i64 16, i64 16, i64 16, i64 16, i64 16, i64 16, i64 16, i64 16>
  %139 = trunc <8 x i64> %138 to <8 x i32>
  %140 = add <8 x i32> %124, %139
  %141 = add <8 x i32> %140, %131
  %142 = ashr <8 x i32> %141, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %143 = add nsw <8 x i32> %142, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %144 = lshr <8 x i32> %143, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %145 = icmp sgt <8 x i32> %141, <i32 8388479, i32 8388479, i32 8388479, i32 8388479, i32 8388479, i32 8388479, i32 8388479, i32 8388479>
  %146 = icmp slt <8 x i32> %143, <i32 -65536, i32 -65536, i32 -65536, i32 -65536, i32 -65536, i32 -65536, i32 -65536, i32 -65536>
  %147 = select <8 x i1> %146, <8 x i32> <i32 32768, i32 32768, i32 32768, i32 32768, i32 32768, i32 32768, i32 32768, i32 32768>, <8 x i32> %144
  %148 = select <8 x i1> %145, <8 x i32> <i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767>, <8 x i32> %147
  %149 = trunc <8 x i32> %148 to <8 x i16>
  %150 = bitcast i16* %120 to <8 x i16>*
  store <8 x i16> %149, <8 x i16>* %150, align 2, !alias.scope !5, !noalias !2
  %151 = add i64 %97, 8
  %152 = add <8 x i32> %98, %82
  %153 = add <8 x i32> %99, %91
  %154 = icmp eq i64 %151, %67
  br i1 %154, label %155, label %96, !llvm.loop !7

155:                                              ; preds = %96
  %156 = icmp eq i64 %53, %67
  br i1 %156, label %212, label %157

157:                                              ; preds = %155, %55, %48
  %158 = phi i64 [ 0, %55 ], [ 0, %48 ], [ %67, %155 ]
  %159 = phi i32 [ %49, %55 ], [ %49, %48 ], [ %70, %155 ]
  %160 = phi i32 [ %50, %55 ], [ %50, %48 ], [ %73, %155 ]
  br label %161

161:                                              ; preds = %157, %161
  %162 = phi i64 [ %175, %161 ], [ %158, %157 ]
  %163 = phi i32 [ %166, %161 ], [ %159, %157 ]
  %164 = phi i32 [ %165, %161 ], [ %160, %157 ]
  %165 = add nsw i32 %164, %37
  %166 = add nsw i32 %163, %46
  %167 = getelementptr inbounds i16, i16* %1, i64 %162
  %168 = load i16, i16* %167, align 2
  %169 = sext i16 %168 to i32
  %170 = add nuw nsw i64 %162, 2
  %171 = getelementptr inbounds i16, i16* %1, i64 %170
  %172 = load i16, i16* %171, align 2
  %173 = sext i16 %172 to i32
  %174 = add nsw i32 %173, %169
  %175 = add nuw nsw i64 %162, 1
  %176 = getelementptr inbounds i16, i16* %1, i64 %175
  %177 = load i16, i16* %176, align 2
  %178 = sext i16 %177 to i32
  %179 = shl nsw i32 %178, 1
  %180 = add nsw i32 %174, %179
  %181 = shl nsw i32 %180, 9
  %182 = getelementptr inbounds i16, i16* %2, i64 %175
  %183 = load i16, i16* %182, align 2
  %184 = sext i16 %183 to i32
  %185 = shl nsw i32 %184, 8
  %186 = sext i32 %181 to i64
  %187 = zext i32 %165 to i64
  %188 = shl i64 %187, 48
  %189 = ashr exact i64 %188, 48
  %190 = mul nsw i64 %189, %186
  %191 = lshr i64 %190, 16
  %192 = trunc i64 %191 to i32
  %193 = shl nsw i32 %178, 11
  %194 = sext i32 %193 to i64
  %195 = zext i32 %166 to i64
  %196 = shl i64 %195, 48
  %197 = ashr exact i64 %196, 48
  %198 = mul nsw i64 %197, %194
  %199 = lshr i64 %198, 16
  %200 = trunc i64 %199 to i32
  %201 = add i32 %185, %200
  %202 = add i32 %201, %192
  %203 = ashr i32 %202, 7
  %204 = add nsw i32 %203, 1
  %205 = lshr i32 %204, 1
  %206 = icmp sgt i32 %202, 8388479
  %207 = icmp slt i32 %204, -65536
  %208 = select i1 %207, i32 32768, i32 %205
  %209 = select i1 %206, i32 32767, i32 %208
  %210 = trunc i32 %209 to i16
  store i16 %210, i16* %182, align 2
  %211 = icmp slt i64 %175, %51
  br i1 %211, label %161, label %212, !llvm.loop !9

212:                                              ; preds = %161, %155, %6
  %213 = icmp slt i32 %26, %5
  br i1 %213, label %214, label %337

214:                                              ; preds = %212
  %215 = load i32, i32* %38, align 4
  %216 = load i32, i32* %3, align 4
  %217 = zext i32 %216 to i64
  %218 = shl i64 %217, 48
  %219 = ashr exact i64 %218, 48
  %220 = zext i32 %215 to i64
  %221 = shl i64 %220, 48
  %222 = ashr exact i64 %221, 48
  %223 = sext i32 %26 to i64
  %224 = sub nsw i64 %15, %223
  %225 = icmp ult i64 %224, 8
  br i1 %225, label %294, label %226

226:                                              ; preds = %214
  %227 = or i64 %223, 1
  %228 = getelementptr i16, i16* %2, i64 %227
  %229 = add nsw i64 %15, 1
  %230 = getelementptr i16, i16* %2, i64 %229
  %231 = getelementptr i16, i16* %1, i64 %223
  %232 = add nsw i64 %15, 2
  %233 = getelementptr i16, i16* %1, i64 %232
  %234 = icmp ult i16* %228, %233
  %235 = icmp ult i16* %231, %230
  %236 = and i1 %234, %235
  br i1 %236, label %294, label %237

237:                                              ; preds = %226
  %238 = and i64 %224, -8
  %239 = add nsw i64 %238, %223
  %240 = insertelement <8 x i64> undef, i64 %219, i32 0
  %241 = shufflevector <8 x i64> %240, <8 x i64> undef, <8 x i32> zeroinitializer
  %242 = insertelement <8 x i64> undef, i64 %222, i32 0
  %243 = shufflevector <8 x i64> %242, <8 x i64> undef, <8 x i32> zeroinitializer
  br label %244

244:                                              ; preds = %244, %237
  %245 = phi i64 [ 0, %237 ], [ %290, %244 ]
  %246 = add i64 %245, %223
  %247 = getelementptr inbounds i16, i16* %1, i64 %246
  %248 = bitcast i16* %247 to <8 x i16>*
  %249 = load <8 x i16>, <8 x i16>* %248, align 2, !alias.scope !10
  %250 = sext <8 x i16> %249 to <8 x i32>
  %251 = or i64 %246, 2
  %252 = getelementptr inbounds i16, i16* %1, i64 %251
  %253 = bitcast i16* %252 to <8 x i16>*
  %254 = load <8 x i16>, <8 x i16>* %253, align 2, !alias.scope !10
  %255 = sext <8 x i16> %254 to <8 x i32>
  %256 = add nsw <8 x i32> %255, %250
  %257 = or i64 %246, 1
  %258 = getelementptr inbounds i16, i16* %1, i64 %257
  %259 = bitcast i16* %258 to <8 x i16>*
  %260 = load <8 x i16>, <8 x i16>* %259, align 2, !alias.scope !10
  %261 = sext <8 x i16> %260 to <8 x i32>
  %262 = shl nsw <8 x i32> %261, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %263 = add nsw <8 x i32> %256, %262
  %264 = shl nsw <8 x i32> %263, <i32 9, i32 9, i32 9, i32 9, i32 9, i32 9, i32 9, i32 9>
  %265 = getelementptr inbounds i16, i16* %2, i64 %257
  %266 = bitcast i16* %265 to <8 x i16>*
  %267 = load <8 x i16>, <8 x i16>* %266, align 2, !alias.scope !13, !noalias !10
  %268 = sext <8 x i16> %267 to <8 x i32>
  %269 = shl nsw <8 x i32> %268, <i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8>
  %270 = sext <8 x i32> %264 to <8 x i64>
  %271 = mul nsw <8 x i64> %241, %270
  %272 = lshr <8 x i64> %271, <i64 16, i64 16, i64 16, i64 16, i64 16, i64 16, i64 16, i64 16>
  %273 = trunc <8 x i64> %272 to <8 x i32>
  %274 = shl nsw <8 x i32> %261, <i32 11, i32 11, i32 11, i32 11, i32 11, i32 11, i32 11, i32 11>
  %275 = sext <8 x i32> %274 to <8 x i64>
  %276 = mul nsw <8 x i64> %243, %275
  %277 = lshr <8 x i64> %276, <i64 16, i64 16, i64 16, i64 16, i64 16, i64 16, i64 16, i64 16>
  %278 = trunc <8 x i64> %277 to <8 x i32>
  %279 = add <8 x i32> %269, %278
  %280 = add <8 x i32> %279, %273
  %281 = ashr <8 x i32> %280, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %282 = add nsw <8 x i32> %281, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %283 = lshr <8 x i32> %282, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %284 = icmp sgt <8 x i32> %280, <i32 8388479, i32 8388479, i32 8388479, i32 8388479, i32 8388479, i32 8388479, i32 8388479, i32 8388479>
  %285 = icmp slt <8 x i32> %282, <i32 -65536, i32 -65536, i32 -65536, i32 -65536, i32 -65536, i32 -65536, i32 -65536, i32 -65536>
  %286 = select <8 x i1> %285, <8 x i32> <i32 32768, i32 32768, i32 32768, i32 32768, i32 32768, i32 32768, i32 32768, i32 32768>, <8 x i32> %283
  %287 = select <8 x i1> %284, <8 x i32> <i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767>, <8 x i32> %286
  %288 = trunc <8 x i32> %287 to <8 x i16>
  %289 = bitcast i16* %265 to <8 x i16>*
  store <8 x i16> %288, <8 x i16>* %289, align 2, !alias.scope !13, !noalias !10
  %290 = add i64 %245, 8
  %291 = icmp eq i64 %290, %238
  br i1 %291, label %292, label %244, !llvm.loop !15

292:                                              ; preds = %244
  %293 = icmp eq i64 %224, %238
  br i1 %293, label %337, label %294

294:                                              ; preds = %292, %226, %214
  %295 = phi i64 [ %223, %226 ], [ %223, %214 ], [ %239, %292 ]
  br label %296

296:                                              ; preds = %294, %296
  %297 = phi i64 [ %306, %296 ], [ %295, %294 ]
  %298 = getelementptr inbounds i16, i16* %1, i64 %297
  %299 = load i16, i16* %298, align 2
  %300 = sext i16 %299 to i32
  %301 = add nsw i64 %297, 2
  %302 = getelementptr inbounds i16, i16* %1, i64 %301
  %303 = load i16, i16* %302, align 2
  %304 = sext i16 %303 to i32
  %305 = add nsw i32 %304, %300
  %306 = add nsw i64 %297, 1
  %307 = getelementptr inbounds i16, i16* %1, i64 %306
  %308 = load i16, i16* %307, align 2
  %309 = sext i16 %308 to i32
  %310 = shl nsw i32 %309, 1
  %311 = add nsw i32 %305, %310
  %312 = shl nsw i32 %311, 9
  %313 = getelementptr inbounds i16, i16* %2, i64 %306
  %314 = load i16, i16* %313, align 2
  %315 = sext i16 %314 to i32
  %316 = shl nsw i32 %315, 8
  %317 = sext i32 %312 to i64
  %318 = mul nsw i64 %219, %317
  %319 = lshr i64 %318, 16
  %320 = trunc i64 %319 to i32
  %321 = shl nsw i32 %309, 11
  %322 = sext i32 %321 to i64
  %323 = mul nsw i64 %222, %322
  %324 = lshr i64 %323, 16
  %325 = trunc i64 %324 to i32
  %326 = add i32 %316, %325
  %327 = add i32 %326, %320
  %328 = ashr i32 %327, 7
  %329 = add nsw i32 %328, 1
  %330 = lshr i32 %329, 1
  %331 = icmp sgt i32 %327, 8388479
  %332 = icmp slt i32 %329, -65536
  %333 = select i1 %332, i32 32768, i32 %330
  %334 = select i1 %331, i32 32767, i32 %333
  %335 = trunc i32 %334 to i16
  store i16 %335, i16* %313, align 2
  %336 = icmp eq i64 %306, %15
  br i1 %336, label %337, label %296, !llvm.loop !16

337:                                              ; preds = %296, %292, %212
  %338 = load i32, i32* %3, align 4
  %339 = trunc i32 %338 to i16
  store i16 %339, i16* %22, align 2
  %340 = load i32, i32* %38, align 4
  %341 = trunc i32 %340 to i16
  store i16 %341, i16* %24, align 2
  %342 = icmp sgt i32 %5, 0
  br i1 %342, label %343, label %410

343:                                              ; preds = %337
  %344 = zext i32 %5 to i64
  %345 = icmp ult i32 %5, 8
  br i1 %345, label %386, label %346

346:                                              ; preds = %343
  %347 = getelementptr i16, i16* %1, i64 1
  %348 = add nuw nsw i64 %344, 1
  %349 = getelementptr i16, i16* %1, i64 %348
  %350 = getelementptr i16, i16* %2, i64 1
  %351 = getelementptr i16, i16* %2, i64 %348
  %352 = icmp ult i16* %347, %351
  %353 = icmp ult i16* %350, %349
  %354 = and i1 %352, %353
  br i1 %354, label %386, label %355

355:                                              ; preds = %346
  %356 = and i64 %344, 4294967288
  br label %357

357:                                              ; preds = %357, %355
  %358 = phi i64 [ 0, %355 ], [ %382, %357 ]
  %359 = or i64 %358, 1
  %360 = getelementptr inbounds i16, i16* %1, i64 %359
  %361 = bitcast i16* %360 to <8 x i16>*
  %362 = load <8 x i16>, <8 x i16>* %361, align 2, !alias.scope !17, !noalias !20
  %363 = sext <8 x i16> %362 to <8 x i32>
  %364 = getelementptr inbounds i16, i16* %2, i64 %359
  %365 = bitcast i16* %364 to <8 x i16>*
  %366 = load <8 x i16>, <8 x i16>* %365, align 2, !alias.scope !20
  %367 = sext <8 x i16> %366 to <8 x i32>
  %368 = add nsw <8 x i32> %367, %363
  %369 = sub nsw <8 x i32> %363, %367
  %370 = icmp sgt <8 x i32> %368, <i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768>
  %371 = select <8 x i1> %370, <8 x i32> %368, <8 x i32> <i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768>
  %372 = icmp slt <8 x i32> %371, <i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767>
  %373 = select <8 x i1> %372, <8 x i32> %371, <8 x i32> <i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767>
  %374 = trunc <8 x i32> %373 to <8 x i16>
  %375 = bitcast i16* %360 to <8 x i16>*
  store <8 x i16> %374, <8 x i16>* %375, align 2, !alias.scope !17, !noalias !20
  %376 = icmp sgt <8 x i32> %369, <i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768>
  %377 = select <8 x i1> %376, <8 x i32> %369, <8 x i32> <i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768>
  %378 = icmp slt <8 x i32> %377, <i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767>
  %379 = select <8 x i1> %378, <8 x i32> %377, <8 x i32> <i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767>
  %380 = trunc <8 x i32> %379 to <8 x i16>
  %381 = bitcast i16* %364 to <8 x i16>*
  store <8 x i16> %380, <8 x i16>* %381, align 2, !alias.scope !20
  %382 = add i64 %358, 8
  %383 = icmp eq i64 %382, %356
  br i1 %383, label %384, label %357, !llvm.loop !22

384:                                              ; preds = %357
  %385 = icmp eq i64 %356, %344
  br i1 %385, label %410, label %386

386:                                              ; preds = %384, %346, %343
  %387 = phi i64 [ 0, %346 ], [ 0, %343 ], [ %356, %384 ]
  br label %388

388:                                              ; preds = %386, %388
  %389 = phi i64 [ %390, %388 ], [ %387, %386 ]
  %390 = add nuw nsw i64 %389, 1
  %391 = getelementptr inbounds i16, i16* %1, i64 %390
  %392 = load i16, i16* %391, align 2
  %393 = sext i16 %392 to i32
  %394 = getelementptr inbounds i16, i16* %2, i64 %390
  %395 = load i16, i16* %394, align 2
  %396 = sext i16 %395 to i32
  %397 = add nsw i32 %396, %393
  %398 = sub nsw i32 %393, %396
  %399 = icmp sgt i32 %397, -32768
  %400 = select i1 %399, i32 %397, i32 -32768
  %401 = icmp slt i32 %400, 32767
  %402 = select i1 %401, i32 %400, i32 32767
  %403 = trunc i32 %402 to i16
  store i16 %403, i16* %391, align 2
  %404 = icmp sgt i32 %398, -32768
  %405 = select i1 %404, i32 %398, i32 -32768
  %406 = icmp slt i32 %405, 32767
  %407 = select i1 %406, i32 %405, i32 32767
  %408 = trunc i32 %407 to i16
  store i16 %408, i16* %394, align 2
  %409 = icmp eq i64 %390, %344
  br i1 %409, label %410, label %388, !llvm.loop !23

410:                                              ; preds = %388, %384, %337
  ret void
}

attributes #0 = { nofree norecurse nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{!3}
!3 = distinct !{!3, !4}
!4 = distinct !{!4, !"LVerDomain"}
!5 = !{!6}
!6 = distinct !{!6, !4}
!7 = distinct !{!7, !8}
!8 = !{!"llvm.loop.isvectorized", i32 1}
!9 = distinct !{!9, !8}
!10 = !{!11}
!11 = distinct !{!11, !12}
!12 = distinct !{!12, !"LVerDomain"}
!13 = !{!14}
!14 = distinct !{!14, !12}
!15 = distinct !{!15, !8}
!16 = distinct !{!16, !8}
!17 = !{!18}
!18 = distinct !{!18, !19}
!19 = distinct !{!19, !"LVerDomain"}
!20 = !{!21}
!21 = distinct !{!21, !19}
!22 = distinct !{!22, !8}
!23 = distinct !{!23, !8}
