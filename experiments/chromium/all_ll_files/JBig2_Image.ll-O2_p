; ModuleID = '../../third_party/pdfium/core/fxcodec/jbig2/JBig2_Image.cpp'
source_filename = "../../third_party/pdfium/core/fxcodec/jbig2/JBig2_Image.cpp"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%class.CJBig2_Image = type <{ %"class.fxcrt::MaybeOwned", i32, i32, i32, [4 x i8] }>
%"class.fxcrt::MaybeOwned" = type { %"class.std::__1::unique_ptr", %"class.fxcrt::UnownedPtr" }
%"class.std::__1::unique_ptr" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { i8* }
%"class.fxcrt::UnownedPtr" = type { i8* }
%struct.FX_RECT = type { i32, i32, i32, i32 }

@_ZN12CJBig2_ImageC1Eii = hidden unnamed_addr alias void (%class.CJBig2_Image*, i32, i32), void (%class.CJBig2_Image*, i32, i32)* @_ZN12CJBig2_ImageC2Eii
@_ZN12CJBig2_ImageC1EiiiPh = hidden unnamed_addr alias void (%class.CJBig2_Image*, i32, i32, i32, i8*), void (%class.CJBig2_Image*, i32, i32, i32, i8*)* @_ZN12CJBig2_ImageC2EiiiPh
@_ZN12CJBig2_ImageC1ERKS_ = hidden unnamed_addr alias void (%class.CJBig2_Image*, %class.CJBig2_Image*), void (%class.CJBig2_Image*, %class.CJBig2_Image*)* @_ZN12CJBig2_ImageC2ERKS_
@_ZN12CJBig2_ImageD1Ev = hidden unnamed_addr alias void (%class.CJBig2_Image*), void (%class.CJBig2_Image*)* @_ZN12CJBig2_ImageD2Ev

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN12CJBig2_ImageC2Eii(%class.CJBig2_Image* nocapture, i32, i32) unnamed_addr #0 align 2 {
  %4 = getelementptr inbounds %class.CJBig2_Image, %class.CJBig2_Image* %0, i64 0, i32 1
  %5 = getelementptr inbounds %class.CJBig2_Image, %class.CJBig2_Image* %0, i64 0, i32 2
  %6 = getelementptr inbounds %class.CJBig2_Image, %class.CJBig2_Image* %0, i64 0, i32 3
  %7 = icmp slt i32 %2, 1
  %8 = add i32 %1, -1
  %9 = icmp ugt i32 %8, 2147483615
  %10 = or i1 %9, %7
  %11 = bitcast %class.CJBig2_Image* %0 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %11, i8 0, i64 28, i1 false)
  br i1 %10, label %29, label %12

12:                                               ; preds = %3
  %13 = add nuw nsw i32 %1, 31
  %14 = and i32 %13, -32
  %15 = sdiv i32 2147483616, %14
  %16 = icmp slt i32 %15, %2
  br i1 %16, label %29, label %17

17:                                               ; preds = %12
  store i32 %1, i32* %4, align 8
  store i32 %2, i32* %5, align 4
  %18 = lshr exact i32 %14, 3
  store i32 %18, i32* %6, align 8
  %19 = zext i32 %18 to i64
  %20 = sext i32 %2 to i64
  %21 = tail call i8* @_ZN6pdfium8internal13CallocOrDie2DEmmm(i64 %19, i64 %20, i64 1) #8
  %22 = ptrtoint i8* %21 to i64
  %23 = getelementptr inbounds %class.CJBig2_Image, %class.CJBig2_Image* %0, i64 0, i32 0, i32 1, i32 0
  store i8* %21, i8** %23, align 8
  %24 = getelementptr inbounds %class.CJBig2_Image, %class.CJBig2_Image* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %25 = load i8*, i8** %24, align 8
  %26 = bitcast %class.CJBig2_Image* %0 to i64*
  store i64 %22, i64* %26, align 8
  %27 = icmp eq i8* %25, null
  br i1 %27, label %29, label %28

28:                                               ; preds = %17
  tail call void @_Z7FX_FreePv(i8* nonnull %25) #8
  br label %29

29:                                               ; preds = %28, %17, %12, %3
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

declare i8* @_ZN6pdfium8internal13CallocOrDie2DEmmm(i64, i64, i64) local_unnamed_addr #2

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN12CJBig2_ImageC2EiiiPh(%class.CJBig2_Image* nocapture, i32, i32, i32, i8*) unnamed_addr #0 align 2 {
  %6 = getelementptr inbounds %class.CJBig2_Image, %class.CJBig2_Image* %0, i64 0, i32 1
  %7 = getelementptr inbounds %class.CJBig2_Image, %class.CJBig2_Image* %0, i64 0, i32 2
  %8 = getelementptr inbounds %class.CJBig2_Image, %class.CJBig2_Image* %0, i64 0, i32 3
  %9 = or i32 %2, %1
  %10 = icmp sgt i32 %9, -1
  %11 = icmp ult i32 %3, 268435453
  %12 = and i1 %11, %10
  %13 = and i32 %3, 3
  %14 = icmp eq i32 %13, 0
  %15 = and i1 %12, %14
  %16 = bitcast %class.CJBig2_Image* %0 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %16, i8 0, i64 28, i1 false)
  br i1 %15, label %17, label %26

17:                                               ; preds = %5
  %18 = shl nsw i32 %3, 3
  %19 = icmp slt i32 %18, %1
  br i1 %19, label %26, label %20

20:                                               ; preds = %17
  %21 = udiv i32 2147483616, %18
  %22 = icmp slt i32 %21, %2
  br i1 %22, label %26, label %23

23:                                               ; preds = %20
  store i32 %1, i32* %6, align 8
  store i32 %2, i32* %7, align 4
  store i32 %3, i32* %8, align 8
  %24 = getelementptr inbounds %class.CJBig2_Image, %class.CJBig2_Image* %0, i64 0, i32 0, i32 1, i32 0
  store i8* %4, i8** %24, align 8
  %25 = getelementptr inbounds %class.CJBig2_Image, %class.CJBig2_Image* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0
  store i8* null, i8** %25, align 8
  br label %26

26:                                               ; preds = %23, %20, %17, %5
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN12CJBig2_ImageC2ERKS_(%class.CJBig2_Image* nocapture, %class.CJBig2_Image* nocapture readonly dereferenceable(32)) unnamed_addr #0 align 2 {
  %3 = bitcast %class.CJBig2_Image* %0 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %3, i8 0, i64 16, i1 false) #8
  %4 = getelementptr inbounds %class.CJBig2_Image, %class.CJBig2_Image* %0, i64 0, i32 1
  %5 = getelementptr inbounds %class.CJBig2_Image, %class.CJBig2_Image* %1, i64 0, i32 1
  %6 = load i32, i32* %5, align 8
  store i32 %6, i32* %4, align 8
  %7 = getelementptr inbounds %class.CJBig2_Image, %class.CJBig2_Image* %0, i64 0, i32 2
  %8 = getelementptr inbounds %class.CJBig2_Image, %class.CJBig2_Image* %1, i64 0, i32 2
  %9 = load i32, i32* %8, align 4
  store i32 %9, i32* %7, align 4
  %10 = getelementptr inbounds %class.CJBig2_Image, %class.CJBig2_Image* %0, i64 0, i32 3
  %11 = getelementptr inbounds %class.CJBig2_Image, %class.CJBig2_Image* %1, i64 0, i32 3
  %12 = load i32, i32* %11, align 8
  store i32 %12, i32* %10, align 8
  %13 = getelementptr inbounds %class.CJBig2_Image, %class.CJBig2_Image* %1, i64 0, i32 0, i32 1, i32 0
  %14 = load i8*, i8** %13, align 8
  %15 = icmp eq i8* %14, null
  br i1 %15, label %35, label %16

16:                                               ; preds = %2
  %17 = sext i32 %12 to i64
  %18 = sext i32 %9 to i64
  %19 = tail call i8* @_ZN6pdfium8internal13CallocOrDie2DEmmm(i64 %17, i64 %18, i64 1) #8
  %20 = ptrtoint i8* %19 to i64
  %21 = getelementptr inbounds %class.CJBig2_Image, %class.CJBig2_Image* %0, i64 0, i32 0, i32 1, i32 0
  store i8* %19, i8** %21, align 8
  %22 = getelementptr inbounds %class.CJBig2_Image, %class.CJBig2_Image* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %23 = load i8*, i8** %22, align 8
  %24 = bitcast %class.CJBig2_Image* %0 to i64*
  store i64 %20, i64* %24, align 8
  %25 = icmp eq i8* %23, null
  br i1 %25, label %28, label %26

26:                                               ; preds = %16
  tail call void @_Z7FX_FreePv(i8* nonnull %23) #8
  %27 = load i8*, i8** %21, align 8
  br label %28

28:                                               ; preds = %16, %26
  %29 = phi i8* [ %19, %16 ], [ %27, %26 ]
  %30 = load i8*, i8** %13, align 8
  %31 = load i32, i32* %10, align 8
  %32 = load i32, i32* %7, align 4
  %33 = mul nsw i32 %32, %31
  %34 = sext i32 %33 to i64
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %29, i8* align 1 %30, i64 %34, i1 false)
  br label %35

35:                                               ; preds = %2, %28
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #1

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN12CJBig2_ImageD2Ev(%class.CJBig2_Image* nocapture) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %class.CJBig2_Image, %class.CJBig2_Image* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %3 = load i8*, i8** %2, align 8
  store i8* null, i8** %2, align 8
  %4 = icmp eq i8* %3, null
  br i1 %4, label %6, label %5

5:                                                ; preds = %1
  tail call void @_Z7FX_FreePv(i8* nonnull %3) #8
  br label %6

6:                                                ; preds = %1, %5
  ret void
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden zeroext i1 @_ZN12CJBig2_Image16IsValidImageSizeEii(i32, i32) local_unnamed_addr #3 align 2 {
  %3 = add i32 %0, -1
  %4 = icmp ult i32 %3, 65535
  %5 = add i32 %1, -1
  %6 = icmp ult i32 %5, 65535
  %7 = and i1 %4, %6
  ret i1 %7
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden i32 @_ZNK12CJBig2_Image8GetPixelEii(%class.CJBig2_Image* nocapture readonly, i32, i32) local_unnamed_addr #4 align 2 {
  %4 = getelementptr inbounds %class.CJBig2_Image, %class.CJBig2_Image* %0, i64 0, i32 0, i32 1, i32 0
  %5 = load i8*, i8** %4, align 8
  %6 = icmp eq i8* %5, null
  %7 = icmp slt i32 %1, 0
  %8 = or i1 %7, %6
  br i1 %8, label %36, label %9

9:                                                ; preds = %3
  %10 = getelementptr inbounds %class.CJBig2_Image, %class.CJBig2_Image* %0, i64 0, i32 1
  %11 = load i32, i32* %10, align 8
  %12 = icmp sgt i32 %11, %1
  %13 = icmp sgt i32 %2, -1
  %14 = and i1 %13, %12
  br i1 %14, label %15, label %36

15:                                               ; preds = %9
  %16 = getelementptr inbounds %class.CJBig2_Image, %class.CJBig2_Image* %0, i64 0, i32 2
  %17 = load i32, i32* %16, align 4
  %18 = icmp sgt i32 %17, %2
  br i1 %18, label %19, label %36

19:                                               ; preds = %15
  %20 = getelementptr inbounds %class.CJBig2_Image, %class.CJBig2_Image* %0, i64 0, i32 3
  %21 = load i32, i32* %20, align 8
  %22 = mul nsw i32 %21, %2
  %23 = sext i32 %22 to i64
  %24 = getelementptr inbounds i8, i8* %5, i64 %23
  %25 = icmp eq i8* %24, null
  br i1 %25, label %36, label %26

26:                                               ; preds = %19
  %27 = lshr i32 %1, 3
  %28 = and i32 %1, 7
  %29 = zext i32 %27 to i64
  %30 = getelementptr inbounds i8, i8* %24, i64 %29
  %31 = load i8, i8* %30, align 1
  %32 = zext i8 %31 to i32
  %33 = xor i32 %28, 7
  %34 = lshr i32 %32, %33
  %35 = and i32 %34, 1
  br label %36

36:                                               ; preds = %15, %3, %26, %19, %9
  %37 = phi i32 [ 0, %3 ], [ 0, %9 ], [ %35, %26 ], [ 0, %19 ], [ 0, %15 ]
  ret i32 %37
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @_ZN12CJBig2_Image8SetPixelEiii(%class.CJBig2_Image* nocapture readonly, i32, i32, i32) local_unnamed_addr #5 align 2 {
  %5 = getelementptr inbounds %class.CJBig2_Image, %class.CJBig2_Image* %0, i64 0, i32 0, i32 1, i32 0
  %6 = load i8*, i8** %5, align 8
  %7 = icmp eq i8* %6, null
  %8 = icmp slt i32 %1, 0
  %9 = or i1 %8, %7
  br i1 %9, label %42, label %10

10:                                               ; preds = %4
  %11 = getelementptr inbounds %class.CJBig2_Image, %class.CJBig2_Image* %0, i64 0, i32 1
  %12 = load i32, i32* %11, align 8
  %13 = icmp sgt i32 %12, %1
  %14 = icmp sgt i32 %2, -1
  %15 = and i1 %14, %13
  br i1 %15, label %16, label %42

16:                                               ; preds = %10
  %17 = getelementptr inbounds %class.CJBig2_Image, %class.CJBig2_Image* %0, i64 0, i32 2
  %18 = load i32, i32* %17, align 4
  %19 = icmp sgt i32 %18, %2
  br i1 %19, label %20, label %42

20:                                               ; preds = %16
  %21 = getelementptr inbounds %class.CJBig2_Image, %class.CJBig2_Image* %0, i64 0, i32 3
  %22 = load i32, i32* %21, align 8
  %23 = mul nsw i32 %22, %2
  %24 = sext i32 %23 to i64
  %25 = getelementptr inbounds i8, i8* %6, i64 %24
  %26 = icmp eq i8* %25, null
  br i1 %26, label %42, label %27

27:                                               ; preds = %20
  %28 = lshr i32 %1, 3
  %29 = and i32 %1, 7
  %30 = xor i32 %29, 7
  %31 = shl i32 1, %30
  %32 = icmp eq i32 %3, 0
  %33 = zext i32 %28 to i64
  %34 = getelementptr inbounds i8, i8* %25, i64 %33
  %35 = load i8, i8* %34, align 1
  %36 = trunc i32 %31 to i8
  br i1 %32, label %39, label %37

37:                                               ; preds = %27
  %38 = or i8 %35, %36
  store i8 %38, i8* %34, align 1
  br label %42

39:                                               ; preds = %27
  %40 = xor i8 %36, -1
  %41 = and i8 %35, %40
  store i8 %41, i8* %34, align 1
  br label %42

42:                                               ; preds = %16, %20, %39, %37, %10, %4
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN12CJBig2_Image8CopyLineEii(%class.CJBig2_Image* nocapture readonly, i32, i32) local_unnamed_addr #0 align 2 {
  %4 = getelementptr inbounds %class.CJBig2_Image, %class.CJBig2_Image* %0, i64 0, i32 0, i32 1, i32 0
  %5 = load i8*, i8** %4, align 8
  %6 = icmp ne i8* %5, null
  %7 = icmp sgt i32 %1, -1
  %8 = and i1 %7, %6
  br i1 %8, label %9, label %35

9:                                                ; preds = %3
  %10 = getelementptr inbounds %class.CJBig2_Image, %class.CJBig2_Image* %0, i64 0, i32 2
  %11 = load i32, i32* %10, align 4
  %12 = icmp sgt i32 %11, %1
  br i1 %12, label %13, label %35

13:                                               ; preds = %9
  %14 = getelementptr inbounds %class.CJBig2_Image, %class.CJBig2_Image* %0, i64 0, i32 3
  %15 = load i32, i32* %14, align 8
  %16 = mul nsw i32 %15, %1
  %17 = sext i32 %16 to i64
  %18 = getelementptr inbounds i8, i8* %5, i64 %17
  %19 = icmp eq i8* %18, null
  br i1 %19, label %35, label %20

20:                                               ; preds = %13
  %21 = icmp sgt i32 %2, -1
  %22 = icmp sgt i32 %11, %2
  %23 = and i1 %21, %22
  br i1 %23, label %26, label %24

24:                                               ; preds = %20
  %25 = sext i32 %15 to i64
  br label %32

26:                                               ; preds = %20
  %27 = mul nsw i32 %15, %2
  %28 = sext i32 %27 to i64
  %29 = getelementptr inbounds i8, i8* %5, i64 %28
  %30 = icmp eq i8* %29, null
  %31 = sext i32 %15 to i64
  br i1 %30, label %32, label %34

32:                                               ; preds = %24, %26
  %33 = phi i64 [ %25, %24 ], [ %31, %26 ]
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 1 %18, i8 0, i64 %33, i1 false)
  br label %35

34:                                               ; preds = %26
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 1 %18, i8* nonnull align 1 %29, i64 %31, i1 false)
  br label %35

35:                                               ; preds = %9, %13, %34, %32, %3
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN12CJBig2_Image4FillEb(%class.CJBig2_Image* nocapture readonly, i1 zeroext) local_unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %class.CJBig2_Image, %class.CJBig2_Image* %0, i64 0, i32 0, i32 1, i32 0
  %4 = load i8*, i8** %3, align 8
  %5 = icmp eq i8* %4, null
  br i1 %5, label %14, label %6

6:                                                ; preds = %2
  %7 = sext i1 %1 to i8
  %8 = getelementptr inbounds %class.CJBig2_Image, %class.CJBig2_Image* %0, i64 0, i32 3
  %9 = load i32, i32* %8, align 8
  %10 = getelementptr inbounds %class.CJBig2_Image, %class.CJBig2_Image* %0, i64 0, i32 2
  %11 = load i32, i32* %10, align 4
  %12 = mul nsw i32 %11, %9
  %13 = sext i32 %12 to i64
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 1 %4, i8 %7, i64 %13, i1 false)
  br label %14

14:                                               ; preds = %2, %6
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN12CJBig2_Image9ComposeToEPS_ii14JBig2ComposeOp(%class.CJBig2_Image* nocapture readonly, %class.CJBig2_Image* nocapture readonly, i32, i32, i32) local_unnamed_addr #0 align 2 {
  %6 = alloca %struct.FX_RECT, align 4
  %7 = getelementptr inbounds %class.CJBig2_Image, %class.CJBig2_Image* %0, i64 0, i32 0, i32 1, i32 0
  %8 = load i8*, i8** %7, align 8
  %9 = icmp eq i8* %8, null
  %10 = bitcast %struct.FX_RECT* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %10) #8
  br i1 %9, label %21, label %11

11:                                               ; preds = %5
  %12 = getelementptr inbounds %class.CJBig2_Image, %class.CJBig2_Image* %0, i64 0, i32 1
  %13 = load i32, i32* %12, align 8
  %14 = getelementptr inbounds %class.CJBig2_Image, %class.CJBig2_Image* %0, i64 0, i32 2
  %15 = load i32, i32* %14, align 4
  %16 = getelementptr inbounds %struct.FX_RECT, %struct.FX_RECT* %6, i64 0, i32 0
  store i32 0, i32* %16, align 4
  %17 = getelementptr inbounds %struct.FX_RECT, %struct.FX_RECT* %6, i64 0, i32 1
  store i32 0, i32* %17, align 4
  %18 = getelementptr inbounds %struct.FX_RECT, %struct.FX_RECT* %6, i64 0, i32 2
  store i32 %13, i32* %18, align 4
  %19 = getelementptr inbounds %struct.FX_RECT, %struct.FX_RECT* %6, i64 0, i32 3
  store i32 %15, i32* %19, align 4
  %20 = call zeroext i1 @_ZN12CJBig2_Image17ComposeToInternalEPS_ii14JBig2ComposeOpRK7FX_RECT(%class.CJBig2_Image* %0, %class.CJBig2_Image* %1, i32 %2, i32 %3, i32 %4, %struct.FX_RECT* nonnull dereferenceable(16) %6)
  br label %21

21:                                               ; preds = %5, %11
  %22 = phi i1 [ false, %5 ], [ %20, %11 ]
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %10) #8
  ret i1 %22
}

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN12CJBig2_Image17ComposeToInternalEPS_ii14JBig2ComposeOpRK7FX_RECT(%class.CJBig2_Image* nocapture readonly, %class.CJBig2_Image* nocapture readonly, i32, i32, i32, %struct.FX_RECT* nocapture readonly dereferenceable(16)) local_unnamed_addr #0 align 2 {
  %7 = add i32 %2, 1048576
  %8 = icmp ugt i32 %7, 2097152
  %9 = add i32 %3, 1048576
  %10 = icmp ugt i32 %9, 2097152
  %11 = or i1 %8, %10
  br i1 %11, label %1196, label %12

12:                                               ; preds = %6
  %13 = getelementptr inbounds %struct.FX_RECT, %struct.FX_RECT* %5, i64 0, i32 2
  %14 = load i32, i32* %13, align 4
  %15 = getelementptr inbounds %struct.FX_RECT, %struct.FX_RECT* %5, i64 0, i32 0
  %16 = load i32, i32* %15, align 4
  %17 = sub nsw i32 %14, %16
  %18 = getelementptr inbounds %struct.FX_RECT, %struct.FX_RECT* %5, i64 0, i32 3
  %19 = load i32, i32* %18, align 4
  %20 = getelementptr inbounds %struct.FX_RECT, %struct.FX_RECT* %5, i64 0, i32 1
  %21 = load i32, i32* %20, align 4
  %22 = sub nsw i32 %19, %21
  %23 = icmp slt i32 %2, 0
  %24 = sub nsw i32 0, %2
  %25 = select i1 %23, i32 %24, i32 0
  %26 = getelementptr inbounds %class.CJBig2_Image, %class.CJBig2_Image* %1, i64 0, i32 1
  %27 = load i32, i32* %26, align 8
  %28 = tail call { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %27, i32 %2) #8
  %29 = extractvalue { i32, i1 } %28, 1
  %30 = extractvalue { i32, i1 } %28, 0
  %31 = xor i1 %29, true
  %32 = icmp sgt i32 %17, %30
  %33 = and i1 %32, %31
  %34 = select i1 %33, i32 %30, i32 %17
  %35 = icmp slt i32 %3, 0
  %36 = sub nsw i32 0, %3
  %37 = select i1 %35, i32 %36, i32 0
  %38 = getelementptr inbounds %class.CJBig2_Image, %class.CJBig2_Image* %1, i64 0, i32 2
  %39 = load i32, i32* %38, align 4
  %40 = tail call { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %39, i32 %3) #8
  %41 = extractvalue { i32, i1 } %40, 1
  %42 = extractvalue { i32, i1 } %40, 0
  %43 = xor i1 %41, true
  %44 = icmp sgt i32 %22, %42
  %45 = and i1 %44, %43
  %46 = select i1 %45, i32 %42, i32 %22
  %47 = icmp sgt i32 %46, %37
  %48 = icmp sgt i32 %34, %25
  %49 = and i1 %48, %47
  br i1 %49, label %50, label %1196

50:                                               ; preds = %12
  %51 = select i1 %23, i32 0, i32 %2
  %52 = select i1 %35, i32 0, i32 %3
  %53 = sub nsw i32 %34, %25
  %54 = sub nsw i32 %46, %37
  %55 = add nsw i32 %53, %51
  %56 = add nsw i32 %54, %52
  %57 = and i32 %51, 31
  %58 = and i32 %55, 31
  %59 = and i32 %25, 31
  %60 = lshr i32 -1, %57
  %61 = sub i32 0, %55
  %62 = and i32 %61, 31
  %63 = shl i32 -1, %62
  %64 = and i32 %63, %60
  %65 = add nsw i32 %21, %37
  %66 = getelementptr inbounds %class.CJBig2_Image, %class.CJBig2_Image* %0, i64 0, i32 0, i32 1, i32 0
  %67 = load i8*, i8** %66, align 8
  %68 = getelementptr inbounds %class.CJBig2_Image, %class.CJBig2_Image* %0, i64 0, i32 3
  %69 = load i32, i32* %68, align 8
  %70 = mul nsw i32 %69, %65
  %71 = sext i32 %70 to i64
  %72 = getelementptr inbounds i8, i8* %67, i64 %71
  %73 = add nsw i32 %16, %25
  %74 = sdiv i32 %73, 32
  %75 = shl nsw i32 %74, 2
  %76 = sext i32 %75 to i64
  %77 = getelementptr inbounds i8, i8* %72, i64 %76
  %78 = getelementptr inbounds %class.CJBig2_Image, %class.CJBig2_Image* %0, i64 0, i32 2
  %79 = load i32, i32* %78, align 4
  %80 = mul nsw i32 %79, %69
  %81 = sext i32 %80 to i64
  %82 = getelementptr inbounds i8, i8* %67, i64 %81
  %83 = sdiv i32 %25, 32
  %84 = shl nsw i32 %83, 2
  %85 = sub nsw i32 %69, %84
  %86 = getelementptr inbounds %class.CJBig2_Image, %class.CJBig2_Image* %1, i64 0, i32 0, i32 1, i32 0
  %87 = load i8*, i8** %86, align 8
  %88 = getelementptr inbounds %class.CJBig2_Image, %class.CJBig2_Image* %1, i64 0, i32 3
  %89 = load i32, i32* %88, align 8
  %90 = mul nsw i32 %89, %52
  %91 = sext i32 %90 to i64
  %92 = getelementptr inbounds i8, i8* %87, i64 %91
  %93 = lshr i32 %51, 5
  %94 = shl nuw nsw i32 %93, 2
  %95 = zext i32 %94 to i64
  %96 = getelementptr inbounds i8, i8* %92, i64 %95
  %97 = add nsw i32 %55, -1
  %98 = xor i32 %97, %51
  %99 = icmp ult i32 %98, 32
  br i1 %99, label %100, label %385

100:                                              ; preds = %50
  %101 = add nsw i32 %34, -1
  %102 = xor i32 %101, %25
  %103 = icmp ult i32 %102, 32
  br i1 %103, label %104, label %278

104:                                              ; preds = %100
  %105 = icmp ugt i32 %59, %57
  br i1 %105, label %106, label %192

106:                                              ; preds = %104
  %107 = sub nsw i32 %59, %57
  %108 = icmp sgt i32 %54, 0
  br i1 %108, label %109, label %1196

109:                                              ; preds = %106
  %110 = xor i32 %64, -1
  br label %111

111:                                              ; preds = %109, %175
  %112 = phi i32 [ %52, %109 ], [ %190, %175 ]
  %113 = phi i8* [ %96, %109 ], [ %189, %175 ]
  %114 = phi i8* [ %77, %109 ], [ %186, %175 ]
  %115 = icmp ult i8* %114, %82
  br i1 %115, label %116, label %1196

116:                                              ; preds = %111
  %117 = load i8, i8* %114, align 1
  %118 = zext i8 %117 to i32
  %119 = shl nuw i32 %118, 24
  %120 = getelementptr inbounds i8, i8* %114, i64 1
  %121 = load i8, i8* %120, align 1
  %122 = zext i8 %121 to i32
  %123 = shl nuw nsw i32 %122, 16
  %124 = or i32 %123, %119
  %125 = getelementptr inbounds i8, i8* %114, i64 2
  %126 = load i8, i8* %125, align 1
  %127 = zext i8 %126 to i32
  %128 = shl nuw nsw i32 %127, 8
  %129 = or i32 %124, %128
  %130 = getelementptr inbounds i8, i8* %114, i64 3
  %131 = load i8, i8* %130, align 1
  %132 = zext i8 %131 to i32
  %133 = or i32 %129, %132
  %134 = shl i32 %133, %107
  %135 = load i8, i8* %113, align 1
  %136 = zext i8 %135 to i32
  %137 = shl nuw i32 %136, 24
  %138 = getelementptr inbounds i8, i8* %113, i64 1
  %139 = load i8, i8* %138, align 1
  %140 = zext i8 %139 to i32
  %141 = shl nuw nsw i32 %140, 16
  %142 = or i32 %141, %137
  %143 = getelementptr inbounds i8, i8* %113, i64 2
  %144 = load i8, i8* %143, align 1
  %145 = zext i8 %144 to i32
  %146 = shl nuw nsw i32 %145, 8
  %147 = or i32 %142, %146
  %148 = getelementptr inbounds i8, i8* %113, i64 3
  %149 = load i8, i8* %148, align 1
  %150 = zext i8 %149 to i32
  %151 = or i32 %147, %150
  switch i32 %4, label %175 [
    i32 0, label %152
    i32 1, label %157
    i32 2, label %160
    i32 3, label %165
    i32 4, label %171
  ]

152:                                              ; preds = %116
  %153 = and i32 %151, %110
  %154 = or i32 %151, %134
  %155 = and i32 %154, %64
  %156 = or i32 %155, %153
  br label %175

157:                                              ; preds = %116
  %158 = or i32 %134, %110
  %159 = and i32 %158, %151
  br label %175

160:                                              ; preds = %116
  %161 = and i32 %151, %110
  %162 = xor i32 %151, %134
  %163 = and i32 %162, %64
  %164 = or i32 %163, %161
  br label %175

165:                                              ; preds = %116
  %166 = and i32 %151, %110
  %167 = xor i32 %151, %134
  %168 = xor i32 %167, -1
  %169 = and i32 %64, %168
  %170 = or i32 %169, %166
  br label %175

171:                                              ; preds = %116
  %172 = and i32 %151, %110
  %173 = and i32 %134, %64
  %174 = or i32 %172, %173
  br label %175

175:                                              ; preds = %116, %171, %165, %160, %157, %152
  %176 = phi i32 [ 0, %116 ], [ %174, %171 ], [ %170, %165 ], [ %164, %160 ], [ %159, %157 ], [ %156, %152 ]
  %177 = lshr i32 %176, 24
  %178 = trunc i32 %177 to i8
  store i8 %178, i8* %113, align 1
  %179 = lshr i32 %176, 16
  %180 = trunc i32 %179 to i8
  store i8 %180, i8* %138, align 1
  %181 = lshr i32 %176, 8
  %182 = trunc i32 %181 to i8
  store i8 %182, i8* %143, align 1
  %183 = trunc i32 %176 to i8
  store i8 %183, i8* %148, align 1
  %184 = load i32, i32* %68, align 8
  %185 = sext i32 %184 to i64
  %186 = getelementptr inbounds i8, i8* %114, i64 %185
  %187 = load i32, i32* %88, align 8
  %188 = sext i32 %187 to i64
  %189 = getelementptr inbounds i8, i8* %113, i64 %188
  %190 = add nuw nsw i32 %112, 1
  %191 = icmp slt i32 %190, %56
  br i1 %191, label %111, label %1196

192:                                              ; preds = %104
  %193 = sub nsw i32 %57, %59
  %194 = icmp sgt i32 %54, 0
  br i1 %194, label %195, label %1196

195:                                              ; preds = %192
  %196 = xor i32 %64, -1
  br label %197

197:                                              ; preds = %195, %261
  %198 = phi i32 [ %52, %195 ], [ %276, %261 ]
  %199 = phi i8* [ %96, %195 ], [ %275, %261 ]
  %200 = phi i8* [ %77, %195 ], [ %272, %261 ]
  %201 = icmp ult i8* %200, %82
  br i1 %201, label %202, label %1196

202:                                              ; preds = %197
  %203 = load i8, i8* %200, align 1
  %204 = zext i8 %203 to i32
  %205 = shl nuw i32 %204, 24
  %206 = getelementptr inbounds i8, i8* %200, i64 1
  %207 = load i8, i8* %206, align 1
  %208 = zext i8 %207 to i32
  %209 = shl nuw nsw i32 %208, 16
  %210 = or i32 %209, %205
  %211 = getelementptr inbounds i8, i8* %200, i64 2
  %212 = load i8, i8* %211, align 1
  %213 = zext i8 %212 to i32
  %214 = shl nuw nsw i32 %213, 8
  %215 = or i32 %210, %214
  %216 = getelementptr inbounds i8, i8* %200, i64 3
  %217 = load i8, i8* %216, align 1
  %218 = zext i8 %217 to i32
  %219 = or i32 %215, %218
  %220 = lshr i32 %219, %193
  %221 = load i8, i8* %199, align 1
  %222 = zext i8 %221 to i32
  %223 = shl nuw i32 %222, 24
  %224 = getelementptr inbounds i8, i8* %199, i64 1
  %225 = load i8, i8* %224, align 1
  %226 = zext i8 %225 to i32
  %227 = shl nuw nsw i32 %226, 16
  %228 = or i32 %227, %223
  %229 = getelementptr inbounds i8, i8* %199, i64 2
  %230 = load i8, i8* %229, align 1
  %231 = zext i8 %230 to i32
  %232 = shl nuw nsw i32 %231, 8
  %233 = or i32 %228, %232
  %234 = getelementptr inbounds i8, i8* %199, i64 3
  %235 = load i8, i8* %234, align 1
  %236 = zext i8 %235 to i32
  %237 = or i32 %233, %236
  switch i32 %4, label %261 [
    i32 0, label %238
    i32 1, label %243
    i32 2, label %246
    i32 3, label %251
    i32 4, label %257
  ]

238:                                              ; preds = %202
  %239 = and i32 %237, %196
  %240 = or i32 %237, %220
  %241 = and i32 %240, %64
  %242 = or i32 %241, %239
  br label %261

243:                                              ; preds = %202
  %244 = or i32 %220, %196
  %245 = and i32 %244, %237
  br label %261

246:                                              ; preds = %202
  %247 = and i32 %237, %196
  %248 = xor i32 %237, %220
  %249 = and i32 %248, %64
  %250 = or i32 %249, %247
  br label %261

251:                                              ; preds = %202
  %252 = and i32 %237, %196
  %253 = xor i32 %237, %220
  %254 = xor i32 %253, -1
  %255 = and i32 %64, %254
  %256 = or i32 %255, %252
  br label %261

257:                                              ; preds = %202
  %258 = and i32 %237, %196
  %259 = and i32 %220, %64
  %260 = or i32 %258, %259
  br label %261

261:                                              ; preds = %202, %257, %251, %246, %243, %238
  %262 = phi i32 [ 0, %202 ], [ %260, %257 ], [ %256, %251 ], [ %250, %246 ], [ %245, %243 ], [ %242, %238 ]
  %263 = lshr i32 %262, 24
  %264 = trunc i32 %263 to i8
  store i8 %264, i8* %199, align 1
  %265 = lshr i32 %262, 16
  %266 = trunc i32 %265 to i8
  store i8 %266, i8* %224, align 1
  %267 = lshr i32 %262, 8
  %268 = trunc i32 %267 to i8
  store i8 %268, i8* %229, align 1
  %269 = trunc i32 %262 to i8
  store i8 %269, i8* %234, align 1
  %270 = load i32, i32* %68, align 8
  %271 = sext i32 %270 to i64
  %272 = getelementptr inbounds i8, i8* %200, i64 %271
  %273 = load i32, i32* %88, align 8
  %274 = sext i32 %273 to i64
  %275 = getelementptr inbounds i8, i8* %199, i64 %274
  %276 = add nuw nsw i32 %198, 1
  %277 = icmp slt i32 %276, %56
  br i1 %277, label %197, label %1196

278:                                              ; preds = %100
  %279 = sub nsw i32 %59, %57
  %280 = sub nsw i32 32, %279
  %281 = icmp sgt i32 %54, 0
  br i1 %281, label %282, label %1196

282:                                              ; preds = %278
  %283 = xor i32 %64, -1
  br label %284

284:                                              ; preds = %282, %368
  %285 = phi i32 [ %52, %282 ], [ %383, %368 ]
  %286 = phi i8* [ %96, %282 ], [ %382, %368 ]
  %287 = phi i8* [ %77, %282 ], [ %379, %368 ]
  %288 = icmp ult i8* %287, %82
  br i1 %288, label %289, label %1196

289:                                              ; preds = %284
  %290 = load i8, i8* %287, align 1
  %291 = zext i8 %290 to i32
  %292 = shl nuw i32 %291, 24
  %293 = getelementptr inbounds i8, i8* %287, i64 1
  %294 = load i8, i8* %293, align 1
  %295 = zext i8 %294 to i32
  %296 = shl nuw nsw i32 %295, 16
  %297 = or i32 %296, %292
  %298 = getelementptr inbounds i8, i8* %287, i64 2
  %299 = load i8, i8* %298, align 1
  %300 = zext i8 %299 to i32
  %301 = shl nuw nsw i32 %300, 8
  %302 = or i32 %297, %301
  %303 = getelementptr inbounds i8, i8* %287, i64 3
  %304 = load i8, i8* %303, align 1
  %305 = zext i8 %304 to i32
  %306 = or i32 %302, %305
  %307 = shl i32 %306, %279
  %308 = getelementptr inbounds i8, i8* %287, i64 4
  %309 = load i8, i8* %308, align 1
  %310 = zext i8 %309 to i32
  %311 = shl nuw i32 %310, 24
  %312 = getelementptr inbounds i8, i8* %287, i64 5
  %313 = load i8, i8* %312, align 1
  %314 = zext i8 %313 to i32
  %315 = shl nuw nsw i32 %314, 16
  %316 = or i32 %315, %311
  %317 = getelementptr inbounds i8, i8* %287, i64 6
  %318 = load i8, i8* %317, align 1
  %319 = zext i8 %318 to i32
  %320 = shl nuw nsw i32 %319, 8
  %321 = or i32 %316, %320
  %322 = getelementptr inbounds i8, i8* %287, i64 7
  %323 = load i8, i8* %322, align 1
  %324 = zext i8 %323 to i32
  %325 = or i32 %321, %324
  %326 = lshr i32 %325, %280
  %327 = or i32 %326, %307
  %328 = load i8, i8* %286, align 1
  %329 = zext i8 %328 to i32
  %330 = shl nuw i32 %329, 24
  %331 = getelementptr inbounds i8, i8* %286, i64 1
  %332 = load i8, i8* %331, align 1
  %333 = zext i8 %332 to i32
  %334 = shl nuw nsw i32 %333, 16
  %335 = or i32 %334, %330
  %336 = getelementptr inbounds i8, i8* %286, i64 2
  %337 = load i8, i8* %336, align 1
  %338 = zext i8 %337 to i32
  %339 = shl nuw nsw i32 %338, 8
  %340 = or i32 %335, %339
  %341 = getelementptr inbounds i8, i8* %286, i64 3
  %342 = load i8, i8* %341, align 1
  %343 = zext i8 %342 to i32
  %344 = or i32 %340, %343
  switch i32 %4, label %368 [
    i32 0, label %345
    i32 1, label %350
    i32 2, label %353
    i32 3, label %358
    i32 4, label %364
  ]

345:                                              ; preds = %289
  %346 = and i32 %344, %283
  %347 = or i32 %344, %327
  %348 = and i32 %347, %64
  %349 = or i32 %348, %346
  br label %368

350:                                              ; preds = %289
  %351 = or i32 %327, %283
  %352 = and i32 %351, %344
  br label %368

353:                                              ; preds = %289
  %354 = and i32 %344, %283
  %355 = xor i32 %344, %327
  %356 = and i32 %355, %64
  %357 = or i32 %356, %354
  br label %368

358:                                              ; preds = %289
  %359 = and i32 %344, %283
  %360 = xor i32 %344, %327
  %361 = xor i32 %360, -1
  %362 = and i32 %64, %361
  %363 = or i32 %362, %359
  br label %368

364:                                              ; preds = %289
  %365 = and i32 %344, %283
  %366 = and i32 %327, %64
  %367 = or i32 %365, %366
  br label %368

368:                                              ; preds = %289, %364, %358, %353, %350, %345
  %369 = phi i32 [ 0, %289 ], [ %367, %364 ], [ %363, %358 ], [ %357, %353 ], [ %352, %350 ], [ %349, %345 ]
  %370 = lshr i32 %369, 24
  %371 = trunc i32 %370 to i8
  store i8 %371, i8* %286, align 1
  %372 = lshr i32 %369, 16
  %373 = trunc i32 %372 to i8
  store i8 %373, i8* %331, align 1
  %374 = lshr i32 %369, 8
  %375 = trunc i32 %374 to i8
  store i8 %375, i8* %336, align 1
  %376 = trunc i32 %369 to i8
  store i8 %376, i8* %341, align 1
  %377 = load i32, i32* %68, align 8
  %378 = sext i32 %377 to i64
  %379 = getelementptr inbounds i8, i8* %287, i64 %378
  %380 = load i32, i32* %88, align 8
  %381 = sext i32 %380 to i64
  %382 = getelementptr inbounds i8, i8* %286, i64 %381
  %383 = add nuw nsw i32 %285, 1
  %384 = icmp slt i32 %383, %56
  br i1 %384, label %284, label %1196

385:                                              ; preds = %50
  %386 = icmp ugt i32 %59, %57
  br i1 %386, label %387, label %686

387:                                              ; preds = %385
  %388 = sub nsw i32 %59, %57
  %389 = sub nsw i32 32, %388
  %390 = ashr i32 %55, 5
  %391 = add nuw nsw i32 %51, 31
  %392 = lshr i32 %391, 5
  %393 = sub nsw i32 %390, %392
  %394 = icmp sgt i32 %54, 0
  br i1 %394, label %395, label %1196

395:                                              ; preds = %387
  %396 = icmp eq i32 %57, 0
  %397 = xor i32 %60, -1
  %398 = icmp sgt i32 %393, 0
  %399 = icmp eq i32 %58, 0
  %400 = sext i32 %85 to i64
  %401 = xor i32 %63, -1
  br label %402

402:                                              ; preds = %395, %677
  %403 = phi i32 [ %52, %395 ], [ %684, %677 ]
  %404 = phi i8* [ %96, %395 ], [ %683, %677 ]
  %405 = phi i8* [ %77, %395 ], [ %680, %677 ]
  %406 = icmp ult i8* %405, %82
  br i1 %406, label %407, label %1196

407:                                              ; preds = %402
  br i1 %396, label %497, label %408

408:                                              ; preds = %407
  %409 = load i8, i8* %405, align 1
  %410 = zext i8 %409 to i32
  %411 = shl nuw i32 %410, 24
  %412 = getelementptr inbounds i8, i8* %405, i64 1
  %413 = load i8, i8* %412, align 1
  %414 = zext i8 %413 to i32
  %415 = shl nuw nsw i32 %414, 16
  %416 = or i32 %415, %411
  %417 = getelementptr inbounds i8, i8* %405, i64 2
  %418 = load i8, i8* %417, align 1
  %419 = zext i8 %418 to i32
  %420 = shl nuw nsw i32 %419, 8
  %421 = or i32 %416, %420
  %422 = getelementptr inbounds i8, i8* %405, i64 3
  %423 = load i8, i8* %422, align 1
  %424 = zext i8 %423 to i32
  %425 = or i32 %421, %424
  %426 = shl i32 %425, %388
  %427 = getelementptr inbounds i8, i8* %405, i64 4
  %428 = load i8, i8* %427, align 1
  %429 = zext i8 %428 to i32
  %430 = shl nuw i32 %429, 24
  %431 = getelementptr inbounds i8, i8* %405, i64 5
  %432 = load i8, i8* %431, align 1
  %433 = zext i8 %432 to i32
  %434 = shl nuw nsw i32 %433, 16
  %435 = or i32 %434, %430
  %436 = getelementptr inbounds i8, i8* %405, i64 6
  %437 = load i8, i8* %436, align 1
  %438 = zext i8 %437 to i32
  %439 = shl nuw nsw i32 %438, 8
  %440 = or i32 %435, %439
  %441 = getelementptr inbounds i8, i8* %405, i64 7
  %442 = load i8, i8* %441, align 1
  %443 = zext i8 %442 to i32
  %444 = or i32 %440, %443
  %445 = lshr i32 %444, %389
  %446 = or i32 %445, %426
  %447 = load i8, i8* %404, align 1
  %448 = zext i8 %447 to i32
  %449 = shl nuw i32 %448, 24
  %450 = getelementptr inbounds i8, i8* %404, i64 1
  %451 = load i8, i8* %450, align 1
  %452 = zext i8 %451 to i32
  %453 = shl nuw nsw i32 %452, 16
  %454 = or i32 %453, %449
  %455 = getelementptr inbounds i8, i8* %404, i64 2
  %456 = load i8, i8* %455, align 1
  %457 = zext i8 %456 to i32
  %458 = shl nuw nsw i32 %457, 8
  %459 = or i32 %454, %458
  %460 = getelementptr inbounds i8, i8* %404, i64 3
  %461 = load i8, i8* %460, align 1
  %462 = zext i8 %461 to i32
  %463 = or i32 %459, %462
  switch i32 %4, label %487 [
    i32 0, label %464
    i32 1, label %469
    i32 2, label %472
    i32 3, label %477
    i32 4, label %483
  ]

464:                                              ; preds = %408
  %465 = and i32 %463, %397
  %466 = or i32 %463, %446
  %467 = and i32 %466, %60
  %468 = or i32 %467, %465
  br label %487

469:                                              ; preds = %408
  %470 = or i32 %446, %397
  %471 = and i32 %470, %463
  br label %487

472:                                              ; preds = %408
  %473 = and i32 %463, %397
  %474 = xor i32 %463, %446
  %475 = and i32 %474, %60
  %476 = or i32 %475, %473
  br label %487

477:                                              ; preds = %408
  %478 = and i32 %463, %397
  %479 = xor i32 %463, %446
  %480 = xor i32 %479, -1
  %481 = and i32 %60, %480
  %482 = or i32 %481, %478
  br label %487

483:                                              ; preds = %408
  %484 = and i32 %463, %397
  %485 = and i32 %446, %60
  %486 = or i32 %484, %485
  br label %487

487:                                              ; preds = %408, %483, %477, %472, %469, %464
  %488 = phi i32 [ 0, %408 ], [ %486, %483 ], [ %482, %477 ], [ %476, %472 ], [ %471, %469 ], [ %468, %464 ]
  %489 = lshr i32 %488, 24
  %490 = trunc i32 %489 to i8
  store i8 %490, i8* %404, align 1
  %491 = lshr i32 %488, 16
  %492 = trunc i32 %491 to i8
  store i8 %492, i8* %450, align 1
  %493 = lshr i32 %488, 8
  %494 = trunc i32 %493 to i8
  store i8 %494, i8* %455, align 1
  %495 = trunc i32 %488 to i8
  store i8 %495, i8* %460, align 1
  %496 = getelementptr inbounds i8, i8* %404, i64 4
  br label %497

497:                                              ; preds = %407, %487
  %498 = phi i8* [ %427, %487 ], [ %405, %407 ]
  %499 = phi i8* [ %496, %487 ], [ %404, %407 ]
  br i1 %398, label %503, label %500

500:                                              ; preds = %572, %497
  %501 = phi i8* [ %498, %497 ], [ %525, %572 ]
  %502 = phi i8* [ %499, %497 ], [ %581, %572 ]
  br i1 %399, label %677, label %584

503:                                              ; preds = %497, %572
  %504 = phi i32 [ %582, %572 ], [ 0, %497 ]
  %505 = phi i8* [ %581, %572 ], [ %499, %497 ]
  %506 = phi i8* [ %525, %572 ], [ %498, %497 ]
  %507 = load i8, i8* %506, align 1
  %508 = zext i8 %507 to i32
  %509 = shl nuw i32 %508, 24
  %510 = getelementptr inbounds i8, i8* %506, i64 1
  %511 = load i8, i8* %510, align 1
  %512 = zext i8 %511 to i32
  %513 = shl nuw nsw i32 %512, 16
  %514 = or i32 %513, %509
  %515 = getelementptr inbounds i8, i8* %506, i64 2
  %516 = load i8, i8* %515, align 1
  %517 = zext i8 %516 to i32
  %518 = shl nuw nsw i32 %517, 8
  %519 = or i32 %514, %518
  %520 = getelementptr inbounds i8, i8* %506, i64 3
  %521 = load i8, i8* %520, align 1
  %522 = zext i8 %521 to i32
  %523 = or i32 %519, %522
  %524 = shl i32 %523, %388
  %525 = getelementptr inbounds i8, i8* %506, i64 4
  %526 = load i8, i8* %525, align 1
  %527 = zext i8 %526 to i32
  %528 = shl nuw i32 %527, 24
  %529 = getelementptr inbounds i8, i8* %506, i64 5
  %530 = load i8, i8* %529, align 1
  %531 = zext i8 %530 to i32
  %532 = shl nuw nsw i32 %531, 16
  %533 = or i32 %532, %528
  %534 = getelementptr inbounds i8, i8* %506, i64 6
  %535 = load i8, i8* %534, align 1
  %536 = zext i8 %535 to i32
  %537 = shl nuw nsw i32 %536, 8
  %538 = or i32 %533, %537
  %539 = getelementptr inbounds i8, i8* %506, i64 7
  %540 = load i8, i8* %539, align 1
  %541 = zext i8 %540 to i32
  %542 = or i32 %538, %541
  %543 = lshr i32 %542, %389
  %544 = or i32 %543, %524
  %545 = load i8, i8* %505, align 1
  %546 = zext i8 %545 to i32
  %547 = shl nuw i32 %546, 24
  %548 = getelementptr inbounds i8, i8* %505, i64 1
  %549 = load i8, i8* %548, align 1
  %550 = zext i8 %549 to i32
  %551 = shl nuw nsw i32 %550, 16
  %552 = or i32 %551, %547
  %553 = getelementptr inbounds i8, i8* %505, i64 2
  %554 = load i8, i8* %553, align 1
  %555 = zext i8 %554 to i32
  %556 = shl nuw nsw i32 %555, 8
  %557 = or i32 %552, %556
  %558 = getelementptr inbounds i8, i8* %505, i64 3
  %559 = load i8, i8* %558, align 1
  %560 = zext i8 %559 to i32
  %561 = or i32 %557, %560
  switch i32 %4, label %572 [
    i32 0, label %562
    i32 1, label %564
    i32 2, label %566
    i32 3, label %568
    i32 4, label %571
  ]

562:                                              ; preds = %503
  %563 = or i32 %561, %544
  br label %572

564:                                              ; preds = %503
  %565 = and i32 %561, %544
  br label %572

566:                                              ; preds = %503
  %567 = xor i32 %561, %544
  br label %572

568:                                              ; preds = %503
  %569 = xor i32 %561, %544
  %570 = xor i32 %569, -1
  br label %572

571:                                              ; preds = %503
  br label %572

572:                                              ; preds = %503, %571, %568, %566, %564, %562
  %573 = phi i32 [ 0, %503 ], [ %544, %571 ], [ %570, %568 ], [ %567, %566 ], [ %565, %564 ], [ %563, %562 ]
  %574 = lshr i32 %573, 24
  %575 = trunc i32 %574 to i8
  store i8 %575, i8* %505, align 1
  %576 = lshr i32 %573, 16
  %577 = trunc i32 %576 to i8
  store i8 %577, i8* %548, align 1
  %578 = lshr i32 %573, 8
  %579 = trunc i32 %578 to i8
  store i8 %579, i8* %553, align 1
  %580 = trunc i32 %573 to i8
  store i8 %580, i8* %558, align 1
  %581 = getelementptr inbounds i8, i8* %505, i64 4
  %582 = add nuw nsw i32 %504, 1
  %583 = icmp slt i32 %582, %393
  br i1 %583, label %503, label %500

584:                                              ; preds = %500
  %585 = load i8, i8* %501, align 1
  %586 = zext i8 %585 to i32
  %587 = shl nuw i32 %586, 24
  %588 = getelementptr inbounds i8, i8* %501, i64 1
  %589 = load i8, i8* %588, align 1
  %590 = zext i8 %589 to i32
  %591 = shl nuw nsw i32 %590, 16
  %592 = or i32 %591, %587
  %593 = getelementptr inbounds i8, i8* %501, i64 2
  %594 = load i8, i8* %593, align 1
  %595 = zext i8 %594 to i32
  %596 = shl nuw nsw i32 %595, 8
  %597 = or i32 %592, %596
  %598 = getelementptr inbounds i8, i8* %501, i64 3
  %599 = load i8, i8* %598, align 1
  %600 = zext i8 %599 to i32
  %601 = or i32 %597, %600
  %602 = shl i32 %601, %388
  %603 = getelementptr inbounds i8, i8* %501, i64 4
  %604 = getelementptr inbounds i8, i8* %405, i64 %400
  %605 = icmp ult i8* %603, %604
  br i1 %605, label %606, label %624

606:                                              ; preds = %584
  %607 = load i8, i8* %603, align 1
  %608 = zext i8 %607 to i32
  %609 = shl nuw i32 %608, 24
  %610 = getelementptr inbounds i8, i8* %501, i64 5
  %611 = load i8, i8* %610, align 1
  %612 = zext i8 %611 to i32
  %613 = shl nuw nsw i32 %612, 16
  %614 = or i32 %613, %609
  %615 = getelementptr inbounds i8, i8* %501, i64 6
  %616 = load i8, i8* %615, align 1
  %617 = zext i8 %616 to i32
  %618 = shl nuw nsw i32 %617, 8
  %619 = or i32 %614, %618
  %620 = getelementptr inbounds i8, i8* %501, i64 7
  %621 = load i8, i8* %620, align 1
  %622 = zext i8 %621 to i32
  %623 = or i32 %619, %622
  br label %624

624:                                              ; preds = %584, %606
  %625 = phi i32 [ %623, %606 ], [ 0, %584 ]
  %626 = lshr i32 %625, %389
  %627 = or i32 %626, %602
  %628 = load i8, i8* %502, align 1
  %629 = zext i8 %628 to i32
  %630 = shl nuw i32 %629, 24
  %631 = getelementptr inbounds i8, i8* %502, i64 1
  %632 = load i8, i8* %631, align 1
  %633 = zext i8 %632 to i32
  %634 = shl nuw nsw i32 %633, 16
  %635 = or i32 %634, %630
  %636 = getelementptr inbounds i8, i8* %502, i64 2
  %637 = load i8, i8* %636, align 1
  %638 = zext i8 %637 to i32
  %639 = shl nuw nsw i32 %638, 8
  %640 = or i32 %635, %639
  %641 = getelementptr inbounds i8, i8* %502, i64 3
  %642 = load i8, i8* %641, align 1
  %643 = zext i8 %642 to i32
  %644 = or i32 %640, %643
  switch i32 %4, label %668 [
    i32 0, label %645
    i32 1, label %650
    i32 2, label %653
    i32 3, label %658
    i32 4, label %664
  ]

645:                                              ; preds = %624
  %646 = and i32 %644, %401
  %647 = or i32 %644, %627
  %648 = and i32 %647, %63
  %649 = or i32 %648, %646
  br label %668

650:                                              ; preds = %624
  %651 = or i32 %627, %401
  %652 = and i32 %651, %644
  br label %668

653:                                              ; preds = %624
  %654 = and i32 %644, %401
  %655 = xor i32 %644, %627
  %656 = and i32 %655, %63
  %657 = or i32 %656, %654
  br label %668

658:                                              ; preds = %624
  %659 = and i32 %644, %401
  %660 = xor i32 %644, %627
  %661 = xor i32 %660, -1
  %662 = and i32 %63, %661
  %663 = or i32 %662, %659
  br label %668

664:                                              ; preds = %624
  %665 = and i32 %644, %401
  %666 = and i32 %627, %63
  %667 = or i32 %665, %666
  br label %668

668:                                              ; preds = %624, %664, %658, %653, %650, %645
  %669 = phi i32 [ 0, %624 ], [ %667, %664 ], [ %663, %658 ], [ %657, %653 ], [ %652, %650 ], [ %649, %645 ]
  %670 = lshr i32 %669, 24
  %671 = trunc i32 %670 to i8
  store i8 %671, i8* %502, align 1
  %672 = lshr i32 %669, 16
  %673 = trunc i32 %672 to i8
  store i8 %673, i8* %631, align 1
  %674 = lshr i32 %669, 8
  %675 = trunc i32 %674 to i8
  store i8 %675, i8* %636, align 1
  %676 = trunc i32 %669 to i8
  store i8 %676, i8* %641, align 1
  br label %677

677:                                              ; preds = %500, %668
  %678 = load i32, i32* %68, align 8
  %679 = sext i32 %678 to i64
  %680 = getelementptr inbounds i8, i8* %405, i64 %679
  %681 = load i32, i32* %88, align 8
  %682 = sext i32 %681 to i64
  %683 = getelementptr inbounds i8, i8* %404, i64 %682
  %684 = add nuw nsw i32 %403, 1
  %685 = icmp slt i32 %684, %56
  br i1 %685, label %402, label %1196

686:                                              ; preds = %385
  %687 = icmp eq i32 %59, %57
  br i1 %687, label %688, label %918

688:                                              ; preds = %686
  %689 = ashr i32 %55, 5
  %690 = add nuw nsw i32 %51, 31
  %691 = lshr i32 %690, 5
  %692 = sub nsw i32 %689, %691
  %693 = icmp sgt i32 %54, 0
  br i1 %693, label %694, label %1196

694:                                              ; preds = %688
  %695 = icmp eq i32 %57, 0
  %696 = xor i32 %60, -1
  %697 = icmp sgt i32 %692, 0
  %698 = icmp eq i32 %58, 0
  %699 = xor i32 %63, -1
  br label %700

700:                                              ; preds = %694, %909
  %701 = phi i32 [ %52, %694 ], [ %916, %909 ]
  %702 = phi i8* [ %96, %694 ], [ %915, %909 ]
  %703 = phi i8* [ %77, %694 ], [ %912, %909 ]
  %704 = icmp ult i8* %703, %82
  br i1 %704, label %705, label %1196

705:                                              ; preds = %700
  br i1 %695, label %775, label %706

706:                                              ; preds = %705
  %707 = load i8, i8* %703, align 1
  %708 = zext i8 %707 to i32
  %709 = shl nuw i32 %708, 24
  %710 = getelementptr inbounds i8, i8* %703, i64 1
  %711 = load i8, i8* %710, align 1
  %712 = zext i8 %711 to i32
  %713 = shl nuw nsw i32 %712, 16
  %714 = or i32 %713, %709
  %715 = getelementptr inbounds i8, i8* %703, i64 2
  %716 = load i8, i8* %715, align 1
  %717 = zext i8 %716 to i32
  %718 = shl nuw nsw i32 %717, 8
  %719 = or i32 %714, %718
  %720 = getelementptr inbounds i8, i8* %703, i64 3
  %721 = load i8, i8* %720, align 1
  %722 = zext i8 %721 to i32
  %723 = or i32 %719, %722
  %724 = load i8, i8* %702, align 1
  %725 = zext i8 %724 to i32
  %726 = shl nuw i32 %725, 24
  %727 = getelementptr inbounds i8, i8* %702, i64 1
  %728 = load i8, i8* %727, align 1
  %729 = zext i8 %728 to i32
  %730 = shl nuw nsw i32 %729, 16
  %731 = or i32 %730, %726
  %732 = getelementptr inbounds i8, i8* %702, i64 2
  %733 = load i8, i8* %732, align 1
  %734 = zext i8 %733 to i32
  %735 = shl nuw nsw i32 %734, 8
  %736 = or i32 %731, %735
  %737 = getelementptr inbounds i8, i8* %702, i64 3
  %738 = load i8, i8* %737, align 1
  %739 = zext i8 %738 to i32
  %740 = or i32 %736, %739
  switch i32 %4, label %764 [
    i32 0, label %741
    i32 1, label %746
    i32 2, label %749
    i32 3, label %754
    i32 4, label %760
  ]

741:                                              ; preds = %706
  %742 = and i32 %740, %696
  %743 = or i32 %740, %723
  %744 = and i32 %743, %60
  %745 = or i32 %744, %742
  br label %764

746:                                              ; preds = %706
  %747 = or i32 %723, %696
  %748 = and i32 %747, %740
  br label %764

749:                                              ; preds = %706
  %750 = and i32 %740, %696
  %751 = xor i32 %740, %723
  %752 = and i32 %751, %60
  %753 = or i32 %752, %750
  br label %764

754:                                              ; preds = %706
  %755 = and i32 %740, %696
  %756 = xor i32 %740, %723
  %757 = xor i32 %756, -1
  %758 = and i32 %60, %757
  %759 = or i32 %758, %755
  br label %764

760:                                              ; preds = %706
  %761 = and i32 %740, %696
  %762 = and i32 %723, %60
  %763 = or i32 %761, %762
  br label %764

764:                                              ; preds = %706, %760, %754, %749, %746, %741
  %765 = phi i32 [ 0, %706 ], [ %763, %760 ], [ %759, %754 ], [ %753, %749 ], [ %748, %746 ], [ %745, %741 ]
  %766 = lshr i32 %765, 24
  %767 = trunc i32 %766 to i8
  store i8 %767, i8* %702, align 1
  %768 = lshr i32 %765, 16
  %769 = trunc i32 %768 to i8
  store i8 %769, i8* %727, align 1
  %770 = lshr i32 %765, 8
  %771 = trunc i32 %770 to i8
  store i8 %771, i8* %732, align 1
  %772 = trunc i32 %765 to i8
  store i8 %772, i8* %737, align 1
  %773 = getelementptr inbounds i8, i8* %703, i64 4
  %774 = getelementptr inbounds i8, i8* %702, i64 4
  br label %775

775:                                              ; preds = %705, %764
  %776 = phi i8* [ %773, %764 ], [ %703, %705 ]
  %777 = phi i8* [ %774, %764 ], [ %702, %705 ]
  br i1 %697, label %781, label %778

778:                                              ; preds = %829, %775
  %779 = phi i8* [ %776, %775 ], [ %838, %829 ]
  %780 = phi i8* [ %777, %775 ], [ %839, %829 ]
  br i1 %698, label %909, label %842

781:                                              ; preds = %775, %829
  %782 = phi i32 [ %840, %829 ], [ 0, %775 ]
  %783 = phi i8* [ %839, %829 ], [ %777, %775 ]
  %784 = phi i8* [ %838, %829 ], [ %776, %775 ]
  %785 = load i8, i8* %784, align 1
  %786 = zext i8 %785 to i32
  %787 = shl nuw i32 %786, 24
  %788 = getelementptr inbounds i8, i8* %784, i64 1
  %789 = load i8, i8* %788, align 1
  %790 = zext i8 %789 to i32
  %791 = shl nuw nsw i32 %790, 16
  %792 = or i32 %791, %787
  %793 = getelementptr inbounds i8, i8* %784, i64 2
  %794 = load i8, i8* %793, align 1
  %795 = zext i8 %794 to i32
  %796 = shl nuw nsw i32 %795, 8
  %797 = or i32 %792, %796
  %798 = getelementptr inbounds i8, i8* %784, i64 3
  %799 = load i8, i8* %798, align 1
  %800 = zext i8 %799 to i32
  %801 = or i32 %797, %800
  %802 = load i8, i8* %783, align 1
  %803 = zext i8 %802 to i32
  %804 = shl nuw i32 %803, 24
  %805 = getelementptr inbounds i8, i8* %783, i64 1
  %806 = load i8, i8* %805, align 1
  %807 = zext i8 %806 to i32
  %808 = shl nuw nsw i32 %807, 16
  %809 = or i32 %808, %804
  %810 = getelementptr inbounds i8, i8* %783, i64 2
  %811 = load i8, i8* %810, align 1
  %812 = zext i8 %811 to i32
  %813 = shl nuw nsw i32 %812, 8
  %814 = or i32 %809, %813
  %815 = getelementptr inbounds i8, i8* %783, i64 3
  %816 = load i8, i8* %815, align 1
  %817 = zext i8 %816 to i32
  %818 = or i32 %814, %817
  switch i32 %4, label %829 [
    i32 0, label %819
    i32 1, label %821
    i32 2, label %823
    i32 3, label %825
    i32 4, label %828
  ]

819:                                              ; preds = %781
  %820 = or i32 %818, %801
  br label %829

821:                                              ; preds = %781
  %822 = and i32 %818, %801
  br label %829

823:                                              ; preds = %781
  %824 = xor i32 %818, %801
  br label %829

825:                                              ; preds = %781
  %826 = xor i32 %818, %801
  %827 = xor i32 %826, -1
  br label %829

828:                                              ; preds = %781
  br label %829

829:                                              ; preds = %781, %828, %825, %823, %821, %819
  %830 = phi i32 [ 0, %781 ], [ %801, %828 ], [ %827, %825 ], [ %824, %823 ], [ %822, %821 ], [ %820, %819 ]
  %831 = lshr i32 %830, 24
  %832 = trunc i32 %831 to i8
  store i8 %832, i8* %783, align 1
  %833 = lshr i32 %830, 16
  %834 = trunc i32 %833 to i8
  store i8 %834, i8* %805, align 1
  %835 = lshr i32 %830, 8
  %836 = trunc i32 %835 to i8
  store i8 %836, i8* %810, align 1
  %837 = trunc i32 %830 to i8
  store i8 %837, i8* %815, align 1
  %838 = getelementptr inbounds i8, i8* %784, i64 4
  %839 = getelementptr inbounds i8, i8* %783, i64 4
  %840 = add nuw nsw i32 %782, 1
  %841 = icmp slt i32 %840, %692
  br i1 %841, label %781, label %778

842:                                              ; preds = %778
  %843 = load i8, i8* %779, align 1
  %844 = zext i8 %843 to i32
  %845 = shl nuw i32 %844, 24
  %846 = getelementptr inbounds i8, i8* %779, i64 1
  %847 = load i8, i8* %846, align 1
  %848 = zext i8 %847 to i32
  %849 = shl nuw nsw i32 %848, 16
  %850 = or i32 %849, %845
  %851 = getelementptr inbounds i8, i8* %779, i64 2
  %852 = load i8, i8* %851, align 1
  %853 = zext i8 %852 to i32
  %854 = shl nuw nsw i32 %853, 8
  %855 = or i32 %850, %854
  %856 = getelementptr inbounds i8, i8* %779, i64 3
  %857 = load i8, i8* %856, align 1
  %858 = zext i8 %857 to i32
  %859 = or i32 %855, %858
  %860 = load i8, i8* %780, align 1
  %861 = zext i8 %860 to i32
  %862 = shl nuw i32 %861, 24
  %863 = getelementptr inbounds i8, i8* %780, i64 1
  %864 = load i8, i8* %863, align 1
  %865 = zext i8 %864 to i32
  %866 = shl nuw nsw i32 %865, 16
  %867 = or i32 %866, %862
  %868 = getelementptr inbounds i8, i8* %780, i64 2
  %869 = load i8, i8* %868, align 1
  %870 = zext i8 %869 to i32
  %871 = shl nuw nsw i32 %870, 8
  %872 = or i32 %867, %871
  %873 = getelementptr inbounds i8, i8* %780, i64 3
  %874 = load i8, i8* %873, align 1
  %875 = zext i8 %874 to i32
  %876 = or i32 %872, %875
  switch i32 %4, label %900 [
    i32 0, label %877
    i32 1, label %882
    i32 2, label %885
    i32 3, label %890
    i32 4, label %896
  ]

877:                                              ; preds = %842
  %878 = and i32 %876, %699
  %879 = or i32 %876, %859
  %880 = and i32 %879, %63
  %881 = or i32 %880, %878
  br label %900

882:                                              ; preds = %842
  %883 = or i32 %859, %699
  %884 = and i32 %883, %876
  br label %900

885:                                              ; preds = %842
  %886 = and i32 %876, %699
  %887 = xor i32 %876, %859
  %888 = and i32 %887, %63
  %889 = or i32 %888, %886
  br label %900

890:                                              ; preds = %842
  %891 = and i32 %876, %699
  %892 = xor i32 %876, %859
  %893 = xor i32 %892, -1
  %894 = and i32 %63, %893
  %895 = or i32 %894, %891
  br label %900

896:                                              ; preds = %842
  %897 = and i32 %876, %699
  %898 = and i32 %859, %63
  %899 = or i32 %897, %898
  br label %900

900:                                              ; preds = %842, %896, %890, %885, %882, %877
  %901 = phi i32 [ 0, %842 ], [ %899, %896 ], [ %895, %890 ], [ %889, %885 ], [ %884, %882 ], [ %881, %877 ]
  %902 = lshr i32 %901, 24
  %903 = trunc i32 %902 to i8
  store i8 %903, i8* %780, align 1
  %904 = lshr i32 %901, 16
  %905 = trunc i32 %904 to i8
  store i8 %905, i8* %863, align 1
  %906 = lshr i32 %901, 8
  %907 = trunc i32 %906 to i8
  store i8 %907, i8* %868, align 1
  %908 = trunc i32 %901 to i8
  store i8 %908, i8* %873, align 1
  br label %909

909:                                              ; preds = %778, %900
  %910 = load i32, i32* %68, align 8
  %911 = sext i32 %910 to i64
  %912 = getelementptr inbounds i8, i8* %703, i64 %911
  %913 = load i32, i32* %88, align 8
  %914 = sext i32 %913 to i64
  %915 = getelementptr inbounds i8, i8* %702, i64 %914
  %916 = add nuw nsw i32 %701, 1
  %917 = icmp slt i32 %916, %56
  br i1 %917, label %700, label %1196

918:                                              ; preds = %686
  %919 = sub nsw i32 %57, %59
  %920 = sub nsw i32 32, %919
  %921 = ashr i32 %55, 5
  %922 = add nuw nsw i32 %51, 31
  %923 = lshr i32 %922, 5
  %924 = sub nsw i32 %921, %923
  %925 = icmp sgt i32 %54, 0
  br i1 %925, label %926, label %1196

926:                                              ; preds = %918
  %927 = icmp eq i32 %57, 0
  %928 = xor i32 %60, -1
  %929 = icmp sgt i32 %924, 0
  %930 = icmp eq i32 %58, 0
  %931 = sext i32 %85 to i64
  %932 = xor i32 %63, -1
  br label %933

933:                                              ; preds = %926, %1187
  %934 = phi i32 [ %52, %926 ], [ %1194, %1187 ]
  %935 = phi i8* [ %96, %926 ], [ %1193, %1187 ]
  %936 = phi i8* [ %77, %926 ], [ %1190, %1187 ]
  %937 = icmp ult i8* %936, %82
  br i1 %937, label %938, label %1196

938:                                              ; preds = %933
  br i1 %927, label %1008, label %939

939:                                              ; preds = %938
  %940 = load i8, i8* %936, align 1
  %941 = zext i8 %940 to i32
  %942 = shl nuw i32 %941, 24
  %943 = getelementptr inbounds i8, i8* %936, i64 1
  %944 = load i8, i8* %943, align 1
  %945 = zext i8 %944 to i32
  %946 = shl nuw nsw i32 %945, 16
  %947 = or i32 %946, %942
  %948 = getelementptr inbounds i8, i8* %936, i64 2
  %949 = load i8, i8* %948, align 1
  %950 = zext i8 %949 to i32
  %951 = shl nuw nsw i32 %950, 8
  %952 = or i32 %947, %951
  %953 = getelementptr inbounds i8, i8* %936, i64 3
  %954 = load i8, i8* %953, align 1
  %955 = zext i8 %954 to i32
  %956 = or i32 %952, %955
  %957 = lshr i32 %956, %919
  %958 = load i8, i8* %935, align 1
  %959 = zext i8 %958 to i32
  %960 = shl nuw i32 %959, 24
  %961 = getelementptr inbounds i8, i8* %935, i64 1
  %962 = load i8, i8* %961, align 1
  %963 = zext i8 %962 to i32
  %964 = shl nuw nsw i32 %963, 16
  %965 = or i32 %964, %960
  %966 = getelementptr inbounds i8, i8* %935, i64 2
  %967 = load i8, i8* %966, align 1
  %968 = zext i8 %967 to i32
  %969 = shl nuw nsw i32 %968, 8
  %970 = or i32 %965, %969
  %971 = getelementptr inbounds i8, i8* %935, i64 3
  %972 = load i8, i8* %971, align 1
  %973 = zext i8 %972 to i32
  %974 = or i32 %970, %973
  switch i32 %4, label %998 [
    i32 0, label %975
    i32 1, label %980
    i32 2, label %983
    i32 3, label %988
    i32 4, label %994
  ]

975:                                              ; preds = %939
  %976 = and i32 %974, %928
  %977 = or i32 %974, %957
  %978 = and i32 %977, %60
  %979 = or i32 %978, %976
  br label %998

980:                                              ; preds = %939
  %981 = or i32 %957, %928
  %982 = and i32 %981, %974
  br label %998

983:                                              ; preds = %939
  %984 = and i32 %974, %928
  %985 = xor i32 %974, %957
  %986 = and i32 %985, %60
  %987 = or i32 %986, %984
  br label %998

988:                                              ; preds = %939
  %989 = and i32 %974, %928
  %990 = xor i32 %974, %957
  %991 = xor i32 %990, -1
  %992 = and i32 %60, %991
  %993 = or i32 %992, %989
  br label %998

994:                                              ; preds = %939
  %995 = and i32 %974, %928
  %996 = and i32 %957, %60
  %997 = or i32 %995, %996
  br label %998

998:                                              ; preds = %939, %994, %988, %983, %980, %975
  %999 = phi i32 [ 0, %939 ], [ %997, %994 ], [ %993, %988 ], [ %987, %983 ], [ %982, %980 ], [ %979, %975 ]
  %1000 = lshr i32 %999, 24
  %1001 = trunc i32 %1000 to i8
  store i8 %1001, i8* %935, align 1
  %1002 = lshr i32 %999, 16
  %1003 = trunc i32 %1002 to i8
  store i8 %1003, i8* %961, align 1
  %1004 = lshr i32 %999, 8
  %1005 = trunc i32 %1004 to i8
  store i8 %1005, i8* %966, align 1
  %1006 = trunc i32 %999 to i8
  store i8 %1006, i8* %971, align 1
  %1007 = getelementptr inbounds i8, i8* %935, i64 4
  br label %1008

1008:                                             ; preds = %938, %998
  %1009 = phi i8* [ %1007, %998 ], [ %935, %938 ]
  br i1 %929, label %1013, label %1010

1010:                                             ; preds = %1082, %1008
  %1011 = phi i8* [ %936, %1008 ], [ %1035, %1082 ]
  %1012 = phi i8* [ %1009, %1008 ], [ %1091, %1082 ]
  br i1 %930, label %1187, label %1094

1013:                                             ; preds = %1008, %1082
  %1014 = phi i32 [ %1092, %1082 ], [ 0, %1008 ]
  %1015 = phi i8* [ %1091, %1082 ], [ %1009, %1008 ]
  %1016 = phi i8* [ %1035, %1082 ], [ %936, %1008 ]
  %1017 = load i8, i8* %1016, align 1
  %1018 = zext i8 %1017 to i32
  %1019 = shl nuw i32 %1018, 24
  %1020 = getelementptr inbounds i8, i8* %1016, i64 1
  %1021 = load i8, i8* %1020, align 1
  %1022 = zext i8 %1021 to i32
  %1023 = shl nuw nsw i32 %1022, 16
  %1024 = or i32 %1023, %1019
  %1025 = getelementptr inbounds i8, i8* %1016, i64 2
  %1026 = load i8, i8* %1025, align 1
  %1027 = zext i8 %1026 to i32
  %1028 = shl nuw nsw i32 %1027, 8
  %1029 = or i32 %1024, %1028
  %1030 = getelementptr inbounds i8, i8* %1016, i64 3
  %1031 = load i8, i8* %1030, align 1
  %1032 = zext i8 %1031 to i32
  %1033 = or i32 %1029, %1032
  %1034 = shl i32 %1033, %920
  %1035 = getelementptr inbounds i8, i8* %1016, i64 4
  %1036 = load i8, i8* %1035, align 1
  %1037 = zext i8 %1036 to i32
  %1038 = shl nuw i32 %1037, 24
  %1039 = getelementptr inbounds i8, i8* %1016, i64 5
  %1040 = load i8, i8* %1039, align 1
  %1041 = zext i8 %1040 to i32
  %1042 = shl nuw nsw i32 %1041, 16
  %1043 = or i32 %1042, %1038
  %1044 = getelementptr inbounds i8, i8* %1016, i64 6
  %1045 = load i8, i8* %1044, align 1
  %1046 = zext i8 %1045 to i32
  %1047 = shl nuw nsw i32 %1046, 8
  %1048 = or i32 %1043, %1047
  %1049 = getelementptr inbounds i8, i8* %1016, i64 7
  %1050 = load i8, i8* %1049, align 1
  %1051 = zext i8 %1050 to i32
  %1052 = or i32 %1048, %1051
  %1053 = lshr i32 %1052, %919
  %1054 = or i32 %1053, %1034
  %1055 = load i8, i8* %1015, align 1
  %1056 = zext i8 %1055 to i32
  %1057 = shl nuw i32 %1056, 24
  %1058 = getelementptr inbounds i8, i8* %1015, i64 1
  %1059 = load i8, i8* %1058, align 1
  %1060 = zext i8 %1059 to i32
  %1061 = shl nuw nsw i32 %1060, 16
  %1062 = or i32 %1061, %1057
  %1063 = getelementptr inbounds i8, i8* %1015, i64 2
  %1064 = load i8, i8* %1063, align 1
  %1065 = zext i8 %1064 to i32
  %1066 = shl nuw nsw i32 %1065, 8
  %1067 = or i32 %1062, %1066
  %1068 = getelementptr inbounds i8, i8* %1015, i64 3
  %1069 = load i8, i8* %1068, align 1
  %1070 = zext i8 %1069 to i32
  %1071 = or i32 %1067, %1070
  switch i32 %4, label %1082 [
    i32 0, label %1072
    i32 1, label %1074
    i32 2, label %1076
    i32 3, label %1078
    i32 4, label %1081
  ]

1072:                                             ; preds = %1013
  %1073 = or i32 %1071, %1054
  br label %1082

1074:                                             ; preds = %1013
  %1075 = and i32 %1071, %1054
  br label %1082

1076:                                             ; preds = %1013
  %1077 = xor i32 %1071, %1054
  br label %1082

1078:                                             ; preds = %1013
  %1079 = xor i32 %1071, %1054
  %1080 = xor i32 %1079, -1
  br label %1082

1081:                                             ; preds = %1013
  br label %1082

1082:                                             ; preds = %1013, %1081, %1078, %1076, %1074, %1072
  %1083 = phi i32 [ 0, %1013 ], [ %1054, %1081 ], [ %1080, %1078 ], [ %1077, %1076 ], [ %1075, %1074 ], [ %1073, %1072 ]
  %1084 = lshr i32 %1083, 24
  %1085 = trunc i32 %1084 to i8
  store i8 %1085, i8* %1015, align 1
  %1086 = lshr i32 %1083, 16
  %1087 = trunc i32 %1086 to i8
  store i8 %1087, i8* %1058, align 1
  %1088 = lshr i32 %1083, 8
  %1089 = trunc i32 %1088 to i8
  store i8 %1089, i8* %1063, align 1
  %1090 = trunc i32 %1083 to i8
  store i8 %1090, i8* %1068, align 1
  %1091 = getelementptr inbounds i8, i8* %1015, i64 4
  %1092 = add nuw nsw i32 %1014, 1
  %1093 = icmp slt i32 %1092, %924
  br i1 %1093, label %1013, label %1010

1094:                                             ; preds = %1010
  %1095 = load i8, i8* %1011, align 1
  %1096 = zext i8 %1095 to i32
  %1097 = shl nuw i32 %1096, 24
  %1098 = getelementptr inbounds i8, i8* %1011, i64 1
  %1099 = load i8, i8* %1098, align 1
  %1100 = zext i8 %1099 to i32
  %1101 = shl nuw nsw i32 %1100, 16
  %1102 = or i32 %1101, %1097
  %1103 = getelementptr inbounds i8, i8* %1011, i64 2
  %1104 = load i8, i8* %1103, align 1
  %1105 = zext i8 %1104 to i32
  %1106 = shl nuw nsw i32 %1105, 8
  %1107 = or i32 %1102, %1106
  %1108 = getelementptr inbounds i8, i8* %1011, i64 3
  %1109 = load i8, i8* %1108, align 1
  %1110 = zext i8 %1109 to i32
  %1111 = or i32 %1107, %1110
  %1112 = shl i32 %1111, %920
  %1113 = getelementptr inbounds i8, i8* %1011, i64 4
  %1114 = getelementptr inbounds i8, i8* %936, i64 %931
  %1115 = icmp ult i8* %1113, %1114
  br i1 %1115, label %1116, label %1134

1116:                                             ; preds = %1094
  %1117 = load i8, i8* %1113, align 1
  %1118 = zext i8 %1117 to i32
  %1119 = shl nuw i32 %1118, 24
  %1120 = getelementptr inbounds i8, i8* %1011, i64 5
  %1121 = load i8, i8* %1120, align 1
  %1122 = zext i8 %1121 to i32
  %1123 = shl nuw nsw i32 %1122, 16
  %1124 = or i32 %1123, %1119
  %1125 = getelementptr inbounds i8, i8* %1011, i64 6
  %1126 = load i8, i8* %1125, align 1
  %1127 = zext i8 %1126 to i32
  %1128 = shl nuw nsw i32 %1127, 8
  %1129 = or i32 %1124, %1128
  %1130 = getelementptr inbounds i8, i8* %1011, i64 7
  %1131 = load i8, i8* %1130, align 1
  %1132 = zext i8 %1131 to i32
  %1133 = or i32 %1129, %1132
  br label %1134

1134:                                             ; preds = %1094, %1116
  %1135 = phi i32 [ %1133, %1116 ], [ 0, %1094 ]
  %1136 = lshr i32 %1135, %919
  %1137 = or i32 %1136, %1112
  %1138 = load i8, i8* %1012, align 1
  %1139 = zext i8 %1138 to i32
  %1140 = shl nuw i32 %1139, 24
  %1141 = getelementptr inbounds i8, i8* %1012, i64 1
  %1142 = load i8, i8* %1141, align 1
  %1143 = zext i8 %1142 to i32
  %1144 = shl nuw nsw i32 %1143, 16
  %1145 = or i32 %1144, %1140
  %1146 = getelementptr inbounds i8, i8* %1012, i64 2
  %1147 = load i8, i8* %1146, align 1
  %1148 = zext i8 %1147 to i32
  %1149 = shl nuw nsw i32 %1148, 8
  %1150 = or i32 %1145, %1149
  %1151 = getelementptr inbounds i8, i8* %1012, i64 3
  %1152 = load i8, i8* %1151, align 1
  %1153 = zext i8 %1152 to i32
  %1154 = or i32 %1150, %1153
  switch i32 %4, label %1178 [
    i32 0, label %1155
    i32 1, label %1160
    i32 2, label %1163
    i32 3, label %1168
    i32 4, label %1174
  ]

1155:                                             ; preds = %1134
  %1156 = and i32 %1154, %932
  %1157 = or i32 %1154, %1137
  %1158 = and i32 %1157, %63
  %1159 = or i32 %1158, %1156
  br label %1178

1160:                                             ; preds = %1134
  %1161 = or i32 %1137, %932
  %1162 = and i32 %1161, %1154
  br label %1178

1163:                                             ; preds = %1134
  %1164 = and i32 %1154, %932
  %1165 = xor i32 %1154, %1137
  %1166 = and i32 %1165, %63
  %1167 = or i32 %1166, %1164
  br label %1178

1168:                                             ; preds = %1134
  %1169 = and i32 %1154, %932
  %1170 = xor i32 %1154, %1137
  %1171 = xor i32 %1170, -1
  %1172 = and i32 %63, %1171
  %1173 = or i32 %1172, %1169
  br label %1178

1174:                                             ; preds = %1134
  %1175 = and i32 %1154, %932
  %1176 = and i32 %1137, %63
  %1177 = or i32 %1175, %1176
  br label %1178

1178:                                             ; preds = %1134, %1174, %1168, %1163, %1160, %1155
  %1179 = phi i32 [ 0, %1134 ], [ %1177, %1174 ], [ %1173, %1168 ], [ %1167, %1163 ], [ %1162, %1160 ], [ %1159, %1155 ]
  %1180 = lshr i32 %1179, 24
  %1181 = trunc i32 %1180 to i8
  store i8 %1181, i8* %1012, align 1
  %1182 = lshr i32 %1179, 16
  %1183 = trunc i32 %1182 to i8
  store i8 %1183, i8* %1141, align 1
  %1184 = lshr i32 %1179, 8
  %1185 = trunc i32 %1184 to i8
  store i8 %1185, i8* %1146, align 1
  %1186 = trunc i32 %1179 to i8
  store i8 %1186, i8* %1151, align 1
  br label %1187

1187:                                             ; preds = %1010, %1178
  %1188 = load i32, i32* %68, align 8
  %1189 = sext i32 %1188 to i64
  %1190 = getelementptr inbounds i8, i8* %936, i64 %1189
  %1191 = load i32, i32* %88, align 8
  %1192 = sext i32 %1191 to i64
  %1193 = getelementptr inbounds i8, i8* %935, i64 %1192
  %1194 = add nuw nsw i32 %934, 1
  %1195 = icmp slt i32 %1194, %56
  br i1 %1195, label %933, label %1196

1196:                                             ; preds = %933, %1187, %700, %909, %402, %677, %284, %368, %197, %261, %111, %175, %918, %688, %387, %278, %192, %106, %12, %6
  %1197 = phi i1 [ false, %6 ], [ false, %12 ], [ true, %106 ], [ true, %192 ], [ true, %278 ], [ true, %387 ], [ true, %688 ], [ true, %918 ], [ false, %111 ], [ true, %175 ], [ false, %197 ], [ true, %261 ], [ false, %284 ], [ true, %368 ], [ false, %402 ], [ true, %677 ], [ false, %700 ], [ true, %909 ], [ false, %933 ], [ true, %1187 ]
  ret i1 %1197
}

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN12CJBig2_Image17ComposeToWithRectEPS_iiRK7FX_RECT14JBig2ComposeOp(%class.CJBig2_Image* nocapture readonly, %class.CJBig2_Image* nocapture readonly, i32, i32, %struct.FX_RECT* nocapture readonly dereferenceable(16), i32) local_unnamed_addr #0 align 2 {
  %7 = getelementptr inbounds %class.CJBig2_Image, %class.CJBig2_Image* %0, i64 0, i32 0, i32 1, i32 0
  %8 = load i8*, i8** %7, align 8
  %9 = icmp eq i8* %8, null
  br i1 %9, label %12, label %10

10:                                               ; preds = %6
  %11 = tail call zeroext i1 @_ZN12CJBig2_Image17ComposeToInternalEPS_ii14JBig2ComposeOpRK7FX_RECT(%class.CJBig2_Image* %0, %class.CJBig2_Image* %1, i32 %2, i32 %3, i32 %5, %struct.FX_RECT* dereferenceable(16) %4)
  br label %12

12:                                               ; preds = %6, %10
  %13 = phi i1 [ false, %6 ], [ %11, %10 ]
  ret i1 %13
}

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN12CJBig2_Image11ComposeFromEiiPS_14JBig2ComposeOp(%class.CJBig2_Image* nocapture readonly, i32, i32, %class.CJBig2_Image* nocapture readonly, i32) local_unnamed_addr #0 align 2 {
  %6 = alloca %struct.FX_RECT, align 4
  %7 = getelementptr inbounds %class.CJBig2_Image, %class.CJBig2_Image* %0, i64 0, i32 0, i32 1, i32 0
  %8 = load i8*, i8** %7, align 8
  %9 = icmp eq i8* %8, null
  br i1 %9, label %27, label %10

10:                                               ; preds = %5
  %11 = getelementptr inbounds %class.CJBig2_Image, %class.CJBig2_Image* %3, i64 0, i32 0, i32 1, i32 0
  %12 = load i8*, i8** %11, align 8
  %13 = icmp eq i8* %12, null
  %14 = bitcast %struct.FX_RECT* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %14) #8
  br i1 %13, label %25, label %15

15:                                               ; preds = %10
  %16 = getelementptr inbounds %class.CJBig2_Image, %class.CJBig2_Image* %3, i64 0, i32 1
  %17 = load i32, i32* %16, align 8
  %18 = getelementptr inbounds %class.CJBig2_Image, %class.CJBig2_Image* %3, i64 0, i32 2
  %19 = load i32, i32* %18, align 4
  %20 = getelementptr inbounds %struct.FX_RECT, %struct.FX_RECT* %6, i64 0, i32 0
  store i32 0, i32* %20, align 4
  %21 = getelementptr inbounds %struct.FX_RECT, %struct.FX_RECT* %6, i64 0, i32 1
  store i32 0, i32* %21, align 4
  %22 = getelementptr inbounds %struct.FX_RECT, %struct.FX_RECT* %6, i64 0, i32 2
  store i32 %17, i32* %22, align 4
  %23 = getelementptr inbounds %struct.FX_RECT, %struct.FX_RECT* %6, i64 0, i32 3
  store i32 %19, i32* %23, align 4
  %24 = call zeroext i1 @_ZN12CJBig2_Image17ComposeToInternalEPS_ii14JBig2ComposeOpRK7FX_RECT(%class.CJBig2_Image* %3, %class.CJBig2_Image* %0, i32 %1, i32 %2, i32 %4, %struct.FX_RECT* nonnull dereferenceable(16) %6) #8
  br label %25

25:                                               ; preds = %10, %15
  %26 = phi i1 [ false, %10 ], [ %24, %15 ]
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %14) #8
  br label %27

27:                                               ; preds = %5, %25
  %28 = phi i1 [ false, %5 ], [ %26, %25 ]
  ret i1 %28
}

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN12CJBig2_Image19ComposeFromWithRectEiiPS_RK7FX_RECT14JBig2ComposeOp(%class.CJBig2_Image* nocapture readonly, i32, i32, %class.CJBig2_Image* nocapture readonly, %struct.FX_RECT* nocapture readonly dereferenceable(16), i32) local_unnamed_addr #0 align 2 {
  %7 = getelementptr inbounds %class.CJBig2_Image, %class.CJBig2_Image* %0, i64 0, i32 0, i32 1, i32 0
  %8 = load i8*, i8** %7, align 8
  %9 = icmp eq i8* %8, null
  br i1 %9, label %16, label %10

10:                                               ; preds = %6
  %11 = getelementptr inbounds %class.CJBig2_Image, %class.CJBig2_Image* %3, i64 0, i32 0, i32 1, i32 0
  %12 = load i8*, i8** %11, align 8
  %13 = icmp eq i8* %12, null
  br i1 %13, label %16, label %14

14:                                               ; preds = %10
  %15 = tail call zeroext i1 @_ZN12CJBig2_Image17ComposeToInternalEPS_ii14JBig2ComposeOpRK7FX_RECT(%class.CJBig2_Image* %3, %class.CJBig2_Image* %0, i32 %1, i32 %2, i32 %5, %struct.FX_RECT* dereferenceable(16) %4) #8
  br label %16

16:                                               ; preds = %6, %14, %10
  %17 = phi i1 [ false, %6 ], [ false, %10 ], [ %15, %14 ]
  ret i1 %17
}

; Function Attrs: nounwind ssp uwtable
define hidden %class.CJBig2_Image* @_ZN12CJBig2_Image8SubImageEiiii(%class.CJBig2_Image* nocapture readonly, i32, i32, i32, i32) local_unnamed_addr #0 align 2 {
  %6 = tail call i8* @_Znwm(i64 32) #9
  %7 = bitcast i8* %6 to %class.CJBig2_Image*
  %8 = getelementptr inbounds i8, i8* %6, i64 16
  %9 = bitcast i8* %8 to i32*
  %10 = getelementptr inbounds i8, i8* %6, i64 20
  %11 = bitcast i8* %10 to i32*
  %12 = getelementptr inbounds i8, i8* %6, i64 24
  %13 = bitcast i8* %12 to i32*
  %14 = icmp slt i32 %4, 1
  %15 = add i32 %3, -1
  %16 = icmp ugt i32 %15, 2147483615
  %17 = or i1 %16, %14
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %6, i8 0, i64 28, i1 false) #8
  br i1 %17, label %89, label %18

18:                                               ; preds = %5
  %19 = add nuw nsw i32 %3, 31
  %20 = and i32 %19, -32
  %21 = sdiv i32 2147483616, %20
  %22 = icmp slt i32 %21, %4
  br i1 %22, label %89, label %23

23:                                               ; preds = %18
  store i32 %3, i32* %9, align 8
  store i32 %4, i32* %11, align 4
  %24 = lshr exact i32 %20, 3
  store i32 %24, i32* %13, align 8
  %25 = zext i32 %24 to i64
  %26 = sext i32 %4 to i64
  %27 = tail call i8* @_ZN6pdfium8internal13CallocOrDie2DEmmm(i64 %25, i64 %26, i64 1) #8
  %28 = ptrtoint i8* %27 to i64
  %29 = getelementptr inbounds i8, i8* %6, i64 8
  %30 = bitcast i8* %29 to i8**
  store i8* %27, i8** %30, align 8
  %31 = bitcast i8* %6 to i64*
  store i64 %28, i64* %31, align 8
  %32 = icmp eq i8* %27, null
  br i1 %32, label %89, label %33

33:                                               ; preds = %23
  %34 = getelementptr inbounds %class.CJBig2_Image, %class.CJBig2_Image* %0, i64 0, i32 0, i32 1, i32 0
  %35 = load i8*, i8** %34, align 8
  %36 = icmp eq i8* %35, null
  %37 = icmp slt i32 %1, 0
  %38 = or i1 %37, %36
  br i1 %38, label %89, label %39

39:                                               ; preds = %33
  %40 = getelementptr inbounds %class.CJBig2_Image, %class.CJBig2_Image* %0, i64 0, i32 1
  %41 = load i32, i32* %40, align 8
  %42 = icmp sle i32 %41, %1
  %43 = icmp slt i32 %2, 0
  %44 = or i1 %43, %42
  br i1 %44, label %89, label %45

45:                                               ; preds = %39
  %46 = getelementptr inbounds %class.CJBig2_Image, %class.CJBig2_Image* %0, i64 0, i32 2
  %47 = load i32, i32* %46, align 4
  %48 = icmp sgt i32 %47, %2
  br i1 %48, label %49, label %89

49:                                               ; preds = %45
  %50 = and i32 %1, 7
  %51 = icmp eq i32 %50, 0
  br i1 %51, label %52, label %88

52:                                               ; preds = %49
  %53 = lshr i32 %1, 3
  %54 = getelementptr inbounds %class.CJBig2_Image, %class.CJBig2_Image* %0, i64 0, i32 3
  %55 = load i32, i32* %54, align 8
  %56 = sub nsw i32 %55, %53
  %57 = sub nsw i32 %47, %2
  %58 = icmp slt i32 %57, %4
  %59 = select i1 %58, i32 %57, i32 %4
  %60 = icmp sgt i32 %59, 0
  br i1 %60, label %61, label %89

61:                                               ; preds = %52
  %62 = icmp slt i32 %56, %24
  %63 = select i1 %62, i32 %56, i32 %24
  %64 = zext i32 %53 to i64
  %65 = sext i32 %63 to i64
  %66 = mul nsw i32 %55, %2
  %67 = sext i32 %66 to i64
  %68 = getelementptr inbounds i8, i8* %35, i64 %64
  %69 = getelementptr inbounds i8, i8* %68, i64 %67
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 1 %27, i8* align 1 %69, i64 %65, i1 false) #8
  %70 = icmp eq i32 %59, 1
  br i1 %70, label %89, label %71

71:                                               ; preds = %61
  %72 = sext i32 %2 to i64
  %73 = zext i32 %24 to i64
  %74 = sext i32 %59 to i64
  br label %75

75:                                               ; preds = %71, %75
  %76 = phi i64 [ 1, %71 ], [ %86, %75 ]
  %77 = load i32, i32* %54, align 8
  %78 = mul nsw i64 %76, %73
  %79 = getelementptr inbounds i8, i8* %27, i64 %78
  %80 = add nsw i64 %76, %72
  %81 = load i8*, i8** %34, align 8
  %82 = sext i32 %77 to i64
  %83 = mul nsw i64 %80, %82
  %84 = getelementptr inbounds i8, i8* %81, i64 %64
  %85 = getelementptr inbounds i8, i8* %84, i64 %83
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %79, i8* align 1 %85, i64 %65, i1 false) #8
  %86 = add nuw nsw i64 %76, 1
  %87 = icmp slt i64 %86, %74
  br i1 %87, label %75, label %89

88:                                               ; preds = %49
  tail call void @_ZN12CJBig2_Image12SubImageSlowEiiiiPS_(%class.CJBig2_Image* %0, i32 %1, i32 %2, i32 undef, i32 undef, %class.CJBig2_Image* nonnull %7)
  br label %89

89:                                               ; preds = %75, %18, %5, %61, %52, %33, %23, %45, %39, %88
  ret %class.CJBig2_Image* %7
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN12CJBig2_Image12SubImageFastEiiiiPS_(%class.CJBig2_Image* nocapture readonly, i32, i32, i32, i32, %class.CJBig2_Image* nocapture readonly) local_unnamed_addr #0 align 2 {
  %7 = sdiv i32 %1, 8
  %8 = getelementptr inbounds %class.CJBig2_Image, %class.CJBig2_Image* %5, i64 0, i32 3
  %9 = getelementptr inbounds %class.CJBig2_Image, %class.CJBig2_Image* %0, i64 0, i32 3
  %10 = load i32, i32* %9, align 8
  %11 = sub nsw i32 %10, %7
  %12 = load i32, i32* %8, align 4
  %13 = getelementptr inbounds %class.CJBig2_Image, %class.CJBig2_Image* %5, i64 0, i32 2
  %14 = getelementptr inbounds %class.CJBig2_Image, %class.CJBig2_Image* %0, i64 0, i32 2
  %15 = load i32, i32* %14, align 4
  %16 = sub nsw i32 %15, %2
  %17 = load i32, i32* %13, align 4
  %18 = icmp slt i32 %16, %17
  %19 = select i1 %18, i32 %16, i32 %17
  %20 = icmp sgt i32 %19, 0
  br i1 %20, label %21, label %35

21:                                               ; preds = %6
  %22 = icmp slt i32 %11, %12
  %23 = select i1 %22, i32 %11, i32 %12
  %24 = getelementptr inbounds %class.CJBig2_Image, %class.CJBig2_Image* %5, i64 0, i32 0, i32 1, i32 0
  %25 = getelementptr inbounds %class.CJBig2_Image, %class.CJBig2_Image* %0, i64 0, i32 0, i32 1, i32 0
  %26 = sext i32 %7 to i64
  %27 = sext i32 %23 to i64
  %28 = load i8*, i8** %24, align 8
  %29 = load i8*, i8** %25, align 8
  %30 = mul nsw i32 %10, %2
  %31 = sext i32 %30 to i64
  %32 = getelementptr inbounds i8, i8* %29, i64 %26
  %33 = getelementptr inbounds i8, i8* %32, i64 %31
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %28, i8* align 1 %33, i64 %27, i1 false)
  %34 = icmp eq i32 %19, 1
  br i1 %34, label %35, label %36

35:                                               ; preds = %36, %21, %6
  ret void

36:                                               ; preds = %21, %36
  %37 = phi i32 [ %50, %36 ], [ 1, %21 ]
  %38 = load i32, i32* %8, align 8
  %39 = load i32, i32* %9, align 8
  %40 = load i8*, i8** %24, align 8
  %41 = mul nsw i32 %38, %37
  %42 = sext i32 %41 to i64
  %43 = getelementptr inbounds i8, i8* %40, i64 %42
  %44 = add nsw i32 %37, %2
  %45 = load i8*, i8** %25, align 8
  %46 = mul nsw i32 %39, %44
  %47 = sext i32 %46 to i64
  %48 = getelementptr inbounds i8, i8* %45, i64 %26
  %49 = getelementptr inbounds i8, i8* %48, i64 %47
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %43, i8* align 1 %49, i64 %27, i1 false)
  %50 = add nuw nsw i32 %37, 1
  %51 = icmp slt i32 %50, %19
  br i1 %51, label %36, label %35
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN12CJBig2_Image12SubImageSlowEiiiiPS_(%class.CJBig2_Image* nocapture readonly, i32, i32, i32, i32, %class.CJBig2_Image* nocapture readonly) local_unnamed_addr #0 align 2 {
  %7 = sdiv i32 %1, 32
  %8 = shl nsw i32 %7, 2
  %9 = and i32 %1, 31
  %10 = getelementptr inbounds %class.CJBig2_Image, %class.CJBig2_Image* %5, i64 0, i32 3
  %11 = getelementptr inbounds %class.CJBig2_Image, %class.CJBig2_Image* %0, i64 0, i32 3
  %12 = load i32, i32* %11, align 8
  %13 = sub nsw i32 %12, %8
  %14 = load i32, i32* %10, align 4
  %15 = getelementptr inbounds %class.CJBig2_Image, %class.CJBig2_Image* %5, i64 0, i32 2
  %16 = getelementptr inbounds %class.CJBig2_Image, %class.CJBig2_Image* %0, i64 0, i32 2
  %17 = load i32, i32* %16, align 4
  %18 = sub nsw i32 %17, %2
  %19 = load i32, i32* %15, align 4
  %20 = icmp slt i32 %18, %19
  %21 = select i1 %20, i32 %18, i32 %19
  %22 = icmp sgt i32 %21, 0
  br i1 %22, label %23, label %32

23:                                               ; preds = %6
  %24 = icmp slt i32 %13, %14
  %25 = select i1 %24, i32 %13, i32 %14
  %26 = getelementptr inbounds %class.CJBig2_Image, %class.CJBig2_Image* %0, i64 0, i32 0, i32 1, i32 0
  %27 = getelementptr inbounds %class.CJBig2_Image, %class.CJBig2_Image* %5, i64 0, i32 0, i32 1, i32 0
  %28 = sext i32 %8 to i64
  %29 = sext i32 %25 to i64
  %30 = sub nuw nsw i32 32, %9
  %31 = icmp sgt i32 %25, 0
  br label %33

32:                                               ; preds = %51, %6
  ret void

33:                                               ; preds = %54, %23
  %34 = phi i32 [ %14, %23 ], [ %56, %54 ]
  %35 = phi i32 [ %12, %23 ], [ %55, %54 ]
  %36 = phi i32 [ 0, %23 ], [ %52, %54 ]
  %37 = add nsw i32 %36, %2
  %38 = load i8*, i8** %26, align 8
  %39 = mul nsw i32 %35, %37
  %40 = sext i32 %39 to i64
  %41 = getelementptr inbounds i8, i8* %38, i64 %40
  %42 = load i8*, i8** %27, align 8
  %43 = mul nsw i32 %34, %36
  %44 = sext i32 %43 to i64
  %45 = getelementptr inbounds i8, i8* %42, i64 %44
  %46 = sext i32 %35 to i64
  %47 = getelementptr inbounds i8, i8* %41, i64 %46
  %48 = getelementptr inbounds i8, i8* %45, i64 %29
  br i1 %31, label %49, label %51

49:                                               ; preds = %33
  %50 = getelementptr inbounds i8, i8* %41, i64 %28
  br label %57

51:                                               ; preds = %100, %33
  %52 = add nuw nsw i32 %36, 1
  %53 = icmp slt i32 %52, %21
  br i1 %53, label %54, label %32

54:                                               ; preds = %51
  %55 = load i32, i32* %11, align 8
  %56 = load i32, i32* %10, align 8
  br label %33

57:                                               ; preds = %49, %100
  %58 = phi i8* [ %112, %100 ], [ %45, %49 ]
  %59 = phi i8* [ %78, %100 ], [ %50, %49 ]
  %60 = load i8, i8* %59, align 1
  %61 = zext i8 %60 to i32
  %62 = shl nuw i32 %61, 24
  %63 = getelementptr inbounds i8, i8* %59, i64 1
  %64 = load i8, i8* %63, align 1
  %65 = zext i8 %64 to i32
  %66 = shl nuw nsw i32 %65, 16
  %67 = or i32 %66, %62
  %68 = getelementptr inbounds i8, i8* %59, i64 2
  %69 = load i8, i8* %68, align 1
  %70 = zext i8 %69 to i32
  %71 = shl nuw nsw i32 %70, 8
  %72 = or i32 %67, %71
  %73 = getelementptr inbounds i8, i8* %59, i64 3
  %74 = load i8, i8* %73, align 1
  %75 = zext i8 %74 to i32
  %76 = or i32 %72, %75
  %77 = shl i32 %76, %9
  %78 = getelementptr inbounds i8, i8* %59, i64 4
  %79 = icmp ult i8* %78, %47
  br i1 %79, label %80, label %100

80:                                               ; preds = %57
  %81 = load i8, i8* %78, align 1
  %82 = zext i8 %81 to i32
  %83 = shl nuw i32 %82, 24
  %84 = getelementptr inbounds i8, i8* %59, i64 5
  %85 = load i8, i8* %84, align 1
  %86 = zext i8 %85 to i32
  %87 = shl nuw nsw i32 %86, 16
  %88 = or i32 %87, %83
  %89 = getelementptr inbounds i8, i8* %59, i64 6
  %90 = load i8, i8* %89, align 1
  %91 = zext i8 %90 to i32
  %92 = shl nuw nsw i32 %91, 8
  %93 = or i32 %88, %92
  %94 = getelementptr inbounds i8, i8* %59, i64 7
  %95 = load i8, i8* %94, align 1
  %96 = zext i8 %95 to i32
  %97 = or i32 %93, %96
  %98 = lshr i32 %97, %30
  %99 = or i32 %98, %77
  br label %100

100:                                              ; preds = %80, %57
  %101 = phi i32 [ %99, %80 ], [ %77, %57 ]
  %102 = lshr i32 %101, 24
  %103 = trunc i32 %102 to i8
  store i8 %103, i8* %58, align 1
  %104 = lshr i32 %101, 16
  %105 = trunc i32 %104 to i8
  %106 = getelementptr inbounds i8, i8* %58, i64 1
  store i8 %105, i8* %106, align 1
  %107 = lshr i32 %101, 8
  %108 = trunc i32 %107 to i8
  %109 = getelementptr inbounds i8, i8* %58, i64 2
  store i8 %108, i8* %109, align 1
  %110 = trunc i32 %101 to i8
  %111 = getelementptr inbounds i8, i8* %58, i64 3
  store i8 %110, i8* %111, align 1
  %112 = getelementptr inbounds i8, i8* %58, i64 4
  %113 = icmp ult i8* %112, %48
  br i1 %113, label %57, label %51
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN12CJBig2_Image6ExpandEib(%class.CJBig2_Image* nocapture, i32, i1 zeroext) local_unnamed_addr #0 align 2 {
  %4 = getelementptr inbounds %class.CJBig2_Image, %class.CJBig2_Image* %0, i64 0, i32 0, i32 1, i32 0
  %5 = load i8*, i8** %4, align 8
  %6 = icmp eq i8* %5, null
  br i1 %6, label %55, label %7

7:                                                ; preds = %3
  %8 = getelementptr inbounds %class.CJBig2_Image, %class.CJBig2_Image* %0, i64 0, i32 2
  %9 = load i32, i32* %8, align 4
  %10 = icmp slt i32 %9, %1
  br i1 %10, label %11, label %55

11:                                               ; preds = %7
  %12 = getelementptr inbounds %class.CJBig2_Image, %class.CJBig2_Image* %0, i64 0, i32 3
  %13 = load i32, i32* %12, align 8
  %14 = sdiv i32 268435452, %13
  %15 = icmp slt i32 %14, %1
  br i1 %15, label %55, label %16

16:                                               ; preds = %11
  %17 = getelementptr inbounds %class.CJBig2_Image, %class.CJBig2_Image* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %18 = load i8*, i8** %17, align 8
  %19 = icmp eq i8* %18, null
  %20 = mul nsw i32 %13, %1
  %21 = sext i32 %20 to i64
  br i1 %19, label %30, label %22

22:                                               ; preds = %16
  %23 = bitcast %class.CJBig2_Image* %0 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %23, i8 0, i64 16, i1 false)
  %24 = tail call i8* @_ZN6pdfium8internal12ReallocOrDieEPvmm(i8* nonnull %18, i64 %21, i64 1) #8
  %25 = ptrtoint i8* %24 to i64
  store i8* %24, i8** %4, align 8
  %26 = load i8*, i8** %17, align 8
  %27 = bitcast %class.CJBig2_Image* %0 to i64*
  store i64 %25, i64* %27, align 8
  %28 = icmp eq i8* %26, null
  br i1 %28, label %44, label %29

29:                                               ; preds = %22
  tail call void @_Z7FX_FreePv(i8* nonnull %26) #8
  br label %44

30:                                               ; preds = %16
  %31 = tail call i8* @_ZN6pdfium8internal11CallocOrDieEmm(i64 %21, i64 1) #8
  %32 = ptrtoint i8* %31 to i64
  store i8* %31, i8** %4, align 8
  %33 = load i8*, i8** %17, align 8
  %34 = bitcast %class.CJBig2_Image* %0 to i64*
  store i64 %32, i64* %34, align 8
  %35 = icmp eq i8* %33, null
  br i1 %35, label %38, label %36

36:                                               ; preds = %30
  tail call void @_Z7FX_FreePv(i8* nonnull %33) #8
  %37 = load i8*, i8** %4, align 8
  br label %38

38:                                               ; preds = %30, %36
  %39 = phi i8* [ %31, %30 ], [ %37, %36 ]
  %40 = load i32, i32* %8, align 4
  %41 = load i32, i32* %12, align 8
  %42 = mul nsw i32 %41, %40
  %43 = sext i32 %42 to i64
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %39, i8* nonnull align 1 %5, i64 %43, i1 false)
  br label %44

44:                                               ; preds = %22, %29, %38
  %45 = load i8*, i8** %4, align 8
  %46 = load i32, i32* %8, align 4
  %47 = load i32, i32* %12, align 8
  %48 = mul nsw i32 %47, %46
  %49 = sext i32 %48 to i64
  %50 = getelementptr inbounds i8, i8* %45, i64 %49
  %51 = sext i1 %2 to i8
  %52 = sub nsw i32 %1, %46
  %53 = mul nsw i32 %52, %47
  %54 = sext i32 %53 to i64
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %50, i8 %51, i64 %54, i1 false)
  store i32 %1, i32* %8, align 4
  br label %55

55:                                               ; preds = %3, %7, %11, %44
  ret void
}

declare i8* @_ZN6pdfium8internal12ReallocOrDieEPvmm(i8*, i64, i64) local_unnamed_addr #2

declare i8* @_ZN6pdfium8internal11CallocOrDieEmm(i64, i64) local_unnamed_addr #2

; Function Attrs: nounwind readnone speculatable
declare { i32, i1 } @llvm.ssub.with.overflow.i32(i32, i32) #6

declare void @_Z7FX_FreePv(i8*) local_unnamed_addr #2

; Function Attrs: nobuiltin nofree
declare noalias nonnull i8* @_Znwm(i64) local_unnamed_addr #7

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { norecurse nounwind readnone ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { norecurse nounwind readonly ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nofree norecurse nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nounwind readnone speculatable }
attributes #7 = { nobuiltin nofree "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { nounwind }
attributes #9 = { builtin nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
