; ModuleID = '../../third_party/libgav1/src/src/dsp/inverse_transform.cc'
source_filename = "../../third_party/libgav1/src/src/dsp/inverse_transform.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%"struct.libgav1::dsp::Dsp" = type { void (i8*, i8*, i32, i32, i8*, i64)*, void (i8*, i64, i8*, i32*)*, [2 x [3 x void (i16*, i64, i32, i32, i32, i32, i32, i8*, i64)*]], [19 x void (i8*, i64, [32 x i16]*, i32)*], [19 x [3 x void ([32 x i16]*, i32, i32, i8*, i64)*]], [2 x [2 x [2 x [2 x void (i8*, i64, i32, i32, i32, i32, i32, i32, i8*, i64)*]]]], [2 x void (i8*, i64, i32, i32, i32, i32, i32, i32, i32, i32, i8*, i64)*], void (i8*, i64, i8*, i32, i32, i32, i1)*, void (i8*, i64, i8*, i8*, i32, i32, i32, i32, i1, i1)*, void (i8*, i64, i8*, i32, i32, i32, i1)*, void (i8*, i8*, i8, i8, i32, i32, i8*, i64)*, %"struct.libgav1::dsp::FilmGrainFuncs", void (i8*, i64, i8*, i8*, i8, i32, i32)*, [3 x void (i8*, i8*, i64, i8*, i64, i32, i32)*], void (i8*, i32, i32)*, void (i8*, i32)*, [19 x [10 x void (i8*, i64, i8*, i8*)*]], [4 x [5 x [2 x void (i8, i8, i32, i8*, i32, i32, i8*)*]]], [4 x [2 x void (i8*, i64, i32, i32, i32)*]], [2 x void (%"struct.libgav1::RestorationUnitInfo"*, i8*, i64, i8*, i64, i8*, i64, i32, i32, %"union.libgav1::RestorationBuffer"*, i8*)*], [3 x [2 x void (i8*, i8*, i64, i8*, i64, i32, i32, i8*, i64)*]], void (%"struct.libgav1::ReferenceInfo"*, i32, i32, i32, i32, i32, i32, %"struct.libgav1::TemporalMotionField"*)*, [3 x void (%"struct.libgav1::MotionVector"*, i8*, i32*, i32, %"union.libgav1::CompoundMotionVector"*)*], [3 x void (%"struct.libgav1::MotionVector"*, i8*, i32, i32, %"struct.libgav1::MotionVector"*)*], [2 x void (i8*, i64, i32, i32, i8*, i64)*], void (i32, i32, i32, i8*)*, void (i8*, i8*, i64, i32, i32, i32, i32, i32, i8*, i64)*, void (i8*, i64, i32, i32, i32*, i32, i32, i32, i32, i32, i32, i16, i16, i16, i16, i8*, i64)*, void (i8*, i64, i32, i32, i32*, i32, i32, i32, i32, i32, i32, i16, i16, i16, i16, i8*, i64)*, [6 x [6 x [2 x void (i8*, i8*, i8*, i64)*]]] }
%"struct.libgav1::dsp::FilmGrainFuncs" = type { [3 x void (%"struct.libgav1::FilmGrainParams"*, i8*)*], [2 x [4 x void (%"struct.libgav1::FilmGrainParams"*, i8*, i32, i32, i8*, i8*)*]], [2 x void (i8*, i32, i32, i32, i32, i32, i8*)*], void (i8*, i32, i32, i32, i32, i8*)*, void (i32, i8*, i8*, i8*)*, void (i8*, i32, i32, i32, i32, i32, i32, i8*, i8*, i64, i8*, i64)*, [2 x void (i8, %"struct.libgav1::FilmGrainParams"*, i8*, i32, i32, i32, i32, i32, i32, i32, i8*, i8*, i64, i8*, i64, i8*, i64)*] }
%"struct.libgav1::FilmGrainParams" = type { i8, i8, i8, i8, i8, i8, i8, i8, [14 x i8], [14 x i8], [10 x i8], [10 x i8], [10 x i8], [10 x i8], i8, i8, [24 x i8], [25 x i8], [25 x i8], i8, i16, i32, i32, i8, i8, i16, i8, i8, i16 }
%"struct.libgav1::RestorationUnitInfo" = type { i8, %"struct.libgav1::SgrProjInfo", [16 x i8], %"struct.libgav1::WienerInfo" }
%"struct.libgav1::SgrProjInfo" = type { i32, [2 x i32] }
%"struct.libgav1::WienerInfo" = type { [2 x i16], [28 x i8], [2 x [4 x i16]], [16 x i8] }
%"union.libgav1::RestorationBuffer" = type { %"struct.libgav1::SgrBuffer", [5024 x i8] }
%"struct.libgav1::SgrBuffer" = type { [1152 x i16], [1440 x i16], [1152 x i32], [1440 x i32], [1024 x i16], [768 x i16], [512 x i16], [1024 x i32], [768 x i32], [512 x i32], [288 x i8], [288 x i32] }
%"struct.libgav1::ReferenceInfo" = type { %"struct.std::__1::array", %"struct.std::__1::array.0", %"struct.std::__1::array.0", %"struct.std::__1::array.1", %"struct.std::__1::array.2", %"class.libgav1::Array2D", %"class.libgav1::Array2D.4" }
%"struct.std::__1::array" = type { [8 x i8] }
%"struct.std::__1::array.0" = type { [8 x i8] }
%"struct.std::__1::array.1" = type { [8 x i8] }
%"struct.std::__1::array.2" = type { [8 x i16] }
%"class.libgav1::Array2D" = type { %"class.std::__1::unique_ptr", i64, i64, %"class.libgav1::Array2DView" }
%"class.std::__1::unique_ptr" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { i8* }
%"class.libgav1::Array2DView" = type { i32, i32, i8* }
%"class.libgav1::Array2D.4" = type { %"class.std::__1::unique_ptr.5", i64, i64, %"class.libgav1::Array2DView.11" }
%"class.std::__1::unique_ptr.5" = type { %"class.std::__1::__compressed_pair.6" }
%"class.std::__1::__compressed_pair.6" = type { %"struct.std::__1::__compressed_pair_elem.7" }
%"struct.std::__1::__compressed_pair_elem.7" = type { %"struct.libgav1::MotionVector"* }
%"struct.libgav1::MotionVector" = type { %union.anon }
%union.anon = type { i32 }
%"class.libgav1::Array2DView.11" = type { i32, i32, %"struct.libgav1::MotionVector"* }
%"struct.libgav1::TemporalMotionField" = type { %"class.libgav1::Array2D.4", %"class.libgav1::Array2D.12" }
%"class.libgav1::Array2D.12" = type { %"class.std::__1::unique_ptr.13", i64, i64, %"class.libgav1::Array2DView.19" }
%"class.std::__1::unique_ptr.13" = type { %"class.std::__1::__compressed_pair.14" }
%"class.std::__1::__compressed_pair.14" = type { %"struct.std::__1::__compressed_pair_elem.15" }
%"struct.std::__1::__compressed_pair_elem.15" = type { i8* }
%"class.libgav1::Array2DView.19" = type { i32, i32, i8* }
%"union.libgav1::CompoundMotionVector" = type { i64 }

@_ZN7libgav13dsp12_GLOBAL__N_117kBitReverseLookupE = internal unnamed_addr constant [5 x [64 x i8]] [[64 x i8] c"\00\02\01\03\00\02\01\03\00\02\01\03\00\02\01\03\00\02\01\03\00\02\01\03\00\02\01\03\00\02\01\03\00\02\01\03\00\02\01\03\00\02\01\03\00\02\01\03\00\02\01\03\00\02\01\03\00\02\01\03\00\02\01\03", [64 x i8] c"\00\04\02\06\01\05\03\07\00\04\02\06\01\05\03\07\00\04\02\06\01\05\03\07\00\04\02\06\01\05\03\07\00\04\02\06\01\05\03\07\00\04\02\06\01\05\03\07\00\04\02\06\01\05\03\07\00\04\02\06\01\05\03\07", [64 x i8] c"\00\08\04\0C\02\0A\06\0E\01\09\05\0D\03\0B\07\0F\00\08\04\0C\02\0A\06\0E\01\09\05\0D\03\0B\07\0F\00\08\04\0C\02\0A\06\0E\01\09\05\0D\03\0B\07\0F\00\08\04\0C\02\0A\06\0E\01\09\05\0D\03\0B\07\0F", [64 x i8] c"\00\10\08\18\04\14\0C\1C\02\12\0A\1A\06\16\0E\1E\01\11\09\19\05\15\0D\1D\03\13\0B\1B\07\17\0F\1F\00\10\08\18\04\14\0C\1C\02\12\0A\1A\06\16\0E\1E\01\11\09\19\05\15\0D\1D\03\13\0B\1B\07\17\0F\1F", [64 x i8] c"\00 \100\08(\188\04$\144\0C,\1C<\02\22\122\0A*\1A:\06&\166\0E.\1E>\01!\111\09)\199\05%\155\0D-\1D=\03#\133\0B+\1B;\07'\177\0F/\1F?"], align 16
@_ZN7libgav115kTransformWidthE = external local_unnamed_addr constant [19 x i8], align 16
@_ZN7libgav116kTransformHeightE = external local_unnamed_addr constant [19 x i8], align 16
@_ZN7libgav119kTransformWidthLog2E = external local_unnamed_addr constant [19 x i8], align 16
@_ZN7libgav120kTransformHeightLog2E = external local_unnamed_addr constant [19 x i8], align 16
@_ZN7libgav13dsp12_GLOBAL__N_118kTransformRowShiftE = internal unnamed_addr constant [19 x i8] c"\00\00\01\00\01\01\02\01\01\02\01\02\02\01\02\01\02\01\02", align 16
@_ZN7libgav13dsp12_GLOBAL__N_17kCos128E = internal unnamed_addr constant [65 x i16] [i16 4096, i16 4095, i16 4091, i16 4085, i16 4076, i16 4065, i16 4052, i16 4036, i16 4017, i16 3996, i16 3973, i16 3948, i16 3920, i16 3889, i16 3857, i16 3822, i16 3784, i16 3745, i16 3703, i16 3659, i16 3612, i16 3564, i16 3513, i16 3461, i16 3406, i16 3349, i16 3290, i16 3229, i16 3166, i16 3102, i16 3035, i16 2967, i16 2896, i16 2824, i16 2751, i16 2675, i16 2598, i16 2520, i16 2440, i16 2359, i16 2276, i16 2191, i16 2106, i16 2019, i16 1931, i16 1842, i16 1751, i16 1660, i16 1567, i16 1474, i16 1380, i16 1285, i16 1189, i16 1092, i16 995, i16 897, i16 799, i16 700, i16 601, i16 501, i16 401, i16 301, i16 201, i16 101, i16 0], align 16
@_ZN7libgav13dsp12_GLOBAL__N_128kAdstOutputPermutationLookupE = internal unnamed_addr constant [16 x i8] c"\00\08\0C\04\06\0E\0A\02\03\0B\0F\07\05\0D\09\01", align 16

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN7libgav13dsp22InverseTransformInit_CEv() local_unnamed_addr #0 {
  %1 = tail call %"struct.libgav1::dsp::Dsp"* @_ZN7libgav112dsp_internal19GetWritableDspTableEi(i32 8) #4
  %2 = getelementptr %"struct.libgav1::dsp::Dsp", %"struct.libgav1::dsp::Dsp"* %1, i64 0, i32 17, i64 0, i64 0, i64 16
  %3 = bitcast void (i8, i8, i32, i8*, i32, i32, i8*)** %2 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %3, i8 0, i64 192, i1 false) #4
  %4 = getelementptr inbounds %"struct.libgav1::dsp::Dsp", %"struct.libgav1::dsp::Dsp"* %1, i64 0, i32 17, i64 0, i64 0, i64 0
  %5 = bitcast void (i8, i8, i32, i8*, i32, i32, i8*)** %4 to <2 x void (i8, i8, i32, i8*, i32, i32, i8*)*>*
  store <2 x void (i8, i8, i32, i8*, i32, i32, i8*)*> <void (i8, i8, i32, i8*, i32, i32, i8*)* @_ZN7libgav13dsp12_GLOBAL__N_115TransformLoop_CILi8EshLNS0_11Transform1DE0EXadL_ZNS1_11DctDcOnly_CILi8EsLi2EEEvPvabibEEXadL_ZNS1_5Dct_CIsLi2EEEvS5_aEELb1EEEvNS_13TransformTypeENS_13TransformSizeEiS5_iiS5_, void (i8, i8, i32, i8*, i32, i32, i8*)* @_ZN7libgav13dsp12_GLOBAL__N_115TransformLoop_CILi8EshLNS0_11Transform1DE0EXadL_ZNS1_11DctDcOnly_CILi8EsLi2EEEvPvabibEEXadL_ZNS1_5Dct_CIsLi2EEEvS5_aEELb0EEEvNS_13TransformTypeENS_13TransformSizeEiS5_iiS5_>, <2 x void (i8, i8, i32, i8*, i32, i32, i8*)*>* %5, align 8
  %6 = getelementptr inbounds %"struct.libgav1::dsp::Dsp", %"struct.libgav1::dsp::Dsp"* %1, i64 0, i32 17, i64 0, i64 1, i64 0
  %7 = bitcast void (i8, i8, i32, i8*, i32, i32, i8*)** %6 to <2 x void (i8, i8, i32, i8*, i32, i32, i8*)*>*
  store <2 x void (i8, i8, i32, i8*, i32, i32, i8*)*> <void (i8, i8, i32, i8*, i32, i32, i8*)* @_ZN7libgav13dsp12_GLOBAL__N_115TransformLoop_CILi8EshLNS0_11Transform1DE0EXadL_ZNS1_11DctDcOnly_CILi8EsLi3EEEvPvabibEEXadL_ZNS1_5Dct_CIsLi3EEEvS5_aEELb1EEEvNS_13TransformTypeENS_13TransformSizeEiS5_iiS5_, void (i8, i8, i32, i8*, i32, i32, i8*)* @_ZN7libgav13dsp12_GLOBAL__N_115TransformLoop_CILi8EshLNS0_11Transform1DE0EXadL_ZNS1_11DctDcOnly_CILi8EsLi3EEEvPvabibEEXadL_ZNS1_5Dct_CIsLi3EEEvS5_aEELb0EEEvNS_13TransformTypeENS_13TransformSizeEiS5_iiS5_>, <2 x void (i8, i8, i32, i8*, i32, i32, i8*)*>* %7, align 8
  %8 = getelementptr inbounds %"struct.libgav1::dsp::Dsp", %"struct.libgav1::dsp::Dsp"* %1, i64 0, i32 17, i64 0, i64 2, i64 0
  %9 = bitcast void (i8, i8, i32, i8*, i32, i32, i8*)** %8 to <2 x void (i8, i8, i32, i8*, i32, i32, i8*)*>*
  store <2 x void (i8, i8, i32, i8*, i32, i32, i8*)*> <void (i8, i8, i32, i8*, i32, i32, i8*)* @_ZN7libgav13dsp12_GLOBAL__N_115TransformLoop_CILi8EshLNS0_11Transform1DE0EXadL_ZNS1_11DctDcOnly_CILi8EsLi4EEEvPvabibEEXadL_ZNS1_5Dct_CIsLi4EEEvS5_aEELb1EEEvNS_13TransformTypeENS_13TransformSizeEiS5_iiS5_, void (i8, i8, i32, i8*, i32, i32, i8*)* @_ZN7libgav13dsp12_GLOBAL__N_115TransformLoop_CILi8EshLNS0_11Transform1DE0EXadL_ZNS1_11DctDcOnly_CILi8EsLi4EEEvPvabibEEXadL_ZNS1_5Dct_CIsLi4EEEvS5_aEELb0EEEvNS_13TransformTypeENS_13TransformSizeEiS5_iiS5_>, <2 x void (i8, i8, i32, i8*, i32, i32, i8*)*>* %9, align 8
  %10 = getelementptr inbounds %"struct.libgav1::dsp::Dsp", %"struct.libgav1::dsp::Dsp"* %1, i64 0, i32 17, i64 0, i64 3, i64 0
  %11 = bitcast void (i8, i8, i32, i8*, i32, i32, i8*)** %10 to <2 x void (i8, i8, i32, i8*, i32, i32, i8*)*>*
  store <2 x void (i8, i8, i32, i8*, i32, i32, i8*)*> <void (i8, i8, i32, i8*, i32, i32, i8*)* @_ZN7libgav13dsp12_GLOBAL__N_115TransformLoop_CILi8EshLNS0_11Transform1DE0EXadL_ZNS1_11DctDcOnly_CILi8EsLi5EEEvPvabibEEXadL_ZNS1_5Dct_CIsLi5EEEvS5_aEELb1EEEvNS_13TransformTypeENS_13TransformSizeEiS5_iiS5_, void (i8, i8, i32, i8*, i32, i32, i8*)* @_ZN7libgav13dsp12_GLOBAL__N_115TransformLoop_CILi8EshLNS0_11Transform1DE0EXadL_ZNS1_11DctDcOnly_CILi8EsLi5EEEvPvabibEEXadL_ZNS1_5Dct_CIsLi5EEEvS5_aEELb0EEEvNS_13TransformTypeENS_13TransformSizeEiS5_iiS5_>, <2 x void (i8, i8, i32, i8*, i32, i32, i8*)*>* %11, align 8
  %12 = getelementptr inbounds %"struct.libgav1::dsp::Dsp", %"struct.libgav1::dsp::Dsp"* %1, i64 0, i32 17, i64 0, i64 4, i64 0
  %13 = bitcast void (i8, i8, i32, i8*, i32, i32, i8*)** %12 to <2 x void (i8, i8, i32, i8*, i32, i32, i8*)*>*
  store <2 x void (i8, i8, i32, i8*, i32, i32, i8*)*> <void (i8, i8, i32, i8*, i32, i32, i8*)* @_ZN7libgav13dsp12_GLOBAL__N_115TransformLoop_CILi8EshLNS0_11Transform1DE0EXadL_ZNS1_11DctDcOnly_CILi8EsLi6EEEvPvabibEEXadL_ZNS1_5Dct_CIsLi6EEEvS5_aEELb1EEEvNS_13TransformTypeENS_13TransformSizeEiS5_iiS5_, void (i8, i8, i32, i8*, i32, i32, i8*)* @_ZN7libgav13dsp12_GLOBAL__N_115TransformLoop_CILi8EshLNS0_11Transform1DE0EXadL_ZNS1_11DctDcOnly_CILi8EsLi6EEEvPvabibEEXadL_ZNS1_5Dct_CIsLi6EEEvS5_aEELb0EEEvNS_13TransformTypeENS_13TransformSizeEiS5_iiS5_>, <2 x void (i8, i8, i32, i8*, i32, i32, i8*)*>* %13, align 8
  %14 = getelementptr inbounds %"struct.libgav1::dsp::Dsp", %"struct.libgav1::dsp::Dsp"* %1, i64 0, i32 17, i64 1, i64 0, i64 0
  %15 = bitcast void (i8, i8, i32, i8*, i32, i32, i8*)** %14 to <2 x void (i8, i8, i32, i8*, i32, i32, i8*)*>*
  store <2 x void (i8, i8, i32, i8*, i32, i32, i8*)*> <void (i8, i8, i32, i8*, i32, i32, i8*)* @_ZN7libgav13dsp12_GLOBAL__N_115TransformLoop_CILi8EshLNS0_11Transform1DE1EXadL_ZNS1_13Adst4DcOnly_CILi8EsEEvPvabibEEXadL_ZNS1_7Adst4_CIsEEvS5_aEELb1EEEvNS_13TransformTypeENS_13TransformSizeEiS5_iiS5_, void (i8, i8, i32, i8*, i32, i32, i8*)* @_ZN7libgav13dsp12_GLOBAL__N_115TransformLoop_CILi8EshLNS0_11Transform1DE1EXadL_ZNS1_13Adst4DcOnly_CILi8EsEEvPvabibEEXadL_ZNS1_7Adst4_CIsEEvS5_aEELb0EEEvNS_13TransformTypeENS_13TransformSizeEiS5_iiS5_>, <2 x void (i8, i8, i32, i8*, i32, i32, i8*)*>* %15, align 8
  %16 = getelementptr inbounds %"struct.libgav1::dsp::Dsp", %"struct.libgav1::dsp::Dsp"* %1, i64 0, i32 17, i64 1, i64 1, i64 0
  %17 = bitcast void (i8, i8, i32, i8*, i32, i32, i8*)** %16 to <2 x void (i8, i8, i32, i8*, i32, i32, i8*)*>*
  store <2 x void (i8, i8, i32, i8*, i32, i32, i8*)*> <void (i8, i8, i32, i8*, i32, i32, i8*)* @_ZN7libgav13dsp12_GLOBAL__N_115TransformLoop_CILi8EshLNS0_11Transform1DE1EXadL_ZNS1_13Adst8DcOnly_CILi8EsEEvPvabibEEXadL_ZNS1_7Adst8_CIsEEvS5_aEELb1EEEvNS_13TransformTypeENS_13TransformSizeEiS5_iiS5_, void (i8, i8, i32, i8*, i32, i32, i8*)* @_ZN7libgav13dsp12_GLOBAL__N_115TransformLoop_CILi8EshLNS0_11Transform1DE1EXadL_ZNS1_13Adst8DcOnly_CILi8EsEEvPvabibEEXadL_ZNS1_7Adst8_CIsEEvS5_aEELb0EEEvNS_13TransformTypeENS_13TransformSizeEiS5_iiS5_>, <2 x void (i8, i8, i32, i8*, i32, i32, i8*)*>* %17, align 8
  %18 = getelementptr inbounds %"struct.libgav1::dsp::Dsp", %"struct.libgav1::dsp::Dsp"* %1, i64 0, i32 17, i64 1, i64 2, i64 0
  %19 = bitcast void (i8, i8, i32, i8*, i32, i32, i8*)** %18 to <2 x void (i8, i8, i32, i8*, i32, i32, i8*)*>*
  store <2 x void (i8, i8, i32, i8*, i32, i32, i8*)*> <void (i8, i8, i32, i8*, i32, i32, i8*)* @_ZN7libgav13dsp12_GLOBAL__N_115TransformLoop_CILi8EshLNS0_11Transform1DE1EXadL_ZNS1_14Adst16DcOnly_CILi8EsEEvPvabibEEXadL_ZNS1_8Adst16_CIsEEvS5_aEELb1EEEvNS_13TransformTypeENS_13TransformSizeEiS5_iiS5_, void (i8, i8, i32, i8*, i32, i32, i8*)* @_ZN7libgav13dsp12_GLOBAL__N_115TransformLoop_CILi8EshLNS0_11Transform1DE1EXadL_ZNS1_14Adst16DcOnly_CILi8EsEEvPvabibEEXadL_ZNS1_8Adst16_CIsEEvS5_aEELb0EEEvNS_13TransformTypeENS_13TransformSizeEiS5_iiS5_>, <2 x void (i8, i8, i32, i8*, i32, i32, i8*)*>* %19, align 8
  %20 = getelementptr inbounds %"struct.libgav1::dsp::Dsp", %"struct.libgav1::dsp::Dsp"* %1, i64 0, i32 17, i64 2, i64 0, i64 0
  %21 = bitcast void (i8, i8, i32, i8*, i32, i32, i8*)** %20 to <2 x void (i8, i8, i32, i8*, i32, i32, i8*)*>*
  store <2 x void (i8, i8, i32, i8*, i32, i32, i8*)*> <void (i8, i8, i32, i8*, i32, i32, i8*)* @_ZN7libgav13dsp12_GLOBAL__N_115TransformLoop_CILi8EshLNS0_11Transform1DE2EXadL_ZNS1_17Identity4DcOnly_CILi8EsEEvPvabibEEXadL_ZNS1_14Identity4Row_CIsEEvS5_aEELb1EEEvNS_13TransformTypeENS_13TransformSizeEiS5_iiS5_, void (i8, i8, i32, i8*, i32, i32, i8*)* @_ZN7libgav13dsp12_GLOBAL__N_115TransformLoop_CILi8EshLNS0_11Transform1DE2EXadL_ZNS1_17Identity4DcOnly_CILi8EsEEvPvabibEEXadL_ZNS1_17Identity4Column_CIsEEvS5_aEELb0EEEvNS_13TransformTypeENS_13TransformSizeEiS5_iiS5_>, <2 x void (i8, i8, i32, i8*, i32, i32, i8*)*>* %21, align 8
  %22 = getelementptr inbounds %"struct.libgav1::dsp::Dsp", %"struct.libgav1::dsp::Dsp"* %1, i64 0, i32 17, i64 2, i64 1, i64 0
  %23 = bitcast void (i8, i8, i32, i8*, i32, i32, i8*)** %22 to <2 x void (i8, i8, i32, i8*, i32, i32, i8*)*>*
  store <2 x void (i8, i8, i32, i8*, i32, i32, i8*)*> <void (i8, i8, i32, i8*, i32, i32, i8*)* @_ZN7libgav13dsp12_GLOBAL__N_115TransformLoop_CILi8EshLNS0_11Transform1DE2EXadL_ZNS1_17Identity8DcOnly_CILi8EsEEvPvabibEEXadL_ZNS1_14Identity8Row_CIsEEvS5_aEELb1EEEvNS_13TransformTypeENS_13TransformSizeEiS5_iiS5_, void (i8, i8, i32, i8*, i32, i32, i8*)* @_ZN7libgav13dsp12_GLOBAL__N_115TransformLoop_CILi8EshLNS0_11Transform1DE2EXadL_ZNS1_17Identity8DcOnly_CILi8EsEEvPvabibEEXadL_ZNS1_17Identity8Column_CIsEEvS5_aEELb0EEEvNS_13TransformTypeENS_13TransformSizeEiS5_iiS5_>, <2 x void (i8, i8, i32, i8*, i32, i32, i8*)*>* %23, align 8
  %24 = getelementptr inbounds %"struct.libgav1::dsp::Dsp", %"struct.libgav1::dsp::Dsp"* %1, i64 0, i32 17, i64 2, i64 2, i64 0
  %25 = bitcast void (i8, i8, i32, i8*, i32, i32, i8*)** %24 to <2 x void (i8, i8, i32, i8*, i32, i32, i8*)*>*
  store <2 x void (i8, i8, i32, i8*, i32, i32, i8*)*> <void (i8, i8, i32, i8*, i32, i32, i8*)* @_ZN7libgav13dsp12_GLOBAL__N_115TransformLoop_CILi8EshLNS0_11Transform1DE2EXadL_ZNS1_18Identity16DcOnly_CILi8EsEEvPvabibEEXadL_ZNS1_15Identity16Row_CIsEEvS5_aEELb1EEEvNS_13TransformTypeENS_13TransformSizeEiS5_iiS5_, void (i8, i8, i32, i8*, i32, i32, i8*)* @_ZN7libgav13dsp12_GLOBAL__N_115TransformLoop_CILi8EshLNS0_11Transform1DE2EXadL_ZNS1_18Identity16DcOnly_CILi8EsEEvPvabibEEXadL_ZNS1_18Identity16Column_CIsEEvS5_aEELb0EEEvNS_13TransformTypeENS_13TransformSizeEiS5_iiS5_>, <2 x void (i8, i8, i32, i8*, i32, i32, i8*)*>* %25, align 8
  %26 = getelementptr inbounds %"struct.libgav1::dsp::Dsp", %"struct.libgav1::dsp::Dsp"* %1, i64 0, i32 17, i64 2, i64 3, i64 0
  %27 = bitcast void (i8, i8, i32, i8*, i32, i32, i8*)** %26 to <2 x void (i8, i8, i32, i8*, i32, i32, i8*)*>*
  store <2 x void (i8, i8, i32, i8*, i32, i32, i8*)*> <void (i8, i8, i32, i8*, i32, i32, i8*)* @_ZN7libgav13dsp12_GLOBAL__N_115TransformLoop_CILi8EshLNS0_11Transform1DE2EXadL_ZNS1_18Identity32DcOnly_CILi8EsEEvPvabibEEXadL_ZNS1_15Identity32Row_CIsEEvS5_aEELb1EEEvNS_13TransformTypeENS_13TransformSizeEiS5_iiS5_, void (i8, i8, i32, i8*, i32, i32, i8*)* @_ZN7libgav13dsp12_GLOBAL__N_115TransformLoop_CILi8EshLNS0_11Transform1DE2EXadL_ZNS1_18Identity32DcOnly_CILi8EsEEvPvabibEEXadL_ZNS1_18Identity32Column_CIsEEvS5_aEELb0EEEvNS_13TransformTypeENS_13TransformSizeEiS5_iiS5_>, <2 x void (i8, i8, i32, i8*, i32, i32, i8*)*>* %27, align 8
  %28 = getelementptr inbounds %"struct.libgav1::dsp::Dsp", %"struct.libgav1::dsp::Dsp"* %1, i64 0, i32 17, i64 3, i64 0, i64 0
  %29 = bitcast void (i8, i8, i32, i8*, i32, i32, i8*)** %28 to <2 x void (i8, i8, i32, i8*, i32, i32, i8*)*>*
  store <2 x void (i8, i8, i32, i8*, i32, i32, i8*)*> <void (i8, i8, i32, i8*, i32, i32, i8*)* @_ZN7libgav13dsp12_GLOBAL__N_115TransformLoop_CILi8EshLNS0_11Transform1DE3EXadL_ZNS1_12Wht4DcOnly_CILi8EsEEvPvabibEEXadL_ZNS1_6Wht4_CIsEEvS5_aEELb1EEEvNS_13TransformTypeENS_13TransformSizeEiS5_iiS5_, void (i8, i8, i32, i8*, i32, i32, i8*)* @_ZN7libgav13dsp12_GLOBAL__N_115TransformLoop_CILi8EshLNS0_11Transform1DE3EXadL_ZNS1_12Wht4DcOnly_CILi8EsEEvPvabibEEXadL_ZNS1_6Wht4_CIsEEvS5_aEELb0EEEvNS_13TransformTypeENS_13TransformSizeEiS5_iiS5_>, <2 x void (i8, i8, i32, i8*, i32, i32, i8*)*>* %29, align 8
  %30 = tail call %"struct.libgav1::dsp::Dsp"* @_ZN7libgav112dsp_internal19GetWritableDspTableEi(i32 10) #4
  %31 = getelementptr %"struct.libgav1::dsp::Dsp", %"struct.libgav1::dsp::Dsp"* %30, i64 0, i32 17, i64 0, i64 0, i64 16
  %32 = bitcast void (i8, i8, i32, i8*, i32, i32, i8*)** %31 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %32, i8 0, i64 192, i1 false) #4
  %33 = getelementptr inbounds %"struct.libgav1::dsp::Dsp", %"struct.libgav1::dsp::Dsp"* %30, i64 0, i32 17, i64 0, i64 0, i64 0
  %34 = bitcast void (i8, i8, i32, i8*, i32, i32, i8*)** %33 to <2 x void (i8, i8, i32, i8*, i32, i32, i8*)*>*
  store <2 x void (i8, i8, i32, i8*, i32, i32, i8*)*> <void (i8, i8, i32, i8*, i32, i32, i8*)* @_ZN7libgav13dsp12_GLOBAL__N_115TransformLoop_CILi10EitLNS0_11Transform1DE0EXadL_ZNS1_11DctDcOnly_CILi10EiLi2EEEvPvabibEEXadL_ZNS1_5Dct_CIiLi2EEEvS5_aEELb1EEEvNS_13TransformTypeENS_13TransformSizeEiS5_iiS5_, void (i8, i8, i32, i8*, i32, i32, i8*)* @_ZN7libgav13dsp12_GLOBAL__N_115TransformLoop_CILi10EitLNS0_11Transform1DE0EXadL_ZNS1_11DctDcOnly_CILi10EiLi2EEEvPvabibEEXadL_ZNS1_5Dct_CIiLi2EEEvS5_aEELb0EEEvNS_13TransformTypeENS_13TransformSizeEiS5_iiS5_>, <2 x void (i8, i8, i32, i8*, i32, i32, i8*)*>* %34, align 8
  %35 = getelementptr inbounds %"struct.libgav1::dsp::Dsp", %"struct.libgav1::dsp::Dsp"* %30, i64 0, i32 17, i64 0, i64 1, i64 0
  %36 = bitcast void (i8, i8, i32, i8*, i32, i32, i8*)** %35 to <2 x void (i8, i8, i32, i8*, i32, i32, i8*)*>*
  store <2 x void (i8, i8, i32, i8*, i32, i32, i8*)*> <void (i8, i8, i32, i8*, i32, i32, i8*)* @_ZN7libgav13dsp12_GLOBAL__N_115TransformLoop_CILi10EitLNS0_11Transform1DE0EXadL_ZNS1_11DctDcOnly_CILi10EiLi3EEEvPvabibEEXadL_ZNS1_5Dct_CIiLi3EEEvS5_aEELb1EEEvNS_13TransformTypeENS_13TransformSizeEiS5_iiS5_, void (i8, i8, i32, i8*, i32, i32, i8*)* @_ZN7libgav13dsp12_GLOBAL__N_115TransformLoop_CILi10EitLNS0_11Transform1DE0EXadL_ZNS1_11DctDcOnly_CILi10EiLi3EEEvPvabibEEXadL_ZNS1_5Dct_CIiLi3EEEvS5_aEELb0EEEvNS_13TransformTypeENS_13TransformSizeEiS5_iiS5_>, <2 x void (i8, i8, i32, i8*, i32, i32, i8*)*>* %36, align 8
  %37 = getelementptr inbounds %"struct.libgav1::dsp::Dsp", %"struct.libgav1::dsp::Dsp"* %30, i64 0, i32 17, i64 0, i64 2, i64 0
  %38 = bitcast void (i8, i8, i32, i8*, i32, i32, i8*)** %37 to <2 x void (i8, i8, i32, i8*, i32, i32, i8*)*>*
  store <2 x void (i8, i8, i32, i8*, i32, i32, i8*)*> <void (i8, i8, i32, i8*, i32, i32, i8*)* @_ZN7libgav13dsp12_GLOBAL__N_115TransformLoop_CILi10EitLNS0_11Transform1DE0EXadL_ZNS1_11DctDcOnly_CILi10EiLi4EEEvPvabibEEXadL_ZNS1_5Dct_CIiLi4EEEvS5_aEELb1EEEvNS_13TransformTypeENS_13TransformSizeEiS5_iiS5_, void (i8, i8, i32, i8*, i32, i32, i8*)* @_ZN7libgav13dsp12_GLOBAL__N_115TransformLoop_CILi10EitLNS0_11Transform1DE0EXadL_ZNS1_11DctDcOnly_CILi10EiLi4EEEvPvabibEEXadL_ZNS1_5Dct_CIiLi4EEEvS5_aEELb0EEEvNS_13TransformTypeENS_13TransformSizeEiS5_iiS5_>, <2 x void (i8, i8, i32, i8*, i32, i32, i8*)*>* %38, align 8
  %39 = getelementptr inbounds %"struct.libgav1::dsp::Dsp", %"struct.libgav1::dsp::Dsp"* %30, i64 0, i32 17, i64 0, i64 3, i64 0
  %40 = bitcast void (i8, i8, i32, i8*, i32, i32, i8*)** %39 to <2 x void (i8, i8, i32, i8*, i32, i32, i8*)*>*
  store <2 x void (i8, i8, i32, i8*, i32, i32, i8*)*> <void (i8, i8, i32, i8*, i32, i32, i8*)* @_ZN7libgav13dsp12_GLOBAL__N_115TransformLoop_CILi10EitLNS0_11Transform1DE0EXadL_ZNS1_11DctDcOnly_CILi10EiLi5EEEvPvabibEEXadL_ZNS1_5Dct_CIiLi5EEEvS5_aEELb1EEEvNS_13TransformTypeENS_13TransformSizeEiS5_iiS5_, void (i8, i8, i32, i8*, i32, i32, i8*)* @_ZN7libgav13dsp12_GLOBAL__N_115TransformLoop_CILi10EitLNS0_11Transform1DE0EXadL_ZNS1_11DctDcOnly_CILi10EiLi5EEEvPvabibEEXadL_ZNS1_5Dct_CIiLi5EEEvS5_aEELb0EEEvNS_13TransformTypeENS_13TransformSizeEiS5_iiS5_>, <2 x void (i8, i8, i32, i8*, i32, i32, i8*)*>* %40, align 8
  %41 = getelementptr inbounds %"struct.libgav1::dsp::Dsp", %"struct.libgav1::dsp::Dsp"* %30, i64 0, i32 17, i64 0, i64 4, i64 0
  %42 = bitcast void (i8, i8, i32, i8*, i32, i32, i8*)** %41 to <2 x void (i8, i8, i32, i8*, i32, i32, i8*)*>*
  store <2 x void (i8, i8, i32, i8*, i32, i32, i8*)*> <void (i8, i8, i32, i8*, i32, i32, i8*)* @_ZN7libgav13dsp12_GLOBAL__N_115TransformLoop_CILi10EitLNS0_11Transform1DE0EXadL_ZNS1_11DctDcOnly_CILi10EiLi6EEEvPvabibEEXadL_ZNS1_5Dct_CIiLi6EEEvS5_aEELb1EEEvNS_13TransformTypeENS_13TransformSizeEiS5_iiS5_, void (i8, i8, i32, i8*, i32, i32, i8*)* @_ZN7libgav13dsp12_GLOBAL__N_115TransformLoop_CILi10EitLNS0_11Transform1DE0EXadL_ZNS1_11DctDcOnly_CILi10EiLi6EEEvPvabibEEXadL_ZNS1_5Dct_CIiLi6EEEvS5_aEELb0EEEvNS_13TransformTypeENS_13TransformSizeEiS5_iiS5_>, <2 x void (i8, i8, i32, i8*, i32, i32, i8*)*>* %42, align 8
  %43 = getelementptr inbounds %"struct.libgav1::dsp::Dsp", %"struct.libgav1::dsp::Dsp"* %30, i64 0, i32 17, i64 1, i64 0, i64 0
  %44 = bitcast void (i8, i8, i32, i8*, i32, i32, i8*)** %43 to <2 x void (i8, i8, i32, i8*, i32, i32, i8*)*>*
  store <2 x void (i8, i8, i32, i8*, i32, i32, i8*)*> <void (i8, i8, i32, i8*, i32, i32, i8*)* @_ZN7libgav13dsp12_GLOBAL__N_115TransformLoop_CILi10EitLNS0_11Transform1DE1EXadL_ZNS1_13Adst4DcOnly_CILi10EiEEvPvabibEEXadL_ZNS1_7Adst4_CIiEEvS5_aEELb1EEEvNS_13TransformTypeENS_13TransformSizeEiS5_iiS5_, void (i8, i8, i32, i8*, i32, i32, i8*)* @_ZN7libgav13dsp12_GLOBAL__N_115TransformLoop_CILi10EitLNS0_11Transform1DE1EXadL_ZNS1_13Adst4DcOnly_CILi10EiEEvPvabibEEXadL_ZNS1_7Adst4_CIiEEvS5_aEELb0EEEvNS_13TransformTypeENS_13TransformSizeEiS5_iiS5_>, <2 x void (i8, i8, i32, i8*, i32, i32, i8*)*>* %44, align 8
  %45 = getelementptr inbounds %"struct.libgav1::dsp::Dsp", %"struct.libgav1::dsp::Dsp"* %30, i64 0, i32 17, i64 1, i64 1, i64 0
  %46 = bitcast void (i8, i8, i32, i8*, i32, i32, i8*)** %45 to <2 x void (i8, i8, i32, i8*, i32, i32, i8*)*>*
  store <2 x void (i8, i8, i32, i8*, i32, i32, i8*)*> <void (i8, i8, i32, i8*, i32, i32, i8*)* @_ZN7libgav13dsp12_GLOBAL__N_115TransformLoop_CILi10EitLNS0_11Transform1DE1EXadL_ZNS1_13Adst8DcOnly_CILi10EiEEvPvabibEEXadL_ZNS1_7Adst8_CIiEEvS5_aEELb1EEEvNS_13TransformTypeENS_13TransformSizeEiS5_iiS5_, void (i8, i8, i32, i8*, i32, i32, i8*)* @_ZN7libgav13dsp12_GLOBAL__N_115TransformLoop_CILi10EitLNS0_11Transform1DE1EXadL_ZNS1_13Adst8DcOnly_CILi10EiEEvPvabibEEXadL_ZNS1_7Adst8_CIiEEvS5_aEELb0EEEvNS_13TransformTypeENS_13TransformSizeEiS5_iiS5_>, <2 x void (i8, i8, i32, i8*, i32, i32, i8*)*>* %46, align 8
  %47 = getelementptr inbounds %"struct.libgav1::dsp::Dsp", %"struct.libgav1::dsp::Dsp"* %30, i64 0, i32 17, i64 1, i64 2, i64 0
  %48 = bitcast void (i8, i8, i32, i8*, i32, i32, i8*)** %47 to <2 x void (i8, i8, i32, i8*, i32, i32, i8*)*>*
  store <2 x void (i8, i8, i32, i8*, i32, i32, i8*)*> <void (i8, i8, i32, i8*, i32, i32, i8*)* @_ZN7libgav13dsp12_GLOBAL__N_115TransformLoop_CILi10EitLNS0_11Transform1DE1EXadL_ZNS1_14Adst16DcOnly_CILi10EiEEvPvabibEEXadL_ZNS1_8Adst16_CIiEEvS5_aEELb1EEEvNS_13TransformTypeENS_13TransformSizeEiS5_iiS5_, void (i8, i8, i32, i8*, i32, i32, i8*)* @_ZN7libgav13dsp12_GLOBAL__N_115TransformLoop_CILi10EitLNS0_11Transform1DE1EXadL_ZNS1_14Adst16DcOnly_CILi10EiEEvPvabibEEXadL_ZNS1_8Adst16_CIiEEvS5_aEELb0EEEvNS_13TransformTypeENS_13TransformSizeEiS5_iiS5_>, <2 x void (i8, i8, i32, i8*, i32, i32, i8*)*>* %48, align 8
  %49 = getelementptr inbounds %"struct.libgav1::dsp::Dsp", %"struct.libgav1::dsp::Dsp"* %30, i64 0, i32 17, i64 2, i64 0, i64 0
  %50 = bitcast void (i8, i8, i32, i8*, i32, i32, i8*)** %49 to <2 x void (i8, i8, i32, i8*, i32, i32, i8*)*>*
  store <2 x void (i8, i8, i32, i8*, i32, i32, i8*)*> <void (i8, i8, i32, i8*, i32, i32, i8*)* @_ZN7libgav13dsp12_GLOBAL__N_115TransformLoop_CILi10EitLNS0_11Transform1DE2EXadL_ZNS1_17Identity4DcOnly_CILi10EiEEvPvabibEEXadL_ZNS1_14Identity4Row_CIiEEvS5_aEELb1EEEvNS_13TransformTypeENS_13TransformSizeEiS5_iiS5_, void (i8, i8, i32, i8*, i32, i32, i8*)* @_ZN7libgav13dsp12_GLOBAL__N_115TransformLoop_CILi10EitLNS0_11Transform1DE2EXadL_ZNS1_17Identity4DcOnly_CILi10EiEEvPvabibEEXadL_ZNS1_17Identity4Column_CIiEEvS5_aEELb0EEEvNS_13TransformTypeENS_13TransformSizeEiS5_iiS5_>, <2 x void (i8, i8, i32, i8*, i32, i32, i8*)*>* %50, align 8
  %51 = getelementptr inbounds %"struct.libgav1::dsp::Dsp", %"struct.libgav1::dsp::Dsp"* %30, i64 0, i32 17, i64 2, i64 1, i64 0
  %52 = bitcast void (i8, i8, i32, i8*, i32, i32, i8*)** %51 to <2 x void (i8, i8, i32, i8*, i32, i32, i8*)*>*
  store <2 x void (i8, i8, i32, i8*, i32, i32, i8*)*> <void (i8, i8, i32, i8*, i32, i32, i8*)* @_ZN7libgav13dsp12_GLOBAL__N_115TransformLoop_CILi10EitLNS0_11Transform1DE2EXadL_ZNS1_17Identity8DcOnly_CILi10EiEEvPvabibEEXadL_ZNS1_14Identity8Row_CIiEEvS5_aEELb1EEEvNS_13TransformTypeENS_13TransformSizeEiS5_iiS5_, void (i8, i8, i32, i8*, i32, i32, i8*)* @_ZN7libgav13dsp12_GLOBAL__N_115TransformLoop_CILi10EitLNS0_11Transform1DE2EXadL_ZNS1_17Identity8DcOnly_CILi10EiEEvPvabibEEXadL_ZNS1_17Identity8Column_CIiEEvS5_aEELb0EEEvNS_13TransformTypeENS_13TransformSizeEiS5_iiS5_>, <2 x void (i8, i8, i32, i8*, i32, i32, i8*)*>* %52, align 8
  %53 = getelementptr inbounds %"struct.libgav1::dsp::Dsp", %"struct.libgav1::dsp::Dsp"* %30, i64 0, i32 17, i64 2, i64 2, i64 0
  %54 = bitcast void (i8, i8, i32, i8*, i32, i32, i8*)** %53 to <2 x void (i8, i8, i32, i8*, i32, i32, i8*)*>*
  store <2 x void (i8, i8, i32, i8*, i32, i32, i8*)*> <void (i8, i8, i32, i8*, i32, i32, i8*)* @_ZN7libgav13dsp12_GLOBAL__N_115TransformLoop_CILi10EitLNS0_11Transform1DE2EXadL_ZNS1_18Identity16DcOnly_CILi10EiEEvPvabibEEXadL_ZNS1_15Identity16Row_CIiEEvS5_aEELb1EEEvNS_13TransformTypeENS_13TransformSizeEiS5_iiS5_, void (i8, i8, i32, i8*, i32, i32, i8*)* @_ZN7libgav13dsp12_GLOBAL__N_115TransformLoop_CILi10EitLNS0_11Transform1DE2EXadL_ZNS1_18Identity16DcOnly_CILi10EiEEvPvabibEEXadL_ZNS1_18Identity16Column_CIiEEvS5_aEELb0EEEvNS_13TransformTypeENS_13TransformSizeEiS5_iiS5_>, <2 x void (i8, i8, i32, i8*, i32, i32, i8*)*>* %54, align 8
  %55 = getelementptr inbounds %"struct.libgav1::dsp::Dsp", %"struct.libgav1::dsp::Dsp"* %30, i64 0, i32 17, i64 2, i64 3, i64 0
  %56 = bitcast void (i8, i8, i32, i8*, i32, i32, i8*)** %55 to <2 x void (i8, i8, i32, i8*, i32, i32, i8*)*>*
  store <2 x void (i8, i8, i32, i8*, i32, i32, i8*)*> <void (i8, i8, i32, i8*, i32, i32, i8*)* @_ZN7libgav13dsp12_GLOBAL__N_115TransformLoop_CILi10EitLNS0_11Transform1DE2EXadL_ZNS1_18Identity32DcOnly_CILi10EiEEvPvabibEEXadL_ZNS1_15Identity32Row_CIiEEvS5_aEELb1EEEvNS_13TransformTypeENS_13TransformSizeEiS5_iiS5_, void (i8, i8, i32, i8*, i32, i32, i8*)* @_ZN7libgav13dsp12_GLOBAL__N_115TransformLoop_CILi10EitLNS0_11Transform1DE2EXadL_ZNS1_18Identity32DcOnly_CILi10EiEEvPvabibEEXadL_ZNS1_18Identity32Column_CIiEEvS5_aEELb0EEEvNS_13TransformTypeENS_13TransformSizeEiS5_iiS5_>, <2 x void (i8, i8, i32, i8*, i32, i32, i8*)*>* %56, align 8
  %57 = getelementptr inbounds %"struct.libgav1::dsp::Dsp", %"struct.libgav1::dsp::Dsp"* %30, i64 0, i32 17, i64 3, i64 0, i64 0
  %58 = bitcast void (i8, i8, i32, i8*, i32, i32, i8*)** %57 to <2 x void (i8, i8, i32, i8*, i32, i32, i8*)*>*
  store <2 x void (i8, i8, i32, i8*, i32, i32, i8*)*> <void (i8, i8, i32, i8*, i32, i32, i8*)* @_ZN7libgav13dsp12_GLOBAL__N_115TransformLoop_CILi10EitLNS0_11Transform1DE3EXadL_ZNS1_12Wht4DcOnly_CILi10EiEEvPvabibEEXadL_ZNS1_6Wht4_CIiEEvS5_aEELb1EEEvNS_13TransformTypeENS_13TransformSizeEiS5_iiS5_, void (i8, i8, i32, i8*, i32, i32, i8*)* @_ZN7libgav13dsp12_GLOBAL__N_115TransformLoop_CILi10EitLNS0_11Transform1DE3EXadL_ZNS1_12Wht4DcOnly_CILi10EiEEvPvabibEEXadL_ZNS1_6Wht4_CIiEEvS5_aEELb0EEEvNS_13TransformTypeENS_13TransformSizeEiS5_iiS5_>, <2 x void (i8, i8, i32, i8*, i32, i32, i8*)*>* %58, align 8
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

declare %"struct.libgav1::dsp::Dsp"* @_ZN7libgav112dsp_internal19GetWritableDspTableEi(i32) local_unnamed_addr #2

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN7libgav13dsp12_GLOBAL__N_115TransformLoop_CILi8EshLNS0_11Transform1DE0EXadL_ZNS1_11DctDcOnly_CILi8EsLi2EEEvPvabibEEXadL_ZNS1_5Dct_CIsLi2EEEvS5_aEELb1EEEvNS_13TransformTypeENS_13TransformSizeEiS5_iiS5_(i8 zeroext, i8 zeroext, i32, i8*, i32, i32, i8* nocapture readnone) #0 {
  %8 = zext i8 %1 to i64
  %9 = getelementptr inbounds [19 x i8], [19 x i8]* @_ZN7libgav115kTransformWidthE, i64 0, i64 %8
  %10 = load i8, i8* %9, align 1
  %11 = zext i8 %10 to i32
  %12 = getelementptr inbounds [19 x i8], [19 x i8]* @_ZN7libgav119kTransformWidthLog2E, i64 0, i64 %8
  %13 = load i8, i8* %12, align 1
  %14 = zext i8 %13 to i32
  %15 = getelementptr inbounds [19 x i8], [19 x i8]* @_ZN7libgav120kTransformHeightLog2E, i64 0, i64 %8
  %16 = load i8, i8* %15, align 1
  %17 = zext i8 %16 to i32
  %18 = bitcast i8* %3 to i16*
  %19 = getelementptr inbounds [19 x i8], [19 x i8]* @_ZN7libgav13dsp12_GLOBAL__N_118kTransformRowShiftE, i64 0, i64 %8
  %20 = load i8, i8* %19, align 1
  %21 = zext i8 %20 to i32
  %22 = sub nsw i32 %14, %17
  %23 = icmp slt i32 %22, 0
  %24 = sub nsw i32 0, %22
  %25 = select i1 %23, i32 %24, i32 %22
  %26 = icmp eq i32 %25, 1
  %27 = icmp eq i32 %2, 1
  br i1 %27, label %74, label %28

28:                                               ; preds = %7
  %29 = icmp sgt i32 %2, 0
  br i1 %29, label %30, label %277

30:                                               ; preds = %28
  %31 = icmp ult i32 %11, 32
  %32 = select i1 %31, i32 %11, i32 32
  %33 = icmp slt i32 %32, 1
  %34 = zext i8 %10 to i64
  %35 = lshr i64 524276, %8
  %36 = and i64 %35, 1
  %37 = icmp eq i64 %36, 0
  %38 = icmp eq i8 %10, 0
  %39 = shl i32 1, %21
  %40 = ashr i32 %39, 1
  %41 = zext i32 %32 to i64
  %42 = zext i32 %2 to i64
  %43 = xor i1 %26, true
  %44 = or i1 %33, %43
  %45 = or i1 %37, %38
  %46 = zext i8 %10 to i64
  %47 = add nsw i64 %46, -1
  %48 = icmp ugt i64 %41, 1
  %49 = select i1 %48, i64 %41, i64 1
  %50 = and i64 %49, 56
  %51 = add nsw i64 %50, -8
  %52 = lshr exact i64 %51, 3
  %53 = add nuw nsw i64 %52, 1
  %54 = icmp ult i64 %49, 8
  %55 = and i64 %49, 56
  %56 = and i64 %53, 1
  %57 = icmp eq i64 %51, 0
  %58 = sub nuw nsw i64 %53, %56
  %59 = icmp eq i64 %56, 0
  %60 = icmp eq i64 %49, %55
  %61 = icmp eq i8 %10, 1
  %62 = icmp ult i64 %47, 16
  %63 = and i64 %47, -16
  %64 = or i64 %63, 1
  %65 = insertelement <8 x i32> undef, i32 %40, i32 0
  %66 = shufflevector <8 x i32> %65, <8 x i32> undef, <8 x i32> zeroinitializer
  %67 = insertelement <8 x i32> undef, i32 %40, i32 0
  %68 = shufflevector <8 x i32> %67, <8 x i32> undef, <8 x i32> zeroinitializer
  %69 = insertelement <8 x i32> undef, i32 %21, i32 0
  %70 = shufflevector <8 x i32> %69, <8 x i32> undef, <8 x i32> zeroinitializer
  %71 = insertelement <8 x i32> undef, i32 %21, i32 0
  %72 = shufflevector <8 x i32> %71, <8 x i32> undef, <8 x i32> zeroinitializer
  %73 = icmp eq i64 %47, %63
  br label %108

74:                                               ; preds = %7
  %75 = load i16, i16* %18, align 2
  br i1 %26, label %76, label %82

76:                                               ; preds = %74
  %77 = sext i16 %75 to i32
  %78 = mul nsw i32 %77, 2896
  %79 = add nsw i32 %78, 2048
  %80 = lshr i32 %79, 12
  %81 = trunc i32 %80 to i16
  store i16 %81, i16* %18, align 2
  br label %82

82:                                               ; preds = %76, %74
  %83 = phi i16 [ %81, %76 ], [ %75, %74 ]
  %84 = sext i16 %83 to i32
  %85 = mul nsw i32 %84, 2896
  %86 = add nsw i32 %85, 2048
  %87 = lshr i32 %86, 12
  %88 = trunc i32 %87 to i16
  store i16 %88, i16* %18, align 2
  %89 = getelementptr inbounds i8, i8* %3, i64 2
  %90 = bitcast i8* %89 to i16*
  store i16 %88, i16* %90, align 2
  %91 = lshr i64 524276, %8
  %92 = and i64 %91, 1
  %93 = icmp eq i64 %92, 0
  br i1 %93, label %102, label %94

94:                                               ; preds = %82
  %95 = shl i32 %87, 16
  %96 = ashr exact i32 %95, 16
  %97 = shl i32 1, %21
  %98 = ashr i32 %97, 1
  %99 = add nsw i32 %96, %98
  %100 = ashr i32 %99, %21
  %101 = trunc i32 %100 to i16
  store i16 %101, i16* %18, align 2
  br label %102

102:                                              ; preds = %82, %94
  %103 = phi i16 [ %101, %94 ], [ %88, %82 ]
  store i16 %103, i16* %90, align 2
  %104 = getelementptr inbounds i8, i8* %3, i64 4
  %105 = bitcast i8* %104 to i16*
  store i16 %103, i16* %105, align 2
  %106 = getelementptr inbounds i8, i8* %3, i64 6
  %107 = bitcast i8* %106 to i16*
  store i16 %103, i16* %107, align 2
  br label %277

108:                                              ; preds = %274, %30
  %109 = phi i64 [ 0, %30 ], [ %275, %274 ]
  %110 = mul nuw nsw i64 %109, %34
  br i1 %44, label %165, label %111

111:                                              ; preds = %108
  %112 = getelementptr inbounds i16, i16* %18, i64 %110
  br i1 %54, label %152, label %113

113:                                              ; preds = %111
  br i1 %57, label %139, label %114

114:                                              ; preds = %113, %114
  %115 = phi i64 [ %136, %114 ], [ 0, %113 ]
  %116 = phi i64 [ %137, %114 ], [ %58, %113 ]
  %117 = getelementptr inbounds i16, i16* %112, i64 %115
  %118 = bitcast i16* %117 to <8 x i16>*
  %119 = load <8 x i16>, <8 x i16>* %118, align 2
  %120 = sext <8 x i16> %119 to <8 x i32>
  %121 = mul nsw <8 x i32> %120, <i32 2896, i32 2896, i32 2896, i32 2896, i32 2896, i32 2896, i32 2896, i32 2896>
  %122 = add nsw <8 x i32> %121, <i32 2048, i32 2048, i32 2048, i32 2048, i32 2048, i32 2048, i32 2048, i32 2048>
  %123 = lshr <8 x i32> %122, <i32 12, i32 12, i32 12, i32 12, i32 12, i32 12, i32 12, i32 12>
  %124 = trunc <8 x i32> %123 to <8 x i16>
  %125 = bitcast i16* %117 to <8 x i16>*
  store <8 x i16> %124, <8 x i16>* %125, align 2
  %126 = or i64 %115, 8
  %127 = getelementptr inbounds i16, i16* %112, i64 %126
  %128 = bitcast i16* %127 to <8 x i16>*
  %129 = load <8 x i16>, <8 x i16>* %128, align 2
  %130 = sext <8 x i16> %129 to <8 x i32>
  %131 = mul nsw <8 x i32> %130, <i32 2896, i32 2896, i32 2896, i32 2896, i32 2896, i32 2896, i32 2896, i32 2896>
  %132 = add nsw <8 x i32> %131, <i32 2048, i32 2048, i32 2048, i32 2048, i32 2048, i32 2048, i32 2048, i32 2048>
  %133 = lshr <8 x i32> %132, <i32 12, i32 12, i32 12, i32 12, i32 12, i32 12, i32 12, i32 12>
  %134 = trunc <8 x i32> %133 to <8 x i16>
  %135 = bitcast i16* %127 to <8 x i16>*
  store <8 x i16> %134, <8 x i16>* %135, align 2
  %136 = add i64 %115, 16
  %137 = add i64 %116, -2
  %138 = icmp eq i64 %137, 0
  br i1 %138, label %139, label %114, !llvm.loop !2

139:                                              ; preds = %114, %113
  %140 = phi i64 [ 0, %113 ], [ %136, %114 ]
  br i1 %59, label %151, label %141

141:                                              ; preds = %139
  %142 = getelementptr inbounds i16, i16* %112, i64 %140
  %143 = bitcast i16* %142 to <8 x i16>*
  %144 = load <8 x i16>, <8 x i16>* %143, align 2
  %145 = sext <8 x i16> %144 to <8 x i32>
  %146 = mul nsw <8 x i32> %145, <i32 2896, i32 2896, i32 2896, i32 2896, i32 2896, i32 2896, i32 2896, i32 2896>
  %147 = add nsw <8 x i32> %146, <i32 2048, i32 2048, i32 2048, i32 2048, i32 2048, i32 2048, i32 2048, i32 2048>
  %148 = lshr <8 x i32> %147, <i32 12, i32 12, i32 12, i32 12, i32 12, i32 12, i32 12, i32 12>
  %149 = trunc <8 x i32> %148 to <8 x i16>
  %150 = bitcast i16* %142 to <8 x i16>*
  store <8 x i16> %149, <8 x i16>* %150, align 2
  br label %151

151:                                              ; preds = %139, %141
  br i1 %60, label %165, label %152

152:                                              ; preds = %151, %111
  %153 = phi i64 [ 0, %111 ], [ %55, %151 ]
  br label %154

154:                                              ; preds = %152, %154
  %155 = phi i64 [ %163, %154 ], [ %153, %152 ]
  %156 = getelementptr inbounds i16, i16* %112, i64 %155
  %157 = load i16, i16* %156, align 2
  %158 = sext i16 %157 to i32
  %159 = mul nsw i32 %158, 2896
  %160 = add nsw i32 %159, 2048
  %161 = lshr i32 %160, 12
  %162 = trunc i32 %161 to i16
  store i16 %162, i16* %156, align 2
  %163 = add nuw nsw i64 %155, 1
  %164 = icmp ult i64 %163, %41
  br i1 %164, label %154, label %165, !llvm.loop !4

165:                                              ; preds = %154, %151, %108
  %166 = getelementptr inbounds i16, i16* %18, i64 %110
  %167 = bitcast i16* %166 to i64*
  %168 = load i64, i64* %167, align 2
  %169 = lshr i64 %168, 32
  %170 = getelementptr inbounds i16, i16* %166, i64 1
  %171 = lshr i64 %168, 16
  %172 = getelementptr inbounds i16, i16* %166, i64 2
  %173 = getelementptr inbounds i16, i16* %166, i64 3
  %174 = shl i64 %168, 48
  %175 = ashr exact i64 %174, 48
  %176 = mul nsw i64 %175, 2896
  %177 = shl i64 %169, 48
  %178 = ashr exact i64 %177, 48
  %179 = mul nsw i64 %178, 2896
  %180 = add nsw i64 %176, 2048
  %181 = add nsw i64 %180, %179
  %182 = lshr i64 %181, 12
  %183 = sub nsw i64 %180, %179
  %184 = lshr i64 %183, 12
  %185 = shl i64 %171, 48
  %186 = ashr exact i64 %185, 48
  %187 = mul nsw i64 %186, 1567
  %188 = ashr i64 %168, 48
  %189 = mul nsw i64 %188, -3784
  %190 = mul nsw i64 %186, 3784
  %191 = mul nsw i64 %188, 1567
  %192 = add nsw i64 %189, 2048
  %193 = add nsw i64 %192, %187
  %194 = lshr i64 %193, 12
  %195 = add nsw i64 %191, 2048
  %196 = add nsw i64 %195, %190
  %197 = lshr i64 %196, 12
  %198 = shl i64 %182, 16
  %199 = trunc i64 %198 to i32
  %200 = ashr exact i32 %199, 16
  %201 = shl i64 %197, 16
  %202 = trunc i64 %201 to i32
  %203 = ashr exact i32 %202, 16
  %204 = add nsw i32 %203, %200
  %205 = sub nsw i32 %200, %203
  %206 = icmp slt i32 %204, 32767
  %207 = select i1 %206, i32 %204, i32 32767
  %208 = icmp sgt i32 %207, -32768
  %209 = select i1 %208, i32 %207, i32 -32768
  %210 = trunc i32 %209 to i16
  store i16 %210, i16* %166, align 2
  %211 = icmp slt i32 %205, 32767
  %212 = select i1 %211, i32 %205, i32 32767
  %213 = icmp sgt i32 %212, -32768
  %214 = select i1 %213, i32 %212, i32 -32768
  %215 = trunc i32 %214 to i16
  store i16 %215, i16* %173, align 2
  %216 = shl i64 %184, 16
  %217 = trunc i64 %216 to i32
  %218 = ashr exact i32 %217, 16
  %219 = shl i64 %194, 16
  %220 = trunc i64 %219 to i32
  %221 = ashr exact i32 %220, 16
  %222 = add nsw i32 %221, %218
  %223 = sub nsw i32 %218, %221
  %224 = icmp slt i32 %222, 32767
  %225 = select i1 %224, i32 %222, i32 32767
  %226 = icmp sgt i32 %225, -32768
  %227 = select i1 %226, i32 %225, i32 -32768
  %228 = trunc i32 %227 to i16
  store i16 %228, i16* %170, align 2
  %229 = icmp slt i32 %223, 32767
  %230 = select i1 %229, i32 %223, i32 32767
  %231 = icmp sgt i32 %230, -32768
  %232 = select i1 %231, i32 %230, i32 -32768
  %233 = trunc i32 %232 to i16
  store i16 %233, i16* %172, align 2
  br i1 %45, label %274, label %234

234:                                              ; preds = %165
  %235 = add nsw i32 %40, %209
  %236 = ashr i32 %235, %21
  %237 = trunc i32 %236 to i16
  store i16 %237, i16* %166, align 2
  br i1 %61, label %274, label %238

238:                                              ; preds = %234
  br i1 %62, label %261, label %239

239:                                              ; preds = %238, %239
  %240 = phi i64 [ %258, %239 ], [ 0, %238 ]
  %241 = or i64 %240, 1
  %242 = getelementptr inbounds i16, i16* %166, i64 %241
  %243 = bitcast i16* %242 to <8 x i16>*
  %244 = load <8 x i16>, <8 x i16>* %243, align 2
  %245 = getelementptr inbounds i16, i16* %242, i64 8
  %246 = bitcast i16* %245 to <8 x i16>*
  %247 = load <8 x i16>, <8 x i16>* %246, align 2
  %248 = sext <8 x i16> %244 to <8 x i32>
  %249 = sext <8 x i16> %247 to <8 x i32>
  %250 = add nsw <8 x i32> %66, %248
  %251 = add nsw <8 x i32> %68, %249
  %252 = ashr <8 x i32> %250, %70
  %253 = ashr <8 x i32> %251, %72
  %254 = trunc <8 x i32> %252 to <8 x i16>
  %255 = trunc <8 x i32> %253 to <8 x i16>
  %256 = bitcast i16* %242 to <8 x i16>*
  store <8 x i16> %254, <8 x i16>* %256, align 2
  %257 = bitcast i16* %245 to <8 x i16>*
  store <8 x i16> %255, <8 x i16>* %257, align 2
  %258 = add i64 %240, 16
  %259 = icmp eq i64 %258, %63
  br i1 %259, label %260, label %239, !llvm.loop !6

260:                                              ; preds = %239
  br i1 %73, label %274, label %261

261:                                              ; preds = %260, %238
  %262 = phi i64 [ 1, %238 ], [ %64, %260 ]
  br label %263

263:                                              ; preds = %261, %263
  %264 = phi i64 [ %272, %263 ], [ %262, %261 ]
  %265 = getelementptr inbounds i16, i16* %166, i64 %264
  %266 = load i16, i16* %265, align 2
  %267 = getelementptr inbounds i16, i16* %166, i64 %264
  %268 = sext i16 %266 to i32
  %269 = add nsw i32 %40, %268
  %270 = ashr i32 %269, %21
  %271 = trunc i32 %270 to i16
  store i16 %271, i16* %267, align 2
  %272 = add nuw nsw i64 %264, 1
  %273 = icmp eq i64 %272, %46
  br i1 %273, label %274, label %263, !llvm.loop !7

274:                                              ; preds = %263, %234, %260, %165
  %275 = add nuw nsw i64 %109, 1
  %276 = icmp eq i64 %275, %42
  br i1 %276, label %277, label %108

277:                                              ; preds = %274, %28, %102
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN7libgav13dsp12_GLOBAL__N_115TransformLoop_CILi8EshLNS0_11Transform1DE0EXadL_ZNS1_11DctDcOnly_CILi8EsLi2EEEvPvabibEEXadL_ZNS1_5Dct_CIsLi2EEEvS5_aEELb0EEEvNS_13TransformTypeENS_13TransformSizeEiS5_iiS5_(i8 zeroext, i8 zeroext, i32, i8*, i32, i32, i8* nocapture readonly) #0 {
  %8 = alloca [64 x i16], align 16
  %9 = zext i8 %1 to i64
  %10 = getelementptr inbounds [19 x i8], [19 x i8]* @_ZN7libgav115kTransformWidthE, i64 0, i64 %9
  %11 = load i8, i8* %10, align 1
  %12 = zext i8 %11 to i32
  %13 = getelementptr inbounds [19 x i8], [19 x i8]* @_ZN7libgav116kTransformHeightE, i64 0, i64 %9
  %14 = load i8, i8* %13, align 1
  %15 = bitcast i8* %3 to i16*
  %16 = zext i8 %0 to i32
  %17 = shl i32 1, %16
  %18 = and i32 %17, 33104
  %19 = icmp eq i32 %18, 0
  %20 = bitcast [64 x i16]* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 128, i8* nonnull %20) #4
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %20, i8 -86, i64 128, i1 false)
  %21 = icmp eq i8 %11, 0
  br i1 %21, label %44, label %22

22:                                               ; preds = %7
  %23 = zext i8 %11 to i64
  %24 = icmp eq i32 %2, 1
  %25 = getelementptr inbounds [64 x i16], [64 x i16]* %8, i64 0, i64 0
  %26 = bitcast [64 x i16]* %8 to i64*
  %27 = getelementptr inbounds [64 x i16], [64 x i16]* %8, i64 0, i64 1
  %28 = getelementptr inbounds [64 x i16], [64 x i16]* %8, i64 0, i64 2
  %29 = getelementptr inbounds [64 x i16], [64 x i16]* %8, i64 0, i64 3
  %30 = icmp eq i8 %14, 0
  %31 = getelementptr inbounds i8, i8* %6, i64 4
  %32 = bitcast i8* %31 to i32*
  %33 = getelementptr inbounds i8, i8* %6, i64 8
  %34 = bitcast i8* %33 to i8**
  %35 = zext i8 %14 to i64
  %36 = sext i32 %5 to i64
  %37 = sext i32 %4 to i64
  %38 = zext i8 %11 to i64
  %39 = add nsw i64 %35, -1
  %40 = and i64 %35, 3
  %41 = icmp ult i64 %39, 3
  %42 = sub nsw i64 %35, %40
  %43 = icmp eq i64 %40, 0
  br label %45

44:                                               ; preds = %167, %7
  call void @llvm.lifetime.end.p0i8(i64 128, i8* nonnull %20) #4
  ret void

45:                                               ; preds = %167, %22
  %46 = phi i64 [ 0, %22 ], [ %168, %167 ]
  %47 = phi i32 [ 0, %22 ], [ %169, %167 ]
  %48 = xor i32 %47, -1
  %49 = add nsw i32 %48, %12
  %50 = trunc i64 %46 to i32
  %51 = select i1 %19, i32 %50, i32 %49
  %52 = sext i32 %51 to i64
  %53 = getelementptr inbounds i16, i16* %15, i64 %52
  br i1 %41, label %79, label %54

54:                                               ; preds = %45, %54
  %55 = phi i64 [ %76, %54 ], [ 0, %45 ]
  %56 = phi i64 [ %77, %54 ], [ %42, %45 ]
  %57 = mul nuw nsw i64 %55, %23
  %58 = getelementptr inbounds i16, i16* %53, i64 %57
  %59 = load i16, i16* %58, align 2
  %60 = getelementptr inbounds [64 x i16], [64 x i16]* %8, i64 0, i64 %55
  store i16 %59, i16* %60, align 8
  %61 = or i64 %55, 1
  %62 = mul nuw nsw i64 %61, %23
  %63 = getelementptr inbounds i16, i16* %53, i64 %62
  %64 = load i16, i16* %63, align 2
  %65 = getelementptr inbounds [64 x i16], [64 x i16]* %8, i64 0, i64 %61
  store i16 %64, i16* %65, align 2
  %66 = or i64 %55, 2
  %67 = mul nuw nsw i64 %66, %23
  %68 = getelementptr inbounds i16, i16* %53, i64 %67
  %69 = load i16, i16* %68, align 2
  %70 = getelementptr inbounds [64 x i16], [64 x i16]* %8, i64 0, i64 %66
  store i16 %69, i16* %70, align 4
  %71 = or i64 %55, 3
  %72 = mul nuw nsw i64 %71, %23
  %73 = getelementptr inbounds i16, i16* %53, i64 %72
  %74 = load i16, i16* %73, align 2
  %75 = getelementptr inbounds [64 x i16], [64 x i16]* %8, i64 0, i64 %71
  store i16 %74, i16* %75, align 2
  %76 = add nuw nsw i64 %55, 4
  %77 = add i64 %56, -4
  %78 = icmp eq i64 %77, 0
  br i1 %78, label %79, label %54

79:                                               ; preds = %54, %45
  %80 = phi i64 [ 0, %45 ], [ %76, %54 ]
  br i1 %43, label %91, label %81

81:                                               ; preds = %79, %81
  %82 = phi i64 [ %88, %81 ], [ %80, %79 ]
  %83 = phi i64 [ %89, %81 ], [ %40, %79 ]
  %84 = mul nuw nsw i64 %82, %23
  %85 = getelementptr inbounds i16, i16* %53, i64 %84
  %86 = load i16, i16* %85, align 2
  %87 = getelementptr inbounds [64 x i16], [64 x i16]* %8, i64 0, i64 %82
  store i16 %86, i16* %87, align 2
  %88 = add nuw nsw i64 %82, 1
  %89 = add i64 %83, -1
  %90 = icmp eq i64 %89, 0
  br i1 %90, label %91, label %81, !llvm.loop !8

91:                                               ; preds = %81, %79
  br i1 %24, label %92, label %99

92:                                               ; preds = %91
  %93 = load i16, i16* %25, align 16
  %94 = sext i16 %93 to i32
  %95 = mul nsw i32 %94, 2896
  %96 = add nsw i32 %95, 2048
  %97 = lshr i32 %96, 12
  %98 = trunc i32 %97 to i16
  store i16 %98, i16* %25, align 16
  store i16 %98, i16* %27, align 2
  store i16 %98, i16* %28, align 4
  store i16 %98, i16* %29, align 2
  br label %163

99:                                               ; preds = %91
  %100 = load i64, i64* %26, align 16
  %101 = lshr i64 %100, 32
  %102 = lshr i64 %100, 16
  %103 = shl i64 %100, 48
  %104 = ashr exact i64 %103, 48
  %105 = mul nsw i64 %104, 2896
  %106 = shl i64 %101, 48
  %107 = ashr exact i64 %106, 48
  %108 = mul nsw i64 %107, 2896
  %109 = add nsw i64 %105, 2048
  %110 = add nsw i64 %109, %108
  %111 = lshr i64 %110, 12
  %112 = sub nsw i64 %109, %108
  %113 = lshr i64 %112, 12
  %114 = shl i64 %102, 48
  %115 = ashr exact i64 %114, 48
  %116 = mul nsw i64 %115, 1567
  %117 = ashr i64 %100, 48
  %118 = mul nsw i64 %117, -3784
  %119 = mul nsw i64 %115, 3784
  %120 = mul nsw i64 %117, 1567
  %121 = add nsw i64 %118, 2048
  %122 = add nsw i64 %121, %116
  %123 = lshr i64 %122, 12
  %124 = add nsw i64 %120, 2048
  %125 = add nsw i64 %124, %119
  %126 = lshr i64 %125, 12
  %127 = shl i64 %111, 16
  %128 = trunc i64 %127 to i32
  %129 = ashr exact i32 %128, 16
  %130 = shl i64 %126, 16
  %131 = trunc i64 %130 to i32
  %132 = ashr exact i32 %131, 16
  %133 = add nsw i32 %132, %129
  %134 = sub nsw i32 %129, %132
  %135 = icmp slt i32 %133, 32767
  %136 = select i1 %135, i32 %133, i32 32767
  %137 = icmp sgt i32 %136, -32768
  %138 = select i1 %137, i32 %136, i32 -32768
  %139 = trunc i32 %138 to i16
  store i16 %139, i16* %25, align 16
  %140 = icmp slt i32 %134, 32767
  %141 = select i1 %140, i32 %134, i32 32767
  %142 = icmp sgt i32 %141, -32768
  %143 = select i1 %142, i32 %141, i32 -32768
  %144 = trunc i32 %143 to i16
  store i16 %144, i16* %29, align 2
  %145 = shl i64 %113, 16
  %146 = trunc i64 %145 to i32
  %147 = ashr exact i32 %146, 16
  %148 = shl i64 %123, 16
  %149 = trunc i64 %148 to i32
  %150 = ashr exact i32 %149, 16
  %151 = add nsw i32 %150, %147
  %152 = sub nsw i32 %147, %150
  %153 = icmp slt i32 %151, 32767
  %154 = select i1 %153, i32 %151, i32 32767
  %155 = icmp sgt i32 %154, -32768
  %156 = select i1 %155, i32 %154, i32 -32768
  %157 = trunc i32 %156 to i16
  store i16 %157, i16* %27, align 2
  %158 = icmp slt i32 %152, 32767
  %159 = select i1 %158, i32 %152, i32 32767
  %160 = icmp sgt i32 %159, -32768
  %161 = select i1 %160, i32 %159, i32 -32768
  %162 = trunc i32 %161 to i16
  store i16 %162, i16* %28, align 4
  br label %163

163:                                              ; preds = %99, %92
  %164 = phi i16 [ %139, %99 ], [ %98, %92 ]
  br i1 %30, label %167, label %165

165:                                              ; preds = %163
  %166 = add nsw i64 %46, %37
  br label %171

167:                                              ; preds = %171, %163
  %168 = add nuw nsw i64 %46, 1
  %169 = add nuw nsw i32 %47, 1
  %170 = icmp eq i64 %168, %38
  br i1 %170, label %44, label %45

171:                                              ; preds = %194, %165
  %172 = phi i16 [ %164, %165 ], [ %196, %194 ]
  %173 = phi i64 [ 0, %165 ], [ %192, %194 ]
  %174 = add nsw i64 %173, %36
  %175 = sext i16 %172 to i32
  %176 = add nsw i32 %175, 8
  %177 = ashr i32 %176, 4
  %178 = load i32, i32* %32, align 4
  %179 = sext i32 %178 to i64
  %180 = mul nsw i64 %174, %179
  %181 = load i8*, i8** %34, align 8
  %182 = getelementptr inbounds i8, i8* %181, i64 %166
  %183 = getelementptr inbounds i8, i8* %182, i64 %180
  %184 = load i8, i8* %183, align 1
  %185 = zext i8 %184 to i32
  %186 = add nsw i32 %177, %185
  %187 = icmp slt i32 %186, 255
  %188 = select i1 %187, i32 %186, i32 255
  %189 = icmp sgt i32 %188, 0
  %190 = select i1 %189, i32 %188, i32 0
  %191 = trunc i32 %190 to i8
  store i8 %191, i8* %183, align 1
  %192 = add nuw nsw i64 %173, 1
  %193 = icmp eq i64 %192, %35
  br i1 %193, label %167, label %194

194:                                              ; preds = %171
  %195 = getelementptr inbounds [64 x i16], [64 x i16]* %8, i64 0, i64 %192
  %196 = load i16, i16* %195, align 2
  br label %171
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN7libgav13dsp12_GLOBAL__N_115TransformLoop_CILi8EshLNS0_11Transform1DE0EXadL_ZNS1_11DctDcOnly_CILi8EsLi3EEEvPvabibEEXadL_ZNS1_5Dct_CIsLi3EEEvS5_aEELb1EEEvNS_13TransformTypeENS_13TransformSizeEiS5_iiS5_(i8 zeroext, i8 zeroext, i32, i8*, i32, i32, i8* nocapture readnone) #0 {
  %8 = zext i8 %1 to i64
  %9 = getelementptr inbounds [19 x i8], [19 x i8]* @_ZN7libgav115kTransformWidthE, i64 0, i64 %8
  %10 = load i8, i8* %9, align 1
  %11 = zext i8 %10 to i32
  %12 = getelementptr inbounds [19 x i8], [19 x i8]* @_ZN7libgav119kTransformWidthLog2E, i64 0, i64 %8
  %13 = load i8, i8* %12, align 1
  %14 = zext i8 %13 to i32
  %15 = getelementptr inbounds [19 x i8], [19 x i8]* @_ZN7libgav120kTransformHeightLog2E, i64 0, i64 %8
  %16 = load i8, i8* %15, align 1
  %17 = zext i8 %16 to i32
  %18 = bitcast i8* %3 to i16*
  %19 = getelementptr inbounds [19 x i8], [19 x i8]* @_ZN7libgav13dsp12_GLOBAL__N_118kTransformRowShiftE, i64 0, i64 %8
  %20 = load i8, i8* %19, align 1
  %21 = zext i8 %20 to i32
  %22 = sub nsw i32 %14, %17
  %23 = icmp slt i32 %22, 0
  %24 = sub nsw i32 0, %22
  %25 = select i1 %23, i32 %24, i32 %22
  %26 = icmp eq i32 %25, 1
  %27 = icmp eq i32 %2, 1
  br i1 %27, label %79, label %28

28:                                               ; preds = %7
  %29 = icmp sgt i32 %2, 0
  br i1 %29, label %30, label %257

30:                                               ; preds = %28
  %31 = icmp ult i32 %11, 32
  %32 = select i1 %31, i32 %11, i32 32
  %33 = icmp slt i32 %32, 1
  %34 = zext i8 %10 to i64
  %35 = lshr i64 524276, %8
  %36 = and i64 %35, 1
  %37 = icmp eq i64 %36, 0
  %38 = icmp eq i8 %10, 0
  %39 = shl i32 1, %21
  %40 = ashr i32 %39, 1
  %41 = zext i32 %32 to i64
  %42 = zext i32 %2 to i64
  %43 = xor i1 %26, true
  %44 = or i1 %33, %43
  %45 = or i1 %37, %38
  %46 = zext i8 %10 to i64
  %47 = icmp ugt i64 %41, 1
  %48 = select i1 %47, i64 %41, i64 1
  %49 = and i64 %48, 56
  %50 = add nsw i64 %49, -8
  %51 = lshr exact i64 %50, 3
  %52 = add nuw nsw i64 %51, 1
  %53 = and i64 %34, 240
  %54 = add nsw i64 %53, -16
  %55 = lshr exact i64 %54, 4
  %56 = add nuw nsw i64 %55, 1
  %57 = icmp ult i64 %48, 8
  %58 = and i64 %48, 56
  %59 = and i64 %52, 1
  %60 = icmp eq i64 %50, 0
  %61 = sub nuw nsw i64 %52, %59
  %62 = icmp eq i64 %59, 0
  %63 = icmp eq i64 %48, %58
  %64 = icmp ult i8 %10, 16
  %65 = and i64 %46, 240
  %66 = insertelement <8 x i32> undef, i32 %40, i32 0
  %67 = shufflevector <8 x i32> %66, <8 x i32> undef, <8 x i32> zeroinitializer
  %68 = insertelement <8 x i32> undef, i32 %40, i32 0
  %69 = shufflevector <8 x i32> %68, <8 x i32> undef, <8 x i32> zeroinitializer
  %70 = insertelement <8 x i32> undef, i32 %21, i32 0
  %71 = shufflevector <8 x i32> %70, <8 x i32> undef, <8 x i32> zeroinitializer
  %72 = insertelement <8 x i32> undef, i32 %21, i32 0
  %73 = shufflevector <8 x i32> %72, <8 x i32> undef, <8 x i32> zeroinitializer
  %74 = and i64 %56, 1
  %75 = icmp eq i64 %54, 0
  %76 = sub nuw nsw i64 %56, %74
  %77 = icmp eq i64 %74, 0
  %78 = icmp eq i64 %65, %46
  br label %121

79:                                               ; preds = %7
  %80 = load i16, i16* %18, align 2
  br i1 %26, label %81, label %87

81:                                               ; preds = %79
  %82 = sext i16 %80 to i32
  %83 = mul nsw i32 %82, 2896
  %84 = add nsw i32 %83, 2048
  %85 = lshr i32 %84, 12
  %86 = trunc i32 %85 to i16
  store i16 %86, i16* %18, align 2
  br label %87

87:                                               ; preds = %81, %79
  %88 = phi i16 [ %86, %81 ], [ %80, %79 ]
  %89 = sext i16 %88 to i32
  %90 = mul nsw i32 %89, 2896
  %91 = add nsw i32 %90, 2048
  %92 = lshr i32 %91, 12
  %93 = trunc i32 %92 to i16
  store i16 %93, i16* %18, align 2
  %94 = getelementptr inbounds i8, i8* %3, i64 2
  %95 = bitcast i8* %94 to i16*
  store i16 %93, i16* %95, align 2
  %96 = lshr i64 524276, %8
  %97 = and i64 %96, 1
  %98 = icmp eq i64 %97, 0
  br i1 %98, label %107, label %99

99:                                               ; preds = %87
  %100 = shl i32 %92, 16
  %101 = ashr exact i32 %100, 16
  %102 = shl i32 1, %21
  %103 = ashr i32 %102, 1
  %104 = add nsw i32 %101, %103
  %105 = ashr i32 %104, %21
  %106 = trunc i32 %105 to i16
  store i16 %106, i16* %18, align 2
  br label %107

107:                                              ; preds = %87, %99
  %108 = phi i16 [ %106, %99 ], [ %93, %87 ]
  store i16 %108, i16* %95, align 2
  %109 = getelementptr inbounds i8, i8* %3, i64 4
  %110 = bitcast i8* %109 to i16*
  store i16 %108, i16* %110, align 2
  %111 = getelementptr inbounds i8, i8* %3, i64 6
  %112 = bitcast i8* %111 to i16*
  store i16 %108, i16* %112, align 2
  %113 = getelementptr inbounds i8, i8* %3, i64 8
  %114 = bitcast i8* %113 to i16*
  store i16 %108, i16* %114, align 2
  %115 = getelementptr inbounds i8, i8* %3, i64 10
  %116 = bitcast i8* %115 to i16*
  store i16 %108, i16* %116, align 2
  %117 = getelementptr inbounds i8, i8* %3, i64 12
  %118 = bitcast i8* %117 to i16*
  store i16 %108, i16* %118, align 2
  %119 = getelementptr inbounds i8, i8* %3, i64 14
  %120 = bitcast i8* %119 to i16*
  store i16 %108, i16* %120, align 2
  br label %257

121:                                              ; preds = %254, %30
  %122 = phi i64 [ 0, %30 ], [ %255, %254 ]
  %123 = mul nuw nsw i64 %122, %34
  br i1 %44, label %178, label %124

124:                                              ; preds = %121
  %125 = getelementptr inbounds i16, i16* %18, i64 %123
  br i1 %57, label %165, label %126

126:                                              ; preds = %124
  br i1 %60, label %152, label %127

127:                                              ; preds = %126, %127
  %128 = phi i64 [ %149, %127 ], [ 0, %126 ]
  %129 = phi i64 [ %150, %127 ], [ %61, %126 ]
  %130 = getelementptr inbounds i16, i16* %125, i64 %128
  %131 = bitcast i16* %130 to <8 x i16>*
  %132 = load <8 x i16>, <8 x i16>* %131, align 2
  %133 = sext <8 x i16> %132 to <8 x i32>
  %134 = mul nsw <8 x i32> %133, <i32 2896, i32 2896, i32 2896, i32 2896, i32 2896, i32 2896, i32 2896, i32 2896>
  %135 = add nsw <8 x i32> %134, <i32 2048, i32 2048, i32 2048, i32 2048, i32 2048, i32 2048, i32 2048, i32 2048>
  %136 = lshr <8 x i32> %135, <i32 12, i32 12, i32 12, i32 12, i32 12, i32 12, i32 12, i32 12>
  %137 = trunc <8 x i32> %136 to <8 x i16>
  %138 = bitcast i16* %130 to <8 x i16>*
  store <8 x i16> %137, <8 x i16>* %138, align 2
  %139 = or i64 %128, 8
  %140 = getelementptr inbounds i16, i16* %125, i64 %139
  %141 = bitcast i16* %140 to <8 x i16>*
  %142 = load <8 x i16>, <8 x i16>* %141, align 2
  %143 = sext <8 x i16> %142 to <8 x i32>
  %144 = mul nsw <8 x i32> %143, <i32 2896, i32 2896, i32 2896, i32 2896, i32 2896, i32 2896, i32 2896, i32 2896>
  %145 = add nsw <8 x i32> %144, <i32 2048, i32 2048, i32 2048, i32 2048, i32 2048, i32 2048, i32 2048, i32 2048>
  %146 = lshr <8 x i32> %145, <i32 12, i32 12, i32 12, i32 12, i32 12, i32 12, i32 12, i32 12>
  %147 = trunc <8 x i32> %146 to <8 x i16>
  %148 = bitcast i16* %140 to <8 x i16>*
  store <8 x i16> %147, <8 x i16>* %148, align 2
  %149 = add i64 %128, 16
  %150 = add i64 %129, -2
  %151 = icmp eq i64 %150, 0
  br i1 %151, label %152, label %127, !llvm.loop !10

152:                                              ; preds = %127, %126
  %153 = phi i64 [ 0, %126 ], [ %149, %127 ]
  br i1 %62, label %164, label %154

154:                                              ; preds = %152
  %155 = getelementptr inbounds i16, i16* %125, i64 %153
  %156 = bitcast i16* %155 to <8 x i16>*
  %157 = load <8 x i16>, <8 x i16>* %156, align 2
  %158 = sext <8 x i16> %157 to <8 x i32>
  %159 = mul nsw <8 x i32> %158, <i32 2896, i32 2896, i32 2896, i32 2896, i32 2896, i32 2896, i32 2896, i32 2896>
  %160 = add nsw <8 x i32> %159, <i32 2048, i32 2048, i32 2048, i32 2048, i32 2048, i32 2048, i32 2048, i32 2048>
  %161 = lshr <8 x i32> %160, <i32 12, i32 12, i32 12, i32 12, i32 12, i32 12, i32 12, i32 12>
  %162 = trunc <8 x i32> %161 to <8 x i16>
  %163 = bitcast i16* %155 to <8 x i16>*
  store <8 x i16> %162, <8 x i16>* %163, align 2
  br label %164

164:                                              ; preds = %152, %154
  br i1 %63, label %178, label %165

165:                                              ; preds = %164, %124
  %166 = phi i64 [ 0, %124 ], [ %58, %164 ]
  br label %167

167:                                              ; preds = %165, %167
  %168 = phi i64 [ %176, %167 ], [ %166, %165 ]
  %169 = getelementptr inbounds i16, i16* %125, i64 %168
  %170 = load i16, i16* %169, align 2
  %171 = sext i16 %170 to i32
  %172 = mul nsw i32 %171, 2896
  %173 = add nsw i32 %172, 2048
  %174 = lshr i32 %173, 12
  %175 = trunc i32 %174 to i16
  store i16 %175, i16* %169, align 2
  %176 = add nuw nsw i64 %168, 1
  %177 = icmp ult i64 %176, %41
  br i1 %177, label %167, label %178, !llvm.loop !11

178:                                              ; preds = %167, %164, %121
  %179 = getelementptr inbounds i16, i16* %18, i64 %123
  %180 = bitcast i16* %179 to i8*
  tail call fastcc void @_ZN7libgav13dsp12_GLOBAL__N_15Dct_CIsLi3EEEvPva(i8* %180)
  br i1 %45, label %254, label %181

181:                                              ; preds = %178
  br i1 %64, label %242, label %182

182:                                              ; preds = %181
  br i1 %75, label %222, label %183

183:                                              ; preds = %182, %183
  %184 = phi i64 [ %219, %183 ], [ 0, %182 ]
  %185 = phi i64 [ %220, %183 ], [ %76, %182 ]
  %186 = getelementptr inbounds i16, i16* %179, i64 %184
  %187 = bitcast i16* %186 to <8 x i16>*
  %188 = load <8 x i16>, <8 x i16>* %187, align 2
  %189 = getelementptr inbounds i16, i16* %186, i64 8
  %190 = bitcast i16* %189 to <8 x i16>*
  %191 = load <8 x i16>, <8 x i16>* %190, align 2
  %192 = sext <8 x i16> %188 to <8 x i32>
  %193 = sext <8 x i16> %191 to <8 x i32>
  %194 = add nsw <8 x i32> %67, %192
  %195 = add nsw <8 x i32> %69, %193
  %196 = ashr <8 x i32> %194, %71
  %197 = ashr <8 x i32> %195, %73
  %198 = trunc <8 x i32> %196 to <8 x i16>
  %199 = trunc <8 x i32> %197 to <8 x i16>
  %200 = bitcast i16* %186 to <8 x i16>*
  store <8 x i16> %198, <8 x i16>* %200, align 2
  %201 = bitcast i16* %189 to <8 x i16>*
  store <8 x i16> %199, <8 x i16>* %201, align 2
  %202 = or i64 %184, 16
  %203 = getelementptr inbounds i16, i16* %179, i64 %202
  %204 = bitcast i16* %203 to <8 x i16>*
  %205 = load <8 x i16>, <8 x i16>* %204, align 2
  %206 = getelementptr inbounds i16, i16* %203, i64 8
  %207 = bitcast i16* %206 to <8 x i16>*
  %208 = load <8 x i16>, <8 x i16>* %207, align 2
  %209 = sext <8 x i16> %205 to <8 x i32>
  %210 = sext <8 x i16> %208 to <8 x i32>
  %211 = add nsw <8 x i32> %67, %209
  %212 = add nsw <8 x i32> %69, %210
  %213 = ashr <8 x i32> %211, %71
  %214 = ashr <8 x i32> %212, %73
  %215 = trunc <8 x i32> %213 to <8 x i16>
  %216 = trunc <8 x i32> %214 to <8 x i16>
  %217 = bitcast i16* %203 to <8 x i16>*
  store <8 x i16> %215, <8 x i16>* %217, align 2
  %218 = bitcast i16* %206 to <8 x i16>*
  store <8 x i16> %216, <8 x i16>* %218, align 2
  %219 = add i64 %184, 32
  %220 = add i64 %185, -2
  %221 = icmp eq i64 %220, 0
  br i1 %221, label %222, label %183, !llvm.loop !12

222:                                              ; preds = %183, %182
  %223 = phi i64 [ 0, %182 ], [ %219, %183 ]
  br i1 %77, label %241, label %224

224:                                              ; preds = %222
  %225 = getelementptr inbounds i16, i16* %179, i64 %223
  %226 = bitcast i16* %225 to <8 x i16>*
  %227 = load <8 x i16>, <8 x i16>* %226, align 2
  %228 = getelementptr inbounds i16, i16* %225, i64 8
  %229 = bitcast i16* %228 to <8 x i16>*
  %230 = load <8 x i16>, <8 x i16>* %229, align 2
  %231 = sext <8 x i16> %227 to <8 x i32>
  %232 = sext <8 x i16> %230 to <8 x i32>
  %233 = add nsw <8 x i32> %67, %231
  %234 = add nsw <8 x i32> %69, %232
  %235 = ashr <8 x i32> %233, %71
  %236 = ashr <8 x i32> %234, %73
  %237 = trunc <8 x i32> %235 to <8 x i16>
  %238 = trunc <8 x i32> %236 to <8 x i16>
  %239 = bitcast i16* %225 to <8 x i16>*
  store <8 x i16> %237, <8 x i16>* %239, align 2
  %240 = bitcast i16* %228 to <8 x i16>*
  store <8 x i16> %238, <8 x i16>* %240, align 2
  br label %241

241:                                              ; preds = %222, %224
  br i1 %78, label %254, label %242

242:                                              ; preds = %241, %181
  %243 = phi i64 [ 0, %181 ], [ %65, %241 ]
  br label %244

244:                                              ; preds = %242, %244
  %245 = phi i64 [ %252, %244 ], [ %243, %242 ]
  %246 = getelementptr inbounds i16, i16* %179, i64 %245
  %247 = load i16, i16* %246, align 2
  %248 = sext i16 %247 to i32
  %249 = add nsw i32 %40, %248
  %250 = ashr i32 %249, %21
  %251 = trunc i32 %250 to i16
  store i16 %251, i16* %246, align 2
  %252 = add nuw nsw i64 %245, 1
  %253 = icmp eq i64 %252, %46
  br i1 %253, label %254, label %244, !llvm.loop !13

254:                                              ; preds = %244, %241, %178
  %255 = add nuw nsw i64 %122, 1
  %256 = icmp eq i64 %255, %42
  br i1 %256, label %257, label %121

257:                                              ; preds = %254, %28, %107
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN7libgav13dsp12_GLOBAL__N_115TransformLoop_CILi8EshLNS0_11Transform1DE0EXadL_ZNS1_11DctDcOnly_CILi8EsLi3EEEvPvabibEEXadL_ZNS1_5Dct_CIsLi3EEEvS5_aEELb0EEEvNS_13TransformTypeENS_13TransformSizeEiS5_iiS5_(i8 zeroext, i8 zeroext, i32, i8*, i32, i32, i8* nocapture readonly) #0 {
  %8 = alloca [64 x i16], align 16
  %9 = zext i8 %1 to i64
  %10 = getelementptr inbounds [19 x i8], [19 x i8]* @_ZN7libgav115kTransformWidthE, i64 0, i64 %9
  %11 = load i8, i8* %10, align 1
  %12 = zext i8 %11 to i32
  %13 = getelementptr inbounds [19 x i8], [19 x i8]* @_ZN7libgav116kTransformHeightE, i64 0, i64 %9
  %14 = load i8, i8* %13, align 1
  %15 = bitcast i8* %3 to i16*
  %16 = zext i8 %0 to i32
  %17 = shl i32 1, %16
  %18 = and i32 %17, 33104
  %19 = icmp eq i32 %18, 0
  %20 = bitcast [64 x i16]* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 128, i8* nonnull %20) #4
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %20, i8 -86, i64 128, i1 false)
  %21 = icmp eq i8 %11, 0
  br i1 %21, label %41, label %22

22:                                               ; preds = %7
  %23 = zext i8 %11 to i64
  %24 = icmp eq i32 %2, 1
  %25 = getelementptr inbounds [64 x i16], [64 x i16]* %8, i64 0, i64 0
  %26 = icmp eq i8 %14, 0
  %27 = getelementptr inbounds i8, i8* %6, i64 4
  %28 = bitcast i8* %27 to i32*
  %29 = getelementptr inbounds i8, i8* %6, i64 8
  %30 = bitcast i8* %29 to i8**
  %31 = zext i8 %14 to i64
  %32 = sext i32 %5 to i64
  %33 = sext i32 %4 to i64
  %34 = zext i8 %11 to i64
  %35 = add nsw i64 %31, -1
  %36 = and i64 %31, 3
  %37 = icmp ult i64 %35, 3
  %38 = sub nsw i64 %31, %36
  %39 = icmp eq i64 %36, 0
  %40 = bitcast [64 x i16]* %8 to <8 x i16>*
  br label %42

41:                                               ; preds = %102, %7
  call void @llvm.lifetime.end.p0i8(i64 128, i8* nonnull %20) #4
  ret void

42:                                               ; preds = %102, %22
  %43 = phi i64 [ 0, %22 ], [ %103, %102 ]
  %44 = phi i32 [ 0, %22 ], [ %104, %102 ]
  %45 = xor i32 %44, -1
  %46 = add nsw i32 %45, %12
  %47 = trunc i64 %43 to i32
  %48 = select i1 %19, i32 %47, i32 %46
  %49 = sext i32 %48 to i64
  %50 = getelementptr inbounds i16, i16* %15, i64 %49
  br i1 %37, label %76, label %51

51:                                               ; preds = %42, %51
  %52 = phi i64 [ %73, %51 ], [ 0, %42 ]
  %53 = phi i64 [ %74, %51 ], [ %38, %42 ]
  %54 = mul nuw nsw i64 %52, %23
  %55 = getelementptr inbounds i16, i16* %50, i64 %54
  %56 = load i16, i16* %55, align 2
  %57 = getelementptr inbounds [64 x i16], [64 x i16]* %8, i64 0, i64 %52
  store i16 %56, i16* %57, align 8
  %58 = or i64 %52, 1
  %59 = mul nuw nsw i64 %58, %23
  %60 = getelementptr inbounds i16, i16* %50, i64 %59
  %61 = load i16, i16* %60, align 2
  %62 = getelementptr inbounds [64 x i16], [64 x i16]* %8, i64 0, i64 %58
  store i16 %61, i16* %62, align 2
  %63 = or i64 %52, 2
  %64 = mul nuw nsw i64 %63, %23
  %65 = getelementptr inbounds i16, i16* %50, i64 %64
  %66 = load i16, i16* %65, align 2
  %67 = getelementptr inbounds [64 x i16], [64 x i16]* %8, i64 0, i64 %63
  store i16 %66, i16* %67, align 4
  %68 = or i64 %52, 3
  %69 = mul nuw nsw i64 %68, %23
  %70 = getelementptr inbounds i16, i16* %50, i64 %69
  %71 = load i16, i16* %70, align 2
  %72 = getelementptr inbounds [64 x i16], [64 x i16]* %8, i64 0, i64 %68
  store i16 %71, i16* %72, align 2
  %73 = add nuw nsw i64 %52, 4
  %74 = add i64 %53, -4
  %75 = icmp eq i64 %74, 0
  br i1 %75, label %76, label %51

76:                                               ; preds = %51, %42
  %77 = phi i64 [ 0, %42 ], [ %73, %51 ]
  br i1 %39, label %88, label %78

78:                                               ; preds = %76, %78
  %79 = phi i64 [ %85, %78 ], [ %77, %76 ]
  %80 = phi i64 [ %86, %78 ], [ %36, %76 ]
  %81 = mul nuw nsw i64 %79, %23
  %82 = getelementptr inbounds i16, i16* %50, i64 %81
  %83 = load i16, i16* %82, align 2
  %84 = getelementptr inbounds [64 x i16], [64 x i16]* %8, i64 0, i64 %79
  store i16 %83, i16* %84, align 2
  %85 = add nuw nsw i64 %79, 1
  %86 = add i64 %80, -1
  %87 = icmp eq i64 %86, 0
  br i1 %87, label %88, label %78, !llvm.loop !14

88:                                               ; preds = %78, %76
  br i1 %24, label %89, label %98

89:                                               ; preds = %88
  %90 = load i16, i16* %25, align 16
  %91 = sext i16 %90 to i32
  %92 = mul nsw i32 %91, 2896
  %93 = add nsw i32 %92, 2048
  %94 = lshr i32 %93, 12
  %95 = trunc i32 %94 to i16
  %96 = insertelement <8 x i16> undef, i16 %95, i32 0
  %97 = shufflevector <8 x i16> %96, <8 x i16> undef, <8 x i32> zeroinitializer
  store <8 x i16> %97, <8 x i16>* %40, align 16
  br label %99

98:                                               ; preds = %88
  call fastcc void @_ZN7libgav13dsp12_GLOBAL__N_15Dct_CIsLi3EEEvPva(i8* nonnull %20)
  br label %99

99:                                               ; preds = %98, %89
  br i1 %26, label %102, label %100

100:                                              ; preds = %99
  %101 = add nsw i64 %43, %33
  br label %106

102:                                              ; preds = %106, %99
  %103 = add nuw nsw i64 %43, 1
  %104 = add nuw nsw i32 %44, 1
  %105 = icmp eq i64 %103, %34
  br i1 %105, label %41, label %42

106:                                              ; preds = %106, %100
  %107 = phi i64 [ 0, %100 ], [ %128, %106 ]
  %108 = add nsw i64 %107, %32
  %109 = getelementptr inbounds [64 x i16], [64 x i16]* %8, i64 0, i64 %107
  %110 = load i16, i16* %109, align 2
  %111 = sext i16 %110 to i32
  %112 = add nsw i32 %111, 8
  %113 = ashr i32 %112, 4
  %114 = load i32, i32* %28, align 4
  %115 = sext i32 %114 to i64
  %116 = mul nsw i64 %108, %115
  %117 = load i8*, i8** %30, align 8
  %118 = getelementptr inbounds i8, i8* %117, i64 %101
  %119 = getelementptr inbounds i8, i8* %118, i64 %116
  %120 = load i8, i8* %119, align 1
  %121 = zext i8 %120 to i32
  %122 = add nsw i32 %113, %121
  %123 = icmp slt i32 %122, 255
  %124 = select i1 %123, i32 %122, i32 255
  %125 = icmp sgt i32 %124, 0
  %126 = select i1 %125, i32 %124, i32 0
  %127 = trunc i32 %126 to i8
  store i8 %127, i8* %119, align 1
  %128 = add nuw nsw i64 %107, 1
  %129 = icmp eq i64 %128, %31
  br i1 %129, label %102, label %106
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN7libgav13dsp12_GLOBAL__N_115TransformLoop_CILi8EshLNS0_11Transform1DE0EXadL_ZNS1_11DctDcOnly_CILi8EsLi4EEEvPvabibEEXadL_ZNS1_5Dct_CIsLi4EEEvS5_aEELb1EEEvNS_13TransformTypeENS_13TransformSizeEiS5_iiS5_(i8 zeroext, i8 zeroext, i32, i8*, i32, i32, i8* nocapture readnone) #0 {
  %8 = zext i8 %1 to i64
  %9 = getelementptr inbounds [19 x i8], [19 x i8]* @_ZN7libgav115kTransformWidthE, i64 0, i64 %8
  %10 = load i8, i8* %9, align 1
  %11 = zext i8 %10 to i32
  %12 = getelementptr inbounds [19 x i8], [19 x i8]* @_ZN7libgav119kTransformWidthLog2E, i64 0, i64 %8
  %13 = load i8, i8* %12, align 1
  %14 = zext i8 %13 to i32
  %15 = getelementptr inbounds [19 x i8], [19 x i8]* @_ZN7libgav120kTransformHeightLog2E, i64 0, i64 %8
  %16 = load i8, i8* %15, align 1
  %17 = zext i8 %16 to i32
  %18 = bitcast i8* %3 to i16*
  %19 = getelementptr inbounds [19 x i8], [19 x i8]* @_ZN7libgav13dsp12_GLOBAL__N_118kTransformRowShiftE, i64 0, i64 %8
  %20 = load i8, i8* %19, align 1
  %21 = zext i8 %20 to i32
  %22 = sub nsw i32 %14, %17
  %23 = icmp slt i32 %22, 0
  %24 = sub nsw i32 0, %22
  %25 = select i1 %23, i32 %24, i32 %22
  %26 = icmp eq i32 %25, 1
  %27 = icmp eq i32 %2, 1
  br i1 %27, label %79, label %28

28:                                               ; preds = %7
  %29 = icmp sgt i32 %2, 0
  br i1 %29, label %30, label %262

30:                                               ; preds = %28
  %31 = icmp ult i32 %11, 32
  %32 = select i1 %31, i32 %11, i32 32
  %33 = icmp slt i32 %32, 1
  %34 = zext i8 %10 to i64
  %35 = lshr i64 524276, %8
  %36 = and i64 %35, 1
  %37 = icmp eq i64 %36, 0
  %38 = icmp eq i8 %10, 0
  %39 = shl i32 1, %21
  %40 = ashr i32 %39, 1
  %41 = zext i32 %32 to i64
  %42 = zext i32 %2 to i64
  %43 = xor i1 %26, true
  %44 = or i1 %33, %43
  %45 = or i1 %37, %38
  %46 = zext i8 %10 to i64
  %47 = icmp ugt i64 %41, 1
  %48 = select i1 %47, i64 %41, i64 1
  %49 = and i64 %48, 56
  %50 = add nsw i64 %49, -8
  %51 = lshr exact i64 %50, 3
  %52 = add nuw nsw i64 %51, 1
  %53 = and i64 %34, 240
  %54 = add nsw i64 %53, -16
  %55 = lshr exact i64 %54, 4
  %56 = add nuw nsw i64 %55, 1
  %57 = icmp ult i64 %48, 8
  %58 = and i64 %48, 56
  %59 = and i64 %52, 1
  %60 = icmp eq i64 %50, 0
  %61 = sub nuw nsw i64 %52, %59
  %62 = icmp eq i64 %59, 0
  %63 = icmp eq i64 %48, %58
  %64 = icmp ult i8 %10, 16
  %65 = and i64 %46, 240
  %66 = insertelement <8 x i32> undef, i32 %40, i32 0
  %67 = shufflevector <8 x i32> %66, <8 x i32> undef, <8 x i32> zeroinitializer
  %68 = insertelement <8 x i32> undef, i32 %40, i32 0
  %69 = shufflevector <8 x i32> %68, <8 x i32> undef, <8 x i32> zeroinitializer
  %70 = insertelement <8 x i32> undef, i32 %21, i32 0
  %71 = shufflevector <8 x i32> %70, <8 x i32> undef, <8 x i32> zeroinitializer
  %72 = insertelement <8 x i32> undef, i32 %21, i32 0
  %73 = shufflevector <8 x i32> %72, <8 x i32> undef, <8 x i32> zeroinitializer
  %74 = and i64 %56, 1
  %75 = icmp eq i64 %54, 0
  %76 = sub nuw nsw i64 %56, %74
  %77 = icmp eq i64 %74, 0
  %78 = icmp eq i64 %65, %46
  br label %126

79:                                               ; preds = %7
  %80 = load i16, i16* %18, align 2
  br i1 %26, label %81, label %87

81:                                               ; preds = %79
  %82 = sext i16 %80 to i32
  %83 = mul nsw i32 %82, 2896
  %84 = add nsw i32 %83, 2048
  %85 = lshr i32 %84, 12
  %86 = trunc i32 %85 to i16
  store i16 %86, i16* %18, align 2
  br label %87

87:                                               ; preds = %81, %79
  %88 = phi i16 [ %86, %81 ], [ %80, %79 ]
  %89 = sext i16 %88 to i32
  %90 = mul nsw i32 %89, 2896
  %91 = add nsw i32 %90, 2048
  %92 = lshr i32 %91, 12
  %93 = trunc i32 %92 to i16
  store i16 %93, i16* %18, align 2
  %94 = getelementptr inbounds i8, i8* %3, i64 2
  %95 = bitcast i8* %94 to i16*
  store i16 %93, i16* %95, align 2
  %96 = lshr i64 524276, %8
  %97 = and i64 %96, 1
  %98 = icmp eq i64 %97, 0
  br i1 %98, label %107, label %99

99:                                               ; preds = %87
  %100 = shl i32 %92, 16
  %101 = ashr exact i32 %100, 16
  %102 = shl i32 1, %21
  %103 = ashr i32 %102, 1
  %104 = add nsw i32 %101, %103
  %105 = ashr i32 %104, %21
  %106 = trunc i32 %105 to i16
  store i16 %106, i16* %18, align 2
  br label %107

107:                                              ; preds = %87, %99
  %108 = phi i16 [ %106, %99 ], [ %93, %87 ]
  %109 = insertelement <8 x i16> undef, i16 %108, i32 0
  %110 = shufflevector <8 x i16> %109, <8 x i16> undef, <8 x i32> zeroinitializer
  %111 = bitcast i8* %94 to <8 x i16>*
  store <8 x i16> %110, <8 x i16>* %111, align 2
  %112 = getelementptr inbounds i8, i8* %3, i64 18
  %113 = bitcast i8* %112 to i16*
  store i16 %108, i16* %113, align 2
  %114 = getelementptr inbounds i8, i8* %3, i64 20
  %115 = bitcast i8* %114 to i16*
  store i16 %108, i16* %115, align 2
  %116 = getelementptr inbounds i8, i8* %3, i64 22
  %117 = bitcast i8* %116 to i16*
  store i16 %108, i16* %117, align 2
  %118 = getelementptr inbounds i8, i8* %3, i64 24
  %119 = bitcast i8* %118 to i16*
  store i16 %108, i16* %119, align 2
  %120 = getelementptr inbounds i8, i8* %3, i64 26
  %121 = bitcast i8* %120 to i16*
  store i16 %108, i16* %121, align 2
  %122 = getelementptr inbounds i8, i8* %3, i64 28
  %123 = bitcast i8* %122 to i16*
  store i16 %108, i16* %123, align 2
  %124 = getelementptr inbounds i8, i8* %3, i64 30
  %125 = bitcast i8* %124 to i16*
  store i16 %108, i16* %125, align 2
  br label %262

126:                                              ; preds = %259, %30
  %127 = phi i64 [ 0, %30 ], [ %260, %259 ]
  %128 = mul nuw nsw i64 %127, %34
  br i1 %44, label %183, label %129

129:                                              ; preds = %126
  %130 = getelementptr inbounds i16, i16* %18, i64 %128
  br i1 %57, label %170, label %131

131:                                              ; preds = %129
  br i1 %60, label %157, label %132

132:                                              ; preds = %131, %132
  %133 = phi i64 [ %154, %132 ], [ 0, %131 ]
  %134 = phi i64 [ %155, %132 ], [ %61, %131 ]
  %135 = getelementptr inbounds i16, i16* %130, i64 %133
  %136 = bitcast i16* %135 to <8 x i16>*
  %137 = load <8 x i16>, <8 x i16>* %136, align 2
  %138 = sext <8 x i16> %137 to <8 x i32>
  %139 = mul nsw <8 x i32> %138, <i32 2896, i32 2896, i32 2896, i32 2896, i32 2896, i32 2896, i32 2896, i32 2896>
  %140 = add nsw <8 x i32> %139, <i32 2048, i32 2048, i32 2048, i32 2048, i32 2048, i32 2048, i32 2048, i32 2048>
  %141 = lshr <8 x i32> %140, <i32 12, i32 12, i32 12, i32 12, i32 12, i32 12, i32 12, i32 12>
  %142 = trunc <8 x i32> %141 to <8 x i16>
  %143 = bitcast i16* %135 to <8 x i16>*
  store <8 x i16> %142, <8 x i16>* %143, align 2
  %144 = or i64 %133, 8
  %145 = getelementptr inbounds i16, i16* %130, i64 %144
  %146 = bitcast i16* %145 to <8 x i16>*
  %147 = load <8 x i16>, <8 x i16>* %146, align 2
  %148 = sext <8 x i16> %147 to <8 x i32>
  %149 = mul nsw <8 x i32> %148, <i32 2896, i32 2896, i32 2896, i32 2896, i32 2896, i32 2896, i32 2896, i32 2896>
  %150 = add nsw <8 x i32> %149, <i32 2048, i32 2048, i32 2048, i32 2048, i32 2048, i32 2048, i32 2048, i32 2048>
  %151 = lshr <8 x i32> %150, <i32 12, i32 12, i32 12, i32 12, i32 12, i32 12, i32 12, i32 12>
  %152 = trunc <8 x i32> %151 to <8 x i16>
  %153 = bitcast i16* %145 to <8 x i16>*
  store <8 x i16> %152, <8 x i16>* %153, align 2
  %154 = add i64 %133, 16
  %155 = add i64 %134, -2
  %156 = icmp eq i64 %155, 0
  br i1 %156, label %157, label %132, !llvm.loop !15

157:                                              ; preds = %132, %131
  %158 = phi i64 [ 0, %131 ], [ %154, %132 ]
  br i1 %62, label %169, label %159

159:                                              ; preds = %157
  %160 = getelementptr inbounds i16, i16* %130, i64 %158
  %161 = bitcast i16* %160 to <8 x i16>*
  %162 = load <8 x i16>, <8 x i16>* %161, align 2
  %163 = sext <8 x i16> %162 to <8 x i32>
  %164 = mul nsw <8 x i32> %163, <i32 2896, i32 2896, i32 2896, i32 2896, i32 2896, i32 2896, i32 2896, i32 2896>
  %165 = add nsw <8 x i32> %164, <i32 2048, i32 2048, i32 2048, i32 2048, i32 2048, i32 2048, i32 2048, i32 2048>
  %166 = lshr <8 x i32> %165, <i32 12, i32 12, i32 12, i32 12, i32 12, i32 12, i32 12, i32 12>
  %167 = trunc <8 x i32> %166 to <8 x i16>
  %168 = bitcast i16* %160 to <8 x i16>*
  store <8 x i16> %167, <8 x i16>* %168, align 2
  br label %169

169:                                              ; preds = %157, %159
  br i1 %63, label %183, label %170

170:                                              ; preds = %169, %129
  %171 = phi i64 [ 0, %129 ], [ %58, %169 ]
  br label %172

172:                                              ; preds = %170, %172
  %173 = phi i64 [ %181, %172 ], [ %171, %170 ]
  %174 = getelementptr inbounds i16, i16* %130, i64 %173
  %175 = load i16, i16* %174, align 2
  %176 = sext i16 %175 to i32
  %177 = mul nsw i32 %176, 2896
  %178 = add nsw i32 %177, 2048
  %179 = lshr i32 %178, 12
  %180 = trunc i32 %179 to i16
  store i16 %180, i16* %174, align 2
  %181 = add nuw nsw i64 %173, 1
  %182 = icmp ult i64 %181, %41
  br i1 %182, label %172, label %183, !llvm.loop !16

183:                                              ; preds = %172, %169, %126
  %184 = getelementptr inbounds i16, i16* %18, i64 %128
  %185 = bitcast i16* %184 to i8*
  tail call fastcc void @_ZN7libgav13dsp12_GLOBAL__N_15Dct_CIsLi4EEEvPva(i8* %185)
  br i1 %45, label %259, label %186

186:                                              ; preds = %183
  br i1 %64, label %247, label %187

187:                                              ; preds = %186
  br i1 %75, label %227, label %188

188:                                              ; preds = %187, %188
  %189 = phi i64 [ %224, %188 ], [ 0, %187 ]
  %190 = phi i64 [ %225, %188 ], [ %76, %187 ]
  %191 = getelementptr inbounds i16, i16* %184, i64 %189
  %192 = bitcast i16* %191 to <8 x i16>*
  %193 = load <8 x i16>, <8 x i16>* %192, align 2
  %194 = getelementptr inbounds i16, i16* %191, i64 8
  %195 = bitcast i16* %194 to <8 x i16>*
  %196 = load <8 x i16>, <8 x i16>* %195, align 2
  %197 = sext <8 x i16> %193 to <8 x i32>
  %198 = sext <8 x i16> %196 to <8 x i32>
  %199 = add nsw <8 x i32> %67, %197
  %200 = add nsw <8 x i32> %69, %198
  %201 = ashr <8 x i32> %199, %71
  %202 = ashr <8 x i32> %200, %73
  %203 = trunc <8 x i32> %201 to <8 x i16>
  %204 = trunc <8 x i32> %202 to <8 x i16>
  %205 = bitcast i16* %191 to <8 x i16>*
  store <8 x i16> %203, <8 x i16>* %205, align 2
  %206 = bitcast i16* %194 to <8 x i16>*
  store <8 x i16> %204, <8 x i16>* %206, align 2
  %207 = or i64 %189, 16
  %208 = getelementptr inbounds i16, i16* %184, i64 %207
  %209 = bitcast i16* %208 to <8 x i16>*
  %210 = load <8 x i16>, <8 x i16>* %209, align 2
  %211 = getelementptr inbounds i16, i16* %208, i64 8
  %212 = bitcast i16* %211 to <8 x i16>*
  %213 = load <8 x i16>, <8 x i16>* %212, align 2
  %214 = sext <8 x i16> %210 to <8 x i32>
  %215 = sext <8 x i16> %213 to <8 x i32>
  %216 = add nsw <8 x i32> %67, %214
  %217 = add nsw <8 x i32> %69, %215
  %218 = ashr <8 x i32> %216, %71
  %219 = ashr <8 x i32> %217, %73
  %220 = trunc <8 x i32> %218 to <8 x i16>
  %221 = trunc <8 x i32> %219 to <8 x i16>
  %222 = bitcast i16* %208 to <8 x i16>*
  store <8 x i16> %220, <8 x i16>* %222, align 2
  %223 = bitcast i16* %211 to <8 x i16>*
  store <8 x i16> %221, <8 x i16>* %223, align 2
  %224 = add i64 %189, 32
  %225 = add i64 %190, -2
  %226 = icmp eq i64 %225, 0
  br i1 %226, label %227, label %188, !llvm.loop !17

227:                                              ; preds = %188, %187
  %228 = phi i64 [ 0, %187 ], [ %224, %188 ]
  br i1 %77, label %246, label %229

229:                                              ; preds = %227
  %230 = getelementptr inbounds i16, i16* %184, i64 %228
  %231 = bitcast i16* %230 to <8 x i16>*
  %232 = load <8 x i16>, <8 x i16>* %231, align 2
  %233 = getelementptr inbounds i16, i16* %230, i64 8
  %234 = bitcast i16* %233 to <8 x i16>*
  %235 = load <8 x i16>, <8 x i16>* %234, align 2
  %236 = sext <8 x i16> %232 to <8 x i32>
  %237 = sext <8 x i16> %235 to <8 x i32>
  %238 = add nsw <8 x i32> %67, %236
  %239 = add nsw <8 x i32> %69, %237
  %240 = ashr <8 x i32> %238, %71
  %241 = ashr <8 x i32> %239, %73
  %242 = trunc <8 x i32> %240 to <8 x i16>
  %243 = trunc <8 x i32> %241 to <8 x i16>
  %244 = bitcast i16* %230 to <8 x i16>*
  store <8 x i16> %242, <8 x i16>* %244, align 2
  %245 = bitcast i16* %233 to <8 x i16>*
  store <8 x i16> %243, <8 x i16>* %245, align 2
  br label %246

246:                                              ; preds = %227, %229
  br i1 %78, label %259, label %247

247:                                              ; preds = %246, %186
  %248 = phi i64 [ 0, %186 ], [ %65, %246 ]
  br label %249

249:                                              ; preds = %247, %249
  %250 = phi i64 [ %257, %249 ], [ %248, %247 ]
  %251 = getelementptr inbounds i16, i16* %184, i64 %250
  %252 = load i16, i16* %251, align 2
  %253 = sext i16 %252 to i32
  %254 = add nsw i32 %40, %253
  %255 = ashr i32 %254, %21
  %256 = trunc i32 %255 to i16
  store i16 %256, i16* %251, align 2
  %257 = add nuw nsw i64 %250, 1
  %258 = icmp eq i64 %257, %46
  br i1 %258, label %259, label %249, !llvm.loop !18

259:                                              ; preds = %249, %246, %183
  %260 = add nuw nsw i64 %127, 1
  %261 = icmp eq i64 %260, %42
  br i1 %261, label %262, label %126

262:                                              ; preds = %259, %28, %107
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN7libgav13dsp12_GLOBAL__N_115TransformLoop_CILi8EshLNS0_11Transform1DE0EXadL_ZNS1_11DctDcOnly_CILi8EsLi4EEEvPvabibEEXadL_ZNS1_5Dct_CIsLi4EEEvS5_aEELb0EEEvNS_13TransformTypeENS_13TransformSizeEiS5_iiS5_(i8 zeroext, i8 zeroext, i32, i8*, i32, i32, i8* nocapture readonly) #0 {
  %8 = alloca [64 x i16], align 16
  %9 = zext i8 %1 to i64
  %10 = getelementptr inbounds [19 x i8], [19 x i8]* @_ZN7libgav115kTransformWidthE, i64 0, i64 %9
  %11 = load i8, i8* %10, align 1
  %12 = zext i8 %11 to i32
  %13 = getelementptr inbounds [19 x i8], [19 x i8]* @_ZN7libgav116kTransformHeightE, i64 0, i64 %9
  %14 = load i8, i8* %13, align 1
  %15 = bitcast i8* %3 to i16*
  %16 = zext i8 %0 to i32
  %17 = shl i32 1, %16
  %18 = and i32 %17, 33104
  %19 = icmp eq i32 %18, 0
  %20 = bitcast [64 x i16]* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 128, i8* nonnull %20) #4
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %20, i8 -86, i64 128, i1 false)
  %21 = icmp eq i8 %11, 0
  br i1 %21, label %43, label %22

22:                                               ; preds = %7
  %23 = zext i8 %11 to i64
  %24 = icmp eq i32 %2, 1
  %25 = getelementptr inbounds [64 x i16], [64 x i16]* %8, i64 0, i64 0
  %26 = getelementptr inbounds [64 x i16], [64 x i16]* %8, i64 0, i64 8
  %27 = icmp eq i8 %14, 0
  %28 = getelementptr inbounds i8, i8* %6, i64 4
  %29 = bitcast i8* %28 to i32*
  %30 = getelementptr inbounds i8, i8* %6, i64 8
  %31 = bitcast i8* %30 to i8**
  %32 = zext i8 %14 to i64
  %33 = sext i32 %5 to i64
  %34 = sext i32 %4 to i64
  %35 = zext i8 %11 to i64
  %36 = add nsw i64 %32, -1
  %37 = and i64 %32, 3
  %38 = icmp ult i64 %36, 3
  %39 = sub nsw i64 %32, %37
  %40 = icmp eq i64 %37, 0
  %41 = bitcast [64 x i16]* %8 to <8 x i16>*
  %42 = bitcast i16* %26 to <8 x i16>*
  br label %44

43:                                               ; preds = %104, %7
  call void @llvm.lifetime.end.p0i8(i64 128, i8* nonnull %20) #4
  ret void

44:                                               ; preds = %104, %22
  %45 = phi i64 [ 0, %22 ], [ %105, %104 ]
  %46 = phi i32 [ 0, %22 ], [ %106, %104 ]
  %47 = xor i32 %46, -1
  %48 = add nsw i32 %47, %12
  %49 = trunc i64 %45 to i32
  %50 = select i1 %19, i32 %49, i32 %48
  %51 = sext i32 %50 to i64
  %52 = getelementptr inbounds i16, i16* %15, i64 %51
  br i1 %38, label %78, label %53

53:                                               ; preds = %44, %53
  %54 = phi i64 [ %75, %53 ], [ 0, %44 ]
  %55 = phi i64 [ %76, %53 ], [ %39, %44 ]
  %56 = mul nuw nsw i64 %54, %23
  %57 = getelementptr inbounds i16, i16* %52, i64 %56
  %58 = load i16, i16* %57, align 2
  %59 = getelementptr inbounds [64 x i16], [64 x i16]* %8, i64 0, i64 %54
  store i16 %58, i16* %59, align 8
  %60 = or i64 %54, 1
  %61 = mul nuw nsw i64 %60, %23
  %62 = getelementptr inbounds i16, i16* %52, i64 %61
  %63 = load i16, i16* %62, align 2
  %64 = getelementptr inbounds [64 x i16], [64 x i16]* %8, i64 0, i64 %60
  store i16 %63, i16* %64, align 2
  %65 = or i64 %54, 2
  %66 = mul nuw nsw i64 %65, %23
  %67 = getelementptr inbounds i16, i16* %52, i64 %66
  %68 = load i16, i16* %67, align 2
  %69 = getelementptr inbounds [64 x i16], [64 x i16]* %8, i64 0, i64 %65
  store i16 %68, i16* %69, align 4
  %70 = or i64 %54, 3
  %71 = mul nuw nsw i64 %70, %23
  %72 = getelementptr inbounds i16, i16* %52, i64 %71
  %73 = load i16, i16* %72, align 2
  %74 = getelementptr inbounds [64 x i16], [64 x i16]* %8, i64 0, i64 %70
  store i16 %73, i16* %74, align 2
  %75 = add nuw nsw i64 %54, 4
  %76 = add i64 %55, -4
  %77 = icmp eq i64 %76, 0
  br i1 %77, label %78, label %53

78:                                               ; preds = %53, %44
  %79 = phi i64 [ 0, %44 ], [ %75, %53 ]
  br i1 %40, label %90, label %80

80:                                               ; preds = %78, %80
  %81 = phi i64 [ %87, %80 ], [ %79, %78 ]
  %82 = phi i64 [ %88, %80 ], [ %37, %78 ]
  %83 = mul nuw nsw i64 %81, %23
  %84 = getelementptr inbounds i16, i16* %52, i64 %83
  %85 = load i16, i16* %84, align 2
  %86 = getelementptr inbounds [64 x i16], [64 x i16]* %8, i64 0, i64 %81
  store i16 %85, i16* %86, align 2
  %87 = add nuw nsw i64 %81, 1
  %88 = add i64 %82, -1
  %89 = icmp eq i64 %88, 0
  br i1 %89, label %90, label %80, !llvm.loop !19

90:                                               ; preds = %80, %78
  br i1 %24, label %91, label %100

91:                                               ; preds = %90
  %92 = load i16, i16* %25, align 16
  %93 = sext i16 %92 to i32
  %94 = mul nsw i32 %93, 2896
  %95 = add nsw i32 %94, 2048
  %96 = lshr i32 %95, 12
  %97 = trunc i32 %96 to i16
  %98 = insertelement <8 x i16> undef, i16 %97, i32 0
  %99 = shufflevector <8 x i16> %98, <8 x i16> undef, <8 x i32> zeroinitializer
  store <8 x i16> %99, <8 x i16>* %41, align 16
  store <8 x i16> %99, <8 x i16>* %42, align 16
  br label %101

100:                                              ; preds = %90
  call fastcc void @_ZN7libgav13dsp12_GLOBAL__N_15Dct_CIsLi4EEEvPva(i8* nonnull %20)
  br label %101

101:                                              ; preds = %100, %91
  br i1 %27, label %104, label %102

102:                                              ; preds = %101
  %103 = add nsw i64 %45, %34
  br label %108

104:                                              ; preds = %108, %101
  %105 = add nuw nsw i64 %45, 1
  %106 = add nuw nsw i32 %46, 1
  %107 = icmp eq i64 %105, %35
  br i1 %107, label %43, label %44

108:                                              ; preds = %108, %102
  %109 = phi i64 [ 0, %102 ], [ %130, %108 ]
  %110 = add nsw i64 %109, %33
  %111 = getelementptr inbounds [64 x i16], [64 x i16]* %8, i64 0, i64 %109
  %112 = load i16, i16* %111, align 2
  %113 = sext i16 %112 to i32
  %114 = add nsw i32 %113, 8
  %115 = ashr i32 %114, 4
  %116 = load i32, i32* %29, align 4
  %117 = sext i32 %116 to i64
  %118 = mul nsw i64 %110, %117
  %119 = load i8*, i8** %31, align 8
  %120 = getelementptr inbounds i8, i8* %119, i64 %103
  %121 = getelementptr inbounds i8, i8* %120, i64 %118
  %122 = load i8, i8* %121, align 1
  %123 = zext i8 %122 to i32
  %124 = add nsw i32 %115, %123
  %125 = icmp slt i32 %124, 255
  %126 = select i1 %125, i32 %124, i32 255
  %127 = icmp sgt i32 %126, 0
  %128 = select i1 %127, i32 %126, i32 0
  %129 = trunc i32 %128 to i8
  store i8 %129, i8* %121, align 1
  %130 = add nuw nsw i64 %109, 1
  %131 = icmp eq i64 %130, %32
  br i1 %131, label %104, label %108
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN7libgav13dsp12_GLOBAL__N_115TransformLoop_CILi8EshLNS0_11Transform1DE0EXadL_ZNS1_11DctDcOnly_CILi8EsLi5EEEvPvabibEEXadL_ZNS1_5Dct_CIsLi5EEEvS5_aEELb1EEEvNS_13TransformTypeENS_13TransformSizeEiS5_iiS5_(i8 zeroext, i8 zeroext, i32, i8*, i32, i32, i8* nocapture readnone) #0 {
  %8 = zext i8 %1 to i64
  %9 = getelementptr inbounds [19 x i8], [19 x i8]* @_ZN7libgav115kTransformWidthE, i64 0, i64 %8
  %10 = load i8, i8* %9, align 1
  %11 = zext i8 %10 to i32
  %12 = getelementptr inbounds [19 x i8], [19 x i8]* @_ZN7libgav119kTransformWidthLog2E, i64 0, i64 %8
  %13 = load i8, i8* %12, align 1
  %14 = zext i8 %13 to i32
  %15 = getelementptr inbounds [19 x i8], [19 x i8]* @_ZN7libgav120kTransformHeightLog2E, i64 0, i64 %8
  %16 = load i8, i8* %15, align 1
  %17 = zext i8 %16 to i32
  %18 = bitcast i8* %3 to i16*
  %19 = getelementptr inbounds [19 x i8], [19 x i8]* @_ZN7libgav13dsp12_GLOBAL__N_118kTransformRowShiftE, i64 0, i64 %8
  %20 = load i8, i8* %19, align 1
  %21 = zext i8 %20 to i32
  %22 = sub nsw i32 %14, %17
  %23 = icmp slt i32 %22, 0
  %24 = sub nsw i32 0, %22
  %25 = select i1 %23, i32 %24, i32 %22
  %26 = icmp eq i32 %25, 1
  %27 = icmp eq i32 %2, 1
  br i1 %27, label %79, label %28

28:                                               ; preds = %7
  %29 = icmp sgt i32 %2, 0
  br i1 %29, label %30, label %266

30:                                               ; preds = %28
  %31 = icmp ult i32 %11, 32
  %32 = select i1 %31, i32 %11, i32 32
  %33 = icmp slt i32 %32, 1
  %34 = zext i8 %10 to i64
  %35 = lshr i64 524276, %8
  %36 = and i64 %35, 1
  %37 = icmp eq i64 %36, 0
  %38 = icmp eq i8 %10, 0
  %39 = shl i32 1, %21
  %40 = ashr i32 %39, 1
  %41 = zext i32 %32 to i64
  %42 = zext i32 %2 to i64
  %43 = xor i1 %26, true
  %44 = or i1 %33, %43
  %45 = or i1 %37, %38
  %46 = zext i8 %10 to i64
  %47 = icmp ugt i64 %41, 1
  %48 = select i1 %47, i64 %41, i64 1
  %49 = and i64 %48, 56
  %50 = add nsw i64 %49, -8
  %51 = lshr exact i64 %50, 3
  %52 = add nuw nsw i64 %51, 1
  %53 = and i64 %34, 240
  %54 = add nsw i64 %53, -16
  %55 = lshr exact i64 %54, 4
  %56 = add nuw nsw i64 %55, 1
  %57 = icmp ult i64 %48, 8
  %58 = and i64 %48, 56
  %59 = and i64 %52, 1
  %60 = icmp eq i64 %50, 0
  %61 = sub nuw nsw i64 %52, %59
  %62 = icmp eq i64 %59, 0
  %63 = icmp eq i64 %48, %58
  %64 = icmp ult i8 %10, 16
  %65 = and i64 %46, 240
  %66 = insertelement <8 x i32> undef, i32 %40, i32 0
  %67 = shufflevector <8 x i32> %66, <8 x i32> undef, <8 x i32> zeroinitializer
  %68 = insertelement <8 x i32> undef, i32 %40, i32 0
  %69 = shufflevector <8 x i32> %68, <8 x i32> undef, <8 x i32> zeroinitializer
  %70 = insertelement <8 x i32> undef, i32 %21, i32 0
  %71 = shufflevector <8 x i32> %70, <8 x i32> undef, <8 x i32> zeroinitializer
  %72 = insertelement <8 x i32> undef, i32 %21, i32 0
  %73 = shufflevector <8 x i32> %72, <8 x i32> undef, <8 x i32> zeroinitializer
  %74 = and i64 %56, 1
  %75 = icmp eq i64 %54, 0
  %76 = sub nuw nsw i64 %56, %74
  %77 = icmp eq i64 %74, 0
  %78 = icmp eq i64 %65, %46
  br label %130

79:                                               ; preds = %7
  %80 = load i16, i16* %18, align 2
  br i1 %26, label %81, label %87

81:                                               ; preds = %79
  %82 = sext i16 %80 to i32
  %83 = mul nsw i32 %82, 2896
  %84 = add nsw i32 %83, 2048
  %85 = lshr i32 %84, 12
  %86 = trunc i32 %85 to i16
  store i16 %86, i16* %18, align 2
  br label %87

87:                                               ; preds = %81, %79
  %88 = phi i16 [ %86, %81 ], [ %80, %79 ]
  %89 = sext i16 %88 to i32
  %90 = mul nsw i32 %89, 2896
  %91 = add nsw i32 %90, 2048
  %92 = lshr i32 %91, 12
  %93 = trunc i32 %92 to i16
  store i16 %93, i16* %18, align 2
  %94 = getelementptr inbounds i8, i8* %3, i64 2
  %95 = bitcast i8* %94 to i16*
  store i16 %93, i16* %95, align 2
  %96 = lshr i64 524276, %8
  %97 = and i64 %96, 1
  %98 = icmp eq i64 %97, 0
  br i1 %98, label %107, label %99

99:                                               ; preds = %87
  %100 = shl i32 %92, 16
  %101 = ashr exact i32 %100, 16
  %102 = shl i32 1, %21
  %103 = ashr i32 %102, 1
  %104 = add nsw i32 %101, %103
  %105 = ashr i32 %104, %21
  %106 = trunc i32 %105 to i16
  store i16 %106, i16* %18, align 2
  br label %107

107:                                              ; preds = %87, %99
  %108 = phi i16 [ %106, %99 ], [ %93, %87 ]
  %109 = insertelement <8 x i16> undef, i16 %108, i32 0
  %110 = shufflevector <8 x i16> %109, <8 x i16> undef, <8 x i32> zeroinitializer
  %111 = bitcast i8* %94 to <8 x i16>*
  store <8 x i16> %110, <8 x i16>* %111, align 2
  %112 = getelementptr inbounds i8, i8* %3, i64 18
  %113 = bitcast i8* %112 to <8 x i16>*
  store <8 x i16> %110, <8 x i16>* %113, align 2
  %114 = getelementptr inbounds i8, i8* %3, i64 34
  %115 = bitcast i8* %114 to <8 x i16>*
  store <8 x i16> %110, <8 x i16>* %115, align 2
  %116 = getelementptr inbounds i8, i8* %3, i64 50
  %117 = bitcast i8* %116 to i16*
  store i16 %108, i16* %117, align 2
  %118 = getelementptr inbounds i8, i8* %3, i64 52
  %119 = bitcast i8* %118 to i16*
  store i16 %108, i16* %119, align 2
  %120 = getelementptr inbounds i8, i8* %3, i64 54
  %121 = bitcast i8* %120 to i16*
  store i16 %108, i16* %121, align 2
  %122 = getelementptr inbounds i8, i8* %3, i64 56
  %123 = bitcast i8* %122 to i16*
  store i16 %108, i16* %123, align 2
  %124 = getelementptr inbounds i8, i8* %3, i64 58
  %125 = bitcast i8* %124 to i16*
  store i16 %108, i16* %125, align 2
  %126 = getelementptr inbounds i8, i8* %3, i64 60
  %127 = bitcast i8* %126 to i16*
  store i16 %108, i16* %127, align 2
  %128 = getelementptr inbounds i8, i8* %3, i64 62
  %129 = bitcast i8* %128 to i16*
  store i16 %108, i16* %129, align 2
  br label %266

130:                                              ; preds = %263, %30
  %131 = phi i64 [ 0, %30 ], [ %264, %263 ]
  %132 = mul nuw nsw i64 %131, %34
  br i1 %44, label %187, label %133

133:                                              ; preds = %130
  %134 = getelementptr inbounds i16, i16* %18, i64 %132
  br i1 %57, label %174, label %135

135:                                              ; preds = %133
  br i1 %60, label %161, label %136

136:                                              ; preds = %135, %136
  %137 = phi i64 [ %158, %136 ], [ 0, %135 ]
  %138 = phi i64 [ %159, %136 ], [ %61, %135 ]
  %139 = getelementptr inbounds i16, i16* %134, i64 %137
  %140 = bitcast i16* %139 to <8 x i16>*
  %141 = load <8 x i16>, <8 x i16>* %140, align 2
  %142 = sext <8 x i16> %141 to <8 x i32>
  %143 = mul nsw <8 x i32> %142, <i32 2896, i32 2896, i32 2896, i32 2896, i32 2896, i32 2896, i32 2896, i32 2896>
  %144 = add nsw <8 x i32> %143, <i32 2048, i32 2048, i32 2048, i32 2048, i32 2048, i32 2048, i32 2048, i32 2048>
  %145 = lshr <8 x i32> %144, <i32 12, i32 12, i32 12, i32 12, i32 12, i32 12, i32 12, i32 12>
  %146 = trunc <8 x i32> %145 to <8 x i16>
  %147 = bitcast i16* %139 to <8 x i16>*
  store <8 x i16> %146, <8 x i16>* %147, align 2
  %148 = or i64 %137, 8
  %149 = getelementptr inbounds i16, i16* %134, i64 %148
  %150 = bitcast i16* %149 to <8 x i16>*
  %151 = load <8 x i16>, <8 x i16>* %150, align 2
  %152 = sext <8 x i16> %151 to <8 x i32>
  %153 = mul nsw <8 x i32> %152, <i32 2896, i32 2896, i32 2896, i32 2896, i32 2896, i32 2896, i32 2896, i32 2896>
  %154 = add nsw <8 x i32> %153, <i32 2048, i32 2048, i32 2048, i32 2048, i32 2048, i32 2048, i32 2048, i32 2048>
  %155 = lshr <8 x i32> %154, <i32 12, i32 12, i32 12, i32 12, i32 12, i32 12, i32 12, i32 12>
  %156 = trunc <8 x i32> %155 to <8 x i16>
  %157 = bitcast i16* %149 to <8 x i16>*
  store <8 x i16> %156, <8 x i16>* %157, align 2
  %158 = add i64 %137, 16
  %159 = add i64 %138, -2
  %160 = icmp eq i64 %159, 0
  br i1 %160, label %161, label %136, !llvm.loop !20

161:                                              ; preds = %136, %135
  %162 = phi i64 [ 0, %135 ], [ %158, %136 ]
  br i1 %62, label %173, label %163

163:                                              ; preds = %161
  %164 = getelementptr inbounds i16, i16* %134, i64 %162
  %165 = bitcast i16* %164 to <8 x i16>*
  %166 = load <8 x i16>, <8 x i16>* %165, align 2
  %167 = sext <8 x i16> %166 to <8 x i32>
  %168 = mul nsw <8 x i32> %167, <i32 2896, i32 2896, i32 2896, i32 2896, i32 2896, i32 2896, i32 2896, i32 2896>
  %169 = add nsw <8 x i32> %168, <i32 2048, i32 2048, i32 2048, i32 2048, i32 2048, i32 2048, i32 2048, i32 2048>
  %170 = lshr <8 x i32> %169, <i32 12, i32 12, i32 12, i32 12, i32 12, i32 12, i32 12, i32 12>
  %171 = trunc <8 x i32> %170 to <8 x i16>
  %172 = bitcast i16* %164 to <8 x i16>*
  store <8 x i16> %171, <8 x i16>* %172, align 2
  br label %173

173:                                              ; preds = %161, %163
  br i1 %63, label %187, label %174

174:                                              ; preds = %173, %133
  %175 = phi i64 [ 0, %133 ], [ %58, %173 ]
  br label %176

176:                                              ; preds = %174, %176
  %177 = phi i64 [ %185, %176 ], [ %175, %174 ]
  %178 = getelementptr inbounds i16, i16* %134, i64 %177
  %179 = load i16, i16* %178, align 2
  %180 = sext i16 %179 to i32
  %181 = mul nsw i32 %180, 2896
  %182 = add nsw i32 %181, 2048
  %183 = lshr i32 %182, 12
  %184 = trunc i32 %183 to i16
  store i16 %184, i16* %178, align 2
  %185 = add nuw nsw i64 %177, 1
  %186 = icmp ult i64 %185, %41
  br i1 %186, label %176, label %187, !llvm.loop !21

187:                                              ; preds = %176, %173, %130
  %188 = getelementptr inbounds i16, i16* %18, i64 %132
  %189 = bitcast i16* %188 to i8*
  tail call fastcc void @_ZN7libgav13dsp12_GLOBAL__N_15Dct_CIsLi5EEEvPva(i8* %189)
  br i1 %45, label %263, label %190

190:                                              ; preds = %187
  br i1 %64, label %251, label %191

191:                                              ; preds = %190
  br i1 %75, label %231, label %192

192:                                              ; preds = %191, %192
  %193 = phi i64 [ %228, %192 ], [ 0, %191 ]
  %194 = phi i64 [ %229, %192 ], [ %76, %191 ]
  %195 = getelementptr inbounds i16, i16* %188, i64 %193
  %196 = bitcast i16* %195 to <8 x i16>*
  %197 = load <8 x i16>, <8 x i16>* %196, align 2
  %198 = getelementptr inbounds i16, i16* %195, i64 8
  %199 = bitcast i16* %198 to <8 x i16>*
  %200 = load <8 x i16>, <8 x i16>* %199, align 2
  %201 = sext <8 x i16> %197 to <8 x i32>
  %202 = sext <8 x i16> %200 to <8 x i32>
  %203 = add nsw <8 x i32> %67, %201
  %204 = add nsw <8 x i32> %69, %202
  %205 = ashr <8 x i32> %203, %71
  %206 = ashr <8 x i32> %204, %73
  %207 = trunc <8 x i32> %205 to <8 x i16>
  %208 = trunc <8 x i32> %206 to <8 x i16>
  %209 = bitcast i16* %195 to <8 x i16>*
  store <8 x i16> %207, <8 x i16>* %209, align 2
  %210 = bitcast i16* %198 to <8 x i16>*
  store <8 x i16> %208, <8 x i16>* %210, align 2
  %211 = or i64 %193, 16
  %212 = getelementptr inbounds i16, i16* %188, i64 %211
  %213 = bitcast i16* %212 to <8 x i16>*
  %214 = load <8 x i16>, <8 x i16>* %213, align 2
  %215 = getelementptr inbounds i16, i16* %212, i64 8
  %216 = bitcast i16* %215 to <8 x i16>*
  %217 = load <8 x i16>, <8 x i16>* %216, align 2
  %218 = sext <8 x i16> %214 to <8 x i32>
  %219 = sext <8 x i16> %217 to <8 x i32>
  %220 = add nsw <8 x i32> %67, %218
  %221 = add nsw <8 x i32> %69, %219
  %222 = ashr <8 x i32> %220, %71
  %223 = ashr <8 x i32> %221, %73
  %224 = trunc <8 x i32> %222 to <8 x i16>
  %225 = trunc <8 x i32> %223 to <8 x i16>
  %226 = bitcast i16* %212 to <8 x i16>*
  store <8 x i16> %224, <8 x i16>* %226, align 2
  %227 = bitcast i16* %215 to <8 x i16>*
  store <8 x i16> %225, <8 x i16>* %227, align 2
  %228 = add i64 %193, 32
  %229 = add i64 %194, -2
  %230 = icmp eq i64 %229, 0
  br i1 %230, label %231, label %192, !llvm.loop !22

231:                                              ; preds = %192, %191
  %232 = phi i64 [ 0, %191 ], [ %228, %192 ]
  br i1 %77, label %250, label %233

233:                                              ; preds = %231
  %234 = getelementptr inbounds i16, i16* %188, i64 %232
  %235 = bitcast i16* %234 to <8 x i16>*
  %236 = load <8 x i16>, <8 x i16>* %235, align 2
  %237 = getelementptr inbounds i16, i16* %234, i64 8
  %238 = bitcast i16* %237 to <8 x i16>*
  %239 = load <8 x i16>, <8 x i16>* %238, align 2
  %240 = sext <8 x i16> %236 to <8 x i32>
  %241 = sext <8 x i16> %239 to <8 x i32>
  %242 = add nsw <8 x i32> %67, %240
  %243 = add nsw <8 x i32> %69, %241
  %244 = ashr <8 x i32> %242, %71
  %245 = ashr <8 x i32> %243, %73
  %246 = trunc <8 x i32> %244 to <8 x i16>
  %247 = trunc <8 x i32> %245 to <8 x i16>
  %248 = bitcast i16* %234 to <8 x i16>*
  store <8 x i16> %246, <8 x i16>* %248, align 2
  %249 = bitcast i16* %237 to <8 x i16>*
  store <8 x i16> %247, <8 x i16>* %249, align 2
  br label %250

250:                                              ; preds = %231, %233
  br i1 %78, label %263, label %251

251:                                              ; preds = %250, %190
  %252 = phi i64 [ 0, %190 ], [ %65, %250 ]
  br label %253

253:                                              ; preds = %251, %253
  %254 = phi i64 [ %261, %253 ], [ %252, %251 ]
  %255 = getelementptr inbounds i16, i16* %188, i64 %254
  %256 = load i16, i16* %255, align 2
  %257 = sext i16 %256 to i32
  %258 = add nsw i32 %40, %257
  %259 = ashr i32 %258, %21
  %260 = trunc i32 %259 to i16
  store i16 %260, i16* %255, align 2
  %261 = add nuw nsw i64 %254, 1
  %262 = icmp eq i64 %261, %46
  br i1 %262, label %263, label %253, !llvm.loop !23

263:                                              ; preds = %253, %250, %187
  %264 = add nuw nsw i64 %131, 1
  %265 = icmp eq i64 %264, %42
  br i1 %265, label %266, label %130

266:                                              ; preds = %263, %28, %107
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN7libgav13dsp12_GLOBAL__N_115TransformLoop_CILi8EshLNS0_11Transform1DE0EXadL_ZNS1_11DctDcOnly_CILi8EsLi5EEEvPvabibEEXadL_ZNS1_5Dct_CIsLi5EEEvS5_aEELb0EEEvNS_13TransformTypeENS_13TransformSizeEiS5_iiS5_(i8 zeroext, i8 zeroext, i32, i8*, i32, i32, i8* nocapture readonly) #0 {
  %8 = alloca [64 x i16], align 16
  %9 = zext i8 %1 to i64
  %10 = getelementptr inbounds [19 x i8], [19 x i8]* @_ZN7libgav115kTransformWidthE, i64 0, i64 %9
  %11 = load i8, i8* %10, align 1
  %12 = zext i8 %11 to i32
  %13 = getelementptr inbounds [19 x i8], [19 x i8]* @_ZN7libgav116kTransformHeightE, i64 0, i64 %9
  %14 = load i8, i8* %13, align 1
  %15 = bitcast i8* %3 to i16*
  %16 = zext i8 %0 to i32
  %17 = shl i32 1, %16
  %18 = and i32 %17, 33104
  %19 = icmp eq i32 %18, 0
  %20 = bitcast [64 x i16]* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 128, i8* nonnull %20) #4
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %20, i8 -86, i64 128, i1 false)
  %21 = icmp eq i8 %11, 0
  br i1 %21, label %47, label %22

22:                                               ; preds = %7
  %23 = zext i8 %11 to i64
  %24 = icmp eq i32 %2, 1
  %25 = getelementptr inbounds [64 x i16], [64 x i16]* %8, i64 0, i64 0
  %26 = getelementptr inbounds [64 x i16], [64 x i16]* %8, i64 0, i64 8
  %27 = getelementptr inbounds [64 x i16], [64 x i16]* %8, i64 0, i64 16
  %28 = getelementptr inbounds [64 x i16], [64 x i16]* %8, i64 0, i64 24
  %29 = icmp eq i8 %14, 0
  %30 = getelementptr inbounds i8, i8* %6, i64 4
  %31 = bitcast i8* %30 to i32*
  %32 = getelementptr inbounds i8, i8* %6, i64 8
  %33 = bitcast i8* %32 to i8**
  %34 = zext i8 %14 to i64
  %35 = sext i32 %5 to i64
  %36 = sext i32 %4 to i64
  %37 = zext i8 %11 to i64
  %38 = add nsw i64 %34, -1
  %39 = and i64 %34, 3
  %40 = icmp ult i64 %38, 3
  %41 = sub nsw i64 %34, %39
  %42 = icmp eq i64 %39, 0
  %43 = bitcast [64 x i16]* %8 to <8 x i16>*
  %44 = bitcast i16* %26 to <8 x i16>*
  %45 = bitcast i16* %27 to <8 x i16>*
  %46 = bitcast i16* %28 to <8 x i16>*
  br label %48

47:                                               ; preds = %108, %7
  call void @llvm.lifetime.end.p0i8(i64 128, i8* nonnull %20) #4
  ret void

48:                                               ; preds = %108, %22
  %49 = phi i64 [ 0, %22 ], [ %109, %108 ]
  %50 = phi i32 [ 0, %22 ], [ %110, %108 ]
  %51 = xor i32 %50, -1
  %52 = add nsw i32 %51, %12
  %53 = trunc i64 %49 to i32
  %54 = select i1 %19, i32 %53, i32 %52
  %55 = sext i32 %54 to i64
  %56 = getelementptr inbounds i16, i16* %15, i64 %55
  br i1 %40, label %82, label %57

57:                                               ; preds = %48, %57
  %58 = phi i64 [ %79, %57 ], [ 0, %48 ]
  %59 = phi i64 [ %80, %57 ], [ %41, %48 ]
  %60 = mul nuw nsw i64 %58, %23
  %61 = getelementptr inbounds i16, i16* %56, i64 %60
  %62 = load i16, i16* %61, align 2
  %63 = getelementptr inbounds [64 x i16], [64 x i16]* %8, i64 0, i64 %58
  store i16 %62, i16* %63, align 8
  %64 = or i64 %58, 1
  %65 = mul nuw nsw i64 %64, %23
  %66 = getelementptr inbounds i16, i16* %56, i64 %65
  %67 = load i16, i16* %66, align 2
  %68 = getelementptr inbounds [64 x i16], [64 x i16]* %8, i64 0, i64 %64
  store i16 %67, i16* %68, align 2
  %69 = or i64 %58, 2
  %70 = mul nuw nsw i64 %69, %23
  %71 = getelementptr inbounds i16, i16* %56, i64 %70
  %72 = load i16, i16* %71, align 2
  %73 = getelementptr inbounds [64 x i16], [64 x i16]* %8, i64 0, i64 %69
  store i16 %72, i16* %73, align 4
  %74 = or i64 %58, 3
  %75 = mul nuw nsw i64 %74, %23
  %76 = getelementptr inbounds i16, i16* %56, i64 %75
  %77 = load i16, i16* %76, align 2
  %78 = getelementptr inbounds [64 x i16], [64 x i16]* %8, i64 0, i64 %74
  store i16 %77, i16* %78, align 2
  %79 = add nuw nsw i64 %58, 4
  %80 = add i64 %59, -4
  %81 = icmp eq i64 %80, 0
  br i1 %81, label %82, label %57

82:                                               ; preds = %57, %48
  %83 = phi i64 [ 0, %48 ], [ %79, %57 ]
  br i1 %42, label %94, label %84

84:                                               ; preds = %82, %84
  %85 = phi i64 [ %91, %84 ], [ %83, %82 ]
  %86 = phi i64 [ %92, %84 ], [ %39, %82 ]
  %87 = mul nuw nsw i64 %85, %23
  %88 = getelementptr inbounds i16, i16* %56, i64 %87
  %89 = load i16, i16* %88, align 2
  %90 = getelementptr inbounds [64 x i16], [64 x i16]* %8, i64 0, i64 %85
  store i16 %89, i16* %90, align 2
  %91 = add nuw nsw i64 %85, 1
  %92 = add i64 %86, -1
  %93 = icmp eq i64 %92, 0
  br i1 %93, label %94, label %84, !llvm.loop !24

94:                                               ; preds = %84, %82
  br i1 %24, label %95, label %104

95:                                               ; preds = %94
  %96 = load i16, i16* %25, align 16
  %97 = sext i16 %96 to i32
  %98 = mul nsw i32 %97, 2896
  %99 = add nsw i32 %98, 2048
  %100 = lshr i32 %99, 12
  %101 = trunc i32 %100 to i16
  %102 = insertelement <8 x i16> undef, i16 %101, i32 0
  %103 = shufflevector <8 x i16> %102, <8 x i16> undef, <8 x i32> zeroinitializer
  store <8 x i16> %103, <8 x i16>* %43, align 16
  store <8 x i16> %103, <8 x i16>* %44, align 16
  store <8 x i16> %103, <8 x i16>* %45, align 16
  store <8 x i16> %103, <8 x i16>* %46, align 16
  br label %105

104:                                              ; preds = %94
  call fastcc void @_ZN7libgav13dsp12_GLOBAL__N_15Dct_CIsLi5EEEvPva(i8* nonnull %20)
  br label %105

105:                                              ; preds = %104, %95
  br i1 %29, label %108, label %106

106:                                              ; preds = %105
  %107 = add nsw i64 %49, %36
  br label %112

108:                                              ; preds = %112, %105
  %109 = add nuw nsw i64 %49, 1
  %110 = add nuw nsw i32 %50, 1
  %111 = icmp eq i64 %109, %37
  br i1 %111, label %47, label %48

112:                                              ; preds = %112, %106
  %113 = phi i64 [ 0, %106 ], [ %134, %112 ]
  %114 = add nsw i64 %113, %35
  %115 = getelementptr inbounds [64 x i16], [64 x i16]* %8, i64 0, i64 %113
  %116 = load i16, i16* %115, align 2
  %117 = sext i16 %116 to i32
  %118 = add nsw i32 %117, 8
  %119 = ashr i32 %118, 4
  %120 = load i32, i32* %31, align 4
  %121 = sext i32 %120 to i64
  %122 = mul nsw i64 %114, %121
  %123 = load i8*, i8** %33, align 8
  %124 = getelementptr inbounds i8, i8* %123, i64 %107
  %125 = getelementptr inbounds i8, i8* %124, i64 %122
  %126 = load i8, i8* %125, align 1
  %127 = zext i8 %126 to i32
  %128 = add nsw i32 %119, %127
  %129 = icmp slt i32 %128, 255
  %130 = select i1 %129, i32 %128, i32 255
  %131 = icmp sgt i32 %130, 0
  %132 = select i1 %131, i32 %130, i32 0
  %133 = trunc i32 %132 to i8
  store i8 %133, i8* %125, align 1
  %134 = add nuw nsw i64 %113, 1
  %135 = icmp eq i64 %134, %34
  br i1 %135, label %108, label %112
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN7libgav13dsp12_GLOBAL__N_115TransformLoop_CILi8EshLNS0_11Transform1DE0EXadL_ZNS1_11DctDcOnly_CILi8EsLi6EEEvPvabibEEXadL_ZNS1_5Dct_CIsLi6EEEvS5_aEELb1EEEvNS_13TransformTypeENS_13TransformSizeEiS5_iiS5_(i8 zeroext, i8 zeroext, i32, i8*, i32, i32, i8* nocapture readnone) #0 {
  %8 = zext i8 %1 to i64
  %9 = getelementptr inbounds [19 x i8], [19 x i8]* @_ZN7libgav115kTransformWidthE, i64 0, i64 %8
  %10 = load i8, i8* %9, align 1
  %11 = zext i8 %10 to i32
  %12 = getelementptr inbounds [19 x i8], [19 x i8]* @_ZN7libgav119kTransformWidthLog2E, i64 0, i64 %8
  %13 = load i8, i8* %12, align 1
  %14 = zext i8 %13 to i32
  %15 = getelementptr inbounds [19 x i8], [19 x i8]* @_ZN7libgav120kTransformHeightLog2E, i64 0, i64 %8
  %16 = load i8, i8* %15, align 1
  %17 = zext i8 %16 to i32
  %18 = bitcast i8* %3 to i16*
  %19 = getelementptr inbounds [19 x i8], [19 x i8]* @_ZN7libgav13dsp12_GLOBAL__N_118kTransformRowShiftE, i64 0, i64 %8
  %20 = load i8, i8* %19, align 1
  %21 = zext i8 %20 to i32
  %22 = sub nsw i32 %14, %17
  %23 = icmp slt i32 %22, 0
  %24 = sub nsw i32 0, %22
  %25 = select i1 %23, i32 %24, i32 %22
  %26 = icmp eq i32 %25, 1
  %27 = icmp eq i32 %2, 1
  br i1 %27, label %79, label %28

28:                                               ; preds = %7
  %29 = icmp sgt i32 %2, 0
  br i1 %29, label %30, label %253

30:                                               ; preds = %28
  %31 = icmp ult i32 %11, 32
  %32 = select i1 %31, i32 %11, i32 32
  %33 = icmp slt i32 %32, 1
  %34 = zext i8 %10 to i64
  %35 = lshr i64 524276, %8
  %36 = and i64 %35, 1
  %37 = icmp eq i64 %36, 0
  %38 = icmp eq i8 %10, 0
  %39 = shl i32 1, %21
  %40 = ashr i32 %39, 1
  %41 = zext i32 %32 to i64
  %42 = zext i32 %2 to i64
  %43 = xor i1 %26, true
  %44 = or i1 %33, %43
  %45 = or i1 %37, %38
  %46 = zext i8 %10 to i64
  %47 = icmp ugt i64 %41, 1
  %48 = select i1 %47, i64 %41, i64 1
  %49 = and i64 %48, 56
  %50 = add nsw i64 %49, -8
  %51 = lshr exact i64 %50, 3
  %52 = add nuw nsw i64 %51, 1
  %53 = and i64 %34, 240
  %54 = add nsw i64 %53, -16
  %55 = lshr exact i64 %54, 4
  %56 = add nuw nsw i64 %55, 1
  %57 = icmp ult i64 %48, 8
  %58 = and i64 %48, 56
  %59 = and i64 %52, 1
  %60 = icmp eq i64 %50, 0
  %61 = sub nuw nsw i64 %52, %59
  %62 = icmp eq i64 %59, 0
  %63 = icmp eq i64 %48, %58
  %64 = icmp ult i8 %10, 16
  %65 = and i64 %46, 240
  %66 = insertelement <8 x i32> undef, i32 %40, i32 0
  %67 = shufflevector <8 x i32> %66, <8 x i32> undef, <8 x i32> zeroinitializer
  %68 = insertelement <8 x i32> undef, i32 %40, i32 0
  %69 = shufflevector <8 x i32> %68, <8 x i32> undef, <8 x i32> zeroinitializer
  %70 = insertelement <8 x i32> undef, i32 %21, i32 0
  %71 = shufflevector <8 x i32> %70, <8 x i32> undef, <8 x i32> zeroinitializer
  %72 = insertelement <8 x i32> undef, i32 %21, i32 0
  %73 = shufflevector <8 x i32> %72, <8 x i32> undef, <8 x i32> zeroinitializer
  %74 = and i64 %56, 1
  %75 = icmp eq i64 %54, 0
  %76 = sub nuw nsw i64 %56, %74
  %77 = icmp eq i64 %74, 0
  %78 = icmp eq i64 %65, %46
  br label %117

79:                                               ; preds = %7
  %80 = load i16, i16* %18, align 2
  br i1 %26, label %81, label %87

81:                                               ; preds = %79
  %82 = sext i16 %80 to i32
  %83 = mul nsw i32 %82, 2896
  %84 = add nsw i32 %83, 2048
  %85 = lshr i32 %84, 12
  %86 = trunc i32 %85 to i16
  store i16 %86, i16* %18, align 2
  br label %87

87:                                               ; preds = %81, %79
  %88 = phi i16 [ %86, %81 ], [ %80, %79 ]
  %89 = sext i16 %88 to i32
  %90 = mul nsw i32 %89, 2896
  %91 = add nsw i32 %90, 2048
  %92 = lshr i32 %91, 12
  %93 = trunc i32 %92 to i16
  store i16 %93, i16* %18, align 2
  %94 = getelementptr inbounds i8, i8* %3, i64 2
  %95 = bitcast i8* %94 to i16*
  store i16 %93, i16* %95, align 2
  %96 = lshr i64 524276, %8
  %97 = and i64 %96, 1
  %98 = icmp eq i64 %97, 0
  br i1 %98, label %107, label %99

99:                                               ; preds = %87
  %100 = shl i32 %92, 16
  %101 = ashr exact i32 %100, 16
  %102 = shl i32 1, %21
  %103 = ashr i32 %102, 1
  %104 = add nsw i32 %101, %103
  %105 = ashr i32 %104, %21
  %106 = trunc i32 %105 to i16
  store i16 %106, i16* %18, align 2
  br label %107

107:                                              ; preds = %87, %99
  %108 = phi i16 [ %106, %99 ], [ %93, %87 ]
  store i16 %108, i16* %95, align 2
  %109 = getelementptr inbounds i8, i8* %3, i64 4
  %110 = bitcast i8* %109 to i16*
  store i16 %108, i16* %110, align 2
  br label %111

111:                                              ; preds = %254, %107
  %112 = phi i64 [ 3, %107 ], [ %262, %254 ]
  %113 = load i16, i16* %18, align 2
  %114 = getelementptr inbounds i16, i16* %18, i64 %112
  store i16 %113, i16* %114, align 2
  %115 = add nuw nsw i64 %112, 1
  %116 = icmp eq i64 %115, 64
  br i1 %116, label %253, label %254

117:                                              ; preds = %250, %30
  %118 = phi i64 [ 0, %30 ], [ %251, %250 ]
  %119 = mul nuw nsw i64 %118, %34
  br i1 %44, label %174, label %120

120:                                              ; preds = %117
  %121 = getelementptr inbounds i16, i16* %18, i64 %119
  br i1 %57, label %161, label %122

122:                                              ; preds = %120
  br i1 %60, label %148, label %123

123:                                              ; preds = %122, %123
  %124 = phi i64 [ %145, %123 ], [ 0, %122 ]
  %125 = phi i64 [ %146, %123 ], [ %61, %122 ]
  %126 = getelementptr inbounds i16, i16* %121, i64 %124
  %127 = bitcast i16* %126 to <8 x i16>*
  %128 = load <8 x i16>, <8 x i16>* %127, align 2
  %129 = sext <8 x i16> %128 to <8 x i32>
  %130 = mul nsw <8 x i32> %129, <i32 2896, i32 2896, i32 2896, i32 2896, i32 2896, i32 2896, i32 2896, i32 2896>
  %131 = add nsw <8 x i32> %130, <i32 2048, i32 2048, i32 2048, i32 2048, i32 2048, i32 2048, i32 2048, i32 2048>
  %132 = lshr <8 x i32> %131, <i32 12, i32 12, i32 12, i32 12, i32 12, i32 12, i32 12, i32 12>
  %133 = trunc <8 x i32> %132 to <8 x i16>
  %134 = bitcast i16* %126 to <8 x i16>*
  store <8 x i16> %133, <8 x i16>* %134, align 2
  %135 = or i64 %124, 8
  %136 = getelementptr inbounds i16, i16* %121, i64 %135
  %137 = bitcast i16* %136 to <8 x i16>*
  %138 = load <8 x i16>, <8 x i16>* %137, align 2
  %139 = sext <8 x i16> %138 to <8 x i32>
  %140 = mul nsw <8 x i32> %139, <i32 2896, i32 2896, i32 2896, i32 2896, i32 2896, i32 2896, i32 2896, i32 2896>
  %141 = add nsw <8 x i32> %140, <i32 2048, i32 2048, i32 2048, i32 2048, i32 2048, i32 2048, i32 2048, i32 2048>
  %142 = lshr <8 x i32> %141, <i32 12, i32 12, i32 12, i32 12, i32 12, i32 12, i32 12, i32 12>
  %143 = trunc <8 x i32> %142 to <8 x i16>
  %144 = bitcast i16* %136 to <8 x i16>*
  store <8 x i16> %143, <8 x i16>* %144, align 2
  %145 = add i64 %124, 16
  %146 = add i64 %125, -2
  %147 = icmp eq i64 %146, 0
  br i1 %147, label %148, label %123, !llvm.loop !25

148:                                              ; preds = %123, %122
  %149 = phi i64 [ 0, %122 ], [ %145, %123 ]
  br i1 %62, label %160, label %150

150:                                              ; preds = %148
  %151 = getelementptr inbounds i16, i16* %121, i64 %149
  %152 = bitcast i16* %151 to <8 x i16>*
  %153 = load <8 x i16>, <8 x i16>* %152, align 2
  %154 = sext <8 x i16> %153 to <8 x i32>
  %155 = mul nsw <8 x i32> %154, <i32 2896, i32 2896, i32 2896, i32 2896, i32 2896, i32 2896, i32 2896, i32 2896>
  %156 = add nsw <8 x i32> %155, <i32 2048, i32 2048, i32 2048, i32 2048, i32 2048, i32 2048, i32 2048, i32 2048>
  %157 = lshr <8 x i32> %156, <i32 12, i32 12, i32 12, i32 12, i32 12, i32 12, i32 12, i32 12>
  %158 = trunc <8 x i32> %157 to <8 x i16>
  %159 = bitcast i16* %151 to <8 x i16>*
  store <8 x i16> %158, <8 x i16>* %159, align 2
  br label %160

160:                                              ; preds = %148, %150
  br i1 %63, label %174, label %161

161:                                              ; preds = %160, %120
  %162 = phi i64 [ 0, %120 ], [ %58, %160 ]
  br label %163

163:                                              ; preds = %161, %163
  %164 = phi i64 [ %172, %163 ], [ %162, %161 ]
  %165 = getelementptr inbounds i16, i16* %121, i64 %164
  %166 = load i16, i16* %165, align 2
  %167 = sext i16 %166 to i32
  %168 = mul nsw i32 %167, 2896
  %169 = add nsw i32 %168, 2048
  %170 = lshr i32 %169, 12
  %171 = trunc i32 %170 to i16
  store i16 %171, i16* %165, align 2
  %172 = add nuw nsw i64 %164, 1
  %173 = icmp ult i64 %172, %41
  br i1 %173, label %163, label %174, !llvm.loop !26

174:                                              ; preds = %163, %160, %117
  %175 = getelementptr inbounds i16, i16* %18, i64 %119
  %176 = bitcast i16* %175 to i8*
  tail call fastcc void @_ZN7libgav13dsp12_GLOBAL__N_15Dct_CIsLi6EEEvPva(i8* %176)
  br i1 %45, label %250, label %177

177:                                              ; preds = %174
  br i1 %64, label %238, label %178

178:                                              ; preds = %177
  br i1 %75, label %218, label %179

179:                                              ; preds = %178, %179
  %180 = phi i64 [ %215, %179 ], [ 0, %178 ]
  %181 = phi i64 [ %216, %179 ], [ %76, %178 ]
  %182 = getelementptr inbounds i16, i16* %175, i64 %180
  %183 = bitcast i16* %182 to <8 x i16>*
  %184 = load <8 x i16>, <8 x i16>* %183, align 2
  %185 = getelementptr inbounds i16, i16* %182, i64 8
  %186 = bitcast i16* %185 to <8 x i16>*
  %187 = load <8 x i16>, <8 x i16>* %186, align 2
  %188 = sext <8 x i16> %184 to <8 x i32>
  %189 = sext <8 x i16> %187 to <8 x i32>
  %190 = add nsw <8 x i32> %67, %188
  %191 = add nsw <8 x i32> %69, %189
  %192 = ashr <8 x i32> %190, %71
  %193 = ashr <8 x i32> %191, %73
  %194 = trunc <8 x i32> %192 to <8 x i16>
  %195 = trunc <8 x i32> %193 to <8 x i16>
  %196 = bitcast i16* %182 to <8 x i16>*
  store <8 x i16> %194, <8 x i16>* %196, align 2
  %197 = bitcast i16* %185 to <8 x i16>*
  store <8 x i16> %195, <8 x i16>* %197, align 2
  %198 = or i64 %180, 16
  %199 = getelementptr inbounds i16, i16* %175, i64 %198
  %200 = bitcast i16* %199 to <8 x i16>*
  %201 = load <8 x i16>, <8 x i16>* %200, align 2
  %202 = getelementptr inbounds i16, i16* %199, i64 8
  %203 = bitcast i16* %202 to <8 x i16>*
  %204 = load <8 x i16>, <8 x i16>* %203, align 2
  %205 = sext <8 x i16> %201 to <8 x i32>
  %206 = sext <8 x i16> %204 to <8 x i32>
  %207 = add nsw <8 x i32> %67, %205
  %208 = add nsw <8 x i32> %69, %206
  %209 = ashr <8 x i32> %207, %71
  %210 = ashr <8 x i32> %208, %73
  %211 = trunc <8 x i32> %209 to <8 x i16>
  %212 = trunc <8 x i32> %210 to <8 x i16>
  %213 = bitcast i16* %199 to <8 x i16>*
  store <8 x i16> %211, <8 x i16>* %213, align 2
  %214 = bitcast i16* %202 to <8 x i16>*
  store <8 x i16> %212, <8 x i16>* %214, align 2
  %215 = add i64 %180, 32
  %216 = add i64 %181, -2
  %217 = icmp eq i64 %216, 0
  br i1 %217, label %218, label %179, !llvm.loop !27

218:                                              ; preds = %179, %178
  %219 = phi i64 [ 0, %178 ], [ %215, %179 ]
  br i1 %77, label %237, label %220

220:                                              ; preds = %218
  %221 = getelementptr inbounds i16, i16* %175, i64 %219
  %222 = bitcast i16* %221 to <8 x i16>*
  %223 = load <8 x i16>, <8 x i16>* %222, align 2
  %224 = getelementptr inbounds i16, i16* %221, i64 8
  %225 = bitcast i16* %224 to <8 x i16>*
  %226 = load <8 x i16>, <8 x i16>* %225, align 2
  %227 = sext <8 x i16> %223 to <8 x i32>
  %228 = sext <8 x i16> %226 to <8 x i32>
  %229 = add nsw <8 x i32> %67, %227
  %230 = add nsw <8 x i32> %69, %228
  %231 = ashr <8 x i32> %229, %71
  %232 = ashr <8 x i32> %230, %73
  %233 = trunc <8 x i32> %231 to <8 x i16>
  %234 = trunc <8 x i32> %232 to <8 x i16>
  %235 = bitcast i16* %221 to <8 x i16>*
  store <8 x i16> %233, <8 x i16>* %235, align 2
  %236 = bitcast i16* %224 to <8 x i16>*
  store <8 x i16> %234, <8 x i16>* %236, align 2
  br label %237

237:                                              ; preds = %218, %220
  br i1 %78, label %250, label %238

238:                                              ; preds = %237, %177
  %239 = phi i64 [ 0, %177 ], [ %65, %237 ]
  br label %240

240:                                              ; preds = %238, %240
  %241 = phi i64 [ %248, %240 ], [ %239, %238 ]
  %242 = getelementptr inbounds i16, i16* %175, i64 %241
  %243 = load i16, i16* %242, align 2
  %244 = sext i16 %243 to i32
  %245 = add nsw i32 %40, %244
  %246 = ashr i32 %245, %21
  %247 = trunc i32 %246 to i16
  store i16 %247, i16* %242, align 2
  %248 = add nuw nsw i64 %241, 1
  %249 = icmp eq i64 %248, %46
  br i1 %249, label %250, label %240, !llvm.loop !28

250:                                              ; preds = %240, %237, %174
  %251 = add nuw nsw i64 %118, 1
  %252 = icmp eq i64 %251, %42
  br i1 %252, label %253, label %117

253:                                              ; preds = %250, %111, %28
  ret void

254:                                              ; preds = %111
  %255 = load i16, i16* %18, align 2
  %256 = getelementptr inbounds i16, i16* %18, i64 %115
  store i16 %255, i16* %256, align 2
  %257 = add nuw nsw i64 %112, 2
  %258 = getelementptr inbounds i16, i16* %18, i64 %257
  store i16 %255, i16* %258, align 2
  %259 = add nuw nsw i64 %112, 3
  %260 = load i16, i16* %18, align 2
  %261 = getelementptr inbounds i16, i16* %18, i64 %259
  store i16 %260, i16* %261, align 2
  %262 = add nuw nsw i64 %112, 4
  br label %111
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN7libgav13dsp12_GLOBAL__N_115TransformLoop_CILi8EshLNS0_11Transform1DE0EXadL_ZNS1_11DctDcOnly_CILi8EsLi6EEEvPvabibEEXadL_ZNS1_5Dct_CIsLi6EEEvS5_aEELb0EEEvNS_13TransformTypeENS_13TransformSizeEiS5_iiS5_(i8 zeroext, i8 zeroext, i32, i8*, i32, i32, i8* nocapture readonly) #0 {
  %8 = alloca [64 x i16], align 16
  %9 = zext i8 %1 to i64
  %10 = getelementptr inbounds [19 x i8], [19 x i8]* @_ZN7libgav115kTransformWidthE, i64 0, i64 %9
  %11 = load i8, i8* %10, align 1
  %12 = zext i8 %11 to i32
  %13 = getelementptr inbounds [19 x i8], [19 x i8]* @_ZN7libgav116kTransformHeightE, i64 0, i64 %9
  %14 = load i8, i8* %13, align 1
  %15 = bitcast i8* %3 to i16*
  %16 = zext i8 %0 to i32
  %17 = shl i32 1, %16
  %18 = and i32 %17, 33104
  %19 = icmp eq i32 %18, 0
  %20 = bitcast [64 x i16]* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 128, i8* nonnull %20) #4
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %20, i8 -86, i64 128, i1 false)
  %21 = icmp eq i8 %11, 0
  br i1 %21, label %42, label %22

22:                                               ; preds = %7
  %23 = zext i8 %11 to i64
  %24 = icmp eq i32 %2, 1
  %25 = getelementptr inbounds [64 x i16], [64 x i16]* %8, i64 0, i64 0
  %26 = getelementptr inbounds [64 x i16], [64 x i16]* %8, i64 0, i64 1
  %27 = icmp eq i8 %14, 0
  %28 = getelementptr inbounds i8, i8* %6, i64 4
  %29 = bitcast i8* %28 to i32*
  %30 = getelementptr inbounds i8, i8* %6, i64 8
  %31 = bitcast i8* %30 to i8**
  %32 = zext i8 %14 to i64
  %33 = sext i32 %5 to i64
  %34 = sext i32 %4 to i64
  %35 = zext i8 %11 to i64
  %36 = add nsw i64 %32, -1
  %37 = and i64 %32, 3
  %38 = icmp ult i64 %36, 3
  %39 = sub nsw i64 %32, %37
  %40 = icmp eq i64 %37, 0
  %41 = getelementptr inbounds [64 x i16], [64 x i16]* %8, i64 0, i64 2
  br label %43

42:                                               ; preds = %107, %7
  call void @llvm.lifetime.end.p0i8(i64 128, i8* nonnull %20) #4
  ret void

43:                                               ; preds = %107, %22
  %44 = phi i64 [ 0, %22 ], [ %108, %107 ]
  %45 = phi i32 [ 0, %22 ], [ %109, %107 ]
  %46 = xor i32 %45, -1
  %47 = add nsw i32 %46, %12
  %48 = trunc i64 %44 to i32
  %49 = select i1 %19, i32 %48, i32 %47
  %50 = sext i32 %49 to i64
  %51 = getelementptr inbounds i16, i16* %15, i64 %50
  br i1 %38, label %77, label %52

52:                                               ; preds = %43, %52
  %53 = phi i64 [ %74, %52 ], [ 0, %43 ]
  %54 = phi i64 [ %75, %52 ], [ %39, %43 ]
  %55 = mul nuw nsw i64 %53, %23
  %56 = getelementptr inbounds i16, i16* %51, i64 %55
  %57 = load i16, i16* %56, align 2
  %58 = getelementptr inbounds [64 x i16], [64 x i16]* %8, i64 0, i64 %53
  store i16 %57, i16* %58, align 8
  %59 = or i64 %53, 1
  %60 = mul nuw nsw i64 %59, %23
  %61 = getelementptr inbounds i16, i16* %51, i64 %60
  %62 = load i16, i16* %61, align 2
  %63 = getelementptr inbounds [64 x i16], [64 x i16]* %8, i64 0, i64 %59
  store i16 %62, i16* %63, align 2
  %64 = or i64 %53, 2
  %65 = mul nuw nsw i64 %64, %23
  %66 = getelementptr inbounds i16, i16* %51, i64 %65
  %67 = load i16, i16* %66, align 2
  %68 = getelementptr inbounds [64 x i16], [64 x i16]* %8, i64 0, i64 %64
  store i16 %67, i16* %68, align 4
  %69 = or i64 %53, 3
  %70 = mul nuw nsw i64 %69, %23
  %71 = getelementptr inbounds i16, i16* %51, i64 %70
  %72 = load i16, i16* %71, align 2
  %73 = getelementptr inbounds [64 x i16], [64 x i16]* %8, i64 0, i64 %69
  store i16 %72, i16* %73, align 2
  %74 = add nuw nsw i64 %53, 4
  %75 = add i64 %54, -4
  %76 = icmp eq i64 %75, 0
  br i1 %76, label %77, label %52

77:                                               ; preds = %52, %43
  %78 = phi i64 [ 0, %43 ], [ %74, %52 ]
  br i1 %40, label %89, label %79

79:                                               ; preds = %77, %79
  %80 = phi i64 [ %86, %79 ], [ %78, %77 ]
  %81 = phi i64 [ %87, %79 ], [ %37, %77 ]
  %82 = mul nuw nsw i64 %80, %23
  %83 = getelementptr inbounds i16, i16* %51, i64 %82
  %84 = load i16, i16* %83, align 2
  %85 = getelementptr inbounds [64 x i16], [64 x i16]* %8, i64 0, i64 %80
  store i16 %84, i16* %85, align 2
  %86 = add nuw nsw i64 %80, 1
  %87 = add i64 %81, -1
  %88 = icmp eq i64 %87, 0
  br i1 %88, label %89, label %79, !llvm.loop !29

89:                                               ; preds = %79, %77
  br i1 %24, label %90, label %103

90:                                               ; preds = %89
  %91 = load i16, i16* %25, align 16
  %92 = sext i16 %91 to i32
  %93 = mul nsw i32 %92, 2896
  %94 = add nsw i32 %93, 2048
  %95 = lshr i32 %94, 12
  %96 = trunc i32 %95 to i16
  store i16 %96, i16* %25, align 16
  store i16 %96, i16* %26, align 2
  store i16 %96, i16* %41, align 4
  br label %97

97:                                               ; preds = %135, %90
  %98 = phi i64 [ 3, %90 ], [ %143, %135 ]
  %99 = load i16, i16* %25, align 16
  %100 = getelementptr inbounds [64 x i16], [64 x i16]* %8, i64 0, i64 %98
  store i16 %99, i16* %100, align 2
  %101 = add nuw nsw i64 %98, 1
  %102 = icmp eq i64 %101, 64
  br i1 %102, label %104, label %135

103:                                              ; preds = %89
  call fastcc void @_ZN7libgav13dsp12_GLOBAL__N_15Dct_CIsLi6EEEvPva(i8* nonnull %20)
  br label %104

104:                                              ; preds = %97, %103
  br i1 %27, label %107, label %105

105:                                              ; preds = %104
  %106 = add nsw i64 %44, %34
  br label %111

107:                                              ; preds = %111, %104
  %108 = add nuw nsw i64 %44, 1
  %109 = add nuw nsw i32 %45, 1
  %110 = icmp eq i64 %108, %35
  br i1 %110, label %42, label %43

111:                                              ; preds = %111, %105
  %112 = phi i64 [ 0, %105 ], [ %133, %111 ]
  %113 = add nsw i64 %112, %33
  %114 = getelementptr inbounds [64 x i16], [64 x i16]* %8, i64 0, i64 %112
  %115 = load i16, i16* %114, align 2
  %116 = sext i16 %115 to i32
  %117 = add nsw i32 %116, 8
  %118 = ashr i32 %117, 4
  %119 = load i32, i32* %29, align 4
  %120 = sext i32 %119 to i64
  %121 = mul nsw i64 %113, %120
  %122 = load i8*, i8** %31, align 8
  %123 = getelementptr inbounds i8, i8* %122, i64 %106
  %124 = getelementptr inbounds i8, i8* %123, i64 %121
  %125 = load i8, i8* %124, align 1
  %126 = zext i8 %125 to i32
  %127 = add nsw i32 %118, %126
  %128 = icmp slt i32 %127, 255
  %129 = select i1 %128, i32 %127, i32 255
  %130 = icmp sgt i32 %129, 0
  %131 = select i1 %130, i32 %129, i32 0
  %132 = trunc i32 %131 to i8
  store i8 %132, i8* %124, align 1
  %133 = add nuw nsw i64 %112, 1
  %134 = icmp eq i64 %133, %32
  br i1 %134, label %107, label %111

135:                                              ; preds = %97
  %136 = load i16, i16* %25, align 16
  %137 = getelementptr inbounds [64 x i16], [64 x i16]* %8, i64 0, i64 %101
  store i16 %136, i16* %137, align 2
  %138 = add nuw nsw i64 %98, 2
  %139 = getelementptr inbounds [64 x i16], [64 x i16]* %8, i64 0, i64 %138
  store i16 %136, i16* %139, align 2
  %140 = add nuw nsw i64 %98, 3
  %141 = load i16, i16* %25, align 16
  %142 = getelementptr inbounds [64 x i16], [64 x i16]* %8, i64 0, i64 %140
  store i16 %141, i16* %142, align 2
  %143 = add nuw nsw i64 %98, 4
  br label %97
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN7libgav13dsp12_GLOBAL__N_115TransformLoop_CILi8EshLNS0_11Transform1DE1EXadL_ZNS1_13Adst4DcOnly_CILi8EsEEvPvabibEEXadL_ZNS1_7Adst4_CIsEEvS5_aEELb1EEEvNS_13TransformTypeENS_13TransformSizeEiS5_iiS5_(i8 zeroext, i8 zeroext, i32, i8*, i32, i32, i8* nocapture readnone) #0 {
  %8 = zext i8 %1 to i64
  %9 = getelementptr inbounds [19 x i8], [19 x i8]* @_ZN7libgav115kTransformWidthE, i64 0, i64 %8
  %10 = load i8, i8* %9, align 1
  %11 = zext i8 %10 to i32
  %12 = getelementptr inbounds [19 x i8], [19 x i8]* @_ZN7libgav119kTransformWidthLog2E, i64 0, i64 %8
  %13 = load i8, i8* %12, align 1
  %14 = zext i8 %13 to i32
  %15 = getelementptr inbounds [19 x i8], [19 x i8]* @_ZN7libgav120kTransformHeightLog2E, i64 0, i64 %8
  %16 = load i8, i8* %15, align 1
  %17 = zext i8 %16 to i32
  %18 = bitcast i8* %3 to i16*
  %19 = getelementptr inbounds [19 x i8], [19 x i8]* @_ZN7libgav13dsp12_GLOBAL__N_118kTransformRowShiftE, i64 0, i64 %8
  %20 = load i8, i8* %19, align 1
  %21 = zext i8 %20 to i32
  %22 = sub nsw i32 %14, %17
  %23 = icmp slt i32 %22, 0
  %24 = sub nsw i32 0, %22
  %25 = select i1 %23, i32 %24, i32 %22
  %26 = icmp eq i32 %25, 1
  %27 = icmp eq i32 %2, 1
  br i1 %27, label %74, label %28

28:                                               ; preds = %7
  %29 = icmp sgt i32 %2, 0
  br i1 %29, label %30, label %234

30:                                               ; preds = %28
  %31 = icmp ult i32 %11, 32
  %32 = select i1 %31, i32 %11, i32 32
  %33 = icmp slt i32 %32, 1
  %34 = zext i8 %10 to i64
  %35 = lshr i64 524276, %8
  %36 = and i64 %35, 1
  %37 = icmp eq i64 %36, 0
  %38 = icmp eq i8 %10, 0
  %39 = shl i32 1, %21
  %40 = ashr i32 %39, 1
  %41 = zext i32 %32 to i64
  %42 = zext i32 %2 to i64
  %43 = xor i1 %26, true
  %44 = or i1 %33, %43
  %45 = or i1 %37, %38
  %46 = zext i8 %10 to i64
  %47 = add nsw i64 %46, -1
  %48 = icmp ugt i64 %41, 1
  %49 = select i1 %48, i64 %41, i64 1
  %50 = and i64 %49, 56
  %51 = add nsw i64 %50, -8
  %52 = lshr exact i64 %51, 3
  %53 = add nuw nsw i64 %52, 1
  %54 = icmp ult i64 %49, 8
  %55 = and i64 %49, 56
  %56 = and i64 %53, 1
  %57 = icmp eq i64 %51, 0
  %58 = sub nuw nsw i64 %53, %56
  %59 = icmp eq i64 %56, 0
  %60 = icmp eq i64 %49, %55
  %61 = icmp eq i8 %10, 1
  %62 = icmp ult i64 %47, 16
  %63 = and i64 %47, -16
  %64 = or i64 %63, 1
  %65 = insertelement <8 x i32> undef, i32 %40, i32 0
  %66 = shufflevector <8 x i32> %65, <8 x i32> undef, <8 x i32> zeroinitializer
  %67 = insertelement <8 x i32> undef, i32 %40, i32 0
  %68 = shufflevector <8 x i32> %67, <8 x i32> undef, <8 x i32> zeroinitializer
  %69 = insertelement <8 x i32> undef, i32 %21, i32 0
  %70 = shufflevector <8 x i32> %69, <8 x i32> undef, <8 x i32> zeroinitializer
  %71 = insertelement <8 x i32> undef, i32 %21, i32 0
  %72 = shufflevector <8 x i32> %71, <8 x i32> undef, <8 x i32> zeroinitializer
  %73 = icmp eq i64 %47, %63
  br label %75

74:                                               ; preds = %7
  tail call fastcc void @_ZN7libgav13dsp12_GLOBAL__N_113Adst4DcOnly_CILi8EsEEvPvabib(i8* %3, i1 zeroext %26, i32 %21, i1 zeroext true)
  br label %234

75:                                               ; preds = %231, %30
  %76 = phi i64 [ 0, %30 ], [ %232, %231 ]
  %77 = mul nuw nsw i64 %76, %34
  br i1 %44, label %132, label %78

78:                                               ; preds = %75
  %79 = getelementptr inbounds i16, i16* %18, i64 %77
  br i1 %54, label %119, label %80

80:                                               ; preds = %78
  br i1 %57, label %106, label %81

81:                                               ; preds = %80, %81
  %82 = phi i64 [ %103, %81 ], [ 0, %80 ]
  %83 = phi i64 [ %104, %81 ], [ %58, %80 ]
  %84 = getelementptr inbounds i16, i16* %79, i64 %82
  %85 = bitcast i16* %84 to <8 x i16>*
  %86 = load <8 x i16>, <8 x i16>* %85, align 2
  %87 = sext <8 x i16> %86 to <8 x i32>
  %88 = mul nsw <8 x i32> %87, <i32 2896, i32 2896, i32 2896, i32 2896, i32 2896, i32 2896, i32 2896, i32 2896>
  %89 = add nsw <8 x i32> %88, <i32 2048, i32 2048, i32 2048, i32 2048, i32 2048, i32 2048, i32 2048, i32 2048>
  %90 = lshr <8 x i32> %89, <i32 12, i32 12, i32 12, i32 12, i32 12, i32 12, i32 12, i32 12>
  %91 = trunc <8 x i32> %90 to <8 x i16>
  %92 = bitcast i16* %84 to <8 x i16>*
  store <8 x i16> %91, <8 x i16>* %92, align 2
  %93 = or i64 %82, 8
  %94 = getelementptr inbounds i16, i16* %79, i64 %93
  %95 = bitcast i16* %94 to <8 x i16>*
  %96 = load <8 x i16>, <8 x i16>* %95, align 2
  %97 = sext <8 x i16> %96 to <8 x i32>
  %98 = mul nsw <8 x i32> %97, <i32 2896, i32 2896, i32 2896, i32 2896, i32 2896, i32 2896, i32 2896, i32 2896>
  %99 = add nsw <8 x i32> %98, <i32 2048, i32 2048, i32 2048, i32 2048, i32 2048, i32 2048, i32 2048, i32 2048>
  %100 = lshr <8 x i32> %99, <i32 12, i32 12, i32 12, i32 12, i32 12, i32 12, i32 12, i32 12>
  %101 = trunc <8 x i32> %100 to <8 x i16>
  %102 = bitcast i16* %94 to <8 x i16>*
  store <8 x i16> %101, <8 x i16>* %102, align 2
  %103 = add i64 %82, 16
  %104 = add i64 %83, -2
  %105 = icmp eq i64 %104, 0
  br i1 %105, label %106, label %81, !llvm.loop !30

106:                                              ; preds = %81, %80
  %107 = phi i64 [ 0, %80 ], [ %103, %81 ]
  br i1 %59, label %118, label %108

108:                                              ; preds = %106
  %109 = getelementptr inbounds i16, i16* %79, i64 %107
  %110 = bitcast i16* %109 to <8 x i16>*
  %111 = load <8 x i16>, <8 x i16>* %110, align 2
  %112 = sext <8 x i16> %111 to <8 x i32>
  %113 = mul nsw <8 x i32> %112, <i32 2896, i32 2896, i32 2896, i32 2896, i32 2896, i32 2896, i32 2896, i32 2896>
  %114 = add nsw <8 x i32> %113, <i32 2048, i32 2048, i32 2048, i32 2048, i32 2048, i32 2048, i32 2048, i32 2048>
  %115 = lshr <8 x i32> %114, <i32 12, i32 12, i32 12, i32 12, i32 12, i32 12, i32 12, i32 12>
  %116 = trunc <8 x i32> %115 to <8 x i16>
  %117 = bitcast i16* %109 to <8 x i16>*
  store <8 x i16> %116, <8 x i16>* %117, align 2
  br label %118

118:                                              ; preds = %106, %108
  br i1 %60, label %132, label %119

119:                                              ; preds = %118, %78
  %120 = phi i64 [ 0, %78 ], [ %55, %118 ]
  br label %121

121:                                              ; preds = %119, %121
  %122 = phi i64 [ %130, %121 ], [ %120, %119 ]
  %123 = getelementptr inbounds i16, i16* %79, i64 %122
  %124 = load i16, i16* %123, align 2
  %125 = sext i16 %124 to i32
  %126 = mul nsw i32 %125, 2896
  %127 = add nsw i32 %126, 2048
  %128 = lshr i32 %127, 12
  %129 = trunc i32 %128 to i16
  store i16 %129, i16* %123, align 2
  %130 = add nuw nsw i64 %122, 1
  %131 = icmp ult i64 %130, %41
  br i1 %131, label %121, label %132, !llvm.loop !31

132:                                              ; preds = %121, %118, %75
  %133 = getelementptr inbounds i16, i16* %18, i64 %77
  %134 = load i16, i16* %133, align 2
  %135 = getelementptr inbounds i16, i16* %133, i64 1
  %136 = load i16, i16* %135, align 2
  %137 = or i16 %136, %134
  %138 = getelementptr inbounds i16, i16* %133, i64 2
  %139 = load i16, i16* %138, align 2
  %140 = or i16 %137, %139
  %141 = getelementptr inbounds i16, i16* %133, i64 3
  %142 = load i16, i16* %141, align 2
  %143 = or i16 %140, %142
  %144 = icmp eq i16 %143, 0
  br i1 %144, label %188, label %145

145:                                              ; preds = %132
  %146 = sext i16 %134 to i32
  %147 = mul nsw i32 %146, 1321
  %148 = mul nsw i32 %146, 2482
  %149 = sext i16 %136 to i32
  %150 = mul nsw i32 %149, 3344
  %151 = sext i16 %139 to i32
  %152 = mul nsw i32 %151, 3803
  %153 = sext i16 %142 to i32
  %154 = mul nsw i32 %153, 2482
  %155 = sub nsw i32 %146, %151
  %156 = add nsw i32 %155, %153
  %157 = add nsw i32 %152, %147
  %158 = mul nsw i32 %151, -1321
  %159 = add nsw i32 %158, %148
  %160 = mul nsw i32 %156, 3344
  %161 = add nsw i32 %157, %154
  %162 = mul nsw i32 %153, -3803
  %163 = add nsw i32 %159, %162
  %164 = add nsw i32 %150, 2048
  %165 = add nsw i32 %161, %164
  %166 = ashr i32 %165, 12
  %167 = add nsw i32 %163, %164
  %168 = ashr i32 %167, 12
  %169 = add nsw i32 %160, 2048
  %170 = lshr i32 %169, 12
  %171 = sub nsw i32 2048, %150
  %172 = add nsw i32 %171, %163
  %173 = add nsw i32 %172, %161
  %174 = ashr i32 %173, 12
  %175 = icmp eq i32 %166, 32768
  %176 = zext i1 %175 to i32
  %177 = sub nsw i32 %166, %176
  %178 = icmp eq i32 %168, 32768
  %179 = zext i1 %178 to i32
  %180 = sub nsw i32 %168, %179
  %181 = icmp eq i32 %174, 32768
  %182 = zext i1 %181 to i32
  %183 = sub nsw i32 %174, %182
  %184 = trunc i32 %177 to i16
  store i16 %184, i16* %133, align 2
  %185 = trunc i32 %180 to i16
  store i16 %185, i16* %135, align 2
  %186 = trunc i32 %170 to i16
  store i16 %186, i16* %138, align 2
  %187 = trunc i32 %183 to i16
  store i16 %187, i16* %141, align 2
  br label %188

188:                                              ; preds = %132, %145
  %189 = phi i16 [ %134, %132 ], [ %184, %145 ]
  br i1 %45, label %231, label %190

190:                                              ; preds = %188
  %191 = sext i16 %189 to i32
  %192 = add nsw i32 %40, %191
  %193 = ashr i32 %192, %21
  %194 = trunc i32 %193 to i16
  store i16 %194, i16* %133, align 2
  br i1 %61, label %231, label %195

195:                                              ; preds = %190
  br i1 %62, label %218, label %196

196:                                              ; preds = %195, %196
  %197 = phi i64 [ %215, %196 ], [ 0, %195 ]
  %198 = or i64 %197, 1
  %199 = getelementptr inbounds i16, i16* %133, i64 %198
  %200 = bitcast i16* %199 to <8 x i16>*
  %201 = load <8 x i16>, <8 x i16>* %200, align 2
  %202 = getelementptr inbounds i16, i16* %199, i64 8
  %203 = bitcast i16* %202 to <8 x i16>*
  %204 = load <8 x i16>, <8 x i16>* %203, align 2
  %205 = sext <8 x i16> %201 to <8 x i32>
  %206 = sext <8 x i16> %204 to <8 x i32>
  %207 = add nsw <8 x i32> %66, %205
  %208 = add nsw <8 x i32> %68, %206
  %209 = ashr <8 x i32> %207, %70
  %210 = ashr <8 x i32> %208, %72
  %211 = trunc <8 x i32> %209 to <8 x i16>
  %212 = trunc <8 x i32> %210 to <8 x i16>
  %213 = bitcast i16* %199 to <8 x i16>*
  store <8 x i16> %211, <8 x i16>* %213, align 2
  %214 = bitcast i16* %202 to <8 x i16>*
  store <8 x i16> %212, <8 x i16>* %214, align 2
  %215 = add i64 %197, 16
  %216 = icmp eq i64 %215, %63
  br i1 %216, label %217, label %196, !llvm.loop !32

217:                                              ; preds = %196
  br i1 %73, label %231, label %218

218:                                              ; preds = %217, %195
  %219 = phi i64 [ 1, %195 ], [ %64, %217 ]
  br label %220

220:                                              ; preds = %218, %220
  %221 = phi i64 [ %229, %220 ], [ %219, %218 ]
  %222 = getelementptr inbounds i16, i16* %133, i64 %221
  %223 = load i16, i16* %222, align 2
  %224 = getelementptr inbounds i16, i16* %133, i64 %221
  %225 = sext i16 %223 to i32
  %226 = add nsw i32 %40, %225
  %227 = ashr i32 %226, %21
  %228 = trunc i32 %227 to i16
  store i16 %228, i16* %224, align 2
  %229 = add nuw nsw i64 %221, 1
  %230 = icmp eq i64 %229, %46
  br i1 %230, label %231, label %220, !llvm.loop !33

231:                                              ; preds = %220, %190, %217, %188
  %232 = add nuw nsw i64 %76, 1
  %233 = icmp eq i64 %232, %42
  br i1 %233, label %234, label %75

234:                                              ; preds = %231, %28, %74
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN7libgav13dsp12_GLOBAL__N_115TransformLoop_CILi8EshLNS0_11Transform1DE1EXadL_ZNS1_13Adst4DcOnly_CILi8EsEEvPvabibEEXadL_ZNS1_7Adst4_CIsEEvS5_aEELb0EEEvNS_13TransformTypeENS_13TransformSizeEiS5_iiS5_(i8 zeroext, i8 zeroext, i32, i8*, i32, i32, i8* nocapture readonly) #0 {
  %8 = alloca [64 x i16], align 16
  %9 = zext i8 %1 to i64
  %10 = getelementptr inbounds [19 x i8], [19 x i8]* @_ZN7libgav115kTransformWidthE, i64 0, i64 %9
  %11 = load i8, i8* %10, align 1
  %12 = zext i8 %11 to i32
  %13 = getelementptr inbounds [19 x i8], [19 x i8]* @_ZN7libgav116kTransformHeightE, i64 0, i64 %9
  %14 = load i8, i8* %13, align 1
  %15 = zext i8 %14 to i32
  %16 = bitcast i8* %3 to i16*
  %17 = zext i8 %0 to i32
  %18 = shl i32 1, %17
  %19 = and i32 %18, 16608
  %20 = icmp eq i32 %19, 0
  %21 = and i32 %18, 33104
  %22 = icmp eq i32 %21, 0
  %23 = bitcast [64 x i16]* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 128, i8* nonnull %23) #4
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %23, i8 -86, i64 128, i1 false)
  %24 = icmp eq i8 %11, 0
  br i1 %24, label %46, label %25

25:                                               ; preds = %7
  %26 = zext i8 %11 to i64
  %27 = icmp eq i32 %2, 1
  %28 = getelementptr inbounds [64 x i16], [64 x i16]* %8, i64 0, i64 0
  %29 = getelementptr inbounds [64 x i16], [64 x i16]* %8, i64 0, i64 1
  %30 = getelementptr inbounds [64 x i16], [64 x i16]* %8, i64 0, i64 2
  %31 = getelementptr inbounds [64 x i16], [64 x i16]* %8, i64 0, i64 3
  %32 = icmp eq i8 %14, 0
  %33 = getelementptr inbounds i8, i8* %6, i64 4
  %34 = bitcast i8* %33 to i32*
  %35 = getelementptr inbounds i8, i8* %6, i64 8
  %36 = bitcast i8* %35 to i8**
  %37 = zext i8 %14 to i64
  %38 = sext i32 %5 to i64
  %39 = sext i32 %4 to i64
  %40 = zext i8 %11 to i64
  %41 = add nsw i64 %37, -1
  %42 = and i64 %37, 3
  %43 = icmp ult i64 %41, 3
  %44 = sub nsw i64 %37, %42
  %45 = icmp eq i64 %42, 0
  br label %47

46:                                               ; preds = %162, %7
  call void @llvm.lifetime.end.p0i8(i64 128, i8* nonnull %23) #4
  ret void

47:                                               ; preds = %162, %25
  %48 = phi i64 [ 0, %25 ], [ %163, %162 ]
  %49 = phi i32 [ 0, %25 ], [ %164, %162 ]
  %50 = xor i32 %49, -1
  %51 = add nsw i32 %50, %12
  %52 = trunc i64 %48 to i32
  %53 = select i1 %22, i32 %52, i32 %51
  %54 = sext i32 %53 to i64
  %55 = getelementptr inbounds i16, i16* %16, i64 %54
  br i1 %43, label %81, label %56

56:                                               ; preds = %47, %56
  %57 = phi i64 [ %78, %56 ], [ 0, %47 ]
  %58 = phi i64 [ %79, %56 ], [ %44, %47 ]
  %59 = mul nuw nsw i64 %57, %26
  %60 = getelementptr inbounds i16, i16* %55, i64 %59
  %61 = load i16, i16* %60, align 2
  %62 = getelementptr inbounds [64 x i16], [64 x i16]* %8, i64 0, i64 %57
  store i16 %61, i16* %62, align 8
  %63 = or i64 %57, 1
  %64 = mul nuw nsw i64 %63, %26
  %65 = getelementptr inbounds i16, i16* %55, i64 %64
  %66 = load i16, i16* %65, align 2
  %67 = getelementptr inbounds [64 x i16], [64 x i16]* %8, i64 0, i64 %63
  store i16 %66, i16* %67, align 2
  %68 = or i64 %57, 2
  %69 = mul nuw nsw i64 %68, %26
  %70 = getelementptr inbounds i16, i16* %55, i64 %69
  %71 = load i16, i16* %70, align 2
  %72 = getelementptr inbounds [64 x i16], [64 x i16]* %8, i64 0, i64 %68
  store i16 %71, i16* %72, align 4
  %73 = or i64 %57, 3
  %74 = mul nuw nsw i64 %73, %26
  %75 = getelementptr inbounds i16, i16* %55, i64 %74
  %76 = load i16, i16* %75, align 2
  %77 = getelementptr inbounds [64 x i16], [64 x i16]* %8, i64 0, i64 %73
  store i16 %76, i16* %77, align 2
  %78 = add nuw nsw i64 %57, 4
  %79 = add i64 %58, -4
  %80 = icmp eq i64 %79, 0
  br i1 %80, label %81, label %56

81:                                               ; preds = %56, %47
  %82 = phi i64 [ 0, %47 ], [ %78, %56 ]
  br i1 %45, label %93, label %83

83:                                               ; preds = %81, %83
  %84 = phi i64 [ %90, %83 ], [ %82, %81 ]
  %85 = phi i64 [ %91, %83 ], [ %42, %81 ]
  %86 = mul nuw nsw i64 %84, %26
  %87 = getelementptr inbounds i16, i16* %55, i64 %86
  %88 = load i16, i16* %87, align 2
  %89 = getelementptr inbounds [64 x i16], [64 x i16]* %8, i64 0, i64 %84
  store i16 %88, i16* %89, align 2
  %90 = add nuw nsw i64 %84, 1
  %91 = add i64 %85, -1
  %92 = icmp eq i64 %91, 0
  br i1 %92, label %93, label %83, !llvm.loop !34

93:                                               ; preds = %83, %81
  %94 = load i16, i16* %28, align 16
  br i1 %27, label %95, label %103

95:                                               ; preds = %93
  %96 = sext i16 %94 to i32
  %97 = mul nsw i32 %96, 1321
  %98 = mul nsw i32 %96, 2482
  %99 = add nsw i32 %97, 2048
  %100 = add nsw i32 %98, 2048
  %101 = mul nsw i32 %96, 3803
  %102 = add nsw i32 %101, 2048
  br label %135

103:                                              ; preds = %93
  %104 = load i16, i16* %29, align 2
  %105 = or i16 %104, %94
  %106 = load i16, i16* %30, align 4
  %107 = or i16 %105, %106
  %108 = load i16, i16* %31, align 2
  %109 = or i16 %107, %108
  %110 = icmp eq i16 %109, 0
  br i1 %110, label %159, label %111

111:                                              ; preds = %103
  %112 = sext i16 %94 to i32
  %113 = mul nsw i32 %112, 1321
  %114 = mul nsw i32 %112, 2482
  %115 = sext i16 %104 to i32
  %116 = mul nsw i32 %115, 3344
  %117 = sext i16 %106 to i32
  %118 = mul nsw i32 %117, 3803
  %119 = sext i16 %108 to i32
  %120 = mul nsw i32 %119, 2482
  %121 = sub nsw i32 %112, %117
  %122 = add nsw i32 %121, %119
  %123 = add nsw i32 %118, %113
  %124 = mul nsw i32 %117, -1321
  %125 = add nsw i32 %124, %114
  %126 = add nsw i32 %123, %120
  %127 = mul nsw i32 %119, -3803
  %128 = add nsw i32 %125, %127
  %129 = add nsw i32 %116, 2048
  %130 = add nsw i32 %126, %129
  %131 = add nsw i32 %128, %129
  %132 = sub nsw i32 2048, %116
  %133 = add nsw i32 %132, %128
  %134 = add nsw i32 %133, %126
  br label %135

135:                                              ; preds = %95, %111
  %136 = phi i32 [ %102, %95 ], [ %134, %111 ]
  %137 = phi i32 [ %99, %95 ], [ %130, %111 ]
  %138 = phi i32 [ %100, %95 ], [ %131, %111 ]
  %139 = phi i32 [ %96, %95 ], [ %122, %111 ]
  %140 = mul nsw i32 %139, 3344
  %141 = add nsw i32 %140, 2048
  %142 = lshr i32 %141, 12
  %143 = ashr i32 %138, 12
  %144 = ashr i32 %137, 12
  %145 = ashr i32 %136, 12
  %146 = icmp eq i32 %144, 32768
  %147 = zext i1 %146 to i32
  %148 = sub nsw i32 %144, %147
  %149 = icmp eq i32 %143, 32768
  %150 = zext i1 %149 to i32
  %151 = sub nsw i32 %143, %150
  %152 = icmp eq i32 %145, 32768
  %153 = zext i1 %152 to i32
  %154 = sub nsw i32 %145, %153
  %155 = trunc i32 %148 to i16
  store i16 %155, i16* %28, align 16
  %156 = trunc i32 %151 to i16
  store i16 %156, i16* %29, align 2
  %157 = trunc i32 %142 to i16
  store i16 %157, i16* %30, align 4
  %158 = trunc i32 %154 to i16
  store i16 %158, i16* %31, align 2
  br label %159

159:                                              ; preds = %135, %103
  br i1 %32, label %162, label %160

160:                                              ; preds = %159
  %161 = add nsw i64 %48, %39
  br label %166

162:                                              ; preds = %166, %159
  %163 = add nuw nsw i64 %48, 1
  %164 = add nuw nsw i32 %49, 1
  %165 = icmp eq i64 %163, %40
  br i1 %165, label %46, label %47

166:                                              ; preds = %166, %160
  %167 = phi i64 [ 0, %160 ], [ %194, %166 ]
  %168 = phi i32 [ 0, %160 ], [ %195, %166 ]
  %169 = add nsw i64 %167, %38
  %170 = xor i32 %168, -1
  %171 = add nsw i32 %170, %15
  %172 = trunc i64 %167 to i32
  %173 = select i1 %20, i32 %172, i32 %171
  %174 = sext i32 %173 to i64
  %175 = getelementptr inbounds [64 x i16], [64 x i16]* %8, i64 0, i64 %174
  %176 = load i16, i16* %175, align 2
  %177 = sext i16 %176 to i32
  %178 = add nsw i32 %177, 8
  %179 = ashr i32 %178, 4
  %180 = load i32, i32* %34, align 4
  %181 = sext i32 %180 to i64
  %182 = mul nsw i64 %169, %181
  %183 = load i8*, i8** %36, align 8
  %184 = getelementptr inbounds i8, i8* %183, i64 %161
  %185 = getelementptr inbounds i8, i8* %184, i64 %182
  %186 = load i8, i8* %185, align 1
  %187 = zext i8 %186 to i32
  %188 = add nsw i32 %179, %187
  %189 = icmp slt i32 %188, 255
  %190 = select i1 %189, i32 %188, i32 255
  %191 = icmp sgt i32 %190, 0
  %192 = select i1 %191, i32 %190, i32 0
  %193 = trunc i32 %192 to i8
  store i8 %193, i8* %185, align 1
  %194 = add nuw nsw i64 %167, 1
  %195 = add nuw nsw i32 %168, 1
  %196 = icmp eq i64 %194, %37
  br i1 %196, label %162, label %166
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN7libgav13dsp12_GLOBAL__N_115TransformLoop_CILi8EshLNS0_11Transform1DE1EXadL_ZNS1_13Adst8DcOnly_CILi8EsEEvPvabibEEXadL_ZNS1_7Adst8_CIsEEvS5_aEELb1EEEvNS_13TransformTypeENS_13TransformSizeEiS5_iiS5_(i8 zeroext, i8 zeroext, i32, i8*, i32, i32, i8* nocapture readnone) #0 {
  %8 = zext i8 %1 to i64
  %9 = getelementptr inbounds [19 x i8], [19 x i8]* @_ZN7libgav115kTransformWidthE, i64 0, i64 %8
  %10 = load i8, i8* %9, align 1
  %11 = zext i8 %10 to i32
  %12 = getelementptr inbounds [19 x i8], [19 x i8]* @_ZN7libgav119kTransformWidthLog2E, i64 0, i64 %8
  %13 = load i8, i8* %12, align 1
  %14 = zext i8 %13 to i32
  %15 = getelementptr inbounds [19 x i8], [19 x i8]* @_ZN7libgav120kTransformHeightLog2E, i64 0, i64 %8
  %16 = load i8, i8* %15, align 1
  %17 = zext i8 %16 to i32
  %18 = bitcast i8* %3 to i16*
  %19 = getelementptr inbounds [19 x i8], [19 x i8]* @_ZN7libgav13dsp12_GLOBAL__N_118kTransformRowShiftE, i64 0, i64 %8
  %20 = load i8, i8* %19, align 1
  %21 = zext i8 %20 to i32
  %22 = sub nsw i32 %14, %17
  %23 = icmp slt i32 %22, 0
  %24 = sub nsw i32 0, %22
  %25 = select i1 %23, i32 %24, i32 %22
  %26 = icmp eq i32 %25, 1
  %27 = icmp eq i32 %2, 1
  br i1 %27, label %79, label %28

28:                                               ; preds = %7
  %29 = icmp sgt i32 %2, 0
  br i1 %29, label %30, label %216

30:                                               ; preds = %28
  %31 = icmp ult i32 %11, 32
  %32 = select i1 %31, i32 %11, i32 32
  %33 = icmp slt i32 %32, 1
  %34 = zext i8 %10 to i64
  %35 = lshr i64 524276, %8
  %36 = and i64 %35, 1
  %37 = icmp eq i64 %36, 0
  %38 = icmp eq i8 %10, 0
  %39 = shl i32 1, %21
  %40 = ashr i32 %39, 1
  %41 = zext i32 %32 to i64
  %42 = zext i32 %2 to i64
  %43 = xor i1 %26, true
  %44 = or i1 %33, %43
  %45 = or i1 %37, %38
  %46 = zext i8 %10 to i64
  %47 = icmp ugt i64 %41, 1
  %48 = select i1 %47, i64 %41, i64 1
  %49 = and i64 %48, 56
  %50 = add nsw i64 %49, -8
  %51 = lshr exact i64 %50, 3
  %52 = add nuw nsw i64 %51, 1
  %53 = and i64 %34, 240
  %54 = add nsw i64 %53, -16
  %55 = lshr exact i64 %54, 4
  %56 = add nuw nsw i64 %55, 1
  %57 = icmp ult i64 %48, 8
  %58 = and i64 %48, 56
  %59 = and i64 %52, 1
  %60 = icmp eq i64 %50, 0
  %61 = sub nuw nsw i64 %52, %59
  %62 = icmp eq i64 %59, 0
  %63 = icmp eq i64 %48, %58
  %64 = icmp ult i8 %10, 16
  %65 = and i64 %46, 240
  %66 = insertelement <8 x i32> undef, i32 %40, i32 0
  %67 = shufflevector <8 x i32> %66, <8 x i32> undef, <8 x i32> zeroinitializer
  %68 = insertelement <8 x i32> undef, i32 %40, i32 0
  %69 = shufflevector <8 x i32> %68, <8 x i32> undef, <8 x i32> zeroinitializer
  %70 = insertelement <8 x i32> undef, i32 %21, i32 0
  %71 = shufflevector <8 x i32> %70, <8 x i32> undef, <8 x i32> zeroinitializer
  %72 = insertelement <8 x i32> undef, i32 %21, i32 0
  %73 = shufflevector <8 x i32> %72, <8 x i32> undef, <8 x i32> zeroinitializer
  %74 = and i64 %56, 1
  %75 = icmp eq i64 %54, 0
  %76 = sub nuw nsw i64 %56, %74
  %77 = icmp eq i64 %74, 0
  %78 = icmp eq i64 %65, %46
  br label %80

79:                                               ; preds = %7
  tail call fastcc void @_ZN7libgav13dsp12_GLOBAL__N_113Adst8DcOnly_CILi8EsEEvPvabib(i8* %3, i1 zeroext %26, i32 %21, i1 zeroext true)
  br label %216

80:                                               ; preds = %213, %30
  %81 = phi i64 [ 0, %30 ], [ %214, %213 ]
  %82 = mul nuw nsw i64 %81, %34
  br i1 %44, label %137, label %83

83:                                               ; preds = %80
  %84 = getelementptr inbounds i16, i16* %18, i64 %82
  br i1 %57, label %124, label %85

85:                                               ; preds = %83
  br i1 %60, label %111, label %86

86:                                               ; preds = %85, %86
  %87 = phi i64 [ %108, %86 ], [ 0, %85 ]
  %88 = phi i64 [ %109, %86 ], [ %61, %85 ]
  %89 = getelementptr inbounds i16, i16* %84, i64 %87
  %90 = bitcast i16* %89 to <8 x i16>*
  %91 = load <8 x i16>, <8 x i16>* %90, align 2
  %92 = sext <8 x i16> %91 to <8 x i32>
  %93 = mul nsw <8 x i32> %92, <i32 2896, i32 2896, i32 2896, i32 2896, i32 2896, i32 2896, i32 2896, i32 2896>
  %94 = add nsw <8 x i32> %93, <i32 2048, i32 2048, i32 2048, i32 2048, i32 2048, i32 2048, i32 2048, i32 2048>
  %95 = lshr <8 x i32> %94, <i32 12, i32 12, i32 12, i32 12, i32 12, i32 12, i32 12, i32 12>
  %96 = trunc <8 x i32> %95 to <8 x i16>
  %97 = bitcast i16* %89 to <8 x i16>*
  store <8 x i16> %96, <8 x i16>* %97, align 2
  %98 = or i64 %87, 8
  %99 = getelementptr inbounds i16, i16* %84, i64 %98
  %100 = bitcast i16* %99 to <8 x i16>*
  %101 = load <8 x i16>, <8 x i16>* %100, align 2
  %102 = sext <8 x i16> %101 to <8 x i32>
  %103 = mul nsw <8 x i32> %102, <i32 2896, i32 2896, i32 2896, i32 2896, i32 2896, i32 2896, i32 2896, i32 2896>
  %104 = add nsw <8 x i32> %103, <i32 2048, i32 2048, i32 2048, i32 2048, i32 2048, i32 2048, i32 2048, i32 2048>
  %105 = lshr <8 x i32> %104, <i32 12, i32 12, i32 12, i32 12, i32 12, i32 12, i32 12, i32 12>
  %106 = trunc <8 x i32> %105 to <8 x i16>
  %107 = bitcast i16* %99 to <8 x i16>*
  store <8 x i16> %106, <8 x i16>* %107, align 2
  %108 = add i64 %87, 16
  %109 = add i64 %88, -2
  %110 = icmp eq i64 %109, 0
  br i1 %110, label %111, label %86, !llvm.loop !35

111:                                              ; preds = %86, %85
  %112 = phi i64 [ 0, %85 ], [ %108, %86 ]
  br i1 %62, label %123, label %113

113:                                              ; preds = %111
  %114 = getelementptr inbounds i16, i16* %84, i64 %112
  %115 = bitcast i16* %114 to <8 x i16>*
  %116 = load <8 x i16>, <8 x i16>* %115, align 2
  %117 = sext <8 x i16> %116 to <8 x i32>
  %118 = mul nsw <8 x i32> %117, <i32 2896, i32 2896, i32 2896, i32 2896, i32 2896, i32 2896, i32 2896, i32 2896>
  %119 = add nsw <8 x i32> %118, <i32 2048, i32 2048, i32 2048, i32 2048, i32 2048, i32 2048, i32 2048, i32 2048>
  %120 = lshr <8 x i32> %119, <i32 12, i32 12, i32 12, i32 12, i32 12, i32 12, i32 12, i32 12>
  %121 = trunc <8 x i32> %120 to <8 x i16>
  %122 = bitcast i16* %114 to <8 x i16>*
  store <8 x i16> %121, <8 x i16>* %122, align 2
  br label %123

123:                                              ; preds = %111, %113
  br i1 %63, label %137, label %124

124:                                              ; preds = %123, %83
  %125 = phi i64 [ 0, %83 ], [ %58, %123 ]
  br label %126

126:                                              ; preds = %124, %126
  %127 = phi i64 [ %135, %126 ], [ %125, %124 ]
  %128 = getelementptr inbounds i16, i16* %84, i64 %127
  %129 = load i16, i16* %128, align 2
  %130 = sext i16 %129 to i32
  %131 = mul nsw i32 %130, 2896
  %132 = add nsw i32 %131, 2048
  %133 = lshr i32 %132, 12
  %134 = trunc i32 %133 to i16
  store i16 %134, i16* %128, align 2
  %135 = add nuw nsw i64 %127, 1
  %136 = icmp ult i64 %135, %41
  br i1 %136, label %126, label %137, !llvm.loop !36

137:                                              ; preds = %126, %123, %80
  %138 = getelementptr inbounds i16, i16* %18, i64 %82
  %139 = bitcast i16* %138 to i8*
  tail call fastcc void @_ZN7libgav13dsp12_GLOBAL__N_17Adst8_CIsEEvPva(i8* %139)
  br i1 %45, label %213, label %140

140:                                              ; preds = %137
  br i1 %64, label %201, label %141

141:                                              ; preds = %140
  br i1 %75, label %181, label %142

142:                                              ; preds = %141, %142
  %143 = phi i64 [ %178, %142 ], [ 0, %141 ]
  %144 = phi i64 [ %179, %142 ], [ %76, %141 ]
  %145 = getelementptr inbounds i16, i16* %138, i64 %143
  %146 = bitcast i16* %145 to <8 x i16>*
  %147 = load <8 x i16>, <8 x i16>* %146, align 2
  %148 = getelementptr inbounds i16, i16* %145, i64 8
  %149 = bitcast i16* %148 to <8 x i16>*
  %150 = load <8 x i16>, <8 x i16>* %149, align 2
  %151 = sext <8 x i16> %147 to <8 x i32>
  %152 = sext <8 x i16> %150 to <8 x i32>
  %153 = add nsw <8 x i32> %67, %151
  %154 = add nsw <8 x i32> %69, %152
  %155 = ashr <8 x i32> %153, %71
  %156 = ashr <8 x i32> %154, %73
  %157 = trunc <8 x i32> %155 to <8 x i16>
  %158 = trunc <8 x i32> %156 to <8 x i16>
  %159 = bitcast i16* %145 to <8 x i16>*
  store <8 x i16> %157, <8 x i16>* %159, align 2
  %160 = bitcast i16* %148 to <8 x i16>*
  store <8 x i16> %158, <8 x i16>* %160, align 2
  %161 = or i64 %143, 16
  %162 = getelementptr inbounds i16, i16* %138, i64 %161
  %163 = bitcast i16* %162 to <8 x i16>*
  %164 = load <8 x i16>, <8 x i16>* %163, align 2
  %165 = getelementptr inbounds i16, i16* %162, i64 8
  %166 = bitcast i16* %165 to <8 x i16>*
  %167 = load <8 x i16>, <8 x i16>* %166, align 2
  %168 = sext <8 x i16> %164 to <8 x i32>
  %169 = sext <8 x i16> %167 to <8 x i32>
  %170 = add nsw <8 x i32> %67, %168
  %171 = add nsw <8 x i32> %69, %169
  %172 = ashr <8 x i32> %170, %71
  %173 = ashr <8 x i32> %171, %73
  %174 = trunc <8 x i32> %172 to <8 x i16>
  %175 = trunc <8 x i32> %173 to <8 x i16>
  %176 = bitcast i16* %162 to <8 x i16>*
  store <8 x i16> %174, <8 x i16>* %176, align 2
  %177 = bitcast i16* %165 to <8 x i16>*
  store <8 x i16> %175, <8 x i16>* %177, align 2
  %178 = add i64 %143, 32
  %179 = add i64 %144, -2
  %180 = icmp eq i64 %179, 0
  br i1 %180, label %181, label %142, !llvm.loop !37

181:                                              ; preds = %142, %141
  %182 = phi i64 [ 0, %141 ], [ %178, %142 ]
  br i1 %77, label %200, label %183

183:                                              ; preds = %181
  %184 = getelementptr inbounds i16, i16* %138, i64 %182
  %185 = bitcast i16* %184 to <8 x i16>*
  %186 = load <8 x i16>, <8 x i16>* %185, align 2
  %187 = getelementptr inbounds i16, i16* %184, i64 8
  %188 = bitcast i16* %187 to <8 x i16>*
  %189 = load <8 x i16>, <8 x i16>* %188, align 2
  %190 = sext <8 x i16> %186 to <8 x i32>
  %191 = sext <8 x i16> %189 to <8 x i32>
  %192 = add nsw <8 x i32> %67, %190
  %193 = add nsw <8 x i32> %69, %191
  %194 = ashr <8 x i32> %192, %71
  %195 = ashr <8 x i32> %193, %73
  %196 = trunc <8 x i32> %194 to <8 x i16>
  %197 = trunc <8 x i32> %195 to <8 x i16>
  %198 = bitcast i16* %184 to <8 x i16>*
  store <8 x i16> %196, <8 x i16>* %198, align 2
  %199 = bitcast i16* %187 to <8 x i16>*
  store <8 x i16> %197, <8 x i16>* %199, align 2
  br label %200

200:                                              ; preds = %181, %183
  br i1 %78, label %213, label %201

201:                                              ; preds = %200, %140
  %202 = phi i64 [ 0, %140 ], [ %65, %200 ]
  br label %203

203:                                              ; preds = %201, %203
  %204 = phi i64 [ %211, %203 ], [ %202, %201 ]
  %205 = getelementptr inbounds i16, i16* %138, i64 %204
  %206 = load i16, i16* %205, align 2
  %207 = sext i16 %206 to i32
  %208 = add nsw i32 %40, %207
  %209 = ashr i32 %208, %21
  %210 = trunc i32 %209 to i16
  store i16 %210, i16* %205, align 2
  %211 = add nuw nsw i64 %204, 1
  %212 = icmp eq i64 %211, %46
  br i1 %212, label %213, label %203, !llvm.loop !38

213:                                              ; preds = %203, %200, %137
  %214 = add nuw nsw i64 %81, 1
  %215 = icmp eq i64 %214, %42
  br i1 %215, label %216, label %80

216:                                              ; preds = %213, %28, %79
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN7libgav13dsp12_GLOBAL__N_115TransformLoop_CILi8EshLNS0_11Transform1DE1EXadL_ZNS1_13Adst8DcOnly_CILi8EsEEvPvabibEEXadL_ZNS1_7Adst8_CIsEEvS5_aEELb0EEEvNS_13TransformTypeENS_13TransformSizeEiS5_iiS5_(i8 zeroext, i8 zeroext, i32, i8*, i32, i32, i8* nocapture readonly) #0 {
  %8 = alloca [64 x i16], align 16
  %9 = zext i8 %1 to i64
  %10 = getelementptr inbounds [19 x i8], [19 x i8]* @_ZN7libgav115kTransformWidthE, i64 0, i64 %9
  %11 = load i8, i8* %10, align 1
  %12 = zext i8 %11 to i32
  %13 = getelementptr inbounds [19 x i8], [19 x i8]* @_ZN7libgav116kTransformHeightE, i64 0, i64 %9
  %14 = load i8, i8* %13, align 1
  %15 = zext i8 %14 to i32
  %16 = bitcast i8* %3 to i16*
  %17 = zext i8 %0 to i32
  %18 = shl i32 1, %17
  %19 = and i32 %18, 16608
  %20 = icmp eq i32 %19, 0
  %21 = and i32 %18, 33104
  %22 = icmp eq i32 %21, 0
  %23 = bitcast [64 x i16]* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 128, i8* nonnull %23) #4
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %23, i8 -86, i64 128, i1 false)
  %24 = icmp eq i8 %11, 0
  br i1 %24, label %44, label %25

25:                                               ; preds = %7
  %26 = zext i8 %11 to i64
  %27 = icmp eq i32 %2, 1
  %28 = getelementptr inbounds [64 x i16], [64 x i16]* %8, i64 0, i64 0
  %29 = icmp eq i8 %14, 0
  %30 = getelementptr inbounds i8, i8* %6, i64 4
  %31 = bitcast i8* %30 to i32*
  %32 = getelementptr inbounds i8, i8* %6, i64 8
  %33 = bitcast i8* %32 to i8**
  %34 = zext i8 %14 to i64
  %35 = sext i32 %5 to i64
  %36 = sext i32 %4 to i64
  %37 = zext i8 %11 to i64
  %38 = add nsw i64 %34, -1
  %39 = and i64 %34, 3
  %40 = icmp ult i64 %38, 3
  %41 = sub nsw i64 %34, %39
  %42 = icmp eq i64 %39, 0
  %43 = bitcast [64 x i16]* %8 to <8 x i16>*
  br label %45

44:                                               ; preds = %161, %7
  call void @llvm.lifetime.end.p0i8(i64 128, i8* nonnull %23) #4
  ret void

45:                                               ; preds = %161, %25
  %46 = phi i64 [ 0, %25 ], [ %162, %161 ]
  %47 = phi i32 [ 0, %25 ], [ %163, %161 ]
  %48 = xor i32 %47, -1
  %49 = add nsw i32 %48, %12
  %50 = trunc i64 %46 to i32
  %51 = select i1 %22, i32 %50, i32 %49
  %52 = sext i32 %51 to i64
  %53 = getelementptr inbounds i16, i16* %16, i64 %52
  br i1 %40, label %79, label %54

54:                                               ; preds = %45, %54
  %55 = phi i64 [ %76, %54 ], [ 0, %45 ]
  %56 = phi i64 [ %77, %54 ], [ %41, %45 ]
  %57 = mul nuw nsw i64 %55, %26
  %58 = getelementptr inbounds i16, i16* %53, i64 %57
  %59 = load i16, i16* %58, align 2
  %60 = getelementptr inbounds [64 x i16], [64 x i16]* %8, i64 0, i64 %55
  store i16 %59, i16* %60, align 8
  %61 = or i64 %55, 1
  %62 = mul nuw nsw i64 %61, %26
  %63 = getelementptr inbounds i16, i16* %53, i64 %62
  %64 = load i16, i16* %63, align 2
  %65 = getelementptr inbounds [64 x i16], [64 x i16]* %8, i64 0, i64 %61
  store i16 %64, i16* %65, align 2
  %66 = or i64 %55, 2
  %67 = mul nuw nsw i64 %66, %26
  %68 = getelementptr inbounds i16, i16* %53, i64 %67
  %69 = load i16, i16* %68, align 2
  %70 = getelementptr inbounds [64 x i16], [64 x i16]* %8, i64 0, i64 %66
  store i16 %69, i16* %70, align 4
  %71 = or i64 %55, 3
  %72 = mul nuw nsw i64 %71, %26
  %73 = getelementptr inbounds i16, i16* %53, i64 %72
  %74 = load i16, i16* %73, align 2
  %75 = getelementptr inbounds [64 x i16], [64 x i16]* %8, i64 0, i64 %71
  store i16 %74, i16* %75, align 2
  %76 = add nuw nsw i64 %55, 4
  %77 = add i64 %56, -4
  %78 = icmp eq i64 %77, 0
  br i1 %78, label %79, label %54

79:                                               ; preds = %54, %45
  %80 = phi i64 [ 0, %45 ], [ %76, %54 ]
  br i1 %42, label %91, label %81

81:                                               ; preds = %79, %81
  %82 = phi i64 [ %88, %81 ], [ %80, %79 ]
  %83 = phi i64 [ %89, %81 ], [ %39, %79 ]
  %84 = mul nuw nsw i64 %82, %26
  %85 = getelementptr inbounds i16, i16* %53, i64 %84
  %86 = load i16, i16* %85, align 2
  %87 = getelementptr inbounds [64 x i16], [64 x i16]* %8, i64 0, i64 %82
  store i16 %86, i16* %87, align 2
  %88 = add nuw nsw i64 %82, 1
  %89 = add i64 %83, -1
  %90 = icmp eq i64 %89, 0
  br i1 %90, label %91, label %81, !llvm.loop !39

91:                                               ; preds = %81, %79
  br i1 %27, label %92, label %157

92:                                               ; preds = %91
  %93 = load i16, i16* %28, align 16
  %94 = sext i16 %93 to i32
  %95 = mul nsw i32 %94, -4076
  %96 = mul nsw i32 %94, 401
  %97 = add nsw i32 %96, 2048
  %98 = ashr i32 %97, 12
  %99 = sext i32 %98 to i64
  %100 = add nsw i32 %95, 2048
  %101 = ashr i32 %100, 12
  %102 = sext i32 %101 to i64
  %103 = mul nsw i64 %99, 6730213752832
  %104 = ashr exact i64 %103, 32
  %105 = mul nsw i64 %102, 16252156248064
  %106 = ashr exact i64 %105, 32
  %107 = mul nsw i64 %99, 16252156248064
  %108 = ashr exact i64 %107, 32
  %109 = mul nsw i64 %102, 6730213752832
  %110 = ashr exact i64 %109, 32
  %111 = add nsw i64 %108, 2048
  %112 = add nsw i64 %111, %110
  %113 = lshr i64 %112, 12
  %114 = trunc i64 %113 to i32
  %115 = sub nsw i64 2048, %106
  %116 = add nsw i64 %115, %104
  %117 = lshr i64 %116, 12
  %118 = trunc i64 %117 to i32
  %119 = mul nsw i64 %99, 12438225289216
  %120 = ashr exact i64 %119, 32
  %121 = mul nsw i32 %101, 2896
  %122 = sext i32 %121 to i64
  %123 = add nsw i64 %120, 2048
  %124 = add nsw i64 %123, %122
  %125 = lshr i64 %124, 12
  %126 = trunc i64 %125 to i32
  %127 = sub nsw i64 %123, %122
  %128 = lshr i64 %127, 12
  %129 = trunc i64 %128 to i32
  %130 = mul i64 %113, 12438225289216
  %131 = ashr exact i64 %130, 32
  %132 = mul i64 %117, 12438225289216
  %133 = ashr exact i64 %132, 32
  %134 = add nsw i64 %131, 2048
  %135 = add nsw i64 %134, %133
  %136 = lshr i64 %135, 12
  %137 = trunc i64 %136 to i32
  %138 = sub nsw i64 %134, %133
  %139 = lshr i64 %138, 12
  %140 = trunc i64 %139 to i32
  %141 = sub nsw i32 0, %114
  %142 = sub nsw i32 0, %126
  %143 = sub nsw i32 0, %140
  %144 = sub nsw i32 0, %101
  %145 = insertelement <8 x i32> undef, i32 %98, i32 0
  %146 = insertelement <8 x i32> %145, i32 %141, i32 1
  %147 = insertelement <8 x i32> %146, i32 %137, i32 2
  %148 = insertelement <8 x i32> %147, i32 %142, i32 3
  %149 = insertelement <8 x i32> %148, i32 %129, i32 4
  %150 = insertelement <8 x i32> %149, i32 %143, i32 5
  %151 = insertelement <8 x i32> %150, i32 %118, i32 6
  %152 = insertelement <8 x i32> %151, i32 %144, i32 7
  %153 = icmp eq <8 x i32> %152, <i32 32768, i32 32768, i32 32768, i32 32768, i32 32768, i32 32768, i32 32768, i32 32768>
  %154 = zext <8 x i1> %153 to <8 x i32>
  %155 = sub nsw <8 x i32> %152, %154
  %156 = trunc <8 x i32> %155 to <8 x i16>
  store <8 x i16> %156, <8 x i16>* %43, align 16
  br label %158

157:                                              ; preds = %91
  call fastcc void @_ZN7libgav13dsp12_GLOBAL__N_17Adst8_CIsEEvPva(i8* nonnull %23)
  br label %158

158:                                              ; preds = %157, %92
  br i1 %29, label %161, label %159

159:                                              ; preds = %158
  %160 = add nsw i64 %46, %36
  br label %165

161:                                              ; preds = %165, %158
  %162 = add nuw nsw i64 %46, 1
  %163 = add nuw nsw i32 %47, 1
  %164 = icmp eq i64 %162, %37
  br i1 %164, label %44, label %45

165:                                              ; preds = %165, %159
  %166 = phi i64 [ 0, %159 ], [ %193, %165 ]
  %167 = phi i32 [ 0, %159 ], [ %194, %165 ]
  %168 = add nsw i64 %166, %35
  %169 = xor i32 %167, -1
  %170 = add nsw i32 %169, %15
  %171 = trunc i64 %166 to i32
  %172 = select i1 %20, i32 %171, i32 %170
  %173 = sext i32 %172 to i64
  %174 = getelementptr inbounds [64 x i16], [64 x i16]* %8, i64 0, i64 %173
  %175 = load i16, i16* %174, align 2
  %176 = sext i16 %175 to i32
  %177 = add nsw i32 %176, 8
  %178 = ashr i32 %177, 4
  %179 = load i32, i32* %31, align 4
  %180 = sext i32 %179 to i64
  %181 = mul nsw i64 %168, %180
  %182 = load i8*, i8** %33, align 8
  %183 = getelementptr inbounds i8, i8* %182, i64 %160
  %184 = getelementptr inbounds i8, i8* %183, i64 %181
  %185 = load i8, i8* %184, align 1
  %186 = zext i8 %185 to i32
  %187 = add nsw i32 %178, %186
  %188 = icmp slt i32 %187, 255
  %189 = select i1 %188, i32 %187, i32 255
  %190 = icmp sgt i32 %189, 0
  %191 = select i1 %190, i32 %189, i32 0
  %192 = trunc i32 %191 to i8
  store i8 %192, i8* %184, align 1
  %193 = add nuw nsw i64 %166, 1
  %194 = add nuw nsw i32 %167, 1
  %195 = icmp eq i64 %193, %34
  br i1 %195, label %161, label %165
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN7libgav13dsp12_GLOBAL__N_115TransformLoop_CILi8EshLNS0_11Transform1DE1EXadL_ZNS1_14Adst16DcOnly_CILi8EsEEvPvabibEEXadL_ZNS1_8Adst16_CIsEEvS5_aEELb1EEEvNS_13TransformTypeENS_13TransformSizeEiS5_iiS5_(i8 zeroext, i8 zeroext, i32, i8*, i32, i32, i8* nocapture readnone) #0 {
  %8 = zext i8 %1 to i64
  %9 = getelementptr inbounds [19 x i8], [19 x i8]* @_ZN7libgav115kTransformWidthE, i64 0, i64 %8
  %10 = load i8, i8* %9, align 1
  %11 = zext i8 %10 to i32
  %12 = getelementptr inbounds [19 x i8], [19 x i8]* @_ZN7libgav119kTransformWidthLog2E, i64 0, i64 %8
  %13 = load i8, i8* %12, align 1
  %14 = zext i8 %13 to i32
  %15 = getelementptr inbounds [19 x i8], [19 x i8]* @_ZN7libgav120kTransformHeightLog2E, i64 0, i64 %8
  %16 = load i8, i8* %15, align 1
  %17 = zext i8 %16 to i32
  %18 = bitcast i8* %3 to i16*
  %19 = getelementptr inbounds [19 x i8], [19 x i8]* @_ZN7libgav13dsp12_GLOBAL__N_118kTransformRowShiftE, i64 0, i64 %8
  %20 = load i8, i8* %19, align 1
  %21 = zext i8 %20 to i32
  %22 = sub nsw i32 %14, %17
  %23 = icmp slt i32 %22, 0
  %24 = sub nsw i32 0, %22
  %25 = select i1 %23, i32 %24, i32 %22
  %26 = icmp eq i32 %25, 1
  %27 = icmp eq i32 %2, 1
  br i1 %27, label %79, label %28

28:                                               ; preds = %7
  %29 = icmp sgt i32 %2, 0
  br i1 %29, label %30, label %216

30:                                               ; preds = %28
  %31 = icmp ult i32 %11, 32
  %32 = select i1 %31, i32 %11, i32 32
  %33 = icmp slt i32 %32, 1
  %34 = zext i8 %10 to i64
  %35 = lshr i64 524276, %8
  %36 = and i64 %35, 1
  %37 = icmp eq i64 %36, 0
  %38 = icmp eq i8 %10, 0
  %39 = shl i32 1, %21
  %40 = ashr i32 %39, 1
  %41 = zext i32 %32 to i64
  %42 = zext i32 %2 to i64
  %43 = xor i1 %26, true
  %44 = or i1 %33, %43
  %45 = or i1 %37, %38
  %46 = zext i8 %10 to i64
  %47 = icmp ugt i64 %41, 1
  %48 = select i1 %47, i64 %41, i64 1
  %49 = and i64 %48, 56
  %50 = add nsw i64 %49, -8
  %51 = lshr exact i64 %50, 3
  %52 = add nuw nsw i64 %51, 1
  %53 = and i64 %34, 240
  %54 = add nsw i64 %53, -16
  %55 = lshr exact i64 %54, 4
  %56 = add nuw nsw i64 %55, 1
  %57 = icmp ult i64 %48, 8
  %58 = and i64 %48, 56
  %59 = and i64 %52, 1
  %60 = icmp eq i64 %50, 0
  %61 = sub nuw nsw i64 %52, %59
  %62 = icmp eq i64 %59, 0
  %63 = icmp eq i64 %48, %58
  %64 = icmp ult i8 %10, 16
  %65 = and i64 %46, 240
  %66 = insertelement <8 x i32> undef, i32 %40, i32 0
  %67 = shufflevector <8 x i32> %66, <8 x i32> undef, <8 x i32> zeroinitializer
  %68 = insertelement <8 x i32> undef, i32 %40, i32 0
  %69 = shufflevector <8 x i32> %68, <8 x i32> undef, <8 x i32> zeroinitializer
  %70 = insertelement <8 x i32> undef, i32 %21, i32 0
  %71 = shufflevector <8 x i32> %70, <8 x i32> undef, <8 x i32> zeroinitializer
  %72 = insertelement <8 x i32> undef, i32 %21, i32 0
  %73 = shufflevector <8 x i32> %72, <8 x i32> undef, <8 x i32> zeroinitializer
  %74 = and i64 %56, 1
  %75 = icmp eq i64 %54, 0
  %76 = sub nuw nsw i64 %56, %74
  %77 = icmp eq i64 %74, 0
  %78 = icmp eq i64 %65, %46
  br label %80

79:                                               ; preds = %7
  tail call fastcc void @_ZN7libgav13dsp12_GLOBAL__N_114Adst16DcOnly_CILi8EsEEvPvabib(i8* %3, i1 zeroext %26, i32 %21, i1 zeroext true)
  br label %216

80:                                               ; preds = %213, %30
  %81 = phi i64 [ 0, %30 ], [ %214, %213 ]
  %82 = mul nuw nsw i64 %81, %34
  br i1 %44, label %137, label %83

83:                                               ; preds = %80
  %84 = getelementptr inbounds i16, i16* %18, i64 %82
  br i1 %57, label %124, label %85

85:                                               ; preds = %83
  br i1 %60, label %111, label %86

86:                                               ; preds = %85, %86
  %87 = phi i64 [ %108, %86 ], [ 0, %85 ]
  %88 = phi i64 [ %109, %86 ], [ %61, %85 ]
  %89 = getelementptr inbounds i16, i16* %84, i64 %87
  %90 = bitcast i16* %89 to <8 x i16>*
  %91 = load <8 x i16>, <8 x i16>* %90, align 2
  %92 = sext <8 x i16> %91 to <8 x i32>
  %93 = mul nsw <8 x i32> %92, <i32 2896, i32 2896, i32 2896, i32 2896, i32 2896, i32 2896, i32 2896, i32 2896>
  %94 = add nsw <8 x i32> %93, <i32 2048, i32 2048, i32 2048, i32 2048, i32 2048, i32 2048, i32 2048, i32 2048>
  %95 = lshr <8 x i32> %94, <i32 12, i32 12, i32 12, i32 12, i32 12, i32 12, i32 12, i32 12>
  %96 = trunc <8 x i32> %95 to <8 x i16>
  %97 = bitcast i16* %89 to <8 x i16>*
  store <8 x i16> %96, <8 x i16>* %97, align 2
  %98 = or i64 %87, 8
  %99 = getelementptr inbounds i16, i16* %84, i64 %98
  %100 = bitcast i16* %99 to <8 x i16>*
  %101 = load <8 x i16>, <8 x i16>* %100, align 2
  %102 = sext <8 x i16> %101 to <8 x i32>
  %103 = mul nsw <8 x i32> %102, <i32 2896, i32 2896, i32 2896, i32 2896, i32 2896, i32 2896, i32 2896, i32 2896>
  %104 = add nsw <8 x i32> %103, <i32 2048, i32 2048, i32 2048, i32 2048, i32 2048, i32 2048, i32 2048, i32 2048>
  %105 = lshr <8 x i32> %104, <i32 12, i32 12, i32 12, i32 12, i32 12, i32 12, i32 12, i32 12>
  %106 = trunc <8 x i32> %105 to <8 x i16>
  %107 = bitcast i16* %99 to <8 x i16>*
  store <8 x i16> %106, <8 x i16>* %107, align 2
  %108 = add i64 %87, 16
  %109 = add i64 %88, -2
  %110 = icmp eq i64 %109, 0
  br i1 %110, label %111, label %86, !llvm.loop !40

111:                                              ; preds = %86, %85
  %112 = phi i64 [ 0, %85 ], [ %108, %86 ]
  br i1 %62, label %123, label %113

113:                                              ; preds = %111
  %114 = getelementptr inbounds i16, i16* %84, i64 %112
  %115 = bitcast i16* %114 to <8 x i16>*
  %116 = load <8 x i16>, <8 x i16>* %115, align 2
  %117 = sext <8 x i16> %116 to <8 x i32>
  %118 = mul nsw <8 x i32> %117, <i32 2896, i32 2896, i32 2896, i32 2896, i32 2896, i32 2896, i32 2896, i32 2896>
  %119 = add nsw <8 x i32> %118, <i32 2048, i32 2048, i32 2048, i32 2048, i32 2048, i32 2048, i32 2048, i32 2048>
  %120 = lshr <8 x i32> %119, <i32 12, i32 12, i32 12, i32 12, i32 12, i32 12, i32 12, i32 12>
  %121 = trunc <8 x i32> %120 to <8 x i16>
  %122 = bitcast i16* %114 to <8 x i16>*
  store <8 x i16> %121, <8 x i16>* %122, align 2
  br label %123

123:                                              ; preds = %111, %113
  br i1 %63, label %137, label %124

124:                                              ; preds = %123, %83
  %125 = phi i64 [ 0, %83 ], [ %58, %123 ]
  br label %126

126:                                              ; preds = %124, %126
  %127 = phi i64 [ %135, %126 ], [ %125, %124 ]
  %128 = getelementptr inbounds i16, i16* %84, i64 %127
  %129 = load i16, i16* %128, align 2
  %130 = sext i16 %129 to i32
  %131 = mul nsw i32 %130, 2896
  %132 = add nsw i32 %131, 2048
  %133 = lshr i32 %132, 12
  %134 = trunc i32 %133 to i16
  store i16 %134, i16* %128, align 2
  %135 = add nuw nsw i64 %127, 1
  %136 = icmp ult i64 %135, %41
  br i1 %136, label %126, label %137, !llvm.loop !41

137:                                              ; preds = %126, %123, %80
  %138 = getelementptr inbounds i16, i16* %18, i64 %82
  %139 = bitcast i16* %138 to i8*
  tail call fastcc void @_ZN7libgav13dsp12_GLOBAL__N_18Adst16_CIsEEvPva(i8* %139)
  br i1 %45, label %213, label %140

140:                                              ; preds = %137
  br i1 %64, label %201, label %141

141:                                              ; preds = %140
  br i1 %75, label %181, label %142

142:                                              ; preds = %141, %142
  %143 = phi i64 [ %178, %142 ], [ 0, %141 ]
  %144 = phi i64 [ %179, %142 ], [ %76, %141 ]
  %145 = getelementptr inbounds i16, i16* %138, i64 %143
  %146 = bitcast i16* %145 to <8 x i16>*
  %147 = load <8 x i16>, <8 x i16>* %146, align 2
  %148 = getelementptr inbounds i16, i16* %145, i64 8
  %149 = bitcast i16* %148 to <8 x i16>*
  %150 = load <8 x i16>, <8 x i16>* %149, align 2
  %151 = sext <8 x i16> %147 to <8 x i32>
  %152 = sext <8 x i16> %150 to <8 x i32>
  %153 = add nsw <8 x i32> %67, %151
  %154 = add nsw <8 x i32> %69, %152
  %155 = ashr <8 x i32> %153, %71
  %156 = ashr <8 x i32> %154, %73
  %157 = trunc <8 x i32> %155 to <8 x i16>
  %158 = trunc <8 x i32> %156 to <8 x i16>
  %159 = bitcast i16* %145 to <8 x i16>*
  store <8 x i16> %157, <8 x i16>* %159, align 2
  %160 = bitcast i16* %148 to <8 x i16>*
  store <8 x i16> %158, <8 x i16>* %160, align 2
  %161 = or i64 %143, 16
  %162 = getelementptr inbounds i16, i16* %138, i64 %161
  %163 = bitcast i16* %162 to <8 x i16>*
  %164 = load <8 x i16>, <8 x i16>* %163, align 2
  %165 = getelementptr inbounds i16, i16* %162, i64 8
  %166 = bitcast i16* %165 to <8 x i16>*
  %167 = load <8 x i16>, <8 x i16>* %166, align 2
  %168 = sext <8 x i16> %164 to <8 x i32>
  %169 = sext <8 x i16> %167 to <8 x i32>
  %170 = add nsw <8 x i32> %67, %168
  %171 = add nsw <8 x i32> %69, %169
  %172 = ashr <8 x i32> %170, %71
  %173 = ashr <8 x i32> %171, %73
  %174 = trunc <8 x i32> %172 to <8 x i16>
  %175 = trunc <8 x i32> %173 to <8 x i16>
  %176 = bitcast i16* %162 to <8 x i16>*
  store <8 x i16> %174, <8 x i16>* %176, align 2
  %177 = bitcast i16* %165 to <8 x i16>*
  store <8 x i16> %175, <8 x i16>* %177, align 2
  %178 = add i64 %143, 32
  %179 = add i64 %144, -2
  %180 = icmp eq i64 %179, 0
  br i1 %180, label %181, label %142, !llvm.loop !42

181:                                              ; preds = %142, %141
  %182 = phi i64 [ 0, %141 ], [ %178, %142 ]
  br i1 %77, label %200, label %183

183:                                              ; preds = %181
  %184 = getelementptr inbounds i16, i16* %138, i64 %182
  %185 = bitcast i16* %184 to <8 x i16>*
  %186 = load <8 x i16>, <8 x i16>* %185, align 2
  %187 = getelementptr inbounds i16, i16* %184, i64 8
  %188 = bitcast i16* %187 to <8 x i16>*
  %189 = load <8 x i16>, <8 x i16>* %188, align 2
  %190 = sext <8 x i16> %186 to <8 x i32>
  %191 = sext <8 x i16> %189 to <8 x i32>
  %192 = add nsw <8 x i32> %67, %190
  %193 = add nsw <8 x i32> %69, %191
  %194 = ashr <8 x i32> %192, %71
  %195 = ashr <8 x i32> %193, %73
  %196 = trunc <8 x i32> %194 to <8 x i16>
  %197 = trunc <8 x i32> %195 to <8 x i16>
  %198 = bitcast i16* %184 to <8 x i16>*
  store <8 x i16> %196, <8 x i16>* %198, align 2
  %199 = bitcast i16* %187 to <8 x i16>*
  store <8 x i16> %197, <8 x i16>* %199, align 2
  br label %200

200:                                              ; preds = %181, %183
  br i1 %78, label %213, label %201

201:                                              ; preds = %200, %140
  %202 = phi i64 [ 0, %140 ], [ %65, %200 ]
  br label %203

203:                                              ; preds = %201, %203
  %204 = phi i64 [ %211, %203 ], [ %202, %201 ]
  %205 = getelementptr inbounds i16, i16* %138, i64 %204
  %206 = load i16, i16* %205, align 2
  %207 = sext i16 %206 to i32
  %208 = add nsw i32 %40, %207
  %209 = ashr i32 %208, %21
  %210 = trunc i32 %209 to i16
  store i16 %210, i16* %205, align 2
  %211 = add nuw nsw i64 %204, 1
  %212 = icmp eq i64 %211, %46
  br i1 %212, label %213, label %203, !llvm.loop !43

213:                                              ; preds = %203, %200, %137
  %214 = add nuw nsw i64 %81, 1
  %215 = icmp eq i64 %214, %42
  br i1 %215, label %216, label %80

216:                                              ; preds = %213, %28, %79
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN7libgav13dsp12_GLOBAL__N_115TransformLoop_CILi8EshLNS0_11Transform1DE1EXadL_ZNS1_14Adst16DcOnly_CILi8EsEEvPvabibEEXadL_ZNS1_8Adst16_CIsEEvS5_aEELb0EEEvNS_13TransformTypeENS_13TransformSizeEiS5_iiS5_(i8 zeroext, i8 zeroext, i32, i8*, i32, i32, i8* nocapture readonly) #0 {
  %8 = alloca [64 x i16], align 16
  %9 = zext i8 %1 to i64
  %10 = getelementptr inbounds [19 x i8], [19 x i8]* @_ZN7libgav115kTransformWidthE, i64 0, i64 %9
  %11 = load i8, i8* %10, align 1
  %12 = zext i8 %11 to i32
  %13 = getelementptr inbounds [19 x i8], [19 x i8]* @_ZN7libgav116kTransformHeightE, i64 0, i64 %9
  %14 = load i8, i8* %13, align 1
  %15 = zext i8 %14 to i32
  %16 = bitcast i8* %3 to i16*
  %17 = zext i8 %0 to i32
  %18 = shl i32 1, %17
  %19 = and i32 %18, 16608
  %20 = icmp eq i32 %19, 0
  %21 = and i32 %18, 33104
  %22 = icmp eq i32 %21, 0
  %23 = bitcast [64 x i16]* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 128, i8* nonnull %23) #4
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %23, i8 -86, i64 128, i1 false)
  %24 = icmp eq i8 %11, 0
  br i1 %24, label %42, label %25

25:                                               ; preds = %7
  %26 = zext i8 %11 to i64
  %27 = icmp eq i32 %2, 1
  %28 = icmp eq i8 %14, 0
  %29 = getelementptr inbounds i8, i8* %6, i64 4
  %30 = bitcast i8* %29 to i32*
  %31 = getelementptr inbounds i8, i8* %6, i64 8
  %32 = bitcast i8* %31 to i8**
  %33 = zext i8 %14 to i64
  %34 = sext i32 %5 to i64
  %35 = sext i32 %4 to i64
  %36 = zext i8 %11 to i64
  %37 = add nsw i64 %33, -1
  %38 = and i64 %33, 3
  %39 = icmp ult i64 %37, 3
  %40 = sub nsw i64 %33, %38
  %41 = icmp eq i64 %38, 0
  br label %43

42:                                               ; preds = %95, %7
  call void @llvm.lifetime.end.p0i8(i64 128, i8* nonnull %23) #4
  ret void

43:                                               ; preds = %95, %25
  %44 = phi i64 [ 0, %25 ], [ %96, %95 ]
  %45 = phi i32 [ 0, %25 ], [ %97, %95 ]
  %46 = xor i32 %45, -1
  %47 = add nsw i32 %46, %12
  %48 = trunc i64 %44 to i32
  %49 = select i1 %22, i32 %48, i32 %47
  %50 = sext i32 %49 to i64
  %51 = getelementptr inbounds i16, i16* %16, i64 %50
  br i1 %39, label %77, label %52

52:                                               ; preds = %43, %52
  %53 = phi i64 [ %74, %52 ], [ 0, %43 ]
  %54 = phi i64 [ %75, %52 ], [ %40, %43 ]
  %55 = mul nuw nsw i64 %53, %26
  %56 = getelementptr inbounds i16, i16* %51, i64 %55
  %57 = load i16, i16* %56, align 2
  %58 = getelementptr inbounds [64 x i16], [64 x i16]* %8, i64 0, i64 %53
  store i16 %57, i16* %58, align 8
  %59 = or i64 %53, 1
  %60 = mul nuw nsw i64 %59, %26
  %61 = getelementptr inbounds i16, i16* %51, i64 %60
  %62 = load i16, i16* %61, align 2
  %63 = getelementptr inbounds [64 x i16], [64 x i16]* %8, i64 0, i64 %59
  store i16 %62, i16* %63, align 2
  %64 = or i64 %53, 2
  %65 = mul nuw nsw i64 %64, %26
  %66 = getelementptr inbounds i16, i16* %51, i64 %65
  %67 = load i16, i16* %66, align 2
  %68 = getelementptr inbounds [64 x i16], [64 x i16]* %8, i64 0, i64 %64
  store i16 %67, i16* %68, align 4
  %69 = or i64 %53, 3
  %70 = mul nuw nsw i64 %69, %26
  %71 = getelementptr inbounds i16, i16* %51, i64 %70
  %72 = load i16, i16* %71, align 2
  %73 = getelementptr inbounds [64 x i16], [64 x i16]* %8, i64 0, i64 %69
  store i16 %72, i16* %73, align 2
  %74 = add nuw nsw i64 %53, 4
  %75 = add i64 %54, -4
  %76 = icmp eq i64 %75, 0
  br i1 %76, label %77, label %52

77:                                               ; preds = %52, %43
  %78 = phi i64 [ 0, %43 ], [ %74, %52 ]
  br i1 %41, label %89, label %79

79:                                               ; preds = %77, %79
  %80 = phi i64 [ %86, %79 ], [ %78, %77 ]
  %81 = phi i64 [ %87, %79 ], [ %38, %77 ]
  %82 = mul nuw nsw i64 %80, %26
  %83 = getelementptr inbounds i16, i16* %51, i64 %82
  %84 = load i16, i16* %83, align 2
  %85 = getelementptr inbounds [64 x i16], [64 x i16]* %8, i64 0, i64 %80
  store i16 %84, i16* %85, align 2
  %86 = add nuw nsw i64 %80, 1
  %87 = add i64 %81, -1
  %88 = icmp eq i64 %87, 0
  br i1 %88, label %89, label %79, !llvm.loop !44

89:                                               ; preds = %79, %77
  br i1 %27, label %90, label %91

90:                                               ; preds = %89
  call fastcc void @_ZN7libgav13dsp12_GLOBAL__N_114Adst16DcOnly_CILi8EsEEvPvabib(i8* nonnull %23, i1 zeroext false, i32 0, i1 zeroext false)
  br label %92

91:                                               ; preds = %89
  call fastcc void @_ZN7libgav13dsp12_GLOBAL__N_18Adst16_CIsEEvPva(i8* nonnull %23)
  br label %92

92:                                               ; preds = %91, %90
  br i1 %28, label %95, label %93

93:                                               ; preds = %92
  %94 = add nsw i64 %44, %35
  br label %99

95:                                               ; preds = %99, %92
  %96 = add nuw nsw i64 %44, 1
  %97 = add nuw nsw i32 %45, 1
  %98 = icmp eq i64 %96, %36
  br i1 %98, label %42, label %43

99:                                               ; preds = %99, %93
  %100 = phi i64 [ 0, %93 ], [ %127, %99 ]
  %101 = phi i32 [ 0, %93 ], [ %128, %99 ]
  %102 = add nsw i64 %100, %34
  %103 = xor i32 %101, -1
  %104 = add nsw i32 %103, %15
  %105 = trunc i64 %100 to i32
  %106 = select i1 %20, i32 %105, i32 %104
  %107 = sext i32 %106 to i64
  %108 = getelementptr inbounds [64 x i16], [64 x i16]* %8, i64 0, i64 %107
  %109 = load i16, i16* %108, align 2
  %110 = sext i16 %109 to i32
  %111 = add nsw i32 %110, 8
  %112 = ashr i32 %111, 4
  %113 = load i32, i32* %30, align 4
  %114 = sext i32 %113 to i64
  %115 = mul nsw i64 %102, %114
  %116 = load i8*, i8** %32, align 8
  %117 = getelementptr inbounds i8, i8* %116, i64 %94
  %118 = getelementptr inbounds i8, i8* %117, i64 %115
  %119 = load i8, i8* %118, align 1
  %120 = zext i8 %119 to i32
  %121 = add nsw i32 %112, %120
  %122 = icmp slt i32 %121, 255
  %123 = select i1 %122, i32 %121, i32 255
  %124 = icmp sgt i32 %123, 0
  %125 = select i1 %124, i32 %123, i32 0
  %126 = trunc i32 %125 to i8
  store i8 %126, i8* %118, align 1
  %127 = add nuw nsw i64 %100, 1
  %128 = add nuw nsw i32 %101, 1
  %129 = icmp eq i64 %127, %33
  br i1 %129, label %95, label %99
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN7libgav13dsp12_GLOBAL__N_115TransformLoop_CILi8EshLNS0_11Transform1DE2EXadL_ZNS1_17Identity4DcOnly_CILi8EsEEvPvabibEEXadL_ZNS1_14Identity4Row_CIsEEvS5_aEELb1EEEvNS_13TransformTypeENS_13TransformSizeEiS5_iiS5_(i8 zeroext, i8 zeroext, i32, i8*, i32, i32, i8* nocapture readnone) #0 {
  %8 = zext i8 %1 to i64
  %9 = getelementptr inbounds [19 x i8], [19 x i8]* @_ZN7libgav115kTransformWidthE, i64 0, i64 %8
  %10 = load i8, i8* %9, align 1
  %11 = zext i8 %10 to i32
  %12 = getelementptr inbounds [19 x i8], [19 x i8]* @_ZN7libgav119kTransformWidthLog2E, i64 0, i64 %8
  %13 = load i8, i8* %12, align 1
  %14 = zext i8 %13 to i32
  %15 = getelementptr inbounds [19 x i8], [19 x i8]* @_ZN7libgav120kTransformHeightLog2E, i64 0, i64 %8
  %16 = load i8, i8* %15, align 1
  %17 = zext i8 %16 to i32
  %18 = bitcast i8* %3 to i16*
  %19 = getelementptr inbounds [19 x i8], [19 x i8]* @_ZN7libgav13dsp12_GLOBAL__N_118kTransformRowShiftE, i64 0, i64 %8
  %20 = load i8, i8* %19, align 1
  %21 = sub nsw i32 %14, %17
  %22 = icmp slt i32 %21, 0
  %23 = sub nsw i32 0, %21
  %24 = select i1 %22, i32 %23, i32 %21
  %25 = icmp eq i32 %24, 1
  %26 = icmp eq i32 %2, 1
  br i1 %26, label %55, label %27

27:                                               ; preds = %7
  %28 = icmp sgt i32 %2, 0
  br i1 %28, label %29, label %182

29:                                               ; preds = %27
  %30 = icmp ult i32 %11, 32
  %31 = select i1 %30, i32 %11, i32 32
  %32 = icmp slt i32 %31, 1
  %33 = zext i8 %10 to i64
  %34 = sext i8 %20 to i32
  %35 = shl nsw i32 %34, 12
  %36 = or i32 %35, 2048
  %37 = add nsw i32 %34, 12
  %38 = zext i32 %31 to i64
  %39 = zext i32 %2 to i64
  %40 = xor i1 %25, true
  %41 = or i1 %32, %40
  %42 = icmp ugt i64 %38, 1
  %43 = select i1 %42, i64 %38, i64 1
  %44 = and i64 %43, 56
  %45 = add nsw i64 %44, -8
  %46 = lshr exact i64 %45, 3
  %47 = add nuw nsw i64 %46, 1
  %48 = icmp ult i64 %43, 8
  %49 = and i64 %43, 56
  %50 = and i64 %47, 1
  %51 = icmp eq i64 %45, 0
  %52 = sub nuw nsw i64 %47, %50
  %53 = icmp eq i64 %50, 0
  %54 = icmp eq i64 %43, %49
  br label %78

55:                                               ; preds = %7
  %56 = zext i8 %20 to i32
  %57 = load i16, i16* %18, align 2
  br i1 %25, label %58, label %64

58:                                               ; preds = %55
  %59 = sext i16 %57 to i32
  %60 = mul nsw i32 %59, 2896
  %61 = add nsw i32 %60, 2048
  %62 = lshr i32 %61, 12
  %63 = trunc i32 %62 to i16
  store i16 %63, i16* %18, align 2
  br label %64

64:                                               ; preds = %55, %58
  %65 = phi i16 [ %63, %58 ], [ %57, %55 ]
  %66 = shl nuw nsw i32 %56, 12
  %67 = or i32 %66, 2048
  %68 = sext i16 %65 to i32
  %69 = mul nsw i32 %68, 5793
  %70 = add nsw i32 %69, %67
  %71 = add nuw nsw i32 %56, 12
  %72 = ashr i32 %70, %71
  %73 = icmp slt i32 %72, 32767
  %74 = select i1 %73, i32 %72, i32 32767
  %75 = icmp sgt i32 %74, -32768
  %76 = select i1 %75, i32 %74, i32 -32768
  %77 = trunc i32 %76 to i16
  store i16 %77, i16* %18, align 2
  br label %182

78:                                               ; preds = %135, %29
  %79 = phi i64 [ 0, %29 ], [ %180, %135 ]
  %80 = mul nuw nsw i64 %79, %33
  br i1 %41, label %135, label %81

81:                                               ; preds = %78
  %82 = getelementptr inbounds i16, i16* %18, i64 %80
  br i1 %48, label %122, label %83

83:                                               ; preds = %81
  br i1 %51, label %109, label %84

84:                                               ; preds = %83, %84
  %85 = phi i64 [ %106, %84 ], [ 0, %83 ]
  %86 = phi i64 [ %107, %84 ], [ %52, %83 ]
  %87 = getelementptr inbounds i16, i16* %82, i64 %85
  %88 = bitcast i16* %87 to <8 x i16>*
  %89 = load <8 x i16>, <8 x i16>* %88, align 2
  %90 = sext <8 x i16> %89 to <8 x i32>
  %91 = mul nsw <8 x i32> %90, <i32 2896, i32 2896, i32 2896, i32 2896, i32 2896, i32 2896, i32 2896, i32 2896>
  %92 = add nsw <8 x i32> %91, <i32 2048, i32 2048, i32 2048, i32 2048, i32 2048, i32 2048, i32 2048, i32 2048>
  %93 = lshr <8 x i32> %92, <i32 12, i32 12, i32 12, i32 12, i32 12, i32 12, i32 12, i32 12>
  %94 = trunc <8 x i32> %93 to <8 x i16>
  %95 = bitcast i16* %87 to <8 x i16>*
  store <8 x i16> %94, <8 x i16>* %95, align 2
  %96 = or i64 %85, 8
  %97 = getelementptr inbounds i16, i16* %82, i64 %96
  %98 = bitcast i16* %97 to <8 x i16>*
  %99 = load <8 x i16>, <8 x i16>* %98, align 2
  %100 = sext <8 x i16> %99 to <8 x i32>
  %101 = mul nsw <8 x i32> %100, <i32 2896, i32 2896, i32 2896, i32 2896, i32 2896, i32 2896, i32 2896, i32 2896>
  %102 = add nsw <8 x i32> %101, <i32 2048, i32 2048, i32 2048, i32 2048, i32 2048, i32 2048, i32 2048, i32 2048>
  %103 = lshr <8 x i32> %102, <i32 12, i32 12, i32 12, i32 12, i32 12, i32 12, i32 12, i32 12>
  %104 = trunc <8 x i32> %103 to <8 x i16>
  %105 = bitcast i16* %97 to <8 x i16>*
  store <8 x i16> %104, <8 x i16>* %105, align 2
  %106 = add i64 %85, 16
  %107 = add i64 %86, -2
  %108 = icmp eq i64 %107, 0
  br i1 %108, label %109, label %84, !llvm.loop !45

109:                                              ; preds = %84, %83
  %110 = phi i64 [ 0, %83 ], [ %106, %84 ]
  br i1 %53, label %121, label %111

111:                                              ; preds = %109
  %112 = getelementptr inbounds i16, i16* %82, i64 %110
  %113 = bitcast i16* %112 to <8 x i16>*
  %114 = load <8 x i16>, <8 x i16>* %113, align 2
  %115 = sext <8 x i16> %114 to <8 x i32>
  %116 = mul nsw <8 x i32> %115, <i32 2896, i32 2896, i32 2896, i32 2896, i32 2896, i32 2896, i32 2896, i32 2896>
  %117 = add nsw <8 x i32> %116, <i32 2048, i32 2048, i32 2048, i32 2048, i32 2048, i32 2048, i32 2048, i32 2048>
  %118 = lshr <8 x i32> %117, <i32 12, i32 12, i32 12, i32 12, i32 12, i32 12, i32 12, i32 12>
  %119 = trunc <8 x i32> %118 to <8 x i16>
  %120 = bitcast i16* %112 to <8 x i16>*
  store <8 x i16> %119, <8 x i16>* %120, align 2
  br label %121

121:                                              ; preds = %109, %111
  br i1 %54, label %135, label %122

122:                                              ; preds = %121, %81
  %123 = phi i64 [ 0, %81 ], [ %49, %121 ]
  br label %124

124:                                              ; preds = %122, %124
  %125 = phi i64 [ %133, %124 ], [ %123, %122 ]
  %126 = getelementptr inbounds i16, i16* %82, i64 %125
  %127 = load i16, i16* %126, align 2
  %128 = sext i16 %127 to i32
  %129 = mul nsw i32 %128, 2896
  %130 = add nsw i32 %129, 2048
  %131 = lshr i32 %130, 12
  %132 = trunc i32 %131 to i16
  store i16 %132, i16* %126, align 2
  %133 = add nuw nsw i64 %125, 1
  %134 = icmp ult i64 %133, %38
  br i1 %134, label %124, label %135, !llvm.loop !46

135:                                              ; preds = %124, %121, %78
  %136 = getelementptr inbounds i16, i16* %18, i64 %80
  %137 = load i16, i16* %136, align 2
  %138 = sext i16 %137 to i32
  %139 = mul nsw i32 %138, 5793
  %140 = add nsw i32 %139, %36
  %141 = ashr i32 %140, %37
  %142 = icmp slt i32 %141, 32767
  %143 = select i1 %142, i32 %141, i32 32767
  %144 = icmp sgt i32 %143, -32768
  %145 = select i1 %144, i32 %143, i32 -32768
  %146 = trunc i32 %145 to i16
  store i16 %146, i16* %136, align 2
  %147 = getelementptr inbounds i16, i16* %136, i64 1
  %148 = load i16, i16* %147, align 2
  %149 = sext i16 %148 to i32
  %150 = mul nsw i32 %149, 5793
  %151 = add nsw i32 %150, %36
  %152 = ashr i32 %151, %37
  %153 = icmp slt i32 %152, 32767
  %154 = select i1 %153, i32 %152, i32 32767
  %155 = icmp sgt i32 %154, -32768
  %156 = select i1 %155, i32 %154, i32 -32768
  %157 = trunc i32 %156 to i16
  store i16 %157, i16* %147, align 2
  %158 = getelementptr inbounds i16, i16* %136, i64 2
  %159 = load i16, i16* %158, align 2
  %160 = sext i16 %159 to i32
  %161 = mul nsw i32 %160, 5793
  %162 = add nsw i32 %161, %36
  %163 = ashr i32 %162, %37
  %164 = icmp slt i32 %163, 32767
  %165 = select i1 %164, i32 %163, i32 32767
  %166 = icmp sgt i32 %165, -32768
  %167 = select i1 %166, i32 %165, i32 -32768
  %168 = trunc i32 %167 to i16
  store i16 %168, i16* %158, align 2
  %169 = getelementptr inbounds i16, i16* %136, i64 3
  %170 = load i16, i16* %169, align 2
  %171 = sext i16 %170 to i32
  %172 = mul nsw i32 %171, 5793
  %173 = add nsw i32 %172, %36
  %174 = ashr i32 %173, %37
  %175 = icmp slt i32 %174, 32767
  %176 = select i1 %175, i32 %174, i32 32767
  %177 = icmp sgt i32 %176, -32768
  %178 = select i1 %177, i32 %176, i32 -32768
  %179 = trunc i32 %178 to i16
  store i16 %179, i16* %169, align 2
  %180 = add nuw nsw i64 %79, 1
  %181 = icmp eq i64 %180, %39
  br i1 %181, label %182, label %78

182:                                              ; preds = %135, %27, %64
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN7libgav13dsp12_GLOBAL__N_115TransformLoop_CILi8EshLNS0_11Transform1DE2EXadL_ZNS1_17Identity4DcOnly_CILi8EsEEvPvabibEEXadL_ZNS1_17Identity4Column_CIsEEvS5_aEELb0EEEvNS_13TransformTypeENS_13TransformSizeEiS5_iiS5_(i8 zeroext, i8 zeroext, i32, i8*, i32, i32, i8* nocapture readonly) #0 {
  %8 = alloca [64 x i16], align 16
  %9 = zext i8 %1 to i64
  %10 = getelementptr inbounds [19 x i8], [19 x i8]* @_ZN7libgav115kTransformWidthE, i64 0, i64 %9
  %11 = load i8, i8* %10, align 1
  %12 = zext i8 %11 to i32
  %13 = getelementptr inbounds [19 x i8], [19 x i8]* @_ZN7libgav116kTransformHeightE, i64 0, i64 %9
  %14 = load i8, i8* %13, align 1
  %15 = bitcast i8* %3 to i16*
  %16 = zext i8 %0 to i32
  %17 = shl i32 1, %16
  %18 = and i32 %17, 33104
  %19 = icmp eq i32 %18, 0
  %20 = bitcast [64 x i16]* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 128, i8* nonnull %20) #4
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %20, i8 -86, i64 128, i1 false)
  %21 = icmp eq i8 %11, 0
  br i1 %21, label %44, label %22

22:                                               ; preds = %7
  %23 = zext i8 %11 to i64
  %24 = icmp eq i32 %2, 1
  %25 = getelementptr inbounds [64 x i16], [64 x i16]* %8, i64 0, i64 0
  %26 = getelementptr inbounds [64 x i16], [64 x i16]* %8, i64 0, i64 1
  %27 = getelementptr inbounds [64 x i16], [64 x i16]* %8, i64 0, i64 2
  %28 = getelementptr inbounds [64 x i16], [64 x i16]* %8, i64 0, i64 3
  %29 = icmp eq i8 %14, 0
  %30 = getelementptr inbounds i8, i8* %6, i64 4
  %31 = bitcast i8* %30 to i32*
  %32 = getelementptr inbounds i8, i8* %6, i64 8
  %33 = bitcast i8* %32 to i8**
  %34 = zext i8 %14 to i64
  %35 = sext i32 %5 to i64
  %36 = sext i32 %4 to i64
  %37 = zext i8 %11 to i64
  %38 = add nsw i64 %34, -1
  %39 = and i64 %34, 3
  %40 = icmp ult i64 %38, 3
  %41 = sub nsw i64 %34, %39
  %42 = icmp eq i64 %39, 0
  %43 = icmp eq i8 %14, 1
  br label %45

44:                                               ; preds = %134, %7
  call void @llvm.lifetime.end.p0i8(i64 128, i8* nonnull %20) #4
  ret void

45:                                               ; preds = %134, %22
  %46 = phi i64 [ 0, %22 ], [ %135, %134 ]
  %47 = phi i32 [ 0, %22 ], [ %136, %134 ]
  %48 = xor i32 %47, -1
  %49 = add nsw i32 %48, %12
  %50 = trunc i64 %46 to i32
  %51 = select i1 %19, i32 %50, i32 %49
  %52 = sext i32 %51 to i64
  %53 = getelementptr inbounds i16, i16* %15, i64 %52
  br i1 %40, label %79, label %54

54:                                               ; preds = %45, %54
  %55 = phi i64 [ %76, %54 ], [ 0, %45 ]
  %56 = phi i64 [ %77, %54 ], [ %41, %45 ]
  %57 = mul nuw nsw i64 %55, %23
  %58 = getelementptr inbounds i16, i16* %53, i64 %57
  %59 = load i16, i16* %58, align 2
  %60 = getelementptr inbounds [64 x i16], [64 x i16]* %8, i64 0, i64 %55
  store i16 %59, i16* %60, align 8
  %61 = or i64 %55, 1
  %62 = mul nuw nsw i64 %61, %23
  %63 = getelementptr inbounds i16, i16* %53, i64 %62
  %64 = load i16, i16* %63, align 2
  %65 = getelementptr inbounds [64 x i16], [64 x i16]* %8, i64 0, i64 %61
  store i16 %64, i16* %65, align 2
  %66 = or i64 %55, 2
  %67 = mul nuw nsw i64 %66, %23
  %68 = getelementptr inbounds i16, i16* %53, i64 %67
  %69 = load i16, i16* %68, align 2
  %70 = getelementptr inbounds [64 x i16], [64 x i16]* %8, i64 0, i64 %66
  store i16 %69, i16* %70, align 4
  %71 = or i64 %55, 3
  %72 = mul nuw nsw i64 %71, %23
  %73 = getelementptr inbounds i16, i16* %53, i64 %72
  %74 = load i16, i16* %73, align 2
  %75 = getelementptr inbounds [64 x i16], [64 x i16]* %8, i64 0, i64 %71
  store i16 %74, i16* %75, align 2
  %76 = add nuw nsw i64 %55, 4
  %77 = add i64 %56, -4
  %78 = icmp eq i64 %77, 0
  br i1 %78, label %79, label %54

79:                                               ; preds = %54, %45
  %80 = phi i64 [ 0, %45 ], [ %76, %54 ]
  br i1 %42, label %91, label %81

81:                                               ; preds = %79, %81
  %82 = phi i64 [ %88, %81 ], [ %80, %79 ]
  %83 = phi i64 [ %89, %81 ], [ %39, %79 ]
  %84 = mul nuw nsw i64 %82, %23
  %85 = getelementptr inbounds i16, i16* %53, i64 %84
  %86 = load i16, i16* %85, align 2
  %87 = getelementptr inbounds [64 x i16], [64 x i16]* %8, i64 0, i64 %82
  store i16 %86, i16* %87, align 2
  %88 = add nuw nsw i64 %82, 1
  %89 = add i64 %83, -1
  %90 = icmp eq i64 %89, 0
  br i1 %90, label %91, label %81, !llvm.loop !47

91:                                               ; preds = %81, %79
  %92 = load i16, i16* %25, align 16
  %93 = sext i16 %92 to i32
  %94 = mul nsw i32 %93, 5793
  %95 = add nsw i32 %94, 34816
  %96 = ashr i32 %95, 16
  %97 = trunc i32 %96 to i16
  store i16 %97, i16* %25, align 16
  br i1 %24, label %117, label %98

98:                                               ; preds = %91
  %99 = load i16, i16* %26, align 2
  %100 = sext i16 %99 to i32
  %101 = mul nsw i32 %100, 5793
  %102 = add nsw i32 %101, 34816
  %103 = ashr i32 %102, 16
  %104 = trunc i32 %103 to i16
  store i16 %104, i16* %26, align 2
  %105 = load i16, i16* %27, align 4
  %106 = sext i16 %105 to i32
  %107 = mul nsw i32 %106, 5793
  %108 = add nsw i32 %107, 34816
  %109 = ashr i32 %108, 16
  %110 = trunc i32 %109 to i16
  store i16 %110, i16* %27, align 4
  %111 = load i16, i16* %28, align 2
  %112 = sext i16 %111 to i32
  %113 = mul nsw i32 %112, 5793
  %114 = add nsw i32 %113, 34816
  %115 = ashr i32 %114, 16
  %116 = trunc i32 %115 to i16
  store i16 %116, i16* %28, align 2
  br label %117

117:                                              ; preds = %91, %98
  br i1 %29, label %134, label %118

118:                                              ; preds = %117
  %119 = add nsw i64 %46, %36
  %120 = load i32, i32* %31, align 4
  %121 = sext i32 %120 to i64
  %122 = mul nsw i64 %35, %121
  %123 = load i8*, i8** %33, align 8
  %124 = getelementptr inbounds i8, i8* %123, i64 %119
  %125 = getelementptr inbounds i8, i8* %124, i64 %122
  %126 = load i8, i8* %125, align 1
  %127 = zext i8 %126 to i32
  %128 = add nsw i32 %96, %127
  %129 = icmp slt i32 %128, 255
  %130 = select i1 %129, i32 %128, i32 255
  %131 = icmp sgt i32 %130, 0
  %132 = select i1 %131, i32 %130, i32 0
  %133 = trunc i32 %132 to i8
  store i8 %133, i8* %125, align 1
  br i1 %43, label %134, label %138

134:                                              ; preds = %138, %118, %117
  %135 = add nuw nsw i64 %46, 1
  %136 = add nuw nsw i32 %47, 1
  %137 = icmp eq i64 %135, %37
  br i1 %137, label %44, label %45

138:                                              ; preds = %118, %138
  %139 = phi i64 [ %158, %138 ], [ 1, %118 ]
  %140 = getelementptr inbounds [64 x i16], [64 x i16]* %8, i64 0, i64 %139
  %141 = load i16, i16* %140, align 2
  %142 = add nsw i64 %139, %35
  %143 = load i32, i32* %31, align 4
  %144 = sext i32 %143 to i64
  %145 = mul nsw i64 %142, %144
  %146 = load i8*, i8** %33, align 8
  %147 = getelementptr inbounds i8, i8* %146, i64 %119
  %148 = getelementptr inbounds i8, i8* %147, i64 %145
  %149 = load i8, i8* %148, align 1
  %150 = zext i8 %149 to i32
  %151 = sext i16 %141 to i32
  %152 = add nsw i32 %150, %151
  %153 = icmp slt i32 %152, 255
  %154 = select i1 %153, i32 %152, i32 255
  %155 = icmp sgt i32 %154, 0
  %156 = select i1 %155, i32 %154, i32 0
  %157 = trunc i32 %156 to i8
  store i8 %157, i8* %148, align 1
  %158 = add nuw nsw i64 %139, 1
  %159 = icmp eq i64 %158, %34
  br i1 %159, label %134, label %138
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN7libgav13dsp12_GLOBAL__N_115TransformLoop_CILi8EshLNS0_11Transform1DE2EXadL_ZNS1_17Identity8DcOnly_CILi8EsEEvPvabibEEXadL_ZNS1_14Identity8Row_CIsEEvS5_aEELb1EEEvNS_13TransformTypeENS_13TransformSizeEiS5_iiS5_(i8 zeroext, i8 zeroext, i32, i8*, i32, i32, i8* nocapture readnone) #0 {
  %8 = zext i8 %1 to i64
  %9 = getelementptr inbounds [19 x i8], [19 x i8]* @_ZN7libgav115kTransformWidthE, i64 0, i64 %8
  %10 = load i8, i8* %9, align 1
  %11 = zext i8 %10 to i32
  %12 = getelementptr inbounds [19 x i8], [19 x i8]* @_ZN7libgav119kTransformWidthLog2E, i64 0, i64 %8
  %13 = load i8, i8* %12, align 1
  %14 = zext i8 %13 to i32
  %15 = getelementptr inbounds [19 x i8], [19 x i8]* @_ZN7libgav120kTransformHeightLog2E, i64 0, i64 %8
  %16 = load i8, i8* %15, align 1
  %17 = zext i8 %16 to i32
  %18 = bitcast i8* %3 to i16*
  %19 = getelementptr inbounds [19 x i8], [19 x i8]* @_ZN7libgav13dsp12_GLOBAL__N_118kTransformRowShiftE, i64 0, i64 %8
  %20 = load i8, i8* %19, align 1
  %21 = sub nsw i32 %14, %17
  %22 = icmp slt i32 %21, 0
  %23 = sub nsw i32 0, %21
  %24 = select i1 %22, i32 %23, i32 %21
  %25 = icmp eq i32 %24, 1
  %26 = icmp eq i32 %2, 1
  br i1 %26, label %58, label %27

27:                                               ; preds = %7
  %28 = icmp sgt i32 %2, 0
  br i1 %28, label %29, label %153

29:                                               ; preds = %27
  %30 = icmp ult i32 %11, 32
  %31 = select i1 %30, i32 %11, i32 32
  %32 = icmp slt i32 %31, 1
  %33 = zext i8 %10 to i64
  %34 = sext i8 %20 to i32
  %35 = shl i32 1, %34
  %36 = ashr i32 %35, 1
  %37 = zext i32 %31 to i64
  %38 = zext i32 %2 to i64
  %39 = xor i1 %25, true
  %40 = or i1 %32, %39
  %41 = icmp ugt i64 %37, 1
  %42 = select i1 %41, i64 %37, i64 1
  %43 = insertelement <8 x i32> undef, i32 %36, i32 0
  %44 = shufflevector <8 x i32> %43, <8 x i32> undef, <8 x i32> zeroinitializer
  %45 = insertelement <8 x i32> undef, i32 %34, i32 0
  %46 = shufflevector <8 x i32> %45, <8 x i32> undef, <8 x i32> zeroinitializer
  %47 = and i64 %42, 56
  %48 = add nsw i64 %47, -8
  %49 = lshr exact i64 %48, 3
  %50 = add nuw nsw i64 %49, 1
  %51 = icmp ult i64 %42, 8
  %52 = and i64 %42, 56
  %53 = and i64 %50, 1
  %54 = icmp eq i64 %48, 0
  %55 = sub nuw nsw i64 %50, %53
  %56 = icmp eq i64 %53, 0
  %57 = icmp eq i64 %42, %52
  br label %80

58:                                               ; preds = %7
  %59 = zext i8 %20 to i32
  %60 = load i16, i16* %18, align 2
  br i1 %25, label %61, label %67

61:                                               ; preds = %58
  %62 = sext i16 %60 to i32
  %63 = mul nsw i32 %62, 2896
  %64 = add nsw i32 %63, 2048
  %65 = lshr i32 %64, 12
  %66 = trunc i32 %65 to i16
  store i16 %66, i16* %18, align 2
  br label %67

67:                                               ; preds = %58, %61
  %68 = phi i16 [ %66, %61 ], [ %60, %58 ]
  %69 = sext i16 %68 to i32
  %70 = shl nsw i32 %69, 1
  %71 = shl i32 1, %59
  %72 = ashr i32 %71, 1
  %73 = add nsw i32 %70, %72
  %74 = ashr i32 %73, %59
  %75 = icmp slt i32 %74, 32767
  %76 = select i1 %75, i32 %74, i32 32767
  %77 = icmp sgt i32 %76, -32768
  %78 = select i1 %77, i32 %76, i32 -32768
  %79 = trunc i32 %78 to i16
  store i16 %79, i16* %18, align 2
  br label %153

80:                                               ; preds = %137, %29
  %81 = phi i64 [ 0, %29 ], [ %151, %137 ]
  %82 = mul nuw nsw i64 %81, %33
  br i1 %40, label %137, label %83

83:                                               ; preds = %80
  %84 = getelementptr inbounds i16, i16* %18, i64 %82
  br i1 %51, label %124, label %85

85:                                               ; preds = %83
  br i1 %54, label %111, label %86

86:                                               ; preds = %85, %86
  %87 = phi i64 [ %108, %86 ], [ 0, %85 ]
  %88 = phi i64 [ %109, %86 ], [ %55, %85 ]
  %89 = getelementptr inbounds i16, i16* %84, i64 %87
  %90 = bitcast i16* %89 to <8 x i16>*
  %91 = load <8 x i16>, <8 x i16>* %90, align 2
  %92 = sext <8 x i16> %91 to <8 x i32>
  %93 = mul nsw <8 x i32> %92, <i32 2896, i32 2896, i32 2896, i32 2896, i32 2896, i32 2896, i32 2896, i32 2896>
  %94 = add nsw <8 x i32> %93, <i32 2048, i32 2048, i32 2048, i32 2048, i32 2048, i32 2048, i32 2048, i32 2048>
  %95 = lshr <8 x i32> %94, <i32 12, i32 12, i32 12, i32 12, i32 12, i32 12, i32 12, i32 12>
  %96 = trunc <8 x i32> %95 to <8 x i16>
  %97 = bitcast i16* %89 to <8 x i16>*
  store <8 x i16> %96, <8 x i16>* %97, align 2
  %98 = or i64 %87, 8
  %99 = getelementptr inbounds i16, i16* %84, i64 %98
  %100 = bitcast i16* %99 to <8 x i16>*
  %101 = load <8 x i16>, <8 x i16>* %100, align 2
  %102 = sext <8 x i16> %101 to <8 x i32>
  %103 = mul nsw <8 x i32> %102, <i32 2896, i32 2896, i32 2896, i32 2896, i32 2896, i32 2896, i32 2896, i32 2896>
  %104 = add nsw <8 x i32> %103, <i32 2048, i32 2048, i32 2048, i32 2048, i32 2048, i32 2048, i32 2048, i32 2048>
  %105 = lshr <8 x i32> %104, <i32 12, i32 12, i32 12, i32 12, i32 12, i32 12, i32 12, i32 12>
  %106 = trunc <8 x i32> %105 to <8 x i16>
  %107 = bitcast i16* %99 to <8 x i16>*
  store <8 x i16> %106, <8 x i16>* %107, align 2
  %108 = add i64 %87, 16
  %109 = add i64 %88, -2
  %110 = icmp eq i64 %109, 0
  br i1 %110, label %111, label %86, !llvm.loop !48

111:                                              ; preds = %86, %85
  %112 = phi i64 [ 0, %85 ], [ %108, %86 ]
  br i1 %56, label %123, label %113

113:                                              ; preds = %111
  %114 = getelementptr inbounds i16, i16* %84, i64 %112
  %115 = bitcast i16* %114 to <8 x i16>*
  %116 = load <8 x i16>, <8 x i16>* %115, align 2
  %117 = sext <8 x i16> %116 to <8 x i32>
  %118 = mul nsw <8 x i32> %117, <i32 2896, i32 2896, i32 2896, i32 2896, i32 2896, i32 2896, i32 2896, i32 2896>
  %119 = add nsw <8 x i32> %118, <i32 2048, i32 2048, i32 2048, i32 2048, i32 2048, i32 2048, i32 2048, i32 2048>
  %120 = lshr <8 x i32> %119, <i32 12, i32 12, i32 12, i32 12, i32 12, i32 12, i32 12, i32 12>
  %121 = trunc <8 x i32> %120 to <8 x i16>
  %122 = bitcast i16* %114 to <8 x i16>*
  store <8 x i16> %121, <8 x i16>* %122, align 2
  br label %123

123:                                              ; preds = %111, %113
  br i1 %57, label %137, label %124

124:                                              ; preds = %123, %83
  %125 = phi i64 [ 0, %83 ], [ %52, %123 ]
  br label %126

126:                                              ; preds = %124, %126
  %127 = phi i64 [ %135, %126 ], [ %125, %124 ]
  %128 = getelementptr inbounds i16, i16* %84, i64 %127
  %129 = load i16, i16* %128, align 2
  %130 = sext i16 %129 to i32
  %131 = mul nsw i32 %130, 2896
  %132 = add nsw i32 %131, 2048
  %133 = lshr i32 %132, 12
  %134 = trunc i32 %133 to i16
  store i16 %134, i16* %128, align 2
  %135 = add nuw nsw i64 %127, 1
  %136 = icmp ult i64 %135, %37
  br i1 %136, label %126, label %137, !llvm.loop !49

137:                                              ; preds = %126, %123, %80
  %138 = getelementptr inbounds i16, i16* %18, i64 %82
  %139 = bitcast i16* %138 to <8 x i16>*
  %140 = load <8 x i16>, <8 x i16>* %139, align 2
  %141 = sext <8 x i16> %140 to <8 x i32>
  %142 = shl nsw <8 x i32> %141, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %143 = add nsw <8 x i32> %142, %44
  %144 = ashr <8 x i32> %143, %46
  %145 = icmp slt <8 x i32> %144, <i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767>
  %146 = select <8 x i1> %145, <8 x i32> %144, <8 x i32> <i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767>
  %147 = icmp sgt <8 x i32> %146, <i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768>
  %148 = select <8 x i1> %147, <8 x i32> %146, <8 x i32> <i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768>
  %149 = trunc <8 x i32> %148 to <8 x i16>
  %150 = bitcast i16* %138 to <8 x i16>*
  store <8 x i16> %149, <8 x i16>* %150, align 2
  %151 = add nuw nsw i64 %81, 1
  %152 = icmp eq i64 %151, %38
  br i1 %152, label %153, label %80

153:                                              ; preds = %137, %27, %67
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN7libgav13dsp12_GLOBAL__N_115TransformLoop_CILi8EshLNS0_11Transform1DE2EXadL_ZNS1_17Identity8DcOnly_CILi8EsEEvPvabibEEXadL_ZNS1_17Identity8Column_CIsEEvS5_aEELb0EEEvNS_13TransformTypeENS_13TransformSizeEiS5_iiS5_(i8 zeroext, i8 zeroext, i32, i8*, i32, i32, i8* nocapture readonly) #0 {
  %8 = alloca [64 x i16], align 16
  %9 = zext i8 %1 to i64
  %10 = getelementptr inbounds [19 x i8], [19 x i8]* @_ZN7libgav115kTransformWidthE, i64 0, i64 %9
  %11 = load i8, i8* %10, align 1
  %12 = zext i8 %11 to i32
  %13 = getelementptr inbounds [19 x i8], [19 x i8]* @_ZN7libgav116kTransformHeightE, i64 0, i64 %9
  %14 = load i8, i8* %13, align 1
  %15 = bitcast i8* %3 to i16*
  %16 = zext i8 %0 to i32
  %17 = shl i32 1, %16
  %18 = and i32 %17, 33104
  %19 = icmp eq i32 %18, 0
  %20 = bitcast [64 x i16]* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 128, i8* nonnull %20) #4
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %20, i8 -86, i64 128, i1 false)
  %21 = icmp eq i8 %11, 0
  br i1 %21, label %48, label %22

22:                                               ; preds = %7
  %23 = zext i8 %11 to i64
  %24 = icmp eq i32 %2, 1
  %25 = getelementptr inbounds [64 x i16], [64 x i16]* %8, i64 0, i64 0
  %26 = getelementptr inbounds [64 x i16], [64 x i16]* %8, i64 0, i64 1
  %27 = getelementptr inbounds [64 x i16], [64 x i16]* %8, i64 0, i64 2
  %28 = getelementptr inbounds [64 x i16], [64 x i16]* %8, i64 0, i64 3
  %29 = getelementptr inbounds [64 x i16], [64 x i16]* %8, i64 0, i64 4
  %30 = getelementptr inbounds [64 x i16], [64 x i16]* %8, i64 0, i64 5
  %31 = getelementptr inbounds [64 x i16], [64 x i16]* %8, i64 0, i64 6
  %32 = getelementptr inbounds [64 x i16], [64 x i16]* %8, i64 0, i64 7
  %33 = icmp eq i8 %14, 0
  %34 = getelementptr inbounds i8, i8* %6, i64 4
  %35 = bitcast i8* %34 to i32*
  %36 = getelementptr inbounds i8, i8* %6, i64 8
  %37 = bitcast i8* %36 to i8**
  %38 = zext i8 %14 to i64
  %39 = sext i32 %5 to i64
  %40 = sext i32 %4 to i64
  %41 = zext i8 %11 to i64
  %42 = add nsw i64 %38, -1
  %43 = and i64 %38, 3
  %44 = icmp ult i64 %42, 3
  %45 = sub nsw i64 %38, %43
  %46 = icmp eq i64 %43, 0
  %47 = icmp eq i8 %14, 1
  br label %49

48:                                               ; preds = %154, %7
  call void @llvm.lifetime.end.p0i8(i64 128, i8* nonnull %20) #4
  ret void

49:                                               ; preds = %154, %22
  %50 = phi i64 [ 0, %22 ], [ %155, %154 ]
  %51 = phi i32 [ 0, %22 ], [ %156, %154 ]
  %52 = xor i32 %51, -1
  %53 = add nsw i32 %52, %12
  %54 = trunc i64 %50 to i32
  %55 = select i1 %19, i32 %54, i32 %53
  %56 = sext i32 %55 to i64
  %57 = getelementptr inbounds i16, i16* %15, i64 %56
  br i1 %44, label %83, label %58

58:                                               ; preds = %49, %58
  %59 = phi i64 [ %80, %58 ], [ 0, %49 ]
  %60 = phi i64 [ %81, %58 ], [ %45, %49 ]
  %61 = mul nuw nsw i64 %59, %23
  %62 = getelementptr inbounds i16, i16* %57, i64 %61
  %63 = load i16, i16* %62, align 2
  %64 = getelementptr inbounds [64 x i16], [64 x i16]* %8, i64 0, i64 %59
  store i16 %63, i16* %64, align 8
  %65 = or i64 %59, 1
  %66 = mul nuw nsw i64 %65, %23
  %67 = getelementptr inbounds i16, i16* %57, i64 %66
  %68 = load i16, i16* %67, align 2
  %69 = getelementptr inbounds [64 x i16], [64 x i16]* %8, i64 0, i64 %65
  store i16 %68, i16* %69, align 2
  %70 = or i64 %59, 2
  %71 = mul nuw nsw i64 %70, %23
  %72 = getelementptr inbounds i16, i16* %57, i64 %71
  %73 = load i16, i16* %72, align 2
  %74 = getelementptr inbounds [64 x i16], [64 x i16]* %8, i64 0, i64 %70
  store i16 %73, i16* %74, align 4
  %75 = or i64 %59, 3
  %76 = mul nuw nsw i64 %75, %23
  %77 = getelementptr inbounds i16, i16* %57, i64 %76
  %78 = load i16, i16* %77, align 2
  %79 = getelementptr inbounds [64 x i16], [64 x i16]* %8, i64 0, i64 %75
  store i16 %78, i16* %79, align 2
  %80 = add nuw nsw i64 %59, 4
  %81 = add i64 %60, -4
  %82 = icmp eq i64 %81, 0
  br i1 %82, label %83, label %58

83:                                               ; preds = %58, %49
  %84 = phi i64 [ 0, %49 ], [ %80, %58 ]
  br i1 %46, label %95, label %85

85:                                               ; preds = %83, %85
  %86 = phi i64 [ %92, %85 ], [ %84, %83 ]
  %87 = phi i64 [ %93, %85 ], [ %43, %83 ]
  %88 = mul nuw nsw i64 %86, %23
  %89 = getelementptr inbounds i16, i16* %57, i64 %88
  %90 = load i16, i16* %89, align 2
  %91 = getelementptr inbounds [64 x i16], [64 x i16]* %8, i64 0, i64 %86
  store i16 %90, i16* %91, align 2
  %92 = add nuw nsw i64 %86, 1
  %93 = add i64 %87, -1
  %94 = icmp eq i64 %93, 0
  br i1 %94, label %95, label %85, !llvm.loop !50

95:                                               ; preds = %85, %83
  %96 = load i16, i16* %25, align 16
  %97 = sext i16 %96 to i32
  %98 = add nsw i32 %97, 4
  %99 = ashr i32 %98, 3
  %100 = trunc i32 %99 to i16
  store i16 %100, i16* %25, align 16
  br i1 %24, label %137, label %101

101:                                              ; preds = %95
  %102 = load i16, i16* %26, align 2
  %103 = sext i16 %102 to i32
  %104 = add nsw i32 %103, 4
  %105 = ashr i32 %104, 3
  %106 = trunc i32 %105 to i16
  store i16 %106, i16* %26, align 2
  %107 = load i16, i16* %27, align 4
  %108 = sext i16 %107 to i32
  %109 = add nsw i32 %108, 4
  %110 = ashr i32 %109, 3
  %111 = trunc i32 %110 to i16
  store i16 %111, i16* %27, align 4
  %112 = load i16, i16* %28, align 2
  %113 = sext i16 %112 to i32
  %114 = add nsw i32 %113, 4
  %115 = ashr i32 %114, 3
  %116 = trunc i32 %115 to i16
  store i16 %116, i16* %28, align 2
  %117 = load i16, i16* %29, align 8
  %118 = sext i16 %117 to i32
  %119 = add nsw i32 %118, 4
  %120 = ashr i32 %119, 3
  %121 = trunc i32 %120 to i16
  store i16 %121, i16* %29, align 8
  %122 = load i16, i16* %30, align 2
  %123 = sext i16 %122 to i32
  %124 = add nsw i32 %123, 4
  %125 = ashr i32 %124, 3
  %126 = trunc i32 %125 to i16
  store i16 %126, i16* %30, align 2
  %127 = load i16, i16* %31, align 4
  %128 = sext i16 %127 to i32
  %129 = add nsw i32 %128, 4
  %130 = ashr i32 %129, 3
  %131 = trunc i32 %130 to i16
  store i16 %131, i16* %31, align 4
  %132 = load i16, i16* %32, align 2
  %133 = sext i16 %132 to i32
  %134 = add nsw i32 %133, 4
  %135 = ashr i32 %134, 3
  %136 = trunc i32 %135 to i16
  store i16 %136, i16* %32, align 2
  br label %137

137:                                              ; preds = %95, %101
  br i1 %33, label %154, label %138

138:                                              ; preds = %137
  %139 = add nsw i64 %50, %40
  %140 = load i32, i32* %35, align 4
  %141 = sext i32 %140 to i64
  %142 = mul nsw i64 %39, %141
  %143 = load i8*, i8** %37, align 8
  %144 = getelementptr inbounds i8, i8* %143, i64 %139
  %145 = getelementptr inbounds i8, i8* %144, i64 %142
  %146 = load i8, i8* %145, align 1
  %147 = zext i8 %146 to i32
  %148 = add nsw i32 %99, %147
  %149 = icmp slt i32 %148, 255
  %150 = select i1 %149, i32 %148, i32 255
  %151 = icmp sgt i32 %150, 0
  %152 = select i1 %151, i32 %150, i32 0
  %153 = trunc i32 %152 to i8
  store i8 %153, i8* %145, align 1
  br i1 %47, label %154, label %158

154:                                              ; preds = %158, %138, %137
  %155 = add nuw nsw i64 %50, 1
  %156 = add nuw nsw i32 %51, 1
  %157 = icmp eq i64 %155, %41
  br i1 %157, label %48, label %49

158:                                              ; preds = %138, %158
  %159 = phi i64 [ %178, %158 ], [ 1, %138 ]
  %160 = getelementptr inbounds [64 x i16], [64 x i16]* %8, i64 0, i64 %159
  %161 = load i16, i16* %160, align 2
  %162 = add nsw i64 %159, %39
  %163 = load i32, i32* %35, align 4
  %164 = sext i32 %163 to i64
  %165 = mul nsw i64 %162, %164
  %166 = load i8*, i8** %37, align 8
  %167 = getelementptr inbounds i8, i8* %166, i64 %139
  %168 = getelementptr inbounds i8, i8* %167, i64 %165
  %169 = load i8, i8* %168, align 1
  %170 = zext i8 %169 to i32
  %171 = sext i16 %161 to i32
  %172 = add nsw i32 %170, %171
  %173 = icmp slt i32 %172, 255
  %174 = select i1 %173, i32 %172, i32 255
  %175 = icmp sgt i32 %174, 0
  %176 = select i1 %175, i32 %174, i32 0
  %177 = trunc i32 %176 to i8
  store i8 %177, i8* %168, align 1
  %178 = add nuw nsw i64 %159, 1
  %179 = icmp eq i64 %178, %38
  br i1 %179, label %154, label %158
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN7libgav13dsp12_GLOBAL__N_115TransformLoop_CILi8EshLNS0_11Transform1DE2EXadL_ZNS1_18Identity16DcOnly_CILi8EsEEvPvabibEEXadL_ZNS1_15Identity16Row_CIsEEvS5_aEELb1EEEvNS_13TransformTypeENS_13TransformSizeEiS5_iiS5_(i8 zeroext, i8 zeroext, i32, i8*, i32, i32, i8* nocapture readnone) #0 {
  %8 = zext i8 %1 to i64
  %9 = getelementptr inbounds [19 x i8], [19 x i8]* @_ZN7libgav115kTransformWidthE, i64 0, i64 %8
  %10 = load i8, i8* %9, align 1
  %11 = zext i8 %10 to i32
  %12 = getelementptr inbounds [19 x i8], [19 x i8]* @_ZN7libgav119kTransformWidthLog2E, i64 0, i64 %8
  %13 = load i8, i8* %12, align 1
  %14 = zext i8 %13 to i32
  %15 = getelementptr inbounds [19 x i8], [19 x i8]* @_ZN7libgav120kTransformHeightLog2E, i64 0, i64 %8
  %16 = load i8, i8* %15, align 1
  %17 = zext i8 %16 to i32
  %18 = bitcast i8* %3 to i16*
  %19 = getelementptr inbounds [19 x i8], [19 x i8]* @_ZN7libgav13dsp12_GLOBAL__N_118kTransformRowShiftE, i64 0, i64 %8
  %20 = load i8, i8* %19, align 1
  %21 = sub nsw i32 %14, %17
  %22 = icmp slt i32 %21, 0
  %23 = sub nsw i32 0, %21
  %24 = select i1 %22, i32 %23, i32 %21
  %25 = icmp eq i32 %24, 1
  %26 = icmp eq i32 %2, 1
  br i1 %26, label %59, label %27

27:                                               ; preds = %7
  %28 = icmp sgt i32 %2, 0
  br i1 %28, label %29, label %168

29:                                               ; preds = %27
  %30 = icmp ult i32 %11, 32
  %31 = select i1 %30, i32 %11, i32 32
  %32 = icmp slt i32 %31, 1
  %33 = zext i8 %10 to i64
  %34 = sext i8 %20 to i32
  %35 = shl i32 2048, %34
  %36 = add i32 %35, 2048
  %37 = add nsw i32 %34, 12
  %38 = zext i32 %31 to i64
  %39 = zext i32 %2 to i64
  %40 = xor i1 %25, true
  %41 = or i1 %32, %40
  %42 = icmp ugt i64 %38, 1
  %43 = select i1 %42, i64 %38, i64 1
  %44 = and i64 %43, 56
  %45 = add nsw i64 %44, -8
  %46 = lshr exact i64 %45, 3
  %47 = add nuw nsw i64 %46, 1
  %48 = icmp ult i64 %43, 8
  %49 = and i64 %43, 56
  %50 = and i64 %47, 1
  %51 = icmp eq i64 %45, 0
  %52 = sub nuw nsw i64 %47, %50
  %53 = icmp eq i64 %50, 0
  %54 = icmp eq i64 %43, %49
  %55 = insertelement <8 x i32> undef, i32 %36, i32 0
  %56 = shufflevector <8 x i32> %55, <8 x i32> undef, <8 x i32> zeroinitializer
  %57 = insertelement <8 x i32> undef, i32 %37, i32 0
  %58 = shufflevector <8 x i32> %57, <8 x i32> undef, <8 x i32> zeroinitializer
  br label %82

59:                                               ; preds = %7
  %60 = zext i8 %20 to i32
  %61 = load i16, i16* %18, align 2
  br i1 %25, label %62, label %68

62:                                               ; preds = %59
  %63 = sext i16 %61 to i32
  %64 = mul nsw i32 %63, 2896
  %65 = add nsw i32 %64, 2048
  %66 = lshr i32 %65, 12
  %67 = trunc i32 %66 to i16
  store i16 %67, i16* %18, align 2
  br label %68

68:                                               ; preds = %59, %62
  %69 = phi i16 [ %67, %62 ], [ %61, %59 ]
  %70 = shl i32 2048, %60
  %71 = add i32 %70, 2048
  %72 = sext i16 %69 to i32
  %73 = mul nsw i32 %72, 11586
  %74 = add nsw i32 %71, %73
  %75 = add nuw nsw i32 %60, 12
  %76 = ashr i32 %74, %75
  %77 = icmp slt i32 %76, 32767
  %78 = select i1 %77, i32 %76, i32 32767
  %79 = icmp sgt i32 %78, -32768
  %80 = select i1 %79, i32 %78, i32 -32768
  %81 = trunc i32 %80 to i16
  store i16 %81, i16* %18, align 2
  br label %168

82:                                               ; preds = %139, %29
  %83 = phi i64 [ 0, %29 ], [ %166, %139 ]
  %84 = mul nuw nsw i64 %83, %33
  br i1 %41, label %139, label %85

85:                                               ; preds = %82
  %86 = getelementptr inbounds i16, i16* %18, i64 %84
  br i1 %48, label %126, label %87

87:                                               ; preds = %85
  br i1 %51, label %113, label %88

88:                                               ; preds = %87, %88
  %89 = phi i64 [ %110, %88 ], [ 0, %87 ]
  %90 = phi i64 [ %111, %88 ], [ %52, %87 ]
  %91 = getelementptr inbounds i16, i16* %86, i64 %89
  %92 = bitcast i16* %91 to <8 x i16>*
  %93 = load <8 x i16>, <8 x i16>* %92, align 2
  %94 = sext <8 x i16> %93 to <8 x i32>
  %95 = mul nsw <8 x i32> %94, <i32 2896, i32 2896, i32 2896, i32 2896, i32 2896, i32 2896, i32 2896, i32 2896>
  %96 = add nsw <8 x i32> %95, <i32 2048, i32 2048, i32 2048, i32 2048, i32 2048, i32 2048, i32 2048, i32 2048>
  %97 = lshr <8 x i32> %96, <i32 12, i32 12, i32 12, i32 12, i32 12, i32 12, i32 12, i32 12>
  %98 = trunc <8 x i32> %97 to <8 x i16>
  %99 = bitcast i16* %91 to <8 x i16>*
  store <8 x i16> %98, <8 x i16>* %99, align 2
  %100 = or i64 %89, 8
  %101 = getelementptr inbounds i16, i16* %86, i64 %100
  %102 = bitcast i16* %101 to <8 x i16>*
  %103 = load <8 x i16>, <8 x i16>* %102, align 2
  %104 = sext <8 x i16> %103 to <8 x i32>
  %105 = mul nsw <8 x i32> %104, <i32 2896, i32 2896, i32 2896, i32 2896, i32 2896, i32 2896, i32 2896, i32 2896>
  %106 = add nsw <8 x i32> %105, <i32 2048, i32 2048, i32 2048, i32 2048, i32 2048, i32 2048, i32 2048, i32 2048>
  %107 = lshr <8 x i32> %106, <i32 12, i32 12, i32 12, i32 12, i32 12, i32 12, i32 12, i32 12>
  %108 = trunc <8 x i32> %107 to <8 x i16>
  %109 = bitcast i16* %101 to <8 x i16>*
  store <8 x i16> %108, <8 x i16>* %109, align 2
  %110 = add i64 %89, 16
  %111 = add i64 %90, -2
  %112 = icmp eq i64 %111, 0
  br i1 %112, label %113, label %88, !llvm.loop !51

113:                                              ; preds = %88, %87
  %114 = phi i64 [ 0, %87 ], [ %110, %88 ]
  br i1 %53, label %125, label %115

115:                                              ; preds = %113
  %116 = getelementptr inbounds i16, i16* %86, i64 %114
  %117 = bitcast i16* %116 to <8 x i16>*
  %118 = load <8 x i16>, <8 x i16>* %117, align 2
  %119 = sext <8 x i16> %118 to <8 x i32>
  %120 = mul nsw <8 x i32> %119, <i32 2896, i32 2896, i32 2896, i32 2896, i32 2896, i32 2896, i32 2896, i32 2896>
  %121 = add nsw <8 x i32> %120, <i32 2048, i32 2048, i32 2048, i32 2048, i32 2048, i32 2048, i32 2048, i32 2048>
  %122 = lshr <8 x i32> %121, <i32 12, i32 12, i32 12, i32 12, i32 12, i32 12, i32 12, i32 12>
  %123 = trunc <8 x i32> %122 to <8 x i16>
  %124 = bitcast i16* %116 to <8 x i16>*
  store <8 x i16> %123, <8 x i16>* %124, align 2
  br label %125

125:                                              ; preds = %113, %115
  br i1 %54, label %139, label %126

126:                                              ; preds = %125, %85
  %127 = phi i64 [ 0, %85 ], [ %49, %125 ]
  br label %128

128:                                              ; preds = %126, %128
  %129 = phi i64 [ %137, %128 ], [ %127, %126 ]
  %130 = getelementptr inbounds i16, i16* %86, i64 %129
  %131 = load i16, i16* %130, align 2
  %132 = sext i16 %131 to i32
  %133 = mul nsw i32 %132, 2896
  %134 = add nsw i32 %133, 2048
  %135 = lshr i32 %134, 12
  %136 = trunc i32 %135 to i16
  store i16 %136, i16* %130, align 2
  %137 = add nuw nsw i64 %129, 1
  %138 = icmp ult i64 %137, %38
  br i1 %138, label %128, label %139, !llvm.loop !52

139:                                              ; preds = %128, %125, %82
  %140 = getelementptr inbounds i16, i16* %18, i64 %84
  %141 = bitcast i16* %140 to <8 x i16>*
  %142 = load <8 x i16>, <8 x i16>* %141, align 2
  %143 = sext <8 x i16> %142 to <8 x i32>
  %144 = mul nsw <8 x i32> %143, <i32 11586, i32 11586, i32 11586, i32 11586, i32 11586, i32 11586, i32 11586, i32 11586>
  %145 = add nsw <8 x i32> %56, %144
  %146 = ashr <8 x i32> %145, %58
  %147 = icmp slt <8 x i32> %146, <i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767>
  %148 = select <8 x i1> %147, <8 x i32> %146, <8 x i32> <i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767>
  %149 = icmp sgt <8 x i32> %148, <i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768>
  %150 = select <8 x i1> %149, <8 x i32> %148, <8 x i32> <i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768>
  %151 = trunc <8 x i32> %150 to <8 x i16>
  %152 = bitcast i16* %140 to <8 x i16>*
  store <8 x i16> %151, <8 x i16>* %152, align 2
  %153 = getelementptr inbounds i16, i16* %140, i64 8
  %154 = bitcast i16* %153 to <8 x i16>*
  %155 = load <8 x i16>, <8 x i16>* %154, align 2
  %156 = sext <8 x i16> %155 to <8 x i32>
  %157 = mul nsw <8 x i32> %156, <i32 11586, i32 11586, i32 11586, i32 11586, i32 11586, i32 11586, i32 11586, i32 11586>
  %158 = add nsw <8 x i32> %56, %157
  %159 = ashr <8 x i32> %158, %58
  %160 = icmp slt <8 x i32> %159, <i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767>
  %161 = select <8 x i1> %160, <8 x i32> %159, <8 x i32> <i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767>
  %162 = icmp sgt <8 x i32> %161, <i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768>
  %163 = select <8 x i1> %162, <8 x i32> %161, <8 x i32> <i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768>
  %164 = trunc <8 x i32> %163 to <8 x i16>
  %165 = bitcast i16* %153 to <8 x i16>*
  store <8 x i16> %164, <8 x i16>* %165, align 2
  %166 = add nuw nsw i64 %83, 1
  %167 = icmp eq i64 %166, %39
  br i1 %167, label %168, label %82

168:                                              ; preds = %139, %27, %68
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN7libgav13dsp12_GLOBAL__N_115TransformLoop_CILi8EshLNS0_11Transform1DE2EXadL_ZNS1_18Identity16DcOnly_CILi8EsEEvPvabibEEXadL_ZNS1_18Identity16Column_CIsEEvS5_aEELb0EEEvNS_13TransformTypeENS_13TransformSizeEiS5_iiS5_(i8 zeroext, i8 zeroext, i32, i8*, i32, i32, i8* nocapture readonly) #0 {
  %8 = alloca [64 x i16], align 16
  %9 = zext i8 %1 to i64
  %10 = getelementptr inbounds [19 x i8], [19 x i8]* @_ZN7libgav115kTransformWidthE, i64 0, i64 %9
  %11 = load i8, i8* %10, align 1
  %12 = zext i8 %11 to i32
  %13 = getelementptr inbounds [19 x i8], [19 x i8]* @_ZN7libgav116kTransformHeightE, i64 0, i64 %9
  %14 = load i8, i8* %13, align 1
  %15 = bitcast i8* %3 to i16*
  %16 = zext i8 %0 to i32
  %17 = shl i32 1, %16
  %18 = and i32 %17, 33104
  %19 = icmp eq i32 %18, 0
  %20 = bitcast [64 x i16]* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 128, i8* nonnull %20) #4
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %20, i8 -86, i64 128, i1 false)
  %21 = icmp eq i8 %11, 0
  br i1 %21, label %50, label %22

22:                                               ; preds = %7
  %23 = zext i8 %11 to i64
  %24 = icmp eq i32 %2, 1
  %25 = getelementptr inbounds [64 x i16], [64 x i16]* %8, i64 0, i64 0
  %26 = getelementptr inbounds [64 x i16], [64 x i16]* %8, i64 0, i64 1
  %27 = getelementptr inbounds [64 x i16], [64 x i16]* %8, i64 0, i64 9
  %28 = getelementptr inbounds [64 x i16], [64 x i16]* %8, i64 0, i64 10
  %29 = getelementptr inbounds [64 x i16], [64 x i16]* %8, i64 0, i64 11
  %30 = getelementptr inbounds [64 x i16], [64 x i16]* %8, i64 0, i64 12
  %31 = getelementptr inbounds [64 x i16], [64 x i16]* %8, i64 0, i64 13
  %32 = getelementptr inbounds [64 x i16], [64 x i16]* %8, i64 0, i64 14
  %33 = getelementptr inbounds [64 x i16], [64 x i16]* %8, i64 0, i64 15
  %34 = icmp eq i8 %14, 0
  %35 = getelementptr inbounds i8, i8* %6, i64 4
  %36 = bitcast i8* %35 to i32*
  %37 = getelementptr inbounds i8, i8* %6, i64 8
  %38 = bitcast i8* %37 to i8**
  %39 = zext i8 %14 to i64
  %40 = sext i32 %5 to i64
  %41 = sext i32 %4 to i64
  %42 = zext i8 %11 to i64
  %43 = add nsw i64 %39, -1
  %44 = and i64 %39, 3
  %45 = icmp ult i64 %43, 3
  %46 = sub nsw i64 %39, %44
  %47 = icmp eq i64 %44, 0
  %48 = bitcast i16* %26 to <8 x i16>*
  %49 = bitcast i16* %26 to <8 x i16>*
  br label %51

50:                                               ; preds = %156, %7
  call void @llvm.lifetime.end.p0i8(i64 128, i8* nonnull %20) #4
  ret void

51:                                               ; preds = %156, %22
  %52 = phi i64 [ 0, %22 ], [ %157, %156 ]
  %53 = phi i32 [ 0, %22 ], [ %158, %156 ]
  %54 = xor i32 %53, -1
  %55 = add nsw i32 %54, %12
  %56 = trunc i64 %52 to i32
  %57 = select i1 %19, i32 %56, i32 %55
  %58 = sext i32 %57 to i64
  %59 = getelementptr inbounds i16, i16* %15, i64 %58
  br i1 %45, label %85, label %60

60:                                               ; preds = %51, %60
  %61 = phi i64 [ %82, %60 ], [ 0, %51 ]
  %62 = phi i64 [ %83, %60 ], [ %46, %51 ]
  %63 = mul nuw nsw i64 %61, %23
  %64 = getelementptr inbounds i16, i16* %59, i64 %63
  %65 = load i16, i16* %64, align 2
  %66 = getelementptr inbounds [64 x i16], [64 x i16]* %8, i64 0, i64 %61
  store i16 %65, i16* %66, align 8
  %67 = or i64 %61, 1
  %68 = mul nuw nsw i64 %67, %23
  %69 = getelementptr inbounds i16, i16* %59, i64 %68
  %70 = load i16, i16* %69, align 2
  %71 = getelementptr inbounds [64 x i16], [64 x i16]* %8, i64 0, i64 %67
  store i16 %70, i16* %71, align 2
  %72 = or i64 %61, 2
  %73 = mul nuw nsw i64 %72, %23
  %74 = getelementptr inbounds i16, i16* %59, i64 %73
  %75 = load i16, i16* %74, align 2
  %76 = getelementptr inbounds [64 x i16], [64 x i16]* %8, i64 0, i64 %72
  store i16 %75, i16* %76, align 4
  %77 = or i64 %61, 3
  %78 = mul nuw nsw i64 %77, %23
  %79 = getelementptr inbounds i16, i16* %59, i64 %78
  %80 = load i16, i16* %79, align 2
  %81 = getelementptr inbounds [64 x i16], [64 x i16]* %8, i64 0, i64 %77
  store i16 %80, i16* %81, align 2
  %82 = add nuw nsw i64 %61, 4
  %83 = add i64 %62, -4
  %84 = icmp eq i64 %83, 0
  br i1 %84, label %85, label %60

85:                                               ; preds = %60, %51
  %86 = phi i64 [ 0, %51 ], [ %82, %60 ]
  br i1 %47, label %97, label %87

87:                                               ; preds = %85, %87
  %88 = phi i64 [ %94, %87 ], [ %86, %85 ]
  %89 = phi i64 [ %95, %87 ], [ %44, %85 ]
  %90 = mul nuw nsw i64 %88, %23
  %91 = getelementptr inbounds i16, i16* %59, i64 %90
  %92 = load i16, i16* %91, align 2
  %93 = getelementptr inbounds [64 x i16], [64 x i16]* %8, i64 0, i64 %88
  store i16 %92, i16* %93, align 2
  %94 = add nuw nsw i64 %88, 1
  %95 = add i64 %89, -1
  %96 = icmp eq i64 %95, 0
  br i1 %96, label %97, label %87, !llvm.loop !53

97:                                               ; preds = %87, %85
  %98 = load i16, i16* %25, align 16
  %99 = sext i16 %98 to i32
  %100 = mul nsw i32 %99, 11586
  %101 = add nsw i32 %100, 34816
  %102 = lshr i32 %101, 16
  %103 = trunc i32 %102 to i16
  store i16 %103, i16* %25, align 16
  br i1 %24, label %153, label %104

104:                                              ; preds = %97
  %105 = load <8 x i16>, <8 x i16>* %48, align 2
  %106 = sext <8 x i16> %105 to <8 x i32>
  %107 = mul nsw <8 x i32> %106, <i32 11586, i32 11586, i32 11586, i32 11586, i32 11586, i32 11586, i32 11586, i32 11586>
  %108 = add nsw <8 x i32> %107, <i32 34816, i32 34816, i32 34816, i32 34816, i32 34816, i32 34816, i32 34816, i32 34816>
  %109 = lshr <8 x i32> %108, <i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16>
  %110 = trunc <8 x i32> %109 to <8 x i16>
  store <8 x i16> %110, <8 x i16>* %49, align 2
  %111 = load i16, i16* %27, align 2
  %112 = sext i16 %111 to i32
  %113 = mul nsw i32 %112, 11586
  %114 = add nsw i32 %113, 34816
  %115 = lshr i32 %114, 16
  %116 = trunc i32 %115 to i16
  store i16 %116, i16* %27, align 2
  %117 = load i16, i16* %28, align 4
  %118 = sext i16 %117 to i32
  %119 = mul nsw i32 %118, 11586
  %120 = add nsw i32 %119, 34816
  %121 = lshr i32 %120, 16
  %122 = trunc i32 %121 to i16
  store i16 %122, i16* %28, align 4
  %123 = load i16, i16* %29, align 2
  %124 = sext i16 %123 to i32
  %125 = mul nsw i32 %124, 11586
  %126 = add nsw i32 %125, 34816
  %127 = lshr i32 %126, 16
  %128 = trunc i32 %127 to i16
  store i16 %128, i16* %29, align 2
  %129 = load i16, i16* %30, align 8
  %130 = sext i16 %129 to i32
  %131 = mul nsw i32 %130, 11586
  %132 = add nsw i32 %131, 34816
  %133 = lshr i32 %132, 16
  %134 = trunc i32 %133 to i16
  store i16 %134, i16* %30, align 8
  %135 = load i16, i16* %31, align 2
  %136 = sext i16 %135 to i32
  %137 = mul nsw i32 %136, 11586
  %138 = add nsw i32 %137, 34816
  %139 = lshr i32 %138, 16
  %140 = trunc i32 %139 to i16
  store i16 %140, i16* %31, align 2
  %141 = load i16, i16* %32, align 4
  %142 = sext i16 %141 to i32
  %143 = mul nsw i32 %142, 11586
  %144 = add nsw i32 %143, 34816
  %145 = lshr i32 %144, 16
  %146 = trunc i32 %145 to i16
  store i16 %146, i16* %32, align 4
  %147 = load i16, i16* %33, align 2
  %148 = sext i16 %147 to i32
  %149 = mul nsw i32 %148, 11586
  %150 = add nsw i32 %149, 34816
  %151 = lshr i32 %150, 16
  %152 = trunc i32 %151 to i16
  store i16 %152, i16* %33, align 2
  br label %153

153:                                              ; preds = %97, %104
  br i1 %34, label %156, label %154

154:                                              ; preds = %153
  %155 = add nsw i64 %52, %41
  br label %160

156:                                              ; preds = %160, %153
  %157 = add nuw nsw i64 %52, 1
  %158 = add nuw nsw i32 %53, 1
  %159 = icmp eq i64 %157, %42
  br i1 %159, label %50, label %51

160:                                              ; preds = %160, %154
  %161 = phi i64 [ 0, %154 ], [ %180, %160 ]
  %162 = add nsw i64 %161, %40
  %163 = getelementptr inbounds [64 x i16], [64 x i16]* %8, i64 0, i64 %161
  %164 = load i16, i16* %163, align 2
  %165 = load i32, i32* %36, align 4
  %166 = sext i32 %165 to i64
  %167 = mul nsw i64 %162, %166
  %168 = load i8*, i8** %38, align 8
  %169 = getelementptr inbounds i8, i8* %168, i64 %155
  %170 = getelementptr inbounds i8, i8* %169, i64 %167
  %171 = load i8, i8* %170, align 1
  %172 = zext i8 %171 to i32
  %173 = sext i16 %164 to i32
  %174 = add nsw i32 %172, %173
  %175 = icmp slt i32 %174, 255
  %176 = select i1 %175, i32 %174, i32 255
  %177 = icmp sgt i32 %176, 0
  %178 = select i1 %177, i32 %176, i32 0
  %179 = trunc i32 %178 to i8
  store i8 %179, i8* %170, align 1
  %180 = add nuw nsw i64 %161, 1
  %181 = icmp eq i64 %180, %39
  br i1 %181, label %156, label %160
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN7libgav13dsp12_GLOBAL__N_115TransformLoop_CILi8EshLNS0_11Transform1DE2EXadL_ZNS1_18Identity32DcOnly_CILi8EsEEvPvabibEEXadL_ZNS1_15Identity32Row_CIsEEvS5_aEELb1EEEvNS_13TransformTypeENS_13TransformSizeEiS5_iiS5_(i8 zeroext, i8 zeroext, i32, i8*, i32, i32, i8* nocapture readnone) #0 {
  %8 = zext i8 %1 to i64
  %9 = getelementptr inbounds [19 x i8], [19 x i8]* @_ZN7libgav115kTransformWidthE, i64 0, i64 %8
  %10 = load i8, i8* %9, align 1
  %11 = zext i8 %10 to i32
  %12 = getelementptr inbounds [19 x i8], [19 x i8]* @_ZN7libgav119kTransformWidthLog2E, i64 0, i64 %8
  %13 = load i8, i8* %12, align 1
  %14 = zext i8 %13 to i32
  %15 = getelementptr inbounds [19 x i8], [19 x i8]* @_ZN7libgav120kTransformHeightLog2E, i64 0, i64 %8
  %16 = load i8, i8* %15, align 1
  %17 = zext i8 %16 to i32
  %18 = bitcast i8* %3 to i16*
  %19 = getelementptr inbounds [19 x i8], [19 x i8]* @_ZN7libgav13dsp12_GLOBAL__N_118kTransformRowShiftE, i64 0, i64 %8
  %20 = load i8, i8* %19, align 1
  %21 = sub nsw i32 %14, %17
  %22 = icmp slt i32 %21, 0
  %23 = sub nsw i32 0, %21
  %24 = select i1 %22, i32 %23, i32 %21
  %25 = icmp eq i32 %24, 1
  %26 = icmp eq i32 %2, 1
  br i1 %26, label %58, label %27

27:                                               ; preds = %7
  %28 = icmp sgt i32 %2, 0
  br i1 %28, label %29, label %192

29:                                               ; preds = %27
  %30 = icmp ult i32 %11, 32
  %31 = select i1 %30, i32 %11, i32 32
  %32 = icmp slt i32 %31, 1
  %33 = zext i8 %10 to i64
  %34 = sext i8 %20 to i32
  %35 = shl i32 1, %34
  %36 = ashr i32 %35, 1
  %37 = zext i32 %31 to i64
  %38 = zext i32 %2 to i64
  %39 = xor i1 %25, true
  %40 = or i1 %32, %39
  %41 = icmp ugt i64 %37, 1
  %42 = select i1 %41, i64 %37, i64 1
  %43 = and i64 %42, 56
  %44 = add nsw i64 %43, -8
  %45 = lshr exact i64 %44, 3
  %46 = add nuw nsw i64 %45, 1
  %47 = icmp ult i64 %42, 8
  %48 = and i64 %42, 56
  %49 = and i64 %46, 1
  %50 = icmp eq i64 %44, 0
  %51 = sub nuw nsw i64 %46, %49
  %52 = icmp eq i64 %49, 0
  %53 = icmp eq i64 %42, %48
  %54 = insertelement <8 x i32> undef, i32 %36, i32 0
  %55 = shufflevector <8 x i32> %54, <8 x i32> undef, <8 x i32> zeroinitializer
  %56 = insertelement <8 x i32> undef, i32 %34, i32 0
  %57 = shufflevector <8 x i32> %56, <8 x i32> undef, <8 x i32> zeroinitializer
  br label %80

58:                                               ; preds = %7
  %59 = zext i8 %20 to i32
  %60 = load i16, i16* %18, align 2
  br i1 %25, label %61, label %67

61:                                               ; preds = %58
  %62 = sext i16 %60 to i32
  %63 = mul nsw i32 %62, 2896
  %64 = add nsw i32 %63, 2048
  %65 = lshr i32 %64, 12
  %66 = trunc i32 %65 to i16
  store i16 %66, i16* %18, align 2
  br label %67

67:                                               ; preds = %58, %61
  %68 = phi i16 [ %66, %61 ], [ %60, %58 ]
  %69 = sext i16 %68 to i32
  %70 = shl nsw i32 %69, 2
  %71 = shl i32 1, %59
  %72 = ashr i32 %71, 1
  %73 = add nsw i32 %70, %72
  %74 = ashr i32 %73, %59
  %75 = icmp slt i32 %74, 32767
  %76 = select i1 %75, i32 %74, i32 32767
  %77 = icmp sgt i32 %76, -32768
  %78 = select i1 %77, i32 %76, i32 -32768
  %79 = trunc i32 %78 to i16
  store i16 %79, i16* %18, align 2
  br label %192

80:                                               ; preds = %137, %29
  %81 = phi i64 [ 0, %29 ], [ %190, %137 ]
  %82 = mul nuw nsw i64 %81, %33
  br i1 %40, label %137, label %83

83:                                               ; preds = %80
  %84 = getelementptr inbounds i16, i16* %18, i64 %82
  br i1 %47, label %124, label %85

85:                                               ; preds = %83
  br i1 %50, label %111, label %86

86:                                               ; preds = %85, %86
  %87 = phi i64 [ %108, %86 ], [ 0, %85 ]
  %88 = phi i64 [ %109, %86 ], [ %51, %85 ]
  %89 = getelementptr inbounds i16, i16* %84, i64 %87
  %90 = bitcast i16* %89 to <8 x i16>*
  %91 = load <8 x i16>, <8 x i16>* %90, align 2
  %92 = sext <8 x i16> %91 to <8 x i32>
  %93 = mul nsw <8 x i32> %92, <i32 2896, i32 2896, i32 2896, i32 2896, i32 2896, i32 2896, i32 2896, i32 2896>
  %94 = add nsw <8 x i32> %93, <i32 2048, i32 2048, i32 2048, i32 2048, i32 2048, i32 2048, i32 2048, i32 2048>
  %95 = lshr <8 x i32> %94, <i32 12, i32 12, i32 12, i32 12, i32 12, i32 12, i32 12, i32 12>
  %96 = trunc <8 x i32> %95 to <8 x i16>
  %97 = bitcast i16* %89 to <8 x i16>*
  store <8 x i16> %96, <8 x i16>* %97, align 2
  %98 = or i64 %87, 8
  %99 = getelementptr inbounds i16, i16* %84, i64 %98
  %100 = bitcast i16* %99 to <8 x i16>*
  %101 = load <8 x i16>, <8 x i16>* %100, align 2
  %102 = sext <8 x i16> %101 to <8 x i32>
  %103 = mul nsw <8 x i32> %102, <i32 2896, i32 2896, i32 2896, i32 2896, i32 2896, i32 2896, i32 2896, i32 2896>
  %104 = add nsw <8 x i32> %103, <i32 2048, i32 2048, i32 2048, i32 2048, i32 2048, i32 2048, i32 2048, i32 2048>
  %105 = lshr <8 x i32> %104, <i32 12, i32 12, i32 12, i32 12, i32 12, i32 12, i32 12, i32 12>
  %106 = trunc <8 x i32> %105 to <8 x i16>
  %107 = bitcast i16* %99 to <8 x i16>*
  store <8 x i16> %106, <8 x i16>* %107, align 2
  %108 = add i64 %87, 16
  %109 = add i64 %88, -2
  %110 = icmp eq i64 %109, 0
  br i1 %110, label %111, label %86, !llvm.loop !54

111:                                              ; preds = %86, %85
  %112 = phi i64 [ 0, %85 ], [ %108, %86 ]
  br i1 %52, label %123, label %113

113:                                              ; preds = %111
  %114 = getelementptr inbounds i16, i16* %84, i64 %112
  %115 = bitcast i16* %114 to <8 x i16>*
  %116 = load <8 x i16>, <8 x i16>* %115, align 2
  %117 = sext <8 x i16> %116 to <8 x i32>
  %118 = mul nsw <8 x i32> %117, <i32 2896, i32 2896, i32 2896, i32 2896, i32 2896, i32 2896, i32 2896, i32 2896>
  %119 = add nsw <8 x i32> %118, <i32 2048, i32 2048, i32 2048, i32 2048, i32 2048, i32 2048, i32 2048, i32 2048>
  %120 = lshr <8 x i32> %119, <i32 12, i32 12, i32 12, i32 12, i32 12, i32 12, i32 12, i32 12>
  %121 = trunc <8 x i32> %120 to <8 x i16>
  %122 = bitcast i16* %114 to <8 x i16>*
  store <8 x i16> %121, <8 x i16>* %122, align 2
  br label %123

123:                                              ; preds = %111, %113
  br i1 %53, label %137, label %124

124:                                              ; preds = %123, %83
  %125 = phi i64 [ 0, %83 ], [ %48, %123 ]
  br label %126

126:                                              ; preds = %124, %126
  %127 = phi i64 [ %135, %126 ], [ %125, %124 ]
  %128 = getelementptr inbounds i16, i16* %84, i64 %127
  %129 = load i16, i16* %128, align 2
  %130 = sext i16 %129 to i32
  %131 = mul nsw i32 %130, 2896
  %132 = add nsw i32 %131, 2048
  %133 = lshr i32 %132, 12
  %134 = trunc i32 %133 to i16
  store i16 %134, i16* %128, align 2
  %135 = add nuw nsw i64 %127, 1
  %136 = icmp ult i64 %135, %37
  br i1 %136, label %126, label %137, !llvm.loop !55

137:                                              ; preds = %126, %123, %80
  %138 = getelementptr inbounds i16, i16* %18, i64 %82
  %139 = bitcast i16* %138 to <8 x i16>*
  %140 = load <8 x i16>, <8 x i16>* %139, align 2
  %141 = sext <8 x i16> %140 to <8 x i32>
  %142 = shl nsw <8 x i32> %141, <i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2>
  %143 = add nsw <8 x i32> %142, %55
  %144 = ashr <8 x i32> %143, %57
  %145 = icmp slt <8 x i32> %144, <i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767>
  %146 = select <8 x i1> %145, <8 x i32> %144, <8 x i32> <i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767>
  %147 = icmp sgt <8 x i32> %146, <i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768>
  %148 = select <8 x i1> %147, <8 x i32> %146, <8 x i32> <i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768>
  %149 = trunc <8 x i32> %148 to <8 x i16>
  %150 = bitcast i16* %138 to <8 x i16>*
  store <8 x i16> %149, <8 x i16>* %150, align 2
  %151 = getelementptr inbounds i16, i16* %138, i64 8
  %152 = bitcast i16* %151 to <8 x i16>*
  %153 = load <8 x i16>, <8 x i16>* %152, align 2
  %154 = sext <8 x i16> %153 to <8 x i32>
  %155 = shl nsw <8 x i32> %154, <i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2>
  %156 = add nsw <8 x i32> %155, %55
  %157 = ashr <8 x i32> %156, %57
  %158 = icmp slt <8 x i32> %157, <i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767>
  %159 = select <8 x i1> %158, <8 x i32> %157, <8 x i32> <i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767>
  %160 = icmp sgt <8 x i32> %159, <i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768>
  %161 = select <8 x i1> %160, <8 x i32> %159, <8 x i32> <i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768>
  %162 = trunc <8 x i32> %161 to <8 x i16>
  %163 = bitcast i16* %151 to <8 x i16>*
  store <8 x i16> %162, <8 x i16>* %163, align 2
  %164 = getelementptr inbounds i16, i16* %138, i64 16
  %165 = bitcast i16* %164 to <8 x i16>*
  %166 = load <8 x i16>, <8 x i16>* %165, align 2
  %167 = sext <8 x i16> %166 to <8 x i32>
  %168 = shl nsw <8 x i32> %167, <i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2>
  %169 = add nsw <8 x i32> %168, %55
  %170 = ashr <8 x i32> %169, %57
  %171 = icmp slt <8 x i32> %170, <i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767>
  %172 = select <8 x i1> %171, <8 x i32> %170, <8 x i32> <i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767>
  %173 = icmp sgt <8 x i32> %172, <i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768>
  %174 = select <8 x i1> %173, <8 x i32> %172, <8 x i32> <i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768>
  %175 = trunc <8 x i32> %174 to <8 x i16>
  %176 = bitcast i16* %164 to <8 x i16>*
  store <8 x i16> %175, <8 x i16>* %176, align 2
  %177 = getelementptr inbounds i16, i16* %138, i64 24
  %178 = bitcast i16* %177 to <8 x i16>*
  %179 = load <8 x i16>, <8 x i16>* %178, align 2
  %180 = sext <8 x i16> %179 to <8 x i32>
  %181 = shl nsw <8 x i32> %180, <i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2>
  %182 = add nsw <8 x i32> %181, %55
  %183 = ashr <8 x i32> %182, %57
  %184 = icmp slt <8 x i32> %183, <i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767>
  %185 = select <8 x i1> %184, <8 x i32> %183, <8 x i32> <i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767>
  %186 = icmp sgt <8 x i32> %185, <i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768>
  %187 = select <8 x i1> %186, <8 x i32> %185, <8 x i32> <i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768>
  %188 = trunc <8 x i32> %187 to <8 x i16>
  %189 = bitcast i16* %177 to <8 x i16>*
  store <8 x i16> %188, <8 x i16>* %189, align 2
  %190 = add nuw nsw i64 %81, 1
  %191 = icmp eq i64 %190, %38
  br i1 %191, label %192, label %80

192:                                              ; preds = %137, %27, %67
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN7libgav13dsp12_GLOBAL__N_115TransformLoop_CILi8EshLNS0_11Transform1DE2EXadL_ZNS1_18Identity32DcOnly_CILi8EsEEvPvabibEEXadL_ZNS1_18Identity32Column_CIsEEvS5_aEELb0EEEvNS_13TransformTypeENS_13TransformSizeEiS5_iiS5_(i8 zeroext, i8 zeroext, i32, i8*, i32, i32, i8* nocapture readonly) #0 {
  %8 = alloca [64 x i16], align 16
  %9 = zext i8 %1 to i64
  %10 = getelementptr inbounds [19 x i8], [19 x i8]* @_ZN7libgav115kTransformWidthE, i64 0, i64 %9
  %11 = load i8, i8* %10, align 1
  %12 = zext i8 %11 to i32
  %13 = getelementptr inbounds [19 x i8], [19 x i8]* @_ZN7libgav116kTransformHeightE, i64 0, i64 %9
  %14 = load i8, i8* %13, align 1
  %15 = bitcast i8* %3 to i16*
  %16 = zext i8 %0 to i32
  %17 = shl i32 1, %16
  %18 = and i32 %17, 33104
  %19 = icmp eq i32 %18, 0
  %20 = bitcast [64 x i16]* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 128, i8* nonnull %20) #4
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %20, i8 -86, i64 128, i1 false)
  %21 = icmp eq i8 %11, 0
  br i1 %21, label %51, label %22

22:                                               ; preds = %7
  %23 = zext i8 %11 to i64
  %24 = icmp eq i32 %2, 1
  %25 = getelementptr inbounds [64 x i16], [64 x i16]* %8, i64 0, i64 0
  %26 = icmp eq i8 %14, 0
  %27 = getelementptr inbounds i8, i8* %6, i64 4
  %28 = bitcast i8* %27 to i32*
  %29 = getelementptr inbounds i8, i8* %6, i64 8
  %30 = bitcast i8* %29 to i8**
  %31 = zext i8 %14 to i64
  %32 = sext i32 %5 to i64
  %33 = sext i32 %4 to i64
  %34 = zext i8 %11 to i64
  %35 = add nsw i64 %31, -1
  %36 = and i64 %31, 3
  %37 = icmp ult i64 %35, 3
  %38 = sub nsw i64 %31, %36
  %39 = icmp eq i64 %36, 0
  %40 = bitcast [64 x i16]* %8 to <8 x i16>*
  %41 = bitcast [64 x i16]* %8 to <8 x i16>*
  %42 = getelementptr inbounds [64 x i16], [64 x i16]* %8, i64 0, i64 8
  %43 = bitcast i16* %42 to <8 x i16>*
  %44 = bitcast i16* %42 to <8 x i16>*
  %45 = getelementptr inbounds [64 x i16], [64 x i16]* %8, i64 0, i64 16
  %46 = bitcast i16* %45 to <8 x i16>*
  %47 = bitcast i16* %45 to <8 x i16>*
  %48 = getelementptr inbounds [64 x i16], [64 x i16]* %8, i64 0, i64 24
  %49 = bitcast i16* %48 to <8 x i16>*
  %50 = bitcast i16* %48 to <8 x i16>*
  br label %52

51:                                               ; preds = %129, %7
  call void @llvm.lifetime.end.p0i8(i64 128, i8* nonnull %20) #4
  ret void

52:                                               ; preds = %129, %22
  %53 = phi i64 [ 0, %22 ], [ %130, %129 ]
  %54 = phi i32 [ 0, %22 ], [ %131, %129 ]
  %55 = xor i32 %54, -1
  %56 = add nsw i32 %55, %12
  %57 = trunc i64 %53 to i32
  %58 = select i1 %19, i32 %57, i32 %56
  %59 = sext i32 %58 to i64
  %60 = getelementptr inbounds i16, i16* %15, i64 %59
  br i1 %37, label %86, label %61

61:                                               ; preds = %52, %61
  %62 = phi i64 [ %83, %61 ], [ 0, %52 ]
  %63 = phi i64 [ %84, %61 ], [ %38, %52 ]
  %64 = mul nuw nsw i64 %62, %23
  %65 = getelementptr inbounds i16, i16* %60, i64 %64
  %66 = load i16, i16* %65, align 2
  %67 = getelementptr inbounds [64 x i16], [64 x i16]* %8, i64 0, i64 %62
  store i16 %66, i16* %67, align 8
  %68 = or i64 %62, 1
  %69 = mul nuw nsw i64 %68, %23
  %70 = getelementptr inbounds i16, i16* %60, i64 %69
  %71 = load i16, i16* %70, align 2
  %72 = getelementptr inbounds [64 x i16], [64 x i16]* %8, i64 0, i64 %68
  store i16 %71, i16* %72, align 2
  %73 = or i64 %62, 2
  %74 = mul nuw nsw i64 %73, %23
  %75 = getelementptr inbounds i16, i16* %60, i64 %74
  %76 = load i16, i16* %75, align 2
  %77 = getelementptr inbounds [64 x i16], [64 x i16]* %8, i64 0, i64 %73
  store i16 %76, i16* %77, align 4
  %78 = or i64 %62, 3
  %79 = mul nuw nsw i64 %78, %23
  %80 = getelementptr inbounds i16, i16* %60, i64 %79
  %81 = load i16, i16* %80, align 2
  %82 = getelementptr inbounds [64 x i16], [64 x i16]* %8, i64 0, i64 %78
  store i16 %81, i16* %82, align 2
  %83 = add nuw nsw i64 %62, 4
  %84 = add i64 %63, -4
  %85 = icmp eq i64 %84, 0
  br i1 %85, label %86, label %61

86:                                               ; preds = %61, %52
  %87 = phi i64 [ 0, %52 ], [ %83, %61 ]
  br i1 %39, label %98, label %88

88:                                               ; preds = %86, %88
  %89 = phi i64 [ %95, %88 ], [ %87, %86 ]
  %90 = phi i64 [ %96, %88 ], [ %36, %86 ]
  %91 = mul nuw nsw i64 %89, %23
  %92 = getelementptr inbounds i16, i16* %60, i64 %91
  %93 = load i16, i16* %92, align 2
  %94 = getelementptr inbounds [64 x i16], [64 x i16]* %8, i64 0, i64 %89
  store i16 %93, i16* %94, align 2
  %95 = add nuw nsw i64 %89, 1
  %96 = add i64 %90, -1
  %97 = icmp eq i64 %96, 0
  br i1 %97, label %98, label %88, !llvm.loop !56

98:                                               ; preds = %88, %86
  br i1 %24, label %120, label %99

99:                                               ; preds = %98
  %100 = load <8 x i16>, <8 x i16>* %40, align 16
  %101 = sext <8 x i16> %100 to <8 x i32>
  %102 = add nsw <8 x i32> %101, <i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2>
  %103 = ashr <8 x i32> %102, <i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2>
  %104 = trunc <8 x i32> %103 to <8 x i16>
  store <8 x i16> %104, <8 x i16>* %41, align 16
  %105 = load <8 x i16>, <8 x i16>* %43, align 16
  %106 = sext <8 x i16> %105 to <8 x i32>
  %107 = add nsw <8 x i32> %106, <i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2>
  %108 = ashr <8 x i32> %107, <i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2>
  %109 = trunc <8 x i32> %108 to <8 x i16>
  store <8 x i16> %109, <8 x i16>* %44, align 16
  %110 = load <8 x i16>, <8 x i16>* %46, align 16
  %111 = sext <8 x i16> %110 to <8 x i32>
  %112 = add nsw <8 x i32> %111, <i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2>
  %113 = ashr <8 x i32> %112, <i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2>
  %114 = trunc <8 x i32> %113 to <8 x i16>
  store <8 x i16> %114, <8 x i16>* %47, align 16
  %115 = load <8 x i16>, <8 x i16>* %49, align 16
  %116 = sext <8 x i16> %115 to <8 x i32>
  %117 = add nsw <8 x i32> %116, <i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2>
  %118 = ashr <8 x i32> %117, <i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2>
  %119 = trunc <8 x i32> %118 to <8 x i16>
  store <8 x i16> %119, <8 x i16>* %50, align 16
  br label %126

120:                                              ; preds = %98
  %121 = load i16, i16* %25, align 16
  %122 = sext i16 %121 to i32
  %123 = add nsw i32 %122, 2
  %124 = ashr i32 %123, 2
  %125 = trunc i32 %124 to i16
  store i16 %125, i16* %25, align 16
  br label %126

126:                                              ; preds = %99, %120
  br i1 %26, label %129, label %127

127:                                              ; preds = %126
  %128 = add nsw i64 %53, %33
  br label %133

129:                                              ; preds = %133, %126
  %130 = add nuw nsw i64 %53, 1
  %131 = add nuw nsw i32 %54, 1
  %132 = icmp eq i64 %130, %34
  br i1 %132, label %51, label %52

133:                                              ; preds = %133, %127
  %134 = phi i64 [ 0, %127 ], [ %153, %133 ]
  %135 = add nsw i64 %134, %32
  %136 = getelementptr inbounds [64 x i16], [64 x i16]* %8, i64 0, i64 %134
  %137 = load i16, i16* %136, align 2
  %138 = load i32, i32* %28, align 4
  %139 = sext i32 %138 to i64
  %140 = mul nsw i64 %135, %139
  %141 = load i8*, i8** %30, align 8
  %142 = getelementptr inbounds i8, i8* %141, i64 %128
  %143 = getelementptr inbounds i8, i8* %142, i64 %140
  %144 = load i8, i8* %143, align 1
  %145 = zext i8 %144 to i32
  %146 = sext i16 %137 to i32
  %147 = add nsw i32 %145, %146
  %148 = icmp slt i32 %147, 255
  %149 = select i1 %148, i32 %147, i32 255
  %150 = icmp sgt i32 %149, 0
  %151 = select i1 %150, i32 %149, i32 0
  %152 = trunc i32 %151 to i8
  store i8 %152, i8* %143, align 1
  %153 = add nuw nsw i64 %134, 1
  %154 = icmp eq i64 %153, %31
  br i1 %154, label %129, label %133
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN7libgav13dsp12_GLOBAL__N_115TransformLoop_CILi8EshLNS0_11Transform1DE3EXadL_ZNS1_12Wht4DcOnly_CILi8EsEEvPvabibEEXadL_ZNS1_6Wht4_CIsEEvS5_aEELb1EEEvNS_13TransformTypeENS_13TransformSizeEiS5_iiS5_(i8 zeroext, i8 zeroext, i32, i8*, i32, i32, i8* nocapture readnone) #0 {
  %8 = bitcast i8* %3 to i16*
  %9 = icmp eq i32 %2, 1
  br i1 %9, label %51, label %10

10:                                               ; preds = %7
  %11 = icmp sgt i32 %2, 0
  br i1 %11, label %12, label %87

12:                                               ; preds = %10
  %13 = zext i32 %2 to i64
  %14 = icmp ult i32 %2, 8
  br i1 %14, label %15, label %17

15:                                               ; preds = %49, %12
  %16 = phi i64 [ 0, %12 ], [ %18, %49 ]
  br label %62

17:                                               ; preds = %12
  %18 = and i64 %13, 4294967288
  br label %19

19:                                               ; preds = %19, %17
  %20 = phi i64 [ 0, %17 ], [ %47, %19 ]
  %21 = shl nuw nsw i64 %20, 2
  %22 = getelementptr inbounds i16, i16* %8, i64 %21
  %23 = bitcast i16* %22 to <32 x i16>*
  %24 = load <32 x i16>, <32 x i16>* %23, align 2
  %25 = shufflevector <32 x i16> %24, <32 x i16> undef, <8 x i32> <i32 0, i32 4, i32 8, i32 12, i32 16, i32 20, i32 24, i32 28>
  %26 = shufflevector <32 x i16> %24, <32 x i16> undef, <8 x i32> <i32 1, i32 5, i32 9, i32 13, i32 17, i32 21, i32 25, i32 29>
  %27 = shufflevector <32 x i16> %24, <32 x i16> undef, <8 x i32> <i32 2, i32 6, i32 10, i32 14, i32 18, i32 22, i32 26, i32 30>
  %28 = shufflevector <32 x i16> %24, <32 x i16> undef, <8 x i32> <i32 3, i32 7, i32 11, i32 15, i32 19, i32 23, i32 27, i32 31>
  %29 = ashr <8 x i16> %25, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %30 = ashr <8 x i16> %26, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %31 = ashr <8 x i16> %27, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %32 = getelementptr inbounds i16, i16* %22, i64 3
  %33 = ashr <8 x i16> %28, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %34 = add nsw <8 x i16> %30, %29
  %35 = sub nsw <8 x i16> %31, %33
  %36 = sub nsw <8 x i16> %34, %35
  %37 = ashr <8 x i16> %36, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %38 = sub nsw <8 x i16> %37, %33
  %39 = sub nsw <8 x i16> %37, %30
  %40 = sub <8 x i16> %34, %38
  %41 = add <8 x i16> %39, %35
  %42 = getelementptr inbounds i16, i16* %32, i64 -3
  %43 = bitcast i16* %42 to <32 x i16>*
  %44 = shufflevector <8 x i16> %40, <8 x i16> %38, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %45 = shufflevector <8 x i16> %39, <8 x i16> %41, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %46 = shufflevector <16 x i16> %44, <16 x i16> %45, <32 x i32> <i32 0, i32 8, i32 16, i32 24, i32 1, i32 9, i32 17, i32 25, i32 2, i32 10, i32 18, i32 26, i32 3, i32 11, i32 19, i32 27, i32 4, i32 12, i32 20, i32 28, i32 5, i32 13, i32 21, i32 29, i32 6, i32 14, i32 22, i32 30, i32 7, i32 15, i32 23, i32 31>
  store <32 x i16> %46, <32 x i16>* %43, align 2
  %47 = add i64 %20, 8
  %48 = icmp eq i64 %47, %18
  br i1 %48, label %49, label %19, !llvm.loop !57

49:                                               ; preds = %19
  %50 = icmp eq i64 %18, %13
  br i1 %50, label %87, label %15

51:                                               ; preds = %7
  %52 = load i16, i16* %8, align 2
  %53 = ashr i16 %52, 2
  %54 = ashr i16 %52, 3
  %55 = sub nsw i16 %53, %54
  store i16 %55, i16* %8, align 2
  %56 = getelementptr inbounds i8, i8* %3, i64 2
  %57 = bitcast i8* %56 to i16*
  store i16 %54, i16* %57, align 2
  %58 = getelementptr inbounds i8, i8* %3, i64 4
  %59 = bitcast i8* %58 to i16*
  store i16 %54, i16* %59, align 2
  %60 = getelementptr inbounds i8, i8* %3, i64 6
  %61 = bitcast i8* %60 to i16*
  store i16 %54, i16* %61, align 2
  br label %87

62:                                               ; preds = %15, %62
  %63 = phi i64 [ %85, %62 ], [ %16, %15 ]
  %64 = shl nuw nsw i64 %63, 2
  %65 = getelementptr inbounds i16, i16* %8, i64 %64
  %66 = load i16, i16* %65, align 2
  %67 = ashr i16 %66, 2
  %68 = getelementptr inbounds i16, i16* %65, i64 1
  %69 = load i16, i16* %68, align 2
  %70 = ashr i16 %69, 2
  %71 = getelementptr inbounds i16, i16* %65, i64 2
  %72 = load i16, i16* %71, align 2
  %73 = ashr i16 %72, 2
  %74 = getelementptr inbounds i16, i16* %65, i64 3
  %75 = load i16, i16* %74, align 2
  %76 = ashr i16 %75, 2
  %77 = add nsw i16 %70, %67
  %78 = sub nsw i16 %73, %76
  %79 = sub nsw i16 %77, %78
  %80 = ashr i16 %79, 1
  %81 = sub nsw i16 %80, %76
  store i16 %81, i16* %68, align 2
  %82 = sub nsw i16 %80, %70
  store i16 %82, i16* %71, align 2
  %83 = sub i16 %77, %81
  store i16 %83, i16* %65, align 2
  %84 = add i16 %82, %78
  store i16 %84, i16* %74, align 2
  %85 = add nuw nsw i64 %63, 1
  %86 = icmp eq i64 %85, %13
  br i1 %86, label %87, label %62, !llvm.loop !58

87:                                               ; preds = %62, %49, %10, %51
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN7libgav13dsp12_GLOBAL__N_115TransformLoop_CILi8EshLNS0_11Transform1DE3EXadL_ZNS1_12Wht4DcOnly_CILi8EsEEvPvabibEEXadL_ZNS1_6Wht4_CIsEEvS5_aEELb0EEEvNS_13TransformTypeENS_13TransformSizeEiS5_iiS5_(i8 zeroext, i8 zeroext, i32, i8*, i32, i32, i8* nocapture readonly) #0 {
  %8 = bitcast i8* %3 to i16*
  %9 = icmp eq i32 %2, 1
  %10 = getelementptr inbounds i8, i8* %6, i64 4
  %11 = bitcast i8* %10 to i32*
  %12 = getelementptr inbounds i8, i8* %6, i64 8
  %13 = bitcast i8* %12 to i8**
  %14 = sext i32 %5 to i64
  %15 = sext i32 %4 to i64
  %16 = add nsw i64 %14, 1
  %17 = add nsw i64 %14, 2
  %18 = add nsw i64 %14, 3
  br label %19

19:                                               ; preds = %54, %7
  %20 = phi i64 [ 0, %7 ], [ %121, %54 ]
  %21 = getelementptr inbounds i16, i16* %8, i64 %20
  %22 = load i16, i16* %21, align 2
  %23 = getelementptr inbounds i16, i16* %21, i64 4
  %24 = load i16, i16* %23, align 2
  %25 = sext i16 %22 to i32
  br i1 %9, label %27, label %31

26:                                               ; preds = %54
  ret void

27:                                               ; preds = %19
  %28 = ashr i32 %25, 1
  %29 = trunc i32 %28 to i16
  %30 = sub i16 %22, %29
  br label %54

31:                                               ; preds = %19
  %32 = getelementptr inbounds i16, i16* %21, i64 12
  %33 = load i16, i16* %32, align 2
  %34 = getelementptr inbounds i16, i16* %21, i64 8
  %35 = load i16, i16* %34, align 2
  %36 = zext i16 %24 to i32
  %37 = zext i16 %35 to i32
  %38 = sext i16 %33 to i32
  %39 = add nsw i32 %36, %25
  %40 = sub nsw i32 %37, %38
  %41 = shl i32 %39, 16
  %42 = ashr exact i32 %41, 16
  %43 = shl i32 %40, 16
  %44 = ashr exact i32 %43, 16
  %45 = sub nsw i32 %42, %44
  %46 = ashr i32 %45, 1
  %47 = sub nsw i32 %46, %38
  %48 = trunc i32 %46 to i16
  %49 = sub i16 %48, %24
  %50 = sub nsw i32 %42, %47
  %51 = trunc i32 %50 to i16
  %52 = trunc i32 %44 to i16
  %53 = add i16 %49, %52
  br label %54

54:                                               ; preds = %31, %27
  %55 = phi i16 [ %53, %31 ], [ %29, %27 ]
  %56 = phi i16 [ %49, %31 ], [ %29, %27 ]
  %57 = phi i32 [ %47, %31 ], [ %28, %27 ]
  %58 = phi i16 [ %51, %31 ], [ %30, %27 ]
  %59 = add nsw i64 %20, %15
  %60 = load i32, i32* %11, align 4
  %61 = sext i32 %60 to i64
  %62 = mul nsw i64 %61, %14
  %63 = load i8*, i8** %13, align 8
  %64 = getelementptr inbounds i8, i8* %63, i64 %59
  %65 = getelementptr inbounds i8, i8* %64, i64 %62
  %66 = load i8, i8* %65, align 1
  %67 = zext i8 %66 to i32
  %68 = sext i16 %58 to i32
  %69 = add nsw i32 %67, %68
  %70 = icmp slt i32 %69, 255
  %71 = select i1 %70, i32 %69, i32 255
  %72 = icmp sgt i32 %71, 0
  %73 = select i1 %72, i32 %71, i32 0
  %74 = trunc i32 %73 to i8
  store i8 %74, i8* %65, align 1
  %75 = load i32, i32* %11, align 4
  %76 = sext i32 %75 to i64
  %77 = mul nsw i64 %16, %76
  %78 = load i8*, i8** %13, align 8
  %79 = getelementptr inbounds i8, i8* %78, i64 %59
  %80 = getelementptr inbounds i8, i8* %79, i64 %77
  %81 = load i8, i8* %80, align 1
  %82 = zext i8 %81 to i32
  %83 = shl i32 %57, 16
  %84 = ashr exact i32 %83, 16
  %85 = add nsw i32 %84, %82
  %86 = icmp slt i32 %85, 255
  %87 = select i1 %86, i32 %85, i32 255
  %88 = icmp sgt i32 %87, 0
  %89 = select i1 %88, i32 %87, i32 0
  %90 = trunc i32 %89 to i8
  store i8 %90, i8* %80, align 1
  %91 = load i32, i32* %11, align 4
  %92 = sext i32 %91 to i64
  %93 = mul nsw i64 %17, %92
  %94 = load i8*, i8** %13, align 8
  %95 = getelementptr inbounds i8, i8* %94, i64 %59
  %96 = getelementptr inbounds i8, i8* %95, i64 %93
  %97 = load i8, i8* %96, align 1
  %98 = zext i8 %97 to i32
  %99 = sext i16 %56 to i32
  %100 = add nsw i32 %98, %99
  %101 = icmp slt i32 %100, 255
  %102 = select i1 %101, i32 %100, i32 255
  %103 = icmp sgt i32 %102, 0
  %104 = select i1 %103, i32 %102, i32 0
  %105 = trunc i32 %104 to i8
  store i8 %105, i8* %96, align 1
  %106 = load i32, i32* %11, align 4
  %107 = sext i32 %106 to i64
  %108 = mul nsw i64 %18, %107
  %109 = load i8*, i8** %13, align 8
  %110 = getelementptr inbounds i8, i8* %109, i64 %59
  %111 = getelementptr inbounds i8, i8* %110, i64 %108
  %112 = load i8, i8* %111, align 1
  %113 = zext i8 %112 to i32
  %114 = sext i16 %55 to i32
  %115 = add nsw i32 %113, %114
  %116 = icmp slt i32 %115, 255
  %117 = select i1 %116, i32 %115, i32 255
  %118 = icmp sgt i32 %117, 0
  %119 = select i1 %118, i32 %117, i32 0
  %120 = trunc i32 %119 to i8
  store i8 %120, i8* %111, align 1
  %121 = add nuw nsw i64 %20, 1
  %122 = icmp eq i64 %121, 4
  br i1 %122, label %26, label %19
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

; Function Attrs: nounwind ssp uwtable
define internal fastcc void @_ZN7libgav13dsp12_GLOBAL__N_15Dct_CIsLi3EEEvPva(i8* nocapture) unnamed_addr #0 {
  %2 = alloca [8 x i16], align 16
  %3 = bitcast i8* %0 to i16*
  %4 = bitcast [8 x i16]* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %4) #4
  %5 = getelementptr inbounds [8 x i16], [8 x i16]* %2, i64 0, i64 0
  %6 = getelementptr inbounds [8 x i16], [8 x i16]* %2, i64 0, i64 1
  %7 = getelementptr inbounds [8 x i16], [8 x i16]* %2, i64 0, i64 2
  %8 = getelementptr inbounds [8 x i16], [8 x i16]* %2, i64 0, i64 3
  %9 = getelementptr inbounds [8 x i16], [8 x i16]* %2, i64 0, i64 4
  %10 = getelementptr inbounds [8 x i16], [8 x i16]* %2, i64 0, i64 5
  %11 = getelementptr inbounds [8 x i16], [8 x i16]* %2, i64 0, i64 6
  %12 = getelementptr inbounds [8 x i16], [8 x i16]* %2, i64 0, i64 7
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 16 %4, i8* align 2 %0, i64 16, i1 false)
  %13 = load i16, i16* %5, align 16
  %14 = load i16, i16* %9, align 8
  %15 = getelementptr inbounds i8, i8* %0, i64 2
  %16 = bitcast i8* %15 to i16*
  %17 = load i16, i16* %7, align 4
  %18 = getelementptr inbounds i8, i8* %0, i64 4
  %19 = bitcast i8* %18 to i16*
  %20 = load i16, i16* %11, align 4
  %21 = getelementptr inbounds i8, i8* %0, i64 6
  %22 = bitcast i8* %21 to i16*
  %23 = load i16, i16* %6, align 2
  %24 = getelementptr inbounds i8, i8* %0, i64 8
  %25 = bitcast i8* %24 to i16*
  %26 = load i16, i16* %10, align 2
  %27 = getelementptr inbounds i8, i8* %0, i64 10
  %28 = bitcast i8* %27 to i16*
  %29 = load i16, i16* %8, align 2
  %30 = getelementptr inbounds i8, i8* %0, i64 12
  %31 = bitcast i8* %30 to i16*
  %32 = load i16, i16* %12, align 2
  %33 = getelementptr inbounds i8, i8* %0, i64 14
  %34 = bitcast i8* %33 to i16*
  %35 = sext i16 %23 to i64
  %36 = mul nsw i64 %35, 799
  %37 = sext i16 %32 to i64
  %38 = mul nsw i64 %35, 4017
  %39 = mul nsw i64 %37, 799
  %40 = add nsw i64 %36, 2048
  %41 = mul nsw i64 %37, -4017
  %42 = add nsw i64 %40, %41
  %43 = lshr i64 %42, 12
  %44 = add nsw i64 %38, 2048
  %45 = add nsw i64 %44, %39
  %46 = lshr i64 %45, 12
  %47 = sext i16 %26 to i64
  %48 = mul nsw i64 %47, 3406
  %49 = sext i16 %29 to i64
  %50 = mul nsw i64 %47, 2276
  %51 = mul nsw i64 %49, 3406
  %52 = add nsw i64 %48, 2048
  %53 = mul nsw i64 %49, -2276
  %54 = add nsw i64 %52, %53
  %55 = lshr i64 %54, 12
  %56 = add nsw i64 %50, 2048
  %57 = add nsw i64 %56, %51
  %58 = lshr i64 %57, 12
  %59 = sext i16 %13 to i64
  %60 = mul nsw i64 %59, 2896
  %61 = sext i16 %14 to i64
  %62 = mul nsw i64 %61, 2896
  %63 = sub nsw i64 %60, %62
  %64 = add nsw i64 %62, %60
  %65 = add nsw i64 %64, 2048
  %66 = lshr i64 %65, 12
  %67 = add nsw i64 %63, 2048
  %68 = lshr i64 %67, 12
  %69 = sext i16 %17 to i64
  %70 = mul nsw i64 %69, 1567
  %71 = sext i16 %20 to i64
  %72 = mul nsw i64 %71, -3784
  %73 = add nsw i64 %70, %72
  %74 = mul nsw i64 %69, 3784
  %75 = mul nsw i64 %71, 1567
  %76 = add nsw i64 %75, %74
  %77 = add nsw i64 %73, 2048
  %78 = lshr i64 %77, 12
  %79 = add nsw i64 %76, 2048
  %80 = lshr i64 %79, 12
  %81 = shl i64 %43, 16
  %82 = trunc i64 %81 to i32
  %83 = ashr exact i32 %82, 16
  %84 = shl i64 %55, 16
  %85 = trunc i64 %84 to i32
  %86 = ashr exact i32 %85, 16
  %87 = add nsw i32 %86, %83
  %88 = sub nsw i32 %83, %86
  %89 = icmp slt i32 %87, 32767
  %90 = select i1 %89, i32 %87, i32 32767
  %91 = icmp sgt i32 %90, -32768
  %92 = select i1 %91, i32 %90, i32 -32768
  %93 = trunc i32 %92 to i16
  store i16 %93, i16* %25, align 2
  %94 = icmp slt i32 %88, 32767
  %95 = select i1 %94, i32 %88, i32 32767
  %96 = icmp sgt i32 %95, -32768
  %97 = select i1 %96, i32 %95, i32 -32768
  %98 = zext i32 %97 to i64
  %99 = shl i64 %46, 16
  %100 = trunc i64 %99 to i32
  %101 = ashr exact i32 %100, 16
  %102 = shl i64 %58, 16
  %103 = trunc i64 %102 to i32
  %104 = ashr exact i32 %103, 16
  %105 = add nsw i32 %104, %101
  %106 = sub nsw i32 %101, %104
  %107 = icmp slt i32 %105, 32767
  %108 = select i1 %107, i32 %105, i32 32767
  %109 = icmp sgt i32 %108, -32768
  %110 = select i1 %109, i32 %108, i32 -32768
  %111 = icmp slt i32 %106, 32767
  %112 = select i1 %111, i32 %106, i32 32767
  %113 = icmp sgt i32 %112, -32768
  %114 = select i1 %113, i32 %112, i32 -32768
  %115 = zext i32 %114 to i64
  %116 = shl i64 %66, 16
  %117 = trunc i64 %116 to i32
  %118 = ashr exact i32 %117, 16
  %119 = shl i64 %80, 16
  %120 = trunc i64 %119 to i32
  %121 = ashr exact i32 %120, 16
  %122 = add nsw i32 %121, %118
  %123 = sub nsw i32 %118, %121
  %124 = icmp slt i32 %122, 32767
  %125 = select i1 %124, i32 %122, i32 32767
  %126 = icmp sgt i32 %125, -32768
  %127 = select i1 %126, i32 %125, i32 -32768
  %128 = icmp slt i32 %123, 32767
  %129 = select i1 %128, i32 %123, i32 32767
  %130 = icmp sgt i32 %129, -32768
  %131 = select i1 %130, i32 %129, i32 -32768
  %132 = shl i64 %68, 16
  %133 = trunc i64 %132 to i32
  %134 = ashr exact i32 %133, 16
  %135 = shl i64 %78, 16
  %136 = trunc i64 %135 to i32
  %137 = ashr exact i32 %136, 16
  %138 = add nsw i32 %137, %134
  %139 = sub nsw i32 %134, %137
  %140 = icmp slt i32 %138, 32767
  %141 = select i1 %140, i32 %138, i32 32767
  %142 = icmp sgt i32 %141, -32768
  %143 = select i1 %142, i32 %141, i32 -32768
  %144 = icmp slt i32 %139, 32767
  %145 = select i1 %144, i32 %139, i32 32767
  %146 = icmp sgt i32 %145, -32768
  %147 = select i1 %146, i32 %145, i32 -32768
  %148 = shl i64 %115, 48
  %149 = ashr exact i64 %148, 48
  %150 = mul nsw i64 %149, 2896
  %151 = shl i64 %98, 48
  %152 = ashr exact i64 %151, 48
  %153 = mul nsw i64 %152, 2896
  %154 = add nsw i64 %150, 2048
  %155 = add nsw i64 %154, %153
  %156 = lshr i64 %155, 12
  %157 = sub nsw i64 %154, %153
  %158 = lshr i64 %157, 12
  %159 = add nsw i32 %110, %127
  %160 = sub nsw i32 %127, %110
  %161 = icmp slt i32 %159, 32767
  %162 = select i1 %161, i32 %159, i32 32767
  %163 = icmp sgt i32 %162, -32768
  %164 = select i1 %163, i32 %162, i32 -32768
  %165 = trunc i32 %164 to i16
  store i16 %165, i16* %3, align 2
  %166 = icmp slt i32 %160, 32767
  %167 = select i1 %166, i32 %160, i32 32767
  %168 = icmp sgt i32 %167, -32768
  %169 = select i1 %168, i32 %167, i32 -32768
  %170 = trunc i32 %169 to i16
  store i16 %170, i16* %34, align 2
  %171 = shl i64 %156, 16
  %172 = trunc i64 %171 to i32
  %173 = ashr exact i32 %172, 16
  %174 = add nsw i32 %143, %173
  %175 = sub nsw i32 %143, %173
  %176 = icmp slt i32 %174, 32767
  %177 = select i1 %176, i32 %174, i32 32767
  %178 = icmp sgt i32 %177, -32768
  %179 = select i1 %178, i32 %177, i32 -32768
  %180 = trunc i32 %179 to i16
  store i16 %180, i16* %16, align 2
  %181 = icmp slt i32 %175, 32767
  %182 = select i1 %181, i32 %175, i32 32767
  %183 = icmp sgt i32 %182, -32768
  %184 = select i1 %183, i32 %182, i32 -32768
  %185 = trunc i32 %184 to i16
  store i16 %185, i16* %31, align 2
  %186 = shl i64 %158, 16
  %187 = trunc i64 %186 to i32
  %188 = ashr exact i32 %187, 16
  %189 = add nsw i32 %147, %188
  %190 = sub nsw i32 %147, %188
  %191 = icmp slt i32 %189, 32767
  %192 = select i1 %191, i32 %189, i32 32767
  %193 = icmp sgt i32 %192, -32768
  %194 = select i1 %193, i32 %192, i32 -32768
  %195 = trunc i32 %194 to i16
  store i16 %195, i16* %19, align 2
  %196 = icmp slt i32 %190, 32767
  %197 = select i1 %196, i32 %190, i32 32767
  %198 = icmp sgt i32 %197, -32768
  %199 = select i1 %198, i32 %197, i32 -32768
  %200 = trunc i32 %199 to i16
  store i16 %200, i16* %28, align 2
  %201 = load i16, i16* %25, align 2
  %202 = sext i16 %201 to i32
  %203 = add nsw i32 %131, %202
  %204 = sub nsw i32 %131, %202
  %205 = icmp slt i32 %203, 32767
  %206 = select i1 %205, i32 %203, i32 32767
  %207 = icmp sgt i32 %206, -32768
  %208 = select i1 %207, i32 %206, i32 -32768
  %209 = trunc i32 %208 to i16
  store i16 %209, i16* %22, align 2
  %210 = icmp slt i32 %204, 32767
  %211 = select i1 %210, i32 %204, i32 32767
  %212 = icmp sgt i32 %211, -32768
  %213 = select i1 %212, i32 %211, i32 -32768
  %214 = trunc i32 %213 to i16
  store i16 %214, i16* %25, align 2
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %4) #4
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal fastcc void @_ZN7libgav13dsp12_GLOBAL__N_15Dct_CIsLi4EEEvPva(i8*) unnamed_addr #0 {
  %2 = alloca [16 x i16], align 16
  %3 = bitcast i8* %0 to i16*
  %4 = bitcast [16 x i16]* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %4) #4
  %5 = getelementptr inbounds [16 x i16], [16 x i16]* %2, i64 0, i64 0
  %6 = getelementptr inbounds [16 x i16], [16 x i16]* %2, i64 0, i64 1
  %7 = getelementptr inbounds [16 x i16], [16 x i16]* %2, i64 0, i64 2
  %8 = getelementptr inbounds [16 x i16], [16 x i16]* %2, i64 0, i64 3
  %9 = getelementptr inbounds [16 x i16], [16 x i16]* %2, i64 0, i64 4
  %10 = getelementptr inbounds [16 x i16], [16 x i16]* %2, i64 0, i64 5
  %11 = getelementptr inbounds [16 x i16], [16 x i16]* %2, i64 0, i64 6
  %12 = getelementptr inbounds [16 x i16], [16 x i16]* %2, i64 0, i64 7
  %13 = getelementptr inbounds [16 x i16], [16 x i16]* %2, i64 0, i64 8
  %14 = getelementptr inbounds [16 x i16], [16 x i16]* %2, i64 0, i64 9
  %15 = getelementptr inbounds [16 x i16], [16 x i16]* %2, i64 0, i64 10
  %16 = getelementptr inbounds [16 x i16], [16 x i16]* %2, i64 0, i64 11
  %17 = getelementptr inbounds [16 x i16], [16 x i16]* %2, i64 0, i64 12
  %18 = getelementptr inbounds [16 x i16], [16 x i16]* %2, i64 0, i64 13
  %19 = getelementptr inbounds [16 x i16], [16 x i16]* %2, i64 0, i64 14
  %20 = getelementptr inbounds [16 x i16], [16 x i16]* %2, i64 0, i64 15
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 16 %4, i8* align 2 %0, i64 32, i1 false)
  %21 = load i16, i16* %5, align 16
  store i16 %21, i16* %3, align 2
  %22 = load i16, i16* %13, align 16
  %23 = getelementptr inbounds i8, i8* %0, i64 2
  %24 = bitcast i8* %23 to i16*
  store i16 %22, i16* %24, align 2
  %25 = load i16, i16* %9, align 8
  %26 = getelementptr inbounds i8, i8* %0, i64 4
  %27 = bitcast i8* %26 to i16*
  store i16 %25, i16* %27, align 2
  %28 = load i16, i16* %17, align 8
  %29 = getelementptr inbounds i8, i8* %0, i64 6
  %30 = bitcast i8* %29 to i16*
  store i16 %28, i16* %30, align 2
  %31 = load i16, i16* %7, align 4
  %32 = getelementptr inbounds i8, i8* %0, i64 8
  %33 = bitcast i8* %32 to i16*
  store i16 %31, i16* %33, align 2
  %34 = load i16, i16* %15, align 4
  %35 = getelementptr inbounds i8, i8* %0, i64 10
  %36 = bitcast i8* %35 to i16*
  store i16 %34, i16* %36, align 2
  %37 = load i16, i16* %11, align 4
  %38 = getelementptr inbounds i8, i8* %0, i64 12
  %39 = bitcast i8* %38 to i16*
  store i16 %37, i16* %39, align 2
  %40 = load i16, i16* %19, align 4
  %41 = getelementptr inbounds i8, i8* %0, i64 14
  %42 = bitcast i8* %41 to i16*
  store i16 %40, i16* %42, align 2
  %43 = load i16, i16* %6, align 2
  %44 = getelementptr inbounds i8, i8* %0, i64 16
  %45 = bitcast i8* %44 to i16*
  store i16 %43, i16* %45, align 2
  %46 = load i16, i16* %14, align 2
  %47 = getelementptr inbounds i8, i8* %0, i64 18
  %48 = bitcast i8* %47 to i16*
  store i16 %46, i16* %48, align 2
  %49 = load i16, i16* %10, align 2
  %50 = getelementptr inbounds i8, i8* %0, i64 20
  %51 = bitcast i8* %50 to i16*
  store i16 %49, i16* %51, align 2
  %52 = load i16, i16* %18, align 2
  %53 = getelementptr inbounds i8, i8* %0, i64 22
  %54 = bitcast i8* %53 to i16*
  store i16 %52, i16* %54, align 2
  %55 = load i16, i16* %8, align 2
  %56 = getelementptr inbounds i8, i8* %0, i64 24
  %57 = bitcast i8* %56 to i16*
  store i16 %55, i16* %57, align 2
  %58 = load i16, i16* %16, align 2
  %59 = getelementptr inbounds i8, i8* %0, i64 26
  %60 = bitcast i8* %59 to i16*
  store i16 %58, i16* %60, align 2
  %61 = load i16, i16* %12, align 2
  %62 = getelementptr inbounds i8, i8* %0, i64 28
  %63 = bitcast i8* %62 to i16*
  store i16 %61, i16* %63, align 2
  %64 = load i16, i16* %20, align 2
  %65 = getelementptr inbounds i8, i8* %0, i64 30
  %66 = bitcast i8* %65 to i16*
  store i16 %64, i16* %66, align 2
  br label %67

67:                                               ; preds = %172, %1
  %68 = phi i64 [ 0, %1 ], [ %184, %172 ]
  %69 = add nuw nsw i64 %68, 8
  %70 = sub nuw nsw i64 15, %68
  %71 = sub nuw nsw i64 3, %68
  %72 = getelementptr inbounds [5 x [64 x i8]], [5 x [64 x i8]]* @_ZN7libgav13dsp12_GLOBAL__N_117kBitReverseLookupE, i64 0, i64 0, i64 %71
  %73 = load i8, i8* %72, align 1
  %74 = zext i8 %73 to i32
  %75 = shl nuw nsw i32 %74, 4
  %76 = or i32 %75, 12
  %77 = getelementptr inbounds i16, i16* %3, i64 %69
  %78 = load i16, i16* %77, align 2
  %79 = sext i16 %78 to i64
  %80 = and i32 %76, 252
  %81 = icmp ult i32 %80, 65
  br i1 %81, label %82, label %86

82:                                               ; preds = %67
  %83 = zext i32 %80 to i64
  %84 = getelementptr inbounds [65 x i16], [65 x i16]* @_ZN7libgav13dsp12_GLOBAL__N_17kCos128E, i64 0, i64 %83
  %85 = load i16, i16* %84, align 8
  br label %107

86:                                               ; preds = %67
  %87 = icmp ult i32 %80, 129
  br i1 %87, label %88, label %94

88:                                               ; preds = %86
  %89 = sub nuw nsw i32 128, %80
  %90 = sext i32 %89 to i64
  %91 = getelementptr inbounds [65 x i16], [65 x i16]* @_ZN7libgav13dsp12_GLOBAL__N_17kCos128E, i64 0, i64 %90
  %92 = load i16, i16* %91, align 8
  %93 = sub i16 0, %92
  br label %107

94:                                               ; preds = %86
  %95 = icmp ult i32 %80, 193
  br i1 %95, label %96, label %102

96:                                               ; preds = %94
  %97 = add nsw i32 %80, -128
  %98 = sext i32 %97 to i64
  %99 = getelementptr inbounds [65 x i16], [65 x i16]* @_ZN7libgav13dsp12_GLOBAL__N_17kCos128E, i64 0, i64 %98
  %100 = load i16, i16* %99, align 8
  %101 = sub i16 0, %100
  br label %107

102:                                              ; preds = %94
  %103 = sub nuw nsw i32 256, %80
  %104 = zext i32 %103 to i64
  %105 = getelementptr inbounds [65 x i16], [65 x i16]* @_ZN7libgav13dsp12_GLOBAL__N_17kCos128E, i64 0, i64 %104
  %106 = load i16, i16* %105, align 8
  br label %107

107:                                              ; preds = %102, %96, %88, %82
  %108 = phi i16 [ %85, %82 ], [ %93, %88 ], [ %101, %96 ], [ %106, %102 ]
  %109 = sext i16 %108 to i64
  %110 = mul nsw i64 %109, %79
  %111 = getelementptr inbounds i16, i16* %3, i64 %70
  %112 = load i16, i16* %111, align 2
  %113 = sext i16 %112 to i64
  %114 = add nuw nsw i32 %76, 192
  %115 = and i32 %114, 252
  %116 = icmp ult i32 %115, 65
  br i1 %116, label %121, label %117

117:                                              ; preds = %107
  %118 = icmp ult i32 %115, 129
  br i1 %118, label %125, label %119

119:                                              ; preds = %117
  %120 = icmp ult i32 %115, 193
  br i1 %120, label %131, label %137

121:                                              ; preds = %107
  %122 = zext i32 %115 to i64
  %123 = getelementptr inbounds [65 x i16], [65 x i16]* @_ZN7libgav13dsp12_GLOBAL__N_17kCos128E, i64 0, i64 %122
  %124 = load i16, i16* %123, align 8
  br label %142

125:                                              ; preds = %117
  %126 = sub nuw nsw i32 128, %115
  %127 = sext i32 %126 to i64
  %128 = getelementptr inbounds [65 x i16], [65 x i16]* @_ZN7libgav13dsp12_GLOBAL__N_17kCos128E, i64 0, i64 %127
  %129 = load i16, i16* %128, align 8
  %130 = sub i16 0, %129
  br label %142

131:                                              ; preds = %119
  %132 = add nsw i32 %115, -128
  %133 = sext i32 %132 to i64
  %134 = getelementptr inbounds [65 x i16], [65 x i16]* @_ZN7libgav13dsp12_GLOBAL__N_17kCos128E, i64 0, i64 %133
  %135 = load i16, i16* %134, align 8
  %136 = sub i16 0, %135
  br label %142

137:                                              ; preds = %119
  %138 = sub nuw nsw i32 256, %115
  %139 = zext i32 %138 to i64
  %140 = getelementptr inbounds [65 x i16], [65 x i16]* @_ZN7libgav13dsp12_GLOBAL__N_17kCos128E, i64 0, i64 %139
  %141 = load i16, i16* %140, align 8
  br label %142

142:                                              ; preds = %137, %131, %125, %121
  %143 = phi i16 [ %124, %121 ], [ %130, %125 ], [ %136, %131 ], [ %141, %137 ]
  %144 = sext i16 %143 to i64
  %145 = mul nsw i64 %144, %113
  %146 = mul nsw i64 %144, %79
  br i1 %81, label %147, label %151

147:                                              ; preds = %142
  %148 = zext i32 %80 to i64
  %149 = getelementptr inbounds [65 x i16], [65 x i16]* @_ZN7libgav13dsp12_GLOBAL__N_17kCos128E, i64 0, i64 %148
  %150 = load i16, i16* %149, align 8
  br label %172

151:                                              ; preds = %142
  %152 = icmp ult i32 %80, 129
  br i1 %152, label %153, label %159

153:                                              ; preds = %151
  %154 = sub nuw nsw i32 128, %80
  %155 = sext i32 %154 to i64
  %156 = getelementptr inbounds [65 x i16], [65 x i16]* @_ZN7libgav13dsp12_GLOBAL__N_17kCos128E, i64 0, i64 %155
  %157 = load i16, i16* %156, align 8
  %158 = sub i16 0, %157
  br label %172

159:                                              ; preds = %151
  %160 = icmp ult i32 %80, 193
  br i1 %160, label %161, label %167

161:                                              ; preds = %159
  %162 = add nsw i32 %80, -128
  %163 = sext i32 %162 to i64
  %164 = getelementptr inbounds [65 x i16], [65 x i16]* @_ZN7libgav13dsp12_GLOBAL__N_17kCos128E, i64 0, i64 %163
  %165 = load i16, i16* %164, align 8
  %166 = sub i16 0, %165
  br label %172

167:                                              ; preds = %159
  %168 = sub nuw nsw i32 256, %80
  %169 = zext i32 %168 to i64
  %170 = getelementptr inbounds [65 x i16], [65 x i16]* @_ZN7libgav13dsp12_GLOBAL__N_17kCos128E, i64 0, i64 %169
  %171 = load i16, i16* %170, align 8
  br label %172

172:                                              ; preds = %147, %153, %161, %167
  %173 = phi i16 [ %150, %147 ], [ %158, %153 ], [ %166, %161 ], [ %171, %167 ]
  %174 = sext i16 %173 to i64
  %175 = mul nsw i64 %174, %113
  %176 = add nsw i64 %110, 2048
  %177 = sub nsw i64 %176, %145
  %178 = lshr i64 %177, 12
  %179 = trunc i64 %178 to i16
  store i16 %179, i16* %77, align 2
  %180 = add nsw i64 %146, 2048
  %181 = add nsw i64 %180, %175
  %182 = lshr i64 %181, 12
  %183 = trunc i64 %182 to i16
  store i16 %183, i16* %111, align 2
  %184 = add nuw nsw i64 %68, 1
  %185 = icmp eq i64 %184, 4
  br i1 %185, label %186, label %67

186:                                              ; preds = %172
  %187 = load i16, i16* %33, align 2
  %188 = sext i16 %187 to i64
  %189 = mul nsw i64 %188, 799
  %190 = load i16, i16* %42, align 2
  %191 = sext i16 %190 to i64
  %192 = mul nsw i64 %188, 4017
  %193 = mul nsw i64 %191, 799
  %194 = add nsw i64 %189, 2048
  %195 = mul nsw i64 %191, -4017
  %196 = add nsw i64 %194, %195
  %197 = lshr i64 %196, 12
  %198 = trunc i64 %197 to i16
  store i16 %198, i16* %33, align 2
  %199 = add nsw i64 %192, 2048
  %200 = add nsw i64 %199, %193
  %201 = lshr i64 %200, 12
  %202 = trunc i64 %201 to i16
  store i16 %202, i16* %42, align 2
  %203 = load i16, i16* %36, align 2
  %204 = sext i16 %203 to i64
  %205 = mul nsw i64 %204, 3406
  %206 = load i16, i16* %39, align 2
  %207 = sext i16 %206 to i64
  %208 = mul nsw i64 %204, 2276
  %209 = mul nsw i64 %207, 3406
  %210 = add nsw i64 %205, 2048
  %211 = mul nsw i64 %207, -2276
  %212 = add nsw i64 %210, %211
  %213 = lshr i64 %212, 12
  %214 = trunc i64 %213 to i16
  store i16 %214, i16* %36, align 2
  %215 = add nsw i64 %208, 2048
  %216 = add nsw i64 %215, %209
  %217 = lshr i64 %216, 12
  %218 = trunc i64 %217 to i16
  store i16 %218, i16* %39, align 2
  %219 = load i16, i16* %45, align 2
  %220 = sext i16 %219 to i32
  %221 = load i16, i16* %48, align 2
  %222 = sext i16 %221 to i32
  %223 = add nsw i32 %222, %220
  %224 = sub nsw i32 %220, %222
  %225 = icmp slt i32 %223, 32767
  %226 = select i1 %225, i32 %223, i32 32767
  %227 = icmp sgt i32 %226, -32768
  %228 = select i1 %227, i32 %226, i32 -32768
  %229 = trunc i32 %228 to i16
  store i16 %229, i16* %45, align 2
  %230 = icmp slt i32 %224, 32767
  %231 = select i1 %230, i32 %224, i32 32767
  %232 = icmp sgt i32 %231, -32768
  %233 = select i1 %232, i32 %231, i32 -32768
  %234 = trunc i32 %233 to i16
  store i16 %234, i16* %48, align 2
  %235 = load i16, i16* %54, align 2
  %236 = sext i16 %235 to i32
  %237 = load i16, i16* %51, align 2
  %238 = sext i16 %237 to i32
  %239 = add nsw i32 %238, %236
  %240 = sub nsw i32 %236, %238
  %241 = icmp slt i32 %239, 32767
  %242 = select i1 %241, i32 %239, i32 32767
  %243 = icmp sgt i32 %242, -32768
  %244 = select i1 %243, i32 %242, i32 -32768
  %245 = trunc i32 %244 to i16
  store i16 %245, i16* %54, align 2
  %246 = icmp slt i32 %240, 32767
  %247 = select i1 %246, i32 %240, i32 32767
  %248 = icmp sgt i32 %247, -32768
  %249 = select i1 %248, i32 %247, i32 -32768
  %250 = trunc i32 %249 to i16
  store i16 %250, i16* %51, align 2
  %251 = load i16, i16* %57, align 2
  %252 = sext i16 %251 to i32
  %253 = load i16, i16* %60, align 2
  %254 = sext i16 %253 to i32
  %255 = add nsw i32 %254, %252
  %256 = sub nsw i32 %252, %254
  %257 = icmp slt i32 %255, 32767
  %258 = select i1 %257, i32 %255, i32 32767
  %259 = icmp sgt i32 %258, -32768
  %260 = select i1 %259, i32 %258, i32 -32768
  %261 = trunc i32 %260 to i16
  store i16 %261, i16* %57, align 2
  %262 = icmp slt i32 %256, 32767
  %263 = select i1 %262, i32 %256, i32 32767
  %264 = icmp sgt i32 %263, -32768
  %265 = select i1 %264, i32 %263, i32 -32768
  %266 = trunc i32 %265 to i16
  store i16 %266, i16* %60, align 2
  %267 = load i16, i16* %66, align 2
  %268 = sext i16 %267 to i32
  %269 = load i16, i16* %63, align 2
  %270 = sext i16 %269 to i32
  %271 = add nsw i32 %270, %268
  %272 = sub nsw i32 %268, %270
  %273 = icmp slt i32 %271, 32767
  %274 = select i1 %273, i32 %271, i32 32767
  %275 = icmp sgt i32 %274, -32768
  %276 = select i1 %275, i32 %274, i32 -32768
  %277 = trunc i32 %276 to i16
  store i16 %277, i16* %66, align 2
  %278 = icmp slt i32 %272, 32767
  %279 = select i1 %278, i32 %272, i32 32767
  %280 = icmp sgt i32 %279, -32768
  %281 = select i1 %280, i32 %279, i32 -32768
  %282 = zext i32 %281 to i64
  %283 = load i16, i16* %3, align 2
  %284 = sext i16 %283 to i64
  %285 = mul nsw i64 %284, 2896
  %286 = load i16, i16* %24, align 2
  %287 = sext i16 %286 to i64
  %288 = mul nsw i64 %287, 2896
  %289 = sub nsw i64 %285, %288
  %290 = add nsw i64 %288, %285
  %291 = add nsw i64 %290, 2048
  %292 = lshr i64 %291, 12
  %293 = add nsw i64 %289, 2048
  %294 = lshr i64 %293, 12
  %295 = trunc i64 %294 to i16
  store i16 %295, i16* %24, align 2
  %296 = load i16, i16* %27, align 2
  %297 = sext i16 %296 to i64
  %298 = mul nsw i64 %297, 1567
  %299 = load i16, i16* %30, align 2
  %300 = sext i16 %299 to i64
  %301 = mul nsw i64 %300, -3784
  %302 = add nsw i64 %298, %301
  %303 = mul nsw i64 %297, 3784
  %304 = mul nsw i64 %300, 1567
  %305 = add nsw i64 %304, %303
  %306 = add nsw i64 %302, 2048
  %307 = lshr i64 %306, 12
  %308 = add nsw i64 %305, 2048
  %309 = lshr i64 %308, 12
  %310 = sext i16 %198 to i32
  %311 = sext i16 %214 to i32
  %312 = add nsw i32 %311, %310
  %313 = sub nsw i32 %310, %311
  %314 = icmp slt i32 %312, 32767
  %315 = select i1 %314, i32 %312, i32 32767
  %316 = icmp sgt i32 %315, -32768
  %317 = select i1 %316, i32 %315, i32 -32768
  %318 = trunc i32 %317 to i16
  store i16 %318, i16* %33, align 2
  %319 = icmp slt i32 %313, 32767
  %320 = select i1 %319, i32 %313, i32 32767
  %321 = icmp sgt i32 %320, -32768
  %322 = select i1 %321, i32 %320, i32 -32768
  %323 = zext i32 %322 to i64
  %324 = sext i16 %202 to i32
  %325 = sext i16 %218 to i32
  %326 = add nsw i32 %325, %324
  %327 = sub nsw i32 %324, %325
  %328 = icmp slt i32 %326, 32767
  %329 = select i1 %328, i32 %326, i32 32767
  %330 = icmp sgt i32 %329, -32768
  %331 = select i1 %330, i32 %329, i32 -32768
  %332 = trunc i32 %331 to i16
  store i16 %332, i16* %42, align 2
  %333 = icmp slt i32 %327, 32767
  %334 = select i1 %333, i32 %327, i32 32767
  %335 = icmp sgt i32 %334, -32768
  %336 = select i1 %335, i32 %334, i32 -32768
  %337 = zext i32 %336 to i64
  %338 = shl i64 %282, 48
  %339 = ashr exact i64 %338, 48
  %340 = mul nsw i64 %339, 1567
  %341 = sext i16 %234 to i64
  %342 = mul nsw i64 %339, 3784
  %343 = mul nsw i64 %341, 1567
  %344 = add nsw i64 %342, 2048
  %345 = add nsw i64 %344, %343
  %346 = lshr i64 %345, 12
  %347 = trunc i64 %346 to i16
  store i16 %347, i16* %63, align 2
  %348 = add nsw i64 %340, 2048
  %349 = mul nsw i64 %341, -3784
  %350 = add nsw i64 %348, %349
  %351 = lshr i64 %350, 12
  %352 = sext i16 %266 to i64
  %353 = mul nsw i64 %352, -3784
  %354 = sext i16 %250 to i64
  %355 = mul nsw i64 %352, 1567
  %356 = mul nsw i64 %354, -3784
  %357 = add nsw i64 %355, 2048
  %358 = add nsw i64 %357, %356
  %359 = lshr i64 %358, 12
  %360 = trunc i64 %359 to i16
  store i16 %360, i16* %60, align 2
  %361 = add nsw i64 %353, 2048
  %362 = mul nsw i64 %354, -1567
  %363 = add nsw i64 %361, %362
  %364 = lshr i64 %363, 12
  %365 = shl i64 %292, 16
  %366 = trunc i64 %365 to i32
  %367 = ashr exact i32 %366, 16
  %368 = shl i64 %309, 16
  %369 = trunc i64 %368 to i32
  %370 = ashr exact i32 %369, 16
  %371 = add nsw i32 %370, %367
  %372 = sub nsw i32 %367, %370
  %373 = icmp slt i32 %371, 32767
  %374 = select i1 %373, i32 %371, i32 32767
  %375 = icmp sgt i32 %374, -32768
  %376 = select i1 %375, i32 %374, i32 -32768
  %377 = trunc i32 %376 to i16
  store i16 %377, i16* %3, align 2
  %378 = icmp slt i32 %372, 32767
  %379 = select i1 %378, i32 %372, i32 32767
  %380 = icmp sgt i32 %379, -32768
  %381 = select i1 %380, i32 %379, i32 -32768
  %382 = trunc i32 %381 to i16
  store i16 %382, i16* %30, align 2
  %383 = sext i16 %295 to i32
  %384 = shl i64 %307, 16
  %385 = trunc i64 %384 to i32
  %386 = ashr exact i32 %385, 16
  %387 = add nsw i32 %386, %383
  %388 = sub nsw i32 %383, %386
  %389 = icmp slt i32 %387, 32767
  %390 = select i1 %389, i32 %387, i32 32767
  %391 = icmp sgt i32 %390, -32768
  %392 = select i1 %391, i32 %390, i32 -32768
  %393 = trunc i32 %392 to i16
  store i16 %393, i16* %24, align 2
  %394 = icmp slt i32 %388, 32767
  %395 = select i1 %394, i32 %388, i32 32767
  %396 = icmp sgt i32 %395, -32768
  %397 = select i1 %396, i32 %395, i32 -32768
  %398 = trunc i32 %397 to i16
  store i16 %398, i16* %27, align 2
  %399 = getelementptr inbounds i8, i8* %0, i64 12
  %400 = bitcast i8* %399 to i16*
  %401 = shl i64 %337, 48
  %402 = ashr exact i64 %401, 48
  %403 = mul nsw i64 %402, 2896
  %404 = getelementptr inbounds i8, i8* %0, i64 10
  %405 = bitcast i8* %404 to i16*
  %406 = shl i64 %323, 48
  %407 = ashr exact i64 %406, 48
  %408 = mul nsw i64 %407, 2896
  %409 = add nsw i64 %403, 2048
  %410 = add nsw i64 %409, %408
  %411 = lshr i64 %410, 12
  %412 = trunc i64 %411 to i16
  store i16 %412, i16* %400, align 2
  %413 = sub nsw i64 %409, %408
  %414 = lshr i64 %413, 12
  %415 = trunc i64 %414 to i16
  store i16 %415, i16* %405, align 2
  %416 = shl i64 %351, 16
  %417 = trunc i64 %416 to i32
  %418 = ashr exact i32 %417, 16
  %419 = shl i64 %364, 16
  %420 = trunc i64 %419 to i32
  %421 = ashr exact i32 %420, 16
  %422 = add nsw i32 %260, %276
  %423 = icmp slt i32 %422, 32767
  %424 = select i1 %423, i32 %422, i32 32767
  %425 = icmp sgt i32 %424, -32768
  %426 = select i1 %425, i32 %424, i32 -32768
  %427 = trunc i32 %426 to i16
  store i16 %427, i16* %66, align 2
  %428 = load i16, i16* %63, align 2
  %429 = sext i16 %428 to i32
  %430 = load i16, i16* %60, align 2
  %431 = sext i16 %430 to i32
  %432 = add nsw i32 %431, %429
  %433 = sub nsw i32 %429, %431
  %434 = icmp slt i32 %432, 32767
  %435 = select i1 %434, i32 %432, i32 32767
  %436 = icmp sgt i32 %435, -32768
  %437 = select i1 %436, i32 %435, i32 -32768
  %438 = trunc i32 %437 to i16
  store i16 %438, i16* %63, align 2
  %439 = icmp slt i32 %433, 32767
  %440 = select i1 %439, i32 %433, i32 32767
  %441 = icmp sgt i32 %440, -32768
  %442 = select i1 %441, i32 %440, i32 -32768
  %443 = zext i32 %442 to i64
  %444 = load i16, i16* %3, align 2
  %445 = sext i16 %444 to i32
  %446 = load i16, i16* %42, align 2
  %447 = sext i16 %446 to i32
  %448 = add nsw i32 %447, %445
  %449 = icmp slt i32 %448, 32767
  %450 = select i1 %449, i32 %448, i32 32767
  %451 = icmp sgt i32 %450, -32768
  %452 = select i1 %451, i32 %450, i32 -32768
  %453 = load i16, i16* %24, align 2
  %454 = sext i16 %453 to i32
  %455 = sext i16 %412 to i32
  %456 = add nsw i32 %455, %454
  %457 = icmp slt i32 %456, 32767
  %458 = select i1 %457, i32 %456, i32 32767
  %459 = icmp sgt i32 %458, -32768
  %460 = select i1 %459, i32 %458, i32 -32768
  %461 = load i16, i16* %27, align 2
  %462 = sext i16 %461 to i32
  %463 = load i16, i16* %36, align 2
  %464 = sext i16 %463 to i32
  %465 = add nsw i32 %464, %462
  %466 = insertelement <8 x i32> undef, i32 %462, i32 0
  %467 = insertelement <8 x i32> %466, i32 %454, i32 1
  %468 = insertelement <8 x i32> %467, i32 %445, i32 2
  %469 = insertelement <8 x i32> %468, i32 %244, i32 3
  %470 = insertelement <8 x i32> %469, i32 %421, i32 4
  %471 = insertelement <8 x i32> %470, i32 %418, i32 5
  %472 = insertelement <8 x i32> %471, i32 %228, i32 6
  %473 = insertelement <8 x i32> %472, i32 %276, i32 7
  %474 = insertelement <8 x i32> undef, i32 %464, i32 0
  %475 = insertelement <8 x i32> %474, i32 %455, i32 1
  %476 = insertelement <8 x i32> %475, i32 %447, i32 2
  %477 = insertelement <8 x i32> %476, i32 %228, i32 3
  %478 = insertelement <8 x i32> %477, i32 %418, i32 4
  %479 = insertelement <8 x i32> %478, i32 %421, i32 5
  %480 = insertelement <8 x i32> %479, i32 %244, i32 6
  %481 = insertelement <8 x i32> %480, i32 %260, i32 7
  %482 = sub nsw <8 x i32> %473, %481
  %483 = add nsw <8 x i32> %473, %481
  %484 = shufflevector <8 x i32> %482, <8 x i32> %483, <8 x i32> <i32 0, i32 1, i32 2, i32 11, i32 12, i32 5, i32 6, i32 7>
  %485 = icmp slt i32 %465, 32767
  %486 = select i1 %485, i32 %465, i32 32767
  %487 = icmp sgt i32 %486, -32768
  %488 = select i1 %487, i32 %486, i32 -32768
  %489 = icmp slt <8 x i32> %484, <i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767>
  %490 = select <8 x i1> %489, <8 x i32> %484, <8 x i32> <i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767>
  %491 = icmp sgt <8 x i32> %490, <i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768>
  %492 = select <8 x i1> %491, <8 x i32> %490, <8 x i32> <i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768>
  %493 = trunc <8 x i32> %492 to <8 x i16>
  %494 = bitcast i8* %35 to <8 x i16>*
  store <8 x i16> %493, <8 x i16>* %494, align 2
  %495 = load i16, i16* %30, align 2
  %496 = sext i16 %495 to i32
  %497 = load i16, i16* %33, align 2
  %498 = sext i16 %497 to i32
  %499 = add nsw i32 %498, %496
  %500 = sub nsw i32 %496, %498
  %501 = icmp slt i32 %499, 32767
  %502 = select i1 %501, i32 %499, i32 32767
  %503 = icmp sgt i32 %502, -32768
  %504 = select i1 %503, i32 %502, i32 -32768
  %505 = icmp slt i32 %500, 32767
  %506 = select i1 %505, i32 %500, i32 32767
  %507 = icmp sgt i32 %506, -32768
  %508 = select i1 %507, i32 %506, i32 -32768
  %509 = shl i64 %443, 48
  %510 = ashr exact i64 %509, 48
  %511 = mul nsw i64 %510, 2896
  %512 = load i16, i16* %51, align 2
  %513 = sext i16 %512 to i64
  %514 = mul nsw i64 %513, 2896
  %515 = add nsw i64 %511, 2048
  %516 = add nsw i64 %515, %514
  %517 = lshr i64 %516, 12
  %518 = sub nsw i64 %515, %514
  %519 = lshr i64 %518, 12
  %520 = trunc i64 %519 to i16
  store i16 %520, i16* %51, align 2
  %521 = load i16, i16* %57, align 2
  %522 = sext i16 %521 to i64
  %523 = mul nsw i64 %522, 2896
  %524 = load i16, i16* %54, align 2
  %525 = sext i16 %524 to i64
  %526 = mul nsw i64 %525, 2896
  %527 = add nsw i64 %523, 2048
  %528 = add nsw i64 %527, %526
  %529 = lshr i64 %528, 12
  %530 = sub nsw i64 %527, %526
  %531 = lshr i64 %530, 12
  %532 = load i16, i16* %66, align 2
  %533 = sext i16 %532 to i32
  %534 = sub nsw i32 %452, %533
  %535 = icmp slt i32 %534, 32767
  %536 = select i1 %535, i32 %534, i32 32767
  %537 = icmp sgt i32 %536, -32768
  %538 = select i1 %537, i32 %536, i32 -32768
  %539 = trunc i32 %538 to i16
  store i16 %539, i16* %66, align 2
  %540 = load i16, i16* %63, align 2
  %541 = sext i16 %540 to i32
  %542 = sub nsw i32 %460, %541
  %543 = icmp slt i32 %542, 32767
  %544 = select i1 %543, i32 %542, i32 32767
  %545 = icmp sgt i32 %544, -32768
  %546 = select i1 %545, i32 %544, i32 -32768
  %547 = trunc i32 %546 to i16
  store i16 %547, i16* %63, align 2
  %548 = shl i64 %517, 16
  %549 = trunc i64 %548 to i32
  %550 = ashr exact i32 %549, 16
  %551 = sub nsw i32 %488, %550
  %552 = icmp slt i32 %551, 32767
  %553 = select i1 %552, i32 %551, i32 32767
  %554 = icmp sgt i32 %553, -32768
  %555 = select i1 %554, i32 %553, i32 -32768
  %556 = trunc i32 %555 to i16
  store i16 %556, i16* %60, align 2
  %557 = shl i64 %529, 16
  %558 = trunc i64 %557 to i32
  %559 = ashr exact i32 %558, 16
  %560 = sub nsw i32 %504, %559
  %561 = icmp slt i32 %560, 32767
  %562 = select i1 %561, i32 %560, i32 32767
  %563 = icmp sgt i32 %562, -32768
  %564 = select i1 %563, i32 %562, i32 -32768
  %565 = trunc i32 %564 to i16
  store i16 %565, i16* %57, align 2
  %566 = shl i64 %531, 16
  %567 = trunc i64 %566 to i32
  %568 = ashr exact i32 %567, 16
  %569 = sub nsw i32 %508, %568
  %570 = icmp slt i32 %569, 32767
  %571 = select i1 %570, i32 %569, i32 32767
  %572 = icmp sgt i32 %571, -32768
  %573 = select i1 %572, i32 %571, i32 -32768
  %574 = trunc i32 %573 to i16
  store i16 %574, i16* %54, align 2
  %575 = load i16, i16* %36, align 2
  %576 = sext i16 %575 to i32
  %577 = load i16, i16* %51, align 2
  %578 = sext i16 %577 to i32
  %579 = sub nsw i32 %576, %578
  %580 = icmp slt i32 %579, 32767
  %581 = select i1 %580, i32 %579, i32 32767
  %582 = icmp sgt i32 %581, -32768
  %583 = select i1 %582, i32 %581, i32 -32768
  %584 = trunc i32 %583 to i16
  store i16 %584, i16* %51, align 2
  %585 = load i16, i16* %39, align 2
  %586 = sext i16 %585 to i32
  %587 = load i16, i16* %48, align 2
  %588 = sext i16 %587 to i32
  %589 = sub nsw i32 %586, %588
  %590 = icmp slt i32 %589, 32767
  %591 = select i1 %590, i32 %589, i32 32767
  %592 = icmp sgt i32 %591, -32768
  %593 = select i1 %592, i32 %591, i32 -32768
  %594 = trunc i32 %593 to i16
  store i16 %594, i16* %48, align 2
  %595 = load i16, i16* %42, align 2
  %596 = sext i16 %595 to i32
  %597 = load i16, i16* %45, align 2
  %598 = sext i16 %597 to i32
  %599 = insertelement <8 x i32> undef, i32 %452, i32 0
  %600 = insertelement <8 x i32> %599, i32 %460, i32 1
  %601 = insertelement <8 x i32> %600, i32 %488, i32 2
  %602 = insertelement <8 x i32> %601, i32 %504, i32 3
  %603 = insertelement <8 x i32> %602, i32 %508, i32 4
  %604 = insertelement <8 x i32> %603, i32 %578, i32 5
  %605 = insertelement <8 x i32> %604, i32 %588, i32 6
  %606 = insertelement <8 x i32> %605, i32 %598, i32 7
  %607 = insertelement <8 x i32> undef, i32 %533, i32 0
  %608 = insertelement <8 x i32> %607, i32 %541, i32 1
  %609 = insertelement <8 x i32> %608, i32 %550, i32 2
  %610 = insertelement <8 x i32> %609, i32 %559, i32 3
  %611 = insertelement <8 x i32> %610, i32 %568, i32 4
  %612 = insertelement <8 x i32> %611, i32 %576, i32 5
  %613 = insertelement <8 x i32> %612, i32 %586, i32 6
  %614 = insertelement <8 x i32> %613, i32 %596, i32 7
  %615 = add nsw <8 x i32> %606, %614
  %616 = sub nsw i32 %596, %598
  %617 = icmp slt <8 x i32> %615, <i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767>
  %618 = select <8 x i1> %617, <8 x i32> %615, <8 x i32> <i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767>
  %619 = icmp sgt <8 x i32> %618, <i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768>
  %620 = select <8 x i1> %619, <8 x i32> %618, <8 x i32> <i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768>
  %621 = trunc <8 x i32> %620 to <8 x i16>
  %622 = bitcast i8* %0 to <8 x i16>*
  store <8 x i16> %621, <8 x i16>* %622, align 2
  %623 = icmp slt i32 %616, 32767
  %624 = select i1 %623, i32 %616, i32 32767
  %625 = icmp sgt i32 %624, -32768
  %626 = select i1 %625, i32 %624, i32 -32768
  %627 = trunc i32 %626 to i16
  store i16 %627, i16* %45, align 2
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %4) #4
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal fastcc void @_ZN7libgav13dsp12_GLOBAL__N_15Dct_CIsLi5EEEvPva(i8*) unnamed_addr #0 {
  %2 = alloca [32 x i16], align 16
  %3 = bitcast i8* %0 to i16*
  %4 = bitcast [32 x i16]* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 64, i8* nonnull %4) #4
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 16 %4, i8* align 2 %0, i64 64, i1 false)
  br label %5

5:                                                ; preds = %5, %1
  %6 = phi i64 [ 0, %1 ], [ %34, %5 ]
  %7 = getelementptr inbounds [5 x [64 x i8]], [5 x [64 x i8]]* @_ZN7libgav13dsp12_GLOBAL__N_117kBitReverseLookupE, i64 0, i64 3, i64 %6
  %8 = load i8, i8* %7, align 4
  %9 = zext i8 %8 to i64
  %10 = getelementptr inbounds [32 x i16], [32 x i16]* %2, i64 0, i64 %9
  %11 = load i16, i16* %10, align 2
  %12 = getelementptr inbounds i16, i16* %3, i64 %6
  store i16 %11, i16* %12, align 2
  %13 = or i64 %6, 1
  %14 = getelementptr inbounds [5 x [64 x i8]], [5 x [64 x i8]]* @_ZN7libgav13dsp12_GLOBAL__N_117kBitReverseLookupE, i64 0, i64 3, i64 %13
  %15 = load i8, i8* %14, align 1
  %16 = zext i8 %15 to i64
  %17 = getelementptr inbounds [32 x i16], [32 x i16]* %2, i64 0, i64 %16
  %18 = load i16, i16* %17, align 2
  %19 = getelementptr inbounds i16, i16* %3, i64 %13
  store i16 %18, i16* %19, align 2
  %20 = or i64 %6, 2
  %21 = getelementptr inbounds [5 x [64 x i8]], [5 x [64 x i8]]* @_ZN7libgav13dsp12_GLOBAL__N_117kBitReverseLookupE, i64 0, i64 3, i64 %20
  %22 = load i8, i8* %21, align 2
  %23 = zext i8 %22 to i64
  %24 = getelementptr inbounds [32 x i16], [32 x i16]* %2, i64 0, i64 %23
  %25 = load i16, i16* %24, align 2
  %26 = getelementptr inbounds i16, i16* %3, i64 %20
  store i16 %25, i16* %26, align 2
  %27 = or i64 %6, 3
  %28 = getelementptr inbounds [5 x [64 x i8]], [5 x [64 x i8]]* @_ZN7libgav13dsp12_GLOBAL__N_117kBitReverseLookupE, i64 0, i64 3, i64 %27
  %29 = load i8, i8* %28, align 1
  %30 = zext i8 %29 to i64
  %31 = getelementptr inbounds [32 x i16], [32 x i16]* %2, i64 0, i64 %30
  %32 = load i16, i16* %31, align 2
  %33 = getelementptr inbounds i16, i16* %3, i64 %27
  store i16 %32, i16* %33, align 2
  %34 = add nuw nsw i64 %6, 4
  %35 = icmp eq i64 %34, 32
  br i1 %35, label %36, label %5

36:                                               ; preds = %5, %141
  %37 = phi i64 [ %153, %141 ], [ 0, %5 ]
  %38 = add nuw nsw i64 %37, 16
  %39 = sub nuw nsw i64 31, %37
  %40 = sub nuw nsw i64 7, %37
  %41 = getelementptr inbounds [5 x [64 x i8]], [5 x [64 x i8]]* @_ZN7libgav13dsp12_GLOBAL__N_117kBitReverseLookupE, i64 0, i64 1, i64 %40
  %42 = load i8, i8* %41, align 1
  %43 = zext i8 %42 to i32
  %44 = shl nuw nsw i32 %43, 3
  %45 = or i32 %44, 6
  %46 = getelementptr inbounds i16, i16* %3, i64 %38
  %47 = load i16, i16* %46, align 2
  %48 = sext i16 %47 to i64
  %49 = and i32 %45, 254
  %50 = icmp ult i32 %49, 65
  br i1 %50, label %51, label %55

51:                                               ; preds = %36
  %52 = zext i32 %49 to i64
  %53 = getelementptr inbounds [65 x i16], [65 x i16]* @_ZN7libgav13dsp12_GLOBAL__N_17kCos128E, i64 0, i64 %52
  %54 = load i16, i16* %53, align 4
  br label %76

55:                                               ; preds = %36
  %56 = icmp ult i32 %49, 129
  br i1 %56, label %57, label %63

57:                                               ; preds = %55
  %58 = sub nuw nsw i32 128, %49
  %59 = sext i32 %58 to i64
  %60 = getelementptr inbounds [65 x i16], [65 x i16]* @_ZN7libgav13dsp12_GLOBAL__N_17kCos128E, i64 0, i64 %59
  %61 = load i16, i16* %60, align 4
  %62 = sub i16 0, %61
  br label %76

63:                                               ; preds = %55
  %64 = icmp ult i32 %49, 193
  br i1 %64, label %65, label %71

65:                                               ; preds = %63
  %66 = add nsw i32 %49, -128
  %67 = sext i32 %66 to i64
  %68 = getelementptr inbounds [65 x i16], [65 x i16]* @_ZN7libgav13dsp12_GLOBAL__N_17kCos128E, i64 0, i64 %67
  %69 = load i16, i16* %68, align 4
  %70 = sub i16 0, %69
  br label %76

71:                                               ; preds = %63
  %72 = sub nuw nsw i32 256, %49
  %73 = zext i32 %72 to i64
  %74 = getelementptr inbounds [65 x i16], [65 x i16]* @_ZN7libgav13dsp12_GLOBAL__N_17kCos128E, i64 0, i64 %73
  %75 = load i16, i16* %74, align 4
  br label %76

76:                                               ; preds = %71, %65, %57, %51
  %77 = phi i16 [ %54, %51 ], [ %62, %57 ], [ %70, %65 ], [ %75, %71 ]
  %78 = sext i16 %77 to i64
  %79 = mul nsw i64 %78, %48
  %80 = getelementptr inbounds i16, i16* %3, i64 %39
  %81 = load i16, i16* %80, align 2
  %82 = sext i16 %81 to i64
  %83 = add nuw nsw i32 %45, 192
  %84 = and i32 %83, 254
  %85 = icmp ult i32 %84, 65
  br i1 %85, label %90, label %86

86:                                               ; preds = %76
  %87 = icmp ult i32 %84, 129
  br i1 %87, label %94, label %88

88:                                               ; preds = %86
  %89 = icmp ult i32 %84, 193
  br i1 %89, label %100, label %106

90:                                               ; preds = %76
  %91 = zext i32 %84 to i64
  %92 = getelementptr inbounds [65 x i16], [65 x i16]* @_ZN7libgav13dsp12_GLOBAL__N_17kCos128E, i64 0, i64 %91
  %93 = load i16, i16* %92, align 4
  br label %111

94:                                               ; preds = %86
  %95 = sub nuw nsw i32 128, %84
  %96 = sext i32 %95 to i64
  %97 = getelementptr inbounds [65 x i16], [65 x i16]* @_ZN7libgav13dsp12_GLOBAL__N_17kCos128E, i64 0, i64 %96
  %98 = load i16, i16* %97, align 4
  %99 = sub i16 0, %98
  br label %111

100:                                              ; preds = %88
  %101 = add nsw i32 %84, -128
  %102 = sext i32 %101 to i64
  %103 = getelementptr inbounds [65 x i16], [65 x i16]* @_ZN7libgav13dsp12_GLOBAL__N_17kCos128E, i64 0, i64 %102
  %104 = load i16, i16* %103, align 4
  %105 = sub i16 0, %104
  br label %111

106:                                              ; preds = %88
  %107 = sub nuw nsw i32 256, %84
  %108 = zext i32 %107 to i64
  %109 = getelementptr inbounds [65 x i16], [65 x i16]* @_ZN7libgav13dsp12_GLOBAL__N_17kCos128E, i64 0, i64 %108
  %110 = load i16, i16* %109, align 4
  br label %111

111:                                              ; preds = %106, %100, %94, %90
  %112 = phi i16 [ %93, %90 ], [ %99, %94 ], [ %105, %100 ], [ %110, %106 ]
  %113 = sext i16 %112 to i64
  %114 = mul nsw i64 %113, %82
  %115 = mul nsw i64 %113, %48
  br i1 %50, label %116, label %120

116:                                              ; preds = %111
  %117 = zext i32 %49 to i64
  %118 = getelementptr inbounds [65 x i16], [65 x i16]* @_ZN7libgav13dsp12_GLOBAL__N_17kCos128E, i64 0, i64 %117
  %119 = load i16, i16* %118, align 4
  br label %141

120:                                              ; preds = %111
  %121 = icmp ult i32 %49, 129
  br i1 %121, label %122, label %128

122:                                              ; preds = %120
  %123 = sub nuw nsw i32 128, %49
  %124 = sext i32 %123 to i64
  %125 = getelementptr inbounds [65 x i16], [65 x i16]* @_ZN7libgav13dsp12_GLOBAL__N_17kCos128E, i64 0, i64 %124
  %126 = load i16, i16* %125, align 4
  %127 = sub i16 0, %126
  br label %141

128:                                              ; preds = %120
  %129 = icmp ult i32 %49, 193
  br i1 %129, label %130, label %136

130:                                              ; preds = %128
  %131 = add nsw i32 %49, -128
  %132 = sext i32 %131 to i64
  %133 = getelementptr inbounds [65 x i16], [65 x i16]* @_ZN7libgav13dsp12_GLOBAL__N_17kCos128E, i64 0, i64 %132
  %134 = load i16, i16* %133, align 4
  %135 = sub i16 0, %134
  br label %141

136:                                              ; preds = %128
  %137 = sub nuw nsw i32 256, %49
  %138 = zext i32 %137 to i64
  %139 = getelementptr inbounds [65 x i16], [65 x i16]* @_ZN7libgav13dsp12_GLOBAL__N_17kCos128E, i64 0, i64 %138
  %140 = load i16, i16* %139, align 4
  br label %141

141:                                              ; preds = %116, %122, %130, %136
  %142 = phi i16 [ %119, %116 ], [ %127, %122 ], [ %135, %130 ], [ %140, %136 ]
  %143 = sext i16 %142 to i64
  %144 = mul nsw i64 %143, %82
  %145 = add nsw i64 %79, 2048
  %146 = sub nsw i64 %145, %114
  %147 = lshr i64 %146, 12
  %148 = trunc i64 %147 to i16
  store i16 %148, i16* %46, align 2
  %149 = add nsw i64 %115, 2048
  %150 = add nsw i64 %149, %144
  %151 = lshr i64 %150, 12
  %152 = trunc i64 %151 to i16
  store i16 %152, i16* %80, align 2
  %153 = add nuw nsw i64 %37, 1
  %154 = icmp eq i64 %153, 8
  br i1 %154, label %155, label %36

155:                                              ; preds = %141, %260
  %156 = phi i64 [ %272, %260 ], [ 0, %141 ]
  %157 = add nuw nsw i64 %156, 8
  %158 = sub nuw nsw i64 15, %156
  %159 = sub nuw nsw i64 3, %156
  %160 = getelementptr inbounds [5 x [64 x i8]], [5 x [64 x i8]]* @_ZN7libgav13dsp12_GLOBAL__N_117kBitReverseLookupE, i64 0, i64 0, i64 %159
  %161 = load i8, i8* %160, align 1
  %162 = zext i8 %161 to i32
  %163 = shl nuw nsw i32 %162, 4
  %164 = or i32 %163, 12
  %165 = getelementptr inbounds i16, i16* %3, i64 %157
  %166 = load i16, i16* %165, align 2
  %167 = sext i16 %166 to i64
  %168 = and i32 %164, 252
  %169 = icmp ult i32 %168, 65
  br i1 %169, label %170, label %174

170:                                              ; preds = %155
  %171 = zext i32 %168 to i64
  %172 = getelementptr inbounds [65 x i16], [65 x i16]* @_ZN7libgav13dsp12_GLOBAL__N_17kCos128E, i64 0, i64 %171
  %173 = load i16, i16* %172, align 8
  br label %195

174:                                              ; preds = %155
  %175 = icmp ult i32 %168, 129
  br i1 %175, label %176, label %182

176:                                              ; preds = %174
  %177 = sub nuw nsw i32 128, %168
  %178 = sext i32 %177 to i64
  %179 = getelementptr inbounds [65 x i16], [65 x i16]* @_ZN7libgav13dsp12_GLOBAL__N_17kCos128E, i64 0, i64 %178
  %180 = load i16, i16* %179, align 8
  %181 = sub i16 0, %180
  br label %195

182:                                              ; preds = %174
  %183 = icmp ult i32 %168, 193
  br i1 %183, label %184, label %190

184:                                              ; preds = %182
  %185 = add nsw i32 %168, -128
  %186 = sext i32 %185 to i64
  %187 = getelementptr inbounds [65 x i16], [65 x i16]* @_ZN7libgav13dsp12_GLOBAL__N_17kCos128E, i64 0, i64 %186
  %188 = load i16, i16* %187, align 8
  %189 = sub i16 0, %188
  br label %195

190:                                              ; preds = %182
  %191 = sub nuw nsw i32 256, %168
  %192 = zext i32 %191 to i64
  %193 = getelementptr inbounds [65 x i16], [65 x i16]* @_ZN7libgav13dsp12_GLOBAL__N_17kCos128E, i64 0, i64 %192
  %194 = load i16, i16* %193, align 8
  br label %195

195:                                              ; preds = %190, %184, %176, %170
  %196 = phi i16 [ %173, %170 ], [ %181, %176 ], [ %189, %184 ], [ %194, %190 ]
  %197 = sext i16 %196 to i64
  %198 = mul nsw i64 %197, %167
  %199 = getelementptr inbounds i16, i16* %3, i64 %158
  %200 = load i16, i16* %199, align 2
  %201 = sext i16 %200 to i64
  %202 = add nuw nsw i32 %164, 192
  %203 = and i32 %202, 252
  %204 = icmp ult i32 %203, 65
  br i1 %204, label %209, label %205

205:                                              ; preds = %195
  %206 = icmp ult i32 %203, 129
  br i1 %206, label %213, label %207

207:                                              ; preds = %205
  %208 = icmp ult i32 %203, 193
  br i1 %208, label %219, label %225

209:                                              ; preds = %195
  %210 = zext i32 %203 to i64
  %211 = getelementptr inbounds [65 x i16], [65 x i16]* @_ZN7libgav13dsp12_GLOBAL__N_17kCos128E, i64 0, i64 %210
  %212 = load i16, i16* %211, align 8
  br label %230

213:                                              ; preds = %205
  %214 = sub nuw nsw i32 128, %203
  %215 = sext i32 %214 to i64
  %216 = getelementptr inbounds [65 x i16], [65 x i16]* @_ZN7libgav13dsp12_GLOBAL__N_17kCos128E, i64 0, i64 %215
  %217 = load i16, i16* %216, align 8
  %218 = sub i16 0, %217
  br label %230

219:                                              ; preds = %207
  %220 = add nsw i32 %203, -128
  %221 = sext i32 %220 to i64
  %222 = getelementptr inbounds [65 x i16], [65 x i16]* @_ZN7libgav13dsp12_GLOBAL__N_17kCos128E, i64 0, i64 %221
  %223 = load i16, i16* %222, align 8
  %224 = sub i16 0, %223
  br label %230

225:                                              ; preds = %207
  %226 = sub nuw nsw i32 256, %203
  %227 = zext i32 %226 to i64
  %228 = getelementptr inbounds [65 x i16], [65 x i16]* @_ZN7libgav13dsp12_GLOBAL__N_17kCos128E, i64 0, i64 %227
  %229 = load i16, i16* %228, align 8
  br label %230

230:                                              ; preds = %225, %219, %213, %209
  %231 = phi i16 [ %212, %209 ], [ %218, %213 ], [ %224, %219 ], [ %229, %225 ]
  %232 = sext i16 %231 to i64
  %233 = mul nsw i64 %232, %201
  %234 = mul nsw i64 %232, %167
  br i1 %169, label %235, label %239

235:                                              ; preds = %230
  %236 = zext i32 %168 to i64
  %237 = getelementptr inbounds [65 x i16], [65 x i16]* @_ZN7libgav13dsp12_GLOBAL__N_17kCos128E, i64 0, i64 %236
  %238 = load i16, i16* %237, align 8
  br label %260

239:                                              ; preds = %230
  %240 = icmp ult i32 %168, 129
  br i1 %240, label %241, label %247

241:                                              ; preds = %239
  %242 = sub nuw nsw i32 128, %168
  %243 = sext i32 %242 to i64
  %244 = getelementptr inbounds [65 x i16], [65 x i16]* @_ZN7libgav13dsp12_GLOBAL__N_17kCos128E, i64 0, i64 %243
  %245 = load i16, i16* %244, align 8
  %246 = sub i16 0, %245
  br label %260

247:                                              ; preds = %239
  %248 = icmp ult i32 %168, 193
  br i1 %248, label %249, label %255

249:                                              ; preds = %247
  %250 = add nsw i32 %168, -128
  %251 = sext i32 %250 to i64
  %252 = getelementptr inbounds [65 x i16], [65 x i16]* @_ZN7libgav13dsp12_GLOBAL__N_17kCos128E, i64 0, i64 %251
  %253 = load i16, i16* %252, align 8
  %254 = sub i16 0, %253
  br label %260

255:                                              ; preds = %247
  %256 = sub nuw nsw i32 256, %168
  %257 = zext i32 %256 to i64
  %258 = getelementptr inbounds [65 x i16], [65 x i16]* @_ZN7libgav13dsp12_GLOBAL__N_17kCos128E, i64 0, i64 %257
  %259 = load i16, i16* %258, align 8
  br label %260

260:                                              ; preds = %235, %241, %249, %255
  %261 = phi i16 [ %238, %235 ], [ %246, %241 ], [ %254, %249 ], [ %259, %255 ]
  %262 = sext i16 %261 to i64
  %263 = mul nsw i64 %262, %201
  %264 = add nsw i64 %198, 2048
  %265 = sub nsw i64 %264, %233
  %266 = lshr i64 %265, 12
  %267 = trunc i64 %266 to i16
  store i16 %267, i16* %165, align 2
  %268 = add nsw i64 %234, 2048
  %269 = add nsw i64 %268, %263
  %270 = lshr i64 %269, 12
  %271 = trunc i64 %270 to i16
  store i16 %271, i16* %199, align 2
  %272 = add nuw nsw i64 %156, 1
  %273 = icmp eq i64 %272, 4
  br i1 %273, label %298, label %155

274:                                              ; preds = %275
  call void @llvm.lifetime.end.p0i8(i64 64, i8* nonnull %4) #4
  ret void

275:                                              ; preds = %275, %298
  %276 = phi i64 [ 0, %298 ], [ %296, %275 ]
  %277 = sub nuw nsw i64 31, %276
  %278 = getelementptr inbounds i16, i16* %3, i64 %276
  %279 = load i16, i16* %278, align 2
  %280 = sext i16 %279 to i32
  %281 = getelementptr inbounds i16, i16* %3, i64 %277
  %282 = load i16, i16* %281, align 2
  %283 = sext i16 %282 to i32
  %284 = add nsw i32 %283, %280
  %285 = sub nsw i32 %280, %283
  %286 = icmp slt i32 %284, 32767
  %287 = select i1 %286, i32 %284, i32 32767
  %288 = icmp sgt i32 %287, -32768
  %289 = select i1 %288, i32 %287, i32 -32768
  %290 = trunc i32 %289 to i16
  store i16 %290, i16* %278, align 2
  %291 = icmp slt i32 %285, 32767
  %292 = select i1 %291, i32 %285, i32 32767
  %293 = icmp sgt i32 %292, -32768
  %294 = select i1 %293, i32 %292, i32 -32768
  %295 = trunc i32 %294 to i16
  store i16 %295, i16* %281, align 2
  %296 = add nuw nsw i64 %276, 1
  %297 = icmp eq i64 %296, 16
  br i1 %297, label %274, label %275

298:                                              ; preds = %260
  %299 = getelementptr inbounds i8, i8* %0, i64 32
  %300 = bitcast i8* %299 to i16*
  %301 = getelementptr inbounds i8, i8* %0, i64 34
  %302 = bitcast i8* %301 to i16*
  %303 = getelementptr inbounds i8, i8* %0, i64 38
  %304 = bitcast i8* %303 to i16*
  %305 = getelementptr inbounds i8, i8* %0, i64 36
  %306 = bitcast i8* %305 to i16*
  %307 = getelementptr inbounds i8, i8* %0, i64 40
  %308 = bitcast i8* %307 to i16*
  %309 = getelementptr inbounds i8, i8* %0, i64 42
  %310 = bitcast i8* %309 to i16*
  %311 = getelementptr inbounds i8, i8* %0, i64 46
  %312 = bitcast i8* %311 to i16*
  %313 = getelementptr inbounds i8, i8* %0, i64 44
  %314 = bitcast i8* %313 to i16*
  %315 = bitcast i8* %299 to <8 x i16>*
  %316 = load <8 x i16>, <8 x i16>* %315, align 2
  %317 = shufflevector <8 x i16> %316, <8 x i16> undef, <8 x i32> <i32 1, i32 0, i32 3, i32 2, i32 5, i32 4, i32 7, i32 6>
  %318 = sext <8 x i16> %317 to <8 x i32>
  %319 = shufflevector <8 x i32> %318, <8 x i32> undef, <8 x i32> <i32 1, i32 0, i32 3, i32 2, i32 5, i32 4, i32 7, i32 6>
  %320 = add nsw <8 x i32> %319, %318
  %321 = sub nsw <8 x i32> %318, %319
  %322 = shufflevector <8 x i32> %320, <8 x i32> %321, <8 x i32> <i32 0, i32 9, i32 10, i32 3, i32 4, i32 13, i32 14, i32 7>
  %323 = icmp slt <8 x i32> %322, <i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767>
  %324 = select <8 x i1> %323, <8 x i32> %322, <8 x i32> <i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767>
  %325 = icmp sgt <8 x i32> %324, <i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768>
  %326 = select <8 x i1> %325, <8 x i32> %324, <8 x i32> <i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768>
  %327 = trunc <8 x i32> %326 to <8 x i16>
  %328 = bitcast i8* %299 to <8 x i16>*
  store <8 x i16> %327, <8 x i16>* %328, align 2
  %329 = getelementptr inbounds i8, i8* %0, i64 48
  %330 = bitcast i8* %329 to i16*
  %331 = getelementptr inbounds i8, i8* %0, i64 50
  %332 = bitcast i8* %331 to i16*
  %333 = getelementptr inbounds i8, i8* %0, i64 54
  %334 = bitcast i8* %333 to i16*
  %335 = getelementptr inbounds i8, i8* %0, i64 52
  %336 = bitcast i8* %335 to i16*
  %337 = getelementptr inbounds i8, i8* %0, i64 56
  %338 = bitcast i8* %337 to i16*
  %339 = getelementptr inbounds i8, i8* %0, i64 58
  %340 = bitcast i8* %339 to i16*
  %341 = getelementptr inbounds i8, i8* %0, i64 62
  %342 = bitcast i8* %341 to i16*
  %343 = getelementptr inbounds i8, i8* %0, i64 60
  %344 = bitcast i8* %343 to i16*
  %345 = bitcast i8* %329 to <8 x i16>*
  %346 = load <8 x i16>, <8 x i16>* %345, align 2
  %347 = shufflevector <8 x i16> %346, <8 x i16> undef, <8 x i32> <i32 1, i32 0, i32 3, i32 2, i32 5, i32 4, i32 7, i32 6>
  %348 = sext <8 x i16> %347 to <8 x i32>
  %349 = shufflevector <8 x i32> %348, <8 x i32> undef, <8 x i32> <i32 1, i32 0, i32 3, i32 2, i32 5, i32 4, i32 7, i32 6>
  %350 = add nsw <8 x i32> %349, %348
  %351 = sub nsw <8 x i32> %348, %349
  %352 = shufflevector <8 x i32> %350, <8 x i32> %351, <8 x i32> <i32 0, i32 9, i32 10, i32 3, i32 4, i32 13, i32 14, i32 7>
  %353 = icmp slt <8 x i32> %352, <i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767>
  %354 = select <8 x i1> %353, <8 x i32> %352, <8 x i32> <i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767>
  %355 = icmp sgt <8 x i32> %354, <i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768>
  %356 = select <8 x i1> %355, <8 x i32> %354, <8 x i32> <i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768>
  %357 = trunc <8 x i32> %356 to <8 x i16>
  %358 = bitcast i8* %329 to <8 x i16>*
  store <8 x i16> %357, <8 x i16>* %358, align 2
  %359 = getelementptr inbounds i8, i8* %0, i64 8
  %360 = bitcast i8* %359 to i16*
  %361 = load i16, i16* %360, align 2
  %362 = sext i16 %361 to i64
  %363 = mul nsw i64 %362, 799
  %364 = getelementptr inbounds i8, i8* %0, i64 14
  %365 = bitcast i8* %364 to i16*
  %366 = load i16, i16* %365, align 2
  %367 = sext i16 %366 to i64
  %368 = mul nsw i64 %362, 4017
  %369 = mul nsw i64 %367, 799
  %370 = add nsw i64 %363, 2048
  %371 = mul nsw i64 %367, -4017
  %372 = add nsw i64 %370, %371
  %373 = lshr i64 %372, 12
  %374 = trunc i64 %373 to i16
  store i16 %374, i16* %360, align 2
  %375 = add nsw i64 %368, 2048
  %376 = add nsw i64 %375, %369
  %377 = lshr i64 %376, 12
  %378 = trunc i64 %377 to i16
  store i16 %378, i16* %365, align 2
  %379 = getelementptr inbounds i8, i8* %0, i64 10
  %380 = bitcast i8* %379 to i16*
  %381 = load i16, i16* %380, align 2
  %382 = sext i16 %381 to i64
  %383 = mul nsw i64 %382, 3406
  %384 = getelementptr inbounds i8, i8* %0, i64 12
  %385 = bitcast i8* %384 to i16*
  %386 = load i16, i16* %385, align 2
  %387 = sext i16 %386 to i64
  %388 = mul nsw i64 %382, 2276
  %389 = mul nsw i64 %387, 3406
  %390 = add nsw i64 %383, 2048
  %391 = mul nsw i64 %387, -2276
  %392 = add nsw i64 %390, %391
  %393 = lshr i64 %392, 12
  %394 = trunc i64 %393 to i16
  store i16 %394, i16* %380, align 2
  %395 = add nsw i64 %388, 2048
  %396 = add nsw i64 %395, %389
  %397 = lshr i64 %396, 12
  %398 = trunc i64 %397 to i16
  store i16 %398, i16* %385, align 2
  %399 = getelementptr inbounds i8, i8* %0, i64 16
  %400 = bitcast i8* %399 to i16*
  %401 = getelementptr inbounds i8, i8* %0, i64 18
  %402 = bitcast i8* %401 to i16*
  %403 = getelementptr inbounds i8, i8* %0, i64 22
  %404 = bitcast i8* %403 to i16*
  %405 = getelementptr inbounds i8, i8* %0, i64 20
  %406 = bitcast i8* %405 to i16*
  %407 = getelementptr inbounds i8, i8* %0, i64 24
  %408 = bitcast i8* %407 to i16*
  %409 = getelementptr inbounds i8, i8* %0, i64 26
  %410 = bitcast i8* %409 to i16*
  %411 = getelementptr inbounds i8, i8* %0, i64 30
  %412 = bitcast i8* %411 to i16*
  %413 = getelementptr inbounds i8, i8* %0, i64 28
  %414 = bitcast i8* %413 to i16*
  %415 = bitcast i8* %399 to <8 x i16>*
  %416 = load <8 x i16>, <8 x i16>* %415, align 2
  %417 = shufflevector <8 x i16> %416, <8 x i16> undef, <8 x i32> <i32 1, i32 0, i32 3, i32 2, i32 5, i32 4, i32 7, i32 6>
  %418 = sext <8 x i16> %417 to <8 x i32>
  %419 = shufflevector <8 x i32> %418, <8 x i32> undef, <8 x i32> <i32 1, i32 0, i32 3, i32 2, i32 5, i32 4, i32 7, i32 6>
  %420 = add nsw <8 x i32> %419, %418
  %421 = sub nsw <8 x i32> %418, %419
  %422 = shufflevector <8 x i32> %420, <8 x i32> %421, <8 x i32> <i32 0, i32 9, i32 10, i32 3, i32 4, i32 13, i32 14, i32 7>
  %423 = icmp slt <8 x i32> %422, <i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767>
  %424 = select <8 x i1> %423, <8 x i32> %422, <8 x i32> <i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767>
  %425 = icmp sgt <8 x i32> %424, <i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768>
  %426 = select <8 x i1> %425, <8 x i32> %424, <8 x i32> <i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768>
  %427 = trunc <8 x i32> %426 to <8 x i16>
  %428 = bitcast i8* %399 to <8 x i16>*
  store <8 x i16> %427, <8 x i16>* %428, align 2
  %429 = extractelement <8 x i16> %357, i32 6
  %430 = sext i16 %429 to i64
  %431 = mul nsw i64 %430, 799
  %432 = load i16, i16* %302, align 2
  %433 = sext i16 %432 to i64
  %434 = mul nsw i64 %430, 4017
  %435 = mul nsw i64 %433, 799
  %436 = add nsw i64 %434, 2048
  %437 = add nsw i64 %436, %435
  %438 = lshr i64 %437, 12
  %439 = trunc i64 %438 to i16
  store i16 %439, i16* %344, align 2
  %440 = add nsw i64 %431, 2048
  %441 = mul nsw i64 %433, -4017
  %442 = add nsw i64 %440, %441
  %443 = lshr i64 %442, 12
  %444 = trunc i64 %443 to i16
  store i16 %444, i16* %302, align 2
  %445 = extractelement <8 x i16> %357, i32 5
  %446 = sext i16 %445 to i64
  %447 = mul nsw i64 %446, -4017
  %448 = load i16, i16* %306, align 2
  %449 = sext i16 %448 to i64
  %450 = mul nsw i64 %446, 799
  %451 = mul nsw i64 %449, -4017
  %452 = add nsw i64 %450, 2048
  %453 = add nsw i64 %452, %451
  %454 = lshr i64 %453, 12
  %455 = trunc i64 %454 to i16
  store i16 %455, i16* %340, align 2
  %456 = add nsw i64 %447, 2048
  %457 = mul nsw i64 %449, -799
  %458 = add nsw i64 %456, %457
  %459 = lshr i64 %458, 12
  %460 = trunc i64 %459 to i16
  store i16 %460, i16* %306, align 2
  %461 = extractelement <8 x i16> %357, i32 2
  %462 = sext i16 %461 to i64
  %463 = mul nsw i64 %462, 3406
  %464 = load i16, i16* %310, align 2
  %465 = sext i16 %464 to i64
  %466 = mul nsw i64 %462, 2276
  %467 = mul nsw i64 %465, 3406
  %468 = add nsw i64 %466, 2048
  %469 = add nsw i64 %468, %467
  %470 = lshr i64 %469, 12
  %471 = trunc i64 %470 to i16
  store i16 %471, i16* %336, align 2
  %472 = add nsw i64 %463, 2048
  %473 = mul nsw i64 %465, -2276
  %474 = add nsw i64 %472, %473
  %475 = lshr i64 %474, 12
  %476 = trunc i64 %475 to i16
  store i16 %476, i16* %310, align 2
  %477 = extractelement <8 x i16> %357, i32 1
  %478 = sext i16 %477 to i64
  %479 = mul nsw i64 %478, -2276
  %480 = extractelement <8 x i16> %327, i32 6
  %481 = sext i16 %480 to i64
  %482 = mul nsw i64 %478, 3406
  %483 = mul nsw i64 %481, -2276
  %484 = add nsw i64 %482, 2048
  %485 = add nsw i64 %484, %483
  %486 = lshr i64 %485, 12
  %487 = trunc i64 %486 to i16
  store i16 %487, i16* %332, align 2
  %488 = add nsw i64 %479, 2048
  %489 = mul nsw i64 %481, -3406
  %490 = add nsw i64 %488, %489
  %491 = lshr i64 %490, 12
  %492 = trunc i64 %491 to i16
  store i16 %492, i16* %314, align 2
  %493 = load i16, i16* %3, align 2
  %494 = sext i16 %493 to i64
  %495 = mul nsw i64 %494, 2896
  %496 = getelementptr inbounds i8, i8* %0, i64 2
  %497 = bitcast i8* %496 to i16*
  %498 = load i16, i16* %497, align 2
  %499 = sext i16 %498 to i64
  %500 = mul nsw i64 %499, 2896
  %501 = sub nsw i64 %495, %500
  %502 = add nsw i64 %500, %495
  %503 = add nsw i64 %502, 2048
  %504 = lshr i64 %503, 12
  %505 = trunc i64 %504 to i16
  store i16 %505, i16* %3, align 2
  %506 = add nsw i64 %501, 2048
  %507 = lshr i64 %506, 12
  %508 = trunc i64 %507 to i16
  store i16 %508, i16* %497, align 2
  %509 = getelementptr inbounds i8, i8* %0, i64 4
  %510 = bitcast i8* %509 to i16*
  %511 = load i16, i16* %510, align 2
  %512 = sext i16 %511 to i64
  %513 = mul nsw i64 %512, 1567
  %514 = getelementptr inbounds i8, i8* %0, i64 6
  %515 = bitcast i8* %514 to i16*
  %516 = load i16, i16* %515, align 2
  %517 = sext i16 %516 to i64
  %518 = mul nsw i64 %517, -3784
  %519 = add nsw i64 %513, %518
  %520 = mul nsw i64 %512, 3784
  %521 = mul nsw i64 %517, 1567
  %522 = add nsw i64 %521, %520
  %523 = add nsw i64 %519, 2048
  %524 = lshr i64 %523, 12
  %525 = trunc i64 %524 to i16
  store i16 %525, i16* %510, align 2
  %526 = add nsw i64 %522, 2048
  %527 = lshr i64 %526, 12
  %528 = trunc i64 %527 to i16
  store i16 %528, i16* %515, align 2
  %529 = sext i16 %374 to i32
  %530 = sext i16 %394 to i32
  %531 = add nsw i32 %530, %529
  %532 = sub nsw i32 %529, %530
  %533 = icmp slt i32 %531, 32767
  %534 = select i1 %533, i32 %531, i32 32767
  %535 = icmp sgt i32 %534, -32768
  %536 = select i1 %535, i32 %534, i32 -32768
  %537 = trunc i32 %536 to i16
  store i16 %537, i16* %360, align 2
  %538 = icmp slt i32 %532, 32767
  %539 = select i1 %538, i32 %532, i32 32767
  %540 = icmp sgt i32 %539, -32768
  %541 = select i1 %540, i32 %539, i32 -32768
  %542 = trunc i32 %541 to i16
  store i16 %542, i16* %380, align 2
  %543 = sext i16 %378 to i32
  %544 = sext i16 %398 to i32
  %545 = add nsw i32 %544, %543
  %546 = sub nsw i32 %543, %544
  %547 = icmp slt i32 %545, 32767
  %548 = select i1 %547, i32 %545, i32 32767
  %549 = icmp sgt i32 %548, -32768
  %550 = select i1 %549, i32 %548, i32 -32768
  %551 = trunc i32 %550 to i16
  store i16 %551, i16* %365, align 2
  %552 = icmp slt i32 %546, 32767
  %553 = select i1 %552, i32 %546, i32 32767
  %554 = icmp sgt i32 %553, -32768
  %555 = select i1 %554, i32 %553, i32 -32768
  %556 = trunc i32 %555 to i16
  store i16 %556, i16* %385, align 2
  %557 = extractelement <8 x i16> %427, i32 6
  %558 = sext i16 %557 to i64
  %559 = mul nsw i64 %558, 1567
  %560 = extractelement <8 x i16> %427, i32 1
  %561 = sext i16 %560 to i64
  %562 = mul nsw i64 %558, 3784
  %563 = mul nsw i64 %561, 1567
  %564 = add nsw i64 %562, 2048
  %565 = add nsw i64 %564, %563
  %566 = lshr i64 %565, 12
  %567 = trunc i64 %566 to i16
  store i16 %567, i16* %414, align 2
  %568 = add nsw i64 %559, 2048
  %569 = mul nsw i64 %561, -3784
  %570 = add nsw i64 %568, %569
  %571 = lshr i64 %570, 12
  %572 = trunc i64 %571 to i16
  store i16 %572, i16* %402, align 2
  %573 = extractelement <8 x i16> %427, i32 5
  %574 = sext i16 %573 to i64
  %575 = mul nsw i64 %574, -3784
  %576 = extractelement <8 x i16> %427, i32 2
  %577 = sext i16 %576 to i64
  %578 = mul nsw i64 %574, 1567
  %579 = mul nsw i64 %577, -3784
  %580 = add nsw i64 %578, 2048
  %581 = add nsw i64 %580, %579
  %582 = lshr i64 %581, 12
  %583 = trunc i64 %582 to i16
  store i16 %583, i16* %410, align 2
  %584 = add nsw i64 %575, 2048
  %585 = mul nsw i64 %577, -1567
  %586 = add nsw i64 %584, %585
  %587 = lshr i64 %586, 12
  %588 = trunc i64 %587 to i16
  store i16 %588, i16* %406, align 2
  %589 = load i16, i16* %300, align 2
  %590 = sext i16 %589 to i32
  %591 = load i16, i16* %304, align 2
  %592 = sext i16 %591 to i32
  %593 = add nsw i32 %592, %590
  %594 = sub nsw i32 %590, %592
  %595 = icmp slt i32 %593, 32767
  %596 = select i1 %595, i32 %593, i32 32767
  %597 = icmp sgt i32 %596, -32768
  %598 = select i1 %597, i32 %596, i32 -32768
  %599 = trunc i32 %598 to i16
  store i16 %599, i16* %300, align 2
  %600 = icmp slt i32 %594, 32767
  %601 = select i1 %600, i32 %594, i32 32767
  %602 = icmp sgt i32 %601, -32768
  %603 = select i1 %602, i32 %601, i32 -32768
  %604 = trunc i32 %603 to i16
  store i16 %604, i16* %304, align 2
  %605 = sext i16 %444 to i32
  %606 = sext i16 %460 to i32
  %607 = add nsw i32 %606, %605
  %608 = sub nsw i32 %605, %606
  %609 = icmp slt i32 %607, 32767
  %610 = select i1 %609, i32 %607, i32 32767
  %611 = icmp sgt i32 %610, -32768
  %612 = select i1 %611, i32 %610, i32 -32768
  %613 = trunc i32 %612 to i16
  store i16 %613, i16* %302, align 2
  %614 = icmp slt i32 %608, 32767
  %615 = select i1 %614, i32 %608, i32 32767
  %616 = icmp sgt i32 %615, -32768
  %617 = select i1 %616, i32 %615, i32 -32768
  %618 = trunc i32 %617 to i16
  store i16 %618, i16* %306, align 2
  %619 = load i16, i16* %308, align 2
  %620 = sext i16 %619 to i32
  %621 = extractelement <8 x i32> %326, i32 7
  %622 = sub nsw i32 %621, %620
  %623 = icmp slt i32 %622, 32767
  %624 = select i1 %623, i32 %622, i32 32767
  %625 = icmp sgt i32 %624, -32768
  %626 = select i1 %625, i32 %624, i32 -32768
  %627 = trunc i32 %626 to i16
  store i16 %627, i16* %308, align 2
  %628 = sext i16 %492 to i32
  %629 = sext i16 %476 to i32
  %630 = extractelement <8 x i32> %356, i32 0
  %631 = extractelement <8 x i32> %356, i32 3
  %632 = sext i16 %487 to i32
  %633 = sext i16 %471 to i32
  %634 = load i16, i16* %342, align 2
  %635 = sext i16 %634 to i32
  %636 = load i16, i16* %338, align 2
  %637 = sext i16 %636 to i32
  %638 = add nsw i32 %637, %635
  %639 = insertelement <8 x i32> undef, i32 %628, i32 0
  %640 = insertelement <8 x i32> %639, i32 %629, i32 1
  %641 = insertelement <8 x i32> %640, i32 %620, i32 2
  %642 = insertelement <8 x i32> %641, i32 %631, i32 3
  %643 = insertelement <8 x i32> %642, i32 %633, i32 4
  %644 = insertelement <8 x i32> %643, i32 %632, i32 5
  %645 = insertelement <8 x i32> %644, i32 %630, i32 6
  %646 = insertelement <8 x i32> %645, i32 %635, i32 7
  %647 = insertelement <8 x i32> undef, i32 %629, i32 0
  %648 = insertelement <8 x i32> %647, i32 %628, i32 1
  %649 = insertelement <8 x i32> %648, i32 %621, i32 2
  %650 = insertelement <8 x i32> %649, i32 %630, i32 3
  %651 = insertelement <8 x i32> %650, i32 %632, i32 4
  %652 = insertelement <8 x i32> %651, i32 %633, i32 5
  %653 = insertelement <8 x i32> %652, i32 %631, i32 6
  %654 = insertelement <8 x i32> %653, i32 %637, i32 7
  %655 = sub nsw <8 x i32> %646, %654
  %656 = add nsw <8 x i32> %646, %654
  %657 = shufflevector <8 x i32> %655, <8 x i32> %656, <8 x i32> <i32 0, i32 9, i32 10, i32 11, i32 12, i32 5, i32 6, i32 7>
  %658 = icmp slt i32 %638, 32767
  %659 = select i1 %658, i32 %638, i32 32767
  %660 = icmp sgt i32 %659, -32768
  %661 = select i1 %660, i32 %659, i32 -32768
  %662 = trunc i32 %661 to i16
  store i16 %662, i16* %342, align 2
  %663 = icmp slt <8 x i32> %657, <i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767>
  %664 = select <8 x i1> %663, <8 x i32> %657, <8 x i32> <i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767>
  %665 = icmp sgt <8 x i32> %664, <i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768>
  %666 = select <8 x i1> %665, <8 x i32> %664, <8 x i32> <i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768>
  %667 = trunc <8 x i32> %666 to <8 x i16>
  %668 = bitcast i8* %309 to <8 x i16>*
  store <8 x i16> %667, <8 x i16>* %668, align 2
  %669 = load i16, i16* %344, align 2
  %670 = sext i16 %669 to i32
  %671 = load i16, i16* %340, align 2
  %672 = sext i16 %671 to i32
  %673 = add nsw i32 %672, %670
  %674 = sub nsw i32 %670, %672
  %675 = icmp slt i32 %673, 32767
  %676 = select i1 %675, i32 %673, i32 32767
  %677 = icmp sgt i32 %676, -32768
  %678 = select i1 %677, i32 %676, i32 -32768
  %679 = trunc i32 %678 to i16
  store i16 %679, i16* %344, align 2
  %680 = icmp slt i32 %674, 32767
  %681 = select i1 %680, i32 %674, i32 32767
  %682 = icmp sgt i32 %681, -32768
  %683 = select i1 %682, i32 %681, i32 -32768
  %684 = trunc i32 %683 to i16
  store i16 %684, i16* %340, align 2
  %685 = load i16, i16* %3, align 2
  %686 = sext i16 %685 to i32
  %687 = load i16, i16* %515, align 2
  %688 = sext i16 %687 to i32
  %689 = add nsw i32 %688, %686
  %690 = sub nsw i32 %686, %688
  %691 = icmp slt i32 %689, 32767
  %692 = select i1 %691, i32 %689, i32 32767
  %693 = icmp sgt i32 %692, -32768
  %694 = select i1 %693, i32 %692, i32 -32768
  %695 = trunc i32 %694 to i16
  store i16 %695, i16* %3, align 2
  %696 = icmp slt i32 %690, 32767
  %697 = select i1 %696, i32 %690, i32 32767
  %698 = icmp sgt i32 %697, -32768
  %699 = select i1 %698, i32 %697, i32 -32768
  %700 = trunc i32 %699 to i16
  store i16 %700, i16* %515, align 2
  %701 = load i16, i16* %497, align 2
  %702 = sext i16 %701 to i32
  %703 = load i16, i16* %510, align 2
  %704 = sext i16 %703 to i32
  %705 = add nsw i32 %704, %702
  %706 = sub nsw i32 %702, %704
  %707 = icmp slt i32 %705, 32767
  %708 = select i1 %707, i32 %705, i32 32767
  %709 = icmp sgt i32 %708, -32768
  %710 = select i1 %709, i32 %708, i32 -32768
  %711 = trunc i32 %710 to i16
  store i16 %711, i16* %497, align 2
  %712 = icmp slt i32 %706, 32767
  %713 = select i1 %712, i32 %706, i32 32767
  %714 = icmp sgt i32 %713, -32768
  %715 = select i1 %714, i32 %713, i32 -32768
  %716 = trunc i32 %715 to i16
  store i16 %716, i16* %510, align 2
  %717 = getelementptr inbounds i8, i8* %0, i64 12
  %718 = bitcast i8* %717 to i16*
  %719 = load i16, i16* %718, align 2
  %720 = sext i16 %719 to i64
  %721 = mul nsw i64 %720, 2896
  %722 = getelementptr inbounds i8, i8* %0, i64 10
  %723 = bitcast i8* %722 to i16*
  %724 = load i16, i16* %723, align 2
  %725 = sext i16 %724 to i64
  %726 = mul nsw i64 %725, 2896
  %727 = add nsw i64 %721, 2048
  %728 = add nsw i64 %727, %726
  %729 = lshr i64 %728, 12
  %730 = trunc i64 %729 to i16
  store i16 %730, i16* %718, align 2
  %731 = sub nsw i64 %727, %726
  %732 = lshr i64 %731, 12
  %733 = trunc i64 %732 to i16
  store i16 %733, i16* %723, align 2
  %734 = bitcast i8* %399 to <8 x i16>*
  %735 = load <8 x i16>, <8 x i16>* %734, align 2
  %736 = shufflevector <8 x i16> %735, <8 x i16> undef, <8 x i32> <i32 3, i32 2, i32 1, i32 0, i32 7, i32 6, i32 5, i32 4>
  %737 = sext <8 x i16> %736 to <8 x i32>
  %738 = shufflevector <8 x i32> %737, <8 x i32> undef, <8 x i32> <i32 3, i32 2, i32 1, i32 0, i32 7, i32 6, i32 5, i32 4>
  %739 = add nsw <8 x i32> %738, %737
  %740 = sub nsw <8 x i32> %737, %738
  %741 = shufflevector <8 x i32> %739, <8 x i32> %740, <8 x i32> <i32 0, i32 1, i32 10, i32 11, i32 12, i32 13, i32 6, i32 7>
  %742 = icmp slt <8 x i32> %741, <i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767>
  %743 = select <8 x i1> %742, <8 x i32> %741, <8 x i32> <i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767>
  %744 = icmp sgt <8 x i32> %743, <i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768>
  %745 = select <8 x i1> %744, <8 x i32> %743, <8 x i32> <i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768>
  %746 = trunc <8 x i32> %745 to <8 x i16>
  %747 = bitcast i8* %399 to <8 x i16>*
  store <8 x i16> %746, <8 x i16>* %747, align 2
  %748 = load i16, i16* %340, align 2
  %749 = sext i16 %748 to i64
  %750 = mul nsw i64 %749, 1567
  %751 = load i16, i16* %306, align 2
  %752 = sext i16 %751 to i64
  %753 = mul nsw i64 %749, 3784
  %754 = mul nsw i64 %752, 1567
  %755 = add nsw i64 %753, 2048
  %756 = add nsw i64 %755, %754
  %757 = lshr i64 %756, 12
  %758 = trunc i64 %757 to i16
  store i16 %758, i16* %340, align 2
  %759 = add nsw i64 %750, 2048
  %760 = mul nsw i64 %752, -3784
  %761 = add nsw i64 %759, %760
  %762 = lshr i64 %761, 12
  %763 = trunc i64 %762 to i16
  store i16 %763, i16* %306, align 2
  %764 = load i16, i16* %338, align 2
  %765 = sext i16 %764 to i64
  %766 = mul nsw i64 %765, 1567
  %767 = load i16, i16* %304, align 2
  %768 = sext i16 %767 to i64
  %769 = mul nsw i64 %765, 3784
  %770 = mul nsw i64 %768, 1567
  %771 = add nsw i64 %769, 2048
  %772 = add nsw i64 %771, %770
  %773 = lshr i64 %772, 12
  %774 = trunc i64 %773 to i16
  store i16 %774, i16* %338, align 2
  %775 = add nsw i64 %766, 2048
  %776 = mul nsw i64 %768, -3784
  %777 = add nsw i64 %775, %776
  %778 = lshr i64 %777, 12
  %779 = trunc i64 %778 to i16
  store i16 %779, i16* %304, align 2
  %780 = load i16, i16* %334, align 2
  %781 = sext i16 %780 to i64
  %782 = mul nsw i64 %781, -3784
  %783 = load i16, i16* %308, align 2
  %784 = sext i16 %783 to i64
  %785 = mul nsw i64 %781, 1567
  %786 = mul nsw i64 %784, -3784
  %787 = add nsw i64 %785, 2048
  %788 = add nsw i64 %787, %786
  %789 = lshr i64 %788, 12
  %790 = trunc i64 %789 to i16
  store i16 %790, i16* %334, align 2
  %791 = add nsw i64 %782, 2048
  %792 = mul nsw i64 %784, -1567
  %793 = add nsw i64 %791, %792
  %794 = lshr i64 %793, 12
  %795 = trunc i64 %794 to i16
  store i16 %795, i16* %308, align 2
  %796 = load i16, i16* %336, align 2
  %797 = sext i16 %796 to i64
  %798 = mul nsw i64 %797, -3784
  %799 = load i16, i16* %310, align 2
  %800 = sext i16 %799 to i64
  %801 = mul nsw i64 %797, 1567
  %802 = mul nsw i64 %800, -3784
  %803 = add nsw i64 %801, 2048
  %804 = add nsw i64 %803, %802
  %805 = lshr i64 %804, 12
  %806 = trunc i64 %805 to i16
  store i16 %806, i16* %336, align 2
  %807 = add nsw i64 %798, 2048
  %808 = mul nsw i64 %800, -1567
  %809 = add nsw i64 %807, %808
  %810 = lshr i64 %809, 12
  %811 = trunc i64 %810 to i16
  store i16 %811, i16* %310, align 2
  %812 = load i16, i16* %3, align 2
  %813 = sext i16 %812 to i32
  %814 = load i16, i16* %365, align 2
  %815 = sext i16 %814 to i32
  %816 = add nsw i32 %815, %813
  %817 = sub nsw i32 %813, %815
  %818 = icmp slt i32 %816, 32767
  %819 = select i1 %818, i32 %816, i32 32767
  %820 = icmp sgt i32 %819, -32768
  %821 = select i1 %820, i32 %819, i32 -32768
  %822 = trunc i32 %821 to i16
  store i16 %822, i16* %3, align 2
  %823 = icmp slt i32 %817, 32767
  %824 = select i1 %823, i32 %817, i32 32767
  %825 = icmp sgt i32 %824, -32768
  %826 = select i1 %825, i32 %824, i32 -32768
  %827 = trunc i32 %826 to i16
  store i16 %827, i16* %365, align 2
  %828 = load i16, i16* %497, align 2
  %829 = sext i16 %828 to i32
  %830 = sext i16 %730 to i32
  %831 = add nsw i32 %830, %829
  %832 = sub nsw i32 %829, %830
  %833 = icmp slt i32 %831, 32767
  %834 = select i1 %833, i32 %831, i32 32767
  %835 = icmp sgt i32 %834, -32768
  %836 = select i1 %835, i32 %834, i32 -32768
  %837 = trunc i32 %836 to i16
  store i16 %837, i16* %497, align 2
  %838 = icmp slt i32 %832, 32767
  %839 = select i1 %838, i32 %832, i32 32767
  %840 = icmp sgt i32 %839, -32768
  %841 = select i1 %840, i32 %839, i32 -32768
  %842 = trunc i32 %841 to i16
  store i16 %842, i16* %385, align 2
  %843 = sext i16 %733 to i32
  %844 = add nsw i32 %715, %843
  %845 = sub nsw i32 %715, %843
  %846 = icmp slt i32 %844, 32767
  %847 = select i1 %846, i32 %844, i32 32767
  %848 = icmp sgt i32 %847, -32768
  %849 = select i1 %848, i32 %847, i32 -32768
  %850 = trunc i32 %849 to i16
  store i16 %850, i16* %510, align 2
  %851 = icmp slt i32 %845, 32767
  %852 = select i1 %851, i32 %845, i32 32767
  %853 = icmp sgt i32 %852, -32768
  %854 = select i1 %853, i32 %852, i32 -32768
  %855 = trunc i32 %854 to i16
  store i16 %855, i16* %380, align 2
  %856 = load i16, i16* %515, align 2
  %857 = sext i16 %856 to i32
  %858 = load i16, i16* %360, align 2
  %859 = sext i16 %858 to i32
  %860 = add nsw i32 %859, %857
  %861 = sub nsw i32 %857, %859
  %862 = icmp slt i32 %860, 32767
  %863 = select i1 %862, i32 %860, i32 32767
  %864 = icmp sgt i32 %863, -32768
  %865 = select i1 %864, i32 %863, i32 -32768
  %866 = trunc i32 %865 to i16
  store i16 %866, i16* %515, align 2
  %867 = icmp slt i32 %861, 32767
  %868 = select i1 %867, i32 %861, i32 32767
  %869 = icmp sgt i32 %868, -32768
  %870 = select i1 %869, i32 %868, i32 -32768
  %871 = trunc i32 %870 to i16
  store i16 %871, i16* %360, align 2
  %872 = extractelement <8 x i16> %746, i32 5
  %873 = sext i16 %872 to i64
  %874 = mul nsw i64 %873, 2896
  %875 = extractelement <8 x i16> %746, i32 2
  %876 = sext i16 %875 to i64
  %877 = mul nsw i64 %876, 2896
  %878 = add nsw i64 %874, 2048
  %879 = add nsw i64 %878, %877
  %880 = lshr i64 %879, 12
  %881 = trunc i64 %880 to i16
  store i16 %881, i16* %410, align 2
  %882 = sub nsw i64 %878, %877
  %883 = lshr i64 %882, 12
  %884 = trunc i64 %883 to i16
  store i16 %884, i16* %406, align 2
  %885 = extractelement <8 x i16> %746, i32 4
  %886 = sext i16 %885 to i64
  %887 = mul nsw i64 %886, 2896
  %888 = extractelement <8 x i16> %746, i32 3
  %889 = sext i16 %888 to i64
  %890 = mul nsw i64 %889, 2896
  %891 = add nsw i64 %887, 2048
  %892 = add nsw i64 %891, %890
  %893 = lshr i64 %892, 12
  %894 = trunc i64 %893 to i16
  store i16 %894, i16* %408, align 2
  %895 = sub nsw i64 %891, %890
  %896 = lshr i64 %895, 12
  %897 = trunc i64 %896 to i16
  store i16 %897, i16* %404, align 2
  %898 = bitcast i8* %299 to <8 x i16>*
  %899 = load <8 x i16>, <8 x i16>* %898, align 2
  %900 = shufflevector <8 x i16> %899, <8 x i16> undef, <8 x i32> <i32 7, i32 6, i32 5, i32 4, i32 3, i32 2, i32 1, i32 0>
  %901 = sext <8 x i16> %900 to <8 x i32>
  %902 = shufflevector <8 x i32> %901, <8 x i32> undef, <8 x i32> <i32 7, i32 6, i32 5, i32 4, i32 3, i32 2, i32 1, i32 0>
  %903 = add nsw <8 x i32> %902, %901
  %904 = sub nsw <8 x i32> %901, %902
  %905 = shufflevector <8 x i32> %903, <8 x i32> %904, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 12, i32 13, i32 14, i32 15>
  %906 = icmp slt <8 x i32> %905, <i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767>
  %907 = select <8 x i1> %906, <8 x i32> %905, <8 x i32> <i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767>
  %908 = icmp sgt <8 x i32> %907, <i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768>
  %909 = select <8 x i1> %908, <8 x i32> %907, <8 x i32> <i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768>
  %910 = trunc <8 x i32> %909 to <8 x i16>
  %911 = bitcast i8* %299 to <8 x i16>*
  store <8 x i16> %910, <8 x i16>* %911, align 2
  %912 = load i16, i16* %342, align 2
  %913 = sext i16 %912 to i32
  %914 = load i16, i16* %330, align 2
  %915 = sext i16 %914 to i32
  %916 = add nsw i32 %915, %913
  %917 = sub nsw i32 %913, %915
  %918 = icmp slt i32 %916, 32767
  %919 = select i1 %918, i32 %916, i32 32767
  %920 = icmp sgt i32 %919, -32768
  %921 = select i1 %920, i32 %919, i32 -32768
  %922 = trunc i32 %921 to i16
  store i16 %922, i16* %342, align 2
  %923 = icmp slt i32 %917, 32767
  %924 = select i1 %923, i32 %917, i32 32767
  %925 = icmp sgt i32 %924, -32768
  %926 = select i1 %925, i32 %924, i32 -32768
  %927 = trunc i32 %926 to i16
  store i16 %927, i16* %330, align 2
  %928 = load i16, i16* %344, align 2
  %929 = sext i16 %928 to i32
  %930 = load i16, i16* %332, align 2
  %931 = sext i16 %930 to i32
  %932 = add nsw i32 %931, %929
  %933 = sub nsw i32 %929, %931
  %934 = icmp slt i32 %932, 32767
  %935 = select i1 %934, i32 %932, i32 32767
  %936 = icmp sgt i32 %935, -32768
  %937 = select i1 %936, i32 %935, i32 -32768
  %938 = trunc i32 %937 to i16
  store i16 %938, i16* %344, align 2
  %939 = icmp slt i32 %933, 32767
  %940 = select i1 %939, i32 %933, i32 32767
  %941 = icmp sgt i32 %940, -32768
  %942 = select i1 %941, i32 %940, i32 -32768
  %943 = trunc i32 %942 to i16
  store i16 %943, i16* %332, align 2
  %944 = load i16, i16* %340, align 2
  %945 = sext i16 %944 to i32
  %946 = load i16, i16* %336, align 2
  %947 = sext i16 %946 to i32
  %948 = add nsw i32 %947, %945
  %949 = sub nsw i32 %945, %947
  %950 = icmp slt i32 %948, 32767
  %951 = select i1 %950, i32 %948, i32 32767
  %952 = icmp sgt i32 %951, -32768
  %953 = select i1 %952, i32 %951, i32 -32768
  %954 = trunc i32 %953 to i16
  store i16 %954, i16* %340, align 2
  %955 = icmp slt i32 %949, 32767
  %956 = select i1 %955, i32 %949, i32 32767
  %957 = icmp sgt i32 %956, -32768
  %958 = select i1 %957, i32 %956, i32 -32768
  %959 = trunc i32 %958 to i16
  store i16 %959, i16* %336, align 2
  %960 = load i16, i16* %338, align 2
  %961 = sext i16 %960 to i32
  %962 = load i16, i16* %334, align 2
  %963 = sext i16 %962 to i32
  %964 = add nsw i32 %963, %961
  %965 = sub nsw i32 %961, %963
  %966 = icmp slt i32 %964, 32767
  %967 = select i1 %966, i32 %964, i32 32767
  %968 = icmp sgt i32 %967, -32768
  %969 = select i1 %968, i32 %967, i32 -32768
  %970 = trunc i32 %969 to i16
  store i16 %970, i16* %338, align 2
  %971 = icmp slt i32 %965, 32767
  %972 = select i1 %971, i32 %965, i32 32767
  %973 = icmp sgt i32 %972, -32768
  %974 = select i1 %973, i32 %972, i32 -32768
  %975 = trunc i32 %974 to i16
  store i16 %975, i16* %334, align 2
  %976 = load i16, i16* %3, align 2
  %977 = sext i16 %976 to i32
  %978 = load i16, i16* %412, align 2
  %979 = sext i16 %978 to i32
  %980 = add nsw i32 %979, %977
  %981 = sub nsw i32 %977, %979
  %982 = icmp slt i32 %980, 32767
  %983 = select i1 %982, i32 %980, i32 32767
  %984 = icmp sgt i32 %983, -32768
  %985 = select i1 %984, i32 %983, i32 -32768
  %986 = trunc i32 %985 to i16
  store i16 %986, i16* %3, align 2
  %987 = icmp slt i32 %981, 32767
  %988 = select i1 %987, i32 %981, i32 32767
  %989 = icmp sgt i32 %988, -32768
  %990 = select i1 %989, i32 %988, i32 -32768
  %991 = trunc i32 %990 to i16
  store i16 %991, i16* %412, align 2
  %992 = load i16, i16* %497, align 2
  %993 = sext i16 %992 to i32
  %994 = load i16, i16* %414, align 2
  %995 = sext i16 %994 to i32
  %996 = add nsw i32 %995, %993
  %997 = sub nsw i32 %993, %995
  %998 = icmp slt i32 %996, 32767
  %999 = select i1 %998, i32 %996, i32 32767
  %1000 = icmp sgt i32 %999, -32768
  %1001 = select i1 %1000, i32 %999, i32 -32768
  %1002 = trunc i32 %1001 to i16
  store i16 %1002, i16* %497, align 2
  %1003 = icmp slt i32 %997, 32767
  %1004 = select i1 %1003, i32 %997, i32 32767
  %1005 = icmp sgt i32 %1004, -32768
  %1006 = select i1 %1005, i32 %1004, i32 -32768
  %1007 = trunc i32 %1006 to i16
  store i16 %1007, i16* %414, align 2
  %1008 = load i16, i16* %510, align 2
  %1009 = sext i16 %1008 to i32
  %1010 = load i16, i16* %410, align 2
  %1011 = sext i16 %1010 to i32
  %1012 = add nsw i32 %1011, %1009
  %1013 = sub nsw i32 %1009, %1011
  %1014 = icmp slt i32 %1012, 32767
  %1015 = select i1 %1014, i32 %1012, i32 32767
  %1016 = icmp sgt i32 %1015, -32768
  %1017 = select i1 %1016, i32 %1015, i32 -32768
  %1018 = trunc i32 %1017 to i16
  store i16 %1018, i16* %510, align 2
  %1019 = icmp slt i32 %1013, 32767
  %1020 = select i1 %1019, i32 %1013, i32 32767
  %1021 = icmp sgt i32 %1020, -32768
  %1022 = select i1 %1021, i32 %1020, i32 -32768
  %1023 = trunc i32 %1022 to i16
  store i16 %1023, i16* %410, align 2
  %1024 = load i16, i16* %515, align 2
  %1025 = sext i16 %1024 to i32
  %1026 = load i16, i16* %408, align 2
  %1027 = sext i16 %1026 to i32
  %1028 = add nsw i32 %1027, %1025
  %1029 = sub nsw i32 %1025, %1027
  %1030 = icmp slt i32 %1028, 32767
  %1031 = select i1 %1030, i32 %1028, i32 32767
  %1032 = icmp sgt i32 %1031, -32768
  %1033 = select i1 %1032, i32 %1031, i32 -32768
  %1034 = trunc i32 %1033 to i16
  store i16 %1034, i16* %515, align 2
  %1035 = icmp slt i32 %1029, 32767
  %1036 = select i1 %1035, i32 %1029, i32 32767
  %1037 = icmp sgt i32 %1036, -32768
  %1038 = select i1 %1037, i32 %1036, i32 -32768
  %1039 = trunc i32 %1038 to i16
  store i16 %1039, i16* %408, align 2
  %1040 = load i16, i16* %360, align 2
  %1041 = sext i16 %1040 to i32
  %1042 = load i16, i16* %404, align 2
  %1043 = sext i16 %1042 to i32
  %1044 = add nsw i32 %1043, %1041
  %1045 = sub nsw i32 %1041, %1043
  %1046 = icmp slt i32 %1044, 32767
  %1047 = select i1 %1046, i32 %1044, i32 32767
  %1048 = icmp sgt i32 %1047, -32768
  %1049 = select i1 %1048, i32 %1047, i32 -32768
  %1050 = trunc i32 %1049 to i16
  store i16 %1050, i16* %360, align 2
  %1051 = icmp slt i32 %1045, 32767
  %1052 = select i1 %1051, i32 %1045, i32 32767
  %1053 = icmp sgt i32 %1052, -32768
  %1054 = select i1 %1053, i32 %1052, i32 -32768
  %1055 = trunc i32 %1054 to i16
  store i16 %1055, i16* %404, align 2
  %1056 = load i16, i16* %380, align 2
  %1057 = sext i16 %1056 to i32
  %1058 = load i16, i16* %406, align 2
  %1059 = sext i16 %1058 to i32
  %1060 = add nsw i32 %1059, %1057
  %1061 = sub nsw i32 %1057, %1059
  %1062 = icmp slt i32 %1060, 32767
  %1063 = select i1 %1062, i32 %1060, i32 32767
  %1064 = icmp sgt i32 %1063, -32768
  %1065 = select i1 %1064, i32 %1063, i32 -32768
  %1066 = trunc i32 %1065 to i16
  store i16 %1066, i16* %380, align 2
  %1067 = icmp slt i32 %1061, 32767
  %1068 = select i1 %1067, i32 %1061, i32 32767
  %1069 = icmp sgt i32 %1068, -32768
  %1070 = select i1 %1069, i32 %1068, i32 -32768
  %1071 = trunc i32 %1070 to i16
  store i16 %1071, i16* %406, align 2
  %1072 = load i16, i16* %385, align 2
  %1073 = sext i16 %1072 to i32
  %1074 = load i16, i16* %402, align 2
  %1075 = sext i16 %1074 to i32
  %1076 = add nsw i32 %1075, %1073
  %1077 = sub nsw i32 %1073, %1075
  %1078 = icmp slt i32 %1076, 32767
  %1079 = select i1 %1078, i32 %1076, i32 32767
  %1080 = icmp sgt i32 %1079, -32768
  %1081 = select i1 %1080, i32 %1079, i32 -32768
  %1082 = trunc i32 %1081 to i16
  store i16 %1082, i16* %385, align 2
  %1083 = icmp slt i32 %1077, 32767
  %1084 = select i1 %1083, i32 %1077, i32 32767
  %1085 = icmp sgt i32 %1084, -32768
  %1086 = select i1 %1085, i32 %1084, i32 -32768
  %1087 = trunc i32 %1086 to i16
  store i16 %1087, i16* %402, align 2
  %1088 = load i16, i16* %365, align 2
  %1089 = sext i16 %1088 to i32
  %1090 = load i16, i16* %400, align 2
  %1091 = sext i16 %1090 to i32
  %1092 = add nsw i32 %1091, %1089
  %1093 = sub nsw i32 %1089, %1091
  %1094 = icmp slt i32 %1092, 32767
  %1095 = select i1 %1094, i32 %1092, i32 32767
  %1096 = icmp sgt i32 %1095, -32768
  %1097 = select i1 %1096, i32 %1095, i32 -32768
  %1098 = trunc i32 %1097 to i16
  store i16 %1098, i16* %365, align 2
  %1099 = icmp slt i32 %1093, 32767
  %1100 = select i1 %1099, i32 %1093, i32 32767
  %1101 = icmp sgt i32 %1100, -32768
  %1102 = select i1 %1101, i32 %1100, i32 -32768
  %1103 = trunc i32 %1102 to i16
  store i16 %1103, i16* %400, align 2
  %1104 = load i16, i16* %334, align 2
  %1105 = sext i16 %1104 to i64
  %1106 = mul nsw i64 %1105, 2896
  %1107 = load i16, i16* %308, align 2
  %1108 = sext i16 %1107 to i64
  %1109 = mul nsw i64 %1108, 2896
  %1110 = add nsw i64 %1106, 2048
  %1111 = add nsw i64 %1110, %1109
  %1112 = lshr i64 %1111, 12
  %1113 = trunc i64 %1112 to i16
  store i16 %1113, i16* %334, align 2
  %1114 = sub nsw i64 %1110, %1109
  %1115 = lshr i64 %1114, 12
  %1116 = trunc i64 %1115 to i16
  store i16 %1116, i16* %308, align 2
  %1117 = load i16, i16* %336, align 2
  %1118 = sext i16 %1117 to i64
  %1119 = mul nsw i64 %1118, 2896
  %1120 = load i16, i16* %310, align 2
  %1121 = sext i16 %1120 to i64
  %1122 = mul nsw i64 %1121, 2896
  %1123 = add nsw i64 %1119, 2048
  %1124 = add nsw i64 %1123, %1122
  %1125 = lshr i64 %1124, 12
  %1126 = trunc i64 %1125 to i16
  store i16 %1126, i16* %336, align 2
  %1127 = sub nsw i64 %1123, %1122
  %1128 = lshr i64 %1127, 12
  %1129 = trunc i64 %1128 to i16
  store i16 %1129, i16* %310, align 2
  %1130 = load i16, i16* %332, align 2
  %1131 = sext i16 %1130 to i64
  %1132 = mul nsw i64 %1131, 2896
  %1133 = load i16, i16* %314, align 2
  %1134 = sext i16 %1133 to i64
  %1135 = mul nsw i64 %1134, 2896
  %1136 = add nsw i64 %1132, 2048
  %1137 = add nsw i64 %1136, %1135
  %1138 = lshr i64 %1137, 12
  %1139 = trunc i64 %1138 to i16
  store i16 %1139, i16* %332, align 2
  %1140 = sub nsw i64 %1136, %1135
  %1141 = lshr i64 %1140, 12
  %1142 = trunc i64 %1141 to i16
  store i16 %1142, i16* %314, align 2
  %1143 = load i16, i16* %330, align 2
  %1144 = sext i16 %1143 to i64
  %1145 = mul nsw i64 %1144, 2896
  %1146 = load i16, i16* %312, align 2
  %1147 = sext i16 %1146 to i64
  %1148 = mul nsw i64 %1147, 2896
  %1149 = add nsw i64 %1145, 2048
  %1150 = add nsw i64 %1149, %1148
  %1151 = lshr i64 %1150, 12
  %1152 = trunc i64 %1151 to i16
  store i16 %1152, i16* %330, align 2
  %1153 = sub nsw i64 %1149, %1148
  %1154 = lshr i64 %1153, 12
  %1155 = trunc i64 %1154 to i16
  store i16 %1155, i16* %312, align 2
  br label %275
}

; Function Attrs: nounwind ssp uwtable
define internal fastcc void @_ZN7libgav13dsp12_GLOBAL__N_15Dct_CIsLi6EEEvPva(i8*) unnamed_addr #0 {
  %2 = alloca [64 x i16], align 16
  %3 = bitcast i8* %0 to i16*
  %4 = bitcast [64 x i16]* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 128, i8* nonnull %4) #4
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 16 %4, i8* align 2 %0, i64 128, i1 false)
  br label %5

5:                                                ; preds = %5, %1
  %6 = phi i64 [ 0, %1 ], [ %34, %5 ]
  %7 = getelementptr inbounds [5 x [64 x i8]], [5 x [64 x i8]]* @_ZN7libgav13dsp12_GLOBAL__N_117kBitReverseLookupE, i64 0, i64 4, i64 %6
  %8 = load i8, i8* %7, align 4
  %9 = zext i8 %8 to i64
  %10 = getelementptr inbounds [64 x i16], [64 x i16]* %2, i64 0, i64 %9
  %11 = load i16, i16* %10, align 2
  %12 = getelementptr inbounds i16, i16* %3, i64 %6
  store i16 %11, i16* %12, align 2
  %13 = or i64 %6, 1
  %14 = getelementptr inbounds [5 x [64 x i8]], [5 x [64 x i8]]* @_ZN7libgav13dsp12_GLOBAL__N_117kBitReverseLookupE, i64 0, i64 4, i64 %13
  %15 = load i8, i8* %14, align 1
  %16 = zext i8 %15 to i64
  %17 = getelementptr inbounds [64 x i16], [64 x i16]* %2, i64 0, i64 %16
  %18 = load i16, i16* %17, align 2
  %19 = getelementptr inbounds i16, i16* %3, i64 %13
  store i16 %18, i16* %19, align 2
  %20 = or i64 %6, 2
  %21 = getelementptr inbounds [5 x [64 x i8]], [5 x [64 x i8]]* @_ZN7libgav13dsp12_GLOBAL__N_117kBitReverseLookupE, i64 0, i64 4, i64 %20
  %22 = load i8, i8* %21, align 2
  %23 = zext i8 %22 to i64
  %24 = getelementptr inbounds [64 x i16], [64 x i16]* %2, i64 0, i64 %23
  %25 = load i16, i16* %24, align 2
  %26 = getelementptr inbounds i16, i16* %3, i64 %20
  store i16 %25, i16* %26, align 2
  %27 = or i64 %6, 3
  %28 = getelementptr inbounds [5 x [64 x i8]], [5 x [64 x i8]]* @_ZN7libgav13dsp12_GLOBAL__N_117kBitReverseLookupE, i64 0, i64 4, i64 %27
  %29 = load i8, i8* %28, align 1
  %30 = zext i8 %29 to i64
  %31 = getelementptr inbounds [64 x i16], [64 x i16]* %2, i64 0, i64 %30
  %32 = load i16, i16* %31, align 2
  %33 = getelementptr inbounds i16, i16* %3, i64 %27
  store i16 %32, i16* %33, align 2
  %34 = add nuw nsw i64 %6, 4
  %35 = icmp eq i64 %34, 64
  br i1 %35, label %36, label %5

36:                                               ; preds = %5, %140
  %37 = phi i64 [ %152, %140 ], [ 0, %5 ]
  %38 = add nuw nsw i64 %37, 32
  %39 = sub nuw nsw i64 63, %37
  %40 = getelementptr inbounds [5 x [64 x i8]], [5 x [64 x i8]]* @_ZN7libgav13dsp12_GLOBAL__N_117kBitReverseLookupE, i64 0, i64 2, i64 %37
  %41 = load i8, i8* %40, align 1
  %42 = zext i8 %41 to i32
  %43 = shl nuw nsw i32 %42, 2
  %44 = sub nsw i32 63, %43
  %45 = getelementptr inbounds i16, i16* %3, i64 %38
  %46 = load i16, i16* %45, align 2
  %47 = sext i16 %46 to i64
  %48 = and i32 %44, 255
  %49 = icmp ult i32 %48, 65
  br i1 %49, label %50, label %54

50:                                               ; preds = %36
  %51 = zext i32 %48 to i64
  %52 = getelementptr inbounds [65 x i16], [65 x i16]* @_ZN7libgav13dsp12_GLOBAL__N_17kCos128E, i64 0, i64 %51
  %53 = load i16, i16* %52, align 2
  br label %75

54:                                               ; preds = %36
  %55 = icmp ult i32 %48, 129
  br i1 %55, label %56, label %62

56:                                               ; preds = %54
  %57 = sub nuw nsw i32 128, %48
  %58 = sext i32 %57 to i64
  %59 = getelementptr inbounds [65 x i16], [65 x i16]* @_ZN7libgav13dsp12_GLOBAL__N_17kCos128E, i64 0, i64 %58
  %60 = load i16, i16* %59, align 2
  %61 = sub i16 0, %60
  br label %75

62:                                               ; preds = %54
  %63 = icmp ult i32 %48, 193
  br i1 %63, label %64, label %70

64:                                               ; preds = %62
  %65 = add nsw i32 %48, -128
  %66 = sext i32 %65 to i64
  %67 = getelementptr inbounds [65 x i16], [65 x i16]* @_ZN7libgav13dsp12_GLOBAL__N_17kCos128E, i64 0, i64 %66
  %68 = load i16, i16* %67, align 2
  %69 = sub i16 0, %68
  br label %75

70:                                               ; preds = %62
  %71 = sub nuw nsw i32 256, %48
  %72 = zext i32 %71 to i64
  %73 = getelementptr inbounds [65 x i16], [65 x i16]* @_ZN7libgav13dsp12_GLOBAL__N_17kCos128E, i64 0, i64 %72
  %74 = load i16, i16* %73, align 2
  br label %75

75:                                               ; preds = %70, %64, %56, %50
  %76 = phi i16 [ %53, %50 ], [ %61, %56 ], [ %69, %64 ], [ %74, %70 ]
  %77 = sext i16 %76 to i64
  %78 = mul nsw i64 %77, %47
  %79 = getelementptr inbounds i16, i16* %3, i64 %39
  %80 = load i16, i16* %79, align 2
  %81 = sext i16 %80 to i64
  %82 = sub nsw i32 255, %43
  %83 = and i32 %82, 255
  %84 = icmp ult i32 %83, 65
  br i1 %84, label %89, label %85

85:                                               ; preds = %75
  %86 = icmp ult i32 %83, 129
  br i1 %86, label %93, label %87

87:                                               ; preds = %85
  %88 = icmp ult i32 %83, 193
  br i1 %88, label %99, label %105

89:                                               ; preds = %75
  %90 = zext i32 %83 to i64
  %91 = getelementptr inbounds [65 x i16], [65 x i16]* @_ZN7libgav13dsp12_GLOBAL__N_17kCos128E, i64 0, i64 %90
  %92 = load i16, i16* %91, align 2
  br label %110

93:                                               ; preds = %85
  %94 = sub nuw nsw i32 128, %83
  %95 = sext i32 %94 to i64
  %96 = getelementptr inbounds [65 x i16], [65 x i16]* @_ZN7libgav13dsp12_GLOBAL__N_17kCos128E, i64 0, i64 %95
  %97 = load i16, i16* %96, align 2
  %98 = sub i16 0, %97
  br label %110

99:                                               ; preds = %87
  %100 = add nsw i32 %83, -128
  %101 = sext i32 %100 to i64
  %102 = getelementptr inbounds [65 x i16], [65 x i16]* @_ZN7libgav13dsp12_GLOBAL__N_17kCos128E, i64 0, i64 %101
  %103 = load i16, i16* %102, align 2
  %104 = sub i16 0, %103
  br label %110

105:                                              ; preds = %87
  %106 = sub nuw nsw i32 256, %83
  %107 = zext i32 %106 to i64
  %108 = getelementptr inbounds [65 x i16], [65 x i16]* @_ZN7libgav13dsp12_GLOBAL__N_17kCos128E, i64 0, i64 %107
  %109 = load i16, i16* %108, align 2
  br label %110

110:                                              ; preds = %105, %99, %93, %89
  %111 = phi i16 [ %92, %89 ], [ %98, %93 ], [ %104, %99 ], [ %109, %105 ]
  %112 = sext i16 %111 to i64
  %113 = mul nsw i64 %112, %81
  %114 = mul nsw i64 %112, %47
  br i1 %49, label %115, label %119

115:                                              ; preds = %110
  %116 = zext i32 %48 to i64
  %117 = getelementptr inbounds [65 x i16], [65 x i16]* @_ZN7libgav13dsp12_GLOBAL__N_17kCos128E, i64 0, i64 %116
  %118 = load i16, i16* %117, align 2
  br label %140

119:                                              ; preds = %110
  %120 = icmp ult i32 %48, 129
  br i1 %120, label %121, label %127

121:                                              ; preds = %119
  %122 = sub nuw nsw i32 128, %48
  %123 = sext i32 %122 to i64
  %124 = getelementptr inbounds [65 x i16], [65 x i16]* @_ZN7libgav13dsp12_GLOBAL__N_17kCos128E, i64 0, i64 %123
  %125 = load i16, i16* %124, align 2
  %126 = sub i16 0, %125
  br label %140

127:                                              ; preds = %119
  %128 = icmp ult i32 %48, 193
  br i1 %128, label %129, label %135

129:                                              ; preds = %127
  %130 = add nsw i32 %48, -128
  %131 = sext i32 %130 to i64
  %132 = getelementptr inbounds [65 x i16], [65 x i16]* @_ZN7libgav13dsp12_GLOBAL__N_17kCos128E, i64 0, i64 %131
  %133 = load i16, i16* %132, align 2
  %134 = sub i16 0, %133
  br label %140

135:                                              ; preds = %127
  %136 = sub nuw nsw i32 256, %48
  %137 = zext i32 %136 to i64
  %138 = getelementptr inbounds [65 x i16], [65 x i16]* @_ZN7libgav13dsp12_GLOBAL__N_17kCos128E, i64 0, i64 %137
  %139 = load i16, i16* %138, align 2
  br label %140

140:                                              ; preds = %115, %121, %129, %135
  %141 = phi i16 [ %118, %115 ], [ %126, %121 ], [ %134, %129 ], [ %139, %135 ]
  %142 = sext i16 %141 to i64
  %143 = mul nsw i64 %142, %81
  %144 = add nsw i64 %78, 2048
  %145 = sub nsw i64 %144, %113
  %146 = lshr i64 %145, 12
  %147 = trunc i64 %146 to i16
  store i16 %147, i16* %45, align 2
  %148 = add nsw i64 %114, 2048
  %149 = add nsw i64 %148, %143
  %150 = lshr i64 %149, 12
  %151 = trunc i64 %150 to i16
  store i16 %151, i16* %79, align 2
  %152 = add nuw nsw i64 %37, 1
  %153 = icmp eq i64 %152, 16
  br i1 %153, label %154, label %36

154:                                              ; preds = %140, %259
  %155 = phi i64 [ %271, %259 ], [ 0, %140 ]
  %156 = add nuw nsw i64 %155, 16
  %157 = sub nuw nsw i64 31, %155
  %158 = sub nuw nsw i64 7, %155
  %159 = getelementptr inbounds [5 x [64 x i8]], [5 x [64 x i8]]* @_ZN7libgav13dsp12_GLOBAL__N_117kBitReverseLookupE, i64 0, i64 1, i64 %158
  %160 = load i8, i8* %159, align 1
  %161 = zext i8 %160 to i32
  %162 = shl nuw nsw i32 %161, 3
  %163 = or i32 %162, 6
  %164 = getelementptr inbounds i16, i16* %3, i64 %156
  %165 = load i16, i16* %164, align 2
  %166 = sext i16 %165 to i64
  %167 = and i32 %163, 254
  %168 = icmp ult i32 %167, 65
  br i1 %168, label %169, label %173

169:                                              ; preds = %154
  %170 = zext i32 %167 to i64
  %171 = getelementptr inbounds [65 x i16], [65 x i16]* @_ZN7libgav13dsp12_GLOBAL__N_17kCos128E, i64 0, i64 %170
  %172 = load i16, i16* %171, align 4
  br label %194

173:                                              ; preds = %154
  %174 = icmp ult i32 %167, 129
  br i1 %174, label %175, label %181

175:                                              ; preds = %173
  %176 = sub nuw nsw i32 128, %167
  %177 = sext i32 %176 to i64
  %178 = getelementptr inbounds [65 x i16], [65 x i16]* @_ZN7libgav13dsp12_GLOBAL__N_17kCos128E, i64 0, i64 %177
  %179 = load i16, i16* %178, align 4
  %180 = sub i16 0, %179
  br label %194

181:                                              ; preds = %173
  %182 = icmp ult i32 %167, 193
  br i1 %182, label %183, label %189

183:                                              ; preds = %181
  %184 = add nsw i32 %167, -128
  %185 = sext i32 %184 to i64
  %186 = getelementptr inbounds [65 x i16], [65 x i16]* @_ZN7libgav13dsp12_GLOBAL__N_17kCos128E, i64 0, i64 %185
  %187 = load i16, i16* %186, align 4
  %188 = sub i16 0, %187
  br label %194

189:                                              ; preds = %181
  %190 = sub nuw nsw i32 256, %167
  %191 = zext i32 %190 to i64
  %192 = getelementptr inbounds [65 x i16], [65 x i16]* @_ZN7libgav13dsp12_GLOBAL__N_17kCos128E, i64 0, i64 %191
  %193 = load i16, i16* %192, align 4
  br label %194

194:                                              ; preds = %189, %183, %175, %169
  %195 = phi i16 [ %172, %169 ], [ %180, %175 ], [ %188, %183 ], [ %193, %189 ]
  %196 = sext i16 %195 to i64
  %197 = mul nsw i64 %196, %166
  %198 = getelementptr inbounds i16, i16* %3, i64 %157
  %199 = load i16, i16* %198, align 2
  %200 = sext i16 %199 to i64
  %201 = add nuw nsw i32 %163, 192
  %202 = and i32 %201, 254
  %203 = icmp ult i32 %202, 65
  br i1 %203, label %208, label %204

204:                                              ; preds = %194
  %205 = icmp ult i32 %202, 129
  br i1 %205, label %212, label %206

206:                                              ; preds = %204
  %207 = icmp ult i32 %202, 193
  br i1 %207, label %218, label %224

208:                                              ; preds = %194
  %209 = zext i32 %202 to i64
  %210 = getelementptr inbounds [65 x i16], [65 x i16]* @_ZN7libgav13dsp12_GLOBAL__N_17kCos128E, i64 0, i64 %209
  %211 = load i16, i16* %210, align 4
  br label %229

212:                                              ; preds = %204
  %213 = sub nuw nsw i32 128, %202
  %214 = sext i32 %213 to i64
  %215 = getelementptr inbounds [65 x i16], [65 x i16]* @_ZN7libgav13dsp12_GLOBAL__N_17kCos128E, i64 0, i64 %214
  %216 = load i16, i16* %215, align 4
  %217 = sub i16 0, %216
  br label %229

218:                                              ; preds = %206
  %219 = add nsw i32 %202, -128
  %220 = sext i32 %219 to i64
  %221 = getelementptr inbounds [65 x i16], [65 x i16]* @_ZN7libgav13dsp12_GLOBAL__N_17kCos128E, i64 0, i64 %220
  %222 = load i16, i16* %221, align 4
  %223 = sub i16 0, %222
  br label %229

224:                                              ; preds = %206
  %225 = sub nuw nsw i32 256, %202
  %226 = zext i32 %225 to i64
  %227 = getelementptr inbounds [65 x i16], [65 x i16]* @_ZN7libgav13dsp12_GLOBAL__N_17kCos128E, i64 0, i64 %226
  %228 = load i16, i16* %227, align 4
  br label %229

229:                                              ; preds = %224, %218, %212, %208
  %230 = phi i16 [ %211, %208 ], [ %217, %212 ], [ %223, %218 ], [ %228, %224 ]
  %231 = sext i16 %230 to i64
  %232 = mul nsw i64 %231, %200
  %233 = mul nsw i64 %231, %166
  br i1 %168, label %234, label %238

234:                                              ; preds = %229
  %235 = zext i32 %167 to i64
  %236 = getelementptr inbounds [65 x i16], [65 x i16]* @_ZN7libgav13dsp12_GLOBAL__N_17kCos128E, i64 0, i64 %235
  %237 = load i16, i16* %236, align 4
  br label %259

238:                                              ; preds = %229
  %239 = icmp ult i32 %167, 129
  br i1 %239, label %240, label %246

240:                                              ; preds = %238
  %241 = sub nuw nsw i32 128, %167
  %242 = sext i32 %241 to i64
  %243 = getelementptr inbounds [65 x i16], [65 x i16]* @_ZN7libgav13dsp12_GLOBAL__N_17kCos128E, i64 0, i64 %242
  %244 = load i16, i16* %243, align 4
  %245 = sub i16 0, %244
  br label %259

246:                                              ; preds = %238
  %247 = icmp ult i32 %167, 193
  br i1 %247, label %248, label %254

248:                                              ; preds = %246
  %249 = add nsw i32 %167, -128
  %250 = sext i32 %249 to i64
  %251 = getelementptr inbounds [65 x i16], [65 x i16]* @_ZN7libgav13dsp12_GLOBAL__N_17kCos128E, i64 0, i64 %250
  %252 = load i16, i16* %251, align 4
  %253 = sub i16 0, %252
  br label %259

254:                                              ; preds = %246
  %255 = sub nuw nsw i32 256, %167
  %256 = zext i32 %255 to i64
  %257 = getelementptr inbounds [65 x i16], [65 x i16]* @_ZN7libgav13dsp12_GLOBAL__N_17kCos128E, i64 0, i64 %256
  %258 = load i16, i16* %257, align 4
  br label %259

259:                                              ; preds = %234, %240, %248, %254
  %260 = phi i16 [ %237, %234 ], [ %245, %240 ], [ %253, %248 ], [ %258, %254 ]
  %261 = sext i16 %260 to i64
  %262 = mul nsw i64 %261, %200
  %263 = add nsw i64 %197, 2048
  %264 = sub nsw i64 %263, %232
  %265 = lshr i64 %264, 12
  %266 = trunc i64 %265 to i16
  store i16 %266, i16* %164, align 2
  %267 = add nsw i64 %233, 2048
  %268 = add nsw i64 %267, %262
  %269 = lshr i64 %268, 12
  %270 = trunc i64 %269 to i16
  store i16 %270, i16* %198, align 2
  %271 = add nuw nsw i64 %155, 1
  %272 = icmp eq i64 %271, 8
  br i1 %272, label %273, label %154

273:                                              ; preds = %259, %273
  %274 = phi i32 [ %302, %273 ], [ 0, %259 ]
  %275 = shl nuw i32 %274, 1
  %276 = add nuw nsw i32 %275, 32
  %277 = add nuw nsw i32 %275, 33
  %278 = and i32 %274, 1
  %279 = icmp ne i32 %278, 0
  %280 = select i1 %279, i32 %277, i32 %276
  %281 = select i1 %279, i32 %276, i32 %277
  %282 = sext i32 %280 to i64
  %283 = getelementptr inbounds i16, i16* %3, i64 %282
  %284 = load i16, i16* %283, align 2
  %285 = sext i16 %284 to i32
  %286 = sext i32 %281 to i64
  %287 = getelementptr inbounds i16, i16* %3, i64 %286
  %288 = load i16, i16* %287, align 2
  %289 = sext i16 %288 to i32
  %290 = add nsw i32 %289, %285
  %291 = sub nsw i32 %285, %289
  %292 = icmp slt i32 %290, 32767
  %293 = select i1 %292, i32 %290, i32 32767
  %294 = icmp sgt i32 %293, -32768
  %295 = select i1 %294, i32 %293, i32 -32768
  %296 = trunc i32 %295 to i16
  store i16 %296, i16* %283, align 2
  %297 = icmp slt i32 %291, 32767
  %298 = select i1 %297, i32 %291, i32 32767
  %299 = icmp sgt i32 %298, -32768
  %300 = select i1 %299, i32 %298, i32 -32768
  %301 = trunc i32 %300 to i16
  store i16 %301, i16* %287, align 2
  %302 = add nuw nsw i32 %274, 1
  %303 = icmp eq i32 %302, 16
  br i1 %303, label %304, label %273

304:                                              ; preds = %273, %409
  %305 = phi i64 [ %421, %409 ], [ 0, %273 ]
  %306 = add nuw nsw i64 %305, 8
  %307 = sub nuw nsw i64 15, %305
  %308 = sub nuw nsw i64 3, %305
  %309 = getelementptr inbounds [5 x [64 x i8]], [5 x [64 x i8]]* @_ZN7libgav13dsp12_GLOBAL__N_117kBitReverseLookupE, i64 0, i64 0, i64 %308
  %310 = load i8, i8* %309, align 1
  %311 = zext i8 %310 to i32
  %312 = shl nuw nsw i32 %311, 4
  %313 = or i32 %312, 12
  %314 = getelementptr inbounds i16, i16* %3, i64 %306
  %315 = load i16, i16* %314, align 2
  %316 = sext i16 %315 to i64
  %317 = and i32 %313, 252
  %318 = icmp ult i32 %317, 65
  br i1 %318, label %319, label %323

319:                                              ; preds = %304
  %320 = zext i32 %317 to i64
  %321 = getelementptr inbounds [65 x i16], [65 x i16]* @_ZN7libgav13dsp12_GLOBAL__N_17kCos128E, i64 0, i64 %320
  %322 = load i16, i16* %321, align 8
  br label %344

323:                                              ; preds = %304
  %324 = icmp ult i32 %317, 129
  br i1 %324, label %325, label %331

325:                                              ; preds = %323
  %326 = sub nuw nsw i32 128, %317
  %327 = sext i32 %326 to i64
  %328 = getelementptr inbounds [65 x i16], [65 x i16]* @_ZN7libgav13dsp12_GLOBAL__N_17kCos128E, i64 0, i64 %327
  %329 = load i16, i16* %328, align 8
  %330 = sub i16 0, %329
  br label %344

331:                                              ; preds = %323
  %332 = icmp ult i32 %317, 193
  br i1 %332, label %333, label %339

333:                                              ; preds = %331
  %334 = add nsw i32 %317, -128
  %335 = sext i32 %334 to i64
  %336 = getelementptr inbounds [65 x i16], [65 x i16]* @_ZN7libgav13dsp12_GLOBAL__N_17kCos128E, i64 0, i64 %335
  %337 = load i16, i16* %336, align 8
  %338 = sub i16 0, %337
  br label %344

339:                                              ; preds = %331
  %340 = sub nuw nsw i32 256, %317
  %341 = zext i32 %340 to i64
  %342 = getelementptr inbounds [65 x i16], [65 x i16]* @_ZN7libgav13dsp12_GLOBAL__N_17kCos128E, i64 0, i64 %341
  %343 = load i16, i16* %342, align 8
  br label %344

344:                                              ; preds = %339, %333, %325, %319
  %345 = phi i16 [ %322, %319 ], [ %330, %325 ], [ %338, %333 ], [ %343, %339 ]
  %346 = sext i16 %345 to i64
  %347 = mul nsw i64 %346, %316
  %348 = getelementptr inbounds i16, i16* %3, i64 %307
  %349 = load i16, i16* %348, align 2
  %350 = sext i16 %349 to i64
  %351 = add nuw nsw i32 %313, 192
  %352 = and i32 %351, 252
  %353 = icmp ult i32 %352, 65
  br i1 %353, label %358, label %354

354:                                              ; preds = %344
  %355 = icmp ult i32 %352, 129
  br i1 %355, label %362, label %356

356:                                              ; preds = %354
  %357 = icmp ult i32 %352, 193
  br i1 %357, label %368, label %374

358:                                              ; preds = %344
  %359 = zext i32 %352 to i64
  %360 = getelementptr inbounds [65 x i16], [65 x i16]* @_ZN7libgav13dsp12_GLOBAL__N_17kCos128E, i64 0, i64 %359
  %361 = load i16, i16* %360, align 8
  br label %379

362:                                              ; preds = %354
  %363 = sub nuw nsw i32 128, %352
  %364 = sext i32 %363 to i64
  %365 = getelementptr inbounds [65 x i16], [65 x i16]* @_ZN7libgav13dsp12_GLOBAL__N_17kCos128E, i64 0, i64 %364
  %366 = load i16, i16* %365, align 8
  %367 = sub i16 0, %366
  br label %379

368:                                              ; preds = %356
  %369 = add nsw i32 %352, -128
  %370 = sext i32 %369 to i64
  %371 = getelementptr inbounds [65 x i16], [65 x i16]* @_ZN7libgav13dsp12_GLOBAL__N_17kCos128E, i64 0, i64 %370
  %372 = load i16, i16* %371, align 8
  %373 = sub i16 0, %372
  br label %379

374:                                              ; preds = %356
  %375 = sub nuw nsw i32 256, %352
  %376 = zext i32 %375 to i64
  %377 = getelementptr inbounds [65 x i16], [65 x i16]* @_ZN7libgav13dsp12_GLOBAL__N_17kCos128E, i64 0, i64 %376
  %378 = load i16, i16* %377, align 8
  br label %379

379:                                              ; preds = %374, %368, %362, %358
  %380 = phi i16 [ %361, %358 ], [ %367, %362 ], [ %373, %368 ], [ %378, %374 ]
  %381 = sext i16 %380 to i64
  %382 = mul nsw i64 %381, %350
  %383 = mul nsw i64 %381, %316
  br i1 %318, label %384, label %388

384:                                              ; preds = %379
  %385 = zext i32 %317 to i64
  %386 = getelementptr inbounds [65 x i16], [65 x i16]* @_ZN7libgav13dsp12_GLOBAL__N_17kCos128E, i64 0, i64 %385
  %387 = load i16, i16* %386, align 8
  br label %409

388:                                              ; preds = %379
  %389 = icmp ult i32 %317, 129
  br i1 %389, label %390, label %396

390:                                              ; preds = %388
  %391 = sub nuw nsw i32 128, %317
  %392 = sext i32 %391 to i64
  %393 = getelementptr inbounds [65 x i16], [65 x i16]* @_ZN7libgav13dsp12_GLOBAL__N_17kCos128E, i64 0, i64 %392
  %394 = load i16, i16* %393, align 8
  %395 = sub i16 0, %394
  br label %409

396:                                              ; preds = %388
  %397 = icmp ult i32 %317, 193
  br i1 %397, label %398, label %404

398:                                              ; preds = %396
  %399 = add nsw i32 %317, -128
  %400 = sext i32 %399 to i64
  %401 = getelementptr inbounds [65 x i16], [65 x i16]* @_ZN7libgav13dsp12_GLOBAL__N_17kCos128E, i64 0, i64 %400
  %402 = load i16, i16* %401, align 8
  %403 = sub i16 0, %402
  br label %409

404:                                              ; preds = %396
  %405 = sub nuw nsw i32 256, %317
  %406 = zext i32 %405 to i64
  %407 = getelementptr inbounds [65 x i16], [65 x i16]* @_ZN7libgav13dsp12_GLOBAL__N_17kCos128E, i64 0, i64 %406
  %408 = load i16, i16* %407, align 8
  br label %409

409:                                              ; preds = %384, %390, %398, %404
  %410 = phi i16 [ %387, %384 ], [ %395, %390 ], [ %403, %398 ], [ %408, %404 ]
  %411 = sext i16 %410 to i64
  %412 = mul nsw i64 %411, %350
  %413 = add nsw i64 %347, 2048
  %414 = sub nsw i64 %413, %382
  %415 = lshr i64 %414, 12
  %416 = trunc i64 %415 to i16
  store i16 %416, i16* %314, align 2
  %417 = add nsw i64 %383, 2048
  %418 = add nsw i64 %417, %412
  %419 = lshr i64 %418, 12
  %420 = trunc i64 %419 to i16
  store i16 %420, i16* %348, align 2
  %421 = add nuw nsw i64 %305, 1
  %422 = icmp eq i64 %421, 4
  br i1 %422, label %423, label %304

423:                                              ; preds = %409
  %424 = getelementptr inbounds i8, i8* %0, i64 32
  %425 = bitcast i8* %424 to i16*
  %426 = getelementptr inbounds i8, i8* %0, i64 34
  %427 = bitcast i8* %426 to i16*
  %428 = getelementptr inbounds i8, i8* %0, i64 38
  %429 = bitcast i8* %428 to i16*
  %430 = getelementptr inbounds i8, i8* %0, i64 36
  %431 = bitcast i8* %430 to i16*
  %432 = getelementptr inbounds i8, i8* %0, i64 40
  %433 = bitcast i8* %432 to i16*
  %434 = getelementptr inbounds i8, i8* %0, i64 42
  %435 = bitcast i8* %434 to i16*
  %436 = getelementptr inbounds i8, i8* %0, i64 46
  %437 = bitcast i8* %436 to i16*
  %438 = getelementptr inbounds i8, i8* %0, i64 44
  %439 = bitcast i8* %438 to i16*
  %440 = bitcast i8* %424 to <8 x i16>*
  %441 = load <8 x i16>, <8 x i16>* %440, align 2
  %442 = shufflevector <8 x i16> %441, <8 x i16> undef, <8 x i32> <i32 1, i32 0, i32 3, i32 2, i32 5, i32 4, i32 7, i32 6>
  %443 = sext <8 x i16> %442 to <8 x i32>
  %444 = shufflevector <8 x i32> %443, <8 x i32> undef, <8 x i32> <i32 1, i32 0, i32 3, i32 2, i32 5, i32 4, i32 7, i32 6>
  %445 = add nsw <8 x i32> %444, %443
  %446 = sub nsw <8 x i32> %443, %444
  %447 = shufflevector <8 x i32> %445, <8 x i32> %446, <8 x i32> <i32 0, i32 9, i32 10, i32 3, i32 4, i32 13, i32 14, i32 7>
  %448 = icmp slt <8 x i32> %447, <i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767>
  %449 = select <8 x i1> %448, <8 x i32> %447, <8 x i32> <i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767>
  %450 = icmp sgt <8 x i32> %449, <i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768>
  %451 = select <8 x i1> %450, <8 x i32> %449, <8 x i32> <i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768>
  %452 = trunc <8 x i32> %451 to <8 x i16>
  %453 = bitcast i8* %424 to <8 x i16>*
  store <8 x i16> %452, <8 x i16>* %453, align 2
  %454 = getelementptr inbounds i8, i8* %0, i64 48
  %455 = bitcast i8* %454 to i16*
  %456 = getelementptr inbounds i8, i8* %0, i64 50
  %457 = bitcast i8* %456 to i16*
  %458 = getelementptr inbounds i8, i8* %0, i64 54
  %459 = bitcast i8* %458 to i16*
  %460 = getelementptr inbounds i8, i8* %0, i64 52
  %461 = bitcast i8* %460 to i16*
  %462 = getelementptr inbounds i8, i8* %0, i64 56
  %463 = bitcast i8* %462 to i16*
  %464 = getelementptr inbounds i8, i8* %0, i64 58
  %465 = bitcast i8* %464 to i16*
  %466 = getelementptr inbounds i8, i8* %0, i64 62
  %467 = bitcast i8* %466 to i16*
  %468 = getelementptr inbounds i8, i8* %0, i64 60
  %469 = bitcast i8* %468 to i16*
  %470 = bitcast i8* %454 to <8 x i16>*
  %471 = load <8 x i16>, <8 x i16>* %470, align 2
  %472 = shufflevector <8 x i16> %471, <8 x i16> undef, <8 x i32> <i32 1, i32 0, i32 3, i32 2, i32 5, i32 4, i32 7, i32 6>
  %473 = sext <8 x i16> %472 to <8 x i32>
  %474 = shufflevector <8 x i32> %473, <8 x i32> undef, <8 x i32> <i32 1, i32 0, i32 3, i32 2, i32 5, i32 4, i32 7, i32 6>
  %475 = add nsw <8 x i32> %474, %473
  %476 = sub nsw <8 x i32> %473, %474
  %477 = shufflevector <8 x i32> %475, <8 x i32> %476, <8 x i32> <i32 0, i32 9, i32 10, i32 3, i32 4, i32 13, i32 14, i32 7>
  %478 = icmp slt <8 x i32> %477, <i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767>
  %479 = select <8 x i1> %478, <8 x i32> %477, <8 x i32> <i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767>
  %480 = icmp sgt <8 x i32> %479, <i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768>
  %481 = select <8 x i1> %480, <8 x i32> %479, <8 x i32> <i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768>
  %482 = trunc <8 x i32> %481 to <8 x i16>
  %483 = bitcast i8* %454 to <8 x i16>*
  store <8 x i16> %482, <8 x i16>* %483, align 2
  br label %484

484:                                              ; preds = %1929, %423
  %485 = phi i64 [ 0, %423 ], [ %1941, %1929 ]
  %486 = shl i64 %485, 2
  %487 = sub nuw nsw i64 62, %486
  %488 = add nuw nsw i64 %486, 33
  %489 = getelementptr inbounds [5 x [64 x i8]], [5 x [64 x i8]]* @_ZN7libgav13dsp12_GLOBAL__N_117kBitReverseLookupE, i64 0, i64 0, i64 %485
  %490 = load i8, i8* %489, align 1
  %491 = zext i8 %490 to i32
  %492 = shl nuw nsw i32 %491, 4
  %493 = sub nsw i32 60, %492
  %494 = getelementptr inbounds i16, i16* %3, i64 %487
  %495 = load i16, i16* %494, align 2
  %496 = sext i16 %495 to i64
  %497 = and i32 %493, 252
  %498 = icmp ult i32 %497, 65
  br i1 %498, label %499, label %503

499:                                              ; preds = %484
  %500 = zext i32 %497 to i64
  %501 = getelementptr inbounds [65 x i16], [65 x i16]* @_ZN7libgav13dsp12_GLOBAL__N_17kCos128E, i64 0, i64 %500
  %502 = load i16, i16* %501, align 8
  br label %524

503:                                              ; preds = %484
  %504 = icmp ult i32 %497, 129
  br i1 %504, label %505, label %511

505:                                              ; preds = %503
  %506 = sub nuw nsw i32 128, %497
  %507 = sext i32 %506 to i64
  %508 = getelementptr inbounds [65 x i16], [65 x i16]* @_ZN7libgav13dsp12_GLOBAL__N_17kCos128E, i64 0, i64 %507
  %509 = load i16, i16* %508, align 8
  %510 = sub i16 0, %509
  br label %524

511:                                              ; preds = %503
  %512 = icmp ult i32 %497, 193
  br i1 %512, label %513, label %519

513:                                              ; preds = %511
  %514 = add nsw i32 %497, -128
  %515 = sext i32 %514 to i64
  %516 = getelementptr inbounds [65 x i16], [65 x i16]* @_ZN7libgav13dsp12_GLOBAL__N_17kCos128E, i64 0, i64 %515
  %517 = load i16, i16* %516, align 8
  %518 = sub i16 0, %517
  br label %524

519:                                              ; preds = %511
  %520 = sub nuw nsw i32 256, %497
  %521 = zext i32 %520 to i64
  %522 = getelementptr inbounds [65 x i16], [65 x i16]* @_ZN7libgav13dsp12_GLOBAL__N_17kCos128E, i64 0, i64 %521
  %523 = load i16, i16* %522, align 8
  br label %524

524:                                              ; preds = %519, %513, %505, %499
  %525 = phi i16 [ %502, %499 ], [ %510, %505 ], [ %518, %513 ], [ %523, %519 ]
  %526 = sext i16 %525 to i64
  %527 = mul nsw i64 %526, %496
  %528 = getelementptr inbounds i16, i16* %3, i64 %488
  %529 = load i16, i16* %528, align 2
  %530 = sext i16 %529 to i64
  %531 = sub nsw i32 252, %492
  %532 = and i32 %531, 252
  %533 = icmp ult i32 %532, 65
  br i1 %533, label %538, label %534

534:                                              ; preds = %524
  %535 = icmp ult i32 %532, 129
  br i1 %535, label %542, label %536

536:                                              ; preds = %534
  %537 = icmp ult i32 %532, 193
  br i1 %537, label %548, label %554

538:                                              ; preds = %524
  %539 = zext i32 %532 to i64
  %540 = getelementptr inbounds [65 x i16], [65 x i16]* @_ZN7libgav13dsp12_GLOBAL__N_17kCos128E, i64 0, i64 %539
  %541 = load i16, i16* %540, align 8
  br label %559

542:                                              ; preds = %534
  %543 = sub nuw nsw i32 128, %532
  %544 = sext i32 %543 to i64
  %545 = getelementptr inbounds [65 x i16], [65 x i16]* @_ZN7libgav13dsp12_GLOBAL__N_17kCos128E, i64 0, i64 %544
  %546 = load i16, i16* %545, align 8
  %547 = sub i16 0, %546
  br label %559

548:                                              ; preds = %536
  %549 = add nsw i32 %532, -128
  %550 = sext i32 %549 to i64
  %551 = getelementptr inbounds [65 x i16], [65 x i16]* @_ZN7libgav13dsp12_GLOBAL__N_17kCos128E, i64 0, i64 %550
  %552 = load i16, i16* %551, align 8
  %553 = sub i16 0, %552
  br label %559

554:                                              ; preds = %536
  %555 = sub nuw nsw i32 256, %532
  %556 = zext i32 %555 to i64
  %557 = getelementptr inbounds [65 x i16], [65 x i16]* @_ZN7libgav13dsp12_GLOBAL__N_17kCos128E, i64 0, i64 %556
  %558 = load i16, i16* %557, align 8
  br label %559

559:                                              ; preds = %554, %548, %542, %538
  %560 = phi i16 [ %541, %538 ], [ %547, %542 ], [ %553, %548 ], [ %558, %554 ]
  %561 = sext i16 %560 to i64
  %562 = mul nsw i64 %561, %530
  %563 = mul nsw i64 %561, %496
  br i1 %498, label %564, label %568

564:                                              ; preds = %559
  %565 = zext i32 %497 to i64
  %566 = getelementptr inbounds [65 x i16], [65 x i16]* @_ZN7libgav13dsp12_GLOBAL__N_17kCos128E, i64 0, i64 %565
  %567 = load i16, i16* %566, align 8
  br label %589

568:                                              ; preds = %559
  %569 = icmp ult i32 %497, 129
  br i1 %569, label %570, label %576

570:                                              ; preds = %568
  %571 = sub nuw nsw i32 128, %497
  %572 = sext i32 %571 to i64
  %573 = getelementptr inbounds [65 x i16], [65 x i16]* @_ZN7libgav13dsp12_GLOBAL__N_17kCos128E, i64 0, i64 %572
  %574 = load i16, i16* %573, align 8
  %575 = sub i16 0, %574
  br label %589

576:                                              ; preds = %568
  %577 = icmp ult i32 %497, 193
  br i1 %577, label %578, label %584

578:                                              ; preds = %576
  %579 = add nsw i32 %497, -128
  %580 = sext i32 %579 to i64
  %581 = getelementptr inbounds [65 x i16], [65 x i16]* @_ZN7libgav13dsp12_GLOBAL__N_17kCos128E, i64 0, i64 %580
  %582 = load i16, i16* %581, align 8
  %583 = sub i16 0, %582
  br label %589

584:                                              ; preds = %576
  %585 = sub nuw nsw i32 256, %497
  %586 = zext i32 %585 to i64
  %587 = getelementptr inbounds [65 x i16], [65 x i16]* @_ZN7libgav13dsp12_GLOBAL__N_17kCos128E, i64 0, i64 %586
  %588 = load i16, i16* %587, align 8
  br label %589

589:                                              ; preds = %564, %570, %578, %584
  %590 = phi i16 [ %567, %564 ], [ %575, %570 ], [ %583, %578 ], [ %588, %584 ]
  %591 = sext i16 %590 to i64
  %592 = mul nsw i64 %591, %530
  %593 = add nsw i64 %563, 2048
  %594 = add nsw i64 %593, %592
  %595 = lshr i64 %594, 12
  %596 = trunc i64 %595 to i16
  store i16 %596, i16* %494, align 2
  %597 = add nsw i64 %527, 2048
  %598 = sub nsw i64 %597, %562
  %599 = lshr i64 %598, 12
  %600 = trunc i64 %599 to i16
  store i16 %600, i16* %528, align 2
  %601 = sub i64 61, %486
  %602 = add nuw nsw i64 %486, 34
  %603 = sub nsw i32 124, %492
  %604 = getelementptr inbounds i16, i16* %3, i64 %601
  %605 = load i16, i16* %604, align 2
  %606 = sext i16 %605 to i64
  %607 = and i32 %603, 252
  %608 = icmp ult i32 %607, 65
  br i1 %608, label %1860, label %1839

609:                                              ; preds = %609, %1707
  %610 = phi i32 [ %662, %609 ], [ 0, %1707 ]
  %611 = shl i32 %610, 2
  %612 = add nuw nsw i32 %611, 32
  %613 = and i32 %610, 1
  %614 = icmp ne i32 %613, 0
  %615 = add nuw nsw i32 %611, 35
  %616 = select i1 %614, i32 %615, i32 %612
  %617 = select i1 %614, i32 %612, i32 %615
  %618 = sext i32 %616 to i64
  %619 = getelementptr inbounds i16, i16* %3, i64 %618
  %620 = load i16, i16* %619, align 2
  %621 = sext i16 %620 to i32
  %622 = sext i32 %617 to i64
  %623 = getelementptr inbounds i16, i16* %3, i64 %622
  %624 = load i16, i16* %623, align 2
  %625 = sext i16 %624 to i32
  %626 = add nsw i32 %625, %621
  %627 = sub nsw i32 %621, %625
  %628 = icmp slt i32 %626, 32767
  %629 = select i1 %628, i32 %626, i32 32767
  %630 = icmp sgt i32 %629, -32768
  %631 = select i1 %630, i32 %629, i32 -32768
  %632 = trunc i32 %631 to i16
  store i16 %632, i16* %619, align 2
  %633 = icmp slt i32 %627, 32767
  %634 = select i1 %633, i32 %627, i32 32767
  %635 = icmp sgt i32 %634, -32768
  %636 = select i1 %635, i32 %634, i32 -32768
  %637 = trunc i32 %636 to i16
  store i16 %637, i16* %623, align 2
  %638 = add nuw nsw i32 %611, 33
  %639 = add nsw i32 %611, 34
  %640 = select i1 %614, i32 %639, i32 %638
  %641 = select i1 %614, i32 %638, i32 %639
  %642 = sext i32 %640 to i64
  %643 = getelementptr inbounds i16, i16* %3, i64 %642
  %644 = load i16, i16* %643, align 2
  %645 = sext i16 %644 to i32
  %646 = sext i32 %641 to i64
  %647 = getelementptr inbounds i16, i16* %3, i64 %646
  %648 = load i16, i16* %647, align 2
  %649 = sext i16 %648 to i32
  %650 = add nsw i32 %649, %645
  %651 = sub nsw i32 %645, %649
  %652 = icmp slt i32 %650, 32767
  %653 = select i1 %652, i32 %650, i32 32767
  %654 = icmp sgt i32 %653, -32768
  %655 = select i1 %654, i32 %653, i32 -32768
  %656 = trunc i32 %655 to i16
  store i16 %656, i16* %643, align 2
  %657 = icmp slt i32 %651, 32767
  %658 = select i1 %657, i32 %651, i32 32767
  %659 = icmp sgt i32 %658, -32768
  %660 = select i1 %659, i32 %658, i32 -32768
  %661 = trunc i32 %660 to i16
  store i16 %661, i16* %647, align 2
  %662 = add nuw nsw i32 %610, 1
  %663 = icmp eq i32 %662, 8
  br i1 %663, label %1528, label %609

664:                                              ; preds = %672, %1528
  %665 = phi i64 [ 0, %1528 ], [ %673, %672 ]
  %666 = shl i64 %665, 3
  %667 = sub nuw nsw i64 61, %666
  %668 = add nuw nsw i64 %666, 34
  %669 = trunc i64 %665 to i32
  %670 = shl i32 %669, 5
  %671 = sub i32 56, %670
  br label %675

672:                                              ; preds = %778
  %673 = add nuw nsw i64 %665, 1
  %674 = icmp eq i64 %673, 2
  br i1 %674, label %1400, label %664

675:                                              ; preds = %778, %664
  %676 = phi i64 [ 0, %664 ], [ %790, %778 ]
  %677 = sub nuw nsw i64 %667, %676
  %678 = add nuw nsw i64 %668, %676
  %679 = trunc i64 %676 to i32
  %680 = lshr i32 %679, 1
  %681 = shl i32 %680, 6
  %682 = add nsw i32 %681, %671
  %683 = getelementptr inbounds i16, i16* %3, i64 %677
  %684 = load i16, i16* %683, align 2
  %685 = sext i16 %684 to i64
  %686 = and i32 %682, 248
  %687 = icmp ult i32 %686, 65
  br i1 %687, label %688, label %692

688:                                              ; preds = %675
  %689 = zext i32 %686 to i64
  %690 = getelementptr inbounds [65 x i16], [65 x i16]* @_ZN7libgav13dsp12_GLOBAL__N_17kCos128E, i64 0, i64 %689
  %691 = load i16, i16* %690, align 16
  br label %713

692:                                              ; preds = %675
  %693 = icmp ult i32 %686, 129
  br i1 %693, label %694, label %700

694:                                              ; preds = %692
  %695 = sub nuw nsw i32 128, %686
  %696 = sext i32 %695 to i64
  %697 = getelementptr inbounds [65 x i16], [65 x i16]* @_ZN7libgav13dsp12_GLOBAL__N_17kCos128E, i64 0, i64 %696
  %698 = load i16, i16* %697, align 16
  %699 = sub i16 0, %698
  br label %713

700:                                              ; preds = %692
  %701 = icmp ult i32 %686, 193
  br i1 %701, label %702, label %708

702:                                              ; preds = %700
  %703 = add nsw i32 %686, -128
  %704 = sext i32 %703 to i64
  %705 = getelementptr inbounds [65 x i16], [65 x i16]* @_ZN7libgav13dsp12_GLOBAL__N_17kCos128E, i64 0, i64 %704
  %706 = load i16, i16* %705, align 16
  %707 = sub i16 0, %706
  br label %713

708:                                              ; preds = %700
  %709 = sub nuw nsw i32 256, %686
  %710 = zext i32 %709 to i64
  %711 = getelementptr inbounds [65 x i16], [65 x i16]* @_ZN7libgav13dsp12_GLOBAL__N_17kCos128E, i64 0, i64 %710
  %712 = load i16, i16* %711, align 16
  br label %713

713:                                              ; preds = %708, %702, %694, %688
  %714 = phi i16 [ %691, %688 ], [ %699, %694 ], [ %707, %702 ], [ %712, %708 ]
  %715 = sext i16 %714 to i64
  %716 = mul nsw i64 %715, %685
  %717 = getelementptr inbounds i16, i16* %3, i64 %678
  %718 = load i16, i16* %717, align 2
  %719 = sext i16 %718 to i64
  %720 = add i32 %682, 192
  %721 = and i32 %720, 248
  %722 = icmp ult i32 %721, 65
  br i1 %722, label %727, label %723

723:                                              ; preds = %713
  %724 = icmp ult i32 %721, 129
  br i1 %724, label %731, label %725

725:                                              ; preds = %723
  %726 = icmp ult i32 %721, 193
  br i1 %726, label %737, label %743

727:                                              ; preds = %713
  %728 = zext i32 %721 to i64
  %729 = getelementptr inbounds [65 x i16], [65 x i16]* @_ZN7libgav13dsp12_GLOBAL__N_17kCos128E, i64 0, i64 %728
  %730 = load i16, i16* %729, align 16
  br label %748

731:                                              ; preds = %723
  %732 = sub nuw nsw i32 128, %721
  %733 = sext i32 %732 to i64
  %734 = getelementptr inbounds [65 x i16], [65 x i16]* @_ZN7libgav13dsp12_GLOBAL__N_17kCos128E, i64 0, i64 %733
  %735 = load i16, i16* %734, align 16
  %736 = sub i16 0, %735
  br label %748

737:                                              ; preds = %725
  %738 = add nsw i32 %721, -128
  %739 = sext i32 %738 to i64
  %740 = getelementptr inbounds [65 x i16], [65 x i16]* @_ZN7libgav13dsp12_GLOBAL__N_17kCos128E, i64 0, i64 %739
  %741 = load i16, i16* %740, align 16
  %742 = sub i16 0, %741
  br label %748

743:                                              ; preds = %725
  %744 = sub nuw nsw i32 256, %721
  %745 = zext i32 %744 to i64
  %746 = getelementptr inbounds [65 x i16], [65 x i16]* @_ZN7libgav13dsp12_GLOBAL__N_17kCos128E, i64 0, i64 %745
  %747 = load i16, i16* %746, align 16
  br label %748

748:                                              ; preds = %743, %737, %731, %727
  %749 = phi i16 [ %730, %727 ], [ %736, %731 ], [ %742, %737 ], [ %747, %743 ]
  %750 = sext i16 %749 to i64
  %751 = mul nsw i64 %750, %719
  %752 = mul nsw i64 %750, %685
  br i1 %687, label %753, label %757

753:                                              ; preds = %748
  %754 = zext i32 %686 to i64
  %755 = getelementptr inbounds [65 x i16], [65 x i16]* @_ZN7libgav13dsp12_GLOBAL__N_17kCos128E, i64 0, i64 %754
  %756 = load i16, i16* %755, align 16
  br label %778

757:                                              ; preds = %748
  %758 = icmp ult i32 %686, 129
  br i1 %758, label %759, label %765

759:                                              ; preds = %757
  %760 = sub nuw nsw i32 128, %686
  %761 = sext i32 %760 to i64
  %762 = getelementptr inbounds [65 x i16], [65 x i16]* @_ZN7libgav13dsp12_GLOBAL__N_17kCos128E, i64 0, i64 %761
  %763 = load i16, i16* %762, align 16
  %764 = sub i16 0, %763
  br label %778

765:                                              ; preds = %757
  %766 = icmp ult i32 %686, 193
  br i1 %766, label %767, label %773

767:                                              ; preds = %765
  %768 = add nsw i32 %686, -128
  %769 = sext i32 %768 to i64
  %770 = getelementptr inbounds [65 x i16], [65 x i16]* @_ZN7libgav13dsp12_GLOBAL__N_17kCos128E, i64 0, i64 %769
  %771 = load i16, i16* %770, align 16
  %772 = sub i16 0, %771
  br label %778

773:                                              ; preds = %765
  %774 = sub nuw nsw i32 256, %686
  %775 = zext i32 %774 to i64
  %776 = getelementptr inbounds [65 x i16], [65 x i16]* @_ZN7libgav13dsp12_GLOBAL__N_17kCos128E, i64 0, i64 %775
  %777 = load i16, i16* %776, align 16
  br label %778

778:                                              ; preds = %753, %759, %767, %773
  %779 = phi i16 [ %756, %753 ], [ %764, %759 ], [ %772, %767 ], [ %777, %773 ]
  %780 = sext i16 %779 to i64
  %781 = mul nsw i64 %780, %719
  %782 = add nsw i64 %752, 2048
  %783 = add nsw i64 %782, %781
  %784 = lshr i64 %783, 12
  %785 = trunc i64 %784 to i16
  store i16 %785, i16* %683, align 2
  %786 = add nsw i64 %716, 2048
  %787 = sub nsw i64 %786, %751
  %788 = lshr i64 %787, 12
  %789 = trunc i64 %788 to i16
  store i16 %789, i16* %717, align 2
  %790 = add nuw nsw i64 %676, 1
  %791 = icmp eq i64 %790, 4
  br i1 %791, label %672, label %675

792:                                              ; preds = %792, %1400
  %793 = phi i32 [ %893, %792 ], [ 0, %1400 ]
  %794 = shl i32 %793, 3
  %795 = add nuw nsw i32 %794, 32
  %796 = and i32 %793, 1
  %797 = icmp ne i32 %796, 0
  %798 = add nuw nsw i32 %794, 39
  %799 = select i1 %797, i32 %798, i32 %795
  %800 = select i1 %797, i32 %795, i32 %798
  %801 = sext i32 %799 to i64
  %802 = getelementptr inbounds i16, i16* %3, i64 %801
  %803 = load i16, i16* %802, align 2
  %804 = sext i16 %803 to i32
  %805 = sext i32 %800 to i64
  %806 = getelementptr inbounds i16, i16* %3, i64 %805
  %807 = load i16, i16* %806, align 2
  %808 = sext i16 %807 to i32
  %809 = add nsw i32 %808, %804
  %810 = sub nsw i32 %804, %808
  %811 = icmp slt i32 %809, 32767
  %812 = select i1 %811, i32 %809, i32 32767
  %813 = icmp sgt i32 %812, -32768
  %814 = select i1 %813, i32 %812, i32 -32768
  %815 = trunc i32 %814 to i16
  store i16 %815, i16* %802, align 2
  %816 = icmp slt i32 %810, 32767
  %817 = select i1 %816, i32 %810, i32 32767
  %818 = icmp sgt i32 %817, -32768
  %819 = select i1 %818, i32 %817, i32 -32768
  %820 = trunc i32 %819 to i16
  store i16 %820, i16* %806, align 2
  %821 = add nuw nsw i32 %794, 33
  %822 = add nsw i32 %794, 38
  %823 = select i1 %797, i32 %822, i32 %821
  %824 = select i1 %797, i32 %821, i32 %822
  %825 = sext i32 %823 to i64
  %826 = getelementptr inbounds i16, i16* %3, i64 %825
  %827 = load i16, i16* %826, align 2
  %828 = sext i16 %827 to i32
  %829 = sext i32 %824 to i64
  %830 = getelementptr inbounds i16, i16* %3, i64 %829
  %831 = load i16, i16* %830, align 2
  %832 = sext i16 %831 to i32
  %833 = add nsw i32 %832, %828
  %834 = sub nsw i32 %828, %832
  %835 = icmp slt i32 %833, 32767
  %836 = select i1 %835, i32 %833, i32 32767
  %837 = icmp sgt i32 %836, -32768
  %838 = select i1 %837, i32 %836, i32 -32768
  %839 = trunc i32 %838 to i16
  store i16 %839, i16* %826, align 2
  %840 = icmp slt i32 %834, 32767
  %841 = select i1 %840, i32 %834, i32 32767
  %842 = icmp sgt i32 %841, -32768
  %843 = select i1 %842, i32 %841, i32 -32768
  %844 = trunc i32 %843 to i16
  store i16 %844, i16* %830, align 2
  %845 = add nuw nsw i32 %794, 34
  %846 = add nsw i32 %794, 37
  %847 = select i1 %797, i32 %846, i32 %845
  %848 = select i1 %797, i32 %845, i32 %846
  %849 = sext i32 %847 to i64
  %850 = getelementptr inbounds i16, i16* %3, i64 %849
  %851 = load i16, i16* %850, align 2
  %852 = sext i16 %851 to i32
  %853 = sext i32 %848 to i64
  %854 = getelementptr inbounds i16, i16* %3, i64 %853
  %855 = load i16, i16* %854, align 2
  %856 = sext i16 %855 to i32
  %857 = add nsw i32 %856, %852
  %858 = sub nsw i32 %852, %856
  %859 = icmp slt i32 %857, 32767
  %860 = select i1 %859, i32 %857, i32 32767
  %861 = icmp sgt i32 %860, -32768
  %862 = select i1 %861, i32 %860, i32 -32768
  %863 = trunc i32 %862 to i16
  store i16 %863, i16* %850, align 2
  %864 = icmp slt i32 %858, 32767
  %865 = select i1 %864, i32 %858, i32 32767
  %866 = icmp sgt i32 %865, -32768
  %867 = select i1 %866, i32 %865, i32 -32768
  %868 = trunc i32 %867 to i16
  store i16 %868, i16* %854, align 2
  %869 = add nuw nsw i32 %794, 35
  %870 = add nsw i32 %794, 36
  %871 = select i1 %797, i32 %870, i32 %869
  %872 = select i1 %797, i32 %869, i32 %870
  %873 = sext i32 %871 to i64
  %874 = getelementptr inbounds i16, i16* %3, i64 %873
  %875 = load i16, i16* %874, align 2
  %876 = sext i16 %875 to i32
  %877 = sext i32 %872 to i64
  %878 = getelementptr inbounds i16, i16* %3, i64 %877
  %879 = load i16, i16* %878, align 2
  %880 = sext i16 %879 to i32
  %881 = add nsw i32 %880, %876
  %882 = sub nsw i32 %876, %880
  %883 = icmp slt i32 %881, 32767
  %884 = select i1 %883, i32 %881, i32 32767
  %885 = icmp sgt i32 %884, -32768
  %886 = select i1 %885, i32 %884, i32 -32768
  %887 = trunc i32 %886 to i16
  store i16 %887, i16* %874, align 2
  %888 = icmp slt i32 %882, 32767
  %889 = select i1 %888, i32 %882, i32 32767
  %890 = icmp sgt i32 %889, -32768
  %891 = select i1 %890, i32 %889, i32 -32768
  %892 = trunc i32 %891 to i16
  store i16 %892, i16* %878, align 2
  %893 = add nuw nsw i32 %793, 1
  %894 = icmp eq i32 %893, 4
  br i1 %894, label %895, label %792

895:                                              ; preds = %792
  %896 = bitcast i8* %0 to <8 x i16>*
  %897 = load <8 x i16>, <8 x i16>* %896, align 2
  %898 = shufflevector <8 x i16> %897, <8 x i16> undef, <8 x i32> <i32 7, i32 6, i32 5, i32 4, i32 3, i32 2, i32 1, i32 0>
  %899 = sext <8 x i16> %898 to <8 x i32>
  %900 = shufflevector <8 x i32> %899, <8 x i32> undef, <8 x i32> <i32 7, i32 6, i32 5, i32 4, i32 3, i32 2, i32 1, i32 0>
  %901 = add nsw <8 x i32> %900, %899
  %902 = sub nsw <8 x i32> %899, %900
  %903 = shufflevector <8 x i32> %901, <8 x i32> %902, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 12, i32 13, i32 14, i32 15>
  %904 = icmp slt <8 x i32> %903, <i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767>
  %905 = select <8 x i1> %904, <8 x i32> %903, <8 x i32> <i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767>
  %906 = icmp sgt <8 x i32> %905, <i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768>
  %907 = select <8 x i1> %906, <8 x i32> %905, <8 x i32> <i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768>
  %908 = trunc <8 x i32> %907 to <8 x i16>
  %909 = bitcast i8* %0 to <8 x i16>*
  store <8 x i16> %908, <8 x i16>* %909, align 2
  %910 = load i16, i16* %1758, align 2
  %911 = sext i16 %910 to i64
  %912 = mul nsw i64 %911, 2896
  %913 = load i16, i16* %1754, align 2
  %914 = sext i16 %913 to i64
  %915 = mul nsw i64 %914, 2896
  %916 = add nsw i64 %912, 2048
  %917 = add nsw i64 %916, %915
  %918 = lshr i64 %917, 12
  %919 = trunc i64 %918 to i16
  store i16 %919, i16* %1758, align 2
  %920 = sub nsw i64 %916, %915
  %921 = lshr i64 %920, 12
  %922 = trunc i64 %921 to i16
  store i16 %922, i16* %1754, align 2
  %923 = load i16, i16* %1756, align 2
  %924 = sext i16 %923 to i64
  %925 = mul nsw i64 %924, 2896
  %926 = load i16, i16* %1752, align 2
  %927 = sext i16 %926 to i64
  %928 = mul nsw i64 %927, 2896
  %929 = add nsw i64 %925, 2048
  %930 = add nsw i64 %929, %928
  %931 = lshr i64 %930, 12
  %932 = trunc i64 %931 to i16
  store i16 %932, i16* %1756, align 2
  %933 = sub nsw i64 %929, %928
  %934 = lshr i64 %933, 12
  %935 = trunc i64 %934 to i16
  store i16 %935, i16* %1752, align 2
  %936 = load i16, i16* %425, align 2
  %937 = sext i16 %936 to i32
  %938 = load i16, i16* %437, align 2
  %939 = sext i16 %938 to i32
  %940 = add nsw i32 %939, %937
  %941 = sub nsw i32 %937, %939
  %942 = icmp slt i32 %940, 32767
  %943 = select i1 %942, i32 %940, i32 32767
  %944 = icmp sgt i32 %943, -32768
  %945 = select i1 %944, i32 %943, i32 -32768
  %946 = trunc i32 %945 to i16
  store i16 %946, i16* %425, align 2
  %947 = icmp slt i32 %941, 32767
  %948 = select i1 %947, i32 %941, i32 32767
  %949 = icmp sgt i32 %948, -32768
  %950 = select i1 %949, i32 %948, i32 -32768
  %951 = trunc i32 %950 to i16
  store i16 %951, i16* %437, align 2
  %952 = load i16, i16* %427, align 2
  %953 = sext i16 %952 to i32
  %954 = load i16, i16* %439, align 2
  %955 = sext i16 %954 to i32
  %956 = add nsw i32 %955, %953
  %957 = sub nsw i32 %953, %955
  %958 = icmp slt i32 %956, 32767
  %959 = select i1 %958, i32 %956, i32 32767
  %960 = icmp sgt i32 %959, -32768
  %961 = select i1 %960, i32 %959, i32 -32768
  %962 = trunc i32 %961 to i16
  store i16 %962, i16* %427, align 2
  %963 = icmp slt i32 %957, 32767
  %964 = select i1 %963, i32 %957, i32 32767
  %965 = icmp sgt i32 %964, -32768
  %966 = select i1 %965, i32 %964, i32 -32768
  %967 = trunc i32 %966 to i16
  store i16 %967, i16* %439, align 2
  %968 = load i16, i16* %431, align 2
  %969 = sext i16 %968 to i32
  %970 = load i16, i16* %435, align 2
  %971 = sext i16 %970 to i32
  %972 = add nsw i32 %971, %969
  %973 = sub nsw i32 %969, %971
  %974 = icmp slt i32 %972, 32767
  %975 = select i1 %974, i32 %972, i32 32767
  %976 = icmp sgt i32 %975, -32768
  %977 = select i1 %976, i32 %975, i32 -32768
  %978 = trunc i32 %977 to i16
  store i16 %978, i16* %431, align 2
  %979 = icmp slt i32 %973, 32767
  %980 = select i1 %979, i32 %973, i32 32767
  %981 = icmp sgt i32 %980, -32768
  %982 = select i1 %981, i32 %980, i32 -32768
  %983 = trunc i32 %982 to i16
  store i16 %983, i16* %435, align 2
  %984 = load i16, i16* %429, align 2
  %985 = sext i16 %984 to i32
  %986 = load i16, i16* %433, align 2
  %987 = sext i16 %986 to i32
  %988 = add nsw i32 %987, %985
  %989 = sub nsw i32 %985, %987
  %990 = icmp slt i32 %988, 32767
  %991 = select i1 %990, i32 %988, i32 32767
  %992 = icmp sgt i32 %991, -32768
  %993 = select i1 %992, i32 %991, i32 -32768
  %994 = trunc i32 %993 to i16
  store i16 %994, i16* %429, align 2
  %995 = icmp slt i32 %989, 32767
  %996 = select i1 %995, i32 %989, i32 32767
  %997 = icmp sgt i32 %996, -32768
  %998 = select i1 %997, i32 %996, i32 -32768
  %999 = trunc i32 %998 to i16
  store i16 %999, i16* %433, align 2
  %1000 = bitcast i8* %454 to <8 x i16>*
  %1001 = load <8 x i16>, <8 x i16>* %1000, align 2
  %1002 = shufflevector <8 x i16> %1001, <8 x i16> undef, <8 x i32> <i32 7, i32 6, i32 5, i32 4, i32 3, i32 2, i32 1, i32 0>
  %1003 = sext <8 x i16> %1002 to <8 x i32>
  %1004 = shufflevector <8 x i32> %1003, <8 x i32> undef, <8 x i32> <i32 7, i32 6, i32 5, i32 4, i32 3, i32 2, i32 1, i32 0>
  %1005 = sub nsw <8 x i32> %1003, %1004
  %1006 = add nsw <8 x i32> %1004, %1003
  %1007 = shufflevector <8 x i32> %1005, <8 x i32> %1006, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 12, i32 13, i32 14, i32 15>
  %1008 = icmp slt <8 x i32> %1007, <i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767>
  %1009 = select <8 x i1> %1008, <8 x i32> %1007, <8 x i32> <i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767>
  %1010 = icmp sgt <8 x i32> %1009, <i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768>
  %1011 = select <8 x i1> %1010, <8 x i32> %1009, <8 x i32> <i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768>
  %1012 = trunc <8 x i32> %1011 to <8 x i16>
  %1013 = bitcast i8* %454 to <8 x i16>*
  store <8 x i16> %1012, <8 x i16>* %1013, align 2
  br label %1014

1014:                                             ; preds = %1083, %895
  %1015 = phi i64 [ 0, %895 ], [ %1095, %1083 ]
  %1016 = sub nuw nsw i64 59, %1015
  %1017 = add nuw nsw i64 %1015, 36
  %1018 = icmp ult i64 %1015, 4
  %1019 = select i1 %1018, i32 48, i32 112
  %1020 = getelementptr inbounds i16, i16* %3, i64 %1016
  %1021 = load i16, i16* %1020, align 2
  %1022 = sext i16 %1021 to i64
  br i1 %1018, label %1023, label %1027

1023:                                             ; preds = %1014
  %1024 = zext i32 %1019 to i64
  %1025 = getelementptr inbounds [65 x i16], [65 x i16]* @_ZN7libgav13dsp12_GLOBAL__N_17kCos128E, i64 0, i64 %1024
  %1026 = load i16, i16* %1025, align 16
  br label %1033

1027:                                             ; preds = %1014
  %1028 = sub nuw nsw i32 128, %1019
  %1029 = zext i32 %1028 to i64
  %1030 = getelementptr inbounds [65 x i16], [65 x i16]* @_ZN7libgav13dsp12_GLOBAL__N_17kCos128E, i64 0, i64 %1029
  %1031 = load i16, i16* %1030, align 16
  %1032 = sub i16 0, %1031
  br label %1033

1033:                                             ; preds = %1027, %1023
  %1034 = phi i16 [ %1026, %1023 ], [ %1032, %1027 ]
  %1035 = sext i16 %1034 to i64
  %1036 = mul nsw i64 %1035, %1022
  %1037 = getelementptr inbounds i16, i16* %3, i64 %1017
  %1038 = load i16, i16* %1037, align 2
  %1039 = sext i16 %1038 to i64
  %1040 = add nuw nsw i32 %1019, 192
  %1041 = and i32 %1040, 240
  %1042 = icmp ult i32 %1041, 65
  br i1 %1042, label %1047, label %1043

1043:                                             ; preds = %1033
  %1044 = icmp ult i32 %1041, 129
  br i1 %1044, label %1051, label %1045

1045:                                             ; preds = %1043
  %1046 = icmp ult i32 %1041, 193
  br i1 %1046, label %1057, label %1063

1047:                                             ; preds = %1033
  %1048 = zext i32 %1041 to i64
  %1049 = getelementptr inbounds [65 x i16], [65 x i16]* @_ZN7libgav13dsp12_GLOBAL__N_17kCos128E, i64 0, i64 %1048
  %1050 = load i16, i16* %1049, align 16
  br label %1068

1051:                                             ; preds = %1043
  %1052 = sub nuw nsw i32 128, %1041
  %1053 = sext i32 %1052 to i64
  %1054 = getelementptr inbounds [65 x i16], [65 x i16]* @_ZN7libgav13dsp12_GLOBAL__N_17kCos128E, i64 0, i64 %1053
  %1055 = load i16, i16* %1054, align 16
  %1056 = sub i16 0, %1055
  br label %1068

1057:                                             ; preds = %1045
  %1058 = add nsw i32 %1041, -128
  %1059 = sext i32 %1058 to i64
  %1060 = getelementptr inbounds [65 x i16], [65 x i16]* @_ZN7libgav13dsp12_GLOBAL__N_17kCos128E, i64 0, i64 %1059
  %1061 = load i16, i16* %1060, align 16
  %1062 = sub i16 0, %1061
  br label %1068

1063:                                             ; preds = %1045
  %1064 = sub nuw nsw i32 256, %1041
  %1065 = zext i32 %1064 to i64
  %1066 = getelementptr inbounds [65 x i16], [65 x i16]* @_ZN7libgav13dsp12_GLOBAL__N_17kCos128E, i64 0, i64 %1065
  %1067 = load i16, i16* %1066, align 16
  br label %1068

1068:                                             ; preds = %1063, %1057, %1051, %1047
  %1069 = phi i16 [ %1050, %1047 ], [ %1056, %1051 ], [ %1062, %1057 ], [ %1067, %1063 ]
  %1070 = sext i16 %1069 to i64
  %1071 = mul nsw i64 %1070, %1039
  %1072 = mul nsw i64 %1070, %1022
  br i1 %1018, label %1073, label %1077

1073:                                             ; preds = %1068
  %1074 = zext i32 %1019 to i64
  %1075 = getelementptr inbounds [65 x i16], [65 x i16]* @_ZN7libgav13dsp12_GLOBAL__N_17kCos128E, i64 0, i64 %1074
  %1076 = load i16, i16* %1075, align 16
  br label %1083

1077:                                             ; preds = %1068
  %1078 = sub nuw nsw i32 128, %1019
  %1079 = zext i32 %1078 to i64
  %1080 = getelementptr inbounds [65 x i16], [65 x i16]* @_ZN7libgav13dsp12_GLOBAL__N_17kCos128E, i64 0, i64 %1079
  %1081 = load i16, i16* %1080, align 16
  %1082 = sub i16 0, %1081
  br label %1083

1083:                                             ; preds = %1073, %1077
  %1084 = phi i16 [ %1076, %1073 ], [ %1082, %1077 ]
  %1085 = sext i16 %1084 to i64
  %1086 = mul nsw i64 %1085, %1039
  %1087 = add nsw i64 %1072, 2048
  %1088 = add nsw i64 %1087, %1086
  %1089 = lshr i64 %1088, 12
  %1090 = trunc i64 %1089 to i16
  store i16 %1090, i16* %1020, align 2
  %1091 = add nsw i64 %1036, 2048
  %1092 = sub nsw i64 %1091, %1071
  %1093 = lshr i64 %1092, 12
  %1094 = trunc i64 %1093 to i16
  store i16 %1094, i16* %1037, align 2
  %1095 = add nuw nsw i64 %1015, 1
  %1096 = icmp eq i64 %1095, 8
  br i1 %1096, label %1097, label %1014

1097:                                             ; preds = %1083
  %1098 = bitcast i8* %0 to <8 x i16>*
  %1099 = load <8 x i16>, <8 x i16>* %1098, align 2
  %1100 = sext <8 x i16> %1099 to <8 x i32>
  %1101 = bitcast i8* %1748 to <8 x i16>*
  %1102 = load <8 x i16>, <8 x i16>* %1101, align 2
  %1103 = shufflevector <8 x i16> %1102, <8 x i16> undef, <8 x i32> <i32 7, i32 6, i32 5, i32 4, i32 3, i32 2, i32 1, i32 0>
  %1104 = sext <8 x i16> %1103 to <8 x i32>
  %1105 = add nsw <8 x i32> %1104, %1100
  %1106 = sub nsw <8 x i32> %1100, %1104
  %1107 = shufflevector <8 x i32> %1106, <8 x i32> undef, <8 x i32> <i32 7, i32 6, i32 5, i32 4, i32 3, i32 2, i32 1, i32 0>
  %1108 = icmp slt <8 x i32> %1105, <i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767>
  %1109 = select <8 x i1> %1108, <8 x i32> %1105, <8 x i32> <i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767>
  %1110 = icmp sgt <8 x i32> %1109, <i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768>
  %1111 = select <8 x i1> %1110, <8 x i32> %1109, <8 x i32> <i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768>
  %1112 = trunc <8 x i32> %1111 to <8 x i16>
  %1113 = bitcast i8* %0 to <8 x i16>*
  store <8 x i16> %1112, <8 x i16>* %1113, align 2
  %1114 = icmp slt <8 x i32> %1107, <i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767>
  %1115 = select <8 x i1> %1114, <8 x i32> %1107, <8 x i32> <i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767>
  %1116 = icmp sgt <8 x i32> %1115, <i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768>
  %1117 = select <8 x i1> %1116, <8 x i32> %1115, <8 x i32> <i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768>
  %1118 = trunc <8 x i32> %1117 to <8 x i16>
  %1119 = bitcast i8* %1748 to <8 x i16>*
  store <8 x i16> %1118, <8 x i16>* %1119, align 2
  %1120 = load i16, i16* %459, align 2
  %1121 = sext i16 %1120 to i64
  %1122 = mul nsw i64 %1121, 2896
  %1123 = load i16, i16* %433, align 2
  %1124 = sext i16 %1123 to i64
  %1125 = mul nsw i64 %1124, 2896
  %1126 = add nsw i64 %1122, 2048
  %1127 = add nsw i64 %1126, %1125
  %1128 = lshr i64 %1127, 12
  %1129 = trunc i64 %1128 to i16
  store i16 %1129, i16* %459, align 2
  %1130 = sub nsw i64 %1126, %1125
  %1131 = lshr i64 %1130, 12
  %1132 = trunc i64 %1131 to i16
  store i16 %1132, i16* %433, align 2
  %1133 = load i16, i16* %461, align 2
  %1134 = sext i16 %1133 to i64
  %1135 = mul nsw i64 %1134, 2896
  %1136 = load i16, i16* %435, align 2
  %1137 = sext i16 %1136 to i64
  %1138 = mul nsw i64 %1137, 2896
  %1139 = add nsw i64 %1135, 2048
  %1140 = add nsw i64 %1139, %1138
  %1141 = lshr i64 %1140, 12
  %1142 = trunc i64 %1141 to i16
  store i16 %1142, i16* %461, align 2
  %1143 = sub nsw i64 %1139, %1138
  %1144 = lshr i64 %1143, 12
  %1145 = trunc i64 %1144 to i16
  store i16 %1145, i16* %435, align 2
  %1146 = load i16, i16* %457, align 2
  %1147 = sext i16 %1146 to i64
  %1148 = mul nsw i64 %1147, 2896
  %1149 = load i16, i16* %439, align 2
  %1150 = sext i16 %1149 to i64
  %1151 = mul nsw i64 %1150, 2896
  %1152 = add nsw i64 %1148, 2048
  %1153 = add nsw i64 %1152, %1151
  %1154 = lshr i64 %1153, 12
  %1155 = trunc i64 %1154 to i16
  store i16 %1155, i16* %457, align 2
  %1156 = sub nsw i64 %1152, %1151
  %1157 = lshr i64 %1156, 12
  %1158 = trunc i64 %1157 to i16
  store i16 %1158, i16* %439, align 2
  %1159 = load i16, i16* %455, align 2
  %1160 = sext i16 %1159 to i64
  %1161 = mul nsw i64 %1160, 2896
  %1162 = load i16, i16* %437, align 2
  %1163 = sext i16 %1162 to i64
  %1164 = mul nsw i64 %1163, 2896
  %1165 = add nsw i64 %1161, 2048
  %1166 = add nsw i64 %1165, %1164
  %1167 = lshr i64 %1166, 12
  %1168 = trunc i64 %1167 to i16
  store i16 %1168, i16* %455, align 2
  %1169 = sub nsw i64 %1165, %1164
  %1170 = lshr i64 %1169, 12
  %1171 = trunc i64 %1170 to i16
  store i16 %1171, i16* %437, align 2
  br label %1172

1172:                                             ; preds = %1172, %1097
  %1173 = phi i64 [ 0, %1097 ], [ %1214, %1172 ]
  %1174 = add nuw nsw i64 %1173, 32
  %1175 = sub nuw nsw i64 47, %1173
  %1176 = getelementptr inbounds i16, i16* %3, i64 %1174
  %1177 = load i16, i16* %1176, align 2
  %1178 = sext i16 %1177 to i32
  %1179 = getelementptr inbounds i16, i16* %3, i64 %1175
  %1180 = load i16, i16* %1179, align 2
  %1181 = sext i16 %1180 to i32
  %1182 = add nsw i32 %1181, %1178
  %1183 = sub nsw i32 %1178, %1181
  %1184 = icmp slt i32 %1182, 32767
  %1185 = select i1 %1184, i32 %1182, i32 32767
  %1186 = icmp sgt i32 %1185, -32768
  %1187 = select i1 %1186, i32 %1185, i32 -32768
  %1188 = trunc i32 %1187 to i16
  store i16 %1188, i16* %1176, align 2
  %1189 = icmp slt i32 %1183, 32767
  %1190 = select i1 %1189, i32 %1183, i32 32767
  %1191 = icmp sgt i32 %1190, -32768
  %1192 = select i1 %1191, i32 %1190, i32 -32768
  %1193 = trunc i32 %1192 to i16
  store i16 %1193, i16* %1179, align 2
  %1194 = add nuw nsw i64 %1173, 48
  %1195 = sub nuw nsw i64 63, %1173
  %1196 = getelementptr inbounds i16, i16* %3, i64 %1195
  %1197 = load i16, i16* %1196, align 2
  %1198 = sext i16 %1197 to i32
  %1199 = getelementptr inbounds i16, i16* %3, i64 %1194
  %1200 = load i16, i16* %1199, align 2
  %1201 = sext i16 %1200 to i32
  %1202 = add nsw i32 %1201, %1198
  %1203 = sub nsw i32 %1198, %1201
  %1204 = icmp slt i32 %1202, 32767
  %1205 = select i1 %1204, i32 %1202, i32 32767
  %1206 = icmp sgt i32 %1205, -32768
  %1207 = select i1 %1206, i32 %1205, i32 -32768
  %1208 = trunc i32 %1207 to i16
  store i16 %1208, i16* %1196, align 2
  %1209 = icmp slt i32 %1203, 32767
  %1210 = select i1 %1209, i32 %1203, i32 32767
  %1211 = icmp sgt i32 %1210, -32768
  %1212 = select i1 %1211, i32 %1210, i32 -32768
  %1213 = trunc i32 %1212 to i16
  store i16 %1213, i16* %1199, align 2
  %1214 = add nuw nsw i64 %1173, 1
  %1215 = icmp eq i64 %1214, 8
  br i1 %1215, label %1216, label %1172

1216:                                             ; preds = %1172, %1216
  %1217 = phi i64 [ %1237, %1216 ], [ 0, %1172 ]
  %1218 = sub nuw nsw i64 31, %1217
  %1219 = getelementptr inbounds i16, i16* %3, i64 %1217
  %1220 = load i16, i16* %1219, align 2
  %1221 = sext i16 %1220 to i32
  %1222 = getelementptr inbounds i16, i16* %3, i64 %1218
  %1223 = load i16, i16* %1222, align 2
  %1224 = sext i16 %1223 to i32
  %1225 = add nsw i32 %1224, %1221
  %1226 = sub nsw i32 %1221, %1224
  %1227 = icmp slt i32 %1225, 32767
  %1228 = select i1 %1227, i32 %1225, i32 32767
  %1229 = icmp sgt i32 %1228, -32768
  %1230 = select i1 %1229, i32 %1228, i32 -32768
  %1231 = trunc i32 %1230 to i16
  store i16 %1231, i16* %1219, align 2
  %1232 = icmp slt i32 %1226, 32767
  %1233 = select i1 %1232, i32 %1226, i32 32767
  %1234 = icmp sgt i32 %1233, -32768
  %1235 = select i1 %1234, i32 %1233, i32 -32768
  %1236 = trunc i32 %1235 to i16
  store i16 %1236, i16* %1222, align 2
  %1237 = add nuw nsw i64 %1217, 1
  %1238 = icmp eq i64 %1237, 16
  br i1 %1238, label %1239, label %1216

1239:                                             ; preds = %1216
  %1240 = getelementptr inbounds i8, i8* %0, i64 110
  %1241 = bitcast i8* %1240 to i16*
  %1242 = load i16, i16* %1241, align 2
  %1243 = sext i16 %1242 to i64
  %1244 = mul nsw i64 %1243, 2896
  %1245 = getelementptr inbounds i8, i8* %0, i64 80
  %1246 = bitcast i8* %1245 to i16*
  %1247 = load i16, i16* %1246, align 2
  %1248 = sext i16 %1247 to i64
  %1249 = mul nsw i64 %1248, 2896
  %1250 = add nsw i64 %1244, 2048
  %1251 = add nsw i64 %1250, %1249
  %1252 = lshr i64 %1251, 12
  %1253 = trunc i64 %1252 to i16
  store i16 %1253, i16* %1241, align 2
  %1254 = sub nsw i64 %1250, %1249
  %1255 = lshr i64 %1254, 12
  %1256 = trunc i64 %1255 to i16
  store i16 %1256, i16* %1246, align 2
  %1257 = getelementptr inbounds i8, i8* %0, i64 108
  %1258 = bitcast i8* %1257 to i16*
  %1259 = load i16, i16* %1258, align 2
  %1260 = sext i16 %1259 to i64
  %1261 = mul nsw i64 %1260, 2896
  %1262 = getelementptr inbounds i8, i8* %0, i64 82
  %1263 = bitcast i8* %1262 to i16*
  %1264 = load i16, i16* %1263, align 2
  %1265 = sext i16 %1264 to i64
  %1266 = mul nsw i64 %1265, 2896
  %1267 = add nsw i64 %1261, 2048
  %1268 = add nsw i64 %1267, %1266
  %1269 = lshr i64 %1268, 12
  %1270 = trunc i64 %1269 to i16
  store i16 %1270, i16* %1258, align 2
  %1271 = sub nsw i64 %1267, %1266
  %1272 = lshr i64 %1271, 12
  %1273 = trunc i64 %1272 to i16
  store i16 %1273, i16* %1263, align 2
  %1274 = getelementptr inbounds i8, i8* %0, i64 106
  %1275 = bitcast i8* %1274 to i16*
  %1276 = load i16, i16* %1275, align 2
  %1277 = sext i16 %1276 to i64
  %1278 = mul nsw i64 %1277, 2896
  %1279 = getelementptr inbounds i8, i8* %0, i64 84
  %1280 = bitcast i8* %1279 to i16*
  %1281 = load i16, i16* %1280, align 2
  %1282 = sext i16 %1281 to i64
  %1283 = mul nsw i64 %1282, 2896
  %1284 = add nsw i64 %1278, 2048
  %1285 = add nsw i64 %1284, %1283
  %1286 = lshr i64 %1285, 12
  %1287 = trunc i64 %1286 to i16
  store i16 %1287, i16* %1275, align 2
  %1288 = sub nsw i64 %1284, %1283
  %1289 = lshr i64 %1288, 12
  %1290 = trunc i64 %1289 to i16
  store i16 %1290, i16* %1280, align 2
  %1291 = getelementptr inbounds i8, i8* %0, i64 104
  %1292 = bitcast i8* %1291 to i16*
  %1293 = load i16, i16* %1292, align 2
  %1294 = sext i16 %1293 to i64
  %1295 = mul nsw i64 %1294, 2896
  %1296 = getelementptr inbounds i8, i8* %0, i64 86
  %1297 = bitcast i8* %1296 to i16*
  %1298 = load i16, i16* %1297, align 2
  %1299 = sext i16 %1298 to i64
  %1300 = mul nsw i64 %1299, 2896
  %1301 = add nsw i64 %1295, 2048
  %1302 = add nsw i64 %1301, %1300
  %1303 = lshr i64 %1302, 12
  %1304 = trunc i64 %1303 to i16
  store i16 %1304, i16* %1292, align 2
  %1305 = sub nsw i64 %1301, %1300
  %1306 = lshr i64 %1305, 12
  %1307 = trunc i64 %1306 to i16
  store i16 %1307, i16* %1297, align 2
  %1308 = getelementptr inbounds i8, i8* %0, i64 102
  %1309 = bitcast i8* %1308 to i16*
  %1310 = load i16, i16* %1309, align 2
  %1311 = sext i16 %1310 to i64
  %1312 = mul nsw i64 %1311, 2896
  %1313 = getelementptr inbounds i8, i8* %0, i64 88
  %1314 = bitcast i8* %1313 to i16*
  %1315 = load i16, i16* %1314, align 2
  %1316 = sext i16 %1315 to i64
  %1317 = mul nsw i64 %1316, 2896
  %1318 = add nsw i64 %1312, 2048
  %1319 = add nsw i64 %1318, %1317
  %1320 = lshr i64 %1319, 12
  %1321 = trunc i64 %1320 to i16
  store i16 %1321, i16* %1309, align 2
  %1322 = sub nsw i64 %1318, %1317
  %1323 = lshr i64 %1322, 12
  %1324 = trunc i64 %1323 to i16
  store i16 %1324, i16* %1314, align 2
  %1325 = getelementptr inbounds i8, i8* %0, i64 100
  %1326 = bitcast i8* %1325 to i16*
  %1327 = load i16, i16* %1326, align 2
  %1328 = sext i16 %1327 to i64
  %1329 = mul nsw i64 %1328, 2896
  %1330 = getelementptr inbounds i8, i8* %0, i64 90
  %1331 = bitcast i8* %1330 to i16*
  %1332 = load i16, i16* %1331, align 2
  %1333 = sext i16 %1332 to i64
  %1334 = mul nsw i64 %1333, 2896
  %1335 = add nsw i64 %1329, 2048
  %1336 = add nsw i64 %1335, %1334
  %1337 = lshr i64 %1336, 12
  %1338 = trunc i64 %1337 to i16
  store i16 %1338, i16* %1326, align 2
  %1339 = sub nsw i64 %1335, %1334
  %1340 = lshr i64 %1339, 12
  %1341 = trunc i64 %1340 to i16
  store i16 %1341, i16* %1331, align 2
  %1342 = getelementptr inbounds i8, i8* %0, i64 98
  %1343 = bitcast i8* %1342 to i16*
  %1344 = load i16, i16* %1343, align 2
  %1345 = sext i16 %1344 to i64
  %1346 = mul nsw i64 %1345, 2896
  %1347 = getelementptr inbounds i8, i8* %0, i64 92
  %1348 = bitcast i8* %1347 to i16*
  %1349 = load i16, i16* %1348, align 2
  %1350 = sext i16 %1349 to i64
  %1351 = mul nsw i64 %1350, 2896
  %1352 = add nsw i64 %1346, 2048
  %1353 = add nsw i64 %1352, %1351
  %1354 = lshr i64 %1353, 12
  %1355 = trunc i64 %1354 to i16
  store i16 %1355, i16* %1343, align 2
  %1356 = sub nsw i64 %1352, %1351
  %1357 = lshr i64 %1356, 12
  %1358 = trunc i64 %1357 to i16
  store i16 %1358, i16* %1348, align 2
  %1359 = getelementptr inbounds i8, i8* %0, i64 96
  %1360 = bitcast i8* %1359 to i16*
  %1361 = load i16, i16* %1360, align 2
  %1362 = sext i16 %1361 to i64
  %1363 = mul nsw i64 %1362, 2896
  %1364 = getelementptr inbounds i8, i8* %0, i64 94
  %1365 = bitcast i8* %1364 to i16*
  %1366 = load i16, i16* %1365, align 2
  %1367 = sext i16 %1366 to i64
  %1368 = mul nsw i64 %1367, 2896
  %1369 = add nsw i64 %1363, 2048
  %1370 = add nsw i64 %1369, %1368
  %1371 = lshr i64 %1370, 12
  %1372 = trunc i64 %1371 to i16
  store i16 %1372, i16* %1360, align 2
  %1373 = sub nsw i64 %1369, %1368
  %1374 = lshr i64 %1373, 12
  %1375 = trunc i64 %1374 to i16
  store i16 %1375, i16* %1365, align 2
  br label %1377

1376:                                             ; preds = %1377
  call void @llvm.lifetime.end.p0i8(i64 128, i8* nonnull %4) #4
  ret void

1377:                                             ; preds = %1377, %1239
  %1378 = phi i64 [ 0, %1239 ], [ %1398, %1377 ]
  %1379 = sub nuw nsw i64 63, %1378
  %1380 = getelementptr inbounds i16, i16* %3, i64 %1378
  %1381 = load i16, i16* %1380, align 2
  %1382 = sext i16 %1381 to i32
  %1383 = getelementptr inbounds i16, i16* %3, i64 %1379
  %1384 = load i16, i16* %1383, align 2
  %1385 = sext i16 %1384 to i32
  %1386 = add nsw i32 %1385, %1382
  %1387 = sub nsw i32 %1382, %1385
  %1388 = icmp slt i32 %1386, 32767
  %1389 = select i1 %1388, i32 %1386, i32 32767
  %1390 = icmp sgt i32 %1389, -32768
  %1391 = select i1 %1390, i32 %1389, i32 -32768
  %1392 = trunc i32 %1391 to i16
  store i16 %1392, i16* %1380, align 2
  %1393 = icmp slt i32 %1387, 32767
  %1394 = select i1 %1393, i32 %1387, i32 32767
  %1395 = icmp sgt i32 %1394, -32768
  %1396 = select i1 %1395, i32 %1394, i32 -32768
  %1397 = trunc i32 %1396 to i16
  store i16 %1397, i16* %1383, align 2
  %1398 = add nuw nsw i64 %1378, 1
  %1399 = icmp eq i64 %1398, 32
  br i1 %1399, label %1376, label %1377

1400:                                             ; preds = %672
  %1401 = load i16, i16* %3, align 2
  %1402 = sext i16 %1401 to i32
  %1403 = load i16, i16* %1551, align 2
  %1404 = sext i16 %1403 to i32
  %1405 = add nsw i32 %1404, %1402
  %1406 = sub nsw i32 %1402, %1404
  %1407 = icmp slt i32 %1405, 32767
  %1408 = select i1 %1407, i32 %1405, i32 32767
  %1409 = icmp sgt i32 %1408, -32768
  %1410 = select i1 %1409, i32 %1408, i32 -32768
  %1411 = trunc i32 %1410 to i16
  store i16 %1411, i16* %3, align 2
  %1412 = icmp slt i32 %1406, 32767
  %1413 = select i1 %1412, i32 %1406, i32 32767
  %1414 = icmp sgt i32 %1413, -32768
  %1415 = select i1 %1414, i32 %1413, i32 -32768
  %1416 = trunc i32 %1415 to i16
  store i16 %1416, i16* %1551, align 2
  %1417 = load i16, i16* %1533, align 2
  %1418 = sext i16 %1417 to i32
  %1419 = load i16, i16* %1546, align 2
  %1420 = sext i16 %1419 to i32
  %1421 = add nsw i32 %1420, %1418
  %1422 = sub nsw i32 %1418, %1420
  %1423 = icmp slt i32 %1421, 32767
  %1424 = select i1 %1423, i32 %1421, i32 32767
  %1425 = icmp sgt i32 %1424, -32768
  %1426 = select i1 %1425, i32 %1424, i32 -32768
  %1427 = trunc i32 %1426 to i16
  store i16 %1427, i16* %1533, align 2
  %1428 = icmp slt i32 %1422, 32767
  %1429 = select i1 %1428, i32 %1422, i32 32767
  %1430 = icmp sgt i32 %1429, -32768
  %1431 = select i1 %1430, i32 %1429, i32 -32768
  %1432 = trunc i32 %1431 to i16
  store i16 %1432, i16* %1546, align 2
  %1433 = getelementptr inbounds i8, i8* %0, i64 12
  %1434 = bitcast i8* %1433 to i16*
  %1435 = load i16, i16* %1434, align 2
  %1436 = sext i16 %1435 to i64
  %1437 = mul nsw i64 %1436, 2896
  %1438 = getelementptr inbounds i8, i8* %0, i64 10
  %1439 = bitcast i8* %1438 to i16*
  %1440 = load i16, i16* %1439, align 2
  %1441 = sext i16 %1440 to i64
  %1442 = mul nsw i64 %1441, 2896
  %1443 = add nsw i64 %1437, 2048
  %1444 = add nsw i64 %1443, %1442
  %1445 = lshr i64 %1444, 12
  %1446 = trunc i64 %1445 to i16
  store i16 %1446, i16* %1434, align 2
  %1447 = sub nsw i64 %1443, %1442
  %1448 = lshr i64 %1447, 12
  %1449 = trunc i64 %1448 to i16
  store i16 %1449, i16* %1439, align 2
  %1450 = bitcast i8* %1748 to <8 x i16>*
  %1451 = load <8 x i16>, <8 x i16>* %1450, align 2
  %1452 = shufflevector <8 x i16> %1451, <8 x i16> undef, <8 x i32> <i32 3, i32 2, i32 1, i32 0, i32 7, i32 6, i32 5, i32 4>
  %1453 = sext <8 x i16> %1452 to <8 x i32>
  %1454 = shufflevector <8 x i32> %1453, <8 x i32> undef, <8 x i32> <i32 3, i32 2, i32 1, i32 0, i32 7, i32 6, i32 5, i32 4>
  %1455 = add nsw <8 x i32> %1454, %1453
  %1456 = sub nsw <8 x i32> %1453, %1454
  %1457 = shufflevector <8 x i32> %1455, <8 x i32> %1456, <8 x i32> <i32 0, i32 1, i32 10, i32 11, i32 12, i32 13, i32 6, i32 7>
  %1458 = icmp slt <8 x i32> %1457, <i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767>
  %1459 = select <8 x i1> %1458, <8 x i32> %1457, <8 x i32> <i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767>
  %1460 = icmp sgt <8 x i32> %1459, <i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768>
  %1461 = select <8 x i1> %1460, <8 x i32> %1459, <8 x i32> <i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768>
  %1462 = trunc <8 x i32> %1461 to <8 x i16>
  %1463 = bitcast i8* %1748 to <8 x i16>*
  store <8 x i16> %1462, <8 x i16>* %1463, align 2
  %1464 = load i16, i16* %465, align 2
  %1465 = sext i16 %1464 to i64
  %1466 = mul nsw i64 %1465, 1567
  %1467 = load i16, i16* %431, align 2
  %1468 = sext i16 %1467 to i64
  %1469 = mul nsw i64 %1465, 3784
  %1470 = mul nsw i64 %1468, 1567
  %1471 = add nsw i64 %1469, 2048
  %1472 = add nsw i64 %1471, %1470
  %1473 = lshr i64 %1472, 12
  %1474 = trunc i64 %1473 to i16
  store i16 %1474, i16* %465, align 2
  %1475 = add nsw i64 %1466, 2048
  %1476 = mul nsw i64 %1468, -3784
  %1477 = add nsw i64 %1475, %1476
  %1478 = lshr i64 %1477, 12
  %1479 = trunc i64 %1478 to i16
  store i16 %1479, i16* %431, align 2
  %1480 = load i16, i16* %463, align 2
  %1481 = sext i16 %1480 to i64
  %1482 = mul nsw i64 %1481, 1567
  %1483 = load i16, i16* %429, align 2
  %1484 = sext i16 %1483 to i64
  %1485 = mul nsw i64 %1481, 3784
  %1486 = mul nsw i64 %1484, 1567
  %1487 = add nsw i64 %1485, 2048
  %1488 = add nsw i64 %1487, %1486
  %1489 = lshr i64 %1488, 12
  %1490 = trunc i64 %1489 to i16
  store i16 %1490, i16* %463, align 2
  %1491 = add nsw i64 %1482, 2048
  %1492 = mul nsw i64 %1484, -3784
  %1493 = add nsw i64 %1491, %1492
  %1494 = lshr i64 %1493, 12
  %1495 = trunc i64 %1494 to i16
  store i16 %1495, i16* %429, align 2
  %1496 = load i16, i16* %459, align 2
  %1497 = sext i16 %1496 to i64
  %1498 = mul nsw i64 %1497, -3784
  %1499 = load i16, i16* %433, align 2
  %1500 = sext i16 %1499 to i64
  %1501 = mul nsw i64 %1497, 1567
  %1502 = mul nsw i64 %1500, -3784
  %1503 = add nsw i64 %1501, 2048
  %1504 = add nsw i64 %1503, %1502
  %1505 = lshr i64 %1504, 12
  %1506 = trunc i64 %1505 to i16
  store i16 %1506, i16* %459, align 2
  %1507 = add nsw i64 %1498, 2048
  %1508 = mul nsw i64 %1500, -1567
  %1509 = add nsw i64 %1507, %1508
  %1510 = lshr i64 %1509, 12
  %1511 = trunc i64 %1510 to i16
  store i16 %1511, i16* %433, align 2
  %1512 = load i16, i16* %461, align 2
  %1513 = sext i16 %1512 to i64
  %1514 = mul nsw i64 %1513, -3784
  %1515 = load i16, i16* %435, align 2
  %1516 = sext i16 %1515 to i64
  %1517 = mul nsw i64 %1513, 1567
  %1518 = mul nsw i64 %1516, -3784
  %1519 = add nsw i64 %1517, 2048
  %1520 = add nsw i64 %1519, %1518
  %1521 = lshr i64 %1520, 12
  %1522 = trunc i64 %1521 to i16
  store i16 %1522, i16* %461, align 2
  %1523 = add nsw i64 %1514, 2048
  %1524 = mul nsw i64 %1516, -1567
  %1525 = add nsw i64 %1523, %1524
  %1526 = lshr i64 %1525, 12
  %1527 = trunc i64 %1526 to i16
  store i16 %1527, i16* %435, align 2
  br label %792

1528:                                             ; preds = %609
  %1529 = load i16, i16* %3, align 2
  %1530 = sext i16 %1529 to i64
  %1531 = mul nsw i64 %1530, 2896
  %1532 = getelementptr inbounds i8, i8* %0, i64 2
  %1533 = bitcast i8* %1532 to i16*
  %1534 = load i16, i16* %1533, align 2
  %1535 = sext i16 %1534 to i64
  %1536 = mul nsw i64 %1535, 2896
  %1537 = sub nsw i64 %1531, %1536
  %1538 = add nsw i64 %1536, %1531
  %1539 = add nsw i64 %1538, 2048
  %1540 = lshr i64 %1539, 12
  %1541 = trunc i64 %1540 to i16
  store i16 %1541, i16* %3, align 2
  %1542 = add nsw i64 %1537, 2048
  %1543 = lshr i64 %1542, 12
  %1544 = trunc i64 %1543 to i16
  store i16 %1544, i16* %1533, align 2
  %1545 = getelementptr inbounds i8, i8* %0, i64 4
  %1546 = bitcast i8* %1545 to i16*
  %1547 = load i16, i16* %1546, align 2
  %1548 = sext i16 %1547 to i64
  %1549 = mul nsw i64 %1548, 1567
  %1550 = getelementptr inbounds i8, i8* %0, i64 6
  %1551 = bitcast i8* %1550 to i16*
  %1552 = load i16, i16* %1551, align 2
  %1553 = sext i16 %1552 to i64
  %1554 = mul nsw i64 %1553, -3784
  %1555 = add nsw i64 %1549, %1554
  %1556 = mul nsw i64 %1548, 3784
  %1557 = mul nsw i64 %1553, 1567
  %1558 = add nsw i64 %1557, %1556
  %1559 = add nsw i64 %1555, 2048
  %1560 = lshr i64 %1559, 12
  %1561 = trunc i64 %1560 to i16
  store i16 %1561, i16* %1546, align 2
  %1562 = add nsw i64 %1558, 2048
  %1563 = lshr i64 %1562, 12
  %1564 = trunc i64 %1563 to i16
  store i16 %1564, i16* %1551, align 2
  %1565 = load i16, i16* %1709, align 2
  %1566 = sext i16 %1565 to i32
  %1567 = load i16, i16* %1729, align 2
  %1568 = sext i16 %1567 to i32
  %1569 = add nsw i32 %1568, %1566
  %1570 = sub nsw i32 %1566, %1568
  %1571 = icmp slt i32 %1569, 32767
  %1572 = select i1 %1571, i32 %1569, i32 32767
  %1573 = icmp sgt i32 %1572, -32768
  %1574 = select i1 %1573, i32 %1572, i32 -32768
  %1575 = trunc i32 %1574 to i16
  store i16 %1575, i16* %1709, align 2
  %1576 = icmp slt i32 %1570, 32767
  %1577 = select i1 %1576, i32 %1570, i32 32767
  %1578 = icmp sgt i32 %1577, -32768
  %1579 = select i1 %1578, i32 %1577, i32 -32768
  %1580 = trunc i32 %1579 to i16
  store i16 %1580, i16* %1729, align 2
  %1581 = load i16, i16* %1714, align 2
  %1582 = sext i16 %1581 to i32
  %1583 = load i16, i16* %1734, align 2
  %1584 = sext i16 %1583 to i32
  %1585 = add nsw i32 %1584, %1582
  %1586 = sub nsw i32 %1582, %1584
  %1587 = icmp slt i32 %1585, 32767
  %1588 = select i1 %1587, i32 %1585, i32 32767
  %1589 = icmp sgt i32 %1588, -32768
  %1590 = select i1 %1589, i32 %1588, i32 -32768
  %1591 = trunc i32 %1590 to i16
  store i16 %1591, i16* %1714, align 2
  %1592 = icmp slt i32 %1586, 32767
  %1593 = select i1 %1592, i32 %1586, i32 32767
  %1594 = icmp sgt i32 %1593, -32768
  %1595 = select i1 %1594, i32 %1593, i32 -32768
  %1596 = trunc i32 %1595 to i16
  store i16 %1596, i16* %1734, align 2
  %1597 = load i16, i16* %1760, align 2
  %1598 = sext i16 %1597 to i64
  %1599 = mul nsw i64 %1598, 1567
  %1600 = load i16, i16* %1750, align 2
  %1601 = sext i16 %1600 to i64
  %1602 = mul nsw i64 %1598, 3784
  %1603 = mul nsw i64 %1601, 1567
  %1604 = add nsw i64 %1602, 2048
  %1605 = add nsw i64 %1604, %1603
  %1606 = lshr i64 %1605, 12
  %1607 = trunc i64 %1606 to i16
  store i16 %1607, i16* %1760, align 2
  %1608 = add nsw i64 %1599, 2048
  %1609 = mul nsw i64 %1601, -3784
  %1610 = add nsw i64 %1608, %1609
  %1611 = lshr i64 %1610, 12
  %1612 = trunc i64 %1611 to i16
  store i16 %1612, i16* %1750, align 2
  %1613 = load i16, i16* %1758, align 2
  %1614 = sext i16 %1613 to i64
  %1615 = mul nsw i64 %1614, -3784
  %1616 = load i16, i16* %1754, align 2
  %1617 = sext i16 %1616 to i64
  %1618 = mul nsw i64 %1614, 1567
  %1619 = mul nsw i64 %1617, -3784
  %1620 = add nsw i64 %1618, 2048
  %1621 = add nsw i64 %1620, %1619
  %1622 = lshr i64 %1621, 12
  %1623 = trunc i64 %1622 to i16
  store i16 %1623, i16* %1758, align 2
  %1624 = add nsw i64 %1615, 2048
  %1625 = mul nsw i64 %1617, -1567
  %1626 = add nsw i64 %1624, %1625
  %1627 = lshr i64 %1626, 12
  %1628 = trunc i64 %1627 to i16
  store i16 %1628, i16* %1754, align 2
  %1629 = load i16, i16* %425, align 2
  %1630 = sext i16 %1629 to i32
  %1631 = load i16, i16* %429, align 2
  %1632 = sext i16 %1631 to i32
  %1633 = add nsw i32 %1632, %1630
  %1634 = sub nsw i32 %1630, %1632
  %1635 = icmp slt i32 %1633, 32767
  %1636 = select i1 %1635, i32 %1633, i32 32767
  %1637 = icmp sgt i32 %1636, -32768
  %1638 = select i1 %1637, i32 %1636, i32 -32768
  %1639 = trunc i32 %1638 to i16
  store i16 %1639, i16* %425, align 2
  %1640 = icmp slt i32 %1634, 32767
  %1641 = select i1 %1640, i32 %1634, i32 32767
  %1642 = icmp sgt i32 %1641, -32768
  %1643 = select i1 %1642, i32 %1641, i32 -32768
  %1644 = trunc i32 %1643 to i16
  store i16 %1644, i16* %429, align 2
  %1645 = load i16, i16* %427, align 2
  %1646 = sext i16 %1645 to i32
  %1647 = load i16, i16* %431, align 2
  %1648 = sext i16 %1647 to i32
  %1649 = add nsw i32 %1648, %1646
  %1650 = sub nsw i32 %1646, %1648
  %1651 = icmp slt i32 %1649, 32767
  %1652 = select i1 %1651, i32 %1649, i32 32767
  %1653 = icmp sgt i32 %1652, -32768
  %1654 = select i1 %1653, i32 %1652, i32 -32768
  %1655 = trunc i32 %1654 to i16
  store i16 %1655, i16* %427, align 2
  %1656 = icmp slt i32 %1650, 32767
  %1657 = select i1 %1656, i32 %1650, i32 32767
  %1658 = icmp sgt i32 %1657, -32768
  %1659 = select i1 %1658, i32 %1657, i32 -32768
  %1660 = trunc i32 %1659 to i16
  store i16 %1660, i16* %431, align 2
  %1661 = bitcast i8* %432 to <8 x i16>*
  %1662 = load <8 x i16>, <8 x i16>* %1661, align 2
  %1663 = shufflevector <8 x i16> %1662, <8 x i16> undef, <8 x i32> <i32 3, i32 2, i32 1, i32 0, i32 7, i32 6, i32 5, i32 4>
  %1664 = sext <8 x i16> %1663 to <8 x i32>
  %1665 = shufflevector <8 x i32> %1664, <8 x i32> undef, <8 x i32> <i32 3, i32 2, i32 1, i32 0, i32 7, i32 6, i32 5, i32 4>
  %1666 = sub nsw <8 x i32> %1664, %1665
  %1667 = add nsw <8 x i32> %1665, %1664
  %1668 = shufflevector <8 x i32> %1666, <8 x i32> %1667, <8 x i32> <i32 0, i32 1, i32 10, i32 11, i32 12, i32 13, i32 6, i32 7>
  %1669 = icmp slt <8 x i32> %1668, <i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767>
  %1670 = select <8 x i1> %1669, <8 x i32> %1668, <8 x i32> <i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767>
  %1671 = icmp sgt <8 x i32> %1670, <i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768>
  %1672 = select <8 x i1> %1671, <8 x i32> %1670, <8 x i32> <i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768>
  %1673 = trunc <8 x i32> %1672 to <8 x i16>
  %1674 = bitcast i8* %432 to <8 x i16>*
  store <8 x i16> %1673, <8 x i16>* %1674, align 2
  %1675 = load i16, i16* %467, align 2
  %1676 = sext i16 %1675 to i32
  %1677 = load i16, i16* %463, align 2
  %1678 = sext i16 %1677 to i32
  %1679 = add nsw i32 %1678, %1676
  %1680 = sub nsw i32 %1676, %1678
  %1681 = icmp slt i32 %1679, 32767
  %1682 = select i1 %1681, i32 %1679, i32 32767
  %1683 = icmp sgt i32 %1682, -32768
  %1684 = select i1 %1683, i32 %1682, i32 -32768
  %1685 = trunc i32 %1684 to i16
  store i16 %1685, i16* %467, align 2
  %1686 = icmp slt i32 %1680, 32767
  %1687 = select i1 %1686, i32 %1680, i32 32767
  %1688 = icmp sgt i32 %1687, -32768
  %1689 = select i1 %1688, i32 %1687, i32 -32768
  %1690 = trunc i32 %1689 to i16
  store i16 %1690, i16* %463, align 2
  %1691 = load i16, i16* %469, align 2
  %1692 = sext i16 %1691 to i32
  %1693 = load i16, i16* %465, align 2
  %1694 = sext i16 %1693 to i32
  %1695 = add nsw i32 %1694, %1692
  %1696 = sub nsw i32 %1692, %1694
  %1697 = icmp slt i32 %1695, 32767
  %1698 = select i1 %1697, i32 %1695, i32 32767
  %1699 = icmp sgt i32 %1698, -32768
  %1700 = select i1 %1699, i32 %1698, i32 -32768
  %1701 = trunc i32 %1700 to i16
  store i16 %1701, i16* %469, align 2
  %1702 = icmp slt i32 %1696, 32767
  %1703 = select i1 %1702, i32 %1696, i32 32767
  %1704 = icmp sgt i32 %1703, -32768
  %1705 = select i1 %1704, i32 %1703, i32 -32768
  %1706 = trunc i32 %1705 to i16
  store i16 %1706, i16* %465, align 2
  br label %664

1707:                                             ; preds = %1929
  %1708 = getelementptr inbounds i8, i8* %0, i64 8
  %1709 = bitcast i8* %1708 to i16*
  %1710 = load i16, i16* %1709, align 2
  %1711 = sext i16 %1710 to i64
  %1712 = mul nsw i64 %1711, 799
  %1713 = getelementptr inbounds i8, i8* %0, i64 14
  %1714 = bitcast i8* %1713 to i16*
  %1715 = load i16, i16* %1714, align 2
  %1716 = sext i16 %1715 to i64
  %1717 = mul nsw i64 %1711, 4017
  %1718 = mul nsw i64 %1716, 799
  %1719 = add nsw i64 %1712, 2048
  %1720 = mul nsw i64 %1716, -4017
  %1721 = add nsw i64 %1719, %1720
  %1722 = lshr i64 %1721, 12
  %1723 = trunc i64 %1722 to i16
  store i16 %1723, i16* %1709, align 2
  %1724 = add nsw i64 %1717, 2048
  %1725 = add nsw i64 %1724, %1718
  %1726 = lshr i64 %1725, 12
  %1727 = trunc i64 %1726 to i16
  store i16 %1727, i16* %1714, align 2
  %1728 = getelementptr inbounds i8, i8* %0, i64 10
  %1729 = bitcast i8* %1728 to i16*
  %1730 = load i16, i16* %1729, align 2
  %1731 = sext i16 %1730 to i64
  %1732 = mul nsw i64 %1731, 3406
  %1733 = getelementptr inbounds i8, i8* %0, i64 12
  %1734 = bitcast i8* %1733 to i16*
  %1735 = load i16, i16* %1734, align 2
  %1736 = sext i16 %1735 to i64
  %1737 = mul nsw i64 %1731, 2276
  %1738 = mul nsw i64 %1736, 3406
  %1739 = add nsw i64 %1732, 2048
  %1740 = mul nsw i64 %1736, -2276
  %1741 = add nsw i64 %1739, %1740
  %1742 = lshr i64 %1741, 12
  %1743 = trunc i64 %1742 to i16
  store i16 %1743, i16* %1729, align 2
  %1744 = add nsw i64 %1737, 2048
  %1745 = add nsw i64 %1744, %1738
  %1746 = lshr i64 %1745, 12
  %1747 = trunc i64 %1746 to i16
  store i16 %1747, i16* %1734, align 2
  %1748 = getelementptr inbounds i8, i8* %0, i64 16
  %1749 = getelementptr inbounds i8, i8* %0, i64 18
  %1750 = bitcast i8* %1749 to i16*
  %1751 = getelementptr inbounds i8, i8* %0, i64 22
  %1752 = bitcast i8* %1751 to i16*
  %1753 = getelementptr inbounds i8, i8* %0, i64 20
  %1754 = bitcast i8* %1753 to i16*
  %1755 = getelementptr inbounds i8, i8* %0, i64 24
  %1756 = bitcast i8* %1755 to i16*
  %1757 = getelementptr inbounds i8, i8* %0, i64 26
  %1758 = bitcast i8* %1757 to i16*
  %1759 = getelementptr inbounds i8, i8* %0, i64 28
  %1760 = bitcast i8* %1759 to i16*
  %1761 = bitcast i8* %1748 to <8 x i16>*
  %1762 = load <8 x i16>, <8 x i16>* %1761, align 2
  %1763 = shufflevector <8 x i16> %1762, <8 x i16> undef, <8 x i32> <i32 1, i32 0, i32 3, i32 2, i32 5, i32 4, i32 7, i32 6>
  %1764 = sext <8 x i16> %1763 to <8 x i32>
  %1765 = shufflevector <8 x i32> %1764, <8 x i32> undef, <8 x i32> <i32 1, i32 0, i32 3, i32 2, i32 5, i32 4, i32 7, i32 6>
  %1766 = add nsw <8 x i32> %1765, %1764
  %1767 = sub nsw <8 x i32> %1764, %1765
  %1768 = shufflevector <8 x i32> %1766, <8 x i32> %1767, <8 x i32> <i32 0, i32 9, i32 10, i32 3, i32 4, i32 13, i32 14, i32 7>
  %1769 = icmp slt <8 x i32> %1768, <i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767>
  %1770 = select <8 x i1> %1769, <8 x i32> %1768, <8 x i32> <i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767>
  %1771 = icmp sgt <8 x i32> %1770, <i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768>
  %1772 = select <8 x i1> %1771, <8 x i32> %1770, <8 x i32> <i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768>
  %1773 = trunc <8 x i32> %1772 to <8 x i16>
  %1774 = bitcast i8* %1748 to <8 x i16>*
  store <8 x i16> %1773, <8 x i16>* %1774, align 2
  %1775 = load i16, i16* %469, align 2
  %1776 = sext i16 %1775 to i64
  %1777 = mul nsw i64 %1776, 799
  %1778 = load i16, i16* %427, align 2
  %1779 = sext i16 %1778 to i64
  %1780 = mul nsw i64 %1776, 4017
  %1781 = mul nsw i64 %1779, 799
  %1782 = add nsw i64 %1780, 2048
  %1783 = add nsw i64 %1782, %1781
  %1784 = lshr i64 %1783, 12
  %1785 = trunc i64 %1784 to i16
  store i16 %1785, i16* %469, align 2
  %1786 = add nsw i64 %1777, 2048
  %1787 = mul nsw i64 %1779, -4017
  %1788 = add nsw i64 %1786, %1787
  %1789 = lshr i64 %1788, 12
  %1790 = trunc i64 %1789 to i16
  store i16 %1790, i16* %427, align 2
  %1791 = load i16, i16* %465, align 2
  %1792 = sext i16 %1791 to i64
  %1793 = mul nsw i64 %1792, -4017
  %1794 = load i16, i16* %431, align 2
  %1795 = sext i16 %1794 to i64
  %1796 = mul nsw i64 %1792, 799
  %1797 = mul nsw i64 %1795, -4017
  %1798 = add nsw i64 %1796, 2048
  %1799 = add nsw i64 %1798, %1797
  %1800 = lshr i64 %1799, 12
  %1801 = trunc i64 %1800 to i16
  store i16 %1801, i16* %465, align 2
  %1802 = add nsw i64 %1793, 2048
  %1803 = mul nsw i64 %1795, -799
  %1804 = add nsw i64 %1802, %1803
  %1805 = lshr i64 %1804, 12
  %1806 = trunc i64 %1805 to i16
  store i16 %1806, i16* %431, align 2
  %1807 = load i16, i16* %461, align 2
  %1808 = sext i16 %1807 to i64
  %1809 = mul nsw i64 %1808, 3406
  %1810 = load i16, i16* %435, align 2
  %1811 = sext i16 %1810 to i64
  %1812 = mul nsw i64 %1808, 2276
  %1813 = mul nsw i64 %1811, 3406
  %1814 = add nsw i64 %1812, 2048
  %1815 = add nsw i64 %1814, %1813
  %1816 = lshr i64 %1815, 12
  %1817 = trunc i64 %1816 to i16
  store i16 %1817, i16* %461, align 2
  %1818 = add nsw i64 %1809, 2048
  %1819 = mul nsw i64 %1811, -2276
  %1820 = add nsw i64 %1818, %1819
  %1821 = lshr i64 %1820, 12
  %1822 = trunc i64 %1821 to i16
  store i16 %1822, i16* %435, align 2
  %1823 = load i16, i16* %457, align 2
  %1824 = sext i16 %1823 to i64
  %1825 = mul nsw i64 %1824, -2276
  %1826 = load i16, i16* %439, align 2
  %1827 = sext i16 %1826 to i64
  %1828 = mul nsw i64 %1824, 3406
  %1829 = mul nsw i64 %1827, -2276
  %1830 = add nsw i64 %1828, 2048
  %1831 = add nsw i64 %1830, %1829
  %1832 = lshr i64 %1831, 12
  %1833 = trunc i64 %1832 to i16
  store i16 %1833, i16* %457, align 2
  %1834 = add nsw i64 %1825, 2048
  %1835 = mul nsw i64 %1827, -3406
  %1836 = add nsw i64 %1834, %1835
  %1837 = lshr i64 %1836, 12
  %1838 = trunc i64 %1837 to i16
  store i16 %1838, i16* %439, align 2
  br label %609

1839:                                             ; preds = %589
  %1840 = icmp ult i32 %607, 129
  br i1 %1840, label %1854, label %1841

1841:                                             ; preds = %1839
  %1842 = icmp ult i32 %607, 193
  br i1 %1842, label %1848, label %1843

1843:                                             ; preds = %1841
  %1844 = sub nuw nsw i32 256, %607
  %1845 = zext i32 %1844 to i64
  %1846 = getelementptr inbounds [65 x i16], [65 x i16]* @_ZN7libgav13dsp12_GLOBAL__N_17kCos128E, i64 0, i64 %1845
  %1847 = load i16, i16* %1846, align 8
  br label %1864

1848:                                             ; preds = %1841
  %1849 = add nsw i32 %607, -128
  %1850 = sext i32 %1849 to i64
  %1851 = getelementptr inbounds [65 x i16], [65 x i16]* @_ZN7libgav13dsp12_GLOBAL__N_17kCos128E, i64 0, i64 %1850
  %1852 = load i16, i16* %1851, align 8
  %1853 = sub i16 0, %1852
  br label %1864

1854:                                             ; preds = %1839
  %1855 = sub nuw nsw i32 128, %607
  %1856 = sext i32 %1855 to i64
  %1857 = getelementptr inbounds [65 x i16], [65 x i16]* @_ZN7libgav13dsp12_GLOBAL__N_17kCos128E, i64 0, i64 %1856
  %1858 = load i16, i16* %1857, align 8
  %1859 = sub i16 0, %1858
  br label %1864

1860:                                             ; preds = %589
  %1861 = zext i32 %607 to i64
  %1862 = getelementptr inbounds [65 x i16], [65 x i16]* @_ZN7libgav13dsp12_GLOBAL__N_17kCos128E, i64 0, i64 %1861
  %1863 = load i16, i16* %1862, align 8
  br label %1864

1864:                                             ; preds = %1860, %1854, %1848, %1843
  %1865 = phi i16 [ %1863, %1860 ], [ %1859, %1854 ], [ %1853, %1848 ], [ %1847, %1843 ]
  %1866 = sext i16 %1865 to i64
  %1867 = mul nsw i64 %1866, %606
  %1868 = getelementptr inbounds i16, i16* %3, i64 %602
  %1869 = load i16, i16* %1868, align 2
  %1870 = sext i16 %1869 to i64
  %1871 = sub nsw i32 60, %492
  %1872 = and i32 %1871, 252
  %1873 = icmp ult i32 %1872, 65
  br i1 %1873, label %1895, label %1874

1874:                                             ; preds = %1864
  %1875 = icmp ult i32 %1872, 129
  br i1 %1875, label %1889, label %1876

1876:                                             ; preds = %1874
  %1877 = icmp ult i32 %1872, 193
  br i1 %1877, label %1883, label %1878

1878:                                             ; preds = %1876
  %1879 = sub nuw nsw i32 256, %1872
  %1880 = zext i32 %1879 to i64
  %1881 = getelementptr inbounds [65 x i16], [65 x i16]* @_ZN7libgav13dsp12_GLOBAL__N_17kCos128E, i64 0, i64 %1880
  %1882 = load i16, i16* %1881, align 8
  br label %1899

1883:                                             ; preds = %1876
  %1884 = add nsw i32 %1872, -128
  %1885 = sext i32 %1884 to i64
  %1886 = getelementptr inbounds [65 x i16], [65 x i16]* @_ZN7libgav13dsp12_GLOBAL__N_17kCos128E, i64 0, i64 %1885
  %1887 = load i16, i16* %1886, align 8
  %1888 = sub i16 0, %1887
  br label %1899

1889:                                             ; preds = %1874
  %1890 = sub nuw nsw i32 128, %1872
  %1891 = sext i32 %1890 to i64
  %1892 = getelementptr inbounds [65 x i16], [65 x i16]* @_ZN7libgav13dsp12_GLOBAL__N_17kCos128E, i64 0, i64 %1891
  %1893 = load i16, i16* %1892, align 8
  %1894 = sub i16 0, %1893
  br label %1899

1895:                                             ; preds = %1864
  %1896 = zext i32 %1872 to i64
  %1897 = getelementptr inbounds [65 x i16], [65 x i16]* @_ZN7libgav13dsp12_GLOBAL__N_17kCos128E, i64 0, i64 %1896
  %1898 = load i16, i16* %1897, align 8
  br label %1899

1899:                                             ; preds = %1895, %1889, %1883, %1878
  %1900 = phi i16 [ %1898, %1895 ], [ %1894, %1889 ], [ %1888, %1883 ], [ %1882, %1878 ]
  %1901 = sext i16 %1900 to i64
  %1902 = mul nsw i64 %1901, %1870
  %1903 = mul nsw i64 %1901, %606
  br i1 %608, label %1925, label %1904

1904:                                             ; preds = %1899
  %1905 = icmp ult i32 %607, 129
  br i1 %1905, label %1919, label %1906

1906:                                             ; preds = %1904
  %1907 = icmp ult i32 %607, 193
  br i1 %1907, label %1913, label %1908

1908:                                             ; preds = %1906
  %1909 = sub nuw nsw i32 256, %607
  %1910 = zext i32 %1909 to i64
  %1911 = getelementptr inbounds [65 x i16], [65 x i16]* @_ZN7libgav13dsp12_GLOBAL__N_17kCos128E, i64 0, i64 %1910
  %1912 = load i16, i16* %1911, align 8
  br label %1929

1913:                                             ; preds = %1906
  %1914 = add nsw i32 %607, -128
  %1915 = sext i32 %1914 to i64
  %1916 = getelementptr inbounds [65 x i16], [65 x i16]* @_ZN7libgav13dsp12_GLOBAL__N_17kCos128E, i64 0, i64 %1915
  %1917 = load i16, i16* %1916, align 8
  %1918 = sub i16 0, %1917
  br label %1929

1919:                                             ; preds = %1904
  %1920 = sub nuw nsw i32 128, %607
  %1921 = sext i32 %1920 to i64
  %1922 = getelementptr inbounds [65 x i16], [65 x i16]* @_ZN7libgav13dsp12_GLOBAL__N_17kCos128E, i64 0, i64 %1921
  %1923 = load i16, i16* %1922, align 8
  %1924 = sub i16 0, %1923
  br label %1929

1925:                                             ; preds = %1899
  %1926 = zext i32 %607 to i64
  %1927 = getelementptr inbounds [65 x i16], [65 x i16]* @_ZN7libgav13dsp12_GLOBAL__N_17kCos128E, i64 0, i64 %1926
  %1928 = load i16, i16* %1927, align 8
  br label %1929

1929:                                             ; preds = %1925, %1919, %1913, %1908
  %1930 = phi i16 [ %1928, %1925 ], [ %1924, %1919 ], [ %1918, %1913 ], [ %1912, %1908 ]
  %1931 = sext i16 %1930 to i64
  %1932 = mul nsw i64 %1931, %1870
  %1933 = add nsw i64 %1903, 2048
  %1934 = add nsw i64 %1933, %1932
  %1935 = lshr i64 %1934, 12
  %1936 = trunc i64 %1935 to i16
  store i16 %1936, i16* %604, align 2
  %1937 = add nsw i64 %1867, 2048
  %1938 = sub nsw i64 %1937, %1902
  %1939 = lshr i64 %1938, 12
  %1940 = trunc i64 %1939 to i16
  store i16 %1940, i16* %1868, align 2
  %1941 = add nuw nsw i64 %485, 1
  %1942 = icmp eq i64 %1941, 4
  br i1 %1942, label %1707, label %484
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal fastcc void @_ZN7libgav13dsp12_GLOBAL__N_113Adst4DcOnly_CILi8EsEEvPvabib(i8* nocapture, i1 zeroext, i32, i1 zeroext) unnamed_addr #3 {
  %5 = bitcast i8* %0 to i16*
  %6 = and i1 %1, %3
  %7 = load i16, i16* %5, align 2
  br i1 %6, label %8, label %14

8:                                                ; preds = %4
  %9 = sext i16 %7 to i32
  %10 = mul nsw i32 %9, 2896
  %11 = add nsw i32 %10, 2048
  %12 = lshr i32 %11, 12
  %13 = trunc i32 %12 to i16
  store i16 %13, i16* %5, align 2
  br label %14

14:                                               ; preds = %4, %8
  %15 = phi i16 [ %13, %8 ], [ %7, %4 ]
  %16 = sext i16 %15 to i32
  %17 = mul nsw i32 %16, 1321
  %18 = mul nsw i32 %16, 2482
  %19 = mul nsw i32 %16, 3344
  %20 = add nsw i32 %17, 2048
  %21 = ashr i32 %20, 12
  %22 = add nsw i32 %18, 2048
  %23 = ashr i32 %22, 12
  %24 = add nsw i32 %19, 2048
  %25 = lshr i32 %24, 12
  %26 = mul nsw i32 %16, 3803
  %27 = add nsw i32 %26, 2048
  %28 = ashr i32 %27, 12
  %29 = icmp eq i32 %21, 32768
  %30 = zext i1 %29 to i32
  %31 = sub nsw i32 %21, %30
  %32 = icmp eq i32 %23, 32768
  %33 = zext i1 %32 to i32
  %34 = sub nsw i32 %23, %33
  %35 = icmp eq i32 %28, 32768
  %36 = zext i1 %35 to i32
  %37 = sub nsw i32 %28, %36
  %38 = trunc i32 %31 to i16
  store i16 %38, i16* %5, align 2
  %39 = trunc i32 %34 to i16
  %40 = getelementptr inbounds i8, i8* %0, i64 2
  %41 = bitcast i8* %40 to i16*
  store i16 %39, i16* %41, align 2
  %42 = trunc i32 %25 to i16
  %43 = getelementptr inbounds i8, i8* %0, i64 4
  %44 = bitcast i8* %43 to i16*
  store i16 %42, i16* %44, align 2
  %45 = trunc i32 %37 to i16
  %46 = getelementptr inbounds i8, i8* %0, i64 6
  %47 = bitcast i8* %46 to i16*
  store i16 %45, i16* %47, align 2
  %48 = icmp sgt i32 %2, 0
  %49 = and i1 %48, %3
  br i1 %49, label %50, label %79

50:                                               ; preds = %14
  %51 = shl i32 1, %2
  %52 = ashr i32 %51, 1
  %53 = shl i32 %31, 16
  %54 = ashr exact i32 %53, 16
  %55 = add nsw i32 %52, %54
  %56 = ashr i32 %55, %2
  %57 = trunc i32 %56 to i16
  store i16 %57, i16* %5, align 2
  %58 = getelementptr inbounds i8, i8* %0, i64 2
  %59 = bitcast i8* %58 to i16*
  %60 = shl i32 %34, 16
  %61 = ashr exact i32 %60, 16
  %62 = add nsw i32 %52, %61
  %63 = ashr i32 %62, %2
  %64 = trunc i32 %63 to i16
  store i16 %64, i16* %59, align 2
  %65 = getelementptr inbounds i8, i8* %0, i64 4
  %66 = bitcast i8* %65 to i16*
  %67 = shl i32 %25, 16
  %68 = ashr exact i32 %67, 16
  %69 = add nsw i32 %52, %68
  %70 = ashr i32 %69, %2
  %71 = trunc i32 %70 to i16
  store i16 %71, i16* %66, align 2
  %72 = getelementptr inbounds i8, i8* %0, i64 6
  %73 = bitcast i8* %72 to i16*
  %74 = shl i32 %37, 16
  %75 = ashr exact i32 %74, 16
  %76 = add nsw i32 %52, %75
  %77 = ashr i32 %76, %2
  %78 = trunc i32 %77 to i16
  store i16 %78, i16* %73, align 2
  br label %79

79:                                               ; preds = %50, %14
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal fastcc void @_ZN7libgav13dsp12_GLOBAL__N_113Adst8DcOnly_CILi8EsEEvPvabib(i8* nocapture, i1 zeroext, i32, i1 zeroext) unnamed_addr #0 {
  %5 = bitcast i8* %0 to i16*
  %6 = getelementptr inbounds i8, i8* %0, i64 14
  %7 = bitcast i8* %6 to i16*
  %8 = load i16, i16* %5, align 2
  %9 = sext i16 %8 to i32
  %10 = getelementptr inbounds i8, i8* %0, i64 10
  %11 = bitcast i8* %10 to i16*
  %12 = getelementptr inbounds i8, i8* %0, i64 4
  %13 = bitcast i8* %12 to i16*
  %14 = getelementptr inbounds i8, i8* %0, i64 6
  %15 = bitcast i8* %14 to i16*
  %16 = getelementptr inbounds i8, i8* %0, i64 8
  %17 = bitcast i8* %16 to i16*
  %18 = getelementptr inbounds i8, i8* %0, i64 2
  %19 = bitcast i8* %18 to i16*
  %20 = getelementptr inbounds i8, i8* %0, i64 12
  %21 = bitcast i8* %20 to i16*
  %22 = and i1 %1, %3
  br i1 %22, label %23, label %27

23:                                               ; preds = %4
  %24 = mul nsw i32 %9, 2896
  %25 = add nsw i32 %24, 2048
  %26 = ashr i32 %25, 12
  br label %27

27:                                               ; preds = %4, %23
  %28 = phi i32 [ %9, %4 ], [ %26, %23 ]
  %29 = mul nsw i32 %28, -4076
  %30 = mul nsw i32 %28, 401
  %31 = add nsw i32 %30, 2048
  %32 = ashr i32 %31, 12
  %33 = sext i32 %32 to i64
  %34 = add nsw i32 %29, 2048
  %35 = ashr i32 %34, 12
  %36 = sext i32 %35 to i64
  %37 = mul nsw i64 %33, 6730213752832
  %38 = ashr exact i64 %37, 32
  %39 = mul nsw i64 %36, 16252156248064
  %40 = ashr exact i64 %39, 32
  %41 = mul nsw i64 %33, 16252156248064
  %42 = ashr exact i64 %41, 32
  %43 = mul nsw i64 %36, 6730213752832
  %44 = ashr exact i64 %43, 32
  %45 = add nsw i64 %42, 2048
  %46 = add nsw i64 %45, %44
  %47 = lshr i64 %46, 12
  %48 = trunc i64 %47 to i32
  %49 = sub nsw i64 2048, %40
  %50 = add nsw i64 %49, %38
  %51 = lshr i64 %50, 12
  %52 = trunc i64 %51 to i32
  %53 = mul nsw i64 %33, 12438225289216
  %54 = ashr exact i64 %53, 32
  %55 = mul nsw i32 %35, 2896
  %56 = sext i32 %55 to i64
  %57 = add nsw i64 %54, 2048
  %58 = add nsw i64 %57, %56
  %59 = lshr i64 %58, 12
  %60 = trunc i64 %59 to i32
  %61 = sub nsw i64 %57, %56
  %62 = lshr i64 %61, 12
  %63 = trunc i64 %62 to i32
  %64 = mul i64 %47, 12438225289216
  %65 = ashr exact i64 %64, 32
  %66 = mul i64 %51, 12438225289216
  %67 = ashr exact i64 %66, 32
  %68 = add nsw i64 %65, 2048
  %69 = add nsw i64 %68, %67
  %70 = lshr i64 %69, 12
  %71 = trunc i64 %70 to i32
  %72 = sub nsw i64 %68, %67
  %73 = lshr i64 %72, 12
  %74 = trunc i64 %73 to i32
  %75 = sub nsw i32 0, %48
  %76 = sub nsw i32 0, %60
  %77 = sub nsw i32 0, %74
  %78 = sub nsw i32 0, %35
  %79 = insertelement <8 x i32> undef, i32 %32, i32 0
  %80 = insertelement <8 x i32> %79, i32 %75, i32 1
  %81 = insertelement <8 x i32> %80, i32 %71, i32 2
  %82 = insertelement <8 x i32> %81, i32 %76, i32 3
  %83 = insertelement <8 x i32> %82, i32 %63, i32 4
  %84 = insertelement <8 x i32> %83, i32 %77, i32 5
  %85 = insertelement <8 x i32> %84, i32 %52, i32 6
  %86 = insertelement <8 x i32> %85, i32 %78, i32 7
  %87 = icmp eq <8 x i32> %86, <i32 32768, i32 32768, i32 32768, i32 32768, i32 32768, i32 32768, i32 32768, i32 32768>
  %88 = zext <8 x i1> %87 to <8 x i32>
  %89 = sub nsw <8 x i32> %86, %88
  %90 = trunc <8 x i32> %89 to <8 x i16>
  %91 = bitcast i8* %0 to <8 x i16>*
  store <8 x i16> %90, <8 x i16>* %91, align 2
  %92 = icmp sgt i32 %2, 0
  %93 = and i1 %92, %3
  br i1 %93, label %94, label %145

94:                                               ; preds = %27
  %95 = shl i32 1, %2
  %96 = ashr i32 %95, 1
  %97 = extractelement <8 x i32> %89, i32 0
  %98 = shl i32 %97, 16
  %99 = ashr exact i32 %98, 16
  %100 = add nsw i32 %96, %99
  %101 = ashr i32 %100, %2
  %102 = trunc i32 %101 to i16
  store i16 %102, i16* %5, align 2
  %103 = extractelement <8 x i32> %89, i32 1
  %104 = shl i32 %103, 16
  %105 = ashr exact i32 %104, 16
  %106 = add nsw i32 %96, %105
  %107 = ashr i32 %106, %2
  %108 = trunc i32 %107 to i16
  store i16 %108, i16* %19, align 2
  %109 = extractelement <8 x i32> %89, i32 2
  %110 = shl i32 %109, 16
  %111 = ashr exact i32 %110, 16
  %112 = add nsw i32 %96, %111
  %113 = ashr i32 %112, %2
  %114 = trunc i32 %113 to i16
  store i16 %114, i16* %13, align 2
  %115 = extractelement <8 x i32> %89, i32 3
  %116 = shl i32 %115, 16
  %117 = ashr exact i32 %116, 16
  %118 = add nsw i32 %96, %117
  %119 = ashr i32 %118, %2
  %120 = trunc i32 %119 to i16
  store i16 %120, i16* %15, align 2
  %121 = extractelement <8 x i32> %89, i32 4
  %122 = shl i32 %121, 16
  %123 = ashr exact i32 %122, 16
  %124 = add nsw i32 %96, %123
  %125 = ashr i32 %124, %2
  %126 = trunc i32 %125 to i16
  store i16 %126, i16* %17, align 2
  %127 = extractelement <8 x i32> %89, i32 5
  %128 = shl i32 %127, 16
  %129 = ashr exact i32 %128, 16
  %130 = add nsw i32 %96, %129
  %131 = ashr i32 %130, %2
  %132 = trunc i32 %131 to i16
  store i16 %132, i16* %11, align 2
  %133 = extractelement <8 x i32> %89, i32 6
  %134 = shl i32 %133, 16
  %135 = ashr exact i32 %134, 16
  %136 = add nsw i32 %96, %135
  %137 = ashr i32 %136, %2
  %138 = trunc i32 %137 to i16
  store i16 %138, i16* %21, align 2
  %139 = extractelement <8 x i32> %89, i32 7
  %140 = shl i32 %139, 16
  %141 = ashr exact i32 %140, 16
  %142 = add nsw i32 %96, %141
  %143 = ashr i32 %142, %2
  %144 = trunc i32 %143 to i16
  store i16 %144, i16* %7, align 2
  br label %145

145:                                              ; preds = %94, %27
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal fastcc void @_ZN7libgav13dsp12_GLOBAL__N_17Adst8_CIsEEvPva(i8* nocapture) unnamed_addr #0 {
  %2 = bitcast i8* %0 to i16*
  %3 = getelementptr inbounds i8, i8* %0, i64 14
  %4 = bitcast i8* %3 to i16*
  %5 = load i16, i16* %4, align 2
  %6 = sext i16 %5 to i32
  %7 = load i16, i16* %2, align 2
  %8 = sext i16 %7 to i32
  %9 = getelementptr inbounds i8, i8* %0, i64 10
  %10 = bitcast i8* %9 to i16*
  %11 = load i16, i16* %10, align 2
  %12 = sext i16 %11 to i32
  %13 = getelementptr inbounds i8, i8* %0, i64 4
  %14 = bitcast i8* %13 to i16*
  %15 = load i16, i16* %14, align 2
  %16 = sext i16 %15 to i32
  %17 = getelementptr inbounds i8, i8* %0, i64 6
  %18 = bitcast i8* %17 to i16*
  %19 = load i16, i16* %18, align 2
  %20 = sext i16 %19 to i32
  %21 = getelementptr inbounds i8, i8* %0, i64 8
  %22 = bitcast i8* %21 to i16*
  %23 = load i16, i16* %22, align 2
  %24 = sext i16 %23 to i32
  %25 = getelementptr inbounds i8, i8* %0, i64 2
  %26 = bitcast i8* %25 to i16*
  %27 = load i16, i16* %26, align 2
  %28 = sext i16 %27 to i32
  %29 = getelementptr inbounds i8, i8* %0, i64 12
  %30 = bitcast i8* %29 to i16*
  %31 = load i16, i16* %30, align 2
  %32 = sext i16 %31 to i32
  %33 = mul nsw i32 %6, 401
  %34 = mul nsw i32 %6, 4076
  %35 = mul nsw i32 %8, 401
  %36 = add nsw i32 %34, 2048
  %37 = add nsw i32 %36, %35
  %38 = ashr i32 %37, 12
  %39 = add nsw i32 %33, 2048
  %40 = mul nsw i32 %8, -4076
  %41 = add nsw i32 %39, %40
  %42 = ashr i32 %41, 12
  %43 = mul nsw i32 %12, 1931
  %44 = mul nsw i32 %12, 3612
  %45 = mul nsw i32 %16, 1931
  %46 = add nsw i32 %44, 2048
  %47 = add nsw i32 %46, %45
  %48 = ashr i32 %47, 12
  %49 = add nsw i32 %43, 2048
  %50 = mul nsw i32 %16, -3612
  %51 = add nsw i32 %49, %50
  %52 = ashr i32 %51, 12
  %53 = mul nsw i32 %20, 3166
  %54 = mul nsw i32 %20, 2598
  %55 = mul nsw i32 %24, 3166
  %56 = add nsw i32 %54, 2048
  %57 = add nsw i32 %56, %55
  %58 = ashr i32 %57, 12
  %59 = add nsw i32 %53, 2048
  %60 = mul nsw i32 %24, -2598
  %61 = add nsw i32 %59, %60
  %62 = ashr i32 %61, 12
  %63 = mul nsw i32 %28, 3920
  %64 = mul nsw i32 %28, 1189
  %65 = mul nsw i32 %32, 3920
  %66 = add nsw i32 %64, 2048
  %67 = add nsw i32 %66, %65
  %68 = ashr i32 %67, 12
  %69 = add nsw i32 %63, 2048
  %70 = mul nsw i32 %32, -1189
  %71 = add nsw i32 %69, %70
  %72 = ashr i32 %71, 12
  %73 = add nsw i32 %58, %38
  %74 = sub nsw i32 %38, %58
  %75 = icmp slt i32 %73, 32767
  %76 = select i1 %75, i32 %73, i32 32767
  %77 = icmp sgt i32 %76, -32768
  %78 = select i1 %77, i32 %76, i32 -32768
  %79 = icmp slt i32 %74, 32767
  %80 = select i1 %79, i32 %74, i32 32767
  %81 = icmp sgt i32 %80, -32768
  %82 = select i1 %81, i32 %80, i32 -32768
  %83 = add nsw i32 %62, %42
  %84 = sub nsw i32 %42, %62
  %85 = icmp slt i32 %83, 32767
  %86 = select i1 %85, i32 %83, i32 32767
  %87 = icmp sgt i32 %86, -32768
  %88 = select i1 %87, i32 %86, i32 -32768
  %89 = icmp slt i32 %84, 32767
  %90 = select i1 %89, i32 %84, i32 32767
  %91 = icmp sgt i32 %90, -32768
  %92 = select i1 %91, i32 %90, i32 -32768
  %93 = add nsw i32 %68, %48
  %94 = sub nsw i32 %48, %68
  %95 = icmp slt i32 %93, 32767
  %96 = select i1 %95, i32 %93, i32 32767
  %97 = icmp sgt i32 %96, -32768
  %98 = select i1 %97, i32 %96, i32 -32768
  %99 = icmp slt i32 %94, 32767
  %100 = select i1 %99, i32 %94, i32 32767
  %101 = icmp sgt i32 %100, -32768
  %102 = select i1 %101, i32 %100, i32 -32768
  %103 = add nsw i32 %72, %52
  %104 = sub nsw i32 %52, %72
  %105 = icmp slt i32 %103, 32767
  %106 = select i1 %105, i32 %103, i32 32767
  %107 = icmp sgt i32 %106, -32768
  %108 = select i1 %107, i32 %106, i32 -32768
  %109 = icmp slt i32 %104, 32767
  %110 = select i1 %109, i32 %104, i32 32767
  %111 = icmp sgt i32 %110, -32768
  %112 = select i1 %111, i32 %110, i32 -32768
  %113 = mul nsw i32 %82, 1567
  %114 = mul nsw i32 %82, 3784
  %115 = mul nsw i32 %92, 1567
  %116 = add nsw i32 %114, 2048
  %117 = add nsw i32 %116, %115
  %118 = ashr i32 %117, 12
  %119 = add nsw i32 %113, 2048
  %120 = mul nsw i32 %92, -3784
  %121 = add nsw i32 %119, %120
  %122 = ashr i32 %121, 12
  %123 = mul nsw i32 %112, 3784
  %124 = mul nsw i32 %112, 1567
  %125 = mul nsw i32 %102, 3784
  %126 = add nsw i32 %124, 2048
  %127 = add nsw i32 %126, %125
  %128 = ashr i32 %127, 12
  %129 = add nsw i32 %123, 2048
  %130 = mul nsw i32 %102, -1567
  %131 = add nsw i32 %129, %130
  %132 = ashr i32 %131, 12
  %133 = add nsw i32 %98, %78
  %134 = sub nsw i32 %78, %98
  %135 = icmp slt i32 %133, 32767
  %136 = select i1 %135, i32 %133, i32 32767
  %137 = icmp sgt i32 %136, -32768
  %138 = select i1 %137, i32 %136, i32 -32768
  %139 = icmp slt i32 %134, 32767
  %140 = select i1 %139, i32 %134, i32 32767
  %141 = icmp sgt i32 %140, -32768
  %142 = select i1 %141, i32 %140, i32 -32768
  %143 = add nsw i32 %132, %118
  %144 = sub nsw i32 %118, %132
  %145 = icmp slt i32 %143, 32767
  %146 = select i1 %145, i32 %143, i32 32767
  %147 = icmp sgt i32 %146, -32768
  %148 = select i1 %147, i32 %146, i32 -32768
  %149 = icmp slt i32 %144, 32767
  %150 = select i1 %149, i32 %144, i32 32767
  %151 = icmp sgt i32 %150, -32768
  %152 = select i1 %151, i32 %150, i32 -32768
  %153 = add nsw i32 %108, %88
  %154 = sub nsw i32 %88, %108
  %155 = icmp slt i32 %153, 32767
  %156 = select i1 %155, i32 %153, i32 32767
  %157 = icmp sgt i32 %156, -32768
  %158 = select i1 %157, i32 %156, i32 -32768
  %159 = icmp slt i32 %154, 32767
  %160 = select i1 %159, i32 %154, i32 32767
  %161 = icmp sgt i32 %160, -32768
  %162 = select i1 %161, i32 %160, i32 -32768
  %163 = add nsw i32 %128, %122
  %164 = sub nsw i32 %122, %128
  %165 = icmp slt i32 %163, 32767
  %166 = select i1 %165, i32 %163, i32 32767
  %167 = icmp sgt i32 %166, -32768
  %168 = select i1 %167, i32 %166, i32 -32768
  %169 = icmp slt i32 %164, 32767
  %170 = select i1 %169, i32 %164, i32 32767
  %171 = icmp sgt i32 %170, -32768
  %172 = select i1 %171, i32 %170, i32 -32768
  %173 = mul nsw i32 %142, 2896
  %174 = mul nsw i32 %162, 2896
  %175 = sext i32 %174 to i64
  %176 = add nsw i32 %173, 2048
  %177 = sext i32 %176 to i64
  %178 = add nsw i64 %177, %175
  %179 = lshr i64 %178, 12
  %180 = trunc i64 %179 to i32
  %181 = sub nsw i64 %177, %175
  %182 = lshr i64 %181, 12
  %183 = trunc i64 %182 to i32
  %184 = mul nsw i32 %152, 2896
  %185 = mul nsw i32 %172, 2896
  %186 = sext i32 %185 to i64
  %187 = add nsw i32 %184, 2048
  %188 = sext i32 %187 to i64
  %189 = add nsw i64 %188, %186
  %190 = lshr i64 %189, 12
  %191 = trunc i64 %190 to i32
  %192 = sub nsw i64 %188, %186
  %193 = lshr i64 %192, 12
  %194 = trunc i64 %193 to i32
  %195 = trunc i32 %138 to i16
  store i16 %195, i16* %2, align 2
  %196 = sub nsw i32 0, %148
  %197 = icmp eq i32 %196, 32768
  %198 = zext i1 %197 to i32
  %199 = sub nsw i32 %196, %198
  %200 = trunc i32 %199 to i16
  store i16 %200, i16* %26, align 2
  %201 = icmp eq i32 %191, 32768
  %202 = zext i1 %201 to i32
  %203 = sub nsw i32 %191, %202
  %204 = trunc i32 %203 to i16
  store i16 %204, i16* %14, align 2
  %205 = sub nsw i32 0, %180
  %206 = icmp eq i32 %205, 32768
  %207 = zext i1 %206 to i32
  %208 = sub nsw i32 %205, %207
  %209 = trunc i32 %208 to i16
  store i16 %209, i16* %18, align 2
  %210 = icmp eq i32 %183, 32768
  %211 = zext i1 %210 to i32
  %212 = sub nsw i32 %183, %211
  %213 = trunc i32 %212 to i16
  store i16 %213, i16* %22, align 2
  %214 = sub nsw i32 0, %194
  %215 = icmp eq i32 %214, 32768
  %216 = zext i1 %215 to i32
  %217 = sub nsw i32 %214, %216
  %218 = trunc i32 %217 to i16
  store i16 %218, i16* %10, align 2
  %219 = trunc i32 %168 to i16
  store i16 %219, i16* %30, align 2
  %220 = sub nsw i32 0, %158
  %221 = icmp eq i32 %220, 32768
  %222 = zext i1 %221 to i32
  %223 = sub nsw i32 %220, %222
  %224 = trunc i32 %223 to i16
  store i16 %224, i16* %4, align 2
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal fastcc void @_ZN7libgav13dsp12_GLOBAL__N_114Adst16DcOnly_CILi8EsEEvPvabib(i8* nocapture, i1 zeroext, i32, i1 zeroext) unnamed_addr #0 {
  %5 = alloca [16 x i32], align 16
  %6 = bitcast i8* %0 to i16*
  %7 = bitcast [16 x i32]* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 64, i8* nonnull %7) #4
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %7, i8 -86, i64 64, i1 false)
  br label %8

8:                                                ; preds = %8, %4
  %9 = phi i64 [ 0, %4 ], [ %25, %8 ]
  %10 = phi i32 [ 0, %4 ], [ %26, %8 ]
  %11 = sub nuw nsw i32 15, %10
  %12 = sext i32 %11 to i64
  %13 = getelementptr inbounds i16, i16* %6, i64 %12
  %14 = load i16, i16* %13, align 2
  %15 = sext i16 %14 to i32
  %16 = getelementptr inbounds [16 x i32], [16 x i32]* %5, i64 0, i64 %9
  store i32 %15, i32* %16, align 8
  %17 = or i64 %9, 1
  %18 = shl i64 %17, 32
  %19 = add nsw i64 %18, -4294967296
  %20 = ashr exact i64 %19, 32
  %21 = getelementptr inbounds i16, i16* %6, i64 %20
  %22 = load i16, i16* %21, align 2
  %23 = sext i16 %22 to i32
  %24 = getelementptr inbounds [16 x i32], [16 x i32]* %5, i64 0, i64 %17
  store i32 %23, i32* %24, align 4
  %25 = add nuw nsw i64 %9, 2
  %26 = add nuw nsw i32 %10, 2
  %27 = icmp eq i64 %25, 16
  br i1 %27, label %28, label %8

28:                                               ; preds = %8
  %29 = getelementptr inbounds [16 x i32], [16 x i32]* %5, i64 0, i64 0
  %30 = and i1 %1, %3
  %31 = getelementptr inbounds [16 x i32], [16 x i32]* %5, i64 0, i64 1
  %32 = load i32, i32* %31, align 4
  br i1 %30, label %33, label %37

33:                                               ; preds = %28
  %34 = mul nsw i32 %32, 2896
  %35 = add nsw i32 %34, 2048
  %36 = ashr i32 %35, 12
  store i32 %36, i32* %31, align 4
  br label %37

37:                                               ; preds = %28, %33
  %38 = phi i32 [ %36, %33 ], [ %32, %28 ]
  %39 = getelementptr inbounds [16 x i32], [16 x i32]* %5, i64 0, i64 1
  %40 = mul i32 %38, -4091
  %41 = sext i32 %40 to i64
  %42 = mul nsw i32 %38, 201
  %43 = sext i32 %42 to i64
  %44 = add nsw i64 %43, 2048
  %45 = ashr i64 %44, 12
  %46 = trunc i64 %45 to i32
  store i32 %46, i32* %29, align 16
  %47 = add nsw i64 %41, 2048
  %48 = ashr i64 %47, 12
  %49 = trunc i64 %48 to i32
  store i32 %49, i32* %39, align 4
  %50 = getelementptr inbounds [16 x i32], [16 x i32]* %5, i64 0, i64 8
  %51 = getelementptr inbounds [16 x i32], [16 x i32]* %5, i64 0, i64 9
  %52 = mul nsw i64 %45, 799
  %53 = mul i64 %48, 17252883628032
  %54 = ashr exact i64 %53, 32
  %55 = mul i64 %45, 17252883628032
  %56 = ashr exact i64 %55, 32
  %57 = mul nsw i64 %48, 799
  %58 = add nsw i64 %57, 2048
  %59 = add nsw i64 %58, %56
  %60 = lshr i64 %59, 12
  %61 = trunc i64 %60 to i32
  store i32 %61, i32* %50, align 16
  %62 = add nsw i64 %52, 2048
  %63 = sub nsw i64 %62, %54
  %64 = lshr i64 %63, 12
  %65 = trunc i64 %64 to i32
  store i32 %65, i32* %51, align 4
  %66 = getelementptr inbounds [16 x i32], [16 x i32]* %5, i64 0, i64 4
  %67 = getelementptr inbounds [16 x i32], [16 x i32]* %5, i64 0, i64 5
  %68 = getelementptr inbounds [16 x i32], [16 x i32]* %5, i64 0, i64 12
  %69 = getelementptr inbounds [16 x i32], [16 x i32]* %5, i64 0, i64 13
  %70 = mul nsw i64 %45, 6730213752832
  %71 = ashr exact i64 %70, 32
  %72 = mul i64 %48, 16252156248064
  %73 = ashr exact i64 %72, 32
  %74 = mul i64 %45, 16252156248064
  %75 = ashr exact i64 %74, 32
  %76 = mul nsw i64 %48, 6730213752832
  %77 = ashr exact i64 %76, 32
  %78 = add nsw i64 %75, 2048
  %79 = add nsw i64 %78, %77
  %80 = lshr i64 %79, 12
  %81 = trunc i64 %80 to i32
  store i32 %81, i32* %66, align 16
  %82 = add nsw i64 %71, 2048
  %83 = sub nsw i64 %82, %73
  %84 = lshr i64 %83, 12
  %85 = trunc i64 %84 to i32
  store i32 %85, i32* %67, align 4
  %86 = mul i64 %60, 6730213752832
  %87 = ashr exact i64 %86, 32
  %88 = mul i64 %64, 16252156248064
  %89 = ashr exact i64 %88, 32
  %90 = mul i64 %60, 16252156248064
  %91 = ashr exact i64 %90, 32
  %92 = mul i64 %64, 6730213752832
  %93 = ashr exact i64 %92, 32
  %94 = add nsw i64 %91, 2048
  %95 = add nsw i64 %94, %93
  %96 = lshr i64 %95, 12
  %97 = trunc i64 %96 to i32
  store i32 %97, i32* %68, align 16
  %98 = add nsw i64 %87, 2048
  %99 = sub nsw i64 %98, %89
  %100 = lshr i64 %99, 12
  %101 = trunc i64 %100 to i32
  store i32 %101, i32* %69, align 4
  %102 = getelementptr inbounds [16 x i32], [16 x i32]* %5, i64 0, i64 2
  %103 = getelementptr inbounds [16 x i32], [16 x i32]* %5, i64 0, i64 3
  %104 = getelementptr inbounds [16 x i32], [16 x i32]* %5, i64 0, i64 10
  %105 = getelementptr inbounds [16 x i32], [16 x i32]* %5, i64 0, i64 11
  %106 = getelementptr inbounds [16 x i32], [16 x i32]* %5, i64 0, i64 6
  %107 = getelementptr inbounds [16 x i32], [16 x i32]* %5, i64 0, i64 7
  %108 = getelementptr inbounds [16 x i32], [16 x i32]* %5, i64 0, i64 14
  %109 = getelementptr inbounds [16 x i32], [16 x i32]* %5, i64 0, i64 15
  %110 = mul i64 %45, 12438225289216
  %111 = ashr exact i64 %110, 32
  %112 = mul i64 %48, 12438225289216
  %113 = ashr exact i64 %112, 32
  %114 = add nsw i64 %111, 2048
  %115 = add nsw i64 %114, %113
  %116 = lshr i64 %115, 12
  %117 = trunc i64 %116 to i32
  store i32 %117, i32* %102, align 8
  %118 = sub nsw i64 %114, %113
  %119 = lshr i64 %118, 12
  %120 = trunc i64 %119 to i32
  store i32 %120, i32* %103, align 4
  %121 = mul i64 %80, 12438225289216
  %122 = ashr exact i64 %121, 32
  %123 = mul i64 %84, 12438225289216
  %124 = ashr exact i64 %123, 32
  %125 = add nsw i64 %122, 2048
  %126 = add nsw i64 %125, %124
  %127 = lshr i64 %126, 12
  %128 = trunc i64 %127 to i32
  store i32 %128, i32* %106, align 8
  %129 = sub nsw i64 %125, %124
  %130 = lshr i64 %129, 12
  %131 = trunc i64 %130 to i32
  store i32 %131, i32* %107, align 4
  %132 = mul i64 %60, 12438225289216
  %133 = ashr exact i64 %132, 32
  %134 = mul i64 %64, 12438225289216
  %135 = ashr exact i64 %134, 32
  %136 = add nsw i64 %133, 2048
  %137 = add nsw i64 %136, %135
  %138 = lshr i64 %137, 12
  %139 = trunc i64 %138 to i32
  store i32 %139, i32* %104, align 8
  %140 = sub nsw i64 %136, %135
  %141 = lshr i64 %140, 12
  %142 = trunc i64 %141 to i32
  store i32 %142, i32* %105, align 4
  %143 = mul i64 %96, 12438225289216
  %144 = ashr exact i64 %143, 32
  %145 = mul i64 %100, 12438225289216
  %146 = ashr exact i64 %145, 32
  %147 = add nsw i64 %144, 2048
  %148 = add nsw i64 %147, %146
  %149 = lshr i64 %148, 12
  %150 = trunc i64 %149 to i32
  store i32 %150, i32* %108, align 8
  %151 = sub nsw i64 %147, %146
  %152 = lshr i64 %151, 12
  %153 = trunc i64 %152 to i32
  store i32 %153, i32* %109, align 4
  br label %154

154:                                              ; preds = %154, %37
  %155 = phi i64 [ 0, %37 ], [ %178, %154 ]
  %156 = getelementptr inbounds [16 x i8], [16 x i8]* @_ZN7libgav13dsp12_GLOBAL__N_128kAdstOutputPermutationLookupE, i64 0, i64 %155
  %157 = load i8, i8* %156, align 2
  %158 = sext i8 %157 to i64
  %159 = getelementptr inbounds [16 x i32], [16 x i32]* %5, i64 0, i64 %158
  %160 = load i32, i32* %159, align 4
  %161 = icmp eq i32 %160, 32768
  %162 = zext i1 %161 to i32
  %163 = sub nsw i32 %160, %162
  %164 = trunc i32 %163 to i16
  %165 = getelementptr inbounds i16, i16* %6, i64 %155
  store i16 %164, i16* %165, align 2
  %166 = or i64 %155, 1
  %167 = getelementptr inbounds [16 x i8], [16 x i8]* @_ZN7libgav13dsp12_GLOBAL__N_128kAdstOutputPermutationLookupE, i64 0, i64 %166
  %168 = load i8, i8* %167, align 1
  %169 = sext i8 %168 to i64
  %170 = getelementptr inbounds [16 x i32], [16 x i32]* %5, i64 0, i64 %169
  %171 = load i32, i32* %170, align 4
  %172 = sub nsw i32 0, %171
  %173 = icmp eq i32 %172, 32768
  %174 = zext i1 %173 to i32
  %175 = sub nsw i32 %172, %174
  %176 = trunc i32 %175 to i16
  %177 = getelementptr inbounds i16, i16* %6, i64 %166
  store i16 %176, i16* %177, align 2
  %178 = add nuw nsw i64 %155, 2
  %179 = icmp eq i64 %178, 16
  br i1 %179, label %180, label %154

180:                                              ; preds = %154
  %181 = icmp sgt i32 %2, 0
  %182 = and i1 %181, %3
  br i1 %182, label %183, label %296

183:                                              ; preds = %180
  %184 = shl i32 1, %2
  %185 = ashr i32 %184, 1
  %186 = load i16, i16* %6, align 2
  %187 = sext i16 %186 to i32
  %188 = add nsw i32 %185, %187
  %189 = ashr i32 %188, %2
  %190 = trunc i32 %189 to i16
  store i16 %190, i16* %6, align 2
  %191 = getelementptr inbounds i8, i8* %0, i64 2
  %192 = bitcast i8* %191 to i16*
  %193 = load i16, i16* %192, align 2
  %194 = sext i16 %193 to i32
  %195 = add nsw i32 %185, %194
  %196 = ashr i32 %195, %2
  %197 = trunc i32 %196 to i16
  store i16 %197, i16* %192, align 2
  %198 = getelementptr inbounds i8, i8* %0, i64 4
  %199 = bitcast i8* %198 to i16*
  %200 = load i16, i16* %199, align 2
  %201 = sext i16 %200 to i32
  %202 = add nsw i32 %185, %201
  %203 = ashr i32 %202, %2
  %204 = trunc i32 %203 to i16
  store i16 %204, i16* %199, align 2
  %205 = getelementptr inbounds i8, i8* %0, i64 6
  %206 = bitcast i8* %205 to i16*
  %207 = load i16, i16* %206, align 2
  %208 = sext i16 %207 to i32
  %209 = add nsw i32 %185, %208
  %210 = ashr i32 %209, %2
  %211 = trunc i32 %210 to i16
  store i16 %211, i16* %206, align 2
  %212 = getelementptr inbounds i8, i8* %0, i64 8
  %213 = bitcast i8* %212 to i16*
  %214 = load i16, i16* %213, align 2
  %215 = sext i16 %214 to i32
  %216 = add nsw i32 %185, %215
  %217 = ashr i32 %216, %2
  %218 = trunc i32 %217 to i16
  store i16 %218, i16* %213, align 2
  %219 = getelementptr inbounds i8, i8* %0, i64 10
  %220 = bitcast i8* %219 to i16*
  %221 = load i16, i16* %220, align 2
  %222 = sext i16 %221 to i32
  %223 = add nsw i32 %185, %222
  %224 = ashr i32 %223, %2
  %225 = trunc i32 %224 to i16
  store i16 %225, i16* %220, align 2
  %226 = getelementptr inbounds i8, i8* %0, i64 12
  %227 = bitcast i8* %226 to i16*
  %228 = load i16, i16* %227, align 2
  %229 = sext i16 %228 to i32
  %230 = add nsw i32 %185, %229
  %231 = ashr i32 %230, %2
  %232 = trunc i32 %231 to i16
  store i16 %232, i16* %227, align 2
  %233 = getelementptr inbounds i8, i8* %0, i64 14
  %234 = bitcast i8* %233 to i16*
  %235 = load i16, i16* %234, align 2
  %236 = sext i16 %235 to i32
  %237 = add nsw i32 %185, %236
  %238 = ashr i32 %237, %2
  %239 = trunc i32 %238 to i16
  store i16 %239, i16* %234, align 2
  %240 = getelementptr inbounds i8, i8* %0, i64 16
  %241 = bitcast i8* %240 to i16*
  %242 = load i16, i16* %241, align 2
  %243 = sext i16 %242 to i32
  %244 = add nsw i32 %185, %243
  %245 = ashr i32 %244, %2
  %246 = trunc i32 %245 to i16
  store i16 %246, i16* %241, align 2
  %247 = getelementptr inbounds i8, i8* %0, i64 18
  %248 = bitcast i8* %247 to i16*
  %249 = load i16, i16* %248, align 2
  %250 = sext i16 %249 to i32
  %251 = add nsw i32 %185, %250
  %252 = ashr i32 %251, %2
  %253 = trunc i32 %252 to i16
  store i16 %253, i16* %248, align 2
  %254 = getelementptr inbounds i8, i8* %0, i64 20
  %255 = bitcast i8* %254 to i16*
  %256 = load i16, i16* %255, align 2
  %257 = sext i16 %256 to i32
  %258 = add nsw i32 %185, %257
  %259 = ashr i32 %258, %2
  %260 = trunc i32 %259 to i16
  store i16 %260, i16* %255, align 2
  %261 = getelementptr inbounds i8, i8* %0, i64 22
  %262 = bitcast i8* %261 to i16*
  %263 = load i16, i16* %262, align 2
  %264 = sext i16 %263 to i32
  %265 = add nsw i32 %185, %264
  %266 = ashr i32 %265, %2
  %267 = trunc i32 %266 to i16
  store i16 %267, i16* %262, align 2
  %268 = getelementptr inbounds i8, i8* %0, i64 24
  %269 = bitcast i8* %268 to i16*
  %270 = load i16, i16* %269, align 2
  %271 = sext i16 %270 to i32
  %272 = add nsw i32 %185, %271
  %273 = ashr i32 %272, %2
  %274 = trunc i32 %273 to i16
  store i16 %274, i16* %269, align 2
  %275 = getelementptr inbounds i8, i8* %0, i64 26
  %276 = bitcast i8* %275 to i16*
  %277 = load i16, i16* %276, align 2
  %278 = sext i16 %277 to i32
  %279 = add nsw i32 %185, %278
  %280 = ashr i32 %279, %2
  %281 = trunc i32 %280 to i16
  store i16 %281, i16* %276, align 2
  %282 = getelementptr inbounds i8, i8* %0, i64 28
  %283 = bitcast i8* %282 to i16*
  %284 = load i16, i16* %283, align 2
  %285 = sext i16 %284 to i32
  %286 = add nsw i32 %185, %285
  %287 = ashr i32 %286, %2
  %288 = trunc i32 %287 to i16
  store i16 %288, i16* %283, align 2
  %289 = getelementptr inbounds i8, i8* %0, i64 30
  %290 = bitcast i8* %289 to i16*
  %291 = load i16, i16* %290, align 2
  %292 = sext i16 %291 to i32
  %293 = add nsw i32 %185, %292
  %294 = ashr i32 %293, %2
  %295 = trunc i32 %294 to i16
  store i16 %295, i16* %290, align 2
  br label %296

296:                                              ; preds = %183, %180
  call void @llvm.lifetime.end.p0i8(i64 64, i8* nonnull %7) #4
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal fastcc void @_ZN7libgav13dsp12_GLOBAL__N_18Adst16_CIsEEvPva(i8* nocapture) unnamed_addr #0 {
  %2 = alloca [16 x i32], align 16
  %3 = bitcast i8* %0 to i16*
  %4 = bitcast [16 x i32]* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 64, i8* nonnull %4) #4
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %4, i8 -86, i64 64, i1 false)
  br label %5

5:                                                ; preds = %5, %1
  %6 = phi i64 [ 0, %1 ], [ %22, %5 ]
  %7 = phi i32 [ 0, %1 ], [ %23, %5 ]
  %8 = sub nuw nsw i32 15, %7
  %9 = sext i32 %8 to i64
  %10 = getelementptr inbounds i16, i16* %3, i64 %9
  %11 = load i16, i16* %10, align 2
  %12 = sext i16 %11 to i32
  %13 = getelementptr inbounds [16 x i32], [16 x i32]* %2, i64 0, i64 %6
  store i32 %12, i32* %13, align 8
  %14 = or i64 %6, 1
  %15 = shl i64 %14, 32
  %16 = add nsw i64 %15, -4294967296
  %17 = ashr exact i64 %16, 32
  %18 = getelementptr inbounds i16, i16* %3, i64 %17
  %19 = load i16, i16* %18, align 2
  %20 = sext i16 %19 to i32
  %21 = getelementptr inbounds [16 x i32], [16 x i32]* %2, i64 0, i64 %14
  store i32 %20, i32* %21, align 4
  %22 = add nuw nsw i64 %6, 2
  %23 = add nuw nsw i32 %7, 2
  %24 = icmp eq i64 %22, 16
  br i1 %24, label %25, label %5

25:                                               ; preds = %5, %129
  %26 = phi i64 [ %142, %129 ], [ 0, %5 ]
  %27 = shl nuw i64 %26, 1
  %28 = or i64 %27, 1
  %29 = shl nsw i64 %26, 3
  %30 = getelementptr inbounds [16 x i32], [16 x i32]* %2, i64 0, i64 %27
  %31 = load i32, i32* %30, align 8
  %32 = trunc i64 %29 to i32
  %33 = sub i32 62, %32
  %34 = and i32 %33, 254
  %35 = icmp ult i32 %34, 65
  br i1 %35, label %36, label %40

36:                                               ; preds = %25
  %37 = zext i32 %34 to i64
  %38 = getelementptr inbounds [65 x i16], [65 x i16]* @_ZN7libgav13dsp12_GLOBAL__N_17kCos128E, i64 0, i64 %37
  %39 = load i16, i16* %38, align 4
  br label %61

40:                                               ; preds = %25
  %41 = icmp ult i32 %34, 129
  br i1 %41, label %42, label %48

42:                                               ; preds = %40
  %43 = sub nuw nsw i32 128, %34
  %44 = sext i32 %43 to i64
  %45 = getelementptr inbounds [65 x i16], [65 x i16]* @_ZN7libgav13dsp12_GLOBAL__N_17kCos128E, i64 0, i64 %44
  %46 = load i16, i16* %45, align 4
  %47 = sub i16 0, %46
  br label %61

48:                                               ; preds = %40
  %49 = icmp ult i32 %34, 193
  br i1 %49, label %50, label %56

50:                                               ; preds = %48
  %51 = add nsw i32 %34, -128
  %52 = sext i32 %51 to i64
  %53 = getelementptr inbounds [65 x i16], [65 x i16]* @_ZN7libgav13dsp12_GLOBAL__N_17kCos128E, i64 0, i64 %52
  %54 = load i16, i16* %53, align 4
  %55 = sub i16 0, %54
  br label %61

56:                                               ; preds = %48
  %57 = sub nuw nsw i32 256, %34
  %58 = zext i32 %57 to i64
  %59 = getelementptr inbounds [65 x i16], [65 x i16]* @_ZN7libgav13dsp12_GLOBAL__N_17kCos128E, i64 0, i64 %58
  %60 = load i16, i16* %59, align 4
  br label %61

61:                                               ; preds = %56, %50, %42, %36
  %62 = phi i16 [ %39, %36 ], [ %47, %42 ], [ %55, %50 ], [ %60, %56 ]
  %63 = sext i16 %62 to i32
  %64 = mul nsw i32 %31, %63
  %65 = sext i32 %64 to i64
  %66 = getelementptr inbounds [16 x i32], [16 x i32]* %2, i64 0, i64 %28
  %67 = load i32, i32* %66, align 4
  %68 = trunc i64 %29 to i32
  %69 = sub i32 254, %68
  %70 = and i32 %69, 254
  %71 = icmp ult i32 %70, 65
  br i1 %71, label %76, label %72

72:                                               ; preds = %61
  %73 = icmp ult i32 %70, 129
  br i1 %73, label %80, label %74

74:                                               ; preds = %72
  %75 = icmp ult i32 %70, 193
  br i1 %75, label %86, label %92

76:                                               ; preds = %61
  %77 = zext i32 %70 to i64
  %78 = getelementptr inbounds [65 x i16], [65 x i16]* @_ZN7libgav13dsp12_GLOBAL__N_17kCos128E, i64 0, i64 %77
  %79 = load i16, i16* %78, align 4
  br label %97

80:                                               ; preds = %72
  %81 = sub nuw nsw i32 128, %70
  %82 = sext i32 %81 to i64
  %83 = getelementptr inbounds [65 x i16], [65 x i16]* @_ZN7libgav13dsp12_GLOBAL__N_17kCos128E, i64 0, i64 %82
  %84 = load i16, i16* %83, align 4
  %85 = sub i16 0, %84
  br label %97

86:                                               ; preds = %74
  %87 = add nsw i32 %70, -128
  %88 = sext i32 %87 to i64
  %89 = getelementptr inbounds [65 x i16], [65 x i16]* @_ZN7libgav13dsp12_GLOBAL__N_17kCos128E, i64 0, i64 %88
  %90 = load i16, i16* %89, align 4
  %91 = sub i16 0, %90
  br label %97

92:                                               ; preds = %74
  %93 = sub nuw nsw i32 256, %70
  %94 = zext i32 %93 to i64
  %95 = getelementptr inbounds [65 x i16], [65 x i16]* @_ZN7libgav13dsp12_GLOBAL__N_17kCos128E, i64 0, i64 %94
  %96 = load i16, i16* %95, align 4
  br label %97

97:                                               ; preds = %92, %86, %80, %76
  %98 = phi i16 [ %79, %76 ], [ %85, %80 ], [ %91, %86 ], [ %96, %92 ]
  %99 = sext i16 %98 to i32
  %100 = mul nsw i32 %67, %99
  %101 = sext i32 %100 to i64
  %102 = mul nsw i32 %31, %99
  %103 = sext i32 %102 to i64
  br i1 %35, label %104, label %108

104:                                              ; preds = %97
  %105 = zext i32 %34 to i64
  %106 = getelementptr inbounds [65 x i16], [65 x i16]* @_ZN7libgav13dsp12_GLOBAL__N_17kCos128E, i64 0, i64 %105
  %107 = load i16, i16* %106, align 4
  br label %129

108:                                              ; preds = %97
  %109 = icmp ult i32 %34, 129
  br i1 %109, label %110, label %116

110:                                              ; preds = %108
  %111 = sub nuw nsw i32 128, %34
  %112 = sext i32 %111 to i64
  %113 = getelementptr inbounds [65 x i16], [65 x i16]* @_ZN7libgav13dsp12_GLOBAL__N_17kCos128E, i64 0, i64 %112
  %114 = load i16, i16* %113, align 4
  %115 = sub i16 0, %114
  br label %129

116:                                              ; preds = %108
  %117 = icmp ult i32 %34, 193
  br i1 %117, label %118, label %124

118:                                              ; preds = %116
  %119 = add nsw i32 %34, -128
  %120 = sext i32 %119 to i64
  %121 = getelementptr inbounds [65 x i16], [65 x i16]* @_ZN7libgav13dsp12_GLOBAL__N_17kCos128E, i64 0, i64 %120
  %122 = load i16, i16* %121, align 4
  %123 = sub i16 0, %122
  br label %129

124:                                              ; preds = %116
  %125 = sub nuw nsw i32 256, %34
  %126 = zext i32 %125 to i64
  %127 = getelementptr inbounds [65 x i16], [65 x i16]* @_ZN7libgav13dsp12_GLOBAL__N_17kCos128E, i64 0, i64 %126
  %128 = load i16, i16* %127, align 4
  br label %129

129:                                              ; preds = %104, %110, %118, %124
  %130 = phi i16 [ %107, %104 ], [ %115, %110 ], [ %123, %118 ], [ %128, %124 ]
  %131 = sext i16 %130 to i32
  %132 = mul nsw i32 %67, %131
  %133 = sext i32 %132 to i64
  %134 = add nsw i64 %103, 2048
  %135 = add nsw i64 %134, %133
  %136 = lshr i64 %135, 12
  %137 = trunc i64 %136 to i32
  store i32 %137, i32* %30, align 8
  %138 = add nsw i64 %65, 2048
  %139 = sub nsw i64 %138, %101
  %140 = lshr i64 %139, 12
  %141 = trunc i64 %140 to i32
  store i32 %141, i32* %66, align 4
  %142 = add nuw nsw i64 %26, 1
  %143 = icmp eq i64 %142, 8
  br i1 %143, label %171, label %25

144:                                              ; preds = %144, %171
  %145 = phi i64 [ 0, %171 ], [ %168, %144 ]
  %146 = getelementptr inbounds [16 x i8], [16 x i8]* @_ZN7libgav13dsp12_GLOBAL__N_128kAdstOutputPermutationLookupE, i64 0, i64 %145
  %147 = load i8, i8* %146, align 2
  %148 = sext i8 %147 to i64
  %149 = getelementptr inbounds [16 x i32], [16 x i32]* %2, i64 0, i64 %148
  %150 = load i32, i32* %149, align 4
  %151 = icmp eq i32 %150, 32768
  %152 = zext i1 %151 to i32
  %153 = sub nsw i32 %150, %152
  %154 = trunc i32 %153 to i16
  %155 = getelementptr inbounds i16, i16* %3, i64 %145
  store i16 %154, i16* %155, align 2
  %156 = or i64 %145, 1
  %157 = getelementptr inbounds [16 x i8], [16 x i8]* @_ZN7libgav13dsp12_GLOBAL__N_128kAdstOutputPermutationLookupE, i64 0, i64 %156
  %158 = load i8, i8* %157, align 1
  %159 = sext i8 %158 to i64
  %160 = getelementptr inbounds [16 x i32], [16 x i32]* %2, i64 0, i64 %159
  %161 = load i32, i32* %160, align 4
  %162 = sub nsw i32 0, %161
  %163 = icmp eq i32 %162, 32768
  %164 = zext i1 %163 to i32
  %165 = sub nsw i32 %162, %164
  %166 = trunc i32 %165 to i16
  %167 = getelementptr inbounds i16, i16* %3, i64 %156
  store i16 %166, i16* %167, align 2
  %168 = add nuw nsw i64 %145, 2
  %169 = icmp eq i64 %168, 16
  br i1 %169, label %170, label %144

170:                                              ; preds = %144
  call void @llvm.lifetime.end.p0i8(i64 64, i8* nonnull %4) #4
  ret void

171:                                              ; preds = %129
  %172 = getelementptr inbounds [16 x i32], [16 x i32]* %2, i64 0, i64 0
  %173 = getelementptr inbounds [16 x i32], [16 x i32]* %2, i64 0, i64 8
  %174 = getelementptr inbounds [16 x i32], [16 x i32]* %2, i64 0, i64 1
  %175 = getelementptr inbounds [16 x i32], [16 x i32]* %2, i64 0, i64 9
  %176 = getelementptr inbounds [16 x i32], [16 x i32]* %2, i64 0, i64 2
  %177 = getelementptr inbounds [16 x i32], [16 x i32]* %2, i64 0, i64 10
  %178 = getelementptr inbounds [16 x i32], [16 x i32]* %2, i64 0, i64 3
  %179 = bitcast [16 x i32]* %2 to <4 x i32>*
  %180 = load <4 x i32>, <4 x i32>* %179, align 16
  %181 = getelementptr inbounds [16 x i32], [16 x i32]* %2, i64 0, i64 11
  %182 = bitcast i32* %173 to <4 x i32>*
  %183 = load <4 x i32>, <4 x i32>* %182, align 16
  %184 = add nsw <4 x i32> %183, %180
  %185 = sub nsw <4 x i32> %180, %183
  %186 = icmp slt <4 x i32> %184, <i32 32767, i32 32767, i32 32767, i32 32767>
  %187 = select <4 x i1> %186, <4 x i32> %184, <4 x i32> <i32 32767, i32 32767, i32 32767, i32 32767>
  %188 = icmp sgt <4 x i32> %187, <i32 -32768, i32 -32768, i32 -32768, i32 -32768>
  %189 = select <4 x i1> %188, <4 x i32> %187, <4 x i32> <i32 -32768, i32 -32768, i32 -32768, i32 -32768>
  %190 = bitcast [16 x i32]* %2 to <4 x i32>*
  store <4 x i32> %189, <4 x i32>* %190, align 16
  %191 = icmp slt <4 x i32> %185, <i32 32767, i32 32767, i32 32767, i32 32767>
  %192 = select <4 x i1> %191, <4 x i32> %185, <4 x i32> <i32 32767, i32 32767, i32 32767, i32 32767>
  %193 = icmp sgt <4 x i32> %192, <i32 -32768, i32 -32768, i32 -32768, i32 -32768>
  %194 = select <4 x i1> %193, <4 x i32> %192, <4 x i32> <i32 -32768, i32 -32768, i32 -32768, i32 -32768>
  %195 = bitcast i32* %173 to <4 x i32>*
  store <4 x i32> %194, <4 x i32>* %195, align 16
  %196 = getelementptr inbounds [16 x i32], [16 x i32]* %2, i64 0, i64 4
  %197 = getelementptr inbounds [16 x i32], [16 x i32]* %2, i64 0, i64 12
  %198 = getelementptr inbounds [16 x i32], [16 x i32]* %2, i64 0, i64 5
  %199 = getelementptr inbounds [16 x i32], [16 x i32]* %2, i64 0, i64 13
  %200 = getelementptr inbounds [16 x i32], [16 x i32]* %2, i64 0, i64 6
  %201 = getelementptr inbounds [16 x i32], [16 x i32]* %2, i64 0, i64 14
  %202 = getelementptr inbounds [16 x i32], [16 x i32]* %2, i64 0, i64 7
  %203 = bitcast i32* %196 to <4 x i32>*
  %204 = load <4 x i32>, <4 x i32>* %203, align 16
  %205 = getelementptr inbounds [16 x i32], [16 x i32]* %2, i64 0, i64 15
  %206 = bitcast i32* %197 to <4 x i32>*
  %207 = load <4 x i32>, <4 x i32>* %206, align 16
  %208 = extractelement <4 x i32> %207, i32 0
  %209 = extractelement <4 x i32> %204, i32 0
  %210 = sub nsw i32 %209, %208
  %211 = icmp slt i32 %210, 32767
  %212 = select i1 %211, i32 %210, i32 32767
  %213 = icmp sgt i32 %212, -32768
  %214 = select i1 %213, i32 %212, i32 -32768
  %215 = extractelement <4 x i32> %207, i32 1
  %216 = extractelement <4 x i32> %204, i32 1
  %217 = sub nsw i32 %216, %215
  %218 = icmp slt i32 %217, 32767
  %219 = select i1 %218, i32 %217, i32 32767
  %220 = icmp sgt i32 %219, -32768
  %221 = select i1 %220, i32 %219, i32 -32768
  %222 = extractelement <4 x i32> %207, i32 2
  %223 = extractelement <4 x i32> %204, i32 2
  %224 = sub nsw i32 %223, %222
  %225 = icmp slt i32 %224, 32767
  %226 = select i1 %225, i32 %224, i32 32767
  %227 = icmp sgt i32 %226, -32768
  %228 = select i1 %227, i32 %226, i32 -32768
  %229 = add nsw <4 x i32> %207, %204
  %230 = extractelement <4 x i32> %207, i32 3
  %231 = extractelement <4 x i32> %204, i32 3
  %232 = sub nsw i32 %231, %230
  %233 = icmp slt <4 x i32> %229, <i32 32767, i32 32767, i32 32767, i32 32767>
  %234 = select <4 x i1> %233, <4 x i32> %229, <4 x i32> <i32 32767, i32 32767, i32 32767, i32 32767>
  %235 = icmp sgt <4 x i32> %234, <i32 -32768, i32 -32768, i32 -32768, i32 -32768>
  %236 = select <4 x i1> %235, <4 x i32> %234, <4 x i32> <i32 -32768, i32 -32768, i32 -32768, i32 -32768>
  %237 = bitcast i32* %196 to <4 x i32>*
  store <4 x i32> %236, <4 x i32>* %237, align 16
  %238 = icmp slt i32 %232, 32767
  %239 = select i1 %238, i32 %232, i32 32767
  %240 = icmp sgt i32 %239, -32768
  %241 = select i1 %240, i32 %239, i32 -32768
  %242 = load i32, i32* %173, align 16
  %243 = mul nsw i32 %242, 799
  %244 = sext i32 %243 to i64
  %245 = extractelement <4 x i32> %194, i32 1
  %246 = mul nsw i32 %245, 4017
  %247 = sext i32 %246 to i64
  %248 = mul nsw i32 %242, 4017
  %249 = sext i32 %248 to i64
  %250 = mul nsw i32 %245, 799
  %251 = sext i32 %250 to i64
  %252 = add nsw i64 %249, 2048
  %253 = add nsw i64 %252, %251
  %254 = lshr i64 %253, 12
  %255 = trunc i64 %254 to i32
  %256 = add nsw i64 %244, 2048
  %257 = sub nsw i64 %256, %247
  %258 = lshr i64 %257, 12
  %259 = trunc i64 %258 to i32
  %260 = mul nsw i32 %221, 4017
  %261 = mul nsw i32 %221, 799
  %262 = mul nsw i32 %214, 4017
  %263 = add nsw i32 %261, 2048
  %264 = add nsw i32 %263, %262
  %265 = ashr i32 %264, 12
  %266 = add nsw i32 %260, 2048
  %267 = mul nsw i32 %214, -799
  %268 = add nsw i32 %266, %267
  %269 = ashr i32 %268, 12
  %270 = extractelement <4 x i32> %194, i32 2
  %271 = mul nsw i32 %270, 3406
  %272 = mul nsw i32 %270, 2276
  %273 = extractelement <4 x i32> %194, i32 3
  %274 = mul nsw i32 %273, 3406
  %275 = add nsw i32 %272, 2048
  %276 = add nsw i32 %275, %274
  %277 = ashr i32 %276, 12
  %278 = add nsw i32 %271, 2048
  %279 = mul nsw i32 %273, -2276
  %280 = add nsw i32 %278, %279
  %281 = ashr i32 %280, 12
  store i32 %281, i32* %181, align 4
  %282 = mul nsw i32 %241, 2276
  %283 = mul nsw i32 %241, 3406
  %284 = mul nsw i32 %228, 2276
  %285 = add nsw i32 %283, 2048
  %286 = add nsw i32 %285, %284
  %287 = ashr i32 %286, 12
  %288 = add nsw i32 %282, 2048
  %289 = mul nsw i32 %228, -3406
  %290 = add nsw i32 %288, %289
  %291 = ashr i32 %290, 12
  %292 = load i32, i32* %172, align 16
  %293 = extractelement <4 x i32> %236, i32 0
  %294 = add nsw i32 %293, %292
  %295 = sub nsw i32 %292, %293
  %296 = icmp slt i32 %294, 32767
  %297 = select i1 %296, i32 %294, i32 32767
  %298 = icmp sgt i32 %297, -32768
  %299 = select i1 %298, i32 %297, i32 -32768
  store i32 %299, i32* %172, align 16
  %300 = icmp slt i32 %295, 32767
  %301 = select i1 %300, i32 %295, i32 32767
  %302 = icmp sgt i32 %301, -32768
  %303 = select i1 %302, i32 %301, i32 -32768
  %304 = add nsw i32 %269, %255
  %305 = sub nsw i32 %255, %269
  %306 = icmp slt i32 %304, 32767
  %307 = select i1 %306, i32 %304, i32 32767
  %308 = icmp sgt i32 %307, -32768
  %309 = select i1 %308, i32 %307, i32 -32768
  store i32 %309, i32* %173, align 16
  %310 = icmp slt i32 %305, 32767
  %311 = select i1 %310, i32 %305, i32 32767
  %312 = icmp sgt i32 %311, -32768
  %313 = select i1 %312, i32 %311, i32 -32768
  %314 = load i32, i32* %174, align 4
  %315 = extractelement <4 x i32> %236, i32 1
  %316 = add nsw i32 %315, %314
  %317 = sub nsw i32 %314, %315
  %318 = icmp slt i32 %316, 32767
  %319 = select i1 %318, i32 %316, i32 32767
  %320 = icmp sgt i32 %319, -32768
  %321 = select i1 %320, i32 %319, i32 -32768
  store i32 %321, i32* %174, align 4
  %322 = icmp slt i32 %317, 32767
  %323 = select i1 %322, i32 %317, i32 32767
  %324 = icmp sgt i32 %323, -32768
  %325 = select i1 %324, i32 %323, i32 -32768
  %326 = sub nsw i32 %259, %265
  %327 = icmp slt i32 %326, 32767
  %328 = select i1 %327, i32 %326, i32 32767
  %329 = icmp sgt i32 %328, -32768
  %330 = select i1 %329, i32 %328, i32 -32768
  %331 = extractelement <4 x i32> %189, i32 2
  %332 = extractelement <4 x i32> %236, i32 2
  %333 = add nsw i32 %332, %331
  %334 = sub nsw i32 %331, %332
  %335 = icmp slt i32 %333, 32767
  %336 = select i1 %335, i32 %333, i32 32767
  %337 = icmp sgt i32 %336, -32768
  %338 = select i1 %337, i32 %336, i32 -32768
  %339 = icmp slt i32 %334, 32767
  %340 = select i1 %339, i32 %334, i32 32767
  %341 = icmp sgt i32 %340, -32768
  %342 = select i1 %341, i32 %340, i32 -32768
  %343 = sub nsw i32 %277, %291
  %344 = icmp slt i32 %343, 32767
  %345 = select i1 %344, i32 %343, i32 32767
  %346 = icmp sgt i32 %345, -32768
  %347 = select i1 %346, i32 %345, i32 -32768
  %348 = extractelement <4 x i32> %189, i32 3
  %349 = extractelement <4 x i32> %236, i32 3
  %350 = add nsw i32 %349, %348
  %351 = sub nsw i32 %348, %349
  %352 = icmp slt i32 %350, 32767
  %353 = select i1 %352, i32 %350, i32 32767
  %354 = icmp sgt i32 %353, -32768
  %355 = select i1 %354, i32 %353, i32 -32768
  store i32 %355, i32* %178, align 4
  %356 = icmp slt i32 %351, 32767
  %357 = select i1 %356, i32 %351, i32 32767
  %358 = icmp sgt i32 %357, -32768
  %359 = select i1 %358, i32 %357, i32 -32768
  %360 = sub nsw i32 %281, %287
  %361 = icmp slt i32 %360, 32767
  %362 = select i1 %361, i32 %360, i32 32767
  %363 = icmp sgt i32 %362, -32768
  %364 = select i1 %363, i32 %362, i32 -32768
  %365 = mul nsw i32 %303, 1567
  %366 = mul nsw i32 %303, 3784
  %367 = mul nsw i32 %325, 1567
  %368 = add nsw i32 %366, 2048
  %369 = add nsw i32 %368, %367
  %370 = ashr i32 %369, 12
  %371 = add nsw i32 %365, 2048
  %372 = mul nsw i32 %325, -3784
  %373 = add nsw i32 %371, %372
  %374 = ashr i32 %373, 12
  store i32 %374, i32* %198, align 4
  %375 = mul nsw i32 %313, 1567
  %376 = mul nsw i32 %313, 3784
  %377 = mul nsw i32 %330, 1567
  %378 = add nsw i32 %376, 2048
  %379 = add nsw i32 %378, %377
  %380 = ashr i32 %379, 12
  %381 = add nsw i32 %375, 2048
  %382 = mul nsw i32 %330, -3784
  %383 = add nsw i32 %381, %382
  %384 = ashr i32 %383, 12
  store i32 %384, i32* %199, align 4
  %385 = mul nsw i32 %359, 3784
  %386 = mul nsw i32 %359, 1567
  %387 = mul nsw i32 %342, 3784
  %388 = add nsw i32 %386, 2048
  %389 = add nsw i32 %388, %387
  %390 = ashr i32 %389, 12
  %391 = add nsw i32 %385, 2048
  %392 = mul nsw i32 %342, -1567
  %393 = add nsw i32 %391, %392
  %394 = ashr i32 %393, 12
  %395 = mul nsw i32 %364, 3784
  %396 = mul nsw i32 %364, 1567
  %397 = mul nsw i32 %347, 3784
  %398 = add nsw i32 %396, 2048
  %399 = add nsw i32 %398, %397
  %400 = ashr i32 %399, 12
  %401 = add nsw i32 %395, 2048
  %402 = mul nsw i32 %347, -1567
  %403 = add nsw i32 %401, %402
  %404 = ashr i32 %403, 12
  %405 = add nsw i32 %338, %299
  %406 = sub nsw i32 %299, %338
  %407 = icmp slt i32 %405, 32767
  %408 = select i1 %407, i32 %405, i32 32767
  %409 = icmp sgt i32 %408, -32768
  %410 = select i1 %409, i32 %408, i32 -32768
  store i32 %410, i32* %172, align 16
  %411 = icmp slt i32 %406, 32767
  %412 = select i1 %411, i32 %406, i32 32767
  %413 = icmp sgt i32 %412, -32768
  %414 = select i1 %413, i32 %412, i32 -32768
  %415 = add nsw i32 %394, %370
  %416 = sub nsw i32 %370, %394
  %417 = icmp slt i32 %415, 32767
  %418 = select i1 %417, i32 %415, i32 32767
  %419 = icmp sgt i32 %418, -32768
  %420 = select i1 %419, i32 %418, i32 -32768
  store i32 %420, i32* %196, align 16
  %421 = icmp slt i32 %416, 32767
  %422 = select i1 %421, i32 %416, i32 32767
  %423 = icmp sgt i32 %422, -32768
  %424 = select i1 %423, i32 %422, i32 -32768
  %425 = insertelement <4 x i32> undef, i32 %265, i32 0
  %426 = insertelement <4 x i32> %425, i32 %291, i32 1
  %427 = insertelement <4 x i32> %426, i32 %287, i32 2
  %428 = insertelement <4 x i32> %427, i32 %404, i32 3
  %429 = insertelement <4 x i32> undef, i32 %259, i32 0
  %430 = insertelement <4 x i32> %429, i32 %277, i32 1
  %431 = insertelement <4 x i32> %430, i32 %281, i32 2
  %432 = insertelement <4 x i32> %431, i32 %380, i32 3
  %433 = add nsw <4 x i32> %428, %432
  %434 = icmp slt <4 x i32> %433, <i32 32767, i32 32767, i32 32767, i32 32767>
  %435 = select <4 x i1> %434, <4 x i32> %433, <4 x i32> <i32 32767, i32 32767, i32 32767, i32 32767>
  %436 = icmp sgt <4 x i32> %435, <i32 -32768, i32 -32768, i32 -32768, i32 -32768>
  %437 = select <4 x i1> %436, <4 x i32> %435, <4 x i32> <i32 -32768, i32 -32768, i32 -32768, i32 -32768>
  %438 = extractelement <4 x i32> %437, i32 1
  %439 = add nsw i32 %438, %309
  %440 = sub nsw i32 %309, %438
  %441 = icmp slt i32 %439, 32767
  %442 = select i1 %441, i32 %439, i32 32767
  %443 = icmp sgt i32 %442, -32768
  %444 = select i1 %443, i32 %442, i32 -32768
  store i32 %444, i32* %173, align 16
  %445 = icmp slt i32 %440, 32767
  %446 = select i1 %445, i32 %440, i32 32767
  %447 = icmp sgt i32 %446, -32768
  %448 = select i1 %447, i32 %446, i32 -32768
  %449 = sub nsw i32 %380, %404
  %450 = bitcast i32* %175 to <4 x i32>*
  store <4 x i32> %437, <4 x i32>* %450, align 4
  %451 = icmp slt i32 %449, 32767
  %452 = select i1 %451, i32 %449, i32 32767
  %453 = icmp sgt i32 %452, -32768
  %454 = select i1 %453, i32 %452, i32 -32768
  %455 = add nsw i32 %355, %321
  %456 = sub nsw i32 %321, %355
  %457 = icmp slt i32 %455, 32767
  %458 = select i1 %457, i32 %455, i32 32767
  %459 = icmp sgt i32 %458, -32768
  %460 = select i1 %459, i32 %458, i32 -32768
  store i32 %460, i32* %174, align 4
  %461 = icmp slt i32 %456, 32767
  %462 = select i1 %461, i32 %456, i32 32767
  %463 = icmp sgt i32 %462, -32768
  %464 = select i1 %463, i32 %462, i32 -32768
  %465 = add nsw i32 %390, %374
  %466 = sub nsw i32 %374, %390
  %467 = icmp slt i32 %465, 32767
  %468 = select i1 %467, i32 %465, i32 32767
  %469 = icmp sgt i32 %468, -32768
  %470 = select i1 %469, i32 %468, i32 -32768
  store i32 %470, i32* %198, align 4
  %471 = icmp slt i32 %466, 32767
  %472 = select i1 %471, i32 %466, i32 32767
  %473 = icmp sgt i32 %472, -32768
  %474 = select i1 %473, i32 %472, i32 -32768
  %475 = extractelement <4 x i32> %437, i32 0
  %476 = extractelement <4 x i32> %437, i32 2
  %477 = add nsw i32 %476, %475
  %478 = sub nsw i32 %475, %476
  %479 = icmp slt i32 %477, 32767
  %480 = select i1 %479, i32 %477, i32 32767
  %481 = icmp sgt i32 %480, -32768
  %482 = select i1 %481, i32 %480, i32 -32768
  store i32 %482, i32* %175, align 4
  %483 = icmp slt i32 %478, 32767
  %484 = select i1 %483, i32 %478, i32 32767
  %485 = icmp sgt i32 %484, -32768
  %486 = select i1 %485, i32 %484, i32 -32768
  %487 = add nsw i32 %400, %384
  %488 = sub nsw i32 %384, %400
  %489 = icmp slt i32 %487, 32767
  %490 = select i1 %489, i32 %487, i32 32767
  %491 = icmp sgt i32 %490, -32768
  %492 = select i1 %491, i32 %490, i32 -32768
  store i32 %492, i32* %199, align 4
  %493 = icmp slt i32 %488, 32767
  %494 = select i1 %493, i32 %488, i32 32767
  %495 = icmp sgt i32 %494, -32768
  %496 = select i1 %495, i32 %494, i32 -32768
  %497 = mul nsw i32 %414, 2896
  %498 = mul nsw i32 %464, 2896
  %499 = sext i32 %498 to i64
  %500 = add nsw i32 %497, 2048
  %501 = sext i32 %500 to i64
  %502 = add nsw i64 %501, %499
  %503 = lshr i64 %502, 12
  %504 = trunc i64 %503 to i32
  store i32 %504, i32* %176, align 8
  %505 = sub nsw i64 %501, %499
  %506 = lshr i64 %505, 12
  %507 = trunc i64 %506 to i32
  store i32 %507, i32* %178, align 4
  %508 = mul nsw i32 %424, 2896
  %509 = mul nsw i32 %474, 2896
  %510 = sext i32 %509 to i64
  %511 = add nsw i32 %508, 2048
  %512 = sext i32 %511 to i64
  %513 = add nsw i64 %512, %510
  %514 = lshr i64 %513, 12
  %515 = trunc i64 %514 to i32
  store i32 %515, i32* %200, align 8
  %516 = sub nsw i64 %512, %510
  %517 = lshr i64 %516, 12
  %518 = trunc i64 %517 to i32
  store i32 %518, i32* %202, align 4
  %519 = mul nsw i32 %448, 2896
  %520 = mul nsw i32 %486, 2896
  %521 = sext i32 %520 to i64
  %522 = add nsw i32 %519, 2048
  %523 = sext i32 %522 to i64
  %524 = add nsw i64 %523, %521
  %525 = lshr i64 %524, 12
  %526 = trunc i64 %525 to i32
  store i32 %526, i32* %177, align 8
  %527 = sub nsw i64 %523, %521
  %528 = lshr i64 %527, 12
  %529 = trunc i64 %528 to i32
  store i32 %529, i32* %181, align 4
  %530 = mul nsw i32 %454, 2896
  %531 = mul nsw i32 %496, 2896
  %532 = sext i32 %531 to i64
  %533 = add nsw i32 %530, 2048
  %534 = sext i32 %533 to i64
  %535 = add nsw i64 %534, %532
  %536 = lshr i64 %535, 12
  %537 = trunc i64 %536 to i32
  store i32 %537, i32* %201, align 8
  %538 = sub nsw i64 %534, %532
  %539 = lshr i64 %538, 12
  %540 = trunc i64 %539 to i32
  store i32 %540, i32* %205, align 4
  br label %144
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN7libgav13dsp12_GLOBAL__N_115TransformLoop_CILi10EitLNS0_11Transform1DE0EXadL_ZNS1_11DctDcOnly_CILi10EiLi2EEEvPvabibEEXadL_ZNS1_5Dct_CIiLi2EEEvS5_aEELb1EEEvNS_13TransformTypeENS_13TransformSizeEiS5_iiS5_(i8 zeroext, i8 zeroext, i32, i8*, i32, i32, i8* nocapture readnone) #0 {
  %8 = zext i8 %1 to i64
  %9 = getelementptr inbounds [19 x i8], [19 x i8]* @_ZN7libgav115kTransformWidthE, i64 0, i64 %8
  %10 = load i8, i8* %9, align 1
  %11 = zext i8 %10 to i32
  %12 = getelementptr inbounds [19 x i8], [19 x i8]* @_ZN7libgav119kTransformWidthLog2E, i64 0, i64 %8
  %13 = load i8, i8* %12, align 1
  %14 = zext i8 %13 to i32
  %15 = getelementptr inbounds [19 x i8], [19 x i8]* @_ZN7libgav120kTransformHeightLog2E, i64 0, i64 %8
  %16 = load i8, i8* %15, align 1
  %17 = zext i8 %16 to i32
  %18 = bitcast i8* %3 to i32*
  %19 = getelementptr inbounds [19 x i8], [19 x i8]* @_ZN7libgav13dsp12_GLOBAL__N_118kTransformRowShiftE, i64 0, i64 %8
  %20 = load i8, i8* %19, align 1
  %21 = zext i8 %20 to i32
  %22 = sub nsw i32 %14, %17
  %23 = icmp slt i32 %22, 0
  %24 = sub nsw i32 0, %22
  %25 = select i1 %23, i32 %24, i32 %22
  %26 = icmp eq i32 %25, 1
  %27 = icmp eq i32 %2, 1
  br i1 %27, label %92, label %28

28:                                               ; preds = %7
  %29 = icmp sgt i32 %2, 0
  br i1 %29, label %30, label %392

30:                                               ; preds = %28
  %31 = icmp ult i32 %11, 32
  %32 = select i1 %31, i32 %11, i32 32
  %33 = icmp slt i32 %32, 1
  %34 = zext i8 %10 to i64
  %35 = lshr i64 524276, %8
  %36 = and i64 %35, 1
  %37 = icmp eq i64 %36, 0
  %38 = icmp eq i8 %10, 0
  %39 = shl i32 1, %21
  %40 = ashr i32 %39, 1
  %41 = zext i32 %32 to i64
  %42 = zext i32 %2 to i64
  %43 = xor i1 %26, true
  %44 = or i1 %33, %43
  %45 = or i1 %37, %38
  %46 = zext i8 %10 to i64
  %47 = add nsw i64 %34, -1
  %48 = icmp ugt i64 %41, 1
  %49 = select i1 %48, i64 %41, i64 1
  %50 = and i64 %49, 56
  %51 = add nsw i64 %50, -8
  %52 = lshr exact i64 %51, 3
  %53 = add nuw nsw i64 %52, 1
  %54 = add nsw i64 %34, -9
  %55 = lshr i64 %54, 3
  %56 = add nuw nsw i64 %55, 1
  %57 = and i64 %34, 248
  %58 = add nsw i64 %57, -8
  %59 = lshr exact i64 %58, 3
  %60 = add nuw nsw i64 %59, 1
  %61 = icmp ult i64 %49, 8
  %62 = and i64 %49, 56
  %63 = and i64 %53, 1
  %64 = icmp eq i64 %51, 0
  %65 = sub nuw nsw i64 %53, %63
  %66 = icmp eq i64 %63, 0
  %67 = icmp eq i64 %49, %62
  %68 = icmp eq i8 %10, 1
  %69 = icmp ult i64 %47, 8
  %70 = and i64 %47, -8
  %71 = or i64 %70, 1
  %72 = insertelement <4 x i32> undef, i32 %40, i32 0
  %73 = shufflevector <4 x i32> %72, <4 x i32> undef, <4 x i32> zeroinitializer
  %74 = insertelement <4 x i32> undef, i32 %40, i32 0
  %75 = shufflevector <4 x i32> %74, <4 x i32> undef, <4 x i32> zeroinitializer
  %76 = insertelement <4 x i32> undef, i32 %21, i32 0
  %77 = shufflevector <4 x i32> %76, <4 x i32> undef, <4 x i32> zeroinitializer
  %78 = insertelement <4 x i32> undef, i32 %21, i32 0
  %79 = shufflevector <4 x i32> %78, <4 x i32> undef, <4 x i32> zeroinitializer
  %80 = and i64 %56, 1
  %81 = icmp eq i64 %55, 0
  %82 = sub nuw nsw i64 %56, %80
  %83 = icmp eq i64 %80, 0
  %84 = icmp eq i64 %47, %70
  %85 = icmp ult i8 %10, 8
  %86 = and i64 %34, 248
  %87 = and i64 %60, 1
  %88 = icmp eq i64 %58, 0
  %89 = sub nuw nsw i64 %60, %87
  %90 = icmp eq i64 %87, 0
  %91 = icmp eq i64 %86, %34
  br label %124

92:                                               ; preds = %7
  %93 = load i32, i32* %18, align 4
  br i1 %26, label %94, label %98

94:                                               ; preds = %92
  %95 = mul nsw i32 %93, 2896
  %96 = add nsw i32 %95, 2048
  %97 = ashr i32 %96, 12
  store i32 %97, i32* %18, align 4
  br label %98

98:                                               ; preds = %94, %92
  %99 = phi i32 [ %97, %94 ], [ %93, %92 ]
  %100 = mul nsw i32 %99, 2896
  %101 = sext i32 %100 to i64
  %102 = add nsw i64 %101, 2048
  %103 = ashr i64 %102, 12
  %104 = trunc i64 %103 to i32
  store i32 %104, i32* %18, align 4
  %105 = getelementptr inbounds i8, i8* %3, i64 4
  %106 = bitcast i8* %105 to i32*
  store i32 %104, i32* %106, align 4
  %107 = lshr i64 524276, %8
  %108 = and i64 %107, 1
  %109 = icmp eq i64 %108, 0
  br i1 %109, label %115, label %110

110:                                              ; preds = %98
  %111 = shl i32 1, %21
  %112 = ashr i32 %111, 1
  %113 = add nsw i32 %112, %104
  %114 = ashr i32 %113, %21
  store i32 %114, i32* %18, align 4
  br label %115

115:                                              ; preds = %98, %110
  %116 = phi i32 [ %114, %110 ], [ %104, %98 ]
  %117 = icmp slt i32 %116, 32767
  %118 = select i1 %117, i32 %116, i32 32767
  %119 = icmp sgt i32 %118, -32768
  %120 = select i1 %119, i32 %118, i32 -32768
  %121 = insertelement <4 x i32> undef, i32 %120, i32 0
  %122 = shufflevector <4 x i32> %121, <4 x i32> undef, <4 x i32> zeroinitializer
  %123 = bitcast i8* %3 to <4 x i32>*
  store <4 x i32> %122, <4 x i32>* %123, align 4
  br label %392

124:                                              ; preds = %389, %30
  %125 = phi i64 [ 0, %30 ], [ %390, %389 ]
  %126 = mul nuw nsw i64 %125, %34
  br i1 %44, label %194, label %127

127:                                              ; preds = %124
  %128 = getelementptr inbounds i32, i32* %18, i64 %126
  br i1 %61, label %183, label %129

129:                                              ; preds = %127
  br i1 %64, label %165, label %130

130:                                              ; preds = %129, %130
  %131 = phi i64 [ %162, %130 ], [ 0, %129 ]
  %132 = phi i64 [ %163, %130 ], [ %65, %129 ]
  %133 = getelementptr inbounds i32, i32* %128, i64 %131
  %134 = bitcast i32* %133 to <4 x i32>*
  %135 = load <4 x i32>, <4 x i32>* %134, align 4
  %136 = getelementptr inbounds i32, i32* %133, i64 4
  %137 = bitcast i32* %136 to <4 x i32>*
  %138 = load <4 x i32>, <4 x i32>* %137, align 4
  %139 = mul nsw <4 x i32> %135, <i32 2896, i32 2896, i32 2896, i32 2896>
  %140 = mul nsw <4 x i32> %138, <i32 2896, i32 2896, i32 2896, i32 2896>
  %141 = add nsw <4 x i32> %139, <i32 2048, i32 2048, i32 2048, i32 2048>
  %142 = add nsw <4 x i32> %140, <i32 2048, i32 2048, i32 2048, i32 2048>
  %143 = ashr <4 x i32> %141, <i32 12, i32 12, i32 12, i32 12>
  %144 = ashr <4 x i32> %142, <i32 12, i32 12, i32 12, i32 12>
  %145 = bitcast i32* %133 to <4 x i32>*
  store <4 x i32> %143, <4 x i32>* %145, align 4
  %146 = bitcast i32* %136 to <4 x i32>*
  store <4 x i32> %144, <4 x i32>* %146, align 4
  %147 = or i64 %131, 8
  %148 = getelementptr inbounds i32, i32* %128, i64 %147
  %149 = bitcast i32* %148 to <4 x i32>*
  %150 = load <4 x i32>, <4 x i32>* %149, align 4
  %151 = getelementptr inbounds i32, i32* %148, i64 4
  %152 = bitcast i32* %151 to <4 x i32>*
  %153 = load <4 x i32>, <4 x i32>* %152, align 4
  %154 = mul nsw <4 x i32> %150, <i32 2896, i32 2896, i32 2896, i32 2896>
  %155 = mul nsw <4 x i32> %153, <i32 2896, i32 2896, i32 2896, i32 2896>
  %156 = add nsw <4 x i32> %154, <i32 2048, i32 2048, i32 2048, i32 2048>
  %157 = add nsw <4 x i32> %155, <i32 2048, i32 2048, i32 2048, i32 2048>
  %158 = ashr <4 x i32> %156, <i32 12, i32 12, i32 12, i32 12>
  %159 = ashr <4 x i32> %157, <i32 12, i32 12, i32 12, i32 12>
  %160 = bitcast i32* %148 to <4 x i32>*
  store <4 x i32> %158, <4 x i32>* %160, align 4
  %161 = bitcast i32* %151 to <4 x i32>*
  store <4 x i32> %159, <4 x i32>* %161, align 4
  %162 = add i64 %131, 16
  %163 = add i64 %132, -2
  %164 = icmp eq i64 %163, 0
  br i1 %164, label %165, label %130, !llvm.loop !59

165:                                              ; preds = %130, %129
  %166 = phi i64 [ 0, %129 ], [ %162, %130 ]
  br i1 %66, label %182, label %167

167:                                              ; preds = %165
  %168 = getelementptr inbounds i32, i32* %128, i64 %166
  %169 = bitcast i32* %168 to <4 x i32>*
  %170 = load <4 x i32>, <4 x i32>* %169, align 4
  %171 = getelementptr inbounds i32, i32* %168, i64 4
  %172 = bitcast i32* %171 to <4 x i32>*
  %173 = load <4 x i32>, <4 x i32>* %172, align 4
  %174 = mul nsw <4 x i32> %170, <i32 2896, i32 2896, i32 2896, i32 2896>
  %175 = mul nsw <4 x i32> %173, <i32 2896, i32 2896, i32 2896, i32 2896>
  %176 = add nsw <4 x i32> %174, <i32 2048, i32 2048, i32 2048, i32 2048>
  %177 = add nsw <4 x i32> %175, <i32 2048, i32 2048, i32 2048, i32 2048>
  %178 = ashr <4 x i32> %176, <i32 12, i32 12, i32 12, i32 12>
  %179 = ashr <4 x i32> %177, <i32 12, i32 12, i32 12, i32 12>
  %180 = bitcast i32* %168 to <4 x i32>*
  store <4 x i32> %178, <4 x i32>* %180, align 4
  %181 = bitcast i32* %171 to <4 x i32>*
  store <4 x i32> %179, <4 x i32>* %181, align 4
  br label %182

182:                                              ; preds = %165, %167
  br i1 %67, label %194, label %183

183:                                              ; preds = %182, %127
  %184 = phi i64 [ 0, %127 ], [ %62, %182 ]
  br label %185

185:                                              ; preds = %183, %185
  %186 = phi i64 [ %192, %185 ], [ %184, %183 ]
  %187 = getelementptr inbounds i32, i32* %128, i64 %186
  %188 = load i32, i32* %187, align 4
  %189 = mul nsw i32 %188, 2896
  %190 = add nsw i32 %189, 2048
  %191 = ashr i32 %190, 12
  store i32 %191, i32* %187, align 4
  %192 = add nuw nsw i64 %186, 1
  %193 = icmp ult i64 %192, %41
  br i1 %193, label %185, label %194, !llvm.loop !60

194:                                              ; preds = %185, %182, %124
  %195 = getelementptr inbounds i32, i32* %18, i64 %126
  %196 = load i32, i32* %195, align 4
  %197 = getelementptr inbounds i32, i32* %195, i64 1
  %198 = load i32, i32* %197, align 4
  %199 = getelementptr inbounds i32, i32* %195, i64 2
  %200 = load i32, i32* %199, align 4
  %201 = getelementptr inbounds i32, i32* %195, i64 3
  %202 = load i32, i32* %201, align 4
  %203 = mul nsw i32 %196, 2896
  %204 = sext i32 %203 to i64
  %205 = mul nsw i32 %200, 2896
  %206 = sext i32 %205 to i64
  %207 = add nsw i64 %204, 2048
  %208 = add nsw i64 %207, %206
  %209 = lshr i64 %208, 12
  %210 = trunc i64 %209 to i32
  %211 = sub nsw i64 %207, %206
  %212 = lshr i64 %211, 12
  %213 = trunc i64 %212 to i32
  %214 = mul nsw i32 %198, 1567
  %215 = sext i32 %214 to i64
  %216 = mul nsw i32 %202, 3784
  %217 = sext i32 %216 to i64
  %218 = mul nsw i32 %198, 3784
  %219 = sext i32 %218 to i64
  %220 = mul nsw i32 %202, 1567
  %221 = sext i32 %220 to i64
  %222 = add nsw i64 %215, 2048
  %223 = sub nsw i64 %222, %217
  %224 = lshr i64 %223, 12
  %225 = trunc i64 %224 to i32
  %226 = add nsw i64 %219, 2048
  %227 = add nsw i64 %226, %221
  %228 = lshr i64 %227, 12
  %229 = trunc i64 %228 to i32
  %230 = add nsw i32 %229, %210
  %231 = sub nsw i32 %210, %229
  %232 = icmp slt i32 %230, 131071
  %233 = select i1 %232, i32 %230, i32 131071
  %234 = icmp sgt i32 %233, -131072
  %235 = select i1 %234, i32 %233, i32 -131072
  store i32 %235, i32* %195, align 4
  %236 = icmp slt i32 %231, 131071
  %237 = select i1 %236, i32 %231, i32 131071
  %238 = icmp sgt i32 %237, -131072
  %239 = select i1 %238, i32 %237, i32 -131072
  store i32 %239, i32* %201, align 4
  %240 = add nsw i32 %225, %213
  %241 = sub nsw i32 %213, %225
  %242 = icmp slt i32 %240, 131071
  %243 = select i1 %242, i32 %240, i32 131071
  %244 = icmp sgt i32 %243, -131072
  %245 = select i1 %244, i32 %243, i32 -131072
  store i32 %245, i32* %197, align 4
  %246 = icmp slt i32 %241, 131071
  %247 = select i1 %246, i32 %241, i32 131071
  %248 = icmp sgt i32 %247, -131072
  %249 = select i1 %248, i32 %247, i32 -131072
  store i32 %249, i32* %199, align 4
  br i1 %45, label %315, label %250

250:                                              ; preds = %194
  %251 = add nsw i32 %235, %40
  %252 = ashr i32 %251, %21
  store i32 %252, i32* %195, align 4
  br i1 %68, label %315, label %253

253:                                              ; preds = %250
  br i1 %69, label %304, label %254

254:                                              ; preds = %253
  br i1 %81, label %287, label %255

255:                                              ; preds = %254, %255
  %256 = phi i64 [ %284, %255 ], [ 0, %254 ]
  %257 = phi i64 [ %285, %255 ], [ %82, %254 ]
  %258 = or i64 %256, 1
  %259 = getelementptr inbounds i32, i32* %195, i64 %258
  %260 = bitcast i32* %259 to <4 x i32>*
  %261 = load <4 x i32>, <4 x i32>* %260, align 4
  %262 = getelementptr inbounds i32, i32* %259, i64 4
  %263 = bitcast i32* %262 to <4 x i32>*
  %264 = load <4 x i32>, <4 x i32>* %263, align 4
  %265 = add nsw <4 x i32> %261, %73
  %266 = add nsw <4 x i32> %264, %75
  %267 = ashr <4 x i32> %265, %77
  %268 = ashr <4 x i32> %266, %79
  %269 = bitcast i32* %259 to <4 x i32>*
  store <4 x i32> %267, <4 x i32>* %269, align 4
  %270 = bitcast i32* %262 to <4 x i32>*
  store <4 x i32> %268, <4 x i32>* %270, align 4
  %271 = or i64 %256, 9
  %272 = getelementptr inbounds i32, i32* %195, i64 %271
  %273 = bitcast i32* %272 to <4 x i32>*
  %274 = load <4 x i32>, <4 x i32>* %273, align 4
  %275 = getelementptr inbounds i32, i32* %272, i64 4
  %276 = bitcast i32* %275 to <4 x i32>*
  %277 = load <4 x i32>, <4 x i32>* %276, align 4
  %278 = add nsw <4 x i32> %274, %73
  %279 = add nsw <4 x i32> %277, %75
  %280 = ashr <4 x i32> %278, %77
  %281 = ashr <4 x i32> %279, %79
  %282 = bitcast i32* %272 to <4 x i32>*
  store <4 x i32> %280, <4 x i32>* %282, align 4
  %283 = bitcast i32* %275 to <4 x i32>*
  store <4 x i32> %281, <4 x i32>* %283, align 4
  %284 = add i64 %256, 16
  %285 = add i64 %257, -2
  %286 = icmp eq i64 %285, 0
  br i1 %286, label %287, label %255, !llvm.loop !61

287:                                              ; preds = %255, %254
  %288 = phi i64 [ 0, %254 ], [ %284, %255 ]
  br i1 %83, label %303, label %289

289:                                              ; preds = %287
  %290 = or i64 %288, 1
  %291 = getelementptr inbounds i32, i32* %195, i64 %290
  %292 = bitcast i32* %291 to <4 x i32>*
  %293 = load <4 x i32>, <4 x i32>* %292, align 4
  %294 = getelementptr inbounds i32, i32* %291, i64 4
  %295 = bitcast i32* %294 to <4 x i32>*
  %296 = load <4 x i32>, <4 x i32>* %295, align 4
  %297 = add nsw <4 x i32> %293, %73
  %298 = add nsw <4 x i32> %296, %75
  %299 = ashr <4 x i32> %297, %77
  %300 = ashr <4 x i32> %298, %79
  %301 = bitcast i32* %291 to <4 x i32>*
  store <4 x i32> %299, <4 x i32>* %301, align 4
  %302 = bitcast i32* %294 to <4 x i32>*
  store <4 x i32> %300, <4 x i32>* %302, align 4
  br label %303

303:                                              ; preds = %287, %289
  br i1 %84, label %315, label %304

304:                                              ; preds = %303, %253
  %305 = phi i64 [ 1, %253 ], [ %71, %303 ]
  br label %306

306:                                              ; preds = %304, %306
  %307 = phi i64 [ %313, %306 ], [ %305, %304 ]
  %308 = getelementptr inbounds i32, i32* %195, i64 %307
  %309 = load i32, i32* %308, align 4
  %310 = getelementptr inbounds i32, i32* %195, i64 %307
  %311 = add nsw i32 %309, %40
  %312 = ashr i32 %311, %21
  store i32 %312, i32* %310, align 4
  %313 = add nuw nsw i64 %307, 1
  %314 = icmp eq i64 %313, %46
  br i1 %314, label %315, label %306, !llvm.loop !62

315:                                              ; preds = %306, %250, %303, %194
  br i1 %38, label %389, label %316

316:                                              ; preds = %315
  br i1 %85, label %377, label %317

317:                                              ; preds = %316
  br i1 %88, label %357, label %318

318:                                              ; preds = %317, %318
  %319 = phi i64 [ %354, %318 ], [ 0, %317 ]
  %320 = phi i64 [ %355, %318 ], [ %89, %317 ]
  %321 = getelementptr inbounds i32, i32* %195, i64 %319
  %322 = bitcast i32* %321 to <4 x i32>*
  %323 = load <4 x i32>, <4 x i32>* %322, align 4
  %324 = getelementptr inbounds i32, i32* %321, i64 4
  %325 = bitcast i32* %324 to <4 x i32>*
  %326 = load <4 x i32>, <4 x i32>* %325, align 4
  %327 = icmp slt <4 x i32> %323, <i32 32767, i32 32767, i32 32767, i32 32767>
  %328 = icmp slt <4 x i32> %326, <i32 32767, i32 32767, i32 32767, i32 32767>
  %329 = select <4 x i1> %327, <4 x i32> %323, <4 x i32> <i32 32767, i32 32767, i32 32767, i32 32767>
  %330 = select <4 x i1> %328, <4 x i32> %326, <4 x i32> <i32 32767, i32 32767, i32 32767, i32 32767>
  %331 = icmp sgt <4 x i32> %329, <i32 -32768, i32 -32768, i32 -32768, i32 -32768>
  %332 = icmp sgt <4 x i32> %330, <i32 -32768, i32 -32768, i32 -32768, i32 -32768>
  %333 = select <4 x i1> %331, <4 x i32> %329, <4 x i32> <i32 -32768, i32 -32768, i32 -32768, i32 -32768>
  %334 = select <4 x i1> %332, <4 x i32> %330, <4 x i32> <i32 -32768, i32 -32768, i32 -32768, i32 -32768>
  %335 = bitcast i32* %321 to <4 x i32>*
  store <4 x i32> %333, <4 x i32>* %335, align 4
  %336 = bitcast i32* %324 to <4 x i32>*
  store <4 x i32> %334, <4 x i32>* %336, align 4
  %337 = or i64 %319, 8
  %338 = getelementptr inbounds i32, i32* %195, i64 %337
  %339 = bitcast i32* %338 to <4 x i32>*
  %340 = load <4 x i32>, <4 x i32>* %339, align 4
  %341 = getelementptr inbounds i32, i32* %338, i64 4
  %342 = bitcast i32* %341 to <4 x i32>*
  %343 = load <4 x i32>, <4 x i32>* %342, align 4
  %344 = icmp slt <4 x i32> %340, <i32 32767, i32 32767, i32 32767, i32 32767>
  %345 = icmp slt <4 x i32> %343, <i32 32767, i32 32767, i32 32767, i32 32767>
  %346 = select <4 x i1> %344, <4 x i32> %340, <4 x i32> <i32 32767, i32 32767, i32 32767, i32 32767>
  %347 = select <4 x i1> %345, <4 x i32> %343, <4 x i32> <i32 32767, i32 32767, i32 32767, i32 32767>
  %348 = icmp sgt <4 x i32> %346, <i32 -32768, i32 -32768, i32 -32768, i32 -32768>
  %349 = icmp sgt <4 x i32> %347, <i32 -32768, i32 -32768, i32 -32768, i32 -32768>
  %350 = select <4 x i1> %348, <4 x i32> %346, <4 x i32> <i32 -32768, i32 -32768, i32 -32768, i32 -32768>
  %351 = select <4 x i1> %349, <4 x i32> %347, <4 x i32> <i32 -32768, i32 -32768, i32 -32768, i32 -32768>
  %352 = bitcast i32* %338 to <4 x i32>*
  store <4 x i32> %350, <4 x i32>* %352, align 4
  %353 = bitcast i32* %341 to <4 x i32>*
  store <4 x i32> %351, <4 x i32>* %353, align 4
  %354 = add i64 %319, 16
  %355 = add i64 %320, -2
  %356 = icmp eq i64 %355, 0
  br i1 %356, label %357, label %318, !llvm.loop !63

357:                                              ; preds = %318, %317
  %358 = phi i64 [ 0, %317 ], [ %354, %318 ]
  br i1 %90, label %376, label %359

359:                                              ; preds = %357
  %360 = getelementptr inbounds i32, i32* %195, i64 %358
  %361 = bitcast i32* %360 to <4 x i32>*
  %362 = load <4 x i32>, <4 x i32>* %361, align 4
  %363 = getelementptr inbounds i32, i32* %360, i64 4
  %364 = bitcast i32* %363 to <4 x i32>*
  %365 = load <4 x i32>, <4 x i32>* %364, align 4
  %366 = icmp slt <4 x i32> %362, <i32 32767, i32 32767, i32 32767, i32 32767>
  %367 = icmp slt <4 x i32> %365, <i32 32767, i32 32767, i32 32767, i32 32767>
  %368 = select <4 x i1> %366, <4 x i32> %362, <4 x i32> <i32 32767, i32 32767, i32 32767, i32 32767>
  %369 = select <4 x i1> %367, <4 x i32> %365, <4 x i32> <i32 32767, i32 32767, i32 32767, i32 32767>
  %370 = icmp sgt <4 x i32> %368, <i32 -32768, i32 -32768, i32 -32768, i32 -32768>
  %371 = icmp sgt <4 x i32> %369, <i32 -32768, i32 -32768, i32 -32768, i32 -32768>
  %372 = select <4 x i1> %370, <4 x i32> %368, <4 x i32> <i32 -32768, i32 -32768, i32 -32768, i32 -32768>
  %373 = select <4 x i1> %371, <4 x i32> %369, <4 x i32> <i32 -32768, i32 -32768, i32 -32768, i32 -32768>
  %374 = bitcast i32* %360 to <4 x i32>*
  store <4 x i32> %372, <4 x i32>* %374, align 4
  %375 = bitcast i32* %363 to <4 x i32>*
  store <4 x i32> %373, <4 x i32>* %375, align 4
  br label %376

376:                                              ; preds = %357, %359
  br i1 %91, label %389, label %377

377:                                              ; preds = %376, %316
  %378 = phi i64 [ 0, %316 ], [ %86, %376 ]
  br label %379

379:                                              ; preds = %377, %379
  %380 = phi i64 [ %387, %379 ], [ %378, %377 ]
  %381 = getelementptr inbounds i32, i32* %195, i64 %380
  %382 = load i32, i32* %381, align 4
  %383 = icmp slt i32 %382, 32767
  %384 = select i1 %383, i32 %382, i32 32767
  %385 = icmp sgt i32 %384, -32768
  %386 = select i1 %385, i32 %384, i32 -32768
  store i32 %386, i32* %381, align 4
  %387 = add nuw nsw i64 %380, 1
  %388 = icmp eq i64 %387, %34
  br i1 %388, label %389, label %379, !llvm.loop !64

389:                                              ; preds = %379, %376, %315
  %390 = add nuw nsw i64 %125, 1
  %391 = icmp eq i64 %390, %42
  br i1 %391, label %392, label %124

392:                                              ; preds = %389, %28, %115
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN7libgav13dsp12_GLOBAL__N_115TransformLoop_CILi10EitLNS0_11Transform1DE0EXadL_ZNS1_11DctDcOnly_CILi10EiLi2EEEvPvabibEEXadL_ZNS1_5Dct_CIiLi2EEEvS5_aEELb0EEEvNS_13TransformTypeENS_13TransformSizeEiS5_iiS5_(i8 zeroext, i8 zeroext, i32, i8*, i32, i32, i8* nocapture readonly) #0 {
  %8 = alloca [64 x i32], align 16
  %9 = zext i8 %1 to i64
  %10 = getelementptr inbounds [19 x i8], [19 x i8]* @_ZN7libgav115kTransformWidthE, i64 0, i64 %9
  %11 = load i8, i8* %10, align 1
  %12 = zext i8 %11 to i32
  %13 = getelementptr inbounds [19 x i8], [19 x i8]* @_ZN7libgav116kTransformHeightE, i64 0, i64 %9
  %14 = load i8, i8* %13, align 1
  %15 = bitcast i8* %3 to i32*
  %16 = zext i8 %0 to i32
  %17 = shl i32 1, %16
  %18 = and i32 %17, 33104
  %19 = icmp eq i32 %18, 0
  %20 = bitcast [64 x i32]* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 256, i8* nonnull %20) #4
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %20, i8 -86, i64 256, i1 false)
  %21 = icmp eq i8 %11, 0
  br i1 %21, label %44, label %22

22:                                               ; preds = %7
  %23 = zext i8 %11 to i64
  %24 = icmp eq i32 %2, 1
  %25 = getelementptr inbounds [64 x i32], [64 x i32]* %8, i64 0, i64 0
  %26 = getelementptr inbounds [64 x i32], [64 x i32]* %8, i64 0, i64 1
  %27 = getelementptr inbounds [64 x i32], [64 x i32]* %8, i64 0, i64 2
  %28 = getelementptr inbounds [64 x i32], [64 x i32]* %8, i64 0, i64 3
  %29 = icmp eq i8 %14, 0
  %30 = getelementptr inbounds i8, i8* %6, i64 4
  %31 = bitcast i8* %30 to i32*
  %32 = getelementptr inbounds i8, i8* %6, i64 8
  %33 = bitcast i8* %32 to i16**
  %34 = zext i8 %14 to i64
  %35 = sext i32 %5 to i64
  %36 = sext i32 %4 to i64
  %37 = zext i8 %11 to i64
  %38 = add nsw i64 %34, -1
  %39 = and i64 %34, 3
  %40 = icmp ult i64 %38, 3
  %41 = sub nsw i64 %34, %39
  %42 = icmp eq i64 %39, 0
  %43 = bitcast [64 x i32]* %8 to <4 x i32>*
  br label %45

44:                                               ; preds = %160, %7
  call void @llvm.lifetime.end.p0i8(i64 256, i8* nonnull %20) #4
  ret void

45:                                               ; preds = %160, %22
  %46 = phi i64 [ 0, %22 ], [ %161, %160 ]
  %47 = phi i32 [ 0, %22 ], [ %162, %160 ]
  %48 = xor i32 %47, -1
  %49 = add nsw i32 %48, %12
  %50 = trunc i64 %46 to i32
  %51 = select i1 %19, i32 %50, i32 %49
  %52 = sext i32 %51 to i64
  %53 = getelementptr inbounds i32, i32* %15, i64 %52
  br i1 %40, label %79, label %54

54:                                               ; preds = %45, %54
  %55 = phi i64 [ %76, %54 ], [ 0, %45 ]
  %56 = phi i64 [ %77, %54 ], [ %41, %45 ]
  %57 = mul nuw nsw i64 %55, %23
  %58 = getelementptr inbounds i32, i32* %53, i64 %57
  %59 = load i32, i32* %58, align 4
  %60 = getelementptr inbounds [64 x i32], [64 x i32]* %8, i64 0, i64 %55
  store i32 %59, i32* %60, align 16
  %61 = or i64 %55, 1
  %62 = mul nuw nsw i64 %61, %23
  %63 = getelementptr inbounds i32, i32* %53, i64 %62
  %64 = load i32, i32* %63, align 4
  %65 = getelementptr inbounds [64 x i32], [64 x i32]* %8, i64 0, i64 %61
  store i32 %64, i32* %65, align 4
  %66 = or i64 %55, 2
  %67 = mul nuw nsw i64 %66, %23
  %68 = getelementptr inbounds i32, i32* %53, i64 %67
  %69 = load i32, i32* %68, align 4
  %70 = getelementptr inbounds [64 x i32], [64 x i32]* %8, i64 0, i64 %66
  store i32 %69, i32* %70, align 8
  %71 = or i64 %55, 3
  %72 = mul nuw nsw i64 %71, %23
  %73 = getelementptr inbounds i32, i32* %53, i64 %72
  %74 = load i32, i32* %73, align 4
  %75 = getelementptr inbounds [64 x i32], [64 x i32]* %8, i64 0, i64 %71
  store i32 %74, i32* %75, align 4
  %76 = add nuw nsw i64 %55, 4
  %77 = add i64 %56, -4
  %78 = icmp eq i64 %77, 0
  br i1 %78, label %79, label %54

79:                                               ; preds = %54, %45
  %80 = phi i64 [ 0, %45 ], [ %76, %54 ]
  br i1 %42, label %91, label %81

81:                                               ; preds = %79, %81
  %82 = phi i64 [ %88, %81 ], [ %80, %79 ]
  %83 = phi i64 [ %89, %81 ], [ %39, %79 ]
  %84 = mul nuw nsw i64 %82, %23
  %85 = getelementptr inbounds i32, i32* %53, i64 %84
  %86 = load i32, i32* %85, align 4
  %87 = getelementptr inbounds [64 x i32], [64 x i32]* %8, i64 0, i64 %82
  store i32 %86, i32* %87, align 4
  %88 = add nuw nsw i64 %82, 1
  %89 = add i64 %83, -1
  %90 = icmp eq i64 %89, 0
  br i1 %90, label %91, label %81, !llvm.loop !65

91:                                               ; preds = %81, %79
  %92 = load i32, i32* %25, align 16
  br i1 %24, label %93, label %105

93:                                               ; preds = %91
  %94 = mul nsw i32 %92, 2896
  %95 = sext i32 %94 to i64
  %96 = add nsw i64 %95, 2048
  %97 = ashr i64 %96, 12
  %98 = trunc i64 %97 to i32
  %99 = icmp slt i32 %98, 32767
  %100 = select i1 %99, i32 %98, i32 32767
  %101 = icmp sgt i32 %100, -32768
  %102 = select i1 %101, i32 %100, i32 -32768
  %103 = insertelement <4 x i32> undef, i32 %102, i32 0
  %104 = shufflevector <4 x i32> %103, <4 x i32> undef, <4 x i32> zeroinitializer
  store <4 x i32> %104, <4 x i32>* %43, align 16
  br label %156

105:                                              ; preds = %91
  %106 = load i32, i32* %26, align 4
  %107 = load i32, i32* %27, align 8
  %108 = load i32, i32* %28, align 4
  %109 = mul nsw i32 %92, 2896
  %110 = sext i32 %109 to i64
  %111 = mul nsw i32 %107, 2896
  %112 = sext i32 %111 to i64
  %113 = add nsw i64 %110, 2048
  %114 = add nsw i64 %113, %112
  %115 = lshr i64 %114, 12
  %116 = trunc i64 %115 to i32
  %117 = sub nsw i64 %113, %112
  %118 = lshr i64 %117, 12
  %119 = trunc i64 %118 to i32
  %120 = mul nsw i32 %106, 1567
  %121 = sext i32 %120 to i64
  %122 = mul nsw i32 %108, 3784
  %123 = sext i32 %122 to i64
  %124 = mul nsw i32 %106, 3784
  %125 = sext i32 %124 to i64
  %126 = mul nsw i32 %108, 1567
  %127 = sext i32 %126 to i64
  %128 = add nsw i64 %121, 2048
  %129 = sub nsw i64 %128, %123
  %130 = lshr i64 %129, 12
  %131 = trunc i64 %130 to i32
  %132 = add nsw i64 %125, 2048
  %133 = add nsw i64 %132, %127
  %134 = lshr i64 %133, 12
  %135 = trunc i64 %134 to i32
  %136 = add nsw i32 %135, %116
  %137 = sub nsw i32 %116, %135
  %138 = icmp slt i32 %136, 32767
  %139 = select i1 %138, i32 %136, i32 32767
  %140 = icmp sgt i32 %139, -32768
  %141 = select i1 %140, i32 %139, i32 -32768
  store i32 %141, i32* %25, align 16
  %142 = icmp slt i32 %137, 32767
  %143 = select i1 %142, i32 %137, i32 32767
  %144 = icmp sgt i32 %143, -32768
  %145 = select i1 %144, i32 %143, i32 -32768
  store i32 %145, i32* %28, align 4
  %146 = add nsw i32 %131, %119
  %147 = sub nsw i32 %119, %131
  %148 = icmp slt i32 %146, 32767
  %149 = select i1 %148, i32 %146, i32 32767
  %150 = icmp sgt i32 %149, -32768
  %151 = select i1 %150, i32 %149, i32 -32768
  store i32 %151, i32* %26, align 4
  %152 = icmp slt i32 %147, 32767
  %153 = select i1 %152, i32 %147, i32 32767
  %154 = icmp sgt i32 %153, -32768
  %155 = select i1 %154, i32 %153, i32 -32768
  store i32 %155, i32* %27, align 8
  br label %156

156:                                              ; preds = %105, %93
  %157 = phi i32 [ %141, %105 ], [ %102, %93 ]
  br i1 %29, label %160, label %158

158:                                              ; preds = %156
  %159 = add nsw i64 %46, %36
  br label %164

160:                                              ; preds = %164, %156
  %161 = add nuw nsw i64 %46, 1
  %162 = add nuw nsw i32 %47, 1
  %163 = icmp eq i64 %161, %37
  br i1 %163, label %44, label %45

164:                                              ; preds = %186, %158
  %165 = phi i32 [ %157, %158 ], [ %188, %186 ]
  %166 = phi i64 [ 0, %158 ], [ %184, %186 ]
  %167 = add nsw i64 %166, %35
  %168 = add nsw i32 %165, 8
  %169 = ashr i32 %168, 4
  %170 = load i32, i32* %31, align 4
  %171 = sext i32 %170 to i64
  %172 = mul nsw i64 %167, %171
  %173 = load i16*, i16** %33, align 8
  %174 = getelementptr inbounds i16, i16* %173, i64 %159
  %175 = getelementptr inbounds i16, i16* %174, i64 %172
  %176 = load i16, i16* %175, align 2
  %177 = zext i16 %176 to i32
  %178 = add nsw i32 %169, %177
  %179 = icmp slt i32 %178, 1023
  %180 = select i1 %179, i32 %178, i32 1023
  %181 = icmp sgt i32 %180, 0
  %182 = select i1 %181, i32 %180, i32 0
  %183 = trunc i32 %182 to i16
  store i16 %183, i16* %175, align 2
  %184 = add nuw nsw i64 %166, 1
  %185 = icmp eq i64 %184, %34
  br i1 %185, label %160, label %186

186:                                              ; preds = %164
  %187 = getelementptr inbounds [64 x i32], [64 x i32]* %8, i64 0, i64 %184
  %188 = load i32, i32* %187, align 4
  br label %164
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN7libgav13dsp12_GLOBAL__N_115TransformLoop_CILi10EitLNS0_11Transform1DE0EXadL_ZNS1_11DctDcOnly_CILi10EiLi3EEEvPvabibEEXadL_ZNS1_5Dct_CIiLi3EEEvS5_aEELb1EEEvNS_13TransformTypeENS_13TransformSizeEiS5_iiS5_(i8 zeroext, i8 zeroext, i32, i8*, i32, i32, i8* nocapture readnone) #0 {
  %8 = zext i8 %1 to i64
  %9 = getelementptr inbounds [19 x i8], [19 x i8]* @_ZN7libgav115kTransformWidthE, i64 0, i64 %8
  %10 = load i8, i8* %9, align 1
  %11 = zext i8 %10 to i32
  %12 = getelementptr inbounds [19 x i8], [19 x i8]* @_ZN7libgav119kTransformWidthLog2E, i64 0, i64 %8
  %13 = load i8, i8* %12, align 1
  %14 = zext i8 %13 to i32
  %15 = getelementptr inbounds [19 x i8], [19 x i8]* @_ZN7libgav120kTransformHeightLog2E, i64 0, i64 %8
  %16 = load i8, i8* %15, align 1
  %17 = zext i8 %16 to i32
  %18 = bitcast i8* %3 to i32*
  %19 = getelementptr inbounds [19 x i8], [19 x i8]* @_ZN7libgav13dsp12_GLOBAL__N_118kTransformRowShiftE, i64 0, i64 %8
  %20 = load i8, i8* %19, align 1
  %21 = zext i8 %20 to i32
  %22 = sub nsw i32 %14, %17
  %23 = icmp slt i32 %22, 0
  %24 = sub nsw i32 0, %22
  %25 = select i1 %23, i32 %24, i32 %22
  %26 = icmp eq i32 %25, 1
  %27 = icmp eq i32 %2, 1
  br i1 %27, label %86, label %28

28:                                               ; preds = %7
  %29 = icmp sgt i32 %2, 0
  br i1 %29, label %30, label %329

30:                                               ; preds = %28
  %31 = icmp ult i32 %11, 32
  %32 = select i1 %31, i32 %11, i32 32
  %33 = icmp slt i32 %32, 1
  %34 = zext i8 %10 to i64
  %35 = lshr i64 524276, %8
  %36 = and i64 %35, 1
  %37 = icmp eq i64 %36, 0
  %38 = icmp eq i8 %10, 0
  %39 = shl i32 1, %21
  %40 = ashr i32 %39, 1
  %41 = zext i32 %32 to i64
  %42 = zext i32 %2 to i64
  %43 = xor i1 %26, true
  %44 = or i1 %33, %43
  %45 = or i1 %37, %38
  %46 = zext i8 %10 to i64
  %47 = icmp ugt i64 %41, 1
  %48 = select i1 %47, i64 %41, i64 1
  %49 = and i64 %48, 56
  %50 = add nsw i64 %49, -8
  %51 = lshr exact i64 %50, 3
  %52 = add nuw nsw i64 %51, 1
  %53 = and i64 %34, 248
  %54 = add nsw i64 %53, -8
  %55 = lshr exact i64 %54, 3
  %56 = add nuw nsw i64 %55, 1
  %57 = icmp ult i64 %48, 8
  %58 = and i64 %48, 56
  %59 = and i64 %52, 1
  %60 = icmp eq i64 %50, 0
  %61 = sub nuw nsw i64 %52, %59
  %62 = icmp eq i64 %59, 0
  %63 = icmp eq i64 %48, %58
  %64 = icmp ult i8 %10, 8
  %65 = and i64 %34, 248
  %66 = insertelement <4 x i32> undef, i32 %40, i32 0
  %67 = shufflevector <4 x i32> %66, <4 x i32> undef, <4 x i32> zeroinitializer
  %68 = insertelement <4 x i32> undef, i32 %40, i32 0
  %69 = shufflevector <4 x i32> %68, <4 x i32> undef, <4 x i32> zeroinitializer
  %70 = insertelement <4 x i32> undef, i32 %21, i32 0
  %71 = shufflevector <4 x i32> %70, <4 x i32> undef, <4 x i32> zeroinitializer
  %72 = insertelement <4 x i32> undef, i32 %21, i32 0
  %73 = shufflevector <4 x i32> %72, <4 x i32> undef, <4 x i32> zeroinitializer
  %74 = and i64 %56, 1
  %75 = icmp eq i64 %54, 0
  %76 = sub nuw nsw i64 %56, %74
  %77 = icmp eq i64 %74, 0
  %78 = icmp eq i64 %65, %34
  %79 = icmp ult i8 %10, 8
  %80 = and i64 %34, 248
  %81 = and i64 %56, 1
  %82 = icmp eq i64 %54, 0
  %83 = sub nuw nsw i64 %56, %81
  %84 = icmp eq i64 %81, 0
  %85 = icmp eq i64 %80, %34
  br label %120

86:                                               ; preds = %7
  %87 = load i32, i32* %18, align 4
  br i1 %26, label %88, label %92

88:                                               ; preds = %86
  %89 = mul nsw i32 %87, 2896
  %90 = add nsw i32 %89, 2048
  %91 = ashr i32 %90, 12
  store i32 %91, i32* %18, align 4
  br label %92

92:                                               ; preds = %88, %86
  %93 = phi i32 [ %91, %88 ], [ %87, %86 ]
  %94 = mul nsw i32 %93, 2896
  %95 = sext i32 %94 to i64
  %96 = add nsw i64 %95, 2048
  %97 = ashr i64 %96, 12
  %98 = trunc i64 %97 to i32
  store i32 %98, i32* %18, align 4
  %99 = getelementptr inbounds i8, i8* %3, i64 4
  %100 = bitcast i8* %99 to i32*
  store i32 %98, i32* %100, align 4
  %101 = lshr i64 524276, %8
  %102 = and i64 %101, 1
  %103 = icmp eq i64 %102, 0
  br i1 %103, label %109, label %104

104:                                              ; preds = %92
  %105 = shl i32 1, %21
  %106 = ashr i32 %105, 1
  %107 = add nsw i32 %106, %98
  %108 = ashr i32 %107, %21
  store i32 %108, i32* %18, align 4
  br label %109

109:                                              ; preds = %92, %104
  %110 = phi i32 [ %108, %104 ], [ %98, %92 ]
  %111 = icmp slt i32 %110, 32767
  %112 = select i1 %111, i32 %110, i32 32767
  %113 = icmp sgt i32 %112, -32768
  %114 = select i1 %113, i32 %112, i32 -32768
  %115 = insertelement <4 x i32> undef, i32 %114, i32 0
  %116 = shufflevector <4 x i32> %115, <4 x i32> undef, <4 x i32> zeroinitializer
  %117 = bitcast i8* %3 to <4 x i32>*
  store <4 x i32> %116, <4 x i32>* %117, align 4
  %118 = getelementptr inbounds i8, i8* %3, i64 16
  %119 = bitcast i8* %118 to <4 x i32>*
  store <4 x i32> %116, <4 x i32>* %119, align 4
  br label %329

120:                                              ; preds = %326, %30
  %121 = phi i64 [ 0, %30 ], [ %327, %326 ]
  %122 = mul nuw nsw i64 %121, %34
  br i1 %44, label %190, label %123

123:                                              ; preds = %120
  %124 = getelementptr inbounds i32, i32* %18, i64 %122
  br i1 %57, label %179, label %125

125:                                              ; preds = %123
  br i1 %60, label %161, label %126

126:                                              ; preds = %125, %126
  %127 = phi i64 [ %158, %126 ], [ 0, %125 ]
  %128 = phi i64 [ %159, %126 ], [ %61, %125 ]
  %129 = getelementptr inbounds i32, i32* %124, i64 %127
  %130 = bitcast i32* %129 to <4 x i32>*
  %131 = load <4 x i32>, <4 x i32>* %130, align 4
  %132 = getelementptr inbounds i32, i32* %129, i64 4
  %133 = bitcast i32* %132 to <4 x i32>*
  %134 = load <4 x i32>, <4 x i32>* %133, align 4
  %135 = mul nsw <4 x i32> %131, <i32 2896, i32 2896, i32 2896, i32 2896>
  %136 = mul nsw <4 x i32> %134, <i32 2896, i32 2896, i32 2896, i32 2896>
  %137 = add nsw <4 x i32> %135, <i32 2048, i32 2048, i32 2048, i32 2048>
  %138 = add nsw <4 x i32> %136, <i32 2048, i32 2048, i32 2048, i32 2048>
  %139 = ashr <4 x i32> %137, <i32 12, i32 12, i32 12, i32 12>
  %140 = ashr <4 x i32> %138, <i32 12, i32 12, i32 12, i32 12>
  %141 = bitcast i32* %129 to <4 x i32>*
  store <4 x i32> %139, <4 x i32>* %141, align 4
  %142 = bitcast i32* %132 to <4 x i32>*
  store <4 x i32> %140, <4 x i32>* %142, align 4
  %143 = or i64 %127, 8
  %144 = getelementptr inbounds i32, i32* %124, i64 %143
  %145 = bitcast i32* %144 to <4 x i32>*
  %146 = load <4 x i32>, <4 x i32>* %145, align 4
  %147 = getelementptr inbounds i32, i32* %144, i64 4
  %148 = bitcast i32* %147 to <4 x i32>*
  %149 = load <4 x i32>, <4 x i32>* %148, align 4
  %150 = mul nsw <4 x i32> %146, <i32 2896, i32 2896, i32 2896, i32 2896>
  %151 = mul nsw <4 x i32> %149, <i32 2896, i32 2896, i32 2896, i32 2896>
  %152 = add nsw <4 x i32> %150, <i32 2048, i32 2048, i32 2048, i32 2048>
  %153 = add nsw <4 x i32> %151, <i32 2048, i32 2048, i32 2048, i32 2048>
  %154 = ashr <4 x i32> %152, <i32 12, i32 12, i32 12, i32 12>
  %155 = ashr <4 x i32> %153, <i32 12, i32 12, i32 12, i32 12>
  %156 = bitcast i32* %144 to <4 x i32>*
  store <4 x i32> %154, <4 x i32>* %156, align 4
  %157 = bitcast i32* %147 to <4 x i32>*
  store <4 x i32> %155, <4 x i32>* %157, align 4
  %158 = add i64 %127, 16
  %159 = add i64 %128, -2
  %160 = icmp eq i64 %159, 0
  br i1 %160, label %161, label %126, !llvm.loop !66

161:                                              ; preds = %126, %125
  %162 = phi i64 [ 0, %125 ], [ %158, %126 ]
  br i1 %62, label %178, label %163

163:                                              ; preds = %161
  %164 = getelementptr inbounds i32, i32* %124, i64 %162
  %165 = bitcast i32* %164 to <4 x i32>*
  %166 = load <4 x i32>, <4 x i32>* %165, align 4
  %167 = getelementptr inbounds i32, i32* %164, i64 4
  %168 = bitcast i32* %167 to <4 x i32>*
  %169 = load <4 x i32>, <4 x i32>* %168, align 4
  %170 = mul nsw <4 x i32> %166, <i32 2896, i32 2896, i32 2896, i32 2896>
  %171 = mul nsw <4 x i32> %169, <i32 2896, i32 2896, i32 2896, i32 2896>
  %172 = add nsw <4 x i32> %170, <i32 2048, i32 2048, i32 2048, i32 2048>
  %173 = add nsw <4 x i32> %171, <i32 2048, i32 2048, i32 2048, i32 2048>
  %174 = ashr <4 x i32> %172, <i32 12, i32 12, i32 12, i32 12>
  %175 = ashr <4 x i32> %173, <i32 12, i32 12, i32 12, i32 12>
  %176 = bitcast i32* %164 to <4 x i32>*
  store <4 x i32> %174, <4 x i32>* %176, align 4
  %177 = bitcast i32* %167 to <4 x i32>*
  store <4 x i32> %175, <4 x i32>* %177, align 4
  br label %178

178:                                              ; preds = %161, %163
  br i1 %63, label %190, label %179

179:                                              ; preds = %178, %123
  %180 = phi i64 [ 0, %123 ], [ %58, %178 ]
  br label %181

181:                                              ; preds = %179, %181
  %182 = phi i64 [ %188, %181 ], [ %180, %179 ]
  %183 = getelementptr inbounds i32, i32* %124, i64 %182
  %184 = load i32, i32* %183, align 4
  %185 = mul nsw i32 %184, 2896
  %186 = add nsw i32 %185, 2048
  %187 = ashr i32 %186, 12
  store i32 %187, i32* %183, align 4
  %188 = add nuw nsw i64 %182, 1
  %189 = icmp ult i64 %188, %41
  br i1 %189, label %181, label %190, !llvm.loop !67

190:                                              ; preds = %181, %178, %120
  %191 = getelementptr inbounds i32, i32* %18, i64 %122
  %192 = bitcast i32* %191 to i8*
  tail call fastcc void @_ZN7libgav13dsp12_GLOBAL__N_15Dct_CIiLi3EEEvPva(i8* %192, i8 signext 18)
  br i1 %45, label %252, label %193

193:                                              ; preds = %190
  br i1 %64, label %242, label %194

194:                                              ; preds = %193
  br i1 %75, label %226, label %195

195:                                              ; preds = %194, %195
  %196 = phi i64 [ %223, %195 ], [ 0, %194 ]
  %197 = phi i64 [ %224, %195 ], [ %76, %194 ]
  %198 = getelementptr inbounds i32, i32* %191, i64 %196
  %199 = bitcast i32* %198 to <4 x i32>*
  %200 = load <4 x i32>, <4 x i32>* %199, align 4
  %201 = getelementptr inbounds i32, i32* %198, i64 4
  %202 = bitcast i32* %201 to <4 x i32>*
  %203 = load <4 x i32>, <4 x i32>* %202, align 4
  %204 = add nsw <4 x i32> %200, %67
  %205 = add nsw <4 x i32> %203, %69
  %206 = ashr <4 x i32> %204, %71
  %207 = ashr <4 x i32> %205, %73
  %208 = bitcast i32* %198 to <4 x i32>*
  store <4 x i32> %206, <4 x i32>* %208, align 4
  %209 = bitcast i32* %201 to <4 x i32>*
  store <4 x i32> %207, <4 x i32>* %209, align 4
  %210 = or i64 %196, 8
  %211 = getelementptr inbounds i32, i32* %191, i64 %210
  %212 = bitcast i32* %211 to <4 x i32>*
  %213 = load <4 x i32>, <4 x i32>* %212, align 4
  %214 = getelementptr inbounds i32, i32* %211, i64 4
  %215 = bitcast i32* %214 to <4 x i32>*
  %216 = load <4 x i32>, <4 x i32>* %215, align 4
  %217 = add nsw <4 x i32> %213, %67
  %218 = add nsw <4 x i32> %216, %69
  %219 = ashr <4 x i32> %217, %71
  %220 = ashr <4 x i32> %218, %73
  %221 = bitcast i32* %211 to <4 x i32>*
  store <4 x i32> %219, <4 x i32>* %221, align 4
  %222 = bitcast i32* %214 to <4 x i32>*
  store <4 x i32> %220, <4 x i32>* %222, align 4
  %223 = add i64 %196, 16
  %224 = add i64 %197, -2
  %225 = icmp eq i64 %224, 0
  br i1 %225, label %226, label %195, !llvm.loop !68

226:                                              ; preds = %195, %194
  %227 = phi i64 [ 0, %194 ], [ %223, %195 ]
  br i1 %77, label %241, label %228

228:                                              ; preds = %226
  %229 = getelementptr inbounds i32, i32* %191, i64 %227
  %230 = bitcast i32* %229 to <4 x i32>*
  %231 = load <4 x i32>, <4 x i32>* %230, align 4
  %232 = getelementptr inbounds i32, i32* %229, i64 4
  %233 = bitcast i32* %232 to <4 x i32>*
  %234 = load <4 x i32>, <4 x i32>* %233, align 4
  %235 = add nsw <4 x i32> %231, %67
  %236 = add nsw <4 x i32> %234, %69
  %237 = ashr <4 x i32> %235, %71
  %238 = ashr <4 x i32> %236, %73
  %239 = bitcast i32* %229 to <4 x i32>*
  store <4 x i32> %237, <4 x i32>* %239, align 4
  %240 = bitcast i32* %232 to <4 x i32>*
  store <4 x i32> %238, <4 x i32>* %240, align 4
  br label %241

241:                                              ; preds = %226, %228
  br i1 %78, label %252, label %242

242:                                              ; preds = %241, %193
  %243 = phi i64 [ 0, %193 ], [ %65, %241 ]
  br label %244

244:                                              ; preds = %242, %244
  %245 = phi i64 [ %250, %244 ], [ %243, %242 ]
  %246 = getelementptr inbounds i32, i32* %191, i64 %245
  %247 = load i32, i32* %246, align 4
  %248 = add nsw i32 %247, %40
  %249 = ashr i32 %248, %21
  store i32 %249, i32* %246, align 4
  %250 = add nuw nsw i64 %245, 1
  %251 = icmp eq i64 %250, %46
  br i1 %251, label %252, label %244, !llvm.loop !69

252:                                              ; preds = %244, %241, %190
  br i1 %38, label %326, label %253

253:                                              ; preds = %252
  br i1 %79, label %314, label %254

254:                                              ; preds = %253
  br i1 %82, label %294, label %255

255:                                              ; preds = %254, %255
  %256 = phi i64 [ %291, %255 ], [ 0, %254 ]
  %257 = phi i64 [ %292, %255 ], [ %83, %254 ]
  %258 = getelementptr inbounds i32, i32* %191, i64 %256
  %259 = bitcast i32* %258 to <4 x i32>*
  %260 = load <4 x i32>, <4 x i32>* %259, align 4
  %261 = getelementptr inbounds i32, i32* %258, i64 4
  %262 = bitcast i32* %261 to <4 x i32>*
  %263 = load <4 x i32>, <4 x i32>* %262, align 4
  %264 = icmp slt <4 x i32> %260, <i32 32767, i32 32767, i32 32767, i32 32767>
  %265 = icmp slt <4 x i32> %263, <i32 32767, i32 32767, i32 32767, i32 32767>
  %266 = select <4 x i1> %264, <4 x i32> %260, <4 x i32> <i32 32767, i32 32767, i32 32767, i32 32767>
  %267 = select <4 x i1> %265, <4 x i32> %263, <4 x i32> <i32 32767, i32 32767, i32 32767, i32 32767>
  %268 = icmp sgt <4 x i32> %266, <i32 -32768, i32 -32768, i32 -32768, i32 -32768>
  %269 = icmp sgt <4 x i32> %267, <i32 -32768, i32 -32768, i32 -32768, i32 -32768>
  %270 = select <4 x i1> %268, <4 x i32> %266, <4 x i32> <i32 -32768, i32 -32768, i32 -32768, i32 -32768>
  %271 = select <4 x i1> %269, <4 x i32> %267, <4 x i32> <i32 -32768, i32 -32768, i32 -32768, i32 -32768>
  %272 = bitcast i32* %258 to <4 x i32>*
  store <4 x i32> %270, <4 x i32>* %272, align 4
  %273 = bitcast i32* %261 to <4 x i32>*
  store <4 x i32> %271, <4 x i32>* %273, align 4
  %274 = or i64 %256, 8
  %275 = getelementptr inbounds i32, i32* %191, i64 %274
  %276 = bitcast i32* %275 to <4 x i32>*
  %277 = load <4 x i32>, <4 x i32>* %276, align 4
  %278 = getelementptr inbounds i32, i32* %275, i64 4
  %279 = bitcast i32* %278 to <4 x i32>*
  %280 = load <4 x i32>, <4 x i32>* %279, align 4
  %281 = icmp slt <4 x i32> %277, <i32 32767, i32 32767, i32 32767, i32 32767>
  %282 = icmp slt <4 x i32> %280, <i32 32767, i32 32767, i32 32767, i32 32767>
  %283 = select <4 x i1> %281, <4 x i32> %277, <4 x i32> <i32 32767, i32 32767, i32 32767, i32 32767>
  %284 = select <4 x i1> %282, <4 x i32> %280, <4 x i32> <i32 32767, i32 32767, i32 32767, i32 32767>
  %285 = icmp sgt <4 x i32> %283, <i32 -32768, i32 -32768, i32 -32768, i32 -32768>
  %286 = icmp sgt <4 x i32> %284, <i32 -32768, i32 -32768, i32 -32768, i32 -32768>
  %287 = select <4 x i1> %285, <4 x i32> %283, <4 x i32> <i32 -32768, i32 -32768, i32 -32768, i32 -32768>
  %288 = select <4 x i1> %286, <4 x i32> %284, <4 x i32> <i32 -32768, i32 -32768, i32 -32768, i32 -32768>
  %289 = bitcast i32* %275 to <4 x i32>*
  store <4 x i32> %287, <4 x i32>* %289, align 4
  %290 = bitcast i32* %278 to <4 x i32>*
  store <4 x i32> %288, <4 x i32>* %290, align 4
  %291 = add i64 %256, 16
  %292 = add i64 %257, -2
  %293 = icmp eq i64 %292, 0
  br i1 %293, label %294, label %255, !llvm.loop !70

294:                                              ; preds = %255, %254
  %295 = phi i64 [ 0, %254 ], [ %291, %255 ]
  br i1 %84, label %313, label %296

296:                                              ; preds = %294
  %297 = getelementptr inbounds i32, i32* %191, i64 %295
  %298 = bitcast i32* %297 to <4 x i32>*
  %299 = load <4 x i32>, <4 x i32>* %298, align 4
  %300 = getelementptr inbounds i32, i32* %297, i64 4
  %301 = bitcast i32* %300 to <4 x i32>*
  %302 = load <4 x i32>, <4 x i32>* %301, align 4
  %303 = icmp slt <4 x i32> %299, <i32 32767, i32 32767, i32 32767, i32 32767>
  %304 = icmp slt <4 x i32> %302, <i32 32767, i32 32767, i32 32767, i32 32767>
  %305 = select <4 x i1> %303, <4 x i32> %299, <4 x i32> <i32 32767, i32 32767, i32 32767, i32 32767>
  %306 = select <4 x i1> %304, <4 x i32> %302, <4 x i32> <i32 32767, i32 32767, i32 32767, i32 32767>
  %307 = icmp sgt <4 x i32> %305, <i32 -32768, i32 -32768, i32 -32768, i32 -32768>
  %308 = icmp sgt <4 x i32> %306, <i32 -32768, i32 -32768, i32 -32768, i32 -32768>
  %309 = select <4 x i1> %307, <4 x i32> %305, <4 x i32> <i32 -32768, i32 -32768, i32 -32768, i32 -32768>
  %310 = select <4 x i1> %308, <4 x i32> %306, <4 x i32> <i32 -32768, i32 -32768, i32 -32768, i32 -32768>
  %311 = bitcast i32* %297 to <4 x i32>*
  store <4 x i32> %309, <4 x i32>* %311, align 4
  %312 = bitcast i32* %300 to <4 x i32>*
  store <4 x i32> %310, <4 x i32>* %312, align 4
  br label %313

313:                                              ; preds = %294, %296
  br i1 %85, label %326, label %314

314:                                              ; preds = %313, %253
  %315 = phi i64 [ 0, %253 ], [ %80, %313 ]
  br label %316

316:                                              ; preds = %314, %316
  %317 = phi i64 [ %324, %316 ], [ %315, %314 ]
  %318 = getelementptr inbounds i32, i32* %191, i64 %317
  %319 = load i32, i32* %318, align 4
  %320 = icmp slt i32 %319, 32767
  %321 = select i1 %320, i32 %319, i32 32767
  %322 = icmp sgt i32 %321, -32768
  %323 = select i1 %322, i32 %321, i32 -32768
  store i32 %323, i32* %318, align 4
  %324 = add nuw nsw i64 %317, 1
  %325 = icmp eq i64 %324, %34
  br i1 %325, label %326, label %316, !llvm.loop !71

326:                                              ; preds = %316, %313, %252
  %327 = add nuw nsw i64 %121, 1
  %328 = icmp eq i64 %327, %42
  br i1 %328, label %329, label %120

329:                                              ; preds = %326, %28, %109
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN7libgav13dsp12_GLOBAL__N_115TransformLoop_CILi10EitLNS0_11Transform1DE0EXadL_ZNS1_11DctDcOnly_CILi10EiLi3EEEvPvabibEEXadL_ZNS1_5Dct_CIiLi3EEEvS5_aEELb0EEEvNS_13TransformTypeENS_13TransformSizeEiS5_iiS5_(i8 zeroext, i8 zeroext, i32, i8*, i32, i32, i8* nocapture readonly) #0 {
  %8 = alloca [64 x i32], align 16
  %9 = zext i8 %1 to i64
  %10 = getelementptr inbounds [19 x i8], [19 x i8]* @_ZN7libgav115kTransformWidthE, i64 0, i64 %9
  %11 = load i8, i8* %10, align 1
  %12 = zext i8 %11 to i32
  %13 = getelementptr inbounds [19 x i8], [19 x i8]* @_ZN7libgav116kTransformHeightE, i64 0, i64 %9
  %14 = load i8, i8* %13, align 1
  %15 = bitcast i8* %3 to i32*
  %16 = zext i8 %0 to i32
  %17 = shl i32 1, %16
  %18 = and i32 %17, 33104
  %19 = icmp eq i32 %18, 0
  %20 = bitcast [64 x i32]* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 256, i8* nonnull %20) #4
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %20, i8 -86, i64 256, i1 false)
  %21 = icmp eq i8 %11, 0
  br i1 %21, label %43, label %22

22:                                               ; preds = %7
  %23 = zext i8 %11 to i64
  %24 = icmp eq i32 %2, 1
  %25 = getelementptr inbounds [64 x i32], [64 x i32]* %8, i64 0, i64 0
  %26 = getelementptr inbounds [64 x i32], [64 x i32]* %8, i64 0, i64 4
  %27 = icmp eq i8 %14, 0
  %28 = getelementptr inbounds i8, i8* %6, i64 4
  %29 = bitcast i8* %28 to i32*
  %30 = getelementptr inbounds i8, i8* %6, i64 8
  %31 = bitcast i8* %30 to i16**
  %32 = zext i8 %14 to i64
  %33 = sext i32 %5 to i64
  %34 = sext i32 %4 to i64
  %35 = zext i8 %11 to i64
  %36 = add nsw i64 %32, -1
  %37 = and i64 %32, 3
  %38 = icmp ult i64 %36, 3
  %39 = sub nsw i64 %32, %37
  %40 = icmp eq i64 %37, 0
  %41 = bitcast [64 x i32]* %8 to <4 x i32>*
  %42 = bitcast i32* %26 to <4 x i32>*
  br label %44

43:                                               ; preds = %108, %7
  call void @llvm.lifetime.end.p0i8(i64 256, i8* nonnull %20) #4
  ret void

44:                                               ; preds = %108, %22
  %45 = phi i64 [ 0, %22 ], [ %109, %108 ]
  %46 = phi i32 [ 0, %22 ], [ %110, %108 ]
  %47 = xor i32 %46, -1
  %48 = add nsw i32 %47, %12
  %49 = trunc i64 %45 to i32
  %50 = select i1 %19, i32 %49, i32 %48
  %51 = sext i32 %50 to i64
  %52 = getelementptr inbounds i32, i32* %15, i64 %51
  br i1 %38, label %78, label %53

53:                                               ; preds = %44, %53
  %54 = phi i64 [ %75, %53 ], [ 0, %44 ]
  %55 = phi i64 [ %76, %53 ], [ %39, %44 ]
  %56 = mul nuw nsw i64 %54, %23
  %57 = getelementptr inbounds i32, i32* %52, i64 %56
  %58 = load i32, i32* %57, align 4
  %59 = getelementptr inbounds [64 x i32], [64 x i32]* %8, i64 0, i64 %54
  store i32 %58, i32* %59, align 16
  %60 = or i64 %54, 1
  %61 = mul nuw nsw i64 %60, %23
  %62 = getelementptr inbounds i32, i32* %52, i64 %61
  %63 = load i32, i32* %62, align 4
  %64 = getelementptr inbounds [64 x i32], [64 x i32]* %8, i64 0, i64 %60
  store i32 %63, i32* %64, align 4
  %65 = or i64 %54, 2
  %66 = mul nuw nsw i64 %65, %23
  %67 = getelementptr inbounds i32, i32* %52, i64 %66
  %68 = load i32, i32* %67, align 4
  %69 = getelementptr inbounds [64 x i32], [64 x i32]* %8, i64 0, i64 %65
  store i32 %68, i32* %69, align 8
  %70 = or i64 %54, 3
  %71 = mul nuw nsw i64 %70, %23
  %72 = getelementptr inbounds i32, i32* %52, i64 %71
  %73 = load i32, i32* %72, align 4
  %74 = getelementptr inbounds [64 x i32], [64 x i32]* %8, i64 0, i64 %70
  store i32 %73, i32* %74, align 4
  %75 = add nuw nsw i64 %54, 4
  %76 = add i64 %55, -4
  %77 = icmp eq i64 %76, 0
  br i1 %77, label %78, label %53

78:                                               ; preds = %53, %44
  %79 = phi i64 [ 0, %44 ], [ %75, %53 ]
  br i1 %40, label %90, label %80

80:                                               ; preds = %78, %80
  %81 = phi i64 [ %87, %80 ], [ %79, %78 ]
  %82 = phi i64 [ %88, %80 ], [ %37, %78 ]
  %83 = mul nuw nsw i64 %81, %23
  %84 = getelementptr inbounds i32, i32* %52, i64 %83
  %85 = load i32, i32* %84, align 4
  %86 = getelementptr inbounds [64 x i32], [64 x i32]* %8, i64 0, i64 %81
  store i32 %85, i32* %86, align 4
  %87 = add nuw nsw i64 %81, 1
  %88 = add i64 %82, -1
  %89 = icmp eq i64 %88, 0
  br i1 %89, label %90, label %80, !llvm.loop !72

90:                                               ; preds = %80, %78
  br i1 %24, label %91, label %104

91:                                               ; preds = %90
  %92 = load i32, i32* %25, align 16
  %93 = mul nsw i32 %92, 2896
  %94 = sext i32 %93 to i64
  %95 = add nsw i64 %94, 2048
  %96 = ashr i64 %95, 12
  %97 = trunc i64 %96 to i32
  %98 = icmp slt i32 %97, 32767
  %99 = select i1 %98, i32 %97, i32 32767
  %100 = icmp sgt i32 %99, -32768
  %101 = select i1 %100, i32 %99, i32 -32768
  %102 = insertelement <4 x i32> undef, i32 %101, i32 0
  %103 = shufflevector <4 x i32> %102, <4 x i32> undef, <4 x i32> zeroinitializer
  store <4 x i32> %103, <4 x i32>* %41, align 16
  store <4 x i32> %103, <4 x i32>* %42, align 16
  br label %105

104:                                              ; preds = %90
  call fastcc void @_ZN7libgav13dsp12_GLOBAL__N_15Dct_CIiLi3EEEvPva(i8* nonnull %20, i8 signext 16)
  br label %105

105:                                              ; preds = %104, %91
  br i1 %27, label %108, label %106

106:                                              ; preds = %105
  %107 = add nsw i64 %45, %34
  br label %112

108:                                              ; preds = %112, %105
  %109 = add nuw nsw i64 %45, 1
  %110 = add nuw nsw i32 %46, 1
  %111 = icmp eq i64 %109, %35
  br i1 %111, label %43, label %44

112:                                              ; preds = %112, %106
  %113 = phi i64 [ 0, %106 ], [ %133, %112 ]
  %114 = add nsw i64 %113, %33
  %115 = getelementptr inbounds [64 x i32], [64 x i32]* %8, i64 0, i64 %113
  %116 = load i32, i32* %115, align 4
  %117 = add nsw i32 %116, 8
  %118 = ashr i32 %117, 4
  %119 = load i32, i32* %29, align 4
  %120 = sext i32 %119 to i64
  %121 = mul nsw i64 %114, %120
  %122 = load i16*, i16** %31, align 8
  %123 = getelementptr inbounds i16, i16* %122, i64 %107
  %124 = getelementptr inbounds i16, i16* %123, i64 %121
  %125 = load i16, i16* %124, align 2
  %126 = zext i16 %125 to i32
  %127 = add nsw i32 %118, %126
  %128 = icmp slt i32 %127, 1023
  %129 = select i1 %128, i32 %127, i32 1023
  %130 = icmp sgt i32 %129, 0
  %131 = select i1 %130, i32 %129, i32 0
  %132 = trunc i32 %131 to i16
  store i16 %132, i16* %124, align 2
  %133 = add nuw nsw i64 %113, 1
  %134 = icmp eq i64 %133, %32
  br i1 %134, label %108, label %112
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN7libgav13dsp12_GLOBAL__N_115TransformLoop_CILi10EitLNS0_11Transform1DE0EXadL_ZNS1_11DctDcOnly_CILi10EiLi4EEEvPvabibEEXadL_ZNS1_5Dct_CIiLi4EEEvS5_aEELb1EEEvNS_13TransformTypeENS_13TransformSizeEiS5_iiS5_(i8 zeroext, i8 zeroext, i32, i8*, i32, i32, i8* nocapture readnone) #0 {
  %8 = zext i8 %1 to i64
  %9 = getelementptr inbounds [19 x i8], [19 x i8]* @_ZN7libgav115kTransformWidthE, i64 0, i64 %8
  %10 = load i8, i8* %9, align 1
  %11 = zext i8 %10 to i32
  %12 = getelementptr inbounds [19 x i8], [19 x i8]* @_ZN7libgav119kTransformWidthLog2E, i64 0, i64 %8
  %13 = load i8, i8* %12, align 1
  %14 = zext i8 %13 to i32
  %15 = getelementptr inbounds [19 x i8], [19 x i8]* @_ZN7libgav120kTransformHeightLog2E, i64 0, i64 %8
  %16 = load i8, i8* %15, align 1
  %17 = zext i8 %16 to i32
  %18 = bitcast i8* %3 to i32*
  %19 = getelementptr inbounds [19 x i8], [19 x i8]* @_ZN7libgav13dsp12_GLOBAL__N_118kTransformRowShiftE, i64 0, i64 %8
  %20 = load i8, i8* %19, align 1
  %21 = zext i8 %20 to i32
  %22 = sub nsw i32 %14, %17
  %23 = icmp slt i32 %22, 0
  %24 = sub nsw i32 0, %22
  %25 = select i1 %23, i32 %24, i32 %22
  %26 = icmp eq i32 %25, 1
  %27 = icmp eq i32 %2, 1
  br i1 %27, label %86, label %28

28:                                               ; preds = %7
  %29 = icmp sgt i32 %2, 0
  br i1 %29, label %30, label %333

30:                                               ; preds = %28
  %31 = icmp ult i32 %11, 32
  %32 = select i1 %31, i32 %11, i32 32
  %33 = icmp slt i32 %32, 1
  %34 = zext i8 %10 to i64
  %35 = lshr i64 524276, %8
  %36 = and i64 %35, 1
  %37 = icmp eq i64 %36, 0
  %38 = icmp eq i8 %10, 0
  %39 = shl i32 1, %21
  %40 = ashr i32 %39, 1
  %41 = zext i32 %32 to i64
  %42 = zext i32 %2 to i64
  %43 = xor i1 %26, true
  %44 = or i1 %33, %43
  %45 = or i1 %37, %38
  %46 = zext i8 %10 to i64
  %47 = icmp ugt i64 %41, 1
  %48 = select i1 %47, i64 %41, i64 1
  %49 = and i64 %48, 56
  %50 = add nsw i64 %49, -8
  %51 = lshr exact i64 %50, 3
  %52 = add nuw nsw i64 %51, 1
  %53 = and i64 %34, 248
  %54 = add nsw i64 %53, -8
  %55 = lshr exact i64 %54, 3
  %56 = add nuw nsw i64 %55, 1
  %57 = icmp ult i64 %48, 8
  %58 = and i64 %48, 56
  %59 = and i64 %52, 1
  %60 = icmp eq i64 %50, 0
  %61 = sub nuw nsw i64 %52, %59
  %62 = icmp eq i64 %59, 0
  %63 = icmp eq i64 %48, %58
  %64 = icmp ult i8 %10, 8
  %65 = and i64 %34, 248
  %66 = insertelement <4 x i32> undef, i32 %40, i32 0
  %67 = shufflevector <4 x i32> %66, <4 x i32> undef, <4 x i32> zeroinitializer
  %68 = insertelement <4 x i32> undef, i32 %40, i32 0
  %69 = shufflevector <4 x i32> %68, <4 x i32> undef, <4 x i32> zeroinitializer
  %70 = insertelement <4 x i32> undef, i32 %21, i32 0
  %71 = shufflevector <4 x i32> %70, <4 x i32> undef, <4 x i32> zeroinitializer
  %72 = insertelement <4 x i32> undef, i32 %21, i32 0
  %73 = shufflevector <4 x i32> %72, <4 x i32> undef, <4 x i32> zeroinitializer
  %74 = and i64 %56, 1
  %75 = icmp eq i64 %54, 0
  %76 = sub nuw nsw i64 %56, %74
  %77 = icmp eq i64 %74, 0
  %78 = icmp eq i64 %65, %34
  %79 = icmp ult i8 %10, 8
  %80 = and i64 %34, 248
  %81 = and i64 %56, 1
  %82 = icmp eq i64 %54, 0
  %83 = sub nuw nsw i64 %56, %81
  %84 = icmp eq i64 %81, 0
  %85 = icmp eq i64 %80, %34
  br label %124

86:                                               ; preds = %7
  %87 = load i32, i32* %18, align 4
  br i1 %26, label %88, label %92

88:                                               ; preds = %86
  %89 = mul nsw i32 %87, 2896
  %90 = add nsw i32 %89, 2048
  %91 = ashr i32 %90, 12
  store i32 %91, i32* %18, align 4
  br label %92

92:                                               ; preds = %88, %86
  %93 = phi i32 [ %91, %88 ], [ %87, %86 ]
  %94 = mul nsw i32 %93, 2896
  %95 = sext i32 %94 to i64
  %96 = add nsw i64 %95, 2048
  %97 = ashr i64 %96, 12
  %98 = trunc i64 %97 to i32
  store i32 %98, i32* %18, align 4
  %99 = getelementptr inbounds i8, i8* %3, i64 4
  %100 = bitcast i8* %99 to i32*
  store i32 %98, i32* %100, align 4
  %101 = lshr i64 524276, %8
  %102 = and i64 %101, 1
  %103 = icmp eq i64 %102, 0
  br i1 %103, label %109, label %104

104:                                              ; preds = %92
  %105 = shl i32 1, %21
  %106 = ashr i32 %105, 1
  %107 = add nsw i32 %106, %98
  %108 = ashr i32 %107, %21
  store i32 %108, i32* %18, align 4
  br label %109

109:                                              ; preds = %92, %104
  %110 = phi i32 [ %108, %104 ], [ %98, %92 ]
  %111 = icmp slt i32 %110, 32767
  %112 = select i1 %111, i32 %110, i32 32767
  %113 = icmp sgt i32 %112, -32768
  %114 = select i1 %113, i32 %112, i32 -32768
  %115 = insertelement <4 x i32> undef, i32 %114, i32 0
  %116 = shufflevector <4 x i32> %115, <4 x i32> undef, <4 x i32> zeroinitializer
  %117 = bitcast i8* %3 to <4 x i32>*
  store <4 x i32> %116, <4 x i32>* %117, align 4
  %118 = getelementptr inbounds i8, i8* %3, i64 16
  %119 = bitcast i8* %118 to <4 x i32>*
  store <4 x i32> %116, <4 x i32>* %119, align 4
  %120 = getelementptr inbounds i8, i8* %3, i64 32
  %121 = bitcast i8* %120 to <4 x i32>*
  store <4 x i32> %116, <4 x i32>* %121, align 4
  %122 = getelementptr inbounds i8, i8* %3, i64 48
  %123 = bitcast i8* %122 to <4 x i32>*
  store <4 x i32> %116, <4 x i32>* %123, align 4
  br label %333

124:                                              ; preds = %330, %30
  %125 = phi i64 [ 0, %30 ], [ %331, %330 ]
  %126 = mul nuw nsw i64 %125, %34
  br i1 %44, label %194, label %127

127:                                              ; preds = %124
  %128 = getelementptr inbounds i32, i32* %18, i64 %126
  br i1 %57, label %183, label %129

129:                                              ; preds = %127
  br i1 %60, label %165, label %130

130:                                              ; preds = %129, %130
  %131 = phi i64 [ %162, %130 ], [ 0, %129 ]
  %132 = phi i64 [ %163, %130 ], [ %61, %129 ]
  %133 = getelementptr inbounds i32, i32* %128, i64 %131
  %134 = bitcast i32* %133 to <4 x i32>*
  %135 = load <4 x i32>, <4 x i32>* %134, align 4
  %136 = getelementptr inbounds i32, i32* %133, i64 4
  %137 = bitcast i32* %136 to <4 x i32>*
  %138 = load <4 x i32>, <4 x i32>* %137, align 4
  %139 = mul nsw <4 x i32> %135, <i32 2896, i32 2896, i32 2896, i32 2896>
  %140 = mul nsw <4 x i32> %138, <i32 2896, i32 2896, i32 2896, i32 2896>
  %141 = add nsw <4 x i32> %139, <i32 2048, i32 2048, i32 2048, i32 2048>
  %142 = add nsw <4 x i32> %140, <i32 2048, i32 2048, i32 2048, i32 2048>
  %143 = ashr <4 x i32> %141, <i32 12, i32 12, i32 12, i32 12>
  %144 = ashr <4 x i32> %142, <i32 12, i32 12, i32 12, i32 12>
  %145 = bitcast i32* %133 to <4 x i32>*
  store <4 x i32> %143, <4 x i32>* %145, align 4
  %146 = bitcast i32* %136 to <4 x i32>*
  store <4 x i32> %144, <4 x i32>* %146, align 4
  %147 = or i64 %131, 8
  %148 = getelementptr inbounds i32, i32* %128, i64 %147
  %149 = bitcast i32* %148 to <4 x i32>*
  %150 = load <4 x i32>, <4 x i32>* %149, align 4
  %151 = getelementptr inbounds i32, i32* %148, i64 4
  %152 = bitcast i32* %151 to <4 x i32>*
  %153 = load <4 x i32>, <4 x i32>* %152, align 4
  %154 = mul nsw <4 x i32> %150, <i32 2896, i32 2896, i32 2896, i32 2896>
  %155 = mul nsw <4 x i32> %153, <i32 2896, i32 2896, i32 2896, i32 2896>
  %156 = add nsw <4 x i32> %154, <i32 2048, i32 2048, i32 2048, i32 2048>
  %157 = add nsw <4 x i32> %155, <i32 2048, i32 2048, i32 2048, i32 2048>
  %158 = ashr <4 x i32> %156, <i32 12, i32 12, i32 12, i32 12>
  %159 = ashr <4 x i32> %157, <i32 12, i32 12, i32 12, i32 12>
  %160 = bitcast i32* %148 to <4 x i32>*
  store <4 x i32> %158, <4 x i32>* %160, align 4
  %161 = bitcast i32* %151 to <4 x i32>*
  store <4 x i32> %159, <4 x i32>* %161, align 4
  %162 = add i64 %131, 16
  %163 = add i64 %132, -2
  %164 = icmp eq i64 %163, 0
  br i1 %164, label %165, label %130, !llvm.loop !73

165:                                              ; preds = %130, %129
  %166 = phi i64 [ 0, %129 ], [ %162, %130 ]
  br i1 %62, label %182, label %167

167:                                              ; preds = %165
  %168 = getelementptr inbounds i32, i32* %128, i64 %166
  %169 = bitcast i32* %168 to <4 x i32>*
  %170 = load <4 x i32>, <4 x i32>* %169, align 4
  %171 = getelementptr inbounds i32, i32* %168, i64 4
  %172 = bitcast i32* %171 to <4 x i32>*
  %173 = load <4 x i32>, <4 x i32>* %172, align 4
  %174 = mul nsw <4 x i32> %170, <i32 2896, i32 2896, i32 2896, i32 2896>
  %175 = mul nsw <4 x i32> %173, <i32 2896, i32 2896, i32 2896, i32 2896>
  %176 = add nsw <4 x i32> %174, <i32 2048, i32 2048, i32 2048, i32 2048>
  %177 = add nsw <4 x i32> %175, <i32 2048, i32 2048, i32 2048, i32 2048>
  %178 = ashr <4 x i32> %176, <i32 12, i32 12, i32 12, i32 12>
  %179 = ashr <4 x i32> %177, <i32 12, i32 12, i32 12, i32 12>
  %180 = bitcast i32* %168 to <4 x i32>*
  store <4 x i32> %178, <4 x i32>* %180, align 4
  %181 = bitcast i32* %171 to <4 x i32>*
  store <4 x i32> %179, <4 x i32>* %181, align 4
  br label %182

182:                                              ; preds = %165, %167
  br i1 %63, label %194, label %183

183:                                              ; preds = %182, %127
  %184 = phi i64 [ 0, %127 ], [ %58, %182 ]
  br label %185

185:                                              ; preds = %183, %185
  %186 = phi i64 [ %192, %185 ], [ %184, %183 ]
  %187 = getelementptr inbounds i32, i32* %128, i64 %186
  %188 = load i32, i32* %187, align 4
  %189 = mul nsw i32 %188, 2896
  %190 = add nsw i32 %189, 2048
  %191 = ashr i32 %190, 12
  store i32 %191, i32* %187, align 4
  %192 = add nuw nsw i64 %186, 1
  %193 = icmp ult i64 %192, %41
  br i1 %193, label %185, label %194, !llvm.loop !74

194:                                              ; preds = %185, %182, %124
  %195 = getelementptr inbounds i32, i32* %18, i64 %126
  %196 = bitcast i32* %195 to i8*
  tail call fastcc void @_ZN7libgav13dsp12_GLOBAL__N_15Dct_CIiLi4EEEvPva(i8* %196, i8 signext 18)
  br i1 %45, label %256, label %197

197:                                              ; preds = %194
  br i1 %64, label %246, label %198

198:                                              ; preds = %197
  br i1 %75, label %230, label %199

199:                                              ; preds = %198, %199
  %200 = phi i64 [ %227, %199 ], [ 0, %198 ]
  %201 = phi i64 [ %228, %199 ], [ %76, %198 ]
  %202 = getelementptr inbounds i32, i32* %195, i64 %200
  %203 = bitcast i32* %202 to <4 x i32>*
  %204 = load <4 x i32>, <4 x i32>* %203, align 4
  %205 = getelementptr inbounds i32, i32* %202, i64 4
  %206 = bitcast i32* %205 to <4 x i32>*
  %207 = load <4 x i32>, <4 x i32>* %206, align 4
  %208 = add nsw <4 x i32> %204, %67
  %209 = add nsw <4 x i32> %207, %69
  %210 = ashr <4 x i32> %208, %71
  %211 = ashr <4 x i32> %209, %73
  %212 = bitcast i32* %202 to <4 x i32>*
  store <4 x i32> %210, <4 x i32>* %212, align 4
  %213 = bitcast i32* %205 to <4 x i32>*
  store <4 x i32> %211, <4 x i32>* %213, align 4
  %214 = or i64 %200, 8
  %215 = getelementptr inbounds i32, i32* %195, i64 %214
  %216 = bitcast i32* %215 to <4 x i32>*
  %217 = load <4 x i32>, <4 x i32>* %216, align 4
  %218 = getelementptr inbounds i32, i32* %215, i64 4
  %219 = bitcast i32* %218 to <4 x i32>*
  %220 = load <4 x i32>, <4 x i32>* %219, align 4
  %221 = add nsw <4 x i32> %217, %67
  %222 = add nsw <4 x i32> %220, %69
  %223 = ashr <4 x i32> %221, %71
  %224 = ashr <4 x i32> %222, %73
  %225 = bitcast i32* %215 to <4 x i32>*
  store <4 x i32> %223, <4 x i32>* %225, align 4
  %226 = bitcast i32* %218 to <4 x i32>*
  store <4 x i32> %224, <4 x i32>* %226, align 4
  %227 = add i64 %200, 16
  %228 = add i64 %201, -2
  %229 = icmp eq i64 %228, 0
  br i1 %229, label %230, label %199, !llvm.loop !75

230:                                              ; preds = %199, %198
  %231 = phi i64 [ 0, %198 ], [ %227, %199 ]
  br i1 %77, label %245, label %232

232:                                              ; preds = %230
  %233 = getelementptr inbounds i32, i32* %195, i64 %231
  %234 = bitcast i32* %233 to <4 x i32>*
  %235 = load <4 x i32>, <4 x i32>* %234, align 4
  %236 = getelementptr inbounds i32, i32* %233, i64 4
  %237 = bitcast i32* %236 to <4 x i32>*
  %238 = load <4 x i32>, <4 x i32>* %237, align 4
  %239 = add nsw <4 x i32> %235, %67
  %240 = add nsw <4 x i32> %238, %69
  %241 = ashr <4 x i32> %239, %71
  %242 = ashr <4 x i32> %240, %73
  %243 = bitcast i32* %233 to <4 x i32>*
  store <4 x i32> %241, <4 x i32>* %243, align 4
  %244 = bitcast i32* %236 to <4 x i32>*
  store <4 x i32> %242, <4 x i32>* %244, align 4
  br label %245

245:                                              ; preds = %230, %232
  br i1 %78, label %256, label %246

246:                                              ; preds = %245, %197
  %247 = phi i64 [ 0, %197 ], [ %65, %245 ]
  br label %248

248:                                              ; preds = %246, %248
  %249 = phi i64 [ %254, %248 ], [ %247, %246 ]
  %250 = getelementptr inbounds i32, i32* %195, i64 %249
  %251 = load i32, i32* %250, align 4
  %252 = add nsw i32 %251, %40
  %253 = ashr i32 %252, %21
  store i32 %253, i32* %250, align 4
  %254 = add nuw nsw i64 %249, 1
  %255 = icmp eq i64 %254, %46
  br i1 %255, label %256, label %248, !llvm.loop !76

256:                                              ; preds = %248, %245, %194
  br i1 %38, label %330, label %257

257:                                              ; preds = %256
  br i1 %79, label %318, label %258

258:                                              ; preds = %257
  br i1 %82, label %298, label %259

259:                                              ; preds = %258, %259
  %260 = phi i64 [ %295, %259 ], [ 0, %258 ]
  %261 = phi i64 [ %296, %259 ], [ %83, %258 ]
  %262 = getelementptr inbounds i32, i32* %195, i64 %260
  %263 = bitcast i32* %262 to <4 x i32>*
  %264 = load <4 x i32>, <4 x i32>* %263, align 4
  %265 = getelementptr inbounds i32, i32* %262, i64 4
  %266 = bitcast i32* %265 to <4 x i32>*
  %267 = load <4 x i32>, <4 x i32>* %266, align 4
  %268 = icmp slt <4 x i32> %264, <i32 32767, i32 32767, i32 32767, i32 32767>
  %269 = icmp slt <4 x i32> %267, <i32 32767, i32 32767, i32 32767, i32 32767>
  %270 = select <4 x i1> %268, <4 x i32> %264, <4 x i32> <i32 32767, i32 32767, i32 32767, i32 32767>
  %271 = select <4 x i1> %269, <4 x i32> %267, <4 x i32> <i32 32767, i32 32767, i32 32767, i32 32767>
  %272 = icmp sgt <4 x i32> %270, <i32 -32768, i32 -32768, i32 -32768, i32 -32768>
  %273 = icmp sgt <4 x i32> %271, <i32 -32768, i32 -32768, i32 -32768, i32 -32768>
  %274 = select <4 x i1> %272, <4 x i32> %270, <4 x i32> <i32 -32768, i32 -32768, i32 -32768, i32 -32768>
  %275 = select <4 x i1> %273, <4 x i32> %271, <4 x i32> <i32 -32768, i32 -32768, i32 -32768, i32 -32768>
  %276 = bitcast i32* %262 to <4 x i32>*
  store <4 x i32> %274, <4 x i32>* %276, align 4
  %277 = bitcast i32* %265 to <4 x i32>*
  store <4 x i32> %275, <4 x i32>* %277, align 4
  %278 = or i64 %260, 8
  %279 = getelementptr inbounds i32, i32* %195, i64 %278
  %280 = bitcast i32* %279 to <4 x i32>*
  %281 = load <4 x i32>, <4 x i32>* %280, align 4
  %282 = getelementptr inbounds i32, i32* %279, i64 4
  %283 = bitcast i32* %282 to <4 x i32>*
  %284 = load <4 x i32>, <4 x i32>* %283, align 4
  %285 = icmp slt <4 x i32> %281, <i32 32767, i32 32767, i32 32767, i32 32767>
  %286 = icmp slt <4 x i32> %284, <i32 32767, i32 32767, i32 32767, i32 32767>
  %287 = select <4 x i1> %285, <4 x i32> %281, <4 x i32> <i32 32767, i32 32767, i32 32767, i32 32767>
  %288 = select <4 x i1> %286, <4 x i32> %284, <4 x i32> <i32 32767, i32 32767, i32 32767, i32 32767>
  %289 = icmp sgt <4 x i32> %287, <i32 -32768, i32 -32768, i32 -32768, i32 -32768>
  %290 = icmp sgt <4 x i32> %288, <i32 -32768, i32 -32768, i32 -32768, i32 -32768>
  %291 = select <4 x i1> %289, <4 x i32> %287, <4 x i32> <i32 -32768, i32 -32768, i32 -32768, i32 -32768>
  %292 = select <4 x i1> %290, <4 x i32> %288, <4 x i32> <i32 -32768, i32 -32768, i32 -32768, i32 -32768>
  %293 = bitcast i32* %279 to <4 x i32>*
  store <4 x i32> %291, <4 x i32>* %293, align 4
  %294 = bitcast i32* %282 to <4 x i32>*
  store <4 x i32> %292, <4 x i32>* %294, align 4
  %295 = add i64 %260, 16
  %296 = add i64 %261, -2
  %297 = icmp eq i64 %296, 0
  br i1 %297, label %298, label %259, !llvm.loop !77

298:                                              ; preds = %259, %258
  %299 = phi i64 [ 0, %258 ], [ %295, %259 ]
  br i1 %84, label %317, label %300

300:                                              ; preds = %298
  %301 = getelementptr inbounds i32, i32* %195, i64 %299
  %302 = bitcast i32* %301 to <4 x i32>*
  %303 = load <4 x i32>, <4 x i32>* %302, align 4
  %304 = getelementptr inbounds i32, i32* %301, i64 4
  %305 = bitcast i32* %304 to <4 x i32>*
  %306 = load <4 x i32>, <4 x i32>* %305, align 4
  %307 = icmp slt <4 x i32> %303, <i32 32767, i32 32767, i32 32767, i32 32767>
  %308 = icmp slt <4 x i32> %306, <i32 32767, i32 32767, i32 32767, i32 32767>
  %309 = select <4 x i1> %307, <4 x i32> %303, <4 x i32> <i32 32767, i32 32767, i32 32767, i32 32767>
  %310 = select <4 x i1> %308, <4 x i32> %306, <4 x i32> <i32 32767, i32 32767, i32 32767, i32 32767>
  %311 = icmp sgt <4 x i32> %309, <i32 -32768, i32 -32768, i32 -32768, i32 -32768>
  %312 = icmp sgt <4 x i32> %310, <i32 -32768, i32 -32768, i32 -32768, i32 -32768>
  %313 = select <4 x i1> %311, <4 x i32> %309, <4 x i32> <i32 -32768, i32 -32768, i32 -32768, i32 -32768>
  %314 = select <4 x i1> %312, <4 x i32> %310, <4 x i32> <i32 -32768, i32 -32768, i32 -32768, i32 -32768>
  %315 = bitcast i32* %301 to <4 x i32>*
  store <4 x i32> %313, <4 x i32>* %315, align 4
  %316 = bitcast i32* %304 to <4 x i32>*
  store <4 x i32> %314, <4 x i32>* %316, align 4
  br label %317

317:                                              ; preds = %298, %300
  br i1 %85, label %330, label %318

318:                                              ; preds = %317, %257
  %319 = phi i64 [ 0, %257 ], [ %80, %317 ]
  br label %320

320:                                              ; preds = %318, %320
  %321 = phi i64 [ %328, %320 ], [ %319, %318 ]
  %322 = getelementptr inbounds i32, i32* %195, i64 %321
  %323 = load i32, i32* %322, align 4
  %324 = icmp slt i32 %323, 32767
  %325 = select i1 %324, i32 %323, i32 32767
  %326 = icmp sgt i32 %325, -32768
  %327 = select i1 %326, i32 %325, i32 -32768
  store i32 %327, i32* %322, align 4
  %328 = add nuw nsw i64 %321, 1
  %329 = icmp eq i64 %328, %34
  br i1 %329, label %330, label %320, !llvm.loop !78

330:                                              ; preds = %320, %317, %256
  %331 = add nuw nsw i64 %125, 1
  %332 = icmp eq i64 %331, %42
  br i1 %332, label %333, label %124

333:                                              ; preds = %330, %28, %109
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN7libgav13dsp12_GLOBAL__N_115TransformLoop_CILi10EitLNS0_11Transform1DE0EXadL_ZNS1_11DctDcOnly_CILi10EiLi4EEEvPvabibEEXadL_ZNS1_5Dct_CIiLi4EEEvS5_aEELb0EEEvNS_13TransformTypeENS_13TransformSizeEiS5_iiS5_(i8 zeroext, i8 zeroext, i32, i8*, i32, i32, i8* nocapture readonly) #0 {
  %8 = alloca [64 x i32], align 16
  %9 = zext i8 %1 to i64
  %10 = getelementptr inbounds [19 x i8], [19 x i8]* @_ZN7libgav115kTransformWidthE, i64 0, i64 %9
  %11 = load i8, i8* %10, align 1
  %12 = zext i8 %11 to i32
  %13 = getelementptr inbounds [19 x i8], [19 x i8]* @_ZN7libgav116kTransformHeightE, i64 0, i64 %9
  %14 = load i8, i8* %13, align 1
  %15 = bitcast i8* %3 to i32*
  %16 = zext i8 %0 to i32
  %17 = shl i32 1, %16
  %18 = and i32 %17, 33104
  %19 = icmp eq i32 %18, 0
  %20 = bitcast [64 x i32]* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 256, i8* nonnull %20) #4
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %20, i8 -86, i64 256, i1 false)
  %21 = icmp eq i8 %11, 0
  br i1 %21, label %47, label %22

22:                                               ; preds = %7
  %23 = zext i8 %11 to i64
  %24 = icmp eq i32 %2, 1
  %25 = getelementptr inbounds [64 x i32], [64 x i32]* %8, i64 0, i64 0
  %26 = getelementptr inbounds [64 x i32], [64 x i32]* %8, i64 0, i64 4
  %27 = getelementptr inbounds [64 x i32], [64 x i32]* %8, i64 0, i64 8
  %28 = getelementptr inbounds [64 x i32], [64 x i32]* %8, i64 0, i64 12
  %29 = icmp eq i8 %14, 0
  %30 = getelementptr inbounds i8, i8* %6, i64 4
  %31 = bitcast i8* %30 to i32*
  %32 = getelementptr inbounds i8, i8* %6, i64 8
  %33 = bitcast i8* %32 to i16**
  %34 = zext i8 %14 to i64
  %35 = sext i32 %5 to i64
  %36 = sext i32 %4 to i64
  %37 = zext i8 %11 to i64
  %38 = add nsw i64 %34, -1
  %39 = and i64 %34, 3
  %40 = icmp ult i64 %38, 3
  %41 = sub nsw i64 %34, %39
  %42 = icmp eq i64 %39, 0
  %43 = bitcast [64 x i32]* %8 to <4 x i32>*
  %44 = bitcast i32* %26 to <4 x i32>*
  %45 = bitcast i32* %27 to <4 x i32>*
  %46 = bitcast i32* %28 to <4 x i32>*
  br label %48

47:                                               ; preds = %112, %7
  call void @llvm.lifetime.end.p0i8(i64 256, i8* nonnull %20) #4
  ret void

48:                                               ; preds = %112, %22
  %49 = phi i64 [ 0, %22 ], [ %113, %112 ]
  %50 = phi i32 [ 0, %22 ], [ %114, %112 ]
  %51 = xor i32 %50, -1
  %52 = add nsw i32 %51, %12
  %53 = trunc i64 %49 to i32
  %54 = select i1 %19, i32 %53, i32 %52
  %55 = sext i32 %54 to i64
  %56 = getelementptr inbounds i32, i32* %15, i64 %55
  br i1 %40, label %82, label %57

57:                                               ; preds = %48, %57
  %58 = phi i64 [ %79, %57 ], [ 0, %48 ]
  %59 = phi i64 [ %80, %57 ], [ %41, %48 ]
  %60 = mul nuw nsw i64 %58, %23
  %61 = getelementptr inbounds i32, i32* %56, i64 %60
  %62 = load i32, i32* %61, align 4
  %63 = getelementptr inbounds [64 x i32], [64 x i32]* %8, i64 0, i64 %58
  store i32 %62, i32* %63, align 16
  %64 = or i64 %58, 1
  %65 = mul nuw nsw i64 %64, %23
  %66 = getelementptr inbounds i32, i32* %56, i64 %65
  %67 = load i32, i32* %66, align 4
  %68 = getelementptr inbounds [64 x i32], [64 x i32]* %8, i64 0, i64 %64
  store i32 %67, i32* %68, align 4
  %69 = or i64 %58, 2
  %70 = mul nuw nsw i64 %69, %23
  %71 = getelementptr inbounds i32, i32* %56, i64 %70
  %72 = load i32, i32* %71, align 4
  %73 = getelementptr inbounds [64 x i32], [64 x i32]* %8, i64 0, i64 %69
  store i32 %72, i32* %73, align 8
  %74 = or i64 %58, 3
  %75 = mul nuw nsw i64 %74, %23
  %76 = getelementptr inbounds i32, i32* %56, i64 %75
  %77 = load i32, i32* %76, align 4
  %78 = getelementptr inbounds [64 x i32], [64 x i32]* %8, i64 0, i64 %74
  store i32 %77, i32* %78, align 4
  %79 = add nuw nsw i64 %58, 4
  %80 = add i64 %59, -4
  %81 = icmp eq i64 %80, 0
  br i1 %81, label %82, label %57

82:                                               ; preds = %57, %48
  %83 = phi i64 [ 0, %48 ], [ %79, %57 ]
  br i1 %42, label %94, label %84

84:                                               ; preds = %82, %84
  %85 = phi i64 [ %91, %84 ], [ %83, %82 ]
  %86 = phi i64 [ %92, %84 ], [ %39, %82 ]
  %87 = mul nuw nsw i64 %85, %23
  %88 = getelementptr inbounds i32, i32* %56, i64 %87
  %89 = load i32, i32* %88, align 4
  %90 = getelementptr inbounds [64 x i32], [64 x i32]* %8, i64 0, i64 %85
  store i32 %89, i32* %90, align 4
  %91 = add nuw nsw i64 %85, 1
  %92 = add i64 %86, -1
  %93 = icmp eq i64 %92, 0
  br i1 %93, label %94, label %84, !llvm.loop !79

94:                                               ; preds = %84, %82
  br i1 %24, label %95, label %108

95:                                               ; preds = %94
  %96 = load i32, i32* %25, align 16
  %97 = mul nsw i32 %96, 2896
  %98 = sext i32 %97 to i64
  %99 = add nsw i64 %98, 2048
  %100 = ashr i64 %99, 12
  %101 = trunc i64 %100 to i32
  %102 = icmp slt i32 %101, 32767
  %103 = select i1 %102, i32 %101, i32 32767
  %104 = icmp sgt i32 %103, -32768
  %105 = select i1 %104, i32 %103, i32 -32768
  %106 = insertelement <4 x i32> undef, i32 %105, i32 0
  %107 = shufflevector <4 x i32> %106, <4 x i32> undef, <4 x i32> zeroinitializer
  store <4 x i32> %107, <4 x i32>* %43, align 16
  store <4 x i32> %107, <4 x i32>* %44, align 16
  store <4 x i32> %107, <4 x i32>* %45, align 16
  store <4 x i32> %107, <4 x i32>* %46, align 16
  br label %109

108:                                              ; preds = %94
  call fastcc void @_ZN7libgav13dsp12_GLOBAL__N_15Dct_CIiLi4EEEvPva(i8* nonnull %20, i8 signext 16)
  br label %109

109:                                              ; preds = %108, %95
  br i1 %29, label %112, label %110

110:                                              ; preds = %109
  %111 = add nsw i64 %49, %36
  br label %116

112:                                              ; preds = %116, %109
  %113 = add nuw nsw i64 %49, 1
  %114 = add nuw nsw i32 %50, 1
  %115 = icmp eq i64 %113, %37
  br i1 %115, label %47, label %48

116:                                              ; preds = %116, %110
  %117 = phi i64 [ 0, %110 ], [ %137, %116 ]
  %118 = add nsw i64 %117, %35
  %119 = getelementptr inbounds [64 x i32], [64 x i32]* %8, i64 0, i64 %117
  %120 = load i32, i32* %119, align 4
  %121 = add nsw i32 %120, 8
  %122 = ashr i32 %121, 4
  %123 = load i32, i32* %31, align 4
  %124 = sext i32 %123 to i64
  %125 = mul nsw i64 %118, %124
  %126 = load i16*, i16** %33, align 8
  %127 = getelementptr inbounds i16, i16* %126, i64 %111
  %128 = getelementptr inbounds i16, i16* %127, i64 %125
  %129 = load i16, i16* %128, align 2
  %130 = zext i16 %129 to i32
  %131 = add nsw i32 %122, %130
  %132 = icmp slt i32 %131, 1023
  %133 = select i1 %132, i32 %131, i32 1023
  %134 = icmp sgt i32 %133, 0
  %135 = select i1 %134, i32 %133, i32 0
  %136 = trunc i32 %135 to i16
  store i16 %136, i16* %128, align 2
  %137 = add nuw nsw i64 %117, 1
  %138 = icmp eq i64 %137, %34
  br i1 %138, label %112, label %116
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN7libgav13dsp12_GLOBAL__N_115TransformLoop_CILi10EitLNS0_11Transform1DE0EXadL_ZNS1_11DctDcOnly_CILi10EiLi5EEEvPvabibEEXadL_ZNS1_5Dct_CIiLi5EEEvS5_aEELb1EEEvNS_13TransformTypeENS_13TransformSizeEiS5_iiS5_(i8 zeroext, i8 zeroext, i32, i8*, i32, i32, i8* nocapture readnone) #0 {
  %8 = zext i8 %1 to i64
  %9 = getelementptr inbounds [19 x i8], [19 x i8]* @_ZN7libgav115kTransformWidthE, i64 0, i64 %8
  %10 = load i8, i8* %9, align 1
  %11 = zext i8 %10 to i32
  %12 = getelementptr inbounds [19 x i8], [19 x i8]* @_ZN7libgav119kTransformWidthLog2E, i64 0, i64 %8
  %13 = load i8, i8* %12, align 1
  %14 = zext i8 %13 to i32
  %15 = getelementptr inbounds [19 x i8], [19 x i8]* @_ZN7libgav120kTransformHeightLog2E, i64 0, i64 %8
  %16 = load i8, i8* %15, align 1
  %17 = zext i8 %16 to i32
  %18 = bitcast i8* %3 to i32*
  %19 = getelementptr inbounds [19 x i8], [19 x i8]* @_ZN7libgav13dsp12_GLOBAL__N_118kTransformRowShiftE, i64 0, i64 %8
  %20 = load i8, i8* %19, align 1
  %21 = zext i8 %20 to i32
  %22 = sub nsw i32 %14, %17
  %23 = icmp slt i32 %22, 0
  %24 = sub nsw i32 0, %22
  %25 = select i1 %23, i32 %24, i32 %22
  %26 = icmp eq i32 %25, 1
  %27 = icmp eq i32 %2, 1
  br i1 %27, label %86, label %28

28:                                               ; preds = %7
  %29 = icmp sgt i32 %2, 0
  br i1 %29, label %30, label %296

30:                                               ; preds = %28
  %31 = icmp ult i32 %11, 32
  %32 = select i1 %31, i32 %11, i32 32
  %33 = icmp slt i32 %32, 1
  %34 = zext i8 %10 to i64
  %35 = lshr i64 524276, %8
  %36 = and i64 %35, 1
  %37 = icmp eq i64 %36, 0
  %38 = icmp eq i8 %10, 0
  %39 = shl i32 1, %21
  %40 = ashr i32 %39, 1
  %41 = zext i32 %32 to i64
  %42 = zext i32 %2 to i64
  %43 = xor i1 %26, true
  %44 = or i1 %33, %43
  %45 = or i1 %37, %38
  %46 = zext i8 %10 to i64
  %47 = icmp ugt i64 %41, 1
  %48 = select i1 %47, i64 %41, i64 1
  %49 = and i64 %48, 56
  %50 = add nsw i64 %49, -8
  %51 = lshr exact i64 %50, 3
  %52 = add nuw nsw i64 %51, 1
  %53 = and i64 %34, 248
  %54 = add nsw i64 %53, -8
  %55 = lshr exact i64 %54, 3
  %56 = add nuw nsw i64 %55, 1
  %57 = icmp ult i64 %48, 8
  %58 = and i64 %48, 56
  %59 = and i64 %52, 1
  %60 = icmp eq i64 %50, 0
  %61 = sub nuw nsw i64 %52, %59
  %62 = icmp eq i64 %59, 0
  %63 = icmp eq i64 %48, %58
  %64 = icmp ult i8 %10, 8
  %65 = and i64 %34, 248
  %66 = insertelement <4 x i32> undef, i32 %40, i32 0
  %67 = shufflevector <4 x i32> %66, <4 x i32> undef, <4 x i32> zeroinitializer
  %68 = insertelement <4 x i32> undef, i32 %40, i32 0
  %69 = shufflevector <4 x i32> %68, <4 x i32> undef, <4 x i32> zeroinitializer
  %70 = insertelement <4 x i32> undef, i32 %21, i32 0
  %71 = shufflevector <4 x i32> %70, <4 x i32> undef, <4 x i32> zeroinitializer
  %72 = insertelement <4 x i32> undef, i32 %21, i32 0
  %73 = shufflevector <4 x i32> %72, <4 x i32> undef, <4 x i32> zeroinitializer
  %74 = and i64 %56, 1
  %75 = icmp eq i64 %54, 0
  %76 = sub nuw nsw i64 %56, %74
  %77 = icmp eq i64 %74, 0
  %78 = icmp eq i64 %65, %34
  %79 = icmp ult i8 %10, 8
  %80 = and i64 %34, 248
  %81 = and i64 %56, 1
  %82 = icmp eq i64 %54, 0
  %83 = sub nuw nsw i64 %56, %81
  %84 = icmp eq i64 %81, 0
  %85 = icmp eq i64 %80, %34
  br label %87

86:                                               ; preds = %7
  tail call fastcc void @_ZN7libgav13dsp12_GLOBAL__N_111DctDcOnly_CILi10EiLi5EEEvPvabib(i8* %3, i1 zeroext %26, i32 %21, i1 zeroext true)
  br label %296

87:                                               ; preds = %293, %30
  %88 = phi i64 [ 0, %30 ], [ %294, %293 ]
  %89 = mul nuw nsw i64 %88, %34
  br i1 %44, label %157, label %90

90:                                               ; preds = %87
  %91 = getelementptr inbounds i32, i32* %18, i64 %89
  br i1 %57, label %146, label %92

92:                                               ; preds = %90
  br i1 %60, label %128, label %93

93:                                               ; preds = %92, %93
  %94 = phi i64 [ %125, %93 ], [ 0, %92 ]
  %95 = phi i64 [ %126, %93 ], [ %61, %92 ]
  %96 = getelementptr inbounds i32, i32* %91, i64 %94
  %97 = bitcast i32* %96 to <4 x i32>*
  %98 = load <4 x i32>, <4 x i32>* %97, align 4
  %99 = getelementptr inbounds i32, i32* %96, i64 4
  %100 = bitcast i32* %99 to <4 x i32>*
  %101 = load <4 x i32>, <4 x i32>* %100, align 4
  %102 = mul nsw <4 x i32> %98, <i32 2896, i32 2896, i32 2896, i32 2896>
  %103 = mul nsw <4 x i32> %101, <i32 2896, i32 2896, i32 2896, i32 2896>
  %104 = add nsw <4 x i32> %102, <i32 2048, i32 2048, i32 2048, i32 2048>
  %105 = add nsw <4 x i32> %103, <i32 2048, i32 2048, i32 2048, i32 2048>
  %106 = ashr <4 x i32> %104, <i32 12, i32 12, i32 12, i32 12>
  %107 = ashr <4 x i32> %105, <i32 12, i32 12, i32 12, i32 12>
  %108 = bitcast i32* %96 to <4 x i32>*
  store <4 x i32> %106, <4 x i32>* %108, align 4
  %109 = bitcast i32* %99 to <4 x i32>*
  store <4 x i32> %107, <4 x i32>* %109, align 4
  %110 = or i64 %94, 8
  %111 = getelementptr inbounds i32, i32* %91, i64 %110
  %112 = bitcast i32* %111 to <4 x i32>*
  %113 = load <4 x i32>, <4 x i32>* %112, align 4
  %114 = getelementptr inbounds i32, i32* %111, i64 4
  %115 = bitcast i32* %114 to <4 x i32>*
  %116 = load <4 x i32>, <4 x i32>* %115, align 4
  %117 = mul nsw <4 x i32> %113, <i32 2896, i32 2896, i32 2896, i32 2896>
  %118 = mul nsw <4 x i32> %116, <i32 2896, i32 2896, i32 2896, i32 2896>
  %119 = add nsw <4 x i32> %117, <i32 2048, i32 2048, i32 2048, i32 2048>
  %120 = add nsw <4 x i32> %118, <i32 2048, i32 2048, i32 2048, i32 2048>
  %121 = ashr <4 x i32> %119, <i32 12, i32 12, i32 12, i32 12>
  %122 = ashr <4 x i32> %120, <i32 12, i32 12, i32 12, i32 12>
  %123 = bitcast i32* %111 to <4 x i32>*
  store <4 x i32> %121, <4 x i32>* %123, align 4
  %124 = bitcast i32* %114 to <4 x i32>*
  store <4 x i32> %122, <4 x i32>* %124, align 4
  %125 = add i64 %94, 16
  %126 = add i64 %95, -2
  %127 = icmp eq i64 %126, 0
  br i1 %127, label %128, label %93, !llvm.loop !80

128:                                              ; preds = %93, %92
  %129 = phi i64 [ 0, %92 ], [ %125, %93 ]
  br i1 %62, label %145, label %130

130:                                              ; preds = %128
  %131 = getelementptr inbounds i32, i32* %91, i64 %129
  %132 = bitcast i32* %131 to <4 x i32>*
  %133 = load <4 x i32>, <4 x i32>* %132, align 4
  %134 = getelementptr inbounds i32, i32* %131, i64 4
  %135 = bitcast i32* %134 to <4 x i32>*
  %136 = load <4 x i32>, <4 x i32>* %135, align 4
  %137 = mul nsw <4 x i32> %133, <i32 2896, i32 2896, i32 2896, i32 2896>
  %138 = mul nsw <4 x i32> %136, <i32 2896, i32 2896, i32 2896, i32 2896>
  %139 = add nsw <4 x i32> %137, <i32 2048, i32 2048, i32 2048, i32 2048>
  %140 = add nsw <4 x i32> %138, <i32 2048, i32 2048, i32 2048, i32 2048>
  %141 = ashr <4 x i32> %139, <i32 12, i32 12, i32 12, i32 12>
  %142 = ashr <4 x i32> %140, <i32 12, i32 12, i32 12, i32 12>
  %143 = bitcast i32* %131 to <4 x i32>*
  store <4 x i32> %141, <4 x i32>* %143, align 4
  %144 = bitcast i32* %134 to <4 x i32>*
  store <4 x i32> %142, <4 x i32>* %144, align 4
  br label %145

145:                                              ; preds = %128, %130
  br i1 %63, label %157, label %146

146:                                              ; preds = %145, %90
  %147 = phi i64 [ 0, %90 ], [ %58, %145 ]
  br label %148

148:                                              ; preds = %146, %148
  %149 = phi i64 [ %155, %148 ], [ %147, %146 ]
  %150 = getelementptr inbounds i32, i32* %91, i64 %149
  %151 = load i32, i32* %150, align 4
  %152 = mul nsw i32 %151, 2896
  %153 = add nsw i32 %152, 2048
  %154 = ashr i32 %153, 12
  store i32 %154, i32* %150, align 4
  %155 = add nuw nsw i64 %149, 1
  %156 = icmp ult i64 %155, %41
  br i1 %156, label %148, label %157, !llvm.loop !81

157:                                              ; preds = %148, %145, %87
  %158 = getelementptr inbounds i32, i32* %18, i64 %89
  %159 = bitcast i32* %158 to i8*
  tail call fastcc void @_ZN7libgav13dsp12_GLOBAL__N_15Dct_CIiLi5EEEvPva(i8* %159, i8 signext 18)
  br i1 %45, label %219, label %160

160:                                              ; preds = %157
  br i1 %64, label %209, label %161

161:                                              ; preds = %160
  br i1 %75, label %193, label %162

162:                                              ; preds = %161, %162
  %163 = phi i64 [ %190, %162 ], [ 0, %161 ]
  %164 = phi i64 [ %191, %162 ], [ %76, %161 ]
  %165 = getelementptr inbounds i32, i32* %158, i64 %163
  %166 = bitcast i32* %165 to <4 x i32>*
  %167 = load <4 x i32>, <4 x i32>* %166, align 4
  %168 = getelementptr inbounds i32, i32* %165, i64 4
  %169 = bitcast i32* %168 to <4 x i32>*
  %170 = load <4 x i32>, <4 x i32>* %169, align 4
  %171 = add nsw <4 x i32> %167, %67
  %172 = add nsw <4 x i32> %170, %69
  %173 = ashr <4 x i32> %171, %71
  %174 = ashr <4 x i32> %172, %73
  %175 = bitcast i32* %165 to <4 x i32>*
  store <4 x i32> %173, <4 x i32>* %175, align 4
  %176 = bitcast i32* %168 to <4 x i32>*
  store <4 x i32> %174, <4 x i32>* %176, align 4
  %177 = or i64 %163, 8
  %178 = getelementptr inbounds i32, i32* %158, i64 %177
  %179 = bitcast i32* %178 to <4 x i32>*
  %180 = load <4 x i32>, <4 x i32>* %179, align 4
  %181 = getelementptr inbounds i32, i32* %178, i64 4
  %182 = bitcast i32* %181 to <4 x i32>*
  %183 = load <4 x i32>, <4 x i32>* %182, align 4
  %184 = add nsw <4 x i32> %180, %67
  %185 = add nsw <4 x i32> %183, %69
  %186 = ashr <4 x i32> %184, %71
  %187 = ashr <4 x i32> %185, %73
  %188 = bitcast i32* %178 to <4 x i32>*
  store <4 x i32> %186, <4 x i32>* %188, align 4
  %189 = bitcast i32* %181 to <4 x i32>*
  store <4 x i32> %187, <4 x i32>* %189, align 4
  %190 = add i64 %163, 16
  %191 = add i64 %164, -2
  %192 = icmp eq i64 %191, 0
  br i1 %192, label %193, label %162, !llvm.loop !82

193:                                              ; preds = %162, %161
  %194 = phi i64 [ 0, %161 ], [ %190, %162 ]
  br i1 %77, label %208, label %195

195:                                              ; preds = %193
  %196 = getelementptr inbounds i32, i32* %158, i64 %194
  %197 = bitcast i32* %196 to <4 x i32>*
  %198 = load <4 x i32>, <4 x i32>* %197, align 4
  %199 = getelementptr inbounds i32, i32* %196, i64 4
  %200 = bitcast i32* %199 to <4 x i32>*
  %201 = load <4 x i32>, <4 x i32>* %200, align 4
  %202 = add nsw <4 x i32> %198, %67
  %203 = add nsw <4 x i32> %201, %69
  %204 = ashr <4 x i32> %202, %71
  %205 = ashr <4 x i32> %203, %73
  %206 = bitcast i32* %196 to <4 x i32>*
  store <4 x i32> %204, <4 x i32>* %206, align 4
  %207 = bitcast i32* %199 to <4 x i32>*
  store <4 x i32> %205, <4 x i32>* %207, align 4
  br label %208

208:                                              ; preds = %193, %195
  br i1 %78, label %219, label %209

209:                                              ; preds = %208, %160
  %210 = phi i64 [ 0, %160 ], [ %65, %208 ]
  br label %211

211:                                              ; preds = %209, %211
  %212 = phi i64 [ %217, %211 ], [ %210, %209 ]
  %213 = getelementptr inbounds i32, i32* %158, i64 %212
  %214 = load i32, i32* %213, align 4
  %215 = add nsw i32 %214, %40
  %216 = ashr i32 %215, %21
  store i32 %216, i32* %213, align 4
  %217 = add nuw nsw i64 %212, 1
  %218 = icmp eq i64 %217, %46
  br i1 %218, label %219, label %211, !llvm.loop !83

219:                                              ; preds = %211, %208, %157
  br i1 %38, label %293, label %220

220:                                              ; preds = %219
  br i1 %79, label %281, label %221

221:                                              ; preds = %220
  br i1 %82, label %261, label %222

222:                                              ; preds = %221, %222
  %223 = phi i64 [ %258, %222 ], [ 0, %221 ]
  %224 = phi i64 [ %259, %222 ], [ %83, %221 ]
  %225 = getelementptr inbounds i32, i32* %158, i64 %223
  %226 = bitcast i32* %225 to <4 x i32>*
  %227 = load <4 x i32>, <4 x i32>* %226, align 4
  %228 = getelementptr inbounds i32, i32* %225, i64 4
  %229 = bitcast i32* %228 to <4 x i32>*
  %230 = load <4 x i32>, <4 x i32>* %229, align 4
  %231 = icmp slt <4 x i32> %227, <i32 32767, i32 32767, i32 32767, i32 32767>
  %232 = icmp slt <4 x i32> %230, <i32 32767, i32 32767, i32 32767, i32 32767>
  %233 = select <4 x i1> %231, <4 x i32> %227, <4 x i32> <i32 32767, i32 32767, i32 32767, i32 32767>
  %234 = select <4 x i1> %232, <4 x i32> %230, <4 x i32> <i32 32767, i32 32767, i32 32767, i32 32767>
  %235 = icmp sgt <4 x i32> %233, <i32 -32768, i32 -32768, i32 -32768, i32 -32768>
  %236 = icmp sgt <4 x i32> %234, <i32 -32768, i32 -32768, i32 -32768, i32 -32768>
  %237 = select <4 x i1> %235, <4 x i32> %233, <4 x i32> <i32 -32768, i32 -32768, i32 -32768, i32 -32768>
  %238 = select <4 x i1> %236, <4 x i32> %234, <4 x i32> <i32 -32768, i32 -32768, i32 -32768, i32 -32768>
  %239 = bitcast i32* %225 to <4 x i32>*
  store <4 x i32> %237, <4 x i32>* %239, align 4
  %240 = bitcast i32* %228 to <4 x i32>*
  store <4 x i32> %238, <4 x i32>* %240, align 4
  %241 = or i64 %223, 8
  %242 = getelementptr inbounds i32, i32* %158, i64 %241
  %243 = bitcast i32* %242 to <4 x i32>*
  %244 = load <4 x i32>, <4 x i32>* %243, align 4
  %245 = getelementptr inbounds i32, i32* %242, i64 4
  %246 = bitcast i32* %245 to <4 x i32>*
  %247 = load <4 x i32>, <4 x i32>* %246, align 4
  %248 = icmp slt <4 x i32> %244, <i32 32767, i32 32767, i32 32767, i32 32767>
  %249 = icmp slt <4 x i32> %247, <i32 32767, i32 32767, i32 32767, i32 32767>
  %250 = select <4 x i1> %248, <4 x i32> %244, <4 x i32> <i32 32767, i32 32767, i32 32767, i32 32767>
  %251 = select <4 x i1> %249, <4 x i32> %247, <4 x i32> <i32 32767, i32 32767, i32 32767, i32 32767>
  %252 = icmp sgt <4 x i32> %250, <i32 -32768, i32 -32768, i32 -32768, i32 -32768>
  %253 = icmp sgt <4 x i32> %251, <i32 -32768, i32 -32768, i32 -32768, i32 -32768>
  %254 = select <4 x i1> %252, <4 x i32> %250, <4 x i32> <i32 -32768, i32 -32768, i32 -32768, i32 -32768>
  %255 = select <4 x i1> %253, <4 x i32> %251, <4 x i32> <i32 -32768, i32 -32768, i32 -32768, i32 -32768>
  %256 = bitcast i32* %242 to <4 x i32>*
  store <4 x i32> %254, <4 x i32>* %256, align 4
  %257 = bitcast i32* %245 to <4 x i32>*
  store <4 x i32> %255, <4 x i32>* %257, align 4
  %258 = add i64 %223, 16
  %259 = add i64 %224, -2
  %260 = icmp eq i64 %259, 0
  br i1 %260, label %261, label %222, !llvm.loop !84

261:                                              ; preds = %222, %221
  %262 = phi i64 [ 0, %221 ], [ %258, %222 ]
  br i1 %84, label %280, label %263

263:                                              ; preds = %261
  %264 = getelementptr inbounds i32, i32* %158, i64 %262
  %265 = bitcast i32* %264 to <4 x i32>*
  %266 = load <4 x i32>, <4 x i32>* %265, align 4
  %267 = getelementptr inbounds i32, i32* %264, i64 4
  %268 = bitcast i32* %267 to <4 x i32>*
  %269 = load <4 x i32>, <4 x i32>* %268, align 4
  %270 = icmp slt <4 x i32> %266, <i32 32767, i32 32767, i32 32767, i32 32767>
  %271 = icmp slt <4 x i32> %269, <i32 32767, i32 32767, i32 32767, i32 32767>
  %272 = select <4 x i1> %270, <4 x i32> %266, <4 x i32> <i32 32767, i32 32767, i32 32767, i32 32767>
  %273 = select <4 x i1> %271, <4 x i32> %269, <4 x i32> <i32 32767, i32 32767, i32 32767, i32 32767>
  %274 = icmp sgt <4 x i32> %272, <i32 -32768, i32 -32768, i32 -32768, i32 -32768>
  %275 = icmp sgt <4 x i32> %273, <i32 -32768, i32 -32768, i32 -32768, i32 -32768>
  %276 = select <4 x i1> %274, <4 x i32> %272, <4 x i32> <i32 -32768, i32 -32768, i32 -32768, i32 -32768>
  %277 = select <4 x i1> %275, <4 x i32> %273, <4 x i32> <i32 -32768, i32 -32768, i32 -32768, i32 -32768>
  %278 = bitcast i32* %264 to <4 x i32>*
  store <4 x i32> %276, <4 x i32>* %278, align 4
  %279 = bitcast i32* %267 to <4 x i32>*
  store <4 x i32> %277, <4 x i32>* %279, align 4
  br label %280

280:                                              ; preds = %261, %263
  br i1 %85, label %293, label %281

281:                                              ; preds = %280, %220
  %282 = phi i64 [ 0, %220 ], [ %80, %280 ]
  br label %283

283:                                              ; preds = %281, %283
  %284 = phi i64 [ %291, %283 ], [ %282, %281 ]
  %285 = getelementptr inbounds i32, i32* %158, i64 %284
  %286 = load i32, i32* %285, align 4
  %287 = icmp slt i32 %286, 32767
  %288 = select i1 %287, i32 %286, i32 32767
  %289 = icmp sgt i32 %288, -32768
  %290 = select i1 %289, i32 %288, i32 -32768
  store i32 %290, i32* %285, align 4
  %291 = add nuw nsw i64 %284, 1
  %292 = icmp eq i64 %291, %34
  br i1 %292, label %293, label %283, !llvm.loop !85

293:                                              ; preds = %283, %280, %219
  %294 = add nuw nsw i64 %88, 1
  %295 = icmp eq i64 %294, %42
  br i1 %295, label %296, label %87

296:                                              ; preds = %293, %28, %86
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN7libgav13dsp12_GLOBAL__N_115TransformLoop_CILi10EitLNS0_11Transform1DE0EXadL_ZNS1_11DctDcOnly_CILi10EiLi5EEEvPvabibEEXadL_ZNS1_5Dct_CIiLi5EEEvS5_aEELb0EEEvNS_13TransformTypeENS_13TransformSizeEiS5_iiS5_(i8 zeroext, i8 zeroext, i32, i8*, i32, i32, i8* nocapture readonly) #0 {
  %8 = alloca [64 x i32], align 16
  %9 = zext i8 %1 to i64
  %10 = getelementptr inbounds [19 x i8], [19 x i8]* @_ZN7libgav115kTransformWidthE, i64 0, i64 %9
  %11 = load i8, i8* %10, align 1
  %12 = zext i8 %11 to i32
  %13 = getelementptr inbounds [19 x i8], [19 x i8]* @_ZN7libgav116kTransformHeightE, i64 0, i64 %9
  %14 = load i8, i8* %13, align 1
  %15 = bitcast i8* %3 to i32*
  %16 = zext i8 %0 to i32
  %17 = shl i32 1, %16
  %18 = and i32 %17, 33104
  %19 = icmp eq i32 %18, 0
  %20 = bitcast [64 x i32]* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 256, i8* nonnull %20) #4
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %20, i8 -86, i64 256, i1 false)
  %21 = icmp eq i8 %11, 0
  br i1 %21, label %55, label %22

22:                                               ; preds = %7
  %23 = zext i8 %11 to i64
  %24 = icmp eq i32 %2, 1
  %25 = getelementptr inbounds [64 x i32], [64 x i32]* %8, i64 0, i64 0
  %26 = getelementptr inbounds [64 x i32], [64 x i32]* %8, i64 0, i64 4
  %27 = getelementptr inbounds [64 x i32], [64 x i32]* %8, i64 0, i64 8
  %28 = getelementptr inbounds [64 x i32], [64 x i32]* %8, i64 0, i64 12
  %29 = getelementptr inbounds [64 x i32], [64 x i32]* %8, i64 0, i64 16
  %30 = getelementptr inbounds [64 x i32], [64 x i32]* %8, i64 0, i64 20
  %31 = getelementptr inbounds [64 x i32], [64 x i32]* %8, i64 0, i64 24
  %32 = getelementptr inbounds [64 x i32], [64 x i32]* %8, i64 0, i64 28
  %33 = icmp eq i8 %14, 0
  %34 = getelementptr inbounds i8, i8* %6, i64 4
  %35 = bitcast i8* %34 to i32*
  %36 = getelementptr inbounds i8, i8* %6, i64 8
  %37 = bitcast i8* %36 to i16**
  %38 = zext i8 %14 to i64
  %39 = sext i32 %5 to i64
  %40 = sext i32 %4 to i64
  %41 = zext i8 %11 to i64
  %42 = add nsw i64 %38, -1
  %43 = and i64 %38, 3
  %44 = icmp ult i64 %42, 3
  %45 = sub nsw i64 %38, %43
  %46 = icmp eq i64 %43, 0
  %47 = bitcast [64 x i32]* %8 to <4 x i32>*
  %48 = bitcast i32* %26 to <4 x i32>*
  %49 = bitcast i32* %27 to <4 x i32>*
  %50 = bitcast i32* %28 to <4 x i32>*
  %51 = bitcast i32* %29 to <4 x i32>*
  %52 = bitcast i32* %30 to <4 x i32>*
  %53 = bitcast i32* %31 to <4 x i32>*
  %54 = bitcast i32* %32 to <4 x i32>*
  br label %56

55:                                               ; preds = %120, %7
  call void @llvm.lifetime.end.p0i8(i64 256, i8* nonnull %20) #4
  ret void

56:                                               ; preds = %120, %22
  %57 = phi i64 [ 0, %22 ], [ %121, %120 ]
  %58 = phi i32 [ 0, %22 ], [ %122, %120 ]
  %59 = xor i32 %58, -1
  %60 = add nsw i32 %59, %12
  %61 = trunc i64 %57 to i32
  %62 = select i1 %19, i32 %61, i32 %60
  %63 = sext i32 %62 to i64
  %64 = getelementptr inbounds i32, i32* %15, i64 %63
  br i1 %44, label %90, label %65

65:                                               ; preds = %56, %65
  %66 = phi i64 [ %87, %65 ], [ 0, %56 ]
  %67 = phi i64 [ %88, %65 ], [ %45, %56 ]
  %68 = mul nuw nsw i64 %66, %23
  %69 = getelementptr inbounds i32, i32* %64, i64 %68
  %70 = load i32, i32* %69, align 4
  %71 = getelementptr inbounds [64 x i32], [64 x i32]* %8, i64 0, i64 %66
  store i32 %70, i32* %71, align 16
  %72 = or i64 %66, 1
  %73 = mul nuw nsw i64 %72, %23
  %74 = getelementptr inbounds i32, i32* %64, i64 %73
  %75 = load i32, i32* %74, align 4
  %76 = getelementptr inbounds [64 x i32], [64 x i32]* %8, i64 0, i64 %72
  store i32 %75, i32* %76, align 4
  %77 = or i64 %66, 2
  %78 = mul nuw nsw i64 %77, %23
  %79 = getelementptr inbounds i32, i32* %64, i64 %78
  %80 = load i32, i32* %79, align 4
  %81 = getelementptr inbounds [64 x i32], [64 x i32]* %8, i64 0, i64 %77
  store i32 %80, i32* %81, align 8
  %82 = or i64 %66, 3
  %83 = mul nuw nsw i64 %82, %23
  %84 = getelementptr inbounds i32, i32* %64, i64 %83
  %85 = load i32, i32* %84, align 4
  %86 = getelementptr inbounds [64 x i32], [64 x i32]* %8, i64 0, i64 %82
  store i32 %85, i32* %86, align 4
  %87 = add nuw nsw i64 %66, 4
  %88 = add i64 %67, -4
  %89 = icmp eq i64 %88, 0
  br i1 %89, label %90, label %65

90:                                               ; preds = %65, %56
  %91 = phi i64 [ 0, %56 ], [ %87, %65 ]
  br i1 %46, label %102, label %92

92:                                               ; preds = %90, %92
  %93 = phi i64 [ %99, %92 ], [ %91, %90 ]
  %94 = phi i64 [ %100, %92 ], [ %43, %90 ]
  %95 = mul nuw nsw i64 %93, %23
  %96 = getelementptr inbounds i32, i32* %64, i64 %95
  %97 = load i32, i32* %96, align 4
  %98 = getelementptr inbounds [64 x i32], [64 x i32]* %8, i64 0, i64 %93
  store i32 %97, i32* %98, align 4
  %99 = add nuw nsw i64 %93, 1
  %100 = add i64 %94, -1
  %101 = icmp eq i64 %100, 0
  br i1 %101, label %102, label %92, !llvm.loop !86

102:                                              ; preds = %92, %90
  br i1 %24, label %103, label %116

103:                                              ; preds = %102
  %104 = load i32, i32* %25, align 16
  %105 = mul nsw i32 %104, 2896
  %106 = sext i32 %105 to i64
  %107 = add nsw i64 %106, 2048
  %108 = ashr i64 %107, 12
  %109 = trunc i64 %108 to i32
  %110 = icmp slt i32 %109, 32767
  %111 = select i1 %110, i32 %109, i32 32767
  %112 = icmp sgt i32 %111, -32768
  %113 = select i1 %112, i32 %111, i32 -32768
  %114 = insertelement <4 x i32> undef, i32 %113, i32 0
  %115 = shufflevector <4 x i32> %114, <4 x i32> undef, <4 x i32> zeroinitializer
  store <4 x i32> %115, <4 x i32>* %47, align 16
  store <4 x i32> %115, <4 x i32>* %48, align 16
  store <4 x i32> %115, <4 x i32>* %49, align 16
  store <4 x i32> %115, <4 x i32>* %50, align 16
  store <4 x i32> %115, <4 x i32>* %51, align 16
  store <4 x i32> %115, <4 x i32>* %52, align 16
  store <4 x i32> %115, <4 x i32>* %53, align 16
  store <4 x i32> %115, <4 x i32>* %54, align 16
  br label %117

116:                                              ; preds = %102
  call fastcc void @_ZN7libgav13dsp12_GLOBAL__N_15Dct_CIiLi5EEEvPva(i8* nonnull %20, i8 signext 16)
  br label %117

117:                                              ; preds = %116, %103
  br i1 %33, label %120, label %118

118:                                              ; preds = %117
  %119 = add nsw i64 %57, %40
  br label %124

120:                                              ; preds = %124, %117
  %121 = add nuw nsw i64 %57, 1
  %122 = add nuw nsw i32 %58, 1
  %123 = icmp eq i64 %121, %41
  br i1 %123, label %55, label %56

124:                                              ; preds = %124, %118
  %125 = phi i64 [ 0, %118 ], [ %145, %124 ]
  %126 = add nsw i64 %125, %39
  %127 = getelementptr inbounds [64 x i32], [64 x i32]* %8, i64 0, i64 %125
  %128 = load i32, i32* %127, align 4
  %129 = add nsw i32 %128, 8
  %130 = ashr i32 %129, 4
  %131 = load i32, i32* %35, align 4
  %132 = sext i32 %131 to i64
  %133 = mul nsw i64 %126, %132
  %134 = load i16*, i16** %37, align 8
  %135 = getelementptr inbounds i16, i16* %134, i64 %119
  %136 = getelementptr inbounds i16, i16* %135, i64 %133
  %137 = load i16, i16* %136, align 2
  %138 = zext i16 %137 to i32
  %139 = add nsw i32 %130, %138
  %140 = icmp slt i32 %139, 1023
  %141 = select i1 %140, i32 %139, i32 1023
  %142 = icmp sgt i32 %141, 0
  %143 = select i1 %142, i32 %141, i32 0
  %144 = trunc i32 %143 to i16
  store i16 %144, i16* %136, align 2
  %145 = add nuw nsw i64 %125, 1
  %146 = icmp eq i64 %145, %38
  br i1 %146, label %120, label %124
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN7libgav13dsp12_GLOBAL__N_115TransformLoop_CILi10EitLNS0_11Transform1DE0EXadL_ZNS1_11DctDcOnly_CILi10EiLi6EEEvPvabibEEXadL_ZNS1_5Dct_CIiLi6EEEvS5_aEELb1EEEvNS_13TransformTypeENS_13TransformSizeEiS5_iiS5_(i8 zeroext, i8 zeroext, i32, i8*, i32, i32, i8* nocapture readnone) #0 {
  %8 = zext i8 %1 to i64
  %9 = getelementptr inbounds [19 x i8], [19 x i8]* @_ZN7libgav115kTransformWidthE, i64 0, i64 %8
  %10 = load i8, i8* %9, align 1
  %11 = zext i8 %10 to i32
  %12 = getelementptr inbounds [19 x i8], [19 x i8]* @_ZN7libgav119kTransformWidthLog2E, i64 0, i64 %8
  %13 = load i8, i8* %12, align 1
  %14 = zext i8 %13 to i32
  %15 = getelementptr inbounds [19 x i8], [19 x i8]* @_ZN7libgav120kTransformHeightLog2E, i64 0, i64 %8
  %16 = load i8, i8* %15, align 1
  %17 = zext i8 %16 to i32
  %18 = bitcast i8* %3 to i32*
  %19 = getelementptr inbounds [19 x i8], [19 x i8]* @_ZN7libgav13dsp12_GLOBAL__N_118kTransformRowShiftE, i64 0, i64 %8
  %20 = load i8, i8* %19, align 1
  %21 = zext i8 %20 to i32
  %22 = sub nsw i32 %14, %17
  %23 = icmp slt i32 %22, 0
  %24 = sub nsw i32 0, %22
  %25 = select i1 %23, i32 %24, i32 %22
  %26 = icmp eq i32 %25, 1
  %27 = icmp eq i32 %2, 1
  br i1 %27, label %86, label %28

28:                                               ; preds = %7
  %29 = icmp sgt i32 %2, 0
  br i1 %29, label %30, label %332

30:                                               ; preds = %28
  %31 = icmp ult i32 %11, 32
  %32 = select i1 %31, i32 %11, i32 32
  %33 = icmp slt i32 %32, 1
  %34 = zext i8 %10 to i64
  %35 = lshr i64 524276, %8
  %36 = and i64 %35, 1
  %37 = icmp eq i64 %36, 0
  %38 = icmp eq i8 %10, 0
  %39 = shl i32 1, %21
  %40 = ashr i32 %39, 1
  %41 = zext i32 %32 to i64
  %42 = zext i32 %2 to i64
  %43 = xor i1 %26, true
  %44 = or i1 %33, %43
  %45 = or i1 %37, %38
  %46 = zext i8 %10 to i64
  %47 = icmp ugt i64 %41, 1
  %48 = select i1 %47, i64 %41, i64 1
  %49 = and i64 %48, 56
  %50 = add nsw i64 %49, -8
  %51 = lshr exact i64 %50, 3
  %52 = add nuw nsw i64 %51, 1
  %53 = and i64 %34, 248
  %54 = add nsw i64 %53, -8
  %55 = lshr exact i64 %54, 3
  %56 = add nuw nsw i64 %55, 1
  %57 = icmp ult i64 %48, 8
  %58 = and i64 %48, 56
  %59 = and i64 %52, 1
  %60 = icmp eq i64 %50, 0
  %61 = sub nuw nsw i64 %52, %59
  %62 = icmp eq i64 %59, 0
  %63 = icmp eq i64 %48, %58
  %64 = icmp ult i8 %10, 8
  %65 = and i64 %34, 248
  %66 = insertelement <4 x i32> undef, i32 %40, i32 0
  %67 = shufflevector <4 x i32> %66, <4 x i32> undef, <4 x i32> zeroinitializer
  %68 = insertelement <4 x i32> undef, i32 %40, i32 0
  %69 = shufflevector <4 x i32> %68, <4 x i32> undef, <4 x i32> zeroinitializer
  %70 = insertelement <4 x i32> undef, i32 %21, i32 0
  %71 = shufflevector <4 x i32> %70, <4 x i32> undef, <4 x i32> zeroinitializer
  %72 = insertelement <4 x i32> undef, i32 %21, i32 0
  %73 = shufflevector <4 x i32> %72, <4 x i32> undef, <4 x i32> zeroinitializer
  %74 = and i64 %56, 1
  %75 = icmp eq i64 %54, 0
  %76 = sub nuw nsw i64 %56, %74
  %77 = icmp eq i64 %74, 0
  %78 = icmp eq i64 %65, %34
  %79 = icmp ult i8 %10, 8
  %80 = and i64 %34, 248
  %81 = and i64 %56, 1
  %82 = icmp eq i64 %54, 0
  %83 = sub nuw nsw i64 %56, %81
  %84 = icmp eq i64 %81, 0
  %85 = icmp eq i64 %80, %34
  br label %123

86:                                               ; preds = %7
  %87 = load i32, i32* %18, align 4
  br i1 %26, label %88, label %92

88:                                               ; preds = %86
  %89 = mul nsw i32 %87, 2896
  %90 = add nsw i32 %89, 2048
  %91 = ashr i32 %90, 12
  store i32 %91, i32* %18, align 4
  br label %92

92:                                               ; preds = %88, %86
  %93 = phi i32 [ %91, %88 ], [ %87, %86 ]
  %94 = mul nsw i32 %93, 2896
  %95 = sext i32 %94 to i64
  %96 = add nsw i64 %95, 2048
  %97 = ashr i64 %96, 12
  %98 = trunc i64 %97 to i32
  store i32 %98, i32* %18, align 4
  %99 = getelementptr inbounds i8, i8* %3, i64 4
  %100 = bitcast i8* %99 to i32*
  store i32 %98, i32* %100, align 4
  %101 = lshr i64 524276, %8
  %102 = and i64 %101, 1
  %103 = icmp eq i64 %102, 0
  br i1 %103, label %109, label %104

104:                                              ; preds = %92
  %105 = shl i32 1, %21
  %106 = ashr i32 %105, 1
  %107 = add nsw i32 %106, %98
  %108 = ashr i32 %107, %21
  store i32 %108, i32* %18, align 4
  br label %109

109:                                              ; preds = %92, %104
  %110 = phi i32 [ %108, %104 ], [ %98, %92 ]
  %111 = icmp slt i32 %110, 32767
  %112 = select i1 %111, i32 %110, i32 32767
  %113 = icmp sgt i32 %112, -32768
  %114 = select i1 %113, i32 %112, i32 -32768
  store i32 %114, i32* %18, align 4
  store i32 %114, i32* %100, align 4
  %115 = getelementptr inbounds i8, i8* %3, i64 8
  %116 = bitcast i8* %115 to i32*
  store i32 %114, i32* %116, align 4
  br label %117

117:                                              ; preds = %333, %109
  %118 = phi i64 [ 3, %109 ], [ %341, %333 ]
  %119 = load i32, i32* %18, align 4
  %120 = getelementptr inbounds i32, i32* %18, i64 %118
  store i32 %119, i32* %120, align 4
  %121 = add nuw nsw i64 %118, 1
  %122 = icmp eq i64 %121, 64
  br i1 %122, label %332, label %333

123:                                              ; preds = %329, %30
  %124 = phi i64 [ 0, %30 ], [ %330, %329 ]
  %125 = mul nuw nsw i64 %124, %34
  br i1 %44, label %193, label %126

126:                                              ; preds = %123
  %127 = getelementptr inbounds i32, i32* %18, i64 %125
  br i1 %57, label %182, label %128

128:                                              ; preds = %126
  br i1 %60, label %164, label %129

129:                                              ; preds = %128, %129
  %130 = phi i64 [ %161, %129 ], [ 0, %128 ]
  %131 = phi i64 [ %162, %129 ], [ %61, %128 ]
  %132 = getelementptr inbounds i32, i32* %127, i64 %130
  %133 = bitcast i32* %132 to <4 x i32>*
  %134 = load <4 x i32>, <4 x i32>* %133, align 4
  %135 = getelementptr inbounds i32, i32* %132, i64 4
  %136 = bitcast i32* %135 to <4 x i32>*
  %137 = load <4 x i32>, <4 x i32>* %136, align 4
  %138 = mul nsw <4 x i32> %134, <i32 2896, i32 2896, i32 2896, i32 2896>
  %139 = mul nsw <4 x i32> %137, <i32 2896, i32 2896, i32 2896, i32 2896>
  %140 = add nsw <4 x i32> %138, <i32 2048, i32 2048, i32 2048, i32 2048>
  %141 = add nsw <4 x i32> %139, <i32 2048, i32 2048, i32 2048, i32 2048>
  %142 = ashr <4 x i32> %140, <i32 12, i32 12, i32 12, i32 12>
  %143 = ashr <4 x i32> %141, <i32 12, i32 12, i32 12, i32 12>
  %144 = bitcast i32* %132 to <4 x i32>*
  store <4 x i32> %142, <4 x i32>* %144, align 4
  %145 = bitcast i32* %135 to <4 x i32>*
  store <4 x i32> %143, <4 x i32>* %145, align 4
  %146 = or i64 %130, 8
  %147 = getelementptr inbounds i32, i32* %127, i64 %146
  %148 = bitcast i32* %147 to <4 x i32>*
  %149 = load <4 x i32>, <4 x i32>* %148, align 4
  %150 = getelementptr inbounds i32, i32* %147, i64 4
  %151 = bitcast i32* %150 to <4 x i32>*
  %152 = load <4 x i32>, <4 x i32>* %151, align 4
  %153 = mul nsw <4 x i32> %149, <i32 2896, i32 2896, i32 2896, i32 2896>
  %154 = mul nsw <4 x i32> %152, <i32 2896, i32 2896, i32 2896, i32 2896>
  %155 = add nsw <4 x i32> %153, <i32 2048, i32 2048, i32 2048, i32 2048>
  %156 = add nsw <4 x i32> %154, <i32 2048, i32 2048, i32 2048, i32 2048>
  %157 = ashr <4 x i32> %155, <i32 12, i32 12, i32 12, i32 12>
  %158 = ashr <4 x i32> %156, <i32 12, i32 12, i32 12, i32 12>
  %159 = bitcast i32* %147 to <4 x i32>*
  store <4 x i32> %157, <4 x i32>* %159, align 4
  %160 = bitcast i32* %150 to <4 x i32>*
  store <4 x i32> %158, <4 x i32>* %160, align 4
  %161 = add i64 %130, 16
  %162 = add i64 %131, -2
  %163 = icmp eq i64 %162, 0
  br i1 %163, label %164, label %129, !llvm.loop !87

164:                                              ; preds = %129, %128
  %165 = phi i64 [ 0, %128 ], [ %161, %129 ]
  br i1 %62, label %181, label %166

166:                                              ; preds = %164
  %167 = getelementptr inbounds i32, i32* %127, i64 %165
  %168 = bitcast i32* %167 to <4 x i32>*
  %169 = load <4 x i32>, <4 x i32>* %168, align 4
  %170 = getelementptr inbounds i32, i32* %167, i64 4
  %171 = bitcast i32* %170 to <4 x i32>*
  %172 = load <4 x i32>, <4 x i32>* %171, align 4
  %173 = mul nsw <4 x i32> %169, <i32 2896, i32 2896, i32 2896, i32 2896>
  %174 = mul nsw <4 x i32> %172, <i32 2896, i32 2896, i32 2896, i32 2896>
  %175 = add nsw <4 x i32> %173, <i32 2048, i32 2048, i32 2048, i32 2048>
  %176 = add nsw <4 x i32> %174, <i32 2048, i32 2048, i32 2048, i32 2048>
  %177 = ashr <4 x i32> %175, <i32 12, i32 12, i32 12, i32 12>
  %178 = ashr <4 x i32> %176, <i32 12, i32 12, i32 12, i32 12>
  %179 = bitcast i32* %167 to <4 x i32>*
  store <4 x i32> %177, <4 x i32>* %179, align 4
  %180 = bitcast i32* %170 to <4 x i32>*
  store <4 x i32> %178, <4 x i32>* %180, align 4
  br label %181

181:                                              ; preds = %164, %166
  br i1 %63, label %193, label %182

182:                                              ; preds = %181, %126
  %183 = phi i64 [ 0, %126 ], [ %58, %181 ]
  br label %184

184:                                              ; preds = %182, %184
  %185 = phi i64 [ %191, %184 ], [ %183, %182 ]
  %186 = getelementptr inbounds i32, i32* %127, i64 %185
  %187 = load i32, i32* %186, align 4
  %188 = mul nsw i32 %187, 2896
  %189 = add nsw i32 %188, 2048
  %190 = ashr i32 %189, 12
  store i32 %190, i32* %186, align 4
  %191 = add nuw nsw i64 %185, 1
  %192 = icmp ult i64 %191, %41
  br i1 %192, label %184, label %193, !llvm.loop !88

193:                                              ; preds = %184, %181, %123
  %194 = getelementptr inbounds i32, i32* %18, i64 %125
  %195 = bitcast i32* %194 to i8*
  tail call fastcc void @_ZN7libgav13dsp12_GLOBAL__N_15Dct_CIiLi6EEEvPva(i8* %195, i8 signext 18)
  br i1 %45, label %255, label %196

196:                                              ; preds = %193
  br i1 %64, label %245, label %197

197:                                              ; preds = %196
  br i1 %75, label %229, label %198

198:                                              ; preds = %197, %198
  %199 = phi i64 [ %226, %198 ], [ 0, %197 ]
  %200 = phi i64 [ %227, %198 ], [ %76, %197 ]
  %201 = getelementptr inbounds i32, i32* %194, i64 %199
  %202 = bitcast i32* %201 to <4 x i32>*
  %203 = load <4 x i32>, <4 x i32>* %202, align 4
  %204 = getelementptr inbounds i32, i32* %201, i64 4
  %205 = bitcast i32* %204 to <4 x i32>*
  %206 = load <4 x i32>, <4 x i32>* %205, align 4
  %207 = add nsw <4 x i32> %203, %67
  %208 = add nsw <4 x i32> %206, %69
  %209 = ashr <4 x i32> %207, %71
  %210 = ashr <4 x i32> %208, %73
  %211 = bitcast i32* %201 to <4 x i32>*
  store <4 x i32> %209, <4 x i32>* %211, align 4
  %212 = bitcast i32* %204 to <4 x i32>*
  store <4 x i32> %210, <4 x i32>* %212, align 4
  %213 = or i64 %199, 8
  %214 = getelementptr inbounds i32, i32* %194, i64 %213
  %215 = bitcast i32* %214 to <4 x i32>*
  %216 = load <4 x i32>, <4 x i32>* %215, align 4
  %217 = getelementptr inbounds i32, i32* %214, i64 4
  %218 = bitcast i32* %217 to <4 x i32>*
  %219 = load <4 x i32>, <4 x i32>* %218, align 4
  %220 = add nsw <4 x i32> %216, %67
  %221 = add nsw <4 x i32> %219, %69
  %222 = ashr <4 x i32> %220, %71
  %223 = ashr <4 x i32> %221, %73
  %224 = bitcast i32* %214 to <4 x i32>*
  store <4 x i32> %222, <4 x i32>* %224, align 4
  %225 = bitcast i32* %217 to <4 x i32>*
  store <4 x i32> %223, <4 x i32>* %225, align 4
  %226 = add i64 %199, 16
  %227 = add i64 %200, -2
  %228 = icmp eq i64 %227, 0
  br i1 %228, label %229, label %198, !llvm.loop !89

229:                                              ; preds = %198, %197
  %230 = phi i64 [ 0, %197 ], [ %226, %198 ]
  br i1 %77, label %244, label %231

231:                                              ; preds = %229
  %232 = getelementptr inbounds i32, i32* %194, i64 %230
  %233 = bitcast i32* %232 to <4 x i32>*
  %234 = load <4 x i32>, <4 x i32>* %233, align 4
  %235 = getelementptr inbounds i32, i32* %232, i64 4
  %236 = bitcast i32* %235 to <4 x i32>*
  %237 = load <4 x i32>, <4 x i32>* %236, align 4
  %238 = add nsw <4 x i32> %234, %67
  %239 = add nsw <4 x i32> %237, %69
  %240 = ashr <4 x i32> %238, %71
  %241 = ashr <4 x i32> %239, %73
  %242 = bitcast i32* %232 to <4 x i32>*
  store <4 x i32> %240, <4 x i32>* %242, align 4
  %243 = bitcast i32* %235 to <4 x i32>*
  store <4 x i32> %241, <4 x i32>* %243, align 4
  br label %244

244:                                              ; preds = %229, %231
  br i1 %78, label %255, label %245

245:                                              ; preds = %244, %196
  %246 = phi i64 [ 0, %196 ], [ %65, %244 ]
  br label %247

247:                                              ; preds = %245, %247
  %248 = phi i64 [ %253, %247 ], [ %246, %245 ]
  %249 = getelementptr inbounds i32, i32* %194, i64 %248
  %250 = load i32, i32* %249, align 4
  %251 = add nsw i32 %250, %40
  %252 = ashr i32 %251, %21
  store i32 %252, i32* %249, align 4
  %253 = add nuw nsw i64 %248, 1
  %254 = icmp eq i64 %253, %46
  br i1 %254, label %255, label %247, !llvm.loop !90

255:                                              ; preds = %247, %244, %193
  br i1 %38, label %329, label %256

256:                                              ; preds = %255
  br i1 %79, label %317, label %257

257:                                              ; preds = %256
  br i1 %82, label %297, label %258

258:                                              ; preds = %257, %258
  %259 = phi i64 [ %294, %258 ], [ 0, %257 ]
  %260 = phi i64 [ %295, %258 ], [ %83, %257 ]
  %261 = getelementptr inbounds i32, i32* %194, i64 %259
  %262 = bitcast i32* %261 to <4 x i32>*
  %263 = load <4 x i32>, <4 x i32>* %262, align 4
  %264 = getelementptr inbounds i32, i32* %261, i64 4
  %265 = bitcast i32* %264 to <4 x i32>*
  %266 = load <4 x i32>, <4 x i32>* %265, align 4
  %267 = icmp slt <4 x i32> %263, <i32 32767, i32 32767, i32 32767, i32 32767>
  %268 = icmp slt <4 x i32> %266, <i32 32767, i32 32767, i32 32767, i32 32767>
  %269 = select <4 x i1> %267, <4 x i32> %263, <4 x i32> <i32 32767, i32 32767, i32 32767, i32 32767>
  %270 = select <4 x i1> %268, <4 x i32> %266, <4 x i32> <i32 32767, i32 32767, i32 32767, i32 32767>
  %271 = icmp sgt <4 x i32> %269, <i32 -32768, i32 -32768, i32 -32768, i32 -32768>
  %272 = icmp sgt <4 x i32> %270, <i32 -32768, i32 -32768, i32 -32768, i32 -32768>
  %273 = select <4 x i1> %271, <4 x i32> %269, <4 x i32> <i32 -32768, i32 -32768, i32 -32768, i32 -32768>
  %274 = select <4 x i1> %272, <4 x i32> %270, <4 x i32> <i32 -32768, i32 -32768, i32 -32768, i32 -32768>
  %275 = bitcast i32* %261 to <4 x i32>*
  store <4 x i32> %273, <4 x i32>* %275, align 4
  %276 = bitcast i32* %264 to <4 x i32>*
  store <4 x i32> %274, <4 x i32>* %276, align 4
  %277 = or i64 %259, 8
  %278 = getelementptr inbounds i32, i32* %194, i64 %277
  %279 = bitcast i32* %278 to <4 x i32>*
  %280 = load <4 x i32>, <4 x i32>* %279, align 4
  %281 = getelementptr inbounds i32, i32* %278, i64 4
  %282 = bitcast i32* %281 to <4 x i32>*
  %283 = load <4 x i32>, <4 x i32>* %282, align 4
  %284 = icmp slt <4 x i32> %280, <i32 32767, i32 32767, i32 32767, i32 32767>
  %285 = icmp slt <4 x i32> %283, <i32 32767, i32 32767, i32 32767, i32 32767>
  %286 = select <4 x i1> %284, <4 x i32> %280, <4 x i32> <i32 32767, i32 32767, i32 32767, i32 32767>
  %287 = select <4 x i1> %285, <4 x i32> %283, <4 x i32> <i32 32767, i32 32767, i32 32767, i32 32767>
  %288 = icmp sgt <4 x i32> %286, <i32 -32768, i32 -32768, i32 -32768, i32 -32768>
  %289 = icmp sgt <4 x i32> %287, <i32 -32768, i32 -32768, i32 -32768, i32 -32768>
  %290 = select <4 x i1> %288, <4 x i32> %286, <4 x i32> <i32 -32768, i32 -32768, i32 -32768, i32 -32768>
  %291 = select <4 x i1> %289, <4 x i32> %287, <4 x i32> <i32 -32768, i32 -32768, i32 -32768, i32 -32768>
  %292 = bitcast i32* %278 to <4 x i32>*
  store <4 x i32> %290, <4 x i32>* %292, align 4
  %293 = bitcast i32* %281 to <4 x i32>*
  store <4 x i32> %291, <4 x i32>* %293, align 4
  %294 = add i64 %259, 16
  %295 = add i64 %260, -2
  %296 = icmp eq i64 %295, 0
  br i1 %296, label %297, label %258, !llvm.loop !91

297:                                              ; preds = %258, %257
  %298 = phi i64 [ 0, %257 ], [ %294, %258 ]
  br i1 %84, label %316, label %299

299:                                              ; preds = %297
  %300 = getelementptr inbounds i32, i32* %194, i64 %298
  %301 = bitcast i32* %300 to <4 x i32>*
  %302 = load <4 x i32>, <4 x i32>* %301, align 4
  %303 = getelementptr inbounds i32, i32* %300, i64 4
  %304 = bitcast i32* %303 to <4 x i32>*
  %305 = load <4 x i32>, <4 x i32>* %304, align 4
  %306 = icmp slt <4 x i32> %302, <i32 32767, i32 32767, i32 32767, i32 32767>
  %307 = icmp slt <4 x i32> %305, <i32 32767, i32 32767, i32 32767, i32 32767>
  %308 = select <4 x i1> %306, <4 x i32> %302, <4 x i32> <i32 32767, i32 32767, i32 32767, i32 32767>
  %309 = select <4 x i1> %307, <4 x i32> %305, <4 x i32> <i32 32767, i32 32767, i32 32767, i32 32767>
  %310 = icmp sgt <4 x i32> %308, <i32 -32768, i32 -32768, i32 -32768, i32 -32768>
  %311 = icmp sgt <4 x i32> %309, <i32 -32768, i32 -32768, i32 -32768, i32 -32768>
  %312 = select <4 x i1> %310, <4 x i32> %308, <4 x i32> <i32 -32768, i32 -32768, i32 -32768, i32 -32768>
  %313 = select <4 x i1> %311, <4 x i32> %309, <4 x i32> <i32 -32768, i32 -32768, i32 -32768, i32 -32768>
  %314 = bitcast i32* %300 to <4 x i32>*
  store <4 x i32> %312, <4 x i32>* %314, align 4
  %315 = bitcast i32* %303 to <4 x i32>*
  store <4 x i32> %313, <4 x i32>* %315, align 4
  br label %316

316:                                              ; preds = %297, %299
  br i1 %85, label %329, label %317

317:                                              ; preds = %316, %256
  %318 = phi i64 [ 0, %256 ], [ %80, %316 ]
  br label %319

319:                                              ; preds = %317, %319
  %320 = phi i64 [ %327, %319 ], [ %318, %317 ]
  %321 = getelementptr inbounds i32, i32* %194, i64 %320
  %322 = load i32, i32* %321, align 4
  %323 = icmp slt i32 %322, 32767
  %324 = select i1 %323, i32 %322, i32 32767
  %325 = icmp sgt i32 %324, -32768
  %326 = select i1 %325, i32 %324, i32 -32768
  store i32 %326, i32* %321, align 4
  %327 = add nuw nsw i64 %320, 1
  %328 = icmp eq i64 %327, %34
  br i1 %328, label %329, label %319, !llvm.loop !92

329:                                              ; preds = %319, %316, %255
  %330 = add nuw nsw i64 %124, 1
  %331 = icmp eq i64 %330, %42
  br i1 %331, label %332, label %123

332:                                              ; preds = %329, %117, %28
  ret void

333:                                              ; preds = %117
  %334 = load i32, i32* %18, align 4
  %335 = getelementptr inbounds i32, i32* %18, i64 %121
  store i32 %334, i32* %335, align 4
  %336 = add nuw nsw i64 %118, 2
  %337 = getelementptr inbounds i32, i32* %18, i64 %336
  store i32 %334, i32* %337, align 4
  %338 = add nuw nsw i64 %118, 3
  %339 = load i32, i32* %18, align 4
  %340 = getelementptr inbounds i32, i32* %18, i64 %338
  store i32 %339, i32* %340, align 4
  %341 = add nuw nsw i64 %118, 4
  br label %117
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN7libgav13dsp12_GLOBAL__N_115TransformLoop_CILi10EitLNS0_11Transform1DE0EXadL_ZNS1_11DctDcOnly_CILi10EiLi6EEEvPvabibEEXadL_ZNS1_5Dct_CIiLi6EEEvS5_aEELb0EEEvNS_13TransformTypeENS_13TransformSizeEiS5_iiS5_(i8 zeroext, i8 zeroext, i32, i8*, i32, i32, i8* nocapture readonly) #0 {
  %8 = alloca [64 x i32], align 16
  %9 = zext i8 %1 to i64
  %10 = getelementptr inbounds [19 x i8], [19 x i8]* @_ZN7libgav115kTransformWidthE, i64 0, i64 %9
  %11 = load i8, i8* %10, align 1
  %12 = zext i8 %11 to i32
  %13 = getelementptr inbounds [19 x i8], [19 x i8]* @_ZN7libgav116kTransformHeightE, i64 0, i64 %9
  %14 = load i8, i8* %13, align 1
  %15 = bitcast i8* %3 to i32*
  %16 = zext i8 %0 to i32
  %17 = shl i32 1, %16
  %18 = and i32 %17, 33104
  %19 = icmp eq i32 %18, 0
  %20 = bitcast [64 x i32]* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 256, i8* nonnull %20) #4
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %20, i8 -86, i64 256, i1 false)
  %21 = icmp eq i8 %11, 0
  br i1 %21, label %42, label %22

22:                                               ; preds = %7
  %23 = zext i8 %11 to i64
  %24 = icmp eq i32 %2, 1
  %25 = getelementptr inbounds [64 x i32], [64 x i32]* %8, i64 0, i64 0
  %26 = getelementptr inbounds [64 x i32], [64 x i32]* %8, i64 0, i64 1
  %27 = icmp eq i8 %14, 0
  %28 = getelementptr inbounds i8, i8* %6, i64 4
  %29 = bitcast i8* %28 to i32*
  %30 = getelementptr inbounds i8, i8* %6, i64 8
  %31 = bitcast i8* %30 to i16**
  %32 = zext i8 %14 to i64
  %33 = sext i32 %5 to i64
  %34 = sext i32 %4 to i64
  %35 = zext i8 %11 to i64
  %36 = add nsw i64 %32, -1
  %37 = and i64 %32, 3
  %38 = icmp ult i64 %36, 3
  %39 = sub nsw i64 %32, %37
  %40 = icmp eq i64 %37, 0
  %41 = getelementptr inbounds [64 x i32], [64 x i32]* %8, i64 0, i64 2
  br label %43

42:                                               ; preds = %111, %7
  call void @llvm.lifetime.end.p0i8(i64 256, i8* nonnull %20) #4
  ret void

43:                                               ; preds = %111, %22
  %44 = phi i64 [ 0, %22 ], [ %112, %111 ]
  %45 = phi i32 [ 0, %22 ], [ %113, %111 ]
  %46 = xor i32 %45, -1
  %47 = add nsw i32 %46, %12
  %48 = trunc i64 %44 to i32
  %49 = select i1 %19, i32 %48, i32 %47
  %50 = sext i32 %49 to i64
  %51 = getelementptr inbounds i32, i32* %15, i64 %50
  br i1 %38, label %77, label %52

52:                                               ; preds = %43, %52
  %53 = phi i64 [ %74, %52 ], [ 0, %43 ]
  %54 = phi i64 [ %75, %52 ], [ %39, %43 ]
  %55 = mul nuw nsw i64 %53, %23
  %56 = getelementptr inbounds i32, i32* %51, i64 %55
  %57 = load i32, i32* %56, align 4
  %58 = getelementptr inbounds [64 x i32], [64 x i32]* %8, i64 0, i64 %53
  store i32 %57, i32* %58, align 16
  %59 = or i64 %53, 1
  %60 = mul nuw nsw i64 %59, %23
  %61 = getelementptr inbounds i32, i32* %51, i64 %60
  %62 = load i32, i32* %61, align 4
  %63 = getelementptr inbounds [64 x i32], [64 x i32]* %8, i64 0, i64 %59
  store i32 %62, i32* %63, align 4
  %64 = or i64 %53, 2
  %65 = mul nuw nsw i64 %64, %23
  %66 = getelementptr inbounds i32, i32* %51, i64 %65
  %67 = load i32, i32* %66, align 4
  %68 = getelementptr inbounds [64 x i32], [64 x i32]* %8, i64 0, i64 %64
  store i32 %67, i32* %68, align 8
  %69 = or i64 %53, 3
  %70 = mul nuw nsw i64 %69, %23
  %71 = getelementptr inbounds i32, i32* %51, i64 %70
  %72 = load i32, i32* %71, align 4
  %73 = getelementptr inbounds [64 x i32], [64 x i32]* %8, i64 0, i64 %69
  store i32 %72, i32* %73, align 4
  %74 = add nuw nsw i64 %53, 4
  %75 = add i64 %54, -4
  %76 = icmp eq i64 %75, 0
  br i1 %76, label %77, label %52

77:                                               ; preds = %52, %43
  %78 = phi i64 [ 0, %43 ], [ %74, %52 ]
  br i1 %40, label %89, label %79

79:                                               ; preds = %77, %79
  %80 = phi i64 [ %86, %79 ], [ %78, %77 ]
  %81 = phi i64 [ %87, %79 ], [ %37, %77 ]
  %82 = mul nuw nsw i64 %80, %23
  %83 = getelementptr inbounds i32, i32* %51, i64 %82
  %84 = load i32, i32* %83, align 4
  %85 = getelementptr inbounds [64 x i32], [64 x i32]* %8, i64 0, i64 %80
  store i32 %84, i32* %85, align 4
  %86 = add nuw nsw i64 %80, 1
  %87 = add i64 %81, -1
  %88 = icmp eq i64 %87, 0
  br i1 %88, label %89, label %79, !llvm.loop !93

89:                                               ; preds = %79, %77
  br i1 %24, label %90, label %107

90:                                               ; preds = %89
  %91 = load i32, i32* %25, align 16
  %92 = mul nsw i32 %91, 2896
  %93 = sext i32 %92 to i64
  %94 = add nsw i64 %93, 2048
  %95 = ashr i64 %94, 12
  %96 = trunc i64 %95 to i32
  %97 = icmp slt i32 %96, 32767
  %98 = select i1 %97, i32 %96, i32 32767
  %99 = icmp sgt i32 %98, -32768
  %100 = select i1 %99, i32 %98, i32 -32768
  store i32 %100, i32* %25, align 16
  store i32 %100, i32* %26, align 4
  store i32 %100, i32* %41, align 8
  br label %101

101:                                              ; preds = %138, %90
  %102 = phi i64 [ 3, %90 ], [ %146, %138 ]
  %103 = load i32, i32* %25, align 16
  %104 = getelementptr inbounds [64 x i32], [64 x i32]* %8, i64 0, i64 %102
  store i32 %103, i32* %104, align 4
  %105 = add nuw nsw i64 %102, 1
  %106 = icmp eq i64 %105, 64
  br i1 %106, label %108, label %138

107:                                              ; preds = %89
  call fastcc void @_ZN7libgav13dsp12_GLOBAL__N_15Dct_CIiLi6EEEvPva(i8* nonnull %20, i8 signext 16)
  br label %108

108:                                              ; preds = %101, %107
  br i1 %27, label %111, label %109

109:                                              ; preds = %108
  %110 = add nsw i64 %44, %34
  br label %115

111:                                              ; preds = %115, %108
  %112 = add nuw nsw i64 %44, 1
  %113 = add nuw nsw i32 %45, 1
  %114 = icmp eq i64 %112, %35
  br i1 %114, label %42, label %43

115:                                              ; preds = %115, %109
  %116 = phi i64 [ 0, %109 ], [ %136, %115 ]
  %117 = add nsw i64 %116, %33
  %118 = getelementptr inbounds [64 x i32], [64 x i32]* %8, i64 0, i64 %116
  %119 = load i32, i32* %118, align 4
  %120 = add nsw i32 %119, 8
  %121 = ashr i32 %120, 4
  %122 = load i32, i32* %29, align 4
  %123 = sext i32 %122 to i64
  %124 = mul nsw i64 %117, %123
  %125 = load i16*, i16** %31, align 8
  %126 = getelementptr inbounds i16, i16* %125, i64 %110
  %127 = getelementptr inbounds i16, i16* %126, i64 %124
  %128 = load i16, i16* %127, align 2
  %129 = zext i16 %128 to i32
  %130 = add nsw i32 %121, %129
  %131 = icmp slt i32 %130, 1023
  %132 = select i1 %131, i32 %130, i32 1023
  %133 = icmp sgt i32 %132, 0
  %134 = select i1 %133, i32 %132, i32 0
  %135 = trunc i32 %134 to i16
  store i16 %135, i16* %127, align 2
  %136 = add nuw nsw i64 %116, 1
  %137 = icmp eq i64 %136, %32
  br i1 %137, label %111, label %115

138:                                              ; preds = %101
  %139 = load i32, i32* %25, align 16
  %140 = getelementptr inbounds [64 x i32], [64 x i32]* %8, i64 0, i64 %105
  store i32 %139, i32* %140, align 4
  %141 = add nuw nsw i64 %102, 2
  %142 = getelementptr inbounds [64 x i32], [64 x i32]* %8, i64 0, i64 %141
  store i32 %139, i32* %142, align 4
  %143 = add nuw nsw i64 %102, 3
  %144 = load i32, i32* %25, align 16
  %145 = getelementptr inbounds [64 x i32], [64 x i32]* %8, i64 0, i64 %143
  store i32 %144, i32* %145, align 4
  %146 = add nuw nsw i64 %102, 4
  br label %101
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN7libgav13dsp12_GLOBAL__N_115TransformLoop_CILi10EitLNS0_11Transform1DE1EXadL_ZNS1_13Adst4DcOnly_CILi10EiEEvPvabibEEXadL_ZNS1_7Adst4_CIiEEvS5_aEELb1EEEvNS_13TransformTypeENS_13TransformSizeEiS5_iiS5_(i8 zeroext, i8 zeroext, i32, i8*, i32, i32, i8* nocapture readnone) #0 {
  %8 = zext i8 %1 to i64
  %9 = getelementptr inbounds [19 x i8], [19 x i8]* @_ZN7libgav115kTransformWidthE, i64 0, i64 %8
  %10 = load i8, i8* %9, align 1
  %11 = zext i8 %10 to i32
  %12 = getelementptr inbounds [19 x i8], [19 x i8]* @_ZN7libgav119kTransformWidthLog2E, i64 0, i64 %8
  %13 = load i8, i8* %12, align 1
  %14 = zext i8 %13 to i32
  %15 = getelementptr inbounds [19 x i8], [19 x i8]* @_ZN7libgav120kTransformHeightLog2E, i64 0, i64 %8
  %16 = load i8, i8* %15, align 1
  %17 = zext i8 %16 to i32
  %18 = bitcast i8* %3 to i32*
  %19 = getelementptr inbounds [19 x i8], [19 x i8]* @_ZN7libgav13dsp12_GLOBAL__N_118kTransformRowShiftE, i64 0, i64 %8
  %20 = load i8, i8* %19, align 1
  %21 = zext i8 %20 to i32
  %22 = sub nsw i32 %14, %17
  %23 = icmp slt i32 %22, 0
  %24 = sub nsw i32 0, %22
  %25 = select i1 %23, i32 %24, i32 %22
  %26 = icmp eq i32 %25, 1
  %27 = icmp eq i32 %2, 1
  br i1 %27, label %92, label %28

28:                                               ; preds = %7
  %29 = icmp sgt i32 %2, 0
  br i1 %29, label %30, label %346

30:                                               ; preds = %28
  %31 = icmp ult i32 %11, 32
  %32 = select i1 %31, i32 %11, i32 32
  %33 = icmp slt i32 %32, 1
  %34 = zext i8 %10 to i64
  %35 = lshr i64 524276, %8
  %36 = and i64 %35, 1
  %37 = icmp eq i64 %36, 0
  %38 = icmp eq i8 %10, 0
  %39 = shl i32 1, %21
  %40 = ashr i32 %39, 1
  %41 = zext i32 %32 to i64
  %42 = zext i32 %2 to i64
  %43 = xor i1 %26, true
  %44 = or i1 %33, %43
  %45 = or i1 %37, %38
  %46 = zext i8 %10 to i64
  %47 = add nsw i64 %34, -1
  %48 = icmp ugt i64 %41, 1
  %49 = select i1 %48, i64 %41, i64 1
  %50 = and i64 %49, 56
  %51 = add nsw i64 %50, -8
  %52 = lshr exact i64 %51, 3
  %53 = add nuw nsw i64 %52, 1
  %54 = add nsw i64 %34, -9
  %55 = lshr i64 %54, 3
  %56 = add nuw nsw i64 %55, 1
  %57 = and i64 %34, 248
  %58 = add nsw i64 %57, -8
  %59 = lshr exact i64 %58, 3
  %60 = add nuw nsw i64 %59, 1
  %61 = icmp ult i64 %49, 8
  %62 = and i64 %49, 56
  %63 = and i64 %53, 1
  %64 = icmp eq i64 %51, 0
  %65 = sub nuw nsw i64 %53, %63
  %66 = icmp eq i64 %63, 0
  %67 = icmp eq i64 %49, %62
  %68 = icmp eq i8 %10, 1
  %69 = icmp ult i64 %47, 8
  %70 = and i64 %47, -8
  %71 = or i64 %70, 1
  %72 = insertelement <4 x i32> undef, i32 %40, i32 0
  %73 = shufflevector <4 x i32> %72, <4 x i32> undef, <4 x i32> zeroinitializer
  %74 = insertelement <4 x i32> undef, i32 %40, i32 0
  %75 = shufflevector <4 x i32> %74, <4 x i32> undef, <4 x i32> zeroinitializer
  %76 = insertelement <4 x i32> undef, i32 %21, i32 0
  %77 = shufflevector <4 x i32> %76, <4 x i32> undef, <4 x i32> zeroinitializer
  %78 = insertelement <4 x i32> undef, i32 %21, i32 0
  %79 = shufflevector <4 x i32> %78, <4 x i32> undef, <4 x i32> zeroinitializer
  %80 = and i64 %56, 1
  %81 = icmp eq i64 %55, 0
  %82 = sub nuw nsw i64 %56, %80
  %83 = icmp eq i64 %80, 0
  %84 = icmp eq i64 %47, %70
  %85 = icmp ult i8 %10, 8
  %86 = and i64 %34, 248
  %87 = and i64 %60, 1
  %88 = icmp eq i64 %58, 0
  %89 = sub nuw nsw i64 %60, %87
  %90 = icmp eq i64 %87, 0
  %91 = icmp eq i64 %86, %34
  br label %93

92:                                               ; preds = %7
  tail call fastcc void @_ZN7libgav13dsp12_GLOBAL__N_113Adst4DcOnly_CILi10EiEEvPvabib(i8* %3, i8 signext 18, i1 zeroext %26, i32 %21, i1 zeroext true)
  br label %346

93:                                               ; preds = %343, %30
  %94 = phi i64 [ 0, %30 ], [ %344, %343 ]
  %95 = mul nuw nsw i64 %94, %34
  br i1 %44, label %163, label %96

96:                                               ; preds = %93
  %97 = getelementptr inbounds i32, i32* %18, i64 %95
  br i1 %61, label %152, label %98

98:                                               ; preds = %96
  br i1 %64, label %134, label %99

99:                                               ; preds = %98, %99
  %100 = phi i64 [ %131, %99 ], [ 0, %98 ]
  %101 = phi i64 [ %132, %99 ], [ %65, %98 ]
  %102 = getelementptr inbounds i32, i32* %97, i64 %100
  %103 = bitcast i32* %102 to <4 x i32>*
  %104 = load <4 x i32>, <4 x i32>* %103, align 4
  %105 = getelementptr inbounds i32, i32* %102, i64 4
  %106 = bitcast i32* %105 to <4 x i32>*
  %107 = load <4 x i32>, <4 x i32>* %106, align 4
  %108 = mul nsw <4 x i32> %104, <i32 2896, i32 2896, i32 2896, i32 2896>
  %109 = mul nsw <4 x i32> %107, <i32 2896, i32 2896, i32 2896, i32 2896>
  %110 = add nsw <4 x i32> %108, <i32 2048, i32 2048, i32 2048, i32 2048>
  %111 = add nsw <4 x i32> %109, <i32 2048, i32 2048, i32 2048, i32 2048>
  %112 = ashr <4 x i32> %110, <i32 12, i32 12, i32 12, i32 12>
  %113 = ashr <4 x i32> %111, <i32 12, i32 12, i32 12, i32 12>
  %114 = bitcast i32* %102 to <4 x i32>*
  store <4 x i32> %112, <4 x i32>* %114, align 4
  %115 = bitcast i32* %105 to <4 x i32>*
  store <4 x i32> %113, <4 x i32>* %115, align 4
  %116 = or i64 %100, 8
  %117 = getelementptr inbounds i32, i32* %97, i64 %116
  %118 = bitcast i32* %117 to <4 x i32>*
  %119 = load <4 x i32>, <4 x i32>* %118, align 4
  %120 = getelementptr inbounds i32, i32* %117, i64 4
  %121 = bitcast i32* %120 to <4 x i32>*
  %122 = load <4 x i32>, <4 x i32>* %121, align 4
  %123 = mul nsw <4 x i32> %119, <i32 2896, i32 2896, i32 2896, i32 2896>
  %124 = mul nsw <4 x i32> %122, <i32 2896, i32 2896, i32 2896, i32 2896>
  %125 = add nsw <4 x i32> %123, <i32 2048, i32 2048, i32 2048, i32 2048>
  %126 = add nsw <4 x i32> %124, <i32 2048, i32 2048, i32 2048, i32 2048>
  %127 = ashr <4 x i32> %125, <i32 12, i32 12, i32 12, i32 12>
  %128 = ashr <4 x i32> %126, <i32 12, i32 12, i32 12, i32 12>
  %129 = bitcast i32* %117 to <4 x i32>*
  store <4 x i32> %127, <4 x i32>* %129, align 4
  %130 = bitcast i32* %120 to <4 x i32>*
  store <4 x i32> %128, <4 x i32>* %130, align 4
  %131 = add i64 %100, 16
  %132 = add i64 %101, -2
  %133 = icmp eq i64 %132, 0
  br i1 %133, label %134, label %99, !llvm.loop !94

134:                                              ; preds = %99, %98
  %135 = phi i64 [ 0, %98 ], [ %131, %99 ]
  br i1 %66, label %151, label %136

136:                                              ; preds = %134
  %137 = getelementptr inbounds i32, i32* %97, i64 %135
  %138 = bitcast i32* %137 to <4 x i32>*
  %139 = load <4 x i32>, <4 x i32>* %138, align 4
  %140 = getelementptr inbounds i32, i32* %137, i64 4
  %141 = bitcast i32* %140 to <4 x i32>*
  %142 = load <4 x i32>, <4 x i32>* %141, align 4
  %143 = mul nsw <4 x i32> %139, <i32 2896, i32 2896, i32 2896, i32 2896>
  %144 = mul nsw <4 x i32> %142, <i32 2896, i32 2896, i32 2896, i32 2896>
  %145 = add nsw <4 x i32> %143, <i32 2048, i32 2048, i32 2048, i32 2048>
  %146 = add nsw <4 x i32> %144, <i32 2048, i32 2048, i32 2048, i32 2048>
  %147 = ashr <4 x i32> %145, <i32 12, i32 12, i32 12, i32 12>
  %148 = ashr <4 x i32> %146, <i32 12, i32 12, i32 12, i32 12>
  %149 = bitcast i32* %137 to <4 x i32>*
  store <4 x i32> %147, <4 x i32>* %149, align 4
  %150 = bitcast i32* %140 to <4 x i32>*
  store <4 x i32> %148, <4 x i32>* %150, align 4
  br label %151

151:                                              ; preds = %134, %136
  br i1 %67, label %163, label %152

152:                                              ; preds = %151, %96
  %153 = phi i64 [ 0, %96 ], [ %62, %151 ]
  br label %154

154:                                              ; preds = %152, %154
  %155 = phi i64 [ %161, %154 ], [ %153, %152 ]
  %156 = getelementptr inbounds i32, i32* %97, i64 %155
  %157 = load i32, i32* %156, align 4
  %158 = mul nsw i32 %157, 2896
  %159 = add nsw i32 %158, 2048
  %160 = ashr i32 %159, 12
  store i32 %160, i32* %156, align 4
  %161 = add nuw nsw i64 %155, 1
  %162 = icmp ult i64 %161, %41
  br i1 %162, label %154, label %163, !llvm.loop !95

163:                                              ; preds = %154, %151, %93
  %164 = getelementptr inbounds i32, i32* %18, i64 %95
  %165 = load i32, i32* %164, align 4
  %166 = getelementptr inbounds i32, i32* %164, i64 1
  %167 = load i32, i32* %166, align 4
  %168 = or i32 %167, %165
  %169 = getelementptr inbounds i32, i32* %164, i64 2
  %170 = load i32, i32* %169, align 4
  %171 = or i32 %168, %170
  %172 = getelementptr inbounds i32, i32* %164, i64 3
  %173 = load i32, i32* %172, align 4
  %174 = or i32 %171, %173
  %175 = icmp eq i32 %174, 0
  br i1 %175, label %202, label %176

176:                                              ; preds = %163
  %177 = mul nsw i32 %165, 1321
  %178 = mul nsw i32 %165, 2482
  %179 = mul nsw i32 %167, 3344
  %180 = mul nsw i32 %170, 3803
  %181 = mul nsw i32 %173, 2482
  %182 = sub i32 %165, %170
  %183 = add nsw i32 %182, %173
  %184 = add nsw i32 %180, %177
  %185 = mul i32 %170, -1321
  %186 = add i32 %185, %178
  %187 = mul nsw i32 %183, 3344
  %188 = add nsw i32 %184, %181
  %189 = mul i32 %173, -3803
  %190 = add i32 %186, %189
  %191 = add i32 %179, 2048
  %192 = add i32 %188, %191
  %193 = ashr i32 %192, 12
  %194 = add i32 %190, %191
  %195 = ashr i32 %194, 12
  %196 = add nsw i32 %187, 2048
  %197 = ashr i32 %196, 12
  %198 = sub i32 2048, %179
  %199 = add i32 %198, %190
  %200 = add i32 %199, %188
  %201 = ashr i32 %200, 12
  store i32 %193, i32* %164, align 4
  store i32 %195, i32* %166, align 4
  store i32 %197, i32* %169, align 4
  store i32 %201, i32* %172, align 4
  br label %202

202:                                              ; preds = %163, %176
  %203 = phi i32 [ %165, %163 ], [ %193, %176 ]
  br i1 %45, label %269, label %204

204:                                              ; preds = %202
  %205 = add nsw i32 %203, %40
  %206 = ashr i32 %205, %21
  store i32 %206, i32* %164, align 4
  br i1 %68, label %269, label %207

207:                                              ; preds = %204
  br i1 %69, label %258, label %208

208:                                              ; preds = %207
  br i1 %81, label %241, label %209

209:                                              ; preds = %208, %209
  %210 = phi i64 [ %238, %209 ], [ 0, %208 ]
  %211 = phi i64 [ %239, %209 ], [ %82, %208 ]
  %212 = or i64 %210, 1
  %213 = getelementptr inbounds i32, i32* %164, i64 %212
  %214 = bitcast i32* %213 to <4 x i32>*
  %215 = load <4 x i32>, <4 x i32>* %214, align 4
  %216 = getelementptr inbounds i32, i32* %213, i64 4
  %217 = bitcast i32* %216 to <4 x i32>*
  %218 = load <4 x i32>, <4 x i32>* %217, align 4
  %219 = add nsw <4 x i32> %215, %73
  %220 = add nsw <4 x i32> %218, %75
  %221 = ashr <4 x i32> %219, %77
  %222 = ashr <4 x i32> %220, %79
  %223 = bitcast i32* %213 to <4 x i32>*
  store <4 x i32> %221, <4 x i32>* %223, align 4
  %224 = bitcast i32* %216 to <4 x i32>*
  store <4 x i32> %222, <4 x i32>* %224, align 4
  %225 = or i64 %210, 9
  %226 = getelementptr inbounds i32, i32* %164, i64 %225
  %227 = bitcast i32* %226 to <4 x i32>*
  %228 = load <4 x i32>, <4 x i32>* %227, align 4
  %229 = getelementptr inbounds i32, i32* %226, i64 4
  %230 = bitcast i32* %229 to <4 x i32>*
  %231 = load <4 x i32>, <4 x i32>* %230, align 4
  %232 = add nsw <4 x i32> %228, %73
  %233 = add nsw <4 x i32> %231, %75
  %234 = ashr <4 x i32> %232, %77
  %235 = ashr <4 x i32> %233, %79
  %236 = bitcast i32* %226 to <4 x i32>*
  store <4 x i32> %234, <4 x i32>* %236, align 4
  %237 = bitcast i32* %229 to <4 x i32>*
  store <4 x i32> %235, <4 x i32>* %237, align 4
  %238 = add i64 %210, 16
  %239 = add i64 %211, -2
  %240 = icmp eq i64 %239, 0
  br i1 %240, label %241, label %209, !llvm.loop !96

241:                                              ; preds = %209, %208
  %242 = phi i64 [ 0, %208 ], [ %238, %209 ]
  br i1 %83, label %257, label %243

243:                                              ; preds = %241
  %244 = or i64 %242, 1
  %245 = getelementptr inbounds i32, i32* %164, i64 %244
  %246 = bitcast i32* %245 to <4 x i32>*
  %247 = load <4 x i32>, <4 x i32>* %246, align 4
  %248 = getelementptr inbounds i32, i32* %245, i64 4
  %249 = bitcast i32* %248 to <4 x i32>*
  %250 = load <4 x i32>, <4 x i32>* %249, align 4
  %251 = add nsw <4 x i32> %247, %73
  %252 = add nsw <4 x i32> %250, %75
  %253 = ashr <4 x i32> %251, %77
  %254 = ashr <4 x i32> %252, %79
  %255 = bitcast i32* %245 to <4 x i32>*
  store <4 x i32> %253, <4 x i32>* %255, align 4
  %256 = bitcast i32* %248 to <4 x i32>*
  store <4 x i32> %254, <4 x i32>* %256, align 4
  br label %257

257:                                              ; preds = %241, %243
  br i1 %84, label %269, label %258

258:                                              ; preds = %257, %207
  %259 = phi i64 [ 1, %207 ], [ %71, %257 ]
  br label %260

260:                                              ; preds = %258, %260
  %261 = phi i64 [ %267, %260 ], [ %259, %258 ]
  %262 = getelementptr inbounds i32, i32* %164, i64 %261
  %263 = load i32, i32* %262, align 4
  %264 = getelementptr inbounds i32, i32* %164, i64 %261
  %265 = add nsw i32 %263, %40
  %266 = ashr i32 %265, %21
  store i32 %266, i32* %264, align 4
  %267 = add nuw nsw i64 %261, 1
  %268 = icmp eq i64 %267, %46
  br i1 %268, label %269, label %260, !llvm.loop !97

269:                                              ; preds = %260, %204, %257, %202
  br i1 %38, label %343, label %270

270:                                              ; preds = %269
  br i1 %85, label %331, label %271

271:                                              ; preds = %270
  br i1 %88, label %311, label %272

272:                                              ; preds = %271, %272
  %273 = phi i64 [ %308, %272 ], [ 0, %271 ]
  %274 = phi i64 [ %309, %272 ], [ %89, %271 ]
  %275 = getelementptr inbounds i32, i32* %164, i64 %273
  %276 = bitcast i32* %275 to <4 x i32>*
  %277 = load <4 x i32>, <4 x i32>* %276, align 4
  %278 = getelementptr inbounds i32, i32* %275, i64 4
  %279 = bitcast i32* %278 to <4 x i32>*
  %280 = load <4 x i32>, <4 x i32>* %279, align 4
  %281 = icmp slt <4 x i32> %277, <i32 32767, i32 32767, i32 32767, i32 32767>
  %282 = icmp slt <4 x i32> %280, <i32 32767, i32 32767, i32 32767, i32 32767>
  %283 = select <4 x i1> %281, <4 x i32> %277, <4 x i32> <i32 32767, i32 32767, i32 32767, i32 32767>
  %284 = select <4 x i1> %282, <4 x i32> %280, <4 x i32> <i32 32767, i32 32767, i32 32767, i32 32767>
  %285 = icmp sgt <4 x i32> %283, <i32 -32768, i32 -32768, i32 -32768, i32 -32768>
  %286 = icmp sgt <4 x i32> %284, <i32 -32768, i32 -32768, i32 -32768, i32 -32768>
  %287 = select <4 x i1> %285, <4 x i32> %283, <4 x i32> <i32 -32768, i32 -32768, i32 -32768, i32 -32768>
  %288 = select <4 x i1> %286, <4 x i32> %284, <4 x i32> <i32 -32768, i32 -32768, i32 -32768, i32 -32768>
  %289 = bitcast i32* %275 to <4 x i32>*
  store <4 x i32> %287, <4 x i32>* %289, align 4
  %290 = bitcast i32* %278 to <4 x i32>*
  store <4 x i32> %288, <4 x i32>* %290, align 4
  %291 = or i64 %273, 8
  %292 = getelementptr inbounds i32, i32* %164, i64 %291
  %293 = bitcast i32* %292 to <4 x i32>*
  %294 = load <4 x i32>, <4 x i32>* %293, align 4
  %295 = getelementptr inbounds i32, i32* %292, i64 4
  %296 = bitcast i32* %295 to <4 x i32>*
  %297 = load <4 x i32>, <4 x i32>* %296, align 4
  %298 = icmp slt <4 x i32> %294, <i32 32767, i32 32767, i32 32767, i32 32767>
  %299 = icmp slt <4 x i32> %297, <i32 32767, i32 32767, i32 32767, i32 32767>
  %300 = select <4 x i1> %298, <4 x i32> %294, <4 x i32> <i32 32767, i32 32767, i32 32767, i32 32767>
  %301 = select <4 x i1> %299, <4 x i32> %297, <4 x i32> <i32 32767, i32 32767, i32 32767, i32 32767>
  %302 = icmp sgt <4 x i32> %300, <i32 -32768, i32 -32768, i32 -32768, i32 -32768>
  %303 = icmp sgt <4 x i32> %301, <i32 -32768, i32 -32768, i32 -32768, i32 -32768>
  %304 = select <4 x i1> %302, <4 x i32> %300, <4 x i32> <i32 -32768, i32 -32768, i32 -32768, i32 -32768>
  %305 = select <4 x i1> %303, <4 x i32> %301, <4 x i32> <i32 -32768, i32 -32768, i32 -32768, i32 -32768>
  %306 = bitcast i32* %292 to <4 x i32>*
  store <4 x i32> %304, <4 x i32>* %306, align 4
  %307 = bitcast i32* %295 to <4 x i32>*
  store <4 x i32> %305, <4 x i32>* %307, align 4
  %308 = add i64 %273, 16
  %309 = add i64 %274, -2
  %310 = icmp eq i64 %309, 0
  br i1 %310, label %311, label %272, !llvm.loop !98

311:                                              ; preds = %272, %271
  %312 = phi i64 [ 0, %271 ], [ %308, %272 ]
  br i1 %90, label %330, label %313

313:                                              ; preds = %311
  %314 = getelementptr inbounds i32, i32* %164, i64 %312
  %315 = bitcast i32* %314 to <4 x i32>*
  %316 = load <4 x i32>, <4 x i32>* %315, align 4
  %317 = getelementptr inbounds i32, i32* %314, i64 4
  %318 = bitcast i32* %317 to <4 x i32>*
  %319 = load <4 x i32>, <4 x i32>* %318, align 4
  %320 = icmp slt <4 x i32> %316, <i32 32767, i32 32767, i32 32767, i32 32767>
  %321 = icmp slt <4 x i32> %319, <i32 32767, i32 32767, i32 32767, i32 32767>
  %322 = select <4 x i1> %320, <4 x i32> %316, <4 x i32> <i32 32767, i32 32767, i32 32767, i32 32767>
  %323 = select <4 x i1> %321, <4 x i32> %319, <4 x i32> <i32 32767, i32 32767, i32 32767, i32 32767>
  %324 = icmp sgt <4 x i32> %322, <i32 -32768, i32 -32768, i32 -32768, i32 -32768>
  %325 = icmp sgt <4 x i32> %323, <i32 -32768, i32 -32768, i32 -32768, i32 -32768>
  %326 = select <4 x i1> %324, <4 x i32> %322, <4 x i32> <i32 -32768, i32 -32768, i32 -32768, i32 -32768>
  %327 = select <4 x i1> %325, <4 x i32> %323, <4 x i32> <i32 -32768, i32 -32768, i32 -32768, i32 -32768>
  %328 = bitcast i32* %314 to <4 x i32>*
  store <4 x i32> %326, <4 x i32>* %328, align 4
  %329 = bitcast i32* %317 to <4 x i32>*
  store <4 x i32> %327, <4 x i32>* %329, align 4
  br label %330

330:                                              ; preds = %311, %313
  br i1 %91, label %343, label %331

331:                                              ; preds = %330, %270
  %332 = phi i64 [ 0, %270 ], [ %86, %330 ]
  br label %333

333:                                              ; preds = %331, %333
  %334 = phi i64 [ %341, %333 ], [ %332, %331 ]
  %335 = getelementptr inbounds i32, i32* %164, i64 %334
  %336 = load i32, i32* %335, align 4
  %337 = icmp slt i32 %336, 32767
  %338 = select i1 %337, i32 %336, i32 32767
  %339 = icmp sgt i32 %338, -32768
  %340 = select i1 %339, i32 %338, i32 -32768
  store i32 %340, i32* %335, align 4
  %341 = add nuw nsw i64 %334, 1
  %342 = icmp eq i64 %341, %34
  br i1 %342, label %343, label %333, !llvm.loop !99

343:                                              ; preds = %333, %330, %269
  %344 = add nuw nsw i64 %94, 1
  %345 = icmp eq i64 %344, %42
  br i1 %345, label %346, label %93

346:                                              ; preds = %343, %28, %92
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN7libgav13dsp12_GLOBAL__N_115TransformLoop_CILi10EitLNS0_11Transform1DE1EXadL_ZNS1_13Adst4DcOnly_CILi10EiEEvPvabibEEXadL_ZNS1_7Adst4_CIiEEvS5_aEELb0EEEvNS_13TransformTypeENS_13TransformSizeEiS5_iiS5_(i8 zeroext, i8 zeroext, i32, i8*, i32, i32, i8* nocapture readonly) #0 {
  %8 = alloca [64 x i32], align 16
  %9 = zext i8 %1 to i64
  %10 = getelementptr inbounds [19 x i8], [19 x i8]* @_ZN7libgav115kTransformWidthE, i64 0, i64 %9
  %11 = load i8, i8* %10, align 1
  %12 = zext i8 %11 to i32
  %13 = getelementptr inbounds [19 x i8], [19 x i8]* @_ZN7libgav116kTransformHeightE, i64 0, i64 %9
  %14 = load i8, i8* %13, align 1
  %15 = zext i8 %14 to i32
  %16 = bitcast i8* %3 to i32*
  %17 = zext i8 %0 to i32
  %18 = shl i32 1, %17
  %19 = and i32 %18, 16608
  %20 = icmp eq i32 %19, 0
  %21 = and i32 %18, 33104
  %22 = icmp eq i32 %21, 0
  %23 = bitcast [64 x i32]* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 256, i8* nonnull %23) #4
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %23, i8 -86, i64 256, i1 false)
  %24 = icmp eq i8 %11, 0
  br i1 %24, label %46, label %25

25:                                               ; preds = %7
  %26 = zext i8 %11 to i64
  %27 = icmp eq i32 %2, 1
  %28 = getelementptr inbounds [64 x i32], [64 x i32]* %8, i64 0, i64 0
  %29 = getelementptr inbounds [64 x i32], [64 x i32]* %8, i64 0, i64 1
  %30 = getelementptr inbounds [64 x i32], [64 x i32]* %8, i64 0, i64 2
  %31 = getelementptr inbounds [64 x i32], [64 x i32]* %8, i64 0, i64 3
  %32 = icmp eq i8 %14, 0
  %33 = getelementptr inbounds i8, i8* %6, i64 4
  %34 = bitcast i8* %33 to i32*
  %35 = getelementptr inbounds i8, i8* %6, i64 8
  %36 = bitcast i8* %35 to i16**
  %37 = zext i8 %14 to i64
  %38 = sext i32 %5 to i64
  %39 = sext i32 %4 to i64
  %40 = zext i8 %11 to i64
  %41 = add nsw i64 %37, -1
  %42 = and i64 %37, 3
  %43 = icmp ult i64 %41, 3
  %44 = sub nsw i64 %37, %42
  %45 = icmp eq i64 %42, 0
  br label %47

46:                                               ; preds = %163, %7
  call void @llvm.lifetime.end.p0i8(i64 256, i8* nonnull %23) #4
  ret void

47:                                               ; preds = %163, %25
  %48 = phi i64 [ 0, %25 ], [ %164, %163 ]
  %49 = phi i32 [ 0, %25 ], [ %165, %163 ]
  %50 = xor i32 %49, -1
  %51 = add nsw i32 %50, %12
  %52 = trunc i64 %48 to i32
  %53 = select i1 %22, i32 %52, i32 %51
  %54 = sext i32 %53 to i64
  %55 = getelementptr inbounds i32, i32* %16, i64 %54
  br i1 %43, label %81, label %56

56:                                               ; preds = %47, %56
  %57 = phi i64 [ %78, %56 ], [ 0, %47 ]
  %58 = phi i64 [ %79, %56 ], [ %44, %47 ]
  %59 = mul nuw nsw i64 %57, %26
  %60 = getelementptr inbounds i32, i32* %55, i64 %59
  %61 = load i32, i32* %60, align 4
  %62 = getelementptr inbounds [64 x i32], [64 x i32]* %8, i64 0, i64 %57
  store i32 %61, i32* %62, align 16
  %63 = or i64 %57, 1
  %64 = mul nuw nsw i64 %63, %26
  %65 = getelementptr inbounds i32, i32* %55, i64 %64
  %66 = load i32, i32* %65, align 4
  %67 = getelementptr inbounds [64 x i32], [64 x i32]* %8, i64 0, i64 %63
  store i32 %66, i32* %67, align 4
  %68 = or i64 %57, 2
  %69 = mul nuw nsw i64 %68, %26
  %70 = getelementptr inbounds i32, i32* %55, i64 %69
  %71 = load i32, i32* %70, align 4
  %72 = getelementptr inbounds [64 x i32], [64 x i32]* %8, i64 0, i64 %68
  store i32 %71, i32* %72, align 8
  %73 = or i64 %57, 3
  %74 = mul nuw nsw i64 %73, %26
  %75 = getelementptr inbounds i32, i32* %55, i64 %74
  %76 = load i32, i32* %75, align 4
  %77 = getelementptr inbounds [64 x i32], [64 x i32]* %8, i64 0, i64 %73
  store i32 %76, i32* %77, align 4
  %78 = add nuw nsw i64 %57, 4
  %79 = add i64 %58, -4
  %80 = icmp eq i64 %79, 0
  br i1 %80, label %81, label %56

81:                                               ; preds = %56, %47
  %82 = phi i64 [ 0, %47 ], [ %78, %56 ]
  br i1 %45, label %93, label %83

83:                                               ; preds = %81, %83
  %84 = phi i64 [ %90, %83 ], [ %82, %81 ]
  %85 = phi i64 [ %91, %83 ], [ %42, %81 ]
  %86 = mul nuw nsw i64 %84, %26
  %87 = getelementptr inbounds i32, i32* %55, i64 %86
  %88 = load i32, i32* %87, align 4
  %89 = getelementptr inbounds [64 x i32], [64 x i32]* %8, i64 0, i64 %84
  store i32 %88, i32* %89, align 4
  %90 = add nuw nsw i64 %84, 1
  %91 = add i64 %85, -1
  %92 = icmp eq i64 %91, 0
  br i1 %92, label %93, label %83, !llvm.loop !100

93:                                               ; preds = %83, %81
  %94 = load i32, i32* %28, align 16
  br i1 %27, label %95, label %124

95:                                               ; preds = %93
  %96 = mul nsw i32 %94, 1321
  %97 = mul nsw i32 %94, 2482
  %98 = mul nsw i32 %94, 3344
  %99 = add nsw i32 %96, 2048
  %100 = ashr i32 %99, 12
  %101 = add nsw i32 %97, 2048
  %102 = ashr i32 %101, 12
  %103 = add nsw i32 %98, 2048
  %104 = ashr i32 %103, 12
  %105 = mul nsw i32 %94, 3803
  %106 = add nsw i32 %105, 2048
  %107 = ashr i32 %106, 12
  %108 = icmp slt i32 %100, 32767
  %109 = select i1 %108, i32 %100, i32 32767
  %110 = icmp sgt i32 %109, -32768
  %111 = select i1 %110, i32 %109, i32 -32768
  store i32 %111, i32* %28, align 16
  %112 = icmp slt i32 %102, 32767
  %113 = select i1 %112, i32 %102, i32 32767
  %114 = icmp sgt i32 %113, -32768
  %115 = select i1 %114, i32 %113, i32 -32768
  store i32 %115, i32* %29, align 4
  %116 = icmp slt i32 %104, 32767
  %117 = select i1 %116, i32 %104, i32 32767
  %118 = icmp sgt i32 %117, -32768
  %119 = select i1 %118, i32 %117, i32 -32768
  store i32 %119, i32* %30, align 8
  %120 = icmp slt i32 %107, 32767
  %121 = select i1 %120, i32 %107, i32 32767
  %122 = icmp sgt i32 %121, -32768
  %123 = select i1 %122, i32 %121, i32 -32768
  br label %158

124:                                              ; preds = %93
  %125 = load i32, i32* %29, align 4
  %126 = or i32 %125, %94
  %127 = load i32, i32* %30, align 8
  %128 = or i32 %126, %127
  %129 = load i32, i32* %31, align 4
  %130 = or i32 %128, %129
  %131 = icmp eq i32 %130, 0
  br i1 %131, label %160, label %132

132:                                              ; preds = %124
  %133 = mul nsw i32 %94, 1321
  %134 = mul nsw i32 %94, 2482
  %135 = mul nsw i32 %125, 3344
  %136 = mul nsw i32 %127, 3803
  %137 = mul nsw i32 %129, 2482
  %138 = sub i32 %94, %127
  %139 = add nsw i32 %138, %129
  %140 = add nsw i32 %136, %133
  %141 = mul i32 %127, -1321
  %142 = add i32 %141, %134
  %143 = mul nsw i32 %139, 3344
  %144 = add nsw i32 %140, %137
  %145 = mul i32 %129, -3803
  %146 = add i32 %142, %145
  %147 = add i32 %135, 2048
  %148 = add i32 %144, %147
  %149 = ashr i32 %148, 12
  %150 = add i32 %146, %147
  %151 = ashr i32 %150, 12
  %152 = add nsw i32 %143, 2048
  %153 = ashr i32 %152, 12
  %154 = sub i32 2048, %135
  %155 = add i32 %154, %146
  %156 = add i32 %155, %144
  %157 = ashr i32 %156, 12
  store i32 %149, i32* %28, align 16
  store i32 %151, i32* %29, align 4
  store i32 %153, i32* %30, align 8
  br label %158

158:                                              ; preds = %95, %132
  %159 = phi i32 [ %157, %132 ], [ %123, %95 ]
  store i32 %159, i32* %31, align 4
  br label %160

160:                                              ; preds = %158, %124
  br i1 %32, label %163, label %161

161:                                              ; preds = %160
  %162 = add nsw i64 %48, %39
  br label %167

163:                                              ; preds = %167, %160
  %164 = add nuw nsw i64 %48, 1
  %165 = add nuw nsw i32 %49, 1
  %166 = icmp eq i64 %164, %40
  br i1 %166, label %46, label %47

167:                                              ; preds = %167, %161
  %168 = phi i64 [ 0, %161 ], [ %194, %167 ]
  %169 = phi i32 [ 0, %161 ], [ %195, %167 ]
  %170 = add nsw i64 %168, %38
  %171 = xor i32 %169, -1
  %172 = add nsw i32 %171, %15
  %173 = trunc i64 %168 to i32
  %174 = select i1 %20, i32 %173, i32 %172
  %175 = sext i32 %174 to i64
  %176 = getelementptr inbounds [64 x i32], [64 x i32]* %8, i64 0, i64 %175
  %177 = load i32, i32* %176, align 4
  %178 = add nsw i32 %177, 8
  %179 = ashr i32 %178, 4
  %180 = load i32, i32* %34, align 4
  %181 = sext i32 %180 to i64
  %182 = mul nsw i64 %170, %181
  %183 = load i16*, i16** %36, align 8
  %184 = getelementptr inbounds i16, i16* %183, i64 %162
  %185 = getelementptr inbounds i16, i16* %184, i64 %182
  %186 = load i16, i16* %185, align 2
  %187 = zext i16 %186 to i32
  %188 = add nsw i32 %179, %187
  %189 = icmp slt i32 %188, 1023
  %190 = select i1 %189, i32 %188, i32 1023
  %191 = icmp sgt i32 %190, 0
  %192 = select i1 %191, i32 %190, i32 0
  %193 = trunc i32 %192 to i16
  store i16 %193, i16* %185, align 2
  %194 = add nuw nsw i64 %168, 1
  %195 = add nuw nsw i32 %169, 1
  %196 = icmp eq i64 %194, %37
  br i1 %196, label %163, label %167
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN7libgav13dsp12_GLOBAL__N_115TransformLoop_CILi10EitLNS0_11Transform1DE1EXadL_ZNS1_13Adst8DcOnly_CILi10EiEEvPvabibEEXadL_ZNS1_7Adst8_CIiEEvS5_aEELb1EEEvNS_13TransformTypeENS_13TransformSizeEiS5_iiS5_(i8 zeroext, i8 zeroext, i32, i8*, i32, i32, i8* nocapture readnone) #0 {
  %8 = zext i8 %1 to i64
  %9 = getelementptr inbounds [19 x i8], [19 x i8]* @_ZN7libgav115kTransformWidthE, i64 0, i64 %8
  %10 = load i8, i8* %9, align 1
  %11 = zext i8 %10 to i32
  %12 = getelementptr inbounds [19 x i8], [19 x i8]* @_ZN7libgav119kTransformWidthLog2E, i64 0, i64 %8
  %13 = load i8, i8* %12, align 1
  %14 = zext i8 %13 to i32
  %15 = getelementptr inbounds [19 x i8], [19 x i8]* @_ZN7libgav120kTransformHeightLog2E, i64 0, i64 %8
  %16 = load i8, i8* %15, align 1
  %17 = zext i8 %16 to i32
  %18 = bitcast i8* %3 to i32*
  %19 = getelementptr inbounds [19 x i8], [19 x i8]* @_ZN7libgav13dsp12_GLOBAL__N_118kTransformRowShiftE, i64 0, i64 %8
  %20 = load i8, i8* %19, align 1
  %21 = zext i8 %20 to i32
  %22 = sub nsw i32 %14, %17
  %23 = icmp slt i32 %22, 0
  %24 = sub nsw i32 0, %22
  %25 = select i1 %23, i32 %24, i32 %22
  %26 = icmp eq i32 %25, 1
  %27 = icmp eq i32 %2, 1
  br i1 %27, label %86, label %28

28:                                               ; preds = %7
  %29 = icmp sgt i32 %2, 0
  br i1 %29, label %30, label %296

30:                                               ; preds = %28
  %31 = icmp ult i32 %11, 32
  %32 = select i1 %31, i32 %11, i32 32
  %33 = icmp slt i32 %32, 1
  %34 = zext i8 %10 to i64
  %35 = lshr i64 524276, %8
  %36 = and i64 %35, 1
  %37 = icmp eq i64 %36, 0
  %38 = icmp eq i8 %10, 0
  %39 = shl i32 1, %21
  %40 = ashr i32 %39, 1
  %41 = zext i32 %32 to i64
  %42 = zext i32 %2 to i64
  %43 = xor i1 %26, true
  %44 = or i1 %33, %43
  %45 = or i1 %37, %38
  %46 = zext i8 %10 to i64
  %47 = icmp ugt i64 %41, 1
  %48 = select i1 %47, i64 %41, i64 1
  %49 = and i64 %48, 56
  %50 = add nsw i64 %49, -8
  %51 = lshr exact i64 %50, 3
  %52 = add nuw nsw i64 %51, 1
  %53 = and i64 %34, 248
  %54 = add nsw i64 %53, -8
  %55 = lshr exact i64 %54, 3
  %56 = add nuw nsw i64 %55, 1
  %57 = icmp ult i64 %48, 8
  %58 = and i64 %48, 56
  %59 = and i64 %52, 1
  %60 = icmp eq i64 %50, 0
  %61 = sub nuw nsw i64 %52, %59
  %62 = icmp eq i64 %59, 0
  %63 = icmp eq i64 %48, %58
  %64 = icmp ult i8 %10, 8
  %65 = and i64 %34, 248
  %66 = insertelement <4 x i32> undef, i32 %40, i32 0
  %67 = shufflevector <4 x i32> %66, <4 x i32> undef, <4 x i32> zeroinitializer
  %68 = insertelement <4 x i32> undef, i32 %40, i32 0
  %69 = shufflevector <4 x i32> %68, <4 x i32> undef, <4 x i32> zeroinitializer
  %70 = insertelement <4 x i32> undef, i32 %21, i32 0
  %71 = shufflevector <4 x i32> %70, <4 x i32> undef, <4 x i32> zeroinitializer
  %72 = insertelement <4 x i32> undef, i32 %21, i32 0
  %73 = shufflevector <4 x i32> %72, <4 x i32> undef, <4 x i32> zeroinitializer
  %74 = and i64 %56, 1
  %75 = icmp eq i64 %54, 0
  %76 = sub nuw nsw i64 %56, %74
  %77 = icmp eq i64 %74, 0
  %78 = icmp eq i64 %65, %34
  %79 = icmp ult i8 %10, 8
  %80 = and i64 %34, 248
  %81 = and i64 %56, 1
  %82 = icmp eq i64 %54, 0
  %83 = sub nuw nsw i64 %56, %81
  %84 = icmp eq i64 %81, 0
  %85 = icmp eq i64 %80, %34
  br label %87

86:                                               ; preds = %7
  tail call fastcc void @_ZN7libgav13dsp12_GLOBAL__N_113Adst8DcOnly_CILi10EiEEvPvabib(i8* %3, i1 zeroext %26, i32 %21, i1 zeroext true)
  br label %296

87:                                               ; preds = %293, %30
  %88 = phi i64 [ 0, %30 ], [ %294, %293 ]
  %89 = mul nuw nsw i64 %88, %34
  br i1 %44, label %157, label %90

90:                                               ; preds = %87
  %91 = getelementptr inbounds i32, i32* %18, i64 %89
  br i1 %57, label %146, label %92

92:                                               ; preds = %90
  br i1 %60, label %128, label %93

93:                                               ; preds = %92, %93
  %94 = phi i64 [ %125, %93 ], [ 0, %92 ]
  %95 = phi i64 [ %126, %93 ], [ %61, %92 ]
  %96 = getelementptr inbounds i32, i32* %91, i64 %94
  %97 = bitcast i32* %96 to <4 x i32>*
  %98 = load <4 x i32>, <4 x i32>* %97, align 4
  %99 = getelementptr inbounds i32, i32* %96, i64 4
  %100 = bitcast i32* %99 to <4 x i32>*
  %101 = load <4 x i32>, <4 x i32>* %100, align 4
  %102 = mul nsw <4 x i32> %98, <i32 2896, i32 2896, i32 2896, i32 2896>
  %103 = mul nsw <4 x i32> %101, <i32 2896, i32 2896, i32 2896, i32 2896>
  %104 = add nsw <4 x i32> %102, <i32 2048, i32 2048, i32 2048, i32 2048>
  %105 = add nsw <4 x i32> %103, <i32 2048, i32 2048, i32 2048, i32 2048>
  %106 = ashr <4 x i32> %104, <i32 12, i32 12, i32 12, i32 12>
  %107 = ashr <4 x i32> %105, <i32 12, i32 12, i32 12, i32 12>
  %108 = bitcast i32* %96 to <4 x i32>*
  store <4 x i32> %106, <4 x i32>* %108, align 4
  %109 = bitcast i32* %99 to <4 x i32>*
  store <4 x i32> %107, <4 x i32>* %109, align 4
  %110 = or i64 %94, 8
  %111 = getelementptr inbounds i32, i32* %91, i64 %110
  %112 = bitcast i32* %111 to <4 x i32>*
  %113 = load <4 x i32>, <4 x i32>* %112, align 4
  %114 = getelementptr inbounds i32, i32* %111, i64 4
  %115 = bitcast i32* %114 to <4 x i32>*
  %116 = load <4 x i32>, <4 x i32>* %115, align 4
  %117 = mul nsw <4 x i32> %113, <i32 2896, i32 2896, i32 2896, i32 2896>
  %118 = mul nsw <4 x i32> %116, <i32 2896, i32 2896, i32 2896, i32 2896>
  %119 = add nsw <4 x i32> %117, <i32 2048, i32 2048, i32 2048, i32 2048>
  %120 = add nsw <4 x i32> %118, <i32 2048, i32 2048, i32 2048, i32 2048>
  %121 = ashr <4 x i32> %119, <i32 12, i32 12, i32 12, i32 12>
  %122 = ashr <4 x i32> %120, <i32 12, i32 12, i32 12, i32 12>
  %123 = bitcast i32* %111 to <4 x i32>*
  store <4 x i32> %121, <4 x i32>* %123, align 4
  %124 = bitcast i32* %114 to <4 x i32>*
  store <4 x i32> %122, <4 x i32>* %124, align 4
  %125 = add i64 %94, 16
  %126 = add i64 %95, -2
  %127 = icmp eq i64 %126, 0
  br i1 %127, label %128, label %93, !llvm.loop !101

128:                                              ; preds = %93, %92
  %129 = phi i64 [ 0, %92 ], [ %125, %93 ]
  br i1 %62, label %145, label %130

130:                                              ; preds = %128
  %131 = getelementptr inbounds i32, i32* %91, i64 %129
  %132 = bitcast i32* %131 to <4 x i32>*
  %133 = load <4 x i32>, <4 x i32>* %132, align 4
  %134 = getelementptr inbounds i32, i32* %131, i64 4
  %135 = bitcast i32* %134 to <4 x i32>*
  %136 = load <4 x i32>, <4 x i32>* %135, align 4
  %137 = mul nsw <4 x i32> %133, <i32 2896, i32 2896, i32 2896, i32 2896>
  %138 = mul nsw <4 x i32> %136, <i32 2896, i32 2896, i32 2896, i32 2896>
  %139 = add nsw <4 x i32> %137, <i32 2048, i32 2048, i32 2048, i32 2048>
  %140 = add nsw <4 x i32> %138, <i32 2048, i32 2048, i32 2048, i32 2048>
  %141 = ashr <4 x i32> %139, <i32 12, i32 12, i32 12, i32 12>
  %142 = ashr <4 x i32> %140, <i32 12, i32 12, i32 12, i32 12>
  %143 = bitcast i32* %131 to <4 x i32>*
  store <4 x i32> %141, <4 x i32>* %143, align 4
  %144 = bitcast i32* %134 to <4 x i32>*
  store <4 x i32> %142, <4 x i32>* %144, align 4
  br label %145

145:                                              ; preds = %128, %130
  br i1 %63, label %157, label %146

146:                                              ; preds = %145, %90
  %147 = phi i64 [ 0, %90 ], [ %58, %145 ]
  br label %148

148:                                              ; preds = %146, %148
  %149 = phi i64 [ %155, %148 ], [ %147, %146 ]
  %150 = getelementptr inbounds i32, i32* %91, i64 %149
  %151 = load i32, i32* %150, align 4
  %152 = mul nsw i32 %151, 2896
  %153 = add nsw i32 %152, 2048
  %154 = ashr i32 %153, 12
  store i32 %154, i32* %150, align 4
  %155 = add nuw nsw i64 %149, 1
  %156 = icmp ult i64 %155, %41
  br i1 %156, label %148, label %157, !llvm.loop !102

157:                                              ; preds = %148, %145, %87
  %158 = getelementptr inbounds i32, i32* %18, i64 %89
  %159 = bitcast i32* %158 to i8*
  tail call fastcc void @_ZN7libgav13dsp12_GLOBAL__N_17Adst8_CIiEEvPva(i8* %159, i8 signext 18)
  br i1 %45, label %219, label %160

160:                                              ; preds = %157
  br i1 %64, label %209, label %161

161:                                              ; preds = %160
  br i1 %75, label %193, label %162

162:                                              ; preds = %161, %162
  %163 = phi i64 [ %190, %162 ], [ 0, %161 ]
  %164 = phi i64 [ %191, %162 ], [ %76, %161 ]
  %165 = getelementptr inbounds i32, i32* %158, i64 %163
  %166 = bitcast i32* %165 to <4 x i32>*
  %167 = load <4 x i32>, <4 x i32>* %166, align 4
  %168 = getelementptr inbounds i32, i32* %165, i64 4
  %169 = bitcast i32* %168 to <4 x i32>*
  %170 = load <4 x i32>, <4 x i32>* %169, align 4
  %171 = add nsw <4 x i32> %167, %67
  %172 = add nsw <4 x i32> %170, %69
  %173 = ashr <4 x i32> %171, %71
  %174 = ashr <4 x i32> %172, %73
  %175 = bitcast i32* %165 to <4 x i32>*
  store <4 x i32> %173, <4 x i32>* %175, align 4
  %176 = bitcast i32* %168 to <4 x i32>*
  store <4 x i32> %174, <4 x i32>* %176, align 4
  %177 = or i64 %163, 8
  %178 = getelementptr inbounds i32, i32* %158, i64 %177
  %179 = bitcast i32* %178 to <4 x i32>*
  %180 = load <4 x i32>, <4 x i32>* %179, align 4
  %181 = getelementptr inbounds i32, i32* %178, i64 4
  %182 = bitcast i32* %181 to <4 x i32>*
  %183 = load <4 x i32>, <4 x i32>* %182, align 4
  %184 = add nsw <4 x i32> %180, %67
  %185 = add nsw <4 x i32> %183, %69
  %186 = ashr <4 x i32> %184, %71
  %187 = ashr <4 x i32> %185, %73
  %188 = bitcast i32* %178 to <4 x i32>*
  store <4 x i32> %186, <4 x i32>* %188, align 4
  %189 = bitcast i32* %181 to <4 x i32>*
  store <4 x i32> %187, <4 x i32>* %189, align 4
  %190 = add i64 %163, 16
  %191 = add i64 %164, -2
  %192 = icmp eq i64 %191, 0
  br i1 %192, label %193, label %162, !llvm.loop !103

193:                                              ; preds = %162, %161
  %194 = phi i64 [ 0, %161 ], [ %190, %162 ]
  br i1 %77, label %208, label %195

195:                                              ; preds = %193
  %196 = getelementptr inbounds i32, i32* %158, i64 %194
  %197 = bitcast i32* %196 to <4 x i32>*
  %198 = load <4 x i32>, <4 x i32>* %197, align 4
  %199 = getelementptr inbounds i32, i32* %196, i64 4
  %200 = bitcast i32* %199 to <4 x i32>*
  %201 = load <4 x i32>, <4 x i32>* %200, align 4
  %202 = add nsw <4 x i32> %198, %67
  %203 = add nsw <4 x i32> %201, %69
  %204 = ashr <4 x i32> %202, %71
  %205 = ashr <4 x i32> %203, %73
  %206 = bitcast i32* %196 to <4 x i32>*
  store <4 x i32> %204, <4 x i32>* %206, align 4
  %207 = bitcast i32* %199 to <4 x i32>*
  store <4 x i32> %205, <4 x i32>* %207, align 4
  br label %208

208:                                              ; preds = %193, %195
  br i1 %78, label %219, label %209

209:                                              ; preds = %208, %160
  %210 = phi i64 [ 0, %160 ], [ %65, %208 ]
  br label %211

211:                                              ; preds = %209, %211
  %212 = phi i64 [ %217, %211 ], [ %210, %209 ]
  %213 = getelementptr inbounds i32, i32* %158, i64 %212
  %214 = load i32, i32* %213, align 4
  %215 = add nsw i32 %214, %40
  %216 = ashr i32 %215, %21
  store i32 %216, i32* %213, align 4
  %217 = add nuw nsw i64 %212, 1
  %218 = icmp eq i64 %217, %46
  br i1 %218, label %219, label %211, !llvm.loop !104

219:                                              ; preds = %211, %208, %157
  br i1 %38, label %293, label %220

220:                                              ; preds = %219
  br i1 %79, label %281, label %221

221:                                              ; preds = %220
  br i1 %82, label %261, label %222

222:                                              ; preds = %221, %222
  %223 = phi i64 [ %258, %222 ], [ 0, %221 ]
  %224 = phi i64 [ %259, %222 ], [ %83, %221 ]
  %225 = getelementptr inbounds i32, i32* %158, i64 %223
  %226 = bitcast i32* %225 to <4 x i32>*
  %227 = load <4 x i32>, <4 x i32>* %226, align 4
  %228 = getelementptr inbounds i32, i32* %225, i64 4
  %229 = bitcast i32* %228 to <4 x i32>*
  %230 = load <4 x i32>, <4 x i32>* %229, align 4
  %231 = icmp slt <4 x i32> %227, <i32 32767, i32 32767, i32 32767, i32 32767>
  %232 = icmp slt <4 x i32> %230, <i32 32767, i32 32767, i32 32767, i32 32767>
  %233 = select <4 x i1> %231, <4 x i32> %227, <4 x i32> <i32 32767, i32 32767, i32 32767, i32 32767>
  %234 = select <4 x i1> %232, <4 x i32> %230, <4 x i32> <i32 32767, i32 32767, i32 32767, i32 32767>
  %235 = icmp sgt <4 x i32> %233, <i32 -32768, i32 -32768, i32 -32768, i32 -32768>
  %236 = icmp sgt <4 x i32> %234, <i32 -32768, i32 -32768, i32 -32768, i32 -32768>
  %237 = select <4 x i1> %235, <4 x i32> %233, <4 x i32> <i32 -32768, i32 -32768, i32 -32768, i32 -32768>
  %238 = select <4 x i1> %236, <4 x i32> %234, <4 x i32> <i32 -32768, i32 -32768, i32 -32768, i32 -32768>
  %239 = bitcast i32* %225 to <4 x i32>*
  store <4 x i32> %237, <4 x i32>* %239, align 4
  %240 = bitcast i32* %228 to <4 x i32>*
  store <4 x i32> %238, <4 x i32>* %240, align 4
  %241 = or i64 %223, 8
  %242 = getelementptr inbounds i32, i32* %158, i64 %241
  %243 = bitcast i32* %242 to <4 x i32>*
  %244 = load <4 x i32>, <4 x i32>* %243, align 4
  %245 = getelementptr inbounds i32, i32* %242, i64 4
  %246 = bitcast i32* %245 to <4 x i32>*
  %247 = load <4 x i32>, <4 x i32>* %246, align 4
  %248 = icmp slt <4 x i32> %244, <i32 32767, i32 32767, i32 32767, i32 32767>
  %249 = icmp slt <4 x i32> %247, <i32 32767, i32 32767, i32 32767, i32 32767>
  %250 = select <4 x i1> %248, <4 x i32> %244, <4 x i32> <i32 32767, i32 32767, i32 32767, i32 32767>
  %251 = select <4 x i1> %249, <4 x i32> %247, <4 x i32> <i32 32767, i32 32767, i32 32767, i32 32767>
  %252 = icmp sgt <4 x i32> %250, <i32 -32768, i32 -32768, i32 -32768, i32 -32768>
  %253 = icmp sgt <4 x i32> %251, <i32 -32768, i32 -32768, i32 -32768, i32 -32768>
  %254 = select <4 x i1> %252, <4 x i32> %250, <4 x i32> <i32 -32768, i32 -32768, i32 -32768, i32 -32768>
  %255 = select <4 x i1> %253, <4 x i32> %251, <4 x i32> <i32 -32768, i32 -32768, i32 -32768, i32 -32768>
  %256 = bitcast i32* %242 to <4 x i32>*
  store <4 x i32> %254, <4 x i32>* %256, align 4
  %257 = bitcast i32* %245 to <4 x i32>*
  store <4 x i32> %255, <4 x i32>* %257, align 4
  %258 = add i64 %223, 16
  %259 = add i64 %224, -2
  %260 = icmp eq i64 %259, 0
  br i1 %260, label %261, label %222, !llvm.loop !105

261:                                              ; preds = %222, %221
  %262 = phi i64 [ 0, %221 ], [ %258, %222 ]
  br i1 %84, label %280, label %263

263:                                              ; preds = %261
  %264 = getelementptr inbounds i32, i32* %158, i64 %262
  %265 = bitcast i32* %264 to <4 x i32>*
  %266 = load <4 x i32>, <4 x i32>* %265, align 4
  %267 = getelementptr inbounds i32, i32* %264, i64 4
  %268 = bitcast i32* %267 to <4 x i32>*
  %269 = load <4 x i32>, <4 x i32>* %268, align 4
  %270 = icmp slt <4 x i32> %266, <i32 32767, i32 32767, i32 32767, i32 32767>
  %271 = icmp slt <4 x i32> %269, <i32 32767, i32 32767, i32 32767, i32 32767>
  %272 = select <4 x i1> %270, <4 x i32> %266, <4 x i32> <i32 32767, i32 32767, i32 32767, i32 32767>
  %273 = select <4 x i1> %271, <4 x i32> %269, <4 x i32> <i32 32767, i32 32767, i32 32767, i32 32767>
  %274 = icmp sgt <4 x i32> %272, <i32 -32768, i32 -32768, i32 -32768, i32 -32768>
  %275 = icmp sgt <4 x i32> %273, <i32 -32768, i32 -32768, i32 -32768, i32 -32768>
  %276 = select <4 x i1> %274, <4 x i32> %272, <4 x i32> <i32 -32768, i32 -32768, i32 -32768, i32 -32768>
  %277 = select <4 x i1> %275, <4 x i32> %273, <4 x i32> <i32 -32768, i32 -32768, i32 -32768, i32 -32768>
  %278 = bitcast i32* %264 to <4 x i32>*
  store <4 x i32> %276, <4 x i32>* %278, align 4
  %279 = bitcast i32* %267 to <4 x i32>*
  store <4 x i32> %277, <4 x i32>* %279, align 4
  br label %280

280:                                              ; preds = %261, %263
  br i1 %85, label %293, label %281

281:                                              ; preds = %280, %220
  %282 = phi i64 [ 0, %220 ], [ %80, %280 ]
  br label %283

283:                                              ; preds = %281, %283
  %284 = phi i64 [ %291, %283 ], [ %282, %281 ]
  %285 = getelementptr inbounds i32, i32* %158, i64 %284
  %286 = load i32, i32* %285, align 4
  %287 = icmp slt i32 %286, 32767
  %288 = select i1 %287, i32 %286, i32 32767
  %289 = icmp sgt i32 %288, -32768
  %290 = select i1 %289, i32 %288, i32 -32768
  store i32 %290, i32* %285, align 4
  %291 = add nuw nsw i64 %284, 1
  %292 = icmp eq i64 %291, %34
  br i1 %292, label %293, label %283, !llvm.loop !106

293:                                              ; preds = %283, %280, %219
  %294 = add nuw nsw i64 %88, 1
  %295 = icmp eq i64 %294, %42
  br i1 %295, label %296, label %87

296:                                              ; preds = %293, %28, %86
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN7libgav13dsp12_GLOBAL__N_115TransformLoop_CILi10EitLNS0_11Transform1DE1EXadL_ZNS1_13Adst8DcOnly_CILi10EiEEvPvabibEEXadL_ZNS1_7Adst8_CIiEEvS5_aEELb0EEEvNS_13TransformTypeENS_13TransformSizeEiS5_iiS5_(i8 zeroext, i8 zeroext, i32, i8*, i32, i32, i8* nocapture readonly) #0 {
  %8 = alloca [64 x i32], align 16
  %9 = zext i8 %1 to i64
  %10 = getelementptr inbounds [19 x i8], [19 x i8]* @_ZN7libgav115kTransformWidthE, i64 0, i64 %9
  %11 = load i8, i8* %10, align 1
  %12 = zext i8 %11 to i32
  %13 = getelementptr inbounds [19 x i8], [19 x i8]* @_ZN7libgav116kTransformHeightE, i64 0, i64 %9
  %14 = load i8, i8* %13, align 1
  %15 = zext i8 %14 to i32
  %16 = bitcast i8* %3 to i32*
  %17 = zext i8 %0 to i32
  %18 = shl i32 1, %17
  %19 = and i32 %18, 16608
  %20 = icmp eq i32 %19, 0
  %21 = and i32 %18, 33104
  %22 = icmp eq i32 %21, 0
  %23 = bitcast [64 x i32]* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 256, i8* nonnull %23) #4
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %23, i8 -86, i64 256, i1 false)
  %24 = icmp eq i8 %11, 0
  br i1 %24, label %46, label %25

25:                                               ; preds = %7
  %26 = zext i8 %11 to i64
  %27 = icmp eq i32 %2, 1
  %28 = getelementptr inbounds [64 x i32], [64 x i32]* %8, i64 0, i64 0
  %29 = getelementptr inbounds [64 x i32], [64 x i32]* %8, i64 0, i64 4
  %30 = icmp eq i8 %14, 0
  %31 = getelementptr inbounds i8, i8* %6, i64 4
  %32 = bitcast i8* %31 to i32*
  %33 = getelementptr inbounds i8, i8* %6, i64 8
  %34 = bitcast i8* %33 to i16**
  %35 = zext i8 %14 to i64
  %36 = sext i32 %5 to i64
  %37 = sext i32 %4 to i64
  %38 = zext i8 %11 to i64
  %39 = add nsw i64 %35, -1
  %40 = and i64 %35, 3
  %41 = icmp ult i64 %39, 3
  %42 = sub nsw i64 %35, %40
  %43 = icmp eq i64 %40, 0
  %44 = bitcast [64 x i32]* %8 to <4 x i32>*
  %45 = bitcast i32* %29 to <4 x i32>*
  br label %47

46:                                               ; preds = %168, %7
  call void @llvm.lifetime.end.p0i8(i64 256, i8* nonnull %23) #4
  ret void

47:                                               ; preds = %168, %25
  %48 = phi i64 [ 0, %25 ], [ %169, %168 ]
  %49 = phi i32 [ 0, %25 ], [ %170, %168 ]
  %50 = xor i32 %49, -1
  %51 = add nsw i32 %50, %12
  %52 = trunc i64 %48 to i32
  %53 = select i1 %22, i32 %52, i32 %51
  %54 = sext i32 %53 to i64
  %55 = getelementptr inbounds i32, i32* %16, i64 %54
  br i1 %41, label %81, label %56

56:                                               ; preds = %47, %56
  %57 = phi i64 [ %78, %56 ], [ 0, %47 ]
  %58 = phi i64 [ %79, %56 ], [ %42, %47 ]
  %59 = mul nuw nsw i64 %57, %26
  %60 = getelementptr inbounds i32, i32* %55, i64 %59
  %61 = load i32, i32* %60, align 4
  %62 = getelementptr inbounds [64 x i32], [64 x i32]* %8, i64 0, i64 %57
  store i32 %61, i32* %62, align 16
  %63 = or i64 %57, 1
  %64 = mul nuw nsw i64 %63, %26
  %65 = getelementptr inbounds i32, i32* %55, i64 %64
  %66 = load i32, i32* %65, align 4
  %67 = getelementptr inbounds [64 x i32], [64 x i32]* %8, i64 0, i64 %63
  store i32 %66, i32* %67, align 4
  %68 = or i64 %57, 2
  %69 = mul nuw nsw i64 %68, %26
  %70 = getelementptr inbounds i32, i32* %55, i64 %69
  %71 = load i32, i32* %70, align 4
  %72 = getelementptr inbounds [64 x i32], [64 x i32]* %8, i64 0, i64 %68
  store i32 %71, i32* %72, align 8
  %73 = or i64 %57, 3
  %74 = mul nuw nsw i64 %73, %26
  %75 = getelementptr inbounds i32, i32* %55, i64 %74
  %76 = load i32, i32* %75, align 4
  %77 = getelementptr inbounds [64 x i32], [64 x i32]* %8, i64 0, i64 %73
  store i32 %76, i32* %77, align 4
  %78 = add nuw nsw i64 %57, 4
  %79 = add i64 %58, -4
  %80 = icmp eq i64 %79, 0
  br i1 %80, label %81, label %56

81:                                               ; preds = %56, %47
  %82 = phi i64 [ 0, %47 ], [ %78, %56 ]
  br i1 %43, label %93, label %83

83:                                               ; preds = %81, %83
  %84 = phi i64 [ %90, %83 ], [ %82, %81 ]
  %85 = phi i64 [ %91, %83 ], [ %40, %81 ]
  %86 = mul nuw nsw i64 %84, %26
  %87 = getelementptr inbounds i32, i32* %55, i64 %86
  %88 = load i32, i32* %87, align 4
  %89 = getelementptr inbounds [64 x i32], [64 x i32]* %8, i64 0, i64 %84
  store i32 %88, i32* %89, align 4
  %90 = add nuw nsw i64 %84, 1
  %91 = add i64 %85, -1
  %92 = icmp eq i64 %91, 0
  br i1 %92, label %93, label %83, !llvm.loop !107

93:                                               ; preds = %83, %81
  br i1 %27, label %94, label %164

94:                                               ; preds = %93
  %95 = load i32, i32* %28, align 16
  %96 = mul i32 %95, -4076
  %97 = sext i32 %96 to i64
  %98 = mul nsw i32 %95, 401
  %99 = sext i32 %98 to i64
  %100 = add nsw i64 %99, 2048
  %101 = ashr i64 %100, 12
  %102 = trunc i64 %101 to i32
  %103 = add nsw i64 %97, 2048
  %104 = ashr i64 %103, 12
  %105 = trunc i64 %104 to i32
  %106 = mul nsw i64 %101, 6730213752832
  %107 = ashr exact i64 %106, 32
  %108 = mul i64 %104, 16252156248064
  %109 = ashr exact i64 %108, 32
  %110 = mul i64 %101, 16252156248064
  %111 = ashr exact i64 %110, 32
  %112 = mul nsw i64 %104, 6730213752832
  %113 = ashr exact i64 %112, 32
  %114 = add nsw i64 %111, 2048
  %115 = add nsw i64 %114, %113
  %116 = lshr i64 %115, 12
  %117 = trunc i64 %116 to i32
  %118 = sub nsw i64 2048, %109
  %119 = add nsw i64 %118, %107
  %120 = lshr i64 %119, 12
  %121 = trunc i64 %120 to i32
  %122 = mul i64 %101, 12438225289216
  %123 = ashr exact i64 %122, 32
  %124 = mul i64 %104, 12438225289216
  %125 = ashr exact i64 %124, 32
  %126 = add nsw i64 %123, 2048
  %127 = add nsw i64 %126, %125
  %128 = lshr i64 %127, 12
  %129 = trunc i64 %128 to i32
  %130 = sub nsw i64 %126, %125
  %131 = lshr i64 %130, 12
  %132 = trunc i64 %131 to i32
  %133 = mul i64 %116, 12438225289216
  %134 = ashr exact i64 %133, 32
  %135 = mul i64 %120, 12438225289216
  %136 = ashr exact i64 %135, 32
  %137 = add nsw i64 %134, 2048
  %138 = add nsw i64 %137, %136
  %139 = lshr i64 %138, 12
  %140 = trunc i64 %139 to i32
  %141 = sub nsw i64 %137, %136
  %142 = lshr i64 %141, 12
  %143 = trunc i64 %142 to i32
  %144 = sub nsw i32 0, %117
  %145 = sub nsw i32 0, %129
  %146 = sub nsw i32 0, %143
  %147 = sub nsw i32 0, %105
  %148 = insertelement <4 x i32> undef, i32 %102, i32 0
  %149 = insertelement <4 x i32> %148, i32 %144, i32 1
  %150 = insertelement <4 x i32> %149, i32 %140, i32 2
  %151 = insertelement <4 x i32> %150, i32 %145, i32 3
  %152 = icmp slt <4 x i32> %151, <i32 32767, i32 32767, i32 32767, i32 32767>
  %153 = select <4 x i1> %152, <4 x i32> %151, <4 x i32> <i32 32767, i32 32767, i32 32767, i32 32767>
  %154 = icmp sgt <4 x i32> %153, <i32 -32768, i32 -32768, i32 -32768, i32 -32768>
  %155 = select <4 x i1> %154, <4 x i32> %153, <4 x i32> <i32 -32768, i32 -32768, i32 -32768, i32 -32768>
  store <4 x i32> %155, <4 x i32>* %44, align 16
  %156 = insertelement <4 x i32> undef, i32 %132, i32 0
  %157 = insertelement <4 x i32> %156, i32 %146, i32 1
  %158 = insertelement <4 x i32> %157, i32 %121, i32 2
  %159 = insertelement <4 x i32> %158, i32 %147, i32 3
  %160 = icmp slt <4 x i32> %159, <i32 32767, i32 32767, i32 32767, i32 32767>
  %161 = select <4 x i1> %160, <4 x i32> %159, <4 x i32> <i32 32767, i32 32767, i32 32767, i32 32767>
  %162 = icmp sgt <4 x i32> %161, <i32 -32768, i32 -32768, i32 -32768, i32 -32768>
  %163 = select <4 x i1> %162, <4 x i32> %161, <4 x i32> <i32 -32768, i32 -32768, i32 -32768, i32 -32768>
  store <4 x i32> %163, <4 x i32>* %45, align 16
  br label %165

164:                                              ; preds = %93
  call fastcc void @_ZN7libgav13dsp12_GLOBAL__N_17Adst8_CIiEEvPva(i8* nonnull %23, i8 signext 16)
  br label %165

165:                                              ; preds = %164, %94
  br i1 %30, label %168, label %166

166:                                              ; preds = %165
  %167 = add nsw i64 %48, %37
  br label %172

168:                                              ; preds = %172, %165
  %169 = add nuw nsw i64 %48, 1
  %170 = add nuw nsw i32 %49, 1
  %171 = icmp eq i64 %169, %38
  br i1 %171, label %46, label %47

172:                                              ; preds = %172, %166
  %173 = phi i64 [ 0, %166 ], [ %199, %172 ]
  %174 = phi i32 [ 0, %166 ], [ %200, %172 ]
  %175 = add nsw i64 %173, %36
  %176 = xor i32 %174, -1
  %177 = add nsw i32 %176, %15
  %178 = trunc i64 %173 to i32
  %179 = select i1 %20, i32 %178, i32 %177
  %180 = sext i32 %179 to i64
  %181 = getelementptr inbounds [64 x i32], [64 x i32]* %8, i64 0, i64 %180
  %182 = load i32, i32* %181, align 4
  %183 = add nsw i32 %182, 8
  %184 = ashr i32 %183, 4
  %185 = load i32, i32* %32, align 4
  %186 = sext i32 %185 to i64
  %187 = mul nsw i64 %175, %186
  %188 = load i16*, i16** %34, align 8
  %189 = getelementptr inbounds i16, i16* %188, i64 %167
  %190 = getelementptr inbounds i16, i16* %189, i64 %187
  %191 = load i16, i16* %190, align 2
  %192 = zext i16 %191 to i32
  %193 = add nsw i32 %184, %192
  %194 = icmp slt i32 %193, 1023
  %195 = select i1 %194, i32 %193, i32 1023
  %196 = icmp sgt i32 %195, 0
  %197 = select i1 %196, i32 %195, i32 0
  %198 = trunc i32 %197 to i16
  store i16 %198, i16* %190, align 2
  %199 = add nuw nsw i64 %173, 1
  %200 = add nuw nsw i32 %174, 1
  %201 = icmp eq i64 %199, %35
  br i1 %201, label %168, label %172
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN7libgav13dsp12_GLOBAL__N_115TransformLoop_CILi10EitLNS0_11Transform1DE1EXadL_ZNS1_14Adst16DcOnly_CILi10EiEEvPvabibEEXadL_ZNS1_8Adst16_CIiEEvS5_aEELb1EEEvNS_13TransformTypeENS_13TransformSizeEiS5_iiS5_(i8 zeroext, i8 zeroext, i32, i8*, i32, i32, i8* nocapture readnone) #0 {
  %8 = zext i8 %1 to i64
  %9 = getelementptr inbounds [19 x i8], [19 x i8]* @_ZN7libgav115kTransformWidthE, i64 0, i64 %8
  %10 = load i8, i8* %9, align 1
  %11 = zext i8 %10 to i32
  %12 = getelementptr inbounds [19 x i8], [19 x i8]* @_ZN7libgav119kTransformWidthLog2E, i64 0, i64 %8
  %13 = load i8, i8* %12, align 1
  %14 = zext i8 %13 to i32
  %15 = getelementptr inbounds [19 x i8], [19 x i8]* @_ZN7libgav120kTransformHeightLog2E, i64 0, i64 %8
  %16 = load i8, i8* %15, align 1
  %17 = zext i8 %16 to i32
  %18 = bitcast i8* %3 to i32*
  %19 = getelementptr inbounds [19 x i8], [19 x i8]* @_ZN7libgav13dsp12_GLOBAL__N_118kTransformRowShiftE, i64 0, i64 %8
  %20 = load i8, i8* %19, align 1
  %21 = zext i8 %20 to i32
  %22 = sub nsw i32 %14, %17
  %23 = icmp slt i32 %22, 0
  %24 = sub nsw i32 0, %22
  %25 = select i1 %23, i32 %24, i32 %22
  %26 = icmp eq i32 %25, 1
  %27 = icmp eq i32 %2, 1
  br i1 %27, label %86, label %28

28:                                               ; preds = %7
  %29 = icmp sgt i32 %2, 0
  br i1 %29, label %30, label %296

30:                                               ; preds = %28
  %31 = icmp ult i32 %11, 32
  %32 = select i1 %31, i32 %11, i32 32
  %33 = icmp slt i32 %32, 1
  %34 = zext i8 %10 to i64
  %35 = lshr i64 524276, %8
  %36 = and i64 %35, 1
  %37 = icmp eq i64 %36, 0
  %38 = icmp eq i8 %10, 0
  %39 = shl i32 1, %21
  %40 = ashr i32 %39, 1
  %41 = zext i32 %32 to i64
  %42 = zext i32 %2 to i64
  %43 = xor i1 %26, true
  %44 = or i1 %33, %43
  %45 = or i1 %37, %38
  %46 = zext i8 %10 to i64
  %47 = icmp ugt i64 %41, 1
  %48 = select i1 %47, i64 %41, i64 1
  %49 = and i64 %48, 56
  %50 = add nsw i64 %49, -8
  %51 = lshr exact i64 %50, 3
  %52 = add nuw nsw i64 %51, 1
  %53 = and i64 %34, 248
  %54 = add nsw i64 %53, -8
  %55 = lshr exact i64 %54, 3
  %56 = add nuw nsw i64 %55, 1
  %57 = icmp ult i64 %48, 8
  %58 = and i64 %48, 56
  %59 = and i64 %52, 1
  %60 = icmp eq i64 %50, 0
  %61 = sub nuw nsw i64 %52, %59
  %62 = icmp eq i64 %59, 0
  %63 = icmp eq i64 %48, %58
  %64 = icmp ult i8 %10, 8
  %65 = and i64 %34, 248
  %66 = insertelement <4 x i32> undef, i32 %40, i32 0
  %67 = shufflevector <4 x i32> %66, <4 x i32> undef, <4 x i32> zeroinitializer
  %68 = insertelement <4 x i32> undef, i32 %40, i32 0
  %69 = shufflevector <4 x i32> %68, <4 x i32> undef, <4 x i32> zeroinitializer
  %70 = insertelement <4 x i32> undef, i32 %21, i32 0
  %71 = shufflevector <4 x i32> %70, <4 x i32> undef, <4 x i32> zeroinitializer
  %72 = insertelement <4 x i32> undef, i32 %21, i32 0
  %73 = shufflevector <4 x i32> %72, <4 x i32> undef, <4 x i32> zeroinitializer
  %74 = and i64 %56, 1
  %75 = icmp eq i64 %54, 0
  %76 = sub nuw nsw i64 %56, %74
  %77 = icmp eq i64 %74, 0
  %78 = icmp eq i64 %65, %34
  %79 = icmp ult i8 %10, 8
  %80 = and i64 %34, 248
  %81 = and i64 %56, 1
  %82 = icmp eq i64 %54, 0
  %83 = sub nuw nsw i64 %56, %81
  %84 = icmp eq i64 %81, 0
  %85 = icmp eq i64 %80, %34
  br label %87

86:                                               ; preds = %7
  tail call fastcc void @_ZN7libgav13dsp12_GLOBAL__N_114Adst16DcOnly_CILi10EiEEvPvabib(i8* %3, i1 zeroext %26, i32 %21, i1 zeroext true)
  br label %296

87:                                               ; preds = %293, %30
  %88 = phi i64 [ 0, %30 ], [ %294, %293 ]
  %89 = mul nuw nsw i64 %88, %34
  br i1 %44, label %157, label %90

90:                                               ; preds = %87
  %91 = getelementptr inbounds i32, i32* %18, i64 %89
  br i1 %57, label %146, label %92

92:                                               ; preds = %90
  br i1 %60, label %128, label %93

93:                                               ; preds = %92, %93
  %94 = phi i64 [ %125, %93 ], [ 0, %92 ]
  %95 = phi i64 [ %126, %93 ], [ %61, %92 ]
  %96 = getelementptr inbounds i32, i32* %91, i64 %94
  %97 = bitcast i32* %96 to <4 x i32>*
  %98 = load <4 x i32>, <4 x i32>* %97, align 4
  %99 = getelementptr inbounds i32, i32* %96, i64 4
  %100 = bitcast i32* %99 to <4 x i32>*
  %101 = load <4 x i32>, <4 x i32>* %100, align 4
  %102 = mul nsw <4 x i32> %98, <i32 2896, i32 2896, i32 2896, i32 2896>
  %103 = mul nsw <4 x i32> %101, <i32 2896, i32 2896, i32 2896, i32 2896>
  %104 = add nsw <4 x i32> %102, <i32 2048, i32 2048, i32 2048, i32 2048>
  %105 = add nsw <4 x i32> %103, <i32 2048, i32 2048, i32 2048, i32 2048>
  %106 = ashr <4 x i32> %104, <i32 12, i32 12, i32 12, i32 12>
  %107 = ashr <4 x i32> %105, <i32 12, i32 12, i32 12, i32 12>
  %108 = bitcast i32* %96 to <4 x i32>*
  store <4 x i32> %106, <4 x i32>* %108, align 4
  %109 = bitcast i32* %99 to <4 x i32>*
  store <4 x i32> %107, <4 x i32>* %109, align 4
  %110 = or i64 %94, 8
  %111 = getelementptr inbounds i32, i32* %91, i64 %110
  %112 = bitcast i32* %111 to <4 x i32>*
  %113 = load <4 x i32>, <4 x i32>* %112, align 4
  %114 = getelementptr inbounds i32, i32* %111, i64 4
  %115 = bitcast i32* %114 to <4 x i32>*
  %116 = load <4 x i32>, <4 x i32>* %115, align 4
  %117 = mul nsw <4 x i32> %113, <i32 2896, i32 2896, i32 2896, i32 2896>
  %118 = mul nsw <4 x i32> %116, <i32 2896, i32 2896, i32 2896, i32 2896>
  %119 = add nsw <4 x i32> %117, <i32 2048, i32 2048, i32 2048, i32 2048>
  %120 = add nsw <4 x i32> %118, <i32 2048, i32 2048, i32 2048, i32 2048>
  %121 = ashr <4 x i32> %119, <i32 12, i32 12, i32 12, i32 12>
  %122 = ashr <4 x i32> %120, <i32 12, i32 12, i32 12, i32 12>
  %123 = bitcast i32* %111 to <4 x i32>*
  store <4 x i32> %121, <4 x i32>* %123, align 4
  %124 = bitcast i32* %114 to <4 x i32>*
  store <4 x i32> %122, <4 x i32>* %124, align 4
  %125 = add i64 %94, 16
  %126 = add i64 %95, -2
  %127 = icmp eq i64 %126, 0
  br i1 %127, label %128, label %93, !llvm.loop !108

128:                                              ; preds = %93, %92
  %129 = phi i64 [ 0, %92 ], [ %125, %93 ]
  br i1 %62, label %145, label %130

130:                                              ; preds = %128
  %131 = getelementptr inbounds i32, i32* %91, i64 %129
  %132 = bitcast i32* %131 to <4 x i32>*
  %133 = load <4 x i32>, <4 x i32>* %132, align 4
  %134 = getelementptr inbounds i32, i32* %131, i64 4
  %135 = bitcast i32* %134 to <4 x i32>*
  %136 = load <4 x i32>, <4 x i32>* %135, align 4
  %137 = mul nsw <4 x i32> %133, <i32 2896, i32 2896, i32 2896, i32 2896>
  %138 = mul nsw <4 x i32> %136, <i32 2896, i32 2896, i32 2896, i32 2896>
  %139 = add nsw <4 x i32> %137, <i32 2048, i32 2048, i32 2048, i32 2048>
  %140 = add nsw <4 x i32> %138, <i32 2048, i32 2048, i32 2048, i32 2048>
  %141 = ashr <4 x i32> %139, <i32 12, i32 12, i32 12, i32 12>
  %142 = ashr <4 x i32> %140, <i32 12, i32 12, i32 12, i32 12>
  %143 = bitcast i32* %131 to <4 x i32>*
  store <4 x i32> %141, <4 x i32>* %143, align 4
  %144 = bitcast i32* %134 to <4 x i32>*
  store <4 x i32> %142, <4 x i32>* %144, align 4
  br label %145

145:                                              ; preds = %128, %130
  br i1 %63, label %157, label %146

146:                                              ; preds = %145, %90
  %147 = phi i64 [ 0, %90 ], [ %58, %145 ]
  br label %148

148:                                              ; preds = %146, %148
  %149 = phi i64 [ %155, %148 ], [ %147, %146 ]
  %150 = getelementptr inbounds i32, i32* %91, i64 %149
  %151 = load i32, i32* %150, align 4
  %152 = mul nsw i32 %151, 2896
  %153 = add nsw i32 %152, 2048
  %154 = ashr i32 %153, 12
  store i32 %154, i32* %150, align 4
  %155 = add nuw nsw i64 %149, 1
  %156 = icmp ult i64 %155, %41
  br i1 %156, label %148, label %157, !llvm.loop !109

157:                                              ; preds = %148, %145, %87
  %158 = getelementptr inbounds i32, i32* %18, i64 %89
  %159 = bitcast i32* %158 to i8*
  tail call fastcc void @_ZN7libgav13dsp12_GLOBAL__N_18Adst16_CIiEEvPva(i8* %159, i8 signext 18)
  br i1 %45, label %219, label %160

160:                                              ; preds = %157
  br i1 %64, label %209, label %161

161:                                              ; preds = %160
  br i1 %75, label %193, label %162

162:                                              ; preds = %161, %162
  %163 = phi i64 [ %190, %162 ], [ 0, %161 ]
  %164 = phi i64 [ %191, %162 ], [ %76, %161 ]
  %165 = getelementptr inbounds i32, i32* %158, i64 %163
  %166 = bitcast i32* %165 to <4 x i32>*
  %167 = load <4 x i32>, <4 x i32>* %166, align 4
  %168 = getelementptr inbounds i32, i32* %165, i64 4
  %169 = bitcast i32* %168 to <4 x i32>*
  %170 = load <4 x i32>, <4 x i32>* %169, align 4
  %171 = add nsw <4 x i32> %167, %67
  %172 = add nsw <4 x i32> %170, %69
  %173 = ashr <4 x i32> %171, %71
  %174 = ashr <4 x i32> %172, %73
  %175 = bitcast i32* %165 to <4 x i32>*
  store <4 x i32> %173, <4 x i32>* %175, align 4
  %176 = bitcast i32* %168 to <4 x i32>*
  store <4 x i32> %174, <4 x i32>* %176, align 4
  %177 = or i64 %163, 8
  %178 = getelementptr inbounds i32, i32* %158, i64 %177
  %179 = bitcast i32* %178 to <4 x i32>*
  %180 = load <4 x i32>, <4 x i32>* %179, align 4
  %181 = getelementptr inbounds i32, i32* %178, i64 4
  %182 = bitcast i32* %181 to <4 x i32>*
  %183 = load <4 x i32>, <4 x i32>* %182, align 4
  %184 = add nsw <4 x i32> %180, %67
  %185 = add nsw <4 x i32> %183, %69
  %186 = ashr <4 x i32> %184, %71
  %187 = ashr <4 x i32> %185, %73
  %188 = bitcast i32* %178 to <4 x i32>*
  store <4 x i32> %186, <4 x i32>* %188, align 4
  %189 = bitcast i32* %181 to <4 x i32>*
  store <4 x i32> %187, <4 x i32>* %189, align 4
  %190 = add i64 %163, 16
  %191 = add i64 %164, -2
  %192 = icmp eq i64 %191, 0
  br i1 %192, label %193, label %162, !llvm.loop !110

193:                                              ; preds = %162, %161
  %194 = phi i64 [ 0, %161 ], [ %190, %162 ]
  br i1 %77, label %208, label %195

195:                                              ; preds = %193
  %196 = getelementptr inbounds i32, i32* %158, i64 %194
  %197 = bitcast i32* %196 to <4 x i32>*
  %198 = load <4 x i32>, <4 x i32>* %197, align 4
  %199 = getelementptr inbounds i32, i32* %196, i64 4
  %200 = bitcast i32* %199 to <4 x i32>*
  %201 = load <4 x i32>, <4 x i32>* %200, align 4
  %202 = add nsw <4 x i32> %198, %67
  %203 = add nsw <4 x i32> %201, %69
  %204 = ashr <4 x i32> %202, %71
  %205 = ashr <4 x i32> %203, %73
  %206 = bitcast i32* %196 to <4 x i32>*
  store <4 x i32> %204, <4 x i32>* %206, align 4
  %207 = bitcast i32* %199 to <4 x i32>*
  store <4 x i32> %205, <4 x i32>* %207, align 4
  br label %208

208:                                              ; preds = %193, %195
  br i1 %78, label %219, label %209

209:                                              ; preds = %208, %160
  %210 = phi i64 [ 0, %160 ], [ %65, %208 ]
  br label %211

211:                                              ; preds = %209, %211
  %212 = phi i64 [ %217, %211 ], [ %210, %209 ]
  %213 = getelementptr inbounds i32, i32* %158, i64 %212
  %214 = load i32, i32* %213, align 4
  %215 = add nsw i32 %214, %40
  %216 = ashr i32 %215, %21
  store i32 %216, i32* %213, align 4
  %217 = add nuw nsw i64 %212, 1
  %218 = icmp eq i64 %217, %46
  br i1 %218, label %219, label %211, !llvm.loop !111

219:                                              ; preds = %211, %208, %157
  br i1 %38, label %293, label %220

220:                                              ; preds = %219
  br i1 %79, label %281, label %221

221:                                              ; preds = %220
  br i1 %82, label %261, label %222

222:                                              ; preds = %221, %222
  %223 = phi i64 [ %258, %222 ], [ 0, %221 ]
  %224 = phi i64 [ %259, %222 ], [ %83, %221 ]
  %225 = getelementptr inbounds i32, i32* %158, i64 %223
  %226 = bitcast i32* %225 to <4 x i32>*
  %227 = load <4 x i32>, <4 x i32>* %226, align 4
  %228 = getelementptr inbounds i32, i32* %225, i64 4
  %229 = bitcast i32* %228 to <4 x i32>*
  %230 = load <4 x i32>, <4 x i32>* %229, align 4
  %231 = icmp slt <4 x i32> %227, <i32 32767, i32 32767, i32 32767, i32 32767>
  %232 = icmp slt <4 x i32> %230, <i32 32767, i32 32767, i32 32767, i32 32767>
  %233 = select <4 x i1> %231, <4 x i32> %227, <4 x i32> <i32 32767, i32 32767, i32 32767, i32 32767>
  %234 = select <4 x i1> %232, <4 x i32> %230, <4 x i32> <i32 32767, i32 32767, i32 32767, i32 32767>
  %235 = icmp sgt <4 x i32> %233, <i32 -32768, i32 -32768, i32 -32768, i32 -32768>
  %236 = icmp sgt <4 x i32> %234, <i32 -32768, i32 -32768, i32 -32768, i32 -32768>
  %237 = select <4 x i1> %235, <4 x i32> %233, <4 x i32> <i32 -32768, i32 -32768, i32 -32768, i32 -32768>
  %238 = select <4 x i1> %236, <4 x i32> %234, <4 x i32> <i32 -32768, i32 -32768, i32 -32768, i32 -32768>
  %239 = bitcast i32* %225 to <4 x i32>*
  store <4 x i32> %237, <4 x i32>* %239, align 4
  %240 = bitcast i32* %228 to <4 x i32>*
  store <4 x i32> %238, <4 x i32>* %240, align 4
  %241 = or i64 %223, 8
  %242 = getelementptr inbounds i32, i32* %158, i64 %241
  %243 = bitcast i32* %242 to <4 x i32>*
  %244 = load <4 x i32>, <4 x i32>* %243, align 4
  %245 = getelementptr inbounds i32, i32* %242, i64 4
  %246 = bitcast i32* %245 to <4 x i32>*
  %247 = load <4 x i32>, <4 x i32>* %246, align 4
  %248 = icmp slt <4 x i32> %244, <i32 32767, i32 32767, i32 32767, i32 32767>
  %249 = icmp slt <4 x i32> %247, <i32 32767, i32 32767, i32 32767, i32 32767>
  %250 = select <4 x i1> %248, <4 x i32> %244, <4 x i32> <i32 32767, i32 32767, i32 32767, i32 32767>
  %251 = select <4 x i1> %249, <4 x i32> %247, <4 x i32> <i32 32767, i32 32767, i32 32767, i32 32767>
  %252 = icmp sgt <4 x i32> %250, <i32 -32768, i32 -32768, i32 -32768, i32 -32768>
  %253 = icmp sgt <4 x i32> %251, <i32 -32768, i32 -32768, i32 -32768, i32 -32768>
  %254 = select <4 x i1> %252, <4 x i32> %250, <4 x i32> <i32 -32768, i32 -32768, i32 -32768, i32 -32768>
  %255 = select <4 x i1> %253, <4 x i32> %251, <4 x i32> <i32 -32768, i32 -32768, i32 -32768, i32 -32768>
  %256 = bitcast i32* %242 to <4 x i32>*
  store <4 x i32> %254, <4 x i32>* %256, align 4
  %257 = bitcast i32* %245 to <4 x i32>*
  store <4 x i32> %255, <4 x i32>* %257, align 4
  %258 = add i64 %223, 16
  %259 = add i64 %224, -2
  %260 = icmp eq i64 %259, 0
  br i1 %260, label %261, label %222, !llvm.loop !112

261:                                              ; preds = %222, %221
  %262 = phi i64 [ 0, %221 ], [ %258, %222 ]
  br i1 %84, label %280, label %263

263:                                              ; preds = %261
  %264 = getelementptr inbounds i32, i32* %158, i64 %262
  %265 = bitcast i32* %264 to <4 x i32>*
  %266 = load <4 x i32>, <4 x i32>* %265, align 4
  %267 = getelementptr inbounds i32, i32* %264, i64 4
  %268 = bitcast i32* %267 to <4 x i32>*
  %269 = load <4 x i32>, <4 x i32>* %268, align 4
  %270 = icmp slt <4 x i32> %266, <i32 32767, i32 32767, i32 32767, i32 32767>
  %271 = icmp slt <4 x i32> %269, <i32 32767, i32 32767, i32 32767, i32 32767>
  %272 = select <4 x i1> %270, <4 x i32> %266, <4 x i32> <i32 32767, i32 32767, i32 32767, i32 32767>
  %273 = select <4 x i1> %271, <4 x i32> %269, <4 x i32> <i32 32767, i32 32767, i32 32767, i32 32767>
  %274 = icmp sgt <4 x i32> %272, <i32 -32768, i32 -32768, i32 -32768, i32 -32768>
  %275 = icmp sgt <4 x i32> %273, <i32 -32768, i32 -32768, i32 -32768, i32 -32768>
  %276 = select <4 x i1> %274, <4 x i32> %272, <4 x i32> <i32 -32768, i32 -32768, i32 -32768, i32 -32768>
  %277 = select <4 x i1> %275, <4 x i32> %273, <4 x i32> <i32 -32768, i32 -32768, i32 -32768, i32 -32768>
  %278 = bitcast i32* %264 to <4 x i32>*
  store <4 x i32> %276, <4 x i32>* %278, align 4
  %279 = bitcast i32* %267 to <4 x i32>*
  store <4 x i32> %277, <4 x i32>* %279, align 4
  br label %280

280:                                              ; preds = %261, %263
  br i1 %85, label %293, label %281

281:                                              ; preds = %280, %220
  %282 = phi i64 [ 0, %220 ], [ %80, %280 ]
  br label %283

283:                                              ; preds = %281, %283
  %284 = phi i64 [ %291, %283 ], [ %282, %281 ]
  %285 = getelementptr inbounds i32, i32* %158, i64 %284
  %286 = load i32, i32* %285, align 4
  %287 = icmp slt i32 %286, 32767
  %288 = select i1 %287, i32 %286, i32 32767
  %289 = icmp sgt i32 %288, -32768
  %290 = select i1 %289, i32 %288, i32 -32768
  store i32 %290, i32* %285, align 4
  %291 = add nuw nsw i64 %284, 1
  %292 = icmp eq i64 %291, %34
  br i1 %292, label %293, label %283, !llvm.loop !113

293:                                              ; preds = %283, %280, %219
  %294 = add nuw nsw i64 %88, 1
  %295 = icmp eq i64 %294, %42
  br i1 %295, label %296, label %87

296:                                              ; preds = %293, %28, %86
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN7libgav13dsp12_GLOBAL__N_115TransformLoop_CILi10EitLNS0_11Transform1DE1EXadL_ZNS1_14Adst16DcOnly_CILi10EiEEvPvabibEEXadL_ZNS1_8Adst16_CIiEEvS5_aEELb0EEEvNS_13TransformTypeENS_13TransformSizeEiS5_iiS5_(i8 zeroext, i8 zeroext, i32, i8*, i32, i32, i8* nocapture readonly) #0 {
  %8 = alloca [64 x i32], align 16
  %9 = zext i8 %1 to i64
  %10 = getelementptr inbounds [19 x i8], [19 x i8]* @_ZN7libgav115kTransformWidthE, i64 0, i64 %9
  %11 = load i8, i8* %10, align 1
  %12 = zext i8 %11 to i32
  %13 = getelementptr inbounds [19 x i8], [19 x i8]* @_ZN7libgav116kTransformHeightE, i64 0, i64 %9
  %14 = load i8, i8* %13, align 1
  %15 = zext i8 %14 to i32
  %16 = bitcast i8* %3 to i32*
  %17 = zext i8 %0 to i32
  %18 = shl i32 1, %17
  %19 = and i32 %18, 16608
  %20 = icmp eq i32 %19, 0
  %21 = and i32 %18, 33104
  %22 = icmp eq i32 %21, 0
  %23 = bitcast [64 x i32]* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 256, i8* nonnull %23) #4
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %23, i8 -86, i64 256, i1 false)
  %24 = icmp eq i8 %11, 0
  br i1 %24, label %42, label %25

25:                                               ; preds = %7
  %26 = zext i8 %11 to i64
  %27 = icmp eq i32 %2, 1
  %28 = icmp eq i8 %14, 0
  %29 = getelementptr inbounds i8, i8* %6, i64 4
  %30 = bitcast i8* %29 to i32*
  %31 = getelementptr inbounds i8, i8* %6, i64 8
  %32 = bitcast i8* %31 to i16**
  %33 = zext i8 %14 to i64
  %34 = sext i32 %5 to i64
  %35 = sext i32 %4 to i64
  %36 = zext i8 %11 to i64
  %37 = add nsw i64 %33, -1
  %38 = and i64 %33, 3
  %39 = icmp ult i64 %37, 3
  %40 = sub nsw i64 %33, %38
  %41 = icmp eq i64 %38, 0
  br label %43

42:                                               ; preds = %95, %7
  call void @llvm.lifetime.end.p0i8(i64 256, i8* nonnull %23) #4
  ret void

43:                                               ; preds = %95, %25
  %44 = phi i64 [ 0, %25 ], [ %96, %95 ]
  %45 = phi i32 [ 0, %25 ], [ %97, %95 ]
  %46 = xor i32 %45, -1
  %47 = add nsw i32 %46, %12
  %48 = trunc i64 %44 to i32
  %49 = select i1 %22, i32 %48, i32 %47
  %50 = sext i32 %49 to i64
  %51 = getelementptr inbounds i32, i32* %16, i64 %50
  br i1 %39, label %77, label %52

52:                                               ; preds = %43, %52
  %53 = phi i64 [ %74, %52 ], [ 0, %43 ]
  %54 = phi i64 [ %75, %52 ], [ %40, %43 ]
  %55 = mul nuw nsw i64 %53, %26
  %56 = getelementptr inbounds i32, i32* %51, i64 %55
  %57 = load i32, i32* %56, align 4
  %58 = getelementptr inbounds [64 x i32], [64 x i32]* %8, i64 0, i64 %53
  store i32 %57, i32* %58, align 16
  %59 = or i64 %53, 1
  %60 = mul nuw nsw i64 %59, %26
  %61 = getelementptr inbounds i32, i32* %51, i64 %60
  %62 = load i32, i32* %61, align 4
  %63 = getelementptr inbounds [64 x i32], [64 x i32]* %8, i64 0, i64 %59
  store i32 %62, i32* %63, align 4
  %64 = or i64 %53, 2
  %65 = mul nuw nsw i64 %64, %26
  %66 = getelementptr inbounds i32, i32* %51, i64 %65
  %67 = load i32, i32* %66, align 4
  %68 = getelementptr inbounds [64 x i32], [64 x i32]* %8, i64 0, i64 %64
  store i32 %67, i32* %68, align 8
  %69 = or i64 %53, 3
  %70 = mul nuw nsw i64 %69, %26
  %71 = getelementptr inbounds i32, i32* %51, i64 %70
  %72 = load i32, i32* %71, align 4
  %73 = getelementptr inbounds [64 x i32], [64 x i32]* %8, i64 0, i64 %69
  store i32 %72, i32* %73, align 4
  %74 = add nuw nsw i64 %53, 4
  %75 = add i64 %54, -4
  %76 = icmp eq i64 %75, 0
  br i1 %76, label %77, label %52

77:                                               ; preds = %52, %43
  %78 = phi i64 [ 0, %43 ], [ %74, %52 ]
  br i1 %41, label %89, label %79

79:                                               ; preds = %77, %79
  %80 = phi i64 [ %86, %79 ], [ %78, %77 ]
  %81 = phi i64 [ %87, %79 ], [ %38, %77 ]
  %82 = mul nuw nsw i64 %80, %26
  %83 = getelementptr inbounds i32, i32* %51, i64 %82
  %84 = load i32, i32* %83, align 4
  %85 = getelementptr inbounds [64 x i32], [64 x i32]* %8, i64 0, i64 %80
  store i32 %84, i32* %85, align 4
  %86 = add nuw nsw i64 %80, 1
  %87 = add i64 %81, -1
  %88 = icmp eq i64 %87, 0
  br i1 %88, label %89, label %79, !llvm.loop !114

89:                                               ; preds = %79, %77
  br i1 %27, label %90, label %91

90:                                               ; preds = %89
  call fastcc void @_ZN7libgav13dsp12_GLOBAL__N_114Adst16DcOnly_CILi10EiEEvPvabib(i8* nonnull %23, i1 zeroext false, i32 0, i1 zeroext false)
  br label %92

91:                                               ; preds = %89
  call fastcc void @_ZN7libgav13dsp12_GLOBAL__N_18Adst16_CIiEEvPva(i8* nonnull %23, i8 signext 16)
  br label %92

92:                                               ; preds = %91, %90
  br i1 %28, label %95, label %93

93:                                               ; preds = %92
  %94 = add nsw i64 %44, %35
  br label %99

95:                                               ; preds = %99, %92
  %96 = add nuw nsw i64 %44, 1
  %97 = add nuw nsw i32 %45, 1
  %98 = icmp eq i64 %96, %36
  br i1 %98, label %42, label %43

99:                                               ; preds = %99, %93
  %100 = phi i64 [ 0, %93 ], [ %126, %99 ]
  %101 = phi i32 [ 0, %93 ], [ %127, %99 ]
  %102 = add nsw i64 %100, %34
  %103 = xor i32 %101, -1
  %104 = add nsw i32 %103, %15
  %105 = trunc i64 %100 to i32
  %106 = select i1 %20, i32 %105, i32 %104
  %107 = sext i32 %106 to i64
  %108 = getelementptr inbounds [64 x i32], [64 x i32]* %8, i64 0, i64 %107
  %109 = load i32, i32* %108, align 4
  %110 = add nsw i32 %109, 8
  %111 = ashr i32 %110, 4
  %112 = load i32, i32* %30, align 4
  %113 = sext i32 %112 to i64
  %114 = mul nsw i64 %102, %113
  %115 = load i16*, i16** %32, align 8
  %116 = getelementptr inbounds i16, i16* %115, i64 %94
  %117 = getelementptr inbounds i16, i16* %116, i64 %114
  %118 = load i16, i16* %117, align 2
  %119 = zext i16 %118 to i32
  %120 = add nsw i32 %111, %119
  %121 = icmp slt i32 %120, 1023
  %122 = select i1 %121, i32 %120, i32 1023
  %123 = icmp sgt i32 %122, 0
  %124 = select i1 %123, i32 %122, i32 0
  %125 = trunc i32 %124 to i16
  store i16 %125, i16* %117, align 2
  %126 = add nuw nsw i64 %100, 1
  %127 = add nuw nsw i32 %101, 1
  %128 = icmp eq i64 %126, %33
  br i1 %128, label %95, label %99
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN7libgav13dsp12_GLOBAL__N_115TransformLoop_CILi10EitLNS0_11Transform1DE2EXadL_ZNS1_17Identity4DcOnly_CILi10EiEEvPvabibEEXadL_ZNS1_14Identity4Row_CIiEEvS5_aEELb1EEEvNS_13TransformTypeENS_13TransformSizeEiS5_iiS5_(i8 zeroext, i8 zeroext, i32, i8*, i32, i32, i8* nocapture readnone) #0 {
  %8 = zext i8 %1 to i64
  %9 = getelementptr inbounds [19 x i8], [19 x i8]* @_ZN7libgav115kTransformWidthE, i64 0, i64 %8
  %10 = load i8, i8* %9, align 1
  %11 = zext i8 %10 to i32
  %12 = getelementptr inbounds [19 x i8], [19 x i8]* @_ZN7libgav119kTransformWidthLog2E, i64 0, i64 %8
  %13 = load i8, i8* %12, align 1
  %14 = zext i8 %13 to i32
  %15 = getelementptr inbounds [19 x i8], [19 x i8]* @_ZN7libgav120kTransformHeightLog2E, i64 0, i64 %8
  %16 = load i8, i8* %15, align 1
  %17 = zext i8 %16 to i32
  %18 = bitcast i8* %3 to i32*
  %19 = getelementptr inbounds [19 x i8], [19 x i8]* @_ZN7libgav13dsp12_GLOBAL__N_118kTransformRowShiftE, i64 0, i64 %8
  %20 = load i8, i8* %19, align 1
  %21 = sub nsw i32 %14, %17
  %22 = icmp slt i32 %21, 0
  %23 = sub nsw i32 0, %21
  %24 = select i1 %22, i32 %23, i32 %21
  %25 = icmp eq i32 %24, 1
  %26 = icmp eq i32 %2, 1
  br i1 %26, label %62, label %27

27:                                               ; preds = %7
  %28 = icmp sgt i32 %2, 0
  br i1 %28, label %29, label %216

29:                                               ; preds = %27
  %30 = icmp ult i32 %11, 32
  %31 = select i1 %30, i32 %11, i32 32
  %32 = icmp slt i32 %31, 1
  %33 = zext i8 %10 to i64
  %34 = sext i8 %20 to i32
  %35 = shl nsw i32 %34, 12
  %36 = or i32 %35, 2048
  %37 = add nsw i32 %34, 12
  %38 = icmp eq i8 %10, 0
  %39 = zext i32 %31 to i64
  %40 = zext i32 %2 to i64
  %41 = xor i1 %25, true
  %42 = or i1 %32, %41
  %43 = add nsw i64 %33, -1
  %44 = icmp ugt i64 %39, 1
  %45 = select i1 %44, i64 %39, i64 1
  %46 = and i64 %45, 56
  %47 = add nsw i64 %46, -8
  %48 = lshr exact i64 %47, 3
  %49 = add nuw nsw i64 %48, 1
  %50 = icmp ult i64 %45, 8
  %51 = and i64 %45, 56
  %52 = and i64 %49, 1
  %53 = icmp eq i64 %47, 0
  %54 = sub nuw nsw i64 %49, %52
  %55 = icmp eq i64 %52, 0
  %56 = icmp eq i64 %45, %51
  %57 = icmp eq i8 %10, 1
  %58 = icmp ult i64 %43, 8
  %59 = and i64 %43, -8
  %60 = or i64 %59, 1
  %61 = icmp eq i64 %43, %59
  br label %81

62:                                               ; preds = %7
  %63 = zext i8 %20 to i32
  %64 = load i32, i32* %18, align 4
  br i1 %25, label %65, label %69

65:                                               ; preds = %62
  %66 = mul nsw i32 %64, 2896
  %67 = add nsw i32 %66, 2048
  %68 = ashr i32 %67, 12
  store i32 %68, i32* %18, align 4
  br label %69

69:                                               ; preds = %62, %65
  %70 = phi i32 [ %68, %65 ], [ %64, %62 ]
  %71 = shl nuw nsw i32 %63, 12
  %72 = or i32 %71, 2048
  %73 = mul nsw i32 %70, 5793
  %74 = add nsw i32 %73, %72
  %75 = add nuw nsw i32 %63, 12
  %76 = ashr i32 %74, %75
  %77 = icmp slt i32 %76, 32767
  %78 = select i1 %77, i32 %76, i32 32767
  %79 = icmp sgt i32 %78, -32768
  %80 = select i1 %79, i32 %78, i32 -32768
  store i32 %80, i32* %18, align 4
  br label %216

81:                                               ; preds = %213, %29
  %82 = phi i64 [ 0, %29 ], [ %214, %213 ]
  %83 = mul nuw nsw i64 %82, %33
  br i1 %42, label %151, label %84

84:                                               ; preds = %81
  %85 = getelementptr inbounds i32, i32* %18, i64 %83
  br i1 %50, label %140, label %86

86:                                               ; preds = %84
  br i1 %53, label %122, label %87

87:                                               ; preds = %86, %87
  %88 = phi i64 [ %119, %87 ], [ 0, %86 ]
  %89 = phi i64 [ %120, %87 ], [ %54, %86 ]
  %90 = getelementptr inbounds i32, i32* %85, i64 %88
  %91 = bitcast i32* %90 to <4 x i32>*
  %92 = load <4 x i32>, <4 x i32>* %91, align 4
  %93 = getelementptr inbounds i32, i32* %90, i64 4
  %94 = bitcast i32* %93 to <4 x i32>*
  %95 = load <4 x i32>, <4 x i32>* %94, align 4
  %96 = mul nsw <4 x i32> %92, <i32 2896, i32 2896, i32 2896, i32 2896>
  %97 = mul nsw <4 x i32> %95, <i32 2896, i32 2896, i32 2896, i32 2896>
  %98 = add nsw <4 x i32> %96, <i32 2048, i32 2048, i32 2048, i32 2048>
  %99 = add nsw <4 x i32> %97, <i32 2048, i32 2048, i32 2048, i32 2048>
  %100 = ashr <4 x i32> %98, <i32 12, i32 12, i32 12, i32 12>
  %101 = ashr <4 x i32> %99, <i32 12, i32 12, i32 12, i32 12>
  %102 = bitcast i32* %90 to <4 x i32>*
  store <4 x i32> %100, <4 x i32>* %102, align 4
  %103 = bitcast i32* %93 to <4 x i32>*
  store <4 x i32> %101, <4 x i32>* %103, align 4
  %104 = or i64 %88, 8
  %105 = getelementptr inbounds i32, i32* %85, i64 %104
  %106 = bitcast i32* %105 to <4 x i32>*
  %107 = load <4 x i32>, <4 x i32>* %106, align 4
  %108 = getelementptr inbounds i32, i32* %105, i64 4
  %109 = bitcast i32* %108 to <4 x i32>*
  %110 = load <4 x i32>, <4 x i32>* %109, align 4
  %111 = mul nsw <4 x i32> %107, <i32 2896, i32 2896, i32 2896, i32 2896>
  %112 = mul nsw <4 x i32> %110, <i32 2896, i32 2896, i32 2896, i32 2896>
  %113 = add nsw <4 x i32> %111, <i32 2048, i32 2048, i32 2048, i32 2048>
  %114 = add nsw <4 x i32> %112, <i32 2048, i32 2048, i32 2048, i32 2048>
  %115 = ashr <4 x i32> %113, <i32 12, i32 12, i32 12, i32 12>
  %116 = ashr <4 x i32> %114, <i32 12, i32 12, i32 12, i32 12>
  %117 = bitcast i32* %105 to <4 x i32>*
  store <4 x i32> %115, <4 x i32>* %117, align 4
  %118 = bitcast i32* %108 to <4 x i32>*
  store <4 x i32> %116, <4 x i32>* %118, align 4
  %119 = add i64 %88, 16
  %120 = add i64 %89, -2
  %121 = icmp eq i64 %120, 0
  br i1 %121, label %122, label %87, !llvm.loop !115

122:                                              ; preds = %87, %86
  %123 = phi i64 [ 0, %86 ], [ %119, %87 ]
  br i1 %55, label %139, label %124

124:                                              ; preds = %122
  %125 = getelementptr inbounds i32, i32* %85, i64 %123
  %126 = bitcast i32* %125 to <4 x i32>*
  %127 = load <4 x i32>, <4 x i32>* %126, align 4
  %128 = getelementptr inbounds i32, i32* %125, i64 4
  %129 = bitcast i32* %128 to <4 x i32>*
  %130 = load <4 x i32>, <4 x i32>* %129, align 4
  %131 = mul nsw <4 x i32> %127, <i32 2896, i32 2896, i32 2896, i32 2896>
  %132 = mul nsw <4 x i32> %130, <i32 2896, i32 2896, i32 2896, i32 2896>
  %133 = add nsw <4 x i32> %131, <i32 2048, i32 2048, i32 2048, i32 2048>
  %134 = add nsw <4 x i32> %132, <i32 2048, i32 2048, i32 2048, i32 2048>
  %135 = ashr <4 x i32> %133, <i32 12, i32 12, i32 12, i32 12>
  %136 = ashr <4 x i32> %134, <i32 12, i32 12, i32 12, i32 12>
  %137 = bitcast i32* %125 to <4 x i32>*
  store <4 x i32> %135, <4 x i32>* %137, align 4
  %138 = bitcast i32* %128 to <4 x i32>*
  store <4 x i32> %136, <4 x i32>* %138, align 4
  br label %139

139:                                              ; preds = %122, %124
  br i1 %56, label %151, label %140

140:                                              ; preds = %139, %84
  %141 = phi i64 [ 0, %84 ], [ %51, %139 ]
  br label %142

142:                                              ; preds = %140, %142
  %143 = phi i64 [ %149, %142 ], [ %141, %140 ]
  %144 = getelementptr inbounds i32, i32* %85, i64 %143
  %145 = load i32, i32* %144, align 4
  %146 = mul nsw i32 %145, 2896
  %147 = add nsw i32 %146, 2048
  %148 = ashr i32 %147, 12
  store i32 %148, i32* %144, align 4
  %149 = add nuw nsw i64 %143, 1
  %150 = icmp ult i64 %149, %39
  br i1 %150, label %142, label %151, !llvm.loop !116

151:                                              ; preds = %142, %139, %81
  %152 = getelementptr inbounds i32, i32* %18, i64 %83
  %153 = load i32, i32* %152, align 4
  %154 = mul nsw i32 %153, 5793
  %155 = add nsw i32 %154, %36
  %156 = ashr i32 %155, %37
  store i32 %156, i32* %152, align 4
  %157 = getelementptr inbounds i32, i32* %152, i64 1
  %158 = load i32, i32* %157, align 4
  %159 = mul nsw i32 %158, 5793
  %160 = add nsw i32 %159, %36
  %161 = ashr i32 %160, %37
  store i32 %161, i32* %157, align 4
  %162 = getelementptr inbounds i32, i32* %152, i64 2
  %163 = load i32, i32* %162, align 4
  %164 = mul nsw i32 %163, 5793
  %165 = add nsw i32 %164, %36
  %166 = ashr i32 %165, %37
  store i32 %166, i32* %162, align 4
  %167 = getelementptr inbounds i32, i32* %152, i64 3
  %168 = load i32, i32* %167, align 4
  %169 = mul nsw i32 %168, 5793
  %170 = add nsw i32 %169, %36
  %171 = ashr i32 %170, %37
  store i32 %171, i32* %167, align 4
  br i1 %38, label %213, label %172

172:                                              ; preds = %151
  %173 = icmp slt i32 %156, 32767
  %174 = select i1 %173, i32 %156, i32 32767
  %175 = icmp sgt i32 %174, -32768
  %176 = select i1 %175, i32 %174, i32 -32768
  store i32 %176, i32* %152, align 4
  br i1 %57, label %213, label %177

177:                                              ; preds = %172
  br i1 %58, label %200, label %178

178:                                              ; preds = %177, %178
  %179 = phi i64 [ %197, %178 ], [ 0, %177 ]
  %180 = or i64 %179, 1
  %181 = getelementptr inbounds i32, i32* %152, i64 %180
  %182 = bitcast i32* %181 to <4 x i32>*
  %183 = load <4 x i32>, <4 x i32>* %182, align 4
  %184 = getelementptr inbounds i32, i32* %181, i64 4
  %185 = bitcast i32* %184 to <4 x i32>*
  %186 = load <4 x i32>, <4 x i32>* %185, align 4
  %187 = icmp slt <4 x i32> %183, <i32 32767, i32 32767, i32 32767, i32 32767>
  %188 = icmp slt <4 x i32> %186, <i32 32767, i32 32767, i32 32767, i32 32767>
  %189 = select <4 x i1> %187, <4 x i32> %183, <4 x i32> <i32 32767, i32 32767, i32 32767, i32 32767>
  %190 = select <4 x i1> %188, <4 x i32> %186, <4 x i32> <i32 32767, i32 32767, i32 32767, i32 32767>
  %191 = icmp sgt <4 x i32> %189, <i32 -32768, i32 -32768, i32 -32768, i32 -32768>
  %192 = icmp sgt <4 x i32> %190, <i32 -32768, i32 -32768, i32 -32768, i32 -32768>
  %193 = select <4 x i1> %191, <4 x i32> %189, <4 x i32> <i32 -32768, i32 -32768, i32 -32768, i32 -32768>
  %194 = select <4 x i1> %192, <4 x i32> %190, <4 x i32> <i32 -32768, i32 -32768, i32 -32768, i32 -32768>
  %195 = bitcast i32* %181 to <4 x i32>*
  store <4 x i32> %193, <4 x i32>* %195, align 4
  %196 = bitcast i32* %184 to <4 x i32>*
  store <4 x i32> %194, <4 x i32>* %196, align 4
  %197 = add i64 %179, 8
  %198 = icmp eq i64 %197, %59
  br i1 %198, label %199, label %178, !llvm.loop !117

199:                                              ; preds = %178
  br i1 %61, label %213, label %200

200:                                              ; preds = %199, %177
  %201 = phi i64 [ 1, %177 ], [ %60, %199 ]
  br label %202

202:                                              ; preds = %200, %202
  %203 = phi i64 [ %211, %202 ], [ %201, %200 ]
  %204 = getelementptr inbounds i32, i32* %152, i64 %203
  %205 = load i32, i32* %204, align 4
  %206 = getelementptr inbounds i32, i32* %152, i64 %203
  %207 = icmp slt i32 %205, 32767
  %208 = select i1 %207, i32 %205, i32 32767
  %209 = icmp sgt i32 %208, -32768
  %210 = select i1 %209, i32 %208, i32 -32768
  store i32 %210, i32* %206, align 4
  %211 = add nuw nsw i64 %203, 1
  %212 = icmp eq i64 %211, %33
  br i1 %212, label %213, label %202, !llvm.loop !118

213:                                              ; preds = %202, %172, %199, %151
  %214 = add nuw nsw i64 %82, 1
  %215 = icmp eq i64 %214, %40
  br i1 %215, label %216, label %81

216:                                              ; preds = %213, %27, %69
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN7libgav13dsp12_GLOBAL__N_115TransformLoop_CILi10EitLNS0_11Transform1DE2EXadL_ZNS1_17Identity4DcOnly_CILi10EiEEvPvabibEEXadL_ZNS1_17Identity4Column_CIiEEvS5_aEELb0EEEvNS_13TransformTypeENS_13TransformSizeEiS5_iiS5_(i8 zeroext, i8 zeroext, i32, i8*, i32, i32, i8* nocapture readonly) #0 {
  %8 = alloca [64 x i32], align 16
  %9 = zext i8 %1 to i64
  %10 = getelementptr inbounds [19 x i8], [19 x i8]* @_ZN7libgav115kTransformWidthE, i64 0, i64 %9
  %11 = load i8, i8* %10, align 1
  %12 = zext i8 %11 to i32
  %13 = getelementptr inbounds [19 x i8], [19 x i8]* @_ZN7libgav116kTransformHeightE, i64 0, i64 %9
  %14 = load i8, i8* %13, align 1
  %15 = bitcast i8* %3 to i32*
  %16 = zext i8 %0 to i32
  %17 = shl i32 1, %16
  %18 = and i32 %17, 33104
  %19 = icmp eq i32 %18, 0
  %20 = bitcast [64 x i32]* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 256, i8* nonnull %20) #4
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %20, i8 -86, i64 256, i1 false)
  %21 = icmp eq i8 %11, 0
  br i1 %21, label %44, label %22

22:                                               ; preds = %7
  %23 = zext i8 %11 to i64
  %24 = icmp eq i32 %2, 1
  %25 = getelementptr inbounds [64 x i32], [64 x i32]* %8, i64 0, i64 0
  %26 = getelementptr inbounds [64 x i32], [64 x i32]* %8, i64 0, i64 1
  %27 = getelementptr inbounds [64 x i32], [64 x i32]* %8, i64 0, i64 2
  %28 = getelementptr inbounds [64 x i32], [64 x i32]* %8, i64 0, i64 3
  %29 = icmp eq i8 %14, 0
  %30 = getelementptr inbounds i8, i8* %6, i64 4
  %31 = bitcast i8* %30 to i32*
  %32 = getelementptr inbounds i8, i8* %6, i64 8
  %33 = bitcast i8* %32 to i16**
  %34 = zext i8 %14 to i64
  %35 = sext i32 %5 to i64
  %36 = sext i32 %4 to i64
  %37 = zext i8 %11 to i64
  %38 = add nsw i64 %34, -1
  %39 = and i64 %34, 3
  %40 = icmp ult i64 %38, 3
  %41 = sub nsw i64 %34, %39
  %42 = icmp eq i64 %39, 0
  %43 = icmp eq i8 %14, 1
  br label %45

44:                                               ; preds = %126, %7
  call void @llvm.lifetime.end.p0i8(i64 256, i8* nonnull %20) #4
  ret void

45:                                               ; preds = %126, %22
  %46 = phi i64 [ 0, %22 ], [ %127, %126 ]
  %47 = phi i32 [ 0, %22 ], [ %128, %126 ]
  %48 = xor i32 %47, -1
  %49 = add nsw i32 %48, %12
  %50 = trunc i64 %46 to i32
  %51 = select i1 %19, i32 %50, i32 %49
  %52 = sext i32 %51 to i64
  %53 = getelementptr inbounds i32, i32* %15, i64 %52
  br i1 %40, label %79, label %54

54:                                               ; preds = %45, %54
  %55 = phi i64 [ %76, %54 ], [ 0, %45 ]
  %56 = phi i64 [ %77, %54 ], [ %41, %45 ]
  %57 = mul nuw nsw i64 %55, %23
  %58 = getelementptr inbounds i32, i32* %53, i64 %57
  %59 = load i32, i32* %58, align 4
  %60 = getelementptr inbounds [64 x i32], [64 x i32]* %8, i64 0, i64 %55
  store i32 %59, i32* %60, align 16
  %61 = or i64 %55, 1
  %62 = mul nuw nsw i64 %61, %23
  %63 = getelementptr inbounds i32, i32* %53, i64 %62
  %64 = load i32, i32* %63, align 4
  %65 = getelementptr inbounds [64 x i32], [64 x i32]* %8, i64 0, i64 %61
  store i32 %64, i32* %65, align 4
  %66 = or i64 %55, 2
  %67 = mul nuw nsw i64 %66, %23
  %68 = getelementptr inbounds i32, i32* %53, i64 %67
  %69 = load i32, i32* %68, align 4
  %70 = getelementptr inbounds [64 x i32], [64 x i32]* %8, i64 0, i64 %66
  store i32 %69, i32* %70, align 8
  %71 = or i64 %55, 3
  %72 = mul nuw nsw i64 %71, %23
  %73 = getelementptr inbounds i32, i32* %53, i64 %72
  %74 = load i32, i32* %73, align 4
  %75 = getelementptr inbounds [64 x i32], [64 x i32]* %8, i64 0, i64 %71
  store i32 %74, i32* %75, align 4
  %76 = add nuw nsw i64 %55, 4
  %77 = add i64 %56, -4
  %78 = icmp eq i64 %77, 0
  br i1 %78, label %79, label %54

79:                                               ; preds = %54, %45
  %80 = phi i64 [ 0, %45 ], [ %76, %54 ]
  br i1 %42, label %91, label %81

81:                                               ; preds = %79, %81
  %82 = phi i64 [ %88, %81 ], [ %80, %79 ]
  %83 = phi i64 [ %89, %81 ], [ %39, %79 ]
  %84 = mul nuw nsw i64 %82, %23
  %85 = getelementptr inbounds i32, i32* %53, i64 %84
  %86 = load i32, i32* %85, align 4
  %87 = getelementptr inbounds [64 x i32], [64 x i32]* %8, i64 0, i64 %82
  store i32 %86, i32* %87, align 4
  %88 = add nuw nsw i64 %82, 1
  %89 = add i64 %83, -1
  %90 = icmp eq i64 %89, 0
  br i1 %90, label %91, label %81, !llvm.loop !119

91:                                               ; preds = %81, %79
  %92 = load i32, i32* %25, align 16
  %93 = mul nsw i32 %92, 5793
  %94 = add nsw i32 %93, 34816
  %95 = ashr i32 %94, 16
  store i32 %95, i32* %25, align 16
  br i1 %24, label %109, label %96

96:                                               ; preds = %91
  %97 = load i32, i32* %26, align 4
  %98 = mul nsw i32 %97, 5793
  %99 = add nsw i32 %98, 34816
  %100 = ashr i32 %99, 16
  store i32 %100, i32* %26, align 4
  %101 = load i32, i32* %27, align 8
  %102 = mul nsw i32 %101, 5793
  %103 = add nsw i32 %102, 34816
  %104 = ashr i32 %103, 16
  store i32 %104, i32* %27, align 8
  %105 = load i32, i32* %28, align 4
  %106 = mul nsw i32 %105, 5793
  %107 = add nsw i32 %106, 34816
  %108 = ashr i32 %107, 16
  store i32 %108, i32* %28, align 4
  br label %109

109:                                              ; preds = %91, %96
  br i1 %29, label %126, label %110

110:                                              ; preds = %109
  %111 = add nsw i64 %46, %36
  %112 = load i32, i32* %31, align 4
  %113 = sext i32 %112 to i64
  %114 = mul nsw i64 %35, %113
  %115 = load i16*, i16** %33, align 8
  %116 = getelementptr inbounds i16, i16* %115, i64 %111
  %117 = getelementptr inbounds i16, i16* %116, i64 %114
  %118 = load i16, i16* %117, align 2
  %119 = zext i16 %118 to i32
  %120 = add nsw i32 %95, %119
  %121 = icmp slt i32 %120, 1023
  %122 = select i1 %121, i32 %120, i32 1023
  %123 = icmp sgt i32 %122, 0
  %124 = select i1 %123, i32 %122, i32 0
  %125 = trunc i32 %124 to i16
  store i16 %125, i16* %117, align 2
  br i1 %43, label %126, label %130

126:                                              ; preds = %130, %110, %109
  %127 = add nuw nsw i64 %46, 1
  %128 = add nuw nsw i32 %47, 1
  %129 = icmp eq i64 %127, %37
  br i1 %129, label %44, label %45

130:                                              ; preds = %110, %130
  %131 = phi i64 [ %149, %130 ], [ 1, %110 ]
  %132 = getelementptr inbounds [64 x i32], [64 x i32]* %8, i64 0, i64 %131
  %133 = load i32, i32* %132, align 4
  %134 = add nsw i64 %131, %35
  %135 = load i32, i32* %31, align 4
  %136 = sext i32 %135 to i64
  %137 = mul nsw i64 %134, %136
  %138 = load i16*, i16** %33, align 8
  %139 = getelementptr inbounds i16, i16* %138, i64 %111
  %140 = getelementptr inbounds i16, i16* %139, i64 %137
  %141 = load i16, i16* %140, align 2
  %142 = zext i16 %141 to i32
  %143 = add nsw i32 %133, %142
  %144 = icmp slt i32 %143, 1023
  %145 = select i1 %144, i32 %143, i32 1023
  %146 = icmp sgt i32 %145, 0
  %147 = select i1 %146, i32 %145, i32 0
  %148 = trunc i32 %147 to i16
  store i16 %148, i16* %140, align 2
  %149 = add nuw nsw i64 %131, 1
  %150 = icmp eq i64 %149, %34
  br i1 %150, label %126, label %130
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN7libgav13dsp12_GLOBAL__N_115TransformLoop_CILi10EitLNS0_11Transform1DE2EXadL_ZNS1_17Identity8DcOnly_CILi10EiEEvPvabibEEXadL_ZNS1_14Identity8Row_CIiEEvS5_aEELb1EEEvNS_13TransformTypeENS_13TransformSizeEiS5_iiS5_(i8 zeroext, i8 zeroext, i32, i8*, i32, i32, i8* nocapture readnone) #0 {
  %8 = zext i8 %1 to i64
  %9 = getelementptr inbounds [19 x i8], [19 x i8]* @_ZN7libgav115kTransformWidthE, i64 0, i64 %8
  %10 = load i8, i8* %9, align 1
  %11 = zext i8 %10 to i32
  %12 = getelementptr inbounds [19 x i8], [19 x i8]* @_ZN7libgav119kTransformWidthLog2E, i64 0, i64 %8
  %13 = load i8, i8* %12, align 1
  %14 = zext i8 %13 to i32
  %15 = getelementptr inbounds [19 x i8], [19 x i8]* @_ZN7libgav120kTransformHeightLog2E, i64 0, i64 %8
  %16 = load i8, i8* %15, align 1
  %17 = zext i8 %16 to i32
  %18 = bitcast i8* %3 to i32*
  %19 = getelementptr inbounds [19 x i8], [19 x i8]* @_ZN7libgav13dsp12_GLOBAL__N_118kTransformRowShiftE, i64 0, i64 %8
  %20 = load i8, i8* %19, align 1
  %21 = sub nsw i32 %14, %17
  %22 = icmp slt i32 %21, 0
  %23 = sub nsw i32 0, %21
  %24 = select i1 %22, i32 %23, i32 %21
  %25 = icmp eq i32 %24, 1
  %26 = icmp eq i32 %2, 1
  br i1 %26, label %61, label %27

27:                                               ; preds = %7
  %28 = icmp sgt i32 %2, 0
  br i1 %28, label %29, label %234

29:                                               ; preds = %27
  %30 = icmp ult i32 %11, 32
  %31 = select i1 %30, i32 %11, i32 32
  %32 = icmp slt i32 %31, 1
  %33 = zext i8 %10 to i64
  %34 = sext i8 %20 to i32
  %35 = shl i32 1, %34
  %36 = ashr i32 %35, 1
  %37 = icmp eq i8 %10, 0
  %38 = zext i32 %31 to i64
  %39 = zext i32 %2 to i64
  %40 = xor i1 %25, true
  %41 = or i1 %32, %40
  %42 = add nsw i64 %33, -1
  %43 = icmp ugt i64 %38, 1
  %44 = select i1 %43, i64 %38, i64 1
  %45 = and i64 %44, 56
  %46 = add nsw i64 %45, -8
  %47 = lshr exact i64 %46, 3
  %48 = add nuw nsw i64 %47, 1
  %49 = icmp ult i64 %44, 8
  %50 = and i64 %44, 56
  %51 = and i64 %48, 1
  %52 = icmp eq i64 %46, 0
  %53 = sub nuw nsw i64 %48, %51
  %54 = icmp eq i64 %51, 0
  %55 = icmp eq i64 %44, %50
  %56 = icmp eq i8 %10, 1
  %57 = icmp ult i64 %42, 8
  %58 = and i64 %42, -8
  %59 = or i64 %58, 1
  %60 = icmp eq i64 %42, %58
  br label %79

61:                                               ; preds = %7
  %62 = zext i8 %20 to i32
  %63 = load i32, i32* %18, align 4
  br i1 %25, label %64, label %68

64:                                               ; preds = %61
  %65 = mul nsw i32 %63, 2896
  %66 = add nsw i32 %65, 2048
  %67 = ashr i32 %66, 12
  store i32 %67, i32* %18, align 4
  br label %68

68:                                               ; preds = %61, %64
  %69 = phi i32 [ %67, %64 ], [ %63, %61 ]
  %70 = shl i32 %69, 1
  %71 = shl i32 1, %62
  %72 = ashr i32 %71, 1
  %73 = add nsw i32 %70, %72
  %74 = ashr i32 %73, %62
  %75 = icmp slt i32 %74, 32767
  %76 = select i1 %75, i32 %74, i32 32767
  %77 = icmp sgt i32 %76, -32768
  %78 = select i1 %77, i32 %76, i32 -32768
  store i32 %78, i32* %18, align 4
  br label %234

79:                                               ; preds = %231, %29
  %80 = phi i64 [ 0, %29 ], [ %232, %231 ]
  %81 = mul nuw nsw i64 %80, %33
  br i1 %41, label %149, label %82

82:                                               ; preds = %79
  %83 = getelementptr inbounds i32, i32* %18, i64 %81
  br i1 %49, label %138, label %84

84:                                               ; preds = %82
  br i1 %52, label %120, label %85

85:                                               ; preds = %84, %85
  %86 = phi i64 [ %117, %85 ], [ 0, %84 ]
  %87 = phi i64 [ %118, %85 ], [ %53, %84 ]
  %88 = getelementptr inbounds i32, i32* %83, i64 %86
  %89 = bitcast i32* %88 to <4 x i32>*
  %90 = load <4 x i32>, <4 x i32>* %89, align 4
  %91 = getelementptr inbounds i32, i32* %88, i64 4
  %92 = bitcast i32* %91 to <4 x i32>*
  %93 = load <4 x i32>, <4 x i32>* %92, align 4
  %94 = mul nsw <4 x i32> %90, <i32 2896, i32 2896, i32 2896, i32 2896>
  %95 = mul nsw <4 x i32> %93, <i32 2896, i32 2896, i32 2896, i32 2896>
  %96 = add nsw <4 x i32> %94, <i32 2048, i32 2048, i32 2048, i32 2048>
  %97 = add nsw <4 x i32> %95, <i32 2048, i32 2048, i32 2048, i32 2048>
  %98 = ashr <4 x i32> %96, <i32 12, i32 12, i32 12, i32 12>
  %99 = ashr <4 x i32> %97, <i32 12, i32 12, i32 12, i32 12>
  %100 = bitcast i32* %88 to <4 x i32>*
  store <4 x i32> %98, <4 x i32>* %100, align 4
  %101 = bitcast i32* %91 to <4 x i32>*
  store <4 x i32> %99, <4 x i32>* %101, align 4
  %102 = or i64 %86, 8
  %103 = getelementptr inbounds i32, i32* %83, i64 %102
  %104 = bitcast i32* %103 to <4 x i32>*
  %105 = load <4 x i32>, <4 x i32>* %104, align 4
  %106 = getelementptr inbounds i32, i32* %103, i64 4
  %107 = bitcast i32* %106 to <4 x i32>*
  %108 = load <4 x i32>, <4 x i32>* %107, align 4
  %109 = mul nsw <4 x i32> %105, <i32 2896, i32 2896, i32 2896, i32 2896>
  %110 = mul nsw <4 x i32> %108, <i32 2896, i32 2896, i32 2896, i32 2896>
  %111 = add nsw <4 x i32> %109, <i32 2048, i32 2048, i32 2048, i32 2048>
  %112 = add nsw <4 x i32> %110, <i32 2048, i32 2048, i32 2048, i32 2048>
  %113 = ashr <4 x i32> %111, <i32 12, i32 12, i32 12, i32 12>
  %114 = ashr <4 x i32> %112, <i32 12, i32 12, i32 12, i32 12>
  %115 = bitcast i32* %103 to <4 x i32>*
  store <4 x i32> %113, <4 x i32>* %115, align 4
  %116 = bitcast i32* %106 to <4 x i32>*
  store <4 x i32> %114, <4 x i32>* %116, align 4
  %117 = add i64 %86, 16
  %118 = add i64 %87, -2
  %119 = icmp eq i64 %118, 0
  br i1 %119, label %120, label %85, !llvm.loop !120

120:                                              ; preds = %85, %84
  %121 = phi i64 [ 0, %84 ], [ %117, %85 ]
  br i1 %54, label %137, label %122

122:                                              ; preds = %120
  %123 = getelementptr inbounds i32, i32* %83, i64 %121
  %124 = bitcast i32* %123 to <4 x i32>*
  %125 = load <4 x i32>, <4 x i32>* %124, align 4
  %126 = getelementptr inbounds i32, i32* %123, i64 4
  %127 = bitcast i32* %126 to <4 x i32>*
  %128 = load <4 x i32>, <4 x i32>* %127, align 4
  %129 = mul nsw <4 x i32> %125, <i32 2896, i32 2896, i32 2896, i32 2896>
  %130 = mul nsw <4 x i32> %128, <i32 2896, i32 2896, i32 2896, i32 2896>
  %131 = add nsw <4 x i32> %129, <i32 2048, i32 2048, i32 2048, i32 2048>
  %132 = add nsw <4 x i32> %130, <i32 2048, i32 2048, i32 2048, i32 2048>
  %133 = ashr <4 x i32> %131, <i32 12, i32 12, i32 12, i32 12>
  %134 = ashr <4 x i32> %132, <i32 12, i32 12, i32 12, i32 12>
  %135 = bitcast i32* %123 to <4 x i32>*
  store <4 x i32> %133, <4 x i32>* %135, align 4
  %136 = bitcast i32* %126 to <4 x i32>*
  store <4 x i32> %134, <4 x i32>* %136, align 4
  br label %137

137:                                              ; preds = %120, %122
  br i1 %55, label %149, label %138

138:                                              ; preds = %137, %82
  %139 = phi i64 [ 0, %82 ], [ %50, %137 ]
  br label %140

140:                                              ; preds = %138, %140
  %141 = phi i64 [ %147, %140 ], [ %139, %138 ]
  %142 = getelementptr inbounds i32, i32* %83, i64 %141
  %143 = load i32, i32* %142, align 4
  %144 = mul nsw i32 %143, 2896
  %145 = add nsw i32 %144, 2048
  %146 = ashr i32 %145, 12
  store i32 %146, i32* %142, align 4
  %147 = add nuw nsw i64 %141, 1
  %148 = icmp ult i64 %147, %38
  br i1 %148, label %140, label %149, !llvm.loop !121

149:                                              ; preds = %140, %137, %79
  %150 = getelementptr inbounds i32, i32* %18, i64 %81
  %151 = load i32, i32* %150, align 4
  %152 = shl i32 %151, 1
  %153 = add nsw i32 %152, %36
  %154 = ashr i32 %153, %34
  store i32 %154, i32* %150, align 4
  %155 = getelementptr inbounds i32, i32* %150, i64 1
  %156 = load i32, i32* %155, align 4
  %157 = shl i32 %156, 1
  %158 = add nsw i32 %157, %36
  %159 = ashr i32 %158, %34
  store i32 %159, i32* %155, align 4
  %160 = getelementptr inbounds i32, i32* %150, i64 2
  %161 = load i32, i32* %160, align 4
  %162 = shl i32 %161, 1
  %163 = add nsw i32 %162, %36
  %164 = ashr i32 %163, %34
  store i32 %164, i32* %160, align 4
  %165 = getelementptr inbounds i32, i32* %150, i64 3
  %166 = load i32, i32* %165, align 4
  %167 = shl i32 %166, 1
  %168 = add nsw i32 %167, %36
  %169 = ashr i32 %168, %34
  store i32 %169, i32* %165, align 4
  %170 = getelementptr inbounds i32, i32* %150, i64 4
  %171 = load i32, i32* %170, align 4
  %172 = shl i32 %171, 1
  %173 = add nsw i32 %172, %36
  %174 = ashr i32 %173, %34
  store i32 %174, i32* %170, align 4
  %175 = getelementptr inbounds i32, i32* %150, i64 5
  %176 = load i32, i32* %175, align 4
  %177 = shl i32 %176, 1
  %178 = add nsw i32 %177, %36
  %179 = ashr i32 %178, %34
  store i32 %179, i32* %175, align 4
  %180 = getelementptr inbounds i32, i32* %150, i64 6
  %181 = load i32, i32* %180, align 4
  %182 = shl i32 %181, 1
  %183 = add nsw i32 %182, %36
  %184 = ashr i32 %183, %34
  store i32 %184, i32* %180, align 4
  %185 = getelementptr inbounds i32, i32* %150, i64 7
  %186 = load i32, i32* %185, align 4
  %187 = shl i32 %186, 1
  %188 = add nsw i32 %187, %36
  %189 = ashr i32 %188, %34
  store i32 %189, i32* %185, align 4
  br i1 %37, label %231, label %190

190:                                              ; preds = %149
  %191 = icmp slt i32 %154, 32767
  %192 = select i1 %191, i32 %154, i32 32767
  %193 = icmp sgt i32 %192, -32768
  %194 = select i1 %193, i32 %192, i32 -32768
  store i32 %194, i32* %150, align 4
  br i1 %56, label %231, label %195

195:                                              ; preds = %190
  br i1 %57, label %218, label %196

196:                                              ; preds = %195, %196
  %197 = phi i64 [ %215, %196 ], [ 0, %195 ]
  %198 = or i64 %197, 1
  %199 = getelementptr inbounds i32, i32* %150, i64 %198
  %200 = bitcast i32* %199 to <4 x i32>*
  %201 = load <4 x i32>, <4 x i32>* %200, align 4
  %202 = getelementptr inbounds i32, i32* %199, i64 4
  %203 = bitcast i32* %202 to <4 x i32>*
  %204 = load <4 x i32>, <4 x i32>* %203, align 4
  %205 = icmp slt <4 x i32> %201, <i32 32767, i32 32767, i32 32767, i32 32767>
  %206 = icmp slt <4 x i32> %204, <i32 32767, i32 32767, i32 32767, i32 32767>
  %207 = select <4 x i1> %205, <4 x i32> %201, <4 x i32> <i32 32767, i32 32767, i32 32767, i32 32767>
  %208 = select <4 x i1> %206, <4 x i32> %204, <4 x i32> <i32 32767, i32 32767, i32 32767, i32 32767>
  %209 = icmp sgt <4 x i32> %207, <i32 -32768, i32 -32768, i32 -32768, i32 -32768>
  %210 = icmp sgt <4 x i32> %208, <i32 -32768, i32 -32768, i32 -32768, i32 -32768>
  %211 = select <4 x i1> %209, <4 x i32> %207, <4 x i32> <i32 -32768, i32 -32768, i32 -32768, i32 -32768>
  %212 = select <4 x i1> %210, <4 x i32> %208, <4 x i32> <i32 -32768, i32 -32768, i32 -32768, i32 -32768>
  %213 = bitcast i32* %199 to <4 x i32>*
  store <4 x i32> %211, <4 x i32>* %213, align 4
  %214 = bitcast i32* %202 to <4 x i32>*
  store <4 x i32> %212, <4 x i32>* %214, align 4
  %215 = add i64 %197, 8
  %216 = icmp eq i64 %215, %58
  br i1 %216, label %217, label %196, !llvm.loop !122

217:                                              ; preds = %196
  br i1 %60, label %231, label %218

218:                                              ; preds = %217, %195
  %219 = phi i64 [ 1, %195 ], [ %59, %217 ]
  br label %220

220:                                              ; preds = %218, %220
  %221 = phi i64 [ %229, %220 ], [ %219, %218 ]
  %222 = getelementptr inbounds i32, i32* %150, i64 %221
  %223 = load i32, i32* %222, align 4
  %224 = getelementptr inbounds i32, i32* %150, i64 %221
  %225 = icmp slt i32 %223, 32767
  %226 = select i1 %225, i32 %223, i32 32767
  %227 = icmp sgt i32 %226, -32768
  %228 = select i1 %227, i32 %226, i32 -32768
  store i32 %228, i32* %224, align 4
  %229 = add nuw nsw i64 %221, 1
  %230 = icmp eq i64 %229, %33
  br i1 %230, label %231, label %220, !llvm.loop !123

231:                                              ; preds = %220, %190, %217, %149
  %232 = add nuw nsw i64 %80, 1
  %233 = icmp eq i64 %232, %39
  br i1 %233, label %234, label %79

234:                                              ; preds = %231, %27, %68
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN7libgav13dsp12_GLOBAL__N_115TransformLoop_CILi10EitLNS0_11Transform1DE2EXadL_ZNS1_17Identity8DcOnly_CILi10EiEEvPvabibEEXadL_ZNS1_17Identity8Column_CIiEEvS5_aEELb0EEEvNS_13TransformTypeENS_13TransformSizeEiS5_iiS5_(i8 zeroext, i8 zeroext, i32, i8*, i32, i32, i8* nocapture readonly) #0 {
  %8 = alloca [64 x i32], align 16
  %9 = zext i8 %1 to i64
  %10 = getelementptr inbounds [19 x i8], [19 x i8]* @_ZN7libgav115kTransformWidthE, i64 0, i64 %9
  %11 = load i8, i8* %10, align 1
  %12 = zext i8 %11 to i32
  %13 = getelementptr inbounds [19 x i8], [19 x i8]* @_ZN7libgav116kTransformHeightE, i64 0, i64 %9
  %14 = load i8, i8* %13, align 1
  %15 = bitcast i8* %3 to i32*
  %16 = zext i8 %0 to i32
  %17 = shl i32 1, %16
  %18 = and i32 %17, 33104
  %19 = icmp eq i32 %18, 0
  %20 = bitcast [64 x i32]* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 256, i8* nonnull %20) #4
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %20, i8 -86, i64 256, i1 false)
  %21 = icmp eq i8 %11, 0
  br i1 %21, label %47, label %22

22:                                               ; preds = %7
  %23 = zext i8 %11 to i64
  %24 = icmp eq i32 %2, 1
  %25 = getelementptr inbounds [64 x i32], [64 x i32]* %8, i64 0, i64 0
  %26 = getelementptr inbounds [64 x i32], [64 x i32]* %8, i64 0, i64 1
  %27 = getelementptr inbounds [64 x i32], [64 x i32]* %8, i64 0, i64 5
  %28 = getelementptr inbounds [64 x i32], [64 x i32]* %8, i64 0, i64 6
  %29 = getelementptr inbounds [64 x i32], [64 x i32]* %8, i64 0, i64 7
  %30 = icmp eq i8 %14, 0
  %31 = getelementptr inbounds i8, i8* %6, i64 4
  %32 = bitcast i8* %31 to i32*
  %33 = getelementptr inbounds i8, i8* %6, i64 8
  %34 = bitcast i8* %33 to i16**
  %35 = zext i8 %14 to i64
  %36 = sext i32 %5 to i64
  %37 = sext i32 %4 to i64
  %38 = zext i8 %11 to i64
  %39 = add nsw i64 %35, -1
  %40 = and i64 %35, 3
  %41 = icmp ult i64 %39, 3
  %42 = sub nsw i64 %35, %40
  %43 = icmp eq i64 %40, 0
  %44 = bitcast i32* %26 to <4 x i32>*
  %45 = bitcast i32* %26 to <4 x i32>*
  %46 = icmp eq i8 %14, 1
  br label %48

47:                                               ; preds = %128, %7
  call void @llvm.lifetime.end.p0i8(i64 256, i8* nonnull %20) #4
  ret void

48:                                               ; preds = %128, %22
  %49 = phi i64 [ 0, %22 ], [ %129, %128 ]
  %50 = phi i32 [ 0, %22 ], [ %130, %128 ]
  %51 = xor i32 %50, -1
  %52 = add nsw i32 %51, %12
  %53 = trunc i64 %49 to i32
  %54 = select i1 %19, i32 %53, i32 %52
  %55 = sext i32 %54 to i64
  %56 = getelementptr inbounds i32, i32* %15, i64 %55
  br i1 %41, label %82, label %57

57:                                               ; preds = %48, %57
  %58 = phi i64 [ %79, %57 ], [ 0, %48 ]
  %59 = phi i64 [ %80, %57 ], [ %42, %48 ]
  %60 = mul nuw nsw i64 %58, %23
  %61 = getelementptr inbounds i32, i32* %56, i64 %60
  %62 = load i32, i32* %61, align 4
  %63 = getelementptr inbounds [64 x i32], [64 x i32]* %8, i64 0, i64 %58
  store i32 %62, i32* %63, align 16
  %64 = or i64 %58, 1
  %65 = mul nuw nsw i64 %64, %23
  %66 = getelementptr inbounds i32, i32* %56, i64 %65
  %67 = load i32, i32* %66, align 4
  %68 = getelementptr inbounds [64 x i32], [64 x i32]* %8, i64 0, i64 %64
  store i32 %67, i32* %68, align 4
  %69 = or i64 %58, 2
  %70 = mul nuw nsw i64 %69, %23
  %71 = getelementptr inbounds i32, i32* %56, i64 %70
  %72 = load i32, i32* %71, align 4
  %73 = getelementptr inbounds [64 x i32], [64 x i32]* %8, i64 0, i64 %69
  store i32 %72, i32* %73, align 8
  %74 = or i64 %58, 3
  %75 = mul nuw nsw i64 %74, %23
  %76 = getelementptr inbounds i32, i32* %56, i64 %75
  %77 = load i32, i32* %76, align 4
  %78 = getelementptr inbounds [64 x i32], [64 x i32]* %8, i64 0, i64 %74
  store i32 %77, i32* %78, align 4
  %79 = add nuw nsw i64 %58, 4
  %80 = add i64 %59, -4
  %81 = icmp eq i64 %80, 0
  br i1 %81, label %82, label %57

82:                                               ; preds = %57, %48
  %83 = phi i64 [ 0, %48 ], [ %79, %57 ]
  br i1 %43, label %94, label %84

84:                                               ; preds = %82, %84
  %85 = phi i64 [ %91, %84 ], [ %83, %82 ]
  %86 = phi i64 [ %92, %84 ], [ %40, %82 ]
  %87 = mul nuw nsw i64 %85, %23
  %88 = getelementptr inbounds i32, i32* %56, i64 %87
  %89 = load i32, i32* %88, align 4
  %90 = getelementptr inbounds [64 x i32], [64 x i32]* %8, i64 0, i64 %85
  store i32 %89, i32* %90, align 4
  %91 = add nuw nsw i64 %85, 1
  %92 = add i64 %86, -1
  %93 = icmp eq i64 %92, 0
  br i1 %93, label %94, label %84, !llvm.loop !124

94:                                               ; preds = %84, %82
  %95 = load i32, i32* %25, align 16
  %96 = add nsw i32 %95, 4
  %97 = ashr i32 %96, 3
  store i32 %97, i32* %25, align 16
  br i1 %24, label %111, label %98

98:                                               ; preds = %94
  %99 = load <4 x i32>, <4 x i32>* %44, align 4
  %100 = add nsw <4 x i32> %99, <i32 4, i32 4, i32 4, i32 4>
  %101 = ashr <4 x i32> %100, <i32 3, i32 3, i32 3, i32 3>
  store <4 x i32> %101, <4 x i32>* %45, align 4
  %102 = load i32, i32* %27, align 4
  %103 = add nsw i32 %102, 4
  %104 = ashr i32 %103, 3
  store i32 %104, i32* %27, align 4
  %105 = load i32, i32* %28, align 8
  %106 = add nsw i32 %105, 4
  %107 = ashr i32 %106, 3
  store i32 %107, i32* %28, align 8
  %108 = load i32, i32* %29, align 4
  %109 = add nsw i32 %108, 4
  %110 = ashr i32 %109, 3
  store i32 %110, i32* %29, align 4
  br label %111

111:                                              ; preds = %94, %98
  br i1 %30, label %128, label %112

112:                                              ; preds = %111
  %113 = add nsw i64 %49, %37
  %114 = load i32, i32* %32, align 4
  %115 = sext i32 %114 to i64
  %116 = mul nsw i64 %36, %115
  %117 = load i16*, i16** %34, align 8
  %118 = getelementptr inbounds i16, i16* %117, i64 %113
  %119 = getelementptr inbounds i16, i16* %118, i64 %116
  %120 = load i16, i16* %119, align 2
  %121 = zext i16 %120 to i32
  %122 = add nsw i32 %97, %121
  %123 = icmp slt i32 %122, 1023
  %124 = select i1 %123, i32 %122, i32 1023
  %125 = icmp sgt i32 %124, 0
  %126 = select i1 %125, i32 %124, i32 0
  %127 = trunc i32 %126 to i16
  store i16 %127, i16* %119, align 2
  br i1 %46, label %128, label %132

128:                                              ; preds = %132, %112, %111
  %129 = add nuw nsw i64 %49, 1
  %130 = add nuw nsw i32 %50, 1
  %131 = icmp eq i64 %129, %38
  br i1 %131, label %47, label %48

132:                                              ; preds = %112, %132
  %133 = phi i64 [ %151, %132 ], [ 1, %112 ]
  %134 = getelementptr inbounds [64 x i32], [64 x i32]* %8, i64 0, i64 %133
  %135 = load i32, i32* %134, align 4
  %136 = add nsw i64 %133, %36
  %137 = load i32, i32* %32, align 4
  %138 = sext i32 %137 to i64
  %139 = mul nsw i64 %136, %138
  %140 = load i16*, i16** %34, align 8
  %141 = getelementptr inbounds i16, i16* %140, i64 %113
  %142 = getelementptr inbounds i16, i16* %141, i64 %139
  %143 = load i16, i16* %142, align 2
  %144 = zext i16 %143 to i32
  %145 = add nsw i32 %135, %144
  %146 = icmp slt i32 %145, 1023
  %147 = select i1 %146, i32 %145, i32 1023
  %148 = icmp sgt i32 %147, 0
  %149 = select i1 %148, i32 %147, i32 0
  %150 = trunc i32 %149 to i16
  store i16 %150, i16* %142, align 2
  %151 = add nuw nsw i64 %133, 1
  %152 = icmp eq i64 %151, %35
  br i1 %152, label %128, label %132
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN7libgav13dsp12_GLOBAL__N_115TransformLoop_CILi10EitLNS0_11Transform1DE2EXadL_ZNS1_18Identity16DcOnly_CILi10EiEEvPvabibEEXadL_ZNS1_15Identity16Row_CIiEEvS5_aEELb1EEEvNS_13TransformTypeENS_13TransformSizeEiS5_iiS5_(i8 zeroext, i8 zeroext, i32, i8*, i32, i32, i8* nocapture readnone) #0 {
  %8 = zext i8 %1 to i64
  %9 = getelementptr inbounds [19 x i8], [19 x i8]* @_ZN7libgav115kTransformWidthE, i64 0, i64 %8
  %10 = load i8, i8* %9, align 1
  %11 = zext i8 %10 to i32
  %12 = getelementptr inbounds [19 x i8], [19 x i8]* @_ZN7libgav119kTransformWidthLog2E, i64 0, i64 %8
  %13 = load i8, i8* %12, align 1
  %14 = zext i8 %13 to i32
  %15 = getelementptr inbounds [19 x i8], [19 x i8]* @_ZN7libgav120kTransformHeightLog2E, i64 0, i64 %8
  %16 = load i8, i8* %15, align 1
  %17 = zext i8 %16 to i32
  %18 = bitcast i8* %3 to i32*
  %19 = getelementptr inbounds [19 x i8], [19 x i8]* @_ZN7libgav13dsp12_GLOBAL__N_118kTransformRowShiftE, i64 0, i64 %8
  %20 = load i8, i8* %19, align 1
  %21 = sub nsw i32 %14, %17
  %22 = icmp slt i32 %21, 0
  %23 = sub nsw i32 0, %21
  %24 = select i1 %22, i32 %23, i32 %21
  %25 = icmp eq i32 %24, 1
  %26 = icmp eq i32 %2, 1
  br i1 %26, label %62, label %27

27:                                               ; preds = %7
  %28 = icmp sgt i32 %2, 0
  br i1 %28, label %29, label %276

29:                                               ; preds = %27
  %30 = icmp ult i32 %11, 32
  %31 = select i1 %30, i32 %11, i32 32
  %32 = icmp slt i32 %31, 1
  %33 = zext i8 %10 to i64
  %34 = sext i8 %20 to i32
  %35 = shl i32 2048, %34
  %36 = add i32 %35, 2048
  %37 = add nsw i32 %34, 12
  %38 = icmp eq i8 %10, 0
  %39 = zext i32 %31 to i64
  %40 = zext i32 %2 to i64
  %41 = xor i1 %25, true
  %42 = or i1 %32, %41
  %43 = add nsw i64 %33, -1
  %44 = icmp ugt i64 %39, 1
  %45 = select i1 %44, i64 %39, i64 1
  %46 = and i64 %45, 56
  %47 = add nsw i64 %46, -8
  %48 = lshr exact i64 %47, 3
  %49 = add nuw nsw i64 %48, 1
  %50 = icmp ult i64 %45, 8
  %51 = and i64 %45, 56
  %52 = and i64 %49, 1
  %53 = icmp eq i64 %47, 0
  %54 = sub nuw nsw i64 %49, %52
  %55 = icmp eq i64 %52, 0
  %56 = icmp eq i64 %45, %51
  %57 = icmp eq i8 %10, 1
  %58 = icmp ult i64 %43, 8
  %59 = and i64 %43, -8
  %60 = or i64 %59, 1
  %61 = icmp eq i64 %43, %59
  br label %81

62:                                               ; preds = %7
  %63 = zext i8 %20 to i32
  %64 = load i32, i32* %18, align 4
  br i1 %25, label %65, label %69

65:                                               ; preds = %62
  %66 = mul nsw i32 %64, 2896
  %67 = add nsw i32 %66, 2048
  %68 = ashr i32 %67, 12
  store i32 %68, i32* %18, align 4
  br label %69

69:                                               ; preds = %62, %65
  %70 = phi i32 [ %68, %65 ], [ %64, %62 ]
  %71 = shl i32 2048, %63
  %72 = add i32 %71, 2048
  %73 = mul nsw i32 %70, 11586
  %74 = add nsw i32 %72, %73
  %75 = add nuw nsw i32 %63, 12
  %76 = ashr i32 %74, %75
  %77 = icmp slt i32 %76, 32767
  %78 = select i1 %77, i32 %76, i32 32767
  %79 = icmp sgt i32 %78, -32768
  %80 = select i1 %79, i32 %78, i32 -32768
  store i32 %80, i32* %18, align 4
  br label %276

81:                                               ; preds = %273, %29
  %82 = phi i64 [ 0, %29 ], [ %274, %273 ]
  %83 = mul nuw nsw i64 %82, %33
  br i1 %42, label %151, label %84

84:                                               ; preds = %81
  %85 = getelementptr inbounds i32, i32* %18, i64 %83
  br i1 %50, label %140, label %86

86:                                               ; preds = %84
  br i1 %53, label %122, label %87

87:                                               ; preds = %86, %87
  %88 = phi i64 [ %119, %87 ], [ 0, %86 ]
  %89 = phi i64 [ %120, %87 ], [ %54, %86 ]
  %90 = getelementptr inbounds i32, i32* %85, i64 %88
  %91 = bitcast i32* %90 to <4 x i32>*
  %92 = load <4 x i32>, <4 x i32>* %91, align 4
  %93 = getelementptr inbounds i32, i32* %90, i64 4
  %94 = bitcast i32* %93 to <4 x i32>*
  %95 = load <4 x i32>, <4 x i32>* %94, align 4
  %96 = mul nsw <4 x i32> %92, <i32 2896, i32 2896, i32 2896, i32 2896>
  %97 = mul nsw <4 x i32> %95, <i32 2896, i32 2896, i32 2896, i32 2896>
  %98 = add nsw <4 x i32> %96, <i32 2048, i32 2048, i32 2048, i32 2048>
  %99 = add nsw <4 x i32> %97, <i32 2048, i32 2048, i32 2048, i32 2048>
  %100 = ashr <4 x i32> %98, <i32 12, i32 12, i32 12, i32 12>
  %101 = ashr <4 x i32> %99, <i32 12, i32 12, i32 12, i32 12>
  %102 = bitcast i32* %90 to <4 x i32>*
  store <4 x i32> %100, <4 x i32>* %102, align 4
  %103 = bitcast i32* %93 to <4 x i32>*
  store <4 x i32> %101, <4 x i32>* %103, align 4
  %104 = or i64 %88, 8
  %105 = getelementptr inbounds i32, i32* %85, i64 %104
  %106 = bitcast i32* %105 to <4 x i32>*
  %107 = load <4 x i32>, <4 x i32>* %106, align 4
  %108 = getelementptr inbounds i32, i32* %105, i64 4
  %109 = bitcast i32* %108 to <4 x i32>*
  %110 = load <4 x i32>, <4 x i32>* %109, align 4
  %111 = mul nsw <4 x i32> %107, <i32 2896, i32 2896, i32 2896, i32 2896>
  %112 = mul nsw <4 x i32> %110, <i32 2896, i32 2896, i32 2896, i32 2896>
  %113 = add nsw <4 x i32> %111, <i32 2048, i32 2048, i32 2048, i32 2048>
  %114 = add nsw <4 x i32> %112, <i32 2048, i32 2048, i32 2048, i32 2048>
  %115 = ashr <4 x i32> %113, <i32 12, i32 12, i32 12, i32 12>
  %116 = ashr <4 x i32> %114, <i32 12, i32 12, i32 12, i32 12>
  %117 = bitcast i32* %105 to <4 x i32>*
  store <4 x i32> %115, <4 x i32>* %117, align 4
  %118 = bitcast i32* %108 to <4 x i32>*
  store <4 x i32> %116, <4 x i32>* %118, align 4
  %119 = add i64 %88, 16
  %120 = add i64 %89, -2
  %121 = icmp eq i64 %120, 0
  br i1 %121, label %122, label %87, !llvm.loop !125

122:                                              ; preds = %87, %86
  %123 = phi i64 [ 0, %86 ], [ %119, %87 ]
  br i1 %55, label %139, label %124

124:                                              ; preds = %122
  %125 = getelementptr inbounds i32, i32* %85, i64 %123
  %126 = bitcast i32* %125 to <4 x i32>*
  %127 = load <4 x i32>, <4 x i32>* %126, align 4
  %128 = getelementptr inbounds i32, i32* %125, i64 4
  %129 = bitcast i32* %128 to <4 x i32>*
  %130 = load <4 x i32>, <4 x i32>* %129, align 4
  %131 = mul nsw <4 x i32> %127, <i32 2896, i32 2896, i32 2896, i32 2896>
  %132 = mul nsw <4 x i32> %130, <i32 2896, i32 2896, i32 2896, i32 2896>
  %133 = add nsw <4 x i32> %131, <i32 2048, i32 2048, i32 2048, i32 2048>
  %134 = add nsw <4 x i32> %132, <i32 2048, i32 2048, i32 2048, i32 2048>
  %135 = ashr <4 x i32> %133, <i32 12, i32 12, i32 12, i32 12>
  %136 = ashr <4 x i32> %134, <i32 12, i32 12, i32 12, i32 12>
  %137 = bitcast i32* %125 to <4 x i32>*
  store <4 x i32> %135, <4 x i32>* %137, align 4
  %138 = bitcast i32* %128 to <4 x i32>*
  store <4 x i32> %136, <4 x i32>* %138, align 4
  br label %139

139:                                              ; preds = %122, %124
  br i1 %56, label %151, label %140

140:                                              ; preds = %139, %84
  %141 = phi i64 [ 0, %84 ], [ %51, %139 ]
  br label %142

142:                                              ; preds = %140, %142
  %143 = phi i64 [ %149, %142 ], [ %141, %140 ]
  %144 = getelementptr inbounds i32, i32* %85, i64 %143
  %145 = load i32, i32* %144, align 4
  %146 = mul nsw i32 %145, 2896
  %147 = add nsw i32 %146, 2048
  %148 = ashr i32 %147, 12
  store i32 %148, i32* %144, align 4
  %149 = add nuw nsw i64 %143, 1
  %150 = icmp ult i64 %149, %39
  br i1 %150, label %142, label %151, !llvm.loop !126

151:                                              ; preds = %142, %139, %81
  %152 = getelementptr inbounds i32, i32* %18, i64 %83
  %153 = load i32, i32* %152, align 4
  %154 = mul nsw i32 %153, 11586
  %155 = add nsw i32 %154, %36
  %156 = ashr i32 %155, %37
  store i32 %156, i32* %152, align 4
  %157 = getelementptr inbounds i32, i32* %152, i64 1
  %158 = load i32, i32* %157, align 4
  %159 = mul nsw i32 %158, 11586
  %160 = add nsw i32 %159, %36
  %161 = ashr i32 %160, %37
  store i32 %161, i32* %157, align 4
  %162 = getelementptr inbounds i32, i32* %152, i64 2
  %163 = load i32, i32* %162, align 4
  %164 = mul nsw i32 %163, 11586
  %165 = add nsw i32 %164, %36
  %166 = ashr i32 %165, %37
  store i32 %166, i32* %162, align 4
  %167 = getelementptr inbounds i32, i32* %152, i64 3
  %168 = load i32, i32* %167, align 4
  %169 = mul nsw i32 %168, 11586
  %170 = add nsw i32 %169, %36
  %171 = ashr i32 %170, %37
  store i32 %171, i32* %167, align 4
  %172 = getelementptr inbounds i32, i32* %152, i64 4
  %173 = load i32, i32* %172, align 4
  %174 = mul nsw i32 %173, 11586
  %175 = add nsw i32 %174, %36
  %176 = ashr i32 %175, %37
  store i32 %176, i32* %172, align 4
  %177 = getelementptr inbounds i32, i32* %152, i64 5
  %178 = load i32, i32* %177, align 4
  %179 = mul nsw i32 %178, 11586
  %180 = add nsw i32 %179, %36
  %181 = ashr i32 %180, %37
  store i32 %181, i32* %177, align 4
  %182 = getelementptr inbounds i32, i32* %152, i64 6
  %183 = load i32, i32* %182, align 4
  %184 = mul nsw i32 %183, 11586
  %185 = add nsw i32 %184, %36
  %186 = ashr i32 %185, %37
  store i32 %186, i32* %182, align 4
  %187 = getelementptr inbounds i32, i32* %152, i64 7
  %188 = load i32, i32* %187, align 4
  %189 = mul nsw i32 %188, 11586
  %190 = add nsw i32 %189, %36
  %191 = ashr i32 %190, %37
  store i32 %191, i32* %187, align 4
  %192 = getelementptr inbounds i32, i32* %152, i64 8
  %193 = load i32, i32* %192, align 4
  %194 = mul nsw i32 %193, 11586
  %195 = add nsw i32 %194, %36
  %196 = ashr i32 %195, %37
  store i32 %196, i32* %192, align 4
  %197 = getelementptr inbounds i32, i32* %152, i64 9
  %198 = load i32, i32* %197, align 4
  %199 = mul nsw i32 %198, 11586
  %200 = add nsw i32 %199, %36
  %201 = ashr i32 %200, %37
  store i32 %201, i32* %197, align 4
  %202 = getelementptr inbounds i32, i32* %152, i64 10
  %203 = load i32, i32* %202, align 4
  %204 = mul nsw i32 %203, 11586
  %205 = add nsw i32 %204, %36
  %206 = ashr i32 %205, %37
  store i32 %206, i32* %202, align 4
  %207 = getelementptr inbounds i32, i32* %152, i64 11
  %208 = load i32, i32* %207, align 4
  %209 = mul nsw i32 %208, 11586
  %210 = add nsw i32 %209, %36
  %211 = ashr i32 %210, %37
  store i32 %211, i32* %207, align 4
  %212 = getelementptr inbounds i32, i32* %152, i64 12
  %213 = load i32, i32* %212, align 4
  %214 = mul nsw i32 %213, 11586
  %215 = add nsw i32 %214, %36
  %216 = ashr i32 %215, %37
  store i32 %216, i32* %212, align 4
  %217 = getelementptr inbounds i32, i32* %152, i64 13
  %218 = load i32, i32* %217, align 4
  %219 = mul nsw i32 %218, 11586
  %220 = add nsw i32 %219, %36
  %221 = ashr i32 %220, %37
  store i32 %221, i32* %217, align 4
  %222 = getelementptr inbounds i32, i32* %152, i64 14
  %223 = load i32, i32* %222, align 4
  %224 = mul nsw i32 %223, 11586
  %225 = add nsw i32 %224, %36
  %226 = ashr i32 %225, %37
  store i32 %226, i32* %222, align 4
  %227 = getelementptr inbounds i32, i32* %152, i64 15
  %228 = load i32, i32* %227, align 4
  %229 = mul nsw i32 %228, 11586
  %230 = add nsw i32 %229, %36
  %231 = ashr i32 %230, %37
  store i32 %231, i32* %227, align 4
  br i1 %38, label %273, label %232

232:                                              ; preds = %151
  %233 = icmp slt i32 %156, 32767
  %234 = select i1 %233, i32 %156, i32 32767
  %235 = icmp sgt i32 %234, -32768
  %236 = select i1 %235, i32 %234, i32 -32768
  store i32 %236, i32* %152, align 4
  br i1 %57, label %273, label %237

237:                                              ; preds = %232
  br i1 %58, label %260, label %238

238:                                              ; preds = %237, %238
  %239 = phi i64 [ %257, %238 ], [ 0, %237 ]
  %240 = or i64 %239, 1
  %241 = getelementptr inbounds i32, i32* %152, i64 %240
  %242 = bitcast i32* %241 to <4 x i32>*
  %243 = load <4 x i32>, <4 x i32>* %242, align 4
  %244 = getelementptr inbounds i32, i32* %241, i64 4
  %245 = bitcast i32* %244 to <4 x i32>*
  %246 = load <4 x i32>, <4 x i32>* %245, align 4
  %247 = icmp slt <4 x i32> %243, <i32 32767, i32 32767, i32 32767, i32 32767>
  %248 = icmp slt <4 x i32> %246, <i32 32767, i32 32767, i32 32767, i32 32767>
  %249 = select <4 x i1> %247, <4 x i32> %243, <4 x i32> <i32 32767, i32 32767, i32 32767, i32 32767>
  %250 = select <4 x i1> %248, <4 x i32> %246, <4 x i32> <i32 32767, i32 32767, i32 32767, i32 32767>
  %251 = icmp sgt <4 x i32> %249, <i32 -32768, i32 -32768, i32 -32768, i32 -32768>
  %252 = icmp sgt <4 x i32> %250, <i32 -32768, i32 -32768, i32 -32768, i32 -32768>
  %253 = select <4 x i1> %251, <4 x i32> %249, <4 x i32> <i32 -32768, i32 -32768, i32 -32768, i32 -32768>
  %254 = select <4 x i1> %252, <4 x i32> %250, <4 x i32> <i32 -32768, i32 -32768, i32 -32768, i32 -32768>
  %255 = bitcast i32* %241 to <4 x i32>*
  store <4 x i32> %253, <4 x i32>* %255, align 4
  %256 = bitcast i32* %244 to <4 x i32>*
  store <4 x i32> %254, <4 x i32>* %256, align 4
  %257 = add i64 %239, 8
  %258 = icmp eq i64 %257, %59
  br i1 %258, label %259, label %238, !llvm.loop !127

259:                                              ; preds = %238
  br i1 %61, label %273, label %260

260:                                              ; preds = %259, %237
  %261 = phi i64 [ 1, %237 ], [ %60, %259 ]
  br label %262

262:                                              ; preds = %260, %262
  %263 = phi i64 [ %271, %262 ], [ %261, %260 ]
  %264 = getelementptr inbounds i32, i32* %152, i64 %263
  %265 = load i32, i32* %264, align 4
  %266 = getelementptr inbounds i32, i32* %152, i64 %263
  %267 = icmp slt i32 %265, 32767
  %268 = select i1 %267, i32 %265, i32 32767
  %269 = icmp sgt i32 %268, -32768
  %270 = select i1 %269, i32 %268, i32 -32768
  store i32 %270, i32* %266, align 4
  %271 = add nuw nsw i64 %263, 1
  %272 = icmp eq i64 %271, %33
  br i1 %272, label %273, label %262, !llvm.loop !128

273:                                              ; preds = %262, %232, %259, %151
  %274 = add nuw nsw i64 %82, 1
  %275 = icmp eq i64 %274, %40
  br i1 %275, label %276, label %81

276:                                              ; preds = %273, %27, %69
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN7libgav13dsp12_GLOBAL__N_115TransformLoop_CILi10EitLNS0_11Transform1DE2EXadL_ZNS1_18Identity16DcOnly_CILi10EiEEvPvabibEEXadL_ZNS1_18Identity16Column_CIiEEvS5_aEELb0EEEvNS_13TransformTypeENS_13TransformSizeEiS5_iiS5_(i8 zeroext, i8 zeroext, i32, i8*, i32, i32, i8* nocapture readonly) #0 {
  %8 = alloca [64 x i32], align 16
  %9 = zext i8 %1 to i64
  %10 = getelementptr inbounds [19 x i8], [19 x i8]* @_ZN7libgav115kTransformWidthE, i64 0, i64 %9
  %11 = load i8, i8* %10, align 1
  %12 = zext i8 %11 to i32
  %13 = getelementptr inbounds [19 x i8], [19 x i8]* @_ZN7libgav116kTransformHeightE, i64 0, i64 %9
  %14 = load i8, i8* %13, align 1
  %15 = bitcast i8* %3 to i32*
  %16 = zext i8 %0 to i32
  %17 = shl i32 1, %16
  %18 = and i32 %17, 33104
  %19 = icmp eq i32 %18, 0
  %20 = bitcast [64 x i32]* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 256, i8* nonnull %20) #4
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %20, i8 -86, i64 256, i1 false)
  %21 = icmp eq i8 %11, 0
  br i1 %21, label %53, label %22

22:                                               ; preds = %7
  %23 = zext i8 %11 to i64
  %24 = icmp eq i32 %2, 1
  %25 = getelementptr inbounds [64 x i32], [64 x i32]* %8, i64 0, i64 0
  %26 = getelementptr inbounds [64 x i32], [64 x i32]* %8, i64 0, i64 1
  %27 = getelementptr inbounds [64 x i32], [64 x i32]* %8, i64 0, i64 5
  %28 = getelementptr inbounds [64 x i32], [64 x i32]* %8, i64 0, i64 9
  %29 = getelementptr inbounds [64 x i32], [64 x i32]* %8, i64 0, i64 13
  %30 = getelementptr inbounds [64 x i32], [64 x i32]* %8, i64 0, i64 14
  %31 = getelementptr inbounds [64 x i32], [64 x i32]* %8, i64 0, i64 15
  %32 = icmp eq i8 %14, 0
  %33 = getelementptr inbounds i8, i8* %6, i64 4
  %34 = bitcast i8* %33 to i32*
  %35 = getelementptr inbounds i8, i8* %6, i64 8
  %36 = bitcast i8* %35 to i16**
  %37 = zext i8 %14 to i64
  %38 = sext i32 %5 to i64
  %39 = sext i32 %4 to i64
  %40 = zext i8 %11 to i64
  %41 = add nsw i64 %37, -1
  %42 = and i64 %37, 3
  %43 = icmp ult i64 %41, 3
  %44 = sub nsw i64 %37, %42
  %45 = icmp eq i64 %42, 0
  %46 = bitcast i32* %26 to <4 x i32>*
  %47 = bitcast i32* %26 to <4 x i32>*
  %48 = bitcast i32* %27 to <4 x i32>*
  %49 = bitcast i32* %27 to <4 x i32>*
  %50 = bitcast i32* %28 to <4 x i32>*
  %51 = bitcast i32* %28 to <4 x i32>*
  %52 = icmp eq i8 %14, 1
  br label %54

53:                                               ; preds = %147, %7
  call void @llvm.lifetime.end.p0i8(i64 256, i8* nonnull %20) #4
  ret void

54:                                               ; preds = %147, %22
  %55 = phi i64 [ 0, %22 ], [ %148, %147 ]
  %56 = phi i32 [ 0, %22 ], [ %149, %147 ]
  %57 = xor i32 %56, -1
  %58 = add nsw i32 %57, %12
  %59 = trunc i64 %55 to i32
  %60 = select i1 %19, i32 %59, i32 %58
  %61 = sext i32 %60 to i64
  %62 = getelementptr inbounds i32, i32* %15, i64 %61
  br i1 %43, label %88, label %63

63:                                               ; preds = %54, %63
  %64 = phi i64 [ %85, %63 ], [ 0, %54 ]
  %65 = phi i64 [ %86, %63 ], [ %44, %54 ]
  %66 = mul nuw nsw i64 %64, %23
  %67 = getelementptr inbounds i32, i32* %62, i64 %66
  %68 = load i32, i32* %67, align 4
  %69 = getelementptr inbounds [64 x i32], [64 x i32]* %8, i64 0, i64 %64
  store i32 %68, i32* %69, align 16
  %70 = or i64 %64, 1
  %71 = mul nuw nsw i64 %70, %23
  %72 = getelementptr inbounds i32, i32* %62, i64 %71
  %73 = load i32, i32* %72, align 4
  %74 = getelementptr inbounds [64 x i32], [64 x i32]* %8, i64 0, i64 %70
  store i32 %73, i32* %74, align 4
  %75 = or i64 %64, 2
  %76 = mul nuw nsw i64 %75, %23
  %77 = getelementptr inbounds i32, i32* %62, i64 %76
  %78 = load i32, i32* %77, align 4
  %79 = getelementptr inbounds [64 x i32], [64 x i32]* %8, i64 0, i64 %75
  store i32 %78, i32* %79, align 8
  %80 = or i64 %64, 3
  %81 = mul nuw nsw i64 %80, %23
  %82 = getelementptr inbounds i32, i32* %62, i64 %81
  %83 = load i32, i32* %82, align 4
  %84 = getelementptr inbounds [64 x i32], [64 x i32]* %8, i64 0, i64 %80
  store i32 %83, i32* %84, align 4
  %85 = add nuw nsw i64 %64, 4
  %86 = add i64 %65, -4
  %87 = icmp eq i64 %86, 0
  br i1 %87, label %88, label %63

88:                                               ; preds = %63, %54
  %89 = phi i64 [ 0, %54 ], [ %85, %63 ]
  br i1 %45, label %100, label %90

90:                                               ; preds = %88, %90
  %91 = phi i64 [ %97, %90 ], [ %89, %88 ]
  %92 = phi i64 [ %98, %90 ], [ %42, %88 ]
  %93 = mul nuw nsw i64 %91, %23
  %94 = getelementptr inbounds i32, i32* %62, i64 %93
  %95 = load i32, i32* %94, align 4
  %96 = getelementptr inbounds [64 x i32], [64 x i32]* %8, i64 0, i64 %91
  store i32 %95, i32* %96, align 4
  %97 = add nuw nsw i64 %91, 1
  %98 = add i64 %92, -1
  %99 = icmp eq i64 %98, 0
  br i1 %99, label %100, label %90, !llvm.loop !129

100:                                              ; preds = %90, %88
  %101 = load i32, i32* %25, align 16
  %102 = mul nsw i32 %101, 11586
  %103 = add nsw i32 %102, 34816
  %104 = ashr i32 %103, 16
  store i32 %104, i32* %25, align 16
  br i1 %24, label %130, label %105

105:                                              ; preds = %100
  %106 = load <4 x i32>, <4 x i32>* %46, align 4
  %107 = mul nsw <4 x i32> %106, <i32 11586, i32 11586, i32 11586, i32 11586>
  %108 = add nsw <4 x i32> %107, <i32 34816, i32 34816, i32 34816, i32 34816>
  %109 = ashr <4 x i32> %108, <i32 16, i32 16, i32 16, i32 16>
  store <4 x i32> %109, <4 x i32>* %47, align 4
  %110 = load <4 x i32>, <4 x i32>* %48, align 4
  %111 = mul nsw <4 x i32> %110, <i32 11586, i32 11586, i32 11586, i32 11586>
  %112 = add nsw <4 x i32> %111, <i32 34816, i32 34816, i32 34816, i32 34816>
  %113 = ashr <4 x i32> %112, <i32 16, i32 16, i32 16, i32 16>
  store <4 x i32> %113, <4 x i32>* %49, align 4
  %114 = load <4 x i32>, <4 x i32>* %50, align 4
  %115 = mul nsw <4 x i32> %114, <i32 11586, i32 11586, i32 11586, i32 11586>
  %116 = add nsw <4 x i32> %115, <i32 34816, i32 34816, i32 34816, i32 34816>
  %117 = ashr <4 x i32> %116, <i32 16, i32 16, i32 16, i32 16>
  store <4 x i32> %117, <4 x i32>* %51, align 4
  %118 = load i32, i32* %29, align 4
  %119 = mul nsw i32 %118, 11586
  %120 = add nsw i32 %119, 34816
  %121 = ashr i32 %120, 16
  store i32 %121, i32* %29, align 4
  %122 = load i32, i32* %30, align 8
  %123 = mul nsw i32 %122, 11586
  %124 = add nsw i32 %123, 34816
  %125 = ashr i32 %124, 16
  store i32 %125, i32* %30, align 8
  %126 = load i32, i32* %31, align 4
  %127 = mul nsw i32 %126, 11586
  %128 = add nsw i32 %127, 34816
  %129 = ashr i32 %128, 16
  store i32 %129, i32* %31, align 4
  br label %130

130:                                              ; preds = %100, %105
  br i1 %32, label %147, label %131

131:                                              ; preds = %130
  %132 = add nsw i64 %55, %39
  %133 = load i32, i32* %34, align 4
  %134 = sext i32 %133 to i64
  %135 = mul nsw i64 %38, %134
  %136 = load i16*, i16** %36, align 8
  %137 = getelementptr inbounds i16, i16* %136, i64 %132
  %138 = getelementptr inbounds i16, i16* %137, i64 %135
  %139 = load i16, i16* %138, align 2
  %140 = zext i16 %139 to i32
  %141 = add nsw i32 %104, %140
  %142 = icmp slt i32 %141, 1023
  %143 = select i1 %142, i32 %141, i32 1023
  %144 = icmp sgt i32 %143, 0
  %145 = select i1 %144, i32 %143, i32 0
  %146 = trunc i32 %145 to i16
  store i16 %146, i16* %138, align 2
  br i1 %52, label %147, label %151

147:                                              ; preds = %151, %131, %130
  %148 = add nuw nsw i64 %55, 1
  %149 = add nuw nsw i32 %56, 1
  %150 = icmp eq i64 %148, %40
  br i1 %150, label %53, label %54

151:                                              ; preds = %131, %151
  %152 = phi i64 [ %170, %151 ], [ 1, %131 ]
  %153 = getelementptr inbounds [64 x i32], [64 x i32]* %8, i64 0, i64 %152
  %154 = load i32, i32* %153, align 4
  %155 = add nsw i64 %152, %38
  %156 = load i32, i32* %34, align 4
  %157 = sext i32 %156 to i64
  %158 = mul nsw i64 %155, %157
  %159 = load i16*, i16** %36, align 8
  %160 = getelementptr inbounds i16, i16* %159, i64 %132
  %161 = getelementptr inbounds i16, i16* %160, i64 %158
  %162 = load i16, i16* %161, align 2
  %163 = zext i16 %162 to i32
  %164 = add nsw i32 %154, %163
  %165 = icmp slt i32 %164, 1023
  %166 = select i1 %165, i32 %164, i32 1023
  %167 = icmp sgt i32 %166, 0
  %168 = select i1 %167, i32 %166, i32 0
  %169 = trunc i32 %168 to i16
  store i16 %169, i16* %161, align 2
  %170 = add nuw nsw i64 %152, 1
  %171 = icmp eq i64 %170, %37
  br i1 %171, label %147, label %151
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN7libgav13dsp12_GLOBAL__N_115TransformLoop_CILi10EitLNS0_11Transform1DE2EXadL_ZNS1_18Identity32DcOnly_CILi10EiEEvPvabibEEXadL_ZNS1_15Identity32Row_CIiEEvS5_aEELb1EEEvNS_13TransformTypeENS_13TransformSizeEiS5_iiS5_(i8 zeroext, i8 zeroext, i32, i8*, i32, i32, i8* nocapture readnone) #0 {
  %8 = zext i8 %1 to i64
  %9 = getelementptr inbounds [19 x i8], [19 x i8]* @_ZN7libgav115kTransformWidthE, i64 0, i64 %8
  %10 = load i8, i8* %9, align 1
  %11 = zext i8 %10 to i32
  %12 = getelementptr inbounds [19 x i8], [19 x i8]* @_ZN7libgav119kTransformWidthLog2E, i64 0, i64 %8
  %13 = load i8, i8* %12, align 1
  %14 = zext i8 %13 to i32
  %15 = getelementptr inbounds [19 x i8], [19 x i8]* @_ZN7libgav120kTransformHeightLog2E, i64 0, i64 %8
  %16 = load i8, i8* %15, align 1
  %17 = zext i8 %16 to i32
  %18 = bitcast i8* %3 to i32*
  %19 = getelementptr inbounds [19 x i8], [19 x i8]* @_ZN7libgav13dsp12_GLOBAL__N_118kTransformRowShiftE, i64 0, i64 %8
  %20 = load i8, i8* %19, align 1
  %21 = sub nsw i32 %14, %17
  %22 = icmp slt i32 %21, 0
  %23 = sub nsw i32 0, %21
  %24 = select i1 %22, i32 %23, i32 %21
  %25 = icmp eq i32 %24, 1
  %26 = icmp eq i32 %2, 1
  br i1 %26, label %70, label %27

27:                                               ; preds = %7
  %28 = icmp sgt i32 %2, 0
  br i1 %28, label %29, label %291

29:                                               ; preds = %27
  %30 = icmp ult i32 %11, 32
  %31 = select i1 %30, i32 %11, i32 32
  %32 = icmp slt i32 %31, 1
  %33 = zext i8 %10 to i64
  %34 = sext i8 %20 to i32
  %35 = shl i32 1, %34
  %36 = ashr i32 %35, 1
  %37 = icmp eq i8 %10, 0
  %38 = zext i32 %31 to i64
  %39 = zext i32 %2 to i64
  %40 = xor i1 %25, true
  %41 = or i1 %32, %40
  %42 = icmp ugt i64 %38, 1
  %43 = select i1 %42, i64 %38, i64 1
  %44 = and i64 %43, 56
  %45 = add nsw i64 %44, -8
  %46 = lshr exact i64 %45, 3
  %47 = add nuw nsw i64 %46, 1
  %48 = and i64 %33, 248
  %49 = add nsw i64 %48, -8
  %50 = lshr exact i64 %49, 3
  %51 = add nuw nsw i64 %50, 1
  %52 = icmp ult i64 %43, 8
  %53 = and i64 %43, 56
  %54 = and i64 %47, 1
  %55 = icmp eq i64 %45, 0
  %56 = sub nuw nsw i64 %47, %54
  %57 = icmp eq i64 %54, 0
  %58 = icmp eq i64 %43, %53
  %59 = insertelement <4 x i32> undef, i32 %36, i32 0
  %60 = shufflevector <4 x i32> %59, <4 x i32> undef, <4 x i32> zeroinitializer
  %61 = insertelement <4 x i32> undef, i32 %34, i32 0
  %62 = shufflevector <4 x i32> %61, <4 x i32> undef, <4 x i32> zeroinitializer
  %63 = icmp ult i8 %10, 8
  %64 = and i64 %33, 248
  %65 = and i64 %51, 1
  %66 = icmp eq i64 %49, 0
  %67 = sub nuw nsw i64 %51, %65
  %68 = icmp eq i64 %65, 0
  %69 = icmp eq i64 %64, %33
  br label %88

70:                                               ; preds = %7
  %71 = zext i8 %20 to i32
  %72 = load i32, i32* %18, align 4
  br i1 %25, label %73, label %77

73:                                               ; preds = %70
  %74 = mul nsw i32 %72, 2896
  %75 = add nsw i32 %74, 2048
  %76 = ashr i32 %75, 12
  store i32 %76, i32* %18, align 4
  br label %77

77:                                               ; preds = %70, %73
  %78 = phi i32 [ %76, %73 ], [ %72, %70 ]
  %79 = shl i32 %78, 2
  %80 = shl i32 1, %71
  %81 = ashr i32 %80, 1
  %82 = add nsw i32 %79, %81
  %83 = ashr i32 %82, %71
  %84 = icmp slt i32 %83, 32767
  %85 = select i1 %84, i32 %83, i32 32767
  %86 = icmp sgt i32 %85, -32768
  %87 = select i1 %86, i32 %85, i32 -32768
  store i32 %87, i32* %18, align 4
  br label %291

88:                                               ; preds = %288, %29
  %89 = phi i64 [ 0, %29 ], [ %289, %288 ]
  %90 = mul nuw nsw i64 %89, %33
  br i1 %41, label %158, label %91

91:                                               ; preds = %88
  %92 = getelementptr inbounds i32, i32* %18, i64 %90
  br i1 %52, label %147, label %93

93:                                               ; preds = %91
  br i1 %55, label %129, label %94

94:                                               ; preds = %93, %94
  %95 = phi i64 [ %126, %94 ], [ 0, %93 ]
  %96 = phi i64 [ %127, %94 ], [ %56, %93 ]
  %97 = getelementptr inbounds i32, i32* %92, i64 %95
  %98 = bitcast i32* %97 to <4 x i32>*
  %99 = load <4 x i32>, <4 x i32>* %98, align 4
  %100 = getelementptr inbounds i32, i32* %97, i64 4
  %101 = bitcast i32* %100 to <4 x i32>*
  %102 = load <4 x i32>, <4 x i32>* %101, align 4
  %103 = mul nsw <4 x i32> %99, <i32 2896, i32 2896, i32 2896, i32 2896>
  %104 = mul nsw <4 x i32> %102, <i32 2896, i32 2896, i32 2896, i32 2896>
  %105 = add nsw <4 x i32> %103, <i32 2048, i32 2048, i32 2048, i32 2048>
  %106 = add nsw <4 x i32> %104, <i32 2048, i32 2048, i32 2048, i32 2048>
  %107 = ashr <4 x i32> %105, <i32 12, i32 12, i32 12, i32 12>
  %108 = ashr <4 x i32> %106, <i32 12, i32 12, i32 12, i32 12>
  %109 = bitcast i32* %97 to <4 x i32>*
  store <4 x i32> %107, <4 x i32>* %109, align 4
  %110 = bitcast i32* %100 to <4 x i32>*
  store <4 x i32> %108, <4 x i32>* %110, align 4
  %111 = or i64 %95, 8
  %112 = getelementptr inbounds i32, i32* %92, i64 %111
  %113 = bitcast i32* %112 to <4 x i32>*
  %114 = load <4 x i32>, <4 x i32>* %113, align 4
  %115 = getelementptr inbounds i32, i32* %112, i64 4
  %116 = bitcast i32* %115 to <4 x i32>*
  %117 = load <4 x i32>, <4 x i32>* %116, align 4
  %118 = mul nsw <4 x i32> %114, <i32 2896, i32 2896, i32 2896, i32 2896>
  %119 = mul nsw <4 x i32> %117, <i32 2896, i32 2896, i32 2896, i32 2896>
  %120 = add nsw <4 x i32> %118, <i32 2048, i32 2048, i32 2048, i32 2048>
  %121 = add nsw <4 x i32> %119, <i32 2048, i32 2048, i32 2048, i32 2048>
  %122 = ashr <4 x i32> %120, <i32 12, i32 12, i32 12, i32 12>
  %123 = ashr <4 x i32> %121, <i32 12, i32 12, i32 12, i32 12>
  %124 = bitcast i32* %112 to <4 x i32>*
  store <4 x i32> %122, <4 x i32>* %124, align 4
  %125 = bitcast i32* %115 to <4 x i32>*
  store <4 x i32> %123, <4 x i32>* %125, align 4
  %126 = add i64 %95, 16
  %127 = add i64 %96, -2
  %128 = icmp eq i64 %127, 0
  br i1 %128, label %129, label %94, !llvm.loop !130

129:                                              ; preds = %94, %93
  %130 = phi i64 [ 0, %93 ], [ %126, %94 ]
  br i1 %57, label %146, label %131

131:                                              ; preds = %129
  %132 = getelementptr inbounds i32, i32* %92, i64 %130
  %133 = bitcast i32* %132 to <4 x i32>*
  %134 = load <4 x i32>, <4 x i32>* %133, align 4
  %135 = getelementptr inbounds i32, i32* %132, i64 4
  %136 = bitcast i32* %135 to <4 x i32>*
  %137 = load <4 x i32>, <4 x i32>* %136, align 4
  %138 = mul nsw <4 x i32> %134, <i32 2896, i32 2896, i32 2896, i32 2896>
  %139 = mul nsw <4 x i32> %137, <i32 2896, i32 2896, i32 2896, i32 2896>
  %140 = add nsw <4 x i32> %138, <i32 2048, i32 2048, i32 2048, i32 2048>
  %141 = add nsw <4 x i32> %139, <i32 2048, i32 2048, i32 2048, i32 2048>
  %142 = ashr <4 x i32> %140, <i32 12, i32 12, i32 12, i32 12>
  %143 = ashr <4 x i32> %141, <i32 12, i32 12, i32 12, i32 12>
  %144 = bitcast i32* %132 to <4 x i32>*
  store <4 x i32> %142, <4 x i32>* %144, align 4
  %145 = bitcast i32* %135 to <4 x i32>*
  store <4 x i32> %143, <4 x i32>* %145, align 4
  br label %146

146:                                              ; preds = %129, %131
  br i1 %58, label %158, label %147

147:                                              ; preds = %146, %91
  %148 = phi i64 [ 0, %91 ], [ %53, %146 ]
  br label %149

149:                                              ; preds = %147, %149
  %150 = phi i64 [ %156, %149 ], [ %148, %147 ]
  %151 = getelementptr inbounds i32, i32* %92, i64 %150
  %152 = load i32, i32* %151, align 4
  %153 = mul nsw i32 %152, 2896
  %154 = add nsw i32 %153, 2048
  %155 = ashr i32 %154, 12
  store i32 %155, i32* %151, align 4
  %156 = add nuw nsw i64 %150, 1
  %157 = icmp ult i64 %156, %38
  br i1 %157, label %149, label %158, !llvm.loop !131

158:                                              ; preds = %149, %146, %88
  %159 = getelementptr inbounds i32, i32* %18, i64 %90
  %160 = bitcast i32* %159 to <4 x i32>*
  %161 = load <4 x i32>, <4 x i32>* %160, align 4
  %162 = shl <4 x i32> %161, <i32 2, i32 2, i32 2, i32 2>
  %163 = add nsw <4 x i32> %162, %60
  %164 = ashr <4 x i32> %163, %62
  %165 = bitcast i32* %159 to <4 x i32>*
  store <4 x i32> %164, <4 x i32>* %165, align 4
  %166 = getelementptr inbounds i32, i32* %159, i64 4
  %167 = bitcast i32* %166 to <4 x i32>*
  %168 = load <4 x i32>, <4 x i32>* %167, align 4
  %169 = shl <4 x i32> %168, <i32 2, i32 2, i32 2, i32 2>
  %170 = add nsw <4 x i32> %169, %60
  %171 = ashr <4 x i32> %170, %62
  %172 = bitcast i32* %166 to <4 x i32>*
  store <4 x i32> %171, <4 x i32>* %172, align 4
  %173 = getelementptr inbounds i32, i32* %159, i64 8
  %174 = bitcast i32* %173 to <4 x i32>*
  %175 = load <4 x i32>, <4 x i32>* %174, align 4
  %176 = shl <4 x i32> %175, <i32 2, i32 2, i32 2, i32 2>
  %177 = add nsw <4 x i32> %176, %60
  %178 = ashr <4 x i32> %177, %62
  %179 = bitcast i32* %173 to <4 x i32>*
  store <4 x i32> %178, <4 x i32>* %179, align 4
  %180 = getelementptr inbounds i32, i32* %159, i64 12
  %181 = bitcast i32* %180 to <4 x i32>*
  %182 = load <4 x i32>, <4 x i32>* %181, align 4
  %183 = shl <4 x i32> %182, <i32 2, i32 2, i32 2, i32 2>
  %184 = add nsw <4 x i32> %183, %60
  %185 = ashr <4 x i32> %184, %62
  %186 = bitcast i32* %180 to <4 x i32>*
  store <4 x i32> %185, <4 x i32>* %186, align 4
  %187 = getelementptr inbounds i32, i32* %159, i64 16
  %188 = bitcast i32* %187 to <4 x i32>*
  %189 = load <4 x i32>, <4 x i32>* %188, align 4
  %190 = shl <4 x i32> %189, <i32 2, i32 2, i32 2, i32 2>
  %191 = add nsw <4 x i32> %190, %60
  %192 = ashr <4 x i32> %191, %62
  %193 = bitcast i32* %187 to <4 x i32>*
  store <4 x i32> %192, <4 x i32>* %193, align 4
  %194 = getelementptr inbounds i32, i32* %159, i64 20
  %195 = bitcast i32* %194 to <4 x i32>*
  %196 = load <4 x i32>, <4 x i32>* %195, align 4
  %197 = shl <4 x i32> %196, <i32 2, i32 2, i32 2, i32 2>
  %198 = add nsw <4 x i32> %197, %60
  %199 = ashr <4 x i32> %198, %62
  %200 = bitcast i32* %194 to <4 x i32>*
  store <4 x i32> %199, <4 x i32>* %200, align 4
  %201 = getelementptr inbounds i32, i32* %159, i64 24
  %202 = bitcast i32* %201 to <4 x i32>*
  %203 = load <4 x i32>, <4 x i32>* %202, align 4
  %204 = shl <4 x i32> %203, <i32 2, i32 2, i32 2, i32 2>
  %205 = add nsw <4 x i32> %204, %60
  %206 = ashr <4 x i32> %205, %62
  %207 = bitcast i32* %201 to <4 x i32>*
  store <4 x i32> %206, <4 x i32>* %207, align 4
  %208 = getelementptr inbounds i32, i32* %159, i64 28
  %209 = bitcast i32* %208 to <4 x i32>*
  %210 = load <4 x i32>, <4 x i32>* %209, align 4
  %211 = shl <4 x i32> %210, <i32 2, i32 2, i32 2, i32 2>
  %212 = add nsw <4 x i32> %211, %60
  %213 = ashr <4 x i32> %212, %62
  %214 = bitcast i32* %208 to <4 x i32>*
  store <4 x i32> %213, <4 x i32>* %214, align 4
  br i1 %37, label %288, label %215

215:                                              ; preds = %158
  br i1 %63, label %276, label %216

216:                                              ; preds = %215
  br i1 %66, label %256, label %217

217:                                              ; preds = %216, %217
  %218 = phi i64 [ %253, %217 ], [ 0, %216 ]
  %219 = phi i64 [ %254, %217 ], [ %67, %216 ]
  %220 = getelementptr inbounds i32, i32* %159, i64 %218
  %221 = bitcast i32* %220 to <4 x i32>*
  %222 = load <4 x i32>, <4 x i32>* %221, align 4
  %223 = getelementptr inbounds i32, i32* %220, i64 4
  %224 = bitcast i32* %223 to <4 x i32>*
  %225 = load <4 x i32>, <4 x i32>* %224, align 4
  %226 = icmp slt <4 x i32> %222, <i32 32767, i32 32767, i32 32767, i32 32767>
  %227 = icmp slt <4 x i32> %225, <i32 32767, i32 32767, i32 32767, i32 32767>
  %228 = select <4 x i1> %226, <4 x i32> %222, <4 x i32> <i32 32767, i32 32767, i32 32767, i32 32767>
  %229 = select <4 x i1> %227, <4 x i32> %225, <4 x i32> <i32 32767, i32 32767, i32 32767, i32 32767>
  %230 = icmp sgt <4 x i32> %228, <i32 -32768, i32 -32768, i32 -32768, i32 -32768>
  %231 = icmp sgt <4 x i32> %229, <i32 -32768, i32 -32768, i32 -32768, i32 -32768>
  %232 = select <4 x i1> %230, <4 x i32> %228, <4 x i32> <i32 -32768, i32 -32768, i32 -32768, i32 -32768>
  %233 = select <4 x i1> %231, <4 x i32> %229, <4 x i32> <i32 -32768, i32 -32768, i32 -32768, i32 -32768>
  %234 = bitcast i32* %220 to <4 x i32>*
  store <4 x i32> %232, <4 x i32>* %234, align 4
  %235 = bitcast i32* %223 to <4 x i32>*
  store <4 x i32> %233, <4 x i32>* %235, align 4
  %236 = or i64 %218, 8
  %237 = getelementptr inbounds i32, i32* %159, i64 %236
  %238 = bitcast i32* %237 to <4 x i32>*
  %239 = load <4 x i32>, <4 x i32>* %238, align 4
  %240 = getelementptr inbounds i32, i32* %237, i64 4
  %241 = bitcast i32* %240 to <4 x i32>*
  %242 = load <4 x i32>, <4 x i32>* %241, align 4
  %243 = icmp slt <4 x i32> %239, <i32 32767, i32 32767, i32 32767, i32 32767>
  %244 = icmp slt <4 x i32> %242, <i32 32767, i32 32767, i32 32767, i32 32767>
  %245 = select <4 x i1> %243, <4 x i32> %239, <4 x i32> <i32 32767, i32 32767, i32 32767, i32 32767>
  %246 = select <4 x i1> %244, <4 x i32> %242, <4 x i32> <i32 32767, i32 32767, i32 32767, i32 32767>
  %247 = icmp sgt <4 x i32> %245, <i32 -32768, i32 -32768, i32 -32768, i32 -32768>
  %248 = icmp sgt <4 x i32> %246, <i32 -32768, i32 -32768, i32 -32768, i32 -32768>
  %249 = select <4 x i1> %247, <4 x i32> %245, <4 x i32> <i32 -32768, i32 -32768, i32 -32768, i32 -32768>
  %250 = select <4 x i1> %248, <4 x i32> %246, <4 x i32> <i32 -32768, i32 -32768, i32 -32768, i32 -32768>
  %251 = bitcast i32* %237 to <4 x i32>*
  store <4 x i32> %249, <4 x i32>* %251, align 4
  %252 = bitcast i32* %240 to <4 x i32>*
  store <4 x i32> %250, <4 x i32>* %252, align 4
  %253 = add i64 %218, 16
  %254 = add i64 %219, -2
  %255 = icmp eq i64 %254, 0
  br i1 %255, label %256, label %217, !llvm.loop !132

256:                                              ; preds = %217, %216
  %257 = phi i64 [ 0, %216 ], [ %253, %217 ]
  br i1 %68, label %275, label %258

258:                                              ; preds = %256
  %259 = getelementptr inbounds i32, i32* %159, i64 %257
  %260 = bitcast i32* %259 to <4 x i32>*
  %261 = load <4 x i32>, <4 x i32>* %260, align 4
  %262 = getelementptr inbounds i32, i32* %259, i64 4
  %263 = bitcast i32* %262 to <4 x i32>*
  %264 = load <4 x i32>, <4 x i32>* %263, align 4
  %265 = icmp slt <4 x i32> %261, <i32 32767, i32 32767, i32 32767, i32 32767>
  %266 = icmp slt <4 x i32> %264, <i32 32767, i32 32767, i32 32767, i32 32767>
  %267 = select <4 x i1> %265, <4 x i32> %261, <4 x i32> <i32 32767, i32 32767, i32 32767, i32 32767>
  %268 = select <4 x i1> %266, <4 x i32> %264, <4 x i32> <i32 32767, i32 32767, i32 32767, i32 32767>
  %269 = icmp sgt <4 x i32> %267, <i32 -32768, i32 -32768, i32 -32768, i32 -32768>
  %270 = icmp sgt <4 x i32> %268, <i32 -32768, i32 -32768, i32 -32768, i32 -32768>
  %271 = select <4 x i1> %269, <4 x i32> %267, <4 x i32> <i32 -32768, i32 -32768, i32 -32768, i32 -32768>
  %272 = select <4 x i1> %270, <4 x i32> %268, <4 x i32> <i32 -32768, i32 -32768, i32 -32768, i32 -32768>
  %273 = bitcast i32* %259 to <4 x i32>*
  store <4 x i32> %271, <4 x i32>* %273, align 4
  %274 = bitcast i32* %262 to <4 x i32>*
  store <4 x i32> %272, <4 x i32>* %274, align 4
  br label %275

275:                                              ; preds = %256, %258
  br i1 %69, label %288, label %276

276:                                              ; preds = %275, %215
  %277 = phi i64 [ 0, %215 ], [ %64, %275 ]
  br label %278

278:                                              ; preds = %276, %278
  %279 = phi i64 [ %286, %278 ], [ %277, %276 ]
  %280 = getelementptr inbounds i32, i32* %159, i64 %279
  %281 = load i32, i32* %280, align 4
  %282 = icmp slt i32 %281, 32767
  %283 = select i1 %282, i32 %281, i32 32767
  %284 = icmp sgt i32 %283, -32768
  %285 = select i1 %284, i32 %283, i32 -32768
  store i32 %285, i32* %280, align 4
  %286 = add nuw nsw i64 %279, 1
  %287 = icmp eq i64 %286, %33
  br i1 %287, label %288, label %278, !llvm.loop !133

288:                                              ; preds = %278, %275, %158
  %289 = add nuw nsw i64 %89, 1
  %290 = icmp eq i64 %289, %39
  br i1 %290, label %291, label %88

291:                                              ; preds = %288, %27, %77
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN7libgav13dsp12_GLOBAL__N_115TransformLoop_CILi10EitLNS0_11Transform1DE2EXadL_ZNS1_18Identity32DcOnly_CILi10EiEEvPvabibEEXadL_ZNS1_18Identity32Column_CIiEEvS5_aEELb0EEEvNS_13TransformTypeENS_13TransformSizeEiS5_iiS5_(i8 zeroext, i8 zeroext, i32, i8*, i32, i32, i8* nocapture readonly) #0 {
  %8 = alloca [64 x i32], align 16
  %9 = zext i8 %1 to i64
  %10 = getelementptr inbounds [19 x i8], [19 x i8]* @_ZN7libgav115kTransformWidthE, i64 0, i64 %9
  %11 = load i8, i8* %10, align 1
  %12 = zext i8 %11 to i32
  %13 = getelementptr inbounds [19 x i8], [19 x i8]* @_ZN7libgav116kTransformHeightE, i64 0, i64 %9
  %14 = load i8, i8* %13, align 1
  %15 = bitcast i8* %3 to i32*
  %16 = zext i8 %0 to i32
  %17 = shl i32 1, %16
  %18 = and i32 %17, 33104
  %19 = icmp eq i32 %18, 0
  %20 = bitcast [64 x i32]* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 256, i8* nonnull %20) #4
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %20, i8 -86, i64 256, i1 false)
  %21 = icmp eq i8 %11, 0
  br i1 %21, label %63, label %22

22:                                               ; preds = %7
  %23 = zext i8 %11 to i64
  %24 = icmp eq i32 %2, 1
  %25 = getelementptr inbounds [64 x i32], [64 x i32]* %8, i64 0, i64 0
  %26 = icmp eq i8 %14, 0
  %27 = getelementptr inbounds i8, i8* %6, i64 4
  %28 = bitcast i8* %27 to i32*
  %29 = getelementptr inbounds i8, i8* %6, i64 8
  %30 = bitcast i8* %29 to i16**
  %31 = zext i8 %14 to i64
  %32 = sext i32 %5 to i64
  %33 = sext i32 %4 to i64
  %34 = zext i8 %11 to i64
  %35 = add nsw i64 %31, -1
  %36 = and i64 %31, 3
  %37 = icmp ult i64 %35, 3
  %38 = sub nsw i64 %31, %36
  %39 = icmp eq i64 %36, 0
  %40 = bitcast [64 x i32]* %8 to <4 x i32>*
  %41 = bitcast [64 x i32]* %8 to <4 x i32>*
  %42 = getelementptr inbounds [64 x i32], [64 x i32]* %8, i64 0, i64 4
  %43 = bitcast i32* %42 to <4 x i32>*
  %44 = bitcast i32* %42 to <4 x i32>*
  %45 = getelementptr inbounds [64 x i32], [64 x i32]* %8, i64 0, i64 8
  %46 = bitcast i32* %45 to <4 x i32>*
  %47 = bitcast i32* %45 to <4 x i32>*
  %48 = getelementptr inbounds [64 x i32], [64 x i32]* %8, i64 0, i64 12
  %49 = bitcast i32* %48 to <4 x i32>*
  %50 = bitcast i32* %48 to <4 x i32>*
  %51 = getelementptr inbounds [64 x i32], [64 x i32]* %8, i64 0, i64 16
  %52 = bitcast i32* %51 to <4 x i32>*
  %53 = bitcast i32* %51 to <4 x i32>*
  %54 = getelementptr inbounds [64 x i32], [64 x i32]* %8, i64 0, i64 20
  %55 = bitcast i32* %54 to <4 x i32>*
  %56 = bitcast i32* %54 to <4 x i32>*
  %57 = getelementptr inbounds [64 x i32], [64 x i32]* %8, i64 0, i64 24
  %58 = bitcast i32* %57 to <4 x i32>*
  %59 = bitcast i32* %57 to <4 x i32>*
  %60 = getelementptr inbounds [64 x i32], [64 x i32]* %8, i64 0, i64 28
  %61 = bitcast i32* %60 to <4 x i32>*
  %62 = bitcast i32* %60 to <4 x i32>*
  br label %64

63:                                               ; preds = %143, %7
  call void @llvm.lifetime.end.p0i8(i64 256, i8* nonnull %20) #4
  ret void

64:                                               ; preds = %143, %22
  %65 = phi i64 [ 0, %22 ], [ %144, %143 ]
  %66 = phi i32 [ 0, %22 ], [ %145, %143 ]
  %67 = xor i32 %66, -1
  %68 = add nsw i32 %67, %12
  %69 = trunc i64 %65 to i32
  %70 = select i1 %19, i32 %69, i32 %68
  %71 = sext i32 %70 to i64
  %72 = getelementptr inbounds i32, i32* %15, i64 %71
  br i1 %37, label %98, label %73

73:                                               ; preds = %64, %73
  %74 = phi i64 [ %95, %73 ], [ 0, %64 ]
  %75 = phi i64 [ %96, %73 ], [ %38, %64 ]
  %76 = mul nuw nsw i64 %74, %23
  %77 = getelementptr inbounds i32, i32* %72, i64 %76
  %78 = load i32, i32* %77, align 4
  %79 = getelementptr inbounds [64 x i32], [64 x i32]* %8, i64 0, i64 %74
  store i32 %78, i32* %79, align 16
  %80 = or i64 %74, 1
  %81 = mul nuw nsw i64 %80, %23
  %82 = getelementptr inbounds i32, i32* %72, i64 %81
  %83 = load i32, i32* %82, align 4
  %84 = getelementptr inbounds [64 x i32], [64 x i32]* %8, i64 0, i64 %80
  store i32 %83, i32* %84, align 4
  %85 = or i64 %74, 2
  %86 = mul nuw nsw i64 %85, %23
  %87 = getelementptr inbounds i32, i32* %72, i64 %86
  %88 = load i32, i32* %87, align 4
  %89 = getelementptr inbounds [64 x i32], [64 x i32]* %8, i64 0, i64 %85
  store i32 %88, i32* %89, align 8
  %90 = or i64 %74, 3
  %91 = mul nuw nsw i64 %90, %23
  %92 = getelementptr inbounds i32, i32* %72, i64 %91
  %93 = load i32, i32* %92, align 4
  %94 = getelementptr inbounds [64 x i32], [64 x i32]* %8, i64 0, i64 %90
  store i32 %93, i32* %94, align 4
  %95 = add nuw nsw i64 %74, 4
  %96 = add i64 %75, -4
  %97 = icmp eq i64 %96, 0
  br i1 %97, label %98, label %73

98:                                               ; preds = %73, %64
  %99 = phi i64 [ 0, %64 ], [ %95, %73 ]
  br i1 %39, label %110, label %100

100:                                              ; preds = %98, %100
  %101 = phi i64 [ %107, %100 ], [ %99, %98 ]
  %102 = phi i64 [ %108, %100 ], [ %36, %98 ]
  %103 = mul nuw nsw i64 %101, %23
  %104 = getelementptr inbounds i32, i32* %72, i64 %103
  %105 = load i32, i32* %104, align 4
  %106 = getelementptr inbounds [64 x i32], [64 x i32]* %8, i64 0, i64 %101
  store i32 %105, i32* %106, align 4
  %107 = add nuw nsw i64 %101, 1
  %108 = add i64 %102, -1
  %109 = icmp eq i64 %108, 0
  br i1 %109, label %110, label %100, !llvm.loop !134

110:                                              ; preds = %100, %98
  br i1 %24, label %136, label %111

111:                                              ; preds = %110
  %112 = load <4 x i32>, <4 x i32>* %40, align 16
  %113 = add nsw <4 x i32> %112, <i32 2, i32 2, i32 2, i32 2>
  %114 = ashr <4 x i32> %113, <i32 2, i32 2, i32 2, i32 2>
  store <4 x i32> %114, <4 x i32>* %41, align 16
  %115 = load <4 x i32>, <4 x i32>* %43, align 16
  %116 = add nsw <4 x i32> %115, <i32 2, i32 2, i32 2, i32 2>
  %117 = ashr <4 x i32> %116, <i32 2, i32 2, i32 2, i32 2>
  store <4 x i32> %117, <4 x i32>* %44, align 16
  %118 = load <4 x i32>, <4 x i32>* %46, align 16
  %119 = add nsw <4 x i32> %118, <i32 2, i32 2, i32 2, i32 2>
  %120 = ashr <4 x i32> %119, <i32 2, i32 2, i32 2, i32 2>
  store <4 x i32> %120, <4 x i32>* %47, align 16
  %121 = load <4 x i32>, <4 x i32>* %49, align 16
  %122 = add nsw <4 x i32> %121, <i32 2, i32 2, i32 2, i32 2>
  %123 = ashr <4 x i32> %122, <i32 2, i32 2, i32 2, i32 2>
  store <4 x i32> %123, <4 x i32>* %50, align 16
  %124 = load <4 x i32>, <4 x i32>* %52, align 16
  %125 = add nsw <4 x i32> %124, <i32 2, i32 2, i32 2, i32 2>
  %126 = ashr <4 x i32> %125, <i32 2, i32 2, i32 2, i32 2>
  store <4 x i32> %126, <4 x i32>* %53, align 16
  %127 = load <4 x i32>, <4 x i32>* %55, align 16
  %128 = add nsw <4 x i32> %127, <i32 2, i32 2, i32 2, i32 2>
  %129 = ashr <4 x i32> %128, <i32 2, i32 2, i32 2, i32 2>
  store <4 x i32> %129, <4 x i32>* %56, align 16
  %130 = load <4 x i32>, <4 x i32>* %58, align 16
  %131 = add nsw <4 x i32> %130, <i32 2, i32 2, i32 2, i32 2>
  %132 = ashr <4 x i32> %131, <i32 2, i32 2, i32 2, i32 2>
  store <4 x i32> %132, <4 x i32>* %59, align 16
  %133 = load <4 x i32>, <4 x i32>* %61, align 16
  %134 = add nsw <4 x i32> %133, <i32 2, i32 2, i32 2, i32 2>
  %135 = ashr <4 x i32> %134, <i32 2, i32 2, i32 2, i32 2>
  store <4 x i32> %135, <4 x i32>* %62, align 16
  br label %140

136:                                              ; preds = %110
  %137 = load i32, i32* %25, align 16
  %138 = add nsw i32 %137, 2
  %139 = ashr i32 %138, 2
  store i32 %139, i32* %25, align 16
  br label %140

140:                                              ; preds = %111, %136
  br i1 %26, label %143, label %141

141:                                              ; preds = %140
  %142 = add nsw i64 %65, %33
  br label %147

143:                                              ; preds = %147, %140
  %144 = add nuw nsw i64 %65, 1
  %145 = add nuw nsw i32 %66, 1
  %146 = icmp eq i64 %144, %34
  br i1 %146, label %63, label %64

147:                                              ; preds = %147, %141
  %148 = phi i64 [ 0, %141 ], [ %166, %147 ]
  %149 = add nsw i64 %148, %32
  %150 = getelementptr inbounds [64 x i32], [64 x i32]* %8, i64 0, i64 %148
  %151 = load i32, i32* %150, align 4
  %152 = load i32, i32* %28, align 4
  %153 = sext i32 %152 to i64
  %154 = mul nsw i64 %149, %153
  %155 = load i16*, i16** %30, align 8
  %156 = getelementptr inbounds i16, i16* %155, i64 %142
  %157 = getelementptr inbounds i16, i16* %156, i64 %154
  %158 = load i16, i16* %157, align 2
  %159 = zext i16 %158 to i32
  %160 = add nsw i32 %151, %159
  %161 = icmp slt i32 %160, 1023
  %162 = select i1 %161, i32 %160, i32 1023
  %163 = icmp sgt i32 %162, 0
  %164 = select i1 %163, i32 %162, i32 0
  %165 = trunc i32 %164 to i16
  store i16 %165, i16* %157, align 2
  %166 = add nuw nsw i64 %148, 1
  %167 = icmp eq i64 %166, %31
  br i1 %167, label %143, label %147
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN7libgav13dsp12_GLOBAL__N_115TransformLoop_CILi10EitLNS0_11Transform1DE3EXadL_ZNS1_12Wht4DcOnly_CILi10EiEEvPvabibEEXadL_ZNS1_6Wht4_CIiEEvS5_aEELb1EEEvNS_13TransformTypeENS_13TransformSizeEiS5_iiS5_(i8 zeroext, i8 zeroext, i32, i8*, i32, i32, i8* nocapture readnone) #0 {
  %8 = bitcast i8* %3 to i32*
  %9 = icmp eq i32 %2, 1
  br i1 %9, label %67, label %10

10:                                               ; preds = %7
  %11 = icmp sgt i32 %2, 0
  br i1 %11, label %12, label %120

12:                                               ; preds = %10
  %13 = zext i32 %2 to i64
  %14 = icmp ult i32 %2, 4
  br i1 %14, label %15, label %17

15:                                               ; preds = %65, %12
  %16 = phi i64 [ 0, %12 ], [ %18, %65 ]
  br label %86

17:                                               ; preds = %12
  %18 = and i64 %13, 4294967292
  br label %19

19:                                               ; preds = %19, %17
  %20 = phi i64 [ 0, %17 ], [ %63, %19 ]
  %21 = shl nuw nsw i64 %20, 2
  %22 = getelementptr inbounds i32, i32* %8, i64 %21
  %23 = bitcast i32* %22 to <16 x i32>*
  %24 = load <16 x i32>, <16 x i32>* %23, align 4
  %25 = shufflevector <16 x i32> %24, <16 x i32> undef, <4 x i32> <i32 0, i32 4, i32 8, i32 12>
  %26 = shufflevector <16 x i32> %24, <16 x i32> undef, <4 x i32> <i32 1, i32 5, i32 9, i32 13>
  %27 = shufflevector <16 x i32> %24, <16 x i32> undef, <4 x i32> <i32 2, i32 6, i32 10, i32 14>
  %28 = shufflevector <16 x i32> %24, <16 x i32> undef, <4 x i32> <i32 3, i32 7, i32 11, i32 15>
  %29 = ashr <4 x i32> %25, <i32 2, i32 2, i32 2, i32 2>
  %30 = ashr <4 x i32> %26, <i32 2, i32 2, i32 2, i32 2>
  %31 = ashr <4 x i32> %27, <i32 2, i32 2, i32 2, i32 2>
  %32 = getelementptr inbounds i32, i32* %22, i64 3
  %33 = ashr <4 x i32> %28, <i32 2, i32 2, i32 2, i32 2>
  %34 = add nsw <4 x i32> %30, %29
  %35 = sub nsw <4 x i32> %31, %33
  %36 = sub nsw <4 x i32> %34, %35
  %37 = ashr <4 x i32> %36, <i32 1, i32 1, i32 1, i32 1>
  %38 = sub nsw <4 x i32> %37, %33
  %39 = sub nsw <4 x i32> %37, %30
  %40 = sub nsw <4 x i32> %34, %38
  %41 = add nsw <4 x i32> %39, %35
  %42 = icmp slt <4 x i32> %40, <i32 32767, i32 32767, i32 32767, i32 32767>
  %43 = select <4 x i1> %42, <4 x i32> %40, <4 x i32> <i32 32767, i32 32767, i32 32767, i32 32767>
  %44 = icmp sgt <4 x i32> %43, <i32 -32768, i32 -32768, i32 -32768, i32 -32768>
  %45 = select <4 x i1> %44, <4 x i32> %43, <4 x i32> <i32 -32768, i32 -32768, i32 -32768, i32 -32768>
  %46 = icmp slt <4 x i32> %38, <i32 32767, i32 32767, i32 32767, i32 32767>
  %47 = select <4 x i1> %46, <4 x i32> %38, <4 x i32> <i32 32767, i32 32767, i32 32767, i32 32767>
  %48 = icmp sgt <4 x i32> %47, <i32 -32768, i32 -32768, i32 -32768, i32 -32768>
  %49 = select <4 x i1> %48, <4 x i32> %47, <4 x i32> <i32 -32768, i32 -32768, i32 -32768, i32 -32768>
  %50 = icmp slt <4 x i32> %39, <i32 32767, i32 32767, i32 32767, i32 32767>
  %51 = select <4 x i1> %50, <4 x i32> %39, <4 x i32> <i32 32767, i32 32767, i32 32767, i32 32767>
  %52 = icmp sgt <4 x i32> %51, <i32 -32768, i32 -32768, i32 -32768, i32 -32768>
  %53 = select <4 x i1> %52, <4 x i32> %51, <4 x i32> <i32 -32768, i32 -32768, i32 -32768, i32 -32768>
  %54 = icmp slt <4 x i32> %41, <i32 32767, i32 32767, i32 32767, i32 32767>
  %55 = select <4 x i1> %54, <4 x i32> %41, <4 x i32> <i32 32767, i32 32767, i32 32767, i32 32767>
  %56 = icmp sgt <4 x i32> %55, <i32 -32768, i32 -32768, i32 -32768, i32 -32768>
  %57 = select <4 x i1> %56, <4 x i32> %55, <4 x i32> <i32 -32768, i32 -32768, i32 -32768, i32 -32768>
  %58 = getelementptr inbounds i32, i32* %32, i64 -3
  %59 = bitcast i32* %58 to <16 x i32>*
  %60 = shufflevector <4 x i32> %45, <4 x i32> %49, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %61 = shufflevector <4 x i32> %53, <4 x i32> %57, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %62 = shufflevector <8 x i32> %60, <8 x i32> %61, <16 x i32> <i32 0, i32 4, i32 8, i32 12, i32 1, i32 5, i32 9, i32 13, i32 2, i32 6, i32 10, i32 14, i32 3, i32 7, i32 11, i32 15>
  store <16 x i32> %62, <16 x i32>* %59, align 4
  %63 = add i64 %20, 4
  %64 = icmp eq i64 %63, %18
  br i1 %64, label %65, label %19, !llvm.loop !135

65:                                               ; preds = %19
  %66 = icmp eq i64 %18, %13
  br i1 %66, label %120, label %15

67:                                               ; preds = %7
  %68 = load i32, i32* %8, align 4
  %69 = ashr i32 %68, 2
  %70 = ashr i32 %68, 3
  %71 = sub nsw i32 %69, %70
  %72 = icmp slt i32 %71, 32767
  %73 = select i1 %72, i32 %71, i32 32767
  %74 = icmp sgt i32 %73, -32768
  %75 = select i1 %74, i32 %73, i32 -32768
  store i32 %75, i32* %8, align 4
  %76 = getelementptr inbounds i8, i8* %3, i64 4
  %77 = bitcast i8* %76 to i32*
  %78 = icmp slt i32 %70, 32767
  %79 = select i1 %78, i32 %70, i32 32767
  %80 = icmp sgt i32 %79, -32768
  %81 = select i1 %80, i32 %79, i32 -32768
  store i32 %81, i32* %77, align 4
  %82 = getelementptr inbounds i8, i8* %3, i64 8
  %83 = bitcast i8* %82 to i32*
  store i32 %81, i32* %83, align 4
  %84 = getelementptr inbounds i8, i8* %3, i64 12
  %85 = bitcast i8* %84 to i32*
  store i32 %81, i32* %85, align 4
  br label %120

86:                                               ; preds = %15, %86
  %87 = phi i64 [ %118, %86 ], [ %16, %15 ]
  %88 = shl nuw nsw i64 %87, 2
  %89 = getelementptr inbounds i32, i32* %8, i64 %88
  %90 = load i32, i32* %89, align 4
  %91 = ashr i32 %90, 2
  %92 = getelementptr inbounds i32, i32* %89, i64 1
  %93 = load i32, i32* %92, align 4
  %94 = ashr i32 %93, 2
  %95 = getelementptr inbounds i32, i32* %89, i64 2
  %96 = load i32, i32* %95, align 4
  %97 = ashr i32 %96, 2
  %98 = getelementptr inbounds i32, i32* %89, i64 3
  %99 = load i32, i32* %98, align 4
  %100 = ashr i32 %99, 2
  %101 = add nsw i32 %94, %91
  %102 = sub nsw i32 %97, %100
  %103 = sub nsw i32 %101, %102
  %104 = ashr i32 %103, 1
  %105 = sub nsw i32 %104, %100
  %106 = sub nsw i32 %104, %94
  %107 = sub nsw i32 %101, %105
  %108 = add nsw i32 %106, %102
  %109 = insertelement <4 x i32> undef, i32 %107, i32 0
  %110 = insertelement <4 x i32> %109, i32 %105, i32 1
  %111 = insertelement <4 x i32> %110, i32 %106, i32 2
  %112 = insertelement <4 x i32> %111, i32 %108, i32 3
  %113 = icmp slt <4 x i32> %112, <i32 32767, i32 32767, i32 32767, i32 32767>
  %114 = select <4 x i1> %113, <4 x i32> %112, <4 x i32> <i32 32767, i32 32767, i32 32767, i32 32767>
  %115 = icmp sgt <4 x i32> %114, <i32 -32768, i32 -32768, i32 -32768, i32 -32768>
  %116 = select <4 x i1> %115, <4 x i32> %114, <4 x i32> <i32 -32768, i32 -32768, i32 -32768, i32 -32768>
  %117 = bitcast i32* %89 to <4 x i32>*
  store <4 x i32> %116, <4 x i32>* %117, align 4
  %118 = add nuw nsw i64 %87, 1
  %119 = icmp eq i64 %118, %13
  br i1 %119, label %120, label %86, !llvm.loop !136

120:                                              ; preds = %86, %65, %10, %67
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN7libgav13dsp12_GLOBAL__N_115TransformLoop_CILi10EitLNS0_11Transform1DE3EXadL_ZNS1_12Wht4DcOnly_CILi10EiEEvPvabibEEXadL_ZNS1_6Wht4_CIiEEvS5_aEELb0EEEvNS_13TransformTypeENS_13TransformSizeEiS5_iiS5_(i8 zeroext, i8 zeroext, i32, i8*, i32, i32, i8* nocapture readonly) #0 {
  %8 = bitcast i8* %3 to i32*
  %9 = icmp eq i32 %2, 1
  %10 = getelementptr inbounds i8, i8* %6, i64 4
  %11 = bitcast i8* %10 to i32*
  %12 = getelementptr inbounds i8, i8* %6, i64 8
  %13 = bitcast i8* %12 to i16**
  %14 = sext i32 %5 to i64
  %15 = sext i32 %4 to i64
  %16 = add nsw i64 %14, 1
  %17 = add nsw i64 %14, 2
  %18 = add nsw i64 %14, 3
  br label %19

19:                                               ; preds = %50, %7
  %20 = phi i64 [ 0, %7 ], [ %112, %50 ]
  %21 = getelementptr inbounds i32, i32* %8, i64 %20
  %22 = load i32, i32* %21, align 4
  %23 = getelementptr inbounds i32, i32* %21, i64 4
  %24 = load i32, i32* %23, align 4
  %25 = getelementptr inbounds i32, i32* %21, i64 12
  %26 = load i32, i32* %25, align 4
  br i1 %9, label %28, label %39

27:                                               ; preds = %50
  ret void

28:                                               ; preds = %19
  %29 = ashr i32 %22, 1
  %30 = sub nsw i32 %22, %29
  %31 = icmp slt i32 %30, 32767
  %32 = select i1 %31, i32 %30, i32 32767
  %33 = icmp sgt i32 %32, -32768
  %34 = select i1 %33, i32 %32, i32 -32768
  %35 = icmp slt i32 %29, 32767
  %36 = select i1 %35, i32 %29, i32 32767
  %37 = icmp sgt i32 %36, -32768
  %38 = select i1 %37, i32 %36, i32 -32768
  br label %50

39:                                               ; preds = %19
  %40 = getelementptr inbounds i32, i32* %21, i64 8
  %41 = load i32, i32* %40, align 4
  %42 = add nsw i32 %24, %22
  %43 = sub nsw i32 %41, %26
  %44 = sub nsw i32 %42, %43
  %45 = ashr i32 %44, 1
  %46 = sub nsw i32 %45, %26
  %47 = sub nsw i32 %45, %24
  %48 = sub nsw i32 %42, %46
  %49 = add nsw i32 %47, %43
  br label %50

50:                                               ; preds = %39, %28
  %51 = phi i32 [ %49, %39 ], [ %38, %28 ]
  %52 = phi i32 [ %47, %39 ], [ %38, %28 ]
  %53 = phi i32 [ %46, %39 ], [ %38, %28 ]
  %54 = phi i32 [ %48, %39 ], [ %34, %28 ]
  %55 = add nsw i64 %20, %15
  %56 = load i32, i32* %11, align 4
  %57 = sext i32 %56 to i64
  %58 = mul nsw i64 %57, %14
  %59 = load i16*, i16** %13, align 8
  %60 = getelementptr inbounds i16, i16* %59, i64 %55
  %61 = getelementptr inbounds i16, i16* %60, i64 %58
  %62 = load i16, i16* %61, align 2
  %63 = zext i16 %62 to i32
  %64 = add nsw i32 %54, %63
  %65 = icmp slt i32 %64, 1023
  %66 = select i1 %65, i32 %64, i32 1023
  %67 = icmp sgt i32 %66, 0
  %68 = select i1 %67, i32 %66, i32 0
  %69 = trunc i32 %68 to i16
  store i16 %69, i16* %61, align 2
  %70 = load i32, i32* %11, align 4
  %71 = sext i32 %70 to i64
  %72 = mul nsw i64 %16, %71
  %73 = load i16*, i16** %13, align 8
  %74 = getelementptr inbounds i16, i16* %73, i64 %55
  %75 = getelementptr inbounds i16, i16* %74, i64 %72
  %76 = load i16, i16* %75, align 2
  %77 = zext i16 %76 to i32
  %78 = add nsw i32 %53, %77
  %79 = icmp slt i32 %78, 1023
  %80 = select i1 %79, i32 %78, i32 1023
  %81 = icmp sgt i32 %80, 0
  %82 = select i1 %81, i32 %80, i32 0
  %83 = trunc i32 %82 to i16
  store i16 %83, i16* %75, align 2
  %84 = load i32, i32* %11, align 4
  %85 = sext i32 %84 to i64
  %86 = mul nsw i64 %17, %85
  %87 = load i16*, i16** %13, align 8
  %88 = getelementptr inbounds i16, i16* %87, i64 %55
  %89 = getelementptr inbounds i16, i16* %88, i64 %86
  %90 = load i16, i16* %89, align 2
  %91 = zext i16 %90 to i32
  %92 = add nsw i32 %52, %91
  %93 = icmp slt i32 %92, 1023
  %94 = select i1 %93, i32 %92, i32 1023
  %95 = icmp sgt i32 %94, 0
  %96 = select i1 %95, i32 %94, i32 0
  %97 = trunc i32 %96 to i16
  store i16 %97, i16* %89, align 2
  %98 = load i32, i32* %11, align 4
  %99 = sext i32 %98 to i64
  %100 = mul nsw i64 %18, %99
  %101 = load i16*, i16** %13, align 8
  %102 = getelementptr inbounds i16, i16* %101, i64 %55
  %103 = getelementptr inbounds i16, i16* %102, i64 %100
  %104 = load i16, i16* %103, align 2
  %105 = zext i16 %104 to i32
  %106 = add nsw i32 %51, %105
  %107 = icmp slt i32 %106, 1023
  %108 = select i1 %107, i32 %106, i32 1023
  %109 = icmp sgt i32 %108, 0
  %110 = select i1 %109, i32 %108, i32 0
  %111 = trunc i32 %110 to i16
  store i16 %111, i16* %103, align 2
  %112 = add nuw nsw i64 %20, 1
  %113 = icmp eq i64 %112, 4
  br i1 %113, label %27, label %19
}

; Function Attrs: nounwind ssp uwtable
define internal fastcc void @_ZN7libgav13dsp12_GLOBAL__N_15Dct_CIiLi3EEEvPva(i8* nocapture, i8 signext) unnamed_addr #0 {
  %3 = alloca [8 x i32], align 16
  %4 = bitcast i8* %0 to i32*
  %5 = bitcast [8 x i32]* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %5) #4
  %6 = getelementptr inbounds [8 x i32], [8 x i32]* %3, i64 0, i64 0
  %7 = getelementptr inbounds [8 x i32], [8 x i32]* %3, i64 0, i64 1
  %8 = getelementptr inbounds [8 x i32], [8 x i32]* %3, i64 0, i64 2
  %9 = getelementptr inbounds [8 x i32], [8 x i32]* %3, i64 0, i64 3
  %10 = getelementptr inbounds [8 x i32], [8 x i32]* %3, i64 0, i64 4
  %11 = getelementptr inbounds [8 x i32], [8 x i32]* %3, i64 0, i64 5
  %12 = getelementptr inbounds [8 x i32], [8 x i32]* %3, i64 0, i64 6
  %13 = getelementptr inbounds [8 x i32], [8 x i32]* %3, i64 0, i64 7
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 16 %5, i8* align 4 %0, i64 32, i1 false)
  %14 = load i32, i32* %6, align 16
  %15 = load i32, i32* %10, align 16
  %16 = getelementptr inbounds i8, i8* %0, i64 4
  %17 = bitcast i8* %16 to i32*
  %18 = load i32, i32* %8, align 8
  %19 = getelementptr inbounds i8, i8* %0, i64 8
  %20 = load i32, i32* %12, align 8
  %21 = load i32, i32* %7, align 4
  %22 = load i32, i32* %11, align 4
  %23 = load i32, i32* %9, align 4
  %24 = getelementptr inbounds i8, i8* %0, i64 24
  %25 = bitcast i8* %24 to i32*
  %26 = load i32, i32* %13, align 4
  %27 = getelementptr inbounds i8, i8* %0, i64 28
  %28 = bitcast i8* %27 to i32*
  %29 = mul nsw i32 %21, 799
  %30 = sext i32 %29 to i64
  %31 = mul nsw i32 %26, 4017
  %32 = sext i32 %31 to i64
  %33 = mul nsw i32 %21, 4017
  %34 = sext i32 %33 to i64
  %35 = mul nsw i32 %26, 799
  %36 = sext i32 %35 to i64
  %37 = add nsw i64 %30, 2048
  %38 = sub nsw i64 %37, %32
  %39 = lshr i64 %38, 12
  %40 = trunc i64 %39 to i32
  %41 = add nsw i64 %34, 2048
  %42 = add nsw i64 %41, %36
  %43 = lshr i64 %42, 12
  %44 = trunc i64 %43 to i32
  %45 = mul nsw i32 %22, 3406
  %46 = sext i32 %45 to i64
  %47 = mul nsw i32 %23, 2276
  %48 = sext i32 %47 to i64
  %49 = mul nsw i32 %22, 2276
  %50 = sext i32 %49 to i64
  %51 = mul nsw i32 %23, 3406
  %52 = sext i32 %51 to i64
  %53 = add nsw i64 %46, 2048
  %54 = sub nsw i64 %53, %48
  %55 = lshr i64 %54, 12
  %56 = trunc i64 %55 to i32
  %57 = add nsw i64 %50, 2048
  %58 = add nsw i64 %57, %52
  %59 = lshr i64 %58, 12
  %60 = trunc i64 %59 to i32
  %61 = mul nsw i32 %14, 2896
  %62 = sext i32 %61 to i64
  %63 = mul nsw i32 %15, 2896
  %64 = sext i32 %63 to i64
  %65 = sub nsw i64 %62, %64
  %66 = add nsw i64 %64, %62
  %67 = add nsw i64 %66, 2048
  %68 = lshr i64 %67, 12
  %69 = trunc i64 %68 to i32
  %70 = add nsw i64 %65, 2048
  %71 = lshr i64 %70, 12
  %72 = trunc i64 %71 to i32
  %73 = mul nsw i32 %18, 1567
  %74 = sext i32 %73 to i64
  %75 = mul nsw i32 %20, 3784
  %76 = sext i32 %75 to i64
  %77 = sub nsw i64 %74, %76
  %78 = mul nsw i32 %18, 3784
  %79 = sext i32 %78 to i64
  %80 = mul nsw i32 %20, 1567
  %81 = sext i32 %80 to i64
  %82 = add nsw i64 %81, %79
  %83 = add nsw i64 %77, 2048
  %84 = lshr i64 %83, 12
  %85 = trunc i64 %84 to i32
  %86 = add nsw i64 %82, 2048
  %87 = lshr i64 %86, 12
  %88 = trunc i64 %87 to i32
  %89 = add i8 %1, -1
  %90 = sext i8 %89 to i32
  %91 = shl i32 1, %90
  %92 = sub nsw i32 0, %91
  %93 = add nsw i32 %91, -1
  %94 = add nsw i32 %56, %40
  %95 = sub nsw i32 %40, %56
  %96 = icmp slt i32 %94, %92
  %97 = icmp sgt i32 %94, %93
  %98 = select i1 %97, i32 %93, i32 %94
  %99 = select i1 %96, i32 %92, i32 %98
  %100 = icmp slt i32 %95, %92
  %101 = icmp sgt i32 %95, %93
  %102 = select i1 %101, i32 %93, i32 %95
  %103 = select i1 %100, i32 %92, i32 %102
  %104 = add nsw i32 %60, %44
  %105 = sub nsw i32 %44, %60
  %106 = icmp slt i32 %104, %92
  %107 = icmp sgt i32 %104, %93
  %108 = select i1 %107, i32 %93, i32 %104
  %109 = select i1 %106, i32 %92, i32 %108
  %110 = icmp slt i32 %105, %92
  %111 = icmp sgt i32 %105, %93
  %112 = select i1 %111, i32 %93, i32 %105
  %113 = select i1 %110, i32 %92, i32 %112
  %114 = add nsw i32 %88, %69
  %115 = sub nsw i32 %69, %88
  %116 = icmp slt i32 %114, %92
  %117 = icmp sgt i32 %114, %93
  %118 = select i1 %117, i32 %93, i32 %114
  %119 = select i1 %116, i32 %92, i32 %118
  %120 = icmp slt i32 %115, %92
  %121 = icmp sgt i32 %115, %93
  %122 = select i1 %121, i32 %93, i32 %115
  %123 = select i1 %120, i32 %92, i32 %122
  %124 = add nsw i32 %85, %72
  %125 = sub nsw i32 %72, %85
  %126 = icmp slt i32 %124, %92
  %127 = icmp sgt i32 %124, %93
  %128 = select i1 %127, i32 %93, i32 %124
  %129 = select i1 %126, i32 %92, i32 %128
  %130 = icmp slt i32 %125, %92
  %131 = icmp sgt i32 %125, %93
  %132 = select i1 %131, i32 %93, i32 %125
  %133 = select i1 %130, i32 %92, i32 %132
  %134 = mul nsw i32 %113, 2896
  %135 = sext i32 %134 to i64
  %136 = mul nsw i32 %103, 2896
  %137 = sext i32 %136 to i64
  %138 = add nsw i64 %135, 2048
  %139 = add nsw i64 %138, %137
  %140 = lshr i64 %139, 12
  %141 = trunc i64 %140 to i32
  %142 = sub nsw i64 %138, %137
  %143 = lshr i64 %142, 12
  %144 = trunc i64 %143 to i32
  %145 = add nsw i32 %109, %119
  %146 = sub nsw i32 %119, %109
  %147 = icmp slt i32 %145, %92
  %148 = icmp sgt i32 %145, %93
  %149 = select i1 %148, i32 %93, i32 %145
  %150 = select i1 %147, i32 %92, i32 %149
  store i32 %150, i32* %4, align 4
  %151 = icmp slt i32 %146, %92
  %152 = icmp sgt i32 %146, %93
  %153 = select i1 %152, i32 %93, i32 %146
  %154 = select i1 %151, i32 %92, i32 %153
  store i32 %154, i32* %28, align 4
  %155 = add nsw i32 %129, %141
  %156 = sub nsw i32 %129, %141
  %157 = icmp slt i32 %155, %92
  %158 = icmp sgt i32 %155, %93
  %159 = select i1 %158, i32 %93, i32 %155
  %160 = select i1 %157, i32 %92, i32 %159
  store i32 %160, i32* %17, align 4
  %161 = icmp slt i32 %156, %92
  %162 = icmp sgt i32 %156, %93
  %163 = select i1 %162, i32 %93, i32 %156
  %164 = select i1 %161, i32 %92, i32 %163
  store i32 %164, i32* %25, align 4
  %165 = insertelement <4 x i32> undef, i32 %133, i32 0
  %166 = insertelement <4 x i32> %165, i32 %99, i32 1
  %167 = insertelement <4 x i32> %166, i32 %123, i32 2
  %168 = insertelement <4 x i32> %167, i32 %133, i32 3
  %169 = insertelement <4 x i32> undef, i32 %144, i32 0
  %170 = insertelement <4 x i32> %169, i32 %123, i32 1
  %171 = insertelement <4 x i32> %170, i32 %99, i32 2
  %172 = insertelement <4 x i32> %171, i32 %144, i32 3
  %173 = add nsw <4 x i32> %168, %172
  %174 = sub nsw <4 x i32> %168, %172
  %175 = shufflevector <4 x i32> %173, <4 x i32> %174, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %176 = insertelement <4 x i32> undef, i32 %92, i32 0
  %177 = shufflevector <4 x i32> %176, <4 x i32> undef, <4 x i32> zeroinitializer
  %178 = icmp slt <4 x i32> %175, %177
  %179 = insertelement <4 x i32> undef, i32 %93, i32 0
  %180 = shufflevector <4 x i32> %179, <4 x i32> undef, <4 x i32> zeroinitializer
  %181 = icmp sgt <4 x i32> %175, %180
  %182 = select <4 x i1> %181, <4 x i32> %180, <4 x i32> %175
  %183 = select <4 x i1> %178, <4 x i32> %177, <4 x i32> %182
  %184 = bitcast i8* %19 to <4 x i32>*
  store <4 x i32> %183, <4 x i32>* %184, align 4
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %5) #4
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal fastcc void @_ZN7libgav13dsp12_GLOBAL__N_15Dct_CIiLi4EEEvPva(i8*, i8 signext) unnamed_addr #0 {
  %3 = alloca [16 x i32], align 16
  %4 = bitcast i8* %0 to i32*
  %5 = bitcast [16 x i32]* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 64, i8* nonnull %5) #4
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 16 %5, i8* align 4 %0, i64 64, i1 false)
  %6 = getelementptr inbounds [16 x i32], [16 x i32]* %3, i64 0, i64 0
  %7 = load i32, i32* %6, align 16
  store i32 %7, i32* %4, align 4
  %8 = getelementptr inbounds [16 x i32], [16 x i32]* %3, i64 0, i64 8
  %9 = load i32, i32* %8, align 16
  %10 = getelementptr inbounds i8, i8* %0, i64 4
  %11 = bitcast i8* %10 to i32*
  store i32 %9, i32* %11, align 4
  %12 = getelementptr inbounds [16 x i32], [16 x i32]* %3, i64 0, i64 4
  %13 = load i32, i32* %12, align 16
  %14 = getelementptr inbounds i8, i8* %0, i64 8
  %15 = bitcast i8* %14 to i32*
  store i32 %13, i32* %15, align 4
  %16 = getelementptr inbounds [16 x i32], [16 x i32]* %3, i64 0, i64 12
  %17 = load i32, i32* %16, align 16
  %18 = getelementptr inbounds i8, i8* %0, i64 12
  %19 = bitcast i8* %18 to i32*
  store i32 %17, i32* %19, align 4
  %20 = getelementptr inbounds [16 x i32], [16 x i32]* %3, i64 0, i64 2
  %21 = load i32, i32* %20, align 8
  %22 = getelementptr inbounds i8, i8* %0, i64 16
  %23 = bitcast i8* %22 to i32*
  store i32 %21, i32* %23, align 4
  %24 = getelementptr inbounds [16 x i32], [16 x i32]* %3, i64 0, i64 10
  %25 = load i32, i32* %24, align 8
  %26 = getelementptr inbounds i8, i8* %0, i64 20
  %27 = bitcast i8* %26 to i32*
  store i32 %25, i32* %27, align 4
  %28 = getelementptr inbounds [16 x i32], [16 x i32]* %3, i64 0, i64 6
  %29 = load i32, i32* %28, align 8
  %30 = getelementptr inbounds i8, i8* %0, i64 24
  %31 = bitcast i8* %30 to i32*
  store i32 %29, i32* %31, align 4
  %32 = getelementptr inbounds [16 x i32], [16 x i32]* %3, i64 0, i64 14
  %33 = load i32, i32* %32, align 8
  %34 = getelementptr inbounds i8, i8* %0, i64 28
  %35 = bitcast i8* %34 to i32*
  store i32 %33, i32* %35, align 4
  %36 = getelementptr inbounds [16 x i32], [16 x i32]* %3, i64 0, i64 1
  %37 = load i32, i32* %36, align 4
  %38 = getelementptr inbounds i8, i8* %0, i64 32
  %39 = bitcast i8* %38 to i32*
  store i32 %37, i32* %39, align 4
  %40 = getelementptr inbounds [16 x i32], [16 x i32]* %3, i64 0, i64 9
  %41 = load i32, i32* %40, align 4
  %42 = getelementptr inbounds i8, i8* %0, i64 36
  %43 = bitcast i8* %42 to i32*
  store i32 %41, i32* %43, align 4
  %44 = getelementptr inbounds [16 x i32], [16 x i32]* %3, i64 0, i64 5
  %45 = load i32, i32* %44, align 4
  %46 = getelementptr inbounds i8, i8* %0, i64 40
  %47 = bitcast i8* %46 to i32*
  store i32 %45, i32* %47, align 4
  %48 = getelementptr inbounds [16 x i32], [16 x i32]* %3, i64 0, i64 13
  %49 = load i32, i32* %48, align 4
  %50 = getelementptr inbounds i8, i8* %0, i64 44
  %51 = bitcast i8* %50 to i32*
  store i32 %49, i32* %51, align 4
  %52 = getelementptr inbounds [16 x i32], [16 x i32]* %3, i64 0, i64 3
  %53 = load i32, i32* %52, align 4
  %54 = getelementptr inbounds i8, i8* %0, i64 48
  %55 = bitcast i8* %54 to i32*
  store i32 %53, i32* %55, align 4
  %56 = getelementptr inbounds [16 x i32], [16 x i32]* %3, i64 0, i64 11
  %57 = load i32, i32* %56, align 4
  %58 = getelementptr inbounds i8, i8* %0, i64 52
  %59 = bitcast i8* %58 to i32*
  store i32 %57, i32* %59, align 4
  %60 = getelementptr inbounds [16 x i32], [16 x i32]* %3, i64 0, i64 7
  %61 = load i32, i32* %60, align 4
  %62 = getelementptr inbounds i8, i8* %0, i64 56
  %63 = bitcast i8* %62 to i32*
  store i32 %61, i32* %63, align 4
  %64 = getelementptr inbounds [16 x i32], [16 x i32]* %3, i64 0, i64 15
  %65 = load i32, i32* %64, align 4
  %66 = getelementptr inbounds i8, i8* %0, i64 60
  %67 = bitcast i8* %66 to i32*
  store i32 %65, i32* %67, align 4
  br label %68

68:                                               ; preds = %174, %2
  %69 = phi i64 [ 0, %2 ], [ %187, %174 ]
  %70 = add nuw nsw i64 %69, 8
  %71 = sub nuw nsw i64 15, %69
  %72 = sub nuw nsw i64 3, %69
  %73 = getelementptr inbounds [5 x [64 x i8]], [5 x [64 x i8]]* @_ZN7libgav13dsp12_GLOBAL__N_117kBitReverseLookupE, i64 0, i64 0, i64 %72
  %74 = load i8, i8* %73, align 1
  %75 = zext i8 %74 to i32
  %76 = shl nuw nsw i32 %75, 4
  %77 = or i32 %76, 12
  %78 = getelementptr inbounds i32, i32* %4, i64 %70
  %79 = load i32, i32* %78, align 4
  %80 = and i32 %77, 252
  %81 = icmp ult i32 %80, 65
  br i1 %81, label %82, label %86

82:                                               ; preds = %68
  %83 = zext i32 %80 to i64
  %84 = getelementptr inbounds [65 x i16], [65 x i16]* @_ZN7libgav13dsp12_GLOBAL__N_17kCos128E, i64 0, i64 %83
  %85 = load i16, i16* %84, align 8
  br label %107

86:                                               ; preds = %68
  %87 = icmp ult i32 %80, 129
  br i1 %87, label %88, label %94

88:                                               ; preds = %86
  %89 = sub nuw nsw i32 128, %80
  %90 = sext i32 %89 to i64
  %91 = getelementptr inbounds [65 x i16], [65 x i16]* @_ZN7libgav13dsp12_GLOBAL__N_17kCos128E, i64 0, i64 %90
  %92 = load i16, i16* %91, align 8
  %93 = sub i16 0, %92
  br label %107

94:                                               ; preds = %86
  %95 = icmp ult i32 %80, 193
  br i1 %95, label %96, label %102

96:                                               ; preds = %94
  %97 = add nsw i32 %80, -128
  %98 = sext i32 %97 to i64
  %99 = getelementptr inbounds [65 x i16], [65 x i16]* @_ZN7libgav13dsp12_GLOBAL__N_17kCos128E, i64 0, i64 %98
  %100 = load i16, i16* %99, align 8
  %101 = sub i16 0, %100
  br label %107

102:                                              ; preds = %94
  %103 = sub nuw nsw i32 256, %80
  %104 = zext i32 %103 to i64
  %105 = getelementptr inbounds [65 x i16], [65 x i16]* @_ZN7libgav13dsp12_GLOBAL__N_17kCos128E, i64 0, i64 %104
  %106 = load i16, i16* %105, align 8
  br label %107

107:                                              ; preds = %102, %96, %88, %82
  %108 = phi i16 [ %85, %82 ], [ %93, %88 ], [ %101, %96 ], [ %106, %102 ]
  %109 = sext i16 %108 to i32
  %110 = mul nsw i32 %79, %109
  %111 = sext i32 %110 to i64
  %112 = getelementptr inbounds i32, i32* %4, i64 %71
  %113 = load i32, i32* %112, align 4
  %114 = add nuw nsw i32 %77, 192
  %115 = and i32 %114, 252
  %116 = icmp ult i32 %115, 65
  br i1 %116, label %121, label %117

117:                                              ; preds = %107
  %118 = icmp ult i32 %115, 129
  br i1 %118, label %125, label %119

119:                                              ; preds = %117
  %120 = icmp ult i32 %115, 193
  br i1 %120, label %131, label %137

121:                                              ; preds = %107
  %122 = zext i32 %115 to i64
  %123 = getelementptr inbounds [65 x i16], [65 x i16]* @_ZN7libgav13dsp12_GLOBAL__N_17kCos128E, i64 0, i64 %122
  %124 = load i16, i16* %123, align 8
  br label %142

125:                                              ; preds = %117
  %126 = sub nuw nsw i32 128, %115
  %127 = sext i32 %126 to i64
  %128 = getelementptr inbounds [65 x i16], [65 x i16]* @_ZN7libgav13dsp12_GLOBAL__N_17kCos128E, i64 0, i64 %127
  %129 = load i16, i16* %128, align 8
  %130 = sub i16 0, %129
  br label %142

131:                                              ; preds = %119
  %132 = add nsw i32 %115, -128
  %133 = sext i32 %132 to i64
  %134 = getelementptr inbounds [65 x i16], [65 x i16]* @_ZN7libgav13dsp12_GLOBAL__N_17kCos128E, i64 0, i64 %133
  %135 = load i16, i16* %134, align 8
  %136 = sub i16 0, %135
  br label %142

137:                                              ; preds = %119
  %138 = sub nuw nsw i32 256, %115
  %139 = zext i32 %138 to i64
  %140 = getelementptr inbounds [65 x i16], [65 x i16]* @_ZN7libgav13dsp12_GLOBAL__N_17kCos128E, i64 0, i64 %139
  %141 = load i16, i16* %140, align 8
  br label %142

142:                                              ; preds = %137, %131, %125, %121
  %143 = phi i16 [ %124, %121 ], [ %130, %125 ], [ %136, %131 ], [ %141, %137 ]
  %144 = sext i16 %143 to i32
  %145 = mul nsw i32 %113, %144
  %146 = sext i32 %145 to i64
  %147 = mul nsw i32 %79, %144
  %148 = sext i32 %147 to i64
  br i1 %81, label %149, label %153

149:                                              ; preds = %142
  %150 = zext i32 %80 to i64
  %151 = getelementptr inbounds [65 x i16], [65 x i16]* @_ZN7libgav13dsp12_GLOBAL__N_17kCos128E, i64 0, i64 %150
  %152 = load i16, i16* %151, align 8
  br label %174

153:                                              ; preds = %142
  %154 = icmp ult i32 %80, 129
  br i1 %154, label %155, label %161

155:                                              ; preds = %153
  %156 = sub nuw nsw i32 128, %80
  %157 = sext i32 %156 to i64
  %158 = getelementptr inbounds [65 x i16], [65 x i16]* @_ZN7libgav13dsp12_GLOBAL__N_17kCos128E, i64 0, i64 %157
  %159 = load i16, i16* %158, align 8
  %160 = sub i16 0, %159
  br label %174

161:                                              ; preds = %153
  %162 = icmp ult i32 %80, 193
  br i1 %162, label %163, label %169

163:                                              ; preds = %161
  %164 = add nsw i32 %80, -128
  %165 = sext i32 %164 to i64
  %166 = getelementptr inbounds [65 x i16], [65 x i16]* @_ZN7libgav13dsp12_GLOBAL__N_17kCos128E, i64 0, i64 %165
  %167 = load i16, i16* %166, align 8
  %168 = sub i16 0, %167
  br label %174

169:                                              ; preds = %161
  %170 = sub nuw nsw i32 256, %80
  %171 = zext i32 %170 to i64
  %172 = getelementptr inbounds [65 x i16], [65 x i16]* @_ZN7libgav13dsp12_GLOBAL__N_17kCos128E, i64 0, i64 %171
  %173 = load i16, i16* %172, align 8
  br label %174

174:                                              ; preds = %149, %155, %163, %169
  %175 = phi i16 [ %152, %149 ], [ %160, %155 ], [ %168, %163 ], [ %173, %169 ]
  %176 = sext i16 %175 to i32
  %177 = mul nsw i32 %113, %176
  %178 = sext i32 %177 to i64
  %179 = add nsw i64 %111, 2048
  %180 = sub nsw i64 %179, %146
  %181 = lshr i64 %180, 12
  %182 = trunc i64 %181 to i32
  store i32 %182, i32* %78, align 4
  %183 = add nsw i64 %148, 2048
  %184 = add nsw i64 %183, %178
  %185 = lshr i64 %184, 12
  %186 = trunc i64 %185 to i32
  store i32 %186, i32* %112, align 4
  %187 = add nuw nsw i64 %69, 1
  %188 = icmp eq i64 %187, 4
  br i1 %188, label %189, label %68

189:                                              ; preds = %174
  %190 = load i32, i32* %23, align 4
  %191 = mul nsw i32 %190, 799
  %192 = sext i32 %191 to i64
  %193 = load i32, i32* %35, align 4
  %194 = mul nsw i32 %193, 4017
  %195 = sext i32 %194 to i64
  %196 = mul nsw i32 %190, 4017
  %197 = sext i32 %196 to i64
  %198 = mul nsw i32 %193, 799
  %199 = sext i32 %198 to i64
  %200 = add nsw i64 %192, 2048
  %201 = sub nsw i64 %200, %195
  %202 = lshr i64 %201, 12
  %203 = trunc i64 %202 to i32
  store i32 %203, i32* %23, align 4
  %204 = add nsw i64 %197, 2048
  %205 = add nsw i64 %204, %199
  %206 = lshr i64 %205, 12
  %207 = trunc i64 %206 to i32
  store i32 %207, i32* %35, align 4
  %208 = load i32, i32* %27, align 4
  %209 = mul nsw i32 %208, 3406
  %210 = sext i32 %209 to i64
  %211 = load i32, i32* %31, align 4
  %212 = mul nsw i32 %211, 2276
  %213 = sext i32 %212 to i64
  %214 = mul nsw i32 %208, 2276
  %215 = sext i32 %214 to i64
  %216 = mul nsw i32 %211, 3406
  %217 = sext i32 %216 to i64
  %218 = add nsw i64 %210, 2048
  %219 = sub nsw i64 %218, %213
  %220 = lshr i64 %219, 12
  %221 = trunc i64 %220 to i32
  store i32 %221, i32* %27, align 4
  %222 = add nsw i64 %215, 2048
  %223 = add nsw i64 %222, %217
  %224 = lshr i64 %223, 12
  %225 = trunc i64 %224 to i32
  store i32 %225, i32* %31, align 4
  %226 = add i8 %1, -1
  %227 = sext i8 %226 to i32
  %228 = shl i32 1, %227
  %229 = sub nsw i32 0, %228
  %230 = add nsw i32 %228, -1
  %231 = bitcast i8* %38 to <4 x i32>*
  %232 = load <4 x i32>, <4 x i32>* %231, align 4
  %233 = shufflevector <4 x i32> %232, <4 x i32> undef, <4 x i32> <i32 1, i32 0, i32 3, i32 2>
  %234 = add nsw <4 x i32> %233, %232
  %235 = sub nsw <4 x i32> %233, %232
  %236 = shufflevector <4 x i32> %234, <4 x i32> %235, <4 x i32> <i32 0, i32 5, i32 6, i32 3>
  %237 = insertelement <4 x i32> undef, i32 %229, i32 0
  %238 = shufflevector <4 x i32> %237, <4 x i32> undef, <4 x i32> zeroinitializer
  %239 = icmp slt <4 x i32> %236, %238
  %240 = insertelement <4 x i32> undef, i32 %230, i32 0
  %241 = shufflevector <4 x i32> %240, <4 x i32> undef, <4 x i32> zeroinitializer
  %242 = icmp sgt <4 x i32> %236, %241
  %243 = select <4 x i1> %242, <4 x i32> %241, <4 x i32> %236
  %244 = select <4 x i1> %239, <4 x i32> %238, <4 x i32> %243
  %245 = bitcast i8* %38 to <4 x i32>*
  store <4 x i32> %244, <4 x i32>* %245, align 4
  %246 = load i32, i32* %55, align 4
  %247 = load i32, i32* %59, align 4
  %248 = add nsw i32 %247, %246
  %249 = sub nsw i32 %246, %247
  %250 = icmp slt i32 %248, %229
  %251 = icmp sgt i32 %248, %230
  %252 = select i1 %251, i32 %230, i32 %248
  %253 = select i1 %250, i32 %229, i32 %252
  store i32 %253, i32* %55, align 4
  %254 = icmp slt i32 %249, %229
  %255 = icmp sgt i32 %249, %230
  %256 = select i1 %255, i32 %230, i32 %249
  %257 = select i1 %254, i32 %229, i32 %256
  %258 = load i32, i32* %67, align 4
  %259 = load i32, i32* %63, align 4
  %260 = add nsw i32 %259, %258
  %261 = sub nsw i32 %258, %259
  %262 = icmp slt i32 %260, %229
  %263 = icmp sgt i32 %260, %230
  %264 = select i1 %263, i32 %230, i32 %260
  %265 = select i1 %262, i32 %229, i32 %264
  store i32 %265, i32* %67, align 4
  %266 = icmp slt i32 %261, %229
  %267 = icmp sgt i32 %261, %230
  %268 = select i1 %267, i32 %230, i32 %261
  %269 = select i1 %266, i32 %229, i32 %268
  %270 = load i32, i32* %4, align 4
  %271 = mul nsw i32 %270, 2896
  %272 = sext i32 %271 to i64
  %273 = load i32, i32* %11, align 4
  %274 = mul nsw i32 %273, 2896
  %275 = sext i32 %274 to i64
  %276 = sub nsw i64 %272, %275
  %277 = add nsw i64 %275, %272
  %278 = add nsw i64 %277, 2048
  %279 = lshr i64 %278, 12
  %280 = trunc i64 %279 to i32
  %281 = add nsw i64 %276, 2048
  %282 = lshr i64 %281, 12
  %283 = trunc i64 %282 to i32
  %284 = load i32, i32* %15, align 4
  %285 = mul nsw i32 %284, 1567
  %286 = sext i32 %285 to i64
  %287 = load i32, i32* %19, align 4
  %288 = mul nsw i32 %287, 3784
  %289 = sext i32 %288 to i64
  %290 = sub nsw i64 %286, %289
  %291 = mul nsw i32 %284, 3784
  %292 = sext i32 %291 to i64
  %293 = mul nsw i32 %287, 1567
  %294 = sext i32 %293 to i64
  %295 = add nsw i64 %294, %292
  %296 = add nsw i64 %290, 2048
  %297 = lshr i64 %296, 12
  %298 = trunc i64 %297 to i32
  %299 = add nsw i64 %295, 2048
  %300 = lshr i64 %299, 12
  %301 = trunc i64 %300 to i32
  %302 = add nsw i32 %221, %203
  %303 = sub nsw i32 %203, %221
  %304 = icmp slt i32 %302, %229
  %305 = icmp sgt i32 %302, %230
  %306 = select i1 %305, i32 %230, i32 %302
  %307 = select i1 %304, i32 %229, i32 %306
  store i32 %307, i32* %23, align 4
  %308 = icmp slt i32 %303, %229
  %309 = icmp sgt i32 %303, %230
  %310 = select i1 %309, i32 %230, i32 %303
  %311 = select i1 %308, i32 %229, i32 %310
  %312 = add nsw i32 %225, %207
  %313 = sub nsw i32 %207, %225
  %314 = icmp slt i32 %312, %229
  %315 = icmp sgt i32 %312, %230
  %316 = select i1 %315, i32 %230, i32 %312
  %317 = select i1 %314, i32 %229, i32 %316
  store i32 %317, i32* %35, align 4
  %318 = icmp slt i32 %313, %229
  %319 = icmp sgt i32 %313, %230
  %320 = select i1 %319, i32 %230, i32 %313
  %321 = select i1 %318, i32 %229, i32 %320
  %322 = mul nsw i32 %269, 1567
  %323 = sext i32 %322 to i64
  %324 = extractelement <4 x i32> %244, i32 1
  %325 = mul nsw i32 %324, 3784
  %326 = sext i32 %325 to i64
  %327 = mul nsw i32 %269, 3784
  %328 = sext i32 %327 to i64
  %329 = mul nsw i32 %324, 1567
  %330 = sext i32 %329 to i64
  %331 = add nsw i64 %328, 2048
  %332 = add nsw i64 %331, %330
  %333 = lshr i64 %332, 12
  %334 = trunc i64 %333 to i32
  store i32 %334, i32* %63, align 4
  %335 = add nsw i64 %323, 2048
  %336 = sub nsw i64 %335, %326
  %337 = lshr i64 %336, 12
  %338 = trunc i64 %337 to i32
  %339 = mul nsw i32 %257, -3784
  %340 = sext i32 %339 to i64
  %341 = extractelement <4 x i32> %244, i32 2
  %342 = mul nsw i32 %341, 1567
  %343 = sext i32 %342 to i64
  %344 = mul nsw i32 %257, 1567
  %345 = sext i32 %344 to i64
  %346 = mul nsw i32 %341, -3784
  %347 = sext i32 %346 to i64
  %348 = add nsw i64 %345, 2048
  %349 = add nsw i64 %348, %347
  %350 = lshr i64 %349, 12
  %351 = trunc i64 %350 to i32
  %352 = add nsw i64 %340, 2048
  %353 = sub nsw i64 %352, %343
  %354 = lshr i64 %353, 12
  %355 = trunc i64 %354 to i32
  %356 = sub nsw i32 %280, %301
  %357 = icmp slt i32 %356, %229
  %358 = icmp sgt i32 %356, %230
  %359 = select i1 %358, i32 %230, i32 %356
  %360 = select i1 %357, i32 %229, i32 %359
  store i32 %360, i32* %19, align 4
  %361 = mul nsw i32 %321, 2896
  %362 = sext i32 %361 to i64
  %363 = mul nsw i32 %311, 2896
  %364 = sext i32 %363 to i64
  %365 = add nsw i64 %362, 2048
  %366 = add nsw i64 %365, %364
  %367 = lshr i64 %366, 12
  %368 = trunc i64 %367 to i32
  %369 = sub nsw i64 %365, %364
  %370 = lshr i64 %369, 12
  %371 = trunc i64 %370 to i32
  %372 = extractelement <4 x i32> %244, i32 0
  %373 = extractelement <4 x i32> %244, i32 3
  %374 = add nsw i32 %373, %372
  %375 = sub nsw i32 %372, %373
  %376 = icmp slt i32 %374, %229
  %377 = icmp sgt i32 %374, %230
  %378 = select i1 %377, i32 %230, i32 %374
  %379 = select i1 %376, i32 %229, i32 %378
  store i32 %379, i32* %39, align 4
  %380 = icmp slt i32 %375, %229
  %381 = icmp sgt i32 %375, %230
  %382 = select i1 %381, i32 %230, i32 %375
  %383 = select i1 %380, i32 %229, i32 %382
  store i32 %383, i32* %51, align 4
  %384 = add nsw i32 %355, %338
  %385 = sub nsw i32 %338, %355
  %386 = icmp slt i32 %384, %229
  %387 = icmp sgt i32 %384, %230
  %388 = select i1 %387, i32 %230, i32 %384
  %389 = select i1 %386, i32 %229, i32 %388
  store i32 %389, i32* %43, align 4
  %390 = icmp slt i32 %385, %229
  %391 = icmp sgt i32 %385, %230
  %392 = select i1 %391, i32 %230, i32 %385
  %393 = select i1 %390, i32 %229, i32 %392
  %394 = sub nsw i32 %265, %253
  %395 = load i32, i32* %19, align 4
  %396 = load i32, i32* %23, align 4
  %397 = insertelement <4 x i32> undef, i32 %253, i32 0
  %398 = insertelement <4 x i32> %397, i32 %351, i32 1
  %399 = insertelement <4 x i32> undef, i32 %395, i32 0
  %400 = insertelement <4 x i32> %399, i32 %283, i32 1
  %401 = insertelement <4 x i32> %400, i32 %298, i32 2
  %402 = insertelement <4 x i32> %401, i32 %301, i32 3
  %403 = insertelement <4 x i32> undef, i32 %396, i32 0
  %404 = insertelement <4 x i32> %403, i32 %298, i32 1
  %405 = insertelement <4 x i32> %404, i32 %283, i32 2
  %406 = insertelement <4 x i32> %405, i32 %280, i32 3
  %407 = sub nsw <4 x i32> %402, %406
  %408 = add nsw <4 x i32> %402, %406
  %409 = shufflevector <4 x i32> %407, <4 x i32> %408, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %410 = icmp slt <4 x i32> %409, %238
  %411 = icmp sgt <4 x i32> %409, %241
  %412 = select <4 x i1> %411, <4 x i32> %241, <4 x i32> %409
  %413 = select <4 x i1> %410, <4 x i32> %238, <4 x i32> %412
  %414 = extractelement <4 x i32> %413, i32 1
  %415 = insertelement <4 x i32> %398, i32 %414, i32 2
  %416 = insertelement <4 x i32> %415, i32 %396, i32 3
  %417 = insertelement <4 x i32> undef, i32 %265, i32 0
  %418 = insertelement <4 x i32> %417, i32 %334, i32 1
  %419 = insertelement <4 x i32> %418, i32 %371, i32 2
  %420 = insertelement <4 x i32> %419, i32 %395, i32 3
  %421 = add nsw <4 x i32> %416, %420
  %422 = icmp slt <4 x i32> %421, %238
  %423 = icmp sgt <4 x i32> %421, %241
  %424 = select <4 x i1> %423, <4 x i32> %241, <4 x i32> %421
  %425 = select <4 x i1> %422, <4 x i32> %238, <4 x i32> %424
  %426 = extractelement <4 x i32> %425, i32 0
  store i32 %426, i32* %67, align 4
  %427 = icmp slt i32 %394, %229
  %428 = icmp sgt i32 %394, %230
  %429 = select i1 %428, i32 %230, i32 %394
  %430 = select i1 %427, i32 %229, i32 %429
  %431 = sub nsw i32 %334, %351
  %432 = extractelement <4 x i32> %425, i32 1
  store i32 %432, i32* %63, align 4
  %433 = icmp slt i32 %431, %229
  %434 = icmp sgt i32 %431, %230
  %435 = select i1 %434, i32 %230, i32 %431
  %436 = select i1 %433, i32 %229, i32 %435
  %437 = load i32, i32* %35, align 4
  %438 = extractelement <4 x i32> %413, i32 3
  %439 = add nsw i32 %437, %438
  %440 = icmp slt i32 %439, %229
  %441 = icmp sgt i32 %439, %230
  %442 = select i1 %441, i32 %230, i32 %439
  %443 = select i1 %440, i32 %229, i32 %442
  %444 = extractelement <4 x i32> %413, i32 2
  %445 = add nsw i32 %444, %368
  %446 = icmp slt i32 %445, %229
  %447 = icmp sgt i32 %445, %230
  %448 = select i1 %447, i32 %230, i32 %445
  %449 = select i1 %446, i32 %229, i32 %448
  %450 = mul nsw i32 %436, 2896
  %451 = sext i32 %450 to i64
  %452 = mul nsw i32 %393, 2896
  %453 = sext i32 %452 to i64
  %454 = add nsw i64 %451, 2048
  %455 = add nsw i64 %454, %453
  %456 = lshr i64 %455, 12
  %457 = trunc i64 %456 to i32
  %458 = sub nsw i64 %454, %453
  %459 = lshr i64 %458, 12
  %460 = trunc i64 %459 to i32
  %461 = mul nsw i32 %430, 2896
  %462 = sext i32 %461 to i64
  %463 = load i32, i32* %51, align 4
  %464 = mul nsw i32 %463, 2896
  %465 = sext i32 %464 to i64
  %466 = add nsw i64 %462, 2048
  %467 = add nsw i64 %466, %465
  %468 = lshr i64 %467, 12
  %469 = trunc i64 %468 to i32
  %470 = sub nsw i64 %466, %465
  %471 = lshr i64 %470, 12
  %472 = trunc i64 %471 to i32
  %473 = sub nsw i32 %443, %426
  %474 = icmp slt i32 %473, %229
  %475 = icmp sgt i32 %473, %230
  %476 = select i1 %475, i32 %230, i32 %473
  %477 = select i1 %474, i32 %229, i32 %476
  store i32 %477, i32* %67, align 4
  %478 = sub nsw i32 %449, %432
  %479 = icmp slt i32 %478, %229
  %480 = icmp sgt i32 %478, %230
  %481 = select i1 %480, i32 %230, i32 %478
  %482 = select i1 %479, i32 %229, i32 %481
  store i32 %482, i32* %63, align 4
  %483 = extractelement <4 x i32> %425, i32 2
  %484 = sub nsw i32 %483, %457
  %485 = icmp slt i32 %484, %229
  %486 = icmp sgt i32 %484, %230
  %487 = select i1 %486, i32 %230, i32 %484
  %488 = select i1 %485, i32 %229, i32 %487
  store i32 %488, i32* %59, align 4
  %489 = insertelement <4 x i32> undef, i32 %443, i32 0
  %490 = insertelement <4 x i32> %489, i32 %449, i32 1
  %491 = insertelement <4 x i32> %490, i32 %457, i32 2
  %492 = insertelement <4 x i32> %491, i32 %469, i32 3
  %493 = add nsw <4 x i32> %425, %492
  %494 = extractelement <4 x i32> %425, i32 3
  %495 = sub nsw i32 %494, %469
  %496 = icmp slt <4 x i32> %493, %238
  %497 = icmp sgt <4 x i32> %493, %241
  %498 = select <4 x i1> %497, <4 x i32> %241, <4 x i32> %493
  %499 = select <4 x i1> %496, <4 x i32> %238, <4 x i32> %498
  %500 = bitcast i8* %0 to <4 x i32>*
  store <4 x i32> %499, <4 x i32>* %500, align 4
  %501 = icmp slt i32 %495, %229
  %502 = icmp sgt i32 %495, %230
  %503 = select i1 %502, i32 %230, i32 %495
  %504 = select i1 %501, i32 %229, i32 %503
  store i32 %504, i32* %55, align 4
  %505 = insertelement <4 x i32> undef, i32 %472, i32 0
  %506 = insertelement <4 x i32> %505, i32 %371, i32 1
  %507 = insertelement <4 x i32> %506, i32 %368, i32 2
  %508 = insertelement <4 x i32> %507, i32 %437, i32 3
  %509 = add nsw <4 x i32> %413, %508
  %510 = sub nsw <4 x i32> %413, %508
  %511 = shufflevector <4 x i32> %509, <4 x i32> %510, <4 x i32> <i32 0, i32 5, i32 6, i32 7>
  %512 = extractelement <4 x i32> %413, i32 0
  %513 = sub nsw i32 %512, %472
  %514 = icmp slt <4 x i32> %511, %238
  %515 = icmp sgt <4 x i32> %511, %241
  %516 = select <4 x i1> %515, <4 x i32> %241, <4 x i32> %511
  %517 = select <4 x i1> %514, <4 x i32> %238, <4 x i32> %516
  %518 = bitcast i8* %22 to <4 x i32>*
  store <4 x i32> %517, <4 x i32>* %518, align 4
  %519 = icmp slt i32 %513, %229
  %520 = icmp sgt i32 %513, %230
  %521 = select i1 %520, i32 %230, i32 %513
  %522 = select i1 %519, i32 %229, i32 %521
  store i32 %522, i32* %51, align 4
  %523 = bitcast i8* %26 to <4 x i32>*
  %524 = load <4 x i32>, <4 x i32>* %523, align 4
  %525 = extractelement <4 x i32> %524, i32 0
  %526 = sub nsw i32 %525, %460
  %527 = icmp slt i32 %526, %229
  %528 = icmp sgt i32 %526, %230
  %529 = select i1 %528, i32 %230, i32 %526
  %530 = select i1 %527, i32 %229, i32 %529
  store i32 %530, i32* %47, align 4
  %531 = load i32, i32* %43, align 4
  %532 = extractelement <4 x i32> %524, i32 1
  %533 = sub nsw i32 %532, %531
  %534 = icmp slt i32 %533, %229
  %535 = icmp sgt i32 %533, %230
  %536 = select i1 %535, i32 %230, i32 %533
  %537 = select i1 %534, i32 %229, i32 %536
  store i32 %537, i32* %43, align 4
  %538 = insertelement <4 x i32> undef, i32 %460, i32 0
  %539 = insertelement <4 x i32> %538, i32 %531, i32 1
  %540 = shufflevector <4 x i32> %539, <4 x i32> %524, <4 x i32> <i32 0, i32 1, i32 7, i32 6>
  %541 = add nsw <4 x i32> %540, %524
  %542 = sub nsw <4 x i32> %540, %524
  %543 = shufflevector <4 x i32> %541, <4 x i32> %542, <4 x i32> <i32 0, i32 1, i32 2, i32 7>
  %544 = icmp slt <4 x i32> %543, %238
  %545 = icmp sgt <4 x i32> %543, %241
  %546 = select <4 x i1> %545, <4 x i32> %241, <4 x i32> %543
  %547 = select <4 x i1> %544, <4 x i32> %238, <4 x i32> %546
  %548 = bitcast i8* %26 to <4 x i32>*
  store <4 x i32> %547, <4 x i32>* %548, align 4
  call void @llvm.lifetime.end.p0i8(i64 64, i8* nonnull %5) #4
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal fastcc void @_ZN7libgav13dsp12_GLOBAL__N_111DctDcOnly_CILi10EiLi5EEEvPvabib(i8* nocapture, i1 zeroext, i32, i1 zeroext) unnamed_addr #3 {
  %5 = bitcast i8* %0 to i32*
  %6 = and i1 %1, %3
  %7 = load i32, i32* %5, align 4
  br i1 %6, label %8, label %12

8:                                                ; preds = %4
  %9 = mul nsw i32 %7, 2896
  %10 = add nsw i32 %9, 2048
  %11 = ashr i32 %10, 12
  store i32 %11, i32* %5, align 4
  br label %12

12:                                               ; preds = %4, %8
  %13 = phi i32 [ %11, %8 ], [ %7, %4 ]
  %14 = mul nsw i32 %13, 2896
  %15 = sext i32 %14 to i64
  %16 = add nsw i64 %15, 2048
  %17 = ashr i64 %16, 12
  %18 = trunc i64 %17 to i32
  store i32 %18, i32* %5, align 4
  %19 = getelementptr inbounds i8, i8* %0, i64 4
  %20 = bitcast i8* %19 to i32*
  store i32 %18, i32* %20, align 4
  %21 = icmp sgt i32 %2, 0
  %22 = and i1 %21, %3
  br i1 %22, label %23, label %28

23:                                               ; preds = %12
  %24 = shl i32 1, %2
  %25 = ashr i32 %24, 1
  %26 = add nsw i32 %25, %18
  %27 = ashr i32 %26, %2
  store i32 %27, i32* %5, align 4
  br label %28

28:                                               ; preds = %23, %12
  %29 = phi i32 [ %27, %23 ], [ %18, %12 ]
  %30 = icmp slt i32 %29, 32767
  %31 = select i1 %30, i32 %29, i32 32767
  %32 = icmp sgt i32 %31, -32768
  %33 = select i1 %32, i32 %31, i32 -32768
  %34 = insertelement <4 x i32> undef, i32 %33, i32 0
  %35 = shufflevector <4 x i32> %34, <4 x i32> undef, <4 x i32> zeroinitializer
  %36 = bitcast i8* %0 to <4 x i32>*
  store <4 x i32> %35, <4 x i32>* %36, align 4
  %37 = getelementptr inbounds i8, i8* %0, i64 16
  %38 = bitcast i8* %37 to <4 x i32>*
  store <4 x i32> %35, <4 x i32>* %38, align 4
  %39 = getelementptr inbounds i8, i8* %0, i64 32
  %40 = bitcast i8* %39 to <4 x i32>*
  store <4 x i32> %35, <4 x i32>* %40, align 4
  %41 = getelementptr inbounds i8, i8* %0, i64 48
  %42 = bitcast i8* %41 to <4 x i32>*
  store <4 x i32> %35, <4 x i32>* %42, align 4
  %43 = getelementptr inbounds i8, i8* %0, i64 64
  %44 = bitcast i8* %43 to <4 x i32>*
  store <4 x i32> %35, <4 x i32>* %44, align 4
  %45 = getelementptr inbounds i8, i8* %0, i64 80
  %46 = bitcast i8* %45 to <4 x i32>*
  store <4 x i32> %35, <4 x i32>* %46, align 4
  %47 = getelementptr inbounds i8, i8* %0, i64 96
  %48 = bitcast i8* %47 to <4 x i32>*
  store <4 x i32> %35, <4 x i32>* %48, align 4
  %49 = getelementptr inbounds i8, i8* %0, i64 112
  %50 = bitcast i8* %49 to <4 x i32>*
  store <4 x i32> %35, <4 x i32>* %50, align 4
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal fastcc void @_ZN7libgav13dsp12_GLOBAL__N_15Dct_CIiLi5EEEvPva(i8*, i8 signext) unnamed_addr #0 {
  %3 = alloca [32 x i32], align 16
  %4 = bitcast i8* %0 to i32*
  %5 = bitcast [32 x i32]* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 128, i8* nonnull %5) #4
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 16 %5, i8* align 4 %0, i64 128, i1 false)
  br label %6

6:                                                ; preds = %6, %2
  %7 = phi i64 [ 0, %2 ], [ %35, %6 ]
  %8 = getelementptr inbounds [5 x [64 x i8]], [5 x [64 x i8]]* @_ZN7libgav13dsp12_GLOBAL__N_117kBitReverseLookupE, i64 0, i64 3, i64 %7
  %9 = load i8, i8* %8, align 4
  %10 = zext i8 %9 to i64
  %11 = getelementptr inbounds [32 x i32], [32 x i32]* %3, i64 0, i64 %10
  %12 = load i32, i32* %11, align 4
  %13 = getelementptr inbounds i32, i32* %4, i64 %7
  store i32 %12, i32* %13, align 4
  %14 = or i64 %7, 1
  %15 = getelementptr inbounds [5 x [64 x i8]], [5 x [64 x i8]]* @_ZN7libgav13dsp12_GLOBAL__N_117kBitReverseLookupE, i64 0, i64 3, i64 %14
  %16 = load i8, i8* %15, align 1
  %17 = zext i8 %16 to i64
  %18 = getelementptr inbounds [32 x i32], [32 x i32]* %3, i64 0, i64 %17
  %19 = load i32, i32* %18, align 4
  %20 = getelementptr inbounds i32, i32* %4, i64 %14
  store i32 %19, i32* %20, align 4
  %21 = or i64 %7, 2
  %22 = getelementptr inbounds [5 x [64 x i8]], [5 x [64 x i8]]* @_ZN7libgav13dsp12_GLOBAL__N_117kBitReverseLookupE, i64 0, i64 3, i64 %21
  %23 = load i8, i8* %22, align 2
  %24 = zext i8 %23 to i64
  %25 = getelementptr inbounds [32 x i32], [32 x i32]* %3, i64 0, i64 %24
  %26 = load i32, i32* %25, align 4
  %27 = getelementptr inbounds i32, i32* %4, i64 %21
  store i32 %26, i32* %27, align 4
  %28 = or i64 %7, 3
  %29 = getelementptr inbounds [5 x [64 x i8]], [5 x [64 x i8]]* @_ZN7libgav13dsp12_GLOBAL__N_117kBitReverseLookupE, i64 0, i64 3, i64 %28
  %30 = load i8, i8* %29, align 1
  %31 = zext i8 %30 to i64
  %32 = getelementptr inbounds [32 x i32], [32 x i32]* %3, i64 0, i64 %31
  %33 = load i32, i32* %32, align 4
  %34 = getelementptr inbounds i32, i32* %4, i64 %28
  store i32 %33, i32* %34, align 4
  %35 = add nuw nsw i64 %7, 4
  %36 = icmp eq i64 %35, 32
  br i1 %36, label %37, label %6

37:                                               ; preds = %6, %143
  %38 = phi i64 [ %156, %143 ], [ 0, %6 ]
  %39 = add nuw nsw i64 %38, 16
  %40 = sub nuw nsw i64 31, %38
  %41 = sub nuw nsw i64 7, %38
  %42 = getelementptr inbounds [5 x [64 x i8]], [5 x [64 x i8]]* @_ZN7libgav13dsp12_GLOBAL__N_117kBitReverseLookupE, i64 0, i64 1, i64 %41
  %43 = load i8, i8* %42, align 1
  %44 = zext i8 %43 to i32
  %45 = shl nuw nsw i32 %44, 3
  %46 = or i32 %45, 6
  %47 = getelementptr inbounds i32, i32* %4, i64 %39
  %48 = load i32, i32* %47, align 4
  %49 = and i32 %46, 254
  %50 = icmp ult i32 %49, 65
  br i1 %50, label %51, label %55

51:                                               ; preds = %37
  %52 = zext i32 %49 to i64
  %53 = getelementptr inbounds [65 x i16], [65 x i16]* @_ZN7libgav13dsp12_GLOBAL__N_17kCos128E, i64 0, i64 %52
  %54 = load i16, i16* %53, align 4
  br label %76

55:                                               ; preds = %37
  %56 = icmp ult i32 %49, 129
  br i1 %56, label %57, label %63

57:                                               ; preds = %55
  %58 = sub nuw nsw i32 128, %49
  %59 = sext i32 %58 to i64
  %60 = getelementptr inbounds [65 x i16], [65 x i16]* @_ZN7libgav13dsp12_GLOBAL__N_17kCos128E, i64 0, i64 %59
  %61 = load i16, i16* %60, align 4
  %62 = sub i16 0, %61
  br label %76

63:                                               ; preds = %55
  %64 = icmp ult i32 %49, 193
  br i1 %64, label %65, label %71

65:                                               ; preds = %63
  %66 = add nsw i32 %49, -128
  %67 = sext i32 %66 to i64
  %68 = getelementptr inbounds [65 x i16], [65 x i16]* @_ZN7libgav13dsp12_GLOBAL__N_17kCos128E, i64 0, i64 %67
  %69 = load i16, i16* %68, align 4
  %70 = sub i16 0, %69
  br label %76

71:                                               ; preds = %63
  %72 = sub nuw nsw i32 256, %49
  %73 = zext i32 %72 to i64
  %74 = getelementptr inbounds [65 x i16], [65 x i16]* @_ZN7libgav13dsp12_GLOBAL__N_17kCos128E, i64 0, i64 %73
  %75 = load i16, i16* %74, align 4
  br label %76

76:                                               ; preds = %71, %65, %57, %51
  %77 = phi i16 [ %54, %51 ], [ %62, %57 ], [ %70, %65 ], [ %75, %71 ]
  %78 = sext i16 %77 to i32
  %79 = mul nsw i32 %48, %78
  %80 = sext i32 %79 to i64
  %81 = getelementptr inbounds i32, i32* %4, i64 %40
  %82 = load i32, i32* %81, align 4
  %83 = add nuw nsw i32 %46, 192
  %84 = and i32 %83, 254
  %85 = icmp ult i32 %84, 65
  br i1 %85, label %90, label %86

86:                                               ; preds = %76
  %87 = icmp ult i32 %84, 129
  br i1 %87, label %94, label %88

88:                                               ; preds = %86
  %89 = icmp ult i32 %84, 193
  br i1 %89, label %100, label %106

90:                                               ; preds = %76
  %91 = zext i32 %84 to i64
  %92 = getelementptr inbounds [65 x i16], [65 x i16]* @_ZN7libgav13dsp12_GLOBAL__N_17kCos128E, i64 0, i64 %91
  %93 = load i16, i16* %92, align 4
  br label %111

94:                                               ; preds = %86
  %95 = sub nuw nsw i32 128, %84
  %96 = sext i32 %95 to i64
  %97 = getelementptr inbounds [65 x i16], [65 x i16]* @_ZN7libgav13dsp12_GLOBAL__N_17kCos128E, i64 0, i64 %96
  %98 = load i16, i16* %97, align 4
  %99 = sub i16 0, %98
  br label %111

100:                                              ; preds = %88
  %101 = add nsw i32 %84, -128
  %102 = sext i32 %101 to i64
  %103 = getelementptr inbounds [65 x i16], [65 x i16]* @_ZN7libgav13dsp12_GLOBAL__N_17kCos128E, i64 0, i64 %102
  %104 = load i16, i16* %103, align 4
  %105 = sub i16 0, %104
  br label %111

106:                                              ; preds = %88
  %107 = sub nuw nsw i32 256, %84
  %108 = zext i32 %107 to i64
  %109 = getelementptr inbounds [65 x i16], [65 x i16]* @_ZN7libgav13dsp12_GLOBAL__N_17kCos128E, i64 0, i64 %108
  %110 = load i16, i16* %109, align 4
  br label %111

111:                                              ; preds = %106, %100, %94, %90
  %112 = phi i16 [ %93, %90 ], [ %99, %94 ], [ %105, %100 ], [ %110, %106 ]
  %113 = sext i16 %112 to i32
  %114 = mul nsw i32 %82, %113
  %115 = sext i32 %114 to i64
  %116 = mul nsw i32 %48, %113
  %117 = sext i32 %116 to i64
  br i1 %50, label %118, label %122

118:                                              ; preds = %111
  %119 = zext i32 %49 to i64
  %120 = getelementptr inbounds [65 x i16], [65 x i16]* @_ZN7libgav13dsp12_GLOBAL__N_17kCos128E, i64 0, i64 %119
  %121 = load i16, i16* %120, align 4
  br label %143

122:                                              ; preds = %111
  %123 = icmp ult i32 %49, 129
  br i1 %123, label %124, label %130

124:                                              ; preds = %122
  %125 = sub nuw nsw i32 128, %49
  %126 = sext i32 %125 to i64
  %127 = getelementptr inbounds [65 x i16], [65 x i16]* @_ZN7libgav13dsp12_GLOBAL__N_17kCos128E, i64 0, i64 %126
  %128 = load i16, i16* %127, align 4
  %129 = sub i16 0, %128
  br label %143

130:                                              ; preds = %122
  %131 = icmp ult i32 %49, 193
  br i1 %131, label %132, label %138

132:                                              ; preds = %130
  %133 = add nsw i32 %49, -128
  %134 = sext i32 %133 to i64
  %135 = getelementptr inbounds [65 x i16], [65 x i16]* @_ZN7libgav13dsp12_GLOBAL__N_17kCos128E, i64 0, i64 %134
  %136 = load i16, i16* %135, align 4
  %137 = sub i16 0, %136
  br label %143

138:                                              ; preds = %130
  %139 = sub nuw nsw i32 256, %49
  %140 = zext i32 %139 to i64
  %141 = getelementptr inbounds [65 x i16], [65 x i16]* @_ZN7libgav13dsp12_GLOBAL__N_17kCos128E, i64 0, i64 %140
  %142 = load i16, i16* %141, align 4
  br label %143

143:                                              ; preds = %118, %124, %132, %138
  %144 = phi i16 [ %121, %118 ], [ %129, %124 ], [ %137, %132 ], [ %142, %138 ]
  %145 = sext i16 %144 to i32
  %146 = mul nsw i32 %82, %145
  %147 = sext i32 %146 to i64
  %148 = add nsw i64 %80, 2048
  %149 = sub nsw i64 %148, %115
  %150 = lshr i64 %149, 12
  %151 = trunc i64 %150 to i32
  store i32 %151, i32* %47, align 4
  %152 = add nsw i64 %117, 2048
  %153 = add nsw i64 %152, %147
  %154 = lshr i64 %153, 12
  %155 = trunc i64 %154 to i32
  store i32 %155, i32* %81, align 4
  %156 = add nuw nsw i64 %38, 1
  %157 = icmp eq i64 %156, 8
  br i1 %157, label %158, label %37

158:                                              ; preds = %143, %264
  %159 = phi i64 [ %277, %264 ], [ 0, %143 ]
  %160 = add nuw nsw i64 %159, 8
  %161 = sub nuw nsw i64 15, %159
  %162 = sub nuw nsw i64 3, %159
  %163 = getelementptr inbounds [5 x [64 x i8]], [5 x [64 x i8]]* @_ZN7libgav13dsp12_GLOBAL__N_117kBitReverseLookupE, i64 0, i64 0, i64 %162
  %164 = load i8, i8* %163, align 1
  %165 = zext i8 %164 to i32
  %166 = shl nuw nsw i32 %165, 4
  %167 = or i32 %166, 12
  %168 = getelementptr inbounds i32, i32* %4, i64 %160
  %169 = load i32, i32* %168, align 4
  %170 = and i32 %167, 252
  %171 = icmp ult i32 %170, 65
  br i1 %171, label %172, label %176

172:                                              ; preds = %158
  %173 = zext i32 %170 to i64
  %174 = getelementptr inbounds [65 x i16], [65 x i16]* @_ZN7libgav13dsp12_GLOBAL__N_17kCos128E, i64 0, i64 %173
  %175 = load i16, i16* %174, align 8
  br label %197

176:                                              ; preds = %158
  %177 = icmp ult i32 %170, 129
  br i1 %177, label %178, label %184

178:                                              ; preds = %176
  %179 = sub nuw nsw i32 128, %170
  %180 = sext i32 %179 to i64
  %181 = getelementptr inbounds [65 x i16], [65 x i16]* @_ZN7libgav13dsp12_GLOBAL__N_17kCos128E, i64 0, i64 %180
  %182 = load i16, i16* %181, align 8
  %183 = sub i16 0, %182
  br label %197

184:                                              ; preds = %176
  %185 = icmp ult i32 %170, 193
  br i1 %185, label %186, label %192

186:                                              ; preds = %184
  %187 = add nsw i32 %170, -128
  %188 = sext i32 %187 to i64
  %189 = getelementptr inbounds [65 x i16], [65 x i16]* @_ZN7libgav13dsp12_GLOBAL__N_17kCos128E, i64 0, i64 %188
  %190 = load i16, i16* %189, align 8
  %191 = sub i16 0, %190
  br label %197

192:                                              ; preds = %184
  %193 = sub nuw nsw i32 256, %170
  %194 = zext i32 %193 to i64
  %195 = getelementptr inbounds [65 x i16], [65 x i16]* @_ZN7libgav13dsp12_GLOBAL__N_17kCos128E, i64 0, i64 %194
  %196 = load i16, i16* %195, align 8
  br label %197

197:                                              ; preds = %192, %186, %178, %172
  %198 = phi i16 [ %175, %172 ], [ %183, %178 ], [ %191, %186 ], [ %196, %192 ]
  %199 = sext i16 %198 to i32
  %200 = mul nsw i32 %169, %199
  %201 = sext i32 %200 to i64
  %202 = getelementptr inbounds i32, i32* %4, i64 %161
  %203 = load i32, i32* %202, align 4
  %204 = add nuw nsw i32 %167, 192
  %205 = and i32 %204, 252
  %206 = icmp ult i32 %205, 65
  br i1 %206, label %211, label %207

207:                                              ; preds = %197
  %208 = icmp ult i32 %205, 129
  br i1 %208, label %215, label %209

209:                                              ; preds = %207
  %210 = icmp ult i32 %205, 193
  br i1 %210, label %221, label %227

211:                                              ; preds = %197
  %212 = zext i32 %205 to i64
  %213 = getelementptr inbounds [65 x i16], [65 x i16]* @_ZN7libgav13dsp12_GLOBAL__N_17kCos128E, i64 0, i64 %212
  %214 = load i16, i16* %213, align 8
  br label %232

215:                                              ; preds = %207
  %216 = sub nuw nsw i32 128, %205
  %217 = sext i32 %216 to i64
  %218 = getelementptr inbounds [65 x i16], [65 x i16]* @_ZN7libgav13dsp12_GLOBAL__N_17kCos128E, i64 0, i64 %217
  %219 = load i16, i16* %218, align 8
  %220 = sub i16 0, %219
  br label %232

221:                                              ; preds = %209
  %222 = add nsw i32 %205, -128
  %223 = sext i32 %222 to i64
  %224 = getelementptr inbounds [65 x i16], [65 x i16]* @_ZN7libgav13dsp12_GLOBAL__N_17kCos128E, i64 0, i64 %223
  %225 = load i16, i16* %224, align 8
  %226 = sub i16 0, %225
  br label %232

227:                                              ; preds = %209
  %228 = sub nuw nsw i32 256, %205
  %229 = zext i32 %228 to i64
  %230 = getelementptr inbounds [65 x i16], [65 x i16]* @_ZN7libgav13dsp12_GLOBAL__N_17kCos128E, i64 0, i64 %229
  %231 = load i16, i16* %230, align 8
  br label %232

232:                                              ; preds = %227, %221, %215, %211
  %233 = phi i16 [ %214, %211 ], [ %220, %215 ], [ %226, %221 ], [ %231, %227 ]
  %234 = sext i16 %233 to i32
  %235 = mul nsw i32 %203, %234
  %236 = sext i32 %235 to i64
  %237 = mul nsw i32 %169, %234
  %238 = sext i32 %237 to i64
  br i1 %171, label %239, label %243

239:                                              ; preds = %232
  %240 = zext i32 %170 to i64
  %241 = getelementptr inbounds [65 x i16], [65 x i16]* @_ZN7libgav13dsp12_GLOBAL__N_17kCos128E, i64 0, i64 %240
  %242 = load i16, i16* %241, align 8
  br label %264

243:                                              ; preds = %232
  %244 = icmp ult i32 %170, 129
  br i1 %244, label %245, label %251

245:                                              ; preds = %243
  %246 = sub nuw nsw i32 128, %170
  %247 = sext i32 %246 to i64
  %248 = getelementptr inbounds [65 x i16], [65 x i16]* @_ZN7libgav13dsp12_GLOBAL__N_17kCos128E, i64 0, i64 %247
  %249 = load i16, i16* %248, align 8
  %250 = sub i16 0, %249
  br label %264

251:                                              ; preds = %243
  %252 = icmp ult i32 %170, 193
  br i1 %252, label %253, label %259

253:                                              ; preds = %251
  %254 = add nsw i32 %170, -128
  %255 = sext i32 %254 to i64
  %256 = getelementptr inbounds [65 x i16], [65 x i16]* @_ZN7libgav13dsp12_GLOBAL__N_17kCos128E, i64 0, i64 %255
  %257 = load i16, i16* %256, align 8
  %258 = sub i16 0, %257
  br label %264

259:                                              ; preds = %251
  %260 = sub nuw nsw i32 256, %170
  %261 = zext i32 %260 to i64
  %262 = getelementptr inbounds [65 x i16], [65 x i16]* @_ZN7libgav13dsp12_GLOBAL__N_17kCos128E, i64 0, i64 %261
  %263 = load i16, i16* %262, align 8
  br label %264

264:                                              ; preds = %239, %245, %253, %259
  %265 = phi i16 [ %242, %239 ], [ %250, %245 ], [ %258, %253 ], [ %263, %259 ]
  %266 = sext i16 %265 to i32
  %267 = mul nsw i32 %203, %266
  %268 = sext i32 %267 to i64
  %269 = add nsw i64 %201, 2048
  %270 = sub nsw i64 %269, %236
  %271 = lshr i64 %270, 12
  %272 = trunc i64 %271 to i32
  store i32 %272, i32* %168, align 4
  %273 = add nsw i64 %238, 2048
  %274 = add nsw i64 %273, %268
  %275 = lshr i64 %274, 12
  %276 = trunc i64 %275 to i32
  store i32 %276, i32* %202, align 4
  %277 = add nuw nsw i64 %159, 1
  %278 = icmp eq i64 %277, 4
  br i1 %278, label %299, label %158

279:                                              ; preds = %280
  call void @llvm.lifetime.end.p0i8(i64 128, i8* nonnull %5) #4
  ret void

280:                                              ; preds = %280, %299
  %281 = phi i64 [ 0, %299 ], [ %297, %280 ]
  %282 = sub nuw nsw i64 31, %281
  %283 = getelementptr inbounds i32, i32* %4, i64 %281
  %284 = load i32, i32* %283, align 4
  %285 = getelementptr inbounds i32, i32* %4, i64 %282
  %286 = load i32, i32* %285, align 4
  %287 = add nsw i32 %286, %284
  %288 = sub nsw i32 %284, %286
  %289 = icmp slt i32 %287, %303
  %290 = icmp sgt i32 %287, %304
  %291 = select i1 %290, i32 %304, i32 %287
  %292 = select i1 %289, i32 %303, i32 %291
  store i32 %292, i32* %283, align 4
  %293 = icmp slt i32 %288, %303
  %294 = icmp sgt i32 %288, %304
  %295 = select i1 %294, i32 %304, i32 %288
  %296 = select i1 %293, i32 %303, i32 %295
  store i32 %296, i32* %285, align 4
  %297 = add nuw nsw i64 %281, 1
  %298 = icmp eq i64 %297, 16
  br i1 %298, label %279, label %280

299:                                              ; preds = %264
  %300 = add i8 %1, -1
  %301 = sext i8 %300 to i32
  %302 = shl i32 1, %301
  %303 = sub nsw i32 0, %302
  %304 = add nsw i32 %302, -1
  %305 = getelementptr inbounds i8, i8* %0, i64 64
  %306 = bitcast i8* %305 to i32*
  %307 = getelementptr inbounds i8, i8* %0, i64 68
  %308 = bitcast i8* %307 to i32*
  %309 = getelementptr inbounds i8, i8* %0, i64 76
  %310 = bitcast i8* %309 to i32*
  %311 = getelementptr inbounds i8, i8* %0, i64 72
  %312 = bitcast i8* %311 to i32*
  %313 = bitcast i8* %305 to <4 x i32>*
  %314 = load <4 x i32>, <4 x i32>* %313, align 4
  %315 = shufflevector <4 x i32> %314, <4 x i32> undef, <4 x i32> <i32 1, i32 0, i32 3, i32 2>
  %316 = add nsw <4 x i32> %315, %314
  %317 = sub nsw <4 x i32> %315, %314
  %318 = shufflevector <4 x i32> %316, <4 x i32> %317, <4 x i32> <i32 0, i32 5, i32 6, i32 3>
  %319 = insertelement <4 x i32> undef, i32 %303, i32 0
  %320 = shufflevector <4 x i32> %319, <4 x i32> undef, <4 x i32> zeroinitializer
  %321 = icmp slt <4 x i32> %318, %320
  %322 = insertelement <4 x i32> undef, i32 %304, i32 0
  %323 = shufflevector <4 x i32> %322, <4 x i32> undef, <4 x i32> zeroinitializer
  %324 = icmp sgt <4 x i32> %318, %323
  %325 = select <4 x i1> %324, <4 x i32> %323, <4 x i32> %318
  %326 = select <4 x i1> %321, <4 x i32> %320, <4 x i32> %325
  %327 = bitcast i8* %305 to <4 x i32>*
  store <4 x i32> %326, <4 x i32>* %327, align 4
  %328 = getelementptr inbounds i8, i8* %0, i64 80
  %329 = bitcast i8* %328 to i32*
  %330 = getelementptr inbounds i8, i8* %0, i64 84
  %331 = bitcast i8* %330 to i32*
  %332 = getelementptr inbounds i8, i8* %0, i64 92
  %333 = bitcast i8* %332 to i32*
  %334 = getelementptr inbounds i8, i8* %0, i64 88
  %335 = bitcast i8* %334 to i32*
  %336 = bitcast i8* %328 to <4 x i32>*
  %337 = load <4 x i32>, <4 x i32>* %336, align 4
  %338 = shufflevector <4 x i32> %337, <4 x i32> undef, <4 x i32> <i32 1, i32 0, i32 3, i32 2>
  %339 = add nsw <4 x i32> %338, %337
  %340 = sub nsw <4 x i32> %338, %337
  %341 = shufflevector <4 x i32> %339, <4 x i32> %340, <4 x i32> <i32 0, i32 5, i32 6, i32 3>
  %342 = icmp slt <4 x i32> %341, %320
  %343 = icmp sgt <4 x i32> %341, %323
  %344 = select <4 x i1> %343, <4 x i32> %323, <4 x i32> %341
  %345 = select <4 x i1> %342, <4 x i32> %320, <4 x i32> %344
  %346 = bitcast i8* %328 to <4 x i32>*
  store <4 x i32> %345, <4 x i32>* %346, align 4
  %347 = getelementptr inbounds i8, i8* %0, i64 96
  %348 = bitcast i8* %347 to i32*
  %349 = getelementptr inbounds i8, i8* %0, i64 100
  %350 = bitcast i8* %349 to i32*
  %351 = getelementptr inbounds i8, i8* %0, i64 108
  %352 = bitcast i8* %351 to i32*
  %353 = getelementptr inbounds i8, i8* %0, i64 104
  %354 = bitcast i8* %353 to i32*
  %355 = bitcast i8* %347 to <4 x i32>*
  %356 = load <4 x i32>, <4 x i32>* %355, align 4
  %357 = shufflevector <4 x i32> %356, <4 x i32> undef, <4 x i32> <i32 1, i32 0, i32 3, i32 2>
  %358 = add nsw <4 x i32> %357, %356
  %359 = sub nsw <4 x i32> %357, %356
  %360 = shufflevector <4 x i32> %358, <4 x i32> %359, <4 x i32> <i32 0, i32 5, i32 6, i32 3>
  %361 = icmp slt <4 x i32> %360, %320
  %362 = icmp sgt <4 x i32> %360, %323
  %363 = select <4 x i1> %362, <4 x i32> %323, <4 x i32> %360
  %364 = select <4 x i1> %361, <4 x i32> %320, <4 x i32> %363
  %365 = bitcast i8* %347 to <4 x i32>*
  store <4 x i32> %364, <4 x i32>* %365, align 4
  %366 = getelementptr inbounds i8, i8* %0, i64 112
  %367 = bitcast i8* %366 to i32*
  %368 = getelementptr inbounds i8, i8* %0, i64 116
  %369 = bitcast i8* %368 to i32*
  %370 = getelementptr inbounds i8, i8* %0, i64 124
  %371 = bitcast i8* %370 to i32*
  %372 = getelementptr inbounds i8, i8* %0, i64 120
  %373 = bitcast i8* %372 to i32*
  %374 = bitcast i8* %366 to <4 x i32>*
  %375 = load <4 x i32>, <4 x i32>* %374, align 4
  %376 = shufflevector <4 x i32> %375, <4 x i32> undef, <4 x i32> <i32 1, i32 0, i32 3, i32 2>
  %377 = add nsw <4 x i32> %376, %375
  %378 = sub nsw <4 x i32> %376, %375
  %379 = shufflevector <4 x i32> %377, <4 x i32> %378, <4 x i32> <i32 0, i32 5, i32 6, i32 3>
  %380 = icmp slt <4 x i32> %379, %320
  %381 = icmp sgt <4 x i32> %379, %323
  %382 = select <4 x i1> %381, <4 x i32> %323, <4 x i32> %379
  %383 = select <4 x i1> %380, <4 x i32> %320, <4 x i32> %382
  %384 = bitcast i8* %366 to <4 x i32>*
  store <4 x i32> %383, <4 x i32>* %384, align 4
  %385 = getelementptr inbounds i8, i8* %0, i64 16
  %386 = bitcast i8* %385 to i32*
  %387 = load i32, i32* %386, align 4
  %388 = mul nsw i32 %387, 799
  %389 = sext i32 %388 to i64
  %390 = getelementptr inbounds i8, i8* %0, i64 28
  %391 = bitcast i8* %390 to i32*
  %392 = load i32, i32* %391, align 4
  %393 = mul nsw i32 %392, 4017
  %394 = sext i32 %393 to i64
  %395 = mul nsw i32 %387, 4017
  %396 = sext i32 %395 to i64
  %397 = mul nsw i32 %392, 799
  %398 = sext i32 %397 to i64
  %399 = add nsw i64 %389, 2048
  %400 = sub nsw i64 %399, %394
  %401 = lshr i64 %400, 12
  %402 = trunc i64 %401 to i32
  store i32 %402, i32* %386, align 4
  %403 = add nsw i64 %396, 2048
  %404 = add nsw i64 %403, %398
  %405 = lshr i64 %404, 12
  %406 = trunc i64 %405 to i32
  store i32 %406, i32* %391, align 4
  %407 = getelementptr inbounds i8, i8* %0, i64 20
  %408 = bitcast i8* %407 to i32*
  %409 = load i32, i32* %408, align 4
  %410 = mul nsw i32 %409, 3406
  %411 = sext i32 %410 to i64
  %412 = getelementptr inbounds i8, i8* %0, i64 24
  %413 = bitcast i8* %412 to i32*
  %414 = load i32, i32* %413, align 4
  %415 = mul nsw i32 %414, 2276
  %416 = sext i32 %415 to i64
  %417 = mul nsw i32 %409, 2276
  %418 = sext i32 %417 to i64
  %419 = mul nsw i32 %414, 3406
  %420 = sext i32 %419 to i64
  %421 = add nsw i64 %411, 2048
  %422 = sub nsw i64 %421, %416
  %423 = lshr i64 %422, 12
  %424 = trunc i64 %423 to i32
  store i32 %424, i32* %408, align 4
  %425 = add nsw i64 %418, 2048
  %426 = add nsw i64 %425, %420
  %427 = lshr i64 %426, 12
  %428 = trunc i64 %427 to i32
  store i32 %428, i32* %413, align 4
  %429 = getelementptr inbounds i8, i8* %0, i64 32
  %430 = bitcast i8* %429 to i32*
  %431 = getelementptr inbounds i8, i8* %0, i64 36
  %432 = bitcast i8* %431 to i32*
  %433 = getelementptr inbounds i8, i8* %0, i64 44
  %434 = bitcast i8* %433 to i32*
  %435 = getelementptr inbounds i8, i8* %0, i64 40
  %436 = bitcast i8* %435 to i32*
  %437 = bitcast i8* %429 to <4 x i32>*
  %438 = load <4 x i32>, <4 x i32>* %437, align 4
  %439 = shufflevector <4 x i32> %438, <4 x i32> undef, <4 x i32> <i32 1, i32 0, i32 3, i32 2>
  %440 = add nsw <4 x i32> %439, %438
  %441 = sub nsw <4 x i32> %439, %438
  %442 = shufflevector <4 x i32> %440, <4 x i32> %441, <4 x i32> <i32 0, i32 5, i32 6, i32 3>
  %443 = icmp slt <4 x i32> %442, %320
  %444 = icmp sgt <4 x i32> %442, %323
  %445 = select <4 x i1> %444, <4 x i32> %323, <4 x i32> %442
  %446 = select <4 x i1> %443, <4 x i32> %320, <4 x i32> %445
  %447 = bitcast i8* %429 to <4 x i32>*
  store <4 x i32> %446, <4 x i32>* %447, align 4
  %448 = getelementptr inbounds i8, i8* %0, i64 48
  %449 = bitcast i8* %448 to i32*
  %450 = getelementptr inbounds i8, i8* %0, i64 52
  %451 = bitcast i8* %450 to i32*
  %452 = getelementptr inbounds i8, i8* %0, i64 60
  %453 = bitcast i8* %452 to i32*
  %454 = getelementptr inbounds i8, i8* %0, i64 56
  %455 = bitcast i8* %454 to i32*
  %456 = bitcast i8* %448 to <4 x i32>*
  %457 = load <4 x i32>, <4 x i32>* %456, align 4
  %458 = shufflevector <4 x i32> %457, <4 x i32> undef, <4 x i32> <i32 1, i32 0, i32 3, i32 2>
  %459 = add nsw <4 x i32> %458, %457
  %460 = sub nsw <4 x i32> %458, %457
  %461 = shufflevector <4 x i32> %459, <4 x i32> %460, <4 x i32> <i32 0, i32 5, i32 6, i32 3>
  %462 = icmp slt <4 x i32> %461, %320
  %463 = icmp sgt <4 x i32> %461, %323
  %464 = select <4 x i1> %463, <4 x i32> %323, <4 x i32> %461
  %465 = select <4 x i1> %462, <4 x i32> %320, <4 x i32> %464
  %466 = bitcast i8* %448 to <4 x i32>*
  store <4 x i32> %465, <4 x i32>* %466, align 4
  %467 = extractelement <4 x i32> %383, i32 2
  %468 = mul nsw i32 %467, 799
  %469 = sext i32 %468 to i64
  %470 = load i32, i32* %308, align 4
  %471 = mul nsw i32 %470, 4017
  %472 = sext i32 %471 to i64
  %473 = mul nsw i32 %467, 4017
  %474 = sext i32 %473 to i64
  %475 = mul nsw i32 %470, 799
  %476 = sext i32 %475 to i64
  %477 = add nsw i64 %474, 2048
  %478 = add nsw i64 %477, %476
  %479 = lshr i64 %478, 12
  %480 = trunc i64 %479 to i32
  store i32 %480, i32* %373, align 4
  %481 = add nsw i64 %469, 2048
  %482 = sub nsw i64 %481, %472
  %483 = lshr i64 %482, 12
  %484 = trunc i64 %483 to i32
  store i32 %484, i32* %308, align 4
  %485 = extractelement <4 x i32> %383, i32 1
  %486 = mul nsw i32 %485, -4017
  %487 = sext i32 %486 to i64
  %488 = load i32, i32* %312, align 4
  %489 = mul nsw i32 %488, 799
  %490 = sext i32 %489 to i64
  %491 = mul nsw i32 %485, 799
  %492 = sext i32 %491 to i64
  %493 = mul nsw i32 %488, -4017
  %494 = sext i32 %493 to i64
  %495 = add nsw i64 %492, 2048
  %496 = add nsw i64 %495, %494
  %497 = lshr i64 %496, 12
  %498 = trunc i64 %497 to i32
  store i32 %498, i32* %369, align 4
  %499 = add nsw i64 %487, 2048
  %500 = sub nsw i64 %499, %490
  %501 = lshr i64 %500, 12
  %502 = trunc i64 %501 to i32
  store i32 %502, i32* %312, align 4
  %503 = extractelement <4 x i32> %364, i32 2
  %504 = mul nsw i32 %503, 3406
  %505 = sext i32 %504 to i64
  %506 = extractelement <4 x i32> %345, i32 1
  %507 = mul nsw i32 %506, 2276
  %508 = sext i32 %507 to i64
  %509 = mul nsw i32 %503, 2276
  %510 = sext i32 %509 to i64
  %511 = mul nsw i32 %506, 3406
  %512 = sext i32 %511 to i64
  %513 = add nsw i64 %510, 2048
  %514 = add nsw i64 %513, %512
  %515 = lshr i64 %514, 12
  %516 = trunc i64 %515 to i32
  store i32 %516, i32* %354, align 4
  %517 = add nsw i64 %505, 2048
  %518 = sub nsw i64 %517, %508
  %519 = lshr i64 %518, 12
  %520 = trunc i64 %519 to i32
  store i32 %520, i32* %331, align 4
  %521 = extractelement <4 x i32> %364, i32 1
  %522 = mul nsw i32 %521, -2276
  %523 = sext i32 %522 to i64
  %524 = extractelement <4 x i32> %345, i32 2
  %525 = mul nsw i32 %524, 3406
  %526 = sext i32 %525 to i64
  %527 = mul nsw i32 %521, 3406
  %528 = sext i32 %527 to i64
  %529 = mul nsw i32 %524, -2276
  %530 = sext i32 %529 to i64
  %531 = add nsw i64 %528, 2048
  %532 = add nsw i64 %531, %530
  %533 = lshr i64 %532, 12
  %534 = trunc i64 %533 to i32
  store i32 %534, i32* %350, align 4
  %535 = add nsw i64 %523, 2048
  %536 = sub nsw i64 %535, %526
  %537 = lshr i64 %536, 12
  %538 = trunc i64 %537 to i32
  store i32 %538, i32* %335, align 4
  %539 = load i32, i32* %4, align 4
  %540 = mul nsw i32 %539, 2896
  %541 = sext i32 %540 to i64
  %542 = getelementptr inbounds i8, i8* %0, i64 4
  %543 = bitcast i8* %542 to i32*
  %544 = load i32, i32* %543, align 4
  %545 = mul nsw i32 %544, 2896
  %546 = sext i32 %545 to i64
  %547 = sub nsw i64 %541, %546
  %548 = add nsw i64 %546, %541
  %549 = add nsw i64 %548, 2048
  %550 = lshr i64 %549, 12
  %551 = trunc i64 %550 to i32
  store i32 %551, i32* %4, align 4
  %552 = add nsw i64 %547, 2048
  %553 = lshr i64 %552, 12
  %554 = trunc i64 %553 to i32
  store i32 %554, i32* %543, align 4
  %555 = getelementptr inbounds i8, i8* %0, i64 8
  %556 = bitcast i8* %555 to i32*
  %557 = load i32, i32* %556, align 4
  %558 = mul nsw i32 %557, 1567
  %559 = sext i32 %558 to i64
  %560 = getelementptr inbounds i8, i8* %0, i64 12
  %561 = bitcast i8* %560 to i32*
  %562 = load i32, i32* %561, align 4
  %563 = mul nsw i32 %562, 3784
  %564 = sext i32 %563 to i64
  %565 = sub nsw i64 %559, %564
  %566 = mul nsw i32 %557, 3784
  %567 = sext i32 %566 to i64
  %568 = mul nsw i32 %562, 1567
  %569 = sext i32 %568 to i64
  %570 = add nsw i64 %569, %567
  %571 = add nsw i64 %565, 2048
  %572 = lshr i64 %571, 12
  %573 = trunc i64 %572 to i32
  store i32 %573, i32* %556, align 4
  %574 = add nsw i64 %570, 2048
  %575 = lshr i64 %574, 12
  %576 = trunc i64 %575 to i32
  store i32 %576, i32* %561, align 4
  %577 = add nsw i32 %424, %402
  %578 = sub nsw i32 %402, %424
  %579 = icmp slt i32 %577, %303
  %580 = icmp sgt i32 %577, %304
  %581 = select i1 %580, i32 %304, i32 %577
  %582 = select i1 %579, i32 %303, i32 %581
  store i32 %582, i32* %386, align 4
  %583 = icmp slt i32 %578, %303
  %584 = icmp sgt i32 %578, %304
  %585 = select i1 %584, i32 %304, i32 %578
  %586 = select i1 %583, i32 %303, i32 %585
  store i32 %586, i32* %408, align 4
  %587 = add nsw i32 %428, %406
  %588 = sub nsw i32 %406, %428
  %589 = icmp slt i32 %587, %303
  %590 = icmp sgt i32 %587, %304
  %591 = select i1 %590, i32 %304, i32 %587
  %592 = select i1 %589, i32 %303, i32 %591
  store i32 %592, i32* %391, align 4
  %593 = icmp slt i32 %588, %303
  %594 = icmp sgt i32 %588, %304
  %595 = select i1 %594, i32 %304, i32 %588
  %596 = select i1 %593, i32 %303, i32 %595
  store i32 %596, i32* %413, align 4
  %597 = extractelement <4 x i32> %465, i32 2
  %598 = mul nsw i32 %597, 1567
  %599 = sext i32 %598 to i64
  %600 = extractelement <4 x i32> %446, i32 1
  %601 = mul nsw i32 %600, 3784
  %602 = sext i32 %601 to i64
  %603 = mul nsw i32 %597, 3784
  %604 = sext i32 %603 to i64
  %605 = mul nsw i32 %600, 1567
  %606 = sext i32 %605 to i64
  %607 = add nsw i64 %604, 2048
  %608 = add nsw i64 %607, %606
  %609 = lshr i64 %608, 12
  %610 = trunc i64 %609 to i32
  store i32 %610, i32* %455, align 4
  %611 = add nsw i64 %599, 2048
  %612 = sub nsw i64 %611, %602
  %613 = lshr i64 %612, 12
  %614 = trunc i64 %613 to i32
  store i32 %614, i32* %432, align 4
  %615 = extractelement <4 x i32> %465, i32 1
  %616 = mul nsw i32 %615, -3784
  %617 = sext i32 %616 to i64
  %618 = extractelement <4 x i32> %446, i32 2
  %619 = mul nsw i32 %618, 1567
  %620 = sext i32 %619 to i64
  %621 = mul nsw i32 %615, 1567
  %622 = sext i32 %621 to i64
  %623 = mul nsw i32 %618, -3784
  %624 = sext i32 %623 to i64
  %625 = add nsw i64 %622, 2048
  %626 = add nsw i64 %625, %624
  %627 = lshr i64 %626, 12
  %628 = trunc i64 %627 to i32
  store i32 %628, i32* %451, align 4
  %629 = add nsw i64 %617, 2048
  %630 = sub nsw i64 %629, %620
  %631 = lshr i64 %630, 12
  %632 = trunc i64 %631 to i32
  store i32 %632, i32* %436, align 4
  %633 = load i32, i32* %306, align 4
  %634 = load i32, i32* %310, align 4
  %635 = insertelement <4 x i32> undef, i32 %634, i32 0
  %636 = insertelement <4 x i32> %635, i32 %502, i32 1
  %637 = insertelement <4 x i32> %636, i32 %484, i32 2
  %638 = insertelement <4 x i32> %637, i32 %633, i32 3
  %639 = insertelement <4 x i32> undef, i32 %633, i32 0
  %640 = insertelement <4 x i32> %639, i32 %484, i32 1
  %641 = insertelement <4 x i32> %640, i32 %502, i32 2
  %642 = insertelement <4 x i32> %641, i32 %634, i32 3
  %643 = add nsw <4 x i32> %638, %642
  %644 = sub nsw <4 x i32> %638, %642
  %645 = shufflevector <4 x i32> %643, <4 x i32> %644, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %646 = icmp slt <4 x i32> %645, %320
  %647 = icmp sgt <4 x i32> %645, %323
  %648 = select <4 x i1> %647, <4 x i32> %323, <4 x i32> %645
  %649 = select <4 x i1> %646, <4 x i32> %320, <4 x i32> %648
  %650 = bitcast i8* %305 to <4 x i32>*
  store <4 x i32> %649, <4 x i32>* %650, align 4
  %651 = extractelement <4 x i32> %345, i32 0
  %652 = extractelement <4 x i32> %345, i32 3
  %653 = insertelement <4 x i32> undef, i32 %652, i32 0
  %654 = insertelement <4 x i32> %653, i32 %538, i32 1
  %655 = insertelement <4 x i32> %654, i32 %520, i32 2
  %656 = shufflevector <4 x i32> %655, <4 x i32> %345, <4 x i32> <i32 0, i32 1, i32 2, i32 4>
  %657 = insertelement <4 x i32> undef, i32 %651, i32 0
  %658 = insertelement <4 x i32> %657, i32 %520, i32 1
  %659 = insertelement <4 x i32> %658, i32 %538, i32 2
  %660 = shufflevector <4 x i32> %659, <4 x i32> %345, <4 x i32> <i32 0, i32 1, i32 2, i32 7>
  %661 = sub nsw <4 x i32> %656, %660
  %662 = add nsw <4 x i32> %656, %660
  %663 = shufflevector <4 x i32> %661, <4 x i32> %662, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %664 = icmp slt <4 x i32> %663, %320
  %665 = icmp sgt <4 x i32> %663, %323
  %666 = select <4 x i1> %665, <4 x i32> %323, <4 x i32> %663
  %667 = select <4 x i1> %664, <4 x i32> %320, <4 x i32> %666
  %668 = bitcast i8* %328 to <4 x i32>*
  store <4 x i32> %667, <4 x i32>* %668, align 4
  %669 = extractelement <4 x i32> %364, i32 0
  %670 = extractelement <4 x i32> %364, i32 3
  %671 = insertelement <4 x i32> undef, i32 %670, i32 0
  %672 = insertelement <4 x i32> %671, i32 %516, i32 1
  %673 = insertelement <4 x i32> %672, i32 %534, i32 2
  %674 = shufflevector <4 x i32> %673, <4 x i32> %364, <4 x i32> <i32 0, i32 1, i32 2, i32 4>
  %675 = insertelement <4 x i32> undef, i32 %669, i32 0
  %676 = insertelement <4 x i32> %675, i32 %534, i32 1
  %677 = insertelement <4 x i32> %676, i32 %516, i32 2
  %678 = shufflevector <4 x i32> %677, <4 x i32> %364, <4 x i32> <i32 0, i32 1, i32 2, i32 7>
  %679 = add nsw <4 x i32> %674, %678
  %680 = sub nsw <4 x i32> %674, %678
  %681 = shufflevector <4 x i32> %679, <4 x i32> %680, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %682 = icmp slt <4 x i32> %681, %320
  %683 = icmp sgt <4 x i32> %681, %323
  %684 = select <4 x i1> %683, <4 x i32> %323, <4 x i32> %681
  %685 = select <4 x i1> %682, <4 x i32> %320, <4 x i32> %684
  %686 = bitcast i8* %347 to <4 x i32>*
  store <4 x i32> %685, <4 x i32>* %686, align 4
  %687 = extractelement <4 x i32> %383, i32 0
  %688 = extractelement <4 x i32> %383, i32 3
  %689 = insertelement <4 x i32> undef, i32 %688, i32 0
  %690 = insertelement <4 x i32> %689, i32 %480, i32 1
  %691 = insertelement <4 x i32> %690, i32 %498, i32 2
  %692 = shufflevector <4 x i32> %691, <4 x i32> %383, <4 x i32> <i32 0, i32 1, i32 2, i32 4>
  %693 = insertelement <4 x i32> undef, i32 %687, i32 0
  %694 = insertelement <4 x i32> %693, i32 %498, i32 1
  %695 = insertelement <4 x i32> %694, i32 %480, i32 2
  %696 = shufflevector <4 x i32> %695, <4 x i32> %383, <4 x i32> <i32 0, i32 1, i32 2, i32 7>
  %697 = sub nsw <4 x i32> %692, %696
  %698 = add nsw <4 x i32> %692, %696
  %699 = shufflevector <4 x i32> %697, <4 x i32> %698, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %700 = icmp slt <4 x i32> %699, %320
  %701 = icmp sgt <4 x i32> %699, %323
  %702 = select <4 x i1> %701, <4 x i32> %323, <4 x i32> %699
  %703 = select <4 x i1> %700, <4 x i32> %320, <4 x i32> %702
  %704 = bitcast i8* %366 to <4 x i32>*
  store <4 x i32> %703, <4 x i32>* %704, align 4
  %705 = bitcast i8* %0 to <4 x i32>*
  %706 = load <4 x i32>, <4 x i32>* %705, align 4
  %707 = shufflevector <4 x i32> %706, <4 x i32> undef, <4 x i32> <i32 3, i32 2, i32 1, i32 0>
  %708 = add nsw <4 x i32> %707, %706
  %709 = sub nsw <4 x i32> %707, %706
  %710 = shufflevector <4 x i32> %708, <4 x i32> %709, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %711 = icmp slt <4 x i32> %710, %320
  %712 = icmp sgt <4 x i32> %710, %323
  %713 = select <4 x i1> %712, <4 x i32> %323, <4 x i32> %710
  %714 = select <4 x i1> %711, <4 x i32> %320, <4 x i32> %713
  %715 = bitcast i8* %0 to <4 x i32>*
  store <4 x i32> %714, <4 x i32>* %715, align 4
  %716 = getelementptr inbounds i8, i8* %0, i64 24
  %717 = bitcast i8* %716 to i32*
  %718 = load i32, i32* %717, align 4
  %719 = mul nsw i32 %718, 2896
  %720 = sext i32 %719 to i64
  %721 = getelementptr inbounds i8, i8* %0, i64 20
  %722 = bitcast i8* %721 to i32*
  %723 = load i32, i32* %722, align 4
  %724 = mul nsw i32 %723, 2896
  %725 = sext i32 %724 to i64
  %726 = add nsw i64 %720, 2048
  %727 = add nsw i64 %726, %725
  %728 = lshr i64 %727, 12
  %729 = trunc i64 %728 to i32
  store i32 %729, i32* %717, align 4
  %730 = sub nsw i64 %726, %725
  %731 = lshr i64 %730, 12
  %732 = trunc i64 %731 to i32
  store i32 %732, i32* %722, align 4
  %733 = bitcast i8* %429 to <4 x i32>*
  %734 = load <4 x i32>, <4 x i32>* %733, align 4
  %735 = shufflevector <4 x i32> %734, <4 x i32> undef, <4 x i32> <i32 3, i32 2, i32 1, i32 0>
  %736 = add nsw <4 x i32> %735, %734
  %737 = sub nsw <4 x i32> %735, %734
  %738 = shufflevector <4 x i32> %736, <4 x i32> %737, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %739 = icmp slt <4 x i32> %738, %320
  %740 = icmp sgt <4 x i32> %738, %323
  %741 = select <4 x i1> %740, <4 x i32> %323, <4 x i32> %738
  %742 = select <4 x i1> %739, <4 x i32> %320, <4 x i32> %741
  %743 = bitcast i8* %429 to <4 x i32>*
  store <4 x i32> %742, <4 x i32>* %743, align 4
  %744 = bitcast i8* %448 to <4 x i32>*
  %745 = load <4 x i32>, <4 x i32>* %744, align 4
  %746 = shufflevector <4 x i32> %745, <4 x i32> undef, <4 x i32> <i32 3, i32 2, i32 1, i32 0>
  %747 = sub nsw <4 x i32> %746, %745
  %748 = add nsw <4 x i32> %746, %745
  %749 = shufflevector <4 x i32> %747, <4 x i32> %748, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %750 = icmp slt <4 x i32> %749, %320
  %751 = icmp sgt <4 x i32> %749, %323
  %752 = select <4 x i1> %751, <4 x i32> %323, <4 x i32> %749
  %753 = select <4 x i1> %750, <4 x i32> %320, <4 x i32> %752
  %754 = bitcast i8* %448 to <4 x i32>*
  store <4 x i32> %753, <4 x i32>* %754, align 4
  %755 = load i32, i32* %369, align 4
  %756 = mul nsw i32 %755, 1567
  %757 = sext i32 %756 to i64
  %758 = load i32, i32* %312, align 4
  %759 = mul nsw i32 %758, 3784
  %760 = sext i32 %759 to i64
  %761 = mul nsw i32 %755, 3784
  %762 = sext i32 %761 to i64
  %763 = mul nsw i32 %758, 1567
  %764 = sext i32 %763 to i64
  %765 = add nsw i64 %762, 2048
  %766 = add nsw i64 %765, %764
  %767 = lshr i64 %766, 12
  %768 = trunc i64 %767 to i32
  store i32 %768, i32* %369, align 4
  %769 = add nsw i64 %757, 2048
  %770 = sub nsw i64 %769, %760
  %771 = lshr i64 %770, 12
  %772 = trunc i64 %771 to i32
  store i32 %772, i32* %312, align 4
  %773 = load i32, i32* %367, align 4
  %774 = mul nsw i32 %773, 1567
  %775 = sext i32 %774 to i64
  %776 = load i32, i32* %310, align 4
  %777 = mul nsw i32 %776, 3784
  %778 = sext i32 %777 to i64
  %779 = mul nsw i32 %773, 3784
  %780 = sext i32 %779 to i64
  %781 = mul nsw i32 %776, 1567
  %782 = sext i32 %781 to i64
  %783 = add nsw i64 %780, 2048
  %784 = add nsw i64 %783, %782
  %785 = lshr i64 %784, 12
  %786 = trunc i64 %785 to i32
  store i32 %786, i32* %367, align 4
  %787 = add nsw i64 %775, 2048
  %788 = sub nsw i64 %787, %778
  %789 = lshr i64 %788, 12
  %790 = trunc i64 %789 to i32
  store i32 %790, i32* %310, align 4
  %791 = load i32, i32* %352, align 4
  %792 = mul nsw i32 %791, -3784
  %793 = sext i32 %792 to i64
  %794 = load i32, i32* %329, align 4
  %795 = mul nsw i32 %794, 1567
  %796 = sext i32 %795 to i64
  %797 = mul nsw i32 %791, 1567
  %798 = sext i32 %797 to i64
  %799 = mul nsw i32 %794, -3784
  %800 = sext i32 %799 to i64
  %801 = add nsw i64 %798, 2048
  %802 = add nsw i64 %801, %800
  %803 = lshr i64 %802, 12
  %804 = trunc i64 %803 to i32
  store i32 %804, i32* %352, align 4
  %805 = add nsw i64 %793, 2048
  %806 = sub nsw i64 %805, %796
  %807 = lshr i64 %806, 12
  %808 = trunc i64 %807 to i32
  store i32 %808, i32* %329, align 4
  %809 = load i32, i32* %354, align 4
  %810 = mul nsw i32 %809, -3784
  %811 = sext i32 %810 to i64
  %812 = load i32, i32* %331, align 4
  %813 = mul nsw i32 %812, 1567
  %814 = sext i32 %813 to i64
  %815 = mul nsw i32 %809, 1567
  %816 = sext i32 %815 to i64
  %817 = mul nsw i32 %812, -3784
  %818 = sext i32 %817 to i64
  %819 = add nsw i64 %816, 2048
  %820 = add nsw i64 %819, %818
  %821 = lshr i64 %820, 12
  %822 = trunc i64 %821 to i32
  store i32 %822, i32* %354, align 4
  %823 = add nsw i64 %811, 2048
  %824 = sub nsw i64 %823, %814
  %825 = lshr i64 %824, 12
  %826 = trunc i64 %825 to i32
  store i32 %826, i32* %331, align 4
  %827 = load i32, i32* %391, align 4
  %828 = load i32, i32* %386, align 4
  %829 = insertelement <4 x i32> undef, i32 %827, i32 0
  %830 = insertelement <4 x i32> %829, i32 %729, i32 1
  %831 = insertelement <4 x i32> %830, i32 %732, i32 2
  %832 = insertelement <4 x i32> %831, i32 %828, i32 3
  %833 = add nsw <4 x i32> %832, %714
  %834 = shufflevector <4 x i32> %714, <4 x i32> undef, <4 x i32> <i32 3, i32 2, i32 1, i32 0>
  %835 = insertelement <4 x i32> undef, i32 %828, i32 0
  %836 = insertelement <4 x i32> %835, i32 %732, i32 1
  %837 = insertelement <4 x i32> %836, i32 %729, i32 2
  %838 = insertelement <4 x i32> %837, i32 %827, i32 3
  %839 = sub nsw <4 x i32> %834, %838
  %840 = icmp slt <4 x i32> %833, %320
  %841 = icmp sgt <4 x i32> %833, %323
  %842 = select <4 x i1> %841, <4 x i32> %323, <4 x i32> %833
  %843 = select <4 x i1> %840, <4 x i32> %320, <4 x i32> %842
  %844 = bitcast i8* %0 to <4 x i32>*
  store <4 x i32> %843, <4 x i32>* %844, align 4
  %845 = icmp slt <4 x i32> %839, %320
  %846 = icmp sgt <4 x i32> %839, %323
  %847 = select <4 x i1> %846, <4 x i32> %323, <4 x i32> %839
  %848 = select <4 x i1> %845, <4 x i32> %320, <4 x i32> %847
  %849 = bitcast i8* %385 to <4 x i32>*
  store <4 x i32> %848, <4 x i32>* %849, align 4
  %850 = extractelement <4 x i32> %753, i32 1
  %851 = mul nsw i32 %850, 2896
  %852 = sext i32 %851 to i64
  %853 = extractelement <4 x i32> %742, i32 2
  %854 = mul nsw i32 %853, 2896
  %855 = sext i32 %854 to i64
  %856 = add nsw i64 %852, 2048
  %857 = add nsw i64 %856, %855
  %858 = lshr i64 %857, 12
  %859 = trunc i64 %858 to i32
  store i32 %859, i32* %451, align 4
  %860 = sub nsw i64 %856, %855
  %861 = lshr i64 %860, 12
  %862 = trunc i64 %861 to i32
  store i32 %862, i32* %436, align 4
  %863 = extractelement <4 x i32> %753, i32 0
  %864 = mul nsw i32 %863, 2896
  %865 = sext i32 %864 to i64
  %866 = extractelement <4 x i32> %742, i32 3
  %867 = mul nsw i32 %866, 2896
  %868 = sext i32 %867 to i64
  %869 = add nsw i64 %865, 2048
  %870 = add nsw i64 %869, %868
  %871 = lshr i64 %870, 12
  %872 = trunc i64 %871 to i32
  store i32 %872, i32* %449, align 4
  %873 = sub nsw i64 %869, %868
  %874 = lshr i64 %873, 12
  %875 = trunc i64 %874 to i32
  store i32 %875, i32* %434, align 4
  %876 = bitcast i8* %305 to <4 x i32>*
  %877 = load <4 x i32>, <4 x i32>* %876, align 4
  %878 = bitcast i8* %328 to <4 x i32>*
  %879 = load <4 x i32>, <4 x i32>* %878, align 4
  %880 = shufflevector <4 x i32> %879, <4 x i32> undef, <4 x i32> <i32 3, i32 2, i32 1, i32 0>
  %881 = add nsw <4 x i32> %880, %877
  %882 = shufflevector <4 x i32> %877, <4 x i32> undef, <4 x i32> <i32 3, i32 2, i32 1, i32 0>
  %883 = sub nsw <4 x i32> %882, %879
  %884 = icmp slt <4 x i32> %881, %320
  %885 = icmp sgt <4 x i32> %881, %323
  %886 = select <4 x i1> %885, <4 x i32> %323, <4 x i32> %881
  %887 = select <4 x i1> %884, <4 x i32> %320, <4 x i32> %886
  %888 = bitcast i8* %305 to <4 x i32>*
  store <4 x i32> %887, <4 x i32>* %888, align 4
  %889 = icmp slt <4 x i32> %883, %320
  %890 = icmp sgt <4 x i32> %883, %323
  %891 = select <4 x i1> %890, <4 x i32> %323, <4 x i32> %883
  %892 = select <4 x i1> %889, <4 x i32> %320, <4 x i32> %891
  %893 = bitcast i8* %328 to <4 x i32>*
  store <4 x i32> %892, <4 x i32>* %893, align 4
  %894 = load i32, i32* %371, align 4
  %895 = load i32, i32* %348, align 4
  %896 = add nsw i32 %895, %894
  %897 = sub nsw i32 %894, %895
  %898 = icmp slt i32 %896, %303
  %899 = icmp sgt i32 %896, %304
  %900 = select i1 %899, i32 %304, i32 %896
  %901 = select i1 %898, i32 %303, i32 %900
  store i32 %901, i32* %371, align 4
  %902 = icmp slt i32 %897, %303
  %903 = icmp sgt i32 %897, %304
  %904 = select i1 %903, i32 %304, i32 %897
  %905 = select i1 %902, i32 %303, i32 %904
  store i32 %905, i32* %348, align 4
  %906 = load i32, i32* %373, align 4
  %907 = load i32, i32* %350, align 4
  %908 = add nsw i32 %907, %906
  %909 = sub nsw i32 %906, %907
  %910 = icmp slt i32 %908, %303
  %911 = icmp sgt i32 %908, %304
  %912 = select i1 %911, i32 %304, i32 %908
  %913 = select i1 %910, i32 %303, i32 %912
  store i32 %913, i32* %373, align 4
  %914 = icmp slt i32 %909, %303
  %915 = icmp sgt i32 %909, %304
  %916 = select i1 %915, i32 %304, i32 %909
  %917 = select i1 %914, i32 %303, i32 %916
  store i32 %917, i32* %350, align 4
  %918 = load i32, i32* %369, align 4
  %919 = load i32, i32* %354, align 4
  %920 = add nsw i32 %919, %918
  %921 = sub nsw i32 %918, %919
  %922 = icmp slt i32 %920, %303
  %923 = icmp sgt i32 %920, %304
  %924 = select i1 %923, i32 %304, i32 %920
  %925 = select i1 %922, i32 %303, i32 %924
  store i32 %925, i32* %369, align 4
  %926 = icmp slt i32 %921, %303
  %927 = icmp sgt i32 %921, %304
  %928 = select i1 %927, i32 %304, i32 %921
  %929 = select i1 %926, i32 %303, i32 %928
  store i32 %929, i32* %354, align 4
  %930 = load i32, i32* %367, align 4
  %931 = load i32, i32* %352, align 4
  %932 = add nsw i32 %931, %930
  %933 = sub nsw i32 %930, %931
  %934 = icmp slt i32 %932, %303
  %935 = icmp sgt i32 %932, %304
  %936 = select i1 %935, i32 %304, i32 %932
  %937 = select i1 %934, i32 %303, i32 %936
  store i32 %937, i32* %367, align 4
  %938 = icmp slt i32 %933, %303
  %939 = icmp sgt i32 %933, %304
  %940 = select i1 %939, i32 %304, i32 %933
  %941 = select i1 %938, i32 %303, i32 %940
  store i32 %941, i32* %352, align 4
  %942 = bitcast i8* %0 to <4 x i32>*
  %943 = load <4 x i32>, <4 x i32>* %942, align 4
  %944 = bitcast i8* %448 to <4 x i32>*
  %945 = load <4 x i32>, <4 x i32>* %944, align 4
  %946 = shufflevector <4 x i32> %945, <4 x i32> undef, <4 x i32> <i32 3, i32 2, i32 1, i32 0>
  %947 = extractelement <4 x i32> %945, i32 3
  %948 = extractelement <4 x i32> %943, i32 0
  %949 = sub nsw i32 %948, %947
  %950 = icmp slt i32 %949, %303
  %951 = icmp sgt i32 %949, %304
  %952 = select i1 %951, i32 %304, i32 %949
  %953 = select i1 %950, i32 %303, i32 %952
  store i32 %953, i32* %453, align 4
  %954 = extractelement <4 x i32> %945, i32 2
  %955 = extractelement <4 x i32> %943, i32 1
  %956 = sub nsw i32 %955, %954
  %957 = icmp slt i32 %956, %303
  %958 = icmp sgt i32 %956, %304
  %959 = select i1 %958, i32 %304, i32 %956
  %960 = select i1 %957, i32 %303, i32 %959
  store i32 %960, i32* %455, align 4
  %961 = extractelement <4 x i32> %945, i32 1
  %962 = extractelement <4 x i32> %943, i32 2
  %963 = sub nsw i32 %962, %961
  %964 = icmp slt i32 %963, %303
  %965 = icmp sgt i32 %963, %304
  %966 = select i1 %965, i32 %304, i32 %963
  %967 = select i1 %964, i32 %303, i32 %966
  store i32 %967, i32* %451, align 4
  %968 = add nsw <4 x i32> %946, %943
  %969 = icmp slt <4 x i32> %968, %320
  %970 = icmp sgt <4 x i32> %968, %323
  %971 = select <4 x i1> %970, <4 x i32> %323, <4 x i32> %968
  %972 = select <4 x i1> %969, <4 x i32> %320, <4 x i32> %971
  %973 = bitcast i8* %0 to <4 x i32>*
  store <4 x i32> %972, <4 x i32>* %973, align 4
  %974 = load i32, i32* %386, align 4
  %975 = load i32, i32* %434, align 4
  %976 = add nsw i32 %975, %974
  %977 = icmp slt i32 %976, %303
  %978 = icmp sgt i32 %976, %304
  %979 = select i1 %978, i32 %304, i32 %976
  %980 = select i1 %977, i32 %303, i32 %979
  store i32 %980, i32* %386, align 4
  %981 = load i32, i32* %408, align 4
  %982 = bitcast i8* %431 to <2 x i32>*
  %983 = load <2 x i32>, <2 x i32>* %982, align 4
  %984 = extractelement <2 x i32> %983, i32 1
  %985 = add nsw i32 %984, %981
  %986 = icmp slt i32 %985, %303
  %987 = icmp sgt i32 %985, %304
  %988 = select i1 %987, i32 %304, i32 %985
  %989 = select i1 %986, i32 %303, i32 %988
  store i32 %989, i32* %408, align 4
  %990 = load i32, i32* %413, align 4
  %991 = extractelement <2 x i32> %983, i32 0
  %992 = add nsw i32 %991, %990
  %993 = insertelement <4 x i32> undef, i32 %990, i32 0
  %994 = insertelement <4 x i32> %993, i32 %981, i32 1
  %995 = insertelement <4 x i32> %994, i32 %974, i32 2
  %996 = shufflevector <4 x i32> %995, <4 x i32> %943, <4 x i32> <i32 0, i32 1, i32 2, i32 7>
  %997 = insertelement <4 x i32> undef, i32 %991, i32 0
  %998 = insertelement <4 x i32> %997, i32 %984, i32 1
  %999 = insertelement <4 x i32> %998, i32 %975, i32 2
  %1000 = shufflevector <4 x i32> %999, <4 x i32> %945, <4 x i32> <i32 0, i32 1, i32 2, i32 4>
  %1001 = sub nsw <4 x i32> %996, %1000
  %1002 = icmp slt i32 %992, %303
  %1003 = icmp sgt i32 %992, %304
  %1004 = select i1 %1003, i32 %304, i32 %992
  %1005 = select i1 %1002, i32 %303, i32 %1004
  store i32 %1005, i32* %413, align 4
  %1006 = icmp slt <4 x i32> %1001, %320
  %1007 = icmp sgt <4 x i32> %1001, %323
  %1008 = select <4 x i1> %1007, <4 x i32> %323, <4 x i32> %1001
  %1009 = select <4 x i1> %1006, <4 x i32> %320, <4 x i32> %1008
  %1010 = bitcast i8* %431 to <4 x i32>*
  store <4 x i32> %1009, <4 x i32>* %1010, align 4
  %1011 = load i32, i32* %391, align 4
  %1012 = load i32, i32* %430, align 4
  %1013 = add nsw i32 %1012, %1011
  %1014 = sub nsw i32 %1011, %1012
  %1015 = icmp slt i32 %1013, %303
  %1016 = icmp sgt i32 %1013, %304
  %1017 = select i1 %1016, i32 %304, i32 %1013
  %1018 = select i1 %1015, i32 %303, i32 %1017
  store i32 %1018, i32* %391, align 4
  %1019 = icmp slt i32 %1014, %303
  %1020 = icmp sgt i32 %1014, %304
  %1021 = select i1 %1020, i32 %304, i32 %1014
  %1022 = select i1 %1019, i32 %303, i32 %1021
  store i32 %1022, i32* %430, align 4
  %1023 = load i32, i32* %352, align 4
  %1024 = mul nsw i32 %1023, 2896
  %1025 = sext i32 %1024 to i64
  %1026 = load i32, i32* %329, align 4
  %1027 = mul nsw i32 %1026, 2896
  %1028 = sext i32 %1027 to i64
  %1029 = add nsw i64 %1025, 2048
  %1030 = add nsw i64 %1029, %1028
  %1031 = lshr i64 %1030, 12
  %1032 = trunc i64 %1031 to i32
  store i32 %1032, i32* %352, align 4
  %1033 = sub nsw i64 %1029, %1028
  %1034 = lshr i64 %1033, 12
  %1035 = trunc i64 %1034 to i32
  store i32 %1035, i32* %329, align 4
  %1036 = load i32, i32* %354, align 4
  %1037 = mul nsw i32 %1036, 2896
  %1038 = sext i32 %1037 to i64
  %1039 = load i32, i32* %331, align 4
  %1040 = mul nsw i32 %1039, 2896
  %1041 = sext i32 %1040 to i64
  %1042 = add nsw i64 %1038, 2048
  %1043 = add nsw i64 %1042, %1041
  %1044 = lshr i64 %1043, 12
  %1045 = trunc i64 %1044 to i32
  store i32 %1045, i32* %354, align 4
  %1046 = sub nsw i64 %1042, %1041
  %1047 = lshr i64 %1046, 12
  %1048 = trunc i64 %1047 to i32
  store i32 %1048, i32* %331, align 4
  %1049 = load i32, i32* %350, align 4
  %1050 = mul nsw i32 %1049, 2896
  %1051 = sext i32 %1050 to i64
  %1052 = load i32, i32* %335, align 4
  %1053 = mul nsw i32 %1052, 2896
  %1054 = sext i32 %1053 to i64
  %1055 = add nsw i64 %1051, 2048
  %1056 = add nsw i64 %1055, %1054
  %1057 = lshr i64 %1056, 12
  %1058 = trunc i64 %1057 to i32
  store i32 %1058, i32* %350, align 4
  %1059 = sub nsw i64 %1055, %1054
  %1060 = lshr i64 %1059, 12
  %1061 = trunc i64 %1060 to i32
  store i32 %1061, i32* %335, align 4
  %1062 = load i32, i32* %348, align 4
  %1063 = mul nsw i32 %1062, 2896
  %1064 = sext i32 %1063 to i64
  %1065 = load i32, i32* %333, align 4
  %1066 = mul nsw i32 %1065, 2896
  %1067 = sext i32 %1066 to i64
  %1068 = add nsw i64 %1064, 2048
  %1069 = add nsw i64 %1068, %1067
  %1070 = lshr i64 %1069, 12
  %1071 = trunc i64 %1070 to i32
  store i32 %1071, i32* %348, align 4
  %1072 = sub nsw i64 %1068, %1067
  %1073 = lshr i64 %1072, 12
  %1074 = trunc i64 %1073 to i32
  store i32 %1074, i32* %333, align 4
  br label %280
}

; Function Attrs: nounwind ssp uwtable
define internal fastcc void @_ZN7libgav13dsp12_GLOBAL__N_15Dct_CIiLi6EEEvPva(i8*, i8 signext) unnamed_addr #0 {
  %3 = alloca [64 x i32], align 16
  %4 = bitcast i8* %0 to i32*
  %5 = bitcast [64 x i32]* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 256, i8* nonnull %5) #4
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 16 %5, i8* align 4 %0, i64 256, i1 false)
  br label %6

6:                                                ; preds = %6, %2
  %7 = phi i64 [ 0, %2 ], [ %35, %6 ]
  %8 = getelementptr inbounds [5 x [64 x i8]], [5 x [64 x i8]]* @_ZN7libgav13dsp12_GLOBAL__N_117kBitReverseLookupE, i64 0, i64 4, i64 %7
  %9 = load i8, i8* %8, align 4
  %10 = zext i8 %9 to i64
  %11 = getelementptr inbounds [64 x i32], [64 x i32]* %3, i64 0, i64 %10
  %12 = load i32, i32* %11, align 4
  %13 = getelementptr inbounds i32, i32* %4, i64 %7
  store i32 %12, i32* %13, align 4
  %14 = or i64 %7, 1
  %15 = getelementptr inbounds [5 x [64 x i8]], [5 x [64 x i8]]* @_ZN7libgav13dsp12_GLOBAL__N_117kBitReverseLookupE, i64 0, i64 4, i64 %14
  %16 = load i8, i8* %15, align 1
  %17 = zext i8 %16 to i64
  %18 = getelementptr inbounds [64 x i32], [64 x i32]* %3, i64 0, i64 %17
  %19 = load i32, i32* %18, align 4
  %20 = getelementptr inbounds i32, i32* %4, i64 %14
  store i32 %19, i32* %20, align 4
  %21 = or i64 %7, 2
  %22 = getelementptr inbounds [5 x [64 x i8]], [5 x [64 x i8]]* @_ZN7libgav13dsp12_GLOBAL__N_117kBitReverseLookupE, i64 0, i64 4, i64 %21
  %23 = load i8, i8* %22, align 2
  %24 = zext i8 %23 to i64
  %25 = getelementptr inbounds [64 x i32], [64 x i32]* %3, i64 0, i64 %24
  %26 = load i32, i32* %25, align 4
  %27 = getelementptr inbounds i32, i32* %4, i64 %21
  store i32 %26, i32* %27, align 4
  %28 = or i64 %7, 3
  %29 = getelementptr inbounds [5 x [64 x i8]], [5 x [64 x i8]]* @_ZN7libgav13dsp12_GLOBAL__N_117kBitReverseLookupE, i64 0, i64 4, i64 %28
  %30 = load i8, i8* %29, align 1
  %31 = zext i8 %30 to i64
  %32 = getelementptr inbounds [64 x i32], [64 x i32]* %3, i64 0, i64 %31
  %33 = load i32, i32* %32, align 4
  %34 = getelementptr inbounds i32, i32* %4, i64 %28
  store i32 %33, i32* %34, align 4
  %35 = add nuw nsw i64 %7, 4
  %36 = icmp eq i64 %35, 64
  br i1 %36, label %37, label %6

37:                                               ; preds = %6, %142
  %38 = phi i64 [ %155, %142 ], [ 0, %6 ]
  %39 = add nuw nsw i64 %38, 32
  %40 = sub nuw nsw i64 63, %38
  %41 = getelementptr inbounds [5 x [64 x i8]], [5 x [64 x i8]]* @_ZN7libgav13dsp12_GLOBAL__N_117kBitReverseLookupE, i64 0, i64 2, i64 %38
  %42 = load i8, i8* %41, align 1
  %43 = zext i8 %42 to i32
  %44 = shl nuw nsw i32 %43, 2
  %45 = sub nsw i32 63, %44
  %46 = getelementptr inbounds i32, i32* %4, i64 %39
  %47 = load i32, i32* %46, align 4
  %48 = and i32 %45, 255
  %49 = icmp ult i32 %48, 65
  br i1 %49, label %50, label %54

50:                                               ; preds = %37
  %51 = zext i32 %48 to i64
  %52 = getelementptr inbounds [65 x i16], [65 x i16]* @_ZN7libgav13dsp12_GLOBAL__N_17kCos128E, i64 0, i64 %51
  %53 = load i16, i16* %52, align 2
  br label %75

54:                                               ; preds = %37
  %55 = icmp ult i32 %48, 129
  br i1 %55, label %56, label %62

56:                                               ; preds = %54
  %57 = sub nuw nsw i32 128, %48
  %58 = sext i32 %57 to i64
  %59 = getelementptr inbounds [65 x i16], [65 x i16]* @_ZN7libgav13dsp12_GLOBAL__N_17kCos128E, i64 0, i64 %58
  %60 = load i16, i16* %59, align 2
  %61 = sub i16 0, %60
  br label %75

62:                                               ; preds = %54
  %63 = icmp ult i32 %48, 193
  br i1 %63, label %64, label %70

64:                                               ; preds = %62
  %65 = add nsw i32 %48, -128
  %66 = sext i32 %65 to i64
  %67 = getelementptr inbounds [65 x i16], [65 x i16]* @_ZN7libgav13dsp12_GLOBAL__N_17kCos128E, i64 0, i64 %66
  %68 = load i16, i16* %67, align 2
  %69 = sub i16 0, %68
  br label %75

70:                                               ; preds = %62
  %71 = sub nuw nsw i32 256, %48
  %72 = zext i32 %71 to i64
  %73 = getelementptr inbounds [65 x i16], [65 x i16]* @_ZN7libgav13dsp12_GLOBAL__N_17kCos128E, i64 0, i64 %72
  %74 = load i16, i16* %73, align 2
  br label %75

75:                                               ; preds = %70, %64, %56, %50
  %76 = phi i16 [ %53, %50 ], [ %61, %56 ], [ %69, %64 ], [ %74, %70 ]
  %77 = sext i16 %76 to i32
  %78 = mul nsw i32 %47, %77
  %79 = sext i32 %78 to i64
  %80 = getelementptr inbounds i32, i32* %4, i64 %40
  %81 = load i32, i32* %80, align 4
  %82 = sub nsw i32 255, %44
  %83 = and i32 %82, 255
  %84 = icmp ult i32 %83, 65
  br i1 %84, label %89, label %85

85:                                               ; preds = %75
  %86 = icmp ult i32 %83, 129
  br i1 %86, label %93, label %87

87:                                               ; preds = %85
  %88 = icmp ult i32 %83, 193
  br i1 %88, label %99, label %105

89:                                               ; preds = %75
  %90 = zext i32 %83 to i64
  %91 = getelementptr inbounds [65 x i16], [65 x i16]* @_ZN7libgav13dsp12_GLOBAL__N_17kCos128E, i64 0, i64 %90
  %92 = load i16, i16* %91, align 2
  br label %110

93:                                               ; preds = %85
  %94 = sub nuw nsw i32 128, %83
  %95 = sext i32 %94 to i64
  %96 = getelementptr inbounds [65 x i16], [65 x i16]* @_ZN7libgav13dsp12_GLOBAL__N_17kCos128E, i64 0, i64 %95
  %97 = load i16, i16* %96, align 2
  %98 = sub i16 0, %97
  br label %110

99:                                               ; preds = %87
  %100 = add nsw i32 %83, -128
  %101 = sext i32 %100 to i64
  %102 = getelementptr inbounds [65 x i16], [65 x i16]* @_ZN7libgav13dsp12_GLOBAL__N_17kCos128E, i64 0, i64 %101
  %103 = load i16, i16* %102, align 2
  %104 = sub i16 0, %103
  br label %110

105:                                              ; preds = %87
  %106 = sub nuw nsw i32 256, %83
  %107 = zext i32 %106 to i64
  %108 = getelementptr inbounds [65 x i16], [65 x i16]* @_ZN7libgav13dsp12_GLOBAL__N_17kCos128E, i64 0, i64 %107
  %109 = load i16, i16* %108, align 2
  br label %110

110:                                              ; preds = %105, %99, %93, %89
  %111 = phi i16 [ %92, %89 ], [ %98, %93 ], [ %104, %99 ], [ %109, %105 ]
  %112 = sext i16 %111 to i32
  %113 = mul nsw i32 %81, %112
  %114 = sext i32 %113 to i64
  %115 = mul nsw i32 %47, %112
  %116 = sext i32 %115 to i64
  br i1 %49, label %117, label %121

117:                                              ; preds = %110
  %118 = zext i32 %48 to i64
  %119 = getelementptr inbounds [65 x i16], [65 x i16]* @_ZN7libgav13dsp12_GLOBAL__N_17kCos128E, i64 0, i64 %118
  %120 = load i16, i16* %119, align 2
  br label %142

121:                                              ; preds = %110
  %122 = icmp ult i32 %48, 129
  br i1 %122, label %123, label %129

123:                                              ; preds = %121
  %124 = sub nuw nsw i32 128, %48
  %125 = sext i32 %124 to i64
  %126 = getelementptr inbounds [65 x i16], [65 x i16]* @_ZN7libgav13dsp12_GLOBAL__N_17kCos128E, i64 0, i64 %125
  %127 = load i16, i16* %126, align 2
  %128 = sub i16 0, %127
  br label %142

129:                                              ; preds = %121
  %130 = icmp ult i32 %48, 193
  br i1 %130, label %131, label %137

131:                                              ; preds = %129
  %132 = add nsw i32 %48, -128
  %133 = sext i32 %132 to i64
  %134 = getelementptr inbounds [65 x i16], [65 x i16]* @_ZN7libgav13dsp12_GLOBAL__N_17kCos128E, i64 0, i64 %133
  %135 = load i16, i16* %134, align 2
  %136 = sub i16 0, %135
  br label %142

137:                                              ; preds = %129
  %138 = sub nuw nsw i32 256, %48
  %139 = zext i32 %138 to i64
  %140 = getelementptr inbounds [65 x i16], [65 x i16]* @_ZN7libgav13dsp12_GLOBAL__N_17kCos128E, i64 0, i64 %139
  %141 = load i16, i16* %140, align 2
  br label %142

142:                                              ; preds = %117, %123, %131, %137
  %143 = phi i16 [ %120, %117 ], [ %128, %123 ], [ %136, %131 ], [ %141, %137 ]
  %144 = sext i16 %143 to i32
  %145 = mul nsw i32 %81, %144
  %146 = sext i32 %145 to i64
  %147 = add nsw i64 %79, 2048
  %148 = sub nsw i64 %147, %114
  %149 = lshr i64 %148, 12
  %150 = trunc i64 %149 to i32
  store i32 %150, i32* %46, align 4
  %151 = add nsw i64 %116, 2048
  %152 = add nsw i64 %151, %146
  %153 = lshr i64 %152, 12
  %154 = trunc i64 %153 to i32
  store i32 %154, i32* %80, align 4
  %155 = add nuw nsw i64 %38, 1
  %156 = icmp eq i64 %155, 16
  br i1 %156, label %163, label %37

157:                                              ; preds = %269
  %158 = add i8 %1, -1
  %159 = sext i8 %158 to i32
  %160 = shl i32 1, %159
  %161 = sub nsw i32 0, %160
  %162 = add nsw i32 %160, -1
  br label %284

163:                                              ; preds = %142, %269
  %164 = phi i64 [ %282, %269 ], [ 0, %142 ]
  %165 = add nuw nsw i64 %164, 16
  %166 = sub nuw nsw i64 31, %164
  %167 = sub nuw nsw i64 7, %164
  %168 = getelementptr inbounds [5 x [64 x i8]], [5 x [64 x i8]]* @_ZN7libgav13dsp12_GLOBAL__N_117kBitReverseLookupE, i64 0, i64 1, i64 %167
  %169 = load i8, i8* %168, align 1
  %170 = zext i8 %169 to i32
  %171 = shl nuw nsw i32 %170, 3
  %172 = or i32 %171, 6
  %173 = getelementptr inbounds i32, i32* %4, i64 %165
  %174 = load i32, i32* %173, align 4
  %175 = and i32 %172, 254
  %176 = icmp ult i32 %175, 65
  br i1 %176, label %177, label %181

177:                                              ; preds = %163
  %178 = zext i32 %175 to i64
  %179 = getelementptr inbounds [65 x i16], [65 x i16]* @_ZN7libgav13dsp12_GLOBAL__N_17kCos128E, i64 0, i64 %178
  %180 = load i16, i16* %179, align 4
  br label %202

181:                                              ; preds = %163
  %182 = icmp ult i32 %175, 129
  br i1 %182, label %183, label %189

183:                                              ; preds = %181
  %184 = sub nuw nsw i32 128, %175
  %185 = sext i32 %184 to i64
  %186 = getelementptr inbounds [65 x i16], [65 x i16]* @_ZN7libgav13dsp12_GLOBAL__N_17kCos128E, i64 0, i64 %185
  %187 = load i16, i16* %186, align 4
  %188 = sub i16 0, %187
  br label %202

189:                                              ; preds = %181
  %190 = icmp ult i32 %175, 193
  br i1 %190, label %191, label %197

191:                                              ; preds = %189
  %192 = add nsw i32 %175, -128
  %193 = sext i32 %192 to i64
  %194 = getelementptr inbounds [65 x i16], [65 x i16]* @_ZN7libgav13dsp12_GLOBAL__N_17kCos128E, i64 0, i64 %193
  %195 = load i16, i16* %194, align 4
  %196 = sub i16 0, %195
  br label %202

197:                                              ; preds = %189
  %198 = sub nuw nsw i32 256, %175
  %199 = zext i32 %198 to i64
  %200 = getelementptr inbounds [65 x i16], [65 x i16]* @_ZN7libgav13dsp12_GLOBAL__N_17kCos128E, i64 0, i64 %199
  %201 = load i16, i16* %200, align 4
  br label %202

202:                                              ; preds = %197, %191, %183, %177
  %203 = phi i16 [ %180, %177 ], [ %188, %183 ], [ %196, %191 ], [ %201, %197 ]
  %204 = sext i16 %203 to i32
  %205 = mul nsw i32 %174, %204
  %206 = sext i32 %205 to i64
  %207 = getelementptr inbounds i32, i32* %4, i64 %166
  %208 = load i32, i32* %207, align 4
  %209 = add nuw nsw i32 %172, 192
  %210 = and i32 %209, 254
  %211 = icmp ult i32 %210, 65
  br i1 %211, label %216, label %212

212:                                              ; preds = %202
  %213 = icmp ult i32 %210, 129
  br i1 %213, label %220, label %214

214:                                              ; preds = %212
  %215 = icmp ult i32 %210, 193
  br i1 %215, label %226, label %232

216:                                              ; preds = %202
  %217 = zext i32 %210 to i64
  %218 = getelementptr inbounds [65 x i16], [65 x i16]* @_ZN7libgav13dsp12_GLOBAL__N_17kCos128E, i64 0, i64 %217
  %219 = load i16, i16* %218, align 4
  br label %237

220:                                              ; preds = %212
  %221 = sub nuw nsw i32 128, %210
  %222 = sext i32 %221 to i64
  %223 = getelementptr inbounds [65 x i16], [65 x i16]* @_ZN7libgav13dsp12_GLOBAL__N_17kCos128E, i64 0, i64 %222
  %224 = load i16, i16* %223, align 4
  %225 = sub i16 0, %224
  br label %237

226:                                              ; preds = %214
  %227 = add nsw i32 %210, -128
  %228 = sext i32 %227 to i64
  %229 = getelementptr inbounds [65 x i16], [65 x i16]* @_ZN7libgav13dsp12_GLOBAL__N_17kCos128E, i64 0, i64 %228
  %230 = load i16, i16* %229, align 4
  %231 = sub i16 0, %230
  br label %237

232:                                              ; preds = %214
  %233 = sub nuw nsw i32 256, %210
  %234 = zext i32 %233 to i64
  %235 = getelementptr inbounds [65 x i16], [65 x i16]* @_ZN7libgav13dsp12_GLOBAL__N_17kCos128E, i64 0, i64 %234
  %236 = load i16, i16* %235, align 4
  br label %237

237:                                              ; preds = %232, %226, %220, %216
  %238 = phi i16 [ %219, %216 ], [ %225, %220 ], [ %231, %226 ], [ %236, %232 ]
  %239 = sext i16 %238 to i32
  %240 = mul nsw i32 %208, %239
  %241 = sext i32 %240 to i64
  %242 = mul nsw i32 %174, %239
  %243 = sext i32 %242 to i64
  br i1 %176, label %244, label %248

244:                                              ; preds = %237
  %245 = zext i32 %175 to i64
  %246 = getelementptr inbounds [65 x i16], [65 x i16]* @_ZN7libgav13dsp12_GLOBAL__N_17kCos128E, i64 0, i64 %245
  %247 = load i16, i16* %246, align 4
  br label %269

248:                                              ; preds = %237
  %249 = icmp ult i32 %175, 129
  br i1 %249, label %250, label %256

250:                                              ; preds = %248
  %251 = sub nuw nsw i32 128, %175
  %252 = sext i32 %251 to i64
  %253 = getelementptr inbounds [65 x i16], [65 x i16]* @_ZN7libgav13dsp12_GLOBAL__N_17kCos128E, i64 0, i64 %252
  %254 = load i16, i16* %253, align 4
  %255 = sub i16 0, %254
  br label %269

256:                                              ; preds = %248
  %257 = icmp ult i32 %175, 193
  br i1 %257, label %258, label %264

258:                                              ; preds = %256
  %259 = add nsw i32 %175, -128
  %260 = sext i32 %259 to i64
  %261 = getelementptr inbounds [65 x i16], [65 x i16]* @_ZN7libgav13dsp12_GLOBAL__N_17kCos128E, i64 0, i64 %260
  %262 = load i16, i16* %261, align 4
  %263 = sub i16 0, %262
  br label %269

264:                                              ; preds = %256
  %265 = sub nuw nsw i32 256, %175
  %266 = zext i32 %265 to i64
  %267 = getelementptr inbounds [65 x i16], [65 x i16]* @_ZN7libgav13dsp12_GLOBAL__N_17kCos128E, i64 0, i64 %266
  %268 = load i16, i16* %267, align 4
  br label %269

269:                                              ; preds = %244, %250, %258, %264
  %270 = phi i16 [ %247, %244 ], [ %255, %250 ], [ %263, %258 ], [ %268, %264 ]
  %271 = sext i16 %270 to i32
  %272 = mul nsw i32 %208, %271
  %273 = sext i32 %272 to i64
  %274 = add nsw i64 %206, 2048
  %275 = sub nsw i64 %274, %241
  %276 = lshr i64 %275, 12
  %277 = trunc i64 %276 to i32
  store i32 %277, i32* %173, align 4
  %278 = add nsw i64 %243, 2048
  %279 = add nsw i64 %278, %273
  %280 = lshr i64 %279, 12
  %281 = trunc i64 %280 to i32
  store i32 %281, i32* %207, align 4
  %282 = add nuw nsw i64 %164, 1
  %283 = icmp eq i64 %282, 8
  br i1 %283, label %157, label %163

284:                                              ; preds = %284, %157
  %285 = phi i32 [ 0, %157 ], [ %309, %284 ]
  %286 = shl nuw i32 %285, 1
  %287 = add nuw nsw i32 %286, 32
  %288 = add nuw nsw i32 %286, 33
  %289 = and i32 %285, 1
  %290 = icmp ne i32 %289, 0
  %291 = select i1 %290, i32 %288, i32 %287
  %292 = select i1 %290, i32 %287, i32 %288
  %293 = sext i32 %291 to i64
  %294 = getelementptr inbounds i32, i32* %4, i64 %293
  %295 = load i32, i32* %294, align 4
  %296 = sext i32 %292 to i64
  %297 = getelementptr inbounds i32, i32* %4, i64 %296
  %298 = load i32, i32* %297, align 4
  %299 = add nsw i32 %298, %295
  %300 = sub nsw i32 %295, %298
  %301 = icmp slt i32 %299, %161
  %302 = icmp sgt i32 %299, %162
  %303 = select i1 %302, i32 %162, i32 %299
  %304 = select i1 %301, i32 %161, i32 %303
  store i32 %304, i32* %294, align 4
  %305 = icmp slt i32 %300, %161
  %306 = icmp sgt i32 %300, %162
  %307 = select i1 %306, i32 %162, i32 %300
  %308 = select i1 %305, i32 %161, i32 %307
  store i32 %308, i32* %297, align 4
  %309 = add nuw nsw i32 %285, 1
  %310 = icmp eq i32 %309, 16
  br i1 %310, label %390, label %284

311:                                              ; preds = %496
  %312 = getelementptr inbounds i8, i8* %0, i64 64
  %313 = bitcast i8* %312 to i32*
  %314 = getelementptr inbounds i8, i8* %0, i64 68
  %315 = bitcast i8* %314 to i32*
  %316 = getelementptr inbounds i8, i8* %0, i64 76
  %317 = bitcast i8* %316 to i32*
  %318 = getelementptr inbounds i8, i8* %0, i64 72
  %319 = bitcast i8* %318 to i32*
  %320 = bitcast i8* %312 to <4 x i32>*
  %321 = load <4 x i32>, <4 x i32>* %320, align 4
  %322 = shufflevector <4 x i32> %321, <4 x i32> undef, <4 x i32> <i32 1, i32 0, i32 3, i32 2>
  %323 = add nsw <4 x i32> %322, %321
  %324 = sub nsw <4 x i32> %322, %321
  %325 = shufflevector <4 x i32> %323, <4 x i32> %324, <4 x i32> <i32 0, i32 5, i32 6, i32 3>
  %326 = insertelement <4 x i32> undef, i32 %161, i32 0
  %327 = shufflevector <4 x i32> %326, <4 x i32> undef, <4 x i32> zeroinitializer
  %328 = icmp slt <4 x i32> %325, %327
  %329 = insertelement <4 x i32> undef, i32 %162, i32 0
  %330 = shufflevector <4 x i32> %329, <4 x i32> undef, <4 x i32> zeroinitializer
  %331 = icmp sgt <4 x i32> %325, %330
  %332 = select <4 x i1> %331, <4 x i32> %330, <4 x i32> %325
  %333 = select <4 x i1> %328, <4 x i32> %327, <4 x i32> %332
  %334 = bitcast i8* %312 to <4 x i32>*
  store <4 x i32> %333, <4 x i32>* %334, align 4
  %335 = getelementptr inbounds i8, i8* %0, i64 80
  %336 = bitcast i8* %335 to i32*
  %337 = getelementptr inbounds i8, i8* %0, i64 84
  %338 = bitcast i8* %337 to i32*
  %339 = getelementptr inbounds i8, i8* %0, i64 92
  %340 = bitcast i8* %339 to i32*
  %341 = getelementptr inbounds i8, i8* %0, i64 88
  %342 = bitcast i8* %341 to i32*
  %343 = bitcast i8* %335 to <4 x i32>*
  %344 = load <4 x i32>, <4 x i32>* %343, align 4
  %345 = shufflevector <4 x i32> %344, <4 x i32> undef, <4 x i32> <i32 1, i32 0, i32 3, i32 2>
  %346 = add nsw <4 x i32> %345, %344
  %347 = sub nsw <4 x i32> %345, %344
  %348 = shufflevector <4 x i32> %346, <4 x i32> %347, <4 x i32> <i32 0, i32 5, i32 6, i32 3>
  %349 = icmp slt <4 x i32> %348, %327
  %350 = icmp sgt <4 x i32> %348, %330
  %351 = select <4 x i1> %350, <4 x i32> %330, <4 x i32> %348
  %352 = select <4 x i1> %349, <4 x i32> %327, <4 x i32> %351
  %353 = bitcast i8* %335 to <4 x i32>*
  store <4 x i32> %352, <4 x i32>* %353, align 4
  %354 = getelementptr inbounds i8, i8* %0, i64 96
  %355 = bitcast i8* %354 to i32*
  %356 = getelementptr inbounds i8, i8* %0, i64 100
  %357 = bitcast i8* %356 to i32*
  %358 = getelementptr inbounds i8, i8* %0, i64 108
  %359 = bitcast i8* %358 to i32*
  %360 = getelementptr inbounds i8, i8* %0, i64 104
  %361 = bitcast i8* %360 to i32*
  %362 = bitcast i8* %354 to <4 x i32>*
  %363 = load <4 x i32>, <4 x i32>* %362, align 4
  %364 = shufflevector <4 x i32> %363, <4 x i32> undef, <4 x i32> <i32 1, i32 0, i32 3, i32 2>
  %365 = add nsw <4 x i32> %364, %363
  %366 = sub nsw <4 x i32> %364, %363
  %367 = shufflevector <4 x i32> %365, <4 x i32> %366, <4 x i32> <i32 0, i32 5, i32 6, i32 3>
  %368 = icmp slt <4 x i32> %367, %327
  %369 = icmp sgt <4 x i32> %367, %330
  %370 = select <4 x i1> %369, <4 x i32> %330, <4 x i32> %367
  %371 = select <4 x i1> %368, <4 x i32> %327, <4 x i32> %370
  %372 = bitcast i8* %354 to <4 x i32>*
  store <4 x i32> %371, <4 x i32>* %372, align 4
  %373 = getelementptr inbounds i8, i8* %0, i64 112
  %374 = bitcast i8* %373 to i32*
  %375 = getelementptr inbounds i8, i8* %0, i64 116
  %376 = bitcast i8* %375 to i32*
  %377 = getelementptr inbounds i8, i8* %0, i64 120
  %378 = bitcast i8* %377 to i32*
  %379 = bitcast i8* %373 to <4 x i32>*
  %380 = load <4 x i32>, <4 x i32>* %379, align 4
  %381 = shufflevector <4 x i32> %380, <4 x i32> undef, <4 x i32> <i32 1, i32 0, i32 3, i32 2>
  %382 = add nsw <4 x i32> %381, %380
  %383 = sub nsw <4 x i32> %381, %380
  %384 = shufflevector <4 x i32> %382, <4 x i32> %383, <4 x i32> <i32 0, i32 5, i32 6, i32 3>
  %385 = icmp slt <4 x i32> %384, %327
  %386 = icmp sgt <4 x i32> %384, %330
  %387 = select <4 x i1> %386, <4 x i32> %330, <4 x i32> %384
  %388 = select <4 x i1> %385, <4 x i32> %327, <4 x i32> %387
  %389 = bitcast i8* %373 to <4 x i32>*
  store <4 x i32> %388, <4 x i32>* %389, align 4
  br label %511

390:                                              ; preds = %284, %496
  %391 = phi i64 [ %509, %496 ], [ 0, %284 ]
  %392 = add nuw nsw i64 %391, 8
  %393 = sub nuw nsw i64 15, %391
  %394 = sub nuw nsw i64 3, %391
  %395 = getelementptr inbounds [5 x [64 x i8]], [5 x [64 x i8]]* @_ZN7libgav13dsp12_GLOBAL__N_117kBitReverseLookupE, i64 0, i64 0, i64 %394
  %396 = load i8, i8* %395, align 1
  %397 = zext i8 %396 to i32
  %398 = shl nuw nsw i32 %397, 4
  %399 = or i32 %398, 12
  %400 = getelementptr inbounds i32, i32* %4, i64 %392
  %401 = load i32, i32* %400, align 4
  %402 = and i32 %399, 252
  %403 = icmp ult i32 %402, 65
  br i1 %403, label %404, label %408

404:                                              ; preds = %390
  %405 = zext i32 %402 to i64
  %406 = getelementptr inbounds [65 x i16], [65 x i16]* @_ZN7libgav13dsp12_GLOBAL__N_17kCos128E, i64 0, i64 %405
  %407 = load i16, i16* %406, align 8
  br label %429

408:                                              ; preds = %390
  %409 = icmp ult i32 %402, 129
  br i1 %409, label %410, label %416

410:                                              ; preds = %408
  %411 = sub nuw nsw i32 128, %402
  %412 = sext i32 %411 to i64
  %413 = getelementptr inbounds [65 x i16], [65 x i16]* @_ZN7libgav13dsp12_GLOBAL__N_17kCos128E, i64 0, i64 %412
  %414 = load i16, i16* %413, align 8
  %415 = sub i16 0, %414
  br label %429

416:                                              ; preds = %408
  %417 = icmp ult i32 %402, 193
  br i1 %417, label %418, label %424

418:                                              ; preds = %416
  %419 = add nsw i32 %402, -128
  %420 = sext i32 %419 to i64
  %421 = getelementptr inbounds [65 x i16], [65 x i16]* @_ZN7libgav13dsp12_GLOBAL__N_17kCos128E, i64 0, i64 %420
  %422 = load i16, i16* %421, align 8
  %423 = sub i16 0, %422
  br label %429

424:                                              ; preds = %416
  %425 = sub nuw nsw i32 256, %402
  %426 = zext i32 %425 to i64
  %427 = getelementptr inbounds [65 x i16], [65 x i16]* @_ZN7libgav13dsp12_GLOBAL__N_17kCos128E, i64 0, i64 %426
  %428 = load i16, i16* %427, align 8
  br label %429

429:                                              ; preds = %424, %418, %410, %404
  %430 = phi i16 [ %407, %404 ], [ %415, %410 ], [ %423, %418 ], [ %428, %424 ]
  %431 = sext i16 %430 to i32
  %432 = mul nsw i32 %401, %431
  %433 = sext i32 %432 to i64
  %434 = getelementptr inbounds i32, i32* %4, i64 %393
  %435 = load i32, i32* %434, align 4
  %436 = add nuw nsw i32 %399, 192
  %437 = and i32 %436, 252
  %438 = icmp ult i32 %437, 65
  br i1 %438, label %443, label %439

439:                                              ; preds = %429
  %440 = icmp ult i32 %437, 129
  br i1 %440, label %447, label %441

441:                                              ; preds = %439
  %442 = icmp ult i32 %437, 193
  br i1 %442, label %453, label %459

443:                                              ; preds = %429
  %444 = zext i32 %437 to i64
  %445 = getelementptr inbounds [65 x i16], [65 x i16]* @_ZN7libgav13dsp12_GLOBAL__N_17kCos128E, i64 0, i64 %444
  %446 = load i16, i16* %445, align 8
  br label %464

447:                                              ; preds = %439
  %448 = sub nuw nsw i32 128, %437
  %449 = sext i32 %448 to i64
  %450 = getelementptr inbounds [65 x i16], [65 x i16]* @_ZN7libgav13dsp12_GLOBAL__N_17kCos128E, i64 0, i64 %449
  %451 = load i16, i16* %450, align 8
  %452 = sub i16 0, %451
  br label %464

453:                                              ; preds = %441
  %454 = add nsw i32 %437, -128
  %455 = sext i32 %454 to i64
  %456 = getelementptr inbounds [65 x i16], [65 x i16]* @_ZN7libgav13dsp12_GLOBAL__N_17kCos128E, i64 0, i64 %455
  %457 = load i16, i16* %456, align 8
  %458 = sub i16 0, %457
  br label %464

459:                                              ; preds = %441
  %460 = sub nuw nsw i32 256, %437
  %461 = zext i32 %460 to i64
  %462 = getelementptr inbounds [65 x i16], [65 x i16]* @_ZN7libgav13dsp12_GLOBAL__N_17kCos128E, i64 0, i64 %461
  %463 = load i16, i16* %462, align 8
  br label %464

464:                                              ; preds = %459, %453, %447, %443
  %465 = phi i16 [ %446, %443 ], [ %452, %447 ], [ %458, %453 ], [ %463, %459 ]
  %466 = sext i16 %465 to i32
  %467 = mul nsw i32 %435, %466
  %468 = sext i32 %467 to i64
  %469 = mul nsw i32 %401, %466
  %470 = sext i32 %469 to i64
  br i1 %403, label %471, label %475

471:                                              ; preds = %464
  %472 = zext i32 %402 to i64
  %473 = getelementptr inbounds [65 x i16], [65 x i16]* @_ZN7libgav13dsp12_GLOBAL__N_17kCos128E, i64 0, i64 %472
  %474 = load i16, i16* %473, align 8
  br label %496

475:                                              ; preds = %464
  %476 = icmp ult i32 %402, 129
  br i1 %476, label %477, label %483

477:                                              ; preds = %475
  %478 = sub nuw nsw i32 128, %402
  %479 = sext i32 %478 to i64
  %480 = getelementptr inbounds [65 x i16], [65 x i16]* @_ZN7libgav13dsp12_GLOBAL__N_17kCos128E, i64 0, i64 %479
  %481 = load i16, i16* %480, align 8
  %482 = sub i16 0, %481
  br label %496

483:                                              ; preds = %475
  %484 = icmp ult i32 %402, 193
  br i1 %484, label %485, label %491

485:                                              ; preds = %483
  %486 = add nsw i32 %402, -128
  %487 = sext i32 %486 to i64
  %488 = getelementptr inbounds [65 x i16], [65 x i16]* @_ZN7libgav13dsp12_GLOBAL__N_17kCos128E, i64 0, i64 %487
  %489 = load i16, i16* %488, align 8
  %490 = sub i16 0, %489
  br label %496

491:                                              ; preds = %483
  %492 = sub nuw nsw i32 256, %402
  %493 = zext i32 %492 to i64
  %494 = getelementptr inbounds [65 x i16], [65 x i16]* @_ZN7libgav13dsp12_GLOBAL__N_17kCos128E, i64 0, i64 %493
  %495 = load i16, i16* %494, align 8
  br label %496

496:                                              ; preds = %471, %477, %485, %491
  %497 = phi i16 [ %474, %471 ], [ %482, %477 ], [ %490, %485 ], [ %495, %491 ]
  %498 = sext i16 %497 to i32
  %499 = mul nsw i32 %435, %498
  %500 = sext i32 %499 to i64
  %501 = add nsw i64 %433, 2048
  %502 = sub nsw i64 %501, %468
  %503 = lshr i64 %502, 12
  %504 = trunc i64 %503 to i32
  store i32 %504, i32* %400, align 4
  %505 = add nsw i64 %470, 2048
  %506 = add nsw i64 %505, %500
  %507 = lshr i64 %506, 12
  %508 = trunc i64 %507 to i32
  store i32 %508, i32* %434, align 4
  %509 = add nuw nsw i64 %391, 1
  %510 = icmp eq i64 %509, 4
  br i1 %510, label %311, label %390

511:                                              ; preds = %1858, %311
  %512 = phi i64 [ 0, %311 ], [ %1871, %1858 ]
  %513 = shl i64 %512, 2
  %514 = sub nuw nsw i64 62, %513
  %515 = add nuw nsw i64 %513, 33
  %516 = getelementptr inbounds [5 x [64 x i8]], [5 x [64 x i8]]* @_ZN7libgav13dsp12_GLOBAL__N_117kBitReverseLookupE, i64 0, i64 0, i64 %512
  %517 = load i8, i8* %516, align 1
  %518 = zext i8 %517 to i32
  %519 = shl nuw nsw i32 %518, 4
  %520 = sub nsw i32 60, %519
  %521 = getelementptr inbounds i32, i32* %4, i64 %514
  %522 = load i32, i32* %521, align 4
  %523 = and i32 %520, 252
  %524 = icmp ult i32 %523, 65
  br i1 %524, label %525, label %529

525:                                              ; preds = %511
  %526 = zext i32 %523 to i64
  %527 = getelementptr inbounds [65 x i16], [65 x i16]* @_ZN7libgav13dsp12_GLOBAL__N_17kCos128E, i64 0, i64 %526
  %528 = load i16, i16* %527, align 8
  br label %550

529:                                              ; preds = %511
  %530 = icmp ult i32 %523, 129
  br i1 %530, label %531, label %537

531:                                              ; preds = %529
  %532 = sub nuw nsw i32 128, %523
  %533 = sext i32 %532 to i64
  %534 = getelementptr inbounds [65 x i16], [65 x i16]* @_ZN7libgav13dsp12_GLOBAL__N_17kCos128E, i64 0, i64 %533
  %535 = load i16, i16* %534, align 8
  %536 = sub i16 0, %535
  br label %550

537:                                              ; preds = %529
  %538 = icmp ult i32 %523, 193
  br i1 %538, label %539, label %545

539:                                              ; preds = %537
  %540 = add nsw i32 %523, -128
  %541 = sext i32 %540 to i64
  %542 = getelementptr inbounds [65 x i16], [65 x i16]* @_ZN7libgav13dsp12_GLOBAL__N_17kCos128E, i64 0, i64 %541
  %543 = load i16, i16* %542, align 8
  %544 = sub i16 0, %543
  br label %550

545:                                              ; preds = %537
  %546 = sub nuw nsw i32 256, %523
  %547 = zext i32 %546 to i64
  %548 = getelementptr inbounds [65 x i16], [65 x i16]* @_ZN7libgav13dsp12_GLOBAL__N_17kCos128E, i64 0, i64 %547
  %549 = load i16, i16* %548, align 8
  br label %550

550:                                              ; preds = %545, %539, %531, %525
  %551 = phi i16 [ %528, %525 ], [ %536, %531 ], [ %544, %539 ], [ %549, %545 ]
  %552 = sext i16 %551 to i32
  %553 = mul nsw i32 %522, %552
  %554 = sext i32 %553 to i64
  %555 = getelementptr inbounds i32, i32* %4, i64 %515
  %556 = load i32, i32* %555, align 4
  %557 = sub nsw i32 252, %519
  %558 = and i32 %557, 252
  %559 = icmp ult i32 %558, 65
  br i1 %559, label %564, label %560

560:                                              ; preds = %550
  %561 = icmp ult i32 %558, 129
  br i1 %561, label %568, label %562

562:                                              ; preds = %560
  %563 = icmp ult i32 %558, 193
  br i1 %563, label %574, label %580

564:                                              ; preds = %550
  %565 = zext i32 %558 to i64
  %566 = getelementptr inbounds [65 x i16], [65 x i16]* @_ZN7libgav13dsp12_GLOBAL__N_17kCos128E, i64 0, i64 %565
  %567 = load i16, i16* %566, align 8
  br label %585

568:                                              ; preds = %560
  %569 = sub nuw nsw i32 128, %558
  %570 = sext i32 %569 to i64
  %571 = getelementptr inbounds [65 x i16], [65 x i16]* @_ZN7libgav13dsp12_GLOBAL__N_17kCos128E, i64 0, i64 %570
  %572 = load i16, i16* %571, align 8
  %573 = sub i16 0, %572
  br label %585

574:                                              ; preds = %562
  %575 = add nsw i32 %558, -128
  %576 = sext i32 %575 to i64
  %577 = getelementptr inbounds [65 x i16], [65 x i16]* @_ZN7libgav13dsp12_GLOBAL__N_17kCos128E, i64 0, i64 %576
  %578 = load i16, i16* %577, align 8
  %579 = sub i16 0, %578
  br label %585

580:                                              ; preds = %562
  %581 = sub nuw nsw i32 256, %558
  %582 = zext i32 %581 to i64
  %583 = getelementptr inbounds [65 x i16], [65 x i16]* @_ZN7libgav13dsp12_GLOBAL__N_17kCos128E, i64 0, i64 %582
  %584 = load i16, i16* %583, align 8
  br label %585

585:                                              ; preds = %580, %574, %568, %564
  %586 = phi i16 [ %567, %564 ], [ %573, %568 ], [ %579, %574 ], [ %584, %580 ]
  %587 = sext i16 %586 to i32
  %588 = mul nsw i32 %556, %587
  %589 = sext i32 %588 to i64
  %590 = mul nsw i32 %522, %587
  %591 = sext i32 %590 to i64
  br i1 %524, label %592, label %596

592:                                              ; preds = %585
  %593 = zext i32 %523 to i64
  %594 = getelementptr inbounds [65 x i16], [65 x i16]* @_ZN7libgav13dsp12_GLOBAL__N_17kCos128E, i64 0, i64 %593
  %595 = load i16, i16* %594, align 8
  br label %617

596:                                              ; preds = %585
  %597 = icmp ult i32 %523, 129
  br i1 %597, label %598, label %604

598:                                              ; preds = %596
  %599 = sub nuw nsw i32 128, %523
  %600 = sext i32 %599 to i64
  %601 = getelementptr inbounds [65 x i16], [65 x i16]* @_ZN7libgav13dsp12_GLOBAL__N_17kCos128E, i64 0, i64 %600
  %602 = load i16, i16* %601, align 8
  %603 = sub i16 0, %602
  br label %617

604:                                              ; preds = %596
  %605 = icmp ult i32 %523, 193
  br i1 %605, label %606, label %612

606:                                              ; preds = %604
  %607 = add nsw i32 %523, -128
  %608 = sext i32 %607 to i64
  %609 = getelementptr inbounds [65 x i16], [65 x i16]* @_ZN7libgav13dsp12_GLOBAL__N_17kCos128E, i64 0, i64 %608
  %610 = load i16, i16* %609, align 8
  %611 = sub i16 0, %610
  br label %617

612:                                              ; preds = %604
  %613 = sub nuw nsw i32 256, %523
  %614 = zext i32 %613 to i64
  %615 = getelementptr inbounds [65 x i16], [65 x i16]* @_ZN7libgav13dsp12_GLOBAL__N_17kCos128E, i64 0, i64 %614
  %616 = load i16, i16* %615, align 8
  br label %617

617:                                              ; preds = %592, %598, %606, %612
  %618 = phi i16 [ %595, %592 ], [ %603, %598 ], [ %611, %606 ], [ %616, %612 ]
  %619 = sext i16 %618 to i32
  %620 = mul nsw i32 %556, %619
  %621 = sext i32 %620 to i64
  %622 = add nsw i64 %591, 2048
  %623 = add nsw i64 %622, %621
  %624 = lshr i64 %623, 12
  %625 = trunc i64 %624 to i32
  store i32 %625, i32* %521, align 4
  %626 = add nsw i64 %554, 2048
  %627 = sub nsw i64 %626, %589
  %628 = lshr i64 %627, 12
  %629 = trunc i64 %628 to i32
  store i32 %629, i32* %555, align 4
  %630 = sub i64 61, %513
  %631 = add nuw nsw i64 %513, 34
  %632 = sub nsw i32 124, %519
  %633 = getelementptr inbounds i32, i32* %4, i64 %630
  %634 = load i32, i32* %633, align 4
  %635 = and i32 %632, 252
  %636 = icmp ult i32 %635, 65
  br i1 %636, label %1787, label %1766

637:                                              ; preds = %637, %1638
  %638 = phi i32 [ 0, %1638 ], [ %682, %637 ]
  %639 = shl i32 %638, 2
  %640 = add nuw nsw i32 %639, 32
  %641 = and i32 %638, 1
  %642 = icmp ne i32 %641, 0
  %643 = add nuw nsw i32 %639, 35
  %644 = select i1 %642, i32 %643, i32 %640
  %645 = select i1 %642, i32 %640, i32 %643
  %646 = sext i32 %644 to i64
  %647 = getelementptr inbounds i32, i32* %4, i64 %646
  %648 = load i32, i32* %647, align 4
  %649 = sext i32 %645 to i64
  %650 = getelementptr inbounds i32, i32* %4, i64 %649
  %651 = load i32, i32* %650, align 4
  %652 = add nsw i32 %651, %648
  %653 = sub nsw i32 %648, %651
  %654 = icmp slt i32 %652, %161
  %655 = icmp sgt i32 %652, %162
  %656 = select i1 %655, i32 %162, i32 %652
  %657 = select i1 %654, i32 %161, i32 %656
  store i32 %657, i32* %647, align 4
  %658 = icmp slt i32 %653, %161
  %659 = icmp sgt i32 %653, %162
  %660 = select i1 %659, i32 %162, i32 %653
  %661 = select i1 %658, i32 %161, i32 %660
  store i32 %661, i32* %650, align 4
  %662 = add nuw nsw i32 %639, 33
  %663 = add nsw i32 %639, 34
  %664 = select i1 %642, i32 %663, i32 %662
  %665 = select i1 %642, i32 %662, i32 %663
  %666 = sext i32 %664 to i64
  %667 = getelementptr inbounds i32, i32* %4, i64 %666
  %668 = load i32, i32* %667, align 4
  %669 = sext i32 %665 to i64
  %670 = getelementptr inbounds i32, i32* %4, i64 %669
  %671 = load i32, i32* %670, align 4
  %672 = add nsw i32 %671, %668
  %673 = sub nsw i32 %668, %671
  %674 = icmp slt i32 %672, %161
  %675 = icmp sgt i32 %672, %162
  %676 = select i1 %675, i32 %162, i32 %672
  %677 = select i1 %674, i32 %161, i32 %676
  store i32 %677, i32* %667, align 4
  %678 = icmp slt i32 %673, %161
  %679 = icmp sgt i32 %673, %162
  %680 = select i1 %679, i32 %162, i32 %673
  %681 = select i1 %678, i32 %161, i32 %680
  store i32 %681, i32* %670, align 4
  %682 = add nuw nsw i32 %638, 1
  %683 = icmp eq i32 %682, 8
  br i1 %683, label %1508, label %637

684:                                              ; preds = %692, %1508
  %685 = phi i64 [ 0, %1508 ], [ %693, %692 ]
  %686 = shl i64 %685, 3
  %687 = sub nuw nsw i64 61, %686
  %688 = add nuw nsw i64 %686, 34
  %689 = trunc i64 %685 to i32
  %690 = shl i32 %689, 5
  %691 = sub i32 56, %690
  br label %695

692:                                              ; preds = %799
  %693 = add nuw nsw i64 %685, 1
  %694 = icmp eq i64 %693, 2
  br i1 %694, label %1385, label %684

695:                                              ; preds = %799, %684
  %696 = phi i64 [ 0, %684 ], [ %812, %799 ]
  %697 = sub nuw nsw i64 %687, %696
  %698 = add nuw nsw i64 %688, %696
  %699 = trunc i64 %696 to i32
  %700 = lshr i32 %699, 1
  %701 = shl i32 %700, 6
  %702 = add nsw i32 %701, %691
  %703 = getelementptr inbounds i32, i32* %4, i64 %697
  %704 = load i32, i32* %703, align 4
  %705 = and i32 %702, 248
  %706 = icmp ult i32 %705, 65
  br i1 %706, label %707, label %711

707:                                              ; preds = %695
  %708 = zext i32 %705 to i64
  %709 = getelementptr inbounds [65 x i16], [65 x i16]* @_ZN7libgav13dsp12_GLOBAL__N_17kCos128E, i64 0, i64 %708
  %710 = load i16, i16* %709, align 16
  br label %732

711:                                              ; preds = %695
  %712 = icmp ult i32 %705, 129
  br i1 %712, label %713, label %719

713:                                              ; preds = %711
  %714 = sub nuw nsw i32 128, %705
  %715 = sext i32 %714 to i64
  %716 = getelementptr inbounds [65 x i16], [65 x i16]* @_ZN7libgav13dsp12_GLOBAL__N_17kCos128E, i64 0, i64 %715
  %717 = load i16, i16* %716, align 16
  %718 = sub i16 0, %717
  br label %732

719:                                              ; preds = %711
  %720 = icmp ult i32 %705, 193
  br i1 %720, label %721, label %727

721:                                              ; preds = %719
  %722 = add nsw i32 %705, -128
  %723 = sext i32 %722 to i64
  %724 = getelementptr inbounds [65 x i16], [65 x i16]* @_ZN7libgav13dsp12_GLOBAL__N_17kCos128E, i64 0, i64 %723
  %725 = load i16, i16* %724, align 16
  %726 = sub i16 0, %725
  br label %732

727:                                              ; preds = %719
  %728 = sub nuw nsw i32 256, %705
  %729 = zext i32 %728 to i64
  %730 = getelementptr inbounds [65 x i16], [65 x i16]* @_ZN7libgav13dsp12_GLOBAL__N_17kCos128E, i64 0, i64 %729
  %731 = load i16, i16* %730, align 16
  br label %732

732:                                              ; preds = %727, %721, %713, %707
  %733 = phi i16 [ %710, %707 ], [ %718, %713 ], [ %726, %721 ], [ %731, %727 ]
  %734 = sext i16 %733 to i32
  %735 = mul nsw i32 %704, %734
  %736 = sext i32 %735 to i64
  %737 = getelementptr inbounds i32, i32* %4, i64 %698
  %738 = load i32, i32* %737, align 4
  %739 = add i32 %702, 192
  %740 = and i32 %739, 248
  %741 = icmp ult i32 %740, 65
  br i1 %741, label %746, label %742

742:                                              ; preds = %732
  %743 = icmp ult i32 %740, 129
  br i1 %743, label %750, label %744

744:                                              ; preds = %742
  %745 = icmp ult i32 %740, 193
  br i1 %745, label %756, label %762

746:                                              ; preds = %732
  %747 = zext i32 %740 to i64
  %748 = getelementptr inbounds [65 x i16], [65 x i16]* @_ZN7libgav13dsp12_GLOBAL__N_17kCos128E, i64 0, i64 %747
  %749 = load i16, i16* %748, align 16
  br label %767

750:                                              ; preds = %742
  %751 = sub nuw nsw i32 128, %740
  %752 = sext i32 %751 to i64
  %753 = getelementptr inbounds [65 x i16], [65 x i16]* @_ZN7libgav13dsp12_GLOBAL__N_17kCos128E, i64 0, i64 %752
  %754 = load i16, i16* %753, align 16
  %755 = sub i16 0, %754
  br label %767

756:                                              ; preds = %744
  %757 = add nsw i32 %740, -128
  %758 = sext i32 %757 to i64
  %759 = getelementptr inbounds [65 x i16], [65 x i16]* @_ZN7libgav13dsp12_GLOBAL__N_17kCos128E, i64 0, i64 %758
  %760 = load i16, i16* %759, align 16
  %761 = sub i16 0, %760
  br label %767

762:                                              ; preds = %744
  %763 = sub nuw nsw i32 256, %740
  %764 = zext i32 %763 to i64
  %765 = getelementptr inbounds [65 x i16], [65 x i16]* @_ZN7libgav13dsp12_GLOBAL__N_17kCos128E, i64 0, i64 %764
  %766 = load i16, i16* %765, align 16
  br label %767

767:                                              ; preds = %762, %756, %750, %746
  %768 = phi i16 [ %749, %746 ], [ %755, %750 ], [ %761, %756 ], [ %766, %762 ]
  %769 = sext i16 %768 to i32
  %770 = mul nsw i32 %738, %769
  %771 = sext i32 %770 to i64
  %772 = mul nsw i32 %704, %769
  %773 = sext i32 %772 to i64
  br i1 %706, label %774, label %778

774:                                              ; preds = %767
  %775 = zext i32 %705 to i64
  %776 = getelementptr inbounds [65 x i16], [65 x i16]* @_ZN7libgav13dsp12_GLOBAL__N_17kCos128E, i64 0, i64 %775
  %777 = load i16, i16* %776, align 16
  br label %799

778:                                              ; preds = %767
  %779 = icmp ult i32 %705, 129
  br i1 %779, label %780, label %786

780:                                              ; preds = %778
  %781 = sub nuw nsw i32 128, %705
  %782 = sext i32 %781 to i64
  %783 = getelementptr inbounds [65 x i16], [65 x i16]* @_ZN7libgav13dsp12_GLOBAL__N_17kCos128E, i64 0, i64 %782
  %784 = load i16, i16* %783, align 16
  %785 = sub i16 0, %784
  br label %799

786:                                              ; preds = %778
  %787 = icmp ult i32 %705, 193
  br i1 %787, label %788, label %794

788:                                              ; preds = %786
  %789 = add nsw i32 %705, -128
  %790 = sext i32 %789 to i64
  %791 = getelementptr inbounds [65 x i16], [65 x i16]* @_ZN7libgav13dsp12_GLOBAL__N_17kCos128E, i64 0, i64 %790
  %792 = load i16, i16* %791, align 16
  %793 = sub i16 0, %792
  br label %799

794:                                              ; preds = %786
  %795 = sub nuw nsw i32 256, %705
  %796 = zext i32 %795 to i64
  %797 = getelementptr inbounds [65 x i16], [65 x i16]* @_ZN7libgav13dsp12_GLOBAL__N_17kCos128E, i64 0, i64 %796
  %798 = load i16, i16* %797, align 16
  br label %799

799:                                              ; preds = %774, %780, %788, %794
  %800 = phi i16 [ %777, %774 ], [ %785, %780 ], [ %793, %788 ], [ %798, %794 ]
  %801 = sext i16 %800 to i32
  %802 = mul nsw i32 %738, %801
  %803 = sext i32 %802 to i64
  %804 = add nsw i64 %773, 2048
  %805 = add nsw i64 %804, %803
  %806 = lshr i64 %805, 12
  %807 = trunc i64 %806 to i32
  store i32 %807, i32* %703, align 4
  %808 = add nsw i64 %736, 2048
  %809 = sub nsw i64 %808, %771
  %810 = lshr i64 %809, 12
  %811 = trunc i64 %810 to i32
  store i32 %811, i32* %737, align 4
  %812 = add nuw nsw i64 %696, 1
  %813 = icmp eq i64 %812, 4
  br i1 %813, label %692, label %695

814:                                              ; preds = %814, %1385
  %815 = phi i32 [ 0, %1385 ], [ %899, %814 ]
  %816 = shl i32 %815, 3
  %817 = add nuw nsw i32 %816, 32
  %818 = and i32 %815, 1
  %819 = icmp ne i32 %818, 0
  %820 = add nuw nsw i32 %816, 39
  %821 = select i1 %819, i32 %820, i32 %817
  %822 = select i1 %819, i32 %817, i32 %820
  %823 = sext i32 %821 to i64
  %824 = getelementptr inbounds i32, i32* %4, i64 %823
  %825 = load i32, i32* %824, align 4
  %826 = sext i32 %822 to i64
  %827 = getelementptr inbounds i32, i32* %4, i64 %826
  %828 = load i32, i32* %827, align 4
  %829 = add nsw i32 %828, %825
  %830 = sub nsw i32 %825, %828
  %831 = icmp slt i32 %829, %161
  %832 = icmp sgt i32 %829, %162
  %833 = select i1 %832, i32 %162, i32 %829
  %834 = select i1 %831, i32 %161, i32 %833
  store i32 %834, i32* %824, align 4
  %835 = icmp slt i32 %830, %161
  %836 = icmp sgt i32 %830, %162
  %837 = select i1 %836, i32 %162, i32 %830
  %838 = select i1 %835, i32 %161, i32 %837
  store i32 %838, i32* %827, align 4
  %839 = add nuw nsw i32 %816, 33
  %840 = add nsw i32 %816, 38
  %841 = select i1 %819, i32 %840, i32 %839
  %842 = select i1 %819, i32 %839, i32 %840
  %843 = sext i32 %841 to i64
  %844 = getelementptr inbounds i32, i32* %4, i64 %843
  %845 = load i32, i32* %844, align 4
  %846 = sext i32 %842 to i64
  %847 = getelementptr inbounds i32, i32* %4, i64 %846
  %848 = load i32, i32* %847, align 4
  %849 = add nsw i32 %848, %845
  %850 = sub nsw i32 %845, %848
  %851 = icmp slt i32 %849, %161
  %852 = icmp sgt i32 %849, %162
  %853 = select i1 %852, i32 %162, i32 %849
  %854 = select i1 %851, i32 %161, i32 %853
  store i32 %854, i32* %844, align 4
  %855 = icmp slt i32 %850, %161
  %856 = icmp sgt i32 %850, %162
  %857 = select i1 %856, i32 %162, i32 %850
  %858 = select i1 %855, i32 %161, i32 %857
  store i32 %858, i32* %847, align 4
  %859 = add nuw nsw i32 %816, 34
  %860 = add nsw i32 %816, 37
  %861 = select i1 %819, i32 %860, i32 %859
  %862 = select i1 %819, i32 %859, i32 %860
  %863 = sext i32 %861 to i64
  %864 = getelementptr inbounds i32, i32* %4, i64 %863
  %865 = load i32, i32* %864, align 4
  %866 = sext i32 %862 to i64
  %867 = getelementptr inbounds i32, i32* %4, i64 %866
  %868 = load i32, i32* %867, align 4
  %869 = add nsw i32 %868, %865
  %870 = sub nsw i32 %865, %868
  %871 = icmp slt i32 %869, %161
  %872 = icmp sgt i32 %869, %162
  %873 = select i1 %872, i32 %162, i32 %869
  %874 = select i1 %871, i32 %161, i32 %873
  store i32 %874, i32* %864, align 4
  %875 = icmp slt i32 %870, %161
  %876 = icmp sgt i32 %870, %162
  %877 = select i1 %876, i32 %162, i32 %870
  %878 = select i1 %875, i32 %161, i32 %877
  store i32 %878, i32* %867, align 4
  %879 = add nuw nsw i32 %816, 35
  %880 = add nsw i32 %816, 36
  %881 = select i1 %819, i32 %880, i32 %879
  %882 = select i1 %819, i32 %879, i32 %880
  %883 = sext i32 %881 to i64
  %884 = getelementptr inbounds i32, i32* %4, i64 %883
  %885 = load i32, i32* %884, align 4
  %886 = sext i32 %882 to i64
  %887 = getelementptr inbounds i32, i32* %4, i64 %886
  %888 = load i32, i32* %887, align 4
  %889 = add nsw i32 %888, %885
  %890 = sub nsw i32 %885, %888
  %891 = icmp slt i32 %889, %161
  %892 = icmp sgt i32 %889, %162
  %893 = select i1 %892, i32 %162, i32 %889
  %894 = select i1 %891, i32 %161, i32 %893
  store i32 %894, i32* %884, align 4
  %895 = icmp slt i32 %890, %161
  %896 = icmp sgt i32 %890, %162
  %897 = select i1 %896, i32 %162, i32 %890
  %898 = select i1 %895, i32 %161, i32 %897
  store i32 %898, i32* %887, align 4
  %899 = add nuw nsw i32 %815, 1
  %900 = icmp eq i32 %899, 4
  br i1 %900, label %901, label %814

901:                                              ; preds = %814
  %902 = bitcast i8* %0 to <4 x i32>*
  %903 = load <4 x i32>, <4 x i32>* %902, align 4
  %904 = bitcast i8* %1639 to <4 x i32>*
  %905 = load <4 x i32>, <4 x i32>* %904, align 4
  %906 = shufflevector <4 x i32> %905, <4 x i32> undef, <4 x i32> <i32 3, i32 2, i32 1, i32 0>
  %907 = add nsw <4 x i32> %906, %903
  %908 = shufflevector <4 x i32> %903, <4 x i32> undef, <4 x i32> <i32 3, i32 2, i32 1, i32 0>
  %909 = sub nsw <4 x i32> %908, %905
  %910 = icmp slt <4 x i32> %907, %327
  %911 = icmp sgt <4 x i32> %907, %330
  %912 = select <4 x i1> %911, <4 x i32> %330, <4 x i32> %907
  %913 = select <4 x i1> %910, <4 x i32> %327, <4 x i32> %912
  %914 = bitcast i8* %0 to <4 x i32>*
  store <4 x i32> %913, <4 x i32>* %914, align 4
  %915 = icmp slt <4 x i32> %909, %327
  %916 = icmp sgt <4 x i32> %909, %330
  %917 = select <4 x i1> %916, <4 x i32> %330, <4 x i32> %909
  %918 = select <4 x i1> %915, <4 x i32> %327, <4 x i32> %917
  %919 = bitcast i8* %1639 to <4 x i32>*
  store <4 x i32> %918, <4 x i32>* %919, align 4
  %920 = load i32, i32* %1680, align 4
  %921 = mul nsw i32 %920, 2896
  %922 = sext i32 %921 to i64
  %923 = load i32, i32* %1665, align 4
  %924 = mul nsw i32 %923, 2896
  %925 = sext i32 %924 to i64
  %926 = add nsw i64 %922, 2048
  %927 = add nsw i64 %926, %925
  %928 = lshr i64 %927, 12
  %929 = trunc i64 %928 to i32
  store i32 %929, i32* %1680, align 4
  %930 = sub nsw i64 %926, %925
  %931 = lshr i64 %930, 12
  %932 = trunc i64 %931 to i32
  store i32 %932, i32* %1665, align 4
  %933 = load i32, i32* %1678, align 4
  %934 = mul nsw i32 %933, 2896
  %935 = sext i32 %934 to i64
  %936 = load i32, i32* %1663, align 4
  %937 = mul nsw i32 %936, 2896
  %938 = sext i32 %937 to i64
  %939 = add nsw i64 %935, 2048
  %940 = add nsw i64 %939, %938
  %941 = lshr i64 %940, 12
  %942 = trunc i64 %941 to i32
  store i32 %942, i32* %1678, align 4
  %943 = sub nsw i64 %939, %938
  %944 = lshr i64 %943, 12
  %945 = trunc i64 %944 to i32
  store i32 %945, i32* %1663, align 4
  %946 = load i32, i32* %313, align 4
  %947 = load i32, i32* %340, align 4
  %948 = add nsw i32 %947, %946
  %949 = sub nsw i32 %946, %947
  %950 = icmp slt i32 %948, %161
  %951 = icmp sgt i32 %948, %162
  %952 = select i1 %951, i32 %162, i32 %948
  %953 = select i1 %950, i32 %161, i32 %952
  store i32 %953, i32* %313, align 4
  %954 = icmp slt i32 %949, %161
  %955 = icmp sgt i32 %949, %162
  %956 = select i1 %955, i32 %162, i32 %949
  %957 = select i1 %954, i32 %161, i32 %956
  store i32 %957, i32* %340, align 4
  %958 = load i32, i32* %315, align 4
  %959 = load i32, i32* %342, align 4
  %960 = add nsw i32 %959, %958
  %961 = sub nsw i32 %958, %959
  %962 = icmp slt i32 %960, %161
  %963 = icmp sgt i32 %960, %162
  %964 = select i1 %963, i32 %162, i32 %960
  %965 = select i1 %962, i32 %161, i32 %964
  store i32 %965, i32* %315, align 4
  %966 = icmp slt i32 %961, %161
  %967 = icmp sgt i32 %961, %162
  %968 = select i1 %967, i32 %162, i32 %961
  %969 = select i1 %966, i32 %161, i32 %968
  store i32 %969, i32* %342, align 4
  %970 = bitcast i8* %318 to <4 x i32>*
  %971 = load <4 x i32>, <4 x i32>* %970, align 4
  %972 = shufflevector <4 x i32> %971, <4 x i32> undef, <4 x i32> <i32 3, i32 2, i32 1, i32 0>
  %973 = add nsw <4 x i32> %972, %971
  %974 = sub nsw <4 x i32> %972, %971
  %975 = shufflevector <4 x i32> %973, <4 x i32> %974, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %976 = icmp slt <4 x i32> %975, %327
  %977 = icmp sgt <4 x i32> %975, %330
  %978 = select <4 x i1> %977, <4 x i32> %330, <4 x i32> %975
  %979 = select <4 x i1> %976, <4 x i32> %327, <4 x i32> %978
  %980 = bitcast i8* %318 to <4 x i32>*
  store <4 x i32> %979, <4 x i32>* %980, align 4
  %981 = bitcast i8* %373 to <4 x i32>*
  %982 = load <4 x i32>, <4 x i32>* %981, align 4
  %983 = shufflevector <4 x i32> %982, <4 x i32> undef, <4 x i32> <i32 3, i32 2, i32 1, i32 0>
  %984 = bitcast i8* %354 to <4 x i32>*
  %985 = load <4 x i32>, <4 x i32>* %984, align 4
  %986 = shufflevector <4 x i32> %985, <4 x i32> undef, <4 x i32> <i32 3, i32 2, i32 1, i32 0>
  %987 = add nsw <4 x i32> %986, %982
  %988 = sub nsw <4 x i32> %983, %985
  %989 = icmp slt <4 x i32> %987, %327
  %990 = icmp sgt <4 x i32> %987, %330
  %991 = select <4 x i1> %990, <4 x i32> %330, <4 x i32> %987
  %992 = select <4 x i1> %989, <4 x i32> %327, <4 x i32> %991
  %993 = bitcast i8* %373 to <4 x i32>*
  store <4 x i32> %992, <4 x i32>* %993, align 4
  %994 = icmp slt <4 x i32> %988, %327
  %995 = icmp sgt <4 x i32> %988, %330
  %996 = select <4 x i1> %995, <4 x i32> %330, <4 x i32> %988
  %997 = select <4 x i1> %994, <4 x i32> %327, <4 x i32> %996
  %998 = bitcast i8* %354 to <4 x i32>*
  store <4 x i32> %997, <4 x i32>* %998, align 4
  br label %1088

999:                                              ; preds = %1158
  %1000 = bitcast i8* %0 to <4 x i32>*
  %1001 = load <4 x i32>, <4 x i32>* %1000, align 4
  %1002 = bitcast i8* %1677 to <4 x i32>*
  %1003 = load <4 x i32>, <4 x i32>* %1002, align 4
  %1004 = shufflevector <4 x i32> %1003, <4 x i32> undef, <4 x i32> <i32 3, i32 2, i32 1, i32 0>
  %1005 = add nsw <4 x i32> %1004, %1001
  %1006 = shufflevector <4 x i32> %1001, <4 x i32> undef, <4 x i32> <i32 3, i32 2, i32 1, i32 0>
  %1007 = sub nsw <4 x i32> %1006, %1003
  %1008 = icmp slt <4 x i32> %1005, %327
  %1009 = icmp sgt <4 x i32> %1005, %330
  %1010 = select <4 x i1> %1009, <4 x i32> %330, <4 x i32> %1005
  %1011 = select <4 x i1> %1008, <4 x i32> %327, <4 x i32> %1010
  %1012 = bitcast i8* %0 to <4 x i32>*
  store <4 x i32> %1011, <4 x i32>* %1012, align 4
  %1013 = icmp slt <4 x i32> %1007, %327
  %1014 = icmp sgt <4 x i32> %1007, %330
  %1015 = select <4 x i1> %1014, <4 x i32> %330, <4 x i32> %1007
  %1016 = select <4 x i1> %1013, <4 x i32> %327, <4 x i32> %1015
  %1017 = bitcast i8* %1677 to <4 x i32>*
  store <4 x i32> %1016, <4 x i32>* %1017, align 4
  %1018 = bitcast i8* %1639 to <4 x i32>*
  %1019 = load <4 x i32>, <4 x i32>* %1018, align 4
  %1020 = bitcast i8* %1659 to <4 x i32>*
  %1021 = load <4 x i32>, <4 x i32>* %1020, align 4
  %1022 = shufflevector <4 x i32> %1021, <4 x i32> undef, <4 x i32> <i32 3, i32 2, i32 1, i32 0>
  %1023 = add nsw <4 x i32> %1022, %1019
  %1024 = shufflevector <4 x i32> %1019, <4 x i32> undef, <4 x i32> <i32 3, i32 2, i32 1, i32 0>
  %1025 = sub nsw <4 x i32> %1024, %1021
  %1026 = icmp slt <4 x i32> %1023, %327
  %1027 = icmp sgt <4 x i32> %1023, %330
  %1028 = select <4 x i1> %1027, <4 x i32> %330, <4 x i32> %1023
  %1029 = select <4 x i1> %1026, <4 x i32> %327, <4 x i32> %1028
  %1030 = bitcast i8* %1639 to <4 x i32>*
  store <4 x i32> %1029, <4 x i32>* %1030, align 4
  %1031 = icmp slt <4 x i32> %1025, %327
  %1032 = icmp sgt <4 x i32> %1025, %330
  %1033 = select <4 x i1> %1032, <4 x i32> %330, <4 x i32> %1025
  %1034 = select <4 x i1> %1031, <4 x i32> %327, <4 x i32> %1033
  %1035 = bitcast i8* %1659 to <4 x i32>*
  store <4 x i32> %1034, <4 x i32>* %1035, align 4
  %1036 = load i32, i32* %359, align 4
  %1037 = mul nsw i32 %1036, 2896
  %1038 = sext i32 %1037 to i64
  %1039 = load i32, i32* %336, align 4
  %1040 = mul nsw i32 %1039, 2896
  %1041 = sext i32 %1040 to i64
  %1042 = add nsw i64 %1038, 2048
  %1043 = add nsw i64 %1042, %1041
  %1044 = lshr i64 %1043, 12
  %1045 = trunc i64 %1044 to i32
  store i32 %1045, i32* %359, align 4
  %1046 = sub nsw i64 %1042, %1041
  %1047 = lshr i64 %1046, 12
  %1048 = trunc i64 %1047 to i32
  store i32 %1048, i32* %336, align 4
  %1049 = load i32, i32* %361, align 4
  %1050 = mul nsw i32 %1049, 2896
  %1051 = sext i32 %1050 to i64
  %1052 = load i32, i32* %338, align 4
  %1053 = mul nsw i32 %1052, 2896
  %1054 = sext i32 %1053 to i64
  %1055 = add nsw i64 %1051, 2048
  %1056 = add nsw i64 %1055, %1054
  %1057 = lshr i64 %1056, 12
  %1058 = trunc i64 %1057 to i32
  store i32 %1058, i32* %361, align 4
  %1059 = sub nsw i64 %1055, %1054
  %1060 = lshr i64 %1059, 12
  %1061 = trunc i64 %1060 to i32
  store i32 %1061, i32* %338, align 4
  %1062 = load i32, i32* %357, align 4
  %1063 = mul nsw i32 %1062, 2896
  %1064 = sext i32 %1063 to i64
  %1065 = load i32, i32* %342, align 4
  %1066 = mul nsw i32 %1065, 2896
  %1067 = sext i32 %1066 to i64
  %1068 = add nsw i64 %1064, 2048
  %1069 = add nsw i64 %1068, %1067
  %1070 = lshr i64 %1069, 12
  %1071 = trunc i64 %1070 to i32
  store i32 %1071, i32* %357, align 4
  %1072 = sub nsw i64 %1068, %1067
  %1073 = lshr i64 %1072, 12
  %1074 = trunc i64 %1073 to i32
  store i32 %1074, i32* %342, align 4
  %1075 = load i32, i32* %355, align 4
  %1076 = mul nsw i32 %1075, 2896
  %1077 = sext i32 %1076 to i64
  %1078 = load i32, i32* %340, align 4
  %1079 = mul nsw i32 %1078, 2896
  %1080 = sext i32 %1079 to i64
  %1081 = add nsw i64 %1077, 2048
  %1082 = add nsw i64 %1081, %1080
  %1083 = lshr i64 %1082, 12
  %1084 = trunc i64 %1083 to i32
  store i32 %1084, i32* %355, align 4
  %1085 = sub nsw i64 %1081, %1080
  %1086 = lshr i64 %1085, 12
  %1087 = trunc i64 %1086 to i32
  store i32 %1087, i32* %340, align 4
  br label %1173

1088:                                             ; preds = %1158, %901
  %1089 = phi i64 [ 0, %901 ], [ %1171, %1158 ]
  %1090 = sub nuw nsw i64 59, %1089
  %1091 = add nuw nsw i64 %1089, 36
  %1092 = icmp ult i64 %1089, 4
  %1093 = select i1 %1092, i32 48, i32 112
  %1094 = getelementptr inbounds i32, i32* %4, i64 %1090
  %1095 = load i32, i32* %1094, align 4
  br i1 %1092, label %1096, label %1100

1096:                                             ; preds = %1088
  %1097 = zext i32 %1093 to i64
  %1098 = getelementptr inbounds [65 x i16], [65 x i16]* @_ZN7libgav13dsp12_GLOBAL__N_17kCos128E, i64 0, i64 %1097
  %1099 = load i16, i16* %1098, align 16
  br label %1106

1100:                                             ; preds = %1088
  %1101 = sub nuw nsw i32 128, %1093
  %1102 = zext i32 %1101 to i64
  %1103 = getelementptr inbounds [65 x i16], [65 x i16]* @_ZN7libgav13dsp12_GLOBAL__N_17kCos128E, i64 0, i64 %1102
  %1104 = load i16, i16* %1103, align 16
  %1105 = sub i16 0, %1104
  br label %1106

1106:                                             ; preds = %1100, %1096
  %1107 = phi i16 [ %1099, %1096 ], [ %1105, %1100 ]
  %1108 = sext i16 %1107 to i32
  %1109 = mul nsw i32 %1095, %1108
  %1110 = sext i32 %1109 to i64
  %1111 = getelementptr inbounds i32, i32* %4, i64 %1091
  %1112 = load i32, i32* %1111, align 4
  %1113 = add nuw nsw i32 %1093, 192
  %1114 = and i32 %1113, 240
  %1115 = icmp ult i32 %1114, 65
  br i1 %1115, label %1120, label %1116

1116:                                             ; preds = %1106
  %1117 = icmp ult i32 %1114, 129
  br i1 %1117, label %1124, label %1118

1118:                                             ; preds = %1116
  %1119 = icmp ult i32 %1114, 193
  br i1 %1119, label %1130, label %1136

1120:                                             ; preds = %1106
  %1121 = zext i32 %1114 to i64
  %1122 = getelementptr inbounds [65 x i16], [65 x i16]* @_ZN7libgav13dsp12_GLOBAL__N_17kCos128E, i64 0, i64 %1121
  %1123 = load i16, i16* %1122, align 16
  br label %1141

1124:                                             ; preds = %1116
  %1125 = sub nuw nsw i32 128, %1114
  %1126 = sext i32 %1125 to i64
  %1127 = getelementptr inbounds [65 x i16], [65 x i16]* @_ZN7libgav13dsp12_GLOBAL__N_17kCos128E, i64 0, i64 %1126
  %1128 = load i16, i16* %1127, align 16
  %1129 = sub i16 0, %1128
  br label %1141

1130:                                             ; preds = %1118
  %1131 = add nsw i32 %1114, -128
  %1132 = sext i32 %1131 to i64
  %1133 = getelementptr inbounds [65 x i16], [65 x i16]* @_ZN7libgav13dsp12_GLOBAL__N_17kCos128E, i64 0, i64 %1132
  %1134 = load i16, i16* %1133, align 16
  %1135 = sub i16 0, %1134
  br label %1141

1136:                                             ; preds = %1118
  %1137 = sub nuw nsw i32 256, %1114
  %1138 = zext i32 %1137 to i64
  %1139 = getelementptr inbounds [65 x i16], [65 x i16]* @_ZN7libgav13dsp12_GLOBAL__N_17kCos128E, i64 0, i64 %1138
  %1140 = load i16, i16* %1139, align 16
  br label %1141

1141:                                             ; preds = %1136, %1130, %1124, %1120
  %1142 = phi i16 [ %1123, %1120 ], [ %1129, %1124 ], [ %1135, %1130 ], [ %1140, %1136 ]
  %1143 = sext i16 %1142 to i32
  %1144 = mul nsw i32 %1112, %1143
  %1145 = sext i32 %1144 to i64
  %1146 = mul nsw i32 %1095, %1143
  %1147 = sext i32 %1146 to i64
  br i1 %1092, label %1148, label %1152

1148:                                             ; preds = %1141
  %1149 = zext i32 %1093 to i64
  %1150 = getelementptr inbounds [65 x i16], [65 x i16]* @_ZN7libgav13dsp12_GLOBAL__N_17kCos128E, i64 0, i64 %1149
  %1151 = load i16, i16* %1150, align 16
  br label %1158

1152:                                             ; preds = %1141
  %1153 = sub nuw nsw i32 128, %1093
  %1154 = zext i32 %1153 to i64
  %1155 = getelementptr inbounds [65 x i16], [65 x i16]* @_ZN7libgav13dsp12_GLOBAL__N_17kCos128E, i64 0, i64 %1154
  %1156 = load i16, i16* %1155, align 16
  %1157 = sub i16 0, %1156
  br label %1158

1158:                                             ; preds = %1148, %1152
  %1159 = phi i16 [ %1151, %1148 ], [ %1157, %1152 ]
  %1160 = sext i16 %1159 to i32
  %1161 = mul nsw i32 %1112, %1160
  %1162 = sext i32 %1161 to i64
  %1163 = add nsw i64 %1147, 2048
  %1164 = add nsw i64 %1163, %1162
  %1165 = lshr i64 %1164, 12
  %1166 = trunc i64 %1165 to i32
  store i32 %1166, i32* %1094, align 4
  %1167 = add nsw i64 %1110, 2048
  %1168 = sub nsw i64 %1167, %1145
  %1169 = lshr i64 %1168, 12
  %1170 = trunc i64 %1169 to i32
  store i32 %1170, i32* %1111, align 4
  %1171 = add nuw nsw i64 %1089, 1
  %1172 = icmp eq i64 %1171, 8
  br i1 %1172, label %999, label %1088

1173:                                             ; preds = %1173, %999
  %1174 = phi i64 [ 0, %999 ], [ %1207, %1173 ]
  %1175 = add nuw nsw i64 %1174, 32
  %1176 = sub nuw nsw i64 47, %1174
  %1177 = getelementptr inbounds i32, i32* %4, i64 %1175
  %1178 = load i32, i32* %1177, align 4
  %1179 = getelementptr inbounds i32, i32* %4, i64 %1176
  %1180 = load i32, i32* %1179, align 4
  %1181 = add nsw i32 %1180, %1178
  %1182 = sub nsw i32 %1178, %1180
  %1183 = icmp slt i32 %1181, %161
  %1184 = icmp sgt i32 %1181, %162
  %1185 = select i1 %1184, i32 %162, i32 %1181
  %1186 = select i1 %1183, i32 %161, i32 %1185
  store i32 %1186, i32* %1177, align 4
  %1187 = icmp slt i32 %1182, %161
  %1188 = icmp sgt i32 %1182, %162
  %1189 = select i1 %1188, i32 %162, i32 %1182
  %1190 = select i1 %1187, i32 %161, i32 %1189
  store i32 %1190, i32* %1179, align 4
  %1191 = add nuw nsw i64 %1174, 48
  %1192 = sub nuw nsw i64 63, %1174
  %1193 = getelementptr inbounds i32, i32* %4, i64 %1192
  %1194 = load i32, i32* %1193, align 4
  %1195 = getelementptr inbounds i32, i32* %4, i64 %1191
  %1196 = load i32, i32* %1195, align 4
  %1197 = add nsw i32 %1196, %1194
  %1198 = sub nsw i32 %1194, %1196
  %1199 = icmp slt i32 %1197, %161
  %1200 = icmp sgt i32 %1197, %162
  %1201 = select i1 %1200, i32 %162, i32 %1197
  %1202 = select i1 %1199, i32 %161, i32 %1201
  store i32 %1202, i32* %1193, align 4
  %1203 = icmp slt i32 %1198, %161
  %1204 = icmp sgt i32 %1198, %162
  %1205 = select i1 %1204, i32 %162, i32 %1198
  %1206 = select i1 %1203, i32 %161, i32 %1205
  store i32 %1206, i32* %1195, align 4
  %1207 = add nuw nsw i64 %1174, 1
  %1208 = icmp eq i64 %1207, 8
  br i1 %1208, label %1209, label %1173

1209:                                             ; preds = %1173, %1209
  %1210 = phi i64 [ %1226, %1209 ], [ 0, %1173 ]
  %1211 = sub nuw nsw i64 31, %1210
  %1212 = getelementptr inbounds i32, i32* %4, i64 %1210
  %1213 = load i32, i32* %1212, align 4
  %1214 = getelementptr inbounds i32, i32* %4, i64 %1211
  %1215 = load i32, i32* %1214, align 4
  %1216 = add nsw i32 %1215, %1213
  %1217 = sub nsw i32 %1213, %1215
  %1218 = icmp slt i32 %1216, %161
  %1219 = icmp sgt i32 %1216, %162
  %1220 = select i1 %1219, i32 %162, i32 %1216
  %1221 = select i1 %1218, i32 %161, i32 %1220
  store i32 %1221, i32* %1212, align 4
  %1222 = icmp slt i32 %1217, %161
  %1223 = icmp sgt i32 %1217, %162
  %1224 = select i1 %1223, i32 %162, i32 %1217
  %1225 = select i1 %1222, i32 %161, i32 %1224
  store i32 %1225, i32* %1214, align 4
  %1226 = add nuw nsw i64 %1210, 1
  %1227 = icmp eq i64 %1226, 16
  br i1 %1227, label %1228, label %1209

1228:                                             ; preds = %1209
  %1229 = getelementptr inbounds i8, i8* %0, i64 220
  %1230 = bitcast i8* %1229 to i32*
  %1231 = load i32, i32* %1230, align 4
  %1232 = mul nsw i32 %1231, 2896
  %1233 = sext i32 %1232 to i64
  %1234 = getelementptr inbounds i8, i8* %0, i64 160
  %1235 = bitcast i8* %1234 to i32*
  %1236 = load i32, i32* %1235, align 4
  %1237 = mul nsw i32 %1236, 2896
  %1238 = sext i32 %1237 to i64
  %1239 = add nsw i64 %1233, 2048
  %1240 = add nsw i64 %1239, %1238
  %1241 = lshr i64 %1240, 12
  %1242 = trunc i64 %1241 to i32
  store i32 %1242, i32* %1230, align 4
  %1243 = sub nsw i64 %1239, %1238
  %1244 = lshr i64 %1243, 12
  %1245 = trunc i64 %1244 to i32
  store i32 %1245, i32* %1235, align 4
  %1246 = getelementptr inbounds i8, i8* %0, i64 216
  %1247 = bitcast i8* %1246 to i32*
  %1248 = load i32, i32* %1247, align 4
  %1249 = mul nsw i32 %1248, 2896
  %1250 = sext i32 %1249 to i64
  %1251 = getelementptr inbounds i8, i8* %0, i64 164
  %1252 = bitcast i8* %1251 to i32*
  %1253 = load i32, i32* %1252, align 4
  %1254 = mul nsw i32 %1253, 2896
  %1255 = sext i32 %1254 to i64
  %1256 = add nsw i64 %1250, 2048
  %1257 = add nsw i64 %1256, %1255
  %1258 = lshr i64 %1257, 12
  %1259 = trunc i64 %1258 to i32
  store i32 %1259, i32* %1247, align 4
  %1260 = sub nsw i64 %1256, %1255
  %1261 = lshr i64 %1260, 12
  %1262 = trunc i64 %1261 to i32
  store i32 %1262, i32* %1252, align 4
  %1263 = getelementptr inbounds i8, i8* %0, i64 212
  %1264 = bitcast i8* %1263 to i32*
  %1265 = load i32, i32* %1264, align 4
  %1266 = mul nsw i32 %1265, 2896
  %1267 = sext i32 %1266 to i64
  %1268 = getelementptr inbounds i8, i8* %0, i64 168
  %1269 = bitcast i8* %1268 to i32*
  %1270 = load i32, i32* %1269, align 4
  %1271 = mul nsw i32 %1270, 2896
  %1272 = sext i32 %1271 to i64
  %1273 = add nsw i64 %1267, 2048
  %1274 = add nsw i64 %1273, %1272
  %1275 = lshr i64 %1274, 12
  %1276 = trunc i64 %1275 to i32
  store i32 %1276, i32* %1264, align 4
  %1277 = sub nsw i64 %1273, %1272
  %1278 = lshr i64 %1277, 12
  %1279 = trunc i64 %1278 to i32
  store i32 %1279, i32* %1269, align 4
  %1280 = getelementptr inbounds i8, i8* %0, i64 208
  %1281 = bitcast i8* %1280 to i32*
  %1282 = load i32, i32* %1281, align 4
  %1283 = mul nsw i32 %1282, 2896
  %1284 = sext i32 %1283 to i64
  %1285 = getelementptr inbounds i8, i8* %0, i64 172
  %1286 = bitcast i8* %1285 to i32*
  %1287 = load i32, i32* %1286, align 4
  %1288 = mul nsw i32 %1287, 2896
  %1289 = sext i32 %1288 to i64
  %1290 = add nsw i64 %1284, 2048
  %1291 = add nsw i64 %1290, %1289
  %1292 = lshr i64 %1291, 12
  %1293 = trunc i64 %1292 to i32
  store i32 %1293, i32* %1281, align 4
  %1294 = sub nsw i64 %1290, %1289
  %1295 = lshr i64 %1294, 12
  %1296 = trunc i64 %1295 to i32
  store i32 %1296, i32* %1286, align 4
  %1297 = getelementptr inbounds i8, i8* %0, i64 204
  %1298 = bitcast i8* %1297 to i32*
  %1299 = load i32, i32* %1298, align 4
  %1300 = mul nsw i32 %1299, 2896
  %1301 = sext i32 %1300 to i64
  %1302 = getelementptr inbounds i8, i8* %0, i64 176
  %1303 = bitcast i8* %1302 to i32*
  %1304 = load i32, i32* %1303, align 4
  %1305 = mul nsw i32 %1304, 2896
  %1306 = sext i32 %1305 to i64
  %1307 = add nsw i64 %1301, 2048
  %1308 = add nsw i64 %1307, %1306
  %1309 = lshr i64 %1308, 12
  %1310 = trunc i64 %1309 to i32
  store i32 %1310, i32* %1298, align 4
  %1311 = sub nsw i64 %1307, %1306
  %1312 = lshr i64 %1311, 12
  %1313 = trunc i64 %1312 to i32
  store i32 %1313, i32* %1303, align 4
  %1314 = getelementptr inbounds i8, i8* %0, i64 200
  %1315 = bitcast i8* %1314 to i32*
  %1316 = load i32, i32* %1315, align 4
  %1317 = mul nsw i32 %1316, 2896
  %1318 = sext i32 %1317 to i64
  %1319 = getelementptr inbounds i8, i8* %0, i64 180
  %1320 = bitcast i8* %1319 to i32*
  %1321 = load i32, i32* %1320, align 4
  %1322 = mul nsw i32 %1321, 2896
  %1323 = sext i32 %1322 to i64
  %1324 = add nsw i64 %1318, 2048
  %1325 = add nsw i64 %1324, %1323
  %1326 = lshr i64 %1325, 12
  %1327 = trunc i64 %1326 to i32
  store i32 %1327, i32* %1315, align 4
  %1328 = sub nsw i64 %1324, %1323
  %1329 = lshr i64 %1328, 12
  %1330 = trunc i64 %1329 to i32
  store i32 %1330, i32* %1320, align 4
  %1331 = getelementptr inbounds i8, i8* %0, i64 196
  %1332 = bitcast i8* %1331 to i32*
  %1333 = load i32, i32* %1332, align 4
  %1334 = mul nsw i32 %1333, 2896
  %1335 = sext i32 %1334 to i64
  %1336 = getelementptr inbounds i8, i8* %0, i64 184
  %1337 = bitcast i8* %1336 to i32*
  %1338 = load i32, i32* %1337, align 4
  %1339 = mul nsw i32 %1338, 2896
  %1340 = sext i32 %1339 to i64
  %1341 = add nsw i64 %1335, 2048
  %1342 = add nsw i64 %1341, %1340
  %1343 = lshr i64 %1342, 12
  %1344 = trunc i64 %1343 to i32
  store i32 %1344, i32* %1332, align 4
  %1345 = sub nsw i64 %1341, %1340
  %1346 = lshr i64 %1345, 12
  %1347 = trunc i64 %1346 to i32
  store i32 %1347, i32* %1337, align 4
  %1348 = getelementptr inbounds i8, i8* %0, i64 192
  %1349 = bitcast i8* %1348 to i32*
  %1350 = load i32, i32* %1349, align 4
  %1351 = mul nsw i32 %1350, 2896
  %1352 = sext i32 %1351 to i64
  %1353 = getelementptr inbounds i8, i8* %0, i64 188
  %1354 = bitcast i8* %1353 to i32*
  %1355 = load i32, i32* %1354, align 4
  %1356 = mul nsw i32 %1355, 2896
  %1357 = sext i32 %1356 to i64
  %1358 = add nsw i64 %1352, 2048
  %1359 = add nsw i64 %1358, %1357
  %1360 = lshr i64 %1359, 12
  %1361 = trunc i64 %1360 to i32
  store i32 %1361, i32* %1349, align 4
  %1362 = sub nsw i64 %1358, %1357
  %1363 = lshr i64 %1362, 12
  %1364 = trunc i64 %1363 to i32
  store i32 %1364, i32* %1354, align 4
  br label %1366

1365:                                             ; preds = %1366
  call void @llvm.lifetime.end.p0i8(i64 256, i8* nonnull %5) #4
  ret void

1366:                                             ; preds = %1366, %1228
  %1367 = phi i64 [ 0, %1228 ], [ %1383, %1366 ]
  %1368 = sub nuw nsw i64 63, %1367
  %1369 = getelementptr inbounds i32, i32* %4, i64 %1367
  %1370 = load i32, i32* %1369, align 4
  %1371 = getelementptr inbounds i32, i32* %4, i64 %1368
  %1372 = load i32, i32* %1371, align 4
  %1373 = add nsw i32 %1372, %1370
  %1374 = sub nsw i32 %1370, %1372
  %1375 = icmp slt i32 %1373, %161
  %1376 = icmp sgt i32 %1373, %162
  %1377 = select i1 %1376, i32 %162, i32 %1373
  %1378 = select i1 %1375, i32 %161, i32 %1377
  store i32 %1378, i32* %1369, align 4
  %1379 = icmp slt i32 %1374, %161
  %1380 = icmp sgt i32 %1374, %162
  %1381 = select i1 %1380, i32 %162, i32 %1374
  %1382 = select i1 %1379, i32 %161, i32 %1381
  store i32 %1382, i32* %1371, align 4
  %1383 = add nuw nsw i64 %1367, 1
  %1384 = icmp eq i64 %1383, 32
  br i1 %1384, label %1365, label %1366

1385:                                             ; preds = %692
  %1386 = bitcast i8* %0 to <4 x i32>*
  %1387 = load <4 x i32>, <4 x i32>* %1386, align 4
  %1388 = shufflevector <4 x i32> %1387, <4 x i32> undef, <4 x i32> <i32 3, i32 2, i32 1, i32 0>
  %1389 = add nsw <4 x i32> %1388, %1387
  %1390 = sub nsw <4 x i32> %1388, %1387
  %1391 = shufflevector <4 x i32> %1389, <4 x i32> %1390, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %1392 = icmp slt <4 x i32> %1391, %327
  %1393 = icmp sgt <4 x i32> %1391, %330
  %1394 = select <4 x i1> %1393, <4 x i32> %330, <4 x i32> %1391
  %1395 = select <4 x i1> %1392, <4 x i32> %327, <4 x i32> %1394
  %1396 = bitcast i8* %0 to <4 x i32>*
  store <4 x i32> %1395, <4 x i32>* %1396, align 4
  %1397 = getelementptr inbounds i8, i8* %0, i64 24
  %1398 = bitcast i8* %1397 to i32*
  %1399 = load i32, i32* %1398, align 4
  %1400 = mul nsw i32 %1399, 2896
  %1401 = sext i32 %1400 to i64
  %1402 = getelementptr inbounds i8, i8* %0, i64 20
  %1403 = bitcast i8* %1402 to i32*
  %1404 = load i32, i32* %1403, align 4
  %1405 = mul nsw i32 %1404, 2896
  %1406 = sext i32 %1405 to i64
  %1407 = add nsw i64 %1401, 2048
  %1408 = add nsw i64 %1407, %1406
  %1409 = lshr i64 %1408, 12
  %1410 = trunc i64 %1409 to i32
  store i32 %1410, i32* %1398, align 4
  %1411 = sub nsw i64 %1407, %1406
  %1412 = lshr i64 %1411, 12
  %1413 = trunc i64 %1412 to i32
  store i32 %1413, i32* %1403, align 4
  %1414 = bitcast i8* %1659 to <4 x i32>*
  %1415 = load <4 x i32>, <4 x i32>* %1414, align 4
  %1416 = shufflevector <4 x i32> %1415, <4 x i32> undef, <4 x i32> <i32 3, i32 2, i32 1, i32 0>
  %1417 = add nsw <4 x i32> %1416, %1415
  %1418 = sub nsw <4 x i32> %1416, %1415
  %1419 = shufflevector <4 x i32> %1417, <4 x i32> %1418, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %1420 = icmp slt <4 x i32> %1419, %327
  %1421 = icmp sgt <4 x i32> %1419, %330
  %1422 = select <4 x i1> %1421, <4 x i32> %330, <4 x i32> %1419
  %1423 = select <4 x i1> %1420, <4 x i32> %327, <4 x i32> %1422
  %1424 = bitcast i8* %1659 to <4 x i32>*
  store <4 x i32> %1423, <4 x i32>* %1424, align 4
  %1425 = bitcast i8* %1677 to <4 x i32>*
  %1426 = load <4 x i32>, <4 x i32>* %1425, align 4
  %1427 = shufflevector <4 x i32> %1426, <4 x i32> undef, <4 x i32> <i32 3, i32 2, i32 1, i32 0>
  %1428 = sub nsw <4 x i32> %1427, %1426
  %1429 = add nsw <4 x i32> %1427, %1426
  %1430 = shufflevector <4 x i32> %1428, <4 x i32> %1429, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %1431 = icmp slt <4 x i32> %1430, %327
  %1432 = icmp sgt <4 x i32> %1430, %330
  %1433 = select <4 x i1> %1432, <4 x i32> %330, <4 x i32> %1430
  %1434 = select <4 x i1> %1431, <4 x i32> %327, <4 x i32> %1433
  %1435 = bitcast i8* %1677 to <4 x i32>*
  store <4 x i32> %1434, <4 x i32>* %1435, align 4
  %1436 = load i32, i32* %376, align 4
  %1437 = mul nsw i32 %1436, 1567
  %1438 = sext i32 %1437 to i64
  %1439 = load i32, i32* %319, align 4
  %1440 = mul nsw i32 %1439, 3784
  %1441 = sext i32 %1440 to i64
  %1442 = mul nsw i32 %1436, 3784
  %1443 = sext i32 %1442 to i64
  %1444 = mul nsw i32 %1439, 1567
  %1445 = sext i32 %1444 to i64
  %1446 = add nsw i64 %1443, 2048
  %1447 = add nsw i64 %1446, %1445
  %1448 = lshr i64 %1447, 12
  %1449 = trunc i64 %1448 to i32
  store i32 %1449, i32* %376, align 4
  %1450 = add nsw i64 %1438, 2048
  %1451 = sub nsw i64 %1450, %1441
  %1452 = lshr i64 %1451, 12
  %1453 = trunc i64 %1452 to i32
  store i32 %1453, i32* %319, align 4
  %1454 = load i32, i32* %374, align 4
  %1455 = mul nsw i32 %1454, 1567
  %1456 = sext i32 %1455 to i64
  %1457 = load i32, i32* %317, align 4
  %1458 = mul nsw i32 %1457, 3784
  %1459 = sext i32 %1458 to i64
  %1460 = mul nsw i32 %1454, 3784
  %1461 = sext i32 %1460 to i64
  %1462 = mul nsw i32 %1457, 1567
  %1463 = sext i32 %1462 to i64
  %1464 = add nsw i64 %1461, 2048
  %1465 = add nsw i64 %1464, %1463
  %1466 = lshr i64 %1465, 12
  %1467 = trunc i64 %1466 to i32
  store i32 %1467, i32* %374, align 4
  %1468 = add nsw i64 %1456, 2048
  %1469 = sub nsw i64 %1468, %1459
  %1470 = lshr i64 %1469, 12
  %1471 = trunc i64 %1470 to i32
  store i32 %1471, i32* %317, align 4
  %1472 = load i32, i32* %359, align 4
  %1473 = mul nsw i32 %1472, -3784
  %1474 = sext i32 %1473 to i64
  %1475 = load i32, i32* %336, align 4
  %1476 = mul nsw i32 %1475, 1567
  %1477 = sext i32 %1476 to i64
  %1478 = mul nsw i32 %1472, 1567
  %1479 = sext i32 %1478 to i64
  %1480 = mul nsw i32 %1475, -3784
  %1481 = sext i32 %1480 to i64
  %1482 = add nsw i64 %1479, 2048
  %1483 = add nsw i64 %1482, %1481
  %1484 = lshr i64 %1483, 12
  %1485 = trunc i64 %1484 to i32
  store i32 %1485, i32* %359, align 4
  %1486 = add nsw i64 %1474, 2048
  %1487 = sub nsw i64 %1486, %1477
  %1488 = lshr i64 %1487, 12
  %1489 = trunc i64 %1488 to i32
  store i32 %1489, i32* %336, align 4
  %1490 = load i32, i32* %361, align 4
  %1491 = mul nsw i32 %1490, -3784
  %1492 = sext i32 %1491 to i64
  %1493 = load i32, i32* %338, align 4
  %1494 = mul nsw i32 %1493, 1567
  %1495 = sext i32 %1494 to i64
  %1496 = mul nsw i32 %1490, 1567
  %1497 = sext i32 %1496 to i64
  %1498 = mul nsw i32 %1493, -3784
  %1499 = sext i32 %1498 to i64
  %1500 = add nsw i64 %1497, 2048
  %1501 = add nsw i64 %1500, %1499
  %1502 = lshr i64 %1501, 12
  %1503 = trunc i64 %1502 to i32
  store i32 %1503, i32* %361, align 4
  %1504 = add nsw i64 %1492, 2048
  %1505 = sub nsw i64 %1504, %1495
  %1506 = lshr i64 %1505, 12
  %1507 = trunc i64 %1506 to i32
  store i32 %1507, i32* %338, align 4
  br label %814

1508:                                             ; preds = %637
  %1509 = load i32, i32* %4, align 4
  %1510 = mul nsw i32 %1509, 2896
  %1511 = sext i32 %1510 to i64
  %1512 = getelementptr inbounds i8, i8* %0, i64 4
  %1513 = bitcast i8* %1512 to i32*
  %1514 = load i32, i32* %1513, align 4
  %1515 = mul nsw i32 %1514, 2896
  %1516 = sext i32 %1515 to i64
  %1517 = sub nsw i64 %1511, %1516
  %1518 = add nsw i64 %1516, %1511
  %1519 = add nsw i64 %1518, 2048
  %1520 = lshr i64 %1519, 12
  %1521 = trunc i64 %1520 to i32
  store i32 %1521, i32* %4, align 4
  %1522 = add nsw i64 %1517, 2048
  %1523 = lshr i64 %1522, 12
  %1524 = trunc i64 %1523 to i32
  store i32 %1524, i32* %1513, align 4
  %1525 = getelementptr inbounds i8, i8* %0, i64 8
  %1526 = bitcast i8* %1525 to i32*
  %1527 = load i32, i32* %1526, align 4
  %1528 = mul nsw i32 %1527, 1567
  %1529 = sext i32 %1528 to i64
  %1530 = getelementptr inbounds i8, i8* %0, i64 12
  %1531 = bitcast i8* %1530 to i32*
  %1532 = load i32, i32* %1531, align 4
  %1533 = mul nsw i32 %1532, 3784
  %1534 = sext i32 %1533 to i64
  %1535 = sub nsw i64 %1529, %1534
  %1536 = mul nsw i32 %1527, 3784
  %1537 = sext i32 %1536 to i64
  %1538 = mul nsw i32 %1532, 1567
  %1539 = sext i32 %1538 to i64
  %1540 = add nsw i64 %1539, %1537
  %1541 = add nsw i64 %1535, 2048
  %1542 = lshr i64 %1541, 12
  %1543 = trunc i64 %1542 to i32
  store i32 %1543, i32* %1526, align 4
  %1544 = add nsw i64 %1540, 2048
  %1545 = lshr i64 %1544, 12
  %1546 = trunc i64 %1545 to i32
  store i32 %1546, i32* %1531, align 4
  %1547 = bitcast i8* %1639 to <4 x i32>*
  %1548 = load <4 x i32>, <4 x i32>* %1547, align 4
  %1549 = shufflevector <4 x i32> %1548, <4 x i32> undef, <4 x i32> <i32 1, i32 0, i32 3, i32 2>
  %1550 = add nsw <4 x i32> %1549, %1548
  %1551 = sub nsw <4 x i32> %1549, %1548
  %1552 = shufflevector <4 x i32> %1550, <4 x i32> %1551, <4 x i32> <i32 0, i32 5, i32 6, i32 3>
  %1553 = icmp slt <4 x i32> %1552, %327
  %1554 = icmp sgt <4 x i32> %1552, %330
  %1555 = select <4 x i1> %1554, <4 x i32> %330, <4 x i32> %1552
  %1556 = select <4 x i1> %1553, <4 x i32> %327, <4 x i32> %1555
  %1557 = bitcast i8* %1639 to <4 x i32>*
  store <4 x i32> %1556, <4 x i32>* %1557, align 4
  %1558 = load i32, i32* %1682, align 4
  %1559 = mul nsw i32 %1558, 1567
  %1560 = sext i32 %1559 to i64
  %1561 = load i32, i32* %1661, align 4
  %1562 = mul nsw i32 %1561, 3784
  %1563 = sext i32 %1562 to i64
  %1564 = mul nsw i32 %1558, 3784
  %1565 = sext i32 %1564 to i64
  %1566 = mul nsw i32 %1561, 1567
  %1567 = sext i32 %1566 to i64
  %1568 = add nsw i64 %1565, 2048
  %1569 = add nsw i64 %1568, %1567
  %1570 = lshr i64 %1569, 12
  %1571 = trunc i64 %1570 to i32
  store i32 %1571, i32* %1682, align 4
  %1572 = add nsw i64 %1560, 2048
  %1573 = sub nsw i64 %1572, %1563
  %1574 = lshr i64 %1573, 12
  %1575 = trunc i64 %1574 to i32
  store i32 %1575, i32* %1661, align 4
  %1576 = load i32, i32* %1680, align 4
  %1577 = mul nsw i32 %1576, -3784
  %1578 = sext i32 %1577 to i64
  %1579 = load i32, i32* %1665, align 4
  %1580 = mul nsw i32 %1579, 1567
  %1581 = sext i32 %1580 to i64
  %1582 = mul nsw i32 %1576, 1567
  %1583 = sext i32 %1582 to i64
  %1584 = mul nsw i32 %1579, -3784
  %1585 = sext i32 %1584 to i64
  %1586 = add nsw i64 %1583, 2048
  %1587 = add nsw i64 %1586, %1585
  %1588 = lshr i64 %1587, 12
  %1589 = trunc i64 %1588 to i32
  store i32 %1589, i32* %1680, align 4
  %1590 = add nsw i64 %1578, 2048
  %1591 = sub nsw i64 %1590, %1581
  %1592 = lshr i64 %1591, 12
  %1593 = trunc i64 %1592 to i32
  store i32 %1593, i32* %1665, align 4
  %1594 = bitcast i8* %312 to <4 x i32>*
  %1595 = load <4 x i32>, <4 x i32>* %1594, align 4
  %1596 = shufflevector <4 x i32> %1595, <4 x i32> undef, <4 x i32> <i32 3, i32 2, i32 1, i32 0>
  %1597 = add nsw <4 x i32> %1596, %1595
  %1598 = sub nsw <4 x i32> %1596, %1595
  %1599 = shufflevector <4 x i32> %1597, <4 x i32> %1598, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %1600 = icmp slt <4 x i32> %1599, %327
  %1601 = icmp sgt <4 x i32> %1599, %330
  %1602 = select <4 x i1> %1601, <4 x i32> %330, <4 x i32> %1599
  %1603 = select <4 x i1> %1600, <4 x i32> %327, <4 x i32> %1602
  %1604 = bitcast i8* %312 to <4 x i32>*
  store <4 x i32> %1603, <4 x i32>* %1604, align 4
  %1605 = bitcast i8* %335 to <4 x i32>*
  %1606 = load <4 x i32>, <4 x i32>* %1605, align 4
  %1607 = shufflevector <4 x i32> %1606, <4 x i32> undef, <4 x i32> <i32 3, i32 2, i32 1, i32 0>
  %1608 = sub nsw <4 x i32> %1607, %1606
  %1609 = add nsw <4 x i32> %1607, %1606
  %1610 = shufflevector <4 x i32> %1608, <4 x i32> %1609, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %1611 = icmp slt <4 x i32> %1610, %327
  %1612 = icmp sgt <4 x i32> %1610, %330
  %1613 = select <4 x i1> %1612, <4 x i32> %330, <4 x i32> %1610
  %1614 = select <4 x i1> %1611, <4 x i32> %327, <4 x i32> %1613
  %1615 = bitcast i8* %335 to <4 x i32>*
  store <4 x i32> %1614, <4 x i32>* %1615, align 4
  %1616 = bitcast i8* %354 to <4 x i32>*
  %1617 = load <4 x i32>, <4 x i32>* %1616, align 4
  %1618 = shufflevector <4 x i32> %1617, <4 x i32> undef, <4 x i32> <i32 3, i32 2, i32 1, i32 0>
  %1619 = add nsw <4 x i32> %1618, %1617
  %1620 = sub nsw <4 x i32> %1618, %1617
  %1621 = shufflevector <4 x i32> %1619, <4 x i32> %1620, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %1622 = icmp slt <4 x i32> %1621, %327
  %1623 = icmp sgt <4 x i32> %1621, %330
  %1624 = select <4 x i1> %1623, <4 x i32> %330, <4 x i32> %1621
  %1625 = select <4 x i1> %1622, <4 x i32> %327, <4 x i32> %1624
  %1626 = bitcast i8* %354 to <4 x i32>*
  store <4 x i32> %1625, <4 x i32>* %1626, align 4
  %1627 = bitcast i8* %373 to <4 x i32>*
  %1628 = load <4 x i32>, <4 x i32>* %1627, align 4
  %1629 = shufflevector <4 x i32> %1628, <4 x i32> undef, <4 x i32> <i32 3, i32 2, i32 1, i32 0>
  %1630 = sub nsw <4 x i32> %1629, %1628
  %1631 = add nsw <4 x i32> %1629, %1628
  %1632 = shufflevector <4 x i32> %1630, <4 x i32> %1631, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %1633 = icmp slt <4 x i32> %1632, %327
  %1634 = icmp sgt <4 x i32> %1632, %330
  %1635 = select <4 x i1> %1634, <4 x i32> %330, <4 x i32> %1632
  %1636 = select <4 x i1> %1633, <4 x i32> %327, <4 x i32> %1635
  %1637 = bitcast i8* %373 to <4 x i32>*
  store <4 x i32> %1636, <4 x i32>* %1637, align 4
  br label %684

1638:                                             ; preds = %1858
  %1639 = getelementptr inbounds i8, i8* %0, i64 16
  %1640 = bitcast i8* %1639 to <2 x i32>*
  %1641 = load <2 x i32>, <2 x i32>* %1640, align 4
  %1642 = shufflevector <2 x i32> %1641, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 1, i32 0>
  %1643 = getelementptr inbounds i8, i8* %0, i64 24
  %1644 = bitcast i8* %1643 to <2 x i32>*
  %1645 = load <2 x i32>, <2 x i32>* %1644, align 4
  %1646 = shufflevector <2 x i32> %1645, <2 x i32> undef, <2 x i32> <i32 1, i32 0>
  %1647 = shufflevector <2 x i32> %1646, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 1, i32 0>
  %1648 = mul nsw <4 x i32> %1642, <i32 799, i32 3406, i32 2276, i32 4017>
  %1649 = sext <4 x i32> %1648 to <4 x i64>
  %1650 = mul nsw <4 x i32> %1647, <i32 4017, i32 2276, i32 3406, i32 799>
  %1651 = sext <4 x i32> %1650 to <4 x i64>
  %1652 = add nsw <4 x i64> %1649, <i64 2048, i64 2048, i64 2048, i64 2048>
  %1653 = sub nsw <4 x i64> %1652, %1651
  %1654 = add nsw <4 x i64> %1652, %1651
  %1655 = shufflevector <4 x i64> %1653, <4 x i64> %1654, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %1656 = lshr <4 x i64> %1655, <i64 12, i64 12, i64 12, i64 12>
  %1657 = trunc <4 x i64> %1656 to <4 x i32>
  %1658 = bitcast i8* %1639 to <4 x i32>*
  store <4 x i32> %1657, <4 x i32>* %1658, align 4
  %1659 = getelementptr inbounds i8, i8* %0, i64 32
  %1660 = getelementptr inbounds i8, i8* %0, i64 36
  %1661 = bitcast i8* %1660 to i32*
  %1662 = getelementptr inbounds i8, i8* %0, i64 44
  %1663 = bitcast i8* %1662 to i32*
  %1664 = getelementptr inbounds i8, i8* %0, i64 40
  %1665 = bitcast i8* %1664 to i32*
  %1666 = bitcast i8* %1659 to <4 x i32>*
  %1667 = load <4 x i32>, <4 x i32>* %1666, align 4
  %1668 = shufflevector <4 x i32> %1667, <4 x i32> undef, <4 x i32> <i32 1, i32 0, i32 3, i32 2>
  %1669 = add nsw <4 x i32> %1668, %1667
  %1670 = sub nsw <4 x i32> %1668, %1667
  %1671 = shufflevector <4 x i32> %1669, <4 x i32> %1670, <4 x i32> <i32 0, i32 5, i32 6, i32 3>
  %1672 = icmp slt <4 x i32> %1671, %327
  %1673 = icmp sgt <4 x i32> %1671, %330
  %1674 = select <4 x i1> %1673, <4 x i32> %330, <4 x i32> %1671
  %1675 = select <4 x i1> %1672, <4 x i32> %327, <4 x i32> %1674
  %1676 = bitcast i8* %1659 to <4 x i32>*
  store <4 x i32> %1675, <4 x i32>* %1676, align 4
  %1677 = getelementptr inbounds i8, i8* %0, i64 48
  %1678 = bitcast i8* %1677 to i32*
  %1679 = getelementptr inbounds i8, i8* %0, i64 52
  %1680 = bitcast i8* %1679 to i32*
  %1681 = getelementptr inbounds i8, i8* %0, i64 56
  %1682 = bitcast i8* %1681 to i32*
  %1683 = bitcast i8* %1677 to <4 x i32>*
  %1684 = load <4 x i32>, <4 x i32>* %1683, align 4
  %1685 = shufflevector <4 x i32> %1684, <4 x i32> undef, <4 x i32> <i32 1, i32 0, i32 3, i32 2>
  %1686 = add nsw <4 x i32> %1685, %1684
  %1687 = sub nsw <4 x i32> %1685, %1684
  %1688 = shufflevector <4 x i32> %1686, <4 x i32> %1687, <4 x i32> <i32 0, i32 5, i32 6, i32 3>
  %1689 = icmp slt <4 x i32> %1688, %327
  %1690 = icmp sgt <4 x i32> %1688, %330
  %1691 = select <4 x i1> %1690, <4 x i32> %330, <4 x i32> %1688
  %1692 = select <4 x i1> %1689, <4 x i32> %327, <4 x i32> %1691
  %1693 = bitcast i8* %1677 to <4 x i32>*
  store <4 x i32> %1692, <4 x i32>* %1693, align 4
  %1694 = load i32, i32* %378, align 4
  %1695 = mul nsw i32 %1694, 799
  %1696 = sext i32 %1695 to i64
  %1697 = load i32, i32* %315, align 4
  %1698 = mul nsw i32 %1697, 4017
  %1699 = sext i32 %1698 to i64
  %1700 = mul nsw i32 %1694, 4017
  %1701 = sext i32 %1700 to i64
  %1702 = mul nsw i32 %1697, 799
  %1703 = sext i32 %1702 to i64
  %1704 = add nsw i64 %1701, 2048
  %1705 = add nsw i64 %1704, %1703
  %1706 = lshr i64 %1705, 12
  %1707 = trunc i64 %1706 to i32
  store i32 %1707, i32* %378, align 4
  %1708 = add nsw i64 %1696, 2048
  %1709 = sub nsw i64 %1708, %1699
  %1710 = lshr i64 %1709, 12
  %1711 = trunc i64 %1710 to i32
  store i32 %1711, i32* %315, align 4
  %1712 = load i32, i32* %376, align 4
  %1713 = mul nsw i32 %1712, -4017
  %1714 = sext i32 %1713 to i64
  %1715 = load i32, i32* %319, align 4
  %1716 = mul nsw i32 %1715, 799
  %1717 = sext i32 %1716 to i64
  %1718 = mul nsw i32 %1712, 799
  %1719 = sext i32 %1718 to i64
  %1720 = mul nsw i32 %1715, -4017
  %1721 = sext i32 %1720 to i64
  %1722 = add nsw i64 %1719, 2048
  %1723 = add nsw i64 %1722, %1721
  %1724 = lshr i64 %1723, 12
  %1725 = trunc i64 %1724 to i32
  store i32 %1725, i32* %376, align 4
  %1726 = add nsw i64 %1714, 2048
  %1727 = sub nsw i64 %1726, %1717
  %1728 = lshr i64 %1727, 12
  %1729 = trunc i64 %1728 to i32
  store i32 %1729, i32* %319, align 4
  %1730 = load i32, i32* %361, align 4
  %1731 = mul nsw i32 %1730, 3406
  %1732 = sext i32 %1731 to i64
  %1733 = load i32, i32* %338, align 4
  %1734 = mul nsw i32 %1733, 2276
  %1735 = sext i32 %1734 to i64
  %1736 = mul nsw i32 %1730, 2276
  %1737 = sext i32 %1736 to i64
  %1738 = mul nsw i32 %1733, 3406
  %1739 = sext i32 %1738 to i64
  %1740 = add nsw i64 %1737, 2048
  %1741 = add nsw i64 %1740, %1739
  %1742 = lshr i64 %1741, 12
  %1743 = trunc i64 %1742 to i32
  store i32 %1743, i32* %361, align 4
  %1744 = add nsw i64 %1732, 2048
  %1745 = sub nsw i64 %1744, %1735
  %1746 = lshr i64 %1745, 12
  %1747 = trunc i64 %1746 to i32
  store i32 %1747, i32* %338, align 4
  %1748 = load i32, i32* %357, align 4
  %1749 = mul nsw i32 %1748, -2276
  %1750 = sext i32 %1749 to i64
  %1751 = load i32, i32* %342, align 4
  %1752 = mul nsw i32 %1751, 3406
  %1753 = sext i32 %1752 to i64
  %1754 = mul nsw i32 %1748, 3406
  %1755 = sext i32 %1754 to i64
  %1756 = mul nsw i32 %1751, -2276
  %1757 = sext i32 %1756 to i64
  %1758 = add nsw i64 %1755, 2048
  %1759 = add nsw i64 %1758, %1757
  %1760 = lshr i64 %1759, 12
  %1761 = trunc i64 %1760 to i32
  store i32 %1761, i32* %357, align 4
  %1762 = add nsw i64 %1750, 2048
  %1763 = sub nsw i64 %1762, %1753
  %1764 = lshr i64 %1763, 12
  %1765 = trunc i64 %1764 to i32
  store i32 %1765, i32* %342, align 4
  br label %637

1766:                                             ; preds = %617
  %1767 = icmp ult i32 %635, 129
  br i1 %1767, label %1781, label %1768

1768:                                             ; preds = %1766
  %1769 = icmp ult i32 %635, 193
  br i1 %1769, label %1775, label %1770

1770:                                             ; preds = %1768
  %1771 = sub nuw nsw i32 256, %635
  %1772 = zext i32 %1771 to i64
  %1773 = getelementptr inbounds [65 x i16], [65 x i16]* @_ZN7libgav13dsp12_GLOBAL__N_17kCos128E, i64 0, i64 %1772
  %1774 = load i16, i16* %1773, align 8
  br label %1791

1775:                                             ; preds = %1768
  %1776 = add nsw i32 %635, -128
  %1777 = sext i32 %1776 to i64
  %1778 = getelementptr inbounds [65 x i16], [65 x i16]* @_ZN7libgav13dsp12_GLOBAL__N_17kCos128E, i64 0, i64 %1777
  %1779 = load i16, i16* %1778, align 8
  %1780 = sub i16 0, %1779
  br label %1791

1781:                                             ; preds = %1766
  %1782 = sub nuw nsw i32 128, %635
  %1783 = sext i32 %1782 to i64
  %1784 = getelementptr inbounds [65 x i16], [65 x i16]* @_ZN7libgav13dsp12_GLOBAL__N_17kCos128E, i64 0, i64 %1783
  %1785 = load i16, i16* %1784, align 8
  %1786 = sub i16 0, %1785
  br label %1791

1787:                                             ; preds = %617
  %1788 = zext i32 %635 to i64
  %1789 = getelementptr inbounds [65 x i16], [65 x i16]* @_ZN7libgav13dsp12_GLOBAL__N_17kCos128E, i64 0, i64 %1788
  %1790 = load i16, i16* %1789, align 8
  br label %1791

1791:                                             ; preds = %1787, %1781, %1775, %1770
  %1792 = phi i16 [ %1790, %1787 ], [ %1786, %1781 ], [ %1780, %1775 ], [ %1774, %1770 ]
  %1793 = sext i16 %1792 to i32
  %1794 = mul nsw i32 %634, %1793
  %1795 = sext i32 %1794 to i64
  %1796 = getelementptr inbounds i32, i32* %4, i64 %631
  %1797 = load i32, i32* %1796, align 4
  %1798 = sub nsw i32 60, %519
  %1799 = and i32 %1798, 252
  %1800 = icmp ult i32 %1799, 65
  br i1 %1800, label %1822, label %1801

1801:                                             ; preds = %1791
  %1802 = icmp ult i32 %1799, 129
  br i1 %1802, label %1816, label %1803

1803:                                             ; preds = %1801
  %1804 = icmp ult i32 %1799, 193
  br i1 %1804, label %1810, label %1805

1805:                                             ; preds = %1803
  %1806 = sub nuw nsw i32 256, %1799
  %1807 = zext i32 %1806 to i64
  %1808 = getelementptr inbounds [65 x i16], [65 x i16]* @_ZN7libgav13dsp12_GLOBAL__N_17kCos128E, i64 0, i64 %1807
  %1809 = load i16, i16* %1808, align 8
  br label %1826

1810:                                             ; preds = %1803
  %1811 = add nsw i32 %1799, -128
  %1812 = sext i32 %1811 to i64
  %1813 = getelementptr inbounds [65 x i16], [65 x i16]* @_ZN7libgav13dsp12_GLOBAL__N_17kCos128E, i64 0, i64 %1812
  %1814 = load i16, i16* %1813, align 8
  %1815 = sub i16 0, %1814
  br label %1826

1816:                                             ; preds = %1801
  %1817 = sub nuw nsw i32 128, %1799
  %1818 = sext i32 %1817 to i64
  %1819 = getelementptr inbounds [65 x i16], [65 x i16]* @_ZN7libgav13dsp12_GLOBAL__N_17kCos128E, i64 0, i64 %1818
  %1820 = load i16, i16* %1819, align 8
  %1821 = sub i16 0, %1820
  br label %1826

1822:                                             ; preds = %1791
  %1823 = zext i32 %1799 to i64
  %1824 = getelementptr inbounds [65 x i16], [65 x i16]* @_ZN7libgav13dsp12_GLOBAL__N_17kCos128E, i64 0, i64 %1823
  %1825 = load i16, i16* %1824, align 8
  br label %1826

1826:                                             ; preds = %1822, %1816, %1810, %1805
  %1827 = phi i16 [ %1825, %1822 ], [ %1821, %1816 ], [ %1815, %1810 ], [ %1809, %1805 ]
  %1828 = sext i16 %1827 to i32
  %1829 = mul nsw i32 %1797, %1828
  %1830 = sext i32 %1829 to i64
  %1831 = mul nsw i32 %634, %1828
  %1832 = sext i32 %1831 to i64
  br i1 %636, label %1854, label %1833

1833:                                             ; preds = %1826
  %1834 = icmp ult i32 %635, 129
  br i1 %1834, label %1848, label %1835

1835:                                             ; preds = %1833
  %1836 = icmp ult i32 %635, 193
  br i1 %1836, label %1842, label %1837

1837:                                             ; preds = %1835
  %1838 = sub nuw nsw i32 256, %635
  %1839 = zext i32 %1838 to i64
  %1840 = getelementptr inbounds [65 x i16], [65 x i16]* @_ZN7libgav13dsp12_GLOBAL__N_17kCos128E, i64 0, i64 %1839
  %1841 = load i16, i16* %1840, align 8
  br label %1858

1842:                                             ; preds = %1835
  %1843 = add nsw i32 %635, -128
  %1844 = sext i32 %1843 to i64
  %1845 = getelementptr inbounds [65 x i16], [65 x i16]* @_ZN7libgav13dsp12_GLOBAL__N_17kCos128E, i64 0, i64 %1844
  %1846 = load i16, i16* %1845, align 8
  %1847 = sub i16 0, %1846
  br label %1858

1848:                                             ; preds = %1833
  %1849 = sub nuw nsw i32 128, %635
  %1850 = sext i32 %1849 to i64
  %1851 = getelementptr inbounds [65 x i16], [65 x i16]* @_ZN7libgav13dsp12_GLOBAL__N_17kCos128E, i64 0, i64 %1850
  %1852 = load i16, i16* %1851, align 8
  %1853 = sub i16 0, %1852
  br label %1858

1854:                                             ; preds = %1826
  %1855 = zext i32 %635 to i64
  %1856 = getelementptr inbounds [65 x i16], [65 x i16]* @_ZN7libgav13dsp12_GLOBAL__N_17kCos128E, i64 0, i64 %1855
  %1857 = load i16, i16* %1856, align 8
  br label %1858

1858:                                             ; preds = %1854, %1848, %1842, %1837
  %1859 = phi i16 [ %1857, %1854 ], [ %1853, %1848 ], [ %1847, %1842 ], [ %1841, %1837 ]
  %1860 = sext i16 %1859 to i32
  %1861 = mul nsw i32 %1797, %1860
  %1862 = sext i32 %1861 to i64
  %1863 = add nsw i64 %1832, 2048
  %1864 = add nsw i64 %1863, %1862
  %1865 = lshr i64 %1864, 12
  %1866 = trunc i64 %1865 to i32
  store i32 %1866, i32* %633, align 4
  %1867 = add nsw i64 %1795, 2048
  %1868 = sub nsw i64 %1867, %1830
  %1869 = lshr i64 %1868, 12
  %1870 = trunc i64 %1869 to i32
  store i32 %1870, i32* %1796, align 4
  %1871 = add nuw nsw i64 %512, 1
  %1872 = icmp eq i64 %1871, 4
  br i1 %1872, label %1638, label %511
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal fastcc void @_ZN7libgav13dsp12_GLOBAL__N_113Adst4DcOnly_CILi10EiEEvPvabib(i8* nocapture, i8 signext, i1 zeroext, i32, i1 zeroext) unnamed_addr #3 {
  %6 = bitcast i8* %0 to i32*
  %7 = and i1 %2, %4
  %8 = load i32, i32* %6, align 4
  br i1 %7, label %9, label %13

9:                                                ; preds = %5
  %10 = mul nsw i32 %8, 2896
  %11 = add nsw i32 %10, 2048
  %12 = ashr i32 %11, 12
  store i32 %12, i32* %6, align 4
  br label %13

13:                                               ; preds = %5, %9
  %14 = phi i32 [ %12, %9 ], [ %8, %5 ]
  %15 = insertelement <4 x i32> undef, i32 %14, i32 0
  %16 = shufflevector <4 x i32> %15, <4 x i32> undef, <4 x i32> zeroinitializer
  %17 = mul nsw <4 x i32> %16, <i32 1321, i32 2482, i32 3344, i32 3803>
  %18 = add nsw <4 x i32> %17, <i32 2048, i32 2048, i32 2048, i32 2048>
  %19 = ashr <4 x i32> %18, <i32 12, i32 12, i32 12, i32 12>
  %20 = bitcast i8* %0 to <4 x i32>*
  store <4 x i32> %19, <4 x i32>* %20, align 4
  %21 = icmp sgt i32 %3, 0
  %22 = and i1 %21, %4
  %23 = extractelement <4 x i32> %19, i32 0
  %24 = extractelement <4 x i32> %19, i32 1
  %25 = extractelement <4 x i32> %19, i32 2
  %26 = extractelement <4 x i32> %19, i32 3
  br i1 %22, label %27, label %44

27:                                               ; preds = %13
  %28 = shl i32 1, %3
  %29 = ashr i32 %28, 1
  %30 = add nsw i32 %23, %29
  %31 = ashr i32 %30, %3
  store i32 %31, i32* %6, align 4
  %32 = getelementptr inbounds i8, i8* %0, i64 4
  %33 = bitcast i8* %32 to i32*
  %34 = add nsw i32 %24, %29
  %35 = ashr i32 %34, %3
  store i32 %35, i32* %33, align 4
  %36 = getelementptr inbounds i8, i8* %0, i64 8
  %37 = bitcast i8* %36 to i32*
  %38 = add nsw i32 %25, %29
  %39 = ashr i32 %38, %3
  store i32 %39, i32* %37, align 4
  %40 = getelementptr inbounds i8, i8* %0, i64 12
  %41 = bitcast i8* %40 to i32*
  %42 = add nsw i32 %26, %29
  %43 = ashr i32 %42, %3
  store i32 %43, i32* %41, align 4
  br label %44

44:                                               ; preds = %27, %13
  %45 = phi i32 [ %43, %27 ], [ %26, %13 ]
  %46 = phi i32 [ %39, %27 ], [ %25, %13 ]
  %47 = phi i32 [ %35, %27 ], [ %24, %13 ]
  %48 = phi i32 [ %31, %27 ], [ %23, %13 ]
  %49 = icmp slt i32 %48, 32767
  %50 = select i1 %49, i32 %48, i32 32767
  %51 = icmp sgt i32 %50, -32768
  %52 = select i1 %51, i32 %50, i32 -32768
  store i32 %52, i32* %6, align 4
  %53 = getelementptr inbounds i8, i8* %0, i64 4
  %54 = bitcast i8* %53 to i32*
  %55 = icmp slt i32 %47, 32767
  %56 = select i1 %55, i32 %47, i32 32767
  %57 = icmp sgt i32 %56, -32768
  %58 = select i1 %57, i32 %56, i32 -32768
  store i32 %58, i32* %54, align 4
  %59 = getelementptr inbounds i8, i8* %0, i64 8
  %60 = bitcast i8* %59 to i32*
  %61 = icmp slt i32 %46, 32767
  %62 = select i1 %61, i32 %46, i32 32767
  %63 = icmp sgt i32 %62, -32768
  %64 = select i1 %63, i32 %62, i32 -32768
  store i32 %64, i32* %60, align 4
  %65 = getelementptr inbounds i8, i8* %0, i64 12
  %66 = bitcast i8* %65 to i32*
  %67 = icmp slt i32 %45, 32767
  %68 = select i1 %67, i32 %45, i32 32767
  %69 = icmp sgt i32 %68, -32768
  %70 = select i1 %69, i32 %68, i32 -32768
  store i32 %70, i32* %66, align 4
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal fastcc void @_ZN7libgav13dsp12_GLOBAL__N_113Adst8DcOnly_CILi10EiEEvPvabib(i8* nocapture, i1 zeroext, i32, i1 zeroext) unnamed_addr #0 {
  %5 = bitcast i8* %0 to i32*
  %6 = getelementptr inbounds i8, i8* %0, i64 28
  %7 = bitcast i8* %6 to i32*
  %8 = load i32, i32* %5, align 4
  %9 = getelementptr inbounds i8, i8* %0, i64 20
  %10 = bitcast i8* %9 to i32*
  %11 = getelementptr inbounds i8, i8* %0, i64 8
  %12 = bitcast i8* %11 to i32*
  %13 = getelementptr inbounds i8, i8* %0, i64 12
  %14 = bitcast i8* %13 to i32*
  %15 = getelementptr inbounds i8, i8* %0, i64 16
  %16 = bitcast i8* %15 to i32*
  %17 = getelementptr inbounds i8, i8* %0, i64 4
  %18 = bitcast i8* %17 to i32*
  %19 = getelementptr inbounds i8, i8* %0, i64 24
  %20 = bitcast i8* %19 to i32*
  %21 = and i1 %1, %3
  br i1 %21, label %22, label %26

22:                                               ; preds = %4
  %23 = mul nsw i32 %8, 2896
  %24 = add nsw i32 %23, 2048
  %25 = ashr i32 %24, 12
  br label %26

26:                                               ; preds = %4, %22
  %27 = phi i32 [ %8, %4 ], [ %25, %22 ]
  %28 = mul i32 %27, -4076
  %29 = sext i32 %28 to i64
  %30 = mul nsw i32 %27, 401
  %31 = sext i32 %30 to i64
  %32 = add nsw i64 %31, 2048
  %33 = ashr i64 %32, 12
  %34 = trunc i64 %33 to i32
  %35 = add nsw i64 %29, 2048
  %36 = ashr i64 %35, 12
  %37 = trunc i64 %36 to i32
  %38 = mul nsw i64 %33, 6730213752832
  %39 = ashr exact i64 %38, 32
  %40 = mul i64 %36, 16252156248064
  %41 = ashr exact i64 %40, 32
  %42 = mul i64 %33, 16252156248064
  %43 = ashr exact i64 %42, 32
  %44 = mul nsw i64 %36, 6730213752832
  %45 = ashr exact i64 %44, 32
  %46 = add nsw i64 %43, 2048
  %47 = add nsw i64 %46, %45
  %48 = lshr i64 %47, 12
  %49 = trunc i64 %48 to i32
  %50 = sub nsw i64 2048, %41
  %51 = add nsw i64 %50, %39
  %52 = lshr i64 %51, 12
  %53 = trunc i64 %52 to i32
  %54 = mul i64 %33, 12438225289216
  %55 = ashr exact i64 %54, 32
  %56 = mul i64 %36, 12438225289216
  %57 = ashr exact i64 %56, 32
  %58 = add nsw i64 %55, 2048
  %59 = add nsw i64 %58, %57
  %60 = lshr i64 %59, 12
  %61 = trunc i64 %60 to i32
  %62 = sub nsw i64 %58, %57
  %63 = lshr i64 %62, 12
  %64 = trunc i64 %63 to i32
  %65 = mul i64 %48, 12438225289216
  %66 = ashr exact i64 %65, 32
  %67 = mul i64 %52, 12438225289216
  %68 = ashr exact i64 %67, 32
  %69 = add nsw i64 %66, 2048
  %70 = add nsw i64 %69, %68
  %71 = lshr i64 %70, 12
  %72 = trunc i64 %71 to i32
  %73 = sub nsw i64 %69, %68
  %74 = lshr i64 %73, 12
  %75 = trunc i64 %74 to i32
  store i32 %34, i32* %5, align 4
  %76 = sub nsw i32 0, %49
  store i32 %76, i32* %18, align 4
  store i32 %72, i32* %12, align 4
  %77 = sub nsw i32 0, %61
  store i32 %77, i32* %14, align 4
  store i32 %64, i32* %16, align 4
  %78 = sub nsw i32 0, %75
  store i32 %78, i32* %10, align 4
  store i32 %53, i32* %20, align 4
  %79 = sub nsw i32 0, %37
  store i32 %79, i32* %7, align 4
  %80 = icmp sgt i32 %2, 0
  %81 = and i1 %80, %3
  br i1 %81, label %82, label %101

82:                                               ; preds = %26
  %83 = shl i32 1, %2
  %84 = ashr i32 %83, 1
  %85 = add nsw i32 %84, %34
  %86 = ashr i32 %85, %2
  store i32 %86, i32* %5, align 4
  %87 = sub i32 %84, %49
  %88 = ashr i32 %87, %2
  store i32 %88, i32* %18, align 4
  %89 = add nsw i32 %84, %72
  %90 = ashr i32 %89, %2
  store i32 %90, i32* %12, align 4
  %91 = sub i32 %84, %61
  %92 = ashr i32 %91, %2
  store i32 %92, i32* %14, align 4
  %93 = add nsw i32 %84, %64
  %94 = ashr i32 %93, %2
  store i32 %94, i32* %16, align 4
  %95 = sub i32 %84, %75
  %96 = ashr i32 %95, %2
  store i32 %96, i32* %10, align 4
  %97 = add nsw i32 %84, %53
  %98 = ashr i32 %97, %2
  store i32 %98, i32* %20, align 4
  %99 = sub nsw i32 %84, %37
  %100 = ashr i32 %99, %2
  store i32 %100, i32* %7, align 4
  br label %101

101:                                              ; preds = %82, %26
  %102 = phi i32 [ %100, %82 ], [ %79, %26 ]
  %103 = phi i32 [ %98, %82 ], [ %53, %26 ]
  %104 = phi i32 [ %96, %82 ], [ %78, %26 ]
  %105 = phi i32 [ %94, %82 ], [ %64, %26 ]
  %106 = phi i32 [ %92, %82 ], [ %77, %26 ]
  %107 = phi i32 [ %90, %82 ], [ %72, %26 ]
  %108 = phi i32 [ %88, %82 ], [ %76, %26 ]
  %109 = phi i32 [ %86, %82 ], [ %34, %26 ]
  %110 = icmp slt i32 %109, 32767
  %111 = select i1 %110, i32 %109, i32 32767
  %112 = icmp sgt i32 %111, -32768
  %113 = select i1 %112, i32 %111, i32 -32768
  store i32 %113, i32* %5, align 4
  %114 = icmp slt i32 %108, 32767
  %115 = select i1 %114, i32 %108, i32 32767
  %116 = icmp sgt i32 %115, -32768
  %117 = select i1 %116, i32 %115, i32 -32768
  store i32 %117, i32* %18, align 4
  %118 = icmp slt i32 %107, 32767
  %119 = select i1 %118, i32 %107, i32 32767
  %120 = icmp sgt i32 %119, -32768
  %121 = select i1 %120, i32 %119, i32 -32768
  store i32 %121, i32* %12, align 4
  %122 = icmp slt i32 %106, 32767
  %123 = select i1 %122, i32 %106, i32 32767
  %124 = icmp sgt i32 %123, -32768
  %125 = select i1 %124, i32 %123, i32 -32768
  store i32 %125, i32* %14, align 4
  %126 = icmp slt i32 %105, 32767
  %127 = select i1 %126, i32 %105, i32 32767
  %128 = icmp sgt i32 %127, -32768
  %129 = select i1 %128, i32 %127, i32 -32768
  store i32 %129, i32* %16, align 4
  %130 = icmp slt i32 %104, 32767
  %131 = select i1 %130, i32 %104, i32 32767
  %132 = icmp sgt i32 %131, -32768
  %133 = select i1 %132, i32 %131, i32 -32768
  store i32 %133, i32* %10, align 4
  %134 = icmp slt i32 %103, 32767
  %135 = select i1 %134, i32 %103, i32 32767
  %136 = icmp sgt i32 %135, -32768
  %137 = select i1 %136, i32 %135, i32 -32768
  store i32 %137, i32* %20, align 4
  %138 = icmp slt i32 %102, 32767
  %139 = select i1 %138, i32 %102, i32 32767
  %140 = icmp sgt i32 %139, -32768
  %141 = select i1 %140, i32 %139, i32 -32768
  store i32 %141, i32* %7, align 4
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal fastcc void @_ZN7libgav13dsp12_GLOBAL__N_17Adst8_CIiEEvPva(i8* nocapture, i8 signext) unnamed_addr #0 {
  %3 = bitcast i8* %0 to i32*
  %4 = getelementptr inbounds i8, i8* %0, i64 28
  %5 = bitcast i8* %4 to i32*
  %6 = load i32, i32* %5, align 4
  %7 = load i32, i32* %3, align 4
  %8 = getelementptr inbounds i8, i8* %0, i64 20
  %9 = bitcast i8* %8 to i32*
  %10 = load i32, i32* %9, align 4
  %11 = getelementptr inbounds i8, i8* %0, i64 8
  %12 = bitcast i8* %11 to i32*
  %13 = load i32, i32* %12, align 4
  %14 = getelementptr inbounds i8, i8* %0, i64 12
  %15 = bitcast i8* %14 to i32*
  %16 = load i32, i32* %15, align 4
  %17 = getelementptr inbounds i8, i8* %0, i64 16
  %18 = bitcast i8* %17 to i32*
  %19 = load i32, i32* %18, align 4
  %20 = getelementptr inbounds i8, i8* %0, i64 4
  %21 = bitcast i8* %20 to i32*
  %22 = load i32, i32* %21, align 4
  %23 = getelementptr inbounds i8, i8* %0, i64 24
  %24 = bitcast i8* %23 to i32*
  %25 = load i32, i32* %24, align 4
  %26 = mul nsw i32 %6, 401
  %27 = sext i32 %26 to i64
  %28 = mul nsw i32 %7, 4076
  %29 = sext i32 %28 to i64
  %30 = mul nsw i32 %6, 4076
  %31 = sext i32 %30 to i64
  %32 = mul nsw i32 %7, 401
  %33 = sext i32 %32 to i64
  %34 = add nsw i64 %31, 2048
  %35 = add nsw i64 %34, %33
  %36 = lshr i64 %35, 12
  %37 = trunc i64 %36 to i32
  %38 = add nsw i64 %27, 2048
  %39 = sub nsw i64 %38, %29
  %40 = lshr i64 %39, 12
  %41 = trunc i64 %40 to i32
  %42 = mul nsw i32 %10, 1931
  %43 = sext i32 %42 to i64
  %44 = mul nsw i32 %13, 3612
  %45 = sext i32 %44 to i64
  %46 = mul nsw i32 %10, 3612
  %47 = sext i32 %46 to i64
  %48 = mul nsw i32 %13, 1931
  %49 = sext i32 %48 to i64
  %50 = add nsw i64 %47, 2048
  %51 = add nsw i64 %50, %49
  %52 = lshr i64 %51, 12
  %53 = trunc i64 %52 to i32
  %54 = add nsw i64 %43, 2048
  %55 = sub nsw i64 %54, %45
  %56 = lshr i64 %55, 12
  %57 = trunc i64 %56 to i32
  %58 = mul nsw i32 %16, 3166
  %59 = sext i32 %58 to i64
  %60 = mul nsw i32 %19, 2598
  %61 = sext i32 %60 to i64
  %62 = mul nsw i32 %16, 2598
  %63 = sext i32 %62 to i64
  %64 = mul nsw i32 %19, 3166
  %65 = sext i32 %64 to i64
  %66 = add nsw i64 %63, 2048
  %67 = add nsw i64 %66, %65
  %68 = lshr i64 %67, 12
  %69 = trunc i64 %68 to i32
  %70 = add nsw i64 %59, 2048
  %71 = sub nsw i64 %70, %61
  %72 = lshr i64 %71, 12
  %73 = trunc i64 %72 to i32
  %74 = mul nsw i32 %22, 3920
  %75 = sext i32 %74 to i64
  %76 = mul nsw i32 %25, 1189
  %77 = sext i32 %76 to i64
  %78 = mul nsw i32 %22, 1189
  %79 = sext i32 %78 to i64
  %80 = mul nsw i32 %25, 3920
  %81 = sext i32 %80 to i64
  %82 = add nsw i64 %79, 2048
  %83 = add nsw i64 %82, %81
  %84 = lshr i64 %83, 12
  %85 = trunc i64 %84 to i32
  %86 = add nsw i64 %75, 2048
  %87 = sub nsw i64 %86, %77
  %88 = lshr i64 %87, 12
  %89 = trunc i64 %88 to i32
  %90 = add i8 %1, -1
  %91 = sext i8 %90 to i32
  %92 = shl i32 1, %91
  %93 = sub nsw i32 0, %92
  %94 = add nsw i32 %92, -1
  %95 = add nsw i32 %69, %37
  %96 = sub nsw i32 %37, %69
  %97 = icmp slt i32 %95, %93
  %98 = icmp sgt i32 %95, %94
  %99 = select i1 %98, i32 %94, i32 %95
  %100 = select i1 %97, i32 %93, i32 %99
  %101 = icmp slt i32 %96, %93
  %102 = icmp sgt i32 %96, %94
  %103 = select i1 %102, i32 %94, i32 %96
  %104 = select i1 %101, i32 %93, i32 %103
  %105 = add nsw i32 %73, %41
  %106 = sub nsw i32 %41, %73
  %107 = icmp slt i32 %105, %93
  %108 = icmp sgt i32 %105, %94
  %109 = select i1 %108, i32 %94, i32 %105
  %110 = select i1 %107, i32 %93, i32 %109
  %111 = icmp slt i32 %106, %93
  %112 = icmp sgt i32 %106, %94
  %113 = select i1 %112, i32 %94, i32 %106
  %114 = select i1 %111, i32 %93, i32 %113
  %115 = add nsw i32 %85, %53
  %116 = sub nsw i32 %53, %85
  %117 = icmp slt i32 %115, %93
  %118 = icmp sgt i32 %115, %94
  %119 = select i1 %118, i32 %94, i32 %115
  %120 = select i1 %117, i32 %93, i32 %119
  %121 = icmp slt i32 %116, %93
  %122 = icmp sgt i32 %116, %94
  %123 = select i1 %122, i32 %94, i32 %116
  %124 = select i1 %121, i32 %93, i32 %123
  %125 = add nsw i32 %89, %57
  %126 = sub nsw i32 %57, %89
  %127 = icmp slt i32 %125, %93
  %128 = icmp sgt i32 %125, %94
  %129 = select i1 %128, i32 %94, i32 %125
  %130 = select i1 %127, i32 %93, i32 %129
  %131 = icmp slt i32 %126, %93
  %132 = icmp sgt i32 %126, %94
  %133 = select i1 %132, i32 %94, i32 %126
  %134 = select i1 %131, i32 %93, i32 %133
  %135 = mul nsw i32 %104, 1567
  %136 = sext i32 %135 to i64
  %137 = mul nsw i32 %114, 3784
  %138 = sext i32 %137 to i64
  %139 = mul nsw i32 %104, 3784
  %140 = sext i32 %139 to i64
  %141 = mul nsw i32 %114, 1567
  %142 = sext i32 %141 to i64
  %143 = add nsw i64 %140, 2048
  %144 = add nsw i64 %143, %142
  %145 = lshr i64 %144, 12
  %146 = trunc i64 %145 to i32
  %147 = add nsw i64 %136, 2048
  %148 = sub nsw i64 %147, %138
  %149 = lshr i64 %148, 12
  %150 = trunc i64 %149 to i32
  %151 = mul nsw i32 %134, 3784
  %152 = sext i32 %151 to i64
  %153 = mul nsw i32 %124, 1567
  %154 = sext i32 %153 to i64
  %155 = mul nsw i32 %134, 1567
  %156 = sext i32 %155 to i64
  %157 = mul nsw i32 %124, 3784
  %158 = sext i32 %157 to i64
  %159 = add nsw i64 %156, 2048
  %160 = add nsw i64 %159, %158
  %161 = lshr i64 %160, 12
  %162 = trunc i64 %161 to i32
  %163 = add nsw i64 %152, 2048
  %164 = sub nsw i64 %163, %154
  %165 = lshr i64 %164, 12
  %166 = trunc i64 %165 to i32
  %167 = add nsw i32 %120, %100
  %168 = sub nsw i32 %100, %120
  %169 = icmp slt i32 %167, %93
  %170 = icmp sgt i32 %167, %94
  %171 = select i1 %170, i32 %94, i32 %167
  %172 = select i1 %169, i32 %93, i32 %171
  %173 = icmp slt i32 %168, %93
  %174 = icmp sgt i32 %168, %94
  %175 = select i1 %174, i32 %94, i32 %168
  %176 = select i1 %173, i32 %93, i32 %175
  %177 = add nsw i32 %166, %146
  %178 = sub nsw i32 %146, %166
  %179 = icmp slt i32 %177, %93
  %180 = icmp sgt i32 %177, %94
  %181 = select i1 %180, i32 %94, i32 %177
  %182 = select i1 %179, i32 %93, i32 %181
  %183 = icmp slt i32 %178, %93
  %184 = icmp sgt i32 %178, %94
  %185 = select i1 %184, i32 %94, i32 %178
  %186 = select i1 %183, i32 %93, i32 %185
  %187 = add nsw i32 %130, %110
  %188 = sub nsw i32 %110, %130
  %189 = icmp slt i32 %187, %93
  %190 = icmp sgt i32 %187, %94
  %191 = select i1 %190, i32 %94, i32 %187
  %192 = select i1 %189, i32 %93, i32 %191
  %193 = icmp slt i32 %188, %93
  %194 = icmp sgt i32 %188, %94
  %195 = select i1 %194, i32 %94, i32 %188
  %196 = select i1 %193, i32 %93, i32 %195
  %197 = add nsw i32 %162, %150
  %198 = sub nsw i32 %150, %162
  %199 = icmp slt i32 %197, %93
  %200 = icmp sgt i32 %197, %94
  %201 = select i1 %200, i32 %94, i32 %197
  %202 = select i1 %199, i32 %93, i32 %201
  %203 = icmp slt i32 %198, %93
  %204 = icmp sgt i32 %198, %94
  %205 = select i1 %204, i32 %94, i32 %198
  %206 = select i1 %203, i32 %93, i32 %205
  %207 = mul nsw i32 %176, 2896
  %208 = sext i32 %207 to i64
  %209 = mul nsw i32 %196, 2896
  %210 = sext i32 %209 to i64
  %211 = add nsw i64 %208, 2048
  %212 = add nsw i64 %211, %210
  %213 = lshr i64 %212, 12
  %214 = trunc i64 %213 to i32
  %215 = sub nsw i64 %211, %210
  %216 = lshr i64 %215, 12
  %217 = trunc i64 %216 to i32
  %218 = mul nsw i32 %186, 2896
  %219 = sext i32 %218 to i64
  %220 = mul nsw i32 %206, 2896
  %221 = sext i32 %220 to i64
  %222 = add nsw i64 %219, 2048
  %223 = add nsw i64 %222, %221
  %224 = lshr i64 %223, 12
  %225 = trunc i64 %224 to i32
  %226 = sub nsw i64 %222, %221
  %227 = lshr i64 %226, 12
  %228 = trunc i64 %227 to i32
  store i32 %172, i32* %3, align 4
  %229 = sub nsw i32 0, %182
  store i32 %229, i32* %21, align 4
  store i32 %225, i32* %12, align 4
  %230 = sub nsw i32 0, %214
  store i32 %230, i32* %15, align 4
  store i32 %217, i32* %18, align 4
  %231 = sub nsw i32 0, %228
  store i32 %231, i32* %9, align 4
  store i32 %202, i32* %24, align 4
  %232 = sub nsw i32 0, %192
  store i32 %232, i32* %5, align 4
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal fastcc void @_ZN7libgav13dsp12_GLOBAL__N_114Adst16DcOnly_CILi10EiEEvPvabib(i8* nocapture, i1 zeroext, i32, i1 zeroext) unnamed_addr #0 {
  %5 = alloca [16 x i32], align 16
  %6 = bitcast i8* %0 to i32*
  %7 = bitcast [16 x i32]* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 64, i8* nonnull %7) #4
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %7, i8 -86, i64 64, i1 false)
  br label %8

8:                                                ; preds = %8, %4
  %9 = phi i64 [ 0, %4 ], [ %23, %8 ]
  %10 = phi i32 [ 0, %4 ], [ %24, %8 ]
  %11 = sub nuw nsw i32 15, %10
  %12 = sext i32 %11 to i64
  %13 = getelementptr inbounds i32, i32* %6, i64 %12
  %14 = load i32, i32* %13, align 4
  %15 = getelementptr inbounds [16 x i32], [16 x i32]* %5, i64 0, i64 %9
  store i32 %14, i32* %15, align 8
  %16 = or i64 %9, 1
  %17 = shl i64 %16, 32
  %18 = add nsw i64 %17, -4294967296
  %19 = ashr exact i64 %18, 32
  %20 = getelementptr inbounds i32, i32* %6, i64 %19
  %21 = load i32, i32* %20, align 4
  %22 = getelementptr inbounds [16 x i32], [16 x i32]* %5, i64 0, i64 %16
  store i32 %21, i32* %22, align 4
  %23 = add nuw nsw i64 %9, 2
  %24 = add nuw nsw i32 %10, 2
  %25 = icmp eq i64 %23, 16
  br i1 %25, label %26, label %8

26:                                               ; preds = %8
  %27 = getelementptr inbounds [16 x i32], [16 x i32]* %5, i64 0, i64 0
  %28 = and i1 %1, %3
  %29 = getelementptr inbounds [16 x i32], [16 x i32]* %5, i64 0, i64 1
  %30 = load i32, i32* %29, align 4
  br i1 %28, label %31, label %35

31:                                               ; preds = %26
  %32 = mul nsw i32 %30, 2896
  %33 = add nsw i32 %32, 2048
  %34 = ashr i32 %33, 12
  store i32 %34, i32* %29, align 4
  br label %35

35:                                               ; preds = %26, %31
  %36 = phi i32 [ %34, %31 ], [ %30, %26 ]
  %37 = getelementptr inbounds [16 x i32], [16 x i32]* %5, i64 0, i64 1
  %38 = mul i32 %36, -4091
  %39 = sext i32 %38 to i64
  %40 = mul nsw i32 %36, 201
  %41 = sext i32 %40 to i64
  %42 = add nsw i64 %41, 2048
  %43 = ashr i64 %42, 12
  %44 = trunc i64 %43 to i32
  store i32 %44, i32* %27, align 16
  %45 = add nsw i64 %39, 2048
  %46 = ashr i64 %45, 12
  %47 = trunc i64 %46 to i32
  store i32 %47, i32* %37, align 4
  %48 = getelementptr inbounds [16 x i32], [16 x i32]* %5, i64 0, i64 8
  %49 = getelementptr inbounds [16 x i32], [16 x i32]* %5, i64 0, i64 9
  %50 = mul nsw i64 %43, 799
  %51 = mul i64 %46, 17252883628032
  %52 = ashr exact i64 %51, 32
  %53 = mul i64 %43, 17252883628032
  %54 = ashr exact i64 %53, 32
  %55 = mul nsw i64 %46, 799
  %56 = add nsw i64 %55, 2048
  %57 = add nsw i64 %56, %54
  %58 = lshr i64 %57, 12
  %59 = trunc i64 %58 to i32
  store i32 %59, i32* %48, align 16
  %60 = add nsw i64 %50, 2048
  %61 = sub nsw i64 %60, %52
  %62 = lshr i64 %61, 12
  %63 = trunc i64 %62 to i32
  store i32 %63, i32* %49, align 4
  %64 = getelementptr inbounds [16 x i32], [16 x i32]* %5, i64 0, i64 4
  %65 = getelementptr inbounds [16 x i32], [16 x i32]* %5, i64 0, i64 5
  %66 = getelementptr inbounds [16 x i32], [16 x i32]* %5, i64 0, i64 12
  %67 = getelementptr inbounds [16 x i32], [16 x i32]* %5, i64 0, i64 13
  %68 = mul nsw i64 %43, 6730213752832
  %69 = ashr exact i64 %68, 32
  %70 = mul i64 %46, 16252156248064
  %71 = ashr exact i64 %70, 32
  %72 = mul i64 %43, 16252156248064
  %73 = ashr exact i64 %72, 32
  %74 = mul nsw i64 %46, 6730213752832
  %75 = ashr exact i64 %74, 32
  %76 = add nsw i64 %73, 2048
  %77 = add nsw i64 %76, %75
  %78 = lshr i64 %77, 12
  %79 = trunc i64 %78 to i32
  store i32 %79, i32* %64, align 16
  %80 = add nsw i64 %69, 2048
  %81 = sub nsw i64 %80, %71
  %82 = lshr i64 %81, 12
  %83 = trunc i64 %82 to i32
  store i32 %83, i32* %65, align 4
  %84 = mul i64 %58, 6730213752832
  %85 = ashr exact i64 %84, 32
  %86 = mul i64 %62, 16252156248064
  %87 = ashr exact i64 %86, 32
  %88 = mul i64 %58, 16252156248064
  %89 = ashr exact i64 %88, 32
  %90 = mul i64 %62, 6730213752832
  %91 = ashr exact i64 %90, 32
  %92 = add nsw i64 %89, 2048
  %93 = add nsw i64 %92, %91
  %94 = lshr i64 %93, 12
  %95 = trunc i64 %94 to i32
  store i32 %95, i32* %66, align 16
  %96 = add nsw i64 %85, 2048
  %97 = sub nsw i64 %96, %87
  %98 = lshr i64 %97, 12
  %99 = trunc i64 %98 to i32
  store i32 %99, i32* %67, align 4
  %100 = getelementptr inbounds [16 x i32], [16 x i32]* %5, i64 0, i64 2
  %101 = getelementptr inbounds [16 x i32], [16 x i32]* %5, i64 0, i64 3
  %102 = getelementptr inbounds [16 x i32], [16 x i32]* %5, i64 0, i64 10
  %103 = getelementptr inbounds [16 x i32], [16 x i32]* %5, i64 0, i64 11
  %104 = getelementptr inbounds [16 x i32], [16 x i32]* %5, i64 0, i64 6
  %105 = getelementptr inbounds [16 x i32], [16 x i32]* %5, i64 0, i64 7
  %106 = getelementptr inbounds [16 x i32], [16 x i32]* %5, i64 0, i64 14
  %107 = getelementptr inbounds [16 x i32], [16 x i32]* %5, i64 0, i64 15
  %108 = mul i64 %43, 12438225289216
  %109 = ashr exact i64 %108, 32
  %110 = mul i64 %46, 12438225289216
  %111 = ashr exact i64 %110, 32
  %112 = add nsw i64 %109, 2048
  %113 = add nsw i64 %112, %111
  %114 = lshr i64 %113, 12
  %115 = trunc i64 %114 to i32
  store i32 %115, i32* %100, align 8
  %116 = sub nsw i64 %112, %111
  %117 = lshr i64 %116, 12
  %118 = trunc i64 %117 to i32
  store i32 %118, i32* %101, align 4
  %119 = mul i64 %78, 12438225289216
  %120 = ashr exact i64 %119, 32
  %121 = mul i64 %82, 12438225289216
  %122 = ashr exact i64 %121, 32
  %123 = add nsw i64 %120, 2048
  %124 = add nsw i64 %123, %122
  %125 = lshr i64 %124, 12
  %126 = trunc i64 %125 to i32
  store i32 %126, i32* %104, align 8
  %127 = sub nsw i64 %123, %122
  %128 = lshr i64 %127, 12
  %129 = trunc i64 %128 to i32
  store i32 %129, i32* %105, align 4
  %130 = mul i64 %58, 12438225289216
  %131 = ashr exact i64 %130, 32
  %132 = mul i64 %62, 12438225289216
  %133 = ashr exact i64 %132, 32
  %134 = add nsw i64 %131, 2048
  %135 = add nsw i64 %134, %133
  %136 = lshr i64 %135, 12
  %137 = trunc i64 %136 to i32
  store i32 %137, i32* %102, align 8
  %138 = sub nsw i64 %134, %133
  %139 = lshr i64 %138, 12
  %140 = trunc i64 %139 to i32
  store i32 %140, i32* %103, align 4
  %141 = mul i64 %94, 12438225289216
  %142 = ashr exact i64 %141, 32
  %143 = mul i64 %98, 12438225289216
  %144 = ashr exact i64 %143, 32
  %145 = add nsw i64 %142, 2048
  %146 = add nsw i64 %145, %144
  %147 = lshr i64 %146, 12
  %148 = trunc i64 %147 to i32
  store i32 %148, i32* %106, align 8
  %149 = sub nsw i64 %145, %144
  %150 = lshr i64 %149, 12
  %151 = trunc i64 %150 to i32
  store i32 %151, i32* %107, align 4
  %152 = load i32, i32* %27, align 16
  store i32 %152, i32* %6, align 4
  %153 = load i32, i32* %48, align 16
  %154 = sub nsw i32 0, %153
  %155 = getelementptr inbounds i8, i8* %0, i64 4
  %156 = bitcast i8* %155 to i32*
  store i32 %154, i32* %156, align 4
  %157 = getelementptr inbounds i8, i8* %0, i64 8
  %158 = bitcast i8* %157 to i32*
  store i32 %95, i32* %158, align 4
  %159 = load i32, i32* %64, align 16
  %160 = sub nsw i32 0, %159
  %161 = getelementptr inbounds i8, i8* %0, i64 12
  %162 = bitcast i8* %161 to i32*
  store i32 %160, i32* %162, align 4
  %163 = getelementptr inbounds i8, i8* %0, i64 16
  %164 = bitcast i8* %163 to i32*
  store i32 %126, i32* %164, align 4
  %165 = sub nsw i32 0, %148
  %166 = getelementptr inbounds i8, i8* %0, i64 20
  %167 = bitcast i8* %166 to i32*
  store i32 %165, i32* %167, align 4
  %168 = getelementptr inbounds i8, i8* %0, i64 24
  %169 = bitcast i8* %168 to i32*
  store i32 %137, i32* %169, align 4
  %170 = sub nsw i32 0, %115
  %171 = getelementptr inbounds i8, i8* %0, i64 28
  %172 = bitcast i8* %171 to i32*
  store i32 %170, i32* %172, align 4
  %173 = getelementptr inbounds i8, i8* %0, i64 32
  %174 = bitcast i8* %173 to i32*
  store i32 %118, i32* %174, align 4
  %175 = sub nsw i32 0, %140
  %176 = getelementptr inbounds i8, i8* %0, i64 36
  %177 = bitcast i8* %176 to i32*
  store i32 %175, i32* %177, align 4
  %178 = getelementptr inbounds i8, i8* %0, i64 40
  %179 = bitcast i8* %178 to i32*
  store i32 %151, i32* %179, align 4
  %180 = sub nsw i32 0, %129
  %181 = getelementptr inbounds i8, i8* %0, i64 44
  %182 = bitcast i8* %181 to i32*
  store i32 %180, i32* %182, align 4
  %183 = load i32, i32* %65, align 4
  %184 = getelementptr inbounds i8, i8* %0, i64 48
  %185 = bitcast i8* %184 to i32*
  store i32 %183, i32* %185, align 4
  %186 = load i32, i32* %67, align 4
  %187 = sub nsw i32 0, %186
  %188 = getelementptr inbounds i8, i8* %0, i64 52
  %189 = bitcast i8* %188 to i32*
  store i32 %187, i32* %189, align 4
  %190 = load i32, i32* %49, align 4
  %191 = getelementptr inbounds i8, i8* %0, i64 56
  %192 = bitcast i8* %191 to i32*
  store i32 %190, i32* %192, align 4
  %193 = load i32, i32* %37, align 4
  %194 = sub nsw i32 0, %193
  %195 = getelementptr inbounds i8, i8* %0, i64 60
  %196 = bitcast i8* %195 to i32*
  store i32 %194, i32* %196, align 4
  %197 = icmp sgt i32 %2, 0
  %198 = and i1 %197, %3
  br i1 %198, label %199, label %234

199:                                              ; preds = %35
  %200 = shl i32 1, %2
  %201 = ashr i32 %200, 1
  %202 = add nsw i32 %152, %201
  %203 = ashr i32 %202, %2
  store i32 %203, i32* %6, align 4
  %204 = sub i32 %201, %153
  %205 = ashr i32 %204, %2
  store i32 %205, i32* %156, align 4
  %206 = add nsw i32 %201, %95
  %207 = ashr i32 %206, %2
  store i32 %207, i32* %158, align 4
  %208 = sub i32 %201, %159
  %209 = ashr i32 %208, %2
  store i32 %209, i32* %162, align 4
  %210 = add nsw i32 %201, %126
  %211 = ashr i32 %210, %2
  store i32 %211, i32* %164, align 4
  %212 = sub i32 %201, %148
  %213 = ashr i32 %212, %2
  store i32 %213, i32* %167, align 4
  %214 = add nsw i32 %201, %137
  %215 = ashr i32 %214, %2
  store i32 %215, i32* %169, align 4
  %216 = sub i32 %201, %115
  %217 = ashr i32 %216, %2
  store i32 %217, i32* %172, align 4
  %218 = add nsw i32 %201, %118
  %219 = ashr i32 %218, %2
  store i32 %219, i32* %174, align 4
  %220 = sub i32 %201, %140
  %221 = ashr i32 %220, %2
  store i32 %221, i32* %177, align 4
  %222 = add nsw i32 %201, %151
  %223 = ashr i32 %222, %2
  store i32 %223, i32* %179, align 4
  %224 = sub i32 %201, %129
  %225 = ashr i32 %224, %2
  store i32 %225, i32* %182, align 4
  %226 = add nsw i32 %183, %201
  %227 = ashr i32 %226, %2
  store i32 %227, i32* %185, align 4
  %228 = sub i32 %201, %186
  %229 = ashr i32 %228, %2
  store i32 %229, i32* %189, align 4
  %230 = add nsw i32 %190, %201
  %231 = ashr i32 %230, %2
  store i32 %231, i32* %192, align 4
  %232 = sub i32 %201, %193
  %233 = ashr i32 %232, %2
  store i32 %233, i32* %196, align 4
  br label %234

234:                                              ; preds = %199, %35
  %235 = phi i32 [ %233, %199 ], [ %194, %35 ]
  %236 = phi i32 [ %231, %199 ], [ %190, %35 ]
  %237 = phi i32 [ %229, %199 ], [ %187, %35 ]
  %238 = phi i32 [ %227, %199 ], [ %183, %35 ]
  %239 = phi i32 [ %225, %199 ], [ %180, %35 ]
  %240 = phi i32 [ %223, %199 ], [ %151, %35 ]
  %241 = phi i32 [ %221, %199 ], [ %175, %35 ]
  %242 = phi i32 [ %219, %199 ], [ %118, %35 ]
  %243 = phi i32 [ %217, %199 ], [ %170, %35 ]
  %244 = phi i32 [ %215, %199 ], [ %137, %35 ]
  %245 = phi i32 [ %213, %199 ], [ %165, %35 ]
  %246 = phi i32 [ %211, %199 ], [ %126, %35 ]
  %247 = phi i32 [ %209, %199 ], [ %160, %35 ]
  %248 = phi i32 [ %207, %199 ], [ %95, %35 ]
  %249 = phi i32 [ %205, %199 ], [ %154, %35 ]
  %250 = phi i32 [ %203, %199 ], [ %152, %35 ]
  %251 = icmp slt i32 %250, 32767
  %252 = select i1 %251, i32 %250, i32 32767
  %253 = icmp sgt i32 %252, -32768
  %254 = select i1 %253, i32 %252, i32 -32768
  store i32 %254, i32* %6, align 4
  %255 = icmp slt i32 %249, 32767
  %256 = select i1 %255, i32 %249, i32 32767
  %257 = icmp sgt i32 %256, -32768
  %258 = select i1 %257, i32 %256, i32 -32768
  store i32 %258, i32* %156, align 4
  %259 = icmp slt i32 %248, 32767
  %260 = select i1 %259, i32 %248, i32 32767
  %261 = icmp sgt i32 %260, -32768
  %262 = select i1 %261, i32 %260, i32 -32768
  store i32 %262, i32* %158, align 4
  %263 = icmp slt i32 %247, 32767
  %264 = select i1 %263, i32 %247, i32 32767
  %265 = icmp sgt i32 %264, -32768
  %266 = select i1 %265, i32 %264, i32 -32768
  store i32 %266, i32* %162, align 4
  %267 = icmp slt i32 %246, 32767
  %268 = select i1 %267, i32 %246, i32 32767
  %269 = icmp sgt i32 %268, -32768
  %270 = select i1 %269, i32 %268, i32 -32768
  store i32 %270, i32* %164, align 4
  %271 = icmp slt i32 %245, 32767
  %272 = select i1 %271, i32 %245, i32 32767
  %273 = icmp sgt i32 %272, -32768
  %274 = select i1 %273, i32 %272, i32 -32768
  store i32 %274, i32* %167, align 4
  %275 = icmp slt i32 %244, 32767
  %276 = select i1 %275, i32 %244, i32 32767
  %277 = icmp sgt i32 %276, -32768
  %278 = select i1 %277, i32 %276, i32 -32768
  store i32 %278, i32* %169, align 4
  %279 = icmp slt i32 %243, 32767
  %280 = select i1 %279, i32 %243, i32 32767
  %281 = icmp sgt i32 %280, -32768
  %282 = select i1 %281, i32 %280, i32 -32768
  store i32 %282, i32* %172, align 4
  %283 = icmp slt i32 %242, 32767
  %284 = select i1 %283, i32 %242, i32 32767
  %285 = icmp sgt i32 %284, -32768
  %286 = select i1 %285, i32 %284, i32 -32768
  store i32 %286, i32* %174, align 4
  %287 = icmp slt i32 %241, 32767
  %288 = select i1 %287, i32 %241, i32 32767
  %289 = icmp sgt i32 %288, -32768
  %290 = select i1 %289, i32 %288, i32 -32768
  store i32 %290, i32* %177, align 4
  %291 = icmp slt i32 %240, 32767
  %292 = select i1 %291, i32 %240, i32 32767
  %293 = icmp sgt i32 %292, -32768
  %294 = select i1 %293, i32 %292, i32 -32768
  store i32 %294, i32* %179, align 4
  %295 = icmp slt i32 %239, 32767
  %296 = select i1 %295, i32 %239, i32 32767
  %297 = icmp sgt i32 %296, -32768
  %298 = select i1 %297, i32 %296, i32 -32768
  store i32 %298, i32* %182, align 4
  %299 = icmp slt i32 %238, 32767
  %300 = select i1 %299, i32 %238, i32 32767
  %301 = icmp sgt i32 %300, -32768
  %302 = select i1 %301, i32 %300, i32 -32768
  store i32 %302, i32* %185, align 4
  %303 = icmp slt i32 %237, 32767
  %304 = select i1 %303, i32 %237, i32 32767
  %305 = icmp sgt i32 %304, -32768
  %306 = select i1 %305, i32 %304, i32 -32768
  store i32 %306, i32* %189, align 4
  %307 = icmp slt i32 %236, 32767
  %308 = select i1 %307, i32 %236, i32 32767
  %309 = icmp sgt i32 %308, -32768
  %310 = select i1 %309, i32 %308, i32 -32768
  store i32 %310, i32* %192, align 4
  %311 = icmp slt i32 %235, 32767
  %312 = select i1 %311, i32 %235, i32 32767
  %313 = icmp sgt i32 %312, -32768
  %314 = select i1 %313, i32 %312, i32 -32768
  store i32 %314, i32* %196, align 4
  call void @llvm.lifetime.end.p0i8(i64 64, i8* nonnull %7) #4
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal fastcc void @_ZN7libgav13dsp12_GLOBAL__N_18Adst16_CIiEEvPva(i8* nocapture, i8 signext) unnamed_addr #0 {
  %3 = alloca [16 x i32], align 16
  %4 = bitcast i8* %0 to i32*
  %5 = bitcast [16 x i32]* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 64, i8* nonnull %5) #4
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %5, i8 -86, i64 64, i1 false)
  br label %6

6:                                                ; preds = %6, %2
  %7 = phi i64 [ 0, %2 ], [ %21, %6 ]
  %8 = phi i32 [ 0, %2 ], [ %22, %6 ]
  %9 = sub nuw nsw i32 15, %8
  %10 = sext i32 %9 to i64
  %11 = getelementptr inbounds i32, i32* %4, i64 %10
  %12 = load i32, i32* %11, align 4
  %13 = getelementptr inbounds [16 x i32], [16 x i32]* %3, i64 0, i64 %7
  store i32 %12, i32* %13, align 8
  %14 = or i64 %7, 1
  %15 = shl i64 %14, 32
  %16 = add nsw i64 %15, -4294967296
  %17 = ashr exact i64 %16, 32
  %18 = getelementptr inbounds i32, i32* %4, i64 %17
  %19 = load i32, i32* %18, align 4
  %20 = getelementptr inbounds [16 x i32], [16 x i32]* %3, i64 0, i64 %14
  store i32 %19, i32* %20, align 4
  %21 = add nuw nsw i64 %7, 2
  %22 = add nuw nsw i32 %8, 2
  %23 = icmp eq i64 %21, 16
  br i1 %23, label %24, label %6

24:                                               ; preds = %6, %128
  %25 = phi i64 [ %141, %128 ], [ 0, %6 ]
  %26 = shl nuw i64 %25, 1
  %27 = or i64 %26, 1
  %28 = shl nsw i64 %25, 3
  %29 = getelementptr inbounds [16 x i32], [16 x i32]* %3, i64 0, i64 %26
  %30 = load i32, i32* %29, align 8
  %31 = trunc i64 %28 to i32
  %32 = sub i32 62, %31
  %33 = and i32 %32, 254
  %34 = icmp ult i32 %33, 65
  br i1 %34, label %35, label %39

35:                                               ; preds = %24
  %36 = zext i32 %33 to i64
  %37 = getelementptr inbounds [65 x i16], [65 x i16]* @_ZN7libgav13dsp12_GLOBAL__N_17kCos128E, i64 0, i64 %36
  %38 = load i16, i16* %37, align 4
  br label %60

39:                                               ; preds = %24
  %40 = icmp ult i32 %33, 129
  br i1 %40, label %41, label %47

41:                                               ; preds = %39
  %42 = sub nuw nsw i32 128, %33
  %43 = sext i32 %42 to i64
  %44 = getelementptr inbounds [65 x i16], [65 x i16]* @_ZN7libgav13dsp12_GLOBAL__N_17kCos128E, i64 0, i64 %43
  %45 = load i16, i16* %44, align 4
  %46 = sub i16 0, %45
  br label %60

47:                                               ; preds = %39
  %48 = icmp ult i32 %33, 193
  br i1 %48, label %49, label %55

49:                                               ; preds = %47
  %50 = add nsw i32 %33, -128
  %51 = sext i32 %50 to i64
  %52 = getelementptr inbounds [65 x i16], [65 x i16]* @_ZN7libgav13dsp12_GLOBAL__N_17kCos128E, i64 0, i64 %51
  %53 = load i16, i16* %52, align 4
  %54 = sub i16 0, %53
  br label %60

55:                                               ; preds = %47
  %56 = sub nuw nsw i32 256, %33
  %57 = zext i32 %56 to i64
  %58 = getelementptr inbounds [65 x i16], [65 x i16]* @_ZN7libgav13dsp12_GLOBAL__N_17kCos128E, i64 0, i64 %57
  %59 = load i16, i16* %58, align 4
  br label %60

60:                                               ; preds = %55, %49, %41, %35
  %61 = phi i16 [ %38, %35 ], [ %46, %41 ], [ %54, %49 ], [ %59, %55 ]
  %62 = sext i16 %61 to i32
  %63 = mul nsw i32 %30, %62
  %64 = sext i32 %63 to i64
  %65 = getelementptr inbounds [16 x i32], [16 x i32]* %3, i64 0, i64 %27
  %66 = load i32, i32* %65, align 4
  %67 = trunc i64 %28 to i32
  %68 = sub i32 254, %67
  %69 = and i32 %68, 254
  %70 = icmp ult i32 %69, 65
  br i1 %70, label %75, label %71

71:                                               ; preds = %60
  %72 = icmp ult i32 %69, 129
  br i1 %72, label %79, label %73

73:                                               ; preds = %71
  %74 = icmp ult i32 %69, 193
  br i1 %74, label %85, label %91

75:                                               ; preds = %60
  %76 = zext i32 %69 to i64
  %77 = getelementptr inbounds [65 x i16], [65 x i16]* @_ZN7libgav13dsp12_GLOBAL__N_17kCos128E, i64 0, i64 %76
  %78 = load i16, i16* %77, align 4
  br label %96

79:                                               ; preds = %71
  %80 = sub nuw nsw i32 128, %69
  %81 = sext i32 %80 to i64
  %82 = getelementptr inbounds [65 x i16], [65 x i16]* @_ZN7libgav13dsp12_GLOBAL__N_17kCos128E, i64 0, i64 %81
  %83 = load i16, i16* %82, align 4
  %84 = sub i16 0, %83
  br label %96

85:                                               ; preds = %73
  %86 = add nsw i32 %69, -128
  %87 = sext i32 %86 to i64
  %88 = getelementptr inbounds [65 x i16], [65 x i16]* @_ZN7libgav13dsp12_GLOBAL__N_17kCos128E, i64 0, i64 %87
  %89 = load i16, i16* %88, align 4
  %90 = sub i16 0, %89
  br label %96

91:                                               ; preds = %73
  %92 = sub nuw nsw i32 256, %69
  %93 = zext i32 %92 to i64
  %94 = getelementptr inbounds [65 x i16], [65 x i16]* @_ZN7libgav13dsp12_GLOBAL__N_17kCos128E, i64 0, i64 %93
  %95 = load i16, i16* %94, align 4
  br label %96

96:                                               ; preds = %91, %85, %79, %75
  %97 = phi i16 [ %78, %75 ], [ %84, %79 ], [ %90, %85 ], [ %95, %91 ]
  %98 = sext i16 %97 to i32
  %99 = mul nsw i32 %66, %98
  %100 = sext i32 %99 to i64
  %101 = mul nsw i32 %30, %98
  %102 = sext i32 %101 to i64
  br i1 %34, label %103, label %107

103:                                              ; preds = %96
  %104 = zext i32 %33 to i64
  %105 = getelementptr inbounds [65 x i16], [65 x i16]* @_ZN7libgav13dsp12_GLOBAL__N_17kCos128E, i64 0, i64 %104
  %106 = load i16, i16* %105, align 4
  br label %128

107:                                              ; preds = %96
  %108 = icmp ult i32 %33, 129
  br i1 %108, label %109, label %115

109:                                              ; preds = %107
  %110 = sub nuw nsw i32 128, %33
  %111 = sext i32 %110 to i64
  %112 = getelementptr inbounds [65 x i16], [65 x i16]* @_ZN7libgav13dsp12_GLOBAL__N_17kCos128E, i64 0, i64 %111
  %113 = load i16, i16* %112, align 4
  %114 = sub i16 0, %113
  br label %128

115:                                              ; preds = %107
  %116 = icmp ult i32 %33, 193
  br i1 %116, label %117, label %123

117:                                              ; preds = %115
  %118 = add nsw i32 %33, -128
  %119 = sext i32 %118 to i64
  %120 = getelementptr inbounds [65 x i16], [65 x i16]* @_ZN7libgav13dsp12_GLOBAL__N_17kCos128E, i64 0, i64 %119
  %121 = load i16, i16* %120, align 4
  %122 = sub i16 0, %121
  br label %128

123:                                              ; preds = %115
  %124 = sub nuw nsw i32 256, %33
  %125 = zext i32 %124 to i64
  %126 = getelementptr inbounds [65 x i16], [65 x i16]* @_ZN7libgav13dsp12_GLOBAL__N_17kCos128E, i64 0, i64 %125
  %127 = load i16, i16* %126, align 4
  br label %128

128:                                              ; preds = %103, %109, %117, %123
  %129 = phi i16 [ %106, %103 ], [ %114, %109 ], [ %122, %117 ], [ %127, %123 ]
  %130 = sext i16 %129 to i32
  %131 = mul nsw i32 %66, %130
  %132 = sext i32 %131 to i64
  %133 = add nsw i64 %102, 2048
  %134 = add nsw i64 %133, %132
  %135 = lshr i64 %134, 12
  %136 = trunc i64 %135 to i32
  store i32 %136, i32* %29, align 8
  %137 = add nsw i64 %64, 2048
  %138 = sub nsw i64 %137, %100
  %139 = lshr i64 %138, 12
  %140 = trunc i64 %139 to i32
  store i32 %140, i32* %65, align 4
  %141 = add nuw nsw i64 %25, 1
  %142 = icmp eq i64 %141, 8
  br i1 %142, label %143, label %24

143:                                              ; preds = %128
  %144 = add i8 %1, -1
  %145 = sext i8 %144 to i32
  %146 = shl i32 1, %145
  %147 = sub nsw i32 0, %146
  %148 = add nsw i32 %146, -1
  %149 = getelementptr inbounds [16 x i32], [16 x i32]* %3, i64 0, i64 0
  %150 = getelementptr inbounds [16 x i32], [16 x i32]* %3, i64 0, i64 8
  %151 = getelementptr inbounds [16 x i32], [16 x i32]* %3, i64 0, i64 1
  %152 = getelementptr inbounds [16 x i32], [16 x i32]* %3, i64 0, i64 9
  %153 = getelementptr inbounds [16 x i32], [16 x i32]* %3, i64 0, i64 2
  %154 = getelementptr inbounds [16 x i32], [16 x i32]* %3, i64 0, i64 10
  %155 = getelementptr inbounds [16 x i32], [16 x i32]* %3, i64 0, i64 3
  %156 = bitcast [16 x i32]* %3 to <4 x i32>*
  %157 = load <4 x i32>, <4 x i32>* %156, align 16
  %158 = getelementptr inbounds [16 x i32], [16 x i32]* %3, i64 0, i64 11
  %159 = bitcast i32* %150 to <4 x i32>*
  %160 = load <4 x i32>, <4 x i32>* %159, align 16
  %161 = add nsw <4 x i32> %160, %157
  %162 = sub nsw <4 x i32> %157, %160
  %163 = insertelement <4 x i32> undef, i32 %147, i32 0
  %164 = shufflevector <4 x i32> %163, <4 x i32> undef, <4 x i32> zeroinitializer
  %165 = icmp slt <4 x i32> %161, %164
  %166 = insertelement <4 x i32> undef, i32 %148, i32 0
  %167 = shufflevector <4 x i32> %166, <4 x i32> undef, <4 x i32> zeroinitializer
  %168 = icmp sgt <4 x i32> %161, %167
  %169 = select <4 x i1> %168, <4 x i32> %167, <4 x i32> %161
  %170 = select <4 x i1> %165, <4 x i32> %164, <4 x i32> %169
  %171 = bitcast [16 x i32]* %3 to <4 x i32>*
  store <4 x i32> %170, <4 x i32>* %171, align 16
  %172 = icmp slt <4 x i32> %162, %164
  %173 = icmp sgt <4 x i32> %162, %167
  %174 = select <4 x i1> %173, <4 x i32> %167, <4 x i32> %162
  %175 = select <4 x i1> %172, <4 x i32> %164, <4 x i32> %174
  %176 = bitcast i32* %150 to <4 x i32>*
  store <4 x i32> %175, <4 x i32>* %176, align 16
  %177 = getelementptr inbounds [16 x i32], [16 x i32]* %3, i64 0, i64 4
  %178 = getelementptr inbounds [16 x i32], [16 x i32]* %3, i64 0, i64 12
  %179 = getelementptr inbounds [16 x i32], [16 x i32]* %3, i64 0, i64 5
  %180 = getelementptr inbounds [16 x i32], [16 x i32]* %3, i64 0, i64 13
  %181 = getelementptr inbounds [16 x i32], [16 x i32]* %3, i64 0, i64 6
  %182 = getelementptr inbounds [16 x i32], [16 x i32]* %3, i64 0, i64 14
  %183 = getelementptr inbounds [16 x i32], [16 x i32]* %3, i64 0, i64 7
  %184 = bitcast i32* %177 to <4 x i32>*
  %185 = load <4 x i32>, <4 x i32>* %184, align 16
  %186 = getelementptr inbounds [16 x i32], [16 x i32]* %3, i64 0, i64 15
  %187 = bitcast i32* %178 to <4 x i32>*
  %188 = load <4 x i32>, <4 x i32>* %187, align 16
  %189 = extractelement <4 x i32> %188, i32 0
  %190 = extractelement <4 x i32> %185, i32 0
  %191 = sub nsw i32 %190, %189
  %192 = icmp slt i32 %191, %147
  %193 = icmp sgt i32 %191, %148
  %194 = select i1 %193, i32 %148, i32 %191
  %195 = select i1 %192, i32 %147, i32 %194
  %196 = extractelement <4 x i32> %188, i32 1
  %197 = extractelement <4 x i32> %185, i32 1
  %198 = sub nsw i32 %197, %196
  %199 = icmp slt i32 %198, %147
  %200 = icmp sgt i32 %198, %148
  %201 = select i1 %200, i32 %148, i32 %198
  %202 = select i1 %199, i32 %147, i32 %201
  %203 = extractelement <4 x i32> %188, i32 2
  %204 = extractelement <4 x i32> %185, i32 2
  %205 = sub nsw i32 %204, %203
  %206 = icmp slt i32 %205, %147
  %207 = icmp sgt i32 %205, %148
  %208 = select i1 %207, i32 %148, i32 %205
  %209 = select i1 %206, i32 %147, i32 %208
  %210 = add nsw <4 x i32> %188, %185
  %211 = extractelement <4 x i32> %188, i32 3
  %212 = extractelement <4 x i32> %185, i32 3
  %213 = sub nsw i32 %212, %211
  %214 = icmp slt <4 x i32> %210, %164
  %215 = icmp sgt <4 x i32> %210, %167
  %216 = select <4 x i1> %215, <4 x i32> %167, <4 x i32> %210
  %217 = select <4 x i1> %214, <4 x i32> %164, <4 x i32> %216
  %218 = bitcast i32* %177 to <4 x i32>*
  store <4 x i32> %217, <4 x i32>* %218, align 16
  %219 = icmp slt i32 %213, %147
  %220 = icmp sgt i32 %213, %148
  %221 = select i1 %220, i32 %148, i32 %213
  %222 = select i1 %219, i32 %147, i32 %221
  %223 = load i32, i32* %150, align 16
  %224 = mul nsw i32 %223, 799
  %225 = sext i32 %224 to i64
  %226 = extractelement <4 x i32> %175, i32 1
  %227 = mul nsw i32 %226, 4017
  %228 = sext i32 %227 to i64
  %229 = mul nsw i32 %223, 4017
  %230 = sext i32 %229 to i64
  %231 = mul nsw i32 %226, 799
  %232 = sext i32 %231 to i64
  %233 = add nsw i64 %230, 2048
  %234 = add nsw i64 %233, %232
  %235 = lshr i64 %234, 12
  %236 = trunc i64 %235 to i32
  %237 = add nsw i64 %225, 2048
  %238 = sub nsw i64 %237, %228
  %239 = lshr i64 %238, 12
  %240 = trunc i64 %239 to i32
  %241 = mul nsw i32 %202, 4017
  %242 = sext i32 %241 to i64
  %243 = mul nsw i32 %195, 799
  %244 = sext i32 %243 to i64
  %245 = mul nsw i32 %202, 799
  %246 = sext i32 %245 to i64
  %247 = mul nsw i32 %195, 4017
  %248 = sext i32 %247 to i64
  %249 = add nsw i64 %246, 2048
  %250 = add nsw i64 %249, %248
  %251 = lshr i64 %250, 12
  %252 = trunc i64 %251 to i32
  %253 = add nsw i64 %242, 2048
  %254 = sub nsw i64 %253, %244
  %255 = lshr i64 %254, 12
  %256 = trunc i64 %255 to i32
  %257 = extractelement <4 x i32> %175, i32 2
  %258 = mul nsw i32 %257, 3406
  %259 = sext i32 %258 to i64
  %260 = extractelement <4 x i32> %175, i32 3
  %261 = mul nsw i32 %260, 2276
  %262 = sext i32 %261 to i64
  %263 = mul nsw i32 %257, 2276
  %264 = sext i32 %263 to i64
  %265 = mul nsw i32 %260, 3406
  %266 = sext i32 %265 to i64
  %267 = add nsw i64 %264, 2048
  %268 = add nsw i64 %267, %266
  %269 = lshr i64 %268, 12
  %270 = trunc i64 %269 to i32
  %271 = add nsw i64 %259, 2048
  %272 = sub nsw i64 %271, %262
  %273 = lshr i64 %272, 12
  %274 = trunc i64 %273 to i32
  store i32 %274, i32* %158, align 4
  %275 = mul nsw i32 %222, 2276
  %276 = sext i32 %275 to i64
  %277 = mul nsw i32 %209, 3406
  %278 = sext i32 %277 to i64
  %279 = mul nsw i32 %222, 3406
  %280 = sext i32 %279 to i64
  %281 = mul nsw i32 %209, 2276
  %282 = sext i32 %281 to i64
  %283 = add nsw i64 %280, 2048
  %284 = add nsw i64 %283, %282
  %285 = lshr i64 %284, 12
  %286 = trunc i64 %285 to i32
  %287 = add nsw i64 %276, 2048
  %288 = sub nsw i64 %287, %278
  %289 = lshr i64 %288, 12
  %290 = trunc i64 %289 to i32
  %291 = load i32, i32* %149, align 16
  %292 = extractelement <4 x i32> %217, i32 0
  %293 = add nsw i32 %292, %291
  %294 = sub nsw i32 %291, %292
  %295 = icmp slt i32 %293, %147
  %296 = icmp sgt i32 %293, %148
  %297 = select i1 %296, i32 %148, i32 %293
  %298 = select i1 %295, i32 %147, i32 %297
  store i32 %298, i32* %149, align 16
  %299 = icmp slt i32 %294, %147
  %300 = icmp sgt i32 %294, %148
  %301 = select i1 %300, i32 %148, i32 %294
  %302 = select i1 %299, i32 %147, i32 %301
  %303 = add nsw i32 %256, %236
  %304 = sub nsw i32 %236, %256
  %305 = icmp slt i32 %303, %147
  %306 = icmp sgt i32 %303, %148
  %307 = select i1 %306, i32 %148, i32 %303
  %308 = select i1 %305, i32 %147, i32 %307
  store i32 %308, i32* %150, align 16
  %309 = icmp slt i32 %304, %147
  %310 = icmp sgt i32 %304, %148
  %311 = select i1 %310, i32 %148, i32 %304
  %312 = select i1 %309, i32 %147, i32 %311
  %313 = load i32, i32* %151, align 4
  %314 = extractelement <4 x i32> %217, i32 1
  %315 = add nsw i32 %314, %313
  %316 = sub nsw i32 %313, %314
  %317 = icmp slt i32 %315, %147
  %318 = icmp sgt i32 %315, %148
  %319 = select i1 %318, i32 %148, i32 %315
  %320 = select i1 %317, i32 %147, i32 %319
  store i32 %320, i32* %151, align 4
  %321 = icmp slt i32 %316, %147
  %322 = icmp sgt i32 %316, %148
  %323 = select i1 %322, i32 %148, i32 %316
  %324 = select i1 %321, i32 %147, i32 %323
  %325 = sub nsw i32 %240, %252
  %326 = icmp slt i32 %325, %147
  %327 = icmp sgt i32 %325, %148
  %328 = select i1 %327, i32 %148, i32 %325
  %329 = select i1 %326, i32 %147, i32 %328
  %330 = extractelement <4 x i32> %170, i32 2
  %331 = extractelement <4 x i32> %217, i32 2
  %332 = add nsw i32 %331, %330
  %333 = sub nsw i32 %330, %331
  %334 = icmp slt i32 %332, %147
  %335 = icmp sgt i32 %332, %148
  %336 = select i1 %335, i32 %148, i32 %332
  %337 = select i1 %334, i32 %147, i32 %336
  store i32 %337, i32* %153, align 8
  %338 = icmp slt i32 %333, %147
  %339 = icmp sgt i32 %333, %148
  %340 = select i1 %339, i32 %148, i32 %333
  %341 = select i1 %338, i32 %147, i32 %340
  %342 = sub nsw i32 %270, %290
  %343 = icmp slt i32 %342, %147
  %344 = icmp sgt i32 %342, %148
  %345 = select i1 %344, i32 %148, i32 %342
  %346 = select i1 %343, i32 %147, i32 %345
  %347 = extractelement <4 x i32> %170, i32 3
  %348 = extractelement <4 x i32> %217, i32 3
  %349 = add nsw i32 %348, %347
  %350 = sub nsw i32 %347, %348
  %351 = icmp slt i32 %349, %147
  %352 = icmp sgt i32 %349, %148
  %353 = select i1 %352, i32 %148, i32 %349
  %354 = select i1 %351, i32 %147, i32 %353
  store i32 %354, i32* %155, align 4
  %355 = icmp slt i32 %350, %147
  %356 = icmp sgt i32 %350, %148
  %357 = select i1 %356, i32 %148, i32 %350
  %358 = select i1 %355, i32 %147, i32 %357
  %359 = sub nsw i32 %274, %286
  %360 = icmp slt i32 %359, %147
  %361 = icmp sgt i32 %359, %148
  %362 = select i1 %361, i32 %148, i32 %359
  %363 = select i1 %360, i32 %147, i32 %362
  %364 = mul nsw i32 %302, 1567
  %365 = sext i32 %364 to i64
  %366 = mul nsw i32 %324, 3784
  %367 = sext i32 %366 to i64
  %368 = mul nsw i32 %302, 3784
  %369 = sext i32 %368 to i64
  %370 = mul nsw i32 %324, 1567
  %371 = sext i32 %370 to i64
  %372 = add nsw i64 %369, 2048
  %373 = add nsw i64 %372, %371
  %374 = lshr i64 %373, 12
  %375 = trunc i64 %374 to i32
  %376 = add nsw i64 %365, 2048
  %377 = sub nsw i64 %376, %367
  %378 = lshr i64 %377, 12
  %379 = trunc i64 %378 to i32
  store i32 %379, i32* %179, align 4
  %380 = mul nsw i32 %312, 1567
  %381 = sext i32 %380 to i64
  %382 = mul nsw i32 %329, 3784
  %383 = sext i32 %382 to i64
  %384 = mul nsw i32 %312, 3784
  %385 = sext i32 %384 to i64
  %386 = mul nsw i32 %329, 1567
  %387 = sext i32 %386 to i64
  %388 = add nsw i64 %385, 2048
  %389 = add nsw i64 %388, %387
  %390 = lshr i64 %389, 12
  %391 = trunc i64 %390 to i32
  %392 = add nsw i64 %381, 2048
  %393 = sub nsw i64 %392, %383
  %394 = lshr i64 %393, 12
  %395 = trunc i64 %394 to i32
  store i32 %395, i32* %180, align 4
  %396 = mul nsw i32 %358, 3784
  %397 = sext i32 %396 to i64
  %398 = mul nsw i32 %341, 1567
  %399 = sext i32 %398 to i64
  %400 = mul nsw i32 %358, 1567
  %401 = sext i32 %400 to i64
  %402 = mul nsw i32 %341, 3784
  %403 = sext i32 %402 to i64
  %404 = add nsw i64 %401, 2048
  %405 = add nsw i64 %404, %403
  %406 = lshr i64 %405, 12
  %407 = trunc i64 %406 to i32
  %408 = add nsw i64 %397, 2048
  %409 = sub nsw i64 %408, %399
  %410 = lshr i64 %409, 12
  %411 = trunc i64 %410 to i32
  %412 = mul nsw i32 %363, 3784
  %413 = sext i32 %412 to i64
  %414 = mul nsw i32 %346, 1567
  %415 = sext i32 %414 to i64
  %416 = mul nsw i32 %363, 1567
  %417 = sext i32 %416 to i64
  %418 = mul nsw i32 %346, 3784
  %419 = sext i32 %418 to i64
  %420 = add nsw i64 %417, 2048
  %421 = add nsw i64 %420, %419
  %422 = lshr i64 %421, 12
  %423 = trunc i64 %422 to i32
  %424 = add nsw i64 %413, 2048
  %425 = sub nsw i64 %424, %415
  %426 = lshr i64 %425, 12
  %427 = trunc i64 %426 to i32
  %428 = add nsw i32 %337, %298
  %429 = sub nsw i32 %298, %337
  %430 = icmp slt i32 %428, %147
  %431 = icmp sgt i32 %428, %148
  %432 = select i1 %431, i32 %148, i32 %428
  %433 = select i1 %430, i32 %147, i32 %432
  store i32 %433, i32* %149, align 16
  %434 = icmp slt i32 %429, %147
  %435 = icmp sgt i32 %429, %148
  %436 = select i1 %435, i32 %148, i32 %429
  %437 = select i1 %434, i32 %147, i32 %436
  %438 = add nsw i32 %411, %375
  %439 = sub nsw i32 %375, %411
  %440 = icmp slt i32 %438, %147
  %441 = icmp sgt i32 %438, %148
  %442 = select i1 %441, i32 %148, i32 %438
  %443 = select i1 %440, i32 %147, i32 %442
  store i32 %443, i32* %177, align 16
  %444 = icmp slt i32 %439, %147
  %445 = icmp sgt i32 %439, %148
  %446 = select i1 %445, i32 %148, i32 %439
  %447 = select i1 %444, i32 %147, i32 %446
  %448 = insertelement <4 x i32> undef, i32 %252, i32 0
  %449 = insertelement <4 x i32> %448, i32 %290, i32 1
  %450 = insertelement <4 x i32> %449, i32 %286, i32 2
  %451 = insertelement <4 x i32> %450, i32 %427, i32 3
  %452 = insertelement <4 x i32> undef, i32 %240, i32 0
  %453 = insertelement <4 x i32> %452, i32 %270, i32 1
  %454 = insertelement <4 x i32> %453, i32 %274, i32 2
  %455 = insertelement <4 x i32> %454, i32 %391, i32 3
  %456 = add nsw <4 x i32> %451, %455
  %457 = icmp slt <4 x i32> %456, %164
  %458 = icmp sgt <4 x i32> %456, %167
  %459 = select <4 x i1> %458, <4 x i32> %167, <4 x i32> %456
  %460 = select <4 x i1> %457, <4 x i32> %164, <4 x i32> %459
  %461 = extractelement <4 x i32> %460, i32 1
  %462 = add nsw i32 %461, %308
  %463 = sub nsw i32 %308, %461
  %464 = icmp slt i32 %462, %147
  %465 = icmp sgt i32 %462, %148
  %466 = select i1 %465, i32 %148, i32 %462
  %467 = select i1 %464, i32 %147, i32 %466
  store i32 %467, i32* %150, align 16
  %468 = icmp slt i32 %463, %147
  %469 = icmp sgt i32 %463, %148
  %470 = select i1 %469, i32 %148, i32 %463
  %471 = select i1 %468, i32 %147, i32 %470
  %472 = sub nsw i32 %391, %427
  %473 = bitcast i32* %152 to <4 x i32>*
  store <4 x i32> %460, <4 x i32>* %473, align 4
  %474 = icmp slt i32 %472, %147
  %475 = icmp sgt i32 %472, %148
  %476 = select i1 %475, i32 %148, i32 %472
  %477 = select i1 %474, i32 %147, i32 %476
  %478 = add nsw i32 %354, %320
  %479 = sub nsw i32 %320, %354
  %480 = icmp slt i32 %478, %147
  %481 = icmp sgt i32 %478, %148
  %482 = select i1 %481, i32 %148, i32 %478
  %483 = select i1 %480, i32 %147, i32 %482
  store i32 %483, i32* %151, align 4
  %484 = icmp slt i32 %479, %147
  %485 = icmp sgt i32 %479, %148
  %486 = select i1 %485, i32 %148, i32 %479
  %487 = select i1 %484, i32 %147, i32 %486
  %488 = add nsw i32 %407, %379
  %489 = sub nsw i32 %379, %407
  %490 = icmp slt i32 %488, %147
  %491 = icmp sgt i32 %488, %148
  %492 = select i1 %491, i32 %148, i32 %488
  %493 = select i1 %490, i32 %147, i32 %492
  store i32 %493, i32* %179, align 4
  %494 = icmp slt i32 %489, %147
  %495 = icmp sgt i32 %489, %148
  %496 = select i1 %495, i32 %148, i32 %489
  %497 = select i1 %494, i32 %147, i32 %496
  %498 = extractelement <4 x i32> %460, i32 0
  %499 = extractelement <4 x i32> %460, i32 2
  %500 = add nsw i32 %499, %498
  %501 = sub nsw i32 %498, %499
  %502 = icmp slt i32 %500, %147
  %503 = icmp sgt i32 %500, %148
  %504 = select i1 %503, i32 %148, i32 %500
  %505 = select i1 %502, i32 %147, i32 %504
  store i32 %505, i32* %152, align 4
  %506 = icmp slt i32 %501, %147
  %507 = icmp sgt i32 %501, %148
  %508 = select i1 %507, i32 %148, i32 %501
  %509 = select i1 %506, i32 %147, i32 %508
  %510 = add nsw i32 %423, %395
  %511 = sub nsw i32 %395, %423
  %512 = icmp slt i32 %510, %147
  %513 = icmp sgt i32 %510, %148
  %514 = select i1 %513, i32 %148, i32 %510
  %515 = select i1 %512, i32 %147, i32 %514
  store i32 %515, i32* %180, align 4
  %516 = icmp slt i32 %511, %147
  %517 = icmp sgt i32 %511, %148
  %518 = select i1 %517, i32 %148, i32 %511
  %519 = select i1 %516, i32 %147, i32 %518
  %520 = mul nsw i32 %437, 2896
  %521 = sext i32 %520 to i64
  %522 = mul nsw i32 %487, 2896
  %523 = sext i32 %522 to i64
  %524 = add nsw i64 %521, 2048
  %525 = add nsw i64 %524, %523
  %526 = lshr i64 %525, 12
  %527 = trunc i64 %526 to i32
  store i32 %527, i32* %153, align 8
  %528 = sub nsw i64 %524, %523
  %529 = lshr i64 %528, 12
  %530 = trunc i64 %529 to i32
  store i32 %530, i32* %155, align 4
  %531 = mul nsw i32 %447, 2896
  %532 = sext i32 %531 to i64
  %533 = mul nsw i32 %497, 2896
  %534 = sext i32 %533 to i64
  %535 = add nsw i64 %532, 2048
  %536 = add nsw i64 %535, %534
  %537 = lshr i64 %536, 12
  %538 = trunc i64 %537 to i32
  store i32 %538, i32* %181, align 8
  %539 = sub nsw i64 %535, %534
  %540 = lshr i64 %539, 12
  %541 = trunc i64 %540 to i32
  store i32 %541, i32* %183, align 4
  %542 = mul nsw i32 %471, 2896
  %543 = sext i32 %542 to i64
  %544 = mul nsw i32 %509, 2896
  %545 = sext i32 %544 to i64
  %546 = add nsw i64 %543, 2048
  %547 = add nsw i64 %546, %545
  %548 = lshr i64 %547, 12
  %549 = trunc i64 %548 to i32
  store i32 %549, i32* %154, align 8
  %550 = sub nsw i64 %546, %545
  %551 = lshr i64 %550, 12
  %552 = trunc i64 %551 to i32
  store i32 %552, i32* %158, align 4
  %553 = mul nsw i32 %477, 2896
  %554 = sext i32 %553 to i64
  %555 = mul nsw i32 %519, 2896
  %556 = sext i32 %555 to i64
  %557 = add nsw i64 %554, 2048
  %558 = add nsw i64 %557, %556
  %559 = lshr i64 %558, 12
  %560 = trunc i64 %559 to i32
  store i32 %560, i32* %182, align 8
  %561 = sub nsw i64 %557, %556
  %562 = lshr i64 %561, 12
  %563 = trunc i64 %562 to i32
  store i32 %563, i32* %186, align 4
  %564 = load i32, i32* %149, align 16
  store i32 %564, i32* %4, align 4
  %565 = load i32, i32* %150, align 16
  %566 = sub nsw i32 0, %565
  %567 = getelementptr inbounds i8, i8* %0, i64 4
  %568 = bitcast i8* %567 to i32*
  store i32 %566, i32* %568, align 4
  %569 = load i32, i32* %178, align 16
  %570 = getelementptr inbounds i8, i8* %0, i64 8
  %571 = bitcast i8* %570 to i32*
  store i32 %569, i32* %571, align 4
  %572 = load i32, i32* %177, align 16
  %573 = sub nsw i32 0, %572
  %574 = getelementptr inbounds i8, i8* %0, i64 12
  %575 = bitcast i8* %574 to i32*
  store i32 %573, i32* %575, align 4
  %576 = getelementptr inbounds i8, i8* %0, i64 16
  %577 = bitcast i8* %576 to i32*
  store i32 %538, i32* %577, align 4
  %578 = sub nsw i32 0, %560
  %579 = getelementptr inbounds i8, i8* %0, i64 20
  %580 = bitcast i8* %579 to i32*
  store i32 %578, i32* %580, align 4
  %581 = getelementptr inbounds i8, i8* %0, i64 24
  %582 = bitcast i8* %581 to i32*
  store i32 %549, i32* %582, align 4
  %583 = sub nsw i32 0, %527
  %584 = getelementptr inbounds i8, i8* %0, i64 28
  %585 = bitcast i8* %584 to i32*
  store i32 %583, i32* %585, align 4
  %586 = getelementptr inbounds i8, i8* %0, i64 32
  %587 = bitcast i8* %586 to i32*
  store i32 %530, i32* %587, align 4
  %588 = sub nsw i32 0, %552
  %589 = getelementptr inbounds i8, i8* %0, i64 36
  %590 = bitcast i8* %589 to i32*
  store i32 %588, i32* %590, align 4
  %591 = getelementptr inbounds i8, i8* %0, i64 40
  %592 = bitcast i8* %591 to i32*
  store i32 %563, i32* %592, align 4
  %593 = sub nsw i32 0, %541
  %594 = getelementptr inbounds i8, i8* %0, i64 44
  %595 = bitcast i8* %594 to i32*
  store i32 %593, i32* %595, align 4
  %596 = load i32, i32* %179, align 4
  %597 = getelementptr inbounds i8, i8* %0, i64 48
  %598 = bitcast i8* %597 to i32*
  store i32 %596, i32* %598, align 4
  %599 = load i32, i32* %180, align 4
  %600 = sub nsw i32 0, %599
  %601 = getelementptr inbounds i8, i8* %0, i64 52
  %602 = bitcast i8* %601 to i32*
  store i32 %600, i32* %602, align 4
  %603 = load i32, i32* %152, align 4
  %604 = getelementptr inbounds i8, i8* %0, i64 56
  %605 = bitcast i8* %604 to i32*
  store i32 %603, i32* %605, align 4
  %606 = load i32, i32* %151, align 4
  %607 = sub nsw i32 0, %606
  %608 = getelementptr inbounds i8, i8* %0, i64 60
  %609 = bitcast i8* %608 to i32*
  store i32 %607, i32* %609, align 4
  call void @llvm.lifetime.end.p0i8(i64 64, i8* nonnull %5) #4
  ret void
}

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nofree norecurse nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = distinct !{!2, !3}
!3 = !{!"llvm.loop.isvectorized", i32 1}
!4 = distinct !{!4, !5, !3}
!5 = !{!"llvm.loop.unroll.runtime.disable"}
!6 = distinct !{!6, !3}
!7 = distinct !{!7, !5, !3}
!8 = distinct !{!8, !9}
!9 = !{!"llvm.loop.unroll.disable"}
!10 = distinct !{!10, !3}
!11 = distinct !{!11, !5, !3}
!12 = distinct !{!12, !3}
!13 = distinct !{!13, !5, !3}
!14 = distinct !{!14, !9}
!15 = distinct !{!15, !3}
!16 = distinct !{!16, !5, !3}
!17 = distinct !{!17, !3}
!18 = distinct !{!18, !5, !3}
!19 = distinct !{!19, !9}
!20 = distinct !{!20, !3}
!21 = distinct !{!21, !5, !3}
!22 = distinct !{!22, !3}
!23 = distinct !{!23, !5, !3}
!24 = distinct !{!24, !9}
!25 = distinct !{!25, !3}
!26 = distinct !{!26, !5, !3}
!27 = distinct !{!27, !3}
!28 = distinct !{!28, !5, !3}
!29 = distinct !{!29, !9}
!30 = distinct !{!30, !3}
!31 = distinct !{!31, !5, !3}
!32 = distinct !{!32, !3}
!33 = distinct !{!33, !5, !3}
!34 = distinct !{!34, !9}
!35 = distinct !{!35, !3}
!36 = distinct !{!36, !5, !3}
!37 = distinct !{!37, !3}
!38 = distinct !{!38, !5, !3}
!39 = distinct !{!39, !9}
!40 = distinct !{!40, !3}
!41 = distinct !{!41, !5, !3}
!42 = distinct !{!42, !3}
!43 = distinct !{!43, !5, !3}
!44 = distinct !{!44, !9}
!45 = distinct !{!45, !3}
!46 = distinct !{!46, !5, !3}
!47 = distinct !{!47, !9}
!48 = distinct !{!48, !3}
!49 = distinct !{!49, !5, !3}
!50 = distinct !{!50, !9}
!51 = distinct !{!51, !3}
!52 = distinct !{!52, !5, !3}
!53 = distinct !{!53, !9}
!54 = distinct !{!54, !3}
!55 = distinct !{!55, !5, !3}
!56 = distinct !{!56, !9}
!57 = distinct !{!57, !3}
!58 = distinct !{!58, !5, !3}
!59 = distinct !{!59, !3}
!60 = distinct !{!60, !5, !3}
!61 = distinct !{!61, !3}
!62 = distinct !{!62, !5, !3}
!63 = distinct !{!63, !3}
!64 = distinct !{!64, !5, !3}
!65 = distinct !{!65, !9}
!66 = distinct !{!66, !3}
!67 = distinct !{!67, !5, !3}
!68 = distinct !{!68, !3}
!69 = distinct !{!69, !5, !3}
!70 = distinct !{!70, !3}
!71 = distinct !{!71, !5, !3}
!72 = distinct !{!72, !9}
!73 = distinct !{!73, !3}
!74 = distinct !{!74, !5, !3}
!75 = distinct !{!75, !3}
!76 = distinct !{!76, !5, !3}
!77 = distinct !{!77, !3}
!78 = distinct !{!78, !5, !3}
!79 = distinct !{!79, !9}
!80 = distinct !{!80, !3}
!81 = distinct !{!81, !5, !3}
!82 = distinct !{!82, !3}
!83 = distinct !{!83, !5, !3}
!84 = distinct !{!84, !3}
!85 = distinct !{!85, !5, !3}
!86 = distinct !{!86, !9}
!87 = distinct !{!87, !3}
!88 = distinct !{!88, !5, !3}
!89 = distinct !{!89, !3}
!90 = distinct !{!90, !5, !3}
!91 = distinct !{!91, !3}
!92 = distinct !{!92, !5, !3}
!93 = distinct !{!93, !9}
!94 = distinct !{!94, !3}
!95 = distinct !{!95, !5, !3}
!96 = distinct !{!96, !3}
!97 = distinct !{!97, !5, !3}
!98 = distinct !{!98, !3}
!99 = distinct !{!99, !5, !3}
!100 = distinct !{!100, !9}
!101 = distinct !{!101, !3}
!102 = distinct !{!102, !5, !3}
!103 = distinct !{!103, !3}
!104 = distinct !{!104, !5, !3}
!105 = distinct !{!105, !3}
!106 = distinct !{!106, !5, !3}
!107 = distinct !{!107, !9}
!108 = distinct !{!108, !3}
!109 = distinct !{!109, !5, !3}
!110 = distinct !{!110, !3}
!111 = distinct !{!111, !5, !3}
!112 = distinct !{!112, !3}
!113 = distinct !{!113, !5, !3}
!114 = distinct !{!114, !9}
!115 = distinct !{!115, !3}
!116 = distinct !{!116, !5, !3}
!117 = distinct !{!117, !3}
!118 = distinct !{!118, !5, !3}
!119 = distinct !{!119, !9}
!120 = distinct !{!120, !3}
!121 = distinct !{!121, !5, !3}
!122 = distinct !{!122, !3}
!123 = distinct !{!123, !5, !3}
!124 = distinct !{!124, !9}
!125 = distinct !{!125, !3}
!126 = distinct !{!126, !5, !3}
!127 = distinct !{!127, !3}
!128 = distinct !{!128, !5, !3}
!129 = distinct !{!129, !9}
!130 = distinct !{!130, !3}
!131 = distinct !{!131, !5, !3}
!132 = distinct !{!132, !3}
!133 = distinct !{!133, !5, !3}
!134 = distinct !{!134, !9}
!135 = distinct !{!135, !3}
!136 = distinct !{!136, !5, !3}
