; ModuleID = '../../third_party/pdfium/core/fxge/dib/cfx_bitmapcomposer.cpp'
source_filename = "../../third_party/pdfium/core/fxge/dib/cfx_bitmapcomposer.cpp"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%class.CFX_BitmapComposer = type { %class.ScanlineComposerIface, %"class.fxcrt::RetainPtr", %"class.fxcrt::UnownedPtr", i16, i32, i32, i32, i32, i32, i32, %"class.fxcrt::RetainPtr", %class.CFX_ScanlineCompositor, i8, i8, i8, i8, i32, %"class.std::__1::vector", %"class.std::__1::vector", %"class.std::__1::vector", %"class.std::__1::vector" }
%class.ScanlineComposerIface = type { i32 (...)** }
%"class.fxcrt::UnownedPtr" = type { %class.CFX_ClipRgn* }
%class.CFX_ClipRgn = type { i8, %struct.FX_RECT, %"class.fxcrt::RetainPtr" }
%struct.FX_RECT = type { i32, i32, i32, i32 }
%"class.fxcrt::RetainPtr" = type { %"class.std::__1::unique_ptr" }
%"class.std::__1::unique_ptr" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %class.CFX_DIBitmap* }
%class.CFX_DIBitmap = type { %class.CFX_DIBBase, %"class.fxcrt::MaybeOwned" }
%class.CFX_DIBBase = type { %"class.fxcrt::Retainable", i16, i32, i32, i32, %"class.fxcrt::RetainPtr", %"class.std::__1::vector.8" }
%"class.fxcrt::Retainable" = type { i32 (...)**, i64 }
%"class.std::__1::vector.8" = type { %"class.std::__1::__vector_base.9" }
%"class.std::__1::__vector_base.9" = type { i32*, i32*, %"class.std::__1::__compressed_pair.10" }
%"class.std::__1::__compressed_pair.10" = type { %"struct.std::__1::__compressed_pair_elem.3" }
%"struct.std::__1::__compressed_pair_elem.3" = type { i32* }
%"class.fxcrt::MaybeOwned" = type { %"class.std::__1::unique_ptr.14", %"class.fxcrt::UnownedPtr.16" }
%"class.std::__1::unique_ptr.14" = type { %"class.std::__1::__compressed_pair.15" }
%"class.std::__1::__compressed_pair.15" = type { %"struct.std::__1::__compressed_pair_elem.6" }
%"struct.std::__1::__compressed_pair_elem.6" = type { i8* }
%"class.fxcrt::UnownedPtr.16" = type { i8* }
%class.CFX_ScanlineCompositor = type <{ i32, i16, i16, %"class.CFX_ScanlineCompositor::Palette", i32, i32, i32, i32, i32, i8, [3 x i8] }>
%"class.CFX_ScanlineCompositor::Palette" = type { i64, i64, %"class.std::__1::unique_ptr.1" }
%"class.std::__1::unique_ptr.1" = type { %"class.std::__1::__compressed_pair.2" }
%"class.std::__1::__compressed_pair.2" = type { %"struct.std::__1::__compressed_pair_elem.3" }
%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { i8*, i8*, %"class.std::__1::__compressed_pair.5" }
%"class.std::__1::__compressed_pair.5" = type { %"struct.std::__1::__compressed_pair_elem.6" }
%"class.pdfium::span" = type { %"class.fxcrt::UnownedPtr.17", i64 }
%"class.fxcrt::UnownedPtr.17" = type { i32* }
%"class.std::__1::__vector_base_common" = type { i8 }

$_ZNSt3__16vectorIh16FxAllocAllocatorIhEE8__appendEm = comdat any

@_ZTV18CFX_BitmapComposer = hidden unnamed_addr constant { [6 x i8*] } { [6 x i8*] [i8* null, i8* null, i8* bitcast (void (%class.CFX_BitmapComposer*)* @_ZN18CFX_BitmapComposerD2Ev to i8*), i8* bitcast (void (%class.CFX_BitmapComposer*)* @_ZN18CFX_BitmapComposerD0Ev to i8*), i8* bitcast (void (%class.CFX_BitmapComposer*, i32, i8*, i8*)* @_ZN18CFX_BitmapComposer15ComposeScanlineEiPKhS1_ to i8*), i8* bitcast (i1 (%class.CFX_BitmapComposer*, i32, i32, i16, %"class.pdfium::span"*)* @_ZN18CFX_BitmapComposer7SetInfoEii12FXDIB_FormatN6pdfium4spanIKjEE to i8*)] }, align 8

@_ZN18CFX_BitmapComposerC1Ev = hidden unnamed_addr alias void (%class.CFX_BitmapComposer*), void (%class.CFX_BitmapComposer*)* @_ZN18CFX_BitmapComposerC2Ev
@_ZN18CFX_BitmapComposerD1Ev = hidden unnamed_addr alias void (%class.CFX_BitmapComposer*), void (%class.CFX_BitmapComposer*)* @_ZN18CFX_BitmapComposerD2Ev

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN18CFX_BitmapComposerC2Ev(%class.CFX_BitmapComposer*) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %class.CFX_BitmapComposer, %class.CFX_BitmapComposer* %0, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [6 x i8*] }, { [6 x i8*] }* @_ZTV18CFX_BitmapComposer, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8
  %3 = getelementptr inbounds %class.CFX_BitmapComposer, %class.CFX_BitmapComposer* %0, i64 0, i32 1
  %4 = getelementptr inbounds %class.CFX_BitmapComposer, %class.CFX_BitmapComposer* %0, i64 0, i32 10
  %5 = bitcast %"class.fxcrt::RetainPtr"* %4 to i64*
  store i64 0, i64* %5, align 8
  %6 = getelementptr inbounds %class.CFX_BitmapComposer, %class.CFX_BitmapComposer* %0, i64 0, i32 11
  %7 = bitcast %"class.fxcrt::RetainPtr"* %3 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %7, i8 0, i64 16, i1 false)
  tail call void @_ZN22CFX_ScanlineCompositorC1Ev(%class.CFX_ScanlineCompositor* %6) #6
  %8 = getelementptr inbounds %class.CFX_BitmapComposer, %class.CFX_BitmapComposer* %0, i64 0, i32 15
  call void @llvm.memset.p0i8.i64(i8* align 1 %8, i8 0, i64 101, i1 false)
  ret void
}

declare void @_ZN22CFX_ScanlineCompositorC1Ev(%class.CFX_ScanlineCompositor*) unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN18CFX_BitmapComposerD2Ev(%class.CFX_BitmapComposer*) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %class.CFX_BitmapComposer, %class.CFX_BitmapComposer* %0, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [6 x i8*] }, { [6 x i8*] }* @_ZTV18CFX_BitmapComposer, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8
  %3 = getelementptr inbounds %class.CFX_BitmapComposer, %class.CFX_BitmapComposer* %0, i64 0, i32 20, i32 0, i32 0
  %4 = load i8*, i8** %3, align 8
  %5 = icmp eq i8* %4, null
  br i1 %5, label %10, label %6

6:                                                ; preds = %1
  %7 = ptrtoint i8* %4 to i64
  %8 = getelementptr inbounds %class.CFX_BitmapComposer, %class.CFX_BitmapComposer* %0, i64 0, i32 20, i32 0, i32 1
  %9 = bitcast i8** %8 to i64*
  store i64 %7, i64* %9, align 8
  tail call void @_Z7FX_FreePv(i8* nonnull %4) #6
  br label %10

10:                                               ; preds = %1, %6
  %11 = getelementptr inbounds %class.CFX_BitmapComposer, %class.CFX_BitmapComposer* %0, i64 0, i32 19, i32 0, i32 0
  %12 = load i8*, i8** %11, align 8
  %13 = icmp eq i8* %12, null
  br i1 %13, label %18, label %14

14:                                               ; preds = %10
  %15 = ptrtoint i8* %12 to i64
  %16 = getelementptr inbounds %class.CFX_BitmapComposer, %class.CFX_BitmapComposer* %0, i64 0, i32 19, i32 0, i32 1
  %17 = bitcast i8** %16 to i64*
  store i64 %15, i64* %17, align 8
  tail call void @_Z7FX_FreePv(i8* nonnull %12) #6
  br label %18

18:                                               ; preds = %10, %14
  %19 = getelementptr inbounds %class.CFX_BitmapComposer, %class.CFX_BitmapComposer* %0, i64 0, i32 18, i32 0, i32 0
  %20 = load i8*, i8** %19, align 8
  %21 = icmp eq i8* %20, null
  br i1 %21, label %26, label %22

22:                                               ; preds = %18
  %23 = ptrtoint i8* %20 to i64
  %24 = getelementptr inbounds %class.CFX_BitmapComposer, %class.CFX_BitmapComposer* %0, i64 0, i32 18, i32 0, i32 1
  %25 = bitcast i8** %24 to i64*
  store i64 %23, i64* %25, align 8
  tail call void @_Z7FX_FreePv(i8* nonnull %20) #6
  br label %26

26:                                               ; preds = %18, %22
  %27 = getelementptr inbounds %class.CFX_BitmapComposer, %class.CFX_BitmapComposer* %0, i64 0, i32 17, i32 0, i32 0
  %28 = load i8*, i8** %27, align 8
  %29 = icmp eq i8* %28, null
  br i1 %29, label %34, label %30

30:                                               ; preds = %26
  %31 = ptrtoint i8* %28 to i64
  %32 = getelementptr inbounds %class.CFX_BitmapComposer, %class.CFX_BitmapComposer* %0, i64 0, i32 17, i32 0, i32 1
  %33 = bitcast i8** %32 to i64*
  store i64 %31, i64* %33, align 8
  tail call void @_Z7FX_FreePv(i8* nonnull %28) #6
  br label %34

34:                                               ; preds = %26, %30
  %35 = getelementptr inbounds %class.CFX_BitmapComposer, %class.CFX_BitmapComposer* %0, i64 0, i32 11
  tail call void @_ZN22CFX_ScanlineCompositorD1Ev(%class.CFX_ScanlineCompositor* %35) #6
  %36 = getelementptr inbounds %class.CFX_BitmapComposer, %class.CFX_BitmapComposer* %0, i64 0, i32 10, i32 0, i32 0, i32 0, i32 0
  %37 = load %class.CFX_DIBitmap*, %class.CFX_DIBitmap** %36, align 8
  store %class.CFX_DIBitmap* null, %class.CFX_DIBitmap** %36, align 8
  %38 = icmp eq %class.CFX_DIBitmap* %37, null
  br i1 %38, label %50, label %39

39:                                               ; preds = %34
  %40 = getelementptr inbounds %class.CFX_DIBitmap, %class.CFX_DIBitmap* %37, i64 0, i32 0, i32 0, i32 1
  %41 = load i64, i64* %40, align 8
  %42 = add nsw i64 %41, -1
  store i64 %42, i64* %40, align 8
  %43 = icmp eq i64 %42, 0
  br i1 %43, label %44, label %50

44:                                               ; preds = %39
  %45 = getelementptr inbounds %class.CFX_DIBitmap, %class.CFX_DIBitmap* %37, i64 0, i32 0, i32 0
  %46 = bitcast %class.CFX_DIBitmap* %37 to void (%"class.fxcrt::Retainable"*)***
  %47 = load void (%"class.fxcrt::Retainable"*)**, void (%"class.fxcrt::Retainable"*)*** %46, align 8
  %48 = getelementptr inbounds void (%"class.fxcrt::Retainable"*)*, void (%"class.fxcrt::Retainable"*)** %47, i64 1
  %49 = load void (%"class.fxcrt::Retainable"*)*, void (%"class.fxcrt::Retainable"*)** %48, align 8
  tail call void %49(%"class.fxcrt::Retainable"* nonnull %45) #6
  br label %50

50:                                               ; preds = %34, %39, %44
  %51 = getelementptr inbounds %class.CFX_BitmapComposer, %class.CFX_BitmapComposer* %0, i64 0, i32 1, i32 0, i32 0, i32 0, i32 0
  %52 = load %class.CFX_DIBitmap*, %class.CFX_DIBitmap** %51, align 8
  store %class.CFX_DIBitmap* null, %class.CFX_DIBitmap** %51, align 8
  %53 = icmp eq %class.CFX_DIBitmap* %52, null
  br i1 %53, label %65, label %54

54:                                               ; preds = %50
  %55 = getelementptr inbounds %class.CFX_DIBitmap, %class.CFX_DIBitmap* %52, i64 0, i32 0, i32 0, i32 1
  %56 = load i64, i64* %55, align 8
  %57 = add nsw i64 %56, -1
  store i64 %57, i64* %55, align 8
  %58 = icmp eq i64 %57, 0
  br i1 %58, label %59, label %65

59:                                               ; preds = %54
  %60 = getelementptr inbounds %class.CFX_DIBitmap, %class.CFX_DIBitmap* %52, i64 0, i32 0, i32 0
  %61 = bitcast %class.CFX_DIBitmap* %52 to void (%"class.fxcrt::Retainable"*)***
  %62 = load void (%"class.fxcrt::Retainable"*)**, void (%"class.fxcrt::Retainable"*)*** %61, align 8
  %63 = getelementptr inbounds void (%"class.fxcrt::Retainable"*)*, void (%"class.fxcrt::Retainable"*)** %62, i64 1
  %64 = load void (%"class.fxcrt::Retainable"*)*, void (%"class.fxcrt::Retainable"*)** %63, align 8
  tail call void %64(%"class.fxcrt::Retainable"* nonnull %60) #6
  br label %65

65:                                               ; preds = %50, %54, %59
  ret void
}

; Function Attrs: nounwind
declare void @_ZN22CFX_ScanlineCompositorD1Ev(%class.CFX_ScanlineCompositor*) unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN18CFX_BitmapComposerD0Ev(%class.CFX_BitmapComposer*) unnamed_addr #0 align 2 {
  tail call void @_ZN18CFX_BitmapComposerD2Ev(%class.CFX_BitmapComposer* %0) #6
  %2 = bitcast %class.CFX_BitmapComposer* %0 to i8*
  tail call void @_ZdlPv(i8* %2) #7
  ret void
}

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN18CFX_BitmapComposer7ComposeERKN5fxcrt9RetainPtrI12CFX_DIBitmapEEPK11CFX_ClipRgnijRK7FX_RECTbbbb9BlendMode(%class.CFX_BitmapComposer* nocapture, %"class.fxcrt::RetainPtr"* nocapture readonly dereferenceable(8), %class.CFX_ClipRgn*, i32, i32, %struct.FX_RECT* nocapture readonly dereferenceable(16), i1 zeroext, i1 zeroext, i1 zeroext, i1 zeroext, i32) local_unnamed_addr #0 align 2 {
  %12 = zext i1 %6 to i8
  %13 = zext i1 %7 to i8
  %14 = zext i1 %8 to i8
  %15 = zext i1 %9 to i8
  %16 = getelementptr inbounds %class.CFX_BitmapComposer, %class.CFX_BitmapComposer* %0, i64 0, i32 1, i32 0, i32 0, i32 0, i32 0
  %17 = load %class.CFX_DIBitmap*, %class.CFX_DIBitmap** %16, align 8
  %18 = getelementptr inbounds %"class.fxcrt::RetainPtr", %"class.fxcrt::RetainPtr"* %1, i64 0, i32 0, i32 0, i32 0, i32 0
  %19 = load %class.CFX_DIBitmap*, %class.CFX_DIBitmap** %18, align 8
  %20 = icmp eq %class.CFX_DIBitmap* %17, %19
  br i1 %20, label %42, label %21

21:                                               ; preds = %11
  %22 = icmp eq %class.CFX_DIBitmap* %19, null
  br i1 %22, label %28, label %23

23:                                               ; preds = %21
  %24 = getelementptr inbounds %class.CFX_DIBitmap, %class.CFX_DIBitmap* %19, i64 0, i32 0, i32 0, i32 1
  %25 = load i64, i64* %24, align 8
  %26 = add nsw i64 %25, 1
  store i64 %26, i64* %24, align 8
  %27 = load %class.CFX_DIBitmap*, %class.CFX_DIBitmap** %16, align 8
  br label %28

28:                                               ; preds = %23, %21
  %29 = phi %class.CFX_DIBitmap* [ %27, %23 ], [ %17, %21 ]
  store %class.CFX_DIBitmap* %19, %class.CFX_DIBitmap** %16, align 8
  %30 = icmp eq %class.CFX_DIBitmap* %29, null
  br i1 %30, label %42, label %31

31:                                               ; preds = %28
  %32 = getelementptr inbounds %class.CFX_DIBitmap, %class.CFX_DIBitmap* %29, i64 0, i32 0, i32 0, i32 1
  %33 = load i64, i64* %32, align 8
  %34 = add nsw i64 %33, -1
  store i64 %34, i64* %32, align 8
  %35 = icmp eq i64 %34, 0
  br i1 %35, label %36, label %42

36:                                               ; preds = %31
  %37 = getelementptr inbounds %class.CFX_DIBitmap, %class.CFX_DIBitmap* %29, i64 0, i32 0, i32 0
  %38 = bitcast %class.CFX_DIBitmap* %29 to void (%"class.fxcrt::Retainable"*)***
  %39 = load void (%"class.fxcrt::Retainable"*)**, void (%"class.fxcrt::Retainable"*)*** %38, align 8
  %40 = getelementptr inbounds void (%"class.fxcrt::Retainable"*)*, void (%"class.fxcrt::Retainable"*)** %39, i64 1
  %41 = load void (%"class.fxcrt::Retainable"*)*, void (%"class.fxcrt::Retainable"*)** %40, align 8
  tail call void %41(%"class.fxcrt::Retainable"* nonnull %37) #6
  br label %42

42:                                               ; preds = %11, %28, %31, %36
  %43 = getelementptr inbounds %class.CFX_BitmapComposer, %class.CFX_BitmapComposer* %0, i64 0, i32 2, i32 0
  store %class.CFX_ClipRgn* %2, %class.CFX_ClipRgn** %43, align 8
  %44 = getelementptr inbounds %struct.FX_RECT, %struct.FX_RECT* %5, i64 0, i32 0
  %45 = load i32, i32* %44, align 4
  %46 = getelementptr inbounds %class.CFX_BitmapComposer, %class.CFX_BitmapComposer* %0, i64 0, i32 4
  store i32 %45, i32* %46, align 4
  %47 = getelementptr inbounds %struct.FX_RECT, %struct.FX_RECT* %5, i64 0, i32 1
  %48 = load i32, i32* %47, align 4
  %49 = getelementptr inbounds %class.CFX_BitmapComposer, %class.CFX_BitmapComposer* %0, i64 0, i32 5
  store i32 %48, i32* %49, align 8
  %50 = getelementptr inbounds %struct.FX_RECT, %struct.FX_RECT* %5, i64 0, i32 2
  %51 = load i32, i32* %50, align 4
  %52 = load i32, i32* %44, align 4
  %53 = sub nsw i32 %51, %52
  %54 = getelementptr inbounds %class.CFX_BitmapComposer, %class.CFX_BitmapComposer* %0, i64 0, i32 6
  store i32 %53, i32* %54, align 4
  %55 = getelementptr inbounds %struct.FX_RECT, %struct.FX_RECT* %5, i64 0, i32 3
  %56 = load i32, i32* %55, align 4
  %57 = load i32, i32* %47, align 4
  %58 = sub nsw i32 %56, %57
  %59 = getelementptr inbounds %class.CFX_BitmapComposer, %class.CFX_BitmapComposer* %0, i64 0, i32 7
  store i32 %58, i32* %59, align 8
  %60 = getelementptr inbounds %class.CFX_BitmapComposer, %class.CFX_BitmapComposer* %0, i64 0, i32 8
  store i32 %3, i32* %60, align 4
  %61 = getelementptr inbounds %class.CFX_BitmapComposer, %class.CFX_BitmapComposer* %0, i64 0, i32 9
  store i32 %4, i32* %61, align 8
  %62 = getelementptr inbounds %class.CFX_BitmapComposer, %class.CFX_BitmapComposer* %0, i64 0, i32 10
  %63 = getelementptr inbounds %"class.fxcrt::RetainPtr", %"class.fxcrt::RetainPtr"* %62, i64 0, i32 0, i32 0, i32 0, i32 0
  %64 = load %class.CFX_DIBitmap*, %class.CFX_DIBitmap** %63, align 8
  store %class.CFX_DIBitmap* null, %class.CFX_DIBitmap** %63, align 8
  %65 = icmp eq %class.CFX_DIBitmap* %64, null
  br i1 %65, label %77, label %66

66:                                               ; preds = %42
  %67 = getelementptr inbounds %class.CFX_DIBitmap, %class.CFX_DIBitmap* %64, i64 0, i32 0, i32 0, i32 1
  %68 = load i64, i64* %67, align 8
  %69 = add nsw i64 %68, -1
  store i64 %69, i64* %67, align 8
  %70 = icmp eq i64 %69, 0
  br i1 %70, label %71, label %77

71:                                               ; preds = %66
  %72 = getelementptr inbounds %class.CFX_DIBitmap, %class.CFX_DIBitmap* %64, i64 0, i32 0, i32 0
  %73 = bitcast %class.CFX_DIBitmap* %64 to void (%"class.fxcrt::Retainable"*)***
  %74 = load void (%"class.fxcrt::Retainable"*)**, void (%"class.fxcrt::Retainable"*)*** %73, align 8
  %75 = getelementptr inbounds void (%"class.fxcrt::Retainable"*)*, void (%"class.fxcrt::Retainable"*)** %74, i64 1
  %76 = load void (%"class.fxcrt::Retainable"*)*, void (%"class.fxcrt::Retainable"*)** %75, align 8
  tail call void %76(%"class.fxcrt::Retainable"* nonnull %72) #6
  br label %77

77:                                               ; preds = %42, %66, %71
  %78 = icmp eq %class.CFX_ClipRgn* %2, null
  br i1 %78, label %107, label %79

79:                                               ; preds = %77
  %80 = getelementptr inbounds %class.CFX_ClipRgn, %class.CFX_ClipRgn* %2, i64 0, i32 0
  %81 = load i8, i8* %80, align 8, !range !2
  %82 = icmp eq i8 %81, 0
  br i1 %82, label %107, label %83

83:                                               ; preds = %79
  %84 = getelementptr inbounds %class.CFX_ClipRgn, %class.CFX_ClipRgn* %2, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0
  %85 = load %class.CFX_DIBitmap*, %class.CFX_DIBitmap** %84, align 8, !noalias !3
  %86 = ptrtoint %class.CFX_DIBitmap* %85 to i64
  %87 = icmp eq %class.CFX_DIBitmap* %85, null
  br i1 %87, label %92, label %88

88:                                               ; preds = %83
  %89 = getelementptr inbounds %class.CFX_DIBitmap, %class.CFX_DIBitmap* %85, i64 0, i32 0, i32 0, i32 1
  %90 = load i64, i64* %89, align 8, !noalias !3
  %91 = add nsw i64 %90, 1
  store i64 %91, i64* %89, align 8, !noalias !3
  br label %92

92:                                               ; preds = %83, %88
  %93 = load %class.CFX_DIBitmap*, %class.CFX_DIBitmap** %63, align 8
  %94 = bitcast %"class.fxcrt::RetainPtr"* %62 to i64*
  store i64 %86, i64* %94, align 8
  %95 = icmp eq %class.CFX_DIBitmap* %93, null
  br i1 %95, label %107, label %96

96:                                               ; preds = %92
  %97 = getelementptr inbounds %class.CFX_DIBitmap, %class.CFX_DIBitmap* %93, i64 0, i32 0, i32 0, i32 1
  %98 = load i64, i64* %97, align 8
  %99 = add nsw i64 %98, -1
  store i64 %99, i64* %97, align 8
  %100 = icmp eq i64 %99, 0
  br i1 %100, label %101, label %107

101:                                              ; preds = %96
  %102 = getelementptr inbounds %class.CFX_DIBitmap, %class.CFX_DIBitmap* %93, i64 0, i32 0, i32 0
  %103 = bitcast %class.CFX_DIBitmap* %93 to void (%"class.fxcrt::Retainable"*)***
  %104 = load void (%"class.fxcrt::Retainable"*)**, void (%"class.fxcrt::Retainable"*)*** %103, align 8
  %105 = getelementptr inbounds void (%"class.fxcrt::Retainable"*)*, void (%"class.fxcrt::Retainable"*)** %104, i64 1
  %106 = load void (%"class.fxcrt::Retainable"*)*, void (%"class.fxcrt::Retainable"*)** %105, align 8
  tail call void %106(%"class.fxcrt::Retainable"* nonnull %102) #6
  br label %107

107:                                              ; preds = %79, %92, %96, %101, %77
  %108 = getelementptr inbounds %class.CFX_BitmapComposer, %class.CFX_BitmapComposer* %0, i64 0, i32 12
  store i8 %12, i8* %108, align 8
  %109 = getelementptr inbounds %class.CFX_BitmapComposer, %class.CFX_BitmapComposer* %0, i64 0, i32 13
  store i8 %13, i8* %109, align 1
  %110 = getelementptr inbounds %class.CFX_BitmapComposer, %class.CFX_BitmapComposer* %0, i64 0, i32 14
  store i8 %14, i8* %110, align 2
  %111 = getelementptr inbounds %class.CFX_BitmapComposer, %class.CFX_BitmapComposer* %0, i64 0, i32 15
  store i8 %15, i8* %111, align 1
  %112 = getelementptr inbounds %class.CFX_BitmapComposer, %class.CFX_BitmapComposer* %0, i64 0, i32 16
  store i32 %10, i32* %112, align 4
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN18CFX_BitmapComposer7SetInfoEii12FXDIB_FormatN6pdfium4spanIKjEE(%class.CFX_BitmapComposer*, i32, i32, i16 zeroext, %"class.pdfium::span"* nocapture readonly) unnamed_addr #0 align 2 {
  %6 = alloca %"class.pdfium::span", align 8
  %7 = getelementptr inbounds %class.CFX_BitmapComposer, %class.CFX_BitmapComposer* %0, i64 0, i32 3
  store i16 %3, i16* %7, align 8
  %8 = getelementptr inbounds %class.CFX_BitmapComposer, %class.CFX_BitmapComposer* %0, i64 0, i32 11
  %9 = getelementptr inbounds %class.CFX_BitmapComposer, %class.CFX_BitmapComposer* %0, i64 0, i32 1, i32 0, i32 0, i32 0, i32 0
  %10 = load %class.CFX_DIBitmap*, %class.CFX_DIBitmap** %9, align 8
  %11 = getelementptr inbounds %class.CFX_DIBitmap, %class.CFX_DIBitmap* %10, i64 0, i32 0, i32 1
  %12 = load i16, i16* %11, align 8
  %13 = bitcast %"class.pdfium::span"* %6 to i8*
  %14 = bitcast %"class.pdfium::span"* %4 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %13, i8* align 8 %14, i64 16, i1 false)
  %15 = getelementptr inbounds %class.CFX_BitmapComposer, %class.CFX_BitmapComposer* %0, i64 0, i32 9
  %16 = load i32, i32* %15, align 8
  %17 = getelementptr inbounds %class.CFX_BitmapComposer, %class.CFX_BitmapComposer* %0, i64 0, i32 16
  %18 = load i32, i32* %17, align 4
  %19 = getelementptr inbounds %class.CFX_BitmapComposer, %class.CFX_BitmapComposer* %0, i64 0, i32 10, i32 0, i32 0, i32 0, i32 0
  %20 = load %class.CFX_DIBitmap*, %class.CFX_DIBitmap** %19, align 8
  %21 = icmp eq %class.CFX_DIBitmap* %20, null
  br i1 %21, label %22, label %26

22:                                               ; preds = %5
  %23 = getelementptr inbounds %class.CFX_BitmapComposer, %class.CFX_BitmapComposer* %0, i64 0, i32 8
  %24 = load i32, i32* %23, align 4
  %25 = icmp slt i32 %24, 255
  br label %26

26:                                               ; preds = %5, %22
  %27 = phi i1 [ true, %5 ], [ %25, %22 ]
  %28 = getelementptr inbounds %class.CFX_BitmapComposer, %class.CFX_BitmapComposer* %0, i64 0, i32 15
  %29 = load i8, i8* %28, align 1, !range !2
  %30 = icmp ne i8 %29, 0
  %31 = call zeroext i1 @_ZN22CFX_ScanlineCompositor4InitE12FXDIB_FormatS0_iN6pdfium4spanIKjEEj9BlendModebb(%class.CFX_ScanlineCompositor* %8, i16 zeroext %12, i16 zeroext %3, i32 %1, %"class.pdfium::span"* nonnull %6, i32 %16, i32 %18, i1 zeroext %27, i1 zeroext %30) #6
  br i1 %31, label %32, label %134

32:                                               ; preds = %26
  %33 = getelementptr inbounds %class.CFX_BitmapComposer, %class.CFX_BitmapComposer* %0, i64 0, i32 12
  %34 = load i8, i8* %33, align 8, !range !2
  %35 = icmp eq i8 %34, 0
  br i1 %35, label %106, label %36

36:                                               ; preds = %32
  %37 = getelementptr inbounds %class.CFX_BitmapComposer, %class.CFX_BitmapComposer* %0, i64 0, i32 17
  %38 = load %class.CFX_DIBitmap*, %class.CFX_DIBitmap** %9, align 8
  %39 = getelementptr inbounds %class.CFX_DIBitmap, %class.CFX_DIBitmap* %38, i64 0, i32 0, i32 1
  %40 = load i16, i16* %39, align 8
  %41 = lshr i16 %40, 3
  %42 = and i16 %41, 31
  %43 = zext i16 %42 to i32
  %44 = mul nsw i32 %43, %1
  %45 = add nsw i32 %44, 4
  %46 = sext i32 %45 to i64
  %47 = getelementptr inbounds %class.CFX_BitmapComposer, %class.CFX_BitmapComposer* %0, i64 0, i32 17, i32 0, i32 1
  %48 = bitcast i8** %47 to i64*
  %49 = load i64, i64* %48, align 8
  %50 = bitcast %"class.std::__1::vector"* %37 to i64*
  %51 = load i64, i64* %50, align 8
  %52 = sub i64 %49, %51
  %53 = icmp ult i64 %52, %46
  %54 = inttoptr i64 %51 to i8*
  br i1 %53, label %55, label %58

55:                                               ; preds = %36
  %56 = sub i64 %46, %52
  call void @_ZNSt3__16vectorIh16FxAllocAllocatorIhEE8__appendEm(%"class.std::__1::vector"* %37, i64 %56) #6
  %57 = load %class.CFX_DIBitmap*, %class.CFX_DIBitmap** %9, align 8
  br label %62

58:                                               ; preds = %36
  %59 = icmp ugt i64 %52, %46
  br i1 %59, label %60, label %62

60:                                               ; preds = %58
  %61 = getelementptr inbounds i8, i8* %54, i64 %46
  store i8* %61, i8** %47, align 8
  br label %62

62:                                               ; preds = %55, %58, %60
  %63 = phi %class.CFX_DIBitmap* [ %57, %55 ], [ %38, %58 ], [ %38, %60 ]
  %64 = getelementptr inbounds %class.CFX_BitmapComposer, %class.CFX_BitmapComposer* %0, i64 0, i32 18
  %65 = getelementptr inbounds %class.CFX_DIBitmap, %class.CFX_DIBitmap* %63, i64 0, i32 0, i32 3
  %66 = load i32, i32* %65, align 8
  %67 = sext i32 %66 to i64
  %68 = getelementptr inbounds %class.CFX_BitmapComposer, %class.CFX_BitmapComposer* %0, i64 0, i32 18, i32 0, i32 1
  %69 = bitcast i8** %68 to i64*
  %70 = load i64, i64* %69, align 8
  %71 = bitcast %"class.std::__1::vector"* %64 to i64*
  %72 = load i64, i64* %71, align 8
  %73 = sub i64 %70, %72
  %74 = icmp ult i64 %73, %67
  %75 = inttoptr i64 %72 to i8*
  br i1 %74, label %76, label %79

76:                                               ; preds = %62
  %77 = sub i64 %67, %73
  call void @_ZNSt3__16vectorIh16FxAllocAllocatorIhEE8__appendEm(%"class.std::__1::vector"* %64, i64 %77) #6
  %78 = load %class.CFX_DIBitmap*, %class.CFX_DIBitmap** %9, align 8
  br label %83

79:                                               ; preds = %62
  %80 = icmp ugt i64 %73, %67
  br i1 %80, label %81, label %83

81:                                               ; preds = %79
  %82 = getelementptr inbounds i8, i8* %75, i64 %67
  store i8* %82, i8** %68, align 8
  br label %83

83:                                               ; preds = %76, %79, %81
  %84 = phi %class.CFX_DIBitmap* [ %78, %76 ], [ %63, %79 ], [ %63, %81 ]
  %85 = getelementptr inbounds %class.CFX_DIBitmap, %class.CFX_DIBitmap* %84, i64 0, i32 0, i32 5, i32 0, i32 0, i32 0, i32 0
  %86 = load %class.CFX_DIBitmap*, %class.CFX_DIBitmap** %85, align 8
  %87 = icmp eq %class.CFX_DIBitmap* %86, null
  br i1 %87, label %106, label %88

88:                                               ; preds = %83
  %89 = getelementptr inbounds %class.CFX_BitmapComposer, %class.CFX_BitmapComposer* %0, i64 0, i32 20
  %90 = add nsw i32 %1, 4
  %91 = sext i32 %90 to i64
  %92 = getelementptr inbounds %class.CFX_BitmapComposer, %class.CFX_BitmapComposer* %0, i64 0, i32 20, i32 0, i32 1
  %93 = bitcast i8** %92 to i64*
  %94 = load i64, i64* %93, align 8
  %95 = bitcast %"class.std::__1::vector"* %89 to i64*
  %96 = load i64, i64* %95, align 8
  %97 = sub i64 %94, %96
  %98 = icmp ult i64 %97, %91
  %99 = inttoptr i64 %96 to i8*
  br i1 %98, label %100, label %102

100:                                              ; preds = %88
  %101 = sub i64 %91, %97
  call void @_ZNSt3__16vectorIh16FxAllocAllocatorIhEE8__appendEm(%"class.std::__1::vector"* %89, i64 %101) #6
  br label %106

102:                                              ; preds = %88
  %103 = icmp ugt i64 %97, %91
  br i1 %103, label %104, label %106

104:                                              ; preds = %102
  %105 = getelementptr inbounds i8, i8* %99, i64 %91
  store i8* %105, i8** %92, align 8
  br label %106

106:                                              ; preds = %83, %104, %102, %100, %32
  %107 = getelementptr inbounds %class.CFX_BitmapComposer, %class.CFX_BitmapComposer* %0, i64 0, i32 8
  %108 = load i32, i32* %107, align 4
  %109 = icmp slt i32 %108, 255
  br i1 %109, label %110, label %134

110:                                              ; preds = %106
  %111 = getelementptr inbounds %class.CFX_BitmapComposer, %class.CFX_BitmapComposer* %0, i64 0, i32 19
  %112 = load i8, i8* %33, align 8, !range !2
  %113 = icmp eq i8 %112, 0
  %114 = load %class.CFX_DIBitmap*, %class.CFX_DIBitmap** %9, align 8
  %115 = getelementptr inbounds %class.CFX_DIBitmap, %class.CFX_DIBitmap* %114, i64 0, i32 0, i32 3
  %116 = getelementptr inbounds %class.CFX_DIBitmap, %class.CFX_DIBitmap* %114, i64 0, i32 0, i32 2
  %117 = select i1 %113, i32* %116, i32* %115
  %118 = load i32, i32* %117, align 4
  %119 = sext i32 %118 to i64
  %120 = getelementptr inbounds %class.CFX_BitmapComposer, %class.CFX_BitmapComposer* %0, i64 0, i32 19, i32 0, i32 1
  %121 = bitcast i8** %120 to i64*
  %122 = load i64, i64* %121, align 8
  %123 = bitcast %"class.std::__1::vector"* %111 to i64*
  %124 = load i64, i64* %123, align 8
  %125 = sub i64 %122, %124
  %126 = icmp ult i64 %125, %119
  %127 = inttoptr i64 %124 to i8*
  br i1 %126, label %128, label %130

128:                                              ; preds = %110
  %129 = sub i64 %119, %125
  call void @_ZNSt3__16vectorIh16FxAllocAllocatorIhEE8__appendEm(%"class.std::__1::vector"* %111, i64 %129) #6
  br label %134

130:                                              ; preds = %110
  %131 = icmp ugt i64 %125, %119
  br i1 %131, label %132, label %134

132:                                              ; preds = %130
  %133 = getelementptr inbounds i8, i8* %127, i64 %119
  store i8* %133, i8** %120, align 8
  br label %134

134:                                              ; preds = %132, %130, %128, %106, %26
  %135 = phi i1 [ false, %26 ], [ true, %106 ], [ true, %128 ], [ true, %130 ], [ true, %132 ]
  ret i1 %135
}

declare zeroext i1 @_ZN22CFX_ScanlineCompositor4InitE12FXDIB_FormatS0_iN6pdfium4spanIKjEEj9BlendModebb(%class.CFX_ScanlineCompositor*, i16 zeroext, i16 zeroext, i32, %"class.pdfium::span"*, i32, i32, i1 zeroext, i1 zeroext) local_unnamed_addr #1

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #4

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN18CFX_BitmapComposer9DoComposeEPhPKhiS2_S2_S0_(%class.CFX_BitmapComposer*, i8*, i8*, i32, i8*, i8*, i8*) local_unnamed_addr #0 align 2 {
  %8 = getelementptr inbounds %class.CFX_BitmapComposer, %class.CFX_BitmapComposer* %0, i64 0, i32 19, i32 0, i32 0
  %9 = load i8*, i8** %8, align 8
  %10 = getelementptr inbounds %class.CFX_BitmapComposer, %class.CFX_BitmapComposer* %0, i64 0, i32 8
  %11 = load i32, i32* %10, align 4
  %12 = icmp slt i32 %11, 255
  br i1 %12, label %13, label %69

13:                                               ; preds = %7
  %14 = icmp eq i8* %4, null
  br i1 %14, label %54, label %15

15:                                               ; preds = %13
  %16 = icmp sgt i32 %3, 0
  br i1 %16, label %17, label %69

17:                                               ; preds = %15
  %18 = load i8, i8* %4, align 1
  %19 = zext i8 %18 to i32
  %20 = mul nsw i32 %11, %19
  %21 = sdiv i32 %20, 255
  %22 = trunc i32 %21 to i8
  store i8 %22, i8* %9, align 1
  %23 = icmp eq i32 %3, 1
  br i1 %23, label %69, label %24

24:                                               ; preds = %17
  %25 = zext i32 %3 to i64
  %26 = add nsw i64 %25, -1
  %27 = and i64 %26, 1
  %28 = icmp eq i32 %3, 2
  br i1 %28, label %57, label %29

29:                                               ; preds = %24
  %30 = sub nsw i64 %26, %27
  br label %31

31:                                               ; preds = %31, %29
  %32 = phi i64 [ 1, %29 ], [ %51, %31 ]
  %33 = phi i64 [ %30, %29 ], [ %52, %31 ]
  %34 = load i32, i32* %10, align 4
  %35 = getelementptr inbounds i8, i8* %4, i64 %32
  %36 = load i8, i8* %35, align 1
  %37 = zext i8 %36 to i32
  %38 = mul nsw i32 %34, %37
  %39 = sdiv i32 %38, 255
  %40 = trunc i32 %39 to i8
  %41 = getelementptr inbounds i8, i8* %9, i64 %32
  store i8 %40, i8* %41, align 1
  %42 = add nuw nsw i64 %32, 1
  %43 = load i32, i32* %10, align 4
  %44 = getelementptr inbounds i8, i8* %4, i64 %42
  %45 = load i8, i8* %44, align 1
  %46 = zext i8 %45 to i32
  %47 = mul nsw i32 %43, %46
  %48 = sdiv i32 %47, 255
  %49 = trunc i32 %48 to i8
  %50 = getelementptr inbounds i8, i8* %9, i64 %42
  store i8 %49, i8* %50, align 1
  %51 = add nuw nsw i64 %32, 2
  %52 = add i64 %33, -2
  %53 = icmp eq i64 %52, 0
  br i1 %53, label %57, label %31

54:                                               ; preds = %13
  %55 = trunc i32 %11 to i8
  %56 = sext i32 %3 to i64
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %9, i8 %55, i64 %56, i1 false)
  br label %69

57:                                               ; preds = %31, %24
  %58 = phi i64 [ 1, %24 ], [ %51, %31 ]
  %59 = icmp eq i64 %27, 0
  br i1 %59, label %69, label %60

60:                                               ; preds = %57
  %61 = load i32, i32* %10, align 4
  %62 = getelementptr inbounds i8, i8* %4, i64 %58
  %63 = load i8, i8* %62, align 1
  %64 = zext i8 %63 to i32
  %65 = mul nsw i32 %61, %64
  %66 = sdiv i32 %65, 255
  %67 = trunc i32 %66 to i8
  %68 = getelementptr inbounds i8, i8* %9, i64 %58
  store i8 %67, i8* %68, align 1
  br label %69

69:                                               ; preds = %60, %57, %17, %15, %54, %7
  %70 = phi i8* [ %4, %7 ], [ %9, %54 ], [ %9, %15 ], [ %9, %17 ], [ %9, %57 ], [ %9, %60 ]
  %71 = getelementptr inbounds %class.CFX_BitmapComposer, %class.CFX_BitmapComposer* %0, i64 0, i32 3
  %72 = load i16, i16* %71, align 8
  %73 = icmp eq i16 %72, 264
  br i1 %73, label %74, label %76

74:                                               ; preds = %69
  %75 = getelementptr inbounds %class.CFX_BitmapComposer, %class.CFX_BitmapComposer* %0, i64 0, i32 11
  tail call void @_ZN22CFX_ScanlineCompositor21CompositeByteMaskLineEPhPKhiS2_S0_(%class.CFX_ScanlineCompositor* %75, i8* %1, i8* %2, i32 %3, i8* %70, i8* %6) #6
  br label %82

76:                                               ; preds = %69
  %77 = and i16 %72, 255
  %78 = icmp eq i16 %77, 8
  %79 = getelementptr inbounds %class.CFX_BitmapComposer, %class.CFX_BitmapComposer* %0, i64 0, i32 11
  br i1 %78, label %80, label %81

80:                                               ; preds = %76
  tail call void @_ZN22CFX_ScanlineCompositor22CompositePalBitmapLineEPhPKhiiS2_S2_S0_(%class.CFX_ScanlineCompositor* %79, i8* %1, i8* %2, i32 0, i32 %3, i8* %70, i8* %5, i8* %6) #6
  br label %82

81:                                               ; preds = %76
  tail call void @_ZN22CFX_ScanlineCompositor22CompositeRgbBitmapLineEPhPKhiS2_S2_S0_(%class.CFX_ScanlineCompositor* %79, i8* %1, i8* %2, i32 %3, i8* %70, i8* %5, i8* %6) #6
  br label %82

82:                                               ; preds = %80, %81, %74
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #4

declare void @_ZN22CFX_ScanlineCompositor21CompositeByteMaskLineEPhPKhiS2_S0_(%class.CFX_ScanlineCompositor*, i8*, i8*, i32, i8*, i8*) local_unnamed_addr #1

declare void @_ZN22CFX_ScanlineCompositor22CompositePalBitmapLineEPhPKhiiS2_S2_S0_(%class.CFX_ScanlineCompositor*, i8*, i8*, i32, i32, i8*, i8*, i8*) local_unnamed_addr #1

declare void @_ZN22CFX_ScanlineCompositor22CompositeRgbBitmapLineEPhPKhiS2_S2_S0_(%class.CFX_ScanlineCompositor*, i8*, i8*, i32, i8*, i8*, i8*) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN18CFX_BitmapComposer15ComposeScanlineEiPKhS1_(%class.CFX_BitmapComposer*, i32, i8*, i8*) unnamed_addr #0 align 2 {
  %5 = getelementptr inbounds %class.CFX_BitmapComposer, %class.CFX_BitmapComposer* %0, i64 0, i32 12
  %6 = load i8, i8* %5, align 8, !range !2
  %7 = icmp eq i8 %6, 0
  br i1 %7, label %9, label %8

8:                                                ; preds = %4
  tail call void @_ZN18CFX_BitmapComposer16ComposeScanlineVEiPKhS1_(%class.CFX_BitmapComposer* %0, i32 %1, i8* %2, i8* %3)
  br label %88

9:                                                ; preds = %4
  %10 = getelementptr inbounds %class.CFX_BitmapComposer, %class.CFX_BitmapComposer* %0, i64 0, i32 10, i32 0, i32 0, i32 0, i32 0
  %11 = load %class.CFX_DIBitmap*, %class.CFX_DIBitmap** %10, align 8
  %12 = icmp eq %class.CFX_DIBitmap* %11, null
  br i1 %12, label %13, label %17

13:                                               ; preds = %9
  %14 = getelementptr inbounds %class.CFX_BitmapComposer, %class.CFX_BitmapComposer* %0, i64 0, i32 5
  %15 = load i32, i32* %14, align 8
  %16 = add nsw i32 %15, %1
  br label %44

17:                                               ; preds = %9
  %18 = bitcast %class.CFX_DIBitmap* %11 to i8* (%class.CFX_DIBitmap*)***
  %19 = load i8* (%class.CFX_DIBitmap*)**, i8* (%class.CFX_DIBitmap*)*** %18, align 8
  %20 = getelementptr inbounds i8* (%class.CFX_DIBitmap*)*, i8* (%class.CFX_DIBitmap*)** %19, i64 2
  %21 = load i8* (%class.CFX_DIBitmap*)*, i8* (%class.CFX_DIBitmap*)** %20, align 8
  %22 = tail call i8* %21(%class.CFX_DIBitmap* nonnull %11) #6
  %23 = getelementptr inbounds %class.CFX_BitmapComposer, %class.CFX_BitmapComposer* %0, i64 0, i32 5
  %24 = load i32, i32* %23, align 8
  %25 = add nsw i32 %24, %1
  %26 = getelementptr inbounds %class.CFX_BitmapComposer, %class.CFX_BitmapComposer* %0, i64 0, i32 2, i32 0
  %27 = load %class.CFX_ClipRgn*, %class.CFX_ClipRgn** %26, align 8
  %28 = getelementptr inbounds %class.CFX_ClipRgn, %class.CFX_ClipRgn* %27, i64 0, i32 1, i32 1
  %29 = load i32, i32* %28, align 4
  %30 = sub i32 %25, %29
  %31 = load %class.CFX_DIBitmap*, %class.CFX_DIBitmap** %10, align 8
  %32 = getelementptr inbounds %class.CFX_DIBitmap, %class.CFX_DIBitmap* %31, i64 0, i32 0, i32 4
  %33 = load i32, i32* %32, align 4
  %34 = mul i32 %33, %30
  %35 = zext i32 %34 to i64
  %36 = getelementptr inbounds i8, i8* %22, i64 %35
  %37 = getelementptr inbounds %class.CFX_BitmapComposer, %class.CFX_BitmapComposer* %0, i64 0, i32 4
  %38 = load i32, i32* %37, align 4
  %39 = getelementptr inbounds %class.CFX_ClipRgn, %class.CFX_ClipRgn* %27, i64 0, i32 1, i32 0
  %40 = load i32, i32* %39, align 4
  %41 = sub nsw i32 %38, %40
  %42 = sext i32 %41 to i64
  %43 = getelementptr inbounds i8, i8* %36, i64 %42
  br label %44

44:                                               ; preds = %13, %17
  %45 = phi i32 [ %16, %13 ], [ %25, %17 ]
  %46 = phi i8* [ null, %13 ], [ %43, %17 ]
  %47 = getelementptr inbounds %class.CFX_BitmapComposer, %class.CFX_BitmapComposer* %0, i64 0, i32 1, i32 0, i32 0, i32 0, i32 0
  %48 = load %class.CFX_DIBitmap*, %class.CFX_DIBitmap** %47, align 8
  %49 = getelementptr inbounds %class.CFX_DIBitmap, %class.CFX_DIBitmap* %48, i64 0, i32 0
  %50 = getelementptr inbounds %class.CFX_BitmapComposer, %class.CFX_BitmapComposer* %0, i64 0, i32 5
  %51 = bitcast %class.CFX_DIBitmap* %48 to i8* (%class.CFX_DIBBase*, i32)***
  %52 = load i8* (%class.CFX_DIBBase*, i32)**, i8* (%class.CFX_DIBBase*, i32)*** %51, align 8
  %53 = getelementptr inbounds i8* (%class.CFX_DIBBase*, i32)*, i8* (%class.CFX_DIBBase*, i32)** %52, i64 3
  %54 = load i8* (%class.CFX_DIBBase*, i32)*, i8* (%class.CFX_DIBBase*, i32)** %53, align 8
  %55 = tail call i8* %54(%class.CFX_DIBBase* %49, i32 %45) #6
  %56 = icmp eq i8* %55, null
  br i1 %56, label %57, label %59

57:                                               ; preds = %44
  %58 = load %class.CFX_DIBitmap*, %class.CFX_DIBitmap** %47, align 8
  br label %71

59:                                               ; preds = %44
  %60 = getelementptr inbounds %class.CFX_BitmapComposer, %class.CFX_BitmapComposer* %0, i64 0, i32 4
  %61 = load i32, i32* %60, align 4
  %62 = load %class.CFX_DIBitmap*, %class.CFX_DIBitmap** %47, align 8
  %63 = getelementptr inbounds %class.CFX_DIBitmap, %class.CFX_DIBitmap* %62, i64 0, i32 0, i32 1
  %64 = load i16, i16* %63, align 8
  %65 = and i16 %64, 255
  %66 = zext i16 %65 to i32
  %67 = mul nsw i32 %61, %66
  %68 = sdiv i32 %67, 8
  %69 = sext i32 %68 to i64
  %70 = getelementptr inbounds i8, i8* %55, i64 %69
  br label %71

71:                                               ; preds = %57, %59
  %72 = phi %class.CFX_DIBitmap* [ %62, %59 ], [ %58, %57 ]
  %73 = phi i8* [ %70, %59 ], [ null, %57 ]
  %74 = getelementptr inbounds %class.CFX_DIBitmap, %class.CFX_DIBitmap* %72, i64 0, i32 0
  %75 = load i32, i32* %50, align 8
  %76 = add nsw i32 %75, %1
  %77 = tail call i8* @_ZN11CFX_DIBBase28GetWritableAlphaMaskScanlineEi(%class.CFX_DIBBase* %74, i32 %76) #6
  %78 = icmp eq i8* %77, null
  br i1 %78, label %84, label %79

79:                                               ; preds = %71
  %80 = getelementptr inbounds %class.CFX_BitmapComposer, %class.CFX_BitmapComposer* %0, i64 0, i32 4
  %81 = load i32, i32* %80, align 4
  %82 = sext i32 %81 to i64
  %83 = getelementptr inbounds i8, i8* %77, i64 %82
  br label %84

84:                                               ; preds = %71, %79
  %85 = phi i8* [ %83, %79 ], [ null, %71 ]
  %86 = getelementptr inbounds %class.CFX_BitmapComposer, %class.CFX_BitmapComposer* %0, i64 0, i32 6
  %87 = load i32, i32* %86, align 4
  tail call void @_ZN18CFX_BitmapComposer9DoComposeEPhPKhiS2_S2_S0_(%class.CFX_BitmapComposer* %0, i8* %73, i8* %2, i32 %87, i8* %46, i8* %3, i8* %85)
  br label %88

88:                                               ; preds = %84, %8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN18CFX_BitmapComposer16ComposeScanlineVEiPKhS1_(%class.CFX_BitmapComposer*, i32, i8*, i8*) local_unnamed_addr #0 align 2 {
  %5 = getelementptr inbounds %class.CFX_BitmapComposer, %class.CFX_BitmapComposer* %0, i64 0, i32 1, i32 0, i32 0, i32 0, i32 0
  %6 = load %class.CFX_DIBitmap*, %class.CFX_DIBitmap** %5, align 8
  %7 = getelementptr inbounds %class.CFX_DIBitmap, %class.CFX_DIBitmap* %6, i64 0, i32 0
  %8 = getelementptr inbounds %class.CFX_DIBitmap, %class.CFX_DIBitmap* %6, i64 0, i32 0, i32 1
  %9 = load i16, i16* %8, align 8
  %10 = lshr i16 %9, 3
  %11 = and i16 %10, 31
  %12 = zext i16 %11 to i32
  %13 = getelementptr inbounds %class.CFX_DIBitmap, %class.CFX_DIBitmap* %6, i64 0, i32 0, i32 4
  %14 = load i32, i32* %13, align 4
  %15 = tail call i32 @_ZNK11CFX_DIBBase17GetAlphaMaskPitchEv(%class.CFX_DIBBase* %7) #6
  %16 = getelementptr inbounds %class.CFX_BitmapComposer, %class.CFX_BitmapComposer* %0, i64 0, i32 4
  %17 = load i32, i32* %16, align 4
  %18 = getelementptr inbounds %class.CFX_BitmapComposer, %class.CFX_BitmapComposer* %0, i64 0, i32 13
  %19 = load i8, i8* %18, align 1, !range !2
  %20 = icmp eq i8 %19, 0
  br i1 %20, label %26, label %21

21:                                               ; preds = %4
  %22 = getelementptr inbounds %class.CFX_BitmapComposer, %class.CFX_BitmapComposer* %0, i64 0, i32 6
  %23 = load i32, i32* %22, align 4
  %24 = xor i32 %1, -1
  %25 = add i32 %23, %24
  br label %26

26:                                               ; preds = %4, %21
  %27 = phi i32 [ %25, %21 ], [ %1, %4 ]
  %28 = add nsw i32 %27, %17
  %29 = load %class.CFX_DIBitmap*, %class.CFX_DIBitmap** %5, align 8
  %30 = bitcast %class.CFX_DIBitmap* %29 to i8* (%class.CFX_DIBitmap*)***
  %31 = load i8* (%class.CFX_DIBitmap*)**, i8* (%class.CFX_DIBitmap*)*** %30, align 8
  %32 = getelementptr inbounds i8* (%class.CFX_DIBitmap*)*, i8* (%class.CFX_DIBitmap*)** %31, i64 2
  %33 = load i8* (%class.CFX_DIBitmap*)*, i8* (%class.CFX_DIBitmap*)** %32, align 8
  %34 = tail call i8* %33(%class.CFX_DIBitmap* %29) #6
  %35 = icmp eq i8* %34, null
  br i1 %35, label %54, label %36

36:                                               ; preds = %26
  %37 = mul nsw i32 %28, %12
  %38 = getelementptr inbounds %class.CFX_BitmapComposer, %class.CFX_BitmapComposer* %0, i64 0, i32 5
  %39 = load i32, i32* %38, align 8
  %40 = mul nsw i32 %39, %14
  %41 = add nsw i32 %40, %37
  %42 = sext i32 %41 to i64
  %43 = getelementptr inbounds i8, i8* %34, i64 %42
  %44 = getelementptr inbounds %class.CFX_BitmapComposer, %class.CFX_BitmapComposer* %0, i64 0, i32 14
  %45 = load i8, i8* %44, align 2, !range !2
  %46 = icmp eq i8 %45, 0
  br i1 %46, label %54, label %47

47:                                               ; preds = %36
  %48 = getelementptr inbounds %class.CFX_BitmapComposer, %class.CFX_BitmapComposer* %0, i64 0, i32 7
  %49 = load i32, i32* %48, align 8
  %50 = add nsw i32 %49, -1
  %51 = mul nsw i32 %50, %14
  %52 = sext i32 %51 to i64
  %53 = getelementptr inbounds i8, i8* %43, i64 %52
  br label %54

54:                                               ; preds = %36, %26, %47
  %55 = phi i8* [ %53, %47 ], [ %43, %36 ], [ null, %26 ]
  %56 = load %class.CFX_DIBitmap*, %class.CFX_DIBitmap** %5, align 8
  %57 = getelementptr inbounds %class.CFX_DIBitmap, %class.CFX_DIBitmap* %56, i64 0, i32 0
  %58 = tail call i8* @_ZN11CFX_DIBBase18GetAlphaMaskBufferEv(%class.CFX_DIBBase* %57) #6
  %59 = icmp eq i8* %58, null
  br i1 %59, label %60, label %64

60:                                               ; preds = %54
  %61 = getelementptr inbounds %class.CFX_BitmapComposer, %class.CFX_BitmapComposer* %0, i64 0, i32 14
  %62 = load i8, i8* %61, align 2, !range !2
  %63 = icmp eq i8 %62, 0
  br label %81

64:                                               ; preds = %54
  %65 = getelementptr inbounds %class.CFX_BitmapComposer, %class.CFX_BitmapComposer* %0, i64 0, i32 5
  %66 = load i32, i32* %65, align 8
  %67 = mul nsw i32 %66, %15
  %68 = add nsw i32 %67, %28
  %69 = sext i32 %68 to i64
  %70 = getelementptr inbounds i8, i8* %58, i64 %69
  %71 = getelementptr inbounds %class.CFX_BitmapComposer, %class.CFX_BitmapComposer* %0, i64 0, i32 14
  %72 = load i8, i8* %71, align 2, !range !2
  %73 = icmp eq i8 %72, 0
  br i1 %73, label %81, label %74

74:                                               ; preds = %64
  %75 = getelementptr inbounds %class.CFX_BitmapComposer, %class.CFX_BitmapComposer* %0, i64 0, i32 7
  %76 = load i32, i32* %75, align 8
  %77 = add nsw i32 %76, -1
  %78 = mul nsw i32 %77, %15
  %79 = sext i32 %78 to i64
  %80 = getelementptr inbounds i8, i8* %70, i64 %79
  br label %81

81:                                               ; preds = %60, %64, %74
  %82 = phi i1 [ false, %74 ], [ true, %64 ], [ %63, %60 ]
  %83 = phi i8* [ %80, %74 ], [ %70, %64 ], [ null, %60 ]
  %84 = getelementptr inbounds %class.CFX_BitmapComposer, %class.CFX_BitmapComposer* %0, i64 0, i32 14
  %85 = sub nsw i32 0, %14
  %86 = sub nsw i32 0, %15
  %87 = select i1 %82, i32 %14, i32 %85
  %88 = select i1 %82, i32 %15, i32 %86
  %89 = getelementptr inbounds %class.CFX_BitmapComposer, %class.CFX_BitmapComposer* %0, i64 0, i32 17, i32 0, i32 0
  %90 = getelementptr inbounds %class.CFX_BitmapComposer, %class.CFX_BitmapComposer* %0, i64 0, i32 7
  %91 = load i32, i32* %90, align 8
  %92 = icmp sgt i32 %91, 0
  br i1 %92, label %93, label %109

93:                                               ; preds = %81
  %94 = load i8*, i8** %89, align 8
  %95 = icmp eq i16 %11, 0
  %96 = sext i32 %87 to i64
  %97 = zext i16 %11 to i64
  %98 = add nsw i64 %97, -1
  %99 = and i64 %97, 7
  %100 = icmp ult i64 %98, 7
  %101 = sub nsw i64 %97, %99
  %102 = icmp eq i64 %99, 0
  br label %103

103:                                              ; preds = %93, %135
  %104 = phi i32 [ %91, %93 ], [ %136, %135 ]
  %105 = phi i32 [ 0, %93 ], [ %139, %135 ]
  %106 = phi i8* [ %55, %93 ], [ %138, %135 ]
  %107 = phi i8* [ %94, %93 ], [ %137, %135 ]
  br i1 %95, label %135, label %108

108:                                              ; preds = %103
  br i1 %100, label %118, label %141

109:                                              ; preds = %135, %81
  %110 = phi i32 [ %91, %81 ], [ %136, %135 ]
  %111 = getelementptr inbounds %class.CFX_BitmapComposer, %class.CFX_BitmapComposer* %0, i64 0, i32 20, i32 0, i32 0
  %112 = icmp ne i8* %83, null
  %113 = icmp sgt i32 %110, 0
  %114 = and i1 %112, %113
  br i1 %114, label %115, label %189

115:                                              ; preds = %109
  %116 = load i8*, i8** %111, align 8
  %117 = sext i32 %88 to i64
  br label %179

118:                                              ; preds = %141, %108
  %119 = phi i8* [ undef, %108 ], [ %175, %141 ]
  %120 = phi i64 [ 0, %108 ], [ %176, %141 ]
  %121 = phi i8* [ %107, %108 ], [ %175, %141 ]
  br i1 %102, label %132, label %122

122:                                              ; preds = %118, %122
  %123 = phi i64 [ %129, %122 ], [ %120, %118 ]
  %124 = phi i8* [ %128, %122 ], [ %121, %118 ]
  %125 = phi i64 [ %130, %122 ], [ %99, %118 ]
  %126 = getelementptr inbounds i8, i8* %106, i64 %123
  %127 = load i8, i8* %126, align 1
  %128 = getelementptr inbounds i8, i8* %124, i64 1
  store i8 %127, i8* %124, align 1
  %129 = add nuw nsw i64 %123, 1
  %130 = add i64 %125, -1
  %131 = icmp eq i64 %130, 0
  br i1 %131, label %132, label %122, !llvm.loop !6

132:                                              ; preds = %122, %118
  %133 = phi i8* [ %119, %118 ], [ %128, %122 ]
  %134 = load i32, i32* %90, align 8
  br label %135

135:                                              ; preds = %132, %103
  %136 = phi i32 [ %104, %103 ], [ %134, %132 ]
  %137 = phi i8* [ %107, %103 ], [ %133, %132 ]
  %138 = getelementptr inbounds i8, i8* %106, i64 %96
  %139 = add nuw nsw i32 %105, 1
  %140 = icmp slt i32 %139, %136
  br i1 %140, label %103, label %109

141:                                              ; preds = %108, %141
  %142 = phi i64 [ %176, %141 ], [ 0, %108 ]
  %143 = phi i8* [ %175, %141 ], [ %107, %108 ]
  %144 = phi i64 [ %177, %141 ], [ %101, %108 ]
  %145 = getelementptr inbounds i8, i8* %106, i64 %142
  %146 = load i8, i8* %145, align 1
  %147 = getelementptr inbounds i8, i8* %143, i64 1
  store i8 %146, i8* %143, align 1
  %148 = or i64 %142, 1
  %149 = getelementptr inbounds i8, i8* %106, i64 %148
  %150 = load i8, i8* %149, align 1
  %151 = getelementptr inbounds i8, i8* %143, i64 2
  store i8 %150, i8* %147, align 1
  %152 = or i64 %142, 2
  %153 = getelementptr inbounds i8, i8* %106, i64 %152
  %154 = load i8, i8* %153, align 1
  %155 = getelementptr inbounds i8, i8* %143, i64 3
  store i8 %154, i8* %151, align 1
  %156 = or i64 %142, 3
  %157 = getelementptr inbounds i8, i8* %106, i64 %156
  %158 = load i8, i8* %157, align 1
  %159 = getelementptr inbounds i8, i8* %143, i64 4
  store i8 %158, i8* %155, align 1
  %160 = or i64 %142, 4
  %161 = getelementptr inbounds i8, i8* %106, i64 %160
  %162 = load i8, i8* %161, align 1
  %163 = getelementptr inbounds i8, i8* %143, i64 5
  store i8 %162, i8* %159, align 1
  %164 = or i64 %142, 5
  %165 = getelementptr inbounds i8, i8* %106, i64 %164
  %166 = load i8, i8* %165, align 1
  %167 = getelementptr inbounds i8, i8* %143, i64 6
  store i8 %166, i8* %163, align 1
  %168 = or i64 %142, 6
  %169 = getelementptr inbounds i8, i8* %106, i64 %168
  %170 = load i8, i8* %169, align 1
  %171 = getelementptr inbounds i8, i8* %143, i64 7
  store i8 %170, i8* %167, align 1
  %172 = or i64 %142, 7
  %173 = getelementptr inbounds i8, i8* %106, i64 %172
  %174 = load i8, i8* %173, align 1
  %175 = getelementptr inbounds i8, i8* %143, i64 8
  store i8 %174, i8* %171, align 1
  %176 = add nuw nsw i64 %142, 8
  %177 = add i64 %144, -8
  %178 = icmp eq i64 %177, 0
  br i1 %178, label %118, label %141, !llvm.loop !8

179:                                              ; preds = %115, %179
  %180 = phi i32 [ 0, %115 ], [ %186, %179 ]
  %181 = phi i8* [ %83, %115 ], [ %185, %179 ]
  %182 = phi i8* [ %116, %115 ], [ %184, %179 ]
  %183 = load i8, i8* %181, align 1
  %184 = getelementptr inbounds i8, i8* %182, i64 1
  store i8 %183, i8* %182, align 1
  %185 = getelementptr inbounds i8, i8* %181, i64 %117
  %186 = add nuw nsw i32 %180, 1
  %187 = load i32, i32* %90, align 8
  %188 = icmp slt i32 %186, %187
  br i1 %188, label %179, label %189

189:                                              ; preds = %179, %109
  %190 = phi i32 [ %110, %109 ], [ %187, %179 ]
  %191 = getelementptr inbounds %class.CFX_BitmapComposer, %class.CFX_BitmapComposer* %0, i64 0, i32 10, i32 0, i32 0, i32 0, i32 0
  %192 = load %class.CFX_DIBitmap*, %class.CFX_DIBitmap** %191, align 8
  %193 = icmp eq %class.CFX_DIBitmap* %192, null
  br i1 %193, label %244, label %194

194:                                              ; preds = %189
  %195 = getelementptr inbounds %class.CFX_BitmapComposer, %class.CFX_BitmapComposer* %0, i64 0, i32 18, i32 0, i32 0
  %196 = load i8*, i8** %195, align 8
  %197 = getelementptr inbounds %class.CFX_DIBitmap, %class.CFX_DIBitmap* %192, i64 0, i32 0, i32 4
  %198 = load i32, i32* %197, align 4
  %199 = bitcast %class.CFX_DIBitmap* %192 to i8* (%class.CFX_DIBitmap*)***
  %200 = load i8* (%class.CFX_DIBitmap*)**, i8* (%class.CFX_DIBitmap*)*** %199, align 8
  %201 = getelementptr inbounds i8* (%class.CFX_DIBitmap*)*, i8* (%class.CFX_DIBitmap*)** %200, i64 2
  %202 = load i8* (%class.CFX_DIBitmap*)*, i8* (%class.CFX_DIBitmap*)** %201, align 8
  %203 = tail call i8* %202(%class.CFX_DIBitmap* nonnull %192) #6
  %204 = getelementptr inbounds %class.CFX_BitmapComposer, %class.CFX_BitmapComposer* %0, i64 0, i32 5
  %205 = load i32, i32* %204, align 8
  %206 = getelementptr inbounds %class.CFX_BitmapComposer, %class.CFX_BitmapComposer* %0, i64 0, i32 2, i32 0
  %207 = load %class.CFX_ClipRgn*, %class.CFX_ClipRgn** %206, align 8
  %208 = getelementptr inbounds %class.CFX_ClipRgn, %class.CFX_ClipRgn* %207, i64 0, i32 1, i32 1
  %209 = load i32, i32* %208, align 4
  %210 = sub nsw i32 %205, %209
  %211 = mul nsw i32 %210, %198
  %212 = sext i32 %211 to i64
  %213 = getelementptr inbounds i8, i8* %203, i64 %212
  %214 = getelementptr inbounds %class.CFX_ClipRgn, %class.CFX_ClipRgn* %207, i64 0, i32 1, i32 0
  %215 = load i32, i32* %214, align 4
  %216 = sub nsw i32 %28, %215
  %217 = sext i32 %216 to i64
  %218 = getelementptr inbounds i8, i8* %213, i64 %217
  %219 = load i8, i8* %84, align 2, !range !2
  %220 = icmp eq i8 %219, 0
  %221 = load i32, i32* %90, align 8
  br i1 %220, label %228, label %222

222:                                              ; preds = %194
  %223 = add nsw i32 %221, -1
  %224 = mul nsw i32 %223, %198
  %225 = sext i32 %224 to i64
  %226 = getelementptr inbounds i8, i8* %218, i64 %225
  %227 = sub nsw i32 0, %198
  br label %228

228:                                              ; preds = %194, %222
  %229 = phi i32 [ %227, %222 ], [ %198, %194 ]
  %230 = phi i8* [ %226, %222 ], [ %218, %194 ]
  %231 = icmp sgt i32 %221, 0
  br i1 %231, label %232, label %244

232:                                              ; preds = %228
  %233 = sext i32 %229 to i64
  br label %234

234:                                              ; preds = %232, %234
  %235 = phi i64 [ 0, %232 ], [ %240, %234 ]
  %236 = phi i8* [ %230, %232 ], [ %239, %234 ]
  %237 = load i8, i8* %236, align 1
  %238 = getelementptr inbounds i8, i8* %196, i64 %235
  store i8 %237, i8* %238, align 1
  %239 = getelementptr inbounds i8, i8* %236, i64 %233
  %240 = add nuw nsw i64 %235, 1
  %241 = load i32, i32* %90, align 8
  %242 = sext i32 %241 to i64
  %243 = icmp slt i64 %240, %242
  br i1 %243, label %234, label %244

244:                                              ; preds = %234, %228, %189
  %245 = phi i32 [ %190, %189 ], [ %221, %228 ], [ %241, %234 ]
  %246 = phi i8* [ null, %189 ], [ %196, %228 ], [ %196, %234 ]
  %247 = load i8*, i8** %89, align 8
  %248 = load i8*, i8** %111, align 8
  tail call void @_ZN18CFX_BitmapComposer9DoComposeEPhPKhiS2_S2_S0_(%class.CFX_BitmapComposer* %0, i8* %247, i8* %2, i32 %245, i8* %246, i8* %3, i8* %248)
  %249 = load i32, i32* %90, align 8
  %250 = icmp sgt i32 %249, 0
  br i1 %250, label %251, label %267

251:                                              ; preds = %244
  %252 = load i8*, i8** %89, align 8
  %253 = icmp eq i16 %11, 0
  %254 = sext i32 %87 to i64
  %255 = zext i16 %11 to i64
  %256 = add nsw i64 %255, -1
  %257 = and i64 %255, 3
  %258 = icmp ult i64 %256, 3
  %259 = sub nsw i64 %255, %257
  %260 = icmp eq i64 %257, 0
  br label %261

261:                                              ; preds = %251, %291
  %262 = phi i32 [ %249, %251 ], [ %292, %291 ]
  %263 = phi i32 [ 0, %251 ], [ %295, %291 ]
  %264 = phi i8* [ %55, %251 ], [ %294, %291 ]
  %265 = phi i8* [ %252, %251 ], [ %293, %291 ]
  br i1 %253, label %291, label %266

266:                                              ; preds = %261
  br i1 %258, label %274, label %297

267:                                              ; preds = %291, %244
  %268 = phi i32 [ %249, %244 ], [ %292, %291 ]
  %269 = icmp sgt i32 %268, 0
  %270 = and i1 %112, %269
  br i1 %270, label %271, label %329

271:                                              ; preds = %267
  %272 = load i8*, i8** %111, align 8
  %273 = sext i32 %88 to i64
  br label %319

274:                                              ; preds = %297, %266
  %275 = phi i8* [ undef, %266 ], [ %313, %297 ]
  %276 = phi i64 [ 0, %266 ], [ %316, %297 ]
  %277 = phi i8* [ %265, %266 ], [ %313, %297 ]
  br i1 %260, label %288, label %278

278:                                              ; preds = %274, %278
  %279 = phi i64 [ %285, %278 ], [ %276, %274 ]
  %280 = phi i8* [ %282, %278 ], [ %277, %274 ]
  %281 = phi i64 [ %286, %278 ], [ %257, %274 ]
  %282 = getelementptr inbounds i8, i8* %280, i64 1
  %283 = load i8, i8* %280, align 1
  %284 = getelementptr inbounds i8, i8* %264, i64 %279
  store i8 %283, i8* %284, align 1
  %285 = add nuw nsw i64 %279, 1
  %286 = add i64 %281, -1
  %287 = icmp eq i64 %286, 0
  br i1 %287, label %288, label %278, !llvm.loop !10

288:                                              ; preds = %278, %274
  %289 = phi i8* [ %275, %274 ], [ %282, %278 ]
  %290 = load i32, i32* %90, align 8
  br label %291

291:                                              ; preds = %288, %261
  %292 = phi i32 [ %262, %261 ], [ %290, %288 ]
  %293 = phi i8* [ %265, %261 ], [ %289, %288 ]
  %294 = getelementptr inbounds i8, i8* %264, i64 %254
  %295 = add nuw nsw i32 %263, 1
  %296 = icmp slt i32 %295, %292
  br i1 %296, label %261, label %267

297:                                              ; preds = %266, %297
  %298 = phi i64 [ %316, %297 ], [ 0, %266 ]
  %299 = phi i8* [ %313, %297 ], [ %265, %266 ]
  %300 = phi i64 [ %317, %297 ], [ %259, %266 ]
  %301 = getelementptr inbounds i8, i8* %299, i64 1
  %302 = load i8, i8* %299, align 1
  %303 = getelementptr inbounds i8, i8* %264, i64 %298
  store i8 %302, i8* %303, align 1
  %304 = or i64 %298, 1
  %305 = getelementptr inbounds i8, i8* %299, i64 2
  %306 = load i8, i8* %301, align 1
  %307 = getelementptr inbounds i8, i8* %264, i64 %304
  store i8 %306, i8* %307, align 1
  %308 = or i64 %298, 2
  %309 = getelementptr inbounds i8, i8* %299, i64 3
  %310 = load i8, i8* %305, align 1
  %311 = getelementptr inbounds i8, i8* %264, i64 %308
  store i8 %310, i8* %311, align 1
  %312 = or i64 %298, 3
  %313 = getelementptr inbounds i8, i8* %299, i64 4
  %314 = load i8, i8* %309, align 1
  %315 = getelementptr inbounds i8, i8* %264, i64 %312
  store i8 %314, i8* %315, align 1
  %316 = add nuw nsw i64 %298, 4
  %317 = add i64 %300, -4
  %318 = icmp eq i64 %317, 0
  br i1 %318, label %274, label %297, !llvm.loop !11

319:                                              ; preds = %271, %319
  %320 = phi i32 [ 0, %271 ], [ %326, %319 ]
  %321 = phi i8* [ %83, %271 ], [ %325, %319 ]
  %322 = phi i8* [ %272, %271 ], [ %323, %319 ]
  %323 = getelementptr inbounds i8, i8* %322, i64 1
  %324 = load i8, i8* %322, align 1
  store i8 %324, i8* %321, align 1
  %325 = getelementptr inbounds i8, i8* %321, i64 %273
  %326 = add nuw nsw i32 %320, 1
  %327 = load i32, i32* %90, align 8
  %328 = icmp slt i32 %326, %327
  br i1 %328, label %319, label %329

329:                                              ; preds = %319, %267
  ret void
}

declare i8* @_ZN11CFX_DIBBase28GetWritableAlphaMaskScanlineEi(%class.CFX_DIBBase*, i32) local_unnamed_addr #1

declare i32 @_ZNK11CFX_DIBBase17GetAlphaMaskPitchEv(%class.CFX_DIBBase*) local_unnamed_addr #1

declare i8* @_ZN11CFX_DIBBase18GetAlphaMaskBufferEv(%class.CFX_DIBBase*) local_unnamed_addr #1

declare void @_Z7FX_FreePv(i8*) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__16vectorIh16FxAllocAllocatorIhEE8__appendEm(%"class.std::__1::vector"*, i64) local_unnamed_addr #0 comdat align 2 {
  %3 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 0, i32 2, i32 0, i32 0
  %4 = bitcast i8** %3 to i64*
  %5 = load i64, i64* %4, align 8
  %6 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 0, i32 1
  %7 = bitcast i8** %6 to i64*
  %8 = load i64, i64* %7, align 8
  %9 = sub i64 %5, %8
  %10 = icmp ult i64 %9, %1
  br i1 %10, label %22, label %11

11:                                               ; preds = %2
  %12 = inttoptr i64 %8 to i8*
  %13 = icmp eq i64 %1, 0
  br i1 %13, label %20, label %14

14:                                               ; preds = %11
  %15 = getelementptr inbounds i8, i8* %12, i64 %1
  %16 = sub i64 %1, %8
  %17 = getelementptr i8, i8* %12, i64 %16
  %18 = ptrtoint i8* %17 to i64
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %12, i8 0, i64 %18, i1 false) #6
  %19 = ptrtoint i8* %15 to i64
  br label %20

20:                                               ; preds = %11, %14
  %21 = phi i64 [ %19, %14 ], [ %8, %11 ]
  store i64 %21, i64* %7, align 8
  br label %178

22:                                               ; preds = %2
  %23 = bitcast %"class.std::__1::vector"* %0 to i64*
  %24 = load i64, i64* %23, align 8
  %25 = sub i64 %8, %24
  %26 = add i64 %25, %1
  %27 = icmp slt i64 %26, 0
  br i1 %27, label %28, label %30

28:                                               ; preds = %22
  %29 = bitcast %"class.std::__1::vector"* %0 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %29) #8
  unreachable

30:                                               ; preds = %22
  %31 = sub i64 %5, %24
  %32 = icmp ult i64 %31, 4611686018427387903
  br i1 %32, label %33, label %38

33:                                               ; preds = %30
  %34 = shl i64 %31, 1
  %35 = icmp ult i64 %34, %26
  %36 = select i1 %35, i64 %26, i64 %34
  %37 = icmp eq i64 %36, 0
  br i1 %37, label %41, label %38

38:                                               ; preds = %30, %33
  %39 = phi i64 [ %36, %33 ], [ 9223372036854775807, %30 ]
  %40 = tail call i8* @_ZN6pdfium8internal10AllocOrDieEmm(i64 %39, i64 1) #6
  br label %41

41:                                               ; preds = %38, %33
  %42 = phi i64 [ %39, %38 ], [ 0, %33 ]
  %43 = phi i8* [ %40, %38 ], [ null, %33 ]
  %44 = getelementptr inbounds i8, i8* %43, i64 %25
  %45 = ptrtoint i8* %44 to i64
  %46 = getelementptr inbounds i8, i8* %43, i64 %42
  %47 = getelementptr inbounds i8, i8* %44, i64 %1
  %48 = sub i64 %1, %45
  %49 = getelementptr i8, i8* %44, i64 %48
  %50 = ptrtoint i8* %49 to i64
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %44, i8 0, i64 %50, i1 false) #6
  %51 = ptrtoint i8* %46 to i64
  %52 = ptrtoint i8* %47 to i64
  %53 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 0, i32 0
  %54 = load i8*, i8** %53, align 8
  %55 = ptrtoint i8* %54 to i64
  %56 = load i8*, i8** %6, align 8
  %57 = ptrtoint i8* %56 to i64
  %58 = icmp eq i8* %56, %54
  br i1 %58, label %172, label %59

59:                                               ; preds = %41
  %60 = ptrtoint i8* %56 to i64
  %61 = sub i64 %60, %55
  %62 = icmp ult i64 %61, 16
  br i1 %62, label %158, label %63

63:                                               ; preds = %59
  %64 = sub i64 %8, %57
  %65 = sub i64 %64, %24
  %66 = getelementptr i8, i8* %54, i64 %65
  %67 = ptrtoint i8* %66 to i64
  %68 = getelementptr i8, i8* %43, i64 %67
  %69 = icmp ult i8* %68, %56
  %70 = icmp ult i8* %54, %44
  %71 = and i1 %69, %70
  br i1 %71, label %158, label %72

72:                                               ; preds = %63
  %73 = and i64 %61, -16
  %74 = sub i64 0, %73
  %75 = getelementptr i8, i8* %44, i64 %74
  %76 = sub i64 0, %73
  %77 = getelementptr i8, i8* %56, i64 %76
  %78 = add i64 %73, -16
  %79 = lshr exact i64 %78, 4
  %80 = add nuw nsw i64 %79, 1
  %81 = and i64 %80, 3
  %82 = icmp ult i64 %78, 48
  br i1 %82, label %135, label %83

83:                                               ; preds = %72
  %84 = sub nsw i64 %80, %81
  %85 = getelementptr i8, i8* %44, i64 -1
  %86 = getelementptr inbounds i8, i8* %85, i64 -8
  %87 = getelementptr inbounds i8, i8* %56, i64 -16
  %88 = getelementptr inbounds i8, i8* %86, i64 -7
  %89 = getelementptr i8, i8* %44, i64 -1
  %90 = getelementptr inbounds i8, i8* %89, i64 -8
  %91 = getelementptr inbounds i8, i8* %56, i64 -16
  %92 = getelementptr inbounds i8, i8* %90, i64 -7
  %93 = getelementptr i8, i8* %44, i64 -1
  %94 = getelementptr inbounds i8, i8* %93, i64 -8
  %95 = getelementptr inbounds i8, i8* %56, i64 -16
  %96 = getelementptr inbounds i8, i8* %94, i64 -7
  %97 = getelementptr i8, i8* %44, i64 -1
  %98 = getelementptr inbounds i8, i8* %97, i64 -8
  %99 = getelementptr inbounds i8, i8* %56, i64 -16
  %100 = getelementptr inbounds i8, i8* %98, i64 -7
  br label %101

101:                                              ; preds = %101, %83
  %102 = phi i64 [ 0, %83 ], [ %132, %101 ]
  %103 = phi i64 [ %84, %83 ], [ %133, %101 ]
  %104 = sub i64 0, %102
  %105 = sub i64 0, %102
  %106 = getelementptr inbounds i8, i8* %87, i64 %105
  %107 = bitcast i8* %106 to <2 x i64>*
  %108 = load <2 x i64>, <2 x i64>* %107, align 1, !alias.scope !12
  %109 = getelementptr inbounds i8, i8* %88, i64 %104
  %110 = bitcast i8* %109 to <2 x i64>*
  store <2 x i64> %108, <2 x i64>* %110, align 1, !alias.scope !15, !noalias !12
  %111 = sub nuw nsw i64 -16, %102
  %112 = sub nuw nsw i64 -16, %102
  %113 = getelementptr inbounds i8, i8* %91, i64 %112
  %114 = bitcast i8* %113 to <2 x i64>*
  %115 = load <2 x i64>, <2 x i64>* %114, align 1, !alias.scope !12
  %116 = getelementptr inbounds i8, i8* %92, i64 %111
  %117 = bitcast i8* %116 to <2 x i64>*
  store <2 x i64> %115, <2 x i64>* %117, align 1, !alias.scope !15, !noalias !12
  %118 = sub nuw nsw i64 -32, %102
  %119 = sub nuw nsw i64 -32, %102
  %120 = getelementptr inbounds i8, i8* %95, i64 %119
  %121 = bitcast i8* %120 to <2 x i64>*
  %122 = load <2 x i64>, <2 x i64>* %121, align 1, !alias.scope !12
  %123 = getelementptr inbounds i8, i8* %96, i64 %118
  %124 = bitcast i8* %123 to <2 x i64>*
  store <2 x i64> %122, <2 x i64>* %124, align 1, !alias.scope !15, !noalias !12
  %125 = sub nuw nsw i64 -48, %102
  %126 = sub nuw nsw i64 -48, %102
  %127 = getelementptr inbounds i8, i8* %99, i64 %126
  %128 = bitcast i8* %127 to <2 x i64>*
  %129 = load <2 x i64>, <2 x i64>* %128, align 1, !alias.scope !12
  %130 = getelementptr inbounds i8, i8* %100, i64 %125
  %131 = bitcast i8* %130 to <2 x i64>*
  store <2 x i64> %129, <2 x i64>* %131, align 1, !alias.scope !15, !noalias !12
  %132 = add i64 %102, 64
  %133 = add i64 %103, -4
  %134 = icmp eq i64 %133, 0
  br i1 %134, label %135, label %101, !llvm.loop !17

135:                                              ; preds = %101, %72
  %136 = phi i64 [ 0, %72 ], [ %132, %101 ]
  %137 = icmp eq i64 %81, 0
  br i1 %137, label %156, label %138

138:                                              ; preds = %135
  %139 = getelementptr i8, i8* %44, i64 -1
  %140 = getelementptr inbounds i8, i8* %139, i64 -8
  %141 = getelementptr inbounds i8, i8* %56, i64 -16
  %142 = getelementptr inbounds i8, i8* %140, i64 -7
  br label %143

143:                                              ; preds = %143, %138
  %144 = phi i64 [ %136, %138 ], [ %153, %143 ]
  %145 = phi i64 [ %81, %138 ], [ %154, %143 ]
  %146 = sub i64 0, %144
  %147 = sub i64 0, %144
  %148 = getelementptr inbounds i8, i8* %141, i64 %147
  %149 = bitcast i8* %148 to <2 x i64>*
  %150 = load <2 x i64>, <2 x i64>* %149, align 1, !alias.scope !12
  %151 = getelementptr inbounds i8, i8* %142, i64 %146
  %152 = bitcast i8* %151 to <2 x i64>*
  store <2 x i64> %150, <2 x i64>* %152, align 1, !alias.scope !15, !noalias !12
  %153 = add i64 %144, 16
  %154 = add i64 %145, -1
  %155 = icmp eq i64 %154, 0
  br i1 %155, label %156, label %143, !llvm.loop !18

156:                                              ; preds = %143, %135
  %157 = icmp eq i64 %61, %73
  br i1 %157, label %168, label %158

158:                                              ; preds = %156, %63, %59
  %159 = phi i8* [ %44, %63 ], [ %44, %59 ], [ %75, %156 ]
  %160 = phi i8* [ %56, %63 ], [ %56, %59 ], [ %77, %156 ]
  br label %161

161:                                              ; preds = %158, %161
  %162 = phi i8* [ %164, %161 ], [ %159, %158 ]
  %163 = phi i8* [ %165, %161 ], [ %160, %158 ]
  %164 = getelementptr inbounds i8, i8* %162, i64 -1
  %165 = getelementptr inbounds i8, i8* %163, i64 -1
  %166 = load i8, i8* %165, align 1
  store i8 %166, i8* %164, align 1
  %167 = icmp eq i8* %165, %54
  br i1 %167, label %168, label %161, !llvm.loop !19

168:                                              ; preds = %161, %156
  %169 = phi i8* [ %75, %156 ], [ %164, %161 ]
  %170 = ptrtoint i8* %169 to i64
  %171 = load i64, i64* %23, align 8
  br label %172

172:                                              ; preds = %41, %168
  %173 = phi i64 [ %170, %168 ], [ %45, %41 ]
  %174 = phi i64 [ %171, %168 ], [ %55, %41 ]
  store i64 %173, i64* %23, align 8
  store i64 %52, i64* %7, align 8
  store i64 %51, i64* %4, align 8
  %175 = icmp eq i64 %174, 0
  br i1 %175, label %178, label %176

176:                                              ; preds = %172
  %177 = inttoptr i64 %174 to i8*
  tail call void @_Z7FX_FreePv(i8* nonnull %177) #6
  br label %178

178:                                              ; preds = %176, %172, %20
  ret void
}

; Function Attrs: noreturn
declare void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"*) local_unnamed_addr #5

declare i8* @_ZN6pdfium8internal10AllocOrDieEmm(i64, i64) local_unnamed_addr #1

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { argmemonly nounwind }
attributes #5 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nounwind }
attributes #7 = { builtin nounwind }
attributes #8 = { noreturn nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{i8 0, i8 2}
!3 = !{!4}
!4 = distinct !{!4, !5, !"_ZNK11CFX_ClipRgn7GetMaskEv: argument 0"}
!5 = distinct !{!5, !"_ZNK11CFX_ClipRgn7GetMaskEv"}
!6 = distinct !{!6, !7}
!7 = !{!"llvm.loop.unroll.disable"}
!8 = distinct !{!8, !9}
!9 = !{!"llvm.loop.isvectorized", i32 1}
!10 = distinct !{!10, !7}
!11 = distinct !{!11, !9}
!12 = !{!13}
!13 = distinct !{!13, !14}
!14 = distinct !{!14, !"LVerDomain"}
!15 = !{!16}
!16 = distinct !{!16, !14}
!17 = distinct !{!17, !9}
!18 = distinct !{!18, !7}
!19 = distinct !{!19, !9}
