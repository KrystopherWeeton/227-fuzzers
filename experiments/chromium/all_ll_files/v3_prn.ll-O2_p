; ModuleID = '../../third_party/boringssl/src/crypto/x509v3/v3_prn.c'
source_filename = "../../third_party/boringssl/src/crypto/x509v3/v3_prn.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.bio_st = type { %struct.bio_method_st*, i32, i32, i32, i32, i32, i32, i8*, %struct.bio_st*, i64, i64 }
%struct.bio_method_st = type { i32, i8*, i32 (%struct.bio_st*, i8*, i32)*, i32 (%struct.bio_st*, i8*, i32)*, i32 (%struct.bio_st*, i8*)*, i32 (%struct.bio_st*, i8*, i32)*, i64 (%struct.bio_st*, i32, i64, i8*)*, i32 (%struct.bio_st*)*, i32 (%struct.bio_st*)*, i64 (%struct.bio_st*, i32, i64 (%struct.bio_st*, i32, i8*, i32, i64, i64)*)* }
%struct.stack_st_CONF_VALUE = type opaque
%struct.stack_st = type { i64, i8**, i32, i64, i32 (i8**, i8**)* }
%struct.X509_extension_st = type { %struct.asn1_object_st*, i32, %struct.asn1_string_st* }
%struct.asn1_object_st = type { i8*, i8*, i32, i32, i8*, i32 }
%struct.asn1_string_st = type { i32, i32, i8*, i64 }
%struct.v3_ext_method = type { i32, i32, %struct.ASN1_ITEM_st*, i8* ()*, void (i8*)*, i8* (i8*, i8**, i64)*, i32 (i8*, i8**)*, i8* (%struct.v3_ext_method*, i8*)*, i8* (%struct.v3_ext_method*, %struct.v3_ext_ctx*, i8*)*, %struct.stack_st_CONF_VALUE* (%struct.v3_ext_method*, i8*, %struct.stack_st_CONF_VALUE*)*, i8* (%struct.v3_ext_method*, %struct.v3_ext_ctx*, %struct.stack_st_CONF_VALUE*)*, i32 (%struct.v3_ext_method*, i8*, %struct.bio_st*, i32)*, i8* (%struct.v3_ext_method*, %struct.v3_ext_ctx*, i8*)*, i8* }
%struct.ASN1_ITEM_st = type opaque
%struct.v3_ext_ctx = type { i32, %struct.x509_st*, %struct.x509_st*, %struct.X509_req_st*, %struct.X509_crl_st*, %struct.X509V3_CONF_METHOD_st*, i8* }
%struct.x509_st = type { %struct.x509_cinf_st*, %struct.X509_algor_st*, %struct.asn1_string_st*, i32, %struct.crypto_ex_data_st, i64, i64, i64, i64, i64, i64, %struct.asn1_string_st*, %struct.AUTHORITY_KEYID_st*, %struct.X509_POLICY_CACHE_st*, %struct.stack_st_DIST_POINT*, %struct.stack_st_GENERAL_NAME*, %struct.NAME_CONSTRAINTS_st*, [20 x i8], %struct.x509_cert_aux_st*, %struct.crypto_buffer_st*, %union.crypto_mutex_st }
%struct.x509_cinf_st = type { %struct.asn1_string_st*, %struct.asn1_string_st*, %struct.X509_algor_st*, %struct.X509_name_st*, %struct.X509_val_st*, %struct.X509_name_st*, %struct.X509_pubkey_st*, %struct.asn1_string_st*, %struct.asn1_string_st*, %struct.stack_st_X509_EXTENSION*, %struct.ASN1_ENCODING_st }
%struct.X509_val_st = type opaque
%struct.X509_name_st = type { %struct.stack_st_X509_NAME_ENTRY*, i32, %struct.buf_mem_st*, i8*, i32 }
%struct.stack_st_X509_NAME_ENTRY = type opaque
%struct.buf_mem_st = type { i64, i8*, i64 }
%struct.X509_pubkey_st = type opaque
%struct.stack_st_X509_EXTENSION = type opaque
%struct.ASN1_ENCODING_st = type { i8*, i64, i32, i8 }
%struct.X509_algor_st = type { %struct.asn1_object_st*, %struct.asn1_type_st* }
%struct.asn1_type_st = type { i32, %union.anon }
%union.anon = type { i8* }
%struct.crypto_ex_data_st = type { %struct.stack_st_void* }
%struct.stack_st_void = type opaque
%struct.AUTHORITY_KEYID_st = type { %struct.asn1_string_st*, %struct.stack_st_GENERAL_NAME*, %struct.asn1_string_st* }
%struct.X509_POLICY_CACHE_st = type opaque
%struct.stack_st_DIST_POINT = type opaque
%struct.stack_st_GENERAL_NAME = type opaque
%struct.NAME_CONSTRAINTS_st = type { %struct.stack_st_GENERAL_SUBTREE*, %struct.stack_st_GENERAL_SUBTREE* }
%struct.stack_st_GENERAL_SUBTREE = type opaque
%struct.x509_cert_aux_st = type opaque
%struct.crypto_buffer_st = type opaque
%union.crypto_mutex_st = type { double, [48 x i8] }
%struct.X509_req_st = type opaque
%struct.X509_crl_st = type { %struct.X509_crl_info_st*, %struct.X509_algor_st*, %struct.asn1_string_st*, i32, i32, %struct.AUTHORITY_KEYID_st*, %struct.ISSUING_DIST_POINT_st*, i32, i32, %struct.asn1_string_st*, %struct.asn1_string_st*, [20 x i8], %struct.stack_st_GENERAL_NAMES*, %struct.x509_crl_method_st*, i8* }
%struct.X509_crl_info_st = type { %struct.asn1_string_st*, %struct.X509_algor_st*, %struct.X509_name_st*, %struct.asn1_string_st*, %struct.asn1_string_st*, %struct.stack_st_X509_REVOKED*, %struct.stack_st_X509_EXTENSION*, %struct.ASN1_ENCODING_st }
%struct.stack_st_X509_REVOKED = type opaque
%struct.ISSUING_DIST_POINT_st = type { %struct.DIST_POINT_NAME_st*, i32, i32, %struct.asn1_string_st*, i32, i32 }
%struct.DIST_POINT_NAME_st = type { i32, %union.anon.0, %struct.X509_name_st* }
%union.anon.0 = type { %struct.stack_st_GENERAL_NAME* }
%struct.stack_st_GENERAL_NAMES = type opaque
%struct.x509_crl_method_st = type opaque
%struct.X509V3_CONF_METHOD_st = type { i8* (i8*, i8*, i8*)*, %struct.stack_st_CONF_VALUE* (i8*, i8*)*, void (i8*, i8*)*, void (i8*, %struct.stack_st_CONF_VALUE*)* }
%struct.ASN1_VALUE_st = type opaque
%struct.conf_value_st = type { i8*, i8*, i8* }
%struct._IO_FILE = type { i32, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, %struct._IO_marker*, %struct._IO_FILE*, i32, i32, i64, i16, i8, [1 x i8], i8*, i64, %struct._IO_codecvt*, %struct._IO_wide_data*, %struct._IO_FILE*, i8*, i64, i32, [20 x i8] }
%struct._IO_marker = type opaque
%struct._IO_codecvt = type opaque
%struct._IO_wide_data = type opaque

@.str = private unnamed_addr constant [4 x i8] c"%*s\00", align 1
@.str.1 = private unnamed_addr constant [1 x i8] zeroinitializer, align 1
@.str.2 = private unnamed_addr constant [9 x i8] c"<EMPTY>\0A\00", align 1
@.str.3 = private unnamed_addr constant [3 x i8] c", \00", align 1
@.str.4 = private unnamed_addr constant [6 x i8] c"%s:%s\00", align 1
@.str.5 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@.str.6 = private unnamed_addr constant [6 x i8] c"%*s%s\00", align 1
@.str.7 = private unnamed_addr constant [8 x i8] c"%*s%s:\0A\00", align 1
@.str.8 = private unnamed_addr constant [6 x i8] c": %s\0A\00", align 1
@.str.9 = private unnamed_addr constant [9 x i8] c"critical\00", align 1
@.str.10 = private unnamed_addr constant [17 x i8] c"%*s<Parse Error>\00", align 1
@.str.11 = private unnamed_addr constant [19 x i8] c"%*s<Not Supported>\00", align 1

; Function Attrs: nounwind ssp uwtable
define hidden void @X509V3_EXT_val_prn(%struct.bio_st*, %struct.stack_st_CONF_VALUE*, i32, i32) local_unnamed_addr #0 {
  %5 = icmp eq %struct.stack_st_CONF_VALUE* %1, null
  br i1 %5, label %53, label %6

6:                                                ; preds = %4
  %7 = icmp ne i32 %3, 0
  %8 = bitcast %struct.stack_st_CONF_VALUE* %1 to %struct.stack_st*
  br i1 %7, label %9, label %12

9:                                                ; preds = %6
  %10 = tail call i64 @sk_num(%struct.stack_st* nonnull %8) #4
  %11 = icmp eq i64 %10, 0
  br i1 %11, label %12, label %18

12:                                               ; preds = %6, %9
  %13 = tail call i32 (%struct.bio_st*, i8*, ...) @BIO_printf(%struct.bio_st* %0, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i64 0, i64 0), i32 %2, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.1, i64 0, i64 0)) #4
  %14 = tail call i64 @sk_num(%struct.stack_st* nonnull %8) #4
  %15 = icmp eq i64 %14, 0
  br i1 %15, label %16, label %18

16:                                               ; preds = %12
  %17 = tail call i32 @BIO_puts(%struct.bio_st* %0, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.2, i64 0, i64 0)) #4
  br label %18

18:                                               ; preds = %9, %12, %16
  %19 = tail call i64 @sk_num(%struct.stack_st* nonnull %8) #4
  %20 = icmp eq i64 %19, 0
  br i1 %20, label %53, label %21

21:                                               ; preds = %18, %49
  %22 = phi i64 [ %50, %49 ], [ 0, %18 ]
  br i1 %7, label %23, label %25

23:                                               ; preds = %21
  %24 = tail call i32 (%struct.bio_st*, i8*, ...) @BIO_printf(%struct.bio_st* %0, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i64 0, i64 0), i32 %2, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.1, i64 0, i64 0)) #4
  br label %29

25:                                               ; preds = %21
  %26 = icmp eq i64 %22, 0
  br i1 %26, label %29, label %27

27:                                               ; preds = %25
  %28 = tail call i32 (%struct.bio_st*, i8*, ...) @BIO_printf(%struct.bio_st* %0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.3, i64 0, i64 0)) #4
  br label %29

29:                                               ; preds = %25, %27, %23
  %30 = tail call i8* @sk_value(%struct.stack_st* nonnull %8, i64 %22) #4
  %31 = getelementptr inbounds i8, i8* %30, i64 8
  %32 = bitcast i8* %31 to i8**
  %33 = load i8*, i8** %32, align 8
  %34 = icmp eq i8* %33, null
  %35 = getelementptr inbounds i8, i8* %30, i64 16
  %36 = bitcast i8* %35 to i8**
  %37 = load i8*, i8** %36, align 8
  br i1 %34, label %38, label %40

38:                                               ; preds = %29
  %39 = tail call i32 @BIO_puts(%struct.bio_st* %0, i8* %37) #4
  br label %46

40:                                               ; preds = %29
  %41 = icmp eq i8* %37, null
  br i1 %41, label %42, label %44

42:                                               ; preds = %40
  %43 = tail call i32 @BIO_puts(%struct.bio_st* %0, i8* nonnull %33) #4
  br label %46

44:                                               ; preds = %40
  %45 = tail call i32 (%struct.bio_st*, i8*, ...) @BIO_printf(%struct.bio_st* %0, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.4, i64 0, i64 0), i8* nonnull %33, i8* nonnull %37) #4
  br label %46

46:                                               ; preds = %42, %44, %38
  br i1 %7, label %47, label %49

47:                                               ; preds = %46
  %48 = tail call i32 @BIO_puts(%struct.bio_st* %0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.5, i64 0, i64 0)) #4
  br label %49

49:                                               ; preds = %46, %47
  %50 = add nuw i64 %22, 1
  %51 = tail call i64 @sk_num(%struct.stack_st* nonnull %8) #4
  %52 = icmp ult i64 %50, %51
  br i1 %52, label %21, label %53

53:                                               ; preds = %49, %18, %4
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

declare i32 @BIO_printf(%struct.bio_st*, i8*, ...) local_unnamed_addr #2

declare i32 @BIO_puts(%struct.bio_st*, i8*) local_unnamed_addr #2

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nounwind ssp uwtable
define hidden i32 @X509V3_EXT_print(%struct.bio_st*, %struct.X509_extension_st*, i64, i32) local_unnamed_addr #0 {
  %5 = alloca i8*, align 8
  %6 = bitcast i8** %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %6) #4
  store i8* inttoptr (i64 -6148914691236517206 to i8*), i8** %5, align 8
  %7 = tail call %struct.v3_ext_method* @X509V3_EXT_get(%struct.X509_extension_st* %1) #4
  %8 = icmp eq %struct.v3_ext_method* %7, null
  br i1 %8, label %9, label %24

9:                                                ; preds = %4
  %10 = lshr i64 %2, 16
  %11 = and i64 %10, 15
  switch i64 %11, label %23 [
    i64 0, label %105
    i64 1, label %12
    i64 2, label %14
    i64 3, label %14
  ]

12:                                               ; preds = %9
  %13 = tail call i32 (%struct.bio_st*, i8*, ...) @BIO_printf(%struct.bio_st* %0, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.11, i64 0, i64 0), i32 %3, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.1, i64 0, i64 0)) #4
  br label %105

14:                                               ; preds = %9, %9
  %15 = getelementptr inbounds %struct.X509_extension_st, %struct.X509_extension_st* %1, i64 0, i32 2
  %16 = load %struct.asn1_string_st*, %struct.asn1_string_st** %15, align 8
  %17 = getelementptr inbounds %struct.asn1_string_st, %struct.asn1_string_st* %16, i64 0, i32 2
  %18 = load i8*, i8** %17, align 8
  %19 = getelementptr inbounds %struct.asn1_string_st, %struct.asn1_string_st* %16, i64 0, i32 0
  %20 = load i32, i32* %19, align 8
  %21 = sext i32 %20 to i64
  %22 = tail call i32 @BIO_hexdump(%struct.bio_st* %0, i8* %18, i64 %21, i32 %3) #4
  br label %105

23:                                               ; preds = %9
  br label %105

24:                                               ; preds = %4
  %25 = getelementptr inbounds %struct.X509_extension_st, %struct.X509_extension_st* %1, i64 0, i32 2
  %26 = load %struct.asn1_string_st*, %struct.asn1_string_st** %25, align 8
  %27 = getelementptr inbounds %struct.asn1_string_st, %struct.asn1_string_st* %26, i64 0, i32 2
  %28 = bitcast i8** %27 to i64*
  %29 = load i64, i64* %28, align 8
  %30 = bitcast i8** %5 to i64*
  store i64 %29, i64* %30, align 8
  %31 = getelementptr inbounds %struct.v3_ext_method, %struct.v3_ext_method* %7, i64 0, i32 2
  %32 = load %struct.ASN1_ITEM_st*, %struct.ASN1_ITEM_st** %31, align 8
  %33 = icmp eq %struct.ASN1_ITEM_st* %32, null
  br i1 %33, label %40, label %34

34:                                               ; preds = %24
  %35 = getelementptr inbounds %struct.asn1_string_st, %struct.asn1_string_st* %26, i64 0, i32 0
  %36 = load i32, i32* %35, align 8
  %37 = sext i32 %36 to i64
  %38 = call %struct.ASN1_VALUE_st* @ASN1_item_d2i(%struct.ASN1_VALUE_st** null, i8** nonnull %5, i64 %37, %struct.ASN1_ITEM_st* nonnull %32) #4
  %39 = bitcast %struct.ASN1_VALUE_st* %38 to i8*
  br label %47

40:                                               ; preds = %24
  %41 = getelementptr inbounds %struct.v3_ext_method, %struct.v3_ext_method* %7, i64 0, i32 5
  %42 = load i8* (i8*, i8**, i64)*, i8* (i8*, i8**, i64)** %41, align 8
  %43 = getelementptr inbounds %struct.asn1_string_st, %struct.asn1_string_st* %26, i64 0, i32 0
  %44 = load i32, i32* %43, align 8
  %45 = sext i32 %44 to i64
  %46 = call i8* %42(i8* null, i8** nonnull %5, i64 %45) #4
  br label %47

47:                                               ; preds = %40, %34
  %48 = phi i8* [ %39, %34 ], [ %46, %40 ]
  %49 = icmp eq i8* %48, null
  br i1 %49, label %50, label %64

50:                                               ; preds = %47
  %51 = lshr i64 %2, 16
  %52 = and i64 %51, 15
  switch i64 %52, label %63 [
    i64 0, label %105
    i64 1, label %53
    i64 2, label %55
    i64 3, label %55
  ]

53:                                               ; preds = %50
  %54 = call i32 (%struct.bio_st*, i8*, ...) @BIO_printf(%struct.bio_st* %0, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.10, i64 0, i64 0), i32 %3, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.1, i64 0, i64 0)) #4
  br label %105

55:                                               ; preds = %50, %50
  %56 = load %struct.asn1_string_st*, %struct.asn1_string_st** %25, align 8
  %57 = getelementptr inbounds %struct.asn1_string_st, %struct.asn1_string_st* %56, i64 0, i32 2
  %58 = load i8*, i8** %57, align 8
  %59 = getelementptr inbounds %struct.asn1_string_st, %struct.asn1_string_st* %56, i64 0, i32 0
  %60 = load i32, i32* %59, align 8
  %61 = sext i32 %60 to i64
  %62 = call i32 @BIO_hexdump(%struct.bio_st* %0, i8* %58, i64 %61, i32 %3) #4
  br label %105

63:                                               ; preds = %50
  br label %105

64:                                               ; preds = %47
  %65 = getelementptr inbounds %struct.v3_ext_method, %struct.v3_ext_method* %7, i64 0, i32 7
  %66 = load i8* (%struct.v3_ext_method*, i8*)*, i8* (%struct.v3_ext_method*, i8*)** %65, align 8
  %67 = icmp eq i8* (%struct.v3_ext_method*, i8*)* %66, null
  br i1 %67, label %71, label %68

68:                                               ; preds = %64
  %69 = call i8* %66(%struct.v3_ext_method* nonnull %7, i8* nonnull %48) #4
  %70 = icmp eq i8* %69, null
  br i1 %70, label %90, label %94

71:                                               ; preds = %64
  %72 = getelementptr inbounds %struct.v3_ext_method, %struct.v3_ext_method* %7, i64 0, i32 9
  %73 = load %struct.stack_st_CONF_VALUE* (%struct.v3_ext_method*, i8*, %struct.stack_st_CONF_VALUE*)*, %struct.stack_st_CONF_VALUE* (%struct.v3_ext_method*, i8*, %struct.stack_st_CONF_VALUE*)** %72, align 8
  %74 = icmp eq %struct.stack_st_CONF_VALUE* (%struct.v3_ext_method*, i8*, %struct.stack_st_CONF_VALUE*)* %73, null
  br i1 %74, label %82, label %75

75:                                               ; preds = %71
  %76 = call %struct.stack_st_CONF_VALUE* %73(%struct.v3_ext_method* nonnull %7, i8* nonnull %48, %struct.stack_st_CONF_VALUE* null) #4
  %77 = icmp eq %struct.stack_st_CONF_VALUE* %76, null
  br i1 %77, label %90, label %78

78:                                               ; preds = %75
  %79 = getelementptr inbounds %struct.v3_ext_method, %struct.v3_ext_method* %7, i64 0, i32 1
  %80 = load i32, i32* %79, align 4
  %81 = and i32 %80, 4
  call void @X509V3_EXT_val_prn(%struct.bio_st* %0, %struct.stack_st_CONF_VALUE* nonnull %76, i32 %3, i32 %81)
  br label %90

82:                                               ; preds = %71
  %83 = getelementptr inbounds %struct.v3_ext_method, %struct.v3_ext_method* %7, i64 0, i32 11
  %84 = load i32 (%struct.v3_ext_method*, i8*, %struct.bio_st*, i32)*, i32 (%struct.v3_ext_method*, i8*, %struct.bio_st*, i32)** %83, align 8
  %85 = icmp eq i32 (%struct.v3_ext_method*, i8*, %struct.bio_st*, i32)* %84, null
  br i1 %85, label %90, label %86

86:                                               ; preds = %82
  %87 = call i32 %84(%struct.v3_ext_method* nonnull %7, i8* nonnull %48, %struct.bio_st* %0, i32 %3) #4
  %88 = icmp ne i32 %87, 0
  %89 = zext i1 %88 to i32
  br label %90

90:                                               ; preds = %78, %68, %75, %86, %82
  %91 = phi %struct.stack_st_CONF_VALUE* [ null, %82 ], [ null, %86 ], [ null, %75 ], [ null, %68 ], [ %76, %78 ]
  %92 = phi i32 [ 0, %82 ], [ %89, %86 ], [ 0, %75 ], [ 0, %68 ], [ 1, %78 ]
  %93 = bitcast %struct.stack_st_CONF_VALUE* %91 to %struct.stack_st*
  call void @sk_pop_free_ex(%struct.stack_st* %93, void (void (i8*)*, i8*)* nonnull @sk_CONF_VALUE_call_free_func, void (i8*)* bitcast (void (%struct.conf_value_st*)* @X509V3_conf_free to void (i8*)*)) #4
  br label %96

94:                                               ; preds = %68
  %95 = call i32 (%struct.bio_st*, i8*, ...) @BIO_printf(%struct.bio_st* %0, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.6, i64 0, i64 0), i32 %3, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.1, i64 0, i64 0), i8* nonnull %69) #4
  call void @sk_pop_free_ex(%struct.stack_st* null, void (void (i8*)*, i8*)* nonnull @sk_CONF_VALUE_call_free_func, void (i8*)* bitcast (void (%struct.conf_value_st*)* @X509V3_conf_free to void (i8*)*)) #4
  call void @OPENSSL_free(i8* nonnull %69) #4
  br label %96

96:                                               ; preds = %90, %94
  %97 = phi i32 [ %92, %90 ], [ 1, %94 ]
  %98 = load %struct.ASN1_ITEM_st*, %struct.ASN1_ITEM_st** %31, align 8
  %99 = icmp eq %struct.ASN1_ITEM_st* %98, null
  br i1 %99, label %102, label %100

100:                                              ; preds = %96
  %101 = bitcast i8* %48 to %struct.ASN1_VALUE_st*
  call void @ASN1_item_free(%struct.ASN1_VALUE_st* nonnull %101, %struct.ASN1_ITEM_st* nonnull %98) #4
  br label %105

102:                                              ; preds = %96
  %103 = getelementptr inbounds %struct.v3_ext_method, %struct.v3_ext_method* %7, i64 0, i32 4
  %104 = load void (i8*)*, void (i8*)** %103, align 8
  call void %104(i8* nonnull %48) #4
  br label %105

105:                                              ; preds = %63, %55, %53, %50, %23, %14, %12, %9, %100, %102
  %106 = phi i32 [ %97, %102 ], [ %97, %100 ], [ 1, %23 ], [ %22, %14 ], [ 0, %9 ], [ 1, %12 ], [ 1, %63 ], [ %62, %55 ], [ 0, %50 ], [ 1, %53 ]
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %6) #4
  ret i32 %106
}

declare %struct.v3_ext_method* @X509V3_EXT_get(%struct.X509_extension_st*) local_unnamed_addr #2

declare %struct.ASN1_VALUE_st* @ASN1_item_d2i(%struct.ASN1_VALUE_st**, i8**, i64, %struct.ASN1_ITEM_st*) local_unnamed_addr #2

declare void @X509V3_conf_free(%struct.conf_value_st*) #2

declare void @OPENSSL_free(i8*) local_unnamed_addr #2

declare void @ASN1_item_free(%struct.ASN1_VALUE_st*, %struct.ASN1_ITEM_st*) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden i32 @X509V3_extensions_print(%struct.bio_st*, i8*, %struct.stack_st_X509_EXTENSION*, i64, i32) local_unnamed_addr #0 {
  %6 = bitcast %struct.stack_st_X509_EXTENSION* %2 to %struct.stack_st*
  %7 = tail call i64 @sk_num(%struct.stack_st* %6) #4
  %8 = icmp eq i64 %7, 0
  br i1 %8, label %52, label %9

9:                                                ; preds = %5
  %10 = icmp eq i8* %1, null
  br i1 %10, label %14, label %11

11:                                               ; preds = %9
  %12 = tail call i32 (%struct.bio_st*, i8*, ...) @BIO_printf(%struct.bio_st* %0, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.7, i64 0, i64 0), i32 %4, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.1, i64 0, i64 0), i8* nonnull %1) #4
  %13 = add nsw i32 %4, 4
  br label %14

14:                                               ; preds = %9, %11
  %15 = phi i32 [ %13, %11 ], [ %4, %9 ]
  %16 = tail call i64 @sk_num(%struct.stack_st* %6) #4
  %17 = icmp eq i64 %16, 0
  br i1 %17, label %52, label %18

18:                                               ; preds = %14
  %19 = icmp eq i32 %15, 0
  %20 = add nsw i32 %15, 4
  br label %24

21:                                               ; preds = %48
  %22 = tail call i64 @sk_num(%struct.stack_st* %6) #4
  %23 = icmp ult i64 %51, %22
  br i1 %23, label %24, label %52

24:                                               ; preds = %18, %21
  %25 = phi i64 [ 0, %18 ], [ %51, %21 ]
  %26 = tail call i8* @sk_value(%struct.stack_st* %6, i64 %25) #4
  %27 = bitcast i8* %26 to %struct.X509_extension_st*
  br i1 %19, label %31, label %28

28:                                               ; preds = %24
  %29 = tail call i32 (%struct.bio_st*, i8*, ...) @BIO_printf(%struct.bio_st* %0, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i64 0, i64 0), i32 %15, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.1, i64 0, i64 0)) #4
  %30 = icmp slt i32 %29, 1
  br i1 %30, label %52, label %31

31:                                               ; preds = %24, %28
  %32 = tail call %struct.asn1_object_st* @X509_EXTENSION_get_object(%struct.X509_extension_st* %27) #4
  %33 = tail call i32 @i2a_ASN1_OBJECT(%struct.bio_st* %0, %struct.asn1_object_st* %32) #4
  %34 = tail call i32 @X509_EXTENSION_get_critical(%struct.X509_extension_st* %27) #4
  %35 = icmp eq i32 %34, 0
  %36 = select i1 %35, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.1, i64 0, i64 0), i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.9, i64 0, i64 0)
  %37 = tail call i32 (%struct.bio_st*, i8*, ...) @BIO_printf(%struct.bio_st* %0, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.8, i64 0, i64 0), i8* %36) #4
  %38 = icmp slt i32 %37, 1
  br i1 %38, label %52, label %39

39:                                               ; preds = %31
  %40 = tail call i32 @X509V3_EXT_print(%struct.bio_st* %0, %struct.X509_extension_st* %27, i64 %3, i32 %20)
  %41 = icmp eq i32 %40, 0
  br i1 %41, label %42, label %48

42:                                               ; preds = %39
  %43 = tail call i32 (%struct.bio_st*, i8*, ...) @BIO_printf(%struct.bio_st* %0, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i64 0, i64 0), i32 %20, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.1, i64 0, i64 0)) #4
  %44 = getelementptr inbounds i8, i8* %26, i64 16
  %45 = bitcast i8* %44 to %struct.asn1_string_st**
  %46 = load %struct.asn1_string_st*, %struct.asn1_string_st** %45, align 8
  %47 = tail call i32 @ASN1_STRING_print(%struct.bio_st* %0, %struct.asn1_string_st* %46) #4
  br label %48

48:                                               ; preds = %39, %42
  %49 = tail call i32 @BIO_write(%struct.bio_st* %0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.5, i64 0, i64 0), i32 1) #4
  %50 = icmp sgt i32 %49, 0
  %51 = add nuw i64 %25, 1
  br i1 %50, label %21, label %52

52:                                               ; preds = %48, %21, %28, %31, %14, %5
  %53 = phi i32 [ 1, %5 ], [ 1, %14 ], [ 0, %48 ], [ 1, %21 ], [ 0, %28 ], [ 0, %31 ]
  ret i32 %53
}

declare %struct.asn1_object_st* @X509_EXTENSION_get_object(%struct.X509_extension_st*) local_unnamed_addr #2

declare i32 @i2a_ASN1_OBJECT(%struct.bio_st*, %struct.asn1_object_st*) local_unnamed_addr #2

declare i32 @X509_EXTENSION_get_critical(%struct.X509_extension_st*) local_unnamed_addr #2

declare i32 @ASN1_STRING_print(%struct.bio_st*, %struct.asn1_string_st*) local_unnamed_addr #2

declare i32 @BIO_write(%struct.bio_st*, i8*, i32) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden i32 @X509V3_EXT_print_fp(%struct._IO_FILE*, %struct.X509_extension_st*, i32, i32) local_unnamed_addr #0 {
  %5 = tail call %struct.bio_st* @BIO_new_fp(%struct._IO_FILE* %0, i32 0) #4
  %6 = icmp eq %struct.bio_st* %5, null
  br i1 %6, label %11, label %7

7:                                                ; preds = %4
  %8 = sext i32 %2 to i64
  %9 = tail call i32 @X509V3_EXT_print(%struct.bio_st* nonnull %5, %struct.X509_extension_st* %1, i64 %8, i32 %3)
  %10 = tail call i32 @BIO_free(%struct.bio_st* nonnull %5) #4
  br label %11

11:                                               ; preds = %4, %7
  %12 = phi i32 [ %9, %7 ], [ 0, %4 ]
  ret i32 %12
}

declare %struct.bio_st* @BIO_new_fp(%struct._IO_FILE*, i32) local_unnamed_addr #2

declare i32 @BIO_free(%struct.bio_st*) local_unnamed_addr #2

declare i64 @sk_num(%struct.stack_st*) local_unnamed_addr #2

declare i8* @sk_value(%struct.stack_st*, i64) local_unnamed_addr #2

declare void @sk_pop_free_ex(%struct.stack_st*, void (void (i8*)*, i8*)*, void (i8*)*) local_unnamed_addr #2

; Function Attrs: inlinehint nounwind ssp uwtable
define internal void @sk_CONF_VALUE_call_free_func(void (i8*)* nocapture, i8*) #3 {
  %3 = bitcast void (i8*)* %0 to void (%struct.conf_value_st*)*
  %4 = bitcast i8* %1 to %struct.conf_value_st*
  tail call void %3(%struct.conf_value_st* %4) #4
  ret void
}

declare i32 @BIO_hexdump(%struct.bio_st*, i8*, i64, i32) local_unnamed_addr #2

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { inlinehint nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
