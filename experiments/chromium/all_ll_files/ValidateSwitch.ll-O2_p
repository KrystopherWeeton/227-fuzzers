; ModuleID = '../../third_party/angle/src/compiler/translator/ValidateSwitch.cpp'
source_filename = "../../third_party/angle/src/compiler/translator/ValidateSwitch.cpp"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.sh::TDiagnostics" = type { %"class.angle::pp::Diagnostics", %"class.sh::TInfoSinkBase"*, i32, i32 }
%"class.angle::pp::Diagnostics" = type { i32 (...)** }
%"class.sh::TInfoSinkBase" = type opaque
%"class.sh::TIntermBlock" = type <{ %"class.sh::TIntermNode", %"class.sh::TIntermAggregateBase", %"class.sh::TVector", i8, [7 x i8] }>
%"class.sh::TIntermNode" = type { i32 (...)**, %"struct.sh::TSourceLoc" }
%"struct.sh::TSourceLoc" = type { i32, i32, i32, i32 }
%"class.sh::TIntermAggregateBase" = type { i32 (...)** }
%"class.sh::TVector" = type { %"class.std::__1::vector" }
%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { %"class.sh::TIntermNode"**, %"class.sh::TIntermNode"**, %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %"class.sh::TIntermNode"** }
%"class.sh::(anonymous namespace)::ValidateSwitch" = type <{ %"class.sh::TIntermTraverser", i32, [4 x i8], %"class.sh::TDiagnostics"*, i8, i8, i8, i8, i32, i8, [3 x i8], i32, %"class.std::__1::set", %"class.std::__1::set.35", i8, [7 x i8] }>
%"class.sh::TIntermTraverser" = type { i32 (...)**, i8, i8, i8, i32, i32, i8, %"class.std::__1::vector.1", %"class.sh::TSymbolTable"*, %"class.std::__1::vector.6", %"class.std::__1::vector.13", %"class.sh::TVector", %"class.std::__1::vector.20" }
%"class.std::__1::vector.1" = type { %"class.std::__1::__vector_base.2" }
%"class.std::__1::__vector_base.2" = type { %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry"*, %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry"*, %"class.std::__1::__compressed_pair.3" }
%"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry" = type { %"class.sh::TIntermAggregateBase"*, %"class.sh::TIntermNode"*, %"class.sh::TVector" }
%"class.std::__1::__compressed_pair.3" = type { %"struct.std::__1::__compressed_pair_elem.4" }
%"struct.std::__1::__compressed_pair_elem.4" = type { %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry"* }
%"class.sh::TSymbolTable" = type opaque
%"class.std::__1::vector.6" = type { %"class.std::__1::__vector_base.7" }
%"class.std::__1::__vector_base.7" = type { %"struct.sh::TIntermTraverser::NodeInsertMultipleEntry"*, %"struct.sh::TIntermTraverser::NodeInsertMultipleEntry"*, %"class.std::__1::__compressed_pair.8" }
%"struct.sh::TIntermTraverser::NodeInsertMultipleEntry" = type { %"class.sh::TIntermBlock"*, i64, %"class.sh::TVector", %"class.sh::TVector" }
%"class.std::__1::__compressed_pair.8" = type { %"struct.std::__1::__compressed_pair_elem.9" }
%"struct.std::__1::__compressed_pair_elem.9" = type { %"struct.sh::TIntermTraverser::NodeInsertMultipleEntry"* }
%"class.std::__1::vector.13" = type { %"class.std::__1::__vector_base.14" }
%"class.std::__1::__vector_base.14" = type { %"struct.sh::TIntermTraverser::NodeUpdateEntry"*, %"struct.sh::TIntermTraverser::NodeUpdateEntry"*, %"class.std::__1::__compressed_pair.15" }
%"struct.sh::TIntermTraverser::NodeUpdateEntry" = type <{ %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"*, i8, [7 x i8] }>
%"class.std::__1::__compressed_pair.15" = type { %"struct.std::__1::__compressed_pair_elem.16" }
%"struct.std::__1::__compressed_pair_elem.16" = type { %"struct.sh::TIntermTraverser::NodeUpdateEntry"* }
%"class.std::__1::vector.20" = type { %"class.std::__1::__vector_base.21" }
%"class.std::__1::__vector_base.21" = type { %"struct.sh::TIntermTraverser::ParentBlock"*, %"struct.sh::TIntermTraverser::ParentBlock"*, %"class.std::__1::__compressed_pair.22" }
%"struct.sh::TIntermTraverser::ParentBlock" = type { %"class.sh::TIntermBlock"*, i64 }
%"class.std::__1::__compressed_pair.22" = type { %"struct.std::__1::__compressed_pair_elem.23" }
%"struct.std::__1::__compressed_pair_elem.23" = type { %"struct.sh::TIntermTraverser::ParentBlock"* }
%"class.std::__1::set" = type { %"class.std::__1::__tree" }
%"class.std::__1::__tree" = type { %"class.std::__1::__tree_end_node"*, %"class.std::__1::__compressed_pair.27", %"class.std::__1::__compressed_pair.32" }
%"class.std::__1::__tree_end_node" = type { %"class.std::__1::__tree_node_base"* }
%"class.std::__1::__tree_node_base" = type <{ %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_end_node"*, i8, [7 x i8] }>
%"class.std::__1::__compressed_pair.27" = type { %"struct.std::__1::__compressed_pair_elem.28" }
%"struct.std::__1::__compressed_pair_elem.28" = type { %"class.std::__1::__tree_end_node" }
%"class.std::__1::__compressed_pair.32" = type { %"struct.std::__1::__compressed_pair_elem.33" }
%"struct.std::__1::__compressed_pair_elem.33" = type { i64 }
%"class.std::__1::set.35" = type { %"class.std::__1::__tree.36" }
%"class.std::__1::__tree.36" = type { %"class.std::__1::__tree_end_node"*, %"class.std::__1::__compressed_pair.37", %"class.std::__1::__compressed_pair.41" }
%"class.std::__1::__compressed_pair.37" = type { %"struct.std::__1::__compressed_pair_elem.28" }
%"class.std::__1::__compressed_pair.41" = type { %"struct.std::__1::__compressed_pair_elem.33" }
%"class.std::__1::__tree_node.63" = type { %"class.std::__1::__tree_node_base.base", i32 }
%"class.std::__1::__tree_node_base.base" = type <{ %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_end_node"*, i8 }>
%"class.std::__1::__tree_node" = type { %"class.std::__1::__tree_node_base.base", i32 }
%"class.sh::TIntermSymbol" = type { %"class.sh::TIntermTyped", %"class.sh::TVariable"* }
%"class.sh::TIntermTyped" = type { %"class.sh::TIntermNode" }
%"class.sh::TVariable" = type opaque
%"class.sh::TIntermConstantUnion" = type { %"class.sh::TIntermExpression", %"class.sh::TConstantUnion"* }
%"class.sh::TIntermExpression" = type { %"class.sh::TIntermTyped", %"class.sh::TType" }
%"class.sh::TType" = type { i32, i32, i32, i8, i8, %"struct.sh::TMemoryQualifier", i8, %"struct.sh::TLayoutQualifier", i8, i8, %"class.sh::TSpan", %"class.sh::TVector.45"*, %"class.sh::TInterfaceBlock"*, %"class.sh::TStructure"*, i8, i64, i8* }
%"struct.sh::TMemoryQualifier" = type { i8, i8, i8, i8, i8 }
%"struct.sh::TLayoutQualifier" = type <{ i32, i32, i32, i32, %"struct.sh::WorkGroupSize", i32, i32, i32, i32, i8, i8, [2 x i8], i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i8, [3 x i8] }>
%"struct.sh::WorkGroupSize" = type { [3 x i32] }
%"class.sh::TSpan" = type { i32*, i64 }
%"class.sh::TVector.45" = type opaque
%"class.sh::TInterfaceBlock" = type opaque
%"class.sh::TStructure" = type opaque
%"class.sh::TConstantUnion" = type { %union.anon, i32 }
%union.anon = type { i32 }
%"class.sh::TIntermSwizzle" = type <{ %"class.sh::TIntermExpression", %"class.sh::TIntermTyped"*, %"class.sh::TVector.46", i8, [7 x i8] }>
%"class.sh::TVector.46" = type { %"class.std::__1::vector.47" }
%"class.std::__1::vector.47" = type { %"class.std::__1::__vector_base.48" }
%"class.std::__1::__vector_base.48" = type { i32*, i32*, %"class.std::__1::__compressed_pair.49" }
%"class.std::__1::__compressed_pair.49" = type { %"struct.std::__1::__compressed_pair_elem.50" }
%"struct.std::__1::__compressed_pair_elem.50" = type { i32* }
%"class.sh::TIntermBinary" = type <{ %"class.sh::TIntermOperator.base", [7 x i8], %"class.sh::TIntermTyped"*, %"class.sh::TIntermTyped"*, i8, [7 x i8] }>
%"class.sh::TIntermOperator.base" = type <{ %"class.sh::TIntermExpression", i8 }>
%"class.sh::TIntermUnary" = type { %"class.sh::TIntermOperator.base", %"class.sh::TIntermTyped"*, i8, %"class.sh::TFunction"* }
%"class.sh::TFunction" = type opaque
%"class.sh::TIntermTernary" = type { %"class.sh::TIntermExpression", %"class.sh::TIntermTyped"*, %"class.sh::TIntermTyped"*, %"class.sh::TIntermTyped"* }
%"class.sh::TIntermIfElse" = type { %"class.sh::TIntermNode", %"class.sh::TIntermTyped"*, %"class.sh::TIntermBlock"*, %"class.sh::TIntermBlock"* }
%"class.sh::TIntermSwitch" = type { %"class.sh::TIntermNode", %"class.sh::TIntermTyped"*, %"class.sh::TIntermBlock"* }
%"class.sh::TIntermCase" = type { %"class.sh::TIntermNode", %"class.sh::TIntermTyped"* }
%"class.sh::TIntermFunctionPrototype" = type { %"class.sh::TIntermTyped", %"class.sh::TFunction"* }
%"class.sh::TIntermFunctionDefinition" = type { %"class.sh::TIntermNode", %"class.sh::TIntermFunctionPrototype"*, %"class.sh::TIntermBlock"* }
%"class.sh::TIntermAggregate" = type { %"class.sh::TIntermOperator.base", %"class.sh::TIntermAggregateBase", %"class.sh::TVector", i8, i8, %"class.sh::TFunction"* }
%"class.sh::TIntermGlobalQualifierDeclaration" = type <{ %"class.sh::TIntermNode", %"class.sh::TIntermSymbol"*, i8, [7 x i8] }>
%"class.sh::TIntermDeclaration" = type { %"class.sh::TIntermNode", %"class.sh::TIntermAggregateBase", %"class.sh::TVector" }
%"class.sh::TIntermLoop" = type { %"class.sh::TIntermNode", i32, %"class.sh::TIntermNode"*, %"class.sh::TIntermTyped"*, %"class.sh::TIntermTyped"*, %"class.sh::TIntermBlock"* }
%"class.sh::TIntermBranch" = type { %"class.sh::TIntermNode", i8, %"class.sh::TIntermTyped"* }
%"class.sh::TIntermPreprocessorDirective" = type { %"class.sh::TIntermNode", i32, %"class.sh::ImmutableString" }
%"class.sh::ImmutableString" = type { i8*, i64 }

$_ZN2sh16TIntermTraverser22visitFunctionPrototypeEPNS_24TIntermFunctionPrototypeE = comdat any

$_ZN2sh16TIntermTraverser23visitFunctionDefinitionENS_5VisitEPNS_25TIntermFunctionDefinitionE = comdat any

$_ZN2sh16TIntermTraverser31visitGlobalQualifierDeclarationENS_5VisitEPNS_33TIntermGlobalQualifierDeclarationE = comdat any

$_ZN2sh16TIntermTraverser26visitPreprocessorDirectiveEPNS_28TIntermPreprocessorDirectiveE = comdat any

$_ZNSt3__127__tree_balance_after_insertIPNS_16__tree_node_baseIPvEEEEvT_S5_ = comdat any

$_ZNSt3__16__treeIjNS_4lessIjEENS_9allocatorIjEEE7destroyEPNS_11__tree_nodeIjPvEE = comdat any

$_ZNSt3__16__treeIiNS_4lessIiEENS_9allocatorIiEEE7destroyEPNS_11__tree_nodeIiPvEE = comdat any

@_ZTVN2sh12_GLOBAL__N_114ValidateSwitchE = internal unnamed_addr constant { [28 x i8*] } { [28 x i8*] [i8* null, i8* null, i8* bitcast (void (%"class.sh::(anonymous namespace)::ValidateSwitch"*)* @_ZN2sh12_GLOBAL__N_114ValidateSwitchD2Ev to i8*), i8* bitcast (void (%"class.sh::(anonymous namespace)::ValidateSwitch"*)* @_ZN2sh12_GLOBAL__N_114ValidateSwitchD0Ev to i8*), i8* bitcast (void (%"class.sh::(anonymous namespace)::ValidateSwitch"*, %"class.sh::TIntermSymbol"*)* @_ZN2sh12_GLOBAL__N_114ValidateSwitch11visitSymbolEPNS_13TIntermSymbolE to i8*), i8* bitcast (void (%"class.sh::(anonymous namespace)::ValidateSwitch"*, %"class.sh::TIntermConstantUnion"*)* @_ZN2sh12_GLOBAL__N_114ValidateSwitch18visitConstantUnionEPNS_20TIntermConstantUnionE to i8*), i8* bitcast (i1 (%"class.sh::(anonymous namespace)::ValidateSwitch"*, i32, %"class.sh::TIntermSwizzle"*)* @_ZN2sh12_GLOBAL__N_114ValidateSwitch12visitSwizzleENS_5VisitEPNS_14TIntermSwizzleE to i8*), i8* bitcast (i1 (%"class.sh::(anonymous namespace)::ValidateSwitch"*, i32, %"class.sh::TIntermBinary"*)* @_ZN2sh12_GLOBAL__N_114ValidateSwitch11visitBinaryENS_5VisitEPNS_13TIntermBinaryE to i8*), i8* bitcast (i1 (%"class.sh::(anonymous namespace)::ValidateSwitch"*, i32, %"class.sh::TIntermUnary"*)* @_ZN2sh12_GLOBAL__N_114ValidateSwitch10visitUnaryENS_5VisitEPNS_12TIntermUnaryE to i8*), i8* bitcast (i1 (%"class.sh::(anonymous namespace)::ValidateSwitch"*, i32, %"class.sh::TIntermTernary"*)* @_ZN2sh12_GLOBAL__N_114ValidateSwitch12visitTernaryENS_5VisitEPNS_14TIntermTernaryE to i8*), i8* bitcast (i1 (%"class.sh::(anonymous namespace)::ValidateSwitch"*, i32, %"class.sh::TIntermIfElse"*)* @_ZN2sh12_GLOBAL__N_114ValidateSwitch11visitIfElseENS_5VisitEPNS_13TIntermIfElseE to i8*), i8* bitcast (i1 (%"class.sh::(anonymous namespace)::ValidateSwitch"*, i32, %"class.sh::TIntermSwitch"*)* @_ZN2sh12_GLOBAL__N_114ValidateSwitch11visitSwitchENS_5VisitEPNS_13TIntermSwitchE to i8*), i8* bitcast (i1 (%"class.sh::(anonymous namespace)::ValidateSwitch"*, i32, %"class.sh::TIntermCase"*)* @_ZN2sh12_GLOBAL__N_114ValidateSwitch9visitCaseENS_5VisitEPNS_11TIntermCaseE to i8*), i8* bitcast (void (%"class.sh::TIntermTraverser"*, %"class.sh::TIntermFunctionPrototype"*)* @_ZN2sh16TIntermTraverser22visitFunctionPrototypeEPNS_24TIntermFunctionPrototypeE to i8*), i8* bitcast (i1 (%"class.sh::TIntermTraverser"*, i32, %"class.sh::TIntermFunctionDefinition"*)* @_ZN2sh16TIntermTraverser23visitFunctionDefinitionENS_5VisitEPNS_25TIntermFunctionDefinitionE to i8*), i8* bitcast (i1 (%"class.sh::(anonymous namespace)::ValidateSwitch"*, i32, %"class.sh::TIntermAggregate"*)* @_ZN2sh12_GLOBAL__N_114ValidateSwitch14visitAggregateENS_5VisitEPNS_16TIntermAggregateE to i8*), i8* bitcast (i1 (%"class.sh::(anonymous namespace)::ValidateSwitch"*, i32, %"class.sh::TIntermBlock"*)* @_ZN2sh12_GLOBAL__N_114ValidateSwitch10visitBlockENS_5VisitEPNS_12TIntermBlockE to i8*), i8* bitcast (i1 (%"class.sh::TIntermTraverser"*, i32, %"class.sh::TIntermGlobalQualifierDeclaration"*)* @_ZN2sh16TIntermTraverser31visitGlobalQualifierDeclarationENS_5VisitEPNS_33TIntermGlobalQualifierDeclarationE to i8*), i8* bitcast (i1 (%"class.sh::(anonymous namespace)::ValidateSwitch"*, i32, %"class.sh::TIntermDeclaration"*)* @_ZN2sh12_GLOBAL__N_114ValidateSwitch16visitDeclarationENS_5VisitEPNS_18TIntermDeclarationE to i8*), i8* bitcast (i1 (%"class.sh::(anonymous namespace)::ValidateSwitch"*, i32, %"class.sh::TIntermLoop"*)* @_ZN2sh12_GLOBAL__N_114ValidateSwitch9visitLoopENS_5VisitEPNS_11TIntermLoopE to i8*), i8* bitcast (i1 (%"class.sh::(anonymous namespace)::ValidateSwitch"*, i32, %"class.sh::TIntermBranch"*)* @_ZN2sh12_GLOBAL__N_114ValidateSwitch11visitBranchENS_5VisitEPNS_13TIntermBranchE to i8*), i8* bitcast (void (%"class.sh::TIntermTraverser"*, %"class.sh::TIntermPreprocessorDirective"*)* @_ZN2sh16TIntermTraverser26visitPreprocessorDirectiveEPNS_28TIntermPreprocessorDirectiveE to i8*), i8* bitcast (void (%"class.sh::TIntermTraverser"*, %"class.sh::TIntermBinary"*)* @_ZN2sh16TIntermTraverser14traverseBinaryEPNS_13TIntermBinaryE to i8*), i8* bitcast (void (%"class.sh::TIntermTraverser"*, %"class.sh::TIntermUnary"*)* @_ZN2sh16TIntermTraverser13traverseUnaryEPNS_12TIntermUnaryE to i8*), i8* bitcast (void (%"class.sh::TIntermTraverser"*, %"class.sh::TIntermFunctionDefinition"*)* @_ZN2sh16TIntermTraverser26traverseFunctionDefinitionEPNS_25TIntermFunctionDefinitionE to i8*), i8* bitcast (void (%"class.sh::TIntermTraverser"*, %"class.sh::TIntermAggregate"*)* @_ZN2sh16TIntermTraverser17traverseAggregateEPNS_16TIntermAggregateE to i8*), i8* bitcast (void (%"class.sh::TIntermTraverser"*, %"class.sh::TIntermBlock"*)* @_ZN2sh16TIntermTraverser13traverseBlockEPNS_12TIntermBlockE to i8*), i8* bitcast (void (%"class.sh::TIntermTraverser"*, %"class.sh::TIntermLoop"*)* @_ZN2sh16TIntermTraverser12traverseLoopEPNS_11TIntermLoopE to i8*)] }, align 8
@.str = private unnamed_addr constant [5 x i8] c"case\00", align 1
@.str.1 = private unnamed_addr constant [8 x i8] c"default\00", align 1
@.str.2 = private unnamed_addr constant [43 x i8] c"label statement nested inside control flow\00", align 1
@.str.3 = private unnamed_addr constant [24 x i8] c"duplicate default label\00", align 1
@.str.4 = private unnamed_addr constant [59 x i8] c"case label type does not match switch init-expression type\00", align 1
@.str.5 = private unnamed_addr constant [21 x i8] c"duplicate case label\00", align 1
@.str.7 = private unnamed_addr constant [33 x i8] c"statement before the first label\00", align 1
@.str.8 = private unnamed_addr constant [7 x i8] c"switch\00", align 1
@.str.9 = private unnamed_addr constant [72 x i8] c"no statement between the last label and the end of the switch statement\00", align 1
@.str.10 = private unnamed_addr constant [50 x i8] c"too complex expressions inside a switch statement\00", align 1

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN2sh27ValidateSwitchStatementListENS_10TBasicTypeEPNS_12TDiagnosticsEPNS_12TIntermBlockERKNS_10TSourceLocE(i32, %"class.sh::TDiagnostics"*, %"class.sh::TIntermBlock"*, %"struct.sh::TSourceLoc"* dereferenceable(16)) local_unnamed_addr #0 {
  %5 = alloca %"class.sh::(anonymous namespace)::ValidateSwitch", align 8
  %6 = bitcast %"class.sh::(anonymous namespace)::ValidateSwitch"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 240, i8* nonnull %6) #8
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %6, i8 -86, i64 240, i1 false) #8
  %7 = getelementptr inbounds %"class.sh::(anonymous namespace)::ValidateSwitch", %"class.sh::(anonymous namespace)::ValidateSwitch"* %5, i64 0, i32 0
  call void @_ZN2sh16TIntermTraverserC2EbbbPNS_12TSymbolTableE(%"class.sh::TIntermTraverser"* nonnull %7, i1 zeroext true, i1 zeroext false, i1 zeroext true, %"class.sh::TSymbolTable"* null) #8
  %8 = getelementptr inbounds %"class.sh::(anonymous namespace)::ValidateSwitch", %"class.sh::(anonymous namespace)::ValidateSwitch"* %5, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [28 x i8*] }, { [28 x i8*] }* @_ZTVN2sh12_GLOBAL__N_114ValidateSwitchE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %8, align 8
  %9 = getelementptr inbounds %"class.sh::(anonymous namespace)::ValidateSwitch", %"class.sh::(anonymous namespace)::ValidateSwitch"* %5, i64 0, i32 1
  store i32 %0, i32* %9, align 8
  %10 = getelementptr inbounds %"class.sh::(anonymous namespace)::ValidateSwitch", %"class.sh::(anonymous namespace)::ValidateSwitch"* %5, i64 0, i32 3
  store %"class.sh::TDiagnostics"* %1, %"class.sh::TDiagnostics"** %10, align 8
  %11 = getelementptr inbounds %"class.sh::(anonymous namespace)::ValidateSwitch", %"class.sh::(anonymous namespace)::ValidateSwitch"* %5, i64 0, i32 4
  %12 = getelementptr inbounds %"class.sh::(anonymous namespace)::ValidateSwitch", %"class.sh::(anonymous namespace)::ValidateSwitch"* %5, i64 0, i32 11
  store i32 0, i32* %12, align 4
  %13 = getelementptr inbounds %"class.sh::(anonymous namespace)::ValidateSwitch", %"class.sh::(anonymous namespace)::ValidateSwitch"* %5, i64 0, i32 12, i32 0, i32 1, i32 0, i32 0, i32 0
  %14 = getelementptr inbounds %"class.sh::(anonymous namespace)::ValidateSwitch", %"class.sh::(anonymous namespace)::ValidateSwitch"* %5, i64 0, i32 12, i32 0, i32 1, i32 0, i32 0
  %15 = getelementptr inbounds %"class.sh::(anonymous namespace)::ValidateSwitch", %"class.sh::(anonymous namespace)::ValidateSwitch"* %5, i64 0, i32 12, i32 0, i32 0
  %16 = bitcast %"class.std::__1::__tree_node_base"** %13 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %16, i8 0, i64 16, i1 false) #8
  call void @llvm.memset.p0i8.i64(i8* align 8 %11, i8 0, i64 9, i1 false) #8
  store %"class.std::__1::__tree_end_node"* %14, %"class.std::__1::__tree_end_node"** %15, align 8
  %17 = getelementptr inbounds %"class.sh::(anonymous namespace)::ValidateSwitch", %"class.sh::(anonymous namespace)::ValidateSwitch"* %5, i64 0, i32 13, i32 0, i32 1, i32 0, i32 0, i32 0
  %18 = getelementptr inbounds %"class.sh::(anonymous namespace)::ValidateSwitch", %"class.sh::(anonymous namespace)::ValidateSwitch"* %5, i64 0, i32 13, i32 0, i32 1, i32 0, i32 0
  %19 = getelementptr inbounds %"class.sh::(anonymous namespace)::ValidateSwitch", %"class.sh::(anonymous namespace)::ValidateSwitch"* %5, i64 0, i32 13, i32 0, i32 0
  %20 = bitcast %"class.std::__1::__tree_node_base"** %17 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %20, i8 0, i64 16, i1 false) #8
  store %"class.std::__1::__tree_end_node"* %18, %"class.std::__1::__tree_end_node"** %19, align 8
  %21 = getelementptr inbounds %"class.sh::(anonymous namespace)::ValidateSwitch", %"class.sh::(anonymous namespace)::ValidateSwitch"* %5, i64 0, i32 14
  store i8 0, i8* %21, align 8
  call void @_ZN2sh16TIntermTraverser18setMaxAllowedDepthEi(%"class.sh::TIntermTraverser"* nonnull %7, i32 256) #8
  call void @_ZN2sh12TIntermBlock8traverseEPNS_16TIntermTraverserE(%"class.sh::TIntermBlock"* %2, %"class.sh::TIntermTraverser"* nonnull %7) #8
  %22 = getelementptr inbounds %"class.sh::(anonymous namespace)::ValidateSwitch", %"class.sh::(anonymous namespace)::ValidateSwitch"* %5, i64 0, i32 6
  %23 = load i8, i8* %22, align 2, !range !2
  %24 = icmp eq i8 %23, 0
  br i1 %24, label %27, label %25

25:                                               ; preds = %4
  %26 = load %"class.sh::TDiagnostics"*, %"class.sh::TDiagnostics"** %10, align 8
  call void @_ZN2sh12TDiagnostics5errorERKNS_10TSourceLocEPKcS5_(%"class.sh::TDiagnostics"* %26, %"struct.sh::TSourceLoc"* dereferenceable(16) %3, i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.7, i64 0, i64 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.8, i64 0, i64 0)) #8
  br label %27

27:                                               ; preds = %25, %4
  %28 = getelementptr inbounds %"class.sh::(anonymous namespace)::ValidateSwitch", %"class.sh::(anonymous namespace)::ValidateSwitch"* %5, i64 0, i32 7
  %29 = load i8, i8* %28, align 1, !range !2
  %30 = icmp eq i8 %29, 0
  br i1 %30, label %33, label %31

31:                                               ; preds = %27
  %32 = load %"class.sh::TDiagnostics"*, %"class.sh::TDiagnostics"** %10, align 8
  call void @_ZN2sh12TDiagnostics5errorERKNS_10TSourceLocEPKcS5_(%"class.sh::TDiagnostics"* %32, %"struct.sh::TSourceLoc"* dereferenceable(16) %3, i8* getelementptr inbounds ([72 x i8], [72 x i8]* @.str.9, i64 0, i64 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.8, i64 0, i64 0)) #8
  br label %33

33:                                               ; preds = %31, %27
  %34 = getelementptr inbounds %"class.sh::(anonymous namespace)::ValidateSwitch", %"class.sh::(anonymous namespace)::ValidateSwitch"* %5, i64 0, i32 0, i32 4
  %35 = load i32, i32* %34, align 4
  %36 = icmp sgt i32 %35, 255
  br i1 %36, label %37, label %39

37:                                               ; preds = %33
  %38 = load %"class.sh::TDiagnostics"*, %"class.sh::TDiagnostics"** %10, align 8
  call void @_ZN2sh12TDiagnostics5errorERKNS_10TSourceLocEPKcS5_(%"class.sh::TDiagnostics"* %38, %"struct.sh::TSourceLoc"* dereferenceable(16) %3, i8* getelementptr inbounds ([50 x i8], [50 x i8]* @.str.10, i64 0, i64 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.8, i64 0, i64 0)) #8
  br label %39

39:                                               ; preds = %37, %33
  %40 = load i8, i8* %22, align 2, !range !2
  %41 = load i8, i8* %28, align 1
  %42 = or i8 %41, %40
  %43 = icmp eq i8 %42, 0
  br i1 %43, label %44, label %58

44:                                               ; preds = %39
  %45 = getelementptr inbounds %"class.sh::(anonymous namespace)::ValidateSwitch", %"class.sh::(anonymous namespace)::ValidateSwitch"* %5, i64 0, i32 9
  %46 = load i8, i8* %45, align 8, !range !2
  %47 = load i8, i8* %11, align 8
  %48 = or i8 %47, %46
  %49 = load i32, i32* %12, align 4
  %50 = icmp slt i32 %49, 2
  %51 = load i8, i8* %21, align 8
  %52 = or i8 %48, %51
  %53 = icmp eq i8 %52, 0
  %54 = and i1 %50, %53
  br i1 %54, label %55, label %58

55:                                               ; preds = %44
  %56 = load i32, i32* %34, align 4
  %57 = icmp slt i32 %56, 256
  br label %58

58:                                               ; preds = %39, %44, %55
  %59 = phi i1 [ false, %44 ], [ false, %39 ], [ %57, %55 ]
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [28 x i8*] }, { [28 x i8*] }* @_ZTVN2sh12_GLOBAL__N_114ValidateSwitchE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %8, align 8
  %60 = getelementptr inbounds %"class.sh::(anonymous namespace)::ValidateSwitch", %"class.sh::(anonymous namespace)::ValidateSwitch"* %5, i64 0, i32 13, i32 0
  %61 = bitcast %"class.std::__1::__tree_end_node"* %18 to %"class.std::__1::__tree_node.63"**
  %62 = load %"class.std::__1::__tree_node.63"*, %"class.std::__1::__tree_node.63"** %61, align 8
  call void @_ZNSt3__16__treeIjNS_4lessIjEENS_9allocatorIjEEE7destroyEPNS_11__tree_nodeIjPvEE(%"class.std::__1::__tree.36"* %60, %"class.std::__1::__tree_node.63"* %62) #8
  %63 = getelementptr inbounds %"class.sh::(anonymous namespace)::ValidateSwitch", %"class.sh::(anonymous namespace)::ValidateSwitch"* %5, i64 0, i32 12, i32 0
  %64 = bitcast %"class.std::__1::__tree_end_node"* %14 to %"class.std::__1::__tree_node"**
  %65 = load %"class.std::__1::__tree_node"*, %"class.std::__1::__tree_node"** %64, align 8
  call void @_ZNSt3__16__treeIiNS_4lessIiEENS_9allocatorIiEEE7destroyEPNS_11__tree_nodeIiPvEE(%"class.std::__1::__tree"* %63, %"class.std::__1::__tree_node"* %65) #8
  call void @_ZN2sh16TIntermTraverserD2Ev(%"class.sh::TIntermTraverser"* nonnull %7) #8
  call void @llvm.lifetime.end.p0i8(i64 240, i8* nonnull %6) #8
  ret i1 %59
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

declare void @_ZN2sh12TIntermBlock8traverseEPNS_16TIntermTraverserE(%"class.sh::TIntermBlock"*, %"class.sh::TIntermTraverser"*) unnamed_addr #2

; Function Attrs: inlinehint nounwind ssp uwtable
define internal void @_ZN2sh12_GLOBAL__N_114ValidateSwitchD2Ev(%"class.sh::(anonymous namespace)::ValidateSwitch"*) unnamed_addr #3 align 2 {
  %2 = getelementptr inbounds %"class.sh::(anonymous namespace)::ValidateSwitch", %"class.sh::(anonymous namespace)::ValidateSwitch"* %0, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [28 x i8*] }, { [28 x i8*] }* @_ZTVN2sh12_GLOBAL__N_114ValidateSwitchE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8
  %3 = getelementptr inbounds %"class.sh::(anonymous namespace)::ValidateSwitch", %"class.sh::(anonymous namespace)::ValidateSwitch"* %0, i64 0, i32 13, i32 0
  %4 = getelementptr inbounds %"class.sh::(anonymous namespace)::ValidateSwitch", %"class.sh::(anonymous namespace)::ValidateSwitch"* %0, i64 0, i32 13, i32 0, i32 1, i32 0, i32 0
  %5 = bitcast %"class.std::__1::__tree_end_node"* %4 to %"class.std::__1::__tree_node.63"**
  %6 = load %"class.std::__1::__tree_node.63"*, %"class.std::__1::__tree_node.63"** %5, align 8
  tail call void @_ZNSt3__16__treeIjNS_4lessIjEENS_9allocatorIjEEE7destroyEPNS_11__tree_nodeIjPvEE(%"class.std::__1::__tree.36"* %3, %"class.std::__1::__tree_node.63"* %6) #8
  %7 = getelementptr inbounds %"class.sh::(anonymous namespace)::ValidateSwitch", %"class.sh::(anonymous namespace)::ValidateSwitch"* %0, i64 0, i32 12, i32 0
  %8 = getelementptr inbounds %"class.sh::(anonymous namespace)::ValidateSwitch", %"class.sh::(anonymous namespace)::ValidateSwitch"* %0, i64 0, i32 12, i32 0, i32 1, i32 0, i32 0
  %9 = bitcast %"class.std::__1::__tree_end_node"* %8 to %"class.std::__1::__tree_node"**
  %10 = load %"class.std::__1::__tree_node"*, %"class.std::__1::__tree_node"** %9, align 8
  tail call void @_ZNSt3__16__treeIiNS_4lessIiEENS_9allocatorIiEEE7destroyEPNS_11__tree_nodeIiPvEE(%"class.std::__1::__tree"* %7, %"class.std::__1::__tree_node"* %10) #8
  %11 = getelementptr inbounds %"class.sh::(anonymous namespace)::ValidateSwitch", %"class.sh::(anonymous namespace)::ValidateSwitch"* %0, i64 0, i32 0
  tail call void @_ZN2sh16TIntermTraverserD2Ev(%"class.sh::TIntermTraverser"* %11) #8
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

declare void @_ZN2sh16TIntermTraverserC2EbbbPNS_12TSymbolTableE(%"class.sh::TIntermTraverser"*, i1 zeroext, i1 zeroext, i1 zeroext, %"class.sh::TSymbolTable"*) unnamed_addr #2

declare void @_ZN2sh16TIntermTraverser18setMaxAllowedDepthEi(%"class.sh::TIntermTraverser"*, i32) local_unnamed_addr #2

; Function Attrs: inlinehint nounwind ssp uwtable
define internal void @_ZN2sh12_GLOBAL__N_114ValidateSwitchD0Ev(%"class.sh::(anonymous namespace)::ValidateSwitch"*) unnamed_addr #3 align 2 {
  %2 = getelementptr inbounds %"class.sh::(anonymous namespace)::ValidateSwitch", %"class.sh::(anonymous namespace)::ValidateSwitch"* %0, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [28 x i8*] }, { [28 x i8*] }* @_ZTVN2sh12_GLOBAL__N_114ValidateSwitchE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8
  %3 = getelementptr inbounds %"class.sh::(anonymous namespace)::ValidateSwitch", %"class.sh::(anonymous namespace)::ValidateSwitch"* %0, i64 0, i32 13, i32 0
  %4 = getelementptr inbounds %"class.sh::(anonymous namespace)::ValidateSwitch", %"class.sh::(anonymous namespace)::ValidateSwitch"* %0, i64 0, i32 13, i32 0, i32 1, i32 0, i32 0
  %5 = bitcast %"class.std::__1::__tree_end_node"* %4 to %"class.std::__1::__tree_node.63"**
  %6 = load %"class.std::__1::__tree_node.63"*, %"class.std::__1::__tree_node.63"** %5, align 8
  tail call void @_ZNSt3__16__treeIjNS_4lessIjEENS_9allocatorIjEEE7destroyEPNS_11__tree_nodeIjPvEE(%"class.std::__1::__tree.36"* %3, %"class.std::__1::__tree_node.63"* %6) #8
  %7 = getelementptr inbounds %"class.sh::(anonymous namespace)::ValidateSwitch", %"class.sh::(anonymous namespace)::ValidateSwitch"* %0, i64 0, i32 12, i32 0
  %8 = getelementptr inbounds %"class.sh::(anonymous namespace)::ValidateSwitch", %"class.sh::(anonymous namespace)::ValidateSwitch"* %0, i64 0, i32 12, i32 0, i32 1, i32 0, i32 0
  %9 = bitcast %"class.std::__1::__tree_end_node"* %8 to %"class.std::__1::__tree_node"**
  %10 = load %"class.std::__1::__tree_node"*, %"class.std::__1::__tree_node"** %9, align 8
  tail call void @_ZNSt3__16__treeIiNS_4lessIiEENS_9allocatorIiEEE7destroyEPNS_11__tree_nodeIiPvEE(%"class.std::__1::__tree"* %7, %"class.std::__1::__tree_node"* %10) #8
  %11 = getelementptr inbounds %"class.sh::(anonymous namespace)::ValidateSwitch", %"class.sh::(anonymous namespace)::ValidateSwitch"* %0, i64 0, i32 0
  tail call void @_ZN2sh16TIntermTraverserD2Ev(%"class.sh::TIntermTraverser"* %11) #8
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal void @_ZN2sh12_GLOBAL__N_114ValidateSwitch11visitSymbolEPNS_13TIntermSymbolE(%"class.sh::(anonymous namespace)::ValidateSwitch"* nocapture, %"class.sh::TIntermSymbol"* nocapture readnone) unnamed_addr #4 align 2 {
  %3 = getelementptr inbounds %"class.sh::(anonymous namespace)::ValidateSwitch", %"class.sh::(anonymous namespace)::ValidateSwitch"* %0, i64 0, i32 5
  %4 = load i8, i8* %3, align 1, !range !2
  %5 = icmp eq i8 %4, 0
  br i1 %5, label %6, label %8

6:                                                ; preds = %2
  %7 = getelementptr inbounds %"class.sh::(anonymous namespace)::ValidateSwitch", %"class.sh::(anonymous namespace)::ValidateSwitch"* %0, i64 0, i32 6
  store i8 1, i8* %7, align 2
  br label %8

8:                                                ; preds = %2, %6
  %9 = getelementptr inbounds %"class.sh::(anonymous namespace)::ValidateSwitch", %"class.sh::(anonymous namespace)::ValidateSwitch"* %0, i64 0, i32 7
  store i8 0, i8* %9, align 1
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal void @_ZN2sh12_GLOBAL__N_114ValidateSwitch18visitConstantUnionEPNS_20TIntermConstantUnionE(%"class.sh::(anonymous namespace)::ValidateSwitch"* nocapture, %"class.sh::TIntermConstantUnion"* nocapture readnone) unnamed_addr #4 align 2 {
  %3 = getelementptr inbounds %"class.sh::(anonymous namespace)::ValidateSwitch", %"class.sh::(anonymous namespace)::ValidateSwitch"* %0, i64 0, i32 5
  %4 = load i8, i8* %3, align 1, !range !2
  %5 = icmp eq i8 %4, 0
  br i1 %5, label %6, label %8

6:                                                ; preds = %2
  %7 = getelementptr inbounds %"class.sh::(anonymous namespace)::ValidateSwitch", %"class.sh::(anonymous namespace)::ValidateSwitch"* %0, i64 0, i32 6
  store i8 1, i8* %7, align 2
  br label %8

8:                                                ; preds = %2, %6
  %9 = getelementptr inbounds %"class.sh::(anonymous namespace)::ValidateSwitch", %"class.sh::(anonymous namespace)::ValidateSwitch"* %0, i64 0, i32 7
  store i8 0, i8* %9, align 1
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal zeroext i1 @_ZN2sh12_GLOBAL__N_114ValidateSwitch12visitSwizzleENS_5VisitEPNS_14TIntermSwizzleE(%"class.sh::(anonymous namespace)::ValidateSwitch"* nocapture, i32, %"class.sh::TIntermSwizzle"* nocapture readnone) unnamed_addr #4 align 2 {
  %4 = getelementptr inbounds %"class.sh::(anonymous namespace)::ValidateSwitch", %"class.sh::(anonymous namespace)::ValidateSwitch"* %0, i64 0, i32 5
  %5 = load i8, i8* %4, align 1, !range !2
  %6 = icmp eq i8 %5, 0
  br i1 %6, label %7, label %9

7:                                                ; preds = %3
  %8 = getelementptr inbounds %"class.sh::(anonymous namespace)::ValidateSwitch", %"class.sh::(anonymous namespace)::ValidateSwitch"* %0, i64 0, i32 6
  store i8 1, i8* %8, align 2
  br label %9

9:                                                ; preds = %3, %7
  %10 = getelementptr inbounds %"class.sh::(anonymous namespace)::ValidateSwitch", %"class.sh::(anonymous namespace)::ValidateSwitch"* %0, i64 0, i32 7
  store i8 0, i8* %10, align 1
  ret i1 true
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal zeroext i1 @_ZN2sh12_GLOBAL__N_114ValidateSwitch11visitBinaryENS_5VisitEPNS_13TIntermBinaryE(%"class.sh::(anonymous namespace)::ValidateSwitch"* nocapture, i32, %"class.sh::TIntermBinary"* nocapture readnone) unnamed_addr #4 align 2 {
  %4 = getelementptr inbounds %"class.sh::(anonymous namespace)::ValidateSwitch", %"class.sh::(anonymous namespace)::ValidateSwitch"* %0, i64 0, i32 5
  %5 = load i8, i8* %4, align 1, !range !2
  %6 = icmp eq i8 %5, 0
  br i1 %6, label %7, label %9

7:                                                ; preds = %3
  %8 = getelementptr inbounds %"class.sh::(anonymous namespace)::ValidateSwitch", %"class.sh::(anonymous namespace)::ValidateSwitch"* %0, i64 0, i32 6
  store i8 1, i8* %8, align 2
  br label %9

9:                                                ; preds = %3, %7
  %10 = getelementptr inbounds %"class.sh::(anonymous namespace)::ValidateSwitch", %"class.sh::(anonymous namespace)::ValidateSwitch"* %0, i64 0, i32 7
  store i8 0, i8* %10, align 1
  ret i1 true
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal zeroext i1 @_ZN2sh12_GLOBAL__N_114ValidateSwitch10visitUnaryENS_5VisitEPNS_12TIntermUnaryE(%"class.sh::(anonymous namespace)::ValidateSwitch"* nocapture, i32, %"class.sh::TIntermUnary"* nocapture readnone) unnamed_addr #4 align 2 {
  %4 = getelementptr inbounds %"class.sh::(anonymous namespace)::ValidateSwitch", %"class.sh::(anonymous namespace)::ValidateSwitch"* %0, i64 0, i32 5
  %5 = load i8, i8* %4, align 1, !range !2
  %6 = icmp eq i8 %5, 0
  br i1 %6, label %7, label %9

7:                                                ; preds = %3
  %8 = getelementptr inbounds %"class.sh::(anonymous namespace)::ValidateSwitch", %"class.sh::(anonymous namespace)::ValidateSwitch"* %0, i64 0, i32 6
  store i8 1, i8* %8, align 2
  br label %9

9:                                                ; preds = %3, %7
  %10 = getelementptr inbounds %"class.sh::(anonymous namespace)::ValidateSwitch", %"class.sh::(anonymous namespace)::ValidateSwitch"* %0, i64 0, i32 7
  store i8 0, i8* %10, align 1
  ret i1 true
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal zeroext i1 @_ZN2sh12_GLOBAL__N_114ValidateSwitch12visitTernaryENS_5VisitEPNS_14TIntermTernaryE(%"class.sh::(anonymous namespace)::ValidateSwitch"* nocapture, i32, %"class.sh::TIntermTernary"* nocapture readnone) unnamed_addr #4 align 2 {
  %4 = getelementptr inbounds %"class.sh::(anonymous namespace)::ValidateSwitch", %"class.sh::(anonymous namespace)::ValidateSwitch"* %0, i64 0, i32 5
  %5 = load i8, i8* %4, align 1, !range !2
  %6 = icmp eq i8 %5, 0
  br i1 %6, label %7, label %9

7:                                                ; preds = %3
  %8 = getelementptr inbounds %"class.sh::(anonymous namespace)::ValidateSwitch", %"class.sh::(anonymous namespace)::ValidateSwitch"* %0, i64 0, i32 6
  store i8 1, i8* %8, align 2
  br label %9

9:                                                ; preds = %3, %7
  %10 = getelementptr inbounds %"class.sh::(anonymous namespace)::ValidateSwitch", %"class.sh::(anonymous namespace)::ValidateSwitch"* %0, i64 0, i32 7
  store i8 0, i8* %10, align 1
  ret i1 true
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal zeroext i1 @_ZN2sh12_GLOBAL__N_114ValidateSwitch11visitIfElseENS_5VisitEPNS_13TIntermIfElseE(%"class.sh::(anonymous namespace)::ValidateSwitch"* nocapture, i32, %"class.sh::TIntermIfElse"* nocapture readnone) unnamed_addr #4 align 2 {
  switch i32 %1, label %10 [
    i32 0, label %5
    i32 2, label %4
  ]

4:                                                ; preds = %3
  br label %5

5:                                                ; preds = %3, %4
  %6 = phi i32 [ -1, %4 ], [ 1, %3 ]
  %7 = getelementptr inbounds %"class.sh::(anonymous namespace)::ValidateSwitch", %"class.sh::(anonymous namespace)::ValidateSwitch"* %0, i64 0, i32 8
  %8 = load i32, i32* %7, align 4
  %9 = add nsw i32 %8, %6
  store i32 %9, i32* %7, align 4
  br label %10

10:                                               ; preds = %5, %3
  %11 = getelementptr inbounds %"class.sh::(anonymous namespace)::ValidateSwitch", %"class.sh::(anonymous namespace)::ValidateSwitch"* %0, i64 0, i32 5
  %12 = load i8, i8* %11, align 1, !range !2
  %13 = icmp eq i8 %12, 0
  br i1 %13, label %14, label %16

14:                                               ; preds = %10
  %15 = getelementptr inbounds %"class.sh::(anonymous namespace)::ValidateSwitch", %"class.sh::(anonymous namespace)::ValidateSwitch"* %0, i64 0, i32 6
  store i8 1, i8* %15, align 2
  br label %16

16:                                               ; preds = %10, %14
  %17 = getelementptr inbounds %"class.sh::(anonymous namespace)::ValidateSwitch", %"class.sh::(anonymous namespace)::ValidateSwitch"* %0, i64 0, i32 7
  store i8 0, i8* %17, align 1
  ret i1 true
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal zeroext i1 @_ZN2sh12_GLOBAL__N_114ValidateSwitch11visitSwitchENS_5VisitEPNS_13TIntermSwitchE(%"class.sh::(anonymous namespace)::ValidateSwitch"* nocapture, i32, %"class.sh::TIntermSwitch"* nocapture readnone) unnamed_addr #4 align 2 {
  %4 = getelementptr inbounds %"class.sh::(anonymous namespace)::ValidateSwitch", %"class.sh::(anonymous namespace)::ValidateSwitch"* %0, i64 0, i32 5
  %5 = load i8, i8* %4, align 1, !range !2
  %6 = icmp eq i8 %5, 0
  br i1 %6, label %7, label %9

7:                                                ; preds = %3
  %8 = getelementptr inbounds %"class.sh::(anonymous namespace)::ValidateSwitch", %"class.sh::(anonymous namespace)::ValidateSwitch"* %0, i64 0, i32 6
  store i8 1, i8* %8, align 2
  br label %9

9:                                                ; preds = %3, %7
  %10 = getelementptr inbounds %"class.sh::(anonymous namespace)::ValidateSwitch", %"class.sh::(anonymous namespace)::ValidateSwitch"* %0, i64 0, i32 7
  store i8 0, i8* %10, align 1
  ret i1 false
}

; Function Attrs: nounwind ssp uwtable
define internal zeroext i1 @_ZN2sh12_GLOBAL__N_114ValidateSwitch9visitCaseENS_5VisitEPNS_11TIntermCaseE(%"class.sh::(anonymous namespace)::ValidateSwitch"*, i32, %"class.sh::TIntermCase"*) unnamed_addr #0 align 2 {
  %4 = getelementptr inbounds %"class.sh::TIntermCase", %"class.sh::TIntermCase"* %2, i64 0, i32 1
  %5 = load %"class.sh::TIntermTyped"*, %"class.sh::TIntermTyped"** %4, align 8
  %6 = icmp eq %"class.sh::TIntermTyped"* %5, null
  %7 = select i1 %6, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.1, i64 0, i64 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i64 0, i64 0)
  %8 = getelementptr inbounds %"class.sh::(anonymous namespace)::ValidateSwitch", %"class.sh::(anonymous namespace)::ValidateSwitch"* %0, i64 0, i32 8
  %9 = load i32, i32* %8, align 4
  %10 = icmp sgt i32 %9, 0
  br i1 %10, label %11, label %16

11:                                               ; preds = %3
  %12 = getelementptr inbounds %"class.sh::(anonymous namespace)::ValidateSwitch", %"class.sh::(anonymous namespace)::ValidateSwitch"* %0, i64 0, i32 3
  %13 = load %"class.sh::TDiagnostics"*, %"class.sh::TDiagnostics"** %12, align 8
  %14 = getelementptr inbounds %"class.sh::TIntermCase", %"class.sh::TIntermCase"* %2, i64 0, i32 0, i32 1
  tail call void @_ZN2sh12TDiagnostics5errorERKNS_10TSourceLocEPKcS5_(%"class.sh::TDiagnostics"* %13, %"struct.sh::TSourceLoc"* dereferenceable(16) %14, i8* getelementptr inbounds ([43 x i8], [43 x i8]* @.str.2, i64 0, i64 0), i8* %7) #8
  %15 = getelementptr inbounds %"class.sh::(anonymous namespace)::ValidateSwitch", %"class.sh::(anonymous namespace)::ValidateSwitch"* %0, i64 0, i32 9
  store i8 1, i8* %15, align 8
  br label %16

16:                                               ; preds = %11, %3
  %17 = getelementptr inbounds %"class.sh::(anonymous namespace)::ValidateSwitch", %"class.sh::(anonymous namespace)::ValidateSwitch"* %0, i64 0, i32 5
  store i8 1, i8* %17, align 1
  %18 = getelementptr inbounds %"class.sh::(anonymous namespace)::ValidateSwitch", %"class.sh::(anonymous namespace)::ValidateSwitch"* %0, i64 0, i32 7
  store i8 1, i8* %18, align 1
  %19 = load %"class.sh::TIntermTyped"*, %"class.sh::TIntermTyped"** %4, align 8
  %20 = icmp eq %"class.sh::TIntermTyped"* %19, null
  br i1 %20, label %21, label %30

21:                                               ; preds = %16
  %22 = getelementptr inbounds %"class.sh::(anonymous namespace)::ValidateSwitch", %"class.sh::(anonymous namespace)::ValidateSwitch"* %0, i64 0, i32 11
  %23 = load i32, i32* %22, align 4
  %24 = add nsw i32 %23, 1
  store i32 %24, i32* %22, align 4
  %25 = icmp sgt i32 %23, 0
  br i1 %25, label %26, label %254

26:                                               ; preds = %21
  %27 = getelementptr inbounds %"class.sh::(anonymous namespace)::ValidateSwitch", %"class.sh::(anonymous namespace)::ValidateSwitch"* %0, i64 0, i32 3
  %28 = load %"class.sh::TDiagnostics"*, %"class.sh::TDiagnostics"** %27, align 8
  %29 = getelementptr inbounds %"class.sh::TIntermCase", %"class.sh::TIntermCase"* %2, i64 0, i32 0, i32 1
  tail call void @_ZN2sh12TDiagnostics5errorERKNS_10TSourceLocEPKcS5_(%"class.sh::TDiagnostics"* %28, %"struct.sh::TSourceLoc"* dereferenceable(16) %29, i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.3, i64 0, i64 0), i8* %7) #8
  br label %254

30:                                               ; preds = %16
  %31 = getelementptr inbounds %"class.sh::TIntermTyped", %"class.sh::TIntermTyped"* %19, i64 0, i32 0
  %32 = bitcast %"class.sh::TIntermTyped"* %19 to %"class.sh::TIntermConstantUnion"* (%"class.sh::TIntermNode"*)***
  %33 = load %"class.sh::TIntermConstantUnion"* (%"class.sh::TIntermNode"*)**, %"class.sh::TIntermConstantUnion"* (%"class.sh::TIntermNode"*)*** %32, align 8
  %34 = getelementptr inbounds %"class.sh::TIntermConstantUnion"* (%"class.sh::TIntermNode"*)*, %"class.sh::TIntermConstantUnion"* (%"class.sh::TIntermNode"*)** %33, i64 5
  %35 = load %"class.sh::TIntermConstantUnion"* (%"class.sh::TIntermNode"*)*, %"class.sh::TIntermConstantUnion"* (%"class.sh::TIntermNode"*)** %34, align 8
  %36 = tail call %"class.sh::TIntermConstantUnion"* %35(%"class.sh::TIntermNode"* %31) #8
  %37 = icmp eq %"class.sh::TIntermConstantUnion"* %36, null
  br i1 %37, label %254, label %38

38:                                               ; preds = %30
  %39 = getelementptr inbounds %"class.sh::TIntermConstantUnion", %"class.sh::TIntermConstantUnion"* %36, i64 0, i32 0, i32 0
  %40 = bitcast %"class.sh::TIntermConstantUnion"* %36 to %"class.sh::TType"* (%"class.sh::TIntermTyped"*)***
  %41 = load %"class.sh::TType"* (%"class.sh::TIntermTyped"*)**, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*** %40, align 8
  %42 = getelementptr inbounds %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)** %41, i64 31
  %43 = load %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)** %42, align 8
  %44 = tail call dereferenceable(184) %"class.sh::TType"* %43(%"class.sh::TIntermTyped"* %39) #8
  %45 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %44, i64 0, i32 0
  %46 = load i32, i32* %45, align 8
  %47 = getelementptr inbounds %"class.sh::(anonymous namespace)::ValidateSwitch", %"class.sh::(anonymous namespace)::ValidateSwitch"* %0, i64 0, i32 1
  %48 = load i32, i32* %47, align 8
  %49 = icmp eq i32 %46, %48
  br i1 %49, label %55, label %50

50:                                               ; preds = %38
  %51 = getelementptr inbounds %"class.sh::(anonymous namespace)::ValidateSwitch", %"class.sh::(anonymous namespace)::ValidateSwitch"* %0, i64 0, i32 3
  %52 = load %"class.sh::TDiagnostics"*, %"class.sh::TDiagnostics"** %51, align 8
  %53 = getelementptr inbounds %"class.sh::TIntermConstantUnion", %"class.sh::TIntermConstantUnion"* %36, i64 0, i32 0, i32 0, i32 0, i32 1
  tail call void @_ZN2sh12TDiagnostics5errorERKNS_10TSourceLocEPKcS5_(%"class.sh::TDiagnostics"* %52, %"struct.sh::TSourceLoc"* dereferenceable(16) %53, i8* getelementptr inbounds ([59 x i8], [59 x i8]* @.str.4, i64 0, i64 0), i8* %7) #8
  %54 = getelementptr inbounds %"class.sh::(anonymous namespace)::ValidateSwitch", %"class.sh::(anonymous namespace)::ValidateSwitch"* %0, i64 0, i32 4
  store i8 1, i8* %54, align 8
  br label %55

55:                                               ; preds = %38, %50
  switch i32 %46, label %254 [
    i32 3, label %56
    i32 4, label %155
  ]

56:                                               ; preds = %55
  %57 = getelementptr inbounds %"class.sh::TIntermConstantUnion", %"class.sh::TIntermConstantUnion"* %36, i64 0, i32 1
  %58 = load %"class.sh::TConstantUnion"*, %"class.sh::TConstantUnion"** %57, align 8
  %59 = icmp eq %"class.sh::TConstantUnion"* %58, null
  br i1 %59, label %62, label %60

60:                                               ; preds = %56
  %61 = tail call i32 @_ZNK2sh14TConstantUnion9getIConstEv(%"class.sh::TConstantUnion"* nonnull %58) #8
  br label %62

62:                                               ; preds = %56, %60
  %63 = phi i32 [ %61, %60 ], [ 0, %56 ]
  %64 = getelementptr inbounds %"class.sh::(anonymous namespace)::ValidateSwitch", %"class.sh::(anonymous namespace)::ValidateSwitch"* %0, i64 0, i32 12
  %65 = getelementptr inbounds %"class.sh::(anonymous namespace)::ValidateSwitch", %"class.sh::(anonymous namespace)::ValidateSwitch"* %0, i64 0, i32 12, i32 0, i32 1, i32 0, i32 0
  %66 = bitcast %"class.std::__1::__tree_end_node"* %65 to %"class.std::__1::__tree_node"**
  %67 = load %"class.std::__1::__tree_node"*, %"class.std::__1::__tree_node"** %66, align 8
  %68 = icmp eq %"class.std::__1::__tree_node"* %67, null
  br i1 %68, label %123, label %69

69:                                               ; preds = %62, %69
  %70 = phi %"class.std::__1::__tree_end_node"* [ %80, %69 ], [ %65, %62 ]
  %71 = phi %"class.std::__1::__tree_node"* [ %81, %69 ], [ %67, %62 ]
  %72 = getelementptr inbounds %"class.std::__1::__tree_node", %"class.std::__1::__tree_node"* %71, i64 0, i32 1
  %73 = load i32, i32* %72, align 4
  %74 = icmp slt i32 %73, %63
  %75 = getelementptr inbounds %"class.std::__1::__tree_node", %"class.std::__1::__tree_node"* %71, i64 0, i32 0, i32 1
  %76 = bitcast %"class.std::__1::__tree_node_base"** %75 to %"class.std::__1::__tree_node"**
  %77 = getelementptr inbounds %"class.std::__1::__tree_node", %"class.std::__1::__tree_node"* %71, i64 0, i32 0, i32 0
  %78 = bitcast %"class.std::__1::__tree_node"* %71 to %"class.std::__1::__tree_node"**
  %79 = select i1 %74, %"class.std::__1::__tree_node"** %76, %"class.std::__1::__tree_node"** %78
  %80 = select i1 %74, %"class.std::__1::__tree_end_node"* %70, %"class.std::__1::__tree_end_node"* %77
  %81 = load %"class.std::__1::__tree_node"*, %"class.std::__1::__tree_node"** %79, align 8
  %82 = icmp eq %"class.std::__1::__tree_node"* %81, null
  br i1 %82, label %83, label %69

83:                                               ; preds = %69
  %84 = icmp eq %"class.std::__1::__tree_end_node"* %80, %65
  br i1 %84, label %95, label %85

85:                                               ; preds = %83
  %86 = bitcast %"class.std::__1::__tree_end_node"* %80 to %"class.std::__1::__tree_node"*
  %87 = getelementptr inbounds %"class.std::__1::__tree_node", %"class.std::__1::__tree_node"* %86, i64 0, i32 1
  %88 = load i32, i32* %87, align 4
  %89 = icmp slt i32 %63, %88
  br i1 %89, label %95, label %90

90:                                               ; preds = %85
  %91 = getelementptr inbounds %"class.sh::(anonymous namespace)::ValidateSwitch", %"class.sh::(anonymous namespace)::ValidateSwitch"* %0, i64 0, i32 3
  %92 = load %"class.sh::TDiagnostics"*, %"class.sh::TDiagnostics"** %91, align 8
  %93 = getelementptr inbounds %"class.sh::TIntermConstantUnion", %"class.sh::TIntermConstantUnion"* %36, i64 0, i32 0, i32 0, i32 0, i32 1
  tail call void @_ZN2sh12TDiagnostics5errorERKNS_10TSourceLocEPKcS5_(%"class.sh::TDiagnostics"* %92, %"struct.sh::TSourceLoc"* dereferenceable(16) %93, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.5, i64 0, i64 0), i8* %7) #8
  %94 = getelementptr inbounds %"class.sh::(anonymous namespace)::ValidateSwitch", %"class.sh::(anonymous namespace)::ValidateSwitch"* %0, i64 0, i32 14
  store i8 1, i8* %94, align 8
  br label %254

95:                                               ; preds = %83, %85
  %96 = getelementptr inbounds %"class.sh::(anonymous namespace)::ValidateSwitch", %"class.sh::(anonymous namespace)::ValidateSwitch"* %0, i64 0, i32 12, i32 0, i32 1, i32 0, i32 0, i32 0
  br label %97

97:                                               ; preds = %119, %95
  %98 = phi %"class.std::__1::__tree_node"* [ %122, %119 ], [ %67, %95 ]
  %99 = phi %"class.std::__1::__tree_node_base"** [ %121, %119 ], [ %96, %95 ]
  %100 = getelementptr inbounds %"class.std::__1::__tree_node", %"class.std::__1::__tree_node"* %98, i64 0, i32 1
  %101 = load i32, i32* %100, align 4
  %102 = icmp slt i32 %63, %101
  br i1 %102, label %103, label %109

103:                                              ; preds = %97
  %104 = getelementptr inbounds %"class.std::__1::__tree_node", %"class.std::__1::__tree_node"* %98, i64 0, i32 0, i32 0, i32 0
  %105 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %104, align 8
  %106 = icmp eq %"class.std::__1::__tree_node_base"* %105, null
  br i1 %106, label %107, label %119

107:                                              ; preds = %103
  %108 = getelementptr inbounds %"class.std::__1::__tree_node", %"class.std::__1::__tree_node"* %98, i64 0, i32 0, i32 0
  br label %125

109:                                              ; preds = %97
  %110 = icmp slt i32 %101, %63
  br i1 %110, label %111, label %117

111:                                              ; preds = %109
  %112 = getelementptr inbounds %"class.std::__1::__tree_node", %"class.std::__1::__tree_node"* %98, i64 0, i32 0, i32 1
  %113 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %112, align 8
  %114 = icmp eq %"class.std::__1::__tree_node_base"* %113, null
  br i1 %114, label %115, label %119

115:                                              ; preds = %111
  %116 = getelementptr inbounds %"class.std::__1::__tree_node", %"class.std::__1::__tree_node"* %98, i64 0, i32 0, i32 0
  br label %125

117:                                              ; preds = %109
  %118 = getelementptr inbounds %"class.std::__1::__tree_node", %"class.std::__1::__tree_node"* %98, i64 0, i32 0, i32 0
  br label %125

119:                                              ; preds = %111, %103
  %120 = phi %"class.std::__1::__tree_node_base"* [ %105, %103 ], [ %113, %111 ]
  %121 = phi %"class.std::__1::__tree_node_base"** [ %104, %103 ], [ %112, %111 ]
  %122 = bitcast %"class.std::__1::__tree_node_base"* %120 to %"class.std::__1::__tree_node"*
  br label %97

123:                                              ; preds = %62
  %124 = getelementptr inbounds %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_end_node"* %65, i64 0, i32 0
  br label %125

125:                                              ; preds = %123, %117, %115, %107
  %126 = phi %"class.std::__1::__tree_end_node"* [ %65, %123 ], [ %108, %107 ], [ %116, %115 ], [ %118, %117 ]
  %127 = phi %"class.std::__1::__tree_node_base"** [ %124, %123 ], [ %104, %107 ], [ %112, %115 ], [ %99, %117 ]
  %128 = bitcast %"class.std::__1::__tree_node_base"** %127 to %"class.std::__1::__tree_node"**
  %129 = load %"class.std::__1::__tree_node"*, %"class.std::__1::__tree_node"** %128, align 8
  %130 = icmp eq %"class.std::__1::__tree_node"* %129, null
  br i1 %130, label %131, label %254

131:                                              ; preds = %125
  %132 = tail call i8* @_Znwm(i64 32) #9, !noalias !3
  %133 = getelementptr inbounds i8, i8* %132, i64 28
  %134 = bitcast i8* %133 to i32*
  store i32 %63, i32* %134, align 4, !noalias !3
  %135 = bitcast i8* %132 to %"class.std::__1::__tree_node_base"*
  %136 = getelementptr inbounds i8, i8* %132, i64 16
  %137 = bitcast i8* %136 to %"class.std::__1::__tree_end_node"**
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %132, i8 0, i64 16, i1 false) #8
  store %"class.std::__1::__tree_end_node"* %126, %"class.std::__1::__tree_end_node"** %137, align 8
  %138 = bitcast %"class.std::__1::__tree_node_base"** %127 to i8**
  store i8* %132, i8** %138, align 8
  %139 = getelementptr inbounds %"class.std::__1::set", %"class.std::__1::set"* %64, i64 0, i32 0, i32 0
  %140 = load %"class.std::__1::__tree_end_node"*, %"class.std::__1::__tree_end_node"** %139, align 8
  %141 = getelementptr inbounds %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_end_node"* %140, i64 0, i32 0
  %142 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %141, align 8
  %143 = icmp eq %"class.std::__1::__tree_node_base"* %142, null
  br i1 %143, label %148, label %144

144:                                              ; preds = %131
  %145 = ptrtoint %"class.std::__1::__tree_node_base"* %142 to i64
  %146 = bitcast %"class.std::__1::set"* %64 to i64*
  store i64 %145, i64* %146, align 8
  %147 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %127, align 8
  br label %148

148:                                              ; preds = %144, %131
  %149 = phi %"class.std::__1::__tree_node_base"* [ %135, %131 ], [ %147, %144 ]
  %150 = getelementptr inbounds %"class.sh::(anonymous namespace)::ValidateSwitch", %"class.sh::(anonymous namespace)::ValidateSwitch"* %0, i64 0, i32 12, i32 0, i32 1, i32 0, i32 0, i32 0
  %151 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %150, align 8
  tail call void @_ZNSt3__127__tree_balance_after_insertIPNS_16__tree_node_baseIPvEEEEvT_S5_(%"class.std::__1::__tree_node_base"* %151, %"class.std::__1::__tree_node_base"* %149) #8
  %152 = getelementptr inbounds %"class.sh::(anonymous namespace)::ValidateSwitch", %"class.sh::(anonymous namespace)::ValidateSwitch"* %0, i64 0, i32 12, i32 0, i32 2, i32 0, i32 0
  %153 = load i64, i64* %152, align 8
  %154 = add i64 %153, 1
  store i64 %154, i64* %152, align 8
  br label %254

155:                                              ; preds = %55
  %156 = getelementptr inbounds %"class.sh::TIntermConstantUnion", %"class.sh::TIntermConstantUnion"* %36, i64 0, i32 1
  %157 = load %"class.sh::TConstantUnion"*, %"class.sh::TConstantUnion"** %156, align 8
  %158 = icmp eq %"class.sh::TConstantUnion"* %157, null
  br i1 %158, label %161, label %159

159:                                              ; preds = %155
  %160 = tail call i32 @_ZNK2sh14TConstantUnion9getUConstEv(%"class.sh::TConstantUnion"* nonnull %157) #8
  br label %161

161:                                              ; preds = %155, %159
  %162 = phi i32 [ %160, %159 ], [ 0, %155 ]
  %163 = getelementptr inbounds %"class.sh::(anonymous namespace)::ValidateSwitch", %"class.sh::(anonymous namespace)::ValidateSwitch"* %0, i64 0, i32 13
  %164 = getelementptr inbounds %"class.sh::(anonymous namespace)::ValidateSwitch", %"class.sh::(anonymous namespace)::ValidateSwitch"* %0, i64 0, i32 13, i32 0, i32 1, i32 0, i32 0
  %165 = bitcast %"class.std::__1::__tree_end_node"* %164 to %"class.std::__1::__tree_node.63"**
  %166 = load %"class.std::__1::__tree_node.63"*, %"class.std::__1::__tree_node.63"** %165, align 8
  %167 = icmp eq %"class.std::__1::__tree_node.63"* %166, null
  br i1 %167, label %222, label %168

168:                                              ; preds = %161, %168
  %169 = phi %"class.std::__1::__tree_end_node"* [ %179, %168 ], [ %164, %161 ]
  %170 = phi %"class.std::__1::__tree_node.63"* [ %180, %168 ], [ %166, %161 ]
  %171 = getelementptr inbounds %"class.std::__1::__tree_node.63", %"class.std::__1::__tree_node.63"* %170, i64 0, i32 1
  %172 = load i32, i32* %171, align 4
  %173 = icmp ult i32 %172, %162
  %174 = getelementptr inbounds %"class.std::__1::__tree_node.63", %"class.std::__1::__tree_node.63"* %170, i64 0, i32 0, i32 1
  %175 = bitcast %"class.std::__1::__tree_node_base"** %174 to %"class.std::__1::__tree_node.63"**
  %176 = getelementptr inbounds %"class.std::__1::__tree_node.63", %"class.std::__1::__tree_node.63"* %170, i64 0, i32 0, i32 0
  %177 = bitcast %"class.std::__1::__tree_node.63"* %170 to %"class.std::__1::__tree_node.63"**
  %178 = select i1 %173, %"class.std::__1::__tree_node.63"** %175, %"class.std::__1::__tree_node.63"** %177
  %179 = select i1 %173, %"class.std::__1::__tree_end_node"* %169, %"class.std::__1::__tree_end_node"* %176
  %180 = load %"class.std::__1::__tree_node.63"*, %"class.std::__1::__tree_node.63"** %178, align 8
  %181 = icmp eq %"class.std::__1::__tree_node.63"* %180, null
  br i1 %181, label %182, label %168

182:                                              ; preds = %168
  %183 = icmp eq %"class.std::__1::__tree_end_node"* %179, %164
  br i1 %183, label %194, label %184

184:                                              ; preds = %182
  %185 = bitcast %"class.std::__1::__tree_end_node"* %179 to %"class.std::__1::__tree_node.63"*
  %186 = getelementptr inbounds %"class.std::__1::__tree_node.63", %"class.std::__1::__tree_node.63"* %185, i64 0, i32 1
  %187 = load i32, i32* %186, align 4
  %188 = icmp ult i32 %162, %187
  br i1 %188, label %194, label %189

189:                                              ; preds = %184
  %190 = getelementptr inbounds %"class.sh::(anonymous namespace)::ValidateSwitch", %"class.sh::(anonymous namespace)::ValidateSwitch"* %0, i64 0, i32 3
  %191 = load %"class.sh::TDiagnostics"*, %"class.sh::TDiagnostics"** %190, align 8
  %192 = getelementptr inbounds %"class.sh::TIntermConstantUnion", %"class.sh::TIntermConstantUnion"* %36, i64 0, i32 0, i32 0, i32 0, i32 1
  tail call void @_ZN2sh12TDiagnostics5errorERKNS_10TSourceLocEPKcS5_(%"class.sh::TDiagnostics"* %191, %"struct.sh::TSourceLoc"* dereferenceable(16) %192, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.5, i64 0, i64 0), i8* %7) #8
  %193 = getelementptr inbounds %"class.sh::(anonymous namespace)::ValidateSwitch", %"class.sh::(anonymous namespace)::ValidateSwitch"* %0, i64 0, i32 14
  store i8 1, i8* %193, align 8
  br label %254

194:                                              ; preds = %182, %184
  %195 = getelementptr inbounds %"class.sh::(anonymous namespace)::ValidateSwitch", %"class.sh::(anonymous namespace)::ValidateSwitch"* %0, i64 0, i32 13, i32 0, i32 1, i32 0, i32 0, i32 0
  br label %196

196:                                              ; preds = %218, %194
  %197 = phi %"class.std::__1::__tree_node.63"* [ %221, %218 ], [ %166, %194 ]
  %198 = phi %"class.std::__1::__tree_node_base"** [ %220, %218 ], [ %195, %194 ]
  %199 = getelementptr inbounds %"class.std::__1::__tree_node.63", %"class.std::__1::__tree_node.63"* %197, i64 0, i32 1
  %200 = load i32, i32* %199, align 4
  %201 = icmp ult i32 %162, %200
  br i1 %201, label %202, label %208

202:                                              ; preds = %196
  %203 = getelementptr inbounds %"class.std::__1::__tree_node.63", %"class.std::__1::__tree_node.63"* %197, i64 0, i32 0, i32 0, i32 0
  %204 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %203, align 8
  %205 = icmp eq %"class.std::__1::__tree_node_base"* %204, null
  br i1 %205, label %206, label %218

206:                                              ; preds = %202
  %207 = getelementptr inbounds %"class.std::__1::__tree_node.63", %"class.std::__1::__tree_node.63"* %197, i64 0, i32 0, i32 0
  br label %224

208:                                              ; preds = %196
  %209 = icmp ult i32 %200, %162
  br i1 %209, label %210, label %216

210:                                              ; preds = %208
  %211 = getelementptr inbounds %"class.std::__1::__tree_node.63", %"class.std::__1::__tree_node.63"* %197, i64 0, i32 0, i32 1
  %212 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %211, align 8
  %213 = icmp eq %"class.std::__1::__tree_node_base"* %212, null
  br i1 %213, label %214, label %218

214:                                              ; preds = %210
  %215 = getelementptr inbounds %"class.std::__1::__tree_node.63", %"class.std::__1::__tree_node.63"* %197, i64 0, i32 0, i32 0
  br label %224

216:                                              ; preds = %208
  %217 = getelementptr inbounds %"class.std::__1::__tree_node.63", %"class.std::__1::__tree_node.63"* %197, i64 0, i32 0, i32 0
  br label %224

218:                                              ; preds = %210, %202
  %219 = phi %"class.std::__1::__tree_node_base"* [ %204, %202 ], [ %212, %210 ]
  %220 = phi %"class.std::__1::__tree_node_base"** [ %203, %202 ], [ %211, %210 ]
  %221 = bitcast %"class.std::__1::__tree_node_base"* %219 to %"class.std::__1::__tree_node.63"*
  br label %196

222:                                              ; preds = %161
  %223 = getelementptr inbounds %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_end_node"* %164, i64 0, i32 0
  br label %224

224:                                              ; preds = %222, %216, %214, %206
  %225 = phi %"class.std::__1::__tree_end_node"* [ %164, %222 ], [ %207, %206 ], [ %215, %214 ], [ %217, %216 ]
  %226 = phi %"class.std::__1::__tree_node_base"** [ %223, %222 ], [ %203, %206 ], [ %211, %214 ], [ %198, %216 ]
  %227 = bitcast %"class.std::__1::__tree_node_base"** %226 to %"class.std::__1::__tree_node.63"**
  %228 = load %"class.std::__1::__tree_node.63"*, %"class.std::__1::__tree_node.63"** %227, align 8
  %229 = icmp eq %"class.std::__1::__tree_node.63"* %228, null
  br i1 %229, label %230, label %254

230:                                              ; preds = %224
  %231 = tail call i8* @_Znwm(i64 32) #9, !noalias !6
  %232 = getelementptr inbounds i8, i8* %231, i64 28
  %233 = bitcast i8* %232 to i32*
  store i32 %162, i32* %233, align 4, !noalias !6
  %234 = bitcast i8* %231 to %"class.std::__1::__tree_node_base"*
  %235 = getelementptr inbounds i8, i8* %231, i64 16
  %236 = bitcast i8* %235 to %"class.std::__1::__tree_end_node"**
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %231, i8 0, i64 16, i1 false) #8
  store %"class.std::__1::__tree_end_node"* %225, %"class.std::__1::__tree_end_node"** %236, align 8
  %237 = bitcast %"class.std::__1::__tree_node_base"** %226 to i8**
  store i8* %231, i8** %237, align 8
  %238 = getelementptr inbounds %"class.std::__1::set.35", %"class.std::__1::set.35"* %163, i64 0, i32 0, i32 0
  %239 = load %"class.std::__1::__tree_end_node"*, %"class.std::__1::__tree_end_node"** %238, align 8
  %240 = getelementptr inbounds %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_end_node"* %239, i64 0, i32 0
  %241 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %240, align 8
  %242 = icmp eq %"class.std::__1::__tree_node_base"* %241, null
  br i1 %242, label %247, label %243

243:                                              ; preds = %230
  %244 = ptrtoint %"class.std::__1::__tree_node_base"* %241 to i64
  %245 = bitcast %"class.std::__1::set.35"* %163 to i64*
  store i64 %244, i64* %245, align 8
  %246 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %226, align 8
  br label %247

247:                                              ; preds = %243, %230
  %248 = phi %"class.std::__1::__tree_node_base"* [ %234, %230 ], [ %246, %243 ]
  %249 = getelementptr inbounds %"class.sh::(anonymous namespace)::ValidateSwitch", %"class.sh::(anonymous namespace)::ValidateSwitch"* %0, i64 0, i32 13, i32 0, i32 1, i32 0, i32 0, i32 0
  %250 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %249, align 8
  tail call void @_ZNSt3__127__tree_balance_after_insertIPNS_16__tree_node_baseIPvEEEEvT_S5_(%"class.std::__1::__tree_node_base"* %250, %"class.std::__1::__tree_node_base"* %248) #8
  %251 = getelementptr inbounds %"class.sh::(anonymous namespace)::ValidateSwitch", %"class.sh::(anonymous namespace)::ValidateSwitch"* %0, i64 0, i32 13, i32 0, i32 2, i32 0, i32 0
  %252 = load i64, i64* %251, align 8
  %253 = add i64 %252, 1
  store i64 %253, i64* %251, align 8
  br label %254

254:                                              ; preds = %247, %224, %148, %125, %189, %90, %30, %26, %21, %55
  ret i1 false
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN2sh16TIntermTraverser22visitFunctionPrototypeEPNS_24TIntermFunctionPrototypeE(%"class.sh::TIntermTraverser"*, %"class.sh::TIntermFunctionPrototype"*) unnamed_addr #0 comdat align 2 {
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZN2sh16TIntermTraverser23visitFunctionDefinitionENS_5VisitEPNS_25TIntermFunctionDefinitionE(%"class.sh::TIntermTraverser"*, i32, %"class.sh::TIntermFunctionDefinition"*) unnamed_addr #0 comdat align 2 {
  ret i1 true
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal zeroext i1 @_ZN2sh12_GLOBAL__N_114ValidateSwitch14visitAggregateENS_5VisitEPNS_16TIntermAggregateE(%"class.sh::(anonymous namespace)::ValidateSwitch"* nocapture, i32, %"class.sh::TIntermAggregate"* nocapture readnone) unnamed_addr #4 align 2 {
  %4 = getelementptr inbounds %"class.sh::(anonymous namespace)::ValidateSwitch", %"class.sh::(anonymous namespace)::ValidateSwitch"* %0, i64 0, i32 0, i32 11, i32 0
  %5 = getelementptr inbounds %"class.sh::(anonymous namespace)::ValidateSwitch", %"class.sh::(anonymous namespace)::ValidateSwitch"* %0, i64 0, i32 0, i32 11, i32 0, i32 0, i32 1
  %6 = bitcast %"class.sh::TIntermNode"*** %5 to i64*
  %7 = load i64, i64* %6, align 8
  %8 = bitcast %"class.std::__1::vector"* %4 to i64*
  %9 = load i64, i64* %8, align 8
  %10 = sub i64 %7, %9
  %11 = ashr exact i64 %10, 3
  %12 = icmp ult i64 %11, 2
  br i1 %12, label %27, label %13

13:                                               ; preds = %3
  %14 = inttoptr i64 %9 to %"class.sh::TIntermNode"**
  %15 = add nsw i64 %11, -2
  %16 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %14, i64 %15
  %17 = load %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %16, align 8
  %18 = icmp eq %"class.sh::TIntermNode"* %17, null
  br i1 %18, label %27, label %19

19:                                               ; preds = %13
  %20 = getelementptr inbounds %"class.sh::(anonymous namespace)::ValidateSwitch", %"class.sh::(anonymous namespace)::ValidateSwitch"* %0, i64 0, i32 5
  %21 = load i8, i8* %20, align 1, !range !2
  %22 = icmp eq i8 %21, 0
  br i1 %22, label %23, label %25

23:                                               ; preds = %19
  %24 = getelementptr inbounds %"class.sh::(anonymous namespace)::ValidateSwitch", %"class.sh::(anonymous namespace)::ValidateSwitch"* %0, i64 0, i32 6
  store i8 1, i8* %24, align 2
  br label %25

25:                                               ; preds = %19, %23
  %26 = getelementptr inbounds %"class.sh::(anonymous namespace)::ValidateSwitch", %"class.sh::(anonymous namespace)::ValidateSwitch"* %0, i64 0, i32 7
  store i8 0, i8* %26, align 1
  br label %27

27:                                               ; preds = %3, %13, %25
  ret i1 true
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal zeroext i1 @_ZN2sh12_GLOBAL__N_114ValidateSwitch10visitBlockENS_5VisitEPNS_12TIntermBlockE(%"class.sh::(anonymous namespace)::ValidateSwitch"* nocapture, i32, %"class.sh::TIntermBlock"* nocapture readnone) unnamed_addr #4 align 2 {
  %4 = getelementptr inbounds %"class.sh::(anonymous namespace)::ValidateSwitch", %"class.sh::(anonymous namespace)::ValidateSwitch"* %0, i64 0, i32 0, i32 11, i32 0
  %5 = getelementptr inbounds %"class.sh::(anonymous namespace)::ValidateSwitch", %"class.sh::(anonymous namespace)::ValidateSwitch"* %0, i64 0, i32 0, i32 11, i32 0, i32 0, i32 1
  %6 = bitcast %"class.sh::TIntermNode"*** %5 to i64*
  %7 = load i64, i64* %6, align 8
  %8 = bitcast %"class.std::__1::vector"* %4 to i64*
  %9 = load i64, i64* %8, align 8
  %10 = sub i64 %7, %9
  %11 = ashr exact i64 %10, 3
  %12 = icmp ult i64 %11, 2
  br i1 %12, label %35, label %13

13:                                               ; preds = %3
  %14 = inttoptr i64 %9 to %"class.sh::TIntermNode"**
  %15 = add nsw i64 %11, -2
  %16 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %14, i64 %15
  %17 = load %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %16, align 8
  %18 = icmp eq %"class.sh::TIntermNode"* %17, null
  br i1 %18, label %35, label %19

19:                                               ; preds = %13
  %20 = getelementptr inbounds %"class.sh::(anonymous namespace)::ValidateSwitch", %"class.sh::(anonymous namespace)::ValidateSwitch"* %0, i64 0, i32 5
  %21 = load i8, i8* %20, align 1, !range !2
  %22 = icmp eq i8 %21, 0
  br i1 %22, label %23, label %25

23:                                               ; preds = %19
  %24 = getelementptr inbounds %"class.sh::(anonymous namespace)::ValidateSwitch", %"class.sh::(anonymous namespace)::ValidateSwitch"* %0, i64 0, i32 6
  store i8 1, i8* %24, align 2
  br label %25

25:                                               ; preds = %19, %23
  %26 = getelementptr inbounds %"class.sh::(anonymous namespace)::ValidateSwitch", %"class.sh::(anonymous namespace)::ValidateSwitch"* %0, i64 0, i32 7
  store i8 0, i8* %26, align 1
  switch i32 %1, label %35 [
    i32 0, label %27
    i32 2, label %31
  ]

27:                                               ; preds = %25
  %28 = getelementptr inbounds %"class.sh::(anonymous namespace)::ValidateSwitch", %"class.sh::(anonymous namespace)::ValidateSwitch"* %0, i64 0, i32 8
  %29 = load i32, i32* %28, align 4
  %30 = add nsw i32 %29, 1
  store i32 %30, i32* %28, align 4
  br label %35

31:                                               ; preds = %25
  %32 = getelementptr inbounds %"class.sh::(anonymous namespace)::ValidateSwitch", %"class.sh::(anonymous namespace)::ValidateSwitch"* %0, i64 0, i32 8
  %33 = load i32, i32* %32, align 4
  %34 = add nsw i32 %33, -1
  store i32 %34, i32* %32, align 4
  br label %35

35:                                               ; preds = %3, %27, %25, %13, %31
  ret i1 true
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZN2sh16TIntermTraverser31visitGlobalQualifierDeclarationENS_5VisitEPNS_33TIntermGlobalQualifierDeclarationE(%"class.sh::TIntermTraverser"*, i32, %"class.sh::TIntermGlobalQualifierDeclaration"*) unnamed_addr #0 comdat align 2 {
  ret i1 true
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal zeroext i1 @_ZN2sh12_GLOBAL__N_114ValidateSwitch16visitDeclarationENS_5VisitEPNS_18TIntermDeclarationE(%"class.sh::(anonymous namespace)::ValidateSwitch"* nocapture, i32, %"class.sh::TIntermDeclaration"* nocapture readnone) unnamed_addr #4 align 2 {
  %4 = getelementptr inbounds %"class.sh::(anonymous namespace)::ValidateSwitch", %"class.sh::(anonymous namespace)::ValidateSwitch"* %0, i64 0, i32 5
  %5 = load i8, i8* %4, align 1, !range !2
  %6 = icmp eq i8 %5, 0
  br i1 %6, label %7, label %9

7:                                                ; preds = %3
  %8 = getelementptr inbounds %"class.sh::(anonymous namespace)::ValidateSwitch", %"class.sh::(anonymous namespace)::ValidateSwitch"* %0, i64 0, i32 6
  store i8 1, i8* %8, align 2
  br label %9

9:                                                ; preds = %3, %7
  %10 = getelementptr inbounds %"class.sh::(anonymous namespace)::ValidateSwitch", %"class.sh::(anonymous namespace)::ValidateSwitch"* %0, i64 0, i32 7
  store i8 0, i8* %10, align 1
  ret i1 true
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal zeroext i1 @_ZN2sh12_GLOBAL__N_114ValidateSwitch9visitLoopENS_5VisitEPNS_11TIntermLoopE(%"class.sh::(anonymous namespace)::ValidateSwitch"* nocapture, i32, %"class.sh::TIntermLoop"* nocapture readnone) unnamed_addr #4 align 2 {
  switch i32 %1, label %10 [
    i32 0, label %5
    i32 2, label %4
  ]

4:                                                ; preds = %3
  br label %5

5:                                                ; preds = %3, %4
  %6 = phi i32 [ -1, %4 ], [ 1, %3 ]
  %7 = getelementptr inbounds %"class.sh::(anonymous namespace)::ValidateSwitch", %"class.sh::(anonymous namespace)::ValidateSwitch"* %0, i64 0, i32 8
  %8 = load i32, i32* %7, align 4
  %9 = add nsw i32 %8, %6
  store i32 %9, i32* %7, align 4
  br label %10

10:                                               ; preds = %5, %3
  %11 = getelementptr inbounds %"class.sh::(anonymous namespace)::ValidateSwitch", %"class.sh::(anonymous namespace)::ValidateSwitch"* %0, i64 0, i32 5
  %12 = load i8, i8* %11, align 1, !range !2
  %13 = icmp eq i8 %12, 0
  br i1 %13, label %14, label %16

14:                                               ; preds = %10
  %15 = getelementptr inbounds %"class.sh::(anonymous namespace)::ValidateSwitch", %"class.sh::(anonymous namespace)::ValidateSwitch"* %0, i64 0, i32 6
  store i8 1, i8* %15, align 2
  br label %16

16:                                               ; preds = %10, %14
  %17 = getelementptr inbounds %"class.sh::(anonymous namespace)::ValidateSwitch", %"class.sh::(anonymous namespace)::ValidateSwitch"* %0, i64 0, i32 7
  store i8 0, i8* %17, align 1
  ret i1 true
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal zeroext i1 @_ZN2sh12_GLOBAL__N_114ValidateSwitch11visitBranchENS_5VisitEPNS_13TIntermBranchE(%"class.sh::(anonymous namespace)::ValidateSwitch"* nocapture, i32, %"class.sh::TIntermBranch"* nocapture readnone) unnamed_addr #4 align 2 {
  %4 = getelementptr inbounds %"class.sh::(anonymous namespace)::ValidateSwitch", %"class.sh::(anonymous namespace)::ValidateSwitch"* %0, i64 0, i32 5
  %5 = load i8, i8* %4, align 1, !range !2
  %6 = icmp eq i8 %5, 0
  br i1 %6, label %7, label %9

7:                                                ; preds = %3
  %8 = getelementptr inbounds %"class.sh::(anonymous namespace)::ValidateSwitch", %"class.sh::(anonymous namespace)::ValidateSwitch"* %0, i64 0, i32 6
  store i8 1, i8* %8, align 2
  br label %9

9:                                                ; preds = %3, %7
  %10 = getelementptr inbounds %"class.sh::(anonymous namespace)::ValidateSwitch", %"class.sh::(anonymous namespace)::ValidateSwitch"* %0, i64 0, i32 7
  store i8 0, i8* %10, align 1
  ret i1 true
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN2sh16TIntermTraverser26visitPreprocessorDirectiveEPNS_28TIntermPreprocessorDirectiveE(%"class.sh::TIntermTraverser"*, %"class.sh::TIntermPreprocessorDirective"*) unnamed_addr #0 comdat align 2 {
  ret void
}

declare void @_ZN2sh16TIntermTraverser14traverseBinaryEPNS_13TIntermBinaryE(%"class.sh::TIntermTraverser"*, %"class.sh::TIntermBinary"*) unnamed_addr #2

declare void @_ZN2sh16TIntermTraverser13traverseUnaryEPNS_12TIntermUnaryE(%"class.sh::TIntermTraverser"*, %"class.sh::TIntermUnary"*) unnamed_addr #2

declare void @_ZN2sh16TIntermTraverser26traverseFunctionDefinitionEPNS_25TIntermFunctionDefinitionE(%"class.sh::TIntermTraverser"*, %"class.sh::TIntermFunctionDefinition"*) unnamed_addr #2

declare void @_ZN2sh16TIntermTraverser17traverseAggregateEPNS_16TIntermAggregateE(%"class.sh::TIntermTraverser"*, %"class.sh::TIntermAggregate"*) unnamed_addr #2

declare void @_ZN2sh16TIntermTraverser13traverseBlockEPNS_12TIntermBlockE(%"class.sh::TIntermTraverser"*, %"class.sh::TIntermBlock"*) unnamed_addr #2

declare void @_ZN2sh16TIntermTraverser12traverseLoopEPNS_11TIntermLoopE(%"class.sh::TIntermTraverser"*, %"class.sh::TIntermLoop"*) unnamed_addr #2

declare void @_ZN2sh12TDiagnostics5errorERKNS_10TSourceLocEPKcS5_(%"class.sh::TDiagnostics"*, %"struct.sh::TSourceLoc"* dereferenceable(16), i8*, i8*) local_unnamed_addr #2

declare i32 @_ZNK2sh14TConstantUnion9getIConstEv(%"class.sh::TConstantUnion"*) local_unnamed_addr #2

; Function Attrs: nobuiltin nofree
declare noalias nonnull i8* @_Znwm(i64) local_unnamed_addr #5

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__127__tree_balance_after_insertIPNS_16__tree_node_baseIPvEEEEvT_S5_(%"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"*) local_unnamed_addr #0 comdat {
  %3 = icmp eq %"class.std::__1::__tree_node_base"* %1, %0
  %4 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %1, i64 0, i32 3
  %5 = zext i1 %3 to i8
  store i8 %5, i8* %4, align 8
  br i1 %3, label %156, label %6

6:                                                ; preds = %2, %149
  %7 = phi %"class.std::__1::__tree_node_base"* [ %20, %149 ], [ %1, %2 ]
  %8 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %7, i64 0, i32 2
  %9 = bitcast %"class.std::__1::__tree_end_node"** %8 to %"class.std::__1::__tree_node_base"**
  %10 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %9, align 8
  %11 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %10, i64 0, i32 3
  %12 = load i8, i8* %11, align 8, !range !2
  %13 = icmp eq i8 %12, 0
  br i1 %13, label %14, label %156

14:                                               ; preds = %6
  %15 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %10, i64 0, i32 2
  %16 = load %"class.std::__1::__tree_end_node"*, %"class.std::__1::__tree_end_node"** %15, align 8
  %17 = getelementptr inbounds %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_end_node"* %16, i64 0, i32 0
  %18 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %17, align 8
  %19 = icmp eq %"class.std::__1::__tree_node_base"* %18, %10
  %20 = bitcast %"class.std::__1::__tree_end_node"* %16 to %"class.std::__1::__tree_node_base"*
  br i1 %19, label %21, label %87

21:                                               ; preds = %14
  %22 = getelementptr inbounds %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_end_node"* %16, i64 1, i32 0
  %23 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %22, align 8
  %24 = icmp eq %"class.std::__1::__tree_node_base"* %23, null
  br i1 %24, label %29, label %25

25:                                               ; preds = %21
  %26 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %23, i64 0, i32 3
  %27 = load i8, i8* %26, align 8, !range !2
  %28 = icmp eq i8 %27, 0
  br i1 %28, label %149, label %29

29:                                               ; preds = %25, %21
  %30 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %10, i64 0, i32 2
  %31 = bitcast %"class.std::__1::__tree_end_node"* %16 to %"class.std::__1::__tree_node_base"*
  %32 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %10, i64 0, i32 0, i32 0
  %33 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %32, align 8
  %34 = icmp eq %"class.std::__1::__tree_node_base"* %33, %7
  br i1 %34, label %61, label %35

35:                                               ; preds = %29
  %36 = ptrtoint %"class.std::__1::__tree_end_node"* %16 to i64
  %37 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %10, i64 0, i32 1
  %38 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %37, align 8
  %39 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %38, i64 0, i32 0, i32 0
  %40 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %39, align 8
  store %"class.std::__1::__tree_node_base"* %40, %"class.std::__1::__tree_node_base"** %37, align 8
  %41 = icmp eq %"class.std::__1::__tree_node_base"* %40, null
  br i1 %41, label %47, label %42

42:                                               ; preds = %35
  %43 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %10, i64 0, i32 0
  %44 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %40, i64 0, i32 2
  store %"class.std::__1::__tree_end_node"* %43, %"class.std::__1::__tree_end_node"** %44, align 8
  %45 = bitcast %"class.std::__1::__tree_end_node"** %30 to i64*
  %46 = load i64, i64* %45, align 8
  br label %47

47:                                               ; preds = %35, %42
  %48 = phi i64 [ %46, %42 ], [ %36, %35 ]
  %49 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %38, i64 0, i32 2
  %50 = bitcast %"class.std::__1::__tree_end_node"** %49 to i64*
  store i64 %48, i64* %50, align 8
  %51 = load %"class.std::__1::__tree_end_node"*, %"class.std::__1::__tree_end_node"** %30, align 8
  %52 = getelementptr inbounds %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_end_node"* %51, i64 0, i32 0
  %53 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %52, align 8
  %54 = icmp eq %"class.std::__1::__tree_node_base"* %53, %10
  %55 = getelementptr inbounds %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_end_node"* %51, i64 1, i32 0
  %56 = select i1 %54, %"class.std::__1::__tree_node_base"** %52, %"class.std::__1::__tree_node_base"** %55
  store %"class.std::__1::__tree_node_base"* %38, %"class.std::__1::__tree_node_base"** %56, align 8
  store %"class.std::__1::__tree_node_base"* %10, %"class.std::__1::__tree_node_base"** %39, align 8
  %57 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %38, i64 0, i32 0
  store %"class.std::__1::__tree_end_node"* %57, %"class.std::__1::__tree_end_node"** %30, align 8
  %58 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %38, i64 0, i32 2
  %59 = bitcast %"class.std::__1::__tree_end_node"** %58 to %"class.std::__1::__tree_node_base"**
  %60 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %59, align 8
  br label %61

61:                                               ; preds = %47, %29
  %62 = phi %"class.std::__1::__tree_node_base"* [ %31, %29 ], [ %60, %47 ]
  %63 = phi %"class.std::__1::__tree_node_base"* [ %10, %29 ], [ %38, %47 ]
  %64 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %63, i64 0, i32 3
  store i8 1, i8* %64, align 8
  %65 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %62, i64 0, i32 3
  store i8 0, i8* %65, align 8
  %66 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %62, i64 0, i32 0, i32 0
  %67 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %66, align 8
  %68 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %67, i64 0, i32 1
  %69 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %68, align 8
  store %"class.std::__1::__tree_node_base"* %69, %"class.std::__1::__tree_node_base"** %66, align 8
  %70 = icmp eq %"class.std::__1::__tree_node_base"* %69, null
  br i1 %70, label %74, label %71

71:                                               ; preds = %61
  %72 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %62, i64 0, i32 0
  %73 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %69, i64 0, i32 2
  store %"class.std::__1::__tree_end_node"* %72, %"class.std::__1::__tree_end_node"** %73, align 8
  br label %74

74:                                               ; preds = %71, %61
  %75 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %62, i64 0, i32 2
  %76 = bitcast %"class.std::__1::__tree_end_node"** %75 to i64*
  %77 = load i64, i64* %76, align 8
  %78 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %67, i64 0, i32 2
  %79 = bitcast %"class.std::__1::__tree_end_node"** %78 to i64*
  store i64 %77, i64* %79, align 8
  %80 = load %"class.std::__1::__tree_end_node"*, %"class.std::__1::__tree_end_node"** %75, align 8
  %81 = getelementptr inbounds %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_end_node"* %80, i64 0, i32 0
  %82 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %81, align 8
  %83 = icmp eq %"class.std::__1::__tree_node_base"* %82, %62
  %84 = getelementptr inbounds %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_end_node"* %80, i64 1, i32 0
  %85 = select i1 %83, %"class.std::__1::__tree_node_base"** %81, %"class.std::__1::__tree_node_base"** %84
  store %"class.std::__1::__tree_node_base"* %67, %"class.std::__1::__tree_node_base"** %85, align 8
  store %"class.std::__1::__tree_node_base"* %62, %"class.std::__1::__tree_node_base"** %68, align 8
  %86 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %67, i64 0, i32 0
  store %"class.std::__1::__tree_end_node"* %86, %"class.std::__1::__tree_end_node"** %75, align 8
  br label %156

87:                                               ; preds = %14
  %88 = icmp eq %"class.std::__1::__tree_node_base"* %18, null
  br i1 %88, label %93, label %89

89:                                               ; preds = %87
  %90 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %18, i64 0, i32 3
  %91 = load i8, i8* %90, align 8, !range !2
  %92 = icmp eq i8 %91, 0
  br i1 %92, label %149, label %93

93:                                               ; preds = %89, %87
  %94 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %10, i64 0, i32 2
  %95 = bitcast %"class.std::__1::__tree_end_node"* %16 to %"class.std::__1::__tree_node_base"*
  %96 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %10, i64 0, i32 0, i32 0
  %97 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %96, align 8
  %98 = icmp eq %"class.std::__1::__tree_node_base"* %97, %7
  br i1 %98, label %99, label %123

99:                                               ; preds = %93
  %100 = ptrtoint %"class.std::__1::__tree_end_node"* %16 to i64
  %101 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %10, i64 0, i32 0, i32 0
  %102 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %7, i64 0, i32 1
  %103 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %102, align 8
  store %"class.std::__1::__tree_node_base"* %103, %"class.std::__1::__tree_node_base"** %101, align 8
  %104 = icmp eq %"class.std::__1::__tree_node_base"* %103, null
  br i1 %104, label %110, label %105

105:                                              ; preds = %99
  %106 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %10, i64 0, i32 0
  %107 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %103, i64 0, i32 2
  store %"class.std::__1::__tree_end_node"* %106, %"class.std::__1::__tree_end_node"** %107, align 8
  %108 = bitcast %"class.std::__1::__tree_end_node"** %94 to i64*
  %109 = load i64, i64* %108, align 8
  br label %110

110:                                              ; preds = %99, %105
  %111 = phi i64 [ %109, %105 ], [ %100, %99 ]
  %112 = bitcast %"class.std::__1::__tree_end_node"** %8 to i64*
  store i64 %111, i64* %112, align 8
  %113 = load %"class.std::__1::__tree_end_node"*, %"class.std::__1::__tree_end_node"** %94, align 8
  %114 = getelementptr inbounds %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_end_node"* %113, i64 0, i32 0
  %115 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %114, align 8
  %116 = icmp eq %"class.std::__1::__tree_node_base"* %115, %10
  %117 = getelementptr inbounds %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_end_node"* %113, i64 1, i32 0
  %118 = select i1 %116, %"class.std::__1::__tree_node_base"** %114, %"class.std::__1::__tree_node_base"** %117
  store %"class.std::__1::__tree_node_base"* %7, %"class.std::__1::__tree_node_base"** %118, align 8
  store %"class.std::__1::__tree_node_base"* %10, %"class.std::__1::__tree_node_base"** %102, align 8
  %119 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %7, i64 0, i32 0
  store %"class.std::__1::__tree_end_node"* %119, %"class.std::__1::__tree_end_node"** %94, align 8
  %120 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %7, i64 0, i32 2
  %121 = bitcast %"class.std::__1::__tree_end_node"** %120 to %"class.std::__1::__tree_node_base"**
  %122 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %121, align 8
  br label %123

123:                                              ; preds = %93, %110
  %124 = phi %"class.std::__1::__tree_node_base"* [ %122, %110 ], [ %95, %93 ]
  %125 = phi %"class.std::__1::__tree_node_base"* [ %7, %110 ], [ %10, %93 ]
  %126 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %125, i64 0, i32 3
  store i8 1, i8* %126, align 8
  %127 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %124, i64 0, i32 3
  store i8 0, i8* %127, align 8
  %128 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %124, i64 0, i32 1
  %129 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %128, align 8
  %130 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %129, i64 0, i32 0, i32 0
  %131 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %130, align 8
  store %"class.std::__1::__tree_node_base"* %131, %"class.std::__1::__tree_node_base"** %128, align 8
  %132 = icmp eq %"class.std::__1::__tree_node_base"* %131, null
  br i1 %132, label %136, label %133

133:                                              ; preds = %123
  %134 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %124, i64 0, i32 0
  %135 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %131, i64 0, i32 2
  store %"class.std::__1::__tree_end_node"* %134, %"class.std::__1::__tree_end_node"** %135, align 8
  br label %136

136:                                              ; preds = %133, %123
  %137 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %124, i64 0, i32 2
  %138 = bitcast %"class.std::__1::__tree_end_node"** %137 to i64*
  %139 = load i64, i64* %138, align 8
  %140 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %129, i64 0, i32 2
  %141 = bitcast %"class.std::__1::__tree_end_node"** %140 to i64*
  store i64 %139, i64* %141, align 8
  %142 = load %"class.std::__1::__tree_end_node"*, %"class.std::__1::__tree_end_node"** %137, align 8
  %143 = getelementptr inbounds %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_end_node"* %142, i64 0, i32 0
  %144 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %143, align 8
  %145 = icmp eq %"class.std::__1::__tree_node_base"* %144, %124
  %146 = getelementptr inbounds %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_end_node"* %142, i64 1, i32 0
  %147 = select i1 %145, %"class.std::__1::__tree_node_base"** %143, %"class.std::__1::__tree_node_base"** %146
  store %"class.std::__1::__tree_node_base"* %129, %"class.std::__1::__tree_node_base"** %147, align 8
  store %"class.std::__1::__tree_node_base"* %124, %"class.std::__1::__tree_node_base"** %130, align 8
  %148 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %129, i64 0, i32 0
  store %"class.std::__1::__tree_end_node"* %148, %"class.std::__1::__tree_end_node"** %137, align 8
  br label %156

149:                                              ; preds = %89, %25
  %150 = phi i8* [ %26, %25 ], [ %90, %89 ]
  store i8 1, i8* %11, align 8
  %151 = icmp eq %"class.std::__1::__tree_node_base"* %20, %0
  %152 = getelementptr inbounds %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_end_node"* %16, i64 3
  %153 = bitcast %"class.std::__1::__tree_end_node"* %152 to i8*
  %154 = zext i1 %151 to i8
  store i8 %154, i8* %153, align 8
  store i8 1, i8* %150, align 8
  %155 = icmp eq %"class.std::__1::__tree_node_base"* %20, %0
  br i1 %155, label %156, label %6

156:                                              ; preds = %6, %149, %2, %136, %74
  ret void
}

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #6

declare i32 @_ZNK2sh14TConstantUnion9getUConstEv(%"class.sh::TConstantUnion"*) local_unnamed_addr #2

; Function Attrs: nounwind
declare void @_ZN2sh16TIntermTraverserD2Ev(%"class.sh::TIntermTraverser"*) unnamed_addr #7

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__16__treeIjNS_4lessIjEENS_9allocatorIjEEE7destroyEPNS_11__tree_nodeIjPvEE(%"class.std::__1::__tree.36"*, %"class.std::__1::__tree_node.63"*) local_unnamed_addr #0 comdat align 2 {
  %3 = icmp eq %"class.std::__1::__tree_node.63"* %1, null
  br i1 %3, label %11, label %4

4:                                                ; preds = %2
  %5 = bitcast %"class.std::__1::__tree_node.63"* %1 to %"class.std::__1::__tree_node.63"**
  %6 = load %"class.std::__1::__tree_node.63"*, %"class.std::__1::__tree_node.63"** %5, align 8
  tail call void @_ZNSt3__16__treeIjNS_4lessIjEENS_9allocatorIjEEE7destroyEPNS_11__tree_nodeIjPvEE(%"class.std::__1::__tree.36"* %0, %"class.std::__1::__tree_node.63"* %6) #8
  %7 = getelementptr inbounds %"class.std::__1::__tree_node.63", %"class.std::__1::__tree_node.63"* %1, i64 0, i32 0, i32 1
  %8 = bitcast %"class.std::__1::__tree_node_base"** %7 to %"class.std::__1::__tree_node.63"**
  %9 = load %"class.std::__1::__tree_node.63"*, %"class.std::__1::__tree_node.63"** %8, align 8
  tail call void @_ZNSt3__16__treeIjNS_4lessIjEENS_9allocatorIjEEE7destroyEPNS_11__tree_nodeIjPvEE(%"class.std::__1::__tree.36"* %0, %"class.std::__1::__tree_node.63"* %9) #8
  %10 = bitcast %"class.std::__1::__tree_node.63"* %1 to i8*
  tail call void @_ZdlPv(i8* %10) #9
  ret void

11:                                               ; preds = %2
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__16__treeIiNS_4lessIiEENS_9allocatorIiEEE7destroyEPNS_11__tree_nodeIiPvEE(%"class.std::__1::__tree"*, %"class.std::__1::__tree_node"*) local_unnamed_addr #0 comdat align 2 {
  %3 = icmp eq %"class.std::__1::__tree_node"* %1, null
  br i1 %3, label %11, label %4

4:                                                ; preds = %2
  %5 = bitcast %"class.std::__1::__tree_node"* %1 to %"class.std::__1::__tree_node"**
  %6 = load %"class.std::__1::__tree_node"*, %"class.std::__1::__tree_node"** %5, align 8
  tail call void @_ZNSt3__16__treeIiNS_4lessIiEENS_9allocatorIiEEE7destroyEPNS_11__tree_nodeIiPvEE(%"class.std::__1::__tree"* %0, %"class.std::__1::__tree_node"* %6) #8
  %7 = getelementptr inbounds %"class.std::__1::__tree_node", %"class.std::__1::__tree_node"* %1, i64 0, i32 0, i32 1
  %8 = bitcast %"class.std::__1::__tree_node_base"** %7 to %"class.std::__1::__tree_node"**
  %9 = load %"class.std::__1::__tree_node"*, %"class.std::__1::__tree_node"** %8, align 8
  tail call void @_ZNSt3__16__treeIiNS_4lessIiEENS_9allocatorIiEEE7destroyEPNS_11__tree_nodeIiPvEE(%"class.std::__1::__tree"* %0, %"class.std::__1::__tree_node"* %9) #8
  %10 = bitcast %"class.std::__1::__tree_node"* %1 to i8*
  tail call void @_ZdlPv(i8* %10) #9
  ret void

11:                                               ; preds = %2
  ret void
}

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { inlinehint nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nofree norecurse nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nobuiltin nofree "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { nounwind }
attributes #9 = { builtin nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{i8 0, i8 2}
!3 = !{!4}
!4 = distinct !{!4, !5, !"_ZNSt3__16__treeIiNS_4lessIiEENS_9allocatorIiEEE16__construct_nodeIJRKiEEENS_10unique_ptrINS_11__tree_nodeIiPvEENS_22__tree_node_destructorINS3_ISC_EEEEEEDpOT_: argument 0"}
!5 = distinct !{!5, !"_ZNSt3__16__treeIiNS_4lessIiEENS_9allocatorIiEEE16__construct_nodeIJRKiEEENS_10unique_ptrINS_11__tree_nodeIiPvEENS_22__tree_node_destructorINS3_ISC_EEEEEEDpOT_"}
!6 = !{!7}
!7 = distinct !{!7, !8, !"_ZNSt3__16__treeIjNS_4lessIjEENS_9allocatorIjEEE16__construct_nodeIJRKjEEENS_10unique_ptrINS_11__tree_nodeIjPvEENS_22__tree_node_destructorINS3_ISC_EEEEEEDpOT_: argument 0"}
!8 = distinct !{!8, !"_ZNSt3__16__treeIjNS_4lessIjEENS_9allocatorIjEEE16__construct_nodeIJRKjEEENS_10unique_ptrINS_11__tree_nodeIjPvEENS_22__tree_node_destructorINS3_ISC_EEEEEEDpOT_"}
