; ModuleID = '../../third_party/angle/src/compiler/translator/tree_ops/vulkan/RemoveInactiveInterfaceVariables.cpp'
source_filename = "../../third_party/angle/src/compiler/translator/tree_ops/vulkan/RemoveInactiveInterfaceVariables.cpp"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.sh::ImmutableString" = type { i8*, i64 }
%"class.sh::TCompiler" = type opaque
%"class.sh::TIntermBlock" = type <{ %"class.sh::TIntermNode", %"class.sh::TIntermAggregateBase", %"class.sh::TVector", i8, [7 x i8] }>
%"class.sh::TIntermNode" = type { i32 (...)**, %"struct.sh::TSourceLoc" }
%"struct.sh::TSourceLoc" = type { i32, i32, i32, i32 }
%"class.sh::TIntermAggregateBase" = type { i32 (...)** }
%"class.sh::TVector" = type { %"class.std::__1::vector" }
%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { %"class.sh::TIntermNode"**, %"class.sh::TIntermNode"**, %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %"class.sh::TIntermNode"** }
%"class.sh::TSymbolTable" = type { %"class.sh::TSymbolTableBase", %"class.std::__1::vector.1", %"class.std::__1::vector.6", i8, i32, i32, i32, %struct.ShBuiltInResources, %"class.std::__1::map", %"class.sh::TVariable"* }
%"class.sh::TSymbolTableBase" = type { %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"* }
%"class.sh::TSymbol" = type <{ %"class.sh::ImmutableString", %"class.sh::TSymbolUniqueId", i8, i8, i8, i8 }>
%"class.sh::TSymbolUniqueId" = type { i32 }
%"class.std::__1::vector.1" = type { %"class.std::__1::__vector_base.2" }
%"class.std::__1::__vector_base.2" = type { %"class.std::__1::unique_ptr"*, %"class.std::__1::unique_ptr"*, %"class.std::__1::__compressed_pair.3" }
%"class.std::__1::unique_ptr" = type opaque
%"class.std::__1::__compressed_pair.3" = type { %"struct.std::__1::__compressed_pair_elem.4" }
%"struct.std::__1::__compressed_pair_elem.4" = type { %"class.std::__1::unique_ptr"* }
%"class.std::__1::vector.6" = type { %"class.std::__1::__vector_base.7" }
%"class.std::__1::__vector_base.7" = type { %"class.std::__1::unique_ptr.8"*, %"class.std::__1::unique_ptr.8"*, %"class.std::__1::__compressed_pair.9" }
%"class.std::__1::unique_ptr.8" = type opaque
%"class.std::__1::__compressed_pair.9" = type { %"struct.std::__1::__compressed_pair_elem.10" }
%"struct.std::__1::__compressed_pair_elem.10" = type { %"class.std::__1::unique_ptr.8"* }
%struct.ShBuiltInResources = type { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i64 (i8*, i64)*, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %"struct.std::__1::array", %"struct.std::__1::array", i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, float, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }
%"struct.std::__1::array" = type { [3 x i32] }
%"class.std::__1::map" = type { %"class.std::__1::__tree" }
%"class.std::__1::__tree" = type { %"class.std::__1::__tree_end_node"*, %"class.std::__1::__compressed_pair.14", %"class.std::__1::__compressed_pair.19" }
%"class.std::__1::__tree_end_node" = type { %"class.std::__1::__tree_node_base"* }
%"class.std::__1::__tree_node_base" = type <{ %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_end_node"*, i8, [7 x i8] }>
%"class.std::__1::__compressed_pair.14" = type { %"struct.std::__1::__compressed_pair_elem.15" }
%"struct.std::__1::__compressed_pair_elem.15" = type { %"class.std::__1::__tree_end_node" }
%"class.std::__1::__compressed_pair.19" = type { %"struct.std::__1::__compressed_pair_elem.20" }
%"struct.std::__1::__compressed_pair_elem.20" = type { i64 }
%"class.sh::TVariable" = type { %"class.sh::TSymbol.base", %"class.sh::TType"*, %"class.sh::TConstantUnion"* }
%"class.sh::TSymbol.base" = type <{ %"class.sh::ImmutableString", %"class.sh::TSymbolUniqueId", i8, i8, i8 }>
%"class.sh::TType" = type { i32, i32, i32, i8, i8, %"struct.sh::TMemoryQualifier", i8, %"struct.sh::TLayoutQualifier", i8, i8, %"class.sh::TSpan", %"class.sh::TVector.22"*, %"class.sh::TInterfaceBlock"*, %"class.sh::TStructure"*, i8, i64, i8* }
%"struct.sh::TMemoryQualifier" = type { i8, i8, i8, i8, i8 }
%"struct.sh::TLayoutQualifier" = type <{ i32, i32, i32, i32, %"struct.sh::WorkGroupSize", i32, i32, i32, i32, i8, i8, [2 x i8], i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i8, [3 x i8] }>
%"struct.sh::WorkGroupSize" = type { [3 x i32] }
%"class.sh::TSpan" = type { i32*, i64 }
%"class.sh::TVector.22" = type opaque
%"class.sh::TInterfaceBlock" = type { %"class.sh::TSymbol.base", %"class.sh::TFieldListCollection", i32, i32 }
%"class.sh::TFieldListCollection" = type { %"class.sh::TVector.23"*, i64, i32, %"class.std::__1::basic_string" }
%"class.sh::TVector.23" = type opaque
%"class.std::__1::basic_string" = type { %"class.std::__1::__compressed_pair.24" }
%"class.std::__1::__compressed_pair.24" = type { %"struct.std::__1::__compressed_pair_elem.25" }
%"struct.std::__1::__compressed_pair_elem.25" = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, pool_allocator<char> >::__rep" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, pool_allocator<char> >::__rep" = type { %union.anon }
%union.anon = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, pool_allocator<char> >::__long" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, pool_allocator<char> >::__long" = type { i8*, i64, i64 }
%"class.sh::TStructure" = type <{ %"class.sh::TSymbol.base", i8, %"class.sh::TFieldListCollection", i8, [7 x i8] }>
%"class.sh::TConstantUnion" = type { %union.anon.29, i32 }
%union.anon.29 = type { i32 }
%"class.std::__1::vector.30" = type { %"class.std::__1::__vector_base.31" }
%"class.std::__1::__vector_base.31" = type { %"struct.sh::ShaderVariable"*, %"struct.sh::ShaderVariable"*, %"class.std::__1::__compressed_pair.32" }
%"struct.sh::ShaderVariable" = type { i32, i32, %"class.std::__1::basic_string.37", %"class.std::__1::basic_string.37", %"class.std::__1::vector.45", i8, i8, %"class.std::__1::vector.30", %"class.std::__1::basic_string.37", %"class.std::__1::basic_string.37", i8, i32, i8, i32, i32, i32, i8, i8, i8, i32, i8, i32, i8, i8, i8, i8, i32 }
%"class.std::__1::vector.45" = type { %"class.std::__1::__vector_base.46" }
%"class.std::__1::__vector_base.46" = type { i32*, i32*, %"class.std::__1::__compressed_pair.47" }
%"class.std::__1::__compressed_pair.47" = type { %"struct.std::__1::__compressed_pair_elem.48" }
%"struct.std::__1::__compressed_pair_elem.48" = type { i32* }
%"class.std::__1::basic_string.37" = type { %"class.std::__1::__compressed_pair.38" }
%"class.std::__1::__compressed_pair.38" = type { %"struct.std::__1::__compressed_pair_elem.39" }
%"struct.std::__1::__compressed_pair_elem.39" = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" = type { %union.anon.40 }
%union.anon.40 = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" = type { i8*, i64, i64 }
%"class.std::__1::__compressed_pair.32" = type { %"struct.std::__1::__compressed_pair_elem.33" }
%"struct.std::__1::__compressed_pair_elem.33" = type { %"struct.sh::ShaderVariable"* }
%"class.std::__1::vector.52" = type { %"class.std::__1::__vector_base.53" }
%"class.std::__1::__vector_base.53" = type { %"struct.sh::InterfaceBlock"*, %"struct.sh::InterfaceBlock"*, %"class.std::__1::__compressed_pair.54" }
%"struct.sh::InterfaceBlock" = type { %"class.std::__1::basic_string.37", %"class.std::__1::basic_string.37", %"class.std::__1::basic_string.37", i32, i32, i8, i32, i8, i8, i32, %"class.std::__1::vector.30" }
%"class.std::__1::__compressed_pair.54" = type { %"struct.std::__1::__compressed_pair_elem.55" }
%"struct.std::__1::__compressed_pair_elem.55" = type { %"struct.sh::InterfaceBlock"* }
%"class.sh::(anonymous namespace)::RemoveInactiveInterfaceVariablesTraverser" = type { %"class.sh::TIntermTraverser", %"class.std::__1::vector.30"*, %"class.std::__1::vector.30"*, %"class.std::__1::vector.30"*, %"class.std::__1::vector.30"*, %"class.std::__1::vector.52"* }
%"class.sh::TIntermTraverser" = type { i32 (...)**, i8, i8, i8, i32, i32, i8, %"class.std::__1::vector.59", %"class.sh::TSymbolTable"*, %"class.std::__1::vector.66", %"class.std::__1::vector.73", %"class.sh::TVector", %"class.std::__1::vector.80" }
%"class.std::__1::vector.59" = type { %"class.std::__1::__vector_base.60" }
%"class.std::__1::__vector_base.60" = type { %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry"*, %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry"*, %"class.std::__1::__compressed_pair.61" }
%"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry" = type { %"class.sh::TIntermAggregateBase"*, %"class.sh::TIntermNode"*, %"class.sh::TVector" }
%"class.std::__1::__compressed_pair.61" = type { %"struct.std::__1::__compressed_pair_elem.62" }
%"struct.std::__1::__compressed_pair_elem.62" = type { %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry"* }
%"class.std::__1::vector.66" = type { %"class.std::__1::__vector_base.67" }
%"class.std::__1::__vector_base.67" = type { %"struct.sh::TIntermTraverser::NodeInsertMultipleEntry"*, %"struct.sh::TIntermTraverser::NodeInsertMultipleEntry"*, %"class.std::__1::__compressed_pair.68" }
%"struct.sh::TIntermTraverser::NodeInsertMultipleEntry" = type { %"class.sh::TIntermBlock"*, i64, %"class.sh::TVector", %"class.sh::TVector" }
%"class.std::__1::__compressed_pair.68" = type { %"struct.std::__1::__compressed_pair_elem.69" }
%"struct.std::__1::__compressed_pair_elem.69" = type { %"struct.sh::TIntermTraverser::NodeInsertMultipleEntry"* }
%"class.std::__1::vector.73" = type { %"class.std::__1::__vector_base.74" }
%"class.std::__1::__vector_base.74" = type { %"struct.sh::TIntermTraverser::NodeUpdateEntry"*, %"struct.sh::TIntermTraverser::NodeUpdateEntry"*, %"class.std::__1::__compressed_pair.75" }
%"struct.sh::TIntermTraverser::NodeUpdateEntry" = type <{ %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"*, i8, [7 x i8] }>
%"class.std::__1::__compressed_pair.75" = type { %"struct.std::__1::__compressed_pair_elem.76" }
%"struct.std::__1::__compressed_pair_elem.76" = type { %"struct.sh::TIntermTraverser::NodeUpdateEntry"* }
%"class.std::__1::vector.80" = type { %"class.std::__1::__vector_base.81" }
%"class.std::__1::__vector_base.81" = type { %"struct.sh::TIntermTraverser::ParentBlock"*, %"struct.sh::TIntermTraverser::ParentBlock"*, %"class.std::__1::__compressed_pair.82" }
%"struct.sh::TIntermTraverser::ParentBlock" = type { %"class.sh::TIntermBlock"*, i64 }
%"class.std::__1::__compressed_pair.82" = type { %"struct.std::__1::__compressed_pair_elem.83" }
%"struct.std::__1::__compressed_pair_elem.83" = type { %"struct.sh::TIntermTraverser::ParentBlock"* }
%"class.sh::TIntermSymbol" = type { %"class.sh::TIntermTyped", %"class.sh::TVariable"* }
%"class.sh::TIntermTyped" = type { %"class.sh::TIntermNode" }
%"class.sh::TIntermConstantUnion" = type { %"class.sh::TIntermExpression", %"class.sh::TConstantUnion"* }
%"class.sh::TIntermExpression" = type { %"class.sh::TIntermTyped", %"class.sh::TType" }
%"class.sh::TIntermSwizzle" = type <{ %"class.sh::TIntermExpression", %"class.sh::TIntermTyped"*, %"class.sh::TVector.87", i8, [7 x i8] }>
%"class.sh::TVector.87" = type { %"class.std::__1::vector.88" }
%"class.std::__1::vector.88" = type { %"class.std::__1::__vector_base.89" }
%"class.std::__1::__vector_base.89" = type { i32*, i32*, %"class.std::__1::__compressed_pair.90" }
%"class.std::__1::__compressed_pair.90" = type { %"struct.std::__1::__compressed_pair_elem.91" }
%"struct.std::__1::__compressed_pair_elem.91" = type { i32* }
%"class.sh::TIntermBinary" = type <{ %"class.sh::TIntermOperator.base", [7 x i8], %"class.sh::TIntermTyped"*, %"class.sh::TIntermTyped"*, i8, [7 x i8] }>
%"class.sh::TIntermOperator.base" = type <{ %"class.sh::TIntermExpression", i8 }>
%"class.sh::TIntermUnary" = type { %"class.sh::TIntermOperator.base", %"class.sh::TIntermTyped"*, i8, %"class.sh::TFunction"* }
%"class.sh::TFunction" = type <{ %"class.sh::TSymbol.base", i8, %"class.sh::TVector.95"*, %"class.sh::TVariable"**, i64, %"class.sh::TType"*, %"class.sh::ImmutableString", i8, i8, i8, i8, [4 x i8] }>
%"class.sh::TVector.95" = type opaque
%"class.sh::TIntermTernary" = type { %"class.sh::TIntermExpression", %"class.sh::TIntermTyped"*, %"class.sh::TIntermTyped"*, %"class.sh::TIntermTyped"* }
%"class.sh::TIntermIfElse" = type { %"class.sh::TIntermNode", %"class.sh::TIntermTyped"*, %"class.sh::TIntermBlock"*, %"class.sh::TIntermBlock"* }
%"class.sh::TIntermSwitch" = type { %"class.sh::TIntermNode", %"class.sh::TIntermTyped"*, %"class.sh::TIntermBlock"* }
%"class.sh::TIntermCase" = type { %"class.sh::TIntermNode", %"class.sh::TIntermTyped"* }
%"class.sh::TIntermFunctionPrototype" = type { %"class.sh::TIntermTyped", %"class.sh::TFunction"* }
%"class.sh::TIntermFunctionDefinition" = type { %"class.sh::TIntermNode", %"class.sh::TIntermFunctionPrototype"*, %"class.sh::TIntermBlock"* }
%"class.sh::TIntermAggregate" = type { %"class.sh::TIntermOperator.base", %"class.sh::TIntermAggregateBase", %"class.sh::TVector", i8, i8, %"class.sh::TFunction"* }
%"class.sh::TIntermGlobalQualifierDeclaration" = type <{ %"class.sh::TIntermNode", %"class.sh::TIntermSymbol"*, i8, [7 x i8] }>
%"class.sh::TIntermDeclaration" = type { %"class.sh::TIntermNode", %"class.sh::TIntermAggregateBase", %"class.sh::TVector" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short" = type { [23 x i8], %struct.anon.41 }
%struct.anon.41 = type { i8 }
%"class.angle::PoolAllocator" = type <{ i64, i64, i64, i64, i64, %"struct.angle::PoolAllocator::Header"*, %"struct.angle::PoolAllocator::Header"*, %"class.std::__1::vector.97", i32, [4 x i8], i64, i8, [7 x i8] }>
%"struct.angle::PoolAllocator::Header" = type { %"struct.angle::PoolAllocator::Header"*, i64 }
%"class.std::__1::vector.97" = type { %"class.std::__1::__vector_base.98" }
%"class.std::__1::__vector_base.98" = type { %"struct.angle::PoolAllocator::AllocState"*, %"struct.angle::PoolAllocator::AllocState"*, %"class.std::__1::__compressed_pair.99" }
%"struct.angle::PoolAllocator::AllocState" = type { i64, %"struct.angle::PoolAllocator::Header"* }
%"class.std::__1::__compressed_pair.99" = type { %"struct.std::__1::__compressed_pair_elem.100" }
%"struct.std::__1::__compressed_pair_elem.100" = type { %"struct.angle::PoolAllocator::AllocState"* }
%"class.std::__1::__vector_base_common" = type { i8 }
%"class.sh::TIntermLoop" = type { %"class.sh::TIntermNode", i32, %"class.sh::TIntermNode"*, %"class.sh::TIntermTyped"*, %"class.sh::TIntermTyped"*, %"class.sh::TIntermBlock"* }
%"class.sh::TIntermBranch" = type { %"class.sh::TIntermNode", i8, %"class.sh::TIntermTyped"* }
%"class.sh::TIntermPreprocessorDirective" = type { %"class.sh::TIntermNode", i32, %"class.sh::ImmutableString" }

$_ZN2sh16TIntermTraverser11visitSymbolEPNS_13TIntermSymbolE = comdat any

$_ZN2sh16TIntermTraverser18visitConstantUnionEPNS_20TIntermConstantUnionE = comdat any

$_ZN2sh16TIntermTraverser12visitSwizzleENS_5VisitEPNS_14TIntermSwizzleE = comdat any

$_ZN2sh16TIntermTraverser11visitBinaryENS_5VisitEPNS_13TIntermBinaryE = comdat any

$_ZN2sh16TIntermTraverser10visitUnaryENS_5VisitEPNS_12TIntermUnaryE = comdat any

$_ZN2sh16TIntermTraverser12visitTernaryENS_5VisitEPNS_14TIntermTernaryE = comdat any

$_ZN2sh16TIntermTraverser11visitIfElseENS_5VisitEPNS_13TIntermIfElseE = comdat any

$_ZN2sh16TIntermTraverser11visitSwitchENS_5VisitEPNS_13TIntermSwitchE = comdat any

$_ZN2sh16TIntermTraverser9visitCaseENS_5VisitEPNS_11TIntermCaseE = comdat any

$_ZN2sh16TIntermTraverser22visitFunctionPrototypeEPNS_24TIntermFunctionPrototypeE = comdat any

$_ZN2sh16TIntermTraverser23visitFunctionDefinitionENS_5VisitEPNS_25TIntermFunctionDefinitionE = comdat any

$_ZN2sh16TIntermTraverser14visitAggregateENS_5VisitEPNS_16TIntermAggregateE = comdat any

$_ZN2sh16TIntermTraverser10visitBlockENS_5VisitEPNS_12TIntermBlockE = comdat any

$_ZN2sh16TIntermTraverser31visitGlobalQualifierDeclarationENS_5VisitEPNS_33TIntermGlobalQualifierDeclarationE = comdat any

$_ZN2sh16TIntermTraverser9visitLoopENS_5VisitEPNS_11TIntermLoopE = comdat any

$_ZN2sh16TIntermTraverser11visitBranchENS_5VisitEPNS_13TIntermBranchE = comdat any

$_ZN2sh16TIntermTraverser26visitPreprocessorDirectiveEPNS_28TIntermPreprocessorDirectiveE = comdat any

$_ZN2sh15IsShaderIoBlockENS_10TQualifierE = comdat any

$_ZN2sh10IsShaderInENS_10TQualifierE = comdat any

$_ZNSt3__16vectorIN2sh16TIntermTraverser28NodeReplaceWithMultipleEntryENS_9allocatorIS3_EEE24__emplace_back_slow_pathIJPNS1_12TIntermBlockERPNS1_18TIntermDeclarationENS1_7TVectorIPNS1_11TIntermNodeEEEEEEvDpOT_ = comdat any

@_ZTVN2sh12_GLOBAL__N_141RemoveInactiveInterfaceVariablesTraverserE = internal unnamed_addr constant { [28 x i8*] } { [28 x i8*] [i8* null, i8* null, i8* bitcast (void (%"class.sh::TIntermTraverser"*)* @_ZN2sh16TIntermTraverserD2Ev to i8*), i8* bitcast (void (%"class.sh::(anonymous namespace)::RemoveInactiveInterfaceVariablesTraverser"*)* @_ZN2sh12_GLOBAL__N_141RemoveInactiveInterfaceVariablesTraverserD0Ev to i8*), i8* bitcast (void (%"class.sh::TIntermTraverser"*, %"class.sh::TIntermSymbol"*)* @_ZN2sh16TIntermTraverser11visitSymbolEPNS_13TIntermSymbolE to i8*), i8* bitcast (void (%"class.sh::TIntermTraverser"*, %"class.sh::TIntermConstantUnion"*)* @_ZN2sh16TIntermTraverser18visitConstantUnionEPNS_20TIntermConstantUnionE to i8*), i8* bitcast (i1 (%"class.sh::TIntermTraverser"*, i32, %"class.sh::TIntermSwizzle"*)* @_ZN2sh16TIntermTraverser12visitSwizzleENS_5VisitEPNS_14TIntermSwizzleE to i8*), i8* bitcast (i1 (%"class.sh::TIntermTraverser"*, i32, %"class.sh::TIntermBinary"*)* @_ZN2sh16TIntermTraverser11visitBinaryENS_5VisitEPNS_13TIntermBinaryE to i8*), i8* bitcast (i1 (%"class.sh::TIntermTraverser"*, i32, %"class.sh::TIntermUnary"*)* @_ZN2sh16TIntermTraverser10visitUnaryENS_5VisitEPNS_12TIntermUnaryE to i8*), i8* bitcast (i1 (%"class.sh::TIntermTraverser"*, i32, %"class.sh::TIntermTernary"*)* @_ZN2sh16TIntermTraverser12visitTernaryENS_5VisitEPNS_14TIntermTernaryE to i8*), i8* bitcast (i1 (%"class.sh::TIntermTraverser"*, i32, %"class.sh::TIntermIfElse"*)* @_ZN2sh16TIntermTraverser11visitIfElseENS_5VisitEPNS_13TIntermIfElseE to i8*), i8* bitcast (i1 (%"class.sh::TIntermTraverser"*, i32, %"class.sh::TIntermSwitch"*)* @_ZN2sh16TIntermTraverser11visitSwitchENS_5VisitEPNS_13TIntermSwitchE to i8*), i8* bitcast (i1 (%"class.sh::TIntermTraverser"*, i32, %"class.sh::TIntermCase"*)* @_ZN2sh16TIntermTraverser9visitCaseENS_5VisitEPNS_11TIntermCaseE to i8*), i8* bitcast (void (%"class.sh::TIntermTraverser"*, %"class.sh::TIntermFunctionPrototype"*)* @_ZN2sh16TIntermTraverser22visitFunctionPrototypeEPNS_24TIntermFunctionPrototypeE to i8*), i8* bitcast (i1 (%"class.sh::TIntermTraverser"*, i32, %"class.sh::TIntermFunctionDefinition"*)* @_ZN2sh16TIntermTraverser23visitFunctionDefinitionENS_5VisitEPNS_25TIntermFunctionDefinitionE to i8*), i8* bitcast (i1 (%"class.sh::TIntermTraverser"*, i32, %"class.sh::TIntermAggregate"*)* @_ZN2sh16TIntermTraverser14visitAggregateENS_5VisitEPNS_16TIntermAggregateE to i8*), i8* bitcast (i1 (%"class.sh::TIntermTraverser"*, i32, %"class.sh::TIntermBlock"*)* @_ZN2sh16TIntermTraverser10visitBlockENS_5VisitEPNS_12TIntermBlockE to i8*), i8* bitcast (i1 (%"class.sh::TIntermTraverser"*, i32, %"class.sh::TIntermGlobalQualifierDeclaration"*)* @_ZN2sh16TIntermTraverser31visitGlobalQualifierDeclarationENS_5VisitEPNS_33TIntermGlobalQualifierDeclarationE to i8*), i8* bitcast (i1 (%"class.sh::(anonymous namespace)::RemoveInactiveInterfaceVariablesTraverser"*, i32, %"class.sh::TIntermDeclaration"*)* @_ZN2sh12_GLOBAL__N_141RemoveInactiveInterfaceVariablesTraverser16visitDeclarationENS_5VisitEPNS_18TIntermDeclarationE to i8*), i8* bitcast (i1 (%"class.sh::TIntermTraverser"*, i32, %"class.sh::TIntermLoop"*)* @_ZN2sh16TIntermTraverser9visitLoopENS_5VisitEPNS_11TIntermLoopE to i8*), i8* bitcast (i1 (%"class.sh::TIntermTraverser"*, i32, %"class.sh::TIntermBranch"*)* @_ZN2sh16TIntermTraverser11visitBranchENS_5VisitEPNS_13TIntermBranchE to i8*), i8* bitcast (void (%"class.sh::TIntermTraverser"*, %"class.sh::TIntermPreprocessorDirective"*)* @_ZN2sh16TIntermTraverser26visitPreprocessorDirectiveEPNS_28TIntermPreprocessorDirectiveE to i8*), i8* bitcast (void (%"class.sh::TIntermTraverser"*, %"class.sh::TIntermBinary"*)* @_ZN2sh16TIntermTraverser14traverseBinaryEPNS_13TIntermBinaryE to i8*), i8* bitcast (void (%"class.sh::TIntermTraverser"*, %"class.sh::TIntermUnary"*)* @_ZN2sh16TIntermTraverser13traverseUnaryEPNS_12TIntermUnaryE to i8*), i8* bitcast (void (%"class.sh::TIntermTraverser"*, %"class.sh::TIntermFunctionDefinition"*)* @_ZN2sh16TIntermTraverser26traverseFunctionDefinitionEPNS_25TIntermFunctionDefinitionE to i8*), i8* bitcast (void (%"class.sh::TIntermTraverser"*, %"class.sh::TIntermAggregate"*)* @_ZN2sh16TIntermTraverser17traverseAggregateEPNS_16TIntermAggregateE to i8*), i8* bitcast (void (%"class.sh::TIntermTraverser"*, %"class.sh::TIntermBlock"*)* @_ZN2sh16TIntermTraverser13traverseBlockEPNS_12TIntermBlockE to i8*), i8* bitcast (void (%"class.sh::TIntermTraverser"*, %"class.sh::TIntermLoop"*)* @_ZN2sh16TIntermTraverser12traverseLoopEPNS_11TIntermLoopE to i8*)] }, align 8
@_ZN2shL21kEmptyImmutableStringE = internal constant %"class.sh::ImmutableString" { i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str, i32 0, i32 0), i64 0 }, align 8
@.str = private unnamed_addr constant [1 x i8] zeroinitializer, align 1
@_ZTVN2sh18TIntermDeclarationE = external unnamed_addr constant { [31 x i8*], [6 x i8*] }, align 8

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN2sh32RemoveInactiveInterfaceVariablesEPNS_9TCompilerEPNS_12TIntermBlockEPNS_12TSymbolTableERKNSt3__16vectorINS_14ShaderVariableENS6_9allocatorIS8_EEEESD_SD_SD_RKNS7_INS_14InterfaceBlockENS9_ISE_EEEE(%"class.sh::TCompiler"*, %"class.sh::TIntermBlock"*, %"class.sh::TSymbolTable"*, %"class.std::__1::vector.30"* dereferenceable(24), %"class.std::__1::vector.30"* dereferenceable(24), %"class.std::__1::vector.30"* dereferenceable(24), %"class.std::__1::vector.30"* dereferenceable(24), %"class.std::__1::vector.52"* dereferenceable(24)) local_unnamed_addr #0 {
  %9 = alloca %"class.sh::(anonymous namespace)::RemoveInactiveInterfaceVariablesTraverser", align 8
  %10 = bitcast %"class.sh::(anonymous namespace)::RemoveInactiveInterfaceVariablesTraverser"* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 192, i8* nonnull %10) #9
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %10, i8 -86, i64 192, i1 false)
  %11 = getelementptr inbounds %"class.sh::(anonymous namespace)::RemoveInactiveInterfaceVariablesTraverser", %"class.sh::(anonymous namespace)::RemoveInactiveInterfaceVariablesTraverser"* %9, i64 0, i32 0
  call void @_ZN2sh16TIntermTraverserC2EbbbPNS_12TSymbolTableE(%"class.sh::TIntermTraverser"* nonnull %11, i1 zeroext true, i1 zeroext false, i1 zeroext false, %"class.sh::TSymbolTable"* %2) #9
  %12 = getelementptr inbounds %"class.sh::(anonymous namespace)::RemoveInactiveInterfaceVariablesTraverser", %"class.sh::(anonymous namespace)::RemoveInactiveInterfaceVariablesTraverser"* %9, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [28 x i8*] }, { [28 x i8*] }* @_ZTVN2sh12_GLOBAL__N_141RemoveInactiveInterfaceVariablesTraverserE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %12, align 8
  %13 = getelementptr inbounds %"class.sh::(anonymous namespace)::RemoveInactiveInterfaceVariablesTraverser", %"class.sh::(anonymous namespace)::RemoveInactiveInterfaceVariablesTraverser"* %9, i64 0, i32 1
  store %"class.std::__1::vector.30"* %3, %"class.std::__1::vector.30"** %13, align 8
  %14 = getelementptr inbounds %"class.sh::(anonymous namespace)::RemoveInactiveInterfaceVariablesTraverser", %"class.sh::(anonymous namespace)::RemoveInactiveInterfaceVariablesTraverser"* %9, i64 0, i32 2
  store %"class.std::__1::vector.30"* %4, %"class.std::__1::vector.30"** %14, align 8
  %15 = getelementptr inbounds %"class.sh::(anonymous namespace)::RemoveInactiveInterfaceVariablesTraverser", %"class.sh::(anonymous namespace)::RemoveInactiveInterfaceVariablesTraverser"* %9, i64 0, i32 3
  store %"class.std::__1::vector.30"* %5, %"class.std::__1::vector.30"** %15, align 8
  %16 = getelementptr inbounds %"class.sh::(anonymous namespace)::RemoveInactiveInterfaceVariablesTraverser", %"class.sh::(anonymous namespace)::RemoveInactiveInterfaceVariablesTraverser"* %9, i64 0, i32 4
  store %"class.std::__1::vector.30"* %6, %"class.std::__1::vector.30"** %16, align 8
  %17 = getelementptr inbounds %"class.sh::(anonymous namespace)::RemoveInactiveInterfaceVariablesTraverser", %"class.sh::(anonymous namespace)::RemoveInactiveInterfaceVariablesTraverser"* %9, i64 0, i32 5
  store %"class.std::__1::vector.52"* %7, %"class.std::__1::vector.52"** %17, align 8
  call void @_ZN2sh12TIntermBlock8traverseEPNS_16TIntermTraverserE(%"class.sh::TIntermBlock"* %1, %"class.sh::TIntermTraverser"* nonnull %11) #9
  %18 = getelementptr inbounds %"class.sh::TIntermBlock", %"class.sh::TIntermBlock"* %1, i64 0, i32 0
  %19 = call zeroext i1 @_ZN2sh16TIntermTraverser10updateTreeEPNS_9TCompilerEPNS_11TIntermNodeE(%"class.sh::TIntermTraverser"* nonnull %11, %"class.sh::TCompiler"* %0, %"class.sh::TIntermNode"* %18) #9
  call void @_ZN2sh16TIntermTraverserD2Ev(%"class.sh::TIntermTraverser"* nonnull %11) #9
  call void @llvm.lifetime.end.p0i8(i64 192, i8* nonnull %10) #9
  ret i1 %19
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

declare void @_ZN2sh12TIntermBlock8traverseEPNS_16TIntermTraverserE(%"class.sh::TIntermBlock"*, %"class.sh::TIntermTraverser"*) unnamed_addr #2

declare zeroext i1 @_ZN2sh16TIntermTraverser10updateTreeEPNS_9TCompilerEPNS_11TIntermNodeE(%"class.sh::TIntermTraverser"*, %"class.sh::TCompiler"*, %"class.sh::TIntermNode"*) local_unnamed_addr #2

; Function Attrs: nounwind
declare void @_ZN2sh16TIntermTraverserD2Ev(%"class.sh::TIntermTraverser"*) unnamed_addr #3

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

declare void @_ZN2sh16TIntermTraverserC2EbbbPNS_12TSymbolTableE(%"class.sh::TIntermTraverser"*, i1 zeroext, i1 zeroext, i1 zeroext, %"class.sh::TSymbolTable"*) unnamed_addr #2

; Function Attrs: inlinehint nounwind ssp uwtable
define internal void @_ZN2sh12_GLOBAL__N_141RemoveInactiveInterfaceVariablesTraverserD0Ev(%"class.sh::(anonymous namespace)::RemoveInactiveInterfaceVariablesTraverser"*) unnamed_addr #4 align 2 {
  %2 = getelementptr inbounds %"class.sh::(anonymous namespace)::RemoveInactiveInterfaceVariablesTraverser", %"class.sh::(anonymous namespace)::RemoveInactiveInterfaceVariablesTraverser"* %0, i64 0, i32 0
  tail call void @_ZN2sh16TIntermTraverserD2Ev(%"class.sh::TIntermTraverser"* %2) #9
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN2sh16TIntermTraverser11visitSymbolEPNS_13TIntermSymbolE(%"class.sh::TIntermTraverser"*, %"class.sh::TIntermSymbol"*) unnamed_addr #0 comdat align 2 {
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN2sh16TIntermTraverser18visitConstantUnionEPNS_20TIntermConstantUnionE(%"class.sh::TIntermTraverser"*, %"class.sh::TIntermConstantUnion"*) unnamed_addr #0 comdat align 2 {
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZN2sh16TIntermTraverser12visitSwizzleENS_5VisitEPNS_14TIntermSwizzleE(%"class.sh::TIntermTraverser"*, i32, %"class.sh::TIntermSwizzle"*) unnamed_addr #0 comdat align 2 {
  ret i1 true
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZN2sh16TIntermTraverser11visitBinaryENS_5VisitEPNS_13TIntermBinaryE(%"class.sh::TIntermTraverser"*, i32, %"class.sh::TIntermBinary"*) unnamed_addr #0 comdat align 2 {
  ret i1 true
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZN2sh16TIntermTraverser10visitUnaryENS_5VisitEPNS_12TIntermUnaryE(%"class.sh::TIntermTraverser"*, i32, %"class.sh::TIntermUnary"*) unnamed_addr #0 comdat align 2 {
  ret i1 true
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZN2sh16TIntermTraverser12visitTernaryENS_5VisitEPNS_14TIntermTernaryE(%"class.sh::TIntermTraverser"*, i32, %"class.sh::TIntermTernary"*) unnamed_addr #0 comdat align 2 {
  ret i1 true
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZN2sh16TIntermTraverser11visitIfElseENS_5VisitEPNS_13TIntermIfElseE(%"class.sh::TIntermTraverser"*, i32, %"class.sh::TIntermIfElse"*) unnamed_addr #0 comdat align 2 {
  ret i1 true
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZN2sh16TIntermTraverser11visitSwitchENS_5VisitEPNS_13TIntermSwitchE(%"class.sh::TIntermTraverser"*, i32, %"class.sh::TIntermSwitch"*) unnamed_addr #0 comdat align 2 {
  ret i1 true
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZN2sh16TIntermTraverser9visitCaseENS_5VisitEPNS_11TIntermCaseE(%"class.sh::TIntermTraverser"*, i32, %"class.sh::TIntermCase"*) unnamed_addr #0 comdat align 2 {
  ret i1 true
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN2sh16TIntermTraverser22visitFunctionPrototypeEPNS_24TIntermFunctionPrototypeE(%"class.sh::TIntermTraverser"*, %"class.sh::TIntermFunctionPrototype"*) unnamed_addr #0 comdat align 2 {
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZN2sh16TIntermTraverser23visitFunctionDefinitionENS_5VisitEPNS_25TIntermFunctionDefinitionE(%"class.sh::TIntermTraverser"*, i32, %"class.sh::TIntermFunctionDefinition"*) unnamed_addr #0 comdat align 2 {
  ret i1 true
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZN2sh16TIntermTraverser14visitAggregateENS_5VisitEPNS_16TIntermAggregateE(%"class.sh::TIntermTraverser"*, i32, %"class.sh::TIntermAggregate"*) unnamed_addr #0 comdat align 2 {
  ret i1 true
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZN2sh16TIntermTraverser10visitBlockENS_5VisitEPNS_12TIntermBlockE(%"class.sh::TIntermTraverser"*, i32, %"class.sh::TIntermBlock"*) unnamed_addr #0 comdat align 2 {
  ret i1 true
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZN2sh16TIntermTraverser31visitGlobalQualifierDeclarationENS_5VisitEPNS_33TIntermGlobalQualifierDeclarationE(%"class.sh::TIntermTraverser"*, i32, %"class.sh::TIntermGlobalQualifierDeclaration"*) unnamed_addr #0 comdat align 2 {
  ret i1 true
}

; Function Attrs: nounwind ssp uwtable
define internal zeroext i1 @_ZN2sh12_GLOBAL__N_141RemoveInactiveInterfaceVariablesTraverser16visitDeclarationENS_5VisitEPNS_18TIntermDeclarationE(%"class.sh::(anonymous namespace)::RemoveInactiveInterfaceVariablesTraverser"*, i32, %"class.sh::TIntermDeclaration"*) unnamed_addr #0 align 2 {
  %4 = alloca %"class.sh::TIntermDeclaration"*, align 8
  %5 = alloca %"class.sh::TVector", align 16
  %6 = alloca %"class.sh::TIntermBlock"*, align 8
  store %"class.sh::TIntermDeclaration"* %2, %"class.sh::TIntermDeclaration"** %4, align 8
  %7 = bitcast %"class.sh::TIntermDeclaration"* %2 to %"class.sh::TVector"* (%"class.sh::TIntermDeclaration"*)***
  %8 = load %"class.sh::TVector"* (%"class.sh::TIntermDeclaration"*)**, %"class.sh::TVector"* (%"class.sh::TIntermDeclaration"*)*** %7, align 8
  %9 = getelementptr inbounds %"class.sh::TVector"* (%"class.sh::TIntermDeclaration"*)*, %"class.sh::TVector"* (%"class.sh::TIntermDeclaration"*)** %8, i64 27
  %10 = load %"class.sh::TVector"* (%"class.sh::TIntermDeclaration"*)*, %"class.sh::TVector"* (%"class.sh::TIntermDeclaration"*)** %9, align 8
  %11 = tail call %"class.sh::TVector"* %10(%"class.sh::TIntermDeclaration"* %2) #9
  %12 = getelementptr inbounds %"class.sh::TVector", %"class.sh::TVector"* %11, i64 0, i32 0, i32 0, i32 0
  %13 = load %"class.sh::TIntermNode"**, %"class.sh::TIntermNode"*** %12, align 8
  %14 = load %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %13, align 8
  %15 = bitcast %"class.sh::TIntermNode"* %14 to %"class.sh::TIntermTyped"* (%"class.sh::TIntermNode"*)***
  %16 = load %"class.sh::TIntermTyped"* (%"class.sh::TIntermNode"*)**, %"class.sh::TIntermTyped"* (%"class.sh::TIntermNode"*)*** %15, align 8
  %17 = getelementptr inbounds %"class.sh::TIntermTyped"* (%"class.sh::TIntermNode"*)*, %"class.sh::TIntermTyped"* (%"class.sh::TIntermNode"*)** %16, i64 4
  %18 = load %"class.sh::TIntermTyped"* (%"class.sh::TIntermNode"*)*, %"class.sh::TIntermTyped"* (%"class.sh::TIntermNode"*)** %17, align 8
  %19 = tail call %"class.sh::TIntermTyped"* %18(%"class.sh::TIntermNode"* %14) #9
  %20 = getelementptr inbounds %"class.sh::TIntermTyped", %"class.sh::TIntermTyped"* %19, i64 0, i32 0
  %21 = bitcast %"class.sh::TIntermTyped"* %19 to %"class.sh::TIntermSymbol"* (%"class.sh::TIntermNode"*)***
  %22 = load %"class.sh::TIntermSymbol"* (%"class.sh::TIntermNode"*)**, %"class.sh::TIntermSymbol"* (%"class.sh::TIntermNode"*)*** %21, align 8
  %23 = getelementptr inbounds %"class.sh::TIntermSymbol"* (%"class.sh::TIntermNode"*)*, %"class.sh::TIntermSymbol"* (%"class.sh::TIntermNode"*)** %22, i64 19
  %24 = load %"class.sh::TIntermSymbol"* (%"class.sh::TIntermNode"*)*, %"class.sh::TIntermSymbol"* (%"class.sh::TIntermNode"*)** %23, align 8
  %25 = tail call %"class.sh::TIntermSymbol"* %24(%"class.sh::TIntermNode"* %20) #9
  %26 = icmp eq %"class.sh::TIntermSymbol"* %25, null
  br i1 %26, label %561, label %27

27:                                               ; preds = %3
  %28 = bitcast %"class.sh::TIntermTyped"* %19 to %"class.sh::TType"* (%"class.sh::TIntermTyped"*)***
  %29 = load %"class.sh::TType"* (%"class.sh::TIntermTyped"*)**, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*** %28, align 8
  %30 = getelementptr inbounds %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)** %29, i64 31
  %31 = load %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)** %30, align 8
  %32 = tail call dereferenceable(184) %"class.sh::TType"* %31(%"class.sh::TIntermTyped"* %19) #9
  %33 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %32, i64 0, i32 2
  %34 = load i32, i32* %33, align 8
  %35 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %32, i64 0, i32 0
  %36 = load i32, i32* %35, align 8
  %37 = icmp eq i32 %36, 91
  br i1 %37, label %38, label %86

38:                                               ; preds = %27
  %39 = tail call zeroext i1 @_ZN2sh15IsShaderIoBlockENS_10TQualifierE(i32 %34)
  br i1 %39, label %561, label %40

40:                                               ; preds = %38
  %41 = load i32, i32* %33, align 8
  %42 = and i32 %41, -2
  %43 = icmp eq i32 %42, 80
  br i1 %43, label %561, label %44

44:                                               ; preds = %40
  %45 = getelementptr inbounds %"class.sh::(anonymous namespace)::RemoveInactiveInterfaceVariablesTraverser", %"class.sh::(anonymous namespace)::RemoveInactiveInterfaceVariablesTraverser"* %0, i64 0, i32 5
  %46 = load %"class.std::__1::vector.52"*, %"class.std::__1::vector.52"** %45, align 8
  %47 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %32, i64 0, i32 12
  %48 = bitcast %"class.sh::TInterfaceBlock"** %47 to %"class.sh::TSymbol"**
  %49 = load %"class.sh::TSymbol"*, %"class.sh::TSymbol"** %48, align 8
  %50 = tail call { i8*, i64 } @_ZNK2sh7TSymbol4nameEv(%"class.sh::TSymbol"* %49) #9
  %51 = extractvalue { i8*, i64 } %50, 0
  %52 = extractvalue { i8*, i64 } %50, 1
  %53 = getelementptr inbounds %"class.std::__1::vector.52", %"class.std::__1::vector.52"* %46, i64 0, i32 0, i32 0
  %54 = load %"struct.sh::InterfaceBlock"*, %"struct.sh::InterfaceBlock"** %53, align 8
  %55 = getelementptr inbounds %"class.std::__1::vector.52", %"class.std::__1::vector.52"* %46, i64 0, i32 0, i32 1
  %56 = load %"struct.sh::InterfaceBlock"*, %"struct.sh::InterfaceBlock"** %55, align 8
  %57 = icmp eq %"struct.sh::InterfaceBlock"* %54, %56
  br i1 %57, label %561, label %58

58:                                               ; preds = %44
  %59 = icmp eq i8* %51, null
  %60 = select i1 %59, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str, i64 0, i64 0), i8* %51
  br label %61

61:                                               ; preds = %79, %58
  %62 = phi %"struct.sh::InterfaceBlock"* [ %54, %58 ], [ %80, %79 ]
  %63 = bitcast %"struct.sh::InterfaceBlock"* %62 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %64 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %63, i64 0, i32 1, i32 0
  %65 = load i8, i8* %64, align 1
  %66 = icmp slt i8 %65, 0
  %67 = getelementptr inbounds %"struct.sh::InterfaceBlock", %"struct.sh::InterfaceBlock"* %62, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %68 = load i64, i64* %67, align 8
  %69 = zext i8 %65 to i64
  %70 = select i1 %66, i64 %68, i64 %69
  %71 = icmp eq i64 %52, %70
  br i1 %71, label %72, label %79

72:                                               ; preds = %61
  %73 = getelementptr inbounds %"struct.sh::InterfaceBlock", %"struct.sh::InterfaceBlock"* %62, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %74 = load i8*, i8** %73, align 8
  %75 = bitcast %"struct.sh::InterfaceBlock"* %62 to i8*
  %76 = select i1 %66, i8* %74, i8* %75
  %77 = tail call i32 @bcmp(i8* %60, i8* %76, i64 %52) #9
  %78 = icmp eq i32 %77, 0
  br i1 %78, label %82, label %79

79:                                               ; preds = %72, %61
  %80 = getelementptr inbounds %"struct.sh::InterfaceBlock", %"struct.sh::InterfaceBlock"* %62, i64 1
  %81 = icmp eq %"struct.sh::InterfaceBlock"* %80, %56
  br i1 %81, label %561, label %61

82:                                               ; preds = %72
  %83 = getelementptr inbounds %"struct.sh::InterfaceBlock", %"struct.sh::InterfaceBlock"* %62, i64 0, i32 8
  %84 = load i8, i8* %83, align 1
  %85 = icmp eq i8 %84, 0
  br i1 %85, label %251, label %561

86:                                               ; preds = %27
  switch i32 %34, label %167 [
    i32 6, label %87
    i32 9, label %127
    i32 3, label %127
  ]

87:                                               ; preds = %86
  %88 = getelementptr inbounds %"class.sh::(anonymous namespace)::RemoveInactiveInterfaceVariablesTraverser", %"class.sh::(anonymous namespace)::RemoveInactiveInterfaceVariablesTraverser"* %0, i64 0, i32 4
  %89 = load %"class.std::__1::vector.30"*, %"class.std::__1::vector.30"** %88, align 8
  %90 = tail call { i8*, i64 } @_ZNK2sh13TIntermSymbol7getNameEv(%"class.sh::TIntermSymbol"* nonnull %25) #9
  %91 = extractvalue { i8*, i64 } %90, 0
  %92 = extractvalue { i8*, i64 } %90, 1
  %93 = getelementptr inbounds %"class.std::__1::vector.30", %"class.std::__1::vector.30"* %89, i64 0, i32 0, i32 0
  %94 = load %"struct.sh::ShaderVariable"*, %"struct.sh::ShaderVariable"** %93, align 8
  %95 = getelementptr inbounds %"class.std::__1::vector.30", %"class.std::__1::vector.30"* %89, i64 0, i32 0, i32 1
  %96 = load %"struct.sh::ShaderVariable"*, %"struct.sh::ShaderVariable"** %95, align 8
  %97 = icmp eq %"struct.sh::ShaderVariable"* %94, %96
  br i1 %97, label %561, label %98

98:                                               ; preds = %87
  %99 = icmp eq i8* %91, null
  %100 = select i1 %99, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str, i64 0, i64 0), i8* %91
  br label %101

101:                                              ; preds = %120, %98
  %102 = phi %"struct.sh::ShaderVariable"* [ %94, %98 ], [ %121, %120 ]
  %103 = getelementptr inbounds %"struct.sh::ShaderVariable", %"struct.sh::ShaderVariable"* %102, i64 0, i32 2
  %104 = bitcast %"class.std::__1::basic_string.37"* %103 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %105 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %104, i64 0, i32 1, i32 0
  %106 = load i8, i8* %105, align 1
  %107 = icmp slt i8 %106, 0
  %108 = getelementptr inbounds %"struct.sh::ShaderVariable", %"struct.sh::ShaderVariable"* %102, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %109 = load i64, i64* %108, align 8
  %110 = zext i8 %106 to i64
  %111 = select i1 %107, i64 %109, i64 %110
  %112 = icmp eq i64 %92, %111
  br i1 %112, label %113, label %120

113:                                              ; preds = %101
  %114 = getelementptr inbounds %"class.std::__1::basic_string.37", %"class.std::__1::basic_string.37"* %103, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %115 = load i8*, i8** %114, align 8
  %116 = bitcast %"class.std::__1::basic_string.37"* %103 to i8*
  %117 = select i1 %107, i8* %115, i8* %116
  %118 = tail call i32 @bcmp(i8* %100, i8* %117, i64 %92) #9
  %119 = icmp eq i32 %118, 0
  br i1 %119, label %123, label %120

120:                                              ; preds = %113, %101
  %121 = getelementptr inbounds %"struct.sh::ShaderVariable", %"struct.sh::ShaderVariable"* %102, i64 1
  %122 = icmp eq %"struct.sh::ShaderVariable"* %121, %96
  br i1 %122, label %561, label %101

123:                                              ; preds = %113
  %124 = getelementptr inbounds %"struct.sh::ShaderVariable", %"struct.sh::ShaderVariable"* %102, i64 0, i32 6
  %125 = load i8, i8* %124, align 1
  %126 = icmp eq i8 %125, 0
  br i1 %126, label %251, label %561

127:                                              ; preds = %86, %86
  %128 = getelementptr inbounds %"class.sh::(anonymous namespace)::RemoveInactiveInterfaceVariablesTraverser", %"class.sh::(anonymous namespace)::RemoveInactiveInterfaceVariablesTraverser"* %0, i64 0, i32 1
  %129 = load %"class.std::__1::vector.30"*, %"class.std::__1::vector.30"** %128, align 8
  %130 = tail call { i8*, i64 } @_ZNK2sh13TIntermSymbol7getNameEv(%"class.sh::TIntermSymbol"* nonnull %25) #9
  %131 = extractvalue { i8*, i64 } %130, 0
  %132 = extractvalue { i8*, i64 } %130, 1
  %133 = getelementptr inbounds %"class.std::__1::vector.30", %"class.std::__1::vector.30"* %129, i64 0, i32 0, i32 0
  %134 = load %"struct.sh::ShaderVariable"*, %"struct.sh::ShaderVariable"** %133, align 8
  %135 = getelementptr inbounds %"class.std::__1::vector.30", %"class.std::__1::vector.30"* %129, i64 0, i32 0, i32 1
  %136 = load %"struct.sh::ShaderVariable"*, %"struct.sh::ShaderVariable"** %135, align 8
  %137 = icmp eq %"struct.sh::ShaderVariable"* %134, %136
  br i1 %137, label %561, label %138

138:                                              ; preds = %127
  %139 = icmp eq i8* %131, null
  %140 = select i1 %139, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str, i64 0, i64 0), i8* %131
  br label %141

141:                                              ; preds = %160, %138
  %142 = phi %"struct.sh::ShaderVariable"* [ %134, %138 ], [ %161, %160 ]
  %143 = getelementptr inbounds %"struct.sh::ShaderVariable", %"struct.sh::ShaderVariable"* %142, i64 0, i32 2
  %144 = bitcast %"class.std::__1::basic_string.37"* %143 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %145 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %144, i64 0, i32 1, i32 0
  %146 = load i8, i8* %145, align 1
  %147 = icmp slt i8 %146, 0
  %148 = getelementptr inbounds %"struct.sh::ShaderVariable", %"struct.sh::ShaderVariable"* %142, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %149 = load i64, i64* %148, align 8
  %150 = zext i8 %146 to i64
  %151 = select i1 %147, i64 %149, i64 %150
  %152 = icmp eq i64 %132, %151
  br i1 %152, label %153, label %160

153:                                              ; preds = %141
  %154 = getelementptr inbounds %"class.std::__1::basic_string.37", %"class.std::__1::basic_string.37"* %143, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %155 = load i8*, i8** %154, align 8
  %156 = bitcast %"class.std::__1::basic_string.37"* %143 to i8*
  %157 = select i1 %147, i8* %155, i8* %156
  %158 = tail call i32 @bcmp(i8* %140, i8* %157, i64 %132) #9
  %159 = icmp eq i32 %158, 0
  br i1 %159, label %163, label %160

160:                                              ; preds = %153, %141
  %161 = getelementptr inbounds %"struct.sh::ShaderVariable", %"struct.sh::ShaderVariable"* %142, i64 1
  %162 = icmp eq %"struct.sh::ShaderVariable"* %161, %136
  br i1 %162, label %561, label %141

163:                                              ; preds = %153
  %164 = getelementptr inbounds %"struct.sh::ShaderVariable", %"struct.sh::ShaderVariable"* %142, i64 0, i32 6
  %165 = load i8, i8* %164, align 1
  %166 = icmp eq i8 %165, 0
  br i1 %166, label %251, label %561

167:                                              ; preds = %86
  %168 = tail call zeroext i1 @_ZN2sh10IsShaderInENS_10TQualifierE(i32 %34)
  br i1 %168, label %169, label %209

169:                                              ; preds = %167
  %170 = getelementptr inbounds %"class.sh::(anonymous namespace)::RemoveInactiveInterfaceVariablesTraverser", %"class.sh::(anonymous namespace)::RemoveInactiveInterfaceVariablesTraverser"* %0, i64 0, i32 2
  %171 = load %"class.std::__1::vector.30"*, %"class.std::__1::vector.30"** %170, align 8
  %172 = tail call { i8*, i64 } @_ZNK2sh13TIntermSymbol7getNameEv(%"class.sh::TIntermSymbol"* nonnull %25) #9
  %173 = extractvalue { i8*, i64 } %172, 0
  %174 = extractvalue { i8*, i64 } %172, 1
  %175 = getelementptr inbounds %"class.std::__1::vector.30", %"class.std::__1::vector.30"* %171, i64 0, i32 0, i32 0
  %176 = load %"struct.sh::ShaderVariable"*, %"struct.sh::ShaderVariable"** %175, align 8
  %177 = getelementptr inbounds %"class.std::__1::vector.30", %"class.std::__1::vector.30"* %171, i64 0, i32 0, i32 1
  %178 = load %"struct.sh::ShaderVariable"*, %"struct.sh::ShaderVariable"** %177, align 8
  %179 = icmp eq %"struct.sh::ShaderVariable"* %176, %178
  br i1 %179, label %561, label %180

180:                                              ; preds = %169
  %181 = icmp eq i8* %173, null
  %182 = select i1 %181, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str, i64 0, i64 0), i8* %173
  br label %183

183:                                              ; preds = %202, %180
  %184 = phi %"struct.sh::ShaderVariable"* [ %176, %180 ], [ %203, %202 ]
  %185 = getelementptr inbounds %"struct.sh::ShaderVariable", %"struct.sh::ShaderVariable"* %184, i64 0, i32 2
  %186 = bitcast %"class.std::__1::basic_string.37"* %185 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %187 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %186, i64 0, i32 1, i32 0
  %188 = load i8, i8* %187, align 1
  %189 = icmp slt i8 %188, 0
  %190 = getelementptr inbounds %"struct.sh::ShaderVariable", %"struct.sh::ShaderVariable"* %184, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %191 = load i64, i64* %190, align 8
  %192 = zext i8 %188 to i64
  %193 = select i1 %189, i64 %191, i64 %192
  %194 = icmp eq i64 %174, %193
  br i1 %194, label %195, label %202

195:                                              ; preds = %183
  %196 = getelementptr inbounds %"class.std::__1::basic_string.37", %"class.std::__1::basic_string.37"* %185, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %197 = load i8*, i8** %196, align 8
  %198 = bitcast %"class.std::__1::basic_string.37"* %185 to i8*
  %199 = select i1 %189, i8* %197, i8* %198
  %200 = tail call i32 @bcmp(i8* %182, i8* %199, i64 %174) #9
  %201 = icmp eq i32 %200, 0
  br i1 %201, label %205, label %202

202:                                              ; preds = %195, %183
  %203 = getelementptr inbounds %"struct.sh::ShaderVariable", %"struct.sh::ShaderVariable"* %184, i64 1
  %204 = icmp eq %"struct.sh::ShaderVariable"* %203, %178
  br i1 %204, label %561, label %183

205:                                              ; preds = %195
  %206 = getelementptr inbounds %"struct.sh::ShaderVariable", %"struct.sh::ShaderVariable"* %184, i64 0, i32 6
  %207 = load i8, i8* %206, align 1
  %208 = icmp eq i8 %207, 0
  br i1 %208, label %251, label %561

209:                                              ; preds = %167
  %210 = icmp eq i32 %34, 10
  br i1 %210, label %211, label %561

211:                                              ; preds = %209
  %212 = getelementptr inbounds %"class.sh::(anonymous namespace)::RemoveInactiveInterfaceVariablesTraverser", %"class.sh::(anonymous namespace)::RemoveInactiveInterfaceVariablesTraverser"* %0, i64 0, i32 3
  %213 = load %"class.std::__1::vector.30"*, %"class.std::__1::vector.30"** %212, align 8
  %214 = tail call { i8*, i64 } @_ZNK2sh13TIntermSymbol7getNameEv(%"class.sh::TIntermSymbol"* nonnull %25) #9
  %215 = extractvalue { i8*, i64 } %214, 0
  %216 = extractvalue { i8*, i64 } %214, 1
  %217 = getelementptr inbounds %"class.std::__1::vector.30", %"class.std::__1::vector.30"* %213, i64 0, i32 0, i32 0
  %218 = load %"struct.sh::ShaderVariable"*, %"struct.sh::ShaderVariable"** %217, align 8
  %219 = getelementptr inbounds %"class.std::__1::vector.30", %"class.std::__1::vector.30"* %213, i64 0, i32 0, i32 1
  %220 = load %"struct.sh::ShaderVariable"*, %"struct.sh::ShaderVariable"** %219, align 8
  %221 = icmp eq %"struct.sh::ShaderVariable"* %218, %220
  br i1 %221, label %561, label %222

222:                                              ; preds = %211
  %223 = icmp eq i8* %215, null
  %224 = select i1 %223, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str, i64 0, i64 0), i8* %215
  br label %225

225:                                              ; preds = %244, %222
  %226 = phi %"struct.sh::ShaderVariable"* [ %218, %222 ], [ %245, %244 ]
  %227 = getelementptr inbounds %"struct.sh::ShaderVariable", %"struct.sh::ShaderVariable"* %226, i64 0, i32 2
  %228 = bitcast %"class.std::__1::basic_string.37"* %227 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %229 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %228, i64 0, i32 1, i32 0
  %230 = load i8, i8* %229, align 1
  %231 = icmp slt i8 %230, 0
  %232 = getelementptr inbounds %"struct.sh::ShaderVariable", %"struct.sh::ShaderVariable"* %226, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %233 = load i64, i64* %232, align 8
  %234 = zext i8 %230 to i64
  %235 = select i1 %231, i64 %233, i64 %234
  %236 = icmp eq i64 %216, %235
  br i1 %236, label %237, label %244

237:                                              ; preds = %225
  %238 = getelementptr inbounds %"class.std::__1::basic_string.37", %"class.std::__1::basic_string.37"* %227, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %239 = load i8*, i8** %238, align 8
  %240 = bitcast %"class.std::__1::basic_string.37"* %227 to i8*
  %241 = select i1 %231, i8* %239, i8* %240
  %242 = tail call i32 @bcmp(i8* %224, i8* %241, i64 %216) #9
  %243 = icmp eq i32 %242, 0
  br i1 %243, label %247, label %244

244:                                              ; preds = %237, %225
  %245 = getelementptr inbounds %"struct.sh::ShaderVariable", %"struct.sh::ShaderVariable"* %226, i64 1
  %246 = icmp eq %"struct.sh::ShaderVariable"* %245, %220
  br i1 %246, label %561, label %225

247:                                              ; preds = %237
  %248 = getelementptr inbounds %"struct.sh::ShaderVariable", %"struct.sh::ShaderVariable"* %226, i64 0, i32 6
  %249 = load i8, i8* %248, align 1
  %250 = icmp eq i8 %249, 0
  br i1 %250, label %251, label %561

251:                                              ; preds = %205, %163, %123, %82, %247
  %252 = bitcast %"class.sh::TVector"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %252) #9
  %253 = getelementptr inbounds %"class.sh::TVector", %"class.sh::TVector"* %5, i64 0, i32 0, i32 0, i32 0
  %254 = getelementptr inbounds %"class.sh::TVector", %"class.sh::TVector"* %5, i64 0, i32 0, i32 0, i32 1
  %255 = getelementptr inbounds %"class.sh::TVector", %"class.sh::TVector"* %5, i64 0, i32 0, i32 0, i32 2, i32 0, i32 0
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %252, i8 0, i64 24, i1 false) #9
  %256 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %32, i64 0, i32 14
  %257 = load i8, i8* %256, align 8, !range !2
  %258 = icmp eq i8 %257, 0
  br i1 %258, label %504, label %259

259:                                              ; preds = %251
  %260 = tail call %"class.angle::PoolAllocator"* @_Z22GetGlobalPoolAllocatorv() #9
  %261 = tail call i8* @_ZN5angle13PoolAllocator8allocateEm(%"class.angle::PoolAllocator"* %260, i64 184) #9
  %262 = bitcast i8* %261 to %"class.sh::TType"*
  %263 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %32, i64 0, i32 13
  %264 = load %"class.sh::TStructure"*, %"class.sh::TStructure"** %263, align 8
  tail call void @_ZN2sh5TTypeC1EPKNS_10TStructureEb(%"class.sh::TType"* %262, %"class.sh::TStructure"* %264, i1 zeroext true) #9
  %265 = tail call %"class.angle::PoolAllocator"* @_Z22GetGlobalPoolAllocatorv() #9
  %266 = tail call i8* @_ZN5angle13PoolAllocator8allocateEm(%"class.angle::PoolAllocator"* %265, i64 40) #9
  %267 = bitcast i8* %266 to %"class.sh::TVariable"*
  %268 = getelementptr inbounds %"class.sh::(anonymous namespace)::RemoveInactiveInterfaceVariablesTraverser", %"class.sh::(anonymous namespace)::RemoveInactiveInterfaceVariablesTraverser"* %0, i64 0, i32 0, i32 8
  %269 = load %"class.sh::TSymbolTable"*, %"class.sh::TSymbolTable"** %268, align 8
  tail call void @_ZN2sh9TVariableC1EPNS_12TSymbolTableERKNS_15ImmutableStringEPKNS_5TTypeENS_10SymbolTypeENS_10TExtensionE(%"class.sh::TVariable"* %267, %"class.sh::TSymbolTable"* %269, %"class.sh::ImmutableString"* nonnull dereferenceable(16) @_ZN2shL21kEmptyImmutableStringE, %"class.sh::TType"* %262, i8 zeroext 3, i8 zeroext 0) #9
  %270 = tail call %"class.angle::PoolAllocator"* @_Z22GetGlobalPoolAllocatorv() #9
  %271 = tail call i8* @_ZN5angle13PoolAllocator8allocateEm(%"class.angle::PoolAllocator"* %270, i64 56) #9
  %272 = bitcast i8* %271 to %"class.sh::TIntermDeclaration"*
  %273 = bitcast i8* %271 to i32 (...)***
  %274 = getelementptr inbounds i8, i8* %271, i64 8
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %274, i8 0, i64 16, i1 false) #9
  %275 = getelementptr inbounds i8, i8* %271, i64 24
  %276 = bitcast i8* %275 to i32 (...)***
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [31 x i8*], [6 x i8*] }, { [31 x i8*], [6 x i8*] }* @_ZTVN2sh18TIntermDeclarationE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %273, align 8
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [31 x i8*], [6 x i8*] }, { [31 x i8*], [6 x i8*] }* @_ZTVN2sh18TIntermDeclarationE, i64 0, inrange i32 1, i64 2) to i32 (...)**), i32 (...)*** %276, align 8
  %277 = getelementptr inbounds i8, i8* %271, i64 32
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %277, i8 0, i64 24, i1 false) #9
  %278 = tail call %"class.angle::PoolAllocator"* @_Z22GetGlobalPoolAllocatorv() #9
  %279 = tail call i8* @_ZN5angle13PoolAllocator8allocateEm(%"class.angle::PoolAllocator"* %278, i64 32) #9
  %280 = bitcast i8* %279 to %"class.sh::TIntermSymbol"*
  tail call void @_ZN2sh13TIntermSymbolC1EPKNS_9TVariableE(%"class.sh::TIntermSymbol"* %280, %"class.sh::TVariable"* %267) #9
  %281 = bitcast i8* %279 to %"class.sh::TIntermTyped"*
  tail call void @_ZN2sh18TIntermDeclaration16appendDeclaratorEPNS_12TIntermTypedE(%"class.sh::TIntermDeclaration"* %272, %"class.sh::TIntermTyped"* %281) #9
  %282 = ptrtoint i8* %271 to i64
  %283 = load %"class.sh::TIntermNode"**, %"class.sh::TIntermNode"*** %254, align 8
  %284 = load %"class.sh::TIntermNode"**, %"class.sh::TIntermNode"*** %255, align 16
  %285 = icmp ult %"class.sh::TIntermNode"** %283, %284
  %286 = ptrtoint %"class.sh::TIntermNode"** %284 to i64
  br i1 %285, label %287, label %292

287:                                              ; preds = %259
  %288 = bitcast %"class.sh::TIntermNode"** %283 to i64*
  store i64 %282, i64* %288, align 8
  %289 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %283, i64 1
  %290 = ptrtoint %"class.sh::TIntermNode"** %289 to i64
  %291 = bitcast %"class.sh::TIntermNode"*** %254 to i64*
  store i64 %290, i64* %291, align 8
  br label %504

292:                                              ; preds = %259
  %293 = ptrtoint %"class.sh::TIntermNode"** %283 to i64
  %294 = bitcast %"class.sh::TIntermNode"*** %254 to i64*
  %295 = bitcast %"class.sh::TVector"* %5 to i64*
  %296 = load i64, i64* %295, align 16
  %297 = sub i64 %293, %296
  %298 = ashr exact i64 %297, 3
  %299 = add nsw i64 %298, 1
  %300 = icmp ugt i64 %299, 2305843009213693951
  br i1 %300, label %301, label %303

301:                                              ; preds = %292
  %302 = bitcast %"class.sh::TVector"* %5 to %"class.std::__1::__vector_base_common"*
  call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* nonnull %302) #10
  unreachable

303:                                              ; preds = %292
  %304 = bitcast %"class.sh::TIntermNode"*** %255 to i64*
  %305 = sub i64 %286, %296
  %306 = ashr exact i64 %305, 3
  %307 = icmp ult i64 %306, 1152921504606846975
  br i1 %307, label %308, label %313

308:                                              ; preds = %303
  %309 = ashr exact i64 %305, 2
  %310 = icmp ult i64 %309, %299
  %311 = select i1 %310, i64 %299, i64 %309
  %312 = icmp eq i64 %311, 0
  br i1 %312, label %319, label %313

313:                                              ; preds = %308, %303
  %314 = phi i64 [ %311, %308 ], [ 2305843009213693951, %303 ]
  %315 = tail call %"class.angle::PoolAllocator"* @_Z22GetGlobalPoolAllocatorv() #9
  %316 = shl i64 %314, 3
  %317 = tail call i8* @_ZN5angle13PoolAllocator8allocateEm(%"class.angle::PoolAllocator"* %315, i64 %316) #9
  %318 = bitcast i8* %317 to %"class.sh::TIntermNode"**
  br label %319

319:                                              ; preds = %313, %308
  %320 = phi i64 [ %314, %313 ], [ 0, %308 ]
  %321 = phi %"class.sh::TIntermNode"** [ %318, %313 ], [ null, %308 ]
  %322 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %321, i64 %298
  %323 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %321, i64 %320
  %324 = ptrtoint %"class.sh::TIntermNode"** %323 to i64
  %325 = bitcast %"class.sh::TIntermNode"** %322 to i64*
  store i64 %282, i64* %325, align 8
  %326 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %322, i64 1
  %327 = ptrtoint %"class.sh::TIntermNode"** %326 to i64
  %328 = load %"class.sh::TIntermNode"**, %"class.sh::TIntermNode"*** %253, align 16
  %329 = ptrtoint %"class.sh::TIntermNode"** %328 to i64
  %330 = load %"class.sh::TIntermNode"**, %"class.sh::TIntermNode"*** %254, align 8
  %331 = icmp eq %"class.sh::TIntermNode"** %330, %328
  br i1 %331, label %501, label %332

332:                                              ; preds = %319
  %333 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %330, i64 -1
  %334 = ptrtoint %"class.sh::TIntermNode"** %333 to i64
  %335 = sub i64 %334, %329
  %336 = lshr i64 %335, 3
  %337 = add nuw nsw i64 %336, 1
  %338 = icmp ult i64 %337, 4
  br i1 %338, label %431, label %339

339:                                              ; preds = %332
  %340 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %330, i64 -1
  %341 = ptrtoint %"class.sh::TIntermNode"** %340 to i64
  %342 = sub i64 %341, %329
  %343 = lshr i64 %342, 3
  %344 = xor i64 %343, -1
  %345 = add nsw i64 %298, %344
  %346 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %321, i64 %345
  %347 = xor i64 %343, -1
  %348 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %330, i64 %347
  %349 = icmp ult %"class.sh::TIntermNode"** %346, %330
  %350 = icmp ult %"class.sh::TIntermNode"** %348, %322
  %351 = and i1 %349, %350
  br i1 %351, label %431, label %352

352:                                              ; preds = %339
  %353 = and i64 %337, 4611686018427387900
  %354 = sub nsw i64 0, %353
  %355 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %322, i64 %354
  %356 = sub nsw i64 0, %353
  %357 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %330, i64 %356
  %358 = add nsw i64 %353, -4
  %359 = lshr exact i64 %358, 2
  %360 = add nuw nsw i64 %359, 1
  %361 = and i64 %360, 1
  %362 = icmp eq i64 %358, 0
  br i1 %362, label %409, label %363

363:                                              ; preds = %352
  %364 = sub nuw nsw i64 %360, %361
  %365 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %322, i64 -1
  %366 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %330, i64 -1
  %367 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %322, i64 -1
  %368 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %330, i64 -1
  br label %369

369:                                              ; preds = %369, %363
  %370 = phi i64 [ 0, %363 ], [ %404, %369 ]
  %371 = phi i64 [ %364, %363 ], [ %405, %369 ]
  %372 = sub i64 0, %370
  %373 = sub i64 0, %370
  %374 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %365, i64 %372
  %375 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %366, i64 %373
  %376 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %375, i64 -1
  %377 = bitcast %"class.sh::TIntermNode"** %376 to <2 x i64>*
  %378 = load <2 x i64>, <2 x i64>* %377, align 8, !alias.scope !3
  %379 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %375, i64 -2
  %380 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %379, i64 -1
  %381 = bitcast %"class.sh::TIntermNode"** %380 to <2 x i64>*
  %382 = load <2 x i64>, <2 x i64>* %381, align 8, !alias.scope !3
  %383 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %374, i64 -1
  %384 = bitcast %"class.sh::TIntermNode"** %383 to <2 x i64>*
  store <2 x i64> %378, <2 x i64>* %384, align 8, !alias.scope !6, !noalias !3
  %385 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %374, i64 -2
  %386 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %385, i64 -1
  %387 = bitcast %"class.sh::TIntermNode"** %386 to <2 x i64>*
  store <2 x i64> %382, <2 x i64>* %387, align 8, !alias.scope !6, !noalias !3
  %388 = sub nuw nsw i64 -4, %370
  %389 = sub nuw nsw i64 -4, %370
  %390 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %367, i64 %388
  %391 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %368, i64 %389
  %392 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %391, i64 -1
  %393 = bitcast %"class.sh::TIntermNode"** %392 to <2 x i64>*
  %394 = load <2 x i64>, <2 x i64>* %393, align 8, !alias.scope !3
  %395 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %391, i64 -2
  %396 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %395, i64 -1
  %397 = bitcast %"class.sh::TIntermNode"** %396 to <2 x i64>*
  %398 = load <2 x i64>, <2 x i64>* %397, align 8, !alias.scope !3
  %399 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %390, i64 -1
  %400 = bitcast %"class.sh::TIntermNode"** %399 to <2 x i64>*
  store <2 x i64> %394, <2 x i64>* %400, align 8, !alias.scope !6, !noalias !3
  %401 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %390, i64 -2
  %402 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %401, i64 -1
  %403 = bitcast %"class.sh::TIntermNode"** %402 to <2 x i64>*
  store <2 x i64> %398, <2 x i64>* %403, align 8, !alias.scope !6, !noalias !3
  %404 = add i64 %370, 8
  %405 = add i64 %371, -2
  %406 = icmp eq i64 %405, 0
  br i1 %406, label %407, label %369, !llvm.loop !8

407:                                              ; preds = %369
  %408 = sub nuw nsw i64 -8, %370
  br label %409

409:                                              ; preds = %407, %352
  %410 = phi i64 [ 0, %352 ], [ %408, %407 ]
  %411 = icmp eq i64 %361, 0
  br i1 %411, label %429, label %412

412:                                              ; preds = %409
  %413 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %322, i64 -1
  %414 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %330, i64 -1
  %415 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %413, i64 %410
  %416 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %414, i64 %410
  %417 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %416, i64 -1
  %418 = bitcast %"class.sh::TIntermNode"** %417 to <2 x i64>*
  %419 = load <2 x i64>, <2 x i64>* %418, align 8, !alias.scope !3
  %420 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %416, i64 -2
  %421 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %420, i64 -1
  %422 = bitcast %"class.sh::TIntermNode"** %421 to <2 x i64>*
  %423 = load <2 x i64>, <2 x i64>* %422, align 8, !alias.scope !3
  %424 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %415, i64 -1
  %425 = bitcast %"class.sh::TIntermNode"** %424 to <2 x i64>*
  store <2 x i64> %419, <2 x i64>* %425, align 8, !alias.scope !6, !noalias !3
  %426 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %415, i64 -2
  %427 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %426, i64 -1
  %428 = bitcast %"class.sh::TIntermNode"** %427 to <2 x i64>*
  store <2 x i64> %423, <2 x i64>* %428, align 8, !alias.scope !6, !noalias !3
  br label %429

429:                                              ; preds = %409, %412
  %430 = icmp eq i64 %337, %353
  br i1 %430, label %501, label %431

431:                                              ; preds = %429, %339, %332
  %432 = phi %"class.sh::TIntermNode"** [ %322, %339 ], [ %322, %332 ], [ %355, %429 ]
  %433 = phi %"class.sh::TIntermNode"** [ %330, %339 ], [ %330, %332 ], [ %357, %429 ]
  %434 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %433, i64 -1
  %435 = ptrtoint %"class.sh::TIntermNode"** %434 to i64
  %436 = sub i64 %435, %329
  %437 = lshr i64 %436, 3
  %438 = add nuw nsw i64 %437, 1
  %439 = and i64 %438, 7
  %440 = icmp eq i64 %439, 0
  br i1 %440, label %452, label %441

441:                                              ; preds = %431, %441
  %442 = phi %"class.sh::TIntermNode"** [ %445, %441 ], [ %432, %431 ]
  %443 = phi %"class.sh::TIntermNode"** [ %446, %441 ], [ %433, %431 ]
  %444 = phi i64 [ %450, %441 ], [ %439, %431 ]
  %445 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %442, i64 -1
  %446 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %443, i64 -1
  %447 = bitcast %"class.sh::TIntermNode"** %446 to i64*
  %448 = load i64, i64* %447, align 8
  %449 = bitcast %"class.sh::TIntermNode"** %445 to i64*
  store i64 %448, i64* %449, align 8
  %450 = add i64 %444, -1
  %451 = icmp eq i64 %450, 0
  br i1 %451, label %452, label %441, !llvm.loop !10

452:                                              ; preds = %441, %431
  %453 = phi %"class.sh::TIntermNode"** [ undef, %431 ], [ %445, %441 ]
  %454 = phi %"class.sh::TIntermNode"** [ %432, %431 ], [ %445, %441 ]
  %455 = phi %"class.sh::TIntermNode"** [ %433, %431 ], [ %446, %441 ]
  %456 = icmp ult i64 %436, 56
  br i1 %456, label %501, label %457

457:                                              ; preds = %452, %457
  %458 = phi %"class.sh::TIntermNode"** [ %495, %457 ], [ %454, %452 ]
  %459 = phi %"class.sh::TIntermNode"** [ %496, %457 ], [ %455, %452 ]
  %460 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %458, i64 -1
  %461 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %459, i64 -1
  %462 = bitcast %"class.sh::TIntermNode"** %461 to i64*
  %463 = load i64, i64* %462, align 8
  %464 = bitcast %"class.sh::TIntermNode"** %460 to i64*
  store i64 %463, i64* %464, align 8
  %465 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %458, i64 -2
  %466 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %459, i64 -2
  %467 = bitcast %"class.sh::TIntermNode"** %466 to i64*
  %468 = load i64, i64* %467, align 8
  %469 = bitcast %"class.sh::TIntermNode"** %465 to i64*
  store i64 %468, i64* %469, align 8
  %470 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %458, i64 -3
  %471 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %459, i64 -3
  %472 = bitcast %"class.sh::TIntermNode"** %471 to i64*
  %473 = load i64, i64* %472, align 8
  %474 = bitcast %"class.sh::TIntermNode"** %470 to i64*
  store i64 %473, i64* %474, align 8
  %475 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %458, i64 -4
  %476 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %459, i64 -4
  %477 = bitcast %"class.sh::TIntermNode"** %476 to i64*
  %478 = load i64, i64* %477, align 8
  %479 = bitcast %"class.sh::TIntermNode"** %475 to i64*
  store i64 %478, i64* %479, align 8
  %480 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %458, i64 -5
  %481 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %459, i64 -5
  %482 = bitcast %"class.sh::TIntermNode"** %481 to i64*
  %483 = load i64, i64* %482, align 8
  %484 = bitcast %"class.sh::TIntermNode"** %480 to i64*
  store i64 %483, i64* %484, align 8
  %485 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %458, i64 -6
  %486 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %459, i64 -6
  %487 = bitcast %"class.sh::TIntermNode"** %486 to i64*
  %488 = load i64, i64* %487, align 8
  %489 = bitcast %"class.sh::TIntermNode"** %485 to i64*
  store i64 %488, i64* %489, align 8
  %490 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %458, i64 -7
  %491 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %459, i64 -7
  %492 = bitcast %"class.sh::TIntermNode"** %491 to i64*
  %493 = load i64, i64* %492, align 8
  %494 = bitcast %"class.sh::TIntermNode"** %490 to i64*
  store i64 %493, i64* %494, align 8
  %495 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %458, i64 -8
  %496 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %459, i64 -8
  %497 = bitcast %"class.sh::TIntermNode"** %496 to i64*
  %498 = load i64, i64* %497, align 8
  %499 = bitcast %"class.sh::TIntermNode"** %495 to i64*
  store i64 %498, i64* %499, align 8
  %500 = icmp eq %"class.sh::TIntermNode"** %496, %328
  br i1 %500, label %501, label %457, !llvm.loop !12

501:                                              ; preds = %452, %457, %429, %319
  %502 = phi %"class.sh::TIntermNode"** [ %322, %319 ], [ %355, %429 ], [ %453, %452 ], [ %495, %457 ]
  %503 = ptrtoint %"class.sh::TIntermNode"** %502 to i64
  store i64 %503, i64* %295, align 16
  store i64 %327, i64* %294, align 8
  store i64 %324, i64* %304, align 16
  br label %504

504:                                              ; preds = %251, %501, %287
  %505 = getelementptr inbounds %"class.sh::(anonymous namespace)::RemoveInactiveInterfaceVariablesTraverser", %"class.sh::(anonymous namespace)::RemoveInactiveInterfaceVariablesTraverser"* %0, i64 0, i32 0, i32 7
  %506 = bitcast %"class.sh::TIntermBlock"** %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %506) #9
  %507 = getelementptr inbounds %"class.sh::(anonymous namespace)::RemoveInactiveInterfaceVariablesTraverser", %"class.sh::(anonymous namespace)::RemoveInactiveInterfaceVariablesTraverser"* %0, i64 0, i32 0, i32 11, i32 0
  %508 = getelementptr inbounds %"class.sh::(anonymous namespace)::RemoveInactiveInterfaceVariablesTraverser", %"class.sh::(anonymous namespace)::RemoveInactiveInterfaceVariablesTraverser"* %0, i64 0, i32 0, i32 11, i32 0, i32 0, i32 1
  %509 = bitcast %"class.sh::TIntermNode"*** %508 to i64*
  %510 = load i64, i64* %509, align 8
  %511 = bitcast %"class.std::__1::vector"* %507 to i64*
  %512 = load i64, i64* %511, align 8
  %513 = sub i64 %510, %512
  %514 = ashr exact i64 %513, 3
  %515 = icmp ult i64 %514, 2
  br i1 %515, label %522, label %516

516:                                              ; preds = %504
  %517 = inttoptr i64 %512 to %"class.sh::TIntermNode"**
  %518 = add nsw i64 %514, -2
  %519 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %517, i64 %518
  %520 = load %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %519, align 8
  %521 = bitcast %"class.sh::TIntermNode"* %520 to %"class.sh::TIntermBlock"* (%"class.sh::TIntermNode"*)***
  br label %522

522:                                              ; preds = %504, %516
  %523 = phi %"class.sh::TIntermBlock"* (%"class.sh::TIntermNode"*)*** [ %521, %516 ], [ null, %504 ]
  %524 = phi %"class.sh::TIntermNode"* [ %520, %516 ], [ null, %504 ]
  %525 = load %"class.sh::TIntermBlock"* (%"class.sh::TIntermNode"*)**, %"class.sh::TIntermBlock"* (%"class.sh::TIntermNode"*)*** %523, align 8
  %526 = getelementptr inbounds %"class.sh::TIntermBlock"* (%"class.sh::TIntermNode"*)*, %"class.sh::TIntermBlock"* (%"class.sh::TIntermNode"*)** %525, i64 8
  %527 = load %"class.sh::TIntermBlock"* (%"class.sh::TIntermNode"*)*, %"class.sh::TIntermBlock"* (%"class.sh::TIntermNode"*)** %526, align 8
  %528 = tail call %"class.sh::TIntermBlock"* %527(%"class.sh::TIntermNode"* %524) #9
  store %"class.sh::TIntermBlock"* %528, %"class.sh::TIntermBlock"** %6, align 8
  %529 = getelementptr inbounds %"class.sh::(anonymous namespace)::RemoveInactiveInterfaceVariablesTraverser", %"class.sh::(anonymous namespace)::RemoveInactiveInterfaceVariablesTraverser"* %0, i64 0, i32 0, i32 7, i32 0, i32 1
  %530 = load %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry"*, %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry"** %529, align 8
  %531 = getelementptr inbounds %"class.sh::(anonymous namespace)::RemoveInactiveInterfaceVariablesTraverser", %"class.sh::(anonymous namespace)::RemoveInactiveInterfaceVariablesTraverser"* %0, i64 0, i32 0, i32 7, i32 0, i32 2, i32 0, i32 0
  %532 = load %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry"*, %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry"** %531, align 8
  %533 = icmp ult %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry"* %530, %532
  br i1 %533, label %534, label %554

534:                                              ; preds = %522
  %535 = icmp eq %"class.sh::TIntermBlock"* %528, null
  %536 = getelementptr inbounds %"class.sh::TIntermBlock", %"class.sh::TIntermBlock"* %528, i64 0, i32 1
  %537 = select i1 %535, %"class.sh::TIntermAggregateBase"* null, %"class.sh::TIntermAggregateBase"* %536
  %538 = bitcast %"class.sh::TIntermDeclaration"** %4 to i64*
  %539 = load i64, i64* %538, align 8
  %540 = getelementptr inbounds %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry", %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry"* %530, i64 0, i32 0
  store %"class.sh::TIntermAggregateBase"* %537, %"class.sh::TIntermAggregateBase"** %540, align 8
  %541 = getelementptr inbounds %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry", %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry"* %530, i64 0, i32 1
  %542 = bitcast %"class.sh::TIntermNode"** %541 to i64*
  store i64 %539, i64* %542, align 8
  %543 = getelementptr inbounds %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry", %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry"* %530, i64 0, i32 2
  %544 = bitcast %"class.sh::TVector"* %5 to <2 x i64>*
  %545 = load <2 x i64>, <2 x i64>* %544, align 16
  %546 = bitcast %"class.sh::TVector"* %543 to <2 x i64>*
  store <2 x i64> %545, <2 x i64>* %546, align 8
  %547 = bitcast %"class.sh::TIntermNode"*** %255 to i64*
  %548 = load i64, i64* %547, align 16
  %549 = getelementptr inbounds %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry", %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry"* %530, i64 0, i32 2, i32 0, i32 0, i32 2, i32 0, i32 0
  %550 = bitcast %"class.sh::TIntermNode"*** %549 to i64*
  store i64 %548, i64* %550, align 8
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %252, i8 0, i64 24, i1 false) #9
  %551 = getelementptr inbounds %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry", %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry"* %530, i64 1
  %552 = ptrtoint %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry"* %551 to i64
  %553 = bitcast %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry"** %529 to i64*
  store i64 %552, i64* %553, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %506) #9
  br label %560

554:                                              ; preds = %522
  call void @_ZNSt3__16vectorIN2sh16TIntermTraverser28NodeReplaceWithMultipleEntryENS_9allocatorIS3_EEE24__emplace_back_slow_pathIJPNS1_12TIntermBlockERPNS1_18TIntermDeclarationENS1_7TVectorIPNS1_11TIntermNodeEEEEEEvDpOT_(%"class.std::__1::vector.59"* %505, %"class.sh::TIntermBlock"** nonnull dereferenceable(8) %6, %"class.sh::TIntermDeclaration"** nonnull dereferenceable(8) %4, %"class.sh::TVector"* nonnull dereferenceable(24) %5) #9
  %555 = load %"class.sh::TIntermNode"**, %"class.sh::TIntermNode"*** %253, align 16
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %506) #9
  %556 = icmp eq %"class.sh::TIntermNode"** %555, null
  br i1 %556, label %560, label %557

557:                                              ; preds = %554
  %558 = ptrtoint %"class.sh::TIntermNode"** %555 to i64
  %559 = bitcast %"class.sh::TIntermNode"*** %254 to i64*
  store i64 %558, i64* %559, align 8
  br label %560

560:                                              ; preds = %534, %554, %557
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %252) #9
  br label %561

561:                                              ; preds = %160, %120, %244, %202, %79, %40, %169, %127, %87, %44, %211, %205, %163, %123, %82, %247, %560, %38, %209, %3
  ret i1 false
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZN2sh16TIntermTraverser9visitLoopENS_5VisitEPNS_11TIntermLoopE(%"class.sh::TIntermTraverser"*, i32, %"class.sh::TIntermLoop"*) unnamed_addr #0 comdat align 2 {
  ret i1 true
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZN2sh16TIntermTraverser11visitBranchENS_5VisitEPNS_13TIntermBranchE(%"class.sh::TIntermTraverser"*, i32, %"class.sh::TIntermBranch"*) unnamed_addr #0 comdat align 2 {
  ret i1 true
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN2sh16TIntermTraverser26visitPreprocessorDirectiveEPNS_28TIntermPreprocessorDirectiveE(%"class.sh::TIntermTraverser"*, %"class.sh::TIntermPreprocessorDirective"*) unnamed_addr #0 comdat align 2 {
  ret void
}

declare void @_ZN2sh16TIntermTraverser14traverseBinaryEPNS_13TIntermBinaryE(%"class.sh::TIntermTraverser"*, %"class.sh::TIntermBinary"*) unnamed_addr #2

declare void @_ZN2sh16TIntermTraverser13traverseUnaryEPNS_12TIntermUnaryE(%"class.sh::TIntermTraverser"*, %"class.sh::TIntermUnary"*) unnamed_addr #2

declare void @_ZN2sh16TIntermTraverser26traverseFunctionDefinitionEPNS_25TIntermFunctionDefinitionE(%"class.sh::TIntermTraverser"*, %"class.sh::TIntermFunctionDefinition"*) unnamed_addr #2

declare void @_ZN2sh16TIntermTraverser17traverseAggregateEPNS_16TIntermAggregateE(%"class.sh::TIntermTraverser"*, %"class.sh::TIntermAggregate"*) unnamed_addr #2

declare void @_ZN2sh16TIntermTraverser13traverseBlockEPNS_12TIntermBlockE(%"class.sh::TIntermTraverser"*, %"class.sh::TIntermBlock"*) unnamed_addr #2

declare void @_ZN2sh16TIntermTraverser12traverseLoopEPNS_11TIntermLoopE(%"class.sh::TIntermTraverser"*, %"class.sh::TIntermLoop"*) unnamed_addr #2

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZN2sh15IsShaderIoBlockENS_10TQualifierE(i32) local_unnamed_addr #4 comdat {
  switch i32 %0, label %2 [
    i32 74, label %3
    i32 84, label %3
    i32 11, label %3
    i32 82, label %3
    i32 83, label %3
    i32 88, label %3
    i32 89, label %3
    i32 72, label %3
    i32 73, label %3
    i32 12, label %3
  ]

2:                                                ; preds = %1
  br label %3

3:                                                ; preds = %1, %1, %1, %1, %1, %1, %1, %1, %1, %1, %2
  %4 = phi i1 [ false, %2 ], [ true, %1 ], [ true, %1 ], [ true, %1 ], [ true, %1 ], [ true, %1 ], [ true, %1 ], [ true, %1 ], [ true, %1 ], [ true, %1 ], [ true, %1 ]
  ret i1 %4
}

declare { i8*, i64 } @_ZNK2sh7TSymbol4nameEv(%"class.sh::TSymbol"*) local_unnamed_addr #2

declare { i8*, i64 } @_ZNK2sh13TIntermSymbol7getNameEv(%"class.sh::TIntermSymbol"*) local_unnamed_addr #2

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZN2sh10IsShaderInENS_10TQualifierE(i32) local_unnamed_addr #4 comdat {
  switch i32 %0, label %2 [
    i32 9, label %3
    i32 82, label %3
    i32 88, label %3
    i32 72, label %3
    i32 12, label %3
    i32 74, label %3
    i32 3, label %3
    i32 4, label %3
    i32 49, label %3
    i32 50, label %3
    i32 51, label %3
    i32 52, label %3
    i32 53, label %3
    i32 80, label %3
  ]

2:                                                ; preds = %1
  br label %3

3:                                                ; preds = %1, %1, %1, %1, %1, %1, %1, %1, %1, %1, %1, %1, %1, %1, %2
  %4 = phi i1 [ false, %2 ], [ true, %1 ], [ true, %1 ], [ true, %1 ], [ true, %1 ], [ true, %1 ], [ true, %1 ], [ true, %1 ], [ true, %1 ], [ true, %1 ], [ true, %1 ], [ true, %1 ], [ true, %1 ], [ true, %1 ], [ true, %1 ]
  ret i1 %4
}

declare void @_ZN2sh5TTypeC1EPKNS_10TStructureEb(%"class.sh::TType"*, %"class.sh::TStructure"*, i1 zeroext) unnamed_addr #2

declare void @_ZN2sh9TVariableC1EPNS_12TSymbolTableERKNS_15ImmutableStringEPKNS_5TTypeENS_10SymbolTypeENS_10TExtensionE(%"class.sh::TVariable"*, %"class.sh::TSymbolTable"*, %"class.sh::ImmutableString"* dereferenceable(16), %"class.sh::TType"*, i8 zeroext, i8 zeroext) unnamed_addr #2

declare void @_ZN2sh18TIntermDeclaration16appendDeclaratorEPNS_12TIntermTypedE(%"class.sh::TIntermDeclaration"*, %"class.sh::TIntermTyped"*) local_unnamed_addr #2

declare void @_ZN2sh13TIntermSymbolC1EPKNS_9TVariableE(%"class.sh::TIntermSymbol"*, %"class.sh::TVariable"*) unnamed_addr #2

declare %"class.angle::PoolAllocator"* @_Z22GetGlobalPoolAllocatorv() local_unnamed_addr #2

declare i8* @_ZN5angle13PoolAllocator8allocateEm(%"class.angle::PoolAllocator"*, i64) local_unnamed_addr #2

; Function Attrs: noreturn
declare void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"*) local_unnamed_addr #5

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__16vectorIN2sh16TIntermTraverser28NodeReplaceWithMultipleEntryENS_9allocatorIS3_EEE24__emplace_back_slow_pathIJPNS1_12TIntermBlockERPNS1_18TIntermDeclarationENS1_7TVectorIPNS1_11TIntermNodeEEEEEEvDpOT_(%"class.std::__1::vector.59"*, %"class.sh::TIntermBlock"** dereferenceable(8), %"class.sh::TIntermDeclaration"** dereferenceable(8), %"class.sh::TVector"* dereferenceable(24)) local_unnamed_addr #4 comdat align 2 {
  %5 = getelementptr inbounds %"class.std::__1::vector.59", %"class.std::__1::vector.59"* %0, i64 0, i32 0, i32 1
  %6 = bitcast %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry"** %5 to i64*
  %7 = load i64, i64* %6, align 8
  %8 = bitcast %"class.std::__1::vector.59"* %0 to i64*
  %9 = load i64, i64* %8, align 8
  %10 = sub i64 %7, %9
  %11 = sdiv exact i64 %10, 40
  %12 = add nsw i64 %11, 1
  %13 = icmp ugt i64 %12, 461168601842738790
  br i1 %13, label %14, label %16

14:                                               ; preds = %4
  %15 = bitcast %"class.std::__1::vector.59"* %0 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %15) #10
  unreachable

16:                                               ; preds = %4
  %17 = getelementptr inbounds %"class.std::__1::vector.59", %"class.std::__1::vector.59"* %0, i64 0, i32 0, i32 2, i32 0, i32 0
  %18 = bitcast %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry"** %17 to i64*
  %19 = load i64, i64* %18, align 8
  %20 = sub i64 %19, %9
  %21 = sdiv exact i64 %20, 40
  %22 = icmp ult i64 %21, 230584300921369395
  br i1 %22, label %23, label %28

23:                                               ; preds = %16
  %24 = shl nsw i64 %21, 1
  %25 = icmp ult i64 %24, %12
  %26 = select i1 %25, i64 %12, i64 %24
  %27 = icmp eq i64 %26, 0
  br i1 %27, label %33, label %28

28:                                               ; preds = %16, %23
  %29 = phi i64 [ %26, %23 ], [ 461168601842738790, %16 ]
  %30 = mul i64 %29, 40
  %31 = tail call i8* @_Znwm(i64 %30) #11
  %32 = bitcast i8* %31 to %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry"*
  br label %33

33:                                               ; preds = %23, %28
  %34 = phi i64 [ %29, %28 ], [ 0, %23 ]
  %35 = phi %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry"* [ %32, %28 ], [ null, %23 ]
  %36 = getelementptr inbounds %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry", %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry"* %35, i64 %11
  %37 = getelementptr inbounds %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry", %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry"* %35, i64 %34
  %38 = ptrtoint %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry"* %37 to i64
  %39 = load %"class.sh::TIntermBlock"*, %"class.sh::TIntermBlock"** %1, align 8
  %40 = icmp eq %"class.sh::TIntermBlock"* %39, null
  %41 = getelementptr inbounds %"class.sh::TIntermBlock", %"class.sh::TIntermBlock"* %39, i64 0, i32 1
  %42 = select i1 %40, %"class.sh::TIntermAggregateBase"* null, %"class.sh::TIntermAggregateBase"* %41
  %43 = bitcast %"class.sh::TIntermDeclaration"** %2 to i64*
  %44 = load i64, i64* %43, align 8
  %45 = getelementptr inbounds %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry", %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry"* %36, i64 0, i32 0
  store %"class.sh::TIntermAggregateBase"* %42, %"class.sh::TIntermAggregateBase"** %45, align 8
  %46 = getelementptr inbounds %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry", %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry"* %35, i64 %11, i32 1
  %47 = bitcast %"class.sh::TIntermNode"** %46 to i64*
  store i64 %44, i64* %47, align 8
  %48 = getelementptr inbounds %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry", %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry"* %35, i64 %11, i32 2
  %49 = bitcast %"class.sh::TVector"* %48 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %49, i8 0, i64 24, i1 false) #9
  %50 = bitcast %"class.sh::TVector"* %3 to i64*
  %51 = load i64, i64* %50, align 8
  %52 = bitcast %"class.sh::TVector"* %48 to i64*
  store i64 %51, i64* %52, align 8
  %53 = getelementptr inbounds %"class.sh::TVector", %"class.sh::TVector"* %3, i64 0, i32 0, i32 0, i32 1
  %54 = bitcast %"class.sh::TIntermNode"*** %53 to i64*
  %55 = load i64, i64* %54, align 8
  %56 = getelementptr inbounds %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry", %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry"* %35, i64 %11, i32 2, i32 0, i32 0, i32 1
  %57 = bitcast %"class.sh::TIntermNode"*** %56 to i64*
  store i64 %55, i64* %57, align 8
  %58 = getelementptr inbounds %"class.sh::TVector", %"class.sh::TVector"* %3, i64 0, i32 0, i32 0, i32 2, i32 0, i32 0
  %59 = bitcast %"class.sh::TIntermNode"*** %58 to i64*
  %60 = load i64, i64* %59, align 8
  %61 = getelementptr inbounds %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry", %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry"* %35, i64 %11, i32 2, i32 0, i32 0, i32 2, i32 0, i32 0
  %62 = bitcast %"class.sh::TIntermNode"*** %61 to i64*
  store i64 %60, i64* %62, align 8
  %63 = bitcast %"class.sh::TVector"* %3 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %63, i8 0, i64 24, i1 false) #9
  %64 = getelementptr inbounds %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry", %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry"* %36, i64 1
  %65 = ptrtoint %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry"* %64 to i64
  %66 = getelementptr inbounds %"class.std::__1::vector.59", %"class.std::__1::vector.59"* %0, i64 0, i32 0, i32 0
  %67 = load %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry"*, %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry"** %66, align 8
  %68 = load %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry"*, %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry"** %5, align 8
  %69 = icmp eq %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry"* %68, %67
  br i1 %69, label %70, label %72

70:                                               ; preds = %33
  %71 = ptrtoint %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry"* %67 to i64
  br label %100

72:                                               ; preds = %33, %72
  %73 = phi %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry"* [ %75, %72 ], [ %36, %33 ]
  %74 = phi %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry"* [ %76, %72 ], [ %68, %33 ]
  %75 = getelementptr inbounds %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry", %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry"* %73, i64 -1
  %76 = getelementptr inbounds %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry", %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry"* %74, i64 -1
  %77 = bitcast %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry"* %75 to i8*
  %78 = bitcast %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry"* %76 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %77, i8* align 8 %78, i64 16, i1 false) #9
  %79 = getelementptr inbounds %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry", %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry"* %73, i64 -1, i32 2
  %80 = getelementptr inbounds %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry", %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry"* %74, i64 -1, i32 2
  %81 = bitcast %"class.sh::TVector"* %79 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %81, i8 0, i64 24, i1 false) #9
  %82 = bitcast %"class.sh::TVector"* %80 to i64*
  %83 = load i64, i64* %82, align 8
  %84 = bitcast %"class.sh::TVector"* %79 to i64*
  store i64 %83, i64* %84, align 8
  %85 = getelementptr inbounds %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry", %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry"* %74, i64 -1, i32 2, i32 0, i32 0, i32 1
  %86 = bitcast %"class.sh::TIntermNode"*** %85 to i64*
  %87 = load i64, i64* %86, align 8
  %88 = getelementptr inbounds %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry", %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry"* %73, i64 -1, i32 2, i32 0, i32 0, i32 1
  %89 = bitcast %"class.sh::TIntermNode"*** %88 to i64*
  store i64 %87, i64* %89, align 8
  %90 = getelementptr inbounds %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry", %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry"* %74, i64 -1, i32 2, i32 0, i32 0, i32 2, i32 0, i32 0
  %91 = bitcast %"class.sh::TIntermNode"*** %90 to i64*
  %92 = load i64, i64* %91, align 8
  %93 = getelementptr inbounds %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry", %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry"* %73, i64 -1, i32 2, i32 0, i32 0, i32 2, i32 0, i32 0
  %94 = bitcast %"class.sh::TIntermNode"*** %93 to i64*
  store i64 %92, i64* %94, align 8
  %95 = bitcast %"class.sh::TVector"* %80 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %95, i8 0, i64 24, i1 false) #9
  %96 = icmp eq %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry"* %76, %67
  br i1 %96, label %97, label %72

97:                                               ; preds = %72
  %98 = load i64, i64* %8, align 8
  %99 = load %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry"*, %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry"** %5, align 8
  br label %100

100:                                              ; preds = %70, %97
  %101 = phi %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry"* [ %67, %70 ], [ %99, %97 ]
  %102 = phi %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry"* [ %36, %70 ], [ %75, %97 ]
  %103 = phi i64 [ %71, %70 ], [ %98, %97 ]
  %104 = ptrtoint %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry"* %102 to i64
  store i64 %104, i64* %8, align 8
  store i64 %65, i64* %6, align 8
  store i64 %38, i64* %18, align 8
  %105 = inttoptr i64 %103 to %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry"*
  %106 = icmp eq %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry"* %101, %105
  br i1 %106, label %119, label %107

107:                                              ; preds = %100, %117
  %108 = phi %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry"* [ %109, %117 ], [ %101, %100 ]
  %109 = getelementptr inbounds %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry", %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry"* %108, i64 -1
  %110 = getelementptr inbounds %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry", %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry"* %108, i64 -1, i32 2, i32 0, i32 0, i32 0
  %111 = load %"class.sh::TIntermNode"**, %"class.sh::TIntermNode"*** %110, align 8
  %112 = icmp eq %"class.sh::TIntermNode"** %111, null
  br i1 %112, label %117, label %113

113:                                              ; preds = %107
  %114 = ptrtoint %"class.sh::TIntermNode"** %111 to i64
  %115 = getelementptr inbounds %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry", %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry"* %108, i64 -1, i32 2, i32 0, i32 0, i32 1
  %116 = bitcast %"class.sh::TIntermNode"*** %115 to i64*
  store i64 %114, i64* %116, align 8
  br label %117

117:                                              ; preds = %113, %107
  %118 = icmp eq %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry"* %109, %105
  br i1 %118, label %119, label %107

119:                                              ; preds = %117, %100
  %120 = icmp eq i64 %103, 0
  br i1 %120, label %123, label %121

121:                                              ; preds = %119
  %122 = inttoptr i64 %103 to i8*
  tail call void @_ZdlPv(i8* %122) #11
  br label %123

123:                                              ; preds = %119, %121
  ret void
}

; Function Attrs: nobuiltin nofree
declare noalias nonnull i8* @_Znwm(i64) local_unnamed_addr #6

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #1

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #7

; Function Attrs: nofree nounwind readonly
declare i32 @bcmp(i8* nocapture, i8* nocapture, i64) local_unnamed_addr #8

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { inlinehint nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nobuiltin nofree "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { nofree nounwind readonly }
attributes #9 = { nounwind }
attributes #10 = { noreturn nounwind }
attributes #11 = { builtin nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{i8 0, i8 2}
!3 = !{!4}
!4 = distinct !{!4, !5}
!5 = distinct !{!5, !"LVerDomain"}
!6 = !{!7}
!7 = distinct !{!7, !5}
!8 = distinct !{!8, !9}
!9 = !{!"llvm.loop.isvectorized", i32 1}
!10 = distinct !{!10, !11}
!11 = !{!"llvm.loop.unroll.disable"}
!12 = distinct !{!12, !9}
