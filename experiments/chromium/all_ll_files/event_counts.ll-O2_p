; ModuleID = '../../third_party/blink/renderer/core/timing/event_counts.cc'
source_filename = "../../third_party/blink/renderer/core/timing/event_counts.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.WTF::StaticSingleton" = type { %"class.WTF::StaticSingleton<const WTF::Vector<WTF::AtomicString, 0, WTF::PartitionAllocator> >::InstanceStorage" }
%"class.WTF::StaticSingleton<const WTF::Vector<WTF::AtomicString, 0, WTF::PartitionAllocator> >::InstanceStorage" = type { [16 x i8] }
%"struct.blink::WrapperTypeInfo" = type { i16, void (%"class.v8::Isolate"*, %"class.blink::DOMWrapperWorld"*, %"class.v8::Template"*)*, void (%"class.v8::Context"*, %"class.blink::DOMWrapperWorld"*, %"class.v8::Object"*, %"class.v8::Object"*, %"class.v8::Object"*, %"class.v8::Template"*, i64)*, i8*, %"struct.blink::WrapperTypeInfo"*, i8 }
%"class.v8::Isolate" = type { i8 }
%"class.blink::DOMWrapperWorld" = type { %"class.WTF::RefCounted", i32, i32, %"class.blink::Persistent" }
%"class.WTF::RefCounted" = type { %"class.base::RefCounted" }
%"class.base::RefCounted" = type { %"class.base::subtle::RefCountedBase" }
%"class.base::subtle::RefCountedBase" = type { i32 }
%"class.blink::Persistent" = type { %"class.blink::PersistentBase" }
%"class.blink::PersistentBase" = type { %"class.blink::DOMDataStore"*, %"class.blink::PersistentNodePtr" }
%"class.blink::DOMDataStore" = type { i32 (...)**, i8, [7 x i8], %"class.blink::HeapHashMap" }
%"class.blink::HeapHashMap" = type { %"class.WTF::HashMap.14" }
%"class.WTF::HashMap.14" = type { %"class.WTF::HashTable.15" }
%"class.WTF::HashTable.15" = type <{ %"struct.WTF::KeyValuePair.17"*, i32, i32, i32, [4 x i8] }>
%"struct.WTF::KeyValuePair.17" = type { %"class.blink::WeakMember", %"class.blink::TraceWrapperV8Reference" }
%"class.blink::WeakMember" = type { %"class.blink::MemberBase" }
%"class.blink::MemberBase" = type { %"class.blink::ScriptWrappable"* }
%"class.blink::ScriptWrappable" = type { %"class.blink::NameClient", %"class.blink::TraceWrapperV8Reference" }
%"class.blink::NameClient" = type { i32 (...)** }
%"class.blink::TraceWrapperV8Reference" = type { %"class.v8::TracedReference" }
%"class.v8::TracedReference" = type { %"class.v8::BasicTracedReference" }
%"class.v8::BasicTracedReference" = type { %"class.v8::TracedReferenceBase" }
%"class.v8::TracedReferenceBase" = type { i64* }
%"class.blink::PersistentNodePtr" = type { %"class.blink::PersistentNode"* }
%"class.blink::PersistentNode" = type { i8*, void (%"class.blink::Visitor"*, i8*)* }
%"class.blink::Visitor" = type { i32 (...)**, %"class.blink::ThreadState"* }
%"class.blink::ThreadState" = type <{ %"class.std::__1::unique_ptr", i32, [4 x i8], %"class.std::__1::unique_ptr.149", %"class.std::__1::unique_ptr.149", i8**, i8, i8, i8, i8, i8, i8, [2 x i8], i64, i64, i32, i32, i32, [4 x i8], %"class.WTF::Deque", %"class.v8::Isolate"*, void (%"class.v8::Isolate"*, %"class.v8::EmbedderGraph"*, i8*)*, %"class.std::__1::unique_ptr.159", %"class.std::__1::unique_ptr.165", %"struct.blink::ThreadState::GCData", %"class.std::__1::unique_ptr.177", %"class.std::__1::unique_ptr.183", %"class.base::JobHandle", %"class.base::JobHandle", %"struct.std::__1::atomic.190", [7 x i8], i64, i8, [7 x i8], i64, %"class.base::TimeTicks", i8, i8, [6 x i8] }>
%"class.std::__1::unique_ptr" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %"class.blink::ThreadHeap"* }
%"class.blink::ThreadHeap" = type { %"class.blink::ThreadState"*, %"class.std::__1::unique_ptr.18", %"class.std::__1::unique_ptr.22", %"class.std::__1::unique_ptr.28", %"class.std::__1::unique_ptr.34", %"class.std::__1::unique_ptr.40", %"class.std::__1::unique_ptr.46", %"class.std::__1::unique_ptr.57", %"class.std::__1::unique_ptr.64", %"class.std::__1::unique_ptr.64", %"class.std::__1::unique_ptr.71", %"class.std::__1::unique_ptr.78", %"class.std::__1::unique_ptr.85", %"class.std::__1::unique_ptr.85", %"class.std::__1::unique_ptr.92", %"class.std::__1::unique_ptr.99", %"class.std::__1::unique_ptr.106", %"class.std::__1::unique_ptr.129", %"struct.blink::ThreadHeap::LastAllocatedRegion", [9 x %"class.blink::BaseArena"*], i64, i64 }
%"class.std::__1::unique_ptr.18" = type { %"class.std::__1::__compressed_pair.19" }
%"class.std::__1::__compressed_pair.19" = type { %"struct.std::__1::__compressed_pair_elem.20" }
%"struct.std::__1::__compressed_pair_elem.20" = type { %"class.blink::ThreadHeapStatsCollector"* }
%"class.blink::ThreadHeapStatsCollector" = type opaque
%"class.std::__1::unique_ptr.22" = type { %"class.std::__1::__compressed_pair.23" }
%"class.std::__1::__compressed_pair.23" = type { %"struct.std::__1::__compressed_pair_elem.24" }
%"struct.std::__1::__compressed_pair_elem.24" = type { %"class.blink::RegionTree"* }
%"class.blink::RegionTree" = type opaque
%"class.std::__1::unique_ptr.28" = type { %"class.std::__1::__compressed_pair.29" }
%"class.std::__1::__compressed_pair.29" = type { %"struct.std::__1::__compressed_pair_elem.30" }
%"struct.std::__1::__compressed_pair_elem.30" = type { %"class.blink::PageBloomFilter"* }
%"class.blink::PageBloomFilter" = type opaque
%"class.std::__1::unique_ptr.34" = type { %"class.std::__1::__compressed_pair.35" }
%"class.std::__1::__compressed_pair.35" = type { %"struct.std::__1::__compressed_pair_elem.36" }
%"struct.std::__1::__compressed_pair_elem.36" = type { %"class.blink::PagePool"* }
%"class.blink::PagePool" = type opaque
%"class.std::__1::unique_ptr.40" = type { %"class.std::__1::__compressed_pair.41" }
%"class.std::__1::__compressed_pair.41" = type { %"struct.std::__1::__compressed_pair_elem.42" }
%"struct.std::__1::__compressed_pair_elem.42" = type { %"class.blink::ProcessHeapReporter"* }
%"class.blink::ProcessHeapReporter" = type opaque
%"class.std::__1::unique_ptr.46" = type { %"class.std::__1::__compressed_pair.47" }
%"class.std::__1::__compressed_pair.47" = type { %"struct.std::__1::__compressed_pair_elem.48" }
%"struct.std::__1::__compressed_pair_elem.48" = type { %"class.blink::Worklist"* }
%"class.blink::Worklist" = type { [4 x %"struct.blink::Worklist<blink::TraceDescriptor, 512, 4>::PrivateSegmentHolder"], %"class.blink::Worklist<blink::TraceDescriptor, 512, 4>::GlobalPool" }
%"struct.blink::Worklist<blink::TraceDescriptor, 512, 4>::PrivateSegmentHolder" = type { %"class.blink::Worklist<blink::TraceDescriptor, 512, 4>::Segment"*, %"class.blink::Worklist<blink::TraceDescriptor, 512, 4>::Segment"*, [64 x i8] }
%"class.blink::Worklist<blink::TraceDescriptor, 512, 4>::Segment" = type { %"class.blink::Worklist<blink::TraceDescriptor, 512, 4>::Segment"*, i64, [512 x %"struct.blink::TraceDescriptor"] }
%"struct.blink::TraceDescriptor" = type { i8*, void (%"class.blink::Visitor"*, i8*)* }
%"class.blink::Worklist<blink::TraceDescriptor, 512, 4>::GlobalPool" = type { %"class.base::Lock", %"class.blink::Worklist<blink::TraceDescriptor, 512, 4>::Segment"*, %"struct.std::__1::atomic.49" }
%"class.base::Lock" = type { %"class.base::internal::LockImpl" }
%"class.base::internal::LockImpl" = type { %union.pthread_mutex_t }
%union.pthread_mutex_t = type { %struct.__pthread_mutex_s }
%struct.__pthread_mutex_s = type { i32, i32, i32, i32, i32, i16, i16, %struct.__pthread_internal_list }
%struct.__pthread_internal_list = type { %struct.__pthread_internal_list*, %struct.__pthread_internal_list* }
%"struct.std::__1::atomic.49" = type { %"struct.std::__1::__atomic_base.50" }
%"struct.std::__1::__atomic_base.50" = type { %"struct.std::__1::__atomic_base.51" }
%"struct.std::__1::__atomic_base.51" = type { %"struct.std::__1::__cxx_atomic_impl.52" }
%"struct.std::__1::__cxx_atomic_impl.52" = type { %"struct.std::__1::__cxx_atomic_base_impl.53" }
%"struct.std::__1::__cxx_atomic_base_impl.53" = type { i64 }
%"class.std::__1::unique_ptr.57" = type { %"class.std::__1::__compressed_pair.58" }
%"class.std::__1::__compressed_pair.58" = type { %"struct.std::__1::__compressed_pair_elem.59" }
%"struct.std::__1::__compressed_pair_elem.59" = type { %"class.blink::Worklist.60"* }
%"class.blink::Worklist.60" = type { [4 x %"struct.blink::Worklist<blink::HeapObjectHeader *, 64, 4>::PrivateSegmentHolder"], %"class.blink::Worklist<blink::HeapObjectHeader *, 64, 4>::GlobalPool" }
%"struct.blink::Worklist<blink::HeapObjectHeader *, 64, 4>::PrivateSegmentHolder" = type { %"class.blink::Worklist<blink::HeapObjectHeader *, 64, 4>::Segment"*, %"class.blink::Worklist<blink::HeapObjectHeader *, 64, 4>::Segment"*, [64 x i8] }
%"class.blink::Worklist<blink::HeapObjectHeader *, 64, 4>::Segment" = type opaque
%"class.blink::Worklist<blink::HeapObjectHeader *, 64, 4>::GlobalPool" = type { %"class.base::Lock", %"class.blink::Worklist<blink::HeapObjectHeader *, 64, 4>::Segment"*, %"struct.std::__1::atomic.49" }
%"class.std::__1::unique_ptr.64" = type { %"class.std::__1::__compressed_pair.65" }
%"class.std::__1::__compressed_pair.65" = type { %"struct.std::__1::__compressed_pair_elem.66" }
%"struct.std::__1::__compressed_pair_elem.66" = type { %"class.blink::Worklist.67"* }
%"class.blink::Worklist.67" = type { [4 x %"struct.blink::Worklist<const void *, 16, 4>::PrivateSegmentHolder"], %"class.blink::Worklist<const void *, 16, 4>::GlobalPool" }
%"struct.blink::Worklist<const void *, 16, 4>::PrivateSegmentHolder" = type { %"class.blink::Worklist<const void *, 16, 4>::Segment"*, %"class.blink::Worklist<const void *, 16, 4>::Segment"*, [64 x i8] }
%"class.blink::Worklist<const void *, 16, 4>::Segment" = type { %"class.blink::Worklist<const void *, 16, 4>::Segment"*, i64, [16 x i8*] }
%"class.blink::Worklist<const void *, 16, 4>::GlobalPool" = type { %"class.base::Lock", %"class.blink::Worklist<const void *, 16, 4>::Segment"*, %"struct.std::__1::atomic.49" }
%"class.std::__1::unique_ptr.71" = type { %"class.std::__1::__compressed_pair.72" }
%"class.std::__1::__compressed_pair.72" = type { %"struct.std::__1::__compressed_pair_elem.73" }
%"struct.std::__1::__compressed_pair_elem.73" = type { %"class.blink::Worklist.74"* }
%"class.blink::Worklist.74" = type { [4 x %"struct.blink::Worklist<blink::CustomCallbackItem, 64, 4>::PrivateSegmentHolder"], %"class.blink::Worklist<blink::CustomCallbackItem, 64, 4>::GlobalPool" }
%"struct.blink::Worklist<blink::CustomCallbackItem, 64, 4>::PrivateSegmentHolder" = type { %"class.blink::Worklist<blink::CustomCallbackItem, 64, 4>::Segment"*, %"class.blink::Worklist<blink::CustomCallbackItem, 64, 4>::Segment"*, [64 x i8] }
%"class.blink::Worklist<blink::CustomCallbackItem, 64, 4>::Segment" = type opaque
%"class.blink::Worklist<blink::CustomCallbackItem, 64, 4>::GlobalPool" = type { %"class.base::Lock", %"class.blink::Worklist<blink::CustomCallbackItem, 64, 4>::Segment"*, %"struct.std::__1::atomic.49" }
%"class.std::__1::unique_ptr.78" = type { %"class.std::__1::__compressed_pair.79" }
%"class.std::__1::__compressed_pair.79" = type { %"struct.std::__1::__compressed_pair_elem.80" }
%"struct.std::__1::__compressed_pair_elem.80" = type { %"class.blink::Worklist.81"* }
%"class.blink::Worklist.81" = type { [4 x %"struct.blink::Worklist<const void *const *, 256, 4>::PrivateSegmentHolder"], %"class.blink::Worklist<const void *const *, 256, 4>::GlobalPool" }
%"struct.blink::Worklist<const void *const *, 256, 4>::PrivateSegmentHolder" = type { %"class.blink::Worklist<const void *const *, 256, 4>::Segment"*, %"class.blink::Worklist<const void *const *, 256, 4>::Segment"*, [64 x i8] }
%"class.blink::Worklist<const void *const *, 256, 4>::Segment" = type opaque
%"class.blink::Worklist<const void *const *, 256, 4>::GlobalPool" = type { %"class.base::Lock", %"class.blink::Worklist<const void *const *, 256, 4>::Segment"*, %"struct.std::__1::atomic.49" }
%"class.std::__1::unique_ptr.85" = type { %"class.std::__1::__compressed_pair.86" }
%"class.std::__1::__compressed_pair.86" = type { %"struct.std::__1::__compressed_pair_elem.87" }
%"struct.std::__1::__compressed_pair_elem.87" = type { %"class.blink::Worklist.88"* }
%"class.blink::Worklist.88" = type { [4 x %"struct.blink::Worklist<blink::EphemeronPairItem, 64, 4>::PrivateSegmentHolder"], %"class.blink::Worklist<blink::EphemeronPairItem, 64, 4>::GlobalPool" }
%"struct.blink::Worklist<blink::EphemeronPairItem, 64, 4>::PrivateSegmentHolder" = type { %"class.blink::Worklist<blink::EphemeronPairItem, 64, 4>::Segment"*, %"class.blink::Worklist<blink::EphemeronPairItem, 64, 4>::Segment"*, [64 x i8] }
%"class.blink::Worklist<blink::EphemeronPairItem, 64, 4>::Segment" = type opaque
%"class.blink::Worklist<blink::EphemeronPairItem, 64, 4>::GlobalPool" = type { %"class.base::Lock", %"class.blink::Worklist<blink::EphemeronPairItem, 64, 4>::Segment"*, %"struct.std::__1::atomic.49" }
%"class.std::__1::unique_ptr.92" = type { %"class.std::__1::__compressed_pair.93" }
%"class.std::__1::__compressed_pair.93" = type { %"struct.std::__1::__compressed_pair_elem.94" }
%"struct.std::__1::__compressed_pair_elem.94" = type { %"class.blink::Worklist.95"* }
%"class.blink::Worklist.95" = type { [4 x %"struct.blink::Worklist<const blink::TraceWrapperV8Reference<v8::Value> *, 16, 4>::PrivateSegmentHolder"], %"class.blink::Worklist<const blink::TraceWrapperV8Reference<v8::Value> *, 16, 4>::GlobalPool" }
%"struct.blink::Worklist<const blink::TraceWrapperV8Reference<v8::Value> *, 16, 4>::PrivateSegmentHolder" = type { %"class.blink::Worklist<const blink::TraceWrapperV8Reference<v8::Value> *, 16, 4>::Segment"*, %"class.blink::Worklist<const blink::TraceWrapperV8Reference<v8::Value> *, 16, 4>::Segment"*, [64 x i8] }
%"class.blink::Worklist<const blink::TraceWrapperV8Reference<v8::Value> *, 16, 4>::Segment" = type opaque
%"class.blink::Worklist<const blink::TraceWrapperV8Reference<v8::Value> *, 16, 4>::GlobalPool" = type { %"class.base::Lock", %"class.blink::Worklist<const blink::TraceWrapperV8Reference<v8::Value> *, 16, 4>::Segment"*, %"struct.std::__1::atomic.49" }
%"class.std::__1::unique_ptr.99" = type { %"class.std::__1::__compressed_pair.100" }
%"class.std::__1::__compressed_pair.100" = type { %"struct.std::__1::__compressed_pair_elem.101" }
%"struct.std::__1::__compressed_pair_elem.101" = type { %"class.blink::Worklist.102"* }
%"class.blink::Worklist.102" = type { [4 x %"struct.blink::Worklist<blink::NotSafeToConcurrentlyTraceItem, 64, 4>::PrivateSegmentHolder"], %"class.blink::Worklist<blink::NotSafeToConcurrentlyTraceItem, 64, 4>::GlobalPool" }
%"struct.blink::Worklist<blink::NotSafeToConcurrentlyTraceItem, 64, 4>::PrivateSegmentHolder" = type { %"class.blink::Worklist<blink::NotSafeToConcurrentlyTraceItem, 64, 4>::Segment"*, %"class.blink::Worklist<blink::NotSafeToConcurrentlyTraceItem, 64, 4>::Segment"*, [64 x i8] }
%"class.blink::Worklist<blink::NotSafeToConcurrentlyTraceItem, 64, 4>::Segment" = type { %"class.blink::Worklist<blink::NotSafeToConcurrentlyTraceItem, 64, 4>::Segment"*, i64, [64 x %"struct.blink::NotSafeToConcurrentlyTraceItem"] }
%"struct.blink::NotSafeToConcurrentlyTraceItem" = type { %"struct.blink::TraceDescriptor", i64 }
%"class.blink::Worklist<blink::NotSafeToConcurrentlyTraceItem, 64, 4>::GlobalPool" = type { %"class.base::Lock", %"class.blink::Worklist<blink::NotSafeToConcurrentlyTraceItem, 64, 4>::Segment"*, %"struct.std::__1::atomic.49" }
%"class.std::__1::unique_ptr.106" = type { %"class.std::__1::__compressed_pair.107" }
%"class.std::__1::__compressed_pair.107" = type { %"struct.std::__1::__compressed_pair_elem.108" }
%"struct.std::__1::__compressed_pair_elem.108" = type { %"class.blink::WeakContainersWorklist"* }
%"class.blink::WeakContainersWorklist" = type { %"class.WTF::Mutex", %"class.std::__1::unordered_set" }
%"class.WTF::Mutex" = type { %"class.WTF::MutexBase" }
%"class.WTF::MutexBase" = type { %"struct.WTF::PlatformMutex" }
%"struct.WTF::PlatformMutex" = type { %union.pthread_mutex_t }
%"class.std::__1::unordered_set" = type { %"class.std::__1::__hash_table" }
%"class.std::__1::__hash_table" = type <{ %"class.std::__1::unique_ptr.109", %"class.std::__1::__compressed_pair.116", %"class.std::__1::__compressed_pair.121", %"class.std::__1::__compressed_pair.123", [4 x i8] }>
%"class.std::__1::unique_ptr.109" = type { %"class.std::__1::__compressed_pair.110" }
%"class.std::__1::__compressed_pair.110" = type { %"struct.std::__1::__compressed_pair_elem.111", %"struct.std::__1::__compressed_pair_elem.112" }
%"struct.std::__1::__compressed_pair_elem.111" = type { %"struct.std::__1::__hash_node_base"** }
%"struct.std::__1::__hash_node_base" = type { %"struct.std::__1::__hash_node_base"* }
%"struct.std::__1::__compressed_pair_elem.112" = type { %"class.std::__1::__bucket_list_deallocator" }
%"class.std::__1::__bucket_list_deallocator" = type { %"class.std::__1::__compressed_pair.113" }
%"class.std::__1::__compressed_pair.113" = type { %"struct.std::__1::__compressed_pair_elem.114" }
%"struct.std::__1::__compressed_pair_elem.114" = type { i64 }
%"class.std::__1::__compressed_pair.116" = type { %"struct.std::__1::__compressed_pair_elem.117" }
%"struct.std::__1::__compressed_pair_elem.117" = type { %"struct.std::__1::__hash_node_base" }
%"class.std::__1::__compressed_pair.121" = type { %"struct.std::__1::__compressed_pair_elem.114" }
%"class.std::__1::__compressed_pair.123" = type { %"struct.std::__1::__compressed_pair_elem.124" }
%"struct.std::__1::__compressed_pair_elem.124" = type { float }
%"class.std::__1::unique_ptr.129" = type { %"class.std::__1::__compressed_pair.130" }
%"class.std::__1::__compressed_pair.130" = type { %"struct.std::__1::__compressed_pair_elem.131" }
%"struct.std::__1::__compressed_pair_elem.131" = type { %"class.blink::HeapCompact"* }
%"class.blink::HeapCompact" = type <{ %"class.blink::ThreadHeap"*, %"class.std::__1::unique_ptr.132", i8, [7 x i8], i64, i64, i32, [4 x i8], i64, i8, [7 x i8] }>
%"class.std::__1::unique_ptr.132" = type { %"class.std::__1::__compressed_pair.133" }
%"class.std::__1::__compressed_pair.133" = type { %"struct.std::__1::__compressed_pair_elem.134" }
%"struct.std::__1::__compressed_pair_elem.134" = type { %"class.blink::HeapCompact::MovableObjectFixups"* }
%"class.blink::HeapCompact::MovableObjectFixups" = type opaque
%"struct.blink::ThreadHeap::LastAllocatedRegion" = type { i8*, i64 }
%"class.blink::BaseArena" = type <{ i32 (...)**, %"class.blink::PageStackThreadSafe", %"class.blink::PageStackThreadSafe", %"class.blink::PageStackThreadSafe", %"class.blink::PageStackThreadSafe", %"class.blink::ThreadState"*, i32, [4 x i8] }>
%"class.blink::PageStackThreadSafe" = type { %"class.blink::PageStack", %"class.WTF::Mutex" }
%"class.blink::PageStack" = type { %"class.WTF::Vector.141" }
%"class.WTF::Vector.141" = type { %"class.WTF::VectorBuffer.142" }
%"class.WTF::VectorBuffer.142" = type { %"class.WTF::VectorBufferBase.143" }
%"class.WTF::VectorBufferBase.143" = type { %"class.blink::BasePage"**, i32, i32 }
%"class.blink::BasePage" = type <{ i32 (...)**, %"class.blink::PageMemory"*, %"class.blink::BaseArena"*, %"class.blink::ThreadState"*, i64, i8, i8, i8, [5 x i8] }>
%"class.blink::PageMemory" = type opaque
%"class.std::__1::unique_ptr.149" = type { %"class.std::__1::__compressed_pair.150" }
%"class.std::__1::__compressed_pair.150" = type { %"struct.std::__1::__compressed_pair_elem.151" }
%"struct.std::__1::__compressed_pair_elem.151" = type { %"class.blink::PersistentRegion"* }
%"class.blink::PersistentRegion" = type { %"class.blink::PersistentRegionBase" }
%"class.blink::PersistentRegionBase" = type { %"class.blink::PersistentNode"*, %"struct.blink::PersistentNodeSlots"* }
%"struct.blink::PersistentNodeSlots" = type { %"struct.blink::PersistentNodeSlots"*, [256 x %"class.blink::PersistentNode"] }
%"class.WTF::Deque" = type { %"class.WTF::Deque<std::__1::pair<void *, bool (*)(const blink::LivenessBroker &, void *)>, 0, WTF::PartitionAllocator>::BackingBuffer", i32, i32 }
%"class.WTF::Deque<std::__1::pair<void *, bool (*)(const blink::LivenessBroker &, void *)>, 0, WTF::PartitionAllocator>::BackingBuffer" = type { %"class.WTF::VectorBuffer.157" }
%"class.WTF::VectorBuffer.157" = type { %"class.WTF::VectorBufferBase.158" }
%"class.WTF::VectorBufferBase.158" = type { %"struct.std::__1::pair"*, i32, i32 }
%"struct.std::__1::pair" = type { i8*, i1 (%"class.blink::LivenessBroker"*, i8*)* }
%"class.blink::LivenessBroker" = type { i8 }
%"class.v8::EmbedderGraph" = type opaque
%"class.std::__1::unique_ptr.159" = type { %"class.std::__1::__compressed_pair.160" }
%"class.std::__1::__compressed_pair.160" = type { %"struct.std::__1::__compressed_pair_elem.161" }
%"struct.std::__1::__compressed_pair_elem.161" = type { %"class.blink::UnifiedHeapController"* }
%"class.blink::UnifiedHeapController" = type opaque
%"class.std::__1::unique_ptr.165" = type { %"class.std::__1::__compressed_pair.166" }
%"class.std::__1::__compressed_pair.166" = type { %"struct.std::__1::__compressed_pair_elem.167" }
%"struct.std::__1::__compressed_pair_elem.167" = type { %"class.v8::EmbedderRootsHandler"* }
%"class.v8::EmbedderRootsHandler" = type { i32 (...)** }
%"struct.blink::ThreadState::GCData" = type { i32, i32, i32, i32, %"class.std::__1::unique_ptr.171" }
%"class.std::__1::unique_ptr.171" = type { %"class.std::__1::__compressed_pair.172" }
%"class.std::__1::__compressed_pair.172" = type { %"struct.std::__1::__compressed_pair_elem.173" }
%"struct.std::__1::__compressed_pair_elem.173" = type { %"class.blink::MarkingVisitor"* }
%"class.blink::MarkingVisitor" = type { %"class.blink::MarkingVisitorBase", %"class.blink::MarkingVisitor::RecentlyRetracedWeakContainers" }
%"class.blink::MarkingVisitorBase" = type { %"class.blink::Visitor", %"class.blink::Worklist<blink::TraceDescriptor, 512, 4>::View", %"class.blink::Worklist<blink::HeapObjectHeader *, 64, 4>::View", %"class.blink::Worklist<const void *, 16, 4>::View", %"class.blink::Worklist<blink::CustomCallbackItem, 64, 4>::View", %"class.blink::Worklist<const void *const *, 256, 4>::View", %"class.blink::Worklist<blink::EphemeronPairItem, 64, 4>::View", %"class.blink::Worklist<blink::EphemeronPairItem, 64, 4>::View", %"class.blink::WeakContainersWorklist"*, i64, i32, i32 }
%"class.blink::Worklist<blink::TraceDescriptor, 512, 4>::View" = type <{ %"class.blink::Worklist"*, i32, [4 x i8] }>
%"class.blink::Worklist<blink::HeapObjectHeader *, 64, 4>::View" = type <{ %"class.blink::Worklist.60"*, i32, [4 x i8] }>
%"class.blink::Worklist<const void *, 16, 4>::View" = type <{ %"class.blink::Worklist.67"*, i32, [4 x i8] }>
%"class.blink::Worklist<blink::CustomCallbackItem, 64, 4>::View" = type <{ %"class.blink::Worklist.74"*, i32, [4 x i8] }>
%"class.blink::Worklist<const void *const *, 256, 4>::View" = type <{ %"class.blink::Worklist.81"*, i32, [4 x i8] }>
%"class.blink::Worklist<blink::EphemeronPairItem, 64, 4>::View" = type <{ %"class.blink::Worklist.88"*, i32, [4 x i8] }>
%"class.blink::MarkingVisitor::RecentlyRetracedWeakContainers" = type { %"class.std::__1::vector", i64 }
%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { %"class.blink::HeapObjectHeader"**, %"class.blink::HeapObjectHeader"**, %"class.std::__1::__compressed_pair.197" }
%"class.blink::HeapObjectHeader" = type { i32, i16, i16 }
%"class.std::__1::__compressed_pair.197" = type { %"struct.std::__1::__compressed_pair_elem.198" }
%"struct.std::__1::__compressed_pair_elem.198" = type { %"class.blink::HeapObjectHeader"** }
%"class.std::__1::unique_ptr.177" = type { %"class.std::__1::__compressed_pair.178" }
%"class.std::__1::__compressed_pair.178" = type { %"struct.std::__1::__compressed_pair_elem.179" }
%"struct.std::__1::__compressed_pair_elem.179" = type { %"class.blink::ThreadState::IncrementalMarkingScheduler"* }
%"class.blink::ThreadState::IncrementalMarkingScheduler" = type opaque
%"class.std::__1::unique_ptr.183" = type { %"class.std::__1::__compressed_pair.184" }
%"class.std::__1::__compressed_pair.184" = type { %"struct.std::__1::__compressed_pair_elem.185" }
%"struct.std::__1::__compressed_pair_elem.185" = type { %"class.blink::MarkingSchedulingOracle"* }
%"class.blink::MarkingSchedulingOracle" = type opaque
%"class.base::JobHandle" = type { %class.scoped_refptr.189 }
%class.scoped_refptr.189 = type { %"class.base::internal::JobTaskSource"* }
%"class.base::internal::JobTaskSource" = type opaque
%"struct.std::__1::atomic.190" = type { %"struct.std::__1::__atomic_base.191" }
%"struct.std::__1::__atomic_base.191" = type { %"struct.std::__1::__cxx_atomic_impl.192" }
%"struct.std::__1::__cxx_atomic_impl.192" = type { %"struct.std::__1::__cxx_atomic_base_impl.193" }
%"struct.std::__1::__cxx_atomic_base_impl.193" = type { i8 }
%"class.base::TimeTicks" = type { %"class.base::time_internal::TimeBase" }
%"class.base::time_internal::TimeBase" = type { i64 }
%"class.v8::Template" = type { i8 }
%"class.v8::Context" = type { i8 }
%"class.v8::Object" = type { i8 }
%"class.WTF::AtomicString" = type { %"class.WTF::String" }
%"class.WTF::String" = type { %class.scoped_refptr }
%class.scoped_refptr = type { %"class.WTF::StringImpl"* }
%"class.WTF::StringImpl" = type { i32, i32, %"struct.std::__1::atomic" }
%"struct.std::__1::atomic" = type { %"struct.std::__1::__atomic_base" }
%"struct.std::__1::__atomic_base" = type { %"struct.std::__1::__atomic_base.0" }
%"struct.std::__1::__atomic_base.0" = type { %"struct.std::__1::__cxx_atomic_impl" }
%"struct.std::__1::__cxx_atomic_impl" = type { %"struct.std::__1::__cxx_atomic_base_impl" }
%"struct.std::__1::__cxx_atomic_base_impl" = type { i32 }
%"class.WTF::ThreadSpecific" = type { %"class.blink::ThreadState"**, %"class.base::ThreadLocalStorage::Slot" }
%"class.base::ThreadLocalStorage::Slot" = type { i32, i32 }
%"struct.blink::GCInfo" = type { void (%"class.blink::Visitor"*, i8*)*, void (i8*)*, { i8*, i8 } (i8*)*, i8 }
%"class.blink::GCInfoTable" = type { %"struct.blink::GCInfo"**, i32, i32, %"class.WTF::Mutex" }
%"class.blink::EventCounts" = type { %"class.blink::ScriptWrappable", %"class.blink::Maplike", %"class.WTF::HashMap" }
%"class.blink::Maplike" = type { %"class.blink::PairIterable" }
%"class.blink::PairIterable" = type { %"class.blink::Iterable" }
%"class.blink::Iterable" = type { i32 (...)** }
%"class.WTF::HashMap" = type { %"class.WTF::HashTable" }
%"class.WTF::HashTable" = type <{ %"struct.WTF::KeyValuePair"*, i32, i32, i32, [4 x i8] }>
%"struct.WTF::KeyValuePair" = type <{ %"class.WTF::AtomicString", i32, [4 x i8] }>
%"class.blink::Iterable<WTF::AtomicString, unsigned int>::IterationSource" = type { i32 (...)** }
%"class.blink::ScriptState" = type { %"class.v8::Isolate"*, %"class.blink::ScopedPersistent", %class.scoped_refptr.9, %"class.blink::Member", %"class.blink::SelfKeepAlive", %"class.util::TokenType" }
%"class.blink::ScopedPersistent" = type { %"class.v8::Persistent" }
%"class.v8::Persistent" = type { %"class.v8::PersistentBase" }
%"class.v8::PersistentBase" = type { %"class.v8::Context"* }
%class.scoped_refptr.9 = type { %"class.blink::DOMWrapperWorld"* }
%"class.blink::Member" = type { %"class.blink::MemberBase.194" }
%"class.blink::MemberBase.194" = type { %"class.blink::V8PerContextData"* }
%"class.blink::V8PerContextData" = type opaque
%"class.blink::SelfKeepAlive" = type { %"class.blink::Persistent.195" }
%"class.blink::Persistent.195" = type { %"class.blink::PersistentBase.196" }
%"class.blink::PersistentBase.196" = type { %"class.blink::ScriptState"*, %"class.blink::PersistentNodePtr" }
%"class.util::TokenType" = type { %"class.base::StrongAlias" }
%"class.base::StrongAlias" = type { %"class.base::UnguessableToken" }
%"class.base::UnguessableToken" = type { %"class.base::Token" }
%"class.base::Token" = type { i64, i64 }
%"class.blink::ExceptionState" = type { i32 (...)**, %"class.blink::ExceptionContext", %"class.blink::ExceptionState::ContextScope"*, %"class.v8::Isolate"*, i32, %"class.WTF::String", %"class.blink::TraceWrapperV8Reference.202" }
%"class.blink::ExceptionContext" = type { i16, i16, i8*, i8* }
%"class.blink::ExceptionState::ContextScope" = type { %"class.blink::ExceptionState"*, %"class.blink::ExceptionState::ContextScope"*, %"class.blink::ExceptionContext" }
%"class.blink::TraceWrapperV8Reference.202" = type { %"class.v8::TracedReference.203" }
%"class.v8::TracedReference.203" = type { %"class.v8::BasicTracedReference.204" }
%"class.v8::BasicTracedReference.204" = type { %"class.v8::TracedReferenceBase" }
%"class.v8::Value" = type { i8 }
%"class.logging::CheckError" = type { %"class.logging::LogMessage"* }
%"class.logging::LogMessage" = type { i32 (...)**, i32, %"class.std::__1::basic_ostringstream", i64, i8*, i32, %"class.base::ScopedClearLastErrorBase" }
%"class.std::__1::basic_ostringstream" = type { %"class.std::__1::basic_ostream.base", %"class.std::__1::basic_stringbuf", %"class.std::__1::basic_ios.base" }
%"class.std::__1::basic_ostream.base" = type { i32 (...)** }
%"class.std::__1::basic_stringbuf" = type <{ %"class.std::__1::basic_streambuf", %"class.std::__1::basic_string", i8*, i32, [4 x i8] }>
%"class.std::__1::basic_streambuf" = type { i32 (...)**, %"class.std::__1::locale", i8*, i8*, i8*, i8*, i8*, i8* }
%"class.std::__1::locale" = type { %"class.std::__1::locale::__imp"* }
%"class.std::__1::locale::__imp" = type opaque
%"class.std::__1::basic_string" = type { %"class.std::__1::__compressed_pair.213" }
%"class.std::__1::__compressed_pair.213" = type { %"struct.std::__1::__compressed_pair_elem.214" }
%"struct.std::__1::__compressed_pair_elem.214" = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" = type { %union.anon }
%union.anon = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" = type { i8*, i64, i64 }
%"class.std::__1::basic_ios.base" = type <{ %"class.std::__1::ios_base", %"class.std::__1::basic_ostream"*, i32 }>
%"class.std::__1::ios_base" = type { i32 (...)**, i32, i64, i64, i32, i32, i8*, i8*, void (i32, %"class.std::__1::ios_base"*, i32)**, i32*, i64, i64, i64*, i64, i64, i8**, i64, i64 }
%"class.std::__1::basic_ostream" = type { i32 (...)**, %"class.std::__1::basic_ios.base" }
%"class.base::ScopedClearLastErrorBase" = type { i32 }
%"class.logging::CheckOpResult" = type { i8* }
%"class.blink::NormalPageArena" = type { %"class.blink::BaseArena.base", [4 x i8], %"class.blink::FreeList", i8*, i64, i64 }
%"class.blink::BaseArena.base" = type <{ i32 (...)**, %"class.blink::PageStackThreadSafe", %"class.blink::PageStackThreadSafe", %"class.blink::PageStackThreadSafe", %"class.blink::PageStackThreadSafe", %"class.blink::ThreadState"*, i32 }>
%"class.blink::FreeList" = type <{ [17 x %"class.blink::FreeListEntry"*], [17 x %"class.blink::FreeListEntry"*], i32, [4 x i8] }>
%"class.blink::FreeListEntry" = type { %"class.blink::HeapObjectHeader", %"class.blink::FreeListEntry"* }
%"class.blink::PlatformAwareObjectStartBitmap" = type { %"class.blink::ObjectStartBitmap" }
%"class.blink::ObjectStartBitmap" = type { i8*, [2048 x i8] }
%"class.blink::EventCountsIterationSource" = type { %"class.blink::Iterable<WTF::AtomicString, unsigned int>::IterationSource", %"class.blink::Member.205", %"struct.WTF::HashTableConstIteratorAdapter" }
%"class.blink::Member.205" = type { %"class.blink::MemberBase.206" }
%"class.blink::MemberBase.206" = type { %"class.blink::EventCounts"* }
%"struct.WTF::HashTableConstIteratorAdapter" = type { %"class.WTF::HashTableConstIterator" }
%"class.WTF::HashTableConstIterator" = type { %"struct.WTF::KeyValuePair"*, %"struct.WTF::KeyValuePair"* }

$_ZN5blink11EventCountsD2Ev = comdat any

$_ZN5blink11EventCountsD0Ev = comdat any

$_ZNK5blink15ScriptWrappable18HasPendingActivityEv = comdat any

$_ZNK5blink15ScriptWrappable17HasEventListenersEv = comdat any

$_ZNK5blink11EventCounts5TraceEPNS_7VisitorE = comdat any

$_ZNK5blink11EventCounts18GetWrapperTypeInfoEv = comdat any

$_ZN3WTF9HashTableINS_12AtomicStringENS_12KeyValuePairIS1_jEENS_24KeyValuePairKeyExtractorENS_16AtomicStringHashENS_18HashMapValueTraitsINS_10HashTraitsIS1_EENS7_IjEEEES8_NS_18PartitionAllocatorEE6insertINS_17HashMapTranslatorISA_S5_SB_EERKS1_jEENS_18HashTableAddResultISC_S3_EEOT0_OT1_ = comdat any

$_ZN3WTF9HashTableINS_12AtomicStringENS_12KeyValuePairIS1_jEENS_24KeyValuePairKeyExtractorENS_16AtomicStringHashENS_18HashMapValueTraitsINS_10HashTraitsIS1_EENS7_IjEEEES8_NS_18PartitionAllocatorEE6ExpandEPS3_ = comdat any

$_ZN3WTF9HashTableINS_12AtomicStringENS_12KeyValuePairIS1_jEENS_24KeyValuePairKeyExtractorENS_16AtomicStringHashENS_18HashMapValueTraitsINS_10HashTraitsIS1_EENS7_IjEEEES8_NS_18PartitionAllocatorEE8RehashToEPS3_jSD_ = comdat any

$_ZN5blink10ThreadHeap8AllocateINS_8IterableIN3WTF12AtomicStringEjE15IterationSourceEEEPhm = comdat any

$_ZN5blink10TraceTraitINS_8IterableIN3WTF12AtomicStringEjE15IterationSourceEE5TraceEPNS_7VisitorEPKv = comdat any

$_ZN5blink8internal14FinalizerTraitINS_8IterableIN3WTF12AtomicStringEjE15IterationSourceEE8FinalizeEPv = comdat any

$_ZN5blink9NameTraitINS_8IterableIN3WTF12AtomicStringEjE15IterationSourceEE7GetNameEPKv = comdat any

$_ZN5blink26EventCountsIterationSourceD0Ev = comdat any

$_ZN5blink26EventCountsIterationSource4NextEPNS_11ScriptStateERN3WTF12AtomicStringERjRNS_14ExceptionStateE = comdat any

$_ZNK5blink26EventCountsIterationSource5TraceEPNS_7VisitorE = comdat any

$_ZN5blink8IterableIN3WTF12AtomicStringEjE15IterationSourceD2Ev = comdat any

$_ZN5blink10TraceTraitINS_11EventCountsEE5TraceEPNS_7VisitorEPKv = comdat any

$_ZZN5blink11GCInfoTraitINS_8IterableIN3WTF12AtomicStringEjE15IterationSourceEE5IndexEvE7kGcInfo = comdat any

$_ZZN5blink11GCInfoTraitINS_8IterableIN3WTF12AtomicStringEjE15IterationSourceEE5IndexEvE13gc_info_index = comdat any

$_ZTVN5blink26EventCountsIterationSourceE = comdat any

@_ZTVN5blink11EventCountsE = hidden unnamed_addr constant { [13 x i8*], [4 x i8*] } { [13 x i8*] [i8* null, i8* null, i8* bitcast (i8* (%"class.blink::ScriptWrappable"*)* @_ZNK5blink15ScriptWrappable18NameInHeapSnapshotEv to i8*), i8* bitcast (void (%"class.blink::EventCounts"*)* @_ZN5blink11EventCountsD2Ev to i8*), i8* bitcast (void (%"class.blink::EventCounts"*)* @_ZN5blink11EventCountsD0Ev to i8*), i8* bitcast (i1 (%"class.blink::ScriptWrappable"*)* @_ZNK5blink15ScriptWrappable18HasPendingActivityEv to i8*), i8* bitcast (i1 (%"class.blink::ScriptWrappable"*)* @_ZNK5blink15ScriptWrappable17HasEventListenersEv to i8*), i8* bitcast (void (%"class.blink::EventCounts"*, %"class.blink::Visitor"*)* @_ZNK5blink11EventCounts5TraceEPNS_7VisitorE to i8*), i8* bitcast (%"struct.blink::WrapperTypeInfo"* (%"class.blink::EventCounts"*)* @_ZNK5blink11EventCounts18GetWrapperTypeInfoEv to i8*), i8* bitcast (%"class.v8::Value"* (%"class.blink::ScriptWrappable"*, %"class.blink::ScriptState"*)* @_ZN5blink15ScriptWrappable4WrapEPNS_11ScriptStateE to i8*), i8* bitcast (%"class.v8::Object"* (%"class.blink::ScriptWrappable"*, %"class.v8::Isolate"*, %"struct.blink::WrapperTypeInfo"*, %"class.v8::Object"*)* @_ZN5blink15ScriptWrappable20AssociateWithWrapperEPN2v87IsolateEPKNS_15WrapperTypeInfoENS1_5LocalINS1_6ObjectEEE to i8*), i8* bitcast (%"class.blink::Iterable<WTF::AtomicString, unsigned int>::IterationSource"* (%"class.blink::EventCounts"*, %"class.blink::ScriptState"*, %"class.blink::ExceptionState"*)* @_ZN5blink11EventCounts14StartIterationEPNS_11ScriptStateERNS_14ExceptionStateE to i8*), i8* bitcast (i1 (%"class.blink::EventCounts"*, %"class.blink::ScriptState"*, %"class.WTF::AtomicString"*, i32*, %"class.blink::ExceptionState"*)* @_ZN5blink11EventCounts11GetMapEntryEPNS_11ScriptStateERKN3WTF12AtomicStringERjRNS_14ExceptionStateE to i8*)], [4 x i8*] [i8* inttoptr (i64 -16 to i8*), i8* null, i8* bitcast (%"class.blink::Iterable<WTF::AtomicString, unsigned int>::IterationSource"* (%"class.blink::EventCounts"*, %"class.blink::ScriptState"*, %"class.blink::ExceptionState"*)* @_ZThn16_N5blink11EventCounts14StartIterationEPNS_11ScriptStateERNS_14ExceptionStateE to i8*), i8* bitcast (i1 (%"class.blink::EventCounts"*, %"class.blink::ScriptState"*, %"class.WTF::AtomicString"*, i32*, %"class.blink::ExceptionState"*)* @_ZThn16_N5blink11EventCounts11GetMapEntryEPNS_11ScriptStateERKN3WTF12AtomicStringERjRNS_14ExceptionStateE to i8*)] }, align 8
@_ZZN5blink11EventCountsC1EvE13s_event_types = internal unnamed_addr global %"class.WTF::StaticSingleton" zeroinitializer, align 8
@_ZGVZN5blink11EventCountsC1EvE13s_event_types = internal global i64 0, align 8
@_ZN5blink11EventCounts18wrapper_type_info_E = external local_unnamed_addr constant %"struct.blink::WrapperTypeInfo"*, align 8
@_ZN5blink16event_type_names9kAuxclickE = external local_unnamed_addr constant %"class.WTF::AtomicString"*, align 8
@_ZN5blink16event_type_names6kClickE = external local_unnamed_addr constant %"class.WTF::AtomicString"*, align 8
@_ZN5blink16event_type_names12kContextmenuE = external local_unnamed_addr constant %"class.WTF::AtomicString"*, align 8
@_ZN5blink16event_type_names9kDblclickE = external local_unnamed_addr constant %"class.WTF::AtomicString"*, align 8
@_ZN5blink16event_type_names10kMousedownE = external local_unnamed_addr constant %"class.WTF::AtomicString"*, align 8
@_ZN5blink16event_type_names11kMouseenterE = external local_unnamed_addr constant %"class.WTF::AtomicString"*, align 8
@_ZN5blink16event_type_names11kMouseleaveE = external local_unnamed_addr constant %"class.WTF::AtomicString"*, align 8
@_ZN5blink16event_type_names9kMouseoutE = external local_unnamed_addr constant %"class.WTF::AtomicString"*, align 8
@_ZN5blink16event_type_names10kMouseoverE = external local_unnamed_addr constant %"class.WTF::AtomicString"*, align 8
@_ZN5blink16event_type_names8kMouseupE = external local_unnamed_addr constant %"class.WTF::AtomicString"*, align 8
@_ZN5blink16event_type_names12kPointeroverE = external local_unnamed_addr constant %"class.WTF::AtomicString"*, align 8
@_ZN5blink16event_type_names13kPointerenterE = external local_unnamed_addr constant %"class.WTF::AtomicString"*, align 8
@_ZN5blink16event_type_names12kPointerdownE = external local_unnamed_addr constant %"class.WTF::AtomicString"*, align 8
@_ZN5blink16event_type_names10kPointerupE = external local_unnamed_addr constant %"class.WTF::AtomicString"*, align 8
@_ZN5blink16event_type_names14kPointercancelE = external local_unnamed_addr constant %"class.WTF::AtomicString"*, align 8
@_ZN5blink16event_type_names11kPointeroutE = external local_unnamed_addr constant %"class.WTF::AtomicString"*, align 8
@_ZN5blink16event_type_names13kPointerleaveE = external local_unnamed_addr constant %"class.WTF::AtomicString"*, align 8
@_ZN5blink16event_type_names18kGotpointercaptureE = external local_unnamed_addr constant %"class.WTF::AtomicString"*, align 8
@_ZN5blink16event_type_names19kLostpointercaptureE = external local_unnamed_addr constant %"class.WTF::AtomicString"*, align 8
@_ZN5blink16event_type_names11kTouchstartE = external local_unnamed_addr constant %"class.WTF::AtomicString"*, align 8
@_ZN5blink16event_type_names9kTouchendE = external local_unnamed_addr constant %"class.WTF::AtomicString"*, align 8
@_ZN5blink16event_type_names12kTouchcancelE = external local_unnamed_addr constant %"class.WTF::AtomicString"*, align 8
@_ZN5blink16event_type_names8kKeydownE = external local_unnamed_addr constant %"class.WTF::AtomicString"*, align 8
@_ZN5blink16event_type_names9kKeypressE = external local_unnamed_addr constant %"class.WTF::AtomicString"*, align 8
@_ZN5blink16event_type_names6kKeyupE = external local_unnamed_addr constant %"class.WTF::AtomicString"*, align 8
@_ZN5blink16event_type_names12kBeforeinputE = external local_unnamed_addr constant %"class.WTF::AtomicString"*, align 8
@_ZN5blink16event_type_names6kInputE = external local_unnamed_addr constant %"class.WTF::AtomicString"*, align 8
@_ZN5blink16event_type_names17kCompositionstartE = external local_unnamed_addr constant %"class.WTF::AtomicString"*, align 8
@_ZN5blink16event_type_names18kCompositionupdateE = external local_unnamed_addr constant %"class.WTF::AtomicString"*, align 8
@_ZN5blink16event_type_names15kCompositionendE = external local_unnamed_addr constant %"class.WTF::AtomicString"*, align 8
@_ZN5blink16event_type_names10kDragstartE = external local_unnamed_addr constant %"class.WTF::AtomicString"*, align 8
@_ZN5blink16event_type_names8kDragendE = external local_unnamed_addr constant %"class.WTF::AtomicString"*, align 8
@_ZN5blink16event_type_names10kDragenterE = external local_unnamed_addr constant %"class.WTF::AtomicString"*, align 8
@_ZN5blink16event_type_names10kDragleaveE = external local_unnamed_addr constant %"class.WTF::AtomicString"*, align 8
@_ZN5blink16event_type_names9kDragoverE = external local_unnamed_addr constant %"class.WTF::AtomicString"*, align 8
@_ZN5blink16event_type_names5kDropE = external local_unnamed_addr constant %"class.WTF::AtomicString"*, align 8
@__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameINS_12AtomicStringEEEPKcv = private unnamed_addr constant [65 x i8] c"const char *WTF::GetStringWithTypeName() [T = WTF::AtomicString]\00", align 1
@.str.2 = private unnamed_addr constant [23 x i8] c"new_size > table_size_\00", align 1
@.str.3 = private unnamed_addr constant [59 x i8] c"../../third_party/blink/renderer/platform/wtf/hash_table.h\00", align 1
@__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameINS_12KeyValuePairINS_12AtomicStringEjEEEEPKcv = private unnamed_addr constant [98 x i8] c"const char *WTF::GetStringWithTypeName() [T = WTF::KeyValuePair<WTF::AtomicString, unsigned int>]\00", align 1
@_ZN5blink11ThreadState16thread_specific_E = external local_unnamed_addr global %"class.WTF::ThreadSpecific"*, align 8
@__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameIPN5blink11ThreadStateEEEPKcv = private unnamed_addr constant [68 x i8] c"const char *WTF::GetStringWithTypeName() [T = blink::ThreadState *]\00", align 1
@.str.4 = private unnamed_addr constant [23 x i8] c"allocation_size > size\00", align 1
@.str.5 = private unnamed_addr constant [59 x i8] c"../../third_party/blink/renderer/platform/heap/impl/heap.h\00", align 1
@_ZZN5blink11GCInfoTraitINS_8IterableIN3WTF12AtomicStringEjE15IterationSourceEE5IndexEvE7kGcInfo = linkonce_odr hidden constant %"struct.blink::GCInfo" { void (%"class.blink::Visitor"*, i8*)* @_ZN5blink10TraceTraitINS_8IterableIN3WTF12AtomicStringEjE15IterationSourceEE5TraceEPNS_7VisitorEPKv, void (i8*)* @_ZN5blink8internal14FinalizerTraitINS_8IterableIN3WTF12AtomicStringEjE15IterationSourceEE8FinalizeEPv, { i8*, i8 } (i8*)* @_ZN5blink9NameTraitINS_8IterableIN3WTF12AtomicStringEjE15IterationSourceEE7GetNameEPKv, i8 1 }, comdat, align 8
@_ZZN5blink11GCInfoTraitINS_8IterableIN3WTF12AtomicStringEjE15IterationSourceEE5IndexEvE13gc_info_index = linkonce_odr hidden global { { i32 } } zeroinitializer, comdat, align 4
@.str.6 = private unnamed_addr constant [13 x i8] c"InternalNode\00", align 1
@_ZN5blink11GCInfoTable13global_table_E = external local_unnamed_addr global %"class.blink::GCInfoTable"*, align 8
@_ZTVN5blink26EventCountsIterationSourceE = linkonce_odr hidden unnamed_addr constant { [6 x i8*] } { [6 x i8*] [i8* null, i8* null, i8* bitcast (void (%"class.blink::Iterable<WTF::AtomicString, unsigned int>::IterationSource"*)* @_ZN5blink8IterableIN3WTF12AtomicStringEjE15IterationSourceD2Ev to i8*), i8* bitcast (void (%"class.blink::EventCountsIterationSource"*)* @_ZN5blink26EventCountsIterationSourceD0Ev to i8*), i8* bitcast (i1 (%"class.blink::EventCountsIterationSource"*, %"class.blink::ScriptState"*, %"class.WTF::AtomicString"*, i32*, %"class.blink::ExceptionState"*)* @_ZN5blink26EventCountsIterationSource4NextEPNS_11ScriptStateERN3WTF12AtomicStringERjRNS_14ExceptionStateE to i8*), i8* bitcast (void (%"class.blink::EventCountsIterationSource"*, %"class.blink::Visitor"*)* @_ZNK5blink26EventCountsIterationSource5TraceEPNS_7VisitorE to i8*)] }, comdat, align 8

@_ZN5blink11EventCountsC1Ev = hidden unnamed_addr alias void (%"class.blink::EventCounts"*), void (%"class.blink::EventCounts"*)* @_ZN5blink11EventCountsC2Ev

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink11EventCounts3AddERKN3WTF12AtomicStringE(%"class.blink::EventCounts"* nocapture readonly, %"class.WTF::AtomicString"* nocapture readonly dereferenceable(8)) local_unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.blink::EventCounts", %"class.blink::EventCounts"* %0, i64 0, i32 2, i32 0, i32 0
  %4 = load %"struct.WTF::KeyValuePair"*, %"struct.WTF::KeyValuePair"** %3, align 8
  %5 = icmp eq %"struct.WTF::KeyValuePair"* %4, null
  %6 = getelementptr inbounds %"class.blink::EventCounts", %"class.blink::EventCounts"* %0, i64 0, i32 2, i32 0, i32 1
  %7 = load i32, i32* %6, align 8
  br i1 %5, label %57, label %8

8:                                                ; preds = %2
  %9 = add i32 %7, -1
  %10 = zext i32 %9 to i64
  %11 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %1, i64 0, i32 0, i32 0, i32 0
  %12 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %11, align 8
  %13 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %12, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %14 = load atomic i32, i32* %13 monotonic, align 4
  %15 = lshr i32 %14, 8
  %16 = and i32 %15, %9
  %17 = zext i32 %16 to i64
  %18 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %4, i64 %17
  %19 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %18, i64 0, i32 0, i32 0, i32 0, i32 0
  %20 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %19, align 8
  %21 = icmp eq %"class.WTF::StringImpl"* %20, null
  br i1 %21, label %57, label %22

22:                                               ; preds = %8
  %23 = xor i32 %15, -1
  %24 = lshr i32 %14, 31
  %25 = add nsw i32 %24, %23
  %26 = shl i32 %25, 12
  %27 = xor i32 %26, %25
  %28 = lshr i32 %27, 7
  %29 = xor i32 %28, %27
  %30 = shl i32 %29, 2
  %31 = xor i32 %30, %29
  %32 = lshr i32 %31, 20
  %33 = xor i32 %32, %31
  %34 = or i32 %33, 1
  %35 = zext i32 %34 to i64
  br label %36

36:                                               ; preds = %46, %22
  %37 = phi %"struct.WTF::KeyValuePair"* [ %18, %22 ], [ %51, %46 ]
  %38 = phi i64 [ %17, %22 ], [ %50, %46 ]
  %39 = phi i64 [ 0, %22 ], [ %48, %46 ]
  %40 = bitcast %"struct.WTF::KeyValuePair"* %37 to i8**
  %41 = load i8*, i8** %40, align 8
  %42 = icmp ne i8* %41, inttoptr (i64 -1 to i8*)
  %43 = bitcast i8* %41 to %"class.WTF::StringImpl"*
  %44 = icmp eq %"class.WTF::StringImpl"* %12, %43
  %45 = and i1 %42, %44
  br i1 %45, label %55, label %46

46:                                               ; preds = %36
  %47 = icmp eq i64 %39, 0
  %48 = select i1 %47, i64 %35, i64 %39
  %49 = add i64 %48, %38
  %50 = and i64 %49, %10
  %51 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %4, i64 %50
  %52 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %51, i64 0, i32 0, i32 0, i32 0, i32 0
  %53 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %52, align 8
  %54 = icmp eq %"class.WTF::StringImpl"* %53, null
  br i1 %54, label %57, label %36

55:                                               ; preds = %36
  %56 = icmp eq %"struct.WTF::KeyValuePair"* %37, null
  br i1 %56, label %57, label %60

57:                                               ; preds = %46, %55, %8, %2
  %58 = zext i32 %7 to i64
  %59 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %4, i64 %58
  br label %60

60:                                               ; preds = %55, %57
  %61 = phi %"struct.WTF::KeyValuePair"* [ %59, %57 ], [ %37, %55 ]
  %62 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %61, i64 0, i32 1
  %63 = load i32, i32* %62, align 8
  %64 = add i32 %63, 1
  store i32 %64, i32* %62, align 8
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink11EventCounts17AddMultipleEventsERKN3WTF12AtomicStringEj(%"class.blink::EventCounts"* nocapture readonly, %"class.WTF::AtomicString"* nocapture readonly dereferenceable(8), i32) local_unnamed_addr #0 align 2 {
  %4 = getelementptr inbounds %"class.blink::EventCounts", %"class.blink::EventCounts"* %0, i64 0, i32 2, i32 0, i32 0
  %5 = load %"struct.WTF::KeyValuePair"*, %"struct.WTF::KeyValuePair"** %4, align 8
  %6 = icmp eq %"struct.WTF::KeyValuePair"* %5, null
  %7 = getelementptr inbounds %"class.blink::EventCounts", %"class.blink::EventCounts"* %0, i64 0, i32 2, i32 0, i32 1
  %8 = load i32, i32* %7, align 8
  br i1 %6, label %60, label %9

9:                                                ; preds = %3
  %10 = add i32 %8, -1
  %11 = zext i32 %10 to i64
  %12 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %1, i64 0, i32 0, i32 0, i32 0
  %13 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %12, align 8
  %14 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %13, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %15 = load atomic i32, i32* %14 monotonic, align 4
  %16 = lshr i32 %15, 8
  %17 = and i32 %16, %10
  %18 = zext i32 %17 to i64
  %19 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %5, i64 %18
  %20 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %19, i64 0, i32 0, i32 0, i32 0, i32 0
  %21 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %20, align 8
  %22 = icmp eq %"class.WTF::StringImpl"* %21, null
  br i1 %22, label %60, label %23

23:                                               ; preds = %9
  %24 = xor i32 %16, -1
  %25 = lshr i32 %15, 31
  %26 = add nsw i32 %25, %24
  %27 = shl i32 %26, 12
  %28 = xor i32 %27, %26
  %29 = lshr i32 %28, 7
  %30 = xor i32 %29, %28
  %31 = shl i32 %30, 2
  %32 = xor i32 %31, %30
  %33 = lshr i32 %32, 20
  %34 = xor i32 %33, %32
  %35 = or i32 %34, 1
  %36 = zext i32 %35 to i64
  br label %37

37:                                               ; preds = %47, %23
  %38 = phi %"struct.WTF::KeyValuePair"* [ %19, %23 ], [ %52, %47 ]
  %39 = phi i64 [ %18, %23 ], [ %51, %47 ]
  %40 = phi i64 [ 0, %23 ], [ %49, %47 ]
  %41 = bitcast %"struct.WTF::KeyValuePair"* %38 to i8**
  %42 = load i8*, i8** %41, align 8
  %43 = icmp ne i8* %42, inttoptr (i64 -1 to i8*)
  %44 = bitcast i8* %42 to %"class.WTF::StringImpl"*
  %45 = icmp eq %"class.WTF::StringImpl"* %13, %44
  %46 = and i1 %43, %45
  br i1 %46, label %56, label %47

47:                                               ; preds = %37
  %48 = icmp eq i64 %40, 0
  %49 = select i1 %48, i64 %36, i64 %40
  %50 = add i64 %49, %39
  %51 = and i64 %50, %11
  %52 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %5, i64 %51
  %53 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %52, i64 0, i32 0, i32 0, i32 0, i32 0
  %54 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %53, align 8
  %55 = icmp eq %"class.WTF::StringImpl"* %54, null
  br i1 %55, label %60, label %37

56:                                               ; preds = %37
  %57 = icmp eq %"struct.WTF::KeyValuePair"* %38, null
  br i1 %57, label %60, label %58

58:                                               ; preds = %56
  %59 = zext i32 %8 to i64
  br label %63

60:                                               ; preds = %47, %56, %9, %3
  %61 = zext i32 %8 to i64
  %62 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %5, i64 %61
  br label %63

63:                                               ; preds = %58, %60
  %64 = phi i64 [ %59, %58 ], [ %61, %60 ]
  %65 = phi %"struct.WTF::KeyValuePair"* [ %38, %58 ], [ %62, %60 ]
  %66 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %5, i64 %64
  %67 = icmp eq %"struct.WTF::KeyValuePair"* %65, %66
  br i1 %67, label %72, label %68

68:                                               ; preds = %63
  %69 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %65, i64 0, i32 1
  %70 = load i32, i32* %69, align 8
  %71 = add i32 %70, %2
  store i32 %71, i32* %69, align 8
  br label %72

72:                                               ; preds = %63, %68
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink11EventCountsC2Ev(%"class.blink::EventCounts"*) unnamed_addr #0 align 2 {
  %2 = alloca [36 x %"class.WTF::AtomicString"], align 8
  %3 = alloca i32, align 4
  %4 = getelementptr inbounds %"class.blink::EventCounts", %"class.blink::EventCounts"* %0, i64 0, i32 0, i32 0, i32 0
  %5 = getelementptr inbounds %"class.blink::EventCounts", %"class.blink::EventCounts"* %0, i64 0, i32 0, i32 1, i32 0, i32 0, i32 0, i32 0
  store i64* null, i64** %5, align 8
  %6 = getelementptr inbounds %"class.blink::EventCounts", %"class.blink::EventCounts"* %0, i64 0, i32 1, i32 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [13 x i8*], [4 x i8*] }, { [13 x i8*], [4 x i8*] }* @_ZTVN5blink11EventCountsE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %4, align 8
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [13 x i8*], [4 x i8*] }, { [13 x i8*], [4 x i8*] }* @_ZTVN5blink11EventCountsE, i64 0, inrange i32 1, i64 2) to i32 (...)**), i32 (...)*** %6, align 8
  %7 = getelementptr inbounds %"class.blink::EventCounts", %"class.blink::EventCounts"* %0, i64 0, i32 2
  %8 = bitcast %"class.WTF::HashMap"* %7 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %8, i8 0, i64 20, i1 false) #9
  %9 = load atomic i8, i8* bitcast (i64* @_ZGVZN5blink11EventCountsC1EvE13s_event_types to i8*) acquire, align 8
  %10 = icmp eq i8 %9, 0
  br i1 %10, label %11, label %902, !prof !2

11:                                               ; preds = %1
  %12 = tail call i32 @__cxa_guard_acquire(i64* nonnull @_ZGVZN5blink11EventCountsC1EvE13s_event_types) #9
  %13 = icmp eq i32 %12, 0
  br i1 %13, label %902, label %14

14:                                               ; preds = %11
  %15 = bitcast [36 x %"class.WTF::AtomicString"]* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 288, i8* nonnull %15) #9
  %16 = getelementptr inbounds [36 x %"class.WTF::AtomicString"], [36 x %"class.WTF::AtomicString"]* %2, i64 0, i64 0
  %17 = load %"class.WTF::AtomicString"*, %"class.WTF::AtomicString"** @_ZN5blink16event_type_names9kAuxclickE, align 8
  %18 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %17, i64 0, i32 0, i32 0, i32 0
  %19 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %18, align 8
  %20 = getelementptr inbounds [36 x %"class.WTF::AtomicString"], [36 x %"class.WTF::AtomicString"]* %2, i64 0, i64 0, i32 0, i32 0, i32 0
  store %"class.WTF::StringImpl"* %19, %"class.WTF::StringImpl"** %20, align 8
  %21 = icmp eq %"class.WTF::StringImpl"* %19, null
  br i1 %21, label %39, label %22

22:                                               ; preds = %14
  %23 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %19, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %24 = load atomic i32, i32* %23 monotonic, align 4
  %25 = and i32 %24, 2
  %26 = icmp eq i32 %25, 0
  br i1 %26, label %27, label %39

27:                                               ; preds = %22
  %28 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %19, i64 0, i32 0
  %29 = load i32, i32* %28, align 4
  %30 = zext i32 %29 to i33
  %31 = tail call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %30, i33 1) #9
  %32 = extractvalue { i33, i1 } %31, 1
  %33 = extractvalue { i33, i1 } %31, 0
  %34 = icmp slt i33 %33, 0
  %35 = or i1 %32, %34
  br i1 %35, label %36, label %37, !prof !3

36:                                               ; preds = %27
  tail call void @llvm.trap() #9
  unreachable

37:                                               ; preds = %27
  %38 = trunc i33 %33 to i32
  store i32 %38, i32* %28, align 4
  br label %39

39:                                               ; preds = %37, %22, %14
  %40 = load %"class.WTF::AtomicString"*, %"class.WTF::AtomicString"** @_ZN5blink16event_type_names6kClickE, align 8
  %41 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %40, i64 0, i32 0, i32 0, i32 0
  %42 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %41, align 8
  %43 = getelementptr inbounds [36 x %"class.WTF::AtomicString"], [36 x %"class.WTF::AtomicString"]* %2, i64 0, i64 1, i32 0, i32 0, i32 0
  store %"class.WTF::StringImpl"* %42, %"class.WTF::StringImpl"** %43, align 8
  %44 = icmp eq %"class.WTF::StringImpl"* %42, null
  br i1 %44, label %62, label %45

45:                                               ; preds = %39
  %46 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %42, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %47 = load atomic i32, i32* %46 monotonic, align 4
  %48 = and i32 %47, 2
  %49 = icmp eq i32 %48, 0
  br i1 %49, label %50, label %62

50:                                               ; preds = %45
  %51 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %42, i64 0, i32 0
  %52 = load i32, i32* %51, align 4
  %53 = zext i32 %52 to i33
  %54 = tail call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %53, i33 1) #9
  %55 = extractvalue { i33, i1 } %54, 1
  %56 = extractvalue { i33, i1 } %54, 0
  %57 = icmp slt i33 %56, 0
  %58 = or i1 %55, %57
  br i1 %58, label %59, label %60, !prof !3

59:                                               ; preds = %50
  tail call void @llvm.trap() #9
  unreachable

60:                                               ; preds = %50
  %61 = trunc i33 %56 to i32
  store i32 %61, i32* %51, align 4
  br label %62

62:                                               ; preds = %60, %45, %39
  %63 = load %"class.WTF::AtomicString"*, %"class.WTF::AtomicString"** @_ZN5blink16event_type_names12kContextmenuE, align 8
  %64 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %63, i64 0, i32 0, i32 0, i32 0
  %65 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %64, align 8
  %66 = getelementptr inbounds [36 x %"class.WTF::AtomicString"], [36 x %"class.WTF::AtomicString"]* %2, i64 0, i64 2, i32 0, i32 0, i32 0
  store %"class.WTF::StringImpl"* %65, %"class.WTF::StringImpl"** %66, align 8
  %67 = icmp eq %"class.WTF::StringImpl"* %65, null
  br i1 %67, label %85, label %68

68:                                               ; preds = %62
  %69 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %65, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %70 = load atomic i32, i32* %69 monotonic, align 4
  %71 = and i32 %70, 2
  %72 = icmp eq i32 %71, 0
  br i1 %72, label %73, label %85

73:                                               ; preds = %68
  %74 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %65, i64 0, i32 0
  %75 = load i32, i32* %74, align 4
  %76 = zext i32 %75 to i33
  %77 = tail call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %76, i33 1) #9
  %78 = extractvalue { i33, i1 } %77, 1
  %79 = extractvalue { i33, i1 } %77, 0
  %80 = icmp slt i33 %79, 0
  %81 = or i1 %78, %80
  br i1 %81, label %82, label %83, !prof !3

82:                                               ; preds = %73
  tail call void @llvm.trap() #9
  unreachable

83:                                               ; preds = %73
  %84 = trunc i33 %79 to i32
  store i32 %84, i32* %74, align 4
  br label %85

85:                                               ; preds = %83, %68, %62
  %86 = load %"class.WTF::AtomicString"*, %"class.WTF::AtomicString"** @_ZN5blink16event_type_names9kDblclickE, align 8
  %87 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %86, i64 0, i32 0, i32 0, i32 0
  %88 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %87, align 8
  %89 = getelementptr inbounds [36 x %"class.WTF::AtomicString"], [36 x %"class.WTF::AtomicString"]* %2, i64 0, i64 3, i32 0, i32 0, i32 0
  store %"class.WTF::StringImpl"* %88, %"class.WTF::StringImpl"** %89, align 8
  %90 = icmp eq %"class.WTF::StringImpl"* %88, null
  br i1 %90, label %108, label %91

91:                                               ; preds = %85
  %92 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %88, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %93 = load atomic i32, i32* %92 monotonic, align 4
  %94 = and i32 %93, 2
  %95 = icmp eq i32 %94, 0
  br i1 %95, label %96, label %108

96:                                               ; preds = %91
  %97 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %88, i64 0, i32 0
  %98 = load i32, i32* %97, align 4
  %99 = zext i32 %98 to i33
  %100 = tail call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %99, i33 1) #9
  %101 = extractvalue { i33, i1 } %100, 1
  %102 = extractvalue { i33, i1 } %100, 0
  %103 = icmp slt i33 %102, 0
  %104 = or i1 %101, %103
  br i1 %104, label %105, label %106, !prof !3

105:                                              ; preds = %96
  tail call void @llvm.trap() #9
  unreachable

106:                                              ; preds = %96
  %107 = trunc i33 %102 to i32
  store i32 %107, i32* %97, align 4
  br label %108

108:                                              ; preds = %106, %91, %85
  %109 = load %"class.WTF::AtomicString"*, %"class.WTF::AtomicString"** @_ZN5blink16event_type_names10kMousedownE, align 8
  %110 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %109, i64 0, i32 0, i32 0, i32 0
  %111 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %110, align 8
  %112 = getelementptr inbounds [36 x %"class.WTF::AtomicString"], [36 x %"class.WTF::AtomicString"]* %2, i64 0, i64 4, i32 0, i32 0, i32 0
  store %"class.WTF::StringImpl"* %111, %"class.WTF::StringImpl"** %112, align 8
  %113 = icmp eq %"class.WTF::StringImpl"* %111, null
  br i1 %113, label %131, label %114

114:                                              ; preds = %108
  %115 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %111, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %116 = load atomic i32, i32* %115 monotonic, align 4
  %117 = and i32 %116, 2
  %118 = icmp eq i32 %117, 0
  br i1 %118, label %119, label %131

119:                                              ; preds = %114
  %120 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %111, i64 0, i32 0
  %121 = load i32, i32* %120, align 4
  %122 = zext i32 %121 to i33
  %123 = tail call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %122, i33 1) #9
  %124 = extractvalue { i33, i1 } %123, 1
  %125 = extractvalue { i33, i1 } %123, 0
  %126 = icmp slt i33 %125, 0
  %127 = or i1 %124, %126
  br i1 %127, label %128, label %129, !prof !3

128:                                              ; preds = %119
  tail call void @llvm.trap() #9
  unreachable

129:                                              ; preds = %119
  %130 = trunc i33 %125 to i32
  store i32 %130, i32* %120, align 4
  br label %131

131:                                              ; preds = %129, %114, %108
  %132 = load %"class.WTF::AtomicString"*, %"class.WTF::AtomicString"** @_ZN5blink16event_type_names11kMouseenterE, align 8
  %133 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %132, i64 0, i32 0, i32 0, i32 0
  %134 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %133, align 8
  %135 = getelementptr inbounds [36 x %"class.WTF::AtomicString"], [36 x %"class.WTF::AtomicString"]* %2, i64 0, i64 5, i32 0, i32 0, i32 0
  store %"class.WTF::StringImpl"* %134, %"class.WTF::StringImpl"** %135, align 8
  %136 = icmp eq %"class.WTF::StringImpl"* %134, null
  br i1 %136, label %154, label %137

137:                                              ; preds = %131
  %138 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %134, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %139 = load atomic i32, i32* %138 monotonic, align 4
  %140 = and i32 %139, 2
  %141 = icmp eq i32 %140, 0
  br i1 %141, label %142, label %154

142:                                              ; preds = %137
  %143 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %134, i64 0, i32 0
  %144 = load i32, i32* %143, align 4
  %145 = zext i32 %144 to i33
  %146 = tail call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %145, i33 1) #9
  %147 = extractvalue { i33, i1 } %146, 1
  %148 = extractvalue { i33, i1 } %146, 0
  %149 = icmp slt i33 %148, 0
  %150 = or i1 %147, %149
  br i1 %150, label %151, label %152, !prof !3

151:                                              ; preds = %142
  tail call void @llvm.trap() #9
  unreachable

152:                                              ; preds = %142
  %153 = trunc i33 %148 to i32
  store i32 %153, i32* %143, align 4
  br label %154

154:                                              ; preds = %152, %137, %131
  %155 = load %"class.WTF::AtomicString"*, %"class.WTF::AtomicString"** @_ZN5blink16event_type_names11kMouseleaveE, align 8
  %156 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %155, i64 0, i32 0, i32 0, i32 0
  %157 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %156, align 8
  %158 = getelementptr inbounds [36 x %"class.WTF::AtomicString"], [36 x %"class.WTF::AtomicString"]* %2, i64 0, i64 6, i32 0, i32 0, i32 0
  store %"class.WTF::StringImpl"* %157, %"class.WTF::StringImpl"** %158, align 8
  %159 = icmp eq %"class.WTF::StringImpl"* %157, null
  br i1 %159, label %177, label %160

160:                                              ; preds = %154
  %161 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %157, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %162 = load atomic i32, i32* %161 monotonic, align 4
  %163 = and i32 %162, 2
  %164 = icmp eq i32 %163, 0
  br i1 %164, label %165, label %177

165:                                              ; preds = %160
  %166 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %157, i64 0, i32 0
  %167 = load i32, i32* %166, align 4
  %168 = zext i32 %167 to i33
  %169 = tail call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %168, i33 1) #9
  %170 = extractvalue { i33, i1 } %169, 1
  %171 = extractvalue { i33, i1 } %169, 0
  %172 = icmp slt i33 %171, 0
  %173 = or i1 %170, %172
  br i1 %173, label %174, label %175, !prof !3

174:                                              ; preds = %165
  tail call void @llvm.trap() #9
  unreachable

175:                                              ; preds = %165
  %176 = trunc i33 %171 to i32
  store i32 %176, i32* %166, align 4
  br label %177

177:                                              ; preds = %175, %160, %154
  %178 = load %"class.WTF::AtomicString"*, %"class.WTF::AtomicString"** @_ZN5blink16event_type_names9kMouseoutE, align 8
  %179 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %178, i64 0, i32 0, i32 0, i32 0
  %180 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %179, align 8
  %181 = getelementptr inbounds [36 x %"class.WTF::AtomicString"], [36 x %"class.WTF::AtomicString"]* %2, i64 0, i64 7, i32 0, i32 0, i32 0
  store %"class.WTF::StringImpl"* %180, %"class.WTF::StringImpl"** %181, align 8
  %182 = icmp eq %"class.WTF::StringImpl"* %180, null
  br i1 %182, label %200, label %183

183:                                              ; preds = %177
  %184 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %180, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %185 = load atomic i32, i32* %184 monotonic, align 4
  %186 = and i32 %185, 2
  %187 = icmp eq i32 %186, 0
  br i1 %187, label %188, label %200

188:                                              ; preds = %183
  %189 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %180, i64 0, i32 0
  %190 = load i32, i32* %189, align 4
  %191 = zext i32 %190 to i33
  %192 = tail call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %191, i33 1) #9
  %193 = extractvalue { i33, i1 } %192, 1
  %194 = extractvalue { i33, i1 } %192, 0
  %195 = icmp slt i33 %194, 0
  %196 = or i1 %193, %195
  br i1 %196, label %197, label %198, !prof !3

197:                                              ; preds = %188
  tail call void @llvm.trap() #9
  unreachable

198:                                              ; preds = %188
  %199 = trunc i33 %194 to i32
  store i32 %199, i32* %189, align 4
  br label %200

200:                                              ; preds = %198, %183, %177
  %201 = load %"class.WTF::AtomicString"*, %"class.WTF::AtomicString"** @_ZN5blink16event_type_names10kMouseoverE, align 8
  %202 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %201, i64 0, i32 0, i32 0, i32 0
  %203 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %202, align 8
  %204 = getelementptr inbounds [36 x %"class.WTF::AtomicString"], [36 x %"class.WTF::AtomicString"]* %2, i64 0, i64 8, i32 0, i32 0, i32 0
  store %"class.WTF::StringImpl"* %203, %"class.WTF::StringImpl"** %204, align 8
  %205 = icmp eq %"class.WTF::StringImpl"* %203, null
  br i1 %205, label %223, label %206

206:                                              ; preds = %200
  %207 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %203, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %208 = load atomic i32, i32* %207 monotonic, align 4
  %209 = and i32 %208, 2
  %210 = icmp eq i32 %209, 0
  br i1 %210, label %211, label %223

211:                                              ; preds = %206
  %212 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %203, i64 0, i32 0
  %213 = load i32, i32* %212, align 4
  %214 = zext i32 %213 to i33
  %215 = tail call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %214, i33 1) #9
  %216 = extractvalue { i33, i1 } %215, 1
  %217 = extractvalue { i33, i1 } %215, 0
  %218 = icmp slt i33 %217, 0
  %219 = or i1 %216, %218
  br i1 %219, label %220, label %221, !prof !3

220:                                              ; preds = %211
  tail call void @llvm.trap() #9
  unreachable

221:                                              ; preds = %211
  %222 = trunc i33 %217 to i32
  store i32 %222, i32* %212, align 4
  br label %223

223:                                              ; preds = %221, %206, %200
  %224 = load %"class.WTF::AtomicString"*, %"class.WTF::AtomicString"** @_ZN5blink16event_type_names8kMouseupE, align 8
  %225 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %224, i64 0, i32 0, i32 0, i32 0
  %226 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %225, align 8
  %227 = getelementptr inbounds [36 x %"class.WTF::AtomicString"], [36 x %"class.WTF::AtomicString"]* %2, i64 0, i64 9, i32 0, i32 0, i32 0
  store %"class.WTF::StringImpl"* %226, %"class.WTF::StringImpl"** %227, align 8
  %228 = icmp eq %"class.WTF::StringImpl"* %226, null
  br i1 %228, label %246, label %229

229:                                              ; preds = %223
  %230 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %226, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %231 = load atomic i32, i32* %230 monotonic, align 4
  %232 = and i32 %231, 2
  %233 = icmp eq i32 %232, 0
  br i1 %233, label %234, label %246

234:                                              ; preds = %229
  %235 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %226, i64 0, i32 0
  %236 = load i32, i32* %235, align 4
  %237 = zext i32 %236 to i33
  %238 = tail call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %237, i33 1) #9
  %239 = extractvalue { i33, i1 } %238, 1
  %240 = extractvalue { i33, i1 } %238, 0
  %241 = icmp slt i33 %240, 0
  %242 = or i1 %239, %241
  br i1 %242, label %243, label %244, !prof !3

243:                                              ; preds = %234
  tail call void @llvm.trap() #9
  unreachable

244:                                              ; preds = %234
  %245 = trunc i33 %240 to i32
  store i32 %245, i32* %235, align 4
  br label %246

246:                                              ; preds = %244, %229, %223
  %247 = load %"class.WTF::AtomicString"*, %"class.WTF::AtomicString"** @_ZN5blink16event_type_names12kPointeroverE, align 8
  %248 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %247, i64 0, i32 0, i32 0, i32 0
  %249 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %248, align 8
  %250 = getelementptr inbounds [36 x %"class.WTF::AtomicString"], [36 x %"class.WTF::AtomicString"]* %2, i64 0, i64 10, i32 0, i32 0, i32 0
  store %"class.WTF::StringImpl"* %249, %"class.WTF::StringImpl"** %250, align 8
  %251 = icmp eq %"class.WTF::StringImpl"* %249, null
  br i1 %251, label %269, label %252

252:                                              ; preds = %246
  %253 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %249, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %254 = load atomic i32, i32* %253 monotonic, align 4
  %255 = and i32 %254, 2
  %256 = icmp eq i32 %255, 0
  br i1 %256, label %257, label %269

257:                                              ; preds = %252
  %258 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %249, i64 0, i32 0
  %259 = load i32, i32* %258, align 4
  %260 = zext i32 %259 to i33
  %261 = tail call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %260, i33 1) #9
  %262 = extractvalue { i33, i1 } %261, 1
  %263 = extractvalue { i33, i1 } %261, 0
  %264 = icmp slt i33 %263, 0
  %265 = or i1 %262, %264
  br i1 %265, label %266, label %267, !prof !3

266:                                              ; preds = %257
  tail call void @llvm.trap() #9
  unreachable

267:                                              ; preds = %257
  %268 = trunc i33 %263 to i32
  store i32 %268, i32* %258, align 4
  br label %269

269:                                              ; preds = %267, %252, %246
  %270 = load %"class.WTF::AtomicString"*, %"class.WTF::AtomicString"** @_ZN5blink16event_type_names13kPointerenterE, align 8
  %271 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %270, i64 0, i32 0, i32 0, i32 0
  %272 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %271, align 8
  %273 = getelementptr inbounds [36 x %"class.WTF::AtomicString"], [36 x %"class.WTF::AtomicString"]* %2, i64 0, i64 11, i32 0, i32 0, i32 0
  store %"class.WTF::StringImpl"* %272, %"class.WTF::StringImpl"** %273, align 8
  %274 = icmp eq %"class.WTF::StringImpl"* %272, null
  br i1 %274, label %292, label %275

275:                                              ; preds = %269
  %276 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %272, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %277 = load atomic i32, i32* %276 monotonic, align 4
  %278 = and i32 %277, 2
  %279 = icmp eq i32 %278, 0
  br i1 %279, label %280, label %292

280:                                              ; preds = %275
  %281 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %272, i64 0, i32 0
  %282 = load i32, i32* %281, align 4
  %283 = zext i32 %282 to i33
  %284 = tail call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %283, i33 1) #9
  %285 = extractvalue { i33, i1 } %284, 1
  %286 = extractvalue { i33, i1 } %284, 0
  %287 = icmp slt i33 %286, 0
  %288 = or i1 %285, %287
  br i1 %288, label %289, label %290, !prof !3

289:                                              ; preds = %280
  tail call void @llvm.trap() #9
  unreachable

290:                                              ; preds = %280
  %291 = trunc i33 %286 to i32
  store i32 %291, i32* %281, align 4
  br label %292

292:                                              ; preds = %290, %275, %269
  %293 = load %"class.WTF::AtomicString"*, %"class.WTF::AtomicString"** @_ZN5blink16event_type_names12kPointerdownE, align 8
  %294 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %293, i64 0, i32 0, i32 0, i32 0
  %295 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %294, align 8
  %296 = getelementptr inbounds [36 x %"class.WTF::AtomicString"], [36 x %"class.WTF::AtomicString"]* %2, i64 0, i64 12, i32 0, i32 0, i32 0
  store %"class.WTF::StringImpl"* %295, %"class.WTF::StringImpl"** %296, align 8
  %297 = icmp eq %"class.WTF::StringImpl"* %295, null
  br i1 %297, label %315, label %298

298:                                              ; preds = %292
  %299 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %295, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %300 = load atomic i32, i32* %299 monotonic, align 4
  %301 = and i32 %300, 2
  %302 = icmp eq i32 %301, 0
  br i1 %302, label %303, label %315

303:                                              ; preds = %298
  %304 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %295, i64 0, i32 0
  %305 = load i32, i32* %304, align 4
  %306 = zext i32 %305 to i33
  %307 = tail call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %306, i33 1) #9
  %308 = extractvalue { i33, i1 } %307, 1
  %309 = extractvalue { i33, i1 } %307, 0
  %310 = icmp slt i33 %309, 0
  %311 = or i1 %308, %310
  br i1 %311, label %312, label %313, !prof !3

312:                                              ; preds = %303
  tail call void @llvm.trap() #9
  unreachable

313:                                              ; preds = %303
  %314 = trunc i33 %309 to i32
  store i32 %314, i32* %304, align 4
  br label %315

315:                                              ; preds = %313, %298, %292
  %316 = load %"class.WTF::AtomicString"*, %"class.WTF::AtomicString"** @_ZN5blink16event_type_names10kPointerupE, align 8
  %317 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %316, i64 0, i32 0, i32 0, i32 0
  %318 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %317, align 8
  %319 = getelementptr inbounds [36 x %"class.WTF::AtomicString"], [36 x %"class.WTF::AtomicString"]* %2, i64 0, i64 13, i32 0, i32 0, i32 0
  store %"class.WTF::StringImpl"* %318, %"class.WTF::StringImpl"** %319, align 8
  %320 = icmp eq %"class.WTF::StringImpl"* %318, null
  br i1 %320, label %338, label %321

321:                                              ; preds = %315
  %322 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %318, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %323 = load atomic i32, i32* %322 monotonic, align 4
  %324 = and i32 %323, 2
  %325 = icmp eq i32 %324, 0
  br i1 %325, label %326, label %338

326:                                              ; preds = %321
  %327 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %318, i64 0, i32 0
  %328 = load i32, i32* %327, align 4
  %329 = zext i32 %328 to i33
  %330 = tail call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %329, i33 1) #9
  %331 = extractvalue { i33, i1 } %330, 1
  %332 = extractvalue { i33, i1 } %330, 0
  %333 = icmp slt i33 %332, 0
  %334 = or i1 %331, %333
  br i1 %334, label %335, label %336, !prof !3

335:                                              ; preds = %326
  tail call void @llvm.trap() #9
  unreachable

336:                                              ; preds = %326
  %337 = trunc i33 %332 to i32
  store i32 %337, i32* %327, align 4
  br label %338

338:                                              ; preds = %336, %321, %315
  %339 = load %"class.WTF::AtomicString"*, %"class.WTF::AtomicString"** @_ZN5blink16event_type_names14kPointercancelE, align 8
  %340 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %339, i64 0, i32 0, i32 0, i32 0
  %341 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %340, align 8
  %342 = getelementptr inbounds [36 x %"class.WTF::AtomicString"], [36 x %"class.WTF::AtomicString"]* %2, i64 0, i64 14, i32 0, i32 0, i32 0
  store %"class.WTF::StringImpl"* %341, %"class.WTF::StringImpl"** %342, align 8
  %343 = icmp eq %"class.WTF::StringImpl"* %341, null
  br i1 %343, label %361, label %344

344:                                              ; preds = %338
  %345 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %341, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %346 = load atomic i32, i32* %345 monotonic, align 4
  %347 = and i32 %346, 2
  %348 = icmp eq i32 %347, 0
  br i1 %348, label %349, label %361

349:                                              ; preds = %344
  %350 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %341, i64 0, i32 0
  %351 = load i32, i32* %350, align 4
  %352 = zext i32 %351 to i33
  %353 = tail call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %352, i33 1) #9
  %354 = extractvalue { i33, i1 } %353, 1
  %355 = extractvalue { i33, i1 } %353, 0
  %356 = icmp slt i33 %355, 0
  %357 = or i1 %354, %356
  br i1 %357, label %358, label %359, !prof !3

358:                                              ; preds = %349
  tail call void @llvm.trap() #9
  unreachable

359:                                              ; preds = %349
  %360 = trunc i33 %355 to i32
  store i32 %360, i32* %350, align 4
  br label %361

361:                                              ; preds = %359, %344, %338
  %362 = load %"class.WTF::AtomicString"*, %"class.WTF::AtomicString"** @_ZN5blink16event_type_names11kPointeroutE, align 8
  %363 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %362, i64 0, i32 0, i32 0, i32 0
  %364 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %363, align 8
  %365 = getelementptr inbounds [36 x %"class.WTF::AtomicString"], [36 x %"class.WTF::AtomicString"]* %2, i64 0, i64 15, i32 0, i32 0, i32 0
  store %"class.WTF::StringImpl"* %364, %"class.WTF::StringImpl"** %365, align 8
  %366 = icmp eq %"class.WTF::StringImpl"* %364, null
  br i1 %366, label %384, label %367

367:                                              ; preds = %361
  %368 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %364, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %369 = load atomic i32, i32* %368 monotonic, align 4
  %370 = and i32 %369, 2
  %371 = icmp eq i32 %370, 0
  br i1 %371, label %372, label %384

372:                                              ; preds = %367
  %373 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %364, i64 0, i32 0
  %374 = load i32, i32* %373, align 4
  %375 = zext i32 %374 to i33
  %376 = tail call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %375, i33 1) #9
  %377 = extractvalue { i33, i1 } %376, 1
  %378 = extractvalue { i33, i1 } %376, 0
  %379 = icmp slt i33 %378, 0
  %380 = or i1 %377, %379
  br i1 %380, label %381, label %382, !prof !3

381:                                              ; preds = %372
  tail call void @llvm.trap() #9
  unreachable

382:                                              ; preds = %372
  %383 = trunc i33 %378 to i32
  store i32 %383, i32* %373, align 4
  br label %384

384:                                              ; preds = %382, %367, %361
  %385 = load %"class.WTF::AtomicString"*, %"class.WTF::AtomicString"** @_ZN5blink16event_type_names13kPointerleaveE, align 8
  %386 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %385, i64 0, i32 0, i32 0, i32 0
  %387 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %386, align 8
  %388 = getelementptr inbounds [36 x %"class.WTF::AtomicString"], [36 x %"class.WTF::AtomicString"]* %2, i64 0, i64 16, i32 0, i32 0, i32 0
  store %"class.WTF::StringImpl"* %387, %"class.WTF::StringImpl"** %388, align 8
  %389 = icmp eq %"class.WTF::StringImpl"* %387, null
  br i1 %389, label %407, label %390

390:                                              ; preds = %384
  %391 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %387, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %392 = load atomic i32, i32* %391 monotonic, align 4
  %393 = and i32 %392, 2
  %394 = icmp eq i32 %393, 0
  br i1 %394, label %395, label %407

395:                                              ; preds = %390
  %396 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %387, i64 0, i32 0
  %397 = load i32, i32* %396, align 4
  %398 = zext i32 %397 to i33
  %399 = tail call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %398, i33 1) #9
  %400 = extractvalue { i33, i1 } %399, 1
  %401 = extractvalue { i33, i1 } %399, 0
  %402 = icmp slt i33 %401, 0
  %403 = or i1 %400, %402
  br i1 %403, label %404, label %405, !prof !3

404:                                              ; preds = %395
  tail call void @llvm.trap() #9
  unreachable

405:                                              ; preds = %395
  %406 = trunc i33 %401 to i32
  store i32 %406, i32* %396, align 4
  br label %407

407:                                              ; preds = %405, %390, %384
  %408 = load %"class.WTF::AtomicString"*, %"class.WTF::AtomicString"** @_ZN5blink16event_type_names18kGotpointercaptureE, align 8
  %409 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %408, i64 0, i32 0, i32 0, i32 0
  %410 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %409, align 8
  %411 = getelementptr inbounds [36 x %"class.WTF::AtomicString"], [36 x %"class.WTF::AtomicString"]* %2, i64 0, i64 17, i32 0, i32 0, i32 0
  store %"class.WTF::StringImpl"* %410, %"class.WTF::StringImpl"** %411, align 8
  %412 = icmp eq %"class.WTF::StringImpl"* %410, null
  br i1 %412, label %430, label %413

413:                                              ; preds = %407
  %414 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %410, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %415 = load atomic i32, i32* %414 monotonic, align 4
  %416 = and i32 %415, 2
  %417 = icmp eq i32 %416, 0
  br i1 %417, label %418, label %430

418:                                              ; preds = %413
  %419 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %410, i64 0, i32 0
  %420 = load i32, i32* %419, align 4
  %421 = zext i32 %420 to i33
  %422 = tail call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %421, i33 1) #9
  %423 = extractvalue { i33, i1 } %422, 1
  %424 = extractvalue { i33, i1 } %422, 0
  %425 = icmp slt i33 %424, 0
  %426 = or i1 %423, %425
  br i1 %426, label %427, label %428, !prof !3

427:                                              ; preds = %418
  tail call void @llvm.trap() #9
  unreachable

428:                                              ; preds = %418
  %429 = trunc i33 %424 to i32
  store i32 %429, i32* %419, align 4
  br label %430

430:                                              ; preds = %428, %413, %407
  %431 = load %"class.WTF::AtomicString"*, %"class.WTF::AtomicString"** @_ZN5blink16event_type_names19kLostpointercaptureE, align 8
  %432 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %431, i64 0, i32 0, i32 0, i32 0
  %433 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %432, align 8
  %434 = getelementptr inbounds [36 x %"class.WTF::AtomicString"], [36 x %"class.WTF::AtomicString"]* %2, i64 0, i64 18, i32 0, i32 0, i32 0
  store %"class.WTF::StringImpl"* %433, %"class.WTF::StringImpl"** %434, align 8
  %435 = icmp eq %"class.WTF::StringImpl"* %433, null
  br i1 %435, label %453, label %436

436:                                              ; preds = %430
  %437 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %433, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %438 = load atomic i32, i32* %437 monotonic, align 4
  %439 = and i32 %438, 2
  %440 = icmp eq i32 %439, 0
  br i1 %440, label %441, label %453

441:                                              ; preds = %436
  %442 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %433, i64 0, i32 0
  %443 = load i32, i32* %442, align 4
  %444 = zext i32 %443 to i33
  %445 = tail call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %444, i33 1) #9
  %446 = extractvalue { i33, i1 } %445, 1
  %447 = extractvalue { i33, i1 } %445, 0
  %448 = icmp slt i33 %447, 0
  %449 = or i1 %446, %448
  br i1 %449, label %450, label %451, !prof !3

450:                                              ; preds = %441
  tail call void @llvm.trap() #9
  unreachable

451:                                              ; preds = %441
  %452 = trunc i33 %447 to i32
  store i32 %452, i32* %442, align 4
  br label %453

453:                                              ; preds = %451, %436, %430
  %454 = load %"class.WTF::AtomicString"*, %"class.WTF::AtomicString"** @_ZN5blink16event_type_names11kTouchstartE, align 8
  %455 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %454, i64 0, i32 0, i32 0, i32 0
  %456 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %455, align 8
  %457 = getelementptr inbounds [36 x %"class.WTF::AtomicString"], [36 x %"class.WTF::AtomicString"]* %2, i64 0, i64 19, i32 0, i32 0, i32 0
  store %"class.WTF::StringImpl"* %456, %"class.WTF::StringImpl"** %457, align 8
  %458 = icmp eq %"class.WTF::StringImpl"* %456, null
  br i1 %458, label %476, label %459

459:                                              ; preds = %453
  %460 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %456, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %461 = load atomic i32, i32* %460 monotonic, align 4
  %462 = and i32 %461, 2
  %463 = icmp eq i32 %462, 0
  br i1 %463, label %464, label %476

464:                                              ; preds = %459
  %465 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %456, i64 0, i32 0
  %466 = load i32, i32* %465, align 4
  %467 = zext i32 %466 to i33
  %468 = tail call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %467, i33 1) #9
  %469 = extractvalue { i33, i1 } %468, 1
  %470 = extractvalue { i33, i1 } %468, 0
  %471 = icmp slt i33 %470, 0
  %472 = or i1 %469, %471
  br i1 %472, label %473, label %474, !prof !3

473:                                              ; preds = %464
  tail call void @llvm.trap() #9
  unreachable

474:                                              ; preds = %464
  %475 = trunc i33 %470 to i32
  store i32 %475, i32* %465, align 4
  br label %476

476:                                              ; preds = %474, %459, %453
  %477 = load %"class.WTF::AtomicString"*, %"class.WTF::AtomicString"** @_ZN5blink16event_type_names9kTouchendE, align 8
  %478 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %477, i64 0, i32 0, i32 0, i32 0
  %479 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %478, align 8
  %480 = getelementptr inbounds [36 x %"class.WTF::AtomicString"], [36 x %"class.WTF::AtomicString"]* %2, i64 0, i64 20, i32 0, i32 0, i32 0
  store %"class.WTF::StringImpl"* %479, %"class.WTF::StringImpl"** %480, align 8
  %481 = icmp eq %"class.WTF::StringImpl"* %479, null
  br i1 %481, label %499, label %482

482:                                              ; preds = %476
  %483 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %479, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %484 = load atomic i32, i32* %483 monotonic, align 4
  %485 = and i32 %484, 2
  %486 = icmp eq i32 %485, 0
  br i1 %486, label %487, label %499

487:                                              ; preds = %482
  %488 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %479, i64 0, i32 0
  %489 = load i32, i32* %488, align 4
  %490 = zext i32 %489 to i33
  %491 = tail call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %490, i33 1) #9
  %492 = extractvalue { i33, i1 } %491, 1
  %493 = extractvalue { i33, i1 } %491, 0
  %494 = icmp slt i33 %493, 0
  %495 = or i1 %492, %494
  br i1 %495, label %496, label %497, !prof !3

496:                                              ; preds = %487
  tail call void @llvm.trap() #9
  unreachable

497:                                              ; preds = %487
  %498 = trunc i33 %493 to i32
  store i32 %498, i32* %488, align 4
  br label %499

499:                                              ; preds = %497, %482, %476
  %500 = load %"class.WTF::AtomicString"*, %"class.WTF::AtomicString"** @_ZN5blink16event_type_names12kTouchcancelE, align 8
  %501 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %500, i64 0, i32 0, i32 0, i32 0
  %502 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %501, align 8
  %503 = getelementptr inbounds [36 x %"class.WTF::AtomicString"], [36 x %"class.WTF::AtomicString"]* %2, i64 0, i64 21, i32 0, i32 0, i32 0
  store %"class.WTF::StringImpl"* %502, %"class.WTF::StringImpl"** %503, align 8
  %504 = icmp eq %"class.WTF::StringImpl"* %502, null
  br i1 %504, label %522, label %505

505:                                              ; preds = %499
  %506 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %502, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %507 = load atomic i32, i32* %506 monotonic, align 4
  %508 = and i32 %507, 2
  %509 = icmp eq i32 %508, 0
  br i1 %509, label %510, label %522

510:                                              ; preds = %505
  %511 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %502, i64 0, i32 0
  %512 = load i32, i32* %511, align 4
  %513 = zext i32 %512 to i33
  %514 = tail call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %513, i33 1) #9
  %515 = extractvalue { i33, i1 } %514, 1
  %516 = extractvalue { i33, i1 } %514, 0
  %517 = icmp slt i33 %516, 0
  %518 = or i1 %515, %517
  br i1 %518, label %519, label %520, !prof !3

519:                                              ; preds = %510
  tail call void @llvm.trap() #9
  unreachable

520:                                              ; preds = %510
  %521 = trunc i33 %516 to i32
  store i32 %521, i32* %511, align 4
  br label %522

522:                                              ; preds = %520, %505, %499
  %523 = load %"class.WTF::AtomicString"*, %"class.WTF::AtomicString"** @_ZN5blink16event_type_names8kKeydownE, align 8
  %524 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %523, i64 0, i32 0, i32 0, i32 0
  %525 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %524, align 8
  %526 = getelementptr inbounds [36 x %"class.WTF::AtomicString"], [36 x %"class.WTF::AtomicString"]* %2, i64 0, i64 22, i32 0, i32 0, i32 0
  store %"class.WTF::StringImpl"* %525, %"class.WTF::StringImpl"** %526, align 8
  %527 = icmp eq %"class.WTF::StringImpl"* %525, null
  br i1 %527, label %545, label %528

528:                                              ; preds = %522
  %529 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %525, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %530 = load atomic i32, i32* %529 monotonic, align 4
  %531 = and i32 %530, 2
  %532 = icmp eq i32 %531, 0
  br i1 %532, label %533, label %545

533:                                              ; preds = %528
  %534 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %525, i64 0, i32 0
  %535 = load i32, i32* %534, align 4
  %536 = zext i32 %535 to i33
  %537 = tail call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %536, i33 1) #9
  %538 = extractvalue { i33, i1 } %537, 1
  %539 = extractvalue { i33, i1 } %537, 0
  %540 = icmp slt i33 %539, 0
  %541 = or i1 %538, %540
  br i1 %541, label %542, label %543, !prof !3

542:                                              ; preds = %533
  tail call void @llvm.trap() #9
  unreachable

543:                                              ; preds = %533
  %544 = trunc i33 %539 to i32
  store i32 %544, i32* %534, align 4
  br label %545

545:                                              ; preds = %543, %528, %522
  %546 = load %"class.WTF::AtomicString"*, %"class.WTF::AtomicString"** @_ZN5blink16event_type_names9kKeypressE, align 8
  %547 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %546, i64 0, i32 0, i32 0, i32 0
  %548 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %547, align 8
  %549 = getelementptr inbounds [36 x %"class.WTF::AtomicString"], [36 x %"class.WTF::AtomicString"]* %2, i64 0, i64 23, i32 0, i32 0, i32 0
  store %"class.WTF::StringImpl"* %548, %"class.WTF::StringImpl"** %549, align 8
  %550 = icmp eq %"class.WTF::StringImpl"* %548, null
  br i1 %550, label %568, label %551

551:                                              ; preds = %545
  %552 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %548, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %553 = load atomic i32, i32* %552 monotonic, align 4
  %554 = and i32 %553, 2
  %555 = icmp eq i32 %554, 0
  br i1 %555, label %556, label %568

556:                                              ; preds = %551
  %557 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %548, i64 0, i32 0
  %558 = load i32, i32* %557, align 4
  %559 = zext i32 %558 to i33
  %560 = tail call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %559, i33 1) #9
  %561 = extractvalue { i33, i1 } %560, 1
  %562 = extractvalue { i33, i1 } %560, 0
  %563 = icmp slt i33 %562, 0
  %564 = or i1 %561, %563
  br i1 %564, label %565, label %566, !prof !3

565:                                              ; preds = %556
  tail call void @llvm.trap() #9
  unreachable

566:                                              ; preds = %556
  %567 = trunc i33 %562 to i32
  store i32 %567, i32* %557, align 4
  br label %568

568:                                              ; preds = %566, %551, %545
  %569 = load %"class.WTF::AtomicString"*, %"class.WTF::AtomicString"** @_ZN5blink16event_type_names6kKeyupE, align 8
  %570 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %569, i64 0, i32 0, i32 0, i32 0
  %571 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %570, align 8
  %572 = getelementptr inbounds [36 x %"class.WTF::AtomicString"], [36 x %"class.WTF::AtomicString"]* %2, i64 0, i64 24, i32 0, i32 0, i32 0
  store %"class.WTF::StringImpl"* %571, %"class.WTF::StringImpl"** %572, align 8
  %573 = icmp eq %"class.WTF::StringImpl"* %571, null
  br i1 %573, label %591, label %574

574:                                              ; preds = %568
  %575 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %571, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %576 = load atomic i32, i32* %575 monotonic, align 4
  %577 = and i32 %576, 2
  %578 = icmp eq i32 %577, 0
  br i1 %578, label %579, label %591

579:                                              ; preds = %574
  %580 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %571, i64 0, i32 0
  %581 = load i32, i32* %580, align 4
  %582 = zext i32 %581 to i33
  %583 = tail call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %582, i33 1) #9
  %584 = extractvalue { i33, i1 } %583, 1
  %585 = extractvalue { i33, i1 } %583, 0
  %586 = icmp slt i33 %585, 0
  %587 = or i1 %584, %586
  br i1 %587, label %588, label %589, !prof !3

588:                                              ; preds = %579
  tail call void @llvm.trap() #9
  unreachable

589:                                              ; preds = %579
  %590 = trunc i33 %585 to i32
  store i32 %590, i32* %580, align 4
  br label %591

591:                                              ; preds = %589, %574, %568
  %592 = load %"class.WTF::AtomicString"*, %"class.WTF::AtomicString"** @_ZN5blink16event_type_names12kBeforeinputE, align 8
  %593 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %592, i64 0, i32 0, i32 0, i32 0
  %594 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %593, align 8
  %595 = getelementptr inbounds [36 x %"class.WTF::AtomicString"], [36 x %"class.WTF::AtomicString"]* %2, i64 0, i64 25, i32 0, i32 0, i32 0
  store %"class.WTF::StringImpl"* %594, %"class.WTF::StringImpl"** %595, align 8
  %596 = icmp eq %"class.WTF::StringImpl"* %594, null
  br i1 %596, label %614, label %597

597:                                              ; preds = %591
  %598 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %594, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %599 = load atomic i32, i32* %598 monotonic, align 4
  %600 = and i32 %599, 2
  %601 = icmp eq i32 %600, 0
  br i1 %601, label %602, label %614

602:                                              ; preds = %597
  %603 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %594, i64 0, i32 0
  %604 = load i32, i32* %603, align 4
  %605 = zext i32 %604 to i33
  %606 = tail call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %605, i33 1) #9
  %607 = extractvalue { i33, i1 } %606, 1
  %608 = extractvalue { i33, i1 } %606, 0
  %609 = icmp slt i33 %608, 0
  %610 = or i1 %607, %609
  br i1 %610, label %611, label %612, !prof !3

611:                                              ; preds = %602
  tail call void @llvm.trap() #9
  unreachable

612:                                              ; preds = %602
  %613 = trunc i33 %608 to i32
  store i32 %613, i32* %603, align 4
  br label %614

614:                                              ; preds = %612, %597, %591
  %615 = load %"class.WTF::AtomicString"*, %"class.WTF::AtomicString"** @_ZN5blink16event_type_names6kInputE, align 8
  %616 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %615, i64 0, i32 0, i32 0, i32 0
  %617 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %616, align 8
  %618 = getelementptr inbounds [36 x %"class.WTF::AtomicString"], [36 x %"class.WTF::AtomicString"]* %2, i64 0, i64 26, i32 0, i32 0, i32 0
  store %"class.WTF::StringImpl"* %617, %"class.WTF::StringImpl"** %618, align 8
  %619 = icmp eq %"class.WTF::StringImpl"* %617, null
  br i1 %619, label %637, label %620

620:                                              ; preds = %614
  %621 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %617, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %622 = load atomic i32, i32* %621 monotonic, align 4
  %623 = and i32 %622, 2
  %624 = icmp eq i32 %623, 0
  br i1 %624, label %625, label %637

625:                                              ; preds = %620
  %626 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %617, i64 0, i32 0
  %627 = load i32, i32* %626, align 4
  %628 = zext i32 %627 to i33
  %629 = tail call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %628, i33 1) #9
  %630 = extractvalue { i33, i1 } %629, 1
  %631 = extractvalue { i33, i1 } %629, 0
  %632 = icmp slt i33 %631, 0
  %633 = or i1 %630, %632
  br i1 %633, label %634, label %635, !prof !3

634:                                              ; preds = %625
  tail call void @llvm.trap() #9
  unreachable

635:                                              ; preds = %625
  %636 = trunc i33 %631 to i32
  store i32 %636, i32* %626, align 4
  br label %637

637:                                              ; preds = %635, %620, %614
  %638 = load %"class.WTF::AtomicString"*, %"class.WTF::AtomicString"** @_ZN5blink16event_type_names17kCompositionstartE, align 8
  %639 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %638, i64 0, i32 0, i32 0, i32 0
  %640 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %639, align 8
  %641 = getelementptr inbounds [36 x %"class.WTF::AtomicString"], [36 x %"class.WTF::AtomicString"]* %2, i64 0, i64 27, i32 0, i32 0, i32 0
  store %"class.WTF::StringImpl"* %640, %"class.WTF::StringImpl"** %641, align 8
  %642 = icmp eq %"class.WTF::StringImpl"* %640, null
  br i1 %642, label %660, label %643

643:                                              ; preds = %637
  %644 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %640, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %645 = load atomic i32, i32* %644 monotonic, align 4
  %646 = and i32 %645, 2
  %647 = icmp eq i32 %646, 0
  br i1 %647, label %648, label %660

648:                                              ; preds = %643
  %649 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %640, i64 0, i32 0
  %650 = load i32, i32* %649, align 4
  %651 = zext i32 %650 to i33
  %652 = tail call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %651, i33 1) #9
  %653 = extractvalue { i33, i1 } %652, 1
  %654 = extractvalue { i33, i1 } %652, 0
  %655 = icmp slt i33 %654, 0
  %656 = or i1 %653, %655
  br i1 %656, label %657, label %658, !prof !3

657:                                              ; preds = %648
  tail call void @llvm.trap() #9
  unreachable

658:                                              ; preds = %648
  %659 = trunc i33 %654 to i32
  store i32 %659, i32* %649, align 4
  br label %660

660:                                              ; preds = %658, %643, %637
  %661 = load %"class.WTF::AtomicString"*, %"class.WTF::AtomicString"** @_ZN5blink16event_type_names18kCompositionupdateE, align 8
  %662 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %661, i64 0, i32 0, i32 0, i32 0
  %663 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %662, align 8
  %664 = getelementptr inbounds [36 x %"class.WTF::AtomicString"], [36 x %"class.WTF::AtomicString"]* %2, i64 0, i64 28, i32 0, i32 0, i32 0
  store %"class.WTF::StringImpl"* %663, %"class.WTF::StringImpl"** %664, align 8
  %665 = icmp eq %"class.WTF::StringImpl"* %663, null
  br i1 %665, label %683, label %666

666:                                              ; preds = %660
  %667 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %663, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %668 = load atomic i32, i32* %667 monotonic, align 4
  %669 = and i32 %668, 2
  %670 = icmp eq i32 %669, 0
  br i1 %670, label %671, label %683

671:                                              ; preds = %666
  %672 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %663, i64 0, i32 0
  %673 = load i32, i32* %672, align 4
  %674 = zext i32 %673 to i33
  %675 = tail call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %674, i33 1) #9
  %676 = extractvalue { i33, i1 } %675, 1
  %677 = extractvalue { i33, i1 } %675, 0
  %678 = icmp slt i33 %677, 0
  %679 = or i1 %676, %678
  br i1 %679, label %680, label %681, !prof !3

680:                                              ; preds = %671
  tail call void @llvm.trap() #9
  unreachable

681:                                              ; preds = %671
  %682 = trunc i33 %677 to i32
  store i32 %682, i32* %672, align 4
  br label %683

683:                                              ; preds = %681, %666, %660
  %684 = load %"class.WTF::AtomicString"*, %"class.WTF::AtomicString"** @_ZN5blink16event_type_names15kCompositionendE, align 8
  %685 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %684, i64 0, i32 0, i32 0, i32 0
  %686 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %685, align 8
  %687 = getelementptr inbounds [36 x %"class.WTF::AtomicString"], [36 x %"class.WTF::AtomicString"]* %2, i64 0, i64 29, i32 0, i32 0, i32 0
  store %"class.WTF::StringImpl"* %686, %"class.WTF::StringImpl"** %687, align 8
  %688 = icmp eq %"class.WTF::StringImpl"* %686, null
  br i1 %688, label %706, label %689

689:                                              ; preds = %683
  %690 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %686, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %691 = load atomic i32, i32* %690 monotonic, align 4
  %692 = and i32 %691, 2
  %693 = icmp eq i32 %692, 0
  br i1 %693, label %694, label %706

694:                                              ; preds = %689
  %695 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %686, i64 0, i32 0
  %696 = load i32, i32* %695, align 4
  %697 = zext i32 %696 to i33
  %698 = tail call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %697, i33 1) #9
  %699 = extractvalue { i33, i1 } %698, 1
  %700 = extractvalue { i33, i1 } %698, 0
  %701 = icmp slt i33 %700, 0
  %702 = or i1 %699, %701
  br i1 %702, label %703, label %704, !prof !3

703:                                              ; preds = %694
  tail call void @llvm.trap() #9
  unreachable

704:                                              ; preds = %694
  %705 = trunc i33 %700 to i32
  store i32 %705, i32* %695, align 4
  br label %706

706:                                              ; preds = %704, %689, %683
  %707 = load %"class.WTF::AtomicString"*, %"class.WTF::AtomicString"** @_ZN5blink16event_type_names10kDragstartE, align 8
  %708 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %707, i64 0, i32 0, i32 0, i32 0
  %709 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %708, align 8
  %710 = getelementptr inbounds [36 x %"class.WTF::AtomicString"], [36 x %"class.WTF::AtomicString"]* %2, i64 0, i64 30, i32 0, i32 0, i32 0
  store %"class.WTF::StringImpl"* %709, %"class.WTF::StringImpl"** %710, align 8
  %711 = icmp eq %"class.WTF::StringImpl"* %709, null
  br i1 %711, label %729, label %712

712:                                              ; preds = %706
  %713 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %709, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %714 = load atomic i32, i32* %713 monotonic, align 4
  %715 = and i32 %714, 2
  %716 = icmp eq i32 %715, 0
  br i1 %716, label %717, label %729

717:                                              ; preds = %712
  %718 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %709, i64 0, i32 0
  %719 = load i32, i32* %718, align 4
  %720 = zext i32 %719 to i33
  %721 = tail call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %720, i33 1) #9
  %722 = extractvalue { i33, i1 } %721, 1
  %723 = extractvalue { i33, i1 } %721, 0
  %724 = icmp slt i33 %723, 0
  %725 = or i1 %722, %724
  br i1 %725, label %726, label %727, !prof !3

726:                                              ; preds = %717
  tail call void @llvm.trap() #9
  unreachable

727:                                              ; preds = %717
  %728 = trunc i33 %723 to i32
  store i32 %728, i32* %718, align 4
  br label %729

729:                                              ; preds = %727, %712, %706
  %730 = load %"class.WTF::AtomicString"*, %"class.WTF::AtomicString"** @_ZN5blink16event_type_names8kDragendE, align 8
  %731 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %730, i64 0, i32 0, i32 0, i32 0
  %732 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %731, align 8
  %733 = getelementptr inbounds [36 x %"class.WTF::AtomicString"], [36 x %"class.WTF::AtomicString"]* %2, i64 0, i64 31, i32 0, i32 0, i32 0
  store %"class.WTF::StringImpl"* %732, %"class.WTF::StringImpl"** %733, align 8
  %734 = icmp eq %"class.WTF::StringImpl"* %732, null
  br i1 %734, label %752, label %735

735:                                              ; preds = %729
  %736 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %732, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %737 = load atomic i32, i32* %736 monotonic, align 4
  %738 = and i32 %737, 2
  %739 = icmp eq i32 %738, 0
  br i1 %739, label %740, label %752

740:                                              ; preds = %735
  %741 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %732, i64 0, i32 0
  %742 = load i32, i32* %741, align 4
  %743 = zext i32 %742 to i33
  %744 = tail call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %743, i33 1) #9
  %745 = extractvalue { i33, i1 } %744, 1
  %746 = extractvalue { i33, i1 } %744, 0
  %747 = icmp slt i33 %746, 0
  %748 = or i1 %745, %747
  br i1 %748, label %749, label %750, !prof !3

749:                                              ; preds = %740
  tail call void @llvm.trap() #9
  unreachable

750:                                              ; preds = %740
  %751 = trunc i33 %746 to i32
  store i32 %751, i32* %741, align 4
  br label %752

752:                                              ; preds = %750, %735, %729
  %753 = load %"class.WTF::AtomicString"*, %"class.WTF::AtomicString"** @_ZN5blink16event_type_names10kDragenterE, align 8
  %754 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %753, i64 0, i32 0, i32 0, i32 0
  %755 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %754, align 8
  %756 = getelementptr inbounds [36 x %"class.WTF::AtomicString"], [36 x %"class.WTF::AtomicString"]* %2, i64 0, i64 32, i32 0, i32 0, i32 0
  store %"class.WTF::StringImpl"* %755, %"class.WTF::StringImpl"** %756, align 8
  %757 = icmp eq %"class.WTF::StringImpl"* %755, null
  br i1 %757, label %775, label %758

758:                                              ; preds = %752
  %759 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %755, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %760 = load atomic i32, i32* %759 monotonic, align 4
  %761 = and i32 %760, 2
  %762 = icmp eq i32 %761, 0
  br i1 %762, label %763, label %775

763:                                              ; preds = %758
  %764 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %755, i64 0, i32 0
  %765 = load i32, i32* %764, align 4
  %766 = zext i32 %765 to i33
  %767 = tail call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %766, i33 1) #9
  %768 = extractvalue { i33, i1 } %767, 1
  %769 = extractvalue { i33, i1 } %767, 0
  %770 = icmp slt i33 %769, 0
  %771 = or i1 %768, %770
  br i1 %771, label %772, label %773, !prof !3

772:                                              ; preds = %763
  tail call void @llvm.trap() #9
  unreachable

773:                                              ; preds = %763
  %774 = trunc i33 %769 to i32
  store i32 %774, i32* %764, align 4
  br label %775

775:                                              ; preds = %773, %758, %752
  %776 = load %"class.WTF::AtomicString"*, %"class.WTF::AtomicString"** @_ZN5blink16event_type_names10kDragleaveE, align 8
  %777 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %776, i64 0, i32 0, i32 0, i32 0
  %778 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %777, align 8
  %779 = getelementptr inbounds [36 x %"class.WTF::AtomicString"], [36 x %"class.WTF::AtomicString"]* %2, i64 0, i64 33, i32 0, i32 0, i32 0
  store %"class.WTF::StringImpl"* %778, %"class.WTF::StringImpl"** %779, align 8
  %780 = icmp eq %"class.WTF::StringImpl"* %778, null
  br i1 %780, label %798, label %781

781:                                              ; preds = %775
  %782 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %778, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %783 = load atomic i32, i32* %782 monotonic, align 4
  %784 = and i32 %783, 2
  %785 = icmp eq i32 %784, 0
  br i1 %785, label %786, label %798

786:                                              ; preds = %781
  %787 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %778, i64 0, i32 0
  %788 = load i32, i32* %787, align 4
  %789 = zext i32 %788 to i33
  %790 = tail call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %789, i33 1) #9
  %791 = extractvalue { i33, i1 } %790, 1
  %792 = extractvalue { i33, i1 } %790, 0
  %793 = icmp slt i33 %792, 0
  %794 = or i1 %791, %793
  br i1 %794, label %795, label %796, !prof !3

795:                                              ; preds = %786
  tail call void @llvm.trap() #9
  unreachable

796:                                              ; preds = %786
  %797 = trunc i33 %792 to i32
  store i32 %797, i32* %787, align 4
  br label %798

798:                                              ; preds = %796, %781, %775
  %799 = load %"class.WTF::AtomicString"*, %"class.WTF::AtomicString"** @_ZN5blink16event_type_names9kDragoverE, align 8
  %800 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %799, i64 0, i32 0, i32 0, i32 0
  %801 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %800, align 8
  %802 = getelementptr inbounds [36 x %"class.WTF::AtomicString"], [36 x %"class.WTF::AtomicString"]* %2, i64 0, i64 34, i32 0, i32 0, i32 0
  store %"class.WTF::StringImpl"* %801, %"class.WTF::StringImpl"** %802, align 8
  %803 = icmp eq %"class.WTF::StringImpl"* %801, null
  br i1 %803, label %821, label %804

804:                                              ; preds = %798
  %805 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %801, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %806 = load atomic i32, i32* %805 monotonic, align 4
  %807 = and i32 %806, 2
  %808 = icmp eq i32 %807, 0
  br i1 %808, label %809, label %821

809:                                              ; preds = %804
  %810 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %801, i64 0, i32 0
  %811 = load i32, i32* %810, align 4
  %812 = zext i32 %811 to i33
  %813 = tail call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %812, i33 1) #9
  %814 = extractvalue { i33, i1 } %813, 1
  %815 = extractvalue { i33, i1 } %813, 0
  %816 = icmp slt i33 %815, 0
  %817 = or i1 %814, %816
  br i1 %817, label %818, label %819, !prof !3

818:                                              ; preds = %809
  tail call void @llvm.trap() #9
  unreachable

819:                                              ; preds = %809
  %820 = trunc i33 %815 to i32
  store i32 %820, i32* %810, align 4
  br label %821

821:                                              ; preds = %819, %804, %798
  %822 = load %"class.WTF::AtomicString"*, %"class.WTF::AtomicString"** @_ZN5blink16event_type_names5kDropE, align 8
  %823 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %822, i64 0, i32 0, i32 0, i32 0
  %824 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %823, align 8
  %825 = getelementptr inbounds [36 x %"class.WTF::AtomicString"], [36 x %"class.WTF::AtomicString"]* %2, i64 0, i64 35, i32 0, i32 0, i32 0
  store %"class.WTF::StringImpl"* %824, %"class.WTF::StringImpl"** %825, align 8
  %826 = icmp eq %"class.WTF::StringImpl"* %824, null
  br i1 %826, label %844, label %827

827:                                              ; preds = %821
  %828 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %824, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %829 = load atomic i32, i32* %828 monotonic, align 4
  %830 = and i32 %829, 2
  %831 = icmp eq i32 %830, 0
  br i1 %831, label %832, label %844

832:                                              ; preds = %827
  %833 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %824, i64 0, i32 0
  %834 = load i32, i32* %833, align 4
  %835 = zext i32 %834 to i33
  %836 = tail call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %835, i33 1) #9
  %837 = extractvalue { i33, i1 } %836, 1
  %838 = extractvalue { i33, i1 } %836, 0
  %839 = icmp slt i33 %838, 0
  %840 = or i1 %837, %839
  br i1 %840, label %841, label %842, !prof !3

841:                                              ; preds = %832
  tail call void @llvm.trap() #9
  unreachable

842:                                              ; preds = %832
  %843 = trunc i33 %838 to i32
  store i32 %843, i32* %833, align 4
  br label %844

844:                                              ; preds = %842, %827, %821
  store %"class.WTF::AtomicString"* null, %"class.WTF::AtomicString"** bitcast (%"class.WTF::StaticSingleton"* @_ZZN5blink11EventCountsC1EvE13s_event_types to %"class.WTF::AtomicString"**), align 8
  store i32 0, i32* bitcast (i8* getelementptr inbounds (%"class.WTF::StaticSingleton", %"class.WTF::StaticSingleton"* @_ZZN5blink11EventCountsC1EvE13s_event_types, i64 0, i32 0, i32 0, i64 8) to i32*), align 8
  %845 = tail call i64 @_ZN3WTF10Partitions23BufferPotentialCapacityEm(i64 288) #9
  %846 = tail call i8* @_ZN3WTF18PartitionAllocator15AllocateBackingEmPKc(i64 %845, i8* getelementptr inbounds ([65 x i8], [65 x i8]* @__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameINS_12AtomicStringEEEPKcv, i64 0, i64 0)) #9
  %847 = ptrtoint i8* %846 to i64
  store atomic i64 %847, i64* bitcast (%"class.WTF::StaticSingleton"* @_ZZN5blink11EventCountsC1EvE13s_event_types to i64*) monotonic, align 8
  %848 = lshr i64 %845, 3
  %849 = trunc i64 %848 to i32
  store i32 %849, i32* bitcast (i8* getelementptr inbounds (%"class.WTF::StaticSingleton", %"class.WTF::StaticSingleton"* @_ZZN5blink11EventCountsC1EvE13s_event_types, i64 0, i32 0, i32 0, i64 8) to i32*), align 8
  %850 = bitcast i8* %846 to %"class.WTF::AtomicString"*
  store i32 36, i32* bitcast (i8* getelementptr inbounds (%"class.WTF::StaticSingleton", %"class.WTF::StaticSingleton"* @_ZZN5blink11EventCountsC1EvE13s_event_types, i64 0, i32 0, i32 0, i64 12) to i32*), align 4
  %851 = getelementptr inbounds [36 x %"class.WTF::AtomicString"], [36 x %"class.WTF::AtomicString"]* %2, i64 0, i64 36
  br label %852

852:                                              ; preds = %876, %844
  %853 = phi %"class.WTF::AtomicString"* [ %877, %876 ], [ %850, %844 ]
  %854 = phi %"class.WTF::AtomicString"* [ %878, %876 ], [ %16, %844 ]
  %855 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %854, i64 0, i32 0, i32 0, i32 0
  %856 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %855, align 8
  %857 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %853, i64 0, i32 0, i32 0, i32 0
  store %"class.WTF::StringImpl"* %856, %"class.WTF::StringImpl"** %857, align 8
  %858 = icmp eq %"class.WTF::StringImpl"* %856, null
  br i1 %858, label %876, label %859

859:                                              ; preds = %852
  %860 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %856, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %861 = load atomic i32, i32* %860 monotonic, align 4
  %862 = and i32 %861, 2
  %863 = icmp eq i32 %862, 0
  br i1 %863, label %864, label %876

864:                                              ; preds = %859
  %865 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %856, i64 0, i32 0
  %866 = load i32, i32* %865, align 4
  %867 = zext i32 %866 to i33
  %868 = call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %867, i33 1) #9
  %869 = extractvalue { i33, i1 } %868, 1
  %870 = extractvalue { i33, i1 } %868, 0
  %871 = icmp slt i33 %870, 0
  %872 = or i1 %869, %871
  br i1 %872, label %873, label %874, !prof !3

873:                                              ; preds = %864
  call void @llvm.trap() #9
  unreachable

874:                                              ; preds = %864
  %875 = trunc i33 %870 to i32
  store i32 %875, i32* %865, align 4
  br label %876

876:                                              ; preds = %874, %859, %852
  %877 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %853, i64 1
  %878 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %854, i64 1
  %879 = icmp eq %"class.WTF::AtomicString"* %878, %851
  br i1 %879, label %880, label %852

880:                                              ; preds = %876, %899
  %881 = phi %"class.WTF::AtomicString"* [ %882, %899 ], [ %851, %876 ]
  %882 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %881, i64 -1
  %883 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %882, i64 0, i32 0, i32 0, i32 0
  %884 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %883, align 8
  %885 = icmp eq %"class.WTF::StringImpl"* %884, null
  br i1 %885, label %899, label %886

886:                                              ; preds = %880
  %887 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %884, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %888 = load atomic i32, i32* %887 monotonic, align 4
  %889 = and i32 %888, 2
  %890 = icmp eq i32 %889, 0
  %891 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %884, i64 0, i32 0
  %892 = load i32, i32* %891, align 4
  br i1 %890, label %893, label %895

893:                                              ; preds = %886
  %894 = add i32 %892, -1
  store i32 %894, i32* %891, align 4
  br label %895

895:                                              ; preds = %893, %886
  %896 = phi i32 [ %894, %893 ], [ %892, %886 ]
  %897 = icmp eq i32 %896, 0
  br i1 %897, label %898, label %899

898:                                              ; preds = %895
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %884) #9
  br label %899

899:                                              ; preds = %898, %895, %880
  %900 = icmp eq %"class.WTF::AtomicString"* %882, %16
  br i1 %900, label %901, label %880

901:                                              ; preds = %899
  call void @llvm.lifetime.end.p0i8(i64 288, i8* nonnull %15) #9
  call void @__cxa_guard_release(i64* nonnull @_ZGVZN5blink11EventCountsC1EvE13s_event_types) #9
  br label %902

902:                                              ; preds = %11, %901, %1
  %903 = load %"class.WTF::AtomicString"*, %"class.WTF::AtomicString"** bitcast (%"class.WTF::StaticSingleton"* @_ZZN5blink11EventCountsC1EvE13s_event_types to %"class.WTF::AtomicString"**), align 8
  %904 = load i32, i32* bitcast (i8* getelementptr inbounds (%"class.WTF::StaticSingleton", %"class.WTF::StaticSingleton"* @_ZZN5blink11EventCountsC1EvE13s_event_types, i64 0, i32 0, i32 0, i64 12) to i32*), align 4
  %905 = zext i32 %904 to i64
  %906 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %903, i64 %905
  %907 = icmp eq i32 %904, 0
  br i1 %907, label %911, label %908

908:                                              ; preds = %902
  %909 = bitcast i32* %3 to i8*
  %910 = getelementptr inbounds %"class.WTF::HashMap", %"class.WTF::HashMap"* %7, i64 0, i32 0
  br label %912

911:                                              ; preds = %912, %902
  ret void

912:                                              ; preds = %908, %912
  %913 = phi %"class.WTF::AtomicString"* [ %903, %908 ], [ %915, %912 ]
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %909) #9
  store i32 0, i32* %3, align 4
  %914 = call { %"struct.WTF::KeyValuePair"*, i8 } @_ZN3WTF9HashTableINS_12AtomicStringENS_12KeyValuePairIS1_jEENS_24KeyValuePairKeyExtractorENS_16AtomicStringHashENS_18HashMapValueTraitsINS_10HashTraitsIS1_EENS7_IjEEEES8_NS_18PartitionAllocatorEE6insertINS_17HashMapTranslatorISA_S5_SB_EERKS1_jEENS_18HashTableAddResultISC_S3_EEOT0_OT1_(%"class.WTF::HashTable"* %910, %"class.WTF::AtomicString"* dereferenceable(8) %913, i32* nonnull dereferenceable(4) %3) #9
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %909) #9
  %915 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %913, i64 1
  %916 = icmp eq %"class.WTF::AtomicString"* %915, %906
  br i1 %916, label %911, label %912
}

; Function Attrs: nofree nounwind
declare i32 @__cxa_guard_acquire(i64*) local_unnamed_addr #2

; Function Attrs: nofree nounwind
declare void @__cxa_guard_release(i64*) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden %"class.blink::Iterable<WTF::AtomicString, unsigned int>::IterationSource"* @_ZN5blink11EventCounts14StartIterationEPNS_11ScriptStateERNS_14ExceptionStateE(%"class.blink::EventCounts"*, %"class.blink::ScriptState"* nocapture readnone, %"class.blink::ExceptionState"* nocapture readnone dereferenceable(72)) unnamed_addr #0 align 2 {
  %4 = tail call i8* @_ZN5blink10ThreadHeap8AllocateINS_8IterableIN3WTF12AtomicStringEjE15IterationSourceEEEPhm(i64 32) #9
  %5 = bitcast i8* %4 to i32 (...)***
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [6 x i8*] }, { [6 x i8*] }* @_ZTVN5blink26EventCountsIterationSourceE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %5, align 8
  %6 = getelementptr inbounds i8, i8* %4, i64 8
  %7 = bitcast i8* %6 to %"class.blink::EventCounts"**
  store %"class.blink::EventCounts"* %0, %"class.blink::EventCounts"** %7, align 8
  %8 = getelementptr inbounds %"class.blink::EventCounts", %"class.blink::EventCounts"* %0, i64 0, i32 2, i32 0, i32 2
  %9 = load i32, i32* %8, align 4
  %10 = icmp eq i32 %9, 0
  %11 = getelementptr inbounds %"class.blink::EventCounts", %"class.blink::EventCounts"* %0, i64 0, i32 2, i32 0, i32 0
  %12 = load %"struct.WTF::KeyValuePair"*, %"struct.WTF::KeyValuePair"** %11, align 8
  %13 = getelementptr inbounds %"class.blink::EventCounts", %"class.blink::EventCounts"* %0, i64 0, i32 2, i32 0, i32 1
  %14 = load i32, i32* %13, align 8
  %15 = zext i32 %14 to i64
  %16 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %12, i64 %15
  br i1 %10, label %26, label %17

17:                                               ; preds = %3
  %18 = icmp eq i32 %14, 0
  br i1 %18, label %26, label %19

19:                                               ; preds = %17, %23
  %20 = phi %"struct.WTF::KeyValuePair"* [ %24, %23 ], [ %12, %17 ]
  %21 = bitcast %"struct.WTF::KeyValuePair"* %20 to i64*
  %22 = load i64, i64* %21, align 8
  switch i64 %22, label %26 [
    i64 -1, label %23
    i64 0, label %23
  ]

23:                                               ; preds = %19, %19
  %24 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %20, i64 1
  %25 = icmp eq %"struct.WTF::KeyValuePair"* %24, %16
  br i1 %25, label %26, label %19

26:                                               ; preds = %19, %23, %3, %17
  %27 = phi %"struct.WTF::KeyValuePair"* [ %16, %3 ], [ %12, %17 ], [ %16, %23 ], [ %20, %19 ]
  %28 = getelementptr inbounds i8, i8* %4, i64 16
  %29 = bitcast i8* %28 to %"struct.WTF::KeyValuePair"**
  store %"struct.WTF::KeyValuePair"* %27, %"struct.WTF::KeyValuePair"** %29, align 8
  %30 = getelementptr inbounds i8, i8* %4, i64 24
  %31 = bitcast i8* %30 to %"struct.WTF::KeyValuePair"**
  store %"struct.WTF::KeyValuePair"* %16, %"struct.WTF::KeyValuePair"** %31, align 8
  %32 = getelementptr inbounds i8, i8* %4, i64 -4
  %33 = bitcast i8* %32 to i16*
  %34 = load atomic i16, i16* %33 monotonic, align 2
  %35 = or i16 %34, 1
  store atomic i16 %35, i16* %33 release, align 2
  %36 = bitcast i8* %4 to %"class.blink::Iterable<WTF::AtomicString, unsigned int>::IterationSource"*
  ret %"class.blink::Iterable<WTF::AtomicString, unsigned int>::IterationSource"* %36
}

; Function Attrs: nounwind ssp uwtable
define hidden %"class.blink::Iterable<WTF::AtomicString, unsigned int>::IterationSource"* @_ZThn16_N5blink11EventCounts14StartIterationEPNS_11ScriptStateERNS_14ExceptionStateE(%"class.blink::EventCounts"*, %"class.blink::ScriptState"* nocapture readnone, %"class.blink::ExceptionState"* nocapture readnone dereferenceable(72)) unnamed_addr #0 align 2 {
  %4 = getelementptr inbounds %"class.blink::EventCounts", %"class.blink::EventCounts"* %0, i64 -1, i32 2, i32 0, i32 1
  %5 = tail call i8* @_ZN5blink10ThreadHeap8AllocateINS_8IterableIN3WTF12AtomicStringEjE15IterationSourceEEEPhm(i64 32) #9
  %6 = bitcast i8* %5 to i32 (...)***
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [6 x i8*] }, { [6 x i8*] }* @_ZTVN5blink26EventCountsIterationSourceE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %6, align 8
  %7 = getelementptr inbounds i8, i8* %5, i64 8
  %8 = bitcast i8* %7 to i32**
  store i32* %4, i32** %8, align 8
  %9 = getelementptr inbounds i32, i32* %4, i64 9
  %10 = load i32, i32* %9, align 4
  %11 = icmp eq i32 %10, 0
  %12 = getelementptr inbounds i32, i32* %4, i64 6
  %13 = bitcast i32* %12 to %"struct.WTF::KeyValuePair"**
  %14 = load %"struct.WTF::KeyValuePair"*, %"struct.WTF::KeyValuePair"** %13, align 8
  %15 = getelementptr inbounds i32, i32* %4, i64 8
  %16 = load i32, i32* %15, align 8
  %17 = zext i32 %16 to i64
  %18 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %14, i64 %17
  br i1 %11, label %28, label %19

19:                                               ; preds = %3
  %20 = icmp eq i32 %16, 0
  br i1 %20, label %28, label %21

21:                                               ; preds = %19, %25
  %22 = phi %"struct.WTF::KeyValuePair"* [ %26, %25 ], [ %14, %19 ]
  %23 = bitcast %"struct.WTF::KeyValuePair"* %22 to i64*
  %24 = load i64, i64* %23, align 8
  switch i64 %24, label %28 [
    i64 -1, label %25
    i64 0, label %25
  ]

25:                                               ; preds = %21, %21
  %26 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %22, i64 1
  %27 = icmp eq %"struct.WTF::KeyValuePair"* %26, %18
  br i1 %27, label %28, label %21

28:                                               ; preds = %21, %25, %3, %19
  %29 = phi %"struct.WTF::KeyValuePair"* [ %18, %3 ], [ %14, %19 ], [ %22, %21 ], [ %18, %25 ]
  %30 = getelementptr inbounds i8, i8* %5, i64 16
  %31 = bitcast i8* %30 to %"struct.WTF::KeyValuePair"**
  store %"struct.WTF::KeyValuePair"* %29, %"struct.WTF::KeyValuePair"** %31, align 8
  %32 = getelementptr inbounds i8, i8* %5, i64 24
  %33 = bitcast i8* %32 to %"struct.WTF::KeyValuePair"**
  store %"struct.WTF::KeyValuePair"* %18, %"struct.WTF::KeyValuePair"** %33, align 8
  %34 = getelementptr inbounds i8, i8* %5, i64 -4
  %35 = bitcast i8* %34 to i16*
  %36 = load atomic i16, i16* %35 monotonic, align 2
  %37 = or i16 %36, 1
  store atomic i16 %37, i16* %35 release, align 2
  %38 = bitcast i8* %5 to %"class.blink::Iterable<WTF::AtomicString, unsigned int>::IterationSource"*
  ret %"class.blink::Iterable<WTF::AtomicString, unsigned int>::IterationSource"* %38
}

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN5blink11EventCounts11GetMapEntryEPNS_11ScriptStateERKN3WTF12AtomicStringERjRNS_14ExceptionStateE(%"class.blink::EventCounts"* nocapture readonly, %"class.blink::ScriptState"* nocapture readnone, %"class.WTF::AtomicString"* nocapture readonly dereferenceable(8), i32* nocapture dereferenceable(4), %"class.blink::ExceptionState"* nocapture readnone dereferenceable(72)) unnamed_addr #0 align 2 {
  %6 = getelementptr inbounds %"class.blink::EventCounts", %"class.blink::EventCounts"* %0, i64 0, i32 2, i32 0, i32 0
  %7 = load %"struct.WTF::KeyValuePair"*, %"struct.WTF::KeyValuePair"** %6, align 8
  %8 = icmp eq %"struct.WTF::KeyValuePair"* %7, null
  %9 = getelementptr inbounds %"class.blink::EventCounts", %"class.blink::EventCounts"* %0, i64 0, i32 2, i32 0, i32 1
  %10 = load i32, i32* %9, align 8
  br i1 %8, label %62, label %11

11:                                               ; preds = %5
  %12 = add i32 %10, -1
  %13 = zext i32 %12 to i64
  %14 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %2, i64 0, i32 0, i32 0, i32 0
  %15 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %14, align 8
  %16 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %15, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %17 = load atomic i32, i32* %16 monotonic, align 4
  %18 = lshr i32 %17, 8
  %19 = and i32 %18, %12
  %20 = zext i32 %19 to i64
  %21 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %7, i64 %20
  %22 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %21, i64 0, i32 0, i32 0, i32 0, i32 0
  %23 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %22, align 8
  %24 = icmp eq %"class.WTF::StringImpl"* %23, null
  br i1 %24, label %62, label %25

25:                                               ; preds = %11
  %26 = xor i32 %18, -1
  %27 = lshr i32 %17, 31
  %28 = add nsw i32 %27, %26
  %29 = shl i32 %28, 12
  %30 = xor i32 %29, %28
  %31 = lshr i32 %30, 7
  %32 = xor i32 %31, %30
  %33 = shl i32 %32, 2
  %34 = xor i32 %33, %32
  %35 = lshr i32 %34, 20
  %36 = xor i32 %35, %34
  %37 = or i32 %36, 1
  %38 = zext i32 %37 to i64
  br label %39

39:                                               ; preds = %49, %25
  %40 = phi %"struct.WTF::KeyValuePair"* [ %21, %25 ], [ %54, %49 ]
  %41 = phi i64 [ %20, %25 ], [ %53, %49 ]
  %42 = phi i64 [ 0, %25 ], [ %51, %49 ]
  %43 = bitcast %"struct.WTF::KeyValuePair"* %40 to i8**
  %44 = load i8*, i8** %43, align 8
  %45 = icmp ne i8* %44, inttoptr (i64 -1 to i8*)
  %46 = bitcast i8* %44 to %"class.WTF::StringImpl"*
  %47 = icmp eq %"class.WTF::StringImpl"* %15, %46
  %48 = and i1 %45, %47
  br i1 %48, label %58, label %49

49:                                               ; preds = %39
  %50 = icmp eq i64 %42, 0
  %51 = select i1 %50, i64 %38, i64 %42
  %52 = add i64 %51, %41
  %53 = and i64 %52, %13
  %54 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %7, i64 %53
  %55 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %54, i64 0, i32 0, i32 0, i32 0, i32 0
  %56 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %55, align 8
  %57 = icmp eq %"class.WTF::StringImpl"* %56, null
  br i1 %57, label %62, label %39

58:                                               ; preds = %39
  %59 = icmp eq %"struct.WTF::KeyValuePair"* %40, null
  br i1 %59, label %62, label %60

60:                                               ; preds = %58
  %61 = zext i32 %10 to i64
  br label %65

62:                                               ; preds = %49, %58, %11, %5
  %63 = zext i32 %10 to i64
  %64 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %7, i64 %63
  br label %65

65:                                               ; preds = %60, %62
  %66 = phi i64 [ %61, %60 ], [ %63, %62 ]
  %67 = phi %"struct.WTF::KeyValuePair"* [ %40, %60 ], [ %64, %62 ]
  %68 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %7, i64 %66
  %69 = icmp eq %"struct.WTF::KeyValuePair"* %67, %68
  br i1 %69, label %73, label %70

70:                                               ; preds = %65
  %71 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %67, i64 0, i32 1
  %72 = load i32, i32* %71, align 8
  store i32 %72, i32* %3, align 4
  br label %73

73:                                               ; preds = %65, %70
  %74 = phi i1 [ true, %70 ], [ false, %65 ]
  ret i1 %74
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden zeroext i1 @_ZThn16_N5blink11EventCounts11GetMapEntryEPNS_11ScriptStateERKN3WTF12AtomicStringERjRNS_14ExceptionStateE(%"class.blink::EventCounts"* nocapture readonly, %"class.blink::ScriptState"* nocapture readnone, %"class.WTF::AtomicString"* nocapture readonly dereferenceable(8), i32* nocapture dereferenceable(4), %"class.blink::ExceptionState"* nocapture readnone dereferenceable(72)) unnamed_addr #3 align 2 {
  %6 = getelementptr inbounds %"class.blink::EventCounts", %"class.blink::EventCounts"* %0, i64 -1, i32 2, i32 0, i32 1
  %7 = getelementptr inbounds i32, i32* %6, i64 6
  %8 = bitcast i32* %7 to %"struct.WTF::KeyValuePair"**
  %9 = load %"struct.WTF::KeyValuePair"*, %"struct.WTF::KeyValuePair"** %8, align 8
  %10 = icmp eq %"struct.WTF::KeyValuePair"* %9, null
  %11 = getelementptr inbounds i32, i32* %6, i64 8
  %12 = load i32, i32* %11, align 8
  br i1 %10, label %64, label %13

13:                                               ; preds = %5
  %14 = add i32 %12, -1
  %15 = zext i32 %14 to i64
  %16 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %2, i64 0, i32 0, i32 0, i32 0
  %17 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %16, align 8
  %18 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %17, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %19 = load atomic i32, i32* %18 monotonic, align 4
  %20 = lshr i32 %19, 8
  %21 = and i32 %20, %14
  %22 = zext i32 %21 to i64
  %23 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %9, i64 %22
  %24 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %23, i64 0, i32 0, i32 0, i32 0, i32 0
  %25 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %24, align 8
  %26 = icmp eq %"class.WTF::StringImpl"* %25, null
  br i1 %26, label %64, label %27

27:                                               ; preds = %13
  %28 = xor i32 %20, -1
  %29 = lshr i32 %19, 31
  %30 = add nsw i32 %29, %28
  %31 = shl i32 %30, 12
  %32 = xor i32 %31, %30
  %33 = lshr i32 %32, 7
  %34 = xor i32 %33, %32
  %35 = shl i32 %34, 2
  %36 = xor i32 %35, %34
  %37 = lshr i32 %36, 20
  %38 = xor i32 %37, %36
  %39 = or i32 %38, 1
  %40 = zext i32 %39 to i64
  br label %41

41:                                               ; preds = %51, %27
  %42 = phi %"struct.WTF::KeyValuePair"* [ %23, %27 ], [ %56, %51 ]
  %43 = phi i64 [ %22, %27 ], [ %55, %51 ]
  %44 = phi i64 [ 0, %27 ], [ %53, %51 ]
  %45 = bitcast %"struct.WTF::KeyValuePair"* %42 to i8**
  %46 = load i8*, i8** %45, align 8
  %47 = icmp ne i8* %46, inttoptr (i64 -1 to i8*)
  %48 = bitcast i8* %46 to %"class.WTF::StringImpl"*
  %49 = icmp eq %"class.WTF::StringImpl"* %17, %48
  %50 = and i1 %47, %49
  br i1 %50, label %60, label %51

51:                                               ; preds = %41
  %52 = icmp eq i64 %44, 0
  %53 = select i1 %52, i64 %40, i64 %44
  %54 = add i64 %53, %43
  %55 = and i64 %54, %15
  %56 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %9, i64 %55
  %57 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %56, i64 0, i32 0, i32 0, i32 0, i32 0
  %58 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %57, align 8
  %59 = icmp eq %"class.WTF::StringImpl"* %58, null
  br i1 %59, label %64, label %41

60:                                               ; preds = %41
  %61 = icmp eq %"struct.WTF::KeyValuePair"* %42, null
  br i1 %61, label %64, label %62

62:                                               ; preds = %60
  %63 = zext i32 %12 to i64
  br label %67

64:                                               ; preds = %51, %60, %13, %5
  %65 = zext i32 %12 to i64
  %66 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %9, i64 %65
  br label %67

67:                                               ; preds = %64, %62
  %68 = phi i64 [ %63, %62 ], [ %65, %64 ]
  %69 = phi %"struct.WTF::KeyValuePair"* [ %42, %62 ], [ %66, %64 ]
  %70 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %9, i64 %68
  %71 = icmp eq %"struct.WTF::KeyValuePair"* %69, %70
  br i1 %71, label %75, label %72

72:                                               ; preds = %67
  %73 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %69, i64 0, i32 1
  %74 = load i32, i32* %73, align 8
  store i32 %74, i32* %3, align 4
  br label %75

75:                                               ; preds = %67, %72
  %76 = phi i1 [ true, %72 ], [ false, %67 ]
  ret i1 %76
}

declare i8* @_ZNK5blink15ScriptWrappable18NameInHeapSnapshotEv(%"class.blink::ScriptWrappable"*) unnamed_addr #4

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZN5blink11EventCountsD2Ev(%"class.blink::EventCounts"*) unnamed_addr #5 comdat align 2 {
  %2 = getelementptr inbounds %"class.blink::EventCounts", %"class.blink::EventCounts"* %0, i64 0, i32 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [13 x i8*], [4 x i8*] }, { [13 x i8*], [4 x i8*] }* @_ZTVN5blink11EventCountsE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8
  %3 = getelementptr inbounds %"class.blink::EventCounts", %"class.blink::EventCounts"* %0, i64 0, i32 1, i32 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [13 x i8*], [4 x i8*] }, { [13 x i8*], [4 x i8*] }* @_ZTVN5blink11EventCountsE, i64 0, inrange i32 1, i64 2) to i32 (...)**), i32 (...)*** %3, align 8
  %4 = getelementptr inbounds %"class.blink::EventCounts", %"class.blink::EventCounts"* %0, i64 0, i32 2, i32 0, i32 0
  %5 = load %"struct.WTF::KeyValuePair"*, %"struct.WTF::KeyValuePair"** %4, align 8
  %6 = icmp eq %"struct.WTF::KeyValuePair"* %5, null
  br i1 %6, label %39, label %7, !prof !4

7:                                                ; preds = %1
  %8 = getelementptr inbounds %"class.blink::EventCounts", %"class.blink::EventCounts"* %0, i64 0, i32 2, i32 0, i32 1
  %9 = load i32, i32* %8, align 8
  %10 = icmp eq i32 %9, 0
  br i1 %10, label %37, label %11

11:                                               ; preds = %7
  %12 = zext i32 %9 to i64
  br label %13

13:                                               ; preds = %34, %11
  %14 = phi i64 [ 0, %11 ], [ %35, %34 ]
  %15 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %5, i64 %14
  %16 = bitcast %"struct.WTF::KeyValuePair"* %15 to i8**
  %17 = load i8*, i8** %16, align 8
  %18 = bitcast i8* %17 to %"class.WTF::StringImpl"*
  %19 = ptrtoint i8* %17 to i64
  switch i64 %19, label %20 [
    i64 -1, label %34
    i64 0, label %34
  ]

20:                                               ; preds = %13
  %21 = getelementptr inbounds i8, i8* %17, i64 8
  %22 = bitcast i8* %21 to i32*
  %23 = load atomic i32, i32* %22 monotonic, align 4
  %24 = and i32 %23, 2
  %25 = icmp eq i32 %24, 0
  %26 = bitcast i8* %17 to i32*
  %27 = load i32, i32* %26, align 4
  br i1 %25, label %28, label %30

28:                                               ; preds = %20
  %29 = add i32 %27, -1
  store i32 %29, i32* %26, align 4
  br label %30

30:                                               ; preds = %28, %20
  %31 = phi i32 [ %29, %28 ], [ %27, %20 ]
  %32 = icmp eq i32 %31, 0
  br i1 %32, label %33, label %34

33:                                               ; preds = %30
  tail call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %18) #9
  br label %34

34:                                               ; preds = %33, %30, %13, %13
  %35 = add nuw nsw i64 %14, 1
  %36 = icmp eq i64 %35, %12
  br i1 %36, label %37, label %13

37:                                               ; preds = %34, %7
  %38 = bitcast %"struct.WTF::KeyValuePair"* %5 to i8*
  tail call void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8* nonnull %38) #9
  store %"struct.WTF::KeyValuePair"* null, %"struct.WTF::KeyValuePair"** %4, align 8
  br label %39

39:                                               ; preds = %1, %37
  ret void
}

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZN5blink11EventCountsD0Ev(%"class.blink::EventCounts"*) unnamed_addr #5 comdat align 2 {
  %2 = getelementptr inbounds %"class.blink::EventCounts", %"class.blink::EventCounts"* %0, i64 0, i32 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [13 x i8*], [4 x i8*] }, { [13 x i8*], [4 x i8*] }* @_ZTVN5blink11EventCountsE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8
  %3 = getelementptr inbounds %"class.blink::EventCounts", %"class.blink::EventCounts"* %0, i64 0, i32 1, i32 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [13 x i8*], [4 x i8*] }, { [13 x i8*], [4 x i8*] }* @_ZTVN5blink11EventCountsE, i64 0, inrange i32 1, i64 2) to i32 (...)**), i32 (...)*** %3, align 8
  %4 = getelementptr inbounds %"class.blink::EventCounts", %"class.blink::EventCounts"* %0, i64 0, i32 2, i32 0, i32 0
  %5 = load %"struct.WTF::KeyValuePair"*, %"struct.WTF::KeyValuePair"** %4, align 8
  %6 = icmp eq %"struct.WTF::KeyValuePair"* %5, null
  br i1 %6, label %39, label %7, !prof !4

7:                                                ; preds = %1
  %8 = getelementptr inbounds %"class.blink::EventCounts", %"class.blink::EventCounts"* %0, i64 0, i32 2, i32 0, i32 1
  %9 = load i32, i32* %8, align 8
  %10 = icmp eq i32 %9, 0
  br i1 %10, label %37, label %11

11:                                               ; preds = %7
  %12 = zext i32 %9 to i64
  br label %13

13:                                               ; preds = %34, %11
  %14 = phi i64 [ 0, %11 ], [ %35, %34 ]
  %15 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %5, i64 %14
  %16 = bitcast %"struct.WTF::KeyValuePair"* %15 to i8**
  %17 = load i8*, i8** %16, align 8
  %18 = bitcast i8* %17 to %"class.WTF::StringImpl"*
  %19 = ptrtoint i8* %17 to i64
  switch i64 %19, label %20 [
    i64 -1, label %34
    i64 0, label %34
  ]

20:                                               ; preds = %13
  %21 = getelementptr inbounds i8, i8* %17, i64 8
  %22 = bitcast i8* %21 to i32*
  %23 = load atomic i32, i32* %22 monotonic, align 4
  %24 = and i32 %23, 2
  %25 = icmp eq i32 %24, 0
  %26 = bitcast i8* %17 to i32*
  %27 = load i32, i32* %26, align 4
  br i1 %25, label %28, label %30

28:                                               ; preds = %20
  %29 = add i32 %27, -1
  store i32 %29, i32* %26, align 4
  br label %30

30:                                               ; preds = %28, %20
  %31 = phi i32 [ %29, %28 ], [ %27, %20 ]
  %32 = icmp eq i32 %31, 0
  br i1 %32, label %33, label %34

33:                                               ; preds = %30
  tail call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %18) #9
  br label %34

34:                                               ; preds = %33, %30, %13, %13
  %35 = add nuw nsw i64 %14, 1
  %36 = icmp eq i64 %35, %12
  br i1 %36, label %37, label %13

37:                                               ; preds = %34, %7
  %38 = bitcast %"struct.WTF::KeyValuePair"* %5 to i8*
  tail call void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8* nonnull %38) #9
  store %"struct.WTF::KeyValuePair"* null, %"struct.WTF::KeyValuePair"** %4, align 8
  br label %39

39:                                               ; preds = %1, %37
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZNK5blink15ScriptWrappable18HasPendingActivityEv(%"class.blink::ScriptWrappable"*) unnamed_addr #0 comdat align 2 {
  ret i1 false
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZNK5blink15ScriptWrappable17HasEventListenersEv(%"class.blink::ScriptWrappable"*) unnamed_addr #0 comdat align 2 {
  ret i1 false
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNK5blink11EventCounts5TraceEPNS_7VisitorE(%"class.blink::EventCounts"*, %"class.blink::Visitor"*) unnamed_addr #0 comdat align 2 {
  %3 = getelementptr inbounds %"class.blink::EventCounts", %"class.blink::EventCounts"* %0, i64 0, i32 0
  tail call void @_ZNK5blink15ScriptWrappable5TraceEPNS_7VisitorE(%"class.blink::ScriptWrappable"* %3, %"class.blink::Visitor"* %1) #9
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden %"struct.blink::WrapperTypeInfo"* @_ZNK5blink11EventCounts18GetWrapperTypeInfoEv(%"class.blink::EventCounts"*) unnamed_addr #0 comdat align 2 {
  %2 = load %"struct.blink::WrapperTypeInfo"*, %"struct.blink::WrapperTypeInfo"** @_ZN5blink11EventCounts18wrapper_type_info_E, align 8
  ret %"struct.blink::WrapperTypeInfo"* %2
}

declare %"class.v8::Value"* @_ZN5blink15ScriptWrappable4WrapEPNS_11ScriptStateE(%"class.blink::ScriptWrappable"*, %"class.blink::ScriptState"*) unnamed_addr #4

declare %"class.v8::Object"* @_ZN5blink15ScriptWrappable20AssociateWithWrapperEPN2v87IsolateEPKNS_15WrapperTypeInfoENS1_5LocalINS1_6ObjectEEE(%"class.blink::ScriptWrappable"*, %"class.v8::Isolate"*, %"struct.blink::WrapperTypeInfo"*, %"class.v8::Object"*) unnamed_addr #4

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

declare void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"*) local_unnamed_addr #4

declare void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8*) local_unnamed_addr #4

declare void @_ZNK5blink15ScriptWrappable5TraceEPNS_7VisitorE(%"class.blink::ScriptWrappable"*, %"class.blink::Visitor"*) unnamed_addr #4

; Function Attrs: nounwind readnone speculatable
declare { i33, i1 } @llvm.sadd.with.overflow.i33(i33, i33) #6

; Function Attrs: cold noreturn nounwind
declare void @llvm.trap() #7

declare void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* sret, i8*, i32, %"class.logging::CheckOpResult"*) local_unnamed_addr #4

declare dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"*) local_unnamed_addr #4

; Function Attrs: nounwind
declare void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"*) unnamed_addr #8

declare i64 @_ZN3WTF10Partitions23BufferPotentialCapacityEm(i64) local_unnamed_addr #4

declare i8* @_ZN7logging15CheckOpValueStrEm(i64) local_unnamed_addr #4

declare void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"*, i8*, i8*, i8*) unnamed_addr #4

declare i8* @_ZN3WTF18PartitionAllocator15AllocateBackingEmPKc(i64, i8*) local_unnamed_addr #4

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden { %"struct.WTF::KeyValuePair"*, i8 } @_ZN3WTF9HashTableINS_12AtomicStringENS_12KeyValuePairIS1_jEENS_24KeyValuePairKeyExtractorENS_16AtomicStringHashENS_18HashMapValueTraitsINS_10HashTraitsIS1_EENS7_IjEEEES8_NS_18PartitionAllocatorEE6insertINS_17HashMapTranslatorISA_S5_SB_EERKS1_jEENS_18HashTableAddResultISC_S3_EEOT0_OT1_(%"class.WTF::HashTable"*, %"class.WTF::AtomicString"* dereferenceable(8), i32* dereferenceable(4)) local_unnamed_addr #0 comdat align 2 {
  %4 = getelementptr inbounds %"class.WTF::HashTable", %"class.WTF::HashTable"* %0, i64 0, i32 0
  %5 = load %"struct.WTF::KeyValuePair"*, %"struct.WTF::KeyValuePair"** %4, align 8
  %6 = icmp eq %"struct.WTF::KeyValuePair"* %5, null
  br i1 %6, label %7, label %10

7:                                                ; preds = %3
  %8 = tail call %"struct.WTF::KeyValuePair"* @_ZN3WTF9HashTableINS_12AtomicStringENS_12KeyValuePairIS1_jEENS_24KeyValuePairKeyExtractorENS_16AtomicStringHashENS_18HashMapValueTraitsINS_10HashTraitsIS1_EENS7_IjEEEES8_NS_18PartitionAllocatorEE6ExpandEPS3_(%"class.WTF::HashTable"* %0, %"struct.WTF::KeyValuePair"* null)
  %9 = load %"struct.WTF::KeyValuePair"*, %"struct.WTF::KeyValuePair"** %4, align 8
  br label %10

10:                                               ; preds = %3, %7
  %11 = phi %"struct.WTF::KeyValuePair"* [ %5, %3 ], [ %9, %7 ]
  %12 = getelementptr inbounds %"class.WTF::HashTable", %"class.WTF::HashTable"* %0, i64 0, i32 1
  %13 = load i32, i32* %12, align 8
  %14 = add i32 %13, -1
  %15 = zext i32 %14 to i64
  %16 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %1, i64 0, i32 0, i32 0, i32 0
  %17 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %16, align 8
  %18 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %17, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %19 = load atomic i32, i32* %18 monotonic, align 4
  %20 = lshr i32 %19, 8
  %21 = and i32 %20, %14
  %22 = zext i32 %21 to i64
  %23 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %11, i64 %22
  %24 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %23, i64 0, i32 0, i32 0, i32 0, i32 0
  %25 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %24, align 8
  %26 = icmp eq %"class.WTF::StringImpl"* %25, null
  br i1 %26, label %73, label %27

27:                                               ; preds = %10
  %28 = xor i32 %20, -1
  %29 = lshr i32 %19, 31
  %30 = add nsw i32 %29, %28
  %31 = shl i32 %30, 12
  %32 = xor i32 %31, %30
  %33 = lshr i32 %32, 7
  %34 = xor i32 %33, %32
  %35 = shl i32 %34, 2
  %36 = xor i32 %35, %34
  %37 = lshr i32 %36, 20
  %38 = xor i32 %37, %36
  %39 = or i32 %38, 1
  %40 = zext i32 %39 to i64
  br label %41

41:                                               ; preds = %27, %52
  %42 = phi %"struct.WTF::KeyValuePair"* [ %23, %27 ], [ %58, %52 ]
  %43 = phi %"struct.WTF::KeyValuePair"* [ null, %27 ], [ %53, %52 ]
  %44 = phi i64 [ %22, %27 ], [ %57, %52 ]
  %45 = phi i64 [ 0, %27 ], [ %55, %52 ]
  %46 = bitcast %"struct.WTF::KeyValuePair"* %42 to i8**
  %47 = load i8*, i8** %46, align 8
  %48 = icmp eq i8* %47, inttoptr (i64 -1 to i8*)
  br i1 %48, label %52, label %49

49:                                               ; preds = %41
  %50 = bitcast i8* %47 to %"class.WTF::StringImpl"*
  %51 = icmp eq %"class.WTF::StringImpl"* %17, %50
  br i1 %51, label %127, label %52

52:                                               ; preds = %41, %49
  %53 = phi %"struct.WTF::KeyValuePair"* [ %43, %49 ], [ %42, %41 ]
  %54 = icmp eq i64 %45, 0
  %55 = select i1 %54, i64 %40, i64 %45
  %56 = add i64 %55, %44
  %57 = and i64 %56, %15
  %58 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %11, i64 %57
  %59 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %58, i64 0, i32 0, i32 0, i32 0, i32 0
  %60 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %59, align 8
  %61 = icmp eq %"class.WTF::StringImpl"* %60, null
  br i1 %61, label %62, label %41

62:                                               ; preds = %52
  %63 = icmp eq %"struct.WTF::KeyValuePair"* %53, null
  br i1 %63, label %73, label %64

64:                                               ; preds = %62
  %65 = bitcast %"struct.WTF::KeyValuePair"* %53 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %65, i8 0, i64 16, i1 false) #9
  %66 = getelementptr inbounds %"class.WTF::HashTable", %"class.WTF::HashTable"* %0, i64 0, i32 3
  %67 = load i32, i32* %66, align 8
  %68 = add i32 %67, 2147483647
  %69 = and i32 %68, 2147483647
  %70 = and i32 %67, -2147483648
  %71 = or i32 %69, %70
  store i32 %71, i32* %66, align 8
  %72 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %16, align 8
  br label %73

73:                                               ; preds = %10, %62, %64
  %74 = phi %"class.WTF::StringImpl"* [ %72, %64 ], [ %17, %62 ], [ %17, %10 ]
  %75 = phi %"struct.WTF::KeyValuePair"* [ %53, %64 ], [ %58, %62 ], [ %23, %10 ]
  %76 = icmp eq %"class.WTF::StringImpl"* %74, null
  br i1 %76, label %94, label %77

77:                                               ; preds = %73
  %78 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %74, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %79 = load atomic i32, i32* %78 monotonic, align 4
  %80 = and i32 %79, 2
  %81 = icmp eq i32 %80, 0
  br i1 %81, label %82, label %94

82:                                               ; preds = %77
  %83 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %74, i64 0, i32 0
  %84 = load i32, i32* %83, align 4
  %85 = zext i32 %84 to i33
  %86 = tail call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %85, i33 1) #9
  %87 = extractvalue { i33, i1 } %86, 1
  %88 = extractvalue { i33, i1 } %86, 0
  %89 = icmp slt i33 %88, 0
  %90 = or i1 %87, %89
  br i1 %90, label %91, label %92, !prof !3

91:                                               ; preds = %82
  tail call void @llvm.trap() #9
  unreachable

92:                                               ; preds = %82
  %93 = trunc i33 %88 to i32
  store i32 %93, i32* %83, align 4
  br label %94

94:                                               ; preds = %92, %77, %73
  %95 = ptrtoint %"class.WTF::StringImpl"* %74 to i64
  %96 = bitcast %"struct.WTF::KeyValuePair"* %75 to i64*
  %97 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %75, i64 0, i32 0, i32 0, i32 0, i32 0
  %98 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %97, align 8
  store i64 %95, i64* %96, align 8
  %99 = icmp eq %"class.WTF::StringImpl"* %98, null
  br i1 %99, label %113, label %100

100:                                              ; preds = %94
  %101 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %98, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %102 = load atomic i32, i32* %101 monotonic, align 4
  %103 = and i32 %102, 2
  %104 = icmp eq i32 %103, 0
  %105 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %98, i64 0, i32 0
  %106 = load i32, i32* %105, align 4
  br i1 %104, label %107, label %109

107:                                              ; preds = %100
  %108 = add i32 %106, -1
  store i32 %108, i32* %105, align 4
  br label %109

109:                                              ; preds = %107, %100
  %110 = phi i32 [ %108, %107 ], [ %106, %100 ]
  %111 = icmp eq i32 %110, 0
  br i1 %111, label %112, label %113

112:                                              ; preds = %109
  tail call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %98) #9
  br label %113

113:                                              ; preds = %94, %109, %112
  %114 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %75, i64 0, i32 1
  %115 = load i32, i32* %2, align 4
  store i32 %115, i32* %114, align 4
  %116 = getelementptr inbounds %"class.WTF::HashTable", %"class.WTF::HashTable"* %0, i64 0, i32 2
  %117 = load i32, i32* %116, align 4
  %118 = add i32 %117, 1
  store i32 %118, i32* %116, align 4
  %119 = getelementptr inbounds %"class.WTF::HashTable", %"class.WTF::HashTable"* %0, i64 0, i32 3
  %120 = load i32, i32* %119, align 8
  %121 = add i32 %120, %118
  %122 = shl i32 %121, 1
  %123 = load i32, i32* %12, align 8
  %124 = icmp ult i32 %122, %123
  br i1 %124, label %127, label %125

125:                                              ; preds = %113
  %126 = tail call %"struct.WTF::KeyValuePair"* @_ZN3WTF9HashTableINS_12AtomicStringENS_12KeyValuePairIS1_jEENS_24KeyValuePairKeyExtractorENS_16AtomicStringHashENS_18HashMapValueTraitsINS_10HashTraitsIS1_EENS7_IjEEEES8_NS_18PartitionAllocatorEE6ExpandEPS3_(%"class.WTF::HashTable"* %0, %"struct.WTF::KeyValuePair"* %75)
  br label %127

127:                                              ; preds = %49, %113, %125
  %128 = phi i8 [ 1, %113 ], [ 1, %125 ], [ 0, %49 ]
  %129 = phi %"struct.WTF::KeyValuePair"* [ %75, %113 ], [ %126, %125 ], [ %42, %49 ]
  %130 = insertvalue { %"struct.WTF::KeyValuePair"*, i8 } undef, %"struct.WTF::KeyValuePair"* %129, 0
  %131 = insertvalue { %"struct.WTF::KeyValuePair"*, i8 } %130, i8 %128, 1
  ret { %"struct.WTF::KeyValuePair"*, i8 } %131
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden %"struct.WTF::KeyValuePair"* @_ZN3WTF9HashTableINS_12AtomicStringENS_12KeyValuePairIS1_jEENS_24KeyValuePairKeyExtractorENS_16AtomicStringHashENS_18HashMapValueTraitsINS_10HashTraitsIS1_EENS7_IjEEEES8_NS_18PartitionAllocatorEE6ExpandEPS3_(%"class.WTF::HashTable"*, %"struct.WTF::KeyValuePair"*) local_unnamed_addr #0 comdat align 2 {
  %3 = alloca %"class.logging::CheckOpResult", align 8
  %4 = alloca %"class.logging::CheckOpResult", align 8
  %5 = alloca %"class.logging::CheckError", align 8
  %6 = getelementptr inbounds %"class.WTF::HashTable", %"class.WTF::HashTable"* %0, i64 0, i32 1
  %7 = load i32, i32* %6, align 8
  %8 = icmp eq i32 %7, 0
  br i1 %8, label %31, label %9

9:                                                ; preds = %2
  %10 = getelementptr inbounds %"class.WTF::HashTable", %"class.WTF::HashTable"* %0, i64 0, i32 2
  %11 = load i32, i32* %10, align 4
  %12 = mul i32 %11, 6
  %13 = shl i32 %7, 1
  %14 = icmp ult i32 %12, %13
  br i1 %14, label %31, label %15

15:                                               ; preds = %9
  %16 = bitcast %"class.logging::CheckOpResult"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %16) #9
  %17 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %4, i64 0, i32 0
  store i8* inttoptr (i64 -6148914691236517206 to i8*), i8** %17, align 8
  %18 = bitcast %"class.logging::CheckOpResult"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %18)
  %19 = icmp ugt i32 %13, %7
  br i1 %19, label %20, label %21

20:                                               ; preds = %15
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %18)
  store i8* null, i8** %17, align 8
  br label %30

21:                                               ; preds = %15
  %22 = tail call i8* @_ZN7logging15CheckOpValueStrEj(i32 %13) #9
  %23 = tail call i8* @_ZN7logging15CheckOpValueStrEj(i32 %7) #9
  call void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"* nonnull %3, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.2, i64 0, i64 0), i8* %22, i8* %23) #9
  %24 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %3, i64 0, i32 0
  %25 = load i8*, i8** %24, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %18)
  store i8* %25, i8** %17, align 8
  %26 = icmp eq i8* %25, null
  br i1 %26, label %30, label %27

27:                                               ; preds = %21
  %28 = bitcast %"class.logging::CheckError"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %28) #9
  call void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* nonnull sret %5, i8* getelementptr inbounds ([59 x i8], [59 x i8]* @.str.3, i64 0, i64 0), i32 1783, %"class.logging::CheckOpResult"* nonnull %4) #9
  %29 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %5) #9
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %5) #9
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %28) #9
  br label %30

30:                                               ; preds = %20, %21, %27
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %16) #9
  br label %31

31:                                               ; preds = %9, %2, %30
  %32 = phi i32 [ %13, %30 ], [ 8, %2 ], [ %7, %9 ]
  %33 = zext i32 %32 to i64
  %34 = shl nuw nsw i64 %33, 4
  %35 = call i8* @_ZN3WTF18PartitionAllocator15AllocateBackingEmPKc(i64 %34, i8* getelementptr inbounds ([98 x i8], [98 x i8]* @__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameINS_12KeyValuePairINS_12AtomicStringEjEEEEPKcv, i64 0, i64 0)) #9
  call void @llvm.memset.p0i8.i64(i8* align 1 %35, i8 0, i64 %34, i1 false) #9
  %36 = bitcast i8* %35 to %"struct.WTF::KeyValuePair"*
  %37 = call %"struct.WTF::KeyValuePair"* @_ZN3WTF9HashTableINS_12AtomicStringENS_12KeyValuePairIS1_jEENS_24KeyValuePairKeyExtractorENS_16AtomicStringHashENS_18HashMapValueTraitsINS_10HashTraitsIS1_EENS7_IjEEEES8_NS_18PartitionAllocatorEE8RehashToEPS3_jSD_(%"class.WTF::HashTable"* %0, %"struct.WTF::KeyValuePair"* %36, i32 %32, %"struct.WTF::KeyValuePair"* %1) #9
  ret %"struct.WTF::KeyValuePair"* %37
}

declare i8* @_ZN7logging15CheckOpValueStrEj(i32) local_unnamed_addr #4

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden %"struct.WTF::KeyValuePair"* @_ZN3WTF9HashTableINS_12AtomicStringENS_12KeyValuePairIS1_jEENS_24KeyValuePairKeyExtractorENS_16AtomicStringHashENS_18HashMapValueTraitsINS_10HashTraitsIS1_EENS7_IjEEEES8_NS_18PartitionAllocatorEE8RehashToEPS3_jSD_(%"class.WTF::HashTable"*, %"struct.WTF::KeyValuePair"*, i32, %"struct.WTF::KeyValuePair"*) local_unnamed_addr #0 comdat align 2 {
  %5 = ptrtoint %"struct.WTF::KeyValuePair"* %1 to i64
  %6 = getelementptr inbounds %"class.WTF::HashTable", %"class.WTF::HashTable"* %0, i64 0, i32 1
  %7 = load i32, i32* %6, align 8
  %8 = icmp eq i32 %7, 0
  %9 = getelementptr inbounds %"class.WTF::HashTable", %"class.WTF::HashTable"* %0, i64 0, i32 0
  br i1 %8, label %10, label %13

10:                                               ; preds = %4
  %11 = bitcast %"class.WTF::HashTable"* %0 to i64*
  %12 = load i64, i64* %11, align 8
  br label %20

13:                                               ; preds = %4
  %14 = add i32 %2, -1
  %15 = zext i32 %14 to i64
  %16 = load %"struct.WTF::KeyValuePair"*, %"struct.WTF::KeyValuePair"** %9, align 8
  %17 = ptrtoint %"struct.WTF::KeyValuePair"* %16 to i64
  br label %61

18:                                               ; preds = %160
  %19 = bitcast %"class.WTF::HashTable"* %0 to i64*
  br label %20

20:                                               ; preds = %10, %18
  %21 = phi i64* [ %11, %10 ], [ %19, %18 ]
  %22 = phi i64 [ %12, %10 ], [ %161, %18 ]
  %23 = phi %"struct.WTF::KeyValuePair"* [ null, %10 ], [ %164, %18 ]
  %24 = phi i32 [ 0, %10 ], [ %162, %18 ]
  store atomic i64 %5, i64* %21 monotonic, align 8
  store i32 %2, i32* %6, align 8
  %25 = inttoptr i64 %22 to %"struct.WTF::KeyValuePair"*
  %26 = icmp eq i64 %22, 0
  br i1 %26, label %57, label %27

27:                                               ; preds = %20
  %28 = icmp eq i32 %24, 0
  br i1 %28, label %55, label %29

29:                                               ; preds = %27
  %30 = zext i32 %24 to i64
  br label %31

31:                                               ; preds = %52, %29
  %32 = phi i64 [ 0, %29 ], [ %53, %52 ]
  %33 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %25, i64 %32
  %34 = bitcast %"struct.WTF::KeyValuePair"* %33 to i8**
  %35 = load i8*, i8** %34, align 8
  %36 = bitcast i8* %35 to %"class.WTF::StringImpl"*
  %37 = ptrtoint i8* %35 to i64
  switch i64 %37, label %38 [
    i64 -1, label %52
    i64 0, label %52
  ]

38:                                               ; preds = %31
  %39 = getelementptr inbounds i8, i8* %35, i64 8
  %40 = bitcast i8* %39 to i32*
  %41 = load atomic i32, i32* %40 monotonic, align 4
  %42 = and i32 %41, 2
  %43 = icmp eq i32 %42, 0
  %44 = bitcast i8* %35 to i32*
  %45 = load i32, i32* %44, align 4
  br i1 %43, label %46, label %48

46:                                               ; preds = %38
  %47 = add i32 %45, -1
  store i32 %47, i32* %44, align 4
  br label %48

48:                                               ; preds = %46, %38
  %49 = phi i32 [ %47, %46 ], [ %45, %38 ]
  %50 = icmp eq i32 %49, 0
  br i1 %50, label %51, label %52

51:                                               ; preds = %48
  tail call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %36) #9
  br label %52

52:                                               ; preds = %51, %48, %31, %31
  %53 = add nuw nsw i64 %32, 1
  %54 = icmp eq i64 %53, %30
  br i1 %54, label %55, label %31

55:                                               ; preds = %52, %27
  %56 = inttoptr i64 %22 to i8*
  tail call void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8* nonnull %56) #9
  br label %57

57:                                               ; preds = %20, %55
  %58 = getelementptr inbounds %"class.WTF::HashTable", %"class.WTF::HashTable"* %0, i64 0, i32 3
  %59 = load i32, i32* %58, align 8
  %60 = and i32 %59, -2147483648
  store i32 %60, i32* %58, align 8
  ret %"struct.WTF::KeyValuePair"* %23

61:                                               ; preds = %13, %160
  %62 = phi i64 [ %17, %13 ], [ %161, %160 ]
  %63 = phi i32 [ %7, %13 ], [ %162, %160 ]
  %64 = phi %"struct.WTF::KeyValuePair"* [ %16, %13 ], [ %163, %160 ]
  %65 = phi %"struct.WTF::KeyValuePair"* [ null, %13 ], [ %164, %160 ]
  %66 = phi i32 [ 0, %13 ], [ %165, %160 ]
  %67 = zext i32 %66 to i64
  %68 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %64, i64 %67
  %69 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %68, i64 0, i32 0, i32 0, i32 0, i32 0
  %70 = bitcast %"struct.WTF::KeyValuePair"* %68 to i64*
  %71 = load i64, i64* %70, align 8
  %72 = inttoptr i64 %71 to %"class.WTF::StringImpl"*
  switch i64 %71, label %73 [
    i64 -1, label %160
    i64 0, label %160
  ]

73:                                               ; preds = %61
  %74 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %72, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %75 = load atomic i32, i32* %74 monotonic, align 4
  %76 = lshr i32 %75, 8
  %77 = and i32 %76, %14
  %78 = zext i32 %77 to i64
  %79 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %1, i64 %78
  %80 = ptrtoint %"struct.WTF::KeyValuePair"* %79 to i64
  %81 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %79, i64 0, i32 0, i32 0, i32 0, i32 0
  %82 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %81, align 8
  %83 = icmp eq %"class.WTF::StringImpl"* %82, null
  br i1 %83, label %100, label %84

84:                                               ; preds = %73
  %85 = xor i32 %76, -1
  %86 = lshr i32 %75, 31
  %87 = add nsw i32 %86, %85
  %88 = shl i32 %87, 12
  %89 = xor i32 %88, %87
  %90 = lshr i32 %89, 7
  %91 = xor i32 %90, %89
  %92 = shl i32 %91, 2
  %93 = xor i32 %92, %91
  %94 = lshr i32 %93, 20
  %95 = xor i32 %94, %93
  %96 = or i32 %95, 1
  %97 = zext i32 %96 to i64
  br label %106

98:                                               ; preds = %118
  %99 = ptrtoint %"struct.WTF::KeyValuePair"* %124 to i64
  br label %100

100:                                              ; preds = %98, %73
  %101 = phi i64 [ %80, %73 ], [ %99, %98 ]
  %102 = phi %"struct.WTF::KeyValuePair"* [ null, %73 ], [ %119, %98 ]
  %103 = icmp eq %"struct.WTF::KeyValuePair"* %102, null
  %104 = ptrtoint %"struct.WTF::KeyValuePair"* %102 to i64
  %105 = select i1 %103, i64 %101, i64 %104
  br label %129

106:                                              ; preds = %118, %84
  %107 = phi %"struct.WTF::KeyValuePair"* [ null, %84 ], [ %119, %118 ]
  %108 = phi i64 [ %80, %84 ], [ %125, %118 ]
  %109 = phi %"struct.WTF::KeyValuePair"* [ %79, %84 ], [ %124, %118 ]
  %110 = phi i64 [ %78, %84 ], [ %123, %118 ]
  %111 = phi i64 [ 0, %84 ], [ %121, %118 ]
  %112 = bitcast %"struct.WTF::KeyValuePair"* %109 to i8**
  %113 = load i8*, i8** %112, align 8
  %114 = icmp eq i8* %113, inttoptr (i64 -1 to i8*)
  br i1 %114, label %118, label %115

115:                                              ; preds = %106
  %116 = bitcast i8* %113 to %"class.WTF::StringImpl"*
  %117 = icmp eq %"class.WTF::StringImpl"* %72, %116
  br i1 %117, label %129, label %118

118:                                              ; preds = %115, %106
  %119 = phi %"struct.WTF::KeyValuePair"* [ %107, %115 ], [ %109, %106 ]
  %120 = icmp eq i64 %111, 0
  %121 = select i1 %120, i64 %97, i64 %111
  %122 = add i64 %121, %110
  %123 = and i64 %122, %15
  %124 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %1, i64 %123
  %125 = ptrtoint %"struct.WTF::KeyValuePair"* %124 to i64
  %126 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %124, i64 0, i32 0, i32 0, i32 0, i32 0
  %127 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %126, align 8
  %128 = icmp eq %"class.WTF::StringImpl"* %127, null
  br i1 %128, label %98, label %106

129:                                              ; preds = %115, %100
  %130 = phi i64 [ %105, %100 ], [ %108, %115 ]
  %131 = inttoptr i64 %130 to %"struct.WTF::KeyValuePair"*
  %132 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %131, i64 0, i32 0, i32 0, i32 0, i32 0
  %133 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %132, align 8
  %134 = icmp eq %"class.WTF::StringImpl"* %133, null
  br i1 %134, label %148, label %135

135:                                              ; preds = %129
  %136 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %133, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %137 = load atomic i32, i32* %136 monotonic, align 4
  %138 = and i32 %137, 2
  %139 = icmp eq i32 %138, 0
  %140 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %133, i64 0, i32 0
  %141 = load i32, i32* %140, align 4
  br i1 %139, label %142, label %144

142:                                              ; preds = %135
  %143 = add i32 %141, -1
  store i32 %143, i32* %140, align 4
  br label %144

144:                                              ; preds = %142, %135
  %145 = phi i32 [ %143, %142 ], [ %141, %135 ]
  %146 = icmp eq i32 %145, 0
  br i1 %146, label %147, label %148

147:                                              ; preds = %144
  tail call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %133) #9
  br label %148

148:                                              ; preds = %129, %144, %147
  %149 = load i64, i64* %70, align 8
  %150 = inttoptr i64 %130 to i64*
  store i64 %149, i64* %150, align 8
  store %"class.WTF::StringImpl"* null, %"class.WTF::StringImpl"** %69, align 8
  %151 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %131, i64 0, i32 1
  %152 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %64, i64 %67, i32 1
  %153 = load i32, i32* %152, align 8
  store i32 %153, i32* %151, align 8
  %154 = load %"struct.WTF::KeyValuePair"*, %"struct.WTF::KeyValuePair"** %9, align 8
  %155 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %154, i64 %67
  %156 = icmp eq %"struct.WTF::KeyValuePair"* %155, %3
  %157 = select i1 %156, %"struct.WTF::KeyValuePair"* %131, %"struct.WTF::KeyValuePair"* %65
  %158 = load i32, i32* %6, align 8
  %159 = ptrtoint %"struct.WTF::KeyValuePair"* %154 to i64
  br label %160

160:                                              ; preds = %61, %61, %148
  %161 = phi i64 [ %62, %61 ], [ %159, %148 ], [ %62, %61 ]
  %162 = phi i32 [ %63, %61 ], [ %158, %148 ], [ %63, %61 ]
  %163 = phi %"struct.WTF::KeyValuePair"* [ %64, %61 ], [ %154, %148 ], [ %64, %61 ]
  %164 = phi %"struct.WTF::KeyValuePair"* [ %65, %61 ], [ %157, %148 ], [ %65, %61 ]
  %165 = add i32 %66, 1
  %166 = icmp eq i32 %165, %162
  br i1 %166, label %18, label %61
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i8* @_ZN5blink10ThreadHeap8AllocateINS_8IterableIN3WTF12AtomicStringEjE15IterationSourceEEEPhm(i64) local_unnamed_addr #0 comdat align 2 {
  %2 = alloca %"class.logging::CheckOpResult", align 8
  %3 = alloca %"class.logging::CheckOpResult", align 8
  %4 = alloca %"class.logging::CheckError", align 8
  %5 = load %"class.WTF::ThreadSpecific"*, %"class.WTF::ThreadSpecific"** @_ZN5blink11ThreadState16thread_specific_E, align 8
  %6 = getelementptr inbounds %"class.WTF::ThreadSpecific", %"class.WTF::ThreadSpecific"* %5, i64 0, i32 1
  %7 = tail call i8* @_ZNK4base18ThreadLocalStorage4Slot3GetEv(%"class.base::ThreadLocalStorage::Slot"* %6) #9
  %8 = icmp eq i8* %7, null
  br i1 %8, label %9, label %11, !prof !3

9:                                                ; preds = %1
  %10 = tail call i8* @_ZN3WTF10Partitions16FastZeroedMallocEmPKc(i64 8, i8* getelementptr inbounds ([68 x i8], [68 x i8]* @__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameIPN5blink11ThreadStateEEEPKcv, i64 0, i64 0)) #9
  tail call void @_ZN4base18ThreadLocalStorage4Slot3SetEPv(%"class.base::ThreadLocalStorage::Slot"* %6, i8* %10) #9
  br label %11

11:                                               ; preds = %1, %9
  %12 = phi i8* [ %10, %9 ], [ %7, %1 ]
  %13 = bitcast i8* %12 to %"class.blink::ThreadState"**
  %14 = load %"class.blink::ThreadState"*, %"class.blink::ThreadState"** %13, align 8
  %15 = getelementptr inbounds %"class.blink::ThreadState", %"class.blink::ThreadState"* %14, i64 0, i32 0, i32 0, i32 0, i32 0
  %16 = load %"class.blink::ThreadHeap"*, %"class.blink::ThreadHeap"** %15, align 8
  %17 = icmp ult i64 %0, 64
  %18 = icmp ugt i64 %0, 31
  %19 = zext i1 %18 to i64
  %20 = icmp ult i64 %0, 128
  %21 = select i1 %20, i64 2, i64 3
  %22 = select i1 %17, i64 %19, i64 %21
  %23 = load atomic i32, i32* getelementptr inbounds ({ { i32 } }, { { i32 } }* @_ZZN5blink11GCInfoTraitINS_8IterableIN3WTF12AtomicStringEjE15IterationSourceEE5IndexEvE13gc_info_index, i64 0, i32 0, i32 0) acquire, align 4
  %24 = icmp eq i32 %23, 0
  br i1 %24, label %25, label %28

25:                                               ; preds = %11
  %26 = load %"class.blink::GCInfoTable"*, %"class.blink::GCInfoTable"** @_ZN5blink11GCInfoTable13global_table_E, align 8
  %27 = tail call i32 @_ZN5blink11GCInfoTable17EnsureGCInfoIndexEPKNS_6GCInfoEPNSt3__16atomicIjEE(%"class.blink::GCInfoTable"* %26, %"struct.blink::GCInfo"* nonnull @_ZZN5blink11GCInfoTraitINS_8IterableIN3WTF12AtomicStringEjE15IterationSourceEE5IndexEvE7kGcInfo, %"struct.std::__1::atomic"* bitcast ({ { i32 } }* @_ZZN5blink11GCInfoTraitINS_8IterableIN3WTF12AtomicStringEjE15IterationSourceEE5IndexEvE13gc_info_index to %"struct.std::__1::atomic"*)) #9
  br label %28

28:                                               ; preds = %11, %25
  %29 = phi i32 [ %23, %11 ], [ %27, %25 ]
  %30 = getelementptr inbounds %"class.blink::ThreadHeap", %"class.blink::ThreadHeap"* %16, i64 0, i32 19, i64 %22
  %31 = bitcast %"class.blink::BaseArena"** %30 to %"class.blink::NormalPageArena"**
  %32 = load %"class.blink::NormalPageArena"*, %"class.blink::NormalPageArena"** %31, align 8
  %33 = bitcast %"class.logging::CheckOpResult"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %33) #9
  %34 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %3, i64 0, i32 0
  store i8* inttoptr (i64 -6148914691236517206 to i8*), i8** %34, align 8
  %35 = bitcast %"class.logging::CheckOpResult"* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %35) #9
  %36 = icmp ult i64 %0, -8
  br i1 %36, label %37, label %38

37:                                               ; preds = %28
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %35) #9
  store i8* null, i8** %34, align 8
  br label %48

38:                                               ; preds = %28
  %39 = add nsw i64 %0, 8
  %40 = tail call i8* @_ZN7logging15CheckOpValueStrEm(i64 %39) #9
  %41 = tail call i8* @_ZN7logging15CheckOpValueStrEm(i64 %0) #9
  call void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"* nonnull %2, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.4, i64 0, i64 0), i8* %40, i8* %41) #9
  %42 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %2, i64 0, i32 0
  %43 = load i8*, i8** %42, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %35) #9
  store i8* %43, i8** %34, align 8
  %44 = icmp eq i8* %43, null
  br i1 %44, label %48, label %45

45:                                               ; preds = %38
  %46 = bitcast %"class.logging::CheckError"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %46) #9
  call void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* nonnull sret %4, i8* getelementptr inbounds ([59 x i8], [59 x i8]* @.str.5, i64 0, i64 0), i32 246, %"class.logging::CheckOpResult"* nonnull %3) #9
  %47 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %4) #9
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %4) #9
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %46) #9
  br label %48

48:                                               ; preds = %37, %38, %45
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %33) #9
  %49 = add i64 %0, 15
  %50 = and i64 %49, -8
  %51 = getelementptr inbounds %"class.blink::NormalPageArena", %"class.blink::NormalPageArena"* %32, i64 0, i32 4
  %52 = load i64, i64* %51, align 8
  %53 = icmp ult i64 %52, %50
  br i1 %53, label %86, label %54, !prof !3

54:                                               ; preds = %48
  %55 = getelementptr inbounds %"class.blink::NormalPageArena", %"class.blink::NormalPageArena"* %32, i64 0, i32 3
  %56 = load i8*, i8** %55, align 8
  %57 = getelementptr inbounds i8, i8* %56, i64 %50
  store i8* %57, i8** %55, align 8
  %58 = sub i64 %52, %50
  store i64 %58, i64* %51, align 8
  %59 = bitcast i8* %56 to i32*
  store i32 0, i32* %59, align 4
  %60 = getelementptr inbounds i8, i8* %56, i64 4
  %61 = bitcast i8* %60 to i16*
  %62 = trunc i32 %29 to i16
  %63 = shl i16 %62, 2
  store atomic i16 %63, i16* %61 monotonic, align 2
  %64 = lshr exact i64 %50, 1
  %65 = trunc i64 %64 to i16
  %66 = getelementptr inbounds i8, i8* %56, i64 6
  %67 = bitcast i8* %66 to i16*
  store i16 %65, i16* %67, align 2
  %68 = ptrtoint i8* %56 to i64
  %69 = and i64 %68, -131072
  %70 = inttoptr i64 %69 to i8*
  %71 = getelementptr inbounds i8, i8* %70, i64 4400
  %72 = bitcast i8* %71 to %"class.blink::PlatformAwareObjectStartBitmap"*
  %73 = bitcast i8* %71 to i64*
  %74 = load i64, i64* %73, align 16
  %75 = sub i64 %68, %74
  %76 = lshr i64 %75, 3
  %77 = lshr i64 %75, 6
  %78 = getelementptr inbounds %"class.blink::PlatformAwareObjectStartBitmap", %"class.blink::PlatformAwareObjectStartBitmap"* %72, i64 0, i32 0, i32 1, i64 %77
  %79 = load i8, i8* %78, align 1
  %80 = trunc i64 %76 to i32
  %81 = and i32 %80, 7
  %82 = shl i32 1, %81
  %83 = trunc i32 %82 to i8
  %84 = or i8 %79, %83
  store atomic i8 %84, i8* %78 release, align 1
  %85 = getelementptr inbounds i8, i8* %56, i64 8
  br label %89

86:                                               ; preds = %48
  %87 = zext i32 %29 to i64
  %88 = call i8* @_ZN5blink15NormalPageArena17OutOfLineAllocateEmm(%"class.blink::NormalPageArena"* %32, i64 %50, i64 %87) #9
  br label %89

89:                                               ; preds = %54, %86
  %90 = phi i8* [ %85, %54 ], [ %88, %86 ]
  ret i8* %90
}

declare i8* @_ZN3WTF10Partitions16FastZeroedMallocEmPKc(i64, i8*) local_unnamed_addr #4

declare i8* @_ZNK4base18ThreadLocalStorage4Slot3GetEv(%"class.base::ThreadLocalStorage::Slot"*) local_unnamed_addr #4

declare void @_ZN4base18ThreadLocalStorage4Slot3SetEPv(%"class.base::ThreadLocalStorage::Slot"*, i8*) local_unnamed_addr #4

declare i8* @_ZN5blink15NormalPageArena17OutOfLineAllocateEmm(%"class.blink::NormalPageArena"*, i64, i64) local_unnamed_addr #4

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN5blink10TraceTraitINS_8IterableIN3WTF12AtomicStringEjE15IterationSourceEE5TraceEPNS_7VisitorEPKv(%"class.blink::Visitor"*, i8*) #0 comdat align 2 {
  %3 = bitcast i8* %1 to %"class.blink::Iterable<WTF::AtomicString, unsigned int>::IterationSource"*
  %4 = bitcast i8* %1 to void (%"class.blink::Iterable<WTF::AtomicString, unsigned int>::IterationSource"*, %"class.blink::Visitor"*)***
  %5 = load void (%"class.blink::Iterable<WTF::AtomicString, unsigned int>::IterationSource"*, %"class.blink::Visitor"*)**, void (%"class.blink::Iterable<WTF::AtomicString, unsigned int>::IterationSource"*, %"class.blink::Visitor"*)*** %4, align 8
  %6 = getelementptr inbounds void (%"class.blink::Iterable<WTF::AtomicString, unsigned int>::IterationSource"*, %"class.blink::Visitor"*)*, void (%"class.blink::Iterable<WTF::AtomicString, unsigned int>::IterationSource"*, %"class.blink::Visitor"*)** %5, i64 3
  %7 = load void (%"class.blink::Iterable<WTF::AtomicString, unsigned int>::IterationSource"*, %"class.blink::Visitor"*)*, void (%"class.blink::Iterable<WTF::AtomicString, unsigned int>::IterationSource"*, %"class.blink::Visitor"*)** %6, align 8
  tail call void %7(%"class.blink::Iterable<WTF::AtomicString, unsigned int>::IterationSource"* %3, %"class.blink::Visitor"* %0) #9
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN5blink8internal14FinalizerTraitINS_8IterableIN3WTF12AtomicStringEjE15IterationSourceEE8FinalizeEPv(i8*) #0 comdat align 2 {
  %2 = bitcast i8* %0 to %"class.blink::Iterable<WTF::AtomicString, unsigned int>::IterationSource"*
  %3 = bitcast i8* %0 to void (%"class.blink::Iterable<WTF::AtomicString, unsigned int>::IterationSource"*)***
  %4 = load void (%"class.blink::Iterable<WTF::AtomicString, unsigned int>::IterationSource"*)**, void (%"class.blink::Iterable<WTF::AtomicString, unsigned int>::IterationSource"*)*** %3, align 8
  %5 = load void (%"class.blink::Iterable<WTF::AtomicString, unsigned int>::IterationSource"*)*, void (%"class.blink::Iterable<WTF::AtomicString, unsigned int>::IterationSource"*)** %4, align 8
  tail call void %5(%"class.blink::Iterable<WTF::AtomicString, unsigned int>::IterationSource"* %2) #9
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden { i8*, i8 } @_ZN5blink9NameTraitINS_8IterableIN3WTF12AtomicStringEjE15IterationSourceEE7GetNameEPKv(i8*) #0 comdat align 2 {
  ret { i8*, i8 } { i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.6, i64 0, i64 0), i8 1 }
}

declare i32 @_ZN5blink11GCInfoTable17EnsureGCInfoIndexEPKNS_6GCInfoEPNSt3__16atomicIjEE(%"class.blink::GCInfoTable"*, %"struct.blink::GCInfo"*, %"struct.std::__1::atomic"*) local_unnamed_addr #4

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZN5blink26EventCountsIterationSourceD0Ev(%"class.blink::EventCountsIterationSource"*) unnamed_addr #5 comdat align 2 {
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZN5blink26EventCountsIterationSource4NextEPNS_11ScriptStateERN3WTF12AtomicStringERjRNS_14ExceptionStateE(%"class.blink::EventCountsIterationSource"*, %"class.blink::ScriptState"*, %"class.WTF::AtomicString"* dereferenceable(8), i32* dereferenceable(4), %"class.blink::ExceptionState"* dereferenceable(72)) unnamed_addr #0 comdat align 2 {
  %6 = getelementptr inbounds %"class.blink::EventCountsIterationSource", %"class.blink::EventCountsIterationSource"* %0, i64 0, i32 1, i32 0, i32 0
  %7 = load %"class.blink::EventCounts"*, %"class.blink::EventCounts"** %6, align 8
  %8 = getelementptr inbounds %"class.blink::EventCounts", %"class.blink::EventCounts"* %7, i64 0, i32 2, i32 0, i32 0
  %9 = load %"struct.WTF::KeyValuePair"*, %"struct.WTF::KeyValuePair"** %8, align 8
  %10 = getelementptr inbounds %"class.blink::EventCounts", %"class.blink::EventCounts"* %7, i64 0, i32 2, i32 0, i32 1
  %11 = load i32, i32* %10, align 8
  %12 = zext i32 %11 to i64
  %13 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %9, i64 %12
  %14 = getelementptr inbounds %"class.blink::EventCountsIterationSource", %"class.blink::EventCountsIterationSource"* %0, i64 0, i32 2, i32 0, i32 0
  %15 = load %"struct.WTF::KeyValuePair"*, %"struct.WTF::KeyValuePair"** %14, align 8
  %16 = icmp eq %"struct.WTF::KeyValuePair"* %15, %13
  br i1 %16, label %73, label %17

17:                                               ; preds = %5
  %18 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %15, i64 0, i32 0, i32 0, i32 0, i32 0
  %19 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %18, align 8
  %20 = icmp eq %"class.WTF::StringImpl"* %19, null
  br i1 %20, label %38, label %21

21:                                               ; preds = %17
  %22 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %19, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %23 = load atomic i32, i32* %22 monotonic, align 4
  %24 = and i32 %23, 2
  %25 = icmp eq i32 %24, 0
  br i1 %25, label %26, label %38

26:                                               ; preds = %21
  %27 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %19, i64 0, i32 0
  %28 = load i32, i32* %27, align 4
  %29 = zext i32 %28 to i33
  %30 = tail call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %29, i33 1) #9
  %31 = extractvalue { i33, i1 } %30, 1
  %32 = extractvalue { i33, i1 } %30, 0
  %33 = icmp slt i33 %32, 0
  %34 = or i1 %31, %33
  br i1 %34, label %35, label %36, !prof !3

35:                                               ; preds = %26
  tail call void @llvm.trap() #9
  unreachable

36:                                               ; preds = %26
  %37 = trunc i33 %32 to i32
  store i32 %37, i32* %27, align 4
  br label %38

38:                                               ; preds = %36, %21, %17
  %39 = ptrtoint %"class.WTF::StringImpl"* %19 to i64
  %40 = bitcast %"class.WTF::AtomicString"* %2 to i64*
  %41 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %2, i64 0, i32 0, i32 0, i32 0
  %42 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %41, align 8
  store i64 %39, i64* %40, align 8
  %43 = icmp eq %"class.WTF::StringImpl"* %42, null
  br i1 %43, label %57, label %44

44:                                               ; preds = %38
  %45 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %42, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %46 = load atomic i32, i32* %45 monotonic, align 4
  %47 = and i32 %46, 2
  %48 = icmp eq i32 %47, 0
  %49 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %42, i64 0, i32 0
  %50 = load i32, i32* %49, align 4
  br i1 %48, label %51, label %53

51:                                               ; preds = %44
  %52 = add i32 %50, -1
  store i32 %52, i32* %49, align 4
  br label %53

53:                                               ; preds = %51, %44
  %54 = phi i32 [ %52, %51 ], [ %50, %44 ]
  %55 = icmp eq i32 %54, 0
  br i1 %55, label %56, label %57

56:                                               ; preds = %53
  tail call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %42) #9
  br label %57

57:                                               ; preds = %38, %53, %56
  %58 = load %"struct.WTF::KeyValuePair"*, %"struct.WTF::KeyValuePair"** %14, align 8
  %59 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %58, i64 0, i32 1
  %60 = load i32, i32* %59, align 8
  store i32 %60, i32* %3, align 4
  %61 = load %"struct.WTF::KeyValuePair"*, %"struct.WTF::KeyValuePair"** %14, align 8
  %62 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %61, i64 1
  store %"struct.WTF::KeyValuePair"* %62, %"struct.WTF::KeyValuePair"** %14, align 8
  %63 = getelementptr inbounds %"class.blink::EventCountsIterationSource", %"class.blink::EventCountsIterationSource"* %0, i64 0, i32 2, i32 0, i32 1
  %64 = load %"struct.WTF::KeyValuePair"*, %"struct.WTF::KeyValuePair"** %63, align 8
  %65 = icmp eq %"struct.WTF::KeyValuePair"* %62, %64
  br i1 %65, label %73, label %66

66:                                               ; preds = %57, %70
  %67 = phi %"struct.WTF::KeyValuePair"* [ %71, %70 ], [ %62, %57 ]
  %68 = bitcast %"struct.WTF::KeyValuePair"* %67 to i64*
  %69 = load i64, i64* %68, align 8
  switch i64 %69, label %73 [
    i64 -1, label %70
    i64 0, label %70
  ]

70:                                               ; preds = %66, %66
  %71 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %67, i64 1
  store %"struct.WTF::KeyValuePair"* %71, %"struct.WTF::KeyValuePair"** %14, align 8
  %72 = icmp eq %"struct.WTF::KeyValuePair"* %71, %64
  br i1 %72, label %73, label %66

73:                                               ; preds = %70, %66, %57, %5
  %74 = phi i1 [ false, %5 ], [ true, %57 ], [ true, %66 ], [ true, %70 ]
  ret i1 %74
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNK5blink26EventCountsIterationSource5TraceEPNS_7VisitorE(%"class.blink::EventCountsIterationSource"*, %"class.blink::Visitor"*) unnamed_addr #0 comdat align 2 {
  %3 = getelementptr inbounds %"class.blink::EventCountsIterationSource", %"class.blink::EventCountsIterationSource"* %0, i64 0, i32 1
  %4 = bitcast %"class.blink::Member.205"* %3 to i64*
  %5 = load atomic i64, i64* %4 monotonic, align 8
  %6 = icmp eq i64 %5, 0
  br i1 %6, label %13, label %7

7:                                                ; preds = %2
  %8 = inttoptr i64 %5 to i8*
  %9 = bitcast %"class.blink::Visitor"* %1 to void (%"class.blink::Visitor"*, i8*, i8*, void (%"class.blink::Visitor"*, i8*)*)***
  %10 = load void (%"class.blink::Visitor"*, i8*, i8*, void (%"class.blink::Visitor"*, i8*)*)**, void (%"class.blink::Visitor"*, i8*, i8*, void (%"class.blink::Visitor"*, i8*)*)*** %9, align 8
  %11 = getelementptr inbounds void (%"class.blink::Visitor"*, i8*, i8*, void (%"class.blink::Visitor"*, i8*)*)*, void (%"class.blink::Visitor"*, i8*, i8*, void (%"class.blink::Visitor"*, i8*)*)** %10, i64 5
  %12 = load void (%"class.blink::Visitor"*, i8*, i8*, void (%"class.blink::Visitor"*, i8*)*)*, void (%"class.blink::Visitor"*, i8*, i8*, void (%"class.blink::Visitor"*, i8*)*)** %11, align 8
  tail call void %12(%"class.blink::Visitor"* %1, i8* nonnull %8, i8* nonnull %8, void (%"class.blink::Visitor"*, i8*)* nonnull @_ZN5blink10TraceTraitINS_11EventCountsEE5TraceEPNS_7VisitorEPKv) #9
  br label %13

13:                                               ; preds = %2, %7
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN5blink8IterableIN3WTF12AtomicStringEjE15IterationSourceD2Ev(%"class.blink::Iterable<WTF::AtomicString, unsigned int>::IterationSource"*) unnamed_addr #0 comdat align 2 {
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN5blink10TraceTraitINS_11EventCountsEE5TraceEPNS_7VisitorEPKv(%"class.blink::Visitor"*, i8*) #0 comdat align 2 {
  %3 = bitcast i8* %1 to %"class.blink::ScriptWrappable"*
  tail call void @_ZNK5blink15ScriptWrappable5TraceEPNS_7VisitorE(%"class.blink::ScriptWrappable"* %3, %"class.blink::Visitor"* %0) #9
  ret void
}

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { nofree nounwind }
attributes #3 = { nofree norecurse nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { inlinehint nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nounwind readnone speculatable }
attributes #7 = { cold noreturn nounwind }
attributes #8 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #9 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{!"branch_weights", i32 1, i32 1048575}
!3 = !{!"branch_weights", i32 1, i32 2000}
!4 = !{!"branch_weights", i32 2000, i32 1}
