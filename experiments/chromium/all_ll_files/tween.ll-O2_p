; ModuleID = '../../ui/gfx/animation/tween.cc'
source_filename = "../../ui/gfx/animation/tween.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.gfx::CubicBezier" = type { double, double, double, double, double, double, double, double, double, double, [11 x double] }
%"class.base::TimeTicks" = type { %"class.base::time_internal::TimeBase" }
%"class.base::time_internal::TimeBase" = type { i64 }
%"class.base::TimeDelta" = type { i64 }
%"class.logging::CheckError" = type { %"class.logging::LogMessage"* }
%"class.logging::LogMessage" = type opaque
%"class.std::__1::basic_ostream" = type { i32 (...)**, %"class.std::__1::basic_ios.base" }
%"class.std::__1::basic_ios.base" = type <{ %"class.std::__1::ios_base", %"class.std::__1::basic_ostream"*, i32 }>
%"class.std::__1::ios_base" = type { i32 (...)**, i32, i64, i64, i32, i32, i8*, i8*, void (i32, %"class.std::__1::ios_base"*, i32)**, i32*, i64, i64, i64*, i64, i64, i8**, i64, i64 }
%"class.gfx::Rect" = type { %"class.gfx::Point", %"class.gfx::Size" }
%"class.gfx::Point" = type { i32, i32 }
%"class.gfx::Size" = type { i32, i32 }
%"class.gfx::RectF" = type { %"class.gfx::PointF", %"class.gfx::SizeF" }
%"class.gfx::PointF" = type { float, float }
%"class.gfx::SizeF" = type { float, float }
%"class.gfx::Transform" = type { %class.SkMatrix44 }
%class.SkMatrix44 = type <{ [4 x [4 x float]], i8, [3 x i8] }>
%"class.gfx::TransformOperations" = type { %"class.std::__1::vector", %"class.std::__1::unordered_map" }
%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { %"struct.gfx::TransformOperation"*, %"struct.gfx::TransformOperation"*, %"class.std::__1::__compressed_pair" }
%"struct.gfx::TransformOperation" = type { i32, %"class.gfx::Transform", %union.anon }
%union.anon = type { %struct.anon.2 }
%struct.anon.2 = type { %struct.anon.3, float }
%struct.anon.3 = type { float, float, float }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %"struct.gfx::TransformOperation"* }
%"class.std::__1::unordered_map" = type { %"class.std::__1::__hash_table" }
%"class.std::__1::__hash_table" = type <{ %"class.std::__1::unique_ptr", %"class.std::__1::__compressed_pair.13", %"class.std::__1::__compressed_pair.18", %"class.std::__1::__compressed_pair.20", [4 x i8] }>
%"class.std::__1::unique_ptr" = type { %"class.std::__1::__compressed_pair.5" }
%"class.std::__1::__compressed_pair.5" = type { %"struct.std::__1::__compressed_pair_elem.6", %"struct.std::__1::__compressed_pair_elem.7" }
%"struct.std::__1::__compressed_pair_elem.6" = type { %"struct.std::__1::__hash_node_base"** }
%"struct.std::__1::__hash_node_base" = type { %"struct.std::__1::__hash_node_base"* }
%"struct.std::__1::__compressed_pair_elem.7" = type { %"class.std::__1::__bucket_list_deallocator" }
%"class.std::__1::__bucket_list_deallocator" = type { %"class.std::__1::__compressed_pair.8" }
%"class.std::__1::__compressed_pair.8" = type { %"struct.std::__1::__compressed_pair_elem.9" }
%"struct.std::__1::__compressed_pair_elem.9" = type { i64 }
%"class.std::__1::__compressed_pair.13" = type { %"struct.std::__1::__compressed_pair_elem.14" }
%"struct.std::__1::__compressed_pair_elem.14" = type { %"struct.std::__1::__hash_node_base" }
%"class.std::__1::__compressed_pair.18" = type { %"struct.std::__1::__compressed_pair_elem.9" }
%"class.std::__1::__compressed_pair.20" = type { %"struct.std::__1::__compressed_pair_elem.21" }
%"struct.std::__1::__compressed_pair_elem.21" = type { float }

$_ZNK4base9TimeDeltadvES0_ = comdat any

@.str = private unnamed_addr constant [23 x i8] c"../../base/time/time.h\00", align 1
@.str.1 = private unnamed_addr constant [27 x i8] c"!is_zero() || !a.is_zero()\00", align 1
@.str.2 = private unnamed_addr constant [25 x i8] c"!is_inf() || !a.is_inf()\00", align 1

; Function Attrs: nounwind ssp uwtable
define hidden double @_ZN3gfx5Tween14CalculateValueENS0_4TypeEd(i32, double) local_unnamed_addr #0 align 2 {
  %3 = alloca %"class.gfx::CubicBezier", align 8
  %4 = alloca %"class.gfx::CubicBezier", align 8
  %5 = alloca %"class.gfx::CubicBezier", align 8
  %6 = alloca %"class.gfx::CubicBezier", align 8
  %7 = alloca %"class.gfx::CubicBezier", align 8
  %8 = alloca %"class.gfx::CubicBezier", align 8
  %9 = alloca %"class.gfx::CubicBezier", align 8
  %10 = alloca %"class.gfx::CubicBezier", align 8
  %11 = alloca %"class.gfx::CubicBezier", align 8
  %12 = alloca %"class.gfx::CubicBezier", align 8
  %13 = alloca %"class.gfx::CubicBezier", align 8
  %14 = alloca %"class.gfx::CubicBezier", align 8
  %15 = alloca %"class.gfx::CubicBezier", align 8
  switch i32 %0, label %78 [
    i32 5, label %16
    i32 6, label %18
    i32 7, label %20
    i32 8, label %32
    i32 3, label %35
    i32 4, label %38
    i32 19, label %75
    i32 1, label %41
    i32 2, label %45
    i32 9, label %48
    i32 10, label %50
    i32 11, label %53
    i32 12, label %56
    i32 13, label %59
    i32 14, label %62
    i32 15, label %65
    i32 16, label %68
    i32 17, label %69
    i32 18, label %72
  ]

16:                                               ; preds = %2
  %17 = fmul double %1, %1
  br label %78

18:                                               ; preds = %2
  %19 = tail call double @pow(double %1, double 4.000000e+00) #11
  br label %78

20:                                               ; preds = %2
  %21 = fcmp olt double %1, 5.000000e-01
  br i1 %21, label %22, label %26

22:                                               ; preds = %20
  %23 = fmul double %1, 2.000000e+00
  %24 = fmul double %23, %23
  %25 = fmul double %24, 5.000000e-01
  br label %78

26:                                               ; preds = %20
  %27 = fadd double %1, -1.000000e+00
  %28 = fmul double %27, 2.000000e+00
  %29 = fmul double %28, %28
  %30 = fmul double %29, 5.000000e-01
  %31 = fsub double 1.000000e+00, %30
  br label %78

32:                                               ; preds = %2
  %33 = bitcast %"class.gfx::CubicBezier"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 168, i8* nonnull %33) #11
  call void @_ZN3gfx11CubicBezierC1Edddd(%"class.gfx::CubicBezier"* nonnull %3, double 3.300000e-01, double 0.000000e+00, double 6.700000e-01, double 1.000000e+00) #11
  %34 = call double @_ZNK3gfx11CubicBezier5SolveEd(%"class.gfx::CubicBezier"* nonnull %3, double %1) #11
  call void @llvm.lifetime.end.p0i8(i64 168, i8* nonnull %33) #11
  br label %78

35:                                               ; preds = %2
  %36 = bitcast %"class.gfx::CubicBezier"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 168, i8* nonnull %36) #11
  call void @_ZN3gfx11CubicBezierC1Edddd(%"class.gfx::CubicBezier"* nonnull %4, double 6.000000e-01, double 0.000000e+00, double 0.000000e+00, double 1.000000e+00) #11
  %37 = call double @_ZNK3gfx11CubicBezier5SolveEd(%"class.gfx::CubicBezier"* nonnull %4, double %1) #11
  call void @llvm.lifetime.end.p0i8(i64 168, i8* nonnull %36) #11
  br label %78

38:                                               ; preds = %2
  %39 = bitcast %"class.gfx::CubicBezier"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 168, i8* nonnull %39) #11
  call void @_ZN3gfx11CubicBezierC1Edddd(%"class.gfx::CubicBezier"* nonnull %5, double 1.000000e+00, double 0.000000e+00, double 8.000000e-01, double 1.000000e+00) #11
  %40 = call double @_ZNK3gfx11CubicBezier5SolveEd(%"class.gfx::CubicBezier"* nonnull %5, double %1) #11
  call void @llvm.lifetime.end.p0i8(i64 168, i8* nonnull %39) #11
  br label %78

41:                                               ; preds = %2
  %42 = fsub double 1.000000e+00, %1
  %43 = fmul double %42, %42
  %44 = fsub double 1.000000e+00, %43
  br label %78

45:                                               ; preds = %2
  %46 = bitcast %"class.gfx::CubicBezier"* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 168, i8* nonnull %46) #11
  call void @_ZN3gfx11CubicBezierC1Edddd(%"class.gfx::CubicBezier"* nonnull %6, double 4.000000e-01, double 0.000000e+00, double 0.000000e+00, double 1.000000e+00) #11
  %47 = call double @_ZNK3gfx11CubicBezier5SolveEd(%"class.gfx::CubicBezier"* nonnull %6, double %1) #11
  call void @llvm.lifetime.end.p0i8(i64 168, i8* nonnull %46) #11
  br label %78

48:                                               ; preds = %2
  %49 = tail call double @sin(double %1) #11
  br label %78

50:                                               ; preds = %2
  %51 = bitcast %"class.gfx::CubicBezier"* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 168, i8* nonnull %51) #11
  call void @_ZN3gfx11CubicBezierC1Edddd(%"class.gfx::CubicBezier"* nonnull %7, double 4.000000e-01, double 0.000000e+00, double 2.000000e-01, double 1.000000e+00) #11
  %52 = call double @_ZNK3gfx11CubicBezier5SolveEd(%"class.gfx::CubicBezier"* nonnull %7, double %1) #11
  call void @llvm.lifetime.end.p0i8(i64 168, i8* nonnull %51) #11
  br label %78

53:                                               ; preds = %2
  %54 = bitcast %"class.gfx::CubicBezier"* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 168, i8* nonnull %54) #11
  call void @_ZN3gfx11CubicBezierC1Edddd(%"class.gfx::CubicBezier"* nonnull %8, double 2.000000e-01, double 0.000000e+00, double 2.000000e-01, double 1.000000e+00) #11
  %55 = call double @_ZNK3gfx11CubicBezier5SolveEd(%"class.gfx::CubicBezier"* nonnull %8, double %1) #11
  call void @llvm.lifetime.end.p0i8(i64 168, i8* nonnull %54) #11
  br label %78

56:                                               ; preds = %2
  %57 = bitcast %"class.gfx::CubicBezier"* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 168, i8* nonnull %57) #11
  call void @_ZN3gfx11CubicBezierC1Edddd(%"class.gfx::CubicBezier"* nonnull %9, double 2.000000e-01, double 0.000000e+00, double 0.000000e+00, double 1.000000e+00) #11
  %58 = call double @_ZNK3gfx11CubicBezier5SolveEd(%"class.gfx::CubicBezier"* nonnull %9, double %1) #11
  call void @llvm.lifetime.end.p0i8(i64 168, i8* nonnull %57) #11
  br label %78

59:                                               ; preds = %2
  %60 = bitcast %"class.gfx::CubicBezier"* %10 to i8*
  call void @llvm.lifetime.start.p0i8(i64 168, i8* nonnull %60) #11
  call void @_ZN3gfx11CubicBezierC1Edddd(%"class.gfx::CubicBezier"* nonnull %10, double 0.000000e+00, double 0.000000e+00, double 2.000000e-01, double 1.000000e+00) #11
  %61 = call double @_ZNK3gfx11CubicBezier5SolveEd(%"class.gfx::CubicBezier"* nonnull %10, double %1) #11
  call void @llvm.lifetime.end.p0i8(i64 168, i8* nonnull %60) #11
  br label %78

62:                                               ; preds = %2
  %63 = bitcast %"class.gfx::CubicBezier"* %11 to i8*
  call void @llvm.lifetime.start.p0i8(i64 168, i8* nonnull %63) #11
  call void @_ZN3gfx11CubicBezierC1Edddd(%"class.gfx::CubicBezier"* nonnull %11, double 0.000000e+00, double 0.000000e+00, double 1.000000e+00, double 2.000000e-01) #11
  %64 = call double @_ZNK3gfx11CubicBezier5SolveEd(%"class.gfx::CubicBezier"* nonnull %11, double %1) #11
  call void @llvm.lifetime.end.p0i8(i64 168, i8* nonnull %63) #11
  br label %78

65:                                               ; preds = %2
  %66 = bitcast %"class.gfx::CubicBezier"* %12 to i8*
  call void @llvm.lifetime.start.p0i8(i64 168, i8* nonnull %66) #11
  call void @_ZN3gfx11CubicBezierC1Edddd(%"class.gfx::CubicBezier"* nonnull %12, double 4.000000e-01, double 0.000000e+00, double 1.000000e+00, double 1.000000e+00) #11
  %67 = call double @_ZNK3gfx11CubicBezier5SolveEd(%"class.gfx::CubicBezier"* nonnull %12, double %1) #11
  call void @llvm.lifetime.end.p0i8(i64 168, i8* nonnull %66) #11
  br label %78

68:                                               ; preds = %2
  br label %78

69:                                               ; preds = %2
  %70 = bitcast %"class.gfx::CubicBezier"* %13 to i8*
  call void @llvm.lifetime.start.p0i8(i64 168, i8* nonnull %70) #11
  call void @_ZN3gfx11CubicBezierC1Edddd(%"class.gfx::CubicBezier"* nonnull %13, double 0.000000e+00, double 0.000000e+00, double 4.000000e-01, double 1.000000e+00) #11
  %71 = call double @_ZNK3gfx11CubicBezier5SolveEd(%"class.gfx::CubicBezier"* nonnull %13, double %1) #11
  call void @llvm.lifetime.end.p0i8(i64 168, i8* nonnull %70) #11
  br label %78

72:                                               ; preds = %2
  %73 = bitcast %"class.gfx::CubicBezier"* %14 to i8*
  call void @llvm.lifetime.start.p0i8(i64 168, i8* nonnull %73) #11
  call void @_ZN3gfx11CubicBezierC1Edddd(%"class.gfx::CubicBezier"* nonnull %14, double 0.000000e+00, double 0.000000e+00, double 0.000000e+00, double 1.000000e+00) #11
  %74 = call double @_ZNK3gfx11CubicBezier5SolveEd(%"class.gfx::CubicBezier"* nonnull %14, double %1) #11
  call void @llvm.lifetime.end.p0i8(i64 168, i8* nonnull %73) #11
  br label %78

75:                                               ; preds = %2
  %76 = bitcast %"class.gfx::CubicBezier"* %15 to i8*
  call void @llvm.lifetime.start.p0i8(i64 168, i8* nonnull %76) #11
  call void @_ZN3gfx11CubicBezierC1Edddd(%"class.gfx::CubicBezier"* nonnull %15, double 2.000000e-01, double 0.000000e+00, double 4.000000e-01, double 1.000000e+00) #11
  %77 = call double @_ZNK3gfx11CubicBezier5SolveEd(%"class.gfx::CubicBezier"* nonnull %15, double %1) #11
  call void @llvm.lifetime.end.p0i8(i64 168, i8* nonnull %76) #11
  br label %78

78:                                               ; preds = %2, %75, %72, %69, %68, %65, %62, %59, %56, %53, %50, %48, %45, %41, %38, %35, %32, %26, %22, %18, %16
  %79 = phi double [ %77, %75 ], [ %74, %72 ], [ %71, %69 ], [ 0.000000e+00, %68 ], [ %67, %65 ], [ %64, %62 ], [ %61, %59 ], [ %58, %56 ], [ %55, %53 ], [ %52, %50 ], [ %49, %48 ], [ %47, %45 ], [ %44, %41 ], [ %40, %38 ], [ %37, %35 ], [ %34, %32 ], [ %25, %22 ], [ %31, %26 ], [ %19, %18 ], [ %17, %16 ], [ %1, %2 ]
  ret double %79
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

declare void @_ZN3gfx11CubicBezierC1Edddd(%"class.gfx::CubicBezier"*, double, double, double, double) unnamed_addr #2

declare double @_ZNK3gfx11CubicBezier5SolveEd(%"class.gfx::CubicBezier"*, double) local_unnamed_addr #2

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nofree nounwind
declare double @sin(double) local_unnamed_addr #3

; Function Attrs: nounwind readnone ssp uwtable
define hidden i32 @_ZN3gfx5Tween17ColorValueBetweenEdjj(double, i32, i32) local_unnamed_addr #4 align 2 {
  %4 = lshr i32 %1, 24
  %5 = uitofp i32 %4 to float
  %6 = fdiv float %5, 2.550000e+02
  %7 = lshr i32 %2, 24
  %8 = uitofp i32 %7 to float
  %9 = fdiv float %8, 2.550000e+02
  %10 = fpext float %6 to double
  %11 = fsub float %9, %6
  %12 = fpext float %11 to double
  %13 = fmul double %12, %0
  %14 = fadd double %13, %10
  %15 = fptrunc double %14 to float
  %16 = fcmp ugt float %15, 0.000000e+00
  br i1 %16, label %17, label %135

17:                                               ; preds = %3
  %18 = fcmp ogt float %15, 1.000000e+00
  %19 = lshr i32 %1, 16
  %20 = trunc i32 %19 to i8
  %21 = lshr i32 %2, 16
  %22 = trunc i32 %21 to i8
  %23 = select i1 %18, float 1.000000e+00, float %15
  %24 = uitofp i8 %20 to float
  %25 = fdiv float %24, 2.550000e+02
  %26 = fmul float %6, %25
  %27 = uitofp i8 %22 to float
  %28 = fdiv float %27, 2.550000e+02
  %29 = fmul float %9, %28
  %30 = fpext float %26 to double
  %31 = fsub float %29, %26
  %32 = fpext float %31 to double
  %33 = fmul double %32, %0
  %34 = fadd double %33, %30
  %35 = fptrunc double %34 to float
  %36 = fdiv float %35, %23
  %37 = fmul float %36, 2.550000e+02
  %38 = fcmp ult float %37, 0.000000e+00
  %39 = fadd float %37, 5.000000e-01
  %40 = tail call float @llvm.floor.f32(float %39) #11
  %41 = fadd float %37, -5.000000e-01
  %42 = tail call float @llvm.ceil.f32(float %41) #11
  %43 = select i1 %38, float %42, float %40
  %44 = fcmp ule float %43, -1.000000e+00
  %45 = fcmp ugt float %43, 2.550000e+02
  %46 = fptoui float %43 to i8
  %47 = select i1 %44, i8 0, i8 %46
  %48 = xor i1 %44, true
  %49 = sext i1 %48 to i8
  %50 = select i1 %45, i8 %49, i8 %47
  %51 = lshr i32 %1, 8
  %52 = trunc i32 %51 to i8
  %53 = lshr i32 %2, 8
  %54 = trunc i32 %53 to i8
  %55 = uitofp i8 %52 to float
  %56 = fdiv float %55, 2.550000e+02
  %57 = fmul float %6, %56
  %58 = uitofp i8 %54 to float
  %59 = fdiv float %58, 2.550000e+02
  %60 = fmul float %9, %59
  %61 = fpext float %57 to double
  %62 = fsub float %60, %57
  %63 = fpext float %62 to double
  %64 = fmul double %63, %0
  %65 = fadd double %64, %61
  %66 = fptrunc double %65 to float
  %67 = fdiv float %66, %23
  %68 = fmul float %67, 2.550000e+02
  %69 = fcmp ult float %68, 0.000000e+00
  %70 = fadd float %68, 5.000000e-01
  %71 = tail call float @llvm.floor.f32(float %70) #11
  %72 = fadd float %68, -5.000000e-01
  %73 = tail call float @llvm.ceil.f32(float %72) #11
  %74 = select i1 %69, float %73, float %71
  %75 = fcmp ule float %74, -1.000000e+00
  %76 = fcmp ugt float %74, 2.550000e+02
  %77 = fptoui float %74 to i8
  %78 = select i1 %75, i8 0, i8 %77
  %79 = xor i1 %75, true
  %80 = sext i1 %79 to i8
  %81 = select i1 %76, i8 %80, i8 %78
  %82 = trunc i32 %1 to i8
  %83 = trunc i32 %2 to i8
  %84 = uitofp i8 %82 to float
  %85 = fdiv float %84, 2.550000e+02
  %86 = fmul float %85, %6
  %87 = uitofp i8 %83 to float
  %88 = fdiv float %87, 2.550000e+02
  %89 = fmul float %88, %9
  %90 = fpext float %86 to double
  %91 = fsub float %89, %86
  %92 = fpext float %91 to double
  %93 = fmul double %92, %0
  %94 = fadd double %93, %90
  %95 = fptrunc double %94 to float
  %96 = fdiv float %95, %23
  %97 = fmul float %96, 2.550000e+02
  %98 = fcmp ult float %97, 0.000000e+00
  %99 = fadd float %97, 5.000000e-01
  %100 = tail call float @llvm.floor.f32(float %99) #11
  %101 = fadd float %97, -5.000000e-01
  %102 = tail call float @llvm.ceil.f32(float %101) #11
  %103 = select i1 %98, float %102, float %100
  %104 = fcmp ule float %103, -1.000000e+00
  %105 = fcmp ugt float %103, 2.550000e+02
  %106 = fptoui float %103 to i8
  %107 = select i1 %104, i8 0, i8 %106
  %108 = xor i1 %104, true
  %109 = sext i1 %108 to i8
  %110 = select i1 %105, i8 %109, i8 %107
  %111 = fmul float %23, 2.550000e+02
  %112 = fcmp ult float %111, 0.000000e+00
  %113 = fadd float %111, 5.000000e-01
  %114 = tail call float @llvm.floor.f32(float %113) #11
  %115 = fadd float %111, -5.000000e-01
  %116 = tail call float @llvm.ceil.f32(float %115) #11
  %117 = select i1 %112, float %116, float %114
  %118 = fcmp ule float %117, -1.000000e+00
  %119 = fcmp ugt float %117, 2.550000e+02
  %120 = fptoui float %117 to i8
  %121 = select i1 %118, i8 0, i8 %120
  %122 = xor i1 %118, true
  %123 = sext i1 %122 to i8
  %124 = select i1 %119, i8 %123, i8 %121
  %125 = zext i8 %124 to i32
  %126 = zext i8 %50 to i32
  %127 = zext i8 %81 to i32
  %128 = zext i8 %110 to i32
  %129 = shl nuw i32 %125, 24
  %130 = shl nuw nsw i32 %126, 16
  %131 = shl nuw nsw i32 %127, 8
  %132 = or i32 %129, %128
  %133 = or i32 %132, %130
  %134 = or i32 %133, %131
  br label %135

135:                                              ; preds = %3, %17
  %136 = phi i32 [ %134, %17 ], [ 0, %3 ]
  ret i32 %136
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden float @_ZN3gfx5Tween17FloatValueBetweenEdff(double, float, float) local_unnamed_addr #5 align 2 {
  %4 = fpext float %1 to double
  %5 = fsub float %2, %1
  %6 = fpext float %5 to double
  %7 = fmul double %6, %0
  %8 = fadd double %7, %4
  %9 = fptrunc double %8 to float
  ret float %9
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden double @_ZN3gfx5Tween18DoubleValueBetweenEddd(double, double, double) local_unnamed_addr #5 align 2 {
  %4 = fsub double %2, %1
  %5 = fmul double %4, %0
  %6 = fadd double %5, %1
  ret double %6
}

; Function Attrs: nounwind ssp uwtable
define hidden float @_ZN3gfx5Tween24ClampedFloatValueBetweenERKN4base9TimeTicksES4_fS4_f(%"class.base::TimeTicks"* nocapture readonly dereferenceable(8), %"class.base::TimeTicks"* nocapture readonly dereferenceable(8), float, %"class.base::TimeTicks"* nocapture readonly dereferenceable(8), float) local_unnamed_addr #0 align 2 {
  %6 = alloca %"class.base::TimeDelta", align 8
  %7 = getelementptr inbounds %"class.base::TimeTicks", %"class.base::TimeTicks"* %1, i64 0, i32 0, i32 0
  %8 = load i64, i64* %7, align 8
  %9 = getelementptr inbounds %"class.base::TimeTicks", %"class.base::TimeTicks"* %0, i64 0, i32 0, i32 0
  %10 = load i64, i64* %9, align 8
  %11 = icmp sgt i64 %10, %8
  br i1 %11, label %12, label %28

12:                                               ; preds = %5
  %13 = getelementptr inbounds %"class.base::TimeTicks", %"class.base::TimeTicks"* %3, i64 0, i32 0, i32 0
  %14 = load i64, i64* %13, align 8
  %15 = icmp slt i64 %10, %14
  br i1 %15, label %16, label %28

16:                                               ; preds = %12
  %17 = bitcast %"class.base::TimeDelta"* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %17) #11
  %18 = sub nsw i64 %10, %8
  %19 = getelementptr inbounds %"class.base::TimeDelta", %"class.base::TimeDelta"* %6, i64 0, i32 0
  store i64 %18, i64* %19, align 8
  %20 = sub nsw i64 %14, %8
  %21 = call double @_ZNK4base9TimeDeltadvES0_(%"class.base::TimeDelta"* nonnull %6, i64 %20)
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %17) #11
  %22 = fpext float %2 to double
  %23 = fsub float %4, %2
  %24 = fpext float %23 to double
  %25 = fmul double %21, %24
  %26 = fadd double %25, %22
  %27 = fptrunc double %26 to float
  br label %28

28:                                               ; preds = %12, %5, %16
  %29 = phi float [ %27, %16 ], [ %2, %5 ], [ %4, %12 ]
  ret float %29
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #1

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden double @_ZNK4base9TimeDeltadvES0_(%"class.base::TimeDelta"*, i64) local_unnamed_addr #0 comdat align 2 {
  %3 = alloca %"class.logging::CheckError", align 8
  %4 = alloca %"class.logging::CheckError", align 8
  %5 = getelementptr inbounds %"class.base::TimeDelta", %"class.base::TimeDelta"* %0, i64 0, i32 0
  %6 = load i64, i64* %5, align 8
  %7 = or i64 %6, %1
  %8 = icmp eq i64 %7, 0
  br i1 %8, label %9, label %13

9:                                                ; preds = %2
  %10 = bitcast %"class.logging::CheckError"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %10) #11
  call void @_ZN7logging10CheckError5CheckEPKciS2_(%"class.logging::CheckError"* nonnull sret %3, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str, i64 0, i64 0), i32 302, i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.1, i64 0, i64 0)) #11
  %11 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %3) #11
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %3) #11
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %10) #11
  %12 = load i64, i64* %5, align 8
  br label %13

13:                                               ; preds = %2, %9
  %14 = phi i64 [ %6, %2 ], [ %12, %9 ]
  %15 = add i64 %14, -9223372036854775807
  %16 = add i64 %1, -9223372036854775807
  %17 = or i64 %15, %16
  %18 = icmp ult i64 %17, 2
  br i1 %18, label %19, label %24

19:                                               ; preds = %13
  %20 = bitcast %"class.logging::CheckError"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %20) #11
  call void @_ZN7logging10CheckError5CheckEPKciS2_(%"class.logging::CheckError"* nonnull sret %4, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str, i64 0, i64 0), i32 303, i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.2, i64 0, i64 0)) #11
  %21 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %4) #11
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %4) #11
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %20) #11
  %22 = load i64, i64* %5, align 8
  %23 = add i64 %22, -9223372036854775807
  br label %24

24:                                               ; preds = %13, %19
  %25 = phi i64 [ %15, %13 ], [ %23, %19 ]
  %26 = phi i64 [ %14, %13 ], [ %22, %19 ]
  %27 = icmp ult i64 %25, 2
  %28 = icmp slt i64 %26, 0
  %29 = select i1 %28, double 0xFFF0000000000000, double 0x7FF0000000000000
  %30 = sitofp i64 %26 to double
  %31 = select i1 %27, double %29, double %30
  %32 = icmp ult i64 %16, 2
  %33 = icmp slt i64 %1, 0
  %34 = select i1 %33, double 0xFFF0000000000000, double 0x7FF0000000000000
  %35 = sitofp i64 %1 to double
  %36 = select i1 %32, double %34, double %35
  %37 = fdiv double %31, %36
  ret double %37
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @_ZN3gfx5Tween15IntValueBetweenEdii(double, i32, i32) local_unnamed_addr #0 align 2 {
  %4 = icmp eq i32 %2, %1
  br i1 %4, label %15, label %5

5:                                                ; preds = %3
  %6 = sub nsw i32 %2, %1
  %7 = sitofp i32 %6 to double
  %8 = icmp slt i32 %6, 0
  %9 = select i1 %8, double -1.000000e+00, double 1.000000e+00
  %10 = fadd double %9, %7
  %11 = tail call double @nextafter(double %10, double 0.000000e+00) #11
  %12 = fmul double %11, %0
  %13 = fptosi double %12 to i32
  %14 = add nsw i32 %13, %1
  br label %15

15:                                               ; preds = %3, %5
  %16 = phi i32 [ %14, %5 ], [ %2, %3 ]
  ret i32 %16
}

; Function Attrs: nounwind readnone ssp uwtable
define hidden i32 @_ZN3gfx5Tween21LinearIntValueBetweenEdii(double, i32, i32) local_unnamed_addr #4 align 2 {
  %4 = sitofp i32 %1 to double
  %5 = sitofp i32 %2 to double
  %6 = fsub double %5, %4
  %7 = fmul double %6, %0
  %8 = fadd double %7, %4
  %9 = fadd double %8, 5.000000e-01
  %10 = tail call double @llvm.floor.f64(double %9) #11
  %11 = fcmp ult double %10, 0xC1E0000000000000
  %12 = fcmp ugt double %10, 0x41DFFFFFFFC00000
  %13 = fcmp ogt double %10, 0xC1E0000000000000
  %14 = select i1 %13, double %10, double 0xC1E0000000000000
  %15 = fptosi double %14 to i32
  %16 = select i1 %11, i32 0, i32 2147483647
  %17 = select i1 %12, i32 %16, i32 %15
  ret i32 %17
}

; Function Attrs: nounwind readonly ssp uwtable
define hidden { i64, i64 } @_ZN3gfx5Tween16RectValueBetweenEdRKNS_4RectES3_(double, %"class.gfx::Rect"* nocapture readonly dereferenceable(16), %"class.gfx::Rect"* nocapture readonly dereferenceable(16)) local_unnamed_addr #6 align 2 {
  %4 = getelementptr inbounds %"class.gfx::Rect", %"class.gfx::Rect"* %1, i64 0, i32 0, i32 0
  %5 = load i32, i32* %4, align 4
  %6 = getelementptr inbounds %"class.gfx::Rect", %"class.gfx::Rect"* %2, i64 0, i32 0, i32 0
  %7 = load i32, i32* %6, align 4
  %8 = sitofp i32 %5 to double
  %9 = sitofp i32 %7 to double
  %10 = fsub double %9, %8
  %11 = fmul double %10, %0
  %12 = fadd double %11, %8
  %13 = fadd double %12, 5.000000e-01
  %14 = tail call double @llvm.floor.f64(double %13) #11
  %15 = fcmp ult double %14, 0xC1E0000000000000
  %16 = fcmp ugt double %14, 0x41DFFFFFFFC00000
  %17 = fcmp ogt double %14, 0xC1E0000000000000
  %18 = select i1 %17, double %14, double 0xC1E0000000000000
  %19 = fptosi double %18 to i32
  %20 = select i1 %15, i32 0, i32 2147483647
  %21 = select i1 %16, i32 %20, i32 %19
  %22 = getelementptr inbounds %"class.gfx::Rect", %"class.gfx::Rect"* %1, i64 0, i32 0, i32 1
  %23 = load i32, i32* %22, align 4
  %24 = getelementptr inbounds %"class.gfx::Rect", %"class.gfx::Rect"* %2, i64 0, i32 0, i32 1
  %25 = load i32, i32* %24, align 4
  %26 = sitofp i32 %23 to double
  %27 = sitofp i32 %25 to double
  %28 = fsub double %27, %26
  %29 = fmul double %28, %0
  %30 = fadd double %29, %26
  %31 = fadd double %30, 5.000000e-01
  %32 = tail call double @llvm.floor.f64(double %31) #11
  %33 = fcmp ult double %32, 0xC1E0000000000000
  %34 = fcmp ugt double %32, 0x41DFFFFFFFC00000
  %35 = fcmp ogt double %32, 0xC1E0000000000000
  %36 = select i1 %35, double %32, double 0xC1E0000000000000
  %37 = fptosi double %36 to i32
  %38 = select i1 %33, i32 0, i32 2147483647
  %39 = select i1 %34, i32 %38, i32 %37
  %40 = getelementptr inbounds %"class.gfx::Rect", %"class.gfx::Rect"* %1, i64 0, i32 1, i32 0
  %41 = load i32, i32* %40, align 4
  %42 = add nsw i32 %41, %5
  %43 = getelementptr inbounds %"class.gfx::Rect", %"class.gfx::Rect"* %2, i64 0, i32 1, i32 0
  %44 = load i32, i32* %43, align 4
  %45 = add nsw i32 %44, %7
  %46 = sitofp i32 %42 to double
  %47 = sitofp i32 %45 to double
  %48 = fsub double %47, %46
  %49 = fmul double %48, %0
  %50 = fadd double %49, %46
  %51 = fadd double %50, 5.000000e-01
  %52 = tail call double @llvm.floor.f64(double %51) #11
  %53 = fcmp ult double %52, 0xC1E0000000000000
  %54 = fcmp ugt double %52, 0x41DFFFFFFFC00000
  %55 = fcmp ogt double %52, 0xC1E0000000000000
  %56 = select i1 %55, double %52, double 0xC1E0000000000000
  %57 = fptosi double %56 to i32
  %58 = select i1 %53, i32 0, i32 2147483647
  %59 = select i1 %54, i32 %58, i32 %57
  %60 = getelementptr inbounds %"class.gfx::Rect", %"class.gfx::Rect"* %1, i64 0, i32 1, i32 1
  %61 = load i32, i32* %60, align 4
  %62 = add nsw i32 %61, %23
  %63 = getelementptr inbounds %"class.gfx::Rect", %"class.gfx::Rect"* %2, i64 0, i32 1, i32 1
  %64 = load i32, i32* %63, align 4
  %65 = add nsw i32 %64, %25
  %66 = sitofp i32 %62 to double
  %67 = sitofp i32 %65 to double
  %68 = fsub double %67, %66
  %69 = fmul double %68, %0
  %70 = fadd double %69, %66
  %71 = fadd double %70, 5.000000e-01
  %72 = tail call double @llvm.floor.f64(double %71) #11
  %73 = fcmp ult double %72, 0xC1E0000000000000
  %74 = fcmp ugt double %72, 0x41DFFFFFFFC00000
  %75 = fcmp ogt double %72, 0xC1E0000000000000
  %76 = select i1 %75, double %72, double 0xC1E0000000000000
  %77 = fptosi double %76 to i32
  %78 = select i1 %73, i32 0, i32 2147483647
  %79 = select i1 %74, i32 %78, i32 %77
  %80 = sub nsw i32 %59, %21
  %81 = sub nsw i32 %79, %39
  %82 = icmp sgt i32 %21, 0
  %83 = icmp sgt i32 %80, 0
  %84 = and i1 %82, %83
  %85 = sub nuw nsw i32 2147483647, %21
  %86 = icmp ult i32 %85, %80
  %87 = and i1 %86, %84
  %88 = select i1 %87, i32 %85, i32 %80
  %89 = icmp sgt i32 %39, 0
  %90 = icmp sgt i32 %81, 0
  %91 = and i1 %89, %90
  %92 = sub nuw nsw i32 2147483647, %39
  %93 = icmp ult i32 %92, %81
  %94 = and i1 %93, %91
  %95 = select i1 %94, i32 %92, i32 %81
  %96 = icmp sgt i32 %88, 0
  %97 = select i1 %96, i32 %88, i32 0
  %98 = icmp sgt i32 %95, 0
  %99 = select i1 %98, i32 %95, i32 0
  %100 = zext i32 %39 to i64
  %101 = shl nuw i64 %100, 32
  %102 = zext i32 %21 to i64
  %103 = or i64 %101, %102
  %104 = insertvalue { i64, i64 } undef, i64 %103, 0
  %105 = zext i32 %99 to i64
  %106 = shl nuw nsw i64 %105, 32
  %107 = zext i32 %97 to i64
  %108 = or i64 %106, %107
  %109 = insertvalue { i64, i64 } %104, i64 %108, 1
  ret { i64, i64 } %109
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden { <2 x float>, <2 x float> } @_ZN3gfx5Tween17RectFValueBetweenEdRKNS_5RectFES3_(double, %"class.gfx::RectF"* nocapture readonly dereferenceable(16), %"class.gfx::RectF"* nocapture readonly dereferenceable(16)) local_unnamed_addr #7 align 2 {
  %4 = getelementptr inbounds %"class.gfx::RectF", %"class.gfx::RectF"* %1, i64 0, i32 0, i32 0
  %5 = load float, float* %4, align 4
  %6 = getelementptr inbounds %"class.gfx::RectF", %"class.gfx::RectF"* %2, i64 0, i32 0, i32 0
  %7 = load float, float* %6, align 4
  %8 = getelementptr inbounds %"class.gfx::RectF", %"class.gfx::RectF"* %1, i64 0, i32 0, i32 1
  %9 = load float, float* %8, align 4
  %10 = getelementptr inbounds %"class.gfx::RectF", %"class.gfx::RectF"* %2, i64 0, i32 0, i32 1
  %11 = load float, float* %10, align 4
  %12 = getelementptr inbounds %"class.gfx::RectF", %"class.gfx::RectF"* %1, i64 0, i32 1, i32 0
  %13 = load float, float* %12, align 4
  %14 = fadd float %5, %13
  %15 = getelementptr inbounds %"class.gfx::RectF", %"class.gfx::RectF"* %2, i64 0, i32 1, i32 0
  %16 = load float, float* %15, align 4
  %17 = fadd float %7, %16
  %18 = insertelement <2 x float> undef, float %14, i32 0
  %19 = insertelement <2 x float> %18, float %5, i32 1
  %20 = fpext <2 x float> %19 to <2 x double>
  %21 = insertelement <2 x float> undef, float %17, i32 0
  %22 = insertelement <2 x float> %21, float %7, i32 1
  %23 = fsub <2 x float> %22, %19
  %24 = fpext <2 x float> %23 to <2 x double>
  %25 = insertelement <2 x double> undef, double %0, i32 0
  %26 = shufflevector <2 x double> %25, <2 x double> undef, <2 x i32> zeroinitializer
  %27 = fmul <2 x double> %26, %24
  %28 = fadd <2 x double> %27, %20
  %29 = fptrunc <2 x double> %28 to <2 x float>
  %30 = getelementptr inbounds %"class.gfx::RectF", %"class.gfx::RectF"* %1, i64 0, i32 1, i32 1
  %31 = load float, float* %30, align 4
  %32 = fadd float %9, %31
  %33 = getelementptr inbounds %"class.gfx::RectF", %"class.gfx::RectF"* %2, i64 0, i32 1, i32 1
  %34 = load float, float* %33, align 4
  %35 = fadd float %11, %34
  %36 = insertelement <2 x float> undef, float %32, i32 0
  %37 = insertelement <2 x float> %36, float %9, i32 1
  %38 = fpext <2 x float> %37 to <2 x double>
  %39 = insertelement <2 x float> undef, float %35, i32 0
  %40 = insertelement <2 x float> %39, float %11, i32 1
  %41 = fsub <2 x float> %40, %37
  %42 = fpext <2 x float> %41 to <2 x double>
  %43 = fmul <2 x double> %26, %42
  %44 = fadd <2 x double> %43, %38
  %45 = fptrunc <2 x double> %44 to <2 x float>
  %46 = extractelement <2 x float> %29, i32 0
  %47 = extractelement <2 x float> %29, i32 1
  %48 = fsub float %46, %47
  %49 = extractelement <2 x float> %45, i32 0
  %50 = extractelement <2 x float> %45, i32 1
  %51 = fsub float %49, %50
  %52 = shufflevector <2 x float> %29, <2 x float> %45, <2 x i32> <i32 1, i32 3>
  %53 = fcmp ogt float %48, 0x3EB0000000000000
  %54 = select i1 %53, float %48, float 0.000000e+00
  %55 = insertelement <2 x float> undef, float %54, i32 0
  %56 = fcmp ogt float %51, 0x3EB0000000000000
  %57 = select i1 %56, float %51, float 0.000000e+00
  %58 = insertelement <2 x float> %55, float %57, i32 1
  %59 = insertvalue { <2 x float>, <2 x float> } undef, <2 x float> %52, 0
  %60 = insertvalue { <2 x float>, <2 x float> } %59, <2 x float> %58, 1
  ret { <2 x float>, <2 x float> } %60
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN3gfx5Tween21TransformValueBetweenEdRKNS_9TransformES3_(%"class.gfx::Transform"* noalias nocapture sret, double, %"class.gfx::Transform"* dereferenceable(68), %"class.gfx::Transform"* nocapture readonly dereferenceable(68)) local_unnamed_addr #0 align 2 {
  %5 = alloca %"class.gfx::Transform", align 4
  %6 = fcmp ult double %1, 1.000000e+00
  br i1 %6, label %10, label %7

7:                                                ; preds = %4
  %8 = bitcast %"class.gfx::Transform"* %0 to i8*
  %9 = bitcast %"class.gfx::Transform"* %3 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %8, i8* align 4 %9, i64 68, i1 false) #11
  br label %20

10:                                               ; preds = %4
  %11 = fcmp ugt double %1, 0.000000e+00
  br i1 %11, label %15, label %12

12:                                               ; preds = %10
  %13 = bitcast %"class.gfx::Transform"* %0 to i8*
  %14 = bitcast %"class.gfx::Transform"* %2 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %13, i8* align 4 %14, i64 68, i1 false) #11
  br label %20

15:                                               ; preds = %10
  %16 = bitcast %"class.gfx::Transform"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 68, i8* nonnull %16) #11
  %17 = bitcast %"class.gfx::Transform"* %3 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %16, i8* align 4 %17, i64 68, i1 false) #11
  %18 = call zeroext i1 @_ZN3gfx9Transform5BlendERKS0_d(%"class.gfx::Transform"* nonnull %5, %"class.gfx::Transform"* dereferenceable(68) %2, double %1) #11
  %19 = bitcast %"class.gfx::Transform"* %0 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %19, i8* nonnull align 4 %16, i64 68, i1 false) #11
  call void @llvm.lifetime.end.p0i8(i64 68, i8* nonnull %16) #11
  br label %20

20:                                               ; preds = %15, %12, %7
  ret void
}

declare zeroext i1 @_ZN3gfx9Transform5BlendERKS0_d(%"class.gfx::Transform"*, %"class.gfx::Transform"* dereferenceable(68), double) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN3gfx5Tween31TransformOperationsValueBetweenEdRKNS_19TransformOperationsES3_(%"class.gfx::TransformOperations"* noalias sret, double, %"class.gfx::TransformOperations"* dereferenceable(64), %"class.gfx::TransformOperations"* dereferenceable(64)) local_unnamed_addr #0 align 2 {
  %5 = fptrunc double %1 to float
  tail call void @_ZNK3gfx19TransformOperations5BlendERKS0_f(%"class.gfx::TransformOperations"* sret %0, %"class.gfx::TransformOperations"* %3, %"class.gfx::TransformOperations"* dereferenceable(64) %2, float %5) #11
  ret void
}

declare void @_ZNK3gfx19TransformOperations5BlendERKS0_f(%"class.gfx::TransformOperations"* sret, %"class.gfx::TransformOperations"*, %"class.gfx::TransformOperations"* dereferenceable(64), float) local_unnamed_addr #2

; Function Attrs: nounwind readonly ssp uwtable
define hidden i64 @_ZN3gfx5Tween16SizeValueBetweenEdRKNS_4SizeES3_(double, %"class.gfx::Size"* nocapture readonly dereferenceable(8), %"class.gfx::Size"* nocapture readonly dereferenceable(8)) local_unnamed_addr #6 align 2 {
  %4 = getelementptr inbounds %"class.gfx::Size", %"class.gfx::Size"* %1, i64 0, i32 0
  %5 = load i32, i32* %4, align 4
  %6 = getelementptr inbounds %"class.gfx::Size", %"class.gfx::Size"* %2, i64 0, i32 0
  %7 = load i32, i32* %6, align 4
  %8 = sitofp i32 %5 to double
  %9 = sitofp i32 %7 to double
  %10 = fsub double %9, %8
  %11 = fmul double %10, %0
  %12 = fadd double %11, %8
  %13 = fadd double %12, 5.000000e-01
  %14 = tail call double @llvm.floor.f64(double %13) #11
  %15 = fcmp ult double %14, 0xC1E0000000000000
  %16 = fcmp ugt double %14, 0x41DFFFFFFFC00000
  %17 = fcmp ogt double %14, 0xC1E0000000000000
  %18 = select i1 %17, double %14, double 0xC1E0000000000000
  %19 = fptosi double %18 to i32
  %20 = select i1 %15, i32 0, i32 2147483647
  %21 = select i1 %16, i32 %20, i32 %19
  %22 = getelementptr inbounds %"class.gfx::Size", %"class.gfx::Size"* %1, i64 0, i32 1
  %23 = load i32, i32* %22, align 4
  %24 = getelementptr inbounds %"class.gfx::Size", %"class.gfx::Size"* %2, i64 0, i32 1
  %25 = load i32, i32* %24, align 4
  %26 = sitofp i32 %23 to double
  %27 = sitofp i32 %25 to double
  %28 = fsub double %27, %26
  %29 = fmul double %28, %0
  %30 = fadd double %29, %26
  %31 = fadd double %30, 5.000000e-01
  %32 = tail call double @llvm.floor.f64(double %31) #11
  %33 = fcmp ult double %32, 0xC1E0000000000000
  %34 = fcmp ugt double %32, 0x41DFFFFFFFC00000
  %35 = fcmp ogt double %32, 0xC1E0000000000000
  %36 = select i1 %35, double %32, double 0xC1E0000000000000
  %37 = fptosi double %36 to i32
  %38 = select i1 %33, i32 0, i32 2147483647
  %39 = select i1 %34, i32 %38, i32 %37
  %40 = icmp sgt i32 %21, 0
  %41 = select i1 %40, i32 %21, i32 0
  %42 = icmp sgt i32 %39, 0
  %43 = select i1 %42, i32 %39, i32 0
  %44 = zext i32 %43 to i64
  %45 = shl nuw nsw i64 %44, 32
  %46 = zext i32 %41 to i64
  %47 = or i64 %45, %46
  ret i64 %47
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden <2 x float> @_ZN3gfx5Tween17SizeFValueBetweenEdRKNS_5SizeFES3_(double, %"class.gfx::SizeF"* nocapture readonly dereferenceable(8), %"class.gfx::SizeF"* nocapture readonly dereferenceable(8)) local_unnamed_addr #8 align 2 {
  %4 = bitcast %"class.gfx::SizeF"* %1 to <2 x float>*
  %5 = load <2 x float>, <2 x float>* %4, align 4
  %6 = bitcast %"class.gfx::SizeF"* %2 to <2 x float>*
  %7 = load <2 x float>, <2 x float>* %6, align 4
  %8 = fpext <2 x float> %5 to <2 x double>
  %9 = fsub <2 x float> %7, %5
  %10 = fpext <2 x float> %9 to <2 x double>
  %11 = insertelement <2 x double> undef, double %0, i32 0
  %12 = shufflevector <2 x double> %11, <2 x double> undef, <2 x i32> zeroinitializer
  %13 = fmul <2 x double> %12, %10
  %14 = fadd <2 x double> %13, %8
  %15 = fptrunc <2 x double> %14 to <2 x float>
  %16 = fcmp ogt <2 x float> %15, <float 0x3EB0000000000000, float 0x3EB0000000000000>
  %17 = select <2 x i1> %16, <2 x float> %15, <2 x float> zeroinitializer
  ret <2 x float> %17
}

; Function Attrs: nounwind readnone speculatable
declare float @llvm.floor.f32(float) #9

; Function Attrs: nounwind readnone speculatable
declare float @llvm.ceil.f32(float) #9

declare void @_ZN7logging10CheckError5CheckEPKciS2_(%"class.logging::CheckError"* sret, i8*, i32, i8*) local_unnamed_addr #2

declare dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"*) local_unnamed_addr #2

; Function Attrs: nounwind
declare void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"*) unnamed_addr #10

; Function Attrs: nofree nounwind
declare double @pow(double, double) local_unnamed_addr #3

; Function Attrs: nounwind
declare double @nextafter(double, double) local_unnamed_addr #10

; Function Attrs: nounwind readnone speculatable
declare double @llvm.floor.f64(double) #9

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind readnone ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { norecurse nounwind readnone ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nounwind readonly ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { norecurse nounwind readonly ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { norecurse nounwind readonly ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="64" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #9 = { nounwind readnone speculatable }
attributes #10 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #11 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
