; ModuleID = '../../third_party/webrtc/rtc_base/async_resolver.cc'
source_filename = "../../third_party/webrtc/rtc_base/async_resolver.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"struct.std::__1::__function::__policy" = type { i8* (i8*)*, void (i8*)*, i8, %"class.std::type_info"* }
%"class.std::type_info" = type { i32 (...)**, i8* }
%"class.rtc::AsyncResolver" = type { %"class.rtc::AsyncResolverInterface", %"class.rtc::SocketAddress", %"class.std::__1::vector", i32, i8, i8, %"class.rtc::scoped_refptr" }
%"class.rtc::AsyncResolverInterface" = type { i32 (...)**, %"class.sigslot::signal_with_thread_policy" }
%"class.sigslot::signal_with_thread_policy" = type { %"class.sigslot::_signal_base.base", [7 x i8] }
%"class.sigslot::_signal_base.base" = type <{ %"class.sigslot::_signal_base_interface", %"class.std::__1::list", %"class.std::__1::__list_iterator", i8 }>
%"class.sigslot::_signal_base_interface" = type { void (%"class.sigslot::_signal_base_interface"*, %"class.sigslot::has_slots_interface"*)*, void (%"class.sigslot::_signal_base_interface"*, %"class.sigslot::has_slots_interface"*, %"class.sigslot::has_slots_interface"*)* }
%"class.sigslot::has_slots_interface" = type { i32 (...)**, void (%"class.sigslot::has_slots_interface"*, %"class.sigslot::_signal_base_interface"*)*, void (%"class.sigslot::has_slots_interface"*, %"class.sigslot::_signal_base_interface"*)*, void (%"class.sigslot::has_slots_interface"*)* }
%"class.std::__1::list" = type { %"class.std::__1::__list_imp" }
%"class.std::__1::__list_imp" = type { %"struct.std::__1::__list_node_base", %"class.std::__1::__compressed_pair.8" }
%"struct.std::__1::__list_node_base" = type { %"struct.std::__1::__list_node_base"*, %"struct.std::__1::__list_node_base"* }
%"class.std::__1::__compressed_pair.8" = type { %"struct.std::__1::__compressed_pair_elem.9" }
%"struct.std::__1::__compressed_pair_elem.9" = type { i64 }
%"class.std::__1::__list_iterator" = type { %"struct.std::__1::__list_node_base"* }
%"class.rtc::SocketAddress" = type <{ %"class.std::__1::basic_string", %"class.rtc::IPAddress", i16, [2 x i8], i32, i8, [7 x i8] }>
%"class.std::__1::basic_string" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" = type { %union.anon }
%union.anon = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" = type { i8*, i64, i64 }
%"class.rtc::IPAddress" = type <{ i32 (...)**, i32, %union.anon.1, [4 x i8] }>
%union.anon.1 = type { %struct.in6_addr }
%struct.in6_addr = type { %union.anon.2 }
%union.anon.2 = type { [4 x i32] }
%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { %"class.rtc::IPAddress"*, %"class.rtc::IPAddress"*, %"class.std::__1::__compressed_pair.3" }
%"class.std::__1::__compressed_pair.3" = type { %"struct.std::__1::__compressed_pair_elem.4" }
%"struct.std::__1::__compressed_pair_elem.4" = type { %"class.rtc::IPAddress"* }
%"class.rtc::scoped_refptr" = type { %"struct.rtc::AsyncResolver::State"* }
%"struct.rtc::AsyncResolver::State" = type <{ %"class.rtc::RefCountedBase.base", [4 x i8], %"class.webrtc::Mutex", i32, [4 x i8] }>
%"class.rtc::RefCountedBase.base" = type <{ i32 (...)**, %"class.webrtc::webrtc_impl::RefCounter" }>
%"class.webrtc::webrtc_impl::RefCounter" = type { %"struct.std::__1::atomic" }
%"struct.std::__1::atomic" = type { %"struct.std::__1::__atomic_base" }
%"struct.std::__1::__atomic_base" = type { %"struct.std::__1::__atomic_base.13" }
%"struct.std::__1::__atomic_base.13" = type { %"struct.std::__1::__cxx_atomic_impl" }
%"struct.std::__1::__cxx_atomic_impl" = type { %"struct.std::__1::__cxx_atomic_base_impl" }
%"struct.std::__1::__cxx_atomic_base_impl" = type { i32 }
%"class.webrtc::Mutex" = type { %"class.webrtc::MutexImpl" }
%"class.webrtc::MutexImpl" = type { %union.pthread_mutex_t }
%union.pthread_mutex_t = type { %struct.__pthread_mutex_s }
%struct.__pthread_mutex_s = type { i32, i32, i32, i32, i32, i16, i16, %struct.__pthread_internal_list }
%struct.__pthread_internal_list = type { %struct.__pthread_internal_list*, %struct.__pthread_internal_list* }
%struct.addrinfo = type { i32, i32, i32, i32, i32, %struct.sockaddr*, i8*, %struct.addrinfo* }
%struct.sockaddr = type { i16, [14 x i8] }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short" = type { [23 x i8], %struct.anon }
%struct.anon = type { i8 }
%union.pthread_mutexattr_t = type { i32 }
%"class.rtc::RefCountedBase" = type <{ i32 (...)**, %"class.webrtc::webrtc_impl::RefCounter", [4 x i8] }>
%"union.std::__1::__function::__policy_storage" = type { i8*, [8 x i8] }
%"class.rtc::PlatformThread" = type <{ i32 (...)**, %"class.absl::optional", i8, [7 x i8] }>
%"class.absl::optional" = type { %"class.absl::optional_internal::optional_data" }
%"class.absl::optional_internal::optional_data" = type { %"class.absl::optional_internal::optional_data_base" }
%"class.absl::optional_internal::optional_data_base" = type { %"class.absl::optional_internal::optional_data_dtor_base" }
%"class.absl::optional_internal::optional_data_dtor_base" = type { i8, %union.anon.14 }
%union.anon.14 = type { i64 }
%"class.std::__1::function" = type { %"class.std::__1::__function::__policy_func" }
%"class.std::__1::__function::__policy_func" = type { %"union.std::__1::__function::__policy_storage", %"struct.std::__1::__function::__policy_invoker", %"struct.std::__1::__function::__policy"* }
%"struct.std::__1::__function::__policy_invoker" = type { void (%"union.std::__1::__function::__policy_storage"*)* }
%class.anon = type { %"class.rtc::AsyncResolver"*, %"class.rtc::SocketAddress", %"class.webrtc::TaskQueueBase"*, %"class.rtc::scoped_refptr" }
%"class.webrtc::TaskQueueBase" = type { i32 (...)** }
%"struct.std::__1::__list_node" = type { %"struct.std::__1::__list_node_base", %"class.sigslot::_opaque_connection" }
%"class.sigslot::_opaque_connection" = type { void (%"class.sigslot::_opaque_connection"*)*, %"class.sigslot::has_slots_interface"*, [16 x i8] }
%"class.std::__1::__vector_base_common" = type { i8 }
%"class.std::__1::__function::__default_alloc_func" = type { %class.anon }
%"class.std::__1::__basic_string_common" = type { i8 }
%"class.webrtc::QueuedTask" = type { i32 (...)** }
%"class.webrtc::webrtc_new_closure_impl::ClosureTask" = type { %"class.webrtc::QueuedTask", %class.anon.25 }
%class.anon.25 = type { %"class.rtc::AsyncResolver"*, i32, %"class.std::__1::vector", %"class.rtc::scoped_refptr" }

$_ZN3rtc9IPAddressD2Ev = comdat any

$_ZN3rtc9IPAddressD0Ev = comdat any

$_ZN3rtc13AsyncResolver5StateD2Ev = comdat any

$_ZN3rtc13AsyncResolver5StateD0Ev = comdat any

$_ZNSt3__16vectorIN3rtc9IPAddressENS_9allocatorIS2_EEE21__push_back_slow_pathIRKS2_EEvOT_ = comdat any

$_ZNSt3__16vectorIN3rtc9IPAddressENS_9allocatorIS2_EEE6assignIPS2_EENS_9enable_ifIXaasr27__is_cpp17_forward_iteratorIT_EE5valuesr16is_constructibleIS2_NS_15iterator_traitsIS9_E9referenceEEE5valueEvE4typeES9_S9_ = comdat any

$_ZTVN3rtc9IPAddressE = comdat any

$_ZTVN3rtc13AsyncResolver5StateE = comdat any

@_ZTVN3rtc13AsyncResolverE = hidden unnamed_addr constant { [8 x i8*] } { [8 x i8*] [i8* null, i8* null, i8* bitcast (void (%"class.rtc::AsyncResolver"*)* @_ZN3rtc13AsyncResolverD2Ev to i8*), i8* bitcast (void (%"class.rtc::AsyncResolver"*)* @_ZN3rtc13AsyncResolverD0Ev to i8*), i8* bitcast (void (%"class.rtc::AsyncResolver"*, %"class.rtc::SocketAddress"*)* @_ZN3rtc13AsyncResolver5StartERKNS_13SocketAddressE to i8*), i8* bitcast (i1 (%"class.rtc::AsyncResolver"*, i32, %"class.rtc::SocketAddress"*)* @_ZNK3rtc13AsyncResolver18GetResolvedAddressEiPNS_13SocketAddressE to i8*), i8* bitcast (i32 (%"class.rtc::AsyncResolver"*)* @_ZNK3rtc13AsyncResolver8GetErrorEv to i8*), i8* bitcast (void (%"class.rtc::AsyncResolver"*, i1)* @_ZN3rtc13AsyncResolver7DestroyEb to i8*)] }, align 8
@.str = private unnamed_addr constant [14 x i8] c"AsyncResolver\00", align 1
@_ZTVN3rtc9IPAddressE = linkonce_odr hidden unnamed_addr constant { [4 x i8*] } { [4 x i8*] [i8* null, i8* null, i8* bitcast (void (%"class.rtc::IPAddress"*)* @_ZN3rtc9IPAddressD2Ev to i8*), i8* bitcast (void (%"class.rtc::IPAddress"*)* @_ZN3rtc9IPAddressD0Ev to i8*)] }, comdat, align 8
@_ZTVN3rtc13AsyncResolver5StateE = linkonce_odr hidden unnamed_addr constant { [4 x i8*] } { [4 x i8*] [i8* null, i8* null, i8* bitcast (void (%"struct.rtc::AsyncResolver::State"*)* @_ZN3rtc13AsyncResolver5StateD2Ev to i8*), i8* bitcast (void (%"struct.rtc::AsyncResolver::State"*)* @_ZN3rtc13AsyncResolver5StateD0Ev to i8*)] }, comdat, align 8
@"_ZTVN6webrtc23webrtc_new_closure_impl11ClosureTaskIZZN3rtc13AsyncResolver5StartERKNS2_13SocketAddressEENK3$_0clEvEUlvE_EE" = internal unnamed_addr constant { [5 x i8*] } { [5 x i8*] [i8* null, i8* null, i8* bitcast (void (%"class.webrtc::webrtc_new_closure_impl::ClosureTask"*)* @"_ZN6webrtc23webrtc_new_closure_impl11ClosureTaskIZZN3rtc13AsyncResolver5StartERKNS2_13SocketAddressEENK3$_0clEvEUlvE_ED2Ev" to i8*), i8* bitcast (void (%"class.webrtc::webrtc_new_closure_impl::ClosureTask"*)* @"_ZN6webrtc23webrtc_new_closure_impl11ClosureTaskIZZN3rtc13AsyncResolver5StartERKNS2_13SocketAddressEENK3$_0clEvEUlvE_ED0Ev" to i8*), i8* bitcast (i1 (%"class.webrtc::webrtc_new_closure_impl::ClosureTask"*)* @"_ZN6webrtc23webrtc_new_closure_impl11ClosureTaskIZZN3rtc13AsyncResolver5StartERKNS2_13SocketAddressEENK3$_0clEvEUlvE_E3RunEv" to i8*)] }, align 8
@"_ZZNSt3__110__function8__policy15__choose_policyINS0_20__default_alloc_funcIZN3rtc13AsyncResolver5StartERKNS4_13SocketAddressEE3$_0FvvEEEEEPKS1_NS_17integral_constantIbLb0EEEE9__policy_" = internal constant %"struct.std::__1::__function::__policy" { i8* (i8*)* @"_ZNSt3__110__function8__policy13__large_cloneINS0_20__default_alloc_funcIZN3rtc13AsyncResolver5StartERKNS4_13SocketAddressEE3$_0FvvEEEEEPvPKv", void (i8*)* @"_ZNSt3__110__function8__policy15__large_destroyINS0_20__default_alloc_funcIZN3rtc13AsyncResolver5StartERKNS4_13SocketAddressEE3$_0FvvEEEEEvPv", i8 0, %"class.std::type_info"* null }, align 8

@_ZN3rtc13AsyncResolverC1Ev = hidden unnamed_addr alias void (%"class.rtc::AsyncResolver"*), void (%"class.rtc::AsyncResolver"*)* @_ZN3rtc13AsyncResolverC2Ev
@_ZN3rtc13AsyncResolverD1Ev = hidden unnamed_addr alias void (%"class.rtc::AsyncResolver"*), void (%"class.rtc::AsyncResolver"*)* @_ZN3rtc13AsyncResolverD2Ev

; Function Attrs: nounwind ssp uwtable
define hidden i32 @_ZN3rtc15ResolveHostnameERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEiPNS0_6vectorINS_9IPAddressENS4_ISA_EEEE(%"class.std::__1::basic_string"* dereferenceable(24), i32, %"class.std::__1::vector"*) local_unnamed_addr #0 {
  %4 = alloca %struct.addrinfo*, align 8
  %5 = alloca %struct.addrinfo, align 8
  %6 = alloca %"class.rtc::IPAddress", align 8
  %7 = icmp eq %"class.std::__1::vector"* %2, null
  br i1 %7, label %84, label %8

8:                                                ; preds = %3
  %9 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %2, i64 0, i32 0, i32 0
  %10 = load %"class.rtc::IPAddress"*, %"class.rtc::IPAddress"** %9, align 8
  %11 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %2, i64 0, i32 0, i32 1
  %12 = load %"class.rtc::IPAddress"*, %"class.rtc::IPAddress"** %11, align 8
  %13 = icmp eq %"class.rtc::IPAddress"* %12, %10
  br i1 %13, label %21, label %14

14:                                               ; preds = %8, %14
  %15 = phi %"class.rtc::IPAddress"* [ %16, %14 ], [ %12, %8 ]
  %16 = getelementptr inbounds %"class.rtc::IPAddress", %"class.rtc::IPAddress"* %15, i64 -1
  %17 = bitcast %"class.rtc::IPAddress"* %16 to void (%"class.rtc::IPAddress"*)***
  %18 = load void (%"class.rtc::IPAddress"*)**, void (%"class.rtc::IPAddress"*)*** %17, align 8
  %19 = load void (%"class.rtc::IPAddress"*)*, void (%"class.rtc::IPAddress"*)** %18, align 8
  tail call void %19(%"class.rtc::IPAddress"* %16) #12
  %20 = icmp eq %"class.rtc::IPAddress"* %16, %10
  br i1 %20, label %21, label %14

21:                                               ; preds = %14, %8
  store %"class.rtc::IPAddress"* %10, %"class.rtc::IPAddress"** %11, align 8
  %22 = bitcast %struct.addrinfo** %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %22) #12
  store %struct.addrinfo* null, %struct.addrinfo** %4, align 8
  %23 = bitcast %struct.addrinfo* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 48, i8* nonnull %23) #12
  %24 = getelementptr inbounds %struct.addrinfo, %struct.addrinfo* %5, i64 0, i32 2
  %25 = bitcast i32* %24 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %25, i8 0, i64 40, i1 false)
  %26 = getelementptr inbounds %struct.addrinfo, %struct.addrinfo* %5, i64 0, i32 1
  store i32 %1, i32* %26, align 4
  %27 = getelementptr inbounds %struct.addrinfo, %struct.addrinfo* %5, i64 0, i32 0
  store i32 32, i32* %27, align 8
  %28 = bitcast %"class.std::__1::basic_string"* %0 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %29 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %28, i64 0, i32 1, i32 0
  %30 = load i8, i8* %29, align 1
  %31 = icmp slt i8 %30, 0
  %32 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %33 = load i8*, i8** %32, align 8
  %34 = bitcast %"class.std::__1::basic_string"* %0 to i8*
  %35 = select i1 %31, i8* %33, i8* %34
  %36 = call i32 @getaddrinfo(i8* %35, i8* null, %struct.addrinfo* nonnull %5, %struct.addrinfo** nonnull %4) #12
  %37 = icmp eq i32 %36, 0
  br i1 %37, label %38, label %82

38:                                               ; preds = %21
  %39 = load %struct.addrinfo*, %struct.addrinfo** %4, align 8
  %40 = icmp eq %struct.addrinfo* %39, null
  br i1 %40, label %80, label %41

41:                                               ; preds = %38
  %42 = icmp eq i32 %1, 0
  %43 = bitcast %"class.rtc::IPAddress"* %6 to i8*
  %44 = getelementptr inbounds %"class.rtc::IPAddress", %"class.rtc::IPAddress"* %6, i64 0, i32 0
  %45 = getelementptr inbounds %"class.rtc::IPAddress", %"class.rtc::IPAddress"* %6, i64 0, i32 1
  %46 = bitcast i32* %45 to i8*
  %47 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %2, i64 0, i32 0, i32 2, i32 0, i32 0
  %48 = getelementptr inbounds %"class.rtc::IPAddress", %"class.rtc::IPAddress"* %6, i64 0, i32 2
  %49 = bitcast %union.anon.1* %48 to i8*
  %50 = bitcast %"class.rtc::IPAddress"** %11 to i64*
  %51 = bitcast %"class.rtc::IPAddress"* %6 to i8*
  br label %52

52:                                               ; preds = %41, %74
  %53 = phi %struct.addrinfo* [ %39, %41 ], [ %76, %74 ]
  br i1 %42, label %58, label %54

54:                                               ; preds = %52
  %55 = getelementptr inbounds %struct.addrinfo, %struct.addrinfo* %53, i64 0, i32 1
  %56 = load i32, i32* %55, align 4
  %57 = icmp eq i32 %56, %1
  br i1 %57, label %58, label %74

58:                                               ; preds = %54, %52
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %43) #12
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %51, i8 -86, i64 32, i1 false)
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [4 x i8*] }, { [4 x i8*] }* @_ZTVN3rtc9IPAddressE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %44, align 8
  call void @llvm.memset.p0i8.i64(i8* align 8 %46, i8 0, i64 20, i1 false) #12
  %59 = call zeroext i1 @_ZN3rtc14IPFromAddrInfoEP8addrinfoPNS_9IPAddressE(%struct.addrinfo* nonnull %53, %"class.rtc::IPAddress"* nonnull %6) #12
  br i1 %59, label %60, label %73

60:                                               ; preds = %58
  %61 = load %"class.rtc::IPAddress"*, %"class.rtc::IPAddress"** %11, align 8
  %62 = load %"class.rtc::IPAddress"*, %"class.rtc::IPAddress"** %47, align 8
  %63 = icmp eq %"class.rtc::IPAddress"* %61, %62
  br i1 %63, label %72, label %64

64:                                               ; preds = %60
  %65 = getelementptr inbounds %"class.rtc::IPAddress", %"class.rtc::IPAddress"* %61, i64 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [4 x i8*] }, { [4 x i8*] }* @_ZTVN3rtc9IPAddressE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %65, align 8
  %66 = getelementptr inbounds %"class.rtc::IPAddress", %"class.rtc::IPAddress"* %61, i64 0, i32 1
  %67 = load i32, i32* %45, align 8
  store i32 %67, i32* %66, align 8
  %68 = getelementptr inbounds %"class.rtc::IPAddress", %"class.rtc::IPAddress"* %61, i64 0, i32 2
  %69 = bitcast %union.anon.1* %68 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %69, i8* align 4 %49, i64 16, i1 false) #12
  %70 = getelementptr inbounds %"class.rtc::IPAddress", %"class.rtc::IPAddress"* %61, i64 1
  %71 = ptrtoint %"class.rtc::IPAddress"* %70 to i64
  store i64 %71, i64* %50, align 8
  br label %73

72:                                               ; preds = %60
  call void @_ZNSt3__16vectorIN3rtc9IPAddressENS_9allocatorIS2_EEE21__push_back_slow_pathIRKS2_EEvOT_(%"class.std::__1::vector"* nonnull %2, %"class.rtc::IPAddress"* nonnull dereferenceable(32) %6) #12
  br label %73

73:                                               ; preds = %72, %64, %58
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %43) #12
  br label %74

74:                                               ; preds = %54, %73
  %75 = getelementptr inbounds %struct.addrinfo, %struct.addrinfo* %53, i64 0, i32 7
  %76 = load %struct.addrinfo*, %struct.addrinfo** %75, align 8
  %77 = icmp eq %struct.addrinfo* %76, null
  br i1 %77, label %78, label %52

78:                                               ; preds = %74
  %79 = load %struct.addrinfo*, %struct.addrinfo** %4, align 8
  br label %80

80:                                               ; preds = %78, %38
  %81 = phi %struct.addrinfo* [ %79, %78 ], [ null, %38 ]
  call void @freeaddrinfo(%struct.addrinfo* %81) #12
  br label %82

82:                                               ; preds = %21, %80
  %83 = phi i32 [ 0, %80 ], [ %36, %21 ]
  call void @llvm.lifetime.end.p0i8(i64 48, i8* nonnull %23) #12
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %22) #12
  br label %84

84:                                               ; preds = %3, %82
  %85 = phi i32 [ %83, %82 ], [ -1, %3 ]
  ret i32 %85
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

declare i32 @getaddrinfo(i8*, i8*, %struct.addrinfo*, %struct.addrinfo**) local_unnamed_addr #2

declare zeroext i1 @_ZN3rtc14IPFromAddrInfoEP8addrinfoPNS_9IPAddressE(%struct.addrinfo*, %"class.rtc::IPAddress"*) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN3rtc9IPAddressD2Ev(%"class.rtc::IPAddress"*) unnamed_addr #0 comdat align 2 {
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nounwind
declare void @freeaddrinfo(%struct.addrinfo*) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN3rtc13AsyncResolverC2Ev(%"class.rtc::AsyncResolver"*) unnamed_addr #0 align 2 {
  %2 = alloca %union.pthread_mutexattr_t, align 4
  %3 = getelementptr inbounds %"class.rtc::AsyncResolver", %"class.rtc::AsyncResolver"* %0, i64 0, i32 0
  tail call void @_ZN3rtc22AsyncResolverInterfaceC2Ev(%"class.rtc::AsyncResolverInterface"* %3) #12
  %4 = getelementptr inbounds %"class.rtc::AsyncResolver", %"class.rtc::AsyncResolver"* %0, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [8 x i8*] }, { [8 x i8*] }* @_ZTVN3rtc13AsyncResolverE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %4, align 8
  %5 = getelementptr inbounds %"class.rtc::AsyncResolver", %"class.rtc::AsyncResolver"* %0, i64 0, i32 1
  tail call void @_ZN3rtc13SocketAddressC1Ev(%"class.rtc::SocketAddress"* %5) #12
  %6 = getelementptr inbounds %"class.rtc::AsyncResolver", %"class.rtc::AsyncResolver"* %0, i64 0, i32 2
  %7 = bitcast %"class.std::__1::vector"* %6 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %7, i8 0, i64 24, i1 false) #12
  %8 = getelementptr inbounds %"class.rtc::AsyncResolver", %"class.rtc::AsyncResolver"* %0, i64 0, i32 3
  store i32 -1, i32* %8, align 8
  %9 = getelementptr inbounds %"class.rtc::AsyncResolver", %"class.rtc::AsyncResolver"* %0, i64 0, i32 4
  store i8 0, i8* %9, align 4
  %10 = getelementptr inbounds %"class.rtc::AsyncResolver", %"class.rtc::AsyncResolver"* %0, i64 0, i32 5
  store i8 0, i8* %10, align 1
  %11 = tail call i8* @_Znwm(i64 64) #13
  %12 = bitcast i8* %11 to i32 (...)***
  %13 = getelementptr inbounds i8, i8* %11, i64 8
  %14 = bitcast i8* %13 to i32*
  store i32 0, i32* %14, align 4
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [4 x i8*] }, { [4 x i8*] }* @_ZTVN3rtc13AsyncResolver5StateE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %12, align 8
  %15 = bitcast %union.pthread_mutexattr_t* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %15) #12
  %16 = getelementptr inbounds %union.pthread_mutexattr_t, %union.pthread_mutexattr_t* %2, i64 0, i32 0
  store i32 -1431655766, i32* %16, align 4
  %17 = call i32 @pthread_mutexattr_init(%union.pthread_mutexattr_t* nonnull %2) #12
  %18 = getelementptr inbounds i8, i8* %11, i64 16
  %19 = bitcast i8* %18 to %union.pthread_mutex_t*
  %20 = call i32 @pthread_mutex_init(%union.pthread_mutex_t* %19, %union.pthread_mutexattr_t* nonnull %2) #12
  %21 = call i32 @pthread_mutexattr_destroy(%union.pthread_mutexattr_t* nonnull %2) #12
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %15) #12
  %22 = getelementptr inbounds i8, i8* %11, i64 56
  %23 = bitcast i8* %22 to i32*
  store i32 0, i32* %23, align 8
  %24 = getelementptr inbounds %"class.rtc::AsyncResolver", %"class.rtc::AsyncResolver"* %0, i64 0, i32 6, i32 0
  %25 = bitcast %"struct.rtc::AsyncResolver::State"** %24 to i8**
  store i8* %11, i8** %25, align 8
  %26 = atomicrmw add i32* %14, i32 1 monotonic
  ret void
}

declare void @_ZN3rtc22AsyncResolverInterfaceC2Ev(%"class.rtc::AsyncResolverInterface"*) unnamed_addr #2

declare void @_ZN3rtc13SocketAddressC1Ev(%"class.rtc::SocketAddress"*) unnamed_addr #2

; Function Attrs: nobuiltin nofree
declare noalias nonnull i8* @_Znwm(i64) local_unnamed_addr #4

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN3rtc13AsyncResolverD2Ev(%"class.rtc::AsyncResolver"*) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.rtc::AsyncResolver", %"class.rtc::AsyncResolver"* %0, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [8 x i8*] }, { [8 x i8*] }* @_ZTVN3rtc13AsyncResolverE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8
  %3 = getelementptr inbounds %"class.rtc::AsyncResolver", %"class.rtc::AsyncResolver"* %0, i64 0, i32 6, i32 0
  %4 = load %"struct.rtc::AsyncResolver::State"*, %"struct.rtc::AsyncResolver::State"** %3, align 8
  %5 = getelementptr inbounds %"struct.rtc::AsyncResolver::State", %"struct.rtc::AsyncResolver::State"* %4, i64 0, i32 2, i32 0, i32 0
  %6 = tail call i32 @pthread_mutex_lock(%union.pthread_mutex_t* %5) #12
  %7 = load %"struct.rtc::AsyncResolver::State"*, %"struct.rtc::AsyncResolver::State"** %3, align 8
  %8 = getelementptr inbounds %"struct.rtc::AsyncResolver::State", %"struct.rtc::AsyncResolver::State"* %7, i64 0, i32 3
  store i32 1, i32* %8, align 8
  %9 = tail call i32 @pthread_mutex_unlock(%union.pthread_mutex_t* %5) #12
  %10 = load %"struct.rtc::AsyncResolver::State"*, %"struct.rtc::AsyncResolver::State"** %3, align 8
  %11 = icmp eq %"struct.rtc::AsyncResolver::State"* %10, null
  br i1 %11, label %22, label %12

12:                                               ; preds = %1
  %13 = getelementptr inbounds %"struct.rtc::AsyncResolver::State", %"struct.rtc::AsyncResolver::State"* %10, i64 0, i32 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %14 = atomicrmw sub i32* %13, i32 1 acq_rel
  %15 = icmp eq i32 %14, 1
  br i1 %15, label %16, label %22

16:                                               ; preds = %12
  %17 = bitcast %"struct.rtc::AsyncResolver::State"* %10 to %"class.rtc::RefCountedBase"*
  %18 = bitcast %"struct.rtc::AsyncResolver::State"* %10 to void (%"class.rtc::RefCountedBase"*)***
  %19 = load void (%"class.rtc::RefCountedBase"*)**, void (%"class.rtc::RefCountedBase"*)*** %18, align 8
  %20 = getelementptr inbounds void (%"class.rtc::RefCountedBase"*)*, void (%"class.rtc::RefCountedBase"*)** %19, i64 1
  %21 = load void (%"class.rtc::RefCountedBase"*)*, void (%"class.rtc::RefCountedBase"*)** %20, align 8
  tail call void %21(%"class.rtc::RefCountedBase"* nonnull %17) #12
  br label %22

22:                                               ; preds = %1, %12, %16
  %23 = getelementptr inbounds %"class.rtc::AsyncResolver", %"class.rtc::AsyncResolver"* %0, i64 0, i32 2
  %24 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %23, i64 0, i32 0, i32 0
  %25 = load %"class.rtc::IPAddress"*, %"class.rtc::IPAddress"** %24, align 8
  %26 = icmp eq %"class.rtc::IPAddress"* %25, null
  br i1 %26, label %44, label %27

27:                                               ; preds = %22
  %28 = bitcast %"class.rtc::IPAddress"* %25 to i8*
  %29 = getelementptr inbounds %"class.rtc::AsyncResolver", %"class.rtc::AsyncResolver"* %0, i64 0, i32 2, i32 0, i32 1
  %30 = load %"class.rtc::IPAddress"*, %"class.rtc::IPAddress"** %29, align 8
  %31 = icmp eq %"class.rtc::IPAddress"* %30, %25
  br i1 %31, label %42, label %32

32:                                               ; preds = %27, %32
  %33 = phi %"class.rtc::IPAddress"* [ %34, %32 ], [ %30, %27 ]
  %34 = getelementptr inbounds %"class.rtc::IPAddress", %"class.rtc::IPAddress"* %33, i64 -1
  %35 = bitcast %"class.rtc::IPAddress"* %34 to void (%"class.rtc::IPAddress"*)***
  %36 = load void (%"class.rtc::IPAddress"*)**, void (%"class.rtc::IPAddress"*)*** %35, align 8
  %37 = load void (%"class.rtc::IPAddress"*)*, void (%"class.rtc::IPAddress"*)** %36, align 8
  tail call void %37(%"class.rtc::IPAddress"* %34) #12
  %38 = icmp eq %"class.rtc::IPAddress"* %34, %25
  br i1 %38, label %39, label %32

39:                                               ; preds = %32
  %40 = bitcast %"class.std::__1::vector"* %23 to i8**
  %41 = load i8*, i8** %40, align 8
  br label %42

42:                                               ; preds = %39, %27
  %43 = phi i8* [ %41, %39 ], [ %28, %27 ]
  store %"class.rtc::IPAddress"* %25, %"class.rtc::IPAddress"** %29, align 8
  tail call void @_ZdlPv(i8* %43) #13
  br label %44

44:                                               ; preds = %22, %42
  %45 = getelementptr inbounds %"class.rtc::AsyncResolver", %"class.rtc::AsyncResolver"* %0, i64 0, i32 1
  %46 = bitcast %"class.rtc::SocketAddress"* %45 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %47 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %46, i64 0, i32 1, i32 0
  %48 = load i8, i8* %47, align 1
  %49 = icmp slt i8 %48, 0
  br i1 %49, label %50, label %53

50:                                               ; preds = %44
  %51 = getelementptr inbounds %"class.rtc::SocketAddress", %"class.rtc::SocketAddress"* %45, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %52 = load i8*, i8** %51, align 8
  tail call void @_ZdlPv(i8* %52) #13
  br label %53

53:                                               ; preds = %44, %50
  %54 = getelementptr inbounds %"class.rtc::AsyncResolver", %"class.rtc::AsyncResolver"* %0, i64 0, i32 0
  tail call void @_ZN3rtc22AsyncResolverInterfaceD2Ev(%"class.rtc::AsyncResolverInterface"* %54) #12
  ret void
}

; Function Attrs: nounwind
declare void @_ZN3rtc22AsyncResolverInterfaceD2Ev(%"class.rtc::AsyncResolverInterface"*) unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN3rtc13AsyncResolverD0Ev(%"class.rtc::AsyncResolver"*) unnamed_addr #0 align 2 {
  tail call void @_ZN3rtc13AsyncResolverD2Ev(%"class.rtc::AsyncResolver"* %0) #12
  %2 = bitcast %"class.rtc::AsyncResolver"* %0 to i8*
  tail call void @_ZdlPv(i8* %2) #13
  ret void
}

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #5

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN3rtc13RunResolutionEPv(i8*) local_unnamed_addr #0 {
  %2 = getelementptr inbounds i8, i8* %0, i64 16
  %3 = bitcast i8* %2 to void (%"union.std::__1::__function::__policy_storage"*)**
  %4 = load void (%"union.std::__1::__function::__policy_storage"*)*, void (%"union.std::__1::__function::__policy_storage"*)** %3, align 8
  %5 = bitcast i8* %0 to %"union.std::__1::__function::__policy_storage"*
  tail call void %4(%"union.std::__1::__function::__policy_storage"* %5) #12
  %6 = icmp eq i8* %0, null
  br i1 %6, label %18, label %7

7:                                                ; preds = %1
  %8 = getelementptr inbounds i8, i8* %0, i64 24
  %9 = bitcast i8* %8 to %"struct.std::__1::__function::__policy"**
  %10 = load %"struct.std::__1::__function::__policy"*, %"struct.std::__1::__function::__policy"** %9, align 8
  %11 = getelementptr inbounds %"struct.std::__1::__function::__policy", %"struct.std::__1::__function::__policy"* %10, i64 0, i32 1
  %12 = load void (i8*)*, void (i8*)** %11, align 8
  %13 = icmp eq void (i8*)* %12, null
  br i1 %13, label %17, label %14

14:                                               ; preds = %7
  %15 = bitcast i8* %0 to i8**
  %16 = load i8*, i8** %15, align 8
  tail call void %12(i8* %16) #12
  br label %17

17:                                               ; preds = %7, %14
  tail call void @_ZdlPv(i8* nonnull %0) #13
  br label %18

18:                                               ; preds = %17, %1
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN3rtc13AsyncResolver5StartERKNS_13SocketAddressE(%"class.rtc::AsyncResolver"*, %"class.rtc::SocketAddress"* dereferenceable(72)) unnamed_addr #0 align 2 {
  %3 = alloca %"class.rtc::PlatformThread", align 8
  %4 = alloca %"class.std::__1::function", align 8
  %5 = alloca %class.anon, align 8
  %6 = getelementptr inbounds %"class.rtc::AsyncResolver", %"class.rtc::AsyncResolver"* %0, i64 0, i32 1
  %7 = tail call dereferenceable(72) %"class.rtc::SocketAddress"* @_ZN3rtc13SocketAddressaSERKS0_(%"class.rtc::SocketAddress"* %6, %"class.rtc::SocketAddress"* dereferenceable(72) %1) #12
  %8 = getelementptr inbounds %class.anon, %class.anon* %5, i64 0, i32 0
  store %"class.rtc::AsyncResolver"* %0, %"class.rtc::AsyncResolver"** %8, align 8
  %9 = getelementptr inbounds %class.anon, %class.anon* %5, i64 0, i32 1
  call void @_ZN3rtc13SocketAddressC1ERKS0_(%"class.rtc::SocketAddress"* %9, %"class.rtc::SocketAddress"* dereferenceable(72) %1) #12
  %10 = getelementptr inbounds %class.anon, %class.anon* %5, i64 0, i32 2
  %11 = call %"class.webrtc::TaskQueueBase"* @_ZN6webrtc13TaskQueueBase7CurrentEv() #12
  store %"class.webrtc::TaskQueueBase"* %11, %"class.webrtc::TaskQueueBase"** %10, align 8
  %12 = getelementptr inbounds %class.anon, %class.anon* %5, i64 0, i32 3, i32 0
  %13 = getelementptr inbounds %"class.rtc::AsyncResolver", %"class.rtc::AsyncResolver"* %0, i64 0, i32 6, i32 0
  %14 = load %"struct.rtc::AsyncResolver::State"*, %"struct.rtc::AsyncResolver::State"** %13, align 8
  store %"struct.rtc::AsyncResolver::State"* %14, %"struct.rtc::AsyncResolver::State"** %12, align 8
  %15 = icmp eq %"struct.rtc::AsyncResolver::State"* %14, null
  br i1 %15, label %19, label %16

16:                                               ; preds = %2
  %17 = getelementptr inbounds %"struct.rtc::AsyncResolver::State", %"struct.rtc::AsyncResolver::State"* %14, i64 0, i32 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %18 = atomicrmw add i32* %17, i32 1 monotonic
  br label %19

19:                                               ; preds = %2, %16
  %20 = getelementptr inbounds %"class.std::__1::function", %"class.std::__1::function"* %4, i64 0, i32 0, i32 1, i32 0
  %21 = getelementptr inbounds %"class.std::__1::function", %"class.std::__1::function"* %4, i64 0, i32 0, i32 2
  store void (%"union.std::__1::__function::__policy_storage"*)* @"_ZNSt3__110__function16__policy_invokerIFvvEE11__call_implINS0_20__default_alloc_funcIZN3rtc13AsyncResolver5StartERKNS6_13SocketAddressEE3$_0S2_EEEEvPKNS0_16__policy_storageE", void (%"union.std::__1::__function::__policy_storage"*)** %20, align 8
  store %"struct.std::__1::__function::__policy"* @"_ZZNSt3__110__function8__policy15__choose_policyINS0_20__default_alloc_funcIZN3rtc13AsyncResolver5StartERKNS4_13SocketAddressEE3$_0FvvEEEEEPKS1_NS_17integral_constantIbLb0EEEE9__policy_", %"struct.std::__1::__function::__policy"** %21, align 8
  %22 = call i8* @_Znwm(i64 96) #13, !noalias !2
  %23 = bitcast %class.anon* %5 to i64*
  %24 = load i64, i64* %23, align 8
  %25 = bitcast i8* %22 to i64*
  store i64 %24, i64* %25, align 8
  %26 = getelementptr inbounds i8, i8* %22, i64 8
  %27 = bitcast i8* %26 to %"class.rtc::SocketAddress"*
  call void @_ZN3rtc13SocketAddressC1ERKS0_(%"class.rtc::SocketAddress"* %27, %"class.rtc::SocketAddress"* dereferenceable(72) %9) #12
  %28 = getelementptr inbounds i8, i8* %22, i64 80
  %29 = bitcast %"class.webrtc::TaskQueueBase"** %10 to <2 x i64>*
  %30 = load <2 x i64>, <2 x i64>* %29, align 8
  store %"struct.rtc::AsyncResolver::State"* null, %"struct.rtc::AsyncResolver::State"** %12, align 8
  %31 = bitcast i8* %28 to <2 x i64>*
  store <2 x i64> %30, <2 x i64>* %31, align 8
  %32 = getelementptr inbounds %"class.std::__1::function", %"class.std::__1::function"* %4, i64 0, i32 0, i32 0, i32 0
  store i8* %22, i8** %32, align 8
  call void @_ZN3rtc14PlatformThread13SpawnDetachedENSt3__18functionIFvvEEEN4absl11string_viewENS_16ThreadAttributesE(%"class.rtc::PlatformThread"* nonnull sret %3, %"class.std::__1::function"* nonnull %4, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str, i64 0, i64 0), i64 13, i32 2) #12
  call void @_ZN3rtc14PlatformThreadD1Ev(%"class.rtc::PlatformThread"* nonnull %3) #12
  %33 = load %"struct.std::__1::__function::__policy"*, %"struct.std::__1::__function::__policy"** %21, align 8
  %34 = getelementptr inbounds %"struct.std::__1::__function::__policy", %"struct.std::__1::__function::__policy"* %33, i64 0, i32 1
  %35 = load void (i8*)*, void (i8*)** %34, align 8
  %36 = icmp eq void (i8*)* %35, null
  br i1 %36, label %39, label %37

37:                                               ; preds = %19
  %38 = load i8*, i8** %32, align 8
  call void %35(i8* %38) #12
  br label %39

39:                                               ; preds = %19, %37
  %40 = getelementptr inbounds %class.anon, %class.anon* %5, i64 0, i32 3, i32 0
  %41 = load %"struct.rtc::AsyncResolver::State"*, %"struct.rtc::AsyncResolver::State"** %40, align 8
  %42 = icmp eq %"struct.rtc::AsyncResolver::State"* %41, null
  br i1 %42, label %53, label %43

43:                                               ; preds = %39
  %44 = getelementptr inbounds %"struct.rtc::AsyncResolver::State", %"struct.rtc::AsyncResolver::State"* %41, i64 0, i32 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %45 = atomicrmw sub i32* %44, i32 1 acq_rel
  %46 = icmp eq i32 %45, 1
  br i1 %46, label %47, label %53

47:                                               ; preds = %43
  %48 = bitcast %"struct.rtc::AsyncResolver::State"* %41 to %"class.rtc::RefCountedBase"*
  %49 = bitcast %"struct.rtc::AsyncResolver::State"* %41 to void (%"class.rtc::RefCountedBase"*)***
  %50 = load void (%"class.rtc::RefCountedBase"*)**, void (%"class.rtc::RefCountedBase"*)*** %49, align 8
  %51 = getelementptr inbounds void (%"class.rtc::RefCountedBase"*)*, void (%"class.rtc::RefCountedBase"*)** %50, i64 1
  %52 = load void (%"class.rtc::RefCountedBase"*)*, void (%"class.rtc::RefCountedBase"*)** %51, align 8
  call void %52(%"class.rtc::RefCountedBase"* nonnull %48) #12
  br label %53

53:                                               ; preds = %47, %43, %39
  %54 = bitcast %"class.rtc::SocketAddress"* %9 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %55 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %54, i64 0, i32 1, i32 0
  %56 = load i8, i8* %55, align 1
  %57 = icmp slt i8 %56, 0
  br i1 %57, label %58, label %61

58:                                               ; preds = %53
  %59 = getelementptr inbounds %"class.rtc::SocketAddress", %"class.rtc::SocketAddress"* %9, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %60 = load i8*, i8** %59, align 8
  call void @_ZdlPv(i8* %60) #13
  br label %61

61:                                               ; preds = %53, %58
  ret void
}

declare dereferenceable(72) %"class.rtc::SocketAddress"* @_ZN3rtc13SocketAddressaSERKS0_(%"class.rtc::SocketAddress"*, %"class.rtc::SocketAddress"* dereferenceable(72)) local_unnamed_addr #2

declare void @_ZN3rtc14PlatformThread13SpawnDetachedENSt3__18functionIFvvEEEN4absl11string_viewENS_16ThreadAttributesE(%"class.rtc::PlatformThread"* sret, %"class.std::__1::function"*, i8*, i64, i32) local_unnamed_addr #2

declare void @_ZN3rtc13SocketAddressC1ERKS0_(%"class.rtc::SocketAddress"*, %"class.rtc::SocketAddress"* dereferenceable(72)) unnamed_addr #2

declare %"class.webrtc::TaskQueueBase"* @_ZN6webrtc13TaskQueueBase7CurrentEv() local_unnamed_addr #2

; Function Attrs: nounwind
declare void @_ZN3rtc14PlatformThreadD1Ev(%"class.rtc::PlatformThread"*) unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZNK3rtc13AsyncResolver18GetResolvedAddressEiPNS_13SocketAddressE(%"class.rtc::AsyncResolver"*, i32, %"class.rtc::SocketAddress"*) unnamed_addr #0 align 2 {
  %4 = getelementptr inbounds %"class.rtc::AsyncResolver", %"class.rtc::AsyncResolver"* %0, i64 0, i32 3
  %5 = load i32, i32* %4, align 8
  %6 = icmp eq i32 %5, 0
  br i1 %6, label %7, label %36

7:                                                ; preds = %3
  %8 = getelementptr inbounds %"class.rtc::AsyncResolver", %"class.rtc::AsyncResolver"* %0, i64 0, i32 2
  %9 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %8, i64 0, i32 0, i32 0
  %10 = load %"class.rtc::IPAddress"*, %"class.rtc::IPAddress"** %9, align 8
  %11 = getelementptr inbounds %"class.rtc::AsyncResolver", %"class.rtc::AsyncResolver"* %0, i64 0, i32 2, i32 0, i32 1
  %12 = load %"class.rtc::IPAddress"*, %"class.rtc::IPAddress"** %11, align 8
  %13 = icmp eq %"class.rtc::IPAddress"* %10, %12
  br i1 %13, label %36, label %14

14:                                               ; preds = %7
  %15 = getelementptr inbounds %"class.rtc::AsyncResolver", %"class.rtc::AsyncResolver"* %0, i64 0, i32 1
  %16 = tail call dereferenceable(72) %"class.rtc::SocketAddress"* @_ZN3rtc13SocketAddressaSERKS0_(%"class.rtc::SocketAddress"* %2, %"class.rtc::SocketAddress"* dereferenceable(72) %15) #12
  %17 = bitcast %"class.rtc::IPAddress"** %11 to i64*
  %18 = load i64, i64* %17, align 8
  %19 = bitcast %"class.std::__1::vector"* %8 to i64*
  %20 = load i64, i64* %19, align 8
  %21 = icmp eq i64 %18, %20
  %22 = inttoptr i64 %20 to %"class.rtc::IPAddress"*
  br i1 %21, label %36, label %23

23:                                               ; preds = %14
  %24 = sub i64 %18, %20
  %25 = ashr exact i64 %24, 5
  br label %26

26:                                               ; preds = %23, %31
  %27 = phi i64 [ 0, %23 ], [ %32, %31 ]
  %28 = getelementptr inbounds %"class.rtc::IPAddress", %"class.rtc::IPAddress"* %22, i64 %27, i32 1
  %29 = load i32, i32* %28, align 8
  %30 = icmp eq i32 %29, %1
  br i1 %30, label %34, label %31

31:                                               ; preds = %26
  %32 = add nuw i64 %27, 1
  %33 = icmp ult i64 %32, %25
  br i1 %33, label %26, label %36

34:                                               ; preds = %26
  %35 = getelementptr inbounds %"class.rtc::IPAddress", %"class.rtc::IPAddress"* %22, i64 %27
  tail call void @_ZN3rtc13SocketAddress13SetResolvedIPERKNS_9IPAddressE(%"class.rtc::SocketAddress"* %2, %"class.rtc::IPAddress"* dereferenceable(32) %35) #12
  br label %36

36:                                               ; preds = %31, %14, %34, %7, %3
  %37 = phi i1 [ false, %3 ], [ false, %7 ], [ true, %34 ], [ false, %14 ], [ false, %31 ]
  ret i1 %37
}

declare void @_ZN3rtc13SocketAddress13SetResolvedIPERKNS_9IPAddressE(%"class.rtc::SocketAddress"*, %"class.rtc::IPAddress"* dereferenceable(32)) local_unnamed_addr #2

; Function Attrs: nounwind readonly ssp uwtable
define hidden i32 @_ZNK3rtc13AsyncResolver8GetErrorEv(%"class.rtc::AsyncResolver"* nocapture readonly) unnamed_addr #6 align 2 {
  %2 = getelementptr inbounds %"class.rtc::AsyncResolver", %"class.rtc::AsyncResolver"* %0, i64 0, i32 3
  %3 = load i32, i32* %2, align 8
  ret i32 %3
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN3rtc13AsyncResolver7DestroyEb(%"class.rtc::AsyncResolver"*, i1 zeroext) unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.rtc::AsyncResolver", %"class.rtc::AsyncResolver"* %0, i64 0, i32 5
  store i8 1, i8* %3, align 1
  %4 = getelementptr inbounds %"class.rtc::AsyncResolver", %"class.rtc::AsyncResolver"* %0, i64 0, i32 4
  %5 = load i8, i8* %4, align 4, !range !7
  %6 = icmp eq i8 %5, 0
  br i1 %6, label %7, label %14

7:                                                ; preds = %2
  %8 = icmp eq %"class.rtc::AsyncResolver"* %0, null
  br i1 %8, label %15, label %9

9:                                                ; preds = %7
  %10 = bitcast %"class.rtc::AsyncResolver"* %0 to void (%"class.rtc::AsyncResolver"*)***
  %11 = load void (%"class.rtc::AsyncResolver"*)**, void (%"class.rtc::AsyncResolver"*)*** %10, align 8
  %12 = getelementptr inbounds void (%"class.rtc::AsyncResolver"*)*, void (%"class.rtc::AsyncResolver"*)** %11, i64 1
  %13 = load void (%"class.rtc::AsyncResolver"*)*, void (%"class.rtc::AsyncResolver"*)** %12, align 8
  tail call void %13(%"class.rtc::AsyncResolver"* nonnull %0) #12
  br label %15

14:                                               ; preds = %2
  store i8 0, i8* %4, align 4
  br label %15

15:                                               ; preds = %7, %9, %14
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN3rtc13AsyncResolver17MaybeSelfDestructEv(%"class.rtc::AsyncResolver"*) local_unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.rtc::AsyncResolver", %"class.rtc::AsyncResolver"* %0, i64 0, i32 4
  %3 = load i8, i8* %2, align 4, !range !7
  %4 = icmp eq i8 %3, 0
  br i1 %4, label %5, label %12

5:                                                ; preds = %1
  %6 = icmp eq %"class.rtc::AsyncResolver"* %0, null
  br i1 %6, label %13, label %7

7:                                                ; preds = %5
  %8 = bitcast %"class.rtc::AsyncResolver"* %0 to void (%"class.rtc::AsyncResolver"*)***
  %9 = load void (%"class.rtc::AsyncResolver"*)**, void (%"class.rtc::AsyncResolver"*)*** %8, align 8
  %10 = getelementptr inbounds void (%"class.rtc::AsyncResolver"*)*, void (%"class.rtc::AsyncResolver"*)** %9, i64 1
  %11 = load void (%"class.rtc::AsyncResolver"*)*, void (%"class.rtc::AsyncResolver"*)** %10, align 8
  tail call void %11(%"class.rtc::AsyncResolver"* nonnull %0) #12
  br label %13

12:                                               ; preds = %1
  store i8 0, i8* %2, align 4
  br label %13

13:                                               ; preds = %5, %7, %12
  ret void
}

; Function Attrs: nounwind readnone ssp uwtable
define hidden dereferenceable(24) %"class.std::__1::vector"* @_ZNK3rtc13AsyncResolver9addressesEv(%"class.rtc::AsyncResolver"* readnone) local_unnamed_addr #7 align 2 {
  %2 = getelementptr inbounds %"class.rtc::AsyncResolver", %"class.rtc::AsyncResolver"* %0, i64 0, i32 2
  ret %"class.std::__1::vector"* %2
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN3rtc13AsyncResolver11ResolveDoneENSt3__16vectorINS_9IPAddressENS1_9allocatorIS3_EEEEi(%"class.rtc::AsyncResolver"*, %"class.std::__1::vector"* readonly, i32) local_unnamed_addr #0 align 2 {
  %4 = getelementptr inbounds %"class.rtc::AsyncResolver", %"class.rtc::AsyncResolver"* %0, i64 0, i32 2
  %5 = icmp eq %"class.std::__1::vector"* %4, %1
  br i1 %5, label %11, label %6

6:                                                ; preds = %3
  %7 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %1, i64 0, i32 0, i32 0
  %8 = load %"class.rtc::IPAddress"*, %"class.rtc::IPAddress"** %7, align 8
  %9 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %1, i64 0, i32 0, i32 1
  %10 = load %"class.rtc::IPAddress"*, %"class.rtc::IPAddress"** %9, align 8
  tail call void @_ZNSt3__16vectorIN3rtc9IPAddressENS_9allocatorIS2_EEE6assignIPS2_EENS_9enable_ifIXaasr27__is_cpp17_forward_iteratorIT_EE5valuesr16is_constructibleIS2_NS_15iterator_traitsIS9_E9referenceEEE5valueEvE4typeES9_S9_(%"class.std::__1::vector"* %4, %"class.rtc::IPAddress"* %8, %"class.rtc::IPAddress"* %10) #12
  br label %11

11:                                               ; preds = %3, %6
  %12 = getelementptr inbounds %"class.rtc::AsyncResolver", %"class.rtc::AsyncResolver"* %0, i64 0, i32 3
  store i32 %2, i32* %12, align 8
  %13 = getelementptr inbounds %"class.rtc::AsyncResolver", %"class.rtc::AsyncResolver"* %0, i64 0, i32 4
  store i8 1, i8* %13, align 4
  %14 = getelementptr inbounds %"class.rtc::AsyncResolver", %"class.rtc::AsyncResolver"* %0, i64 0, i32 0
  %15 = getelementptr inbounds %"class.rtc::AsyncResolver", %"class.rtc::AsyncResolver"* %0, i64 0, i32 0, i32 1, i32 0, i32 1, i32 0, i32 0, i32 1
  %16 = bitcast %"struct.std::__1::__list_node_base"** %15 to i64*
  %17 = load i64, i64* %16, align 8
  %18 = getelementptr inbounds %"class.rtc::AsyncResolver", %"class.rtc::AsyncResolver"* %0, i64 0, i32 0, i32 1, i32 0, i32 2, i32 0
  %19 = bitcast %"struct.std::__1::__list_node_base"** %18 to i64*
  store i64 %17, i64* %19, align 8
  %20 = getelementptr inbounds %"class.rtc::AsyncResolver", %"class.rtc::AsyncResolver"* %0, i64 0, i32 0, i32 1, i32 0, i32 2
  %21 = getelementptr inbounds %"class.rtc::AsyncResolver", %"class.rtc::AsyncResolver"* %0, i64 0, i32 0, i32 1, i32 0, i32 1, i32 0, i32 0
  %22 = getelementptr inbounds %"class.std::__1::__list_iterator", %"class.std::__1::__list_iterator"* %20, i64 0, i32 0
  %23 = inttoptr i64 %17 to %"struct.std::__1::__list_node_base"*
  %24 = icmp eq %"struct.std::__1::__list_node_base"* %21, %23
  br i1 %24, label %50, label %25

25:                                               ; preds = %11
  %26 = inttoptr i64 %17 to %"struct.std::__1::__list_node"*
  %27 = bitcast %"class.std::__1::__list_iterator"* %20 to i64*
  br label %28

28:                                               ; preds = %28, %25
  %29 = phi %"struct.std::__1::__list_node"* [ %26, %25 ], [ %39, %28 ]
  %30 = phi %"struct.std::__1::__list_node_base"* [ %23, %25 ], [ %37, %28 ]
  %31 = getelementptr inbounds %"struct.std::__1::__list_node", %"struct.std::__1::__list_node"* %29, i64 0, i32 1
  %32 = getelementptr inbounds %"struct.std::__1::__list_node_base", %"struct.std::__1::__list_node_base"* %30, i64 0, i32 1
  %33 = bitcast %"struct.std::__1::__list_node_base"** %32 to i64*
  %34 = load i64, i64* %33, align 8
  store i64 %34, i64* %27, align 8
  %35 = bitcast %"class.sigslot::_opaque_connection"* %31 to void (%"class.sigslot::_opaque_connection"*, %"class.rtc::AsyncResolverInterface"*)**
  %36 = load void (%"class.sigslot::_opaque_connection"*, %"class.rtc::AsyncResolverInterface"*)*, void (%"class.sigslot::_opaque_connection"*, %"class.rtc::AsyncResolverInterface"*)** %35, align 8
  tail call void %36(%"class.sigslot::_opaque_connection"* %31, %"class.rtc::AsyncResolverInterface"* %14) #12
  %37 = load %"struct.std::__1::__list_node_base"*, %"struct.std::__1::__list_node_base"** %22, align 8
  %38 = icmp eq %"struct.std::__1::__list_node_base"* %37, %21
  %39 = bitcast %"struct.std::__1::__list_node_base"* %37 to %"struct.std::__1::__list_node"*
  br i1 %38, label %40, label %28

40:                                               ; preds = %28
  %41 = load i8, i8* %13, align 4, !range !7
  %42 = icmp eq i8 %41, 0
  br i1 %42, label %43, label %50

43:                                               ; preds = %40
  %44 = icmp eq %"class.rtc::AsyncResolver"* %0, null
  br i1 %44, label %51, label %45

45:                                               ; preds = %43
  %46 = bitcast %"class.rtc::AsyncResolver"* %0 to void (%"class.rtc::AsyncResolver"*)***
  %47 = load void (%"class.rtc::AsyncResolver"*)**, void (%"class.rtc::AsyncResolver"*)*** %46, align 8
  %48 = getelementptr inbounds void (%"class.rtc::AsyncResolver"*)*, void (%"class.rtc::AsyncResolver"*)** %47, i64 1
  %49 = load void (%"class.rtc::AsyncResolver"*)*, void (%"class.rtc::AsyncResolver"*)** %48, align 8
  tail call void %49(%"class.rtc::AsyncResolver"* nonnull %0) #12
  br label %51

50:                                               ; preds = %11, %40
  store i8 0, i8* %13, align 4
  br label %51

51:                                               ; preds = %43, %45, %50
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN3rtc9IPAddressD0Ev(%"class.rtc::IPAddress"*) unnamed_addr #0 comdat align 2 {
  %2 = bitcast %"class.rtc::IPAddress"* %0 to i8*
  tail call void @_ZdlPv(i8* %2) #13
  ret void
}

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZN3rtc13AsyncResolver5StateD2Ev(%"struct.rtc::AsyncResolver::State"*) unnamed_addr #8 comdat align 2 {
  %2 = getelementptr inbounds %"struct.rtc::AsyncResolver::State", %"struct.rtc::AsyncResolver::State"* %0, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [4 x i8*] }, { [4 x i8*] }* @_ZTVN3rtc13AsyncResolver5StateE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8
  %3 = getelementptr inbounds %"struct.rtc::AsyncResolver::State", %"struct.rtc::AsyncResolver::State"* %0, i64 0, i32 2, i32 0, i32 0
  %4 = tail call i32 @pthread_mutex_destroy(%union.pthread_mutex_t* %3) #12
  ret void
}

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZN3rtc13AsyncResolver5StateD0Ev(%"struct.rtc::AsyncResolver::State"*) unnamed_addr #8 comdat align 2 {
  %2 = getelementptr inbounds %"struct.rtc::AsyncResolver::State", %"struct.rtc::AsyncResolver::State"* %0, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [4 x i8*] }, { [4 x i8*] }* @_ZTVN3rtc13AsyncResolver5StateE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8
  %3 = getelementptr inbounds %"struct.rtc::AsyncResolver::State", %"struct.rtc::AsyncResolver::State"* %0, i64 0, i32 2, i32 0, i32 0
  %4 = tail call i32 @pthread_mutex_destroy(%union.pthread_mutex_t* %3) #12
  %5 = bitcast %"struct.rtc::AsyncResolver::State"* %0 to i8*
  tail call void @_ZdlPv(i8* %5) #13
  ret void
}

; Function Attrs: nounwind
declare i32 @pthread_mutexattr_init(%union.pthread_mutexattr_t*) local_unnamed_addr #3

; Function Attrs: nounwind
declare i32 @pthread_mutex_init(%union.pthread_mutex_t*, %union.pthread_mutexattr_t*) local_unnamed_addr #3

; Function Attrs: nounwind
declare i32 @pthread_mutexattr_destroy(%union.pthread_mutexattr_t*) local_unnamed_addr #3

; Function Attrs: nounwind
declare i32 @pthread_mutex_destroy(%union.pthread_mutex_t*) local_unnamed_addr #3

; Function Attrs: nounwind
declare i32 @pthread_mutex_lock(%union.pthread_mutex_t*) local_unnamed_addr #3

; Function Attrs: nounwind
declare i32 @pthread_mutex_unlock(%union.pthread_mutex_t*) local_unnamed_addr #3

; Function Attrs: argmemonly nofree nounwind readonly
declare i64 @strlen(i8* nocapture) local_unnamed_addr #9

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__16vectorIN3rtc9IPAddressENS_9allocatorIS2_EEE21__push_back_slow_pathIRKS2_EEvOT_(%"class.std::__1::vector"*, %"class.rtc::IPAddress"* dereferenceable(32)) local_unnamed_addr #8 comdat align 2 {
  %3 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 0, i32 1
  %4 = bitcast %"class.rtc::IPAddress"** %3 to i64*
  %5 = load i64, i64* %4, align 8
  %6 = bitcast %"class.std::__1::vector"* %0 to i64*
  %7 = load i64, i64* %6, align 8
  %8 = sub i64 %5, %7
  %9 = ashr exact i64 %8, 5
  %10 = add nsw i64 %9, 1
  %11 = icmp ugt i64 %10, 576460752303423487
  br i1 %11, label %12, label %14

12:                                               ; preds = %2
  %13 = bitcast %"class.std::__1::vector"* %0 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %13) #14
  unreachable

14:                                               ; preds = %2
  %15 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 0, i32 2, i32 0, i32 0
  %16 = bitcast %"class.rtc::IPAddress"** %15 to i64*
  %17 = load i64, i64* %16, align 8
  %18 = sub i64 %17, %7
  %19 = ashr exact i64 %18, 5
  %20 = icmp ult i64 %19, 288230376151711743
  br i1 %20, label %21, label %29

21:                                               ; preds = %14
  %22 = ashr exact i64 %18, 4
  %23 = icmp ult i64 %22, %10
  %24 = select i1 %23, i64 %10, i64 %22
  %25 = icmp eq i64 %24, 0
  br i1 %25, label %34, label %26

26:                                               ; preds = %21
  %27 = icmp ugt i64 %24, 576460752303423487
  br i1 %27, label %28, label %29

28:                                               ; preds = %26
  tail call void @abort() #14
  unreachable

29:                                               ; preds = %14, %26
  %30 = phi i64 [ %24, %26 ], [ 576460752303423487, %14 ]
  %31 = shl i64 %30, 5
  %32 = tail call i8* @_Znwm(i64 %31) #13
  %33 = bitcast i8* %32 to %"class.rtc::IPAddress"*
  br label %34

34:                                               ; preds = %21, %29
  %35 = phi i64 [ %30, %29 ], [ 0, %21 ]
  %36 = phi %"class.rtc::IPAddress"* [ %33, %29 ], [ null, %21 ]
  %37 = getelementptr inbounds %"class.rtc::IPAddress", %"class.rtc::IPAddress"* %36, i64 %9
  %38 = getelementptr inbounds %"class.rtc::IPAddress", %"class.rtc::IPAddress"* %36, i64 %35
  %39 = ptrtoint %"class.rtc::IPAddress"* %38 to i64
  %40 = getelementptr inbounds %"class.rtc::IPAddress", %"class.rtc::IPAddress"* %37, i64 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [4 x i8*] }, { [4 x i8*] }* @_ZTVN3rtc9IPAddressE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %40, align 8
  %41 = getelementptr inbounds %"class.rtc::IPAddress", %"class.rtc::IPAddress"* %36, i64 %9, i32 1
  %42 = getelementptr inbounds %"class.rtc::IPAddress", %"class.rtc::IPAddress"* %1, i64 0, i32 1
  %43 = load i32, i32* %42, align 8
  store i32 %43, i32* %41, align 8
  %44 = getelementptr inbounds %"class.rtc::IPAddress", %"class.rtc::IPAddress"* %36, i64 %9, i32 2
  %45 = bitcast %union.anon.1* %44 to i8*
  %46 = getelementptr inbounds %"class.rtc::IPAddress", %"class.rtc::IPAddress"* %1, i64 0, i32 2
  %47 = bitcast %union.anon.1* %46 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %45, i8* align 4 %47, i64 16, i1 false) #12
  %48 = getelementptr inbounds %"class.rtc::IPAddress", %"class.rtc::IPAddress"* %37, i64 1
  %49 = ptrtoint %"class.rtc::IPAddress"* %48 to i64
  %50 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 0, i32 0
  %51 = load %"class.rtc::IPAddress"*, %"class.rtc::IPAddress"** %50, align 8
  %52 = ptrtoint %"class.rtc::IPAddress"* %51 to i64
  %53 = load %"class.rtc::IPAddress"*, %"class.rtc::IPAddress"** %3, align 8
  %54 = icmp eq %"class.rtc::IPAddress"* %53, %51
  br i1 %54, label %103, label %55

55:                                               ; preds = %34
  %56 = getelementptr %"class.rtc::IPAddress", %"class.rtc::IPAddress"* %53, i64 -1, i32 0
  %57 = ptrtoint i32 (...)*** %56 to i64
  %58 = sub i64 %57, %52
  %59 = and i64 %58, 32
  %60 = icmp eq i64 %59, 0
  br i1 %60, label %61, label %72

61:                                               ; preds = %55
  %62 = getelementptr inbounds %"class.rtc::IPAddress", %"class.rtc::IPAddress"* %53, i64 -1
  %63 = getelementptr inbounds %"class.rtc::IPAddress", %"class.rtc::IPAddress"* %37, i64 -1, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [4 x i8*] }, { [4 x i8*] }* @_ZTVN3rtc9IPAddressE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %63, align 8
  %64 = getelementptr inbounds %"class.rtc::IPAddress", %"class.rtc::IPAddress"* %37, i64 -1, i32 1
  %65 = getelementptr inbounds %"class.rtc::IPAddress", %"class.rtc::IPAddress"* %53, i64 -1, i32 1
  %66 = load i32, i32* %65, align 8
  store i32 %66, i32* %64, align 8
  %67 = getelementptr inbounds %"class.rtc::IPAddress", %"class.rtc::IPAddress"* %37, i64 -1, i32 2
  %68 = bitcast %union.anon.1* %67 to i8*
  %69 = getelementptr inbounds %"class.rtc::IPAddress", %"class.rtc::IPAddress"* %53, i64 -1, i32 2
  %70 = bitcast %union.anon.1* %69 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %68, i8* align 4 %70, i64 16, i1 false) #12
  %71 = getelementptr inbounds %"class.rtc::IPAddress", %"class.rtc::IPAddress"* %37, i64 -1
  br label %72

72:                                               ; preds = %61, %55
  %73 = phi %"class.rtc::IPAddress"* [ undef, %55 ], [ %71, %61 ]
  %74 = phi %"class.rtc::IPAddress"* [ %37, %55 ], [ %71, %61 ]
  %75 = phi %"class.rtc::IPAddress"* [ %53, %55 ], [ %62, %61 ]
  %76 = icmp ult i64 %58, 32
  br i1 %76, label %99, label %77

77:                                               ; preds = %72, %77
  %78 = phi %"class.rtc::IPAddress"* [ %97, %77 ], [ %74, %72 ]
  %79 = phi %"class.rtc::IPAddress"* [ %88, %77 ], [ %75, %72 ]
  %80 = getelementptr inbounds %"class.rtc::IPAddress", %"class.rtc::IPAddress"* %78, i64 -1, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [4 x i8*] }, { [4 x i8*] }* @_ZTVN3rtc9IPAddressE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %80, align 8
  %81 = getelementptr inbounds %"class.rtc::IPAddress", %"class.rtc::IPAddress"* %78, i64 -1, i32 1
  %82 = getelementptr inbounds %"class.rtc::IPAddress", %"class.rtc::IPAddress"* %79, i64 -1, i32 1
  %83 = load i32, i32* %82, align 8
  store i32 %83, i32* %81, align 8
  %84 = getelementptr inbounds %"class.rtc::IPAddress", %"class.rtc::IPAddress"* %78, i64 -1, i32 2
  %85 = bitcast %union.anon.1* %84 to i8*
  %86 = getelementptr inbounds %"class.rtc::IPAddress", %"class.rtc::IPAddress"* %79, i64 -1, i32 2
  %87 = bitcast %union.anon.1* %86 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %85, i8* align 4 %87, i64 16, i1 false) #12
  %88 = getelementptr inbounds %"class.rtc::IPAddress", %"class.rtc::IPAddress"* %79, i64 -2
  %89 = getelementptr inbounds %"class.rtc::IPAddress", %"class.rtc::IPAddress"* %78, i64 -2, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [4 x i8*] }, { [4 x i8*] }* @_ZTVN3rtc9IPAddressE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %89, align 8
  %90 = getelementptr inbounds %"class.rtc::IPAddress", %"class.rtc::IPAddress"* %78, i64 -2, i32 1
  %91 = getelementptr inbounds %"class.rtc::IPAddress", %"class.rtc::IPAddress"* %79, i64 -2, i32 1
  %92 = load i32, i32* %91, align 8
  store i32 %92, i32* %90, align 8
  %93 = getelementptr inbounds %"class.rtc::IPAddress", %"class.rtc::IPAddress"* %78, i64 -2, i32 2
  %94 = bitcast %union.anon.1* %93 to i8*
  %95 = getelementptr inbounds %"class.rtc::IPAddress", %"class.rtc::IPAddress"* %79, i64 -2, i32 2
  %96 = bitcast %union.anon.1* %95 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %94, i8* align 4 %96, i64 16, i1 false) #12
  %97 = getelementptr inbounds %"class.rtc::IPAddress", %"class.rtc::IPAddress"* %78, i64 -2
  %98 = icmp eq %"class.rtc::IPAddress"* %88, %51
  br i1 %98, label %99, label %77

99:                                               ; preds = %77, %72
  %100 = phi %"class.rtc::IPAddress"* [ %73, %72 ], [ %97, %77 ]
  %101 = load i64, i64* %6, align 8
  %102 = load %"class.rtc::IPAddress"*, %"class.rtc::IPAddress"** %3, align 8
  br label %103

103:                                              ; preds = %34, %99
  %104 = phi %"class.rtc::IPAddress"* [ %102, %99 ], [ %51, %34 ]
  %105 = phi %"class.rtc::IPAddress"* [ %100, %99 ], [ %37, %34 ]
  %106 = phi i64 [ %101, %99 ], [ %52, %34 ]
  %107 = ptrtoint %"class.rtc::IPAddress"* %105 to i64
  store i64 %107, i64* %6, align 8
  store i64 %49, i64* %4, align 8
  store i64 %39, i64* %16, align 8
  %108 = inttoptr i64 %106 to %"class.rtc::IPAddress"*
  %109 = icmp eq %"class.rtc::IPAddress"* %104, %108
  br i1 %109, label %117, label %110

110:                                              ; preds = %103, %110
  %111 = phi %"class.rtc::IPAddress"* [ %112, %110 ], [ %104, %103 ]
  %112 = getelementptr inbounds %"class.rtc::IPAddress", %"class.rtc::IPAddress"* %111, i64 -1
  %113 = bitcast %"class.rtc::IPAddress"* %112 to void (%"class.rtc::IPAddress"*)***
  %114 = load void (%"class.rtc::IPAddress"*)**, void (%"class.rtc::IPAddress"*)*** %113, align 8
  %115 = load void (%"class.rtc::IPAddress"*)*, void (%"class.rtc::IPAddress"*)** %114, align 8
  tail call void %115(%"class.rtc::IPAddress"* %112) #12
  %116 = icmp eq %"class.rtc::IPAddress"* %112, %108
  br i1 %116, label %117, label %110

117:                                              ; preds = %110, %103
  %118 = icmp eq i64 %106, 0
  br i1 %118, label %121, label %119

119:                                              ; preds = %117
  %120 = inttoptr i64 %106 to i8*
  tail call void @_ZdlPv(i8* %120) #13
  br label %121

121:                                              ; preds = %117, %119
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #1

; Function Attrs: noreturn
declare void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"*) local_unnamed_addr #10

; Function Attrs: noreturn nounwind
declare void @abort() local_unnamed_addr #11

; Function Attrs: nounwind ssp uwtable
define internal void @"_ZNSt3__110__function16__policy_invokerIFvvEE11__call_implINS0_20__default_alloc_funcIZN3rtc13AsyncResolver5StartERKNS6_13SocketAddressEE3$_0S2_EEEEvPKNS0_16__policy_storageE"(%"union.std::__1::__function::__policy_storage"* nocapture readonly) #0 align 2 {
  %2 = alloca %"class.std::__1::vector", align 16
  %3 = alloca %"class.std::__1::basic_string", align 8
  %4 = bitcast %"union.std::__1::__function::__policy_storage"* %0 to %"class.std::__1::__function::__default_alloc_func"**
  %5 = load %"class.std::__1::__function::__default_alloc_func"*, %"class.std::__1::__function::__default_alloc_func"** %4, align 8
  %6 = bitcast %"class.std::__1::__function::__default_alloc_func"* %5 to i64*
  %7 = load i64, i64* %6, align 8
  %8 = bitcast %"class.std::__1::vector"* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %8) #12
  %9 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %2, i64 0, i32 0, i32 0
  %10 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %2, i64 0, i32 0, i32 1
  %11 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %2, i64 0, i32 0, i32 2, i32 0, i32 0
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %8, i8 0, i64 24, i1 false) #12
  %12 = bitcast %"class.std::__1::basic_string"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %12) #12
  %13 = getelementptr inbounds %"class.std::__1::__function::__default_alloc_func", %"class.std::__1::__function::__default_alloc_func"* %5, i64 0, i32 0, i32 1
  %14 = bitcast %"class.rtc::SocketAddress"* %13 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %15 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %14, i64 0, i32 1, i32 0
  %16 = load i8, i8* %15, align 1
  %17 = icmp slt i8 %16, 0
  %18 = getelementptr inbounds %"class.rtc::SocketAddress", %"class.rtc::SocketAddress"* %13, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %19 = load i8*, i8** %18, align 8
  %20 = bitcast %"class.rtc::SocketAddress"* %13 to i8*
  %21 = select i1 %17, i8* %19, i8* %20
  %22 = tail call i64 @strlen(i8* %21) #12
  %23 = icmp ugt i64 %22, -17
  br i1 %23, label %24, label %26

24:                                               ; preds = %1
  %25 = bitcast %"class.std::__1::basic_string"* %3 to %"class.std::__1::__basic_string_common"*
  call void @_ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__basic_string_common"* nonnull %25) #14
  unreachable

26:                                               ; preds = %1
  %27 = icmp ult i64 %22, 23
  br i1 %27, label %37, label %28

28:                                               ; preds = %26
  %29 = add nuw i64 %22, 16
  %30 = and i64 %29, -16
  %31 = tail call i8* @_Znwm(i64 %30) #13
  %32 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %3, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  store i8* %31, i8** %32, align 8
  %33 = or i64 %30, -9223372036854775808
  %34 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %3, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 2
  store i64 %33, i64* %34, align 8
  %35 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %3, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  store i64 %22, i64* %35, align 8
  %36 = bitcast %"class.std::__1::basic_string"* %3 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  br label %42

37:                                               ; preds = %26
  %38 = trunc i64 %22 to i8
  %39 = bitcast %"class.std::__1::basic_string"* %3 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %40 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %39, i64 0, i32 1, i32 0
  store i8 %38, i8* %40, align 1
  %41 = icmp eq i64 %22, 0
  br i1 %41, label %45, label %42

42:                                               ; preds = %37, %28
  %43 = phi %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* [ %39, %37 ], [ %36, %28 ]
  %44 = phi i8* [ %12, %37 ], [ %31, %28 ]
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 1 %44, i8* align 1 %21, i64 %22, i1 false) #12
  br label %45

45:                                               ; preds = %42, %37
  %46 = phi %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* [ %39, %37 ], [ %43, %42 ]
  %47 = phi i8* [ %12, %37 ], [ %44, %42 ]
  %48 = getelementptr inbounds i8, i8* %47, i64 %22
  store i8 0, i8* %48, align 1
  %49 = getelementptr inbounds %"class.std::__1::__function::__default_alloc_func", %"class.std::__1::__function::__default_alloc_func"* %5, i64 0, i32 0, i32 1, i32 1, i32 1
  %50 = load i32, i32* %49, align 8
  %51 = call i32 @_ZN3rtc15ResolveHostnameERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEiPNS0_6vectorINS_9IPAddressENS4_ISA_EEEE(%"class.std::__1::basic_string"* nonnull dereferenceable(24) %3, i32 %50, %"class.std::__1::vector"* nonnull %2) #12
  %52 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %46, i64 0, i32 1, i32 0
  %53 = load i8, i8* %52, align 1
  %54 = icmp slt i8 %53, 0
  br i1 %54, label %55, label %58

55:                                               ; preds = %45
  %56 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %3, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %57 = load i8*, i8** %56, align 8
  call void @_ZdlPv(i8* %57) #13
  br label %58

58:                                               ; preds = %55, %45
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %12) #12
  %59 = getelementptr inbounds %"class.std::__1::__function::__default_alloc_func", %"class.std::__1::__function::__default_alloc_func"* %5, i64 0, i32 0, i32 3, i32 0
  %60 = load %"struct.rtc::AsyncResolver::State"*, %"struct.rtc::AsyncResolver::State"** %59, align 8
  %61 = getelementptr inbounds %"struct.rtc::AsyncResolver::State", %"struct.rtc::AsyncResolver::State"* %60, i64 0, i32 2, i32 0, i32 0
  %62 = call i32 @pthread_mutex_lock(%union.pthread_mutex_t* %61) #12
  %63 = load %"struct.rtc::AsyncResolver::State"*, %"struct.rtc::AsyncResolver::State"** %59, align 8
  %64 = getelementptr inbounds %"struct.rtc::AsyncResolver::State", %"struct.rtc::AsyncResolver::State"* %63, i64 0, i32 3
  %65 = load i32, i32* %64, align 8
  %66 = icmp eq i32 %65, 0
  br i1 %66, label %67, label %97

67:                                               ; preds = %58
  %68 = getelementptr inbounds %"class.std::__1::__function::__default_alloc_func", %"class.std::__1::__function::__default_alloc_func"* %5, i64 0, i32 0, i32 2
  %69 = load %"class.webrtc::TaskQueueBase"*, %"class.webrtc::TaskQueueBase"** %68, align 8
  %70 = bitcast %"class.std::__1::vector"* %2 to <2 x i64>*
  %71 = load <2 x i64>, <2 x i64>* %70, align 16
  %72 = bitcast %"class.rtc::IPAddress"** %11 to i64*
  %73 = load i64, i64* %72, align 16
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %8, i8 0, i64 24, i1 false) #12
  %74 = ptrtoint %"struct.rtc::AsyncResolver::State"* %63 to i64
  %75 = icmp eq %"struct.rtc::AsyncResolver::State"* %63, null
  br i1 %75, label %79, label %76

76:                                               ; preds = %67
  %77 = getelementptr inbounds %"struct.rtc::AsyncResolver::State", %"struct.rtc::AsyncResolver::State"* %63, i64 0, i32 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %78 = atomicrmw add i32* %77, i32 1 monotonic
  br label %79

79:                                               ; preds = %76, %67
  %80 = call i8* @_Znwm(i64 56) #13
  %81 = bitcast i8* %80 to i32 (...)***
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [5 x i8*] }, { [5 x i8*] }* @"_ZTVN6webrtc23webrtc_new_closure_impl11ClosureTaskIZZN3rtc13AsyncResolver5StartERKNS2_13SocketAddressEENK3$_0clEvEUlvE_EE", i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %81, align 8
  %82 = getelementptr inbounds i8, i8* %80, i64 8
  %83 = bitcast i8* %82 to i64*
  store i64 %7, i64* %83, align 8
  %84 = getelementptr inbounds i8, i8* %80, i64 16
  %85 = bitcast i8* %84 to i32*
  store i32 %51, i32* %85, align 8
  %86 = getelementptr inbounds i8, i8* %80, i64 24
  %87 = bitcast i8* %86 to <2 x i64>*
  store <2 x i64> %71, <2 x i64>* %87, align 8
  %88 = getelementptr inbounds i8, i8* %80, i64 40
  %89 = bitcast i8* %88 to i64*
  store i64 %73, i64* %89, align 8
  %90 = getelementptr inbounds i8, i8* %80, i64 48
  %91 = bitcast i8* %90 to i64*
  store i64 %74, i64* %91, align 8
  %92 = bitcast i8* %80 to %"class.webrtc::QueuedTask"*
  %93 = bitcast %"class.webrtc::TaskQueueBase"* %69 to void (%"class.webrtc::TaskQueueBase"*, %"class.webrtc::QueuedTask"*)***
  %94 = load void (%"class.webrtc::TaskQueueBase"*, %"class.webrtc::QueuedTask"*)**, void (%"class.webrtc::TaskQueueBase"*, %"class.webrtc::QueuedTask"*)*** %93, align 8
  %95 = getelementptr inbounds void (%"class.webrtc::TaskQueueBase"*, %"class.webrtc::QueuedTask"*)*, void (%"class.webrtc::TaskQueueBase"*, %"class.webrtc::QueuedTask"*)** %94, i64 1
  %96 = load void (%"class.webrtc::TaskQueueBase"*, %"class.webrtc::QueuedTask"*)*, void (%"class.webrtc::TaskQueueBase"*, %"class.webrtc::QueuedTask"*)** %95, align 8
  call void %96(%"class.webrtc::TaskQueueBase"* %69, %"class.webrtc::QueuedTask"* nonnull %92) #12
  br label %97

97:                                               ; preds = %79, %58
  %98 = call i32 @pthread_mutex_unlock(%union.pthread_mutex_t* %61) #12
  %99 = load %"class.rtc::IPAddress"*, %"class.rtc::IPAddress"** %9, align 16
  %100 = icmp eq %"class.rtc::IPAddress"* %99, null
  br i1 %100, label %117, label %101

101:                                              ; preds = %97
  %102 = bitcast %"class.rtc::IPAddress"* %99 to i8*
  %103 = load %"class.rtc::IPAddress"*, %"class.rtc::IPAddress"** %10, align 8
  %104 = icmp eq %"class.rtc::IPAddress"* %103, %99
  br i1 %104, label %115, label %105

105:                                              ; preds = %101, %105
  %106 = phi %"class.rtc::IPAddress"* [ %107, %105 ], [ %103, %101 ]
  %107 = getelementptr inbounds %"class.rtc::IPAddress", %"class.rtc::IPAddress"* %106, i64 -1
  %108 = bitcast %"class.rtc::IPAddress"* %107 to void (%"class.rtc::IPAddress"*)***
  %109 = load void (%"class.rtc::IPAddress"*)**, void (%"class.rtc::IPAddress"*)*** %108, align 8
  %110 = load void (%"class.rtc::IPAddress"*)*, void (%"class.rtc::IPAddress"*)** %109, align 8
  call void %110(%"class.rtc::IPAddress"* %107) #12
  %111 = icmp eq %"class.rtc::IPAddress"* %107, %99
  br i1 %111, label %112, label %105

112:                                              ; preds = %105
  %113 = bitcast %"class.std::__1::vector"* %2 to i8**
  %114 = load i8*, i8** %113, align 16
  br label %115

115:                                              ; preds = %112, %101
  %116 = phi i8* [ %114, %112 ], [ %102, %101 ]
  store %"class.rtc::IPAddress"* %99, %"class.rtc::IPAddress"** %10, align 8
  call void @_ZdlPv(i8* %116) #13
  br label %117

117:                                              ; preds = %97, %115
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %8) #12
  ret void
}

; Function Attrs: noreturn
declare void @_ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__basic_string_common"*) local_unnamed_addr #10

; Function Attrs: inlinehint nounwind ssp uwtable
define internal void @"_ZN6webrtc23webrtc_new_closure_impl11ClosureTaskIZZN3rtc13AsyncResolver5StartERKNS2_13SocketAddressEENK3$_0clEvEUlvE_ED2Ev"(%"class.webrtc::webrtc_new_closure_impl::ClosureTask"* nocapture) unnamed_addr #8 align 2 {
  %2 = getelementptr inbounds %"class.webrtc::webrtc_new_closure_impl::ClosureTask", %"class.webrtc::webrtc_new_closure_impl::ClosureTask"* %0, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [5 x i8*] }, { [5 x i8*] }* @"_ZTVN6webrtc23webrtc_new_closure_impl11ClosureTaskIZZN3rtc13AsyncResolver5StartERKNS2_13SocketAddressEENK3$_0clEvEUlvE_EE", i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8
  %3 = getelementptr inbounds %"class.webrtc::webrtc_new_closure_impl::ClosureTask", %"class.webrtc::webrtc_new_closure_impl::ClosureTask"* %0, i64 0, i32 1, i32 3, i32 0
  %4 = load %"struct.rtc::AsyncResolver::State"*, %"struct.rtc::AsyncResolver::State"** %3, align 8
  %5 = icmp eq %"struct.rtc::AsyncResolver::State"* %4, null
  br i1 %5, label %16, label %6

6:                                                ; preds = %1
  %7 = getelementptr inbounds %"struct.rtc::AsyncResolver::State", %"struct.rtc::AsyncResolver::State"* %4, i64 0, i32 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %8 = atomicrmw sub i32* %7, i32 1 acq_rel
  %9 = icmp eq i32 %8, 1
  br i1 %9, label %10, label %16

10:                                               ; preds = %6
  %11 = bitcast %"struct.rtc::AsyncResolver::State"* %4 to %"class.rtc::RefCountedBase"*
  %12 = bitcast %"struct.rtc::AsyncResolver::State"* %4 to void (%"class.rtc::RefCountedBase"*)***
  %13 = load void (%"class.rtc::RefCountedBase"*)**, void (%"class.rtc::RefCountedBase"*)*** %12, align 8
  %14 = getelementptr inbounds void (%"class.rtc::RefCountedBase"*)*, void (%"class.rtc::RefCountedBase"*)** %13, i64 1
  %15 = load void (%"class.rtc::RefCountedBase"*)*, void (%"class.rtc::RefCountedBase"*)** %14, align 8
  tail call void %15(%"class.rtc::RefCountedBase"* nonnull %11) #12
  br label %16

16:                                               ; preds = %10, %6, %1
  %17 = getelementptr inbounds %"class.webrtc::webrtc_new_closure_impl::ClosureTask", %"class.webrtc::webrtc_new_closure_impl::ClosureTask"* %0, i64 0, i32 1, i32 2
  %18 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %17, i64 0, i32 0, i32 0
  %19 = load %"class.rtc::IPAddress"*, %"class.rtc::IPAddress"** %18, align 8
  %20 = icmp eq %"class.rtc::IPAddress"* %19, null
  br i1 %20, label %38, label %21

21:                                               ; preds = %16
  %22 = bitcast %"class.rtc::IPAddress"* %19 to i8*
  %23 = getelementptr inbounds %"class.webrtc::webrtc_new_closure_impl::ClosureTask", %"class.webrtc::webrtc_new_closure_impl::ClosureTask"* %0, i64 0, i32 1, i32 2, i32 0, i32 1
  %24 = load %"class.rtc::IPAddress"*, %"class.rtc::IPAddress"** %23, align 8
  %25 = icmp eq %"class.rtc::IPAddress"* %24, %19
  br i1 %25, label %36, label %26

26:                                               ; preds = %21, %26
  %27 = phi %"class.rtc::IPAddress"* [ %28, %26 ], [ %24, %21 ]
  %28 = getelementptr inbounds %"class.rtc::IPAddress", %"class.rtc::IPAddress"* %27, i64 -1
  %29 = bitcast %"class.rtc::IPAddress"* %28 to void (%"class.rtc::IPAddress"*)***
  %30 = load void (%"class.rtc::IPAddress"*)**, void (%"class.rtc::IPAddress"*)*** %29, align 8
  %31 = load void (%"class.rtc::IPAddress"*)*, void (%"class.rtc::IPAddress"*)** %30, align 8
  tail call void %31(%"class.rtc::IPAddress"* %28) #12
  %32 = icmp eq %"class.rtc::IPAddress"* %28, %19
  br i1 %32, label %33, label %26

33:                                               ; preds = %26
  %34 = bitcast %"class.std::__1::vector"* %17 to i8**
  %35 = load i8*, i8** %34, align 8
  br label %36

36:                                               ; preds = %33, %21
  %37 = phi i8* [ %35, %33 ], [ %22, %21 ]
  store %"class.rtc::IPAddress"* %19, %"class.rtc::IPAddress"** %23, align 8
  tail call void @_ZdlPv(i8* %37) #13
  br label %38

38:                                               ; preds = %16, %36
  ret void
}

; Function Attrs: inlinehint nounwind ssp uwtable
define internal void @"_ZN6webrtc23webrtc_new_closure_impl11ClosureTaskIZZN3rtc13AsyncResolver5StartERKNS2_13SocketAddressEENK3$_0clEvEUlvE_ED0Ev"(%"class.webrtc::webrtc_new_closure_impl::ClosureTask"*) unnamed_addr #8 align 2 {
  %2 = getelementptr inbounds %"class.webrtc::webrtc_new_closure_impl::ClosureTask", %"class.webrtc::webrtc_new_closure_impl::ClosureTask"* %0, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [5 x i8*] }, { [5 x i8*] }* @"_ZTVN6webrtc23webrtc_new_closure_impl11ClosureTaskIZZN3rtc13AsyncResolver5StartERKNS2_13SocketAddressEENK3$_0clEvEUlvE_EE", i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8
  %3 = getelementptr inbounds %"class.webrtc::webrtc_new_closure_impl::ClosureTask", %"class.webrtc::webrtc_new_closure_impl::ClosureTask"* %0, i64 0, i32 1, i32 3, i32 0
  %4 = load %"struct.rtc::AsyncResolver::State"*, %"struct.rtc::AsyncResolver::State"** %3, align 8
  %5 = icmp eq %"struct.rtc::AsyncResolver::State"* %4, null
  br i1 %5, label %16, label %6

6:                                                ; preds = %1
  %7 = getelementptr inbounds %"struct.rtc::AsyncResolver::State", %"struct.rtc::AsyncResolver::State"* %4, i64 0, i32 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %8 = atomicrmw sub i32* %7, i32 1 acq_rel
  %9 = icmp eq i32 %8, 1
  br i1 %9, label %10, label %16

10:                                               ; preds = %6
  %11 = bitcast %"struct.rtc::AsyncResolver::State"* %4 to %"class.rtc::RefCountedBase"*
  %12 = bitcast %"struct.rtc::AsyncResolver::State"* %4 to void (%"class.rtc::RefCountedBase"*)***
  %13 = load void (%"class.rtc::RefCountedBase"*)**, void (%"class.rtc::RefCountedBase"*)*** %12, align 8
  %14 = getelementptr inbounds void (%"class.rtc::RefCountedBase"*)*, void (%"class.rtc::RefCountedBase"*)** %13, i64 1
  %15 = load void (%"class.rtc::RefCountedBase"*)*, void (%"class.rtc::RefCountedBase"*)** %14, align 8
  tail call void %15(%"class.rtc::RefCountedBase"* nonnull %11) #12
  br label %16

16:                                               ; preds = %10, %6, %1
  %17 = getelementptr inbounds %"class.webrtc::webrtc_new_closure_impl::ClosureTask", %"class.webrtc::webrtc_new_closure_impl::ClosureTask"* %0, i64 0, i32 1, i32 2
  %18 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %17, i64 0, i32 0, i32 0
  %19 = load %"class.rtc::IPAddress"*, %"class.rtc::IPAddress"** %18, align 8
  %20 = icmp eq %"class.rtc::IPAddress"* %19, null
  br i1 %20, label %38, label %21

21:                                               ; preds = %16
  %22 = bitcast %"class.rtc::IPAddress"* %19 to i8*
  %23 = getelementptr inbounds %"class.webrtc::webrtc_new_closure_impl::ClosureTask", %"class.webrtc::webrtc_new_closure_impl::ClosureTask"* %0, i64 0, i32 1, i32 2, i32 0, i32 1
  %24 = load %"class.rtc::IPAddress"*, %"class.rtc::IPAddress"** %23, align 8
  %25 = icmp eq %"class.rtc::IPAddress"* %24, %19
  br i1 %25, label %36, label %26

26:                                               ; preds = %21, %26
  %27 = phi %"class.rtc::IPAddress"* [ %28, %26 ], [ %24, %21 ]
  %28 = getelementptr inbounds %"class.rtc::IPAddress", %"class.rtc::IPAddress"* %27, i64 -1
  %29 = bitcast %"class.rtc::IPAddress"* %28 to void (%"class.rtc::IPAddress"*)***
  %30 = load void (%"class.rtc::IPAddress"*)**, void (%"class.rtc::IPAddress"*)*** %29, align 8
  %31 = load void (%"class.rtc::IPAddress"*)*, void (%"class.rtc::IPAddress"*)** %30, align 8
  tail call void %31(%"class.rtc::IPAddress"* %28) #12
  %32 = icmp eq %"class.rtc::IPAddress"* %28, %19
  br i1 %32, label %33, label %26

33:                                               ; preds = %26
  %34 = bitcast %"class.std::__1::vector"* %17 to i8**
  %35 = load i8*, i8** %34, align 8
  br label %36

36:                                               ; preds = %33, %21
  %37 = phi i8* [ %35, %33 ], [ %22, %21 ]
  store %"class.rtc::IPAddress"* %19, %"class.rtc::IPAddress"** %23, align 8
  tail call void @_ZdlPv(i8* %37) #13
  br label %38

38:                                               ; preds = %16, %36
  %39 = bitcast %"class.webrtc::webrtc_new_closure_impl::ClosureTask"* %0 to i8*
  tail call void @_ZdlPv(i8* %39) #13
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal zeroext i1 @"_ZN6webrtc23webrtc_new_closure_impl11ClosureTaskIZZN3rtc13AsyncResolver5StartERKNS2_13SocketAddressEENK3$_0clEvEUlvE_E3RunEv"(%"class.webrtc::webrtc_new_closure_impl::ClosureTask"* nocapture readonly) unnamed_addr #0 align 2 {
  %2 = alloca %"class.std::__1::vector", align 8
  %3 = bitcast %"class.std::__1::vector"* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %3)
  %4 = getelementptr inbounds %"class.webrtc::webrtc_new_closure_impl::ClosureTask", %"class.webrtc::webrtc_new_closure_impl::ClosureTask"* %0, i64 0, i32 1, i32 0
  %5 = load %"class.rtc::AsyncResolver"*, %"class.rtc::AsyncResolver"** %4, align 8
  %6 = getelementptr inbounds %"class.webrtc::webrtc_new_closure_impl::ClosureTask", %"class.webrtc::webrtc_new_closure_impl::ClosureTask"* %0, i64 0, i32 1, i32 3, i32 0
  %7 = load %"struct.rtc::AsyncResolver::State"*, %"struct.rtc::AsyncResolver::State"** %6, align 8
  %8 = getelementptr inbounds %"struct.rtc::AsyncResolver::State", %"struct.rtc::AsyncResolver::State"* %7, i64 0, i32 2, i32 0, i32 0
  %9 = tail call i32 @pthread_mutex_lock(%union.pthread_mutex_t* %8) #12
  %10 = load %"struct.rtc::AsyncResolver::State"*, %"struct.rtc::AsyncResolver::State"** %6, align 8
  %11 = getelementptr inbounds %"struct.rtc::AsyncResolver::State", %"struct.rtc::AsyncResolver::State"* %10, i64 0, i32 3
  %12 = load i32, i32* %11, align 8
  %13 = icmp eq i32 %12, 0
  %14 = tail call i32 @pthread_mutex_unlock(%union.pthread_mutex_t* %8) #12
  br i1 %13, label %15, label %164

15:                                               ; preds = %1
  %16 = getelementptr inbounds %"class.webrtc::webrtc_new_closure_impl::ClosureTask", %"class.webrtc::webrtc_new_closure_impl::ClosureTask"* %0, i64 0, i32 1, i32 2
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %3, i8 0, i64 24, i1 false) #12
  %17 = getelementptr inbounds %"class.webrtc::webrtc_new_closure_impl::ClosureTask", %"class.webrtc::webrtc_new_closure_impl::ClosureTask"* %0, i64 0, i32 1, i32 2, i32 0, i32 1
  %18 = bitcast %"class.rtc::IPAddress"** %17 to i64*
  %19 = load i64, i64* %18, align 8
  %20 = bitcast %"class.std::__1::vector"* %16 to i64*
  %21 = load i64, i64* %20, align 8
  %22 = sub i64 %19, %21
  %23 = ashr exact i64 %22, 5
  %24 = icmp eq i64 %22, 0
  %25 = inttoptr i64 %21 to %"class.rtc::IPAddress"*
  %26 = inttoptr i64 %19 to %"class.rtc::IPAddress"*
  br i1 %24, label %95, label %27

27:                                               ; preds = %15
  %28 = icmp ugt i64 %23, 576460752303423487
  br i1 %28, label %29, label %31

29:                                               ; preds = %27
  %30 = bitcast %"class.std::__1::vector"* %2 to %"class.std::__1::__vector_base_common"*
  call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* nonnull %30) #14
  unreachable

31:                                               ; preds = %27
  %32 = tail call i8* @_Znwm(i64 %22) #13
  %33 = bitcast i8* %32 to %"class.rtc::IPAddress"*
  %34 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %2, i64 0, i32 0, i32 1
  %35 = bitcast %"class.rtc::IPAddress"** %34 to i8**
  store i8* %32, i8** %35, align 8
  %36 = bitcast %"class.std::__1::vector"* %2 to i8**
  store i8* %32, i8** %36, align 8
  %37 = getelementptr inbounds %"class.rtc::IPAddress", %"class.rtc::IPAddress"* %33, i64 %23
  %38 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %2, i64 0, i32 0, i32 2, i32 0, i32 0
  store %"class.rtc::IPAddress"* %37, %"class.rtc::IPAddress"** %38, align 8
  %39 = bitcast %"class.rtc::IPAddress"** %34 to i64*
  %40 = ptrtoint i8* %32 to i64
  %41 = icmp eq %"class.rtc::IPAddress"* %25, %26
  br i1 %41, label %92, label %42

42:                                               ; preds = %31
  %43 = getelementptr %"class.rtc::IPAddress", %"class.rtc::IPAddress"* %26, i64 -1, i32 0
  %44 = bitcast i32 (...)*** %43 to i8*
  %45 = sub i64 0, %21
  %46 = getelementptr i8, i8* %44, i64 %45
  %47 = ptrtoint i8* %46 to i64
  %48 = and i64 %47, 32
  %49 = icmp eq i64 %48, 0
  br i1 %49, label %50, label %62

50:                                               ; preds = %42
  %51 = bitcast i8* %32 to i32 (...)***
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [4 x i8*] }, { [4 x i8*] }* @_ZTVN3rtc9IPAddressE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %51, align 8
  %52 = getelementptr inbounds i8, i8* %32, i64 8
  %53 = bitcast i8* %52 to i32*
  %54 = getelementptr inbounds %"class.rtc::IPAddress", %"class.rtc::IPAddress"* %25, i64 0, i32 1
  %55 = load i32, i32* %54, align 8
  store i32 %55, i32* %53, align 8
  %56 = getelementptr inbounds i8, i8* %32, i64 12
  %57 = getelementptr inbounds %"class.rtc::IPAddress", %"class.rtc::IPAddress"* %25, i64 0, i32 2
  %58 = bitcast %union.anon.1* %57 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %56, i8* align 4 %58, i64 16, i1 false) #12
  %59 = getelementptr inbounds %"class.rtc::IPAddress", %"class.rtc::IPAddress"* %25, i64 1
  %60 = getelementptr inbounds i8, i8* %32, i64 32
  %61 = bitcast i8* %60 to %"class.rtc::IPAddress"*
  br label %62

62:                                               ; preds = %50, %42
  %63 = phi %"class.rtc::IPAddress"* [ undef, %42 ], [ %61, %50 ]
  %64 = phi %"class.rtc::IPAddress"* [ %33, %42 ], [ %61, %50 ]
  %65 = phi %"class.rtc::IPAddress"* [ %25, %42 ], [ %59, %50 ]
  %66 = icmp ult i8* %46, inttoptr (i64 32 to i8*)
  br i1 %66, label %89, label %67

67:                                               ; preds = %62, %67
  %68 = phi %"class.rtc::IPAddress"* [ %87, %67 ], [ %64, %62 ]
  %69 = phi %"class.rtc::IPAddress"* [ %86, %67 ], [ %65, %62 ]
  %70 = getelementptr inbounds %"class.rtc::IPAddress", %"class.rtc::IPAddress"* %68, i64 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [4 x i8*] }, { [4 x i8*] }* @_ZTVN3rtc9IPAddressE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %70, align 8
  %71 = getelementptr inbounds %"class.rtc::IPAddress", %"class.rtc::IPAddress"* %68, i64 0, i32 1
  %72 = getelementptr inbounds %"class.rtc::IPAddress", %"class.rtc::IPAddress"* %69, i64 0, i32 1
  %73 = load i32, i32* %72, align 8
  store i32 %73, i32* %71, align 8
  %74 = getelementptr inbounds %"class.rtc::IPAddress", %"class.rtc::IPAddress"* %68, i64 0, i32 2
  %75 = bitcast %union.anon.1* %74 to i8*
  %76 = getelementptr inbounds %"class.rtc::IPAddress", %"class.rtc::IPAddress"* %69, i64 0, i32 2
  %77 = bitcast %union.anon.1* %76 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %75, i8* align 4 %77, i64 16, i1 false) #12
  %78 = getelementptr inbounds %"class.rtc::IPAddress", %"class.rtc::IPAddress"* %68, i64 1, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [4 x i8*] }, { [4 x i8*] }* @_ZTVN3rtc9IPAddressE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %78, align 8
  %79 = getelementptr inbounds %"class.rtc::IPAddress", %"class.rtc::IPAddress"* %68, i64 1, i32 1
  %80 = getelementptr inbounds %"class.rtc::IPAddress", %"class.rtc::IPAddress"* %69, i64 1, i32 1
  %81 = load i32, i32* %80, align 8
  store i32 %81, i32* %79, align 8
  %82 = getelementptr inbounds %"class.rtc::IPAddress", %"class.rtc::IPAddress"* %68, i64 1, i32 2
  %83 = bitcast %union.anon.1* %82 to i8*
  %84 = getelementptr inbounds %"class.rtc::IPAddress", %"class.rtc::IPAddress"* %69, i64 1, i32 2
  %85 = bitcast %union.anon.1* %84 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %83, i8* align 4 %85, i64 16, i1 false) #12
  %86 = getelementptr inbounds %"class.rtc::IPAddress", %"class.rtc::IPAddress"* %69, i64 2
  %87 = getelementptr inbounds %"class.rtc::IPAddress", %"class.rtc::IPAddress"* %68, i64 2
  %88 = icmp eq %"class.rtc::IPAddress"* %86, %26
  br i1 %88, label %89, label %67

89:                                               ; preds = %67, %62
  %90 = phi %"class.rtc::IPAddress"* [ %63, %62 ], [ %87, %67 ]
  %91 = ptrtoint %"class.rtc::IPAddress"* %90 to i64
  br label %92

92:                                               ; preds = %89, %31
  %93 = phi i64 [ %40, %31 ], [ %91, %89 ]
  store i64 %93, i64* %39, align 8
  %94 = inttoptr i64 %93 to %"class.rtc::IPAddress"*
  br label %95

95:                                               ; preds = %92, %15
  %96 = phi %"class.rtc::IPAddress"* [ null, %15 ], [ %94, %92 ]
  %97 = phi %"class.rtc::IPAddress"* [ null, %15 ], [ %33, %92 ]
  %98 = getelementptr inbounds %"class.webrtc::webrtc_new_closure_impl::ClosureTask", %"class.webrtc::webrtc_new_closure_impl::ClosureTask"* %0, i64 0, i32 1, i32 1
  %99 = load i32, i32* %98, align 8
  %100 = getelementptr inbounds %"class.rtc::AsyncResolver", %"class.rtc::AsyncResolver"* %5, i64 0, i32 2
  %101 = icmp eq %"class.std::__1::vector"* %100, %2
  br i1 %101, label %103, label %102

102:                                              ; preds = %95
  call void @_ZNSt3__16vectorIN3rtc9IPAddressENS_9allocatorIS2_EEE6assignIPS2_EENS_9enable_ifIXaasr27__is_cpp17_forward_iteratorIT_EE5valuesr16is_constructibleIS2_NS_15iterator_traitsIS9_E9referenceEEE5valueEvE4typeES9_S9_(%"class.std::__1::vector"* %100, %"class.rtc::IPAddress"* %97, %"class.rtc::IPAddress"* %96) #12
  br label %103

103:                                              ; preds = %102, %95
  %104 = getelementptr inbounds %"class.rtc::AsyncResolver", %"class.rtc::AsyncResolver"* %5, i64 0, i32 3
  store i32 %99, i32* %104, align 8
  %105 = getelementptr inbounds %"class.rtc::AsyncResolver", %"class.rtc::AsyncResolver"* %5, i64 0, i32 4
  store i8 1, i8* %105, align 4
  %106 = getelementptr inbounds %"class.rtc::AsyncResolver", %"class.rtc::AsyncResolver"* %5, i64 0, i32 0
  %107 = getelementptr inbounds %"class.rtc::AsyncResolver", %"class.rtc::AsyncResolver"* %5, i64 0, i32 0, i32 1, i32 0, i32 1, i32 0, i32 0, i32 1
  %108 = bitcast %"struct.std::__1::__list_node_base"** %107 to i64*
  %109 = load i64, i64* %108, align 8
  %110 = getelementptr inbounds %"class.rtc::AsyncResolver", %"class.rtc::AsyncResolver"* %5, i64 0, i32 0, i32 1, i32 0, i32 2, i32 0
  %111 = bitcast %"struct.std::__1::__list_node_base"** %110 to i64*
  store i64 %109, i64* %111, align 8
  %112 = getelementptr inbounds %"class.rtc::AsyncResolver", %"class.rtc::AsyncResolver"* %5, i64 0, i32 0, i32 1, i32 0, i32 2
  %113 = getelementptr inbounds %"class.rtc::AsyncResolver", %"class.rtc::AsyncResolver"* %5, i64 0, i32 0, i32 1, i32 0, i32 1, i32 0, i32 0
  %114 = getelementptr inbounds %"class.std::__1::__list_iterator", %"class.std::__1::__list_iterator"* %112, i64 0, i32 0
  %115 = inttoptr i64 %109 to %"struct.std::__1::__list_node_base"*
  %116 = icmp eq %"struct.std::__1::__list_node_base"* %113, %115
  br i1 %116, label %142, label %117

117:                                              ; preds = %103
  %118 = inttoptr i64 %109 to %"struct.std::__1::__list_node"*
  %119 = bitcast %"class.std::__1::__list_iterator"* %112 to i64*
  br label %120

120:                                              ; preds = %120, %117
  %121 = phi %"struct.std::__1::__list_node"* [ %118, %117 ], [ %131, %120 ]
  %122 = phi %"struct.std::__1::__list_node_base"* [ %115, %117 ], [ %129, %120 ]
  %123 = getelementptr inbounds %"struct.std::__1::__list_node", %"struct.std::__1::__list_node"* %121, i64 0, i32 1
  %124 = getelementptr inbounds %"struct.std::__1::__list_node_base", %"struct.std::__1::__list_node_base"* %122, i64 0, i32 1
  %125 = bitcast %"struct.std::__1::__list_node_base"** %124 to i64*
  %126 = load i64, i64* %125, align 8
  store i64 %126, i64* %119, align 8
  %127 = bitcast %"class.sigslot::_opaque_connection"* %123 to void (%"class.sigslot::_opaque_connection"*, %"class.rtc::AsyncResolverInterface"*)**
  %128 = load void (%"class.sigslot::_opaque_connection"*, %"class.rtc::AsyncResolverInterface"*)*, void (%"class.sigslot::_opaque_connection"*, %"class.rtc::AsyncResolverInterface"*)** %127, align 8
  call void %128(%"class.sigslot::_opaque_connection"* %123, %"class.rtc::AsyncResolverInterface"* %106) #12
  %129 = load %"struct.std::__1::__list_node_base"*, %"struct.std::__1::__list_node_base"** %114, align 8
  %130 = icmp eq %"struct.std::__1::__list_node_base"* %129, %113
  %131 = bitcast %"struct.std::__1::__list_node_base"* %129 to %"struct.std::__1::__list_node"*
  br i1 %130, label %132, label %120

132:                                              ; preds = %120
  %133 = load i8, i8* %105, align 4, !range !7
  %134 = icmp eq i8 %133, 0
  br i1 %134, label %135, label %142

135:                                              ; preds = %132
  %136 = icmp eq %"class.rtc::AsyncResolver"* %5, null
  br i1 %136, label %143, label %137

137:                                              ; preds = %135
  %138 = bitcast %"class.rtc::AsyncResolver"* %5 to void (%"class.rtc::AsyncResolver"*)***
  %139 = load void (%"class.rtc::AsyncResolver"*)**, void (%"class.rtc::AsyncResolver"*)*** %138, align 8
  %140 = getelementptr inbounds void (%"class.rtc::AsyncResolver"*)*, void (%"class.rtc::AsyncResolver"*)** %139, i64 1
  %141 = load void (%"class.rtc::AsyncResolver"*)*, void (%"class.rtc::AsyncResolver"*)** %140, align 8
  call void %141(%"class.rtc::AsyncResolver"* nonnull %5) #12
  br label %143

142:                                              ; preds = %132, %103
  store i8 0, i8* %105, align 4
  br label %143

143:                                              ; preds = %142, %137, %135
  %144 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %2, i64 0, i32 0, i32 0
  %145 = load %"class.rtc::IPAddress"*, %"class.rtc::IPAddress"** %144, align 8
  %146 = icmp eq %"class.rtc::IPAddress"* %145, null
  br i1 %146, label %164, label %147

147:                                              ; preds = %143
  %148 = bitcast %"class.rtc::IPAddress"* %145 to i8*
  %149 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %2, i64 0, i32 0, i32 1
  %150 = load %"class.rtc::IPAddress"*, %"class.rtc::IPAddress"** %149, align 8
  %151 = icmp eq %"class.rtc::IPAddress"* %150, %145
  br i1 %151, label %162, label %152

152:                                              ; preds = %147, %152
  %153 = phi %"class.rtc::IPAddress"* [ %154, %152 ], [ %150, %147 ]
  %154 = getelementptr inbounds %"class.rtc::IPAddress", %"class.rtc::IPAddress"* %153, i64 -1
  %155 = bitcast %"class.rtc::IPAddress"* %154 to void (%"class.rtc::IPAddress"*)***
  %156 = load void (%"class.rtc::IPAddress"*)**, void (%"class.rtc::IPAddress"*)*** %155, align 8
  %157 = load void (%"class.rtc::IPAddress"*)*, void (%"class.rtc::IPAddress"*)** %156, align 8
  call void %157(%"class.rtc::IPAddress"* %154) #12
  %158 = icmp eq %"class.rtc::IPAddress"* %154, %145
  br i1 %158, label %159, label %152

159:                                              ; preds = %152
  %160 = bitcast %"class.std::__1::vector"* %2 to i8**
  %161 = load i8*, i8** %160, align 8
  br label %162

162:                                              ; preds = %159, %147
  %163 = phi i8* [ %161, %159 ], [ %148, %147 ]
  store %"class.rtc::IPAddress"* %145, %"class.rtc::IPAddress"** %149, align 8
  call void @_ZdlPv(i8* %163) #13
  br label %164

164:                                              ; preds = %1, %143, %162
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %3)
  ret i1 true
}

; Function Attrs: nounwind ssp uwtable
define internal nonnull i8* @"_ZNSt3__110__function8__policy13__large_cloneINS0_20__default_alloc_funcIZN3rtc13AsyncResolver5StartERKNS4_13SocketAddressEE3$_0FvvEEEEEPvPKv"(i8*) #0 align 2 {
  %2 = tail call i8* @_Znwm(i64 96) #13, !noalias !8
  %3 = bitcast i8* %0 to i64*
  %4 = load i64, i64* %3, align 8
  %5 = bitcast i8* %2 to i64*
  store i64 %4, i64* %5, align 8
  %6 = getelementptr inbounds i8, i8* %2, i64 8
  %7 = bitcast i8* %6 to %"class.rtc::SocketAddress"*
  %8 = getelementptr inbounds i8, i8* %0, i64 8
  %9 = bitcast i8* %8 to %"class.rtc::SocketAddress"*
  tail call void @_ZN3rtc13SocketAddressC1ERKS0_(%"class.rtc::SocketAddress"* %7, %"class.rtc::SocketAddress"* dereferenceable(72) %9) #12
  %10 = getelementptr inbounds i8, i8* %2, i64 80
  %11 = getelementptr inbounds i8, i8* %0, i64 80
  %12 = bitcast i8* %11 to i64*
  %13 = load i64, i64* %12, align 8
  %14 = bitcast i8* %10 to i64*
  store i64 %13, i64* %14, align 8
  %15 = getelementptr inbounds i8, i8* %2, i64 88
  %16 = bitcast i8* %15 to %"struct.rtc::AsyncResolver::State"**
  %17 = getelementptr inbounds i8, i8* %0, i64 88
  %18 = bitcast i8* %17 to %"struct.rtc::AsyncResolver::State"**
  %19 = load %"struct.rtc::AsyncResolver::State"*, %"struct.rtc::AsyncResolver::State"** %18, align 8
  store %"struct.rtc::AsyncResolver::State"* %19, %"struct.rtc::AsyncResolver::State"** %16, align 8
  %20 = icmp eq %"struct.rtc::AsyncResolver::State"* %19, null
  br i1 %20, label %24, label %21

21:                                               ; preds = %1
  %22 = getelementptr inbounds %"struct.rtc::AsyncResolver::State", %"struct.rtc::AsyncResolver::State"* %19, i64 0, i32 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %23 = atomicrmw add i32* %22, i32 1 monotonic
  br label %24

24:                                               ; preds = %1, %21
  ret i8* %2
}

; Function Attrs: nounwind ssp uwtable
define internal void @"_ZNSt3__110__function8__policy15__large_destroyINS0_20__default_alloc_funcIZN3rtc13AsyncResolver5StartERKNS4_13SocketAddressEE3$_0FvvEEEEEvPv"(i8*) #0 align 2 {
  %2 = getelementptr inbounds i8, i8* %0, i64 88
  %3 = bitcast i8* %2 to %"struct.rtc::AsyncResolver::State"**
  %4 = load %"struct.rtc::AsyncResolver::State"*, %"struct.rtc::AsyncResolver::State"** %3, align 8
  %5 = icmp eq %"struct.rtc::AsyncResolver::State"* %4, null
  br i1 %5, label %16, label %6

6:                                                ; preds = %1
  %7 = getelementptr inbounds %"struct.rtc::AsyncResolver::State", %"struct.rtc::AsyncResolver::State"* %4, i64 0, i32 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %8 = atomicrmw sub i32* %7, i32 1 acq_rel
  %9 = icmp eq i32 %8, 1
  br i1 %9, label %10, label %16

10:                                               ; preds = %6
  %11 = bitcast %"struct.rtc::AsyncResolver::State"* %4 to %"class.rtc::RefCountedBase"*
  %12 = bitcast %"struct.rtc::AsyncResolver::State"* %4 to void (%"class.rtc::RefCountedBase"*)***
  %13 = load void (%"class.rtc::RefCountedBase"*)**, void (%"class.rtc::RefCountedBase"*)*** %12, align 8
  %14 = getelementptr inbounds void (%"class.rtc::RefCountedBase"*)*, void (%"class.rtc::RefCountedBase"*)** %13, i64 1
  %15 = load void (%"class.rtc::RefCountedBase"*)*, void (%"class.rtc::RefCountedBase"*)** %14, align 8
  tail call void %15(%"class.rtc::RefCountedBase"* nonnull %11) #12
  br label %16

16:                                               ; preds = %10, %6, %1
  %17 = getelementptr inbounds i8, i8* %0, i64 31
  %18 = load i8, i8* %17, align 1
  %19 = icmp slt i8 %18, 0
  br i1 %19, label %20, label %24

20:                                               ; preds = %16
  %21 = getelementptr inbounds i8, i8* %0, i64 8
  %22 = bitcast i8* %21 to i8**
  %23 = load i8*, i8** %22, align 8
  tail call void @_ZdlPv(i8* %23) #13
  br label %24

24:                                               ; preds = %16, %20
  tail call void @_ZdlPv(i8* %0) #13
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__16vectorIN3rtc9IPAddressENS_9allocatorIS2_EEE6assignIPS2_EENS_9enable_ifIXaasr27__is_cpp17_forward_iteratorIT_EE5valuesr16is_constructibleIS2_NS_15iterator_traitsIS9_E9referenceEEE5valueEvE4typeES9_S9_(%"class.std::__1::vector"*, %"class.rtc::IPAddress"*, %"class.rtc::IPAddress"*) local_unnamed_addr #0 comdat align 2 {
  %4 = ptrtoint %"class.rtc::IPAddress"* %1 to i64
  %5 = ptrtoint %"class.rtc::IPAddress"* %2 to i64
  %6 = sub i64 %5, %4
  %7 = ashr exact i64 %6, 5
  %8 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 0, i32 2, i32 0, i32 0
  %9 = bitcast %"class.rtc::IPAddress"** %8 to i64*
  %10 = load i64, i64* %9, align 8
  %11 = bitcast %"class.std::__1::vector"* %0 to i64*
  %12 = load i64, i64* %11, align 8
  %13 = sub i64 %10, %12
  %14 = ashr exact i64 %13, 5
  %15 = icmp ugt i64 %7, %14
  %16 = inttoptr i64 %12 to %"class.rtc::IPAddress"*
  br i1 %15, label %156, label %17

17:                                               ; preds = %3
  %18 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 0, i32 1
  %19 = bitcast %"class.rtc::IPAddress"** %18 to i64*
  %20 = load i64, i64* %19, align 8
  %21 = sub i64 %20, %12
  %22 = ashr exact i64 %21, 5
  %23 = icmp ugt i64 %7, %22
  %24 = getelementptr inbounds %"class.rtc::IPAddress", %"class.rtc::IPAddress"* %1, i64 %22
  %25 = select i1 %23, %"class.rtc::IPAddress"* %24, %"class.rtc::IPAddress"* %2
  %26 = icmp eq %"class.rtc::IPAddress"* %25, %1
  br i1 %26, label %89, label %27

27:                                               ; preds = %17
  %28 = getelementptr %"class.rtc::IPAddress", %"class.rtc::IPAddress"* %25, i64 -1, i32 0
  %29 = ptrtoint i32 (...)*** %28 to i64
  %30 = sub i64 %29, %4
  %31 = lshr i64 %30, 5
  %32 = add nuw nsw i64 %31, 1
  %33 = and i64 %32, 3
  %34 = icmp eq i64 %33, 0
  br i1 %34, label %50, label %35

35:                                               ; preds = %27, %35
  %36 = phi %"class.rtc::IPAddress"* [ %47, %35 ], [ %16, %27 ]
  %37 = phi %"class.rtc::IPAddress"* [ %46, %35 ], [ %1, %27 ]
  %38 = phi i64 [ %48, %35 ], [ %33, %27 ]
  %39 = getelementptr inbounds %"class.rtc::IPAddress", %"class.rtc::IPAddress"* %37, i64 0, i32 1
  %40 = load i32, i32* %39, align 8
  %41 = getelementptr inbounds %"class.rtc::IPAddress", %"class.rtc::IPAddress"* %36, i64 0, i32 1
  store i32 %40, i32* %41, align 8
  %42 = getelementptr inbounds %"class.rtc::IPAddress", %"class.rtc::IPAddress"* %36, i64 0, i32 2
  %43 = bitcast %union.anon.1* %42 to i8*
  %44 = getelementptr inbounds %"class.rtc::IPAddress", %"class.rtc::IPAddress"* %37, i64 0, i32 2
  %45 = bitcast %union.anon.1* %44 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %43, i8* align 4 %45, i64 16, i1 false) #12
  %46 = getelementptr inbounds %"class.rtc::IPAddress", %"class.rtc::IPAddress"* %37, i64 1
  %47 = getelementptr inbounds %"class.rtc::IPAddress", %"class.rtc::IPAddress"* %36, i64 1
  %48 = add i64 %38, -1
  %49 = icmp eq i64 %48, 0
  br i1 %49, label %50, label %35, !llvm.loop !13

50:                                               ; preds = %35, %27
  %51 = phi %"class.rtc::IPAddress"* [ undef, %27 ], [ %47, %35 ]
  %52 = phi %"class.rtc::IPAddress"* [ %16, %27 ], [ %47, %35 ]
  %53 = phi %"class.rtc::IPAddress"* [ %1, %27 ], [ %46, %35 ]
  %54 = icmp ult i64 %30, 96
  br i1 %54, label %89, label %55

55:                                               ; preds = %50, %55
  %56 = phi %"class.rtc::IPAddress"* [ %87, %55 ], [ %52, %50 ]
  %57 = phi %"class.rtc::IPAddress"* [ %86, %55 ], [ %53, %50 ]
  %58 = getelementptr inbounds %"class.rtc::IPAddress", %"class.rtc::IPAddress"* %57, i64 0, i32 1
  %59 = load i32, i32* %58, align 8
  %60 = getelementptr inbounds %"class.rtc::IPAddress", %"class.rtc::IPAddress"* %56, i64 0, i32 1
  store i32 %59, i32* %60, align 8
  %61 = getelementptr inbounds %"class.rtc::IPAddress", %"class.rtc::IPAddress"* %56, i64 0, i32 2
  %62 = bitcast %union.anon.1* %61 to i8*
  %63 = getelementptr inbounds %"class.rtc::IPAddress", %"class.rtc::IPAddress"* %57, i64 0, i32 2
  %64 = bitcast %union.anon.1* %63 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %62, i8* align 4 %64, i64 16, i1 false) #12
  %65 = getelementptr inbounds %"class.rtc::IPAddress", %"class.rtc::IPAddress"* %57, i64 1, i32 1
  %66 = load i32, i32* %65, align 8
  %67 = getelementptr inbounds %"class.rtc::IPAddress", %"class.rtc::IPAddress"* %56, i64 1, i32 1
  store i32 %66, i32* %67, align 8
  %68 = getelementptr inbounds %"class.rtc::IPAddress", %"class.rtc::IPAddress"* %56, i64 1, i32 2
  %69 = bitcast %union.anon.1* %68 to i8*
  %70 = getelementptr inbounds %"class.rtc::IPAddress", %"class.rtc::IPAddress"* %57, i64 1, i32 2
  %71 = bitcast %union.anon.1* %70 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %69, i8* align 4 %71, i64 16, i1 false) #12
  %72 = getelementptr inbounds %"class.rtc::IPAddress", %"class.rtc::IPAddress"* %57, i64 2, i32 1
  %73 = load i32, i32* %72, align 8
  %74 = getelementptr inbounds %"class.rtc::IPAddress", %"class.rtc::IPAddress"* %56, i64 2, i32 1
  store i32 %73, i32* %74, align 8
  %75 = getelementptr inbounds %"class.rtc::IPAddress", %"class.rtc::IPAddress"* %56, i64 2, i32 2
  %76 = bitcast %union.anon.1* %75 to i8*
  %77 = getelementptr inbounds %"class.rtc::IPAddress", %"class.rtc::IPAddress"* %57, i64 2, i32 2
  %78 = bitcast %union.anon.1* %77 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %76, i8* align 4 %78, i64 16, i1 false) #12
  %79 = getelementptr inbounds %"class.rtc::IPAddress", %"class.rtc::IPAddress"* %57, i64 3, i32 1
  %80 = load i32, i32* %79, align 8
  %81 = getelementptr inbounds %"class.rtc::IPAddress", %"class.rtc::IPAddress"* %56, i64 3, i32 1
  store i32 %80, i32* %81, align 8
  %82 = getelementptr inbounds %"class.rtc::IPAddress", %"class.rtc::IPAddress"* %56, i64 3, i32 2
  %83 = bitcast %union.anon.1* %82 to i8*
  %84 = getelementptr inbounds %"class.rtc::IPAddress", %"class.rtc::IPAddress"* %57, i64 3, i32 2
  %85 = bitcast %union.anon.1* %84 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %83, i8* align 4 %85, i64 16, i1 false) #12
  %86 = getelementptr inbounds %"class.rtc::IPAddress", %"class.rtc::IPAddress"* %57, i64 4
  %87 = getelementptr inbounds %"class.rtc::IPAddress", %"class.rtc::IPAddress"* %56, i64 4
  %88 = icmp eq %"class.rtc::IPAddress"* %86, %25
  br i1 %88, label %89, label %55

89:                                               ; preds = %50, %55, %17
  %90 = phi %"class.rtc::IPAddress"* [ %16, %17 ], [ %51, %50 ], [ %87, %55 ]
  br i1 %23, label %91, label %145

91:                                               ; preds = %89
  %92 = load i64, i64* %19, align 8
  %93 = icmp eq %"class.rtc::IPAddress"* %25, %2
  br i1 %93, label %143, label %94

94:                                               ; preds = %91
  %95 = inttoptr i64 %92 to %"class.rtc::IPAddress"*
  %96 = xor i64 %22, -1
  %97 = getelementptr %"class.rtc::IPAddress", %"class.rtc::IPAddress"* %2, i64 %96, i32 0
  %98 = ptrtoint i32 (...)*** %97 to i64
  %99 = sub i64 %98, %4
  %100 = and i64 %99, 32
  %101 = icmp eq i64 %100, 0
  br i1 %101, label %102, label %113

102:                                              ; preds = %94
  %103 = getelementptr inbounds %"class.rtc::IPAddress", %"class.rtc::IPAddress"* %95, i64 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [4 x i8*] }, { [4 x i8*] }* @_ZTVN3rtc9IPAddressE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %103, align 8
  %104 = getelementptr inbounds %"class.rtc::IPAddress", %"class.rtc::IPAddress"* %95, i64 0, i32 1
  %105 = getelementptr inbounds %"class.rtc::IPAddress", %"class.rtc::IPAddress"* %1, i64 %22, i32 1
  %106 = load i32, i32* %105, align 8
  store i32 %106, i32* %104, align 8
  %107 = getelementptr inbounds %"class.rtc::IPAddress", %"class.rtc::IPAddress"* %95, i64 0, i32 2
  %108 = bitcast %union.anon.1* %107 to i8*
  %109 = getelementptr inbounds %"class.rtc::IPAddress", %"class.rtc::IPAddress"* %1, i64 %22, i32 2
  %110 = bitcast %union.anon.1* %109 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %108, i8* align 4 %110, i64 16, i1 false) #12
  %111 = getelementptr inbounds %"class.rtc::IPAddress", %"class.rtc::IPAddress"* %24, i64 1
  %112 = getelementptr inbounds %"class.rtc::IPAddress", %"class.rtc::IPAddress"* %95, i64 1
  br label %113

113:                                              ; preds = %102, %94
  %114 = phi %"class.rtc::IPAddress"* [ undef, %94 ], [ %112, %102 ]
  %115 = phi %"class.rtc::IPAddress"* [ %95, %94 ], [ %112, %102 ]
  %116 = phi %"class.rtc::IPAddress"* [ %24, %94 ], [ %111, %102 ]
  %117 = icmp ult i64 %99, 32
  br i1 %117, label %140, label %118

118:                                              ; preds = %113, %118
  %119 = phi %"class.rtc::IPAddress"* [ %138, %118 ], [ %115, %113 ]
  %120 = phi %"class.rtc::IPAddress"* [ %137, %118 ], [ %116, %113 ]
  %121 = getelementptr inbounds %"class.rtc::IPAddress", %"class.rtc::IPAddress"* %119, i64 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [4 x i8*] }, { [4 x i8*] }* @_ZTVN3rtc9IPAddressE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %121, align 8
  %122 = getelementptr inbounds %"class.rtc::IPAddress", %"class.rtc::IPAddress"* %119, i64 0, i32 1
  %123 = getelementptr inbounds %"class.rtc::IPAddress", %"class.rtc::IPAddress"* %120, i64 0, i32 1
  %124 = load i32, i32* %123, align 8
  store i32 %124, i32* %122, align 8
  %125 = getelementptr inbounds %"class.rtc::IPAddress", %"class.rtc::IPAddress"* %119, i64 0, i32 2
  %126 = bitcast %union.anon.1* %125 to i8*
  %127 = getelementptr inbounds %"class.rtc::IPAddress", %"class.rtc::IPAddress"* %120, i64 0, i32 2
  %128 = bitcast %union.anon.1* %127 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %126, i8* align 4 %128, i64 16, i1 false) #12
  %129 = getelementptr inbounds %"class.rtc::IPAddress", %"class.rtc::IPAddress"* %119, i64 1, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [4 x i8*] }, { [4 x i8*] }* @_ZTVN3rtc9IPAddressE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %129, align 8
  %130 = getelementptr inbounds %"class.rtc::IPAddress", %"class.rtc::IPAddress"* %119, i64 1, i32 1
  %131 = getelementptr inbounds %"class.rtc::IPAddress", %"class.rtc::IPAddress"* %120, i64 1, i32 1
  %132 = load i32, i32* %131, align 8
  store i32 %132, i32* %130, align 8
  %133 = getelementptr inbounds %"class.rtc::IPAddress", %"class.rtc::IPAddress"* %119, i64 1, i32 2
  %134 = bitcast %union.anon.1* %133 to i8*
  %135 = getelementptr inbounds %"class.rtc::IPAddress", %"class.rtc::IPAddress"* %120, i64 1, i32 2
  %136 = bitcast %union.anon.1* %135 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %134, i8* align 4 %136, i64 16, i1 false) #12
  %137 = getelementptr inbounds %"class.rtc::IPAddress", %"class.rtc::IPAddress"* %120, i64 2
  %138 = getelementptr inbounds %"class.rtc::IPAddress", %"class.rtc::IPAddress"* %119, i64 2
  %139 = icmp eq %"class.rtc::IPAddress"* %137, %2
  br i1 %139, label %140, label %118

140:                                              ; preds = %118, %113
  %141 = phi %"class.rtc::IPAddress"* [ %114, %113 ], [ %138, %118 ]
  %142 = ptrtoint %"class.rtc::IPAddress"* %141 to i64
  br label %143

143:                                              ; preds = %91, %140
  %144 = phi i64 [ %92, %91 ], [ %142, %140 ]
  store i64 %144, i64* %19, align 8
  br label %253

145:                                              ; preds = %89
  %146 = load %"class.rtc::IPAddress"*, %"class.rtc::IPAddress"** %18, align 8
  %147 = icmp eq %"class.rtc::IPAddress"* %146, %90
  br i1 %147, label %155, label %148

148:                                              ; preds = %145, %148
  %149 = phi %"class.rtc::IPAddress"* [ %150, %148 ], [ %146, %145 ]
  %150 = getelementptr inbounds %"class.rtc::IPAddress", %"class.rtc::IPAddress"* %149, i64 -1
  %151 = bitcast %"class.rtc::IPAddress"* %150 to void (%"class.rtc::IPAddress"*)***
  %152 = load void (%"class.rtc::IPAddress"*)**, void (%"class.rtc::IPAddress"*)*** %151, align 8
  %153 = load void (%"class.rtc::IPAddress"*)*, void (%"class.rtc::IPAddress"*)** %152, align 8
  tail call void %153(%"class.rtc::IPAddress"* %150) #12
  %154 = icmp eq %"class.rtc::IPAddress"* %150, %90
  br i1 %154, label %155, label %148

155:                                              ; preds = %148, %145
  store %"class.rtc::IPAddress"* %90, %"class.rtc::IPAddress"** %18, align 8
  br label %253

156:                                              ; preds = %3
  %157 = icmp eq i64 %12, 0
  br i1 %157, label %176, label %158

158:                                              ; preds = %156
  %159 = inttoptr i64 %12 to i8*
  %160 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 0, i32 1
  %161 = load %"class.rtc::IPAddress"*, %"class.rtc::IPAddress"** %160, align 8
  %162 = icmp eq %"class.rtc::IPAddress"* %161, %16
  br i1 %162, label %173, label %163

163:                                              ; preds = %158, %163
  %164 = phi %"class.rtc::IPAddress"* [ %165, %163 ], [ %161, %158 ]
  %165 = getelementptr inbounds %"class.rtc::IPAddress", %"class.rtc::IPAddress"* %164, i64 -1
  %166 = bitcast %"class.rtc::IPAddress"* %165 to void (%"class.rtc::IPAddress"*)***
  %167 = load void (%"class.rtc::IPAddress"*)**, void (%"class.rtc::IPAddress"*)*** %166, align 8
  %168 = load void (%"class.rtc::IPAddress"*)*, void (%"class.rtc::IPAddress"*)** %167, align 8
  tail call void %168(%"class.rtc::IPAddress"* %165) #12
  %169 = icmp eq %"class.rtc::IPAddress"* %165, %16
  br i1 %169, label %170, label %163

170:                                              ; preds = %163
  %171 = bitcast %"class.std::__1::vector"* %0 to i8**
  %172 = load i8*, i8** %171, align 8
  br label %173

173:                                              ; preds = %170, %158
  %174 = phi i8* [ %172, %170 ], [ %159, %158 ]
  store %"class.rtc::IPAddress"* %16, %"class.rtc::IPAddress"** %160, align 8
  tail call void @_ZdlPv(i8* %174) #13
  %175 = bitcast %"class.std::__1::vector"* %0 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %175, i8 0, i64 24, i1 false) #12
  br label %176

176:                                              ; preds = %156, %173
  %177 = phi i64 [ %10, %156 ], [ 0, %173 ]
  %178 = icmp ugt i64 %7, 576460752303423487
  br i1 %178, label %179, label %181

179:                                              ; preds = %176
  %180 = bitcast %"class.std::__1::vector"* %0 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %180) #14
  unreachable

181:                                              ; preds = %176
  %182 = ashr exact i64 %177, 5
  %183 = icmp ult i64 %182, 288230376151711743
  br i1 %183, label %184, label %191

184:                                              ; preds = %181
  %185 = ashr exact i64 %177, 4
  %186 = icmp ult i64 %185, %7
  br i1 %186, label %191, label %187

187:                                              ; preds = %184
  %188 = icmp ugt i64 %185, 576460752303423487
  br i1 %188, label %189, label %191

189:                                              ; preds = %187
  %190 = bitcast %"class.std::__1::vector"* %0 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %190) #14
  unreachable

191:                                              ; preds = %184, %181, %187
  %192 = phi i64 [ %185, %187 ], [ 576460752303423487, %181 ], [ %7, %184 ]
  %193 = shl i64 %192, 5
  %194 = tail call i8* @_Znwm(i64 %193) #13
  %195 = bitcast i8* %194 to %"class.rtc::IPAddress"*
  %196 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 0, i32 1
  %197 = bitcast %"class.rtc::IPAddress"** %196 to i8**
  store i8* %194, i8** %197, align 8
  %198 = bitcast %"class.std::__1::vector"* %0 to i8**
  store i8* %194, i8** %198, align 8
  %199 = getelementptr inbounds %"class.rtc::IPAddress", %"class.rtc::IPAddress"* %195, i64 %192
  store %"class.rtc::IPAddress"* %199, %"class.rtc::IPAddress"** %8, align 8
  %200 = bitcast %"class.rtc::IPAddress"** %196 to i64*
  %201 = ptrtoint i8* %194 to i64
  %202 = icmp eq %"class.rtc::IPAddress"* %1, %2
  br i1 %202, label %251, label %203

203:                                              ; preds = %191
  %204 = getelementptr %"class.rtc::IPAddress", %"class.rtc::IPAddress"* %2, i64 -1, i32 0
  %205 = ptrtoint i32 (...)*** %204 to i64
  %206 = sub i64 %205, %4
  %207 = and i64 %206, 32
  %208 = icmp eq i64 %207, 0
  br i1 %208, label %209, label %221

209:                                              ; preds = %203
  %210 = bitcast i8* %194 to i32 (...)***
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [4 x i8*] }, { [4 x i8*] }* @_ZTVN3rtc9IPAddressE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %210, align 8
  %211 = getelementptr inbounds i8, i8* %194, i64 8
  %212 = bitcast i8* %211 to i32*
  %213 = getelementptr inbounds %"class.rtc::IPAddress", %"class.rtc::IPAddress"* %1, i64 0, i32 1
  %214 = load i32, i32* %213, align 8
  store i32 %214, i32* %212, align 8
  %215 = getelementptr inbounds i8, i8* %194, i64 12
  %216 = getelementptr inbounds %"class.rtc::IPAddress", %"class.rtc::IPAddress"* %1, i64 0, i32 2
  %217 = bitcast %union.anon.1* %216 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %215, i8* align 4 %217, i64 16, i1 false) #12
  %218 = getelementptr inbounds %"class.rtc::IPAddress", %"class.rtc::IPAddress"* %1, i64 1
  %219 = getelementptr inbounds i8, i8* %194, i64 32
  %220 = bitcast i8* %219 to %"class.rtc::IPAddress"*
  br label %221

221:                                              ; preds = %209, %203
  %222 = phi %"class.rtc::IPAddress"* [ undef, %203 ], [ %220, %209 ]
  %223 = phi %"class.rtc::IPAddress"* [ %195, %203 ], [ %220, %209 ]
  %224 = phi %"class.rtc::IPAddress"* [ %1, %203 ], [ %218, %209 ]
  %225 = icmp ult i64 %206, 32
  br i1 %225, label %248, label %226

226:                                              ; preds = %221, %226
  %227 = phi %"class.rtc::IPAddress"* [ %246, %226 ], [ %223, %221 ]
  %228 = phi %"class.rtc::IPAddress"* [ %245, %226 ], [ %224, %221 ]
  %229 = getelementptr inbounds %"class.rtc::IPAddress", %"class.rtc::IPAddress"* %227, i64 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [4 x i8*] }, { [4 x i8*] }* @_ZTVN3rtc9IPAddressE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %229, align 8
  %230 = getelementptr inbounds %"class.rtc::IPAddress", %"class.rtc::IPAddress"* %227, i64 0, i32 1
  %231 = getelementptr inbounds %"class.rtc::IPAddress", %"class.rtc::IPAddress"* %228, i64 0, i32 1
  %232 = load i32, i32* %231, align 8
  store i32 %232, i32* %230, align 8
  %233 = getelementptr inbounds %"class.rtc::IPAddress", %"class.rtc::IPAddress"* %227, i64 0, i32 2
  %234 = bitcast %union.anon.1* %233 to i8*
  %235 = getelementptr inbounds %"class.rtc::IPAddress", %"class.rtc::IPAddress"* %228, i64 0, i32 2
  %236 = bitcast %union.anon.1* %235 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %234, i8* align 4 %236, i64 16, i1 false) #12
  %237 = getelementptr inbounds %"class.rtc::IPAddress", %"class.rtc::IPAddress"* %227, i64 1, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [4 x i8*] }, { [4 x i8*] }* @_ZTVN3rtc9IPAddressE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %237, align 8
  %238 = getelementptr inbounds %"class.rtc::IPAddress", %"class.rtc::IPAddress"* %227, i64 1, i32 1
  %239 = getelementptr inbounds %"class.rtc::IPAddress", %"class.rtc::IPAddress"* %228, i64 1, i32 1
  %240 = load i32, i32* %239, align 8
  store i32 %240, i32* %238, align 8
  %241 = getelementptr inbounds %"class.rtc::IPAddress", %"class.rtc::IPAddress"* %227, i64 1, i32 2
  %242 = bitcast %union.anon.1* %241 to i8*
  %243 = getelementptr inbounds %"class.rtc::IPAddress", %"class.rtc::IPAddress"* %228, i64 1, i32 2
  %244 = bitcast %union.anon.1* %243 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %242, i8* align 4 %244, i64 16, i1 false) #12
  %245 = getelementptr inbounds %"class.rtc::IPAddress", %"class.rtc::IPAddress"* %228, i64 2
  %246 = getelementptr inbounds %"class.rtc::IPAddress", %"class.rtc::IPAddress"* %227, i64 2
  %247 = icmp eq %"class.rtc::IPAddress"* %245, %2
  br i1 %247, label %248, label %226

248:                                              ; preds = %226, %221
  %249 = phi %"class.rtc::IPAddress"* [ %222, %221 ], [ %246, %226 ]
  %250 = ptrtoint %"class.rtc::IPAddress"* %249 to i64
  br label %251

251:                                              ; preds = %191, %248
  %252 = phi i64 [ %201, %191 ], [ %250, %248 ]
  store i64 %252, i64* %200, align 8
  br label %253

253:                                              ; preds = %143, %155, %251
  ret void
}

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nobuiltin nofree "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nounwind readonly ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { nounwind readnone ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { inlinehint nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #9 = { argmemonly nofree nounwind readonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #10 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #11 = { noreturn nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #12 = { nounwind }
attributes #13 = { builtin nounwind }
attributes #14 = { noreturn nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{!3, !5}
!3 = distinct !{!3, !4, !"_ZNSt3__123__builtin_new_allocator16__allocate_bytesEmm: argument 0"}
!4 = distinct !{!4, !"_ZNSt3__123__builtin_new_allocator16__allocate_bytesEmm"}
!5 = distinct !{!5, !6, !"_ZNSt3__123__builtin_new_allocator15__allocate_typeINS_10__function20__default_alloc_funcIZN3rtc13AsyncResolver5StartERKNS4_13SocketAddressEE3$_0FvvEEEEENS_10unique_ptrIvNS0_21__builtin_new_deleterEEEm: argument 0"}
!6 = distinct !{!6, !"_ZNSt3__123__builtin_new_allocator15__allocate_typeINS_10__function20__default_alloc_funcIZN3rtc13AsyncResolver5StartERKNS4_13SocketAddressEE3$_0FvvEEEEENS_10unique_ptrIvNS0_21__builtin_new_deleterEEEm"}
!7 = !{i8 0, i8 2}
!8 = !{!9, !11}
!9 = distinct !{!9, !10, !"_ZNSt3__123__builtin_new_allocator16__allocate_bytesEmm: argument 0"}
!10 = distinct !{!10, !"_ZNSt3__123__builtin_new_allocator16__allocate_bytesEmm"}
!11 = distinct !{!11, !12, !"_ZNSt3__123__builtin_new_allocator15__allocate_typeINS_10__function20__default_alloc_funcIZN3rtc13AsyncResolver5StartERKNS4_13SocketAddressEE3$_0FvvEEEEENS_10unique_ptrIvNS0_21__builtin_new_deleterEEEm: argument 0"}
!12 = distinct !{!12, !"_ZNSt3__123__builtin_new_allocator15__allocate_typeINS_10__function20__default_alloc_funcIZN3rtc13AsyncResolver5StartERKNS4_13SocketAddressEE3$_0FvvEEEEENS_10unique_ptrIvNS0_21__builtin_new_deleterEEEm"}
!13 = distinct !{!13, !14}
!14 = !{!"llvm.loop.unroll.disable"}
