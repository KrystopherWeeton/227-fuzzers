; ModuleID = '../../third_party/tflite/src/tensorflow/lite/kernels/ceil.cc'
source_filename = "../../third_party/tflite/src/tensorflow/lite/kernels/ceil.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%struct.TfLiteContext = type { i64, i32 (%struct.TfLiteContext*, %struct.TfLiteIntArray**)*, %struct.TfLiteTensor*, i8*, i32 (%struct.TfLiteContext*, %struct.TfLiteTensor*, %struct.TfLiteIntArray*)*, void (%struct.TfLiteContext*, i8*, ...)*, i32 (%struct.TfLiteContext*, i32, i32*)*, i32 (%struct.TfLiteContext*, i32, %struct.TfLiteNode**, %struct.TfLiteRegistration**)*, i32 (%struct.TfLiteContext*, %struct.TfLiteRegistration*, %struct.TfLiteIntArray*, %struct.TfLiteDelegate*)*, i32, %struct.TfLiteExternalContext* (%struct.TfLiteContext*, i32)*, void (%struct.TfLiteContext*, i32, %struct.TfLiteExternalContext*)*, i8, i8*, i32 (%struct.TfLiteContext*, i64, i8**)*, i32 (%struct.TfLiteContext*, i64, i8**)*, i32 (%struct.TfLiteContext*, i64, i32*)*, i8* (%struct.TfLiteContext*, i32)*, i32 (%struct.TfLiteContext*, %struct.TfLiteTensor*, i32, i32*)*, i32 (%struct.TfLiteContext*, %struct.TfLiteIntArray*, %struct.TfLiteDelegateParams**, i32*)* }
%struct.TfLiteIntArray = type { i32, [0 x i32] }
%struct.TfLiteTensor = type { i32, %union.TfLitePtrUnion, %struct.TfLiteIntArray*, %struct.TfLiteQuantizationParams, i32, i64, i8*, i8*, %struct.TfLiteDelegate*, i32, i8, i8, %struct.TfLiteQuantization, %struct.TfLiteSparsity*, %struct.TfLiteIntArray* }
%union.TfLitePtrUnion = type { i32* }
%struct.TfLiteQuantizationParams = type { float, i32 }
%struct.TfLiteDelegate = type { i8*, i32 (%struct.TfLiteContext*, %struct.TfLiteDelegate*)*, i32 (%struct.TfLiteContext*, %struct.TfLiteDelegate*, i32, %struct.TfLiteTensor*)*, i32 (%struct.TfLiteContext*, %struct.TfLiteDelegate*, i32, %struct.TfLiteTensor*)*, void (%struct.TfLiteContext*, %struct.TfLiteDelegate*, i32*)*, i64 }
%struct.TfLiteQuantization = type { i32, i8* }
%struct.TfLiteSparsity = type { %struct.TfLiteIntArray*, %struct.TfLiteIntArray*, %struct.TfLiteDimensionMetadata*, i32 }
%struct.TfLiteDimensionMetadata = type { i32, i32, %struct.TfLiteIntArray*, %struct.TfLiteIntArray* }
%struct.TfLiteNode = type { %struct.TfLiteIntArray*, %struct.TfLiteIntArray*, %struct.TfLiteIntArray*, %struct.TfLiteIntArray*, i8*, i8*, i8*, i32, %struct.TfLiteDelegate* }
%struct.TfLiteRegistration = type { i8* (%struct.TfLiteContext*, i8*, i64)*, void (%struct.TfLiteContext*, i8*)*, {}*, {}*, i8* (%struct.TfLiteContext*, %struct.TfLiteNode*)*, i32, i8*, i32 }
%struct.TfLiteExternalContext = type { i32, i32 (%struct.TfLiteContext*)* }
%struct.TfLiteDelegateParams = type { %struct.TfLiteDelegate*, %struct.TfLiteIntArray*, %struct.TfLiteIntArray*, %struct.TfLiteIntArray* }
%"class.tflite::RuntimeShape" = type { i32, %union.anon }
%union.anon = type { i32*, [16 x i8] }

@.str = private unnamed_addr constant [26 x i8] c"%s:%d %s != %s (%d != %d)\00", align 1
@.str.3 = private unnamed_addr constant [61 x i8] c"../../third_party/tflite/src/tensorflow/lite/kernels/ceil.cc\00", align 1
@.str.4 = private unnamed_addr constant [16 x i8] c"NumInputs(node)\00", align 1
@.str.5 = private unnamed_addr constant [2 x i8] c"1\00", align 1
@.str.6 = private unnamed_addr constant [17 x i8] c"NumOutputs(node)\00", align 1
@.str.7 = private unnamed_addr constant [26 x i8] c"%s:%d %s != %s (%s != %s)\00", align 1
@.str.8 = private unnamed_addr constant [12 x i8] c"input->type\00", align 1
@.str.9 = private unnamed_addr constant [15 x i8] c"kTfLiteFloat32\00", align 1
@_ZZN6tflite3ops7builtin13Register_CEILEvE1r = internal global { i8* (%struct.TfLiteContext*, i8*, i64)*, void (%struct.TfLiteContext*, i8*)*, i32 (%struct.TfLiteContext*, %struct.TfLiteNode*)*, i32 (%struct.TfLiteContext*, %struct.TfLiteNode*)*, i8* (%struct.TfLiteContext*, %struct.TfLiteNode*)*, i32, i8*, i32 } { i8* (%struct.TfLiteContext*, i8*, i64)* null, void (%struct.TfLiteContext*, i8*)* null, i32 (%struct.TfLiteContext*, %struct.TfLiteNode*)* @_ZN6tflite3ops7builtin4ceil7PrepareEP13TfLiteContextP10TfLiteNode, i32 (%struct.TfLiteContext*, %struct.TfLiteNode*)* @_ZN6tflite3ops7builtin4ceil4EvalEP13TfLiteContextP10TfLiteNode, i8* (%struct.TfLiteContext*, %struct.TfLiteNode*)* null, i32 0, i8* null, i32 0 }, align 8
@llvm.global_ctors = appending global [0 x { i32, void ()*, i8* }] zeroinitializer

; Function Attrs: nounwind ssp uwtable
define hidden i32 @_ZN6tflite3ops7builtin4ceil7PrepareEP13TfLiteContextP10TfLiteNode(%struct.TfLiteContext*, %struct.TfLiteNode* nocapture readonly) #0 {
  %3 = getelementptr inbounds %struct.TfLiteNode, %struct.TfLiteNode* %1, i64 0, i32 0
  %4 = load %struct.TfLiteIntArray*, %struct.TfLiteIntArray** %3, align 8
  %5 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %4, i64 0, i32 1, i64 0
  %6 = load i32, i32* %5, align 4
  %7 = icmp slt i32 %6, 0
  br i1 %7, label %13, label %8

8:                                                ; preds = %2
  %9 = getelementptr inbounds %struct.TfLiteContext, %struct.TfLiteContext* %0, i64 0, i32 2
  %10 = load %struct.TfLiteTensor*, %struct.TfLiteTensor** %9, align 8
  %11 = sext i32 %6 to i64
  %12 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %10, i64 %11
  br label %13

13:                                               ; preds = %2, %8
  %14 = phi %struct.TfLiteTensor* [ %12, %8 ], [ null, %2 ]
  %15 = getelementptr inbounds %struct.TfLiteNode, %struct.TfLiteNode* %1, i64 0, i32 1
  %16 = load %struct.TfLiteIntArray*, %struct.TfLiteIntArray** %15, align 8
  %17 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %16, i64 0, i32 1, i64 0
  %18 = load i32, i32* %17, align 4
  %19 = icmp slt i32 %18, 0
  br i1 %19, label %25, label %20

20:                                               ; preds = %13
  %21 = getelementptr inbounds %struct.TfLiteContext, %struct.TfLiteContext* %0, i64 0, i32 2
  %22 = load %struct.TfLiteTensor*, %struct.TfLiteTensor** %21, align 8
  %23 = sext i32 %18 to i64
  %24 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %22, i64 %23
  br label %25

25:                                               ; preds = %13, %20
  %26 = phi %struct.TfLiteTensor* [ %24, %20 ], [ null, %13 ]
  %27 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %4, i64 0, i32 0
  %28 = load i32, i32* %27, align 4
  %29 = icmp eq i32 %28, 1
  br i1 %29, label %33, label %30

30:                                               ; preds = %25
  %31 = getelementptr inbounds %struct.TfLiteContext, %struct.TfLiteContext* %0, i64 0, i32 5
  %32 = load void (%struct.TfLiteContext*, i8*, ...)*, void (%struct.TfLiteContext*, i8*, ...)** %31, align 8
  tail call void (%struct.TfLiteContext*, i8*, ...) %32(%struct.TfLiteContext* %0, i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str, i64 0, i64 0), i8* getelementptr inbounds ([61 x i8], [61 x i8]* @.str.3, i64 0, i64 0), i32 33, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.4, i64 0, i64 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.5, i64 0, i64 0), i32 %28, i32 1) #7
  br label %57

33:                                               ; preds = %25
  %34 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %16, i64 0, i32 0
  %35 = load i32, i32* %34, align 4
  %36 = icmp eq i32 %35, 1
  br i1 %36, label %40, label %37

37:                                               ; preds = %33
  %38 = getelementptr inbounds %struct.TfLiteContext, %struct.TfLiteContext* %0, i64 0, i32 5
  %39 = load void (%struct.TfLiteContext*, i8*, ...)*, void (%struct.TfLiteContext*, i8*, ...)** %38, align 8
  tail call void (%struct.TfLiteContext*, i8*, ...) %39(%struct.TfLiteContext* %0, i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str, i64 0, i64 0), i8* getelementptr inbounds ([61 x i8], [61 x i8]* @.str.3, i64 0, i64 0), i32 34, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.6, i64 0, i64 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.5, i64 0, i64 0), i32 %35, i32 1) #7
  br label %57

40:                                               ; preds = %33
  %41 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %14, i64 0, i32 0
  %42 = load i32, i32* %41, align 8
  %43 = icmp eq i32 %42, 1
  br i1 %43, label %49, label %44

44:                                               ; preds = %40
  %45 = getelementptr inbounds %struct.TfLiteContext, %struct.TfLiteContext* %0, i64 0, i32 5
  %46 = load void (%struct.TfLiteContext*, i8*, ...)*, void (%struct.TfLiteContext*, i8*, ...)** %45, align 8
  %47 = tail call i8* @TfLiteTypeGetName(i32 %42) #7
  %48 = tail call i8* @TfLiteTypeGetName(i32 1) #7
  tail call void (%struct.TfLiteContext*, i8*, ...) %46(%struct.TfLiteContext* %0, i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.7, i64 0, i64 0), i8* getelementptr inbounds ([61 x i8], [61 x i8]* @.str.3, i64 0, i64 0), i32 35, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.8, i64 0, i64 0), i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.9, i64 0, i64 0), i8* %47, i8* %48) #7
  br label %57

49:                                               ; preds = %40
  %50 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %26, i64 0, i32 0
  store i32 1, i32* %50, align 8
  %51 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %14, i64 0, i32 2
  %52 = load %struct.TfLiteIntArray*, %struct.TfLiteIntArray** %51, align 8
  %53 = tail call %struct.TfLiteIntArray* @TfLiteIntArrayCopy(%struct.TfLiteIntArray* %52) #7
  %54 = getelementptr inbounds %struct.TfLiteContext, %struct.TfLiteContext* %0, i64 0, i32 4
  %55 = load i32 (%struct.TfLiteContext*, %struct.TfLiteTensor*, %struct.TfLiteIntArray*)*, i32 (%struct.TfLiteContext*, %struct.TfLiteTensor*, %struct.TfLiteIntArray*)** %54, align 8
  %56 = tail call i32 %55(%struct.TfLiteContext* %0, %struct.TfLiteTensor* %26, %struct.TfLiteIntArray* %53) #7
  br label %57

57:                                               ; preds = %49, %44, %37, %30
  %58 = phi i32 [ 1, %30 ], [ 1, %37 ], [ 1, %44 ], [ %56, %49 ]
  ret i32 %58
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

declare i8* @TfLiteTypeGetName(i32) local_unnamed_addr #2

declare %struct.TfLiteIntArray* @TfLiteIntArrayCopy(%struct.TfLiteIntArray*) local_unnamed_addr #2

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nounwind ssp uwtable
define hidden i32 @_ZN6tflite3ops7builtin4ceil4EvalEP13TfLiteContextP10TfLiteNode(%struct.TfLiteContext* nocapture readonly, %struct.TfLiteNode* nocapture readonly) #0 {
  %3 = alloca %"class.tflite::RuntimeShape", align 8
  %4 = alloca %"class.tflite::RuntimeShape", align 8
  %5 = getelementptr inbounds %struct.TfLiteNode, %struct.TfLiteNode* %1, i64 0, i32 0
  %6 = load %struct.TfLiteIntArray*, %struct.TfLiteIntArray** %5, align 8
  %7 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %6, i64 0, i32 1, i64 0
  %8 = load i32, i32* %7, align 4
  %9 = icmp slt i32 %8, 0
  br i1 %9, label %15, label %10

10:                                               ; preds = %2
  %11 = getelementptr inbounds %struct.TfLiteContext, %struct.TfLiteContext* %0, i64 0, i32 2
  %12 = load %struct.TfLiteTensor*, %struct.TfLiteTensor** %11, align 8
  %13 = sext i32 %8 to i64
  %14 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %12, i64 %13
  br label %15

15:                                               ; preds = %2, %10
  %16 = phi %struct.TfLiteTensor* [ %14, %10 ], [ null, %2 ]
  %17 = getelementptr inbounds %struct.TfLiteNode, %struct.TfLiteNode* %1, i64 0, i32 1
  %18 = load %struct.TfLiteIntArray*, %struct.TfLiteIntArray** %17, align 8
  %19 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %18, i64 0, i32 1, i64 0
  %20 = load i32, i32* %19, align 4
  %21 = icmp slt i32 %20, 0
  br i1 %21, label %27, label %22

22:                                               ; preds = %15
  %23 = getelementptr inbounds %struct.TfLiteContext, %struct.TfLiteContext* %0, i64 0, i32 2
  %24 = load %struct.TfLiteTensor*, %struct.TfLiteTensor** %23, align 8
  %25 = sext i32 %20 to i64
  %26 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %24, i64 %25
  br label %27

27:                                               ; preds = %15, %22
  %28 = phi %struct.TfLiteTensor* [ %26, %22 ], [ null, %15 ]
  %29 = bitcast %"class.tflite::RuntimeShape"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %29) #7
  %30 = icmp eq %struct.TfLiteTensor* %16, null
  br i1 %30, label %31, label %33

31:                                               ; preds = %27
  %32 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %3, i64 0, i32 0
  store i32 0, i32* %32, align 8, !alias.scope !2
  br label %62

33:                                               ; preds = %27
  %34 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %16, i64 0, i32 2
  %35 = load %struct.TfLiteIntArray*, %struct.TfLiteIntArray** %34, align 8, !noalias !2
  %36 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %35, i64 0, i32 0
  %37 = load i32, i32* %36, align 4, !noalias !2
  %38 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %35, i64 0, i32 1, i64 0
  %39 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %3, i64 0, i32 0
  store i32 %37, i32* %39, align 8, !alias.scope !2
  %40 = icmp sgt i32 %37, 5
  br i1 %40, label %41, label %48

41:                                               ; preds = %33
  %42 = sext i32 %37 to i64
  %43 = shl nsw i64 %42, 2
  %44 = tail call i8* @_Znam(i64 %43) #8, !noalias !2
  %45 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %3, i64 0, i32 1, i32 0
  %46 = bitcast i32** %45 to i8**
  store i8* %44, i8** %46, align 8, !alias.scope !2
  %47 = bitcast i8* %44 to i32*
  br label %53

48:                                               ; preds = %33
  %49 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %3, i64 0, i32 1
  %50 = bitcast %union.anon* %49 to i32*
  %51 = sext i32 %37 to i64
  %52 = shl nsw i64 %51, 2
  br label %53

53:                                               ; preds = %48, %41
  %54 = phi i64 [ %43, %41 ], [ %52, %48 ]
  %55 = phi i32* [ %47, %41 ], [ %50, %48 ]
  %56 = bitcast i32* %55 to i8*
  %57 = bitcast i32* %38 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %56, i8* align 4 %57, i64 %54, i1 false) #7
  %58 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %16, i64 0, i32 1
  %59 = bitcast %union.TfLitePtrUnion* %58 to float**
  %60 = load float*, float** %59, align 8
  %61 = bitcast float* %60 to i8*
  br label %62

62:                                               ; preds = %31, %53
  %63 = phi i32 [ %37, %53 ], [ 0, %31 ]
  %64 = phi i8* [ %61, %53 ], [ null, %31 ]
  %65 = phi float* [ %60, %53 ], [ null, %31 ]
  %66 = bitcast %"class.tflite::RuntimeShape"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %66) #7
  %67 = icmp eq %struct.TfLiteTensor* %28, null
  br i1 %67, label %68, label %70

68:                                               ; preds = %62
  %69 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %4, i64 0, i32 0
  store i32 0, i32* %69, align 8, !alias.scope !5
  br label %208

70:                                               ; preds = %62
  %71 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %28, i64 0, i32 2
  %72 = load %struct.TfLiteIntArray*, %struct.TfLiteIntArray** %71, align 8, !noalias !5
  %73 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %72, i64 0, i32 0
  %74 = load i32, i32* %73, align 4, !noalias !5
  %75 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %72, i64 0, i32 1, i64 0
  %76 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %4, i64 0, i32 0
  store i32 %74, i32* %76, align 8, !alias.scope !5
  %77 = icmp sgt i32 %74, 5
  br i1 %77, label %78, label %90

78:                                               ; preds = %70
  %79 = sext i32 %74 to i64
  %80 = shl nsw i64 %79, 2
  %81 = tail call i8* @_Znam(i64 %80) #8, !noalias !5
  %82 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %4, i64 0, i32 1, i32 0
  %83 = bitcast i32** %82 to i8**
  store i8* %81, i8** %83, align 8, !alias.scope !5
  %84 = bitcast i32* %75 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %81, i8* align 4 %84, i64 %80, i1 false) #7
  %85 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %28, i64 0, i32 1
  %86 = bitcast %union.TfLitePtrUnion* %85 to float**
  %87 = load float*, float** %86, align 8
  %88 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %4, i64 0, i32 1, i32 0
  %89 = load i32*, i32** %88, align 8, !noalias !8
  br label %102

90:                                               ; preds = %70
  %91 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %4, i64 0, i32 1
  %92 = sext i32 %74 to i64
  %93 = shl nsw i64 %92, 2
  %94 = bitcast %union.anon* %91 to i8*
  %95 = bitcast i32* %75 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %94, i8* align 4 %95, i64 %93, i1 false) #7
  %96 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %28, i64 0, i32 1
  %97 = bitcast %union.TfLitePtrUnion* %96 to float**
  %98 = load float*, float** %97, align 8
  %99 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %4, i64 0, i32 1
  %100 = bitcast %union.anon* %99 to i32*
  %101 = icmp sgt i32 %74, 0
  br i1 %101, label %102, label %208

102:                                              ; preds = %90, %78
  %103 = phi i1 [ true, %78 ], [ false, %90 ]
  %104 = phi float* [ %87, %78 ], [ %98, %90 ]
  %105 = phi i32* [ %89, %78 ], [ %100, %90 ]
  %106 = zext i32 %74 to i64
  %107 = icmp ult i32 %74, 8
  br i1 %107, label %193, label %108

108:                                              ; preds = %102
  %109 = and i64 %106, 4294967288
  %110 = add nsw i64 %109, -8
  %111 = lshr exact i64 %110, 3
  %112 = add nuw nsw i64 %111, 1
  %113 = and i64 %112, 3
  %114 = icmp ult i64 %110, 24
  br i1 %114, label %160, label %115

115:                                              ; preds = %108
  %116 = sub nsw i64 %112, %113
  br label %117

117:                                              ; preds = %117, %115
  %118 = phi i64 [ 0, %115 ], [ %157, %117 ]
  %119 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %115 ], [ %155, %117 ]
  %120 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %115 ], [ %156, %117 ]
  %121 = phi i64 [ %116, %115 ], [ %158, %117 ]
  %122 = getelementptr inbounds i32, i32* %105, i64 %118
  %123 = bitcast i32* %122 to <4 x i32>*
  %124 = load <4 x i32>, <4 x i32>* %123, align 4, !noalias !8
  %125 = getelementptr inbounds i32, i32* %122, i64 4
  %126 = bitcast i32* %125 to <4 x i32>*
  %127 = load <4 x i32>, <4 x i32>* %126, align 4, !noalias !8
  %128 = mul nsw <4 x i32> %124, %119
  %129 = mul nsw <4 x i32> %127, %120
  %130 = or i64 %118, 8
  %131 = getelementptr inbounds i32, i32* %105, i64 %130
  %132 = bitcast i32* %131 to <4 x i32>*
  %133 = load <4 x i32>, <4 x i32>* %132, align 4, !noalias !8
  %134 = getelementptr inbounds i32, i32* %131, i64 4
  %135 = bitcast i32* %134 to <4 x i32>*
  %136 = load <4 x i32>, <4 x i32>* %135, align 4, !noalias !8
  %137 = mul nsw <4 x i32> %133, %128
  %138 = mul nsw <4 x i32> %136, %129
  %139 = or i64 %118, 16
  %140 = getelementptr inbounds i32, i32* %105, i64 %139
  %141 = bitcast i32* %140 to <4 x i32>*
  %142 = load <4 x i32>, <4 x i32>* %141, align 4, !noalias !8
  %143 = getelementptr inbounds i32, i32* %140, i64 4
  %144 = bitcast i32* %143 to <4 x i32>*
  %145 = load <4 x i32>, <4 x i32>* %144, align 4, !noalias !8
  %146 = mul nsw <4 x i32> %142, %137
  %147 = mul nsw <4 x i32> %145, %138
  %148 = or i64 %118, 24
  %149 = getelementptr inbounds i32, i32* %105, i64 %148
  %150 = bitcast i32* %149 to <4 x i32>*
  %151 = load <4 x i32>, <4 x i32>* %150, align 4, !noalias !8
  %152 = getelementptr inbounds i32, i32* %149, i64 4
  %153 = bitcast i32* %152 to <4 x i32>*
  %154 = load <4 x i32>, <4 x i32>* %153, align 4, !noalias !8
  %155 = mul nsw <4 x i32> %151, %146
  %156 = mul nsw <4 x i32> %154, %147
  %157 = add i64 %118, 32
  %158 = add i64 %121, -4
  %159 = icmp eq i64 %158, 0
  br i1 %159, label %160, label %117, !llvm.loop !11

160:                                              ; preds = %117, %108
  %161 = phi <4 x i32> [ undef, %108 ], [ %155, %117 ]
  %162 = phi <4 x i32> [ undef, %108 ], [ %156, %117 ]
  %163 = phi i64 [ 0, %108 ], [ %157, %117 ]
  %164 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %108 ], [ %155, %117 ]
  %165 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %108 ], [ %156, %117 ]
  %166 = icmp eq i64 %113, 0
  br i1 %166, label %183, label %167

167:                                              ; preds = %160, %167
  %168 = phi i64 [ %180, %167 ], [ %163, %160 ]
  %169 = phi <4 x i32> [ %178, %167 ], [ %164, %160 ]
  %170 = phi <4 x i32> [ %179, %167 ], [ %165, %160 ]
  %171 = phi i64 [ %181, %167 ], [ %113, %160 ]
  %172 = getelementptr inbounds i32, i32* %105, i64 %168
  %173 = bitcast i32* %172 to <4 x i32>*
  %174 = load <4 x i32>, <4 x i32>* %173, align 4, !noalias !8
  %175 = getelementptr inbounds i32, i32* %172, i64 4
  %176 = bitcast i32* %175 to <4 x i32>*
  %177 = load <4 x i32>, <4 x i32>* %176, align 4, !noalias !8
  %178 = mul nsw <4 x i32> %174, %169
  %179 = mul nsw <4 x i32> %177, %170
  %180 = add i64 %168, 8
  %181 = add i64 %171, -1
  %182 = icmp eq i64 %181, 0
  br i1 %182, label %183, label %167, !llvm.loop !13

183:                                              ; preds = %167, %160
  %184 = phi <4 x i32> [ %161, %160 ], [ %178, %167 ]
  %185 = phi <4 x i32> [ %162, %160 ], [ %179, %167 ]
  %186 = mul <4 x i32> %185, %184
  %187 = shufflevector <4 x i32> %186, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %188 = mul <4 x i32> %186, %187
  %189 = shufflevector <4 x i32> %188, <4 x i32> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %190 = mul <4 x i32> %188, %189
  %191 = extractelement <4 x i32> %190, i32 0
  %192 = icmp eq i64 %109, %106
  br i1 %192, label %204, label %193

193:                                              ; preds = %183, %102
  %194 = phi i64 [ 0, %102 ], [ %109, %183 ]
  %195 = phi i32 [ 1, %102 ], [ %191, %183 ]
  br label %196

196:                                              ; preds = %193, %196
  %197 = phi i64 [ %202, %196 ], [ %194, %193 ]
  %198 = phi i32 [ %201, %196 ], [ %195, %193 ]
  %199 = getelementptr inbounds i32, i32* %105, i64 %197
  %200 = load i32, i32* %199, align 4, !noalias !8
  %201 = mul nsw i32 %200, %198
  %202 = add nuw nsw i64 %197, 1
  %203 = icmp eq i64 %202, %106
  br i1 %203, label %204, label %196, !llvm.loop !15

204:                                              ; preds = %196, %183
  %205 = phi i32 [ %191, %183 ], [ %201, %196 ]
  %206 = sext i32 %205 to i64
  %207 = icmp sgt i32 %205, 0
  br i1 %207, label %208, label %321

208:                                              ; preds = %68, %204, %90
  %209 = phi i1 [ %103, %204 ], [ false, %90 ], [ false, %68 ]
  %210 = phi float* [ %104, %204 ], [ %98, %90 ], [ null, %68 ]
  %211 = phi i64 [ %206, %204 ], [ 1, %90 ], [ 1, %68 ]
  %212 = icmp ult i64 %211, 4
  br i1 %212, label %279, label %213

213:                                              ; preds = %208
  %214 = getelementptr float, float* %210, i64 %211
  %215 = bitcast float* %214 to i8*
  %216 = getelementptr float, float* %65, i64 %211
  %217 = icmp ult float* %210, %216
  %218 = icmp ult i8* %64, %215
  %219 = and i1 %217, %218
  br i1 %219, label %279, label %220

220:                                              ; preds = %213
  %221 = and i64 %211, -4
  %222 = add nsw i64 %221, -4
  %223 = lshr exact i64 %222, 2
  %224 = add nuw nsw i64 %223, 1
  %225 = and i64 %224, 3
  %226 = icmp ult i64 %222, 12
  br i1 %226, label %262, label %227

227:                                              ; preds = %220
  %228 = sub nsw i64 %224, %225
  br label %229

229:                                              ; preds = %229, %227
  %230 = phi i64 [ 0, %227 ], [ %259, %229 ]
  %231 = phi i64 [ %228, %227 ], [ %260, %229 ]
  %232 = getelementptr inbounds float, float* %210, i64 %230
  %233 = getelementptr inbounds float, float* %65, i64 %230
  %234 = bitcast float* %233 to <4 x float>*
  %235 = load <4 x float>, <4 x float>* %234, align 4, !alias.scope !17
  %236 = call <4 x float> @llvm.ceil.v4f32(<4 x float> %235)
  %237 = bitcast float* %232 to <4 x float>*
  store <4 x float> %236, <4 x float>* %237, align 4, !alias.scope !20, !noalias !17
  %238 = or i64 %230, 4
  %239 = getelementptr inbounds float, float* %210, i64 %238
  %240 = getelementptr inbounds float, float* %65, i64 %238
  %241 = bitcast float* %240 to <4 x float>*
  %242 = load <4 x float>, <4 x float>* %241, align 4, !alias.scope !17
  %243 = call <4 x float> @llvm.ceil.v4f32(<4 x float> %242)
  %244 = bitcast float* %239 to <4 x float>*
  store <4 x float> %243, <4 x float>* %244, align 4, !alias.scope !20, !noalias !17
  %245 = or i64 %230, 8
  %246 = getelementptr inbounds float, float* %210, i64 %245
  %247 = getelementptr inbounds float, float* %65, i64 %245
  %248 = bitcast float* %247 to <4 x float>*
  %249 = load <4 x float>, <4 x float>* %248, align 4, !alias.scope !17
  %250 = call <4 x float> @llvm.ceil.v4f32(<4 x float> %249)
  %251 = bitcast float* %246 to <4 x float>*
  store <4 x float> %250, <4 x float>* %251, align 4, !alias.scope !20, !noalias !17
  %252 = or i64 %230, 12
  %253 = getelementptr inbounds float, float* %210, i64 %252
  %254 = getelementptr inbounds float, float* %65, i64 %252
  %255 = bitcast float* %254 to <4 x float>*
  %256 = load <4 x float>, <4 x float>* %255, align 4, !alias.scope !17
  %257 = call <4 x float> @llvm.ceil.v4f32(<4 x float> %256)
  %258 = bitcast float* %253 to <4 x float>*
  store <4 x float> %257, <4 x float>* %258, align 4, !alias.scope !20, !noalias !17
  %259 = add i64 %230, 16
  %260 = add i64 %231, -4
  %261 = icmp eq i64 %260, 0
  br i1 %261, label %262, label %229, !llvm.loop !22

262:                                              ; preds = %229, %220
  %263 = phi i64 [ 0, %220 ], [ %259, %229 ]
  %264 = icmp eq i64 %225, 0
  br i1 %264, label %277, label %265

265:                                              ; preds = %262, %265
  %266 = phi i64 [ %274, %265 ], [ %263, %262 ]
  %267 = phi i64 [ %275, %265 ], [ %225, %262 ]
  %268 = getelementptr inbounds float, float* %210, i64 %266
  %269 = getelementptr inbounds float, float* %65, i64 %266
  %270 = bitcast float* %269 to <4 x float>*
  %271 = load <4 x float>, <4 x float>* %270, align 4, !alias.scope !17
  %272 = call <4 x float> @llvm.ceil.v4f32(<4 x float> %271)
  %273 = bitcast float* %268 to <4 x float>*
  store <4 x float> %272, <4 x float>* %273, align 4, !alias.scope !20, !noalias !17
  %274 = add i64 %266, 4
  %275 = add i64 %267, -1
  %276 = icmp eq i64 %275, 0
  br i1 %276, label %277, label %265, !llvm.loop !23

277:                                              ; preds = %265, %262
  %278 = icmp eq i64 %211, %221
  br i1 %278, label %321, label %279

279:                                              ; preds = %277, %213, %208
  %280 = phi i64 [ 0, %213 ], [ 0, %208 ], [ %221, %277 ]
  %281 = xor i64 %280, -1
  %282 = add nsw i64 %211, %281
  %283 = and i64 %211, 3
  %284 = icmp eq i64 %283, 0
  br i1 %284, label %295, label %285

285:                                              ; preds = %279, %285
  %286 = phi i64 [ %292, %285 ], [ %280, %279 ]
  %287 = phi i64 [ %293, %285 ], [ %283, %279 ]
  %288 = getelementptr inbounds float, float* %210, i64 %286
  %289 = getelementptr inbounds float, float* %65, i64 %286
  %290 = load float, float* %289, align 4
  %291 = tail call float @llvm.ceil.f32(float %290) #7
  store float %291, float* %288, align 4
  %292 = add nuw nsw i64 %286, 1
  %293 = add i64 %287, -1
  %294 = icmp eq i64 %293, 0
  br i1 %294, label %295, label %285, !llvm.loop !24

295:                                              ; preds = %285, %279
  %296 = phi i64 [ %280, %279 ], [ %292, %285 ]
  %297 = icmp ult i64 %282, 3
  br i1 %297, label %321, label %298

298:                                              ; preds = %295, %298
  %299 = phi i64 [ %319, %298 ], [ %296, %295 ]
  %300 = getelementptr inbounds float, float* %210, i64 %299
  %301 = getelementptr inbounds float, float* %65, i64 %299
  %302 = load float, float* %301, align 4
  %303 = tail call float @llvm.ceil.f32(float %302) #7
  store float %303, float* %300, align 4
  %304 = add nuw nsw i64 %299, 1
  %305 = getelementptr inbounds float, float* %210, i64 %304
  %306 = getelementptr inbounds float, float* %65, i64 %304
  %307 = load float, float* %306, align 4
  %308 = tail call float @llvm.ceil.f32(float %307) #7
  store float %308, float* %305, align 4
  %309 = add nuw nsw i64 %299, 2
  %310 = getelementptr inbounds float, float* %210, i64 %309
  %311 = getelementptr inbounds float, float* %65, i64 %309
  %312 = load float, float* %311, align 4
  %313 = tail call float @llvm.ceil.f32(float %312) #7
  store float %313, float* %310, align 4
  %314 = add nuw nsw i64 %299, 3
  %315 = getelementptr inbounds float, float* %210, i64 %314
  %316 = getelementptr inbounds float, float* %65, i64 %314
  %317 = load float, float* %316, align 4
  %318 = tail call float @llvm.ceil.f32(float %317) #7
  store float %318, float* %315, align 4
  %319 = add nuw nsw i64 %299, 4
  %320 = icmp eq i64 %319, %211
  br i1 %320, label %321, label %298, !llvm.loop !25

321:                                              ; preds = %295, %298, %277, %204
  %322 = phi i1 [ %103, %204 ], [ %209, %277 ], [ %209, %298 ], [ %209, %295 ]
  br i1 %322, label %323, label %329

323:                                              ; preds = %321
  %324 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %4, i64 0, i32 1, i32 0
  %325 = load i32*, i32** %324, align 8
  %326 = icmp eq i32* %325, null
  br i1 %326, label %329, label %327

327:                                              ; preds = %323
  %328 = bitcast i32* %325 to i8*
  tail call void @_ZdaPv(i8* %328) #8
  br label %329

329:                                              ; preds = %321, %323, %327
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %66) #7
  %330 = icmp sgt i32 %63, 5
  br i1 %330, label %331, label %337

331:                                              ; preds = %329
  %332 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %3, i64 0, i32 1, i32 0
  %333 = load i32*, i32** %332, align 8
  %334 = icmp eq i32* %333, null
  br i1 %334, label %337, label %335

335:                                              ; preds = %331
  %336 = bitcast i32* %333 to i8*
  tail call void @_ZdaPv(i8* %336) #8
  br label %337

337:                                              ; preds = %329, %331, %335
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %29) #7
  ret i32 0
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden %struct.TfLiteRegistration* @_ZN6tflite3ops7builtin13Register_CEILEv() local_unnamed_addr #3 {
  ret %struct.TfLiteRegistration* bitcast ({ i8* (%struct.TfLiteContext*, i8*, i64)*, void (%struct.TfLiteContext*, i8*)*, i32 (%struct.TfLiteContext*, %struct.TfLiteNode*)*, i32 (%struct.TfLiteContext*, %struct.TfLiteNode*)*, i8* (%struct.TfLiteContext*, %struct.TfLiteNode*)*, i32, i8*, i32 }* @_ZZN6tflite3ops7builtin13Register_CEILEvE1r to %struct.TfLiteRegistration*)
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #1

; Function Attrs: nounwind readnone speculatable
declare float @llvm.ceil.f32(float) #4

; Function Attrs: nobuiltin nounwind
declare void @_ZdaPv(i8*) local_unnamed_addr #5

; Function Attrs: nobuiltin nofree
declare noalias nonnull i8* @_Znam(i64) local_unnamed_addr #6

; Function Attrs: nounwind readnone speculatable
declare <4 x float> @llvm.ceil.v4f32(<4 x float>) #4

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { norecurse nounwind readnone ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind readnone speculatable }
attributes #5 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nobuiltin nofree "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { nounwind }
attributes #8 = { builtin nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{!3}
!3 = distinct !{!3, !4, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor: argument 0"}
!4 = distinct !{!4, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor"}
!5 = !{!6}
!6 = distinct !{!6, !7, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor: argument 0"}
!7 = distinct !{!7, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor"}
!8 = !{!9}
!9 = distinct !{!9, !10, !"_ZN6tflite13optimized_ops11MapAsVectorIfEENSt3__111conditionalIXsr3std8is_constIT_EE5valueEN5Eigen3MapIKNS5_6MatrixINS2_12remove_constIS4_E4typeELin1ELi1ELi0ELin1ELi1EEELi0ENS5_6StrideILi0ELi0EEEEENS6_INS7_IS4_Lin1ELi1ELi0ELin1ELi1EEELi0ESE_EEE4typeEPS4_RKNS_12RuntimeShapeE: argument 0"}
!10 = distinct !{!10, !"_ZN6tflite13optimized_ops11MapAsVectorIfEENSt3__111conditionalIXsr3std8is_constIT_EE5valueEN5Eigen3MapIKNS5_6MatrixINS2_12remove_constIS4_E4typeELin1ELi1ELi0ELin1ELi1EEELi0ENS5_6StrideILi0ELi0EEEEENS6_INS7_IS4_Lin1ELi1ELi0ELin1ELi1EEELi0ESE_EEE4typeEPS4_RKNS_12RuntimeShapeE"}
!11 = distinct !{!11, !12}
!12 = !{!"llvm.loop.isvectorized", i32 1}
!13 = distinct !{!13, !14}
!14 = !{!"llvm.loop.unroll.disable"}
!15 = distinct !{!15, !16, !12}
!16 = !{!"llvm.loop.unroll.runtime.disable"}
!17 = !{!18}
!18 = distinct !{!18, !19}
!19 = distinct !{!19, !"LVerDomain"}
!20 = !{!21}
!21 = distinct !{!21, !19}
!22 = distinct !{!22, !12}
!23 = distinct !{!23, !14}
!24 = distinct !{!24, !14}
!25 = distinct !{!25, !12}
