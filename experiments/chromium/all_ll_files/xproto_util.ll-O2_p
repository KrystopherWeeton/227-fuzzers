; ModuleID = '../../ui/gfx/x/xproto_util.cc'
source_filename = "../../ui/gfx/x/xproto_util.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"struct.x11::DeletePropertyRequest" = type { i32, i32 }
%"class.x11::Connection" = type { %"class.x11::XProto", %"class.x11::ExtensionManager", %"class.std::__1::unique_ptr.178", %struct.xcb_connection_t*, %"class.std::__1::unique_ptr.191", i8, i8, i32, %"class.std::__1::basic_string", i32, %"struct.x11::Setup", %"struct.x11::Screen"*, %"struct.x11::Depth"*, %"struct.x11::VisualType"*, %"class.base::flat_map", %"class.std::__1::unique_ptr.237", %"class.base::circular_deque", %"class.base::ObserverList.243", %"class.x11::Event"*, %"class.base::circular_deque.247", i32, %"class.absl::optional", %"struct.std::__1::array", %"class.base::RepeatingCallback", %"class.base::OnceCallback.259" }
%"class.x11::XProto" = type { %"class.x11::Connection"* }
%"class.x11::ExtensionManager" = type { %"class.std::__1::unique_ptr.0", %"class.std::__1::unique_ptr.4", %"class.std::__1::unique_ptr.10", %"class.std::__1::unique_ptr.16", %"class.std::__1::unique_ptr.22", %"class.std::__1::unique_ptr.28", %"class.std::__1::unique_ptr.34", %"class.std::__1::unique_ptr.40", %"class.std::__1::unique_ptr.46", %"class.std::__1::unique_ptr.52", %"class.std::__1::unique_ptr.58", %"class.std::__1::unique_ptr.64", %"class.std::__1::unique_ptr.70", %"class.std::__1::unique_ptr.76", %"class.std::__1::unique_ptr.82", %"class.std::__1::unique_ptr.88", %"class.std::__1::unique_ptr.94", %"class.std::__1::unique_ptr.100", %"class.std::__1::unique_ptr.106", %"class.std::__1::unique_ptr.112", %"class.std::__1::unique_ptr.118", %"class.std::__1::unique_ptr.124", %"class.std::__1::unique_ptr.130", %"class.std::__1::unique_ptr.136", %"class.std::__1::unique_ptr.142", %"class.std::__1::unique_ptr.148", %"class.std::__1::unique_ptr.154", %"class.std::__1::unique_ptr.160", %"class.std::__1::unique_ptr.166", %"class.std::__1::unique_ptr.172" }
%"class.std::__1::unique_ptr.0" = type { %"class.std::__1::__compressed_pair.1" }
%"class.std::__1::__compressed_pair.1" = type { %"struct.std::__1::__compressed_pair_elem.2" }
%"struct.std::__1::__compressed_pair_elem.2" = type { %"class.x11::BigRequests"* }
%"class.x11::BigRequests" = type opaque
%"class.std::__1::unique_ptr.4" = type { %"class.std::__1::__compressed_pair.5" }
%"class.std::__1::__compressed_pair.5" = type { %"struct.std::__1::__compressed_pair_elem.6" }
%"struct.std::__1::__compressed_pair_elem.6" = type { %"class.x11::Composite"* }
%"class.x11::Composite" = type opaque
%"class.std::__1::unique_ptr.10" = type { %"class.std::__1::__compressed_pair.11" }
%"class.std::__1::__compressed_pair.11" = type { %"struct.std::__1::__compressed_pair_elem.12" }
%"struct.std::__1::__compressed_pair_elem.12" = type { %"class.x11::Damage"* }
%"class.x11::Damage" = type opaque
%"class.std::__1::unique_ptr.16" = type { %"class.std::__1::__compressed_pair.17" }
%"class.std::__1::__compressed_pair.17" = type { %"struct.std::__1::__compressed_pair_elem.18" }
%"struct.std::__1::__compressed_pair_elem.18" = type { %"class.x11::Dpms"* }
%"class.x11::Dpms" = type opaque
%"class.std::__1::unique_ptr.22" = type { %"class.std::__1::__compressed_pair.23" }
%"class.std::__1::__compressed_pair.23" = type { %"struct.std::__1::__compressed_pair_elem.24" }
%"struct.std::__1::__compressed_pair_elem.24" = type { %"class.x11::Dri2"* }
%"class.x11::Dri2" = type opaque
%"class.std::__1::unique_ptr.28" = type { %"class.std::__1::__compressed_pair.29" }
%"class.std::__1::__compressed_pair.29" = type { %"struct.std::__1::__compressed_pair_elem.30" }
%"struct.std::__1::__compressed_pair_elem.30" = type { %"class.x11::Dri3"* }
%"class.x11::Dri3" = type opaque
%"class.std::__1::unique_ptr.34" = type { %"class.std::__1::__compressed_pair.35" }
%"class.std::__1::__compressed_pair.35" = type { %"struct.std::__1::__compressed_pair_elem.36" }
%"struct.std::__1::__compressed_pair_elem.36" = type { %"class.x11::GenericEvent"* }
%"class.x11::GenericEvent" = type opaque
%"class.std::__1::unique_ptr.40" = type { %"class.std::__1::__compressed_pair.41" }
%"class.std::__1::__compressed_pair.41" = type { %"struct.std::__1::__compressed_pair_elem.42" }
%"struct.std::__1::__compressed_pair_elem.42" = type { %"class.x11::Glx"* }
%"class.x11::Glx" = type opaque
%"class.std::__1::unique_ptr.46" = type { %"class.std::__1::__compressed_pair.47" }
%"class.std::__1::__compressed_pair.47" = type { %"struct.std::__1::__compressed_pair_elem.48" }
%"struct.std::__1::__compressed_pair_elem.48" = type { %"class.x11::Present"* }
%"class.x11::Present" = type opaque
%"class.std::__1::unique_ptr.52" = type { %"class.std::__1::__compressed_pair.53" }
%"class.std::__1::__compressed_pair.53" = type { %"struct.std::__1::__compressed_pair_elem.54" }
%"struct.std::__1::__compressed_pair_elem.54" = type { %"class.x11::RandR"* }
%"class.x11::RandR" = type opaque
%"class.std::__1::unique_ptr.58" = type { %"class.std::__1::__compressed_pair.59" }
%"class.std::__1::__compressed_pair.59" = type { %"struct.std::__1::__compressed_pair_elem.60" }
%"struct.std::__1::__compressed_pair_elem.60" = type { %"class.x11::Record"* }
%"class.x11::Record" = type opaque
%"class.std::__1::unique_ptr.64" = type { %"class.std::__1::__compressed_pair.65" }
%"class.std::__1::__compressed_pair.65" = type { %"struct.std::__1::__compressed_pair_elem.66" }
%"struct.std::__1::__compressed_pair_elem.66" = type { %"class.x11::Render"* }
%"class.x11::Render" = type opaque
%"class.std::__1::unique_ptr.70" = type { %"class.std::__1::__compressed_pair.71" }
%"class.std::__1::__compressed_pair.71" = type { %"struct.std::__1::__compressed_pair_elem.72" }
%"struct.std::__1::__compressed_pair_elem.72" = type { %"class.x11::Res"* }
%"class.x11::Res" = type opaque
%"class.std::__1::unique_ptr.76" = type { %"class.std::__1::__compressed_pair.77" }
%"class.std::__1::__compressed_pair.77" = type { %"struct.std::__1::__compressed_pair_elem.78" }
%"struct.std::__1::__compressed_pair_elem.78" = type { %"class.x11::ScreenSaver"* }
%"class.x11::ScreenSaver" = type opaque
%"class.std::__1::unique_ptr.82" = type { %"class.std::__1::__compressed_pair.83" }
%"class.std::__1::__compressed_pair.83" = type { %"struct.std::__1::__compressed_pair_elem.84" }
%"struct.std::__1::__compressed_pair_elem.84" = type { %"class.x11::Shape"* }
%"class.x11::Shape" = type opaque
%"class.std::__1::unique_ptr.88" = type { %"class.std::__1::__compressed_pair.89" }
%"class.std::__1::__compressed_pair.89" = type { %"struct.std::__1::__compressed_pair_elem.90" }
%"struct.std::__1::__compressed_pair_elem.90" = type { %"class.x11::Shm"* }
%"class.x11::Shm" = type opaque
%"class.std::__1::unique_ptr.94" = type { %"class.std::__1::__compressed_pair.95" }
%"class.std::__1::__compressed_pair.95" = type { %"struct.std::__1::__compressed_pair_elem.96" }
%"struct.std::__1::__compressed_pair_elem.96" = type { %"class.x11::Sync"* }
%"class.x11::Sync" = type opaque
%"class.std::__1::unique_ptr.100" = type { %"class.std::__1::__compressed_pair.101" }
%"class.std::__1::__compressed_pair.101" = type { %"struct.std::__1::__compressed_pair_elem.102" }
%"struct.std::__1::__compressed_pair_elem.102" = type { %"class.x11::XCMisc"* }
%"class.x11::XCMisc" = type opaque
%"class.std::__1::unique_ptr.106" = type { %"class.std::__1::__compressed_pair.107" }
%"class.std::__1::__compressed_pair.107" = type { %"struct.std::__1::__compressed_pair_elem.108" }
%"struct.std::__1::__compressed_pair_elem.108" = type { %"class.x11::Xevie"* }
%"class.x11::Xevie" = type opaque
%"class.std::__1::unique_ptr.112" = type { %"class.std::__1::__compressed_pair.113" }
%"class.std::__1::__compressed_pair.113" = type { %"struct.std::__1::__compressed_pair_elem.114" }
%"struct.std::__1::__compressed_pair_elem.114" = type { %"class.x11::XF86Dri"* }
%"class.x11::XF86Dri" = type opaque
%"class.std::__1::unique_ptr.118" = type { %"class.std::__1::__compressed_pair.119" }
%"class.std::__1::__compressed_pair.119" = type { %"struct.std::__1::__compressed_pair_elem.120" }
%"struct.std::__1::__compressed_pair_elem.120" = type { %"class.x11::XF86VidMode"* }
%"class.x11::XF86VidMode" = type opaque
%"class.std::__1::unique_ptr.124" = type { %"class.std::__1::__compressed_pair.125" }
%"class.std::__1::__compressed_pair.125" = type { %"struct.std::__1::__compressed_pair_elem.126" }
%"struct.std::__1::__compressed_pair_elem.126" = type { %"class.x11::XFixes"* }
%"class.x11::XFixes" = type opaque
%"class.std::__1::unique_ptr.130" = type { %"class.std::__1::__compressed_pair.131" }
%"class.std::__1::__compressed_pair.131" = type { %"struct.std::__1::__compressed_pair_elem.132" }
%"struct.std::__1::__compressed_pair_elem.132" = type { %"class.x11::Xinerama"* }
%"class.x11::Xinerama" = type opaque
%"class.std::__1::unique_ptr.136" = type { %"class.std::__1::__compressed_pair.137" }
%"class.std::__1::__compressed_pair.137" = type { %"struct.std::__1::__compressed_pair_elem.138" }
%"struct.std::__1::__compressed_pair_elem.138" = type { %"class.x11::Input"* }
%"class.x11::Input" = type opaque
%"class.std::__1::unique_ptr.142" = type { %"class.std::__1::__compressed_pair.143" }
%"class.std::__1::__compressed_pair.143" = type { %"struct.std::__1::__compressed_pair_elem.144" }
%"struct.std::__1::__compressed_pair_elem.144" = type { %"class.x11::Xkb"* }
%"class.x11::Xkb" = type opaque
%"class.std::__1::unique_ptr.148" = type { %"class.std::__1::__compressed_pair.149" }
%"class.std::__1::__compressed_pair.149" = type { %"struct.std::__1::__compressed_pair_elem.150" }
%"struct.std::__1::__compressed_pair_elem.150" = type { %"class.x11::XPrint"* }
%"class.x11::XPrint" = type opaque
%"class.std::__1::unique_ptr.154" = type { %"class.std::__1::__compressed_pair.155" }
%"class.std::__1::__compressed_pair.155" = type { %"struct.std::__1::__compressed_pair_elem.156" }
%"struct.std::__1::__compressed_pair_elem.156" = type { %"class.x11::SELinux"* }
%"class.x11::SELinux" = type opaque
%"class.std::__1::unique_ptr.160" = type { %"class.std::__1::__compressed_pair.161" }
%"class.std::__1::__compressed_pair.161" = type { %"struct.std::__1::__compressed_pair_elem.162" }
%"struct.std::__1::__compressed_pair_elem.162" = type { %"class.x11::Test"* }
%"class.x11::Test" = type opaque
%"class.std::__1::unique_ptr.166" = type { %"class.std::__1::__compressed_pair.167" }
%"class.std::__1::__compressed_pair.167" = type { %"struct.std::__1::__compressed_pair_elem.168" }
%"struct.std::__1::__compressed_pair_elem.168" = type { %"class.x11::Xv"* }
%"class.x11::Xv" = type opaque
%"class.std::__1::unique_ptr.172" = type { %"class.std::__1::__compressed_pair.173" }
%"class.std::__1::__compressed_pair.173" = type { %"struct.std::__1::__compressed_pair_elem.174" }
%"struct.std::__1::__compressed_pair_elem.174" = type { %"class.x11::XvMC"* }
%"class.x11::XvMC" = type opaque
%"class.std::__1::unique_ptr.178" = type { %"class.std::__1::__compressed_pair.179" }
%"class.std::__1::__compressed_pair.179" = type { %"struct.std::__1::__compressed_pair_elem.180" }
%"struct.std::__1::__compressed_pair_elem.180" = type { %"class.ui::PlatformEventSource"* }
%"class.ui::PlatformEventSource" = type { i32 (...)**, %"class.base::ObserverList", %"class.ui::PlatformEventDispatcher"*, i8, [7 x i8], %"class.base::ObserverList.184" }
%"class.base::ObserverList" = type <{ %"class.std::__1::vector", %"class.base::LinkedList", i64, i32, [4 x i8] }>
%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { %"class.base::internal::UncheckedObserverAdapter"*, %"class.base::internal::UncheckedObserverAdapter"*, %"class.std::__1::__compressed_pair.181" }
%"class.base::internal::UncheckedObserverAdapter" = type { i8* }
%"class.std::__1::__compressed_pair.181" = type { %"struct.std::__1::__compressed_pair_elem.182" }
%"struct.std::__1::__compressed_pair_elem.182" = type { %"class.base::internal::UncheckedObserverAdapter"* }
%"class.base::LinkedList" = type { %"class.base::LinkNode" }
%"class.base::LinkNode" = type { %"class.base::internal::LinkNodeBase" }
%"class.base::internal::LinkNodeBase" = type { %"class.base::internal::LinkNodeBase"*, %"class.base::internal::LinkNodeBase"* }
%"class.ui::PlatformEventDispatcher" = type opaque
%"class.base::ObserverList.184" = type <{ %"class.std::__1::vector", %"class.base::LinkedList.185", i64, i32, [4 x i8] }>
%"class.base::LinkedList.185" = type { %"class.base::LinkNode.186" }
%"class.base::LinkNode.186" = type { %"class.base::internal::LinkNodeBase" }
%struct.xcb_connection_t = type opaque
%"class.std::__1::unique_ptr.191" = type { %"class.std::__1::__compressed_pair.192" }
%"class.std::__1::__compressed_pair.192" = type { %"struct.std::__1::__compressed_pair_elem.193" }
%"struct.std::__1::__compressed_pair_elem.193" = type { %"class.x11::XlibDisplay"* }
%"class.x11::XlibDisplay" = type { %struct._XDisplay* }
%struct._XDisplay = type opaque
%"class.std::__1::basic_string" = type { %"class.std::__1::__compressed_pair.197" }
%"class.std::__1::__compressed_pair.197" = type { %"struct.std::__1::__compressed_pair_elem.198" }
%"struct.std::__1::__compressed_pair_elem.198" = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" = type { %union.anon }
%union.anon = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" = type { i8*, i64, i64 }
%"struct.x11::Setup" = type { i8, i16, i16, i16, i32, i32, i32, i32, i16, i32, i32, i8, i8, i8, i8, %"class.std::__1::basic_string", %"class.std::__1::vector.202", %"class.std::__1::vector.209" }
%"class.std::__1::vector.202" = type { %"class.std::__1::__vector_base.203" }
%"class.std::__1::__vector_base.203" = type { %"struct.x11::Format"*, %"struct.x11::Format"*, %"class.std::__1::__compressed_pair.204" }
%"struct.x11::Format" = type { i8, i8, i8 }
%"class.std::__1::__compressed_pair.204" = type { %"struct.std::__1::__compressed_pair_elem.205" }
%"struct.std::__1::__compressed_pair_elem.205" = type { %"struct.x11::Format"* }
%"class.std::__1::vector.209" = type { %"class.std::__1::__vector_base.210" }
%"class.std::__1::__vector_base.210" = type { %"struct.x11::Screen"*, %"struct.x11::Screen"*, %"class.std::__1::__compressed_pair.225" }
%"class.std::__1::__compressed_pair.225" = type { %"struct.std::__1::__compressed_pair_elem.226" }
%"struct.std::__1::__compressed_pair_elem.226" = type { %"struct.x11::Screen"* }
%"struct.x11::Screen" = type { i32, i32, i32, i32, i32, i16, i16, i16, i16, i16, i16, i32, i32, i8, i8, %"class.std::__1::vector.211" }
%"class.std::__1::vector.211" = type { %"class.std::__1::__vector_base.212" }
%"class.std::__1::__vector_base.212" = type { %"struct.x11::Depth"*, %"struct.x11::Depth"*, %"class.std::__1::__compressed_pair.220" }
%"class.std::__1::__compressed_pair.220" = type { %"struct.std::__1::__compressed_pair_elem.221" }
%"struct.std::__1::__compressed_pair_elem.221" = type { %"struct.x11::Depth"* }
%"struct.x11::Depth" = type { i8, %"class.std::__1::vector.213" }
%"class.std::__1::vector.213" = type { %"class.std::__1::__vector_base.214" }
%"class.std::__1::__vector_base.214" = type { %"struct.x11::VisualType"*, %"struct.x11::VisualType"*, %"class.std::__1::__compressed_pair.215" }
%"class.std::__1::__compressed_pair.215" = type { %"struct.std::__1::__compressed_pair_elem.216" }
%"struct.std::__1::__compressed_pair_elem.216" = type { %"struct.x11::VisualType"* }
%"struct.x11::VisualType" = type { i32, i32, i8, i16, i32, i32, i32 }
%"class.base::flat_map" = type { %"class.base::internal::flat_tree" }
%"class.base::internal::flat_tree" = type { %"class.std::__1::vector.230" }
%"class.std::__1::vector.230" = type { %"class.std::__1::__vector_base.231" }
%"class.std::__1::__vector_base.231" = type { %"struct.std::__1::pair"*, %"struct.std::__1::pair"*, %"class.std::__1::__compressed_pair.232" }
%"struct.std::__1::pair" = type opaque
%"class.std::__1::__compressed_pair.232" = type { %"struct.std::__1::__compressed_pair_elem.233" }
%"struct.std::__1::__compressed_pair_elem.233" = type { %"struct.std::__1::pair"* }
%"class.std::__1::unique_ptr.237" = type { %"class.std::__1::__compressed_pair.238" }
%"class.std::__1::__compressed_pair.238" = type { %"struct.std::__1::__compressed_pair_elem.239" }
%"struct.std::__1::__compressed_pair_elem.239" = type { %"class.x11::KeyboardState"* }
%"class.x11::KeyboardState" = type opaque
%"class.base::circular_deque" = type { %"class.base::internal::VectorBuffer", i64, i64 }
%"class.base::internal::VectorBuffer" = type { %"class.x11::Event"*, i64 }
%"class.base::ObserverList.243" = type <{ %"class.std::__1::vector", %"class.base::LinkedList.244", i64, i32, [4 x i8] }>
%"class.base::LinkedList.244" = type { %"class.base::LinkNode.245" }
%"class.base::LinkNode.245" = type { %"class.base::internal::LinkNodeBase" }
%"class.x11::Event" = type opaque
%"class.base::circular_deque.247" = type { %"class.base::internal::VectorBuffer.248", i64, i64 }
%"class.base::internal::VectorBuffer.248" = type { %"struct.x11::Connection::Request"*, i64 }
%"struct.x11::Connection::Request" = type { %"class.base::OnceCallback", i8, %class.scoped_refptr.250, %"class.std::__1::unique_ptr.252" }
%"class.base::OnceCallback" = type { %"class.base::internal::CallbackBase" }
%"class.base::internal::CallbackBase" = type { %class.scoped_refptr }
%class.scoped_refptr = type { %"class.base::internal::BindStateBase"* }
%"class.base::internal::BindStateBase" = type { %"class.base::RefCountedThreadSafe", void ()*, void (%"class.base::internal::BindStateBase"*)*, i1 (%"class.base::internal::BindStateBase"*, i32)* }
%"class.base::RefCountedThreadSafe" = type { %"class.base::subtle::RefCountedThreadSafeBase" }
%"class.base::subtle::RefCountedThreadSafeBase" = type { %"class.base::AtomicRefCount" }
%"class.base::AtomicRefCount" = type { %"struct.std::__1::atomic" }
%"struct.std::__1::atomic" = type { %"struct.std::__1::__atomic_base" }
%"struct.std::__1::__atomic_base" = type { %"struct.std::__1::__atomic_base.249" }
%"struct.std::__1::__atomic_base.249" = type { %"struct.std::__1::__cxx_atomic_impl" }
%"struct.std::__1::__cxx_atomic_impl" = type { %"struct.std::__1::__cxx_atomic_base_impl" }
%"struct.std::__1::__cxx_atomic_base_impl" = type { i32 }
%class.scoped_refptr.250 = type { %"class.base::RefCountedMemory"* }
%"class.base::RefCountedMemory" = type <{ i32 (...)**, %"class.base::RefCountedThreadSafe.251", [4 x i8] }>
%"class.base::RefCountedThreadSafe.251" = type { %"class.base::subtle::RefCountedThreadSafeBase" }
%"class.std::__1::unique_ptr.252" = type { %"class.std::__1::__compressed_pair.253" }
%"class.std::__1::__compressed_pair.253" = type { %"struct.std::__1::__compressed_pair_elem.254" }
%"struct.std::__1::__compressed_pair_elem.254" = type { %"class.x11::Error"* }
%"class.x11::Error" = type { i32 (...)** }
%"class.absl::optional" = type { %"class.absl::optional_internal::optional_data" }
%"class.absl::optional_internal::optional_data" = type { %"class.absl::optional_internal::optional_data_base" }
%"class.absl::optional_internal::optional_data_base" = type { %"class.absl::optional_internal::optional_data_dtor_base" }
%"class.absl::optional_internal::optional_data_dtor_base" = type { i8, %union.anon.258 }
%union.anon.258 = type { i32 }
%"struct.std::__1::array" = type { [256 x %"class.x11::Error"* (%"class.base::RefCountedMemory"*)*] }
%"class.base::RepeatingCallback" = type { %"class.base::internal::CallbackBaseCopyable" }
%"class.base::internal::CallbackBaseCopyable" = type { %"class.base::internal::CallbackBase" }
%"class.base::OnceCallback.259" = type { %"class.base::internal::CallbackBase" }
%"class.x11::Connection::FutureImpl" = type { %"class.x11::Connection"*, i32, i8, i8* }
%"class.std::__1::vector.263" = type { %"class.std::__1::__vector_base.264" }
%"class.std::__1::__vector_base.264" = type { i8*, i8*, %"class.std::__1::__compressed_pair.265" }
%"class.std::__1::__compressed_pair.265" = type { %"struct.std::__1::__compressed_pair_elem.266" }
%"struct.std::__1::__compressed_pair_elem.266" = type { i8* }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short" = type { [23 x i8], %struct.anon }
%struct.anon = type { i8 }
%"class.std::__1::__vector_base_common" = type { i8 }
%"class.std::__1::vector.302" = type { %"class.std::__1::__vector_base.303" }
%"class.std::__1::__vector_base.303" = type { i8*, i8*, %"class.std::__1::__compressed_pair.304" }
%"class.std::__1::__compressed_pair.304" = type { %"struct.std::__1::__compressed_pair_elem.305" }
%"struct.std::__1::__compressed_pair_elem.305" = type { i8* }
%"struct.x11::ChangePropertyRequest" = type { i32, i32, i32, i32, i8, i32, %class.scoped_refptr.250 }
%"class.base::RefCountedBytes" = type { %"class.base::RefCountedMemory.base", %"class.std::__1::vector.302" }
%"class.base::RefCountedMemory.base" = type <{ i32 (...)**, %"class.base::RefCountedThreadSafe.251" }>
%"struct.x11::CreateWindowRequest" = type { i8, i32, i32, i16, i16, i16, i16, i16, i32, i32, %"class.absl::optional.267", %"class.absl::optional", %"class.absl::optional.267", %"class.absl::optional", %"class.absl::optional.272", %"class.absl::optional.272", %"class.absl::optional.277", %"class.absl::optional", %"class.absl::optional", %"class.absl::optional.282", %"class.absl::optional.282", %"class.absl::optional.287", %"class.absl::optional.287", %"class.absl::optional.292", %"class.absl::optional.297" }
%"class.absl::optional.267" = type { %"class.absl::optional_internal::optional_data.268" }
%"class.absl::optional_internal::optional_data.268" = type { %"class.absl::optional_internal::optional_data_base.269" }
%"class.absl::optional_internal::optional_data_base.269" = type { %"class.absl::optional_internal::optional_data_dtor_base.270" }
%"class.absl::optional_internal::optional_data_dtor_base.270" = type { i8, %union.anon.271 }
%union.anon.271 = type { i32 }
%"class.absl::optional.272" = type { %"class.absl::optional_internal::optional_data.273" }
%"class.absl::optional_internal::optional_data.273" = type { %"class.absl::optional_internal::optional_data_base.274" }
%"class.absl::optional_internal::optional_data_base.274" = type { %"class.absl::optional_internal::optional_data_dtor_base.275" }
%"class.absl::optional_internal::optional_data_dtor_base.275" = type { i8, %union.anon.276 }
%union.anon.276 = type { i32 }
%"class.absl::optional.277" = type { %"class.absl::optional_internal::optional_data.278" }
%"class.absl::optional_internal::optional_data.278" = type { %"class.absl::optional_internal::optional_data_base.279" }
%"class.absl::optional_internal::optional_data_base.279" = type { %"class.absl::optional_internal::optional_data_dtor_base.280" }
%"class.absl::optional_internal::optional_data_dtor_base.280" = type { i8, %union.anon.281 }
%union.anon.281 = type { i32 }
%"class.absl::optional.282" = type { %"class.absl::optional_internal::optional_data.283" }
%"class.absl::optional_internal::optional_data.283" = type { %"class.absl::optional_internal::optional_data_base.284" }
%"class.absl::optional_internal::optional_data_base.284" = type { %"class.absl::optional_internal::optional_data_dtor_base.285" }
%"class.absl::optional_internal::optional_data_dtor_base.285" = type { i8, %union.anon.286 }
%union.anon.286 = type { i32 }
%"class.absl::optional.287" = type { %"class.absl::optional_internal::optional_data.288" }
%"class.absl::optional_internal::optional_data.288" = type { %"class.absl::optional_internal::optional_data_base.289" }
%"class.absl::optional_internal::optional_data_base.289" = type { %"class.absl::optional_internal::optional_data_dtor_base.290" }
%"class.absl::optional_internal::optional_data_dtor_base.290" = type { i8, %union.anon.291 }
%union.anon.291 = type { i32 }
%"class.absl::optional.292" = type { %"class.absl::optional_internal::optional_data.293" }
%"class.absl::optional_internal::optional_data.293" = type { %"class.absl::optional_internal::optional_data_base.294" }
%"class.absl::optional_internal::optional_data_base.294" = type { %"class.absl::optional_internal::optional_data_dtor_base.295" }
%"class.absl::optional_internal::optional_data_dtor_base.295" = type { i8, %union.anon.296 }
%union.anon.296 = type { i32 }
%"class.absl::optional.297" = type { %"class.absl::optional_internal::optional_data.298" }
%"class.absl::optional_internal::optional_data.298" = type { %"class.absl::optional_internal::optional_data_base.299" }
%"class.absl::optional_internal::optional_data_base.299" = type { %"class.absl::optional_internal::optional_data_dtor_base.300" }
%"class.absl::optional_internal::optional_data_dtor_base.300" = type { i8, %union.anon.301 }
%union.anon.301 = type { i32 }

$_ZN3x1116SetArrayPropertyIcEENS_6FutureIvEENS_6WindowENS_4AtomES4_RKNSt3__16vectorIT_NS5_9allocatorIS7_EEEEPNS_10ConnectionE = comdat any

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN3x1114DeletePropertyENS_6WindowENS_4AtomE(i32, i32) local_unnamed_addr #0 {
  %3 = alloca %"struct.x11::DeletePropertyRequest", align 4
  %4 = tail call %"class.x11::Connection"* @_ZN3x1110Connection3GetEv() #6
  %5 = getelementptr inbounds %"class.x11::Connection", %"class.x11::Connection"* %4, i64 0, i32 0
  %6 = bitcast %"struct.x11::DeletePropertyRequest"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %6) #6
  %7 = getelementptr inbounds %"struct.x11::DeletePropertyRequest", %"struct.x11::DeletePropertyRequest"* %3, i64 0, i32 0
  store i32 %0, i32* %7, align 4
  %8 = getelementptr inbounds %"struct.x11::DeletePropertyRequest", %"struct.x11::DeletePropertyRequest"* %3, i64 0, i32 1
  store i32 %1, i32* %8, align 4
  %9 = call %"class.x11::Connection::FutureImpl"* @_ZN3x116XProto14DeletePropertyERKNS_21DeletePropertyRequestE(%"class.x11::XProto"* %5, %"struct.x11::DeletePropertyRequest"* nonnull dereferenceable(8) %3) #6
  %10 = icmp eq %"class.x11::Connection::FutureImpl"* %9, null
  br i1 %10, label %13, label %11

11:                                               ; preds = %2
  %12 = bitcast %"class.x11::Connection::FutureImpl"* %9 to i8*
  call void @_ZdlPv(i8* %12) #7
  br label %13

13:                                               ; preds = %2, %11
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %6) #6
  ret void
}

declare %"class.x11::Connection"* @_ZN3x1110Connection3GetEv() local_unnamed_addr #1

declare %"class.x11::Connection::FutureImpl"* @_ZN3x116XProto14DeletePropertyERKNS_21DeletePropertyRequestE(%"class.x11::XProto"*, %"struct.x11::DeletePropertyRequest"* dereferenceable(8)) local_unnamed_addr #1

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN3x1117SetStringPropertyENS_6WindowENS_4AtomES1_RKNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEPNS_10ConnectionE(i32, i32, i32, %"class.std::__1::basic_string"* dereferenceable(24), %"class.x11::Connection"*) local_unnamed_addr #0 {
  %6 = alloca %"class.std::__1::vector.263", align 8
  %7 = bitcast %"class.std::__1::vector.263"* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %7) #6
  %8 = getelementptr inbounds %"class.std::__1::vector.263", %"class.std::__1::vector.263"* %6, i64 0, i32 0, i32 0
  %9 = getelementptr inbounds %"class.std::__1::vector.263", %"class.std::__1::vector.263"* %6, i64 0, i32 0, i32 1
  %10 = getelementptr inbounds %"class.std::__1::vector.263", %"class.std::__1::vector.263"* %6, i64 0, i32 0, i32 2, i32 0, i32 0
  %11 = bitcast %"class.std::__1::basic_string"* %3 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %12 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %11, i64 0, i32 1, i32 0
  %13 = load i8, i8* %12, align 1
  %14 = icmp slt i8 %13, 0
  %15 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %3, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %16 = load i8*, i8** %15, align 8
  %17 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %3, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %18 = load i64, i64* %17, align 8
  %19 = bitcast %"class.std::__1::basic_string"* %3 to i8*
  %20 = zext i8 %13 to i64
  %21 = select i1 %14, i8* %16, i8* %19
  %22 = select i1 %14, i64 %18, i64 %20
  %23 = getelementptr inbounds i8, i8* %21, i64 %22
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %7, i8 0, i64 24, i1 false) #6
  %24 = icmp eq i64 %22, 0
  br i1 %24, label %133, label %25

25:                                               ; preds = %5
  %26 = icmp slt i64 %22, 0
  br i1 %26, label %27, label %29

27:                                               ; preds = %25
  %28 = bitcast %"class.std::__1::vector.263"* %6 to %"class.std::__1::__vector_base_common"*
  call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* nonnull %28) #8
  unreachable

29:                                               ; preds = %25
  %30 = tail call i8* @_Znwm(i64 %22) #7
  store i8* %30, i8** %9, align 8
  store i8* %30, i8** %8, align 8
  %31 = getelementptr inbounds i8, i8* %30, i64 %22
  store i8* %31, i8** %10, align 8
  %32 = bitcast i8** %9 to i64*
  %33 = icmp ult i64 %22, 32
  br i1 %33, label %120, label %34

34:                                               ; preds = %29
  %35 = getelementptr i8, i8* %30, i64 %22
  %36 = icmp ult i8* %30, %23
  %37 = icmp ult i8* %21, %35
  %38 = and i1 %36, %37
  br i1 %38, label %120, label %39

39:                                               ; preds = %34
  %40 = and i64 %22, -32
  %41 = getelementptr i8, i8* %30, i64 %40
  %42 = getelementptr i8, i8* %21, i64 %40
  %43 = add i64 %40, -32
  %44 = lshr exact i64 %43, 5
  %45 = add nuw nsw i64 %44, 1
  %46 = and i64 %45, 3
  %47 = icmp ult i64 %43, 96
  br i1 %47, label %99, label %48

48:                                               ; preds = %39
  %49 = sub nsw i64 %45, %46
  br label %50

50:                                               ; preds = %50, %48
  %51 = phi i64 [ 0, %48 ], [ %96, %50 ]
  %52 = phi i64 [ %49, %48 ], [ %97, %50 ]
  %53 = getelementptr i8, i8* %30, i64 %51
  %54 = getelementptr i8, i8* %21, i64 %51
  %55 = bitcast i8* %54 to <16 x i8>*
  %56 = load <16 x i8>, <16 x i8>* %55, align 1, !alias.scope !2
  %57 = getelementptr i8, i8* %54, i64 16
  %58 = bitcast i8* %57 to <16 x i8>*
  %59 = load <16 x i8>, <16 x i8>* %58, align 1, !alias.scope !2
  %60 = bitcast i8* %53 to <16 x i8>*
  store <16 x i8> %56, <16 x i8>* %60, align 1, !alias.scope !5, !noalias !2
  %61 = getelementptr i8, i8* %53, i64 16
  %62 = bitcast i8* %61 to <16 x i8>*
  store <16 x i8> %59, <16 x i8>* %62, align 1, !alias.scope !5, !noalias !2
  %63 = or i64 %51, 32
  %64 = getelementptr i8, i8* %30, i64 %63
  %65 = getelementptr i8, i8* %21, i64 %63
  %66 = bitcast i8* %65 to <16 x i8>*
  %67 = load <16 x i8>, <16 x i8>* %66, align 1, !alias.scope !2
  %68 = getelementptr i8, i8* %65, i64 16
  %69 = bitcast i8* %68 to <16 x i8>*
  %70 = load <16 x i8>, <16 x i8>* %69, align 1, !alias.scope !2
  %71 = bitcast i8* %64 to <16 x i8>*
  store <16 x i8> %67, <16 x i8>* %71, align 1, !alias.scope !5, !noalias !2
  %72 = getelementptr i8, i8* %64, i64 16
  %73 = bitcast i8* %72 to <16 x i8>*
  store <16 x i8> %70, <16 x i8>* %73, align 1, !alias.scope !5, !noalias !2
  %74 = or i64 %51, 64
  %75 = getelementptr i8, i8* %30, i64 %74
  %76 = getelementptr i8, i8* %21, i64 %74
  %77 = bitcast i8* %76 to <16 x i8>*
  %78 = load <16 x i8>, <16 x i8>* %77, align 1, !alias.scope !2
  %79 = getelementptr i8, i8* %76, i64 16
  %80 = bitcast i8* %79 to <16 x i8>*
  %81 = load <16 x i8>, <16 x i8>* %80, align 1, !alias.scope !2
  %82 = bitcast i8* %75 to <16 x i8>*
  store <16 x i8> %78, <16 x i8>* %82, align 1, !alias.scope !5, !noalias !2
  %83 = getelementptr i8, i8* %75, i64 16
  %84 = bitcast i8* %83 to <16 x i8>*
  store <16 x i8> %81, <16 x i8>* %84, align 1, !alias.scope !5, !noalias !2
  %85 = or i64 %51, 96
  %86 = getelementptr i8, i8* %30, i64 %85
  %87 = getelementptr i8, i8* %21, i64 %85
  %88 = bitcast i8* %87 to <16 x i8>*
  %89 = load <16 x i8>, <16 x i8>* %88, align 1, !alias.scope !2
  %90 = getelementptr i8, i8* %87, i64 16
  %91 = bitcast i8* %90 to <16 x i8>*
  %92 = load <16 x i8>, <16 x i8>* %91, align 1, !alias.scope !2
  %93 = bitcast i8* %86 to <16 x i8>*
  store <16 x i8> %89, <16 x i8>* %93, align 1, !alias.scope !5, !noalias !2
  %94 = getelementptr i8, i8* %86, i64 16
  %95 = bitcast i8* %94 to <16 x i8>*
  store <16 x i8> %92, <16 x i8>* %95, align 1, !alias.scope !5, !noalias !2
  %96 = add i64 %51, 128
  %97 = add i64 %52, -4
  %98 = icmp eq i64 %97, 0
  br i1 %98, label %99, label %50, !llvm.loop !7

99:                                               ; preds = %50, %39
  %100 = phi i64 [ 0, %39 ], [ %96, %50 ]
  %101 = icmp eq i64 %46, 0
  br i1 %101, label %118, label %102

102:                                              ; preds = %99, %102
  %103 = phi i64 [ %115, %102 ], [ %100, %99 ]
  %104 = phi i64 [ %116, %102 ], [ %46, %99 ]
  %105 = getelementptr i8, i8* %30, i64 %103
  %106 = getelementptr i8, i8* %21, i64 %103
  %107 = bitcast i8* %106 to <16 x i8>*
  %108 = load <16 x i8>, <16 x i8>* %107, align 1, !alias.scope !2
  %109 = getelementptr i8, i8* %106, i64 16
  %110 = bitcast i8* %109 to <16 x i8>*
  %111 = load <16 x i8>, <16 x i8>* %110, align 1, !alias.scope !2
  %112 = bitcast i8* %105 to <16 x i8>*
  store <16 x i8> %108, <16 x i8>* %112, align 1, !alias.scope !5, !noalias !2
  %113 = getelementptr i8, i8* %105, i64 16
  %114 = bitcast i8* %113 to <16 x i8>*
  store <16 x i8> %111, <16 x i8>* %114, align 1, !alias.scope !5, !noalias !2
  %115 = add i64 %103, 32
  %116 = add i64 %104, -1
  %117 = icmp eq i64 %116, 0
  br i1 %117, label %118, label %102, !llvm.loop !9

118:                                              ; preds = %102, %99
  %119 = icmp eq i64 %22, %40
  br i1 %119, label %130, label %120

120:                                              ; preds = %118, %34, %29
  %121 = phi i8* [ %30, %34 ], [ %30, %29 ], [ %41, %118 ]
  %122 = phi i8* [ %21, %34 ], [ %21, %29 ], [ %42, %118 ]
  br label %123

123:                                              ; preds = %120, %123
  %124 = phi i8* [ %128, %123 ], [ %121, %120 ]
  %125 = phi i8* [ %127, %123 ], [ %122, %120 ]
  %126 = load i8, i8* %125, align 1
  store i8 %126, i8* %124, align 1
  %127 = getelementptr inbounds i8, i8* %125, i64 1
  %128 = getelementptr inbounds i8, i8* %124, i64 1
  %129 = icmp eq i8* %127, %23
  br i1 %129, label %130, label %123, !llvm.loop !11

130:                                              ; preds = %123, %118
  %131 = phi i8* [ %41, %118 ], [ %128, %123 ]
  %132 = ptrtoint i8* %131 to i64
  store i64 %132, i64* %32, align 8
  br label %133

133:                                              ; preds = %5, %130
  %134 = call %"class.x11::Connection::FutureImpl"* @_ZN3x1116SetArrayPropertyIcEENS_6FutureIvEENS_6WindowENS_4AtomES4_RKNSt3__16vectorIT_NS5_9allocatorIS7_EEEEPNS_10ConnectionE(i32 %0, i32 %1, i32 %2, %"class.std::__1::vector.263"* nonnull dereferenceable(24) %6, %"class.x11::Connection"* %4)
  %135 = icmp eq %"class.x11::Connection::FutureImpl"* %134, null
  br i1 %135, label %138, label %136

136:                                              ; preds = %133
  %137 = bitcast %"class.x11::Connection::FutureImpl"* %134 to i8*
  call void @_ZdlPv(i8* %137) #7
  br label %138

138:                                              ; preds = %133, %136
  %139 = load i8*, i8** %8, align 8
  %140 = icmp eq i8* %139, null
  br i1 %140, label %144, label %141

141:                                              ; preds = %138
  %142 = ptrtoint i8* %139 to i64
  %143 = bitcast i8** %9 to i64*
  store i64 %142, i64* %143, align 8
  call void @_ZdlPv(i8* nonnull %139) #7
  br label %144

144:                                              ; preds = %138, %141
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %7) #6
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden %"class.x11::Connection::FutureImpl"* @_ZN3x1116SetArrayPropertyIcEENS_6FutureIvEENS_6WindowENS_4AtomES4_RKNSt3__16vectorIT_NS5_9allocatorIS7_EEEEPNS_10ConnectionE(i32, i32, i32, %"class.std::__1::vector.263"* dereferenceable(24), %"class.x11::Connection"*) local_unnamed_addr #0 comdat {
  %6 = alloca %"class.std::__1::vector.302", align 8
  %7 = alloca %"struct.x11::ChangePropertyRequest", align 8
  %8 = bitcast %"class.std::__1::vector.302"* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %8) #6
  %9 = getelementptr inbounds %"class.std::__1::vector.302", %"class.std::__1::vector.302"* %6, i64 0, i32 0, i32 0
  %10 = getelementptr inbounds %"class.std::__1::vector.302", %"class.std::__1::vector.302"* %6, i64 0, i32 0, i32 1
  %11 = getelementptr inbounds %"class.std::__1::vector.302", %"class.std::__1::vector.302"* %6, i64 0, i32 0, i32 2, i32 0, i32 0
  %12 = getelementptr inbounds %"class.std::__1::vector.263", %"class.std::__1::vector.263"* %3, i64 0, i32 0, i32 1
  %13 = bitcast i8** %12 to i64*
  %14 = load i64, i64* %13, align 8
  %15 = bitcast %"class.std::__1::vector.263"* %3 to i64*
  %16 = load i64, i64* %15, align 8
  %17 = sub i64 %14, %16
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %8, i8 0, i64 24, i1 false) #6
  %18 = icmp eq i64 %17, 0
  %19 = inttoptr i64 %16 to i8*
  br i1 %18, label %33, label %20

20:                                               ; preds = %5
  %21 = icmp slt i64 %17, 0
  br i1 %21, label %22, label %24

22:                                               ; preds = %20
  %23 = bitcast %"class.std::__1::vector.302"* %6 to %"class.std::__1::__vector_base_common"*
  call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* nonnull %23) #8
  unreachable

24:                                               ; preds = %20
  %25 = tail call i8* @_Znwm(i64 %17) #7
  store i8* %25, i8** %9, align 8
  %26 = getelementptr inbounds i8, i8* %25, i64 %17
  store i8* %26, i8** %11, align 8
  %27 = bitcast i8** %10 to i64*
  %28 = ptrtoint i8* %25 to i64
  %29 = sub i64 %17, %28
  %30 = getelementptr i8, i8* %25, i64 %29
  %31 = ptrtoint i8* %30 to i64
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 1 %25, i8 0, i64 %31, i1 false) #6
  %32 = ptrtoint i8* %26 to i64
  store i64 %32, i64* %27, align 8
  br label %33

33:                                               ; preds = %5, %24
  %34 = phi i8* [ null, %5 ], [ %25, %24 ]
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %34, i8* align 1 %19, i64 %17, i1 false)
  %35 = getelementptr inbounds %"class.x11::Connection", %"class.x11::Connection"* %4, i64 0, i32 0
  %36 = bitcast %"struct.x11::ChangePropertyRequest"* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %36) #6
  %37 = getelementptr inbounds %"struct.x11::ChangePropertyRequest", %"struct.x11::ChangePropertyRequest"* %7, i64 0, i32 0
  store i32 0, i32* %37, align 8
  %38 = getelementptr inbounds %"struct.x11::ChangePropertyRequest", %"struct.x11::ChangePropertyRequest"* %7, i64 0, i32 1
  store i32 %0, i32* %38, align 4
  %39 = getelementptr inbounds %"struct.x11::ChangePropertyRequest", %"struct.x11::ChangePropertyRequest"* %7, i64 0, i32 2
  store i32 %1, i32* %39, align 8
  %40 = getelementptr inbounds %"struct.x11::ChangePropertyRequest", %"struct.x11::ChangePropertyRequest"* %7, i64 0, i32 3
  store i32 %2, i32* %40, align 4
  %41 = getelementptr inbounds %"struct.x11::ChangePropertyRequest", %"struct.x11::ChangePropertyRequest"* %7, i64 0, i32 4
  store i8 8, i8* %41, align 8
  %42 = getelementptr inbounds %"struct.x11::ChangePropertyRequest", %"struct.x11::ChangePropertyRequest"* %7, i64 0, i32 5
  %43 = load i64, i64* %13, align 8
  %44 = load i64, i64* %15, align 8
  %45 = sub i64 %43, %44
  %46 = trunc i64 %45 to i32
  store i32 %46, i32* %42, align 4
  %47 = getelementptr inbounds %"struct.x11::ChangePropertyRequest", %"struct.x11::ChangePropertyRequest"* %7, i64 0, i32 6
  %48 = call %"class.base::RefCountedBytes"* @_ZN4base15RefCountedBytes10TakeVectorEPNSt3__16vectorIhNS1_9allocatorIhEEEE(%"class.std::__1::vector.302"* nonnull %6) #6
  %49 = ptrtoint %"class.base::RefCountedBytes"* %48 to i64
  %50 = bitcast %class.scoped_refptr.250* %47 to i64*
  store i64 %49, i64* %50, align 8
  %51 = call %"class.x11::Connection::FutureImpl"* @_ZN3x116XProto14ChangePropertyERKNS_21ChangePropertyRequestE(%"class.x11::XProto"* %35, %"struct.x11::ChangePropertyRequest"* nonnull dereferenceable(32) %7) #6
  %52 = getelementptr inbounds %"struct.x11::ChangePropertyRequest", %"struct.x11::ChangePropertyRequest"* %7, i64 0, i32 6, i32 0
  %53 = load %"class.base::RefCountedMemory"*, %"class.base::RefCountedMemory"** %52, align 8
  %54 = icmp eq %"class.base::RefCountedMemory"* %53, null
  br i1 %54, label %67, label %55

55:                                               ; preds = %33
  %56 = getelementptr inbounds %"class.base::RefCountedMemory", %"class.base::RefCountedMemory"* %53, i64 0, i32 1
  %57 = getelementptr inbounds %"class.base::RefCountedThreadSafe.251", %"class.base::RefCountedThreadSafe.251"* %56, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %58 = atomicrmw sub i32* %57, i32 1 acq_rel
  %59 = icmp eq i32 %58, 1
  br i1 %59, label %60, label %67

60:                                               ; preds = %55
  %61 = getelementptr inbounds %"class.base::RefCountedThreadSafe.251", %"class.base::RefCountedThreadSafe.251"* %56, i64 -2
  %62 = bitcast %"class.base::RefCountedThreadSafe.251"* %61 to %"class.base::RefCountedMemory"*
  %63 = bitcast %"class.base::RefCountedThreadSafe.251"* %61 to void (%"class.base::RefCountedMemory"*)***
  %64 = load void (%"class.base::RefCountedMemory"*)**, void (%"class.base::RefCountedMemory"*)*** %63, align 8
  %65 = getelementptr inbounds void (%"class.base::RefCountedMemory"*)*, void (%"class.base::RefCountedMemory"*)** %64, i64 3
  %66 = load void (%"class.base::RefCountedMemory"*)*, void (%"class.base::RefCountedMemory"*)** %65, align 8
  call void %66(%"class.base::RefCountedMemory"* nonnull %62) #6
  br label %67

67:                                               ; preds = %60, %55, %33
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %36) #6
  %68 = load i8*, i8** %9, align 8
  %69 = icmp eq i8* %68, null
  br i1 %69, label %73, label %70

70:                                               ; preds = %67
  %71 = ptrtoint i8* %68 to i64
  %72 = bitcast i8** %10 to i64*
  store i64 %71, i64* %72, align 8
  call void @_ZdlPv(i8* nonnull %68) #7
  br label %73

73:                                               ; preds = %67, %70
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %8) #6
  ret %"class.x11::Connection::FutureImpl"* %51
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @_ZN3x1117CreateDummyWindowERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEPNS_10ConnectionE(%"class.std::__1::basic_string"* dereferenceable(24), %"class.x11::Connection"*) local_unnamed_addr #0 {
  %3 = alloca %"struct.x11::CreateWindowRequest", align 4
  %4 = tail call i32 @_ZN3x1110Connection14GenerateIdImplEv(%"class.x11::Connection"* %1) #6
  %5 = getelementptr inbounds %"class.x11::Connection", %"class.x11::Connection"* %1, i64 0, i32 0
  %6 = getelementptr inbounds %"struct.x11::CreateWindowRequest", %"struct.x11::CreateWindowRequest"* %3, i64 0, i32 0
  call void @llvm.lifetime.start.p0i8(i64 152, i8* nonnull %6) #6
  store i8 0, i8* %6, align 4
  %7 = getelementptr inbounds %"struct.x11::CreateWindowRequest", %"struct.x11::CreateWindowRequest"* %3, i64 0, i32 1
  store i32 %4, i32* %7, align 4
  %8 = getelementptr inbounds %"struct.x11::CreateWindowRequest", %"struct.x11::CreateWindowRequest"* %3, i64 0, i32 2
  %9 = getelementptr inbounds %"class.x11::Connection", %"class.x11::Connection"* %1, i64 0, i32 11
  %10 = load %"struct.x11::Screen"*, %"struct.x11::Screen"** %9, align 8
  %11 = getelementptr inbounds %"struct.x11::Screen", %"struct.x11::Screen"* %10, i64 0, i32 0
  %12 = load i32, i32* %11, align 8
  store i32 %12, i32* %8, align 4
  %13 = getelementptr inbounds %"struct.x11::CreateWindowRequest", %"struct.x11::CreateWindowRequest"* %3, i64 0, i32 3
  store i16 -100, i16* %13, align 4
  %14 = getelementptr inbounds %"struct.x11::CreateWindowRequest", %"struct.x11::CreateWindowRequest"* %3, i64 0, i32 4
  store i16 -100, i16* %14, align 2
  %15 = getelementptr inbounds %"struct.x11::CreateWindowRequest", %"struct.x11::CreateWindowRequest"* %3, i64 0, i32 5
  store i16 10, i16* %15, align 4
  %16 = getelementptr inbounds %"struct.x11::CreateWindowRequest", %"struct.x11::CreateWindowRequest"* %3, i64 0, i32 6
  store i16 10, i16* %16, align 2
  %17 = getelementptr inbounds %"struct.x11::CreateWindowRequest", %"struct.x11::CreateWindowRequest"* %3, i64 0, i32 7
  store i16 0, i16* %17, align 4
  %18 = getelementptr inbounds %"struct.x11::CreateWindowRequest", %"struct.x11::CreateWindowRequest"* %3, i64 0, i32 8
  store i32 2, i32* %18, align 4
  %19 = getelementptr inbounds %"struct.x11::CreateWindowRequest", %"struct.x11::CreateWindowRequest"* %3, i64 0, i32 9
  store i32 0, i32* %19, align 4
  %20 = getelementptr inbounds %"struct.x11::CreateWindowRequest", %"struct.x11::CreateWindowRequest"* %3, i64 0, i32 10, i32 0, i32 0, i32 0, i32 0
  store i8 0, i8* %20, align 4
  %21 = getelementptr inbounds %"struct.x11::CreateWindowRequest", %"struct.x11::CreateWindowRequest"* %3, i64 0, i32 11, i32 0, i32 0, i32 0, i32 0
  store i8 0, i8* %21, align 4
  %22 = getelementptr inbounds %"struct.x11::CreateWindowRequest", %"struct.x11::CreateWindowRequest"* %3, i64 0, i32 12, i32 0, i32 0, i32 0, i32 0
  store i8 0, i8* %22, align 4
  %23 = getelementptr inbounds %"struct.x11::CreateWindowRequest", %"struct.x11::CreateWindowRequest"* %3, i64 0, i32 13, i32 0, i32 0, i32 0, i32 0
  store i8 0, i8* %23, align 4
  %24 = getelementptr inbounds %"struct.x11::CreateWindowRequest", %"struct.x11::CreateWindowRequest"* %3, i64 0, i32 14, i32 0, i32 0, i32 0, i32 0
  store i8 0, i8* %24, align 4
  %25 = getelementptr inbounds %"struct.x11::CreateWindowRequest", %"struct.x11::CreateWindowRequest"* %3, i64 0, i32 15, i32 0, i32 0, i32 0, i32 0
  store i8 0, i8* %25, align 4
  %26 = getelementptr inbounds %"struct.x11::CreateWindowRequest", %"struct.x11::CreateWindowRequest"* %3, i64 0, i32 16, i32 0, i32 0, i32 0, i32 0
  store i8 0, i8* %26, align 4
  %27 = getelementptr inbounds %"struct.x11::CreateWindowRequest", %"struct.x11::CreateWindowRequest"* %3, i64 0, i32 17, i32 0, i32 0, i32 0, i32 0
  store i8 0, i8* %27, align 4
  %28 = getelementptr inbounds %"struct.x11::CreateWindowRequest", %"struct.x11::CreateWindowRequest"* %3, i64 0, i32 18, i32 0, i32 0, i32 0, i32 0
  store i8 0, i8* %28, align 4
  %29 = getelementptr inbounds %"struct.x11::CreateWindowRequest", %"struct.x11::CreateWindowRequest"* %3, i64 0, i32 19, i32 0, i32 0, i32 0, i32 0
  store i8 1, i8* %29, align 4
  %30 = getelementptr inbounds %"struct.x11::CreateWindowRequest", %"struct.x11::CreateWindowRequest"* %3, i64 0, i32 19, i32 0, i32 0, i32 0, i32 1, i32 0
  store i32 1, i32* %30, align 4
  %31 = getelementptr inbounds %"struct.x11::CreateWindowRequest", %"struct.x11::CreateWindowRequest"* %3, i64 0, i32 20, i32 0, i32 0, i32 0, i32 0
  store i8 0, i8* %31, align 4
  %32 = getelementptr inbounds %"struct.x11::CreateWindowRequest", %"struct.x11::CreateWindowRequest"* %3, i64 0, i32 21, i32 0, i32 0, i32 0, i32 0
  store i8 0, i8* %32, align 4
  %33 = getelementptr inbounds %"struct.x11::CreateWindowRequest", %"struct.x11::CreateWindowRequest"* %3, i64 0, i32 22, i32 0, i32 0, i32 0, i32 0
  store i8 0, i8* %33, align 4
  %34 = getelementptr inbounds %"struct.x11::CreateWindowRequest", %"struct.x11::CreateWindowRequest"* %3, i64 0, i32 23, i32 0, i32 0, i32 0, i32 0
  store i8 0, i8* %34, align 4
  %35 = getelementptr inbounds %"struct.x11::CreateWindowRequest", %"struct.x11::CreateWindowRequest"* %3, i64 0, i32 24, i32 0, i32 0, i32 0, i32 0
  store i8 0, i8* %35, align 4
  %36 = call %"class.x11::Connection::FutureImpl"* @_ZN3x116XProto12CreateWindowERKNS_19CreateWindowRequestE(%"class.x11::XProto"* %5, %"struct.x11::CreateWindowRequest"* nonnull dereferenceable(152) %3) #6
  %37 = icmp eq %"class.x11::Connection::FutureImpl"* %36, null
  br i1 %37, label %40, label %38

38:                                               ; preds = %2
  %39 = bitcast %"class.x11::Connection::FutureImpl"* %36 to i8*
  call void @_ZdlPv(i8* %39) #7
  br label %40

40:                                               ; preds = %2, %38
  call void @llvm.lifetime.end.p0i8(i64 152, i8* nonnull %6) #6
  %41 = bitcast %"class.std::__1::basic_string"* %0 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %42 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %41, i64 0, i32 1, i32 0
  %43 = load i8, i8* %42, align 1
  %44 = icmp slt i8 %43, 0
  %45 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %46 = load i64, i64* %45, align 8
  %47 = zext i8 %43 to i64
  %48 = select i1 %44, i64 %46, i64 %47
  %49 = icmp eq i64 %48, 0
  br i1 %49, label %52, label %50

50:                                               ; preds = %40
  %51 = call %"class.x11::Connection"* @_ZN3x1110Connection3GetEv() #6
  call void @_ZN3x1117SetStringPropertyENS_6WindowENS_4AtomES1_RKNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEPNS_10ConnectionE(i32 %4, i32 39, i32 31, %"class.std::__1::basic_string"* dereferenceable(24) %0, %"class.x11::Connection"* %51)
  br label %52

52:                                               ; preds = %50, %40
  ret i32 %4
}

declare %"class.x11::Connection::FutureImpl"* @_ZN3x116XProto12CreateWindowERKNS_19CreateWindowRequestE(%"class.x11::XProto"*, %"struct.x11::CreateWindowRequest"* dereferenceable(152)) local_unnamed_addr #1

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #3

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #2

; Function Attrs: noreturn
declare void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"*) local_unnamed_addr #4

; Function Attrs: nobuiltin nofree
declare noalias nonnull i8* @_Znwm(i64) local_unnamed_addr #5

declare %"class.x11::Connection::FutureImpl"* @_ZN3x116XProto14ChangePropertyERKNS_21ChangePropertyRequestE(%"class.x11::XProto"*, %"struct.x11::ChangePropertyRequest"* dereferenceable(32)) local_unnamed_addr #1

declare %"class.base::RefCountedBytes"* @_ZN4base15RefCountedBytes10TakeVectorEPNSt3__16vectorIhNS1_9allocatorIhEEEE(%"class.std::__1::vector.302"*) local_unnamed_addr #1

declare i32 @_ZN3x1110Connection14GenerateIdImplEv(%"class.x11::Connection"*) local_unnamed_addr #1

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #2

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind }
attributes #3 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nobuiltin nofree "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nounwind }
attributes #7 = { builtin nounwind }
attributes #8 = { noreturn nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{!3}
!3 = distinct !{!3, !4}
!4 = distinct !{!4, !"LVerDomain"}
!5 = !{!6}
!6 = distinct !{!6, !4}
!7 = distinct !{!7, !8}
!8 = !{!"llvm.loop.isvectorized", i32 1}
!9 = distinct !{!9, !10}
!10 = !{!"llvm.loop.unroll.disable"}
!11 = distinct !{!11, !8}
