; ModuleID = '../../third_party/libaom/source/libaom/av1/common/cdef_block.c'
source_filename = "../../third_party/libaom/source/libaom/av1/common/cdef_block.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"
module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%struct.cdef_list = type { i8, i8 }

@cdef_directions = hidden local_unnamed_addr constant [8 x [2 x i32]] [[2 x i32] [i32 -143, i32 -286], [2 x i32] [i32 1, i32 -142], [2 x i32] [i32 1, i32 2], [2 x i32] [i32 1, i32 146], [2 x i32] [i32 145, i32 290], [2 x i32] [i32 144, i32 289], [2 x i32] [i32 144, i32 288], [2 x i32] [i32 144, i32 287]], align 16
@cdef_pri_taps = hidden local_unnamed_addr constant [2 x [2 x i32]] [[2 x i32] [i32 4, i32 2], [2 x i32] [i32 3, i32 3]], align 16
@cdef_sec_taps = hidden local_unnamed_addr constant [2 x i32] [i32 2, i32 1], align 4
@cdef_find_dir = external local_unnamed_addr global i32 (i16*, i32, i32*, i32)*, align 8
@av1_cdef_filter_fb.conv422 = internal unnamed_addr constant [8 x i32] [i32 7, i32 0, i32 2, i32 4, i32 5, i32 6, i32 6, i32 6], align 16
@av1_cdef_filter_fb.conv440 = internal unnamed_addr constant [8 x i32] [i32 1, i32 2, i32 2, i32 2, i32 3, i32 4, i32 6, i32 0], align 16
@cdef_filter_block = external local_unnamed_addr global void (i8*, i16*, i32, i16*, i32, i32, i32, i32, i32, i32, i32)*, align 8

; Function Attrs: nounwind ssp uwtable
define hidden i32 @cdef_find_dir_c(i16* nocapture readonly, i32, i32* nocapture, i32) local_unnamed_addr #0 {
  %5 = alloca [8 x i32], align 16
  %6 = alloca [8 x [15 x i32]], align 16
  %7 = bitcast [8 x i32]* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %7) #4
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %7, i8 0, i64 32, i1 false)
  %8 = bitcast [8 x [15 x i32]]* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 480, i8* nonnull %8) #4
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %8, i8 0, i64 480, i1 false)
  %9 = sext i32 %1 to i64
  br label %10

10:                                               ; preds = %268, %4
  %11 = phi i64 [ 0, %4 ], [ %269, %268 ]
  %12 = mul nsw i64 %11, %9
  %13 = getelementptr inbounds [8 x [15 x i32]], [8 x [15 x i32]]* %6, i64 0, i64 2, i64 %11
  %14 = add nuw nsw i64 %11, 7
  %15 = trunc i64 %11 to i32
  %16 = lshr i32 %15, 1
  %17 = sub nsw i32 3, %16
  %18 = zext i32 %16 to i64
  %19 = zext i32 %17 to i64
  %20 = trunc i64 %11 to i32
  %21 = add i32 %20, 3
  br label %225

22:                                               ; preds = %268
  %23 = getelementptr inbounds [8 x i32], [8 x i32]* %5, i64 0, i64 2
  %24 = getelementptr inbounds [8 x i32], [8 x i32]* %5, i64 0, i64 6
  %25 = getelementptr inbounds [8 x [15 x i32]], [8 x [15 x i32]]* %6, i64 0, i64 2, i64 0
  %26 = load i32, i32* %25, align 8
  %27 = mul nsw i32 %26, %26
  %28 = getelementptr inbounds [8 x [15 x i32]], [8 x [15 x i32]]* %6, i64 0, i64 6, i64 0
  %29 = load i32, i32* %28, align 8
  %30 = mul nsw i32 %29, %29
  %31 = getelementptr inbounds [8 x [15 x i32]], [8 x [15 x i32]]* %6, i64 0, i64 2, i64 1
  %32 = load i32, i32* %31, align 4
  %33 = mul nsw i32 %32, %32
  %34 = add nuw nsw i32 %27, %33
  %35 = getelementptr inbounds [8 x [15 x i32]], [8 x [15 x i32]]* %6, i64 0, i64 6, i64 1
  %36 = load i32, i32* %35, align 4
  %37 = mul nsw i32 %36, %36
  %38 = add nuw nsw i32 %30, %37
  %39 = getelementptr inbounds [8 x [15 x i32]], [8 x [15 x i32]]* %6, i64 0, i64 2, i64 2
  %40 = load i32, i32* %39, align 8
  %41 = mul nsw i32 %40, %40
  %42 = add nuw nsw i32 %34, %41
  %43 = getelementptr inbounds [8 x [15 x i32]], [8 x [15 x i32]]* %6, i64 0, i64 6, i64 2
  %44 = load i32, i32* %43, align 8
  %45 = mul nsw i32 %44, %44
  %46 = add nuw nsw i32 %38, %45
  %47 = getelementptr inbounds [8 x [15 x i32]], [8 x [15 x i32]]* %6, i64 0, i64 2, i64 3
  %48 = load i32, i32* %47, align 4
  %49 = mul nsw i32 %48, %48
  %50 = add nuw nsw i32 %42, %49
  %51 = getelementptr inbounds [8 x [15 x i32]], [8 x [15 x i32]]* %6, i64 0, i64 6, i64 3
  %52 = load i32, i32* %51, align 4
  %53 = mul nsw i32 %52, %52
  %54 = add nuw nsw i32 %46, %53
  %55 = getelementptr inbounds [8 x [15 x i32]], [8 x [15 x i32]]* %6, i64 0, i64 2, i64 4
  %56 = load i32, i32* %55, align 8
  %57 = mul nsw i32 %56, %56
  %58 = add nuw nsw i32 %50, %57
  %59 = getelementptr inbounds [8 x [15 x i32]], [8 x [15 x i32]]* %6, i64 0, i64 6, i64 4
  %60 = load i32, i32* %59, align 8
  %61 = mul nsw i32 %60, %60
  %62 = add nuw nsw i32 %54, %61
  %63 = getelementptr inbounds [8 x [15 x i32]], [8 x [15 x i32]]* %6, i64 0, i64 2, i64 5
  %64 = load i32, i32* %63, align 4
  %65 = mul nsw i32 %64, %64
  %66 = add nuw nsw i32 %58, %65
  %67 = getelementptr inbounds [8 x [15 x i32]], [8 x [15 x i32]]* %6, i64 0, i64 6, i64 5
  %68 = load i32, i32* %67, align 4
  %69 = mul nsw i32 %68, %68
  %70 = add nuw nsw i32 %62, %69
  %71 = getelementptr inbounds [8 x [15 x i32]], [8 x [15 x i32]]* %6, i64 0, i64 2, i64 6
  %72 = load i32, i32* %71, align 8
  %73 = mul nsw i32 %72, %72
  %74 = add nuw nsw i32 %66, %73
  %75 = getelementptr inbounds [8 x [15 x i32]], [8 x [15 x i32]]* %6, i64 0, i64 6, i64 6
  %76 = load i32, i32* %75, align 8
  %77 = mul nsw i32 %76, %76
  %78 = add nuw nsw i32 %70, %77
  %79 = getelementptr inbounds [8 x [15 x i32]], [8 x [15 x i32]]* %6, i64 0, i64 2, i64 7
  %80 = load i32, i32* %79, align 4
  %81 = mul nsw i32 %80, %80
  %82 = add nsw i32 %74, %81
  %83 = getelementptr inbounds [8 x [15 x i32]], [8 x [15 x i32]]* %6, i64 0, i64 6, i64 7
  %84 = load i32, i32* %83, align 4
  %85 = mul nsw i32 %84, %84
  %86 = add nsw i32 %78, %85
  %87 = mul nsw i32 %82, 105
  store i32 %87, i32* %23, align 8
  %88 = mul nsw i32 %86, 105
  store i32 %88, i32* %24, align 8
  %89 = getelementptr inbounds [8 x i32], [8 x i32]* %5, i64 0, i64 0
  %90 = getelementptr inbounds [8 x i32], [8 x i32]* %5, i64 0, i64 4
  %91 = getelementptr inbounds [8 x [15 x i32]], [8 x [15 x i32]]* %6, i64 0, i64 0, i64 0
  %92 = load i32, i32* %91, align 16
  %93 = mul nsw i32 %92, %92
  %94 = getelementptr inbounds [8 x [15 x i32]], [8 x [15 x i32]]* %6, i64 0, i64 0, i64 14
  %95 = load i32, i32* %94, align 8
  %96 = mul nsw i32 %95, %95
  %97 = add nuw nsw i32 %96, %93
  %98 = mul nsw i32 %97, 840
  %99 = getelementptr inbounds [8 x [15 x i32]], [8 x [15 x i32]]* %6, i64 0, i64 4, i64 0
  %100 = load i32, i32* %99, align 16
  %101 = mul nsw i32 %100, %100
  %102 = getelementptr inbounds [8 x [15 x i32]], [8 x [15 x i32]]* %6, i64 0, i64 4, i64 14
  %103 = load i32, i32* %102, align 8
  %104 = mul nsw i32 %103, %103
  %105 = add nuw nsw i32 %104, %101
  %106 = mul nsw i32 %105, 840
  %107 = getelementptr inbounds [8 x [15 x i32]], [8 x [15 x i32]]* %6, i64 0, i64 0, i64 1
  %108 = load i32, i32* %107, align 4
  %109 = mul nsw i32 %108, %108
  %110 = getelementptr inbounds [8 x [15 x i32]], [8 x [15 x i32]]* %6, i64 0, i64 0, i64 13
  %111 = load i32, i32* %110, align 4
  %112 = mul nsw i32 %111, %111
  %113 = add nuw nsw i32 %112, %109
  %114 = mul nsw i32 %113, 420
  %115 = add nuw nsw i32 %114, %98
  %116 = getelementptr inbounds [8 x [15 x i32]], [8 x [15 x i32]]* %6, i64 0, i64 4, i64 1
  %117 = load i32, i32* %116, align 4
  %118 = mul nsw i32 %117, %117
  %119 = getelementptr inbounds [8 x [15 x i32]], [8 x [15 x i32]]* %6, i64 0, i64 4, i64 13
  %120 = load i32, i32* %119, align 4
  %121 = mul nsw i32 %120, %120
  %122 = add nuw nsw i32 %121, %118
  %123 = mul nsw i32 %122, 420
  %124 = add nuw nsw i32 %123, %106
  %125 = getelementptr inbounds [8 x [15 x i32]], [8 x [15 x i32]]* %6, i64 0, i64 0, i64 2
  %126 = load i32, i32* %125, align 8
  %127 = mul nsw i32 %126, %126
  %128 = getelementptr inbounds [8 x [15 x i32]], [8 x [15 x i32]]* %6, i64 0, i64 0, i64 12
  %129 = load i32, i32* %128, align 16
  %130 = mul nsw i32 %129, %129
  %131 = add nuw nsw i32 %130, %127
  %132 = mul nsw i32 %131, 280
  %133 = add nuw nsw i32 %132, %115
  %134 = getelementptr inbounds [8 x [15 x i32]], [8 x [15 x i32]]* %6, i64 0, i64 4, i64 2
  %135 = load i32, i32* %134, align 8
  %136 = mul nsw i32 %135, %135
  %137 = getelementptr inbounds [8 x [15 x i32]], [8 x [15 x i32]]* %6, i64 0, i64 4, i64 12
  %138 = load i32, i32* %137, align 16
  %139 = mul nsw i32 %138, %138
  %140 = add nuw nsw i32 %139, %136
  %141 = mul nsw i32 %140, 280
  %142 = add nuw nsw i32 %141, %124
  %143 = getelementptr inbounds [8 x [15 x i32]], [8 x [15 x i32]]* %6, i64 0, i64 0, i64 3
  %144 = load i32, i32* %143, align 4
  %145 = mul nsw i32 %144, %144
  %146 = getelementptr inbounds [8 x [15 x i32]], [8 x [15 x i32]]* %6, i64 0, i64 0, i64 11
  %147 = load i32, i32* %146, align 4
  %148 = mul nsw i32 %147, %147
  %149 = add nuw nsw i32 %148, %145
  %150 = mul nsw i32 %149, 210
  %151 = add nuw nsw i32 %150, %133
  %152 = getelementptr inbounds [8 x [15 x i32]], [8 x [15 x i32]]* %6, i64 0, i64 4, i64 3
  %153 = load i32, i32* %152, align 4
  %154 = mul nsw i32 %153, %153
  %155 = getelementptr inbounds [8 x [15 x i32]], [8 x [15 x i32]]* %6, i64 0, i64 4, i64 11
  %156 = load i32, i32* %155, align 4
  %157 = mul nsw i32 %156, %156
  %158 = add nuw nsw i32 %157, %154
  %159 = mul nsw i32 %158, 210
  %160 = add nuw nsw i32 %159, %142
  %161 = getelementptr inbounds [8 x [15 x i32]], [8 x [15 x i32]]* %6, i64 0, i64 0, i64 4
  %162 = load i32, i32* %161, align 16
  %163 = mul nsw i32 %162, %162
  %164 = getelementptr inbounds [8 x [15 x i32]], [8 x [15 x i32]]* %6, i64 0, i64 0, i64 10
  %165 = load i32, i32* %164, align 8
  %166 = mul nsw i32 %165, %165
  %167 = add nuw nsw i32 %166, %163
  %168 = mul nsw i32 %167, 168
  %169 = add nuw nsw i32 %168, %151
  %170 = getelementptr inbounds [8 x [15 x i32]], [8 x [15 x i32]]* %6, i64 0, i64 4, i64 4
  %171 = load i32, i32* %170, align 16
  %172 = mul nsw i32 %171, %171
  %173 = getelementptr inbounds [8 x [15 x i32]], [8 x [15 x i32]]* %6, i64 0, i64 4, i64 10
  %174 = load i32, i32* %173, align 8
  %175 = mul nsw i32 %174, %174
  %176 = add nuw nsw i32 %175, %172
  %177 = mul nsw i32 %176, 168
  %178 = add nuw nsw i32 %177, %160
  %179 = getelementptr inbounds [8 x [15 x i32]], [8 x [15 x i32]]* %6, i64 0, i64 0, i64 5
  %180 = load i32, i32* %179, align 4
  %181 = mul nsw i32 %180, %180
  %182 = getelementptr inbounds [8 x [15 x i32]], [8 x [15 x i32]]* %6, i64 0, i64 0, i64 9
  %183 = load i32, i32* %182, align 4
  %184 = mul nsw i32 %183, %183
  %185 = add nuw nsw i32 %184, %181
  %186 = mul nsw i32 %185, 140
  %187 = add nsw i32 %186, %169
  %188 = getelementptr inbounds [8 x [15 x i32]], [8 x [15 x i32]]* %6, i64 0, i64 4, i64 5
  %189 = load i32, i32* %188, align 4
  %190 = mul nsw i32 %189, %189
  %191 = getelementptr inbounds [8 x [15 x i32]], [8 x [15 x i32]]* %6, i64 0, i64 4, i64 9
  %192 = load i32, i32* %191, align 4
  %193 = mul nsw i32 %192, %192
  %194 = add nuw nsw i32 %193, %190
  %195 = mul nsw i32 %194, 140
  %196 = add nsw i32 %195, %178
  %197 = getelementptr inbounds [8 x [15 x i32]], [8 x [15 x i32]]* %6, i64 0, i64 0, i64 6
  %198 = load i32, i32* %197, align 8
  %199 = mul nsw i32 %198, %198
  %200 = getelementptr inbounds [8 x [15 x i32]], [8 x [15 x i32]]* %6, i64 0, i64 0, i64 8
  %201 = load i32, i32* %200, align 16
  %202 = mul nsw i32 %201, %201
  %203 = add nuw nsw i32 %202, %199
  %204 = mul nsw i32 %203, 120
  %205 = add nsw i32 %204, %187
  %206 = getelementptr inbounds [8 x [15 x i32]], [8 x [15 x i32]]* %6, i64 0, i64 4, i64 6
  %207 = load i32, i32* %206, align 8
  %208 = mul nsw i32 %207, %207
  %209 = getelementptr inbounds [8 x [15 x i32]], [8 x [15 x i32]]* %6, i64 0, i64 4, i64 8
  %210 = load i32, i32* %209, align 16
  %211 = mul nsw i32 %210, %210
  %212 = add nuw nsw i32 %211, %208
  %213 = mul nsw i32 %212, 120
  %214 = add nsw i32 %213, %196
  %215 = getelementptr inbounds [8 x [15 x i32]], [8 x [15 x i32]]* %6, i64 0, i64 0, i64 7
  %216 = load i32, i32* %215, align 4
  %217 = mul i32 %216, 105
  %218 = mul i32 %217, %216
  %219 = add nsw i32 %218, %205
  store i32 %219, i32* %89, align 16
  %220 = getelementptr inbounds [8 x [15 x i32]], [8 x [15 x i32]]* %6, i64 0, i64 4, i64 7
  %221 = load i32, i32* %220, align 4
  %222 = mul i32 %221, 105
  %223 = mul i32 %222, %221
  %224 = add nsw i32 %223, %214
  store i32 %224, i32* %90, align 16
  br label %271

225:                                              ; preds = %225, %10
  %226 = phi i64 [ 0, %10 ], [ %266, %225 ]
  %227 = add nsw i64 %226, %12
  %228 = getelementptr inbounds i16, i16* %0, i64 %227
  %229 = load i16, i16* %228, align 2
  %230 = zext i16 %229 to i32
  %231 = lshr i32 %230, %3
  %232 = add nsw i32 %231, -128
  %233 = add nuw nsw i64 %226, %11
  %234 = getelementptr inbounds [8 x [15 x i32]], [8 x [15 x i32]]* %6, i64 0, i64 0, i64 %233
  %235 = load i32, i32* %234, align 4
  %236 = add nsw i32 %232, %235
  store i32 %236, i32* %234, align 4
  %237 = trunc i64 %226 to i32
  %238 = lshr i32 %237, 1
  %239 = add nuw nsw i32 %238, %15
  %240 = zext i32 %239 to i64
  %241 = getelementptr inbounds [8 x [15 x i32]], [8 x [15 x i32]]* %6, i64 0, i64 1, i64 %240
  %242 = load i32, i32* %241, align 4
  %243 = add nsw i32 %242, %232
  store i32 %243, i32* %241, align 4
  %244 = load i32, i32* %13, align 4
  %245 = add nsw i32 %244, %232
  store i32 %245, i32* %13, align 4
  %246 = sub nsw i32 %21, %238
  %247 = sext i32 %246 to i64
  %248 = getelementptr inbounds [8 x [15 x i32]], [8 x [15 x i32]]* %6, i64 0, i64 3, i64 %247
  %249 = load i32, i32* %248, align 4
  %250 = add nsw i32 %249, %232
  store i32 %250, i32* %248, align 4
  %251 = sub nuw nsw i64 %14, %226
  %252 = getelementptr inbounds [8 x [15 x i32]], [8 x [15 x i32]]* %6, i64 0, i64 4, i64 %251
  %253 = load i32, i32* %252, align 4
  %254 = add nsw i32 %253, %232
  store i32 %254, i32* %252, align 4
  %255 = add nuw nsw i64 %226, %19
  %256 = getelementptr inbounds [8 x [15 x i32]], [8 x [15 x i32]]* %6, i64 0, i64 5, i64 %255
  %257 = load i32, i32* %256, align 4
  %258 = add nsw i32 %257, %232
  store i32 %258, i32* %256, align 4
  %259 = getelementptr inbounds [8 x [15 x i32]], [8 x [15 x i32]]* %6, i64 0, i64 6, i64 %226
  %260 = load i32, i32* %259, align 4
  %261 = add nsw i32 %260, %232
  store i32 %261, i32* %259, align 4
  %262 = add nuw nsw i64 %226, %18
  %263 = getelementptr inbounds [8 x [15 x i32]], [8 x [15 x i32]]* %6, i64 0, i64 7, i64 %262
  %264 = load i32, i32* %263, align 4
  %265 = add nsw i32 %264, %232
  store i32 %265, i32* %263, align 4
  %266 = add nuw nsw i64 %226, 1
  %267 = icmp eq i64 %266, 8
  br i1 %267, label %268, label %225

268:                                              ; preds = %225
  %269 = add nuw nsw i64 %11, 1
  %270 = icmp eq i64 %269, 8
  br i1 %270, label %22, label %10

271:                                              ; preds = %22, %271
  %272 = phi i64 [ 1, %22 ], [ %323, %271 ]
  %273 = getelementptr inbounds [8 x i32], [8 x i32]* %5, i64 0, i64 %272
  %274 = load i32, i32* %273, align 4
  %275 = getelementptr inbounds [8 x [15 x i32]], [8 x [15 x i32]]* %6, i64 0, i64 %272, i64 3
  %276 = load i32, i32* %275, align 4
  %277 = mul nsw i32 %276, %276
  %278 = add nsw i32 %274, %277
  %279 = getelementptr inbounds [8 x [15 x i32]], [8 x [15 x i32]]* %6, i64 0, i64 %272, i64 4
  %280 = load i32, i32* %279, align 4
  %281 = mul nsw i32 %280, %280
  %282 = add nsw i32 %278, %281
  %283 = getelementptr inbounds [8 x [15 x i32]], [8 x [15 x i32]]* %6, i64 0, i64 %272, i64 5
  %284 = load i32, i32* %283, align 4
  %285 = mul nsw i32 %284, %284
  %286 = add nsw i32 %282, %285
  %287 = getelementptr inbounds [8 x [15 x i32]], [8 x [15 x i32]]* %6, i64 0, i64 %272, i64 6
  %288 = load i32, i32* %287, align 4
  %289 = mul nsw i32 %288, %288
  %290 = add nsw i32 %286, %289
  %291 = getelementptr inbounds [8 x [15 x i32]], [8 x [15 x i32]]* %6, i64 0, i64 %272, i64 7
  %292 = load i32, i32* %291, align 4
  %293 = mul nsw i32 %292, %292
  %294 = add nsw i32 %290, %293
  %295 = mul nsw i32 %294, 105
  %296 = getelementptr inbounds [8 x [15 x i32]], [8 x [15 x i32]]* %6, i64 0, i64 %272, i64 0
  %297 = load i32, i32* %296, align 4
  %298 = mul nsw i32 %297, %297
  %299 = getelementptr inbounds [8 x [15 x i32]], [8 x [15 x i32]]* %6, i64 0, i64 %272, i64 10
  %300 = load i32, i32* %299, align 4
  %301 = mul nsw i32 %300, %300
  %302 = add nuw nsw i32 %301, %298
  %303 = mul nsw i32 %302, 420
  %304 = add nsw i32 %303, %295
  %305 = getelementptr inbounds [8 x [15 x i32]], [8 x [15 x i32]]* %6, i64 0, i64 %272, i64 1
  %306 = load i32, i32* %305, align 4
  %307 = mul nsw i32 %306, %306
  %308 = getelementptr inbounds [8 x [15 x i32]], [8 x [15 x i32]]* %6, i64 0, i64 %272, i64 9
  %309 = load i32, i32* %308, align 4
  %310 = mul nsw i32 %309, %309
  %311 = add nuw nsw i32 %310, %307
  %312 = mul nsw i32 %311, 210
  %313 = add nsw i32 %312, %304
  %314 = getelementptr inbounds [8 x [15 x i32]], [8 x [15 x i32]]* %6, i64 0, i64 %272, i64 2
  %315 = load i32, i32* %314, align 4
  %316 = mul nsw i32 %315, %315
  %317 = getelementptr inbounds [8 x [15 x i32]], [8 x [15 x i32]]* %6, i64 0, i64 %272, i64 8
  %318 = load i32, i32* %317, align 4
  %319 = mul nsw i32 %318, %318
  %320 = add nuw nsw i32 %319, %316
  %321 = mul nsw i32 %320, 140
  %322 = add nsw i32 %321, %313
  store i32 %322, i32* %273, align 4
  %323 = add nuw nsw i64 %272, 2
  %324 = icmp ult i64 %323, 8
  br i1 %324, label %271, label %325

325:                                              ; preds = %271
  %326 = load i32, i32* %89, align 16
  %327 = icmp sgt i32 %326, 0
  %328 = select i1 %327, i32 %326, i32 0
  %329 = getelementptr inbounds [8 x i32], [8 x i32]* %5, i64 0, i64 1
  %330 = load i32, i32* %329, align 4
  %331 = icmp sgt i32 %330, %328
  %332 = select i1 %331, i32 %330, i32 %328
  %333 = zext i1 %331 to i32
  %334 = load i32, i32* %23, align 8
  %335 = icmp sgt i32 %334, %332
  %336 = select i1 %335, i32 %334, i32 %332
  %337 = select i1 %335, i32 2, i32 %333
  %338 = getelementptr inbounds [8 x i32], [8 x i32]* %5, i64 0, i64 3
  %339 = load i32, i32* %338, align 4
  %340 = icmp sgt i32 %339, %336
  %341 = select i1 %340, i32 %339, i32 %336
  %342 = select i1 %340, i32 3, i32 %337
  %343 = load i32, i32* %90, align 16
  %344 = icmp sgt i32 %343, %341
  %345 = select i1 %344, i32 %343, i32 %341
  %346 = select i1 %344, i32 4, i32 %342
  %347 = getelementptr inbounds [8 x i32], [8 x i32]* %5, i64 0, i64 5
  %348 = load i32, i32* %347, align 4
  %349 = icmp sgt i32 %348, %345
  %350 = select i1 %349, i32 %348, i32 %345
  %351 = select i1 %349, i32 5, i32 %346
  %352 = load i32, i32* %24, align 8
  %353 = icmp sgt i32 %352, %350
  %354 = select i1 %353, i32 %352, i32 %350
  %355 = select i1 %353, i32 6, i32 %351
  %356 = getelementptr inbounds [8 x i32], [8 x i32]* %5, i64 0, i64 7
  %357 = load i32, i32* %356, align 4
  %358 = icmp sgt i32 %357, %354
  %359 = select i1 %358, i32 %357, i32 %354
  %360 = select i1 %358, i32 7, i32 %355
  %361 = add nuw nsw i32 %360, 4
  %362 = and i32 %361, 7
  %363 = zext i32 %362 to i64
  %364 = getelementptr inbounds [8 x i32], [8 x i32]* %5, i64 0, i64 %363
  %365 = load i32, i32* %364, align 4
  %366 = sub nsw i32 %359, %365
  %367 = ashr i32 %366, 10
  store i32 %367, i32* %2, align 4
  call void @llvm.lifetime.end.p0i8(i64 480, i8* nonnull %8) #4
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %7) #4
  ret i32 %360
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nofree nounwind ssp uwtable
define hidden void @cdef_filter_block_c(i8*, i16* nocapture, i32, i16* nocapture readonly, i32, i32, i32, i32, i32, i32, i32) local_unnamed_addr #2 {
  %12 = lshr i32 %4, %10
  %13 = and i32 %12, 1
  %14 = zext i32 %13 to i64
  %15 = or i32 %9, 2
  %16 = icmp eq i32 %15, 3
  %17 = zext i1 %16 to i32
  %18 = shl i32 4, %17
  %19 = icmp sgt i32 %18, 0
  br i1 %19, label %20, label %267

20:                                               ; preds = %11
  %21 = or i32 %9, 1
  %22 = icmp eq i32 %21, 3
  %23 = zext i1 %22 to i32
  %24 = shl i32 4, %23
  %25 = icmp sgt i32 %24, 0
  %26 = sext i32 %6 to i64
  %27 = icmp eq i32 %4, 0
  %28 = tail call i32 @llvm.ctlz.i32(i32 %4, i1 true) #4, !range !2
  %29 = xor i32 %28, 31
  %30 = icmp sgt i32 %29, %7
  %31 = sub nsw i32 %7, %29
  %32 = select i1 %30, i32 0, i32 %31
  %33 = add nsw i32 %6, 2
  %34 = and i32 %33, 7
  %35 = zext i32 %34 to i64
  %36 = add nsw i32 %6, 6
  %37 = and i32 %36, 7
  %38 = zext i32 %37 to i64
  %39 = icmp eq i32 %5, 0
  %40 = tail call i32 @llvm.ctlz.i32(i32 %5, i1 true) #4, !range !2
  %41 = xor i32 %40, 31
  %42 = icmp sgt i32 %41, %8
  %43 = sub nsw i32 %8, %41
  %44 = select i1 %42, i32 0, i32 %43
  %45 = icmp eq i8* %0, null
  %46 = sext i32 %2 to i64
  %47 = zext i32 %18 to i64
  %48 = zext i32 %24 to i64
  br label %49

49:                                               ; preds = %264, %20
  %50 = phi i64 [ 0, %20 ], [ %265, %264 ]
  br i1 %25, label %51, label %264

51:                                               ; preds = %49
  %52 = mul nuw nsw i64 %50, 144
  %53 = mul nsw i64 %50, %46
  br label %54

54:                                               ; preds = %261, %51
  %55 = phi i64 [ 0, %51 ], [ %262, %261 ]
  %56 = add nuw nsw i64 %55, %52
  %57 = getelementptr inbounds i16, i16* %3, i64 %56
  %58 = load i16, i16* %57, align 2
  %59 = sext i16 %58 to i32
  br label %60

60:                                               ; preds = %233, %54
  %61 = phi i64 [ 0, %54 ], [ %239, %233 ]
  %62 = phi i32 [ %59, %54 ], [ %172, %233 ]
  %63 = phi i32 [ %59, %54 ], [ %164, %233 ]
  %64 = phi i16 [ 0, %54 ], [ %238, %233 ]
  %65 = getelementptr inbounds [8 x [2 x i32]], [8 x [2 x i32]]* @cdef_directions, i64 0, i64 %26, i64 %61
  %66 = load i32, i32* %65, align 4
  %67 = sext i32 %66 to i64
  %68 = add nsw i64 %56, %67
  %69 = getelementptr inbounds i16, i16* %3, i64 %68
  %70 = load i16, i16* %69, align 2
  %71 = sub nsw i64 %56, %67
  %72 = getelementptr inbounds i16, i16* %3, i64 %71
  %73 = load i16, i16* %72, align 2
  %74 = getelementptr inbounds [2 x [2 x i32]], [2 x [2 x i32]]* @cdef_pri_taps, i64 0, i64 %14, i64 %61
  %75 = load i32, i32* %74, align 4
  %76 = sext i16 %70 to i32
  %77 = sub nsw i32 %76, %59
  br i1 %27, label %78, label %80

78:                                               ; preds = %60
  %79 = sext i16 %73 to i32
  br label %108

80:                                               ; preds = %60
  %81 = icmp slt i32 %77, 0
  %82 = select i1 %81, i32 -1, i32 1
  %83 = sub nsw i32 0, %77
  %84 = select i1 %81, i32 %83, i32 %77
  %85 = lshr i32 %84, %32
  %86 = sub nsw i32 %4, %85
  %87 = icmp sgt i32 %86, 0
  %88 = select i1 %87, i32 %86, i32 0
  %89 = icmp slt i32 %84, %88
  %90 = select i1 %89, i32 %84, i32 %88
  %91 = mul i32 %82, %75
  %92 = mul i32 %91, %90
  %93 = trunc i32 %92 to i16
  %94 = add i16 %64, %93
  %95 = sext i16 %73 to i32
  %96 = sub nsw i32 %95, %59
  %97 = icmp slt i32 %96, 0
  %98 = select i1 %97, i32 -1, i32 1
  %99 = sub nsw i32 0, %96
  %100 = select i1 %97, i32 %99, i32 %96
  %101 = lshr i32 %100, %32
  %102 = sub nsw i32 %4, %101
  %103 = icmp sgt i32 %102, 0
  %104 = select i1 %103, i32 %102, i32 0
  %105 = icmp slt i32 %100, %104
  %106 = select i1 %105, i32 %100, i32 %104
  %107 = mul nsw i32 %106, %98
  br label %108

108:                                              ; preds = %78, %80
  %109 = phi i32 [ %95, %80 ], [ %79, %78 ]
  %110 = phi i16 [ %94, %80 ], [ %64, %78 ]
  %111 = phi i32 [ %107, %80 ], [ 0, %78 ]
  %112 = mul nsw i32 %111, %75
  %113 = trunc i32 %112 to i16
  %114 = add i16 %110, %113
  %115 = icmp eq i16 %70, 30000
  %116 = icmp slt i32 %63, %76
  %117 = select i1 %116, i32 %76, i32 %63
  %118 = select i1 %115, i32 %63, i32 %117
  %119 = icmp eq i16 %73, 30000
  %120 = icmp slt i32 %118, %109
  %121 = select i1 %120, i32 %109, i32 %118
  %122 = select i1 %119, i32 %118, i32 %121
  %123 = icmp sgt i32 %62, %76
  %124 = select i1 %123, i32 %76, i32 %62
  %125 = icmp sgt i32 %124, %109
  %126 = select i1 %125, i32 %109, i32 %124
  %127 = getelementptr inbounds [8 x [2 x i32]], [8 x [2 x i32]]* @cdef_directions, i64 0, i64 %35, i64 %61
  %128 = load i32, i32* %127, align 4
  %129 = sext i32 %128 to i64
  %130 = add nsw i64 %56, %129
  %131 = getelementptr inbounds i16, i16* %3, i64 %130
  %132 = load i16, i16* %131, align 2
  %133 = sub nsw i64 %56, %129
  %134 = getelementptr inbounds i16, i16* %3, i64 %133
  %135 = load i16, i16* %134, align 2
  %136 = getelementptr inbounds [8 x [2 x i32]], [8 x [2 x i32]]* @cdef_directions, i64 0, i64 %38, i64 %61
  %137 = load i32, i32* %136, align 4
  %138 = sext i32 %137 to i64
  %139 = add nsw i64 %56, %138
  %140 = getelementptr inbounds i16, i16* %3, i64 %139
  %141 = load i16, i16* %140, align 2
  %142 = sub nsw i64 %56, %138
  %143 = getelementptr inbounds i16, i16* %3, i64 %142
  %144 = load i16, i16* %143, align 2
  %145 = sext i16 %132 to i32
  %146 = icmp eq i16 %132, 30000
  %147 = icmp slt i32 %122, %145
  %148 = select i1 %147, i32 %145, i32 %122
  %149 = select i1 %146, i32 %122, i32 %148
  %150 = sext i16 %135 to i32
  %151 = icmp eq i16 %135, 30000
  %152 = icmp slt i32 %149, %150
  %153 = select i1 %152, i32 %150, i32 %149
  %154 = select i1 %151, i32 %149, i32 %153
  %155 = sext i16 %141 to i32
  %156 = icmp eq i16 %141, 30000
  %157 = icmp slt i32 %154, %155
  %158 = select i1 %157, i32 %155, i32 %154
  %159 = select i1 %156, i32 %154, i32 %158
  %160 = sext i16 %144 to i32
  %161 = icmp eq i16 %144, 30000
  %162 = icmp slt i32 %159, %160
  %163 = select i1 %162, i32 %160, i32 %159
  %164 = select i1 %161, i32 %159, i32 %163
  %165 = icmp sgt i32 %126, %145
  %166 = select i1 %165, i32 %145, i32 %126
  %167 = icmp sgt i32 %166, %150
  %168 = select i1 %167, i32 %150, i32 %166
  %169 = icmp sgt i32 %168, %155
  %170 = select i1 %169, i32 %155, i32 %168
  %171 = icmp sgt i32 %170, %160
  %172 = select i1 %171, i32 %160, i32 %170
  %173 = getelementptr inbounds [2 x i32], [2 x i32]* @cdef_sec_taps, i64 0, i64 %61
  %174 = load i32, i32* %173, align 4
  %175 = sub nsw i32 %145, %59
  br i1 %39, label %233, label %176

176:                                              ; preds = %108
  %177 = icmp slt i32 %175, 0
  %178 = select i1 %177, i32 -1, i32 1
  %179 = sub nsw i32 0, %175
  %180 = select i1 %177, i32 %179, i32 %175
  %181 = lshr i32 %180, %44
  %182 = sub nsw i32 %5, %181
  %183 = icmp sgt i32 %182, 0
  %184 = select i1 %183, i32 %182, i32 0
  %185 = icmp slt i32 %180, %184
  %186 = select i1 %185, i32 %180, i32 %184
  %187 = mul i32 %174, %178
  %188 = mul i32 %187, %186
  %189 = trunc i32 %188 to i16
  %190 = add i16 %114, %189
  %191 = sub nsw i32 %150, %59
  %192 = icmp slt i32 %191, 0
  %193 = select i1 %192, i32 -1, i32 1
  %194 = sub nsw i32 0, %191
  %195 = select i1 %192, i32 %194, i32 %191
  %196 = lshr i32 %195, %44
  %197 = sub nsw i32 %5, %196
  %198 = icmp sgt i32 %197, 0
  %199 = select i1 %198, i32 %197, i32 0
  %200 = icmp slt i32 %195, %199
  %201 = select i1 %200, i32 %195, i32 %199
  %202 = mul i32 %174, %193
  %203 = mul i32 %202, %201
  %204 = trunc i32 %203 to i16
  %205 = add i16 %190, %204
  %206 = sub nsw i32 %155, %59
  %207 = icmp slt i32 %206, 0
  %208 = select i1 %207, i32 -1, i32 1
  %209 = sub nsw i32 0, %206
  %210 = select i1 %207, i32 %209, i32 %206
  %211 = lshr i32 %210, %44
  %212 = sub nsw i32 %5, %211
  %213 = icmp sgt i32 %212, 0
  %214 = select i1 %213, i32 %212, i32 0
  %215 = icmp slt i32 %210, %214
  %216 = select i1 %215, i32 %210, i32 %214
  %217 = mul i32 %208, %174
  %218 = mul i32 %217, %216
  %219 = trunc i32 %218 to i16
  %220 = add i16 %205, %219
  %221 = sub nsw i32 %160, %59
  %222 = icmp slt i32 %221, 0
  %223 = select i1 %222, i32 -1, i32 1
  %224 = sub nsw i32 0, %221
  %225 = select i1 %222, i32 %224, i32 %221
  %226 = lshr i32 %225, %44
  %227 = sub nsw i32 %5, %226
  %228 = icmp sgt i32 %227, 0
  %229 = select i1 %228, i32 %227, i32 0
  %230 = icmp slt i32 %225, %229
  %231 = select i1 %230, i32 %225, i32 %229
  %232 = mul nsw i32 %231, %223
  br label %233

233:                                              ; preds = %108, %176
  %234 = phi i16 [ %220, %176 ], [ %114, %108 ]
  %235 = phi i32 [ %232, %176 ], [ 0, %108 ]
  %236 = mul nsw i32 %235, %174
  %237 = trunc i32 %236 to i16
  %238 = add i16 %234, %237
  %239 = add nuw nsw i64 %61, 1
  %240 = icmp eq i64 %239, 2
  br i1 %240, label %241, label %60

241:                                              ; preds = %233
  %242 = sext i16 %238 to i32
  %243 = add nsw i32 %242, 8
  %244 = lshr i16 %238, 15
  %245 = zext i16 %244 to i32
  %246 = sub nsw i32 %243, %245
  %247 = ashr i32 %246, 4
  %248 = add nsw i32 %247, %59
  %249 = icmp slt i32 %248, %172
  %250 = icmp sgt i32 %248, %164
  %251 = select i1 %250, i32 %164, i32 %248
  %252 = select i1 %249, i32 %172, i32 %251
  br i1 %45, label %257, label %253

253:                                              ; preds = %241
  %254 = trunc i32 %252 to i8
  %255 = add nsw i64 %55, %53
  %256 = getelementptr inbounds i8, i8* %0, i64 %255
  store i8 %254, i8* %256, align 1
  br label %261

257:                                              ; preds = %241
  %258 = trunc i32 %252 to i16
  %259 = add nsw i64 %55, %53
  %260 = getelementptr inbounds i16, i16* %1, i64 %259
  store i16 %258, i16* %260, align 2
  br label %261

261:                                              ; preds = %257, %253
  %262 = add nuw nsw i64 %55, 1
  %263 = icmp eq i64 %262, %48
  br i1 %263, label %264, label %54

264:                                              ; preds = %261, %49
  %265 = add nuw nsw i64 %50, 1
  %266 = icmp eq i64 %265, %47
  br i1 %266, label %267, label %49

267:                                              ; preds = %264, %11
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @av1_cdef_filter_fb(i8*, i16*, i32, i16*, i32, i32, [16 x i32]* nocapture, i32*, [16 x i32]*, i32, %struct.cdef_list* nocapture readonly, i32, i32, i32, i32, i32) local_unnamed_addr #0 {
  %17 = shl i32 %12, %15
  %18 = shl i32 %13, %15
  %19 = icmp ne i32 %9, 0
  %20 = zext i1 %19 to i32
  %21 = sub nsw i32 %15, %20
  %22 = add nsw i32 %21, %14
  %23 = sub nsw i32 3, %4
  %24 = sub nsw i32 3, %5
  %25 = icmp ne i32* %7, null
  %26 = or i32 %17, %18
  %27 = icmp eq i32 %26, 0
  %28 = and i1 %25, %27
  br i1 %28, label %29, label %72

29:                                               ; preds = %16
  %30 = icmp sgt i32 %11, 0
  br i1 %30, label %31, label %273

31:                                               ; preds = %29
  %32 = shl i32 1, %24
  %33 = icmp eq i32 %24, 31
  %34 = add nsw i32 %24, %23
  %35 = zext i32 %23 to i64
  %36 = shl i64 2, %35
  %37 = sext i32 %32 to i64
  %38 = zext i32 %11 to i64
  br label %39

39:                                               ; preds = %54, %31
  %40 = phi i64 [ 0, %31 ], [ %55, %54 ]
  br i1 %33, label %54, label %41

41:                                               ; preds = %39
  %42 = getelementptr inbounds %struct.cdef_list, %struct.cdef_list* %10, i64 %40, i32 1
  %43 = load i8, i8* %42, align 1
  %44 = zext i8 %43 to i32
  %45 = getelementptr inbounds %struct.cdef_list, %struct.cdef_list* %10, i64 %40, i32 0
  %46 = load i8, i8* %45, align 1
  %47 = zext i8 %46 to i32
  %48 = trunc i64 %40 to i32
  %49 = shl i32 %48, %34
  %50 = shl i32 %47, %24
  %51 = shl i32 %44, %23
  %52 = sext i32 %50 to i64
  %53 = sext i32 %51 to i64
  br label %57

54:                                               ; preds = %57, %39
  %55 = add nuw nsw i64 %40, 1
  %56 = icmp eq i64 %55, %38
  br i1 %56, label %273, label %39

57:                                               ; preds = %41, %57
  %58 = phi i64 [ 0, %41 ], [ %70, %57 ]
  %59 = trunc i64 %58 to i32
  %60 = shl i32 %59, %23
  %61 = add nsw i32 %60, %49
  %62 = sext i32 %61 to i64
  %63 = getelementptr inbounds i16, i16* %1, i64 %62
  %64 = bitcast i16* %63 to i8*
  %65 = add nsw i64 %58, %52
  %66 = mul nsw i64 %65, 144
  %67 = add nsw i64 %66, %53
  %68 = getelementptr inbounds i16, i16* %3, i64 %67
  %69 = bitcast i16* %68 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 2 %64, i8* align 2 %69, i64 %36, i1 false)
  %70 = add nuw nsw i64 %58, 1
  %71 = icmp slt i64 %70, %37
  br i1 %71, label %57, label %54

72:                                               ; preds = %16
  switch i32 %9, label %157 [
    i32 0, label %73
    i32 1, label %101
  ]

73:                                               ; preds = %72
  br i1 %25, label %74, label %77

74:                                               ; preds = %73
  %75 = load i32, i32* %7, align 4
  %76 = icmp eq i32 %75, 0
  br i1 %76, label %77, label %157

77:                                               ; preds = %74, %73
  %78 = icmp sgt i32 %11, 0
  br i1 %78, label %79, label %99

79:                                               ; preds = %77
  %80 = zext i32 %11 to i64
  br label %81

81:                                               ; preds = %81, %79
  %82 = phi i64 [ 0, %79 ], [ %97, %81 ]
  %83 = getelementptr inbounds %struct.cdef_list, %struct.cdef_list* %10, i64 %82, i32 0
  %84 = load i8, i8* %83, align 1
  %85 = zext i8 %84 to i64
  %86 = getelementptr inbounds %struct.cdef_list, %struct.cdef_list* %10, i64 %82, i32 1
  %87 = load i8, i8* %86, align 1
  %88 = zext i8 %87 to i64
  %89 = load i32 (i16*, i32, i32*, i32)*, i32 (i16*, i32, i32*, i32)** @cdef_find_dir, align 8
  %90 = mul nuw nsw i64 %85, 1152
  %91 = shl nuw nsw i64 %88, 3
  %92 = add nuw nsw i64 %91, %90
  %93 = getelementptr inbounds i16, i16* %3, i64 %92
  %94 = getelementptr inbounds [16 x i32], [16 x i32]* %8, i64 %85, i64 %88
  %95 = tail call i32 %89(i16* %93, i32 144, i32* %94, i32 %15) #4
  %96 = getelementptr inbounds [16 x i32], [16 x i32]* %6, i64 %85, i64 %88
  store i32 %95, i32* %96, align 4
  %97 = add nuw nsw i64 %82, 1
  %98 = icmp eq i64 %97, %80
  br i1 %98, label %99, label %81

99:                                               ; preds = %81, %77
  br i1 %25, label %100, label %157

100:                                              ; preds = %99
  store i32 1, i32* %7, align 4
  br label %157

101:                                              ; preds = %72
  %102 = icmp ne i32 %4, %5
  %103 = icmp sgt i32 %11, 0
  %104 = and i1 %102, %103
  br i1 %104, label %105, label %157

105:                                              ; preds = %101
  %106 = icmp eq i32 %4, 0
  %107 = select i1 %106, i32* getelementptr inbounds ([8 x i32], [8 x i32]* @av1_cdef_filter_fb.conv440, i64 0, i64 0), i32* getelementptr inbounds ([8 x i32], [8 x i32]* @av1_cdef_filter_fb.conv422, i64 0, i64 0)
  %108 = sext i32 %11 to i64
  %109 = and i64 %108, 1
  %110 = icmp eq i32 %11, 1
  br i1 %110, label %142, label %111

111:                                              ; preds = %105
  %112 = sub nsw i64 %108, %109
  br label %113

113:                                              ; preds = %113, %111
  %114 = phi i64 [ 0, %111 ], [ %139, %113 ]
  %115 = phi i64 [ %112, %111 ], [ %140, %113 ]
  %116 = getelementptr inbounds %struct.cdef_list, %struct.cdef_list* %10, i64 %114, i32 0
  %117 = load i8, i8* %116, align 1
  %118 = getelementptr inbounds %struct.cdef_list, %struct.cdef_list* %10, i64 %114, i32 1
  %119 = load i8, i8* %118, align 1
  %120 = zext i8 %117 to i64
  %121 = zext i8 %119 to i64
  %122 = getelementptr inbounds [16 x i32], [16 x i32]* %6, i64 %120, i64 %121
  %123 = load i32, i32* %122, align 4
  %124 = sext i32 %123 to i64
  %125 = getelementptr inbounds i32, i32* %107, i64 %124
  %126 = load i32, i32* %125, align 4
  store i32 %126, i32* %122, align 4
  %127 = or i64 %114, 1
  %128 = getelementptr inbounds %struct.cdef_list, %struct.cdef_list* %10, i64 %127, i32 0
  %129 = load i8, i8* %128, align 1
  %130 = getelementptr inbounds %struct.cdef_list, %struct.cdef_list* %10, i64 %127, i32 1
  %131 = load i8, i8* %130, align 1
  %132 = zext i8 %129 to i64
  %133 = zext i8 %131 to i64
  %134 = getelementptr inbounds [16 x i32], [16 x i32]* %6, i64 %132, i64 %133
  %135 = load i32, i32* %134, align 4
  %136 = sext i32 %135 to i64
  %137 = getelementptr inbounds i32, i32* %107, i64 %136
  %138 = load i32, i32* %137, align 4
  store i32 %138, i32* %134, align 4
  %139 = add nuw nsw i64 %114, 2
  %140 = add i64 %115, -2
  %141 = icmp eq i64 %140, 0
  br i1 %141, label %142, label %113

142:                                              ; preds = %113, %105
  %143 = phi i64 [ 0, %105 ], [ %139, %113 ]
  %144 = icmp eq i64 %109, 0
  br i1 %144, label %157, label %145

145:                                              ; preds = %142
  %146 = getelementptr inbounds %struct.cdef_list, %struct.cdef_list* %10, i64 %143, i32 0
  %147 = load i8, i8* %146, align 1
  %148 = getelementptr inbounds %struct.cdef_list, %struct.cdef_list* %10, i64 %143, i32 1
  %149 = load i8, i8* %148, align 1
  %150 = zext i8 %147 to i64
  %151 = zext i8 %149 to i64
  %152 = getelementptr inbounds [16 x i32], [16 x i32]* %6, i64 %150, i64 %151
  %153 = load i32, i32* %152, align 4
  %154 = sext i32 %153 to i64
  %155 = getelementptr inbounds i32, i32* %107, i64 %154
  %156 = load i32, i32* %155, align 4
  store i32 %156, i32* %152, align 4
  br label %157

157:                                              ; preds = %145, %142, %99, %100, %101, %74, %72
  %158 = icmp eq i32 %5, 0
  %159 = icmp ne i32 %4, 0
  %160 = select i1 %159, i32 0, i32 2
  %161 = select i1 %159, i32 1, i32 3
  %162 = select i1 %158, i32 %161, i32 %160
  %163 = icmp sgt i32 %11, 0
  br i1 %163, label %164, label %273

164:                                              ; preds = %157
  %165 = icmp eq i8* %0, null
  %166 = icmp eq i32 %17, 0
  %167 = add nsw i32 %24, %23
  %168 = shl i32 1, %23
  %169 = select i1 %25, i32 %168, i32 %2
  %170 = zext i32 %11 to i64
  br label %171

171:                                              ; preds = %270, %164
  %172 = phi i64 [ 0, %164 ], [ %271, %270 ]
  %173 = getelementptr inbounds %struct.cdef_list, %struct.cdef_list* %10, i64 %172, i32 0
  %174 = load i8, i8* %173, align 1
  %175 = zext i8 %174 to i32
  %176 = getelementptr inbounds %struct.cdef_list, %struct.cdef_list* %10, i64 %172, i32 1
  %177 = load i8, i8* %176, align 1
  %178 = zext i8 %177 to i32
  %179 = load void (i8*, i16*, i32, i16*, i32, i32, i32, i32, i32, i32, i32)*, void (i8*, i16*, i32, i16*, i32, i32, i32, i32, i32, i32, i32)** @cdef_filter_block, align 8
  br i1 %165, label %221, label %180

180:                                              ; preds = %171
  %181 = shl i32 %175, %24
  %182 = mul nsw i32 %181, %2
  %183 = shl i32 %178, %23
  %184 = add nsw i32 %182, %183
  %185 = sext i32 %184 to i64
  %186 = getelementptr inbounds i8, i8* %0, i64 %185
  %187 = mul nuw nsw i32 %175, 144
  %188 = shl i32 %187, %24
  %189 = add nsw i32 %188, %183
  %190 = sext i32 %189 to i64
  %191 = getelementptr inbounds i16, i16* %3, i64 %190
  br i1 %19, label %212, label %192

192:                                              ; preds = %180
  %193 = zext i8 %174 to i64
  %194 = zext i8 %177 to i64
  %195 = getelementptr inbounds [16 x i32], [16 x i32]* %8, i64 %193, i64 %194
  %196 = load i32, i32* %195, align 4
  %197 = ashr i32 %196, 6
  %198 = icmp eq i32 %197, 0
  br i1 %198, label %205, label %199

199:                                              ; preds = %192
  %200 = tail call i32 @llvm.ctlz.i32(i32 %197, i1 true) #4, !range !2
  %201 = xor i32 %200, 31
  %202 = icmp ult i32 %201, 12
  %203 = add nuw nsw i32 %201, 4
  %204 = select i1 %202, i32 %203, i32 16
  br label %205

205:                                              ; preds = %199, %192
  %206 = phi i32 [ 4, %192 ], [ %204, %199 ]
  %207 = icmp eq i32 %196, 0
  br i1 %207, label %212, label %208

208:                                              ; preds = %205
  %209 = mul nsw i32 %206, %17
  %210 = add nsw i32 %209, 8
  %211 = ashr i32 %210, 4
  br label %212

212:                                              ; preds = %208, %205, %180
  %213 = phi i32 [ %17, %180 ], [ %211, %208 ], [ 0, %205 ]
  br i1 %166, label %219, label %214

214:                                              ; preds = %212
  %215 = zext i8 %174 to i64
  %216 = zext i8 %177 to i64
  %217 = getelementptr inbounds [16 x i32], [16 x i32]* %6, i64 %215, i64 %216
  %218 = load i32, i32* %217, align 4
  br label %219

219:                                              ; preds = %212, %214
  %220 = phi i32 [ %218, %214 ], [ 0, %212 ]
  tail call void %179(i8* %186, i16* null, i32 %2, i16* %191, i32 %213, i32 %18, i32 %220, i32 %22, i32 %22, i32 %162, i32 %15) #4
  br label %270

221:                                              ; preds = %171
  br i1 %25, label %222, label %226

222:                                              ; preds = %221
  %223 = trunc i64 %172 to i32
  %224 = shl i32 %223, %167
  %225 = shl i32 %178, %23
  br label %231

226:                                              ; preds = %221
  %227 = shl i32 %175, %24
  %228 = mul nsw i32 %227, %2
  %229 = shl i32 %178, %23
  %230 = add nsw i32 %228, %229
  br label %231

231:                                              ; preds = %226, %222
  %232 = phi i32 [ %229, %226 ], [ %225, %222 ]
  %233 = phi i32 [ %230, %226 ], [ %224, %222 ]
  %234 = sext i32 %233 to i64
  %235 = getelementptr inbounds i16, i16* %1, i64 %234
  %236 = mul nuw nsw i32 %175, 144
  %237 = shl i32 %236, %24
  %238 = add nsw i32 %237, %232
  %239 = sext i32 %238 to i64
  %240 = getelementptr inbounds i16, i16* %3, i64 %239
  br i1 %19, label %261, label %241

241:                                              ; preds = %231
  %242 = zext i8 %174 to i64
  %243 = zext i8 %177 to i64
  %244 = getelementptr inbounds [16 x i32], [16 x i32]* %8, i64 %242, i64 %243
  %245 = load i32, i32* %244, align 4
  %246 = ashr i32 %245, 6
  %247 = icmp eq i32 %246, 0
  br i1 %247, label %254, label %248

248:                                              ; preds = %241
  %249 = tail call i32 @llvm.ctlz.i32(i32 %246, i1 true) #4, !range !2
  %250 = xor i32 %249, 31
  %251 = icmp ult i32 %250, 12
  %252 = add nuw nsw i32 %250, 4
  %253 = select i1 %251, i32 %252, i32 16
  br label %254

254:                                              ; preds = %248, %241
  %255 = phi i32 [ 4, %241 ], [ %253, %248 ]
  %256 = icmp eq i32 %245, 0
  br i1 %256, label %261, label %257

257:                                              ; preds = %254
  %258 = mul nsw i32 %255, %17
  %259 = add nsw i32 %258, 8
  %260 = ashr i32 %259, 4
  br label %261

261:                                              ; preds = %257, %254, %231
  %262 = phi i32 [ %17, %231 ], [ %260, %257 ], [ 0, %254 ]
  br i1 %166, label %268, label %263

263:                                              ; preds = %261
  %264 = zext i8 %174 to i64
  %265 = zext i8 %177 to i64
  %266 = getelementptr inbounds [16 x i32], [16 x i32]* %6, i64 %264, i64 %265
  %267 = load i32, i32* %266, align 4
  br label %268

268:                                              ; preds = %261, %263
  %269 = phi i32 [ %267, %263 ], [ 0, %261 ]
  tail call void %179(i8* null, i16* %235, i32 %169, i16* %240, i32 %262, i32 %18, i32 %269, i32 %22, i32 %22, i32 %162, i32 %15) #4
  br label %270

270:                                              ; preds = %219, %268
  %271 = add nuw nsw i64 %172, 1
  %272 = icmp eq i64 %271, %170
  br i1 %272, label %273, label %171

273:                                              ; preds = %270, %54, %157, %29
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #1

; Function Attrs: nounwind readnone speculatable
declare i32 @llvm.ctlz.i32(i32, i1 immarg) #3

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { nofree nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind readnone speculatable }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{i32 0, i32 33}
