; ModuleID = '../../third_party/opus/src/celt/quant_bands.c'
source_filename = "../../third_party/opus/src/celt/quant_bands.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"
module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"
module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%struct.OpusCustomMode = type { i32, i32, i32, i32, [4 x float], i16*, i32, i32, i32, i32, i8*, i16*, float*, %struct.mdct_lookup, %struct.PulseCache }
%struct.mdct_lookup = type { i32, i32, [4 x %struct.kiss_fft_state*], float* }
%struct.kiss_fft_state = type { i32, float, i32, [16 x i16], i16*, %struct.kiss_twiddle_cpx*, %struct.arch_fft_state* }
%struct.kiss_twiddle_cpx = type { float, float }
%struct.arch_fft_state = type { i32, i8* }
%struct.PulseCache = type { i32, i16*, i8*, i8* }
%struct.ec_ctx = type { i8*, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }

@eMeans = hidden local_unnamed_addr constant [25 x float] [float 6.437500e+00, float 6.250000e+00, float 5.750000e+00, float 5.312500e+00, float 5.062500e+00, float 4.812500e+00, float 4.500000e+00, float 4.375000e+00, float 4.875000e+00, float 4.687500e+00, float 4.562500e+00, float 4.437500e+00, float 4.875000e+00, float 4.625000e+00, float 4.312500e+00, float 4.500000e+00, float 4.375000e+00, float 4.625000e+00, float 4.750000e+00, float 4.437500e+00, float 3.750000e+00, float 3.750000e+00, float 3.750000e+00, float 3.750000e+00, float 3.750000e+00], align 16
@e_prob_model = internal constant [4 x [2 x [42 x i8]]] [[2 x [42 x i8]] [[42 x i8] c"H\7FA\81B\80A\80@\80>\80@\80@\80\5CN\5CO\5CNZOt)s(r(\84\1A\84\1A\91\11\A1\0C\B0\0A\B1\0B", [42 x i8] c"\18\B30\8A6\876\845\868\857\847\84=rF`JXKXWJYB[Cd;l2x(z%a+N2"], [2 x [42 x i8]] [[42 x i8] c"SNTQXKVJWGZI]J]Jm(r$u\22u\22\8F\11\91\12\92\13\A2\0C\A5\0A\B2\07\BD\06\BE\08\B1\09", [42 x i8] c"\17\B26s?fBbEcJYG[I[NYVP\5CB]@f;g<h<u4{,\8A#\85\1Fa&M-"], [2 x [42 x i8]] [[42 x i8] c"=Z]<i*k)n-t&q&p&|\1A\84\1B\88\13\8C\14\9B\0E\9F\10\9E\12\AA\0D\B1\0A\BB\08\C0\06\AF\09\9F\0A", [42 x i8] c"\15\B2;nGVKUTS[BXIWH\5CKbHi:k6s4r7p8\813\84(\96!\8C\1Db#M*"], [2 x [42 x i8]] [[42 x i8] c"*y`Bl+o(u,{ x$w!\7F!\86\22\8B\15\93\17\98\14\9E\19\9A\1A\A6\15\AD\10\B8\0D\B8\0A\96\0D\8B\0F", [42 x i8] c"\16\B2?rJRTS\5CRg>`H`CeIkHq7v4}4v4u7\871\89'\9D \91\1Da!M("]], align 16
@pred_coef = internal unnamed_addr constant [4 x float] [float 0x3FECC00000000000, float 7.968750e-01, float 0x3FE4C00000000000, float 5.000000e-01], align 16
@beta_coef = internal unnamed_addr constant [4 x float] [float 0x3FED70C000000000, float 0x3FE5C28000000000, float 0x3FD7AE0000000000, float 0x3FC99A0000000000], align 16
@small_energy_icdf = internal constant [3 x i8] c"\02\01\00", align 1

; Function Attrs: nounwind ssp uwtable
define hidden void @quant_coarse_energy(%struct.OpusCustomMode* nocapture readonly, i32, i32, i32, float* nocapture readonly, float* nocapture, i32, float* nocapture, %struct.ec_ctx*, i32, i32, i32, i32, float* nocapture, i32, i32, i32) local_unnamed_addr #0 {
  %18 = alloca [28 x i8], align 8
  %19 = alloca [24 x i8], align 8
  %20 = alloca { i32, i32, i32, i32, i32 }, align 8
  %21 = alloca [24 x i8], align 8
  %22 = getelementptr inbounds [28 x i8], [28 x i8]* %18, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 28, i8* nonnull %22)
  %23 = getelementptr inbounds [24 x i8], [24 x i8]* %19, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %23)
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %22, i8 -86, i64 28, i1 false)
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %23, i8 -86, i64 24, i1 false)
  %24 = icmp eq i32 %12, 0
  br i1 %24, label %25, label %38

25:                                               ; preds = %17
  %26 = icmp eq i32 %14, 0
  br i1 %26, label %27, label %38

27:                                               ; preds = %25
  %28 = load float, float* %13, align 4
  %29 = sub nsw i32 %2, %1
  %30 = shl i32 %29, 1
  %31 = mul i32 %30, %9
  %32 = sitofp i32 %31 to float
  %33 = fcmp ogt float %28, %32
  br i1 %33, label %34, label %38

34:                                               ; preds = %27
  %35 = mul nsw i32 %29, %9
  %36 = icmp slt i32 %35, %11
  %37 = zext i1 %36 to i32
  br label %38

38:                                               ; preds = %25, %17, %27, %34
  %39 = phi i32 [ 1, %17 ], [ 0, %27 ], [ 0, %25 ], [ %37, %34 ]
  %40 = uitofp i32 %6 to float
  %41 = load float, float* %13, align 4
  %42 = fmul float %41, %40
  %43 = sitofp i32 %15 to float
  %44 = fmul float %42, %43
  %45 = shl nsw i32 %9, 9
  %46 = sitofp i32 %45 to float
  %47 = fdiv float %44, %46
  %48 = fptosi float %47 to i32
  %49 = getelementptr inbounds %struct.OpusCustomMode, %struct.OpusCustomMode* %0, i64 0, i32 2
  %50 = load i32, i32* %49, align 8
  %51 = icmp slt i32 %1, %3
  br i1 %51, label %52, label %107

52:                                               ; preds = %38
  %53 = sext i32 %1 to i64
  %54 = sext i32 %9 to i64
  %55 = sext i32 %50 to i64
  %56 = sext i32 %3 to i64
  %57 = sub nsw i64 %56, %53
  %58 = xor i64 %53, -1
  %59 = and i64 %57, 1
  %60 = icmp eq i64 %59, 0
  %61 = add nsw i64 %53, 1
  %62 = sub nsw i64 0, %56
  %63 = icmp eq i64 %58, %62
  br label %64

64:                                               ; preds = %103, %52
  %65 = phi i64 [ 0, %52 ], [ %105, %103 ]
  %66 = phi float [ 0.000000e+00, %52 ], [ %104, %103 ]
  %67 = mul nsw i64 %65, %55
  br i1 %60, label %77, label %68

68:                                               ; preds = %64
  %69 = add nsw i64 %67, %53
  %70 = getelementptr inbounds float, float* %4, i64 %69
  %71 = load float, float* %70, align 4
  %72 = getelementptr inbounds float, float* %5, i64 %69
  %73 = load float, float* %72, align 4
  %74 = fsub float %71, %73
  %75 = fmul float %74, %74
  %76 = fadd float %66, %75
  br label %77

77:                                               ; preds = %68, %64
  %78 = phi float [ %76, %68 ], [ undef, %64 ]
  %79 = phi i64 [ %61, %68 ], [ %53, %64 ]
  %80 = phi float [ %76, %68 ], [ %66, %64 ]
  br i1 %63, label %103, label %81

81:                                               ; preds = %77, %81
  %82 = phi i64 [ %101, %81 ], [ %79, %77 ]
  %83 = phi float [ %100, %81 ], [ %80, %77 ]
  %84 = add nsw i64 %82, %67
  %85 = getelementptr inbounds float, float* %4, i64 %84
  %86 = load float, float* %85, align 4
  %87 = getelementptr inbounds float, float* %5, i64 %84
  %88 = load float, float* %87, align 4
  %89 = fsub float %86, %88
  %90 = fmul float %89, %89
  %91 = fadd float %83, %90
  %92 = add nsw i64 %82, 1
  %93 = add nsw i64 %92, %67
  %94 = getelementptr inbounds float, float* %4, i64 %93
  %95 = load float, float* %94, align 4
  %96 = getelementptr inbounds float, float* %5, i64 %93
  %97 = load float, float* %96, align 4
  %98 = fsub float %95, %97
  %99 = fmul float %98, %98
  %100 = fadd float %91, %99
  %101 = add nsw i64 %82, 2
  %102 = icmp eq i64 %101, %56
  br i1 %102, label %103, label %81

103:                                              ; preds = %81, %77
  %104 = phi float [ %78, %77 ], [ %100, %81 ]
  %105 = add nuw nsw i64 %65, 1
  %106 = icmp slt i64 %105, %54
  br i1 %106, label %64, label %107

107:                                              ; preds = %103, %38
  %108 = phi float [ 0.000000e+00, %38 ], [ %104, %103 ]
  %109 = fcmp ogt float %108, 2.000000e+02
  %110 = select i1 %109, float 2.000000e+02, float %108
  %111 = getelementptr %struct.ec_ctx, %struct.ec_ctx* %8, i64 0, i32 5
  %112 = load i32, i32* %111, align 8
  %113 = getelementptr %struct.ec_ctx, %struct.ec_ctx* %8, i64 0, i32 7
  %114 = load i32, i32* %113, align 8
  %115 = tail call i32 @llvm.ctlz.i32(i32 %114, i1 true) #6, !range !2
  %116 = or i32 %115, -32
  %117 = add i32 %116, %112
  %118 = add i32 %117, 3
  %119 = icmp ugt i32 %118, %6
  %120 = select i1 %119, i32 0, i32 %39
  %121 = select i1 %119, i32 0, i32 %14
  %122 = sub nsw i32 %2, %1
  %123 = icmp sgt i32 %122, 10
  br i1 %123, label %124, label %129

124:                                              ; preds = %107
  %125 = sitofp i32 %11 to float
  %126 = fmul float %125, 1.250000e-01
  %127 = fcmp ogt float %126, 1.600000e+01
  %128 = select i1 %127, float 1.600000e+01, float %126
  br label %129

129:                                              ; preds = %124, %107
  %130 = phi float [ %128, %124 ], [ 1.600000e+01, %107 ]
  %131 = icmp eq i32 %16, 0
  %132 = select i1 %131, float %130, float 3.000000e+00
  %133 = bitcast %struct.ec_ctx* %8 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %22, i8* align 8 %133, i64 28, i1 false)
  %134 = getelementptr inbounds %struct.ec_ctx, %struct.ec_ctx* %8, i64 0, i32 6
  %135 = load i32, i32* %134, align 4
  %136 = bitcast i32* %113 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %23, i8* align 8 %136, i64 24, i1 false)
  %137 = mul nsw i32 %50, %9
  %138 = sext i32 %137 to i64
  %139 = shl nsw i64 %138, 2
  %140 = alloca float, i64 %138, align 16
  %141 = bitcast float* %140 to i8*
  %142 = alloca float, i64 %138, align 16
  %143 = bitcast float* %142 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %143, i8 -86, i64 %139, i1 false)
  %144 = bitcast float* %5 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 16 %141, i8* align 4 %144, i64 %139, i1 false)
  %145 = icmp eq i32 %121, 0
  %146 = icmp eq i32 %120, 0
  %147 = or i32 %121, %120
  %148 = icmp eq i32 %147, 0
  br i1 %148, label %153, label %149

149:                                              ; preds = %129
  %150 = sext i32 %10 to i64
  %151 = getelementptr inbounds [4 x [2 x [42 x i8]]], [4 x [2 x [42 x i8]]]* @e_prob_model, i64 0, i64 %150, i64 1, i64 0
  %152 = call fastcc i32 @quant_coarse_energy_impl(%struct.OpusCustomMode* %0, i32 %1, i32 %2, float* %4, float* nonnull %140, i32 %6, i32 %117, i8* %151, float* nonnull %142, %struct.ec_ctx* %8, i32 %9, i32 %10, i32 1, float %132, i32 %16)
  br label %153

153:                                              ; preds = %129, %149
  %154 = phi i32 [ %152, %149 ], [ 0, %129 ]
  br i1 %146, label %155, label %180

155:                                              ; preds = %153
  %156 = bitcast { i32, i32, i32, i32, i32 }* %20 to i8*
  call void @llvm.lifetime.start.p0i8(i64 20, i8* nonnull %156)
  %157 = getelementptr inbounds [24 x i8], [24 x i8]* %21, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %157)
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %156, i8 -86, i64 20, i1 false)
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %157, i8 -86, i64 24, i1 false)
  %158 = tail call i32 @ec_tell_frac(%struct.ec_ctx* %8) #6
  %159 = getelementptr inbounds %struct.ec_ctx, %struct.ec_ctx* %8, i64 0, i32 0
  %160 = load i8*, i8** %159, align 8
  %161 = getelementptr inbounds %struct.ec_ctx, %struct.ec_ctx* %8, i64 0, i32 1
  %162 = bitcast i32* %161 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %156, i8* align 8 %162, i64 20, i1 false)
  %163 = load i32, i32* %134, align 4
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %157, i8* align 8 %136, i64 24, i1 false)
  %164 = zext i32 %135 to i64
  %165 = getelementptr inbounds i8, i8* %160, i64 %164
  %166 = sub i32 %163, %135
  %167 = zext i32 %166 to i64
  %168 = alloca i8, i64 %167, align 16
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 16 %168, i8* align 1 %165, i64 %167, i1 false)
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %133, i8* nonnull align 8 %22, i64 28, i1 false)
  store i32 %135, i32* %134, align 4
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %136, i8* nonnull align 8 %23, i64 24, i1 false)
  %169 = sext i32 %10 to i64
  %170 = getelementptr inbounds [4 x [2 x [42 x i8]]], [4 x [2 x [42 x i8]]]* @e_prob_model, i64 0, i64 %169, i64 0, i64 0
  %171 = tail call fastcc i32 @quant_coarse_energy_impl(%struct.OpusCustomMode* %0, i32 %1, i32 %2, float* %4, float* %5, i32 %6, i32 %117, i8* %170, float* %7, %struct.ec_ctx* %8, i32 %9, i32 %10, i32 0, float %132, i32 %16)
  br i1 %145, label %200, label %172

172:                                              ; preds = %155
  %173 = icmp slt i32 %154, %171
  br i1 %173, label %190, label %174

174:                                              ; preds = %172
  %175 = icmp eq i32 %154, %171
  br i1 %175, label %176, label %200

176:                                              ; preds = %174
  %177 = tail call i32 @ec_tell_frac(%struct.ec_ctx* %8) #6
  %178 = add nsw i32 %177, %48
  %179 = icmp sgt i32 %178, %158
  br i1 %179, label %190, label %200

180:                                              ; preds = %153
  %181 = load i32, i32* %49, align 8
  %182 = mul nsw i32 %181, %9
  %183 = sext i32 %182 to i64
  %184 = shl nsw i64 %183, 2
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %144, i8* nonnull align 16 %141, i64 %184, i1 false)
  %185 = bitcast float* %7 to i8*
  %186 = load i32, i32* %49, align 8
  %187 = mul nsw i32 %186, %9
  %188 = sext i32 %187 to i64
  %189 = shl nsw i64 %188, 2
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %185, i8* nonnull align 16 %143, i64 %189, i1 false)
  br label %207

190:                                              ; preds = %172, %176
  store i8* %160, i8** %159, align 8
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %162, i8* nonnull align 8 %156, i64 20, i1 false)
  store i32 %163, i32* %134, align 4
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %136, i8* nonnull align 8 %157, i64 24, i1 false)
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %165, i8* nonnull align 16 %168, i64 %167, i1 false)
  %191 = load i32, i32* %49, align 8
  %192 = mul nsw i32 %191, %9
  %193 = sext i32 %192 to i64
  %194 = shl nsw i64 %193, 2
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %144, i8* nonnull align 16 %141, i64 %194, i1 false)
  %195 = bitcast float* %7 to i8*
  %196 = load i32, i32* %49, align 8
  %197 = mul nsw i32 %196, %9
  %198 = sext i32 %197 to i64
  %199 = shl nsw i64 %198, 2
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %195, i8* nonnull align 16 %143, i64 %199, i1 false)
  call void @llvm.lifetime.end.p0i8(i64 20, i8* nonnull %156)
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %157)
  br label %207

200:                                              ; preds = %176, %174, %155
  call void @llvm.lifetime.end.p0i8(i64 20, i8* nonnull %156)
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %157)
  %201 = getelementptr inbounds [4 x float], [4 x float]* @pred_coef, i64 0, i64 %169
  %202 = load float, float* %201, align 4
  %203 = fmul float %202, %202
  %204 = load float, float* %13, align 4
  %205 = fmul float %203, %204
  %206 = fadd float %110, %205
  br label %207

207:                                              ; preds = %190, %180, %200
  %208 = phi float [ %206, %200 ], [ %110, %190 ], [ %110, %180 ]
  store float %208, float* %13, align 4
  call void @llvm.lifetime.end.p0i8(i64 28, i8* nonnull %22)
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %23)
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #1

; Function Attrs: nounwind ssp uwtable
define internal fastcc i32 @quant_coarse_energy_impl(%struct.OpusCustomMode* nocapture readonly, i32, i32, float* nocapture readonly, float* nocapture, i32, i32, i8* nocapture readonly, float* nocapture, %struct.ec_ctx*, i32, i32, i32, float, i32) unnamed_addr #0 {
  %16 = alloca i64, align 8
  %17 = bitcast i64* %16 to [2 x float]*
  %18 = alloca i32, align 4
  %19 = bitcast i64* %16 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %19) #6
  store i64 0, i64* %16, align 8
  %20 = add nsw i32 %6, 3
  %21 = icmp sgt i32 %20, %5
  br i1 %21, label %23, label %22

22:                                               ; preds = %15
  tail call void @ec_enc_bit_logp(%struct.ec_ctx* %9, i32 %12, i32 3) #6
  br label %23

23:                                               ; preds = %15, %22
  %24 = icmp eq i32 %12, 0
  br i1 %24, label %25, label %31

25:                                               ; preds = %23
  %26 = sext i32 %11 to i64
  %27 = getelementptr inbounds [4 x float], [4 x float]* @beta_coef, i64 0, i64 %26
  %28 = load float, float* %27, align 4
  %29 = getelementptr inbounds [4 x float], [4 x float]* @pred_coef, i64 0, i64 %26
  %30 = load float, float* %29, align 4
  br label %31

31:                                               ; preds = %23, %25
  %32 = phi float [ %30, %25 ], [ 0.000000e+00, %23 ]
  %33 = phi float [ %28, %25 ], [ 0x3FC3330000000000, %23 ]
  %34 = icmp slt i32 %1, %2
  br i1 %34, label %35, label %172

35:                                               ; preds = %31
  %36 = bitcast i32* %18 to i8*
  %37 = getelementptr inbounds %struct.OpusCustomMode, %struct.OpusCustomMode* %0, i64 0, i32 2
  %38 = getelementptr %struct.ec_ctx, %struct.ec_ctx* %9, i64 0, i32 5
  %39 = getelementptr %struct.ec_ctx, %struct.ec_ctx* %9, i64 0, i32 7
  %40 = mul nsw i32 %10, 3
  %41 = icmp ne i32 %14, 0
  %42 = sext i32 %10 to i64
  br label %43

43:                                               ; preds = %169, %35
  %44 = phi i32 [ 0, %35 ], [ %156, %169 ]
  %45 = phi i32 [ %1, %35 ], [ %170, %169 ]
  %46 = sub nsw i32 %2, %45
  %47 = mul nsw i32 %40, %46
  %48 = icmp ne i32 %45, %1
  %49 = icmp sgt i32 %45, 1
  %50 = and i1 %41, %49
  %51 = icmp slt i32 %45, 20
  %52 = select i1 %51, i32 %45, i32 20
  %53 = shl nsw i32 %52, 1
  %54 = sext i32 %53 to i64
  %55 = getelementptr inbounds i8, i8* %7, i64 %54
  %56 = or i32 %53, 1
  %57 = sext i32 %56 to i64
  %58 = getelementptr inbounds i8, i8* %7, i64 %57
  br label %59

59:                                               ; preds = %43, %143
  %60 = phi i64 [ 0, %43 ], [ %167, %143 ]
  %61 = phi i32 [ %44, %43 ], [ %156, %143 ]
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %36) #6
  store i32 -1431655766, i32* %18, align 4
  %62 = load i32, i32* %37, align 8
  %63 = trunc i64 %60 to i32
  %64 = mul nsw i32 %62, %63
  %65 = add nsw i32 %64, %45
  %66 = sext i32 %65 to i64
  %67 = getelementptr inbounds float, float* %3, i64 %66
  %68 = load float, float* %67, align 4
  %69 = getelementptr inbounds float, float* %4, i64 %66
  %70 = load float, float* %69, align 4
  %71 = fcmp olt float %70, -9.000000e+00
  %72 = select i1 %71, float -9.000000e+00, float %70
  %73 = fmul float %32, %72
  %74 = fsub float %68, %73
  %75 = getelementptr inbounds [2 x float], [2 x float]* %17, i64 0, i64 %60
  %76 = load float, float* %75, align 4
  %77 = fsub float %74, %76
  %78 = fadd float %77, 5.000000e-01
  %79 = call float @llvm.floor.f32(float %78)
  %80 = fptosi float %79 to i32
  %81 = fcmp olt float %70, -2.800000e+01
  %82 = select i1 %81, float -2.800000e+01, float %70
  %83 = fsub float %82, %13
  %84 = icmp slt i32 %80, 0
  %85 = fcmp olt float %68, %83
  %86 = and i1 %85, %84
  br i1 %86, label %87, label %93

87:                                               ; preds = %59
  %88 = fsub float %83, %68
  %89 = fptosi float %88 to i32
  %90 = add nsw i32 %80, %89
  %91 = icmp slt i32 %90, 0
  %92 = select i1 %91, i32 %90, i32 0
  br label %93

93:                                               ; preds = %87, %59
  %94 = phi i32 [ %92, %87 ], [ %80, %59 ]
  store i32 %94, i32* %18, align 4
  %95 = load i32, i32* %38, align 8
  %96 = load i32, i32* %39, align 8
  %97 = call i32 @llvm.ctlz.i32(i32 %96, i1 true) #6, !range !2
  %98 = or i32 %97, -32
  %99 = sub i32 %5, %95
  %100 = sub i32 %99, %98
  %101 = sub nsw i32 %100, %47
  %102 = icmp slt i32 %101, 24
  %103 = and i1 %48, %102
  br i1 %103, label %104, label %111

104:                                              ; preds = %93
  %105 = icmp slt i32 %94, 1
  %106 = select i1 %105, i32 %94, i32 1
  store i32 %106, i32* %18, align 4
  %107 = icmp slt i32 %101, 16
  br i1 %107, label %108, label %111

108:                                              ; preds = %104
  %109 = icmp sgt i32 %106, -1
  %110 = select i1 %109, i32 %106, i32 -1
  store i32 %110, i32* %18, align 4
  br label %111

111:                                              ; preds = %104, %108, %93
  %112 = phi i32 [ %106, %104 ], [ %110, %108 ], [ %94, %93 ]
  br i1 %50, label %113, label %116

113:                                              ; preds = %111
  %114 = icmp slt i32 %112, 0
  %115 = select i1 %114, i32 %112, i32 0
  store i32 %115, i32* %18, align 4
  br label %116

116:                                              ; preds = %113, %111
  %117 = phi i32 [ %115, %113 ], [ %112, %111 ]
  %118 = icmp sgt i32 %100, 14
  br i1 %118, label %119, label %126

119:                                              ; preds = %116
  %120 = load i8, i8* %55, align 1
  %121 = zext i8 %120 to i32
  %122 = shl nuw nsw i32 %121, 7
  %123 = load i8, i8* %58, align 1
  %124 = zext i8 %123 to i32
  %125 = shl nuw nsw i32 %124, 6
  call void @ec_laplace_encode(%struct.ec_ctx* %9, i32* nonnull %18, i32 %122, i32 %125) #6
  br label %143

126:                                              ; preds = %116
  %127 = icmp sgt i32 %100, 1
  br i1 %127, label %128, label %136

128:                                              ; preds = %126
  %129 = icmp slt i32 %117, 1
  %130 = select i1 %129, i32 %117, i32 1
  %131 = icmp sgt i32 %130, -1
  %132 = select i1 %131, i32 %130, i32 -1
  store i32 %132, i32* %18, align 4
  %133 = shl nsw i32 %132, 1
  %134 = ashr i32 %132, 31
  %135 = xor i32 %133, %134
  call void @ec_enc_icdf(%struct.ec_ctx* %9, i32 %135, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @small_energy_icdf, i64 0, i64 0), i32 2) #6
  br label %143

136:                                              ; preds = %126
  %137 = icmp eq i32 %100, 1
  br i1 %137, label %138, label %142

138:                                              ; preds = %136
  %139 = icmp slt i32 %117, 0
  %140 = select i1 %139, i32 %117, i32 0
  store i32 %140, i32* %18, align 4
  %141 = sub nsw i32 0, %140
  call void @ec_enc_bit_logp(%struct.ec_ctx* %9, i32 %141, i32 1) #6
  br label %143

142:                                              ; preds = %136
  store i32 -1, i32* %18, align 4
  br label %143

143:                                              ; preds = %128, %142, %138, %119
  %144 = load i32, i32* %18, align 4
  %145 = sitofp i32 %144 to float
  %146 = fsub float %77, %145
  %147 = load i32, i32* %37, align 8
  %148 = mul nsw i32 %147, %63
  %149 = add nsw i32 %148, %45
  %150 = sext i32 %149 to i64
  %151 = getelementptr inbounds float, float* %8, i64 %150
  store float %146, float* %151, align 4
  %152 = sub nsw i32 %94, %144
  %153 = icmp slt i32 %152, 0
  %154 = sub nsw i32 0, %152
  %155 = select i1 %153, i32 %154, i32 %152
  %156 = add nsw i32 %155, %61
  %157 = fadd float %76, %73
  %158 = fadd float %157, %145
  %159 = load i32, i32* %37, align 8
  %160 = mul nsw i32 %159, %63
  %161 = add nsw i32 %160, %45
  %162 = sext i32 %161 to i64
  %163 = getelementptr inbounds float, float* %4, i64 %162
  store float %158, float* %163, align 4
  %164 = fadd float %76, %145
  %165 = fmul float %33, %145
  %166 = fsub float %164, %165
  store float %166, float* %75, align 4
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %36) #6
  %167 = add nuw nsw i64 %60, 1
  %168 = icmp slt i64 %167, %42
  br i1 %168, label %59, label %169

169:                                              ; preds = %143
  %170 = add i32 %45, 1
  %171 = icmp eq i32 %170, %2
  br i1 %171, label %172, label %43

172:                                              ; preds = %169, %31
  %173 = phi i32 [ 0, %31 ], [ %156, %169 ]
  %174 = icmp eq i32 %14, 0
  %175 = select i1 %174, i32 %173, i32 0
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %19) #6
  ret i32 %175
}

declare i32 @ec_tell_frac(%struct.ec_ctx*) local_unnamed_addr #2

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nounwind ssp uwtable
define hidden void @quant_fine_energy(%struct.OpusCustomMode* nocapture readonly, i32, i32, float* nocapture, float* nocapture, i32* nocapture readonly, %struct.ec_ctx*, i32) local_unnamed_addr #0 {
  %9 = icmp slt i32 %1, %2
  br i1 %9, label %10, label %72

10:                                               ; preds = %8
  %11 = getelementptr inbounds %struct.OpusCustomMode, %struct.OpusCustomMode* %0, i64 0, i32 2
  %12 = sext i32 %1 to i64
  br label %13

13:                                               ; preds = %68, %10
  %14 = phi i64 [ %12, %10 ], [ %69, %68 ]
  %15 = getelementptr inbounds i32, i32* %5, i64 %14
  %16 = load i32, i32* %15, align 4
  %17 = icmp slt i32 %16, 1
  br i1 %17, label %68, label %18

18:                                               ; preds = %13
  %19 = shl i32 65536, %16
  %20 = ashr exact i32 %19, 16
  %21 = sitofp i32 %20 to float
  %22 = add nsw i32 %20, -1
  %23 = trunc i64 %14 to i32
  br label %24

24:                                               ; preds = %66, %18
  %25 = phi i32 [ %67, %66 ], [ %16, %18 ]
  %26 = phi i32 [ %64, %66 ], [ 0, %18 ]
  %27 = load i32, i32* %11, align 8
  %28 = mul nsw i32 %27, %26
  %29 = add nsw i32 %28, %23
  %30 = sext i32 %29 to i64
  %31 = getelementptr inbounds float, float* %4, i64 %30
  %32 = load float, float* %31, align 4
  %33 = fadd float %32, 5.000000e-01
  %34 = fmul float %33, %21
  %35 = tail call float @llvm.floor.f32(float %34)
  %36 = fptosi float %35 to i32
  %37 = icmp sgt i32 %20, %36
  %38 = select i1 %37, i32 %36, i32 %22
  %39 = icmp sgt i32 %38, 0
  %40 = select i1 %39, i32 %38, i32 0
  tail call void @ec_enc_bits(%struct.ec_ctx* %6, i32 %40, i32 %25) #6
  %41 = sitofp i32 %40 to float
  %42 = fadd float %41, 5.000000e-01
  %43 = load i32, i32* %15, align 4
  %44 = sub nsw i32 14, %43
  %45 = shl i32 1, %44
  %46 = sitofp i32 %45 to float
  %47 = fmul float %42, %46
  %48 = fmul float %47, 0x3F10000000000000
  %49 = fadd float %48, -5.000000e-01
  %50 = load i32, i32* %11, align 8
  %51 = mul nsw i32 %50, %26
  %52 = add nsw i32 %51, %23
  %53 = sext i32 %52 to i64
  %54 = getelementptr inbounds float, float* %3, i64 %53
  %55 = load float, float* %54, align 4
  %56 = fadd float %55, %49
  store float %56, float* %54, align 4
  %57 = load i32, i32* %11, align 8
  %58 = mul nsw i32 %57, %26
  %59 = add nsw i32 %58, %23
  %60 = sext i32 %59 to i64
  %61 = getelementptr inbounds float, float* %4, i64 %60
  %62 = load float, float* %61, align 4
  %63 = fsub float %62, %49
  store float %63, float* %61, align 4
  %64 = add nuw nsw i32 %26, 1
  %65 = icmp slt i32 %64, %7
  br i1 %65, label %66, label %68

66:                                               ; preds = %24
  %67 = load i32, i32* %15, align 4
  br label %24

68:                                               ; preds = %24, %13
  %69 = add nsw i64 %14, 1
  %70 = trunc i64 %69 to i32
  %71 = icmp eq i32 %70, %2
  br i1 %71, label %72, label %13

72:                                               ; preds = %68, %8
  ret void
}

declare void @ec_enc_bits(%struct.ec_ctx*, i32, i32) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden void @quant_energy_finalise(%struct.OpusCustomMode* nocapture readonly, i32, i32, float* nocapture, float* nocapture, i32* nocapture readonly, i32* nocapture readonly, i32, %struct.ec_ctx*, i32) local_unnamed_addr #0 {
  %11 = icmp slt i32 %1, %2
  %12 = getelementptr inbounds %struct.OpusCustomMode, %struct.OpusCustomMode* %0, i64 0, i32 2
  br i1 %11, label %13, label %74

13:                                               ; preds = %10
  %14 = sext i32 %1 to i64
  %15 = sext i32 %2 to i64
  %16 = icmp slt i32 %7, %9
  br i1 %16, label %71, label %17

17:                                               ; preds = %13, %65
  %18 = phi i64 [ %67, %65 ], [ %14, %13 ]
  %19 = phi i32 [ %66, %65 ], [ %7, %13 ]
  %20 = getelementptr inbounds i32, i32* %5, i64 %18
  %21 = load i32, i32* %20, align 4
  %22 = icmp sgt i32 %21, 7
  br i1 %22, label %65, label %23

23:                                               ; preds = %17
  %24 = getelementptr inbounds i32, i32* %6, i64 %18
  %25 = load i32, i32* %24, align 4
  %26 = icmp eq i32 %25, 0
  br i1 %26, label %27, label %65

27:                                               ; preds = %23
  %28 = trunc i64 %18 to i32
  br label %29

29:                                               ; preds = %27, %29
  %30 = phi i32 [ %63, %29 ], [ 0, %27 ]
  %31 = phi i32 [ %62, %29 ], [ %19, %27 ]
  %32 = load i32, i32* %12, align 8
  %33 = mul nsw i32 %32, %30
  %34 = add nsw i32 %33, %28
  %35 = sext i32 %34 to i64
  %36 = getelementptr inbounds float, float* %4, i64 %35
  %37 = load float, float* %36, align 4
  %38 = fcmp uge float %37, 0.000000e+00
  %39 = zext i1 %38 to i32
  tail call void @ec_enc_bits(%struct.ec_ctx* %8, i32 %39, i32 1) #6
  %40 = uitofp i1 %38 to float
  %41 = fadd float %40, -5.000000e-01
  %42 = load i32, i32* %20, align 4
  %43 = sub i32 13, %42
  %44 = shl i32 1, %43
  %45 = sitofp i32 %44 to float
  %46 = fmul float %41, %45
  %47 = fmul float %46, 0x3F10000000000000
  %48 = load i32, i32* %12, align 8
  %49 = mul nsw i32 %48, %30
  %50 = add nsw i32 %49, %28
  %51 = sext i32 %50 to i64
  %52 = getelementptr inbounds float, float* %3, i64 %51
  %53 = load float, float* %52, align 4
  %54 = fadd float %53, %47
  store float %54, float* %52, align 4
  %55 = load i32, i32* %12, align 8
  %56 = mul nsw i32 %55, %30
  %57 = add nsw i32 %56, %28
  %58 = sext i32 %57 to i64
  %59 = getelementptr inbounds float, float* %4, i64 %58
  %60 = load float, float* %59, align 4
  %61 = fsub float %60, %47
  store float %61, float* %59, align 4
  %62 = add nsw i32 %31, -1
  %63 = add nuw nsw i32 %30, 1
  %64 = icmp slt i32 %63, %9
  br i1 %64, label %29, label %65

65:                                               ; preds = %29, %23, %17
  %66 = phi i32 [ %19, %17 ], [ %19, %23 ], [ %62, %29 ]
  %67 = add nsw i64 %18, 1
  %68 = icmp sge i64 %67, %15
  %69 = icmp slt i32 %66, %9
  %70 = or i1 %68, %69
  br i1 %70, label %71, label %17

71:                                               ; preds = %65, %13
  %72 = phi i32 [ %7, %13 ], [ %66, %65 ]
  %73 = icmp slt i32 %72, %9
  br i1 %73, label %74, label %75

74:                                               ; preds = %123, %71, %10
  ret void

75:                                               ; preds = %71, %123
  %76 = phi i64 [ %125, %123 ], [ %14, %71 ]
  %77 = phi i32 [ %124, %123 ], [ %72, %71 ]
  %78 = getelementptr inbounds i32, i32* %5, i64 %76
  %79 = load i32, i32* %78, align 4
  %80 = icmp sgt i32 %79, 7
  br i1 %80, label %123, label %81

81:                                               ; preds = %75
  %82 = getelementptr inbounds i32, i32* %6, i64 %76
  %83 = load i32, i32* %82, align 4
  %84 = icmp eq i32 %83, 1
  br i1 %84, label %85, label %123

85:                                               ; preds = %81
  %86 = trunc i64 %76 to i32
  br label %87

87:                                               ; preds = %87, %85
  %88 = phi i32 [ %121, %87 ], [ 0, %85 ]
  %89 = phi i32 [ %120, %87 ], [ %77, %85 ]
  %90 = load i32, i32* %12, align 8
  %91 = mul nsw i32 %90, %88
  %92 = add nsw i32 %91, %86
  %93 = sext i32 %92 to i64
  %94 = getelementptr inbounds float, float* %4, i64 %93
  %95 = load float, float* %94, align 4
  %96 = fcmp uge float %95, 0.000000e+00
  %97 = zext i1 %96 to i32
  tail call void @ec_enc_bits(%struct.ec_ctx* %8, i32 %97, i32 1) #6
  %98 = uitofp i1 %96 to float
  %99 = fadd float %98, -5.000000e-01
  %100 = load i32, i32* %78, align 4
  %101 = sub i32 13, %100
  %102 = shl i32 1, %101
  %103 = sitofp i32 %102 to float
  %104 = fmul float %99, %103
  %105 = fmul float %104, 0x3F10000000000000
  %106 = load i32, i32* %12, align 8
  %107 = mul nsw i32 %106, %88
  %108 = add nsw i32 %107, %86
  %109 = sext i32 %108 to i64
  %110 = getelementptr inbounds float, float* %3, i64 %109
  %111 = load float, float* %110, align 4
  %112 = fadd float %111, %105
  store float %112, float* %110, align 4
  %113 = load i32, i32* %12, align 8
  %114 = mul nsw i32 %113, %88
  %115 = add nsw i32 %114, %86
  %116 = sext i32 %115 to i64
  %117 = getelementptr inbounds float, float* %4, i64 %116
  %118 = load float, float* %117, align 4
  %119 = fsub float %118, %105
  store float %119, float* %117, align 4
  %120 = add nsw i32 %89, -1
  %121 = add nuw nsw i32 %88, 1
  %122 = icmp slt i32 %121, %9
  br i1 %122, label %87, label %123

123:                                              ; preds = %87, %81, %75
  %124 = phi i32 [ %77, %75 ], [ %77, %81 ], [ %120, %87 ]
  %125 = add nsw i64 %76, 1
  %126 = icmp sge i64 %125, %15
  %127 = icmp slt i32 %124, %9
  %128 = or i1 %126, %127
  br i1 %128, label %74, label %75
}

; Function Attrs: nounwind ssp uwtable
define hidden void @unquant_coarse_energy(%struct.OpusCustomMode* nocapture readonly, i32, i32, float* nocapture, i32, %struct.ec_ctx*, i32, i32) local_unnamed_addr #0 {
  %9 = alloca i64, align 8
  %10 = bitcast i64* %9 to [2 x float]*
  %11 = sext i32 %7 to i64
  %12 = sext i32 %4 to i64
  %13 = bitcast i64* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %13) #6
  store i64 0, i64* %9, align 8
  %14 = icmp eq i32 %4, 0
  br i1 %14, label %15, label %20

15:                                               ; preds = %8
  %16 = getelementptr inbounds [4 x float], [4 x float]* @beta_coef, i64 0, i64 %11
  %17 = load float, float* %16, align 4
  %18 = getelementptr inbounds [4 x float], [4 x float]* @pred_coef, i64 0, i64 %11
  %19 = load float, float* %18, align 4
  br label %20

20:                                               ; preds = %8, %15
  %21 = phi float [ %19, %15 ], [ 0.000000e+00, %8 ]
  %22 = phi float [ %17, %15 ], [ 0x3FC3330000000000, %8 ]
  %23 = getelementptr inbounds %struct.ec_ctx, %struct.ec_ctx* %5, i64 0, i32 1
  %24 = load i32, i32* %23, align 8
  %25 = shl i32 %24, 3
  %26 = icmp slt i32 %1, %2
  br i1 %26, label %27, label %103

27:                                               ; preds = %20
  %28 = getelementptr %struct.ec_ctx, %struct.ec_ctx* %5, i64 0, i32 5
  %29 = getelementptr %struct.ec_ctx, %struct.ec_ctx* %5, i64 0, i32 7
  %30 = getelementptr inbounds %struct.OpusCustomMode, %struct.OpusCustomMode* %0, i64 0, i32 2
  %31 = sext i32 %6 to i64
  br label %32

32:                                               ; preds = %100, %27
  %33 = phi i32 [ %1, %27 ], [ %101, %100 ]
  %34 = icmp slt i32 %33, 20
  %35 = select i1 %34, i32 %33, i32 20
  %36 = shl nsw i32 %35, 1
  %37 = sext i32 %36 to i64
  %38 = getelementptr inbounds [4 x [2 x [42 x i8]]], [4 x [2 x [42 x i8]]]* @e_prob_model, i64 0, i64 %11, i64 %12, i64 %37
  %39 = or i32 %36, 1
  %40 = sext i32 %39 to i64
  %41 = getelementptr inbounds [4 x [2 x [42 x i8]]], [4 x [2 x [42 x i8]]]* @e_prob_model, i64 0, i64 %11, i64 %12, i64 %40
  br label %42

42:                                               ; preds = %32, %72
  %43 = phi i64 [ 0, %32 ], [ %98, %72 ]
  %44 = load i32, i32* %28, align 8
  %45 = load i32, i32* %29, align 8
  %46 = tail call i32 @llvm.ctlz.i32(i32 %45, i1 true) #6, !range !2
  %47 = or i32 %46, -32
  %48 = sub i32 %25, %44
  %49 = sub i32 %48, %47
  %50 = icmp sgt i32 %49, 14
  br i1 %50, label %51, label %59

51:                                               ; preds = %42
  %52 = load i8, i8* %38, align 2
  %53 = zext i8 %52 to i32
  %54 = shl nuw nsw i32 %53, 7
  %55 = load i8, i8* %41, align 1
  %56 = zext i8 %55 to i32
  %57 = shl nuw nsw i32 %56, 6
  %58 = tail call i32 @ec_laplace_decode(%struct.ec_ctx* %5, i32 %54, i32 %57) #6
  br label %72

59:                                               ; preds = %42
  %60 = icmp sgt i32 %49, 1
  br i1 %60, label %61, label %67

61:                                               ; preds = %59
  %62 = tail call i32 @ec_dec_icdf(%struct.ec_ctx* %5, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @small_energy_icdf, i64 0, i64 0), i32 2) #6
  %63 = ashr i32 %62, 1
  %64 = and i32 %62, 1
  %65 = sub nsw i32 0, %64
  %66 = xor i32 %63, %65
  br label %72

67:                                               ; preds = %59
  %68 = icmp eq i32 %49, 1
  br i1 %68, label %69, label %72

69:                                               ; preds = %67
  %70 = tail call i32 @ec_dec_bit_logp(%struct.ec_ctx* %5, i32 1) #6
  %71 = sub nsw i32 0, %70
  br label %72

72:                                               ; preds = %67, %61, %69, %51
  %73 = phi i32 [ %58, %51 ], [ %66, %61 ], [ %71, %69 ], [ -1, %67 ]
  %74 = sitofp i32 %73 to float
  %75 = load i32, i32* %30, align 8
  %76 = trunc i64 %43 to i32
  %77 = mul nsw i32 %75, %76
  %78 = add nsw i32 %77, %33
  %79 = sext i32 %78 to i64
  %80 = getelementptr inbounds float, float* %3, i64 %79
  %81 = load float, float* %80, align 4
  %82 = fcmp olt float %81, -9.000000e+00
  %83 = select i1 %82, float -9.000000e+00, float %81
  store float %83, float* %80, align 4
  %84 = load i32, i32* %30, align 8
  %85 = mul nsw i32 %84, %76
  %86 = add nsw i32 %85, %33
  %87 = sext i32 %86 to i64
  %88 = getelementptr inbounds float, float* %3, i64 %87
  %89 = load float, float* %88, align 4
  %90 = fmul float %21, %89
  %91 = getelementptr inbounds [2 x float], [2 x float]* %10, i64 0, i64 %43
  %92 = load float, float* %91, align 4
  %93 = fadd float %90, %92
  %94 = fadd float %93, %74
  store float %94, float* %88, align 4
  %95 = fadd float %92, %74
  %96 = fmul float %22, %74
  %97 = fsub float %95, %96
  store float %97, float* %91, align 4
  %98 = add nuw nsw i64 %43, 1
  %99 = icmp slt i64 %98, %31
  br i1 %99, label %42, label %100

100:                                              ; preds = %72
  %101 = add i32 %33, 1
  %102 = icmp eq i32 %101, %2
  br i1 %102, label %103, label %32

103:                                              ; preds = %100, %20
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %13) #6
  ret void
}

declare i32 @ec_laplace_decode(%struct.ec_ctx*, i32, i32) local_unnamed_addr #2

declare i32 @ec_dec_icdf(%struct.ec_ctx*, i8*, i32) local_unnamed_addr #2

declare i32 @ec_dec_bit_logp(%struct.ec_ctx*, i32) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden void @unquant_fine_energy(%struct.OpusCustomMode* nocapture readonly, i32, i32, float* nocapture, i32* nocapture readonly, %struct.ec_ctx*, i32) local_unnamed_addr #0 {
  %8 = icmp slt i32 %1, %2
  br i1 %8, label %9, label %47

9:                                                ; preds = %7
  %10 = getelementptr inbounds %struct.OpusCustomMode, %struct.OpusCustomMode* %0, i64 0, i32 2
  %11 = sext i32 %1 to i64
  br label %12

12:                                               ; preds = %43, %9
  %13 = phi i64 [ %11, %9 ], [ %44, %43 ]
  %14 = getelementptr inbounds i32, i32* %4, i64 %13
  %15 = load i32, i32* %14, align 4
  %16 = icmp slt i32 %15, 1
  br i1 %16, label %43, label %17

17:                                               ; preds = %12
  %18 = trunc i64 %13 to i32
  br label %19

19:                                               ; preds = %41, %17
  %20 = phi i32 [ %42, %41 ], [ %15, %17 ]
  %21 = phi i32 [ %39, %41 ], [ 0, %17 ]
  %22 = tail call i32 @ec_dec_bits(%struct.ec_ctx* %5, i32 %20) #6
  %23 = sitofp i32 %22 to float
  %24 = fadd float %23, 5.000000e-01
  %25 = load i32, i32* %14, align 4
  %26 = sub nsw i32 14, %25
  %27 = shl i32 1, %26
  %28 = sitofp i32 %27 to float
  %29 = fmul float %24, %28
  %30 = fmul float %29, 0x3F10000000000000
  %31 = fadd float %30, -5.000000e-01
  %32 = load i32, i32* %10, align 8
  %33 = mul nsw i32 %32, %21
  %34 = add nsw i32 %33, %18
  %35 = sext i32 %34 to i64
  %36 = getelementptr inbounds float, float* %3, i64 %35
  %37 = load float, float* %36, align 4
  %38 = fadd float %37, %31
  store float %38, float* %36, align 4
  %39 = add nuw nsw i32 %21, 1
  %40 = icmp slt i32 %39, %6
  br i1 %40, label %41, label %43

41:                                               ; preds = %19
  %42 = load i32, i32* %14, align 4
  br label %19

43:                                               ; preds = %19, %12
  %44 = add nsw i64 %13, 1
  %45 = trunc i64 %44 to i32
  %46 = icmp eq i32 %45, %2
  br i1 %46, label %47, label %12

47:                                               ; preds = %43, %7
  ret void
}

declare i32 @ec_dec_bits(%struct.ec_ctx*, i32) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden void @unquant_energy_finalise(%struct.OpusCustomMode* nocapture readonly, i32, i32, float* nocapture, i32* nocapture readonly, i32* nocapture readonly, i32, %struct.ec_ctx*, i32) local_unnamed_addr #0 {
  %10 = icmp slt i32 %1, %2
  %11 = getelementptr inbounds %struct.OpusCustomMode, %struct.OpusCustomMode* %0, i64 0, i32 2
  br i1 %10, label %12, label %59

12:                                               ; preds = %9
  %13 = sext i32 %1 to i64
  %14 = sext i32 %2 to i64
  %15 = icmp slt i32 %6, %8
  br i1 %15, label %56, label %16

16:                                               ; preds = %12, %50
  %17 = phi i64 [ %52, %50 ], [ %13, %12 ]
  %18 = phi i32 [ %51, %50 ], [ %6, %12 ]
  %19 = getelementptr inbounds i32, i32* %4, i64 %17
  %20 = load i32, i32* %19, align 4
  %21 = icmp sgt i32 %20, 7
  br i1 %21, label %50, label %22

22:                                               ; preds = %16
  %23 = getelementptr inbounds i32, i32* %5, i64 %17
  %24 = load i32, i32* %23, align 4
  %25 = icmp eq i32 %24, 0
  br i1 %25, label %26, label %50

26:                                               ; preds = %22
  %27 = trunc i64 %17 to i32
  br label %28

28:                                               ; preds = %26, %28
  %29 = phi i32 [ %48, %28 ], [ 0, %26 ]
  %30 = phi i32 [ %47, %28 ], [ %18, %26 ]
  %31 = tail call i32 @ec_dec_bits(%struct.ec_ctx* %7, i32 1) #6
  %32 = sitofp i32 %31 to float
  %33 = fadd float %32, -5.000000e-01
  %34 = load i32, i32* %19, align 4
  %35 = sub i32 13, %34
  %36 = shl i32 1, %35
  %37 = sitofp i32 %36 to float
  %38 = fmul float %33, %37
  %39 = fmul float %38, 0x3F10000000000000
  %40 = load i32, i32* %11, align 8
  %41 = mul nsw i32 %40, %29
  %42 = add nsw i32 %41, %27
  %43 = sext i32 %42 to i64
  %44 = getelementptr inbounds float, float* %3, i64 %43
  %45 = load float, float* %44, align 4
  %46 = fadd float %45, %39
  store float %46, float* %44, align 4
  %47 = add nsw i32 %30, -1
  %48 = add nuw nsw i32 %29, 1
  %49 = icmp slt i32 %48, %8
  br i1 %49, label %28, label %50

50:                                               ; preds = %28, %22, %16
  %51 = phi i32 [ %18, %16 ], [ %18, %22 ], [ %47, %28 ]
  %52 = add nsw i64 %17, 1
  %53 = icmp sge i64 %52, %14
  %54 = icmp slt i32 %51, %8
  %55 = or i1 %53, %54
  br i1 %55, label %56, label %16

56:                                               ; preds = %50, %12
  %57 = phi i32 [ %6, %12 ], [ %51, %50 ]
  %58 = icmp slt i32 %57, %8
  br i1 %58, label %59, label %60

59:                                               ; preds = %94, %56, %9
  ret void

60:                                               ; preds = %56, %94
  %61 = phi i64 [ %96, %94 ], [ %13, %56 ]
  %62 = phi i32 [ %95, %94 ], [ %57, %56 ]
  %63 = getelementptr inbounds i32, i32* %4, i64 %61
  %64 = load i32, i32* %63, align 4
  %65 = icmp sgt i32 %64, 7
  br i1 %65, label %94, label %66

66:                                               ; preds = %60
  %67 = getelementptr inbounds i32, i32* %5, i64 %61
  %68 = load i32, i32* %67, align 4
  %69 = icmp eq i32 %68, 1
  br i1 %69, label %70, label %94

70:                                               ; preds = %66
  %71 = trunc i64 %61 to i32
  br label %72

72:                                               ; preds = %72, %70
  %73 = phi i32 [ %92, %72 ], [ 0, %70 ]
  %74 = phi i32 [ %91, %72 ], [ %62, %70 ]
  %75 = tail call i32 @ec_dec_bits(%struct.ec_ctx* %7, i32 1) #6
  %76 = sitofp i32 %75 to float
  %77 = fadd float %76, -5.000000e-01
  %78 = load i32, i32* %63, align 4
  %79 = sub i32 13, %78
  %80 = shl i32 1, %79
  %81 = sitofp i32 %80 to float
  %82 = fmul float %77, %81
  %83 = fmul float %82, 0x3F10000000000000
  %84 = load i32, i32* %11, align 8
  %85 = mul nsw i32 %84, %73
  %86 = add nsw i32 %85, %71
  %87 = sext i32 %86 to i64
  %88 = getelementptr inbounds float, float* %3, i64 %87
  %89 = load float, float* %88, align 4
  %90 = fadd float %89, %83
  store float %90, float* %88, align 4
  %91 = add nsw i32 %74, -1
  %92 = add nuw nsw i32 %73, 1
  %93 = icmp slt i32 %92, %8
  br i1 %93, label %72, label %94

94:                                               ; preds = %72, %66, %60
  %95 = phi i32 [ %62, %60 ], [ %62, %66 ], [ %91, %72 ]
  %96 = add nsw i64 %61, 1
  %97 = icmp sge i64 %96, %14
  %98 = icmp slt i32 %95, %8
  %99 = or i1 %97, %98
  br i1 %99, label %59, label %60
}

; Function Attrs: nofree nounwind ssp uwtable
define hidden void @amp2Log2(%struct.OpusCustomMode* nocapture readonly, i32, i32, float* nocapture readonly, float* nocapture, i32) local_unnamed_addr #3 {
  %7 = icmp sgt i32 %1, 0
  %8 = getelementptr inbounds %struct.OpusCustomMode, %struct.OpusCustomMode* %0, i64 0, i32 2
  %9 = icmp sgt i32 %2, %1
  br i1 %7, label %10, label %72

10:                                               ; preds = %6
  %11 = zext i32 %1 to i64
  %12 = sub i32 %2, %1
  %13 = xor i32 %1, -1
  %14 = and i32 %12, 1
  %15 = icmp eq i32 %14, 0
  %16 = add nsw i32 %1, 1
  %17 = sub i32 0, %2
  %18 = icmp eq i32 %13, %17
  br label %19

19:                                               ; preds = %10, %21
  %20 = phi i32 [ %22, %21 ], [ 0, %10 ]
  br label %39

21:                                               ; preds = %70, %24, %62
  %22 = add nuw nsw i32 %20, 1
  %23 = icmp slt i32 %22, %5
  br i1 %23, label %19, label %109

24:                                               ; preds = %70, %24
  %25 = phi i32 [ %37, %24 ], [ %71, %70 ]
  %26 = load i32, i32* %8, align 8
  %27 = mul nsw i32 %26, %20
  %28 = add nsw i32 %27, %25
  %29 = sext i32 %28 to i64
  %30 = getelementptr inbounds float, float* %4, i64 %29
  store float -1.400000e+01, float* %30, align 4
  %31 = add nsw i32 %25, 1
  %32 = load i32, i32* %8, align 8
  %33 = mul nsw i32 %32, %20
  %34 = add nsw i32 %33, %31
  %35 = sext i32 %34 to i64
  %36 = getelementptr inbounds float, float* %4, i64 %35
  store float -1.400000e+01, float* %36, align 4
  %37 = add nsw i32 %25, 2
  %38 = icmp eq i32 %37, %2
  br i1 %38, label %21, label %24

39:                                               ; preds = %39, %19
  %40 = phi i64 [ 0, %19 ], [ %60, %39 ]
  %41 = load i32, i32* %8, align 8
  %42 = mul nsw i32 %41, %20
  %43 = trunc i64 %40 to i32
  %44 = add nsw i32 %42, %43
  %45 = sext i32 %44 to i64
  %46 = getelementptr inbounds float, float* %3, i64 %45
  %47 = load float, float* %46, align 4
  %48 = fpext float %47 to double
  %49 = tail call double @log(double %48) #6
  %50 = fmul double %49, 0x3FF71547652B82FE
  %51 = fptrunc double %50 to float
  %52 = getelementptr inbounds [25 x float], [25 x float]* @eMeans, i64 0, i64 %40
  %53 = load float, float* %52, align 4
  %54 = fsub float %51, %53
  %55 = load i32, i32* %8, align 8
  %56 = mul nsw i32 %55, %20
  %57 = add nsw i32 %56, %43
  %58 = sext i32 %57 to i64
  %59 = getelementptr inbounds float, float* %4, i64 %58
  store float %54, float* %59, align 4
  %60 = add nuw nsw i64 %40, 1
  %61 = icmp eq i64 %60, %11
  br i1 %61, label %62, label %39

62:                                               ; preds = %39
  br i1 %9, label %63, label %21

63:                                               ; preds = %62
  br i1 %15, label %70, label %64

64:                                               ; preds = %63
  %65 = load i32, i32* %8, align 8
  %66 = mul nsw i32 %65, %20
  %67 = add nsw i32 %66, %1
  %68 = sext i32 %67 to i64
  %69 = getelementptr inbounds float, float* %4, i64 %68
  store float -1.400000e+01, float* %69, align 4
  br label %70

70:                                               ; preds = %64, %63
  %71 = phi i32 [ %16, %64 ], [ %1, %63 ]
  br i1 %18, label %21, label %24

72:                                               ; preds = %6
  br i1 %9, label %73, label %109

73:                                               ; preds = %72
  %74 = sub i32 %2, %1
  %75 = xor i32 %1, -1
  %76 = and i32 %74, 1
  %77 = icmp eq i32 %76, 0
  %78 = add nsw i32 %1, 1
  %79 = sub i32 0, %2
  %80 = icmp eq i32 %75, %79
  br label %81

81:                                               ; preds = %73, %106
  %82 = phi i32 [ %107, %106 ], [ 0, %73 ]
  br i1 %77, label %89, label %83

83:                                               ; preds = %81
  %84 = load i32, i32* %8, align 8
  %85 = mul nsw i32 %84, %82
  %86 = add nsw i32 %85, %1
  %87 = sext i32 %86 to i64
  %88 = getelementptr inbounds float, float* %4, i64 %87
  store float -1.400000e+01, float* %88, align 4
  br label %89

89:                                               ; preds = %83, %81
  %90 = phi i32 [ %78, %83 ], [ %1, %81 ]
  br i1 %80, label %106, label %91

91:                                               ; preds = %89, %91
  %92 = phi i32 [ %104, %91 ], [ %90, %89 ]
  %93 = load i32, i32* %8, align 8
  %94 = mul nsw i32 %93, %82
  %95 = add nsw i32 %94, %92
  %96 = sext i32 %95 to i64
  %97 = getelementptr inbounds float, float* %4, i64 %96
  store float -1.400000e+01, float* %97, align 4
  %98 = add nsw i32 %92, 1
  %99 = load i32, i32* %8, align 8
  %100 = mul nsw i32 %99, %82
  %101 = add nsw i32 %100, %98
  %102 = sext i32 %101 to i64
  %103 = getelementptr inbounds float, float* %4, i64 %102
  store float -1.400000e+01, float* %103, align 4
  %104 = add nsw i32 %92, 2
  %105 = icmp eq i32 %104, %2
  br i1 %105, label %106, label %91

106:                                              ; preds = %91, %89
  %107 = add nuw nsw i32 %82, 1
  %108 = icmp slt i32 %107, %5
  br i1 %108, label %81, label %109

109:                                              ; preds = %106, %21, %72
  ret void
}

; Function Attrs: nofree nounwind
declare double @log(double) local_unnamed_addr #4

; Function Attrs: nounwind readnone speculatable
declare i32 @llvm.ctlz.i32(i32, i1 immarg) #5

declare void @ec_enc_bit_logp(%struct.ec_ctx*, i32, i32) local_unnamed_addr #2

declare void @ec_laplace_encode(%struct.ec_ctx*, i32*, i32, i32) local_unnamed_addr #2

declare void @ec_enc_icdf(%struct.ec_ctx*, i32, i8*, i32) local_unnamed_addr #2

; Function Attrs: nounwind readnone speculatable
declare float @llvm.floor.f32(float) #5

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nofree nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind readnone speculatable }
attributes #6 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{i32 0, i32 33}
