; ModuleID = '../../third_party/libvpx/source/libvpx/vpx_dsp/avg.c'
source_filename = "../../third_party/libvpx/source/libvpx/vpx_dsp/avg.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden i32 @vpx_avg_8x8_c(i8* nocapture readonly, i32) local_unnamed_addr #0 {
  %3 = sext i32 %1 to i64
  %4 = load i8, i8* %0, align 1
  %5 = zext i8 %4 to i32
  %6 = getelementptr inbounds i8, i8* %0, i64 1
  %7 = load i8, i8* %6, align 1
  %8 = zext i8 %7 to i32
  %9 = add nuw nsw i32 %5, %8
  %10 = getelementptr inbounds i8, i8* %0, i64 2
  %11 = load i8, i8* %10, align 1
  %12 = zext i8 %11 to i32
  %13 = add nuw nsw i32 %9, %12
  %14 = getelementptr inbounds i8, i8* %0, i64 3
  %15 = load i8, i8* %14, align 1
  %16 = zext i8 %15 to i32
  %17 = add nuw nsw i32 %13, %16
  %18 = getelementptr inbounds i8, i8* %0, i64 4
  %19 = load i8, i8* %18, align 1
  %20 = zext i8 %19 to i32
  %21 = add nuw nsw i32 %17, %20
  %22 = getelementptr inbounds i8, i8* %0, i64 5
  %23 = load i8, i8* %22, align 1
  %24 = zext i8 %23 to i32
  %25 = add nuw nsw i32 %21, %24
  %26 = getelementptr inbounds i8, i8* %0, i64 6
  %27 = load i8, i8* %26, align 1
  %28 = zext i8 %27 to i32
  %29 = add nuw nsw i32 %25, %28
  %30 = getelementptr inbounds i8, i8* %0, i64 7
  %31 = load i8, i8* %30, align 1
  %32 = zext i8 %31 to i32
  %33 = add nuw nsw i32 %29, %32
  %34 = getelementptr inbounds i8, i8* %0, i64 %3
  %35 = load i8, i8* %34, align 1
  %36 = zext i8 %35 to i32
  %37 = add nuw nsw i32 %33, %36
  %38 = getelementptr inbounds i8, i8* %34, i64 1
  %39 = load i8, i8* %38, align 1
  %40 = zext i8 %39 to i32
  %41 = add nuw nsw i32 %37, %40
  %42 = getelementptr inbounds i8, i8* %34, i64 2
  %43 = load i8, i8* %42, align 1
  %44 = zext i8 %43 to i32
  %45 = add nuw nsw i32 %41, %44
  %46 = getelementptr inbounds i8, i8* %34, i64 3
  %47 = load i8, i8* %46, align 1
  %48 = zext i8 %47 to i32
  %49 = add nuw nsw i32 %45, %48
  %50 = getelementptr inbounds i8, i8* %34, i64 4
  %51 = load i8, i8* %50, align 1
  %52 = zext i8 %51 to i32
  %53 = add nuw nsw i32 %49, %52
  %54 = getelementptr inbounds i8, i8* %34, i64 5
  %55 = load i8, i8* %54, align 1
  %56 = zext i8 %55 to i32
  %57 = add nuw nsw i32 %53, %56
  %58 = getelementptr inbounds i8, i8* %34, i64 6
  %59 = load i8, i8* %58, align 1
  %60 = zext i8 %59 to i32
  %61 = add nuw nsw i32 %57, %60
  %62 = getelementptr inbounds i8, i8* %34, i64 7
  %63 = load i8, i8* %62, align 1
  %64 = zext i8 %63 to i32
  %65 = add nuw nsw i32 %61, %64
  %66 = getelementptr inbounds i8, i8* %34, i64 %3
  %67 = load i8, i8* %66, align 1
  %68 = zext i8 %67 to i32
  %69 = add nuw nsw i32 %65, %68
  %70 = getelementptr inbounds i8, i8* %66, i64 1
  %71 = load i8, i8* %70, align 1
  %72 = zext i8 %71 to i32
  %73 = add nuw nsw i32 %69, %72
  %74 = getelementptr inbounds i8, i8* %66, i64 2
  %75 = load i8, i8* %74, align 1
  %76 = zext i8 %75 to i32
  %77 = add nuw nsw i32 %73, %76
  %78 = getelementptr inbounds i8, i8* %66, i64 3
  %79 = load i8, i8* %78, align 1
  %80 = zext i8 %79 to i32
  %81 = add nuw nsw i32 %77, %80
  %82 = getelementptr inbounds i8, i8* %66, i64 4
  %83 = load i8, i8* %82, align 1
  %84 = zext i8 %83 to i32
  %85 = add nuw nsw i32 %81, %84
  %86 = getelementptr inbounds i8, i8* %66, i64 5
  %87 = load i8, i8* %86, align 1
  %88 = zext i8 %87 to i32
  %89 = add nuw nsw i32 %85, %88
  %90 = getelementptr inbounds i8, i8* %66, i64 6
  %91 = load i8, i8* %90, align 1
  %92 = zext i8 %91 to i32
  %93 = add nuw nsw i32 %89, %92
  %94 = getelementptr inbounds i8, i8* %66, i64 7
  %95 = load i8, i8* %94, align 1
  %96 = zext i8 %95 to i32
  %97 = add nuw nsw i32 %93, %96
  %98 = getelementptr inbounds i8, i8* %66, i64 %3
  %99 = load i8, i8* %98, align 1
  %100 = zext i8 %99 to i32
  %101 = add nuw nsw i32 %97, %100
  %102 = getelementptr inbounds i8, i8* %98, i64 1
  %103 = load i8, i8* %102, align 1
  %104 = zext i8 %103 to i32
  %105 = add nuw nsw i32 %101, %104
  %106 = getelementptr inbounds i8, i8* %98, i64 2
  %107 = load i8, i8* %106, align 1
  %108 = zext i8 %107 to i32
  %109 = add nuw nsw i32 %105, %108
  %110 = getelementptr inbounds i8, i8* %98, i64 3
  %111 = load i8, i8* %110, align 1
  %112 = zext i8 %111 to i32
  %113 = add nuw nsw i32 %109, %112
  %114 = getelementptr inbounds i8, i8* %98, i64 4
  %115 = load i8, i8* %114, align 1
  %116 = zext i8 %115 to i32
  %117 = add nuw nsw i32 %113, %116
  %118 = getelementptr inbounds i8, i8* %98, i64 5
  %119 = load i8, i8* %118, align 1
  %120 = zext i8 %119 to i32
  %121 = add nuw nsw i32 %117, %120
  %122 = getelementptr inbounds i8, i8* %98, i64 6
  %123 = load i8, i8* %122, align 1
  %124 = zext i8 %123 to i32
  %125 = add nuw nsw i32 %121, %124
  %126 = getelementptr inbounds i8, i8* %98, i64 7
  %127 = load i8, i8* %126, align 1
  %128 = zext i8 %127 to i32
  %129 = add nuw nsw i32 %125, %128
  %130 = getelementptr inbounds i8, i8* %98, i64 %3
  %131 = load i8, i8* %130, align 1
  %132 = zext i8 %131 to i32
  %133 = add nuw nsw i32 %129, %132
  %134 = getelementptr inbounds i8, i8* %130, i64 1
  %135 = load i8, i8* %134, align 1
  %136 = zext i8 %135 to i32
  %137 = add nuw nsw i32 %133, %136
  %138 = getelementptr inbounds i8, i8* %130, i64 2
  %139 = load i8, i8* %138, align 1
  %140 = zext i8 %139 to i32
  %141 = add nuw nsw i32 %137, %140
  %142 = getelementptr inbounds i8, i8* %130, i64 3
  %143 = load i8, i8* %142, align 1
  %144 = zext i8 %143 to i32
  %145 = add nuw nsw i32 %141, %144
  %146 = getelementptr inbounds i8, i8* %130, i64 4
  %147 = load i8, i8* %146, align 1
  %148 = zext i8 %147 to i32
  %149 = add nuw nsw i32 %145, %148
  %150 = getelementptr inbounds i8, i8* %130, i64 5
  %151 = load i8, i8* %150, align 1
  %152 = zext i8 %151 to i32
  %153 = add nuw nsw i32 %149, %152
  %154 = getelementptr inbounds i8, i8* %130, i64 6
  %155 = load i8, i8* %154, align 1
  %156 = zext i8 %155 to i32
  %157 = add nuw nsw i32 %153, %156
  %158 = getelementptr inbounds i8, i8* %130, i64 7
  %159 = load i8, i8* %158, align 1
  %160 = zext i8 %159 to i32
  %161 = add nuw nsw i32 %157, %160
  %162 = getelementptr inbounds i8, i8* %130, i64 %3
  %163 = load i8, i8* %162, align 1
  %164 = zext i8 %163 to i32
  %165 = add nuw nsw i32 %161, %164
  %166 = getelementptr inbounds i8, i8* %162, i64 1
  %167 = load i8, i8* %166, align 1
  %168 = zext i8 %167 to i32
  %169 = add nuw nsw i32 %165, %168
  %170 = getelementptr inbounds i8, i8* %162, i64 2
  %171 = load i8, i8* %170, align 1
  %172 = zext i8 %171 to i32
  %173 = add nuw nsw i32 %169, %172
  %174 = getelementptr inbounds i8, i8* %162, i64 3
  %175 = load i8, i8* %174, align 1
  %176 = zext i8 %175 to i32
  %177 = add nuw nsw i32 %173, %176
  %178 = getelementptr inbounds i8, i8* %162, i64 4
  %179 = load i8, i8* %178, align 1
  %180 = zext i8 %179 to i32
  %181 = add nuw nsw i32 %177, %180
  %182 = getelementptr inbounds i8, i8* %162, i64 5
  %183 = load i8, i8* %182, align 1
  %184 = zext i8 %183 to i32
  %185 = add nuw nsw i32 %181, %184
  %186 = getelementptr inbounds i8, i8* %162, i64 6
  %187 = load i8, i8* %186, align 1
  %188 = zext i8 %187 to i32
  %189 = add nuw nsw i32 %185, %188
  %190 = getelementptr inbounds i8, i8* %162, i64 7
  %191 = load i8, i8* %190, align 1
  %192 = zext i8 %191 to i32
  %193 = add nuw nsw i32 %189, %192
  %194 = getelementptr inbounds i8, i8* %162, i64 %3
  %195 = load i8, i8* %194, align 1
  %196 = zext i8 %195 to i32
  %197 = add nuw nsw i32 %193, %196
  %198 = getelementptr inbounds i8, i8* %194, i64 1
  %199 = load i8, i8* %198, align 1
  %200 = zext i8 %199 to i32
  %201 = add nuw nsw i32 %197, %200
  %202 = getelementptr inbounds i8, i8* %194, i64 2
  %203 = load i8, i8* %202, align 1
  %204 = zext i8 %203 to i32
  %205 = add nuw nsw i32 %201, %204
  %206 = getelementptr inbounds i8, i8* %194, i64 3
  %207 = load i8, i8* %206, align 1
  %208 = zext i8 %207 to i32
  %209 = add nuw nsw i32 %205, %208
  %210 = getelementptr inbounds i8, i8* %194, i64 4
  %211 = load i8, i8* %210, align 1
  %212 = zext i8 %211 to i32
  %213 = add nuw nsw i32 %209, %212
  %214 = getelementptr inbounds i8, i8* %194, i64 5
  %215 = load i8, i8* %214, align 1
  %216 = zext i8 %215 to i32
  %217 = add nuw nsw i32 %213, %216
  %218 = getelementptr inbounds i8, i8* %194, i64 6
  %219 = load i8, i8* %218, align 1
  %220 = zext i8 %219 to i32
  %221 = add nuw nsw i32 %217, %220
  %222 = getelementptr inbounds i8, i8* %194, i64 7
  %223 = load i8, i8* %222, align 1
  %224 = zext i8 %223 to i32
  %225 = add nuw nsw i32 %221, %224
  %226 = getelementptr inbounds i8, i8* %194, i64 %3
  %227 = load i8, i8* %226, align 1
  %228 = zext i8 %227 to i32
  %229 = add nuw nsw i32 %225, %228
  %230 = getelementptr inbounds i8, i8* %226, i64 1
  %231 = load i8, i8* %230, align 1
  %232 = zext i8 %231 to i32
  %233 = add nuw nsw i32 %229, %232
  %234 = getelementptr inbounds i8, i8* %226, i64 2
  %235 = load i8, i8* %234, align 1
  %236 = zext i8 %235 to i32
  %237 = add nuw nsw i32 %233, %236
  %238 = getelementptr inbounds i8, i8* %226, i64 3
  %239 = load i8, i8* %238, align 1
  %240 = zext i8 %239 to i32
  %241 = add nuw nsw i32 %237, %240
  %242 = getelementptr inbounds i8, i8* %226, i64 4
  %243 = load i8, i8* %242, align 1
  %244 = zext i8 %243 to i32
  %245 = add nuw nsw i32 %241, %244
  %246 = getelementptr inbounds i8, i8* %226, i64 5
  %247 = load i8, i8* %246, align 1
  %248 = zext i8 %247 to i32
  %249 = add nuw nsw i32 %245, %248
  %250 = getelementptr inbounds i8, i8* %226, i64 6
  %251 = load i8, i8* %250, align 1
  %252 = zext i8 %251 to i32
  %253 = add nuw nsw i32 %249, %252
  %254 = getelementptr inbounds i8, i8* %226, i64 7
  %255 = load i8, i8* %254, align 1
  %256 = zext i8 %255 to i32
  %257 = add nuw nsw i32 %253, %256
  %258 = add nuw nsw i32 %257, 32
  %259 = ashr i32 %258, 6
  ret i32 %259
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden i32 @vpx_avg_4x4_c(i8* nocapture readonly, i32) local_unnamed_addr #0 {
  %3 = sext i32 %1 to i64
  %4 = load i8, i8* %0, align 1
  %5 = zext i8 %4 to i32
  %6 = getelementptr inbounds i8, i8* %0, i64 1
  %7 = load i8, i8* %6, align 1
  %8 = zext i8 %7 to i32
  %9 = add nuw nsw i32 %5, %8
  %10 = getelementptr inbounds i8, i8* %0, i64 2
  %11 = load i8, i8* %10, align 1
  %12 = zext i8 %11 to i32
  %13 = add nuw nsw i32 %9, %12
  %14 = getelementptr inbounds i8, i8* %0, i64 3
  %15 = load i8, i8* %14, align 1
  %16 = zext i8 %15 to i32
  %17 = add nuw nsw i32 %13, %16
  %18 = getelementptr inbounds i8, i8* %0, i64 %3
  %19 = load i8, i8* %18, align 1
  %20 = zext i8 %19 to i32
  %21 = add nuw nsw i32 %17, %20
  %22 = getelementptr inbounds i8, i8* %18, i64 1
  %23 = load i8, i8* %22, align 1
  %24 = zext i8 %23 to i32
  %25 = add nuw nsw i32 %21, %24
  %26 = getelementptr inbounds i8, i8* %18, i64 2
  %27 = load i8, i8* %26, align 1
  %28 = zext i8 %27 to i32
  %29 = add nuw nsw i32 %25, %28
  %30 = getelementptr inbounds i8, i8* %18, i64 3
  %31 = load i8, i8* %30, align 1
  %32 = zext i8 %31 to i32
  %33 = add nuw nsw i32 %29, %32
  %34 = getelementptr inbounds i8, i8* %18, i64 %3
  %35 = load i8, i8* %34, align 1
  %36 = zext i8 %35 to i32
  %37 = add nuw nsw i32 %33, %36
  %38 = getelementptr inbounds i8, i8* %34, i64 1
  %39 = load i8, i8* %38, align 1
  %40 = zext i8 %39 to i32
  %41 = add nuw nsw i32 %37, %40
  %42 = getelementptr inbounds i8, i8* %34, i64 2
  %43 = load i8, i8* %42, align 1
  %44 = zext i8 %43 to i32
  %45 = add nuw nsw i32 %41, %44
  %46 = getelementptr inbounds i8, i8* %34, i64 3
  %47 = load i8, i8* %46, align 1
  %48 = zext i8 %47 to i32
  %49 = add nuw nsw i32 %45, %48
  %50 = getelementptr inbounds i8, i8* %34, i64 %3
  %51 = load i8, i8* %50, align 1
  %52 = zext i8 %51 to i32
  %53 = add nuw nsw i32 %49, %52
  %54 = getelementptr inbounds i8, i8* %50, i64 1
  %55 = load i8, i8* %54, align 1
  %56 = zext i8 %55 to i32
  %57 = add nuw nsw i32 %53, %56
  %58 = getelementptr inbounds i8, i8* %50, i64 2
  %59 = load i8, i8* %58, align 1
  %60 = zext i8 %59 to i32
  %61 = add nuw nsw i32 %57, %60
  %62 = getelementptr inbounds i8, i8* %50, i64 3
  %63 = load i8, i8* %62, align 1
  %64 = zext i8 %63 to i32
  %65 = add nuw nsw i32 %61, %64
  %66 = add nuw nsw i32 %65, 8
  %67 = ashr i32 %66, 4
  ret i32 %67
}

; Function Attrs: nounwind ssp uwtable
define hidden void @vpx_highbd_hadamard_8x8_c(i16* nocapture readonly, i64, i32* nocapture) local_unnamed_addr #2 {
  %4 = alloca [64 x i16], align 16
  %5 = alloca [64 x i32], align 16
  %6 = bitcast [64 x i32]* %5 to i8*
  %7 = bitcast [64 x i16]* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 128, i8* nonnull %7) #4
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %7, i8 -86, i64 128, i1 false)
  call void @llvm.lifetime.start.p0i8(i64 256, i8* nonnull %6) #4
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %6, i8 -86, i64 256, i1 false)
  %8 = getelementptr inbounds [64 x i16], [64 x i16]* %4, i64 0, i64 0
  %9 = shl nsw i64 %1, 1
  %10 = mul nsw i64 %1, 3
  %11 = shl nsw i64 %1, 2
  %12 = mul nsw i64 %1, 5
  %13 = mul nsw i64 %1, 6
  %14 = mul nsw i64 %1, 7
  br label %15

15:                                               ; preds = %15, %3
  %16 = phi i16* [ %8, %3 ], [ %65, %15 ]
  %17 = phi i32 [ 0, %3 ], [ %67, %15 ]
  %18 = phi i16* [ %0, %3 ], [ %66, %15 ]
  %19 = load i16, i16* %18, align 2
  %20 = getelementptr inbounds i16, i16* %18, i64 %1
  %21 = load i16, i16* %20, align 2
  %22 = add i16 %21, %19
  %23 = sub i16 %19, %21
  %24 = getelementptr inbounds i16, i16* %18, i64 %9
  %25 = load i16, i16* %24, align 2
  %26 = getelementptr inbounds i16, i16* %18, i64 %10
  %27 = load i16, i16* %26, align 2
  %28 = add i16 %27, %25
  %29 = sub i16 %25, %27
  %30 = getelementptr inbounds i16, i16* %18, i64 %11
  %31 = load i16, i16* %30, align 2
  %32 = getelementptr inbounds i16, i16* %18, i64 %12
  %33 = load i16, i16* %32, align 2
  %34 = add i16 %33, %31
  %35 = sub i16 %31, %33
  %36 = getelementptr inbounds i16, i16* %18, i64 %13
  %37 = load i16, i16* %36, align 2
  %38 = getelementptr inbounds i16, i16* %18, i64 %14
  %39 = load i16, i16* %38, align 2
  %40 = add i16 %39, %37
  %41 = sub i16 %37, %39
  %42 = add i16 %28, %22
  %43 = add i16 %29, %23
  %44 = sub i16 %22, %28
  %45 = sub i16 %23, %29
  %46 = add i16 %40, %34
  %47 = add i16 %41, %35
  %48 = sub i16 %34, %40
  %49 = sub i16 %35, %41
  %50 = add i16 %46, %42
  store i16 %50, i16* %16, align 2
  %51 = add i16 %47, %43
  %52 = getelementptr inbounds i16, i16* %16, i64 7
  store i16 %51, i16* %52, align 2
  %53 = add i16 %48, %44
  %54 = getelementptr inbounds i16, i16* %16, i64 3
  store i16 %53, i16* %54, align 2
  %55 = add i16 %49, %45
  %56 = getelementptr inbounds i16, i16* %16, i64 4
  store i16 %55, i16* %56, align 2
  %57 = sub i16 %42, %46
  %58 = getelementptr inbounds i16, i16* %16, i64 2
  store i16 %57, i16* %58, align 2
  %59 = sub i16 %43, %47
  %60 = getelementptr inbounds i16, i16* %16, i64 6
  store i16 %59, i16* %60, align 2
  %61 = sub i16 %44, %48
  %62 = getelementptr inbounds i16, i16* %16, i64 1
  store i16 %61, i16* %62, align 2
  %63 = sub i16 %45, %49
  %64 = getelementptr inbounds i16, i16* %16, i64 5
  store i16 %63, i16* %64, align 2
  %65 = getelementptr inbounds i16, i16* %16, i64 8
  %66 = getelementptr inbounds i16, i16* %18, i64 1
  %67 = add nuw nsw i32 %17, 1
  %68 = icmp eq i32 %67, 8
  br i1 %68, label %69, label %15

69:                                               ; preds = %15
  %70 = bitcast i32* %2 to i8*
  br label %71

71:                                               ; preds = %71, %69
  %72 = phi i64 [ 0, %69 ], [ %131, %71 ]
  %73 = phi i16* [ %8, %69 ], [ %130, %71 ]
  %74 = shl nsw i64 %72, 3
  %75 = getelementptr inbounds [64 x i32], [64 x i32]* %5, i64 0, i64 %74
  %76 = load i16, i16* %73, align 2
  %77 = sext i16 %76 to i32
  %78 = getelementptr inbounds i16, i16* %73, i64 8
  %79 = load i16, i16* %78, align 2
  %80 = sext i16 %79 to i32
  %81 = add nsw i32 %80, %77
  %82 = sub nsw i32 %77, %80
  %83 = getelementptr inbounds i16, i16* %73, i64 16
  %84 = load i16, i16* %83, align 2
  %85 = sext i16 %84 to i32
  %86 = getelementptr inbounds i16, i16* %73, i64 24
  %87 = load i16, i16* %86, align 2
  %88 = sext i16 %87 to i32
  %89 = add nsw i32 %88, %85
  %90 = sub nsw i32 %85, %88
  %91 = getelementptr inbounds i16, i16* %73, i64 32
  %92 = load i16, i16* %91, align 2
  %93 = sext i16 %92 to i32
  %94 = getelementptr inbounds i16, i16* %73, i64 40
  %95 = load i16, i16* %94, align 2
  %96 = sext i16 %95 to i32
  %97 = add nsw i32 %96, %93
  %98 = sub nsw i32 %93, %96
  %99 = getelementptr inbounds i16, i16* %73, i64 48
  %100 = load i16, i16* %99, align 2
  %101 = sext i16 %100 to i32
  %102 = getelementptr inbounds i16, i16* %73, i64 56
  %103 = load i16, i16* %102, align 2
  %104 = sext i16 %103 to i32
  %105 = add nsw i32 %104, %101
  %106 = sub nsw i32 %101, %104
  %107 = add nsw i32 %89, %81
  %108 = add nsw i32 %90, %82
  %109 = sub nsw i32 %81, %89
  %110 = sub nsw i32 %82, %90
  %111 = add nsw i32 %105, %97
  %112 = add nsw i32 %106, %98
  %113 = sub nsw i32 %97, %105
  %114 = sub nsw i32 %98, %106
  %115 = add nsw i32 %111, %107
  store i32 %115, i32* %75, align 16
  %116 = add nsw i32 %112, %108
  %117 = getelementptr inbounds i32, i32* %75, i64 7
  store i32 %116, i32* %117, align 4
  %118 = add nsw i32 %113, %109
  %119 = getelementptr inbounds i32, i32* %75, i64 3
  store i32 %118, i32* %119, align 4
  %120 = add nsw i32 %114, %110
  %121 = getelementptr inbounds i32, i32* %75, i64 4
  store i32 %120, i32* %121, align 16
  %122 = sub nsw i32 %107, %111
  %123 = getelementptr inbounds i32, i32* %75, i64 2
  store i32 %122, i32* %123, align 8
  %124 = sub nsw i32 %108, %112
  %125 = getelementptr inbounds i32, i32* %75, i64 6
  store i32 %124, i32* %125, align 8
  %126 = sub nsw i32 %109, %113
  %127 = getelementptr inbounds i32, i32* %75, i64 1
  store i32 %126, i32* %127, align 4
  %128 = sub nsw i32 %110, %114
  %129 = getelementptr inbounds i32, i32* %75, i64 5
  store i32 %128, i32* %129, align 4
  %130 = getelementptr inbounds i16, i16* %73, i64 1
  %131 = add nuw nsw i64 %72, 1
  %132 = icmp eq i64 %131, 8
  br i1 %132, label %133, label %71

133:                                              ; preds = %71
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %70, i8* nonnull align 16 %6, i64 256, i1 false)
  call void @llvm.lifetime.end.p0i8(i64 256, i8* nonnull %6) #4
  call void @llvm.lifetime.end.p0i8(i64 128, i8* nonnull %7) #4
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

; Function Attrs: nounwind ssp uwtable
define hidden void @vpx_highbd_hadamard_16x16_c(i16* nocapture readonly, i64, i32* nocapture) local_unnamed_addr #2 {
  tail call void @vpx_highbd_hadamard_8x8_c(i16* %0, i64 %1, i32* %2)
  %4 = getelementptr inbounds i16, i16* %0, i64 8
  %5 = getelementptr inbounds i32, i32* %2, i64 64
  tail call void @vpx_highbd_hadamard_8x8_c(i16* %4, i64 %1, i32* %5)
  %6 = shl nsw i64 %1, 3
  %7 = getelementptr inbounds i16, i16* %0, i64 %6
  %8 = getelementptr inbounds i32, i32* %2, i64 128
  tail call void @vpx_highbd_hadamard_8x8_c(i16* %7, i64 %1, i32* %8)
  %9 = getelementptr inbounds i16, i16* %7, i64 8
  %10 = getelementptr inbounds i32, i32* %2, i64 192
  tail call void @vpx_highbd_hadamard_8x8_c(i16* %9, i64 %1, i32* %10)
  br label %11

11:                                               ; preds = %11, %3
  %12 = phi i64 [ 0, %3 ], [ %41, %11 ]
  %13 = getelementptr i32, i32* %2, i64 %12
  %14 = bitcast i32* %13 to <4 x i32>*
  %15 = load <4 x i32>, <4 x i32>* %14, align 4
  %16 = getelementptr inbounds i32, i32* %13, i64 64
  %17 = bitcast i32* %16 to <4 x i32>*
  %18 = load <4 x i32>, <4 x i32>* %17, align 4
  %19 = getelementptr inbounds i32, i32* %13, i64 128
  %20 = bitcast i32* %19 to <4 x i32>*
  %21 = load <4 x i32>, <4 x i32>* %20, align 4
  %22 = getelementptr inbounds i32, i32* %13, i64 192
  %23 = bitcast i32* %22 to <4 x i32>*
  %24 = load <4 x i32>, <4 x i32>* %23, align 4
  %25 = add nsw <4 x i32> %18, %15
  %26 = ashr <4 x i32> %25, <i32 1, i32 1, i32 1, i32 1>
  %27 = sub nsw <4 x i32> %15, %18
  %28 = ashr <4 x i32> %27, <i32 1, i32 1, i32 1, i32 1>
  %29 = add nsw <4 x i32> %24, %21
  %30 = ashr <4 x i32> %29, <i32 1, i32 1, i32 1, i32 1>
  %31 = sub nsw <4 x i32> %21, %24
  %32 = ashr <4 x i32> %31, <i32 1, i32 1, i32 1, i32 1>
  %33 = add nsw <4 x i32> %30, %26
  %34 = bitcast i32* %13 to <4 x i32>*
  store <4 x i32> %33, <4 x i32>* %34, align 4
  %35 = add nsw <4 x i32> %32, %28
  %36 = bitcast i32* %16 to <4 x i32>*
  store <4 x i32> %35, <4 x i32>* %36, align 4
  %37 = sub nsw <4 x i32> %26, %30
  %38 = bitcast i32* %19 to <4 x i32>*
  store <4 x i32> %37, <4 x i32>* %38, align 4
  %39 = sub nsw <4 x i32> %28, %32
  %40 = bitcast i32* %22 to <4 x i32>*
  store <4 x i32> %39, <4 x i32>* %40, align 4
  %41 = add i64 %12, 4
  %42 = icmp eq i64 %41, 64
  br i1 %42, label %43, label %11, !llvm.loop !2

43:                                               ; preds = %11
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @vpx_highbd_hadamard_32x32_c(i16* nocapture readonly, i64, i32* nocapture) local_unnamed_addr #2 {
  tail call void @vpx_highbd_hadamard_16x16_c(i16* %0, i64 %1, i32* %2)
  %4 = getelementptr inbounds i16, i16* %0, i64 16
  %5 = getelementptr inbounds i32, i32* %2, i64 256
  tail call void @vpx_highbd_hadamard_16x16_c(i16* %4, i64 %1, i32* %5)
  %6 = shl nsw i64 %1, 4
  %7 = getelementptr inbounds i16, i16* %0, i64 %6
  %8 = getelementptr inbounds i32, i32* %2, i64 512
  tail call void @vpx_highbd_hadamard_16x16_c(i16* %7, i64 %1, i32* %8)
  %9 = getelementptr inbounds i16, i16* %7, i64 16
  %10 = getelementptr inbounds i32, i32* %2, i64 768
  tail call void @vpx_highbd_hadamard_16x16_c(i16* %9, i64 %1, i32* %10)
  br label %11

11:                                               ; preds = %11, %3
  %12 = phi i64 [ 0, %3 ], [ %41, %11 ]
  %13 = getelementptr i32, i32* %2, i64 %12
  %14 = bitcast i32* %13 to <4 x i32>*
  %15 = load <4 x i32>, <4 x i32>* %14, align 4
  %16 = getelementptr inbounds i32, i32* %13, i64 256
  %17 = bitcast i32* %16 to <4 x i32>*
  %18 = load <4 x i32>, <4 x i32>* %17, align 4
  %19 = getelementptr inbounds i32, i32* %13, i64 512
  %20 = bitcast i32* %19 to <4 x i32>*
  %21 = load <4 x i32>, <4 x i32>* %20, align 4
  %22 = getelementptr inbounds i32, i32* %13, i64 768
  %23 = bitcast i32* %22 to <4 x i32>*
  %24 = load <4 x i32>, <4 x i32>* %23, align 4
  %25 = add nsw <4 x i32> %18, %15
  %26 = ashr <4 x i32> %25, <i32 2, i32 2, i32 2, i32 2>
  %27 = sub nsw <4 x i32> %15, %18
  %28 = ashr <4 x i32> %27, <i32 2, i32 2, i32 2, i32 2>
  %29 = add nsw <4 x i32> %24, %21
  %30 = ashr <4 x i32> %29, <i32 2, i32 2, i32 2, i32 2>
  %31 = sub nsw <4 x i32> %21, %24
  %32 = ashr <4 x i32> %31, <i32 2, i32 2, i32 2, i32 2>
  %33 = add nsw <4 x i32> %30, %26
  %34 = bitcast i32* %13 to <4 x i32>*
  store <4 x i32> %33, <4 x i32>* %34, align 4
  %35 = add nsw <4 x i32> %32, %28
  %36 = bitcast i32* %16 to <4 x i32>*
  store <4 x i32> %35, <4 x i32>* %36, align 4
  %37 = sub nsw <4 x i32> %26, %30
  %38 = bitcast i32* %19 to <4 x i32>*
  store <4 x i32> %37, <4 x i32>* %38, align 4
  %39 = sub nsw <4 x i32> %28, %32
  %40 = bitcast i32* %22 to <4 x i32>*
  store <4 x i32> %39, <4 x i32>* %40, align 4
  %41 = add i64 %12, 4
  %42 = icmp eq i64 %41, 256
  br i1 %42, label %43, label %11, !llvm.loop !4

43:                                               ; preds = %11
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @vpx_hadamard_8x8_c(i16* nocapture readonly, i64, i32* nocapture) local_unnamed_addr #2 {
  %4 = alloca [64 x i16], align 16
  %5 = alloca [64 x i16], align 16
  %6 = bitcast [64 x i16]* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 128, i8* nonnull %6) #4
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %6, i8 -86, i64 128, i1 false)
  %7 = bitcast [64 x i16]* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 128, i8* nonnull %7) #4
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %7, i8 -86, i64 128, i1 false)
  %8 = getelementptr inbounds [64 x i16], [64 x i16]* %4, i64 0, i64 0
  %9 = shl nsw i64 %1, 1
  %10 = mul nsw i64 %1, 3
  %11 = shl nsw i64 %1, 2
  %12 = mul nsw i64 %1, 5
  %13 = mul nsw i64 %1, 6
  %14 = mul nsw i64 %1, 7
  br label %15

15:                                               ; preds = %15, %3
  %16 = phi i16* [ %8, %3 ], [ %65, %15 ]
  %17 = phi i32 [ 0, %3 ], [ %67, %15 ]
  %18 = phi i16* [ %0, %3 ], [ %66, %15 ]
  %19 = load i16, i16* %18, align 2
  %20 = getelementptr inbounds i16, i16* %18, i64 %1
  %21 = load i16, i16* %20, align 2
  %22 = add i16 %21, %19
  %23 = sub i16 %19, %21
  %24 = getelementptr inbounds i16, i16* %18, i64 %9
  %25 = load i16, i16* %24, align 2
  %26 = getelementptr inbounds i16, i16* %18, i64 %10
  %27 = load i16, i16* %26, align 2
  %28 = add i16 %27, %25
  %29 = sub i16 %25, %27
  %30 = getelementptr inbounds i16, i16* %18, i64 %11
  %31 = load i16, i16* %30, align 2
  %32 = getelementptr inbounds i16, i16* %18, i64 %12
  %33 = load i16, i16* %32, align 2
  %34 = add i16 %33, %31
  %35 = sub i16 %31, %33
  %36 = getelementptr inbounds i16, i16* %18, i64 %13
  %37 = load i16, i16* %36, align 2
  %38 = getelementptr inbounds i16, i16* %18, i64 %14
  %39 = load i16, i16* %38, align 2
  %40 = add i16 %39, %37
  %41 = sub i16 %37, %39
  %42 = add i16 %28, %22
  %43 = add i16 %29, %23
  %44 = sub i16 %22, %28
  %45 = sub i16 %23, %29
  %46 = add i16 %40, %34
  %47 = add i16 %41, %35
  %48 = sub i16 %34, %40
  %49 = sub i16 %35, %41
  %50 = add i16 %46, %42
  store i16 %50, i16* %16, align 2
  %51 = add i16 %47, %43
  %52 = getelementptr inbounds i16, i16* %16, i64 7
  store i16 %51, i16* %52, align 2
  %53 = add i16 %48, %44
  %54 = getelementptr inbounds i16, i16* %16, i64 3
  store i16 %53, i16* %54, align 2
  %55 = add i16 %49, %45
  %56 = getelementptr inbounds i16, i16* %16, i64 4
  store i16 %55, i16* %56, align 2
  %57 = sub i16 %42, %46
  %58 = getelementptr inbounds i16, i16* %16, i64 2
  store i16 %57, i16* %58, align 2
  %59 = sub i16 %43, %47
  %60 = getelementptr inbounds i16, i16* %16, i64 6
  store i16 %59, i16* %60, align 2
  %61 = sub i16 %44, %48
  %62 = getelementptr inbounds i16, i16* %16, i64 1
  store i16 %61, i16* %62, align 2
  %63 = sub i16 %45, %49
  %64 = getelementptr inbounds i16, i16* %16, i64 5
  store i16 %63, i16* %64, align 2
  %65 = getelementptr inbounds i16, i16* %16, i64 8
  %66 = getelementptr inbounds i16, i16* %18, i64 1
  %67 = add nuw nsw i32 %17, 1
  %68 = icmp eq i32 %67, 8
  br i1 %68, label %69, label %15

69:                                               ; preds = %15, %69
  %70 = phi i64 [ %121, %69 ], [ 0, %15 ]
  %71 = phi i16* [ %120, %69 ], [ %8, %15 ]
  %72 = shl nsw i64 %70, 3
  %73 = getelementptr inbounds [64 x i16], [64 x i16]* %5, i64 0, i64 %72
  %74 = load i16, i16* %71, align 2
  %75 = getelementptr inbounds i16, i16* %71, i64 8
  %76 = load i16, i16* %75, align 2
  %77 = add i16 %76, %74
  %78 = sub i16 %74, %76
  %79 = getelementptr inbounds i16, i16* %71, i64 16
  %80 = load i16, i16* %79, align 2
  %81 = getelementptr inbounds i16, i16* %71, i64 24
  %82 = load i16, i16* %81, align 2
  %83 = add i16 %82, %80
  %84 = sub i16 %80, %82
  %85 = getelementptr inbounds i16, i16* %71, i64 32
  %86 = load i16, i16* %85, align 2
  %87 = getelementptr inbounds i16, i16* %71, i64 40
  %88 = load i16, i16* %87, align 2
  %89 = add i16 %88, %86
  %90 = sub i16 %86, %88
  %91 = getelementptr inbounds i16, i16* %71, i64 48
  %92 = load i16, i16* %91, align 2
  %93 = getelementptr inbounds i16, i16* %71, i64 56
  %94 = load i16, i16* %93, align 2
  %95 = add i16 %94, %92
  %96 = sub i16 %92, %94
  %97 = add i16 %83, %77
  %98 = add i16 %84, %78
  %99 = sub i16 %77, %83
  %100 = sub i16 %78, %84
  %101 = add i16 %95, %89
  %102 = add i16 %96, %90
  %103 = sub i16 %89, %95
  %104 = sub i16 %90, %96
  %105 = add i16 %101, %97
  store i16 %105, i16* %73, align 16
  %106 = add i16 %102, %98
  %107 = getelementptr inbounds i16, i16* %73, i64 7
  store i16 %106, i16* %107, align 2
  %108 = add i16 %103, %99
  %109 = getelementptr inbounds i16, i16* %73, i64 3
  store i16 %108, i16* %109, align 2
  %110 = add i16 %104, %100
  %111 = getelementptr inbounds i16, i16* %73, i64 4
  store i16 %110, i16* %111, align 8
  %112 = sub i16 %97, %101
  %113 = getelementptr inbounds i16, i16* %73, i64 2
  store i16 %112, i16* %113, align 4
  %114 = sub i16 %98, %102
  %115 = getelementptr inbounds i16, i16* %73, i64 6
  store i16 %114, i16* %115, align 4
  %116 = sub i16 %99, %103
  %117 = getelementptr inbounds i16, i16* %73, i64 1
  store i16 %116, i16* %117, align 2
  %118 = sub i16 %100, %104
  %119 = getelementptr inbounds i16, i16* %73, i64 5
  store i16 %118, i16* %119, align 2
  %120 = getelementptr inbounds i16, i16* %71, i64 1
  %121 = add nuw nsw i64 %70, 1
  %122 = icmp eq i64 %121, 8
  br i1 %122, label %123, label %69

123:                                              ; preds = %69
  %124 = bitcast [64 x i16]* %5 to <4 x i16>*
  %125 = load <4 x i16>, <4 x i16>* %124, align 16
  %126 = sext <4 x i16> %125 to <4 x i32>
  %127 = bitcast i32* %2 to <4 x i32>*
  store <4 x i32> %126, <4 x i32>* %127, align 4
  %128 = getelementptr inbounds [64 x i16], [64 x i16]* %5, i64 0, i64 4
  %129 = bitcast i16* %128 to <4 x i16>*
  %130 = load <4 x i16>, <4 x i16>* %129, align 8
  %131 = sext <4 x i16> %130 to <4 x i32>
  %132 = getelementptr inbounds i32, i32* %2, i64 4
  %133 = bitcast i32* %132 to <4 x i32>*
  store <4 x i32> %131, <4 x i32>* %133, align 4
  %134 = getelementptr inbounds [64 x i16], [64 x i16]* %5, i64 0, i64 8
  %135 = bitcast i16* %134 to <4 x i16>*
  %136 = load <4 x i16>, <4 x i16>* %135, align 16
  %137 = sext <4 x i16> %136 to <4 x i32>
  %138 = getelementptr inbounds i32, i32* %2, i64 8
  %139 = bitcast i32* %138 to <4 x i32>*
  store <4 x i32> %137, <4 x i32>* %139, align 4
  %140 = getelementptr inbounds [64 x i16], [64 x i16]* %5, i64 0, i64 12
  %141 = bitcast i16* %140 to <4 x i16>*
  %142 = load <4 x i16>, <4 x i16>* %141, align 8
  %143 = sext <4 x i16> %142 to <4 x i32>
  %144 = getelementptr inbounds i32, i32* %2, i64 12
  %145 = bitcast i32* %144 to <4 x i32>*
  store <4 x i32> %143, <4 x i32>* %145, align 4
  %146 = getelementptr inbounds [64 x i16], [64 x i16]* %5, i64 0, i64 16
  %147 = bitcast i16* %146 to <4 x i16>*
  %148 = load <4 x i16>, <4 x i16>* %147, align 16
  %149 = sext <4 x i16> %148 to <4 x i32>
  %150 = getelementptr inbounds i32, i32* %2, i64 16
  %151 = bitcast i32* %150 to <4 x i32>*
  store <4 x i32> %149, <4 x i32>* %151, align 4
  %152 = getelementptr inbounds [64 x i16], [64 x i16]* %5, i64 0, i64 20
  %153 = bitcast i16* %152 to <4 x i16>*
  %154 = load <4 x i16>, <4 x i16>* %153, align 8
  %155 = sext <4 x i16> %154 to <4 x i32>
  %156 = getelementptr inbounds i32, i32* %2, i64 20
  %157 = bitcast i32* %156 to <4 x i32>*
  store <4 x i32> %155, <4 x i32>* %157, align 4
  %158 = getelementptr inbounds [64 x i16], [64 x i16]* %5, i64 0, i64 24
  %159 = bitcast i16* %158 to <4 x i16>*
  %160 = load <4 x i16>, <4 x i16>* %159, align 16
  %161 = sext <4 x i16> %160 to <4 x i32>
  %162 = getelementptr inbounds i32, i32* %2, i64 24
  %163 = bitcast i32* %162 to <4 x i32>*
  store <4 x i32> %161, <4 x i32>* %163, align 4
  %164 = getelementptr inbounds [64 x i16], [64 x i16]* %5, i64 0, i64 28
  %165 = bitcast i16* %164 to <4 x i16>*
  %166 = load <4 x i16>, <4 x i16>* %165, align 8
  %167 = sext <4 x i16> %166 to <4 x i32>
  %168 = getelementptr inbounds i32, i32* %2, i64 28
  %169 = bitcast i32* %168 to <4 x i32>*
  store <4 x i32> %167, <4 x i32>* %169, align 4
  %170 = getelementptr inbounds [64 x i16], [64 x i16]* %5, i64 0, i64 32
  %171 = bitcast i16* %170 to <4 x i16>*
  %172 = load <4 x i16>, <4 x i16>* %171, align 16
  %173 = sext <4 x i16> %172 to <4 x i32>
  %174 = getelementptr inbounds i32, i32* %2, i64 32
  %175 = bitcast i32* %174 to <4 x i32>*
  store <4 x i32> %173, <4 x i32>* %175, align 4
  %176 = getelementptr inbounds [64 x i16], [64 x i16]* %5, i64 0, i64 36
  %177 = bitcast i16* %176 to <4 x i16>*
  %178 = load <4 x i16>, <4 x i16>* %177, align 8
  %179 = sext <4 x i16> %178 to <4 x i32>
  %180 = getelementptr inbounds i32, i32* %2, i64 36
  %181 = bitcast i32* %180 to <4 x i32>*
  store <4 x i32> %179, <4 x i32>* %181, align 4
  %182 = getelementptr inbounds [64 x i16], [64 x i16]* %5, i64 0, i64 40
  %183 = bitcast i16* %182 to <4 x i16>*
  %184 = load <4 x i16>, <4 x i16>* %183, align 16
  %185 = sext <4 x i16> %184 to <4 x i32>
  %186 = getelementptr inbounds i32, i32* %2, i64 40
  %187 = bitcast i32* %186 to <4 x i32>*
  store <4 x i32> %185, <4 x i32>* %187, align 4
  %188 = getelementptr inbounds [64 x i16], [64 x i16]* %5, i64 0, i64 44
  %189 = bitcast i16* %188 to <4 x i16>*
  %190 = load <4 x i16>, <4 x i16>* %189, align 8
  %191 = sext <4 x i16> %190 to <4 x i32>
  %192 = getelementptr inbounds i32, i32* %2, i64 44
  %193 = bitcast i32* %192 to <4 x i32>*
  store <4 x i32> %191, <4 x i32>* %193, align 4
  %194 = getelementptr inbounds [64 x i16], [64 x i16]* %5, i64 0, i64 48
  %195 = bitcast i16* %194 to <4 x i16>*
  %196 = load <4 x i16>, <4 x i16>* %195, align 16
  %197 = sext <4 x i16> %196 to <4 x i32>
  %198 = getelementptr inbounds i32, i32* %2, i64 48
  %199 = bitcast i32* %198 to <4 x i32>*
  store <4 x i32> %197, <4 x i32>* %199, align 4
  %200 = getelementptr inbounds [64 x i16], [64 x i16]* %5, i64 0, i64 52
  %201 = bitcast i16* %200 to <4 x i16>*
  %202 = load <4 x i16>, <4 x i16>* %201, align 8
  %203 = sext <4 x i16> %202 to <4 x i32>
  %204 = getelementptr inbounds i32, i32* %2, i64 52
  %205 = bitcast i32* %204 to <4 x i32>*
  store <4 x i32> %203, <4 x i32>* %205, align 4
  %206 = getelementptr inbounds [64 x i16], [64 x i16]* %5, i64 0, i64 56
  %207 = bitcast i16* %206 to <4 x i16>*
  %208 = load <4 x i16>, <4 x i16>* %207, align 16
  %209 = sext <4 x i16> %208 to <4 x i32>
  %210 = getelementptr inbounds i32, i32* %2, i64 56
  %211 = bitcast i32* %210 to <4 x i32>*
  store <4 x i32> %209, <4 x i32>* %211, align 4
  %212 = getelementptr inbounds [64 x i16], [64 x i16]* %5, i64 0, i64 60
  %213 = bitcast i16* %212 to <4 x i16>*
  %214 = load <4 x i16>, <4 x i16>* %213, align 8
  %215 = sext <4 x i16> %214 to <4 x i32>
  %216 = getelementptr inbounds i32, i32* %2, i64 60
  %217 = bitcast i32* %216 to <4 x i32>*
  store <4 x i32> %215, <4 x i32>* %217, align 4
  call void @llvm.lifetime.end.p0i8(i64 128, i8* nonnull %7) #4
  call void @llvm.lifetime.end.p0i8(i64 128, i8* nonnull %6) #4
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @vpx_hadamard_16x16_c(i16* nocapture readonly, i64, i32* nocapture) local_unnamed_addr #2 {
  tail call void @vpx_hadamard_8x8_c(i16* %0, i64 %1, i32* %2)
  %4 = getelementptr inbounds i16, i16* %0, i64 8
  %5 = getelementptr inbounds i32, i32* %2, i64 64
  tail call void @vpx_hadamard_8x8_c(i16* %4, i64 %1, i32* %5)
  %6 = shl nsw i64 %1, 3
  %7 = getelementptr inbounds i16, i16* %0, i64 %6
  %8 = getelementptr inbounds i32, i32* %2, i64 128
  tail call void @vpx_hadamard_8x8_c(i16* %7, i64 %1, i32* %8)
  %9 = getelementptr inbounds i16, i16* %7, i64 8
  %10 = getelementptr inbounds i32, i32* %2, i64 192
  tail call void @vpx_hadamard_8x8_c(i16* %9, i64 %1, i32* %10)
  br label %11

11:                                               ; preds = %11, %3
  %12 = phi i64 [ 0, %3 ], [ %41, %11 ]
  %13 = getelementptr i32, i32* %2, i64 %12
  %14 = bitcast i32* %13 to <4 x i32>*
  %15 = load <4 x i32>, <4 x i32>* %14, align 4
  %16 = getelementptr inbounds i32, i32* %13, i64 64
  %17 = bitcast i32* %16 to <4 x i32>*
  %18 = load <4 x i32>, <4 x i32>* %17, align 4
  %19 = getelementptr inbounds i32, i32* %13, i64 128
  %20 = bitcast i32* %19 to <4 x i32>*
  %21 = load <4 x i32>, <4 x i32>* %20, align 4
  %22 = getelementptr inbounds i32, i32* %13, i64 192
  %23 = bitcast i32* %22 to <4 x i32>*
  %24 = load <4 x i32>, <4 x i32>* %23, align 4
  %25 = add nsw <4 x i32> %18, %15
  %26 = ashr <4 x i32> %25, <i32 1, i32 1, i32 1, i32 1>
  %27 = sub nsw <4 x i32> %15, %18
  %28 = ashr <4 x i32> %27, <i32 1, i32 1, i32 1, i32 1>
  %29 = add nsw <4 x i32> %24, %21
  %30 = ashr <4 x i32> %29, <i32 1, i32 1, i32 1, i32 1>
  %31 = sub nsw <4 x i32> %21, %24
  %32 = ashr <4 x i32> %31, <i32 1, i32 1, i32 1, i32 1>
  %33 = add nsw <4 x i32> %30, %26
  %34 = bitcast i32* %13 to <4 x i32>*
  store <4 x i32> %33, <4 x i32>* %34, align 4
  %35 = add nsw <4 x i32> %32, %28
  %36 = bitcast i32* %16 to <4 x i32>*
  store <4 x i32> %35, <4 x i32>* %36, align 4
  %37 = sub nsw <4 x i32> %26, %30
  %38 = bitcast i32* %19 to <4 x i32>*
  store <4 x i32> %37, <4 x i32>* %38, align 4
  %39 = sub nsw <4 x i32> %28, %32
  %40 = bitcast i32* %22 to <4 x i32>*
  store <4 x i32> %39, <4 x i32>* %40, align 4
  %41 = add i64 %12, 4
  %42 = icmp eq i64 %41, 64
  br i1 %42, label %43, label %11, !llvm.loop !5

43:                                               ; preds = %11
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @vpx_hadamard_32x32_c(i16* nocapture readonly, i64, i32* nocapture) local_unnamed_addr #2 {
  tail call void @vpx_hadamard_16x16_c(i16* %0, i64 %1, i32* %2)
  %4 = getelementptr inbounds i16, i16* %0, i64 16
  %5 = getelementptr inbounds i32, i32* %2, i64 256
  tail call void @vpx_hadamard_16x16_c(i16* %4, i64 %1, i32* %5)
  %6 = shl nsw i64 %1, 4
  %7 = getelementptr inbounds i16, i16* %0, i64 %6
  %8 = getelementptr inbounds i32, i32* %2, i64 512
  tail call void @vpx_hadamard_16x16_c(i16* %7, i64 %1, i32* %8)
  %9 = getelementptr inbounds i16, i16* %7, i64 16
  %10 = getelementptr inbounds i32, i32* %2, i64 768
  tail call void @vpx_hadamard_16x16_c(i16* %9, i64 %1, i32* %10)
  br label %11

11:                                               ; preds = %11, %3
  %12 = phi i64 [ 0, %3 ], [ %41, %11 ]
  %13 = getelementptr i32, i32* %2, i64 %12
  %14 = bitcast i32* %13 to <4 x i32>*
  %15 = load <4 x i32>, <4 x i32>* %14, align 4
  %16 = getelementptr inbounds i32, i32* %13, i64 256
  %17 = bitcast i32* %16 to <4 x i32>*
  %18 = load <4 x i32>, <4 x i32>* %17, align 4
  %19 = getelementptr inbounds i32, i32* %13, i64 512
  %20 = bitcast i32* %19 to <4 x i32>*
  %21 = load <4 x i32>, <4 x i32>* %20, align 4
  %22 = getelementptr inbounds i32, i32* %13, i64 768
  %23 = bitcast i32* %22 to <4 x i32>*
  %24 = load <4 x i32>, <4 x i32>* %23, align 4
  %25 = add nsw <4 x i32> %18, %15
  %26 = ashr <4 x i32> %25, <i32 2, i32 2, i32 2, i32 2>
  %27 = sub nsw <4 x i32> %15, %18
  %28 = ashr <4 x i32> %27, <i32 2, i32 2, i32 2, i32 2>
  %29 = add nsw <4 x i32> %24, %21
  %30 = ashr <4 x i32> %29, <i32 2, i32 2, i32 2, i32 2>
  %31 = sub nsw <4 x i32> %21, %24
  %32 = ashr <4 x i32> %31, <i32 2, i32 2, i32 2, i32 2>
  %33 = add nsw <4 x i32> %30, %26
  %34 = bitcast i32* %13 to <4 x i32>*
  store <4 x i32> %33, <4 x i32>* %34, align 4
  %35 = add nsw <4 x i32> %32, %28
  %36 = bitcast i32* %16 to <4 x i32>*
  store <4 x i32> %35, <4 x i32>* %36, align 4
  %37 = sub nsw <4 x i32> %26, %30
  %38 = bitcast i32* %19 to <4 x i32>*
  store <4 x i32> %37, <4 x i32>* %38, align 4
  %39 = sub nsw <4 x i32> %28, %32
  %40 = bitcast i32* %22 to <4 x i32>*
  store <4 x i32> %39, <4 x i32>* %40, align 4
  %41 = add i64 %12, 4
  %42 = icmp eq i64 %41, 256
  br i1 %42, label %43, label %11, !llvm.loop !6

43:                                               ; preds = %11
  ret void
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden i32 @vpx_highbd_satd_c(i32* nocapture readonly, i32) local_unnamed_addr #0 {
  %3 = icmp sgt i32 %1, 0
  br i1 %3, label %4, label %99

4:                                                ; preds = %2
  %5 = zext i32 %1 to i64
  %6 = icmp ult i32 %1, 8
  br i1 %6, label %85, label %7

7:                                                ; preds = %4
  %8 = and i64 %5, 4294967288
  %9 = add nsw i64 %8, -8
  %10 = lshr exact i64 %9, 3
  %11 = add nuw nsw i64 %10, 1
  %12 = and i64 %11, 1
  %13 = icmp eq i64 %9, 0
  br i1 %13, label %53, label %14

14:                                               ; preds = %7
  %15 = sub nuw nsw i64 %11, %12
  br label %16

16:                                               ; preds = %16, %14
  %17 = phi i64 [ 0, %14 ], [ %50, %16 ]
  %18 = phi <4 x i32> [ zeroinitializer, %14 ], [ %48, %16 ]
  %19 = phi <4 x i32> [ zeroinitializer, %14 ], [ %49, %16 ]
  %20 = phi i64 [ %15, %14 ], [ %51, %16 ]
  %21 = getelementptr inbounds i32, i32* %0, i64 %17
  %22 = bitcast i32* %21 to <4 x i32>*
  %23 = load <4 x i32>, <4 x i32>* %22, align 4
  %24 = getelementptr inbounds i32, i32* %21, i64 4
  %25 = bitcast i32* %24 to <4 x i32>*
  %26 = load <4 x i32>, <4 x i32>* %25, align 4
  %27 = icmp slt <4 x i32> %23, zeroinitializer
  %28 = icmp slt <4 x i32> %26, zeroinitializer
  %29 = sub nsw <4 x i32> zeroinitializer, %23
  %30 = sub nsw <4 x i32> zeroinitializer, %26
  %31 = select <4 x i1> %27, <4 x i32> %29, <4 x i32> %23
  %32 = select <4 x i1> %28, <4 x i32> %30, <4 x i32> %26
  %33 = add nuw nsw <4 x i32> %31, %18
  %34 = add nuw nsw <4 x i32> %32, %19
  %35 = or i64 %17, 8
  %36 = getelementptr inbounds i32, i32* %0, i64 %35
  %37 = bitcast i32* %36 to <4 x i32>*
  %38 = load <4 x i32>, <4 x i32>* %37, align 4
  %39 = getelementptr inbounds i32, i32* %36, i64 4
  %40 = bitcast i32* %39 to <4 x i32>*
  %41 = load <4 x i32>, <4 x i32>* %40, align 4
  %42 = icmp slt <4 x i32> %38, zeroinitializer
  %43 = icmp slt <4 x i32> %41, zeroinitializer
  %44 = sub nsw <4 x i32> zeroinitializer, %38
  %45 = sub nsw <4 x i32> zeroinitializer, %41
  %46 = select <4 x i1> %42, <4 x i32> %44, <4 x i32> %38
  %47 = select <4 x i1> %43, <4 x i32> %45, <4 x i32> %41
  %48 = add nuw nsw <4 x i32> %46, %33
  %49 = add nuw nsw <4 x i32> %47, %34
  %50 = add i64 %17, 16
  %51 = add i64 %20, -2
  %52 = icmp eq i64 %51, 0
  br i1 %52, label %53, label %16, !llvm.loop !7

53:                                               ; preds = %16, %7
  %54 = phi <4 x i32> [ undef, %7 ], [ %48, %16 ]
  %55 = phi <4 x i32> [ undef, %7 ], [ %49, %16 ]
  %56 = phi i64 [ 0, %7 ], [ %50, %16 ]
  %57 = phi <4 x i32> [ zeroinitializer, %7 ], [ %48, %16 ]
  %58 = phi <4 x i32> [ zeroinitializer, %7 ], [ %49, %16 ]
  %59 = icmp eq i64 %12, 0
  br i1 %59, label %75, label %60

60:                                               ; preds = %53
  %61 = getelementptr inbounds i32, i32* %0, i64 %56
  %62 = bitcast i32* %61 to <4 x i32>*
  %63 = load <4 x i32>, <4 x i32>* %62, align 4
  %64 = getelementptr inbounds i32, i32* %61, i64 4
  %65 = bitcast i32* %64 to <4 x i32>*
  %66 = load <4 x i32>, <4 x i32>* %65, align 4
  %67 = icmp slt <4 x i32> %66, zeroinitializer
  %68 = sub nsw <4 x i32> zeroinitializer, %66
  %69 = select <4 x i1> %67, <4 x i32> %68, <4 x i32> %66
  %70 = add nuw nsw <4 x i32> %69, %58
  %71 = icmp slt <4 x i32> %63, zeroinitializer
  %72 = sub nsw <4 x i32> zeroinitializer, %63
  %73 = select <4 x i1> %71, <4 x i32> %72, <4 x i32> %63
  %74 = add nuw nsw <4 x i32> %73, %57
  br label %75

75:                                               ; preds = %53, %60
  %76 = phi <4 x i32> [ %54, %53 ], [ %74, %60 ]
  %77 = phi <4 x i32> [ %55, %53 ], [ %70, %60 ]
  %78 = add nuw <4 x i32> %77, %76
  %79 = shufflevector <4 x i32> %78, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %80 = add <4 x i32> %78, %79
  %81 = shufflevector <4 x i32> %80, <4 x i32> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %82 = add <4 x i32> %80, %81
  %83 = extractelement <4 x i32> %82, i32 0
  %84 = icmp eq i64 %8, %5
  br i1 %84, label %99, label %85

85:                                               ; preds = %75, %4
  %86 = phi i64 [ 0, %4 ], [ %8, %75 ]
  %87 = phi i32 [ 0, %4 ], [ %83, %75 ]
  br label %88

88:                                               ; preds = %85, %88
  %89 = phi i64 [ %97, %88 ], [ %86, %85 ]
  %90 = phi i32 [ %96, %88 ], [ %87, %85 ]
  %91 = getelementptr inbounds i32, i32* %0, i64 %89
  %92 = load i32, i32* %91, align 4
  %93 = icmp slt i32 %92, 0
  %94 = sub nsw i32 0, %92
  %95 = select i1 %93, i32 %94, i32 %92
  %96 = add nuw nsw i32 %95, %90
  %97 = add nuw nsw i64 %89, 1
  %98 = icmp eq i64 %97, %5
  br i1 %98, label %99, label %88, !llvm.loop !8

99:                                               ; preds = %88, %75, %2
  %100 = phi i32 [ 0, %2 ], [ %83, %75 ], [ %96, %88 ]
  ret i32 %100
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden i32 @vpx_satd_c(i32* nocapture readonly, i32) local_unnamed_addr #0 {
  %3 = icmp sgt i32 %1, 0
  br i1 %3, label %4, label %99

4:                                                ; preds = %2
  %5 = zext i32 %1 to i64
  %6 = icmp ult i32 %1, 8
  br i1 %6, label %85, label %7

7:                                                ; preds = %4
  %8 = and i64 %5, 4294967288
  %9 = add nsw i64 %8, -8
  %10 = lshr exact i64 %9, 3
  %11 = add nuw nsw i64 %10, 1
  %12 = and i64 %11, 1
  %13 = icmp eq i64 %9, 0
  br i1 %13, label %53, label %14

14:                                               ; preds = %7
  %15 = sub nuw nsw i64 %11, %12
  br label %16

16:                                               ; preds = %16, %14
  %17 = phi i64 [ 0, %14 ], [ %50, %16 ]
  %18 = phi <4 x i32> [ zeroinitializer, %14 ], [ %48, %16 ]
  %19 = phi <4 x i32> [ zeroinitializer, %14 ], [ %49, %16 ]
  %20 = phi i64 [ %15, %14 ], [ %51, %16 ]
  %21 = getelementptr inbounds i32, i32* %0, i64 %17
  %22 = bitcast i32* %21 to <4 x i32>*
  %23 = load <4 x i32>, <4 x i32>* %22, align 4
  %24 = getelementptr inbounds i32, i32* %21, i64 4
  %25 = bitcast i32* %24 to <4 x i32>*
  %26 = load <4 x i32>, <4 x i32>* %25, align 4
  %27 = icmp slt <4 x i32> %23, zeroinitializer
  %28 = icmp slt <4 x i32> %26, zeroinitializer
  %29 = sub nsw <4 x i32> zeroinitializer, %23
  %30 = sub nsw <4 x i32> zeroinitializer, %26
  %31 = select <4 x i1> %27, <4 x i32> %29, <4 x i32> %23
  %32 = select <4 x i1> %28, <4 x i32> %30, <4 x i32> %26
  %33 = add nuw nsw <4 x i32> %31, %18
  %34 = add nuw nsw <4 x i32> %32, %19
  %35 = or i64 %17, 8
  %36 = getelementptr inbounds i32, i32* %0, i64 %35
  %37 = bitcast i32* %36 to <4 x i32>*
  %38 = load <4 x i32>, <4 x i32>* %37, align 4
  %39 = getelementptr inbounds i32, i32* %36, i64 4
  %40 = bitcast i32* %39 to <4 x i32>*
  %41 = load <4 x i32>, <4 x i32>* %40, align 4
  %42 = icmp slt <4 x i32> %38, zeroinitializer
  %43 = icmp slt <4 x i32> %41, zeroinitializer
  %44 = sub nsw <4 x i32> zeroinitializer, %38
  %45 = sub nsw <4 x i32> zeroinitializer, %41
  %46 = select <4 x i1> %42, <4 x i32> %44, <4 x i32> %38
  %47 = select <4 x i1> %43, <4 x i32> %45, <4 x i32> %41
  %48 = add nuw nsw <4 x i32> %46, %33
  %49 = add nuw nsw <4 x i32> %47, %34
  %50 = add i64 %17, 16
  %51 = add i64 %20, -2
  %52 = icmp eq i64 %51, 0
  br i1 %52, label %53, label %16, !llvm.loop !10

53:                                               ; preds = %16, %7
  %54 = phi <4 x i32> [ undef, %7 ], [ %48, %16 ]
  %55 = phi <4 x i32> [ undef, %7 ], [ %49, %16 ]
  %56 = phi i64 [ 0, %7 ], [ %50, %16 ]
  %57 = phi <4 x i32> [ zeroinitializer, %7 ], [ %48, %16 ]
  %58 = phi <4 x i32> [ zeroinitializer, %7 ], [ %49, %16 ]
  %59 = icmp eq i64 %12, 0
  br i1 %59, label %75, label %60

60:                                               ; preds = %53
  %61 = getelementptr inbounds i32, i32* %0, i64 %56
  %62 = bitcast i32* %61 to <4 x i32>*
  %63 = load <4 x i32>, <4 x i32>* %62, align 4
  %64 = getelementptr inbounds i32, i32* %61, i64 4
  %65 = bitcast i32* %64 to <4 x i32>*
  %66 = load <4 x i32>, <4 x i32>* %65, align 4
  %67 = icmp slt <4 x i32> %66, zeroinitializer
  %68 = sub nsw <4 x i32> zeroinitializer, %66
  %69 = select <4 x i1> %67, <4 x i32> %68, <4 x i32> %66
  %70 = add nuw nsw <4 x i32> %69, %58
  %71 = icmp slt <4 x i32> %63, zeroinitializer
  %72 = sub nsw <4 x i32> zeroinitializer, %63
  %73 = select <4 x i1> %71, <4 x i32> %72, <4 x i32> %63
  %74 = add nuw nsw <4 x i32> %73, %57
  br label %75

75:                                               ; preds = %53, %60
  %76 = phi <4 x i32> [ %54, %53 ], [ %74, %60 ]
  %77 = phi <4 x i32> [ %55, %53 ], [ %70, %60 ]
  %78 = add nuw <4 x i32> %77, %76
  %79 = shufflevector <4 x i32> %78, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %80 = add <4 x i32> %78, %79
  %81 = shufflevector <4 x i32> %80, <4 x i32> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %82 = add <4 x i32> %80, %81
  %83 = extractelement <4 x i32> %82, i32 0
  %84 = icmp eq i64 %8, %5
  br i1 %84, label %99, label %85

85:                                               ; preds = %75, %4
  %86 = phi i64 [ 0, %4 ], [ %8, %75 ]
  %87 = phi i32 [ 0, %4 ], [ %83, %75 ]
  br label %88

88:                                               ; preds = %85, %88
  %89 = phi i64 [ %97, %88 ], [ %86, %85 ]
  %90 = phi i32 [ %96, %88 ], [ %87, %85 ]
  %91 = getelementptr inbounds i32, i32* %0, i64 %89
  %92 = load i32, i32* %91, align 4
  %93 = icmp slt i32 %92, 0
  %94 = sub nsw i32 0, %92
  %95 = select i1 %93, i32 %94, i32 %92
  %96 = add nuw nsw i32 %95, %90
  %97 = add nuw nsw i64 %89, 1
  %98 = icmp eq i64 %97, %5
  br i1 %98, label %99, label %88, !llvm.loop !11

99:                                               ; preds = %88, %75, %2
  %100 = phi i32 [ 0, %2 ], [ %83, %75 ], [ %96, %88 ]
  ret i32 %100
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @vpx_int_pro_row_c(i16* nocapture, i8* nocapture readonly, i32, i32) local_unnamed_addr #3 {
  %5 = ashr i32 %3, 1
  %6 = icmp sgt i32 %3, 0
  %7 = sext i32 %2 to i64
  %8 = zext i32 %3 to i64
  %9 = add nsw i64 %8, -1
  %10 = and i64 %8, 3
  %11 = icmp ult i64 %9, 3
  %12 = sub nsw i64 %8, %10
  %13 = icmp eq i64 %10, 0
  br label %14

14:                                               ; preds = %65, %4
  %15 = phi i64 [ 0, %4 ], [ %71, %65 ]
  %16 = phi i8* [ %1, %4 ], [ %70, %65 ]
  %17 = getelementptr inbounds i16, i16* %0, i64 %15
  store i16 0, i16* %17, align 2
  br i1 %6, label %18, label %65

18:                                               ; preds = %14
  br i1 %11, label %49, label %19

19:                                               ; preds = %18, %19
  %20 = phi i16 [ %45, %19 ], [ 0, %18 ]
  %21 = phi i64 [ %46, %19 ], [ 0, %18 ]
  %22 = phi i64 [ %47, %19 ], [ %12, %18 ]
  %23 = mul nsw i64 %21, %7
  %24 = getelementptr inbounds i8, i8* %16, i64 %23
  %25 = load i8, i8* %24, align 1
  %26 = zext i8 %25 to i16
  %27 = add i16 %20, %26
  store i16 %27, i16* %17, align 2
  %28 = or i64 %21, 1
  %29 = mul nsw i64 %28, %7
  %30 = getelementptr inbounds i8, i8* %16, i64 %29
  %31 = load i8, i8* %30, align 1
  %32 = zext i8 %31 to i16
  %33 = add i16 %27, %32
  store i16 %33, i16* %17, align 2
  %34 = or i64 %21, 2
  %35 = mul nsw i64 %34, %7
  %36 = getelementptr inbounds i8, i8* %16, i64 %35
  %37 = load i8, i8* %36, align 1
  %38 = zext i8 %37 to i16
  %39 = add i16 %33, %38
  store i16 %39, i16* %17, align 2
  %40 = or i64 %21, 3
  %41 = mul nsw i64 %40, %7
  %42 = getelementptr inbounds i8, i8* %16, i64 %41
  %43 = load i8, i8* %42, align 1
  %44 = zext i8 %43 to i16
  %45 = add i16 %39, %44
  store i16 %45, i16* %17, align 2
  %46 = add nuw nsw i64 %21, 4
  %47 = add i64 %22, -4
  %48 = icmp eq i64 %47, 0
  br i1 %48, label %49, label %19

49:                                               ; preds = %19, %18
  %50 = phi i16 [ undef, %18 ], [ %45, %19 ]
  %51 = phi i16 [ 0, %18 ], [ %45, %19 ]
  %52 = phi i64 [ 0, %18 ], [ %46, %19 ]
  br i1 %13, label %65, label %53

53:                                               ; preds = %49, %53
  %54 = phi i16 [ %61, %53 ], [ %51, %49 ]
  %55 = phi i64 [ %62, %53 ], [ %52, %49 ]
  %56 = phi i64 [ %63, %53 ], [ %10, %49 ]
  %57 = mul nsw i64 %55, %7
  %58 = getelementptr inbounds i8, i8* %16, i64 %57
  %59 = load i8, i8* %58, align 1
  %60 = zext i8 %59 to i16
  %61 = add i16 %54, %60
  store i16 %61, i16* %17, align 2
  %62 = add nuw nsw i64 %55, 1
  %63 = add i64 %56, -1
  %64 = icmp eq i64 %63, 0
  br i1 %64, label %65, label %53, !llvm.loop !12

65:                                               ; preds = %49, %53, %14
  %66 = phi i16 [ 0, %14 ], [ %50, %49 ], [ %61, %53 ]
  %67 = sext i16 %66 to i32
  %68 = sdiv i32 %67, %5
  %69 = trunc i32 %68 to i16
  store i16 %69, i16* %17, align 2
  %70 = getelementptr inbounds i8, i8* %16, i64 1
  %71 = add nuw nsw i64 %15, 1
  %72 = icmp eq i64 %71, 16
  br i1 %72, label %73, label %14

73:                                               ; preds = %65
  ret void
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden signext i16 @vpx_int_pro_col_c(i8* nocapture readonly, i32) local_unnamed_addr #0 {
  %3 = icmp sgt i32 %1, 0
  br i1 %3, label %4, label %87

4:                                                ; preds = %2
  %5 = zext i32 %1 to i64
  %6 = icmp ult i32 %1, 16
  br i1 %6, label %75, label %7

7:                                                ; preds = %4
  %8 = and i64 %5, 4294967280
  %9 = add nsw i64 %8, -16
  %10 = lshr exact i64 %9, 4
  %11 = add nuw nsw i64 %10, 1
  %12 = and i64 %11, 1
  %13 = icmp eq i64 %9, 0
  br i1 %13, label %45, label %14

14:                                               ; preds = %7
  %15 = sub nuw nsw i64 %11, %12
  br label %16

16:                                               ; preds = %16, %14
  %17 = phi i64 [ 0, %14 ], [ %42, %16 ]
  %18 = phi <8 x i16> [ zeroinitializer, %14 ], [ %40, %16 ]
  %19 = phi <8 x i16> [ zeroinitializer, %14 ], [ %41, %16 ]
  %20 = phi i64 [ %15, %14 ], [ %43, %16 ]
  %21 = getelementptr inbounds i8, i8* %0, i64 %17
  %22 = bitcast i8* %21 to <8 x i8>*
  %23 = load <8 x i8>, <8 x i8>* %22, align 1
  %24 = getelementptr inbounds i8, i8* %21, i64 8
  %25 = bitcast i8* %24 to <8 x i8>*
  %26 = load <8 x i8>, <8 x i8>* %25, align 1
  %27 = zext <8 x i8> %23 to <8 x i16>
  %28 = zext <8 x i8> %26 to <8 x i16>
  %29 = add <8 x i16> %18, %27
  %30 = add <8 x i16> %19, %28
  %31 = or i64 %17, 16
  %32 = getelementptr inbounds i8, i8* %0, i64 %31
  %33 = bitcast i8* %32 to <8 x i8>*
  %34 = load <8 x i8>, <8 x i8>* %33, align 1
  %35 = getelementptr inbounds i8, i8* %32, i64 8
  %36 = bitcast i8* %35 to <8 x i8>*
  %37 = load <8 x i8>, <8 x i8>* %36, align 1
  %38 = zext <8 x i8> %34 to <8 x i16>
  %39 = zext <8 x i8> %37 to <8 x i16>
  %40 = add <8 x i16> %29, %38
  %41 = add <8 x i16> %30, %39
  %42 = add i64 %17, 32
  %43 = add i64 %20, -2
  %44 = icmp eq i64 %43, 0
  br i1 %44, label %45, label %16, !llvm.loop !14

45:                                               ; preds = %16, %7
  %46 = phi <8 x i16> [ undef, %7 ], [ %40, %16 ]
  %47 = phi <8 x i16> [ undef, %7 ], [ %41, %16 ]
  %48 = phi i64 [ 0, %7 ], [ %42, %16 ]
  %49 = phi <8 x i16> [ zeroinitializer, %7 ], [ %40, %16 ]
  %50 = phi <8 x i16> [ zeroinitializer, %7 ], [ %41, %16 ]
  %51 = icmp eq i64 %12, 0
  br i1 %51, label %63, label %52

52:                                               ; preds = %45
  %53 = getelementptr inbounds i8, i8* %0, i64 %48
  %54 = getelementptr inbounds i8, i8* %53, i64 8
  %55 = bitcast i8* %54 to <8 x i8>*
  %56 = load <8 x i8>, <8 x i8>* %55, align 1
  %57 = zext <8 x i8> %56 to <8 x i16>
  %58 = add <8 x i16> %50, %57
  %59 = bitcast i8* %53 to <8 x i8>*
  %60 = load <8 x i8>, <8 x i8>* %59, align 1
  %61 = zext <8 x i8> %60 to <8 x i16>
  %62 = add <8 x i16> %49, %61
  br label %63

63:                                               ; preds = %45, %52
  %64 = phi <8 x i16> [ %46, %45 ], [ %62, %52 ]
  %65 = phi <8 x i16> [ %47, %45 ], [ %58, %52 ]
  %66 = add <8 x i16> %65, %64
  %67 = shufflevector <8 x i16> %66, <8 x i16> undef, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 undef, i32 undef, i32 undef, i32 undef>
  %68 = add <8 x i16> %66, %67
  %69 = shufflevector <8 x i16> %68, <8 x i16> undef, <8 x i32> <i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %70 = add <8 x i16> %68, %69
  %71 = shufflevector <8 x i16> %70, <8 x i16> undef, <8 x i32> <i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %72 = add <8 x i16> %70, %71
  %73 = extractelement <8 x i16> %72, i32 0
  %74 = icmp eq i64 %8, %5
  br i1 %74, label %87, label %75

75:                                               ; preds = %63, %4
  %76 = phi i64 [ 0, %4 ], [ %8, %63 ]
  %77 = phi i16 [ 0, %4 ], [ %73, %63 ]
  br label %78

78:                                               ; preds = %75, %78
  %79 = phi i64 [ %85, %78 ], [ %76, %75 ]
  %80 = phi i16 [ %84, %78 ], [ %77, %75 ]
  %81 = getelementptr inbounds i8, i8* %0, i64 %79
  %82 = load i8, i8* %81, align 1
  %83 = zext i8 %82 to i16
  %84 = add i16 %80, %83
  %85 = add nuw nsw i64 %79, 1
  %86 = icmp eq i64 %85, %5
  br i1 %86, label %87, label %78, !llvm.loop !15

87:                                               ; preds = %78, %63, %2
  %88 = phi i16 [ 0, %2 ], [ %73, %63 ], [ %84, %78 ]
  ret i16 %88
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden i32 @vpx_vector_var_c(i16* nocapture readonly, i16* nocapture readonly, i32) local_unnamed_addr #0 {
  %4 = shl i32 4, %2
  %5 = icmp sgt i32 %4, 0
  br i1 %5, label %6, label %77

6:                                                ; preds = %3
  %7 = zext i32 %4 to i64
  %8 = icmp ult i32 %4, 8
  br i1 %8, label %57, label %9

9:                                                ; preds = %6
  %10 = and i64 %7, 4294967288
  br label %11

11:                                               ; preds = %11, %9
  %12 = phi i64 [ 0, %9 ], [ %41, %11 ]
  %13 = phi <4 x i32> [ zeroinitializer, %9 ], [ %35, %11 ]
  %14 = phi <4 x i32> [ zeroinitializer, %9 ], [ %36, %11 ]
  %15 = phi <4 x i32> [ zeroinitializer, %9 ], [ %39, %11 ]
  %16 = phi <4 x i32> [ zeroinitializer, %9 ], [ %40, %11 ]
  %17 = getelementptr inbounds i16, i16* %0, i64 %12
  %18 = bitcast i16* %17 to <4 x i16>*
  %19 = load <4 x i16>, <4 x i16>* %18, align 2
  %20 = getelementptr inbounds i16, i16* %17, i64 4
  %21 = bitcast i16* %20 to <4 x i16>*
  %22 = load <4 x i16>, <4 x i16>* %21, align 2
  %23 = sext <4 x i16> %19 to <4 x i32>
  %24 = sext <4 x i16> %22 to <4 x i32>
  %25 = getelementptr inbounds i16, i16* %1, i64 %12
  %26 = bitcast i16* %25 to <4 x i16>*
  %27 = load <4 x i16>, <4 x i16>* %26, align 2
  %28 = getelementptr inbounds i16, i16* %25, i64 4
  %29 = bitcast i16* %28 to <4 x i16>*
  %30 = load <4 x i16>, <4 x i16>* %29, align 2
  %31 = sext <4 x i16> %27 to <4 x i32>
  %32 = sext <4 x i16> %30 to <4 x i32>
  %33 = sub nsw <4 x i32> %23, %31
  %34 = sub nsw <4 x i32> %24, %32
  %35 = add nsw <4 x i32> %33, %13
  %36 = add nsw <4 x i32> %34, %14
  %37 = mul nsw <4 x i32> %33, %33
  %38 = mul nsw <4 x i32> %34, %34
  %39 = add nuw nsw <4 x i32> %37, %15
  %40 = add nuw nsw <4 x i32> %38, %16
  %41 = add i64 %12, 8
  %42 = icmp eq i64 %41, %10
  br i1 %42, label %43, label %11, !llvm.loop !16

43:                                               ; preds = %11
  %44 = add nuw <4 x i32> %40, %39
  %45 = shufflevector <4 x i32> %44, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %46 = add <4 x i32> %44, %45
  %47 = shufflevector <4 x i32> %46, <4 x i32> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %48 = add <4 x i32> %46, %47
  %49 = extractelement <4 x i32> %48, i32 0
  %50 = add <4 x i32> %36, %35
  %51 = shufflevector <4 x i32> %50, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %52 = add <4 x i32> %50, %51
  %53 = shufflevector <4 x i32> %52, <4 x i32> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %54 = add <4 x i32> %52, %53
  %55 = extractelement <4 x i32> %54, i32 0
  %56 = icmp eq i64 %10, %7
  br i1 %56, label %77, label %57

57:                                               ; preds = %43, %6
  %58 = phi i64 [ 0, %6 ], [ %10, %43 ]
  %59 = phi i32 [ 0, %6 ], [ %55, %43 ]
  %60 = phi i32 [ 0, %6 ], [ %49, %43 ]
  br label %61

61:                                               ; preds = %57, %61
  %62 = phi i64 [ %75, %61 ], [ %58, %57 ]
  %63 = phi i32 [ %72, %61 ], [ %59, %57 ]
  %64 = phi i32 [ %74, %61 ], [ %60, %57 ]
  %65 = getelementptr inbounds i16, i16* %0, i64 %62
  %66 = load i16, i16* %65, align 2
  %67 = sext i16 %66 to i32
  %68 = getelementptr inbounds i16, i16* %1, i64 %62
  %69 = load i16, i16* %68, align 2
  %70 = sext i16 %69 to i32
  %71 = sub nsw i32 %67, %70
  %72 = add nsw i32 %71, %63
  %73 = mul nsw i32 %71, %71
  %74 = add nuw nsw i32 %73, %64
  %75 = add nuw nsw i64 %62, 1
  %76 = icmp eq i64 %75, %7
  br i1 %76, label %77, label %61, !llvm.loop !17

77:                                               ; preds = %61, %43, %3
  %78 = phi i32 [ 0, %3 ], [ %49, %43 ], [ %74, %61 ]
  %79 = phi i32 [ 0, %3 ], [ %55, %43 ], [ %72, %61 ]
  %80 = mul nsw i32 %79, %79
  %81 = add nsw i32 %2, 2
  %82 = lshr i32 %80, %81
  %83 = sub nsw i32 %78, %82
  ret i32 %83
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @vpx_minmax_8x8_c(i8* nocapture readonly, i32, i8* nocapture readonly, i32, i32* nocapture, i32* nocapture) local_unnamed_addr #3 {
  store i32 255, i32* %4, align 4
  store i32 0, i32* %5, align 4
  %7 = sext i32 %1 to i64
  %8 = sext i32 %3 to i64
  br label %9

9:                                                ; preds = %9, %6
  %10 = phi i32 [ 0, %6 ], [ %139, %9 ]
  %11 = phi i8* [ %0, %6 ], [ %140, %9 ]
  %12 = phi i8* [ %2, %6 ], [ %141, %9 ]
  %13 = load i8, i8* %11, align 1
  %14 = zext i8 %13 to i32
  %15 = load i8, i8* %12, align 1
  %16 = zext i8 %15 to i32
  %17 = sub nsw i32 %14, %16
  %18 = icmp slt i32 %17, 0
  %19 = sub nsw i32 0, %17
  %20 = select i1 %18, i32 %19, i32 %17
  %21 = load i32, i32* %4, align 4
  %22 = icmp slt i32 %20, %21
  %23 = select i1 %22, i32 %20, i32 %21
  store i32 %23, i32* %4, align 4
  %24 = load i32, i32* %5, align 4
  %25 = icmp sgt i32 %20, %24
  %26 = select i1 %25, i32 %20, i32 %24
  store i32 %26, i32* %5, align 4
  %27 = getelementptr inbounds i8, i8* %11, i64 1
  %28 = load i8, i8* %27, align 1
  %29 = zext i8 %28 to i32
  %30 = getelementptr inbounds i8, i8* %12, i64 1
  %31 = load i8, i8* %30, align 1
  %32 = zext i8 %31 to i32
  %33 = sub nsw i32 %29, %32
  %34 = icmp slt i32 %33, 0
  %35 = sub nsw i32 0, %33
  %36 = select i1 %34, i32 %35, i32 %33
  %37 = load i32, i32* %4, align 4
  %38 = icmp slt i32 %36, %37
  %39 = select i1 %38, i32 %36, i32 %37
  store i32 %39, i32* %4, align 4
  %40 = load i32, i32* %5, align 4
  %41 = icmp sgt i32 %36, %40
  %42 = select i1 %41, i32 %36, i32 %40
  store i32 %42, i32* %5, align 4
  %43 = getelementptr inbounds i8, i8* %11, i64 2
  %44 = load i8, i8* %43, align 1
  %45 = zext i8 %44 to i32
  %46 = getelementptr inbounds i8, i8* %12, i64 2
  %47 = load i8, i8* %46, align 1
  %48 = zext i8 %47 to i32
  %49 = sub nsw i32 %45, %48
  %50 = icmp slt i32 %49, 0
  %51 = sub nsw i32 0, %49
  %52 = select i1 %50, i32 %51, i32 %49
  %53 = load i32, i32* %4, align 4
  %54 = icmp slt i32 %52, %53
  %55 = select i1 %54, i32 %52, i32 %53
  store i32 %55, i32* %4, align 4
  %56 = load i32, i32* %5, align 4
  %57 = icmp sgt i32 %52, %56
  %58 = select i1 %57, i32 %52, i32 %56
  store i32 %58, i32* %5, align 4
  %59 = getelementptr inbounds i8, i8* %11, i64 3
  %60 = load i8, i8* %59, align 1
  %61 = zext i8 %60 to i32
  %62 = getelementptr inbounds i8, i8* %12, i64 3
  %63 = load i8, i8* %62, align 1
  %64 = zext i8 %63 to i32
  %65 = sub nsw i32 %61, %64
  %66 = icmp slt i32 %65, 0
  %67 = sub nsw i32 0, %65
  %68 = select i1 %66, i32 %67, i32 %65
  %69 = load i32, i32* %4, align 4
  %70 = icmp slt i32 %68, %69
  %71 = select i1 %70, i32 %68, i32 %69
  store i32 %71, i32* %4, align 4
  %72 = load i32, i32* %5, align 4
  %73 = icmp sgt i32 %68, %72
  %74 = select i1 %73, i32 %68, i32 %72
  store i32 %74, i32* %5, align 4
  %75 = getelementptr inbounds i8, i8* %11, i64 4
  %76 = load i8, i8* %75, align 1
  %77 = zext i8 %76 to i32
  %78 = getelementptr inbounds i8, i8* %12, i64 4
  %79 = load i8, i8* %78, align 1
  %80 = zext i8 %79 to i32
  %81 = sub nsw i32 %77, %80
  %82 = icmp slt i32 %81, 0
  %83 = sub nsw i32 0, %81
  %84 = select i1 %82, i32 %83, i32 %81
  %85 = load i32, i32* %4, align 4
  %86 = icmp slt i32 %84, %85
  %87 = select i1 %86, i32 %84, i32 %85
  store i32 %87, i32* %4, align 4
  %88 = load i32, i32* %5, align 4
  %89 = icmp sgt i32 %84, %88
  %90 = select i1 %89, i32 %84, i32 %88
  store i32 %90, i32* %5, align 4
  %91 = getelementptr inbounds i8, i8* %11, i64 5
  %92 = load i8, i8* %91, align 1
  %93 = zext i8 %92 to i32
  %94 = getelementptr inbounds i8, i8* %12, i64 5
  %95 = load i8, i8* %94, align 1
  %96 = zext i8 %95 to i32
  %97 = sub nsw i32 %93, %96
  %98 = icmp slt i32 %97, 0
  %99 = sub nsw i32 0, %97
  %100 = select i1 %98, i32 %99, i32 %97
  %101 = load i32, i32* %4, align 4
  %102 = icmp slt i32 %100, %101
  %103 = select i1 %102, i32 %100, i32 %101
  store i32 %103, i32* %4, align 4
  %104 = load i32, i32* %5, align 4
  %105 = icmp sgt i32 %100, %104
  %106 = select i1 %105, i32 %100, i32 %104
  store i32 %106, i32* %5, align 4
  %107 = getelementptr inbounds i8, i8* %11, i64 6
  %108 = load i8, i8* %107, align 1
  %109 = zext i8 %108 to i32
  %110 = getelementptr inbounds i8, i8* %12, i64 6
  %111 = load i8, i8* %110, align 1
  %112 = zext i8 %111 to i32
  %113 = sub nsw i32 %109, %112
  %114 = icmp slt i32 %113, 0
  %115 = sub nsw i32 0, %113
  %116 = select i1 %114, i32 %115, i32 %113
  %117 = load i32, i32* %4, align 4
  %118 = icmp slt i32 %116, %117
  %119 = select i1 %118, i32 %116, i32 %117
  store i32 %119, i32* %4, align 4
  %120 = load i32, i32* %5, align 4
  %121 = icmp sgt i32 %116, %120
  %122 = select i1 %121, i32 %116, i32 %120
  store i32 %122, i32* %5, align 4
  %123 = getelementptr inbounds i8, i8* %11, i64 7
  %124 = load i8, i8* %123, align 1
  %125 = zext i8 %124 to i32
  %126 = getelementptr inbounds i8, i8* %12, i64 7
  %127 = load i8, i8* %126, align 1
  %128 = zext i8 %127 to i32
  %129 = sub nsw i32 %125, %128
  %130 = icmp slt i32 %129, 0
  %131 = sub nsw i32 0, %129
  %132 = select i1 %130, i32 %131, i32 %129
  %133 = load i32, i32* %4, align 4
  %134 = icmp slt i32 %132, %133
  %135 = select i1 %134, i32 %132, i32 %133
  store i32 %135, i32* %4, align 4
  %136 = load i32, i32* %5, align 4
  %137 = icmp sgt i32 %132, %136
  %138 = select i1 %137, i32 %132, i32 %136
  store i32 %138, i32* %5, align 4
  %139 = add nuw nsw i32 %10, 1
  %140 = getelementptr inbounds i8, i8* %11, i64 %7
  %141 = getelementptr inbounds i8, i8* %12, i64 %8
  %142 = icmp eq i32 %139, 8
  br i1 %142, label %143, label %9

143:                                              ; preds = %9
  ret void
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden i32 @vpx_highbd_avg_8x8_c(i8*, i32) local_unnamed_addr #0 {
  %3 = ptrtoint i8* %0 to i64
  %4 = shl i64 %3, 1
  %5 = inttoptr i64 %4 to i16*
  %6 = sext i32 %1 to i64
  %7 = load i16, i16* %5, align 2
  %8 = zext i16 %7 to i32
  %9 = getelementptr inbounds i16, i16* %5, i64 1
  %10 = load i16, i16* %9, align 2
  %11 = zext i16 %10 to i32
  %12 = add nuw nsw i32 %8, %11
  %13 = getelementptr inbounds i16, i16* %5, i64 2
  %14 = load i16, i16* %13, align 2
  %15 = zext i16 %14 to i32
  %16 = add nuw nsw i32 %12, %15
  %17 = getelementptr inbounds i16, i16* %5, i64 3
  %18 = load i16, i16* %17, align 2
  %19 = zext i16 %18 to i32
  %20 = add nuw nsw i32 %16, %19
  %21 = getelementptr inbounds i16, i16* %5, i64 4
  %22 = load i16, i16* %21, align 2
  %23 = zext i16 %22 to i32
  %24 = add nuw nsw i32 %20, %23
  %25 = getelementptr inbounds i16, i16* %5, i64 5
  %26 = load i16, i16* %25, align 2
  %27 = zext i16 %26 to i32
  %28 = add nuw nsw i32 %24, %27
  %29 = getelementptr inbounds i16, i16* %5, i64 6
  %30 = load i16, i16* %29, align 2
  %31 = zext i16 %30 to i32
  %32 = add nuw nsw i32 %28, %31
  %33 = getelementptr inbounds i16, i16* %5, i64 7
  %34 = load i16, i16* %33, align 2
  %35 = zext i16 %34 to i32
  %36 = add nuw nsw i32 %32, %35
  %37 = getelementptr inbounds i16, i16* %5, i64 %6
  %38 = load i16, i16* %37, align 2
  %39 = zext i16 %38 to i32
  %40 = add nuw nsw i32 %36, %39
  %41 = getelementptr inbounds i16, i16* %37, i64 1
  %42 = load i16, i16* %41, align 2
  %43 = zext i16 %42 to i32
  %44 = add nuw nsw i32 %40, %43
  %45 = getelementptr inbounds i16, i16* %37, i64 2
  %46 = load i16, i16* %45, align 2
  %47 = zext i16 %46 to i32
  %48 = add nuw nsw i32 %44, %47
  %49 = getelementptr inbounds i16, i16* %37, i64 3
  %50 = load i16, i16* %49, align 2
  %51 = zext i16 %50 to i32
  %52 = add nuw nsw i32 %48, %51
  %53 = getelementptr inbounds i16, i16* %37, i64 4
  %54 = load i16, i16* %53, align 2
  %55 = zext i16 %54 to i32
  %56 = add nuw nsw i32 %52, %55
  %57 = getelementptr inbounds i16, i16* %37, i64 5
  %58 = load i16, i16* %57, align 2
  %59 = zext i16 %58 to i32
  %60 = add nuw nsw i32 %56, %59
  %61 = getelementptr inbounds i16, i16* %37, i64 6
  %62 = load i16, i16* %61, align 2
  %63 = zext i16 %62 to i32
  %64 = add nuw nsw i32 %60, %63
  %65 = getelementptr inbounds i16, i16* %37, i64 7
  %66 = load i16, i16* %65, align 2
  %67 = zext i16 %66 to i32
  %68 = add nuw nsw i32 %64, %67
  %69 = getelementptr inbounds i16, i16* %37, i64 %6
  %70 = load i16, i16* %69, align 2
  %71 = zext i16 %70 to i32
  %72 = add nuw nsw i32 %68, %71
  %73 = getelementptr inbounds i16, i16* %69, i64 1
  %74 = load i16, i16* %73, align 2
  %75 = zext i16 %74 to i32
  %76 = add nuw nsw i32 %72, %75
  %77 = getelementptr inbounds i16, i16* %69, i64 2
  %78 = load i16, i16* %77, align 2
  %79 = zext i16 %78 to i32
  %80 = add nuw nsw i32 %76, %79
  %81 = getelementptr inbounds i16, i16* %69, i64 3
  %82 = load i16, i16* %81, align 2
  %83 = zext i16 %82 to i32
  %84 = add nuw nsw i32 %80, %83
  %85 = getelementptr inbounds i16, i16* %69, i64 4
  %86 = load i16, i16* %85, align 2
  %87 = zext i16 %86 to i32
  %88 = add nuw nsw i32 %84, %87
  %89 = getelementptr inbounds i16, i16* %69, i64 5
  %90 = load i16, i16* %89, align 2
  %91 = zext i16 %90 to i32
  %92 = add nuw nsw i32 %88, %91
  %93 = getelementptr inbounds i16, i16* %69, i64 6
  %94 = load i16, i16* %93, align 2
  %95 = zext i16 %94 to i32
  %96 = add nuw nsw i32 %92, %95
  %97 = getelementptr inbounds i16, i16* %69, i64 7
  %98 = load i16, i16* %97, align 2
  %99 = zext i16 %98 to i32
  %100 = add nuw nsw i32 %96, %99
  %101 = getelementptr inbounds i16, i16* %69, i64 %6
  %102 = load i16, i16* %101, align 2
  %103 = zext i16 %102 to i32
  %104 = add nuw nsw i32 %100, %103
  %105 = getelementptr inbounds i16, i16* %101, i64 1
  %106 = load i16, i16* %105, align 2
  %107 = zext i16 %106 to i32
  %108 = add nuw nsw i32 %104, %107
  %109 = getelementptr inbounds i16, i16* %101, i64 2
  %110 = load i16, i16* %109, align 2
  %111 = zext i16 %110 to i32
  %112 = add nuw nsw i32 %108, %111
  %113 = getelementptr inbounds i16, i16* %101, i64 3
  %114 = load i16, i16* %113, align 2
  %115 = zext i16 %114 to i32
  %116 = add nuw nsw i32 %112, %115
  %117 = getelementptr inbounds i16, i16* %101, i64 4
  %118 = load i16, i16* %117, align 2
  %119 = zext i16 %118 to i32
  %120 = add nuw nsw i32 %116, %119
  %121 = getelementptr inbounds i16, i16* %101, i64 5
  %122 = load i16, i16* %121, align 2
  %123 = zext i16 %122 to i32
  %124 = add nuw nsw i32 %120, %123
  %125 = getelementptr inbounds i16, i16* %101, i64 6
  %126 = load i16, i16* %125, align 2
  %127 = zext i16 %126 to i32
  %128 = add nuw nsw i32 %124, %127
  %129 = getelementptr inbounds i16, i16* %101, i64 7
  %130 = load i16, i16* %129, align 2
  %131 = zext i16 %130 to i32
  %132 = add nuw nsw i32 %128, %131
  %133 = getelementptr inbounds i16, i16* %101, i64 %6
  %134 = load i16, i16* %133, align 2
  %135 = zext i16 %134 to i32
  %136 = add nuw nsw i32 %132, %135
  %137 = getelementptr inbounds i16, i16* %133, i64 1
  %138 = load i16, i16* %137, align 2
  %139 = zext i16 %138 to i32
  %140 = add nuw nsw i32 %136, %139
  %141 = getelementptr inbounds i16, i16* %133, i64 2
  %142 = load i16, i16* %141, align 2
  %143 = zext i16 %142 to i32
  %144 = add nuw nsw i32 %140, %143
  %145 = getelementptr inbounds i16, i16* %133, i64 3
  %146 = load i16, i16* %145, align 2
  %147 = zext i16 %146 to i32
  %148 = add nuw nsw i32 %144, %147
  %149 = getelementptr inbounds i16, i16* %133, i64 4
  %150 = load i16, i16* %149, align 2
  %151 = zext i16 %150 to i32
  %152 = add nuw nsw i32 %148, %151
  %153 = getelementptr inbounds i16, i16* %133, i64 5
  %154 = load i16, i16* %153, align 2
  %155 = zext i16 %154 to i32
  %156 = add nuw nsw i32 %152, %155
  %157 = getelementptr inbounds i16, i16* %133, i64 6
  %158 = load i16, i16* %157, align 2
  %159 = zext i16 %158 to i32
  %160 = add nuw nsw i32 %156, %159
  %161 = getelementptr inbounds i16, i16* %133, i64 7
  %162 = load i16, i16* %161, align 2
  %163 = zext i16 %162 to i32
  %164 = add nuw nsw i32 %160, %163
  %165 = getelementptr inbounds i16, i16* %133, i64 %6
  %166 = load i16, i16* %165, align 2
  %167 = zext i16 %166 to i32
  %168 = add nuw nsw i32 %164, %167
  %169 = getelementptr inbounds i16, i16* %165, i64 1
  %170 = load i16, i16* %169, align 2
  %171 = zext i16 %170 to i32
  %172 = add nuw nsw i32 %168, %171
  %173 = getelementptr inbounds i16, i16* %165, i64 2
  %174 = load i16, i16* %173, align 2
  %175 = zext i16 %174 to i32
  %176 = add nuw nsw i32 %172, %175
  %177 = getelementptr inbounds i16, i16* %165, i64 3
  %178 = load i16, i16* %177, align 2
  %179 = zext i16 %178 to i32
  %180 = add nuw nsw i32 %176, %179
  %181 = getelementptr inbounds i16, i16* %165, i64 4
  %182 = load i16, i16* %181, align 2
  %183 = zext i16 %182 to i32
  %184 = add nuw nsw i32 %180, %183
  %185 = getelementptr inbounds i16, i16* %165, i64 5
  %186 = load i16, i16* %185, align 2
  %187 = zext i16 %186 to i32
  %188 = add nuw nsw i32 %184, %187
  %189 = getelementptr inbounds i16, i16* %165, i64 6
  %190 = load i16, i16* %189, align 2
  %191 = zext i16 %190 to i32
  %192 = add nuw nsw i32 %188, %191
  %193 = getelementptr inbounds i16, i16* %165, i64 7
  %194 = load i16, i16* %193, align 2
  %195 = zext i16 %194 to i32
  %196 = add nuw nsw i32 %192, %195
  %197 = getelementptr inbounds i16, i16* %165, i64 %6
  %198 = load i16, i16* %197, align 2
  %199 = zext i16 %198 to i32
  %200 = add nuw nsw i32 %196, %199
  %201 = getelementptr inbounds i16, i16* %197, i64 1
  %202 = load i16, i16* %201, align 2
  %203 = zext i16 %202 to i32
  %204 = add nuw nsw i32 %200, %203
  %205 = getelementptr inbounds i16, i16* %197, i64 2
  %206 = load i16, i16* %205, align 2
  %207 = zext i16 %206 to i32
  %208 = add nuw nsw i32 %204, %207
  %209 = getelementptr inbounds i16, i16* %197, i64 3
  %210 = load i16, i16* %209, align 2
  %211 = zext i16 %210 to i32
  %212 = add nuw nsw i32 %208, %211
  %213 = getelementptr inbounds i16, i16* %197, i64 4
  %214 = load i16, i16* %213, align 2
  %215 = zext i16 %214 to i32
  %216 = add nuw nsw i32 %212, %215
  %217 = getelementptr inbounds i16, i16* %197, i64 5
  %218 = load i16, i16* %217, align 2
  %219 = zext i16 %218 to i32
  %220 = add nuw nsw i32 %216, %219
  %221 = getelementptr inbounds i16, i16* %197, i64 6
  %222 = load i16, i16* %221, align 2
  %223 = zext i16 %222 to i32
  %224 = add nuw nsw i32 %220, %223
  %225 = getelementptr inbounds i16, i16* %197, i64 7
  %226 = load i16, i16* %225, align 2
  %227 = zext i16 %226 to i32
  %228 = add nuw nsw i32 %224, %227
  %229 = getelementptr inbounds i16, i16* %197, i64 %6
  %230 = load i16, i16* %229, align 2
  %231 = zext i16 %230 to i32
  %232 = add nuw nsw i32 %228, %231
  %233 = getelementptr inbounds i16, i16* %229, i64 1
  %234 = load i16, i16* %233, align 2
  %235 = zext i16 %234 to i32
  %236 = add nuw nsw i32 %232, %235
  %237 = getelementptr inbounds i16, i16* %229, i64 2
  %238 = load i16, i16* %237, align 2
  %239 = zext i16 %238 to i32
  %240 = add nuw nsw i32 %236, %239
  %241 = getelementptr inbounds i16, i16* %229, i64 3
  %242 = load i16, i16* %241, align 2
  %243 = zext i16 %242 to i32
  %244 = add nuw nsw i32 %240, %243
  %245 = getelementptr inbounds i16, i16* %229, i64 4
  %246 = load i16, i16* %245, align 2
  %247 = zext i16 %246 to i32
  %248 = add nuw nsw i32 %244, %247
  %249 = getelementptr inbounds i16, i16* %229, i64 5
  %250 = load i16, i16* %249, align 2
  %251 = zext i16 %250 to i32
  %252 = add nuw nsw i32 %248, %251
  %253 = getelementptr inbounds i16, i16* %229, i64 6
  %254 = load i16, i16* %253, align 2
  %255 = zext i16 %254 to i32
  %256 = add nuw nsw i32 %252, %255
  %257 = getelementptr inbounds i16, i16* %229, i64 7
  %258 = load i16, i16* %257, align 2
  %259 = zext i16 %258 to i32
  %260 = add nuw nsw i32 %256, %259
  %261 = add nuw nsw i32 %260, 32
  %262 = ashr i32 %261, 6
  ret i32 %262
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden i32 @vpx_highbd_avg_4x4_c(i8*, i32) local_unnamed_addr #0 {
  %3 = ptrtoint i8* %0 to i64
  %4 = shl i64 %3, 1
  %5 = inttoptr i64 %4 to i16*
  %6 = sext i32 %1 to i64
  %7 = load i16, i16* %5, align 2
  %8 = zext i16 %7 to i32
  %9 = getelementptr inbounds i16, i16* %5, i64 1
  %10 = load i16, i16* %9, align 2
  %11 = zext i16 %10 to i32
  %12 = add nuw nsw i32 %8, %11
  %13 = getelementptr inbounds i16, i16* %5, i64 2
  %14 = load i16, i16* %13, align 2
  %15 = zext i16 %14 to i32
  %16 = add nuw nsw i32 %12, %15
  %17 = getelementptr inbounds i16, i16* %5, i64 3
  %18 = load i16, i16* %17, align 2
  %19 = zext i16 %18 to i32
  %20 = add nuw nsw i32 %16, %19
  %21 = getelementptr inbounds i16, i16* %5, i64 %6
  %22 = load i16, i16* %21, align 2
  %23 = zext i16 %22 to i32
  %24 = add nuw nsw i32 %20, %23
  %25 = getelementptr inbounds i16, i16* %21, i64 1
  %26 = load i16, i16* %25, align 2
  %27 = zext i16 %26 to i32
  %28 = add nuw nsw i32 %24, %27
  %29 = getelementptr inbounds i16, i16* %21, i64 2
  %30 = load i16, i16* %29, align 2
  %31 = zext i16 %30 to i32
  %32 = add nuw nsw i32 %28, %31
  %33 = getelementptr inbounds i16, i16* %21, i64 3
  %34 = load i16, i16* %33, align 2
  %35 = zext i16 %34 to i32
  %36 = add nuw nsw i32 %32, %35
  %37 = getelementptr inbounds i16, i16* %21, i64 %6
  %38 = load i16, i16* %37, align 2
  %39 = zext i16 %38 to i32
  %40 = add nuw nsw i32 %36, %39
  %41 = getelementptr inbounds i16, i16* %37, i64 1
  %42 = load i16, i16* %41, align 2
  %43 = zext i16 %42 to i32
  %44 = add nuw nsw i32 %40, %43
  %45 = getelementptr inbounds i16, i16* %37, i64 2
  %46 = load i16, i16* %45, align 2
  %47 = zext i16 %46 to i32
  %48 = add nuw nsw i32 %44, %47
  %49 = getelementptr inbounds i16, i16* %37, i64 3
  %50 = load i16, i16* %49, align 2
  %51 = zext i16 %50 to i32
  %52 = add nuw nsw i32 %48, %51
  %53 = getelementptr inbounds i16, i16* %37, i64 %6
  %54 = load i16, i16* %53, align 2
  %55 = zext i16 %54 to i32
  %56 = add nuw nsw i32 %52, %55
  %57 = getelementptr inbounds i16, i16* %53, i64 1
  %58 = load i16, i16* %57, align 2
  %59 = zext i16 %58 to i32
  %60 = add nuw nsw i32 %56, %59
  %61 = getelementptr inbounds i16, i16* %53, i64 2
  %62 = load i16, i16* %61, align 2
  %63 = zext i16 %62 to i32
  %64 = add nuw nsw i32 %60, %63
  %65 = getelementptr inbounds i16, i16* %53, i64 3
  %66 = load i16, i16* %65, align 2
  %67 = zext i16 %66 to i32
  %68 = add nuw nsw i32 %64, %67
  %69 = add nuw nsw i32 %68, 8
  %70 = ashr i32 %69, 4
  ret i32 %70
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @vpx_highbd_minmax_8x8_c(i8*, i32, i8*, i32, i32* nocapture, i32* nocapture) local_unnamed_addr #3 {
  %7 = ptrtoint i8* %0 to i64
  %8 = shl i64 %7, 1
  %9 = inttoptr i64 %8 to i16*
  %10 = ptrtoint i8* %2 to i64
  %11 = shl i64 %10, 1
  %12 = inttoptr i64 %11 to i16*
  store i32 255, i32* %4, align 4
  store i32 0, i32* %5, align 4
  %13 = sext i32 %1 to i64
  %14 = sext i32 %3 to i64
  br label %15

15:                                               ; preds = %15, %6
  %16 = phi i16* [ %12, %6 ], [ %147, %15 ]
  %17 = phi i16* [ %9, %6 ], [ %146, %15 ]
  %18 = phi i32 [ 0, %6 ], [ %145, %15 ]
  %19 = load i16, i16* %17, align 2
  %20 = zext i16 %19 to i32
  %21 = load i16, i16* %16, align 2
  %22 = zext i16 %21 to i32
  %23 = sub nsw i32 %20, %22
  %24 = icmp slt i32 %23, 0
  %25 = sub nsw i32 0, %23
  %26 = select i1 %24, i32 %25, i32 %23
  %27 = load i32, i32* %4, align 4
  %28 = icmp slt i32 %26, %27
  %29 = select i1 %28, i32 %26, i32 %27
  store i32 %29, i32* %4, align 4
  %30 = load i32, i32* %5, align 4
  %31 = icmp sgt i32 %26, %30
  %32 = select i1 %31, i32 %26, i32 %30
  store i32 %32, i32* %5, align 4
  %33 = getelementptr inbounds i16, i16* %17, i64 1
  %34 = load i16, i16* %33, align 2
  %35 = zext i16 %34 to i32
  %36 = getelementptr inbounds i16, i16* %16, i64 1
  %37 = load i16, i16* %36, align 2
  %38 = zext i16 %37 to i32
  %39 = sub nsw i32 %35, %38
  %40 = icmp slt i32 %39, 0
  %41 = sub nsw i32 0, %39
  %42 = select i1 %40, i32 %41, i32 %39
  %43 = load i32, i32* %4, align 4
  %44 = icmp slt i32 %42, %43
  %45 = select i1 %44, i32 %42, i32 %43
  store i32 %45, i32* %4, align 4
  %46 = load i32, i32* %5, align 4
  %47 = icmp sgt i32 %42, %46
  %48 = select i1 %47, i32 %42, i32 %46
  store i32 %48, i32* %5, align 4
  %49 = getelementptr inbounds i16, i16* %17, i64 2
  %50 = load i16, i16* %49, align 2
  %51 = zext i16 %50 to i32
  %52 = getelementptr inbounds i16, i16* %16, i64 2
  %53 = load i16, i16* %52, align 2
  %54 = zext i16 %53 to i32
  %55 = sub nsw i32 %51, %54
  %56 = icmp slt i32 %55, 0
  %57 = sub nsw i32 0, %55
  %58 = select i1 %56, i32 %57, i32 %55
  %59 = load i32, i32* %4, align 4
  %60 = icmp slt i32 %58, %59
  %61 = select i1 %60, i32 %58, i32 %59
  store i32 %61, i32* %4, align 4
  %62 = load i32, i32* %5, align 4
  %63 = icmp sgt i32 %58, %62
  %64 = select i1 %63, i32 %58, i32 %62
  store i32 %64, i32* %5, align 4
  %65 = getelementptr inbounds i16, i16* %17, i64 3
  %66 = load i16, i16* %65, align 2
  %67 = zext i16 %66 to i32
  %68 = getelementptr inbounds i16, i16* %16, i64 3
  %69 = load i16, i16* %68, align 2
  %70 = zext i16 %69 to i32
  %71 = sub nsw i32 %67, %70
  %72 = icmp slt i32 %71, 0
  %73 = sub nsw i32 0, %71
  %74 = select i1 %72, i32 %73, i32 %71
  %75 = load i32, i32* %4, align 4
  %76 = icmp slt i32 %74, %75
  %77 = select i1 %76, i32 %74, i32 %75
  store i32 %77, i32* %4, align 4
  %78 = load i32, i32* %5, align 4
  %79 = icmp sgt i32 %74, %78
  %80 = select i1 %79, i32 %74, i32 %78
  store i32 %80, i32* %5, align 4
  %81 = getelementptr inbounds i16, i16* %17, i64 4
  %82 = load i16, i16* %81, align 2
  %83 = zext i16 %82 to i32
  %84 = getelementptr inbounds i16, i16* %16, i64 4
  %85 = load i16, i16* %84, align 2
  %86 = zext i16 %85 to i32
  %87 = sub nsw i32 %83, %86
  %88 = icmp slt i32 %87, 0
  %89 = sub nsw i32 0, %87
  %90 = select i1 %88, i32 %89, i32 %87
  %91 = load i32, i32* %4, align 4
  %92 = icmp slt i32 %90, %91
  %93 = select i1 %92, i32 %90, i32 %91
  store i32 %93, i32* %4, align 4
  %94 = load i32, i32* %5, align 4
  %95 = icmp sgt i32 %90, %94
  %96 = select i1 %95, i32 %90, i32 %94
  store i32 %96, i32* %5, align 4
  %97 = getelementptr inbounds i16, i16* %17, i64 5
  %98 = load i16, i16* %97, align 2
  %99 = zext i16 %98 to i32
  %100 = getelementptr inbounds i16, i16* %16, i64 5
  %101 = load i16, i16* %100, align 2
  %102 = zext i16 %101 to i32
  %103 = sub nsw i32 %99, %102
  %104 = icmp slt i32 %103, 0
  %105 = sub nsw i32 0, %103
  %106 = select i1 %104, i32 %105, i32 %103
  %107 = load i32, i32* %4, align 4
  %108 = icmp slt i32 %106, %107
  %109 = select i1 %108, i32 %106, i32 %107
  store i32 %109, i32* %4, align 4
  %110 = load i32, i32* %5, align 4
  %111 = icmp sgt i32 %106, %110
  %112 = select i1 %111, i32 %106, i32 %110
  store i32 %112, i32* %5, align 4
  %113 = getelementptr inbounds i16, i16* %17, i64 6
  %114 = load i16, i16* %113, align 2
  %115 = zext i16 %114 to i32
  %116 = getelementptr inbounds i16, i16* %16, i64 6
  %117 = load i16, i16* %116, align 2
  %118 = zext i16 %117 to i32
  %119 = sub nsw i32 %115, %118
  %120 = icmp slt i32 %119, 0
  %121 = sub nsw i32 0, %119
  %122 = select i1 %120, i32 %121, i32 %119
  %123 = load i32, i32* %4, align 4
  %124 = icmp slt i32 %122, %123
  %125 = select i1 %124, i32 %122, i32 %123
  store i32 %125, i32* %4, align 4
  %126 = load i32, i32* %5, align 4
  %127 = icmp sgt i32 %122, %126
  %128 = select i1 %127, i32 %122, i32 %126
  store i32 %128, i32* %5, align 4
  %129 = getelementptr inbounds i16, i16* %17, i64 7
  %130 = load i16, i16* %129, align 2
  %131 = zext i16 %130 to i32
  %132 = getelementptr inbounds i16, i16* %16, i64 7
  %133 = load i16, i16* %132, align 2
  %134 = zext i16 %133 to i32
  %135 = sub nsw i32 %131, %134
  %136 = icmp slt i32 %135, 0
  %137 = sub nsw i32 0, %135
  %138 = select i1 %136, i32 %137, i32 %135
  %139 = load i32, i32* %4, align 4
  %140 = icmp slt i32 %138, %139
  %141 = select i1 %140, i32 %138, i32 %139
  store i32 %141, i32* %4, align 4
  %142 = load i32, i32* %5, align 4
  %143 = icmp sgt i32 %138, %142
  %144 = select i1 %143, i32 %138, i32 %142
  store i32 %144, i32* %5, align 4
  %145 = add nuw nsw i32 %18, 1
  %146 = getelementptr inbounds i16, i16* %17, i64 %13
  %147 = getelementptr inbounds i16, i16* %16, i64 %14
  %148 = icmp eq i32 %145, 8
  br i1 %148, label %149, label %15

149:                                              ; preds = %15
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #1

attributes #0 = { norecurse nounwind readonly ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nofree norecurse nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = distinct !{!2, !3}
!3 = !{!"llvm.loop.isvectorized", i32 1}
!4 = distinct !{!4, !3}
!5 = distinct !{!5, !3}
!6 = distinct !{!6, !3}
!7 = distinct !{!7, !3}
!8 = distinct !{!8, !9, !3}
!9 = !{!"llvm.loop.unroll.runtime.disable"}
!10 = distinct !{!10, !3}
!11 = distinct !{!11, !9, !3}
!12 = distinct !{!12, !13}
!13 = !{!"llvm.loop.unroll.disable"}
!14 = distinct !{!14, !3}
!15 = distinct !{!15, !9, !3}
!16 = distinct !{!16, !3}
!17 = distinct !{!17, !9, !3}
