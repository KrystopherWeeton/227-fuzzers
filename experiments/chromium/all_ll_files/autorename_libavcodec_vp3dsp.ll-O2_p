; ModuleID = '../../third_party/ffmpeg/libavcodec/autorename_libavcodec_vp3dsp.c'
source_filename = "../../third_party/ffmpeg/libavcodec/autorename_libavcodec_vp3dsp.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"
module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"
module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%struct.VP3DSPContext = type { void (i8*, i8*, i8*, i64, i32)*, void (i8*, i64, i16*)*, void (i8*, i64, i16*)*, void (i8*, i64, i16*)*, void (i8*, i64, i32*)*, void (i8*, i64, i32*)*, void (i8*, i64, i32*)*, void (i8*, i64, i32*)* }

@.str = private unnamed_addr constant [30 x i8] c"Assertion %s failed at %s:%d\0A\00", align 1
@.str.1 = private unnamed_addr constant [20 x i8] c"filter_limit < 128U\00", align 1
@.str.2 = private unnamed_addr constant [45 x i8] c"../../third_party/ffmpeg/libavcodec/vp3dsp.c\00", align 1

; Function Attrs: nounwind ssp uwtable
define hidden void @ff_vp3dsp_idct10_put(i8* nocapture, i64, i16* nocapture) local_unnamed_addr #0 {
  br label %11

4:                                                ; preds = %78
  %5 = mul nsw i64 %1, 7
  %6 = shl nsw i64 %1, 1
  %7 = mul nsw i64 %1, 3
  %8 = shl nsw i64 %1, 2
  %9 = mul nsw i64 %1, 5
  %10 = mul nsw i64 %1, 6
  br label %82

11:                                               ; preds = %78, %3
  %12 = phi i32 [ 0, %3 ], [ %80, %78 ]
  %13 = phi i16* [ %2, %3 ], [ %79, %78 ]
  %14 = load i16, i16* %13, align 2
  %15 = getelementptr inbounds i16, i16* %13, i64 8
  %16 = load i16, i16* %15, align 2
  %17 = sext i16 %16 to i32
  %18 = or i16 %16, %14
  %19 = getelementptr inbounds i16, i16* %13, i64 16
  %20 = load i16, i16* %19, align 2
  %21 = sext i16 %20 to i32
  %22 = or i16 %18, %20
  %23 = getelementptr inbounds i16, i16* %13, i64 24
  %24 = load i16, i16* %23, align 2
  %25 = sext i16 %24 to i32
  %26 = or i16 %22, %24
  %27 = icmp eq i16 %26, 0
  br i1 %27, label %78, label %28

28:                                               ; preds = %11
  %29 = sext i16 %14 to i32
  %30 = mul nsw i32 %17, 64277
  %31 = ashr i32 %30, 16
  %32 = mul nsw i32 %17, 12785
  %33 = ashr i32 %32, 16
  %34 = mul nsw i32 %25, 54491
  %35 = ashr i32 %34, 16
  %36 = mul nsw i32 %25, 36410
  %37 = ashr i32 %36, 16
  %38 = sub nsw i32 %31, %35
  %39 = mul i32 %38, 46341
  %40 = ashr i32 %39, 16
  %41 = add nsw i32 %37, %33
  %42 = mul i32 %41, 46341
  %43 = ashr i32 %42, 16
  %44 = add nsw i32 %35, %31
  %45 = sub nsw i32 %33, %37
  %46 = mul nsw i32 %29, 46341
  %47 = ashr i32 %46, 16
  %48 = mul nsw i32 %21, 60547
  %49 = ashr i32 %48, 16
  %50 = mul nsw i32 %21, 25080
  %51 = ashr i32 %50, 16
  %52 = sub nsw i32 %47, %49
  %53 = add nsw i32 %49, %47
  %54 = add nsw i32 %40, %47
  %55 = sub nsw i32 %43, %51
  %56 = sub nsw i32 %47, %40
  %57 = add nsw i32 %43, %51
  %58 = add nsw i32 %44, %53
  %59 = trunc i32 %58 to i16
  store i16 %59, i16* %13, align 2
  %60 = sub nsw i32 %53, %44
  %61 = trunc i32 %60 to i16
  %62 = getelementptr inbounds i16, i16* %13, i64 56
  store i16 %61, i16* %62, align 2
  %63 = add nsw i32 %54, %57
  %64 = trunc i32 %63 to i16
  store i16 %64, i16* %15, align 2
  %65 = sub nsw i32 %54, %57
  %66 = trunc i32 %65 to i16
  store i16 %66, i16* %19, align 2
  %67 = add nsw i32 %45, %52
  %68 = trunc i32 %67 to i16
  store i16 %68, i16* %23, align 2
  %69 = sub nsw i32 %52, %45
  %70 = trunc i32 %69 to i16
  %71 = getelementptr inbounds i16, i16* %13, i64 32
  store i16 %70, i16* %71, align 2
  %72 = add nsw i32 %56, %55
  %73 = trunc i32 %72 to i16
  %74 = getelementptr inbounds i16, i16* %13, i64 40
  store i16 %73, i16* %74, align 2
  %75 = sub nsw i32 %56, %55
  %76 = trunc i32 %75 to i16
  %77 = getelementptr inbounds i16, i16* %13, i64 48
  store i16 %76, i16* %77, align 2
  br label %78

78:                                               ; preds = %28, %11
  %79 = getelementptr inbounds i16, i16* %13, i64 1
  %80 = add nuw nsw i32 %12, 1
  %81 = icmp eq i32 %80, 4
  br i1 %81, label %4, label %11

82:                                               ; preds = %205, %4
  %83 = phi i32 [ 0, %4 ], [ %208, %205 ]
  %84 = phi i16* [ %2, %4 ], [ %206, %205 ]
  %85 = phi i8* [ %0, %4 ], [ %207, %205 ]
  %86 = load i16, i16* %84, align 2
  %87 = getelementptr inbounds i16, i16* %84, i64 1
  %88 = load i16, i16* %87, align 2
  %89 = sext i16 %88 to i32
  %90 = or i16 %88, %86
  %91 = getelementptr inbounds i16, i16* %84, i64 2
  %92 = load i16, i16* %91, align 2
  %93 = or i16 %90, %92
  %94 = getelementptr inbounds i16, i16* %84, i64 3
  %95 = load i16, i16* %94, align 2
  %96 = sext i16 %95 to i32
  %97 = or i16 %93, %95
  %98 = icmp eq i16 %97, 0
  br i1 %98, label %197, label %99

99:                                               ; preds = %82
  %100 = sext i16 %86 to i32
  %101 = mul nsw i32 %89, 64277
  %102 = ashr i32 %101, 16
  %103 = mul nsw i32 %89, 12785
  %104 = ashr i32 %103, 16
  %105 = mul nsw i32 %96, 54491
  %106 = ashr i32 %105, 16
  %107 = mul nsw i32 %96, 36410
  %108 = ashr i32 %107, 16
  %109 = sub nsw i32 %102, %106
  %110 = mul i32 %109, 46341
  %111 = ashr i32 %110, 16
  %112 = add nsw i32 %108, %104
  %113 = mul i32 %112, 46341
  %114 = ashr i32 %113, 16
  %115 = add nsw i32 %106, %102
  %116 = sub nsw i32 %104, %108
  %117 = mul nsw i32 %100, 46341
  %118 = ashr i32 %117, 16
  %119 = add nsw i32 %118, 2048
  %120 = sext i16 %92 to i32
  %121 = mul nsw i32 %120, 60547
  %122 = ashr i32 %121, 16
  %123 = mul nsw i32 %120, 25080
  %124 = ashr i32 %123, 16
  %125 = sub nsw i32 %119, %122
  %126 = sub nsw i32 %114, %124
  %127 = sub nsw i32 %119, %111
  %128 = add nsw i32 %114, %124
  %129 = add nsw i32 %118, 2056
  %130 = add nsw i32 %122, %129
  %131 = add nsw i32 %111, %129
  %132 = add nsw i32 %125, 8
  %133 = add nsw i32 %127, 8
  %134 = add nsw i32 %115, %130
  %135 = ashr i32 %134, 4
  %136 = icmp ugt i32 %135, 255
  %137 = ashr i32 %134, 31
  %138 = xor i32 %137, 255
  %139 = select i1 %136, i32 %138, i32 %135
  %140 = trunc i32 %139 to i8
  store i8 %140, i8* %85, align 1
  %141 = sub nsw i32 %130, %115
  %142 = ashr i32 %141, 4
  %143 = icmp ugt i32 %142, 255
  %144 = ashr i32 %141, 31
  %145 = xor i32 %144, 255
  %146 = select i1 %143, i32 %145, i32 %142
  %147 = trunc i32 %146 to i8
  %148 = getelementptr inbounds i8, i8* %85, i64 %5
  store i8 %147, i8* %148, align 1
  %149 = add nsw i32 %131, %128
  %150 = ashr i32 %149, 4
  %151 = icmp ugt i32 %150, 255
  %152 = ashr i32 %149, 31
  %153 = xor i32 %152, 255
  %154 = select i1 %151, i32 %153, i32 %150
  %155 = trunc i32 %154 to i8
  %156 = getelementptr inbounds i8, i8* %85, i64 %1
  store i8 %155, i8* %156, align 1
  %157 = sub nsw i32 %131, %128
  %158 = ashr i32 %157, 4
  %159 = icmp ugt i32 %158, 255
  %160 = ashr i32 %157, 31
  %161 = xor i32 %160, 255
  %162 = select i1 %159, i32 %161, i32 %158
  %163 = trunc i32 %162 to i8
  %164 = getelementptr inbounds i8, i8* %85, i64 %6
  store i8 %163, i8* %164, align 1
  %165 = add nsw i32 %132, %116
  %166 = ashr i32 %165, 4
  %167 = icmp ugt i32 %166, 255
  %168 = ashr i32 %165, 31
  %169 = xor i32 %168, 255
  %170 = select i1 %167, i32 %169, i32 %166
  %171 = trunc i32 %170 to i8
  %172 = getelementptr inbounds i8, i8* %85, i64 %7
  store i8 %171, i8* %172, align 1
  %173 = sub nsw i32 %132, %116
  %174 = ashr i32 %173, 4
  %175 = icmp ugt i32 %174, 255
  %176 = ashr i32 %173, 31
  %177 = xor i32 %176, 255
  %178 = select i1 %175, i32 %177, i32 %174
  %179 = trunc i32 %178 to i8
  %180 = getelementptr inbounds i8, i8* %85, i64 %8
  store i8 %179, i8* %180, align 1
  %181 = add nsw i32 %133, %126
  %182 = ashr i32 %181, 4
  %183 = icmp ugt i32 %182, 255
  %184 = ashr i32 %181, 31
  %185 = xor i32 %184, 255
  %186 = select i1 %183, i32 %185, i32 %182
  %187 = trunc i32 %186 to i8
  %188 = getelementptr inbounds i8, i8* %85, i64 %9
  store i8 %187, i8* %188, align 1
  %189 = sub nsw i32 %133, %126
  %190 = ashr i32 %189, 4
  %191 = icmp ugt i32 %190, 255
  %192 = ashr i32 %189, 31
  %193 = xor i32 %192, 255
  %194 = select i1 %191, i32 %193, i32 %190
  %195 = trunc i32 %194 to i8
  %196 = getelementptr inbounds i8, i8* %85, i64 %10
  store i8 %195, i8* %196, align 1
  br label %205

197:                                              ; preds = %82
  %198 = getelementptr inbounds i8, i8* %85, i64 %5
  store i8 -128, i8* %198, align 1
  %199 = getelementptr inbounds i8, i8* %85, i64 %10
  store i8 -128, i8* %199, align 1
  %200 = getelementptr inbounds i8, i8* %85, i64 %9
  store i8 -128, i8* %200, align 1
  %201 = getelementptr inbounds i8, i8* %85, i64 %8
  store i8 -128, i8* %201, align 1
  %202 = getelementptr inbounds i8, i8* %85, i64 %7
  store i8 -128, i8* %202, align 1
  %203 = getelementptr inbounds i8, i8* %85, i64 %6
  store i8 -128, i8* %203, align 1
  %204 = getelementptr inbounds i8, i8* %85, i64 %1
  store i8 -128, i8* %204, align 1
  store i8 -128, i8* %85, align 1
  br label %205

205:                                              ; preds = %197, %99
  %206 = getelementptr inbounds i16, i16* %84, i64 8
  %207 = getelementptr inbounds i8, i8* %85, i64 1
  %208 = add nuw nsw i32 %83, 1
  %209 = icmp eq i32 %208, 8
  br i1 %209, label %210, label %82

210:                                              ; preds = %205
  %211 = bitcast i16* %2 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 2 %211, i8 0, i64 128, i1 false)
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

; Function Attrs: nounwind ssp uwtable
define hidden void @ff_vp3dsp_idct10_add(i8* nocapture, i64, i16* nocapture) local_unnamed_addr #0 {
  br label %11

4:                                                ; preds = %78
  %5 = mul nsw i64 %1, 7
  %6 = shl nsw i64 %1, 1
  %7 = mul nsw i64 %1, 3
  %8 = shl nsw i64 %1, 2
  %9 = mul nsw i64 %1, 5
  %10 = mul nsw i64 %1, 6
  br label %82

11:                                               ; preds = %78, %3
  %12 = phi i32 [ 0, %3 ], [ %80, %78 ]
  %13 = phi i16* [ %2, %3 ], [ %79, %78 ]
  %14 = load i16, i16* %13, align 2
  %15 = getelementptr inbounds i16, i16* %13, i64 8
  %16 = load i16, i16* %15, align 2
  %17 = sext i16 %16 to i32
  %18 = or i16 %16, %14
  %19 = getelementptr inbounds i16, i16* %13, i64 16
  %20 = load i16, i16* %19, align 2
  %21 = sext i16 %20 to i32
  %22 = or i16 %18, %20
  %23 = getelementptr inbounds i16, i16* %13, i64 24
  %24 = load i16, i16* %23, align 2
  %25 = sext i16 %24 to i32
  %26 = or i16 %22, %24
  %27 = icmp eq i16 %26, 0
  br i1 %27, label %78, label %28

28:                                               ; preds = %11
  %29 = sext i16 %14 to i32
  %30 = mul nsw i32 %17, 64277
  %31 = ashr i32 %30, 16
  %32 = mul nsw i32 %17, 12785
  %33 = ashr i32 %32, 16
  %34 = mul nsw i32 %25, 54491
  %35 = ashr i32 %34, 16
  %36 = mul nsw i32 %25, 36410
  %37 = ashr i32 %36, 16
  %38 = sub nsw i32 %31, %35
  %39 = mul i32 %38, 46341
  %40 = ashr i32 %39, 16
  %41 = add nsw i32 %37, %33
  %42 = mul i32 %41, 46341
  %43 = ashr i32 %42, 16
  %44 = add nsw i32 %35, %31
  %45 = sub nsw i32 %33, %37
  %46 = mul nsw i32 %29, 46341
  %47 = ashr i32 %46, 16
  %48 = mul nsw i32 %21, 60547
  %49 = ashr i32 %48, 16
  %50 = mul nsw i32 %21, 25080
  %51 = ashr i32 %50, 16
  %52 = sub nsw i32 %47, %49
  %53 = add nsw i32 %49, %47
  %54 = add nsw i32 %40, %47
  %55 = sub nsw i32 %43, %51
  %56 = sub nsw i32 %47, %40
  %57 = add nsw i32 %43, %51
  %58 = add nsw i32 %44, %53
  %59 = trunc i32 %58 to i16
  store i16 %59, i16* %13, align 2
  %60 = sub nsw i32 %53, %44
  %61 = trunc i32 %60 to i16
  %62 = getelementptr inbounds i16, i16* %13, i64 56
  store i16 %61, i16* %62, align 2
  %63 = add nsw i32 %54, %57
  %64 = trunc i32 %63 to i16
  store i16 %64, i16* %15, align 2
  %65 = sub nsw i32 %54, %57
  %66 = trunc i32 %65 to i16
  store i16 %66, i16* %19, align 2
  %67 = add nsw i32 %45, %52
  %68 = trunc i32 %67 to i16
  store i16 %68, i16* %23, align 2
  %69 = sub nsw i32 %52, %45
  %70 = trunc i32 %69 to i16
  %71 = getelementptr inbounds i16, i16* %13, i64 32
  store i16 %70, i16* %71, align 2
  %72 = add nsw i32 %56, %55
  %73 = trunc i32 %72 to i16
  %74 = getelementptr inbounds i16, i16* %13, i64 40
  store i16 %73, i16* %74, align 2
  %75 = sub nsw i32 %56, %55
  %76 = trunc i32 %75 to i16
  %77 = getelementptr inbounds i16, i16* %13, i64 48
  store i16 %76, i16* %77, align 2
  br label %78

78:                                               ; preds = %28, %11
  %79 = getelementptr inbounds i16, i16* %13, i64 1
  %80 = add nuw nsw i32 %12, 1
  %81 = icmp eq i32 %80, 4
  br i1 %81, label %4, label %11

82:                                               ; preds = %220, %4
  %83 = phi i32 [ 0, %4 ], [ %223, %220 ]
  %84 = phi i16* [ %2, %4 ], [ %221, %220 ]
  %85 = phi i8* [ %0, %4 ], [ %222, %220 ]
  %86 = load i16, i16* %84, align 2
  %87 = getelementptr inbounds i16, i16* %84, i64 1
  %88 = load i16, i16* %87, align 2
  %89 = sext i16 %88 to i32
  %90 = or i16 %88, %86
  %91 = getelementptr inbounds i16, i16* %84, i64 2
  %92 = load i16, i16* %91, align 2
  %93 = or i16 %90, %92
  %94 = getelementptr inbounds i16, i16* %84, i64 3
  %95 = load i16, i16* %94, align 2
  %96 = sext i16 %95 to i32
  %97 = or i16 %93, %95
  %98 = icmp eq i16 %97, 0
  br i1 %98, label %220, label %99

99:                                               ; preds = %82
  %100 = sext i16 %86 to i32
  %101 = mul nsw i32 %89, 64277
  %102 = ashr i32 %101, 16
  %103 = mul nsw i32 %89, 12785
  %104 = ashr i32 %103, 16
  %105 = mul nsw i32 %96, 54491
  %106 = ashr i32 %105, 16
  %107 = mul nsw i32 %96, 36410
  %108 = ashr i32 %107, 16
  %109 = sub nsw i32 %102, %106
  %110 = mul i32 %109, 46341
  %111 = ashr i32 %110, 16
  %112 = add nsw i32 %108, %104
  %113 = mul i32 %112, 46341
  %114 = ashr i32 %113, 16
  %115 = add nsw i32 %106, %102
  %116 = sub nsw i32 %104, %108
  %117 = mul nsw i32 %100, 46341
  %118 = ashr i32 %117, 16
  %119 = sext i16 %92 to i32
  %120 = mul nsw i32 %119, 60547
  %121 = ashr i32 %120, 16
  %122 = mul nsw i32 %119, 25080
  %123 = ashr i32 %122, 16
  %124 = sub nsw i32 %118, %121
  %125 = sub nsw i32 %114, %123
  %126 = sub nsw i32 %118, %111
  %127 = add nsw i32 %114, %123
  %128 = add nsw i32 %118, 8
  %129 = add nsw i32 %121, %128
  %130 = add nsw i32 %111, %128
  %131 = add nsw i32 %124, 8
  %132 = add nsw i32 %126, 8
  %133 = load i8, i8* %85, align 1
  %134 = zext i8 %133 to i32
  %135 = add nsw i32 %115, %129
  %136 = ashr i32 %135, 4
  %137 = add nsw i32 %136, %134
  %138 = icmp ugt i32 %137, 255
  %139 = ashr i32 %137, 31
  %140 = xor i32 %139, 255
  %141 = select i1 %138, i32 %140, i32 %137
  %142 = trunc i32 %141 to i8
  store i8 %142, i8* %85, align 1
  %143 = getelementptr inbounds i8, i8* %85, i64 %5
  %144 = load i8, i8* %143, align 1
  %145 = zext i8 %144 to i32
  %146 = sub nsw i32 %129, %115
  %147 = ashr i32 %146, 4
  %148 = add nsw i32 %147, %145
  %149 = icmp ugt i32 %148, 255
  %150 = ashr i32 %148, 31
  %151 = xor i32 %150, 255
  %152 = select i1 %149, i32 %151, i32 %148
  %153 = trunc i32 %152 to i8
  store i8 %153, i8* %143, align 1
  %154 = getelementptr inbounds i8, i8* %85, i64 %1
  %155 = load i8, i8* %154, align 1
  %156 = zext i8 %155 to i32
  %157 = add nsw i32 %130, %127
  %158 = ashr i32 %157, 4
  %159 = add nsw i32 %158, %156
  %160 = icmp ugt i32 %159, 255
  %161 = ashr i32 %159, 31
  %162 = xor i32 %161, 255
  %163 = select i1 %160, i32 %162, i32 %159
  %164 = trunc i32 %163 to i8
  store i8 %164, i8* %154, align 1
  %165 = getelementptr inbounds i8, i8* %85, i64 %6
  %166 = load i8, i8* %165, align 1
  %167 = zext i8 %166 to i32
  %168 = sub nsw i32 %130, %127
  %169 = ashr i32 %168, 4
  %170 = add nsw i32 %169, %167
  %171 = icmp ugt i32 %170, 255
  %172 = ashr i32 %170, 31
  %173 = xor i32 %172, 255
  %174 = select i1 %171, i32 %173, i32 %170
  %175 = trunc i32 %174 to i8
  store i8 %175, i8* %165, align 1
  %176 = getelementptr inbounds i8, i8* %85, i64 %7
  %177 = load i8, i8* %176, align 1
  %178 = zext i8 %177 to i32
  %179 = add nsw i32 %131, %116
  %180 = ashr i32 %179, 4
  %181 = add nsw i32 %180, %178
  %182 = icmp ugt i32 %181, 255
  %183 = ashr i32 %181, 31
  %184 = xor i32 %183, 255
  %185 = select i1 %182, i32 %184, i32 %181
  %186 = trunc i32 %185 to i8
  store i8 %186, i8* %176, align 1
  %187 = getelementptr inbounds i8, i8* %85, i64 %8
  %188 = load i8, i8* %187, align 1
  %189 = zext i8 %188 to i32
  %190 = sub nsw i32 %131, %116
  %191 = ashr i32 %190, 4
  %192 = add nsw i32 %191, %189
  %193 = icmp ugt i32 %192, 255
  %194 = ashr i32 %192, 31
  %195 = xor i32 %194, 255
  %196 = select i1 %193, i32 %195, i32 %192
  %197 = trunc i32 %196 to i8
  store i8 %197, i8* %187, align 1
  %198 = getelementptr inbounds i8, i8* %85, i64 %9
  %199 = load i8, i8* %198, align 1
  %200 = zext i8 %199 to i32
  %201 = add nsw i32 %132, %125
  %202 = ashr i32 %201, 4
  %203 = add nsw i32 %202, %200
  %204 = icmp ugt i32 %203, 255
  %205 = ashr i32 %203, 31
  %206 = xor i32 %205, 255
  %207 = select i1 %204, i32 %206, i32 %203
  %208 = trunc i32 %207 to i8
  store i8 %208, i8* %198, align 1
  %209 = getelementptr inbounds i8, i8* %85, i64 %10
  %210 = load i8, i8* %209, align 1
  %211 = zext i8 %210 to i32
  %212 = sub nsw i32 %132, %125
  %213 = ashr i32 %212, 4
  %214 = add nsw i32 %213, %211
  %215 = icmp ugt i32 %214, 255
  %216 = ashr i32 %214, 31
  %217 = xor i32 %216, 255
  %218 = select i1 %215, i32 %217, i32 %214
  %219 = trunc i32 %218 to i8
  store i8 %219, i8* %209, align 1
  br label %220

220:                                              ; preds = %82, %99
  %221 = getelementptr inbounds i16, i16* %84, i64 8
  %222 = getelementptr inbounds i8, i8* %85, i64 1
  %223 = add nuw nsw i32 %83, 1
  %224 = icmp eq i32 %223, 8
  br i1 %224, label %225, label %82

225:                                              ; preds = %220
  %226 = bitcast i16* %2 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 2 %226, i8 0, i64 128, i1 false)
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @ff_vp3dsp_v_loop_filter_12(i8*, i64, i32* nocapture readonly) local_unnamed_addr #2 {
  %4 = sub nsw i64 0, %1
  %5 = shl nsw i64 %4, 1
  br label %6

6:                                                ; preds = %6, %3
  %7 = phi i64 [ 0, %3 ], [ %43, %6 ]
  %8 = getelementptr inbounds i8, i8* %0, i64 %7
  %9 = getelementptr inbounds i8, i8* %8, i64 %5
  %10 = load i8, i8* %9, align 1
  %11 = zext i8 %10 to i32
  %12 = getelementptr inbounds i8, i8* %8, i64 %1
  %13 = load i8, i8* %12, align 1
  %14 = zext i8 %13 to i32
  %15 = load i8, i8* %8, align 1
  %16 = zext i8 %15 to i32
  %17 = getelementptr inbounds i8, i8* %8, i64 %4
  %18 = load i8, i8* %17, align 1
  %19 = zext i8 %18 to i32
  %20 = sub nsw i32 %16, %19
  %21 = mul nsw i32 %20, 3
  %22 = add nuw nsw i32 %11, 4
  %23 = sub nsw i32 %22, %14
  %24 = add nsw i32 %23, %21
  %25 = ashr i32 %24, 3
  %26 = sext i32 %25 to i64
  %27 = getelementptr inbounds i32, i32* %2, i64 %26
  %28 = load i32, i32* %27, align 4
  %29 = add nsw i32 %28, %19
  %30 = icmp ugt i32 %29, 255
  %31 = ashr i32 %29, 31
  %32 = xor i32 %31, 255
  %33 = select i1 %30, i32 %32, i32 %29
  %34 = trunc i32 %33 to i8
  store i8 %34, i8* %17, align 1
  %35 = load i8, i8* %8, align 1
  %36 = zext i8 %35 to i32
  %37 = sub nsw i32 %36, %28
  %38 = icmp ugt i32 %37, 255
  %39 = ashr i32 %37, 31
  %40 = xor i32 %39, 255
  %41 = select i1 %38, i32 %40, i32 %37
  %42 = trunc i32 %41 to i8
  store i8 %42, i8* %8, align 1
  %43 = add nuw nsw i64 %7, 1
  %44 = icmp eq i64 %43, 12
  br i1 %44, label %45, label %6

45:                                               ; preds = %6
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @ff_vp3dsp_h_loop_filter_12(i8*, i64, i32* nocapture readonly) local_unnamed_addr #2 {
  %4 = mul nsw i64 %1, 12
  %5 = getelementptr inbounds i8, i8* %0, i64 %4
  %6 = icmp eq i64 %1, 0
  br i1 %6, label %43, label %7

7:                                                ; preds = %3, %7
  %8 = phi i8* [ %41, %7 ], [ %0, %3 ]
  %9 = getelementptr inbounds i8, i8* %8, i64 -2
  %10 = load i8, i8* %9, align 1
  %11 = zext i8 %10 to i32
  %12 = getelementptr inbounds i8, i8* %8, i64 1
  %13 = load i8, i8* %12, align 1
  %14 = zext i8 %13 to i32
  %15 = load i8, i8* %8, align 1
  %16 = zext i8 %15 to i32
  %17 = getelementptr inbounds i8, i8* %8, i64 -1
  %18 = load i8, i8* %17, align 1
  %19 = zext i8 %18 to i32
  %20 = sub nsw i32 %16, %19
  %21 = mul nsw i32 %20, 3
  %22 = add nuw nsw i32 %11, 4
  %23 = sub nsw i32 %22, %14
  %24 = add nsw i32 %23, %21
  %25 = ashr i32 %24, 3
  %26 = sext i32 %25 to i64
  %27 = getelementptr inbounds i32, i32* %2, i64 %26
  %28 = load i32, i32* %27, align 4
  %29 = add nsw i32 %28, %19
  %30 = icmp ugt i32 %29, 255
  %31 = ashr i32 %29, 31
  %32 = xor i32 %31, 255
  %33 = select i1 %30, i32 %32, i32 %29
  %34 = trunc i32 %33 to i8
  store i8 %34, i8* %17, align 1
  %35 = sub nsw i32 %16, %28
  %36 = icmp ugt i32 %35, 255
  %37 = ashr i32 %35, 31
  %38 = xor i32 %37, 255
  %39 = select i1 %36, i32 %38, i32 %35
  %40 = trunc i32 %39 to i8
  store i8 %40, i8* %8, align 1
  %41 = getelementptr inbounds i8, i8* %8, i64 %1
  %42 = icmp eq i8* %41, %5
  br i1 %42, label %43, label %7

43:                                               ; preds = %7, %3
  ret void
}

; Function Attrs: cold nounwind optsize ssp uwtable
define hidden void @ff_vp3dsp_init(%struct.VP3DSPContext*, i32) local_unnamed_addr #3 {
  %3 = getelementptr inbounds %struct.VP3DSPContext, %struct.VP3DSPContext* %0, i64 0, i32 0
  store void (i8*, i8*, i8*, i64, i32)* @put_no_rnd_pixels_l2, void (i8*, i8*, i8*, i64, i32)** %3, align 8
  %4 = getelementptr inbounds %struct.VP3DSPContext, %struct.VP3DSPContext* %0, i64 0, i32 1
  %5 = bitcast void (i8*, i64, i16*)** %4 to <2 x void (i8*, i64, i16*)*>*
  store <2 x void (i8*, i64, i16*)*> <void (i8*, i64, i16*)* @vp3_idct_put_c, void (i8*, i64, i16*)* @vp3_idct_add_c>, <2 x void (i8*, i64, i16*)*>* %5, align 8
  %6 = getelementptr inbounds %struct.VP3DSPContext, %struct.VP3DSPContext* %0, i64 0, i32 3
  store void (i8*, i64, i16*)* @vp3_idct_dc_add_c, void (i8*, i64, i16*)** %6, align 8
  %7 = getelementptr inbounds %struct.VP3DSPContext, %struct.VP3DSPContext* %0, i64 0, i32 6
  %8 = getelementptr inbounds %struct.VP3DSPContext, %struct.VP3DSPContext* %0, i64 0, i32 4
  %9 = bitcast void (i8*, i64, i32*)** %7 to <2 x void (i8*, i64, i32*)*>*
  store <2 x void (i8*, i64, i32*)*> <void (i8*, i64, i32*)* @vp3_v_loop_filter_8_c, void (i8*, i64, i32*)* @vp3_h_loop_filter_8_c>, <2 x void (i8*, i64, i32*)*>* %9, align 8
  %10 = bitcast void (i8*, i64, i32*)** %8 to <2 x void (i8*, i64, i32*)*>*
  store <2 x void (i8*, i64, i32*)*> <void (i8*, i64, i32*)* @vp3_v_loop_filter_8_c, void (i8*, i64, i32*)* @vp3_h_loop_filter_8_c>, <2 x void (i8*, i64, i32*)*>* %10, align 8
  tail call void @ff_vp3dsp_init_x86(%struct.VP3DSPContext* %0, i32 %1) #6
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal void @put_no_rnd_pixels_l2(i8* nocapture, i8* nocapture readonly, i8* nocapture readonly, i64, i32) #2 {
  %6 = icmp sgt i32 %4, 0
  br i1 %6, label %7, label %41

7:                                                ; preds = %5
  %8 = zext i32 %4 to i64
  br label %9

9:                                                ; preds = %9, %7
  %10 = phi i64 [ 0, %7 ], [ %39, %9 ]
  %11 = mul nsw i64 %10, %3
  %12 = getelementptr inbounds i8, i8* %1, i64 %11
  %13 = bitcast i8* %12 to i32*
  %14 = load i32, i32* %13, align 1
  %15 = getelementptr inbounds i8, i8* %2, i64 %11
  %16 = bitcast i8* %15 to i32*
  %17 = load i32, i32* %16, align 1
  %18 = and i32 %17, %14
  %19 = xor i32 %17, %14
  %20 = lshr i32 %19, 1
  %21 = and i32 %20, 2139062143
  %22 = add i32 %21, %18
  %23 = getelementptr inbounds i8, i8* %0, i64 %11
  %24 = bitcast i8* %23 to i32*
  store i32 %22, i32* %24, align 4
  %25 = add nsw i64 %11, 4
  %26 = getelementptr inbounds i8, i8* %1, i64 %25
  %27 = bitcast i8* %26 to i32*
  %28 = load i32, i32* %27, align 1
  %29 = getelementptr inbounds i8, i8* %2, i64 %25
  %30 = bitcast i8* %29 to i32*
  %31 = load i32, i32* %30, align 1
  %32 = and i32 %31, %28
  %33 = xor i32 %31, %28
  %34 = lshr i32 %33, 1
  %35 = and i32 %34, 2139062143
  %36 = add i32 %35, %32
  %37 = getelementptr inbounds i8, i8* %0, i64 %25
  %38 = bitcast i8* %37 to i32*
  store i32 %36, i32* %38, align 4
  %39 = add nuw nsw i64 %10, 1
  %40 = icmp eq i64 %39, %8
  br i1 %40, label %41, label %9

41:                                               ; preds = %9, %5
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @vp3_idct_put_c(i8* nocapture, i64, i16* nocapture) #0 {
  br label %11

4:                                                ; preds = %112
  %5 = mul nsw i64 %1, 7
  %6 = shl nsw i64 %1, 1
  %7 = mul nsw i64 %1, 3
  %8 = shl nsw i64 %1, 2
  %9 = mul nsw i64 %1, 5
  %10 = mul nsw i64 %1, 6
  br label %116

11:                                               ; preds = %112, %3
  %12 = phi i32 [ 0, %3 ], [ %114, %112 ]
  %13 = phi i16* [ %2, %3 ], [ %113, %112 ]
  %14 = load i16, i16* %13, align 2
  %15 = sext i16 %14 to i32
  %16 = getelementptr inbounds i16, i16* %13, i64 8
  %17 = load i16, i16* %16, align 2
  %18 = sext i16 %17 to i32
  %19 = or i16 %17, %14
  %20 = getelementptr inbounds i16, i16* %13, i64 16
  %21 = load i16, i16* %20, align 2
  %22 = sext i16 %21 to i32
  %23 = or i16 %19, %21
  %24 = getelementptr inbounds i16, i16* %13, i64 24
  %25 = load i16, i16* %24, align 2
  %26 = sext i16 %25 to i32
  %27 = or i16 %23, %25
  %28 = getelementptr inbounds i16, i16* %13, i64 32
  %29 = load i16, i16* %28, align 2
  %30 = sext i16 %29 to i32
  %31 = or i16 %27, %29
  %32 = getelementptr inbounds i16, i16* %13, i64 40
  %33 = load i16, i16* %32, align 2
  %34 = sext i16 %33 to i32
  %35 = or i16 %31, %33
  %36 = getelementptr inbounds i16, i16* %13, i64 48
  %37 = load i16, i16* %36, align 2
  %38 = sext i16 %37 to i32
  %39 = or i16 %35, %37
  %40 = getelementptr inbounds i16, i16* %13, i64 56
  %41 = load i16, i16* %40, align 2
  %42 = sext i16 %41 to i32
  %43 = or i16 %39, %41
  %44 = icmp eq i16 %43, 0
  br i1 %44, label %112, label %45

45:                                               ; preds = %11
  %46 = mul nsw i32 %18, 64277
  %47 = ashr i32 %46, 16
  %48 = mul nsw i32 %42, 12785
  %49 = ashr i32 %48, 16
  %50 = add nsw i32 %49, %47
  %51 = mul nsw i32 %18, 12785
  %52 = ashr i32 %51, 16
  %53 = mul nsw i32 %42, 64277
  %54 = ashr i32 %53, 16
  %55 = sub nsw i32 %52, %54
  %56 = mul nsw i32 %26, 54491
  %57 = ashr i32 %56, 16
  %58 = mul nsw i32 %34, 36410
  %59 = ashr i32 %58, 16
  %60 = add nsw i32 %59, %57
  %61 = mul nsw i32 %34, 54491
  %62 = ashr i32 %61, 16
  %63 = mul nsw i32 %26, 36410
  %64 = ashr i32 %63, 16
  %65 = sub nsw i32 %62, %64
  %66 = sub nsw i32 %50, %60
  %67 = mul i32 %66, 46341
  %68 = ashr i32 %67, 16
  %69 = sub nsw i32 %55, %65
  %70 = mul i32 %69, 46341
  %71 = ashr i32 %70, 16
  %72 = add nsw i32 %50, %60
  %73 = add nsw i32 %55, %65
  %74 = add nsw i32 %30, %15
  %75 = mul i32 %74, 46341
  %76 = ashr i32 %75, 16
  %77 = sub nsw i32 %15, %30
  %78 = mul i32 %77, 46341
  %79 = ashr i32 %78, 16
  %80 = mul nsw i32 %22, 60547
  %81 = ashr i32 %80, 16
  %82 = mul nsw i32 %38, 25080
  %83 = ashr i32 %82, 16
  %84 = add nsw i32 %83, %81
  %85 = mul nsw i32 %22, 25080
  %86 = ashr i32 %85, 16
  %87 = mul nsw i32 %38, 60547
  %88 = ashr i32 %87, 16
  %89 = sub nsw i32 %86, %88
  %90 = sub nsw i32 %76, %84
  %91 = add nsw i32 %84, %76
  %92 = add nsw i32 %68, %79
  %93 = sub nsw i32 %71, %89
  %94 = sub nsw i32 %79, %68
  %95 = add nsw i32 %71, %89
  %96 = add nsw i32 %72, %91
  %97 = trunc i32 %96 to i16
  store i16 %97, i16* %13, align 2
  %98 = sub nsw i32 %91, %72
  %99 = trunc i32 %98 to i16
  store i16 %99, i16* %40, align 2
  %100 = add nsw i32 %92, %95
  %101 = trunc i32 %100 to i16
  store i16 %101, i16* %16, align 2
  %102 = sub nsw i32 %92, %95
  %103 = trunc i32 %102 to i16
  store i16 %103, i16* %20, align 2
  %104 = add nsw i32 %73, %90
  %105 = trunc i32 %104 to i16
  store i16 %105, i16* %24, align 2
  %106 = sub nsw i32 %90, %73
  %107 = trunc i32 %106 to i16
  store i16 %107, i16* %28, align 2
  %108 = add nsw i32 %94, %93
  %109 = trunc i32 %108 to i16
  store i16 %109, i16* %32, align 2
  %110 = sub nsw i32 %94, %93
  %111 = trunc i32 %110 to i16
  store i16 %111, i16* %36, align 2
  br label %112

112:                                              ; preds = %45, %11
  %113 = getelementptr inbounds i16, i16* %13, i64 1
  %114 = add nuw nsw i32 %12, 1
  %115 = icmp eq i32 %114, 8
  br i1 %115, label %4, label %11

116:                                              ; preds = %285, %4
  %117 = phi i8* [ %0, %4 ], [ %287, %285 ]
  %118 = phi i32 [ 0, %4 ], [ %288, %285 ]
  %119 = phi i16* [ %2, %4 ], [ %286, %285 ]
  %120 = getelementptr inbounds i16, i16* %119, i64 1
  %121 = load i16, i16* %120, align 2
  %122 = sext i16 %121 to i32
  %123 = getelementptr inbounds i16, i16* %119, i64 2
  %124 = load i16, i16* %123, align 2
  %125 = or i16 %124, %121
  %126 = getelementptr inbounds i16, i16* %119, i64 3
  %127 = load i16, i16* %126, align 2
  %128 = sext i16 %127 to i32
  %129 = or i16 %125, %127
  %130 = getelementptr inbounds i16, i16* %119, i64 4
  %131 = load i16, i16* %130, align 2
  %132 = sext i16 %131 to i32
  %133 = or i16 %129, %131
  %134 = getelementptr inbounds i16, i16* %119, i64 5
  %135 = load i16, i16* %134, align 2
  %136 = sext i16 %135 to i32
  %137 = or i16 %133, %135
  %138 = getelementptr inbounds i16, i16* %119, i64 6
  %139 = load i16, i16* %138, align 2
  %140 = or i16 %137, %139
  %141 = getelementptr inbounds i16, i16* %119, i64 7
  %142 = load i16, i16* %141, align 2
  %143 = sext i16 %142 to i32
  %144 = or i16 %140, %142
  %145 = icmp eq i16 %144, 0
  br i1 %145, label %266, label %146

146:                                              ; preds = %116
  %147 = mul nsw i32 %122, 64277
  %148 = ashr i32 %147, 16
  %149 = mul nsw i32 %143, 12785
  %150 = ashr i32 %149, 16
  %151 = add nsw i32 %150, %148
  %152 = mul nsw i32 %122, 12785
  %153 = ashr i32 %152, 16
  %154 = mul nsw i32 %143, 64277
  %155 = ashr i32 %154, 16
  %156 = sub nsw i32 %153, %155
  %157 = mul nsw i32 %128, 54491
  %158 = ashr i32 %157, 16
  %159 = mul nsw i32 %136, 36410
  %160 = ashr i32 %159, 16
  %161 = add nsw i32 %160, %158
  %162 = mul nsw i32 %136, 54491
  %163 = ashr i32 %162, 16
  %164 = mul nsw i32 %128, 36410
  %165 = ashr i32 %164, 16
  %166 = sub nsw i32 %163, %165
  %167 = sub nsw i32 %151, %161
  %168 = mul i32 %167, 46341
  %169 = ashr i32 %168, 16
  %170 = sub nsw i32 %156, %166
  %171 = mul i32 %170, 46341
  %172 = ashr i32 %171, 16
  %173 = add nsw i32 %151, %161
  %174 = add nsw i32 %156, %166
  %175 = load i16, i16* %119, align 2
  %176 = sext i16 %175 to i32
  %177 = add nsw i32 %176, %132
  %178 = mul i32 %177, 46341
  %179 = ashr i32 %178, 16
  %180 = sub nsw i32 %176, %132
  %181 = mul i32 %180, 46341
  %182 = ashr i32 %181, 16
  %183 = add nsw i32 %179, 2056
  %184 = add nsw i32 %182, 2056
  %185 = sext i16 %124 to i32
  %186 = mul nsw i32 %185, 60547
  %187 = ashr i32 %186, 16
  %188 = sext i16 %139 to i32
  %189 = mul nsw i32 %188, 25080
  %190 = ashr i32 %189, 16
  %191 = add nsw i32 %190, %187
  %192 = mul nsw i32 %185, 25080
  %193 = ashr i32 %192, 16
  %194 = mul nsw i32 %188, 60547
  %195 = ashr i32 %194, 16
  %196 = sub nsw i32 %193, %195
  %197 = sub nsw i32 %183, %191
  %198 = add nsw i32 %183, %191
  %199 = add nsw i32 %184, %169
  %200 = sub nsw i32 %172, %196
  %201 = sub nsw i32 %184, %169
  %202 = add nsw i32 %172, %196
  %203 = add nsw i32 %198, %173
  %204 = ashr i32 %203, 4
  %205 = icmp ugt i32 %204, 255
  %206 = ashr i32 %203, 31
  %207 = xor i32 %206, 255
  %208 = select i1 %205, i32 %207, i32 %204
  %209 = trunc i32 %208 to i8
  store i8 %209, i8* %117, align 1
  %210 = sub nsw i32 %198, %173
  %211 = ashr i32 %210, 4
  %212 = icmp ugt i32 %211, 255
  %213 = ashr i32 %210, 31
  %214 = xor i32 %213, 255
  %215 = select i1 %212, i32 %214, i32 %211
  %216 = trunc i32 %215 to i8
  %217 = getelementptr inbounds i8, i8* %117, i64 %5
  store i8 %216, i8* %217, align 1
  %218 = add nsw i32 %199, %202
  %219 = ashr i32 %218, 4
  %220 = icmp ugt i32 %219, 255
  %221 = ashr i32 %218, 31
  %222 = xor i32 %221, 255
  %223 = select i1 %220, i32 %222, i32 %219
  %224 = trunc i32 %223 to i8
  %225 = getelementptr inbounds i8, i8* %117, i64 %1
  store i8 %224, i8* %225, align 1
  %226 = sub nsw i32 %199, %202
  %227 = ashr i32 %226, 4
  %228 = icmp ugt i32 %227, 255
  %229 = ashr i32 %226, 31
  %230 = xor i32 %229, 255
  %231 = select i1 %228, i32 %230, i32 %227
  %232 = trunc i32 %231 to i8
  %233 = getelementptr inbounds i8, i8* %117, i64 %6
  store i8 %232, i8* %233, align 1
  %234 = add nsw i32 %197, %174
  %235 = ashr i32 %234, 4
  %236 = icmp ugt i32 %235, 255
  %237 = ashr i32 %234, 31
  %238 = xor i32 %237, 255
  %239 = select i1 %236, i32 %238, i32 %235
  %240 = trunc i32 %239 to i8
  %241 = getelementptr inbounds i8, i8* %117, i64 %7
  store i8 %240, i8* %241, align 1
  %242 = sub nsw i32 %197, %174
  %243 = ashr i32 %242, 4
  %244 = icmp ugt i32 %243, 255
  %245 = ashr i32 %242, 31
  %246 = xor i32 %245, 255
  %247 = select i1 %244, i32 %246, i32 %243
  %248 = trunc i32 %247 to i8
  %249 = getelementptr inbounds i8, i8* %117, i64 %8
  store i8 %248, i8* %249, align 1
  %250 = add nsw i32 %201, %200
  %251 = ashr i32 %250, 4
  %252 = icmp ugt i32 %251, 255
  %253 = ashr i32 %250, 31
  %254 = xor i32 %253, 255
  %255 = select i1 %252, i32 %254, i32 %251
  %256 = trunc i32 %255 to i8
  %257 = getelementptr inbounds i8, i8* %117, i64 %9
  store i8 %256, i8* %257, align 1
  %258 = sub nsw i32 %201, %200
  %259 = ashr i32 %258, 4
  %260 = icmp ugt i32 %259, 255
  %261 = ashr i32 %258, 31
  %262 = xor i32 %261, 255
  %263 = select i1 %260, i32 %262, i32 %259
  %264 = trunc i32 %263 to i8
  %265 = getelementptr inbounds i8, i8* %117, i64 %10
  store i8 %264, i8* %265, align 1
  br label %285

266:                                              ; preds = %116
  %267 = load i16, i16* %119, align 2
  %268 = sext i16 %267 to i32
  %269 = mul nsw i32 %268, 46341
  %270 = add nsw i32 %269, 524288
  %271 = ashr i32 %270, 20
  %272 = add nsw i32 %271, 128
  %273 = icmp ugt i32 %272, 255
  %274 = ashr i32 %272, 31
  %275 = xor i32 %274, 255
  %276 = select i1 %273, i32 %275, i32 %272
  %277 = trunc i32 %276 to i8
  %278 = getelementptr inbounds i8, i8* %117, i64 %5
  store i8 %277, i8* %278, align 1
  %279 = getelementptr inbounds i8, i8* %117, i64 %10
  store i8 %277, i8* %279, align 1
  %280 = getelementptr inbounds i8, i8* %117, i64 %9
  store i8 %277, i8* %280, align 1
  %281 = getelementptr inbounds i8, i8* %117, i64 %8
  store i8 %277, i8* %281, align 1
  %282 = getelementptr inbounds i8, i8* %117, i64 %7
  store i8 %277, i8* %282, align 1
  %283 = getelementptr inbounds i8, i8* %117, i64 %6
  store i8 %277, i8* %283, align 1
  %284 = getelementptr inbounds i8, i8* %117, i64 %1
  store i8 %277, i8* %284, align 1
  store i8 %277, i8* %117, align 1
  br label %285

285:                                              ; preds = %266, %146
  %286 = getelementptr inbounds i16, i16* %119, i64 8
  %287 = getelementptr inbounds i8, i8* %117, i64 1
  %288 = add nuw nsw i32 %118, 1
  %289 = icmp eq i32 %288, 8
  br i1 %289, label %290, label %116

290:                                              ; preds = %285
  %291 = bitcast i16* %2 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 2 %291, i8 0, i64 128, i1 false)
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @vp3_idct_add_c(i8* nocapture, i64, i16* nocapture) #0 {
  br label %11

4:                                                ; preds = %112
  %5 = mul nsw i64 %1, 7
  %6 = shl nsw i64 %1, 1
  %7 = mul nsw i64 %1, 3
  %8 = shl nsw i64 %1, 2
  %9 = mul nsw i64 %1, 5
  %10 = mul nsw i64 %1, 6
  br label %116

11:                                               ; preds = %112, %3
  %12 = phi i32 [ 0, %3 ], [ %114, %112 ]
  %13 = phi i16* [ %2, %3 ], [ %113, %112 ]
  %14 = load i16, i16* %13, align 2
  %15 = sext i16 %14 to i32
  %16 = getelementptr inbounds i16, i16* %13, i64 8
  %17 = load i16, i16* %16, align 2
  %18 = sext i16 %17 to i32
  %19 = or i16 %17, %14
  %20 = getelementptr inbounds i16, i16* %13, i64 16
  %21 = load i16, i16* %20, align 2
  %22 = sext i16 %21 to i32
  %23 = or i16 %19, %21
  %24 = getelementptr inbounds i16, i16* %13, i64 24
  %25 = load i16, i16* %24, align 2
  %26 = sext i16 %25 to i32
  %27 = or i16 %23, %25
  %28 = getelementptr inbounds i16, i16* %13, i64 32
  %29 = load i16, i16* %28, align 2
  %30 = sext i16 %29 to i32
  %31 = or i16 %27, %29
  %32 = getelementptr inbounds i16, i16* %13, i64 40
  %33 = load i16, i16* %32, align 2
  %34 = sext i16 %33 to i32
  %35 = or i16 %31, %33
  %36 = getelementptr inbounds i16, i16* %13, i64 48
  %37 = load i16, i16* %36, align 2
  %38 = sext i16 %37 to i32
  %39 = or i16 %35, %37
  %40 = getelementptr inbounds i16, i16* %13, i64 56
  %41 = load i16, i16* %40, align 2
  %42 = sext i16 %41 to i32
  %43 = or i16 %39, %41
  %44 = icmp eq i16 %43, 0
  br i1 %44, label %112, label %45

45:                                               ; preds = %11
  %46 = mul nsw i32 %18, 64277
  %47 = ashr i32 %46, 16
  %48 = mul nsw i32 %42, 12785
  %49 = ashr i32 %48, 16
  %50 = add nsw i32 %49, %47
  %51 = mul nsw i32 %18, 12785
  %52 = ashr i32 %51, 16
  %53 = mul nsw i32 %42, 64277
  %54 = ashr i32 %53, 16
  %55 = sub nsw i32 %52, %54
  %56 = mul nsw i32 %26, 54491
  %57 = ashr i32 %56, 16
  %58 = mul nsw i32 %34, 36410
  %59 = ashr i32 %58, 16
  %60 = add nsw i32 %59, %57
  %61 = mul nsw i32 %34, 54491
  %62 = ashr i32 %61, 16
  %63 = mul nsw i32 %26, 36410
  %64 = ashr i32 %63, 16
  %65 = sub nsw i32 %62, %64
  %66 = sub nsw i32 %50, %60
  %67 = mul i32 %66, 46341
  %68 = ashr i32 %67, 16
  %69 = sub nsw i32 %55, %65
  %70 = mul i32 %69, 46341
  %71 = ashr i32 %70, 16
  %72 = add nsw i32 %50, %60
  %73 = add nsw i32 %55, %65
  %74 = add nsw i32 %30, %15
  %75 = mul i32 %74, 46341
  %76 = ashr i32 %75, 16
  %77 = sub nsw i32 %15, %30
  %78 = mul i32 %77, 46341
  %79 = ashr i32 %78, 16
  %80 = mul nsw i32 %22, 60547
  %81 = ashr i32 %80, 16
  %82 = mul nsw i32 %38, 25080
  %83 = ashr i32 %82, 16
  %84 = add nsw i32 %83, %81
  %85 = mul nsw i32 %22, 25080
  %86 = ashr i32 %85, 16
  %87 = mul nsw i32 %38, 60547
  %88 = ashr i32 %87, 16
  %89 = sub nsw i32 %86, %88
  %90 = sub nsw i32 %76, %84
  %91 = add nsw i32 %84, %76
  %92 = add nsw i32 %68, %79
  %93 = sub nsw i32 %71, %89
  %94 = sub nsw i32 %79, %68
  %95 = add nsw i32 %71, %89
  %96 = add nsw i32 %72, %91
  %97 = trunc i32 %96 to i16
  store i16 %97, i16* %13, align 2
  %98 = sub nsw i32 %91, %72
  %99 = trunc i32 %98 to i16
  store i16 %99, i16* %40, align 2
  %100 = add nsw i32 %92, %95
  %101 = trunc i32 %100 to i16
  store i16 %101, i16* %16, align 2
  %102 = sub nsw i32 %92, %95
  %103 = trunc i32 %102 to i16
  store i16 %103, i16* %20, align 2
  %104 = add nsw i32 %73, %90
  %105 = trunc i32 %104 to i16
  store i16 %105, i16* %24, align 2
  %106 = sub nsw i32 %90, %73
  %107 = trunc i32 %106 to i16
  store i16 %107, i16* %28, align 2
  %108 = add nsw i32 %94, %93
  %109 = trunc i32 %108 to i16
  store i16 %109, i16* %32, align 2
  %110 = sub nsw i32 %94, %93
  %111 = trunc i32 %110 to i16
  store i16 %111, i16* %36, align 2
  br label %112

112:                                              ; preds = %45, %11
  %113 = getelementptr inbounds i16, i16* %13, i64 1
  %114 = add nuw nsw i32 %12, 1
  %115 = icmp eq i32 %114, 8
  br i1 %115, label %4, label %11

116:                                              ; preds = %367, %4
  %117 = phi i8* [ %0, %4 ], [ %369, %367 ]
  %118 = phi i32 [ 0, %4 ], [ %370, %367 ]
  %119 = phi i16* [ %2, %4 ], [ %368, %367 ]
  %120 = getelementptr inbounds i16, i16* %119, i64 1
  %121 = load i16, i16* %120, align 2
  %122 = sext i16 %121 to i32
  %123 = getelementptr inbounds i16, i16* %119, i64 2
  %124 = load i16, i16* %123, align 2
  %125 = or i16 %124, %121
  %126 = getelementptr inbounds i16, i16* %119, i64 3
  %127 = load i16, i16* %126, align 2
  %128 = sext i16 %127 to i32
  %129 = or i16 %125, %127
  %130 = getelementptr inbounds i16, i16* %119, i64 4
  %131 = load i16, i16* %130, align 2
  %132 = sext i16 %131 to i32
  %133 = or i16 %129, %131
  %134 = getelementptr inbounds i16, i16* %119, i64 5
  %135 = load i16, i16* %134, align 2
  %136 = sext i16 %135 to i32
  %137 = or i16 %133, %135
  %138 = getelementptr inbounds i16, i16* %119, i64 6
  %139 = load i16, i16* %138, align 2
  %140 = or i16 %137, %139
  %141 = getelementptr inbounds i16, i16* %119, i64 7
  %142 = load i16, i16* %141, align 2
  %143 = sext i16 %142 to i32
  %144 = or i16 %140, %142
  %145 = icmp eq i16 %144, 0
  br i1 %145, label %285, label %146

146:                                              ; preds = %116
  %147 = mul nsw i32 %122, 64277
  %148 = ashr i32 %147, 16
  %149 = mul nsw i32 %143, 12785
  %150 = ashr i32 %149, 16
  %151 = add nsw i32 %150, %148
  %152 = mul nsw i32 %122, 12785
  %153 = ashr i32 %152, 16
  %154 = mul nsw i32 %143, 64277
  %155 = ashr i32 %154, 16
  %156 = sub nsw i32 %153, %155
  %157 = mul nsw i32 %128, 54491
  %158 = ashr i32 %157, 16
  %159 = mul nsw i32 %136, 36410
  %160 = ashr i32 %159, 16
  %161 = add nsw i32 %160, %158
  %162 = mul nsw i32 %136, 54491
  %163 = ashr i32 %162, 16
  %164 = mul nsw i32 %128, 36410
  %165 = ashr i32 %164, 16
  %166 = sub nsw i32 %163, %165
  %167 = sub nsw i32 %151, %161
  %168 = mul i32 %167, 46341
  %169 = ashr i32 %168, 16
  %170 = sub nsw i32 %156, %166
  %171 = mul i32 %170, 46341
  %172 = ashr i32 %171, 16
  %173 = add nsw i32 %151, %161
  %174 = add nsw i32 %156, %166
  %175 = load i16, i16* %119, align 2
  %176 = sext i16 %175 to i32
  %177 = add nsw i32 %176, %132
  %178 = mul i32 %177, 46341
  %179 = ashr i32 %178, 16
  %180 = sub nsw i32 %176, %132
  %181 = mul i32 %180, 46341
  %182 = ashr i32 %181, 16
  %183 = add nsw i32 %179, 8
  %184 = add nsw i32 %182, 8
  %185 = sext i16 %124 to i32
  %186 = mul nsw i32 %185, 60547
  %187 = ashr i32 %186, 16
  %188 = sext i16 %139 to i32
  %189 = mul nsw i32 %188, 25080
  %190 = ashr i32 %189, 16
  %191 = add nsw i32 %190, %187
  %192 = mul nsw i32 %185, 25080
  %193 = ashr i32 %192, 16
  %194 = mul nsw i32 %188, 60547
  %195 = ashr i32 %194, 16
  %196 = sub nsw i32 %193, %195
  %197 = sub nsw i32 %183, %191
  %198 = add nsw i32 %183, %191
  %199 = add nsw i32 %184, %169
  %200 = sub nsw i32 %172, %196
  %201 = sub nsw i32 %184, %169
  %202 = add nsw i32 %172, %196
  %203 = load i8, i8* %117, align 1
  %204 = zext i8 %203 to i32
  %205 = add nsw i32 %198, %173
  %206 = ashr i32 %205, 4
  %207 = add nsw i32 %206, %204
  %208 = icmp ugt i32 %207, 255
  %209 = ashr i32 %207, 31
  %210 = xor i32 %209, 255
  %211 = select i1 %208, i32 %210, i32 %207
  %212 = trunc i32 %211 to i8
  store i8 %212, i8* %117, align 1
  %213 = getelementptr inbounds i8, i8* %117, i64 %5
  %214 = load i8, i8* %213, align 1
  %215 = zext i8 %214 to i32
  %216 = sub nsw i32 %198, %173
  %217 = ashr i32 %216, 4
  %218 = add nsw i32 %217, %215
  %219 = icmp ugt i32 %218, 255
  %220 = ashr i32 %218, 31
  %221 = xor i32 %220, 255
  %222 = select i1 %219, i32 %221, i32 %218
  %223 = trunc i32 %222 to i8
  store i8 %223, i8* %213, align 1
  %224 = getelementptr inbounds i8, i8* %117, i64 %1
  %225 = load i8, i8* %224, align 1
  %226 = zext i8 %225 to i32
  %227 = add nsw i32 %199, %202
  %228 = ashr i32 %227, 4
  %229 = add nsw i32 %228, %226
  %230 = icmp ugt i32 %229, 255
  %231 = ashr i32 %229, 31
  %232 = xor i32 %231, 255
  %233 = select i1 %230, i32 %232, i32 %229
  %234 = trunc i32 %233 to i8
  store i8 %234, i8* %224, align 1
  %235 = getelementptr inbounds i8, i8* %117, i64 %6
  %236 = load i8, i8* %235, align 1
  %237 = zext i8 %236 to i32
  %238 = sub nsw i32 %199, %202
  %239 = ashr i32 %238, 4
  %240 = add nsw i32 %239, %237
  %241 = icmp ugt i32 %240, 255
  %242 = ashr i32 %240, 31
  %243 = xor i32 %242, 255
  %244 = select i1 %241, i32 %243, i32 %240
  %245 = trunc i32 %244 to i8
  store i8 %245, i8* %235, align 1
  %246 = getelementptr inbounds i8, i8* %117, i64 %7
  %247 = load i8, i8* %246, align 1
  %248 = zext i8 %247 to i32
  %249 = add nsw i32 %197, %174
  %250 = ashr i32 %249, 4
  %251 = add nsw i32 %250, %248
  %252 = icmp ugt i32 %251, 255
  %253 = ashr i32 %251, 31
  %254 = xor i32 %253, 255
  %255 = select i1 %252, i32 %254, i32 %251
  %256 = trunc i32 %255 to i8
  store i8 %256, i8* %246, align 1
  %257 = getelementptr inbounds i8, i8* %117, i64 %8
  %258 = load i8, i8* %257, align 1
  %259 = zext i8 %258 to i32
  %260 = sub nsw i32 %197, %174
  %261 = ashr i32 %260, 4
  %262 = add nsw i32 %261, %259
  %263 = icmp ugt i32 %262, 255
  %264 = ashr i32 %262, 31
  %265 = xor i32 %264, 255
  %266 = select i1 %263, i32 %265, i32 %262
  %267 = trunc i32 %266 to i8
  store i8 %267, i8* %257, align 1
  %268 = getelementptr inbounds i8, i8* %117, i64 %9
  %269 = load i8, i8* %268, align 1
  %270 = zext i8 %269 to i32
  %271 = add nsw i32 %201, %200
  %272 = ashr i32 %271, 4
  %273 = add nsw i32 %272, %270
  %274 = icmp ugt i32 %273, 255
  %275 = ashr i32 %273, 31
  %276 = xor i32 %275, 255
  %277 = select i1 %274, i32 %276, i32 %273
  %278 = trunc i32 %277 to i8
  store i8 %278, i8* %268, align 1
  %279 = getelementptr inbounds i8, i8* %117, i64 %10
  %280 = load i8, i8* %279, align 1
  %281 = zext i8 %280 to i32
  %282 = sub nsw i32 %201, %200
  %283 = ashr i32 %282, 4
  %284 = add nsw i32 %283, %281
  br label %359

285:                                              ; preds = %116
  %286 = load i16, i16* %119, align 2
  %287 = icmp eq i16 %286, 0
  br i1 %287, label %367, label %288

288:                                              ; preds = %285
  %289 = sext i16 %286 to i32
  %290 = mul nsw i32 %289, 46341
  %291 = add nsw i32 %290, 524288
  %292 = ashr i32 %291, 20
  %293 = load i8, i8* %117, align 1
  %294 = zext i8 %293 to i32
  %295 = add nsw i32 %292, %294
  %296 = icmp ugt i32 %295, 255
  %297 = ashr i32 %295, 31
  %298 = xor i32 %297, 255
  %299 = select i1 %296, i32 %298, i32 %295
  %300 = trunc i32 %299 to i8
  store i8 %300, i8* %117, align 1
  %301 = getelementptr inbounds i8, i8* %117, i64 %1
  %302 = load i8, i8* %301, align 1
  %303 = zext i8 %302 to i32
  %304 = add nsw i32 %292, %303
  %305 = icmp ugt i32 %304, 255
  %306 = ashr i32 %304, 31
  %307 = xor i32 %306, 255
  %308 = select i1 %305, i32 %307, i32 %304
  %309 = trunc i32 %308 to i8
  store i8 %309, i8* %301, align 1
  %310 = getelementptr inbounds i8, i8* %117, i64 %6
  %311 = load i8, i8* %310, align 1
  %312 = zext i8 %311 to i32
  %313 = add nsw i32 %292, %312
  %314 = icmp ugt i32 %313, 255
  %315 = ashr i32 %313, 31
  %316 = xor i32 %315, 255
  %317 = select i1 %314, i32 %316, i32 %313
  %318 = trunc i32 %317 to i8
  store i8 %318, i8* %310, align 1
  %319 = getelementptr inbounds i8, i8* %117, i64 %7
  %320 = load i8, i8* %319, align 1
  %321 = zext i8 %320 to i32
  %322 = add nsw i32 %292, %321
  %323 = icmp ugt i32 %322, 255
  %324 = ashr i32 %322, 31
  %325 = xor i32 %324, 255
  %326 = select i1 %323, i32 %325, i32 %322
  %327 = trunc i32 %326 to i8
  store i8 %327, i8* %319, align 1
  %328 = getelementptr inbounds i8, i8* %117, i64 %8
  %329 = load i8, i8* %328, align 1
  %330 = zext i8 %329 to i32
  %331 = add nsw i32 %292, %330
  %332 = icmp ugt i32 %331, 255
  %333 = ashr i32 %331, 31
  %334 = xor i32 %333, 255
  %335 = select i1 %332, i32 %334, i32 %331
  %336 = trunc i32 %335 to i8
  store i8 %336, i8* %328, align 1
  %337 = getelementptr inbounds i8, i8* %117, i64 %9
  %338 = load i8, i8* %337, align 1
  %339 = zext i8 %338 to i32
  %340 = add nsw i32 %292, %339
  %341 = icmp ugt i32 %340, 255
  %342 = ashr i32 %340, 31
  %343 = xor i32 %342, 255
  %344 = select i1 %341, i32 %343, i32 %340
  %345 = trunc i32 %344 to i8
  store i8 %345, i8* %337, align 1
  %346 = getelementptr inbounds i8, i8* %117, i64 %10
  %347 = load i8, i8* %346, align 1
  %348 = zext i8 %347 to i32
  %349 = add nsw i32 %292, %348
  %350 = icmp ugt i32 %349, 255
  %351 = ashr i32 %349, 31
  %352 = xor i32 %351, 255
  %353 = select i1 %350, i32 %352, i32 %349
  %354 = trunc i32 %353 to i8
  store i8 %354, i8* %346, align 1
  %355 = getelementptr inbounds i8, i8* %117, i64 %5
  %356 = load i8, i8* %355, align 1
  %357 = zext i8 %356 to i32
  %358 = add nsw i32 %292, %357
  br label %359

359:                                              ; preds = %146, %288
  %360 = phi i32 [ %358, %288 ], [ %284, %146 ]
  %361 = phi i8* [ %355, %288 ], [ %279, %146 ]
  %362 = icmp ugt i32 %360, 255
  %363 = ashr i32 %360, 31
  %364 = xor i32 %363, 255
  %365 = select i1 %362, i32 %364, i32 %360
  %366 = trunc i32 %365 to i8
  store i8 %366, i8* %361, align 1
  br label %367

367:                                              ; preds = %359, %285
  %368 = getelementptr inbounds i16, i16* %119, i64 8
  %369 = getelementptr inbounds i8, i8* %117, i64 1
  %370 = add nuw nsw i32 %118, 1
  %371 = icmp eq i32 %370, 8
  br i1 %371, label %372, label %116

372:                                              ; preds = %367
  %373 = bitcast i16* %2 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 2 %373, i8 0, i64 128, i1 false)
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal void @vp3_idct_dc_add_c(i8* nocapture, i64, i16* nocapture) #2 {
  %4 = load i16, i16* %2, align 2
  %5 = sext i16 %4 to i32
  %6 = add nsw i32 %5, 15
  %7 = ashr i32 %6, 5
  %8 = icmp eq i64 %1, 1
  br i1 %8, label %86, label %9

9:                                                ; preds = %3, %9
  %10 = phi i32 [ %84, %9 ], [ 0, %3 ]
  %11 = phi i8* [ %83, %9 ], [ %0, %3 ]
  %12 = load i8, i8* %11, align 1
  %13 = zext i8 %12 to i32
  %14 = add nsw i32 %7, %13
  %15 = icmp ugt i32 %14, 255
  %16 = ashr i32 %14, 31
  %17 = xor i32 %16, 255
  %18 = select i1 %15, i32 %17, i32 %14
  %19 = trunc i32 %18 to i8
  store i8 %19, i8* %11, align 1
  %20 = getelementptr inbounds i8, i8* %11, i64 1
  %21 = load i8, i8* %20, align 1
  %22 = zext i8 %21 to i32
  %23 = add nsw i32 %7, %22
  %24 = icmp ugt i32 %23, 255
  %25 = ashr i32 %23, 31
  %26 = xor i32 %25, 255
  %27 = select i1 %24, i32 %26, i32 %23
  %28 = trunc i32 %27 to i8
  store i8 %28, i8* %20, align 1
  %29 = getelementptr inbounds i8, i8* %11, i64 2
  %30 = load i8, i8* %29, align 1
  %31 = zext i8 %30 to i32
  %32 = add nsw i32 %7, %31
  %33 = icmp ugt i32 %32, 255
  %34 = ashr i32 %32, 31
  %35 = xor i32 %34, 255
  %36 = select i1 %33, i32 %35, i32 %32
  %37 = trunc i32 %36 to i8
  store i8 %37, i8* %29, align 1
  %38 = getelementptr inbounds i8, i8* %11, i64 3
  %39 = load i8, i8* %38, align 1
  %40 = zext i8 %39 to i32
  %41 = add nsw i32 %7, %40
  %42 = icmp ugt i32 %41, 255
  %43 = ashr i32 %41, 31
  %44 = xor i32 %43, 255
  %45 = select i1 %42, i32 %44, i32 %41
  %46 = trunc i32 %45 to i8
  store i8 %46, i8* %38, align 1
  %47 = getelementptr inbounds i8, i8* %11, i64 4
  %48 = load i8, i8* %47, align 1
  %49 = zext i8 %48 to i32
  %50 = add nsw i32 %7, %49
  %51 = icmp ugt i32 %50, 255
  %52 = ashr i32 %50, 31
  %53 = xor i32 %52, 255
  %54 = select i1 %51, i32 %53, i32 %50
  %55 = trunc i32 %54 to i8
  store i8 %55, i8* %47, align 1
  %56 = getelementptr inbounds i8, i8* %11, i64 5
  %57 = load i8, i8* %56, align 1
  %58 = zext i8 %57 to i32
  %59 = add nsw i32 %7, %58
  %60 = icmp ugt i32 %59, 255
  %61 = ashr i32 %59, 31
  %62 = xor i32 %61, 255
  %63 = select i1 %60, i32 %62, i32 %59
  %64 = trunc i32 %63 to i8
  store i8 %64, i8* %56, align 1
  %65 = getelementptr inbounds i8, i8* %11, i64 6
  %66 = load i8, i8* %65, align 1
  %67 = zext i8 %66 to i32
  %68 = add nsw i32 %7, %67
  %69 = icmp ugt i32 %68, 255
  %70 = ashr i32 %68, 31
  %71 = xor i32 %70, 255
  %72 = select i1 %69, i32 %71, i32 %68
  %73 = trunc i32 %72 to i8
  store i8 %73, i8* %65, align 1
  %74 = getelementptr inbounds i8, i8* %11, i64 7
  %75 = load i8, i8* %74, align 1
  %76 = zext i8 %75 to i32
  %77 = add nsw i32 %7, %76
  %78 = icmp ugt i32 %77, 255
  %79 = ashr i32 %77, 31
  %80 = xor i32 %79, 255
  %81 = select i1 %78, i32 %80, i32 %77
  %82 = trunc i32 %81 to i8
  store i8 %82, i8* %74, align 1
  %83 = getelementptr inbounds i8, i8* %11, i64 %1
  %84 = add nuw nsw i32 %10, 1
  %85 = icmp eq i32 %84, 8
  br i1 %85, label %166, label %9

86:                                               ; preds = %3
  %87 = getelementptr i8, i8* %0, i64 6
  %88 = load i8, i8* %87, align 1
  br label %89

89:                                               ; preds = %89, %86
  %90 = phi i8 [ %88, %86 ], [ %162, %89 ]
  %91 = phi i32 [ 0, %86 ], [ %164, %89 ]
  %92 = phi i8* [ %0, %86 ], [ %163, %89 ]
  %93 = load i8, i8* %92, align 1
  %94 = zext i8 %93 to i32
  %95 = add nsw i32 %7, %94
  %96 = icmp ugt i32 %95, 255
  %97 = ashr i32 %95, 31
  %98 = xor i32 %97, 255
  %99 = select i1 %96, i32 %98, i32 %95
  %100 = trunc i32 %99 to i8
  store i8 %100, i8* %92, align 1
  %101 = getelementptr inbounds i8, i8* %92, i64 1
  %102 = load i8, i8* %101, align 1
  %103 = zext i8 %102 to i32
  %104 = add nsw i32 %7, %103
  %105 = icmp ugt i32 %104, 255
  %106 = ashr i32 %104, 31
  %107 = xor i32 %106, 255
  %108 = select i1 %105, i32 %107, i32 %104
  %109 = trunc i32 %108 to i8
  store i8 %109, i8* %101, align 1
  %110 = getelementptr inbounds i8, i8* %92, i64 2
  %111 = load i8, i8* %110, align 1
  %112 = zext i8 %111 to i32
  %113 = add nsw i32 %7, %112
  %114 = icmp ugt i32 %113, 255
  %115 = ashr i32 %113, 31
  %116 = xor i32 %115, 255
  %117 = select i1 %114, i32 %116, i32 %113
  %118 = trunc i32 %117 to i8
  store i8 %118, i8* %110, align 1
  %119 = getelementptr inbounds i8, i8* %92, i64 3
  %120 = load i8, i8* %119, align 1
  %121 = zext i8 %120 to i32
  %122 = add nsw i32 %7, %121
  %123 = icmp ugt i32 %122, 255
  %124 = ashr i32 %122, 31
  %125 = xor i32 %124, 255
  %126 = select i1 %123, i32 %125, i32 %122
  %127 = trunc i32 %126 to i8
  store i8 %127, i8* %119, align 1
  %128 = getelementptr inbounds i8, i8* %92, i64 4
  %129 = load i8, i8* %128, align 1
  %130 = zext i8 %129 to i32
  %131 = add nsw i32 %7, %130
  %132 = icmp ugt i32 %131, 255
  %133 = ashr i32 %131, 31
  %134 = xor i32 %133, 255
  %135 = select i1 %132, i32 %134, i32 %131
  %136 = trunc i32 %135 to i8
  store i8 %136, i8* %128, align 1
  %137 = getelementptr inbounds i8, i8* %92, i64 5
  %138 = load i8, i8* %137, align 1
  %139 = zext i8 %138 to i32
  %140 = add nsw i32 %7, %139
  %141 = icmp ugt i32 %140, 255
  %142 = ashr i32 %140, 31
  %143 = xor i32 %142, 255
  %144 = select i1 %141, i32 %143, i32 %140
  %145 = trunc i32 %144 to i8
  store i8 %145, i8* %137, align 1
  %146 = getelementptr inbounds i8, i8* %92, i64 6
  %147 = zext i8 %90 to i32
  %148 = add nsw i32 %7, %147
  %149 = icmp ugt i32 %148, 255
  %150 = ashr i32 %148, 31
  %151 = xor i32 %150, 255
  %152 = select i1 %149, i32 %151, i32 %148
  %153 = trunc i32 %152 to i8
  store i8 %153, i8* %146, align 1
  %154 = getelementptr inbounds i8, i8* %92, i64 7
  %155 = load i8, i8* %154, align 1
  %156 = zext i8 %155 to i32
  %157 = add nsw i32 %7, %156
  %158 = icmp ugt i32 %157, 255
  %159 = ashr i32 %157, 31
  %160 = xor i32 %159, 255
  %161 = select i1 %158, i32 %160, i32 %157
  %162 = trunc i32 %161 to i8
  store i8 %162, i8* %154, align 1
  %163 = getelementptr inbounds i8, i8* %92, i64 %1
  %164 = add nuw nsw i32 %91, 1
  %165 = icmp eq i32 %164, 8
  br i1 %165, label %166, label %89

166:                                              ; preds = %9, %89
  store i16 0, i16* %2, align 2
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal void @vp3_v_loop_filter_8_c(i8*, i64, i32* nocapture readonly) #2 {
  %4 = sub nsw i64 0, %1
  %5 = shl nsw i64 %4, 1
  br label %6

6:                                                ; preds = %6, %3
  %7 = phi i64 [ 0, %3 ], [ %43, %6 ]
  %8 = getelementptr inbounds i8, i8* %0, i64 %7
  %9 = getelementptr inbounds i8, i8* %8, i64 %5
  %10 = load i8, i8* %9, align 1
  %11 = zext i8 %10 to i32
  %12 = getelementptr inbounds i8, i8* %8, i64 %1
  %13 = load i8, i8* %12, align 1
  %14 = zext i8 %13 to i32
  %15 = load i8, i8* %8, align 1
  %16 = zext i8 %15 to i32
  %17 = getelementptr inbounds i8, i8* %8, i64 %4
  %18 = load i8, i8* %17, align 1
  %19 = zext i8 %18 to i32
  %20 = sub nsw i32 %16, %19
  %21 = mul nsw i32 %20, 3
  %22 = add nuw nsw i32 %11, 4
  %23 = sub nsw i32 %22, %14
  %24 = add nsw i32 %23, %21
  %25 = ashr i32 %24, 3
  %26 = sext i32 %25 to i64
  %27 = getelementptr inbounds i32, i32* %2, i64 %26
  %28 = load i32, i32* %27, align 4
  %29 = add nsw i32 %28, %19
  %30 = icmp ugt i32 %29, 255
  %31 = ashr i32 %29, 31
  %32 = xor i32 %31, 255
  %33 = select i1 %30, i32 %32, i32 %29
  %34 = trunc i32 %33 to i8
  store i8 %34, i8* %17, align 1
  %35 = load i8, i8* %8, align 1
  %36 = zext i8 %35 to i32
  %37 = sub nsw i32 %36, %28
  %38 = icmp ugt i32 %37, 255
  %39 = ashr i32 %37, 31
  %40 = xor i32 %39, 255
  %41 = select i1 %38, i32 %40, i32 %37
  %42 = trunc i32 %41 to i8
  store i8 %42, i8* %8, align 1
  %43 = add nuw nsw i64 %7, 1
  %44 = icmp eq i64 %43, 8
  br i1 %44, label %45, label %6

45:                                               ; preds = %6
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal void @vp3_h_loop_filter_8_c(i8*, i64, i32* nocapture readonly) #2 {
  %4 = shl nsw i64 %1, 3
  %5 = getelementptr inbounds i8, i8* %0, i64 %4
  %6 = icmp eq i64 %1, 0
  br i1 %6, label %43, label %7

7:                                                ; preds = %3, %7
  %8 = phi i8* [ %41, %7 ], [ %0, %3 ]
  %9 = getelementptr inbounds i8, i8* %8, i64 -2
  %10 = load i8, i8* %9, align 1
  %11 = zext i8 %10 to i32
  %12 = getelementptr inbounds i8, i8* %8, i64 1
  %13 = load i8, i8* %12, align 1
  %14 = zext i8 %13 to i32
  %15 = load i8, i8* %8, align 1
  %16 = zext i8 %15 to i32
  %17 = getelementptr inbounds i8, i8* %8, i64 -1
  %18 = load i8, i8* %17, align 1
  %19 = zext i8 %18 to i32
  %20 = sub nsw i32 %16, %19
  %21 = mul nsw i32 %20, 3
  %22 = add nuw nsw i32 %11, 4
  %23 = sub nsw i32 %22, %14
  %24 = add nsw i32 %23, %21
  %25 = ashr i32 %24, 3
  %26 = sext i32 %25 to i64
  %27 = getelementptr inbounds i32, i32* %2, i64 %26
  %28 = load i32, i32* %27, align 4
  %29 = add nsw i32 %28, %19
  %30 = icmp ugt i32 %29, 255
  %31 = ashr i32 %29, 31
  %32 = xor i32 %31, 255
  %33 = select i1 %30, i32 %32, i32 %29
  %34 = trunc i32 %33 to i8
  store i8 %34, i8* %17, align 1
  %35 = sub nsw i32 %16, %28
  %36 = icmp ugt i32 %35, 255
  %37 = ashr i32 %35, 31
  %38 = xor i32 %37, 255
  %39 = select i1 %36, i32 %38, i32 %35
  %40 = trunc i32 %39 to i8
  store i8 %40, i8* %8, align 1
  %41 = getelementptr inbounds i8, i8* %8, i64 %1
  %42 = icmp eq i8* %41, %5
  br i1 %42, label %43, label %7

43:                                               ; preds = %7, %3
  ret void
}

declare void @ff_vp3dsp_init_x86(%struct.VP3DSPContext*, i32) local_unnamed_addr #4

; Function Attrs: nounwind ssp uwtable
define hidden void @ff_vp3dsp_set_bounding_values(i32* nocapture, i32) local_unnamed_addr #0 {
  %3 = getelementptr inbounds i32, i32* %0, i64 127
  %4 = icmp ult i32 %1, 128
  br i1 %4, label %6, label %5

5:                                                ; preds = %2
  tail call void (i8*, i32, i8*, ...) @av_log(i8* null, i32 0, i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str, i64 0, i64 0), i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.1, i64 0, i64 0), i8* getelementptr inbounds ([45 x i8], [45 x i8]* @.str.2, i64 0, i64 0), i32 479) #6
  tail call void @abort() #7
  unreachable

6:                                                ; preds = %2
  %7 = bitcast i32* %0 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 4 %7, i8 0, i64 1024, i1 false)
  %8 = icmp eq i32 %1, 0
  br i1 %8, label %43, label %9

9:                                                ; preds = %6
  %10 = sext i32 %1 to i64
  br label %17

11:                                               ; preds = %17
  %12 = icmp slt i32 %1, 128
  %13 = icmp ne i32 %1, 0
  %14 = and i1 %12, %13
  br i1 %14, label %15, label %38

15:                                               ; preds = %11
  %16 = sext i32 %1 to i64
  br label %26

17:                                               ; preds = %9, %17
  %18 = phi i64 [ 0, %9 ], [ %24, %17 ]
  %19 = sub nsw i64 0, %18
  %20 = getelementptr inbounds i32, i32* %3, i64 %19
  %21 = trunc i64 %19 to i32
  store i32 %21, i32* %20, align 4
  %22 = getelementptr inbounds i32, i32* %3, i64 %18
  %23 = trunc i64 %18 to i32
  store i32 %23, i32* %22, align 4
  %24 = add nuw nsw i64 %18, 1
  %25 = icmp slt i64 %24, %10
  br i1 %25, label %17, label %11

26:                                               ; preds = %15, %26
  %27 = phi i64 [ %16, %15 ], [ %33, %26 ]
  %28 = phi i32 [ %1, %15 ], [ %34, %26 ]
  %29 = getelementptr inbounds i32, i32* %3, i64 %27
  store i32 %28, i32* %29, align 4
  %30 = sub nsw i32 0, %28
  %31 = sub nsw i64 0, %27
  %32 = getelementptr inbounds i32, i32* %3, i64 %31
  store i32 %30, i32* %32, align 4
  %33 = add nsw i64 %27, 1
  %34 = add nsw i32 %28, -1
  %35 = icmp slt i64 %33, 128
  %36 = icmp ne i32 %34, 0
  %37 = and i1 %35, %36
  br i1 %37, label %26, label %38

38:                                               ; preds = %26, %11
  %39 = phi i32 [ %1, %11 ], [ %34, %26 ]
  %40 = phi i1 [ %13, %11 ], [ %36, %26 ]
  br i1 %40, label %41, label %43

41:                                               ; preds = %38
  %42 = getelementptr inbounds i32, i32* %0, i64 255
  store i32 %39, i32* %42, align 4
  br label %43

43:                                               ; preds = %6, %41, %38
  %44 = mul i32 %1, 33686018
  %45 = getelementptr inbounds i32, i32* %0, i64 257
  store i32 %44, i32* %45, align 4
  %46 = getelementptr inbounds i32, i32* %0, i64 256
  store i32 %44, i32* %46, align 4
  ret void
}

declare void @av_log(i8*, i32, i8*, ...) local_unnamed_addr #4

; Function Attrs: noreturn nounwind
declare void @abort() local_unnamed_addr #5

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="true" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { nofree norecurse nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="true" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { cold nounwind optsize ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="true" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="true" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { noreturn nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="true" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nounwind }
attributes #7 = { noreturn nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
