; ModuleID = '../../v8/src/parsing/func-name-inferrer.cc'
source_filename = "../../v8/src/parsing/func-name-inferrer.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.v8::internal::FuncNameInferrer" = type { %"class.v8::internal::AstValueFactory"*, %"class.std::__1::vector", %"class.std::__1::vector.23", i64 }
%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { %"struct.v8::internal::FuncNameInferrer::Name"*, %"struct.v8::internal::FuncNameInferrer::Name"*, %"class.std::__1::__compressed_pair.18" }
%"struct.v8::internal::FuncNameInferrer::Name" = type { %"class.v8::internal::PointerWithPayload" }
%"class.v8::internal::PointerWithPayload" = type { i64 }
%"class.std::__1::__compressed_pair.18" = type { %"struct.std::__1::__compressed_pair_elem.19" }
%"struct.std::__1::__compressed_pair_elem.19" = type { %"struct.v8::internal::FuncNameInferrer::Name"* }
%"class.std::__1::vector.23" = type { %"class.std::__1::__vector_base.24" }
%"class.std::__1::__vector_base.24" = type { %"class.v8::internal::FunctionLiteral"**, %"class.v8::internal::FunctionLiteral"**, %"class.std::__1::__compressed_pair.25" }
%"class.v8::internal::FunctionLiteral" = type { %"class.v8::internal::Expression", i32, i32, i32, i32, i32, i32, %"class.v8::internal::AstConsString"*, %"class.v8::internal::DeclarationScope"*, %"class.v8::internal::ZoneList", %"class.v8::internal::AstConsString"*, %"class.v8::internal::Handle", %"class.v8::internal::ProducedPreparseData"* }
%"class.v8::internal::Expression" = type { %"class.v8::internal::AstNode" }
%"class.v8::internal::AstNode" = type { i32, i32 }
%"class.v8::internal::DeclarationScope" = type opaque
%"class.v8::internal::ZoneList" = type { %"class.v8::internal::Statement"**, i32, i32 }
%"class.v8::internal::Statement" = type { %"class.v8::internal::AstNode" }
%"class.v8::internal::AstConsString" = type { %"class.v8::internal::Handle", %"struct.v8::internal::AstConsString::Segment" }
%"struct.v8::internal::AstConsString::Segment" = type { %"class.v8::internal::AstRawString"*, %"struct.v8::internal::AstConsString::Segment"* }
%"class.v8::internal::AstRawString" = type <{ %union.anon, %"class.v8::internal::Vector", i32, i8, [3 x i8] }>
%union.anon = type { %"class.v8::internal::AstRawString"* }
%"class.v8::internal::Vector" = type { i8*, i64 }
%"class.v8::internal::Handle" = type { %"class.v8::internal::HandleBase" }
%"class.v8::internal::HandleBase" = type { i64* }
%"class.v8::internal::ProducedPreparseData" = type { i32 (...)** }
%"class.std::__1::__compressed_pair.25" = type { %"struct.std::__1::__compressed_pair_elem.26" }
%"struct.std::__1::__compressed_pair_elem.26" = type { %"class.v8::internal::FunctionLiteral"** }
%"class.v8::internal::AstValueFactory" = type { %"class.v8::base::TemplateHashMapImpl", %"class.v8::internal::AstRawString"*, %"class.v8::internal::AstRawString"**, %"class.v8::internal::AstStringConstants"*, %"class.v8::internal::AstConsString"*, [128 x %"class.v8::internal::AstRawString"*], %"class.v8::internal::Zone"*, i64 }
%"class.v8::base::TemplateHashMapImpl" = type { %"struct.v8::base::TemplateHashMapImpl<const v8::internal::AstRawString *, v8::base::NoHashMapValue, v8::internal::AstRawStringMapMatcher, v8::base::DefaultAllocationPolicy>::Impl" }
%"struct.v8::base::TemplateHashMapImpl<const v8::internal::AstRawString *, v8::base::NoHashMapValue, v8::internal::AstRawStringMapMatcher, v8::base::DefaultAllocationPolicy>::Impl" = type { %"struct.v8::base::TemplateHashMapEntry"*, i32, i32 }
%"struct.v8::base::TemplateHashMapEntry" = type <{ %union.anon.31, i32, [4 x i8] }>
%union.anon.31 = type { %"class.v8::internal::AstRawString"* }
%"class.v8::internal::AstStringConstants" = type { %"class.v8::internal::Zone", %"class.v8::base::TemplateHashMapImpl", i64, %"class.v8::internal::AstRawString"*, %"class.v8::internal::AstRawString"*, %"class.v8::internal::AstRawString"*, %"class.v8::internal::AstRawString"*, %"class.v8::internal::AstRawString"*, %"class.v8::internal::AstRawString"*, %"class.v8::internal::AstRawString"*, %"class.v8::internal::AstRawString"*, %"class.v8::internal::AstRawString"*, %"class.v8::internal::AstRawString"*, %"class.v8::internal::AstRawString"*, %"class.v8::internal::AstRawString"*, %"class.v8::internal::AstRawString"*, %"class.v8::internal::AstRawString"*, %"class.v8::internal::AstRawString"*, %"class.v8::internal::AstRawString"*, %"class.v8::internal::AstRawString"*, %"class.v8::internal::AstRawString"*, %"class.v8::internal::AstRawString"*, %"class.v8::internal::AstRawString"*, %"class.v8::internal::AstRawString"*, %"class.v8::internal::AstRawString"*, %"class.v8::internal::AstRawString"*, %"class.v8::internal::AstRawString"*, %"class.v8::internal::AstRawString"*, %"class.v8::internal::AstRawString"*, %"class.v8::internal::AstRawString"*, %"class.v8::internal::AstRawString"*, %"class.v8::internal::AstRawString"*, %"class.v8::internal::AstRawString"*, %"class.v8::internal::AstRawString"*, %"class.v8::internal::AstRawString"*, %"class.v8::internal::AstRawString"*, %"class.v8::internal::AstRawString"*, %"class.v8::internal::AstRawString"*, %"class.v8::internal::AstRawString"*, %"class.v8::internal::AstRawString"*, %"class.v8::internal::AstRawString"*, %"class.v8::internal::AstRawString"*, %"class.v8::internal::AstRawString"*, %"class.v8::internal::AstRawString"*, %"class.v8::internal::AstRawString"*, %"class.v8::internal::AstRawString"*, %"class.v8::internal::AstRawString"*, %"class.v8::internal::AstRawString"*, %"class.v8::internal::AstRawString"*, %"class.v8::internal::AstRawString"*, %"class.v8::internal::AstRawString"*, %"class.v8::internal::AstRawString"*, %"class.v8::internal::AstRawString"*, %"class.v8::internal::AstRawString"*, %"class.v8::internal::AstRawString"*, %"class.v8::internal::AstRawString"*, %"class.v8::internal::AstRawString"* }
%"class.v8::internal::Zone" = type <{ i64, i64, i64, i64, %"class.v8::internal::AccountingAllocator"*, %"class.v8::internal::Segment"*, i8*, i8, i8, [6 x i8] }>
%"class.v8::internal::AccountingAllocator" = type { i32 (...)**, %"struct.std::__1::atomic", %"struct.std::__1::atomic", %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr.2" }
%"struct.std::__1::atomic" = type { %"struct.std::__1::__atomic_base" }
%"struct.std::__1::__atomic_base" = type { %"struct.std::__1::__atomic_base.0" }
%"struct.std::__1::__atomic_base.0" = type { %"struct.std::__1::__cxx_atomic_impl" }
%"struct.std::__1::__cxx_atomic_impl" = type { %"struct.std::__1::__cxx_atomic_base_impl" }
%"struct.std::__1::__cxx_atomic_base_impl" = type { i64 }
%"class.std::__1::unique_ptr" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %"class.v8::internal::VirtualMemory"* }
%"class.v8::internal::VirtualMemory" = type { %"class.v8::PageAllocator"*, %"class.v8::base::AddressRegion" }
%"class.v8::PageAllocator" = type { i32 (...)** }
%"class.v8::base::AddressRegion" = type { i64, i64 }
%"class.std::__1::unique_ptr.2" = type { %"class.std::__1::__compressed_pair.3" }
%"class.std::__1::__compressed_pair.3" = type { %"struct.std::__1::__compressed_pair_elem.4" }
%"struct.std::__1::__compressed_pair_elem.4" = type { %"class.v8::base::BoundedPageAllocator"* }
%"class.v8::base::BoundedPageAllocator" = type { %"class.v8::PageAllocator", %"class.v8::base::Mutex", i64, i64, %"class.v8::PageAllocator"*, %"class.v8::base::RegionAllocator" }
%"class.v8::base::Mutex" = type { %union.pthread_mutex_t }
%union.pthread_mutex_t = type { %struct.__pthread_mutex_s }
%struct.__pthread_mutex_s = type { i32, i32, i32, i32, i32, i16, i16, %struct.__pthread_internal_list }
%struct.__pthread_internal_list = type { %struct.__pthread_internal_list*, %struct.__pthread_internal_list* }
%"class.v8::base::RegionAllocator" = type { %"class.v8::base::RegionAllocator::Region", i64, i64, i64, i64, %"class.std::__1::set", %"class.std::__1::set.11" }
%"class.v8::base::RegionAllocator::Region" = type <{ %"class.v8::base::AddressRegion", i32, [4 x i8] }>
%"class.std::__1::set" = type { %"class.std::__1::__tree" }
%"class.std::__1::__tree" = type { %"class.std::__1::__tree_end_node"*, %"class.std::__1::__compressed_pair.5", %"class.std::__1::__compressed_pair.8" }
%"class.std::__1::__tree_end_node" = type { %"class.std::__1::__tree_node_base"* }
%"class.std::__1::__tree_node_base" = type <{ %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_end_node"*, i8, [7 x i8] }>
%"class.std::__1::__compressed_pair.5" = type { %"struct.std::__1::__compressed_pair_elem.6" }
%"struct.std::__1::__compressed_pair_elem.6" = type { %"class.std::__1::__tree_end_node" }
%"class.std::__1::__compressed_pair.8" = type { %"struct.std::__1::__compressed_pair_elem.9" }
%"struct.std::__1::__compressed_pair_elem.9" = type { i64 }
%"class.std::__1::set.11" = type { %"class.std::__1::__tree.12" }
%"class.std::__1::__tree.12" = type { %"class.std::__1::__tree_end_node"*, %"class.std::__1::__compressed_pair.5", %"class.std::__1::__compressed_pair.13" }
%"class.std::__1::__compressed_pair.13" = type { %"struct.std::__1::__compressed_pair_elem.9" }
%"class.v8::internal::Segment" = type { %"class.v8::internal::Zone"*, %"class.v8::internal::Segment"*, i64 }
%"class.std::__1::__vector_base_common" = type { i8 }

@.str = private unnamed_addr constant [18 x i8] c"Check failed: %s.\00", align 1
@.str.1 = private unnamed_addr constant [24 x i8] c"names_stack_.size() > 0\00", align 1
@.str.2 = private unnamed_addr constant [6 x i8] c"async\00", align 1
@.str.3 = private unnamed_addr constant [54 x i8] c"names_stack_.back().name()->IsOneByteEqualTo(\22async\22)\00", align 1

@_ZN2v88internal16FuncNameInferrerC1EPNS0_15AstValueFactoryE = hidden unnamed_addr alias void (%"class.v8::internal::FuncNameInferrer"*, %"class.v8::internal::AstValueFactory"*), void (%"class.v8::internal::FuncNameInferrer"*, %"class.v8::internal::AstValueFactory"*)* @_ZN2v88internal16FuncNameInferrerC2EPNS0_15AstValueFactoryE

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal16FuncNameInferrerC2EPNS0_15AstValueFactoryE(%"class.v8::internal::FuncNameInferrer"* nocapture, %"class.v8::internal::AstValueFactory"*) unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.v8::internal::FuncNameInferrer", %"class.v8::internal::FuncNameInferrer"* %0, i64 0, i32 0
  store %"class.v8::internal::AstValueFactory"* %1, %"class.v8::internal::AstValueFactory"** %3, align 8
  %4 = getelementptr inbounds %"class.v8::internal::FuncNameInferrer", %"class.v8::internal::FuncNameInferrer"* %0, i64 0, i32 1
  %5 = bitcast %"class.std::__1::vector"* %4 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %5, i8 0, i64 56, i1 false)
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal16FuncNameInferrer17PushEnclosingNameEPKNS0_12AstRawStringE(%"class.v8::internal::FuncNameInferrer"*, %"class.v8::internal::AstRawString"*) local_unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.v8::internal::AstRawString", %"class.v8::internal::AstRawString"* %1, i64 0, i32 1, i32 1
  %4 = load i64, i64* %3, align 8
  %5 = trunc i64 %4 to i32
  %6 = icmp eq i32 %5, 0
  br i1 %6, label %82, label %7

7:                                                ; preds = %2
  %8 = tail call zeroext i16 @_ZNK2v88internal12AstRawString14FirstCharacterEv(%"class.v8::internal::AstRawString"* %1) #7
  %9 = zext i16 %8 to i32
  %10 = tail call zeroext i1 @_ZN7unibrow9Uppercase2IsEj(i32 %9) #7
  br i1 %10, label %11, label %82

11:                                               ; preds = %7
  %12 = getelementptr inbounds %"class.v8::internal::FuncNameInferrer", %"class.v8::internal::FuncNameInferrer"* %0, i64 0, i32 1
  %13 = ptrtoint %"class.v8::internal::AstRawString"* %1 to i64
  %14 = getelementptr inbounds %"class.v8::internal::FuncNameInferrer", %"class.v8::internal::FuncNameInferrer"* %0, i64 0, i32 1, i32 0, i32 1
  %15 = load %"struct.v8::internal::FuncNameInferrer::Name"*, %"struct.v8::internal::FuncNameInferrer::Name"** %14, align 8
  %16 = getelementptr inbounds %"class.v8::internal::FuncNameInferrer", %"class.v8::internal::FuncNameInferrer"* %0, i64 0, i32 1, i32 0, i32 2, i32 0, i32 0
  %17 = load %"struct.v8::internal::FuncNameInferrer::Name"*, %"struct.v8::internal::FuncNameInferrer::Name"** %16, align 8
  %18 = icmp ult %"struct.v8::internal::FuncNameInferrer::Name"* %15, %17
  %19 = ptrtoint %"struct.v8::internal::FuncNameInferrer::Name"* %17 to i64
  br i1 %18, label %20, label %25

20:                                               ; preds = %11
  %21 = getelementptr inbounds %"struct.v8::internal::FuncNameInferrer::Name", %"struct.v8::internal::FuncNameInferrer::Name"* %15, i64 0, i32 0, i32 0
  store i64 %13, i64* %21, align 8
  %22 = getelementptr inbounds %"struct.v8::internal::FuncNameInferrer::Name", %"struct.v8::internal::FuncNameInferrer::Name"* %15, i64 1
  %23 = ptrtoint %"struct.v8::internal::FuncNameInferrer::Name"* %22 to i64
  %24 = bitcast %"struct.v8::internal::FuncNameInferrer::Name"** %14 to i64*
  store i64 %23, i64* %24, align 8
  br label %82

25:                                               ; preds = %11
  %26 = ptrtoint %"struct.v8::internal::FuncNameInferrer::Name"* %15 to i64
  %27 = bitcast %"struct.v8::internal::FuncNameInferrer::Name"** %14 to i64*
  %28 = bitcast %"class.std::__1::vector"* %12 to i64*
  %29 = load i64, i64* %28, align 8
  %30 = sub i64 %26, %29
  %31 = ashr exact i64 %30, 3
  %32 = add nsw i64 %31, 1
  %33 = icmp ugt i64 %32, 2305843009213693951
  br i1 %33, label %34, label %36

34:                                               ; preds = %25
  %35 = bitcast %"class.std::__1::vector"* %12 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %35) #8
  unreachable

36:                                               ; preds = %25
  %37 = bitcast %"struct.v8::internal::FuncNameInferrer::Name"** %16 to i64*
  %38 = sub i64 %19, %29
  %39 = ashr exact i64 %38, 3
  %40 = icmp ult i64 %39, 1152921504606846975
  br i1 %40, label %41, label %49

41:                                               ; preds = %36
  %42 = ashr exact i64 %38, 2
  %43 = icmp ult i64 %42, %32
  %44 = select i1 %43, i64 %32, i64 %42
  %45 = icmp eq i64 %44, 0
  br i1 %45, label %54, label %46

46:                                               ; preds = %41
  %47 = icmp ugt i64 %44, 2305843009213693951
  br i1 %47, label %48, label %49

48:                                               ; preds = %46
  tail call void @abort() #8
  unreachable

49:                                               ; preds = %46, %36
  %50 = phi i64 [ %44, %46 ], [ 2305843009213693951, %36 ]
  %51 = shl i64 %50, 3
  %52 = tail call i8* @_Znwm(i64 %51) #9
  %53 = bitcast i8* %52 to %"struct.v8::internal::FuncNameInferrer::Name"*
  br label %54

54:                                               ; preds = %49, %41
  %55 = phi i64 [ %50, %49 ], [ 0, %41 ]
  %56 = phi %"struct.v8::internal::FuncNameInferrer::Name"* [ %53, %49 ], [ null, %41 ]
  %57 = getelementptr inbounds %"struct.v8::internal::FuncNameInferrer::Name", %"struct.v8::internal::FuncNameInferrer::Name"* %56, i64 %31
  %58 = getelementptr inbounds %"struct.v8::internal::FuncNameInferrer::Name", %"struct.v8::internal::FuncNameInferrer::Name"* %56, i64 %55
  %59 = ptrtoint %"struct.v8::internal::FuncNameInferrer::Name"* %58 to i64
  %60 = getelementptr inbounds %"struct.v8::internal::FuncNameInferrer::Name", %"struct.v8::internal::FuncNameInferrer::Name"* %57, i64 0, i32 0, i32 0
  store i64 %13, i64* %60, align 8
  %61 = getelementptr inbounds %"struct.v8::internal::FuncNameInferrer::Name", %"struct.v8::internal::FuncNameInferrer::Name"* %57, i64 1
  %62 = ptrtoint %"struct.v8::internal::FuncNameInferrer::Name"* %61 to i64
  %63 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %12, i64 0, i32 0, i32 0
  %64 = load %"struct.v8::internal::FuncNameInferrer::Name"*, %"struct.v8::internal::FuncNameInferrer::Name"** %63, align 8
  %65 = load i64, i64* %27, align 8
  %66 = ptrtoint %"struct.v8::internal::FuncNameInferrer::Name"* %64 to i64
  %67 = sub i64 %65, %66
  %68 = ashr exact i64 %67, 3
  %69 = sub nsw i64 0, %68
  %70 = getelementptr inbounds %"struct.v8::internal::FuncNameInferrer::Name", %"struct.v8::internal::FuncNameInferrer::Name"* %57, i64 %69
  %71 = ptrtoint %"struct.v8::internal::FuncNameInferrer::Name"* %70 to i64
  %72 = icmp sgt i64 %67, 0
  br i1 %72, label %73, label %77

73:                                               ; preds = %54
  %74 = bitcast %"struct.v8::internal::FuncNameInferrer::Name"* %70 to i8*
  %75 = bitcast %"struct.v8::internal::FuncNameInferrer::Name"* %64 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %74, i8* align 8 %75, i64 %67, i1 false) #7
  %76 = load %"struct.v8::internal::FuncNameInferrer::Name"*, %"struct.v8::internal::FuncNameInferrer::Name"** %63, align 8
  br label %77

77:                                               ; preds = %73, %54
  %78 = phi %"struct.v8::internal::FuncNameInferrer::Name"* [ %64, %54 ], [ %76, %73 ]
  store i64 %71, i64* %28, align 8
  store i64 %62, i64* %27, align 8
  store i64 %59, i64* %37, align 8
  %79 = icmp eq %"struct.v8::internal::FuncNameInferrer::Name"* %78, null
  br i1 %79, label %82, label %80

80:                                               ; preds = %77
  %81 = bitcast %"struct.v8::internal::FuncNameInferrer::Name"* %78 to i8*
  tail call void @_ZdlPv(i8* %81) #9
  br label %82

82:                                               ; preds = %80, %77, %20, %7, %2
  ret void
}

declare zeroext i1 @_ZN7unibrow9Uppercase2IsEj(i32) local_unnamed_addr #1

declare zeroext i16 @_ZNK2v88internal12AstRawString14FirstCharacterEv(%"class.v8::internal::AstRawString"*) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal16FuncNameInferrer15PushLiteralNameEPKNS0_12AstRawStringE(%"class.v8::internal::FuncNameInferrer"*, %"class.v8::internal::AstRawString"*) local_unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.v8::internal::FuncNameInferrer", %"class.v8::internal::FuncNameInferrer"* %0, i64 0, i32 3
  %4 = load i64, i64* %3, align 8
  %5 = icmp eq i64 %4, 0
  br i1 %5, label %86, label %6

6:                                                ; preds = %2
  %7 = getelementptr inbounds %"class.v8::internal::FuncNameInferrer", %"class.v8::internal::FuncNameInferrer"* %0, i64 0, i32 0
  %8 = load %"class.v8::internal::AstValueFactory"*, %"class.v8::internal::AstValueFactory"** %7, align 8
  %9 = getelementptr inbounds %"class.v8::internal::AstValueFactory", %"class.v8::internal::AstValueFactory"* %8, i64 0, i32 3
  %10 = load %"class.v8::internal::AstStringConstants"*, %"class.v8::internal::AstStringConstants"** %9, align 8
  %11 = getelementptr inbounds %"class.v8::internal::AstStringConstants", %"class.v8::internal::AstStringConstants"* %10, i64 0, i32 45
  %12 = load %"class.v8::internal::AstRawString"*, %"class.v8::internal::AstRawString"** %11, align 8
  %13 = icmp eq %"class.v8::internal::AstRawString"* %12, %1
  br i1 %13, label %86, label %14

14:                                               ; preds = %6
  %15 = getelementptr inbounds %"class.v8::internal::FuncNameInferrer", %"class.v8::internal::FuncNameInferrer"* %0, i64 0, i32 1
  %16 = ptrtoint %"class.v8::internal::AstRawString"* %1 to i64
  %17 = or i64 %16, 1
  %18 = getelementptr inbounds %"class.v8::internal::FuncNameInferrer", %"class.v8::internal::FuncNameInferrer"* %0, i64 0, i32 1, i32 0, i32 1
  %19 = load %"struct.v8::internal::FuncNameInferrer::Name"*, %"struct.v8::internal::FuncNameInferrer::Name"** %18, align 8
  %20 = getelementptr inbounds %"class.v8::internal::FuncNameInferrer", %"class.v8::internal::FuncNameInferrer"* %0, i64 0, i32 1, i32 0, i32 2, i32 0, i32 0
  %21 = load %"struct.v8::internal::FuncNameInferrer::Name"*, %"struct.v8::internal::FuncNameInferrer::Name"** %20, align 8
  %22 = icmp ult %"struct.v8::internal::FuncNameInferrer::Name"* %19, %21
  %23 = ptrtoint %"struct.v8::internal::FuncNameInferrer::Name"* %21 to i64
  br i1 %22, label %24, label %29

24:                                               ; preds = %14
  %25 = getelementptr inbounds %"struct.v8::internal::FuncNameInferrer::Name", %"struct.v8::internal::FuncNameInferrer::Name"* %19, i64 0, i32 0, i32 0
  store i64 %17, i64* %25, align 8
  %26 = getelementptr inbounds %"struct.v8::internal::FuncNameInferrer::Name", %"struct.v8::internal::FuncNameInferrer::Name"* %19, i64 1
  %27 = ptrtoint %"struct.v8::internal::FuncNameInferrer::Name"* %26 to i64
  %28 = bitcast %"struct.v8::internal::FuncNameInferrer::Name"** %18 to i64*
  store i64 %27, i64* %28, align 8
  br label %86

29:                                               ; preds = %14
  %30 = ptrtoint %"struct.v8::internal::FuncNameInferrer::Name"* %19 to i64
  %31 = bitcast %"struct.v8::internal::FuncNameInferrer::Name"** %18 to i64*
  %32 = bitcast %"class.std::__1::vector"* %15 to i64*
  %33 = load i64, i64* %32, align 8
  %34 = sub i64 %30, %33
  %35 = ashr exact i64 %34, 3
  %36 = add nsw i64 %35, 1
  %37 = icmp ugt i64 %36, 2305843009213693951
  br i1 %37, label %38, label %40

38:                                               ; preds = %29
  %39 = bitcast %"class.std::__1::vector"* %15 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %39) #8
  unreachable

40:                                               ; preds = %29
  %41 = bitcast %"struct.v8::internal::FuncNameInferrer::Name"** %20 to i64*
  %42 = sub i64 %23, %33
  %43 = ashr exact i64 %42, 3
  %44 = icmp ult i64 %43, 1152921504606846975
  br i1 %44, label %45, label %53

45:                                               ; preds = %40
  %46 = ashr exact i64 %42, 2
  %47 = icmp ult i64 %46, %36
  %48 = select i1 %47, i64 %36, i64 %46
  %49 = icmp eq i64 %48, 0
  br i1 %49, label %58, label %50

50:                                               ; preds = %45
  %51 = icmp ugt i64 %48, 2305843009213693951
  br i1 %51, label %52, label %53

52:                                               ; preds = %50
  tail call void @abort() #8
  unreachable

53:                                               ; preds = %50, %40
  %54 = phi i64 [ %48, %50 ], [ 2305843009213693951, %40 ]
  %55 = shl i64 %54, 3
  %56 = tail call i8* @_Znwm(i64 %55) #9
  %57 = bitcast i8* %56 to %"struct.v8::internal::FuncNameInferrer::Name"*
  br label %58

58:                                               ; preds = %53, %45
  %59 = phi i64 [ %54, %53 ], [ 0, %45 ]
  %60 = phi %"struct.v8::internal::FuncNameInferrer::Name"* [ %57, %53 ], [ null, %45 ]
  %61 = getelementptr inbounds %"struct.v8::internal::FuncNameInferrer::Name", %"struct.v8::internal::FuncNameInferrer::Name"* %60, i64 %35
  %62 = getelementptr inbounds %"struct.v8::internal::FuncNameInferrer::Name", %"struct.v8::internal::FuncNameInferrer::Name"* %60, i64 %59
  %63 = ptrtoint %"struct.v8::internal::FuncNameInferrer::Name"* %62 to i64
  %64 = getelementptr inbounds %"struct.v8::internal::FuncNameInferrer::Name", %"struct.v8::internal::FuncNameInferrer::Name"* %61, i64 0, i32 0, i32 0
  store i64 %17, i64* %64, align 8
  %65 = getelementptr inbounds %"struct.v8::internal::FuncNameInferrer::Name", %"struct.v8::internal::FuncNameInferrer::Name"* %61, i64 1
  %66 = ptrtoint %"struct.v8::internal::FuncNameInferrer::Name"* %65 to i64
  %67 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %15, i64 0, i32 0, i32 0
  %68 = load %"struct.v8::internal::FuncNameInferrer::Name"*, %"struct.v8::internal::FuncNameInferrer::Name"** %67, align 8
  %69 = load i64, i64* %31, align 8
  %70 = ptrtoint %"struct.v8::internal::FuncNameInferrer::Name"* %68 to i64
  %71 = sub i64 %69, %70
  %72 = ashr exact i64 %71, 3
  %73 = sub nsw i64 0, %72
  %74 = getelementptr inbounds %"struct.v8::internal::FuncNameInferrer::Name", %"struct.v8::internal::FuncNameInferrer::Name"* %61, i64 %73
  %75 = ptrtoint %"struct.v8::internal::FuncNameInferrer::Name"* %74 to i64
  %76 = icmp sgt i64 %71, 0
  br i1 %76, label %77, label %81

77:                                               ; preds = %58
  %78 = bitcast %"struct.v8::internal::FuncNameInferrer::Name"* %74 to i8*
  %79 = bitcast %"struct.v8::internal::FuncNameInferrer::Name"* %68 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %78, i8* align 8 %79, i64 %71, i1 false) #7
  %80 = load %"struct.v8::internal::FuncNameInferrer::Name"*, %"struct.v8::internal::FuncNameInferrer::Name"** %67, align 8
  br label %81

81:                                               ; preds = %77, %58
  %82 = phi %"struct.v8::internal::FuncNameInferrer::Name"* [ %68, %58 ], [ %80, %77 ]
  store i64 %75, i64* %32, align 8
  store i64 %66, i64* %31, align 8
  store i64 %63, i64* %41, align 8
  %83 = icmp eq %"struct.v8::internal::FuncNameInferrer::Name"* %82, null
  br i1 %83, label %86, label %84

84:                                               ; preds = %81
  %85 = bitcast %"struct.v8::internal::FuncNameInferrer::Name"* %82 to i8*
  tail call void @_ZdlPv(i8* %85) #9
  br label %86

86:                                               ; preds = %2, %84, %81, %24, %6
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal16FuncNameInferrer16PushVariableNameEPKNS0_12AstRawStringE(%"class.v8::internal::FuncNameInferrer"*, %"class.v8::internal::AstRawString"*) local_unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.v8::internal::FuncNameInferrer", %"class.v8::internal::FuncNameInferrer"* %0, i64 0, i32 3
  %4 = load i64, i64* %3, align 8
  %5 = icmp eq i64 %4, 0
  br i1 %5, label %86, label %6

6:                                                ; preds = %2
  %7 = getelementptr inbounds %"class.v8::internal::FuncNameInferrer", %"class.v8::internal::FuncNameInferrer"* %0, i64 0, i32 0
  %8 = load %"class.v8::internal::AstValueFactory"*, %"class.v8::internal::AstValueFactory"** %7, align 8
  %9 = getelementptr inbounds %"class.v8::internal::AstValueFactory", %"class.v8::internal::AstValueFactory"* %8, i64 0, i32 3
  %10 = load %"class.v8::internal::AstStringConstants"*, %"class.v8::internal::AstStringConstants"** %9, align 8
  %11 = getelementptr inbounds %"class.v8::internal::AstStringConstants", %"class.v8::internal::AstStringConstants"* %10, i64 0, i32 22
  %12 = load %"class.v8::internal::AstRawString"*, %"class.v8::internal::AstRawString"** %11, align 8
  %13 = icmp eq %"class.v8::internal::AstRawString"* %12, %1
  br i1 %13, label %86, label %14

14:                                               ; preds = %6
  %15 = getelementptr inbounds %"class.v8::internal::FuncNameInferrer", %"class.v8::internal::FuncNameInferrer"* %0, i64 0, i32 1
  %16 = ptrtoint %"class.v8::internal::AstRawString"* %1 to i64
  %17 = or i64 %16, 2
  %18 = getelementptr inbounds %"class.v8::internal::FuncNameInferrer", %"class.v8::internal::FuncNameInferrer"* %0, i64 0, i32 1, i32 0, i32 1
  %19 = load %"struct.v8::internal::FuncNameInferrer::Name"*, %"struct.v8::internal::FuncNameInferrer::Name"** %18, align 8
  %20 = getelementptr inbounds %"class.v8::internal::FuncNameInferrer", %"class.v8::internal::FuncNameInferrer"* %0, i64 0, i32 1, i32 0, i32 2, i32 0, i32 0
  %21 = load %"struct.v8::internal::FuncNameInferrer::Name"*, %"struct.v8::internal::FuncNameInferrer::Name"** %20, align 8
  %22 = icmp ult %"struct.v8::internal::FuncNameInferrer::Name"* %19, %21
  %23 = ptrtoint %"struct.v8::internal::FuncNameInferrer::Name"* %21 to i64
  br i1 %22, label %24, label %29

24:                                               ; preds = %14
  %25 = getelementptr inbounds %"struct.v8::internal::FuncNameInferrer::Name", %"struct.v8::internal::FuncNameInferrer::Name"* %19, i64 0, i32 0, i32 0
  store i64 %17, i64* %25, align 8
  %26 = getelementptr inbounds %"struct.v8::internal::FuncNameInferrer::Name", %"struct.v8::internal::FuncNameInferrer::Name"* %19, i64 1
  %27 = ptrtoint %"struct.v8::internal::FuncNameInferrer::Name"* %26 to i64
  %28 = bitcast %"struct.v8::internal::FuncNameInferrer::Name"** %18 to i64*
  store i64 %27, i64* %28, align 8
  br label %86

29:                                               ; preds = %14
  %30 = ptrtoint %"struct.v8::internal::FuncNameInferrer::Name"* %19 to i64
  %31 = bitcast %"struct.v8::internal::FuncNameInferrer::Name"** %18 to i64*
  %32 = bitcast %"class.std::__1::vector"* %15 to i64*
  %33 = load i64, i64* %32, align 8
  %34 = sub i64 %30, %33
  %35 = ashr exact i64 %34, 3
  %36 = add nsw i64 %35, 1
  %37 = icmp ugt i64 %36, 2305843009213693951
  br i1 %37, label %38, label %40

38:                                               ; preds = %29
  %39 = bitcast %"class.std::__1::vector"* %15 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %39) #8
  unreachable

40:                                               ; preds = %29
  %41 = bitcast %"struct.v8::internal::FuncNameInferrer::Name"** %20 to i64*
  %42 = sub i64 %23, %33
  %43 = ashr exact i64 %42, 3
  %44 = icmp ult i64 %43, 1152921504606846975
  br i1 %44, label %45, label %53

45:                                               ; preds = %40
  %46 = ashr exact i64 %42, 2
  %47 = icmp ult i64 %46, %36
  %48 = select i1 %47, i64 %36, i64 %46
  %49 = icmp eq i64 %48, 0
  br i1 %49, label %58, label %50

50:                                               ; preds = %45
  %51 = icmp ugt i64 %48, 2305843009213693951
  br i1 %51, label %52, label %53

52:                                               ; preds = %50
  tail call void @abort() #8
  unreachable

53:                                               ; preds = %50, %40
  %54 = phi i64 [ %48, %50 ], [ 2305843009213693951, %40 ]
  %55 = shl i64 %54, 3
  %56 = tail call i8* @_Znwm(i64 %55) #9
  %57 = bitcast i8* %56 to %"struct.v8::internal::FuncNameInferrer::Name"*
  br label %58

58:                                               ; preds = %53, %45
  %59 = phi i64 [ %54, %53 ], [ 0, %45 ]
  %60 = phi %"struct.v8::internal::FuncNameInferrer::Name"* [ %57, %53 ], [ null, %45 ]
  %61 = getelementptr inbounds %"struct.v8::internal::FuncNameInferrer::Name", %"struct.v8::internal::FuncNameInferrer::Name"* %60, i64 %35
  %62 = getelementptr inbounds %"struct.v8::internal::FuncNameInferrer::Name", %"struct.v8::internal::FuncNameInferrer::Name"* %60, i64 %59
  %63 = ptrtoint %"struct.v8::internal::FuncNameInferrer::Name"* %62 to i64
  %64 = getelementptr inbounds %"struct.v8::internal::FuncNameInferrer::Name", %"struct.v8::internal::FuncNameInferrer::Name"* %61, i64 0, i32 0, i32 0
  store i64 %17, i64* %64, align 8
  %65 = getelementptr inbounds %"struct.v8::internal::FuncNameInferrer::Name", %"struct.v8::internal::FuncNameInferrer::Name"* %61, i64 1
  %66 = ptrtoint %"struct.v8::internal::FuncNameInferrer::Name"* %65 to i64
  %67 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %15, i64 0, i32 0, i32 0
  %68 = load %"struct.v8::internal::FuncNameInferrer::Name"*, %"struct.v8::internal::FuncNameInferrer::Name"** %67, align 8
  %69 = load i64, i64* %31, align 8
  %70 = ptrtoint %"struct.v8::internal::FuncNameInferrer::Name"* %68 to i64
  %71 = sub i64 %69, %70
  %72 = ashr exact i64 %71, 3
  %73 = sub nsw i64 0, %72
  %74 = getelementptr inbounds %"struct.v8::internal::FuncNameInferrer::Name", %"struct.v8::internal::FuncNameInferrer::Name"* %61, i64 %73
  %75 = ptrtoint %"struct.v8::internal::FuncNameInferrer::Name"* %74 to i64
  %76 = icmp sgt i64 %71, 0
  br i1 %76, label %77, label %81

77:                                               ; preds = %58
  %78 = bitcast %"struct.v8::internal::FuncNameInferrer::Name"* %74 to i8*
  %79 = bitcast %"struct.v8::internal::FuncNameInferrer::Name"* %68 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %78, i8* align 8 %79, i64 %71, i1 false) #7
  %80 = load %"struct.v8::internal::FuncNameInferrer::Name"*, %"struct.v8::internal::FuncNameInferrer::Name"** %67, align 8
  br label %81

81:                                               ; preds = %77, %58
  %82 = phi %"struct.v8::internal::FuncNameInferrer::Name"* [ %68, %58 ], [ %80, %77 ]
  store i64 %75, i64* %32, align 8
  store i64 %66, i64* %31, align 8
  store i64 %63, i64* %41, align 8
  %83 = icmp eq %"struct.v8::internal::FuncNameInferrer::Name"* %82, null
  br i1 %83, label %86, label %84

84:                                               ; preds = %81
  %85 = bitcast %"struct.v8::internal::FuncNameInferrer::Name"* %82 to i8*
  tail call void @_ZdlPv(i8* %85) #9
  br label %86

86:                                               ; preds = %2, %84, %81, %24, %6
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal16FuncNameInferrer25RemoveAsyncKeywordFromEndEv(%"class.v8::internal::FuncNameInferrer"* nocapture) local_unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.v8::internal::FuncNameInferrer", %"class.v8::internal::FuncNameInferrer"* %0, i64 0, i32 3
  %3 = load i64, i64* %2, align 8
  %4 = icmp eq i64 %3, 0
  br i1 %4, label %25, label %5

5:                                                ; preds = %1
  %6 = getelementptr inbounds %"class.v8::internal::FuncNameInferrer", %"class.v8::internal::FuncNameInferrer"* %0, i64 0, i32 1
  %7 = getelementptr inbounds %"class.v8::internal::FuncNameInferrer", %"class.v8::internal::FuncNameInferrer"* %0, i64 0, i32 1, i32 0, i32 1
  %8 = bitcast %"struct.v8::internal::FuncNameInferrer::Name"** %7 to i64*
  %9 = load i64, i64* %8, align 8
  %10 = bitcast %"class.std::__1::vector"* %6 to i64*
  %11 = load i64, i64* %10, align 8
  %12 = icmp eq i64 %9, %11
  br i1 %12, label %13, label %14, !prof !2

13:                                               ; preds = %5
  tail call void (i8*, ...) @_Z8V8_FatalPKcz(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str, i64 0, i64 0), i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.1, i64 0, i64 0)) #8
  unreachable

14:                                               ; preds = %5
  %15 = inttoptr i64 %9 to %"struct.v8::internal::FuncNameInferrer::Name"*
  %16 = getelementptr inbounds %"struct.v8::internal::FuncNameInferrer::Name", %"struct.v8::internal::FuncNameInferrer::Name"* %15, i64 -1, i32 0, i32 0
  %17 = load i64, i64* %16, align 8
  %18 = and i64 %17, -4
  %19 = inttoptr i64 %18 to %"class.v8::internal::AstRawString"*
  %20 = tail call zeroext i1 @_ZNK2v88internal12AstRawString16IsOneByteEqualToEPKc(%"class.v8::internal::AstRawString"* %19, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.2, i64 0, i64 0)) #7
  br i1 %20, label %22, label %21, !prof !3

21:                                               ; preds = %14
  tail call void (i8*, ...) @_Z8V8_FatalPKcz(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str, i64 0, i64 0), i8* getelementptr inbounds ([54 x i8], [54 x i8]* @.str.3, i64 0, i64 0)) #8
  unreachable

22:                                               ; preds = %14
  %23 = load %"struct.v8::internal::FuncNameInferrer::Name"*, %"struct.v8::internal::FuncNameInferrer::Name"** %7, align 8
  %24 = getelementptr inbounds %"struct.v8::internal::FuncNameInferrer::Name", %"struct.v8::internal::FuncNameInferrer::Name"* %23, i64 -1
  store %"struct.v8::internal::FuncNameInferrer::Name"* %24, %"struct.v8::internal::FuncNameInferrer::Name"** %7, align 8
  br label %25

25:                                               ; preds = %1, %22
  ret void
}

; Function Attrs: noreturn
declare void @_Z8V8_FatalPKcz(i8*, ...) local_unnamed_addr #2

declare zeroext i1 @_ZNK2v88internal12AstRawString16IsOneByteEqualToEPKc(%"class.v8::internal::AstRawString"*, i8*) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden %"class.v8::internal::AstConsString"* @_ZN2v88internal16FuncNameInferrer17MakeNameFromStackEv(%"class.v8::internal::FuncNameInferrer"* nocapture readonly) local_unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.v8::internal::FuncNameInferrer", %"class.v8::internal::FuncNameInferrer"* %0, i64 0, i32 1
  %3 = getelementptr inbounds %"class.v8::internal::FuncNameInferrer", %"class.v8::internal::FuncNameInferrer"* %0, i64 0, i32 1, i32 0, i32 1
  %4 = bitcast %"struct.v8::internal::FuncNameInferrer::Name"** %3 to i64*
  %5 = load i64, i64* %4, align 8
  %6 = bitcast %"class.std::__1::vector"* %2 to i64*
  %7 = load i64, i64* %6, align 8
  %8 = icmp eq i64 %5, %7
  %9 = getelementptr inbounds %"class.v8::internal::FuncNameInferrer", %"class.v8::internal::FuncNameInferrer"* %0, i64 0, i32 0
  %10 = load %"class.v8::internal::AstValueFactory"*, %"class.v8::internal::AstValueFactory"** %9, align 8
  br i1 %8, label %11, label %14

11:                                               ; preds = %1
  %12 = getelementptr inbounds %"class.v8::internal::AstValueFactory", %"class.v8::internal::AstValueFactory"* %10, i64 0, i32 4
  %13 = load %"class.v8::internal::AstConsString"*, %"class.v8::internal::AstConsString"** %12, align 8
  br label %101

14:                                               ; preds = %1
  %15 = tail call %"class.v8::internal::AstConsString"* @_ZN2v88internal15AstValueFactory13NewConsStringEv(%"class.v8::internal::AstValueFactory"* %10) #7
  %16 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %2, i64 0, i32 0, i32 0
  %17 = load %"struct.v8::internal::FuncNameInferrer::Name"*, %"struct.v8::internal::FuncNameInferrer::Name"** %16, align 8
  %18 = load %"struct.v8::internal::FuncNameInferrer::Name"*, %"struct.v8::internal::FuncNameInferrer::Name"** %3, align 8
  %19 = icmp eq %"struct.v8::internal::FuncNameInferrer::Name"* %17, %18
  br i1 %19, label %101, label %20

20:                                               ; preds = %14
  %21 = getelementptr inbounds %"class.v8::internal::AstConsString", %"class.v8::internal::AstConsString"* %15, i64 0, i32 1, i32 0
  %22 = getelementptr inbounds %"class.v8::internal::AstConsString", %"class.v8::internal::AstConsString"* %15, i64 0, i32 1
  %23 = bitcast %"struct.v8::internal::AstConsString::Segment"* %22 to i8*
  %24 = getelementptr inbounds %"class.v8::internal::AstConsString", %"class.v8::internal::AstConsString"* %15, i64 0, i32 1, i32 1
  br label %25

25:                                               ; preds = %20, %98
  %26 = phi %"struct.v8::internal::FuncNameInferrer::Name"* [ %18, %20 ], [ %99, %98 ]
  %27 = phi %"struct.v8::internal::FuncNameInferrer::Name"* [ %17, %20 ], [ %28, %98 ]
  %28 = getelementptr inbounds %"struct.v8::internal::FuncNameInferrer::Name", %"struct.v8::internal::FuncNameInferrer::Name"* %27, i64 1
  %29 = icmp eq %"struct.v8::internal::FuncNameInferrer::Name"* %28, %26
  br i1 %29, label %40, label %30

30:                                               ; preds = %25
  %31 = getelementptr inbounds %"struct.v8::internal::FuncNameInferrer::Name", %"struct.v8::internal::FuncNameInferrer::Name"* %27, i64 0, i32 0, i32 0
  %32 = load i64, i64* %31, align 8
  %33 = and i64 %32, 3
  %34 = icmp eq i64 %33, 2
  br i1 %34, label %35, label %40

35:                                               ; preds = %30
  %36 = getelementptr inbounds %"struct.v8::internal::FuncNameInferrer::Name", %"struct.v8::internal::FuncNameInferrer::Name"* %28, i64 0, i32 0, i32 0
  %37 = load i64, i64* %36, align 8
  %38 = and i64 %37, 3
  %39 = icmp eq i64 %38, 2
  br i1 %39, label %98, label %40

40:                                               ; preds = %25, %30, %35
  %41 = load %"class.v8::internal::AstValueFactory"*, %"class.v8::internal::AstValueFactory"** %9, align 8
  %42 = getelementptr inbounds %"class.v8::internal::AstValueFactory", %"class.v8::internal::AstValueFactory"* %41, i64 0, i32 6
  %43 = load %"class.v8::internal::Zone"*, %"class.v8::internal::Zone"** %42, align 8
  %44 = load %"class.v8::internal::AstRawString"*, %"class.v8::internal::AstRawString"** %21, align 8
  %45 = icmp eq %"class.v8::internal::AstRawString"* %44, null
  br i1 %45, label %70, label %46

46:                                               ; preds = %40
  %47 = getelementptr inbounds %"class.v8::internal::AstValueFactory", %"class.v8::internal::AstValueFactory"* %41, i64 0, i32 3
  %48 = load %"class.v8::internal::AstStringConstants"*, %"class.v8::internal::AstStringConstants"** %47, align 8
  %49 = getelementptr inbounds %"class.v8::internal::AstStringConstants", %"class.v8::internal::AstStringConstants"* %48, i64 0, i32 17
  %50 = load %"class.v8::internal::AstRawString"*, %"class.v8::internal::AstRawString"** %49, align 8
  %51 = getelementptr inbounds %"class.v8::internal::AstRawString", %"class.v8::internal::AstRawString"* %50, i64 0, i32 1, i32 1
  %52 = load i64, i64* %51, align 8
  %53 = trunc i64 %52 to i32
  %54 = icmp eq i32 %53, 0
  br i1 %54, label %70, label %55

55:                                               ; preds = %46
  %56 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %43, i64 0, i32 2
  %57 = load i64, i64* %56, align 8
  %58 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %43, i64 0, i32 3
  %59 = load i64, i64* %58, align 8
  %60 = sub i64 %59, %57
  %61 = icmp ult i64 %60, 16
  br i1 %61, label %62, label %64, !prof !2

62:                                               ; preds = %55
  %63 = tail call i64 @_ZN2v88internal4Zone9NewExpandEm(%"class.v8::internal::Zone"* %43, i64 16) #7
  br label %66

64:                                               ; preds = %55
  %65 = add i64 %57, 16
  store i64 %65, i64* %56, align 8
  br label %66

66:                                               ; preds = %62, %64
  %67 = phi i64 [ %63, %62 ], [ %57, %64 ]
  %68 = inttoptr i64 %67 to i8*
  %69 = inttoptr i64 %67 to %"struct.v8::internal::AstConsString::Segment"*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %68, i8* align 8 %23, i64 16, i1 false) #7
  store %"struct.v8::internal::AstConsString::Segment"* %69, %"struct.v8::internal::AstConsString::Segment"** %24, align 8
  store %"class.v8::internal::AstRawString"* %50, %"class.v8::internal::AstRawString"** %21, align 8
  br label %70

70:                                               ; preds = %66, %46, %40
  %71 = phi %"class.v8::internal::AstRawString"* [ %50, %66 ], [ %44, %46 ], [ null, %40 ]
  %72 = getelementptr inbounds %"struct.v8::internal::FuncNameInferrer::Name", %"struct.v8::internal::FuncNameInferrer::Name"* %27, i64 0, i32 0, i32 0
  %73 = load i64, i64* %72, align 8
  %74 = and i64 %73, -4
  %75 = inttoptr i64 %74 to %"class.v8::internal::AstRawString"*
  %76 = getelementptr inbounds %"class.v8::internal::AstRawString", %"class.v8::internal::AstRawString"* %75, i64 0, i32 1, i32 1
  %77 = load i64, i64* %76, align 8
  %78 = trunc i64 %77 to i32
  %79 = icmp eq i32 %78, 0
  br i1 %79, label %98, label %80

80:                                               ; preds = %70
  %81 = icmp eq %"class.v8::internal::AstRawString"* %71, null
  br i1 %81, label %97, label %82

82:                                               ; preds = %80
  %83 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %43, i64 0, i32 2
  %84 = load i64, i64* %83, align 8
  %85 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %43, i64 0, i32 3
  %86 = load i64, i64* %85, align 8
  %87 = sub i64 %86, %84
  %88 = icmp ult i64 %87, 16
  br i1 %88, label %89, label %91, !prof !2

89:                                               ; preds = %82
  %90 = tail call i64 @_ZN2v88internal4Zone9NewExpandEm(%"class.v8::internal::Zone"* %43, i64 16) #7
  br label %93

91:                                               ; preds = %82
  %92 = add i64 %84, 16
  store i64 %92, i64* %83, align 8
  br label %93

93:                                               ; preds = %91, %89
  %94 = phi i64 [ %90, %89 ], [ %84, %91 ]
  %95 = inttoptr i64 %94 to i8*
  %96 = inttoptr i64 %94 to %"struct.v8::internal::AstConsString::Segment"*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %95, i8* align 8 %23, i64 16, i1 false) #7
  store %"struct.v8::internal::AstConsString::Segment"* %96, %"struct.v8::internal::AstConsString::Segment"** %24, align 8
  br label %97

97:                                               ; preds = %93, %80
  store %"class.v8::internal::AstRawString"* %75, %"class.v8::internal::AstRawString"** %21, align 8
  br label %98

98:                                               ; preds = %97, %70, %35
  %99 = load %"struct.v8::internal::FuncNameInferrer::Name"*, %"struct.v8::internal::FuncNameInferrer::Name"** %3, align 8
  %100 = icmp eq %"struct.v8::internal::FuncNameInferrer::Name"* %28, %99
  br i1 %100, label %101, label %25

101:                                              ; preds = %98, %14, %11
  %102 = phi %"class.v8::internal::AstConsString"* [ %13, %11 ], [ %15, %14 ], [ %15, %98 ]
  ret %"class.v8::internal::AstConsString"* %102
}

declare %"class.v8::internal::AstConsString"* @_ZN2v88internal15AstValueFactory13NewConsStringEv(%"class.v8::internal::AstValueFactory"*) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal16FuncNameInferrer19InferFunctionsNamesEv(%"class.v8::internal::FuncNameInferrer"* nocapture) local_unnamed_addr #0 align 2 {
  %2 = tail call %"class.v8::internal::AstConsString"* @_ZN2v88internal16FuncNameInferrer17MakeNameFromStackEv(%"class.v8::internal::FuncNameInferrer"* %0)
  %3 = getelementptr inbounds %"class.v8::internal::FuncNameInferrer", %"class.v8::internal::FuncNameInferrer"* %0, i64 0, i32 2
  %4 = getelementptr inbounds %"class.std::__1::vector.23", %"class.std::__1::vector.23"* %3, i64 0, i32 0, i32 0
  %5 = load %"class.v8::internal::FunctionLiteral"**, %"class.v8::internal::FunctionLiteral"*** %4, align 8
  %6 = getelementptr inbounds %"class.v8::internal::FuncNameInferrer", %"class.v8::internal::FuncNameInferrer"* %0, i64 0, i32 2, i32 0, i32 1
  %7 = load %"class.v8::internal::FunctionLiteral"**, %"class.v8::internal::FunctionLiteral"*** %6, align 8
  %8 = icmp eq %"class.v8::internal::FunctionLiteral"** %5, %7
  br i1 %8, label %9, label %24

9:                                                ; preds = %1
  %10 = ptrtoint %"class.v8::internal::FunctionLiteral"** %5 to i64
  %11 = ptrtoint %"class.v8::internal::FunctionLiteral"** %7 to i64
  br label %17

12:                                               ; preds = %24
  %13 = bitcast %"class.v8::internal::FunctionLiteral"*** %6 to i64*
  %14 = load i64, i64* %13, align 8
  %15 = bitcast %"class.std::__1::vector.23"* %3 to i64*
  %16 = load i64, i64* %15, align 8
  br label %17

17:                                               ; preds = %9, %12
  %18 = phi i64 [ %16, %12 ], [ %10, %9 ]
  %19 = phi i64 [ %14, %12 ], [ %11, %9 ]
  %20 = icmp eq i64 %19, %18
  br i1 %20, label %23, label %21

21:                                               ; preds = %17
  %22 = inttoptr i64 %18 to %"class.v8::internal::FunctionLiteral"**
  store %"class.v8::internal::FunctionLiteral"** %22, %"class.v8::internal::FunctionLiteral"*** %6, align 8
  br label %23

23:                                               ; preds = %17, %21
  ret void

24:                                               ; preds = %1, %24
  %25 = phi %"class.v8::internal::FunctionLiteral"** [ %27, %24 ], [ %5, %1 ]
  %26 = load %"class.v8::internal::FunctionLiteral"*, %"class.v8::internal::FunctionLiteral"** %25, align 8
  tail call void @_ZN2v88internal15FunctionLiteral21set_raw_inferred_nameEPNS0_13AstConsStringE(%"class.v8::internal::FunctionLiteral"* %26, %"class.v8::internal::AstConsString"* %2) #7
  %27 = getelementptr inbounds %"class.v8::internal::FunctionLiteral"*, %"class.v8::internal::FunctionLiteral"** %25, i64 1
  %28 = icmp eq %"class.v8::internal::FunctionLiteral"** %27, %7
  br i1 %28, label %12, label %24
}

declare void @_ZN2v88internal15FunctionLiteral21set_raw_inferred_nameEPNS0_13AstConsStringE(%"class.v8::internal::FunctionLiteral"*, %"class.v8::internal::AstConsString"*) local_unnamed_addr #1

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #3

declare i64 @_ZN2v88internal4Zone9NewExpandEm(%"class.v8::internal::Zone"*, i64) local_unnamed_addr #1

; Function Attrs: noreturn
declare void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"*) local_unnamed_addr #2

; Function Attrs: noreturn nounwind
declare void @abort() local_unnamed_addr #4

; Function Attrs: nobuiltin nofree
declare noalias nonnull i8* @_Znwm(i64) local_unnamed_addr #5

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #6

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #3

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { argmemonly nounwind }
attributes #4 = { noreturn nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nobuiltin nofree "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { nounwind }
attributes #8 = { noreturn nounwind }
attributes #9 = { builtin nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{!"branch_weights", i32 1, i32 2000}
!3 = !{!"branch_weights", i32 2000, i32 1}
