; ModuleID = '../../third_party/opus/src/celt/celt_lpc.c'
source_filename = "../../third_party/opus/src/celt/celt_lpc.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"
module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

@.str = private unnamed_addr constant [25 x i8] c"assertion failed: x != y\00", align 1
@.str.1 = private unnamed_addr constant [43 x i8] c"../../third_party/opus/src/celt/celt_lpc.c\00", align 1
@.str.2 = private unnamed_addr constant [29 x i8] c"assertion failed: (ord&3)==0\00", align 1
@.str.3 = private unnamed_addr constant [22 x i8] c"assertion failed: n>0\00", align 1
@.str.4 = private unnamed_addr constant [29 x i8] c"assertion failed: overlap>=0\00", align 1

; Function Attrs: nounwind ssp uwtable
define hidden void @_celt_lpc(float* nocapture, float* nocapture readonly, i32) local_unnamed_addr #0 {
  %4 = load float, float* %1, align 4
  %5 = bitcast float* %0 to i8*
  %6 = sext i32 %2 to i64
  %7 = shl nsw i64 %6, 2
  tail call void @llvm.memset.p0i8.i64(i8* align 4 %5, i8 0, i64 %7, i1 false)
  %8 = load float, float* %1, align 4
  %9 = fcmp une float %8, 0.000000e+00
  br i1 %9, label %10, label %145

10:                                               ; preds = %3, %138
  %11 = phi i64 [ %83, %138 ], [ 0, %3 ]
  %12 = phi float [ %141, %138 ], [ %4, %3 ]
  %13 = add nuw i64 %11, 1
  %14 = lshr i64 %13, 1
  %15 = add nsw i64 %11, -1
  %16 = icmp slt i64 %11, %6
  br i1 %16, label %17, label %145

17:                                               ; preds = %10
  %18 = icmp eq i64 %11, 0
  br i1 %18, label %81, label %19

19:                                               ; preds = %17
  %20 = and i64 %11, 3
  %21 = icmp ult i64 %15, 3
  br i1 %21, label %62, label %22

22:                                               ; preds = %19
  %23 = sub nsw i64 %11, %20
  br label %24

24:                                               ; preds = %24, %22
  %25 = phi i64 [ 0, %22 ], [ %59, %24 ]
  %26 = phi float [ 0.000000e+00, %22 ], [ %58, %24 ]
  %27 = phi i64 [ %23, %22 ], [ %60, %24 ]
  %28 = getelementptr inbounds float, float* %0, i64 %25
  %29 = load float, float* %28, align 4
  %30 = sub nsw i64 %11, %25
  %31 = getelementptr inbounds float, float* %1, i64 %30
  %32 = load float, float* %31, align 4
  %33 = fmul float %29, %32
  %34 = fadd float %26, %33
  %35 = or i64 %25, 1
  %36 = getelementptr inbounds float, float* %0, i64 %35
  %37 = load float, float* %36, align 4
  %38 = sub nsw i64 %11, %35
  %39 = getelementptr inbounds float, float* %1, i64 %38
  %40 = load float, float* %39, align 4
  %41 = fmul float %37, %40
  %42 = fadd float %34, %41
  %43 = or i64 %25, 2
  %44 = getelementptr inbounds float, float* %0, i64 %43
  %45 = load float, float* %44, align 4
  %46 = sub nsw i64 %11, %43
  %47 = getelementptr inbounds float, float* %1, i64 %46
  %48 = load float, float* %47, align 4
  %49 = fmul float %45, %48
  %50 = fadd float %42, %49
  %51 = or i64 %25, 3
  %52 = getelementptr inbounds float, float* %0, i64 %51
  %53 = load float, float* %52, align 4
  %54 = sub nsw i64 %11, %51
  %55 = getelementptr inbounds float, float* %1, i64 %54
  %56 = load float, float* %55, align 4
  %57 = fmul float %53, %56
  %58 = fadd float %50, %57
  %59 = add nuw nsw i64 %25, 4
  %60 = add i64 %27, -4
  %61 = icmp eq i64 %60, 0
  br i1 %61, label %62, label %24

62:                                               ; preds = %24, %19
  %63 = phi float [ undef, %19 ], [ %58, %24 ]
  %64 = phi i64 [ 0, %19 ], [ %59, %24 ]
  %65 = phi float [ 0.000000e+00, %19 ], [ %58, %24 ]
  %66 = icmp eq i64 %20, 0
  br i1 %66, label %81, label %67

67:                                               ; preds = %62, %67
  %68 = phi i64 [ %78, %67 ], [ %64, %62 ]
  %69 = phi float [ %77, %67 ], [ %65, %62 ]
  %70 = phi i64 [ %79, %67 ], [ %20, %62 ]
  %71 = getelementptr inbounds float, float* %0, i64 %68
  %72 = load float, float* %71, align 4
  %73 = sub nsw i64 %11, %68
  %74 = getelementptr inbounds float, float* %1, i64 %73
  %75 = load float, float* %74, align 4
  %76 = fmul float %72, %75
  %77 = fadd float %69, %76
  %78 = add nuw nsw i64 %68, 1
  %79 = add i64 %70, -1
  %80 = icmp eq i64 %79, 0
  br i1 %80, label %81, label %67, !llvm.loop !2

81:                                               ; preds = %62, %67, %17
  %82 = phi float [ 0.000000e+00, %17 ], [ %63, %62 ], [ %77, %67 ]
  %83 = add nuw nsw i64 %11, 1
  %84 = getelementptr inbounds float, float* %1, i64 %83
  %85 = load float, float* %84, align 4
  %86 = fadd float %82, %85
  %87 = fdiv float %86, %12
  %88 = fsub float -0.000000e+00, %87
  %89 = getelementptr inbounds float, float* %0, i64 %11
  store float %88, float* %89, align 4
  %90 = trunc i64 %83 to i32
  %91 = icmp ult i32 %90, 2
  br i1 %91, label %138, label %92

92:                                               ; preds = %81
  %93 = and i64 %14, 1
  %94 = icmp eq i64 %14, 1
  br i1 %94, label %124, label %95

95:                                               ; preds = %92
  %96 = sub nsw i64 %14, %93
  br label %97

97:                                               ; preds = %97, %95
  %98 = phi i64 [ 0, %95 ], [ %121, %97 ]
  %99 = phi i64 [ %96, %95 ], [ %122, %97 ]
  %100 = getelementptr inbounds float, float* %0, i64 %98
  %101 = load float, float* %100, align 4
  %102 = xor i64 %98, -1
  %103 = add nsw i64 %11, %102
  %104 = getelementptr inbounds float, float* %0, i64 %103
  %105 = load float, float* %104, align 4
  %106 = fmul float %105, %88
  %107 = fadd float %101, %106
  store float %107, float* %100, align 4
  %108 = fmul float %101, %88
  %109 = fadd float %105, %108
  store float %109, float* %104, align 4
  %110 = or i64 %98, 1
  %111 = getelementptr inbounds float, float* %0, i64 %110
  %112 = load float, float* %111, align 4
  %113 = sub nuw nsw i64 -2, %98
  %114 = add nsw i64 %11, %113
  %115 = getelementptr inbounds float, float* %0, i64 %114
  %116 = load float, float* %115, align 4
  %117 = fmul float %116, %88
  %118 = fadd float %112, %117
  store float %118, float* %111, align 4
  %119 = fmul float %112, %88
  %120 = fadd float %116, %119
  store float %120, float* %115, align 4
  %121 = add nuw nsw i64 %98, 2
  %122 = add i64 %99, -2
  %123 = icmp eq i64 %122, 0
  br i1 %123, label %124, label %97

124:                                              ; preds = %97, %92
  %125 = phi i64 [ 0, %92 ], [ %121, %97 ]
  %126 = icmp eq i64 %93, 0
  br i1 %126, label %138, label %127

127:                                              ; preds = %124
  %128 = getelementptr inbounds float, float* %0, i64 %125
  %129 = load float, float* %128, align 4
  %130 = xor i64 %125, -1
  %131 = add nsw i64 %11, %130
  %132 = getelementptr inbounds float, float* %0, i64 %131
  %133 = load float, float* %132, align 4
  %134 = fmul float %133, %88
  %135 = fadd float %129, %134
  store float %135, float* %128, align 4
  %136 = fmul float %129, %88
  %137 = fadd float %133, %136
  store float %137, float* %132, align 4
  br label %138

138:                                              ; preds = %127, %124, %81
  %139 = fmul float %87, %87
  %140 = fmul float %12, %139
  %141 = fsub float %12, %140
  %142 = load float, float* %1, align 4
  %143 = fmul float %142, 0x3F50624DE0000000
  %144 = fcmp uge float %141, %143
  br i1 %144, label %10, label %145

145:                                              ; preds = %10, %138, %3
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nounwind ssp uwtable
define hidden void @celt_fir_c(float*, float* nocapture readonly, float*, i32, i32, i32) local_unnamed_addr #0 {
  %7 = alloca <4 x i32>, align 16
  %8 = icmp eq float* %0, %2
  br i1 %8, label %9, label %10

9:                                                ; preds = %6
  tail call void @celt_fatal(i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str, i64 0, i64 0), i8* getelementptr inbounds ([43 x i8], [43 x i8]* @.str.1, i64 0, i64 0), i32 146) #4
  unreachable

10:                                               ; preds = %6
  %11 = sext i32 %4 to i64
  %12 = shl nsw i64 %11, 2
  %13 = alloca float, i64 %11, align 16
  %14 = bitcast float* %13 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %14, i8 -86, i64 %12, i1 false)
  %15 = icmp sgt i32 %4, 0
  br i1 %15, label %16, label %126

16:                                               ; preds = %10
  %17 = zext i32 %4 to i64
  %18 = icmp ult i32 %4, 8
  br i1 %18, label %19, label %41

19:                                               ; preds = %124, %41, %16
  %20 = phi i64 [ 0, %41 ], [ 0, %16 ], [ %50, %124 ]
  %21 = phi i32 [ 0, %41 ], [ 0, %16 ], [ %51, %124 ]
  %22 = xor i64 %20, -1
  %23 = and i64 %17, 1
  %24 = icmp eq i64 %23, 0
  br i1 %24, label %36, label %25

25:                                               ; preds = %19
  %26 = xor i32 %21, -1
  %27 = add i32 %26, %4
  %28 = sext i32 %27 to i64
  %29 = getelementptr inbounds float, float* %1, i64 %28
  %30 = bitcast float* %29 to i32*
  %31 = load i32, i32* %30, align 4
  %32 = getelementptr inbounds float, float* %13, i64 %20
  %33 = bitcast float* %32 to i32*
  store i32 %31, i32* %33, align 16
  %34 = or i64 %20, 1
  %35 = add nuw nsw i32 %21, 1
  br label %36

36:                                               ; preds = %19, %25
  %37 = phi i64 [ %20, %19 ], [ %34, %25 ]
  %38 = phi i32 [ %21, %19 ], [ %35, %25 ]
  %39 = sub nsw i64 0, %17
  %40 = icmp eq i64 %22, %39
  br i1 %40, label %126, label %133

41:                                               ; preds = %16
  %42 = add nsw i64 %17, -1
  %43 = add i32 %4, -1
  %44 = trunc i64 %42 to i32
  %45 = sub i32 %43, %44
  %46 = icmp sgt i32 %45, %43
  %47 = icmp ugt i64 %42, 4294967295
  %48 = or i1 %46, %47
  br i1 %48, label %19, label %49

49:                                               ; preds = %41
  %50 = and i64 %17, 4294967288
  %51 = trunc i64 %50 to i32
  %52 = add nsw i64 %50, -8
  %53 = lshr exact i64 %52, 3
  %54 = add nuw nsw i64 %53, 1
  %55 = and i64 %54, 1
  %56 = icmp eq i64 %52, 0
  br i1 %56, label %102, label %57

57:                                               ; preds = %49
  %58 = sub nuw nsw i64 %54, %55
  br label %59

59:                                               ; preds = %59, %57
  %60 = phi i64 [ 0, %57 ], [ %99, %59 ]
  %61 = phi i64 [ %58, %57 ], [ %100, %59 ]
  %62 = trunc i64 %60 to i32
  %63 = xor i32 %62, -1
  %64 = add i32 %63, %4
  %65 = sext i32 %64 to i64
  %66 = getelementptr inbounds float, float* %1, i64 %65
  %67 = getelementptr inbounds float, float* %66, i64 -3
  %68 = bitcast float* %67 to <4 x i32>*
  %69 = load <4 x i32>, <4 x i32>* %68, align 4
  %70 = shufflevector <4 x i32> %69, <4 x i32> undef, <4 x i32> <i32 3, i32 2, i32 1, i32 0>
  %71 = getelementptr inbounds float, float* %66, i64 -4
  %72 = getelementptr inbounds float, float* %71, i64 -3
  %73 = bitcast float* %72 to <4 x i32>*
  %74 = load <4 x i32>, <4 x i32>* %73, align 4
  %75 = shufflevector <4 x i32> %74, <4 x i32> undef, <4 x i32> <i32 3, i32 2, i32 1, i32 0>
  %76 = getelementptr inbounds float, float* %13, i64 %60
  %77 = bitcast float* %76 to <4 x i32>*
  store <4 x i32> %70, <4 x i32>* %77, align 16
  %78 = getelementptr inbounds float, float* %76, i64 4
  %79 = bitcast float* %78 to <4 x i32>*
  store <4 x i32> %75, <4 x i32>* %79, align 16
  %80 = or i64 %60, 8
  %81 = trunc i64 %80 to i32
  %82 = xor i32 %81, -1
  %83 = add i32 %82, %4
  %84 = sext i32 %83 to i64
  %85 = getelementptr inbounds float, float* %1, i64 %84
  %86 = getelementptr inbounds float, float* %85, i64 -3
  %87 = bitcast float* %86 to <4 x i32>*
  %88 = load <4 x i32>, <4 x i32>* %87, align 4
  %89 = shufflevector <4 x i32> %88, <4 x i32> undef, <4 x i32> <i32 3, i32 2, i32 1, i32 0>
  %90 = getelementptr inbounds float, float* %85, i64 -4
  %91 = getelementptr inbounds float, float* %90, i64 -3
  %92 = bitcast float* %91 to <4 x i32>*
  %93 = load <4 x i32>, <4 x i32>* %92, align 4
  %94 = shufflevector <4 x i32> %93, <4 x i32> undef, <4 x i32> <i32 3, i32 2, i32 1, i32 0>
  %95 = getelementptr inbounds float, float* %13, i64 %80
  %96 = bitcast float* %95 to <4 x i32>*
  store <4 x i32> %89, <4 x i32>* %96, align 16
  %97 = getelementptr inbounds float, float* %95, i64 4
  %98 = bitcast float* %97 to <4 x i32>*
  store <4 x i32> %94, <4 x i32>* %98, align 16
  %99 = add i64 %60, 16
  %100 = add i64 %61, -2
  %101 = icmp eq i64 %100, 0
  br i1 %101, label %102, label %59, !llvm.loop !4

102:                                              ; preds = %59, %49
  %103 = phi i64 [ 0, %49 ], [ %99, %59 ]
  %104 = icmp eq i64 %55, 0
  br i1 %104, label %124, label %105

105:                                              ; preds = %102
  %106 = trunc i64 %103 to i32
  %107 = xor i32 %106, -1
  %108 = add i32 %107, %4
  %109 = sext i32 %108 to i64
  %110 = getelementptr inbounds float, float* %1, i64 %109
  %111 = getelementptr inbounds float, float* %110, i64 -3
  %112 = bitcast float* %111 to <4 x i32>*
  %113 = load <4 x i32>, <4 x i32>* %112, align 4
  %114 = shufflevector <4 x i32> %113, <4 x i32> undef, <4 x i32> <i32 3, i32 2, i32 1, i32 0>
  %115 = getelementptr inbounds float, float* %110, i64 -4
  %116 = getelementptr inbounds float, float* %115, i64 -3
  %117 = bitcast float* %116 to <4 x i32>*
  %118 = load <4 x i32>, <4 x i32>* %117, align 4
  %119 = shufflevector <4 x i32> %118, <4 x i32> undef, <4 x i32> <i32 3, i32 2, i32 1, i32 0>
  %120 = getelementptr inbounds float, float* %13, i64 %103
  %121 = bitcast float* %120 to <4 x i32>*
  store <4 x i32> %114, <4 x i32>* %121, align 16
  %122 = getelementptr inbounds float, float* %120, i64 4
  %123 = bitcast float* %122 to <4 x i32>*
  store <4 x i32> %119, <4 x i32>* %123, align 16
  br label %124

124:                                              ; preds = %102, %105
  %125 = icmp eq i64 %50, %17
  br i1 %125, label %126, label %19

126:                                              ; preds = %36, %133, %124, %10
  %127 = add nsw i32 %3, -3
  %128 = icmp sgt i32 %127, 0
  br i1 %128, label %129, label %158

129:                                              ; preds = %126
  %130 = bitcast <4 x i32>* %7 to i8*
  %131 = bitcast <4 x i32>* %7 to float*
  %132 = sub nsw i64 0, %11
  br label %338

133:                                              ; preds = %36, %133
  %134 = phi i64 [ %153, %133 ], [ %37, %36 ]
  %135 = phi i32 [ %154, %133 ], [ %38, %36 ]
  %136 = xor i32 %135, -1
  %137 = add i32 %136, %4
  %138 = sext i32 %137 to i64
  %139 = getelementptr inbounds float, float* %1, i64 %138
  %140 = bitcast float* %139 to i32*
  %141 = load i32, i32* %140, align 4
  %142 = getelementptr inbounds float, float* %13, i64 %134
  %143 = bitcast float* %142 to i32*
  store i32 %141, i32* %143, align 4
  %144 = add nuw nsw i64 %134, 1
  %145 = sub i32 -2, %135
  %146 = add i32 %145, %4
  %147 = sext i32 %146 to i64
  %148 = getelementptr inbounds float, float* %1, i64 %147
  %149 = bitcast float* %148 to i32*
  %150 = load i32, i32* %149, align 4
  %151 = getelementptr inbounds float, float* %13, i64 %144
  %152 = bitcast float* %151 to i32*
  store i32 %150, i32* %152, align 4
  %153 = add nuw nsw i64 %134, 2
  %154 = add nuw nsw i32 %135, 2
  %155 = icmp eq i64 %153, %17
  br i1 %155, label %126, label %133, !llvm.loop !6

156:                                              ; preds = %338
  %157 = trunc i64 %347 to i32
  br label %158

158:                                              ; preds = %156, %126
  %159 = phi i32 [ 0, %126 ], [ %157, %156 ]
  %160 = icmp slt i32 %159, %3
  br i1 %160, label %161, label %401

161:                                              ; preds = %158
  %162 = zext i32 %159 to i64
  %163 = zext i32 %3 to i64
  br i1 %15, label %281, label %164

164:                                              ; preds = %161
  %165 = sub nsw i64 %163, %162
  %166 = icmp ult i64 %165, 8
  br i1 %166, label %167, label %188

167:                                              ; preds = %279, %188, %164
  %168 = phi i64 [ %162, %188 ], [ %162, %164 ], [ %198, %279 ]
  %169 = sub nsw i64 %163, %168
  %170 = xor i64 %168, -1
  %171 = add nsw i64 %170, %163
  %172 = and i64 %169, 7
  %173 = icmp eq i64 %172, 0
  br i1 %173, label %185, label %174

174:                                              ; preds = %167, %174
  %175 = phi i64 [ %182, %174 ], [ %168, %167 ]
  %176 = phi i64 [ %183, %174 ], [ %172, %167 ]
  %177 = getelementptr inbounds float, float* %0, i64 %175
  %178 = bitcast float* %177 to i32*
  %179 = load i32, i32* %178, align 4
  %180 = getelementptr inbounds float, float* %2, i64 %175
  %181 = bitcast float* %180 to i32*
  store i32 %179, i32* %181, align 4
  %182 = add nuw nsw i64 %175, 1
  %183 = add i64 %176, -1
  %184 = icmp eq i64 %183, 0
  br i1 %184, label %185, label %174, !llvm.loop !7

185:                                              ; preds = %174, %167
  %186 = phi i64 [ %168, %167 ], [ %182, %174 ]
  %187 = icmp ult i64 %171, 7
  br i1 %187, label %401, label %350

188:                                              ; preds = %164
  %189 = getelementptr float, float* %2, i64 %162
  %190 = getelementptr float, float* %2, i64 %163
  %191 = getelementptr float, float* %0, i64 %162
  %192 = getelementptr float, float* %0, i64 %163
  %193 = icmp ult float* %189, %192
  %194 = icmp ult float* %191, %190
  %195 = and i1 %193, %194
  br i1 %195, label %167, label %196

196:                                              ; preds = %188
  %197 = and i64 %165, -8
  %198 = add nsw i64 %197, %162
  %199 = add nsw i64 %197, -8
  %200 = lshr exact i64 %199, 3
  %201 = add nuw nsw i64 %200, 1
  %202 = and i64 %201, 3
  %203 = icmp ult i64 %199, 24
  br i1 %203, label %259, label %204

204:                                              ; preds = %196
  %205 = sub nsw i64 %201, %202
  br label %206

206:                                              ; preds = %206, %204
  %207 = phi i64 [ 0, %204 ], [ %256, %206 ]
  %208 = phi i64 [ %205, %204 ], [ %257, %206 ]
  %209 = add i64 %207, %162
  %210 = getelementptr inbounds float, float* %0, i64 %209
  %211 = bitcast float* %210 to <4 x i32>*
  %212 = load <4 x i32>, <4 x i32>* %211, align 4, !alias.scope !8
  %213 = getelementptr inbounds float, float* %210, i64 4
  %214 = bitcast float* %213 to <4 x i32>*
  %215 = load <4 x i32>, <4 x i32>* %214, align 4, !alias.scope !8
  %216 = getelementptr inbounds float, float* %2, i64 %209
  %217 = bitcast float* %216 to <4 x i32>*
  store <4 x i32> %212, <4 x i32>* %217, align 4, !alias.scope !11, !noalias !8
  %218 = getelementptr inbounds float, float* %216, i64 4
  %219 = bitcast float* %218 to <4 x i32>*
  store <4 x i32> %215, <4 x i32>* %219, align 4, !alias.scope !11, !noalias !8
  %220 = or i64 %207, 8
  %221 = add i64 %220, %162
  %222 = getelementptr inbounds float, float* %0, i64 %221
  %223 = bitcast float* %222 to <4 x i32>*
  %224 = load <4 x i32>, <4 x i32>* %223, align 4, !alias.scope !8
  %225 = getelementptr inbounds float, float* %222, i64 4
  %226 = bitcast float* %225 to <4 x i32>*
  %227 = load <4 x i32>, <4 x i32>* %226, align 4, !alias.scope !8
  %228 = getelementptr inbounds float, float* %2, i64 %221
  %229 = bitcast float* %228 to <4 x i32>*
  store <4 x i32> %224, <4 x i32>* %229, align 4, !alias.scope !11, !noalias !8
  %230 = getelementptr inbounds float, float* %228, i64 4
  %231 = bitcast float* %230 to <4 x i32>*
  store <4 x i32> %227, <4 x i32>* %231, align 4, !alias.scope !11, !noalias !8
  %232 = or i64 %207, 16
  %233 = add i64 %232, %162
  %234 = getelementptr inbounds float, float* %0, i64 %233
  %235 = bitcast float* %234 to <4 x i32>*
  %236 = load <4 x i32>, <4 x i32>* %235, align 4, !alias.scope !8
  %237 = getelementptr inbounds float, float* %234, i64 4
  %238 = bitcast float* %237 to <4 x i32>*
  %239 = load <4 x i32>, <4 x i32>* %238, align 4, !alias.scope !8
  %240 = getelementptr inbounds float, float* %2, i64 %233
  %241 = bitcast float* %240 to <4 x i32>*
  store <4 x i32> %236, <4 x i32>* %241, align 4, !alias.scope !11, !noalias !8
  %242 = getelementptr inbounds float, float* %240, i64 4
  %243 = bitcast float* %242 to <4 x i32>*
  store <4 x i32> %239, <4 x i32>* %243, align 4, !alias.scope !11, !noalias !8
  %244 = or i64 %207, 24
  %245 = add i64 %244, %162
  %246 = getelementptr inbounds float, float* %0, i64 %245
  %247 = bitcast float* %246 to <4 x i32>*
  %248 = load <4 x i32>, <4 x i32>* %247, align 4, !alias.scope !8
  %249 = getelementptr inbounds float, float* %246, i64 4
  %250 = bitcast float* %249 to <4 x i32>*
  %251 = load <4 x i32>, <4 x i32>* %250, align 4, !alias.scope !8
  %252 = getelementptr inbounds float, float* %2, i64 %245
  %253 = bitcast float* %252 to <4 x i32>*
  store <4 x i32> %248, <4 x i32>* %253, align 4, !alias.scope !11, !noalias !8
  %254 = getelementptr inbounds float, float* %252, i64 4
  %255 = bitcast float* %254 to <4 x i32>*
  store <4 x i32> %251, <4 x i32>* %255, align 4, !alias.scope !11, !noalias !8
  %256 = add i64 %207, 32
  %257 = add i64 %208, -4
  %258 = icmp eq i64 %257, 0
  br i1 %258, label %259, label %206, !llvm.loop !13

259:                                              ; preds = %206, %196
  %260 = phi i64 [ 0, %196 ], [ %256, %206 ]
  %261 = icmp eq i64 %202, 0
  br i1 %261, label %279, label %262

262:                                              ; preds = %259, %262
  %263 = phi i64 [ %276, %262 ], [ %260, %259 ]
  %264 = phi i64 [ %277, %262 ], [ %202, %259 ]
  %265 = add i64 %263, %162
  %266 = getelementptr inbounds float, float* %0, i64 %265
  %267 = bitcast float* %266 to <4 x i32>*
  %268 = load <4 x i32>, <4 x i32>* %267, align 4, !alias.scope !8
  %269 = getelementptr inbounds float, float* %266, i64 4
  %270 = bitcast float* %269 to <4 x i32>*
  %271 = load <4 x i32>, <4 x i32>* %270, align 4, !alias.scope !8
  %272 = getelementptr inbounds float, float* %2, i64 %265
  %273 = bitcast float* %272 to <4 x i32>*
  store <4 x i32> %268, <4 x i32>* %273, align 4, !alias.scope !11, !noalias !8
  %274 = getelementptr inbounds float, float* %272, i64 4
  %275 = bitcast float* %274 to <4 x i32>*
  store <4 x i32> %271, <4 x i32>* %275, align 4, !alias.scope !11, !noalias !8
  %276 = add i64 %263, 8
  %277 = add i64 %264, -1
  %278 = icmp eq i64 %277, 0
  br i1 %278, label %279, label %262, !llvm.loop !14

279:                                              ; preds = %262, %259
  %280 = icmp eq i64 %165, %197
  br i1 %280, label %401, label %167

281:                                              ; preds = %161
  %282 = zext i32 %4 to i64
  %283 = and i64 %282, 1
  %284 = icmp eq i32 %4, 1
  %285 = sub nsw i64 %282, %283
  %286 = icmp eq i64 %283, 0
  br label %287

287:                                              ; preds = %333, %281
  %288 = phi i64 [ %162, %281 ], [ %336, %333 ]
  %289 = getelementptr inbounds float, float* %0, i64 %288
  %290 = load float, float* %289, align 4
  %291 = trunc i64 %288 to i32
  %292 = sub i32 %291, %4
  br i1 %284, label %319, label %293

293:                                              ; preds = %287, %293
  %294 = phi i64 [ %316, %293 ], [ 0, %287 ]
  %295 = phi float [ %315, %293 ], [ %290, %287 ]
  %296 = phi i64 [ %317, %293 ], [ %285, %287 ]
  %297 = getelementptr inbounds float, float* %13, i64 %294
  %298 = load float, float* %297, align 8
  %299 = trunc i64 %294 to i32
  %300 = add i32 %292, %299
  %301 = sext i32 %300 to i64
  %302 = getelementptr inbounds float, float* %0, i64 %301
  %303 = load float, float* %302, align 4
  %304 = fmul float %298, %303
  %305 = fadd float %295, %304
  %306 = or i64 %294, 1
  %307 = getelementptr inbounds float, float* %13, i64 %306
  %308 = load float, float* %307, align 4
  %309 = trunc i64 %306 to i32
  %310 = add i32 %292, %309
  %311 = sext i32 %310 to i64
  %312 = getelementptr inbounds float, float* %0, i64 %311
  %313 = load float, float* %312, align 4
  %314 = fmul float %308, %313
  %315 = fadd float %305, %314
  %316 = add nuw nsw i64 %294, 2
  %317 = add i64 %296, -2
  %318 = icmp eq i64 %317, 0
  br i1 %318, label %319, label %293

319:                                              ; preds = %293, %287
  %320 = phi float [ undef, %287 ], [ %315, %293 ]
  %321 = phi i64 [ 0, %287 ], [ %316, %293 ]
  %322 = phi float [ %290, %287 ], [ %315, %293 ]
  br i1 %286, label %333, label %323

323:                                              ; preds = %319
  %324 = getelementptr inbounds float, float* %13, i64 %321
  %325 = load float, float* %324, align 4
  %326 = trunc i64 %321 to i32
  %327 = add i32 %292, %326
  %328 = sext i32 %327 to i64
  %329 = getelementptr inbounds float, float* %0, i64 %328
  %330 = load float, float* %329, align 4
  %331 = fmul float %325, %330
  %332 = fadd float %322, %331
  br label %333

333:                                              ; preds = %319, %323
  %334 = phi float [ %320, %319 ], [ %332, %323 ]
  %335 = getelementptr inbounds float, float* %2, i64 %288
  store float %334, float* %335, align 4
  %336 = add nuw nsw i64 %288, 1
  %337 = icmp eq i64 %336, %163
  br i1 %337, label %401, label %287

338:                                              ; preds = %129, %338
  %339 = phi i64 [ 0, %129 ], [ %347, %338 ]
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %130) #5
  %340 = getelementptr inbounds float, float* %0, i64 %339
  %341 = bitcast float* %340 to <4 x i32>*
  %342 = load <4 x i32>, <4 x i32>* %341, align 4
  store <4 x i32> %342, <4 x i32>* %7, align 16
  %343 = getelementptr inbounds float, float* %340, i64 %132
  call void @xcorr_kernel_sse(float* nonnull %13, float* %343, float* nonnull %131, i32 %4) #5
  %344 = getelementptr inbounds float, float* %2, i64 %339
  %345 = load <4 x i32>, <4 x i32>* %7, align 16
  %346 = bitcast float* %344 to <4 x i32>*
  store <4 x i32> %345, <4 x i32>* %346, align 4
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %130) #5
  %347 = add nuw i64 %339, 4
  %348 = trunc i64 %347 to i32
  %349 = icmp sgt i32 %127, %348
  br i1 %349, label %338, label %156

350:                                              ; preds = %185, %350
  %351 = phi i64 [ %399, %350 ], [ %186, %185 ]
  %352 = getelementptr inbounds float, float* %0, i64 %351
  %353 = bitcast float* %352 to i32*
  %354 = load i32, i32* %353, align 4
  %355 = getelementptr inbounds float, float* %2, i64 %351
  %356 = bitcast float* %355 to i32*
  store i32 %354, i32* %356, align 4
  %357 = add nuw nsw i64 %351, 1
  %358 = getelementptr inbounds float, float* %0, i64 %357
  %359 = bitcast float* %358 to i32*
  %360 = load i32, i32* %359, align 4
  %361 = getelementptr inbounds float, float* %2, i64 %357
  %362 = bitcast float* %361 to i32*
  store i32 %360, i32* %362, align 4
  %363 = add nuw nsw i64 %351, 2
  %364 = getelementptr inbounds float, float* %0, i64 %363
  %365 = bitcast float* %364 to i32*
  %366 = load i32, i32* %365, align 4
  %367 = getelementptr inbounds float, float* %2, i64 %363
  %368 = bitcast float* %367 to i32*
  store i32 %366, i32* %368, align 4
  %369 = add nuw nsw i64 %351, 3
  %370 = getelementptr inbounds float, float* %0, i64 %369
  %371 = bitcast float* %370 to i32*
  %372 = load i32, i32* %371, align 4
  %373 = getelementptr inbounds float, float* %2, i64 %369
  %374 = bitcast float* %373 to i32*
  store i32 %372, i32* %374, align 4
  %375 = add nuw nsw i64 %351, 4
  %376 = getelementptr inbounds float, float* %0, i64 %375
  %377 = bitcast float* %376 to i32*
  %378 = load i32, i32* %377, align 4
  %379 = getelementptr inbounds float, float* %2, i64 %375
  %380 = bitcast float* %379 to i32*
  store i32 %378, i32* %380, align 4
  %381 = add nuw nsw i64 %351, 5
  %382 = getelementptr inbounds float, float* %0, i64 %381
  %383 = bitcast float* %382 to i32*
  %384 = load i32, i32* %383, align 4
  %385 = getelementptr inbounds float, float* %2, i64 %381
  %386 = bitcast float* %385 to i32*
  store i32 %384, i32* %386, align 4
  %387 = add nuw nsw i64 %351, 6
  %388 = getelementptr inbounds float, float* %0, i64 %387
  %389 = bitcast float* %388 to i32*
  %390 = load i32, i32* %389, align 4
  %391 = getelementptr inbounds float, float* %2, i64 %387
  %392 = bitcast float* %391 to i32*
  store i32 %390, i32* %392, align 4
  %393 = add nuw nsw i64 %351, 7
  %394 = getelementptr inbounds float, float* %0, i64 %393
  %395 = bitcast float* %394 to i32*
  %396 = load i32, i32* %395, align 4
  %397 = getelementptr inbounds float, float* %2, i64 %393
  %398 = bitcast float* %397 to i32*
  store i32 %396, i32* %398, align 4
  %399 = add nuw nsw i64 %351, 8
  %400 = icmp eq i64 %399, %163
  br i1 %400, label %401, label %350, !llvm.loop !15

401:                                              ; preds = %185, %350, %333, %279, %158
  ret void
}

; Function Attrs: noreturn
declare void @celt_fatal(i8*, i8*, i32) local_unnamed_addr #2

declare void @xcorr_kernel_sse(float*, float*, float*, i32) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define hidden void @celt_iir(float* nocapture readonly, float* nocapture readonly, float* nocapture, i32, i32, float* nocapture, i32) local_unnamed_addr #0 {
  %8 = alloca <4 x i32>, align 16
  %9 = bitcast <4 x i32>* %8 to [4 x float]*
  %10 = and i32 %4, 3
  %11 = icmp eq i32 %10, 0
  br i1 %11, label %13, label %12

12:                                               ; preds = %7
  tail call void @celt_fatal(i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.2, i64 0, i64 0), i8* getelementptr inbounds ([43 x i8], [43 x i8]* @.str.1, i64 0, i64 0), i32 204) #4
  unreachable

13:                                               ; preds = %7
  %14 = sext i32 %4 to i64
  %15 = shl nsw i64 %14, 2
  %16 = alloca float, i64 %14, align 16
  %17 = bitcast float* %16 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %17, i8 -86, i64 %15, i1 false)
  %18 = add i32 %4, %3
  %19 = sext i32 %18 to i64
  %20 = shl nsw i64 %19, 2
  %21 = alloca float, i64 %19, align 16
  %22 = bitcast float* %21 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %22, i8 -86, i64 %20, i1 false)
  %23 = icmp sgt i32 %4, 0
  br i1 %23, label %24, label %273

24:                                               ; preds = %13
  %25 = zext i32 %4 to i64
  %26 = icmp ult i32 %4, 8
  br i1 %26, label %27, label %49

27:                                               ; preds = %132, %49, %24
  %28 = phi i64 [ 0, %49 ], [ 0, %24 ], [ %58, %132 ]
  %29 = phi i32 [ 0, %49 ], [ 0, %24 ], [ %59, %132 ]
  %30 = xor i64 %28, -1
  %31 = and i64 %25, 1
  %32 = icmp eq i64 %31, 0
  br i1 %32, label %44, label %33

33:                                               ; preds = %27
  %34 = xor i32 %29, -1
  %35 = add i32 %34, %4
  %36 = sext i32 %35 to i64
  %37 = getelementptr inbounds float, float* %1, i64 %36
  %38 = bitcast float* %37 to i32*
  %39 = load i32, i32* %38, align 4
  %40 = getelementptr inbounds float, float* %16, i64 %28
  %41 = bitcast float* %40 to i32*
  store i32 %39, i32* %41, align 16
  %42 = or i64 %28, 1
  %43 = add nuw nsw i32 %29, 1
  br label %44

44:                                               ; preds = %27, %33
  %45 = phi i64 [ %28, %27 ], [ %42, %33 ]
  %46 = phi i32 [ %29, %27 ], [ %43, %33 ]
  %47 = sub nsw i64 0, %25
  %48 = icmp eq i64 %30, %47
  br i1 %48, label %134, label %250

49:                                               ; preds = %24
  %50 = add nsw i64 %25, -1
  %51 = add i32 %4, -1
  %52 = trunc i64 %50 to i32
  %53 = sub i32 %51, %52
  %54 = icmp sgt i32 %53, %51
  %55 = icmp ugt i64 %50, 4294967295
  %56 = or i1 %54, %55
  br i1 %56, label %27, label %57

57:                                               ; preds = %49
  %58 = and i64 %25, 4294967288
  %59 = trunc i64 %58 to i32
  %60 = add nsw i64 %58, -8
  %61 = lshr exact i64 %60, 3
  %62 = add nuw nsw i64 %61, 1
  %63 = and i64 %62, 1
  %64 = icmp eq i64 %60, 0
  br i1 %64, label %110, label %65

65:                                               ; preds = %57
  %66 = sub nuw nsw i64 %62, %63
  br label %67

67:                                               ; preds = %67, %65
  %68 = phi i64 [ 0, %65 ], [ %107, %67 ]
  %69 = phi i64 [ %66, %65 ], [ %108, %67 ]
  %70 = trunc i64 %68 to i32
  %71 = xor i32 %70, -1
  %72 = add i32 %71, %4
  %73 = sext i32 %72 to i64
  %74 = getelementptr inbounds float, float* %1, i64 %73
  %75 = getelementptr inbounds float, float* %74, i64 -3
  %76 = bitcast float* %75 to <4 x i32>*
  %77 = load <4 x i32>, <4 x i32>* %76, align 4
  %78 = shufflevector <4 x i32> %77, <4 x i32> undef, <4 x i32> <i32 3, i32 2, i32 1, i32 0>
  %79 = getelementptr inbounds float, float* %74, i64 -4
  %80 = getelementptr inbounds float, float* %79, i64 -3
  %81 = bitcast float* %80 to <4 x i32>*
  %82 = load <4 x i32>, <4 x i32>* %81, align 4
  %83 = shufflevector <4 x i32> %82, <4 x i32> undef, <4 x i32> <i32 3, i32 2, i32 1, i32 0>
  %84 = getelementptr inbounds float, float* %16, i64 %68
  %85 = bitcast float* %84 to <4 x i32>*
  store <4 x i32> %78, <4 x i32>* %85, align 16
  %86 = getelementptr inbounds float, float* %84, i64 4
  %87 = bitcast float* %86 to <4 x i32>*
  store <4 x i32> %83, <4 x i32>* %87, align 16
  %88 = or i64 %68, 8
  %89 = trunc i64 %88 to i32
  %90 = xor i32 %89, -1
  %91 = add i32 %90, %4
  %92 = sext i32 %91 to i64
  %93 = getelementptr inbounds float, float* %1, i64 %92
  %94 = getelementptr inbounds float, float* %93, i64 -3
  %95 = bitcast float* %94 to <4 x i32>*
  %96 = load <4 x i32>, <4 x i32>* %95, align 4
  %97 = shufflevector <4 x i32> %96, <4 x i32> undef, <4 x i32> <i32 3, i32 2, i32 1, i32 0>
  %98 = getelementptr inbounds float, float* %93, i64 -4
  %99 = getelementptr inbounds float, float* %98, i64 -3
  %100 = bitcast float* %99 to <4 x i32>*
  %101 = load <4 x i32>, <4 x i32>* %100, align 4
  %102 = shufflevector <4 x i32> %101, <4 x i32> undef, <4 x i32> <i32 3, i32 2, i32 1, i32 0>
  %103 = getelementptr inbounds float, float* %16, i64 %88
  %104 = bitcast float* %103 to <4 x i32>*
  store <4 x i32> %97, <4 x i32>* %104, align 16
  %105 = getelementptr inbounds float, float* %103, i64 4
  %106 = bitcast float* %105 to <4 x i32>*
  store <4 x i32> %102, <4 x i32>* %106, align 16
  %107 = add i64 %68, 16
  %108 = add i64 %69, -2
  %109 = icmp eq i64 %108, 0
  br i1 %109, label %110, label %67, !llvm.loop !16

110:                                              ; preds = %67, %57
  %111 = phi i64 [ 0, %57 ], [ %107, %67 ]
  %112 = icmp eq i64 %63, 0
  br i1 %112, label %132, label %113

113:                                              ; preds = %110
  %114 = trunc i64 %111 to i32
  %115 = xor i32 %114, -1
  %116 = add i32 %115, %4
  %117 = sext i32 %116 to i64
  %118 = getelementptr inbounds float, float* %1, i64 %117
  %119 = getelementptr inbounds float, float* %118, i64 -3
  %120 = bitcast float* %119 to <4 x i32>*
  %121 = load <4 x i32>, <4 x i32>* %120, align 4
  %122 = shufflevector <4 x i32> %121, <4 x i32> undef, <4 x i32> <i32 3, i32 2, i32 1, i32 0>
  %123 = getelementptr inbounds float, float* %118, i64 -4
  %124 = getelementptr inbounds float, float* %123, i64 -3
  %125 = bitcast float* %124 to <4 x i32>*
  %126 = load <4 x i32>, <4 x i32>* %125, align 4
  %127 = shufflevector <4 x i32> %126, <4 x i32> undef, <4 x i32> <i32 3, i32 2, i32 1, i32 0>
  %128 = getelementptr inbounds float, float* %16, i64 %111
  %129 = bitcast float* %128 to <4 x i32>*
  store <4 x i32> %122, <4 x i32>* %129, align 16
  %130 = getelementptr inbounds float, float* %128, i64 4
  %131 = bitcast float* %130 to <4 x i32>*
  store <4 x i32> %127, <4 x i32>* %131, align 16
  br label %132

132:                                              ; preds = %110, %113
  %133 = icmp eq i64 %58, %25
  br i1 %133, label %134, label %27

134:                                              ; preds = %44, %250, %132
  br i1 %23, label %135, label %273

135:                                              ; preds = %134
  %136 = zext i32 %4 to i64
  %137 = icmp ult i32 %4, 8
  br i1 %137, label %138, label %159

138:                                              ; preds = %248, %159, %135
  %139 = phi i64 [ 0, %159 ], [ 0, %135 ], [ %168, %248 ]
  %140 = phi i32 [ 0, %159 ], [ 0, %135 ], [ %169, %248 ]
  %141 = xor i64 %139, -1
  %142 = and i64 %25, 1
  %143 = icmp eq i64 %142, 0
  br i1 %143, label %154, label %144

144:                                              ; preds = %138
  %145 = xor i32 %140, -1
  %146 = add i32 %145, %4
  %147 = sext i32 %146 to i64
  %148 = getelementptr inbounds float, float* %5, i64 %147
  %149 = load float, float* %148, align 4
  %150 = fsub float -0.000000e+00, %149
  %151 = getelementptr inbounds float, float* %21, i64 %139
  store float %150, float* %151, align 16
  %152 = or i64 %139, 1
  %153 = add nuw nsw i32 %140, 1
  br label %154

154:                                              ; preds = %138, %144
  %155 = phi i64 [ %139, %138 ], [ %152, %144 ]
  %156 = phi i32 [ %140, %138 ], [ %153, %144 ]
  %157 = sub nsw i64 0, %25
  %158 = icmp eq i64 %141, %157
  br i1 %158, label %273, label %285

159:                                              ; preds = %135
  %160 = add nsw i64 %25, -1
  %161 = add i32 %4, -1
  %162 = trunc i64 %160 to i32
  %163 = sub i32 %161, %162
  %164 = icmp sgt i32 %163, %161
  %165 = icmp ugt i64 %160, 4294967295
  %166 = or i1 %164, %165
  br i1 %166, label %138, label %167

167:                                              ; preds = %159
  %168 = and i64 %25, 4294967288
  %169 = trunc i64 %168 to i32
  %170 = add nsw i64 %168, -8
  %171 = lshr exact i64 %170, 3
  %172 = add nuw nsw i64 %171, 1
  %173 = and i64 %172, 1
  %174 = icmp eq i64 %170, 0
  br i1 %174, label %224, label %175

175:                                              ; preds = %167
  %176 = sub nuw nsw i64 %172, %173
  br label %177

177:                                              ; preds = %177, %175
  %178 = phi i64 [ 0, %175 ], [ %221, %177 ]
  %179 = phi i64 [ %176, %175 ], [ %222, %177 ]
  %180 = trunc i64 %178 to i32
  %181 = xor i32 %180, -1
  %182 = add i32 %181, %4
  %183 = sext i32 %182 to i64
  %184 = getelementptr inbounds float, float* %5, i64 %183
  %185 = getelementptr inbounds float, float* %184, i64 -3
  %186 = bitcast float* %185 to <4 x float>*
  %187 = load <4 x float>, <4 x float>* %186, align 4
  %188 = getelementptr inbounds float, float* %184, i64 -4
  %189 = getelementptr inbounds float, float* %188, i64 -3
  %190 = bitcast float* %189 to <4 x float>*
  %191 = load <4 x float>, <4 x float>* %190, align 4
  %192 = fsub <4 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %187
  %193 = shufflevector <4 x float> %192, <4 x float> undef, <4 x i32> <i32 3, i32 2, i32 1, i32 0>
  %194 = fsub <4 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %191
  %195 = shufflevector <4 x float> %194, <4 x float> undef, <4 x i32> <i32 3, i32 2, i32 1, i32 0>
  %196 = getelementptr inbounds float, float* %21, i64 %178
  %197 = bitcast float* %196 to <4 x float>*
  store <4 x float> %193, <4 x float>* %197, align 16
  %198 = getelementptr inbounds float, float* %196, i64 4
  %199 = bitcast float* %198 to <4 x float>*
  store <4 x float> %195, <4 x float>* %199, align 16
  %200 = or i64 %178, 8
  %201 = trunc i64 %200 to i32
  %202 = xor i32 %201, -1
  %203 = add i32 %202, %4
  %204 = sext i32 %203 to i64
  %205 = getelementptr inbounds float, float* %5, i64 %204
  %206 = getelementptr inbounds float, float* %205, i64 -3
  %207 = bitcast float* %206 to <4 x float>*
  %208 = load <4 x float>, <4 x float>* %207, align 4
  %209 = getelementptr inbounds float, float* %205, i64 -4
  %210 = getelementptr inbounds float, float* %209, i64 -3
  %211 = bitcast float* %210 to <4 x float>*
  %212 = load <4 x float>, <4 x float>* %211, align 4
  %213 = fsub <4 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %208
  %214 = shufflevector <4 x float> %213, <4 x float> undef, <4 x i32> <i32 3, i32 2, i32 1, i32 0>
  %215 = fsub <4 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %212
  %216 = shufflevector <4 x float> %215, <4 x float> undef, <4 x i32> <i32 3, i32 2, i32 1, i32 0>
  %217 = getelementptr inbounds float, float* %21, i64 %200
  %218 = bitcast float* %217 to <4 x float>*
  store <4 x float> %214, <4 x float>* %218, align 16
  %219 = getelementptr inbounds float, float* %217, i64 4
  %220 = bitcast float* %219 to <4 x float>*
  store <4 x float> %216, <4 x float>* %220, align 16
  %221 = add i64 %178, 16
  %222 = add i64 %179, -2
  %223 = icmp eq i64 %222, 0
  br i1 %223, label %224, label %177, !llvm.loop !17

224:                                              ; preds = %177, %167
  %225 = phi i64 [ 0, %167 ], [ %221, %177 ]
  %226 = icmp eq i64 %173, 0
  br i1 %226, label %248, label %227

227:                                              ; preds = %224
  %228 = trunc i64 %225 to i32
  %229 = xor i32 %228, -1
  %230 = add i32 %229, %4
  %231 = sext i32 %230 to i64
  %232 = getelementptr inbounds float, float* %5, i64 %231
  %233 = getelementptr inbounds float, float* %232, i64 -3
  %234 = bitcast float* %233 to <4 x float>*
  %235 = load <4 x float>, <4 x float>* %234, align 4
  %236 = getelementptr inbounds float, float* %232, i64 -4
  %237 = getelementptr inbounds float, float* %236, i64 -3
  %238 = bitcast float* %237 to <4 x float>*
  %239 = load <4 x float>, <4 x float>* %238, align 4
  %240 = fsub <4 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %235
  %241 = shufflevector <4 x float> %240, <4 x float> undef, <4 x i32> <i32 3, i32 2, i32 1, i32 0>
  %242 = fsub <4 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %239
  %243 = shufflevector <4 x float> %242, <4 x float> undef, <4 x i32> <i32 3, i32 2, i32 1, i32 0>
  %244 = getelementptr inbounds float, float* %21, i64 %225
  %245 = bitcast float* %244 to <4 x float>*
  store <4 x float> %241, <4 x float>* %245, align 16
  %246 = getelementptr inbounds float, float* %244, i64 4
  %247 = bitcast float* %246 to <4 x float>*
  store <4 x float> %243, <4 x float>* %247, align 16
  br label %248

248:                                              ; preds = %224, %227
  %249 = icmp eq i64 %168, %25
  br i1 %249, label %273, label %138

250:                                              ; preds = %44, %250
  %251 = phi i64 [ %270, %250 ], [ %45, %44 ]
  %252 = phi i32 [ %271, %250 ], [ %46, %44 ]
  %253 = xor i32 %252, -1
  %254 = add i32 %253, %4
  %255 = sext i32 %254 to i64
  %256 = getelementptr inbounds float, float* %1, i64 %255
  %257 = bitcast float* %256 to i32*
  %258 = load i32, i32* %257, align 4
  %259 = getelementptr inbounds float, float* %16, i64 %251
  %260 = bitcast float* %259 to i32*
  store i32 %258, i32* %260, align 4
  %261 = add nuw nsw i64 %251, 1
  %262 = sub i32 -2, %252
  %263 = add i32 %262, %4
  %264 = sext i32 %263 to i64
  %265 = getelementptr inbounds float, float* %1, i64 %264
  %266 = bitcast float* %265 to i32*
  %267 = load i32, i32* %266, align 4
  %268 = getelementptr inbounds float, float* %16, i64 %261
  %269 = bitcast float* %268 to i32*
  store i32 %267, i32* %269, align 4
  %270 = add nuw nsw i64 %251, 2
  %271 = add nuw nsw i32 %252, 2
  %272 = icmp eq i64 %270, %25
  br i1 %272, label %134, label %250, !llvm.loop !18

273:                                              ; preds = %154, %285, %248, %13, %134
  %274 = phi i32 [ 0, %134 ], [ 0, %13 ], [ %4, %248 ], [ %4, %285 ], [ %4, %154 ]
  %275 = icmp slt i32 %274, %18
  br i1 %275, label %276, label %306

276:                                              ; preds = %273
  %277 = zext i32 %274 to i64
  %278 = getelementptr float, float* %21, i64 %277
  %279 = bitcast float* %278 to i8*
  %280 = xor i32 %274, -1
  %281 = add i32 %18, %280
  %282 = zext i32 %281 to i64
  %283 = shl nuw nsw i64 %282, 2
  %284 = add nuw nsw i64 %283, 4
  call void @llvm.memset.p0i8.i64(i8* align 4 %279, i8 0, i64 %284, i1 false)
  br label %306

285:                                              ; preds = %154, %285
  %286 = phi i64 [ %303, %285 ], [ %155, %154 ]
  %287 = phi i32 [ %304, %285 ], [ %156, %154 ]
  %288 = xor i32 %287, -1
  %289 = add i32 %288, %4
  %290 = sext i32 %289 to i64
  %291 = getelementptr inbounds float, float* %5, i64 %290
  %292 = load float, float* %291, align 4
  %293 = fsub float -0.000000e+00, %292
  %294 = getelementptr inbounds float, float* %21, i64 %286
  store float %293, float* %294, align 4
  %295 = add nuw nsw i64 %286, 1
  %296 = sub i32 -2, %287
  %297 = add i32 %296, %4
  %298 = sext i32 %297 to i64
  %299 = getelementptr inbounds float, float* %5, i64 %298
  %300 = load float, float* %299, align 4
  %301 = fsub float -0.000000e+00, %300
  %302 = getelementptr inbounds float, float* %21, i64 %295
  store float %301, float* %302, align 4
  %303 = add nuw nsw i64 %286, 2
  %304 = add nuw nsw i32 %287, 2
  %305 = icmp eq i64 %303, %136
  br i1 %305, label %273, label %285, !llvm.loop !19

306:                                              ; preds = %276, %273
  %307 = add nsw i32 %3, -3
  %308 = icmp sgt i32 %307, 0
  br i1 %308, label %309, label %320

309:                                              ; preds = %306
  %310 = bitcast <4 x i32>* %8 to i8*
  %311 = bitcast <4 x i32>* %8 to float*
  %312 = getelementptr inbounds [4 x float], [4 x float]* %9, i64 0, i64 1
  %313 = getelementptr inbounds [4 x float], [4 x float]* %9, i64 0, i64 2
  %314 = getelementptr inbounds [4 x float], [4 x float]* %9, i64 0, i64 3
  %315 = getelementptr inbounds float, float* %1, i64 1
  %316 = getelementptr inbounds float, float* %1, i64 2
  %317 = sext i32 %307 to i64
  br label %427

318:                                              ; preds = %427
  %319 = trunc i64 %474 to i32
  br label %320

320:                                              ; preds = %318, %306
  %321 = phi i32 [ 0, %306 ], [ %319, %318 ]
  %322 = icmp slt i32 %321, %3
  br i1 %322, label %323, label %476

323:                                              ; preds = %320
  %324 = zext i32 %321 to i64
  %325 = zext i32 %3 to i64
  br i1 %23, label %351, label %326

326:                                              ; preds = %323
  %327 = sub nsw i64 %325, %324
  %328 = xor i64 %324, -1
  %329 = add nsw i64 %328, %325
  %330 = and i64 %327, 3
  %331 = icmp eq i64 %330, 0
  br i1 %331, label %348, label %332

332:                                              ; preds = %326, %332
  %333 = phi i64 [ %345, %332 ], [ %324, %326 ]
  %334 = phi i64 [ %346, %332 ], [ %330, %326 ]
  %335 = getelementptr inbounds float, float* %0, i64 %333
  %336 = bitcast float* %335 to i32*
  %337 = load i32, i32* %336, align 4
  %338 = trunc i64 %333 to i32
  %339 = add nsw i32 %338, %4
  %340 = sext i32 %339 to i64
  %341 = getelementptr inbounds float, float* %21, i64 %340
  %342 = bitcast float* %341 to i32*
  store i32 %337, i32* %342, align 4
  %343 = getelementptr inbounds float, float* %2, i64 %333
  %344 = bitcast float* %343 to i32*
  store i32 %337, i32* %344, align 4
  %345 = add nuw nsw i64 %333, 1
  %346 = add i64 %334, -1
  %347 = icmp eq i64 %346, 0
  br i1 %347, label %348, label %332, !llvm.loop !20

348:                                              ; preds = %332, %326
  %349 = phi i64 [ %324, %326 ], [ %345, %332 ]
  %350 = icmp ult i64 %329, 3
  br i1 %350, label %476, label %599

351:                                              ; preds = %323
  %352 = zext i32 %4 to i64
  %353 = add nsw i64 %352, -1
  %354 = and i64 %352, 3
  %355 = icmp ult i64 %353, 3
  %356 = sub nsw i64 %352, %354
  %357 = icmp eq i64 %354, 0
  br label %358

358:                                              ; preds = %418, %351
  %359 = phi i64 [ %324, %351 ], [ %425, %418 ]
  %360 = getelementptr inbounds float, float* %0, i64 %359
  %361 = load float, float* %360, align 4
  br i1 %355, label %400, label %362

362:                                              ; preds = %358, %362
  %363 = phi i64 [ %397, %362 ], [ 0, %358 ]
  %364 = phi float [ %396, %362 ], [ %361, %358 ]
  %365 = phi i64 [ %398, %362 ], [ %356, %358 ]
  %366 = getelementptr inbounds float, float* %16, i64 %363
  %367 = load float, float* %366, align 16
  %368 = add nuw nsw i64 %363, %359
  %369 = getelementptr inbounds float, float* %21, i64 %368
  %370 = load float, float* %369, align 4
  %371 = fmul float %367, %370
  %372 = fsub float %364, %371
  %373 = or i64 %363, 1
  %374 = getelementptr inbounds float, float* %16, i64 %373
  %375 = load float, float* %374, align 4
  %376 = add nuw nsw i64 %373, %359
  %377 = getelementptr inbounds float, float* %21, i64 %376
  %378 = load float, float* %377, align 4
  %379 = fmul float %375, %378
  %380 = fsub float %372, %379
  %381 = or i64 %363, 2
  %382 = getelementptr inbounds float, float* %16, i64 %381
  %383 = load float, float* %382, align 8
  %384 = add nuw nsw i64 %381, %359
  %385 = getelementptr inbounds float, float* %21, i64 %384
  %386 = load float, float* %385, align 4
  %387 = fmul float %383, %386
  %388 = fsub float %380, %387
  %389 = or i64 %363, 3
  %390 = getelementptr inbounds float, float* %16, i64 %389
  %391 = load float, float* %390, align 4
  %392 = add nuw nsw i64 %389, %359
  %393 = getelementptr inbounds float, float* %21, i64 %392
  %394 = load float, float* %393, align 4
  %395 = fmul float %391, %394
  %396 = fsub float %388, %395
  %397 = add nuw nsw i64 %363, 4
  %398 = add i64 %365, -4
  %399 = icmp eq i64 %398, 0
  br i1 %399, label %400, label %362

400:                                              ; preds = %362, %358
  %401 = phi float [ undef, %358 ], [ %396, %362 ]
  %402 = phi i64 [ 0, %358 ], [ %397, %362 ]
  %403 = phi float [ %361, %358 ], [ %396, %362 ]
  br i1 %357, label %418, label %404

404:                                              ; preds = %400, %404
  %405 = phi i64 [ %415, %404 ], [ %402, %400 ]
  %406 = phi float [ %414, %404 ], [ %403, %400 ]
  %407 = phi i64 [ %416, %404 ], [ %354, %400 ]
  %408 = getelementptr inbounds float, float* %16, i64 %405
  %409 = load float, float* %408, align 4
  %410 = add nuw nsw i64 %405, %359
  %411 = getelementptr inbounds float, float* %21, i64 %410
  %412 = load float, float* %411, align 4
  %413 = fmul float %409, %412
  %414 = fsub float %406, %413
  %415 = add nuw nsw i64 %405, 1
  %416 = add i64 %407, -1
  %417 = icmp eq i64 %416, 0
  br i1 %417, label %418, label %404, !llvm.loop !21

418:                                              ; preds = %404, %400
  %419 = phi float [ %401, %400 ], [ %414, %404 ]
  %420 = trunc i64 %359 to i32
  %421 = add nsw i32 %420, %4
  %422 = sext i32 %421 to i64
  %423 = getelementptr inbounds float, float* %21, i64 %422
  store float %419, float* %423, align 4
  %424 = getelementptr inbounds float, float* %2, i64 %359
  store float %419, float* %424, align 4
  %425 = add nuw nsw i64 %359, 1
  %426 = icmp eq i64 %425, %325
  br i1 %426, label %476, label %358

427:                                              ; preds = %309, %427
  %428 = phi i64 [ 0, %309 ], [ %474, %427 ]
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %310) #5
  %429 = getelementptr inbounds float, float* %0, i64 %428
  %430 = or i64 %428, 1
  %431 = or i64 %428, 2
  %432 = or i64 %428, 3
  %433 = bitcast float* %429 to <4 x i32>*
  %434 = load <4 x i32>, <4 x i32>* %433, align 4
  store <4 x i32> %434, <4 x i32>* %8, align 16
  %435 = getelementptr inbounds float, float* %21, i64 %428
  call void @xcorr_kernel_sse(float* nonnull %16, float* %435, float* nonnull %311, i32 %4) #5
  %436 = load float, float* %311, align 16
  %437 = fsub float -0.000000e+00, %436
  %438 = add nsw i64 %428, %14
  %439 = getelementptr inbounds float, float* %21, i64 %438
  store float %437, float* %439, align 4
  %440 = getelementptr inbounds float, float* %2, i64 %428
  store float %436, float* %440, align 4
  %441 = load float, float* %312, align 4
  %442 = load float, float* %1, align 4
  %443 = fmul float %442, %437
  %444 = fadd float %441, %443
  store float %444, float* %312, align 4
  %445 = fsub float -0.000000e+00, %444
  %446 = add nsw i64 %438, 1
  %447 = getelementptr inbounds float, float* %21, i64 %446
  store float %445, float* %447, align 4
  %448 = getelementptr inbounds float, float* %2, i64 %430
  store float %444, float* %448, align 4
  %449 = load float, float* %313, align 8
  %450 = load float, float* %1, align 4
  %451 = fmul float %450, %445
  %452 = fadd float %449, %451
  %453 = load float, float* %315, align 4
  %454 = fmul float %453, %437
  %455 = fadd float %452, %454
  store float %455, float* %313, align 8
  %456 = fsub float -0.000000e+00, %455
  %457 = add nsw i64 %438, 2
  %458 = getelementptr inbounds float, float* %21, i64 %457
  store float %456, float* %458, align 4
  %459 = getelementptr inbounds float, float* %2, i64 %431
  store float %455, float* %459, align 4
  %460 = load float, float* %314, align 4
  %461 = load float, float* %1, align 4
  %462 = fmul float %461, %456
  %463 = fadd float %460, %462
  %464 = load float, float* %315, align 4
  %465 = fmul float %464, %445
  %466 = fadd float %463, %465
  %467 = load float, float* %316, align 4
  %468 = fmul float %467, %437
  %469 = fadd float %466, %468
  %470 = fsub float -0.000000e+00, %469
  %471 = add nsw i64 %438, 3
  %472 = getelementptr inbounds float, float* %21, i64 %471
  store float %470, float* %472, align 4
  %473 = getelementptr inbounds float, float* %2, i64 %432
  store float %469, float* %473, align 4
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %310) #5
  %474 = add nuw i64 %428, 4
  %475 = icmp slt i64 %474, %317
  br i1 %475, label %427, label %318

476:                                              ; preds = %348, %599, %418, %320
  br i1 %23, label %477, label %669

477:                                              ; preds = %476
  %478 = zext i32 %4 to i64
  %479 = icmp ult i32 %4, 8
  br i1 %479, label %480, label %502

480:                                              ; preds = %597, %510, %502, %477
  %481 = phi i64 [ 0, %510 ], [ 0, %502 ], [ 0, %477 ], [ %523, %597 ]
  %482 = phi i32 [ 0, %510 ], [ 0, %502 ], [ 0, %477 ], [ %524, %597 ]
  %483 = xor i64 %481, -1
  %484 = and i64 %478, 1
  %485 = icmp eq i64 %484, 0
  br i1 %485, label %497, label %486

486:                                              ; preds = %480
  %487 = xor i32 %482, -1
  %488 = add i32 %487, %3
  %489 = sext i32 %488 to i64
  %490 = getelementptr inbounds float, float* %2, i64 %489
  %491 = bitcast float* %490 to i32*
  %492 = load i32, i32* %491, align 4
  %493 = getelementptr inbounds float, float* %5, i64 %481
  %494 = bitcast float* %493 to i32*
  store i32 %492, i32* %494, align 4
  %495 = or i64 %481, 1
  %496 = add nuw nsw i32 %482, 1
  br label %497

497:                                              ; preds = %480, %486
  %498 = phi i64 [ %481, %480 ], [ %495, %486 ]
  %499 = phi i32 [ %482, %480 ], [ %496, %486 ]
  %500 = sub nsw i64 0, %478
  %501 = icmp eq i64 %483, %500
  br i1 %501, label %669, label %646

502:                                              ; preds = %477
  %503 = add nsw i64 %478, -1
  %504 = add i32 %3, -1
  %505 = trunc i64 %503 to i32
  %506 = sub i32 %504, %505
  %507 = icmp sgt i32 %506, %504
  %508 = icmp ugt i64 %503, 4294967295
  %509 = or i1 %507, %508
  br i1 %509, label %480, label %510

510:                                              ; preds = %502
  %511 = getelementptr float, float* %5, i64 %478
  %512 = add i32 %3, -1
  %513 = sext i32 %512 to i64
  %514 = add nsw i64 %513, 1
  %515 = sub nsw i64 %514, %478
  %516 = getelementptr float, float* %2, i64 %515
  %517 = add nsw i64 %513, 1
  %518 = getelementptr float, float* %2, i64 %517
  %519 = icmp ugt float* %518, %5
  %520 = icmp ult float* %516, %511
  %521 = and i1 %519, %520
  br i1 %521, label %480, label %522

522:                                              ; preds = %510
  %523 = and i64 %478, 4294967288
  %524 = trunc i64 %523 to i32
  %525 = add nsw i64 %523, -8
  %526 = lshr exact i64 %525, 3
  %527 = add nuw nsw i64 %526, 1
  %528 = and i64 %527, 1
  %529 = icmp eq i64 %525, 0
  br i1 %529, label %575, label %530

530:                                              ; preds = %522
  %531 = sub nuw nsw i64 %527, %528
  br label %532

532:                                              ; preds = %532, %530
  %533 = phi i64 [ 0, %530 ], [ %572, %532 ]
  %534 = phi i64 [ %531, %530 ], [ %573, %532 ]
  %535 = trunc i64 %533 to i32
  %536 = xor i32 %535, -1
  %537 = add i32 %536, %3
  %538 = sext i32 %537 to i64
  %539 = getelementptr inbounds float, float* %2, i64 %538
  %540 = getelementptr inbounds float, float* %539, i64 -3
  %541 = bitcast float* %540 to <4 x i32>*
  %542 = load <4 x i32>, <4 x i32>* %541, align 4, !alias.scope !22
  %543 = shufflevector <4 x i32> %542, <4 x i32> undef, <4 x i32> <i32 3, i32 2, i32 1, i32 0>
  %544 = getelementptr inbounds float, float* %539, i64 -4
  %545 = getelementptr inbounds float, float* %544, i64 -3
  %546 = bitcast float* %545 to <4 x i32>*
  %547 = load <4 x i32>, <4 x i32>* %546, align 4, !alias.scope !22
  %548 = shufflevector <4 x i32> %547, <4 x i32> undef, <4 x i32> <i32 3, i32 2, i32 1, i32 0>
  %549 = getelementptr inbounds float, float* %5, i64 %533
  %550 = bitcast float* %549 to <4 x i32>*
  store <4 x i32> %543, <4 x i32>* %550, align 4, !alias.scope !25, !noalias !22
  %551 = getelementptr inbounds float, float* %549, i64 4
  %552 = bitcast float* %551 to <4 x i32>*
  store <4 x i32> %548, <4 x i32>* %552, align 4, !alias.scope !25, !noalias !22
  %553 = or i64 %533, 8
  %554 = trunc i64 %553 to i32
  %555 = xor i32 %554, -1
  %556 = add i32 %555, %3
  %557 = sext i32 %556 to i64
  %558 = getelementptr inbounds float, float* %2, i64 %557
  %559 = getelementptr inbounds float, float* %558, i64 -3
  %560 = bitcast float* %559 to <4 x i32>*
  %561 = load <4 x i32>, <4 x i32>* %560, align 4, !alias.scope !22
  %562 = shufflevector <4 x i32> %561, <4 x i32> undef, <4 x i32> <i32 3, i32 2, i32 1, i32 0>
  %563 = getelementptr inbounds float, float* %558, i64 -4
  %564 = getelementptr inbounds float, float* %563, i64 -3
  %565 = bitcast float* %564 to <4 x i32>*
  %566 = load <4 x i32>, <4 x i32>* %565, align 4, !alias.scope !22
  %567 = shufflevector <4 x i32> %566, <4 x i32> undef, <4 x i32> <i32 3, i32 2, i32 1, i32 0>
  %568 = getelementptr inbounds float, float* %5, i64 %553
  %569 = bitcast float* %568 to <4 x i32>*
  store <4 x i32> %562, <4 x i32>* %569, align 4, !alias.scope !25, !noalias !22
  %570 = getelementptr inbounds float, float* %568, i64 4
  %571 = bitcast float* %570 to <4 x i32>*
  store <4 x i32> %567, <4 x i32>* %571, align 4, !alias.scope !25, !noalias !22
  %572 = add i64 %533, 16
  %573 = add i64 %534, -2
  %574 = icmp eq i64 %573, 0
  br i1 %574, label %575, label %532, !llvm.loop !27

575:                                              ; preds = %532, %522
  %576 = phi i64 [ 0, %522 ], [ %572, %532 ]
  %577 = icmp eq i64 %528, 0
  br i1 %577, label %597, label %578

578:                                              ; preds = %575
  %579 = trunc i64 %576 to i32
  %580 = xor i32 %579, -1
  %581 = add i32 %580, %3
  %582 = sext i32 %581 to i64
  %583 = getelementptr inbounds float, float* %2, i64 %582
  %584 = getelementptr inbounds float, float* %583, i64 -3
  %585 = bitcast float* %584 to <4 x i32>*
  %586 = load <4 x i32>, <4 x i32>* %585, align 4, !alias.scope !22
  %587 = shufflevector <4 x i32> %586, <4 x i32> undef, <4 x i32> <i32 3, i32 2, i32 1, i32 0>
  %588 = getelementptr inbounds float, float* %583, i64 -4
  %589 = getelementptr inbounds float, float* %588, i64 -3
  %590 = bitcast float* %589 to <4 x i32>*
  %591 = load <4 x i32>, <4 x i32>* %590, align 4, !alias.scope !22
  %592 = shufflevector <4 x i32> %591, <4 x i32> undef, <4 x i32> <i32 3, i32 2, i32 1, i32 0>
  %593 = getelementptr inbounds float, float* %5, i64 %576
  %594 = bitcast float* %593 to <4 x i32>*
  store <4 x i32> %587, <4 x i32>* %594, align 4, !alias.scope !25, !noalias !22
  %595 = getelementptr inbounds float, float* %593, i64 4
  %596 = bitcast float* %595 to <4 x i32>*
  store <4 x i32> %592, <4 x i32>* %596, align 4, !alias.scope !25, !noalias !22
  br label %597

597:                                              ; preds = %575, %578
  %598 = icmp eq i64 %523, %478
  br i1 %598, label %669, label %480

599:                                              ; preds = %348, %599
  %600 = phi i64 [ %644, %599 ], [ %349, %348 ]
  %601 = getelementptr inbounds float, float* %0, i64 %600
  %602 = bitcast float* %601 to i32*
  %603 = load i32, i32* %602, align 4
  %604 = trunc i64 %600 to i32
  %605 = add nsw i32 %604, %4
  %606 = sext i32 %605 to i64
  %607 = getelementptr inbounds float, float* %21, i64 %606
  %608 = bitcast float* %607 to i32*
  store i32 %603, i32* %608, align 4
  %609 = getelementptr inbounds float, float* %2, i64 %600
  %610 = bitcast float* %609 to i32*
  store i32 %603, i32* %610, align 4
  %611 = add nuw nsw i64 %600, 1
  %612 = getelementptr inbounds float, float* %0, i64 %611
  %613 = bitcast float* %612 to i32*
  %614 = load i32, i32* %613, align 4
  %615 = trunc i64 %611 to i32
  %616 = add nsw i32 %615, %4
  %617 = sext i32 %616 to i64
  %618 = getelementptr inbounds float, float* %21, i64 %617
  %619 = bitcast float* %618 to i32*
  store i32 %614, i32* %619, align 4
  %620 = getelementptr inbounds float, float* %2, i64 %611
  %621 = bitcast float* %620 to i32*
  store i32 %614, i32* %621, align 4
  %622 = add nuw nsw i64 %600, 2
  %623 = getelementptr inbounds float, float* %0, i64 %622
  %624 = bitcast float* %623 to i32*
  %625 = load i32, i32* %624, align 4
  %626 = trunc i64 %622 to i32
  %627 = add nsw i32 %626, %4
  %628 = sext i32 %627 to i64
  %629 = getelementptr inbounds float, float* %21, i64 %628
  %630 = bitcast float* %629 to i32*
  store i32 %625, i32* %630, align 4
  %631 = getelementptr inbounds float, float* %2, i64 %622
  %632 = bitcast float* %631 to i32*
  store i32 %625, i32* %632, align 4
  %633 = add nuw nsw i64 %600, 3
  %634 = getelementptr inbounds float, float* %0, i64 %633
  %635 = bitcast float* %634 to i32*
  %636 = load i32, i32* %635, align 4
  %637 = trunc i64 %633 to i32
  %638 = add nsw i32 %637, %4
  %639 = sext i32 %638 to i64
  %640 = getelementptr inbounds float, float* %21, i64 %639
  %641 = bitcast float* %640 to i32*
  store i32 %636, i32* %641, align 4
  %642 = getelementptr inbounds float, float* %2, i64 %633
  %643 = bitcast float* %642 to i32*
  store i32 %636, i32* %643, align 4
  %644 = add nuw nsw i64 %600, 4
  %645 = icmp eq i64 %644, %325
  br i1 %645, label %476, label %599

646:                                              ; preds = %497, %646
  %647 = phi i64 [ %666, %646 ], [ %498, %497 ]
  %648 = phi i32 [ %667, %646 ], [ %499, %497 ]
  %649 = xor i32 %648, -1
  %650 = add i32 %649, %3
  %651 = sext i32 %650 to i64
  %652 = getelementptr inbounds float, float* %2, i64 %651
  %653 = bitcast float* %652 to i32*
  %654 = load i32, i32* %653, align 4
  %655 = getelementptr inbounds float, float* %5, i64 %647
  %656 = bitcast float* %655 to i32*
  store i32 %654, i32* %656, align 4
  %657 = add nuw nsw i64 %647, 1
  %658 = sub i32 -2, %648
  %659 = add i32 %658, %3
  %660 = sext i32 %659 to i64
  %661 = getelementptr inbounds float, float* %2, i64 %660
  %662 = bitcast float* %661 to i32*
  %663 = load i32, i32* %662, align 4
  %664 = getelementptr inbounds float, float* %5, i64 %657
  %665 = bitcast float* %664 to i32*
  store i32 %663, i32* %665, align 4
  %666 = add nuw nsw i64 %647, 2
  %667 = add nuw nsw i32 %648, 2
  %668 = icmp eq i64 %666, %478
  br i1 %668, label %669, label %646, !llvm.loop !28

669:                                              ; preds = %497, %646, %597, %476
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @_celt_autocorr(float*, float*, float* nocapture readonly, i32, i32, i32, i32) local_unnamed_addr #0 {
  %8 = bitcast float* %0 to i8*
  %9 = sub i32 %5, %4
  %10 = sext i32 %5 to i64
  %11 = shl nsw i64 %10, 2
  %12 = alloca float, i64 %10, align 16
  %13 = bitcast float* %12 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %13, i8 -86, i64 %11, i1 false)
  %14 = icmp sgt i32 %5, 0
  br i1 %14, label %16, label %15

15:                                               ; preds = %7
  tail call void @celt_fatal(i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.3, i64 0, i64 0), i8* getelementptr inbounds ([43 x i8], [43 x i8]* @.str.1, i64 0, i64 0), i32 272) #4
  unreachable

16:                                               ; preds = %7
  %17 = icmp sgt i32 %3, -1
  br i1 %17, label %19, label %18

18:                                               ; preds = %16
  tail call void @celt_fatal(i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.4, i64 0, i64 0), i8* getelementptr inbounds ([43 x i8], [43 x i8]* @.str.1, i64 0, i64 0), i32 273) #4
  unreachable

19:                                               ; preds = %16
  %20 = icmp eq i32 %3, 0
  br i1 %20, label %82, label %21

21:                                               ; preds = %19
  %22 = zext i32 %5 to i64
  %23 = shl nuw nsw i64 %22, 2
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 16 %13, i8* align 4 %8, i64 %23, i1 false)
  %24 = zext i32 %3 to i64
  %25 = and i64 %24, 1
  %26 = icmp eq i32 %3, 1
  br i1 %26, label %64, label %27

27:                                               ; preds = %21
  %28 = sub nsw i64 %24, %25
  br label %29

29:                                               ; preds = %29, %27
  %30 = phi i64 [ 0, %27 ], [ %61, %29 ]
  %31 = phi i64 [ %28, %27 ], [ %62, %29 ]
  %32 = getelementptr inbounds float, float* %0, i64 %30
  %33 = load float, float* %32, align 4
  %34 = getelementptr inbounds float, float* %2, i64 %30
  %35 = load float, float* %34, align 4
  %36 = fmul float %33, %35
  %37 = getelementptr inbounds float, float* %12, i64 %30
  store float %36, float* %37, align 8
  %38 = trunc i64 %30 to i32
  %39 = xor i32 %38, -1
  %40 = add i32 %39, %5
  %41 = sext i32 %40 to i64
  %42 = getelementptr inbounds float, float* %0, i64 %41
  %43 = load float, float* %42, align 4
  %44 = fmul float %35, %43
  %45 = getelementptr inbounds float, float* %12, i64 %41
  store float %44, float* %45, align 4
  %46 = or i64 %30, 1
  %47 = getelementptr inbounds float, float* %0, i64 %46
  %48 = load float, float* %47, align 4
  %49 = getelementptr inbounds float, float* %2, i64 %46
  %50 = load float, float* %49, align 4
  %51 = fmul float %48, %50
  %52 = getelementptr inbounds float, float* %12, i64 %46
  store float %51, float* %52, align 4
  %53 = trunc i64 %46 to i32
  %54 = xor i32 %53, -1
  %55 = add i32 %54, %5
  %56 = sext i32 %55 to i64
  %57 = getelementptr inbounds float, float* %0, i64 %56
  %58 = load float, float* %57, align 4
  %59 = fmul float %50, %58
  %60 = getelementptr inbounds float, float* %12, i64 %56
  store float %59, float* %60, align 4
  %61 = add nuw nsw i64 %30, 2
  %62 = add i64 %31, -2
  %63 = icmp eq i64 %62, 0
  br i1 %63, label %64, label %29

64:                                               ; preds = %29, %21
  %65 = phi i64 [ 0, %21 ], [ %61, %29 ]
  %66 = icmp eq i64 %25, 0
  br i1 %66, label %82, label %67

67:                                               ; preds = %64
  %68 = getelementptr inbounds float, float* %0, i64 %65
  %69 = load float, float* %68, align 4
  %70 = getelementptr inbounds float, float* %2, i64 %65
  %71 = load float, float* %70, align 4
  %72 = fmul float %69, %71
  %73 = getelementptr inbounds float, float* %12, i64 %65
  store float %72, float* %73, align 4
  %74 = trunc i64 %65 to i32
  %75 = xor i32 %74, -1
  %76 = add i32 %75, %5
  %77 = sext i32 %76 to i64
  %78 = getelementptr inbounds float, float* %0, i64 %77
  %79 = load float, float* %78, align 4
  %80 = fmul float %71, %79
  %81 = getelementptr inbounds float, float* %12, i64 %77
  store float %80, float* %81, align 4
  br label %82

82:                                               ; preds = %67, %64, %19
  %83 = phi float* [ %0, %19 ], [ %12, %64 ], [ %12, %67 ]
  %84 = add i32 %4, 1
  call void @celt_pitch_xcorr_c(float* %83, float* %83, float* %1, i32 %9, i32 %84, i32 %6) #5
  %85 = icmp slt i32 %4, 0
  br i1 %85, label %167, label %86

86:                                               ; preds = %82
  %87 = zext i32 %84 to i64
  br label %88

88:                                               ; preds = %159, %86
  %89 = phi i64 [ 0, %86 ], [ %164, %159 ]
  %90 = phi i32 [ %9, %86 ], [ %165, %159 ]
  %91 = trunc i64 %89 to i32
  %92 = xor i32 %91, -1
  %93 = add i32 %92, %4
  %94 = trunc i64 %89 to i32
  %95 = add nsw i32 %9, %94
  %96 = icmp slt i32 %95, %5
  br i1 %96, label %97, label %159

97:                                               ; preds = %88
  %98 = trunc i64 %89 to i32
  %99 = sub i32 %4, %98
  %100 = sext i32 %90 to i64
  %101 = and i32 %99, 3
  %102 = icmp eq i32 %101, 0
  br i1 %102, label %117, label %103

103:                                              ; preds = %97, %103
  %104 = phi i64 [ %114, %103 ], [ %100, %97 ]
  %105 = phi float [ %113, %103 ], [ 0.000000e+00, %97 ]
  %106 = phi i32 [ %115, %103 ], [ %101, %97 ]
  %107 = getelementptr inbounds float, float* %83, i64 %104
  %108 = load float, float* %107, align 4
  %109 = sub nsw i64 %104, %89
  %110 = getelementptr inbounds float, float* %83, i64 %109
  %111 = load float, float* %110, align 4
  %112 = fmul float %108, %111
  %113 = fadd float %105, %112
  %114 = add nsw i64 %104, 1
  %115 = add i32 %106, -1
  %116 = icmp eq i32 %115, 0
  br i1 %116, label %117, label %103, !llvm.loop !29

117:                                              ; preds = %103, %97
  %118 = phi float [ undef, %97 ], [ %113, %103 ]
  %119 = phi i64 [ %100, %97 ], [ %114, %103 ]
  %120 = phi float [ 0.000000e+00, %97 ], [ %113, %103 ]
  %121 = icmp ult i32 %93, 3
  br i1 %121, label %159, label %122

122:                                              ; preds = %117, %122
  %123 = phi i64 [ %156, %122 ], [ %119, %117 ]
  %124 = phi float [ %155, %122 ], [ %120, %117 ]
  %125 = getelementptr inbounds float, float* %83, i64 %123
  %126 = load float, float* %125, align 4
  %127 = sub nsw i64 %123, %89
  %128 = getelementptr inbounds float, float* %83, i64 %127
  %129 = load float, float* %128, align 4
  %130 = fmul float %126, %129
  %131 = fadd float %124, %130
  %132 = add nsw i64 %123, 1
  %133 = getelementptr inbounds float, float* %83, i64 %132
  %134 = load float, float* %133, align 4
  %135 = sub nsw i64 %132, %89
  %136 = getelementptr inbounds float, float* %83, i64 %135
  %137 = load float, float* %136, align 4
  %138 = fmul float %134, %137
  %139 = fadd float %131, %138
  %140 = add nsw i64 %123, 2
  %141 = getelementptr inbounds float, float* %83, i64 %140
  %142 = load float, float* %141, align 4
  %143 = sub nsw i64 %140, %89
  %144 = getelementptr inbounds float, float* %83, i64 %143
  %145 = load float, float* %144, align 4
  %146 = fmul float %142, %145
  %147 = fadd float %139, %146
  %148 = add nsw i64 %123, 3
  %149 = getelementptr inbounds float, float* %83, i64 %148
  %150 = load float, float* %149, align 4
  %151 = sub nsw i64 %148, %89
  %152 = getelementptr inbounds float, float* %83, i64 %151
  %153 = load float, float* %152, align 4
  %154 = fmul float %150, %153
  %155 = fadd float %147, %154
  %156 = add nsw i64 %123, 4
  %157 = trunc i64 %156 to i32
  %158 = icmp eq i32 %157, %5
  br i1 %158, label %159, label %122

159:                                              ; preds = %117, %122, %88
  %160 = phi float [ 0.000000e+00, %88 ], [ %118, %117 ], [ %155, %122 ]
  %161 = getelementptr inbounds float, float* %1, i64 %89
  %162 = load float, float* %161, align 4
  %163 = fadd float %160, %162
  store float %163, float* %161, align 4
  %164 = add nuw nsw i64 %89, 1
  %165 = add i32 %90, 1
  %166 = icmp eq i64 %164, %87
  br i1 %166, label %167, label %88

167:                                              ; preds = %159, %82
  ret i32 0
}

declare void @celt_pitch_xcorr_c(float*, float*, float*, i32, i32, i32) local_unnamed_addr #3

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #1

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { noreturn nounwind }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = distinct !{!2, !3}
!3 = !{!"llvm.loop.unroll.disable"}
!4 = distinct !{!4, !5}
!5 = !{!"llvm.loop.isvectorized", i32 1}
!6 = distinct !{!6, !5}
!7 = distinct !{!7, !3}
!8 = !{!9}
!9 = distinct !{!9, !10}
!10 = distinct !{!10, !"LVerDomain"}
!11 = !{!12}
!12 = distinct !{!12, !10}
!13 = distinct !{!13, !5}
!14 = distinct !{!14, !3}
!15 = distinct !{!15, !5}
!16 = distinct !{!16, !5}
!17 = distinct !{!17, !5}
!18 = distinct !{!18, !5}
!19 = distinct !{!19, !5}
!20 = distinct !{!20, !3}
!21 = distinct !{!21, !3}
!22 = !{!23}
!23 = distinct !{!23, !24}
!24 = distinct !{!24, !"LVerDomain"}
!25 = !{!26}
!26 = distinct !{!26, !24}
!27 = distinct !{!27, !5}
!28 = distinct !{!28, !5}
!29 = distinct !{!29, !3}
