; ModuleID = '../../third_party/libzip/src/lib/zip_utf-8.c'
source_filename = "../../third_party/libzip/src/lib/zip_utf-8.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.zip_string = type { i8*, i16, i32, i8*, i32 }
%struct.zip_error = type { i32, i32, i8* }

@_cp437_to_unicode = internal unnamed_addr constant [256 x i16] [i16 0, i16 9786, i16 9787, i16 9829, i16 9830, i16 9827, i16 9824, i16 8226, i16 9688, i16 9675, i16 9689, i16 9794, i16 9792, i16 9834, i16 9835, i16 9788, i16 9658, i16 9668, i16 8597, i16 8252, i16 182, i16 167, i16 9644, i16 8616, i16 8593, i16 8595, i16 8594, i16 8592, i16 8735, i16 8596, i16 9650, i16 9660, i16 32, i16 33, i16 34, i16 35, i16 36, i16 37, i16 38, i16 39, i16 40, i16 41, i16 42, i16 43, i16 44, i16 45, i16 46, i16 47, i16 48, i16 49, i16 50, i16 51, i16 52, i16 53, i16 54, i16 55, i16 56, i16 57, i16 58, i16 59, i16 60, i16 61, i16 62, i16 63, i16 64, i16 65, i16 66, i16 67, i16 68, i16 69, i16 70, i16 71, i16 72, i16 73, i16 74, i16 75, i16 76, i16 77, i16 78, i16 79, i16 80, i16 81, i16 82, i16 83, i16 84, i16 85, i16 86, i16 87, i16 88, i16 89, i16 90, i16 91, i16 92, i16 93, i16 94, i16 95, i16 96, i16 97, i16 98, i16 99, i16 100, i16 101, i16 102, i16 103, i16 104, i16 105, i16 106, i16 107, i16 108, i16 109, i16 110, i16 111, i16 112, i16 113, i16 114, i16 115, i16 116, i16 117, i16 118, i16 119, i16 120, i16 121, i16 122, i16 123, i16 124, i16 125, i16 126, i16 8962, i16 199, i16 252, i16 233, i16 226, i16 228, i16 224, i16 229, i16 231, i16 234, i16 235, i16 232, i16 239, i16 238, i16 236, i16 196, i16 197, i16 201, i16 230, i16 198, i16 244, i16 246, i16 242, i16 251, i16 249, i16 255, i16 214, i16 220, i16 162, i16 163, i16 165, i16 8359, i16 402, i16 225, i16 237, i16 243, i16 250, i16 241, i16 209, i16 170, i16 186, i16 191, i16 8976, i16 172, i16 189, i16 188, i16 161, i16 171, i16 187, i16 9617, i16 9618, i16 9619, i16 9474, i16 9508, i16 9569, i16 9570, i16 9558, i16 9557, i16 9571, i16 9553, i16 9559, i16 9565, i16 9564, i16 9563, i16 9488, i16 9492, i16 9524, i16 9516, i16 9500, i16 9472, i16 9532, i16 9566, i16 9567, i16 9562, i16 9556, i16 9577, i16 9574, i16 9568, i16 9552, i16 9580, i16 9575, i16 9576, i16 9572, i16 9573, i16 9561, i16 9560, i16 9554, i16 9555, i16 9579, i16 9578, i16 9496, i16 9484, i16 9608, i16 9604, i16 9612, i16 9616, i16 9600, i16 945, i16 223, i16 915, i16 960, i16 931, i16 963, i16 181, i16 964, i16 934, i16 920, i16 937, i16 948, i16 8734, i16 966, i16 949, i16 8745, i16 8801, i16 177, i16 8805, i16 8804, i16 8992, i16 8993, i16 247, i16 8776, i16 176, i16 8729, i16 183, i16 8730, i16 8319, i16 178, i16 9632, i16 160], align 16

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden i32 @_zip_guess_encoding(%struct.zip_string*, i32) local_unnamed_addr #0 {
  %3 = icmp eq %struct.zip_string* %0, null
  br i1 %3, label %69, label %4

4:                                                ; preds = %2
  %5 = getelementptr inbounds %struct.zip_string, %struct.zip_string* %0, i64 0, i32 0
  %6 = load i8*, i8** %5, align 8
  %7 = getelementptr inbounds %struct.zip_string, %struct.zip_string* %0, i64 0, i32 2
  %8 = load i32, i32* %7, align 4
  %9 = icmp eq i32 %8, 0
  br i1 %9, label %10, label %54

10:                                               ; preds = %4
  %11 = getelementptr inbounds %struct.zip_string, %struct.zip_string* %0, i64 0, i32 1
  %12 = load i16, i16* %11, align 8
  %13 = zext i16 %12 to i32
  %14 = icmp eq i16 %12, 0
  br i1 %14, label %54, label %15

15:                                               ; preds = %10, %49
  %16 = phi i32 [ %52, %49 ], [ 0, %10 ]
  %17 = phi i32 [ %50, %49 ], [ 1, %10 ]
  %18 = zext i32 %16 to i64
  %19 = getelementptr inbounds i8, i8* %6, i64 %18
  %20 = load i8, i8* %19, align 1
  %21 = icmp ugt i8 %20, 31
  %22 = icmp sgt i8 %20, -1
  %23 = and i1 %21, %22
  br i1 %23, label %49, label %24

24:                                               ; preds = %15
  %25 = zext i8 %20 to i32
  switch i8 %20, label %26 [
    i8 13, label %49
    i8 10, label %49
    i8 9, label %49
  ]

26:                                               ; preds = %24
  %27 = and i32 %25, 224
  %28 = icmp eq i32 %27, 192
  br i1 %28, label %35, label %29

29:                                               ; preds = %26
  %30 = and i32 %25, 240
  %31 = icmp eq i32 %30, 224
  br i1 %31, label %35, label %32

32:                                               ; preds = %29
  %33 = and i32 %25, 248
  %34 = icmp eq i32 %33, 240
  br i1 %34, label %35, label %54

35:                                               ; preds = %32, %29, %26
  %36 = phi i32 [ 1, %26 ], [ 2, %29 ], [ 3, %32 ]
  %37 = add i32 %36, %16
  %38 = icmp ult i32 %37, %13
  br i1 %38, label %39, label %54

39:                                               ; preds = %35
  %40 = add nuw nsw i32 %36, 1
  %41 = add i32 %16, 1
  %42 = zext i32 %41 to i64
  %43 = getelementptr inbounds i8, i8* %6, i64 %42
  %44 = load i8, i8* %43, align 1
  %45 = and i8 %44, -64
  %46 = icmp eq i8 %45, -128
  br i1 %46, label %47, label %54

47:                                               ; preds = %39
  %48 = icmp eq i32 %40, 2
  br i1 %48, label %49, label %71

49:                                               ; preds = %80, %47, %78, %24, %24, %24, %15
  %50 = phi i32 [ %17, %24 ], [ %17, %15 ], [ %17, %24 ], [ %17, %24 ], [ 3, %78 ], [ 3, %47 ], [ 3, %80 ]
  %51 = phi i32 [ %16, %24 ], [ %16, %15 ], [ %16, %24 ], [ %16, %24 ], [ %37, %78 ], [ %37, %47 ], [ %37, %80 ]
  %52 = add i32 %51, 1
  %53 = icmp ult i32 %52, %13
  br i1 %53, label %15, label %54

54:                                               ; preds = %49, %32, %35, %39, %71, %80, %10, %4
  %55 = phi i32 [ %8, %4 ], [ 1, %10 ], [ 4, %80 ], [ 4, %71 ], [ 4, %39 ], [ %50, %49 ], [ 4, %32 ], [ 4, %35 ]
  store i32 %55, i32* %7, align 4
  %56 = icmp eq i32 %1, 0
  br i1 %56, label %67, label %57

57:                                               ; preds = %54
  %58 = icmp eq i32 %1, 2
  %59 = icmp eq i32 %55, 3
  %60 = and i1 %58, %59
  br i1 %60, label %61, label %62

61:                                               ; preds = %57
  store i32 2, i32* %7, align 4
  br label %62

62:                                               ; preds = %61, %57
  %63 = phi i32 [ 2, %61 ], [ %55, %57 ]
  %64 = icmp ne i32 %63, %1
  %65 = icmp ne i32 %63, 1
  %66 = and i1 %64, %65
  br i1 %66, label %69, label %67

67:                                               ; preds = %54, %62
  %68 = phi i32 [ %63, %62 ], [ %55, %54 ]
  br label %69

69:                                               ; preds = %62, %2, %67
  %70 = phi i32 [ %68, %67 ], [ 1, %2 ], [ 5, %62 ]
  ret i32 %70

71:                                               ; preds = %47
  %72 = add i32 %16, 2
  %73 = zext i32 %72 to i64
  %74 = getelementptr inbounds i8, i8* %6, i64 %73
  %75 = load i8, i8* %74, align 1
  %76 = and i8 %75, -64
  %77 = icmp eq i8 %76, -128
  br i1 %77, label %78, label %54

78:                                               ; preds = %71
  %79 = icmp eq i32 %40, 3
  br i1 %79, label %49, label %80

80:                                               ; preds = %78
  %81 = add i32 %16, 3
  %82 = zext i32 %81 to i64
  %83 = getelementptr inbounds i8, i8* %6, i64 %82
  %84 = load i8, i8* %83, align 1
  %85 = and i8 %84, -64
  %86 = icmp eq i8 %85, -128
  br i1 %86, label %49, label %54
}

; Function Attrs: nounwind ssp uwtable
define hidden noalias i8* @_zip_cp437_to_utf8(i8* nocapture readonly, i32, i32*, %struct.zip_error*) local_unnamed_addr #1 {
  %5 = icmp eq i32 %1, 0
  br i1 %5, label %12, label %6

6:                                                ; preds = %4
  %7 = zext i32 %1 to i64
  %8 = and i64 %7, 1
  %9 = icmp eq i32 %1, 1
  br i1 %9, label %43, label %10

10:                                               ; preds = %6
  %11 = sub nsw i64 %7, %8
  br label %15

12:                                               ; preds = %4
  %13 = icmp eq i32* %2, null
  br i1 %13, label %115, label %14

14:                                               ; preds = %12
  store i32 0, i32* %2, align 4
  br label %115

15:                                               ; preds = %15, %10
  %16 = phi i64 [ 0, %10 ], [ %40, %15 ]
  %17 = phi i32 [ 1, %10 ], [ %39, %15 ]
  %18 = phi i64 [ %11, %10 ], [ %41, %15 ]
  %19 = getelementptr inbounds i8, i8* %0, i64 %16
  %20 = load i8, i8* %19, align 1
  %21 = zext i8 %20 to i64
  %22 = getelementptr inbounds [256 x i16], [256 x i16]* @_cp437_to_unicode, i64 0, i64 %21
  %23 = load i16, i16* %22, align 2
  %24 = icmp ult i16 %23, 128
  %25 = icmp ult i16 %23, 2048
  %26 = select i1 %25, i32 2, i32 3
  %27 = select i1 %24, i32 1, i32 %26
  %28 = add i32 %27, %17
  %29 = or i64 %16, 1
  %30 = getelementptr inbounds i8, i8* %0, i64 %29
  %31 = load i8, i8* %30, align 1
  %32 = zext i8 %31 to i64
  %33 = getelementptr inbounds [256 x i16], [256 x i16]* @_cp437_to_unicode, i64 0, i64 %32
  %34 = load i16, i16* %33, align 2
  %35 = icmp ult i16 %34, 128
  %36 = icmp ult i16 %34, 2048
  %37 = select i1 %36, i32 2, i32 3
  %38 = select i1 %35, i32 1, i32 %37
  %39 = add i32 %38, %28
  %40 = add nuw nsw i64 %16, 2
  %41 = add i64 %18, -2
  %42 = icmp eq i64 %41, 0
  br i1 %42, label %43, label %15

43:                                               ; preds = %15, %6
  %44 = phi i32 [ undef, %6 ], [ %39, %15 ]
  %45 = phi i64 [ 0, %6 ], [ %40, %15 ]
  %46 = phi i32 [ 1, %6 ], [ %39, %15 ]
  %47 = icmp eq i64 %8, 0
  br i1 %47, label %59, label %48

48:                                               ; preds = %43
  %49 = getelementptr inbounds i8, i8* %0, i64 %45
  %50 = load i8, i8* %49, align 1
  %51 = zext i8 %50 to i64
  %52 = getelementptr inbounds [256 x i16], [256 x i16]* @_cp437_to_unicode, i64 0, i64 %51
  %53 = load i16, i16* %52, align 2
  %54 = icmp ult i16 %53, 128
  %55 = icmp ult i16 %53, 2048
  %56 = select i1 %55, i32 2, i32 3
  %57 = select i1 %54, i32 1, i32 %56
  %58 = add i32 %57, %46
  br label %59

59:                                               ; preds = %43, %48
  %60 = phi i32 [ %44, %43 ], [ %58, %48 ]
  %61 = zext i32 %60 to i64
  %62 = tail call noalias i8* @malloc(i64 %61) #4
  %63 = icmp eq i8* %62, null
  br i1 %63, label %66, label %64

64:                                               ; preds = %59
  %65 = zext i32 %1 to i64
  br label %67

66:                                               ; preds = %59
  tail call void @zip_error_set(%struct.zip_error* %3, i32 14, i32 0) #4
  br label %115

67:                                               ; preds = %104, %64
  %68 = phi i64 [ 0, %64 ], [ %107, %104 ]
  %69 = phi i32 [ 0, %64 ], [ %106, %104 ]
  %70 = getelementptr inbounds i8, i8* %0, i64 %68
  %71 = load i8, i8* %70, align 1
  %72 = zext i8 %71 to i64
  %73 = getelementptr inbounds [256 x i16], [256 x i16]* @_cp437_to_unicode, i64 0, i64 %72
  %74 = load i16, i16* %73, align 2
  %75 = zext i32 %69 to i64
  %76 = getelementptr inbounds i8, i8* %62, i64 %75
  %77 = icmp ult i16 %74, 128
  br i1 %77, label %78, label %80

78:                                               ; preds = %67
  %79 = trunc i16 %74 to i8
  store i8 %79, i8* %76, align 1
  br label %104

80:                                               ; preds = %67
  %81 = icmp ult i16 %74, 2048
  br i1 %81, label %82, label %91

82:                                               ; preds = %80
  %83 = lshr i16 %74, 6
  %84 = trunc i16 %83 to i8
  %85 = and i8 %84, 31
  %86 = or i8 %85, -64
  store i8 %86, i8* %76, align 1
  %87 = trunc i16 %74 to i8
  %88 = and i8 %87, 63
  %89 = or i8 %88, -128
  %90 = getelementptr inbounds i8, i8* %76, i64 1
  store i8 %89, i8* %90, align 1
  br label %104

91:                                               ; preds = %80
  %92 = lshr i16 %74, 12
  %93 = trunc i16 %92 to i8
  %94 = or i8 %93, -32
  store i8 %94, i8* %76, align 1
  %95 = lshr i16 %74, 6
  %96 = trunc i16 %95 to i8
  %97 = and i8 %96, 63
  %98 = or i8 %97, -128
  %99 = getelementptr inbounds i8, i8* %76, i64 1
  store i8 %98, i8* %99, align 1
  %100 = trunc i16 %74 to i8
  %101 = and i8 %100, 63
  %102 = or i8 %101, -128
  %103 = getelementptr inbounds i8, i8* %76, i64 2
  store i8 %102, i8* %103, align 1
  br label %104

104:                                              ; preds = %78, %82, %91
  %105 = phi i32 [ 1, %78 ], [ 2, %82 ], [ 3, %91 ]
  %106 = add i32 %105, %69
  %107 = add nuw nsw i64 %68, 1
  %108 = icmp eq i64 %107, %65
  br i1 %108, label %109, label %67

109:                                              ; preds = %104
  %110 = add i32 %60, -1
  %111 = zext i32 %110 to i64
  %112 = getelementptr inbounds i8, i8* %62, i64 %111
  store i8 0, i8* %112, align 1
  %113 = icmp eq i32* %2, null
  br i1 %113, label %115, label %114

114:                                              ; preds = %109
  store i32 %110, i32* %2, align 4
  br label %115

115:                                              ; preds = %114, %109, %14, %12, %66
  %116 = phi i8* [ null, %66 ], [ null, %12 ], [ null, %14 ], [ %62, %109 ], [ %62, %114 ]
  ret i8* %116
}

; Function Attrs: nofree nounwind
declare noalias i8* @malloc(i64) local_unnamed_addr #2

declare void @zip_error_set(%struct.zip_error*, i32, i32) local_unnamed_addr #3

attributes #0 = { nofree norecurse nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
