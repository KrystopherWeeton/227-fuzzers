; ModuleID = '../../third_party/libvpx/source/libvpx/vp8/common/idctllm.c'
source_filename = "../../third_party/libvpx/source/libvpx/vp8/common/idctllm.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

; Function Attrs: nounwind ssp uwtable
define hidden void @vp8_short_idct4x4llm_c(i16* nocapture readonly, i8* nocapture readonly, i32, i8* nocapture, i32) local_unnamed_addr #0 {
  %6 = alloca [16 x i16], align 16
  %7 = bitcast [16 x i16]* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %7) #3
  %8 = getelementptr inbounds [16 x i16], [16 x i16]* %6, i64 0, i64 0
  %9 = bitcast [16 x i16]* %6 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %9, i8 -86, i64 32, i1 false)
  %10 = load i16, i16* %0, align 2
  %11 = sext i16 %10 to i32
  %12 = getelementptr inbounds i16, i16* %0, i64 8
  %13 = load i16, i16* %12, align 2
  %14 = sext i16 %13 to i32
  %15 = add nsw i32 %14, %11
  %16 = sub nsw i32 %11, %14
  %17 = getelementptr inbounds i16, i16* %0, i64 4
  %18 = load i16, i16* %17, align 2
  %19 = sext i16 %18 to i32
  %20 = mul nsw i32 %19, 35468
  %21 = ashr i32 %20, 16
  %22 = getelementptr inbounds i16, i16* %0, i64 12
  %23 = load i16, i16* %22, align 2
  %24 = sext i16 %23 to i32
  %25 = mul nsw i32 %24, 20091
  %26 = ashr i32 %25, 16
  %27 = sub nsw i32 %21, %24
  %28 = sub nsw i32 %27, %26
  %29 = mul nsw i32 %19, 20091
  %30 = ashr i32 %29, 16
  %31 = add nsw i32 %30, %19
  %32 = mul nsw i32 %24, 35468
  %33 = ashr i32 %32, 16
  %34 = add nsw i32 %31, %33
  %35 = add nsw i32 %34, %15
  %36 = trunc i32 %35 to i16
  store i16 %36, i16* %8, align 16
  %37 = sub nsw i32 %15, %34
  %38 = trunc i32 %37 to i16
  %39 = getelementptr inbounds [16 x i16], [16 x i16]* %6, i64 0, i64 12
  store i16 %38, i16* %39, align 8
  %40 = add nsw i32 %28, %16
  %41 = trunc i32 %40 to i16
  %42 = getelementptr inbounds [16 x i16], [16 x i16]* %6, i64 0, i64 4
  store i16 %41, i16* %42, align 8
  %43 = sub nsw i32 %16, %28
  %44 = trunc i32 %43 to i16
  %45 = getelementptr inbounds [16 x i16], [16 x i16]* %6, i64 0, i64 8
  store i16 %44, i16* %45, align 16
  %46 = getelementptr inbounds i16, i16* %0, i64 1
  %47 = getelementptr inbounds [16 x i16], [16 x i16]* %6, i64 0, i64 1
  %48 = load i16, i16* %46, align 2
  %49 = sext i16 %48 to i32
  %50 = getelementptr inbounds i16, i16* %0, i64 9
  %51 = load i16, i16* %50, align 2
  %52 = sext i16 %51 to i32
  %53 = add nsw i32 %52, %49
  %54 = sub nsw i32 %49, %52
  %55 = getelementptr inbounds i16, i16* %0, i64 5
  %56 = load i16, i16* %55, align 2
  %57 = sext i16 %56 to i32
  %58 = mul nsw i32 %57, 35468
  %59 = ashr i32 %58, 16
  %60 = getelementptr inbounds i16, i16* %0, i64 13
  %61 = load i16, i16* %60, align 2
  %62 = sext i16 %61 to i32
  %63 = mul nsw i32 %62, 20091
  %64 = ashr i32 %63, 16
  %65 = sub nsw i32 %59, %62
  %66 = sub nsw i32 %65, %64
  %67 = mul nsw i32 %57, 20091
  %68 = ashr i32 %67, 16
  %69 = add nsw i32 %68, %57
  %70 = mul nsw i32 %62, 35468
  %71 = ashr i32 %70, 16
  %72 = add nsw i32 %69, %71
  %73 = add nsw i32 %72, %53
  %74 = trunc i32 %73 to i16
  store i16 %74, i16* %47, align 2
  %75 = sub nsw i32 %53, %72
  %76 = trunc i32 %75 to i16
  %77 = getelementptr inbounds [16 x i16], [16 x i16]* %6, i64 0, i64 13
  store i16 %76, i16* %77, align 2
  %78 = add nsw i32 %66, %54
  %79 = trunc i32 %78 to i16
  %80 = getelementptr inbounds [16 x i16], [16 x i16]* %6, i64 0, i64 5
  store i16 %79, i16* %80, align 2
  %81 = sub nsw i32 %54, %66
  %82 = trunc i32 %81 to i16
  %83 = getelementptr inbounds [16 x i16], [16 x i16]* %6, i64 0, i64 9
  store i16 %82, i16* %83, align 2
  %84 = getelementptr inbounds i16, i16* %0, i64 2
  %85 = load i16, i16* %84, align 2
  %86 = sext i16 %85 to i32
  %87 = getelementptr inbounds i16, i16* %0, i64 10
  %88 = load i16, i16* %87, align 2
  %89 = sext i16 %88 to i32
  %90 = add nsw i32 %89, %86
  %91 = sub nsw i32 %86, %89
  %92 = getelementptr inbounds i16, i16* %0, i64 6
  %93 = load i16, i16* %92, align 2
  %94 = sext i16 %93 to i32
  %95 = mul nsw i32 %94, 35468
  %96 = ashr i32 %95, 16
  %97 = getelementptr inbounds i16, i16* %0, i64 14
  %98 = load i16, i16* %97, align 2
  %99 = sext i16 %98 to i32
  %100 = mul nsw i32 %99, 20091
  %101 = ashr i32 %100, 16
  %102 = sub nsw i32 %96, %99
  %103 = sub nsw i32 %102, %101
  %104 = mul nsw i32 %94, 20091
  %105 = ashr i32 %104, 16
  %106 = add nsw i32 %105, %94
  %107 = mul nsw i32 %99, 35468
  %108 = ashr i32 %107, 16
  %109 = add nsw i32 %106, %108
  %110 = add nsw i32 %109, %90
  %111 = sub nsw i32 %90, %109
  %112 = trunc i32 %111 to i16
  %113 = getelementptr inbounds [16 x i16], [16 x i16]* %6, i64 0, i64 14
  store i16 %112, i16* %113, align 4
  %114 = add nsw i32 %103, %91
  %115 = trunc i32 %114 to i16
  %116 = getelementptr inbounds [16 x i16], [16 x i16]* %6, i64 0, i64 6
  store i16 %115, i16* %116, align 4
  %117 = sub nsw i32 %91, %103
  %118 = trunc i32 %117 to i16
  %119 = getelementptr inbounds [16 x i16], [16 x i16]* %6, i64 0, i64 10
  store i16 %118, i16* %119, align 4
  %120 = getelementptr inbounds i16, i16* %0, i64 3
  %121 = load i16, i16* %120, align 2
  %122 = sext i16 %121 to i32
  %123 = getelementptr inbounds i16, i16* %0, i64 11
  %124 = load i16, i16* %123, align 2
  %125 = sext i16 %124 to i32
  %126 = add nsw i32 %125, %122
  %127 = sub nsw i32 %122, %125
  %128 = getelementptr inbounds i16, i16* %0, i64 7
  %129 = load i16, i16* %128, align 2
  %130 = sext i16 %129 to i32
  %131 = mul nsw i32 %130, 35468
  %132 = ashr i32 %131, 16
  %133 = getelementptr inbounds i16, i16* %0, i64 15
  %134 = load i16, i16* %133, align 2
  %135 = sext i16 %134 to i32
  %136 = mul nsw i32 %135, 20091
  %137 = ashr i32 %136, 16
  %138 = sub nsw i32 %132, %135
  %139 = sub nsw i32 %138, %137
  %140 = mul nsw i32 %130, 20091
  %141 = ashr i32 %140, 16
  %142 = add nsw i32 %141, %130
  %143 = mul nsw i32 %135, 35468
  %144 = ashr i32 %143, 16
  %145 = add nsw i32 %142, %144
  %146 = add nsw i32 %145, %126
  %147 = sub nsw i32 %126, %145
  %148 = trunc i32 %147 to i16
  %149 = getelementptr inbounds [16 x i16], [16 x i16]* %6, i64 0, i64 15
  store i16 %148, i16* %149, align 2
  %150 = add nsw i32 %139, %127
  %151 = sub nsw i32 %127, %139
  %152 = trunc i32 %151 to i16
  %153 = getelementptr inbounds [16 x i16], [16 x i16]* %6, i64 0, i64 11
  store i16 %152, i16* %153, align 2
  %154 = load i16, i16* %8, align 16
  %155 = sext i16 %154 to i32
  %156 = getelementptr inbounds [16 x i16], [16 x i16]* %6, i64 0, i64 2
  %157 = shl i32 %110, 16
  %158 = ashr exact i32 %157, 16
  %159 = add nsw i32 %158, %155
  %160 = sub nsw i32 %155, %158
  %161 = load i16, i16* %47, align 2
  %162 = sext i16 %161 to i32
  %163 = mul nsw i32 %162, 35468
  %164 = ashr i32 %163, 16
  %165 = getelementptr inbounds [16 x i16], [16 x i16]* %6, i64 0, i64 3
  %166 = shl i32 %146, 16
  %167 = ashr exact i32 %166, 16
  %168 = mul nsw i32 %167, 20091
  %169 = ashr i32 %168, 16
  %170 = sub nsw i32 %164, %167
  %171 = sub nsw i32 %170, %169
  %172 = mul nsw i32 %162, 20091
  %173 = ashr i32 %172, 16
  %174 = add nsw i32 %173, %162
  %175 = mul nsw i32 %167, 35468
  %176 = ashr i32 %175, 16
  %177 = add nsw i32 %174, %176
  %178 = add nsw i32 %159, 4
  %179 = add nsw i32 %178, %177
  %180 = lshr i32 %179, 3
  %181 = trunc i32 %180 to i16
  store i16 %181, i16* %8, align 16
  %182 = sub nsw i32 %178, %177
  %183 = lshr i32 %182, 3
  %184 = trunc i32 %183 to i16
  store i16 %184, i16* %165, align 2
  %185 = add nsw i32 %160, 4
  %186 = add nsw i32 %185, %171
  %187 = lshr i32 %186, 3
  %188 = trunc i32 %187 to i16
  store i16 %188, i16* %47, align 2
  %189 = sub nsw i32 %185, %171
  %190 = lshr i32 %189, 3
  %191 = trunc i32 %190 to i16
  store i16 %191, i16* %156, align 4
  %192 = load i16, i16* %42, align 8
  %193 = sext i16 %192 to i32
  %194 = getelementptr inbounds [16 x i16], [16 x i16]* %6, i64 0, i64 6
  %195 = shl i32 %114, 16
  %196 = ashr exact i32 %195, 16
  %197 = add nsw i32 %196, %193
  %198 = sub nsw i32 %193, %196
  %199 = getelementptr inbounds [16 x i16], [16 x i16]* %6, i64 0, i64 5
  %200 = load i16, i16* %199, align 2
  %201 = sext i16 %200 to i32
  %202 = mul nsw i32 %201, 35468
  %203 = ashr i32 %202, 16
  %204 = getelementptr inbounds [16 x i16], [16 x i16]* %6, i64 0, i64 7
  %205 = shl i32 %150, 16
  %206 = ashr exact i32 %205, 16
  %207 = mul nsw i32 %206, 20091
  %208 = ashr i32 %207, 16
  %209 = sub nsw i32 %203, %206
  %210 = sub nsw i32 %209, %208
  %211 = mul nsw i32 %201, 20091
  %212 = ashr i32 %211, 16
  %213 = add nsw i32 %212, %201
  %214 = mul nsw i32 %206, 35468
  %215 = ashr i32 %214, 16
  %216 = add nsw i32 %213, %215
  %217 = add nsw i32 %197, 4
  %218 = add nsw i32 %217, %216
  %219 = lshr i32 %218, 3
  %220 = trunc i32 %219 to i16
  store i16 %220, i16* %42, align 8
  %221 = sub nsw i32 %217, %216
  %222 = lshr i32 %221, 3
  %223 = trunc i32 %222 to i16
  store i16 %223, i16* %204, align 2
  %224 = add nsw i32 %198, 4
  %225 = add nsw i32 %224, %210
  %226 = lshr i32 %225, 3
  %227 = trunc i32 %226 to i16
  store i16 %227, i16* %199, align 2
  %228 = sub nsw i32 %224, %210
  %229 = lshr i32 %228, 3
  %230 = trunc i32 %229 to i16
  store i16 %230, i16* %194, align 4
  %231 = getelementptr inbounds [16 x i16], [16 x i16]* %6, i64 0, i64 8
  %232 = load i16, i16* %231, align 16
  %233 = sext i16 %232 to i32
  %234 = getelementptr inbounds [16 x i16], [16 x i16]* %6, i64 0, i64 10
  %235 = load i16, i16* %234, align 4
  %236 = sext i16 %235 to i32
  %237 = add nsw i32 %236, %233
  %238 = sub nsw i32 %233, %236
  %239 = getelementptr inbounds [16 x i16], [16 x i16]* %6, i64 0, i64 9
  %240 = load i16, i16* %239, align 2
  %241 = sext i16 %240 to i32
  %242 = mul nsw i32 %241, 35468
  %243 = ashr i32 %242, 16
  %244 = getelementptr inbounds [16 x i16], [16 x i16]* %6, i64 0, i64 11
  %245 = shl i32 %151, 16
  %246 = ashr exact i32 %245, 16
  %247 = mul nsw i32 %246, 20091
  %248 = ashr i32 %247, 16
  %249 = sub nsw i32 %243, %246
  %250 = sub nsw i32 %249, %248
  %251 = mul nsw i32 %241, 20091
  %252 = ashr i32 %251, 16
  %253 = add nsw i32 %252, %241
  %254 = mul nsw i32 %246, 35468
  %255 = ashr i32 %254, 16
  %256 = add nsw i32 %253, %255
  %257 = add nsw i32 %237, 4
  %258 = add nsw i32 %257, %256
  %259 = lshr i32 %258, 3
  %260 = trunc i32 %259 to i16
  store i16 %260, i16* %231, align 16
  %261 = sub nsw i32 %257, %256
  %262 = lshr i32 %261, 3
  %263 = trunc i32 %262 to i16
  store i16 %263, i16* %244, align 2
  %264 = add nsw i32 %238, 4
  %265 = add nsw i32 %264, %250
  %266 = lshr i32 %265, 3
  %267 = trunc i32 %266 to i16
  store i16 %267, i16* %239, align 2
  %268 = sub nsw i32 %264, %250
  %269 = lshr i32 %268, 3
  %270 = trunc i32 %269 to i16
  store i16 %270, i16* %234, align 4
  %271 = getelementptr inbounds [16 x i16], [16 x i16]* %6, i64 0, i64 12
  %272 = load i16, i16* %271, align 8
  %273 = sext i16 %272 to i32
  %274 = getelementptr inbounds [16 x i16], [16 x i16]* %6, i64 0, i64 14
  %275 = load i16, i16* %274, align 4
  %276 = sext i16 %275 to i32
  %277 = add nsw i32 %276, %273
  %278 = sub nsw i32 %273, %276
  %279 = getelementptr inbounds [16 x i16], [16 x i16]* %6, i64 0, i64 13
  %280 = load i16, i16* %279, align 2
  %281 = sext i16 %280 to i32
  %282 = mul nsw i32 %281, 35468
  %283 = ashr i32 %282, 16
  %284 = getelementptr inbounds [16 x i16], [16 x i16]* %6, i64 0, i64 15
  %285 = load i16, i16* %284, align 2
  %286 = sext i16 %285 to i32
  %287 = mul nsw i32 %286, 20091
  %288 = ashr i32 %287, 16
  %289 = sub nsw i32 %283, %286
  %290 = sub nsw i32 %289, %288
  %291 = mul nsw i32 %281, 20091
  %292 = ashr i32 %291, 16
  %293 = add nsw i32 %292, %281
  %294 = mul nsw i32 %286, 35468
  %295 = ashr i32 %294, 16
  %296 = add nsw i32 %293, %295
  %297 = add nsw i32 %277, 4
  %298 = add nsw i32 %297, %296
  %299 = lshr i32 %298, 3
  %300 = trunc i32 %299 to i16
  store i16 %300, i16* %271, align 8
  %301 = sub nsw i32 %297, %296
  %302 = lshr i32 %301, 3
  %303 = trunc i32 %302 to i16
  store i16 %303, i16* %284, align 2
  %304 = add nsw i32 %278, 4
  %305 = add nsw i32 %304, %290
  %306 = lshr i32 %305, 3
  %307 = trunc i32 %306 to i16
  store i16 %307, i16* %279, align 2
  %308 = sub nsw i32 %304, %290
  %309 = lshr i32 %308, 3
  %310 = trunc i32 %309 to i16
  store i16 %310, i16* %274, align 4
  %311 = sext i32 %4 to i64
  %312 = sext i32 %2 to i64
  %313 = load i16, i16* %8, align 16
  %314 = sext i16 %313 to i32
  %315 = load i8, i8* %1, align 1
  %316 = zext i8 %315 to i32
  %317 = add nsw i32 %316, %314
  %318 = icmp sgt i32 %317, 0
  %319 = select i1 %318, i32 %317, i32 0
  %320 = icmp slt i32 %319, 255
  %321 = select i1 %320, i32 %319, i32 255
  %322 = trunc i32 %321 to i8
  store i8 %322, i8* %3, align 1
  %323 = load i16, i16* %47, align 2
  %324 = sext i16 %323 to i32
  %325 = getelementptr inbounds i8, i8* %1, i64 1
  %326 = load i8, i8* %325, align 1
  %327 = zext i8 %326 to i32
  %328 = add nsw i32 %327, %324
  %329 = icmp sgt i32 %328, 0
  %330 = select i1 %329, i32 %328, i32 0
  %331 = icmp slt i32 %330, 255
  %332 = select i1 %331, i32 %330, i32 255
  %333 = trunc i32 %332 to i8
  %334 = getelementptr inbounds i8, i8* %3, i64 1
  store i8 %333, i8* %334, align 1
  %335 = load i16, i16* %156, align 4
  %336 = sext i16 %335 to i32
  %337 = getelementptr inbounds i8, i8* %1, i64 2
  %338 = load i8, i8* %337, align 1
  %339 = zext i8 %338 to i32
  %340 = add nsw i32 %339, %336
  %341 = icmp sgt i32 %340, 0
  %342 = select i1 %341, i32 %340, i32 0
  %343 = icmp slt i32 %342, 255
  %344 = select i1 %343, i32 %342, i32 255
  %345 = trunc i32 %344 to i8
  %346 = getelementptr inbounds i8, i8* %3, i64 2
  store i8 %345, i8* %346, align 1
  %347 = load i16, i16* %165, align 2
  %348 = sext i16 %347 to i32
  %349 = getelementptr inbounds i8, i8* %1, i64 3
  %350 = load i8, i8* %349, align 1
  %351 = zext i8 %350 to i32
  %352 = add nsw i32 %351, %348
  %353 = icmp sgt i32 %352, 0
  %354 = select i1 %353, i32 %352, i32 0
  %355 = icmp slt i32 %354, 255
  %356 = select i1 %355, i32 %354, i32 255
  %357 = trunc i32 %356 to i8
  %358 = getelementptr inbounds i8, i8* %3, i64 3
  store i8 %357, i8* %358, align 1
  %359 = getelementptr inbounds i8, i8* %3, i64 %311
  %360 = getelementptr inbounds i8, i8* %1, i64 %312
  %361 = load i16, i16* %42, align 8
  %362 = sext i16 %361 to i32
  %363 = load i8, i8* %360, align 1
  %364 = zext i8 %363 to i32
  %365 = add nsw i32 %364, %362
  %366 = icmp sgt i32 %365, 0
  %367 = select i1 %366, i32 %365, i32 0
  %368 = icmp slt i32 %367, 255
  %369 = select i1 %368, i32 %367, i32 255
  %370 = trunc i32 %369 to i8
  store i8 %370, i8* %359, align 1
  %371 = load i16, i16* %199, align 2
  %372 = sext i16 %371 to i32
  %373 = getelementptr inbounds i8, i8* %360, i64 1
  %374 = load i8, i8* %373, align 1
  %375 = zext i8 %374 to i32
  %376 = add nsw i32 %375, %372
  %377 = icmp sgt i32 %376, 0
  %378 = select i1 %377, i32 %376, i32 0
  %379 = icmp slt i32 %378, 255
  %380 = select i1 %379, i32 %378, i32 255
  %381 = trunc i32 %380 to i8
  %382 = getelementptr inbounds i8, i8* %359, i64 1
  store i8 %381, i8* %382, align 1
  %383 = load i16, i16* %194, align 4
  %384 = sext i16 %383 to i32
  %385 = getelementptr inbounds i8, i8* %360, i64 2
  %386 = load i8, i8* %385, align 1
  %387 = zext i8 %386 to i32
  %388 = add nsw i32 %387, %384
  %389 = icmp sgt i32 %388, 0
  %390 = select i1 %389, i32 %388, i32 0
  %391 = icmp slt i32 %390, 255
  %392 = select i1 %391, i32 %390, i32 255
  %393 = trunc i32 %392 to i8
  %394 = getelementptr inbounds i8, i8* %359, i64 2
  store i8 %393, i8* %394, align 1
  %395 = load i16, i16* %204, align 2
  %396 = sext i16 %395 to i32
  %397 = getelementptr inbounds i8, i8* %360, i64 3
  %398 = load i8, i8* %397, align 1
  %399 = zext i8 %398 to i32
  %400 = add nsw i32 %399, %396
  %401 = icmp sgt i32 %400, 0
  %402 = select i1 %401, i32 %400, i32 0
  %403 = icmp slt i32 %402, 255
  %404 = select i1 %403, i32 %402, i32 255
  %405 = trunc i32 %404 to i8
  %406 = getelementptr inbounds i8, i8* %359, i64 3
  store i8 %405, i8* %406, align 1
  %407 = getelementptr inbounds i8, i8* %359, i64 %311
  %408 = getelementptr inbounds i8, i8* %360, i64 %312
  %409 = load i16, i16* %231, align 16
  %410 = sext i16 %409 to i32
  %411 = load i8, i8* %408, align 1
  %412 = zext i8 %411 to i32
  %413 = add nsw i32 %412, %410
  %414 = icmp sgt i32 %413, 0
  %415 = select i1 %414, i32 %413, i32 0
  %416 = icmp slt i32 %415, 255
  %417 = select i1 %416, i32 %415, i32 255
  %418 = trunc i32 %417 to i8
  store i8 %418, i8* %407, align 1
  %419 = load i16, i16* %239, align 2
  %420 = sext i16 %419 to i32
  %421 = getelementptr inbounds i8, i8* %408, i64 1
  %422 = load i8, i8* %421, align 1
  %423 = zext i8 %422 to i32
  %424 = add nsw i32 %423, %420
  %425 = icmp sgt i32 %424, 0
  %426 = select i1 %425, i32 %424, i32 0
  %427 = icmp slt i32 %426, 255
  %428 = select i1 %427, i32 %426, i32 255
  %429 = trunc i32 %428 to i8
  %430 = getelementptr inbounds i8, i8* %407, i64 1
  store i8 %429, i8* %430, align 1
  %431 = load i16, i16* %234, align 4
  %432 = sext i16 %431 to i32
  %433 = getelementptr inbounds i8, i8* %408, i64 2
  %434 = load i8, i8* %433, align 1
  %435 = zext i8 %434 to i32
  %436 = add nsw i32 %435, %432
  %437 = icmp sgt i32 %436, 0
  %438 = select i1 %437, i32 %436, i32 0
  %439 = icmp slt i32 %438, 255
  %440 = select i1 %439, i32 %438, i32 255
  %441 = trunc i32 %440 to i8
  %442 = getelementptr inbounds i8, i8* %407, i64 2
  store i8 %441, i8* %442, align 1
  %443 = load i16, i16* %244, align 2
  %444 = sext i16 %443 to i32
  %445 = getelementptr inbounds i8, i8* %408, i64 3
  %446 = load i8, i8* %445, align 1
  %447 = zext i8 %446 to i32
  %448 = add nsw i32 %447, %444
  %449 = icmp sgt i32 %448, 0
  %450 = select i1 %449, i32 %448, i32 0
  %451 = icmp slt i32 %450, 255
  %452 = select i1 %451, i32 %450, i32 255
  %453 = trunc i32 %452 to i8
  %454 = getelementptr inbounds i8, i8* %407, i64 3
  store i8 %453, i8* %454, align 1
  %455 = getelementptr inbounds i8, i8* %407, i64 %311
  %456 = getelementptr inbounds i8, i8* %408, i64 %312
  %457 = load i16, i16* %271, align 8
  %458 = sext i16 %457 to i32
  %459 = load i8, i8* %456, align 1
  %460 = zext i8 %459 to i32
  %461 = add nsw i32 %460, %458
  %462 = icmp sgt i32 %461, 0
  %463 = select i1 %462, i32 %461, i32 0
  %464 = icmp slt i32 %463, 255
  %465 = select i1 %464, i32 %463, i32 255
  %466 = trunc i32 %465 to i8
  store i8 %466, i8* %455, align 1
  %467 = load i16, i16* %279, align 2
  %468 = sext i16 %467 to i32
  %469 = getelementptr inbounds i8, i8* %456, i64 1
  %470 = load i8, i8* %469, align 1
  %471 = zext i8 %470 to i32
  %472 = add nsw i32 %471, %468
  %473 = icmp sgt i32 %472, 0
  %474 = select i1 %473, i32 %472, i32 0
  %475 = icmp slt i32 %474, 255
  %476 = select i1 %475, i32 %474, i32 255
  %477 = trunc i32 %476 to i8
  %478 = getelementptr inbounds i8, i8* %455, i64 1
  store i8 %477, i8* %478, align 1
  %479 = load i16, i16* %274, align 4
  %480 = sext i16 %479 to i32
  %481 = getelementptr inbounds i8, i8* %456, i64 2
  %482 = load i8, i8* %481, align 1
  %483 = zext i8 %482 to i32
  %484 = add nsw i32 %483, %480
  %485 = icmp sgt i32 %484, 0
  %486 = select i1 %485, i32 %484, i32 0
  %487 = icmp slt i32 %486, 255
  %488 = select i1 %487, i32 %486, i32 255
  %489 = trunc i32 %488 to i8
  %490 = getelementptr inbounds i8, i8* %455, i64 2
  store i8 %489, i8* %490, align 1
  %491 = load i16, i16* %284, align 2
  %492 = sext i16 %491 to i32
  %493 = getelementptr inbounds i8, i8* %456, i64 3
  %494 = load i8, i8* %493, align 1
  %495 = zext i8 %494 to i32
  %496 = add nsw i32 %495, %492
  %497 = icmp sgt i32 %496, 0
  %498 = select i1 %497, i32 %496, i32 0
  %499 = icmp slt i32 %498, 255
  %500 = select i1 %499, i32 %498, i32 255
  %501 = trunc i32 %500 to i8
  %502 = getelementptr inbounds i8, i8* %455, i64 3
  store i8 %501, i8* %502, align 1
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %7) #3
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @vp8_dc_only_idct_add_c(i16 signext, i8* nocapture readonly, i32, i8* nocapture, i32) local_unnamed_addr #2 {
  %6 = sext i16 %0 to i32
  %7 = add nsw i32 %6, 4
  %8 = ashr i32 %7, 3
  %9 = sext i32 %4 to i64
  %10 = sext i32 %2 to i64
  %11 = load i8, i8* %1, align 1
  %12 = zext i8 %11 to i32
  %13 = add nsw i32 %8, %12
  %14 = icmp sgt i32 %13, 0
  %15 = select i1 %14, i32 %13, i32 0
  %16 = icmp slt i32 %15, 255
  %17 = select i1 %16, i32 %15, i32 255
  %18 = trunc i32 %17 to i8
  store i8 %18, i8* %3, align 1
  %19 = getelementptr inbounds i8, i8* %1, i64 1
  %20 = load i8, i8* %19, align 1
  %21 = zext i8 %20 to i32
  %22 = add nsw i32 %8, %21
  %23 = icmp sgt i32 %22, 0
  %24 = select i1 %23, i32 %22, i32 0
  %25 = icmp slt i32 %24, 255
  %26 = select i1 %25, i32 %24, i32 255
  %27 = trunc i32 %26 to i8
  %28 = getelementptr inbounds i8, i8* %3, i64 1
  store i8 %27, i8* %28, align 1
  %29 = getelementptr inbounds i8, i8* %1, i64 2
  %30 = load i8, i8* %29, align 1
  %31 = zext i8 %30 to i32
  %32 = add nsw i32 %8, %31
  %33 = icmp sgt i32 %32, 0
  %34 = select i1 %33, i32 %32, i32 0
  %35 = icmp slt i32 %34, 255
  %36 = select i1 %35, i32 %34, i32 255
  %37 = trunc i32 %36 to i8
  %38 = getelementptr inbounds i8, i8* %3, i64 2
  store i8 %37, i8* %38, align 1
  %39 = getelementptr inbounds i8, i8* %1, i64 3
  %40 = load i8, i8* %39, align 1
  %41 = zext i8 %40 to i32
  %42 = add nsw i32 %8, %41
  %43 = icmp sgt i32 %42, 0
  %44 = select i1 %43, i32 %42, i32 0
  %45 = icmp slt i32 %44, 255
  %46 = select i1 %45, i32 %44, i32 255
  %47 = trunc i32 %46 to i8
  %48 = getelementptr inbounds i8, i8* %3, i64 3
  store i8 %47, i8* %48, align 1
  %49 = getelementptr inbounds i8, i8* %3, i64 %9
  %50 = getelementptr inbounds i8, i8* %1, i64 %10
  %51 = load i8, i8* %50, align 1
  %52 = zext i8 %51 to i32
  %53 = add nsw i32 %8, %52
  %54 = icmp sgt i32 %53, 0
  %55 = select i1 %54, i32 %53, i32 0
  %56 = icmp slt i32 %55, 255
  %57 = select i1 %56, i32 %55, i32 255
  %58 = trunc i32 %57 to i8
  store i8 %58, i8* %49, align 1
  %59 = getelementptr inbounds i8, i8* %50, i64 1
  %60 = load i8, i8* %59, align 1
  %61 = zext i8 %60 to i32
  %62 = add nsw i32 %8, %61
  %63 = icmp sgt i32 %62, 0
  %64 = select i1 %63, i32 %62, i32 0
  %65 = icmp slt i32 %64, 255
  %66 = select i1 %65, i32 %64, i32 255
  %67 = trunc i32 %66 to i8
  %68 = getelementptr inbounds i8, i8* %49, i64 1
  store i8 %67, i8* %68, align 1
  %69 = getelementptr inbounds i8, i8* %50, i64 2
  %70 = load i8, i8* %69, align 1
  %71 = zext i8 %70 to i32
  %72 = add nsw i32 %8, %71
  %73 = icmp sgt i32 %72, 0
  %74 = select i1 %73, i32 %72, i32 0
  %75 = icmp slt i32 %74, 255
  %76 = select i1 %75, i32 %74, i32 255
  %77 = trunc i32 %76 to i8
  %78 = getelementptr inbounds i8, i8* %49, i64 2
  store i8 %77, i8* %78, align 1
  %79 = getelementptr inbounds i8, i8* %50, i64 3
  %80 = load i8, i8* %79, align 1
  %81 = zext i8 %80 to i32
  %82 = add nsw i32 %8, %81
  %83 = icmp sgt i32 %82, 0
  %84 = select i1 %83, i32 %82, i32 0
  %85 = icmp slt i32 %84, 255
  %86 = select i1 %85, i32 %84, i32 255
  %87 = trunc i32 %86 to i8
  %88 = getelementptr inbounds i8, i8* %49, i64 3
  store i8 %87, i8* %88, align 1
  %89 = getelementptr inbounds i8, i8* %49, i64 %9
  %90 = getelementptr inbounds i8, i8* %50, i64 %10
  %91 = load i8, i8* %90, align 1
  %92 = zext i8 %91 to i32
  %93 = add nsw i32 %8, %92
  %94 = icmp sgt i32 %93, 0
  %95 = select i1 %94, i32 %93, i32 0
  %96 = icmp slt i32 %95, 255
  %97 = select i1 %96, i32 %95, i32 255
  %98 = trunc i32 %97 to i8
  store i8 %98, i8* %89, align 1
  %99 = getelementptr inbounds i8, i8* %90, i64 1
  %100 = load i8, i8* %99, align 1
  %101 = zext i8 %100 to i32
  %102 = add nsw i32 %8, %101
  %103 = icmp sgt i32 %102, 0
  %104 = select i1 %103, i32 %102, i32 0
  %105 = icmp slt i32 %104, 255
  %106 = select i1 %105, i32 %104, i32 255
  %107 = trunc i32 %106 to i8
  %108 = getelementptr inbounds i8, i8* %89, i64 1
  store i8 %107, i8* %108, align 1
  %109 = getelementptr inbounds i8, i8* %90, i64 2
  %110 = load i8, i8* %109, align 1
  %111 = zext i8 %110 to i32
  %112 = add nsw i32 %8, %111
  %113 = icmp sgt i32 %112, 0
  %114 = select i1 %113, i32 %112, i32 0
  %115 = icmp slt i32 %114, 255
  %116 = select i1 %115, i32 %114, i32 255
  %117 = trunc i32 %116 to i8
  %118 = getelementptr inbounds i8, i8* %89, i64 2
  store i8 %117, i8* %118, align 1
  %119 = getelementptr inbounds i8, i8* %90, i64 3
  %120 = load i8, i8* %119, align 1
  %121 = zext i8 %120 to i32
  %122 = add nsw i32 %8, %121
  %123 = icmp sgt i32 %122, 0
  %124 = select i1 %123, i32 %122, i32 0
  %125 = icmp slt i32 %124, 255
  %126 = select i1 %125, i32 %124, i32 255
  %127 = trunc i32 %126 to i8
  %128 = getelementptr inbounds i8, i8* %89, i64 3
  store i8 %127, i8* %128, align 1
  %129 = getelementptr inbounds i8, i8* %89, i64 %9
  %130 = getelementptr inbounds i8, i8* %90, i64 %10
  %131 = load i8, i8* %130, align 1
  %132 = zext i8 %131 to i32
  %133 = add nsw i32 %8, %132
  %134 = icmp sgt i32 %133, 0
  %135 = select i1 %134, i32 %133, i32 0
  %136 = icmp slt i32 %135, 255
  %137 = select i1 %136, i32 %135, i32 255
  %138 = trunc i32 %137 to i8
  store i8 %138, i8* %129, align 1
  %139 = getelementptr inbounds i8, i8* %130, i64 1
  %140 = load i8, i8* %139, align 1
  %141 = zext i8 %140 to i32
  %142 = add nsw i32 %8, %141
  %143 = icmp sgt i32 %142, 0
  %144 = select i1 %143, i32 %142, i32 0
  %145 = icmp slt i32 %144, 255
  %146 = select i1 %145, i32 %144, i32 255
  %147 = trunc i32 %146 to i8
  %148 = getelementptr inbounds i8, i8* %129, i64 1
  store i8 %147, i8* %148, align 1
  %149 = getelementptr inbounds i8, i8* %130, i64 2
  %150 = load i8, i8* %149, align 1
  %151 = zext i8 %150 to i32
  %152 = add nsw i32 %8, %151
  %153 = icmp sgt i32 %152, 0
  %154 = select i1 %153, i32 %152, i32 0
  %155 = icmp slt i32 %154, 255
  %156 = select i1 %155, i32 %154, i32 255
  %157 = trunc i32 %156 to i8
  %158 = getelementptr inbounds i8, i8* %129, i64 2
  store i8 %157, i8* %158, align 1
  %159 = getelementptr inbounds i8, i8* %130, i64 3
  %160 = load i8, i8* %159, align 1
  %161 = zext i8 %160 to i32
  %162 = add nsw i32 %8, %161
  %163 = icmp sgt i32 %162, 0
  %164 = select i1 %163, i32 %162, i32 0
  %165 = icmp slt i32 %164, 255
  %166 = select i1 %165, i32 %164, i32 255
  %167 = trunc i32 %166 to i8
  %168 = getelementptr inbounds i8, i8* %129, i64 3
  store i8 %167, i8* %168, align 1
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @vp8_short_inv_walsh4x4_c(i16* nocapture readonly, i16* nocapture) local_unnamed_addr #0 {
  %3 = alloca [16 x i16], align 16
  %4 = bitcast [16 x i16]* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %4) #3
  %5 = getelementptr inbounds [16 x i16], [16 x i16]* %3, i64 0, i64 0
  %6 = getelementptr inbounds [16 x i16], [16 x i16]* %3, i64 0, i64 1
  %7 = getelementptr inbounds [16 x i16], [16 x i16]* %3, i64 0, i64 2
  %8 = getelementptr inbounds [16 x i16], [16 x i16]* %3, i64 0, i64 3
  %9 = bitcast [16 x i16]* %3 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %9, i8 -86, i64 32, i1 false)
  %10 = load i16, i16* %0, align 2
  %11 = sext i16 %10 to i32
  %12 = getelementptr inbounds i16, i16* %0, i64 12
  %13 = load i16, i16* %12, align 2
  %14 = sext i16 %13 to i32
  %15 = add nsw i32 %14, %11
  %16 = getelementptr inbounds i16, i16* %0, i64 4
  %17 = load i16, i16* %16, align 2
  %18 = sext i16 %17 to i32
  %19 = getelementptr inbounds i16, i16* %0, i64 8
  %20 = load i16, i16* %19, align 2
  %21 = sext i16 %20 to i32
  %22 = add nsw i32 %21, %18
  %23 = sub nsw i32 %18, %21
  %24 = sub nsw i32 %11, %14
  %25 = add nsw i32 %22, %15
  %26 = trunc i32 %25 to i16
  store i16 %26, i16* %5, align 16
  %27 = add nsw i32 %23, %24
  %28 = trunc i32 %27 to i16
  %29 = getelementptr inbounds [16 x i16], [16 x i16]* %3, i64 0, i64 4
  store i16 %28, i16* %29, align 8
  %30 = sub nsw i32 %15, %22
  %31 = trunc i32 %30 to i16
  %32 = getelementptr inbounds [16 x i16], [16 x i16]* %3, i64 0, i64 8
  store i16 %31, i16* %32, align 16
  %33 = sub nsw i32 %24, %23
  %34 = trunc i32 %33 to i16
  %35 = getelementptr inbounds [16 x i16], [16 x i16]* %3, i64 0, i64 12
  store i16 %34, i16* %35, align 8
  %36 = getelementptr inbounds i16, i16* %0, i64 1
  %37 = getelementptr inbounds [16 x i16], [16 x i16]* %3, i64 0, i64 1
  %38 = load i16, i16* %36, align 2
  %39 = sext i16 %38 to i32
  %40 = getelementptr inbounds i16, i16* %0, i64 13
  %41 = load i16, i16* %40, align 2
  %42 = sext i16 %41 to i32
  %43 = add nsw i32 %42, %39
  %44 = getelementptr inbounds i16, i16* %0, i64 5
  %45 = load i16, i16* %44, align 2
  %46 = sext i16 %45 to i32
  %47 = getelementptr inbounds i16, i16* %0, i64 9
  %48 = load i16, i16* %47, align 2
  %49 = sext i16 %48 to i32
  %50 = add nsw i32 %49, %46
  %51 = sub nsw i32 %46, %49
  %52 = sub nsw i32 %39, %42
  %53 = add nsw i32 %50, %43
  %54 = trunc i32 %53 to i16
  store i16 %54, i16* %37, align 2
  %55 = add nsw i32 %51, %52
  %56 = trunc i32 %55 to i16
  %57 = getelementptr inbounds [16 x i16], [16 x i16]* %3, i64 0, i64 5
  store i16 %56, i16* %57, align 2
  %58 = sub nsw i32 %43, %50
  %59 = trunc i32 %58 to i16
  %60 = getelementptr inbounds [16 x i16], [16 x i16]* %3, i64 0, i64 9
  store i16 %59, i16* %60, align 2
  %61 = sub nsw i32 %52, %51
  %62 = trunc i32 %61 to i16
  %63 = getelementptr inbounds [16 x i16], [16 x i16]* %3, i64 0, i64 13
  store i16 %62, i16* %63, align 2
  %64 = getelementptr inbounds i16, i16* %0, i64 2
  %65 = load i16, i16* %64, align 2
  %66 = sext i16 %65 to i32
  %67 = getelementptr inbounds i16, i16* %0, i64 14
  %68 = load i16, i16* %67, align 2
  %69 = sext i16 %68 to i32
  %70 = add nsw i32 %69, %66
  %71 = getelementptr inbounds i16, i16* %0, i64 6
  %72 = load i16, i16* %71, align 2
  %73 = sext i16 %72 to i32
  %74 = getelementptr inbounds i16, i16* %0, i64 10
  %75 = load i16, i16* %74, align 2
  %76 = sext i16 %75 to i32
  %77 = add nsw i32 %76, %73
  %78 = sub nsw i32 %73, %76
  %79 = sub nsw i32 %66, %69
  %80 = add nsw i32 %77, %70
  %81 = add nsw i32 %78, %79
  %82 = sub nsw i32 %70, %77
  %83 = trunc i32 %82 to i16
  %84 = getelementptr inbounds [16 x i16], [16 x i16]* %3, i64 0, i64 10
  store i16 %83, i16* %84, align 4
  %85 = sub nsw i32 %79, %78
  %86 = trunc i32 %85 to i16
  %87 = getelementptr inbounds [16 x i16], [16 x i16]* %3, i64 0, i64 14
  store i16 %86, i16* %87, align 4
  %88 = getelementptr inbounds i16, i16* %0, i64 3
  %89 = load i16, i16* %88, align 2
  %90 = sext i16 %89 to i32
  %91 = getelementptr inbounds i16, i16* %0, i64 15
  %92 = load i16, i16* %91, align 2
  %93 = sext i16 %92 to i32
  %94 = add nsw i32 %93, %90
  %95 = getelementptr inbounds i16, i16* %0, i64 7
  %96 = load i16, i16* %95, align 2
  %97 = sext i16 %96 to i32
  %98 = getelementptr inbounds i16, i16* %0, i64 11
  %99 = load i16, i16* %98, align 2
  %100 = sext i16 %99 to i32
  %101 = add nsw i32 %100, %97
  %102 = sub nsw i32 %97, %100
  %103 = sub nsw i32 %90, %93
  %104 = add nsw i32 %101, %94
  %105 = add nsw i32 %102, %103
  %106 = sub nsw i32 %94, %101
  %107 = trunc i32 %106 to i16
  %108 = getelementptr inbounds [16 x i16], [16 x i16]* %3, i64 0, i64 11
  store i16 %107, i16* %108, align 2
  %109 = sub nsw i32 %103, %102
  %110 = trunc i32 %109 to i16
  %111 = getelementptr inbounds [16 x i16], [16 x i16]* %3, i64 0, i64 15
  store i16 %110, i16* %111, align 2
  %112 = load i16, i16* %5, align 16
  %113 = sext i16 %112 to i32
  %114 = getelementptr inbounds [16 x i16], [16 x i16]* %3, i64 0, i64 3
  %115 = shl i32 %104, 16
  %116 = ashr exact i32 %115, 16
  %117 = add nsw i32 %116, %113
  %118 = shl i32 %53, 16
  %119 = ashr exact i32 %118, 16
  %120 = getelementptr inbounds [16 x i16], [16 x i16]* %3, i64 0, i64 2
  %121 = shl i32 %80, 16
  %122 = ashr exact i32 %121, 16
  %123 = add nsw i32 %122, %119
  %124 = sub nsw i32 %119, %122
  %125 = sub nsw i32 %113, %116
  %126 = add nsw i32 %117, 3
  %127 = add nsw i32 %126, %123
  %128 = lshr i32 %127, 3
  %129 = trunc i32 %128 to i16
  store i16 %129, i16* %5, align 16
  %130 = add nsw i32 %125, 3
  %131 = add nsw i32 %130, %124
  %132 = lshr i32 %131, 3
  %133 = trunc i32 %132 to i16
  store i16 %133, i16* %37, align 2
  %134 = sub nsw i32 %126, %123
  %135 = lshr i32 %134, 3
  %136 = trunc i32 %135 to i16
  store i16 %136, i16* %120, align 4
  %137 = sub nsw i32 %130, %124
  %138 = lshr i32 %137, 3
  %139 = trunc i32 %138 to i16
  store i16 %139, i16* %114, align 2
  %140 = load i16, i16* %29, align 8
  %141 = sext i16 %140 to i32
  %142 = getelementptr inbounds [16 x i16], [16 x i16]* %3, i64 0, i64 7
  %143 = shl i32 %105, 16
  %144 = ashr exact i32 %143, 16
  %145 = add nsw i32 %144, %141
  %146 = getelementptr inbounds [16 x i16], [16 x i16]* %3, i64 0, i64 5
  %147 = load i16, i16* %146, align 2
  %148 = sext i16 %147 to i32
  %149 = getelementptr inbounds [16 x i16], [16 x i16]* %3, i64 0, i64 6
  %150 = shl i32 %81, 16
  %151 = ashr exact i32 %150, 16
  %152 = add nsw i32 %151, %148
  %153 = sub nsw i32 %148, %151
  %154 = sub nsw i32 %141, %144
  %155 = add nsw i32 %145, 3
  %156 = add nsw i32 %155, %152
  %157 = lshr i32 %156, 3
  %158 = trunc i32 %157 to i16
  store i16 %158, i16* %29, align 8
  %159 = add nsw i32 %154, 3
  %160 = add nsw i32 %159, %153
  %161 = lshr i32 %160, 3
  %162 = trunc i32 %161 to i16
  store i16 %162, i16* %146, align 2
  %163 = sub nsw i32 %155, %152
  %164 = lshr i32 %163, 3
  %165 = trunc i32 %164 to i16
  store i16 %165, i16* %149, align 4
  %166 = sub nsw i32 %159, %153
  %167 = lshr i32 %166, 3
  %168 = trunc i32 %167 to i16
  store i16 %168, i16* %142, align 2
  %169 = getelementptr inbounds [16 x i16], [16 x i16]* %3, i64 0, i64 8
  %170 = load i16, i16* %169, align 16
  %171 = sext i16 %170 to i32
  %172 = getelementptr inbounds [16 x i16], [16 x i16]* %3, i64 0, i64 11
  %173 = shl i32 %106, 16
  %174 = ashr exact i32 %173, 16
  %175 = add nsw i32 %174, %171
  %176 = getelementptr inbounds [16 x i16], [16 x i16]* %3, i64 0, i64 9
  %177 = load i16, i16* %176, align 2
  %178 = sext i16 %177 to i32
  %179 = getelementptr inbounds [16 x i16], [16 x i16]* %3, i64 0, i64 10
  %180 = load i16, i16* %179, align 4
  %181 = sext i16 %180 to i32
  %182 = add nsw i32 %181, %178
  %183 = sub nsw i32 %178, %181
  %184 = sub nsw i32 %171, %174
  %185 = add nsw i32 %175, 3
  %186 = add nsw i32 %185, %182
  %187 = lshr i32 %186, 3
  %188 = trunc i32 %187 to i16
  store i16 %188, i16* %169, align 16
  %189 = add nsw i32 %184, 3
  %190 = add nsw i32 %189, %183
  %191 = lshr i32 %190, 3
  %192 = trunc i32 %191 to i16
  store i16 %192, i16* %176, align 2
  %193 = sub nsw i32 %185, %182
  %194 = lshr i32 %193, 3
  %195 = trunc i32 %194 to i16
  store i16 %195, i16* %179, align 4
  %196 = sub nsw i32 %189, %183
  %197 = lshr i32 %196, 3
  %198 = trunc i32 %197 to i16
  store i16 %198, i16* %172, align 2
  %199 = getelementptr inbounds [16 x i16], [16 x i16]* %3, i64 0, i64 12
  %200 = load i16, i16* %199, align 8
  %201 = sext i16 %200 to i32
  %202 = getelementptr inbounds [16 x i16], [16 x i16]* %3, i64 0, i64 15
  %203 = shl i32 %109, 16
  %204 = ashr exact i32 %203, 16
  %205 = add nsw i32 %204, %201
  %206 = getelementptr inbounds [16 x i16], [16 x i16]* %3, i64 0, i64 13
  %207 = load i16, i16* %206, align 2
  %208 = sext i16 %207 to i32
  %209 = getelementptr inbounds [16 x i16], [16 x i16]* %3, i64 0, i64 14
  %210 = load i16, i16* %209, align 4
  %211 = sext i16 %210 to i32
  %212 = add nsw i32 %211, %208
  %213 = sub nsw i32 %208, %211
  %214 = sub nsw i32 %201, %204
  %215 = add nsw i32 %205, 3
  %216 = add nsw i32 %215, %212
  %217 = lshr i32 %216, 3
  %218 = trunc i32 %217 to i16
  store i16 %218, i16* %199, align 8
  %219 = add nsw i32 %214, 3
  %220 = add nsw i32 %219, %213
  %221 = lshr i32 %220, 3
  %222 = trunc i32 %221 to i16
  store i16 %222, i16* %206, align 2
  %223 = sub nsw i32 %215, %212
  %224 = lshr i32 %223, 3
  %225 = trunc i32 %224 to i16
  store i16 %225, i16* %209, align 4
  %226 = sub nsw i32 %219, %213
  %227 = lshr i32 %226, 3
  %228 = trunc i32 %227 to i16
  store i16 %228, i16* %202, align 2
  %229 = load i16, i16* %5, align 16
  store i16 %229, i16* %1, align 2
  %230 = load i16, i16* %6, align 2
  %231 = getelementptr inbounds i16, i16* %1, i64 16
  store i16 %230, i16* %231, align 2
  %232 = load i16, i16* %7, align 4
  %233 = getelementptr inbounds i16, i16* %1, i64 32
  store i16 %232, i16* %233, align 2
  %234 = load i16, i16* %8, align 2
  %235 = getelementptr inbounds i16, i16* %1, i64 48
  store i16 %234, i16* %235, align 2
  %236 = getelementptr inbounds i16, i16* %1, i64 64
  store i16 %158, i16* %236, align 2
  %237 = getelementptr inbounds i16, i16* %1, i64 80
  store i16 %162, i16* %237, align 2
  %238 = getelementptr inbounds i16, i16* %1, i64 96
  store i16 %165, i16* %238, align 2
  %239 = getelementptr inbounds i16, i16* %1, i64 112
  store i16 %168, i16* %239, align 2
  %240 = getelementptr inbounds i16, i16* %1, i64 128
  store i16 %188, i16* %240, align 2
  %241 = getelementptr inbounds i16, i16* %1, i64 144
  store i16 %192, i16* %241, align 2
  %242 = getelementptr inbounds i16, i16* %1, i64 160
  store i16 %195, i16* %242, align 2
  %243 = getelementptr inbounds i16, i16* %1, i64 176
  store i16 %198, i16* %243, align 2
  %244 = getelementptr inbounds i16, i16* %1, i64 192
  store i16 %218, i16* %244, align 2
  %245 = getelementptr inbounds i16, i16* %1, i64 208
  store i16 %222, i16* %245, align 2
  %246 = getelementptr inbounds i16, i16* %1, i64 224
  store i16 %225, i16* %246, align 2
  %247 = getelementptr inbounds i16, i16* %1, i64 240
  store i16 %228, i16* %247, align 2
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %4) #3
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @vp8_short_inv_walsh4x4_1_c(i16* nocapture readonly, i16* nocapture) local_unnamed_addr #2 {
  %3 = load i16, i16* %0, align 2
  %4 = sext i16 %3 to i32
  %5 = add nsw i32 %4, 3
  %6 = ashr i32 %5, 3
  %7 = trunc i32 %6 to i16
  store i16 %7, i16* %1, align 2
  %8 = getelementptr inbounds i16, i16* %1, i64 16
  store i16 %7, i16* %8, align 2
  %9 = getelementptr inbounds i16, i16* %1, i64 32
  store i16 %7, i16* %9, align 2
  %10 = getelementptr inbounds i16, i16* %1, i64 48
  store i16 %7, i16* %10, align 2
  %11 = getelementptr inbounds i16, i16* %1, i64 64
  store i16 %7, i16* %11, align 2
  %12 = getelementptr inbounds i16, i16* %1, i64 80
  store i16 %7, i16* %12, align 2
  %13 = getelementptr inbounds i16, i16* %1, i64 96
  store i16 %7, i16* %13, align 2
  %14 = getelementptr inbounds i16, i16* %1, i64 112
  store i16 %7, i16* %14, align 2
  %15 = getelementptr inbounds i16, i16* %1, i64 128
  store i16 %7, i16* %15, align 2
  %16 = getelementptr inbounds i16, i16* %1, i64 144
  store i16 %7, i16* %16, align 2
  %17 = getelementptr inbounds i16, i16* %1, i64 160
  store i16 %7, i16* %17, align 2
  %18 = getelementptr inbounds i16, i16* %1, i64 176
  store i16 %7, i16* %18, align 2
  %19 = getelementptr inbounds i16, i16* %1, i64 192
  store i16 %7, i16* %19, align 2
  %20 = getelementptr inbounds i16, i16* %1, i64 208
  store i16 %7, i16* %20, align 2
  %21 = getelementptr inbounds i16, i16* %1, i64 224
  store i16 %7, i16* %21, align 2
  %22 = getelementptr inbounds i16, i16* %1, i64 240
  store i16 %7, i16* %22, align 2
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { nofree norecurse nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
