; ModuleID = 'gen/third_party/blink/public/mojom/plugins/plugin_registry.mojom-blink-test-utils.cc'
source_filename = "gen/third_party/blink/public/mojom/plugins/plugin_registry.mojom-blink-test-utils.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.blink::mojom::blink::PluginRegistryAsyncWaiter" = type { %"class.blink::mojom::blink::PluginRegistry"* }
%"class.blink::mojom::blink::PluginRegistry" = type { i32 (...)** }
%"class.blink::mojom::blink::PluginRegistryInterceptorForTesting" = type { %"class.blink::mojom::blink::PluginRegistry" }
%class.scoped_refptr = type { %"class.blink::SecurityOrigin"* }
%"class.blink::SecurityOrigin" = type { %"class.WTF::RefCounted", %"class.WTF::String", %"class.WTF::String", %"class.WTF::String", i16, %"class.absl::optional", i8, i8, i8, i8, i8, i8, %"class.base::UnguessableToken", %class.scoped_refptr }
%"class.WTF::RefCounted" = type { %"class.base::RefCounted" }
%"class.base::RefCounted" = type { %"class.base::subtle::RefCountedBase" }
%"class.base::subtle::RefCountedBase" = type { i32 }
%"class.WTF::String" = type { %class.scoped_refptr.0 }
%class.scoped_refptr.0 = type { %"class.WTF::StringImpl"* }
%"class.WTF::StringImpl" = type { i32, i32, %"struct.std::__1::atomic" }
%"struct.std::__1::atomic" = type { %"struct.std::__1::__atomic_base" }
%"struct.std::__1::__atomic_base" = type { %"struct.std::__1::__atomic_base.1" }
%"struct.std::__1::__atomic_base.1" = type { %"struct.std::__1::__cxx_atomic_impl" }
%"struct.std::__1::__cxx_atomic_impl" = type { %"struct.std::__1::__cxx_atomic_base_impl" }
%"struct.std::__1::__cxx_atomic_base_impl" = type { i32 }
%"class.absl::optional" = type { %"class.absl::optional_internal::optional_data" }
%"class.absl::optional_internal::optional_data" = type { %"class.absl::optional_internal::optional_data_base" }
%"class.absl::optional_internal::optional_data_base" = type { %"class.absl::optional_internal::optional_data_dtor_base" }
%"class.absl::optional_internal::optional_data_dtor_base" = type { i8, %union.anon }
%union.anon = type { %"class.url::Origin::Nonce" }
%"class.url::Origin::Nonce" = type { %"class.base::UnguessableToken" }
%"class.base::UnguessableToken" = type { %"class.base::Token" }
%"class.base::Token" = type { i64, i64 }
%"class.base::OnceCallback" = type { %"class.base::internal::CallbackBase" }
%"class.base::internal::CallbackBase" = type { %class.scoped_refptr.2 }
%class.scoped_refptr.2 = type { %"class.base::internal::BindStateBase"* }
%"class.base::internal::BindStateBase" = type { %"class.base::RefCountedThreadSafe", void ()*, void (%"class.base::internal::BindStateBase"*)*, i1 (%"class.base::internal::BindStateBase"*, i32)* }
%"class.base::RefCountedThreadSafe" = type { %"class.base::subtle::RefCountedThreadSafeBase" }
%"class.base::subtle::RefCountedThreadSafeBase" = type { %"class.base::AtomicRefCount" }
%"class.base::AtomicRefCount" = type { %"struct.std::__1::atomic.3" }
%"struct.std::__1::atomic.3" = type { %"struct.std::__1::__atomic_base.4" }
%"struct.std::__1::__atomic_base.4" = type { %"struct.std::__1::__atomic_base.5" }
%"struct.std::__1::__atomic_base.5" = type { %"struct.std::__1::__cxx_atomic_impl.6" }
%"struct.std::__1::__cxx_atomic_impl.6" = type { %"struct.std::__1::__cxx_atomic_base_impl.7" }
%"struct.std::__1::__cxx_atomic_base_impl.7" = type { i32 }
%"class.WTF::Vector" = type { %"class.WTF::VectorBuffer" }
%"class.WTF::VectorBuffer" = type { %"class.WTF::VectorBufferBase" }
%"class.WTF::VectorBufferBase" = type { %"class.mojo::StructPtr"*, i32, i32 }
%"class.mojo::StructPtr" = type { %"class.std::__1::unique_ptr" }
%"class.std::__1::unique_ptr" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %"class.blink::mojom::blink::PluginInfo"* }
%"class.blink::mojom::blink::PluginInfo" = type <{ %"class.WTF::String", %"class.WTF::String", %"class.base::FilePath", i32, [4 x i8], %"class.WTF::Vector.12", i8, [7 x i8] }>
%"class.base::FilePath" = type { %"class.std::__1::basic_string" }
%"class.std::__1::basic_string" = type { %"class.std::__1::__compressed_pair.8" }
%"class.std::__1::__compressed_pair.8" = type { %"struct.std::__1::__compressed_pair_elem.9" }
%"struct.std::__1::__compressed_pair_elem.9" = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" = type { %union.anon.10 }
%union.anon.10 = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" = type { i8*, i64, i64 }
%"class.WTF::Vector.12" = type { %"class.WTF::VectorBuffer.13" }
%"class.WTF::VectorBuffer.13" = type { %"class.WTF::VectorBufferBase.14" }
%"class.WTF::VectorBufferBase.14" = type { %"class.mojo::StructPtr.15"*, i32, i32 }
%"class.mojo::StructPtr.15" = type { %"class.std::__1::unique_ptr.16" }
%"class.std::__1::unique_ptr.16" = type { %"class.std::__1::__compressed_pair.17" }
%"class.std::__1::__compressed_pair.17" = type { %"struct.std::__1::__compressed_pair_elem.18" }
%"struct.std::__1::__compressed_pair_elem.18" = type { %"class.blink::mojom::blink::PluginMimeType"* }
%"class.blink::mojom::blink::PluginMimeType" = type { %"class.WTF::String", %"class.WTF::String", %"class.WTF::Vector.19" }
%"class.WTF::Vector.19" = type { %"class.WTF::VectorBuffer.20" }
%"class.WTF::VectorBuffer.20" = type { %"class.WTF::VectorBufferBase.21" }
%"class.WTF::VectorBufferBase.21" = type { %"class.WTF::String"*, i32, i32 }
%"class.base::RunLoop" = type { %"class.base::RunLoop::Delegate"*, i32, i8, i8, i8, i8, i8, %class.scoped_refptr.42, %"class.base::WeakPtrFactory" }
%"class.base::RunLoop::Delegate" = type <{ i32 (...)**, %"class.std::__1::stack", %"class.base::ObserverList", i8, [7 x i8] }>
%"class.std::__1::stack" = type { %"class.std::__1::vector" }
%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { %"class.base::RunLoop"**, %"class.base::RunLoop"**, %"class.std::__1::__compressed_pair.30" }
%"class.std::__1::__compressed_pair.30" = type { %"struct.std::__1::__compressed_pair_elem.31" }
%"struct.std::__1::__compressed_pair_elem.31" = type { %"class.base::RunLoop"** }
%"class.base::ObserverList" = type <{ %"class.std::__1::vector.35", %"class.base::LinkedList", i64, i32, [4 x i8] }>
%"class.std::__1::vector.35" = type { %"class.std::__1::__vector_base.36" }
%"class.std::__1::__vector_base.36" = type { %"class.base::internal::UncheckedObserverAdapter"*, %"class.base::internal::UncheckedObserverAdapter"*, %"class.std::__1::__compressed_pair.37" }
%"class.base::internal::UncheckedObserverAdapter" = type { i8* }
%"class.std::__1::__compressed_pair.37" = type { %"struct.std::__1::__compressed_pair_elem.38" }
%"struct.std::__1::__compressed_pair_elem.38" = type { %"class.base::internal::UncheckedObserverAdapter"* }
%"class.base::LinkedList" = type { %"class.base::LinkNode" }
%"class.base::LinkNode" = type { %"class.base::internal::LinkNodeBase" }
%"class.base::internal::LinkNodeBase" = type { %"class.base::internal::LinkNodeBase"*, %"class.base::internal::LinkNodeBase"* }
%class.scoped_refptr.42 = type { %"class.base::SingleThreadTaskRunner"* }
%"class.base::SingleThreadTaskRunner" = type { %"class.base::SequencedTaskRunner.base", [4 x i8] }
%"class.base::SequencedTaskRunner.base" = type { %"class.base::TaskRunner.base" }
%"class.base::TaskRunner.base" = type <{ i32 (...)**, %"class.base::RefCountedThreadSafe.43" }>
%"class.base::RefCountedThreadSafe.43" = type { %"class.base::subtle::RefCountedThreadSafeBase" }
%"class.base::WeakPtrFactory" = type { %"class.base::internal::WeakPtrFactoryBase" }
%"class.base::internal::WeakPtrFactoryBase" = type { %"class.base::internal::WeakReferenceOwner", i64 }
%"class.base::internal::WeakReferenceOwner" = type { %class.scoped_refptr.44 }
%class.scoped_refptr.44 = type { %"class.base::internal::WeakReference::Flag"* }
%"class.base::internal::WeakReference::Flag" = type <{ %"class.base::RefCountedThreadSafe.45", %"class.base::AtomicFlag", [3 x i8] }>
%"class.base::RefCountedThreadSafe.45" = type { %"class.base::subtle::RefCountedThreadSafeBase" }
%"class.base::AtomicFlag" = type { %"struct.std::__1::atomic.46" }
%"struct.std::__1::atomic.46" = type { %"struct.std::__1::__atomic_base.47" }
%"struct.std::__1::__atomic_base.47" = type { %"struct.std::__1::__atomic_base.48" }
%"struct.std::__1::__atomic_base.48" = type { %"struct.std::__1::__cxx_atomic_impl.49" }
%"struct.std::__1::__cxx_atomic_impl.49" = type { %"struct.std::__1::__cxx_atomic_base_impl.50" }
%"struct.std::__1::__cxx_atomic_base_impl.50" = type { i8 }
%"class.base::Location" = type { i8*, i8*, i32, i8* }

$_ZN5blink5mojom5blink14PluginRegistryD2Ev = comdat any

$_ZN5blink5mojom5blink35PluginRegistryInterceptorForTestingD0Ev = comdat any

@.str = private unnamed_addr constant [11 x i8] c"GetPlugins\00", align 1
@.str.1 = private unnamed_addr constant [85 x i8] c"gen/third_party/blink/public/mojom/plugins/plugin_registry.mojom-blink-test-utils.cc\00", align 1
@_ZTVN5blink5mojom5blink35PluginRegistryInterceptorForTestingE = hidden unnamed_addr constant { [7 x i8*] } { [7 x i8*] [i8* null, i8* null, i8* bitcast (void (%"class.blink::mojom::blink::PluginRegistry"*)* @_ZN5blink5mojom5blink14PluginRegistryD2Ev to i8*), i8* bitcast (void (%"class.blink::mojom::blink::PluginRegistryInterceptorForTesting"*)* @_ZN5blink5mojom5blink35PluginRegistryInterceptorForTestingD0Ev to i8*), i8* bitcast (i1 (%"class.blink::mojom::blink::PluginRegistry"*, i1, %class.scoped_refptr*, %"class.WTF::Vector"*)* @_ZN5blink5mojom5blink14PluginRegistry10GetPluginsEbRK13scoped_refptrIKNS_14SecurityOriginEEPN3WTF6VectorIN4mojo9StructPtrINS1_10PluginInfoEEELj0ENS9_18PartitionAllocatorEEE to i8*), i8* bitcast (void (%"class.blink::mojom::blink::PluginRegistryInterceptorForTesting"*, i1, %class.scoped_refptr*, %"class.base::OnceCallback"*)* @_ZN5blink5mojom5blink35PluginRegistryInterceptorForTesting10GetPluginsEbRK13scoped_refptrIKNS_14SecurityOriginEEN4base12OnceCallbackIFvN3WTF6VectorIN4mojo9StructPtrINS1_10PluginInfoEEELj0ENSB_18PartitionAllocatorEEEEEE to i8*), i8* bitcast (void ()* @__cxa_pure_virtual to i8*)] }, align 8

@_ZN5blink5mojom5blink25PluginRegistryAsyncWaiterC1EPNS1_14PluginRegistryE = hidden unnamed_addr alias void (%"class.blink::mojom::blink::PluginRegistryAsyncWaiter"*, %"class.blink::mojom::blink::PluginRegistry"*), void (%"class.blink::mojom::blink::PluginRegistryAsyncWaiter"*, %"class.blink::mojom::blink::PluginRegistry"*)* @_ZN5blink5mojom5blink25PluginRegistryAsyncWaiterC2EPNS1_14PluginRegistryE
@_ZN5blink5mojom5blink25PluginRegistryAsyncWaiterD1Ev = hidden unnamed_addr alias void (%"class.blink::mojom::blink::PluginRegistryAsyncWaiter"*), void (%"class.blink::mojom::blink::PluginRegistryAsyncWaiter"*)* @_ZN5blink5mojom5blink25PluginRegistryAsyncWaiterD2Ev

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink5mojom5blink35PluginRegistryInterceptorForTesting10GetPluginsEbRK13scoped_refptrIKNS_14SecurityOriginEEN4base12OnceCallbackIFvN3WTF6VectorIN4mojo9StructPtrINS1_10PluginInfoEEELj0ENSB_18PartitionAllocatorEEEEEE(%"class.blink::mojom::blink::PluginRegistryInterceptorForTesting"*, i1 zeroext, %class.scoped_refptr* dereferenceable(8), %"class.base::OnceCallback"* nocapture) unnamed_addr #0 align 2 {
  %5 = alloca %"class.base::OnceCallback", align 8
  %6 = bitcast %"class.blink::mojom::blink::PluginRegistryInterceptorForTesting"* %0 to %"class.blink::mojom::blink::PluginRegistry"* (%"class.blink::mojom::blink::PluginRegistryInterceptorForTesting"*)***
  %7 = load %"class.blink::mojom::blink::PluginRegistry"* (%"class.blink::mojom::blink::PluginRegistryInterceptorForTesting"*)**, %"class.blink::mojom::blink::PluginRegistry"* (%"class.blink::mojom::blink::PluginRegistryInterceptorForTesting"*)*** %6, align 8
  %8 = getelementptr inbounds %"class.blink::mojom::blink::PluginRegistry"* (%"class.blink::mojom::blink::PluginRegistryInterceptorForTesting"*)*, %"class.blink::mojom::blink::PluginRegistry"* (%"class.blink::mojom::blink::PluginRegistryInterceptorForTesting"*)** %7, i64 4
  %9 = load %"class.blink::mojom::blink::PluginRegistry"* (%"class.blink::mojom::blink::PluginRegistryInterceptorForTesting"*)*, %"class.blink::mojom::blink::PluginRegistry"* (%"class.blink::mojom::blink::PluginRegistryInterceptorForTesting"*)** %8, align 8
  %10 = tail call %"class.blink::mojom::blink::PluginRegistry"* %9(%"class.blink::mojom::blink::PluginRegistryInterceptorForTesting"* %0) #10
  %11 = getelementptr inbounds %"class.base::OnceCallback", %"class.base::OnceCallback"* %3, i64 0, i32 0, i32 0, i32 0
  %12 = bitcast %"class.base::OnceCallback"* %3 to i64*
  %13 = load i64, i64* %12, align 8
  %14 = bitcast %"class.base::OnceCallback"* %5 to i64*
  store i64 %13, i64* %14, align 8
  store %"class.base::internal::BindStateBase"* null, %"class.base::internal::BindStateBase"** %11, align 8
  %15 = bitcast %"class.blink::mojom::blink::PluginRegistry"* %10 to void (%"class.blink::mojom::blink::PluginRegistry"*, i1, %class.scoped_refptr*, %"class.base::OnceCallback"*)***
  %16 = load void (%"class.blink::mojom::blink::PluginRegistry"*, i1, %class.scoped_refptr*, %"class.base::OnceCallback"*)**, void (%"class.blink::mojom::blink::PluginRegistry"*, i1, %class.scoped_refptr*, %"class.base::OnceCallback"*)*** %15, align 8
  %17 = getelementptr inbounds void (%"class.blink::mojom::blink::PluginRegistry"*, i1, %class.scoped_refptr*, %"class.base::OnceCallback"*)*, void (%"class.blink::mojom::blink::PluginRegistry"*, i1, %class.scoped_refptr*, %"class.base::OnceCallback"*)** %16, i64 3
  %18 = load void (%"class.blink::mojom::blink::PluginRegistry"*, i1, %class.scoped_refptr*, %"class.base::OnceCallback"*)*, void (%"class.blink::mojom::blink::PluginRegistry"*, i1, %class.scoped_refptr*, %"class.base::OnceCallback"*)** %17, align 8
  call void %18(%"class.blink::mojom::blink::PluginRegistry"* %10, i1 zeroext %1, %class.scoped_refptr* dereferenceable(8) %2, %"class.base::OnceCallback"* nonnull %5) #10
  %19 = getelementptr inbounds %"class.base::OnceCallback", %"class.base::OnceCallback"* %5, i64 0, i32 0
  call void @_ZN4base8internal12CallbackBaseD2Ev(%"class.base::internal::CallbackBase"* nonnull %19) #10
  ret void
}

; Function Attrs: nounwind
declare void @_ZN4base8internal12CallbackBaseD2Ev(%"class.base::internal::CallbackBase"*) unnamed_addr #1

; Function Attrs: nofree norecurse nounwind ssp uwtable writeonly
define hidden void @_ZN5blink5mojom5blink25PluginRegistryAsyncWaiterC2EPNS1_14PluginRegistryE(%"class.blink::mojom::blink::PluginRegistryAsyncWaiter"* nocapture, %"class.blink::mojom::blink::PluginRegistry"*) unnamed_addr #2 align 2 {
  %3 = getelementptr inbounds %"class.blink::mojom::blink::PluginRegistryAsyncWaiter", %"class.blink::mojom::blink::PluginRegistryAsyncWaiter"* %0, i64 0, i32 0
  store %"class.blink::mojom::blink::PluginRegistry"* %1, %"class.blink::mojom::blink::PluginRegistry"** %3, align 8
  ret void
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden void @_ZN5blink5mojom5blink25PluginRegistryAsyncWaiterD2Ev(%"class.blink::mojom::blink::PluginRegistryAsyncWaiter"* nocapture) unnamed_addr #3 align 2 {
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink5mojom5blink25PluginRegistryAsyncWaiter10GetPluginsEbRK13scoped_refptrIKNS_14SecurityOriginEEPN3WTF6VectorIN4mojo9StructPtrINS1_10PluginInfoEEELj0ENS9_18PartitionAllocatorEEE(%"class.blink::mojom::blink::PluginRegistryAsyncWaiter"* nocapture readonly, i1 zeroext, %class.scoped_refptr* dereferenceable(8), %"class.WTF::Vector"*) local_unnamed_addr #0 align 2 {
  %5 = alloca %"class.base::RunLoop", align 8
  %6 = alloca %"class.base::OnceCallback", align 8
  %7 = alloca %"class.base::Location", align 8
  %8 = ptrtoint %"class.WTF::Vector"* %3 to i64
  %9 = bitcast %"class.base::RunLoop"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 48, i8* nonnull %9) #10
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %9, i8 -86, i64 48, i1 false)
  call void @_ZN4base7RunLoopC1ENS0_4TypeE(%"class.base::RunLoop"* nonnull %5, i32 0) #10
  %10 = getelementptr inbounds %"class.blink::mojom::blink::PluginRegistryAsyncWaiter", %"class.blink::mojom::blink::PluginRegistryAsyncWaiter"* %0, i64 0, i32 0
  %11 = load %"class.blink::mojom::blink::PluginRegistry"*, %"class.blink::mojom::blink::PluginRegistry"** %10, align 8
  %12 = ptrtoint %"class.base::RunLoop"* %5 to i64
  %13 = call i8* @_Znwm(i64 56) #11, !noalias !2
  %14 = bitcast i8* %13 to %"class.base::internal::BindStateBase"*
  call void @_ZN4base8internal13BindStateBaseC2EPFvvEPFvPKS1_E(%"class.base::internal::BindStateBase"* nonnull %14, void ()* bitcast (void (%"class.base::internal::BindStateBase"*, %"class.WTF::Vector"*)* @"_ZN4base8internal7InvokerINS0_9BindStateIZN5blink5mojom5blink25PluginRegistryAsyncWaiter10GetPluginsEbRK13scoped_refptrIKNS3_14SecurityOriginEEPN3WTF6VectorIN4mojo9StructPtrINS5_10PluginInfoEEELj0ENSD_18PartitionAllocatorEEEE3$_0JPNS_7RunLoopESL_EEEFvSK_EE7RunOnceEPNS0_13BindStateBaseEOSK_" to void ()*), void (%"class.base::internal::BindStateBase"*)* nonnull @"_ZN4base8internal9BindStateIZN5blink5mojom5blink25PluginRegistryAsyncWaiter10GetPluginsEbRK13scoped_refptrIKNS2_14SecurityOriginEEPN3WTF6VectorIN4mojo9StructPtrINS4_10PluginInfoEEELj0ENSC_18PartitionAllocatorEEEE3$_0JPNS_7RunLoopESK_EE7DestroyEPKNS0_13BindStateBaseE") #10, !noalias !2
  %15 = getelementptr inbounds i8, i8* %13, i64 40
  %16 = bitcast i8* %15 to i64*
  store i64 %12, i64* %16, align 8, !noalias !2
  %17 = getelementptr inbounds i8, i8* %13, i64 48
  %18 = bitcast i8* %17 to i64*
  store i64 %8, i64* %18, align 8, !noalias !2
  %19 = bitcast %"class.base::OnceCallback"* %6 to i8**
  store i8* %13, i8** %19, align 8, !alias.scope !2
  %20 = bitcast %"class.blink::mojom::blink::PluginRegistry"* %11 to void (%"class.blink::mojom::blink::PluginRegistry"*, i1, %class.scoped_refptr*, %"class.base::OnceCallback"*)***
  %21 = load void (%"class.blink::mojom::blink::PluginRegistry"*, i1, %class.scoped_refptr*, %"class.base::OnceCallback"*)**, void (%"class.blink::mojom::blink::PluginRegistry"*, i1, %class.scoped_refptr*, %"class.base::OnceCallback"*)*** %20, align 8
  %22 = getelementptr inbounds void (%"class.blink::mojom::blink::PluginRegistry"*, i1, %class.scoped_refptr*, %"class.base::OnceCallback"*)*, void (%"class.blink::mojom::blink::PluginRegistry"*, i1, %class.scoped_refptr*, %"class.base::OnceCallback"*)** %21, i64 3
  %23 = load void (%"class.blink::mojom::blink::PluginRegistry"*, i1, %class.scoped_refptr*, %"class.base::OnceCallback"*)*, void (%"class.blink::mojom::blink::PluginRegistry"*, i1, %class.scoped_refptr*, %"class.base::OnceCallback"*)** %22, align 8
  call void %23(%"class.blink::mojom::blink::PluginRegistry"* %11, i1 zeroext %1, %class.scoped_refptr* dereferenceable(8) %2, %"class.base::OnceCallback"* nonnull %6) #10
  %24 = getelementptr inbounds %"class.base::OnceCallback", %"class.base::OnceCallback"* %6, i64 0, i32 0
  call void @_ZN4base8internal12CallbackBaseD2Ev(%"class.base::internal::CallbackBase"* nonnull %24) #10
  %25 = bitcast %"class.base::Location"* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %25) #10
  call void @_ZN4base8Location7CurrentEPKcS2_i(%"class.base::Location"* nonnull sret %7, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str, i64 0, i64 0), i8* getelementptr inbounds ([85 x i8], [85 x i8]* @.str.1, i64 0, i64 0), i32 56) #10
  call void @_ZN4base7RunLoop3RunERKNS_8LocationE(%"class.base::RunLoop"* nonnull %5, %"class.base::Location"* nonnull dereferenceable(32) %7) #10
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %25) #10
  call void @_ZN4base7RunLoopD1Ev(%"class.base::RunLoop"* nonnull %5) #10
  call void @llvm.lifetime.end.p0i8(i64 48, i8* nonnull %9) #10
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #4

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #4

declare void @_ZN4base7RunLoopC1ENS0_4TypeE(%"class.base::RunLoop"*, i32) unnamed_addr #5

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #4

declare void @_ZN4base7RunLoop3RunERKNS_8LocationE(%"class.base::RunLoop"*, %"class.base::Location"* dereferenceable(32)) local_unnamed_addr #5

declare void @_ZN4base8Location7CurrentEPKcS2_i(%"class.base::Location"* sret, i8*, i8*, i32) local_unnamed_addr #5

; Function Attrs: nounwind
declare void @_ZN4base7RunLoopD1Ev(%"class.base::RunLoop"*) unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN5blink5mojom5blink14PluginRegistryD2Ev(%"class.blink::mojom::blink::PluginRegistry"*) unnamed_addr #0 comdat align 2 {
  ret void
}

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZN5blink5mojom5blink35PluginRegistryInterceptorForTestingD0Ev(%"class.blink::mojom::blink::PluginRegistryInterceptorForTesting"*) unnamed_addr #6 comdat align 2 {
  tail call void @llvm.trap() #12
  unreachable
}

declare zeroext i1 @_ZN5blink5mojom5blink14PluginRegistry10GetPluginsEbRK13scoped_refptrIKNS_14SecurityOriginEEPN3WTF6VectorIN4mojo9StructPtrINS1_10PluginInfoEEELj0ENS9_18PartitionAllocatorEEE(%"class.blink::mojom::blink::PluginRegistry"*, i1 zeroext, %class.scoped_refptr* dereferenceable(8), %"class.WTF::Vector"*) unnamed_addr #5

declare void @__cxa_pure_virtual() unnamed_addr

; Function Attrs: cold noreturn nounwind
declare void @llvm.trap() #7

; Function Attrs: nounwind ssp uwtable
define internal void @"_ZN4base8internal7InvokerINS0_9BindStateIZN5blink5mojom5blink25PluginRegistryAsyncWaiter10GetPluginsEbRK13scoped_refptrIKNS3_14SecurityOriginEEPN3WTF6VectorIN4mojo9StructPtrINS5_10PluginInfoEEELj0ENSD_18PartitionAllocatorEEEE3$_0JPNS_7RunLoopESL_EEEFvSK_EE7RunOnceEPNS0_13BindStateBaseEOSK_"(%"class.base::internal::BindStateBase"* nocapture readonly, %"class.WTF::Vector"* nocapture dereferenceable(16)) #0 align 2 {
  %3 = getelementptr inbounds %"class.base::internal::BindStateBase", %"class.base::internal::BindStateBase"* %0, i64 1, i32 1
  %4 = bitcast void ()** %3 to %"class.base::RunLoop"**
  %5 = getelementptr inbounds void ()*, void ()** %3, i64 1
  %6 = bitcast void ()** %5 to %"class.WTF::Vector"**
  %7 = load %"class.base::RunLoop"*, %"class.base::RunLoop"** %4, align 8
  %8 = load %"class.WTF::Vector"*, %"class.WTF::Vector"** %6, align 8
  %9 = bitcast %"class.WTF::Vector"* %1 to i64*
  %10 = load i64, i64* %9, align 8
  store atomic i64 0, i64* %9 monotonic, align 8
  %11 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %1, i64 0, i32 0, i32 0, i32 1
  %12 = load i32, i32* %11, align 4
  store i32 0, i32* %11, align 4
  %13 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %1, i64 0, i32 0, i32 0, i32 2
  %14 = load i32, i32* %13, align 4
  store i32 0, i32* %13, align 4
  %15 = bitcast %"class.WTF::Vector"* %8 to i64*
  %16 = load i64, i64* %15, align 8
  store atomic i64 %10, i64* %15 monotonic, align 8
  %17 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %8, i64 0, i32 0, i32 0, i32 1
  store i32 %12, i32* %17, align 4
  %18 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %8, i64 0, i32 0, i32 0, i32 2
  %19 = load i32, i32* %18, align 4
  store i32 %14, i32* %18, align 4
  tail call void @_ZN4base7RunLoop4QuitEv(%"class.base::RunLoop"* %7) #10
  %20 = inttoptr i64 %16 to %"class.mojo::StructPtr"*
  %21 = icmp eq i64 %16, 0
  br i1 %21, label %39, label %22, !prof !7

22:                                               ; preds = %2
  %23 = icmp eq i32 %19, 0
  br i1 %23, label %37, label %24, !prof !8

24:                                               ; preds = %22
  %25 = zext i32 %19 to i64
  %26 = getelementptr inbounds %"class.mojo::StructPtr", %"class.mojo::StructPtr"* %20, i64 %25
  br label %27

27:                                               ; preds = %34, %24
  %28 = phi %"class.mojo::StructPtr"* [ %35, %34 ], [ %20, %24 ]
  %29 = getelementptr inbounds %"class.mojo::StructPtr", %"class.mojo::StructPtr"* %28, i64 0, i32 0, i32 0, i32 0, i32 0
  %30 = load %"class.blink::mojom::blink::PluginInfo"*, %"class.blink::mojom::blink::PluginInfo"** %29, align 8
  store %"class.blink::mojom::blink::PluginInfo"* null, %"class.blink::mojom::blink::PluginInfo"** %29, align 8
  %31 = icmp eq %"class.blink::mojom::blink::PluginInfo"* %30, null
  br i1 %31, label %34, label %32

32:                                               ; preds = %27
  tail call void @_ZN5blink5mojom5blink10PluginInfoD1Ev(%"class.blink::mojom::blink::PluginInfo"* nonnull %30) #10
  %33 = bitcast %"class.blink::mojom::blink::PluginInfo"* %30 to i8*
  tail call void @_ZdlPv(i8* %33) #11
  br label %34

34:                                               ; preds = %32, %27
  %35 = getelementptr inbounds %"class.mojo::StructPtr", %"class.mojo::StructPtr"* %28, i64 1
  %36 = icmp eq %"class.mojo::StructPtr"* %35, %26
  br i1 %36, label %37, label %27

37:                                               ; preds = %34, %22
  %38 = inttoptr i64 %16 to i8*
  tail call void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8* %38) #10
  br label %39

39:                                               ; preds = %2, %37
  ret void
}

declare void @_ZN4base7RunLoop4QuitEv(%"class.base::RunLoop"*) local_unnamed_addr #5

; Function Attrs: nounwind
declare void @_ZN5blink5mojom5blink10PluginInfoD1Ev(%"class.blink::mojom::blink::PluginInfo"*) unnamed_addr #1

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #8

declare void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8*) local_unnamed_addr #5

; Function Attrs: nobuiltin nofree
declare noalias nonnull i8* @_Znwm(i64) local_unnamed_addr #9

; Function Attrs: nounwind ssp uwtable
define internal void @"_ZN4base8internal9BindStateIZN5blink5mojom5blink25PluginRegistryAsyncWaiter10GetPluginsEbRK13scoped_refptrIKNS2_14SecurityOriginEEPN3WTF6VectorIN4mojo9StructPtrINS4_10PluginInfoEEELj0ENSC_18PartitionAllocatorEEEE3$_0JPNS_7RunLoopESK_EE7DestroyEPKNS0_13BindStateBaseE"(%"class.base::internal::BindStateBase"*) #0 align 2 {
  %2 = icmp eq %"class.base::internal::BindStateBase"* %0, null
  br i1 %2, label %5, label %3

3:                                                ; preds = %1
  %4 = bitcast %"class.base::internal::BindStateBase"* %0 to i8*
  tail call void @_ZdlPv(i8* %4) #11
  br label %5

5:                                                ; preds = %3, %1
  ret void
}

declare void @_ZN4base8internal13BindStateBaseC2EPFvvEPFvPKS1_E(%"class.base::internal::BindStateBase"*, void ()*, void (%"class.base::internal::BindStateBase"*)*) unnamed_addr #5

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nofree norecurse nounwind ssp uwtable writeonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { norecurse nounwind readnone ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { argmemonly nounwind }
attributes #5 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { inlinehint nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { cold noreturn nounwind }
attributes #8 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #9 = { nobuiltin nofree "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #10 = { nounwind }
attributes #11 = { builtin nounwind }
attributes #12 = { noreturn nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{!3, !5}
!3 = distinct !{!3, !4, !"_ZN4base8internal8BindImplINS_12OnceCallbackEZN5blink5mojom5blink25PluginRegistryAsyncWaiter10GetPluginsEbRK13scoped_refptrIKNS3_14SecurityOriginEEPN3WTF6VectorIN4mojo9StructPtrINS5_10PluginInfoEEELj0ENSD_18PartitionAllocatorEEEE3$_0JPNS_7RunLoopERSL_EEEDcOT0_DpOT1_: argument 0"}
!4 = distinct !{!4, !"_ZN4base8internal8BindImplINS_12OnceCallbackEZN5blink5mojom5blink25PluginRegistryAsyncWaiter10GetPluginsEbRK13scoped_refptrIKNS3_14SecurityOriginEEPN3WTF6VectorIN4mojo9StructPtrINS5_10PluginInfoEEELj0ENSD_18PartitionAllocatorEEEE3$_0JPNS_7RunLoopERSL_EEEDcOT0_DpOT1_"}
!5 = distinct !{!5, !6, !"_ZN4base8BindOnceIZN5blink5mojom5blink25PluginRegistryAsyncWaiter10GetPluginsEbRK13scoped_refptrIKNS1_14SecurityOriginEEPN3WTF6VectorIN4mojo9StructPtrINS3_10PluginInfoEEELj0ENSB_18PartitionAllocatorEEEE3$_0JPNS_7RunLoopERSJ_EEENS_12OnceCallbackINS_8internal14BindTypeHelperIT_JDpT0_EE14UnboundRunTypeEEEOSR_DpOSS_: argument 0"}
!6 = distinct !{!6, !"_ZN4base8BindOnceIZN5blink5mojom5blink25PluginRegistryAsyncWaiter10GetPluginsEbRK13scoped_refptrIKNS1_14SecurityOriginEEPN3WTF6VectorIN4mojo9StructPtrINS3_10PluginInfoEEELj0ENSB_18PartitionAllocatorEEEE3$_0JPNS_7RunLoopERSJ_EEENS_12OnceCallbackINS_8internal14BindTypeHelperIT_JDpT0_EE14UnboundRunTypeEEEOSR_DpOSS_"}
!7 = !{!"branch_weights", i32 2000, i32 1}
!8 = !{!"branch_weights", i32 1, i32 2000}
