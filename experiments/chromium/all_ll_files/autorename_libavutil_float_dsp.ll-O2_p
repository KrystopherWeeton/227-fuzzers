; ModuleID = '../../third_party/ffmpeg/libavutil/autorename_libavutil_float_dsp.c'
source_filename = "../../third_party/ffmpeg/libavutil/autorename_libavutil_float_dsp.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"
module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"
module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%struct.AVFloatDSPContext = type { void (float*, float*, float*, i32)*, void (float*, float*, float, i32)*, void (double*, double*, double, i32)*, void (float*, float*, float, i32)*, void (double*, double*, double, i32)*, void (float*, float*, float*, float*, i32)*, void (float*, float*, float*, float*, i32)*, void (float*, float*, float*, i32)*, void (float*, float*, i32)*, float (float*, float*, i32)*, void (double*, double*, double*, i32)* }

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden float @avpriv_scalarproduct_float_c(float* nocapture readonly, float* nocapture readonly, i32) #0 {
  %4 = icmp sgt i32 %2, 0
  br i1 %4, label %5, label %64

5:                                                ; preds = %3
  %6 = zext i32 %2 to i64
  %7 = add nsw i64 %6, -1
  %8 = and i64 %6, 3
  %9 = icmp ult i64 %7, 3
  br i1 %9, label %46, label %10

10:                                               ; preds = %5
  %11 = sub nsw i64 %6, %8
  br label %12

12:                                               ; preds = %12, %10
  %13 = phi i64 [ 0, %10 ], [ %43, %12 ]
  %14 = phi float [ 0.000000e+00, %10 ], [ %42, %12 ]
  %15 = phi i64 [ %11, %10 ], [ %44, %12 ]
  %16 = getelementptr inbounds float, float* %0, i64 %13
  %17 = load float, float* %16, align 4
  %18 = getelementptr inbounds float, float* %1, i64 %13
  %19 = load float, float* %18, align 4
  %20 = fmul nsz float %17, %19
  %21 = fadd nsz float %14, %20
  %22 = or i64 %13, 1
  %23 = getelementptr inbounds float, float* %0, i64 %22
  %24 = load float, float* %23, align 4
  %25 = getelementptr inbounds float, float* %1, i64 %22
  %26 = load float, float* %25, align 4
  %27 = fmul nsz float %24, %26
  %28 = fadd nsz float %21, %27
  %29 = or i64 %13, 2
  %30 = getelementptr inbounds float, float* %0, i64 %29
  %31 = load float, float* %30, align 4
  %32 = getelementptr inbounds float, float* %1, i64 %29
  %33 = load float, float* %32, align 4
  %34 = fmul nsz float %31, %33
  %35 = fadd nsz float %28, %34
  %36 = or i64 %13, 3
  %37 = getelementptr inbounds float, float* %0, i64 %36
  %38 = load float, float* %37, align 4
  %39 = getelementptr inbounds float, float* %1, i64 %36
  %40 = load float, float* %39, align 4
  %41 = fmul nsz float %38, %40
  %42 = fadd nsz float %35, %41
  %43 = add nuw nsw i64 %13, 4
  %44 = add i64 %15, -4
  %45 = icmp eq i64 %44, 0
  br i1 %45, label %46, label %12

46:                                               ; preds = %12, %5
  %47 = phi float [ undef, %5 ], [ %42, %12 ]
  %48 = phi i64 [ 0, %5 ], [ %43, %12 ]
  %49 = phi float [ 0.000000e+00, %5 ], [ %42, %12 ]
  %50 = icmp eq i64 %8, 0
  br i1 %50, label %64, label %51

51:                                               ; preds = %46, %51
  %52 = phi i64 [ %61, %51 ], [ %48, %46 ]
  %53 = phi float [ %60, %51 ], [ %49, %46 ]
  %54 = phi i64 [ %62, %51 ], [ %8, %46 ]
  %55 = getelementptr inbounds float, float* %0, i64 %52
  %56 = load float, float* %55, align 4
  %57 = getelementptr inbounds float, float* %1, i64 %52
  %58 = load float, float* %57, align 4
  %59 = fmul nsz float %56, %58
  %60 = fadd nsz float %53, %59
  %61 = add nuw nsw i64 %52, 1
  %62 = add i64 %54, -1
  %63 = icmp eq i64 %62, 0
  br i1 %63, label %64, label %51, !llvm.loop !2

64:                                               ; preds = %46, %51, %3
  %65 = phi float [ 0.000000e+00, %3 ], [ %47, %46 ], [ %60, %51 ]
  ret float %65
}

; Function Attrs: cold nounwind optsize ssp uwtable
define hidden %struct.AVFloatDSPContext* @avpriv_float_dsp_alloc(i32) local_unnamed_addr #1 {
  %2 = tail call noalias i8* @av_mallocz(i64 88) #4
  %3 = bitcast i8* %2 to %struct.AVFloatDSPContext*
  %4 = icmp eq i8* %2, null
  br i1 %4, label %25, label %5

5:                                                ; preds = %1
  %6 = bitcast i8* %2 to void (float*, float*, float*, i32)**
  store void (float*, float*, float*, i32)* @vector_fmul_c, void (float*, float*, float*, i32)** %6, align 8
  %7 = getelementptr inbounds i8, i8* %2, i64 80
  %8 = bitcast i8* %7 to void (double*, double*, double*, i32)**
  store void (double*, double*, double*, i32)* @vector_dmul_c, void (double*, double*, double*, i32)** %8, align 8
  %9 = getelementptr inbounds i8, i8* %2, i64 8
  %10 = bitcast i8* %9 to void (float*, float*, float, i32)**
  store void (float*, float*, float, i32)* @vector_fmac_scalar_c, void (float*, float*, float, i32)** %10, align 8
  %11 = getelementptr inbounds i8, i8* %2, i64 24
  %12 = bitcast i8* %11 to void (float*, float*, float, i32)**
  store void (float*, float*, float, i32)* @vector_fmul_scalar_c, void (float*, float*, float, i32)** %12, align 8
  %13 = getelementptr inbounds i8, i8* %2, i64 16
  %14 = bitcast i8* %13 to void (double*, double*, double, i32)**
  store void (double*, double*, double, i32)* @vector_dmac_scalar_c, void (double*, double*, double, i32)** %14, align 8
  %15 = getelementptr inbounds i8, i8* %2, i64 32
  %16 = bitcast i8* %15 to void (double*, double*, double, i32)**
  store void (double*, double*, double, i32)* @vector_dmul_scalar_c, void (double*, double*, double, i32)** %16, align 8
  %17 = getelementptr inbounds i8, i8* %2, i64 40
  %18 = bitcast i8* %17 to <2 x void (float*, float*, float*, float*, i32)*>*
  store <2 x void (float*, float*, float*, float*, i32)*> <void (float*, float*, float*, float*, i32)* @vector_fmul_window_c, void (float*, float*, float*, float*, i32)* @vector_fmul_add_c>, <2 x void (float*, float*, float*, float*, i32)*>* %18, align 8
  %19 = getelementptr inbounds i8, i8* %2, i64 56
  %20 = bitcast i8* %19 to void (float*, float*, float*, i32)**
  store void (float*, float*, float*, i32)* @vector_fmul_reverse_c, void (float*, float*, float*, i32)** %20, align 8
  %21 = getelementptr inbounds i8, i8* %2, i64 64
  %22 = bitcast i8* %21 to void (float*, float*, i32)**
  store void (float*, float*, i32)* @butterflies_float_c, void (float*, float*, i32)** %22, align 8
  %23 = getelementptr inbounds i8, i8* %2, i64 72
  %24 = bitcast i8* %23 to float (float*, float*, i32)**
  store float (float*, float*, i32)* @avpriv_scalarproduct_float_c, float (float*, float*, i32)** %24, align 8
  tail call void @ff_float_dsp_init_x86(%struct.AVFloatDSPContext* nonnull %3) #4
  br label %25

25:                                               ; preds = %1, %5
  %26 = phi %struct.AVFloatDSPContext* [ %3, %5 ], [ null, %1 ]
  ret %struct.AVFloatDSPContext* %26
}

declare noalias i8* @av_mallocz(i64) local_unnamed_addr #2

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal void @vector_fmul_c(float* nocapture, float* nocapture readonly, float* nocapture readonly, i32) #3 {
  %5 = icmp sgt i32 %3, 0
  br i1 %5, label %6, label %61

6:                                                ; preds = %4
  %7 = zext i32 %3 to i64
  %8 = add nsw i64 %7, -1
  %9 = and i64 %7, 3
  %10 = icmp ult i64 %8, 3
  br i1 %10, label %46, label %11

11:                                               ; preds = %6
  %12 = sub nsw i64 %7, %9
  br label %13

13:                                               ; preds = %13, %11
  %14 = phi i64 [ 0, %11 ], [ %43, %13 ]
  %15 = phi i64 [ %12, %11 ], [ %44, %13 ]
  %16 = getelementptr inbounds float, float* %1, i64 %14
  %17 = load float, float* %16, align 4
  %18 = getelementptr inbounds float, float* %2, i64 %14
  %19 = load float, float* %18, align 4
  %20 = fmul nsz float %17, %19
  %21 = getelementptr inbounds float, float* %0, i64 %14
  store float %20, float* %21, align 4
  %22 = or i64 %14, 1
  %23 = getelementptr inbounds float, float* %1, i64 %22
  %24 = load float, float* %23, align 4
  %25 = getelementptr inbounds float, float* %2, i64 %22
  %26 = load float, float* %25, align 4
  %27 = fmul nsz float %24, %26
  %28 = getelementptr inbounds float, float* %0, i64 %22
  store float %27, float* %28, align 4
  %29 = or i64 %14, 2
  %30 = getelementptr inbounds float, float* %1, i64 %29
  %31 = load float, float* %30, align 4
  %32 = getelementptr inbounds float, float* %2, i64 %29
  %33 = load float, float* %32, align 4
  %34 = fmul nsz float %31, %33
  %35 = getelementptr inbounds float, float* %0, i64 %29
  store float %34, float* %35, align 4
  %36 = or i64 %14, 3
  %37 = getelementptr inbounds float, float* %1, i64 %36
  %38 = load float, float* %37, align 4
  %39 = getelementptr inbounds float, float* %2, i64 %36
  %40 = load float, float* %39, align 4
  %41 = fmul nsz float %38, %40
  %42 = getelementptr inbounds float, float* %0, i64 %36
  store float %41, float* %42, align 4
  %43 = add nuw nsw i64 %14, 4
  %44 = add i64 %15, -4
  %45 = icmp eq i64 %44, 0
  br i1 %45, label %46, label %13

46:                                               ; preds = %13, %6
  %47 = phi i64 [ 0, %6 ], [ %43, %13 ]
  %48 = icmp eq i64 %9, 0
  br i1 %48, label %61, label %49

49:                                               ; preds = %46, %49
  %50 = phi i64 [ %58, %49 ], [ %47, %46 ]
  %51 = phi i64 [ %59, %49 ], [ %9, %46 ]
  %52 = getelementptr inbounds float, float* %1, i64 %50
  %53 = load float, float* %52, align 4
  %54 = getelementptr inbounds float, float* %2, i64 %50
  %55 = load float, float* %54, align 4
  %56 = fmul nsz float %53, %55
  %57 = getelementptr inbounds float, float* %0, i64 %50
  store float %56, float* %57, align 4
  %58 = add nuw nsw i64 %50, 1
  %59 = add i64 %51, -1
  %60 = icmp eq i64 %59, 0
  br i1 %60, label %61, label %49, !llvm.loop !4

61:                                               ; preds = %46, %49, %4
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal void @vector_dmul_c(double* nocapture, double* nocapture readonly, double* nocapture readonly, i32) #3 {
  %5 = icmp sgt i32 %3, 0
  br i1 %5, label %6, label %61

6:                                                ; preds = %4
  %7 = zext i32 %3 to i64
  %8 = add nsw i64 %7, -1
  %9 = and i64 %7, 3
  %10 = icmp ult i64 %8, 3
  br i1 %10, label %46, label %11

11:                                               ; preds = %6
  %12 = sub nsw i64 %7, %9
  br label %13

13:                                               ; preds = %13, %11
  %14 = phi i64 [ 0, %11 ], [ %43, %13 ]
  %15 = phi i64 [ %12, %11 ], [ %44, %13 ]
  %16 = getelementptr inbounds double, double* %1, i64 %14
  %17 = load double, double* %16, align 8
  %18 = getelementptr inbounds double, double* %2, i64 %14
  %19 = load double, double* %18, align 8
  %20 = fmul nsz double %17, %19
  %21 = getelementptr inbounds double, double* %0, i64 %14
  store double %20, double* %21, align 8
  %22 = or i64 %14, 1
  %23 = getelementptr inbounds double, double* %1, i64 %22
  %24 = load double, double* %23, align 8
  %25 = getelementptr inbounds double, double* %2, i64 %22
  %26 = load double, double* %25, align 8
  %27 = fmul nsz double %24, %26
  %28 = getelementptr inbounds double, double* %0, i64 %22
  store double %27, double* %28, align 8
  %29 = or i64 %14, 2
  %30 = getelementptr inbounds double, double* %1, i64 %29
  %31 = load double, double* %30, align 8
  %32 = getelementptr inbounds double, double* %2, i64 %29
  %33 = load double, double* %32, align 8
  %34 = fmul nsz double %31, %33
  %35 = getelementptr inbounds double, double* %0, i64 %29
  store double %34, double* %35, align 8
  %36 = or i64 %14, 3
  %37 = getelementptr inbounds double, double* %1, i64 %36
  %38 = load double, double* %37, align 8
  %39 = getelementptr inbounds double, double* %2, i64 %36
  %40 = load double, double* %39, align 8
  %41 = fmul nsz double %38, %40
  %42 = getelementptr inbounds double, double* %0, i64 %36
  store double %41, double* %42, align 8
  %43 = add nuw nsw i64 %14, 4
  %44 = add i64 %15, -4
  %45 = icmp eq i64 %44, 0
  br i1 %45, label %46, label %13

46:                                               ; preds = %13, %6
  %47 = phi i64 [ 0, %6 ], [ %43, %13 ]
  %48 = icmp eq i64 %9, 0
  br i1 %48, label %61, label %49

49:                                               ; preds = %46, %49
  %50 = phi i64 [ %58, %49 ], [ %47, %46 ]
  %51 = phi i64 [ %59, %49 ], [ %9, %46 ]
  %52 = getelementptr inbounds double, double* %1, i64 %50
  %53 = load double, double* %52, align 8
  %54 = getelementptr inbounds double, double* %2, i64 %50
  %55 = load double, double* %54, align 8
  %56 = fmul nsz double %53, %55
  %57 = getelementptr inbounds double, double* %0, i64 %50
  store double %56, double* %57, align 8
  %58 = add nuw nsw i64 %50, 1
  %59 = add i64 %51, -1
  %60 = icmp eq i64 %59, 0
  br i1 %60, label %61, label %49, !llvm.loop !5

61:                                               ; preds = %46, %49, %4
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal void @vector_fmac_scalar_c(float* nocapture, float* nocapture readonly, float, i32) #3 {
  %5 = icmp sgt i32 %3, 0
  br i1 %5, label %6, label %41

6:                                                ; preds = %4
  %7 = zext i32 %3 to i64
  %8 = and i64 %7, 1
  %9 = icmp eq i32 %3, 1
  br i1 %9, label %31, label %10

10:                                               ; preds = %6
  %11 = sub nsw i64 %7, %8
  br label %12

12:                                               ; preds = %12, %10
  %13 = phi i64 [ 0, %10 ], [ %28, %12 ]
  %14 = phi i64 [ %11, %10 ], [ %29, %12 ]
  %15 = getelementptr inbounds float, float* %1, i64 %13
  %16 = load float, float* %15, align 4
  %17 = fmul nsz float %16, %2
  %18 = getelementptr inbounds float, float* %0, i64 %13
  %19 = load float, float* %18, align 4
  %20 = fadd nsz float %19, %17
  store float %20, float* %18, align 4
  %21 = or i64 %13, 1
  %22 = getelementptr inbounds float, float* %1, i64 %21
  %23 = load float, float* %22, align 4
  %24 = fmul nsz float %23, %2
  %25 = getelementptr inbounds float, float* %0, i64 %21
  %26 = load float, float* %25, align 4
  %27 = fadd nsz float %26, %24
  store float %27, float* %25, align 4
  %28 = add nuw nsw i64 %13, 2
  %29 = add i64 %14, -2
  %30 = icmp eq i64 %29, 0
  br i1 %30, label %31, label %12

31:                                               ; preds = %12, %6
  %32 = phi i64 [ 0, %6 ], [ %28, %12 ]
  %33 = icmp eq i64 %8, 0
  br i1 %33, label %41, label %34

34:                                               ; preds = %31
  %35 = getelementptr inbounds float, float* %1, i64 %32
  %36 = load float, float* %35, align 4
  %37 = fmul nsz float %36, %2
  %38 = getelementptr inbounds float, float* %0, i64 %32
  %39 = load float, float* %38, align 4
  %40 = fadd nsz float %39, %37
  store float %40, float* %38, align 4
  br label %41

41:                                               ; preds = %34, %31, %4
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal void @vector_fmul_scalar_c(float* nocapture, float* nocapture readonly, float, i32) #3 {
  %5 = icmp sgt i32 %3, 0
  br i1 %5, label %6, label %51

6:                                                ; preds = %4
  %7 = zext i32 %3 to i64
  %8 = add nsw i64 %7, -1
  %9 = and i64 %7, 3
  %10 = icmp ult i64 %8, 3
  br i1 %10, label %38, label %11

11:                                               ; preds = %6
  %12 = sub nsw i64 %7, %9
  br label %13

13:                                               ; preds = %13, %11
  %14 = phi i64 [ 0, %11 ], [ %35, %13 ]
  %15 = phi i64 [ %12, %11 ], [ %36, %13 ]
  %16 = getelementptr inbounds float, float* %1, i64 %14
  %17 = load float, float* %16, align 4
  %18 = fmul nsz float %17, %2
  %19 = getelementptr inbounds float, float* %0, i64 %14
  store float %18, float* %19, align 4
  %20 = or i64 %14, 1
  %21 = getelementptr inbounds float, float* %1, i64 %20
  %22 = load float, float* %21, align 4
  %23 = fmul nsz float %22, %2
  %24 = getelementptr inbounds float, float* %0, i64 %20
  store float %23, float* %24, align 4
  %25 = or i64 %14, 2
  %26 = getelementptr inbounds float, float* %1, i64 %25
  %27 = load float, float* %26, align 4
  %28 = fmul nsz float %27, %2
  %29 = getelementptr inbounds float, float* %0, i64 %25
  store float %28, float* %29, align 4
  %30 = or i64 %14, 3
  %31 = getelementptr inbounds float, float* %1, i64 %30
  %32 = load float, float* %31, align 4
  %33 = fmul nsz float %32, %2
  %34 = getelementptr inbounds float, float* %0, i64 %30
  store float %33, float* %34, align 4
  %35 = add nuw nsw i64 %14, 4
  %36 = add i64 %15, -4
  %37 = icmp eq i64 %36, 0
  br i1 %37, label %38, label %13

38:                                               ; preds = %13, %6
  %39 = phi i64 [ 0, %6 ], [ %35, %13 ]
  %40 = icmp eq i64 %9, 0
  br i1 %40, label %51, label %41

41:                                               ; preds = %38, %41
  %42 = phi i64 [ %48, %41 ], [ %39, %38 ]
  %43 = phi i64 [ %49, %41 ], [ %9, %38 ]
  %44 = getelementptr inbounds float, float* %1, i64 %42
  %45 = load float, float* %44, align 4
  %46 = fmul nsz float %45, %2
  %47 = getelementptr inbounds float, float* %0, i64 %42
  store float %46, float* %47, align 4
  %48 = add nuw nsw i64 %42, 1
  %49 = add i64 %43, -1
  %50 = icmp eq i64 %49, 0
  br i1 %50, label %51, label %41, !llvm.loop !6

51:                                               ; preds = %38, %41, %4
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal void @vector_dmac_scalar_c(double* nocapture, double* nocapture readonly, double, i32) #3 {
  %5 = icmp sgt i32 %3, 0
  br i1 %5, label %6, label %41

6:                                                ; preds = %4
  %7 = zext i32 %3 to i64
  %8 = and i64 %7, 1
  %9 = icmp eq i32 %3, 1
  br i1 %9, label %31, label %10

10:                                               ; preds = %6
  %11 = sub nsw i64 %7, %8
  br label %12

12:                                               ; preds = %12, %10
  %13 = phi i64 [ 0, %10 ], [ %28, %12 ]
  %14 = phi i64 [ %11, %10 ], [ %29, %12 ]
  %15 = getelementptr inbounds double, double* %1, i64 %13
  %16 = load double, double* %15, align 8
  %17 = fmul nsz double %16, %2
  %18 = getelementptr inbounds double, double* %0, i64 %13
  %19 = load double, double* %18, align 8
  %20 = fadd nsz double %19, %17
  store double %20, double* %18, align 8
  %21 = or i64 %13, 1
  %22 = getelementptr inbounds double, double* %1, i64 %21
  %23 = load double, double* %22, align 8
  %24 = fmul nsz double %23, %2
  %25 = getelementptr inbounds double, double* %0, i64 %21
  %26 = load double, double* %25, align 8
  %27 = fadd nsz double %26, %24
  store double %27, double* %25, align 8
  %28 = add nuw nsw i64 %13, 2
  %29 = add i64 %14, -2
  %30 = icmp eq i64 %29, 0
  br i1 %30, label %31, label %12

31:                                               ; preds = %12, %6
  %32 = phi i64 [ 0, %6 ], [ %28, %12 ]
  %33 = icmp eq i64 %8, 0
  br i1 %33, label %41, label %34

34:                                               ; preds = %31
  %35 = getelementptr inbounds double, double* %1, i64 %32
  %36 = load double, double* %35, align 8
  %37 = fmul nsz double %36, %2
  %38 = getelementptr inbounds double, double* %0, i64 %32
  %39 = load double, double* %38, align 8
  %40 = fadd nsz double %39, %37
  store double %40, double* %38, align 8
  br label %41

41:                                               ; preds = %34, %31, %4
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal void @vector_dmul_scalar_c(double* nocapture, double* nocapture readonly, double, i32) #3 {
  %5 = icmp sgt i32 %3, 0
  br i1 %5, label %6, label %51

6:                                                ; preds = %4
  %7 = zext i32 %3 to i64
  %8 = add nsw i64 %7, -1
  %9 = and i64 %7, 3
  %10 = icmp ult i64 %8, 3
  br i1 %10, label %38, label %11

11:                                               ; preds = %6
  %12 = sub nsw i64 %7, %9
  br label %13

13:                                               ; preds = %13, %11
  %14 = phi i64 [ 0, %11 ], [ %35, %13 ]
  %15 = phi i64 [ %12, %11 ], [ %36, %13 ]
  %16 = getelementptr inbounds double, double* %1, i64 %14
  %17 = load double, double* %16, align 8
  %18 = fmul nsz double %17, %2
  %19 = getelementptr inbounds double, double* %0, i64 %14
  store double %18, double* %19, align 8
  %20 = or i64 %14, 1
  %21 = getelementptr inbounds double, double* %1, i64 %20
  %22 = load double, double* %21, align 8
  %23 = fmul nsz double %22, %2
  %24 = getelementptr inbounds double, double* %0, i64 %20
  store double %23, double* %24, align 8
  %25 = or i64 %14, 2
  %26 = getelementptr inbounds double, double* %1, i64 %25
  %27 = load double, double* %26, align 8
  %28 = fmul nsz double %27, %2
  %29 = getelementptr inbounds double, double* %0, i64 %25
  store double %28, double* %29, align 8
  %30 = or i64 %14, 3
  %31 = getelementptr inbounds double, double* %1, i64 %30
  %32 = load double, double* %31, align 8
  %33 = fmul nsz double %32, %2
  %34 = getelementptr inbounds double, double* %0, i64 %30
  store double %33, double* %34, align 8
  %35 = add nuw nsw i64 %14, 4
  %36 = add i64 %15, -4
  %37 = icmp eq i64 %36, 0
  br i1 %37, label %38, label %13

38:                                               ; preds = %13, %6
  %39 = phi i64 [ 0, %6 ], [ %35, %13 ]
  %40 = icmp eq i64 %9, 0
  br i1 %40, label %51, label %41

41:                                               ; preds = %38, %41
  %42 = phi i64 [ %48, %41 ], [ %39, %38 ]
  %43 = phi i64 [ %49, %41 ], [ %9, %38 ]
  %44 = getelementptr inbounds double, double* %1, i64 %42
  %45 = load double, double* %44, align 8
  %46 = fmul nsz double %45, %2
  %47 = getelementptr inbounds double, double* %0, i64 %42
  store double %46, double* %47, align 8
  %48 = add nuw nsw i64 %42, 1
  %49 = add i64 %43, -1
  %50 = icmp eq i64 %49, 0
  br i1 %50, label %51, label %41, !llvm.loop !7

51:                                               ; preds = %38, %41, %4
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal void @vector_fmul_window_c(float* nocapture, float* nocapture readonly, float* nocapture readonly, float* nocapture readonly, i32) #3 {
  %6 = sext i32 %4 to i64
  %7 = getelementptr inbounds float, float* %0, i64 %6
  %8 = getelementptr inbounds float, float* %3, i64 %6
  %9 = getelementptr inbounds float, float* %1, i64 %6
  %10 = icmp sgt i32 %4, 0
  br i1 %10, label %11, label %36

11:                                               ; preds = %5
  %12 = sub nsw i32 0, %4
  %13 = sext i32 %12 to i64
  br label %14

14:                                               ; preds = %11, %14
  %15 = phi i64 [ %13, %11 ], [ %34, %14 ]
  %16 = phi i64 [ %6, %11 ], [ %17, %14 ]
  %17 = add nsw i64 %16, -1
  %18 = getelementptr inbounds float, float* %9, i64 %15
  %19 = load float, float* %18, align 4
  %20 = getelementptr inbounds float, float* %2, i64 %17
  %21 = load float, float* %20, align 4
  %22 = getelementptr inbounds float, float* %8, i64 %15
  %23 = load float, float* %22, align 4
  %24 = getelementptr inbounds float, float* %8, i64 %17
  %25 = load float, float* %24, align 4
  %26 = fmul nsz float %19, %25
  %27 = fmul nsz float %21, %23
  %28 = fsub nsz float %26, %27
  %29 = getelementptr inbounds float, float* %7, i64 %15
  store float %28, float* %29, align 4
  %30 = fmul nsz float %19, %23
  %31 = fmul nsz float %21, %25
  %32 = fadd nsz float %30, %31
  %33 = getelementptr inbounds float, float* %7, i64 %17
  store float %32, float* %33, align 4
  %34 = add nsw i64 %15, 1
  %35 = icmp slt i64 %34, 0
  br i1 %35, label %14, label %36

36:                                               ; preds = %14, %5
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal void @vector_fmul_add_c(float* nocapture, float* nocapture readonly, float* nocapture readonly, float* nocapture readonly, i32) #3 {
  %6 = icmp sgt i32 %4, 0
  br i1 %6, label %7, label %51

7:                                                ; preds = %5
  %8 = zext i32 %4 to i64
  %9 = and i64 %8, 1
  %10 = icmp eq i32 %4, 1
  br i1 %10, label %38, label %11

11:                                               ; preds = %7
  %12 = sub nsw i64 %8, %9
  br label %13

13:                                               ; preds = %13, %11
  %14 = phi i64 [ 0, %11 ], [ %35, %13 ]
  %15 = phi i64 [ %12, %11 ], [ %36, %13 ]
  %16 = getelementptr inbounds float, float* %1, i64 %14
  %17 = load float, float* %16, align 4
  %18 = getelementptr inbounds float, float* %2, i64 %14
  %19 = load float, float* %18, align 4
  %20 = fmul nsz float %17, %19
  %21 = getelementptr inbounds float, float* %3, i64 %14
  %22 = load float, float* %21, align 4
  %23 = fadd nsz float %20, %22
  %24 = getelementptr inbounds float, float* %0, i64 %14
  store float %23, float* %24, align 4
  %25 = or i64 %14, 1
  %26 = getelementptr inbounds float, float* %1, i64 %25
  %27 = load float, float* %26, align 4
  %28 = getelementptr inbounds float, float* %2, i64 %25
  %29 = load float, float* %28, align 4
  %30 = fmul nsz float %27, %29
  %31 = getelementptr inbounds float, float* %3, i64 %25
  %32 = load float, float* %31, align 4
  %33 = fadd nsz float %30, %32
  %34 = getelementptr inbounds float, float* %0, i64 %25
  store float %33, float* %34, align 4
  %35 = add nuw nsw i64 %14, 2
  %36 = add i64 %15, -2
  %37 = icmp eq i64 %36, 0
  br i1 %37, label %38, label %13

38:                                               ; preds = %13, %7
  %39 = phi i64 [ 0, %7 ], [ %35, %13 ]
  %40 = icmp eq i64 %9, 0
  br i1 %40, label %51, label %41

41:                                               ; preds = %38
  %42 = getelementptr inbounds float, float* %1, i64 %39
  %43 = load float, float* %42, align 4
  %44 = getelementptr inbounds float, float* %2, i64 %39
  %45 = load float, float* %44, align 4
  %46 = fmul nsz float %43, %45
  %47 = getelementptr inbounds float, float* %3, i64 %39
  %48 = load float, float* %47, align 4
  %49 = fadd nsz float %46, %48
  %50 = getelementptr inbounds float, float* %0, i64 %39
  store float %49, float* %50, align 4
  br label %51

51:                                               ; preds = %41, %38, %5
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal void @vector_fmul_reverse_c(float* nocapture, float* nocapture readonly, float* nocapture readonly, i32) #3 {
  %5 = add nsw i32 %3, -1
  %6 = sext i32 %5 to i64
  %7 = getelementptr inbounds float, float* %2, i64 %6
  %8 = icmp sgt i32 %3, 0
  br i1 %8, label %9, label %47

9:                                                ; preds = %4
  %10 = zext i32 %3 to i64
  %11 = and i64 %10, 1
  %12 = icmp eq i32 %3, 1
  br i1 %12, label %36, label %13

13:                                               ; preds = %9
  %14 = sub nsw i64 %10, %11
  br label %15

15:                                               ; preds = %15, %13
  %16 = phi i64 [ 0, %13 ], [ %33, %15 ]
  %17 = phi i64 [ %14, %13 ], [ %34, %15 ]
  %18 = getelementptr inbounds float, float* %1, i64 %16
  %19 = load float, float* %18, align 4
  %20 = sub nsw i64 0, %16
  %21 = getelementptr inbounds float, float* %7, i64 %20
  %22 = load float, float* %21, align 4
  %23 = fmul nsz float %19, %22
  %24 = getelementptr inbounds float, float* %0, i64 %16
  store float %23, float* %24, align 4
  %25 = or i64 %16, 1
  %26 = getelementptr inbounds float, float* %1, i64 %25
  %27 = load float, float* %26, align 4
  %28 = xor i64 %16, -1
  %29 = getelementptr inbounds float, float* %7, i64 %28
  %30 = load float, float* %29, align 4
  %31 = fmul nsz float %27, %30
  %32 = getelementptr inbounds float, float* %0, i64 %25
  store float %31, float* %32, align 4
  %33 = add nuw nsw i64 %16, 2
  %34 = add i64 %17, -2
  %35 = icmp eq i64 %34, 0
  br i1 %35, label %36, label %15

36:                                               ; preds = %15, %9
  %37 = phi i64 [ 0, %9 ], [ %33, %15 ]
  %38 = icmp eq i64 %11, 0
  br i1 %38, label %47, label %39

39:                                               ; preds = %36
  %40 = getelementptr inbounds float, float* %1, i64 %37
  %41 = load float, float* %40, align 4
  %42 = sub nsw i64 0, %37
  %43 = getelementptr inbounds float, float* %7, i64 %42
  %44 = load float, float* %43, align 4
  %45 = fmul nsz float %41, %44
  %46 = getelementptr inbounds float, float* %0, i64 %37
  store float %45, float* %46, align 4
  br label %47

47:                                               ; preds = %39, %36, %4
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal void @butterflies_float_c(float* noalias nocapture, float* noalias nocapture, i32) #3 {
  %4 = icmp sgt i32 %2, 0
  br i1 %4, label %5, label %40

5:                                                ; preds = %3
  %6 = zext i32 %2 to i64
  %7 = and i64 %6, 1
  %8 = icmp eq i32 %2, 1
  br i1 %8, label %30, label %9

9:                                                ; preds = %5
  %10 = sub nsw i64 %6, %7
  br label %11

11:                                               ; preds = %11, %9
  %12 = phi i64 [ 0, %9 ], [ %27, %11 ]
  %13 = phi i64 [ %10, %9 ], [ %28, %11 ]
  %14 = getelementptr inbounds float, float* %0, i64 %12
  %15 = load float, float* %14, align 4
  %16 = getelementptr inbounds float, float* %1, i64 %12
  %17 = load float, float* %16, align 4
  %18 = fsub nsz float %15, %17
  %19 = fadd nsz float %15, %17
  store float %19, float* %14, align 4
  store float %18, float* %16, align 4
  %20 = or i64 %12, 1
  %21 = getelementptr inbounds float, float* %0, i64 %20
  %22 = load float, float* %21, align 4
  %23 = getelementptr inbounds float, float* %1, i64 %20
  %24 = load float, float* %23, align 4
  %25 = fsub nsz float %22, %24
  %26 = fadd nsz float %22, %24
  store float %26, float* %21, align 4
  store float %25, float* %23, align 4
  %27 = add nuw nsw i64 %12, 2
  %28 = add i64 %13, -2
  %29 = icmp eq i64 %28, 0
  br i1 %29, label %30, label %11

30:                                               ; preds = %11, %5
  %31 = phi i64 [ 0, %5 ], [ %27, %11 ]
  %32 = icmp eq i64 %7, 0
  br i1 %32, label %40, label %33

33:                                               ; preds = %30
  %34 = getelementptr inbounds float, float* %0, i64 %31
  %35 = load float, float* %34, align 4
  %36 = getelementptr inbounds float, float* %1, i64 %31
  %37 = load float, float* %36, align 4
  %38 = fsub nsz float %35, %37
  %39 = fadd nsz float %35, %37
  store float %39, float* %34, align 4
  store float %38, float* %36, align 4
  br label %40

40:                                               ; preds = %33, %30, %3
  ret void
}

declare void @ff_float_dsp_init_x86(%struct.AVFloatDSPContext*) local_unnamed_addr #2

attributes #0 = { norecurse nounwind readonly ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="true" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { cold nounwind optsize ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="true" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="true" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nofree norecurse nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="true" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = distinct !{!2, !3}
!3 = !{!"llvm.loop.unroll.disable"}
!4 = distinct !{!4, !3}
!5 = distinct !{!5, !3}
!6 = distinct !{!6, !3}
!7 = distinct !{!7, !3}
