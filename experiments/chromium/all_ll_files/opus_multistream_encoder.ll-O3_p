; ModuleID = '../../third_party/opus/src/src/opus_multistream_encoder.c'
source_filename = "../../third_party/opus/src/src/opus_multistream_encoder.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"
module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%struct.VorbisLayout = type { i32, i32, [8 x i8] }
%struct.OpusCustomMode = type { i32, i32, i32, i32, [4 x float], i16*, i32, i32, i32, i32, i8*, i16*, float*, %struct.mdct_lookup, %struct.PulseCache }
%struct.mdct_lookup = type { i32, i32, [4 x %struct.kiss_fft_state*], float* }
%struct.kiss_fft_state = type { i32, float, i32, [16 x i16], i16*, %struct.kiss_twiddle_cpx*, %struct.arch_fft_state* }
%struct.kiss_twiddle_cpx = type { float, float }
%struct.arch_fft_state = type { i32, i8* }
%struct.PulseCache = type { i32, i16*, i8*, i8* }
%struct.OpusMSEncoder = type { %struct.ChannelLayout, i32, i32, i32, i32, i32, i32 }
%struct.ChannelLayout = type { i32, i32, i32, [256 x i8] }
%struct.OpusEncoder = type opaque
%struct.OpusRepacketizer = type { i8, i32, [48 x i8*], [48 x i16], i32 }
%struct.__va_list_tag = type { i32, i32, i8*, i8* }

@.str = private unnamed_addr constant [52 x i8] c"assertion failed: nb_frames*freq_size == frame_size\00", align 1
@.str.1 = private unnamed_addr constant [58 x i8] c"../../third_party/opus/src/src/opus_multistream_encoder.c\00", align 1
@vorbis_mappings = internal unnamed_addr constant [8 x %struct.VorbisLayout] [%struct.VorbisLayout { i32 1, i32 0, [8 x i8] zeroinitializer }, %struct.VorbisLayout { i32 1, i32 1, [8 x i8] c"\00\01\00\00\00\00\00\00" }, %struct.VorbisLayout { i32 2, i32 1, [8 x i8] c"\00\02\01\00\00\00\00\00" }, %struct.VorbisLayout { i32 2, i32 2, [8 x i8] c"\00\01\02\03\00\00\00\00" }, %struct.VorbisLayout { i32 3, i32 2, [8 x i8] c"\00\04\01\02\03\00\00\00" }, %struct.VorbisLayout { i32 4, i32 2, [8 x i8] c"\00\04\01\02\03\05\00\00" }, %struct.VorbisLayout { i32 4, i32 3, [8 x i8] c"\00\04\01\02\03\05\06\00" }, %struct.VorbisLayout { i32 5, i32 3, [8 x i8] c"\00\06\01\02\03\04\05\07" }], align 16
@logSum.diff_table = internal unnamed_addr constant <{ [9 x float], [8 x float] }> <{ [9 x float] [float 5.000000e-01, float 0x3FD2B80380000000, float 0x3FC49A77E0000000, float 0x3FB5C01A40000000, float 0x3FA663F640000000, float 0x3F96BAD620000000, float 0x3F86E795A0000000, float 0x3F76FE4940000000, float 0x3F6709D220000000], [8 x float] zeroinitializer }>, align 16

; Function Attrs: nounwind ssp uwtable
define hidden void @surround_analysis(%struct.OpusCustomMode*, i8*, float*, float* nocapture, float*, i32, i32, i32, i32, void (float*, i32, i8*, i32, i32, i32, i8*)* nocapture, i32) local_unnamed_addr #0 {
  %12 = alloca [8 x i32], align 16
  %13 = alloca [21 x float], align 16
  %14 = alloca [3 x [21 x float]], align 16
  %15 = alloca [21 x float], align 16
  %16 = bitcast [8 x i32]* %12 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %16) #6
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %16, i8 0, i64 32, i1 false)
  %17 = bitcast [21 x float]* %13 to i8*
  call void @llvm.lifetime.start.p0i8(i64 84, i8* nonnull %17) #6
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %17, i8 -1, i64 84, i1 false)
  %18 = bitcast [3 x [21 x float]]* %14 to i8*
  call void @llvm.lifetime.start.p0i8(i64 252, i8* nonnull %18) #6
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %18, i8 -1, i64 252, i1 false)
  %19 = tail call i32 @resampling_factor(i32 %8) #6
  %20 = mul nsw i32 %19, %5
  %21 = icmp slt i32 %20, 960
  %22 = select i1 %21, i32 %20, i32 960
  %23 = getelementptr inbounds %struct.OpusCustomMode, %struct.OpusCustomMode* %0, i64 0, i32 6
  %24 = load i32, i32* %23, align 8
  %25 = icmp sgt i32 %24, 0
  br i1 %25, label %26, label %36

26:                                               ; preds = %11
  %27 = getelementptr inbounds %struct.OpusCustomMode, %struct.OpusCustomMode* %0, i64 0, i32 8
  %28 = load i32, i32* %27, align 8
  br label %29

29:                                               ; preds = %26, %33
  %30 = phi i32 [ 0, %26 ], [ %34, %33 ]
  %31 = shl i32 %28, %30
  %32 = icmp eq i32 %31, %20
  br i1 %32, label %36, label %33

33:                                               ; preds = %29
  %34 = add nuw nsw i32 %30, 1
  %35 = icmp slt i32 %34, %24
  br i1 %35, label %29, label %36

36:                                               ; preds = %33, %29, %11
  %37 = phi i32 [ 0, %11 ], [ %30, %29 ], [ %34, %33 ]
  %38 = add nsw i32 %20, %6
  %39 = sext i32 %38 to i64
  %40 = shl nsw i64 %39, 2
  %41 = alloca float, i64 %39, align 16
  %42 = bitcast float* %41 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %42, i8 -86, i64 %40, i1 false)
  %43 = sext i32 %5 to i64
  %44 = shl nsw i64 %43, 2
  %45 = alloca float, i64 %43, align 16
  %46 = bitcast float* %45 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %46, i8 -86, i64 %44, i1 false)
  %47 = sext i32 %22 to i64
  %48 = shl nsw i64 %47, 2
  %49 = alloca float, i64 %47, align 16
  %50 = bitcast float* %49 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %50, i8 -86, i64 %48, i1 false)
  switch i32 %7, label %66 [
    i32 4, label %51
    i32 6, label %53
    i32 5, label %53
    i32 3, label %53
    i32 7, label %57
    i32 8, label %62
  ]

51:                                               ; preds = %36
  %52 = bitcast [8 x i32]* %12 to <4 x i32>*
  store <4 x i32> <i32 1, i32 3, i32 1, i32 3>, <4 x i32>* %52, align 16
  br label %66

53:                                               ; preds = %36, %36, %36
  %54 = bitcast [8 x i32]* %12 to <4 x i32>*
  store <4 x i32> <i32 1, i32 2, i32 3, i32 1>, <4 x i32>* %54, align 16
  %55 = getelementptr inbounds [8 x i32], [8 x i32]* %12, i64 0, i64 4
  store i32 3, i32* %55, align 16
  %56 = getelementptr inbounds [8 x i32], [8 x i32]* %12, i64 0, i64 5
  store i32 0, i32* %56, align 4
  br label %66

57:                                               ; preds = %36
  %58 = bitcast [8 x i32]* %12 to <4 x i32>*
  store <4 x i32> <i32 1, i32 2, i32 3, i32 1>, <4 x i32>* %58, align 16
  %59 = getelementptr inbounds [8 x i32], [8 x i32]* %12, i64 0, i64 4
  store i32 3, i32* %59, align 16
  %60 = getelementptr inbounds [8 x i32], [8 x i32]* %12, i64 0, i64 5
  store i32 2, i32* %60, align 4
  %61 = getelementptr inbounds [8 x i32], [8 x i32]* %12, i64 0, i64 6
  store i32 0, i32* %61, align 8
  br label %66

62:                                               ; preds = %36
  %63 = bitcast [8 x i32]* %12 to <4 x i32>*
  store <4 x i32> <i32 1, i32 2, i32 3, i32 1>, <4 x i32>* %63, align 16
  %64 = getelementptr inbounds [8 x i32], [8 x i32]* %12, i64 0, i64 4
  %65 = bitcast i32* %64 to <4 x i32>*
  store <4 x i32> <i32 3, i32 1, i32 3, i32 0>, <4 x i32>* %65, align 16
  br label %66

66:                                               ; preds = %36, %51, %53, %57, %62
  %67 = bitcast [3 x [21 x float]]* %14 to <4 x float>*
  store <4 x float> <float -2.800000e+01, float -2.800000e+01, float -2.800000e+01, float -2.800000e+01>, <4 x float>* %67, align 16
  %68 = getelementptr inbounds [3 x [21 x float]], [3 x [21 x float]]* %14, i64 0, i64 0, i64 4
  %69 = bitcast float* %68 to <4 x float>*
  store <4 x float> <float -2.800000e+01, float -2.800000e+01, float -2.800000e+01, float -2.800000e+01>, <4 x float>* %69, align 16
  %70 = getelementptr inbounds [3 x [21 x float]], [3 x [21 x float]]* %14, i64 0, i64 0, i64 8
  %71 = bitcast float* %70 to <4 x float>*
  store <4 x float> <float -2.800000e+01, float -2.800000e+01, float -2.800000e+01, float -2.800000e+01>, <4 x float>* %71, align 16
  %72 = getelementptr inbounds [3 x [21 x float]], [3 x [21 x float]]* %14, i64 0, i64 0, i64 12
  %73 = getelementptr inbounds [3 x [21 x float]], [3 x [21 x float]]* %14, i64 0, i64 0, i64 14
  %74 = getelementptr inbounds [3 x [21 x float]], [3 x [21 x float]]* %14, i64 0, i64 0, i64 15
  %75 = bitcast float* %72 to <4 x float>*
  store <4 x float> <float -2.800000e+01, float -2.800000e+01, float -2.800000e+01, float -2.800000e+01>, <4 x float>* %75, align 16
  %76 = getelementptr inbounds [3 x [21 x float]], [3 x [21 x float]]* %14, i64 0, i64 0, i64 16
  %77 = bitcast float* %76 to <4 x float>*
  store <4 x float> <float -2.800000e+01, float -2.800000e+01, float -2.800000e+01, float -2.800000e+01>, <4 x float>* %77, align 16
  %78 = getelementptr inbounds [3 x [21 x float]], [3 x [21 x float]]* %14, i64 0, i64 0, i64 20
  %79 = getelementptr inbounds [3 x [21 x float]], [3 x [21 x float]]* %14, i64 0, i64 1, i64 0
  %80 = bitcast float* %78 to <4 x float>*
  store <4 x float> <float -2.800000e+01, float -2.800000e+01, float -2.800000e+01, float -2.800000e+01>, <4 x float>* %80, align 16
  %81 = getelementptr inbounds [3 x [21 x float]], [3 x [21 x float]]* %14, i64 0, i64 1, i64 3
  %82 = getelementptr inbounds [3 x [21 x float]], [3 x [21 x float]]* %14, i64 0, i64 1, i64 4
  %83 = bitcast float* %81 to <4 x float>*
  store <4 x float> <float -2.800000e+01, float -2.800000e+01, float -2.800000e+01, float -2.800000e+01>, <4 x float>* %83, align 4
  %84 = getelementptr inbounds [3 x [21 x float]], [3 x [21 x float]]* %14, i64 0, i64 1, i64 7
  %85 = getelementptr inbounds [3 x [21 x float]], [3 x [21 x float]]* %14, i64 0, i64 1, i64 8
  %86 = bitcast float* %84 to <4 x float>*
  store <4 x float> <float -2.800000e+01, float -2.800000e+01, float -2.800000e+01, float -2.800000e+01>, <4 x float>* %86, align 4
  %87 = getelementptr inbounds [3 x [21 x float]], [3 x [21 x float]]* %14, i64 0, i64 1, i64 11
  %88 = getelementptr inbounds [3 x [21 x float]], [3 x [21 x float]]* %14, i64 0, i64 1, i64 12
  %89 = bitcast float* %87 to <4 x float>*
  store <4 x float> <float -2.800000e+01, float -2.800000e+01, float -2.800000e+01, float -2.800000e+01>, <4 x float>* %89, align 4
  %90 = getelementptr inbounds [3 x [21 x float]], [3 x [21 x float]]* %14, i64 0, i64 1, i64 15
  %91 = getelementptr inbounds [3 x [21 x float]], [3 x [21 x float]]* %14, i64 0, i64 1, i64 16
  %92 = bitcast float* %90 to <4 x float>*
  store <4 x float> <float -2.800000e+01, float -2.800000e+01, float -2.800000e+01, float -2.800000e+01>, <4 x float>* %92, align 4
  %93 = getelementptr inbounds [3 x [21 x float]], [3 x [21 x float]]* %14, i64 0, i64 1, i64 19
  %94 = getelementptr inbounds [3 x [21 x float]], [3 x [21 x float]]* %14, i64 0, i64 1, i64 20
  %95 = getelementptr inbounds [3 x [21 x float]], [3 x [21 x float]]* %14, i64 0, i64 2, i64 0
  %96 = bitcast float* %93 to <4 x float>*
  store <4 x float> <float -2.800000e+01, float -2.800000e+01, float -2.800000e+01, float -2.800000e+01>, <4 x float>* %96, align 4
  %97 = getelementptr inbounds [3 x [21 x float]], [3 x [21 x float]]* %14, i64 0, i64 2, i64 2
  %98 = getelementptr inbounds [3 x [21 x float]], [3 x [21 x float]]* %14, i64 0, i64 2, i64 4
  %99 = bitcast float* %97 to <4 x float>*
  store <4 x float> <float -2.800000e+01, float -2.800000e+01, float -2.800000e+01, float -2.800000e+01>, <4 x float>* %99, align 8
  %100 = getelementptr inbounds [3 x [21 x float]], [3 x [21 x float]]* %14, i64 0, i64 2, i64 6
  %101 = getelementptr inbounds [3 x [21 x float]], [3 x [21 x float]]* %14, i64 0, i64 2, i64 8
  %102 = bitcast float* %100 to <4 x float>*
  store <4 x float> <float -2.800000e+01, float -2.800000e+01, float -2.800000e+01, float -2.800000e+01>, <4 x float>* %102, align 8
  %103 = getelementptr inbounds [3 x [21 x float]], [3 x [21 x float]]* %14, i64 0, i64 2, i64 10
  %104 = getelementptr inbounds [3 x [21 x float]], [3 x [21 x float]]* %14, i64 0, i64 2, i64 12
  %105 = bitcast float* %103 to <4 x float>*
  store <4 x float> <float -2.800000e+01, float -2.800000e+01, float -2.800000e+01, float -2.800000e+01>, <4 x float>* %105, align 8
  %106 = getelementptr inbounds [3 x [21 x float]], [3 x [21 x float]]* %14, i64 0, i64 2, i64 14
  %107 = getelementptr inbounds [3 x [21 x float]], [3 x [21 x float]]* %14, i64 0, i64 2, i64 16
  %108 = bitcast float* %106 to <4 x float>*
  store <4 x float> <float -2.800000e+01, float -2.800000e+01, float -2.800000e+01, float -2.800000e+01>, <4 x float>* %108, align 8
  %109 = getelementptr inbounds [3 x [21 x float]], [3 x [21 x float]]* %14, i64 0, i64 2, i64 18
  store float -2.800000e+01, float* %109, align 8
  %110 = getelementptr inbounds [3 x [21 x float]], [3 x [21 x float]]* %14, i64 0, i64 2, i64 19
  store float -2.800000e+01, float* %110, align 4
  %111 = getelementptr inbounds [3 x [21 x float]], [3 x [21 x float]]* %14, i64 0, i64 2, i64 20
  store float -2.800000e+01, float* %111, align 8
  %112 = icmp sgt i32 %7, 0
  br i1 %112, label %113, label %205

113:                                              ; preds = %66
  %114 = sdiv i32 %20, %22
  %115 = mul nsw i32 %114, %22
  %116 = icmp eq i32 %115, %20
  %117 = sext i32 %6 to i64
  %118 = shl nsw i64 %117, 2
  %119 = getelementptr inbounds float, float* %41, i64 %117
  %120 = getelementptr inbounds %struct.OpusCustomMode, %struct.OpusCustomMode* %0, i64 0, i32 4, i64 0
  %121 = getelementptr inbounds [21 x float], [21 x float]* %13, i64 0, i64 0
  %122 = icmp sgt i32 %114, 0
  %123 = bitcast [21 x float]* %15 to i8*
  %124 = getelementptr inbounds %struct.OpusCustomMode, %struct.OpusCustomMode* %0, i64 0, i32 13
  %125 = getelementptr inbounds %struct.OpusCustomMode, %struct.OpusCustomMode* %0, i64 0, i32 12
  %126 = icmp eq i32 %19, 1
  %127 = sitofp i32 %19 to float
  %128 = getelementptr inbounds [21 x float], [21 x float]* %15, i64 0, i64 0
  %129 = sext i32 %20 to i64
  %130 = getelementptr inbounds float, float* %41, i64 %129
  %131 = bitcast float* %130 to i8*
  br i1 %116, label %132, label %351

132:                                              ; preds = %113
  %133 = zext i32 %7 to i64
  %134 = zext i32 %114 to i64
  %135 = getelementptr inbounds [21 x float], [21 x float]* %13, i64 0, i64 4
  %136 = getelementptr inbounds [21 x float], [21 x float]* %15, i64 0, i64 4
  %137 = getelementptr inbounds [21 x float], [21 x float]* %13, i64 0, i64 8
  %138 = getelementptr inbounds [21 x float], [21 x float]* %15, i64 0, i64 8
  %139 = getelementptr inbounds [21 x float], [21 x float]* %13, i64 0, i64 12
  %140 = getelementptr inbounds [21 x float], [21 x float]* %15, i64 0, i64 12
  %141 = getelementptr inbounds [21 x float], [21 x float]* %13, i64 0, i64 16
  %142 = getelementptr inbounds [21 x float], [21 x float]* %15, i64 0, i64 16
  %143 = getelementptr inbounds [21 x float], [21 x float]* %13, i64 0, i64 20
  %144 = getelementptr inbounds [21 x float], [21 x float]* %15, i64 0, i64 20
  %145 = zext i32 %114 to i64
  %146 = getelementptr inbounds [21 x float], [21 x float]* %13, i64 0, i64 4
  %147 = getelementptr inbounds [21 x float], [21 x float]* %15, i64 0, i64 4
  %148 = getelementptr inbounds [21 x float], [21 x float]* %13, i64 0, i64 8
  %149 = getelementptr inbounds [21 x float], [21 x float]* %15, i64 0, i64 8
  %150 = getelementptr inbounds [21 x float], [21 x float]* %13, i64 0, i64 12
  %151 = getelementptr inbounds [21 x float], [21 x float]* %15, i64 0, i64 12
  %152 = getelementptr inbounds [21 x float], [21 x float]* %13, i64 0, i64 16
  %153 = getelementptr inbounds [21 x float], [21 x float]* %15, i64 0, i64 16
  %154 = getelementptr inbounds [21 x float], [21 x float]* %13, i64 0, i64 20
  %155 = getelementptr inbounds [21 x float], [21 x float]* %15, i64 0, i64 20
  %156 = insertelement <4 x float> undef, float %127, i32 0
  %157 = shufflevector <4 x float> %156, <4 x float> undef, <4 x i32> zeroinitializer
  %158 = insertelement <4 x float> undef, float %127, i32 0
  %159 = shufflevector <4 x float> %158, <4 x float> undef, <4 x i32> zeroinitializer
  %160 = bitcast [21 x float]* %13 to <4 x float>*
  %161 = bitcast [21 x float]* %15 to <4 x float>*
  %162 = bitcast [21 x float]* %13 to <4 x float>*
  %163 = bitcast float* %135 to <4 x float>*
  %164 = bitcast float* %136 to <4 x float>*
  %165 = bitcast float* %135 to <4 x float>*
  %166 = bitcast float* %137 to <4 x float>*
  %167 = bitcast float* %138 to <4 x float>*
  %168 = bitcast float* %137 to <4 x float>*
  %169 = bitcast float* %139 to <4 x float>*
  %170 = bitcast float* %140 to <4 x float>*
  %171 = bitcast float* %139 to <4 x float>*
  %172 = bitcast float* %141 to <4 x float>*
  %173 = bitcast float* %142 to <4 x float>*
  %174 = bitcast float* %141 to <4 x float>*
  %175 = bitcast [21 x float]* %13 to <4 x float>*
  %176 = bitcast [21 x float]* %15 to <4 x float>*
  %177 = bitcast [21 x float]* %13 to <4 x float>*
  %178 = bitcast float* %146 to <4 x float>*
  %179 = bitcast float* %147 to <4 x float>*
  %180 = bitcast float* %146 to <4 x float>*
  %181 = bitcast float* %148 to <4 x float>*
  %182 = bitcast float* %149 to <4 x float>*
  %183 = bitcast float* %148 to <4 x float>*
  %184 = bitcast float* %150 to <4 x float>*
  %185 = bitcast float* %151 to <4 x float>*
  %186 = bitcast float* %150 to <4 x float>*
  %187 = bitcast float* %152 to <4 x float>*
  %188 = bitcast float* %153 to <4 x float>*
  %189 = bitcast float* %152 to <4 x float>*
  br label %340

190:                                              ; preds = %1034
  %191 = bitcast float* %95 to <4 x float>*
  %192 = load <4 x float>, <4 x float>* %191, align 8
  %193 = bitcast float* %98 to <4 x float>*
  %194 = load <4 x float>, <4 x float>* %193, align 8
  %195 = bitcast float* %101 to <4 x float>*
  %196 = load <4 x float>, <4 x float>* %195, align 8
  %197 = load float, float* %73, align 8
  %198 = load float, float* %74, align 4
  %199 = bitcast float* %104 to <4 x float>*
  %200 = load <4 x float>, <4 x float>* %199, align 8
  %201 = bitcast float* %76 to <4 x float>*
  %202 = load <4 x float>, <4 x float>* %201, align 16
  %203 = bitcast float* %107 to <4 x float>*
  %204 = load <4 x float>, <4 x float>* %203, align 8
  br label %205

205:                                              ; preds = %190, %66
  %206 = phi float [ %198, %190 ], [ -2.800000e+01, %66 ]
  %207 = phi float [ %197, %190 ], [ -2.800000e+01, %66 ]
  %208 = phi <4 x float> [ %192, %190 ], [ <float -2.800000e+01, float -2.800000e+01, float -2.800000e+01, float -2.800000e+01>, %66 ]
  %209 = phi <4 x float> [ %194, %190 ], [ <float -2.800000e+01, float -2.800000e+01, float -2.800000e+01, float -2.800000e+01>, %66 ]
  %210 = phi <4 x float> [ %196, %190 ], [ <float -2.800000e+01, float -2.800000e+01, float -2.800000e+01, float -2.800000e+01>, %66 ]
  %211 = phi <4 x float> [ %200, %190 ], [ <float -2.800000e+01, float -2.800000e+01, float -2.800000e+01, float -2.800000e+01>, %66 ]
  %212 = phi <4 x float> [ %202, %190 ], [ <float -2.800000e+01, float -2.800000e+01, float -2.800000e+01, float -2.800000e+01>, %66 ]
  %213 = phi <4 x float> [ %204, %190 ], [ <float -2.800000e+01, float -2.800000e+01, float -2.800000e+01, float -2.800000e+01>, %66 ]
  %214 = bitcast [3 x [21 x float]]* %14 to <4 x float>*
  %215 = load <4 x float>, <4 x float>* %214, align 16
  %216 = fcmp olt <4 x float> %215, %208
  %217 = select <4 x i1> %216, <4 x float> %215, <4 x float> %208
  %218 = bitcast float* %79 to <4 x float>*
  store <4 x float> %217, <4 x float>* %218, align 4
  %219 = bitcast float* %68 to <4 x float>*
  %220 = load <4 x float>, <4 x float>* %219, align 16
  %221 = fcmp olt <4 x float> %220, %209
  %222 = select <4 x i1> %221, <4 x float> %220, <4 x float> %209
  %223 = bitcast float* %82 to <4 x float>*
  store <4 x float> %222, <4 x float>* %223, align 4
  %224 = bitcast float* %70 to <4 x float>*
  %225 = load <4 x float>, <4 x float>* %224, align 16
  %226 = fcmp olt <4 x float> %225, %210
  %227 = select <4 x i1> %226, <4 x float> %225, <4 x float> %210
  %228 = bitcast float* %85 to <4 x float>*
  store <4 x float> %227, <4 x float>* %228, align 4
  %229 = bitcast float* %72 to <2 x float>*
  %230 = load <2 x float>, <2 x float>* %229, align 16
  %231 = extractelement <2 x float> %230, i32 0
  %232 = insertelement <4 x float> undef, float %231, i32 0
  %233 = extractelement <2 x float> %230, i32 1
  %234 = insertelement <4 x float> %232, float %233, i32 1
  %235 = insertelement <4 x float> %234, float %207, i32 2
  %236 = insertelement <4 x float> %235, float %206, i32 3
  %237 = fcmp olt <4 x float> %236, %211
  %238 = select <4 x i1> %237, <4 x float> %236, <4 x float> %211
  %239 = bitcast float* %88 to <4 x float>*
  store <4 x float> %238, <4 x float>* %239, align 4
  %240 = fcmp olt <4 x float> %212, %213
  %241 = select <4 x i1> %240, <4 x float> %212, <4 x float> %213
  %242 = bitcast float* %91 to <4 x float>*
  store <4 x float> %241, <4 x float>* %242, align 4
  %243 = load float, float* %78, align 16
  %244 = load float, float* %111, align 8
  %245 = fcmp olt float %243, %244
  %246 = select i1 %245, float %243, float %244
  store float %246, float* %94, align 4
  %247 = add nsw i32 %7, -1
  %248 = sitofp i32 %247 to float
  %249 = fdiv float 2.000000e+00, %248
  %250 = fpext float %249 to double
  %251 = call double @log(double %250) #6
  %252 = fmul double %251, 0x3FF71547652B82FE
  %253 = fptrunc double %252 to float
  %254 = fmul float %253, 5.000000e-01
  %255 = insertelement <4 x float> undef, float %254, i32 0
  %256 = shufflevector <4 x float> %255, <4 x float> undef, <4 x i32> zeroinitializer
  %257 = bitcast [3 x [21 x float]]* %14 to <4 x float>*
  %258 = load <4 x float>, <4 x float>* %257, align 16
  %259 = fadd <4 x float> %256, %258
  %260 = bitcast [3 x [21 x float]]* %14 to <4 x float>*
  store <4 x float> %259, <4 x float>* %260, align 16
  %261 = getelementptr inbounds [3 x [21 x float]], [3 x [21 x float]]* %14, i64 0, i64 0, i64 4
  %262 = bitcast float* %261 to <4 x float>*
  %263 = load <4 x float>, <4 x float>* %262, align 16
  %264 = fadd <4 x float> %256, %263
  %265 = bitcast float* %261 to <4 x float>*
  store <4 x float> %264, <4 x float>* %265, align 16
  %266 = getelementptr inbounds [3 x [21 x float]], [3 x [21 x float]]* %14, i64 0, i64 0, i64 8
  %267 = bitcast float* %266 to <4 x float>*
  %268 = load <4 x float>, <4 x float>* %267, align 16
  %269 = fadd <4 x float> %256, %268
  %270 = bitcast float* %266 to <4 x float>*
  store <4 x float> %269, <4 x float>* %270, align 16
  %271 = getelementptr inbounds [3 x [21 x float]], [3 x [21 x float]]* %14, i64 0, i64 0, i64 12
  %272 = bitcast float* %271 to <4 x float>*
  %273 = load <4 x float>, <4 x float>* %272, align 16
  %274 = fadd <4 x float> %256, %273
  %275 = bitcast float* %271 to <4 x float>*
  store <4 x float> %274, <4 x float>* %275, align 16
  %276 = getelementptr inbounds [3 x [21 x float]], [3 x [21 x float]]* %14, i64 0, i64 0, i64 16
  %277 = bitcast float* %276 to <4 x float>*
  %278 = load <4 x float>, <4 x float>* %277, align 16
  %279 = fadd <4 x float> %256, %278
  %280 = bitcast float* %276 to <4 x float>*
  store <4 x float> %279, <4 x float>* %280, align 16
  %281 = getelementptr inbounds [3 x [21 x float]], [3 x [21 x float]]* %14, i64 0, i64 0, i64 20
  %282 = load float, float* %281, align 16
  %283 = fadd float %254, %282
  store float %283, float* %281, align 16
  %284 = getelementptr inbounds [3 x [21 x float]], [3 x [21 x float]]* %14, i64 0, i64 1, i64 0
  %285 = bitcast float* %284 to <4 x float>*
  %286 = load <4 x float>, <4 x float>* %285, align 4
  %287 = fadd <4 x float> %256, %286
  %288 = bitcast float* %284 to <4 x float>*
  store <4 x float> %287, <4 x float>* %288, align 4
  %289 = getelementptr inbounds [3 x [21 x float]], [3 x [21 x float]]* %14, i64 0, i64 1, i64 4
  %290 = bitcast float* %289 to <4 x float>*
  %291 = load <4 x float>, <4 x float>* %290, align 4
  %292 = fadd <4 x float> %256, %291
  %293 = bitcast float* %289 to <4 x float>*
  store <4 x float> %292, <4 x float>* %293, align 4
  %294 = getelementptr inbounds [3 x [21 x float]], [3 x [21 x float]]* %14, i64 0, i64 1, i64 8
  %295 = bitcast float* %294 to <4 x float>*
  %296 = load <4 x float>, <4 x float>* %295, align 4
  %297 = fadd <4 x float> %256, %296
  %298 = bitcast float* %294 to <4 x float>*
  store <4 x float> %297, <4 x float>* %298, align 4
  %299 = getelementptr inbounds [3 x [21 x float]], [3 x [21 x float]]* %14, i64 0, i64 1, i64 12
  %300 = bitcast float* %299 to <4 x float>*
  %301 = load <4 x float>, <4 x float>* %300, align 4
  %302 = fadd <4 x float> %256, %301
  %303 = bitcast float* %299 to <4 x float>*
  store <4 x float> %302, <4 x float>* %303, align 4
  %304 = getelementptr inbounds [3 x [21 x float]], [3 x [21 x float]]* %14, i64 0, i64 1, i64 16
  %305 = bitcast float* %304 to <4 x float>*
  %306 = load <4 x float>, <4 x float>* %305, align 4
  %307 = fadd <4 x float> %256, %306
  %308 = bitcast float* %304 to <4 x float>*
  store <4 x float> %307, <4 x float>* %308, align 4
  %309 = getelementptr inbounds [3 x [21 x float]], [3 x [21 x float]]* %14, i64 0, i64 1, i64 20
  %310 = load float, float* %309, align 4
  %311 = fadd float %254, %310
  store float %311, float* %309, align 4
  %312 = getelementptr inbounds [3 x [21 x float]], [3 x [21 x float]]* %14, i64 0, i64 2, i64 0
  %313 = bitcast float* %312 to <4 x float>*
  %314 = load <4 x float>, <4 x float>* %313, align 8
  %315 = fadd <4 x float> %256, %314
  %316 = bitcast float* %312 to <4 x float>*
  store <4 x float> %315, <4 x float>* %316, align 8
  %317 = getelementptr inbounds [3 x [21 x float]], [3 x [21 x float]]* %14, i64 0, i64 2, i64 4
  %318 = bitcast float* %317 to <4 x float>*
  %319 = load <4 x float>, <4 x float>* %318, align 8
  %320 = fadd <4 x float> %256, %319
  %321 = bitcast float* %317 to <4 x float>*
  store <4 x float> %320, <4 x float>* %321, align 8
  %322 = getelementptr inbounds [3 x [21 x float]], [3 x [21 x float]]* %14, i64 0, i64 2, i64 8
  %323 = bitcast float* %322 to <4 x float>*
  %324 = load <4 x float>, <4 x float>* %323, align 8
  %325 = fadd <4 x float> %256, %324
  %326 = bitcast float* %322 to <4 x float>*
  store <4 x float> %325, <4 x float>* %326, align 8
  %327 = getelementptr inbounds [3 x [21 x float]], [3 x [21 x float]]* %14, i64 0, i64 2, i64 12
  %328 = bitcast float* %327 to <4 x float>*
  %329 = load <4 x float>, <4 x float>* %328, align 8
  %330 = fadd <4 x float> %256, %329
  %331 = bitcast float* %327 to <4 x float>*
  store <4 x float> %330, <4 x float>* %331, align 8
  %332 = getelementptr inbounds [3 x [21 x float]], [3 x [21 x float]]* %14, i64 0, i64 2, i64 16
  %333 = bitcast float* %332 to <4 x float>*
  %334 = load <4 x float>, <4 x float>* %333, align 8
  %335 = fadd <4 x float> %256, %334
  %336 = bitcast float* %332 to <4 x float>*
  store <4 x float> %335, <4 x float>* %336, align 8
  %337 = getelementptr inbounds [3 x [21 x float]], [3 x [21 x float]]* %14, i64 0, i64 2, i64 20
  %338 = load float, float* %337, align 8
  %339 = fadd float %254, %338
  store float %339, float* %337, align 8
  br i1 %112, label %1037, label %1104

340:                                              ; preds = %1034, %132
  %341 = phi i64 [ 0, %132 ], [ %1035, %1034 ]
  %342 = mul nsw i64 %341, %117
  %343 = getelementptr inbounds float, float* %3, i64 %342
  %344 = bitcast float* %343 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 16 %42, i8* align 4 %344, i64 %118, i1 false)
  %345 = trunc i64 %341 to i32
  call void %9(float* nonnull %45, i32 1, i8* %1, i32 %7, i32 %345, i32 %5, i8* null) #6
  %346 = getelementptr inbounds float, float* %4, i64 %341
  call void @celt_preemphasis(float* nonnull %45, float* %119, i32 %20, i32 1, i32 %19, float* %120, float* %346, i32 0) #6
  %347 = call float @celt_inner_prod_sse(float* nonnull %41, float* nonnull %41, i32 %38) #6
  %348 = fcmp uge float %347, 0x43ABC16D60000000
  %349 = fcmp uno float %347, 0.000000e+00
  %350 = or i1 %348, %349
  br i1 %350, label %352, label %353

351:                                              ; preds = %113
  call void @celt_fatal(i8* getelementptr inbounds ([52 x i8], [52 x i8]* @.str, i64 0, i64 0), i8* getelementptr inbounds ([58 x i8], [58 x i8]* @.str.1, i64 0, i64 0), i32 266) #9
  unreachable

352:                                              ; preds = %340
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %42, i8 0, i64 %40, i1 false)
  store float 0.000000e+00, float* %346, align 4
  br label %353

353:                                              ; preds = %340, %352
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %17, i8 0, i64 84, i1 false)
  br i1 %122, label %354, label %502

354:                                              ; preds = %353
  br i1 %126, label %355, label %389

355:                                              ; preds = %354, %355
  %356 = phi i64 [ %387, %355 ], [ 0, %354 ]
  call void @llvm.lifetime.start.p0i8(i64 84, i8* nonnull %123) #6
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %123, i8 -1, i64 84, i1 false)
  %357 = mul i64 %356, 960
  %358 = and i64 %357, 4294967232
  %359 = getelementptr inbounds float, float* %41, i64 %358
  %360 = load float*, float** %125, align 8
  %361 = load i32, i32* %23, align 8
  %362 = sub nsw i32 %361, %37
  call void @clt_mdct_forward_c(%struct.mdct_lookup* %124, float* %359, float* nonnull %49, float* %360, i32 %6, i32 %362, i32 1, i32 %10) #6
  call void @compute_band_energies(%struct.OpusCustomMode* %0, float* nonnull %49, float* nonnull %128, i32 21, i32 1, i32 %37, i32 %10) #6
  %363 = load <4 x float>, <4 x float>* %175, align 16
  %364 = load <4 x float>, <4 x float>* %176, align 16
  %365 = fcmp ogt <4 x float> %363, %364
  %366 = select <4 x i1> %365, <4 x float> %363, <4 x float> %364
  store <4 x float> %366, <4 x float>* %177, align 16
  %367 = load <4 x float>, <4 x float>* %178, align 16
  %368 = load <4 x float>, <4 x float>* %179, align 16
  %369 = fcmp ogt <4 x float> %367, %368
  %370 = select <4 x i1> %369, <4 x float> %367, <4 x float> %368
  store <4 x float> %370, <4 x float>* %180, align 16
  %371 = load <4 x float>, <4 x float>* %181, align 16
  %372 = load <4 x float>, <4 x float>* %182, align 16
  %373 = fcmp ogt <4 x float> %371, %372
  %374 = select <4 x i1> %373, <4 x float> %371, <4 x float> %372
  store <4 x float> %374, <4 x float>* %183, align 16
  %375 = load <4 x float>, <4 x float>* %184, align 16
  %376 = load <4 x float>, <4 x float>* %185, align 16
  %377 = fcmp ogt <4 x float> %375, %376
  %378 = select <4 x i1> %377, <4 x float> %375, <4 x float> %376
  store <4 x float> %378, <4 x float>* %186, align 16
  %379 = load <4 x float>, <4 x float>* %187, align 16
  %380 = load <4 x float>, <4 x float>* %188, align 16
  %381 = fcmp ogt <4 x float> %379, %380
  %382 = select <4 x i1> %381, <4 x float> %379, <4 x float> %380
  store <4 x float> %382, <4 x float>* %189, align 16
  %383 = load float, float* %154, align 16
  %384 = load float, float* %155, align 16
  %385 = fcmp ogt float %383, %384
  %386 = select i1 %385, float %383, float %384
  store float %386, float* %154, align 16
  call void @llvm.lifetime.end.p0i8(i64 84, i8* nonnull %123) #6
  %387 = add nuw nsw i64 %356, 1
  %388 = icmp eq i64 %387, %145
  br i1 %388, label %502, label %355

389:                                              ; preds = %354, %475
  %390 = phi i64 [ %500, %475 ], [ 0, %354 ]
  call void @llvm.lifetime.start.p0i8(i64 84, i8* nonnull %123) #6
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %123, i8 -1, i64 84, i1 false)
  %391 = mul i64 %390, 960
  %392 = and i64 %391, 4294967232
  %393 = getelementptr inbounds float, float* %41, i64 %392
  %394 = load float*, float** %125, align 8
  %395 = load i32, i32* %23, align 8
  %396 = sub nsw i32 %395, %37
  call void @clt_mdct_forward_c(%struct.mdct_lookup* %124, float* %393, float* nonnull %49, float* %394, i32 %6, i32 %396, i32 1, i32 %10) #6
  %397 = sdiv i32 %22, %19
  %398 = icmp sgt i32 %397, 0
  br i1 %398, label %399, label %456

399:                                              ; preds = %389
  %400 = zext i32 %397 to i64
  %401 = icmp ult i32 %397, 8
  br i1 %401, label %402, label %404

402:                                              ; preds = %454, %399
  %403 = phi i64 [ 0, %399 ], [ %405, %454 ]
  br label %468

404:                                              ; preds = %399
  %405 = and i64 %400, 4294967288
  %406 = add nsw i64 %405, -8
  %407 = lshr exact i64 %406, 3
  %408 = add nuw nsw i64 %407, 1
  %409 = and i64 %408, 1
  %410 = icmp eq i64 %406, 0
  br i1 %410, label %440, label %411

411:                                              ; preds = %404
  %412 = sub nuw nsw i64 %408, %409
  br label %413

413:                                              ; preds = %413, %411
  %414 = phi i64 [ 0, %411 ], [ %437, %413 ]
  %415 = phi i64 [ %412, %411 ], [ %438, %413 ]
  %416 = getelementptr inbounds float, float* %49, i64 %414
  %417 = bitcast float* %416 to <4 x float>*
  %418 = load <4 x float>, <4 x float>* %417, align 16
  %419 = getelementptr inbounds float, float* %416, i64 4
  %420 = bitcast float* %419 to <4 x float>*
  %421 = load <4 x float>, <4 x float>* %420, align 16
  %422 = fmul <4 x float> %418, %157
  %423 = fmul <4 x float> %421, %159
  %424 = bitcast float* %416 to <4 x float>*
  store <4 x float> %422, <4 x float>* %424, align 16
  %425 = bitcast float* %419 to <4 x float>*
  store <4 x float> %423, <4 x float>* %425, align 16
  %426 = or i64 %414, 8
  %427 = getelementptr inbounds float, float* %49, i64 %426
  %428 = bitcast float* %427 to <4 x float>*
  %429 = load <4 x float>, <4 x float>* %428, align 16
  %430 = getelementptr inbounds float, float* %427, i64 4
  %431 = bitcast float* %430 to <4 x float>*
  %432 = load <4 x float>, <4 x float>* %431, align 16
  %433 = fmul <4 x float> %429, %157
  %434 = fmul <4 x float> %432, %159
  %435 = bitcast float* %427 to <4 x float>*
  store <4 x float> %433, <4 x float>* %435, align 16
  %436 = bitcast float* %430 to <4 x float>*
  store <4 x float> %434, <4 x float>* %436, align 16
  %437 = add i64 %414, 16
  %438 = add i64 %415, -2
  %439 = icmp eq i64 %438, 0
  br i1 %439, label %440, label %413, !llvm.loop !2

440:                                              ; preds = %413, %404
  %441 = phi i64 [ 0, %404 ], [ %437, %413 ]
  %442 = icmp eq i64 %409, 0
  br i1 %442, label %454, label %443

443:                                              ; preds = %440
  %444 = getelementptr inbounds float, float* %49, i64 %441
  %445 = bitcast float* %444 to <4 x float>*
  %446 = load <4 x float>, <4 x float>* %445, align 16
  %447 = getelementptr inbounds float, float* %444, i64 4
  %448 = bitcast float* %447 to <4 x float>*
  %449 = load <4 x float>, <4 x float>* %448, align 16
  %450 = fmul <4 x float> %446, %157
  %451 = fmul <4 x float> %449, %159
  %452 = bitcast float* %444 to <4 x float>*
  store <4 x float> %450, <4 x float>* %452, align 16
  %453 = bitcast float* %447 to <4 x float>*
  store <4 x float> %451, <4 x float>* %453, align 16
  br label %454

454:                                              ; preds = %440, %443
  %455 = icmp eq i64 %405, %400
  br i1 %455, label %456, label %402

456:                                              ; preds = %468, %454, %389
  %457 = phi i32 [ 0, %389 ], [ %397, %454 ], [ %397, %468 ]
  %458 = icmp slt i32 %457, %22
  br i1 %458, label %459, label %475

459:                                              ; preds = %456
  %460 = zext i32 %457 to i64
  %461 = getelementptr float, float* %49, i64 %460
  %462 = bitcast float* %461 to i8*
  %463 = xor i32 %457, -1
  %464 = add i32 %22, %463
  %465 = zext i32 %464 to i64
  %466 = shl nuw nsw i64 %465, 2
  %467 = add nuw nsw i64 %466, 4
  call void @llvm.memset.p0i8.i64(i8* align 4 %462, i8 0, i64 %467, i1 false)
  br label %475

468:                                              ; preds = %402, %468
  %469 = phi i64 [ %473, %468 ], [ %403, %402 ]
  %470 = getelementptr inbounds float, float* %49, i64 %469
  %471 = load float, float* %470, align 4
  %472 = fmul float %471, %127
  store float %472, float* %470, align 4
  %473 = add nuw nsw i64 %469, 1
  %474 = icmp eq i64 %473, %400
  br i1 %474, label %456, label %468, !llvm.loop !4

475:                                              ; preds = %459, %456
  call void @compute_band_energies(%struct.OpusCustomMode* %0, float* nonnull %49, float* nonnull %128, i32 21, i32 1, i32 %37, i32 %10) #6
  %476 = load <4 x float>, <4 x float>* %160, align 16
  %477 = load <4 x float>, <4 x float>* %161, align 16
  %478 = fcmp ogt <4 x float> %476, %477
  %479 = select <4 x i1> %478, <4 x float> %476, <4 x float> %477
  store <4 x float> %479, <4 x float>* %162, align 16
  %480 = load <4 x float>, <4 x float>* %163, align 16
  %481 = load <4 x float>, <4 x float>* %164, align 16
  %482 = fcmp ogt <4 x float> %480, %481
  %483 = select <4 x i1> %482, <4 x float> %480, <4 x float> %481
  store <4 x float> %483, <4 x float>* %165, align 16
  %484 = load <4 x float>, <4 x float>* %166, align 16
  %485 = load <4 x float>, <4 x float>* %167, align 16
  %486 = fcmp ogt <4 x float> %484, %485
  %487 = select <4 x i1> %486, <4 x float> %484, <4 x float> %485
  store <4 x float> %487, <4 x float>* %168, align 16
  %488 = load <4 x float>, <4 x float>* %169, align 16
  %489 = load <4 x float>, <4 x float>* %170, align 16
  %490 = fcmp ogt <4 x float> %488, %489
  %491 = select <4 x i1> %490, <4 x float> %488, <4 x float> %489
  store <4 x float> %491, <4 x float>* %171, align 16
  %492 = load <4 x float>, <4 x float>* %172, align 16
  %493 = load <4 x float>, <4 x float>* %173, align 16
  %494 = fcmp ogt <4 x float> %492, %493
  %495 = select <4 x i1> %494, <4 x float> %492, <4 x float> %493
  store <4 x float> %495, <4 x float>* %174, align 16
  %496 = load float, float* %143, align 16
  %497 = load float, float* %144, align 16
  %498 = fcmp ogt float %496, %497
  %499 = select i1 %498, float %496, float %497
  store float %499, float* %143, align 16
  call void @llvm.lifetime.end.p0i8(i64 84, i8* nonnull %123) #6
  %500 = add nuw nsw i64 %390, 1
  %501 = icmp eq i64 %500, %134
  br i1 %501, label %502, label %389

502:                                              ; preds = %475, %355, %353
  %503 = mul nuw nsw i64 %341, 21
  %504 = and i64 %503, 4294967295
  %505 = getelementptr inbounds float, float* %2, i64 %504
  call void @amp2Log2(%struct.OpusCustomMode* %0, i32 21, i32 21, float* nonnull %121, float* %505, i32 1) #6
  %506 = add nuw nsw i64 %504, 1
  %507 = getelementptr inbounds float, float* %2, i64 %506
  %508 = load float, float* %507, align 4
  %509 = shl i64 %506, 32
  %510 = add i64 %509, -4294967296
  %511 = ashr exact i64 %510, 32
  %512 = getelementptr inbounds float, float* %2, i64 %511
  %513 = load float, float* %512, align 4
  %514 = fadd float %513, -1.000000e+00
  %515 = fcmp ogt float %508, %514
  %516 = select i1 %515, float %508, float %514
  store float %516, float* %507, align 4
  %517 = add nuw nsw i64 %504, 2
  %518 = getelementptr inbounds float, float* %2, i64 %517
  %519 = load float, float* %518, align 4
  %520 = shl i64 %517, 32
  %521 = add i64 %520, -4294967296
  %522 = ashr exact i64 %521, 32
  %523 = getelementptr inbounds float, float* %2, i64 %522
  %524 = load float, float* %523, align 4
  %525 = fadd float %524, -1.000000e+00
  %526 = fcmp ogt float %519, %525
  %527 = select i1 %526, float %519, float %525
  store float %527, float* %518, align 4
  %528 = add nuw nsw i64 %504, 3
  %529 = getelementptr inbounds float, float* %2, i64 %528
  %530 = load float, float* %529, align 4
  %531 = shl i64 %528, 32
  %532 = add i64 %531, -4294967296
  %533 = ashr exact i64 %532, 32
  %534 = getelementptr inbounds float, float* %2, i64 %533
  %535 = load float, float* %534, align 4
  %536 = fadd float %535, -1.000000e+00
  %537 = fcmp ogt float %530, %536
  %538 = select i1 %537, float %530, float %536
  store float %538, float* %529, align 4
  %539 = add nuw nsw i64 %504, 4
  %540 = getelementptr inbounds float, float* %2, i64 %539
  %541 = load float, float* %540, align 4
  %542 = shl i64 %539, 32
  %543 = add i64 %542, -4294967296
  %544 = ashr exact i64 %543, 32
  %545 = getelementptr inbounds float, float* %2, i64 %544
  %546 = load float, float* %545, align 4
  %547 = fadd float %546, -1.000000e+00
  %548 = fcmp ogt float %541, %547
  %549 = select i1 %548, float %541, float %547
  store float %549, float* %540, align 4
  %550 = add nuw nsw i64 %504, 5
  %551 = getelementptr inbounds float, float* %2, i64 %550
  %552 = load float, float* %551, align 4
  %553 = shl i64 %550, 32
  %554 = add i64 %553, -4294967296
  %555 = ashr exact i64 %554, 32
  %556 = getelementptr inbounds float, float* %2, i64 %555
  %557 = load float, float* %556, align 4
  %558 = fadd float %557, -1.000000e+00
  %559 = fcmp ogt float %552, %558
  %560 = select i1 %559, float %552, float %558
  store float %560, float* %551, align 4
  %561 = add nuw nsw i64 %504, 6
  %562 = getelementptr inbounds float, float* %2, i64 %561
  %563 = load float, float* %562, align 4
  %564 = shl i64 %561, 32
  %565 = add i64 %564, -4294967296
  %566 = ashr exact i64 %565, 32
  %567 = getelementptr inbounds float, float* %2, i64 %566
  %568 = load float, float* %567, align 4
  %569 = fadd float %568, -1.000000e+00
  %570 = fcmp ogt float %563, %569
  %571 = select i1 %570, float %563, float %569
  store float %571, float* %562, align 4
  %572 = add nuw nsw i64 %504, 7
  %573 = getelementptr inbounds float, float* %2, i64 %572
  %574 = load float, float* %573, align 4
  %575 = shl i64 %572, 32
  %576 = add i64 %575, -4294967296
  %577 = ashr exact i64 %576, 32
  %578 = getelementptr inbounds float, float* %2, i64 %577
  %579 = load float, float* %578, align 4
  %580 = fadd float %579, -1.000000e+00
  %581 = fcmp ogt float %574, %580
  %582 = select i1 %581, float %574, float %580
  store float %582, float* %573, align 4
  %583 = add nuw nsw i64 %504, 8
  %584 = getelementptr inbounds float, float* %2, i64 %583
  %585 = load float, float* %584, align 4
  %586 = shl i64 %583, 32
  %587 = add i64 %586, -4294967296
  %588 = ashr exact i64 %587, 32
  %589 = getelementptr inbounds float, float* %2, i64 %588
  %590 = load float, float* %589, align 4
  %591 = fadd float %590, -1.000000e+00
  %592 = fcmp ogt float %585, %591
  %593 = select i1 %592, float %585, float %591
  store float %593, float* %584, align 4
  %594 = add nuw nsw i64 %504, 9
  %595 = getelementptr inbounds float, float* %2, i64 %594
  %596 = load float, float* %595, align 4
  %597 = shl i64 %594, 32
  %598 = add i64 %597, -4294967296
  %599 = ashr exact i64 %598, 32
  %600 = getelementptr inbounds float, float* %2, i64 %599
  %601 = load float, float* %600, align 4
  %602 = fadd float %601, -1.000000e+00
  %603 = fcmp ogt float %596, %602
  %604 = select i1 %603, float %596, float %602
  store float %604, float* %595, align 4
  %605 = add nuw nsw i64 %504, 10
  %606 = getelementptr inbounds float, float* %2, i64 %605
  %607 = load float, float* %606, align 4
  %608 = shl i64 %605, 32
  %609 = add i64 %608, -4294967296
  %610 = ashr exact i64 %609, 32
  %611 = getelementptr inbounds float, float* %2, i64 %610
  %612 = load float, float* %611, align 4
  %613 = fadd float %612, -1.000000e+00
  %614 = fcmp ogt float %607, %613
  %615 = select i1 %614, float %607, float %613
  store float %615, float* %606, align 4
  %616 = add nuw nsw i64 %504, 11
  %617 = getelementptr inbounds float, float* %2, i64 %616
  %618 = load float, float* %617, align 4
  %619 = shl i64 %616, 32
  %620 = add i64 %619, -4294967296
  %621 = ashr exact i64 %620, 32
  %622 = getelementptr inbounds float, float* %2, i64 %621
  %623 = load float, float* %622, align 4
  %624 = fadd float %623, -1.000000e+00
  %625 = fcmp ogt float %618, %624
  %626 = select i1 %625, float %618, float %624
  store float %626, float* %617, align 4
  %627 = add nuw nsw i64 %504, 12
  %628 = getelementptr inbounds float, float* %2, i64 %627
  %629 = load float, float* %628, align 4
  %630 = shl i64 %627, 32
  %631 = add i64 %630, -4294967296
  %632 = ashr exact i64 %631, 32
  %633 = getelementptr inbounds float, float* %2, i64 %632
  %634 = load float, float* %633, align 4
  %635 = fadd float %634, -1.000000e+00
  %636 = fcmp ogt float %629, %635
  %637 = select i1 %636, float %629, float %635
  store float %637, float* %628, align 4
  %638 = add nuw nsw i64 %504, 13
  %639 = getelementptr inbounds float, float* %2, i64 %638
  %640 = load float, float* %639, align 4
  %641 = shl i64 %638, 32
  %642 = add i64 %641, -4294967296
  %643 = ashr exact i64 %642, 32
  %644 = getelementptr inbounds float, float* %2, i64 %643
  %645 = load float, float* %644, align 4
  %646 = fadd float %645, -1.000000e+00
  %647 = fcmp ogt float %640, %646
  %648 = select i1 %647, float %640, float %646
  store float %648, float* %639, align 4
  %649 = add nuw nsw i64 %504, 14
  %650 = getelementptr inbounds float, float* %2, i64 %649
  %651 = load float, float* %650, align 4
  %652 = shl i64 %649, 32
  %653 = add i64 %652, -4294967296
  %654 = ashr exact i64 %653, 32
  %655 = getelementptr inbounds float, float* %2, i64 %654
  %656 = load float, float* %655, align 4
  %657 = fadd float %656, -1.000000e+00
  %658 = fcmp ogt float %651, %657
  %659 = select i1 %658, float %651, float %657
  store float %659, float* %650, align 4
  %660 = add nuw nsw i64 %504, 15
  %661 = getelementptr inbounds float, float* %2, i64 %660
  %662 = load float, float* %661, align 4
  %663 = shl i64 %660, 32
  %664 = add i64 %663, -4294967296
  %665 = ashr exact i64 %664, 32
  %666 = getelementptr inbounds float, float* %2, i64 %665
  %667 = load float, float* %666, align 4
  %668 = fadd float %667, -1.000000e+00
  %669 = fcmp ogt float %662, %668
  %670 = select i1 %669, float %662, float %668
  store float %670, float* %661, align 4
  %671 = add nuw nsw i64 %504, 16
  %672 = getelementptr inbounds float, float* %2, i64 %671
  %673 = load float, float* %672, align 4
  %674 = shl i64 %671, 32
  %675 = add i64 %674, -4294967296
  %676 = ashr exact i64 %675, 32
  %677 = getelementptr inbounds float, float* %2, i64 %676
  %678 = load float, float* %677, align 4
  %679 = fadd float %678, -1.000000e+00
  %680 = fcmp ogt float %673, %679
  %681 = select i1 %680, float %673, float %679
  store float %681, float* %672, align 4
  %682 = add nuw nsw i64 %504, 17
  %683 = getelementptr inbounds float, float* %2, i64 %682
  %684 = load float, float* %683, align 4
  %685 = shl i64 %682, 32
  %686 = add i64 %685, -4294967296
  %687 = ashr exact i64 %686, 32
  %688 = getelementptr inbounds float, float* %2, i64 %687
  %689 = load float, float* %688, align 4
  %690 = fadd float %689, -1.000000e+00
  %691 = fcmp ogt float %684, %690
  %692 = select i1 %691, float %684, float %690
  store float %692, float* %683, align 4
  %693 = add nuw nsw i64 %504, 18
  %694 = getelementptr inbounds float, float* %2, i64 %693
  %695 = load float, float* %694, align 4
  %696 = shl i64 %693, 32
  %697 = add i64 %696, -4294967296
  %698 = ashr exact i64 %697, 32
  %699 = getelementptr inbounds float, float* %2, i64 %698
  %700 = load float, float* %699, align 4
  %701 = fadd float %700, -1.000000e+00
  %702 = fcmp ogt float %695, %701
  %703 = select i1 %702, float %695, float %701
  store float %703, float* %694, align 4
  %704 = add nuw nsw i64 %504, 19
  %705 = getelementptr inbounds float, float* %2, i64 %704
  %706 = load float, float* %705, align 4
  %707 = shl i64 %704, 32
  %708 = add i64 %707, -4294967296
  %709 = ashr exact i64 %708, 32
  %710 = getelementptr inbounds float, float* %2, i64 %709
  %711 = load float, float* %710, align 4
  %712 = fadd float %711, -1.000000e+00
  %713 = fcmp ogt float %706, %712
  %714 = select i1 %713, float %706, float %712
  store float %714, float* %705, align 4
  %715 = add nuw nsw i64 %504, 20
  %716 = getelementptr inbounds float, float* %2, i64 %715
  %717 = load float, float* %716, align 4
  %718 = shl i64 %715, 32
  %719 = add i64 %718, -4294967296
  %720 = ashr exact i64 %719, 32
  %721 = getelementptr inbounds float, float* %2, i64 %720
  %722 = load float, float* %721, align 4
  %723 = fadd float %722, -1.000000e+00
  %724 = fcmp ogt float %717, %723
  %725 = select i1 %724, float %717, float %723
  store float %725, float* %716, align 4
  %726 = add nuw nsw i64 %503, 19
  %727 = getelementptr inbounds float, float* %2, i64 %726
  %728 = load float, float* %727, align 4
  %729 = add nuw nsw i64 %503, 20
  %730 = getelementptr inbounds float, float* %2, i64 %729
  %731 = load float, float* %730, align 4
  %732 = fadd float %731, -2.000000e+00
  %733 = fcmp ogt float %728, %732
  %734 = select i1 %733, float %728, float %732
  store float %734, float* %727, align 4
  %735 = add nuw nsw i64 %503, 18
  %736 = getelementptr inbounds float, float* %2, i64 %735
  %737 = load float, float* %736, align 4
  %738 = add nuw nsw i64 %503, 19
  %739 = getelementptr inbounds float, float* %2, i64 %738
  %740 = load float, float* %739, align 4
  %741 = fadd float %740, -2.000000e+00
  %742 = fcmp ogt float %737, %741
  %743 = select i1 %742, float %737, float %741
  store float %743, float* %736, align 4
  %744 = add nuw nsw i64 %503, 17
  %745 = getelementptr inbounds float, float* %2, i64 %744
  %746 = load float, float* %745, align 4
  %747 = add nuw nsw i64 %503, 18
  %748 = getelementptr inbounds float, float* %2, i64 %747
  %749 = load float, float* %748, align 4
  %750 = fadd float %749, -2.000000e+00
  %751 = fcmp ogt float %746, %750
  %752 = select i1 %751, float %746, float %750
  store float %752, float* %745, align 4
  %753 = add nuw nsw i64 %503, 16
  %754 = getelementptr inbounds float, float* %2, i64 %753
  %755 = load float, float* %754, align 4
  %756 = add nuw nsw i64 %503, 17
  %757 = getelementptr inbounds float, float* %2, i64 %756
  %758 = load float, float* %757, align 4
  %759 = fadd float %758, -2.000000e+00
  %760 = fcmp ogt float %755, %759
  %761 = select i1 %760, float %755, float %759
  store float %761, float* %754, align 4
  %762 = add nuw nsw i64 %503, 15
  %763 = getelementptr inbounds float, float* %2, i64 %762
  %764 = load float, float* %763, align 4
  %765 = add nuw nsw i64 %503, 16
  %766 = getelementptr inbounds float, float* %2, i64 %765
  %767 = load float, float* %766, align 4
  %768 = fadd float %767, -2.000000e+00
  %769 = fcmp ogt float %764, %768
  %770 = select i1 %769, float %764, float %768
  store float %770, float* %763, align 4
  %771 = add nuw nsw i64 %503, 14
  %772 = getelementptr inbounds float, float* %2, i64 %771
  %773 = load float, float* %772, align 4
  %774 = add nuw nsw i64 %503, 15
  %775 = getelementptr inbounds float, float* %2, i64 %774
  %776 = load float, float* %775, align 4
  %777 = fadd float %776, -2.000000e+00
  %778 = fcmp ogt float %773, %777
  %779 = select i1 %778, float %773, float %777
  store float %779, float* %772, align 4
  %780 = add nuw nsw i64 %503, 13
  %781 = getelementptr inbounds float, float* %2, i64 %780
  %782 = load float, float* %781, align 4
  %783 = add nuw nsw i64 %503, 14
  %784 = getelementptr inbounds float, float* %2, i64 %783
  %785 = load float, float* %784, align 4
  %786 = fadd float %785, -2.000000e+00
  %787 = fcmp ogt float %782, %786
  %788 = select i1 %787, float %782, float %786
  store float %788, float* %781, align 4
  %789 = add nuw nsw i64 %503, 12
  %790 = getelementptr inbounds float, float* %2, i64 %789
  %791 = load float, float* %790, align 4
  %792 = add nuw nsw i64 %503, 13
  %793 = getelementptr inbounds float, float* %2, i64 %792
  %794 = load float, float* %793, align 4
  %795 = fadd float %794, -2.000000e+00
  %796 = fcmp ogt float %791, %795
  %797 = select i1 %796, float %791, float %795
  store float %797, float* %790, align 4
  %798 = add nuw nsw i64 %503, 11
  %799 = getelementptr inbounds float, float* %2, i64 %798
  %800 = load float, float* %799, align 4
  %801 = add nuw nsw i64 %503, 12
  %802 = getelementptr inbounds float, float* %2, i64 %801
  %803 = load float, float* %802, align 4
  %804 = fadd float %803, -2.000000e+00
  %805 = fcmp ogt float %800, %804
  %806 = select i1 %805, float %800, float %804
  store float %806, float* %799, align 4
  %807 = add nuw nsw i64 %503, 10
  %808 = getelementptr inbounds float, float* %2, i64 %807
  %809 = load float, float* %808, align 4
  %810 = add nuw nsw i64 %503, 11
  %811 = getelementptr inbounds float, float* %2, i64 %810
  %812 = load float, float* %811, align 4
  %813 = fadd float %812, -2.000000e+00
  %814 = fcmp ogt float %809, %813
  %815 = select i1 %814, float %809, float %813
  store float %815, float* %808, align 4
  %816 = add nuw nsw i64 %503, 9
  %817 = getelementptr inbounds float, float* %2, i64 %816
  %818 = load float, float* %817, align 4
  %819 = add nuw nsw i64 %503, 10
  %820 = getelementptr inbounds float, float* %2, i64 %819
  %821 = load float, float* %820, align 4
  %822 = fadd float %821, -2.000000e+00
  %823 = fcmp ogt float %818, %822
  %824 = select i1 %823, float %818, float %822
  store float %824, float* %817, align 4
  %825 = add nuw nsw i64 %503, 8
  %826 = getelementptr inbounds float, float* %2, i64 %825
  %827 = load float, float* %826, align 4
  %828 = add nuw nsw i64 %503, 9
  %829 = getelementptr inbounds float, float* %2, i64 %828
  %830 = load float, float* %829, align 4
  %831 = fadd float %830, -2.000000e+00
  %832 = fcmp ogt float %827, %831
  %833 = select i1 %832, float %827, float %831
  store float %833, float* %826, align 4
  %834 = add nuw nsw i64 %503, 7
  %835 = getelementptr inbounds float, float* %2, i64 %834
  %836 = load float, float* %835, align 4
  %837 = add nuw nsw i64 %503, 8
  %838 = getelementptr inbounds float, float* %2, i64 %837
  %839 = load float, float* %838, align 4
  %840 = fadd float %839, -2.000000e+00
  %841 = fcmp ogt float %836, %840
  %842 = select i1 %841, float %836, float %840
  store float %842, float* %835, align 4
  %843 = add nuw nsw i64 %503, 6
  %844 = getelementptr inbounds float, float* %2, i64 %843
  %845 = load float, float* %844, align 4
  %846 = add nuw nsw i64 %503, 7
  %847 = getelementptr inbounds float, float* %2, i64 %846
  %848 = load float, float* %847, align 4
  %849 = fadd float %848, -2.000000e+00
  %850 = fcmp ogt float %845, %849
  %851 = select i1 %850, float %845, float %849
  store float %851, float* %844, align 4
  %852 = add nuw nsw i64 %503, 5
  %853 = getelementptr inbounds float, float* %2, i64 %852
  %854 = load float, float* %853, align 4
  %855 = add nuw nsw i64 %503, 6
  %856 = getelementptr inbounds float, float* %2, i64 %855
  %857 = load float, float* %856, align 4
  %858 = fadd float %857, -2.000000e+00
  %859 = fcmp ogt float %854, %858
  %860 = select i1 %859, float %854, float %858
  store float %860, float* %853, align 4
  %861 = add nuw nsw i64 %503, 4
  %862 = getelementptr inbounds float, float* %2, i64 %861
  %863 = load float, float* %862, align 4
  %864 = add nuw nsw i64 %503, 5
  %865 = getelementptr inbounds float, float* %2, i64 %864
  %866 = load float, float* %865, align 4
  %867 = fadd float %866, -2.000000e+00
  %868 = fcmp ogt float %863, %867
  %869 = select i1 %868, float %863, float %867
  store float %869, float* %862, align 4
  %870 = add nuw nsw i64 %503, 3
  %871 = getelementptr inbounds float, float* %2, i64 %870
  %872 = load float, float* %871, align 4
  %873 = add nuw nsw i64 %503, 4
  %874 = getelementptr inbounds float, float* %2, i64 %873
  %875 = load float, float* %874, align 4
  %876 = fadd float %875, -2.000000e+00
  %877 = fcmp ogt float %872, %876
  %878 = select i1 %877, float %872, float %876
  store float %878, float* %871, align 4
  %879 = add nuw nsw i64 %503, 2
  %880 = getelementptr inbounds float, float* %2, i64 %879
  %881 = load float, float* %880, align 4
  %882 = add nuw nsw i64 %503, 3
  %883 = getelementptr inbounds float, float* %2, i64 %882
  %884 = load float, float* %883, align 4
  %885 = fadd float %884, -2.000000e+00
  %886 = fcmp ogt float %881, %885
  %887 = select i1 %886, float %881, float %885
  store float %887, float* %880, align 4
  %888 = add nuw nsw i64 %503, 1
  %889 = getelementptr inbounds float, float* %2, i64 %888
  %890 = load float, float* %889, align 4
  %891 = add nuw nsw i64 %503, 2
  %892 = getelementptr inbounds float, float* %2, i64 %891
  %893 = load float, float* %892, align 4
  %894 = fadd float %893, -2.000000e+00
  %895 = fcmp ogt float %890, %894
  %896 = select i1 %895, float %890, float %894
  store float %896, float* %889, align 4
  %897 = getelementptr inbounds float, float* %2, i64 %503
  %898 = load float, float* %897, align 4
  %899 = fadd float %896, -2.000000e+00
  %900 = fcmp ogt float %898, %899
  %901 = select i1 %900, float %898, float %899
  store float %901, float* %897, align 4
  %902 = getelementptr inbounds [8 x i32], [8 x i32]* %12, i64 0, i64 %341
  %903 = load i32, i32* %902, align 4
  switch i32 %903, label %1034 [
    i32 1, label %904
    i32 3, label %938
    i32 2, label %972
  ]

904:                                              ; preds = %502, %934
  %905 = phi i64 [ %936, %934 ], [ 0, %502 ]
  %906 = getelementptr inbounds [3 x [21 x float]], [3 x [21 x float]]* %14, i64 0, i64 0, i64 %905
  %907 = load float, float* %906, align 4
  %908 = add nuw nsw i64 %905, %504
  %909 = getelementptr inbounds float, float* %2, i64 %908
  %910 = load float, float* %909, align 4
  %911 = fcmp ogt float %907, %910
  %912 = fsub float %907, %910
  %913 = fsub float %910, %907
  %914 = select i1 %911, float %907, float %910
  %915 = select i1 %911, float %912, float %913
  %916 = fcmp olt float %915, 8.000000e+00
  br i1 %916, label %917, label %934

917:                                              ; preds = %904
  %918 = fmul float %915, 2.000000e+00
  %919 = call float @llvm.floor.f32(float %918) #6
  %920 = fptosi float %919 to i32
  %921 = sitofp i32 %920 to float
  %922 = fsub float %918, %921
  %923 = sext i32 %920 to i64
  %924 = getelementptr inbounds [17 x float], [17 x float]* bitcast (<{ [9 x float], [8 x float] }>* @logSum.diff_table to [17 x float]*), i64 0, i64 %923
  %925 = load float, float* %924, align 4
  %926 = fadd float %914, %925
  %927 = add nsw i32 %920, 1
  %928 = sext i32 %927 to i64
  %929 = getelementptr inbounds [17 x float], [17 x float]* bitcast (<{ [9 x float], [8 x float] }>* @logSum.diff_table to [17 x float]*), i64 0, i64 %928
  %930 = load float, float* %929, align 4
  %931 = fsub float %930, %925
  %932 = fmul float %922, %931
  %933 = fadd float %926, %932
  br label %934

934:                                              ; preds = %904, %917
  %935 = phi float [ %933, %917 ], [ %914, %904 ]
  store float %935, float* %906, align 4
  %936 = add nuw nsw i64 %905, 1
  %937 = icmp eq i64 %936, 21
  br i1 %937, label %1034, label %904

938:                                              ; preds = %502, %968
  %939 = phi i64 [ %970, %968 ], [ 0, %502 ]
  %940 = getelementptr inbounds [3 x [21 x float]], [3 x [21 x float]]* %14, i64 0, i64 2, i64 %939
  %941 = load float, float* %940, align 4
  %942 = add nuw nsw i64 %939, %504
  %943 = getelementptr inbounds float, float* %2, i64 %942
  %944 = load float, float* %943, align 4
  %945 = fcmp ogt float %941, %944
  %946 = fsub float %941, %944
  %947 = fsub float %944, %941
  %948 = select i1 %945, float %941, float %944
  %949 = select i1 %945, float %946, float %947
  %950 = fcmp olt float %949, 8.000000e+00
  br i1 %950, label %951, label %968

951:                                              ; preds = %938
  %952 = fmul float %949, 2.000000e+00
  %953 = call float @llvm.floor.f32(float %952) #6
  %954 = fptosi float %953 to i32
  %955 = sitofp i32 %954 to float
  %956 = fsub float %952, %955
  %957 = sext i32 %954 to i64
  %958 = getelementptr inbounds [17 x float], [17 x float]* bitcast (<{ [9 x float], [8 x float] }>* @logSum.diff_table to [17 x float]*), i64 0, i64 %957
  %959 = load float, float* %958, align 4
  %960 = fadd float %948, %959
  %961 = add nsw i32 %954, 1
  %962 = sext i32 %961 to i64
  %963 = getelementptr inbounds [17 x float], [17 x float]* bitcast (<{ [9 x float], [8 x float] }>* @logSum.diff_table to [17 x float]*), i64 0, i64 %962
  %964 = load float, float* %963, align 4
  %965 = fsub float %964, %959
  %966 = fmul float %956, %965
  %967 = fadd float %960, %966
  br label %968

968:                                              ; preds = %938, %951
  %969 = phi float [ %967, %951 ], [ %948, %938 ]
  store float %969, float* %940, align 4
  %970 = add nuw nsw i64 %939, 1
  %971 = icmp eq i64 %970, 21
  br i1 %971, label %1034, label %938

972:                                              ; preds = %502, %1030
  %973 = phi i64 [ %1032, %1030 ], [ 0, %502 ]
  %974 = getelementptr inbounds [3 x [21 x float]], [3 x [21 x float]]* %14, i64 0, i64 0, i64 %973
  %975 = load float, float* %974, align 4
  %976 = add nuw nsw i64 %973, %504
  %977 = getelementptr inbounds float, float* %2, i64 %976
  %978 = load float, float* %977, align 4
  %979 = fadd float %978, -5.000000e-01
  %980 = fcmp ogt float %975, %979
  %981 = fsub float %975, %979
  %982 = fsub float %979, %975
  %983 = select i1 %980, float %975, float %979
  %984 = select i1 %980, float %981, float %982
  %985 = fcmp olt float %984, 8.000000e+00
  br i1 %985, label %986, label %1003

986:                                              ; preds = %972
  %987 = fmul float %984, 2.000000e+00
  %988 = call float @llvm.floor.f32(float %987) #6
  %989 = fptosi float %988 to i32
  %990 = sitofp i32 %989 to float
  %991 = fsub float %987, %990
  %992 = sext i32 %989 to i64
  %993 = getelementptr inbounds [17 x float], [17 x float]* bitcast (<{ [9 x float], [8 x float] }>* @logSum.diff_table to [17 x float]*), i64 0, i64 %992
  %994 = load float, float* %993, align 4
  %995 = fadd float %983, %994
  %996 = add nsw i32 %989, 1
  %997 = sext i32 %996 to i64
  %998 = getelementptr inbounds [17 x float], [17 x float]* bitcast (<{ [9 x float], [8 x float] }>* @logSum.diff_table to [17 x float]*), i64 0, i64 %997
  %999 = load float, float* %998, align 4
  %1000 = fsub float %999, %994
  %1001 = fmul float %991, %1000
  %1002 = fadd float %995, %1001
  br label %1003

1003:                                             ; preds = %972, %986
  %1004 = phi float [ %1002, %986 ], [ %983, %972 ]
  store float %1004, float* %974, align 4
  %1005 = getelementptr inbounds [3 x [21 x float]], [3 x [21 x float]]* %14, i64 0, i64 2, i64 %973
  %1006 = load float, float* %1005, align 4
  %1007 = fcmp ogt float %1006, %979
  %1008 = fsub float %1006, %979
  %1009 = fsub float %979, %1006
  %1010 = select i1 %1007, float %1006, float %979
  %1011 = select i1 %1007, float %1008, float %1009
  %1012 = fcmp olt float %1011, 8.000000e+00
  br i1 %1012, label %1013, label %1030

1013:                                             ; preds = %1003
  %1014 = fmul float %1011, 2.000000e+00
  %1015 = call float @llvm.floor.f32(float %1014) #6
  %1016 = fptosi float %1015 to i32
  %1017 = sitofp i32 %1016 to float
  %1018 = fsub float %1014, %1017
  %1019 = sext i32 %1016 to i64
  %1020 = getelementptr inbounds [17 x float], [17 x float]* bitcast (<{ [9 x float], [8 x float] }>* @logSum.diff_table to [17 x float]*), i64 0, i64 %1019
  %1021 = load float, float* %1020, align 4
  %1022 = fadd float %1010, %1021
  %1023 = add nsw i32 %1016, 1
  %1024 = sext i32 %1023 to i64
  %1025 = getelementptr inbounds [17 x float], [17 x float]* bitcast (<{ [9 x float], [8 x float] }>* @logSum.diff_table to [17 x float]*), i64 0, i64 %1024
  %1026 = load float, float* %1025, align 4
  %1027 = fsub float %1026, %1021
  %1028 = fmul float %1018, %1027
  %1029 = fadd float %1022, %1028
  br label %1030

1030:                                             ; preds = %1003, %1013
  %1031 = phi float [ %1029, %1013 ], [ %1010, %1003 ]
  store float %1031, float* %1005, align 4
  %1032 = add nuw nsw i64 %973, 1
  %1033 = icmp eq i64 %1032, 21
  br i1 %1033, label %1034, label %972

1034:                                             ; preds = %1030, %968, %934, %502
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %344, i8* align 4 %131, i64 %118, i1 false)
  %1035 = add nuw nsw i64 %341, 1
  %1036 = icmp eq i64 %1035, %133
  br i1 %1036, label %190, label %340

1037:                                             ; preds = %205
  %1038 = zext i32 %7 to i64
  br label %1039

1039:                                             ; preds = %1101, %1037
  %1040 = phi i64 [ 0, %1037 ], [ %1102, %1101 ]
  %1041 = mul i64 %1040, 21
  %1042 = and i64 %1041, 4294967295
  %1043 = getelementptr float, float* %2, i64 %1042
  %1044 = getelementptr inbounds [8 x i32], [8 x i32]* %12, i64 0, i64 %1040
  %1045 = load i32, i32* %1044, align 4
  %1046 = icmp eq i32 %1045, 0
  br i1 %1046, label %1047, label %1049

1047:                                             ; preds = %1039
  %1048 = bitcast float* %1043 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 4 %1048, i8 0, i64 84, i1 false)
  br label %1101

1049:                                             ; preds = %1039
  %1050 = add nsw i32 %1045, -1
  %1051 = sext i32 %1050 to i64
  %1052 = getelementptr inbounds [3 x [21 x float]], [3 x [21 x float]]* %14, i64 0, i64 %1051, i64 0
  %1053 = bitcast float* %1043 to <4 x float>*
  %1054 = load <4 x float>, <4 x float>* %1053, align 4
  %1055 = bitcast float* %1052 to <4 x float>*
  %1056 = load <4 x float>, <4 x float>* %1055, align 4
  %1057 = fsub <4 x float> %1054, %1056
  %1058 = bitcast float* %1043 to <4 x float>*
  store <4 x float> %1057, <4 x float>* %1058, align 4
  %1059 = add nuw nsw i64 %1042, 4
  %1060 = getelementptr inbounds float, float* %2, i64 %1059
  %1061 = getelementptr inbounds [3 x [21 x float]], [3 x [21 x float]]* %14, i64 0, i64 %1051, i64 4
  %1062 = bitcast float* %1060 to <4 x float>*
  %1063 = load <4 x float>, <4 x float>* %1062, align 4
  %1064 = bitcast float* %1061 to <4 x float>*
  %1065 = load <4 x float>, <4 x float>* %1064, align 4
  %1066 = fsub <4 x float> %1063, %1065
  %1067 = bitcast float* %1060 to <4 x float>*
  store <4 x float> %1066, <4 x float>* %1067, align 4
  %1068 = add nuw nsw i64 %1042, 8
  %1069 = getelementptr inbounds float, float* %2, i64 %1068
  %1070 = getelementptr inbounds [3 x [21 x float]], [3 x [21 x float]]* %14, i64 0, i64 %1051, i64 8
  %1071 = bitcast float* %1069 to <4 x float>*
  %1072 = load <4 x float>, <4 x float>* %1071, align 4
  %1073 = bitcast float* %1070 to <4 x float>*
  %1074 = load <4 x float>, <4 x float>* %1073, align 4
  %1075 = fsub <4 x float> %1072, %1074
  %1076 = bitcast float* %1069 to <4 x float>*
  store <4 x float> %1075, <4 x float>* %1076, align 4
  %1077 = add nuw nsw i64 %1042, 12
  %1078 = getelementptr inbounds float, float* %2, i64 %1077
  %1079 = getelementptr inbounds [3 x [21 x float]], [3 x [21 x float]]* %14, i64 0, i64 %1051, i64 12
  %1080 = bitcast float* %1078 to <4 x float>*
  %1081 = load <4 x float>, <4 x float>* %1080, align 4
  %1082 = bitcast float* %1079 to <4 x float>*
  %1083 = load <4 x float>, <4 x float>* %1082, align 4
  %1084 = fsub <4 x float> %1081, %1083
  %1085 = bitcast float* %1078 to <4 x float>*
  store <4 x float> %1084, <4 x float>* %1085, align 4
  %1086 = add nuw nsw i64 %1042, 16
  %1087 = getelementptr inbounds float, float* %2, i64 %1086
  %1088 = getelementptr inbounds [3 x [21 x float]], [3 x [21 x float]]* %14, i64 0, i64 %1051, i64 16
  %1089 = bitcast float* %1087 to <4 x float>*
  %1090 = load <4 x float>, <4 x float>* %1089, align 4
  %1091 = bitcast float* %1088 to <4 x float>*
  %1092 = load <4 x float>, <4 x float>* %1091, align 4
  %1093 = fsub <4 x float> %1090, %1092
  %1094 = bitcast float* %1087 to <4 x float>*
  store <4 x float> %1093, <4 x float>* %1094, align 4
  %1095 = add nuw nsw i64 %1042, 20
  %1096 = getelementptr inbounds float, float* %2, i64 %1095
  %1097 = load float, float* %1096, align 4
  %1098 = getelementptr inbounds [3 x [21 x float]], [3 x [21 x float]]* %14, i64 0, i64 %1051, i64 20
  %1099 = load float, float* %1098, align 4
  %1100 = fsub float %1097, %1099
  store float %1100, float* %1096, align 4
  br label %1101

1101:                                             ; preds = %1049, %1047
  %1102 = add nuw nsw i64 %1040, 1
  %1103 = icmp eq i64 %1102, %1038
  br i1 %1103, label %1104, label %1039

1104:                                             ; preds = %1101, %205
  call void @llvm.lifetime.end.p0i8(i64 252, i8* nonnull %18) #6
  call void @llvm.lifetime.end.p0i8(i64 84, i8* nonnull %17) #6
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %16) #6
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

declare i32 @resampling_factor(i32) local_unnamed_addr #2

; Function Attrs: noreturn
declare void @celt_fatal(i8*, i8*, i32) local_unnamed_addr #3

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #1

declare void @celt_preemphasis(float*, float*, i32, i32, i32, float*, float*, i32) local_unnamed_addr #2

declare float @celt_inner_prod_sse(float*, float*, i32) local_unnamed_addr #2

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

declare void @clt_mdct_forward_c(%struct.mdct_lookup*, float*, float*, float*, i32, i32, i32, i32) local_unnamed_addr #2

declare void @compute_band_energies(%struct.OpusCustomMode*, float*, float*, i32, i32, i32, i32) local_unnamed_addr #2

declare void @amp2Log2(%struct.OpusCustomMode*, i32, i32, float*, float*, i32) local_unnamed_addr #2

; Function Attrs: nofree nounwind
declare double @log(double) local_unnamed_addr #4

; Function Attrs: nounwind ssp uwtable
define hidden i32 @opus_multistream_encoder_get_size(i32, i32) local_unnamed_addr #0 {
  %3 = icmp slt i32 %0, 1
  br i1 %3, label %20, label %4

4:                                                ; preds = %2
  %5 = icmp slt i32 %0, %1
  %6 = icmp slt i32 %1, 0
  %7 = or i1 %5, %6
  br i1 %7, label %20, label %8

8:                                                ; preds = %4
  %9 = tail call i32 @opus_encoder_get_size(i32 2) #6
  %10 = tail call i32 @opus_encoder_get_size(i32 1) #6
  %11 = add i32 %9, 7
  %12 = and i32 %11, -8
  %13 = mul nsw i32 %12, %1
  %14 = add nsw i32 %13, 296
  %15 = sub nsw i32 %0, %1
  %16 = add i32 %10, 7
  %17 = and i32 %16, -8
  %18 = mul nsw i32 %17, %15
  %19 = add nsw i32 %14, %18
  br label %20

20:                                               ; preds = %2, %4, %8
  %21 = phi i32 [ %19, %8 ], [ 0, %4 ], [ 0, %2 ]
  ret i32 %21
}

declare i32 @opus_encoder_get_size(i32) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden i32 @opus_multistream_surround_encoder_get_size(i32, i32) local_unnamed_addr #0 {
  %3 = icmp eq i32 %1, 0
  br i1 %3, label %4, label %6

4:                                                ; preds = %2
  switch i32 %0, label %58 [
    i32 1, label %34
    i32 2, label %5
  ]

5:                                                ; preds = %4
  br label %34

6:                                                ; preds = %2
  %7 = icmp eq i32 %1, 1
  %8 = add i32 %0, -1
  %9 = icmp ult i32 %8, 8
  %10 = and i1 %9, %7
  br i1 %10, label %11, label %17

11:                                               ; preds = %6
  %12 = sext i32 %8 to i64
  %13 = getelementptr inbounds [8 x %struct.VorbisLayout], [8 x %struct.VorbisLayout]* @vorbis_mappings, i64 0, i64 %12, i32 0
  %14 = load i32, i32* %13, align 16
  %15 = getelementptr inbounds [8 x %struct.VorbisLayout], [8 x %struct.VorbisLayout]* @vorbis_mappings, i64 0, i64 %12, i32 1
  %16 = load i32, i32* %15, align 4
  br label %30

17:                                               ; preds = %6
  switch i32 %1, label %58 [
    i32 255, label %30
    i32 2, label %18
  ]

18:                                               ; preds = %17
  %19 = icmp ugt i32 %8, 226
  br i1 %19, label %58, label %20

20:                                               ; preds = %18
  %21 = tail call i32 @isqrt32(i32 %0) #6
  %22 = mul nsw i32 %21, %21
  %23 = sub nsw i32 %0, %22
  %24 = and i32 %23, -3
  %25 = icmp eq i32 %24, 0
  br i1 %25, label %26, label %58

26:                                               ; preds = %20
  %27 = icmp ne i32 %23, 0
  %28 = zext i1 %27 to i32
  %29 = add nuw nsw i32 %22, %28
  br label %30

30:                                               ; preds = %26, %17, %11
  %31 = phi i32 [ %14, %11 ], [ %29, %26 ], [ %0, %17 ]
  %32 = phi i32 [ %16, %11 ], [ %28, %26 ], [ 0, %17 ]
  %33 = icmp slt i32 %31, 1
  br i1 %33, label %52, label %34

34:                                               ; preds = %4, %5, %30
  %35 = phi i32 [ %32, %30 ], [ 0, %4 ], [ 1, %5 ]
  %36 = phi i32 [ %31, %30 ], [ %0, %4 ], [ 1, %5 ]
  %37 = icmp slt i32 %36, %35
  %38 = icmp slt i32 %35, 0
  %39 = or i1 %38, %37
  br i1 %39, label %52, label %40

40:                                               ; preds = %34
  %41 = tail call i32 @opus_encoder_get_size(i32 2) #6
  %42 = tail call i32 @opus_encoder_get_size(i32 1) #6
  %43 = add i32 %41, 7
  %44 = and i32 %43, -8
  %45 = mul nsw i32 %44, %35
  %46 = add nsw i32 %45, 296
  %47 = sub nsw i32 %36, %35
  %48 = add i32 %42, 7
  %49 = and i32 %48, -8
  %50 = mul nsw i32 %49, %47
  %51 = add nsw i32 %46, %50
  br label %52

52:                                               ; preds = %30, %34, %40
  %53 = phi i32 [ %51, %40 ], [ 0, %34 ], [ 0, %30 ]
  %54 = icmp sgt i32 %0, 2
  %55 = mul i32 %0, 484
  %56 = select i1 %54, i32 %55, i32 0
  %57 = add i32 %53, %56
  br label %58

58:                                               ; preds = %20, %18, %52, %17, %4
  %59 = phi i32 [ 0, %4 ], [ 0, %17 ], [ %57, %52 ], [ 0, %18 ], [ 0, %20 ]
  ret i32 %59
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @opus_multistream_encoder_init(%struct.OpusMSEncoder*, i32, i32, i32, i32, i8* nocapture readonly, i32) local_unnamed_addr #0 {
  %8 = tail call fastcc i32 @opus_multistream_encoder_init_impl(%struct.OpusMSEncoder* %0, i32 %1, i32 %2, i32 %3, i32 %4, i8* %5, i32 %6, i32 0)
  ret i32 %8
}

; Function Attrs: nounwind ssp uwtable
define internal fastcc i32 @opus_multistream_encoder_init_impl(%struct.OpusMSEncoder*, i32, i32, i32, i32, i8* nocapture readonly, i32, i32) unnamed_addr #0 {
  %9 = bitcast %struct.OpusMSEncoder* %0 to i8*
  %10 = add i32 %2, -1
  %11 = icmp ugt i32 %10, 254
  br i1 %11, label %395, label %12

12:                                               ; preds = %8
  %13 = icmp sgt i32 %4, %3
  %14 = icmp slt i32 %3, 1
  %15 = or i1 %14, %13
  %16 = icmp slt i32 %4, 0
  %17 = or i1 %16, %15
  %18 = sub nsw i32 255, %4
  %19 = icmp slt i32 %18, %3
  %20 = or i1 %19, %17
  br i1 %20, label %395, label %21

21:                                               ; preds = %12
  %22 = tail call i32 @opus_select_arch() #6
  %23 = getelementptr inbounds %struct.OpusMSEncoder, %struct.OpusMSEncoder* %0, i64 0, i32 1
  store i32 %22, i32* %23, align 4
  %24 = getelementptr inbounds %struct.OpusMSEncoder, %struct.OpusMSEncoder* %0, i64 0, i32 0
  %25 = getelementptr inbounds %struct.OpusMSEncoder, %struct.OpusMSEncoder* %0, i64 0, i32 0, i32 0
  store i32 %2, i32* %25, align 4
  %26 = getelementptr inbounds %struct.OpusMSEncoder, %struct.OpusMSEncoder* %0, i64 0, i32 0, i32 1
  store i32 %3, i32* %26, align 4
  %27 = getelementptr inbounds %struct.OpusMSEncoder, %struct.OpusMSEncoder* %0, i64 0, i32 0, i32 2
  store i32 %4, i32* %27, align 4
  %28 = icmp eq i32 %7, 1
  br i1 %28, label %31, label %29

29:                                               ; preds = %21
  %30 = getelementptr inbounds %struct.OpusMSEncoder, %struct.OpusMSEncoder* %0, i64 0, i32 2
  store i32 -1, i32* %30, align 4
  br label %31

31:                                               ; preds = %29, %21
  %32 = getelementptr inbounds %struct.OpusMSEncoder, %struct.OpusMSEncoder* %0, i64 0, i32 6
  store i32 -1000, i32* %32, align 4
  %33 = getelementptr inbounds %struct.OpusMSEncoder, %struct.OpusMSEncoder* %0, i64 0, i32 3
  store i32 %6, i32* %33, align 4
  %34 = getelementptr inbounds %struct.OpusMSEncoder, %struct.OpusMSEncoder* %0, i64 0, i32 4
  store i32 5000, i32* %34, align 4
  %35 = zext i32 %2 to i64
  %36 = icmp ult i32 %2, 32
  br i1 %36, label %124, label %37

37:                                               ; preds = %31
  %38 = getelementptr %struct.OpusMSEncoder, %struct.OpusMSEncoder* %0, i64 0, i32 0, i32 3, i64 0
  %39 = add nuw nsw i64 %35, 12
  %40 = getelementptr i8, i8* %9, i64 %39
  %41 = getelementptr i8, i8* %5, i64 %35
  %42 = icmp ult i8* %38, %41
  %43 = icmp ugt i8* %40, %5
  %44 = and i1 %42, %43
  br i1 %44, label %124, label %45

45:                                               ; preds = %37
  %46 = and i64 %35, 4294967264
  %47 = add nsw i64 %46, -32
  %48 = lshr exact i64 %47, 5
  %49 = add nuw nsw i64 %48, 1
  %50 = and i64 %49, 3
  %51 = icmp ult i64 %47, 96
  br i1 %51, label %103, label %52

52:                                               ; preds = %45
  %53 = sub nsw i64 %49, %50
  br label %54

54:                                               ; preds = %54, %52
  %55 = phi i64 [ 0, %52 ], [ %100, %54 ]
  %56 = phi i64 [ %53, %52 ], [ %101, %54 ]
  %57 = getelementptr inbounds i8, i8* %5, i64 %55
  %58 = bitcast i8* %57 to <16 x i8>*
  %59 = load <16 x i8>, <16 x i8>* %58, align 1, !alias.scope !6
  %60 = getelementptr inbounds i8, i8* %57, i64 16
  %61 = bitcast i8* %60 to <16 x i8>*
  %62 = load <16 x i8>, <16 x i8>* %61, align 1, !alias.scope !6
  %63 = getelementptr inbounds %struct.OpusMSEncoder, %struct.OpusMSEncoder* %0, i64 0, i32 0, i32 3, i64 %55
  %64 = bitcast i8* %63 to <16 x i8>*
  store <16 x i8> %59, <16 x i8>* %64, align 1, !alias.scope !9, !noalias !6
  %65 = getelementptr inbounds i8, i8* %63, i64 16
  %66 = bitcast i8* %65 to <16 x i8>*
  store <16 x i8> %62, <16 x i8>* %66, align 1, !alias.scope !9, !noalias !6
  %67 = or i64 %55, 32
  %68 = getelementptr inbounds i8, i8* %5, i64 %67
  %69 = bitcast i8* %68 to <16 x i8>*
  %70 = load <16 x i8>, <16 x i8>* %69, align 1, !alias.scope !6
  %71 = getelementptr inbounds i8, i8* %68, i64 16
  %72 = bitcast i8* %71 to <16 x i8>*
  %73 = load <16 x i8>, <16 x i8>* %72, align 1, !alias.scope !6
  %74 = getelementptr inbounds %struct.OpusMSEncoder, %struct.OpusMSEncoder* %0, i64 0, i32 0, i32 3, i64 %67
  %75 = bitcast i8* %74 to <16 x i8>*
  store <16 x i8> %70, <16 x i8>* %75, align 1, !alias.scope !9, !noalias !6
  %76 = getelementptr inbounds i8, i8* %74, i64 16
  %77 = bitcast i8* %76 to <16 x i8>*
  store <16 x i8> %73, <16 x i8>* %77, align 1, !alias.scope !9, !noalias !6
  %78 = or i64 %55, 64
  %79 = getelementptr inbounds i8, i8* %5, i64 %78
  %80 = bitcast i8* %79 to <16 x i8>*
  %81 = load <16 x i8>, <16 x i8>* %80, align 1, !alias.scope !6
  %82 = getelementptr inbounds i8, i8* %79, i64 16
  %83 = bitcast i8* %82 to <16 x i8>*
  %84 = load <16 x i8>, <16 x i8>* %83, align 1, !alias.scope !6
  %85 = getelementptr inbounds %struct.OpusMSEncoder, %struct.OpusMSEncoder* %0, i64 0, i32 0, i32 3, i64 %78
  %86 = bitcast i8* %85 to <16 x i8>*
  store <16 x i8> %81, <16 x i8>* %86, align 1, !alias.scope !9, !noalias !6
  %87 = getelementptr inbounds i8, i8* %85, i64 16
  %88 = bitcast i8* %87 to <16 x i8>*
  store <16 x i8> %84, <16 x i8>* %88, align 1, !alias.scope !9, !noalias !6
  %89 = or i64 %55, 96
  %90 = getelementptr inbounds i8, i8* %5, i64 %89
  %91 = bitcast i8* %90 to <16 x i8>*
  %92 = load <16 x i8>, <16 x i8>* %91, align 1, !alias.scope !6
  %93 = getelementptr inbounds i8, i8* %90, i64 16
  %94 = bitcast i8* %93 to <16 x i8>*
  %95 = load <16 x i8>, <16 x i8>* %94, align 1, !alias.scope !6
  %96 = getelementptr inbounds %struct.OpusMSEncoder, %struct.OpusMSEncoder* %0, i64 0, i32 0, i32 3, i64 %89
  %97 = bitcast i8* %96 to <16 x i8>*
  store <16 x i8> %92, <16 x i8>* %97, align 1, !alias.scope !9, !noalias !6
  %98 = getelementptr inbounds i8, i8* %96, i64 16
  %99 = bitcast i8* %98 to <16 x i8>*
  store <16 x i8> %95, <16 x i8>* %99, align 1, !alias.scope !9, !noalias !6
  %100 = add i64 %55, 128
  %101 = add i64 %56, -4
  %102 = icmp eq i64 %101, 0
  br i1 %102, label %103, label %54, !llvm.loop !11

103:                                              ; preds = %54, %45
  %104 = phi i64 [ 0, %45 ], [ %100, %54 ]
  %105 = icmp eq i64 %50, 0
  br i1 %105, label %122, label %106

106:                                              ; preds = %103, %106
  %107 = phi i64 [ %119, %106 ], [ %104, %103 ]
  %108 = phi i64 [ %120, %106 ], [ %50, %103 ]
  %109 = getelementptr inbounds i8, i8* %5, i64 %107
  %110 = bitcast i8* %109 to <16 x i8>*
  %111 = load <16 x i8>, <16 x i8>* %110, align 1, !alias.scope !6
  %112 = getelementptr inbounds i8, i8* %109, i64 16
  %113 = bitcast i8* %112 to <16 x i8>*
  %114 = load <16 x i8>, <16 x i8>* %113, align 1, !alias.scope !6
  %115 = getelementptr inbounds %struct.OpusMSEncoder, %struct.OpusMSEncoder* %0, i64 0, i32 0, i32 3, i64 %107
  %116 = bitcast i8* %115 to <16 x i8>*
  store <16 x i8> %111, <16 x i8>* %116, align 1, !alias.scope !9, !noalias !6
  %117 = getelementptr inbounds i8, i8* %115, i64 16
  %118 = bitcast i8* %117 to <16 x i8>*
  store <16 x i8> %114, <16 x i8>* %118, align 1, !alias.scope !9, !noalias !6
  %119 = add i64 %107, 32
  %120 = add i64 %108, -1
  %121 = icmp eq i64 %120, 0
  br i1 %121, label %122, label %106, !llvm.loop !12

122:                                              ; preds = %106, %103
  %123 = icmp eq i64 %46, %35
  br i1 %123, label %161, label %124

124:                                              ; preds = %122, %37, %31
  %125 = phi i64 [ 0, %37 ], [ 0, %31 ], [ %46, %122 ]
  %126 = xor i64 %125, -1
  %127 = add nsw i64 %126, %35
  %128 = and i64 %35, 3
  %129 = icmp eq i64 %128, 0
  br i1 %129, label %139, label %130

130:                                              ; preds = %124, %130
  %131 = phi i64 [ %136, %130 ], [ %125, %124 ]
  %132 = phi i64 [ %137, %130 ], [ %128, %124 ]
  %133 = getelementptr inbounds i8, i8* %5, i64 %131
  %134 = load i8, i8* %133, align 1
  %135 = getelementptr inbounds %struct.OpusMSEncoder, %struct.OpusMSEncoder* %0, i64 0, i32 0, i32 3, i64 %131
  store i8 %134, i8* %135, align 1
  %136 = add nuw nsw i64 %131, 1
  %137 = add i64 %132, -1
  %138 = icmp eq i64 %137, 0
  br i1 %138, label %139, label %130, !llvm.loop !14

139:                                              ; preds = %130, %124
  %140 = phi i64 [ %125, %124 ], [ %136, %130 ]
  %141 = icmp ult i64 %127, 3
  br i1 %141, label %161, label %142

142:                                              ; preds = %139, %142
  %143 = phi i64 [ %159, %142 ], [ %140, %139 ]
  %144 = getelementptr inbounds i8, i8* %5, i64 %143
  %145 = load i8, i8* %144, align 1
  %146 = getelementptr inbounds %struct.OpusMSEncoder, %struct.OpusMSEncoder* %0, i64 0, i32 0, i32 3, i64 %143
  store i8 %145, i8* %146, align 1
  %147 = add nuw nsw i64 %143, 1
  %148 = getelementptr inbounds i8, i8* %5, i64 %147
  %149 = load i8, i8* %148, align 1
  %150 = getelementptr inbounds %struct.OpusMSEncoder, %struct.OpusMSEncoder* %0, i64 0, i32 0, i32 3, i64 %147
  store i8 %149, i8* %150, align 1
  %151 = add nuw nsw i64 %143, 2
  %152 = getelementptr inbounds i8, i8* %5, i64 %151
  %153 = load i8, i8* %152, align 1
  %154 = getelementptr inbounds %struct.OpusMSEncoder, %struct.OpusMSEncoder* %0, i64 0, i32 0, i32 3, i64 %151
  store i8 %153, i8* %154, align 1
  %155 = add nuw nsw i64 %143, 3
  %156 = getelementptr inbounds i8, i8* %5, i64 %155
  %157 = load i8, i8* %156, align 1
  %158 = getelementptr inbounds %struct.OpusMSEncoder, %struct.OpusMSEncoder* %0, i64 0, i32 0, i32 3, i64 %155
  store i8 %157, i8* %158, align 1
  %159 = add nuw nsw i64 %143, 4
  %160 = icmp eq i64 %159, %35
  br i1 %160, label %161, label %142, !llvm.loop !15

161:                                              ; preds = %139, %142, %122
  %162 = tail call i32 @validate_layout(%struct.ChannelLayout* %24) #6
  %163 = icmp eq i32 %162, 0
  br i1 %163, label %395, label %164

164:                                              ; preds = %161
  br i1 %28, label %165, label %185

165:                                              ; preds = %164
  %166 = load i32, i32* %26, align 4
  %167 = icmp sgt i32 %166, 0
  br i1 %167, label %168, label %197

168:                                              ; preds = %165, %181
  %169 = phi i32 [ %182, %181 ], [ 0, %165 ]
  %170 = load i32, i32* %27, align 4
  %171 = icmp slt i32 %169, %170
  br i1 %171, label %172, label %178

172:                                              ; preds = %168
  %173 = tail call i32 @get_left_channel(%struct.ChannelLayout* %24, i32 %169, i32 -1) #6
  %174 = icmp eq i32 %173, -1
  br i1 %174, label %395, label %175

175:                                              ; preds = %172
  %176 = tail call i32 @get_right_channel(%struct.ChannelLayout* %24, i32 %169, i32 -1) #6
  %177 = icmp eq i32 %176, -1
  br i1 %177, label %395, label %181

178:                                              ; preds = %168
  %179 = tail call i32 @get_mono_channel(%struct.ChannelLayout* %24, i32 %169, i32 -1) #6
  %180 = icmp eq i32 %179, -1
  br i1 %180, label %395, label %181

181:                                              ; preds = %178, %175
  %182 = add nuw nsw i32 %169, 1
  %183 = load i32, i32* %26, align 4
  %184 = icmp slt i32 %182, %183
  br i1 %184, label %168, label %185

185:                                              ; preds = %181, %164
  %186 = icmp eq i32 %7, 2
  br i1 %186, label %187, label %197

187:                                              ; preds = %185
  %188 = load i32, i32* %25, align 4
  %189 = add i32 %188, -1
  %190 = icmp ugt i32 %189, 226
  br i1 %190, label %395, label %191

191:                                              ; preds = %187
  %192 = tail call i32 @isqrt32(i32 %188) #6
  %193 = mul nsw i32 %192, %192
  %194 = sub nsw i32 %188, %193
  %195 = and i32 %194, -3
  %196 = icmp eq i32 %195, 0
  br i1 %196, label %197, label %395

197:                                              ; preds = %165, %191, %185
  %198 = getelementptr inbounds %struct.OpusMSEncoder, %struct.OpusMSEncoder* %0, i64 1, i32 0, i32 1
  %199 = bitcast i32* %198 to i8*
  %200 = tail call i32 @opus_encoder_get_size(i32 2) #6
  %201 = tail call i32 @opus_encoder_get_size(i32 1) #6
  %202 = load i32, i32* %27, align 4
  %203 = icmp sgt i32 %202, 0
  br i1 %203, label %204, label %209

204:                                              ; preds = %197
  %205 = getelementptr inbounds %struct.OpusMSEncoder, %struct.OpusMSEncoder* %0, i64 0, i32 2
  %206 = add i32 %200, 7
  %207 = and i32 %206, -8
  %208 = sext i32 %207 to i64
  br label %219

209:                                              ; preds = %230, %197
  %210 = phi i32 [ 0, %197 ], [ %232, %230 ]
  %211 = phi i8* [ %199, %197 ], [ %231, %230 ]
  %212 = load i32, i32* %26, align 4
  %213 = icmp slt i32 %210, %212
  br i1 %213, label %214, label %251

214:                                              ; preds = %209
  %215 = getelementptr inbounds %struct.OpusMSEncoder, %struct.OpusMSEncoder* %0, i64 0, i32 2
  %216 = add i32 %201, 7
  %217 = and i32 %216, -8
  %218 = sext i32 %217 to i64
  br label %235

219:                                              ; preds = %204, %230
  %220 = phi i8* [ %199, %204 ], [ %231, %230 ]
  %221 = phi i32 [ 0, %204 ], [ %232, %230 ]
  %222 = bitcast i8* %220 to %struct.OpusEncoder*
  %223 = tail call i32 @opus_encoder_init(%struct.OpusEncoder* %222, i32 %1, i32 2, i32 %6) #6
  %224 = icmp eq i32 %223, 0
  br i1 %224, label %225, label %395

225:                                              ; preds = %219
  %226 = load i32, i32* %205, align 4
  %227 = icmp eq i32 %221, %226
  br i1 %227, label %228, label %230

228:                                              ; preds = %225
  %229 = tail call i32 (%struct.OpusEncoder*, i32, ...) @opus_encoder_ctl(%struct.OpusEncoder* %222, i32 10024, i32 1) #6
  br label %230

230:                                              ; preds = %228, %225
  %231 = getelementptr inbounds i8, i8* %220, i64 %208
  %232 = add nuw nsw i32 %221, 1
  %233 = load i32, i32* %27, align 4
  %234 = icmp slt i32 %232, %233
  br i1 %234, label %219, label %209

235:                                              ; preds = %214, %246
  %236 = phi i8* [ %211, %214 ], [ %247, %246 ]
  %237 = phi i32 [ %210, %214 ], [ %248, %246 ]
  %238 = bitcast i8* %236 to %struct.OpusEncoder*
  %239 = tail call i32 @opus_encoder_init(%struct.OpusEncoder* %238, i32 %1, i32 1, i32 %6) #6
  %240 = load i32, i32* %215, align 4
  %241 = icmp eq i32 %237, %240
  br i1 %241, label %242, label %244

242:                                              ; preds = %235
  %243 = tail call i32 (%struct.OpusEncoder*, i32, ...) @opus_encoder_ctl(%struct.OpusEncoder* %238, i32 10024, i32 1) #6
  br label %244

244:                                              ; preds = %242, %235
  %245 = icmp eq i32 %239, 0
  br i1 %245, label %246, label %395

246:                                              ; preds = %244
  %247 = getelementptr inbounds i8, i8* %236, i64 %218
  %248 = add nuw nsw i32 %237, 1
  %249 = load i32, i32* %26, align 4
  %250 = icmp slt i32 %248, %249
  br i1 %250, label %235, label %251

251:                                              ; preds = %246, %209
  br i1 %28, label %252, label %393

252:                                              ; preds = %251
  %253 = tail call i32 @opus_encoder_get_size(i32 2) #6
  %254 = tail call i32 @opus_encoder_get_size(i32 1) #6
  %255 = load i32, i32* %26, align 4
  %256 = icmp sgt i32 %255, 0
  br i1 %256, label %257, label %316

257:                                              ; preds = %252
  %258 = load i32, i32* %27, align 4
  %259 = add i32 %255, -1
  %260 = and i32 %255, 3
  %261 = icmp ult i32 %259, 3
  br i1 %261, label %298, label %262

262:                                              ; preds = %257
  %263 = sub i32 %255, %260
  br label %264

264:                                              ; preds = %264, %262
  %265 = phi i8* [ %199, %262 ], [ %294, %264 ]
  %266 = phi i32 [ 0, %262 ], [ %295, %264 ]
  %267 = phi i32 [ %263, %262 ], [ %296, %264 ]
  %268 = icmp slt i32 %266, %258
  %269 = select i1 %268, i32 %253, i32 %254
  %270 = add i32 %269, 7
  %271 = and i32 %270, -8
  %272 = sext i32 %271 to i64
  %273 = getelementptr inbounds i8, i8* %265, i64 %272
  %274 = or i32 %266, 1
  %275 = icmp slt i32 %274, %258
  %276 = select i1 %275, i32 %253, i32 %254
  %277 = add i32 %276, 7
  %278 = and i32 %277, -8
  %279 = sext i32 %278 to i64
  %280 = getelementptr inbounds i8, i8* %273, i64 %279
  %281 = or i32 %266, 2
  %282 = icmp slt i32 %281, %258
  %283 = select i1 %282, i32 %253, i32 %254
  %284 = add i32 %283, 7
  %285 = and i32 %284, -8
  %286 = sext i32 %285 to i64
  %287 = getelementptr inbounds i8, i8* %280, i64 %286
  %288 = or i32 %266, 3
  %289 = icmp slt i32 %288, %258
  %290 = select i1 %289, i32 %253, i32 %254
  %291 = add i32 %290, 7
  %292 = and i32 %291, -8
  %293 = sext i32 %292 to i64
  %294 = getelementptr inbounds i8, i8* %287, i64 %293
  %295 = add nuw nsw i32 %266, 4
  %296 = add i32 %267, -4
  %297 = icmp eq i32 %296, 0
  br i1 %297, label %298, label %264

298:                                              ; preds = %264, %257
  %299 = phi i8* [ undef, %257 ], [ %294, %264 ]
  %300 = phi i8* [ %199, %257 ], [ %294, %264 ]
  %301 = phi i32 [ 0, %257 ], [ %295, %264 ]
  %302 = icmp eq i32 %260, 0
  br i1 %302, label %316, label %303

303:                                              ; preds = %298, %303
  %304 = phi i8* [ %312, %303 ], [ %300, %298 ]
  %305 = phi i32 [ %313, %303 ], [ %301, %298 ]
  %306 = phi i32 [ %314, %303 ], [ %260, %298 ]
  %307 = icmp slt i32 %305, %258
  %308 = select i1 %307, i32 %253, i32 %254
  %309 = add i32 %308, 7
  %310 = and i32 %309, -8
  %311 = sext i32 %310 to i64
  %312 = getelementptr inbounds i8, i8* %304, i64 %311
  %313 = add nuw nsw i32 %305, 1
  %314 = add i32 %306, -1
  %315 = icmp eq i32 %314, 0
  br i1 %315, label %316, label %303, !llvm.loop !16

316:                                              ; preds = %298, %303, %252
  %317 = phi i8* [ %199, %252 ], [ %299, %298 ], [ %312, %303 ]
  %318 = load i32, i32* %25, align 4
  %319 = mul nsw i32 %318, 120
  %320 = sext i32 %319 to i64
  %321 = shl nsw i64 %320, 2
  %322 = getelementptr inbounds i8, i8* %317, i64 %321
  %323 = sext i32 %2 to i64
  %324 = shl nsw i64 %323, 2
  tail call void @llvm.memset.p0i8.i64(i8* align 4 %322, i8 0, i64 %324, i1 false)
  %325 = tail call i32 @opus_encoder_get_size(i32 2) #6
  %326 = tail call i32 @opus_encoder_get_size(i32 1) #6
  %327 = load i32, i32* %26, align 4
  %328 = icmp sgt i32 %327, 0
  br i1 %328, label %329, label %388

329:                                              ; preds = %316
  %330 = load i32, i32* %27, align 4
  %331 = add i32 %327, -1
  %332 = and i32 %327, 3
  %333 = icmp ult i32 %331, 3
  br i1 %333, label %370, label %334

334:                                              ; preds = %329
  %335 = sub i32 %327, %332
  br label %336

336:                                              ; preds = %336, %334
  %337 = phi i8* [ %199, %334 ], [ %366, %336 ]
  %338 = phi i32 [ 0, %334 ], [ %367, %336 ]
  %339 = phi i32 [ %335, %334 ], [ %368, %336 ]
  %340 = icmp slt i32 %338, %330
  %341 = select i1 %340, i32 %325, i32 %326
  %342 = add i32 %341, 7
  %343 = and i32 %342, -8
  %344 = sext i32 %343 to i64
  %345 = getelementptr inbounds i8, i8* %337, i64 %344
  %346 = or i32 %338, 1
  %347 = icmp slt i32 %346, %330
  %348 = select i1 %347, i32 %325, i32 %326
  %349 = add i32 %348, 7
  %350 = and i32 %349, -8
  %351 = sext i32 %350 to i64
  %352 = getelementptr inbounds i8, i8* %345, i64 %351
  %353 = or i32 %338, 2
  %354 = icmp slt i32 %353, %330
  %355 = select i1 %354, i32 %325, i32 %326
  %356 = add i32 %355, 7
  %357 = and i32 %356, -8
  %358 = sext i32 %357 to i64
  %359 = getelementptr inbounds i8, i8* %352, i64 %358
  %360 = or i32 %338, 3
  %361 = icmp slt i32 %360, %330
  %362 = select i1 %361, i32 %325, i32 %326
  %363 = add i32 %362, 7
  %364 = and i32 %363, -8
  %365 = sext i32 %364 to i64
  %366 = getelementptr inbounds i8, i8* %359, i64 %365
  %367 = add nuw nsw i32 %338, 4
  %368 = add i32 %339, -4
  %369 = icmp eq i32 %368, 0
  br i1 %369, label %370, label %336

370:                                              ; preds = %336, %329
  %371 = phi i8* [ undef, %329 ], [ %366, %336 ]
  %372 = phi i8* [ %199, %329 ], [ %366, %336 ]
  %373 = phi i32 [ 0, %329 ], [ %367, %336 ]
  %374 = icmp eq i32 %332, 0
  br i1 %374, label %388, label %375

375:                                              ; preds = %370, %375
  %376 = phi i8* [ %384, %375 ], [ %372, %370 ]
  %377 = phi i32 [ %385, %375 ], [ %373, %370 ]
  %378 = phi i32 [ %386, %375 ], [ %332, %370 ]
  %379 = icmp slt i32 %377, %330
  %380 = select i1 %379, i32 %325, i32 %326
  %381 = add i32 %380, 7
  %382 = and i32 %381, -8
  %383 = sext i32 %382 to i64
  %384 = getelementptr inbounds i8, i8* %376, i64 %383
  %385 = add nuw nsw i32 %377, 1
  %386 = add i32 %378, -1
  %387 = icmp eq i32 %386, 0
  br i1 %387, label %388, label %375, !llvm.loop !17

388:                                              ; preds = %370, %375, %316
  %389 = phi i8* [ %199, %316 ], [ %371, %370 ], [ %384, %375 ]
  %390 = mul nsw i32 %2, 120
  %391 = sext i32 %390 to i64
  %392 = shl nsw i64 %391, 2
  tail call void @llvm.memset.p0i8.i64(i8* align 4 %389, i8 0, i64 %392, i1 false)
  br label %393

393:                                              ; preds = %388, %251
  %394 = getelementptr inbounds %struct.OpusMSEncoder, %struct.OpusMSEncoder* %0, i64 0, i32 5
  store i32 %7, i32* %394, align 4
  br label %395

395:                                              ; preds = %172, %175, %178, %219, %244, %191, %187, %161, %8, %12, %393
  %396 = phi i32 [ 0, %393 ], [ -1, %12 ], [ -1, %8 ], [ -1, %161 ], [ -1, %187 ], [ -1, %191 ], [ %239, %244 ], [ %223, %219 ], [ -1, %178 ], [ -1, %175 ], [ -1, %172 ]
  ret i32 %396
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @opus_multistream_surround_encoder_init(%struct.OpusMSEncoder*, i32, i32, i32, i32*, i32*, i8* nocapture, i32) local_unnamed_addr #0 {
  %9 = add i32 %2, -1
  %10 = icmp ugt i32 %9, 254
  br i1 %10, label %180, label %11

11:                                               ; preds = %8
  %12 = getelementptr inbounds %struct.OpusMSEncoder, %struct.OpusMSEncoder* %0, i64 0, i32 2
  store i32 -1, i32* %12, align 4
  %13 = icmp eq i32 %3, 0
  br i1 %13, label %14, label %18

14:                                               ; preds = %11
  switch i32 %2, label %180 [
    i32 1, label %15
    i32 2, label %16
  ]

15:                                               ; preds = %14
  store i32 1, i32* %4, align 4
  store i32 0, i32* %5, align 4
  store i8 0, i8* %6, align 1
  br label %170

16:                                               ; preds = %14
  store i32 1, i32* %4, align 4
  store i32 1, i32* %5, align 4
  store i8 0, i8* %6, align 1
  %17 = getelementptr inbounds i8, i8* %6, i64 1
  store i8 1, i8* %17, align 1
  br label %170

18:                                               ; preds = %11
  %19 = icmp eq i32 %3, 1
  %20 = icmp ult i32 %9, 8
  %21 = and i1 %20, %19
  br i1 %21, label %22, label %34

22:                                               ; preds = %18
  %23 = sext i32 %9 to i64
  %24 = getelementptr inbounds [8 x %struct.VorbisLayout], [8 x %struct.VorbisLayout]* @vorbis_mappings, i64 0, i64 %23, i32 0
  %25 = load i32, i32* %24, align 16
  store i32 %25, i32* %4, align 4
  %26 = getelementptr inbounds [8 x %struct.VorbisLayout], [8 x %struct.VorbisLayout]* @vorbis_mappings, i64 0, i64 %23, i32 1
  %27 = load i32, i32* %26, align 4
  store i32 %27, i32* %5, align 4
  %28 = zext i32 %2 to i64
  %29 = getelementptr [8 x %struct.VorbisLayout], [8 x %struct.VorbisLayout]* @vorbis_mappings, i64 0, i64 %23, i32 2, i64 0
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %6, i8* align 8 %29, i64 %28, i1 false)
  %30 = icmp sgt i32 %2, 5
  br i1 %30, label %31, label %170

31:                                               ; preds = %22
  %32 = load i32, i32* %4, align 4
  %33 = add nsw i32 %32, -1
  store i32 %33, i32* %12, align 4
  br label %170

34:                                               ; preds = %18
  switch i32 %3, label %180 [
    i32 255, label %35
    i32 2, label %109
  ]

35:                                               ; preds = %34
  store i32 %2, i32* %4, align 4
  store i32 0, i32* %5, align 4
  %36 = zext i32 %2 to i64
  %37 = icmp ult i32 %2, 16
  br i1 %37, label %101, label %38

38:                                               ; preds = %35
  %39 = and i64 %36, 4294967280
  %40 = add nsw i64 %39, -16
  %41 = lshr exact i64 %40, 4
  %42 = add nuw nsw i64 %41, 1
  %43 = and i64 %42, 7
  %44 = icmp ult i64 %40, 112
  br i1 %44, label %85, label %45

45:                                               ; preds = %38
  %46 = sub nsw i64 %42, %43
  br label %47

47:                                               ; preds = %47, %45
  %48 = phi i64 [ 0, %45 ], [ %81, %47 ]
  %49 = phi <16 x i8> [ <i8 0, i8 1, i8 2, i8 3, i8 4, i8 5, i8 6, i8 7, i8 8, i8 9, i8 10, i8 11, i8 12, i8 13, i8 14, i8 15>, %45 ], [ %82, %47 ]
  %50 = phi i64 [ %46, %45 ], [ %83, %47 ]
  %51 = getelementptr inbounds i8, i8* %6, i64 %48
  %52 = bitcast i8* %51 to <16 x i8>*
  store <16 x i8> %49, <16 x i8>* %52, align 1
  %53 = or i64 %48, 16
  %54 = add <16 x i8> %49, <i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16>
  %55 = getelementptr inbounds i8, i8* %6, i64 %53
  %56 = bitcast i8* %55 to <16 x i8>*
  store <16 x i8> %54, <16 x i8>* %56, align 1
  %57 = or i64 %48, 32
  %58 = add <16 x i8> %49, <i8 32, i8 32, i8 32, i8 32, i8 32, i8 32, i8 32, i8 32, i8 32, i8 32, i8 32, i8 32, i8 32, i8 32, i8 32, i8 32>
  %59 = getelementptr inbounds i8, i8* %6, i64 %57
  %60 = bitcast i8* %59 to <16 x i8>*
  store <16 x i8> %58, <16 x i8>* %60, align 1
  %61 = or i64 %48, 48
  %62 = add <16 x i8> %49, <i8 48, i8 48, i8 48, i8 48, i8 48, i8 48, i8 48, i8 48, i8 48, i8 48, i8 48, i8 48, i8 48, i8 48, i8 48, i8 48>
  %63 = getelementptr inbounds i8, i8* %6, i64 %61
  %64 = bitcast i8* %63 to <16 x i8>*
  store <16 x i8> %62, <16 x i8>* %64, align 1
  %65 = or i64 %48, 64
  %66 = add <16 x i8> %49, <i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64>
  %67 = getelementptr inbounds i8, i8* %6, i64 %65
  %68 = bitcast i8* %67 to <16 x i8>*
  store <16 x i8> %66, <16 x i8>* %68, align 1
  %69 = or i64 %48, 80
  %70 = add <16 x i8> %49, <i8 80, i8 80, i8 80, i8 80, i8 80, i8 80, i8 80, i8 80, i8 80, i8 80, i8 80, i8 80, i8 80, i8 80, i8 80, i8 80>
  %71 = getelementptr inbounds i8, i8* %6, i64 %69
  %72 = bitcast i8* %71 to <16 x i8>*
  store <16 x i8> %70, <16 x i8>* %72, align 1
  %73 = or i64 %48, 96
  %74 = add <16 x i8> %49, <i8 96, i8 96, i8 96, i8 96, i8 96, i8 96, i8 96, i8 96, i8 96, i8 96, i8 96, i8 96, i8 96, i8 96, i8 96, i8 96>
  %75 = getelementptr inbounds i8, i8* %6, i64 %73
  %76 = bitcast i8* %75 to <16 x i8>*
  store <16 x i8> %74, <16 x i8>* %76, align 1
  %77 = or i64 %48, 112
  %78 = add <16 x i8> %49, <i8 112, i8 112, i8 112, i8 112, i8 112, i8 112, i8 112, i8 112, i8 112, i8 112, i8 112, i8 112, i8 112, i8 112, i8 112, i8 112>
  %79 = getelementptr inbounds i8, i8* %6, i64 %77
  %80 = bitcast i8* %79 to <16 x i8>*
  store <16 x i8> %78, <16 x i8>* %80, align 1
  %81 = add i64 %48, 128
  %82 = xor <16 x i8> %49, <i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128>
  %83 = add i64 %50, -8
  %84 = icmp eq i64 %83, 0
  br i1 %84, label %85, label %47, !llvm.loop !18

85:                                               ; preds = %47, %38
  %86 = phi i64 [ 0, %38 ], [ %81, %47 ]
  %87 = phi <16 x i8> [ <i8 0, i8 1, i8 2, i8 3, i8 4, i8 5, i8 6, i8 7, i8 8, i8 9, i8 10, i8 11, i8 12, i8 13, i8 14, i8 15>, %38 ], [ %82, %47 ]
  %88 = icmp eq i64 %43, 0
  br i1 %88, label %99, label %89

89:                                               ; preds = %85, %89
  %90 = phi i64 [ %95, %89 ], [ %86, %85 ]
  %91 = phi <16 x i8> [ %96, %89 ], [ %87, %85 ]
  %92 = phi i64 [ %97, %89 ], [ %43, %85 ]
  %93 = getelementptr inbounds i8, i8* %6, i64 %90
  %94 = bitcast i8* %93 to <16 x i8>*
  store <16 x i8> %91, <16 x i8>* %94, align 1
  %95 = add i64 %90, 16
  %96 = add <16 x i8> %91, <i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16>
  %97 = add i64 %92, -1
  %98 = icmp eq i64 %97, 0
  br i1 %98, label %99, label %89, !llvm.loop !19

99:                                               ; preds = %89, %85
  %100 = icmp eq i64 %39, %36
  br i1 %100, label %170, label %101

101:                                              ; preds = %99, %35
  %102 = phi i64 [ 0, %35 ], [ %39, %99 ]
  br label %103

103:                                              ; preds = %101, %103
  %104 = phi i64 [ %107, %103 ], [ %102, %101 ]
  %105 = trunc i64 %104 to i8
  %106 = getelementptr inbounds i8, i8* %6, i64 %104
  store i8 %105, i8* %106, align 1
  %107 = add nuw nsw i64 %104, 1
  %108 = icmp eq i64 %107, %36
  br i1 %108, label %170, label %103, !llvm.loop !20

109:                                              ; preds = %34
  %110 = icmp ugt i32 %9, 226
  br i1 %110, label %180, label %111

111:                                              ; preds = %109
  %112 = tail call i32 @isqrt32(i32 %2) #6
  %113 = mul nsw i32 %112, %112
  %114 = sub nsw i32 %2, %113
  %115 = icmp ne i32 %114, 0
  %116 = and i32 %114, -3
  %117 = icmp eq i32 %116, 0
  br i1 %117, label %118, label %180

118:                                              ; preds = %111
  %119 = icmp eq i32* %4, null
  br i1 %119, label %123, label %120

120:                                              ; preds = %118
  %121 = zext i1 %115 to i32
  %122 = add nuw nsw i32 %113, %121
  store i32 %122, i32* %4, align 4
  br label %123

123:                                              ; preds = %120, %118
  %124 = icmp eq i32* %5, null
  br i1 %124, label %125, label %127

125:                                              ; preds = %123
  %126 = load i32, i32* null, align 536870912
  br label %129

127:                                              ; preds = %123
  %128 = zext i1 %115 to i32
  store i32 %128, i32* %5, align 4
  br label %129

129:                                              ; preds = %125, %127
  %130 = phi i32 [ %126, %125 ], [ %128, %127 ]
  %131 = load i32, i32* %4, align 4
  %132 = icmp sgt i32 %131, %130
  br i1 %132, label %143, label %133

133:                                              ; preds = %143, %129
  %134 = phi i32 [ %131, %129 ], [ %152, %143 ]
  %135 = phi i32 [ %130, %129 ], [ %153, %143 ]
  %136 = icmp sgt i32 %135, 0
  br i1 %136, label %137, label %170

137:                                              ; preds = %133
  %138 = sub i32 %134, %135
  %139 = sext i32 %138 to i64
  %140 = getelementptr inbounds i8, i8* %6, i64 %139
  store i8 0, i8* %140, align 1
  %141 = load i32, i32* %5, align 4
  %142 = icmp sgt i32 %141, 0
  br i1 %142, label %157, label %170

143:                                              ; preds = %129, %143
  %144 = phi i64 [ %151, %143 ], [ 0, %129 ]
  %145 = phi i32 [ %153, %143 ], [ %130, %129 ]
  %146 = shl i32 %145, 1
  %147 = trunc i64 %144 to i32
  %148 = add nsw i32 %146, %147
  %149 = trunc i32 %148 to i8
  %150 = getelementptr inbounds i8, i8* %6, i64 %144
  store i8 %149, i8* %150, align 1
  %151 = add nuw nsw i64 %144, 1
  %152 = load i32, i32* %4, align 4
  %153 = load i32, i32* %5, align 4
  %154 = sub nsw i32 %152, %153
  %155 = sext i32 %154 to i64
  %156 = icmp slt i64 %151, %155
  br i1 %156, label %143, label %133

157:                                              ; preds = %137, %157
  %158 = phi i32 [ %167, %157 ], [ %141, %137 ]
  %159 = phi i32 [ %166, %157 ], [ 1, %137 ]
  %160 = load i32, i32* %4, align 4
  %161 = trunc i32 %159 to i8
  %162 = sub i32 %159, %158
  %163 = add i32 %162, %160
  %164 = sext i32 %163 to i64
  %165 = getelementptr inbounds i8, i8* %6, i64 %164
  store i8 %161, i8* %165, align 1
  %166 = add nuw nsw i32 %159, 1
  %167 = load i32, i32* %5, align 4
  %168 = shl nsw i32 %167, 1
  %169 = icmp slt i32 %166, %168
  br i1 %169, label %157, label %170

170:                                              ; preds = %157, %103, %137, %99, %133, %22, %31, %15, %16
  %171 = icmp sgt i32 %2, 2
  %172 = icmp eq i32 %3, 1
  %173 = and i1 %171, %172
  %174 = icmp eq i32 %3, 2
  %175 = select i1 %174, i32 2, i32 0
  %176 = select i1 %173, i32 1, i32 %175
  %177 = load i32, i32* %4, align 4
  %178 = load i32, i32* %5, align 4
  %179 = tail call fastcc i32 @opus_multistream_encoder_init_impl(%struct.OpusMSEncoder* %0, i32 %1, i32 %2, i32 %177, i32 %178, i8* %6, i32 %7, i32 %176)
  br label %180

180:                                              ; preds = %111, %109, %34, %14, %8, %170
  %181 = phi i32 [ %179, %170 ], [ -1, %8 ], [ -5, %14 ], [ -5, %34 ], [ -1, %109 ], [ -1, %111 ]
  ret i32 %181
}

; Function Attrs: nounwind ssp uwtable
define hidden %struct.OpusMSEncoder* @opus_multistream_encoder_create(i32, i32, i32, i32, i8* nocapture readonly, i32, i32*) local_unnamed_addr #0 {
  %8 = add i32 %1, -1
  %9 = icmp ugt i32 %8, 254
  br i1 %9, label %19, label %10

10:                                               ; preds = %7
  %11 = icmp slt i32 %2, %3
  %12 = icmp slt i32 %2, 1
  %13 = or i1 %12, %11
  %14 = icmp slt i32 %3, 0
  %15 = or i1 %14, %13
  %16 = sub nsw i32 255, %3
  %17 = icmp slt i32 %16, %2
  %18 = or i1 %17, %15
  br i1 %18, label %19, label %22

19:                                               ; preds = %10, %7
  %20 = icmp eq i32* %6, null
  br i1 %20, label %49, label %21

21:                                               ; preds = %19
  store i32 -1, i32* %6, align 4
  br label %49

22:                                               ; preds = %10
  %23 = tail call i32 @opus_encoder_get_size(i32 2) #6
  %24 = tail call i32 @opus_encoder_get_size(i32 1) #6
  %25 = add i32 %23, 7
  %26 = and i32 %25, -8
  %27 = mul nsw i32 %26, %3
  %28 = add nsw i32 %27, 296
  %29 = sub nsw i32 %2, %3
  %30 = add i32 %24, 7
  %31 = and i32 %30, -8
  %32 = mul nsw i32 %31, %29
  %33 = add nsw i32 %28, %32
  %34 = sext i32 %33 to i64
  %35 = tail call noalias i8* @malloc(i64 %34) #6
  %36 = bitcast i8* %35 to %struct.OpusMSEncoder*
  %37 = icmp eq i8* %35, null
  br i1 %37, label %38, label %41

38:                                               ; preds = %22
  %39 = icmp eq i32* %6, null
  br i1 %39, label %49, label %40

40:                                               ; preds = %38
  store i32 -7, i32* %6, align 4
  br label %49

41:                                               ; preds = %22
  %42 = tail call fastcc i32 @opus_multistream_encoder_init_impl(%struct.OpusMSEncoder* nonnull %36, i32 %0, i32 %1, i32 %2, i32 %3, i8* %4, i32 %5, i32 0) #6
  %43 = icmp eq i32 %42, 0
  br i1 %43, label %45, label %44

44:                                               ; preds = %41
  tail call void @free(i8* nonnull %35) #6
  br label %45

45:                                               ; preds = %41, %44
  %46 = phi %struct.OpusMSEncoder* [ null, %44 ], [ %36, %41 ]
  %47 = icmp eq i32* %6, null
  br i1 %47, label %49, label %48

48:                                               ; preds = %45
  store i32 %42, i32* %6, align 4
  br label %49

49:                                               ; preds = %48, %45, %40, %38, %21, %19
  %50 = phi %struct.OpusMSEncoder* [ null, %19 ], [ null, %21 ], [ null, %38 ], [ null, %40 ], [ %46, %45 ], [ %46, %48 ]
  ret %struct.OpusMSEncoder* %50
}

; Function Attrs: nounwind ssp uwtable
define hidden %struct.OpusMSEncoder* @opus_multistream_surround_encoder_create(i32, i32, i32, i32*, i32*, i8* nocapture, i32, i32*) local_unnamed_addr #0 {
  %9 = add i32 %1, -1
  %10 = icmp ugt i32 %9, 254
  br i1 %10, label %11, label %14

11:                                               ; preds = %8
  %12 = icmp eq i32* %7, null
  br i1 %12, label %36, label %13

13:                                               ; preds = %11
  store i32 -1, i32* %7, align 4
  br label %36

14:                                               ; preds = %8
  %15 = tail call i32 @opus_multistream_surround_encoder_get_size(i32 %1, i32 %2)
  %16 = icmp eq i32 %15, 0
  br i1 %16, label %17, label %20

17:                                               ; preds = %14
  %18 = icmp eq i32* %7, null
  br i1 %18, label %36, label %19

19:                                               ; preds = %17
  store i32 -5, i32* %7, align 4
  br label %36

20:                                               ; preds = %14
  %21 = sext i32 %15 to i64
  %22 = tail call noalias i8* @malloc(i64 %21) #6
  %23 = bitcast i8* %22 to %struct.OpusMSEncoder*
  %24 = icmp eq i8* %22, null
  br i1 %24, label %25, label %28

25:                                               ; preds = %20
  %26 = icmp eq i32* %7, null
  br i1 %26, label %36, label %27

27:                                               ; preds = %25
  store i32 -7, i32* %7, align 4
  br label %36

28:                                               ; preds = %20
  %29 = tail call i32 @opus_multistream_surround_encoder_init(%struct.OpusMSEncoder* nonnull %23, i32 %0, i32 %1, i32 %2, i32* %3, i32* %4, i8* %5, i32 %6)
  %30 = icmp eq i32 %29, 0
  br i1 %30, label %32, label %31

31:                                               ; preds = %28
  tail call void @free(i8* nonnull %22) #6
  br label %32

32:                                               ; preds = %28, %31
  %33 = phi %struct.OpusMSEncoder* [ null, %31 ], [ %23, %28 ]
  %34 = icmp eq i32* %7, null
  br i1 %34, label %36, label %35

35:                                               ; preds = %32
  store i32 %29, i32* %7, align 4
  br label %36

36:                                               ; preds = %35, %32, %27, %25, %19, %17, %13, %11
  %37 = phi %struct.OpusMSEncoder* [ null, %11 ], [ null, %13 ], [ null, %17 ], [ null, %19 ], [ null, %25 ], [ null, %27 ], [ %33, %32 ], [ %33, %35 ]
  ret %struct.OpusMSEncoder* %37
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @opus_multistream_encode_native(%struct.OpusMSEncoder*, void (float*, i32, i8*, i32, i32, i32, i8*)* nocapture, i8*, i32, i8*, i32, i32, void (i8*, float*, i32, i32, i32, i32, i32)*, i32, i8*) local_unnamed_addr #0 {
  %11 = alloca i32, align 4
  %12 = alloca i32, align 4
  %13 = alloca [7662 x i8], align 16
  %14 = alloca %struct.OpusRepacketizer, align 8
  %15 = alloca i32, align 4
  %16 = alloca %struct.OpusCustomMode*, align 8
  %17 = alloca [256 x i32], align 16
  %18 = alloca [42 x float], align 16
  %19 = bitcast [42 x float]* %18 to i8*
  %20 = bitcast i32* %12 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %20) #6
  store i32 -1431655766, i32* %12, align 4
  %21 = getelementptr inbounds [7662 x i8], [7662 x i8]* %13, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 7662, i8* nonnull %21) #6
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %21, i8 -86, i64 7662, i1 false)
  %22 = getelementptr inbounds %struct.OpusRepacketizer, %struct.OpusRepacketizer* %14, i64 0, i32 0
  call void @llvm.lifetime.start.p0i8(i64 496, i8* nonnull %22) #6
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %22, i8 -86, i64 496, i1 false)
  %23 = bitcast i32* %15 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %23) #6
  store i32 -1431655766, i32* %15, align 4
  %24 = bitcast %struct.OpusCustomMode** %16 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %24) #6
  store %struct.OpusCustomMode* inttoptr (i64 -6148914691236517206 to %struct.OpusCustomMode*), %struct.OpusCustomMode** %16, align 8
  %25 = bitcast [256 x i32]* %17 to i8*
  call void @llvm.lifetime.start.p0i8(i64 1024, i8* nonnull %25) #6
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %25, i8 -86, i64 1024, i1 false)
  call void @llvm.lifetime.start.p0i8(i64 168, i8* nonnull %19) #6
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %19, i8 -1, i64 168, i1 false)
  %26 = getelementptr inbounds %struct.OpusMSEncoder, %struct.OpusMSEncoder* %0, i64 0, i32 5
  %27 = load i32, i32* %26, align 4
  %28 = icmp eq i32 %27, 1
  br i1 %28, label %29, label %173

29:                                               ; preds = %10
  %30 = tail call i32 @opus_encoder_get_size(i32 2) #6
  %31 = tail call i32 @opus_encoder_get_size(i32 1) #6
  %32 = getelementptr inbounds %struct.OpusMSEncoder, %struct.OpusMSEncoder* %0, i64 1, i32 0, i32 1
  %33 = bitcast i32* %32 to i8*
  %34 = getelementptr inbounds %struct.OpusMSEncoder, %struct.OpusMSEncoder* %0, i64 0, i32 0, i32 1
  %35 = load i32, i32* %34, align 4
  %36 = icmp sgt i32 %35, 0
  br i1 %36, label %37, label %97

37:                                               ; preds = %29
  %38 = getelementptr inbounds %struct.OpusMSEncoder, %struct.OpusMSEncoder* %0, i64 0, i32 0, i32 2
  %39 = load i32, i32* %38, align 4
  %40 = add i32 %35, -1
  %41 = and i32 %35, 3
  %42 = icmp ult i32 %40, 3
  br i1 %42, label %79, label %43

43:                                               ; preds = %37
  %44 = sub i32 %35, %41
  br label %45

45:                                               ; preds = %45, %43
  %46 = phi i8* [ %33, %43 ], [ %75, %45 ]
  %47 = phi i32 [ 0, %43 ], [ %76, %45 ]
  %48 = phi i32 [ %44, %43 ], [ %77, %45 ]
  %49 = icmp slt i32 %47, %39
  %50 = select i1 %49, i32 %30, i32 %31
  %51 = add i32 %50, 7
  %52 = and i32 %51, -8
  %53 = sext i32 %52 to i64
  %54 = getelementptr inbounds i8, i8* %46, i64 %53
  %55 = or i32 %47, 1
  %56 = icmp slt i32 %55, %39
  %57 = select i1 %56, i32 %30, i32 %31
  %58 = add i32 %57, 7
  %59 = and i32 %58, -8
  %60 = sext i32 %59 to i64
  %61 = getelementptr inbounds i8, i8* %54, i64 %60
  %62 = or i32 %47, 2
  %63 = icmp slt i32 %62, %39
  %64 = select i1 %63, i32 %30, i32 %31
  %65 = add i32 %64, 7
  %66 = and i32 %65, -8
  %67 = sext i32 %66 to i64
  %68 = getelementptr inbounds i8, i8* %61, i64 %67
  %69 = or i32 %47, 3
  %70 = icmp slt i32 %69, %39
  %71 = select i1 %70, i32 %30, i32 %31
  %72 = add i32 %71, 7
  %73 = and i32 %72, -8
  %74 = sext i32 %73 to i64
  %75 = getelementptr inbounds i8, i8* %68, i64 %74
  %76 = add nuw nsw i32 %47, 4
  %77 = add i32 %48, -4
  %78 = icmp eq i32 %77, 0
  br i1 %78, label %79, label %45

79:                                               ; preds = %45, %37
  %80 = phi i8* [ undef, %37 ], [ %75, %45 ]
  %81 = phi i8* [ %33, %37 ], [ %75, %45 ]
  %82 = phi i32 [ 0, %37 ], [ %76, %45 ]
  %83 = icmp eq i32 %41, 0
  br i1 %83, label %97, label %84

84:                                               ; preds = %79, %84
  %85 = phi i8* [ %93, %84 ], [ %81, %79 ]
  %86 = phi i32 [ %94, %84 ], [ %82, %79 ]
  %87 = phi i32 [ %95, %84 ], [ %41, %79 ]
  %88 = icmp slt i32 %86, %39
  %89 = select i1 %88, i32 %30, i32 %31
  %90 = add i32 %89, 7
  %91 = and i32 %90, -8
  %92 = sext i32 %91 to i64
  %93 = getelementptr inbounds i8, i8* %85, i64 %92
  %94 = add nuw nsw i32 %86, 1
  %95 = add i32 %87, -1
  %96 = icmp eq i32 %95, 0
  br i1 %96, label %97, label %84, !llvm.loop !21

97:                                               ; preds = %79, %84, %29
  %98 = phi i8* [ %33, %29 ], [ %80, %79 ], [ %93, %84 ]
  %99 = getelementptr inbounds %struct.OpusMSEncoder, %struct.OpusMSEncoder* %0, i64 0, i32 0, i32 0
  %100 = load i32, i32* %99, align 4
  %101 = mul nsw i32 %100, 120
  %102 = sext i32 %101 to i64
  %103 = shl nsw i64 %102, 2
  %104 = getelementptr inbounds i8, i8* %98, i64 %103
  %105 = bitcast i8* %104 to float*
  %106 = tail call i32 @opus_encoder_get_size(i32 2) #6
  %107 = tail call i32 @opus_encoder_get_size(i32 1) #6
  %108 = load i32, i32* %34, align 4
  %109 = icmp sgt i32 %108, 0
  br i1 %109, label %110, label %170

110:                                              ; preds = %97
  %111 = getelementptr inbounds %struct.OpusMSEncoder, %struct.OpusMSEncoder* %0, i64 0, i32 0, i32 2
  %112 = load i32, i32* %111, align 4
  %113 = add i32 %108, -1
  %114 = and i32 %108, 3
  %115 = icmp ult i32 %113, 3
  br i1 %115, label %152, label %116

116:                                              ; preds = %110
  %117 = sub i32 %108, %114
  br label %118

118:                                              ; preds = %118, %116
  %119 = phi i8* [ %33, %116 ], [ %148, %118 ]
  %120 = phi i32 [ 0, %116 ], [ %149, %118 ]
  %121 = phi i32 [ %117, %116 ], [ %150, %118 ]
  %122 = icmp slt i32 %120, %112
  %123 = select i1 %122, i32 %106, i32 %107
  %124 = add i32 %123, 7
  %125 = and i32 %124, -8
  %126 = sext i32 %125 to i64
  %127 = getelementptr inbounds i8, i8* %119, i64 %126
  %128 = or i32 %120, 1
  %129 = icmp slt i32 %128, %112
  %130 = select i1 %129, i32 %106, i32 %107
  %131 = add i32 %130, 7
  %132 = and i32 %131, -8
  %133 = sext i32 %132 to i64
  %134 = getelementptr inbounds i8, i8* %127, i64 %133
  %135 = or i32 %120, 2
  %136 = icmp slt i32 %135, %112
  %137 = select i1 %136, i32 %106, i32 %107
  %138 = add i32 %137, 7
  %139 = and i32 %138, -8
  %140 = sext i32 %139 to i64
  %141 = getelementptr inbounds i8, i8* %134, i64 %140
  %142 = or i32 %120, 3
  %143 = icmp slt i32 %142, %112
  %144 = select i1 %143, i32 %106, i32 %107
  %145 = add i32 %144, 7
  %146 = and i32 %145, -8
  %147 = sext i32 %146 to i64
  %148 = getelementptr inbounds i8, i8* %141, i64 %147
  %149 = add nuw nsw i32 %120, 4
  %150 = add i32 %121, -4
  %151 = icmp eq i32 %150, 0
  br i1 %151, label %152, label %118

152:                                              ; preds = %118, %110
  %153 = phi i8* [ undef, %110 ], [ %148, %118 ]
  %154 = phi i8* [ %33, %110 ], [ %148, %118 ]
  %155 = phi i32 [ 0, %110 ], [ %149, %118 ]
  %156 = icmp eq i32 %114, 0
  br i1 %156, label %170, label %157

157:                                              ; preds = %152, %157
  %158 = phi i8* [ %166, %157 ], [ %154, %152 ]
  %159 = phi i32 [ %167, %157 ], [ %155, %152 ]
  %160 = phi i32 [ %168, %157 ], [ %114, %152 ]
  %161 = icmp slt i32 %159, %112
  %162 = select i1 %161, i32 %106, i32 %107
  %163 = add i32 %162, 7
  %164 = and i32 %163, -8
  %165 = sext i32 %164 to i64
  %166 = getelementptr inbounds i8, i8* %158, i64 %165
  %167 = add nuw nsw i32 %159, 1
  %168 = add i32 %160, -1
  %169 = icmp eq i32 %168, 0
  br i1 %169, label %170, label %157, !llvm.loop !22

170:                                              ; preds = %152, %157, %97
  %171 = phi i8* [ %33, %97 ], [ %153, %152 ], [ %166, %157 ]
  %172 = bitcast i8* %171 to float*
  br label %173

173:                                              ; preds = %10, %170
  %174 = phi float* [ %172, %170 ], [ null, %10 ]
  %175 = phi float* [ %105, %170 ], [ null, %10 ]
  %176 = getelementptr inbounds %struct.OpusMSEncoder, %struct.OpusMSEncoder* %0, i64 1, i32 0, i32 1
  %177 = bitcast i32* %176 to i8*
  %178 = bitcast i32* %176 to %struct.OpusEncoder*
  %179 = call i32 (%struct.OpusEncoder*, i32, ...) @opus_encoder_ctl(%struct.OpusEncoder* %178, i32 4029, i32* nonnull %12) #6
  %180 = call i32 (%struct.OpusEncoder*, i32, ...) @opus_encoder_ctl(%struct.OpusEncoder* %178, i32 4007, i32* nonnull %15) #6
  %181 = call i32 (%struct.OpusEncoder*, i32, ...) @opus_encoder_ctl(%struct.OpusEncoder* %178, i32 10015, %struct.OpusCustomMode** nonnull %16) #6
  %182 = getelementptr inbounds %struct.OpusMSEncoder, %struct.OpusMSEncoder* %0, i64 0, i32 4
  %183 = load i32, i32* %182, align 4
  %184 = load i32, i32* %12, align 4
  %185 = call i32 @frame_size_select(i32 %3, i32 %183, i32 %184) #6
  %186 = icmp slt i32 %185, 1
  br i1 %186, label %732, label %187

187:                                              ; preds = %173
  %188 = getelementptr inbounds %struct.OpusMSEncoder, %struct.OpusMSEncoder* %0, i64 0, i32 0
  %189 = getelementptr inbounds %struct.OpusMSEncoder, %struct.OpusMSEncoder* %0, i64 0, i32 0, i32 1
  %190 = load i32, i32* %189, align 4
  %191 = shl i32 %190, 1
  %192 = add nsw i32 %191, -1
  %193 = load i32, i32* %12, align 4
  %194 = sdiv i32 %193, %185
  %195 = icmp eq i32 %194, 10
  %196 = select i1 %195, i32 %190, i32 0
  %197 = add nsw i32 %192, %196
  %198 = icmp sgt i32 %197, %5
  br i1 %198, label %732, label %199

199:                                              ; preds = %187
  %200 = shl nsw i32 %185, 1
  %201 = sext i32 %200 to i64
  %202 = shl nsw i64 %201, 2
  %203 = alloca float, i64 %201, align 16
  %204 = bitcast float* %203 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %204, i8 -86, i64 %202, i1 false)
  %205 = call i32 @opus_encoder_get_size(i32 2) #6
  %206 = call i32 @opus_encoder_get_size(i32 1) #6
  %207 = getelementptr inbounds %struct.OpusMSEncoder, %struct.OpusMSEncoder* %0, i64 0, i32 0, i32 0
  %208 = load i32, i32* %207, align 4
  %209 = mul nsw i32 %208, 21
  %210 = sext i32 %209 to i64
  %211 = shl nsw i64 %210, 2
  %212 = alloca float, i64 %210, align 16
  %213 = bitcast float* %212 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %213, i8 -86, i64 %211, i1 false)
  %214 = load i32, i32* %26, align 4
  %215 = icmp eq i32 %214, 1
  br i1 %215, label %216, label %221

216:                                              ; preds = %199
  %217 = load %struct.OpusCustomMode*, %struct.OpusCustomMode** %16, align 8
  %218 = load i32, i32* %12, align 4
  %219 = getelementptr inbounds %struct.OpusMSEncoder, %struct.OpusMSEncoder* %0, i64 0, i32 1
  %220 = load i32, i32* %219, align 4
  call void @surround_analysis(%struct.OpusCustomMode* %217, i8* %2, float* nonnull %212, float* %174, float* %175, i32 %185, i32 120, i32 %208, i32 %218, void (float*, i32, i8*, i32, i32, i32, i8*)* %1, i32 %220)
  br label %221

221:                                              ; preds = %216, %199
  %222 = bitcast i32* %11 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %222) #6
  store i32 -1431655766, i32* %11, align 4
  %223 = call i32 (%struct.OpusEncoder*, i32, ...) @opus_encoder_ctl(%struct.OpusEncoder* %178, i32 4029, i32* nonnull %11) #6
  %224 = load i32, i32* %26, align 4
  %225 = icmp eq i32 %224, 2
  %226 = load i32, i32* %11, align 4
  br i1 %225, label %227, label %330

227:                                              ; preds = %221
  %228 = load i32, i32* %189, align 4
  %229 = getelementptr inbounds %struct.OpusMSEncoder, %struct.OpusMSEncoder* %0, i64 0, i32 0, i32 2
  %230 = load i32, i32* %229, align 4
  %231 = add nsw i32 %230, %228
  %232 = getelementptr inbounds %struct.OpusMSEncoder, %struct.OpusMSEncoder* %0, i64 0, i32 6
  %233 = load i32, i32* %232, align 4
  switch i32 %233, label %243 [
    i32 -1000, label %234
    i32 -1, label %241
  ]

234:                                              ; preds = %227
  %235 = mul nsw i32 %226, 60
  %236 = sdiv i32 %235, %185
  %237 = add nsw i32 %236, %226
  %238 = mul nsw i32 %237, %231
  %239 = mul nsw i32 %228, 15000
  %240 = add nsw i32 %238, %239
  br label %243

241:                                              ; preds = %227
  %242 = mul nsw i32 %231, 320000
  br label %243

243:                                              ; preds = %241, %234, %227
  %244 = phi i32 [ %240, %234 ], [ %242, %241 ], [ %233, %227 ]
  %245 = sdiv i32 %244, %228
  %246 = icmp sgt i32 %228, 0
  br i1 %246, label %247, label %524

247:                                              ; preds = %243
  %248 = sext i32 %228 to i64
  %249 = icmp ult i32 %228, 8
  br i1 %249, label %323, label %250

250:                                              ; preds = %247
  %251 = and i64 %248, -8
  %252 = insertelement <4 x i32> undef, i32 %245, i32 0
  %253 = shufflevector <4 x i32> %252, <4 x i32> undef, <4 x i32> zeroinitializer
  %254 = insertelement <4 x i32> undef, i32 %245, i32 0
  %255 = shufflevector <4 x i32> %254, <4 x i32> undef, <4 x i32> zeroinitializer
  %256 = add nsw i64 %251, -8
  %257 = lshr exact i64 %256, 3
  %258 = add nuw nsw i64 %257, 1
  %259 = and i64 %258, 7
  %260 = icmp ult i64 %256, 56
  br i1 %260, label %308, label %261

261:                                              ; preds = %250
  %262 = sub nsw i64 %258, %259
  br label %263

263:                                              ; preds = %263, %261
  %264 = phi i64 [ 0, %261 ], [ %305, %263 ]
  %265 = phi i64 [ %262, %261 ], [ %306, %263 ]
  %266 = getelementptr inbounds [256 x i32], [256 x i32]* %17, i64 0, i64 %264
  %267 = bitcast i32* %266 to <4 x i32>*
  store <4 x i32> %253, <4 x i32>* %267, align 16
  %268 = getelementptr inbounds i32, i32* %266, i64 4
  %269 = bitcast i32* %268 to <4 x i32>*
  store <4 x i32> %255, <4 x i32>* %269, align 16
  %270 = or i64 %264, 8
  %271 = getelementptr inbounds [256 x i32], [256 x i32]* %17, i64 0, i64 %270
  %272 = bitcast i32* %271 to <4 x i32>*
  store <4 x i32> %253, <4 x i32>* %272, align 16
  %273 = getelementptr inbounds i32, i32* %271, i64 4
  %274 = bitcast i32* %273 to <4 x i32>*
  store <4 x i32> %255, <4 x i32>* %274, align 16
  %275 = or i64 %264, 16
  %276 = getelementptr inbounds [256 x i32], [256 x i32]* %17, i64 0, i64 %275
  %277 = bitcast i32* %276 to <4 x i32>*
  store <4 x i32> %253, <4 x i32>* %277, align 16
  %278 = getelementptr inbounds i32, i32* %276, i64 4
  %279 = bitcast i32* %278 to <4 x i32>*
  store <4 x i32> %255, <4 x i32>* %279, align 16
  %280 = or i64 %264, 24
  %281 = getelementptr inbounds [256 x i32], [256 x i32]* %17, i64 0, i64 %280
  %282 = bitcast i32* %281 to <4 x i32>*
  store <4 x i32> %253, <4 x i32>* %282, align 16
  %283 = getelementptr inbounds i32, i32* %281, i64 4
  %284 = bitcast i32* %283 to <4 x i32>*
  store <4 x i32> %255, <4 x i32>* %284, align 16
  %285 = or i64 %264, 32
  %286 = getelementptr inbounds [256 x i32], [256 x i32]* %17, i64 0, i64 %285
  %287 = bitcast i32* %286 to <4 x i32>*
  store <4 x i32> %253, <4 x i32>* %287, align 16
  %288 = getelementptr inbounds i32, i32* %286, i64 4
  %289 = bitcast i32* %288 to <4 x i32>*
  store <4 x i32> %255, <4 x i32>* %289, align 16
  %290 = or i64 %264, 40
  %291 = getelementptr inbounds [256 x i32], [256 x i32]* %17, i64 0, i64 %290
  %292 = bitcast i32* %291 to <4 x i32>*
  store <4 x i32> %253, <4 x i32>* %292, align 16
  %293 = getelementptr inbounds i32, i32* %291, i64 4
  %294 = bitcast i32* %293 to <4 x i32>*
  store <4 x i32> %255, <4 x i32>* %294, align 16
  %295 = or i64 %264, 48
  %296 = getelementptr inbounds [256 x i32], [256 x i32]* %17, i64 0, i64 %295
  %297 = bitcast i32* %296 to <4 x i32>*
  store <4 x i32> %253, <4 x i32>* %297, align 16
  %298 = getelementptr inbounds i32, i32* %296, i64 4
  %299 = bitcast i32* %298 to <4 x i32>*
  store <4 x i32> %255, <4 x i32>* %299, align 16
  %300 = or i64 %264, 56
  %301 = getelementptr inbounds [256 x i32], [256 x i32]* %17, i64 0, i64 %300
  %302 = bitcast i32* %301 to <4 x i32>*
  store <4 x i32> %253, <4 x i32>* %302, align 16
  %303 = getelementptr inbounds i32, i32* %301, i64 4
  %304 = bitcast i32* %303 to <4 x i32>*
  store <4 x i32> %255, <4 x i32>* %304, align 16
  %305 = add i64 %264, 64
  %306 = add i64 %265, -8
  %307 = icmp eq i64 %306, 0
  br i1 %307, label %308, label %263, !llvm.loop !23

308:                                              ; preds = %263, %250
  %309 = phi i64 [ 0, %250 ], [ %305, %263 ]
  %310 = icmp eq i64 %259, 0
  br i1 %310, label %321, label %311

311:                                              ; preds = %308, %311
  %312 = phi i64 [ %318, %311 ], [ %309, %308 ]
  %313 = phi i64 [ %319, %311 ], [ %259, %308 ]
  %314 = getelementptr inbounds [256 x i32], [256 x i32]* %17, i64 0, i64 %312
  %315 = bitcast i32* %314 to <4 x i32>*
  store <4 x i32> %253, <4 x i32>* %315, align 16
  %316 = getelementptr inbounds i32, i32* %314, i64 4
  %317 = bitcast i32* %316 to <4 x i32>*
  store <4 x i32> %255, <4 x i32>* %317, align 16
  %318 = add i64 %312, 8
  %319 = add i64 %313, -1
  %320 = icmp eq i64 %319, 0
  br i1 %320, label %321, label %311, !llvm.loop !24

321:                                              ; preds = %311, %308
  %322 = icmp eq i64 %251, %248
  br i1 %322, label %422, label %323

323:                                              ; preds = %321, %247
  %324 = phi i64 [ 0, %247 ], [ %251, %321 ]
  br label %325

325:                                              ; preds = %323, %325
  %326 = phi i64 [ %328, %325 ], [ %324, %323 ]
  %327 = getelementptr inbounds [256 x i32], [256 x i32]* %17, i64 0, i64 %326
  store i32 %245, i32* %327, align 4
  %328 = add nuw nsw i64 %326, 1
  %329 = icmp eq i64 %328, %248
  br i1 %329, label %422, label %325, !llvm.loop !25

330:                                              ; preds = %221
  %331 = getelementptr inbounds %struct.OpusMSEncoder, %struct.OpusMSEncoder* %0, i64 0, i32 2
  %332 = load i32, i32* %331, align 4
  %333 = icmp ne i32 %332, -1
  %334 = zext i1 %333 to i32
  %335 = getelementptr inbounds %struct.OpusMSEncoder, %struct.OpusMSEncoder* %0, i64 0, i32 0, i32 2
  %336 = load i32, i32* %335, align 4
  %337 = load i32, i32* %189, align 4
  %338 = sub nsw i32 %337, %336
  %339 = sub i32 %338, %334
  %340 = shl nsw i32 %336, 1
  %341 = add nsw i32 %339, %340
  %342 = sdiv i32 %226, %185
  %343 = icmp slt i32 %342, 50
  %344 = mul i32 %342, 40
  %345 = select i1 %343, i32 2000, i32 %344
  %346 = getelementptr inbounds %struct.OpusMSEncoder, %struct.OpusMSEncoder* %0, i64 0, i32 6
  %347 = load i32, i32* %346, align 4
  switch i32 %347, label %358 [
    i32 -1000, label %348
    i32 -1, label %354
  ]

348:                                              ; preds = %330
  %349 = add i32 %226, 10000
  %350 = add i32 %349, %345
  %351 = mul nsw i32 %350, %341
  %352 = select i1 %333, i32 8000, i32 0
  %353 = add nsw i32 %351, %352
  br label %358

354:                                              ; preds = %330
  %355 = mul nsw i32 %341, 300000
  %356 = select i1 %333, i32 128000, i32 0
  %357 = add nsw i32 %355, %356
  br label %358

358:                                              ; preds = %354, %348, %330
  %359 = phi i32 [ %353, %348 ], [ %357, %354 ], [ %347, %330 ]
  %360 = icmp slt i32 %359, 60000
  %361 = sdiv i32 %359, 20
  %362 = select i1 %360, i32 %361, i32 3000
  %363 = mul i32 %342, 15
  %364 = select i1 %343, i32 750, i32 %363
  %365 = add nsw i32 %362, %364
  %366 = mul i32 %341, %345
  %367 = sub i32 %359, %366
  %368 = sub i32 0, %365
  %369 = select i1 %333, i32 %368, i32 0
  %370 = add i32 %369, %367
  %371 = sdiv i32 %370, %341
  %372 = sdiv i32 %371, 2
  %373 = icmp slt i32 %372, 20000
  %374 = select i1 %373, i32 %372, i32 20000
  %375 = icmp sgt i32 %374, 0
  %376 = select i1 %375, i32 %374, i32 0
  %377 = shl i32 %339, 8
  %378 = shl i32 %336, 9
  %379 = add nsw i32 %377, %378
  %380 = shl nuw nsw i32 %334, 5
  %381 = or i32 %379, %380
  %382 = add nsw i32 %339, %336
  %383 = mul nsw i32 %376, %382
  %384 = sub i32 %370, %383
  %385 = sext i32 %384 to i64
  %386 = shl nsw i64 %385, 8
  %387 = sext i32 %381 to i64
  %388 = sdiv i64 %386, %387
  %389 = trunc i64 %388 to i32
  %390 = icmp sgt i32 %337, 0
  br i1 %390, label %391, label %524

391:                                              ; preds = %358
  %392 = add nsw i32 %376, %389
  %393 = icmp sgt i32 %392, 0
  %394 = select i1 %393, i32 %392, i32 0
  %395 = add nsw i32 %394, %345
  %396 = ashr i32 %389, 3
  %397 = add nsw i32 %396, %365
  %398 = icmp sgt i32 %397, 0
  %399 = select i1 %398, i32 %397, i32 0
  %400 = shl i32 %345, 1
  %401 = shl nsw i32 %389, 1
  %402 = add nsw i32 %376, %401
  %403 = icmp sgt i32 %402, 0
  %404 = select i1 %403, i32 %402, i32 0
  %405 = add nsw i32 %404, %400
  %406 = sext i32 %336 to i64
  %407 = zext i32 %332 to i64
  %408 = sext i32 %337 to i64
  br label %409

409:                                              ; preds = %419, %391
  %410 = phi i64 [ 0, %391 ], [ %420, %419 ]
  %411 = icmp slt i64 %410, %406
  br i1 %411, label %412, label %414

412:                                              ; preds = %409
  %413 = getelementptr inbounds [256 x i32], [256 x i32]* %17, i64 0, i64 %410
  store i32 %405, i32* %413, align 4
  br label %419

414:                                              ; preds = %409
  %415 = icmp eq i64 %410, %407
  %416 = getelementptr inbounds [256 x i32], [256 x i32]* %17, i64 0, i64 %410
  br i1 %415, label %418, label %417

417:                                              ; preds = %414
  store i32 %395, i32* %416, align 4
  br label %419

418:                                              ; preds = %414
  store i32 %399, i32* %416, align 4
  br label %419

419:                                              ; preds = %418, %417, %412
  %420 = add nuw nsw i64 %410, 1
  %421 = icmp eq i64 %420, %408
  br i1 %421, label %422, label %409

422:                                              ; preds = %419, %325, %321
  %423 = phi i32 [ %230, %321 ], [ %230, %325 ], [ %336, %419 ]
  %424 = phi i32 [ %233, %321 ], [ %233, %325 ], [ %347, %419 ]
  %425 = phi i32 [ %228, %321 ], [ %228, %325 ], [ %337, %419 ]
  %426 = icmp sgt i32 %425, 0
  br i1 %426, label %427, label %524

427:                                              ; preds = %422
  %428 = sext i32 %425 to i64
  %429 = icmp ult i32 %425, 8
  br i1 %429, label %508, label %430

430:                                              ; preds = %427
  %431 = and i64 %428, -8
  %432 = add nsw i64 %431, -8
  %433 = lshr exact i64 %432, 3
  %434 = add nuw nsw i64 %433, 1
  %435 = and i64 %434, 1
  %436 = icmp eq i64 %432, 0
  br i1 %436, label %476, label %437

437:                                              ; preds = %430
  %438 = sub nuw nsw i64 %434, %435
  br label %439

439:                                              ; preds = %439, %437
  %440 = phi i64 [ 0, %437 ], [ %473, %439 ]
  %441 = phi <4 x i32> [ zeroinitializer, %437 ], [ %471, %439 ]
  %442 = phi <4 x i32> [ zeroinitializer, %437 ], [ %472, %439 ]
  %443 = phi i64 [ %438, %437 ], [ %474, %439 ]
  %444 = getelementptr inbounds [256 x i32], [256 x i32]* %17, i64 0, i64 %440
  %445 = bitcast i32* %444 to <4 x i32>*
  %446 = load <4 x i32>, <4 x i32>* %445, align 16
  %447 = getelementptr inbounds i32, i32* %444, i64 4
  %448 = bitcast i32* %447 to <4 x i32>*
  %449 = load <4 x i32>, <4 x i32>* %448, align 16
  %450 = icmp sgt <4 x i32> %446, <i32 500, i32 500, i32 500, i32 500>
  %451 = icmp sgt <4 x i32> %449, <i32 500, i32 500, i32 500, i32 500>
  %452 = select <4 x i1> %450, <4 x i32> %446, <4 x i32> <i32 500, i32 500, i32 500, i32 500>
  %453 = select <4 x i1> %451, <4 x i32> %449, <4 x i32> <i32 500, i32 500, i32 500, i32 500>
  %454 = bitcast i32* %444 to <4 x i32>*
  store <4 x i32> %452, <4 x i32>* %454, align 16
  %455 = bitcast i32* %447 to <4 x i32>*
  store <4 x i32> %453, <4 x i32>* %455, align 16
  %456 = add nuw nsw <4 x i32> %452, %441
  %457 = add nuw nsw <4 x i32> %453, %442
  %458 = or i64 %440, 8
  %459 = getelementptr inbounds [256 x i32], [256 x i32]* %17, i64 0, i64 %458
  %460 = bitcast i32* %459 to <4 x i32>*
  %461 = load <4 x i32>, <4 x i32>* %460, align 16
  %462 = getelementptr inbounds i32, i32* %459, i64 4
  %463 = bitcast i32* %462 to <4 x i32>*
  %464 = load <4 x i32>, <4 x i32>* %463, align 16
  %465 = icmp sgt <4 x i32> %461, <i32 500, i32 500, i32 500, i32 500>
  %466 = icmp sgt <4 x i32> %464, <i32 500, i32 500, i32 500, i32 500>
  %467 = select <4 x i1> %465, <4 x i32> %461, <4 x i32> <i32 500, i32 500, i32 500, i32 500>
  %468 = select <4 x i1> %466, <4 x i32> %464, <4 x i32> <i32 500, i32 500, i32 500, i32 500>
  %469 = bitcast i32* %459 to <4 x i32>*
  store <4 x i32> %467, <4 x i32>* %469, align 16
  %470 = bitcast i32* %462 to <4 x i32>*
  store <4 x i32> %468, <4 x i32>* %470, align 16
  %471 = add nuw nsw <4 x i32> %467, %456
  %472 = add nuw nsw <4 x i32> %468, %457
  %473 = add i64 %440, 16
  %474 = add i64 %443, -2
  %475 = icmp eq i64 %474, 0
  br i1 %475, label %476, label %439, !llvm.loop !26

476:                                              ; preds = %439, %430
  %477 = phi <4 x i32> [ undef, %430 ], [ %471, %439 ]
  %478 = phi <4 x i32> [ undef, %430 ], [ %472, %439 ]
  %479 = phi i64 [ 0, %430 ], [ %473, %439 ]
  %480 = phi <4 x i32> [ zeroinitializer, %430 ], [ %471, %439 ]
  %481 = phi <4 x i32> [ zeroinitializer, %430 ], [ %472, %439 ]
  %482 = icmp eq i64 %435, 0
  br i1 %482, label %498, label %483

483:                                              ; preds = %476
  %484 = getelementptr inbounds [256 x i32], [256 x i32]* %17, i64 0, i64 %479
  %485 = bitcast i32* %484 to <4 x i32>*
  %486 = load <4 x i32>, <4 x i32>* %485, align 16
  %487 = getelementptr inbounds i32, i32* %484, i64 4
  %488 = bitcast i32* %487 to <4 x i32>*
  %489 = load <4 x i32>, <4 x i32>* %488, align 16
  %490 = icmp sgt <4 x i32> %486, <i32 500, i32 500, i32 500, i32 500>
  %491 = icmp sgt <4 x i32> %489, <i32 500, i32 500, i32 500, i32 500>
  %492 = select <4 x i1> %490, <4 x i32> %486, <4 x i32> <i32 500, i32 500, i32 500, i32 500>
  %493 = select <4 x i1> %491, <4 x i32> %489, <4 x i32> <i32 500, i32 500, i32 500, i32 500>
  %494 = bitcast i32* %484 to <4 x i32>*
  store <4 x i32> %492, <4 x i32>* %494, align 16
  %495 = bitcast i32* %487 to <4 x i32>*
  store <4 x i32> %493, <4 x i32>* %495, align 16
  %496 = add nuw nsw <4 x i32> %493, %481
  %497 = add nuw nsw <4 x i32> %492, %480
  br label %498

498:                                              ; preds = %476, %483
  %499 = phi <4 x i32> [ %477, %476 ], [ %497, %483 ]
  %500 = phi <4 x i32> [ %478, %476 ], [ %496, %483 ]
  %501 = add nuw <4 x i32> %500, %499
  %502 = shufflevector <4 x i32> %501, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %503 = add <4 x i32> %501, %502
  %504 = shufflevector <4 x i32> %503, <4 x i32> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %505 = add <4 x i32> %503, %504
  %506 = extractelement <4 x i32> %505, i32 0
  %507 = icmp eq i64 %431, %428
  br i1 %507, label %521, label %508

508:                                              ; preds = %498, %427
  %509 = phi i64 [ 0, %427 ], [ %431, %498 ]
  %510 = phi i32 [ 0, %427 ], [ %506, %498 ]
  br label %511

511:                                              ; preds = %508, %511
  %512 = phi i64 [ %519, %511 ], [ %509, %508 ]
  %513 = phi i32 [ %518, %511 ], [ %510, %508 ]
  %514 = getelementptr inbounds [256 x i32], [256 x i32]* %17, i64 0, i64 %512
  %515 = load i32, i32* %514, align 4
  %516 = icmp sgt i32 %515, 500
  %517 = select i1 %516, i32 %515, i32 500
  store i32 %517, i32* %514, align 4
  %518 = add nuw nsw i32 %517, %513
  %519 = add nuw nsw i64 %512, 1
  %520 = icmp slt i64 %519, %428
  br i1 %520, label %511, label %521, !llvm.loop !27

521:                                              ; preds = %511, %498
  %522 = phi i32 [ %506, %498 ], [ %518, %511 ]
  %523 = mul i32 %522, 3
  br label %524

524:                                              ; preds = %521, %243, %358, %422
  %525 = phi i32 [ %423, %422 ], [ %336, %358 ], [ %230, %243 ], [ %423, %521 ]
  %526 = phi i32 [ %425, %422 ], [ %337, %358 ], [ %228, %243 ], [ %425, %521 ]
  %527 = phi i32 [ %424, %422 ], [ %347, %358 ], [ %233, %243 ], [ %424, %521 ]
  %528 = phi i32 [ 0, %422 ], [ 0, %358 ], [ 0, %243 ], [ %523, %521 ]
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %222) #6
  %529 = load i32, i32* %15, align 4
  %530 = icmp eq i32 %529, 0
  br i1 %530, label %531, label %549

531:                                              ; preds = %524
  switch i32 %527, label %539 [
    i32 -1000, label %532
    i32 -1, label %549
  ]

532:                                              ; preds = %531
  %533 = load i32, i32* %12, align 4
  %534 = mul nsw i32 %533, 24
  %535 = sdiv i32 %534, %185
  %536 = sdiv i32 %528, %535
  %537 = icmp sgt i32 %536, %5
  %538 = select i1 %537, i32 %5, i32 %536
  br label %549

539:                                              ; preds = %531
  %540 = mul nsw i32 %527, 3
  %541 = load i32, i32* %12, align 4
  %542 = mul nsw i32 %541, 24
  %543 = sdiv i32 %542, %185
  %544 = sdiv i32 %540, %543
  %545 = icmp sgt i32 %197, %544
  %546 = select i1 %545, i32 %197, i32 %544
  %547 = icmp sgt i32 %546, %5
  %548 = select i1 %547, i32 %5, i32 %546
  br label %549

549:                                              ; preds = %539, %531, %524, %532
  %550 = phi i32 [ %5, %524 ], [ %538, %532 ], [ %5, %531 ], [ %548, %539 ]
  %551 = icmp sgt i32 %526, 0
  br i1 %551, label %552, label %732

552:                                              ; preds = %549
  %553 = getelementptr inbounds %struct.OpusMSEncoder, %struct.OpusMSEncoder* %0, i64 0, i32 0, i32 2
  %554 = getelementptr inbounds %struct.OpusMSEncoder, %struct.OpusMSEncoder* %0, i64 0, i32 6
  %555 = mul nsw i32 %185, 50
  br label %568

556:                                              ; preds = %620
  %557 = icmp sgt i32 %622, 0
  br i1 %557, label %558, label %732

558:                                              ; preds = %556
  %559 = getelementptr inbounds %struct.OpusMSEncoder, %struct.OpusMSEncoder* %0, i64 0, i32 0, i32 2
  %560 = add i32 %206, 7
  %561 = and i32 %560, -8
  %562 = getelementptr inbounds float, float* %203, i64 1
  %563 = add i32 %205, 7
  %564 = and i32 %563, -8
  %565 = getelementptr inbounds [42 x float], [42 x float]* %18, i64 0, i64 0
  %566 = getelementptr inbounds [42 x float], [42 x float]* %18, i64 0, i64 21
  %567 = bitcast float* %566 to i8*
  br label %627

568:                                              ; preds = %625, %552
  %569 = phi i32 [ %525, %552 ], [ %626, %625 ]
  %570 = phi i64 [ 0, %552 ], [ %621, %625 ]
  %571 = phi i8* [ %177, %552 ], [ %579, %625 ]
  %572 = bitcast i8* %571 to %struct.OpusEncoder*
  %573 = sext i32 %569 to i64
  %574 = icmp slt i64 %570, %573
  %575 = select i1 %574, i32 %205, i32 %206
  %576 = add i32 %575, 7
  %577 = and i32 %576, -8
  %578 = sext i32 %577 to i64
  %579 = getelementptr inbounds i8, i8* %571, i64 %578
  %580 = getelementptr inbounds [256 x i32], [256 x i32]* %17, i64 0, i64 %570
  %581 = load i32, i32* %580, align 4
  %582 = call i32 (%struct.OpusEncoder*, i32, ...) @opus_encoder_ctl(%struct.OpusEncoder* %572, i32 4002, i32 %581) #6
  %583 = load i32, i32* %26, align 4
  switch i32 %583, label %620 [
    i32 1, label %584
    i32 2, label %618
  ]

584:                                              ; preds = %568
  %585 = load i32, i32* %554, align 4
  %586 = load i32, i32* %12, align 4
  %587 = icmp slt i32 %555, %586
  br i1 %587, label %590, label %588

588:                                              ; preds = %584
  %589 = load i32, i32* %207, align 4
  br label %597

590:                                              ; preds = %584
  %591 = sdiv i32 %586, %185
  %592 = mul i32 %591, 60
  %593 = add i32 %592, -3000
  %594 = load i32, i32* %207, align 4
  %595 = mul nsw i32 %593, %594
  %596 = sub nsw i32 %585, %595
  br label %597

597:                                              ; preds = %588, %590
  %598 = phi i32 [ %594, %590 ], [ %589, %588 ]
  %599 = phi i32 [ %596, %590 ], [ %585, %588 ]
  %600 = mul nsw i32 %598, 10000
  %601 = icmp sgt i32 %599, %600
  br i1 %601, label %609, label %602

602:                                              ; preds = %597
  %603 = mul nsw i32 %598, 7000
  %604 = icmp sgt i32 %599, %603
  br i1 %604, label %609, label %605

605:                                              ; preds = %602
  %606 = mul nsw i32 %598, 5000
  %607 = icmp sgt i32 %599, %606
  %608 = select i1 %607, i32 1103, i32 1101
  br label %609

609:                                              ; preds = %605, %602, %597
  %610 = phi i32 [ 1105, %597 ], [ 1104, %602 ], [ %608, %605 ]
  %611 = call i32 (%struct.OpusEncoder*, i32, ...) @opus_encoder_ctl(%struct.OpusEncoder* %572, i32 4008, i32 %610) #6
  %612 = load i32, i32* %553, align 4
  %613 = sext i32 %612 to i64
  %614 = icmp slt i64 %570, %613
  br i1 %614, label %615, label %620

615:                                              ; preds = %609
  %616 = call i32 (%struct.OpusEncoder*, i32, ...) @opus_encoder_ctl(%struct.OpusEncoder* %572, i32 11002, i32 1002) #6
  %617 = call i32 (%struct.OpusEncoder*, i32, ...) @opus_encoder_ctl(%struct.OpusEncoder* %572, i32 4022, i32 2) #6
  br label %620

618:                                              ; preds = %568
  %619 = call i32 (%struct.OpusEncoder*, i32, ...) @opus_encoder_ctl(%struct.OpusEncoder* %572, i32 11002, i32 1002) #6
  br label %620

620:                                              ; preds = %568, %609, %615, %618
  %621 = add nuw nsw i64 %570, 1
  %622 = load i32, i32* %189, align 4
  %623 = sext i32 %622 to i64
  %624 = icmp slt i64 %621, %623
  br i1 %624, label %625, label %556

625:                                              ; preds = %620
  %626 = load i32, i32* %553, align 4
  br label %568

627:                                              ; preds = %558, %714
  %628 = phi i32 [ 0, %558 ], [ %728, %714 ]
  %629 = phi i8* [ %177, %558 ], [ %672, %714 ]
  %630 = phi i32 [ 0, %558 ], [ %729, %714 ]
  %631 = phi i8* [ %4, %558 ], [ %727, %714 ]
  %632 = call %struct.OpusRepacketizer* @opus_repacketizer_init(%struct.OpusRepacketizer* nonnull %14) #6
  %633 = bitcast i8* %629 to %struct.OpusEncoder*
  %634 = load i32, i32* %559, align 4
  %635 = icmp slt i32 %630, %634
  br i1 %635, label %636, label %652

636:                                              ; preds = %627
  %637 = call i32 @get_left_channel(%struct.ChannelLayout* %188, i32 %630, i32 -1) #6
  %638 = call i32 @get_right_channel(%struct.ChannelLayout* %188, i32 %630, i32 -1) #6
  %639 = load i32, i32* %207, align 4
  call void %1(float* nonnull %203, i32 2, i8* %2, i32 %639, i32 %637, i32 %185, i8* %9) #6
  %640 = load i32, i32* %207, align 4
  call void %1(float* %562, i32 2, i8* %2, i32 %640, i32 %638, i32 %185, i8* %9) #6
  %641 = load i32, i32* %26, align 4
  %642 = icmp eq i32 %641, 1
  br i1 %642, label %643, label %667

643:                                              ; preds = %636
  %644 = mul nsw i32 %637, 21
  %645 = mul nsw i32 %638, 21
  %646 = sext i32 %645 to i64
  %647 = sext i32 %644 to i64
  %648 = getelementptr float, float* %212, i64 %647
  %649 = bitcast float* %648 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 16 %19, i8* align 4 %649, i64 84, i1 false)
  %650 = getelementptr float, float* %212, i64 %646
  %651 = bitcast float* %650 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %567, i8* align 4 %651, i64 84, i1 false)
  br label %662

652:                                              ; preds = %627
  %653 = call i32 @get_mono_channel(%struct.ChannelLayout* %188, i32 %630, i32 -1) #6
  %654 = load i32, i32* %207, align 4
  call void %1(float* nonnull %203, i32 1, i8* %2, i32 %654, i32 %653, i32 %185, i8* %9) #6
  %655 = load i32, i32* %26, align 4
  %656 = icmp eq i32 %655, 1
  br i1 %656, label %657, label %667

657:                                              ; preds = %652
  %658 = mul nsw i32 %653, 21
  %659 = sext i32 %658 to i64
  %660 = getelementptr float, float* %212, i64 %659
  %661 = bitcast float* %660 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 16 %19, i8* align 4 %661, i64 84, i1 false)
  br label %662

662:                                              ; preds = %643, %657
  %663 = phi i32 [ %564, %643 ], [ %561, %657 ]
  %664 = phi i32 [ %637, %643 ], [ %653, %657 ]
  %665 = phi i32 [ %638, %643 ], [ -1, %657 ]
  %666 = call i32 (%struct.OpusEncoder*, i32, ...) @opus_encoder_ctl(%struct.OpusEncoder* %633, i32 10026, float* nonnull %565) #6
  br label %667

667:                                              ; preds = %636, %652, %662
  %668 = phi i32 [ %663, %662 ], [ %561, %652 ], [ %564, %636 ]
  %669 = phi i32 [ %665, %662 ], [ -1, %652 ], [ %638, %636 ]
  %670 = phi i32 [ %664, %662 ], [ %653, %652 ], [ %637, %636 ]
  %671 = sext i32 %668 to i64
  %672 = getelementptr inbounds i8, i8* %629, i64 %671
  %673 = sub nsw i32 %550, %628
  %674 = load i32, i32* %189, align 4
  %675 = xor i32 %630, -1
  %676 = add i32 %674, %675
  %677 = icmp slt i32 %676, 1
  %678 = shl i32 %676, 1
  %679 = add nsw i32 %678, -1
  %680 = select i1 %677, i32 0, i32 %679
  %681 = sub nsw i32 %673, %680
  %682 = load i32, i32* %12, align 4
  %683 = sdiv i32 %682, %185
  %684 = icmp eq i32 %683, 10
  %685 = sub i32 0, %676
  %686 = select i1 %684, i32 %685, i32 0
  %687 = add i32 %681, %686
  %688 = icmp slt i32 %687, 7662
  %689 = select i1 %688, i32 %687, i32 7662
  %690 = add nsw i32 %674, -1
  %691 = icmp eq i32 %630, %690
  br i1 %691, label %696, label %692

692:                                              ; preds = %667
  %693 = icmp sgt i32 %689, 253
  %694 = select i1 %693, i32 2, i32 1
  %695 = sub nsw i32 %689, %694
  br label %706

696:                                              ; preds = %667
  %697 = load i32, i32* %15, align 4
  %698 = icmp ne i32 %697, 0
  %699 = xor i1 %691, true
  %700 = or i1 %698, %699
  br i1 %700, label %706, label %701

701:                                              ; preds = %696
  %702 = shl nsw i32 %682, 3
  %703 = sdiv i32 %702, %185
  %704 = mul nsw i32 %703, %689
  %705 = call i32 (%struct.OpusEncoder*, i32, ...) @opus_encoder_ctl(%struct.OpusEncoder* %633, i32 4002, i32 %704) #6
  br label %706

706:                                              ; preds = %692, %696, %701
  %707 = phi i32 [ %695, %692 ], [ %689, %696 ], [ %689, %701 ]
  %708 = load i32, i32* %207, align 4
  %709 = call i32 @opus_encode_native(%struct.OpusEncoder* %633, float* nonnull %203, i32 %185, i8* nonnull %21, i32 %707, i32 %6, i8* %2, i32 %3, i32 %670, i32 %669, i32 %708, void (i8*, float*, i32, i32, i32, i32, i32)* %7, i32 %8) #6
  %710 = icmp slt i32 %709, 0
  br i1 %710, label %732, label %711

711:                                              ; preds = %706
  %712 = call i32 @opus_repacketizer_cat(%struct.OpusRepacketizer* nonnull %14, i8* nonnull %21, i32 %709) #6
  %713 = icmp eq i32 %712, 0
  br i1 %713, label %714, label %732

714:                                              ; preds = %711
  %715 = call i32 @opus_repacketizer_get_nb_frames(%struct.OpusRepacketizer* nonnull %14) #6
  %716 = load i32, i32* %189, align 4
  %717 = add nsw i32 %716, -1
  %718 = icmp ne i32 %630, %717
  %719 = zext i1 %718 to i32
  %720 = load i32, i32* %15, align 4
  %721 = icmp eq i32 %720, 0
  %722 = icmp eq i32 %630, %717
  %723 = and i1 %721, %722
  %724 = zext i1 %723 to i32
  %725 = call i32 @opus_repacketizer_out_range_impl(%struct.OpusRepacketizer* nonnull %14, i32 0, i32 %715, i8* %631, i32 %673, i32 %719, i32 %724) #6
  %726 = sext i32 %725 to i64
  %727 = getelementptr inbounds i8, i8* %631, i64 %726
  %728 = add nsw i32 %725, %628
  %729 = add nuw nsw i32 %630, 1
  %730 = load i32, i32* %189, align 4
  %731 = icmp slt i32 %729, %730
  br i1 %731, label %627, label %732

732:                                              ; preds = %714, %706, %711, %549, %556, %187, %173
  %733 = phi i32 [ -1, %173 ], [ -2, %187 ], [ 0, %556 ], [ 0, %549 ], [ %728, %714 ], [ %709, %706 ], [ -3, %711 ]
  call void @llvm.lifetime.end.p0i8(i64 168, i8* nonnull %19) #6
  call void @llvm.lifetime.end.p0i8(i64 1024, i8* nonnull %25) #6
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %24) #6
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %23) #6
  call void @llvm.lifetime.end.p0i8(i64 496, i8* nonnull %22) #6
  call void @llvm.lifetime.end.p0i8(i64 7662, i8* nonnull %21) #6
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %20) #6
  ret i32 %733
}

declare i32 @opus_encoder_ctl(%struct.OpusEncoder*, i32, ...) local_unnamed_addr #2

declare i32 @frame_size_select(i32, i32, i32) local_unnamed_addr #2

declare %struct.OpusRepacketizer* @opus_repacketizer_init(%struct.OpusRepacketizer*) local_unnamed_addr #2

declare i32 @get_left_channel(%struct.ChannelLayout*, i32, i32) local_unnamed_addr #2

declare i32 @get_right_channel(%struct.ChannelLayout*, i32, i32) local_unnamed_addr #2

declare i32 @get_mono_channel(%struct.ChannelLayout*, i32, i32) local_unnamed_addr #2

declare i32 @opus_encode_native(%struct.OpusEncoder*, float*, i32, i8*, i32, i32, i8*, i32, i32, i32, i32, void (i8*, float*, i32, i32, i32, i32, i32)*, i32) local_unnamed_addr #2

declare i32 @opus_repacketizer_cat(%struct.OpusRepacketizer*, i8*, i32) local_unnamed_addr #2

declare i32 @opus_repacketizer_out_range_impl(%struct.OpusRepacketizer*, i32, i32, i8*, i32, i32, i32) local_unnamed_addr #2

declare i32 @opus_repacketizer_get_nb_frames(%struct.OpusRepacketizer*) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden i32 @opus_multistream_encode_float(%struct.OpusMSEncoder*, float*, i32, i8*, i32) local_unnamed_addr #0 {
  %6 = bitcast float* %1 to i8*
  %7 = tail call i32 @opus_multistream_encode_native(%struct.OpusMSEncoder* %0, void (float*, i32, i8*, i32, i32, i32, i8*)* nonnull @opus_copy_channel_in_float, i8* %6, i32 %2, i8* %3, i32 %4, i32 24, void (i8*, float*, i32, i32, i32, i32, i32)* nonnull @downmix_float, i32 1, i8* null)
  ret i32 %7
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal void @opus_copy_channel_in_float(float* nocapture, i32, i8* nocapture readonly, i32, i32, i32, i8* nocapture readnone) #5 {
  %8 = bitcast i8* %2 to float*
  %9 = icmp sgt i32 %5, 0
  br i1 %9, label %10, label %78

10:                                               ; preds = %7
  %11 = sext i32 %1 to i64
  %12 = sext i32 %3 to i64
  %13 = sext i32 %4 to i64
  %14 = zext i32 %5 to i64
  %15 = add nsw i64 %14, -1
  %16 = and i64 %14, 3
  %17 = icmp ult i64 %15, 3
  br i1 %17, label %61, label %18

18:                                               ; preds = %10
  %19 = sub nsw i64 %14, %16
  br label %20

20:                                               ; preds = %20, %18
  %21 = phi i64 [ 0, %18 ], [ %58, %20 ]
  %22 = phi i64 [ %19, %18 ], [ %59, %20 ]
  %23 = mul nsw i64 %21, %12
  %24 = add nsw i64 %23, %13
  %25 = getelementptr inbounds float, float* %8, i64 %24
  %26 = bitcast float* %25 to i32*
  %27 = load i32, i32* %26, align 4
  %28 = mul nsw i64 %21, %11
  %29 = getelementptr inbounds float, float* %0, i64 %28
  %30 = bitcast float* %29 to i32*
  store i32 %27, i32* %30, align 4
  %31 = or i64 %21, 1
  %32 = mul nsw i64 %31, %12
  %33 = add nsw i64 %32, %13
  %34 = getelementptr inbounds float, float* %8, i64 %33
  %35 = bitcast float* %34 to i32*
  %36 = load i32, i32* %35, align 4
  %37 = mul nsw i64 %31, %11
  %38 = getelementptr inbounds float, float* %0, i64 %37
  %39 = bitcast float* %38 to i32*
  store i32 %36, i32* %39, align 4
  %40 = or i64 %21, 2
  %41 = mul nsw i64 %40, %12
  %42 = add nsw i64 %41, %13
  %43 = getelementptr inbounds float, float* %8, i64 %42
  %44 = bitcast float* %43 to i32*
  %45 = load i32, i32* %44, align 4
  %46 = mul nsw i64 %40, %11
  %47 = getelementptr inbounds float, float* %0, i64 %46
  %48 = bitcast float* %47 to i32*
  store i32 %45, i32* %48, align 4
  %49 = or i64 %21, 3
  %50 = mul nsw i64 %49, %12
  %51 = add nsw i64 %50, %13
  %52 = getelementptr inbounds float, float* %8, i64 %51
  %53 = bitcast float* %52 to i32*
  %54 = load i32, i32* %53, align 4
  %55 = mul nsw i64 %49, %11
  %56 = getelementptr inbounds float, float* %0, i64 %55
  %57 = bitcast float* %56 to i32*
  store i32 %54, i32* %57, align 4
  %58 = add nuw nsw i64 %21, 4
  %59 = add i64 %22, -4
  %60 = icmp eq i64 %59, 0
  br i1 %60, label %61, label %20

61:                                               ; preds = %20, %10
  %62 = phi i64 [ 0, %10 ], [ %58, %20 ]
  %63 = icmp eq i64 %16, 0
  br i1 %63, label %78, label %64

64:                                               ; preds = %61, %64
  %65 = phi i64 [ %75, %64 ], [ %62, %61 ]
  %66 = phi i64 [ %76, %64 ], [ %16, %61 ]
  %67 = mul nsw i64 %65, %12
  %68 = add nsw i64 %67, %13
  %69 = getelementptr inbounds float, float* %8, i64 %68
  %70 = bitcast float* %69 to i32*
  %71 = load i32, i32* %70, align 4
  %72 = mul nsw i64 %65, %11
  %73 = getelementptr inbounds float, float* %0, i64 %72
  %74 = bitcast float* %73 to i32*
  store i32 %71, i32* %74, align 4
  %75 = add nuw nsw i64 %65, 1
  %76 = add i64 %66, -1
  %77 = icmp eq i64 %76, 0
  br i1 %77, label %78, label %64, !llvm.loop !28

78:                                               ; preds = %61, %64, %7
  ret void
}

declare void @downmix_float(i8*, float*, i32, i32, i32, i32, i32) #2

; Function Attrs: nounwind ssp uwtable
define hidden i32 @opus_multistream_encode(%struct.OpusMSEncoder*, i16*, i32, i8*, i32) local_unnamed_addr #0 {
  %6 = bitcast i16* %1 to i8*
  %7 = tail call i32 @opus_multistream_encode_native(%struct.OpusMSEncoder* %0, void (float*, i32, i8*, i32, i32, i32, i8*)* nonnull @opus_copy_channel_in_short, i8* %6, i32 %2, i8* %3, i32 %4, i32 16, void (i8*, float*, i32, i32, i32, i32, i32)* nonnull @downmix_int, i32 0, i8* null)
  ret i32 %7
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal void @opus_copy_channel_in_short(float* nocapture, i32, i8* nocapture readonly, i32, i32, i32, i8* nocapture readnone) #5 {
  %8 = bitcast i8* %2 to i16*
  %9 = bitcast float* %0 to i8*
  %10 = icmp sgt i32 %5, 0
  br i1 %10, label %11, label %145

11:                                               ; preds = %7
  %12 = sext i32 %1 to i64
  %13 = sext i32 %3 to i64
  %14 = sext i32 %4 to i64
  %15 = zext i32 %5 to i64
  %16 = icmp ult i32 %5, 8
  br i1 %16, label %105, label %17

17:                                               ; preds = %11
  %18 = icmp ne i32 %1, 1
  %19 = icmp ne i32 %3, 1
  %20 = or i1 %18, %19
  br i1 %20, label %105, label %21

21:                                               ; preds = %17
  %22 = getelementptr float, float* %0, i64 %15
  %23 = bitcast float* %22 to i8*
  %24 = shl nsw i64 %14, 1
  %25 = getelementptr i8, i8* %2, i64 %24
  %26 = shl nuw nsw i64 %15, 1
  %27 = add nsw i64 %24, %26
  %28 = getelementptr i8, i8* %2, i64 %27
  %29 = icmp ugt i8* %28, %9
  %30 = icmp ult i8* %25, %23
  %31 = and i1 %29, %30
  br i1 %31, label %105, label %32

32:                                               ; preds = %21
  %33 = and i64 %15, 4294967288
  %34 = add nsw i64 %33, -8
  %35 = lshr exact i64 %34, 3
  %36 = add nuw nsw i64 %35, 1
  %37 = and i64 %36, 1
  %38 = icmp eq i64 %34, 0
  br i1 %38, label %82, label %39

39:                                               ; preds = %32
  %40 = sub nuw nsw i64 %36, %37
  br label %41

41:                                               ; preds = %41, %39
  %42 = phi i64 [ 0, %39 ], [ %79, %41 ]
  %43 = phi i64 [ %40, %39 ], [ %80, %41 ]
  %44 = mul nsw i64 %42, %13
  %45 = add nsw i64 %44, %14
  %46 = getelementptr inbounds i16, i16* %8, i64 %45
  %47 = bitcast i16* %46 to <4 x i16>*
  %48 = load <4 x i16>, <4 x i16>* %47, align 2, !alias.scope !29
  %49 = getelementptr inbounds i16, i16* %46, i64 4
  %50 = bitcast i16* %49 to <4 x i16>*
  %51 = load <4 x i16>, <4 x i16>* %50, align 2, !alias.scope !29
  %52 = sitofp <4 x i16> %48 to <4 x float>
  %53 = sitofp <4 x i16> %51 to <4 x float>
  %54 = fmul <4 x float> %52, <float 0x3F00000000000000, float 0x3F00000000000000, float 0x3F00000000000000, float 0x3F00000000000000>
  %55 = fmul <4 x float> %53, <float 0x3F00000000000000, float 0x3F00000000000000, float 0x3F00000000000000, float 0x3F00000000000000>
  %56 = mul nsw i64 %42, %12
  %57 = getelementptr inbounds float, float* %0, i64 %56
  %58 = bitcast float* %57 to <4 x float>*
  store <4 x float> %54, <4 x float>* %58, align 4, !alias.scope !32, !noalias !29
  %59 = getelementptr inbounds float, float* %57, i64 4
  %60 = bitcast float* %59 to <4 x float>*
  store <4 x float> %55, <4 x float>* %60, align 4, !alias.scope !32, !noalias !29
  %61 = or i64 %42, 8
  %62 = mul nsw i64 %61, %13
  %63 = add nsw i64 %62, %14
  %64 = getelementptr inbounds i16, i16* %8, i64 %63
  %65 = bitcast i16* %64 to <4 x i16>*
  %66 = load <4 x i16>, <4 x i16>* %65, align 2, !alias.scope !29
  %67 = getelementptr inbounds i16, i16* %64, i64 4
  %68 = bitcast i16* %67 to <4 x i16>*
  %69 = load <4 x i16>, <4 x i16>* %68, align 2, !alias.scope !29
  %70 = sitofp <4 x i16> %66 to <4 x float>
  %71 = sitofp <4 x i16> %69 to <4 x float>
  %72 = fmul <4 x float> %70, <float 0x3F00000000000000, float 0x3F00000000000000, float 0x3F00000000000000, float 0x3F00000000000000>
  %73 = fmul <4 x float> %71, <float 0x3F00000000000000, float 0x3F00000000000000, float 0x3F00000000000000, float 0x3F00000000000000>
  %74 = mul nsw i64 %61, %12
  %75 = getelementptr inbounds float, float* %0, i64 %74
  %76 = bitcast float* %75 to <4 x float>*
  store <4 x float> %72, <4 x float>* %76, align 4, !alias.scope !32, !noalias !29
  %77 = getelementptr inbounds float, float* %75, i64 4
  %78 = bitcast float* %77 to <4 x float>*
  store <4 x float> %73, <4 x float>* %78, align 4, !alias.scope !32, !noalias !29
  %79 = add i64 %42, 16
  %80 = add i64 %43, -2
  %81 = icmp eq i64 %80, 0
  br i1 %81, label %82, label %41, !llvm.loop !34

82:                                               ; preds = %41, %32
  %83 = phi i64 [ 0, %32 ], [ %79, %41 ]
  %84 = icmp eq i64 %37, 0
  br i1 %84, label %103, label %85

85:                                               ; preds = %82
  %86 = mul nsw i64 %83, %13
  %87 = add nsw i64 %86, %14
  %88 = getelementptr inbounds i16, i16* %8, i64 %87
  %89 = bitcast i16* %88 to <4 x i16>*
  %90 = load <4 x i16>, <4 x i16>* %89, align 2, !alias.scope !29
  %91 = getelementptr inbounds i16, i16* %88, i64 4
  %92 = bitcast i16* %91 to <4 x i16>*
  %93 = load <4 x i16>, <4 x i16>* %92, align 2, !alias.scope !29
  %94 = sitofp <4 x i16> %90 to <4 x float>
  %95 = sitofp <4 x i16> %93 to <4 x float>
  %96 = fmul <4 x float> %94, <float 0x3F00000000000000, float 0x3F00000000000000, float 0x3F00000000000000, float 0x3F00000000000000>
  %97 = fmul <4 x float> %95, <float 0x3F00000000000000, float 0x3F00000000000000, float 0x3F00000000000000, float 0x3F00000000000000>
  %98 = mul nsw i64 %83, %12
  %99 = getelementptr inbounds float, float* %0, i64 %98
  %100 = bitcast float* %99 to <4 x float>*
  store <4 x float> %96, <4 x float>* %100, align 4, !alias.scope !32, !noalias !29
  %101 = getelementptr inbounds float, float* %99, i64 4
  %102 = bitcast float* %101 to <4 x float>*
  store <4 x float> %97, <4 x float>* %102, align 4, !alias.scope !32, !noalias !29
  br label %103

103:                                              ; preds = %82, %85
  %104 = icmp eq i64 %33, %15
  br i1 %104, label %145, label %105

105:                                              ; preds = %103, %21, %17, %11
  %106 = phi i64 [ 0, %21 ], [ 0, %17 ], [ 0, %11 ], [ %33, %103 ]
  %107 = xor i64 %106, -1
  %108 = and i64 %15, 1
  %109 = icmp eq i64 %108, 0
  br i1 %109, label %120, label %110

110:                                              ; preds = %105
  %111 = mul nsw i64 %106, %13
  %112 = add nsw i64 %111, %14
  %113 = getelementptr inbounds i16, i16* %8, i64 %112
  %114 = load i16, i16* %113, align 2
  %115 = sitofp i16 %114 to float
  %116 = fmul float %115, 0x3F00000000000000
  %117 = mul nsw i64 %106, %12
  %118 = getelementptr inbounds float, float* %0, i64 %117
  store float %116, float* %118, align 4
  %119 = or i64 %106, 1
  br label %120

120:                                              ; preds = %105, %110
  %121 = phi i64 [ %106, %105 ], [ %119, %110 ]
  %122 = sub nsw i64 0, %15
  %123 = icmp eq i64 %107, %122
  br i1 %123, label %145, label %124

124:                                              ; preds = %120, %124
  %125 = phi i64 [ %143, %124 ], [ %121, %120 ]
  %126 = mul nsw i64 %125, %13
  %127 = add nsw i64 %126, %14
  %128 = getelementptr inbounds i16, i16* %8, i64 %127
  %129 = load i16, i16* %128, align 2
  %130 = sitofp i16 %129 to float
  %131 = fmul float %130, 0x3F00000000000000
  %132 = mul nsw i64 %125, %12
  %133 = getelementptr inbounds float, float* %0, i64 %132
  store float %131, float* %133, align 4
  %134 = add nuw nsw i64 %125, 1
  %135 = mul nsw i64 %134, %13
  %136 = add nsw i64 %135, %14
  %137 = getelementptr inbounds i16, i16* %8, i64 %136
  %138 = load i16, i16* %137, align 2
  %139 = sitofp i16 %138 to float
  %140 = fmul float %139, 0x3F00000000000000
  %141 = mul nsw i64 %134, %12
  %142 = getelementptr inbounds float, float* %0, i64 %141
  store float %140, float* %142, align 4
  %143 = add nuw nsw i64 %125, 2
  %144 = icmp eq i64 %143, %15
  br i1 %144, label %145, label %124, !llvm.loop !35

145:                                              ; preds = %120, %124, %103, %7
  ret void
}

declare void @downmix_int(i8*, float*, i32, i32, i32, i32, i32) #2

; Function Attrs: nounwind ssp uwtable
define hidden i32 @opus_multistream_encoder_ctl_va_list(%struct.OpusMSEncoder*, i32, %struct.__va_list_tag*) local_unnamed_addr #0 {
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = tail call i32 @opus_encoder_get_size(i32 2) #6
  %7 = tail call i32 @opus_encoder_get_size(i32 1) #6
  %8 = getelementptr inbounds %struct.OpusMSEncoder, %struct.OpusMSEncoder* %0, i64 1, i32 0, i32 1
  %9 = bitcast i32* %8 to i8*
  switch i32 %1, label %515 [
    i32 4002, label %10
    i32 4003, label %42
    i32 4037, label %86
    i32 4007, label %86
    i32 4001, label %86
    i32 4009, label %86
    i32 4011, label %86
    i32 4015, label %86
    i32 4017, label %86
    i32 11019, label %86
    i32 4021, label %86
    i32 4025, label %86
    i32 4027, label %86
    i32 4029, label %86
    i32 4013, label %86
    i32 4023, label %86
    i32 4043, label %86
    i32 4047, label %86
    i32 4031, label %106
    i32 4036, label %155
    i32 4010, label %155
    i32 4006, label %155
    i32 4020, label %155
    i32 4004, label %155
    i32 4008, label %155
    i32 4024, label %155
    i32 4000, label %155
    i32 4012, label %155
    i32 4014, label %155
    i32 4016, label %155
    i32 11002, label %155
    i32 4022, label %155
    i32 4042, label %155
    i32 4046, label %155
    i32 5120, label %195
    i32 4040, label %301
    i32 4041, label %320
    i32 4028, label %342
  ]

10:                                               ; preds = %3
  %11 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %2, i64 0, i32 0
  %12 = load i32, i32* %11, align 8
  %13 = icmp ult i32 %12, 41
  br i1 %13, label %14, label %20

14:                                               ; preds = %10
  %15 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %2, i64 0, i32 3
  %16 = load i8*, i8** %15, align 8
  %17 = sext i32 %12 to i64
  %18 = getelementptr i8, i8* %16, i64 %17
  %19 = add nuw nsw i32 %12, 8
  store i32 %19, i32* %11, align 8
  br label %24

20:                                               ; preds = %10
  %21 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %2, i64 0, i32 2
  %22 = load i8*, i8** %21, align 8
  %23 = getelementptr i8, i8* %22, i64 8
  store i8* %23, i8** %21, align 8
  br label %24

24:                                               ; preds = %20, %14
  %25 = phi i8* [ %18, %14 ], [ %22, %20 ]
  %26 = bitcast i8* %25 to i32*
  %27 = load i32, i32* %26, align 4
  switch i32 %27, label %28 [
    i32 -1, label %39
    i32 -1000, label %39
  ]

28:                                               ; preds = %24
  %29 = icmp slt i32 %27, 1
  br i1 %29, label %515, label %30

30:                                               ; preds = %28
  %31 = getelementptr inbounds %struct.OpusMSEncoder, %struct.OpusMSEncoder* %0, i64 0, i32 0, i32 0
  %32 = load i32, i32* %31, align 4
  %33 = mul nsw i32 %32, 300000
  %34 = mul nsw i32 %32, 500
  %35 = icmp sgt i32 %34, %27
  %36 = select i1 %35, i32 %34, i32 %27
  %37 = icmp slt i32 %33, %36
  %38 = select i1 %37, i32 %33, i32 %36
  br label %39

39:                                               ; preds = %30, %24, %24
  %40 = phi i32 [ %27, %24 ], [ %27, %24 ], [ %38, %30 ]
  %41 = getelementptr inbounds %struct.OpusMSEncoder, %struct.OpusMSEncoder* %0, i64 0, i32 6
  store i32 %40, i32* %41, align 4
  br label %515

42:                                               ; preds = %3
  %43 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %2, i64 0, i32 0
  %44 = load i32, i32* %43, align 8
  %45 = icmp ult i32 %44, 41
  br i1 %45, label %46, label %52

46:                                               ; preds = %42
  %47 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %2, i64 0, i32 3
  %48 = load i8*, i8** %47, align 8
  %49 = sext i32 %44 to i64
  %50 = getelementptr i8, i8* %48, i64 %49
  %51 = add nuw nsw i32 %44, 8
  store i32 %51, i32* %43, align 8
  br label %56

52:                                               ; preds = %42
  %53 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %2, i64 0, i32 2
  %54 = load i8*, i8** %53, align 8
  %55 = getelementptr i8, i8* %54, i64 8
  store i8* %55, i8** %53, align 8
  br label %56

56:                                               ; preds = %52, %46
  %57 = phi i8* [ %50, %46 ], [ %54, %52 ]
  %58 = bitcast i8* %57 to i32**
  %59 = load i32*, i32** %58, align 8
  %60 = icmp eq i32* %59, null
  br i1 %60, label %515, label %61

61:                                               ; preds = %56
  store i32 0, i32* %59, align 4
  %62 = getelementptr inbounds %struct.OpusMSEncoder, %struct.OpusMSEncoder* %0, i64 0, i32 0, i32 1
  %63 = load i32, i32* %62, align 4
  %64 = icmp sgt i32 %63, 0
  br i1 %64, label %65, label %515

65:                                               ; preds = %61
  %66 = bitcast i32* %4 to i8*
  %67 = getelementptr inbounds %struct.OpusMSEncoder, %struct.OpusMSEncoder* %0, i64 0, i32 0, i32 2
  br label %68

68:                                               ; preds = %65, %68
  %69 = phi i32 [ 0, %65 ], [ %83, %68 ]
  %70 = phi i8* [ %9, %65 ], [ %78, %68 ]
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %66) #6
  store i32 -1431655766, i32* %4, align 4
  %71 = bitcast i8* %70 to %struct.OpusEncoder*
  %72 = load i32, i32* %67, align 4
  %73 = icmp slt i32 %69, %72
  %74 = select i1 %73, i32 %6, i32 %7
  %75 = add i32 %74, 7
  %76 = and i32 %75, -8
  %77 = sext i32 %76 to i64
  %78 = getelementptr inbounds i8, i8* %70, i64 %77
  %79 = call i32 (%struct.OpusEncoder*, i32, ...) @opus_encoder_ctl(%struct.OpusEncoder* %71, i32 4003, i32* nonnull %4) #6
  %80 = load i32, i32* %4, align 4
  %81 = load i32, i32* %59, align 4
  %82 = add nsw i32 %81, %80
  store i32 %82, i32* %59, align 4
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %66) #6
  %83 = add nuw nsw i32 %69, 1
  %84 = load i32, i32* %62, align 4
  %85 = icmp slt i32 %83, %84
  br i1 %85, label %68, label %515

86:                                               ; preds = %3, %3, %3, %3, %3, %3, %3, %3, %3, %3, %3, %3, %3, %3, %3, %3
  %87 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %2, i64 0, i32 0
  %88 = load i32, i32* %87, align 8
  %89 = icmp ult i32 %88, 41
  br i1 %89, label %90, label %96

90:                                               ; preds = %86
  %91 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %2, i64 0, i32 3
  %92 = load i8*, i8** %91, align 8
  %93 = sext i32 %88 to i64
  %94 = getelementptr i8, i8* %92, i64 %93
  %95 = add nuw nsw i32 %88, 8
  store i32 %95, i32* %87, align 8
  br label %100

96:                                               ; preds = %86
  %97 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %2, i64 0, i32 2
  %98 = load i8*, i8** %97, align 8
  %99 = getelementptr i8, i8* %98, i64 8
  store i8* %99, i8** %97, align 8
  br label %100

100:                                              ; preds = %96, %90
  %101 = phi i8* [ %94, %90 ], [ %98, %96 ]
  %102 = bitcast i8* %101 to i32**
  %103 = load i32*, i32** %102, align 8
  %104 = bitcast i32* %8 to %struct.OpusEncoder*
  %105 = tail call i32 (%struct.OpusEncoder*, i32, ...) @opus_encoder_ctl(%struct.OpusEncoder* %104, i32 %1, i32* %103) #6
  br label %515

106:                                              ; preds = %3
  %107 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %2, i64 0, i32 0
  %108 = load i32, i32* %107, align 8
  %109 = icmp ult i32 %108, 41
  br i1 %109, label %110, label %116

110:                                              ; preds = %106
  %111 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %2, i64 0, i32 3
  %112 = load i8*, i8** %111, align 8
  %113 = sext i32 %108 to i64
  %114 = getelementptr i8, i8* %112, i64 %113
  %115 = add nuw nsw i32 %108, 8
  store i32 %115, i32* %107, align 8
  br label %120

116:                                              ; preds = %106
  %117 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %2, i64 0, i32 2
  %118 = load i8*, i8** %117, align 8
  %119 = getelementptr i8, i8* %118, i64 8
  store i8* %119, i8** %117, align 8
  br label %120

120:                                              ; preds = %116, %110
  %121 = phi i8* [ %114, %110 ], [ %118, %116 ]
  %122 = bitcast i8* %121 to i32**
  %123 = load i32*, i32** %122, align 8
  %124 = bitcast i32* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %124) #6
  store i32 -1431655766, i32* %5, align 4
  %125 = icmp eq i32* %123, null
  br i1 %125, label %154, label %126

126:                                              ; preds = %120
  store i32 0, i32* %123, align 4
  %127 = getelementptr inbounds %struct.OpusMSEncoder, %struct.OpusMSEncoder* %0, i64 0, i32 0, i32 1
  %128 = load i32, i32* %127, align 4
  %129 = icmp sgt i32 %128, 0
  br i1 %129, label %130, label %152

130:                                              ; preds = %126
  %131 = getelementptr inbounds %struct.OpusMSEncoder, %struct.OpusMSEncoder* %0, i64 0, i32 0, i32 2
  br label %132

132:                                              ; preds = %130, %139
  %133 = phi i32 [ 0, %130 ], [ %149, %139 ]
  %134 = phi i8* [ %9, %130 ], [ %145, %139 ]
  %135 = bitcast i8* %134 to %struct.OpusEncoder*
  %136 = load i32, i32* %131, align 4
  %137 = call i32 (%struct.OpusEncoder*, i32, ...) @opus_encoder_ctl(%struct.OpusEncoder* %135, i32 4031, i32* nonnull %5) #6
  %138 = icmp eq i32 %137, 0
  br i1 %138, label %139, label %152

139:                                              ; preds = %132
  %140 = icmp slt i32 %133, %136
  %141 = select i1 %140, i32 %6, i32 %7
  %142 = add i32 %141, 7
  %143 = and i32 %142, -8
  %144 = sext i32 %143 to i64
  %145 = getelementptr inbounds i8, i8* %134, i64 %144
  %146 = load i32, i32* %5, align 4
  %147 = load i32, i32* %123, align 4
  %148 = xor i32 %147, %146
  store i32 %148, i32* %123, align 4
  %149 = add nuw nsw i32 %133, 1
  %150 = load i32, i32* %127, align 4
  %151 = icmp slt i32 %149, %150
  br i1 %151, label %132, label %152

152:                                              ; preds = %139, %132, %126
  %153 = phi i32 [ 0, %126 ], [ %137, %132 ], [ 0, %139 ]
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %124) #6
  br label %515

154:                                              ; preds = %120
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %124) #6
  br label %515

155:                                              ; preds = %3, %3, %3, %3, %3, %3, %3, %3, %3, %3, %3, %3, %3, %3, %3
  %156 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %2, i64 0, i32 0
  %157 = load i32, i32* %156, align 8
  %158 = icmp ult i32 %157, 41
  br i1 %158, label %159, label %165

159:                                              ; preds = %155
  %160 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %2, i64 0, i32 3
  %161 = load i8*, i8** %160, align 8
  %162 = sext i32 %157 to i64
  %163 = getelementptr i8, i8* %161, i64 %162
  %164 = add nuw nsw i32 %157, 8
  store i32 %164, i32* %156, align 8
  br label %169

165:                                              ; preds = %155
  %166 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %2, i64 0, i32 2
  %167 = load i8*, i8** %166, align 8
  %168 = getelementptr i8, i8* %167, i64 8
  store i8* %168, i8** %166, align 8
  br label %169

169:                                              ; preds = %165, %159
  %170 = phi i8* [ %163, %159 ], [ %167, %165 ]
  %171 = bitcast i8* %170 to i32*
  %172 = load i32, i32* %171, align 4
  %173 = getelementptr inbounds %struct.OpusMSEncoder, %struct.OpusMSEncoder* %0, i64 0, i32 0, i32 1
  %174 = load i32, i32* %173, align 4
  %175 = icmp sgt i32 %174, 0
  br i1 %175, label %176, label %515

176:                                              ; preds = %169
  %177 = getelementptr inbounds %struct.OpusMSEncoder, %struct.OpusMSEncoder* %0, i64 0, i32 0, i32 2
  br label %178

178:                                              ; preds = %176, %185
  %179 = phi i32 [ 0, %176 ], [ %192, %185 ]
  %180 = phi i8* [ %9, %176 ], [ %191, %185 ]
  %181 = bitcast i8* %180 to %struct.OpusEncoder*
  %182 = load i32, i32* %177, align 4
  %183 = tail call i32 (%struct.OpusEncoder*, i32, ...) @opus_encoder_ctl(%struct.OpusEncoder* %181, i32 %1, i32 %172) #6
  %184 = icmp eq i32 %183, 0
  br i1 %184, label %185, label %515

185:                                              ; preds = %178
  %186 = icmp slt i32 %179, %182
  %187 = select i1 %186, i32 %6, i32 %7
  %188 = add i32 %187, 7
  %189 = and i32 %188, -8
  %190 = sext i32 %189 to i64
  %191 = getelementptr inbounds i8, i8* %180, i64 %190
  %192 = add nuw nsw i32 %179, 1
  %193 = load i32, i32* %173, align 4
  %194 = icmp slt i32 %192, %193
  br i1 %194, label %178, label %515

195:                                              ; preds = %3
  %196 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %2, i64 0, i32 0
  %197 = load i32, i32* %196, align 8
  %198 = icmp ult i32 %197, 41
  br i1 %198, label %199, label %205

199:                                              ; preds = %195
  %200 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %2, i64 0, i32 3
  %201 = load i8*, i8** %200, align 8
  %202 = sext i32 %197 to i64
  %203 = getelementptr i8, i8* %201, i64 %202
  %204 = add nuw nsw i32 %197, 8
  store i32 %204, i32* %196, align 8
  br label %209

205:                                              ; preds = %195
  %206 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %2, i64 0, i32 2
  %207 = load i8*, i8** %206, align 8
  %208 = getelementptr i8, i8* %207, i64 8
  store i8* %208, i8** %206, align 8
  br label %209

209:                                              ; preds = %205, %199
  %210 = phi i32 [ %204, %199 ], [ %197, %205 ]
  %211 = phi i8* [ %203, %199 ], [ %207, %205 ]
  %212 = bitcast i8* %211 to i32*
  %213 = load i32, i32* %212, align 4
  %214 = icmp slt i32 %213, 0
  br i1 %214, label %515, label %215

215:                                              ; preds = %209
  %216 = getelementptr inbounds %struct.OpusMSEncoder, %struct.OpusMSEncoder* %0, i64 0, i32 0, i32 1
  %217 = load i32, i32* %216, align 4
  %218 = icmp slt i32 %213, %217
  br i1 %218, label %219, label %515

219:                                              ; preds = %215
  %220 = icmp ult i32 %210, 41
  br i1 %220, label %221, label %227

221:                                              ; preds = %219
  %222 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %2, i64 0, i32 3
  %223 = load i8*, i8** %222, align 8
  %224 = sext i32 %210 to i64
  %225 = getelementptr i8, i8* %223, i64 %224
  %226 = add nuw nsw i32 %210, 8
  store i32 %226, i32* %196, align 8
  br label %231

227:                                              ; preds = %219
  %228 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %2, i64 0, i32 2
  %229 = load i8*, i8** %228, align 8
  %230 = getelementptr i8, i8* %229, i64 8
  store i8* %230, i8** %228, align 8
  br label %231

231:                                              ; preds = %227, %221
  %232 = phi i8* [ %225, %221 ], [ %229, %227 ]
  %233 = bitcast i8* %232 to %struct.OpusEncoder***
  %234 = load %struct.OpusEncoder**, %struct.OpusEncoder*** %233, align 8
  %235 = icmp eq %struct.OpusEncoder** %234, null
  br i1 %235, label %515, label %236

236:                                              ; preds = %231
  %237 = icmp sgt i32 %213, 0
  br i1 %237, label %238, label %298

238:                                              ; preds = %236
  %239 = getelementptr inbounds %struct.OpusMSEncoder, %struct.OpusMSEncoder* %0, i64 0, i32 0, i32 2
  %240 = load i32, i32* %239, align 4
  %241 = add i32 %213, -1
  %242 = and i32 %213, 3
  %243 = icmp ult i32 %241, 3
  br i1 %243, label %280, label %244

244:                                              ; preds = %238
  %245 = sub i32 %213, %242
  br label %246

246:                                              ; preds = %246, %244
  %247 = phi i32 [ 0, %244 ], [ %277, %246 ]
  %248 = phi i8* [ %9, %244 ], [ %276, %246 ]
  %249 = phi i32 [ %245, %244 ], [ %278, %246 ]
  %250 = icmp slt i32 %247, %240
  %251 = select i1 %250, i32 %6, i32 %7
  %252 = add i32 %251, 7
  %253 = and i32 %252, -8
  %254 = sext i32 %253 to i64
  %255 = getelementptr inbounds i8, i8* %248, i64 %254
  %256 = or i32 %247, 1
  %257 = icmp slt i32 %256, %240
  %258 = select i1 %257, i32 %6, i32 %7
  %259 = add i32 %258, 7
  %260 = and i32 %259, -8
  %261 = sext i32 %260 to i64
  %262 = getelementptr inbounds i8, i8* %255, i64 %261
  %263 = or i32 %247, 2
  %264 = icmp slt i32 %263, %240
  %265 = select i1 %264, i32 %6, i32 %7
  %266 = add i32 %265, 7
  %267 = and i32 %266, -8
  %268 = sext i32 %267 to i64
  %269 = getelementptr inbounds i8, i8* %262, i64 %268
  %270 = or i32 %247, 3
  %271 = icmp slt i32 %270, %240
  %272 = select i1 %271, i32 %6, i32 %7
  %273 = add i32 %272, 7
  %274 = and i32 %273, -8
  %275 = sext i32 %274 to i64
  %276 = getelementptr inbounds i8, i8* %269, i64 %275
  %277 = add nuw nsw i32 %247, 4
  %278 = add i32 %249, -4
  %279 = icmp eq i32 %278, 0
  br i1 %279, label %280, label %246

280:                                              ; preds = %246, %238
  %281 = phi i8* [ undef, %238 ], [ %276, %246 ]
  %282 = phi i32 [ 0, %238 ], [ %277, %246 ]
  %283 = phi i8* [ %9, %238 ], [ %276, %246 ]
  %284 = icmp eq i32 %242, 0
  br i1 %284, label %298, label %285

285:                                              ; preds = %280, %285
  %286 = phi i32 [ %295, %285 ], [ %282, %280 ]
  %287 = phi i8* [ %294, %285 ], [ %283, %280 ]
  %288 = phi i32 [ %296, %285 ], [ %242, %280 ]
  %289 = icmp slt i32 %286, %240
  %290 = select i1 %289, i32 %6, i32 %7
  %291 = add i32 %290, 7
  %292 = and i32 %291, -8
  %293 = sext i32 %292 to i64
  %294 = getelementptr inbounds i8, i8* %287, i64 %293
  %295 = add nuw nsw i32 %286, 1
  %296 = add i32 %288, -1
  %297 = icmp eq i32 %296, 0
  br i1 %297, label %298, label %285, !llvm.loop !36

298:                                              ; preds = %280, %285, %236
  %299 = phi i8* [ %9, %236 ], [ %281, %280 ], [ %294, %285 ]
  %300 = bitcast %struct.OpusEncoder** %234 to i8**
  store i8* %299, i8** %300, align 8
  br label %515

301:                                              ; preds = %3
  %302 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %2, i64 0, i32 0
  %303 = load i32, i32* %302, align 8
  %304 = icmp ult i32 %303, 41
  br i1 %304, label %305, label %311

305:                                              ; preds = %301
  %306 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %2, i64 0, i32 3
  %307 = load i8*, i8** %306, align 8
  %308 = sext i32 %303 to i64
  %309 = getelementptr i8, i8* %307, i64 %308
  %310 = add nuw nsw i32 %303, 8
  store i32 %310, i32* %302, align 8
  br label %315

311:                                              ; preds = %301
  %312 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %2, i64 0, i32 2
  %313 = load i8*, i8** %312, align 8
  %314 = getelementptr i8, i8* %313, i64 8
  store i8* %314, i8** %312, align 8
  br label %315

315:                                              ; preds = %311, %305
  %316 = phi i8* [ %309, %305 ], [ %313, %311 ]
  %317 = bitcast i8* %316 to i32*
  %318 = load i32, i32* %317, align 4
  %319 = getelementptr inbounds %struct.OpusMSEncoder, %struct.OpusMSEncoder* %0, i64 0, i32 4
  store i32 %318, i32* %319, align 4
  br label %515

320:                                              ; preds = %3
  %321 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %2, i64 0, i32 0
  %322 = load i32, i32* %321, align 8
  %323 = icmp ult i32 %322, 41
  br i1 %323, label %324, label %330

324:                                              ; preds = %320
  %325 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %2, i64 0, i32 3
  %326 = load i8*, i8** %325, align 8
  %327 = sext i32 %322 to i64
  %328 = getelementptr i8, i8* %326, i64 %327
  %329 = add nuw nsw i32 %322, 8
  store i32 %329, i32* %321, align 8
  br label %334

330:                                              ; preds = %320
  %331 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %2, i64 0, i32 2
  %332 = load i8*, i8** %331, align 8
  %333 = getelementptr i8, i8* %332, i64 8
  store i8* %333, i8** %331, align 8
  br label %334

334:                                              ; preds = %330, %324
  %335 = phi i8* [ %328, %324 ], [ %332, %330 ]
  %336 = bitcast i8* %335 to i32**
  %337 = load i32*, i32** %336, align 8
  %338 = icmp eq i32* %337, null
  br i1 %338, label %515, label %339

339:                                              ; preds = %334
  %340 = getelementptr inbounds %struct.OpusMSEncoder, %struct.OpusMSEncoder* %0, i64 0, i32 4
  %341 = load i32, i32* %340, align 4
  store i32 %341, i32* %337, align 4
  br label %515

342:                                              ; preds = %3
  %343 = getelementptr inbounds %struct.OpusMSEncoder, %struct.OpusMSEncoder* %0, i64 0, i32 5
  %344 = load i32, i32* %343, align 4
  %345 = icmp eq i32 %344, 1
  br i1 %345, label %346, label %492

346:                                              ; preds = %342
  %347 = tail call i32 @opus_encoder_get_size(i32 2) #6
  %348 = tail call i32 @opus_encoder_get_size(i32 1) #6
  %349 = getelementptr inbounds %struct.OpusMSEncoder, %struct.OpusMSEncoder* %0, i64 0, i32 0, i32 1
  %350 = load i32, i32* %349, align 4
  %351 = icmp sgt i32 %350, 0
  br i1 %351, label %352, label %412

352:                                              ; preds = %346
  %353 = getelementptr inbounds %struct.OpusMSEncoder, %struct.OpusMSEncoder* %0, i64 0, i32 0, i32 2
  %354 = load i32, i32* %353, align 4
  %355 = add i32 %350, -1
  %356 = and i32 %350, 3
  %357 = icmp ult i32 %355, 3
  br i1 %357, label %394, label %358

358:                                              ; preds = %352
  %359 = sub i32 %350, %356
  br label %360

360:                                              ; preds = %360, %358
  %361 = phi i8* [ %9, %358 ], [ %390, %360 ]
  %362 = phi i32 [ 0, %358 ], [ %391, %360 ]
  %363 = phi i32 [ %359, %358 ], [ %392, %360 ]
  %364 = icmp slt i32 %362, %354
  %365 = select i1 %364, i32 %347, i32 %348
  %366 = add i32 %365, 7
  %367 = and i32 %366, -8
  %368 = sext i32 %367 to i64
  %369 = getelementptr inbounds i8, i8* %361, i64 %368
  %370 = or i32 %362, 1
  %371 = icmp slt i32 %370, %354
  %372 = select i1 %371, i32 %347, i32 %348
  %373 = add i32 %372, 7
  %374 = and i32 %373, -8
  %375 = sext i32 %374 to i64
  %376 = getelementptr inbounds i8, i8* %369, i64 %375
  %377 = or i32 %362, 2
  %378 = icmp slt i32 %377, %354
  %379 = select i1 %378, i32 %347, i32 %348
  %380 = add i32 %379, 7
  %381 = and i32 %380, -8
  %382 = sext i32 %381 to i64
  %383 = getelementptr inbounds i8, i8* %376, i64 %382
  %384 = or i32 %362, 3
  %385 = icmp slt i32 %384, %354
  %386 = select i1 %385, i32 %347, i32 %348
  %387 = add i32 %386, 7
  %388 = and i32 %387, -8
  %389 = sext i32 %388 to i64
  %390 = getelementptr inbounds i8, i8* %383, i64 %389
  %391 = add nuw nsw i32 %362, 4
  %392 = add i32 %363, -4
  %393 = icmp eq i32 %392, 0
  br i1 %393, label %394, label %360

394:                                              ; preds = %360, %352
  %395 = phi i8* [ undef, %352 ], [ %390, %360 ]
  %396 = phi i8* [ %9, %352 ], [ %390, %360 ]
  %397 = phi i32 [ 0, %352 ], [ %391, %360 ]
  %398 = icmp eq i32 %356, 0
  br i1 %398, label %412, label %399

399:                                              ; preds = %394, %399
  %400 = phi i8* [ %408, %399 ], [ %396, %394 ]
  %401 = phi i32 [ %409, %399 ], [ %397, %394 ]
  %402 = phi i32 [ %410, %399 ], [ %356, %394 ]
  %403 = icmp slt i32 %401, %354
  %404 = select i1 %403, i32 %347, i32 %348
  %405 = add i32 %404, 7
  %406 = and i32 %405, -8
  %407 = sext i32 %406 to i64
  %408 = getelementptr inbounds i8, i8* %400, i64 %407
  %409 = add nuw nsw i32 %401, 1
  %410 = add i32 %402, -1
  %411 = icmp eq i32 %410, 0
  br i1 %411, label %412, label %399, !llvm.loop !37

412:                                              ; preds = %394, %399, %346
  %413 = phi i8* [ %9, %346 ], [ %395, %394 ], [ %408, %399 ]
  %414 = getelementptr inbounds %struct.OpusMSEncoder, %struct.OpusMSEncoder* %0, i64 0, i32 0, i32 0
  %415 = load i32, i32* %414, align 4
  %416 = mul nsw i32 %415, 120
  %417 = sext i32 %416 to i64
  %418 = shl nsw i64 %417, 2
  %419 = getelementptr inbounds i8, i8* %413, i64 %418
  %420 = sext i32 %415 to i64
  %421 = shl nsw i64 %420, 2
  tail call void @llvm.memset.p0i8.i64(i8* align 4 %419, i8 0, i64 %421, i1 false)
  %422 = tail call i32 @opus_encoder_get_size(i32 2) #6
  %423 = tail call i32 @opus_encoder_get_size(i32 1) #6
  %424 = load i32, i32* %349, align 4
  %425 = icmp sgt i32 %424, 0
  br i1 %425, label %426, label %486

426:                                              ; preds = %412
  %427 = getelementptr inbounds %struct.OpusMSEncoder, %struct.OpusMSEncoder* %0, i64 0, i32 0, i32 2
  %428 = load i32, i32* %427, align 4
  %429 = add i32 %424, -1
  %430 = and i32 %424, 3
  %431 = icmp ult i32 %429, 3
  br i1 %431, label %468, label %432

432:                                              ; preds = %426
  %433 = sub i32 %424, %430
  br label %434

434:                                              ; preds = %434, %432
  %435 = phi i8* [ %9, %432 ], [ %464, %434 ]
  %436 = phi i32 [ 0, %432 ], [ %465, %434 ]
  %437 = phi i32 [ %433, %432 ], [ %466, %434 ]
  %438 = icmp slt i32 %436, %428
  %439 = select i1 %438, i32 %422, i32 %423
  %440 = add i32 %439, 7
  %441 = and i32 %440, -8
  %442 = sext i32 %441 to i64
  %443 = getelementptr inbounds i8, i8* %435, i64 %442
  %444 = or i32 %436, 1
  %445 = icmp slt i32 %444, %428
  %446 = select i1 %445, i32 %422, i32 %423
  %447 = add i32 %446, 7
  %448 = and i32 %447, -8
  %449 = sext i32 %448 to i64
  %450 = getelementptr inbounds i8, i8* %443, i64 %449
  %451 = or i32 %436, 2
  %452 = icmp slt i32 %451, %428
  %453 = select i1 %452, i32 %422, i32 %423
  %454 = add i32 %453, 7
  %455 = and i32 %454, -8
  %456 = sext i32 %455 to i64
  %457 = getelementptr inbounds i8, i8* %450, i64 %456
  %458 = or i32 %436, 3
  %459 = icmp slt i32 %458, %428
  %460 = select i1 %459, i32 %422, i32 %423
  %461 = add i32 %460, 7
  %462 = and i32 %461, -8
  %463 = sext i32 %462 to i64
  %464 = getelementptr inbounds i8, i8* %457, i64 %463
  %465 = add nuw nsw i32 %436, 4
  %466 = add i32 %437, -4
  %467 = icmp eq i32 %466, 0
  br i1 %467, label %468, label %434

468:                                              ; preds = %434, %426
  %469 = phi i8* [ undef, %426 ], [ %464, %434 ]
  %470 = phi i8* [ %9, %426 ], [ %464, %434 ]
  %471 = phi i32 [ 0, %426 ], [ %465, %434 ]
  %472 = icmp eq i32 %430, 0
  br i1 %472, label %486, label %473

473:                                              ; preds = %468, %473
  %474 = phi i8* [ %482, %473 ], [ %470, %468 ]
  %475 = phi i32 [ %483, %473 ], [ %471, %468 ]
  %476 = phi i32 [ %484, %473 ], [ %430, %468 ]
  %477 = icmp slt i32 %475, %428
  %478 = select i1 %477, i32 %422, i32 %423
  %479 = add i32 %478, 7
  %480 = and i32 %479, -8
  %481 = sext i32 %480 to i64
  %482 = getelementptr inbounds i8, i8* %474, i64 %481
  %483 = add nuw nsw i32 %475, 1
  %484 = add i32 %476, -1
  %485 = icmp eq i32 %484, 0
  br i1 %485, label %486, label %473, !llvm.loop !38

486:                                              ; preds = %468, %473, %412
  %487 = phi i8* [ %9, %412 ], [ %469, %468 ], [ %482, %473 ]
  %488 = load i32, i32* %414, align 4
  %489 = mul nsw i32 %488, 120
  %490 = sext i32 %489 to i64
  %491 = shl nsw i64 %490, 2
  tail call void @llvm.memset.p0i8.i64(i8* align 4 %487, i8 0, i64 %491, i1 false)
  br label %492

492:                                              ; preds = %486, %342
  %493 = getelementptr inbounds %struct.OpusMSEncoder, %struct.OpusMSEncoder* %0, i64 0, i32 0, i32 1
  %494 = load i32, i32* %493, align 4
  %495 = icmp sgt i32 %494, 0
  br i1 %495, label %496, label %515

496:                                              ; preds = %492
  %497 = getelementptr inbounds %struct.OpusMSEncoder, %struct.OpusMSEncoder* %0, i64 0, i32 0, i32 2
  br label %498

498:                                              ; preds = %496, %505
  %499 = phi i32 [ 0, %496 ], [ %512, %505 ]
  %500 = phi i8* [ %9, %496 ], [ %511, %505 ]
  %501 = bitcast i8* %500 to %struct.OpusEncoder*
  %502 = load i32, i32* %497, align 4
  %503 = tail call i32 (%struct.OpusEncoder*, i32, ...) @opus_encoder_ctl(%struct.OpusEncoder* %501, i32 4028) #6
  %504 = icmp eq i32 %503, 0
  br i1 %504, label %505, label %515

505:                                              ; preds = %498
  %506 = icmp slt i32 %499, %502
  %507 = select i1 %506, i32 %6, i32 %7
  %508 = add i32 %507, 7
  %509 = and i32 %508, -8
  %510 = sext i32 %509 to i64
  %511 = getelementptr inbounds i8, i8* %500, i64 %510
  %512 = add nuw nsw i32 %499, 1
  %513 = load i32, i32* %493, align 4
  %514 = icmp slt i32 %512, %513
  br i1 %514, label %498, label %515

515:                                              ; preds = %505, %498, %185, %178, %68, %492, %169, %61, %334, %231, %209, %215, %56, %28, %154, %339, %298, %152, %39, %100, %315, %3
  %516 = phi i32 [ 0, %339 ], [ 0, %315 ], [ 0, %298 ], [ %105, %100 ], [ 0, %39 ], [ -5, %3 ], [ %153, %152 ], [ -1, %154 ], [ -1, %28 ], [ -1, %56 ], [ -1, %215 ], [ -1, %209 ], [ -1, %231 ], [ -1, %334 ], [ 0, %61 ], [ 0, %169 ], [ 0, %492 ], [ 0, %68 ], [ 0, %185 ], [ %183, %178 ], [ 0, %505 ], [ %503, %498 ]
  ret i32 %516
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @opus_multistream_encoder_ctl(%struct.OpusMSEncoder*, i32, ...) local_unnamed_addr #0 {
  %3 = alloca [1 x %struct.__va_list_tag], align 16
  %4 = bitcast [1 x %struct.__va_list_tag]* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %4) #6
  %5 = getelementptr inbounds [1 x %struct.__va_list_tag], [1 x %struct.__va_list_tag]* %3, i64 0, i64 0
  %6 = bitcast [1 x %struct.__va_list_tag]* %3 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %6, i8 -86, i64 24, i1 false)
  call void @llvm.va_start(i8* nonnull %4)
  %7 = call i32 @opus_multistream_encoder_ctl_va_list(%struct.OpusMSEncoder* %0, i32 %1, %struct.__va_list_tag* nonnull %5)
  call void @llvm.va_end(i8* nonnull %4)
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %4) #6
  ret i32 %7
}

; Function Attrs: nounwind
declare void @llvm.va_start(i8*) #6

; Function Attrs: nounwind
declare void @llvm.va_end(i8*) #6

; Function Attrs: nounwind ssp uwtable
define hidden void @opus_multistream_encoder_destroy(%struct.OpusMSEncoder* nocapture) local_unnamed_addr #0 {
  %2 = bitcast %struct.OpusMSEncoder* %0 to i8*
  tail call void @free(i8* %2) #6
  ret void
}

declare i32 @isqrt32(i32) local_unnamed_addr #2

declare i32 @opus_select_arch() local_unnamed_addr #2

declare i32 @validate_layout(%struct.ChannelLayout*) local_unnamed_addr #2

declare i32 @opus_encoder_init(%struct.OpusEncoder*, i32, i32, i32) local_unnamed_addr #2

; Function Attrs: nofree nounwind
declare noalias i8* @malloc(i64) local_unnamed_addr #4

; Function Attrs: nounwind
declare void @free(i8* nocapture) local_unnamed_addr #7

; Function Attrs: nounwind readnone speculatable
declare float @llvm.floor.f32(float) #8

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nofree norecurse nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nounwind }
attributes #7 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { nounwind readnone speculatable }
attributes #9 = { noreturn nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = distinct !{!2, !3}
!3 = !{!"llvm.loop.isvectorized", i32 1}
!4 = distinct !{!4, !5, !3}
!5 = !{!"llvm.loop.unroll.runtime.disable"}
!6 = !{!7}
!7 = distinct !{!7, !8}
!8 = distinct !{!8, !"LVerDomain"}
!9 = !{!10}
!10 = distinct !{!10, !8}
!11 = distinct !{!11, !3}
!12 = distinct !{!12, !13}
!13 = !{!"llvm.loop.unroll.disable"}
!14 = distinct !{!14, !13}
!15 = distinct !{!15, !3}
!16 = distinct !{!16, !13}
!17 = distinct !{!17, !13}
!18 = distinct !{!18, !3}
!19 = distinct !{!19, !13}
!20 = distinct !{!20, !5, !3}
!21 = distinct !{!21, !13}
!22 = distinct !{!22, !13}
!23 = distinct !{!23, !3}
!24 = distinct !{!24, !13}
!25 = distinct !{!25, !5, !3}
!26 = distinct !{!26, !3}
!27 = distinct !{!27, !5, !3}
!28 = distinct !{!28, !13}
!29 = !{!30}
!30 = distinct !{!30, !31}
!31 = distinct !{!31, !"LVerDomain"}
!32 = !{!33}
!33 = distinct !{!33, !31}
!34 = distinct !{!34, !3}
!35 = distinct !{!35, !3}
!36 = distinct !{!36, !13}
!37 = distinct !{!37, !13}
!38 = distinct !{!38, !13}
