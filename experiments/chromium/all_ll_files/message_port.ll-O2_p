; ModuleID = '../../extensions/browser/api/messaging/message_port.cc'
source_filename = "../../extensions/browser/api/messaging/message_port.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.extensions::MessagePort" = type { i32 (...)** }
%"class.content::RenderFrameHost" = type opaque
%"class.base::DictionaryValue" = type { %"class.base::Value" }
%"class.base::Value" = type { %"class.absl::variant" }
%"class.absl::variant" = type { %"class.absl::variant_internal::VariantCopyAssignBaseNontrivial" }
%"class.absl::variant_internal::VariantCopyAssignBaseNontrivial" = type { %"class.absl::variant_internal::VariantMoveAssignBaseNontrivial" }
%"class.absl::variant_internal::VariantMoveAssignBaseNontrivial" = type { %"class.absl::variant_internal::VariantCopyBaseNontrivial" }
%"class.absl::variant_internal::VariantCopyBaseNontrivial" = type { %"class.absl::variant_internal::VariantMoveBaseNontrivial" }
%"class.absl::variant_internal::VariantMoveBaseNontrivial" = type { %"class.absl::variant_internal::VariantStateBaseDestructorNontrivial" }
%"class.absl::variant_internal::VariantStateBaseDestructorNontrivial" = type { %"class.absl::variant_internal::VariantStateBase" }
%"class.absl::variant_internal::VariantStateBase" = type { %"union.absl::variant_internal::DestructibleUnionImpl", i64 }
%"union.absl::variant_internal::DestructibleUnionImpl" = type { %"union.absl::variant_internal::DestructibleUnionImpl.3" }
%"union.absl::variant_internal::DestructibleUnionImpl.3" = type { %"union.absl::variant_internal::DestructibleUnionImpl.4" }
%"union.absl::variant_internal::DestructibleUnionImpl.4" = type { %"union.absl::variant_internal::DestructibleUnionImpl.5" }
%"union.absl::variant_internal::DestructibleUnionImpl.5" = type { %"union.absl::variant_internal::DestructibleUnionImpl.6" }
%"union.absl::variant_internal::DestructibleUnionImpl.6" = type { %"class.std::__1::basic_string" }
%"class.std::__1::basic_string" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" = type { %union.anon }
%union.anon = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" = type { i8*, i64, i64 }
%"struct.extensions::MessagingEndpoint" = type opaque
%class.GURL = type opaque
%"class.absl::optional" = type { %"class.absl::optional_internal::optional_data" }
%"class.absl::optional_internal::optional_data" = type { %"class.absl::optional_internal::optional_data_base" }
%"class.absl::optional_internal::optional_data_base" = type { %"class.absl::optional_internal::optional_data_dtor_base" }
%"class.absl::optional_internal::optional_data_dtor_base" = type { i8, %union.anon.31 }
%union.anon.31 = type { %"class.url::Origin" }
%"class.url::Origin" = type { %"class.url::SchemeHostPort", %"class.absl::optional.32" }
%"class.url::SchemeHostPort" = type <{ %"class.std::__1::basic_string", %"class.std::__1::basic_string", i16, [6 x i8] }>
%"class.absl::optional.32" = type { %"class.absl::optional_internal::optional_data.33" }
%"class.absl::optional_internal::optional_data.33" = type { %"class.absl::optional_internal::optional_data_base.34" }
%"class.absl::optional_internal::optional_data_base.34" = type { %"class.absl::optional_internal::optional_data_dtor_base.35" }
%"class.absl::optional_internal::optional_data_dtor_base.35" = type { i8, %union.anon.36 }
%union.anon.36 = type { %"class.url::Origin::Nonce" }
%"class.url::Origin::Nonce" = type { %"class.base::UnguessableToken" }
%"class.base::UnguessableToken" = type { %"class.base::Token" }
%"class.base::Token" = type { i64, i64 }
%"struct.extensions::PortContext" = type opaque

@_ZTVN10extensions11MessagePortE = hidden unnamed_addr constant { [15 x i8*] } { [15 x i8*] [i8* null, i8* null, i8* bitcast (void (%"class.extensions::MessagePort"*)* @_ZN10extensions11MessagePortD2Ev to i8*), i8* bitcast (void (%"class.extensions::MessagePort"*)* @_ZN10extensions11MessagePortD0Ev to i8*), i8* bitcast (void (%"class.extensions::MessagePort"*, %"class.extensions::MessagePort"*)* @_ZN10extensions11MessagePort18RemoveCommonFramesERKS0_ to i8*), i8* bitcast (i1 (%"class.extensions::MessagePort"*, %"class.content::RenderFrameHost"*)* @_ZNK10extensions11MessagePort8HasFrameEPN7content15RenderFrameHostE to i8*), i8* bitcast (void ()* @__cxa_pure_virtual to i8*), i8* bitcast (void (%"class.extensions::MessagePort"*)* @_ZN10extensions11MessagePort14RevalidatePortEv to i8*), i8* bitcast (void (%"class.extensions::MessagePort"*, %"class.std::__1::basic_string"*, %"class.base::DictionaryValue"*, i32, i32, i32, %"struct.extensions::MessagingEndpoint"*, %"class.std::__1::basic_string"*, %class.GURL*, %"class.absl::optional"*)* @_ZN10extensions11MessagePort17DispatchOnConnectERKNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEENS1_10unique_ptrIN4base15DictionaryValueENS1_14default_deleteISC_EEEEiiiRKNS_17MessagingEndpointES9_RK4GURLN4absl8optionalIN3url6OriginEEE to i8*), i8* bitcast (void (%"class.extensions::MessagePort"*, %"class.std::__1::basic_string"*)* @_ZN10extensions11MessagePort20DispatchOnDisconnectERKNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEE to i8*), i8* bitcast (void ()* @__cxa_pure_virtual to i8*), i8* bitcast (void (%"class.extensions::MessagePort"*, i32, %"struct.extensions::PortContext"*)* @_ZN10extensions11MessagePort8OpenPortEiRKNS_11PortContextE to i8*), i8* bitcast (void (%"class.extensions::MessagePort"*, i32, i32, i32)* @_ZN10extensions11MessagePort9ClosePortEiii to i8*), i8* bitcast (void (%"class.extensions::MessagePort"*)* @_ZN10extensions11MessagePort27IncrementLazyKeepaliveCountEv to i8*), i8* bitcast (void (%"class.extensions::MessagePort"*)* @_ZN10extensions11MessagePort27DecrementLazyKeepaliveCountEv to i8*)] }, align 8

@_ZN10extensions11MessagePortD1Ev = hidden unnamed_addr alias void (%"class.extensions::MessagePort"*), void (%"class.extensions::MessagePort"*)* @_ZN10extensions11MessagePortD2Ev

; Function Attrs: nofree norecurse nounwind ssp uwtable writeonly
define hidden void @_ZN10extensions11MessagePortC2Ev(%"class.extensions::MessagePort"* nocapture) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.extensions::MessagePort", %"class.extensions::MessagePort"* %0, i64 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [15 x i8*] }, { [15 x i8*] }* @_ZTVN10extensions11MessagePortE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8
  ret void
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden void @_ZN10extensions11MessagePortD2Ev(%"class.extensions::MessagePort"* nocapture) unnamed_addr #1 align 2 {
  ret void
}

; Function Attrs: noreturn nounwind ssp uwtable
define hidden void @_ZN10extensions11MessagePortD0Ev(%"class.extensions::MessagePort"* nocapture readnone) unnamed_addr #2 align 2 {
  tail call void @llvm.trap() #7
  unreachable
}

; Function Attrs: cold noreturn nounwind
declare void @llvm.trap() #3

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden void @_ZN10extensions11MessagePort18RemoveCommonFramesERKS0_(%"class.extensions::MessagePort"* nocapture, %"class.extensions::MessagePort"* nocapture dereferenceable(8)) unnamed_addr #1 align 2 {
  ret void
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden zeroext i1 @_ZNK10extensions11MessagePort8HasFrameEPN7content15RenderFrameHostE(%"class.extensions::MessagePort"* nocapture readnone, %"class.content::RenderFrameHost"* nocapture readnone) unnamed_addr #1 align 2 {
  ret i1 false
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden void @_ZN10extensions11MessagePort14RevalidatePortEv(%"class.extensions::MessagePort"* nocapture) unnamed_addr #1 align 2 {
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN10extensions11MessagePort17DispatchOnConnectERKNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEENS1_10unique_ptrIN4base15DictionaryValueENS1_14default_deleteISC_EEEEiiiRKNS_17MessagingEndpointES9_RK4GURLN4absl8optionalIN3url6OriginEEE(%"class.extensions::MessagePort"* nocapture readnone, %"class.std::__1::basic_string"* nocapture readnone dereferenceable(24), %"class.base::DictionaryValue"*, i32, i32, i32, %"struct.extensions::MessagingEndpoint"* nocapture readnone, %"class.std::__1::basic_string"* nocapture readnone dereferenceable(24), %class.GURL* nocapture readnone, %"class.absl::optional"* nocapture readnone) unnamed_addr #4 align 2 {
  %11 = icmp eq %"class.base::DictionaryValue"* %2, null
  br i1 %11, label %15, label %12

12:                                               ; preds = %10
  %13 = getelementptr inbounds %"class.base::DictionaryValue", %"class.base::DictionaryValue"* %2, i64 0, i32 0
  tail call void @_ZN4base5ValueD2Ev(%"class.base::Value"* nonnull %13) #8
  %14 = bitcast %"class.base::DictionaryValue"* %2 to i8*
  tail call void @_ZdlPv(i8* %14) #9
  br label %15

15:                                               ; preds = %10, %12
  ret void
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden void @_ZN10extensions11MessagePort20DispatchOnDisconnectERKNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEE(%"class.extensions::MessagePort"* nocapture, %"class.std::__1::basic_string"* nocapture dereferenceable(24)) unnamed_addr #1 align 2 {
  ret void
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden void @_ZN10extensions11MessagePort8OpenPortEiRKNS_11PortContextE(%"class.extensions::MessagePort"* nocapture, i32, %"struct.extensions::PortContext"* nocapture) unnamed_addr #1 align 2 {
  ret void
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden void @_ZN10extensions11MessagePort9ClosePortEiii(%"class.extensions::MessagePort"* nocapture, i32, i32, i32) unnamed_addr #1 align 2 {
  ret void
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden void @_ZN10extensions11MessagePort27IncrementLazyKeepaliveCountEv(%"class.extensions::MessagePort"* nocapture) unnamed_addr #1 align 2 {
  ret void
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden void @_ZN10extensions11MessagePort27DecrementLazyKeepaliveCountEv(%"class.extensions::MessagePort"* nocapture) unnamed_addr #1 align 2 {
  ret void
}

declare void @__cxa_pure_virtual() unnamed_addr

; Function Attrs: nounwind
declare void @_ZN4base5ValueD2Ev(%"class.base::Value"*) unnamed_addr #5

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #6

attributes #0 = { nofree norecurse nounwind ssp uwtable writeonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { norecurse nounwind readnone ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { noreturn nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { cold noreturn nounwind }
attributes #4 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { noreturn nounwind }
attributes #8 = { nounwind }
attributes #9 = { builtin nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
