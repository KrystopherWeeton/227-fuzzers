; ModuleID = '../../third_party/boringssl/src/crypto/x509v3/pcy_node.c'
source_filename = "../../third_party/boringssl/src/crypto/x509v3/pcy_node.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.stack_st_X509_POLICY_NODE = type opaque
%struct.stack_st = type { i64, i8**, i32, i64, i32 (i8**, i8**)* }
%struct.X509_POLICY_NODE_st = type { %struct.X509_POLICY_DATA_st*, %struct.X509_POLICY_NODE_st*, i32 }
%struct.X509_POLICY_DATA_st = type { i32, %struct.asn1_object_st*, %struct.stack_st_POLICYQUALINFO*, %struct.stack_st_ASN1_OBJECT* }
%struct.asn1_object_st = type { i8*, i8*, i32, i32, i8*, i32 }
%struct.stack_st_POLICYQUALINFO = type opaque
%struct.stack_st_ASN1_OBJECT = type opaque
%struct.X509_POLICY_LEVEL_st = type { %struct.x509_st*, %struct.stack_st_X509_POLICY_NODE*, %struct.X509_POLICY_NODE_st*, i32 }
%struct.x509_st = type { %struct.x509_cinf_st*, %struct.X509_algor_st*, %struct.asn1_string_st*, i32, %struct.crypto_ex_data_st, i64, i64, i64, i64, i64, i64, %struct.asn1_string_st*, %struct.AUTHORITY_KEYID_st*, %struct.X509_POLICY_CACHE_st*, %struct.stack_st_DIST_POINT*, %struct.stack_st_GENERAL_NAME*, %struct.NAME_CONSTRAINTS_st*, [20 x i8], %struct.x509_cert_aux_st*, %struct.crypto_buffer_st*, %union.crypto_mutex_st }
%struct.x509_cinf_st = type { %struct.asn1_string_st*, %struct.asn1_string_st*, %struct.X509_algor_st*, %struct.X509_name_st*, %struct.X509_val_st*, %struct.X509_name_st*, %struct.X509_pubkey_st*, %struct.asn1_string_st*, %struct.asn1_string_st*, %struct.stack_st_X509_EXTENSION*, %struct.ASN1_ENCODING_st }
%struct.X509_val_st = type opaque
%struct.X509_name_st = type { %struct.stack_st_X509_NAME_ENTRY*, i32, %struct.buf_mem_st*, i8*, i32 }
%struct.stack_st_X509_NAME_ENTRY = type opaque
%struct.buf_mem_st = type { i64, i8*, i64 }
%struct.X509_pubkey_st = type opaque
%struct.stack_st_X509_EXTENSION = type opaque
%struct.ASN1_ENCODING_st = type { i8*, i64, i32, i8 }
%struct.X509_algor_st = type { %struct.asn1_object_st*, %struct.asn1_type_st* }
%struct.asn1_type_st = type { i32, %union.anon }
%union.anon = type { i8* }
%struct.crypto_ex_data_st = type { %struct.stack_st_void* }
%struct.stack_st_void = type opaque
%struct.asn1_string_st = type { i32, i32, i8*, i64 }
%struct.AUTHORITY_KEYID_st = type { %struct.asn1_string_st*, %struct.stack_st_GENERAL_NAME*, %struct.asn1_string_st* }
%struct.X509_POLICY_CACHE_st = type { %struct.X509_POLICY_DATA_st*, %struct.stack_st_X509_POLICY_DATA*, i64, i64, i64 }
%struct.stack_st_X509_POLICY_DATA = type opaque
%struct.stack_st_DIST_POINT = type opaque
%struct.stack_st_GENERAL_NAME = type opaque
%struct.NAME_CONSTRAINTS_st = type { %struct.stack_st_GENERAL_SUBTREE*, %struct.stack_st_GENERAL_SUBTREE* }
%struct.stack_st_GENERAL_SUBTREE = type opaque
%struct.x509_cert_aux_st = type opaque
%struct.crypto_buffer_st = type opaque
%union.crypto_mutex_st = type { double, [48 x i8] }
%struct.X509_POLICY_TREE_st = type { %struct.X509_POLICY_LEVEL_st*, i32, %struct.stack_st_X509_POLICY_DATA*, %struct.stack_st_X509_POLICY_NODE*, %struct.stack_st_X509_POLICY_NODE*, i32 }

; Function Attrs: nounwind ssp uwtable
define hidden %struct.stack_st_X509_POLICY_NODE* @policy_node_cmp_new() local_unnamed_addr #0 {
  %1 = tail call %struct.stack_st* @sk_new(i32 (i8**, i8**)* bitcast (i32 (%struct.X509_POLICY_NODE_st**, %struct.X509_POLICY_NODE_st**)* @node_cmp to i32 (i8**, i8**)*)) #4
  %2 = bitcast %struct.stack_st* %1 to %struct.stack_st_X509_POLICY_NODE*
  ret %struct.stack_st_X509_POLICY_NODE* %2
}

; Function Attrs: nounwind ssp uwtable
define internal i32 @node_cmp(%struct.X509_POLICY_NODE_st** nocapture readonly, %struct.X509_POLICY_NODE_st** nocapture readonly) #0 {
  %3 = load %struct.X509_POLICY_NODE_st*, %struct.X509_POLICY_NODE_st** %0, align 8
  %4 = getelementptr inbounds %struct.X509_POLICY_NODE_st, %struct.X509_POLICY_NODE_st* %3, i64 0, i32 0
  %5 = load %struct.X509_POLICY_DATA_st*, %struct.X509_POLICY_DATA_st** %4, align 8
  %6 = getelementptr inbounds %struct.X509_POLICY_DATA_st, %struct.X509_POLICY_DATA_st* %5, i64 0, i32 1
  %7 = load %struct.asn1_object_st*, %struct.asn1_object_st** %6, align 8
  %8 = load %struct.X509_POLICY_NODE_st*, %struct.X509_POLICY_NODE_st** %1, align 8
  %9 = getelementptr inbounds %struct.X509_POLICY_NODE_st, %struct.X509_POLICY_NODE_st* %8, i64 0, i32 0
  %10 = load %struct.X509_POLICY_DATA_st*, %struct.X509_POLICY_DATA_st** %9, align 8
  %11 = getelementptr inbounds %struct.X509_POLICY_DATA_st, %struct.X509_POLICY_DATA_st* %10, i64 0, i32 1
  %12 = load %struct.asn1_object_st*, %struct.asn1_object_st** %11, align 8
  %13 = tail call i32 @OBJ_cmp(%struct.asn1_object_st* %7, %struct.asn1_object_st* %12) #4
  ret i32 %13
}

; Function Attrs: nounwind ssp uwtable
define hidden %struct.X509_POLICY_NODE_st* @tree_find_sk(%struct.stack_st_X509_POLICY_NODE*, %struct.asn1_object_st*) local_unnamed_addr #0 {
  %3 = alloca %struct.X509_POLICY_DATA_st, align 8
  %4 = alloca %struct.X509_POLICY_NODE_st, align 8
  %5 = alloca i64, align 8
  %6 = bitcast %struct.X509_POLICY_DATA_st* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %6) #4
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %6, i8 -86, i64 32, i1 false)
  %7 = bitcast %struct.X509_POLICY_NODE_st* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %7) #4
  %8 = getelementptr inbounds %struct.X509_POLICY_NODE_st, %struct.X509_POLICY_NODE_st* %4, i64 0, i32 1
  %9 = bitcast %struct.X509_POLICY_NODE_st** %8 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %9, i8 -86, i64 16, i1 false)
  %10 = bitcast i64* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %10) #4
  store i64 -6148914691236517206, i64* %5, align 8
  %11 = getelementptr inbounds %struct.X509_POLICY_DATA_st, %struct.X509_POLICY_DATA_st* %3, i64 0, i32 1
  store %struct.asn1_object_st* %1, %struct.asn1_object_st** %11, align 8
  %12 = getelementptr inbounds %struct.X509_POLICY_NODE_st, %struct.X509_POLICY_NODE_st* %4, i64 0, i32 0
  store %struct.X509_POLICY_DATA_st* %3, %struct.X509_POLICY_DATA_st** %12, align 8
  %13 = bitcast %struct.stack_st_X509_POLICY_NODE* %0 to %struct.stack_st*
  call void @sk_sort(%struct.stack_st* %13) #4
  %14 = call i32 @sk_find(%struct.stack_st* %13, i64* nonnull %5, i8* nonnull %7, i32 (i32 (i8**, i8**)*, i8**, i8**)* nonnull @sk_X509_POLICY_NODE_call_cmp_func) #4
  %15 = icmp eq i32 %14, 0
  br i1 %15, label %20, label %16

16:                                               ; preds = %2
  %17 = load i64, i64* %5, align 8
  %18 = call i8* @sk_value(%struct.stack_st* %13, i64 %17) #4
  %19 = bitcast i8* %18 to %struct.X509_POLICY_NODE_st*
  br label %20

20:                                               ; preds = %2, %16
  %21 = phi %struct.X509_POLICY_NODE_st* [ %19, %16 ], [ null, %2 ]
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %10) #4
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %7) #4
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %6) #4
  ret %struct.X509_POLICY_NODE_st* %21
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nounwind ssp uwtable
define hidden %struct.X509_POLICY_NODE_st* @level_find_node(%struct.X509_POLICY_LEVEL_st* nocapture readonly, %struct.X509_POLICY_NODE_st* readnone, %struct.asn1_object_st*) local_unnamed_addr #0 {
  %4 = getelementptr inbounds %struct.X509_POLICY_LEVEL_st, %struct.X509_POLICY_LEVEL_st* %0, i64 0, i32 1
  %5 = bitcast %struct.stack_st_X509_POLICY_NODE** %4 to %struct.stack_st**
  %6 = load %struct.stack_st*, %struct.stack_st** %5, align 8
  %7 = tail call i64 @sk_num(%struct.stack_st* %6) #4
  %8 = icmp eq i64 %7, 0
  br i1 %8, label %31, label %9

9:                                                ; preds = %3, %24
  %10 = phi i64 [ %25, %24 ], [ 0, %3 ]
  %11 = load %struct.stack_st*, %struct.stack_st** %5, align 8
  %12 = tail call i8* @sk_value(%struct.stack_st* %11, i64 %10) #4
  %13 = getelementptr inbounds i8, i8* %12, i64 8
  %14 = bitcast i8* %13 to %struct.X509_POLICY_NODE_st**
  %15 = load %struct.X509_POLICY_NODE_st*, %struct.X509_POLICY_NODE_st** %14, align 8
  %16 = icmp eq %struct.X509_POLICY_NODE_st* %15, %1
  br i1 %16, label %17, label %24

17:                                               ; preds = %9
  %18 = bitcast i8* %12 to %struct.X509_POLICY_DATA_st**
  %19 = load %struct.X509_POLICY_DATA_st*, %struct.X509_POLICY_DATA_st** %18, align 8
  %20 = getelementptr inbounds %struct.X509_POLICY_DATA_st, %struct.X509_POLICY_DATA_st* %19, i64 0, i32 1
  %21 = load %struct.asn1_object_st*, %struct.asn1_object_st** %20, align 8
  %22 = tail call i32 @OBJ_cmp(%struct.asn1_object_st* %21, %struct.asn1_object_st* %2) #4
  %23 = icmp eq i32 %22, 0
  br i1 %23, label %29, label %24

24:                                               ; preds = %17, %9
  %25 = add nuw i64 %10, 1
  %26 = load %struct.stack_st*, %struct.stack_st** %5, align 8
  %27 = tail call i64 @sk_num(%struct.stack_st* %26) #4
  %28 = icmp ult i64 %25, %27
  br i1 %28, label %9, label %31

29:                                               ; preds = %17
  %30 = bitcast i8* %12 to %struct.X509_POLICY_NODE_st*
  br label %31

31:                                               ; preds = %24, %3, %29
  %32 = phi %struct.X509_POLICY_NODE_st* [ %30, %29 ], [ null, %3 ], [ null, %24 ]
  ret %struct.X509_POLICY_NODE_st* %32
}

declare i32 @OBJ_cmp(%struct.asn1_object_st*, %struct.asn1_object_st*) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden %struct.X509_POLICY_NODE_st* @level_add_node(%struct.X509_POLICY_LEVEL_st*, %struct.X509_POLICY_DATA_st*, %struct.X509_POLICY_NODE_st*, %struct.X509_POLICY_TREE_st*) local_unnamed_addr #0 {
  %5 = tail call i8* @OPENSSL_malloc(i64 24) #4
  %6 = bitcast i8* %5 to %struct.X509_POLICY_NODE_st*
  %7 = icmp eq i8* %5, null
  br i1 %7, label %64, label %8

8:                                                ; preds = %4
  %9 = bitcast i8* %5 to %struct.X509_POLICY_DATA_st**
  store %struct.X509_POLICY_DATA_st* %1, %struct.X509_POLICY_DATA_st** %9, align 8
  %10 = getelementptr inbounds i8, i8* %5, i64 8
  %11 = bitcast i8* %10 to %struct.X509_POLICY_NODE_st**
  store %struct.X509_POLICY_NODE_st* %2, %struct.X509_POLICY_NODE_st** %11, align 8
  %12 = getelementptr inbounds i8, i8* %5, i64 16
  %13 = bitcast i8* %12 to i32*
  store i32 0, i32* %13, align 8
  %14 = icmp eq %struct.X509_POLICY_LEVEL_st* %0, null
  br i1 %14, label %40, label %15

15:                                               ; preds = %8
  %16 = getelementptr inbounds %struct.X509_POLICY_DATA_st, %struct.X509_POLICY_DATA_st* %1, i64 0, i32 1
  %17 = load %struct.asn1_object_st*, %struct.asn1_object_st** %16, align 8
  %18 = tail call i32 @OBJ_obj2nid(%struct.asn1_object_st* %17) #4
  %19 = icmp eq i32 %18, 746
  br i1 %19, label %20, label %26

20:                                               ; preds = %15
  %21 = getelementptr inbounds %struct.X509_POLICY_LEVEL_st, %struct.X509_POLICY_LEVEL_st* %0, i64 0, i32 2
  %22 = load %struct.X509_POLICY_NODE_st*, %struct.X509_POLICY_NODE_st** %21, align 8
  %23 = icmp eq %struct.X509_POLICY_NODE_st* %22, null
  br i1 %23, label %24, label %63

24:                                               ; preds = %20
  %25 = bitcast %struct.X509_POLICY_NODE_st** %21 to i8**
  store i8* %5, i8** %25, align 8
  br label %40

26:                                               ; preds = %15
  %27 = getelementptr inbounds %struct.X509_POLICY_LEVEL_st, %struct.X509_POLICY_LEVEL_st* %0, i64 0, i32 1
  %28 = load %struct.stack_st_X509_POLICY_NODE*, %struct.stack_st_X509_POLICY_NODE** %27, align 8
  %29 = icmp eq %struct.stack_st_X509_POLICY_NODE* %28, null
  br i1 %29, label %30, label %35

30:                                               ; preds = %26
  %31 = tail call %struct.stack_st* @sk_new(i32 (i8**, i8**)* bitcast (i32 (%struct.X509_POLICY_NODE_st**, %struct.X509_POLICY_NODE_st**)* @node_cmp to i32 (i8**, i8**)*)) #4
  %32 = bitcast %struct.stack_st* %31 to %struct.stack_st_X509_POLICY_NODE*
  %33 = bitcast %struct.stack_st_X509_POLICY_NODE** %27 to %struct.stack_st**
  store %struct.stack_st* %31, %struct.stack_st** %33, align 8
  %34 = icmp eq %struct.stack_st* %31, null
  br i1 %34, label %63, label %35

35:                                               ; preds = %26, %30
  %36 = phi %struct.stack_st_X509_POLICY_NODE* [ %32, %30 ], [ %28, %26 ]
  %37 = bitcast %struct.stack_st_X509_POLICY_NODE* %36 to %struct.stack_st*
  %38 = tail call i64 @sk_push(%struct.stack_st* %37, i8* nonnull %5) #4
  %39 = icmp eq i64 %38, 0
  br i1 %39, label %63, label %40

40:                                               ; preds = %35, %8, %24
  %41 = icmp eq %struct.X509_POLICY_TREE_st* %3, null
  br i1 %41, label %57, label %42

42:                                               ; preds = %40
  %43 = getelementptr inbounds %struct.X509_POLICY_TREE_st, %struct.X509_POLICY_TREE_st* %3, i64 0, i32 2
  %44 = load %struct.stack_st_X509_POLICY_DATA*, %struct.stack_st_X509_POLICY_DATA** %43, align 8
  %45 = icmp eq %struct.stack_st_X509_POLICY_DATA* %44, null
  br i1 %45, label %46, label %51

46:                                               ; preds = %42
  %47 = tail call %struct.stack_st* @sk_new_null() #4
  %48 = bitcast %struct.stack_st* %47 to %struct.stack_st_X509_POLICY_DATA*
  %49 = bitcast %struct.stack_st_X509_POLICY_DATA** %43 to %struct.stack_st**
  store %struct.stack_st* %47, %struct.stack_st** %49, align 8
  %50 = icmp eq %struct.stack_st* %47, null
  br i1 %50, label %63, label %51

51:                                               ; preds = %42, %46
  %52 = phi %struct.stack_st_X509_POLICY_DATA* [ %48, %46 ], [ %44, %42 ]
  %53 = bitcast %struct.stack_st_X509_POLICY_DATA* %52 to %struct.stack_st*
  %54 = bitcast %struct.X509_POLICY_DATA_st* %1 to i8*
  %55 = tail call i64 @sk_push(%struct.stack_st* %53, i8* %54) #4
  %56 = icmp eq i64 %55, 0
  br i1 %56, label %63, label %57

57:                                               ; preds = %51, %40
  %58 = icmp eq %struct.X509_POLICY_NODE_st* %2, null
  br i1 %58, label %64, label %59

59:                                               ; preds = %57
  %60 = getelementptr inbounds %struct.X509_POLICY_NODE_st, %struct.X509_POLICY_NODE_st* %2, i64 0, i32 2
  %61 = load i32, i32* %60, align 8
  %62 = add nsw i32 %61, 1
  store i32 %62, i32* %60, align 8
  br label %64

63:                                               ; preds = %20, %35, %30, %51, %46
  tail call void @OPENSSL_free(i8* nonnull %5) #4
  br label %64

64:                                               ; preds = %59, %57, %4, %63
  %65 = phi %struct.X509_POLICY_NODE_st* [ null, %63 ], [ null, %4 ], [ %6, %57 ], [ %6, %59 ]
  ret %struct.X509_POLICY_NODE_st* %65
}

declare i8* @OPENSSL_malloc(i64) local_unnamed_addr #2

declare i32 @OBJ_obj2nid(%struct.asn1_object_st*) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden void @policy_node_free(%struct.X509_POLICY_NODE_st*) local_unnamed_addr #0 {
  %2 = bitcast %struct.X509_POLICY_NODE_st* %0 to i8*
  tail call void @OPENSSL_free(i8* %2) #4
  ret void
}

declare void @OPENSSL_free(i8*) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden i32 @policy_node_match(%struct.X509_POLICY_LEVEL_st* nocapture readonly, %struct.X509_POLICY_NODE_st* nocapture readonly, %struct.asn1_object_st*) local_unnamed_addr #0 {
  %4 = getelementptr inbounds %struct.X509_POLICY_NODE_st, %struct.X509_POLICY_NODE_st* %1, i64 0, i32 0
  %5 = load %struct.X509_POLICY_DATA_st*, %struct.X509_POLICY_DATA_st** %4, align 8
  %6 = getelementptr inbounds %struct.X509_POLICY_LEVEL_st, %struct.X509_POLICY_LEVEL_st* %0, i64 0, i32 3
  %7 = load i32, i32* %6, align 8
  %8 = and i32 %7, 1024
  %9 = icmp eq i32 %8, 0
  br i1 %9, label %10, label %21

10:                                               ; preds = %3
  %11 = getelementptr inbounds %struct.X509_POLICY_DATA_st, %struct.X509_POLICY_DATA_st* %5, i64 0, i32 0
  %12 = load i32, i32* %11, align 8
  %13 = and i32 %12, 3
  %14 = icmp eq i32 %13, 0
  br i1 %14, label %21, label %15

15:                                               ; preds = %10
  %16 = getelementptr inbounds %struct.X509_POLICY_DATA_st, %struct.X509_POLICY_DATA_st* %5, i64 0, i32 3
  %17 = bitcast %struct.stack_st_ASN1_OBJECT** %16 to %struct.stack_st**
  %18 = load %struct.stack_st*, %struct.stack_st** %17, align 8
  %19 = tail call i64 @sk_num(%struct.stack_st* %18) #4
  %20 = icmp eq i64 %19, 0
  br i1 %20, label %39, label %31

21:                                               ; preds = %10, %3
  %22 = getelementptr inbounds %struct.X509_POLICY_DATA_st, %struct.X509_POLICY_DATA_st* %5, i64 0, i32 1
  %23 = load %struct.asn1_object_st*, %struct.asn1_object_st** %22, align 8
  %24 = tail call i32 @OBJ_cmp(%struct.asn1_object_st* %23, %struct.asn1_object_st* %2) #4
  %25 = icmp eq i32 %24, 0
  %26 = zext i1 %25 to i32
  br label %39

27:                                               ; preds = %31
  %28 = load %struct.stack_st*, %struct.stack_st** %17, align 8
  %29 = tail call i64 @sk_num(%struct.stack_st* %28) #4
  %30 = icmp ult i64 %38, %29
  br i1 %30, label %31, label %39

31:                                               ; preds = %15, %27
  %32 = phi i64 [ %38, %27 ], [ 0, %15 ]
  %33 = load %struct.stack_st*, %struct.stack_st** %17, align 8
  %34 = tail call i8* @sk_value(%struct.stack_st* %33, i64 %32) #4
  %35 = bitcast i8* %34 to %struct.asn1_object_st*
  %36 = tail call i32 @OBJ_cmp(%struct.asn1_object_st* %35, %struct.asn1_object_st* %2) #4
  %37 = icmp eq i32 %36, 0
  %38 = add nuw i64 %32, 1
  br i1 %37, label %39, label %27

39:                                               ; preds = %31, %27, %15, %21
  %40 = phi i32 [ %26, %21 ], [ 0, %15 ], [ 1, %31 ], [ 0, %27 ]
  ret i32 %40
}

declare %struct.stack_st* @sk_new(i32 (i8**, i8**)*) local_unnamed_addr #2

declare void @sk_sort(%struct.stack_st*) local_unnamed_addr #2

declare i32 @sk_find(%struct.stack_st*, i64*, i8*, i32 (i32 (i8**, i8**)*, i8**, i8**)*) local_unnamed_addr #2

; Function Attrs: inlinehint nounwind ssp uwtable
define internal i32 @sk_X509_POLICY_NODE_call_cmp_func(i32 (i8**, i8**)* nocapture, i8** nocapture readonly, i8** nocapture readonly) #3 {
  %4 = alloca %struct.X509_POLICY_NODE_st*, align 8
  %5 = alloca %struct.X509_POLICY_NODE_st*, align 8
  %6 = bitcast %struct.X509_POLICY_NODE_st** %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %6) #4
  %7 = bitcast i8** %1 to i64*
  %8 = load i64, i64* %7, align 8
  %9 = bitcast %struct.X509_POLICY_NODE_st** %4 to i64*
  store i64 %8, i64* %9, align 8
  %10 = bitcast %struct.X509_POLICY_NODE_st** %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %10) #4
  %11 = bitcast i8** %2 to i64*
  %12 = load i64, i64* %11, align 8
  %13 = bitcast %struct.X509_POLICY_NODE_st** %5 to i64*
  store i64 %12, i64* %13, align 8
  %14 = bitcast i32 (i8**, i8**)* %0 to i32 (%struct.X509_POLICY_NODE_st**, %struct.X509_POLICY_NODE_st**)*
  %15 = call i32 %14(%struct.X509_POLICY_NODE_st** nonnull %4, %struct.X509_POLICY_NODE_st** nonnull %5) #4
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %10) #4
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %6) #4
  ret i32 %15
}

declare i8* @sk_value(%struct.stack_st*, i64) local_unnamed_addr #2

declare i64 @sk_num(%struct.stack_st*) local_unnamed_addr #2

declare i64 @sk_push(%struct.stack_st*, i8*) local_unnamed_addr #2

declare %struct.stack_st* @sk_new_null() local_unnamed_addr #2

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { inlinehint nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
