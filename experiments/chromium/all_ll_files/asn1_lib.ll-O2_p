; ModuleID = '../../third_party/boringssl/src/crypto/asn1/asn1_lib.c'
source_filename = "../../third_party/boringssl/src/crypto/asn1/asn1_lib.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.asn1_string_st = type { i32, i32, i8*, i64 }

@.str = private unnamed_addr constant [55 x i8] c"../../third_party/boringssl/src/crypto/asn1/asn1_lib.c\00", align 1

; Function Attrs: nounwind ssp uwtable
define hidden i32 @ASN1_get_object(i8** nocapture, i64* nocapture, i32* nocapture, i32* nocapture, i64) local_unnamed_addr #0 {
  %6 = bitcast i8** %0 to i64*
  %7 = icmp eq i64 %4, 0
  br i1 %7, label %137, label %8

8:                                                ; preds = %5
  %9 = load i8*, i8** %0, align 8
  %10 = load i8, i8* %9, align 1
  %11 = zext i8 %10 to i32
  %12 = and i32 %11, 32
  %13 = and i32 %11, 192
  %14 = and i32 %11, 31
  %15 = icmp eq i32 %14, 31
  %16 = getelementptr inbounds i8, i8* %9, i64 1
  %17 = add nsw i64 %4, -1
  %18 = icmp eq i64 %17, 0
  br i1 %15, label %19, label %40

19:                                               ; preds = %8
  br i1 %18, label %137, label %20

20:                                               ; preds = %19, %31
  %21 = phi i8* [ %27, %31 ], [ %16, %19 ]
  %22 = phi i64 [ %30, %31 ], [ 0, %19 ]
  %23 = phi i64 [ %32, %31 ], [ %17, %19 ]
  %24 = load i8, i8* %21, align 1
  %25 = icmp slt i8 %24, 0
  %26 = shl i64 %22, 7
  %27 = getelementptr inbounds i8, i8* %21, i64 1
  %28 = and i8 %24, 127
  %29 = zext i8 %28 to i64
  %30 = or i64 %26, %29
  br i1 %25, label %31, label %36

31:                                               ; preds = %20
  %32 = add nsw i64 %23, -1
  %33 = icmp eq i64 %32, 0
  %34 = icmp sgt i64 %30, 16777215
  %35 = or i1 %33, %34
  br i1 %35, label %137, label %20

36:                                               ; preds = %20
  %37 = trunc i64 %30 to i32
  %38 = add nsw i64 %23, -1
  %39 = icmp eq i64 %38, 0
  br i1 %39, label %137, label %41

40:                                               ; preds = %8
  br i1 %18, label %137, label %45

41:                                               ; preds = %36
  %42 = icmp eq i32 %13, 0
  %43 = icmp sgt i32 %37, 255
  %44 = and i1 %42, %43
  br i1 %44, label %137, label %45

45:                                               ; preds = %40, %41
  %46 = phi i64 [ %38, %41 ], [ %17, %40 ]
  %47 = phi i32 [ %37, %41 ], [ %14, %40 ]
  %48 = phi i8* [ %27, %41 ], [ %16, %40 ]
  store i32 %47, i32* %2, align 4
  store i32 %13, i32* %3, align 4
  %49 = icmp slt i64 %46, 1
  br i1 %49, label %137, label %50

50:                                               ; preds = %45
  %51 = load i8, i8* %48, align 1
  %52 = icmp eq i8 %51, -128
  br i1 %52, label %120, label %53

53:                                               ; preds = %50
  %54 = and i8 %51, 127
  %55 = zext i8 %54 to i64
  %56 = getelementptr inbounds i8, i8* %48, i64 1
  %57 = icmp slt i8 %51, 0
  br i1 %57, label %58, label %117

58:                                               ; preds = %53
  %59 = icmp ult i8 %54, 9
  %60 = icmp sgt i64 %46, %55
  %61 = and i1 %59, %60
  br i1 %61, label %62, label %137

62:                                               ; preds = %58
  %63 = icmp eq i8 %54, 0
  br i1 %63, label %117, label %64

64:                                               ; preds = %62
  %65 = add nsw i64 %55, -1
  %66 = and i64 %55, 3
  %67 = icmp ult i64 %65, 3
  br i1 %67, label %96, label %68

68:                                               ; preds = %64
  %69 = sub nsw i64 %55, %66
  br label %70

70:                                               ; preds = %70, %68
  %71 = phi i64 [ 0, %68 ], [ %93, %70 ]
  %72 = phi i8* [ %56, %68 ], [ %90, %70 ]
  %73 = phi i64 [ %69, %68 ], [ %94, %70 ]
  %74 = shl i64 %71, 8
  %75 = getelementptr inbounds i8, i8* %72, i64 1
  %76 = load i8, i8* %72, align 1
  %77 = zext i8 %76 to i64
  %78 = or i64 %74, %77
  %79 = shl i64 %78, 8
  %80 = getelementptr inbounds i8, i8* %72, i64 2
  %81 = load i8, i8* %75, align 1
  %82 = zext i8 %81 to i64
  %83 = or i64 %79, %82
  %84 = shl i64 %83, 8
  %85 = getelementptr inbounds i8, i8* %72, i64 3
  %86 = load i8, i8* %80, align 1
  %87 = zext i8 %86 to i64
  %88 = or i64 %84, %87
  %89 = shl i64 %88, 8
  %90 = getelementptr inbounds i8, i8* %72, i64 4
  %91 = load i8, i8* %85, align 1
  %92 = zext i8 %91 to i64
  %93 = or i64 %89, %92
  %94 = add i64 %73, -4
  %95 = icmp eq i64 %94, 0
  br i1 %95, label %96, label %70

96:                                               ; preds = %70, %64
  %97 = phi i64 [ undef, %64 ], [ %93, %70 ]
  %98 = phi i64 [ 0, %64 ], [ %93, %70 ]
  %99 = phi i8* [ %56, %64 ], [ %90, %70 ]
  %100 = icmp eq i64 %66, 0
  br i1 %100, label %112, label %101

101:                                              ; preds = %96, %101
  %102 = phi i64 [ %109, %101 ], [ %98, %96 ]
  %103 = phi i8* [ %106, %101 ], [ %99, %96 ]
  %104 = phi i64 [ %110, %101 ], [ %66, %96 ]
  %105 = shl i64 %102, 8
  %106 = getelementptr inbounds i8, i8* %103, i64 1
  %107 = load i8, i8* %103, align 1
  %108 = zext i8 %107 to i64
  %109 = or i64 %105, %108
  %110 = add i64 %104, -1
  %111 = icmp eq i64 %110, 0
  br i1 %111, label %112, label %101, !llvm.loop !2

112:                                              ; preds = %101, %96
  %113 = phi i64 [ %97, %96 ], [ %109, %101 ]
  %114 = add nuw nsw i64 %55, 1
  %115 = getelementptr i8, i8* %48, i64 %114
  %116 = icmp ugt i64 %113, 1073741823
  br i1 %116, label %137, label %117

117:                                              ; preds = %62, %112, %53
  %118 = phi i64 [ 0, %62 ], [ %55, %53 ], [ %113, %112 ]
  %119 = phi i8* [ %56, %62 ], [ %56, %53 ], [ %115, %112 ]
  store i64 %118, i64* %1, align 8
  br label %123

120:                                              ; preds = %50
  %121 = getelementptr inbounds i8, i8* %48, i64 1
  store i64 0, i64* %1, align 8
  %122 = icmp eq i32 %12, 0
  br i1 %122, label %137, label %123

123:                                              ; preds = %117, %120
  %124 = phi i64 [ %118, %117 ], [ 0, %120 ]
  %125 = phi i8* [ %119, %117 ], [ %121, %120 ]
  %126 = phi i32 [ 0, %117 ], [ 1, %120 ]
  %127 = ptrtoint i8* %125 to i64
  %128 = load i64, i64* %6, align 8
  %129 = sub i64 %4, %127
  %130 = add i64 %129, %128
  %131 = icmp sgt i64 %124, %130
  br i1 %131, label %132, label %134

132:                                              ; preds = %123
  tail call void @ERR_put_error(i32 12, i32 0, i32 177, i8* getelementptr inbounds ([55 x i8], [55 x i8]* @.str, i64 0, i64 0), i32 168) #9
  %133 = or i32 %12, 128
  br label %134

134:                                              ; preds = %132, %123
  %135 = phi i32 [ %133, %132 ], [ %12, %123 ]
  store i64 %127, i64* %6, align 8
  %136 = or i32 %135, %126
  br label %138

137:                                              ; preds = %31, %112, %58, %45, %120, %5, %41, %40, %36, %19
  tail call void @ERR_put_error(i32 12, i32 0, i32 123, i8* getelementptr inbounds ([55 x i8], [55 x i8]* @.str, i64 0, i64 0), i32 178) #9
  br label %138

138:                                              ; preds = %137, %134
  %139 = phi i32 [ 128, %137 ], [ %136, %134 ]
  ret i32 %139
}

declare void @ERR_put_error(i32, i32, i32, i8*, i32) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden void @ASN1_put_object(i8** nocapture, i32, i32, i32, i32) local_unnamed_addr #0 {
  %6 = load i8*, i8** %0, align 8
  %7 = icmp eq i32 %1, 0
  %8 = select i1 %7, i32 0, i32 32
  %9 = and i32 %4, 192
  %10 = or i32 %9, %8
  %11 = icmp slt i32 %3, 31
  br i1 %11, label %12, label %17

12:                                               ; preds = %5
  %13 = and i32 %3, 31
  %14 = or i32 %10, %13
  %15 = trunc i32 %14 to i8
  %16 = getelementptr inbounds i8, i8* %6, i64 1
  store i8 %15, i8* %6, align 1
  br label %69

17:                                               ; preds = %5
  %18 = trunc i32 %10 to i8
  %19 = or i8 %18, 31
  store i8 %19, i8* %6, align 1
  br label %38

20:                                               ; preds = %38
  %21 = getelementptr inbounds i8, i8* %6, i64 1
  %22 = zext i32 %40 to i64
  %23 = and i64 %22, 1
  %24 = icmp eq i64 %23, 0
  br i1 %24, label %25, label %31

25:                                               ; preds = %20
  %26 = trunc i32 %3 to i8
  %27 = and i8 %26, 127
  %28 = getelementptr inbounds i8, i8* %21, i64 %22
  store i8 %27, i8* %28, align 1
  %29 = ashr i32 %3, 7
  %30 = add nsw i64 %22, -1
  br label %31

31:                                               ; preds = %25, %20
  %32 = phi i64 [ %22, %20 ], [ %30, %25 ]
  %33 = phi i32 [ %42, %20 ], [ %40, %25 ]
  %34 = phi i32 [ %3, %20 ], [ %29, %25 ]
  %35 = icmp eq i32 %40, 0
  br i1 %35, label %66, label %36

36:                                               ; preds = %31
  %37 = zext i32 %42 to i64
  br label %44

38:                                               ; preds = %38, %17
  %39 = phi i32 [ %3, %17 ], [ %41, %38 ]
  %40 = phi i32 [ 0, %17 ], [ %42, %38 ]
  %41 = lshr i32 %39, 7
  %42 = add nuw nsw i32 %40, 1
  %43 = icmp eq i32 %41, 0
  br i1 %43, label %20, label %38

44:                                               ; preds = %44, %36
  %45 = phi i64 [ %32, %36 ], [ %63, %44 ]
  %46 = phi i32 [ %33, %36 ], [ %65, %44 ]
  %47 = phi i32 [ %34, %36 ], [ %62, %44 ]
  %48 = trunc i32 %47 to i8
  %49 = and i8 %48, 127
  %50 = getelementptr inbounds i8, i8* %21, i64 %45
  %51 = icmp eq i32 %46, %42
  %52 = or i8 %48, -128
  %53 = select i1 %51, i8 %49, i8 %52
  store i8 %53, i8* %50, align 1
  %54 = lshr i32 %47, 7
  %55 = add nsw i64 %45, -1
  %56 = trunc i32 %54 to i8
  %57 = and i8 %56, 127
  %58 = getelementptr inbounds i8, i8* %6, i64 %45
  %59 = icmp eq i64 %45, %37
  %60 = or i8 %56, -128
  %61 = select i1 %59, i8 %57, i8 %60
  store i8 %61, i8* %58, align 1
  %62 = ashr i32 %47, 14
  %63 = add nsw i64 %45, -2
  %64 = icmp sgt i64 %55, 0
  %65 = trunc i64 %55 to i32
  br i1 %64, label %44, label %66

66:                                               ; preds = %44, %31
  %67 = zext i32 %42 to i64
  %68 = getelementptr inbounds i8, i8* %21, i64 %67
  br label %69

69:                                               ; preds = %66, %12
  %70 = phi i8* [ %16, %12 ], [ %68, %66 ]
  %71 = icmp eq i32 %1, 2
  br i1 %71, label %72, label %74

72:                                               ; preds = %69
  %73 = getelementptr inbounds i8, i8* %70, i64 1
  store i8 -128, i8* %70, align 1
  br label %129

74:                                               ; preds = %69
  %75 = icmp slt i32 %2, 128
  br i1 %75, label %76, label %79

76:                                               ; preds = %74
  %77 = trunc i32 %2 to i8
  %78 = getelementptr inbounds i8, i8* %70, i64 1
  store i8 %77, i8* %70, align 1
  br label %129

79:                                               ; preds = %74, %79
  %80 = phi i32 [ %82, %79 ], [ %2, %74 ]
  %81 = phi i32 [ %83, %79 ], [ 0, %74 ]
  %82 = lshr i32 %80, 8
  %83 = add nuw nsw i32 %81, 1
  %84 = icmp eq i32 %82, 0
  br i1 %84, label %85, label %79

85:                                               ; preds = %79
  %86 = trunc i32 %83 to i8
  %87 = or i8 %86, -128
  %88 = getelementptr inbounds i8, i8* %70, i64 1
  store i8 %87, i8* %70, align 1
  %89 = zext i32 %81 to i64
  %90 = add nuw nsw i64 %89, 1
  %91 = and i64 %90, 3
  %92 = icmp eq i64 %91, 0
  br i1 %92, label %103, label %93

93:                                               ; preds = %85, %93
  %94 = phi i64 [ %100, %93 ], [ %89, %85 ]
  %95 = phi i32 [ %99, %93 ], [ %2, %85 ]
  %96 = phi i64 [ %101, %93 ], [ %91, %85 ]
  %97 = trunc i32 %95 to i8
  %98 = getelementptr inbounds i8, i8* %88, i64 %94
  store i8 %97, i8* %98, align 1
  %99 = ashr i32 %95, 8
  %100 = add nsw i64 %94, -1
  %101 = add i64 %96, -1
  %102 = icmp eq i64 %101, 0
  br i1 %102, label %103, label %93, !llvm.loop !4

103:                                              ; preds = %93, %85
  %104 = phi i64 [ %89, %85 ], [ %100, %93 ]
  %105 = phi i32 [ %2, %85 ], [ %99, %93 ]
  %106 = icmp ult i32 %81, 3
  br i1 %106, label %126, label %107

107:                                              ; preds = %103, %107
  %108 = phi i64 [ %124, %107 ], [ %104, %103 ]
  %109 = phi i32 [ %123, %107 ], [ %105, %103 ]
  %110 = trunc i32 %109 to i8
  %111 = getelementptr inbounds i8, i8* %88, i64 %108
  store i8 %110, i8* %111, align 1
  %112 = lshr i32 %109, 8
  %113 = trunc i32 %112 to i8
  %114 = getelementptr inbounds i8, i8* %70, i64 %108
  store i8 %113, i8* %114, align 1
  %115 = lshr i32 %109, 16
  %116 = add nsw i64 %108, -2
  %117 = trunc i32 %115 to i8
  %118 = getelementptr inbounds i8, i8* %88, i64 %116
  store i8 %117, i8* %118, align 1
  %119 = lshr i32 %109, 24
  %120 = add nsw i64 %108, -3
  %121 = trunc i32 %119 to i8
  %122 = getelementptr inbounds i8, i8* %88, i64 %120
  store i8 %121, i8* %122, align 1
  %123 = ashr i32 %109, 31
  %124 = add nsw i64 %108, -4
  %125 = icmp sgt i64 %120, 0
  br i1 %125, label %107, label %126

126:                                              ; preds = %107, %103
  %127 = zext i32 %83 to i64
  %128 = getelementptr inbounds i8, i8* %88, i64 %127
  br label %129

129:                                              ; preds = %126, %76, %72
  %130 = phi i8* [ %73, %72 ], [ %78, %76 ], [ %128, %126 ]
  %131 = ptrtoint i8* %130 to i64
  %132 = bitcast i8** %0 to i64*
  store i64 %131, i64* %132, align 8
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden i32 @ASN1_put_eoc(i8** nocapture) local_unnamed_addr #2 {
  %2 = load i8*, i8** %0, align 8
  %3 = getelementptr inbounds i8, i8* %2, i64 1
  store i8 0, i8* %2, align 1
  %4 = getelementptr inbounds i8, i8* %2, i64 2
  store i8 0, i8* %3, align 1
  store i8* %4, i8** %0, align 8
  ret i32 2
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden i32 @ASN1_object_size(i32, i32, i32) local_unnamed_addr #3 {
  %4 = icmp slt i32 %1, 0
  br i1 %4, label %33, label %5

5:                                                ; preds = %3
  %6 = icmp sgt i32 %2, 30
  br i1 %6, label %7, label %13

7:                                                ; preds = %5, %7
  %8 = phi i32 [ %11, %7 ], [ 1, %5 ]
  %9 = phi i32 [ %10, %7 ], [ %2, %5 ]
  %10 = lshr i32 %9, 7
  %11 = add nuw nsw i32 %8, 1
  %12 = icmp eq i32 %10, 0
  br i1 %12, label %13, label %7

13:                                               ; preds = %7, %5
  %14 = phi i32 [ 1, %5 ], [ %11, %7 ]
  %15 = icmp eq i32 %0, 2
  br i1 %15, label %16, label %18

16:                                               ; preds = %13
  %17 = add nuw nsw i32 %14, 3
  br label %27

18:                                               ; preds = %13
  %19 = add nuw nsw i32 %14, 1
  %20 = icmp sgt i32 %1, 127
  br i1 %20, label %21, label %27

21:                                               ; preds = %18, %21
  %22 = phi i32 [ %24, %21 ], [ %1, %18 ]
  %23 = phi i32 [ %25, %21 ], [ %19, %18 ]
  %24 = lshr i32 %22, 8
  %25 = add nuw nsw i32 %23, 1
  %26 = icmp eq i32 %24, 0
  br i1 %26, label %27, label %21

27:                                               ; preds = %21, %18, %16
  %28 = phi i32 [ %17, %16 ], [ %19, %18 ], [ %25, %21 ]
  %29 = sub nsw i32 2147483647, %1
  %30 = icmp slt i32 %28, %29
  %31 = add nsw i32 %28, %1
  %32 = select i1 %30, i32 %31, i32 -1
  ret i32 %32

33:                                               ; preds = %3
  ret i32 -1
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @ASN1_STRING_copy(%struct.asn1_string_st* nocapture, %struct.asn1_string_st* readonly) local_unnamed_addr #0 {
  %3 = icmp eq %struct.asn1_string_st* %1, null
  br i1 %3, label %18, label %4

4:                                                ; preds = %2
  %5 = getelementptr inbounds %struct.asn1_string_st, %struct.asn1_string_st* %1, i64 0, i32 2
  %6 = load i8*, i8** %5, align 8
  %7 = getelementptr inbounds %struct.asn1_string_st, %struct.asn1_string_st* %1, i64 0, i32 0
  %8 = load i32, i32* %7, align 8
  %9 = tail call i32 @ASN1_STRING_set(%struct.asn1_string_st* %0, i8* %6, i32 %8)
  %10 = icmp eq i32 %9, 0
  br i1 %10, label %18, label %11

11:                                               ; preds = %4
  %12 = getelementptr inbounds %struct.asn1_string_st, %struct.asn1_string_st* %1, i64 0, i32 1
  %13 = load i32, i32* %12, align 4
  %14 = getelementptr inbounds %struct.asn1_string_st, %struct.asn1_string_st* %0, i64 0, i32 1
  store i32 %13, i32* %14, align 4
  %15 = getelementptr inbounds %struct.asn1_string_st, %struct.asn1_string_st* %1, i64 0, i32 3
  %16 = load i64, i64* %15, align 8
  %17 = getelementptr inbounds %struct.asn1_string_st, %struct.asn1_string_st* %0, i64 0, i32 3
  store i64 %16, i64* %17, align 8
  br label %18

18:                                               ; preds = %4, %2, %11
  %19 = phi i32 [ 1, %11 ], [ 0, %2 ], [ 0, %4 ]
  ret i32 %19
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @ASN1_STRING_set(%struct.asn1_string_st* nocapture, i8* readonly, i32) local_unnamed_addr #0 {
  %4 = icmp slt i32 %2, 0
  br i1 %4, label %5, label %10

5:                                                ; preds = %3
  %6 = icmp eq i8* %1, null
  br i1 %6, label %52, label %7

7:                                                ; preds = %5
  %8 = tail call i64 @strlen(i8* nonnull %1) #10
  %9 = trunc i64 %8 to i32
  br label %10

10:                                               ; preds = %7, %3
  %11 = phi i32 [ %9, %7 ], [ %2, %3 ]
  %12 = getelementptr inbounds %struct.asn1_string_st, %struct.asn1_string_st* %0, i64 0, i32 0
  %13 = load i32, i32* %12, align 8
  %14 = icmp sgt i32 %13, %11
  %15 = getelementptr inbounds %struct.asn1_string_st, %struct.asn1_string_st* %0, i64 0, i32 2
  %16 = load i8*, i8** %15, align 8
  br i1 %14, label %17, label %23

17:                                               ; preds = %10
  %18 = icmp eq i8* %16, null
  br i1 %18, label %19, label %40

19:                                               ; preds = %17
  %20 = getelementptr inbounds %struct.asn1_string_st, %struct.asn1_string_st* %0, i64 0, i32 2
  %21 = add nsw i32 %11, 1
  %22 = sext i32 %21 to i64
  br label %28

23:                                               ; preds = %10
  %24 = getelementptr inbounds %struct.asn1_string_st, %struct.asn1_string_st* %0, i64 0, i32 2
  %25 = icmp eq i8* %16, null
  %26 = add nsw i32 %11, 1
  %27 = sext i32 %26 to i64
  br i1 %25, label %28, label %32

28:                                               ; preds = %19, %23
  %29 = phi i64 [ %22, %19 ], [ %27, %23 ]
  %30 = phi i8** [ %20, %19 ], [ %24, %23 ]
  %31 = tail call i8* @OPENSSL_malloc(i64 %29) #9
  br label %34

32:                                               ; preds = %23
  %33 = tail call i8* @OPENSSL_realloc(i8* nonnull %16, i64 %27) #9
  br label %34

34:                                               ; preds = %32, %28
  %35 = phi i8** [ %24, %32 ], [ %30, %28 ]
  %36 = phi i8* [ %16, %32 ], [ null, %28 ]
  %37 = phi i8* [ %33, %32 ], [ %31, %28 ]
  store i8* %37, i8** %35, align 8
  %38 = icmp eq i8* %37, null
  br i1 %38, label %39, label %40

39:                                               ; preds = %34
  tail call void @ERR_put_error(i32 12, i32 0, i32 65, i8* getelementptr inbounds ([55 x i8], [55 x i8]* @.str, i64 0, i64 0), i32 357) #9
  store i8* %36, i8** %35, align 8
  br label %52

40:                                               ; preds = %34, %17
  %41 = phi i8* [ %37, %34 ], [ %16, %17 ]
  store i32 %11, i32* %12, align 8
  %42 = icmp eq i8* %1, null
  br i1 %42, label %52, label %43

43:                                               ; preds = %40
  %44 = sext i32 %11 to i64
  %45 = icmp eq i32 %11, 0
  br i1 %45, label %49, label %46

46:                                               ; preds = %43
  %47 = getelementptr inbounds %struct.asn1_string_st, %struct.asn1_string_st* %0, i64 0, i32 2
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 1 %41, i8* nonnull align 1 %1, i64 %44, i1 false) #9
  %48 = load i8*, i8** %47, align 8
  br label %49

49:                                               ; preds = %43, %46
  %50 = phi i8* [ %41, %43 ], [ %48, %46 ]
  %51 = getelementptr inbounds i8, i8* %50, i64 %44
  store i8 0, i8* %51, align 1
  br label %52

52:                                               ; preds = %49, %40, %5, %39
  %53 = phi i32 [ 0, %39 ], [ 0, %5 ], [ 1, %40 ], [ 1, %49 ]
  ret i32 %53
}

; Function Attrs: nounwind ssp uwtable
define hidden %struct.asn1_string_st* @ASN1_STRING_dup(%struct.asn1_string_st* readonly) local_unnamed_addr #0 {
  %2 = icmp eq %struct.asn1_string_st* %0, null
  br i1 %2, label %29, label %3

3:                                                ; preds = %1
  %4 = tail call i8* @OPENSSL_malloc(i64 24) #9
  %5 = icmp eq i8* %4, null
  br i1 %5, label %6, label %7

6:                                                ; preds = %3
  tail call void @ERR_put_error(i32 12, i32 0, i32 65, i8* getelementptr inbounds ([55 x i8], [55 x i8]* @.str, i64 0, i64 0), i32 389) #9
  br label %29

7:                                                ; preds = %3
  %8 = bitcast i8* %4 to %struct.asn1_string_st*
  %9 = bitcast i8* %4 to i32*
  store i32 0, i32* %9, align 8
  %10 = getelementptr inbounds i8, i8* %4, i64 4
  %11 = bitcast i8* %10 to i32*
  store i32 4, i32* %11, align 4
  %12 = getelementptr inbounds i8, i8* %4, i64 8
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %12, i8 0, i64 16, i1 false) #9
  %13 = getelementptr inbounds %struct.asn1_string_st, %struct.asn1_string_st* %0, i64 0, i32 2
  %14 = load i8*, i8** %13, align 8
  %15 = getelementptr inbounds %struct.asn1_string_st, %struct.asn1_string_st* %0, i64 0, i32 0
  %16 = load i32, i32* %15, align 8
  %17 = tail call i32 @ASN1_STRING_set(%struct.asn1_string_st* nonnull %8, i8* %14, i32 %16) #9
  %18 = icmp eq i32 %17, 0
  br i1 %18, label %26, label %19

19:                                               ; preds = %7
  %20 = getelementptr inbounds %struct.asn1_string_st, %struct.asn1_string_st* %0, i64 0, i32 1
  %21 = load i32, i32* %20, align 4
  store i32 %21, i32* %11, align 4
  %22 = getelementptr inbounds %struct.asn1_string_st, %struct.asn1_string_st* %0, i64 0, i32 3
  %23 = load i64, i64* %22, align 8
  %24 = getelementptr inbounds i8, i8* %4, i64 16
  %25 = bitcast i8* %24 to i64*
  store i64 %23, i64* %25, align 8
  br label %29

26:                                               ; preds = %7
  %27 = bitcast i8* %12 to i8**
  %28 = load i8*, i8** %27, align 8
  tail call void @OPENSSL_free(i8* %28) #9
  tail call void @OPENSSL_free(i8* nonnull %4) #9
  br label %29

29:                                               ; preds = %19, %6, %1, %26
  %30 = phi %struct.asn1_string_st* [ null, %26 ], [ null, %1 ], [ %8, %19 ], [ null, %6 ]
  ret %struct.asn1_string_st* %30
}

; Function Attrs: nounwind ssp uwtable
define hidden %struct.asn1_string_st* @ASN1_STRING_new() local_unnamed_addr #0 {
  %1 = tail call i8* @OPENSSL_malloc(i64 24) #9
  %2 = icmp eq i8* %1, null
  br i1 %2, label %3, label %4

3:                                                ; preds = %0
  tail call void @ERR_put_error(i32 12, i32 0, i32 65, i8* getelementptr inbounds ([55 x i8], [55 x i8]* @.str, i64 0, i64 0), i32 389) #9
  br label %10

4:                                                ; preds = %0
  %5 = bitcast i8* %1 to %struct.asn1_string_st*
  %6 = bitcast i8* %1 to i32*
  store i32 0, i32* %6, align 8
  %7 = getelementptr inbounds i8, i8* %1, i64 4
  %8 = bitcast i8* %7 to i32*
  store i32 4, i32* %8, align 4
  %9 = getelementptr inbounds i8, i8* %1, i64 8
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %9, i8 0, i64 16, i1 false) #9
  br label %10

10:                                               ; preds = %3, %4
  %11 = phi %struct.asn1_string_st* [ null, %3 ], [ %5, %4 ]
  ret %struct.asn1_string_st* %11
}

; Function Attrs: nounwind ssp uwtable
define hidden void @ASN1_STRING_free(%struct.asn1_string_st*) local_unnamed_addr #0 {
  %2 = icmp eq %struct.asn1_string_st* %0, null
  br i1 %2, label %7, label %3

3:                                                ; preds = %1
  %4 = getelementptr inbounds %struct.asn1_string_st, %struct.asn1_string_st* %0, i64 0, i32 2
  %5 = load i8*, i8** %4, align 8
  tail call void @OPENSSL_free(i8* %5) #9
  %6 = bitcast %struct.asn1_string_st* %0 to i8*
  tail call void @OPENSSL_free(i8* nonnull %6) #9
  br label %7

7:                                                ; preds = %1, %3
  ret void
}

; Function Attrs: argmemonly nofree nounwind readonly
declare i64 @strlen(i8* nocapture) local_unnamed_addr #4

declare i8* @OPENSSL_malloc(i64) local_unnamed_addr #1

declare i8* @OPENSSL_realloc(i8*, i64) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden void @ASN1_STRING_set0(%struct.asn1_string_st* nocapture, i8*, i32) local_unnamed_addr #0 {
  %4 = getelementptr inbounds %struct.asn1_string_st, %struct.asn1_string_st* %0, i64 0, i32 2
  %5 = load i8*, i8** %4, align 8
  tail call void @OPENSSL_free(i8* %5) #9
  store i8* %1, i8** %4, align 8
  %6 = getelementptr inbounds %struct.asn1_string_st, %struct.asn1_string_st* %0, i64 0, i32 0
  store i32 %2, i32* %6, align 8
  ret void
}

declare void @OPENSSL_free(i8*) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden %struct.asn1_string_st* @ASN1_STRING_type_new(i32) local_unnamed_addr #0 {
  %2 = tail call i8* @OPENSSL_malloc(i64 24) #9
  %3 = icmp eq i8* %2, null
  br i1 %3, label %4, label %5

4:                                                ; preds = %1
  tail call void @ERR_put_error(i32 12, i32 0, i32 65, i8* getelementptr inbounds ([55 x i8], [55 x i8]* @.str, i64 0, i64 0), i32 389) #9
  br label %11

5:                                                ; preds = %1
  %6 = bitcast i8* %2 to %struct.asn1_string_st*
  %7 = bitcast i8* %2 to i32*
  store i32 0, i32* %7, align 8
  %8 = getelementptr inbounds i8, i8* %2, i64 4
  %9 = bitcast i8* %8 to i32*
  store i32 %0, i32* %9, align 4
  %10 = getelementptr inbounds i8, i8* %2, i64 8
  call void @llvm.memset.p0i8.i64(i8* align 8 %10, i8 0, i64 16, i1 false)
  br label %11

11:                                               ; preds = %5, %4
  %12 = phi %struct.asn1_string_st* [ null, %4 ], [ %6, %5 ]
  ret %struct.asn1_string_st* %12
}

; Function Attrs: nounwind readonly ssp uwtable
define hidden i32 @ASN1_STRING_cmp(%struct.asn1_string_st* nocapture readonly, %struct.asn1_string_st* nocapture readonly) local_unnamed_addr #5 {
  %3 = getelementptr inbounds %struct.asn1_string_st, %struct.asn1_string_st* %0, i64 0, i32 0
  %4 = load i32, i32* %3, align 8
  %5 = getelementptr inbounds %struct.asn1_string_st, %struct.asn1_string_st* %1, i64 0, i32 0
  %6 = load i32, i32* %5, align 8
  %7 = sub nsw i32 %4, %6
  %8 = icmp eq i32 %7, 0
  br i1 %8, label %9, label %25

9:                                                ; preds = %2
  %10 = icmp eq i32 %4, 0
  br i1 %10, label %19, label %11

11:                                               ; preds = %9
  %12 = sext i32 %4 to i64
  %13 = getelementptr inbounds %struct.asn1_string_st, %struct.asn1_string_st* %1, i64 0, i32 2
  %14 = load i8*, i8** %13, align 8
  %15 = getelementptr inbounds %struct.asn1_string_st, %struct.asn1_string_st* %0, i64 0, i32 2
  %16 = load i8*, i8** %15, align 8
  %17 = tail call i32 @memcmp(i8* %16, i8* %14, i64 %12) #10
  %18 = icmp eq i32 %17, 0
  br i1 %18, label %19, label %25

19:                                               ; preds = %9, %11
  %20 = getelementptr inbounds %struct.asn1_string_st, %struct.asn1_string_st* %0, i64 0, i32 1
  %21 = load i32, i32* %20, align 4
  %22 = getelementptr inbounds %struct.asn1_string_st, %struct.asn1_string_st* %1, i64 0, i32 1
  %23 = load i32, i32* %22, align 4
  %24 = sub nsw i32 %21, %23
  br label %25

25:                                               ; preds = %2, %11, %19
  %26 = phi i32 [ %24, %19 ], [ %17, %11 ], [ %7, %2 ]
  ret i32 %26
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden i32 @ASN1_STRING_length(%struct.asn1_string_st* nocapture readonly) local_unnamed_addr #6 {
  %2 = getelementptr inbounds %struct.asn1_string_st, %struct.asn1_string_st* %0, i64 0, i32 0
  %3 = load i32, i32* %2, align 8
  ret i32 %3
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden i32 @ASN1_STRING_type(%struct.asn1_string_st* nocapture readonly) local_unnamed_addr #6 {
  %2 = getelementptr inbounds %struct.asn1_string_st, %struct.asn1_string_st* %0, i64 0, i32 1
  %3 = load i32, i32* %2, align 4
  ret i32 %3
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden i8* @ASN1_STRING_data(%struct.asn1_string_st* nocapture readonly) local_unnamed_addr #6 {
  %2 = getelementptr inbounds %struct.asn1_string_st, %struct.asn1_string_st* %0, i64 0, i32 2
  %3 = load i8*, i8** %2, align 8
  ret i8* %3
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden i8* @ASN1_STRING_get0_data(%struct.asn1_string_st* nocapture readonly) local_unnamed_addr #6 {
  %2 = getelementptr inbounds %struct.asn1_string_st, %struct.asn1_string_st* %0, i64 0, i32 2
  %3 = load i8*, i8** %2, align 8
  ret i8* %3
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #7

; Function Attrs: nofree nounwind readonly
declare i32 @memcmp(i8* nocapture, i8* nocapture, i64) local_unnamed_addr #8

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #7

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nofree norecurse nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { norecurse nounwind readnone ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { argmemonly nofree nounwind readonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind readonly ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { norecurse nounwind readonly ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { argmemonly nounwind }
attributes #8 = { nofree nounwind readonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #9 = { nounwind }
attributes #10 = { nounwind readonly }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = distinct !{!2, !3}
!3 = !{!"llvm.loop.unroll.disable"}
!4 = distinct !{!4, !3}
