; ModuleID = '../../ui/gl/gl_context_stub.cc'
source_filename = "../../ui/gl/gl_context_stub.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.base::ThreadLocalPointer" = type { %"class.base::ThreadLocalStorage::Slot" }
%"class.base::ThreadLocalStorage::Slot" = type { i32, i32 }
%"class.gl::GLContextStub" = type <{ %"class.gl::GLContextReal.base", i8, [6 x i8], %"class.std::__1::basic_string", i32, [4 x i8] }>
%"class.gl::GLContextReal.base" = type <{ %"class.gl::GLContext.base", [7 x i8], %"class.std::__1::unique_ptr.67", %"class.std::__1::basic_string", %"class.base::internal::flat_tree", i8 }>
%"class.gl::GLContext.base" = type <{ i32 (...)**, %"class.base::RefCounted", [4 x i8], %"class.base::SupportsWeakPtr", %"struct.gl::GLWorkarounds", [6 x i8], %"class.std::__1::basic_string", i8, i8, [6 x i8], %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr.10", %"class.std::__1::unique_ptr.34", %"class.gl::RealGLApi"*, %class.scoped_refptr.51, %"class.gl::GLContext"*, i8, [7 x i8], %"class.std::__1::unique_ptr.61", %"class.std::__1::unique_ptr.45", i8 }>
%"class.base::RefCounted" = type { %"class.base::subtle::RefCountedBase" }
%"class.base::subtle::RefCountedBase" = type { i32 }
%"class.base::SupportsWeakPtr" = type { %"class.base::internal::WeakReferenceOwner" }
%"class.base::internal::WeakReferenceOwner" = type { %class.scoped_refptr }
%class.scoped_refptr = type { %"class.base::internal::WeakReference::Flag"* }
%"class.base::internal::WeakReference::Flag" = type <{ %"class.base::RefCountedThreadSafe", %"class.base::AtomicFlag", [3 x i8] }>
%"class.base::RefCountedThreadSafe" = type { %"class.base::subtle::RefCountedThreadSafeBase" }
%"class.base::subtle::RefCountedThreadSafeBase" = type { %"class.base::AtomicRefCount" }
%"class.base::AtomicRefCount" = type { %"struct.std::__1::atomic" }
%"struct.std::__1::atomic" = type { %"struct.std::__1::__atomic_base" }
%"struct.std::__1::__atomic_base" = type { %"struct.std::__1::__atomic_base.0" }
%"struct.std::__1::__atomic_base.0" = type { %"struct.std::__1::__cxx_atomic_impl" }
%"struct.std::__1::__cxx_atomic_impl" = type { %"struct.std::__1::__cxx_atomic_base_impl" }
%"struct.std::__1::__cxx_atomic_base_impl" = type { i32 }
%"class.base::AtomicFlag" = type { %"struct.std::__1::atomic.1" }
%"struct.std::__1::atomic.1" = type { %"struct.std::__1::__atomic_base.2" }
%"struct.std::__1::__atomic_base.2" = type { %"struct.std::__1::__atomic_base.3" }
%"struct.std::__1::__atomic_base.3" = type { %"struct.std::__1::__cxx_atomic_impl.4" }
%"struct.std::__1::__cxx_atomic_impl.4" = type { %"struct.std::__1::__cxx_atomic_base_impl.5" }
%"struct.std::__1::__cxx_atomic_base_impl.5" = type { i8 }
%"struct.gl::GLWorkarounds" = type { i8, i8 }
%"class.std::__1::unique_ptr" = type { %"class.std::__1::__compressed_pair.7" }
%"class.std::__1::__compressed_pair.7" = type { %"struct.std::__1::__compressed_pair_elem.8" }
%"struct.std::__1::__compressed_pair_elem.8" = type { %"struct.gl::DriverGL"* }
%"struct.gl::DriverGL" = type <{ %"struct.gl::ProcsGL", %"struct.gl::ExtensionsGL", i8 }>
%"struct.gl::ProcsGL" = type { void (i32, i32)*, void (i32)*, void (i32, i32)*, void (i32, i32)*, void (i32)*, void (i32, i32, i8*)*, void (i32, i32)*, void (i32, i32, i32)*, void (i32, i32, i32, i64, i64)*, void (i32, i32, i8*)*, void (i32, i32, i32, i8*)*, void (i32, i32, i8*)*, void (i32, i32)*, void (i32, i32, i32, i8, i32, i32, i32)*, void (i32)*, void (i32, i32)*, void (i32, i32)*, void (i32, i32)*, void (i32, i32)*, void (i32, i32, i8*)*, void (i32)*, void (i32, i32, i64, i32)*, void ()*, void (float, float, float, float)*, void (i32)*, void (i32, i32)*, void (i32, i32)*, void (i32, i32, i32)*, void (i32, i32)*, void (i32, i32, i32)*, void (i32, i32, i32, i32)*, void (i32, i32, i32, i32, i32)*, void (i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)*, void (i32, i64, i8*, i32)*, void (i32, i64, i64, i8*)*, i32 (i32)*, void (i32)*, void (i32, i32, float, i32)*, void (i32, i32, float*)*, void (i32, i32, i32*)*, void (i32, i32, i32*)*, void (float, float, float, float)*, void (double)*, void (float)*, void (i32)*, void (i32, i32, i32, i32, i8*)*, void (i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i8*)*, i32 (%struct.__GLsync*, i32, i64)*, i32 (%struct.__GLsync*, i32, i64)*, void (i8, i8, i8, i8)*, void (i32, i8, i8, i8, i8)*, void (i32)*, void (i32, i32, i32, i32, i32, i32, i32, i8*)*, void (i32, i32, i32, i32, i32, i32, i32, i32, i8*)*, void (i32, i32, i32, i32, i32, i32, i32, i32, i8*)*, void (i32, i32, i32, i32, i32, i32, i32, i32, i32, i8*)*, void (i32, i32, i32, i32, i32, i32, i32, i32, i8*)*, void (i32, i32, i32, i32, i32, i32, i32, i32, i32, i8*)*, void (i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i8*)*, void (i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i8*)*, void (i32, i32, i64, i64, i64)*, void (i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i8, i8, i8)*, void (i32, i32, i32, i32, i32, i32, i32, i32)*, void (i32, i32, i32, i32, i32, i32, i32, i32)*, void (i32, i32, i32, i32, i32, i32, i32, i32, i32)*, void (i32, i32, i32, i32, i32, i32, i32, i8, i8, i8)*, void (i32)*, void (i32, i32, i8*, i32, i32, i32, float*)*, void (i32, i32)*, void (i32, i32, i8*, i32, i32, i32, float*)*, void (i32, i32)*, void (i32, i32*)*, i32 ()*, i32 (i32)*, i32 (i32, i32, i8**)*, void (i32)*, void (void (i32, i32, i32, i32, i32, i8*, i8*)*, i8*)*, void (i32, i32, i32, i32, i32*, i8)*, void (i32, i32, i32, i32, i32, i8*)*, void (i32, i32*)*, void (i32, i32*)*, void (i32, i32*)*, void (i32, i32*)*, void (i32, i32*)*, void (i32, i32)*, void (i32)*, void (i32, i32*)*, void (i32, i32*)*, void (i32, i32*)*, void (i32, i32*)*, void (i32, i32*)*, void (i32)*, void (%struct.__GLsync*)*, void (%struct.__GLsync*)*, void (i32, i32*)*, void (i32, i32*)*, void (i32, i32*)*, void (i32)*, void (i8)*, void (double, double)*, void (float, float)*, void (i32, i32)*, void (i32)*, void (i8*)*, void (i32, i32)*, void (i32)*, void (i32, i32, i32*)*, void (i32, i32, i32)*, void (i64)*, void (i32, i32, i32)*, void (i32, i8*)*, void (i32, i32, i32, i32)*, void (i32, i32, i32, i32, i32)*, void (i32)*, void (i32, i32*)*, void (i32, i32, i32, i8*)*, void (i32, i32, i8*)*, void (i32, i32, i32, i8*, i32)*, void (i32, i32, i32, i8*, i32, i32, i32)*, void (i32, i32, i32, i32, i32, i8*)*, void (i32, i8*)*, void (i32, i8*)*, void (i32)*, void (i32, i32)*, void (i32)*, void (i32)*, void (i32)*, void ()*, %struct.__GLsync* (i32, i32)*, %struct.__GLsync* (i32, i32)*, void ()*, void (i32)*, void (i32)*, void ()*, void (i32, i64, i64)*, void (i32, i32, i32)*, void (i32, i32, i32, i32)*, void (i32, i32, i32, i32, i32)*, void (i32, i32, i32, i32, i32, i32)*, void (i32, i32, i32, i32, i32)*, void (i32, i32, i32, i32, i32, i32)*, void (i32)*, void (i32, i32*)*, void (i32)*, void (i32, i32*)*, void (i32, i32*)*, void (i32, i32*)*, i32 (i32)*, i32 (i32, i32*)*, void (i32, i32*)*, void (i32, i32*)*, void (i32, i32*)*, void (i32, i32*)*, void (i32, i32*)*, void (i32, i32*)*, void (i32, i32*)*, void (i32, i32, i32, i32*, i32*, i32*, i8*)*, void (i32, i32, i32, i32*, i32*, i32*, i8*)*, void (i32, i32, i32, i32*)*, void (i32, i32, i32, i32, i32*, i32*)*, void (i32, i32, i32, i32*, i8*)*, void (i32, i32, i32*, i32, i32*)*, void (i32, i32, i32*, i32*)*, i32 (i32, i8*)*, void (i32, i32, i8*)*, void (i32, i32, i32, i32*, i8*)*, void (i32, i8*)*, void (i32, i32, i32*, i8*)*, void (i32, i32, i32, i32*, i64*)*, void (i32, i32, i32*)*, void (i32, i32, i32, i32*, i32*)*, void (i32, i32, i32, i32*, i8**)*, i32 (i32, i32, i32*, i32*, i32*, i32*, i32*, i8*)*, i32 ()*, void (i32, i32, i32*)*, void (i32, float*)*, void (i32, i32, i32*, float*)*, i32 (i32, i8*)*, i32 (i32, i8*)*, void (i32, i32, i32, i32*)*, void (i32, i32, i32, i32, i32*, i32*)*, void (i32, i32, i32*)*, void (i32, i32, i32, i32*, i32*)*, i32 ()*, void (i32, i32, i64*)*, void (i32, i32, i32, i32*, i64*)*, void (i32, i64*)*, void (i32, i32, i32*, i64*)*, void (i32, i32, i32*)*, void (i32, i32, i32, i32*, i32*)*, void (i32, i32*)*, void (i32, i32, i32*, i32*)*, void (i32, i32, i32, i32, i32*)*, void (i32, i32, i32, i32, i32*, i32*)*, void (i32, i32, i32, i32, i32, i32*)*, void (i32, i32, float*)*, void (i32, i32, i32, i32*, float*)*, void (i32, i32, i32, i32*, float*)*, void (i32, i32, i32, i32*, i32*)*, void (i32, i32, i32, i32*, i32*)*, void (i32, i32, i32, i32*, i8*)*, void (i8*, i32, i32*, i8*)*, void (i32, i8**)*, void (i32, i32, i32*, i8**)*, void (i32, i32, i32*, i32*, i8*)*, void (i32, i32, i32*, i8*)*, void (i32, i32, i32, i32*)*, void (i32, i32, i32, i32, i32*, i32*)*, void (i32, i32, i32*)*, void (i32, i32, i32, i32*, i32*)*, void (i32, i32, i32*, i8*)*, void (i32, i32, i32*)*, i32 (i32, i32, i8*)*, void (i32, i32, i32, i32, i32*, i32, i32*, i32*)*, i32 (i32, i32, i8*)*, void (i32, i32, i32, i32, i32*, i8*)*, void (i32, i32, i32*)*, void (i32, i32, i32, i32*, i32*)*, void (i32, i32, i64*)*, void (i32, i32, i32, i32*, i64*)*, void (i32, i32, i32*)*, void (i32, i32, i32, i32*, i32*)*, void (i32, i32, i64*)*, void (i32, i32, i32, i32*, i64*)*, void (i32, i32, i32*)*, void (i32, i32, i32, i32*, i32*)*, void (i32, i32, i32*)*, void (i32, i32, i32, i32*, i32*)*, void (i32, i32, float*)*, void (i32, i32, i32, i32*, float*)*, void (i32, i32, i32, i32*, i32*)*, void (i32, i32, i32, i32*, i32*)*, void (i32, i32, i32*)*, void (i32, i32, i32, i32*, i32*)*, void (i32, i32, i32*, i8*)*, void (i32, i32, i32*)*, void (i32, i32, i32, i32*, i32*)*, void (i32, i32, i32*, i32*)*, void (i32, i32, i32*, i8*)*, i8* (i32)*, i8* (i32, i32)*, void (%struct.__GLsync*, i32, i32, i32*, i32*)*, void (i32, i32, i32, float*)*, void (i32, i32, i32, i32, i32*, float*)*, void (i32, i32, i32, i32*)*, void (i32, i32, i32, i32, i32*, i32*)*, void (i32, i32, float*)*, void (i32, i32, i32, i32*, float*)*, void (i32, i32, i32, i32*, i32*)*, void (i32, i32, i32, i32*, i32*)*, void (i32, i32, i32*)*, void (i32, i32, i32, i32*, i32*)*, void (i32, i32, i32, i32*, i32*, i32*, i8*)*, void (i32, i32, i32*, i8*)*, i32 (i32, i8*)*, void (i32, i32, float*)*, void (i32, i32, i32, i32*, float*)*, void (i32, i32, i8**, i32*)*, void (i32, i32, i32*)*, void (i32, i32, i32, i32*, i32*)*, i32 (i32, i8*)*, void (i32, i32, i32*)*, void (i32, i32, i32, i32*, i32*)*, void (i32, i32, float*)*, void (i32, i32, i32, i32*, float*)*, void (i32, i32, i32, i32*, i32*)*, void (i32, i32, i32, i32*, i32*)*, void (i32, i32, i32*)*, void (i32, i32, i32, i32*, i32*)*, void (i32, i32, i8**)*, void (i32, i32, i32, i32*, i8**)*, void (i32, i32)*, void (i32, i64, i32, i32)*, void (i32, i64, i32, i8*)*, void (i32, i64, i32, i32)*, void (i32, i32, i32)*, void (i32, i32, i8*)*, void (i32, i32, i32)*, void (i32, i8*)*, void (i32, i32, i32*)*, void (i32, i32, i32*, i32, i32, i32, i32)*, void (i32)*, i8 (i32)*, i8 (i32)*, i8 (i32, i32)*, i8 (i32)*, i8 (i32)*, i8 (i32)*, i8 (i32)*, i8 (i32)*, i8 (i32)*, i8 (i32)*, i8 (i32)*, i8 (i32)*, i8 (i32)*, i8 (%struct.__GLsync*)*, i8 (%struct.__GLsync*)*, i8 (i32)*, i8 (i32)*, i8 (i32)*, void (float)*, void (i32)*, i8* (i32, i32)*, i8* (i32, i64, i64, i32)*, void (i32, float*)*, void (i32)*, void (i32)*, void (i32)*, void (i32)*, void (i32, i32, i32*)*, void (float)*, void (i32, i32*, i32*, i32)*, void (i32, i32*, i32*, i32*, i32)*, void (i32, i32*, i32*, i32*, i32*, i32)*, void (i32, i32*, i32, i8**, i32)*, void (i32, i32*, i32, i8**, i32*, i32)*, void (i32, i32*, i32, i8**, i32*, i32*, i32*, i32)*, void (i32, i32, i32, i8*)*, void (i8*, i32, i8*)*, void (i32, i32)*, void (i32, i32, i8*, i32, i32, i8*)*, void (i32, i32, float)*, void (i32, i32, i32)*, void (i32, i32, i32)*, void ()*, void (i32, i32)*, void (i32, i32)*, void (i32, i32)*, void (float, float)*, void ()*, void ()*, void (i32)*, void (i32, i32, i8*, i32)*, void (i32, i32, i32)*, void (i32, i32, i32, i32, float*)*, void (i32, i32, float)*, void (i32, i32, i32, float*)*, void (i32, i32, i32)*, void (i32, i32, i32, i32*)*, void (i32, i32, i32)*, void (i32, i32, i32, i32*)*, void (i32, i32, float, float)*, void (i32, i32, i32, float*)*, void (i32, i32, i32, i32)*, void (i32, i32, i32, i32*)*, void (i32, i32, i32, i32)*, void (i32, i32, i32, i32*)*, void (i32, i32, float, float, float)*, void (i32, i32, i32, float*)*, void (i32, i32, i32, i32, i32)*, void (i32, i32, i32, i32*)*, void (i32, i32, i32, i32, i32)*, void (i32, i32, i32, i32*)*, void (i32, i32, float, float, float, float)*, void (i32, i32, i32, float*)*, void (i32, i32, i32, i32, i32, i32)*, void (i32, i32, i32, i32*)*, void (i32, i32, i32, i32, i32, i32)*, void (i32, i32, i32, i32*)*, void (i32, i32, i32, i8, float*)*, void (i32, i32, i32, i8, float*)*, void (i32, i32, i32, i8, float*)*, void (i32, i32, i32, i8, float*)*, void (i32, i32, i32, i8, float*)*, void (i32, i32, i32, i8, float*)*, void (i32, i32, i32, i8, float*)*, void (i32, i32, i32, i8, float*)*, void (i32, i32, i32, i8, float*)*, void (i32, i32, i32, i8*)*, void (i32, i8*)*, void (i32, i32)*, void (i32)*, void (i32, i32, i32, i32, i32, i32, i32, i32*, i32*, i32*, i8*)*, void (i32, i32, i32, i32, i32, i32, i8*)*, void (i32, i32, i32, i32, i32, i32, i32, i32*, i32*, i32*, i8*)*, void ()*, void (i32, i32, i32, i32)*, void (i32, i32, i32, i32, i32)*, void (i32, i32, i32, i32, i32, i32)*, void (i32, i32, i32, i32, i32)*, void (i8*)*, void ()*, void (float, i8)*, void (i32, i32)*, void (i32, i32, float)*, void (i32, i32, float*)*, void (i32, i32, i32, float*)*, void (i32, i32, i32)*, void (i32, i32, i32, i32*)*, void (i32, i32, i32, i32*)*, void (i32, i32, i32*)*, void (i32, i32, i32, i32*)*, void (i32, i32, i32, i32)*, void (i32)*, void (i32, i32)*, void (i32, i32*, i32, i8*, i32)*, void (i32, i32, i8**, i32*)*, void (i32, i32, i32*, i32, i32*, i32*)*, void (i32, i32, i32, i32, i32)*, void (i32, i32, i8*, i32, i32, i32, i32, float*)*, void (i32, i32, i32)*, void (i32, i32, i32)*, void (i32, i32, i32, i32)*, void (i32)*, void (i32, i32)*, void (i32, i32, i32)*, void (i32, i32, i32, i32)*, void (i32, i32, i8*, i32, i32, i32, i32, float*)*, void (i32, i32, i32)*, void (i32, i32, i8*, i32, i32, i32, i32, i32, float*)*, void (i32, i32, i32, i32)*, void (i32, i32, i8*, i32, i32, i32, i32, i32, float*)*, void (i32, i32, i32, i32)*, i8 (i32)*, i8 (i32)*, void (i32, i32, i32)*, void (i32, i32, i32, i64, i64)*, void (i32, i32, i32, i32, i32, i32, i32, i32, i8*)*, void (i32, i32, i32, i32, i32, i32, i32, i32)*, void (i32, i32, i32, i32, i32, i32, i32, i32, i32, i8*)*, void (i32, i32, i32, i32, i32, i32, i32, i32, i32, i8*)*, void (i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i8*)*, void (i32, i32, float)*, void (i32, i32, float*)*, void (i32, i32, i32, float*)*, void (i32, i32, i32)*, void (i32, i32, i32, i32*)*, void (i32, i32, i32, i32*)*, void (i32, i32, i32*)*, void (i32, i32, i32, i32*)*, void (i32, i32, i32, i32, i32)*, void (i32, i32, i32, i32, i32, i8)*, void (i32, i32, i32, i32, i32, i32)*, void (i32, i32, i32, i32, i32, i32, i64)*, void (i32, i32, i32, i32, i32, i32, i64, i32, i32)*, void (i32, i32, i32, i32, i32, i32, i32, i32, i8*)*, void (i32, i32, i32, i32, i32, i32, i32, i32, i32, i8*)*, void (i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i8*)*, void (i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i8*)*, void (i32, i32, i8**, i32)*, void (i32, float)*, void (i32, i32, float*)*, void (i32, i32)*, void (i32, i32, i32*)*, void (i32, i32)*, void (i32, i32, i32*)*, void (i32, float, float)*, void (i32, i32, float*)*, void (i32, i32, i32)*, void (i32, i32, i32*)*, void (i32, i32, i32)*, void (i32, i32, i32*)*, void (i32, float, float, float)*, void (i32, i32, float*)*, void (i32, i32, i32, i32)*, void (i32, i32, i32*)*, void (i32, i32, i32, i32)*, void (i32, i32, i32*)*, void (i32, float, float, float, float)*, void (i32, i32, float*)*, void (i32, i32, i32, i32, i32)*, void (i32, i32, i32*)*, void (i32, i32, i32, i32, i32)*, void (i32, i32, i32*)*, void (i32, i32, i32)*, void (i32, i32, i8, float*)*, void (i32, i32, i8, float*)*, void (i32, i32, i8, float*)*, void (i32, i32, i8, float*)*, void (i32, i32, i8, float*)*, void (i32, i32, i8, float*)*, void (i32, i32, i8, float*)*, void (i32, i32, i8, float*)*, void (i32, i32, i8, float*)*, i8 (i32)*, void (i32)*, void (i32, i32, i32)*, void (i32)*, void (i32)*, void (i32, float)*, void (i32, float*)*, void (i32, float, float)*, void (i32, float*)*, void (i32, float, float, float)*, void (i32, float*)*, void (i32, float, float, float, float)*, void (i32, float*)*, void (i32, i32)*, void (i32, i32)*, void (i32, i32, i32, i8, i32)*, void (i32, i32, i32, i32, i32)*, void (i32, i32*)*, void (i32, i32, i32, i32, i32)*, void (i32, i32*)*, void (i32, i32, i32, i32)*, void (i32, i32, i32, i32, i8*)*, void (i32, i32, i32, i8, i32, i8*)*, void (i32, i32)*, void (i32, i32, i32, i32)*, void (i32, i32, i32*, i32, i32*, i32*)*, void (%struct.__GLsync*, i32, i64)*, void (%struct.__GLsync*, i32, i64)*, void (i32, i32, i32*)* }
%struct.__GLsync = type opaque
%"struct.gl::ExtensionsGL" = type { i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8 }
%"class.std::__1::unique_ptr.10" = type { %"class.std::__1::__compressed_pair.11" }
%"class.std::__1::__compressed_pair.11" = type { %"struct.std::__1::__compressed_pair_elem.12" }
%"struct.std::__1::__compressed_pair_elem.12" = type { %"class.gl::GLImplementationWrapper"* }
%"class.gl::GLImplementationWrapper" = type { %"class.std::__1::unique_ptr.13", %"class.std::__1::unique_ptr.19", %"class.std::__1::unique_ptr.25", %"class.gl::GLApi"* }
%"class.std::__1::unique_ptr.13" = type { %"class.std::__1::__compressed_pair.14" }
%"class.std::__1::__compressed_pair.14" = type { %"struct.std::__1::__compressed_pair_elem.15" }
%"struct.std::__1::__compressed_pair_elem.15" = type { %"class.gl::GLApi"* }
%"class.std::__1::unique_ptr.19" = type { %"class.std::__1::__compressed_pair.20" }
%"class.std::__1::__compressed_pair.20" = type { %"struct.std::__1::__compressed_pair_elem.21" }
%"struct.std::__1::__compressed_pair_elem.21" = type { %"class.gl::TraceGLApi"* }
%"class.gl::TraceGLApi" = type { %"class.gl::GLApi", %"class.gl::GLApi"* }
%"class.gl::GLApi" = type { i32 (...)** }
%"class.std::__1::unique_ptr.25" = type { %"class.std::__1::__compressed_pair.26" }
%"class.std::__1::__compressed_pair.26" = type { %"struct.std::__1::__compressed_pair_elem.27" }
%"struct.std::__1::__compressed_pair_elem.27" = type { %"class.gl::LogGLApi"* }
%"class.gl::LogGLApi" = type { %"class.gl::GLApi", %"class.gl::GLApi"* }
%"class.std::__1::unique_ptr.34" = type { %"class.std::__1::__compressed_pair.35" }
%"class.std::__1::__compressed_pair.35" = type { %"struct.std::__1::__compressed_pair_elem.36" }
%"struct.std::__1::__compressed_pair_elem.36" = type { %"struct.gl::CurrentGL"* }
%"struct.gl::CurrentGL" = type { %"class.gl::GLApi"*, %"struct.gl::DriverGL"*, %"struct.gl::GLVersionInfo"* }
%"struct.gl::GLVersionInfo" = type opaque
%"class.gl::RealGLApi" = type { %"class.gl::GLApiBase", %"class.std::__1::vector", %"class.std::__1::vector", %"class.std::__1::basic_string", %"struct.gl::GLWorkarounds", %"class.std::__1::unique_ptr.45" }
%"class.gl::GLApiBase" = type { %"class.gl::GLApi", %"struct.gl::DriverGL"* }
%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { %"class.std::__1::basic_string"*, %"class.std::__1::basic_string"*, %"class.std::__1::__compressed_pair.40" }
%"class.std::__1::__compressed_pair.40" = type { %"struct.std::__1::__compressed_pair_elem.41" }
%"struct.std::__1::__compressed_pair_elem.41" = type { %"class.std::__1::basic_string"* }
%class.scoped_refptr.51 = type { %"class.gl::GLShareGroup"* }
%"class.gl::GLShareGroup" = type { %"class.base::RefCounted.52", %"class.std::__1::set", %"class.gl::GLContext"* }
%"class.base::RefCounted.52" = type { %"class.base::subtle::RefCountedBase" }
%"class.std::__1::set" = type { %"class.std::__1::__tree" }
%"class.std::__1::__tree" = type { %"class.std::__1::__tree_end_node"*, %"class.std::__1::__compressed_pair.53", %"class.std::__1::__compressed_pair.58" }
%"class.std::__1::__tree_end_node" = type { %"class.std::__1::__tree_node_base"* }
%"class.std::__1::__tree_node_base" = type opaque
%"class.std::__1::__compressed_pair.53" = type { %"struct.std::__1::__compressed_pair_elem.54" }
%"struct.std::__1::__compressed_pair_elem.54" = type { %"class.std::__1::__tree_end_node" }
%"class.std::__1::__compressed_pair.58" = type { %"struct.std::__1::__compressed_pair_elem.59" }
%"struct.std::__1::__compressed_pair_elem.59" = type { i64 }
%"class.gl::GLContext" = type <{ i32 (...)**, %"class.base::RefCounted", [4 x i8], %"class.base::SupportsWeakPtr", %"struct.gl::GLWorkarounds", [6 x i8], %"class.std::__1::basic_string", i8, i8, [6 x i8], %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr.10", %"class.std::__1::unique_ptr.34", %"class.gl::RealGLApi"*, %class.scoped_refptr.51, %"class.gl::GLContext"*, i8, [7 x i8], %"class.std::__1::unique_ptr.61", %"class.std::__1::unique_ptr.45", i8, [7 x i8] }>
%"class.std::__1::unique_ptr.61" = type { %"class.std::__1::__compressed_pair.62" }
%"class.std::__1::__compressed_pair.62" = type { %"struct.std::__1::__compressed_pair_elem.63" }
%"struct.std::__1::__compressed_pair_elem.63" = type { %"class.gl::GLStateRestorer"* }
%"class.gl::GLStateRestorer" = type { i32 (...)** }
%"class.std::__1::unique_ptr.45" = type { %"class.std::__1::__compressed_pair.46" }
%"class.std::__1::__compressed_pair.46" = type { %"struct.std::__1::__compressed_pair_elem.47" }
%"struct.std::__1::__compressed_pair_elem.47" = type { %"struct.gl::GLVersionInfo"* }
%"class.std::__1::unique_ptr.67" = type { %"class.std::__1::__compressed_pair.68" }
%"class.std::__1::__compressed_pair.68" = type { %"struct.std::__1::__compressed_pair_elem.69" }
%"struct.std::__1::__compressed_pair_elem.69" = type { %"class.gl::GPUTiming"* }
%"class.gl::GPUTiming" = type opaque
%"class.base::internal::flat_tree" = type { %"class.std::__1::vector.73" }
%"class.std::__1::vector.73" = type { %"class.std::__1::__vector_base.74" }
%"class.std::__1::__vector_base.74" = type { %"class.base::BasicStringPiece"*, %"class.base::BasicStringPiece"*, %"class.std::__1::__compressed_pair.75" }
%"class.base::BasicStringPiece" = type { i8*, i64 }
%"class.std::__1::__compressed_pair.75" = type { %"struct.std::__1::__compressed_pair_elem.76" }
%"struct.std::__1::__compressed_pair_elem.76" = type { %"class.base::BasicStringPiece"* }
%"class.std::__1::basic_string" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" = type { %union.anon }
%union.anon = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" = type { i8*, i64, i64 }
%"class.gl::GLContextReal" = type <{ %"class.gl::GLContext.base", [7 x i8], %"class.std::__1::unique_ptr.67", %"class.std::__1::basic_string", %"class.base::internal::flat_tree", i8, [7 x i8] }>
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short" = type { [23 x i8], %struct.anon }
%struct.anon = type { i8 }
%"class.std::__1::__basic_string_common" = type { i8 }
%"class.gl::GLSurface" = type opaque
%"struct.gl::GLContextAttribs" = type { i32, i8, i8, i8, i8, i8, i8, i32, i32, i8, i8, i8, i8, i32 }
%"class.gl::GLStubApi" = type <{ %"class.gl::GLStubApiBase", %"class.std::__1::basic_string", %"class.std::__1::basic_string", i32, [4 x i8] }>
%"class.gl::GLStubApiBase" = type { %"class.gl::GLApi" }
%"class.gl::YUVToRGBConverter" = type opaque
%"class.gfx::ColorSpace" = type opaque

$_ZN2gl9GLContext13SetVisibilityEb = comdat any

@_ZTVN2gl13GLContextStubE = hidden unnamed_addr constant { [23 x i8*] } { [23 x i8*] [i8* null, i8* null, i8* bitcast (i1 (%"class.gl::GLContextStub"*, %"class.gl::GLSurface"*, %"struct.gl::GLContextAttribs"*)* @_ZN2gl13GLContextStub10InitializeEPNS_9GLSurfaceERKNS_16GLContextAttribsE to i8*), i8* bitcast (void (%"class.gl::GLContextStub"*, %"class.gl::GLSurface"*)* @_ZN2gl13GLContextStub14ReleaseCurrentEPNS_9GLSurfaceE to i8*), i8* bitcast (i1 (%"class.gl::GLContextStub"*, %"class.gl::GLSurface"*)* @_ZN2gl13GLContextStub9IsCurrentEPNS_9GLSurfaceE to i8*), i8* bitcast (i8* (%"class.gl::GLContextStub"*)* @_ZN2gl13GLContextStub9GetHandleEv to i8*), i8* bitcast (void ()* @_ZN2gl13GLContextReal21CreateGPUTimingClientEv to i8*), i8* bitcast (%"class.base::internal::flat_tree"* (%"class.gl::GLContextReal"*)* @_ZN2gl13GLContextReal13GetExtensionsEv to i8*), i8* bitcast (void (%"class.gl::GLContext"*)* @_ZN2gl9GLContext23SetSafeToForceGpuSwitchEv to i8*), i8* bitcast (i1 (%"class.gl::GLContext"*)* @_ZN2gl9GLContext22ForceGpuSwitchIfNeededEv to i8*), i8* bitcast (void (%"class.gl::GLContext"*)* @_ZN2gl9GLContext25SetUnbindFboOnMakeCurrentEv to i8*), i8* bitcast (void (%"class.gl::GLContext"*, i1)* @_ZN2gl9GLContext13SetVisibilityEb to i8*), i8* bitcast (void (%"class.std::__1::basic_string"*, %"class.gl::GLContextStub"*)* @_ZN2gl13GLContextStub12GetGLVersionEv to i8*), i8* bitcast (void (%"class.std::__1::basic_string"*, %"class.gl::GLContextStub"*)* @_ZN2gl13GLContextStub13GetGLRendererEv to i8*), i8* bitcast (%"class.gl::YUVToRGBConverter"* (%"class.gl::GLContext"*, %"class.gfx::ColorSpace"*)* @_ZN2gl9GLContext20GetYUVToRGBConverterERKN3gfx10ColorSpaceE to i8*), i8* bitcast (void (%"class.gl::GLContext"*)* @_ZN2gl9GLContext28ForceReleaseVirtuallyCurrentEv to i8*), i8* bitcast (void (%"class.gl::GLContextStub"*)* @_ZN2gl13GLContextStubD2Ev to i8*), i8* bitcast (void (%"class.gl::GLContextStub"*)* @_ZN2gl13GLContextStubD0Ev to i8*), i8* bitcast (%"class.gl::GLApi"* (%"class.gl::GLContextStub"*, %"struct.gl::DriverGL"*)* @_ZN2gl13GLContextStub11CreateGLApiEPNS_8DriverGLE to i8*), i8* bitcast (void (%"class.gl::GLContextReal"*, %"class.gl::GLSurface"*)* @_ZN2gl13GLContextReal10SetCurrentEPNS_9GLSurfaceE to i8*), i8* bitcast (i1 (%"class.gl::GLContextStub"*, %"class.gl::GLSurface"*)* @_ZN2gl13GLContextStub15MakeCurrentImplEPNS_9GLSurfaceE to i8*), i8* bitcast (i32 (%"class.gl::GLContextStub"*)* @_ZN2gl13GLContextStub34CheckStickyGraphicsResetStatusImplEv to i8*), i8* bitcast (void (%"class.gl::GLContextReal"*)* @_ZN2gl13GLContextReal15ResetExtensionsEv to i8*)] }, align 8
@.str = private unnamed_addr constant [14 x i8] c"OpenGL ES 3.0\00", align 1
@.str.1 = private unnamed_addr constant [26 x i8] c"GL_EXT_framebuffer_object\00", align 1
@_ZN2gl24g_current_gl_context_tlsE = external local_unnamed_addr global %"class.base::ThreadLocalPointer"*, align 8
@.str.3 = private unnamed_addr constant [1 x i8] zeroinitializer, align 1
@.str.4 = private unnamed_addr constant [18 x i8] c"GL_ARB_robustness\00", align 1
@.str.5 = private unnamed_addr constant [18 x i8] c"GL_KHR_robustness\00", align 1
@.str.6 = private unnamed_addr constant [18 x i8] c"GL_EXT_robustness\00", align 1

@_ZN2gl13GLContextStubC1Ev = hidden unnamed_addr alias void (%"class.gl::GLContextStub"*), void (%"class.gl::GLContextStub"*)* @_ZN2gl13GLContextStubC2Ev
@_ZN2gl13GLContextStubC1EPNS_12GLShareGroupE = hidden unnamed_addr alias void (%"class.gl::GLContextStub"*, %"class.gl::GLShareGroup"*), void (%"class.gl::GLContextStub"*, %"class.gl::GLShareGroup"*)* @_ZN2gl13GLContextStubC2EPNS_12GLShareGroupE
@_ZN2gl13GLContextStubD1Ev = hidden unnamed_addr alias void (%"class.gl::GLContextStub"*), void (%"class.gl::GLContextStub"*)* @_ZN2gl13GLContextStubD2Ev

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2gl13GLContextStubC2Ev(%"class.gl::GLContextStub"*) unnamed_addr #0 align 2 {
  %2 = bitcast %"class.gl::GLContextStub"* %0 to %"class.gl::GLContextReal"*
  tail call void @_ZN2gl13GLContextRealC2EPNS_12GLShareGroupE(%"class.gl::GLContextReal"* %2, %"class.gl::GLShareGroup"* null) #10
  %3 = getelementptr inbounds %"class.gl::GLContextStub", %"class.gl::GLContextStub"* %0, i64 0, i32 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [23 x i8*] }, { [23 x i8*] }* @_ZTVN2gl13GLContextStubE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %3, align 8
  %4 = getelementptr inbounds %"class.gl::GLContextStub", %"class.gl::GLContextStub"* %0, i64 0, i32 1
  store i8 0, i8* %4, align 1
  %5 = getelementptr inbounds %"class.gl::GLContextStub", %"class.gl::GLContextStub"* %0, i64 0, i32 3
  %6 = bitcast %"class.std::__1::basic_string"* %5 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %7 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %6, i64 0, i32 1, i32 0
  store i8 13, i8* %7, align 1
  %8 = bitcast %"class.std::__1::basic_string"* %5 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %8, i8* align 1 getelementptr inbounds ([14 x i8], [14 x i8]* @.str, i64 0, i64 0), i64 13, i1 false) #10
  %9 = getelementptr inbounds i8, i8* %8, i64 13
  store i8 0, i8* %9, align 1
  %10 = getelementptr inbounds %"class.gl::GLContextStub", %"class.gl::GLContextStub"* %0, i64 0, i32 4
  store i32 0, i32* %10, align 8
  tail call void @_ZN2gl13GLContextStub19SetExtensionsStringEPKc(%"class.gl::GLContextStub"* %0, i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.1, i64 0, i64 0)) #10
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2gl13GLContextStubC2EPNS_12GLShareGroupE(%"class.gl::GLContextStub"*, %"class.gl::GLShareGroup"*) unnamed_addr #0 align 2 {
  %3 = bitcast %"class.gl::GLContextStub"* %0 to %"class.gl::GLContextReal"*
  tail call void @_ZN2gl13GLContextRealC2EPNS_12GLShareGroupE(%"class.gl::GLContextReal"* %3, %"class.gl::GLShareGroup"* %1) #10
  %4 = getelementptr inbounds %"class.gl::GLContextStub", %"class.gl::GLContextStub"* %0, i64 0, i32 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [23 x i8*] }, { [23 x i8*] }* @_ZTVN2gl13GLContextStubE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %4, align 8
  %5 = getelementptr inbounds %"class.gl::GLContextStub", %"class.gl::GLContextStub"* %0, i64 0, i32 1
  store i8 0, i8* %5, align 1
  %6 = getelementptr inbounds %"class.gl::GLContextStub", %"class.gl::GLContextStub"* %0, i64 0, i32 3
  %7 = bitcast %"class.std::__1::basic_string"* %6 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %8 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %7, i64 0, i32 1, i32 0
  store i8 13, i8* %8, align 1
  %9 = bitcast %"class.std::__1::basic_string"* %6 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %9, i8* align 1 getelementptr inbounds ([14 x i8], [14 x i8]* @.str, i64 0, i64 0), i64 13, i1 false) #10
  %10 = getelementptr inbounds i8, i8* %9, i64 13
  store i8 0, i8* %10, align 1
  %11 = getelementptr inbounds %"class.gl::GLContextStub", %"class.gl::GLContextStub"* %0, i64 0, i32 4
  store i32 0, i32* %11, align 8
  tail call void @_ZN2gl13GLContextStub19SetExtensionsStringEPKc(%"class.gl::GLContextStub"* %0, i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.1, i64 0, i64 0))
  ret void
}

declare void @_ZN2gl13GLContextRealC2EPNS_12GLShareGroupE(%"class.gl::GLContextReal"*, %"class.gl::GLShareGroup"*) unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2gl13GLContextStub19SetExtensionsStringEPKc(%"class.gl::GLContextStub"*, i8* nocapture readonly) local_unnamed_addr #0 align 2 {
  %3 = alloca %"class.std::__1::basic_string", align 8
  %4 = bitcast %"class.gl::GLContextStub"* %0 to %"class.gl::GLContextReal"*
  %5 = tail call i64 @strlen(i8* %1) #10
  %6 = icmp ugt i64 %5, -17
  br i1 %6, label %7, label %9

7:                                                ; preds = %2
  %8 = bitcast %"class.std::__1::basic_string"* %3 to %"class.std::__1::__basic_string_common"*
  call void @_ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__basic_string_common"* nonnull %8) #11
  unreachable

9:                                                ; preds = %2
  %10 = icmp ult i64 %5, 23
  br i1 %10, label %20, label %11

11:                                               ; preds = %9
  %12 = add nuw i64 %5, 16
  %13 = and i64 %12, -16
  %14 = tail call i8* @_Znwm(i64 %13) #12
  %15 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %3, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  store i8* %14, i8** %15, align 8
  %16 = or i64 %13, -9223372036854775808
  %17 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %3, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 2
  store i64 %16, i64* %17, align 8
  %18 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %3, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  store i64 %5, i64* %18, align 8
  %19 = bitcast %"class.std::__1::basic_string"* %3 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  br label %26

20:                                               ; preds = %9
  %21 = trunc i64 %5 to i8
  %22 = bitcast %"class.std::__1::basic_string"* %3 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %23 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %22, i64 0, i32 1, i32 0
  store i8 %21, i8* %23, align 1
  %24 = bitcast %"class.std::__1::basic_string"* %3 to i8*
  %25 = icmp eq i64 %5, 0
  br i1 %25, label %29, label %26

26:                                               ; preds = %20, %11
  %27 = phi %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* [ %22, %20 ], [ %19, %11 ]
  %28 = phi i8* [ %24, %20 ], [ %14, %11 ]
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 1 %28, i8* align 1 %1, i64 %5, i1 false) #10
  br label %29

29:                                               ; preds = %20, %26
  %30 = phi %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* [ %22, %20 ], [ %27, %26 ]
  %31 = phi i8* [ %24, %20 ], [ %28, %26 ]
  %32 = getelementptr inbounds i8, i8* %31, i64 %5
  store i8 0, i8* %32, align 1
  call void @_ZN2gl13GLContextReal23SetExtensionsFromStringENSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEE(%"class.gl::GLContextReal"* %4, %"class.std::__1::basic_string"* nonnull %3) #10
  %33 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %30, i64 0, i32 1, i32 0
  %34 = load i8, i8* %33, align 1
  %35 = icmp slt i8 %34, 0
  br i1 %35, label %36, label %39

36:                                               ; preds = %29
  %37 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %3, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %38 = load i8*, i8** %37, align 8
  call void @_ZdlPv(i8* %38) #12
  br label %39

39:                                               ; preds = %29, %36
  ret void
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden zeroext i1 @_ZN2gl13GLContextStub10InitializeEPNS_9GLSurfaceERKNS_16GLContextAttribsE(%"class.gl::GLContextStub"* nocapture readnone, %"class.gl::GLSurface"* nocapture readnone, %"struct.gl::GLContextAttribs"* nocapture readnone dereferenceable(28)) unnamed_addr #2 align 2 {
  ret i1 true
}

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN2gl13GLContextStub15MakeCurrentImplEPNS_9GLSurfaceE(%"class.gl::GLContextStub"*, %"class.gl::GLSurface"*) unnamed_addr #0 align 2 {
  %3 = bitcast %"class.gl::GLContextStub"* %0 to %"class.gl::GLContext"*
  tail call void @_ZN2gl9GLContext9BindGLApiEv(%"class.gl::GLContext"* %3) #10
  %4 = bitcast %"class.gl::GLContextStub"* %0 to %"class.gl::GLContextReal"*
  %5 = bitcast %"class.gl::GLContextStub"* %0 to void (%"class.gl::GLContextReal"*, %"class.gl::GLSurface"*)***
  %6 = load void (%"class.gl::GLContextReal"*, %"class.gl::GLSurface"*)**, void (%"class.gl::GLContextReal"*, %"class.gl::GLSurface"*)*** %5, align 8
  %7 = getelementptr inbounds void (%"class.gl::GLContextReal"*, %"class.gl::GLSurface"*)*, void (%"class.gl::GLContextReal"*, %"class.gl::GLSurface"*)** %6, i64 17
  %8 = load void (%"class.gl::GLContextReal"*, %"class.gl::GLSurface"*)*, void (%"class.gl::GLContextReal"*, %"class.gl::GLSurface"*)** %7, align 8
  tail call void %8(%"class.gl::GLContextReal"* %4, %"class.gl::GLSurface"* %1) #10
  tail call void @_ZN2gl9GLContext25InitializeDynamicBindingsEv(%"class.gl::GLContext"* %3) #10
  ret i1 true
}

declare void @_ZN2gl9GLContext9BindGLApiEv(%"class.gl::GLContext"*) local_unnamed_addr #1

declare void @_ZN2gl9GLContext25InitializeDynamicBindingsEv(%"class.gl::GLContext"*) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2gl13GLContextStub14ReleaseCurrentEPNS_9GLSurfaceE(%"class.gl::GLContextStub"*, %"class.gl::GLSurface"* nocapture readnone) unnamed_addr #0 align 2 {
  %3 = bitcast %"class.gl::GLContextStub"* %0 to %"class.gl::GLContextReal"*
  %4 = bitcast %"class.gl::GLContextStub"* %0 to void (%"class.gl::GLContextReal"*, %"class.gl::GLSurface"*)***
  %5 = load void (%"class.gl::GLContextReal"*, %"class.gl::GLSurface"*)**, void (%"class.gl::GLContextReal"*, %"class.gl::GLSurface"*)*** %4, align 8
  %6 = getelementptr inbounds void (%"class.gl::GLContextReal"*, %"class.gl::GLSurface"*)*, void (%"class.gl::GLContextReal"*, %"class.gl::GLSurface"*)** %5, i64 17
  %7 = load void (%"class.gl::GLContextReal"*, %"class.gl::GLSurface"*)*, void (%"class.gl::GLContextReal"*, %"class.gl::GLSurface"*)** %6, align 8
  tail call void %7(%"class.gl::GLContextReal"* %3, %"class.gl::GLSurface"* null) #10
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN2gl13GLContextStub9IsCurrentEPNS_9GLSurfaceE(%"class.gl::GLContextStub"* readnone, %"class.gl::GLSurface"* nocapture readnone) unnamed_addr #0 align 2 {
  %3 = tail call %"class.gl::GLContext"* @_ZN2gl9GLContext14GetRealCurrentEv() #10
  %4 = bitcast %"class.gl::GLContextStub"* %0 to %"class.gl::GLContext"*
  %5 = icmp eq %"class.gl::GLContext"* %3, %4
  ret i1 %5
}

declare %"class.gl::GLContext"* @_ZN2gl9GLContext14GetRealCurrentEv() local_unnamed_addr #1

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden noalias i8* @_ZN2gl13GLContextStub9GetHandleEv(%"class.gl::GLContextStub"* nocapture readnone) unnamed_addr #2 align 2 {
  ret i8* null
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2gl13GLContextStub12GetGLVersionEv(%"class.std::__1::basic_string"* noalias sret, %"class.gl::GLContextStub"* nocapture readonly) unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.gl::GLContextStub", %"class.gl::GLContextStub"* %1, i64 0, i32 3
  %4 = bitcast %"class.std::__1::basic_string"* %3 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %5 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %4, i64 0, i32 1, i32 0
  %6 = load i8, i8* %5, align 1
  %7 = icmp slt i8 %6, 0
  br i1 %7, label %11, label %8

8:                                                ; preds = %2
  %9 = bitcast %"class.std::__1::basic_string"* %0 to i8*
  %10 = bitcast %"class.std::__1::basic_string"* %3 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %9, i8* align 8 %10, i64 24, i1 false) #10
  br label %16

11:                                               ; preds = %2
  %12 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %3, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %13 = load i8*, i8** %12, align 8
  %14 = getelementptr inbounds %"class.gl::GLContextStub", %"class.gl::GLContextStub"* %1, i64 0, i32 3, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %15 = load i64, i64* %14, align 8
  tail call void @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE25__init_copy_ctor_externalEPKcm(%"class.std::__1::basic_string"* %0, i8* %13, i64 %15) #10
  br label %16

16:                                               ; preds = %8, %11
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2gl13GLContextStub13GetGLRendererEv(%"class.std::__1::basic_string"* noalias sret, %"class.gl::GLContextStub"* nocapture readnone) unnamed_addr #0 align 2 {
  %3 = bitcast %"class.std::__1::basic_string"* %0 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %4 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %3, i64 0, i32 1, i32 0
  store i8 8, i8* %4, align 1
  %5 = bitcast %"class.std::__1::basic_string"* %0 to i64*
  store i64 5572440710332958787, i64* %5, align 8
  %6 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %7 = bitcast i64* %6 to i8*
  store i8 0, i8* %7, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @_ZN2gl13GLContextStub34CheckStickyGraphicsResetStatusImplEv(%"class.gl::GLContextStub"*) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.gl::GLContextStub", %"class.gl::GLContextStub"* %0, i64 0, i32 4
  %3 = load i32, i32* %2, align 8
  %4 = icmp eq i32 %3, 0
  br i1 %4, label %5, label %25

5:                                                ; preds = %1
  %6 = bitcast %"class.gl::GLContextStub"* %0 to %"class.gl::GLContext"*
  %7 = tail call zeroext i1 @_ZN2gl9GLContext12HasExtensionEPKc(%"class.gl::GLContext"* %6, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.4, i64 0, i64 0)) #10
  br i1 %7, label %14, label %8

8:                                                ; preds = %5
  %9 = tail call zeroext i1 @_ZN2gl9GLContext12HasExtensionEPKc(%"class.gl::GLContext"* %6, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.5, i64 0, i64 0)) #10
  br i1 %9, label %14, label %10

10:                                               ; preds = %8
  %11 = tail call zeroext i1 @_ZN2gl9GLContext12HasExtensionEPKc(%"class.gl::GLContext"* %6, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.6, i64 0, i64 0)) #10
  br i1 %11, label %14, label %12

12:                                               ; preds = %10
  %13 = load i32, i32* %2, align 8
  br label %25

14:                                               ; preds = %5, %8, %10
  %15 = load %"class.base::ThreadLocalPointer"*, %"class.base::ThreadLocalPointer"** @_ZN2gl24g_current_gl_context_tlsE, align 8
  %16 = getelementptr inbounds %"class.base::ThreadLocalPointer", %"class.base::ThreadLocalPointer"* %15, i64 0, i32 0
  %17 = tail call i8* @_ZNK4base18ThreadLocalStorage4Slot3GetEv(%"class.base::ThreadLocalStorage::Slot"* %16) #10
  %18 = bitcast i8* %17 to %"class.gl::GLApi"**
  %19 = load %"class.gl::GLApi"*, %"class.gl::GLApi"** %18, align 8
  %20 = bitcast %"class.gl::GLApi"* %19 to i32 (%"class.gl::GLApi"*)***
  %21 = load i32 (%"class.gl::GLApi"*)**, i32 (%"class.gl::GLApi"*)*** %20, align 8
  %22 = getelementptr inbounds i32 (%"class.gl::GLApi"*)*, i32 (%"class.gl::GLApi"*)** %21, i64 186
  %23 = load i32 (%"class.gl::GLApi"*)*, i32 (%"class.gl::GLApi"*)** %22, align 8
  %24 = tail call i32 %23(%"class.gl::GLApi"* %19) #10
  store i32 %24, i32* %2, align 8
  br label %25

25:                                               ; preds = %12, %14, %1
  %26 = phi i32 [ %13, %12 ], [ %24, %14 ], [ %3, %1 ]
  ret i32 %26
}

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN2gl13GLContextStub13HasRobustnessEv(%"class.gl::GLContextStub"*) local_unnamed_addr #0 align 2 {
  %2 = bitcast %"class.gl::GLContextStub"* %0 to %"class.gl::GLContext"*
  %3 = tail call zeroext i1 @_ZN2gl9GLContext12HasExtensionEPKc(%"class.gl::GLContext"* %2, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.4, i64 0, i64 0)) #10
  br i1 %3, label %8, label %4

4:                                                ; preds = %1
  %5 = tail call zeroext i1 @_ZN2gl9GLContext12HasExtensionEPKc(%"class.gl::GLContext"* %2, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.5, i64 0, i64 0)) #10
  br i1 %5, label %8, label %6

6:                                                ; preds = %4
  %7 = tail call zeroext i1 @_ZN2gl9GLContext12HasExtensionEPKc(%"class.gl::GLContext"* %2, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.6, i64 0, i64 0)) #10
  br label %8

8:                                                ; preds = %6, %4, %1
  %9 = phi i1 [ true, %4 ], [ true, %1 ], [ %7, %6 ]
  ret i1 %9
}

; Function Attrs: nofree norecurse nounwind ssp uwtable writeonly
define hidden void @_ZN2gl13GLContextStub13SetUseStubApiEb(%"class.gl::GLContextStub"* nocapture, i1 zeroext) local_unnamed_addr #3 align 2 {
  %3 = zext i1 %1 to i8
  %4 = getelementptr inbounds %"class.gl::GLContextStub", %"class.gl::GLContextStub"* %0, i64 0, i32 1
  store i8 %3, i8* %4, align 1
  ret void
}

declare void @_ZN2gl13GLContextReal23SetExtensionsFromStringENSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEE(%"class.gl::GLContextReal"*, %"class.std::__1::basic_string"*) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2gl13GLContextStub18SetGLVersionStringEPKc(%"class.gl::GLContextStub"* nocapture, i8* readonly) local_unnamed_addr #0 align 2 {
  %3 = alloca %"class.std::__1::basic_string", align 8
  %4 = bitcast %"class.std::__1::basic_string"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %4) #10
  %5 = icmp eq i8* %1, null
  %6 = select i1 %5, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.3, i64 0, i64 0), i8* %1
  %7 = tail call i64 @strlen(i8* %6) #10
  %8 = icmp ugt i64 %7, -17
  br i1 %8, label %9, label %11

9:                                                ; preds = %2
  %10 = bitcast %"class.std::__1::basic_string"* %3 to %"class.std::__1::__basic_string_common"*
  call void @_ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__basic_string_common"* nonnull %10) #11
  unreachable

11:                                               ; preds = %2
  %12 = icmp ult i64 %7, 23
  br i1 %12, label %21, label %13

13:                                               ; preds = %11
  %14 = add nuw i64 %7, 16
  %15 = and i64 %14, -16
  %16 = tail call i8* @_Znwm(i64 %15) #12
  %17 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %3, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  store i8* %16, i8** %17, align 8
  %18 = or i64 %15, -9223372036854775808
  %19 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %3, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 2
  store i64 %18, i64* %19, align 8
  %20 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %3, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  store i64 %7, i64* %20, align 8
  br label %26

21:                                               ; preds = %11
  %22 = trunc i64 %7 to i8
  %23 = bitcast %"class.std::__1::basic_string"* %3 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %24 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %23, i64 0, i32 1, i32 0
  store i8 %22, i8* %24, align 1
  %25 = icmp eq i64 %7, 0
  br i1 %25, label %28, label %26

26:                                               ; preds = %21, %13
  %27 = phi i8* [ %16, %13 ], [ %4, %21 ]
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 1 %27, i8* align 1 %6, i64 %7, i1 false) #10
  br label %28

28:                                               ; preds = %21, %26
  %29 = phi i8* [ %4, %21 ], [ %27, %26 ]
  %30 = getelementptr inbounds i8, i8* %29, i64 %7
  store i8 0, i8* %30, align 1
  %31 = getelementptr inbounds %"class.gl::GLContextStub", %"class.gl::GLContextStub"* %0, i64 0, i32 3
  %32 = bitcast %"class.std::__1::basic_string"* %31 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %33 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %32, i64 0, i32 1, i32 0
  %34 = load i8, i8* %33, align 1
  %35 = icmp slt i8 %34, 0
  br i1 %35, label %36, label %39

36:                                               ; preds = %28
  %37 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %31, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %38 = load i8*, i8** %37, align 8
  tail call void @_ZdlPv(i8* %38) #12
  br label %39

39:                                               ; preds = %36, %28
  %40 = bitcast %"class.std::__1::basic_string"* %31 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %40, i8* nonnull align 8 %4, i64 24, i1 false) #10
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %4) #10
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #4

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #4

declare zeroext i1 @_ZN2gl9GLContext12HasExtensionEPKc(%"class.gl::GLContext"*, i8*) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2gl13GLContextStubD2Ev(%"class.gl::GLContextStub"*) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.gl::GLContextStub", %"class.gl::GLContextStub"* %0, i64 0, i32 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [23 x i8*] }, { [23 x i8*] }* @_ZTVN2gl13GLContextStubE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8
  %3 = getelementptr inbounds %"class.gl::GLContextStub", %"class.gl::GLContextStub"* %0, i64 0, i32 3
  %4 = bitcast %"class.std::__1::basic_string"* %3 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %5 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %4, i64 0, i32 1, i32 0
  %6 = load i8, i8* %5, align 1
  %7 = icmp slt i8 %6, 0
  br i1 %7, label %8, label %11

8:                                                ; preds = %1
  %9 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %3, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %10 = load i8*, i8** %9, align 8
  tail call void @_ZdlPv(i8* %10) #12
  br label %11

11:                                               ; preds = %1, %8
  %12 = bitcast %"class.gl::GLContextStub"* %0 to %"class.gl::GLContextReal"*
  tail call void @_ZN2gl13GLContextRealD2Ev(%"class.gl::GLContextReal"* %12) #10
  ret void
}

; Function Attrs: nounwind
declare void @_ZN2gl13GLContextRealD2Ev(%"class.gl::GLContextReal"*) unnamed_addr #5

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2gl13GLContextStubD0Ev(%"class.gl::GLContextStub"*) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.gl::GLContextStub", %"class.gl::GLContextStub"* %0, i64 0, i32 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [23 x i8*] }, { [23 x i8*] }* @_ZTVN2gl13GLContextStubE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8
  %3 = getelementptr inbounds %"class.gl::GLContextStub", %"class.gl::GLContextStub"* %0, i64 0, i32 3
  %4 = bitcast %"class.std::__1::basic_string"* %3 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %5 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %4, i64 0, i32 1, i32 0
  %6 = load i8, i8* %5, align 1
  %7 = icmp slt i8 %6, 0
  br i1 %7, label %8, label %11

8:                                                ; preds = %1
  %9 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %3, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %10 = load i8*, i8** %9, align 8
  tail call void @_ZdlPv(i8* %10) #12
  br label %11

11:                                               ; preds = %1, %8
  %12 = bitcast %"class.gl::GLContextStub"* %0 to %"class.gl::GLContextReal"*
  tail call void @_ZN2gl13GLContextRealD2Ev(%"class.gl::GLContextReal"* %12) #10
  %13 = bitcast %"class.gl::GLContextStub"* %0 to i8*
  tail call void @_ZdlPv(i8* %13) #12
  ret void
}

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #6

; Function Attrs: nounwind ssp uwtable
define hidden %"class.gl::GLApi"* @_ZN2gl13GLContextStub11CreateGLApiEPNS_8DriverGLE(%"class.gl::GLContextStub"*, %"struct.gl::DriverGL"*) unnamed_addr #0 align 2 {
  %3 = alloca %"class.std::__1::basic_string", align 8
  %4 = alloca %"class.std::__1::basic_string", align 8
  %5 = getelementptr inbounds %"class.gl::GLContextStub", %"class.gl::GLContextStub"* %0, i64 0, i32 1
  %6 = load i8, i8* %5, align 1, !range !2
  %7 = icmp eq i8 %6, 0
  br i1 %7, label %82, label %8

8:                                                ; preds = %2
  %9 = tail call i8* @_Znwm(i64 64) #12
  %10 = bitcast i8* %9 to %"class.gl::GLStubApi"*
  tail call void @_ZN2gl9GLStubApiC1Ev(%"class.gl::GLStubApi"* nonnull %10) #10
  %11 = getelementptr inbounds %"class.gl::GLContextStub", %"class.gl::GLContextStub"* %0, i64 0, i32 3
  %12 = bitcast %"class.std::__1::basic_string"* %11 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %13 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %12, i64 0, i32 1, i32 0
  %14 = load i8, i8* %13, align 1
  %15 = icmp slt i8 %14, 0
  br i1 %15, label %16, label %19

16:                                               ; preds = %8
  %17 = getelementptr inbounds %"class.gl::GLContextStub", %"class.gl::GLContextStub"* %0, i64 0, i32 3, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %18 = load i64, i64* %17, align 8
  br label %21

19:                                               ; preds = %8
  %20 = zext i8 %14 to i64
  br label %21

21:                                               ; preds = %16, %19
  %22 = phi i64 [ %18, %16 ], [ %20, %19 ]
  %23 = icmp eq i64 %22, 0
  br i1 %23, label %45, label %24

24:                                               ; preds = %21
  br i1 %15, label %28, label %25

25:                                               ; preds = %24
  %26 = bitcast %"class.std::__1::basic_string"* %3 to i8*
  %27 = bitcast %"class.std::__1::basic_string"* %11 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %26, i8* align 8 %27, i64 24, i1 false) #10
  br label %33

28:                                               ; preds = %24
  %29 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %11, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %30 = load i8*, i8** %29, align 8
  %31 = getelementptr inbounds %"class.gl::GLContextStub", %"class.gl::GLContextStub"* %0, i64 0, i32 3, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %32 = load i64, i64* %31, align 8
  call void @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE25__init_copy_ctor_externalEPKcm(%"class.std::__1::basic_string"* nonnull %3, i8* %30, i64 %32) #10
  br label %33

33:                                               ; preds = %25, %28
  %34 = getelementptr inbounds i8, i8* %9, i64 8
  %35 = getelementptr inbounds i8, i8* %9, i64 31
  %36 = load i8, i8* %35, align 1
  %37 = icmp slt i8 %36, 0
  br i1 %37, label %38, label %41

38:                                               ; preds = %33
  %39 = bitcast i8* %34 to i8**
  %40 = load i8*, i8** %39, align 8
  call void @_ZdlPv(i8* %40) #12
  br label %41

41:                                               ; preds = %38, %33
  %42 = bitcast %"class.std::__1::basic_string"* %3 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %34, i8* nonnull align 8 %42, i64 24, i1 false) #10
  %43 = bitcast %"class.std::__1::basic_string"* %3 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %44 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %43, i64 0, i32 1, i32 0
  store i8 0, i8* %44, align 1
  store i8 0, i8* %42, align 8
  br label %45

45:                                               ; preds = %41, %21
  %46 = getelementptr inbounds %"class.gl::GLContextStub", %"class.gl::GLContextStub"* %0, i64 0, i32 0, i32 3
  %47 = bitcast %"class.std::__1::basic_string"* %46 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %48 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %47, i64 0, i32 1, i32 0
  %49 = load i8, i8* %48, align 1
  %50 = icmp slt i8 %49, 0
  br i1 %50, label %51, label %54

51:                                               ; preds = %45
  %52 = getelementptr inbounds %"class.gl::GLContextStub", %"class.gl::GLContextStub"* %0, i64 0, i32 0, i32 3, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %53 = load i64, i64* %52, align 8
  br label %56

54:                                               ; preds = %45
  %55 = zext i8 %49 to i64
  br label %56

56:                                               ; preds = %51, %54
  %57 = phi i64 [ %53, %51 ], [ %55, %54 ]
  %58 = icmp eq i64 %57, 0
  br i1 %58, label %80, label %59

59:                                               ; preds = %56
  br i1 %50, label %63, label %60

60:                                               ; preds = %59
  %61 = bitcast %"class.std::__1::basic_string"* %4 to i8*
  %62 = bitcast %"class.std::__1::basic_string"* %46 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %61, i8* align 8 %62, i64 24, i1 false) #10
  br label %68

63:                                               ; preds = %59
  %64 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %46, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %65 = load i8*, i8** %64, align 8
  %66 = getelementptr inbounds %"class.gl::GLContextStub", %"class.gl::GLContextStub"* %0, i64 0, i32 0, i32 3, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %67 = load i64, i64* %66, align 8
  call void @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE25__init_copy_ctor_externalEPKcm(%"class.std::__1::basic_string"* nonnull %4, i8* %65, i64 %67) #10
  br label %68

68:                                               ; preds = %60, %63
  %69 = getelementptr inbounds i8, i8* %9, i64 32
  %70 = getelementptr inbounds i8, i8* %9, i64 55
  %71 = load i8, i8* %70, align 1
  %72 = icmp slt i8 %71, 0
  br i1 %72, label %73, label %76

73:                                               ; preds = %68
  %74 = bitcast i8* %69 to i8**
  %75 = load i8*, i8** %74, align 8
  call void @_ZdlPv(i8* %75) #12
  br label %76

76:                                               ; preds = %73, %68
  %77 = bitcast %"class.std::__1::basic_string"* %4 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %69, i8* nonnull align 8 %77, i64 24, i1 false) #10
  %78 = bitcast %"class.std::__1::basic_string"* %4 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %79 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %78, i64 0, i32 1, i32 0
  store i8 0, i8* %79, align 1
  store i8 0, i8* %77, align 8
  br label %80

80:                                               ; preds = %76, %56
  %81 = bitcast i8* %9 to %"class.gl::GLApi"*
  br label %85

82:                                               ; preds = %2
  %83 = bitcast %"class.gl::GLContextStub"* %0 to %"class.gl::GLContext"*
  %84 = tail call %"class.gl::GLApi"* @_ZN2gl9GLContext11CreateGLApiEPNS_8DriverGLE(%"class.gl::GLContext"* %83, %"struct.gl::DriverGL"* %1) #10
  br label %85

85:                                               ; preds = %82, %80
  %86 = phi %"class.gl::GLApi"* [ %81, %80 ], [ %84, %82 ]
  ret %"class.gl::GLApi"* %86
}

; Function Attrs: nobuiltin nofree
declare noalias nonnull i8* @_Znwm(i64) local_unnamed_addr #7

declare void @_ZN2gl9GLStubApiC1Ev(%"class.gl::GLStubApi"*) unnamed_addr #1

declare %"class.gl::GLApi"* @_ZN2gl9GLContext11CreateGLApiEPNS_8DriverGLE(%"class.gl::GLContext"*, %"struct.gl::DriverGL"*) unnamed_addr #1

declare void @_ZN2gl13GLContextReal21CreateGPUTimingClientEv() unnamed_addr

declare dereferenceable(24) %"class.base::internal::flat_tree"* @_ZN2gl13GLContextReal13GetExtensionsEv(%"class.gl::GLContextReal"*) unnamed_addr #1

declare void @_ZN2gl9GLContext23SetSafeToForceGpuSwitchEv(%"class.gl::GLContext"*) unnamed_addr #1

declare zeroext i1 @_ZN2gl9GLContext22ForceGpuSwitchIfNeededEv(%"class.gl::GLContext"*) unnamed_addr #1

declare void @_ZN2gl9GLContext25SetUnbindFboOnMakeCurrentEv(%"class.gl::GLContext"*) unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN2gl9GLContext13SetVisibilityEb(%"class.gl::GLContext"*, i1 zeroext) unnamed_addr #0 comdat align 2 {
  ret void
}

declare %"class.gl::YUVToRGBConverter"* @_ZN2gl9GLContext20GetYUVToRGBConverterERKN3gfx10ColorSpaceE(%"class.gl::GLContext"*, %"class.gfx::ColorSpace"*) unnamed_addr #1

declare void @_ZN2gl9GLContext28ForceReleaseVirtuallyCurrentEv(%"class.gl::GLContext"*) unnamed_addr #1

declare void @_ZN2gl13GLContextReal10SetCurrentEPNS_9GLSurfaceE(%"class.gl::GLContextReal"*, %"class.gl::GLSurface"*) unnamed_addr #1

declare void @_ZN2gl13GLContextReal15ResetExtensionsEv(%"class.gl::GLContextReal"*) unnamed_addr #1

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #4

; Function Attrs: noreturn
declare void @_ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__basic_string_common"*) local_unnamed_addr #8

; Function Attrs: argmemonly nofree nounwind readonly
declare i64 @strlen(i8* nocapture) local_unnamed_addr #9

declare void @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE25__init_copy_ctor_externalEPKcm(%"class.std::__1::basic_string"*, i8*, i64) local_unnamed_addr #1

declare i8* @_ZNK4base18ThreadLocalStorage4Slot3GetEv(%"class.base::ThreadLocalStorage::Slot"*) local_unnamed_addr #1

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { norecurse nounwind readnone ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nofree norecurse nounwind ssp uwtable writeonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { argmemonly nounwind }
attributes #5 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { nobuiltin nofree "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #9 = { argmemonly nofree nounwind readonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #10 = { nounwind }
attributes #11 = { noreturn nounwind }
attributes #12 = { builtin nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{i8 0, i8 2}
