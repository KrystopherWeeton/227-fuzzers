; ModuleID = '../../third_party/pdfium/third_party/libopenjpeg20/pi.c'
source_filename = "../../third_party/pdfium/third_party/libopenjpeg20/pi.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%struct.opj_pi_iterator = type { i8, i16*, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %struct.opj_poc, i32, %struct.opj_pi_comp*, i32, i32, i32, i32, i32, i32, i32, i32, %struct.opj_event_mgr* }
%struct.opj_poc = type { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, [5 x i8], i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }
%struct.opj_pi_comp = type { i32, i32, i32, %struct.opj_pi_resolution* }
%struct.opj_pi_resolution = type { i32, i32, i32, i32 }
%struct.opj_image = type { i32, i32, i32, i32, i32, i32, %struct.opj_image_comp*, i8*, i32 }
%struct.opj_image_comp = type { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32*, i16 }
%struct.opj_cp = type { i16, i32, i32, i32, i32, i8*, i32, i32, i32, %struct.opj_ppx_struct*, i8*, i32, i32, i8*, i8*, i8*, i32, i32, i32, %struct.opj_tcp*, %union.anon, i8 }
%struct.opj_ppx_struct = type { i8*, i32 }
%struct.opj_tcp = type { i32, i32, i32, i32, i32, [100 x float], i32, [32 x %struct.opj_poc], i32, %struct.opj_ppx_struct*, i8*, i8*, i32, i32, [100 x float], %struct.opj_tccp*, i32, i32, i8*, i32, double*, float*, float*, %struct.opj_mct_data*, i32, i32, %struct.opj_simple_mcc_decorrelation_data*, i32, i32, i8 }
%struct.opj_tccp = type { i32, i32, i32, i32, i32, i32, i32, [97 x %struct.opj_stepsize], i32, i32, [33 x i32], [33 x i32], i32 }
%struct.opj_stepsize = type { i32, i32 }
%struct.opj_mct_data = type { i32, i32, i32, i8*, i32 }
%struct.opj_simple_mcc_decorrelation_data = type { i32, i32, %struct.opj_mct_data*, %struct.opj_mct_data*, i8 }
%union.anon = type { %struct.opj_encoding_param }
%struct.opj_encoding_param = type { i32, i32, i32*, i8, i8 }
%struct.opj_event_mgr = type { i8*, i8*, i8*, void (i8*, i8*)*, void (i8*, i8*)*, void (i8*, i8*)* }

@.str = private unnamed_addr constant [45 x i8] c"opj_pi_next_lrcp(): invalid compno0/compno1\0A\00", align 1
@.str.1 = private unnamed_addr constant [30 x i8] c"Invalid access to pi->include\00", align 1
@.str.2 = private unnamed_addr constant [45 x i8] c"opj_pi_next_rlcp(): invalid compno0/compno1\0A\00", align 1
@.str.3 = private unnamed_addr constant [45 x i8] c"opj_pi_next_rpcl(): invalid compno0/compno1\0A\00", align 1
@.str.4 = private unnamed_addr constant [45 x i8] c"opj_pi_next_pcrl(): invalid compno0/compno1\0A\00", align 1
@.str.5 = private unnamed_addr constant [45 x i8] c"opj_pi_next_cprl(): invalid compno0/compno1\0A\00", align 1

; Function Attrs: nounwind ssp uwtable
define hidden %struct.opj_pi_iterator* @opj_pi_create_decode(%struct.opj_image* nocapture readonly, %struct.opj_cp* nocapture readonly, i32, %struct.opj_event_mgr*) local_unnamed_addr #0 {
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  %7 = alloca i32, align 4
  %8 = alloca i32, align 4
  %9 = alloca i32, align 4
  %10 = alloca i32, align 4
  %11 = alloca i32, align 4
  %12 = alloca i32, align 4
  %13 = getelementptr inbounds %struct.opj_image, %struct.opj_image* %0, i64 0, i32 4
  %14 = load i32, i32* %13, align 8
  %15 = bitcast i32* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %15) #5
  store i32 -1431655766, i32* %5, align 4
  %16 = bitcast i32* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %16) #5
  store i32 -1431655766, i32* %6, align 4
  %17 = bitcast i32* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %17) #5
  store i32 -1431655766, i32* %7, align 4
  %18 = bitcast i32* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %18) #5
  store i32 -1431655766, i32* %8, align 4
  %19 = bitcast i32* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %19) #5
  store i32 -1431655766, i32* %9, align 4
  %20 = bitcast i32* %10 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %20) #5
  store i32 -1431655766, i32* %10, align 4
  %21 = bitcast i32* %11 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %21) #5
  store i32 -1431655766, i32* %11, align 4
  %22 = bitcast i32* %12 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %22) #5
  store i32 -1431655766, i32* %12, align 4
  %23 = getelementptr inbounds %struct.opj_cp, %struct.opj_cp* %1, i64 0, i32 19
  %24 = load %struct.opj_tcp*, %struct.opj_tcp** %23, align 8
  %25 = zext i32 %2 to i64
  %26 = getelementptr inbounds %struct.opj_tcp, %struct.opj_tcp* %24, i64 %25, i32 6
  %27 = load i32, i32* %26, align 4
  %28 = add i32 %27, 1
  %29 = mul i32 %14, 132
  %30 = zext i32 %29 to i64
  %31 = shl nuw nsw i64 %30, 2
  %32 = tail call i8* @opj_malloc(i64 %31) #5
  %33 = bitcast i8* %32 to i32*
  %34 = icmp eq i8* %32, null
  br i1 %34, label %304, label %35

35:                                               ; preds = %4
  %36 = zext i32 %14 to i64
  %37 = shl nuw nsw i64 %36, 3
  %38 = tail call i8* @opj_malloc(i64 %37) #5
  %39 = bitcast i8* %38 to i32**
  %40 = icmp eq i8* %38, null
  br i1 %40, label %41, label %42

41:                                               ; preds = %35
  tail call void @opj_free(i8* nonnull %32) #5
  br label %304

42:                                               ; preds = %35
  %43 = tail call fastcc %struct.opj_pi_iterator* @opj_pi_create(%struct.opj_image* %0, %struct.opj_cp* %1, i32 %2, %struct.opj_event_mgr* %3)
  %44 = icmp eq %struct.opj_pi_iterator* %43, null
  br i1 %44, label %81, label %45

45:                                               ; preds = %42
  %46 = icmp eq i32 %14, 0
  br i1 %46, label %89, label %47

47:                                               ; preds = %45
  %48 = icmp ult i32 %14, 4
  br i1 %48, label %49, label %52

49:                                               ; preds = %79, %47
  %50 = phi i64 [ 0, %47 ], [ %53, %79 ]
  %51 = phi i32* [ %33, %47 ], [ %55, %79 ]
  br label %82

52:                                               ; preds = %47
  %53 = and i64 %36, 4294967292
  %54 = mul nuw nsw i64 %53, 132
  %55 = getelementptr i32, i32* %33, i64 %54
  br label %56

56:                                               ; preds = %56, %52
  %57 = phi i64 [ 0, %52 ], [ %77, %56 ]
  %58 = mul i64 %57, 132
  %59 = getelementptr i32, i32* %33, i64 %58
  %60 = or i64 %57, 1
  %61 = mul i64 %60, 132
  %62 = getelementptr i32, i32* %33, i64 %61
  %63 = insertelement <2 x i32*> undef, i32* %59, i32 0
  %64 = insertelement <2 x i32*> %63, i32* %62, i32 1
  %65 = or i64 %57, 2
  %66 = mul i64 %65, 132
  %67 = getelementptr i32, i32* %33, i64 %66
  %68 = or i64 %57, 3
  %69 = mul i64 %68, 132
  %70 = getelementptr i32, i32* %33, i64 %69
  %71 = insertelement <2 x i32*> undef, i32* %67, i32 0
  %72 = insertelement <2 x i32*> %71, i32* %70, i32 1
  %73 = getelementptr inbounds i32*, i32** %39, i64 %57
  %74 = bitcast i32** %73 to <2 x i32*>*
  store <2 x i32*> %64, <2 x i32*>* %74, align 8
  %75 = getelementptr inbounds i32*, i32** %73, i64 2
  %76 = bitcast i32** %75 to <2 x i32*>*
  store <2 x i32*> %72, <2 x i32*>* %76, align 8
  %77 = add i64 %57, 4
  %78 = icmp eq i64 %77, %53
  br i1 %78, label %79, label %56, !llvm.loop !2

79:                                               ; preds = %56
  %80 = icmp eq i64 %53, %36
  br i1 %80, label %89, label %49

81:                                               ; preds = %42
  tail call void @opj_free(i8* nonnull %32) #5
  tail call void @opj_free(i8* nonnull %38) #5
  br label %304

82:                                               ; preds = %49, %82
  %83 = phi i64 [ %87, %82 ], [ %50, %49 ]
  %84 = phi i32* [ %86, %82 ], [ %51, %49 ]
  %85 = getelementptr inbounds i32*, i32** %39, i64 %83
  store i32* %84, i32** %85, align 8
  %86 = getelementptr inbounds i32, i32* %84, i64 132
  %87 = add nuw nsw i64 %83, 1
  %88 = icmp eq i64 %87, %36
  br i1 %88, label %89, label %82, !llvm.loop !4

89:                                               ; preds = %82, %79, %45
  call fastcc void @opj_get_all_encoding_parameters(%struct.opj_image* %0, %struct.opj_cp* %1, i32 %2, i32* nonnull %7, i32* nonnull %8, i32* nonnull %9, i32* nonnull %10, i32* nonnull %11, i32* nonnull %12, i32* nonnull %6, i32* nonnull %5, i32** nonnull %39)
  %90 = load i32, i32* %6, align 4
  %91 = mul i32 %90, %14
  %92 = load i32, i32* %5, align 4
  %93 = mul i32 %92, %91
  %94 = getelementptr inbounds %struct.opj_pi_iterator, %struct.opj_pi_iterator* %43, i64 0, i32 1
  store i16* null, i16** %94, align 8
  %95 = getelementptr inbounds %struct.opj_tcp, %struct.opj_tcp* %24, i64 %25, i32 2
  %96 = load i32, i32* %95, align 8
  %97 = add i32 %96, 1
  %98 = udiv i32 -1, %97
  %99 = icmp ugt i32 %93, %98
  br i1 %99, label %107, label %100

100:                                              ; preds = %89
  %101 = mul i32 %97, %93
  %102 = getelementptr inbounds %struct.opj_pi_iterator, %struct.opj_pi_iterator* %43, i64 0, i32 2
  store i32 %101, i32* %102, align 8
  %103 = zext i32 %101 to i64
  %104 = tail call i8* @opj_calloc(i64 %103, i64 2) #5
  %105 = bitcast i16** %94 to i8**
  store i8* %104, i8** %105, align 8
  %106 = icmp eq i8* %104, null
  br i1 %106, label %107, label %108

107:                                              ; preds = %89, %100
  tail call void @opj_free(i8* nonnull %32) #5
  tail call void @opj_free(i8* nonnull %38) #5
  tail call void @opj_pi_destroy(%struct.opj_pi_iterator* nonnull %43, i32 %28)
  br label %304

108:                                              ; preds = %100
  %109 = getelementptr inbounds %struct.opj_pi_iterator, %struct.opj_pi_iterator* %43, i64 0, i32 14
  %110 = load %struct.opj_pi_comp*, %struct.opj_pi_comp** %109, align 8
  %111 = getelementptr inbounds %struct.opj_image, %struct.opj_image* %0, i64 0, i32 6
  %112 = load %struct.opj_image_comp*, %struct.opj_image_comp** %111, align 8
  %113 = load i32, i32* %7, align 4
  %114 = getelementptr inbounds %struct.opj_pi_iterator, %struct.opj_pi_iterator* %43, i64 0, i32 15
  store i32 %113, i32* %114, align 8
  %115 = load i32, i32* %9, align 4
  %116 = getelementptr inbounds %struct.opj_pi_iterator, %struct.opj_pi_iterator* %43, i64 0, i32 16
  store i32 %115, i32* %116, align 4
  %117 = load i32, i32* %8, align 4
  %118 = getelementptr inbounds %struct.opj_pi_iterator, %struct.opj_pi_iterator* %43, i64 0, i32 17
  store i32 %117, i32* %118, align 8
  %119 = load i32, i32* %10, align 4
  %120 = getelementptr inbounds %struct.opj_pi_iterator, %struct.opj_pi_iterator* %43, i64 0, i32 18
  store i32 %119, i32* %120, align 4
  %121 = getelementptr inbounds %struct.opj_pi_iterator, %struct.opj_pi_iterator* %43, i64 0, i32 6
  store i32 1, i32* %121, align 8
  %122 = getelementptr inbounds %struct.opj_pi_iterator, %struct.opj_pi_iterator* %43, i64 0, i32 5
  store i32 %90, i32* %122, align 4
  %123 = getelementptr inbounds %struct.opj_pi_iterator, %struct.opj_pi_iterator* %43, i64 0, i32 4
  store i32 %91, i32* %123, align 8
  %124 = getelementptr inbounds %struct.opj_pi_iterator, %struct.opj_pi_iterator* %43, i64 0, i32 3
  store i32 %93, i32* %124, align 4
  br i1 %46, label %125, label %127

125:                                              ; preds = %164, %108
  %126 = icmp ugt i32 %28, 1
  br i1 %126, label %169, label %237

127:                                              ; preds = %108, %164
  %128 = phi i64 [ %167, %164 ], [ 0, %108 ]
  %129 = phi %struct.opj_image_comp* [ %166, %164 ], [ %112, %108 ]
  %130 = phi %struct.opj_pi_comp* [ %165, %164 ], [ %110, %108 ]
  %131 = getelementptr inbounds %struct.opj_pi_comp, %struct.opj_pi_comp* %130, i64 0, i32 3
  %132 = load %struct.opj_pi_resolution*, %struct.opj_pi_resolution** %131, align 8
  %133 = getelementptr inbounds i32*, i32** %39, i64 %128
  %134 = load i32*, i32** %133, align 8
  %135 = getelementptr inbounds %struct.opj_image_comp, %struct.opj_image_comp* %129, i64 0, i32 0
  %136 = load i32, i32* %135, align 8
  %137 = getelementptr inbounds %struct.opj_pi_comp, %struct.opj_pi_comp* %130, i64 0, i32 0
  store i32 %136, i32* %137, align 8
  %138 = getelementptr inbounds %struct.opj_image_comp, %struct.opj_image_comp* %129, i64 0, i32 1
  %139 = load i32, i32* %138, align 4
  %140 = getelementptr inbounds %struct.opj_pi_comp, %struct.opj_pi_comp* %130, i64 0, i32 1
  store i32 %139, i32* %140, align 4
  %141 = getelementptr inbounds %struct.opj_pi_comp, %struct.opj_pi_comp* %130, i64 0, i32 2
  %142 = load i32, i32* %141, align 8
  %143 = icmp eq i32 %142, 0
  br i1 %143, label %164, label %144

144:                                              ; preds = %127, %144
  %145 = phi %struct.opj_pi_resolution* [ %160, %144 ], [ %132, %127 ]
  %146 = phi i32* [ %157, %144 ], [ %134, %127 ]
  %147 = phi i32 [ %161, %144 ], [ 0, %127 ]
  %148 = getelementptr inbounds i32, i32* %146, i64 1
  %149 = load i32, i32* %146, align 4
  %150 = getelementptr inbounds %struct.opj_pi_resolution, %struct.opj_pi_resolution* %145, i64 0, i32 0
  store i32 %149, i32* %150, align 4
  %151 = getelementptr inbounds i32, i32* %146, i64 2
  %152 = load i32, i32* %148, align 4
  %153 = getelementptr inbounds %struct.opj_pi_resolution, %struct.opj_pi_resolution* %145, i64 0, i32 1
  store i32 %152, i32* %153, align 4
  %154 = getelementptr inbounds i32, i32* %146, i64 3
  %155 = load i32, i32* %151, align 4
  %156 = getelementptr inbounds %struct.opj_pi_resolution, %struct.opj_pi_resolution* %145, i64 0, i32 2
  store i32 %155, i32* %156, align 4
  %157 = getelementptr inbounds i32, i32* %146, i64 4
  %158 = load i32, i32* %154, align 4
  %159 = getelementptr inbounds %struct.opj_pi_resolution, %struct.opj_pi_resolution* %145, i64 0, i32 3
  store i32 %158, i32* %159, align 4
  %160 = getelementptr inbounds %struct.opj_pi_resolution, %struct.opj_pi_resolution* %145, i64 1
  %161 = add nuw i32 %147, 1
  %162 = load i32, i32* %141, align 8
  %163 = icmp ult i32 %161, %162
  br i1 %163, label %144, label %164

164:                                              ; preds = %144, %127
  %165 = getelementptr inbounds %struct.opj_pi_comp, %struct.opj_pi_comp* %130, i64 1
  %166 = getelementptr inbounds %struct.opj_image_comp, %struct.opj_image_comp* %129, i64 1
  %167 = add nuw nsw i64 %128, 1
  %168 = icmp eq i64 %167, %36
  br i1 %168, label %125, label %127

169:                                              ; preds = %125, %226
  %170 = phi %struct.opj_pi_iterator* [ %172, %226 ], [ %43, %125 ]
  %171 = phi i32 [ %235, %226 ], [ 1, %125 ]
  %172 = getelementptr inbounds %struct.opj_pi_iterator, %struct.opj_pi_iterator* %170, i64 1
  %173 = getelementptr inbounds %struct.opj_pi_iterator, %struct.opj_pi_iterator* %170, i64 1, i32 14
  %174 = load %struct.opj_pi_comp*, %struct.opj_pi_comp** %173, align 8
  %175 = load %struct.opj_image_comp*, %struct.opj_image_comp** %111, align 8
  %176 = getelementptr inbounds %struct.opj_pi_iterator, %struct.opj_pi_iterator* %170, i64 1, i32 15
  store i32 %113, i32* %176, align 8
  %177 = getelementptr inbounds %struct.opj_pi_iterator, %struct.opj_pi_iterator* %170, i64 1, i32 16
  store i32 %115, i32* %177, align 4
  %178 = getelementptr inbounds %struct.opj_pi_iterator, %struct.opj_pi_iterator* %170, i64 1, i32 17
  store i32 %117, i32* %178, align 8
  %179 = getelementptr inbounds %struct.opj_pi_iterator, %struct.opj_pi_iterator* %170, i64 1, i32 18
  store i32 %119, i32* %179, align 4
  %180 = getelementptr inbounds %struct.opj_pi_iterator, %struct.opj_pi_iterator* %170, i64 1, i32 6
  store i32 1, i32* %180, align 8
  %181 = getelementptr inbounds %struct.opj_pi_iterator, %struct.opj_pi_iterator* %170, i64 1, i32 5
  store i32 %90, i32* %181, align 4
  %182 = getelementptr inbounds %struct.opj_pi_iterator, %struct.opj_pi_iterator* %170, i64 1, i32 4
  store i32 %91, i32* %182, align 8
  %183 = getelementptr inbounds %struct.opj_pi_iterator, %struct.opj_pi_iterator* %170, i64 1, i32 3
  store i32 %93, i32* %183, align 4
  br i1 %46, label %226, label %184

184:                                              ; preds = %169, %221
  %185 = phi i64 [ %224, %221 ], [ 0, %169 ]
  %186 = phi %struct.opj_image_comp* [ %223, %221 ], [ %175, %169 ]
  %187 = phi %struct.opj_pi_comp* [ %222, %221 ], [ %174, %169 ]
  %188 = getelementptr inbounds %struct.opj_pi_comp, %struct.opj_pi_comp* %187, i64 0, i32 3
  %189 = load %struct.opj_pi_resolution*, %struct.opj_pi_resolution** %188, align 8
  %190 = getelementptr inbounds i32*, i32** %39, i64 %185
  %191 = load i32*, i32** %190, align 8
  %192 = getelementptr inbounds %struct.opj_image_comp, %struct.opj_image_comp* %186, i64 0, i32 0
  %193 = load i32, i32* %192, align 8
  %194 = getelementptr inbounds %struct.opj_pi_comp, %struct.opj_pi_comp* %187, i64 0, i32 0
  store i32 %193, i32* %194, align 8
  %195 = getelementptr inbounds %struct.opj_image_comp, %struct.opj_image_comp* %186, i64 0, i32 1
  %196 = load i32, i32* %195, align 4
  %197 = getelementptr inbounds %struct.opj_pi_comp, %struct.opj_pi_comp* %187, i64 0, i32 1
  store i32 %196, i32* %197, align 4
  %198 = getelementptr inbounds %struct.opj_pi_comp, %struct.opj_pi_comp* %187, i64 0, i32 2
  %199 = load i32, i32* %198, align 8
  %200 = icmp eq i32 %199, 0
  br i1 %200, label %221, label %201

201:                                              ; preds = %184, %201
  %202 = phi %struct.opj_pi_resolution* [ %217, %201 ], [ %189, %184 ]
  %203 = phi i32* [ %214, %201 ], [ %191, %184 ]
  %204 = phi i32 [ %218, %201 ], [ 0, %184 ]
  %205 = getelementptr inbounds i32, i32* %203, i64 1
  %206 = load i32, i32* %203, align 4
  %207 = getelementptr inbounds %struct.opj_pi_resolution, %struct.opj_pi_resolution* %202, i64 0, i32 0
  store i32 %206, i32* %207, align 4
  %208 = getelementptr inbounds i32, i32* %203, i64 2
  %209 = load i32, i32* %205, align 4
  %210 = getelementptr inbounds %struct.opj_pi_resolution, %struct.opj_pi_resolution* %202, i64 0, i32 1
  store i32 %209, i32* %210, align 4
  %211 = getelementptr inbounds i32, i32* %203, i64 3
  %212 = load i32, i32* %208, align 4
  %213 = getelementptr inbounds %struct.opj_pi_resolution, %struct.opj_pi_resolution* %202, i64 0, i32 2
  store i32 %212, i32* %213, align 4
  %214 = getelementptr inbounds i32, i32* %203, i64 4
  %215 = load i32, i32* %211, align 4
  %216 = getelementptr inbounds %struct.opj_pi_resolution, %struct.opj_pi_resolution* %202, i64 0, i32 3
  store i32 %215, i32* %216, align 4
  %217 = getelementptr inbounds %struct.opj_pi_resolution, %struct.opj_pi_resolution* %202, i64 1
  %218 = add nuw i32 %204, 1
  %219 = load i32, i32* %198, align 8
  %220 = icmp ult i32 %218, %219
  br i1 %220, label %201, label %221

221:                                              ; preds = %201, %184
  %222 = getelementptr inbounds %struct.opj_pi_comp, %struct.opj_pi_comp* %187, i64 1
  %223 = getelementptr inbounds %struct.opj_image_comp, %struct.opj_image_comp* %186, i64 1
  %224 = add nuw nsw i64 %185, 1
  %225 = icmp eq i64 %224, %36
  br i1 %225, label %226, label %184

226:                                              ; preds = %221, %169
  %227 = getelementptr inbounds %struct.opj_pi_iterator, %struct.opj_pi_iterator* %170, i64 0, i32 1
  %228 = bitcast i16** %227 to i64*
  %229 = load i64, i64* %228, align 8
  %230 = getelementptr inbounds %struct.opj_pi_iterator, %struct.opj_pi_iterator* %170, i64 1, i32 1
  %231 = bitcast i16** %230 to i64*
  store i64 %229, i64* %231, align 8
  %232 = getelementptr inbounds %struct.opj_pi_iterator, %struct.opj_pi_iterator* %170, i64 0, i32 2
  %233 = load i32, i32* %232, align 8
  %234 = getelementptr inbounds %struct.opj_pi_iterator, %struct.opj_pi_iterator* %170, i64 1, i32 2
  store i32 %233, i32* %234, align 8
  %235 = add nuw i32 %171, 1
  %236 = icmp eq i32 %235, %28
  br i1 %236, label %237, label %169

237:                                              ; preds = %226, %125
  tail call void @opj_free(i8* nonnull %32) #5
  tail call void @opj_free(i8* nonnull %38) #5
  %238 = getelementptr inbounds %struct.opj_tcp, %struct.opj_tcp* %24, i64 %25, i32 29
  %239 = load i8, i8* %238, align 8
  %240 = and i8 %239, 4
  %241 = icmp eq i8 %240, 0
  %242 = load i32, i32* %26, align 4
  %243 = add i32 %242, 1
  %244 = icmp eq i32 %243, 0
  br i1 %241, label %281, label %245

245:                                              ; preds = %237
  br i1 %244, label %304, label %246

246:                                              ; preds = %245
  %247 = getelementptr inbounds %struct.opj_tcp, %struct.opj_tcp* %24, i64 %25, i32 7, i64 0
  br label %248

248:                                              ; preds = %248, %246
  %249 = phi %struct.opj_poc* [ %247, %246 ], [ %278, %248 ]
  %250 = phi %struct.opj_pi_iterator* [ %43, %246 ], [ %277, %248 ]
  %251 = phi i32 [ 0, %246 ], [ %279, %248 ]
  %252 = getelementptr inbounds %struct.opj_poc, %struct.opj_poc* %249, i64 0, i32 9
  %253 = load i32, i32* %252, align 4
  %254 = getelementptr inbounds %struct.opj_pi_iterator, %struct.opj_pi_iterator* %250, i64 0, i32 12, i32 9
  store i32 %253, i32* %254, align 4
  %255 = getelementptr inbounds %struct.opj_pi_iterator, %struct.opj_pi_iterator* %250, i64 0, i32 11
  store i32 1, i32* %255, align 4
  %256 = getelementptr inbounds %struct.opj_poc, %struct.opj_poc* %249, i64 0, i32 0
  %257 = load i32, i32* %256, align 4
  %258 = getelementptr inbounds %struct.opj_pi_iterator, %struct.opj_pi_iterator* %250, i64 0, i32 12, i32 0
  store i32 %257, i32* %258, align 8
  %259 = getelementptr inbounds %struct.opj_poc, %struct.opj_poc* %249, i64 0, i32 1
  %260 = load i32, i32* %259, align 4
  %261 = getelementptr inbounds %struct.opj_pi_iterator, %struct.opj_pi_iterator* %250, i64 0, i32 12, i32 1
  store i32 %260, i32* %261, align 4
  %262 = getelementptr inbounds %struct.opj_pi_iterator, %struct.opj_pi_iterator* %250, i64 0, i32 12, i32 5
  store i32 0, i32* %262, align 4
  %263 = getelementptr inbounds %struct.opj_pi_iterator, %struct.opj_pi_iterator* %250, i64 0, i32 12, i32 6
  store i32 0, i32* %263, align 8
  %264 = getelementptr inbounds %struct.opj_poc, %struct.opj_poc* %249, i64 0, i32 3
  %265 = load i32, i32* %264, align 4
  %266 = getelementptr inbounds %struct.opj_pi_iterator, %struct.opj_pi_iterator* %250, i64 0, i32 12, i32 3
  store i32 %265, i32* %266, align 4
  %267 = getelementptr inbounds %struct.opj_poc, %struct.opj_poc* %249, i64 0, i32 4
  %268 = load i32, i32* %267, align 4
  %269 = getelementptr inbounds %struct.opj_pi_iterator, %struct.opj_pi_iterator* %250, i64 0, i32 12, i32 4
  store i32 %268, i32* %269, align 8
  %270 = getelementptr inbounds %struct.opj_poc, %struct.opj_poc* %249, i64 0, i32 2
  %271 = load i32, i32* %270, align 4
  %272 = load i32, i32* %95, align 8
  %273 = icmp ult i32 %271, %272
  %274 = select i1 %273, i32 %271, i32 %272
  %275 = getelementptr inbounds %struct.opj_pi_iterator, %struct.opj_pi_iterator* %250, i64 0, i32 12, i32 2
  store i32 %274, i32* %275, align 8
  %276 = getelementptr inbounds %struct.opj_pi_iterator, %struct.opj_pi_iterator* %250, i64 0, i32 12, i32 7
  store i32 %90, i32* %276, align 4
  %277 = getelementptr inbounds %struct.opj_pi_iterator, %struct.opj_pi_iterator* %250, i64 1
  %278 = getelementptr inbounds %struct.opj_poc, %struct.opj_poc* %249, i64 1
  %279 = add nuw i32 %251, 1
  %280 = icmp eq i32 %279, %243
  br i1 %280, label %304, label %248

281:                                              ; preds = %237
  br i1 %244, label %304, label %282

282:                                              ; preds = %281
  %283 = getelementptr inbounds %struct.opj_tcp, %struct.opj_tcp* %24, i64 %25, i32 1
  br label %284

284:                                              ; preds = %284, %282
  %285 = phi %struct.opj_pi_iterator* [ %43, %282 ], [ %301, %284 ]
  %286 = phi i32 [ 0, %282 ], [ %302, %284 ]
  %287 = load i32, i32* %283, align 4
  %288 = getelementptr inbounds %struct.opj_pi_iterator, %struct.opj_pi_iterator* %285, i64 0, i32 12, i32 9
  store i32 %287, i32* %288, align 4
  %289 = getelementptr inbounds %struct.opj_pi_iterator, %struct.opj_pi_iterator* %285, i64 0, i32 11
  store i32 1, i32* %289, align 4
  %290 = getelementptr inbounds %struct.opj_pi_iterator, %struct.opj_pi_iterator* %285, i64 0, i32 12, i32 0
  store i32 0, i32* %290, align 8
  %291 = getelementptr inbounds %struct.opj_pi_iterator, %struct.opj_pi_iterator* %285, i64 0, i32 12, i32 1
  store i32 0, i32* %291, align 4
  %292 = getelementptr inbounds %struct.opj_pi_iterator, %struct.opj_pi_iterator* %285, i64 0, i32 12, i32 5
  store i32 0, i32* %292, align 4
  %293 = getelementptr inbounds %struct.opj_pi_iterator, %struct.opj_pi_iterator* %285, i64 0, i32 12, i32 6
  store i32 0, i32* %293, align 8
  %294 = getelementptr inbounds %struct.opj_pi_iterator, %struct.opj_pi_iterator* %285, i64 0, i32 12, i32 3
  store i32 %92, i32* %294, align 4
  %295 = getelementptr inbounds %struct.opj_pi_iterator, %struct.opj_pi_iterator* %285, i64 0, i32 13
  %296 = load i32, i32* %295, align 4
  %297 = getelementptr inbounds %struct.opj_pi_iterator, %struct.opj_pi_iterator* %285, i64 0, i32 12, i32 4
  store i32 %296, i32* %297, align 8
  %298 = load i32, i32* %95, align 8
  %299 = getelementptr inbounds %struct.opj_pi_iterator, %struct.opj_pi_iterator* %285, i64 0, i32 12, i32 2
  store i32 %298, i32* %299, align 8
  %300 = getelementptr inbounds %struct.opj_pi_iterator, %struct.opj_pi_iterator* %285, i64 0, i32 12, i32 7
  store i32 %90, i32* %300, align 4
  %301 = getelementptr inbounds %struct.opj_pi_iterator, %struct.opj_pi_iterator* %285, i64 1
  %302 = add nuw i32 %286, 1
  %303 = icmp eq i32 %302, %243
  br i1 %303, label %304, label %284

304:                                              ; preds = %248, %284, %281, %245, %4, %107, %81, %41
  %305 = phi %struct.opj_pi_iterator* [ null, %107 ], [ null, %81 ], [ null, %41 ], [ null, %4 ], [ %43, %245 ], [ %43, %281 ], [ %43, %284 ], [ %43, %248 ]
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %22) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %21) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %20) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %19) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %18) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %17) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %16) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %15) #5
  ret %struct.opj_pi_iterator* %305
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

declare i8* @opj_malloc(i64) local_unnamed_addr #2

declare void @opj_free(i8*) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define internal fastcc %struct.opj_pi_iterator* @opj_pi_create(%struct.opj_image* nocapture readonly, %struct.opj_cp* nocapture readonly, i32, %struct.opj_event_mgr*) unnamed_addr #0 {
  %5 = getelementptr inbounds %struct.opj_cp, %struct.opj_cp* %1, i64 0, i32 19
  %6 = load %struct.opj_tcp*, %struct.opj_tcp** %5, align 8
  %7 = zext i32 %2 to i64
  %8 = getelementptr inbounds %struct.opj_tcp, %struct.opj_tcp* %6, i64 %7, i32 6
  %9 = load i32, i32* %8, align 4
  %10 = add i32 %9, 1
  %11 = zext i32 %10 to i64
  %12 = tail call i8* @opj_calloc(i64 %11, i64 256) #5
  %13 = bitcast i8* %12 to %struct.opj_pi_iterator*
  %14 = icmp eq i8* %12, null
  br i1 %14, label %72, label %15

15:                                               ; preds = %4
  %16 = icmp eq i32 %10, 0
  br i1 %16, label %72, label %17

17:                                               ; preds = %15
  %18 = getelementptr inbounds %struct.opj_image, %struct.opj_image* %0, i64 0, i32 4
  %19 = getelementptr inbounds %struct.opj_tcp, %struct.opj_tcp* %6, i64 %7, i32 15
  br label %20

20:                                               ; preds = %68, %17
  %21 = phi %struct.opj_pi_iterator* [ %13, %17 ], [ %69, %68 ]
  %22 = phi i32 [ 0, %17 ], [ %70, %68 ]
  %23 = getelementptr inbounds %struct.opj_pi_iterator, %struct.opj_pi_iterator* %21, i64 0, i32 23
  store %struct.opj_event_mgr* %3, %struct.opj_event_mgr** %23, align 8
  %24 = load i32, i32* %18, align 8
  %25 = zext i32 %24 to i64
  %26 = tail call i8* @opj_calloc(i64 %25, i64 24) #5
  %27 = getelementptr inbounds %struct.opj_pi_iterator, %struct.opj_pi_iterator* %21, i64 0, i32 14
  %28 = bitcast %struct.opj_pi_comp** %27 to i8**
  store i8* %26, i8** %28, align 8
  %29 = icmp eq i8* %26, null
  br i1 %29, label %30, label %31

30:                                               ; preds = %20
  tail call void @opj_pi_destroy(%struct.opj_pi_iterator* nonnull %13, i32 %10)
  br label %72

31:                                               ; preds = %20
  %32 = load i32, i32* %18, align 8
  %33 = getelementptr inbounds %struct.opj_pi_iterator, %struct.opj_pi_iterator* %21, i64 0, i32 13
  store i32 %32, i32* %33, align 4
  %34 = load i32, i32* %18, align 8
  %35 = icmp eq i32 %34, 0
  br i1 %35, label %68, label %36

36:                                               ; preds = %31
  %37 = load %struct.opj_tccp*, %struct.opj_tccp** %19, align 8
  %38 = getelementptr inbounds %struct.opj_tccp, %struct.opj_tccp* %37, i64 0, i32 1
  %39 = load i32, i32* %38, align 4
  %40 = zext i32 %39 to i64
  %41 = tail call i8* @opj_calloc(i64 %40, i64 16) #5
  %42 = getelementptr inbounds i8, i8* %26, i64 16
  %43 = bitcast i8* %42 to i8**
  store i8* %41, i8** %43, align 8
  %44 = icmp eq i8* %41, null
  br i1 %44, label %47, label %45

45:                                               ; preds = %36
  %46 = bitcast i8* %26 to %struct.opj_pi_comp*
  br label %48

47:                                               ; preds = %36, %58
  tail call void @opj_pi_destroy(%struct.opj_pi_iterator* nonnull %13, i32 %10)
  br label %72

48:                                               ; preds = %45, %58
  %49 = phi i32* [ %61, %58 ], [ %38, %45 ]
  %50 = phi i64 [ %54, %58 ], [ 0, %45 ]
  %51 = phi %struct.opj_pi_comp* [ %59, %58 ], [ %46, %45 ]
  %52 = load i32, i32* %49, align 4
  %53 = getelementptr inbounds %struct.opj_pi_comp, %struct.opj_pi_comp* %51, i64 %50, i32 2
  store i32 %52, i32* %53, align 8
  %54 = add nuw nsw i64 %50, 1
  %55 = load i32, i32* %18, align 8
  %56 = zext i32 %55 to i64
  %57 = icmp ult i64 %54, %56
  br i1 %57, label %58, label %68

58:                                               ; preds = %48
  %59 = load %struct.opj_pi_comp*, %struct.opj_pi_comp** %27, align 8
  %60 = load %struct.opj_tccp*, %struct.opj_tccp** %19, align 8
  %61 = getelementptr inbounds %struct.opj_tccp, %struct.opj_tccp* %60, i64 %54, i32 1
  %62 = load i32, i32* %61, align 4
  %63 = zext i32 %62 to i64
  %64 = tail call i8* @opj_calloc(i64 %63, i64 16) #5
  %65 = getelementptr inbounds %struct.opj_pi_comp, %struct.opj_pi_comp* %59, i64 %54, i32 3
  %66 = bitcast %struct.opj_pi_resolution** %65 to i8**
  store i8* %64, i8** %66, align 8
  %67 = icmp eq i8* %64, null
  br i1 %67, label %47, label %48

68:                                               ; preds = %48, %31
  %69 = getelementptr inbounds %struct.opj_pi_iterator, %struct.opj_pi_iterator* %21, i64 1
  %70 = add nuw i32 %22, 1
  %71 = icmp eq i32 %70, %10
  br i1 %71, label %72, label %20

72:                                               ; preds = %68, %15, %47, %4, %30
  %73 = phi %struct.opj_pi_iterator* [ null, %47 ], [ null, %30 ], [ null, %4 ], [ %13, %15 ], [ %13, %68 ]
  ret %struct.opj_pi_iterator* %73
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal fastcc void @opj_get_all_encoding_parameters(%struct.opj_image* nocapture readonly, %struct.opj_cp* nocapture readonly, i32, i32* nocapture, i32* nocapture, i32* nocapture, i32* nocapture, i32* nocapture, i32* nocapture, i32* nocapture, i32* nocapture, i32** readonly) unnamed_addr #3 {
  %13 = getelementptr inbounds %struct.opj_cp, %struct.opj_cp* %1, i64 0, i32 19
  %14 = load %struct.opj_tcp*, %struct.opj_tcp** %13, align 8
  %15 = zext i32 %2 to i64
  %16 = getelementptr inbounds %struct.opj_tcp, %struct.opj_tcp* %14, i64 %15, i32 15
  %17 = load %struct.opj_tccp*, %struct.opj_tccp** %16, align 8
  %18 = getelementptr inbounds %struct.opj_image, %struct.opj_image* %0, i64 0, i32 6
  %19 = load %struct.opj_image_comp*, %struct.opj_image_comp** %18, align 8
  %20 = getelementptr inbounds %struct.opj_cp, %struct.opj_cp* %1, i64 0, i32 6
  %21 = load i32, i32* %20, align 8
  %22 = urem i32 %2, %21
  %23 = udiv i32 %2, %21
  %24 = getelementptr inbounds %struct.opj_cp, %struct.opj_cp* %1, i64 0, i32 1
  %25 = load i32, i32* %24, align 4
  %26 = getelementptr inbounds %struct.opj_cp, %struct.opj_cp* %1, i64 0, i32 3
  %27 = load i32, i32* %26, align 4
  %28 = mul i32 %27, %22
  %29 = add i32 %28, %25
  %30 = getelementptr inbounds %struct.opj_image, %struct.opj_image* %0, i64 0, i32 0
  %31 = load i32, i32* %30, align 8
  %32 = icmp ugt i32 %29, %31
  %33 = select i1 %32, i32 %29, i32 %31
  store i32 %33, i32* %3, align 4
  %34 = load i32, i32* %26, align 4
  %35 = zext i32 %29 to i64
  %36 = zext i32 %34 to i64
  %37 = add nuw nsw i64 %36, %35
  %38 = lshr i64 %37, 32
  %39 = trunc i64 %38 to i32
  %40 = sub nsw i32 0, %39
  %41 = trunc i64 %37 to i32
  %42 = or i32 %40, %41
  %43 = getelementptr inbounds %struct.opj_image, %struct.opj_image* %0, i64 0, i32 2
  %44 = load i32, i32* %43, align 8
  %45 = icmp ult i32 %42, %44
  %46 = select i1 %45, i32 %42, i32 %44
  store i32 %46, i32* %4, align 4
  %47 = getelementptr inbounds %struct.opj_cp, %struct.opj_cp* %1, i64 0, i32 2
  %48 = load i32, i32* %47, align 8
  %49 = getelementptr inbounds %struct.opj_cp, %struct.opj_cp* %1, i64 0, i32 4
  %50 = load i32, i32* %49, align 8
  %51 = mul i32 %50, %23
  %52 = add i32 %51, %48
  %53 = getelementptr inbounds %struct.opj_image, %struct.opj_image* %0, i64 0, i32 1
  %54 = load i32, i32* %53, align 4
  %55 = icmp ugt i32 %52, %54
  %56 = select i1 %55, i32 %52, i32 %54
  store i32 %56, i32* %5, align 4
  %57 = load i32, i32* %49, align 8
  %58 = zext i32 %52 to i64
  %59 = zext i32 %57 to i64
  %60 = add nuw nsw i64 %59, %58
  %61 = lshr i64 %60, 32
  %62 = trunc i64 %61 to i32
  %63 = sub nsw i32 0, %62
  %64 = trunc i64 %60 to i32
  %65 = or i32 %63, %64
  %66 = getelementptr inbounds %struct.opj_image, %struct.opj_image* %0, i64 0, i32 3
  %67 = load i32, i32* %66, align 4
  %68 = icmp ult i32 %65, %67
  %69 = select i1 %68, i32 %65, i32 %67
  store i32 %69, i32* %6, align 4
  store i32 0, i32* %9, align 4
  store i32 0, i32* %10, align 4
  store i32 2147483647, i32* %7, align 4
  store i32 2147483647, i32* %8, align 4
  %70 = getelementptr inbounds %struct.opj_image, %struct.opj_image* %0, i64 0, i32 4
  %71 = load i32, i32* %70, align 8
  %72 = icmp eq i32 %71, 0
  br i1 %72, label %228, label %73

73:                                               ; preds = %12
  %74 = icmp eq i32** %11, null
  br label %75

75:                                               ; preds = %73, %221
  %76 = phi i64 [ 0, %73 ], [ %224, %221 ]
  %77 = phi %struct.opj_tccp* [ %17, %73 ], [ %222, %221 ]
  %78 = phi %struct.opj_image_comp* [ %19, %73 ], [ %223, %221 ]
  br i1 %74, label %82, label %79

79:                                               ; preds = %75
  %80 = getelementptr inbounds i32*, i32** %11, i64 %76
  %81 = load i32*, i32** %80, align 8
  br label %82

82:                                               ; preds = %75, %79
  %83 = phi i32* [ %81, %79 ], [ null, %75 ]
  %84 = load i32, i32* %3, align 4
  %85 = getelementptr inbounds %struct.opj_image_comp, %struct.opj_image_comp* %78, i64 0, i32 0
  %86 = load i32, i32* %85, align 8
  %87 = zext i32 %84 to i64
  %88 = zext i32 %86 to i64
  %89 = add nsw i64 %88, -1
  %90 = add nsw i64 %89, %87
  %91 = udiv i64 %90, %88
  %92 = load i32, i32* %5, align 4
  %93 = getelementptr inbounds %struct.opj_image_comp, %struct.opj_image_comp* %78, i64 0, i32 1
  %94 = load i32, i32* %93, align 4
  %95 = zext i32 %92 to i64
  %96 = zext i32 %94 to i64
  %97 = add nsw i64 %96, -1
  %98 = add nsw i64 %97, %95
  %99 = udiv i64 %98, %96
  %100 = load i32, i32* %4, align 4
  %101 = zext i32 %100 to i64
  %102 = add nsw i64 %89, %101
  %103 = udiv i64 %102, %88
  %104 = load i32, i32* %6, align 4
  %105 = zext i32 %104 to i64
  %106 = add nsw i64 %97, %105
  %107 = udiv i64 %106, %96
  %108 = getelementptr inbounds %struct.opj_tccp, %struct.opj_tccp* %77, i64 0, i32 1
  %109 = load i32, i32* %108, align 4
  %110 = load i32, i32* %10, align 4
  %111 = icmp ugt i32 %109, %110
  br i1 %111, label %112, label %114

112:                                              ; preds = %82
  store i32 %109, i32* %10, align 4
  %113 = load i32, i32* %108, align 4
  br label %114

114:                                              ; preds = %112, %82
  %115 = phi i32 [ %113, %112 ], [ %109, %82 ]
  %116 = icmp eq i32 %115, 0
  br i1 %116, label %221, label %117

117:                                              ; preds = %114
  %118 = and i64 %91, 4294967295
  %119 = and i64 %99, 4294967295
  %120 = and i64 %103, 4294967295
  %121 = and i64 %107, 4294967295
  br label %122

122:                                              ; preds = %117, %216
  %123 = phi i64 [ 0, %117 ], [ %217, %216 ]
  %124 = phi i32 [ %115, %117 ], [ %126, %216 ]
  %125 = phi i32* [ %83, %117 ], [ %211, %216 ]
  %126 = add i32 %124, -1
  %127 = getelementptr inbounds %struct.opj_tccp, %struct.opj_tccp* %77, i64 0, i32 10, i64 %123
  %128 = load i32, i32* %127, align 4
  %129 = getelementptr inbounds %struct.opj_tccp, %struct.opj_tccp* %77, i64 0, i32 11, i64 %123
  %130 = load i32, i32* %129, align 4
  %131 = icmp eq i32* %125, null
  br i1 %131, label %135, label %132

132:                                              ; preds = %122
  %133 = getelementptr inbounds i32, i32* %125, i64 1
  store i32 %128, i32* %125, align 4
  %134 = getelementptr inbounds i32, i32* %125, i64 2
  store i32 %130, i32* %133, align 4
  br label %135

135:                                              ; preds = %122, %132
  %136 = phi i32* [ %134, %132 ], [ null, %122 ]
  %137 = add i32 %128, %126
  %138 = icmp ult i32 %137, 32
  br i1 %138, label %139, label %148

139:                                              ; preds = %135
  %140 = load i32, i32* %85, align 8
  %141 = lshr i32 -1, %137
  %142 = icmp ugt i32 %140, %141
  br i1 %142, label %148, label %143

143:                                              ; preds = %139
  %144 = shl i32 %140, %137
  %145 = load i32, i32* %7, align 4
  %146 = icmp ult i32 %145, %144
  %147 = select i1 %146, i32 %145, i32 %144
  store i32 %147, i32* %7, align 4
  br label %148

148:                                              ; preds = %139, %143, %135
  %149 = add i32 %130, %126
  %150 = icmp ult i32 %149, 32
  br i1 %150, label %151, label %160

151:                                              ; preds = %148
  %152 = load i32, i32* %93, align 4
  %153 = lshr i32 -1, %149
  %154 = icmp ugt i32 %152, %153
  br i1 %154, label %160, label %155

155:                                              ; preds = %151
  %156 = shl i32 %152, %149
  %157 = load i32, i32* %8, align 4
  %158 = icmp ult i32 %157, %156
  %159 = select i1 %158, i32 %157, i32 %156
  store i32 %159, i32* %8, align 4
  br label %160

160:                                              ; preds = %151, %155, %148
  %161 = zext i32 %126 to i64
  %162 = shl nsw i64 -1, %161
  %163 = xor i64 %162, -1
  %164 = add i64 %118, %163
  %165 = lshr i64 %164, %161
  %166 = trunc i64 %165 to i32
  %167 = add i64 %119, %163
  %168 = lshr i64 %167, %161
  %169 = trunc i64 %168 to i32
  %170 = add i64 %120, %163
  %171 = lshr i64 %170, %161
  %172 = trunc i64 %171 to i32
  %173 = add i64 %121, %163
  %174 = lshr i64 %173, %161
  %175 = trunc i64 %174 to i32
  %176 = shl i32 -1, %130
  %177 = and i32 %176, %169
  %178 = zext i32 %128 to i64
  %179 = and i64 %174, 4294967295
  %180 = zext i32 %130 to i64
  %181 = shl i64 1, %180
  %182 = add nsw i64 %179, -1
  %183 = add i64 %182, %181
  %184 = lshr i64 %183, %180
  %185 = trunc i64 %184 to i32
  %186 = shl i32 %185, %130
  %187 = icmp eq i32 %166, %172
  br i1 %187, label %200, label %188

188:                                              ; preds = %160
  %189 = and i64 %171, 4294967295
  %190 = add nsw i64 %189, -1
  %191 = shl i64 1, %178
  %192 = add i64 %190, %191
  %193 = lshr i64 %192, %178
  %194 = trunc i64 %193 to i32
  %195 = shl i32 %194, %128
  %196 = shl i32 -1, %128
  %197 = and i32 %196, %166
  %198 = sub i32 %195, %197
  %199 = lshr i32 %198, %128
  br label %200

200:                                              ; preds = %160, %188
  %201 = phi i32 [ %199, %188 ], [ 0, %160 ]
  %202 = icmp eq i32 %169, %175
  %203 = sub i32 %186, %177
  %204 = lshr i32 %203, %130
  %205 = select i1 %202, i32 0, i32 %204
  %206 = icmp eq i32* %136, null
  br i1 %206, label %210, label %207

207:                                              ; preds = %200
  %208 = getelementptr inbounds i32, i32* %136, i64 1
  store i32 %201, i32* %136, align 4
  %209 = getelementptr inbounds i32, i32* %136, i64 2
  store i32 %205, i32* %208, align 4
  br label %210

210:                                              ; preds = %200, %207
  %211 = phi i32* [ %209, %207 ], [ null, %200 ]
  %212 = mul i32 %201, %205
  %213 = load i32, i32* %9, align 4
  %214 = icmp ugt i32 %212, %213
  br i1 %214, label %215, label %216

215:                                              ; preds = %210
  store i32 %212, i32* %9, align 4
  br label %216

216:                                              ; preds = %215, %210
  %217 = add nuw nsw i64 %123, 1
  %218 = load i32, i32* %108, align 4
  %219 = zext i32 %218 to i64
  %220 = icmp ult i64 %217, %219
  br i1 %220, label %122, label %221

221:                                              ; preds = %216, %114
  %222 = getelementptr inbounds %struct.opj_tccp, %struct.opj_tccp* %77, i64 1
  %223 = getelementptr inbounds %struct.opj_image_comp, %struct.opj_image_comp* %78, i64 1
  %224 = add nuw nsw i64 %76, 1
  %225 = load i32, i32* %70, align 8
  %226 = zext i32 %225 to i64
  %227 = icmp ult i64 %224, %226
  br i1 %227, label %75, label %228

228:                                              ; preds = %221, %12
  ret void
}

declare i8* @opj_calloc(i64, i64) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden void @opj_pi_destroy(%struct.opj_pi_iterator*, i32) local_unnamed_addr #0 {
  %3 = icmp eq %struct.opj_pi_iterator* %0, null
  br i1 %3, label %49, label %4

4:                                                ; preds = %2
  %5 = getelementptr inbounds %struct.opj_pi_iterator, %struct.opj_pi_iterator* %0, i64 0, i32 1
  %6 = load i16*, i16** %5, align 8
  %7 = icmp eq i16* %6, null
  br i1 %7, label %10, label %8

8:                                                ; preds = %4
  %9 = bitcast i16* %6 to i8*
  tail call void @opj_free(i8* nonnull %9) #5
  store i16* null, i16** %5, align 8
  br label %10

10:                                               ; preds = %4, %8
  %11 = icmp eq i32 %1, 0
  br i1 %11, label %47, label %12

12:                                               ; preds = %10, %43
  %13 = phi %struct.opj_pi_iterator* [ %44, %43 ], [ %0, %10 ]
  %14 = phi i32 [ %45, %43 ], [ 0, %10 ]
  %15 = getelementptr inbounds %struct.opj_pi_iterator, %struct.opj_pi_iterator* %13, i64 0, i32 14
  %16 = load %struct.opj_pi_comp*, %struct.opj_pi_comp** %15, align 8
  %17 = icmp eq %struct.opj_pi_comp* %16, null
  br i1 %17, label %43, label %18

18:                                               ; preds = %12
  %19 = bitcast %struct.opj_pi_comp* %16 to i8*
  %20 = getelementptr inbounds %struct.opj_pi_iterator, %struct.opj_pi_iterator* %13, i64 0, i32 13
  %21 = load i32, i32* %20, align 4
  %22 = icmp eq i32 %21, 0
  br i1 %22, label %41, label %23

23:                                               ; preds = %18, %33
  %24 = phi i32 [ %34, %33 ], [ %21, %18 ]
  %25 = phi %struct.opj_pi_comp* [ %35, %33 ], [ %16, %18 ]
  %26 = phi i32 [ %36, %33 ], [ 0, %18 ]
  %27 = getelementptr inbounds %struct.opj_pi_comp, %struct.opj_pi_comp* %25, i64 0, i32 3
  %28 = load %struct.opj_pi_resolution*, %struct.opj_pi_resolution** %27, align 8
  %29 = icmp eq %struct.opj_pi_resolution* %28, null
  br i1 %29, label %33, label %30

30:                                               ; preds = %23
  %31 = bitcast %struct.opj_pi_resolution* %28 to i8*
  tail call void @opj_free(i8* nonnull %31) #5
  store %struct.opj_pi_resolution* null, %struct.opj_pi_resolution** %27, align 8
  %32 = load i32, i32* %20, align 4
  br label %33

33:                                               ; preds = %23, %30
  %34 = phi i32 [ %24, %23 ], [ %32, %30 ]
  %35 = getelementptr inbounds %struct.opj_pi_comp, %struct.opj_pi_comp* %25, i64 1
  %36 = add nuw i32 %26, 1
  %37 = icmp ult i32 %36, %34
  br i1 %37, label %23, label %38

38:                                               ; preds = %33
  %39 = bitcast %struct.opj_pi_comp** %15 to i8**
  %40 = load i8*, i8** %39, align 8
  br label %41

41:                                               ; preds = %18, %38
  %42 = phi i8* [ %40, %38 ], [ %19, %18 ]
  tail call void @opj_free(i8* %42) #5
  store %struct.opj_pi_comp* null, %struct.opj_pi_comp** %15, align 8
  br label %43

43:                                               ; preds = %12, %41
  %44 = getelementptr inbounds %struct.opj_pi_iterator, %struct.opj_pi_iterator* %13, i64 1
  %45 = add nuw i32 %14, 1
  %46 = icmp eq i32 %45, %1
  br i1 %46, label %47, label %12

47:                                               ; preds = %43, %10
  %48 = getelementptr inbounds %struct.opj_pi_iterator, %struct.opj_pi_iterator* %0, i64 0, i32 0
  tail call void @opj_free(i8* %48) #5
  br label %49

49:                                               ; preds = %2, %47
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nounwind ssp uwtable
define hidden i32 @opj_get_encoding_packet_count(%struct.opj_image* nocapture readonly, %struct.opj_cp* nocapture readonly, i32) local_unnamed_addr #0 {
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  %7 = alloca i32, align 4
  %8 = alloca i32, align 4
  %9 = alloca i32, align 4
  %10 = alloca i32, align 4
  %11 = alloca i32, align 4
  %12 = bitcast i32* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %12) #5
  store i32 -1431655766, i32* %4, align 4
  %13 = bitcast i32* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %13) #5
  store i32 -1431655766, i32* %5, align 4
  %14 = bitcast i32* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %14) #5
  store i32 -1431655766, i32* %6, align 4
  %15 = bitcast i32* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %15) #5
  store i32 -1431655766, i32* %7, align 4
  %16 = bitcast i32* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %16) #5
  store i32 -1431655766, i32* %8, align 4
  %17 = bitcast i32* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %17) #5
  store i32 -1431655766, i32* %9, align 4
  %18 = bitcast i32* %10 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %18) #5
  store i32 -1431655766, i32* %10, align 4
  %19 = bitcast i32* %11 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %19) #5
  store i32 -1431655766, i32* %11, align 4
  call fastcc void @opj_get_all_encoding_parameters(%struct.opj_image* %0, %struct.opj_cp* %1, i32 %2, i32* nonnull %6, i32* nonnull %7, i32* nonnull %8, i32* nonnull %9, i32* nonnull %10, i32* nonnull %11, i32* nonnull %5, i32* nonnull %4, i32** null)
  %20 = getelementptr inbounds %struct.opj_cp, %struct.opj_cp* %1, i64 0, i32 19
  %21 = load %struct.opj_tcp*, %struct.opj_tcp** %20, align 8
  %22 = zext i32 %2 to i64
  %23 = getelementptr inbounds %struct.opj_tcp, %struct.opj_tcp* %21, i64 %22, i32 2
  %24 = load i32, i32* %23, align 8
  %25 = load i32, i32* %5, align 4
  %26 = mul i32 %25, %24
  %27 = getelementptr inbounds %struct.opj_image, %struct.opj_image* %0, i64 0, i32 4
  %28 = load i32, i32* %27, align 8
  %29 = mul i32 %26, %28
  %30 = load i32, i32* %4, align 4
  %31 = mul i32 %29, %30
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %19) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %18) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %17) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %16) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %15) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %14) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %13) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %12) #5
  ret i32 %31
}

; Function Attrs: nounwind ssp uwtable
define hidden %struct.opj_pi_iterator* @opj_pi_initialise_encode(%struct.opj_image* nocapture readonly, %struct.opj_cp* nocapture readonly, i32, i32, %struct.opj_event_mgr*) local_unnamed_addr #0 {
  %6 = alloca i32, align 4
  %7 = alloca i32, align 4
  %8 = alloca i32, align 4
  %9 = alloca i32, align 4
  %10 = alloca i32, align 4
  %11 = alloca i32, align 4
  %12 = alloca i32, align 4
  %13 = alloca i32, align 4
  %14 = getelementptr inbounds %struct.opj_image, %struct.opj_image* %0, i64 0, i32 4
  %15 = load i32, i32* %14, align 8
  %16 = bitcast i32* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %16) #5
  store i32 -1431655766, i32* %6, align 4
  %17 = bitcast i32* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %17) #5
  store i32 -1431655766, i32* %7, align 4
  %18 = bitcast i32* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %18) #5
  store i32 -1431655766, i32* %8, align 4
  %19 = bitcast i32* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %19) #5
  store i32 -1431655766, i32* %9, align 4
  %20 = bitcast i32* %10 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %20) #5
  store i32 -1431655766, i32* %10, align 4
  %21 = bitcast i32* %11 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %21) #5
  store i32 -1431655766, i32* %11, align 4
  %22 = bitcast i32* %12 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %22) #5
  store i32 -1431655766, i32* %12, align 4
  %23 = bitcast i32* %13 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %23) #5
  store i32 -1431655766, i32* %13, align 4
  %24 = getelementptr inbounds %struct.opj_cp, %struct.opj_cp* %1, i64 0, i32 19
  %25 = load %struct.opj_tcp*, %struct.opj_tcp** %24, align 8
  %26 = zext i32 %2 to i64
  %27 = getelementptr inbounds %struct.opj_tcp, %struct.opj_tcp* %25, i64 %26, i32 6
  %28 = load i32, i32* %27, align 4
  %29 = add i32 %28, 1
  %30 = mul i32 %15, 132
  %31 = zext i32 %30 to i64
  %32 = shl nuw nsw i64 %31, 2
  %33 = tail call i8* @opj_malloc(i64 %32) #5
  %34 = bitcast i8* %33 to i32*
  %35 = icmp eq i8* %33, null
  br i1 %35, label %291, label %36

36:                                               ; preds = %5
  %37 = zext i32 %15 to i64
  %38 = shl nuw nsw i64 %37, 3
  %39 = tail call i8* @opj_malloc(i64 %38) #5
  %40 = bitcast i8* %39 to i32**
  %41 = icmp eq i8* %39, null
  br i1 %41, label %42, label %43

42:                                               ; preds = %36
  tail call void @opj_free(i8* nonnull %33) #5
  br label %291

43:                                               ; preds = %36
  %44 = tail call fastcc %struct.opj_pi_iterator* @opj_pi_create(%struct.opj_image* %0, %struct.opj_cp* %1, i32 %2, %struct.opj_event_mgr* %4)
  %45 = icmp eq %struct.opj_pi_iterator* %44, null
  br i1 %45, label %82, label %46

46:                                               ; preds = %43
  %47 = icmp eq i32 %15, 0
  br i1 %47, label %90, label %48

48:                                               ; preds = %46
  %49 = icmp ult i32 %15, 4
  br i1 %49, label %50, label %53

50:                                               ; preds = %80, %48
  %51 = phi i64 [ 0, %48 ], [ %54, %80 ]
  %52 = phi i32* [ %34, %48 ], [ %56, %80 ]
  br label %83

53:                                               ; preds = %48
  %54 = and i64 %37, 4294967292
  %55 = mul nuw nsw i64 %54, 132
  %56 = getelementptr i32, i32* %34, i64 %55
  br label %57

57:                                               ; preds = %57, %53
  %58 = phi i64 [ 0, %53 ], [ %78, %57 ]
  %59 = mul i64 %58, 132
  %60 = getelementptr i32, i32* %34, i64 %59
  %61 = or i64 %58, 1
  %62 = mul i64 %61, 132
  %63 = getelementptr i32, i32* %34, i64 %62
  %64 = insertelement <2 x i32*> undef, i32* %60, i32 0
  %65 = insertelement <2 x i32*> %64, i32* %63, i32 1
  %66 = or i64 %58, 2
  %67 = mul i64 %66, 132
  %68 = getelementptr i32, i32* %34, i64 %67
  %69 = or i64 %58, 3
  %70 = mul i64 %69, 132
  %71 = getelementptr i32, i32* %34, i64 %70
  %72 = insertelement <2 x i32*> undef, i32* %68, i32 0
  %73 = insertelement <2 x i32*> %72, i32* %71, i32 1
  %74 = getelementptr inbounds i32*, i32** %40, i64 %58
  %75 = bitcast i32** %74 to <2 x i32*>*
  store <2 x i32*> %65, <2 x i32*>* %75, align 8
  %76 = getelementptr inbounds i32*, i32** %74, i64 2
  %77 = bitcast i32** %76 to <2 x i32*>*
  store <2 x i32*> %73, <2 x i32*>* %77, align 8
  %78 = add i64 %58, 4
  %79 = icmp eq i64 %78, %54
  br i1 %79, label %80, label %57, !llvm.loop !6

80:                                               ; preds = %57
  %81 = icmp eq i64 %54, %37
  br i1 %81, label %90, label %50

82:                                               ; preds = %43
  tail call void @opj_free(i8* nonnull %33) #5
  tail call void @opj_free(i8* nonnull %39) #5
  br label %291

83:                                               ; preds = %50, %83
  %84 = phi i64 [ %88, %83 ], [ %51, %50 ]
  %85 = phi i32* [ %87, %83 ], [ %52, %50 ]
  %86 = getelementptr inbounds i32*, i32** %40, i64 %84
  store i32* %85, i32** %86, align 8
  %87 = getelementptr inbounds i32, i32* %85, i64 132
  %88 = add nuw nsw i64 %84, 1
  %89 = icmp eq i64 %88, %37
  br i1 %89, label %90, label %83, !llvm.loop !7

90:                                               ; preds = %83, %80, %46
  call fastcc void @opj_get_all_encoding_parameters(%struct.opj_image* %0, %struct.opj_cp* %1, i32 %2, i32* nonnull %8, i32* nonnull %9, i32* nonnull %10, i32* nonnull %11, i32* nonnull %12, i32* nonnull %13, i32* nonnull %7, i32* nonnull %6, i32** nonnull %40)
  %91 = load i32, i32* %7, align 4
  %92 = mul i32 %91, %15
  %93 = load i32, i32* %6, align 4
  %94 = mul i32 %93, %92
  %95 = getelementptr inbounds %struct.opj_cp, %struct.opj_cp* %1, i64 0, i32 20, i32 0, i32 4
  %96 = load i8, i8* %95, align 1
  %97 = lshr i8 %96, 3
  %98 = and i8 %97, 1
  %99 = getelementptr inbounds %struct.opj_pi_iterator, %struct.opj_pi_iterator* %44, i64 0, i32 0
  store i8 %98, i8* %99, align 8
  %100 = getelementptr inbounds %struct.opj_tcp, %struct.opj_tcp* %25, i64 %26, i32 2
  %101 = load i32, i32* %100, align 8
  %102 = mul i32 %101, %94
  %103 = getelementptr inbounds %struct.opj_pi_iterator, %struct.opj_pi_iterator* %44, i64 0, i32 2
  store i32 %102, i32* %103, align 8
  %104 = zext i32 %102 to i64
  %105 = tail call i8* @opj_calloc(i64 %104, i64 2) #5
  %106 = getelementptr inbounds %struct.opj_pi_iterator, %struct.opj_pi_iterator* %44, i64 0, i32 1
  %107 = bitcast i16** %106 to i8**
  store i8* %105, i8** %107, align 8
  %108 = icmp eq i8* %105, null
  br i1 %108, label %109, label %110

109:                                              ; preds = %90
  tail call void @opj_free(i8* nonnull %33) #5
  tail call void @opj_free(i8* nonnull %39) #5
  tail call void @opj_pi_destroy(%struct.opj_pi_iterator* nonnull %44, i32 %29)
  br label %291

110:                                              ; preds = %90
  %111 = getelementptr inbounds %struct.opj_pi_iterator, %struct.opj_pi_iterator* %44, i64 0, i32 14
  %112 = load %struct.opj_pi_comp*, %struct.opj_pi_comp** %111, align 8
  %113 = getelementptr inbounds %struct.opj_image, %struct.opj_image* %0, i64 0, i32 6
  %114 = load %struct.opj_image_comp*, %struct.opj_image_comp** %113, align 8
  %115 = load i32, i32* %8, align 4
  %116 = getelementptr inbounds %struct.opj_pi_iterator, %struct.opj_pi_iterator* %44, i64 0, i32 15
  store i32 %115, i32* %116, align 8
  %117 = load i32, i32* %10, align 4
  %118 = getelementptr inbounds %struct.opj_pi_iterator, %struct.opj_pi_iterator* %44, i64 0, i32 16
  store i32 %117, i32* %118, align 4
  %119 = load i32, i32* %9, align 4
  %120 = getelementptr inbounds %struct.opj_pi_iterator, %struct.opj_pi_iterator* %44, i64 0, i32 17
  store i32 %119, i32* %120, align 8
  %121 = load i32, i32* %11, align 4
  %122 = getelementptr inbounds %struct.opj_pi_iterator, %struct.opj_pi_iterator* %44, i64 0, i32 18
  store i32 %121, i32* %122, align 4
  %123 = load i32, i32* %12, align 4
  %124 = getelementptr inbounds %struct.opj_pi_iterator, %struct.opj_pi_iterator* %44, i64 0, i32 21
  store i32 %123, i32* %124, align 8
  %125 = load i32, i32* %13, align 4
  %126 = getelementptr inbounds %struct.opj_pi_iterator, %struct.opj_pi_iterator* %44, i64 0, i32 22
  store i32 %125, i32* %126, align 4
  %127 = getelementptr inbounds %struct.opj_pi_iterator, %struct.opj_pi_iterator* %44, i64 0, i32 6
  store i32 1, i32* %127, align 8
  %128 = getelementptr inbounds %struct.opj_pi_iterator, %struct.opj_pi_iterator* %44, i64 0, i32 5
  store i32 %91, i32* %128, align 4
  %129 = getelementptr inbounds %struct.opj_pi_iterator, %struct.opj_pi_iterator* %44, i64 0, i32 4
  store i32 %92, i32* %129, align 8
  %130 = getelementptr inbounds %struct.opj_pi_iterator, %struct.opj_pi_iterator* %44, i64 0, i32 3
  store i32 %94, i32* %130, align 4
  br i1 %47, label %131, label %133

131:                                              ; preds = %170, %110
  %132 = icmp ugt i32 %29, 1
  br i1 %132, label %175, label %245

133:                                              ; preds = %110, %170
  %134 = phi i64 [ %173, %170 ], [ 0, %110 ]
  %135 = phi %struct.opj_image_comp* [ %172, %170 ], [ %114, %110 ]
  %136 = phi %struct.opj_pi_comp* [ %171, %170 ], [ %112, %110 ]
  %137 = getelementptr inbounds %struct.opj_pi_comp, %struct.opj_pi_comp* %136, i64 0, i32 3
  %138 = load %struct.opj_pi_resolution*, %struct.opj_pi_resolution** %137, align 8
  %139 = getelementptr inbounds i32*, i32** %40, i64 %134
  %140 = load i32*, i32** %139, align 8
  %141 = getelementptr inbounds %struct.opj_image_comp, %struct.opj_image_comp* %135, i64 0, i32 0
  %142 = load i32, i32* %141, align 8
  %143 = getelementptr inbounds %struct.opj_pi_comp, %struct.opj_pi_comp* %136, i64 0, i32 0
  store i32 %142, i32* %143, align 8
  %144 = getelementptr inbounds %struct.opj_image_comp, %struct.opj_image_comp* %135, i64 0, i32 1
  %145 = load i32, i32* %144, align 4
  %146 = getelementptr inbounds %struct.opj_pi_comp, %struct.opj_pi_comp* %136, i64 0, i32 1
  store i32 %145, i32* %146, align 4
  %147 = getelementptr inbounds %struct.opj_pi_comp, %struct.opj_pi_comp* %136, i64 0, i32 2
  %148 = load i32, i32* %147, align 8
  %149 = icmp eq i32 %148, 0
  br i1 %149, label %170, label %150

150:                                              ; preds = %133, %150
  %151 = phi %struct.opj_pi_resolution* [ %166, %150 ], [ %138, %133 ]
  %152 = phi i32* [ %163, %150 ], [ %140, %133 ]
  %153 = phi i32 [ %167, %150 ], [ 0, %133 ]
  %154 = getelementptr inbounds i32, i32* %152, i64 1
  %155 = load i32, i32* %152, align 4
  %156 = getelementptr inbounds %struct.opj_pi_resolution, %struct.opj_pi_resolution* %151, i64 0, i32 0
  store i32 %155, i32* %156, align 4
  %157 = getelementptr inbounds i32, i32* %152, i64 2
  %158 = load i32, i32* %154, align 4
  %159 = getelementptr inbounds %struct.opj_pi_resolution, %struct.opj_pi_resolution* %151, i64 0, i32 1
  store i32 %158, i32* %159, align 4
  %160 = getelementptr inbounds i32, i32* %152, i64 3
  %161 = load i32, i32* %157, align 4
  %162 = getelementptr inbounds %struct.opj_pi_resolution, %struct.opj_pi_resolution* %151, i64 0, i32 2
  store i32 %161, i32* %162, align 4
  %163 = getelementptr inbounds i32, i32* %152, i64 4
  %164 = load i32, i32* %160, align 4
  %165 = getelementptr inbounds %struct.opj_pi_resolution, %struct.opj_pi_resolution* %151, i64 0, i32 3
  store i32 %164, i32* %165, align 4
  %166 = getelementptr inbounds %struct.opj_pi_resolution, %struct.opj_pi_resolution* %151, i64 1
  %167 = add nuw i32 %153, 1
  %168 = load i32, i32* %147, align 8
  %169 = icmp ult i32 %167, %168
  br i1 %169, label %150, label %170

170:                                              ; preds = %150, %133
  %171 = getelementptr inbounds %struct.opj_pi_comp, %struct.opj_pi_comp* %136, i64 1
  %172 = getelementptr inbounds %struct.opj_image_comp, %struct.opj_image_comp* %135, i64 1
  %173 = add nuw nsw i64 %134, 1
  %174 = icmp eq i64 %173, %37
  br i1 %174, label %131, label %133

175:                                              ; preds = %131, %234
  %176 = phi %struct.opj_pi_iterator* [ %178, %234 ], [ %44, %131 ]
  %177 = phi i32 [ %243, %234 ], [ 1, %131 ]
  %178 = getelementptr inbounds %struct.opj_pi_iterator, %struct.opj_pi_iterator* %176, i64 1
  %179 = getelementptr inbounds %struct.opj_pi_iterator, %struct.opj_pi_iterator* %176, i64 1, i32 14
  %180 = load %struct.opj_pi_comp*, %struct.opj_pi_comp** %179, align 8
  %181 = load %struct.opj_image_comp*, %struct.opj_image_comp** %113, align 8
  %182 = getelementptr inbounds %struct.opj_pi_iterator, %struct.opj_pi_iterator* %176, i64 1, i32 15
  store i32 %115, i32* %182, align 8
  %183 = getelementptr inbounds %struct.opj_pi_iterator, %struct.opj_pi_iterator* %176, i64 1, i32 16
  store i32 %117, i32* %183, align 4
  %184 = getelementptr inbounds %struct.opj_pi_iterator, %struct.opj_pi_iterator* %176, i64 1, i32 17
  store i32 %119, i32* %184, align 8
  %185 = getelementptr inbounds %struct.opj_pi_iterator, %struct.opj_pi_iterator* %176, i64 1, i32 18
  store i32 %121, i32* %185, align 4
  %186 = getelementptr inbounds %struct.opj_pi_iterator, %struct.opj_pi_iterator* %176, i64 1, i32 21
  store i32 %123, i32* %186, align 8
  %187 = getelementptr inbounds %struct.opj_pi_iterator, %struct.opj_pi_iterator* %176, i64 1, i32 22
  store i32 %125, i32* %187, align 4
  %188 = getelementptr inbounds %struct.opj_pi_iterator, %struct.opj_pi_iterator* %176, i64 1, i32 6
  store i32 1, i32* %188, align 8
  %189 = getelementptr inbounds %struct.opj_pi_iterator, %struct.opj_pi_iterator* %176, i64 1, i32 5
  store i32 %91, i32* %189, align 4
  %190 = getelementptr inbounds %struct.opj_pi_iterator, %struct.opj_pi_iterator* %176, i64 1, i32 4
  store i32 %92, i32* %190, align 8
  %191 = getelementptr inbounds %struct.opj_pi_iterator, %struct.opj_pi_iterator* %176, i64 1, i32 3
  store i32 %94, i32* %191, align 4
  br i1 %47, label %234, label %192

192:                                              ; preds = %175, %229
  %193 = phi i64 [ %232, %229 ], [ 0, %175 ]
  %194 = phi %struct.opj_image_comp* [ %231, %229 ], [ %181, %175 ]
  %195 = phi %struct.opj_pi_comp* [ %230, %229 ], [ %180, %175 ]
  %196 = getelementptr inbounds %struct.opj_pi_comp, %struct.opj_pi_comp* %195, i64 0, i32 3
  %197 = load %struct.opj_pi_resolution*, %struct.opj_pi_resolution** %196, align 8
  %198 = getelementptr inbounds i32*, i32** %40, i64 %193
  %199 = load i32*, i32** %198, align 8
  %200 = getelementptr inbounds %struct.opj_image_comp, %struct.opj_image_comp* %194, i64 0, i32 0
  %201 = load i32, i32* %200, align 8
  %202 = getelementptr inbounds %struct.opj_pi_comp, %struct.opj_pi_comp* %195, i64 0, i32 0
  store i32 %201, i32* %202, align 8
  %203 = getelementptr inbounds %struct.opj_image_comp, %struct.opj_image_comp* %194, i64 0, i32 1
  %204 = load i32, i32* %203, align 4
  %205 = getelementptr inbounds %struct.opj_pi_comp, %struct.opj_pi_comp* %195, i64 0, i32 1
  store i32 %204, i32* %205, align 4
  %206 = getelementptr inbounds %struct.opj_pi_comp, %struct.opj_pi_comp* %195, i64 0, i32 2
  %207 = load i32, i32* %206, align 8
  %208 = icmp eq i32 %207, 0
  br i1 %208, label %229, label %209

209:                                              ; preds = %192, %209
  %210 = phi %struct.opj_pi_resolution* [ %225, %209 ], [ %197, %192 ]
  %211 = phi i32* [ %222, %209 ], [ %199, %192 ]
  %212 = phi i32 [ %226, %209 ], [ 0, %192 ]
  %213 = getelementptr inbounds i32, i32* %211, i64 1
  %214 = load i32, i32* %211, align 4
  %215 = getelementptr inbounds %struct.opj_pi_resolution, %struct.opj_pi_resolution* %210, i64 0, i32 0
  store i32 %214, i32* %215, align 4
  %216 = getelementptr inbounds i32, i32* %211, i64 2
  %217 = load i32, i32* %213, align 4
  %218 = getelementptr inbounds %struct.opj_pi_resolution, %struct.opj_pi_resolution* %210, i64 0, i32 1
  store i32 %217, i32* %218, align 4
  %219 = getelementptr inbounds i32, i32* %211, i64 3
  %220 = load i32, i32* %216, align 4
  %221 = getelementptr inbounds %struct.opj_pi_resolution, %struct.opj_pi_resolution* %210, i64 0, i32 2
  store i32 %220, i32* %221, align 4
  %222 = getelementptr inbounds i32, i32* %211, i64 4
  %223 = load i32, i32* %219, align 4
  %224 = getelementptr inbounds %struct.opj_pi_resolution, %struct.opj_pi_resolution* %210, i64 0, i32 3
  store i32 %223, i32* %224, align 4
  %225 = getelementptr inbounds %struct.opj_pi_resolution, %struct.opj_pi_resolution* %210, i64 1
  %226 = add nuw i32 %212, 1
  %227 = load i32, i32* %206, align 8
  %228 = icmp ult i32 %226, %227
  br i1 %228, label %209, label %229

229:                                              ; preds = %209, %192
  %230 = getelementptr inbounds %struct.opj_pi_comp, %struct.opj_pi_comp* %195, i64 1
  %231 = getelementptr inbounds %struct.opj_image_comp, %struct.opj_image_comp* %194, i64 1
  %232 = add nuw nsw i64 %193, 1
  %233 = icmp eq i64 %232, %37
  br i1 %233, label %234, label %192

234:                                              ; preds = %229, %175
  %235 = getelementptr inbounds %struct.opj_pi_iterator, %struct.opj_pi_iterator* %176, i64 0, i32 1
  %236 = bitcast i16** %235 to i64*
  %237 = load i64, i64* %236, align 8
  %238 = getelementptr inbounds %struct.opj_pi_iterator, %struct.opj_pi_iterator* %176, i64 1, i32 1
  %239 = bitcast i16** %238 to i64*
  store i64 %237, i64* %239, align 8
  %240 = getelementptr inbounds %struct.opj_pi_iterator, %struct.opj_pi_iterator* %176, i64 0, i32 2
  %241 = load i32, i32* %240, align 8
  %242 = getelementptr inbounds %struct.opj_pi_iterator, %struct.opj_pi_iterator* %176, i64 1, i32 2
  store i32 %241, i32* %242, align 8
  %243 = add nuw i32 %177, 1
  %244 = icmp eq i32 %243, %29
  br i1 %244, label %245, label %175

245:                                              ; preds = %234, %131
  tail call void @opj_free(i8* nonnull %33) #5
  tail call void @opj_free(i8* nonnull %39) #5
  %246 = getelementptr inbounds %struct.opj_tcp, %struct.opj_tcp* %25, i64 %26, i32 29
  %247 = load i8, i8* %246, align 8
  %248 = and i8 %247, 4
  %249 = icmp eq i8 %248, 0
  br i1 %249, label %258, label %250

250:                                              ; preds = %245
  %251 = getelementptr inbounds %struct.opj_cp, %struct.opj_cp* %1, i64 0, i32 0
  %252 = load i16, i16* %251, align 8
  %253 = add i16 %252, -3
  %254 = icmp ult i16 %253, 4
  %255 = icmp eq i32 %3, 1
  %256 = or i1 %255, %254
  br i1 %256, label %257, label %258

257:                                              ; preds = %250
  tail call fastcc void @opj_pi_update_encode_poc_and_final(%struct.opj_cp* %1, i32 %2, i32 %115, i32 %119, i32 %117, i32 %121, i32 %91, i32 %123, i32 %125)
  br label %291

258:                                              ; preds = %250, %245
  %259 = load %struct.opj_tcp*, %struct.opj_tcp** %24, align 8
  %260 = getelementptr inbounds %struct.opj_tcp, %struct.opj_tcp* %259, i64 %26, i32 6
  %261 = load i32, i32* %260, align 4
  %262 = add i32 %261, 1
  %263 = icmp eq i32 %262, 0
  br i1 %263, label %291, label %264

264:                                              ; preds = %258
  %265 = getelementptr inbounds %struct.opj_tcp, %struct.opj_tcp* %259, i64 %26, i32 7, i64 0
  %266 = getelementptr inbounds %struct.opj_tcp, %struct.opj_tcp* %259, i64 %26, i32 2
  %267 = getelementptr inbounds %struct.opj_tcp, %struct.opj_tcp* %259, i64 %26, i32 1
  br label %268

268:                                              ; preds = %268, %264
  %269 = phi %struct.opj_poc* [ %265, %264 ], [ %288, %268 ]
  %270 = phi i32 [ 0, %264 ], [ %289, %268 ]
  %271 = getelementptr inbounds %struct.opj_poc, %struct.opj_poc* %269, i64 0, i32 18
  store i32 0, i32* %271, align 4
  %272 = getelementptr inbounds %struct.opj_poc, %struct.opj_poc* %269, i64 0, i32 22
  store i32 %15, i32* %272, align 4
  %273 = getelementptr inbounds %struct.opj_poc, %struct.opj_poc* %269, i64 0, i32 17
  store i32 0, i32* %273, align 4
  %274 = getelementptr inbounds %struct.opj_poc, %struct.opj_poc* %269, i64 0, i32 21
  store i32 %93, i32* %274, align 4
  %275 = getelementptr inbounds %struct.opj_poc, %struct.opj_poc* %269, i64 0, i32 16
  store i32 0, i32* %275, align 4
  %276 = load i32, i32* %266, align 8
  %277 = getelementptr inbounds %struct.opj_poc, %struct.opj_poc* %269, i64 0, i32 20
  store i32 %276, i32* %277, align 4
  %278 = load i32, i32* %267, align 4
  %279 = getelementptr inbounds %struct.opj_poc, %struct.opj_poc* %269, i64 0, i32 9
  store i32 %278, i32* %279, align 4
  %280 = getelementptr inbounds %struct.opj_poc, %struct.opj_poc* %269, i64 0, i32 19
  store i32 0, i32* %280, align 4
  %281 = getelementptr inbounds %struct.opj_poc, %struct.opj_poc* %269, i64 0, i32 23
  store i32 %91, i32* %281, align 4
  %282 = getelementptr inbounds %struct.opj_poc, %struct.opj_poc* %269, i64 0, i32 24
  store i32 %115, i32* %282, align 4
  %283 = getelementptr inbounds %struct.opj_poc, %struct.opj_poc* %269, i64 0, i32 25
  store i32 %119, i32* %283, align 4
  %284 = getelementptr inbounds %struct.opj_poc, %struct.opj_poc* %269, i64 0, i32 26
  store i32 %117, i32* %284, align 4
  %285 = getelementptr inbounds %struct.opj_poc, %struct.opj_poc* %269, i64 0, i32 27
  store i32 %121, i32* %285, align 4
  %286 = getelementptr inbounds %struct.opj_poc, %struct.opj_poc* %269, i64 0, i32 28
  store i32 %123, i32* %286, align 4
  %287 = getelementptr inbounds %struct.opj_poc, %struct.opj_poc* %269, i64 0, i32 29
  store i32 %125, i32* %287, align 4
  %288 = getelementptr inbounds %struct.opj_poc, %struct.opj_poc* %269, i64 1
  %289 = add nuw i32 %270, 1
  %290 = icmp eq i32 %289, %262
  br i1 %290, label %291, label %268

291:                                              ; preds = %268, %258, %257, %5, %109, %82, %42
  %292 = phi %struct.opj_pi_iterator* [ null, %109 ], [ null, %82 ], [ null, %42 ], [ null, %5 ], [ %44, %257 ], [ %44, %258 ], [ %44, %268 ]
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %23) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %22) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %21) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %20) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %19) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %18) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %17) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %16) #5
  ret %struct.opj_pi_iterator* %292
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal fastcc void @opj_pi_update_encode_poc_and_final(%struct.opj_cp* nocapture readonly, i32, i32, i32, i32, i32, i32, i32, i32) unnamed_addr #3 {
  %10 = getelementptr inbounds %struct.opj_cp, %struct.opj_cp* %0, i64 0, i32 19
  %11 = load %struct.opj_tcp*, %struct.opj_tcp** %10, align 8
  %12 = zext i32 %1 to i64
  %13 = getelementptr inbounds %struct.opj_tcp, %struct.opj_tcp* %11, i64 %12, i32 6
  %14 = load i32, i32* %13, align 4
  %15 = add i32 %14, 1
  %16 = getelementptr inbounds %struct.opj_tcp, %struct.opj_tcp* %11, i64 %12, i32 7, i64 0, i32 1
  %17 = load i32, i32* %16, align 4
  %18 = getelementptr inbounds %struct.opj_tcp, %struct.opj_tcp* %11, i64 %12, i32 7, i64 0, i32 18
  store i32 %17, i32* %18, align 4
  %19 = getelementptr inbounds %struct.opj_tcp, %struct.opj_tcp* %11, i64 %12, i32 7, i64 0, i32 4
  %20 = load i32, i32* %19, align 4
  %21 = getelementptr inbounds %struct.opj_tcp, %struct.opj_tcp* %11, i64 %12, i32 7, i64 0, i32 22
  store i32 %20, i32* %21, align 4
  %22 = getelementptr inbounds %struct.opj_tcp, %struct.opj_tcp* %11, i64 %12, i32 7, i64 0, i32 0
  %23 = load i32, i32* %22, align 4
  %24 = getelementptr inbounds %struct.opj_tcp, %struct.opj_tcp* %11, i64 %12, i32 7, i64 0, i32 17
  store i32 %23, i32* %24, align 4
  %25 = getelementptr inbounds %struct.opj_tcp, %struct.opj_tcp* %11, i64 %12, i32 7, i64 0, i32 3
  %26 = load i32, i32* %25, align 4
  %27 = getelementptr inbounds %struct.opj_tcp, %struct.opj_tcp* %11, i64 %12, i32 7, i64 0, i32 21
  store i32 %26, i32* %27, align 4
  %28 = getelementptr inbounds %struct.opj_tcp, %struct.opj_tcp* %11, i64 %12, i32 7, i64 0, i32 2
  %29 = load i32, i32* %28, align 4
  %30 = getelementptr inbounds %struct.opj_tcp, %struct.opj_tcp* %11, i64 %12, i32 7, i64 0, i32 20
  store i32 %29, i32* %30, align 4
  %31 = getelementptr inbounds %struct.opj_tcp, %struct.opj_tcp* %11, i64 %12, i32 7, i64 0, i32 16
  store i32 0, i32* %31, align 4
  %32 = getelementptr inbounds %struct.opj_tcp, %struct.opj_tcp* %11, i64 %12, i32 7, i64 0, i32 8
  %33 = load i32, i32* %32, align 4
  %34 = getelementptr inbounds %struct.opj_tcp, %struct.opj_tcp* %11, i64 %12, i32 7, i64 0, i32 9
  store i32 %33, i32* %34, align 4
  %35 = getelementptr inbounds %struct.opj_tcp, %struct.opj_tcp* %11, i64 %12, i32 7, i64 0, i32 19
  store i32 0, i32* %35, align 4
  %36 = getelementptr inbounds %struct.opj_tcp, %struct.opj_tcp* %11, i64 %12, i32 7, i64 0, i32 23
  store i32 %6, i32* %36, align 4
  %37 = getelementptr inbounds %struct.opj_tcp, %struct.opj_tcp* %11, i64 %12, i32 7, i64 0, i32 24
  store i32 %2, i32* %37, align 4
  %38 = getelementptr inbounds %struct.opj_tcp, %struct.opj_tcp* %11, i64 %12, i32 7, i64 0, i32 25
  store i32 %3, i32* %38, align 4
  %39 = getelementptr inbounds %struct.opj_tcp, %struct.opj_tcp* %11, i64 %12, i32 7, i64 0, i32 26
  store i32 %4, i32* %39, align 4
  %40 = getelementptr inbounds %struct.opj_tcp, %struct.opj_tcp* %11, i64 %12, i32 7, i64 0, i32 27
  store i32 %5, i32* %40, align 4
  %41 = getelementptr inbounds %struct.opj_tcp, %struct.opj_tcp* %11, i64 %12, i32 7, i64 0, i32 28
  store i32 %7, i32* %41, align 4
  %42 = getelementptr inbounds %struct.opj_tcp, %struct.opj_tcp* %11, i64 %12, i32 7, i64 0, i32 29
  store i32 %8, i32* %42, align 4
  %43 = icmp ugt i32 %15, 1
  br i1 %43, label %44, label %83

44:                                               ; preds = %9
  %45 = getelementptr inbounds %struct.opj_tcp, %struct.opj_tcp* %11, i64 %12, i32 7, i64 1
  br label %46

46:                                               ; preds = %46, %44
  %47 = phi %struct.opj_poc* [ %80, %46 ], [ %45, %44 ]
  %48 = phi i32 [ %81, %46 ], [ 1, %44 ]
  %49 = getelementptr inbounds %struct.opj_poc, %struct.opj_poc* %47, i64 0, i32 1
  %50 = load i32, i32* %49, align 4
  %51 = getelementptr inbounds %struct.opj_poc, %struct.opj_poc* %47, i64 0, i32 18
  store i32 %50, i32* %51, align 4
  %52 = getelementptr inbounds %struct.opj_poc, %struct.opj_poc* %47, i64 0, i32 4
  %53 = load i32, i32* %52, align 4
  %54 = getelementptr inbounds %struct.opj_poc, %struct.opj_poc* %47, i64 0, i32 22
  store i32 %53, i32* %54, align 4
  %55 = getelementptr inbounds %struct.opj_poc, %struct.opj_poc* %47, i64 0, i32 0
  %56 = load i32, i32* %55, align 4
  %57 = getelementptr inbounds %struct.opj_poc, %struct.opj_poc* %47, i64 0, i32 17
  store i32 %56, i32* %57, align 4
  %58 = getelementptr inbounds %struct.opj_poc, %struct.opj_poc* %47, i64 0, i32 3
  %59 = load i32, i32* %58, align 4
  %60 = getelementptr inbounds %struct.opj_poc, %struct.opj_poc* %47, i64 0, i32 21
  store i32 %59, i32* %60, align 4
  %61 = getelementptr inbounds %struct.opj_poc, %struct.opj_poc* %47, i64 0, i32 2
  %62 = load i32, i32* %61, align 4
  %63 = getelementptr inbounds %struct.opj_poc, %struct.opj_poc* %47, i64 0, i32 20
  store i32 %62, i32* %63, align 4
  %64 = getelementptr inbounds %struct.opj_poc, %struct.opj_poc* %47, i64 0, i32 8
  %65 = load i32, i32* %64, align 4
  %66 = getelementptr inbounds %struct.opj_poc, %struct.opj_poc* %47, i64 0, i32 9
  store i32 %65, i32* %66, align 4
  %67 = getelementptr inbounds %struct.opj_poc, %struct.opj_poc* %47, i64 0, i32 19
  store i32 0, i32* %67, align 4
  %68 = getelementptr inbounds %struct.opj_poc, %struct.opj_poc* %47, i64 -1, i32 20
  %69 = load i32, i32* %68, align 4
  %70 = icmp ugt i32 %62, %69
  %71 = select i1 %70, i32 %62, i32 0
  %72 = getelementptr inbounds %struct.opj_poc, %struct.opj_poc* %47, i64 0, i32 16
  store i32 %71, i32* %72, align 4
  %73 = getelementptr inbounds %struct.opj_poc, %struct.opj_poc* %47, i64 0, i32 23
  store i32 %6, i32* %73, align 4
  %74 = getelementptr inbounds %struct.opj_poc, %struct.opj_poc* %47, i64 0, i32 24
  store i32 %2, i32* %74, align 4
  %75 = getelementptr inbounds %struct.opj_poc, %struct.opj_poc* %47, i64 0, i32 25
  store i32 %3, i32* %75, align 4
  %76 = getelementptr inbounds %struct.opj_poc, %struct.opj_poc* %47, i64 0, i32 26
  store i32 %4, i32* %76, align 4
  %77 = getelementptr inbounds %struct.opj_poc, %struct.opj_poc* %47, i64 0, i32 27
  store i32 %5, i32* %77, align 4
  %78 = getelementptr inbounds %struct.opj_poc, %struct.opj_poc* %47, i64 0, i32 28
  store i32 %7, i32* %78, align 4
  %79 = getelementptr inbounds %struct.opj_poc, %struct.opj_poc* %47, i64 0, i32 29
  store i32 %8, i32* %79, align 4
  %80 = getelementptr inbounds %struct.opj_poc, %struct.opj_poc* %47, i64 1
  %81 = add nuw i32 %48, 1
  %82 = icmp eq i32 %81, %15
  br i1 %82, label %83, label %46

83:                                               ; preds = %46, %9
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @opj_pi_create_encode(%struct.opj_pi_iterator*, %struct.opj_cp* readonly, i32, i32, i32, i32, i32) local_unnamed_addr #0 {
  %8 = getelementptr inbounds %struct.opj_cp, %struct.opj_cp* %1, i64 0, i32 19
  %9 = load %struct.opj_tcp*, %struct.opj_tcp** %8, align 8
  %10 = zext i32 %2 to i64
  %11 = zext i32 %3 to i64
  %12 = getelementptr inbounds %struct.opj_tcp, %struct.opj_tcp* %9, i64 %10, i32 7, i64 %11, i32 9
  %13 = load i32, i32* %12, align 4
  %14 = tail call i8* @opj_j2k_convert_progression_order(i32 %13) #5
  %15 = getelementptr inbounds %struct.opj_pi_iterator, %struct.opj_pi_iterator* %0, i64 %11, i32 11
  store i32 1, i32* %15, align 4
  %16 = load i32, i32* %12, align 4
  %17 = getelementptr inbounds %struct.opj_pi_iterator, %struct.opj_pi_iterator* %0, i64 %11, i32 12
  %18 = getelementptr inbounds %struct.opj_pi_iterator, %struct.opj_pi_iterator* %0, i64 %11, i32 12, i32 9
  store i32 %16, i32* %18, align 4
  %19 = getelementptr inbounds %struct.opj_cp, %struct.opj_cp* %1, i64 0, i32 20, i32 0, i32 4
  %20 = load i8, i8* %19, align 1
  %21 = and i8 %20, 8
  %22 = icmp eq i8 %21, 0
  br i1 %22, label %33, label %23

23:                                               ; preds = %7
  %24 = getelementptr inbounds %struct.opj_cp, %struct.opj_cp* %1, i64 0, i32 0
  %25 = load i16, i16* %24, align 8
  %26 = add i16 %25, -3
  %27 = icmp ult i16 %26, 4
  br i1 %27, label %70, label %28

28:                                               ; preds = %23
  %29 = add i16 %25, -1024
  %30 = icmp eq i32 %6, 1
  %31 = icmp ult i16 %29, 1436
  %32 = or i1 %31, %30
  br i1 %32, label %70, label %33

33:                                               ; preds = %28, %7
  %34 = getelementptr inbounds %struct.opj_tcp, %struct.opj_tcp* %9, i64 %10, i32 7, i64 %11, i32 17
  %35 = load i32, i32* %34, align 4
  %36 = getelementptr inbounds %struct.opj_poc, %struct.opj_poc* %17, i64 0, i32 0
  store i32 %35, i32* %36, align 8
  %37 = getelementptr inbounds %struct.opj_tcp, %struct.opj_tcp* %9, i64 %10, i32 7, i64 %11, i32 21
  %38 = load i32, i32* %37, align 4
  %39 = getelementptr inbounds %struct.opj_pi_iterator, %struct.opj_pi_iterator* %0, i64 %11, i32 12, i32 3
  store i32 %38, i32* %39, align 4
  %40 = getelementptr inbounds %struct.opj_tcp, %struct.opj_tcp* %9, i64 %10, i32 7, i64 %11, i32 18
  %41 = load i32, i32* %40, align 4
  %42 = getelementptr inbounds %struct.opj_pi_iterator, %struct.opj_pi_iterator* %0, i64 %11, i32 12, i32 1
  store i32 %41, i32* %42, align 4
  %43 = getelementptr inbounds %struct.opj_tcp, %struct.opj_tcp* %9, i64 %10, i32 7, i64 %11, i32 22
  %44 = load i32, i32* %43, align 4
  %45 = getelementptr inbounds %struct.opj_pi_iterator, %struct.opj_pi_iterator* %0, i64 %11, i32 12, i32 4
  store i32 %44, i32* %45, align 8
  %46 = getelementptr inbounds %struct.opj_tcp, %struct.opj_tcp* %9, i64 %10, i32 7, i64 %11, i32 16
  %47 = load i32, i32* %46, align 4
  %48 = getelementptr inbounds %struct.opj_pi_iterator, %struct.opj_pi_iterator* %0, i64 %11, i32 12, i32 5
  store i32 %47, i32* %48, align 4
  %49 = getelementptr inbounds %struct.opj_tcp, %struct.opj_tcp* %9, i64 %10, i32 7, i64 %11, i32 20
  %50 = load i32, i32* %49, align 4
  %51 = getelementptr inbounds %struct.opj_pi_iterator, %struct.opj_pi_iterator* %0, i64 %11, i32 12, i32 2
  store i32 %50, i32* %51, align 8
  %52 = getelementptr inbounds %struct.opj_tcp, %struct.opj_tcp* %9, i64 %10, i32 7, i64 %11, i32 19
  %53 = load i32, i32* %52, align 4
  %54 = getelementptr inbounds %struct.opj_pi_iterator, %struct.opj_pi_iterator* %0, i64 %11, i32 12, i32 6
  store i32 %53, i32* %54, align 8
  %55 = getelementptr inbounds %struct.opj_tcp, %struct.opj_tcp* %9, i64 %10, i32 7, i64 %11, i32 23
  %56 = load i32, i32* %55, align 4
  %57 = getelementptr inbounds %struct.opj_pi_iterator, %struct.opj_pi_iterator* %0, i64 %11, i32 12, i32 7
  store i32 %56, i32* %57, align 4
  %58 = getelementptr inbounds %struct.opj_tcp, %struct.opj_tcp* %9, i64 %10, i32 7, i64 %11, i32 24
  %59 = load i32, i32* %58, align 4
  %60 = getelementptr inbounds %struct.opj_pi_iterator, %struct.opj_pi_iterator* %0, i64 %11, i32 12, i32 12
  store i32 %59, i32* %60, align 4
  %61 = getelementptr inbounds %struct.opj_tcp, %struct.opj_tcp* %9, i64 %10, i32 7, i64 %11, i32 26
  %62 = load i32, i32* %61, align 4
  %63 = getelementptr inbounds %struct.opj_pi_iterator, %struct.opj_pi_iterator* %0, i64 %11, i32 12, i32 14
  store i32 %62, i32* %63, align 4
  %64 = getelementptr inbounds %struct.opj_tcp, %struct.opj_tcp* %9, i64 %10, i32 7, i64 %11, i32 25
  %65 = load i32, i32* %64, align 4
  %66 = getelementptr inbounds %struct.opj_pi_iterator, %struct.opj_pi_iterator* %0, i64 %11, i32 12, i32 13
  store i32 %65, i32* %66, align 8
  %67 = getelementptr inbounds %struct.opj_tcp, %struct.opj_tcp* %9, i64 %10, i32 7, i64 %11, i32 27
  %68 = load i32, i32* %67, align 4
  %69 = getelementptr inbounds %struct.opj_pi_iterator, %struct.opj_pi_iterator* %0, i64 %11, i32 12, i32 15
  store i32 %68, i32* %69, align 8
  br label %416

70:                                               ; preds = %23, %28
  %71 = add i32 %5, 1
  %72 = icmp slt i32 %71, 4
  br i1 %72, label %73, label %128

73:                                               ; preds = %70
  %74 = getelementptr inbounds %struct.opj_tcp, %struct.opj_tcp* %9, i64 %10, i32 7, i64 %11, i32 24
  %75 = getelementptr inbounds %struct.opj_pi_iterator, %struct.opj_pi_iterator* %0, i64 %11, i32 12, i32 12
  %76 = getelementptr inbounds %struct.opj_tcp, %struct.opj_tcp* %9, i64 %10, i32 7, i64 %11, i32 26
  %77 = getelementptr inbounds %struct.opj_pi_iterator, %struct.opj_pi_iterator* %0, i64 %11, i32 12, i32 14
  %78 = getelementptr inbounds %struct.opj_tcp, %struct.opj_tcp* %9, i64 %10, i32 7, i64 %11, i32 25
  %79 = getelementptr inbounds %struct.opj_pi_iterator, %struct.opj_pi_iterator* %0, i64 %11, i32 12, i32 13
  %80 = getelementptr inbounds %struct.opj_tcp, %struct.opj_tcp* %9, i64 %10, i32 7, i64 %11, i32 27
  %81 = getelementptr inbounds %struct.opj_pi_iterator, %struct.opj_pi_iterator* %0, i64 %11, i32 12, i32 15
  %82 = getelementptr inbounds %struct.opj_tcp, %struct.opj_tcp* %9, i64 %10, i32 7, i64 %11, i32 19
  %83 = getelementptr inbounds %struct.opj_pi_iterator, %struct.opj_pi_iterator* %0, i64 %11, i32 12, i32 6
  %84 = getelementptr inbounds %struct.opj_tcp, %struct.opj_tcp* %9, i64 %10, i32 7, i64 %11, i32 23
  %85 = getelementptr inbounds %struct.opj_pi_iterator, %struct.opj_pi_iterator* %0, i64 %11, i32 12, i32 7
  %86 = getelementptr inbounds %struct.opj_tcp, %struct.opj_tcp* %9, i64 %10, i32 7, i64 %11, i32 16
  %87 = getelementptr inbounds %struct.opj_pi_iterator, %struct.opj_pi_iterator* %0, i64 %11, i32 12, i32 5
  %88 = getelementptr inbounds %struct.opj_tcp, %struct.opj_tcp* %9, i64 %10, i32 7, i64 %11, i32 20
  %89 = getelementptr inbounds %struct.opj_pi_iterator, %struct.opj_pi_iterator* %0, i64 %11, i32 12, i32 2
  %90 = getelementptr inbounds %struct.opj_tcp, %struct.opj_tcp* %9, i64 %10, i32 7, i64 %11, i32 18
  %91 = getelementptr inbounds %struct.opj_pi_iterator, %struct.opj_pi_iterator* %0, i64 %11, i32 12, i32 1
  %92 = getelementptr inbounds %struct.opj_tcp, %struct.opj_tcp* %9, i64 %10, i32 7, i64 %11, i32 22
  %93 = getelementptr inbounds %struct.opj_pi_iterator, %struct.opj_pi_iterator* %0, i64 %11, i32 12, i32 4
  %94 = getelementptr inbounds %struct.opj_tcp, %struct.opj_tcp* %9, i64 %10, i32 7, i64 %11, i32 17
  %95 = getelementptr inbounds %struct.opj_poc, %struct.opj_poc* %17, i64 0, i32 0
  %96 = getelementptr inbounds %struct.opj_tcp, %struct.opj_tcp* %9, i64 %10, i32 7, i64 %11, i32 21
  %97 = getelementptr inbounds %struct.opj_pi_iterator, %struct.opj_pi_iterator* %0, i64 %11, i32 12, i32 3
  %98 = sext i32 %71 to i64
  br label %99

99:                                               ; preds = %124, %73
  %100 = phi i64 [ %98, %73 ], [ %125, %124 ]
  %101 = getelementptr inbounds i8, i8* %14, i64 %100
  %102 = load i8, i8* %101, align 1
  %103 = sext i8 %102 to i32
  switch i32 %103, label %124 [
    i32 82, label %104
    i32 67, label %107
    i32 76, label %110
    i32 80, label %113
  ]

104:                                              ; preds = %99
  %105 = load i32, i32* %94, align 4
  store i32 %105, i32* %95, align 8
  %106 = load i32, i32* %96, align 4
  store i32 %106, i32* %97, align 4
  br label %124

107:                                              ; preds = %99
  %108 = load i32, i32* %90, align 4
  store i32 %108, i32* %91, align 4
  %109 = load i32, i32* %92, align 4
  store i32 %109, i32* %93, align 8
  br label %124

110:                                              ; preds = %99
  %111 = load i32, i32* %86, align 4
  store i32 %111, i32* %87, align 4
  %112 = load i32, i32* %88, align 4
  store i32 %112, i32* %89, align 8
  br label %124

113:                                              ; preds = %99
  %114 = load i32, i32* %12, align 4
  %115 = icmp ult i32 %114, 2
  br i1 %115, label %116, label %119

116:                                              ; preds = %113
  %117 = load i32, i32* %82, align 4
  store i32 %117, i32* %83, align 8
  %118 = load i32, i32* %84, align 4
  store i32 %118, i32* %85, align 4
  br label %124

119:                                              ; preds = %113
  %120 = load i32, i32* %74, align 4
  store i32 %120, i32* %75, align 4
  %121 = load i32, i32* %76, align 4
  store i32 %121, i32* %77, align 4
  %122 = load i32, i32* %78, align 4
  store i32 %122, i32* %79, align 8
  %123 = load i32, i32* %80, align 4
  store i32 %123, i32* %81, align 8
  br label %124

124:                                              ; preds = %104, %107, %110, %99, %119, %116
  %125 = add nsw i64 %100, 1
  %126 = trunc i64 %125 to i32
  %127 = icmp eq i32 %126, 4
  br i1 %127, label %128, label %99

128:                                              ; preds = %124, %70
  %129 = icmp eq i32 %4, 0
  %130 = icmp sgt i32 %5, -1
  br i1 %129, label %166, label %131

131:                                              ; preds = %128
  br i1 %130, label %132, label %416

132:                                              ; preds = %131
  %133 = getelementptr inbounds %struct.opj_tcp, %struct.opj_tcp* %9, i64 %10, i32 7, i64 %11, i32 34
  %134 = getelementptr inbounds %struct.opj_tcp, %struct.opj_tcp* %9, i64 %10, i32 7, i64 %11, i32 28
  %135 = getelementptr inbounds %struct.opj_pi_iterator, %struct.opj_pi_iterator* %0, i64 %11, i32 12, i32 12
  %136 = getelementptr inbounds %struct.opj_pi_iterator, %struct.opj_pi_iterator* %0, i64 %11, i32 12, i32 13
  %137 = getelementptr inbounds %struct.opj_tcp, %struct.opj_tcp* %9, i64 %10, i32 7, i64 %11, i32 35
  %138 = getelementptr inbounds %struct.opj_tcp, %struct.opj_tcp* %9, i64 %10, i32 7, i64 %11, i32 29
  %139 = getelementptr inbounds %struct.opj_pi_iterator, %struct.opj_pi_iterator* %0, i64 %11, i32 12, i32 14
  %140 = getelementptr inbounds %struct.opj_pi_iterator, %struct.opj_pi_iterator* %0, i64 %11, i32 12, i32 15
  %141 = getelementptr inbounds %struct.opj_tcp, %struct.opj_tcp* %9, i64 %10, i32 7, i64 %11, i32 33
  %142 = getelementptr inbounds %struct.opj_pi_iterator, %struct.opj_pi_iterator* %0, i64 %11, i32 12, i32 6
  %143 = getelementptr inbounds %struct.opj_pi_iterator, %struct.opj_pi_iterator* %0, i64 %11, i32 12, i32 7
  %144 = getelementptr inbounds %struct.opj_tcp, %struct.opj_tcp* %9, i64 %10, i32 7, i64 %11, i32 30
  %145 = getelementptr inbounds %struct.opj_pi_iterator, %struct.opj_pi_iterator* %0, i64 %11, i32 12, i32 5
  %146 = getelementptr inbounds %struct.opj_pi_iterator, %struct.opj_pi_iterator* %0, i64 %11, i32 12, i32 2
  %147 = getelementptr inbounds %struct.opj_tcp, %struct.opj_tcp* %9, i64 %10, i32 7, i64 %11, i32 31
  %148 = getelementptr inbounds %struct.opj_poc, %struct.opj_poc* %17, i64 0, i32 0
  %149 = getelementptr inbounds %struct.opj_pi_iterator, %struct.opj_pi_iterator* %0, i64 %11, i32 12, i32 3
  %150 = getelementptr inbounds %struct.opj_tcp, %struct.opj_tcp* %9, i64 %10, i32 7, i64 %11, i32 32
  %151 = getelementptr inbounds %struct.opj_pi_iterator, %struct.opj_pi_iterator* %0, i64 %11, i32 12, i32 1
  %152 = getelementptr inbounds %struct.opj_pi_iterator, %struct.opj_pi_iterator* %0, i64 %11, i32 12, i32 4
  %153 = getelementptr inbounds %struct.opj_tcp, %struct.opj_tcp* %9, i64 %10, i32 7, i64 %11, i32 25
  %154 = getelementptr inbounds %struct.opj_tcp, %struct.opj_tcp* %9, i64 %10, i32 7, i64 %11, i32 27
  %155 = getelementptr inbounds %struct.opj_tcp, %struct.opj_tcp* %9, i64 %10, i32 7, i64 %11, i32 26
  %156 = getelementptr inbounds %struct.opj_tcp, %struct.opj_tcp* %9, i64 %10, i32 7, i64 %11, i32 24
  %157 = getelementptr inbounds %struct.opj_tcp, %struct.opj_tcp* %9, i64 %10, i32 7, i64 %11, i32 23
  %158 = getelementptr inbounds %struct.opj_tcp, %struct.opj_tcp* %9, i64 %10, i32 7, i64 %11, i32 19
  %159 = getelementptr inbounds %struct.opj_tcp, %struct.opj_tcp* %9, i64 %10, i32 7, i64 %11, i32 20
  %160 = getelementptr inbounds %struct.opj_tcp, %struct.opj_tcp* %9, i64 %10, i32 7, i64 %11, i32 16
  %161 = getelementptr inbounds %struct.opj_tcp, %struct.opj_tcp* %9, i64 %10, i32 7, i64 %11, i32 22
  %162 = getelementptr inbounds %struct.opj_tcp, %struct.opj_tcp* %9, i64 %10, i32 7, i64 %11, i32 18
  %163 = getelementptr inbounds %struct.opj_tcp, %struct.opj_tcp* %9, i64 %10, i32 7, i64 %11, i32 21
  %164 = getelementptr inbounds %struct.opj_tcp, %struct.opj_tcp* %9, i64 %10, i32 7, i64 %11, i32 17
  %165 = sext i32 %5 to i64
  br label %245

166:                                              ; preds = %128
  br i1 %130, label %167, label %416

167:                                              ; preds = %166
  %168 = getelementptr inbounds %struct.opj_tcp, %struct.opj_tcp* %9, i64 %10, i32 7, i64 %11, i32 24
  %169 = getelementptr inbounds %struct.opj_tcp, %struct.opj_tcp* %9, i64 %10, i32 7, i64 %11, i32 34
  %170 = getelementptr inbounds %struct.opj_tcp, %struct.opj_tcp* %9, i64 %10, i32 7, i64 %11, i32 26
  %171 = getelementptr inbounds %struct.opj_tcp, %struct.opj_tcp* %9, i64 %10, i32 7, i64 %11, i32 35
  %172 = getelementptr inbounds %struct.opj_pi_iterator, %struct.opj_pi_iterator* %0, i64 %11, i32 12, i32 12
  %173 = getelementptr inbounds %struct.opj_tcp, %struct.opj_tcp* %9, i64 %10, i32 7, i64 %11, i32 28
  %174 = getelementptr inbounds %struct.opj_pi_iterator, %struct.opj_pi_iterator* %0, i64 %11, i32 12, i32 13
  %175 = getelementptr inbounds %struct.opj_pi_iterator, %struct.opj_pi_iterator* %0, i64 %11, i32 12, i32 14
  %176 = getelementptr inbounds %struct.opj_tcp, %struct.opj_tcp* %9, i64 %10, i32 7, i64 %11, i32 29
  %177 = getelementptr inbounds %struct.opj_pi_iterator, %struct.opj_pi_iterator* %0, i64 %11, i32 12, i32 15
  %178 = getelementptr inbounds %struct.opj_tcp, %struct.opj_tcp* %9, i64 %10, i32 7, i64 %11, i32 19
  %179 = getelementptr inbounds %struct.opj_tcp, %struct.opj_tcp* %9, i64 %10, i32 7, i64 %11, i32 33
  %180 = getelementptr inbounds %struct.opj_pi_iterator, %struct.opj_pi_iterator* %0, i64 %11, i32 12, i32 6
  %181 = getelementptr inbounds %struct.opj_pi_iterator, %struct.opj_pi_iterator* %0, i64 %11, i32 12, i32 7
  %182 = getelementptr inbounds %struct.opj_tcp, %struct.opj_tcp* %9, i64 %10, i32 7, i64 %11, i32 16
  %183 = getelementptr inbounds %struct.opj_tcp, %struct.opj_tcp* %9, i64 %10, i32 7, i64 %11, i32 30
  %184 = getelementptr inbounds %struct.opj_pi_iterator, %struct.opj_pi_iterator* %0, i64 %11, i32 12, i32 5
  %185 = getelementptr inbounds %struct.opj_pi_iterator, %struct.opj_pi_iterator* %0, i64 %11, i32 12, i32 2
  %186 = getelementptr inbounds %struct.opj_tcp, %struct.opj_tcp* %9, i64 %10, i32 7, i64 %11, i32 17
  %187 = getelementptr inbounds %struct.opj_tcp, %struct.opj_tcp* %9, i64 %10, i32 7, i64 %11, i32 31
  %188 = getelementptr inbounds %struct.opj_poc, %struct.opj_poc* %17, i64 0, i32 0
  %189 = getelementptr inbounds %struct.opj_pi_iterator, %struct.opj_pi_iterator* %0, i64 %11, i32 12, i32 3
  %190 = getelementptr inbounds %struct.opj_tcp, %struct.opj_tcp* %9, i64 %10, i32 7, i64 %11, i32 18
  %191 = getelementptr inbounds %struct.opj_tcp, %struct.opj_tcp* %9, i64 %10, i32 7, i64 %11, i32 32
  %192 = getelementptr inbounds %struct.opj_pi_iterator, %struct.opj_pi_iterator* %0, i64 %11, i32 12, i32 1
  %193 = getelementptr inbounds %struct.opj_pi_iterator, %struct.opj_pi_iterator* %0, i64 %11, i32 12, i32 4
  %194 = sext i32 %5 to i64
  br label %195

195:                                              ; preds = %167, %242
  %196 = phi i64 [ %194, %167 ], [ %243, %242 ]
  %197 = getelementptr inbounds i8, i8* %14, i64 %196
  %198 = load i8, i8* %197, align 1
  %199 = sext i8 %198 to i32
  switch i32 %199, label %242 [
    i32 67, label %200
    i32 82, label %206
    i32 76, label %212
    i32 80, label %218
  ]

200:                                              ; preds = %195
  %201 = load i32, i32* %190, align 4
  store i32 %201, i32* %191, align 4
  store i32 %201, i32* %192, align 4
  %202 = load i32, i32* %191, align 4
  %203 = add i32 %202, 1
  store i32 %203, i32* %193, align 8
  %204 = load i32, i32* %191, align 4
  %205 = add i32 %204, 1
  store i32 %205, i32* %191, align 4
  br label %242

206:                                              ; preds = %195
  %207 = load i32, i32* %186, align 4
  store i32 %207, i32* %187, align 4
  store i32 %207, i32* %188, align 8
  %208 = load i32, i32* %187, align 4
  %209 = add i32 %208, 1
  store i32 %209, i32* %189, align 4
  %210 = load i32, i32* %187, align 4
  %211 = add i32 %210, 1
  store i32 %211, i32* %187, align 4
  br label %242

212:                                              ; preds = %195
  %213 = load i32, i32* %182, align 4
  store i32 %213, i32* %183, align 4
  store i32 %213, i32* %184, align 4
  %214 = load i32, i32* %183, align 4
  %215 = add i32 %214, 1
  store i32 %215, i32* %185, align 8
  %216 = load i32, i32* %183, align 4
  %217 = add i32 %216, 1
  store i32 %217, i32* %183, align 4
  br label %242

218:                                              ; preds = %195
  %219 = load i32, i32* %12, align 4
  %220 = icmp ult i32 %219, 2
  br i1 %220, label %221, label %227

221:                                              ; preds = %218
  %222 = load i32, i32* %178, align 4
  store i32 %222, i32* %179, align 4
  store i32 %222, i32* %180, align 8
  %223 = load i32, i32* %179, align 4
  %224 = add i32 %223, 1
  store i32 %224, i32* %181, align 4
  %225 = load i32, i32* %179, align 4
  %226 = add i32 %225, 1
  store i32 %226, i32* %179, align 4
  br label %242

227:                                              ; preds = %218
  %228 = load i32, i32* %168, align 4
  store i32 %228, i32* %169, align 4
  %229 = load i32, i32* %170, align 4
  store i32 %229, i32* %171, align 4
  store i32 %228, i32* %172, align 4
  %230 = load i32, i32* %169, align 4
  %231 = load i32, i32* %173, align 4
  %232 = add i32 %231, %230
  %233 = urem i32 %230, %231
  %234 = sub i32 %232, %233
  store i32 %234, i32* %174, align 8
  %235 = load i32, i32* %171, align 4
  store i32 %235, i32* %175, align 4
  %236 = load i32, i32* %171, align 4
  %237 = load i32, i32* %176, align 4
  %238 = add i32 %237, %236
  %239 = urem i32 %236, %237
  %240 = sub i32 %238, %239
  store i32 %240, i32* %177, align 8
  store i32 %234, i32* %169, align 4
  %241 = load i32, i32* %177, align 8
  store i32 %241, i32* %171, align 4
  br label %242

242:                                              ; preds = %200, %206, %212, %195, %227, %221
  %243 = add nsw i64 %196, -1
  %244 = icmp sgt i64 %196, 0
  br i1 %244, label %195, label %416

245:                                              ; preds = %132, %412
  %246 = phi i64 [ %165, %132 ], [ %414, %412 ]
  %247 = phi i32 [ 1, %132 ], [ %413, %412 ]
  %248 = getelementptr inbounds i8, i8* %14, i64 %246
  %249 = load i8, i8* %248, align 1
  %250 = sext i8 %249 to i32
  switch i32 %250, label %283 [
    i32 67, label %251
    i32 82, label %255
    i32 76, label %259
    i32 80, label %263
  ]

251:                                              ; preds = %245
  %252 = load i32, i32* %150, align 4
  %253 = add i32 %252, -1
  store i32 %253, i32* %151, align 4
  %254 = load i32, i32* %150, align 4
  store i32 %254, i32* %152, align 8
  br label %283

255:                                              ; preds = %245
  %256 = load i32, i32* %147, align 4
  %257 = add i32 %256, -1
  store i32 %257, i32* %148, align 8
  %258 = load i32, i32* %147, align 4
  store i32 %258, i32* %149, align 4
  br label %283

259:                                              ; preds = %245
  %260 = load i32, i32* %144, align 4
  %261 = add i32 %260, -1
  store i32 %261, i32* %145, align 4
  %262 = load i32, i32* %144, align 4
  store i32 %262, i32* %146, align 8
  br label %283

263:                                              ; preds = %245
  %264 = load i32, i32* %12, align 4
  %265 = icmp ult i32 %264, 2
  br i1 %265, label %266, label %270

266:                                              ; preds = %263
  %267 = load i32, i32* %141, align 4
  %268 = add i32 %267, -1
  store i32 %268, i32* %142, align 8
  %269 = load i32, i32* %141, align 4
  store i32 %269, i32* %143, align 4
  br label %283

270:                                              ; preds = %263
  %271 = load i32, i32* %133, align 4
  %272 = load i32, i32* %134, align 4
  %273 = sub i32 %271, %272
  %274 = urem i32 %271, %272
  %275 = sub i32 %273, %274
  store i32 %275, i32* %135, align 4
  %276 = load i32, i32* %133, align 4
  store i32 %276, i32* %136, align 8
  %277 = load i32, i32* %137, align 4
  %278 = load i32, i32* %138, align 4
  %279 = sub i32 %277, %278
  %280 = urem i32 %277, %278
  %281 = sub i32 %279, %280
  store i32 %281, i32* %139, align 4
  %282 = load i32, i32* %137, align 4
  store i32 %282, i32* %140, align 8
  br label %283

283:                                              ; preds = %266, %270, %245, %259, %255, %251
  %284 = icmp eq i32 %247, 1
  br i1 %284, label %285, label %412

285:                                              ; preds = %283
  %286 = load i8, i8* %248, align 1
  %287 = sext i8 %286 to i32
  switch i32 %287, label %412 [
    i32 82, label %288
    i32 67, label %308
    i32 76, label %328
    i32 80, label %348
  ]

288:                                              ; preds = %285
  %289 = load i32, i32* %147, align 4
  %290 = load i32, i32* %163, align 4
  %291 = icmp eq i32 %289, %290
  br i1 %291, label %292, label %303

292:                                              ; preds = %288
  %293 = trunc i64 %246 to i32
  %294 = add i32 %293, -1
  %295 = tail call fastcc i32 @opj_pi_check_next_level(i32 %294, %struct.opj_cp* %1, i32 %2, i32 %3, i8* %14)
  %296 = icmp eq i32 %295, 0
  br i1 %296, label %412, label %297

297:                                              ; preds = %292
  %298 = load i32, i32* %164, align 4
  store i32 %298, i32* %147, align 4
  store i32 %298, i32* %148, align 8
  %299 = load i32, i32* %147, align 4
  %300 = add i32 %299, 1
  store i32 %300, i32* %149, align 4
  %301 = load i32, i32* %147, align 4
  %302 = add i32 %301, 1
  store i32 %302, i32* %147, align 4
  br label %412

303:                                              ; preds = %288
  store i32 %289, i32* %148, align 8
  %304 = load i32, i32* %147, align 4
  %305 = add i32 %304, 1
  store i32 %305, i32* %149, align 4
  %306 = load i32, i32* %147, align 4
  %307 = add i32 %306, 1
  store i32 %307, i32* %147, align 4
  br label %412

308:                                              ; preds = %285
  %309 = load i32, i32* %150, align 4
  %310 = load i32, i32* %161, align 4
  %311 = icmp eq i32 %309, %310
  br i1 %311, label %312, label %323

312:                                              ; preds = %308
  %313 = trunc i64 %246 to i32
  %314 = add i32 %313, -1
  %315 = tail call fastcc i32 @opj_pi_check_next_level(i32 %314, %struct.opj_cp* %1, i32 %2, i32 %3, i8* %14)
  %316 = icmp eq i32 %315, 0
  br i1 %316, label %412, label %317

317:                                              ; preds = %312
  %318 = load i32, i32* %162, align 4
  store i32 %318, i32* %150, align 4
  store i32 %318, i32* %151, align 4
  %319 = load i32, i32* %150, align 4
  %320 = add i32 %319, 1
  store i32 %320, i32* %152, align 8
  %321 = load i32, i32* %150, align 4
  %322 = add i32 %321, 1
  store i32 %322, i32* %150, align 4
  br label %412

323:                                              ; preds = %308
  store i32 %309, i32* %151, align 4
  %324 = load i32, i32* %150, align 4
  %325 = add i32 %324, 1
  store i32 %325, i32* %152, align 8
  %326 = load i32, i32* %150, align 4
  %327 = add i32 %326, 1
  store i32 %327, i32* %150, align 4
  br label %412

328:                                              ; preds = %285
  %329 = load i32, i32* %144, align 4
  %330 = load i32, i32* %159, align 4
  %331 = icmp eq i32 %329, %330
  br i1 %331, label %332, label %343

332:                                              ; preds = %328
  %333 = trunc i64 %246 to i32
  %334 = add i32 %333, -1
  %335 = tail call fastcc i32 @opj_pi_check_next_level(i32 %334, %struct.opj_cp* %1, i32 %2, i32 %3, i8* %14)
  %336 = icmp eq i32 %335, 0
  br i1 %336, label %412, label %337

337:                                              ; preds = %332
  %338 = load i32, i32* %160, align 4
  store i32 %338, i32* %144, align 4
  store i32 %338, i32* %145, align 4
  %339 = load i32, i32* %144, align 4
  %340 = add i32 %339, 1
  store i32 %340, i32* %146, align 8
  %341 = load i32, i32* %144, align 4
  %342 = add i32 %341, 1
  store i32 %342, i32* %144, align 4
  br label %412

343:                                              ; preds = %328
  store i32 %329, i32* %145, align 4
  %344 = load i32, i32* %144, align 4
  %345 = add i32 %344, 1
  store i32 %345, i32* %146, align 8
  %346 = load i32, i32* %144, align 4
  %347 = add i32 %346, 1
  store i32 %347, i32* %144, align 4
  br label %412

348:                                              ; preds = %285
  %349 = load i32, i32* %12, align 4
  %350 = icmp ult i32 %349, 2
  br i1 %350, label %351, label %371

351:                                              ; preds = %348
  %352 = load i32, i32* %141, align 4
  %353 = load i32, i32* %157, align 4
  %354 = icmp eq i32 %352, %353
  br i1 %354, label %355, label %366

355:                                              ; preds = %351
  %356 = trunc i64 %246 to i32
  %357 = add i32 %356, -1
  %358 = tail call fastcc i32 @opj_pi_check_next_level(i32 %357, %struct.opj_cp* %1, i32 %2, i32 %3, i8* %14)
  %359 = icmp eq i32 %358, 0
  br i1 %359, label %412, label %360

360:                                              ; preds = %355
  %361 = load i32, i32* %158, align 4
  store i32 %361, i32* %141, align 4
  store i32 %361, i32* %142, align 8
  %362 = load i32, i32* %141, align 4
  %363 = add i32 %362, 1
  store i32 %363, i32* %143, align 4
  %364 = load i32, i32* %141, align 4
  %365 = add i32 %364, 1
  store i32 %365, i32* %141, align 4
  br label %412

366:                                              ; preds = %351
  store i32 %352, i32* %142, align 8
  %367 = load i32, i32* %141, align 4
  %368 = add i32 %367, 1
  store i32 %368, i32* %143, align 4
  %369 = load i32, i32* %141, align 4
  %370 = add i32 %369, 1
  store i32 %370, i32* %141, align 4
  br label %412

371:                                              ; preds = %348
  %372 = load i32, i32* %133, align 4
  %373 = load i32, i32* %153, align 4
  %374 = icmp ult i32 %372, %373
  br i1 %374, label %406, label %375

375:                                              ; preds = %371
  %376 = load i32, i32* %137, align 4
  %377 = load i32, i32* %154, align 4
  %378 = icmp ult i32 %376, %377
  br i1 %378, label %390, label %379

379:                                              ; preds = %375
  %380 = trunc i64 %246 to i32
  %381 = add i32 %380, -1
  %382 = tail call fastcc i32 @opj_pi_check_next_level(i32 %381, %struct.opj_cp* %1, i32 %2, i32 %3, i8* %14)
  %383 = icmp eq i32 %382, 0
  br i1 %383, label %412, label %384

384:                                              ; preds = %379
  %385 = load i32, i32* %155, align 4
  store i32 %385, i32* %137, align 4
  store i32 %385, i32* %139, align 4
  %386 = load i32, i32* %137, align 4
  %387 = load i32, i32* %138, align 4
  %388 = add i32 %387, %386
  %389 = urem i32 %386, %387
  br label %395

390:                                              ; preds = %375
  store i32 %376, i32* %139, align 4
  %391 = load i32, i32* %137, align 4
  %392 = load i32, i32* %138, align 4
  %393 = add i32 %392, %391
  %394 = urem i32 %391, %392
  br label %395

395:                                              ; preds = %384, %390
  %396 = phi i32 [ %389, %384 ], [ %394, %390 ]
  %397 = phi i32 [ %388, %384 ], [ %393, %390 ]
  %398 = phi i32 [ 1, %384 ], [ 0, %390 ]
  %399 = sub i32 %397, %396
  store i32 %399, i32* %140, align 8
  store i32 %399, i32* %137, align 4
  %400 = load i32, i32* %156, align 4
  store i32 %400, i32* %133, align 4
  store i32 %400, i32* %135, align 4
  %401 = load i32, i32* %133, align 4
  %402 = load i32, i32* %134, align 4
  %403 = add i32 %402, %401
  %404 = urem i32 %401, %402
  %405 = sub i32 %403, %404
  store i32 %405, i32* %136, align 8
  store i32 %405, i32* %133, align 4
  br label %412

406:                                              ; preds = %371
  store i32 %372, i32* %135, align 4
  %407 = load i32, i32* %133, align 4
  %408 = load i32, i32* %134, align 4
  %409 = add i32 %408, %407
  %410 = urem i32 %407, %408
  %411 = sub i32 %409, %410
  store i32 %411, i32* %136, align 8
  store i32 %411, i32* %133, align 4
  br label %412

412:                                              ; preds = %379, %355, %332, %312, %292, %283, %360, %366, %395, %406, %343, %337, %323, %317, %303, %297, %285
  %413 = phi i32 [ 1, %285 ], [ 1, %360 ], [ 0, %366 ], [ %398, %395 ], [ 0, %406 ], [ 1, %337 ], [ 0, %343 ], [ 1, %317 ], [ 0, %323 ], [ 1, %297 ], [ 0, %303 ], [ %247, %283 ], [ 0, %292 ], [ 0, %312 ], [ 0, %332 ], [ 0, %355 ], [ 0, %379 ]
  %414 = add nsw i64 %246, -1
  %415 = icmp sgt i64 %246, 0
  br i1 %415, label %245, label %416

416:                                              ; preds = %412, %242, %131, %166, %33
  ret void
}

declare i8* @opj_j2k_convert_progression_order(i32) local_unnamed_addr #2

; Function Attrs: nounwind readonly ssp uwtable
define internal fastcc i32 @opj_pi_check_next_level(i32, %struct.opj_cp* readonly, i32, i32, i8* readonly) unnamed_addr #4 {
  %6 = getelementptr inbounds %struct.opj_cp, %struct.opj_cp* %1, i64 0, i32 19
  %7 = load %struct.opj_tcp*, %struct.opj_tcp** %6, align 8
  %8 = zext i32 %2 to i64
  %9 = zext i32 %3 to i64
  %10 = icmp sgt i32 %0, -1
  br i1 %10, label %11, label %81

11:                                               ; preds = %5
  %12 = sext i32 %0 to i64
  br label %13

13:                                               ; preds = %11, %79
  %14 = phi i64 [ %12, %11 ], [ %80, %79 ]
  %15 = getelementptr inbounds i8, i8* %4, i64 %14
  %16 = load i8, i8* %15, align 1
  %17 = sext i8 %16 to i32
  switch i32 %17, label %79 [
    i32 82, label %18
    i32 67, label %28
    i32 76, label %38
    i32 80, label %48
  ]

18:                                               ; preds = %13
  %19 = getelementptr inbounds %struct.opj_tcp, %struct.opj_tcp* %7, i64 %8, i32 7, i64 %9, i32 31
  %20 = load i32, i32* %19, align 4
  %21 = getelementptr inbounds %struct.opj_tcp, %struct.opj_tcp* %7, i64 %8, i32 7, i64 %9, i32 21
  %22 = load i32, i32* %21, align 4
  %23 = icmp eq i32 %20, %22
  br i1 %23, label %24, label %81

24:                                               ; preds = %18
  %25 = add nsw i32 %0, -1
  %26 = tail call fastcc i32 @opj_pi_check_next_level(i32 %25, %struct.opj_cp* %1, i32 %2, i32 %3, i8* %4)
  %27 = icmp ne i32 %26, 0
  br label %81

28:                                               ; preds = %13
  %29 = getelementptr inbounds %struct.opj_tcp, %struct.opj_tcp* %7, i64 %8, i32 7, i64 %9, i32 32
  %30 = load i32, i32* %29, align 4
  %31 = getelementptr inbounds %struct.opj_tcp, %struct.opj_tcp* %7, i64 %8, i32 7, i64 %9, i32 22
  %32 = load i32, i32* %31, align 4
  %33 = icmp eq i32 %30, %32
  br i1 %33, label %34, label %81

34:                                               ; preds = %28
  %35 = add nsw i32 %0, -1
  %36 = tail call fastcc i32 @opj_pi_check_next_level(i32 %35, %struct.opj_cp* %1, i32 %2, i32 %3, i8* %4)
  %37 = icmp ne i32 %36, 0
  br label %81

38:                                               ; preds = %13
  %39 = getelementptr inbounds %struct.opj_tcp, %struct.opj_tcp* %7, i64 %8, i32 7, i64 %9, i32 30
  %40 = load i32, i32* %39, align 4
  %41 = getelementptr inbounds %struct.opj_tcp, %struct.opj_tcp* %7, i64 %8, i32 7, i64 %9, i32 20
  %42 = load i32, i32* %41, align 4
  %43 = icmp eq i32 %40, %42
  br i1 %43, label %44, label %81

44:                                               ; preds = %38
  %45 = add nsw i32 %0, -1
  %46 = tail call fastcc i32 @opj_pi_check_next_level(i32 %45, %struct.opj_cp* %1, i32 %2, i32 %3, i8* %4)
  %47 = icmp ne i32 %46, 0
  br label %81

48:                                               ; preds = %13
  %49 = trunc i64 %14 to i32
  %50 = getelementptr inbounds %struct.opj_tcp, %struct.opj_tcp* %7, i64 %8, i32 7, i64 %9, i32 9
  %51 = load i32, i32* %50, align 4
  %52 = icmp ult i32 %51, 2
  br i1 %52, label %53, label %63

53:                                               ; preds = %48
  %54 = getelementptr inbounds %struct.opj_tcp, %struct.opj_tcp* %7, i64 %8, i32 7, i64 %9, i32 33
  %55 = load i32, i32* %54, align 4
  %56 = getelementptr inbounds %struct.opj_tcp, %struct.opj_tcp* %7, i64 %8, i32 7, i64 %9, i32 23
  %57 = load i32, i32* %56, align 4
  %58 = icmp eq i32 %55, %57
  br i1 %58, label %59, label %81

59:                                               ; preds = %53
  %60 = add nsw i32 %49, -1
  %61 = tail call fastcc i32 @opj_pi_check_next_level(i32 %60, %struct.opj_cp* %1, i32 %2, i32 %3, i8* %4)
  %62 = icmp ne i32 %61, 0
  br label %81

63:                                               ; preds = %48
  %64 = getelementptr inbounds %struct.opj_tcp, %struct.opj_tcp* %7, i64 %8, i32 7, i64 %9, i32 34
  %65 = load i32, i32* %64, align 4
  %66 = getelementptr inbounds %struct.opj_tcp, %struct.opj_tcp* %7, i64 %8, i32 7, i64 %9, i32 25
  %67 = load i32, i32* %66, align 4
  %68 = icmp eq i32 %65, %67
  br i1 %68, label %69, label %81

69:                                               ; preds = %63
  %70 = getelementptr inbounds %struct.opj_tcp, %struct.opj_tcp* %7, i64 %8, i32 7, i64 %9, i32 35
  %71 = load i32, i32* %70, align 4
  %72 = getelementptr inbounds %struct.opj_tcp, %struct.opj_tcp* %7, i64 %8, i32 7, i64 %9, i32 27
  %73 = load i32, i32* %72, align 4
  %74 = icmp eq i32 %71, %73
  br i1 %74, label %75, label %81

75:                                               ; preds = %69
  %76 = add nsw i32 %49, -1
  %77 = tail call fastcc i32 @opj_pi_check_next_level(i32 %76, %struct.opj_cp* %1, i32 %2, i32 %3, i8* %4)
  %78 = icmp ne i32 %77, 0
  br label %81

79:                                               ; preds = %13
  %80 = add i64 %14, -1
  br label %13

81:                                               ; preds = %5, %63, %69, %75, %53, %59, %38, %44, %28, %34, %18, %24
  %82 = phi i1 [ %27, %24 ], [ true, %18 ], [ %37, %34 ], [ true, %28 ], [ %47, %44 ], [ true, %38 ], [ %62, %59 ], [ true, %53 ], [ %78, %75 ], [ true, %69 ], [ true, %63 ], [ false, %5 ]
  %83 = zext i1 %82 to i32
  ret i32 %83
}

; Function Attrs: nounwind ssp uwtable
define hidden void @opj_pi_update_encoding_parameters(%struct.opj_image* nocapture readonly, %struct.opj_cp* nocapture readonly, i32) local_unnamed_addr #0 {
  %4 = getelementptr inbounds %struct.opj_cp, %struct.opj_cp* %1, i64 0, i32 19
  %5 = load %struct.opj_tcp*, %struct.opj_tcp** %4, align 8
  %6 = zext i32 %2 to i64
  %7 = getelementptr inbounds %struct.opj_cp, %struct.opj_cp* %1, i64 0, i32 6
  %8 = load i32, i32* %7, align 8
  %9 = urem i32 %2, %8
  %10 = udiv i32 %2, %8
  %11 = getelementptr inbounds %struct.opj_cp, %struct.opj_cp* %1, i64 0, i32 1
  %12 = load i32, i32* %11, align 4
  %13 = getelementptr inbounds %struct.opj_cp, %struct.opj_cp* %1, i64 0, i32 3
  %14 = load i32, i32* %13, align 4
  %15 = mul i32 %14, %9
  %16 = add i32 %15, %12
  %17 = getelementptr inbounds %struct.opj_image, %struct.opj_image* %0, i64 0, i32 0
  %18 = load i32, i32* %17, align 8
  %19 = icmp ugt i32 %16, %18
  %20 = select i1 %19, i32 %16, i32 %18
  %21 = zext i32 %16 to i64
  %22 = zext i32 %14 to i64
  %23 = add nuw nsw i64 %21, %22
  %24 = lshr i64 %23, 32
  %25 = trunc i64 %24 to i32
  %26 = sub nsw i32 0, %25
  %27 = trunc i64 %23 to i32
  %28 = or i32 %26, %27
  %29 = getelementptr inbounds %struct.opj_image, %struct.opj_image* %0, i64 0, i32 2
  %30 = load i32, i32* %29, align 8
  %31 = icmp ult i32 %28, %30
  %32 = select i1 %31, i32 %28, i32 %30
  %33 = getelementptr inbounds %struct.opj_cp, %struct.opj_cp* %1, i64 0, i32 2
  %34 = load i32, i32* %33, align 8
  %35 = getelementptr inbounds %struct.opj_cp, %struct.opj_cp* %1, i64 0, i32 4
  %36 = load i32, i32* %35, align 8
  %37 = mul i32 %36, %10
  %38 = add i32 %37, %34
  %39 = getelementptr inbounds %struct.opj_image, %struct.opj_image* %0, i64 0, i32 1
  %40 = load i32, i32* %39, align 4
  %41 = icmp ugt i32 %38, %40
  %42 = select i1 %41, i32 %38, i32 %40
  %43 = zext i32 %38 to i64
  %44 = zext i32 %36 to i64
  %45 = add nuw nsw i64 %43, %44
  %46 = lshr i64 %45, 32
  %47 = trunc i64 %46 to i32
  %48 = sub nsw i32 0, %47
  %49 = trunc i64 %45 to i32
  %50 = or i32 %48, %49
  %51 = getelementptr inbounds %struct.opj_image, %struct.opj_image* %0, i64 0, i32 3
  %52 = load i32, i32* %51, align 4
  %53 = icmp ult i32 %50, %52
  %54 = select i1 %53, i32 %50, i32 %52
  %55 = getelementptr inbounds %struct.opj_image, %struct.opj_image* %0, i64 0, i32 4
  %56 = load i32, i32* %55, align 8
  %57 = icmp eq i32 %56, 0
  br i1 %57, label %183, label %58

58:                                               ; preds = %3
  %59 = getelementptr inbounds %struct.opj_tcp, %struct.opj_tcp* %5, i64 %6, i32 15
  %60 = load %struct.opj_tccp*, %struct.opj_tccp** %59, align 8
  %61 = getelementptr inbounds %struct.opj_image, %struct.opj_image* %0, i64 0, i32 6
  %62 = load %struct.opj_image_comp*, %struct.opj_image_comp** %61, align 8
  %63 = zext i32 %20 to i64
  %64 = zext i32 %42 to i64
  %65 = zext i32 %32 to i64
  %66 = zext i32 %54 to i64
  br label %67

67:                                               ; preds = %174, %58
  %68 = phi i32 [ %175, %174 ], [ 0, %58 ]
  %69 = phi i32 [ %176, %174 ], [ 0, %58 ]
  %70 = phi i32 [ %177, %174 ], [ 2147483647, %58 ]
  %71 = phi i32 [ %178, %174 ], [ 2147483647, %58 ]
  %72 = phi i32 [ %181, %174 ], [ 0, %58 ]
  %73 = phi %struct.opj_tccp* [ %180, %174 ], [ %60, %58 ]
  %74 = phi %struct.opj_image_comp* [ %179, %174 ], [ %62, %58 ]
  %75 = getelementptr inbounds %struct.opj_image_comp, %struct.opj_image_comp* %74, i64 0, i32 0
  %76 = load i32, i32* %75, align 8
  %77 = zext i32 %76 to i64
  %78 = add nsw i64 %77, -1
  %79 = add nsw i64 %78, %63
  %80 = udiv i64 %79, %77
  %81 = getelementptr inbounds %struct.opj_image_comp, %struct.opj_image_comp* %74, i64 0, i32 1
  %82 = load i32, i32* %81, align 4
  %83 = zext i32 %82 to i64
  %84 = add nsw i64 %83, -1
  %85 = add nsw i64 %84, %64
  %86 = udiv i64 %85, %83
  %87 = add nsw i64 %78, %65
  %88 = udiv i64 %87, %77
  %89 = add nsw i64 %84, %66
  %90 = udiv i64 %89, %83
  %91 = getelementptr inbounds %struct.opj_tccp, %struct.opj_tccp* %73, i64 0, i32 1
  %92 = load i32, i32* %91, align 4
  %93 = icmp ugt i32 %92, %68
  br i1 %93, label %96, label %94

94:                                               ; preds = %67
  %95 = icmp eq i32 %92, 0
  br i1 %95, label %174, label %96

96:                                               ; preds = %67, %94
  %97 = phi i32 [ %68, %94 ], [ %92, %67 ]
  %98 = and i64 %80, 4294967295
  %99 = and i64 %86, 4294967295
  %100 = and i64 %88, 4294967295
  %101 = and i64 %90, 4294967295
  %102 = zext i32 %92 to i64
  br label %103

103:                                              ; preds = %162, %96
  %104 = phi i32 [ %69, %96 ], [ %170, %162 ]
  %105 = phi i32 [ %70, %96 ], [ %120, %162 ]
  %106 = phi i32 [ %71, %96 ], [ %122, %162 ]
  %107 = phi i64 [ 0, %96 ], [ %171, %162 ]
  %108 = phi i32 [ 0, %96 ], [ %172, %162 ]
  %109 = getelementptr inbounds %struct.opj_tccp, %struct.opj_tccp* %73, i64 0, i32 10, i64 %107
  %110 = load i32, i32* %109, align 4
  %111 = getelementptr inbounds %struct.opj_tccp, %struct.opj_tccp* %73, i64 0, i32 11, i64 %107
  %112 = load i32, i32* %111, align 4
  %113 = xor i32 %108, -1
  %114 = add i32 %92, %113
  %115 = add i32 %114, %110
  %116 = shl i32 %76, %115
  %117 = add i32 %112, %114
  %118 = shl i32 %82, %117
  %119 = icmp ult i32 %105, %116
  %120 = select i1 %119, i32 %105, i32 %116
  %121 = icmp ult i32 %106, %118
  %122 = select i1 %121, i32 %106, i32 %118
  %123 = zext i32 %114 to i64
  %124 = shl nsw i64 -1, %123
  %125 = xor i64 %124, -1
  %126 = add i64 %98, %125
  %127 = lshr i64 %126, %123
  %128 = trunc i64 %127 to i32
  %129 = add i64 %99, %125
  %130 = lshr i64 %129, %123
  %131 = trunc i64 %130 to i32
  %132 = add i64 %100, %125
  %133 = lshr i64 %132, %123
  %134 = trunc i64 %133 to i32
  %135 = add i64 %101, %125
  %136 = lshr i64 %135, %123
  %137 = trunc i64 %136 to i32
  %138 = shl i32 -1, %112
  %139 = and i32 %138, %131
  %140 = zext i32 %110 to i64
  %141 = and i64 %136, 4294967295
  %142 = zext i32 %112 to i64
  %143 = shl nsw i64 -1, %142
  %144 = xor i64 %143, -1
  %145 = add i64 %141, %144
  %146 = lshr i64 %145, %142
  %147 = trunc i64 %146 to i32
  %148 = shl i32 %147, %112
  %149 = icmp eq i32 %128, %134
  br i1 %149, label %162, label %150

150:                                              ; preds = %103
  %151 = and i64 %133, 4294967295
  %152 = shl nsw i64 -1, %140
  %153 = xor i64 %152, -1
  %154 = add i64 %151, %153
  %155 = lshr i64 %154, %140
  %156 = trunc i64 %155 to i32
  %157 = shl i32 %156, %110
  %158 = shl i32 -1, %110
  %159 = and i32 %158, %128
  %160 = sub i32 %157, %159
  %161 = lshr i32 %160, %110
  br label %162

162:                                              ; preds = %150, %103
  %163 = phi i32 [ %161, %150 ], [ 0, %103 ]
  %164 = icmp eq i32 %131, %137
  %165 = sub i32 %148, %139
  %166 = lshr i32 %165, %112
  %167 = select i1 %164, i32 0, i32 %166
  %168 = mul i32 %163, %167
  %169 = icmp ugt i32 %168, %104
  %170 = select i1 %169, i32 %168, i32 %104
  %171 = add nuw nsw i64 %107, 1
  %172 = add nuw i32 %108, 1
  %173 = icmp ult i64 %171, %102
  br i1 %173, label %103, label %174

174:                                              ; preds = %162, %94
  %175 = phi i32 [ %68, %94 ], [ %97, %162 ]
  %176 = phi i32 [ %69, %94 ], [ %170, %162 ]
  %177 = phi i32 [ %70, %94 ], [ %120, %162 ]
  %178 = phi i32 [ %71, %94 ], [ %122, %162 ]
  %179 = getelementptr inbounds %struct.opj_image_comp, %struct.opj_image_comp* %74, i64 1
  %180 = getelementptr inbounds %struct.opj_tccp, %struct.opj_tccp* %73, i64 1
  %181 = add nuw i32 %72, 1
  %182 = icmp eq i32 %181, %56
  br i1 %182, label %183, label %67

183:                                              ; preds = %174, %3
  %184 = phi i32 [ 0, %3 ], [ %175, %174 ]
  %185 = phi i32 [ 0, %3 ], [ %176, %174 ]
  %186 = phi i32 [ 2147483647, %3 ], [ %177, %174 ]
  %187 = phi i32 [ 2147483647, %3 ], [ %178, %174 ]
  %188 = getelementptr inbounds %struct.opj_tcp, %struct.opj_tcp* %5, i64 %6, i32 29
  %189 = load i8, i8* %188, align 8
  %190 = and i8 %189, 4
  %191 = icmp eq i8 %190, 0
  br i1 %191, label %193, label %192

192:                                              ; preds = %183
  tail call fastcc void @opj_pi_update_encode_poc_and_final(%struct.opj_cp* %1, i32 %2, i32 %20, i32 %32, i32 %42, i32 %54, i32 %185, i32 %186, i32 %187)
  br label %225

193:                                              ; preds = %183
  %194 = getelementptr inbounds %struct.opj_tcp, %struct.opj_tcp* %5, i64 %6, i32 6
  %195 = load i32, i32* %194, align 4
  %196 = add i32 %195, 1
  %197 = icmp eq i32 %196, 0
  br i1 %197, label %225, label %198

198:                                              ; preds = %193
  %199 = getelementptr inbounds %struct.opj_tcp, %struct.opj_tcp* %5, i64 %6, i32 7, i64 0
  %200 = getelementptr inbounds %struct.opj_tcp, %struct.opj_tcp* %5, i64 %6, i32 2
  %201 = getelementptr inbounds %struct.opj_tcp, %struct.opj_tcp* %5, i64 %6, i32 1
  br label %202

202:                                              ; preds = %202, %198
  %203 = phi %struct.opj_poc* [ %199, %198 ], [ %222, %202 ]
  %204 = phi i32 [ 0, %198 ], [ %223, %202 ]
  %205 = getelementptr inbounds %struct.opj_poc, %struct.opj_poc* %203, i64 0, i32 18
  store i32 0, i32* %205, align 4
  %206 = getelementptr inbounds %struct.opj_poc, %struct.opj_poc* %203, i64 0, i32 22
  store i32 %56, i32* %206, align 4
  %207 = getelementptr inbounds %struct.opj_poc, %struct.opj_poc* %203, i64 0, i32 17
  store i32 0, i32* %207, align 4
  %208 = getelementptr inbounds %struct.opj_poc, %struct.opj_poc* %203, i64 0, i32 21
  store i32 %184, i32* %208, align 4
  %209 = getelementptr inbounds %struct.opj_poc, %struct.opj_poc* %203, i64 0, i32 16
  store i32 0, i32* %209, align 4
  %210 = load i32, i32* %200, align 8
  %211 = getelementptr inbounds %struct.opj_poc, %struct.opj_poc* %203, i64 0, i32 20
  store i32 %210, i32* %211, align 4
  %212 = load i32, i32* %201, align 4
  %213 = getelementptr inbounds %struct.opj_poc, %struct.opj_poc* %203, i64 0, i32 9
  store i32 %212, i32* %213, align 4
  %214 = getelementptr inbounds %struct.opj_poc, %struct.opj_poc* %203, i64 0, i32 19
  store i32 0, i32* %214, align 4
  %215 = getelementptr inbounds %struct.opj_poc, %struct.opj_poc* %203, i64 0, i32 23
  store i32 %185, i32* %215, align 4
  %216 = getelementptr inbounds %struct.opj_poc, %struct.opj_poc* %203, i64 0, i32 24
  store i32 %20, i32* %216, align 4
  %217 = getelementptr inbounds %struct.opj_poc, %struct.opj_poc* %203, i64 0, i32 25
  store i32 %32, i32* %217, align 4
  %218 = getelementptr inbounds %struct.opj_poc, %struct.opj_poc* %203, i64 0, i32 26
  store i32 %42, i32* %218, align 4
  %219 = getelementptr inbounds %struct.opj_poc, %struct.opj_poc* %203, i64 0, i32 27
  store i32 %54, i32* %219, align 4
  %220 = getelementptr inbounds %struct.opj_poc, %struct.opj_poc* %203, i64 0, i32 28
  store i32 %186, i32* %220, align 4
  %221 = getelementptr inbounds %struct.opj_poc, %struct.opj_poc* %203, i64 0, i32 29
  store i32 %187, i32* %221, align 4
  %222 = getelementptr inbounds %struct.opj_poc, %struct.opj_poc* %203, i64 1
  %223 = add nuw i32 %204, 1
  %224 = icmp eq i32 %223, %196
  br i1 %224, label %225, label %202

225:                                              ; preds = %202, %193, %192
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @opj_pi_next(%struct.opj_pi_iterator*) local_unnamed_addr #0 {
  %2 = getelementptr inbounds %struct.opj_pi_iterator, %struct.opj_pi_iterator* %0, i64 0, i32 12, i32 9
  %3 = load i32, i32* %2, align 4
  switch i32 %3, label %1369 [
    i32 0, label %4
    i32 1, label %137
    i32 2, label %270
    i32 3, label %626
    i32 4, label %1003
  ]

4:                                                ; preds = %1
  %5 = getelementptr inbounds %struct.opj_pi_iterator, %struct.opj_pi_iterator* %0, i64 0, i32 12, i32 1
  %6 = load i32, i32* %5, align 4
  %7 = getelementptr inbounds %struct.opj_pi_iterator, %struct.opj_pi_iterator* %0, i64 0, i32 13
  %8 = load i32, i32* %7, align 4
  %9 = icmp ult i32 %6, %8
  br i1 %9, label %10, label %15

10:                                               ; preds = %4
  %11 = getelementptr inbounds %struct.opj_pi_iterator, %struct.opj_pi_iterator* %0, i64 0, i32 12, i32 4
  %12 = load i32, i32* %11, align 8
  %13 = add i32 %8, 1
  %14 = icmp ult i32 %12, %13
  br i1 %14, label %19, label %15

15:                                               ; preds = %10, %4
  %16 = getelementptr inbounds %struct.opj_pi_iterator, %struct.opj_pi_iterator* %0, i64 0, i32 23
  %17 = load %struct.opj_event_mgr*, %struct.opj_event_mgr** %16, align 8
  %18 = tail call i32 (%struct.opj_event_mgr*, i32, i8*, ...) @opj_event_msg(%struct.opj_event_mgr* %17, i32 1, i8* getelementptr inbounds ([45 x i8], [45 x i8]* @.str, i64 0, i64 0)) #5
  br label %1369

19:                                               ; preds = %10
  %20 = getelementptr inbounds %struct.opj_pi_iterator, %struct.opj_pi_iterator* %0, i64 0, i32 11
  %21 = load i32, i32* %20, align 4
  %22 = icmp eq i32 %21, 0
  br i1 %22, label %23, label %26

23:                                               ; preds = %19
  %24 = getelementptr inbounds %struct.opj_pi_iterator, %struct.opj_pi_iterator* %0, i64 0, i32 9
  %25 = load i32, i32* %24, align 4
  br label %121

26:                                               ; preds = %19
  store i32 0, i32* %20, align 4
  %27 = getelementptr inbounds %struct.opj_pi_iterator, %struct.opj_pi_iterator* %0, i64 0, i32 12, i32 5
  %28 = load i32, i32* %27, align 4
  %29 = getelementptr inbounds %struct.opj_pi_iterator, %struct.opj_pi_iterator* %0, i64 0, i32 10
  store i32 %28, i32* %29, align 8
  br label %30

30:                                               ; preds = %133, %26
  %31 = phi i32 [ %136, %133 ], [ %28, %26 ]
  %32 = getelementptr inbounds %struct.opj_pi_iterator, %struct.opj_pi_iterator* %0, i64 0, i32 12, i32 2
  %33 = load i32, i32* %32, align 8
  %34 = icmp ult i32 %31, %33
  br i1 %34, label %35, label %1369

35:                                               ; preds = %30
  %36 = getelementptr inbounds %struct.opj_pi_iterator, %struct.opj_pi_iterator* %0, i64 0, i32 12, i32 0
  %37 = load i32, i32* %36, align 8
  %38 = getelementptr inbounds %struct.opj_pi_iterator, %struct.opj_pi_iterator* %0, i64 0, i32 8
  store i32 %37, i32* %38, align 8
  br label %39

39:                                               ; preds = %129, %35
  %40 = phi i32 [ %132, %129 ], [ %37, %35 ]
  %41 = getelementptr inbounds %struct.opj_pi_iterator, %struct.opj_pi_iterator* %0, i64 0, i32 12, i32 3
  %42 = load i32, i32* %41, align 4
  %43 = icmp ult i32 %40, %42
  br i1 %43, label %44, label %133

44:                                               ; preds = %39
  %45 = getelementptr inbounds %struct.opj_pi_iterator, %struct.opj_pi_iterator* %0, i64 0, i32 7
  store i32 %6, i32* %45, align 4
  br label %46

46:                                               ; preds = %125, %44
  %47 = phi i32 [ %128, %125 ], [ %6, %44 ]
  %48 = icmp ult i32 %47, %12
  br i1 %48, label %49, label %129

49:                                               ; preds = %46
  %50 = getelementptr inbounds %struct.opj_pi_iterator, %struct.opj_pi_iterator* %0, i64 0, i32 14
  %51 = load %struct.opj_pi_comp*, %struct.opj_pi_comp** %50, align 8
  %52 = zext i32 %47 to i64
  %53 = getelementptr inbounds %struct.opj_pi_iterator, %struct.opj_pi_iterator* %0, i64 0, i32 8
  %54 = load i32, i32* %53, align 8
  %55 = getelementptr inbounds %struct.opj_pi_comp, %struct.opj_pi_comp* %51, i64 %52, i32 2
  %56 = load i32, i32* %55, align 8
  %57 = icmp ult i32 %54, %56
  br i1 %57, label %58, label %125

58:                                               ; preds = %49
  %59 = getelementptr inbounds %struct.opj_pi_comp, %struct.opj_pi_comp* %51, i64 %52, i32 3
  %60 = load %struct.opj_pi_resolution*, %struct.opj_pi_resolution** %59, align 8
  %61 = zext i32 %54 to i64
  %62 = getelementptr inbounds %struct.opj_pi_iterator, %struct.opj_pi_iterator* %0, i64 0, i32 0
  %63 = load i8, i8* %62, align 8
  %64 = icmp eq i8 %63, 0
  br i1 %64, label %65, label %72

65:                                               ; preds = %58
  %66 = getelementptr inbounds %struct.opj_pi_resolution, %struct.opj_pi_resolution* %60, i64 %61, i32 2
  %67 = load i32, i32* %66, align 4
  %68 = getelementptr inbounds %struct.opj_pi_resolution, %struct.opj_pi_resolution* %60, i64 %61, i32 3
  %69 = load i32, i32* %68, align 4
  %70 = mul i32 %69, %67
  %71 = getelementptr inbounds %struct.opj_pi_iterator, %struct.opj_pi_iterator* %0, i64 0, i32 12, i32 7
  store i32 %70, i32* %71, align 4
  br label %72

72:                                               ; preds = %65, %58
  %73 = getelementptr inbounds %struct.opj_pi_iterator, %struct.opj_pi_iterator* %0, i64 0, i32 12, i32 6
  %74 = load i32, i32* %73, align 8
  %75 = getelementptr inbounds %struct.opj_pi_iterator, %struct.opj_pi_iterator* %0, i64 0, i32 9
  store i32 %74, i32* %75, align 4
  br label %76

76:                                               ; preds = %121, %72
  %77 = phi i32 [ %124, %121 ], [ %74, %72 ]
  %78 = getelementptr inbounds %struct.opj_pi_iterator, %struct.opj_pi_iterator* %0, i64 0, i32 12, i32 7
  %79 = load i32, i32* %78, align 4
  %80 = icmp ult i32 %77, %79
  br i1 %80, label %84, label %81

81:                                               ; preds = %76
  %82 = getelementptr inbounds %struct.opj_pi_iterator, %struct.opj_pi_iterator* %0, i64 0, i32 7
  %83 = load i32, i32* %82, align 4
  br label %125

84:                                               ; preds = %76
  %85 = getelementptr inbounds %struct.opj_pi_iterator, %struct.opj_pi_iterator* %0, i64 0, i32 10
  %86 = load i32, i32* %85, align 8
  %87 = getelementptr inbounds %struct.opj_pi_iterator, %struct.opj_pi_iterator* %0, i64 0, i32 3
  %88 = load i32, i32* %87, align 4
  %89 = mul i32 %88, %86
  %90 = getelementptr inbounds %struct.opj_pi_iterator, %struct.opj_pi_iterator* %0, i64 0, i32 8
  %91 = load i32, i32* %90, align 8
  %92 = getelementptr inbounds %struct.opj_pi_iterator, %struct.opj_pi_iterator* %0, i64 0, i32 4
  %93 = load i32, i32* %92, align 8
  %94 = mul i32 %93, %91
  %95 = add i32 %94, %89
  %96 = getelementptr inbounds %struct.opj_pi_iterator, %struct.opj_pi_iterator* %0, i64 0, i32 7
  %97 = load i32, i32* %96, align 4
  %98 = getelementptr inbounds %struct.opj_pi_iterator, %struct.opj_pi_iterator* %0, i64 0, i32 5
  %99 = load i32, i32* %98, align 4
  %100 = mul i32 %99, %97
  %101 = add i32 %95, %100
  %102 = getelementptr inbounds %struct.opj_pi_iterator, %struct.opj_pi_iterator* %0, i64 0, i32 6
  %103 = load i32, i32* %102, align 8
  %104 = mul i32 %103, %77
  %105 = add i32 %101, %104
  %106 = getelementptr inbounds %struct.opj_pi_iterator, %struct.opj_pi_iterator* %0, i64 0, i32 2
  %107 = load i32, i32* %106, align 8
  %108 = icmp ult i32 %105, %107
  br i1 %108, label %113, label %109

109:                                              ; preds = %84
  %110 = getelementptr inbounds %struct.opj_pi_iterator, %struct.opj_pi_iterator* %0, i64 0, i32 23
  %111 = load %struct.opj_event_mgr*, %struct.opj_event_mgr** %110, align 8
  %112 = tail call i32 (%struct.opj_event_mgr*, i32, i8*, ...) @opj_event_msg(%struct.opj_event_mgr* %111, i32 1, i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.1, i64 0, i64 0)) #5
  br label %1369

113:                                              ; preds = %84
  %114 = getelementptr inbounds %struct.opj_pi_iterator, %struct.opj_pi_iterator* %0, i64 0, i32 1
  %115 = load i16*, i16** %114, align 8
  %116 = zext i32 %105 to i64
  %117 = getelementptr inbounds i16, i16* %115, i64 %116
  %118 = load i16, i16* %117, align 2
  %119 = icmp eq i16 %118, 0
  br i1 %119, label %120, label %121

120:                                              ; preds = %113
  store i16 1, i16* %117, align 2
  br label %1369

121:                                              ; preds = %113, %23
  %122 = phi i32 [ %25, %23 ], [ %77, %113 ]
  %123 = getelementptr inbounds %struct.opj_pi_iterator, %struct.opj_pi_iterator* %0, i64 0, i32 9
  %124 = add i32 %122, 1
  store i32 %124, i32* %123, align 4
  br label %76

125:                                              ; preds = %81, %49
  %126 = phi i32 [ %83, %81 ], [ %47, %49 ]
  %127 = getelementptr inbounds %struct.opj_pi_iterator, %struct.opj_pi_iterator* %0, i64 0, i32 7
  %128 = add i32 %126, 1
  store i32 %128, i32* %127, align 4
  br label %46

129:                                              ; preds = %46
  %130 = getelementptr inbounds %struct.opj_pi_iterator, %struct.opj_pi_iterator* %0, i64 0, i32 8
  %131 = load i32, i32* %130, align 8
  %132 = add i32 %131, 1
  store i32 %132, i32* %130, align 8
  br label %39

133:                                              ; preds = %39
  %134 = getelementptr inbounds %struct.opj_pi_iterator, %struct.opj_pi_iterator* %0, i64 0, i32 10
  %135 = load i32, i32* %134, align 8
  %136 = add i32 %135, 1
  store i32 %136, i32* %134, align 8
  br label %30

137:                                              ; preds = %1
  %138 = getelementptr inbounds %struct.opj_pi_iterator, %struct.opj_pi_iterator* %0, i64 0, i32 12, i32 1
  %139 = load i32, i32* %138, align 4
  %140 = getelementptr inbounds %struct.opj_pi_iterator, %struct.opj_pi_iterator* %0, i64 0, i32 13
  %141 = load i32, i32* %140, align 4
  %142 = icmp ult i32 %139, %141
  br i1 %142, label %143, label %148

143:                                              ; preds = %137
  %144 = getelementptr inbounds %struct.opj_pi_iterator, %struct.opj_pi_iterator* %0, i64 0, i32 12, i32 4
  %145 = load i32, i32* %144, align 8
  %146 = add i32 %141, 1
  %147 = icmp ult i32 %145, %146
  br i1 %147, label %152, label %148

148:                                              ; preds = %143, %137
  %149 = getelementptr inbounds %struct.opj_pi_iterator, %struct.opj_pi_iterator* %0, i64 0, i32 23
  %150 = load %struct.opj_event_mgr*, %struct.opj_event_mgr** %149, align 8
  %151 = tail call i32 (%struct.opj_event_mgr*, i32, i8*, ...) @opj_event_msg(%struct.opj_event_mgr* %150, i32 1, i8* getelementptr inbounds ([45 x i8], [45 x i8]* @.str.2, i64 0, i64 0)) #5
  br label %1369

152:                                              ; preds = %143
  %153 = getelementptr inbounds %struct.opj_pi_iterator, %struct.opj_pi_iterator* %0, i64 0, i32 11
  %154 = load i32, i32* %153, align 4
  %155 = icmp eq i32 %154, 0
  br i1 %155, label %156, label %159

156:                                              ; preds = %152
  %157 = getelementptr inbounds %struct.opj_pi_iterator, %struct.opj_pi_iterator* %0, i64 0, i32 9
  %158 = load i32, i32* %157, align 4
  br label %254

159:                                              ; preds = %152
  store i32 0, i32* %153, align 4
  %160 = getelementptr inbounds %struct.opj_pi_iterator, %struct.opj_pi_iterator* %0, i64 0, i32 12, i32 0
  %161 = load i32, i32* %160, align 8
  %162 = getelementptr inbounds %struct.opj_pi_iterator, %struct.opj_pi_iterator* %0, i64 0, i32 8
  store i32 %161, i32* %162, align 8
  br label %163

163:                                              ; preds = %266, %159
  %164 = phi i32 [ %269, %266 ], [ %161, %159 ]
  %165 = getelementptr inbounds %struct.opj_pi_iterator, %struct.opj_pi_iterator* %0, i64 0, i32 12, i32 3
  %166 = load i32, i32* %165, align 4
  %167 = icmp ult i32 %164, %166
  br i1 %167, label %168, label %1369

168:                                              ; preds = %163
  %169 = getelementptr inbounds %struct.opj_pi_iterator, %struct.opj_pi_iterator* %0, i64 0, i32 12, i32 5
  %170 = load i32, i32* %169, align 4
  %171 = getelementptr inbounds %struct.opj_pi_iterator, %struct.opj_pi_iterator* %0, i64 0, i32 10
  store i32 %170, i32* %171, align 8
  br label %172

172:                                              ; preds = %262, %168
  %173 = phi i32 [ %265, %262 ], [ %170, %168 ]
  %174 = getelementptr inbounds %struct.opj_pi_iterator, %struct.opj_pi_iterator* %0, i64 0, i32 12, i32 2
  %175 = load i32, i32* %174, align 8
  %176 = icmp ult i32 %173, %175
  br i1 %176, label %177, label %266

177:                                              ; preds = %172
  %178 = getelementptr inbounds %struct.opj_pi_iterator, %struct.opj_pi_iterator* %0, i64 0, i32 7
  store i32 %139, i32* %178, align 4
  br label %179

179:                                              ; preds = %258, %177
  %180 = phi i32 [ %261, %258 ], [ %139, %177 ]
  %181 = icmp ult i32 %180, %145
  br i1 %181, label %182, label %262

182:                                              ; preds = %179
  %183 = getelementptr inbounds %struct.opj_pi_iterator, %struct.opj_pi_iterator* %0, i64 0, i32 14
  %184 = load %struct.opj_pi_comp*, %struct.opj_pi_comp** %183, align 8
  %185 = zext i32 %180 to i64
  %186 = getelementptr inbounds %struct.opj_pi_iterator, %struct.opj_pi_iterator* %0, i64 0, i32 8
  %187 = load i32, i32* %186, align 8
  %188 = getelementptr inbounds %struct.opj_pi_comp, %struct.opj_pi_comp* %184, i64 %185, i32 2
  %189 = load i32, i32* %188, align 8
  %190 = icmp ult i32 %187, %189
  br i1 %190, label %191, label %258

191:                                              ; preds = %182
  %192 = getelementptr inbounds %struct.opj_pi_comp, %struct.opj_pi_comp* %184, i64 %185, i32 3
  %193 = load %struct.opj_pi_resolution*, %struct.opj_pi_resolution** %192, align 8
  %194 = zext i32 %187 to i64
  %195 = getelementptr inbounds %struct.opj_pi_iterator, %struct.opj_pi_iterator* %0, i64 0, i32 0
  %196 = load i8, i8* %195, align 8
  %197 = icmp eq i8 %196, 0
  br i1 %197, label %198, label %205

198:                                              ; preds = %191
  %199 = getelementptr inbounds %struct.opj_pi_resolution, %struct.opj_pi_resolution* %193, i64 %194, i32 2
  %200 = load i32, i32* %199, align 4
  %201 = getelementptr inbounds %struct.opj_pi_resolution, %struct.opj_pi_resolution* %193, i64 %194, i32 3
  %202 = load i32, i32* %201, align 4
  %203 = mul i32 %202, %200
  %204 = getelementptr inbounds %struct.opj_pi_iterator, %struct.opj_pi_iterator* %0, i64 0, i32 12, i32 7
  store i32 %203, i32* %204, align 4
  br label %205

205:                                              ; preds = %198, %191
  %206 = getelementptr inbounds %struct.opj_pi_iterator, %struct.opj_pi_iterator* %0, i64 0, i32 12, i32 6
  %207 = load i32, i32* %206, align 8
  %208 = getelementptr inbounds %struct.opj_pi_iterator, %struct.opj_pi_iterator* %0, i64 0, i32 9
  store i32 %207, i32* %208, align 4
  br label %209

209:                                              ; preds = %254, %205
  %210 = phi i32 [ %257, %254 ], [ %207, %205 ]
  %211 = getelementptr inbounds %struct.opj_pi_iterator, %struct.opj_pi_iterator* %0, i64 0, i32 12, i32 7
  %212 = load i32, i32* %211, align 4
  %213 = icmp ult i32 %210, %212
  br i1 %213, label %217, label %214

214:                                              ; preds = %209
  %215 = getelementptr inbounds %struct.opj_pi_iterator, %struct.opj_pi_iterator* %0, i64 0, i32 7
  %216 = load i32, i32* %215, align 4
  br label %258

217:                                              ; preds = %209
  %218 = getelementptr inbounds %struct.opj_pi_iterator, %struct.opj_pi_iterator* %0, i64 0, i32 10
  %219 = load i32, i32* %218, align 8
  %220 = getelementptr inbounds %struct.opj_pi_iterator, %struct.opj_pi_iterator* %0, i64 0, i32 3
  %221 = load i32, i32* %220, align 4
  %222 = mul i32 %221, %219
  %223 = getelementptr inbounds %struct.opj_pi_iterator, %struct.opj_pi_iterator* %0, i64 0, i32 8
  %224 = load i32, i32* %223, align 8
  %225 = getelementptr inbounds %struct.opj_pi_iterator, %struct.opj_pi_iterator* %0, i64 0, i32 4
  %226 = load i32, i32* %225, align 8
  %227 = mul i32 %226, %224
  %228 = add i32 %227, %222
  %229 = getelementptr inbounds %struct.opj_pi_iterator, %struct.opj_pi_iterator* %0, i64 0, i32 7
  %230 = load i32, i32* %229, align 4
  %231 = getelementptr inbounds %struct.opj_pi_iterator, %struct.opj_pi_iterator* %0, i64 0, i32 5
  %232 = load i32, i32* %231, align 4
  %233 = mul i32 %232, %230
  %234 = add i32 %228, %233
  %235 = getelementptr inbounds %struct.opj_pi_iterator, %struct.opj_pi_iterator* %0, i64 0, i32 6
  %236 = load i32, i32* %235, align 8
  %237 = mul i32 %236, %210
  %238 = add i32 %234, %237
  %239 = getelementptr inbounds %struct.opj_pi_iterator, %struct.opj_pi_iterator* %0, i64 0, i32 2
  %240 = load i32, i32* %239, align 8
  %241 = icmp ult i32 %238, %240
  br i1 %241, label %246, label %242

242:                                              ; preds = %217
  %243 = getelementptr inbounds %struct.opj_pi_iterator, %struct.opj_pi_iterator* %0, i64 0, i32 23
  %244 = load %struct.opj_event_mgr*, %struct.opj_event_mgr** %243, align 8
  %245 = tail call i32 (%struct.opj_event_mgr*, i32, i8*, ...) @opj_event_msg(%struct.opj_event_mgr* %244, i32 1, i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.1, i64 0, i64 0)) #5
  br label %1369

246:                                              ; preds = %217
  %247 = getelementptr inbounds %struct.opj_pi_iterator, %struct.opj_pi_iterator* %0, i64 0, i32 1
  %248 = load i16*, i16** %247, align 8
  %249 = zext i32 %238 to i64
  %250 = getelementptr inbounds i16, i16* %248, i64 %249
  %251 = load i16, i16* %250, align 2
  %252 = icmp eq i16 %251, 0
  br i1 %252, label %253, label %254

253:                                              ; preds = %246
  store i16 1, i16* %250, align 2
  br label %1369

254:                                              ; preds = %246, %156
  %255 = phi i32 [ %158, %156 ], [ %210, %246 ]
  %256 = getelementptr inbounds %struct.opj_pi_iterator, %struct.opj_pi_iterator* %0, i64 0, i32 9
  %257 = add i32 %255, 1
  store i32 %257, i32* %256, align 4
  br label %209

258:                                              ; preds = %214, %182
  %259 = phi i32 [ %216, %214 ], [ %180, %182 ]
  %260 = getelementptr inbounds %struct.opj_pi_iterator, %struct.opj_pi_iterator* %0, i64 0, i32 7
  %261 = add i32 %259, 1
  store i32 %261, i32* %260, align 4
  br label %179

262:                                              ; preds = %179
  %263 = getelementptr inbounds %struct.opj_pi_iterator, %struct.opj_pi_iterator* %0, i64 0, i32 10
  %264 = load i32, i32* %263, align 8
  %265 = add i32 %264, 1
  store i32 %265, i32* %263, align 8
  br label %172

266:                                              ; preds = %172
  %267 = getelementptr inbounds %struct.opj_pi_iterator, %struct.opj_pi_iterator* %0, i64 0, i32 8
  %268 = load i32, i32* %267, align 8
  %269 = add i32 %268, 1
  store i32 %269, i32* %267, align 8
  br label %163

270:                                              ; preds = %1
  %271 = getelementptr inbounds %struct.opj_pi_iterator, %struct.opj_pi_iterator* %0, i64 0, i32 12, i32 1
  %272 = load i32, i32* %271, align 4
  %273 = getelementptr inbounds %struct.opj_pi_iterator, %struct.opj_pi_iterator* %0, i64 0, i32 13
  %274 = load i32, i32* %273, align 4
  %275 = icmp ult i32 %272, %274
  br i1 %275, label %276, label %281

276:                                              ; preds = %270
  %277 = getelementptr inbounds %struct.opj_pi_iterator, %struct.opj_pi_iterator* %0, i64 0, i32 12, i32 4
  %278 = load i32, i32* %277, align 8
  %279 = add i32 %274, 1
  %280 = icmp ult i32 %278, %279
  br i1 %280, label %285, label %281

281:                                              ; preds = %276, %270
  %282 = getelementptr inbounds %struct.opj_pi_iterator, %struct.opj_pi_iterator* %0, i64 0, i32 23
  %283 = load %struct.opj_event_mgr*, %struct.opj_event_mgr** %282, align 8
  %284 = tail call i32 (%struct.opj_event_mgr*, i32, i8*, ...) @opj_event_msg(%struct.opj_event_mgr* %283, i32 1, i8* getelementptr inbounds ([45 x i8], [45 x i8]* @.str.3, i64 0, i64 0)) #5
  br label %1369

285:                                              ; preds = %276
  %286 = getelementptr inbounds %struct.opj_pi_iterator, %struct.opj_pi_iterator* %0, i64 0, i32 11
  %287 = load i32, i32* %286, align 4
  %288 = icmp eq i32 %287, 0
  br i1 %288, label %289, label %292

289:                                              ; preds = %285
  %290 = getelementptr inbounds %struct.opj_pi_iterator, %struct.opj_pi_iterator* %0, i64 0, i32 10
  %291 = load i32, i32* %290, align 8
  br label %598

292:                                              ; preds = %285
  store i32 0, i32* %286, align 4
  %293 = getelementptr inbounds %struct.opj_pi_iterator, %struct.opj_pi_iterator* %0, i64 0, i32 21
  store i32 0, i32* %293, align 8
  %294 = getelementptr inbounds %struct.opj_pi_iterator, %struct.opj_pi_iterator* %0, i64 0, i32 22
  store i32 0, i32* %294, align 4
  %295 = getelementptr inbounds %struct.opj_pi_iterator, %struct.opj_pi_iterator* %0, i64 0, i32 14
  %296 = zext i32 %274 to i64
  %297 = load %struct.opj_pi_comp*, %struct.opj_pi_comp** %295, align 8
  br label %298

298:                                              ; preds = %360, %292
  %299 = phi i32 [ 0, %292 ], [ %361, %360 ]
  %300 = phi i32 [ 0, %292 ], [ %362, %360 ]
  %301 = phi i64 [ 0, %292 ], [ %363, %360 ]
  %302 = getelementptr inbounds %struct.opj_pi_comp, %struct.opj_pi_comp* %297, i64 %301, i32 2
  %303 = load i32, i32* %302, align 8
  %304 = icmp eq i32 %303, 0
  br i1 %304, label %360, label %305

305:                                              ; preds = %298
  %306 = getelementptr inbounds %struct.opj_pi_comp, %struct.opj_pi_comp* %297, i64 %301, i32 3
  %307 = getelementptr inbounds %struct.opj_pi_comp, %struct.opj_pi_comp* %297, i64 %301, i32 0
  %308 = getelementptr inbounds %struct.opj_pi_comp, %struct.opj_pi_comp* %297, i64 %301, i32 1
  br label %309

309:                                              ; preds = %353, %305
  %310 = phi i32 [ %303, %305 ], [ %354, %353 ]
  %311 = phi i32 [ %299, %305 ], [ %355, %353 ]
  %312 = phi i32 [ %300, %305 ], [ %337, %353 ]
  %313 = phi i64 [ 0, %305 ], [ %356, %353 ]
  %314 = phi i32 [ 0, %305 ], [ %357, %353 ]
  %315 = load %struct.opj_pi_resolution*, %struct.opj_pi_resolution** %306, align 8
  %316 = getelementptr inbounds %struct.opj_pi_resolution, %struct.opj_pi_resolution* %315, i64 %313, i32 0
  %317 = load i32, i32* %316, align 4
  %318 = xor i32 %314, -1
  %319 = add i32 %310, %318
  %320 = add i32 %319, %317
  %321 = icmp ult i32 %320, 32
  br i1 %321, label %322, label %334

322:                                              ; preds = %309
  %323 = load i32, i32* %307, align 8
  %324 = lshr i32 -1, %320
  %325 = icmp ugt i32 %323, %324
  br i1 %325, label %334, label %326

326:                                              ; preds = %322
  %327 = shl i32 %323, %320
  %328 = icmp eq i32 %312, 0
  %329 = icmp ult i32 %312, %327
  %330 = select i1 %329, i32 %312, i32 %327
  %331 = select i1 %328, i32 %327, i32 %330
  store i32 %331, i32* %293, align 8
  %332 = load i32, i32* %302, align 8
  %333 = add i32 %332, %318
  br label %334

334:                                              ; preds = %326, %322, %309
  %335 = phi i32 [ %333, %326 ], [ %319, %322 ], [ %319, %309 ]
  %336 = phi i32 [ %332, %326 ], [ %310, %322 ], [ %310, %309 ]
  %337 = phi i32 [ %331, %326 ], [ %312, %322 ], [ %312, %309 ]
  %338 = getelementptr inbounds %struct.opj_pi_resolution, %struct.opj_pi_resolution* %315, i64 %313, i32 1
  %339 = load i32, i32* %338, align 4
  %340 = add i32 %335, %339
  %341 = icmp ult i32 %340, 32
  br i1 %341, label %342, label %353

342:                                              ; preds = %334
  %343 = load i32, i32* %308, align 4
  %344 = lshr i32 -1, %340
  %345 = icmp ugt i32 %343, %344
  br i1 %345, label %353, label %346

346:                                              ; preds = %342
  %347 = shl i32 %343, %340
  %348 = icmp eq i32 %311, 0
  %349 = icmp ult i32 %311, %347
  %350 = select i1 %349, i32 %311, i32 %347
  %351 = select i1 %348, i32 %347, i32 %350
  store i32 %351, i32* %294, align 4
  %352 = load i32, i32* %302, align 8
  br label %353

353:                                              ; preds = %346, %342, %334
  %354 = phi i32 [ %336, %342 ], [ %352, %346 ], [ %336, %334 ]
  %355 = phi i32 [ %311, %342 ], [ %351, %346 ], [ %311, %334 ]
  %356 = add nuw nsw i64 %313, 1
  %357 = add nuw i32 %314, 1
  %358 = zext i32 %354 to i64
  %359 = icmp ult i64 %356, %358
  br i1 %359, label %309, label %360

360:                                              ; preds = %353, %298
  %361 = phi i32 [ %299, %298 ], [ %355, %353 ]
  %362 = phi i32 [ %300, %298 ], [ %337, %353 ]
  %363 = add nuw nsw i64 %301, 1
  %364 = icmp eq i64 %363, %296
  br i1 %364, label %365, label %298

365:                                              ; preds = %360
  %366 = icmp eq i32 %362, 0
  %367 = icmp eq i32 %361, 0
  %368 = or i1 %367, %366
  br i1 %368, label %1369, label %369

369:                                              ; preds = %365
  %370 = getelementptr inbounds %struct.opj_pi_iterator, %struct.opj_pi_iterator* %0, i64 0, i32 0
  %371 = load i8, i8* %370, align 8
  %372 = icmp eq i8 %371, 0
  br i1 %372, label %373, label %380

373:                                              ; preds = %369
  %374 = getelementptr inbounds %struct.opj_pi_iterator, %struct.opj_pi_iterator* %0, i64 0, i32 15
  %375 = getelementptr inbounds %struct.opj_pi_iterator, %struct.opj_pi_iterator* %0, i64 0, i32 12, i32 12
  %376 = bitcast i32* %374 to <4 x i32>*
  %377 = load <4 x i32>, <4 x i32>* %376, align 8
  %378 = shufflevector <4 x i32> %377, <4 x i32> undef, <4 x i32> <i32 0, i32 2, i32 1, i32 3>
  %379 = bitcast i32* %375 to <4 x i32>*
  store <4 x i32> %378, <4 x i32>* %379, align 4
  br label %380

380:                                              ; preds = %373, %369
  %381 = getelementptr inbounds %struct.opj_pi_iterator, %struct.opj_pi_iterator* %0, i64 0, i32 12, i32 0
  %382 = load i32, i32* %381, align 8
  %383 = getelementptr inbounds %struct.opj_pi_iterator, %struct.opj_pi_iterator* %0, i64 0, i32 8
  store i32 %382, i32* %383, align 8
  br label %384

384:                                              ; preds = %622, %380
  %385 = phi i32 [ %625, %622 ], [ %382, %380 ]
  %386 = getelementptr inbounds %struct.opj_pi_iterator, %struct.opj_pi_iterator* %0, i64 0, i32 12, i32 3
  %387 = load i32, i32* %386, align 4
  %388 = icmp ult i32 %385, %387
  br i1 %388, label %389, label %1369

389:                                              ; preds = %384
  %390 = getelementptr inbounds %struct.opj_pi_iterator, %struct.opj_pi_iterator* %0, i64 0, i32 12, i32 14
  %391 = load i32, i32* %390, align 4
  %392 = getelementptr inbounds %struct.opj_pi_iterator, %struct.opj_pi_iterator* %0, i64 0, i32 20
  store i32 %391, i32* %392, align 4
  br label %393

393:                                              ; preds = %614, %389
  %394 = phi i32 [ %621, %614 ], [ %391, %389 ]
  %395 = getelementptr inbounds %struct.opj_pi_iterator, %struct.opj_pi_iterator* %0, i64 0, i32 12, i32 15
  %396 = load i32, i32* %395, align 8
  %397 = icmp ult i32 %394, %396
  br i1 %397, label %398, label %622

398:                                              ; preds = %393
  %399 = getelementptr inbounds %struct.opj_pi_iterator, %struct.opj_pi_iterator* %0, i64 0, i32 12, i32 12
  %400 = load i32, i32* %399, align 4
  %401 = getelementptr inbounds %struct.opj_pi_iterator, %struct.opj_pi_iterator* %0, i64 0, i32 19
  store i32 %400, i32* %401, align 8
  br label %402

402:                                              ; preds = %606, %398
  %403 = phi i32 [ %613, %606 ], [ %400, %398 ]
  %404 = getelementptr inbounds %struct.opj_pi_iterator, %struct.opj_pi_iterator* %0, i64 0, i32 12, i32 13
  %405 = load i32, i32* %404, align 8
  %406 = icmp ult i32 %403, %405
  br i1 %406, label %407, label %614

407:                                              ; preds = %402
  %408 = getelementptr inbounds %struct.opj_pi_iterator, %struct.opj_pi_iterator* %0, i64 0, i32 7
  store i32 %272, i32* %408, align 4
  br label %409

409:                                              ; preds = %602, %407
  %410 = phi i32 [ %605, %602 ], [ %272, %407 ]
  %411 = icmp ult i32 %410, %278
  br i1 %411, label %412, label %606

412:                                              ; preds = %409
  %413 = getelementptr inbounds %struct.opj_pi_iterator, %struct.opj_pi_iterator* %0, i64 0, i32 14
  %414 = load %struct.opj_pi_comp*, %struct.opj_pi_comp** %413, align 8
  %415 = zext i32 %410 to i64
  %416 = getelementptr inbounds %struct.opj_pi_iterator, %struct.opj_pi_iterator* %0, i64 0, i32 8
  %417 = load i32, i32* %416, align 8
  %418 = getelementptr inbounds %struct.opj_pi_comp, %struct.opj_pi_comp* %414, i64 %415, i32 2
  %419 = load i32, i32* %418, align 8
  %420 = icmp ult i32 %417, %419
  br i1 %420, label %421, label %602

421:                                              ; preds = %412
  %422 = getelementptr inbounds %struct.opj_pi_comp, %struct.opj_pi_comp* %414, i64 %415, i32 3
  %423 = load %struct.opj_pi_resolution*, %struct.opj_pi_resolution** %422, align 8
  %424 = zext i32 %417 to i64
  %425 = xor i32 %417, -1
  %426 = add i32 %419, %425
  %427 = icmp ugt i32 %426, 31
  br i1 %427, label %602, label %428

428:                                              ; preds = %421
  %429 = getelementptr inbounds %struct.opj_pi_comp, %struct.opj_pi_comp* %414, i64 %415, i32 0
  %430 = load i32, i32* %429, align 8
  %431 = shl i32 %430, %426
  %432 = lshr i32 %431, %426
  %433 = icmp eq i32 %432, %430
  br i1 %433, label %434, label %602

434:                                              ; preds = %428
  %435 = getelementptr inbounds %struct.opj_pi_comp, %struct.opj_pi_comp* %414, i64 %415, i32 1
  %436 = load i32, i32* %435, align 4
  %437 = shl i32 %436, %426
  %438 = lshr i32 %437, %426
  %439 = icmp ne i32 %438, %436
  %440 = or i32 %437, %431
  %441 = icmp slt i32 %440, 0
  %442 = or i1 %441, %439
  br i1 %442, label %602, label %443

443:                                              ; preds = %434
  %444 = getelementptr inbounds %struct.opj_pi_iterator, %struct.opj_pi_iterator* %0, i64 0, i32 15
  %445 = load i32, i32* %444, align 8
  %446 = zext i32 %445 to i64
  %447 = zext i32 %431 to i64
  %448 = add nsw i64 %447, -1
  %449 = add nsw i64 %448, %446
  %450 = udiv i64 %449, %447
  %451 = trunc i64 %450 to i32
  %452 = getelementptr inbounds %struct.opj_pi_iterator, %struct.opj_pi_iterator* %0, i64 0, i32 16
  %453 = load i32, i32* %452, align 4
  %454 = zext i32 %453 to i64
  %455 = zext i32 %437 to i64
  %456 = add nsw i64 %455, -1
  %457 = add nsw i64 %456, %454
  %458 = udiv i64 %457, %455
  %459 = trunc i64 %458 to i32
  %460 = getelementptr inbounds %struct.opj_pi_iterator, %struct.opj_pi_iterator* %0, i64 0, i32 17
  %461 = load i32, i32* %460, align 8
  %462 = zext i32 %461 to i64
  %463 = add nsw i64 %448, %462
  %464 = udiv i64 %463, %447
  %465 = trunc i64 %464 to i32
  %466 = getelementptr inbounds %struct.opj_pi_iterator, %struct.opj_pi_iterator* %0, i64 0, i32 18
  %467 = load i32, i32* %466, align 4
  %468 = zext i32 %467 to i64
  %469 = add nsw i64 %456, %468
  %470 = udiv i64 %469, %455
  %471 = trunc i64 %470 to i32
  %472 = getelementptr inbounds %struct.opj_pi_resolution, %struct.opj_pi_resolution* %423, i64 %424, i32 0
  %473 = load i32, i32* %472, align 4
  %474 = add i32 %473, %426
  %475 = getelementptr inbounds %struct.opj_pi_resolution, %struct.opj_pi_resolution* %423, i64 %424, i32 1
  %476 = load i32, i32* %475, align 4
  %477 = add i32 %476, %426
  %478 = icmp ugt i32 %474, 30
  br i1 %478, label %602, label %479

479:                                              ; preds = %443
  %480 = lshr i32 -1, %474
  %481 = icmp ugt i32 %430, %480
  %482 = icmp ugt i32 %477, 30
  %483 = or i1 %481, %482
  br i1 %483, label %602, label %484

484:                                              ; preds = %479
  %485 = shl i32 %436, %477
  %486 = lshr i32 %485, %477
  %487 = icmp eq i32 %486, %436
  br i1 %487, label %488, label %602

488:                                              ; preds = %484
  %489 = getelementptr inbounds %struct.opj_pi_iterator, %struct.opj_pi_iterator* %0, i64 0, i32 20
  %490 = load i32, i32* %489, align 4
  %491 = urem i32 %490, %485
  %492 = icmp eq i32 %491, 0
  br i1 %492, label %501, label %493

493:                                              ; preds = %488
  %494 = icmp eq i32 %490, %453
  br i1 %494, label %495, label %602

495:                                              ; preds = %493
  %496 = shl i32 %459, %426
  %497 = shl nsw i32 -1, %477
  %498 = xor i32 %497, -1
  %499 = and i32 %496, %498
  %500 = icmp eq i32 %499, 0
  br i1 %500, label %602, label %501

501:                                              ; preds = %495, %488
  %502 = getelementptr inbounds %struct.opj_pi_iterator, %struct.opj_pi_iterator* %0, i64 0, i32 19
  %503 = load i32, i32* %502, align 8
  %504 = shl i32 %430, %474
  %505 = urem i32 %503, %504
  %506 = icmp eq i32 %505, 0
  br i1 %506, label %515, label %507

507:                                              ; preds = %501
  %508 = icmp eq i32 %503, %445
  br i1 %508, label %509, label %602

509:                                              ; preds = %507
  %510 = shl i32 %451, %426
  %511 = shl nsw i32 -1, %474
  %512 = xor i32 %511, -1
  %513 = and i32 %510, %512
  %514 = icmp eq i32 %513, 0
  br i1 %514, label %602, label %515

515:                                              ; preds = %509, %501
  %516 = getelementptr inbounds %struct.opj_pi_resolution, %struct.opj_pi_resolution* %423, i64 %424, i32 2
  %517 = load i32, i32* %516, align 4
  %518 = icmp eq i32 %517, 0
  br i1 %518, label %602, label %519

519:                                              ; preds = %515
  %520 = getelementptr inbounds %struct.opj_pi_resolution, %struct.opj_pi_resolution* %423, i64 %424, i32 3
  %521 = load i32, i32* %520, align 4
  %522 = icmp eq i32 %521, 0
  %523 = icmp eq i32 %451, %465
  %524 = or i1 %523, %522
  %525 = icmp eq i32 %459, %471
  %526 = or i1 %525, %524
  br i1 %526, label %602, label %527

527:                                              ; preds = %519
  %528 = zext i32 %503 to i64
  %529 = add nsw i64 %448, %528
  %530 = udiv i64 %529, %447
  %531 = trunc i64 %530 to i32
  %532 = lshr i32 %531, %473
  %533 = lshr i32 %451, %473
  %534 = sub i32 %532, %533
  %535 = zext i32 %490 to i64
  %536 = add nsw i64 %456, %535
  %537 = udiv i64 %536, %455
  %538 = trunc i64 %537 to i32
  %539 = lshr i32 %538, %476
  %540 = lshr i32 %459, %476
  %541 = sub i32 %539, %540
  %542 = mul i32 %541, %517
  %543 = add i32 %542, %534
  %544 = getelementptr inbounds %struct.opj_pi_iterator, %struct.opj_pi_iterator* %0, i64 0, i32 9
  store i32 %543, i32* %544, align 4
  %545 = load i32, i32* %516, align 4
  %546 = load i32, i32* %520, align 4
  %547 = mul i32 %546, %545
  %548 = icmp ult i32 %543, %547
  br i1 %548, label %549, label %1369

549:                                              ; preds = %527
  %550 = getelementptr inbounds %struct.opj_pi_iterator, %struct.opj_pi_iterator* %0, i64 0, i32 12, i32 5
  %551 = load i32, i32* %550, align 4
  %552 = getelementptr inbounds %struct.opj_pi_iterator, %struct.opj_pi_iterator* %0, i64 0, i32 10
  store i32 %551, i32* %552, align 8
  br label %553

553:                                              ; preds = %598, %549
  %554 = phi i32 [ %601, %598 ], [ %551, %549 ]
  %555 = getelementptr inbounds %struct.opj_pi_iterator, %struct.opj_pi_iterator* %0, i64 0, i32 12, i32 2
  %556 = load i32, i32* %555, align 8
  %557 = icmp ult i32 %554, %556
  br i1 %557, label %561, label %558

558:                                              ; preds = %553
  %559 = getelementptr inbounds %struct.opj_pi_iterator, %struct.opj_pi_iterator* %0, i64 0, i32 7
  %560 = load i32, i32* %559, align 4
  br label %602

561:                                              ; preds = %553
  %562 = getelementptr inbounds %struct.opj_pi_iterator, %struct.opj_pi_iterator* %0, i64 0, i32 3
  %563 = load i32, i32* %562, align 4
  %564 = mul i32 %563, %554
  %565 = getelementptr inbounds %struct.opj_pi_iterator, %struct.opj_pi_iterator* %0, i64 0, i32 8
  %566 = load i32, i32* %565, align 8
  %567 = getelementptr inbounds %struct.opj_pi_iterator, %struct.opj_pi_iterator* %0, i64 0, i32 4
  %568 = load i32, i32* %567, align 8
  %569 = mul i32 %568, %566
  %570 = add i32 %569, %564
  %571 = getelementptr inbounds %struct.opj_pi_iterator, %struct.opj_pi_iterator* %0, i64 0, i32 7
  %572 = load i32, i32* %571, align 4
  %573 = getelementptr inbounds %struct.opj_pi_iterator, %struct.opj_pi_iterator* %0, i64 0, i32 5
  %574 = load i32, i32* %573, align 4
  %575 = mul i32 %574, %572
  %576 = add i32 %570, %575
  %577 = getelementptr inbounds %struct.opj_pi_iterator, %struct.opj_pi_iterator* %0, i64 0, i32 9
  %578 = load i32, i32* %577, align 4
  %579 = getelementptr inbounds %struct.opj_pi_iterator, %struct.opj_pi_iterator* %0, i64 0, i32 6
  %580 = load i32, i32* %579, align 8
  %581 = mul i32 %580, %578
  %582 = add i32 %576, %581
  %583 = getelementptr inbounds %struct.opj_pi_iterator, %struct.opj_pi_iterator* %0, i64 0, i32 2
  %584 = load i32, i32* %583, align 8
  %585 = icmp ult i32 %582, %584
  br i1 %585, label %590, label %586

586:                                              ; preds = %561
  %587 = getelementptr inbounds %struct.opj_pi_iterator, %struct.opj_pi_iterator* %0, i64 0, i32 23
  %588 = load %struct.opj_event_mgr*, %struct.opj_event_mgr** %587, align 8
  %589 = tail call i32 (%struct.opj_event_mgr*, i32, i8*, ...) @opj_event_msg(%struct.opj_event_mgr* %588, i32 1, i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.1, i64 0, i64 0)) #5
  br label %1369

590:                                              ; preds = %561
  %591 = getelementptr inbounds %struct.opj_pi_iterator, %struct.opj_pi_iterator* %0, i64 0, i32 1
  %592 = load i16*, i16** %591, align 8
  %593 = zext i32 %582 to i64
  %594 = getelementptr inbounds i16, i16* %592, i64 %593
  %595 = load i16, i16* %594, align 2
  %596 = icmp eq i16 %595, 0
  br i1 %596, label %597, label %598

597:                                              ; preds = %590
  store i16 1, i16* %594, align 2
  br label %1369

598:                                              ; preds = %590, %289
  %599 = phi i32 [ %291, %289 ], [ %554, %590 ]
  %600 = getelementptr inbounds %struct.opj_pi_iterator, %struct.opj_pi_iterator* %0, i64 0, i32 10
  %601 = add i32 %599, 1
  store i32 %601, i32* %600, align 8
  br label %553

602:                                              ; preds = %558, %519, %515, %509, %507, %495, %493, %484, %479, %443, %434, %428, %421, %412
  %603 = phi i32 [ %560, %558 ], [ %410, %434 ], [ %410, %509 ], [ %410, %495 ], [ %410, %484 ], [ %410, %428 ], [ %410, %412 ], [ %410, %515 ], [ %410, %519 ], [ %410, %507 ], [ %410, %493 ], [ %410, %443 ], [ %410, %479 ], [ %410, %421 ]
  %604 = getelementptr inbounds %struct.opj_pi_iterator, %struct.opj_pi_iterator* %0, i64 0, i32 7
  %605 = add i32 %603, 1
  store i32 %605, i32* %604, align 4
  br label %409

606:                                              ; preds = %409
  %607 = getelementptr inbounds %struct.opj_pi_iterator, %struct.opj_pi_iterator* %0, i64 0, i32 21
  %608 = load i32, i32* %607, align 8
  %609 = getelementptr inbounds %struct.opj_pi_iterator, %struct.opj_pi_iterator* %0, i64 0, i32 19
  %610 = load i32, i32* %609, align 8
  %611 = urem i32 %610, %608
  %612 = add i32 %610, %608
  %613 = sub i32 %612, %611
  store i32 %613, i32* %609, align 8
  br label %402

614:                                              ; preds = %402
  %615 = getelementptr inbounds %struct.opj_pi_iterator, %struct.opj_pi_iterator* %0, i64 0, i32 22
  %616 = load i32, i32* %615, align 4
  %617 = getelementptr inbounds %struct.opj_pi_iterator, %struct.opj_pi_iterator* %0, i64 0, i32 20
  %618 = load i32, i32* %617, align 4
  %619 = urem i32 %618, %616
  %620 = add i32 %618, %616
  %621 = sub i32 %620, %619
  store i32 %621, i32* %617, align 4
  br label %393

622:                                              ; preds = %393
  %623 = getelementptr inbounds %struct.opj_pi_iterator, %struct.opj_pi_iterator* %0, i64 0, i32 8
  %624 = load i32, i32* %623, align 8
  %625 = add i32 %624, 1
  store i32 %625, i32* %623, align 8
  br label %384

626:                                              ; preds = %1
  %627 = getelementptr inbounds %struct.opj_pi_iterator, %struct.opj_pi_iterator* %0, i64 0, i32 12, i32 1
  %628 = load i32, i32* %627, align 4
  %629 = getelementptr inbounds %struct.opj_pi_iterator, %struct.opj_pi_iterator* %0, i64 0, i32 13
  %630 = load i32, i32* %629, align 4
  %631 = icmp ult i32 %628, %630
  br i1 %631, label %632, label %637

632:                                              ; preds = %626
  %633 = getelementptr inbounds %struct.opj_pi_iterator, %struct.opj_pi_iterator* %0, i64 0, i32 12, i32 4
  %634 = load i32, i32* %633, align 8
  %635 = add i32 %630, 1
  %636 = icmp ult i32 %634, %635
  br i1 %636, label %641, label %637

637:                                              ; preds = %632, %626
  %638 = getelementptr inbounds %struct.opj_pi_iterator, %struct.opj_pi_iterator* %0, i64 0, i32 23
  %639 = load %struct.opj_event_mgr*, %struct.opj_event_mgr** %638, align 8
  %640 = tail call i32 (%struct.opj_event_mgr*, i32, i8*, ...) @opj_event_msg(%struct.opj_event_mgr* %639, i32 1, i8* getelementptr inbounds ([45 x i8], [45 x i8]* @.str.4, i64 0, i64 0)) #5
  br label %1369

641:                                              ; preds = %632
  %642 = getelementptr inbounds %struct.opj_pi_iterator, %struct.opj_pi_iterator* %0, i64 0, i32 11
  %643 = load i32, i32* %642, align 4
  %644 = icmp eq i32 %643, 0
  br i1 %644, label %645, label %654

645:                                              ; preds = %641
  %646 = getelementptr inbounds %struct.opj_pi_iterator, %struct.opj_pi_iterator* %0, i64 0, i32 14
  %647 = load %struct.opj_pi_comp*, %struct.opj_pi_comp** %646, align 8
  %648 = getelementptr inbounds %struct.opj_pi_iterator, %struct.opj_pi_iterator* %0, i64 0, i32 7
  %649 = load i32, i32* %648, align 4
  %650 = zext i32 %649 to i64
  %651 = getelementptr inbounds %struct.opj_pi_comp, %struct.opj_pi_comp* %647, i64 %650
  %652 = getelementptr inbounds %struct.opj_pi_iterator, %struct.opj_pi_iterator* %0, i64 0, i32 10
  %653 = load i32, i32* %652, align 8
  br label %969

654:                                              ; preds = %641
  store i32 0, i32* %642, align 4
  %655 = getelementptr inbounds %struct.opj_pi_iterator, %struct.opj_pi_iterator* %0, i64 0, i32 21
  store i32 0, i32* %655, align 8
  %656 = getelementptr inbounds %struct.opj_pi_iterator, %struct.opj_pi_iterator* %0, i64 0, i32 22
  store i32 0, i32* %656, align 4
  %657 = getelementptr inbounds %struct.opj_pi_iterator, %struct.opj_pi_iterator* %0, i64 0, i32 14
  %658 = zext i32 %630 to i64
  %659 = load %struct.opj_pi_comp*, %struct.opj_pi_comp** %657, align 8
  br label %660

660:                                              ; preds = %722, %654
  %661 = phi i32 [ 0, %654 ], [ %723, %722 ]
  %662 = phi i32 [ 0, %654 ], [ %724, %722 ]
  %663 = phi i64 [ 0, %654 ], [ %725, %722 ]
  %664 = getelementptr inbounds %struct.opj_pi_comp, %struct.opj_pi_comp* %659, i64 %663, i32 2
  %665 = load i32, i32* %664, align 8
  %666 = icmp eq i32 %665, 0
  br i1 %666, label %722, label %667

667:                                              ; preds = %660
  %668 = getelementptr inbounds %struct.opj_pi_comp, %struct.opj_pi_comp* %659, i64 %663, i32 3
  %669 = getelementptr inbounds %struct.opj_pi_comp, %struct.opj_pi_comp* %659, i64 %663, i32 0
  %670 = getelementptr inbounds %struct.opj_pi_comp, %struct.opj_pi_comp* %659, i64 %663, i32 1
  br label %671

671:                                              ; preds = %715, %667
  %672 = phi i32 [ %665, %667 ], [ %716, %715 ]
  %673 = phi i32 [ %661, %667 ], [ %717, %715 ]
  %674 = phi i32 [ %662, %667 ], [ %699, %715 ]
  %675 = phi i64 [ 0, %667 ], [ %718, %715 ]
  %676 = phi i32 [ 0, %667 ], [ %719, %715 ]
  %677 = load %struct.opj_pi_resolution*, %struct.opj_pi_resolution** %668, align 8
  %678 = getelementptr inbounds %struct.opj_pi_resolution, %struct.opj_pi_resolution* %677, i64 %675, i32 0
  %679 = load i32, i32* %678, align 4
  %680 = xor i32 %676, -1
  %681 = add i32 %672, %680
  %682 = add i32 %681, %679
  %683 = icmp ult i32 %682, 32
  br i1 %683, label %684, label %696

684:                                              ; preds = %671
  %685 = load i32, i32* %669, align 8
  %686 = lshr i32 -1, %682
  %687 = icmp ugt i32 %685, %686
  br i1 %687, label %696, label %688

688:                                              ; preds = %684
  %689 = shl i32 %685, %682
  %690 = icmp eq i32 %674, 0
  %691 = icmp ult i32 %674, %689
  %692 = select i1 %691, i32 %674, i32 %689
  %693 = select i1 %690, i32 %689, i32 %692
  store i32 %693, i32* %655, align 8
  %694 = load i32, i32* %664, align 8
  %695 = add i32 %694, %680
  br label %696

696:                                              ; preds = %688, %684, %671
  %697 = phi i32 [ %695, %688 ], [ %681, %684 ], [ %681, %671 ]
  %698 = phi i32 [ %694, %688 ], [ %672, %684 ], [ %672, %671 ]
  %699 = phi i32 [ %693, %688 ], [ %674, %684 ], [ %674, %671 ]
  %700 = getelementptr inbounds %struct.opj_pi_resolution, %struct.opj_pi_resolution* %677, i64 %675, i32 1
  %701 = load i32, i32* %700, align 4
  %702 = add i32 %697, %701
  %703 = icmp ult i32 %702, 32
  br i1 %703, label %704, label %715

704:                                              ; preds = %696
  %705 = load i32, i32* %670, align 4
  %706 = lshr i32 -1, %702
  %707 = icmp ugt i32 %705, %706
  br i1 %707, label %715, label %708

708:                                              ; preds = %704
  %709 = shl i32 %705, %702
  %710 = icmp eq i32 %673, 0
  %711 = icmp ult i32 %673, %709
  %712 = select i1 %711, i32 %673, i32 %709
  %713 = select i1 %710, i32 %709, i32 %712
  store i32 %713, i32* %656, align 4
  %714 = load i32, i32* %664, align 8
  br label %715

715:                                              ; preds = %708, %704, %696
  %716 = phi i32 [ %698, %704 ], [ %714, %708 ], [ %698, %696 ]
  %717 = phi i32 [ %673, %704 ], [ %713, %708 ], [ %673, %696 ]
  %718 = add nuw nsw i64 %675, 1
  %719 = add nuw i32 %676, 1
  %720 = zext i32 %716 to i64
  %721 = icmp ult i64 %718, %720
  br i1 %721, label %671, label %722

722:                                              ; preds = %715, %660
  %723 = phi i32 [ %661, %660 ], [ %717, %715 ]
  %724 = phi i32 [ %662, %660 ], [ %699, %715 ]
  %725 = add nuw nsw i64 %663, 1
  %726 = icmp eq i64 %725, %658
  br i1 %726, label %727, label %660

727:                                              ; preds = %722
  %728 = icmp eq i32 %724, 0
  %729 = icmp eq i32 %723, 0
  %730 = or i1 %729, %728
  br i1 %730, label %1369, label %731

731:                                              ; preds = %727
  %732 = getelementptr inbounds %struct.opj_pi_iterator, %struct.opj_pi_iterator* %0, i64 0, i32 0
  %733 = load i8, i8* %732, align 8
  %734 = icmp eq i8 %733, 0
  br i1 %734, label %738, label %735

735:                                              ; preds = %731
  %736 = getelementptr inbounds %struct.opj_pi_iterator, %struct.opj_pi_iterator* %0, i64 0, i32 12, i32 14
  %737 = load i32, i32* %736, align 4
  br label %746

738:                                              ; preds = %731
  %739 = getelementptr inbounds %struct.opj_pi_iterator, %struct.opj_pi_iterator* %0, i64 0, i32 15
  %740 = getelementptr inbounds %struct.opj_pi_iterator, %struct.opj_pi_iterator* %0, i64 0, i32 12, i32 12
  %741 = bitcast i32* %739 to <4 x i32>*
  %742 = load <4 x i32>, <4 x i32>* %741, align 8
  %743 = shufflevector <4 x i32> %742, <4 x i32> undef, <4 x i32> <i32 0, i32 2, i32 1, i32 3>
  %744 = bitcast i32* %740 to <4 x i32>*
  store <4 x i32> %743, <4 x i32>* %744, align 4
  %745 = extractelement <4 x i32> %742, i32 1
  br label %746

746:                                              ; preds = %738, %735
  %747 = phi i32 [ %737, %735 ], [ %745, %738 ]
  %748 = getelementptr inbounds %struct.opj_pi_iterator, %struct.opj_pi_iterator* %0, i64 0, i32 20
  store i32 %747, i32* %748, align 4
  br label %749

749:                                              ; preds = %995, %746
  %750 = phi %struct.opj_pi_comp* [ %760, %995 ], [ %659, %746 ]
  %751 = phi i32 [ %1002, %995 ], [ %747, %746 ]
  %752 = getelementptr inbounds %struct.opj_pi_iterator, %struct.opj_pi_iterator* %0, i64 0, i32 12, i32 15
  %753 = load i32, i32* %752, align 8
  %754 = icmp ult i32 %751, %753
  br i1 %754, label %755, label %1369

755:                                              ; preds = %749
  %756 = getelementptr inbounds %struct.opj_pi_iterator, %struct.opj_pi_iterator* %0, i64 0, i32 12, i32 12
  %757 = load i32, i32* %756, align 4
  %758 = getelementptr inbounds %struct.opj_pi_iterator, %struct.opj_pi_iterator* %0, i64 0, i32 19
  store i32 %757, i32* %758, align 8
  br label %759

759:                                              ; preds = %987, %755
  %760 = phi %struct.opj_pi_comp* [ %768, %987 ], [ %750, %755 ]
  %761 = phi i32 [ %994, %987 ], [ %757, %755 ]
  %762 = getelementptr inbounds %struct.opj_pi_iterator, %struct.opj_pi_iterator* %0, i64 0, i32 12, i32 13
  %763 = load i32, i32* %762, align 8
  %764 = icmp ult i32 %761, %763
  br i1 %764, label %765, label %995

765:                                              ; preds = %759
  %766 = getelementptr inbounds %struct.opj_pi_iterator, %struct.opj_pi_iterator* %0, i64 0, i32 7
  store i32 %628, i32* %766, align 4
  br label %767

767:                                              ; preds = %984, %765
  %768 = phi %struct.opj_pi_comp* [ %778, %984 ], [ %760, %765 ]
  %769 = phi i32 [ %986, %984 ], [ %628, %765 ]
  %770 = icmp ult i32 %769, %634
  br i1 %770, label %771, label %987

771:                                              ; preds = %767
  %772 = zext i32 %769 to i64
  %773 = getelementptr inbounds %struct.opj_pi_comp, %struct.opj_pi_comp* %768, i64 %772
  %774 = getelementptr inbounds %struct.opj_pi_iterator, %struct.opj_pi_iterator* %0, i64 0, i32 12, i32 0
  %775 = load i32, i32* %774, align 8
  %776 = getelementptr inbounds %struct.opj_pi_iterator, %struct.opj_pi_iterator* %0, i64 0, i32 8
  store i32 %775, i32* %776, align 8
  br label %777

777:                                              ; preds = %976, %771
  %778 = phi %struct.opj_pi_comp* [ %768, %771 ], [ %977, %976 ]
  %779 = phi i32 [ %769, %771 ], [ %978, %976 ]
  %780 = phi i32 [ %769, %771 ], [ %979, %976 ]
  %781 = phi i32 [ %775, %771 ], [ %983, %976 ]
  %782 = phi %struct.opj_pi_comp* [ %773, %771 ], [ %981, %976 ]
  %783 = getelementptr inbounds %struct.opj_pi_iterator, %struct.opj_pi_iterator* %0, i64 0, i32 12, i32 3
  %784 = load i32, i32* %783, align 4
  %785 = getelementptr inbounds %struct.opj_pi_comp, %struct.opj_pi_comp* %782, i64 0, i32 2
  %786 = load i32, i32* %785, align 8
  %787 = icmp ult i32 %784, %786
  %788 = select i1 %787, i32 %784, i32 %786
  %789 = icmp ult i32 %781, %788
  br i1 %789, label %790, label %984

790:                                              ; preds = %777
  %791 = getelementptr inbounds %struct.opj_pi_comp, %struct.opj_pi_comp* %782, i64 0, i32 3
  %792 = load %struct.opj_pi_resolution*, %struct.opj_pi_resolution** %791, align 8
  %793 = zext i32 %781 to i64
  %794 = xor i32 %781, -1
  %795 = add i32 %786, %794
  %796 = icmp ugt i32 %795, 31
  br i1 %796, label %976, label %797

797:                                              ; preds = %790
  %798 = getelementptr inbounds %struct.opj_pi_comp, %struct.opj_pi_comp* %782, i64 0, i32 0
  %799 = load i32, i32* %798, align 8
  %800 = shl i32 %799, %795
  %801 = lshr i32 %800, %795
  %802 = icmp eq i32 %801, %799
  br i1 %802, label %803, label %976

803:                                              ; preds = %797
  %804 = getelementptr inbounds %struct.opj_pi_comp, %struct.opj_pi_comp* %782, i64 0, i32 1
  %805 = load i32, i32* %804, align 4
  %806 = shl i32 %805, %795
  %807 = lshr i32 %806, %795
  %808 = icmp ne i32 %807, %805
  %809 = or i32 %806, %800
  %810 = icmp slt i32 %809, 0
  %811 = or i1 %810, %808
  br i1 %811, label %976, label %812

812:                                              ; preds = %803
  %813 = getelementptr inbounds %struct.opj_pi_iterator, %struct.opj_pi_iterator* %0, i64 0, i32 15
  %814 = load i32, i32* %813, align 8
  %815 = zext i32 %814 to i64
  %816 = zext i32 %800 to i64
  %817 = add nsw i64 %816, -1
  %818 = add nsw i64 %817, %815
  %819 = udiv i64 %818, %816
  %820 = trunc i64 %819 to i32
  %821 = getelementptr inbounds %struct.opj_pi_iterator, %struct.opj_pi_iterator* %0, i64 0, i32 16
  %822 = load i32, i32* %821, align 4
  %823 = zext i32 %822 to i64
  %824 = zext i32 %806 to i64
  %825 = add nsw i64 %824, -1
  %826 = add nsw i64 %825, %823
  %827 = udiv i64 %826, %824
  %828 = trunc i64 %827 to i32
  %829 = getelementptr inbounds %struct.opj_pi_iterator, %struct.opj_pi_iterator* %0, i64 0, i32 17
  %830 = load i32, i32* %829, align 8
  %831 = zext i32 %830 to i64
  %832 = add nsw i64 %817, %831
  %833 = udiv i64 %832, %816
  %834 = trunc i64 %833 to i32
  %835 = getelementptr inbounds %struct.opj_pi_iterator, %struct.opj_pi_iterator* %0, i64 0, i32 18
  %836 = load i32, i32* %835, align 4
  %837 = zext i32 %836 to i64
  %838 = add nsw i64 %825, %837
  %839 = udiv i64 %838, %824
  %840 = trunc i64 %839 to i32
  %841 = getelementptr inbounds %struct.opj_pi_resolution, %struct.opj_pi_resolution* %792, i64 %793, i32 0
  %842 = load i32, i32* %841, align 4
  %843 = add i32 %842, %795
  %844 = getelementptr inbounds %struct.opj_pi_resolution, %struct.opj_pi_resolution* %792, i64 %793, i32 1
  %845 = load i32, i32* %844, align 4
  %846 = add i32 %845, %795
  %847 = icmp ugt i32 %843, 30
  br i1 %847, label %976, label %848

848:                                              ; preds = %812
  %849 = lshr i32 -1, %843
  %850 = icmp ugt i32 %799, %849
  %851 = icmp ugt i32 %846, 30
  %852 = or i1 %850, %851
  br i1 %852, label %976, label %853

853:                                              ; preds = %848
  %854 = shl i32 %805, %846
  %855 = lshr i32 %854, %846
  %856 = icmp eq i32 %855, %805
  br i1 %856, label %857, label %976

857:                                              ; preds = %853
  %858 = getelementptr inbounds %struct.opj_pi_iterator, %struct.opj_pi_iterator* %0, i64 0, i32 20
  %859 = load i32, i32* %858, align 4
  %860 = urem i32 %859, %854
  %861 = icmp eq i32 %860, 0
  br i1 %861, label %870, label %862

862:                                              ; preds = %857
  %863 = icmp eq i32 %859, %822
  br i1 %863, label %864, label %976

864:                                              ; preds = %862
  %865 = shl i32 %828, %795
  %866 = shl nsw i32 -1, %846
  %867 = xor i32 %866, -1
  %868 = and i32 %865, %867
  %869 = icmp eq i32 %868, 0
  br i1 %869, label %976, label %870

870:                                              ; preds = %864, %857
  %871 = getelementptr inbounds %struct.opj_pi_iterator, %struct.opj_pi_iterator* %0, i64 0, i32 19
  %872 = load i32, i32* %871, align 8
  %873 = shl i32 %799, %843
  %874 = urem i32 %872, %873
  %875 = icmp eq i32 %874, 0
  br i1 %875, label %884, label %876

876:                                              ; preds = %870
  %877 = icmp eq i32 %872, %814
  br i1 %877, label %878, label %976

878:                                              ; preds = %876
  %879 = shl i32 %820, %795
  %880 = shl nsw i32 -1, %843
  %881 = xor i32 %880, -1
  %882 = and i32 %879, %881
  %883 = icmp eq i32 %882, 0
  br i1 %883, label %976, label %884

884:                                              ; preds = %878, %870
  %885 = getelementptr inbounds %struct.opj_pi_resolution, %struct.opj_pi_resolution* %792, i64 %793, i32 2
  %886 = load i32, i32* %885, align 4
  %887 = icmp eq i32 %886, 0
  br i1 %887, label %976, label %888

888:                                              ; preds = %884
  %889 = getelementptr inbounds %struct.opj_pi_resolution, %struct.opj_pi_resolution* %792, i64 %793, i32 3
  %890 = load i32, i32* %889, align 4
  %891 = icmp eq i32 %890, 0
  %892 = icmp eq i32 %820, %834
  %893 = or i1 %892, %891
  %894 = icmp eq i32 %828, %840
  %895 = or i1 %894, %893
  br i1 %895, label %976, label %896

896:                                              ; preds = %888
  %897 = zext i32 %872 to i64
  %898 = add nsw i64 %817, %897
  %899 = udiv i64 %898, %816
  %900 = trunc i64 %899 to i32
  %901 = lshr i32 %900, %842
  %902 = lshr i32 %820, %842
  %903 = sub i32 %901, %902
  %904 = zext i32 %859 to i64
  %905 = add nsw i64 %825, %904
  %906 = udiv i64 %905, %824
  %907 = trunc i64 %906 to i32
  %908 = lshr i32 %907, %845
  %909 = lshr i32 %828, %845
  %910 = sub i32 %908, %909
  %911 = mul i32 %910, %886
  %912 = add i32 %911, %903
  %913 = getelementptr inbounds %struct.opj_pi_iterator, %struct.opj_pi_iterator* %0, i64 0, i32 9
  store i32 %912, i32* %913, align 4
  %914 = load i32, i32* %885, align 4
  %915 = load i32, i32* %889, align 4
  %916 = mul i32 %915, %914
  %917 = icmp ult i32 %912, %916
  br i1 %917, label %918, label %1369

918:                                              ; preds = %896
  %919 = getelementptr inbounds %struct.opj_pi_iterator, %struct.opj_pi_iterator* %0, i64 0, i32 12, i32 5
  %920 = load i32, i32* %919, align 4
  %921 = getelementptr inbounds %struct.opj_pi_iterator, %struct.opj_pi_iterator* %0, i64 0, i32 10
  store i32 %920, i32* %921, align 8
  br label %922

922:                                              ; preds = %969, %918
  %923 = phi %struct.opj_pi_comp* [ %778, %918 ], [ %970, %969 ]
  %924 = phi i32 [ %779, %918 ], [ %971, %969 ]
  %925 = phi i32 [ %780, %918 ], [ %971, %969 ]
  %926 = phi i32 [ %920, %918 ], [ %975, %969 ]
  %927 = phi %struct.opj_pi_comp* [ %782, %918 ], [ %973, %969 ]
  %928 = getelementptr inbounds %struct.opj_pi_iterator, %struct.opj_pi_iterator* %0, i64 0, i32 12, i32 2
  %929 = load i32, i32* %928, align 8
  %930 = icmp ult i32 %926, %929
  br i1 %930, label %934, label %931

931:                                              ; preds = %922
  %932 = getelementptr inbounds %struct.opj_pi_iterator, %struct.opj_pi_iterator* %0, i64 0, i32 8
  %933 = load i32, i32* %932, align 8
  br label %976

934:                                              ; preds = %922
  %935 = getelementptr inbounds %struct.opj_pi_iterator, %struct.opj_pi_iterator* %0, i64 0, i32 3
  %936 = load i32, i32* %935, align 4
  %937 = mul i32 %936, %926
  %938 = getelementptr inbounds %struct.opj_pi_iterator, %struct.opj_pi_iterator* %0, i64 0, i32 8
  %939 = load i32, i32* %938, align 8
  %940 = getelementptr inbounds %struct.opj_pi_iterator, %struct.opj_pi_iterator* %0, i64 0, i32 4
  %941 = load i32, i32* %940, align 8
  %942 = mul i32 %941, %939
  %943 = add i32 %942, %937
  %944 = getelementptr inbounds %struct.opj_pi_iterator, %struct.opj_pi_iterator* %0, i64 0, i32 5
  %945 = load i32, i32* %944, align 4
  %946 = mul i32 %945, %924
  %947 = add i32 %943, %946
  %948 = getelementptr inbounds %struct.opj_pi_iterator, %struct.opj_pi_iterator* %0, i64 0, i32 9
  %949 = load i32, i32* %948, align 4
  %950 = getelementptr inbounds %struct.opj_pi_iterator, %struct.opj_pi_iterator* %0, i64 0, i32 6
  %951 = load i32, i32* %950, align 8
  %952 = mul i32 %951, %949
  %953 = add i32 %947, %952
  %954 = getelementptr inbounds %struct.opj_pi_iterator, %struct.opj_pi_iterator* %0, i64 0, i32 2
  %955 = load i32, i32* %954, align 8
  %956 = icmp ult i32 %953, %955
  br i1 %956, label %961, label %957

957:                                              ; preds = %934
  %958 = getelementptr inbounds %struct.opj_pi_iterator, %struct.opj_pi_iterator* %0, i64 0, i32 23
  %959 = load %struct.opj_event_mgr*, %struct.opj_event_mgr** %958, align 8
  %960 = tail call i32 (%struct.opj_event_mgr*, i32, i8*, ...) @opj_event_msg(%struct.opj_event_mgr* %959, i32 1, i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.1, i64 0, i64 0)) #5
  br label %1369

961:                                              ; preds = %934
  %962 = getelementptr inbounds %struct.opj_pi_iterator, %struct.opj_pi_iterator* %0, i64 0, i32 1
  %963 = load i16*, i16** %962, align 8
  %964 = zext i32 %953 to i64
  %965 = getelementptr inbounds i16, i16* %963, i64 %964
  %966 = load i16, i16* %965, align 2
  %967 = icmp eq i16 %966, 0
  br i1 %967, label %968, label %969

968:                                              ; preds = %961
  store i16 1, i16* %965, align 2
  br label %1369

969:                                              ; preds = %961, %645
  %970 = phi %struct.opj_pi_comp* [ %923, %961 ], [ %647, %645 ]
  %971 = phi i32 [ %924, %961 ], [ %649, %645 ]
  %972 = phi i32 [ %926, %961 ], [ %653, %645 ]
  %973 = phi %struct.opj_pi_comp* [ %927, %961 ], [ %651, %645 ]
  %974 = getelementptr inbounds %struct.opj_pi_iterator, %struct.opj_pi_iterator* %0, i64 0, i32 10
  %975 = add i32 %972, 1
  store i32 %975, i32* %974, align 8
  br label %922

976:                                              ; preds = %931, %888, %884, %878, %876, %864, %862, %853, %848, %812, %803, %797, %790
  %977 = phi %struct.opj_pi_comp* [ %778, %790 ], [ %778, %797 ], [ %778, %803 ], [ %778, %812 ], [ %778, %848 ], [ %778, %853 ], [ %778, %884 ], [ %778, %888 ], [ %923, %931 ], [ %778, %878 ], [ %778, %876 ], [ %778, %864 ], [ %778, %862 ]
  %978 = phi i32 [ %779, %790 ], [ %779, %797 ], [ %779, %803 ], [ %779, %812 ], [ %779, %848 ], [ %779, %853 ], [ %779, %884 ], [ %779, %888 ], [ %924, %931 ], [ %779, %878 ], [ %779, %876 ], [ %779, %864 ], [ %779, %862 ]
  %979 = phi i32 [ %780, %790 ], [ %780, %797 ], [ %780, %803 ], [ %780, %812 ], [ %780, %848 ], [ %780, %853 ], [ %780, %884 ], [ %780, %888 ], [ %925, %931 ], [ %780, %878 ], [ %780, %876 ], [ %780, %864 ], [ %780, %862 ]
  %980 = phi i32 [ %781, %790 ], [ %781, %797 ], [ %781, %803 ], [ %781, %812 ], [ %781, %848 ], [ %781, %853 ], [ %781, %884 ], [ %781, %888 ], [ %933, %931 ], [ %781, %878 ], [ %781, %876 ], [ %781, %864 ], [ %781, %862 ]
  %981 = phi %struct.opj_pi_comp* [ %782, %790 ], [ %782, %797 ], [ %782, %803 ], [ %782, %812 ], [ %782, %848 ], [ %782, %853 ], [ %782, %884 ], [ %782, %888 ], [ %927, %931 ], [ %782, %878 ], [ %782, %876 ], [ %782, %864 ], [ %782, %862 ]
  %982 = getelementptr inbounds %struct.opj_pi_iterator, %struct.opj_pi_iterator* %0, i64 0, i32 8
  %983 = add i32 %980, 1
  store i32 %983, i32* %982, align 8
  br label %777

984:                                              ; preds = %777
  %985 = getelementptr inbounds %struct.opj_pi_iterator, %struct.opj_pi_iterator* %0, i64 0, i32 7
  %986 = add i32 %780, 1
  store i32 %986, i32* %985, align 4
  br label %767

987:                                              ; preds = %767
  %988 = getelementptr inbounds %struct.opj_pi_iterator, %struct.opj_pi_iterator* %0, i64 0, i32 21
  %989 = load i32, i32* %988, align 8
  %990 = getelementptr inbounds %struct.opj_pi_iterator, %struct.opj_pi_iterator* %0, i64 0, i32 19
  %991 = load i32, i32* %990, align 8
  %992 = urem i32 %991, %989
  %993 = add i32 %991, %989
  %994 = sub i32 %993, %992
  store i32 %994, i32* %990, align 8
  br label %759

995:                                              ; preds = %759
  %996 = getelementptr inbounds %struct.opj_pi_iterator, %struct.opj_pi_iterator* %0, i64 0, i32 22
  %997 = load i32, i32* %996, align 4
  %998 = getelementptr inbounds %struct.opj_pi_iterator, %struct.opj_pi_iterator* %0, i64 0, i32 20
  %999 = load i32, i32* %998, align 4
  %1000 = urem i32 %999, %997
  %1001 = add i32 %999, %997
  %1002 = sub i32 %1001, %1000
  store i32 %1002, i32* %998, align 4
  br label %749

1003:                                             ; preds = %1
  %1004 = getelementptr inbounds %struct.opj_pi_iterator, %struct.opj_pi_iterator* %0, i64 0, i32 12, i32 1
  %1005 = load i32, i32* %1004, align 4
  %1006 = getelementptr inbounds %struct.opj_pi_iterator, %struct.opj_pi_iterator* %0, i64 0, i32 13
  %1007 = load i32, i32* %1006, align 4
  %1008 = icmp ult i32 %1005, %1007
  br i1 %1008, label %1009, label %1014

1009:                                             ; preds = %1003
  %1010 = getelementptr inbounds %struct.opj_pi_iterator, %struct.opj_pi_iterator* %0, i64 0, i32 12, i32 4
  %1011 = load i32, i32* %1010, align 8
  %1012 = add i32 %1007, 1
  %1013 = icmp ult i32 %1011, %1012
  br i1 %1013, label %1018, label %1014

1014:                                             ; preds = %1009, %1003
  %1015 = getelementptr inbounds %struct.opj_pi_iterator, %struct.opj_pi_iterator* %0, i64 0, i32 23
  %1016 = load %struct.opj_event_mgr*, %struct.opj_event_mgr** %1015, align 8
  %1017 = tail call i32 (%struct.opj_event_mgr*, i32, i8*, ...) @opj_event_msg(%struct.opj_event_mgr* %1016, i32 1, i8* getelementptr inbounds ([45 x i8], [45 x i8]* @.str.5, i64 0, i64 0)) #5
  br label %1369

1018:                                             ; preds = %1009
  %1019 = getelementptr inbounds %struct.opj_pi_iterator, %struct.opj_pi_iterator* %0, i64 0, i32 11
  %1020 = load i32, i32* %1019, align 4
  %1021 = icmp eq i32 %1020, 0
  br i1 %1021, label %1022, label %1031

1022:                                             ; preds = %1018
  %1023 = getelementptr inbounds %struct.opj_pi_iterator, %struct.opj_pi_iterator* %0, i64 0, i32 14
  %1024 = load %struct.opj_pi_comp*, %struct.opj_pi_comp** %1023, align 8
  %1025 = getelementptr inbounds %struct.opj_pi_iterator, %struct.opj_pi_iterator* %0, i64 0, i32 7
  %1026 = load i32, i32* %1025, align 4
  %1027 = zext i32 %1026 to i64
  %1028 = getelementptr inbounds %struct.opj_pi_comp, %struct.opj_pi_comp* %1024, i64 %1027
  %1029 = getelementptr inbounds %struct.opj_pi_iterator, %struct.opj_pi_iterator* %0, i64 0, i32 10
  %1030 = load i32, i32* %1029, align 8
  br label %1337

1031:                                             ; preds = %1018
  store i32 0, i32* %1019, align 4
  %1032 = getelementptr inbounds %struct.opj_pi_iterator, %struct.opj_pi_iterator* %0, i64 0, i32 7
  store i32 %1005, i32* %1032, align 4
  br label %1033

1033:                                             ; preds = %1366, %1031
  %1034 = phi i32 [ %1368, %1366 ], [ %1005, %1031 ]
  %1035 = icmp ult i32 %1034, %1011
  br i1 %1035, label %1036, label %1369

1036:                                             ; preds = %1033
  %1037 = getelementptr inbounds %struct.opj_pi_iterator, %struct.opj_pi_iterator* %0, i64 0, i32 14
  %1038 = load %struct.opj_pi_comp*, %struct.opj_pi_comp** %1037, align 8
  %1039 = zext i32 %1034 to i64
  %1040 = getelementptr inbounds %struct.opj_pi_comp, %struct.opj_pi_comp* %1038, i64 %1039
  %1041 = getelementptr inbounds %struct.opj_pi_iterator, %struct.opj_pi_iterator* %0, i64 0, i32 21
  store i32 0, i32* %1041, align 8
  %1042 = getelementptr inbounds %struct.opj_pi_iterator, %struct.opj_pi_iterator* %0, i64 0, i32 22
  store i32 0, i32* %1042, align 4
  %1043 = getelementptr inbounds %struct.opj_pi_comp, %struct.opj_pi_comp* %1038, i64 %1039, i32 2
  %1044 = load i32, i32* %1043, align 8
  %1045 = icmp eq i32 %1044, 0
  br i1 %1045, label %1369, label %1046

1046:                                             ; preds = %1036
  %1047 = getelementptr inbounds %struct.opj_pi_comp, %struct.opj_pi_comp* %1038, i64 %1039, i32 3
  %1048 = getelementptr inbounds %struct.opj_pi_comp, %struct.opj_pi_comp* %1040, i64 0, i32 0
  %1049 = getelementptr inbounds %struct.opj_pi_comp, %struct.opj_pi_comp* %1038, i64 %1039, i32 1
  br label %1050

1050:                                             ; preds = %1094, %1046
  %1051 = phi i32 [ %1044, %1046 ], [ %1095, %1094 ]
  %1052 = phi i32 [ 0, %1046 ], [ %1096, %1094 ]
  %1053 = phi i32 [ 0, %1046 ], [ %1078, %1094 ]
  %1054 = phi i64 [ 0, %1046 ], [ %1097, %1094 ]
  %1055 = phi i32 [ 0, %1046 ], [ %1098, %1094 ]
  %1056 = load %struct.opj_pi_resolution*, %struct.opj_pi_resolution** %1047, align 8
  %1057 = getelementptr inbounds %struct.opj_pi_resolution, %struct.opj_pi_resolution* %1056, i64 %1054, i32 0
  %1058 = load i32, i32* %1057, align 4
  %1059 = xor i32 %1055, -1
  %1060 = add i32 %1051, %1059
  %1061 = add i32 %1060, %1058
  %1062 = icmp ult i32 %1061, 32
  br i1 %1062, label %1063, label %1075

1063:                                             ; preds = %1050
  %1064 = load i32, i32* %1048, align 8
  %1065 = lshr i32 -1, %1061
  %1066 = icmp ugt i32 %1064, %1065
  br i1 %1066, label %1075, label %1067

1067:                                             ; preds = %1063
  %1068 = shl i32 %1064, %1061
  %1069 = icmp eq i32 %1053, 0
  %1070 = icmp ult i32 %1053, %1068
  %1071 = select i1 %1070, i32 %1053, i32 %1068
  %1072 = select i1 %1069, i32 %1068, i32 %1071
  store i32 %1072, i32* %1041, align 8
  %1073 = load i32, i32* %1043, align 8
  %1074 = add i32 %1073, %1059
  br label %1075

1075:                                             ; preds = %1067, %1063, %1050
  %1076 = phi i32 [ %1074, %1067 ], [ %1060, %1063 ], [ %1060, %1050 ]
  %1077 = phi i32 [ %1073, %1067 ], [ %1051, %1063 ], [ %1051, %1050 ]
  %1078 = phi i32 [ %1072, %1067 ], [ %1053, %1063 ], [ %1053, %1050 ]
  %1079 = getelementptr inbounds %struct.opj_pi_resolution, %struct.opj_pi_resolution* %1056, i64 %1054, i32 1
  %1080 = load i32, i32* %1079, align 4
  %1081 = add i32 %1076, %1080
  %1082 = icmp ult i32 %1081, 32
  br i1 %1082, label %1083, label %1094

1083:                                             ; preds = %1075
  %1084 = load i32, i32* %1049, align 4
  %1085 = lshr i32 -1, %1081
  %1086 = icmp ugt i32 %1084, %1085
  br i1 %1086, label %1094, label %1087

1087:                                             ; preds = %1083
  %1088 = shl i32 %1084, %1081
  %1089 = icmp eq i32 %1052, 0
  %1090 = icmp ult i32 %1052, %1088
  %1091 = select i1 %1090, i32 %1052, i32 %1088
  %1092 = select i1 %1089, i32 %1088, i32 %1091
  store i32 %1092, i32* %1042, align 4
  %1093 = load i32, i32* %1043, align 8
  br label %1094

1094:                                             ; preds = %1087, %1083, %1075
  %1095 = phi i32 [ %1077, %1083 ], [ %1093, %1087 ], [ %1077, %1075 ]
  %1096 = phi i32 [ %1052, %1083 ], [ %1092, %1087 ], [ %1052, %1075 ]
  %1097 = add nuw nsw i64 %1054, 1
  %1098 = add nuw i32 %1055, 1
  %1099 = zext i32 %1095 to i64
  %1100 = icmp ult i64 %1097, %1099
  br i1 %1100, label %1050, label %1101

1101:                                             ; preds = %1094
  %1102 = icmp eq i32 %1078, 0
  %1103 = icmp eq i32 %1096, 0
  %1104 = or i1 %1102, %1103
  br i1 %1104, label %1369, label %1105

1105:                                             ; preds = %1101
  %1106 = getelementptr inbounds %struct.opj_pi_iterator, %struct.opj_pi_iterator* %0, i64 0, i32 0
  %1107 = load i8, i8* %1106, align 8
  %1108 = icmp eq i8 %1107, 0
  br i1 %1108, label %1112, label %1109

1109:                                             ; preds = %1105
  %1110 = getelementptr inbounds %struct.opj_pi_iterator, %struct.opj_pi_iterator* %0, i64 0, i32 12, i32 14
  %1111 = load i32, i32* %1110, align 4
  br label %1120

1112:                                             ; preds = %1105
  %1113 = getelementptr inbounds %struct.opj_pi_iterator, %struct.opj_pi_iterator* %0, i64 0, i32 15
  %1114 = getelementptr inbounds %struct.opj_pi_iterator, %struct.opj_pi_iterator* %0, i64 0, i32 12, i32 12
  %1115 = bitcast i32* %1113 to <4 x i32>*
  %1116 = load <4 x i32>, <4 x i32>* %1115, align 8
  %1117 = shufflevector <4 x i32> %1116, <4 x i32> undef, <4 x i32> <i32 0, i32 2, i32 1, i32 3>
  %1118 = bitcast i32* %1114 to <4 x i32>*
  store <4 x i32> %1117, <4 x i32>* %1118, align 4
  %1119 = extractelement <4 x i32> %1116, i32 1
  br label %1120

1120:                                             ; preds = %1109, %1112
  %1121 = phi i32 [ %1111, %1109 ], [ %1119, %1112 ]
  %1122 = getelementptr inbounds %struct.opj_pi_iterator, %struct.opj_pi_iterator* %0, i64 0, i32 20
  store i32 %1121, i32* %1122, align 4
  br label %1123

1123:                                             ; preds = %1358, %1120
  %1124 = phi i32 [ %1034, %1120 ], [ %1136, %1358 ]
  %1125 = phi i32 [ %1034, %1120 ], [ %1137, %1358 ]
  %1126 = phi i32 [ %1121, %1120 ], [ %1365, %1358 ]
  %1127 = phi %struct.opj_pi_comp* [ %1040, %1120 ], [ %1139, %1358 ]
  %1128 = getelementptr inbounds %struct.opj_pi_iterator, %struct.opj_pi_iterator* %0, i64 0, i32 12, i32 15
  %1129 = load i32, i32* %1128, align 8
  %1130 = icmp ult i32 %1126, %1129
  br i1 %1130, label %1131, label %1366

1131:                                             ; preds = %1123
  %1132 = getelementptr inbounds %struct.opj_pi_iterator, %struct.opj_pi_iterator* %0, i64 0, i32 12, i32 12
  %1133 = load i32, i32* %1132, align 4
  %1134 = getelementptr inbounds %struct.opj_pi_iterator, %struct.opj_pi_iterator* %0, i64 0, i32 19
  store i32 %1133, i32* %1134, align 8
  br label %1135

1135:                                             ; preds = %1350, %1131
  %1136 = phi i32 [ %1124, %1131 ], [ %1148, %1350 ]
  %1137 = phi i32 [ %1125, %1131 ], [ %1149, %1350 ]
  %1138 = phi i32 [ %1133, %1131 ], [ %1357, %1350 ]
  %1139 = phi %struct.opj_pi_comp* [ %1127, %1131 ], [ %1151, %1350 ]
  %1140 = getelementptr inbounds %struct.opj_pi_iterator, %struct.opj_pi_iterator* %0, i64 0, i32 12, i32 13
  %1141 = load i32, i32* %1140, align 8
  %1142 = icmp ult i32 %1138, %1141
  br i1 %1142, label %1143, label %1358

1143:                                             ; preds = %1135
  %1144 = getelementptr inbounds %struct.opj_pi_iterator, %struct.opj_pi_iterator* %0, i64 0, i32 12, i32 0
  %1145 = load i32, i32* %1144, align 8
  %1146 = getelementptr inbounds %struct.opj_pi_iterator, %struct.opj_pi_iterator* %0, i64 0, i32 8
  store i32 %1145, i32* %1146, align 8
  br label %1147

1147:                                             ; preds = %1343, %1143
  %1148 = phi i32 [ %1136, %1143 ], [ %1344, %1343 ]
  %1149 = phi i32 [ %1137, %1143 ], [ %1345, %1343 ]
  %1150 = phi i32 [ %1145, %1143 ], [ %1349, %1343 ]
  %1151 = phi %struct.opj_pi_comp* [ %1139, %1143 ], [ %1347, %1343 ]
  %1152 = getelementptr inbounds %struct.opj_pi_iterator, %struct.opj_pi_iterator* %0, i64 0, i32 12, i32 3
  %1153 = load i32, i32* %1152, align 4
  %1154 = getelementptr inbounds %struct.opj_pi_comp, %struct.opj_pi_comp* %1151, i64 0, i32 2
  %1155 = load i32, i32* %1154, align 8
  %1156 = icmp ult i32 %1153, %1155
  %1157 = select i1 %1156, i32 %1153, i32 %1155
  %1158 = icmp ult i32 %1150, %1157
  br i1 %1158, label %1159, label %1350

1159:                                             ; preds = %1147
  %1160 = getelementptr inbounds %struct.opj_pi_comp, %struct.opj_pi_comp* %1151, i64 0, i32 3
  %1161 = load %struct.opj_pi_resolution*, %struct.opj_pi_resolution** %1160, align 8
  %1162 = zext i32 %1150 to i64
  %1163 = xor i32 %1150, -1
  %1164 = add i32 %1155, %1163
  %1165 = icmp ugt i32 %1164, 31
  br i1 %1165, label %1343, label %1166

1166:                                             ; preds = %1159
  %1167 = getelementptr inbounds %struct.opj_pi_comp, %struct.opj_pi_comp* %1151, i64 0, i32 0
  %1168 = load i32, i32* %1167, align 8
  %1169 = shl i32 %1168, %1164
  %1170 = lshr i32 %1169, %1164
  %1171 = icmp eq i32 %1170, %1168
  br i1 %1171, label %1172, label %1343

1172:                                             ; preds = %1166
  %1173 = getelementptr inbounds %struct.opj_pi_comp, %struct.opj_pi_comp* %1151, i64 0, i32 1
  %1174 = load i32, i32* %1173, align 4
  %1175 = shl i32 %1174, %1164
  %1176 = lshr i32 %1175, %1164
  %1177 = icmp ne i32 %1176, %1174
  %1178 = or i32 %1175, %1169
  %1179 = icmp slt i32 %1178, 0
  %1180 = or i1 %1179, %1177
  br i1 %1180, label %1343, label %1181

1181:                                             ; preds = %1172
  %1182 = getelementptr inbounds %struct.opj_pi_iterator, %struct.opj_pi_iterator* %0, i64 0, i32 15
  %1183 = load i32, i32* %1182, align 8
  %1184 = zext i32 %1183 to i64
  %1185 = zext i32 %1169 to i64
  %1186 = add nsw i64 %1185, -1
  %1187 = add nsw i64 %1186, %1184
  %1188 = udiv i64 %1187, %1185
  %1189 = trunc i64 %1188 to i32
  %1190 = getelementptr inbounds %struct.opj_pi_iterator, %struct.opj_pi_iterator* %0, i64 0, i32 16
  %1191 = load i32, i32* %1190, align 4
  %1192 = zext i32 %1191 to i64
  %1193 = zext i32 %1175 to i64
  %1194 = add nsw i64 %1193, -1
  %1195 = add nsw i64 %1194, %1192
  %1196 = udiv i64 %1195, %1193
  %1197 = trunc i64 %1196 to i32
  %1198 = getelementptr inbounds %struct.opj_pi_iterator, %struct.opj_pi_iterator* %0, i64 0, i32 17
  %1199 = load i32, i32* %1198, align 8
  %1200 = zext i32 %1199 to i64
  %1201 = add nsw i64 %1186, %1200
  %1202 = udiv i64 %1201, %1185
  %1203 = trunc i64 %1202 to i32
  %1204 = getelementptr inbounds %struct.opj_pi_iterator, %struct.opj_pi_iterator* %0, i64 0, i32 18
  %1205 = load i32, i32* %1204, align 4
  %1206 = zext i32 %1205 to i64
  %1207 = add nsw i64 %1194, %1206
  %1208 = udiv i64 %1207, %1193
  %1209 = trunc i64 %1208 to i32
  %1210 = getelementptr inbounds %struct.opj_pi_resolution, %struct.opj_pi_resolution* %1161, i64 %1162, i32 0
  %1211 = load i32, i32* %1210, align 4
  %1212 = add i32 %1211, %1164
  %1213 = getelementptr inbounds %struct.opj_pi_resolution, %struct.opj_pi_resolution* %1161, i64 %1162, i32 1
  %1214 = load i32, i32* %1213, align 4
  %1215 = add i32 %1214, %1164
  %1216 = icmp ugt i32 %1212, 30
  br i1 %1216, label %1343, label %1217

1217:                                             ; preds = %1181
  %1218 = lshr i32 -1, %1212
  %1219 = icmp ugt i32 %1168, %1218
  %1220 = icmp ugt i32 %1215, 30
  %1221 = or i1 %1219, %1220
  br i1 %1221, label %1343, label %1222

1222:                                             ; preds = %1217
  %1223 = shl i32 %1174, %1215
  %1224 = lshr i32 %1223, %1215
  %1225 = icmp eq i32 %1224, %1174
  br i1 %1225, label %1226, label %1343

1226:                                             ; preds = %1222
  %1227 = getelementptr inbounds %struct.opj_pi_iterator, %struct.opj_pi_iterator* %0, i64 0, i32 20
  %1228 = load i32, i32* %1227, align 4
  %1229 = urem i32 %1228, %1223
  %1230 = icmp eq i32 %1229, 0
  br i1 %1230, label %1239, label %1231

1231:                                             ; preds = %1226
  %1232 = icmp eq i32 %1228, %1191
  br i1 %1232, label %1233, label %1343

1233:                                             ; preds = %1231
  %1234 = shl i32 %1197, %1164
  %1235 = shl nsw i32 -1, %1215
  %1236 = xor i32 %1235, -1
  %1237 = and i32 %1234, %1236
  %1238 = icmp eq i32 %1237, 0
  br i1 %1238, label %1343, label %1239

1239:                                             ; preds = %1233, %1226
  %1240 = getelementptr inbounds %struct.opj_pi_iterator, %struct.opj_pi_iterator* %0, i64 0, i32 19
  %1241 = load i32, i32* %1240, align 8
  %1242 = shl i32 %1168, %1212
  %1243 = urem i32 %1241, %1242
  %1244 = icmp eq i32 %1243, 0
  br i1 %1244, label %1253, label %1245

1245:                                             ; preds = %1239
  %1246 = icmp eq i32 %1241, %1183
  br i1 %1246, label %1247, label %1343

1247:                                             ; preds = %1245
  %1248 = shl i32 %1189, %1164
  %1249 = shl nsw i32 -1, %1212
  %1250 = xor i32 %1249, -1
  %1251 = and i32 %1248, %1250
  %1252 = icmp eq i32 %1251, 0
  br i1 %1252, label %1343, label %1253

1253:                                             ; preds = %1247, %1239
  %1254 = getelementptr inbounds %struct.opj_pi_resolution, %struct.opj_pi_resolution* %1161, i64 %1162, i32 2
  %1255 = load i32, i32* %1254, align 4
  %1256 = icmp eq i32 %1255, 0
  br i1 %1256, label %1343, label %1257

1257:                                             ; preds = %1253
  %1258 = getelementptr inbounds %struct.opj_pi_resolution, %struct.opj_pi_resolution* %1161, i64 %1162, i32 3
  %1259 = load i32, i32* %1258, align 4
  %1260 = icmp eq i32 %1259, 0
  %1261 = icmp eq i32 %1189, %1203
  %1262 = or i1 %1261, %1260
  %1263 = icmp eq i32 %1197, %1209
  %1264 = or i1 %1263, %1262
  br i1 %1264, label %1343, label %1265

1265:                                             ; preds = %1257
  %1266 = zext i32 %1241 to i64
  %1267 = add nsw i64 %1186, %1266
  %1268 = udiv i64 %1267, %1185
  %1269 = trunc i64 %1268 to i32
  %1270 = lshr i32 %1269, %1211
  %1271 = lshr i32 %1189, %1211
  %1272 = sub i32 %1270, %1271
  %1273 = zext i32 %1228 to i64
  %1274 = add nsw i64 %1194, %1273
  %1275 = udiv i64 %1274, %1193
  %1276 = trunc i64 %1275 to i32
  %1277 = lshr i32 %1276, %1214
  %1278 = lshr i32 %1197, %1214
  %1279 = sub i32 %1277, %1278
  %1280 = mul i32 %1279, %1255
  %1281 = add i32 %1280, %1272
  %1282 = getelementptr inbounds %struct.opj_pi_iterator, %struct.opj_pi_iterator* %0, i64 0, i32 9
  store i32 %1281, i32* %1282, align 4
  %1283 = load i32, i32* %1254, align 4
  %1284 = load i32, i32* %1258, align 4
  %1285 = mul i32 %1284, %1283
  %1286 = icmp ult i32 %1281, %1285
  br i1 %1286, label %1287, label %1369

1287:                                             ; preds = %1265
  %1288 = getelementptr inbounds %struct.opj_pi_iterator, %struct.opj_pi_iterator* %0, i64 0, i32 12, i32 5
  %1289 = load i32, i32* %1288, align 4
  %1290 = getelementptr inbounds %struct.opj_pi_iterator, %struct.opj_pi_iterator* %0, i64 0, i32 10
  store i32 %1289, i32* %1290, align 8
  br label %1291

1291:                                             ; preds = %1337, %1287
  %1292 = phi i32 [ %1148, %1287 ], [ %1338, %1337 ]
  %1293 = phi i32 [ %1149, %1287 ], [ %1338, %1337 ]
  %1294 = phi i32 [ %1289, %1287 ], [ %1342, %1337 ]
  %1295 = phi %struct.opj_pi_comp* [ %1151, %1287 ], [ %1340, %1337 ]
  %1296 = getelementptr inbounds %struct.opj_pi_iterator, %struct.opj_pi_iterator* %0, i64 0, i32 12, i32 2
  %1297 = load i32, i32* %1296, align 8
  %1298 = icmp ult i32 %1294, %1297
  br i1 %1298, label %1302, label %1299

1299:                                             ; preds = %1291
  %1300 = getelementptr inbounds %struct.opj_pi_iterator, %struct.opj_pi_iterator* %0, i64 0, i32 8
  %1301 = load i32, i32* %1300, align 8
  br label %1343

1302:                                             ; preds = %1291
  %1303 = getelementptr inbounds %struct.opj_pi_iterator, %struct.opj_pi_iterator* %0, i64 0, i32 3
  %1304 = load i32, i32* %1303, align 4
  %1305 = mul i32 %1304, %1294
  %1306 = getelementptr inbounds %struct.opj_pi_iterator, %struct.opj_pi_iterator* %0, i64 0, i32 8
  %1307 = load i32, i32* %1306, align 8
  %1308 = getelementptr inbounds %struct.opj_pi_iterator, %struct.opj_pi_iterator* %0, i64 0, i32 4
  %1309 = load i32, i32* %1308, align 8
  %1310 = mul i32 %1309, %1307
  %1311 = add i32 %1310, %1305
  %1312 = getelementptr inbounds %struct.opj_pi_iterator, %struct.opj_pi_iterator* %0, i64 0, i32 5
  %1313 = load i32, i32* %1312, align 4
  %1314 = mul i32 %1313, %1292
  %1315 = add i32 %1311, %1314
  %1316 = getelementptr inbounds %struct.opj_pi_iterator, %struct.opj_pi_iterator* %0, i64 0, i32 9
  %1317 = load i32, i32* %1316, align 4
  %1318 = getelementptr inbounds %struct.opj_pi_iterator, %struct.opj_pi_iterator* %0, i64 0, i32 6
  %1319 = load i32, i32* %1318, align 8
  %1320 = mul i32 %1319, %1317
  %1321 = add i32 %1315, %1320
  %1322 = getelementptr inbounds %struct.opj_pi_iterator, %struct.opj_pi_iterator* %0, i64 0, i32 2
  %1323 = load i32, i32* %1322, align 8
  %1324 = icmp ult i32 %1321, %1323
  br i1 %1324, label %1329, label %1325

1325:                                             ; preds = %1302
  %1326 = getelementptr inbounds %struct.opj_pi_iterator, %struct.opj_pi_iterator* %0, i64 0, i32 23
  %1327 = load %struct.opj_event_mgr*, %struct.opj_event_mgr** %1326, align 8
  %1328 = tail call i32 (%struct.opj_event_mgr*, i32, i8*, ...) @opj_event_msg(%struct.opj_event_mgr* %1327, i32 1, i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.1, i64 0, i64 0)) #5
  br label %1369

1329:                                             ; preds = %1302
  %1330 = getelementptr inbounds %struct.opj_pi_iterator, %struct.opj_pi_iterator* %0, i64 0, i32 1
  %1331 = load i16*, i16** %1330, align 8
  %1332 = zext i32 %1321 to i64
  %1333 = getelementptr inbounds i16, i16* %1331, i64 %1332
  %1334 = load i16, i16* %1333, align 2
  %1335 = icmp eq i16 %1334, 0
  br i1 %1335, label %1336, label %1337

1336:                                             ; preds = %1329
  store i16 1, i16* %1333, align 2
  br label %1369

1337:                                             ; preds = %1329, %1022
  %1338 = phi i32 [ %1292, %1329 ], [ %1026, %1022 ]
  %1339 = phi i32 [ %1294, %1329 ], [ %1030, %1022 ]
  %1340 = phi %struct.opj_pi_comp* [ %1295, %1329 ], [ %1028, %1022 ]
  %1341 = getelementptr inbounds %struct.opj_pi_iterator, %struct.opj_pi_iterator* %0, i64 0, i32 10
  %1342 = add i32 %1339, 1
  store i32 %1342, i32* %1341, align 8
  br label %1291

1343:                                             ; preds = %1299, %1257, %1253, %1247, %1245, %1233, %1231, %1222, %1217, %1181, %1172, %1166, %1159
  %1344 = phi i32 [ %1148, %1159 ], [ %1148, %1166 ], [ %1148, %1172 ], [ %1148, %1181 ], [ %1148, %1217 ], [ %1148, %1222 ], [ %1148, %1253 ], [ %1148, %1257 ], [ %1292, %1299 ], [ %1148, %1247 ], [ %1148, %1245 ], [ %1148, %1233 ], [ %1148, %1231 ]
  %1345 = phi i32 [ %1149, %1159 ], [ %1149, %1166 ], [ %1149, %1172 ], [ %1149, %1181 ], [ %1149, %1217 ], [ %1149, %1222 ], [ %1149, %1253 ], [ %1149, %1257 ], [ %1293, %1299 ], [ %1149, %1247 ], [ %1149, %1245 ], [ %1149, %1233 ], [ %1149, %1231 ]
  %1346 = phi i32 [ %1150, %1159 ], [ %1150, %1166 ], [ %1150, %1172 ], [ %1150, %1181 ], [ %1150, %1217 ], [ %1150, %1222 ], [ %1150, %1253 ], [ %1150, %1257 ], [ %1301, %1299 ], [ %1150, %1247 ], [ %1150, %1245 ], [ %1150, %1233 ], [ %1150, %1231 ]
  %1347 = phi %struct.opj_pi_comp* [ %1151, %1159 ], [ %1151, %1166 ], [ %1151, %1172 ], [ %1151, %1181 ], [ %1151, %1217 ], [ %1151, %1222 ], [ %1151, %1253 ], [ %1151, %1257 ], [ %1295, %1299 ], [ %1151, %1247 ], [ %1151, %1245 ], [ %1151, %1233 ], [ %1151, %1231 ]
  %1348 = getelementptr inbounds %struct.opj_pi_iterator, %struct.opj_pi_iterator* %0, i64 0, i32 8
  %1349 = add i32 %1346, 1
  store i32 %1349, i32* %1348, align 8
  br label %1147

1350:                                             ; preds = %1147
  %1351 = getelementptr inbounds %struct.opj_pi_iterator, %struct.opj_pi_iterator* %0, i64 0, i32 21
  %1352 = load i32, i32* %1351, align 8
  %1353 = getelementptr inbounds %struct.opj_pi_iterator, %struct.opj_pi_iterator* %0, i64 0, i32 19
  %1354 = load i32, i32* %1353, align 8
  %1355 = urem i32 %1354, %1352
  %1356 = add i32 %1354, %1352
  %1357 = sub i32 %1356, %1355
  store i32 %1357, i32* %1353, align 8
  br label %1135

1358:                                             ; preds = %1135
  %1359 = getelementptr inbounds %struct.opj_pi_iterator, %struct.opj_pi_iterator* %0, i64 0, i32 22
  %1360 = load i32, i32* %1359, align 4
  %1361 = getelementptr inbounds %struct.opj_pi_iterator, %struct.opj_pi_iterator* %0, i64 0, i32 20
  %1362 = load i32, i32* %1361, align 4
  %1363 = urem i32 %1362, %1360
  %1364 = add i32 %1362, %1360
  %1365 = sub i32 %1364, %1363
  store i32 %1365, i32* %1361, align 4
  br label %1123

1366:                                             ; preds = %1123
  %1367 = getelementptr inbounds %struct.opj_pi_iterator, %struct.opj_pi_iterator* %0, i64 0, i32 7
  %1368 = add i32 %1125, 1
  store i32 %1368, i32* %1367, align 4
  br label %1033

1369:                                             ; preds = %1336, %1325, %1265, %1101, %1036, %1033, %1014, %968, %957, %896, %749, %727, %637, %597, %586, %527, %384, %365, %281, %253, %242, %163, %148, %120, %109, %30, %15, %1
  %1370 = phi i32 [ 0, %1 ], [ 0, %15 ], [ 0, %109 ], [ 1, %120 ], [ 0, %30 ], [ 0, %148 ], [ 0, %242 ], [ 1, %253 ], [ 0, %163 ], [ 0, %281 ], [ 0, %586 ], [ 1, %597 ], [ 0, %365 ], [ 0, %527 ], [ 0, %384 ], [ 0, %637 ], [ 0, %957 ], [ 1, %968 ], [ 0, %727 ], [ 0, %896 ], [ 0, %749 ], [ 0, %1014 ], [ 0, %1325 ], [ 1, %1336 ], [ 0, %1101 ], [ 0, %1265 ], [ 0, %1033 ], [ 0, %1036 ]
  ret i32 %1370
}

declare i32 @opj_event_msg(%struct.opj_event_mgr*, i32, i8*, ...) local_unnamed_addr #2

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nofree norecurse nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind readonly ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = distinct !{!2, !3}
!3 = !{!"llvm.loop.isvectorized", i32 1}
!4 = distinct !{!4, !5, !3}
!5 = !{!"llvm.loop.unroll.runtime.disable"}
!6 = distinct !{!6, !3}
!7 = distinct !{!7, !5, !3}
