; ModuleID = '../../third_party/skia/src/codec/SkEncodedInfo.cpp'
source_filename = "../../third_party/skia/src/codec/SkEncodedInfo.cpp"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%struct.skcms_Matrix3x3 = type { [3 x [3 x float]] }
%struct.skcms_Matrix3x4 = type { [3 x [4 x float]] }
%"class.SkEncodedInfo::ICCProfile" = type { %struct.skcms_ICCProfile, %class.sk_sp }
%struct.skcms_ICCProfile = type { i8*, i32, i32, i32, i32, i8, [3 x %union.skcms_Curve], i8, %struct.skcms_Matrix3x3, i8, %struct.skcms_A2B, i8, %struct.skcms_B2A }
%union.skcms_Curve = type { %struct.anon.0, [8 x i8] }
%struct.anon.0 = type { i32, i8*, i8* }
%struct.skcms_A2B = type { i32, [4 x %union.skcms_Curve], [4 x i8], i8*, i8*, i32, [3 x %union.skcms_Curve], %struct.skcms_Matrix3x4, i32, [3 x %union.skcms_Curve] }
%struct.skcms_B2A = type { i32, [3 x %union.skcms_Curve], i32, %struct.skcms_Matrix3x4, [3 x %union.skcms_Curve], i32, [4 x i8], i8*, i8*, [4 x %union.skcms_Curve] }
%class.sk_sp = type { %class.SkData* }
%class.SkData = type { %class.SkNVRefCnt, void (i8*, i8*)*, i8*, i8*, i64 }
%class.SkNVRefCnt = type { %"struct.std::__1::atomic" }
%"struct.std::__1::atomic" = type { %"struct.std::__1::__atomic_base" }
%"struct.std::__1::__atomic_base" = type { %"struct.std::__1::__atomic_base.1" }
%"struct.std::__1::__atomic_base.1" = type { %"struct.std::__1::__cxx_atomic_impl" }
%"struct.std::__1::__cxx_atomic_impl" = type { %"struct.std::__1::__cxx_atomic_base_impl" }
%"struct.std::__1::__cxx_atomic_base_impl" = type { i32 }

@__const._ZN13SkEncodedInfo10ICCProfile4MakeE5sk_spI6SkDataE.profile = private unnamed_addr constant { i8*, i32, i32, i32, i32, i8, [7 x i8], [3 x { { i32, [4 x i8], i8*, i8* }, [8 x i8] }], i8, [3 x i8], %struct.skcms_Matrix3x3, i8, [7 x i8], { i32, [4 x i8], [4 x { { i32, [4 x i8], i8*, i8* }, [8 x i8] }], [4 x i8], [4 x i8], i8*, i8*, i32, [4 x i8], [3 x { { i32, [4 x i8], i8*, i8* }, [8 x i8] }], %struct.skcms_Matrix3x4, i32, [4 x i8], [3 x { { i32, [4 x i8], i8*, i8* }, [8 x i8] }] }, i8, [7 x i8], { i32, [4 x i8], [3 x { { i32, [4 x i8], i8*, i8* }, [8 x i8] }], i32, %struct.skcms_Matrix3x4, [4 x i8], [3 x { { i32, [4 x i8], i8*, i8* }, [8 x i8] }], i32, [4 x i8], i8*, i8*, [4 x { { i32, [4 x i8], i8*, i8* }, [8 x i8] }] } } { i8* inttoptr (i64 -6148914691236517206 to i8*), i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i8 -86, [7 x i8] c"\AA\AA\AA\AA\AA\AA\AA", [3 x { { i32, [4 x i8], i8*, i8* }, [8 x i8] }] [{ { i32, [4 x i8], i8*, i8* }, [8 x i8] } { { i32, [4 x i8], i8*, i8* } { i32 -1431655766, [4 x i8] c"\AA\AA\AA\AA", i8* inttoptr (i64 -6148914691236517206 to i8*), i8* inttoptr (i64 -6148914691236517206 to i8*) }, [8 x i8] c"\AA\AA\AA\AA\AA\AA\AA\AA" }, { { i32, [4 x i8], i8*, i8* }, [8 x i8] } { { i32, [4 x i8], i8*, i8* } { i32 -1431655766, [4 x i8] c"\AA\AA\AA\AA", i8* inttoptr (i64 -6148914691236517206 to i8*), i8* inttoptr (i64 -6148914691236517206 to i8*) }, [8 x i8] c"\AA\AA\AA\AA\AA\AA\AA\AA" }, { { i32, [4 x i8], i8*, i8* }, [8 x i8] } { { i32, [4 x i8], i8*, i8* } { i32 -1431655766, [4 x i8] c"\AA\AA\AA\AA", i8* inttoptr (i64 -6148914691236517206 to i8*), i8* inttoptr (i64 -6148914691236517206 to i8*) }, [8 x i8] c"\AA\AA\AA\AA\AA\AA\AA\AA" }], i8 -86, [3 x i8] c"\AA\AA\AA", %struct.skcms_Matrix3x3 { [3 x [3 x float]] [[3 x float] [float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000], [3 x float] [float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000], [3 x float] [float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000]] }, i8 -86, [7 x i8] c"\AA\AA\AA\AA\AA\AA\AA", { i32, [4 x i8], [4 x { { i32, [4 x i8], i8*, i8* }, [8 x i8] }], [4 x i8], [4 x i8], i8*, i8*, i32, [4 x i8], [3 x { { i32, [4 x i8], i8*, i8* }, [8 x i8] }], %struct.skcms_Matrix3x4, i32, [4 x i8], [3 x { { i32, [4 x i8], i8*, i8* }, [8 x i8] }] } { i32 -1431655766, [4 x i8] c"\AA\AA\AA\AA", [4 x { { i32, [4 x i8], i8*, i8* }, [8 x i8] }] [{ { i32, [4 x i8], i8*, i8* }, [8 x i8] } { { i32, [4 x i8], i8*, i8* } { i32 -1431655766, [4 x i8] c"\AA\AA\AA\AA", i8* inttoptr (i64 -6148914691236517206 to i8*), i8* inttoptr (i64 -6148914691236517206 to i8*) }, [8 x i8] c"\AA\AA\AA\AA\AA\AA\AA\AA" }, { { i32, [4 x i8], i8*, i8* }, [8 x i8] } { { i32, [4 x i8], i8*, i8* } { i32 -1431655766, [4 x i8] c"\AA\AA\AA\AA", i8* inttoptr (i64 -6148914691236517206 to i8*), i8* inttoptr (i64 -6148914691236517206 to i8*) }, [8 x i8] c"\AA\AA\AA\AA\AA\AA\AA\AA" }, { { i32, [4 x i8], i8*, i8* }, [8 x i8] } { { i32, [4 x i8], i8*, i8* } { i32 -1431655766, [4 x i8] c"\AA\AA\AA\AA", i8* inttoptr (i64 -6148914691236517206 to i8*), i8* inttoptr (i64 -6148914691236517206 to i8*) }, [8 x i8] c"\AA\AA\AA\AA\AA\AA\AA\AA" }, { { i32, [4 x i8], i8*, i8* }, [8 x i8] } { { i32, [4 x i8], i8*, i8* } { i32 -1431655766, [4 x i8] c"\AA\AA\AA\AA", i8* inttoptr (i64 -6148914691236517206 to i8*), i8* inttoptr (i64 -6148914691236517206 to i8*) }, [8 x i8] c"\AA\AA\AA\AA\AA\AA\AA\AA" }], [4 x i8] c"\AA\AA\AA\AA", [4 x i8] c"\AA\AA\AA\AA", i8* inttoptr (i64 -6148914691236517206 to i8*), i8* inttoptr (i64 -6148914691236517206 to i8*), i32 -1431655766, [4 x i8] c"\AA\AA\AA\AA", [3 x { { i32, [4 x i8], i8*, i8* }, [8 x i8] }] [{ { i32, [4 x i8], i8*, i8* }, [8 x i8] } { { i32, [4 x i8], i8*, i8* } { i32 -1431655766, [4 x i8] c"\AA\AA\AA\AA", i8* inttoptr (i64 -6148914691236517206 to i8*), i8* inttoptr (i64 -6148914691236517206 to i8*) }, [8 x i8] c"\AA\AA\AA\AA\AA\AA\AA\AA" }, { { i32, [4 x i8], i8*, i8* }, [8 x i8] } { { i32, [4 x i8], i8*, i8* } { i32 -1431655766, [4 x i8] c"\AA\AA\AA\AA", i8* inttoptr (i64 -6148914691236517206 to i8*), i8* inttoptr (i64 -6148914691236517206 to i8*) }, [8 x i8] c"\AA\AA\AA\AA\AA\AA\AA\AA" }, { { i32, [4 x i8], i8*, i8* }, [8 x i8] } { { i32, [4 x i8], i8*, i8* } { i32 -1431655766, [4 x i8] c"\AA\AA\AA\AA", i8* inttoptr (i64 -6148914691236517206 to i8*), i8* inttoptr (i64 -6148914691236517206 to i8*) }, [8 x i8] c"\AA\AA\AA\AA\AA\AA\AA\AA" }], %struct.skcms_Matrix3x4 { [3 x [4 x float]] [[4 x float] [float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000], [4 x float] [float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000], [4 x float] [float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000]] }, i32 -1431655766, [4 x i8] c"\AA\AA\AA\AA", [3 x { { i32, [4 x i8], i8*, i8* }, [8 x i8] }] [{ { i32, [4 x i8], i8*, i8* }, [8 x i8] } { { i32, [4 x i8], i8*, i8* } { i32 -1431655766, [4 x i8] c"\AA\AA\AA\AA", i8* inttoptr (i64 -6148914691236517206 to i8*), i8* inttoptr (i64 -6148914691236517206 to i8*) }, [8 x i8] c"\AA\AA\AA\AA\AA\AA\AA\AA" }, { { i32, [4 x i8], i8*, i8* }, [8 x i8] } { { i32, [4 x i8], i8*, i8* } { i32 -1431655766, [4 x i8] c"\AA\AA\AA\AA", i8* inttoptr (i64 -6148914691236517206 to i8*), i8* inttoptr (i64 -6148914691236517206 to i8*) }, [8 x i8] c"\AA\AA\AA\AA\AA\AA\AA\AA" }, { { i32, [4 x i8], i8*, i8* }, [8 x i8] } { { i32, [4 x i8], i8*, i8* } { i32 -1431655766, [4 x i8] c"\AA\AA\AA\AA", i8* inttoptr (i64 -6148914691236517206 to i8*), i8* inttoptr (i64 -6148914691236517206 to i8*) }, [8 x i8] c"\AA\AA\AA\AA\AA\AA\AA\AA" }] }, i8 -86, [7 x i8] c"\AA\AA\AA\AA\AA\AA\AA", { i32, [4 x i8], [3 x { { i32, [4 x i8], i8*, i8* }, [8 x i8] }], i32, %struct.skcms_Matrix3x4, [4 x i8], [3 x { { i32, [4 x i8], i8*, i8* }, [8 x i8] }], i32, [4 x i8], i8*, i8*, [4 x { { i32, [4 x i8], i8*, i8* }, [8 x i8] }] } { i32 -1431655766, [4 x i8] c"\AA\AA\AA\AA", [3 x { { i32, [4 x i8], i8*, i8* }, [8 x i8] }] [{ { i32, [4 x i8], i8*, i8* }, [8 x i8] } { { i32, [4 x i8], i8*, i8* } { i32 -1431655766, [4 x i8] c"\AA\AA\AA\AA", i8* inttoptr (i64 -6148914691236517206 to i8*), i8* inttoptr (i64 -6148914691236517206 to i8*) }, [8 x i8] c"\AA\AA\AA\AA\AA\AA\AA\AA" }, { { i32, [4 x i8], i8*, i8* }, [8 x i8] } { { i32, [4 x i8], i8*, i8* } { i32 -1431655766, [4 x i8] c"\AA\AA\AA\AA", i8* inttoptr (i64 -6148914691236517206 to i8*), i8* inttoptr (i64 -6148914691236517206 to i8*) }, [8 x i8] c"\AA\AA\AA\AA\AA\AA\AA\AA" }, { { i32, [4 x i8], i8*, i8* }, [8 x i8] } { { i32, [4 x i8], i8*, i8* } { i32 -1431655766, [4 x i8] c"\AA\AA\AA\AA", i8* inttoptr (i64 -6148914691236517206 to i8*), i8* inttoptr (i64 -6148914691236517206 to i8*) }, [8 x i8] c"\AA\AA\AA\AA\AA\AA\AA\AA" }], i32 -1431655766, %struct.skcms_Matrix3x4 { [3 x [4 x float]] [[4 x float] [float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000], [4 x float] [float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000], [4 x float] [float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000]] }, [4 x i8] c"\AA\AA\AA\AA", [3 x { { i32, [4 x i8], i8*, i8* }, [8 x i8] }] [{ { i32, [4 x i8], i8*, i8* }, [8 x i8] } { { i32, [4 x i8], i8*, i8* } { i32 -1431655766, [4 x i8] c"\AA\AA\AA\AA", i8* inttoptr (i64 -6148914691236517206 to i8*), i8* inttoptr (i64 -6148914691236517206 to i8*) }, [8 x i8] c"\AA\AA\AA\AA\AA\AA\AA\AA" }, { { i32, [4 x i8], i8*, i8* }, [8 x i8] } { { i32, [4 x i8], i8*, i8* } { i32 -1431655766, [4 x i8] c"\AA\AA\AA\AA", i8* inttoptr (i64 -6148914691236517206 to i8*), i8* inttoptr (i64 -6148914691236517206 to i8*) }, [8 x i8] c"\AA\AA\AA\AA\AA\AA\AA\AA" }, { { i32, [4 x i8], i8*, i8* }, [8 x i8] } { { i32, [4 x i8], i8*, i8* } { i32 -1431655766, [4 x i8] c"\AA\AA\AA\AA", i8* inttoptr (i64 -6148914691236517206 to i8*), i8* inttoptr (i64 -6148914691236517206 to i8*) }, [8 x i8] c"\AA\AA\AA\AA\AA\AA\AA\AA" }], i32 -1431655766, [4 x i8] c"\AA\AA\AA\AA", i8* inttoptr (i64 -6148914691236517206 to i8*), i8* inttoptr (i64 -6148914691236517206 to i8*), [4 x { { i32, [4 x i8], i8*, i8* }, [8 x i8] }] [{ { i32, [4 x i8], i8*, i8* }, [8 x i8] } { { i32, [4 x i8], i8*, i8* } { i32 -1431655766, [4 x i8] c"\AA\AA\AA\AA", i8* inttoptr (i64 -6148914691236517206 to i8*), i8* inttoptr (i64 -6148914691236517206 to i8*) }, [8 x i8] c"\AA\AA\AA\AA\AA\AA\AA\AA" }, { { i32, [4 x i8], i8*, i8* }, [8 x i8] } { { i32, [4 x i8], i8*, i8* } { i32 -1431655766, [4 x i8] c"\AA\AA\AA\AA", i8* inttoptr (i64 -6148914691236517206 to i8*), i8* inttoptr (i64 -6148914691236517206 to i8*) }, [8 x i8] c"\AA\AA\AA\AA\AA\AA\AA\AA" }, { { i32, [4 x i8], i8*, i8* }, [8 x i8] } { { i32, [4 x i8], i8*, i8* } { i32 -1431655766, [4 x i8] c"\AA\AA\AA\AA", i8* inttoptr (i64 -6148914691236517206 to i8*), i8* inttoptr (i64 -6148914691236517206 to i8*) }, [8 x i8] c"\AA\AA\AA\AA\AA\AA\AA\AA" }, { { i32, [4 x i8], i8*, i8* }, [8 x i8] } { { i32, [4 x i8], i8*, i8* } { i32 -1431655766, [4 x i8] c"\AA\AA\AA\AA", i8* inttoptr (i64 -6148914691236517206 to i8*), i8* inttoptr (i64 -6148914691236517206 to i8*) }, [8 x i8] c"\AA\AA\AA\AA\AA\AA\AA\AA" }] } }, align 8
@_ZZL11skcms_ParsePKvmP16skcms_ICCProfileE8priority = internal constant [2 x i32] [i32 0, i32 1], align 4

@_ZN13SkEncodedInfo10ICCProfileC1ERK16skcms_ICCProfile5sk_spI6SkDataE = hidden unnamed_addr alias void (%"class.SkEncodedInfo::ICCProfile"*, %struct.skcms_ICCProfile*, %class.sk_sp*), void (%"class.SkEncodedInfo::ICCProfile"*, %struct.skcms_ICCProfile*, %class.sk_sp*)* @_ZN13SkEncodedInfo10ICCProfileC2ERK16skcms_ICCProfile5sk_spI6SkDataE

; Function Attrs: nounwind ssp uwtable
define hidden %"class.SkEncodedInfo::ICCProfile"* @_ZN13SkEncodedInfo10ICCProfile4MakeE5sk_spI6SkDataE(%class.sk_sp* nocapture) local_unnamed_addr #0 align 2 {
  %2 = alloca %struct.skcms_ICCProfile, align 8
  %3 = getelementptr inbounds %class.sk_sp, %class.sk_sp* %0, i64 0, i32 0
  %4 = load %class.SkData*, %class.SkData** %3, align 8
  %5 = icmp eq %class.SkData* %4, null
  br i1 %5, label %22, label %6

6:                                                ; preds = %1
  %7 = bitcast %struct.skcms_ICCProfile* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 1008, i8* nonnull %7) #4
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %7, i8* align 8 bitcast ({ i8*, i32, i32, i32, i32, i8, [7 x i8], [3 x { { i32, [4 x i8], i8*, i8* }, [8 x i8] }], i8, [3 x i8], %struct.skcms_Matrix3x3, i8, [7 x i8], { i32, [4 x i8], [4 x { { i32, [4 x i8], i8*, i8* }, [8 x i8] }], [4 x i8], [4 x i8], i8*, i8*, i32, [4 x i8], [3 x { { i32, [4 x i8], i8*, i8* }, [8 x i8] }], %struct.skcms_Matrix3x4, i32, [4 x i8], [3 x { { i32, [4 x i8], i8*, i8* }, [8 x i8] }] }, i8, [7 x i8], { i32, [4 x i8], [3 x { { i32, [4 x i8], i8*, i8* }, [8 x i8] }], i32, %struct.skcms_Matrix3x4, [4 x i8], [3 x { { i32, [4 x i8], i8*, i8* }, [8 x i8] }], i32, [4 x i8], i8*, i8*, [4 x { { i32, [4 x i8], i8*, i8* }, [8 x i8] }] } }* @__const._ZN13SkEncodedInfo10ICCProfile4MakeE5sk_spI6SkDataE.profile to i8*), i64 1008, i1 false)
  %8 = getelementptr inbounds %class.SkData, %class.SkData* %4, i64 0, i32 3
  %9 = load i8*, i8** %8, align 8
  %10 = getelementptr inbounds %class.SkData, %class.SkData* %4, i64 0, i32 4
  %11 = load i64, i64* %10, align 8
  %12 = call zeroext i1 @skcms_ParseWithA2BPriority(i8* %9, i64 %11, i32* getelementptr inbounds ([2 x i32], [2 x i32]* @_ZZL11skcms_ParsePKvmP16skcms_ICCProfileE8priority, i64 0, i64 0), i32 2, %struct.skcms_ICCProfile* nonnull %2) #4
  br i1 %12, label %13, label %20

13:                                               ; preds = %6
  %14 = call i8* @_Znwm(i64 1016) #5
  %15 = bitcast i8* %14 to %"class.SkEncodedInfo::ICCProfile"*
  %16 = bitcast %class.sk_sp* %0 to i64*
  %17 = load i64, i64* %16, align 8
  store %class.SkData* null, %class.SkData** %3, align 8
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %14, i8* nonnull align 8 %7, i64 1008, i1 false) #4
  %18 = getelementptr inbounds i8, i8* %14, i64 1008
  %19 = bitcast i8* %18 to i64*
  store i64 %17, i64* %19, align 8
  br label %20

20:                                               ; preds = %6, %13
  %21 = phi %"class.SkEncodedInfo::ICCProfile"* [ %15, %13 ], [ null, %6 ]
  call void @llvm.lifetime.end.p0i8(i64 1008, i8* nonnull %7) #4
  br label %22

22:                                               ; preds = %20, %1
  %23 = phi %"class.SkEncodedInfo::ICCProfile"* [ null, %1 ], [ %21, %20 ]
  ret %"class.SkEncodedInfo::ICCProfile"* %23
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #1

; Function Attrs: nobuiltin nofree
declare noalias nonnull i8* @_Znwm(i64) local_unnamed_addr #2

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nounwind ssp uwtable
define hidden %"class.SkEncodedInfo::ICCProfile"* @_ZN13SkEncodedInfo10ICCProfile4MakeERK16skcms_ICCProfile(%struct.skcms_ICCProfile* nocapture readonly dereferenceable(1008)) local_unnamed_addr #0 align 2 {
  %2 = tail call i8* @_Znwm(i64 1016) #5
  %3 = bitcast i8* %2 to %"class.SkEncodedInfo::ICCProfile"*
  %4 = bitcast %struct.skcms_ICCProfile* %0 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %2, i8* align 8 %4, i64 1008, i1 false) #4
  %5 = getelementptr inbounds i8, i8* %2, i64 1008
  %6 = bitcast i8* %5 to i64*
  store i64 0, i64* %6, align 8
  ret %"class.SkEncodedInfo::ICCProfile"* %3
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN13SkEncodedInfo10ICCProfileC2ERK16skcms_ICCProfile5sk_spI6SkDataE(%"class.SkEncodedInfo::ICCProfile"* nocapture, %struct.skcms_ICCProfile* nocapture readonly dereferenceable(1008), %class.sk_sp* nocapture) unnamed_addr #0 align 2 {
  %4 = bitcast %"class.SkEncodedInfo::ICCProfile"* %0 to i8*
  %5 = bitcast %struct.skcms_ICCProfile* %1 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %4, i8* align 8 %5, i64 1008, i1 false)
  %6 = getelementptr inbounds %"class.SkEncodedInfo::ICCProfile", %"class.SkEncodedInfo::ICCProfile"* %0, i64 0, i32 1
  %7 = getelementptr inbounds %class.sk_sp, %class.sk_sp* %2, i64 0, i32 0
  %8 = bitcast %class.sk_sp* %2 to i64*
  %9 = load i64, i64* %8, align 8
  store %class.SkData* null, %class.SkData** %7, align 8
  %10 = bitcast %class.sk_sp* %6 to i64*
  store i64 %9, i64* %10, align 8
  ret void
}

declare zeroext i1 @skcms_ParseWithA2BPriority(i8*, i64, i32*, i32, %struct.skcms_ICCProfile*) local_unnamed_addr #3

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { nobuiltin nofree "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind }
attributes #5 = { builtin nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
