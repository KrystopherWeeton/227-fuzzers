; ModuleID = '../../third_party/ffmpeg/libavcodec/bitstream_filter.c'
source_filename = "../../third_party/ffmpeg/libavcodec/bitstream_filter.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"
module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"
module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%struct.AVBitStreamFilter = type { i8*, i32*, %struct.AVClass*, i32, i32 (%struct.AVBSFContext*)*, i32 (%struct.AVBSFContext*, %struct.AVPacket*)*, void (%struct.AVBSFContext*)*, void (%struct.AVBSFContext*)* }
%struct.AVClass = type { i8*, i8* (i8*)*, %struct.AVOption*, i32, i32, i32, i8* (i8*, i8*)*, %struct.AVClass* (%struct.AVClass*)*, i32, i32 (i8*)*, i32 (%struct.AVOptionRanges**, i8*, i8*, i32)*, %struct.AVClass* (i8**)* }
%struct.AVOption = type { i8*, i8*, i32, i32, %union.anon, double, double, i32, i8* }
%union.anon = type { i64 }
%struct.AVOptionRanges = type { %struct.AVOptionRange**, i32, i32 }
%struct.AVOptionRange = type { i8*, double, double, double, double, i32 }
%struct.AVBSFContext = type { %struct.AVClass*, %struct.AVBitStreamFilter*, %struct.AVBSFInternal*, i8*, %struct.AVCodecParameters*, %struct.AVCodecParameters*, %struct.AVRational, %struct.AVRational }
%struct.AVBSFInternal = type opaque
%struct.AVCodecParameters = type { i32, i32, i32, i8*, i32, i32, i64, i32, i32, i32, i32, i32, i32, %struct.AVRational, i32, i32, i32, i32, i32, i32, i32, i64, i32, i32, i32, i32, i32, i32, i32 }
%struct.AVRational = type { i32, i32 }
%struct.AVPacket = type { %struct.AVBufferRef*, i64, i64, i8*, i32, i32, i32, %struct.AVPacketSideData*, i32, i64, i64, i64 }
%struct.AVBufferRef = type { %struct.AVBuffer*, i8*, i32 }
%struct.AVBuffer = type opaque
%struct.AVPacketSideData = type { i8*, i32, i32 }
%struct.AVBitStreamFilterContext = type { i8*, %struct.AVBitStreamFilter*, %struct.AVCodecParserContext*, %struct.AVBitStreamFilterContext*, i8* }
%struct.AVCodecParserContext = type { i8*, %struct.AVCodecParser*, i64, i64, i64, i32, i32, i64, i64, i64, i64, i32, i32, [4 x i64], [4 x i64], [4 x i64], i32, i64, [4 x i64], i32, i64, i32, i32, i32, [4 x i64], i64, i64, i32, i32, i32, i32, i32, i32, i32, i32, i32 }
%struct.AVCodecParser = type { [5 x i32], i32, i32 (%struct.AVCodecParserContext*)*, i32 (%struct.AVCodecParserContext*, %struct.AVCodecContext*, i8**, i32*, i8*, i32)*, void (%struct.AVCodecParserContext*)*, i32 (%struct.AVCodecContext*, i8*, i32)*, %struct.AVCodecParser* }
%struct.AVCodecContext = type { %struct.AVClass*, i32, i32, %struct.AVCodec*, i32, i32, i8*, %struct.AVCodecInternal*, i8*, i64, i32, i32, i32, i32, i32, i8*, i32, %struct.AVRational, i32, i32, i32, i32, i32, i32, i32, i32, void (%struct.AVCodecContext*, %struct.AVFrame*, i32*, i32, i32, i32)*, i32 (%struct.AVCodecContext*, i32*)*, i32, float, i32, float, i32, i32, float, float, float, float, float, float, float, i32, i32, i32*, %struct.AVRational, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16*, i16*, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i64, i64, i32, i32, i32 (%struct.AVCodecContext*, %struct.AVFrame*, i32)*, i32, float, float, i32, i32, i32, i32, i32, %struct.RcOverride*, i64, i64, float, float, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i64, void (%struct.AVCodecContext*, i8*, i32, i32)*, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i8*, i8*, i32, i32, i32, i32, i32, i64, %struct.AVHWAccel*, i8*, [8 x i64], i32, i32, i32, i32, i32, %struct.AVFrame*, i32, i32, i32, i32, i32 (%struct.AVCodecContext*, i32 (%struct.AVCodecContext*, i8*)*, i8*, i32*, i32, i32)*, i32 (%struct.AVCodecContext*, i32 (%struct.AVCodecContext*, i8*, i32, i32)*, i8*, i32*, i32)*, i32, i32, i32, i32, i32, i32, i8*, i32, i64, i32, i32, %struct.AVRational, i32, %struct.AVRational, %struct.AVCodecDescriptor*, i64, i64, i64, i64, i8*, i32, i32, i32, i32, i16*, i8*, i8*, i32, %struct.AVPacketSideData*, i32, %struct.AVBufferRef*, i32, i32, i64, %struct.AVBufferRef*, i32, i32, i32, i32, i64, i32 }
%struct.AVCodec = type { i8*, i8*, i32, i32, i32, %struct.AVRational*, i32*, i32*, i32*, i64*, i8, %struct.AVClass*, %struct.AVProfile*, i8*, i32, %struct.AVCodec*, i32 (%struct.AVCodecContext*, %struct.AVCodecContext*)*, %struct.AVCodecDefault*, void (%struct.AVCodec*)*, i32 (%struct.AVCodecContext*)*, i32 (%struct.AVCodecContext*, i8*, i32, %struct.AVSubtitle*)*, i32 (%struct.AVCodecContext*, %struct.AVPacket*, %struct.AVFrame*, i32*)*, i32 (%struct.AVCodecContext*, i8*, i32*, %struct.AVPacket*)*, i32 (%struct.AVCodecContext*)*, i32 (%struct.AVCodecContext*, %struct.AVPacket*)*, i32 (%struct.AVCodecContext*, %struct.AVFrame*)*, void (%struct.AVCodecContext*)*, i32, i8*, %struct.AVCodecHWConfigInternal**, i32* }
%struct.AVProfile = type { i32, i8* }
%struct.AVCodecDefault = type opaque
%struct.AVSubtitle = type { i16, i32, i32, i32, %struct.AVSubtitleRect**, i64 }
%struct.AVSubtitleRect = type { i32, i32, i32, i32, i32, %struct.AVPicture, [4 x i8*], [4 x i32], i32, i8*, i8*, i32 }
%struct.AVPicture = type { [8 x i8*], [8 x i32] }
%struct.AVCodecHWConfigInternal = type opaque
%struct.AVCodecInternal = type opaque
%struct.RcOverride = type { i32, i32, i32, float }
%struct.AVHWAccel = type { i8*, i32, i32, i32, i32, i32 (%struct.AVCodecContext*, %struct.AVFrame*)*, i32 (%struct.AVCodecContext*, i8*, i32)*, i32 (%struct.AVCodecContext*, i32, i8*, i32)*, i32 (%struct.AVCodecContext*, i8*, i32)*, i32 (%struct.AVCodecContext*)*, i32, void (%struct.MpegEncContext*)*, i32 (%struct.AVCodecContext*)*, i32 (%struct.AVCodecContext*)*, i32, i32, i32 (%struct.AVCodecContext*, %struct.AVBufferRef*)* }
%struct.MpegEncContext = type opaque
%struct.AVFrame = type { [8 x i8*], [8 x i32], i8**, i32, i32, i32, i32, i32, i32, %struct.AVRational, i64, i64, i64, i32, i32, i32, i8*, [8 x i64], i32, i32, i32, i32, i64, i32, i64, [8 x %struct.AVBufferRef*], %struct.AVBufferRef**, i32, %struct.AVFrameSideData**, i32, i32, i32, i32, i32, i32, i32, i64, i64, i64, %struct.AVDictionary*, i32, i32, i32, i8*, i32, i32, %struct.AVBufferRef*, %struct.AVBufferRef*, %struct.AVBufferRef*, i64, i64, i64, i64, %struct.AVBufferRef* }
%struct.AVFrameSideData = type { i32, i8*, i32, %struct.AVDictionary*, %struct.AVBufferRef* }
%struct.AVDictionary = type opaque
%struct.AVCodecDescriptor = type { i32, i32, i8*, i8*, i32, i8**, %struct.AVProfile* }
%struct.BSFCompatContext = type { %struct.AVBSFContext*, i32 }

@.str = private unnamed_addr constant [2 x i8] c"=\00", align 1
@.str.1 = private unnamed_addr constant [2 x i8] c":\00", align 1
@.str.2 = private unnamed_addr constant [19 x i8] c"private_spspps_buf\00", align 1

; Function Attrs: nounwind ssp uwtable
define hidden %struct.AVBitStreamFilter* @av_bitstream_filter_next(%struct.AVBitStreamFilter* readnone) local_unnamed_addr #0 {
  %2 = alloca i8*, align 8
  %3 = bitcast i8** %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %3) #5
  store i8* null, i8** %2, align 8
  br label %4

4:                                                ; preds = %4, %1
  %5 = phi %struct.AVBitStreamFilter* [ null, %1 ], [ %7, %4 ]
  %6 = icmp eq %struct.AVBitStreamFilter* %5, %0
  %7 = call %struct.AVBitStreamFilter* @av_bsf_iterate(i8** nonnull %2) #5
  br i1 %6, label %8, label %4

8:                                                ; preds = %4
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %3) #5
  ret %struct.AVBitStreamFilter* %7
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

declare %struct.AVBitStreamFilter* @av_bsf_iterate(i8**) local_unnamed_addr #2

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden void @av_register_bitstream_filter(%struct.AVBitStreamFilter* nocapture) local_unnamed_addr #3 {
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden %struct.AVBitStreamFilterContext* @av_bitstream_filter_init(i8*) local_unnamed_addr #0 {
  %2 = alloca %struct.AVBitStreamFilterContext*, align 8
  %3 = alloca %struct.BSFCompatContext*, align 8
  %4 = bitcast %struct.AVBitStreamFilterContext** %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %4) #5
  store %struct.AVBitStreamFilterContext* null, %struct.AVBitStreamFilterContext** %2, align 8
  %5 = bitcast %struct.BSFCompatContext** %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %5) #5
  store %struct.BSFCompatContext* null, %struct.BSFCompatContext** %3, align 8
  %6 = tail call %struct.AVBitStreamFilter* @av_bsf_get_by_name(i8* %0) #5
  %7 = icmp eq %struct.AVBitStreamFilter* %6, null
  br i1 %7, label %23, label %8

8:                                                ; preds = %1
  %9 = tail call noalias i8* @av_mallocz(i64 40) #5
  %10 = bitcast %struct.AVBitStreamFilterContext** %2 to i8**
  store i8* %9, i8** %10, align 8
  %11 = icmp eq i8* %9, null
  %12 = bitcast i8* %9 to %struct.AVBitStreamFilterContext*
  br i1 %11, label %23, label %13

13:                                               ; preds = %8
  %14 = tail call noalias i8* @av_mallocz(i64 16) #5
  %15 = bitcast %struct.BSFCompatContext** %3 to i8**
  store i8* %14, i8** %15, align 8
  %16 = icmp eq i8* %14, null
  br i1 %16, label %22, label %17

17:                                               ; preds = %13
  %18 = ptrtoint i8* %14 to i64
  %19 = getelementptr inbounds i8, i8* %9, i64 8
  %20 = bitcast i8* %19 to %struct.AVBitStreamFilter**
  store %struct.AVBitStreamFilter* %6, %struct.AVBitStreamFilter** %20, align 8
  %21 = bitcast i8* %9 to i64*
  store i64 %18, i64* %21, align 8
  br label %23

22:                                               ; preds = %13
  call void @av_freep(i8* nonnull %5) #5
  call void @av_freep(i8* nonnull %4) #5
  br label %23

23:                                               ; preds = %8, %1, %22, %17
  %24 = phi %struct.AVBitStreamFilterContext* [ %12, %17 ], [ null, %22 ], [ null, %1 ], [ null, %8 ]
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %5) #5
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %4) #5
  ret %struct.AVBitStreamFilterContext* %24
}

declare %struct.AVBitStreamFilter* @av_bsf_get_by_name(i8*) local_unnamed_addr #2

declare noalias i8* @av_mallocz(i64) local_unnamed_addr #2

declare void @av_bsf_free(%struct.AVBSFContext**) local_unnamed_addr #2

declare void @av_freep(i8*) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden void @av_bitstream_filter_close(%struct.AVBitStreamFilterContext*) local_unnamed_addr #0 {
  %2 = icmp eq %struct.AVBitStreamFilterContext* %0, null
  br i1 %2, label %8, label %3

3:                                                ; preds = %1
  %4 = bitcast %struct.AVBitStreamFilterContext* %0 to %struct.BSFCompatContext**
  %5 = load %struct.BSFCompatContext*, %struct.BSFCompatContext** %4, align 8
  %6 = getelementptr inbounds %struct.BSFCompatContext, %struct.BSFCompatContext* %5, i64 0, i32 0
  tail call void @av_bsf_free(%struct.AVBSFContext** %6) #5
  %7 = bitcast %struct.AVBitStreamFilterContext* %0 to i8*
  tail call void @av_freep(i8* nonnull %7) #5
  tail call void @av_free(i8* nonnull %7) #5
  br label %8

8:                                                ; preds = %1, %3
  ret void
}

declare void @av_free(i8*) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden i32 @av_bitstream_filter_filter(%struct.AVBitStreamFilterContext* nocapture readonly, %struct.AVCodecContext*, i8* readonly, i8** nocapture, i32* nocapture, i8*, i32, i32) local_unnamed_addr #0 {
  %9 = alloca %struct.AVPacket, align 8
  %10 = alloca [2 x i8*], align 16
  %11 = bitcast %struct.AVBitStreamFilterContext* %0 to %struct.BSFCompatContext**
  %12 = load %struct.BSFCompatContext*, %struct.BSFCompatContext** %11, align 8
  %13 = bitcast %struct.AVPacket* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 88, i8* nonnull %13) #5
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %13, i8 0, i64 88, i1 false)
  %14 = getelementptr inbounds %struct.BSFCompatContext, %struct.BSFCompatContext* %12, i64 0, i32 0
  %15 = load %struct.AVBSFContext*, %struct.AVBSFContext** %14, align 8
  %16 = icmp eq %struct.AVBSFContext* %15, null
  br i1 %16, label %17, label %66

17:                                               ; preds = %8
  %18 = getelementptr inbounds %struct.AVBitStreamFilterContext, %struct.AVBitStreamFilterContext* %0, i64 0, i32 1
  %19 = load %struct.AVBitStreamFilter*, %struct.AVBitStreamFilter** %18, align 8
  %20 = tail call i32 @av_bsf_alloc(%struct.AVBitStreamFilter* %19, %struct.AVBSFContext** %14) #5
  %21 = icmp slt i32 %20, 0
  br i1 %21, label %137, label %22

22:                                               ; preds = %17
  %23 = load %struct.AVBSFContext*, %struct.AVBSFContext** %14, align 8
  %24 = getelementptr inbounds %struct.AVBSFContext, %struct.AVBSFContext* %23, i64 0, i32 4
  %25 = load %struct.AVCodecParameters*, %struct.AVCodecParameters** %24, align 8
  %26 = tail call i32 @avcodec_parameters_from_context(%struct.AVCodecParameters* %25, %struct.AVCodecContext* %1) #5
  %27 = icmp slt i32 %26, 0
  br i1 %27, label %137, label %28

28:                                               ; preds = %22
  %29 = load %struct.AVBSFContext*, %struct.AVBSFContext** %14, align 8
  %30 = getelementptr inbounds %struct.AVBSFContext, %struct.AVBSFContext* %29, i64 0, i32 6
  %31 = getelementptr inbounds %struct.AVCodecContext, %struct.AVCodecContext* %1, i64 0, i32 17
  %32 = bitcast %struct.AVRational* %31 to i64*
  %33 = bitcast %struct.AVRational* %30 to i64*
  %34 = load i64, i64* %32, align 4
  store i64 %34, i64* %33, align 8
  %35 = getelementptr inbounds %struct.AVBitStreamFilterContext, %struct.AVBitStreamFilterContext* %0, i64 0, i32 4
  %36 = load i8*, i8** %35, align 8
  %37 = icmp eq i8* %36, null
  br i1 %37, label %62, label %38

38:                                               ; preds = %28
  %39 = load %struct.AVBitStreamFilter*, %struct.AVBitStreamFilter** %18, align 8
  %40 = getelementptr inbounds %struct.AVBitStreamFilter, %struct.AVBitStreamFilter* %39, i64 0, i32 2
  %41 = load %struct.AVClass*, %struct.AVClass** %40, align 8
  %42 = icmp eq %struct.AVClass* %41, null
  br i1 %42, label %62, label %43

43:                                               ; preds = %38
  %44 = load %struct.AVBSFContext*, %struct.AVBSFContext** %14, align 8
  %45 = getelementptr inbounds %struct.AVBSFContext, %struct.AVBSFContext* %44, i64 0, i32 3
  %46 = load i8*, i8** %45, align 8
  %47 = tail call %struct.AVOption* @av_opt_next(i8* %46, %struct.AVOption* null) #5
  %48 = bitcast [2 x i8*]* %10 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %48) #5
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %48, i8 0, i64 16, i1 false)
  %49 = icmp eq %struct.AVOption* %47, null
  br i1 %49, label %54, label %50

50:                                               ; preds = %43
  %51 = bitcast %struct.AVOption* %47 to i64*
  %52 = load i64, i64* %51, align 8
  %53 = bitcast [2 x i8*]* %10 to i64*
  store i64 %52, i64* %53, align 16
  br label %54

54:                                               ; preds = %43, %50
  %55 = load %struct.AVBSFContext*, %struct.AVBSFContext** %14, align 8
  %56 = getelementptr inbounds %struct.AVBSFContext, %struct.AVBSFContext* %55, i64 0, i32 3
  %57 = load i8*, i8** %56, align 8
  %58 = load i8*, i8** %35, align 8
  %59 = getelementptr inbounds [2 x i8*], [2 x i8*]* %10, i64 0, i64 0
  %60 = call i32 @av_opt_set_from_string(i8* %57, i8* %58, i8** nonnull %59, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str, i64 0, i64 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)) #5
  %61 = icmp sgt i32 %60, -1
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %48) #5
  br i1 %61, label %62, label %137

62:                                               ; preds = %38, %28, %54
  %63 = load %struct.AVBSFContext*, %struct.AVBSFContext** %14, align 8
  %64 = call i32 @av_bsf_init(%struct.AVBSFContext* %63) #5
  %65 = icmp slt i32 %64, 0
  br i1 %65, label %137, label %66

66:                                               ; preds = %8, %62
  %67 = getelementptr inbounds %struct.AVPacket, %struct.AVPacket* %9, i64 0, i32 3
  store i8* %5, i8** %67, align 8
  %68 = getelementptr inbounds %struct.AVPacket, %struct.AVPacket* %9, i64 0, i32 4
  store i32 %6, i32* %68, align 8
  %69 = load %struct.AVBSFContext*, %struct.AVBSFContext** %14, align 8
  %70 = call i32 @av_bsf_send_packet(%struct.AVBSFContext* %69, %struct.AVPacket* nonnull %9) #5
  %71 = icmp slt i32 %70, 0
  br i1 %71, label %137, label %72

72:                                               ; preds = %66
  store i8* null, i8** %3, align 8
  store i32 0, i32* %4, align 4
  %73 = load %struct.AVBSFContext*, %struct.AVBSFContext** %14, align 8
  %74 = call i32 @av_bsf_receive_packet(%struct.AVBSFContext* %73, %struct.AVPacket* nonnull %9) #5
  switch i32 %74, label %75 [
    i32 -11, label %137
    i32 -541478725, label %137
  ]

75:                                               ; preds = %72
  %76 = icmp slt i32 %74, 0
  br i1 %76, label %137, label %77

77:                                               ; preds = %75
  %78 = load i32, i32* %68, align 8
  %79 = add nsw i32 %78, 64
  %80 = sext i32 %79 to i64
  %81 = call noalias i8* @av_malloc(i64 %80) #5
  store i8* %81, i8** %3, align 8
  %82 = icmp eq i8* %81, null
  br i1 %82, label %83, label %84

83:                                               ; preds = %77
  call void @av_packet_unref(%struct.AVPacket* nonnull %9) #5
  br label %137

84:                                               ; preds = %77
  %85 = load i32, i32* %68, align 8
  store i32 %85, i32* %4, align 4
  %86 = load i8*, i8** %3, align 8
  %87 = load i8*, i8** %67, align 8
  %88 = sext i32 %85 to i64
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %86, i8* align 1 %87, i64 %88, i1 false)
  call void @av_packet_unref(%struct.AVPacket* nonnull %9) #5
  br label %89

89:                                               ; preds = %84, %89
  %90 = load %struct.AVBSFContext*, %struct.AVBSFContext** %14, align 8
  %91 = call i32 @av_bsf_receive_packet(%struct.AVBSFContext* %90, %struct.AVPacket* nonnull %9) #5
  call void @av_packet_unref(%struct.AVPacket* nonnull %9) #5
  %92 = icmp sgt i32 %91, -1
  br i1 %92, label %89, label %93

93:                                               ; preds = %89
  %94 = getelementptr inbounds %struct.BSFCompatContext, %struct.BSFCompatContext* %12, i64 0, i32 1
  %95 = load i32, i32* %94, align 8
  %96 = icmp eq i32 %95, 0
  br i1 %96, label %97, label %137

97:                                               ; preds = %93
  %98 = load %struct.AVBSFContext*, %struct.AVBSFContext** %14, align 8
  %99 = getelementptr inbounds %struct.AVBSFContext, %struct.AVBSFContext* %98, i64 0, i32 5
  %100 = load %struct.AVCodecParameters*, %struct.AVCodecParameters** %99, align 8
  %101 = getelementptr inbounds %struct.AVCodecParameters, %struct.AVCodecParameters* %100, i64 0, i32 4
  %102 = load i32, i32* %101, align 8
  %103 = icmp eq i32 %102, 0
  br i1 %103, label %136, label %104

104:                                              ; preds = %97
  %105 = icmp eq i8* %2, null
  br i1 %105, label %109, label %106

106:                                              ; preds = %104
  %107 = call i8* @strstr(i8* nonnull %2, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.2, i64 0, i64 0)) #6
  %108 = icmp eq i8* %107, null
  br i1 %108, label %109, label %136

109:                                              ; preds = %106, %104
  %110 = getelementptr inbounds %struct.AVCodecContext, %struct.AVCodecContext* %1, i64 0, i32 15
  %111 = bitcast i8** %110 to i8*
  call void @av_freep(i8* %111) #5
  %112 = getelementptr inbounds %struct.AVCodecContext, %struct.AVCodecContext* %1, i64 0, i32 16
  store i32 0, i32* %112, align 8
  %113 = load %struct.AVBSFContext*, %struct.AVBSFContext** %14, align 8
  %114 = getelementptr inbounds %struct.AVBSFContext, %struct.AVBSFContext* %113, i64 0, i32 5
  %115 = load %struct.AVCodecParameters*, %struct.AVCodecParameters** %114, align 8
  %116 = getelementptr inbounds %struct.AVCodecParameters, %struct.AVCodecParameters* %115, i64 0, i32 4
  %117 = load i32, i32* %116, align 8
  %118 = add nsw i32 %117, 64
  %119 = sext i32 %118 to i64
  %120 = call noalias i8* @av_mallocz(i64 %119) #5
  store i8* %120, i8** %110, align 8
  %121 = icmp eq i8* %120, null
  br i1 %121, label %137, label %122

122:                                              ; preds = %109
  %123 = load %struct.AVBSFContext*, %struct.AVBSFContext** %14, align 8
  %124 = getelementptr inbounds %struct.AVBSFContext, %struct.AVBSFContext* %123, i64 0, i32 5
  %125 = load %struct.AVCodecParameters*, %struct.AVCodecParameters** %124, align 8
  %126 = getelementptr inbounds %struct.AVCodecParameters, %struct.AVCodecParameters* %125, i64 0, i32 3
  %127 = load i8*, i8** %126, align 8
  %128 = getelementptr inbounds %struct.AVCodecParameters, %struct.AVCodecParameters* %125, i64 0, i32 4
  %129 = load i32, i32* %128, align 8
  %130 = sext i32 %129 to i64
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 1 %120, i8* align 1 %127, i64 %130, i1 false)
  %131 = load %struct.AVBSFContext*, %struct.AVBSFContext** %14, align 8
  %132 = getelementptr inbounds %struct.AVBSFContext, %struct.AVBSFContext* %131, i64 0, i32 5
  %133 = load %struct.AVCodecParameters*, %struct.AVCodecParameters** %132, align 8
  %134 = getelementptr inbounds %struct.AVCodecParameters, %struct.AVCodecParameters* %133, i64 0, i32 4
  %135 = load i32, i32* %134, align 8
  store i32 %135, i32* %112, align 8
  br label %136

136:                                              ; preds = %106, %97, %122
  store i32 1, i32* %94, align 8
  br label %137

137:                                              ; preds = %136, %93, %109, %75, %72, %72, %66, %62, %22, %17, %54, %83
  %138 = phi i32 [ -12, %83 ], [ %60, %54 ], [ %20, %17 ], [ %26, %22 ], [ %64, %62 ], [ %70, %66 ], [ 0, %72 ], [ 0, %72 ], [ %74, %75 ], [ -12, %109 ], [ 1, %93 ], [ 1, %136 ]
  call void @llvm.lifetime.end.p0i8(i64 88, i8* nonnull %13) #5
  ret i32 %138
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

declare i32 @av_bsf_alloc(%struct.AVBitStreamFilter*, %struct.AVBSFContext**) local_unnamed_addr #2

declare i32 @avcodec_parameters_from_context(%struct.AVCodecParameters*, %struct.AVCodecContext*) local_unnamed_addr #2

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #1

declare %struct.AVOption* @av_opt_next(i8*, %struct.AVOption*) local_unnamed_addr #2

declare i32 @av_opt_set_from_string(i8*, i8*, i8**, i8*, i8*) local_unnamed_addr #2

declare i32 @av_bsf_init(%struct.AVBSFContext*) local_unnamed_addr #2

declare i32 @av_bsf_send_packet(%struct.AVBSFContext*, %struct.AVPacket*) local_unnamed_addr #2

declare i32 @av_bsf_receive_packet(%struct.AVBSFContext*, %struct.AVPacket*) local_unnamed_addr #2

declare noalias i8* @av_malloc(i64) local_unnamed_addr #2

declare void @av_packet_unref(%struct.AVPacket*) local_unnamed_addr #2

; Function Attrs: nofree nounwind readonly
declare i8* @strstr(i8*, i8* nocapture) local_unnamed_addr #4

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="true" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="true" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { norecurse nounwind readnone ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="true" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nofree nounwind readonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="true" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind }
attributes #6 = { nounwind readonly }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
