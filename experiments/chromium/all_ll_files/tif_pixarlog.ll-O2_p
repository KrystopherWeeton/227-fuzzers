; ModuleID = '../../third_party/pdfium/third_party/libtiff/tif_pixarlog.c'
source_filename = "../../third_party/pdfium/third_party/libtiff/tif_pixarlog.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"
module asm ".symver fmemopen, fmemopen@GLIBC_2.2.5"
module asm ".symver glob, glob@GLIBC_2.2.5"
module asm ".symver glob64, glob64@GLIBC_2.2.5"
module asm ".symver quick_exit, quick_exit@GLIBC_2.10"
module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%struct._TIFFField = type { i32, i16, i16, i32, i32, i32, i32, i16, i8, i8, i8*, %struct._TIFFFieldArray* }
%struct._TIFFFieldArray = type { i32, i32, i32, %struct._TIFFField* }
%struct.tiff = type { i8*, i32, i32, i32, i64, i64, i64*, i16, i16, %struct.TIFFDirectory, %struct.TIFFDirectory, %union.anon.0, i16, i32, i16, i32, i64, i64, i16, i64, i32, i32, i64, i32, i32 (%struct.tiff*)*, i32 (%struct.tiff*)*, i32 (%struct.tiff*, i16)*, i32 (%struct.tiff*)*, i32, i32 (%struct.tiff*, i16)*, i32 (%struct.tiff*)*, i32 (%struct.tiff*, i8*, i64, i16)*, i32 (%struct.tiff*, i8*, i64, i16)*, i32 (%struct.tiff*, i8*, i64, i16)*, i32 (%struct.tiff*, i8*, i64, i16)*, i32 (%struct.tiff*, i8*, i64, i16)*, i32 (%struct.tiff*, i8*, i64, i16)*, void (%struct.tiff*)*, i32 (%struct.tiff*, i32)*, void (%struct.tiff*)*, i32 (%struct.tiff*, i32)*, void (%struct.tiff*, i32*, i32*)*, i8*, i64, i64, i8*, i64, i64, i64, i8*, i64, i8*, i64, i32 (i8*, i8**, i64*)*, void (i8*, i8*, i64)*, i8*, i64 (i8*, i8*, i64)*, i64 (i8*, i8*, i64)*, i64 (i8*, i64, i32)*, i32 (i8*)*, i64 (i8*)*, void (%struct.tiff*, i8*, i64)*, %struct._TIFFField**, i64, %struct._TIFFField*, %struct.TIFFTagMethods, %struct.client_info*, %struct._TIFFFieldArray*, i64 }
%struct.TIFFDirectory = type { [4 x i64], i32, i32, i32, i32, i32, i32, i32, i16, i16, i16, i16, i16, i16, i16, i16, i32, i16, i16, double*, double*, float, float, i16, i16, float, float, [2 x i16], [3 x i16*], [2 x i16], i16, i16*, i32, i32, i64*, i64*, i32, %struct.TIFFDirEntry, %struct.TIFFDirEntry, i16, i64*, [2 x i16], i16, [3 x i16*], float*, i32, i8*, i32, %struct.TIFFTagValue*, i8 }
%struct.TIFFDirEntry = type { i16, i16, i64, %union.anon, i8 }
%union.anon = type { i64 }
%struct.TIFFTagValue = type { %struct._TIFFField*, i32, i8* }
%union.anon.0 = type { %struct.TIFFHeaderBig }
%struct.TIFFHeaderBig = type { i16, i16, i16, i16, i64 }
%struct.TIFFTagMethods = type { i32 (%struct.tiff*, i32, %struct.__va_list_tag*)*, i32 (%struct.tiff*, i32, %struct.__va_list_tag*)*, void (%struct.tiff*, %struct._IO_FILE*, i64)* }
%struct.__va_list_tag = type { i32, i32, i8*, i8* }
%struct._IO_FILE = type { i32, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, %struct._IO_marker*, %struct._IO_FILE*, i32, i32, i64, i16, i8, [1 x i8], i8*, i64, %struct._IO_codecvt*, %struct._IO_wide_data*, %struct._IO_FILE*, i8*, i64, i32, [20 x i8] }
%struct._IO_marker = type opaque
%struct._IO_codecvt = type opaque
%struct._IO_wide_data = type opaque
%struct.client_info = type { %struct.client_info*, i8*, i8* }
%struct.PixarLogState = type { %struct.TIFFPredictorState, %struct.z_stream_s, i64, i16*, i16, i32, i32, i32, i32 (%struct.tiff*, i32, %struct.__va_list_tag*)*, i32 (%struct.tiff*, i32, %struct.__va_list_tag*)*, float*, i16*, i8*, i16*, i16*, i16* }
%struct.TIFFPredictorState = type { i32, i64, i64, i32 (%struct.tiff*, i8*, i64, i16)*, i32 (%struct.tiff*, i8*, i64, i16)*, i32 (%struct.tiff*, i8*, i64, i16)*, i32 (%struct.tiff*, i8*, i64)*, i32 (%struct.tiff*, i8*, i64, i16)*, i32 (%struct.tiff*, i8*, i64, i16)*, i32 (%struct.tiff*, i8*, i64, i16)*, i32 (%struct.tiff*, i8*, i64)*, i32 (%struct.tiff*, i32, %struct.__va_list_tag*)*, i32 (%struct.tiff*, i32, %struct.__va_list_tag*)*, void (%struct.tiff*, %struct._IO_FILE*, i64)*, i32 (%struct.tiff*)*, i32 (%struct.tiff*)* }
%struct.z_stream_s = type { i8*, i32, i64, i8*, i32, i64, i8*, %struct.internal_state*, i8* (i8*, i32, i32)*, void (i8*, i8*)*, i8*, i32, i64, i64 }
%struct.internal_state = type opaque

@TIFFInitPixarLog.module = internal constant [17 x i8] c"TIFFInitPixarLog\00", align 16
@pixarlogFields = internal constant [2 x %struct._TIFFField] [%struct._TIFFField { i32 65549, i16 0, i16 0, i32 0, i32 0, i32 13, i32 0, i16 0, i8 0, i8 0, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.2, i32 0, i32 0), %struct._TIFFFieldArray* null }, %struct._TIFFField { i32 65558, i16 0, i16 0, i32 0, i32 0, i32 13, i32 0, i16 0, i8 0, i8 0, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.2, i32 0, i32 0), %struct._TIFFFieldArray* null }], align 16
@.str = private unnamed_addr constant [44 x i8] c"Merging PixarLog codec-specific tags failed\00", align 1
@.str.1 = private unnamed_addr constant [34 x i8] c"No space for PixarLog state block\00", align 1
@.str.2 = private unnamed_addr constant [1 x i8] zeroinitializer, align 1
@PixarLogSetupDecode.module = internal constant [20 x i8] c"PixarLogSetupDecode\00", align 16
@.str.3 = private unnamed_addr constant [81 x i8] c"PixarLog compression can't handle bits depth/data format combination (depth: %d)\00", align 1
@.str.4 = private unnamed_addr constant [7 x i8] c"1.2.11\00", align 1
@.str.5 = private unnamed_addr constant [3 x i8] c"%s\00", align 1
@.str.6 = private unnamed_addr constant [7 x i8] c"(null)\00", align 1
@PixarLogPreDecode.module = internal constant [18 x i8] c"PixarLogPreDecode\00", align 16
@.str.7 = private unnamed_addr constant [40 x i8] c"ZLib cannot deal with buffers this size\00", align 1
@PixarLogDecode.module = internal constant [15 x i8] c"PixarLogDecode\00", align 1
@.str.8 = private unnamed_addr constant [39 x i8] c"%d bit input not supported in PixarLog\00", align 1
@.str.9 = private unnamed_addr constant [37 x i8] c"sp->stream.avail_out > sp->tbuf_size\00", align 1
@.str.10 = private unnamed_addr constant [35 x i8] c"Decoding error at scanline %lu, %s\00", align 1
@.str.11 = private unnamed_addr constant [15 x i8] c"ZLib error: %s\00", align 1
@.str.12 = private unnamed_addr constant [50 x i8] c"Not enough data at scanline %lu (short %lu bytes)\00", align 1
@.str.13 = private unnamed_addr constant [67 x i8] c"stride %lu is not a multiple of sample count, %lu, data truncated.\00", align 1
@.str.14 = private unnamed_addr constant [28 x i8] c"Unsupported bits/sample: %d\00", align 1
@PixarLogSetupEncode.module = internal constant [20 x i8] c"PixarLogSetupEncode\00", align 16
@.str.15 = private unnamed_addr constant [58 x i8] c"PixarLog compression can't handle %d bit linear encodings\00", align 1
@PixarLogPreEncode.module = internal constant [18 x i8] c"PixarLogPreEncode\00", align 16
@PixarLogPostEncode.module = internal constant [19 x i8] c"PixarLogPostEncode\00", align 16
@PixarLogEncode.module = internal constant [15 x i8] c"PixarLogEncode\00", align 1
@.str.16 = private unnamed_addr constant [30 x i8] c"Too many input bytes provided\00", align 1
@.str.17 = private unnamed_addr constant [18 x i8] c"Encoder error: %s\00", align 1
@Fltsize = internal unnamed_addr global float 0.000000e+00, align 4
@LogK1 = internal unnamed_addr global float 0.000000e+00, align 4
@LogK2 = internal unnamed_addr global float 0.000000e+00, align 4
@PixarLogVSetField.module = internal constant [18 x i8] c"PixarLogVSetField\00", align 16
@switch.table.PixarLogVSetField = private unnamed_addr constant [6 x i32] [i32 8, i32 8, i32 16, i32 16, i32 16, i32 32], align 4
@switch.table.PixarLogVSetField.18 = private unnamed_addr constant [6 x i32] [i32 1, i32 1, i32 1, i32 2, i32 1, i32 3], align 4

; Function Attrs: nounwind ssp uwtable
define hidden i32 @TIFFInitPixarLog(%struct.tiff*, i32) local_unnamed_addr #0 {
  %3 = tail call i32 @_TIFFMergeFields(%struct.tiff* %0, %struct._TIFFField* getelementptr inbounds ([2 x %struct._TIFFField], [2 x %struct._TIFFField]* @pixarlogFields, i64 0, i64 0), i32 2) #7
  %4 = icmp eq i32 %3, 0
  br i1 %4, label %5, label %8

5:                                                ; preds = %2
  %6 = getelementptr inbounds %struct.tiff, %struct.tiff* %0, i64 0, i32 55
  %7 = load i8*, i8** %6, align 8
  tail call void (i8*, i8*, i8*, ...) @TIFFErrorExt(i8* %7, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @TIFFInitPixarLog.module, i64 0, i64 0), i8* getelementptr inbounds ([44 x i8], [44 x i8]* @.str, i64 0, i64 0)) #7
  br label %266

8:                                                ; preds = %2
  %9 = tail call i8* @_TIFFmalloc(i64 336) #7
  %10 = getelementptr inbounds %struct.tiff, %struct.tiff* %0, i64 0, i32 42
  store i8* %9, i8** %10, align 8
  %11 = icmp eq i8* %9, null
  br i1 %11, label %263, label %12

12:                                               ; preds = %8
  tail call void @_TIFFmemset(i8* nonnull %9, i32 0, i64 336) #7
  %13 = getelementptr inbounds i8, i8* %9, i64 216
  %14 = bitcast i8* %13 to i32*
  store i32 0, i32* %14, align 8
  %15 = getelementptr inbounds i8, i8* %9, i64 264
  %16 = bitcast i8* %15 to i32*
  store i32 -1, i32* %16, align 8
  %17 = getelementptr inbounds %struct.tiff, %struct.tiff* %0, i64 0, i32 24
  %18 = bitcast i32 (%struct.tiff*)** %17 to <2 x i32 (%struct.tiff*)*>*
  store <2 x i32 (%struct.tiff*)*> <i32 (%struct.tiff*)* @PixarLogFixupTags, i32 (%struct.tiff*)* @PixarLogSetupDecode>, <2 x i32 (%struct.tiff*)*>* %18, align 8
  %19 = getelementptr inbounds %struct.tiff, %struct.tiff* %0, i64 0, i32 26
  store i32 (%struct.tiff*, i16)* @PixarLogPreDecode, i32 (%struct.tiff*, i16)** %19, align 8
  %20 = getelementptr inbounds %struct.tiff, %struct.tiff* %0, i64 0, i32 31
  %21 = getelementptr inbounds %struct.tiff, %struct.tiff* %0, i64 0, i32 33
  %22 = getelementptr inbounds %struct.tiff, %struct.tiff* %0, i64 0, i32 35
  %23 = getelementptr inbounds %struct.tiff, %struct.tiff* %0, i64 0, i32 27
  store i32 (%struct.tiff*)* @PixarLogSetupEncode, i32 (%struct.tiff*)** %23, align 8
  %24 = getelementptr inbounds %struct.tiff, %struct.tiff* %0, i64 0, i32 29
  store i32 (%struct.tiff*, i16)* @PixarLogPreEncode, i32 (%struct.tiff*, i16)** %24, align 8
  %25 = getelementptr inbounds %struct.tiff, %struct.tiff* %0, i64 0, i32 30
  store i32 (%struct.tiff*)* @PixarLogPostEncode, i32 (%struct.tiff*)** %25, align 8
  %26 = bitcast i32 (%struct.tiff*, i8*, i64, i16)** %20 to <2 x i32 (%struct.tiff*, i8*, i64, i16)*>*
  store <2 x i32 (%struct.tiff*, i8*, i64, i16)*> <i32 (%struct.tiff*, i8*, i64, i16)* @PixarLogDecode, i32 (%struct.tiff*, i8*, i64, i16)* @PixarLogEncode>, <2 x i32 (%struct.tiff*, i8*, i64, i16)*>* %26, align 8
  %27 = bitcast i32 (%struct.tiff*, i8*, i64, i16)** %21 to <2 x i32 (%struct.tiff*, i8*, i64, i16)*>*
  store <2 x i32 (%struct.tiff*, i8*, i64, i16)*> <i32 (%struct.tiff*, i8*, i64, i16)* @PixarLogDecode, i32 (%struct.tiff*, i8*, i64, i16)* @PixarLogEncode>, <2 x i32 (%struct.tiff*, i8*, i64, i16)*>* %27, align 8
  %28 = bitcast i32 (%struct.tiff*, i8*, i64, i16)** %22 to <2 x i32 (%struct.tiff*, i8*, i64, i16)*>*
  store <2 x i32 (%struct.tiff*, i8*, i64, i16)*> <i32 (%struct.tiff*, i8*, i64, i16)* @PixarLogDecode, i32 (%struct.tiff*, i8*, i64, i16)* @PixarLogEncode>, <2 x i32 (%struct.tiff*, i8*, i64, i16)*>* %28, align 8
  %29 = getelementptr inbounds %struct.tiff, %struct.tiff* %0, i64 0, i32 37
  store void (%struct.tiff*)* @PixarLogClose, void (%struct.tiff*)** %29, align 8
  %30 = getelementptr inbounds %struct.tiff, %struct.tiff* %0, i64 0, i32 39
  store void (%struct.tiff*)* @PixarLogCleanup, void (%struct.tiff*)** %30, align 8
  %31 = getelementptr inbounds %struct.tiff, %struct.tiff* %0, i64 0, i32 65, i32 1
  %32 = bitcast i32 (%struct.tiff*, i32, %struct.__va_list_tag*)** %31 to i64*
  %33 = load i64, i64* %32, align 8
  %34 = getelementptr inbounds i8, i8* %9, i64 272
  %35 = bitcast i8* %34 to i64*
  store i64 %33, i64* %35, align 8
  store i32 (%struct.tiff*, i32, %struct.__va_list_tag*)* @PixarLogVGetField, i32 (%struct.tiff*, i32, %struct.__va_list_tag*)** %31, align 8
  %36 = getelementptr inbounds %struct.tiff, %struct.tiff* %0, i64 0, i32 65, i32 0
  %37 = bitcast i32 (%struct.tiff*, i32, %struct.__va_list_tag*)** %36 to i64*
  %38 = load i64, i64* %37, align 8
  %39 = getelementptr inbounds i8, i8* %9, i64 280
  %40 = bitcast i8* %39 to i64*
  store i64 %38, i64* %40, align 8
  store i32 (%struct.tiff*, i32, %struct.__va_list_tag*)* @PixarLogVSetField, i32 (%struct.tiff*, i32, %struct.__va_list_tag*)** %36, align 8
  %41 = getelementptr inbounds i8, i8* %9, i64 268
  %42 = bitcast i8* %41 to i32*
  store i32 -1, i32* %42, align 4
  %43 = getelementptr inbounds i8, i8* %9, i64 260
  %44 = bitcast i8* %43 to i32*
  store i32 0, i32* %44, align 4
  %45 = tail call i32 @TIFFPredictorInit(%struct.tiff* %0) #7
  store float 2.500000e+02, float* @LogK1, align 4
  store float 0x40628D38A0000000, float* @LogK2, align 4
  %46 = tail call i8* @_TIFFmalloc(i64 54600) #7
  %47 = bitcast i8* %46 to i16*
  %48 = tail call i8* @_TIFFmalloc(i64 32768) #7
  %49 = bitcast i8* %48 to i16*
  %50 = tail call i8* @_TIFFmalloc(i64 512) #7
  %51 = bitcast i8* %50 to i16*
  %52 = tail call i8* @_TIFFmalloc(i64 8196) #7
  %53 = bitcast i8* %52 to float*
  %54 = tail call i8* @_TIFFmalloc(i64 4098) #7
  %55 = bitcast i8* %54 to i16*
  %56 = tail call i8* @_TIFFmalloc(i64 2049) #7
  %57 = icmp eq i8* %46, null
  %58 = icmp eq i8* %48, null
  %59 = or i1 %57, %58
  %60 = icmp eq i8* %50, null
  %61 = or i1 %59, %60
  %62 = icmp eq i8* %52, null
  %63 = or i1 %61, %62
  %64 = icmp eq i8* %54, null
  %65 = or i1 %63, %64
  %66 = icmp eq i8* %56, null
  %67 = or i1 %65, %66
  br i1 %67, label %68, label %82

68:                                               ; preds = %12
  br i1 %57, label %70, label %69

69:                                               ; preds = %68
  tail call void @_TIFFfree(i8* nonnull %46) #7
  br label %70

70:                                               ; preds = %69, %68
  br i1 %58, label %72, label %71

71:                                               ; preds = %70
  tail call void @_TIFFfree(i8* nonnull %48) #7
  br label %72

72:                                               ; preds = %71, %70
  br i1 %60, label %74, label %73

73:                                               ; preds = %72
  tail call void @_TIFFfree(i8* nonnull %50) #7
  br label %74

74:                                               ; preds = %73, %72
  br i1 %62, label %76, label %75

75:                                               ; preds = %74
  tail call void @_TIFFfree(i8* nonnull %52) #7
  br label %76

76:                                               ; preds = %75, %74
  br i1 %64, label %78, label %77

77:                                               ; preds = %76
  tail call void @_TIFFfree(i8* nonnull %54) #7
  br label %78

78:                                               ; preds = %77, %76
  br i1 %66, label %80, label %79

79:                                               ; preds = %78
  tail call void @_TIFFfree(i8* nonnull %56) #7
  br label %80

80:                                               ; preds = %79, %78
  %81 = getelementptr inbounds i8, i8* %9, i64 288
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %81, i8 0, i64 48, i1 false) #7
  br label %266

82:                                               ; preds = %12, %82
  %83 = phi i64 [ %94, %82 ], [ 0, %12 ]
  %84 = phi i32 [ %95, %82 ], [ 0, %12 ]
  %85 = sitofp i32 %84 to double
  %86 = fmul double %85, 0x3F1334911EDA5B17
  %87 = fptrunc double %86 to float
  %88 = or i64 %83, 1
  %89 = or i32 %84, 1
  %90 = getelementptr inbounds float, float* %53, i64 %83
  store float %87, float* %90, align 4
  %91 = sitofp i32 %89 to double
  %92 = fmul double %91, 0x3F1334911EDA5B17
  %93 = fptrunc double %92 to float
  %94 = add nuw nsw i64 %83, 2
  %95 = add nuw nsw i32 %84, 2
  %96 = getelementptr inbounds float, float* %53, i64 %88
  store float %93, float* %96, align 4
  %97 = icmp eq i64 %94, 250
  br i1 %97, label %98, label %82

98:                                               ; preds = %82, %98
  %99 = phi i64 [ %106, %98 ], [ 250, %82 ]
  %100 = phi i32 [ %108, %98 ], [ 250, %82 ]
  %101 = sitofp i32 %100 to double
  %102 = fmul double %101, 4.000000e-03
  %103 = tail call double @exp(double %102) #7
  %104 = fmul double %103, 0x3F7B993FE00D5376
  %105 = fptrunc double %104 to float
  %106 = add nuw nsw i64 %99, 1
  %107 = getelementptr inbounds float, float* %53, i64 %99
  store float %105, float* %107, align 4
  %108 = add nuw nsw i32 %100, 1
  %109 = icmp eq i64 %106, 2048
  br i1 %109, label %110, label %98

110:                                              ; preds = %98
  %111 = getelementptr inbounds i8, i8* %52, i64 8188
  %112 = bitcast i8* %111 to i32*
  %113 = load i32, i32* %112, align 4
  %114 = getelementptr inbounds i8, i8* %52, i64 8192
  %115 = bitcast i8* %114 to i32*
  store i32 %113, i32* %115, align 4
  %116 = getelementptr i8, i8* %54, i64 4098
  %117 = getelementptr i8, i8* %56, i64 2049
  %118 = getelementptr i8, i8* %52, i64 8196
  %119 = icmp ult i8* %54, %117
  %120 = icmp ult i8* %56, %116
  %121 = and i1 %119, %120
  %122 = icmp ult i8* %54, %118
  %123 = icmp ult i8* %52, %116
  %124 = and i1 %122, %123
  %125 = or i1 %121, %124
  %126 = icmp ult i8* %56, %118
  %127 = icmp ult i8* %52, %117
  %128 = and i1 %126, %127
  %129 = or i1 %125, %128
  br i1 %129, label %155, label %130

130:                                              ; preds = %110, %130
  %131 = phi i64 [ %153, %130 ], [ 0, %110 ]
  %132 = getelementptr inbounds float, float* %53, i64 %131
  %133 = bitcast float* %132 to <4 x float>*
  %134 = load <4 x float>, <4 x float>* %133, align 4, !alias.scope !2
  %135 = fpext <4 x float> %134 to <4 x double>
  %136 = fmul <4 x double> %135, <double 6.553500e+04, double 6.553500e+04, double 6.553500e+04, double 6.553500e+04>
  %137 = fadd <4 x double> %136, <double 5.000000e-01, double 5.000000e-01, double 5.000000e-01, double 5.000000e-01>
  %138 = fcmp oge <4 x double> %137, <double 6.553500e+04, double 6.553500e+04, double 6.553500e+04, double 6.553500e+04>
  %139 = select <4 x i1> %138, <4 x double> <double 6.553500e+04, double 6.553500e+04, double 6.553500e+04, double 6.553500e+04>, <4 x double> %137
  %140 = fptoui <4 x double> %139 to <4 x i16>
  %141 = getelementptr inbounds i16, i16* %55, i64 %131
  %142 = bitcast i16* %141 to <4 x i16>*
  store <4 x i16> %140, <4 x i16>* %142, align 2, !alias.scope !5, !noalias !7
  %143 = bitcast float* %132 to <4 x float>*
  %144 = load <4 x float>, <4 x float>* %143, align 4, !alias.scope !2
  %145 = fpext <4 x float> %144 to <4 x double>
  %146 = fmul <4 x double> %145, <double 2.550000e+02, double 2.550000e+02, double 2.550000e+02, double 2.550000e+02>
  %147 = fadd <4 x double> %146, <double 5.000000e-01, double 5.000000e-01, double 5.000000e-01, double 5.000000e-01>
  %148 = fcmp oge <4 x double> %147, <double 2.550000e+02, double 2.550000e+02, double 2.550000e+02, double 2.550000e+02>
  %149 = select <4 x i1> %148, <4 x double> <double 2.550000e+02, double 2.550000e+02, double 2.550000e+02, double 2.550000e+02>, <4 x double> %147
  %150 = fptoui <4 x double> %149 to <4 x i8>
  %151 = getelementptr inbounds i8, i8* %56, i64 %131
  %152 = bitcast i8* %151 to <4 x i8>*
  store <4 x i8> %150, <4 x i8>* %152, align 1, !alias.scope !9, !noalias !2
  %153 = add i64 %131, 4
  %154 = icmp eq i64 %153, 2048
  br i1 %154, label %155, label %130, !llvm.loop !10

155:                                              ; preds = %130, %110
  %156 = phi i64 [ 0, %110 ], [ 2048, %130 ]
  br label %157

157:                                              ; preds = %155, %157
  %158 = phi i64 [ %176, %157 ], [ %156, %155 ]
  %159 = getelementptr inbounds float, float* %53, i64 %158
  %160 = load float, float* %159, align 4
  %161 = fpext float %160 to double
  %162 = fmul double %161, 6.553500e+04
  %163 = fadd double %162, 5.000000e-01
  %164 = fcmp oge double %163, 6.553500e+04
  %165 = select i1 %164, double 6.553500e+04, double %163
  %166 = fptoui double %165 to i16
  %167 = getelementptr inbounds i16, i16* %55, i64 %158
  store i16 %166, i16* %167, align 2
  %168 = load float, float* %159, align 4
  %169 = fpext float %168 to double
  %170 = fmul double %169, 2.550000e+02
  %171 = fadd double %170, 5.000000e-01
  %172 = fcmp oge double %171, 2.550000e+02
  %173 = select i1 %172, double 2.550000e+02, double %171
  %174 = fptoui double %173 to i8
  %175 = getelementptr inbounds i8, i8* %56, i64 %158
  store i8 %174, i8* %175, align 1
  %176 = add nuw nsw i64 %158, 1
  %177 = icmp eq i64 %176, 2049
  br i1 %177, label %178, label %157, !llvm.loop !12

178:                                              ; preds = %157, %178
  %179 = phi i64 [ %198, %178 ], [ 0, %157 ]
  %180 = phi i32 [ %195, %178 ], [ 0, %157 ]
  %181 = trunc i64 %179 to i32
  %182 = sitofp i32 %181 to double
  %183 = fmul double %182, 0x3F1334911EDA5B17
  %184 = fmul double %183, %183
  %185 = sext i32 %180 to i64
  %186 = getelementptr inbounds float, float* %53, i64 %185
  %187 = load float, float* %186, align 4
  %188 = add nsw i32 %180, 1
  %189 = sext i32 %188 to i64
  %190 = getelementptr inbounds float, float* %53, i64 %189
  %191 = load float, float* %190, align 4
  %192 = fmul float %187, %191
  %193 = fpext float %192 to double
  %194 = fcmp ogt double %184, %193
  %195 = select i1 %194, i32 %188, i32 %180
  %196 = trunc i32 %195 to i16
  %197 = getelementptr inbounds i16, i16* %47, i64 %179
  store i16 %196, i16* %197, align 2
  %198 = add nuw nsw i64 %179, 1
  %199 = icmp eq i64 %198, 27300
  br i1 %199, label %200, label %178

200:                                              ; preds = %178, %220
  %201 = phi i64 [ %223, %220 ], [ 0, %178 ]
  %202 = phi i64 [ %213, %220 ], [ 0, %178 ]
  %203 = trunc i64 %201 to i32
  %204 = sitofp i32 %203 to double
  %205 = fdiv double %204, 1.638300e+04
  %206 = fmul double %205, %205
  %207 = shl i64 %202, 32
  %208 = ashr exact i64 %207, 32
  %209 = getelementptr inbounds float, float* %53, i64 %208
  %210 = load float, float* %209, align 4
  br label %211

211:                                              ; preds = %211, %200
  %212 = phi float [ %210, %200 ], [ %216, %211 ]
  %213 = phi i64 [ %208, %200 ], [ %214, %211 ]
  %214 = add nsw i64 %213, 1
  %215 = getelementptr inbounds float, float* %53, i64 %214
  %216 = load float, float* %215, align 4
  %217 = fmul float %212, %216
  %218 = fpext float %217 to double
  %219 = fcmp ogt double %206, %218
  br i1 %219, label %211, label %220

220:                                              ; preds = %211
  %221 = trunc i64 %213 to i16
  %222 = getelementptr inbounds i16, i16* %49, i64 %201
  store i16 %221, i16* %222, align 2
  %223 = add nuw nsw i64 %201, 1
  %224 = icmp eq i64 %223, 16384
  br i1 %224, label %225, label %200

225:                                              ; preds = %220, %245
  %226 = phi i64 [ %248, %245 ], [ 0, %220 ]
  %227 = phi i64 [ %238, %245 ], [ 0, %220 ]
  %228 = trunc i64 %226 to i32
  %229 = sitofp i32 %228 to double
  %230 = fdiv double %229, 2.550000e+02
  %231 = fmul double %230, %230
  %232 = shl i64 %227, 32
  %233 = ashr exact i64 %232, 32
  %234 = getelementptr inbounds float, float* %53, i64 %233
  %235 = load float, float* %234, align 4
  br label %236

236:                                              ; preds = %236, %225
  %237 = phi float [ %235, %225 ], [ %241, %236 ]
  %238 = phi i64 [ %233, %225 ], [ %239, %236 ]
  %239 = add nsw i64 %238, 1
  %240 = getelementptr inbounds float, float* %53, i64 %239
  %241 = load float, float* %240, align 4
  %242 = fmul float %237, %241
  %243 = fpext float %242 to double
  %244 = fcmp ogt double %231, %243
  br i1 %244, label %236, label %245

245:                                              ; preds = %236
  %246 = trunc i64 %238 to i16
  %247 = getelementptr inbounds i16, i16* %51, i64 %226
  store i16 %246, i16* %247, align 2
  %248 = add nuw nsw i64 %226, 1
  %249 = icmp eq i64 %248, 256
  br i1 %249, label %250, label %225

250:                                              ; preds = %245
  store float 1.365000e+04, float* @Fltsize, align 4
  %251 = getelementptr inbounds i8, i8* %9, i64 288
  %252 = bitcast i8* %251 to i8**
  store i8* %52, i8** %252, align 8
  %253 = getelementptr inbounds i8, i8* %9, i64 296
  %254 = bitcast i8* %253 to i8**
  store i8* %54, i8** %254, align 8
  %255 = getelementptr inbounds i8, i8* %9, i64 304
  %256 = bitcast i8* %255 to i8**
  store i8* %56, i8** %256, align 8
  %257 = getelementptr inbounds i8, i8* %9, i64 312
  %258 = bitcast i8* %257 to i8**
  store i8* %46, i8** %258, align 8
  %259 = getelementptr inbounds i8, i8* %9, i64 320
  %260 = bitcast i8* %259 to i8**
  store i8* %48, i8** %260, align 8
  %261 = getelementptr inbounds i8, i8* %9, i64 328
  %262 = bitcast i8* %261 to i8**
  store i8* %50, i8** %262, align 8
  br label %266

263:                                              ; preds = %8
  %264 = getelementptr inbounds %struct.tiff, %struct.tiff* %0, i64 0, i32 55
  %265 = load i8*, i8** %264, align 8
  tail call void (i8*, i8*, i8*, ...) @TIFFErrorExt(i8* %265, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @TIFFInitPixarLog.module, i64 0, i64 0), i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str.1, i64 0, i64 0)) #7
  br label %266

266:                                              ; preds = %250, %80, %263, %5
  %267 = phi i32 [ 0, %263 ], [ 0, %5 ], [ 1, %80 ], [ 1, %250 ]
  ret i32 %267
}

declare i32 @_TIFFMergeFields(%struct.tiff*, %struct._TIFFField*, i32) local_unnamed_addr #1

declare void @TIFFErrorExt(i8*, i8*, i8*, ...) local_unnamed_addr #1

declare i8* @_TIFFmalloc(i64) local_unnamed_addr #1

declare void @_TIFFmemset(i8*, i32, i64) local_unnamed_addr #1

; Function Attrs: norecurse nounwind readnone ssp uwtable
define internal i32 @PixarLogFixupTags(%struct.tiff* nocapture readnone) #2 {
  ret i32 1
}

; Function Attrs: nounwind ssp uwtable
define internal i32 @PixarLogSetupDecode(%struct.tiff* nocapture) #0 {
  %2 = getelementptr inbounds %struct.tiff, %struct.tiff* %0, i64 0, i32 9
  %3 = getelementptr inbounds %struct.tiff, %struct.tiff* %0, i64 0, i32 42
  %4 = bitcast i8** %3 to %struct.PixarLogState**
  %5 = load %struct.PixarLogState*, %struct.PixarLogState** %4, align 8
  %6 = getelementptr inbounds %struct.PixarLogState, %struct.PixarLogState* %5, i64 0, i32 5
  %7 = load i32, i32* %6, align 4
  %8 = and i32 %7, 1
  %9 = icmp eq i32 %8, 0
  br i1 %9, label %10, label %83

10:                                               ; preds = %1
  %11 = getelementptr inbounds %struct.tiff, %struct.tiff* %0, i64 0, i32 9, i32 16
  %12 = load i32, i32* %11, align 4
  %13 = getelementptr inbounds %struct.tiff, %struct.tiff* %0, i64 0, i32 9, i32 2
  %14 = load i32, i32* %13, align 4
  %15 = icmp ugt i32 %12, %14
  %16 = select i1 %15, i32 %14, i32 %12
  %17 = getelementptr inbounds %struct.tiff, %struct.tiff* %0, i64 0, i32 61
  store void (%struct.tiff*, i8*, i64)* @_TIFFNoPostDecode, void (%struct.tiff*, i8*, i64)** %17, align 8
  %18 = getelementptr inbounds %struct.tiff, %struct.tiff* %0, i64 0, i32 9, i32 24
  %19 = load i16, i16* %18, align 2
  %20 = icmp eq i16 %19, 1
  br i1 %20, label %21, label %24

21:                                               ; preds = %10
  %22 = getelementptr inbounds %struct.tiff, %struct.tiff* %0, i64 0, i32 9, i32 15
  %23 = load i16, i16* %22, align 2
  br label %24

24:                                               ; preds = %10, %21
  %25 = phi i16 [ %23, %21 ], [ 1, %10 ]
  %26 = getelementptr inbounds %struct.PixarLogState, %struct.PixarLogState* %5, i64 0, i32 4
  store i16 %25, i16* %26, align 8
  %27 = zext i16 %25 to i64
  %28 = getelementptr inbounds %struct.tiff, %struct.tiff* %0, i64 0, i32 9, i32 1
  %29 = load i32, i32* %28, align 8
  %30 = zext i32 %29 to i64
  %31 = tail call i64 @_TIFFMultiplySSize(%struct.tiff* null, i64 %27, i64 %30, i8* null) #7
  %32 = zext i32 %16 to i64
  %33 = tail call i64 @_TIFFMultiplySSize(%struct.tiff* null, i64 %31, i64 %32, i8* null) #7
  %34 = tail call i64 @_TIFFMultiplySSize(%struct.tiff* null, i64 %33, i64 2, i8* null) #7
  %35 = load i16, i16* %26, align 8
  %36 = zext i16 %35 to i64
  %37 = shl nuw nsw i64 %36, 1
  %38 = icmp eq i64 %34, 0
  %39 = icmp eq i16 %35, 0
  %40 = or i1 %38, %39
  %41 = xor i64 %37, 9223372036854775807
  %42 = icmp slt i64 %41, %34
  %43 = or i1 %40, %42
  %44 = add nsw i64 %37, %34
  %45 = icmp eq i64 %44, 0
  %46 = or i1 %45, %43
  br i1 %46, label %83, label %47

47:                                               ; preds = %24
  %48 = tail call i8* @_TIFFmalloc(i64 %44) #7
  %49 = getelementptr inbounds %struct.PixarLogState, %struct.PixarLogState* %5, i64 0, i32 3
  %50 = bitcast i16** %49 to i8**
  store i8* %48, i8** %50, align 8
  %51 = icmp eq i8* %48, null
  br i1 %51, label %83, label %52

52:                                               ; preds = %47
  %53 = getelementptr inbounds %struct.PixarLogState, %struct.PixarLogState* %5, i64 0, i32 2
  store i64 %44, i64* %53, align 8
  %54 = getelementptr inbounds %struct.PixarLogState, %struct.PixarLogState* %5, i64 0, i32 6
  %55 = load i32, i32* %54, align 8
  %56 = icmp eq i32 %55, -1
  br i1 %56, label %57, label %67

57:                                               ; preds = %52
  %58 = tail call fastcc i32 @PixarLogGuessDataFmt(%struct.TIFFDirectory* %2)
  store i32 %58, i32* %54, align 8
  %59 = icmp eq i32 %58, -1
  br i1 %59, label %60, label %67

60:                                               ; preds = %57
  tail call void @_TIFFfree(i8* nonnull %48) #7
  %61 = getelementptr inbounds %struct.tiff, %struct.tiff* %0, i64 0, i32 55
  %62 = bitcast i64* %53 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %62, i8 0, i64 16, i1 false)
  %63 = load i8*, i8** %61, align 8
  %64 = getelementptr inbounds %struct.tiff, %struct.tiff* %0, i64 0, i32 9, i32 8
  %65 = load i16, i16* %64, align 4
  %66 = zext i16 %65 to i32
  tail call void (i8*, i8*, i8*, ...) @TIFFErrorExt(i8* %63, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @PixarLogSetupDecode.module, i64 0, i64 0), i8* getelementptr inbounds ([81 x i8], [81 x i8]* @.str.3, i64 0, i64 0), i32 %66) #7
  br label %83

67:                                               ; preds = %52, %57
  %68 = getelementptr inbounds %struct.PixarLogState, %struct.PixarLogState* %5, i64 0, i32 1
  %69 = tail call i32 @Cr_z_inflateInit_(%struct.z_stream_s* %68, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.4, i64 0, i64 0), i32 112) #7
  %70 = icmp eq i32 %69, 0
  br i1 %70, label %80, label %71

71:                                               ; preds = %67
  %72 = load i8*, i8** %50, align 8
  tail call void @_TIFFfree(i8* %72) #7
  %73 = getelementptr inbounds %struct.tiff, %struct.tiff* %0, i64 0, i32 55
  %74 = bitcast i64* %53 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %74, i8 0, i64 16, i1 false)
  %75 = load i8*, i8** %73, align 8
  %76 = getelementptr inbounds %struct.PixarLogState, %struct.PixarLogState* %5, i64 0, i32 1, i32 6
  %77 = load i8*, i8** %76, align 8
  %78 = icmp eq i8* %77, null
  %79 = select i1 %78, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.6, i64 0, i64 0), i8* %77
  tail call void (i8*, i8*, i8*, ...) @TIFFErrorExt(i8* %75, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @PixarLogSetupDecode.module, i64 0, i64 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.5, i64 0, i64 0), i8* %79) #7
  br label %83

80:                                               ; preds = %67
  %81 = load i32, i32* %6, align 4
  %82 = or i32 %81, 1
  store i32 %82, i32* %6, align 4
  br label %83

83:                                               ; preds = %47, %24, %1, %80, %71, %60
  %84 = phi i32 [ 0, %60 ], [ 0, %71 ], [ 1, %80 ], [ 1, %1 ], [ 0, %24 ], [ 0, %47 ]
  ret i32 %84
}

; Function Attrs: nounwind ssp uwtable
define internal i32 @PixarLogPreDecode(%struct.tiff* nocapture readonly, i16 zeroext) #0 {
  %3 = getelementptr inbounds %struct.tiff, %struct.tiff* %0, i64 0, i32 42
  %4 = bitcast i8** %3 to %struct.PixarLogState**
  %5 = load %struct.PixarLogState*, %struct.PixarLogState** %4, align 8
  %6 = getelementptr inbounds %struct.tiff, %struct.tiff* %0, i64 0, i32 45
  %7 = bitcast i8** %6 to i64*
  %8 = load i64, i64* %7, align 8
  %9 = getelementptr inbounds %struct.PixarLogState, %struct.PixarLogState* %5, i64 0, i32 1
  %10 = bitcast %struct.z_stream_s* %9 to i64*
  store i64 %8, i64* %10, align 8
  %11 = getelementptr inbounds %struct.tiff, %struct.tiff* %0, i64 0, i32 50
  %12 = load i64, i64* %11, align 8
  %13 = trunc i64 %12 to i32
  %14 = getelementptr inbounds %struct.PixarLogState, %struct.PixarLogState* %5, i64 0, i32 1, i32 1
  store i32 %13, i32* %14, align 8
  %15 = and i64 %12, 4294967295
  %16 = load i64, i64* %11, align 8
  %17 = icmp eq i64 %15, %16
  br i1 %17, label %21, label %18

18:                                               ; preds = %2
  %19 = getelementptr inbounds %struct.tiff, %struct.tiff* %0, i64 0, i32 55
  %20 = load i8*, i8** %19, align 8
  tail call void (i8*, i8*, i8*, ...) @TIFFErrorExt(i8* %20, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @PixarLogPreDecode.module, i64 0, i64 0), i8* getelementptr inbounds ([40 x i8], [40 x i8]* @.str.7, i64 0, i64 0)) #7
  br label %25

21:                                               ; preds = %2
  %22 = tail call i32 @Cr_z_inflateReset(%struct.z_stream_s* %9) #7
  %23 = icmp eq i32 %22, 0
  %24 = zext i1 %23 to i32
  br label %25

25:                                               ; preds = %21, %18
  %26 = phi i32 [ 0, %18 ], [ %24, %21 ]
  ret i32 %26
}

; Function Attrs: nounwind ssp uwtable
define internal i32 @PixarLogDecode(%struct.tiff* nocapture, i8*, i64, i16 zeroext) #0 {
  %5 = getelementptr inbounds %struct.tiff, %struct.tiff* %0, i64 0, i32 42
  %6 = bitcast i8** %5 to %struct.PixarLogState**
  %7 = load %struct.PixarLogState*, %struct.PixarLogState** %6, align 8
  %8 = getelementptr inbounds %struct.PixarLogState, %struct.PixarLogState* %7, i64 0, i32 6
  %9 = load i32, i32* %8, align 8
  switch i32 %9, label %14 [
    i32 5, label %10
    i32 4, label %12
    i32 3, label %12
    i32 2, label %12
    i32 0, label %20
    i32 1, label %20
  ]

10:                                               ; preds = %4
  %11 = lshr i64 %2, 2
  br label %20

12:                                               ; preds = %4, %4, %4
  %13 = lshr i64 %2, 1
  br label %20

14:                                               ; preds = %4
  %15 = getelementptr inbounds %struct.tiff, %struct.tiff* %0, i64 0, i32 55
  %16 = load i8*, i8** %15, align 8
  %17 = getelementptr inbounds %struct.tiff, %struct.tiff* %0, i64 0, i32 9, i32 8
  %18 = load i16, i16* %17, align 4
  %19 = zext i16 %18 to i32
  tail call void (i8*, i8*, i8*, ...) @TIFFErrorExt(i8* %16, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @PixarLogDecode.module, i64 0, i64 0), i8* getelementptr inbounds ([39 x i8], [39 x i8]* @.str.8, i64 0, i64 0), i32 %19) #7
  br label %1481

20:                                               ; preds = %4, %4, %12, %10
  %21 = phi i64 [ %13, %12 ], [ %11, %10 ], [ %2, %4 ], [ %2, %4 ]
  %22 = getelementptr inbounds %struct.PixarLogState, %struct.PixarLogState* %7, i64 0, i32 4
  %23 = load i16, i16* %22, align 8
  %24 = zext i16 %23 to i32
  %25 = getelementptr inbounds %struct.tiff, %struct.tiff* %0, i64 0, i32 9, i32 1
  %26 = load i32, i32* %25, align 8
  %27 = mul i32 %26, %24
  %28 = getelementptr inbounds %struct.tiff, %struct.tiff* %0, i64 0, i32 49
  %29 = bitcast i8** %28 to i64*
  %30 = load i64, i64* %29, align 8
  %31 = getelementptr inbounds %struct.PixarLogState, %struct.PixarLogState* %7, i64 0, i32 1
  %32 = bitcast %struct.z_stream_s* %31 to i64*
  store i64 %30, i64* %32, align 8
  %33 = getelementptr inbounds %struct.tiff, %struct.tiff* %0, i64 0, i32 50
  %34 = load i64, i64* %33, align 8
  %35 = trunc i64 %34 to i32
  %36 = getelementptr inbounds %struct.PixarLogState, %struct.PixarLogState* %7, i64 0, i32 1, i32 1
  store i32 %35, i32* %36, align 8
  %37 = getelementptr inbounds %struct.PixarLogState, %struct.PixarLogState* %7, i64 0, i32 3
  %38 = bitcast i16** %37 to i64*
  %39 = load i64, i64* %38, align 8
  %40 = getelementptr inbounds %struct.PixarLogState, %struct.PixarLogState* %7, i64 0, i32 1, i32 3
  %41 = bitcast i8** %40 to i64*
  store i64 %39, i64* %41, align 8
  %42 = shl i64 %21, 1
  %43 = trunc i64 %42 to i32
  %44 = getelementptr inbounds %struct.PixarLogState, %struct.PixarLogState* %7, i64 0, i32 1, i32 4
  store i32 %43, i32* %44, align 8
  %45 = and i64 %42, 4294967294
  %46 = icmp eq i64 %45, %42
  br i1 %46, label %50, label %47

47:                                               ; preds = %20
  %48 = getelementptr inbounds %struct.tiff, %struct.tiff* %0, i64 0, i32 55
  %49 = load i8*, i8** %48, align 8
  tail call void (i8*, i8*, i8*, ...) @TIFFErrorExt(i8* %49, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @PixarLogDecode.module, i64 0, i64 0), i8* getelementptr inbounds ([40 x i8], [40 x i8]* @.str.7, i64 0, i64 0)) #7
  br label %1481

50:                                               ; preds = %20
  %51 = getelementptr inbounds %struct.PixarLogState, %struct.PixarLogState* %7, i64 0, i32 2
  %52 = load i64, i64* %51, align 8
  %53 = icmp slt i64 %52, 0
  %54 = trunc i64 %52 to i32
  %55 = icmp ugt i32 %43, %54
  %56 = or i1 %53, %55
  br i1 %56, label %57, label %60

57:                                               ; preds = %50
  %58 = getelementptr inbounds %struct.tiff, %struct.tiff* %0, i64 0, i32 55
  %59 = load i8*, i8** %58, align 8
  tail call void (i8*, i8*, i8*, ...) @TIFFErrorExt(i8* %59, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @PixarLogDecode.module, i64 0, i64 0), i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str.9, i64 0, i64 0)) #7
  br label %1481

60:                                               ; preds = %50, %79
  %61 = tail call i32 @Cr_z_inflate(%struct.z_stream_s* %31, i32 1) #7
  switch i32 %61, label %72 [
    i32 1, label %82
    i32 -3, label %62
    i32 0, label %79
  ]

62:                                               ; preds = %60
  %63 = getelementptr inbounds %struct.tiff, %struct.tiff* %0, i64 0, i32 55
  %64 = load i8*, i8** %63, align 8
  %65 = getelementptr inbounds %struct.tiff, %struct.tiff* %0, i64 0, i32 13
  %66 = load i32, i32* %65, align 4
  %67 = zext i32 %66 to i64
  %68 = getelementptr inbounds %struct.PixarLogState, %struct.PixarLogState* %7, i64 0, i32 1, i32 6
  %69 = load i8*, i8** %68, align 8
  %70 = icmp eq i8* %69, null
  %71 = select i1 %70, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.6, i64 0, i64 0), i8* %69
  tail call void (i8*, i8*, i8*, ...) @TIFFErrorExt(i8* %64, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @PixarLogDecode.module, i64 0, i64 0), i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.10, i64 0, i64 0), i64 %67, i8* %71) #7
  br label %1481

72:                                               ; preds = %60
  %73 = getelementptr inbounds %struct.tiff, %struct.tiff* %0, i64 0, i32 55
  %74 = load i8*, i8** %73, align 8
  %75 = getelementptr inbounds %struct.PixarLogState, %struct.PixarLogState* %7, i64 0, i32 1, i32 6
  %76 = load i8*, i8** %75, align 8
  %77 = icmp eq i8* %76, null
  %78 = select i1 %77, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.6, i64 0, i64 0), i8* %76
  tail call void (i8*, i8*, i8*, ...) @TIFFErrorExt(i8* %74, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @PixarLogDecode.module, i64 0, i64 0), i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.11, i64 0, i64 0), i8* %78) #7
  br label %1481

79:                                               ; preds = %60
  %80 = load i32, i32* %44, align 8
  %81 = icmp eq i32 %80, 0
  br i1 %81, label %92, label %60

82:                                               ; preds = %60
  %83 = load i32, i32* %44, align 8
  %84 = icmp eq i32 %83, 0
  br i1 %84, label %92, label %85

85:                                               ; preds = %82
  %86 = getelementptr inbounds %struct.tiff, %struct.tiff* %0, i64 0, i32 55
  %87 = load i8*, i8** %86, align 8
  %88 = getelementptr inbounds %struct.tiff, %struct.tiff* %0, i64 0, i32 13
  %89 = load i32, i32* %88, align 4
  %90 = zext i32 %89 to i64
  %91 = zext i32 %83 to i64
  tail call void (i8*, i8*, i8*, ...) @TIFFErrorExt(i8* %87, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @PixarLogDecode.module, i64 0, i64 0), i8* getelementptr inbounds ([50 x i8], [50 x i8]* @.str.12, i64 0, i64 0), i64 %90, i64 %91) #7
  br label %1481

92:                                               ; preds = %79, %82
  %93 = load i64, i64* %32, align 8
  store i64 %93, i64* %29, align 8
  %94 = load i32, i32* %36, align 8
  %95 = zext i32 %94 to i64
  store i64 %95, i64* %33, align 8
  %96 = load i16*, i16** %37, align 8
  %97 = getelementptr inbounds %struct.tiff, %struct.tiff* %0, i64 0, i32 3
  %98 = load i32, i32* %97, align 8
  %99 = trunc i32 %98 to i8
  %100 = icmp slt i8 %99, 0
  br i1 %100, label %101, label %102

101:                                              ; preds = %92
  tail call void @TIFFSwabArrayOfShort(i16* %96, i64 %21) #7
  br label %102

102:                                              ; preds = %101, %92
  %103 = sext i32 %27 to i64
  %104 = srem i64 %21, %103
  %105 = icmp eq i64 %104, 0
  br i1 %105, label %110, label %106

106:                                              ; preds = %102
  %107 = getelementptr inbounds %struct.tiff, %struct.tiff* %0, i64 0, i32 55
  %108 = load i8*, i8** %107, align 8
  tail call void (i8*, i8*, i8*, ...) @TIFFWarningExt(i8* %108, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @PixarLogDecode.module, i64 0, i64 0), i8* getelementptr inbounds ([67 x i8], [67 x i8]* @.str.13, i64 0, i64 0), i64 %103, i64 %21) #7
  %109 = sub nsw i64 %21, %104
  br label %110

110:                                              ; preds = %102, %106
  %111 = phi i64 [ %109, %106 ], [ %21, %102 ]
  %112 = icmp sgt i64 %111, 0
  br i1 %112, label %113, label %1481

113:                                              ; preds = %110
  %114 = getelementptr inbounds %struct.PixarLogState, %struct.PixarLogState* %7, i64 0, i32 12
  %115 = add nsw i32 %27, -4
  %116 = icmp sgt i32 %115, 0
  %117 = add nsw i32 %27, -3
  %118 = icmp sgt i32 %117, 0
  %119 = shl nsw i64 %103, 1
  %120 = getelementptr inbounds %struct.PixarLogState, %struct.PixarLogState* %7, i64 0, i32 10
  %121 = getelementptr inbounds %struct.PixarLogState, %struct.PixarLogState* %7, i64 0, i32 11
  %122 = shl nsw i64 %103, 2
  br label %123

123:                                              ; preds = %113, %1474
  %124 = phi i64 [ 0, %113 ], [ %1480, %1474 ]
  %125 = phi i16* [ %96, %113 ], [ %1478, %1474 ]
  %126 = phi i64 [ 0, %113 ], [ %1477, %1474 ]
  %127 = phi i8* [ %1, %113 ], [ %1476, %1474 ]
  %128 = mul i64 %124, %103
  %129 = getelementptr i16, i16* %96, i64 %128
  %130 = bitcast i16* %129 to i8*
  %131 = add i64 %128, 1
  %132 = getelementptr i16, i16* %96, i64 %131
  %133 = load i32, i32* %8, align 8
  switch i32 %133, label %1468 [
    i32 5, label %134
    i32 4, label %338
    i32 3, label %530
    i32 2, label %770
    i32 0, label %1109
    i32 1, label %1295
  ]

134:                                              ; preds = %123
  %135 = load i16, i16* %22, align 8
  %136 = zext i16 %135 to i32
  %137 = bitcast i8* %127 to float*
  %138 = load float*, float** %120, align 8
  %139 = icmp slt i32 %27, %136
  br i1 %139, label %1474, label %140

140:                                              ; preds = %134
  switch i16 %135, label %292 [
    i16 3, label %141
    i16 4, label %213
  ]

141:                                              ; preds = %140
  %142 = load i16, i16* %125, align 2
  %143 = and i16 %142, 2047
  %144 = zext i16 %143 to i64
  %145 = getelementptr inbounds float, float* %138, i64 %144
  %146 = bitcast float* %145 to i32*
  %147 = load i32, i32* %146, align 4
  %148 = getelementptr inbounds i16, i16* %125, i64 1
  %149 = load i16, i16* %148, align 2
  %150 = and i16 %149, 2047
  %151 = zext i16 %150 to i64
  %152 = getelementptr inbounds float, float* %138, i64 %151
  %153 = bitcast float* %152 to i32*
  %154 = load i32, i32* %153, align 4
  %155 = getelementptr inbounds i16, i16* %125, i64 2
  %156 = load i16, i16* %155, align 2
  %157 = and i16 %156, 2047
  %158 = zext i16 %157 to i64
  %159 = getelementptr inbounds float, float* %138, i64 %158
  %160 = bitcast float* %159 to i32*
  %161 = load i32, i32* %160, align 4
  %162 = bitcast i8* %127 to i32*
  store i32 %147, i32* %162, align 4
  %163 = getelementptr inbounds i8, i8* %127, i64 4
  %164 = bitcast i8* %163 to i32*
  store i32 %154, i32* %164, align 4
  %165 = getelementptr inbounds i8, i8* %127, i64 8
  %166 = bitcast i8* %165 to i32*
  store i32 %161, i32* %166, align 4
  br i1 %118, label %167, label %1474

167:                                              ; preds = %141
  %168 = zext i16 %157 to i32
  %169 = zext i16 %150 to i32
  %170 = zext i16 %143 to i32
  br label %171

171:                                              ; preds = %171, %167
  %172 = phi i32 [ %211, %171 ], [ %117, %167 ]
  %173 = phi i32 [ %200, %171 ], [ %168, %167 ]
  %174 = phi i32 [ %191, %171 ], [ %169, %167 ]
  %175 = phi i32 [ %182, %171 ], [ %170, %167 ]
  %176 = phi i16* [ %178, %171 ], [ %125, %167 ]
  %177 = phi float* [ %179, %171 ], [ %137, %167 ]
  %178 = getelementptr inbounds i16, i16* %176, i64 3
  %179 = getelementptr inbounds float, float* %177, i64 3
  %180 = load i16, i16* %178, align 2
  %181 = zext i16 %180 to i32
  %182 = add i32 %175, %181
  %183 = and i32 %182, 2047
  %184 = zext i32 %183 to i64
  %185 = getelementptr inbounds float, float* %138, i64 %184
  %186 = bitcast float* %185 to i32*
  %187 = load i32, i32* %186, align 4
  %188 = getelementptr inbounds i16, i16* %176, i64 4
  %189 = load i16, i16* %188, align 2
  %190 = zext i16 %189 to i32
  %191 = add i32 %174, %190
  %192 = and i32 %191, 2047
  %193 = zext i32 %192 to i64
  %194 = getelementptr inbounds float, float* %138, i64 %193
  %195 = bitcast float* %194 to i32*
  %196 = load i32, i32* %195, align 4
  %197 = getelementptr inbounds i16, i16* %176, i64 5
  %198 = load i16, i16* %197, align 2
  %199 = zext i16 %198 to i32
  %200 = add i32 %173, %199
  %201 = and i32 %200, 2047
  %202 = zext i32 %201 to i64
  %203 = getelementptr inbounds float, float* %138, i64 %202
  %204 = bitcast float* %203 to i32*
  %205 = load i32, i32* %204, align 4
  %206 = bitcast float* %179 to i32*
  store i32 %187, i32* %206, align 4
  %207 = getelementptr inbounds float, float* %177, i64 4
  %208 = bitcast float* %207 to i32*
  store i32 %196, i32* %208, align 4
  %209 = getelementptr inbounds float, float* %177, i64 5
  %210 = bitcast float* %209 to i32*
  store i32 %205, i32* %210, align 4
  %211 = add nsw i32 %172, -3
  %212 = icmp sgt i32 %211, 0
  br i1 %212, label %171, label %1474

213:                                              ; preds = %140
  %214 = bitcast i16* %125 to <4 x i16>*
  %215 = load <4 x i16>, <4 x i16>* %214, align 2
  %216 = and <4 x i16> %215, <i16 2047, i16 2047, i16 2047, i16 2047>
  %217 = extractelement <4 x i16> %216, i32 0
  %218 = zext i16 %217 to i64
  %219 = getelementptr inbounds float, float* %138, i64 %218
  %220 = bitcast float* %219 to i32*
  %221 = load i32, i32* %220, align 4
  %222 = extractelement <4 x i16> %216, i32 1
  %223 = zext i16 %222 to i64
  %224 = getelementptr inbounds float, float* %138, i64 %223
  %225 = bitcast float* %224 to i32*
  %226 = load i32, i32* %225, align 4
  %227 = extractelement <4 x i16> %216, i32 2
  %228 = zext i16 %227 to i64
  %229 = getelementptr inbounds float, float* %138, i64 %228
  %230 = bitcast float* %229 to i32*
  %231 = load i32, i32* %230, align 4
  %232 = extractelement <4 x i16> %216, i32 3
  %233 = zext i16 %232 to i64
  %234 = getelementptr inbounds float, float* %138, i64 %233
  %235 = bitcast float* %234 to i32*
  %236 = load i32, i32* %235, align 4
  %237 = bitcast i8* %127 to i32*
  store i32 %221, i32* %237, align 4
  %238 = getelementptr inbounds i8, i8* %127, i64 4
  %239 = bitcast i8* %238 to i32*
  store i32 %226, i32* %239, align 4
  %240 = getelementptr inbounds i8, i8* %127, i64 8
  %241 = bitcast i8* %240 to i32*
  store i32 %231, i32* %241, align 4
  %242 = getelementptr inbounds i8, i8* %127, i64 12
  %243 = bitcast i8* %242 to i32*
  store i32 %236, i32* %243, align 4
  br i1 %116, label %244, label %1474

244:                                              ; preds = %213
  %245 = shufflevector <4 x i16> %216, <4 x i16> undef, <4 x i32> <i32 3, i32 2, i32 1, i32 0>
  %246 = zext <4 x i16> %245 to <4 x i32>
  br label %247

247:                                              ; preds = %247, %244
  %248 = phi i32 [ %290, %247 ], [ %115, %244 ]
  %249 = phi i16* [ %252, %247 ], [ %125, %244 ]
  %250 = phi float* [ %253, %247 ], [ %137, %244 ]
  %251 = phi <4 x i32> [ %258, %247 ], [ %246, %244 ]
  %252 = getelementptr inbounds i16, i16* %249, i64 4
  %253 = getelementptr inbounds float, float* %250, i64 4
  %254 = bitcast i16* %252 to <4 x i16>*
  %255 = load <4 x i16>, <4 x i16>* %254, align 2
  %256 = shufflevector <4 x i16> %255, <4 x i16> undef, <4 x i32> <i32 3, i32 2, i32 1, i32 0>
  %257 = zext <4 x i16> %256 to <4 x i32>
  %258 = add <4 x i32> %251, %257
  %259 = extractelement <4 x i32> %258, i32 3
  %260 = and i32 %259, 2047
  %261 = zext i32 %260 to i64
  %262 = getelementptr inbounds float, float* %138, i64 %261
  %263 = bitcast float* %262 to i32*
  %264 = load i32, i32* %263, align 4
  %265 = extractelement <4 x i32> %258, i32 2
  %266 = and i32 %265, 2047
  %267 = zext i32 %266 to i64
  %268 = getelementptr inbounds float, float* %138, i64 %267
  %269 = bitcast float* %268 to i32*
  %270 = load i32, i32* %269, align 4
  %271 = extractelement <4 x i32> %258, i32 1
  %272 = and i32 %271, 2047
  %273 = zext i32 %272 to i64
  %274 = getelementptr inbounds float, float* %138, i64 %273
  %275 = bitcast float* %274 to i32*
  %276 = load i32, i32* %275, align 4
  %277 = extractelement <4 x i32> %258, i32 0
  %278 = and i32 %277, 2047
  %279 = zext i32 %278 to i64
  %280 = getelementptr inbounds float, float* %138, i64 %279
  %281 = bitcast float* %280 to i32*
  %282 = load i32, i32* %281, align 4
  %283 = bitcast float* %253 to i32*
  store i32 %264, i32* %283, align 4
  %284 = getelementptr inbounds float, float* %250, i64 5
  %285 = bitcast float* %284 to i32*
  store i32 %270, i32* %285, align 4
  %286 = getelementptr inbounds float, float* %250, i64 6
  %287 = bitcast float* %286 to i32*
  store i32 %276, i32* %287, align 4
  %288 = getelementptr inbounds float, float* %250, i64 7
  %289 = bitcast float* %288 to i32*
  store i32 %282, i32* %289, align 4
  %290 = add nsw i32 %248, -4
  %291 = icmp sgt i32 %290, 0
  br i1 %291, label %247, label %1474

292:                                              ; preds = %140, %292
  %293 = phi float* [ %305, %292 ], [ %137, %140 ]
  %294 = phi i16* [ %304, %292 ], [ %125, %140 ]
  %295 = phi i32 [ %296, %292 ], [ %136, %140 ]
  %296 = add nsw i32 %295, -1
  %297 = load i16, i16* %294, align 2
  %298 = and i16 %297, 2047
  %299 = zext i16 %298 to i64
  %300 = getelementptr inbounds float, float* %138, i64 %299
  %301 = bitcast float* %300 to i32*
  %302 = load i32, i32* %301, align 4
  %303 = bitcast float* %293 to i32*
  store i32 %302, i32* %303, align 4
  %304 = getelementptr inbounds i16, i16* %294, i64 1
  %305 = getelementptr inbounds float, float* %293, i64 1
  %306 = icmp sgt i32 %296, 0
  br i1 %306, label %292, label %307

307:                                              ; preds = %292
  %308 = sub nsw i32 %27, %136
  %309 = icmp sgt i32 %308, 0
  br i1 %309, label %310, label %1474

310:                                              ; preds = %307
  %311 = zext i16 %135 to i64
  br label %315

312:                                              ; preds = %319
  %313 = sub nsw i32 %316, %136
  %314 = icmp sgt i32 %313, 0
  br i1 %314, label %315, label %1474

315:                                              ; preds = %312, %310
  %316 = phi i32 [ %308, %310 ], [ %313, %312 ]
  %317 = phi i16* [ %304, %310 ], [ %335, %312 ]
  %318 = phi float* [ %305, %310 ], [ %336, %312 ]
  br label %319

319:                                              ; preds = %319, %315
  %320 = phi float* [ %336, %319 ], [ %318, %315 ]
  %321 = phi i16* [ %335, %319 ], [ %317, %315 ]
  %322 = phi i32 [ %323, %319 ], [ %136, %315 ]
  %323 = add nsw i32 %322, -1
  %324 = load i16, i16* %321, align 2
  %325 = getelementptr inbounds i16, i16* %321, i64 %311
  %326 = load i16, i16* %325, align 2
  %327 = add i16 %326, %324
  store i16 %327, i16* %325, align 2
  %328 = load i16, i16* %321, align 2
  %329 = and i16 %328, 2047
  %330 = zext i16 %329 to i64
  %331 = getelementptr inbounds float, float* %138, i64 %330
  %332 = bitcast float* %331 to i32*
  %333 = load i32, i32* %332, align 4
  %334 = bitcast float* %320 to i32*
  store i32 %333, i32* %334, align 4
  %335 = getelementptr inbounds i16, i16* %321, i64 1
  %336 = getelementptr inbounds float, float* %320, i64 1
  %337 = icmp sgt i32 %323, 0
  br i1 %337, label %319, label %312

338:                                              ; preds = %123
  %339 = load i16, i16* %22, align 8
  %340 = zext i16 %339 to i32
  %341 = bitcast i8* %127 to i16*
  %342 = load i16*, i16** %121, align 8
  %343 = icmp slt i32 %27, %340
  br i1 %343, label %1474, label %344

344:                                              ; preds = %338
  switch i16 %339, label %488 [
    i16 3, label %345
    i16 4, label %407
  ]

345:                                              ; preds = %344
  %346 = load i16, i16* %125, align 2
  %347 = and i16 %346, 2047
  %348 = zext i16 %347 to i64
  %349 = getelementptr inbounds i16, i16* %342, i64 %348
  %350 = load i16, i16* %349, align 2
  store i16 %350, i16* %341, align 2
  %351 = getelementptr inbounds i16, i16* %125, i64 1
  %352 = load i16, i16* %351, align 2
  %353 = and i16 %352, 2047
  %354 = zext i16 %353 to i64
  %355 = getelementptr inbounds i16, i16* %342, i64 %354
  %356 = load i16, i16* %355, align 2
  %357 = getelementptr inbounds i8, i8* %127, i64 2
  %358 = bitcast i8* %357 to i16*
  store i16 %356, i16* %358, align 2
  %359 = getelementptr inbounds i16, i16* %125, i64 2
  %360 = load i16, i16* %359, align 2
  %361 = and i16 %360, 2047
  %362 = zext i16 %361 to i64
  %363 = getelementptr inbounds i16, i16* %342, i64 %362
  %364 = load i16, i16* %363, align 2
  %365 = getelementptr inbounds i8, i8* %127, i64 4
  %366 = bitcast i8* %365 to i16*
  store i16 %364, i16* %366, align 2
  br i1 %118, label %367, label %1474

367:                                              ; preds = %345
  %368 = zext i16 %361 to i32
  %369 = zext i16 %353 to i32
  %370 = zext i16 %347 to i32
  br label %371

371:                                              ; preds = %371, %367
  %372 = phi i32 [ %405, %371 ], [ %117, %367 ]
  %373 = phi i32 [ %399, %371 ], [ %368, %367 ]
  %374 = phi i32 [ %390, %371 ], [ %369, %367 ]
  %375 = phi i32 [ %382, %371 ], [ %370, %367 ]
  %376 = phi i16* [ %378, %371 ], [ %125, %367 ]
  %377 = phi i16* [ %379, %371 ], [ %341, %367 ]
  %378 = getelementptr inbounds i16, i16* %376, i64 3
  %379 = getelementptr inbounds i16, i16* %377, i64 3
  %380 = load i16, i16* %378, align 2
  %381 = zext i16 %380 to i32
  %382 = add i32 %375, %381
  %383 = and i32 %382, 2047
  %384 = zext i32 %383 to i64
  %385 = getelementptr inbounds i16, i16* %342, i64 %384
  %386 = load i16, i16* %385, align 2
  store i16 %386, i16* %379, align 2
  %387 = getelementptr inbounds i16, i16* %376, i64 4
  %388 = load i16, i16* %387, align 2
  %389 = zext i16 %388 to i32
  %390 = add i32 %374, %389
  %391 = and i32 %390, 2047
  %392 = zext i32 %391 to i64
  %393 = getelementptr inbounds i16, i16* %342, i64 %392
  %394 = load i16, i16* %393, align 2
  %395 = getelementptr inbounds i16, i16* %377, i64 4
  store i16 %394, i16* %395, align 2
  %396 = getelementptr inbounds i16, i16* %376, i64 5
  %397 = load i16, i16* %396, align 2
  %398 = zext i16 %397 to i32
  %399 = add i32 %373, %398
  %400 = and i32 %399, 2047
  %401 = zext i32 %400 to i64
  %402 = getelementptr inbounds i16, i16* %342, i64 %401
  %403 = load i16, i16* %402, align 2
  %404 = getelementptr inbounds i16, i16* %377, i64 5
  store i16 %403, i16* %404, align 2
  %405 = add nsw i32 %372, -3
  %406 = icmp sgt i32 %405, 0
  br i1 %406, label %371, label %1474

407:                                              ; preds = %344
  %408 = load i16, i16* %125, align 2
  %409 = and i16 %408, 2047
  %410 = zext i16 %409 to i64
  %411 = getelementptr inbounds i16, i16* %342, i64 %410
  %412 = load i16, i16* %411, align 2
  store i16 %412, i16* %341, align 2
  %413 = getelementptr inbounds i16, i16* %125, i64 1
  %414 = load i16, i16* %413, align 2
  %415 = and i16 %414, 2047
  %416 = zext i16 %415 to i64
  %417 = getelementptr inbounds i16, i16* %342, i64 %416
  %418 = load i16, i16* %417, align 2
  %419 = getelementptr inbounds i8, i8* %127, i64 2
  %420 = bitcast i8* %419 to i16*
  store i16 %418, i16* %420, align 2
  %421 = getelementptr inbounds i16, i16* %125, i64 2
  %422 = load i16, i16* %421, align 2
  %423 = and i16 %422, 2047
  %424 = zext i16 %423 to i64
  %425 = getelementptr inbounds i16, i16* %342, i64 %424
  %426 = load i16, i16* %425, align 2
  %427 = getelementptr inbounds i8, i8* %127, i64 4
  %428 = bitcast i8* %427 to i16*
  store i16 %426, i16* %428, align 2
  %429 = getelementptr inbounds i16, i16* %125, i64 3
  %430 = load i16, i16* %429, align 2
  %431 = and i16 %430, 2047
  %432 = zext i16 %431 to i64
  %433 = getelementptr inbounds i16, i16* %342, i64 %432
  %434 = load i16, i16* %433, align 2
  %435 = getelementptr inbounds i8, i8* %127, i64 6
  %436 = bitcast i8* %435 to i16*
  store i16 %434, i16* %436, align 2
  br i1 %116, label %437, label %1474

437:                                              ; preds = %407
  %438 = zext i16 %431 to i32
  %439 = zext i16 %423 to i32
  %440 = zext i16 %415 to i32
  %441 = zext i16 %409 to i32
  br label %442

442:                                              ; preds = %442, %437
  %443 = phi i32 [ %486, %442 ], [ %115, %437 ]
  %444 = phi i32 [ %480, %442 ], [ %438, %437 ]
  %445 = phi i32 [ %471, %442 ], [ %439, %437 ]
  %446 = phi i32 [ %462, %442 ], [ %440, %437 ]
  %447 = phi i32 [ %454, %442 ], [ %441, %437 ]
  %448 = phi i16* [ %450, %442 ], [ %125, %437 ]
  %449 = phi i16* [ %451, %442 ], [ %341, %437 ]
  %450 = getelementptr inbounds i16, i16* %448, i64 4
  %451 = getelementptr inbounds i16, i16* %449, i64 4
  %452 = load i16, i16* %450, align 2
  %453 = zext i16 %452 to i32
  %454 = add i32 %447, %453
  %455 = and i32 %454, 2047
  %456 = zext i32 %455 to i64
  %457 = getelementptr inbounds i16, i16* %342, i64 %456
  %458 = load i16, i16* %457, align 2
  store i16 %458, i16* %451, align 2
  %459 = getelementptr inbounds i16, i16* %448, i64 5
  %460 = load i16, i16* %459, align 2
  %461 = zext i16 %460 to i32
  %462 = add i32 %446, %461
  %463 = and i32 %462, 2047
  %464 = zext i32 %463 to i64
  %465 = getelementptr inbounds i16, i16* %342, i64 %464
  %466 = load i16, i16* %465, align 2
  %467 = getelementptr inbounds i16, i16* %449, i64 5
  store i16 %466, i16* %467, align 2
  %468 = getelementptr inbounds i16, i16* %448, i64 6
  %469 = load i16, i16* %468, align 2
  %470 = zext i16 %469 to i32
  %471 = add i32 %445, %470
  %472 = and i32 %471, 2047
  %473 = zext i32 %472 to i64
  %474 = getelementptr inbounds i16, i16* %342, i64 %473
  %475 = load i16, i16* %474, align 2
  %476 = getelementptr inbounds i16, i16* %449, i64 6
  store i16 %475, i16* %476, align 2
  %477 = getelementptr inbounds i16, i16* %448, i64 7
  %478 = load i16, i16* %477, align 2
  %479 = zext i16 %478 to i32
  %480 = add i32 %444, %479
  %481 = and i32 %480, 2047
  %482 = zext i32 %481 to i64
  %483 = getelementptr inbounds i16, i16* %342, i64 %482
  %484 = load i16, i16* %483, align 2
  %485 = getelementptr inbounds i16, i16* %449, i64 7
  store i16 %484, i16* %485, align 2
  %486 = add nsw i32 %443, -4
  %487 = icmp sgt i32 %486, 0
  br i1 %487, label %442, label %1474

488:                                              ; preds = %344, %488
  %489 = phi i16* [ %499, %488 ], [ %341, %344 ]
  %490 = phi i16* [ %498, %488 ], [ %125, %344 ]
  %491 = phi i32 [ %492, %488 ], [ %340, %344 ]
  %492 = add nsw i32 %491, -1
  %493 = load i16, i16* %490, align 2
  %494 = and i16 %493, 2047
  %495 = zext i16 %494 to i64
  %496 = getelementptr inbounds i16, i16* %342, i64 %495
  %497 = load i16, i16* %496, align 2
  store i16 %497, i16* %489, align 2
  %498 = getelementptr inbounds i16, i16* %490, i64 1
  %499 = getelementptr inbounds i16, i16* %489, i64 1
  %500 = icmp sgt i32 %492, 0
  br i1 %500, label %488, label %501

501:                                              ; preds = %488
  %502 = sub nsw i32 %27, %340
  %503 = icmp sgt i32 %502, 0
  br i1 %503, label %504, label %1474

504:                                              ; preds = %501
  %505 = zext i16 %339 to i64
  br label %509

506:                                              ; preds = %513
  %507 = sub nsw i32 %510, %340
  %508 = icmp sgt i32 %507, 0
  br i1 %508, label %509, label %1474

509:                                              ; preds = %506, %504
  %510 = phi i32 [ %502, %504 ], [ %507, %506 ]
  %511 = phi i16* [ %498, %504 ], [ %527, %506 ]
  %512 = phi i16* [ %499, %504 ], [ %528, %506 ]
  br label %513

513:                                              ; preds = %513, %509
  %514 = phi i16* [ %528, %513 ], [ %512, %509 ]
  %515 = phi i16* [ %527, %513 ], [ %511, %509 ]
  %516 = phi i32 [ %517, %513 ], [ %340, %509 ]
  %517 = add nsw i32 %516, -1
  %518 = load i16, i16* %515, align 2
  %519 = getelementptr inbounds i16, i16* %515, i64 %505
  %520 = load i16, i16* %519, align 2
  %521 = add i16 %520, %518
  store i16 %521, i16* %519, align 2
  %522 = load i16, i16* %515, align 2
  %523 = and i16 %522, 2047
  %524 = zext i16 %523 to i64
  %525 = getelementptr inbounds i16, i16* %342, i64 %524
  %526 = load i16, i16* %525, align 2
  store i16 %526, i16* %514, align 2
  %527 = getelementptr inbounds i16, i16* %515, i64 1
  %528 = getelementptr inbounds i16, i16* %514, i64 1
  %529 = icmp sgt i32 %517, 0
  br i1 %529, label %513, label %506

530:                                              ; preds = %123
  %531 = load i16, i16* %22, align 8
  %532 = zext i16 %531 to i32
  %533 = bitcast i8* %127 to i16*
  %534 = load float*, float** %120, align 8
  %535 = icmp slt i32 %27, %532
  br i1 %535, label %1474, label %536

536:                                              ; preds = %530
  switch i16 %531, label %721 [
    i16 3, label %537
    i16 4, label %623
  ]

537:                                              ; preds = %536
  %538 = load i16, i16* %125, align 2
  %539 = and i16 %538, 2047
  %540 = zext i16 %539 to i64
  %541 = getelementptr inbounds float, float* %534, i64 %540
  %542 = load float, float* %541, align 4
  %543 = fmul float %542, 2.048000e+03
  %544 = getelementptr inbounds i16, i16* %125, i64 1
  %545 = load i16, i16* %544, align 2
  %546 = and i16 %545, 2047
  %547 = zext i16 %546 to i64
  %548 = getelementptr inbounds float, float* %534, i64 %547
  %549 = load float, float* %548, align 4
  %550 = fmul float %549, 2.048000e+03
  %551 = getelementptr inbounds i16, i16* %125, i64 2
  %552 = load i16, i16* %551, align 2
  %553 = and i16 %552, 2047
  %554 = zext i16 %553 to i64
  %555 = getelementptr inbounds float, float* %534, i64 %554
  %556 = load float, float* %555, align 4
  %557 = fmul float %556, 2.048000e+03
  %558 = fcmp olt float %543, 3.071000e+03
  %559 = select i1 %558, float %543, float 3.071000e+03
  %560 = fptoui float %559 to i16
  store i16 %560, i16* %533, align 2
  %561 = fcmp olt float %550, 3.071000e+03
  %562 = select i1 %561, float %550, float 3.071000e+03
  %563 = fptoui float %562 to i16
  %564 = getelementptr inbounds i8, i8* %127, i64 2
  %565 = bitcast i8* %564 to i16*
  store i16 %563, i16* %565, align 2
  %566 = fcmp olt float %557, 3.071000e+03
  %567 = select i1 %566, float %557, float 3.071000e+03
  %568 = fptoui float %567 to i16
  %569 = getelementptr inbounds i8, i8* %127, i64 4
  %570 = bitcast i8* %569 to i16*
  store i16 %568, i16* %570, align 2
  br i1 %118, label %571, label %1474

571:                                              ; preds = %537
  %572 = zext i16 %553 to i32
  %573 = zext i16 %546 to i32
  %574 = zext i16 %539 to i32
  br label %575

575:                                              ; preds = %575, %571
  %576 = phi i32 [ %621, %575 ], [ %117, %571 ]
  %577 = phi i32 [ %604, %575 ], [ %572, %571 ]
  %578 = phi i32 [ %595, %575 ], [ %573, %571 ]
  %579 = phi i32 [ %586, %575 ], [ %574, %571 ]
  %580 = phi i16* [ %582, %575 ], [ %125, %571 ]
  %581 = phi i16* [ %583, %575 ], [ %533, %571 ]
  %582 = getelementptr inbounds i16, i16* %580, i64 3
  %583 = getelementptr inbounds i16, i16* %581, i64 3
  %584 = load i16, i16* %582, align 2
  %585 = zext i16 %584 to i32
  %586 = add i32 %579, %585
  %587 = and i32 %586, 2047
  %588 = zext i32 %587 to i64
  %589 = getelementptr inbounds float, float* %534, i64 %588
  %590 = load float, float* %589, align 4
  %591 = fmul float %590, 2.048000e+03
  %592 = getelementptr inbounds i16, i16* %580, i64 4
  %593 = load i16, i16* %592, align 2
  %594 = zext i16 %593 to i32
  %595 = add i32 %578, %594
  %596 = and i32 %595, 2047
  %597 = zext i32 %596 to i64
  %598 = getelementptr inbounds float, float* %534, i64 %597
  %599 = load float, float* %598, align 4
  %600 = fmul float %599, 2.048000e+03
  %601 = getelementptr inbounds i16, i16* %580, i64 5
  %602 = load i16, i16* %601, align 2
  %603 = zext i16 %602 to i32
  %604 = add i32 %577, %603
  %605 = and i32 %604, 2047
  %606 = zext i32 %605 to i64
  %607 = getelementptr inbounds float, float* %534, i64 %606
  %608 = load float, float* %607, align 4
  %609 = fmul float %608, 2.048000e+03
  %610 = fcmp olt float %591, 3.071000e+03
  %611 = select i1 %610, float %591, float 3.071000e+03
  %612 = fptoui float %611 to i16
  store i16 %612, i16* %583, align 2
  %613 = fcmp olt float %600, 3.071000e+03
  %614 = select i1 %613, float %600, float 3.071000e+03
  %615 = fptoui float %614 to i16
  %616 = getelementptr inbounds i16, i16* %581, i64 4
  store i16 %615, i16* %616, align 2
  %617 = fcmp olt float %609, 3.071000e+03
  %618 = select i1 %617, float %609, float 3.071000e+03
  %619 = fptoui float %618 to i16
  %620 = getelementptr inbounds i16, i16* %581, i64 5
  store i16 %619, i16* %620, align 2
  %621 = add nsw i32 %576, -3
  %622 = icmp sgt i32 %621, 0
  br i1 %622, label %575, label %1474

623:                                              ; preds = %536
  %624 = bitcast i16* %125 to <4 x i16>*
  %625 = load <4 x i16>, <4 x i16>* %624, align 2
  %626 = and <4 x i16> %625, <i16 2047, i16 2047, i16 2047, i16 2047>
  %627 = extractelement <4 x i16> %626, i32 0
  %628 = zext i16 %627 to i64
  %629 = getelementptr inbounds float, float* %534, i64 %628
  %630 = load float, float* %629, align 4
  %631 = fmul float %630, 2.048000e+03
  %632 = extractelement <4 x i16> %626, i32 1
  %633 = zext i16 %632 to i64
  %634 = getelementptr inbounds float, float* %534, i64 %633
  %635 = load float, float* %634, align 4
  %636 = fmul float %635, 2.048000e+03
  %637 = extractelement <4 x i16> %626, i32 2
  %638 = zext i16 %637 to i64
  %639 = getelementptr inbounds float, float* %534, i64 %638
  %640 = load float, float* %639, align 4
  %641 = fmul float %640, 2.048000e+03
  %642 = extractelement <4 x i16> %626, i32 3
  %643 = zext i16 %642 to i64
  %644 = getelementptr inbounds float, float* %534, i64 %643
  %645 = load float, float* %644, align 4
  %646 = fmul float %645, 2.048000e+03
  %647 = fcmp olt float %631, 3.071000e+03
  %648 = select i1 %647, float %631, float 3.071000e+03
  %649 = fptoui float %648 to i16
  store i16 %649, i16* %533, align 2
  %650 = fcmp olt float %636, 3.071000e+03
  %651 = select i1 %650, float %636, float 3.071000e+03
  %652 = fptoui float %651 to i16
  %653 = getelementptr inbounds i8, i8* %127, i64 2
  %654 = bitcast i8* %653 to i16*
  store i16 %652, i16* %654, align 2
  %655 = fcmp olt float %641, 3.071000e+03
  %656 = select i1 %655, float %641, float 3.071000e+03
  %657 = fptoui float %656 to i16
  %658 = getelementptr inbounds i8, i8* %127, i64 4
  %659 = bitcast i8* %658 to i16*
  store i16 %657, i16* %659, align 2
  %660 = fcmp olt float %646, 3.071000e+03
  %661 = select i1 %660, float %646, float 3.071000e+03
  %662 = fptoui float %661 to i16
  %663 = getelementptr inbounds i8, i8* %127, i64 6
  %664 = bitcast i8* %663 to i16*
  store i16 %662, i16* %664, align 2
  br i1 %116, label %665, label %1474

665:                                              ; preds = %623
  %666 = shufflevector <4 x i16> %626, <4 x i16> undef, <4 x i32> <i32 3, i32 2, i32 1, i32 0>
  %667 = zext <4 x i16> %666 to <4 x i32>
  br label %668

668:                                              ; preds = %668, %665
  %669 = phi i32 [ %719, %668 ], [ %115, %665 ]
  %670 = phi i16* [ %673, %668 ], [ %125, %665 ]
  %671 = phi i16* [ %674, %668 ], [ %533, %665 ]
  %672 = phi <4 x i32> [ %679, %668 ], [ %667, %665 ]
  %673 = getelementptr inbounds i16, i16* %670, i64 4
  %674 = getelementptr inbounds i16, i16* %671, i64 4
  %675 = bitcast i16* %673 to <4 x i16>*
  %676 = load <4 x i16>, <4 x i16>* %675, align 2
  %677 = shufflevector <4 x i16> %676, <4 x i16> undef, <4 x i32> <i32 3, i32 2, i32 1, i32 0>
  %678 = zext <4 x i16> %677 to <4 x i32>
  %679 = add <4 x i32> %672, %678
  %680 = extractelement <4 x i32> %679, i32 3
  %681 = and i32 %680, 2047
  %682 = zext i32 %681 to i64
  %683 = getelementptr inbounds float, float* %534, i64 %682
  %684 = load float, float* %683, align 4
  %685 = fmul float %684, 2.048000e+03
  %686 = extractelement <4 x i32> %679, i32 2
  %687 = and i32 %686, 2047
  %688 = zext i32 %687 to i64
  %689 = getelementptr inbounds float, float* %534, i64 %688
  %690 = load float, float* %689, align 4
  %691 = fmul float %690, 2.048000e+03
  %692 = extractelement <4 x i32> %679, i32 1
  %693 = and i32 %692, 2047
  %694 = zext i32 %693 to i64
  %695 = getelementptr inbounds float, float* %534, i64 %694
  %696 = load float, float* %695, align 4
  %697 = fmul float %696, 2.048000e+03
  %698 = extractelement <4 x i32> %679, i32 0
  %699 = and i32 %698, 2047
  %700 = zext i32 %699 to i64
  %701 = getelementptr inbounds float, float* %534, i64 %700
  %702 = load float, float* %701, align 4
  %703 = fmul float %702, 2.048000e+03
  %704 = fcmp olt float %685, 3.071000e+03
  %705 = select i1 %704, float %685, float 3.071000e+03
  %706 = fptoui float %705 to i16
  store i16 %706, i16* %674, align 2
  %707 = fcmp olt float %691, 3.071000e+03
  %708 = select i1 %707, float %691, float 3.071000e+03
  %709 = fptoui float %708 to i16
  %710 = getelementptr inbounds i16, i16* %671, i64 5
  store i16 %709, i16* %710, align 2
  %711 = fcmp olt float %697, 3.071000e+03
  %712 = select i1 %711, float %697, float 3.071000e+03
  %713 = fptoui float %712 to i16
  %714 = getelementptr inbounds i16, i16* %671, i64 6
  store i16 %713, i16* %714, align 2
  %715 = fcmp olt float %703, 3.071000e+03
  %716 = select i1 %715, float %703, float 3.071000e+03
  %717 = fptoui float %716 to i16
  %718 = getelementptr inbounds i16, i16* %671, i64 7
  store i16 %717, i16* %718, align 2
  %719 = add nsw i32 %669, -4
  %720 = icmp sgt i32 %719, 0
  br i1 %720, label %668, label %1474

721:                                              ; preds = %536, %721
  %722 = phi i16* [ %736, %721 ], [ %533, %536 ]
  %723 = phi i16* [ %735, %721 ], [ %125, %536 ]
  %724 = phi i32 [ %725, %721 ], [ %532, %536 ]
  %725 = add nsw i32 %724, -1
  %726 = load i16, i16* %723, align 2
  %727 = and i16 %726, 2047
  %728 = zext i16 %727 to i64
  %729 = getelementptr inbounds float, float* %534, i64 %728
  %730 = load float, float* %729, align 4
  %731 = fmul float %730, 2.048000e+03
  %732 = fcmp olt float %731, 3.071000e+03
  %733 = select i1 %732, float %731, float 3.071000e+03
  %734 = fptoui float %733 to i16
  store i16 %734, i16* %722, align 2
  %735 = getelementptr inbounds i16, i16* %723, i64 1
  %736 = getelementptr inbounds i16, i16* %722, i64 1
  %737 = icmp sgt i32 %725, 0
  br i1 %737, label %721, label %738

738:                                              ; preds = %721
  %739 = sub nsw i32 %27, %532
  %740 = icmp sgt i32 %739, 0
  br i1 %740, label %741, label %1474

741:                                              ; preds = %738
  %742 = zext i16 %531 to i64
  br label %746

743:                                              ; preds = %750
  %744 = sub nsw i32 %747, %532
  %745 = icmp sgt i32 %744, 0
  br i1 %745, label %746, label %1474

746:                                              ; preds = %743, %741
  %747 = phi i32 [ %739, %741 ], [ %744, %743 ]
  %748 = phi i16* [ %735, %741 ], [ %767, %743 ]
  %749 = phi i16* [ %736, %741 ], [ %768, %743 ]
  br label %750

750:                                              ; preds = %750, %746
  %751 = phi i16* [ %768, %750 ], [ %749, %746 ]
  %752 = phi i16* [ %767, %750 ], [ %748, %746 ]
  %753 = phi i32 [ %754, %750 ], [ %532, %746 ]
  %754 = add nsw i32 %753, -1
  %755 = load i16, i16* %752, align 2
  %756 = getelementptr inbounds i16, i16* %752, i64 %742
  %757 = load i16, i16* %756, align 2
  %758 = add i16 %757, %755
  store i16 %758, i16* %756, align 2
  %759 = and i16 %758, 2047
  %760 = zext i16 %759 to i64
  %761 = getelementptr inbounds float, float* %534, i64 %760
  %762 = load float, float* %761, align 4
  %763 = fmul float %762, 2.048000e+03
  %764 = fcmp olt float %763, 3.071000e+03
  %765 = select i1 %764, float %763, float 3.071000e+03
  %766 = fptoui float %765 to i16
  store i16 %766, i16* %751, align 2
  %767 = getelementptr inbounds i16, i16* %752, i64 1
  %768 = getelementptr inbounds i16, i16* %751, i64 1
  %769 = icmp sgt i32 %754, 0
  br i1 %769, label %750, label %743

770:                                              ; preds = %123
  %771 = load i16, i16* %22, align 8
  %772 = zext i16 %771 to i32
  %773 = bitcast i8* %127 to i16*
  %774 = icmp slt i32 %27, %772
  br i1 %774, label %1474, label %775

775:                                              ; preds = %770
  switch i16 %771, label %776 [
    i16 3, label %862
    i16 4, label %909
  ]

776:                                              ; preds = %775
  %777 = icmp ne i16 %771, 0
  %778 = zext i1 %777 to i32
  %779 = sub nsw i32 %772, %778
  %780 = zext i32 %779 to i64
  %781 = add nuw nsw i64 %780, 1
  %782 = icmp ult i64 %781, 16
  br i1 %782, label %783, label %787

783:                                              ; preds = %860, %787, %776
  %784 = phi i16* [ %125, %787 ], [ %125, %776 ], [ %802, %860 ]
  %785 = phi i16* [ %773, %787 ], [ %773, %776 ], [ %803, %860 ]
  %786 = phi i32 [ %772, %787 ], [ %772, %776 ], [ %805, %860 ]
  br label %970

787:                                              ; preds = %776
  %788 = getelementptr i8, i8* %127, i64 2
  %789 = icmp ne i16 %771, 0
  %790 = zext i1 %789 to i32
  %791 = sub nsw i32 %772, %790
  %792 = zext i32 %791 to i64
  %793 = shl nuw nsw i64 %792, 1
  %794 = getelementptr i8, i8* %788, i64 %793
  %795 = getelementptr i16, i16* %132, i64 %792
  %796 = bitcast i16* %795 to i8*
  %797 = icmp ult i8* %127, %796
  %798 = icmp ugt i8* %794, %130
  %799 = and i1 %797, %798
  br i1 %799, label %783, label %800

800:                                              ; preds = %787
  %801 = and i64 %781, 8589934576
  %802 = getelementptr i16, i16* %125, i64 %801
  %803 = getelementptr i16, i16* %773, i64 %801
  %804 = trunc i64 %801 to i32
  %805 = sub i32 %772, %804
  %806 = add nsw i64 %801, -16
  %807 = lshr exact i64 %806, 4
  %808 = add nuw nsw i64 %807, 1
  %809 = and i64 %808, 1
  %810 = icmp eq i64 %806, 0
  br i1 %810, label %844, label %811

811:                                              ; preds = %800
  %812 = sub nuw nsw i64 %808, %809
  br label %813

813:                                              ; preds = %813, %811
  %814 = phi i64 [ 0, %811 ], [ %841, %813 ]
  %815 = phi i64 [ %812, %811 ], [ %842, %813 ]
  %816 = getelementptr i16, i16* %125, i64 %814
  %817 = getelementptr i16, i16* %773, i64 %814
  %818 = bitcast i16* %816 to <8 x i16>*
  %819 = load <8 x i16>, <8 x i16>* %818, align 2, !alias.scope !13
  %820 = getelementptr i16, i16* %816, i64 8
  %821 = bitcast i16* %820 to <8 x i16>*
  %822 = load <8 x i16>, <8 x i16>* %821, align 2, !alias.scope !13
  %823 = and <8 x i16> %819, <i16 2047, i16 2047, i16 2047, i16 2047, i16 2047, i16 2047, i16 2047, i16 2047>
  %824 = and <8 x i16> %822, <i16 2047, i16 2047, i16 2047, i16 2047, i16 2047, i16 2047, i16 2047, i16 2047>
  %825 = bitcast i16* %817 to <8 x i16>*
  store <8 x i16> %823, <8 x i16>* %825, align 2, !alias.scope !16, !noalias !13
  %826 = getelementptr i16, i16* %817, i64 8
  %827 = bitcast i16* %826 to <8 x i16>*
  store <8 x i16> %824, <8 x i16>* %827, align 2, !alias.scope !16, !noalias !13
  %828 = or i64 %814, 16
  %829 = getelementptr i16, i16* %125, i64 %828
  %830 = getelementptr i16, i16* %773, i64 %828
  %831 = bitcast i16* %829 to <8 x i16>*
  %832 = load <8 x i16>, <8 x i16>* %831, align 2, !alias.scope !13
  %833 = getelementptr i16, i16* %829, i64 8
  %834 = bitcast i16* %833 to <8 x i16>*
  %835 = load <8 x i16>, <8 x i16>* %834, align 2, !alias.scope !13
  %836 = and <8 x i16> %832, <i16 2047, i16 2047, i16 2047, i16 2047, i16 2047, i16 2047, i16 2047, i16 2047>
  %837 = and <8 x i16> %835, <i16 2047, i16 2047, i16 2047, i16 2047, i16 2047, i16 2047, i16 2047, i16 2047>
  %838 = bitcast i16* %830 to <8 x i16>*
  store <8 x i16> %836, <8 x i16>* %838, align 2, !alias.scope !16, !noalias !13
  %839 = getelementptr i16, i16* %830, i64 8
  %840 = bitcast i16* %839 to <8 x i16>*
  store <8 x i16> %837, <8 x i16>* %840, align 2, !alias.scope !16, !noalias !13
  %841 = add i64 %814, 32
  %842 = add i64 %815, -2
  %843 = icmp eq i64 %842, 0
  br i1 %843, label %844, label %813, !llvm.loop !18

844:                                              ; preds = %813, %800
  %845 = phi i64 [ 0, %800 ], [ %841, %813 ]
  %846 = icmp eq i64 %809, 0
  br i1 %846, label %860, label %847

847:                                              ; preds = %844
  %848 = getelementptr i16, i16* %125, i64 %845
  %849 = getelementptr i16, i16* %773, i64 %845
  %850 = bitcast i16* %848 to <8 x i16>*
  %851 = load <8 x i16>, <8 x i16>* %850, align 2, !alias.scope !13
  %852 = getelementptr i16, i16* %848, i64 8
  %853 = bitcast i16* %852 to <8 x i16>*
  %854 = load <8 x i16>, <8 x i16>* %853, align 2, !alias.scope !13
  %855 = and <8 x i16> %851, <i16 2047, i16 2047, i16 2047, i16 2047, i16 2047, i16 2047, i16 2047, i16 2047>
  %856 = and <8 x i16> %854, <i16 2047, i16 2047, i16 2047, i16 2047, i16 2047, i16 2047, i16 2047, i16 2047>
  %857 = bitcast i16* %849 to <8 x i16>*
  store <8 x i16> %855, <8 x i16>* %857, align 2, !alias.scope !16, !noalias !13
  %858 = getelementptr i16, i16* %849, i64 8
  %859 = bitcast i16* %858 to <8 x i16>*
  store <8 x i16> %856, <8 x i16>* %859, align 2, !alias.scope !16, !noalias !13
  br label %860

860:                                              ; preds = %844, %847
  %861 = icmp eq i64 %781, %801
  br i1 %861, label %980, label %783

862:                                              ; preds = %775
  %863 = load i16, i16* %125, align 2
  store i16 %863, i16* %773, align 2
  %864 = getelementptr inbounds i16, i16* %125, i64 1
  %865 = load i16, i16* %864, align 2
  %866 = getelementptr inbounds i8, i8* %127, i64 2
  %867 = bitcast i8* %866 to i16*
  store i16 %865, i16* %867, align 2
  %868 = getelementptr inbounds i16, i16* %125, i64 2
  %869 = load i16, i16* %868, align 2
  %870 = getelementptr inbounds i8, i8* %127, i64 4
  %871 = bitcast i8* %870 to i16*
  store i16 %869, i16* %871, align 2
  br i1 %118, label %872, label %1474

872:                                              ; preds = %862
  %873 = load i16, i16* %868, align 2
  %874 = zext i16 %873 to i32
  %875 = load i16, i16* %864, align 2
  %876 = zext i16 %875 to i32
  %877 = load i16, i16* %125, align 2
  %878 = zext i16 %877 to i32
  br label %879

879:                                              ; preds = %879, %872
  %880 = phi i32 [ %907, %879 ], [ %117, %872 ]
  %881 = phi i32 [ %903, %879 ], [ %874, %872 ]
  %882 = phi i32 [ %896, %879 ], [ %876, %872 ]
  %883 = phi i32 [ %890, %879 ], [ %878, %872 ]
  %884 = phi i16* [ %887, %879 ], [ %773, %872 ]
  %885 = phi i16* [ %886, %879 ], [ %125, %872 ]
  %886 = getelementptr inbounds i16, i16* %885, i64 3
  %887 = getelementptr inbounds i16, i16* %884, i64 3
  %888 = load i16, i16* %886, align 2
  %889 = zext i16 %888 to i32
  %890 = add i32 %883, %889
  %891 = trunc i32 %890 to i16
  %892 = and i16 %891, 2047
  store i16 %892, i16* %887, align 2
  %893 = getelementptr inbounds i16, i16* %885, i64 4
  %894 = load i16, i16* %893, align 2
  %895 = zext i16 %894 to i32
  %896 = add i32 %882, %895
  %897 = trunc i32 %896 to i16
  %898 = and i16 %897, 2047
  %899 = getelementptr inbounds i16, i16* %884, i64 4
  store i16 %898, i16* %899, align 2
  %900 = getelementptr inbounds i16, i16* %885, i64 5
  %901 = load i16, i16* %900, align 2
  %902 = zext i16 %901 to i32
  %903 = add i32 %881, %902
  %904 = trunc i32 %903 to i16
  %905 = and i16 %904, 2047
  %906 = getelementptr inbounds i16, i16* %884, i64 5
  store i16 %905, i16* %906, align 2
  %907 = add nsw i32 %880, -3
  %908 = icmp sgt i32 %907, 0
  br i1 %908, label %879, label %1474

909:                                              ; preds = %775
  %910 = load i16, i16* %125, align 2
  store i16 %910, i16* %773, align 2
  %911 = getelementptr inbounds i16, i16* %125, i64 1
  %912 = load i16, i16* %911, align 2
  %913 = getelementptr inbounds i8, i8* %127, i64 2
  %914 = bitcast i8* %913 to i16*
  store i16 %912, i16* %914, align 2
  %915 = getelementptr inbounds i16, i16* %125, i64 2
  %916 = load i16, i16* %915, align 2
  %917 = getelementptr inbounds i8, i8* %127, i64 4
  %918 = bitcast i8* %917 to i16*
  store i16 %916, i16* %918, align 2
  %919 = getelementptr inbounds i16, i16* %125, i64 3
  %920 = load i16, i16* %919, align 2
  %921 = getelementptr inbounds i8, i8* %127, i64 6
  %922 = bitcast i8* %921 to i16*
  store i16 %920, i16* %922, align 2
  br i1 %116, label %923, label %1474

923:                                              ; preds = %909
  %924 = load i16, i16* %919, align 2
  %925 = zext i16 %924 to i32
  %926 = load i16, i16* %915, align 2
  %927 = zext i16 %926 to i32
  %928 = load i16, i16* %911, align 2
  %929 = zext i16 %928 to i32
  %930 = load i16, i16* %125, align 2
  %931 = zext i16 %930 to i32
  br label %932

932:                                              ; preds = %932, %923
  %933 = phi i32 [ %968, %932 ], [ %115, %923 ]
  %934 = phi i32 [ %964, %932 ], [ %925, %923 ]
  %935 = phi i32 [ %957, %932 ], [ %927, %923 ]
  %936 = phi i32 [ %950, %932 ], [ %929, %923 ]
  %937 = phi i32 [ %944, %932 ], [ %931, %923 ]
  %938 = phi i16* [ %941, %932 ], [ %773, %923 ]
  %939 = phi i16* [ %940, %932 ], [ %125, %923 ]
  %940 = getelementptr inbounds i16, i16* %939, i64 4
  %941 = getelementptr inbounds i16, i16* %938, i64 4
  %942 = load i16, i16* %940, align 2
  %943 = zext i16 %942 to i32
  %944 = add i32 %937, %943
  %945 = trunc i32 %944 to i16
  %946 = and i16 %945, 2047
  store i16 %946, i16* %941, align 2
  %947 = getelementptr inbounds i16, i16* %939, i64 5
  %948 = load i16, i16* %947, align 2
  %949 = zext i16 %948 to i32
  %950 = add i32 %936, %949
  %951 = trunc i32 %950 to i16
  %952 = and i16 %951, 2047
  %953 = getelementptr inbounds i16, i16* %938, i64 5
  store i16 %952, i16* %953, align 2
  %954 = getelementptr inbounds i16, i16* %939, i64 6
  %955 = load i16, i16* %954, align 2
  %956 = zext i16 %955 to i32
  %957 = add i32 %935, %956
  %958 = trunc i32 %957 to i16
  %959 = and i16 %958, 2047
  %960 = getelementptr inbounds i16, i16* %938, i64 6
  store i16 %959, i16* %960, align 2
  %961 = getelementptr inbounds i16, i16* %939, i64 7
  %962 = load i16, i16* %961, align 2
  %963 = zext i16 %962 to i32
  %964 = add i32 %934, %963
  %965 = trunc i32 %964 to i16
  %966 = and i16 %965, 2047
  %967 = getelementptr inbounds i16, i16* %938, i64 7
  store i16 %966, i16* %967, align 2
  %968 = add nsw i32 %933, -4
  %969 = icmp sgt i32 %968, 0
  br i1 %969, label %932, label %1474

970:                                              ; preds = %783, %970
  %971 = phi i16* [ %977, %970 ], [ %784, %783 ]
  %972 = phi i16* [ %978, %970 ], [ %785, %783 ]
  %973 = phi i32 [ %974, %970 ], [ %786, %783 ]
  %974 = add nsw i32 %973, -1
  %975 = load i16, i16* %971, align 2
  %976 = and i16 %975, 2047
  store i16 %976, i16* %972, align 2
  %977 = getelementptr inbounds i16, i16* %971, i64 1
  %978 = getelementptr inbounds i16, i16* %972, i64 1
  %979 = icmp sgt i32 %974, 0
  br i1 %979, label %970, label %980, !llvm.loop !19

980:                                              ; preds = %970, %860
  %981 = phi i16* [ %802, %860 ], [ %977, %970 ]
  %982 = phi i16* [ %803, %860 ], [ %978, %970 ]
  %983 = sub nsw i32 %27, %772
  %984 = icmp sgt i32 %983, 0
  br i1 %984, label %985, label %1474

985:                                              ; preds = %980
  %986 = zext i16 %771 to i64
  %987 = icmp ne i16 %771, 0
  %988 = zext i1 %987 to i32
  %989 = sub nsw i32 %772, %988
  %990 = zext i32 %989 to i64
  %991 = add nuw nsw i64 %990, 1
  %992 = icmp ne i16 %771, 0
  %993 = zext i1 %992 to i32
  %994 = sub nsw i32 %772, %993
  %995 = zext i32 %994 to i64
  %996 = add nuw nsw i64 %986, %995
  %997 = and i64 %991, 8589934584
  %998 = add nsw i64 %997, -8
  %999 = lshr exact i64 %998, 3
  %1000 = add nuw nsw i64 %999, 1
  %1001 = icmp ult i64 %991, 8
  %1002 = and i64 %991, 8589934584
  %1003 = trunc i64 %1002 to i32
  %1004 = sub i32 %772, %1003
  %1005 = and i64 %1000, 1
  %1006 = icmp eq i64 %998, 0
  %1007 = sub nuw nsw i64 %1000, %1005
  %1008 = icmp eq i64 %1005, 0
  %1009 = icmp eq i64 %991, %1002
  br label %1015

1010:                                             ; preds = %1095, %1090
  %1011 = phi i16* [ %1039, %1090 ], [ %1106, %1095 ]
  %1012 = phi i16* [ %1040, %1090 ], [ %1107, %1095 ]
  %1013 = sub nsw i32 %1016, %772
  %1014 = icmp sgt i32 %1013, 0
  br i1 %1014, label %1015, label %1474

1015:                                             ; preds = %1010, %985
  %1016 = phi i32 [ %983, %985 ], [ %1013, %1010 ]
  %1017 = phi i16* [ %982, %985 ], [ %1012, %1010 ]
  %1018 = phi i16* [ %981, %985 ], [ %1011, %1010 ]
  br i1 %1001, label %1091, label %1019

1019:                                             ; preds = %1015
  %1020 = getelementptr i16, i16* %1018, i64 %986
  %1021 = getelementptr i16, i16* %1018, i64 1
  %1022 = getelementptr i16, i16* %1021, i64 %996
  %1023 = getelementptr i16, i16* %1017, i64 1
  %1024 = getelementptr i16, i16* %1023, i64 %995
  %1025 = getelementptr i16, i16* %1018, i64 1
  %1026 = getelementptr i16, i16* %1025, i64 %995
  %1027 = icmp ult i16* %1020, %1024
  %1028 = icmp ult i16* %1017, %1022
  %1029 = and i1 %1027, %1028
  %1030 = icmp ult i16* %1020, %1026
  %1031 = icmp ult i16* %1018, %1022
  %1032 = and i1 %1030, %1031
  %1033 = or i1 %1029, %1032
  %1034 = icmp ult i16* %1017, %1026
  %1035 = icmp ult i16* %1018, %1024
  %1036 = and i1 %1034, %1035
  %1037 = or i1 %1033, %1036
  br i1 %1037, label %1091, label %1038

1038:                                             ; preds = %1019
  %1039 = getelementptr i16, i16* %1018, i64 %1002
  %1040 = getelementptr i16, i16* %1017, i64 %1002
  br i1 %1006, label %1074, label %1041

1041:                                             ; preds = %1038, %1041
  %1042 = phi i64 [ %1071, %1041 ], [ 0, %1038 ]
  %1043 = phi i64 [ %1072, %1041 ], [ %1007, %1038 ]
  %1044 = getelementptr i16, i16* %1018, i64 %1042
  %1045 = getelementptr i16, i16* %1017, i64 %1042
  %1046 = bitcast i16* %1044 to <8 x i16>*
  %1047 = load <8 x i16>, <8 x i16>* %1046, align 2, !alias.scope !20
  %1048 = getelementptr inbounds i16, i16* %1044, i64 %986
  %1049 = bitcast i16* %1048 to <8 x i16>*
  %1050 = load <8 x i16>, <8 x i16>* %1049, align 2, !alias.scope !23, !noalias !25
  %1051 = add <8 x i16> %1050, %1047
  %1052 = bitcast i16* %1048 to <8 x i16>*
  store <8 x i16> %1051, <8 x i16>* %1052, align 2, !alias.scope !23, !noalias !25
  %1053 = bitcast i16* %1044 to <8 x i16>*
  %1054 = load <8 x i16>, <8 x i16>* %1053, align 2, !alias.scope !20
  %1055 = and <8 x i16> %1054, <i16 2047, i16 2047, i16 2047, i16 2047, i16 2047, i16 2047, i16 2047, i16 2047>
  %1056 = bitcast i16* %1045 to <8 x i16>*
  store <8 x i16> %1055, <8 x i16>* %1056, align 2, !alias.scope !27, !noalias !20
  %1057 = or i64 %1042, 8
  %1058 = getelementptr i16, i16* %1018, i64 %1057
  %1059 = getelementptr i16, i16* %1017, i64 %1057
  %1060 = bitcast i16* %1058 to <8 x i16>*
  %1061 = load <8 x i16>, <8 x i16>* %1060, align 2, !alias.scope !20
  %1062 = getelementptr inbounds i16, i16* %1058, i64 %986
  %1063 = bitcast i16* %1062 to <8 x i16>*
  %1064 = load <8 x i16>, <8 x i16>* %1063, align 2, !alias.scope !23, !noalias !25
  %1065 = add <8 x i16> %1064, %1061
  %1066 = bitcast i16* %1062 to <8 x i16>*
  store <8 x i16> %1065, <8 x i16>* %1066, align 2, !alias.scope !23, !noalias !25
  %1067 = bitcast i16* %1058 to <8 x i16>*
  %1068 = load <8 x i16>, <8 x i16>* %1067, align 2, !alias.scope !20
  %1069 = and <8 x i16> %1068, <i16 2047, i16 2047, i16 2047, i16 2047, i16 2047, i16 2047, i16 2047, i16 2047>
  %1070 = bitcast i16* %1059 to <8 x i16>*
  store <8 x i16> %1069, <8 x i16>* %1070, align 2, !alias.scope !27, !noalias !20
  %1071 = add i64 %1042, 16
  %1072 = add i64 %1043, -2
  %1073 = icmp eq i64 %1072, 0
  br i1 %1073, label %1074, label %1041, !llvm.loop !28

1074:                                             ; preds = %1041, %1038
  %1075 = phi i64 [ 0, %1038 ], [ %1071, %1041 ]
  br i1 %1008, label %1090, label %1076

1076:                                             ; preds = %1074
  %1077 = getelementptr i16, i16* %1018, i64 %1075
  %1078 = getelementptr i16, i16* %1017, i64 %1075
  %1079 = bitcast i16* %1077 to <8 x i16>*
  %1080 = load <8 x i16>, <8 x i16>* %1079, align 2, !alias.scope !20
  %1081 = getelementptr inbounds i16, i16* %1077, i64 %986
  %1082 = bitcast i16* %1081 to <8 x i16>*
  %1083 = load <8 x i16>, <8 x i16>* %1082, align 2, !alias.scope !23, !noalias !25
  %1084 = add <8 x i16> %1083, %1080
  %1085 = bitcast i16* %1081 to <8 x i16>*
  store <8 x i16> %1084, <8 x i16>* %1085, align 2, !alias.scope !23, !noalias !25
  %1086 = bitcast i16* %1077 to <8 x i16>*
  %1087 = load <8 x i16>, <8 x i16>* %1086, align 2, !alias.scope !20
  %1088 = and <8 x i16> %1087, <i16 2047, i16 2047, i16 2047, i16 2047, i16 2047, i16 2047, i16 2047, i16 2047>
  %1089 = bitcast i16* %1078 to <8 x i16>*
  store <8 x i16> %1088, <8 x i16>* %1089, align 2, !alias.scope !27, !noalias !20
  br label %1090

1090:                                             ; preds = %1074, %1076
  br i1 %1009, label %1010, label %1091

1091:                                             ; preds = %1090, %1019, %1015
  %1092 = phi i16* [ %1018, %1019 ], [ %1018, %1015 ], [ %1039, %1090 ]
  %1093 = phi i16* [ %1017, %1019 ], [ %1017, %1015 ], [ %1040, %1090 ]
  %1094 = phi i32 [ %772, %1019 ], [ %772, %1015 ], [ %1004, %1090 ]
  br label %1095

1095:                                             ; preds = %1091, %1095
  %1096 = phi i16* [ %1106, %1095 ], [ %1092, %1091 ]
  %1097 = phi i16* [ %1107, %1095 ], [ %1093, %1091 ]
  %1098 = phi i32 [ %1099, %1095 ], [ %1094, %1091 ]
  %1099 = add nsw i32 %1098, -1
  %1100 = load i16, i16* %1096, align 2
  %1101 = getelementptr inbounds i16, i16* %1096, i64 %986
  %1102 = load i16, i16* %1101, align 2
  %1103 = add i16 %1102, %1100
  store i16 %1103, i16* %1101, align 2
  %1104 = load i16, i16* %1096, align 2
  %1105 = and i16 %1104, 2047
  store i16 %1105, i16* %1097, align 2
  %1106 = getelementptr inbounds i16, i16* %1096, i64 1
  %1107 = getelementptr inbounds i16, i16* %1097, i64 1
  %1108 = icmp sgt i32 %1099, 0
  br i1 %1108, label %1095, label %1010, !llvm.loop !29

1109:                                             ; preds = %123
  %1110 = load i16, i16* %22, align 8
  %1111 = zext i16 %1110 to i32
  %1112 = load i8*, i8** %114, align 8
  %1113 = icmp slt i32 %27, %1111
  br i1 %1113, label %1474, label %1114

1114:                                             ; preds = %1109
  switch i16 %1110, label %1253 [
    i16 3, label %1115
    i16 4, label %1175
  ]

1115:                                             ; preds = %1114
  %1116 = load i16, i16* %125, align 2
  %1117 = and i16 %1116, 2047
  %1118 = zext i16 %1117 to i64
  %1119 = getelementptr inbounds i8, i8* %1112, i64 %1118
  %1120 = load i8, i8* %1119, align 1
  store i8 %1120, i8* %127, align 1
  %1121 = getelementptr inbounds i16, i16* %125, i64 1
  %1122 = load i16, i16* %1121, align 2
  %1123 = and i16 %1122, 2047
  %1124 = zext i16 %1123 to i64
  %1125 = getelementptr inbounds i8, i8* %1112, i64 %1124
  %1126 = load i8, i8* %1125, align 1
  %1127 = getelementptr inbounds i8, i8* %127, i64 1
  store i8 %1126, i8* %1127, align 1
  %1128 = getelementptr inbounds i16, i16* %125, i64 2
  %1129 = load i16, i16* %1128, align 2
  %1130 = and i16 %1129, 2047
  %1131 = zext i16 %1130 to i64
  %1132 = getelementptr inbounds i8, i8* %1112, i64 %1131
  %1133 = load i8, i8* %1132, align 1
  %1134 = getelementptr inbounds i8, i8* %127, i64 2
  store i8 %1133, i8* %1134, align 1
  br i1 %118, label %1135, label %1474

1135:                                             ; preds = %1115
  %1136 = zext i16 %1130 to i32
  %1137 = zext i16 %1123 to i32
  %1138 = zext i16 %1117 to i32
  br label %1139

1139:                                             ; preds = %1139, %1135
  %1140 = phi i32 [ %1173, %1139 ], [ %117, %1135 ]
  %1141 = phi i32 [ %1167, %1139 ], [ %1136, %1135 ]
  %1142 = phi i32 [ %1158, %1139 ], [ %1137, %1135 ]
  %1143 = phi i32 [ %1150, %1139 ], [ %1138, %1135 ]
  %1144 = phi i16* [ %1146, %1139 ], [ %125, %1135 ]
  %1145 = phi i8* [ %1147, %1139 ], [ %127, %1135 ]
  %1146 = getelementptr inbounds i16, i16* %1144, i64 3
  %1147 = getelementptr inbounds i8, i8* %1145, i64 3
  %1148 = load i16, i16* %1146, align 2
  %1149 = zext i16 %1148 to i32
  %1150 = add i32 %1143, %1149
  %1151 = and i32 %1150, 2047
  %1152 = zext i32 %1151 to i64
  %1153 = getelementptr inbounds i8, i8* %1112, i64 %1152
  %1154 = load i8, i8* %1153, align 1
  store i8 %1154, i8* %1147, align 1
  %1155 = getelementptr inbounds i16, i16* %1144, i64 4
  %1156 = load i16, i16* %1155, align 2
  %1157 = zext i16 %1156 to i32
  %1158 = add i32 %1142, %1157
  %1159 = and i32 %1158, 2047
  %1160 = zext i32 %1159 to i64
  %1161 = getelementptr inbounds i8, i8* %1112, i64 %1160
  %1162 = load i8, i8* %1161, align 1
  %1163 = getelementptr inbounds i8, i8* %1145, i64 4
  store i8 %1162, i8* %1163, align 1
  %1164 = getelementptr inbounds i16, i16* %1144, i64 5
  %1165 = load i16, i16* %1164, align 2
  %1166 = zext i16 %1165 to i32
  %1167 = add i32 %1141, %1166
  %1168 = and i32 %1167, 2047
  %1169 = zext i32 %1168 to i64
  %1170 = getelementptr inbounds i8, i8* %1112, i64 %1169
  %1171 = load i8, i8* %1170, align 1
  %1172 = getelementptr inbounds i8, i8* %1145, i64 5
  store i8 %1171, i8* %1172, align 1
  %1173 = add nsw i32 %1140, -3
  %1174 = icmp sgt i32 %1173, 0
  br i1 %1174, label %1139, label %1474

1175:                                             ; preds = %1114
  %1176 = load i16, i16* %125, align 2
  %1177 = and i16 %1176, 2047
  %1178 = zext i16 %1177 to i64
  %1179 = getelementptr inbounds i8, i8* %1112, i64 %1178
  %1180 = load i8, i8* %1179, align 1
  store i8 %1180, i8* %127, align 1
  %1181 = getelementptr inbounds i16, i16* %125, i64 1
  %1182 = load i16, i16* %1181, align 2
  %1183 = and i16 %1182, 2047
  %1184 = zext i16 %1183 to i64
  %1185 = getelementptr inbounds i8, i8* %1112, i64 %1184
  %1186 = load i8, i8* %1185, align 1
  %1187 = getelementptr inbounds i8, i8* %127, i64 1
  store i8 %1186, i8* %1187, align 1
  %1188 = getelementptr inbounds i16, i16* %125, i64 2
  %1189 = load i16, i16* %1188, align 2
  %1190 = and i16 %1189, 2047
  %1191 = zext i16 %1190 to i64
  %1192 = getelementptr inbounds i8, i8* %1112, i64 %1191
  %1193 = load i8, i8* %1192, align 1
  %1194 = getelementptr inbounds i8, i8* %127, i64 2
  store i8 %1193, i8* %1194, align 1
  %1195 = getelementptr inbounds i16, i16* %125, i64 3
  %1196 = load i16, i16* %1195, align 2
  %1197 = and i16 %1196, 2047
  %1198 = zext i16 %1197 to i64
  %1199 = getelementptr inbounds i8, i8* %1112, i64 %1198
  %1200 = load i8, i8* %1199, align 1
  %1201 = getelementptr inbounds i8, i8* %127, i64 3
  store i8 %1200, i8* %1201, align 1
  br i1 %116, label %1202, label %1474

1202:                                             ; preds = %1175
  %1203 = zext i16 %1197 to i32
  %1204 = zext i16 %1190 to i32
  %1205 = zext i16 %1183 to i32
  %1206 = zext i16 %1177 to i32
  br label %1207

1207:                                             ; preds = %1207, %1202
  %1208 = phi i32 [ %1251, %1207 ], [ %115, %1202 ]
  %1209 = phi i32 [ %1245, %1207 ], [ %1203, %1202 ]
  %1210 = phi i32 [ %1236, %1207 ], [ %1204, %1202 ]
  %1211 = phi i32 [ %1227, %1207 ], [ %1205, %1202 ]
  %1212 = phi i32 [ %1219, %1207 ], [ %1206, %1202 ]
  %1213 = phi i16* [ %1215, %1207 ], [ %125, %1202 ]
  %1214 = phi i8* [ %1216, %1207 ], [ %127, %1202 ]
  %1215 = getelementptr inbounds i16, i16* %1213, i64 4
  %1216 = getelementptr inbounds i8, i8* %1214, i64 4
  %1217 = load i16, i16* %1215, align 2
  %1218 = zext i16 %1217 to i32
  %1219 = add i32 %1212, %1218
  %1220 = and i32 %1219, 2047
  %1221 = zext i32 %1220 to i64
  %1222 = getelementptr inbounds i8, i8* %1112, i64 %1221
  %1223 = load i8, i8* %1222, align 1
  store i8 %1223, i8* %1216, align 1
  %1224 = getelementptr inbounds i16, i16* %1213, i64 5
  %1225 = load i16, i16* %1224, align 2
  %1226 = zext i16 %1225 to i32
  %1227 = add i32 %1211, %1226
  %1228 = and i32 %1227, 2047
  %1229 = zext i32 %1228 to i64
  %1230 = getelementptr inbounds i8, i8* %1112, i64 %1229
  %1231 = load i8, i8* %1230, align 1
  %1232 = getelementptr inbounds i8, i8* %1214, i64 5
  store i8 %1231, i8* %1232, align 1
  %1233 = getelementptr inbounds i16, i16* %1213, i64 6
  %1234 = load i16, i16* %1233, align 2
  %1235 = zext i16 %1234 to i32
  %1236 = add i32 %1210, %1235
  %1237 = and i32 %1236, 2047
  %1238 = zext i32 %1237 to i64
  %1239 = getelementptr inbounds i8, i8* %1112, i64 %1238
  %1240 = load i8, i8* %1239, align 1
  %1241 = getelementptr inbounds i8, i8* %1214, i64 6
  store i8 %1240, i8* %1241, align 1
  %1242 = getelementptr inbounds i16, i16* %1213, i64 7
  %1243 = load i16, i16* %1242, align 2
  %1244 = zext i16 %1243 to i32
  %1245 = add i32 %1209, %1244
  %1246 = and i32 %1245, 2047
  %1247 = zext i32 %1246 to i64
  %1248 = getelementptr inbounds i8, i8* %1112, i64 %1247
  %1249 = load i8, i8* %1248, align 1
  %1250 = getelementptr inbounds i8, i8* %1214, i64 7
  store i8 %1249, i8* %1250, align 1
  %1251 = add nsw i32 %1208, -4
  %1252 = icmp sgt i32 %1251, 0
  br i1 %1252, label %1207, label %1474

1253:                                             ; preds = %1114, %1253
  %1254 = phi i8* [ %1264, %1253 ], [ %127, %1114 ]
  %1255 = phi i16* [ %1263, %1253 ], [ %125, %1114 ]
  %1256 = phi i32 [ %1257, %1253 ], [ %1111, %1114 ]
  %1257 = add nsw i32 %1256, -1
  %1258 = load i16, i16* %1255, align 2
  %1259 = and i16 %1258, 2047
  %1260 = zext i16 %1259 to i64
  %1261 = getelementptr inbounds i8, i8* %1112, i64 %1260
  %1262 = load i8, i8* %1261, align 1
  store i8 %1262, i8* %1254, align 1
  %1263 = getelementptr inbounds i16, i16* %1255, i64 1
  %1264 = getelementptr inbounds i8, i8* %1254, i64 1
  %1265 = icmp sgt i32 %1257, 0
  br i1 %1265, label %1253, label %1266

1266:                                             ; preds = %1253
  %1267 = sub nsw i32 %27, %1111
  %1268 = icmp sgt i32 %1267, 0
  br i1 %1268, label %1269, label %1474

1269:                                             ; preds = %1266
  %1270 = zext i16 %1110 to i64
  br label %1274

1271:                                             ; preds = %1278
  %1272 = sub nsw i32 %1275, %1111
  %1273 = icmp sgt i32 %1272, 0
  br i1 %1273, label %1274, label %1474

1274:                                             ; preds = %1271, %1269
  %1275 = phi i32 [ %1267, %1269 ], [ %1272, %1271 ]
  %1276 = phi i16* [ %1263, %1269 ], [ %1292, %1271 ]
  %1277 = phi i8* [ %1264, %1269 ], [ %1293, %1271 ]
  br label %1278

1278:                                             ; preds = %1278, %1274
  %1279 = phi i8* [ %1293, %1278 ], [ %1277, %1274 ]
  %1280 = phi i16* [ %1292, %1278 ], [ %1276, %1274 ]
  %1281 = phi i32 [ %1282, %1278 ], [ %1111, %1274 ]
  %1282 = add nsw i32 %1281, -1
  %1283 = load i16, i16* %1280, align 2
  %1284 = getelementptr inbounds i16, i16* %1280, i64 %1270
  %1285 = load i16, i16* %1284, align 2
  %1286 = add i16 %1285, %1283
  store i16 %1286, i16* %1284, align 2
  %1287 = load i16, i16* %1280, align 2
  %1288 = and i16 %1287, 2047
  %1289 = zext i16 %1288 to i64
  %1290 = getelementptr inbounds i8, i8* %1112, i64 %1289
  %1291 = load i8, i8* %1290, align 1
  store i8 %1291, i8* %1279, align 1
  %1292 = getelementptr inbounds i16, i16* %1280, i64 1
  %1293 = getelementptr inbounds i8, i8* %1279, i64 1
  %1294 = icmp sgt i32 %1282, 0
  br i1 %1294, label %1278, label %1271

1295:                                             ; preds = %123
  %1296 = load i16, i16* %22, align 8
  %1297 = zext i16 %1296 to i32
  %1298 = load i8*, i8** %114, align 8
  %1299 = icmp slt i32 %27, %1297
  br i1 %1299, label %1474, label %1300

1300:                                             ; preds = %1295
  switch i16 %1296, label %1426 [
    i16 3, label %1301
    i16 4, label %1363
  ]

1301:                                             ; preds = %1300
  store i8 0, i8* %127, align 1
  %1302 = getelementptr inbounds i16, i16* %125, i64 2
  %1303 = load i16, i16* %1302, align 2
  %1304 = and i16 %1303, 2047
  %1305 = zext i16 %1304 to i64
  %1306 = getelementptr inbounds i8, i8* %1298, i64 %1305
  %1307 = load i8, i8* %1306, align 1
  %1308 = getelementptr inbounds i16, i16* %125, i64 1
  %1309 = load i16, i16* %1308, align 2
  %1310 = and i16 %1309, 2047
  %1311 = zext i16 %1310 to i64
  %1312 = getelementptr inbounds i8, i8* %1298, i64 %1311
  %1313 = load i8, i8* %1312, align 1
  %1314 = load i16, i16* %125, align 2
  %1315 = and i16 %1314, 2047
  %1316 = zext i16 %1315 to i64
  %1317 = getelementptr inbounds i8, i8* %1298, i64 %1316
  %1318 = load i8, i8* %1317, align 1
  %1319 = getelementptr inbounds i8, i8* %127, i64 1
  store i8 %1307, i8* %1319, align 1
  %1320 = getelementptr inbounds i8, i8* %127, i64 2
  store i8 %1313, i8* %1320, align 1
  %1321 = getelementptr inbounds i8, i8* %127, i64 3
  store i8 %1318, i8* %1321, align 1
  br i1 %118, label %1322, label %1474

1322:                                             ; preds = %1301
  %1323 = zext i16 %1315 to i32
  %1324 = zext i16 %1310 to i32
  %1325 = zext i16 %1304 to i32
  br label %1326

1326:                                             ; preds = %1326, %1322
  %1327 = phi i32 [ %1361, %1326 ], [ %117, %1322 ]
  %1328 = phi i32 [ %1338, %1326 ], [ %1325, %1322 ]
  %1329 = phi i32 [ %1346, %1326 ], [ %1324, %1322 ]
  %1330 = phi i32 [ %1353, %1326 ], [ %1323, %1322 ]
  %1331 = phi i16* [ %1333, %1326 ], [ %125, %1322 ]
  %1332 = phi i8* [ %1334, %1326 ], [ %127, %1322 ]
  %1333 = getelementptr inbounds i16, i16* %1331, i64 3
  %1334 = getelementptr inbounds i8, i8* %1332, i64 4
  store i8 0, i8* %1334, align 1
  %1335 = getelementptr inbounds i16, i16* %1331, i64 5
  %1336 = load i16, i16* %1335, align 2
  %1337 = zext i16 %1336 to i32
  %1338 = add i32 %1328, %1337
  %1339 = and i32 %1338, 2047
  %1340 = zext i32 %1339 to i64
  %1341 = getelementptr inbounds i8, i8* %1298, i64 %1340
  %1342 = load i8, i8* %1341, align 1
  %1343 = getelementptr inbounds i16, i16* %1331, i64 4
  %1344 = load i16, i16* %1343, align 2
  %1345 = zext i16 %1344 to i32
  %1346 = add i32 %1329, %1345
  %1347 = and i32 %1346, 2047
  %1348 = zext i32 %1347 to i64
  %1349 = getelementptr inbounds i8, i8* %1298, i64 %1348
  %1350 = load i8, i8* %1349, align 1
  %1351 = load i16, i16* %1333, align 2
  %1352 = zext i16 %1351 to i32
  %1353 = add i32 %1330, %1352
  %1354 = and i32 %1353, 2047
  %1355 = zext i32 %1354 to i64
  %1356 = getelementptr inbounds i8, i8* %1298, i64 %1355
  %1357 = load i8, i8* %1356, align 1
  %1358 = getelementptr inbounds i8, i8* %1332, i64 5
  store i8 %1342, i8* %1358, align 1
  %1359 = getelementptr inbounds i8, i8* %1332, i64 6
  store i8 %1350, i8* %1359, align 1
  %1360 = getelementptr inbounds i8, i8* %1332, i64 7
  store i8 %1357, i8* %1360, align 1
  %1361 = add nsw i32 %1327, -3
  %1362 = icmp sgt i32 %1361, 0
  br i1 %1362, label %1326, label %1474

1363:                                             ; preds = %1300
  %1364 = bitcast i16* %125 to <4 x i16>*
  %1365 = load <4 x i16>, <4 x i16>* %1364, align 2
  %1366 = and <4 x i16> %1365, <i16 2047, i16 2047, i16 2047, i16 2047>
  %1367 = extractelement <4 x i16> %1366, i32 3
  %1368 = zext i16 %1367 to i64
  %1369 = getelementptr inbounds i8, i8* %1298, i64 %1368
  %1370 = load i8, i8* %1369, align 1
  %1371 = extractelement <4 x i16> %1366, i32 2
  %1372 = zext i16 %1371 to i64
  %1373 = getelementptr inbounds i8, i8* %1298, i64 %1372
  %1374 = load i8, i8* %1373, align 1
  %1375 = extractelement <4 x i16> %1366, i32 1
  %1376 = zext i16 %1375 to i64
  %1377 = getelementptr inbounds i8, i8* %1298, i64 %1376
  %1378 = load i8, i8* %1377, align 1
  %1379 = extractelement <4 x i16> %1366, i32 0
  %1380 = zext i16 %1379 to i64
  %1381 = getelementptr inbounds i8, i8* %1298, i64 %1380
  %1382 = load i8, i8* %1381, align 1
  store i8 %1370, i8* %127, align 1
  %1383 = getelementptr inbounds i8, i8* %127, i64 1
  store i8 %1374, i8* %1383, align 1
  %1384 = getelementptr inbounds i8, i8* %127, i64 2
  store i8 %1378, i8* %1384, align 1
  %1385 = getelementptr inbounds i8, i8* %127, i64 3
  store i8 %1382, i8* %1385, align 1
  br i1 %116, label %1386, label %1474

1386:                                             ; preds = %1363
  %1387 = shufflevector <4 x i16> %1366, <4 x i16> undef, <4 x i32> <i32 3, i32 2, i32 1, i32 0>
  %1388 = zext <4 x i16> %1387 to <4 x i32>
  br label %1389

1389:                                             ; preds = %1389, %1386
  %1390 = phi i32 [ %1424, %1389 ], [ %115, %1386 ]
  %1391 = phi i16* [ %1394, %1389 ], [ %125, %1386 ]
  %1392 = phi i8* [ %1395, %1389 ], [ %127, %1386 ]
  %1393 = phi <4 x i32> [ %1400, %1389 ], [ %1388, %1386 ]
  %1394 = getelementptr inbounds i16, i16* %1391, i64 4
  %1395 = getelementptr inbounds i8, i8* %1392, i64 4
  %1396 = bitcast i16* %1394 to <4 x i16>*
  %1397 = load <4 x i16>, <4 x i16>* %1396, align 2
  %1398 = shufflevector <4 x i16> %1397, <4 x i16> undef, <4 x i32> <i32 3, i32 2, i32 1, i32 0>
  %1399 = zext <4 x i16> %1398 to <4 x i32>
  %1400 = add <4 x i32> %1393, %1399
  %1401 = extractelement <4 x i32> %1400, i32 0
  %1402 = and i32 %1401, 2047
  %1403 = zext i32 %1402 to i64
  %1404 = getelementptr inbounds i8, i8* %1298, i64 %1403
  %1405 = load i8, i8* %1404, align 1
  %1406 = extractelement <4 x i32> %1400, i32 1
  %1407 = and i32 %1406, 2047
  %1408 = zext i32 %1407 to i64
  %1409 = getelementptr inbounds i8, i8* %1298, i64 %1408
  %1410 = load i8, i8* %1409, align 1
  %1411 = extractelement <4 x i32> %1400, i32 2
  %1412 = and i32 %1411, 2047
  %1413 = zext i32 %1412 to i64
  %1414 = getelementptr inbounds i8, i8* %1298, i64 %1413
  %1415 = load i8, i8* %1414, align 1
  %1416 = extractelement <4 x i32> %1400, i32 3
  %1417 = and i32 %1416, 2047
  %1418 = zext i32 %1417 to i64
  %1419 = getelementptr inbounds i8, i8* %1298, i64 %1418
  %1420 = load i8, i8* %1419, align 1
  store i8 %1405, i8* %1395, align 1
  %1421 = getelementptr inbounds i8, i8* %1392, i64 5
  store i8 %1410, i8* %1421, align 1
  %1422 = getelementptr inbounds i8, i8* %1392, i64 6
  store i8 %1415, i8* %1422, align 1
  %1423 = getelementptr inbounds i8, i8* %1392, i64 7
  store i8 %1420, i8* %1423, align 1
  %1424 = add nsw i32 %1390, -4
  %1425 = icmp sgt i32 %1424, 0
  br i1 %1425, label %1389, label %1474

1426:                                             ; preds = %1300, %1426
  %1427 = phi i8* [ %1437, %1426 ], [ %127, %1300 ]
  %1428 = phi i16* [ %1436, %1426 ], [ %125, %1300 ]
  %1429 = phi i32 [ %1430, %1426 ], [ %1297, %1300 ]
  %1430 = add nsw i32 %1429, -1
  %1431 = load i16, i16* %1428, align 2
  %1432 = and i16 %1431, 2047
  %1433 = zext i16 %1432 to i64
  %1434 = getelementptr inbounds i8, i8* %1298, i64 %1433
  %1435 = load i8, i8* %1434, align 1
  store i8 %1435, i8* %1427, align 1
  %1436 = getelementptr inbounds i16, i16* %1428, i64 1
  %1437 = getelementptr inbounds i8, i8* %1427, i64 1
  %1438 = icmp sgt i32 %1430, 0
  br i1 %1438, label %1426, label %1439

1439:                                             ; preds = %1426
  %1440 = sub nsw i32 %27, %1297
  %1441 = icmp sgt i32 %1440, 0
  br i1 %1441, label %1442, label %1474

1442:                                             ; preds = %1439
  %1443 = zext i16 %1296 to i64
  br label %1447

1444:                                             ; preds = %1451
  %1445 = sub nsw i32 %1448, %1297
  %1446 = icmp sgt i32 %1445, 0
  br i1 %1446, label %1447, label %1474

1447:                                             ; preds = %1444, %1442
  %1448 = phi i32 [ %1440, %1442 ], [ %1445, %1444 ]
  %1449 = phi i16* [ %1436, %1442 ], [ %1465, %1444 ]
  %1450 = phi i8* [ %1437, %1442 ], [ %1466, %1444 ]
  br label %1451

1451:                                             ; preds = %1451, %1447
  %1452 = phi i8* [ %1466, %1451 ], [ %1450, %1447 ]
  %1453 = phi i16* [ %1465, %1451 ], [ %1449, %1447 ]
  %1454 = phi i32 [ %1455, %1451 ], [ %1297, %1447 ]
  %1455 = add nsw i32 %1454, -1
  %1456 = load i16, i16* %1453, align 2
  %1457 = getelementptr inbounds i16, i16* %1453, i64 %1443
  %1458 = load i16, i16* %1457, align 2
  %1459 = add i16 %1458, %1456
  store i16 %1459, i16* %1457, align 2
  %1460 = load i16, i16* %1453, align 2
  %1461 = and i16 %1460, 2047
  %1462 = zext i16 %1461 to i64
  %1463 = getelementptr inbounds i8, i8* %1298, i64 %1462
  %1464 = load i8, i8* %1463, align 1
  store i8 %1464, i8* %1452, align 1
  %1465 = getelementptr inbounds i16, i16* %1453, i64 1
  %1466 = getelementptr inbounds i8, i8* %1452, i64 1
  %1467 = icmp sgt i32 %1455, 0
  br i1 %1467, label %1451, label %1444

1468:                                             ; preds = %123
  %1469 = getelementptr inbounds %struct.tiff, %struct.tiff* %0, i64 0, i32 55
  %1470 = load i8*, i8** %1469, align 8
  %1471 = getelementptr inbounds %struct.tiff, %struct.tiff* %0, i64 0, i32 9, i32 8
  %1472 = load i16, i16* %1471, align 4
  %1473 = zext i16 %1472 to i32
  tail call void (i8*, i8*, i8*, ...) @TIFFErrorExt(i8* %1470, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @PixarLogDecode.module, i64 0, i64 0), i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.14, i64 0, i64 0), i32 %1473) #7
  br label %1481

1474:                                             ; preds = %1389, %1326, %1444, %1207, %1139, %1271, %932, %879, %1010, %668, %575, %743, %442, %371, %506, %247, %171, %312, %1439, %1363, %1301, %1295, %1266, %1175, %1115, %1109, %980, %909, %862, %770, %738, %623, %537, %530, %501, %407, %345, %338, %307, %213, %141, %134
  %1475 = phi i64 [ %122, %134 ], [ %122, %141 ], [ %122, %213 ], [ %122, %307 ], [ %119, %338 ], [ %119, %345 ], [ %119, %407 ], [ %119, %501 ], [ %119, %530 ], [ %119, %537 ], [ %119, %623 ], [ %119, %738 ], [ %119, %770 ], [ %119, %862 ], [ %119, %909 ], [ %119, %980 ], [ %103, %1109 ], [ %103, %1115 ], [ %103, %1175 ], [ %103, %1266 ], [ %103, %1295 ], [ %103, %1301 ], [ %103, %1363 ], [ %103, %1439 ], [ %122, %312 ], [ %122, %171 ], [ %122, %247 ], [ %119, %506 ], [ %119, %371 ], [ %119, %442 ], [ %119, %743 ], [ %119, %575 ], [ %119, %668 ], [ %119, %1010 ], [ %119, %879 ], [ %119, %932 ], [ %103, %1271 ], [ %103, %1139 ], [ %103, %1207 ], [ %103, %1444 ], [ %103, %1326 ], [ %103, %1389 ]
  %1476 = getelementptr inbounds i8, i8* %127, i64 %1475
  %1477 = add nsw i64 %126, %103
  %1478 = getelementptr inbounds i16, i16* %125, i64 %103
  %1479 = icmp slt i64 %1477, %111
  %1480 = add i64 %124, 1
  br i1 %1479, label %123, label %1481

1481:                                             ; preds = %1474, %110, %72, %62, %1468, %85, %57, %47, %14
  %1482 = phi i32 [ 0, %14 ], [ 0, %47 ], [ 0, %57 ], [ 0, %85 ], [ 0, %1468 ], [ 0, %62 ], [ 0, %72 ], [ 1, %110 ], [ 1, %1474 ]
  ret i32 %1482
}

; Function Attrs: nounwind ssp uwtable
define internal i32 @PixarLogSetupEncode(%struct.tiff* nocapture readonly) #0 {
  %2 = getelementptr inbounds %struct.tiff, %struct.tiff* %0, i64 0, i32 9
  %3 = getelementptr inbounds %struct.tiff, %struct.tiff* %0, i64 0, i32 42
  %4 = bitcast i8** %3 to %struct.PixarLogState**
  %5 = load %struct.PixarLogState*, %struct.PixarLogState** %4, align 8
  %6 = getelementptr inbounds %struct.tiff, %struct.tiff* %0, i64 0, i32 9, i32 24
  %7 = load i16, i16* %6, align 2
  %8 = icmp eq i16 %7, 1
  br i1 %8, label %9, label %12

9:                                                ; preds = %1
  %10 = getelementptr inbounds %struct.tiff, %struct.tiff* %0, i64 0, i32 9, i32 15
  %11 = load i16, i16* %10, align 2
  br label %12

12:                                               ; preds = %1, %9
  %13 = phi i16 [ %11, %9 ], [ 1, %1 ]
  %14 = getelementptr inbounds %struct.PixarLogState, %struct.PixarLogState* %5, i64 0, i32 4
  store i16 %13, i16* %14, align 8
  %15 = zext i16 %13 to i64
  %16 = getelementptr inbounds %struct.tiff, %struct.tiff* %0, i64 0, i32 9, i32 1
  %17 = load i32, i32* %16, align 8
  %18 = zext i32 %17 to i64
  %19 = tail call i64 @_TIFFMultiplySSize(%struct.tiff* null, i64 %15, i64 %18, i8* null) #7
  %20 = getelementptr inbounds %struct.tiff, %struct.tiff* %0, i64 0, i32 9, i32 16
  %21 = load i32, i32* %20, align 4
  %22 = zext i32 %21 to i64
  %23 = tail call i64 @_TIFFMultiplySSize(%struct.tiff* null, i64 %19, i64 %22, i8* null) #7
  %24 = tail call i64 @_TIFFMultiplySSize(%struct.tiff* null, i64 %23, i64 2, i8* null) #7
  %25 = icmp eq i64 %24, 0
  br i1 %25, label %61, label %26

26:                                               ; preds = %12
  %27 = tail call i8* @_TIFFmalloc(i64 %24) #7
  %28 = getelementptr inbounds %struct.PixarLogState, %struct.PixarLogState* %5, i64 0, i32 3
  %29 = bitcast i16** %28 to i8**
  store i8* %27, i8** %29, align 8
  %30 = icmp eq i8* %27, null
  br i1 %30, label %61, label %31

31:                                               ; preds = %26
  %32 = getelementptr inbounds %struct.PixarLogState, %struct.PixarLogState* %5, i64 0, i32 6
  %33 = load i32, i32* %32, align 8
  %34 = icmp eq i32 %33, -1
  br i1 %34, label %35, label %44

35:                                               ; preds = %31
  %36 = tail call fastcc i32 @PixarLogGuessDataFmt(%struct.TIFFDirectory* %2)
  store i32 %36, i32* %32, align 8
  %37 = icmp eq i32 %36, -1
  br i1 %37, label %38, label %44

38:                                               ; preds = %35
  %39 = getelementptr inbounds %struct.tiff, %struct.tiff* %0, i64 0, i32 55
  %40 = load i8*, i8** %39, align 8
  %41 = getelementptr inbounds %struct.tiff, %struct.tiff* %0, i64 0, i32 9, i32 8
  %42 = load i16, i16* %41, align 4
  %43 = zext i16 %42 to i32
  tail call void (i8*, i8*, i8*, ...) @TIFFErrorExt(i8* %40, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @PixarLogSetupEncode.module, i64 0, i64 0), i8* getelementptr inbounds ([58 x i8], [58 x i8]* @.str.15, i64 0, i64 0), i32 %43) #7
  br label %61

44:                                               ; preds = %31, %35
  %45 = getelementptr inbounds %struct.PixarLogState, %struct.PixarLogState* %5, i64 0, i32 1
  %46 = getelementptr inbounds %struct.PixarLogState, %struct.PixarLogState* %5, i64 0, i32 7
  %47 = load i32, i32* %46, align 4
  %48 = tail call i32 @Cr_z_deflateInit_(%struct.z_stream_s* %45, i32 %47, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.4, i64 0, i64 0), i32 112) #7
  %49 = icmp eq i32 %48, 0
  br i1 %49, label %57, label %50

50:                                               ; preds = %44
  %51 = getelementptr inbounds %struct.tiff, %struct.tiff* %0, i64 0, i32 55
  %52 = load i8*, i8** %51, align 8
  %53 = getelementptr inbounds %struct.PixarLogState, %struct.PixarLogState* %5, i64 0, i32 1, i32 6
  %54 = load i8*, i8** %53, align 8
  %55 = icmp eq i8* %54, null
  %56 = select i1 %55, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.6, i64 0, i64 0), i8* %54
  tail call void (i8*, i8*, i8*, ...) @TIFFErrorExt(i8* %52, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @PixarLogSetupEncode.module, i64 0, i64 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.5, i64 0, i64 0), i8* %56) #7
  br label %61

57:                                               ; preds = %44
  %58 = getelementptr inbounds %struct.PixarLogState, %struct.PixarLogState* %5, i64 0, i32 5
  %59 = load i32, i32* %58, align 4
  %60 = or i32 %59, 1
  store i32 %60, i32* %58, align 4
  br label %61

61:                                               ; preds = %26, %12, %57, %50, %38
  %62 = phi i32 [ 0, %38 ], [ 0, %50 ], [ 1, %57 ], [ 0, %12 ], [ 0, %26 ]
  ret i32 %62
}

; Function Attrs: nounwind ssp uwtable
define internal i32 @PixarLogPreEncode(%struct.tiff* nocapture readonly, i16 zeroext) #0 {
  %3 = getelementptr inbounds %struct.tiff, %struct.tiff* %0, i64 0, i32 42
  %4 = bitcast i8** %3 to %struct.PixarLogState**
  %5 = load %struct.PixarLogState*, %struct.PixarLogState** %4, align 8
  %6 = getelementptr inbounds %struct.tiff, %struct.tiff* %0, i64 0, i32 45
  %7 = bitcast i8** %6 to i64*
  %8 = load i64, i64* %7, align 8
  %9 = getelementptr inbounds %struct.PixarLogState, %struct.PixarLogState* %5, i64 0, i32 1, i32 3
  %10 = bitcast i8** %9 to i64*
  store i64 %8, i64* %10, align 8
  %11 = getelementptr inbounds %struct.tiff, %struct.tiff* %0, i64 0, i32 46
  %12 = load i64, i64* %11, align 8
  %13 = trunc i64 %12 to i32
  %14 = getelementptr inbounds %struct.PixarLogState, %struct.PixarLogState* %5, i64 0, i32 1, i32 4
  store i32 %13, i32* %14, align 8
  %15 = and i64 %12, 4294967295
  %16 = load i64, i64* %11, align 8
  %17 = icmp eq i64 %15, %16
  br i1 %17, label %21, label %18

18:                                               ; preds = %2
  %19 = getelementptr inbounds %struct.tiff, %struct.tiff* %0, i64 0, i32 55
  %20 = load i8*, i8** %19, align 8
  tail call void (i8*, i8*, i8*, ...) @TIFFErrorExt(i8* %20, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @PixarLogPreEncode.module, i64 0, i64 0), i8* getelementptr inbounds ([40 x i8], [40 x i8]* @.str.7, i64 0, i64 0)) #7
  br label %26

21:                                               ; preds = %2
  %22 = getelementptr inbounds %struct.PixarLogState, %struct.PixarLogState* %5, i64 0, i32 1
  %23 = tail call i32 @Cr_z_deflateReset(%struct.z_stream_s* %22) #7
  %24 = icmp eq i32 %23, 0
  %25 = zext i1 %24 to i32
  br label %26

26:                                               ; preds = %21, %18
  %27 = phi i32 [ 0, %18 ], [ %25, %21 ]
  ret i32 %27
}

; Function Attrs: nounwind ssp uwtable
define internal i32 @PixarLogPostEncode(%struct.tiff*) #0 {
  %2 = getelementptr inbounds %struct.tiff, %struct.tiff* %0, i64 0, i32 42
  %3 = bitcast i8** %2 to %struct.PixarLogState**
  %4 = load %struct.PixarLogState*, %struct.PixarLogState** %3, align 8
  %5 = getelementptr inbounds %struct.PixarLogState, %struct.PixarLogState* %4, i64 0, i32 1
  %6 = getelementptr inbounds %struct.PixarLogState, %struct.PixarLogState* %4, i64 0, i32 1, i32 1
  store i32 0, i32* %6, align 8
  %7 = getelementptr inbounds %struct.PixarLogState, %struct.PixarLogState* %4, i64 0, i32 1, i32 4
  %8 = getelementptr inbounds %struct.tiff, %struct.tiff* %0, i64 0, i32 46
  %9 = getelementptr inbounds %struct.tiff, %struct.tiff* %0, i64 0, i32 50
  %10 = getelementptr inbounds %struct.tiff, %struct.tiff* %0, i64 0, i32 45
  %11 = bitcast i8** %10 to i64*
  %12 = getelementptr inbounds %struct.PixarLogState, %struct.PixarLogState* %4, i64 0, i32 1, i32 3
  %13 = bitcast i8** %12 to i64*
  br label %14

14:                                               ; preds = %35, %1
  %15 = tail call i32 @Cr_z_deflate(%struct.z_stream_s* %5, i32 4) #7
  %16 = icmp ult i32 %15, 2
  br i1 %16, label %17, label %28

17:                                               ; preds = %14
  %18 = load i32, i32* %7, align 8
  %19 = zext i32 %18 to i64
  %20 = load i64, i64* %8, align 8
  %21 = icmp eq i64 %20, %19
  br i1 %21, label %35, label %22

22:                                               ; preds = %17
  %23 = sub nsw i64 %20, %19
  store i64 %23, i64* %9, align 8
  %24 = tail call i32 @TIFFFlushData1(%struct.tiff* %0) #7
  %25 = load i64, i64* %11, align 8
  store i64 %25, i64* %13, align 8
  %26 = load i64, i64* %8, align 8
  %27 = trunc i64 %26 to i32
  store i32 %27, i32* %7, align 8
  br label %35

28:                                               ; preds = %14
  %29 = getelementptr inbounds %struct.tiff, %struct.tiff* %0, i64 0, i32 55
  %30 = load i8*, i8** %29, align 8
  %31 = getelementptr inbounds %struct.PixarLogState, %struct.PixarLogState* %4, i64 0, i32 1, i32 6
  %32 = load i8*, i8** %31, align 8
  %33 = icmp eq i8* %32, null
  %34 = select i1 %33, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.6, i64 0, i64 0), i8* %32
  tail call void (i8*, i8*, i8*, ...) @TIFFErrorExt(i8* %30, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @PixarLogPostEncode.module, i64 0, i64 0), i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.11, i64 0, i64 0), i8* %34) #7
  br label %37

35:                                               ; preds = %17, %22
  %36 = icmp eq i32 %15, 1
  br i1 %36, label %37, label %14

37:                                               ; preds = %35, %28
  %38 = phi i32 [ 0, %28 ], [ 1, %35 ]
  ret i32 %38
}

; Function Attrs: nounwind ssp uwtable
define internal i32 @PixarLogEncode(%struct.tiff*, i8* nocapture readonly, i64, i16 zeroext) #0 {
  %5 = getelementptr inbounds %struct.tiff, %struct.tiff* %0, i64 0, i32 42
  %6 = bitcast i8** %5 to %struct.PixarLogState**
  %7 = load %struct.PixarLogState*, %struct.PixarLogState** %6, align 8
  %8 = getelementptr inbounds %struct.PixarLogState, %struct.PixarLogState* %7, i64 0, i32 6
  %9 = load i32, i32* %8, align 8
  switch i32 %9, label %14 [
    i32 5, label %10
    i32 4, label %12
    i32 3, label %12
    i32 2, label %12
    i32 0, label %20
    i32 1, label %20
  ]

10:                                               ; preds = %4
  %11 = lshr i64 %2, 2
  br label %20

12:                                               ; preds = %4, %4, %4
  %13 = lshr i64 %2, 1
  br label %20

14:                                               ; preds = %4
  %15 = getelementptr inbounds %struct.tiff, %struct.tiff* %0, i64 0, i32 55
  %16 = load i8*, i8** %15, align 8
  %17 = getelementptr inbounds %struct.tiff, %struct.tiff* %0, i64 0, i32 9, i32 8
  %18 = load i16, i16* %17, align 4
  %19 = zext i16 %18 to i32
  tail call void (i8*, i8*, i8*, ...) @TIFFErrorExt(i8* %16, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @PixarLogEncode.module, i64 0, i64 0), i8* getelementptr inbounds ([39 x i8], [39 x i8]* @.str.8, i64 0, i64 0), i32 %19) #7
  br label %1011

20:                                               ; preds = %4, %4, %12, %10
  %21 = phi i64 [ %13, %12 ], [ %11, %10 ], [ %2, %4 ], [ %2, %4 ]
  %22 = getelementptr inbounds %struct.PixarLogState, %struct.PixarLogState* %7, i64 0, i32 4
  %23 = load i16, i16* %22, align 8
  %24 = zext i16 %23 to i32
  %25 = getelementptr inbounds %struct.tiff, %struct.tiff* %0, i64 0, i32 9, i32 1
  %26 = load i32, i32* %25, align 8
  %27 = mul i32 %26, %24
  %28 = getelementptr inbounds %struct.tiff, %struct.tiff* %0, i64 0, i32 9, i32 16
  %29 = load i32, i32* %28, align 4
  %30 = zext i32 %29 to i64
  %31 = sext i32 %27 to i64
  %32 = mul nsw i64 %30, %31
  %33 = icmp sgt i64 %21, %32
  br i1 %33, label %34, label %37

34:                                               ; preds = %20
  %35 = getelementptr inbounds %struct.tiff, %struct.tiff* %0, i64 0, i32 55
  %36 = load i8*, i8** %35, align 8
  tail call void (i8*, i8*, i8*, ...) @TIFFErrorExt(i8* %36, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @PixarLogEncode.module, i64 0, i64 0), i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.16, i64 0, i64 0)) #7
  br label %1011

37:                                               ; preds = %20
  %38 = getelementptr inbounds %struct.PixarLogState, %struct.PixarLogState* %7, i64 0, i32 3
  %39 = icmp sgt i64 %21, 0
  br i1 %39, label %40, label %969

40:                                               ; preds = %37
  %41 = load i16*, i16** %38, align 8
  %42 = getelementptr inbounds %struct.PixarLogState, %struct.PixarLogState* %7, i64 0, i32 15
  %43 = add nsw i32 %27, -4
  %44 = icmp sgt i32 %43, 0
  %45 = add nsw i32 %27, -3
  %46 = icmp sgt i32 %45, 0
  %47 = getelementptr inbounds %struct.PixarLogState, %struct.PixarLogState* %7, i64 0, i32 14
  %48 = shl nsw i64 %31, 1
  %49 = getelementptr inbounds %struct.PixarLogState, %struct.PixarLogState* %7, i64 0, i32 13
  %50 = shl nsw i64 %31, 2
  br label %51

51:                                               ; preds = %965, %40
  %52 = phi i32 [ %9, %40 ], [ %968, %965 ]
  %53 = phi i16* [ %41, %40 ], [ %967, %965 ]
  %54 = phi i64 [ 0, %40 ], [ %963, %965 ]
  %55 = phi i8* [ %1, %40 ], [ %966, %965 ]
  switch i32 %52, label %955 [
    i32 5, label %56
    i32 4, label %602
    i32 0, label %790
  ]

56:                                               ; preds = %51
  %57 = bitcast i8* %55 to float*
  %58 = load i16, i16* %22, align 8
  %59 = zext i16 %58 to i32
  %60 = load i16*, i16** %49, align 8
  %61 = load float, float* @Fltsize, align 4
  %62 = icmp slt i32 %27, %59
  br i1 %62, label %961, label %63

63:                                               ; preds = %56
  switch i16 %58, label %494 [
    i16 3, label %64
    i16 4, label %249
  ]

64:                                               ; preds = %63
  %65 = load float, float* %57, align 4
  %66 = fcmp olt float %65, 0.000000e+00
  br i1 %66, label %87, label %67

67:                                               ; preds = %64
  %68 = fcmp olt float %65, 2.000000e+00
  br i1 %68, label %69, label %76

69:                                               ; preds = %67
  %70 = fmul float %61, %65
  %71 = fptosi float %70 to i32
  %72 = sext i32 %71 to i64
  %73 = getelementptr inbounds i16, i16* %60, i64 %72
  %74 = load i16, i16* %73, align 2
  %75 = uitofp i16 %74 to double
  br label %87

76:                                               ; preds = %67
  %77 = fcmp ogt float %65, 0x4038333340000000
  br i1 %77, label %87, label %78

78:                                               ; preds = %76
  %79 = load float, float* @LogK1, align 4
  %80 = fpext float %79 to double
  %81 = load float, float* @LogK2, align 4
  %82 = fmul float %65, %81
  %83 = fpext float %82 to double
  %84 = tail call double @log(double %83) #7
  %85 = fmul double %84, %80
  %86 = fadd double %85, 5.000000e-01
  br label %87

87:                                               ; preds = %78, %76, %69, %64
  %88 = phi double [ 0.000000e+00, %64 ], [ %75, %69 ], [ %86, %78 ], [ 2.047000e+03, %76 ]
  %89 = fptoui double %88 to i16
  store i16 %89, i16* %53, align 2
  %90 = zext i16 %89 to i32
  %91 = getelementptr inbounds i8, i8* %55, i64 4
  %92 = bitcast i8* %91 to float*
  %93 = load float, float* %92, align 4
  %94 = fcmp olt float %93, 0.000000e+00
  br i1 %94, label %115, label %95

95:                                               ; preds = %87
  %96 = fcmp olt float %93, 2.000000e+00
  br i1 %96, label %97, label %104

97:                                               ; preds = %95
  %98 = fmul float %61, %93
  %99 = fptosi float %98 to i32
  %100 = sext i32 %99 to i64
  %101 = getelementptr inbounds i16, i16* %60, i64 %100
  %102 = load i16, i16* %101, align 2
  %103 = uitofp i16 %102 to double
  br label %115

104:                                              ; preds = %95
  %105 = fcmp ogt float %93, 0x4038333340000000
  br i1 %105, label %115, label %106

106:                                              ; preds = %104
  %107 = load float, float* @LogK1, align 4
  %108 = fpext float %107 to double
  %109 = load float, float* @LogK2, align 4
  %110 = fmul float %93, %109
  %111 = fpext float %110 to double
  %112 = tail call double @log(double %111) #7
  %113 = fmul double %112, %108
  %114 = fadd double %113, 5.000000e-01
  br label %115

115:                                              ; preds = %106, %104, %97, %87
  %116 = phi double [ 0.000000e+00, %87 ], [ %103, %97 ], [ %114, %106 ], [ 2.047000e+03, %104 ]
  %117 = fptoui double %116 to i16
  %118 = getelementptr inbounds i16, i16* %53, i64 1
  store i16 %117, i16* %118, align 2
  %119 = zext i16 %117 to i32
  %120 = getelementptr inbounds i8, i8* %55, i64 8
  %121 = bitcast i8* %120 to float*
  %122 = load float, float* %121, align 4
  %123 = fcmp olt float %122, 0.000000e+00
  br i1 %123, label %144, label %124

124:                                              ; preds = %115
  %125 = fcmp olt float %122, 2.000000e+00
  br i1 %125, label %126, label %133

126:                                              ; preds = %124
  %127 = fmul float %61, %122
  %128 = fptosi float %127 to i32
  %129 = sext i32 %128 to i64
  %130 = getelementptr inbounds i16, i16* %60, i64 %129
  %131 = load i16, i16* %130, align 2
  %132 = uitofp i16 %131 to double
  br label %144

133:                                              ; preds = %124
  %134 = fcmp ogt float %122, 0x4038333340000000
  br i1 %134, label %144, label %135

135:                                              ; preds = %133
  %136 = load float, float* @LogK1, align 4
  %137 = fpext float %136 to double
  %138 = load float, float* @LogK2, align 4
  %139 = fmul float %122, %138
  %140 = fpext float %139 to double
  %141 = tail call double @log(double %140) #7
  %142 = fmul double %141, %137
  %143 = fadd double %142, 5.000000e-01
  br label %144

144:                                              ; preds = %135, %133, %126, %115
  %145 = phi double [ 0.000000e+00, %115 ], [ %132, %126 ], [ %143, %135 ], [ 2.047000e+03, %133 ]
  %146 = fptoui double %145 to i16
  %147 = getelementptr inbounds i16, i16* %53, i64 2
  store i16 %146, i16* %147, align 2
  br i1 %46, label %148, label %961

148:                                              ; preds = %144
  %149 = zext i16 %146 to i32
  br label %150

150:                                              ; preds = %240, %148
  %151 = phi i32 [ %247, %240 ], [ %45, %148 ]
  %152 = phi i32 [ %242, %240 ], [ %149, %148 ]
  %153 = phi i32 [ %212, %240 ], [ %119, %148 ]
  %154 = phi i32 [ %183, %240 ], [ %90, %148 ]
  %155 = phi float* [ %158, %240 ], [ %57, %148 ]
  %156 = phi i16* [ %157, %240 ], [ %53, %148 ]
  %157 = getelementptr inbounds i16, i16* %156, i64 3
  %158 = getelementptr inbounds float, float* %155, i64 3
  %159 = load float, float* %158, align 4
  %160 = fcmp olt float %159, 0.000000e+00
  br i1 %160, label %181, label %161

161:                                              ; preds = %150
  %162 = fcmp olt float %159, 2.000000e+00
  br i1 %162, label %163, label %170

163:                                              ; preds = %161
  %164 = fmul float %61, %159
  %165 = fptosi float %164 to i32
  %166 = sext i32 %165 to i64
  %167 = getelementptr inbounds i16, i16* %60, i64 %166
  %168 = load i16, i16* %167, align 2
  %169 = uitofp i16 %168 to double
  br label %181

170:                                              ; preds = %161
  %171 = fcmp ogt float %159, 0x4038333340000000
  br i1 %171, label %181, label %172

172:                                              ; preds = %170
  %173 = load float, float* @LogK1, align 4
  %174 = fpext float %173 to double
  %175 = load float, float* @LogK2, align 4
  %176 = fmul float %159, %175
  %177 = fpext float %176 to double
  %178 = tail call double @log(double %177) #7
  %179 = fmul double %178, %174
  %180 = fadd double %179, 5.000000e-01
  br label %181

181:                                              ; preds = %172, %170, %163, %150
  %182 = phi double [ 0.000000e+00, %150 ], [ %169, %163 ], [ %180, %172 ], [ 2.047000e+03, %170 ]
  %183 = fptosi double %182 to i32
  %184 = sub nsw i32 %183, %154
  %185 = trunc i32 %184 to i16
  %186 = and i16 %185, 2047
  store i16 %186, i16* %157, align 2
  %187 = getelementptr inbounds float, float* %155, i64 4
  %188 = load float, float* %187, align 4
  %189 = fcmp olt float %188, 0.000000e+00
  br i1 %189, label %210, label %190

190:                                              ; preds = %181
  %191 = fcmp olt float %188, 2.000000e+00
  br i1 %191, label %192, label %199

192:                                              ; preds = %190
  %193 = fmul float %61, %188
  %194 = fptosi float %193 to i32
  %195 = sext i32 %194 to i64
  %196 = getelementptr inbounds i16, i16* %60, i64 %195
  %197 = load i16, i16* %196, align 2
  %198 = uitofp i16 %197 to double
  br label %210

199:                                              ; preds = %190
  %200 = fcmp ogt float %188, 0x4038333340000000
  br i1 %200, label %210, label %201

201:                                              ; preds = %199
  %202 = load float, float* @LogK1, align 4
  %203 = fpext float %202 to double
  %204 = load float, float* @LogK2, align 4
  %205 = fmul float %188, %204
  %206 = fpext float %205 to double
  %207 = tail call double @log(double %206) #7
  %208 = fmul double %207, %203
  %209 = fadd double %208, 5.000000e-01
  br label %210

210:                                              ; preds = %201, %199, %192, %181
  %211 = phi double [ 0.000000e+00, %181 ], [ %198, %192 ], [ %209, %201 ], [ 2.047000e+03, %199 ]
  %212 = fptosi double %211 to i32
  %213 = sub nsw i32 %212, %153
  %214 = trunc i32 %213 to i16
  %215 = and i16 %214, 2047
  %216 = getelementptr inbounds i16, i16* %156, i64 4
  store i16 %215, i16* %216, align 2
  %217 = getelementptr inbounds float, float* %155, i64 5
  %218 = load float, float* %217, align 4
  %219 = fcmp olt float %218, 0.000000e+00
  br i1 %219, label %240, label %220

220:                                              ; preds = %210
  %221 = fcmp olt float %218, 2.000000e+00
  br i1 %221, label %222, label %229

222:                                              ; preds = %220
  %223 = fmul float %61, %218
  %224 = fptosi float %223 to i32
  %225 = sext i32 %224 to i64
  %226 = getelementptr inbounds i16, i16* %60, i64 %225
  %227 = load i16, i16* %226, align 2
  %228 = uitofp i16 %227 to double
  br label %240

229:                                              ; preds = %220
  %230 = fcmp ogt float %218, 0x4038333340000000
  br i1 %230, label %240, label %231

231:                                              ; preds = %229
  %232 = load float, float* @LogK1, align 4
  %233 = fpext float %232 to double
  %234 = load float, float* @LogK2, align 4
  %235 = fmul float %218, %234
  %236 = fpext float %235 to double
  %237 = tail call double @log(double %236) #7
  %238 = fmul double %237, %233
  %239 = fadd double %238, 5.000000e-01
  br label %240

240:                                              ; preds = %231, %229, %222, %210
  %241 = phi double [ 0.000000e+00, %210 ], [ %228, %222 ], [ %239, %231 ], [ 2.047000e+03, %229 ]
  %242 = fptosi double %241 to i32
  %243 = sub nsw i32 %242, %152
  %244 = trunc i32 %243 to i16
  %245 = and i16 %244, 2047
  %246 = getelementptr inbounds i16, i16* %156, i64 5
  store i16 %245, i16* %246, align 2
  %247 = add nsw i32 %151, -3
  %248 = icmp sgt i32 %247, 0
  br i1 %248, label %150, label %961

249:                                              ; preds = %63
  %250 = load float, float* %57, align 4
  %251 = fcmp olt float %250, 0.000000e+00
  br i1 %251, label %272, label %252

252:                                              ; preds = %249
  %253 = fcmp olt float %250, 2.000000e+00
  br i1 %253, label %254, label %261

254:                                              ; preds = %252
  %255 = fmul float %61, %250
  %256 = fptosi float %255 to i32
  %257 = sext i32 %256 to i64
  %258 = getelementptr inbounds i16, i16* %60, i64 %257
  %259 = load i16, i16* %258, align 2
  %260 = uitofp i16 %259 to double
  br label %272

261:                                              ; preds = %252
  %262 = fcmp ogt float %250, 0x4038333340000000
  br i1 %262, label %272, label %263

263:                                              ; preds = %261
  %264 = load float, float* @LogK1, align 4
  %265 = fpext float %264 to double
  %266 = load float, float* @LogK2, align 4
  %267 = fmul float %250, %266
  %268 = fpext float %267 to double
  %269 = tail call double @log(double %268) #7
  %270 = fmul double %269, %265
  %271 = fadd double %270, 5.000000e-01
  br label %272

272:                                              ; preds = %263, %261, %254, %249
  %273 = phi double [ 0.000000e+00, %249 ], [ %260, %254 ], [ %271, %263 ], [ 2.047000e+03, %261 ]
  %274 = fptoui double %273 to i16
  store i16 %274, i16* %53, align 2
  %275 = zext i16 %274 to i32
  %276 = getelementptr inbounds i8, i8* %55, i64 4
  %277 = bitcast i8* %276 to float*
  %278 = load float, float* %277, align 4
  %279 = fcmp olt float %278, 0.000000e+00
  br i1 %279, label %300, label %280

280:                                              ; preds = %272
  %281 = fcmp olt float %278, 2.000000e+00
  br i1 %281, label %282, label %289

282:                                              ; preds = %280
  %283 = fmul float %61, %278
  %284 = fptosi float %283 to i32
  %285 = sext i32 %284 to i64
  %286 = getelementptr inbounds i16, i16* %60, i64 %285
  %287 = load i16, i16* %286, align 2
  %288 = uitofp i16 %287 to double
  br label %300

289:                                              ; preds = %280
  %290 = fcmp ogt float %278, 0x4038333340000000
  br i1 %290, label %300, label %291

291:                                              ; preds = %289
  %292 = load float, float* @LogK1, align 4
  %293 = fpext float %292 to double
  %294 = load float, float* @LogK2, align 4
  %295 = fmul float %278, %294
  %296 = fpext float %295 to double
  %297 = tail call double @log(double %296) #7
  %298 = fmul double %297, %293
  %299 = fadd double %298, 5.000000e-01
  br label %300

300:                                              ; preds = %291, %289, %282, %272
  %301 = phi double [ 0.000000e+00, %272 ], [ %288, %282 ], [ %299, %291 ], [ 2.047000e+03, %289 ]
  %302 = fptoui double %301 to i16
  %303 = getelementptr inbounds i16, i16* %53, i64 1
  store i16 %302, i16* %303, align 2
  %304 = zext i16 %302 to i32
  %305 = getelementptr inbounds i8, i8* %55, i64 8
  %306 = bitcast i8* %305 to float*
  %307 = load float, float* %306, align 4
  %308 = fcmp olt float %307, 0.000000e+00
  br i1 %308, label %329, label %309

309:                                              ; preds = %300
  %310 = fcmp olt float %307, 2.000000e+00
  br i1 %310, label %311, label %318

311:                                              ; preds = %309
  %312 = fmul float %61, %307
  %313 = fptosi float %312 to i32
  %314 = sext i32 %313 to i64
  %315 = getelementptr inbounds i16, i16* %60, i64 %314
  %316 = load i16, i16* %315, align 2
  %317 = uitofp i16 %316 to double
  br label %329

318:                                              ; preds = %309
  %319 = fcmp ogt float %307, 0x4038333340000000
  br i1 %319, label %329, label %320

320:                                              ; preds = %318
  %321 = load float, float* @LogK1, align 4
  %322 = fpext float %321 to double
  %323 = load float, float* @LogK2, align 4
  %324 = fmul float %307, %323
  %325 = fpext float %324 to double
  %326 = tail call double @log(double %325) #7
  %327 = fmul double %326, %322
  %328 = fadd double %327, 5.000000e-01
  br label %329

329:                                              ; preds = %320, %318, %311, %300
  %330 = phi double [ 0.000000e+00, %300 ], [ %317, %311 ], [ %328, %320 ], [ 2.047000e+03, %318 ]
  %331 = fptoui double %330 to i16
  %332 = getelementptr inbounds i16, i16* %53, i64 2
  store i16 %331, i16* %332, align 2
  %333 = zext i16 %331 to i32
  %334 = getelementptr inbounds i8, i8* %55, i64 12
  %335 = bitcast i8* %334 to float*
  %336 = load float, float* %335, align 4
  %337 = fcmp olt float %336, 0.000000e+00
  br i1 %337, label %358, label %338

338:                                              ; preds = %329
  %339 = fcmp olt float %336, 2.000000e+00
  br i1 %339, label %340, label %347

340:                                              ; preds = %338
  %341 = fmul float %61, %336
  %342 = fptosi float %341 to i32
  %343 = sext i32 %342 to i64
  %344 = getelementptr inbounds i16, i16* %60, i64 %343
  %345 = load i16, i16* %344, align 2
  %346 = uitofp i16 %345 to double
  br label %358

347:                                              ; preds = %338
  %348 = fcmp ogt float %336, 0x4038333340000000
  br i1 %348, label %358, label %349

349:                                              ; preds = %347
  %350 = load float, float* @LogK1, align 4
  %351 = fpext float %350 to double
  %352 = load float, float* @LogK2, align 4
  %353 = fmul float %336, %352
  %354 = fpext float %353 to double
  %355 = tail call double @log(double %354) #7
  %356 = fmul double %355, %351
  %357 = fadd double %356, 5.000000e-01
  br label %358

358:                                              ; preds = %349, %347, %340, %329
  %359 = phi double [ 0.000000e+00, %329 ], [ %346, %340 ], [ %357, %349 ], [ 2.047000e+03, %347 ]
  %360 = fptoui double %359 to i16
  %361 = getelementptr inbounds i16, i16* %53, i64 3
  store i16 %360, i16* %361, align 2
  br i1 %44, label %362, label %961

362:                                              ; preds = %358
  %363 = zext i16 %360 to i32
  br label %364

364:                                              ; preds = %485, %362
  %365 = phi i32 [ %492, %485 ], [ %43, %362 ]
  %366 = phi i32 [ %487, %485 ], [ %363, %362 ]
  %367 = phi i32 [ %457, %485 ], [ %333, %362 ]
  %368 = phi i32 [ %427, %485 ], [ %304, %362 ]
  %369 = phi i32 [ %398, %485 ], [ %275, %362 ]
  %370 = phi float* [ %373, %485 ], [ %57, %362 ]
  %371 = phi i16* [ %372, %485 ], [ %53, %362 ]
  %372 = getelementptr inbounds i16, i16* %371, i64 4
  %373 = getelementptr inbounds float, float* %370, i64 4
  %374 = load float, float* %373, align 4
  %375 = fcmp olt float %374, 0.000000e+00
  br i1 %375, label %396, label %376

376:                                              ; preds = %364
  %377 = fcmp olt float %374, 2.000000e+00
  br i1 %377, label %378, label %385

378:                                              ; preds = %376
  %379 = fmul float %61, %374
  %380 = fptosi float %379 to i32
  %381 = sext i32 %380 to i64
  %382 = getelementptr inbounds i16, i16* %60, i64 %381
  %383 = load i16, i16* %382, align 2
  %384 = uitofp i16 %383 to double
  br label %396

385:                                              ; preds = %376
  %386 = fcmp ogt float %374, 0x4038333340000000
  br i1 %386, label %396, label %387

387:                                              ; preds = %385
  %388 = load float, float* @LogK1, align 4
  %389 = fpext float %388 to double
  %390 = load float, float* @LogK2, align 4
  %391 = fmul float %374, %390
  %392 = fpext float %391 to double
  %393 = tail call double @log(double %392) #7
  %394 = fmul double %393, %389
  %395 = fadd double %394, 5.000000e-01
  br label %396

396:                                              ; preds = %387, %385, %378, %364
  %397 = phi double [ 0.000000e+00, %364 ], [ %384, %378 ], [ %395, %387 ], [ 2.047000e+03, %385 ]
  %398 = fptosi double %397 to i32
  %399 = sub nsw i32 %398, %369
  %400 = trunc i32 %399 to i16
  %401 = and i16 %400, 2047
  store i16 %401, i16* %372, align 2
  %402 = getelementptr inbounds float, float* %370, i64 5
  %403 = load float, float* %402, align 4
  %404 = fcmp olt float %403, 0.000000e+00
  br i1 %404, label %425, label %405

405:                                              ; preds = %396
  %406 = fcmp olt float %403, 2.000000e+00
  br i1 %406, label %407, label %414

407:                                              ; preds = %405
  %408 = fmul float %61, %403
  %409 = fptosi float %408 to i32
  %410 = sext i32 %409 to i64
  %411 = getelementptr inbounds i16, i16* %60, i64 %410
  %412 = load i16, i16* %411, align 2
  %413 = uitofp i16 %412 to double
  br label %425

414:                                              ; preds = %405
  %415 = fcmp ogt float %403, 0x4038333340000000
  br i1 %415, label %425, label %416

416:                                              ; preds = %414
  %417 = load float, float* @LogK1, align 4
  %418 = fpext float %417 to double
  %419 = load float, float* @LogK2, align 4
  %420 = fmul float %403, %419
  %421 = fpext float %420 to double
  %422 = tail call double @log(double %421) #7
  %423 = fmul double %422, %418
  %424 = fadd double %423, 5.000000e-01
  br label %425

425:                                              ; preds = %416, %414, %407, %396
  %426 = phi double [ 0.000000e+00, %396 ], [ %413, %407 ], [ %424, %416 ], [ 2.047000e+03, %414 ]
  %427 = fptosi double %426 to i32
  %428 = sub nsw i32 %427, %368
  %429 = trunc i32 %428 to i16
  %430 = and i16 %429, 2047
  %431 = getelementptr inbounds i16, i16* %371, i64 5
  store i16 %430, i16* %431, align 2
  %432 = getelementptr inbounds float, float* %370, i64 6
  %433 = load float, float* %432, align 4
  %434 = fcmp olt float %433, 0.000000e+00
  br i1 %434, label %455, label %435

435:                                              ; preds = %425
  %436 = fcmp olt float %433, 2.000000e+00
  br i1 %436, label %437, label %444

437:                                              ; preds = %435
  %438 = fmul float %61, %433
  %439 = fptosi float %438 to i32
  %440 = sext i32 %439 to i64
  %441 = getelementptr inbounds i16, i16* %60, i64 %440
  %442 = load i16, i16* %441, align 2
  %443 = uitofp i16 %442 to double
  br label %455

444:                                              ; preds = %435
  %445 = fcmp ogt float %433, 0x4038333340000000
  br i1 %445, label %455, label %446

446:                                              ; preds = %444
  %447 = load float, float* @LogK1, align 4
  %448 = fpext float %447 to double
  %449 = load float, float* @LogK2, align 4
  %450 = fmul float %433, %449
  %451 = fpext float %450 to double
  %452 = tail call double @log(double %451) #7
  %453 = fmul double %452, %448
  %454 = fadd double %453, 5.000000e-01
  br label %455

455:                                              ; preds = %446, %444, %437, %425
  %456 = phi double [ 0.000000e+00, %425 ], [ %443, %437 ], [ %454, %446 ], [ 2.047000e+03, %444 ]
  %457 = fptosi double %456 to i32
  %458 = sub nsw i32 %457, %367
  %459 = trunc i32 %458 to i16
  %460 = and i16 %459, 2047
  %461 = getelementptr inbounds i16, i16* %371, i64 6
  store i16 %460, i16* %461, align 2
  %462 = getelementptr inbounds float, float* %370, i64 7
  %463 = load float, float* %462, align 4
  %464 = fcmp olt float %463, 0.000000e+00
  br i1 %464, label %485, label %465

465:                                              ; preds = %455
  %466 = fcmp olt float %463, 2.000000e+00
  br i1 %466, label %467, label %474

467:                                              ; preds = %465
  %468 = fmul float %61, %463
  %469 = fptosi float %468 to i32
  %470 = sext i32 %469 to i64
  %471 = getelementptr inbounds i16, i16* %60, i64 %470
  %472 = load i16, i16* %471, align 2
  %473 = uitofp i16 %472 to double
  br label %485

474:                                              ; preds = %465
  %475 = fcmp ogt float %463, 0x4038333340000000
  br i1 %475, label %485, label %476

476:                                              ; preds = %474
  %477 = load float, float* @LogK1, align 4
  %478 = fpext float %477 to double
  %479 = load float, float* @LogK2, align 4
  %480 = fmul float %463, %479
  %481 = fpext float %480 to double
  %482 = tail call double @log(double %481) #7
  %483 = fmul double %482, %478
  %484 = fadd double %483, 5.000000e-01
  br label %485

485:                                              ; preds = %476, %474, %467, %455
  %486 = phi double [ 0.000000e+00, %455 ], [ %473, %467 ], [ %484, %476 ], [ 2.047000e+03, %474 ]
  %487 = fptosi double %486 to i32
  %488 = sub nsw i32 %487, %366
  %489 = trunc i32 %488 to i16
  %490 = and i16 %489, 2047
  %491 = getelementptr inbounds i16, i16* %371, i64 7
  store i16 %490, i16* %491, align 2
  %492 = add nsw i32 %365, -4
  %493 = icmp sgt i32 %492, 0
  br i1 %493, label %364, label %961

494:                                              ; preds = %63, %521
  %495 = phi i16* [ %524, %521 ], [ %53, %63 ]
  %496 = phi float* [ %525, %521 ], [ %57, %63 ]
  %497 = phi i32 [ %498, %521 ], [ %59, %63 ]
  %498 = add nsw i32 %497, -1
  %499 = load float, float* %496, align 4
  %500 = fcmp olt float %499, 0.000000e+00
  br i1 %500, label %521, label %501

501:                                              ; preds = %494
  %502 = fcmp olt float %499, 2.000000e+00
  br i1 %502, label %503, label %510

503:                                              ; preds = %501
  %504 = fmul float %61, %499
  %505 = fptosi float %504 to i32
  %506 = sext i32 %505 to i64
  %507 = getelementptr inbounds i16, i16* %60, i64 %506
  %508 = load i16, i16* %507, align 2
  %509 = uitofp i16 %508 to double
  br label %521

510:                                              ; preds = %501
  %511 = fcmp ogt float %499, 0x4038333340000000
  br i1 %511, label %521, label %512

512:                                              ; preds = %510
  %513 = load float, float* @LogK1, align 4
  %514 = fpext float %513 to double
  %515 = load float, float* @LogK2, align 4
  %516 = fmul float %499, %515
  %517 = fpext float %516 to double
  %518 = tail call double @log(double %517) #7
  %519 = fmul double %518, %514
  %520 = fadd double %519, 5.000000e-01
  br label %521

521:                                              ; preds = %512, %510, %503, %494
  %522 = phi double [ 0.000000e+00, %494 ], [ %509, %503 ], [ %520, %512 ], [ 2.047000e+03, %510 ]
  %523 = fptoui double %522 to i16
  store i16 %523, i16* %495, align 2
  %524 = getelementptr inbounds i16, i16* %495, i64 1
  %525 = getelementptr inbounds float, float* %496, i64 1
  %526 = icmp sgt i32 %498, 0
  br i1 %526, label %494, label %527

527:                                              ; preds = %521
  %528 = sub nsw i32 %27, %59
  %529 = icmp sgt i32 %528, 0
  br i1 %529, label %530, label %961

530:                                              ; preds = %527
  %531 = sub nsw i32 0, %59
  %532 = sext i32 %531 to i64
  br label %536

533:                                              ; preds = %593
  %534 = sub nsw i32 %537, %59
  %535 = icmp sgt i32 %534, 0
  br i1 %535, label %536, label %961

536:                                              ; preds = %533, %530
  %537 = phi i32 [ %528, %530 ], [ %534, %533 ]
  %538 = phi float* [ %525, %530 ], [ %600, %533 ]
  %539 = phi i16* [ %524, %530 ], [ %599, %533 ]
  br label %540

540:                                              ; preds = %593, %536
  %541 = phi i16* [ %599, %593 ], [ %539, %536 ]
  %542 = phi float* [ %600, %593 ], [ %538, %536 ]
  %543 = phi i32 [ %544, %593 ], [ %59, %536 ]
  %544 = add nsw i32 %543, -1
  %545 = load float, float* %542, align 4
  %546 = fcmp olt float %545, 0.000000e+00
  br i1 %546, label %567, label %547

547:                                              ; preds = %540
  %548 = fcmp olt float %545, 2.000000e+00
  br i1 %548, label %549, label %556

549:                                              ; preds = %547
  %550 = fmul float %61, %545
  %551 = fptosi float %550 to i32
  %552 = sext i32 %551 to i64
  %553 = getelementptr inbounds i16, i16* %60, i64 %552
  %554 = load i16, i16* %553, align 2
  %555 = uitofp i16 %554 to double
  br label %567

556:                                              ; preds = %547
  %557 = fcmp ogt float %545, 0x4038333340000000
  br i1 %557, label %567, label %558

558:                                              ; preds = %556
  %559 = load float, float* @LogK1, align 4
  %560 = fpext float %559 to double
  %561 = load float, float* @LogK2, align 4
  %562 = fmul float %545, %561
  %563 = fpext float %562 to double
  %564 = tail call double @log(double %563) #7
  %565 = fmul double %564, %560
  %566 = fadd double %565, 5.000000e-01
  br label %567

567:                                              ; preds = %558, %556, %549, %540
  %568 = phi double [ 0.000000e+00, %540 ], [ %555, %549 ], [ %566, %558 ], [ 2.047000e+03, %556 ]
  %569 = fptosi double %568 to i32
  %570 = getelementptr inbounds float, float* %542, i64 %532
  %571 = load float, float* %570, align 4
  %572 = fcmp olt float %571, 0.000000e+00
  br i1 %572, label %593, label %573

573:                                              ; preds = %567
  %574 = fcmp olt float %571, 2.000000e+00
  br i1 %574, label %575, label %582

575:                                              ; preds = %573
  %576 = fmul float %61, %571
  %577 = fptosi float %576 to i32
  %578 = sext i32 %577 to i64
  %579 = getelementptr inbounds i16, i16* %60, i64 %578
  %580 = load i16, i16* %579, align 2
  %581 = uitofp i16 %580 to double
  br label %593

582:                                              ; preds = %573
  %583 = fcmp ogt float %571, 0x4038333340000000
  br i1 %583, label %593, label %584

584:                                              ; preds = %582
  %585 = load float, float* @LogK1, align 4
  %586 = fpext float %585 to double
  %587 = load float, float* @LogK2, align 4
  %588 = fmul float %571, %587
  %589 = fpext float %588 to double
  %590 = tail call double @log(double %589) #7
  %591 = fmul double %590, %586
  %592 = fadd double %591, 5.000000e-01
  br label %593

593:                                              ; preds = %584, %582, %575, %567
  %594 = phi double [ 0.000000e+00, %567 ], [ %581, %575 ], [ %592, %584 ], [ 2.047000e+03, %582 ]
  %595 = fptosi double %594 to i32
  %596 = sub nsw i32 %569, %595
  %597 = trunc i32 %596 to i16
  %598 = and i16 %597, 2047
  store i16 %598, i16* %541, align 2
  %599 = getelementptr inbounds i16, i16* %541, i64 1
  %600 = getelementptr inbounds float, float* %542, i64 1
  %601 = icmp sgt i32 %544, 0
  br i1 %601, label %540, label %533

602:                                              ; preds = %51
  %603 = bitcast i8* %55 to i16*
  %604 = load i16, i16* %22, align 8
  %605 = zext i16 %604 to i32
  %606 = load i16*, i16** %47, align 8
  %607 = icmp slt i32 %27, %605
  br i1 %607, label %961, label %608

608:                                              ; preds = %602
  switch i16 %604, label %743 [
    i16 3, label %609
    i16 4, label %667
  ]

609:                                              ; preds = %608
  %610 = load i16, i16* %603, align 2
  %611 = lshr i16 %610, 2
  %612 = zext i16 %611 to i64
  %613 = getelementptr inbounds i16, i16* %606, i64 %612
  %614 = load i16, i16* %613, align 2
  store i16 %614, i16* %53, align 2
  %615 = getelementptr inbounds i8, i8* %55, i64 2
  %616 = bitcast i8* %615 to i16*
  %617 = load i16, i16* %616, align 2
  %618 = lshr i16 %617, 2
  %619 = zext i16 %618 to i64
  %620 = getelementptr inbounds i16, i16* %606, i64 %619
  %621 = load i16, i16* %620, align 2
  %622 = getelementptr inbounds i16, i16* %53, i64 1
  store i16 %621, i16* %622, align 2
  %623 = getelementptr inbounds i8, i8* %55, i64 4
  %624 = bitcast i8* %623 to i16*
  %625 = load i16, i16* %624, align 2
  %626 = lshr i16 %625, 2
  %627 = zext i16 %626 to i64
  %628 = getelementptr inbounds i16, i16* %606, i64 %627
  %629 = load i16, i16* %628, align 2
  %630 = getelementptr inbounds i16, i16* %53, i64 2
  store i16 %629, i16* %630, align 2
  br i1 %46, label %631, label %961

631:                                              ; preds = %609, %631
  %632 = phi i32 [ %665, %631 ], [ %45, %609 ]
  %633 = phi i16 [ %661, %631 ], [ %629, %609 ]
  %634 = phi i16 [ %652, %631 ], [ %621, %609 ]
  %635 = phi i16 [ %644, %631 ], [ %614, %609 ]
  %636 = phi i16* [ %639, %631 ], [ %603, %609 ]
  %637 = phi i16* [ %638, %631 ], [ %53, %609 ]
  %638 = getelementptr inbounds i16, i16* %637, i64 3
  %639 = getelementptr inbounds i16, i16* %636, i64 3
  %640 = load i16, i16* %639, align 2
  %641 = lshr i16 %640, 2
  %642 = zext i16 %641 to i64
  %643 = getelementptr inbounds i16, i16* %606, i64 %642
  %644 = load i16, i16* %643, align 2
  %645 = sub i16 %644, %635
  %646 = and i16 %645, 2047
  store i16 %646, i16* %638, align 2
  %647 = getelementptr inbounds i16, i16* %636, i64 4
  %648 = load i16, i16* %647, align 2
  %649 = lshr i16 %648, 2
  %650 = zext i16 %649 to i64
  %651 = getelementptr inbounds i16, i16* %606, i64 %650
  %652 = load i16, i16* %651, align 2
  %653 = sub i16 %652, %634
  %654 = and i16 %653, 2047
  %655 = getelementptr inbounds i16, i16* %637, i64 4
  store i16 %654, i16* %655, align 2
  %656 = getelementptr inbounds i16, i16* %636, i64 5
  %657 = load i16, i16* %656, align 2
  %658 = lshr i16 %657, 2
  %659 = zext i16 %658 to i64
  %660 = getelementptr inbounds i16, i16* %606, i64 %659
  %661 = load i16, i16* %660, align 2
  %662 = sub i16 %661, %633
  %663 = and i16 %662, 2047
  %664 = getelementptr inbounds i16, i16* %637, i64 5
  store i16 %663, i16* %664, align 2
  %665 = add nsw i32 %632, -3
  %666 = icmp sgt i32 %665, 0
  br i1 %666, label %631, label %961

667:                                              ; preds = %608
  %668 = load i16, i16* %603, align 2
  %669 = lshr i16 %668, 2
  %670 = zext i16 %669 to i64
  %671 = getelementptr inbounds i16, i16* %606, i64 %670
  %672 = load i16, i16* %671, align 2
  store i16 %672, i16* %53, align 2
  %673 = getelementptr inbounds i8, i8* %55, i64 2
  %674 = bitcast i8* %673 to i16*
  %675 = load i16, i16* %674, align 2
  %676 = lshr i16 %675, 2
  %677 = zext i16 %676 to i64
  %678 = getelementptr inbounds i16, i16* %606, i64 %677
  %679 = load i16, i16* %678, align 2
  %680 = getelementptr inbounds i16, i16* %53, i64 1
  store i16 %679, i16* %680, align 2
  %681 = getelementptr inbounds i8, i8* %55, i64 4
  %682 = bitcast i8* %681 to i16*
  %683 = load i16, i16* %682, align 2
  %684 = lshr i16 %683, 2
  %685 = zext i16 %684 to i64
  %686 = getelementptr inbounds i16, i16* %606, i64 %685
  %687 = load i16, i16* %686, align 2
  %688 = getelementptr inbounds i16, i16* %53, i64 2
  store i16 %687, i16* %688, align 2
  %689 = getelementptr inbounds i8, i8* %55, i64 6
  %690 = bitcast i8* %689 to i16*
  %691 = load i16, i16* %690, align 2
  %692 = lshr i16 %691, 2
  %693 = zext i16 %692 to i64
  %694 = getelementptr inbounds i16, i16* %606, i64 %693
  %695 = load i16, i16* %694, align 2
  %696 = getelementptr inbounds i16, i16* %53, i64 3
  store i16 %695, i16* %696, align 2
  br i1 %44, label %697, label %961

697:                                              ; preds = %667, %697
  %698 = phi i32 [ %741, %697 ], [ %43, %667 ]
  %699 = phi i16 [ %737, %697 ], [ %695, %667 ]
  %700 = phi i16 [ %728, %697 ], [ %687, %667 ]
  %701 = phi i16 [ %719, %697 ], [ %679, %667 ]
  %702 = phi i16 [ %711, %697 ], [ %672, %667 ]
  %703 = phi i16* [ %706, %697 ], [ %603, %667 ]
  %704 = phi i16* [ %705, %697 ], [ %53, %667 ]
  %705 = getelementptr inbounds i16, i16* %704, i64 4
  %706 = getelementptr inbounds i16, i16* %703, i64 4
  %707 = load i16, i16* %706, align 2
  %708 = lshr i16 %707, 2
  %709 = zext i16 %708 to i64
  %710 = getelementptr inbounds i16, i16* %606, i64 %709
  %711 = load i16, i16* %710, align 2
  %712 = sub i16 %711, %702
  %713 = and i16 %712, 2047
  store i16 %713, i16* %705, align 2
  %714 = getelementptr inbounds i16, i16* %703, i64 5
  %715 = load i16, i16* %714, align 2
  %716 = lshr i16 %715, 2
  %717 = zext i16 %716 to i64
  %718 = getelementptr inbounds i16, i16* %606, i64 %717
  %719 = load i16, i16* %718, align 2
  %720 = sub i16 %719, %701
  %721 = and i16 %720, 2047
  %722 = getelementptr inbounds i16, i16* %704, i64 5
  store i16 %721, i16* %722, align 2
  %723 = getelementptr inbounds i16, i16* %703, i64 6
  %724 = load i16, i16* %723, align 2
  %725 = lshr i16 %724, 2
  %726 = zext i16 %725 to i64
  %727 = getelementptr inbounds i16, i16* %606, i64 %726
  %728 = load i16, i16* %727, align 2
  %729 = sub i16 %728, %700
  %730 = and i16 %729, 2047
  %731 = getelementptr inbounds i16, i16* %704, i64 6
  store i16 %730, i16* %731, align 2
  %732 = getelementptr inbounds i16, i16* %703, i64 7
  %733 = load i16, i16* %732, align 2
  %734 = lshr i16 %733, 2
  %735 = zext i16 %734 to i64
  %736 = getelementptr inbounds i16, i16* %606, i64 %735
  %737 = load i16, i16* %736, align 2
  %738 = sub i16 %737, %699
  %739 = and i16 %738, 2047
  %740 = getelementptr inbounds i16, i16* %704, i64 7
  store i16 %739, i16* %740, align 2
  %741 = add nsw i32 %698, -4
  %742 = icmp sgt i32 %741, 0
  br i1 %742, label %697, label %961

743:                                              ; preds = %608, %743
  %744 = phi i16* [ %753, %743 ], [ %53, %608 ]
  %745 = phi i16* [ %754, %743 ], [ %603, %608 ]
  %746 = phi i32 [ %747, %743 ], [ %605, %608 ]
  %747 = add nsw i32 %746, -1
  %748 = load i16, i16* %745, align 2
  %749 = lshr i16 %748, 2
  %750 = zext i16 %749 to i64
  %751 = getelementptr inbounds i16, i16* %606, i64 %750
  %752 = load i16, i16* %751, align 2
  store i16 %752, i16* %744, align 2
  %753 = getelementptr inbounds i16, i16* %744, i64 1
  %754 = getelementptr inbounds i16, i16* %745, i64 1
  %755 = icmp sgt i32 %747, 0
  br i1 %755, label %743, label %756

756:                                              ; preds = %743
  %757 = sub nsw i32 %27, %605
  %758 = icmp sgt i32 %757, 0
  br i1 %758, label %759, label %961

759:                                              ; preds = %756
  %760 = sub nsw i32 0, %605
  %761 = sext i32 %760 to i64
  br label %765

762:                                              ; preds = %769
  %763 = sub nsw i32 %766, %605
  %764 = icmp sgt i32 %763, 0
  br i1 %764, label %765, label %961

765:                                              ; preds = %762, %759
  %766 = phi i32 [ %757, %759 ], [ %763, %762 ]
  %767 = phi i16* [ %754, %759 ], [ %788, %762 ]
  %768 = phi i16* [ %753, %759 ], [ %787, %762 ]
  br label %769

769:                                              ; preds = %769, %765
  %770 = phi i16* [ %787, %769 ], [ %768, %765 ]
  %771 = phi i16* [ %788, %769 ], [ %767, %765 ]
  %772 = phi i32 [ %773, %769 ], [ %605, %765 ]
  %773 = add nsw i32 %772, -1
  %774 = load i16, i16* %771, align 2
  %775 = lshr i16 %774, 2
  %776 = zext i16 %775 to i64
  %777 = getelementptr inbounds i16, i16* %606, i64 %776
  %778 = load i16, i16* %777, align 2
  %779 = getelementptr inbounds i16, i16* %771, i64 %761
  %780 = load i16, i16* %779, align 2
  %781 = lshr i16 %780, 2
  %782 = zext i16 %781 to i64
  %783 = getelementptr inbounds i16, i16* %606, i64 %782
  %784 = load i16, i16* %783, align 2
  %785 = sub i16 %778, %784
  %786 = and i16 %785, 2047
  store i16 %786, i16* %770, align 2
  %787 = getelementptr inbounds i16, i16* %770, i64 1
  %788 = getelementptr inbounds i16, i16* %771, i64 1
  %789 = icmp sgt i32 %773, 0
  br i1 %789, label %769, label %762

790:                                              ; preds = %51
  %791 = load i16, i16* %22, align 8
  %792 = zext i16 %791 to i32
  %793 = load i16*, i16** %42, align 8
  %794 = icmp slt i32 %27, %792
  br i1 %794, label %961, label %795

795:                                              ; preds = %790
  switch i16 %791, label %911 [
    i16 3, label %796
    i16 4, label %846
  ]

796:                                              ; preds = %795
  %797 = load i8, i8* %55, align 1
  %798 = zext i8 %797 to i64
  %799 = getelementptr inbounds i16, i16* %793, i64 %798
  %800 = load i16, i16* %799, align 2
  store i16 %800, i16* %53, align 2
  %801 = getelementptr inbounds i8, i8* %55, i64 1
  %802 = load i8, i8* %801, align 1
  %803 = zext i8 %802 to i64
  %804 = getelementptr inbounds i16, i16* %793, i64 %803
  %805 = load i16, i16* %804, align 2
  %806 = getelementptr inbounds i16, i16* %53, i64 1
  store i16 %805, i16* %806, align 2
  %807 = getelementptr inbounds i8, i8* %55, i64 2
  %808 = load i8, i8* %807, align 1
  %809 = zext i8 %808 to i64
  %810 = getelementptr inbounds i16, i16* %793, i64 %809
  %811 = load i16, i16* %810, align 2
  %812 = getelementptr inbounds i16, i16* %53, i64 2
  store i16 %811, i16* %812, align 2
  br i1 %46, label %813, label %961

813:                                              ; preds = %796, %813
  %814 = phi i32 [ %844, %813 ], [ %45, %796 ]
  %815 = phi i16 [ %840, %813 ], [ %811, %796 ]
  %816 = phi i16 [ %832, %813 ], [ %805, %796 ]
  %817 = phi i16 [ %824, %813 ], [ %800, %796 ]
  %818 = phi i8* [ %820, %813 ], [ %55, %796 ]
  %819 = phi i16* [ %827, %813 ], [ %53, %796 ]
  %820 = getelementptr inbounds i8, i8* %818, i64 3
  %821 = load i8, i8* %820, align 1
  %822 = zext i8 %821 to i64
  %823 = getelementptr inbounds i16, i16* %793, i64 %822
  %824 = load i16, i16* %823, align 2
  %825 = sub i16 %824, %817
  %826 = and i16 %825, 2047
  %827 = getelementptr inbounds i16, i16* %819, i64 3
  store i16 %826, i16* %827, align 2
  %828 = getelementptr inbounds i8, i8* %818, i64 4
  %829 = load i8, i8* %828, align 1
  %830 = zext i8 %829 to i64
  %831 = getelementptr inbounds i16, i16* %793, i64 %830
  %832 = load i16, i16* %831, align 2
  %833 = sub i16 %832, %816
  %834 = and i16 %833, 2047
  %835 = getelementptr inbounds i16, i16* %819, i64 4
  store i16 %834, i16* %835, align 2
  %836 = getelementptr inbounds i8, i8* %818, i64 5
  %837 = load i8, i8* %836, align 1
  %838 = zext i8 %837 to i64
  %839 = getelementptr inbounds i16, i16* %793, i64 %838
  %840 = load i16, i16* %839, align 2
  %841 = sub i16 %840, %815
  %842 = and i16 %841, 2047
  %843 = getelementptr inbounds i16, i16* %819, i64 5
  store i16 %842, i16* %843, align 2
  %844 = add nsw i32 %814, -3
  %845 = icmp sgt i32 %844, 0
  br i1 %845, label %813, label %961

846:                                              ; preds = %795
  %847 = load i8, i8* %55, align 1
  %848 = zext i8 %847 to i64
  %849 = getelementptr inbounds i16, i16* %793, i64 %848
  %850 = load i16, i16* %849, align 2
  store i16 %850, i16* %53, align 2
  %851 = getelementptr inbounds i8, i8* %55, i64 1
  %852 = load i8, i8* %851, align 1
  %853 = zext i8 %852 to i64
  %854 = getelementptr inbounds i16, i16* %793, i64 %853
  %855 = load i16, i16* %854, align 2
  %856 = getelementptr inbounds i16, i16* %53, i64 1
  store i16 %855, i16* %856, align 2
  %857 = getelementptr inbounds i8, i8* %55, i64 2
  %858 = load i8, i8* %857, align 1
  %859 = zext i8 %858 to i64
  %860 = getelementptr inbounds i16, i16* %793, i64 %859
  %861 = load i16, i16* %860, align 2
  %862 = getelementptr inbounds i16, i16* %53, i64 2
  store i16 %861, i16* %862, align 2
  %863 = getelementptr inbounds i8, i8* %55, i64 3
  %864 = load i8, i8* %863, align 1
  %865 = zext i8 %864 to i64
  %866 = getelementptr inbounds i16, i16* %793, i64 %865
  %867 = load i16, i16* %866, align 2
  %868 = getelementptr inbounds i16, i16* %53, i64 3
  store i16 %867, i16* %868, align 2
  br i1 %44, label %869, label %961

869:                                              ; preds = %846, %869
  %870 = phi i32 [ %909, %869 ], [ %43, %846 ]
  %871 = phi i16 [ %905, %869 ], [ %867, %846 ]
  %872 = phi i16 [ %897, %869 ], [ %861, %846 ]
  %873 = phi i16 [ %889, %869 ], [ %855, %846 ]
  %874 = phi i16 [ %881, %869 ], [ %850, %846 ]
  %875 = phi i8* [ %877, %869 ], [ %55, %846 ]
  %876 = phi i16* [ %884, %869 ], [ %53, %846 ]
  %877 = getelementptr inbounds i8, i8* %875, i64 4
  %878 = load i8, i8* %877, align 1
  %879 = zext i8 %878 to i64
  %880 = getelementptr inbounds i16, i16* %793, i64 %879
  %881 = load i16, i16* %880, align 2
  %882 = sub i16 %881, %874
  %883 = and i16 %882, 2047
  %884 = getelementptr inbounds i16, i16* %876, i64 4
  store i16 %883, i16* %884, align 2
  %885 = getelementptr inbounds i8, i8* %875, i64 5
  %886 = load i8, i8* %885, align 1
  %887 = zext i8 %886 to i64
  %888 = getelementptr inbounds i16, i16* %793, i64 %887
  %889 = load i16, i16* %888, align 2
  %890 = sub i16 %889, %873
  %891 = and i16 %890, 2047
  %892 = getelementptr inbounds i16, i16* %876, i64 5
  store i16 %891, i16* %892, align 2
  %893 = getelementptr inbounds i8, i8* %875, i64 6
  %894 = load i8, i8* %893, align 1
  %895 = zext i8 %894 to i64
  %896 = getelementptr inbounds i16, i16* %793, i64 %895
  %897 = load i16, i16* %896, align 2
  %898 = sub i16 %897, %872
  %899 = and i16 %898, 2047
  %900 = getelementptr inbounds i16, i16* %876, i64 6
  store i16 %899, i16* %900, align 2
  %901 = getelementptr inbounds i8, i8* %875, i64 7
  %902 = load i8, i8* %901, align 1
  %903 = zext i8 %902 to i64
  %904 = getelementptr inbounds i16, i16* %793, i64 %903
  %905 = load i16, i16* %904, align 2
  %906 = sub i16 %905, %871
  %907 = and i16 %906, 2047
  %908 = getelementptr inbounds i16, i16* %876, i64 7
  store i16 %907, i16* %908, align 2
  %909 = add nsw i32 %870, -4
  %910 = icmp sgt i32 %909, 0
  br i1 %910, label %869, label %961

911:                                              ; preds = %795, %911
  %912 = phi i16* [ %920, %911 ], [ %53, %795 ]
  %913 = phi i8* [ %921, %911 ], [ %55, %795 ]
  %914 = phi i32 [ %915, %911 ], [ %792, %795 ]
  %915 = add nsw i32 %914, -1
  %916 = load i8, i8* %913, align 1
  %917 = zext i8 %916 to i64
  %918 = getelementptr inbounds i16, i16* %793, i64 %917
  %919 = load i16, i16* %918, align 2
  store i16 %919, i16* %912, align 2
  %920 = getelementptr inbounds i16, i16* %912, i64 1
  %921 = getelementptr inbounds i8, i8* %913, i64 1
  %922 = icmp sgt i32 %915, 0
  br i1 %922, label %911, label %923

923:                                              ; preds = %911
  %924 = sub nsw i32 %27, %792
  %925 = icmp sgt i32 %924, 0
  br i1 %925, label %926, label %961

926:                                              ; preds = %923
  %927 = sub nsw i32 0, %792
  %928 = sext i32 %927 to i64
  br label %932

929:                                              ; preds = %936
  %930 = sub nsw i32 %933, %792
  %931 = icmp sgt i32 %930, 0
  br i1 %931, label %932, label %961

932:                                              ; preds = %929, %926
  %933 = phi i32 [ %924, %926 ], [ %930, %929 ]
  %934 = phi i8* [ %921, %926 ], [ %953, %929 ]
  %935 = phi i16* [ %920, %926 ], [ %952, %929 ]
  br label %936

936:                                              ; preds = %936, %932
  %937 = phi i16* [ %952, %936 ], [ %935, %932 ]
  %938 = phi i8* [ %953, %936 ], [ %934, %932 ]
  %939 = phi i32 [ %940, %936 ], [ %792, %932 ]
  %940 = add nsw i32 %939, -1
  %941 = load i8, i8* %938, align 1
  %942 = zext i8 %941 to i64
  %943 = getelementptr inbounds i16, i16* %793, i64 %942
  %944 = load i16, i16* %943, align 2
  %945 = getelementptr inbounds i8, i8* %938, i64 %928
  %946 = load i8, i8* %945, align 1
  %947 = zext i8 %946 to i64
  %948 = getelementptr inbounds i16, i16* %793, i64 %947
  %949 = load i16, i16* %948, align 2
  %950 = sub i16 %944, %949
  %951 = and i16 %950, 2047
  store i16 %951, i16* %937, align 2
  %952 = getelementptr inbounds i16, i16* %937, i64 1
  %953 = getelementptr inbounds i8, i8* %938, i64 1
  %954 = icmp sgt i32 %940, 0
  br i1 %954, label %936, label %929

955:                                              ; preds = %51
  %956 = getelementptr inbounds %struct.tiff, %struct.tiff* %0, i64 0, i32 55
  %957 = load i8*, i8** %956, align 8
  %958 = getelementptr inbounds %struct.tiff, %struct.tiff* %0, i64 0, i32 9, i32 8
  %959 = load i16, i16* %958, align 4
  %960 = zext i16 %959 to i32
  tail call void (i8*, i8*, i8*, ...) @TIFFErrorExt(i8* %957, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @PixarLogEncode.module, i64 0, i64 0), i8* getelementptr inbounds ([39 x i8], [39 x i8]* @.str.8, i64 0, i64 0), i32 %960) #7
  br label %1011

961:                                              ; preds = %869, %813, %929, %697, %631, %762, %485, %240, %533, %923, %846, %796, %790, %756, %667, %609, %602, %527, %358, %144, %56
  %962 = phi i64 [ %50, %56 ], [ %50, %144 ], [ %50, %358 ], [ %50, %527 ], [ %48, %602 ], [ %48, %609 ], [ %48, %667 ], [ %48, %756 ], [ %31, %790 ], [ %31, %796 ], [ %31, %846 ], [ %31, %923 ], [ %50, %533 ], [ %50, %240 ], [ %50, %485 ], [ %48, %762 ], [ %48, %631 ], [ %48, %697 ], [ %31, %929 ], [ %31, %813 ], [ %31, %869 ]
  %963 = add nsw i64 %54, %31
  %964 = icmp slt i64 %963, %21
  br i1 %964, label %965, label %969

965:                                              ; preds = %961
  %966 = getelementptr inbounds i8, i8* %55, i64 %962
  %967 = getelementptr inbounds i16, i16* %53, i64 %31
  %968 = load i32, i32* %8, align 8
  br label %51

969:                                              ; preds = %961, %37
  %970 = bitcast i16** %38 to i64*
  %971 = load i64, i64* %970, align 8
  %972 = getelementptr inbounds %struct.PixarLogState, %struct.PixarLogState* %7, i64 0, i32 1
  %973 = bitcast %struct.z_stream_s* %972 to i64*
  store i64 %971, i64* %973, align 8
  %974 = trunc i64 %21 to i32
  %975 = shl i32 %974, 1
  %976 = getelementptr inbounds %struct.PixarLogState, %struct.PixarLogState* %7, i64 0, i32 1, i32 1
  store i32 %975, i32* %976, align 8
  %977 = icmp slt i32 %974, 0
  br i1 %977, label %986, label %978

978:                                              ; preds = %969
  %979 = getelementptr inbounds %struct.PixarLogState, %struct.PixarLogState* %7, i64 0, i32 1, i32 4
  %980 = getelementptr inbounds %struct.tiff, %struct.tiff* %0, i64 0, i32 46
  %981 = getelementptr inbounds %struct.tiff, %struct.tiff* %0, i64 0, i32 50
  %982 = getelementptr inbounds %struct.tiff, %struct.tiff* %0, i64 0, i32 45
  %983 = bitcast i8** %982 to i64*
  %984 = getelementptr inbounds %struct.PixarLogState, %struct.PixarLogState* %7, i64 0, i32 1, i32 3
  %985 = bitcast i8** %984 to i64*
  br label %989

986:                                              ; preds = %969
  %987 = getelementptr inbounds %struct.tiff, %struct.tiff* %0, i64 0, i32 55
  %988 = load i8*, i8** %987, align 8
  tail call void (i8*, i8*, i8*, ...) @TIFFErrorExt(i8* %988, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @PixarLogEncode.module, i64 0, i64 0), i8* getelementptr inbounds ([40 x i8], [40 x i8]* @.str.7, i64 0, i64 0)) #7
  br label %1011

989:                                              ; preds = %978, %1008
  %990 = tail call i32 @Cr_z_deflate(%struct.z_stream_s* %972, i32 0) #7
  %991 = icmp eq i32 %990, 0
  br i1 %991, label %999, label %992

992:                                              ; preds = %989
  %993 = getelementptr inbounds %struct.tiff, %struct.tiff* %0, i64 0, i32 55
  %994 = load i8*, i8** %993, align 8
  %995 = getelementptr inbounds %struct.PixarLogState, %struct.PixarLogState* %7, i64 0, i32 1, i32 6
  %996 = load i8*, i8** %995, align 8
  %997 = icmp eq i8* %996, null
  %998 = select i1 %997, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.6, i64 0, i64 0), i8* %996
  tail call void (i8*, i8*, i8*, ...) @TIFFErrorExt(i8* %994, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @PixarLogEncode.module, i64 0, i64 0), i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.17, i64 0, i64 0), i8* %998) #7
  br label %1011

999:                                              ; preds = %989
  %1000 = load i32, i32* %979, align 8
  %1001 = icmp eq i32 %1000, 0
  br i1 %1001, label %1002, label %1008

1002:                                             ; preds = %999
  %1003 = load i64, i64* %980, align 8
  store i64 %1003, i64* %981, align 8
  %1004 = tail call i32 @TIFFFlushData1(%struct.tiff* %0) #7
  %1005 = load i64, i64* %983, align 8
  store i64 %1005, i64* %985, align 8
  %1006 = load i64, i64* %980, align 8
  %1007 = trunc i64 %1006 to i32
  store i32 %1007, i32* %979, align 8
  br label %1008

1008:                                             ; preds = %999, %1002
  %1009 = load i32, i32* %976, align 8
  %1010 = icmp eq i32 %1009, 0
  br i1 %1010, label %1011, label %989

1011:                                             ; preds = %1008, %992, %986, %955, %34, %14
  %1012 = phi i32 [ 0, %14 ], [ 0, %34 ], [ 0, %955 ], [ 0, %986 ], [ 0, %992 ], [ 1, %1008 ]
  ret i32 %1012
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal void @PixarLogClose(%struct.tiff* nocapture) #3 {
  %2 = getelementptr inbounds %struct.tiff, %struct.tiff* %0, i64 0, i32 42
  %3 = bitcast i8** %2 to %struct.PixarLogState**
  %4 = load %struct.PixarLogState*, %struct.PixarLogState** %3, align 8
  %5 = getelementptr inbounds %struct.PixarLogState, %struct.PixarLogState* %4, i64 0, i32 5
  %6 = load i32, i32* %5, align 4
  %7 = and i32 %6, 1
  %8 = icmp eq i32 %7, 0
  br i1 %8, label %12, label %9

9:                                                ; preds = %1
  %10 = getelementptr inbounds %struct.tiff, %struct.tiff* %0, i64 0, i32 9, i32 8
  store i16 8, i16* %10, align 4
  %11 = getelementptr inbounds %struct.tiff, %struct.tiff* %0, i64 0, i32 9, i32 9
  store i16 1, i16* %11, align 2
  br label %12

12:                                               ; preds = %1, %9
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @PixarLogCleanup(%struct.tiff*) #0 {
  %2 = getelementptr inbounds %struct.tiff, %struct.tiff* %0, i64 0, i32 42
  %3 = load i8*, i8** %2, align 8
  %4 = tail call i32 @TIFFPredictorCleanup(%struct.tiff* %0) #7
  %5 = getelementptr inbounds i8, i8* %3, i64 272
  %6 = bitcast i8* %5 to i64*
  %7 = load i64, i64* %6, align 8
  %8 = getelementptr inbounds %struct.tiff, %struct.tiff* %0, i64 0, i32 65
  %9 = getelementptr inbounds %struct.tiff, %struct.tiff* %0, i64 0, i32 65, i32 1
  %10 = bitcast i32 (%struct.tiff*, i32, %struct.__va_list_tag*)** %9 to i64*
  store i64 %7, i64* %10, align 8
  %11 = getelementptr inbounds i8, i8* %3, i64 280
  %12 = bitcast i8* %11 to i64*
  %13 = load i64, i64* %12, align 8
  %14 = bitcast %struct.TIFFTagMethods* %8 to i64*
  store i64 %13, i64* %14, align 8
  %15 = getelementptr inbounds i8, i8* %3, i64 312
  %16 = bitcast i8* %15 to i16**
  %17 = load i16*, i16** %16, align 8
  %18 = icmp eq i16* %17, null
  br i1 %18, label %21, label %19

19:                                               ; preds = %1
  %20 = bitcast i16* %17 to i8*
  tail call void @_TIFFfree(i8* nonnull %20) #7
  br label %21

21:                                               ; preds = %1, %19
  %22 = getelementptr inbounds i8, i8* %3, i64 320
  %23 = bitcast i8* %22 to i16**
  %24 = load i16*, i16** %23, align 8
  %25 = icmp eq i16* %24, null
  br i1 %25, label %28, label %26

26:                                               ; preds = %21
  %27 = bitcast i16* %24 to i8*
  tail call void @_TIFFfree(i8* nonnull %27) #7
  br label %28

28:                                               ; preds = %21, %26
  %29 = getelementptr inbounds i8, i8* %3, i64 328
  %30 = bitcast i8* %29 to i16**
  %31 = load i16*, i16** %30, align 8
  %32 = icmp eq i16* %31, null
  br i1 %32, label %35, label %33

33:                                               ; preds = %28
  %34 = bitcast i16* %31 to i8*
  tail call void @_TIFFfree(i8* nonnull %34) #7
  br label %35

35:                                               ; preds = %28, %33
  %36 = getelementptr inbounds i8, i8* %3, i64 288
  %37 = bitcast i8* %36 to float**
  %38 = load float*, float** %37, align 8
  %39 = icmp eq float* %38, null
  br i1 %39, label %42, label %40

40:                                               ; preds = %35
  %41 = bitcast float* %38 to i8*
  tail call void @_TIFFfree(i8* nonnull %41) #7
  br label %42

42:                                               ; preds = %35, %40
  %43 = getelementptr inbounds i8, i8* %3, i64 296
  %44 = bitcast i8* %43 to i16**
  %45 = load i16*, i16** %44, align 8
  %46 = icmp eq i16* %45, null
  br i1 %46, label %49, label %47

47:                                               ; preds = %42
  %48 = bitcast i16* %45 to i8*
  tail call void @_TIFFfree(i8* nonnull %48) #7
  br label %49

49:                                               ; preds = %42, %47
  %50 = getelementptr inbounds i8, i8* %3, i64 304
  %51 = bitcast i8* %50 to i8**
  %52 = load i8*, i8** %51, align 8
  %53 = icmp eq i8* %52, null
  br i1 %53, label %55, label %54

54:                                               ; preds = %49
  tail call void @_TIFFfree(i8* nonnull %52) #7
  br label %55

55:                                               ; preds = %49, %54
  %56 = getelementptr inbounds i8, i8* %3, i64 260
  %57 = bitcast i8* %56 to i32*
  %58 = load i32, i32* %57, align 4
  %59 = and i32 %58, 1
  %60 = icmp eq i32 %59, 0
  br i1 %60, label %71, label %61

61:                                               ; preds = %55
  %62 = getelementptr inbounds %struct.tiff, %struct.tiff* %0, i64 0, i32 2
  %63 = load i32, i32* %62, align 4
  %64 = icmp eq i32 %63, 0
  %65 = getelementptr inbounds i8, i8* %3, i64 128
  %66 = bitcast i8* %65 to %struct.z_stream_s*
  br i1 %64, label %67, label %69

67:                                               ; preds = %61
  %68 = tail call i32 @Cr_z_inflateEnd(%struct.z_stream_s* %66) #7
  br label %71

69:                                               ; preds = %61
  %70 = tail call i32 @Cr_z_deflateEnd(%struct.z_stream_s* %66) #7
  br label %71

71:                                               ; preds = %55, %67, %69
  %72 = getelementptr inbounds i8, i8* %3, i64 248
  %73 = bitcast i8* %72 to i16**
  %74 = load i16*, i16** %73, align 8
  %75 = icmp eq i16* %74, null
  br i1 %75, label %78, label %76

76:                                               ; preds = %71
  %77 = bitcast i16* %74 to i8*
  tail call void @_TIFFfree(i8* nonnull %77) #7
  br label %78

78:                                               ; preds = %71, %76
  tail call void @_TIFFfree(i8* %3) #7
  store i8* null, i8** %2, align 8
  tail call void @_TIFFSetDefaultCompressionState(%struct.tiff* %0) #7
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal i32 @PixarLogVGetField(%struct.tiff*, i32, %struct.__va_list_tag*) #0 {
  %4 = getelementptr inbounds %struct.tiff, %struct.tiff* %0, i64 0, i32 42
  %5 = bitcast i8** %4 to %struct.PixarLogState**
  %6 = load %struct.PixarLogState*, %struct.PixarLogState** %5, align 8
  switch i32 %1, label %47 [
    i32 65558, label %7
    i32 65549, label %27
  ]

7:                                                ; preds = %3
  %8 = getelementptr inbounds %struct.PixarLogState, %struct.PixarLogState* %6, i64 0, i32 7
  %9 = load i32, i32* %8, align 4
  %10 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %2, i64 0, i32 0
  %11 = load i32, i32* %10, align 8
  %12 = icmp ult i32 %11, 41
  br i1 %12, label %13, label %19

13:                                               ; preds = %7
  %14 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %2, i64 0, i32 3
  %15 = load i8*, i8** %14, align 8
  %16 = sext i32 %11 to i64
  %17 = getelementptr i8, i8* %15, i64 %16
  %18 = add nuw nsw i32 %11, 8
  store i32 %18, i32* %10, align 8
  br label %23

19:                                               ; preds = %7
  %20 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %2, i64 0, i32 2
  %21 = load i8*, i8** %20, align 8
  %22 = getelementptr i8, i8* %21, i64 8
  store i8* %22, i8** %20, align 8
  br label %23

23:                                               ; preds = %19, %13
  %24 = phi i8* [ %17, %13 ], [ %21, %19 ]
  %25 = bitcast i8* %24 to i32**
  %26 = load i32*, i32** %25, align 8
  store i32 %9, i32* %26, align 4
  br label %51

27:                                               ; preds = %3
  %28 = getelementptr inbounds %struct.PixarLogState, %struct.PixarLogState* %6, i64 0, i32 6
  %29 = load i32, i32* %28, align 8
  %30 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %2, i64 0, i32 0
  %31 = load i32, i32* %30, align 8
  %32 = icmp ult i32 %31, 41
  br i1 %32, label %33, label %39

33:                                               ; preds = %27
  %34 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %2, i64 0, i32 3
  %35 = load i8*, i8** %34, align 8
  %36 = sext i32 %31 to i64
  %37 = getelementptr i8, i8* %35, i64 %36
  %38 = add nuw nsw i32 %31, 8
  store i32 %38, i32* %30, align 8
  br label %43

39:                                               ; preds = %27
  %40 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %2, i64 0, i32 2
  %41 = load i8*, i8** %40, align 8
  %42 = getelementptr i8, i8* %41, i64 8
  store i8* %42, i8** %40, align 8
  br label %43

43:                                               ; preds = %39, %33
  %44 = phi i8* [ %37, %33 ], [ %41, %39 ]
  %45 = bitcast i8* %44 to i32**
  %46 = load i32*, i32** %45, align 8
  store i32 %29, i32* %46, align 4
  br label %51

47:                                               ; preds = %3
  %48 = getelementptr inbounds %struct.PixarLogState, %struct.PixarLogState* %6, i64 0, i32 8
  %49 = load i32 (%struct.tiff*, i32, %struct.__va_list_tag*)*, i32 (%struct.tiff*, i32, %struct.__va_list_tag*)** %48, align 8
  %50 = tail call i32 %49(%struct.tiff* %0, i32 %1, %struct.__va_list_tag* %2) #7
  br label %51

51:                                               ; preds = %23, %43, %47
  %52 = phi i32 [ %50, %47 ], [ 1, %43 ], [ 1, %23 ]
  ret i32 %52
}

; Function Attrs: nounwind ssp uwtable
define internal i32 @PixarLogVSetField(%struct.tiff*, i32, %struct.__va_list_tag*) #0 {
  %4 = getelementptr inbounds %struct.tiff, %struct.tiff* %0, i64 0, i32 42
  %5 = bitcast i8** %4 to %struct.PixarLogState**
  %6 = load %struct.PixarLogState*, %struct.PixarLogState** %5, align 8
  switch i32 %1, label %86 [
    i32 65558, label %7
    i32 65549, label %45
  ]

7:                                                ; preds = %3
  %8 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %2, i64 0, i32 0
  %9 = load i32, i32* %8, align 8
  %10 = icmp ult i32 %9, 41
  br i1 %10, label %11, label %17

11:                                               ; preds = %7
  %12 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %2, i64 0, i32 3
  %13 = load i8*, i8** %12, align 8
  %14 = sext i32 %9 to i64
  %15 = getelementptr i8, i8* %13, i64 %14
  %16 = add nuw nsw i32 %9, 8
  store i32 %16, i32* %8, align 8
  br label %21

17:                                               ; preds = %7
  %18 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %2, i64 0, i32 2
  %19 = load i8*, i8** %18, align 8
  %20 = getelementptr i8, i8* %19, i64 8
  store i8* %20, i8** %18, align 8
  br label %21

21:                                               ; preds = %17, %11
  %22 = phi i8* [ %15, %11 ], [ %19, %17 ]
  %23 = bitcast i8* %22 to i32*
  %24 = load i32, i32* %23, align 4
  %25 = getelementptr inbounds %struct.PixarLogState, %struct.PixarLogState* %6, i64 0, i32 7
  store i32 %24, i32* %25, align 4
  %26 = getelementptr inbounds %struct.tiff, %struct.tiff* %0, i64 0, i32 2
  %27 = load i32, i32* %26, align 4
  %28 = icmp eq i32 %27, 0
  br i1 %28, label %90, label %29

29:                                               ; preds = %21
  %30 = getelementptr inbounds %struct.PixarLogState, %struct.PixarLogState* %6, i64 0, i32 5
  %31 = load i32, i32* %30, align 4
  %32 = and i32 %31, 1
  %33 = icmp eq i32 %32, 0
  br i1 %33, label %90, label %34

34:                                               ; preds = %29
  %35 = getelementptr inbounds %struct.PixarLogState, %struct.PixarLogState* %6, i64 0, i32 1
  %36 = tail call i32 @Cr_z_deflateParams(%struct.z_stream_s* %35, i32 %24, i32 0) #7
  %37 = icmp eq i32 %36, 0
  br i1 %37, label %90, label %38

38:                                               ; preds = %34
  %39 = getelementptr inbounds %struct.tiff, %struct.tiff* %0, i64 0, i32 55
  %40 = load i8*, i8** %39, align 8
  %41 = getelementptr inbounds %struct.PixarLogState, %struct.PixarLogState* %6, i64 0, i32 1, i32 6
  %42 = load i8*, i8** %41, align 8
  %43 = icmp eq i8* %42, null
  %44 = select i1 %43, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.6, i64 0, i64 0), i8* %42
  tail call void (i8*, i8*, i8*, ...) @TIFFErrorExt(i8* %40, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @PixarLogVSetField.module, i64 0, i64 0), i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.11, i64 0, i64 0), i8* %44) #7
  br label %90

45:                                               ; preds = %3
  %46 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %2, i64 0, i32 0
  %47 = load i32, i32* %46, align 8
  %48 = icmp ult i32 %47, 41
  br i1 %48, label %49, label %55

49:                                               ; preds = %45
  %50 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %2, i64 0, i32 3
  %51 = load i8*, i8** %50, align 8
  %52 = sext i32 %47 to i64
  %53 = getelementptr i8, i8* %51, i64 %52
  %54 = add nuw nsw i32 %47, 8
  store i32 %54, i32* %46, align 8
  br label %59

55:                                               ; preds = %45
  %56 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %2, i64 0, i32 2
  %57 = load i8*, i8** %56, align 8
  %58 = getelementptr i8, i8* %57, i64 8
  store i8* %58, i8** %56, align 8
  br label %59

59:                                               ; preds = %55, %49
  %60 = phi i8* [ %53, %49 ], [ %57, %55 ]
  %61 = bitcast i8* %60 to i32*
  %62 = load i32, i32* %61, align 4
  %63 = getelementptr inbounds %struct.PixarLogState, %struct.PixarLogState* %6, i64 0, i32 6
  store i32 %62, i32* %63, align 8
  %64 = icmp ult i32 %62, 6
  br i1 %64, label %65, label %74

65:                                               ; preds = %59
  %66 = sext i32 %62 to i64
  %67 = getelementptr inbounds [6 x i32], [6 x i32]* @switch.table.PixarLogVSetField, i64 0, i64 %66
  %68 = load i32, i32* %67, align 4
  %69 = sext i32 %62 to i64
  %70 = getelementptr inbounds [6 x i32], [6 x i32]* @switch.table.PixarLogVSetField.18, i64 0, i64 %69
  %71 = load i32, i32* %70, align 4
  %72 = tail call i32 (%struct.tiff*, i32, ...) @TIFFSetField(%struct.tiff* %0, i32 258, i32 %68) #7
  %73 = tail call i32 (%struct.tiff*, i32, ...) @TIFFSetField(%struct.tiff* %0, i32 339, i32 %71) #7
  br label %74

74:                                               ; preds = %59, %65
  %75 = getelementptr inbounds %struct.tiff, %struct.tiff* %0, i64 0, i32 3
  %76 = load i32, i32* %75, align 8
  %77 = and i32 %76, 1024
  %78 = icmp eq i32 %77, 0
  br i1 %78, label %81, label %79

79:                                               ; preds = %74
  %80 = tail call i64 @TIFFTileSize(%struct.tiff* %0) #7
  br label %81

81:                                               ; preds = %74, %79
  %82 = phi i64 [ %80, %79 ], [ -1, %74 ]
  %83 = getelementptr inbounds %struct.tiff, %struct.tiff* %0, i64 0, i32 22
  store i64 %82, i64* %83, align 8
  %84 = tail call i64 @TIFFScanlineSize(%struct.tiff* %0) #7
  %85 = getelementptr inbounds %struct.tiff, %struct.tiff* %0, i64 0, i32 43
  store i64 %84, i64* %85, align 8
  br label %90

86:                                               ; preds = %3
  %87 = getelementptr inbounds %struct.PixarLogState, %struct.PixarLogState* %6, i64 0, i32 9
  %88 = load i32 (%struct.tiff*, i32, %struct.__va_list_tag*)*, i32 (%struct.tiff*, i32, %struct.__va_list_tag*)** %87, align 8
  %89 = tail call i32 %88(%struct.tiff* %0, i32 %1, %struct.__va_list_tag* %2) #7
  br label %90

90:                                               ; preds = %81, %86, %21, %29, %34, %38
  %91 = phi i32 [ 0, %38 ], [ 1, %34 ], [ 1, %29 ], [ 1, %21 ], [ %89, %86 ], [ 1, %81 ]
  ret i32 %91
}

declare i32 @TIFFPredictorInit(%struct.tiff*) local_unnamed_addr #1

declare void @_TIFFNoPostDecode(%struct.tiff*, i8*, i64) #1

; Function Attrs: norecurse nounwind readonly ssp uwtable
define internal fastcc i32 @PixarLogGuessDataFmt(%struct.TIFFDirectory* nocapture readonly) unnamed_addr #4 {
  %2 = getelementptr inbounds %struct.TIFFDirectory, %struct.TIFFDirectory* %0, i64 0, i32 9
  %3 = load i16, i16* %2, align 2
  %4 = getelementptr inbounds %struct.TIFFDirectory, %struct.TIFFDirectory* %0, i64 0, i32 8
  %5 = load i16, i16* %4, align 4
  switch i16 %5, label %17 [
    i16 32, label %6
    i16 16, label %9
    i16 12, label %11
    i16 11, label %13
    i16 8, label %15
  ]

6:                                                ; preds = %1
  %7 = icmp eq i16 %3, 3
  %8 = select i1 %7, i32 5, i32 -1
  ret i32 %8

9:                                                ; preds = %1
  switch i16 %3, label %17 [
    i16 4, label %10
    i16 1, label %10
  ]

10:                                               ; preds = %9, %9
  br label %17

11:                                               ; preds = %1
  switch i16 %3, label %17 [
    i16 4, label %12
    i16 2, label %12
  ]

12:                                               ; preds = %11, %11
  br label %17

13:                                               ; preds = %1
  switch i16 %3, label %17 [
    i16 4, label %14
    i16 1, label %14
  ]

14:                                               ; preds = %13, %13
  br label %17

15:                                               ; preds = %1
  switch i16 %3, label %17 [
    i16 4, label %16
    i16 1, label %16
  ]

16:                                               ; preds = %15, %15
  br label %17

17:                                               ; preds = %15, %13, %11, %9, %16, %14, %12, %10, %1
  %18 = phi i32 [ -1, %1 ], [ 0, %16 ], [ -1, %15 ], [ 2, %14 ], [ -1, %13 ], [ 3, %12 ], [ -1, %11 ], [ 4, %10 ], [ -1, %9 ]
  ret i32 %18
}

declare void @_TIFFfree(i8*) local_unnamed_addr #1

declare i32 @Cr_z_inflateInit_(%struct.z_stream_s*, i8*, i32) local_unnamed_addr #1

declare i64 @_TIFFMultiplySSize(%struct.tiff*, i64, i64, i8*) local_unnamed_addr #1

declare i32 @Cr_z_inflateReset(%struct.z_stream_s*) local_unnamed_addr #1

declare i32 @Cr_z_inflate(%struct.z_stream_s*, i32) local_unnamed_addr #1

declare void @TIFFSwabArrayOfShort(i16*, i64) local_unnamed_addr #1

declare void @TIFFWarningExt(i8*, i8*, i8*, ...) local_unnamed_addr #1

declare i32 @Cr_z_deflateInit_(%struct.z_stream_s*, i32, i8*, i32) local_unnamed_addr #1

declare i32 @Cr_z_deflateReset(%struct.z_stream_s*) local_unnamed_addr #1

declare i32 @Cr_z_deflate(%struct.z_stream_s*, i32) local_unnamed_addr #1

declare i32 @TIFFFlushData1(%struct.tiff*) local_unnamed_addr #1

; Function Attrs: nofree nounwind
declare double @log(double) local_unnamed_addr #5

declare i32 @TIFFPredictorCleanup(%struct.tiff*) local_unnamed_addr #1

declare i32 @Cr_z_inflateEnd(%struct.z_stream_s*) local_unnamed_addr #1

declare i32 @Cr_z_deflateEnd(%struct.z_stream_s*) local_unnamed_addr #1

declare void @_TIFFSetDefaultCompressionState(%struct.tiff*) local_unnamed_addr #1

declare i32 @Cr_z_deflateParams(%struct.z_stream_s*, i32, i32) local_unnamed_addr #1

declare i32 @TIFFSetField(%struct.tiff*, i32, ...) local_unnamed_addr #1

declare i64 @TIFFTileSize(%struct.tiff*) local_unnamed_addr #1

declare i64 @TIFFScanlineSize(%struct.tiff*) local_unnamed_addr #1

; Function Attrs: nofree nounwind
declare double @exp(double) local_unnamed_addr #5

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #6

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { norecurse nounwind readnone ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nofree norecurse nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { norecurse nounwind readonly ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { argmemonly nounwind }
attributes #7 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{!3}
!3 = distinct !{!3, !4}
!4 = distinct !{!4, !"LVerDomain"}
!5 = !{!6}
!6 = distinct !{!6, !4}
!7 = !{!8, !3}
!8 = distinct !{!8, !4}
!9 = !{!8}
!10 = distinct !{!10, !11}
!11 = !{!"llvm.loop.isvectorized", i32 1}
!12 = distinct !{!12, !11}
!13 = !{!14}
!14 = distinct !{!14, !15}
!15 = distinct !{!15, !"LVerDomain"}
!16 = !{!17}
!17 = distinct !{!17, !15}
!18 = distinct !{!18, !11}
!19 = distinct !{!19, !11}
!20 = !{!21}
!21 = distinct !{!21, !22}
!22 = distinct !{!22, !"LVerDomain"}
!23 = !{!24}
!24 = distinct !{!24, !22}
!25 = !{!26, !21}
!26 = distinct !{!26, !22}
!27 = !{!26}
!28 = distinct !{!28, !11}
!29 = distinct !{!29, !11}
