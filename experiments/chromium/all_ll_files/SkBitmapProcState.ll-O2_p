; ModuleID = '../../third_party/skia/src/core/SkBitmapProcState.cpp'
source_filename = "../../third_party/skia/src/core/SkBitmapProcState.cpp"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%struct.SkBitmapProcState = type { %class.SkImage_Base*, %class.SkPixmap, %class.SkMatrix, i8, i32, i32, i8, void (%class.SkMatrix*, float, float, %struct.SkPoint*)*, i64, i64, i32, i32, i16, [6 x i8], %class.SkSTArenaAlloc, void (i8*, i32, i32, i32*, i32)*, void (%struct.SkBitmapProcState*, i32*, i32, i32, i32)*, void (%struct.SkBitmapProcState*, i32*, i32, i32*)* }
%class.SkImage_Base = type opaque
%class.SkPixmap = type { i8*, i64, %struct.SkImageInfo }
%struct.SkImageInfo = type { %class.SkColorInfo, %struct.SkISize }
%class.SkColorInfo = type { %class.sk_sp, i32, i32 }
%class.sk_sp = type { %class.SkColorSpace* }
%class.SkColorSpace = type <{ %class.SkNVRefCnt, i32, i32, %struct.skcms_TransferFunction, %struct.skcms_Matrix3x3, %struct.skcms_TransferFunction, %struct.skcms_Matrix3x3, %class.SkOnce, [3 x i8] }>
%class.SkNVRefCnt = type { %"struct.std::__1::atomic" }
%"struct.std::__1::atomic" = type { %"struct.std::__1::__atomic_base" }
%"struct.std::__1::__atomic_base" = type { %"struct.std::__1::__atomic_base.0" }
%"struct.std::__1::__atomic_base.0" = type { %"struct.std::__1::__cxx_atomic_impl" }
%"struct.std::__1::__cxx_atomic_impl" = type { %"struct.std::__1::__cxx_atomic_base_impl" }
%"struct.std::__1::__cxx_atomic_base_impl" = type { i32 }
%struct.skcms_TransferFunction = type { float, float, float, float, float, float, float }
%struct.skcms_Matrix3x3 = type { [3 x [3 x float]] }
%class.SkOnce = type { %"struct.std::__1::atomic.1" }
%"struct.std::__1::atomic.1" = type { %"struct.std::__1::__atomic_base.2" }
%"struct.std::__1::__atomic_base.2" = type { %"struct.std::__1::__atomic_base.3" }
%"struct.std::__1::__atomic_base.3" = type { %"struct.std::__1::__cxx_atomic_impl.4" }
%"struct.std::__1::__cxx_atomic_impl.4" = type { %"struct.std::__1::__cxx_atomic_base_impl.5" }
%"struct.std::__1::__cxx_atomic_base_impl.5" = type { i8 }
%struct.SkISize = type { i32, i32 }
%class.SkMatrix = type { [9 x float], i32 }
%struct.SkPoint = type { float, float }
%class.SkSTArenaAlloc = type { %"struct.std::__1::array", %class.SkArenaAlloc.base, [4 x i8] }
%"struct.std::__1::array" = type { [136 x i8] }
%class.SkArenaAlloc.base = type <{ i8*, i8*, i8*, %class.SkFibBlockSizes }>
%class.SkFibBlockSizes = type { i32 }
%class.SkArenaAlloc = type <{ i8*, i8*, i8*, %class.SkFibBlockSizes, [4 x i8] }>
%struct.SkSamplingOptions = type { i8, %struct.SkCubicResampler, i32, i32 }
%struct.SkCubicResampler = type { float, float }
%class.SkImage = type <{ %class.SkRefCnt.base, [4 x i8], %struct.SkImageInfo, i32, [4 x i8] }>
%class.SkRefCnt.base = type { %class.SkRefCntBase.base }
%class.SkRefCntBase.base = type <{ i32 (...)**, %"struct.std::__1::atomic" }>
%class.SkMipmapAccessor = type { %class.SkPixmap, %class.SkPixmap, float, %class.SkMatrix, %class.SkMatrix, i32, %class.SkBitmap, %class.sk_sp.8 }
%class.SkBitmap = type { %class.sk_sp.6, %class.SkPixmap, %class.sk_sp.7 }
%class.sk_sp.6 = type { %class.SkPixelRef* }
%class.SkPixelRef = type opaque
%class.sk_sp.7 = type { %class.SkMipmap* }
%class.SkMipmap = type <{ %class.SkCachedData.base, [6 x i8], %class.sk_sp, %"struct.SkMipmap::Level"*, i32, [4 x i8] }>
%class.SkCachedData.base = type <{ i32 (...)**, %class.SkMutex, %union.anon, i8*, i64, i32, i32, i8, i8 }>
%class.SkMutex = type { %class.SkSemaphore }
%class.SkSemaphore = type { %"struct.std::__1::atomic", %class.SkOnce, %"struct.SkSemaphore::OSSemaphore"* }
%"struct.SkSemaphore::OSSemaphore" = type opaque
%union.anon = type { %class.SkDiscardableMemory* }
%class.SkDiscardableMemory = type opaque
%"struct.SkMipmap::Level" = type { %class.SkPixmap, %struct.SkSize }
%struct.SkSize = type { float, float }
%class.sk_sp.8 = type { %class.SkMipmap* }

@_ZN6SkOpts23S32_alpha_D32_filter_DXE = external local_unnamed_addr global void (%struct.SkBitmapProcState*, i32*, i32, i32*)*, align 8
@_ZN6SkOpts25S32_alpha_D32_filter_DXDYE = external local_unnamed_addr global void (%struct.SkBitmapProcState*, i32*, i32, i32*)*, align 8
@_ZN8SkMatrix11gMapXYProcsE = external local_unnamed_addr constant [0 x void (%class.SkMatrix*, float, float, %struct.SkPoint*)*], align 8
@_ZN6SkOpts8memset32E = external local_unnamed_addr global void (i32*, i32, i32)*, align 8

@_ZN17SkBitmapProcStateC1EPK12SkImage_Base10SkTileModeS3_ = hidden unnamed_addr alias void (%struct.SkBitmapProcState*, %class.SkImage_Base*, i32, i32), void (%struct.SkBitmapProcState*, %class.SkImage_Base*, i32, i32)* @_ZN17SkBitmapProcStateC2EPK12SkImage_Base10SkTileModeS3_

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN17SkBitmapProcStateC2EPK12SkImage_Base10SkTileModeS3_(%struct.SkBitmapProcState*, %class.SkImage_Base*, i32, i32) unnamed_addr #0 align 2 {
  %5 = getelementptr inbounds %struct.SkBitmapProcState, %struct.SkBitmapProcState* %0, i64 0, i32 0
  store %class.SkImage_Base* %1, %class.SkImage_Base** %5, align 8
  %6 = getelementptr inbounds %struct.SkBitmapProcState, %struct.SkBitmapProcState* %0, i64 0, i32 1
  %7 = bitcast %class.SkPixmap* %6 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %7, i8 0, i64 40, i1 false) #6
  %8 = getelementptr inbounds %struct.SkBitmapProcState, %struct.SkBitmapProcState* %0, i64 0, i32 2, i32 0, i64 0
  %9 = bitcast float* %8 to <4 x float>*
  store <4 x float> <float 1.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00>, <4 x float>* %9, align 4
  %10 = getelementptr inbounds %struct.SkBitmapProcState, %struct.SkBitmapProcState* %0, i64 0, i32 2, i32 0, i64 4
  %11 = bitcast float* %10 to <4 x float>*
  store <4 x float> <float 1.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00>, <4 x float>* %11, align 4
  %12 = getelementptr inbounds %struct.SkBitmapProcState, %struct.SkBitmapProcState* %0, i64 0, i32 2, i32 0, i64 8
  store float 1.000000e+00, float* %12, align 4
  %13 = getelementptr inbounds %struct.SkBitmapProcState, %struct.SkBitmapProcState* %0, i64 0, i32 2, i32 1
  store i32 16, i32* %13, align 4
  %14 = getelementptr inbounds %struct.SkBitmapProcState, %struct.SkBitmapProcState* %0, i64 0, i32 4
  store i32 %2, i32* %14, align 4
  %15 = getelementptr inbounds %struct.SkBitmapProcState, %struct.SkBitmapProcState* %0, i64 0, i32 5
  store i32 %3, i32* %15, align 8
  %16 = getelementptr inbounds %struct.SkBitmapProcState, %struct.SkBitmapProcState* %0, i64 0, i32 14, i32 0, i32 0, i64 136
  %17 = bitcast i8* %16 to %class.SkArenaAlloc*
  %18 = getelementptr inbounds %struct.SkBitmapProcState, %struct.SkBitmapProcState* %0, i64 0, i32 14, i32 0, i32 0, i64 0
  tail call void @_ZN12SkArenaAllocC2EPcmm(%class.SkArenaAlloc* %17, i8* %18, i64 136, i64 136) #6
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN17SkBitmapProcState4initERK8SkMatrixhRK17SkSamplingOptions(%struct.SkBitmapProcState*, %class.SkMatrix* dereferenceable(40), i8 zeroext, %struct.SkSamplingOptions* nocapture readonly dereferenceable(20)) local_unnamed_addr #0 align 2 {
  %5 = alloca { i8*, i64 }, align 8
  %6 = alloca %class.SkMatrix, align 8
  %7 = alloca %class.SkMatrix, align 16
  %8 = getelementptr inbounds %struct.SkBitmapProcState, %struct.SkBitmapProcState* %0, i64 0, i32 1
  tail call void @_ZN8SkPixmap5resetEv(%class.SkPixmap* %8) #6
  %9 = getelementptr inbounds %struct.SkBitmapProcState, %struct.SkBitmapProcState* %0, i64 0, i32 2
  %10 = bitcast %class.SkMatrix* %9 to i8*
  %11 = bitcast %class.SkMatrix* %1 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %10, i8* align 4 %11, i64 40, i1 false)
  %12 = getelementptr inbounds %struct.SkBitmapProcState, %struct.SkBitmapProcState* %0, i64 0, i32 6
  store i8 0, i8* %12, align 4
  %13 = getelementptr inbounds %struct.SkBitmapProcState, %struct.SkBitmapProcState* %0, i64 0, i32 14
  %14 = icmp eq %class.SkSTArenaAlloc* %13, null
  %15 = getelementptr inbounds %struct.SkBitmapProcState, %struct.SkBitmapProcState* %0, i64 0, i32 14, i32 0, i32 0, i64 136
  %16 = bitcast i8* %15 to %class.SkArenaAlloc*
  %17 = select i1 %14, %class.SkArenaAlloc* null, %class.SkArenaAlloc* %16
  %18 = bitcast %struct.SkBitmapProcState* %0 to %class.SkImage**
  %19 = load %class.SkImage*, %class.SkImage** %18, align 8
  %20 = getelementptr inbounds %struct.SkSamplingOptions, %struct.SkSamplingOptions* %3, i64 0, i32 3
  %21 = load i32, i32* %20, align 4
  %22 = tail call %class.SkMipmapAccessor* @_ZN16SkMipmapAccessor4MakeEP12SkArenaAllocPK7SkImageRK8SkMatrix12SkMipmapMode(%class.SkArenaAlloc* %17, %class.SkImage* %19, %class.SkMatrix* dereferenceable(40) %1, i32 %21) #6
  %23 = icmp eq %class.SkMipmapAccessor* %22, null
  br i1 %23, label %195, label %24

24:                                               ; preds = %4
  %25 = bitcast { i8*, i64 }* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %25)
  %26 = bitcast %class.SkMatrix* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %26)
  %27 = bitcast %class.SkMipmapAccessor* %22 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %25, i8* nonnull align 8 %27, i64 16, i1 false)
  %28 = getelementptr inbounds %class.SkMipmapAccessor, %class.SkMipmapAccessor* %22, i64 0, i32 0, i32 2, i32 0, i32 0, i32 0
  %29 = load %class.SkColorSpace*, %class.SkColorSpace** %28, align 8, !noalias !2
  %30 = icmp eq %class.SkColorSpace* %29, null
  br i1 %30, label %34, label %31

31:                                               ; preds = %24
  %32 = getelementptr inbounds %class.SkColorSpace, %class.SkColorSpace* %29, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %33 = atomicrmw add i32* %32, i32 1 monotonic, !noalias !2
  br label %34

34:                                               ; preds = %24, %31
  %35 = ptrtoint %class.SkColorSpace* %29 to i64
  %36 = getelementptr inbounds %class.SkMipmapAccessor, %class.SkMipmapAccessor* %22, i64 0, i32 0, i32 2, i32 0, i32 1
  %37 = bitcast i32* %36 to <2 x i64>*
  %38 = load <2 x i64>, <2 x i64>* %37, align 8, !noalias !2
  %39 = getelementptr inbounds %class.SkMipmapAccessor, %class.SkMipmapAccessor* %22, i64 0, i32 3
  %40 = bitcast %class.SkMatrix* %39 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %26, i8* align 4 %40, i64 40, i1 false)
  %41 = bitcast %class.SkPixmap* %8 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %41, i8* nonnull align 8 %25, i64 16, i1 false)
  %42 = getelementptr inbounds %struct.SkBitmapProcState, %struct.SkBitmapProcState* %0, i64 0, i32 1, i32 2
  %43 = getelementptr inbounds %struct.SkImageInfo, %struct.SkImageInfo* %42, i64 0, i32 0, i32 0, i32 0
  %44 = load %class.SkColorSpace*, %class.SkColorSpace** %43, align 8
  %45 = bitcast %struct.SkImageInfo* %42 to i64*
  store i64 %35, i64* %45, align 8
  %46 = icmp eq %class.SkColorSpace* %44, null
  br i1 %46, label %53, label %47

47:                                               ; preds = %34
  %48 = getelementptr inbounds %class.SkColorSpace, %class.SkColorSpace* %44, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %49 = atomicrmw add i32* %48, i32 -1 acq_rel
  %50 = icmp eq i32 %49, 1
  br i1 %50, label %51, label %53

51:                                               ; preds = %47
  %52 = bitcast %class.SkColorSpace* %44 to i8*
  tail call void @_ZdlPv(i8* %52) #7
  br label %53

53:                                               ; preds = %51, %47, %34
  %54 = getelementptr inbounds %struct.SkBitmapProcState, %struct.SkBitmapProcState* %0, i64 0, i32 1, i32 2, i32 0, i32 1
  %55 = bitcast i32* %54 to <2 x i64>*
  store <2 x i64> %38, <2 x i64>* %55, align 8
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %10, i8* nonnull align 8 %26, i64 40, i1 false)
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %25)
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %26)
  %56 = getelementptr inbounds %struct.SkBitmapProcState, %struct.SkBitmapProcState* %0, i64 0, i32 3
  store i8 %2, i8* %56, align 8
  %57 = getelementptr inbounds %struct.SkSamplingOptions, %struct.SkSamplingOptions* %3, i64 0, i32 2
  %58 = load i32, i32* %57, align 4
  %59 = icmp eq i32 %58, 1
  %60 = zext i1 %59 to i8
  store i8 %60, i8* %12, align 4
  %61 = getelementptr inbounds %struct.SkBitmapProcState, %struct.SkBitmapProcState* %0, i64 0, i32 2, i32 1
  %62 = load i32, i32* %61, align 4
  %63 = trunc i32 %62 to i8
  %64 = icmp slt i8 %63, 0
  br i1 %64, label %65, label %68

65:                                               ; preds = %53
  %66 = tail call zeroext i8 @_ZNK8SkMatrix15computeTypeMaskEv(%class.SkMatrix* %9) #6
  %67 = zext i8 %66 to i32
  store i32 %67, i32* %61, align 4
  br label %68

68:                                               ; preds = %65, %53
  %69 = phi i32 [ %67, %65 ], [ %62, %53 ]
  %70 = and i32 %69, 14
  %71 = icmp eq i32 %70, 0
  br i1 %71, label %72, label %88

72:                                               ; preds = %68
  %73 = getelementptr inbounds %struct.SkBitmapProcState, %struct.SkBitmapProcState* %0, i64 0, i32 2, i32 0, i64 2
  %74 = load float, float* %73, align 4
  %75 = fadd float %74, 5.000000e-01
  %76 = tail call float @llvm.floor.f32(float %75) #6
  %77 = fsub float %74, %76
  %78 = tail call float @llvm.fabs.f32(float %77) #6
  %79 = fcmp ugt float %78, 3.906250e-03
  br i1 %79, label %88, label %80

80:                                               ; preds = %72
  %81 = getelementptr inbounds %struct.SkBitmapProcState, %struct.SkBitmapProcState* %0, i64 0, i32 2, i32 0, i64 5
  %82 = load float, float* %81, align 4
  %83 = fadd float %82, 5.000000e-01
  %84 = tail call float @llvm.floor.f32(float %83) #6
  %85 = fsub float %82, %84
  %86 = tail call float @llvm.fabs.f32(float %85) #6
  %87 = fcmp ugt float %86, 3.906250e-03
  br i1 %87, label %88, label %182

88:                                               ; preds = %80, %68, %72
  %89 = getelementptr inbounds %struct.SkBitmapProcState, %struct.SkBitmapProcState* %0, i64 0, i32 4
  %90 = load i32, i32* %89, align 4
  %91 = icmp eq i32 %90, 0
  br i1 %91, label %92, label %96

92:                                               ; preds = %88
  %93 = getelementptr inbounds %struct.SkBitmapProcState, %struct.SkBitmapProcState* %0, i64 0, i32 5
  %94 = load i32, i32* %93, align 8
  %95 = icmp eq i32 %94, 0
  br i1 %95, label %103, label %96

96:                                               ; preds = %92, %88
  %97 = getelementptr inbounds %struct.SkBitmapProcState, %struct.SkBitmapProcState* %0, i64 0, i32 1, i32 2, i32 1, i32 0
  %98 = load i32, i32* %97, align 4
  %99 = getelementptr inbounds %struct.SkBitmapProcState, %struct.SkBitmapProcState* %0, i64 0, i32 1, i32 2, i32 1, i32 1
  %100 = load i32, i32* %99, align 4
  %101 = tail call zeroext i1 @_ZN8SkMatrix8postIDivEii(%class.SkMatrix* %9, i32 %98, i32 %100) #6
  %102 = load i32, i32* %61, align 4
  br label %103

103:                                              ; preds = %92, %96
  %104 = phi i32 [ %69, %92 ], [ %102, %96 ]
  %105 = trunc i32 %104 to i8
  %106 = icmp slt i8 %105, 0
  br i1 %106, label %107, label %110

107:                                              ; preds = %103
  %108 = tail call zeroext i8 @_ZNK8SkMatrix15computeTypeMaskEv(%class.SkMatrix* %9) #6
  %109 = zext i8 %108 to i32
  store i32 %109, i32* %61, align 4
  br label %110

110:                                              ; preds = %103, %107
  %111 = phi i32 [ %109, %107 ], [ %104, %103 ]
  %112 = and i32 %111, 14
  %113 = icmp eq i32 %112, 2
  br i1 %113, label %114, label %155

114:                                              ; preds = %110
  %115 = bitcast %class.SkMatrix* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %115) #6
  %116 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %7, i64 0, i32 1
  %117 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %7, i64 0, i32 0, i64 0
  %118 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %7, i64 0, i32 0, i64 2
  %119 = bitcast %class.SkMatrix* %7 to <4 x float>*
  store <4 x float> <float 1.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00>, <4 x float>* %119, align 16
  %120 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %7, i64 0, i32 0, i64 4
  %121 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %7, i64 0, i32 0, i64 5
  %122 = bitcast float* %120 to <4 x float>*
  store <4 x float> <float 1.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00>, <4 x float>* %122, align 16
  %123 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %7, i64 0, i32 0, i64 8
  store float 1.000000e+00, float* %123, align 16
  store i32 16, i32* %116, align 4
  %124 = trunc i32 %111 to i8
  %125 = icmp slt i8 %124, 0
  br i1 %125, label %126, label %129

126:                                              ; preds = %114
  %127 = tail call zeroext i8 @_ZNK8SkMatrix15computeTypeMaskEv(%class.SkMatrix* %9) #6
  %128 = zext i8 %127 to i32
  store i32 %128, i32* %61, align 4
  br label %129

129:                                              ; preds = %126, %114
  %130 = phi i32 [ %128, %126 ], [ %111, %114 ]
  %131 = and i32 %130, 15
  %132 = icmp eq i32 %131, 0
  br i1 %132, label %133, label %135

133:                                              ; preds = %129
  %134 = call dereferenceable(40) %class.SkMatrix* @_ZN8SkMatrix5resetEv(%class.SkMatrix* nonnull %7) #6
  br label %137

135:                                              ; preds = %129
  %136 = call zeroext i1 @_ZNK8SkMatrix17invertNonIdentityEPS_(%class.SkMatrix* %9, %class.SkMatrix* nonnull %7) #6
  br i1 %136, label %137, label %153

137:                                              ; preds = %133, %135
  %138 = load float, float* %117, align 16
  %139 = fadd float %138, -1.000000e+00
  %140 = call float @llvm.fabs.f32(float %139) #6
  %141 = fcmp ugt float %140, 0x3F00000000000000
  br i1 %141, label %153, label %142

142:                                              ; preds = %137
  %143 = load float, float* %120, align 16
  %144 = fadd float %143, -1.000000e+00
  %145 = call float @llvm.fabs.f32(float %144) #6
  %146 = fcmp ugt float %145, 0x3F00000000000000
  br i1 %146, label %153, label %147

147:                                              ; preds = %142
  %148 = load float, float* %118, align 8
  %149 = fsub float -0.000000e+00, %148
  %150 = load float, float* %121, align 4
  %151 = fsub float -0.000000e+00, %150
  %152 = call dereferenceable(40) %class.SkMatrix* @_ZN8SkMatrix12setTranslateEff(%class.SkMatrix* %9, float %149, float %151) #6
  br label %153

153:                                              ; preds = %142, %137, %147, %135
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %115) #6
  %154 = load i32, i32* %61, align 4
  br label %155

155:                                              ; preds = %153, %110
  %156 = phi i32 [ %154, %153 ], [ %111, %110 ]
  %157 = trunc i32 %156 to i8
  %158 = icmp slt i8 %157, 0
  br i1 %158, label %159, label %162

159:                                              ; preds = %155
  %160 = call zeroext i8 @_ZNK8SkMatrix15computeTypeMaskEv(%class.SkMatrix* %9) #6
  %161 = zext i8 %160 to i32
  store i32 %161, i32* %61, align 4
  br label %162

162:                                              ; preds = %159, %155
  %163 = phi i32 [ %161, %159 ], [ %156, %155 ]
  %164 = and i32 %163, 14
  %165 = icmp eq i32 %164, 0
  br i1 %165, label %166, label %182

166:                                              ; preds = %162
  %167 = getelementptr inbounds %struct.SkBitmapProcState, %struct.SkBitmapProcState* %0, i64 0, i32 2, i32 0, i64 2
  %168 = load float, float* %167, align 4
  %169 = fadd float %168, 5.000000e-01
  %170 = call float @llvm.floor.f32(float %169) #6
  %171 = fsub float %168, %170
  %172 = call float @llvm.fabs.f32(float %171) #6
  %173 = fcmp ugt float %172, 3.906250e-03
  br i1 %173, label %182, label %174

174:                                              ; preds = %166
  %175 = getelementptr inbounds %struct.SkBitmapProcState, %struct.SkBitmapProcState* %0, i64 0, i32 2, i32 0, i64 5
  %176 = load float, float* %175, align 4
  %177 = fadd float %176, 5.000000e-01
  %178 = call float @llvm.floor.f32(float %177) #6
  %179 = fsub float %176, %178
  %180 = call float @llvm.fabs.f32(float %179) #6
  %181 = fcmp ole float %180, 3.906250e-03
  br label %182

182:                                              ; preds = %80, %174, %166, %162
  %183 = phi i1 [ true, %80 ], [ false, %166 ], [ false, %162 ], [ %181, %174 ]
  %184 = load i8, i8* %12, align 4, !range !7
  %185 = icmp eq i8 %184, 0
  br i1 %185, label %195, label %186

186:                                              ; preds = %182
  %187 = getelementptr inbounds %struct.SkBitmapProcState, %struct.SkBitmapProcState* %0, i64 0, i32 1, i32 2, i32 1, i32 0
  %188 = load i32, i32* %187, align 4
  %189 = getelementptr inbounds %struct.SkBitmapProcState, %struct.SkBitmapProcState* %0, i64 0, i32 1, i32 2, i32 1, i32 1
  %190 = load i32, i32* %189, align 4
  %191 = or i32 %190, %188
  %192 = icmp ugt i32 %191, 16383
  %193 = or i1 %183, %192
  br i1 %193, label %194, label %195

194:                                              ; preds = %186
  store i8 0, i8* %12, align 4
  br label %195

195:                                              ; preds = %194, %182, %186, %4
  %196 = phi i1 [ false, %4 ], [ true, %186 ], [ true, %182 ], [ true, %194 ]
  ret i1 %196
}

declare void @_ZN8SkPixmap5resetEv(%class.SkPixmap*) local_unnamed_addr #1

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #2

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

declare %class.SkMipmapAccessor* @_ZN16SkMipmapAccessor4MakeEP12SkArenaAllocPK7SkImageRK8SkMatrix12SkMipmapMode(%class.SkArenaAlloc*, %class.SkImage*, %class.SkMatrix* dereferenceable(40), i32) local_unnamed_addr #1

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #2

declare dereferenceable(40) %class.SkMatrix* @_ZN8SkMatrix12setTranslateEff(%class.SkMatrix*, float, float) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN17SkBitmapProcState11chooseProcsEv(%struct.SkBitmapProcState*) local_unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %struct.SkBitmapProcState, %struct.SkBitmapProcState* %0, i64 0, i32 2
  %3 = getelementptr inbounds %struct.SkBitmapProcState, %struct.SkBitmapProcState* %0, i64 0, i32 2, i32 1
  %4 = load i32, i32* %3, align 4
  %5 = trunc i32 %4 to i8
  %6 = icmp slt i8 %5, 0
  br i1 %6, label %7, label %10

7:                                                ; preds = %1
  %8 = tail call zeroext i8 @_ZNK8SkMatrix15computeTypeMaskEv(%class.SkMatrix* %2) #6
  %9 = zext i8 %8 to i32
  store i32 %9, i32* %3, align 4
  br label %10

10:                                               ; preds = %1, %7
  %11 = phi i8 [ %5, %1 ], [ %8, %7 ]
  %12 = phi i32 [ %4, %1 ], [ %9, %7 ]
  %13 = and i32 %12, 15
  %14 = zext i32 %13 to i64
  %15 = getelementptr inbounds [0 x void (%class.SkMatrix*, float, float, %struct.SkPoint*)*], [0 x void (%class.SkMatrix*, float, float, %struct.SkPoint*)*]* @_ZN8SkMatrix11gMapXYProcsE, i64 0, i64 %14
  %16 = bitcast void (%class.SkMatrix*, float, float, %struct.SkPoint*)** %15 to i64*
  %17 = load i64, i64* %16, align 8
  %18 = getelementptr inbounds %struct.SkBitmapProcState, %struct.SkBitmapProcState* %0, i64 0, i32 7
  %19 = bitcast void (%class.SkMatrix*, float, float, %struct.SkPoint*)** %18 to i64*
  store i64 %17, i64* %19, align 8
  %20 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %2, i64 0, i32 0, i64 0
  %21 = load float, float* %20, align 4
  %22 = fmul float %21, 0x41F0000000000000
  %23 = fcmp olt float %22, 0x43DFFFFFE0000000
  %24 = select i1 %23, float %22, float 0x43DFFFFFE0000000
  %25 = fcmp ogt float %24, 0xC3DFFFFFE0000000
  %26 = select i1 %25, float %24, float 0xC3DFFFFFE0000000
  %27 = fptosi float %26 to i64
  %28 = getelementptr inbounds %struct.SkBitmapProcState, %struct.SkBitmapProcState* %0, i64 0, i32 8
  store i64 %27, i64* %28, align 8
  %29 = getelementptr inbounds %struct.SkBitmapProcState, %struct.SkBitmapProcState* %0, i64 0, i32 2, i32 0, i64 3
  %30 = load float, float* %29, align 4
  %31 = fmul float %30, 0x41F0000000000000
  %32 = fcmp olt float %31, 0x43DFFFFFE0000000
  %33 = select i1 %32, float %31, float 0x43DFFFFFE0000000
  %34 = fcmp ogt float %33, 0xC3DFFFFFE0000000
  %35 = select i1 %34, float %33, float 0xC3DFFFFFE0000000
  %36 = fptosi float %35 to i64
  %37 = getelementptr inbounds %struct.SkBitmapProcState, %struct.SkBitmapProcState* %0, i64 0, i32 9
  store i64 %36, i64* %37, align 8
  %38 = getelementptr inbounds %struct.SkBitmapProcState, %struct.SkBitmapProcState* %0, i64 0, i32 3
  %39 = load i8, i8* %38, align 8
  %40 = zext i8 %39 to i16
  %41 = add nuw nsw i16 %40, 1
  %42 = getelementptr inbounds %struct.SkBitmapProcState, %struct.SkBitmapProcState* %0, i64 0, i32 12
  store i16 %41, i16* %42, align 8
  %43 = icmp slt i8 %11, 0
  br i1 %43, label %44, label %47

44:                                               ; preds = %10
  %45 = tail call zeroext i8 @_ZNK8SkMatrix15computeTypeMaskEv(%class.SkMatrix* %2) #6
  %46 = zext i8 %45 to i32
  store i32 %46, i32* %3, align 4
  br label %47

47:                                               ; preds = %10, %44
  %48 = phi i32 [ %46, %44 ], [ %12, %10 ]
  %49 = and i32 %48, 14
  %50 = icmp eq i32 %49, 0
  %51 = tail call void (%struct.SkBitmapProcState*, i32*, i32, i32, i32)* @_ZN17SkBitmapProcState16chooseMatrixProcEb(%struct.SkBitmapProcState* %0, i1 zeroext %50) #6
  %52 = getelementptr inbounds %struct.SkBitmapProcState, %struct.SkBitmapProcState* %0, i64 0, i32 16
  store void (%struct.SkBitmapProcState*, i32*, i32, i32, i32)* %51, void (%struct.SkBitmapProcState*, i32*, i32, i32, i32)** %52, align 8
  %53 = load i32, i32* %3, align 4
  %54 = trunc i32 %53 to i8
  %55 = icmp slt i8 %54, 0
  br i1 %55, label %56, label %59

56:                                               ; preds = %47
  %57 = tail call zeroext i8 @_ZNK8SkMatrix15computeTypeMaskEv(%class.SkMatrix* %2) #6
  %58 = zext i8 %57 to i32
  store i32 %58, i32* %3, align 4
  br label %59

59:                                               ; preds = %47, %56
  %60 = phi i32 [ %58, %56 ], [ %53, %47 ]
  %61 = and i32 %60, 12
  %62 = icmp eq i32 %61, 0
  %63 = getelementptr inbounds %struct.SkBitmapProcState, %struct.SkBitmapProcState* %0, i64 0, i32 6
  %64 = load i8, i8* %63, align 4, !range !7
  %65 = icmp ne i8 %64, 0
  %66 = load void (%struct.SkBitmapProcState*, i32*, i32, i32*)*, void (%struct.SkBitmapProcState*, i32*, i32, i32*)** @_ZN6SkOpts25S32_alpha_D32_filter_DXDYE, align 8
  %67 = select i1 %65, void (%struct.SkBitmapProcState*, i32*, i32, i32*)* %66, void (%struct.SkBitmapProcState*, i32*, i32, i32*)* @_ZL27S32_alpha_D32_nofilter_DXDYRK17SkBitmapProcStatePKjiPj
  %68 = load void (%struct.SkBitmapProcState*, i32*, i32, i32*)*, void (%struct.SkBitmapProcState*, i32*, i32, i32*)** @_ZN6SkOpts23S32_alpha_D32_filter_DXE, align 8
  %69 = select i1 %65, void (%struct.SkBitmapProcState*, i32*, i32, i32*)* %68, void (%struct.SkBitmapProcState*, i32*, i32, i32*)* @_ZL25S32_alpha_D32_nofilter_DXRK17SkBitmapProcStatePKjiPj
  %70 = select i1 %62, void (%struct.SkBitmapProcState*, i32*, i32, i32*)* %69, void (%struct.SkBitmapProcState*, i32*, i32, i32*)* %67
  %71 = getelementptr inbounds %struct.SkBitmapProcState, %struct.SkBitmapProcState* %0, i64 0, i32 17
  store void (%struct.SkBitmapProcState*, i32*, i32, i32*)* %70, void (%struct.SkBitmapProcState*, i32*, i32, i32*)** %71, align 8
  %72 = load i16, i16* %42, align 8
  %73 = icmp eq i16 %72, 256
  %74 = icmp eq i8 %64, 0
  %75 = and i1 %74, %73
  br i1 %75, label %76, label %94

76:                                               ; preds = %59
  %77 = getelementptr inbounds %struct.SkBitmapProcState, %struct.SkBitmapProcState* %0, i64 0, i32 4
  %78 = load i32, i32* %77, align 4
  %79 = icmp eq i32 %78, 0
  br i1 %79, label %80, label %94

80:                                               ; preds = %76
  %81 = getelementptr inbounds %struct.SkBitmapProcState, %struct.SkBitmapProcState* %0, i64 0, i32 5
  %82 = load i32, i32* %81, align 8
  %83 = icmp eq i32 %82, 0
  br i1 %83, label %84, label %94

84:                                               ; preds = %80
  %85 = trunc i32 %60 to i8
  %86 = icmp slt i8 %85, 0
  br i1 %86, label %87, label %90

87:                                               ; preds = %84
  %88 = tail call zeroext i8 @_ZNK8SkMatrix15computeTypeMaskEv(%class.SkMatrix* %2) #6
  %89 = zext i8 %88 to i32
  store i32 %89, i32* %3, align 4
  br label %90

90:                                               ; preds = %84, %87
  %91 = phi i32 [ %89, %87 ], [ %60, %84 ]
  %92 = and i32 %91, 12
  %93 = icmp eq i32 %92, 0
  br i1 %93, label %96, label %94

94:                                               ; preds = %90, %80, %76, %59
  %95 = tail call void (i8*, i32, i32, i32*, i32)* @_ZN17SkBitmapProcState18chooseShaderProc32Ev(%struct.SkBitmapProcState* %0)
  br label %96

96:                                               ; preds = %90, %94
  %97 = phi void (i8*, i32, i32, i32*, i32)* [ %95, %94 ], [ @_ZL43Clamp_S32_opaque_D32_nofilter_DX_shaderprocPKviiPji, %90 ]
  %98 = getelementptr inbounds %struct.SkBitmapProcState, %struct.SkBitmapProcState* %0, i64 0, i32 15
  store void (i8*, i32, i32, i32*, i32)* %97, void (i8*, i32, i32, i32*, i32)** %98, align 8
  ret i1 true
}

declare void (%struct.SkBitmapProcState*, i32*, i32, i32, i32)* @_ZN17SkBitmapProcState16chooseMatrixProcEb(%struct.SkBitmapProcState*, i1 zeroext) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define internal void @_ZL25S32_alpha_D32_nofilter_DXRK17SkBitmapProcStatePKjiPj(%struct.SkBitmapProcState* nocapture readonly dereferenceable(336), i32* nocapture readonly, i32, i32*) #0 {
  %5 = getelementptr inbounds i32, i32* %1, i64 1
  %6 = load i32, i32* %1, align 4
  %7 = getelementptr inbounds %struct.SkBitmapProcState, %struct.SkBitmapProcState* %0, i64 0, i32 1, i32 0
  %8 = load i8*, i8** %7, align 8
  %9 = zext i32 %6 to i64
  %10 = getelementptr inbounds %struct.SkBitmapProcState, %struct.SkBitmapProcState* %0, i64 0, i32 1, i32 1
  %11 = load i64, i64* %10, align 8
  %12 = mul i64 %11, %9
  %13 = getelementptr inbounds i8, i8* %8, i64 %12
  %14 = bitcast i8* %13 to i32*
  %15 = getelementptr inbounds %struct.SkBitmapProcState, %struct.SkBitmapProcState* %0, i64 0, i32 1, i32 2, i32 1, i32 0
  %16 = load i32, i32* %15, align 4
  %17 = icmp eq i32 %16, 1
  br i1 %17, label %22, label %18

18:                                               ; preds = %4
  %19 = icmp sgt i32 %2, 3
  br i1 %19, label %20, label %113

20:                                               ; preds = %18
  %21 = getelementptr inbounds %struct.SkBitmapProcState, %struct.SkBitmapProcState* %0, i64 0, i32 12
  br label %37

22:                                               ; preds = %4
  %23 = load i32, i32* %14, align 4
  %24 = getelementptr inbounds %struct.SkBitmapProcState, %struct.SkBitmapProcState* %0, i64 0, i32 12
  %25 = load i16, i16* %24, align 8
  %26 = zext i16 %25 to i32
  %27 = and i32 %23, 16711935
  %28 = mul i32 %27, %26
  %29 = lshr i32 %28, 8
  %30 = lshr i32 %23, 8
  %31 = and i32 %30, 16711935
  %32 = mul i32 %31, %26
  %33 = and i32 %29, 16711935
  %34 = and i32 %32, -16711936
  %35 = or i32 %33, %34
  %36 = load void (i32*, i32, i32)*, void (i32*, i32, i32)** @_ZN6SkOpts8memset32E, align 8
  tail call void %36(i32* %3, i32 %35, i32 %2) #6
  br label %144

37:                                               ; preds = %20, %37
  %38 = phi i32* [ %5, %20 ], [ %43, %37 ]
  %39 = phi i32 [ %2, %20 ], [ %109, %37 ]
  %40 = phi i32* [ %3, %20 ], [ %108, %37 ]
  %41 = getelementptr inbounds i32, i32* %38, i64 1
  %42 = load i32, i32* %38, align 4
  %43 = getelementptr inbounds i32, i32* %38, i64 2
  %44 = load i32, i32* %41, align 4
  %45 = and i32 %42, 65535
  %46 = zext i32 %45 to i64
  %47 = getelementptr inbounds i32, i32* %14, i64 %46
  %48 = load i32, i32* %47, align 4
  %49 = lshr i32 %42, 16
  %50 = zext i32 %49 to i64
  %51 = getelementptr inbounds i32, i32* %14, i64 %50
  %52 = load i32, i32* %51, align 4
  %53 = and i32 %44, 65535
  %54 = zext i32 %53 to i64
  %55 = getelementptr inbounds i32, i32* %14, i64 %54
  %56 = load i32, i32* %55, align 4
  %57 = lshr i32 %44, 16
  %58 = zext i32 %57 to i64
  %59 = getelementptr inbounds i32, i32* %14, i64 %58
  %60 = load i32, i32* %59, align 4
  %61 = load i16, i16* %21, align 8
  %62 = zext i16 %61 to i32
  %63 = and i32 %48, 16711935
  %64 = mul i32 %63, %62
  %65 = lshr i32 %64, 8
  %66 = lshr i32 %48, 8
  %67 = and i32 %66, 16711935
  %68 = mul i32 %67, %62
  %69 = and i32 %65, 16711935
  %70 = and i32 %68, -16711936
  %71 = or i32 %69, %70
  %72 = getelementptr inbounds i32, i32* %40, i64 1
  store i32 %71, i32* %40, align 4
  %73 = load i16, i16* %21, align 8
  %74 = zext i16 %73 to i32
  %75 = and i32 %52, 16711935
  %76 = mul i32 %75, %74
  %77 = lshr i32 %76, 8
  %78 = lshr i32 %52, 8
  %79 = and i32 %78, 16711935
  %80 = mul i32 %79, %74
  %81 = and i32 %77, 16711935
  %82 = and i32 %80, -16711936
  %83 = or i32 %81, %82
  %84 = getelementptr inbounds i32, i32* %40, i64 2
  store i32 %83, i32* %72, align 4
  %85 = load i16, i16* %21, align 8
  %86 = zext i16 %85 to i32
  %87 = and i32 %56, 16711935
  %88 = mul i32 %87, %86
  %89 = lshr i32 %88, 8
  %90 = lshr i32 %56, 8
  %91 = and i32 %90, 16711935
  %92 = mul i32 %91, %86
  %93 = and i32 %89, 16711935
  %94 = and i32 %92, -16711936
  %95 = or i32 %93, %94
  %96 = getelementptr inbounds i32, i32* %40, i64 3
  store i32 %95, i32* %84, align 4
  %97 = load i16, i16* %21, align 8
  %98 = zext i16 %97 to i32
  %99 = and i32 %60, 16711935
  %100 = mul i32 %99, %98
  %101 = lshr i32 %100, 8
  %102 = lshr i32 %60, 8
  %103 = and i32 %102, 16711935
  %104 = mul i32 %103, %98
  %105 = and i32 %101, 16711935
  %106 = and i32 %104, -16711936
  %107 = or i32 %105, %106
  %108 = getelementptr inbounds i32, i32* %40, i64 4
  store i32 %107, i32* %96, align 4
  %109 = add nsw i32 %39, -4
  %110 = icmp sgt i32 %109, 3
  br i1 %110, label %37, label %111

111:                                              ; preds = %37
  %112 = and i32 %2, 3
  br label %113

113:                                              ; preds = %111, %18
  %114 = phi i32* [ %3, %18 ], [ %108, %111 ]
  %115 = phi i32 [ %2, %18 ], [ %112, %111 ]
  %116 = phi i32* [ %5, %18 ], [ %43, %111 ]
  %117 = icmp sgt i32 %115, 0
  br i1 %117, label %118, label %144

118:                                              ; preds = %113
  %119 = bitcast i32* %116 to i16*
  %120 = getelementptr inbounds %struct.SkBitmapProcState, %struct.SkBitmapProcState* %0, i64 0, i32 12
  br label %121

121:                                              ; preds = %118, %121
  %122 = phi i16* [ %119, %118 ], [ %126, %121 ]
  %123 = phi i32 [ %115, %118 ], [ %125, %121 ]
  %124 = phi i32* [ %114, %118 ], [ %142, %121 ]
  %125 = add nsw i32 %123, -1
  %126 = getelementptr inbounds i16, i16* %122, i64 1
  %127 = load i16, i16* %122, align 2
  %128 = zext i16 %127 to i64
  %129 = getelementptr inbounds i32, i32* %14, i64 %128
  %130 = load i32, i32* %129, align 4
  %131 = load i16, i16* %120, align 8
  %132 = zext i16 %131 to i32
  %133 = and i32 %130, 16711935
  %134 = mul i32 %133, %132
  %135 = lshr i32 %134, 8
  %136 = lshr i32 %130, 8
  %137 = and i32 %136, 16711935
  %138 = mul i32 %137, %132
  %139 = and i32 %135, 16711935
  %140 = and i32 %138, -16711936
  %141 = or i32 %139, %140
  %142 = getelementptr inbounds i32, i32* %124, i64 1
  store i32 %141, i32* %124, align 4
  %143 = icmp sgt i32 %125, 0
  br i1 %143, label %121, label %144

144:                                              ; preds = %121, %113, %22
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal void @_ZL27S32_alpha_D32_nofilter_DXDYRK17SkBitmapProcStatePKjiPj(%struct.SkBitmapProcState* nocapture readonly dereferenceable(336), i32* nocapture readonly, i32, i32* nocapture) #3 {
  %5 = getelementptr inbounds %struct.SkBitmapProcState, %struct.SkBitmapProcState* %0, i64 0, i32 1, i32 0
  %6 = load i8*, i8** %5, align 8
  %7 = getelementptr inbounds %struct.SkBitmapProcState, %struct.SkBitmapProcState* %0, i64 0, i32 1, i32 1
  %8 = load i64, i64* %7, align 8
  %9 = icmp sgt i32 %2, 0
  br i1 %9, label %10, label %62

10:                                               ; preds = %4
  %11 = and i32 %2, 1
  %12 = icmp eq i32 %11, 0
  br i1 %12, label %27, label %13

13:                                               ; preds = %10
  %14 = add nsw i32 %2, -1
  %15 = getelementptr inbounds i32, i32* %1, i64 1
  %16 = load i32, i32* %1, align 4
  %17 = and i32 %16, 65535
  %18 = lshr i32 %16, 16
  %19 = zext i32 %18 to i64
  %20 = mul i64 %8, %19
  %21 = getelementptr inbounds i8, i8* %6, i64 %20
  %22 = bitcast i8* %21 to i32*
  %23 = zext i32 %17 to i64
  %24 = getelementptr inbounds i32, i32* %22, i64 %23
  %25 = load i32, i32* %24, align 4
  %26 = getelementptr inbounds i32, i32* %3, i64 1
  store i32 %25, i32* %3, align 4
  br label %27

27:                                               ; preds = %10, %13
  %28 = phi i32* [ %1, %10 ], [ %15, %13 ]
  %29 = phi i32 [ %2, %10 ], [ %14, %13 ]
  %30 = phi i32* [ %3, %10 ], [ %26, %13 ]
  %31 = icmp eq i32 %2, 1
  br i1 %31, label %62, label %32

32:                                               ; preds = %27, %32
  %33 = phi i32* [ %49, %32 ], [ %28, %27 ]
  %34 = phi i32 [ %48, %32 ], [ %29, %27 ]
  %35 = phi i32* [ %60, %32 ], [ %30, %27 ]
  %36 = getelementptr inbounds i32, i32* %33, i64 1
  %37 = load i32, i32* %33, align 4
  %38 = and i32 %37, 65535
  %39 = lshr i32 %37, 16
  %40 = zext i32 %39 to i64
  %41 = mul i64 %8, %40
  %42 = getelementptr inbounds i8, i8* %6, i64 %41
  %43 = bitcast i8* %42 to i32*
  %44 = zext i32 %38 to i64
  %45 = getelementptr inbounds i32, i32* %43, i64 %44
  %46 = load i32, i32* %45, align 4
  %47 = getelementptr inbounds i32, i32* %35, i64 1
  store i32 %46, i32* %35, align 4
  %48 = add nsw i32 %34, -2
  %49 = getelementptr inbounds i32, i32* %33, i64 2
  %50 = load i32, i32* %36, align 4
  %51 = and i32 %50, 65535
  %52 = lshr i32 %50, 16
  %53 = zext i32 %52 to i64
  %54 = mul i64 %8, %53
  %55 = getelementptr inbounds i8, i8* %6, i64 %54
  %56 = bitcast i8* %55 to i32*
  %57 = zext i32 %51 to i64
  %58 = getelementptr inbounds i32, i32* %56, i64 %57
  %59 = load i32, i32* %58, align 4
  %60 = getelementptr inbounds i32, i32* %35, i64 2
  store i32 %59, i32* %47, align 4
  %61 = icmp sgt i32 %48, 0
  br i1 %61, label %32, label %62

62:                                               ; preds = %27, %32, %4
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZL43Clamp_S32_opaque_D32_nofilter_DX_shaderprocPKviiPji(i8*, i32, i32, i32* nocapture, i32) #0 {
  %6 = alloca %struct.SkPoint, align 4
  %7 = getelementptr inbounds i8, i8* %0, i64 8
  %8 = getelementptr inbounds i8, i8* %0, i64 40
  %9 = bitcast i8* %8 to i32*
  %10 = load i32, i32* %9, align 4
  %11 = add nsw i32 %10, -1
  %12 = bitcast %struct.SkPoint* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %12) #6
  %13 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %6, i64 0, i32 0
  store float 0xFFFFFFFFE0000000, float* %13, align 4
  %14 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %6, i64 0, i32 1
  store float 0xFFFFFFFFE0000000, float* %14, align 4
  %15 = getelementptr inbounds i8, i8* %0, i64 104
  %16 = bitcast i8* %15 to void (%class.SkMatrix*, float, float, %struct.SkPoint*)**
  %17 = load void (%class.SkMatrix*, float, float, %struct.SkPoint*)*, void (%class.SkMatrix*, float, float, %struct.SkPoint*)** %16, align 8
  %18 = getelementptr inbounds i8, i8* %0, i64 48
  %19 = bitcast i8* %18 to %class.SkMatrix*
  %20 = sitofp i32 %1 to float
  %21 = fadd float %20, 5.000000e-01
  %22 = sitofp i32 %2 to float
  %23 = fadd float %22, 5.000000e-01
  call void %17(%class.SkMatrix* dereferenceable(40) %19, float %21, float %23, %struct.SkPoint* nonnull %6) #6
  %24 = getelementptr inbounds i8, i8* %0, i64 100
  %25 = load i8, i8* %24, align 4, !range !7
  %26 = icmp eq i8 %25, 0
  br i1 %26, label %36, label %27

27:                                               ; preds = %5
  %28 = getelementptr inbounds i8, i8* %0, i64 128
  %29 = bitcast i8* %28 to i32*
  %30 = load i32, i32* %29, align 8
  %31 = ashr i32 %30, 1
  %32 = getelementptr inbounds i8, i8* %0, i64 132
  %33 = bitcast i8* %32 to i32*
  %34 = load i32, i32* %33, align 4
  %35 = ashr i32 %34, 1
  br label %46

36:                                               ; preds = %5
  %37 = bitcast i8* %18 to float*
  %38 = load float, float* %37, align 4
  %39 = fcmp ogt float %38, 0.000000e+00
  %40 = zext i1 %39 to i32
  %41 = getelementptr inbounds i8, i8* %0, i64 64
  %42 = bitcast i8* %41 to float*
  %43 = load float, float* %42, align 4
  %44 = fcmp ogt float %43, 0.000000e+00
  %45 = zext i1 %44 to i32
  br label %46

46:                                               ; preds = %27, %36
  %47 = phi i32 [ %31, %27 ], [ %40, %36 ]
  %48 = phi i32 [ %35, %27 ], [ %45, %36 ]
  %49 = load float, float* %13, align 4
  %50 = fmul float %49, 0x41F0000000000000
  %51 = fcmp olt float %50, 0x43DFFFFFE0000000
  %52 = select i1 %51, float %50, float 0x43DFFFFFE0000000
  %53 = fcmp ogt float %52, 0xC3DFFFFFE0000000
  %54 = select i1 %53, float %52, float 0xC3DFFFFFE0000000
  %55 = fptosi float %54 to i64
  %56 = sext i32 %47 to i64
  %57 = shl nsw i64 %56, 16
  %58 = sub i64 %55, %57
  %59 = load float, float* %14, align 4
  %60 = fmul float %59, 0x41F0000000000000
  %61 = fcmp olt float %60, 0x43DFFFFFE0000000
  %62 = select i1 %61, float %60, float 0x43DFFFFFE0000000
  %63 = fcmp ogt float %62, 0xC3DFFFFFE0000000
  %64 = select i1 %63, float %62, float 0xC3DFFFFFE0000000
  %65 = fptosi float %64 to i64
  %66 = sext i32 %48 to i64
  %67 = shl nsw i64 %66, 16
  %68 = sub i64 %65, %67
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %12) #6
  %69 = getelementptr inbounds i8, i8* %0, i64 44
  %70 = bitcast i8* %69 to i32*
  %71 = load i32, i32* %70, align 4
  %72 = add nsw i32 %71, -1
  %73 = lshr i64 %68, 32
  %74 = trunc i64 %73 to i32
  %75 = icmp slt i32 %72, %74
  %76 = select i1 %75, i32 %72, i32 %74
  %77 = icmp sgt i32 %76, 0
  %78 = select i1 %77, i32 %76, i32 0
  %79 = bitcast i8* %7 to i8**
  %80 = load i8*, i8** %79, align 8
  %81 = zext i32 %78 to i64
  %82 = getelementptr inbounds i8, i8* %0, i64 16
  %83 = bitcast i8* %82 to i64*
  %84 = load i64, i64* %83, align 8
  %85 = mul i64 %84, %81
  %86 = getelementptr inbounds i8, i8* %80, i64 %85
  %87 = bitcast i8* %86 to i32*
  %88 = getelementptr inbounds i8, i8* %0, i64 112
  %89 = bitcast i8* %88 to i64*
  %90 = load i64, i64* %89, align 8
  %91 = ashr i64 %58, 32
  %92 = zext i32 %11 to i64
  %93 = icmp ugt i64 %91, %92
  br i1 %93, label %184, label %94

94:                                               ; preds = %46
  %95 = add nsw i32 %4, -1
  %96 = sext i32 %95 to i64
  %97 = mul nsw i64 %90, %96
  %98 = add nsw i64 %58, %97
  %99 = ashr i64 %98, 32
  %100 = icmp ugt i64 %99, %92
  br i1 %100, label %184, label %101

101:                                              ; preds = %94
  %102 = ashr i32 %4, 2
  %103 = icmp sgt i32 %4, 3
  br i1 %103, label %132, label %104

104:                                              ; preds = %132, %101
  %105 = phi i64 [ %58, %101 ], [ %151, %132 ]
  %106 = phi i32* [ %3, %101 ], [ %155, %132 ]
  %107 = and i32 %4, -4
  %108 = icmp slt i32 %107, %4
  br i1 %108, label %109, label %237

109:                                              ; preds = %104
  %110 = xor i32 %107, -1
  %111 = add i32 %110, %4
  %112 = and i32 %4, 3
  %113 = icmp eq i32 %112, 0
  br i1 %113, label %127, label %114

114:                                              ; preds = %109, %114
  %115 = phi i32* [ %122, %114 ], [ %106, %109 ]
  %116 = phi i32 [ %124, %114 ], [ %107, %109 ]
  %117 = phi i64 [ %123, %114 ], [ %105, %109 ]
  %118 = phi i32 [ %125, %114 ], [ %112, %109 ]
  %119 = lshr i64 %117, 32
  %120 = getelementptr inbounds i32, i32* %87, i64 %119
  %121 = load i32, i32* %120, align 4
  %122 = getelementptr inbounds i32, i32* %115, i64 1
  store i32 %121, i32* %115, align 4
  %123 = add nsw i64 %117, %90
  %124 = add nsw i32 %116, 1
  %125 = add i32 %118, -1
  %126 = icmp eq i32 %125, 0
  br i1 %126, label %127, label %114, !llvm.loop !8

127:                                              ; preds = %114, %109
  %128 = phi i32* [ %106, %109 ], [ %122, %114 ]
  %129 = phi i32 [ %107, %109 ], [ %124, %114 ]
  %130 = phi i64 [ %105, %109 ], [ %123, %114 ]
  %131 = icmp ult i32 %111, 3
  br i1 %131, label %237, label %158

132:                                              ; preds = %101, %132
  %133 = phi i32* [ %155, %132 ], [ %3, %101 ]
  %134 = phi i64 [ %151, %132 ], [ %58, %101 ]
  %135 = phi i32 [ %156, %132 ], [ 0, %101 ]
  %136 = ashr i64 %134, 32
  %137 = getelementptr inbounds i32, i32* %87, i64 %136
  %138 = load i32, i32* %137, align 4
  %139 = add nsw i64 %134, %90
  %140 = ashr i64 %139, 32
  %141 = getelementptr inbounds i32, i32* %87, i64 %140
  %142 = load i32, i32* %141, align 4
  %143 = add nsw i64 %139, %90
  %144 = ashr i64 %143, 32
  %145 = getelementptr inbounds i32, i32* %87, i64 %144
  %146 = load i32, i32* %145, align 4
  %147 = add nsw i64 %143, %90
  %148 = ashr i64 %147, 32
  %149 = getelementptr inbounds i32, i32* %87, i64 %148
  %150 = load i32, i32* %149, align 4
  %151 = add nsw i64 %147, %90
  store i32 %138, i32* %133, align 4
  %152 = getelementptr inbounds i32, i32* %133, i64 1
  store i32 %142, i32* %152, align 4
  %153 = getelementptr inbounds i32, i32* %133, i64 2
  store i32 %146, i32* %153, align 4
  %154 = getelementptr inbounds i32, i32* %133, i64 3
  store i32 %150, i32* %154, align 4
  %155 = getelementptr inbounds i32, i32* %133, i64 4
  %156 = add nuw nsw i32 %135, 1
  %157 = icmp slt i32 %156, %102
  br i1 %157, label %132, label %104

158:                                              ; preds = %127, %158
  %159 = phi i32* [ %180, %158 ], [ %128, %127 ]
  %160 = phi i32 [ %182, %158 ], [ %129, %127 ]
  %161 = phi i64 [ %181, %158 ], [ %130, %127 ]
  %162 = lshr i64 %161, 32
  %163 = getelementptr inbounds i32, i32* %87, i64 %162
  %164 = load i32, i32* %163, align 4
  %165 = getelementptr inbounds i32, i32* %159, i64 1
  store i32 %164, i32* %159, align 4
  %166 = add nsw i64 %161, %90
  %167 = lshr i64 %166, 32
  %168 = getelementptr inbounds i32, i32* %87, i64 %167
  %169 = load i32, i32* %168, align 4
  %170 = getelementptr inbounds i32, i32* %159, i64 2
  store i32 %169, i32* %165, align 4
  %171 = add nsw i64 %166, %90
  %172 = lshr i64 %171, 32
  %173 = getelementptr inbounds i32, i32* %87, i64 %172
  %174 = load i32, i32* %173, align 4
  %175 = getelementptr inbounds i32, i32* %159, i64 3
  store i32 %174, i32* %170, align 4
  %176 = add nsw i64 %171, %90
  %177 = lshr i64 %176, 32
  %178 = getelementptr inbounds i32, i32* %87, i64 %177
  %179 = load i32, i32* %178, align 4
  %180 = getelementptr inbounds i32, i32* %159, i64 4
  store i32 %179, i32* %175, align 4
  %181 = add nsw i64 %176, %90
  %182 = add nsw i32 %160, 4
  %183 = icmp eq i32 %182, %4
  br i1 %183, label %237, label %158

184:                                              ; preds = %94, %46
  %185 = icmp sgt i32 %4, 0
  br i1 %185, label %186, label %237

186:                                              ; preds = %184
  %187 = zext i32 %4 to i64
  %188 = and i64 %187, 1
  %189 = icmp eq i32 %4, 1
  br i1 %189, label %222, label %190

190:                                              ; preds = %186
  %191 = sub nsw i64 %187, %188
  br label %192

192:                                              ; preds = %192, %190
  %193 = phi i64 [ 0, %190 ], [ %219, %192 ]
  %194 = phi i64 [ %58, %190 ], [ %218, %192 ]
  %195 = phi i64 [ %191, %190 ], [ %220, %192 ]
  %196 = lshr i64 %194, 32
  %197 = trunc i64 %196 to i32
  %198 = icmp slt i32 %11, %197
  %199 = select i1 %198, i32 %11, i32 %197
  %200 = icmp sgt i32 %199, 0
  %201 = select i1 %200, i32 %199, i32 0
  %202 = zext i32 %201 to i64
  %203 = getelementptr inbounds i32, i32* %87, i64 %202
  %204 = load i32, i32* %203, align 4
  %205 = getelementptr inbounds i32, i32* %3, i64 %193
  store i32 %204, i32* %205, align 4
  %206 = add nsw i64 %194, %90
  %207 = or i64 %193, 1
  %208 = lshr i64 %206, 32
  %209 = trunc i64 %208 to i32
  %210 = icmp slt i32 %11, %209
  %211 = select i1 %210, i32 %11, i32 %209
  %212 = icmp sgt i32 %211, 0
  %213 = select i1 %212, i32 %211, i32 0
  %214 = zext i32 %213 to i64
  %215 = getelementptr inbounds i32, i32* %87, i64 %214
  %216 = load i32, i32* %215, align 4
  %217 = getelementptr inbounds i32, i32* %3, i64 %207
  store i32 %216, i32* %217, align 4
  %218 = add nsw i64 %206, %90
  %219 = add nuw nsw i64 %193, 2
  %220 = add i64 %195, -2
  %221 = icmp eq i64 %220, 0
  br i1 %221, label %222, label %192

222:                                              ; preds = %192, %186
  %223 = phi i64 [ 0, %186 ], [ %219, %192 ]
  %224 = phi i64 [ %58, %186 ], [ %218, %192 ]
  %225 = icmp eq i64 %188, 0
  br i1 %225, label %237, label %226

226:                                              ; preds = %222
  %227 = lshr i64 %224, 32
  %228 = trunc i64 %227 to i32
  %229 = icmp slt i32 %11, %228
  %230 = select i1 %229, i32 %11, i32 %228
  %231 = icmp sgt i32 %230, 0
  %232 = select i1 %231, i32 %230, i32 0
  %233 = zext i32 %232 to i64
  %234 = getelementptr inbounds i32, i32* %87, i64 %233
  %235 = load i32, i32* %234, align 4
  %236 = getelementptr inbounds i32, i32* %3, i64 %223
  store i32 %235, i32* %236, align 4
  br label %237

237:                                              ; preds = %127, %158, %226, %222, %104, %184
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void (i8*, i32, i32, i32*, i32)* @_ZN17SkBitmapProcState18chooseShaderProc32Ev(%struct.SkBitmapProcState*) local_unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %struct.SkBitmapProcState, %struct.SkBitmapProcState* %0, i64 0, i32 1, i32 2, i32 0, i32 1
  %3 = load i32, i32* %2, align 8
  %4 = icmp eq i32 %3, 6
  br i1 %4, label %5, label %77

5:                                                ; preds = %1
  %6 = getelementptr inbounds %struct.SkBitmapProcState, %struct.SkBitmapProcState* %0, i64 0, i32 1, i32 2, i32 1, i32 0
  %7 = load i32, i32* %6, align 4
  %8 = icmp eq i32 %7, 1
  br i1 %8, label %9, label %39

9:                                                ; preds = %5
  %10 = getelementptr inbounds %struct.SkBitmapProcState, %struct.SkBitmapProcState* %0, i64 0, i32 2
  %11 = getelementptr inbounds %struct.SkBitmapProcState, %struct.SkBitmapProcState* %0, i64 0, i32 2, i32 1
  %12 = load i32, i32* %11, align 4
  %13 = trunc i32 %12 to i8
  %14 = icmp slt i8 %13, 0
  br i1 %14, label %15, label %18

15:                                               ; preds = %9
  %16 = tail call zeroext i8 @_ZNK8SkMatrix15computeTypeMaskEv(%class.SkMatrix* %10) #6
  %17 = zext i8 %16 to i32
  store i32 %17, i32* %11, align 4
  br label %18

18:                                               ; preds = %9, %15
  %19 = phi i32 [ %17, %15 ], [ %12, %9 ]
  %20 = and i32 %19, 12
  %21 = icmp eq i32 %20, 0
  br i1 %21, label %22, label %39

22:                                               ; preds = %18
  %23 = getelementptr inbounds %struct.SkBitmapProcState, %struct.SkBitmapProcState* %0, i64 0, i32 6
  %24 = load i8, i8* %23, align 4, !range !7
  %25 = icmp eq i8 %24, 0
  br i1 %25, label %26, label %38

26:                                               ; preds = %22
  %27 = trunc i32 %19 to i8
  %28 = icmp slt i8 %27, 0
  br i1 %28, label %29, label %32

29:                                               ; preds = %26
  %30 = tail call zeroext i8 @_ZNK8SkMatrix15computeTypeMaskEv(%class.SkMatrix* %10) #6
  %31 = zext i8 %30 to i32
  store i32 %31, i32* %11, align 4
  br label %32

32:                                               ; preds = %26, %29
  %33 = phi i32 [ %31, %29 ], [ %19, %26 ]
  %34 = and i32 %33, 14
  %35 = icmp eq i32 %34, 0
  br i1 %35, label %36, label %38

36:                                               ; preds = %32
  %37 = tail call zeroext i1 @_ZN17SkBitmapProcState17setupForTranslateEv(%struct.SkBitmapProcState* %0)
  br i1 %37, label %38, label %77

38:                                               ; preds = %22, %36, %32
  br label %77

39:                                               ; preds = %18, %5
  %40 = getelementptr inbounds %struct.SkBitmapProcState, %struct.SkBitmapProcState* %0, i64 0, i32 12
  %41 = load i16, i16* %40, align 8
  %42 = icmp ult i16 %41, 256
  br i1 %42, label %77, label %43

43:                                               ; preds = %39
  %44 = getelementptr inbounds %struct.SkBitmapProcState, %struct.SkBitmapProcState* %0, i64 0, i32 2, i32 1
  %45 = load i32, i32* %44, align 4
  %46 = trunc i32 %45 to i8
  %47 = icmp slt i8 %46, 0
  br i1 %47, label %48, label %52

48:                                               ; preds = %43
  %49 = getelementptr inbounds %struct.SkBitmapProcState, %struct.SkBitmapProcState* %0, i64 0, i32 2
  %50 = tail call zeroext i8 @_ZNK8SkMatrix15computeTypeMaskEv(%class.SkMatrix* %49) #6
  %51 = zext i8 %50 to i32
  store i32 %51, i32* %44, align 4
  br label %52

52:                                               ; preds = %43, %48
  %53 = phi i32 [ %51, %48 ], [ %45, %43 ]
  %54 = and i32 %53, 14
  %55 = icmp eq i32 %54, 0
  br i1 %55, label %56, label %77

56:                                               ; preds = %52
  %57 = getelementptr inbounds %struct.SkBitmapProcState, %struct.SkBitmapProcState* %0, i64 0, i32 6
  %58 = load i8, i8* %57, align 4, !range !7
  %59 = icmp eq i8 %58, 0
  br i1 %59, label %60, label %77

60:                                               ; preds = %56
  %61 = getelementptr inbounds %struct.SkBitmapProcState, %struct.SkBitmapProcState* %0, i64 0, i32 4
  %62 = load i32, i32* %61, align 4
  %63 = getelementptr inbounds %struct.SkBitmapProcState, %struct.SkBitmapProcState* %0, i64 0, i32 5
  %64 = load i32, i32* %63, align 8
  %65 = or i32 %64, %62
  %66 = icmp eq i32 %65, 0
  br i1 %66, label %67, label %70

67:                                               ; preds = %60
  %68 = tail call zeroext i1 @_ZN17SkBitmapProcState17setupForTranslateEv(%struct.SkBitmapProcState* %0)
  %69 = select i1 %68, void (i8*, i32, i32, i32*, i32)* @_ZL39Clamp_S32_D32_nofilter_trans_shaderprocPKviiPji, void (i8*, i32, i32, i32*, i32)* @_ZL20DoNothing_shaderprocPKviiPji
  br label %77

70:                                               ; preds = %60
  %71 = icmp eq i32 %62, 1
  %72 = icmp eq i32 %64, 1
  %73 = and i1 %71, %72
  br i1 %73, label %74, label %77

74:                                               ; preds = %70
  %75 = tail call zeroext i1 @_ZN17SkBitmapProcState17setupForTranslateEv(%struct.SkBitmapProcState* %0)
  %76 = select i1 %75, void (i8*, i32, i32, i32*, i32)* @_ZL40Repeat_S32_D32_nofilter_trans_shaderprocPKviiPji, void (i8*, i32, i32, i32*, i32)* @_ZL20DoNothing_shaderprocPKviiPji
  br label %77

77:                                               ; preds = %67, %74, %70, %56, %52, %39, %36, %1, %38
  %78 = phi void (i8*, i32, i32, i32*, i32)* [ @_ZL25S32_D32_constX_shaderprocPKviiPji, %38 ], [ null, %1 ], [ @_ZL20DoNothing_shaderprocPKviiPji, %36 ], [ null, %39 ], [ null, %52 ], [ null, %56 ], [ %69, %67 ], [ %76, %74 ], [ null, %70 ]
  ret void (i8*, i32, i32, i32*, i32)* %78
}

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN17SkBitmapProcState17setupForTranslateEv(%struct.SkBitmapProcState*) local_unnamed_addr #0 align 2 {
  %2 = alloca %struct.SkPoint, align 4
  %3 = bitcast %struct.SkPoint* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %3) #6
  %4 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %2, i64 0, i32 0
  store float 0xFFFFFFFFE0000000, float* %4, align 4
  %5 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %2, i64 0, i32 1
  store float 0xFFFFFFFFE0000000, float* %5, align 4
  %6 = getelementptr inbounds %struct.SkBitmapProcState, %struct.SkBitmapProcState* %0, i64 0, i32 7
  %7 = load void (%class.SkMatrix*, float, float, %struct.SkPoint*)*, void (%class.SkMatrix*, float, float, %struct.SkPoint*)** %6, align 8
  %8 = getelementptr inbounds %struct.SkBitmapProcState, %struct.SkBitmapProcState* %0, i64 0, i32 2
  call void %7(%class.SkMatrix* dereferenceable(40) %8, float 5.000000e-01, float 5.000000e-01, %struct.SkPoint* nonnull %2) #6
  %9 = getelementptr inbounds %struct.SkBitmapProcState, %struct.SkBitmapProcState* %0, i64 0, i32 6
  %10 = load i8, i8* %9, align 4, !range !7
  %11 = icmp eq i8 %10, 0
  br i1 %11, label %19, label %12

12:                                               ; preds = %1
  %13 = getelementptr inbounds %struct.SkBitmapProcState, %struct.SkBitmapProcState* %0, i64 0, i32 10
  %14 = load i32, i32* %13, align 8
  %15 = ashr i32 %14, 1
  %16 = getelementptr inbounds %struct.SkBitmapProcState, %struct.SkBitmapProcState* %0, i64 0, i32 11
  %17 = load i32, i32* %16, align 4
  %18 = ashr i32 %17, 1
  br label %28

19:                                               ; preds = %1
  %20 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %8, i64 0, i32 0, i64 0
  %21 = load float, float* %20, align 4
  %22 = fcmp ogt float %21, 0.000000e+00
  %23 = zext i1 %22 to i32
  %24 = getelementptr inbounds %struct.SkBitmapProcState, %struct.SkBitmapProcState* %0, i64 0, i32 2, i32 0, i64 4
  %25 = load float, float* %24, align 4
  %26 = fcmp ogt float %25, 0.000000e+00
  %27 = zext i1 %26 to i32
  br label %28

28:                                               ; preds = %12, %19
  %29 = phi i32 [ %15, %12 ], [ %23, %19 ]
  %30 = phi i32 [ %18, %12 ], [ %27, %19 ]
  %31 = load float, float* %4, align 4
  %32 = fmul float %31, 0x41F0000000000000
  %33 = fcmp olt float %32, 0x43DFFFFFE0000000
  %34 = select i1 %33, float %32, float 0x43DFFFFFE0000000
  %35 = load float, float* %5, align 4
  %36 = fmul float %35, 0x41F0000000000000
  %37 = fcmp olt float %36, 0x43DFFFFFE0000000
  %38 = select i1 %37, float %36, float 0x43DFFFFFE0000000
  %39 = sitofp i32 %29 to float
  %40 = fmul float %39, 0x3EF0000000000000
  %41 = fsub float %31, %40
  %42 = sitofp i32 %30 to float
  %43 = fmul float %42, 0x3EF0000000000000
  %44 = fsub float %35, %43
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %3) #6
  %45 = call float @llvm.fabs.f32(float %41)
  %46 = fcmp ogt float %45, 0x41D0000000000000
  %47 = call float @llvm.fabs.f32(float %44)
  %48 = fcmp ogt float %47, 0x41D0000000000000
  %49 = or i1 %46, %48
  br i1 %49, label %69, label %50

50:                                               ; preds = %28
  %51 = fcmp ogt float %38, 0xC3DFFFFFE0000000
  %52 = select i1 %51, float %38, float 0xC3DFFFFFE0000000
  %53 = fptosi float %52 to i64
  %54 = sext i32 %30 to i64
  %55 = shl nsw i64 %54, 16
  %56 = sub i64 %53, %55
  %57 = fcmp ogt float %34, 0xC3DFFFFFE0000000
  %58 = select i1 %57, float %34, float 0xC3DFFFFFE0000000
  %59 = fptosi float %58 to i64
  %60 = sext i32 %29 to i64
  %61 = shl nsw i64 %60, 16
  %62 = sub i64 %59, %61
  %63 = lshr i64 %62, 32
  %64 = trunc i64 %63 to i32
  %65 = getelementptr inbounds %struct.SkBitmapProcState, %struct.SkBitmapProcState* %0, i64 0, i32 10
  store i32 %64, i32* %65, align 8
  %66 = lshr i64 %56, 32
  %67 = trunc i64 %66 to i32
  %68 = getelementptr inbounds %struct.SkBitmapProcState, %struct.SkBitmapProcState* %0, i64 0, i32 11
  store i32 %67, i32* %68, align 4
  br label %69

69:                                               ; preds = %28, %50
  %70 = phi i1 [ true, %50 ], [ false, %28 ]
  ret i1 %70
}

; Function Attrs: nounwind readnone speculatable
declare float @llvm.fabs.f32(float) #4

; Function Attrs: nounwind ssp uwtable
define internal void @_ZL20DoNothing_shaderprocPKviiPji(i8* nocapture readnone, i32, i32, i32*, i32) #0 {
  %6 = load void (i32*, i32, i32)*, void (i32*, i32, i32)** @_ZN6SkOpts8memset32E, align 8
  tail call void %6(i32* %3, i32 0, i32 %4) #6
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZL25S32_D32_constX_shaderprocPKviiPji(i8*, i32, i32, i32*, i32) #0 {
  %6 = alloca %struct.SkPoint, align 4
  %7 = alloca [2 x i32], align 4
  %8 = getelementptr inbounds i8, i8* %0, i64 100
  %9 = load i8, i8* %8, align 4, !range !7
  %10 = icmp eq i8 %9, 0
  br i1 %10, label %25, label %11

11:                                               ; preds = %5
  %12 = bitcast i8* %0 to %struct.SkBitmapProcState*
  %13 = getelementptr inbounds i8, i8* %0, i64 320
  %14 = bitcast i8* %13 to void (%struct.SkBitmapProcState*, i32*, i32, i32, i32)**
  %15 = load void (%struct.SkBitmapProcState*, i32*, i32, i32, i32)*, void (%struct.SkBitmapProcState*, i32*, i32, i32, i32)** %14, align 8
  %16 = bitcast [2 x i32]* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %16) #6
  %17 = getelementptr inbounds [2 x i32], [2 x i32]* %7, i64 0, i64 0
  store i32 -1431655766, i32* %17, align 4
  %18 = getelementptr inbounds [2 x i32], [2 x i32]* %7, i64 0, i64 1
  store i32 -1431655766, i32* %18, align 4
  call void %15(%struct.SkBitmapProcState* dereferenceable(336) %12, i32* nonnull %17, i32 1, i32 %1, i32 %2) #6
  %19 = load i32, i32* %17, align 4
  %20 = lshr i32 %19, 18
  %21 = and i32 %19, 16383
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %16) #6
  %22 = zext i32 %21 to i64
  %23 = lshr i32 %19, 10
  %24 = and i32 %23, 240
  br label %146

25:                                               ; preds = %5
  %26 = getelementptr inbounds i8, i8* %0, i64 84
  %27 = bitcast i8* %26 to i32*
  %28 = load i32, i32* %27, align 4
  %29 = trunc i32 %28 to i8
  %30 = icmp slt i8 %29, 0
  br i1 %30, label %31, label %36

31:                                               ; preds = %25
  %32 = getelementptr inbounds i8, i8* %0, i64 48
  %33 = bitcast i8* %32 to %class.SkMatrix*
  %34 = tail call zeroext i8 @_ZNK8SkMatrix15computeTypeMaskEv(%class.SkMatrix* %33) #6
  %35 = zext i8 %34 to i32
  store i32 %35, i32* %27, align 4
  br label %36

36:                                               ; preds = %25, %31
  %37 = phi i32 [ %35, %31 ], [ %28, %25 ]
  %38 = and i32 %37, 14
  %39 = icmp eq i32 %38, 0
  br i1 %39, label %40, label %45

40:                                               ; preds = %36
  %41 = getelementptr inbounds i8, i8* %0, i64 132
  %42 = bitcast i8* %41 to i32*
  %43 = load i32, i32* %42, align 4
  %44 = add nsw i32 %43, %2
  br label %103

45:                                               ; preds = %36
  %46 = bitcast %struct.SkPoint* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %46) #6
  %47 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %6, i64 0, i32 0
  store float 0xFFFFFFFFE0000000, float* %47, align 4
  %48 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %6, i64 0, i32 1
  store float 0xFFFFFFFFE0000000, float* %48, align 4
  %49 = getelementptr inbounds i8, i8* %0, i64 104
  %50 = bitcast i8* %49 to void (%class.SkMatrix*, float, float, %struct.SkPoint*)**
  %51 = load void (%class.SkMatrix*, float, float, %struct.SkPoint*)*, void (%class.SkMatrix*, float, float, %struct.SkPoint*)** %50, align 8
  %52 = getelementptr inbounds i8, i8* %0, i64 48
  %53 = bitcast i8* %52 to %class.SkMatrix*
  %54 = sitofp i32 %1 to float
  %55 = fadd float %54, 5.000000e-01
  %56 = sitofp i32 %2 to float
  %57 = fadd float %56, 5.000000e-01
  call void %51(%class.SkMatrix* dereferenceable(40) %53, float %55, float %57, %struct.SkPoint* nonnull %6) #6
  %58 = load i8, i8* %8, align 4, !range !7
  %59 = icmp eq i8 %58, 0
  br i1 %59, label %65, label %60

60:                                               ; preds = %45
  %61 = getelementptr inbounds i8, i8* %0, i64 132
  %62 = bitcast i8* %61 to i32*
  %63 = load i32, i32* %62, align 4
  %64 = ashr i32 %63, 1
  br label %71

65:                                               ; preds = %45
  %66 = getelementptr inbounds i8, i8* %0, i64 64
  %67 = bitcast i8* %66 to float*
  %68 = load float, float* %67, align 4
  %69 = fcmp ogt float %68, 0.000000e+00
  %70 = zext i1 %69 to i32
  br label %71

71:                                               ; preds = %60, %65
  %72 = phi i32 [ %64, %60 ], [ %70, %65 ]
  %73 = load float, float* %48, align 4
  %74 = fmul float %73, 0x41F0000000000000
  %75 = fcmp olt float %74, 0x43DFFFFFE0000000
  %76 = select i1 %75, float %74, float 0x43DFFFFFE0000000
  %77 = fcmp ogt float %76, 0xC3DFFFFFE0000000
  %78 = select i1 %77, float %76, float 0xC3DFFFFFE0000000
  %79 = fptosi float %78 to i64
  %80 = sext i32 %72 to i64
  %81 = shl nsw i64 %80, 16
  %82 = sub i64 %79, %81
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %46) #6
  %83 = getelementptr inbounds i8, i8* %0, i64 92
  %84 = bitcast i8* %83 to i32*
  %85 = load i32, i32* %84, align 4
  %86 = icmp eq i32 %85, 0
  br i1 %86, label %87, label %92

87:                                               ; preds = %71
  %88 = getelementptr inbounds i8, i8* %0, i64 96
  %89 = bitcast i8* %88 to i32*
  %90 = load i32, i32* %89, align 8
  %91 = icmp eq i32 %90, 0
  br i1 %91, label %100, label %92

92:                                               ; preds = %87, %71
  %93 = getelementptr inbounds i8, i8* %0, i64 44
  %94 = bitcast i8* %93 to i32*
  %95 = load i32, i32* %94, align 4
  %96 = sext i32 %95 to i64
  %97 = mul nsw i64 %82, %96
  %98 = lshr i64 %97, 32
  %99 = trunc i64 %98 to i32
  br label %103

100:                                              ; preds = %87
  %101 = lshr i64 %82, 32
  %102 = trunc i64 %101 to i32
  br label %103

103:                                              ; preds = %92, %100, %40
  %104 = phi i32 [ %44, %40 ], [ %102, %100 ], [ %99, %92 ]
  %105 = getelementptr inbounds i8, i8* %0, i64 44
  %106 = bitcast i8* %105 to i32*
  %107 = load i32, i32* %106, align 4
  %108 = getelementptr inbounds i8, i8* %0, i64 96
  %109 = bitcast i8* %108 to i32*
  %110 = load i32, i32* %109, align 8
  switch i32 %110, label %128 [
    i32 0, label %111
    i32 1, label %117
  ]

111:                                              ; preds = %103
  %112 = add nsw i32 %107, -1
  %113 = icmp slt i32 %112, %104
  %114 = select i1 %113, i32 %112, i32 %104
  %115 = icmp sgt i32 %114, 0
  %116 = select i1 %115, i32 %114, i32 0
  br label %146

117:                                              ; preds = %103
  %118 = icmp ult i32 %104, %107
  br i1 %118, label %146, label %119

119:                                              ; preds = %117
  %120 = icmp slt i32 %104, 0
  br i1 %120, label %121, label %126

121:                                              ; preds = %119
  %122 = xor i32 %104, -1
  %123 = srem i32 %122, %107
  %124 = xor i32 %123, -1
  %125 = add nsw i32 %107, %124
  br label %146

126:                                              ; preds = %119
  %127 = srem i32 %104, %107
  br label %146

128:                                              ; preds = %103
  %129 = shl i32 %107, 1
  %130 = icmp ugt i32 %129, %104
  br i1 %130, label %140, label %131

131:                                              ; preds = %128
  %132 = icmp slt i32 %104, 0
  br i1 %132, label %133, label %138

133:                                              ; preds = %131
  %134 = xor i32 %104, -1
  %135 = srem i32 %134, %129
  %136 = xor i32 %135, -1
  %137 = add nsw i32 %129, %136
  br label %140

138:                                              ; preds = %131
  %139 = srem i32 %104, %129
  br label %140

140:                                              ; preds = %128, %133, %138
  %141 = phi i32 [ %137, %133 ], [ %139, %138 ], [ %104, %128 ]
  %142 = icmp slt i32 %141, %107
  %143 = xor i32 %141, -1
  %144 = add i32 %129, %143
  %145 = select i1 %142, i32 %141, i32 %144
  br label %146

146:                                              ; preds = %111, %140, %117, %121, %126, %11
  %147 = phi i64 [ %22, %11 ], [ 0, %126 ], [ 0, %121 ], [ 0, %117 ], [ 0, %140 ], [ 0, %111 ]
  %148 = phi i32 [ %24, %11 ], [ 0, %126 ], [ 0, %121 ], [ 0, %117 ], [ 0, %140 ], [ 0, %111 ]
  %149 = phi i32 [ %20, %11 ], [ %127, %126 ], [ %125, %121 ], [ %104, %117 ], [ %145, %140 ], [ %116, %111 ]
  %150 = getelementptr inbounds i8, i8* %0, i64 8
  %151 = bitcast i8* %150 to i8**
  %152 = load i8*, i8** %151, align 8
  %153 = sext i32 %149 to i64
  %154 = getelementptr inbounds i8, i8* %0, i64 16
  %155 = bitcast i8* %154 to i64*
  %156 = load i64, i64* %155, align 8
  %157 = mul i64 %156, %153
  %158 = getelementptr inbounds i8, i8* %152, i64 %157
  %159 = bitcast i8* %158 to i32*
  %160 = load i8, i8* %8, align 4, !range !7
  %161 = icmp eq i8 %160, 0
  br i1 %161, label %195, label %162

162:                                              ; preds = %146
  %163 = mul i64 %156, %147
  %164 = getelementptr inbounds i8, i8* %152, i64 %163
  %165 = bitcast i8* %164 to i32*
  %166 = load i32, i32* %159, align 4
  %167 = load i32, i32* %165, align 4
  %168 = getelementptr inbounds i8, i8* %0, i64 136
  %169 = bitcast i8* %168 to i16*
  %170 = load i16, i16* %169, align 8
  %171 = zext i16 %170 to i32
  %172 = sub nuw nsw i32 256, %148
  %173 = and i32 %166, 16711935
  %174 = mul i32 %173, %172
  %175 = lshr i32 %166, 8
  %176 = and i32 %175, 16711935
  %177 = mul i32 %176, %172
  %178 = and i32 %167, 16711935
  %179 = mul nuw i32 %178, %148
  %180 = add i32 %179, %174
  %181 = lshr i32 %167, 8
  %182 = and i32 %181, 16711935
  %183 = mul nuw i32 %182, %148
  %184 = add i32 %183, %177
  %185 = lshr i32 %180, 8
  %186 = and i32 %185, 16711935
  %187 = mul i32 %186, %171
  %188 = lshr i32 %184, 8
  %189 = and i32 %188, 16711935
  %190 = mul i32 %189, %171
  %191 = lshr i32 %187, 8
  %192 = and i32 %191, 16711935
  %193 = and i32 %190, -16711936
  %194 = or i32 %192, %193
  br label %212

195:                                              ; preds = %146
  %196 = getelementptr inbounds i8, i8* %0, i64 136
  %197 = bitcast i8* %196 to i16*
  %198 = load i16, i16* %197, align 8
  %199 = icmp ult i16 %198, 256
  %200 = load i32, i32* %159, align 4
  br i1 %199, label %201, label %212

201:                                              ; preds = %195
  %202 = zext i16 %198 to i32
  %203 = and i32 %200, 16711935
  %204 = mul i32 %203, %202
  %205 = lshr i32 %204, 8
  %206 = lshr i32 %200, 8
  %207 = and i32 %206, 16711935
  %208 = mul i32 %207, %202
  %209 = and i32 %205, 16711935
  %210 = and i32 %208, -16711936
  %211 = or i32 %209, %210
  br label %212

212:                                              ; preds = %195, %201, %162
  %213 = phi i32 [ %211, %201 ], [ %194, %162 ], [ %200, %195 ]
  %214 = load void (i32*, i32, i32)*, void (i32*, i32, i32)** @_ZN6SkOpts8memset32E, align 8
  call void %214(i32* %3, i32 %213, i32 %4) #6
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZL39Clamp_S32_D32_nofilter_trans_shaderprocPKviiPji(i8* nocapture readonly, i32, i32, i32*, i32) #0 {
  %6 = getelementptr inbounds i8, i8* %0, i64 8
  %7 = getelementptr inbounds i8, i8* %0, i64 40
  %8 = bitcast i8* %7 to i32*
  %9 = load i32, i32* %8, align 4
  %10 = add nsw i32 %9, -1
  %11 = getelementptr inbounds i8, i8* %0, i64 44
  %12 = bitcast i8* %11 to i32*
  %13 = load i32, i32* %12, align 4
  %14 = add nsw i32 %13, -1
  %15 = getelementptr inbounds i8, i8* %0, i64 128
  %16 = bitcast i8* %15 to i32*
  %17 = load i32, i32* %16, align 8
  %18 = add nsw i32 %17, %1
  %19 = getelementptr inbounds i8, i8* %0, i64 132
  %20 = bitcast i8* %19 to i32*
  %21 = load i32, i32* %20, align 4
  %22 = add nsw i32 %21, %2
  %23 = icmp slt i32 %14, %22
  %24 = select i1 %23, i32 %14, i32 %22
  %25 = icmp sgt i32 %24, 0
  %26 = select i1 %25, i32 %24, i32 0
  %27 = bitcast i8* %6 to i8**
  %28 = load i8*, i8** %27, align 8
  %29 = zext i32 %26 to i64
  %30 = getelementptr inbounds i8, i8* %0, i64 16
  %31 = bitcast i8* %30 to i64*
  %32 = load i64, i64* %31, align 8
  %33 = mul i64 %32, %29
  %34 = getelementptr inbounds i8, i8* %28, i64 %33
  %35 = bitcast i8* %34 to i32*
  %36 = icmp slt i32 %18, 0
  br i1 %36, label %37, label %47

37:                                               ; preds = %5
  %38 = sub nsw i32 0, %18
  %39 = icmp sgt i32 %38, %4
  %40 = select i1 %39, i32 %4, i32 %38
  %41 = load i32, i32* %35, align 4
  %42 = load void (i32*, i32, i32)*, void (i32*, i32, i32)** @_ZN6SkOpts8memset32E, align 8
  tail call void %42(i32* %3, i32 %41, i32 %40) #6
  %43 = sub nsw i32 %4, %40
  %44 = icmp eq i32 %43, 0
  %45 = sext i32 %40 to i64
  %46 = getelementptr inbounds i32, i32* %3, i64 %45
  br i1 %44, label %73, label %47

47:                                               ; preds = %37, %5
  %48 = phi i32 [ %43, %37 ], [ %4, %5 ]
  %49 = phi i32 [ 0, %37 ], [ %18, %5 ]
  %50 = phi i32* [ %46, %37 ], [ %3, %5 ]
  %51 = icmp sgt i32 %9, %49
  br i1 %51, label %52, label %66

52:                                               ; preds = %47
  %53 = sub nsw i32 %10, %49
  %54 = add nsw i32 %53, 1
  %55 = icmp slt i32 %48, %54
  %56 = select i1 %55, i32 %48, i32 %54
  %57 = bitcast i32* %50 to i8*
  %58 = sext i32 %49 to i64
  %59 = getelementptr inbounds i32, i32* %35, i64 %58
  %60 = bitcast i32* %59 to i8*
  %61 = sext i32 %56 to i64
  %62 = shl nsw i64 %61, 2
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %57, i8* align 4 %60, i64 %62, i1 false)
  %63 = sub nsw i32 %48, %56
  %64 = icmp eq i32 %63, 0
  %65 = getelementptr inbounds i32, i32* %50, i64 %61
  br i1 %64, label %73, label %66

66:                                               ; preds = %52, %47
  %67 = phi i32 [ %63, %52 ], [ %48, %47 ]
  %68 = phi i32* [ %65, %52 ], [ %50, %47 ]
  %69 = sext i32 %10 to i64
  %70 = getelementptr inbounds i32, i32* %35, i64 %69
  %71 = load i32, i32* %70, align 4
  %72 = load void (i32*, i32, i32)*, void (i32*, i32, i32)** @_ZN6SkOpts8memset32E, align 8
  tail call void %72(i32* %68, i32 %71, i32 %67) #6
  br label %73

73:                                               ; preds = %37, %52, %66
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZL40Repeat_S32_D32_nofilter_trans_shaderprocPKviiPji(i8* nocapture readonly, i32, i32, i32* nocapture, i32) #0 {
  %6 = getelementptr inbounds i8, i8* %0, i64 8
  %7 = getelementptr inbounds i8, i8* %0, i64 40
  %8 = bitcast i8* %7 to i32*
  %9 = load i32, i32* %8, align 4
  %10 = getelementptr inbounds i8, i8* %0, i64 44
  %11 = bitcast i8* %10 to i32*
  %12 = load i32, i32* %11, align 4
  %13 = getelementptr inbounds i8, i8* %0, i64 128
  %14 = bitcast i8* %13 to i32*
  %15 = load i32, i32* %14, align 8
  %16 = add nsw i32 %15, %1
  %17 = getelementptr inbounds i8, i8* %0, i64 132
  %18 = bitcast i8* %17 to i32*
  %19 = load i32, i32* %18, align 4
  %20 = add nsw i32 %19, %2
  %21 = icmp ult i32 %20, %12
  br i1 %21, label %31, label %22

22:                                               ; preds = %5
  %23 = icmp slt i32 %20, 0
  br i1 %23, label %24, label %29

24:                                               ; preds = %22
  %25 = xor i32 %20, -1
  %26 = srem i32 %25, %12
  %27 = xor i32 %26, -1
  %28 = add nsw i32 %12, %27
  br label %31

29:                                               ; preds = %22
  %30 = srem i32 %20, %12
  br label %31

31:                                               ; preds = %5, %24, %29
  %32 = phi i32 [ %28, %24 ], [ %30, %29 ], [ %20, %5 ]
  %33 = bitcast i8* %6 to i8**
  %34 = load i8*, i8** %33, align 8
  %35 = sext i32 %32 to i64
  %36 = getelementptr inbounds i8, i8* %0, i64 16
  %37 = bitcast i8* %36 to i64*
  %38 = load i64, i64* %37, align 8
  %39 = mul i64 %38, %35
  %40 = getelementptr inbounds i8, i8* %34, i64 %39
  %41 = bitcast i8* %40 to i32*
  %42 = icmp ult i32 %16, %9
  br i1 %42, label %52, label %43

43:                                               ; preds = %31
  %44 = icmp slt i32 %16, 0
  br i1 %44, label %45, label %50

45:                                               ; preds = %43
  %46 = xor i32 %16, -1
  %47 = srem i32 %46, %9
  %48 = xor i32 %47, -1
  %49 = add nsw i32 %9, %48
  br label %52

50:                                               ; preds = %43
  %51 = srem i32 %16, %9
  br label %52

52:                                               ; preds = %31, %45, %50
  %53 = phi i32 [ %51, %50 ], [ %49, %45 ], [ %16, %31 ]
  %54 = sub nsw i32 %9, %53
  %55 = icmp sgt i32 %54, %4
  %56 = select i1 %55, i32 %4, i32 %54
  %57 = bitcast i32* %3 to i8*
  %58 = sext i32 %53 to i64
  %59 = getelementptr inbounds i32, i32* %41, i64 %58
  %60 = bitcast i32* %59 to i8*
  %61 = sext i32 %56 to i64
  %62 = shl nsw i64 %61, 2
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %57, i8* align 4 %60, i64 %62, i1 false)
  %63 = sub nsw i32 %4, %56
  %64 = icmp eq i32 %63, 0
  %65 = getelementptr inbounds i32, i32* %3, i64 %61
  br i1 %64, label %77, label %66

66:                                               ; preds = %52, %66
  %67 = phi i32 [ %74, %66 ], [ %63, %52 ]
  %68 = phi i32* [ %76, %66 ], [ %65, %52 ]
  %69 = icmp slt i32 %67, %9
  %70 = select i1 %69, i32 %67, i32 %9
  %71 = bitcast i32* %68 to i8*
  %72 = sext i32 %70 to i64
  %73 = shl nsw i64 %72, 2
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %71, i8* align 4 %40, i64 %73, i1 false)
  %74 = sub nsw i32 %67, %70
  %75 = icmp eq i32 %74, 0
  %76 = getelementptr inbounds i32, i32* %68, i64 %72
  br i1 %75, label %77, label %66, !llvm.loop !10

77:                                               ; preds = %66, %52
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @_ZNK17SkBitmapProcState21maxCountForBufferSizeEm(%struct.SkBitmapProcState*, i64) local_unnamed_addr #0 align 2 {
  %3 = trunc i64 %1 to i32
  %4 = getelementptr inbounds %struct.SkBitmapProcState, %struct.SkBitmapProcState* %0, i64 0, i32 2, i32 1
  %5 = load i32, i32* %4, align 4
  %6 = trunc i32 %5 to i8
  %7 = icmp slt i8 %6, 0
  br i1 %7, label %8, label %12

8:                                                ; preds = %2
  %9 = getelementptr inbounds %struct.SkBitmapProcState, %struct.SkBitmapProcState* %0, i64 0, i32 2
  %10 = tail call zeroext i8 @_ZNK8SkMatrix15computeTypeMaskEv(%class.SkMatrix* %9) #6
  %11 = zext i8 %10 to i32
  store i32 %11, i32* %4, align 4
  br label %12

12:                                               ; preds = %2, %8
  %13 = phi i32 [ %11, %8 ], [ %5, %2 ]
  %14 = and i32 %13, 12
  %15 = icmp eq i32 %14, 0
  br i1 %15, label %16, label %22

16:                                               ; preds = %12
  %17 = add i32 %3, -4
  %18 = and i32 %17, -4
  %19 = icmp sgt i32 %18, 0
  %20 = select i1 %19, i32 %18, i32 0
  %21 = lshr exact i32 %20, 1
  br label %24

22:                                               ; preds = %12
  %23 = ashr i32 %3, 2
  br label %24

24:                                               ; preds = %22, %16
  %25 = phi i32 [ %21, %16 ], [ %23, %22 ]
  %26 = getelementptr inbounds %struct.SkBitmapProcState, %struct.SkBitmapProcState* %0, i64 0, i32 6
  %27 = load i8, i8* %26, align 4, !range !7
  %28 = zext i8 %27 to i32
  %29 = ashr i32 %25, %28
  ret i32 %29
}

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #5

; Function Attrs: nounwind readnone speculatable
declare float @llvm.floor.f32(float) #4

declare zeroext i1 @_ZN8SkMatrix8postIDivEii(%class.SkMatrix*, i32, i32) local_unnamed_addr #1

declare dereferenceable(40) %class.SkMatrix* @_ZN8SkMatrix5resetEv(%class.SkMatrix*) local_unnamed_addr #1

declare zeroext i1 @_ZNK8SkMatrix17invertNonIdentityEPS_(%class.SkMatrix*, %class.SkMatrix*) local_unnamed_addr #1

declare zeroext i8 @_ZNK8SkMatrix15computeTypeMaskEv(%class.SkMatrix*) local_unnamed_addr #1

declare void @_ZN12SkArenaAllocC2EPcmm(%class.SkArenaAlloc*, i8*, i64, i64) unnamed_addr #1

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind }
attributes #3 = { nofree norecurse nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind readnone speculatable }
attributes #5 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nounwind }
attributes #7 = { builtin nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{!3, !5}
!3 = distinct !{!3, !4, !"_ZNSt3__19make_pairIRK8SkPixmapRK8SkMatrixEENS_4pairINS_18__unwrap_ref_decayIT_E4typeENS8_IT0_E4typeEEEOS9_OSC_: argument 0"}
!4 = distinct !{!4, !"_ZNSt3__19make_pairIRK8SkPixmapRK8SkMatrixEENS_4pairINS_18__unwrap_ref_decayIT_E4typeENS8_IT0_E4typeEEEOS9_OSC_"}
!5 = distinct !{!5, !6, !"_ZNK16SkMipmapAccessor5levelEv: argument 0"}
!6 = distinct !{!6, !"_ZNK16SkMipmapAccessor5levelEv"}
!7 = !{i8 0, i8 2}
!8 = distinct !{!8, !9}
!9 = !{!"llvm.loop.unroll.disable"}
!10 = distinct !{!10, !9}
