; ModuleID = 'gen/third_party/blink/public/mojom/contacts/contacts_manager.mojom-blink-test-utils.cc'
source_filename = "gen/third_party/blink/public/mojom/contacts/contacts_manager.mojom-blink-test-utils.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.blink::mojom::blink::ContactsManagerAsyncWaiter" = type { %"class.blink::mojom::blink::ContactsManager"* }
%"class.blink::mojom::blink::ContactsManager" = type { i32 (...)** }
%"class.blink::mojom::blink::ContactsManagerInterceptorForTesting" = type { %"class.blink::mojom::blink::ContactsManager" }
%"class.base::OnceCallback" = type { %"class.base::internal::CallbackBase" }
%"class.base::internal::CallbackBase" = type { %class.scoped_refptr }
%class.scoped_refptr = type { %"class.base::internal::BindStateBase"* }
%"class.base::internal::BindStateBase" = type { %"class.base::RefCountedThreadSafe", void ()*, void (%"class.base::internal::BindStateBase"*)*, i1 (%"class.base::internal::BindStateBase"*, i32)* }
%"class.base::RefCountedThreadSafe" = type { %"class.base::subtle::RefCountedThreadSafeBase" }
%"class.base::subtle::RefCountedThreadSafeBase" = type { %"class.base::AtomicRefCount" }
%"class.base::AtomicRefCount" = type { %"struct.std::__1::atomic" }
%"struct.std::__1::atomic" = type { %"struct.std::__1::__atomic_base" }
%"struct.std::__1::__atomic_base" = type { %"struct.std::__1::__atomic_base.0" }
%"struct.std::__1::__atomic_base.0" = type { %"struct.std::__1::__cxx_atomic_impl" }
%"struct.std::__1::__cxx_atomic_impl" = type { %"struct.std::__1::__cxx_atomic_base_impl" }
%"struct.std::__1::__cxx_atomic_base_impl" = type { i32 }
%"class.absl::optional" = type { %"class.absl::optional_internal::optional_data" }
%"class.absl::optional_internal::optional_data" = type { %"class.absl::optional_internal::optional_data_base" }
%"class.absl::optional_internal::optional_data_base" = type { %"class.absl::optional_internal::optional_data_dtor_base" }
%"class.absl::optional_internal::optional_data_dtor_base" = type { i8, %union.anon }
%union.anon = type { %"class.WTF::Vector" }
%"class.WTF::Vector" = type { %"class.WTF::VectorBuffer" }
%"class.WTF::VectorBuffer" = type { %"class.WTF::VectorBufferBase" }
%"class.WTF::VectorBufferBase" = type { %"class.mojo::StructPtr"*, i32, i32 }
%"class.mojo::StructPtr" = type { %"class.std::__1::unique_ptr" }
%"class.std::__1::unique_ptr" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %"class.blink::mojom::blink::ContactInfo"* }
%"class.blink::mojom::blink::ContactInfo" = type { %"class.absl::optional.1", %"class.absl::optional.1", %"class.absl::optional.1", %"class.absl::optional.15", %"class.absl::optional.30" }
%"class.absl::optional.1" = type { %"class.absl::optional_internal::optional_data.2" }
%"class.absl::optional_internal::optional_data.2" = type { %"class.absl::optional_internal::optional_data_base.3" }
%"class.absl::optional_internal::optional_data_base.3" = type { %"class.absl::optional_internal::optional_data_dtor_base.4" }
%"class.absl::optional_internal::optional_data_dtor_base.4" = type { i8, %union.anon.5 }
%union.anon.5 = type { %"class.WTF::Vector.6" }
%"class.WTF::Vector.6" = type { %"class.WTF::VectorBuffer.7" }
%"class.WTF::VectorBuffer.7" = type { %"class.WTF::VectorBufferBase.8" }
%"class.WTF::VectorBufferBase.8" = type { %"class.WTF::String"*, i32, i32 }
%"class.WTF::String" = type { %class.scoped_refptr.9 }
%class.scoped_refptr.9 = type { %"class.WTF::StringImpl"* }
%"class.WTF::StringImpl" = type { i32, i32, %"struct.std::__1::atomic.10" }
%"struct.std::__1::atomic.10" = type { %"struct.std::__1::__atomic_base.11" }
%"struct.std::__1::__atomic_base.11" = type { %"struct.std::__1::__atomic_base.12" }
%"struct.std::__1::__atomic_base.12" = type { %"struct.std::__1::__cxx_atomic_impl.13" }
%"struct.std::__1::__cxx_atomic_impl.13" = type { %"struct.std::__1::__cxx_atomic_base_impl.14" }
%"struct.std::__1::__cxx_atomic_base_impl.14" = type { i32 }
%"class.absl::optional.15" = type { %"class.absl::optional_internal::optional_data.16" }
%"class.absl::optional_internal::optional_data.16" = type { %"class.absl::optional_internal::optional_data_base.17" }
%"class.absl::optional_internal::optional_data_base.17" = type { %"class.absl::optional_internal::optional_data_dtor_base.18" }
%"class.absl::optional_internal::optional_data_dtor_base.18" = type { i8, %union.anon.19 }
%union.anon.19 = type { %"class.WTF::Vector.20" }
%"class.WTF::Vector.20" = type { %"class.WTF::VectorBuffer.21" }
%"class.WTF::VectorBuffer.21" = type { %"class.WTF::VectorBufferBase.22" }
%"class.WTF::VectorBufferBase.22" = type { %"class.mojo::StructPtr.23"*, i32, i32 }
%"class.mojo::StructPtr.23" = type { %"class.std::__1::unique_ptr.24" }
%"class.std::__1::unique_ptr.24" = type { %"class.std::__1::__compressed_pair.25" }
%"class.std::__1::__compressed_pair.25" = type { %"struct.std::__1::__compressed_pair_elem.26" }
%"struct.std::__1::__compressed_pair_elem.26" = type { %"class.payments::mojom::blink::PaymentAddress"* }
%"class.payments::mojom::blink::PaymentAddress" = type { %"class.WTF::String", %"class.WTF::Vector.6", %"class.WTF::String", %"class.WTF::String", %"class.WTF::String", %"class.WTF::String", %"class.WTF::String", %"class.WTF::String", %"class.WTF::String", %"class.WTF::String" }
%"class.absl::optional.30" = type { %"class.absl::optional_internal::optional_data.31" }
%"class.absl::optional_internal::optional_data.31" = type { %"class.absl::optional_internal::optional_data_base.32" }
%"class.absl::optional_internal::optional_data_base.32" = type { %"class.absl::optional_internal::optional_data_dtor_base.33" }
%"class.absl::optional_internal::optional_data_dtor_base.33" = type { i8, %union.anon.34 }
%union.anon.34 = type { %"class.WTF::Vector.35" }
%"class.WTF::Vector.35" = type { %"class.WTF::VectorBuffer.36" }
%"class.WTF::VectorBuffer.36" = type { %"class.WTF::VectorBufferBase.37" }
%"class.WTF::VectorBufferBase.37" = type { %"class.mojo::StructPtr.38"*, i32, i32 }
%"class.mojo::StructPtr.38" = type { %"class.std::__1::unique_ptr.39" }
%"class.std::__1::unique_ptr.39" = type { %"class.std::__1::__compressed_pair.40" }
%"class.std::__1::__compressed_pair.40" = type { %"struct.std::__1::__compressed_pair_elem.41" }
%"struct.std::__1::__compressed_pair_elem.41" = type { %"class.blink::mojom::blink::ContactIconBlob"* }
%"class.blink::mojom::blink::ContactIconBlob" = type { %"class.WTF::String", %"class.WTF::Vector.42" }
%"class.WTF::Vector.42" = type { %"class.WTF::VectorBuffer.43" }
%"class.WTF::VectorBuffer.43" = type { %"class.WTF::VectorBufferBase.44" }
%"class.WTF::VectorBufferBase.44" = type { i8*, i32, i32 }
%"class.base::RunLoop" = type { %"class.base::RunLoop::Delegate"*, i32, i8, i8, i8, i8, i8, %class.scoped_refptr.67, %"class.base::WeakPtrFactory" }
%"class.base::RunLoop::Delegate" = type <{ i32 (...)**, %"class.std::__1::stack", %"class.base::ObserverList", i8, [7 x i8] }>
%"class.std::__1::stack" = type { %"class.std::__1::vector" }
%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { %"class.base::RunLoop"**, %"class.base::RunLoop"**, %"class.std::__1::__compressed_pair.57" }
%"class.std::__1::__compressed_pair.57" = type { %"struct.std::__1::__compressed_pair_elem.58" }
%"struct.std::__1::__compressed_pair_elem.58" = type { %"class.base::RunLoop"** }
%"class.base::ObserverList" = type <{ %"class.std::__1::vector.60", %"class.base::LinkedList", i64, i32, [4 x i8] }>
%"class.std::__1::vector.60" = type { %"class.std::__1::__vector_base.61" }
%"class.std::__1::__vector_base.61" = type { %"class.base::internal::UncheckedObserverAdapter"*, %"class.base::internal::UncheckedObserverAdapter"*, %"class.std::__1::__compressed_pair.62" }
%"class.base::internal::UncheckedObserverAdapter" = type { i8* }
%"class.std::__1::__compressed_pair.62" = type { %"struct.std::__1::__compressed_pair_elem.63" }
%"struct.std::__1::__compressed_pair_elem.63" = type { %"class.base::internal::UncheckedObserverAdapter"* }
%"class.base::LinkedList" = type { %"class.base::LinkNode" }
%"class.base::LinkNode" = type { %"class.base::internal::LinkNodeBase" }
%"class.base::internal::LinkNodeBase" = type { %"class.base::internal::LinkNodeBase"*, %"class.base::internal::LinkNodeBase"* }
%class.scoped_refptr.67 = type { %"class.base::SingleThreadTaskRunner"* }
%"class.base::SingleThreadTaskRunner" = type { %"class.base::SequencedTaskRunner.base", [4 x i8] }
%"class.base::SequencedTaskRunner.base" = type { %"class.base::TaskRunner.base" }
%"class.base::TaskRunner.base" = type <{ i32 (...)**, %"class.base::RefCountedThreadSafe.68" }>
%"class.base::RefCountedThreadSafe.68" = type { %"class.base::subtle::RefCountedThreadSafeBase" }
%"class.base::WeakPtrFactory" = type { %"class.base::internal::WeakPtrFactoryBase" }
%"class.base::internal::WeakPtrFactoryBase" = type { %"class.base::internal::WeakReferenceOwner", i64 }
%"class.base::internal::WeakReferenceOwner" = type { %class.scoped_refptr.69 }
%class.scoped_refptr.69 = type { %"class.base::internal::WeakReference::Flag"* }
%"class.base::internal::WeakReference::Flag" = type <{ %"class.base::RefCountedThreadSafe.70", %"class.base::AtomicFlag", [3 x i8] }>
%"class.base::RefCountedThreadSafe.70" = type { %"class.base::subtle::RefCountedThreadSafeBase" }
%"class.base::AtomicFlag" = type { %"struct.std::__1::atomic.71" }
%"struct.std::__1::atomic.71" = type { %"struct.std::__1::__atomic_base.72" }
%"struct.std::__1::__atomic_base.72" = type { %"struct.std::__1::__atomic_base.73" }
%"struct.std::__1::__atomic_base.73" = type { %"struct.std::__1::__cxx_atomic_impl.74" }
%"struct.std::__1::__cxx_atomic_impl.74" = type { %"struct.std::__1::__cxx_atomic_base_impl.75" }
%"struct.std::__1::__cxx_atomic_base_impl.75" = type { i8 }
%"class.base::Location" = type { i8*, i8*, i32, i8* }

$_ZN5blink5mojom5blink15ContactsManagerD2Ev = comdat any

$_ZN5blink5mojom5blink36ContactsManagerInterceptorForTestingD0Ev = comdat any

$_ZN4absl17optional_internal13optional_dataIN3WTF6VectorIN4mojo9StructPtrIN5blink5mojom5blink11ContactInfoEEELj0ENS2_18PartitionAllocatorEEELb0EEaSEOSD_ = comdat any

@.str = private unnamed_addr constant [7 x i8] c"Select\00", align 1
@.str.1 = private unnamed_addr constant [87 x i8] c"gen/third_party/blink/public/mojom/contacts/contacts_manager.mojom-blink-test-utils.cc\00", align 1
@_ZTVN5blink5mojom5blink36ContactsManagerInterceptorForTestingE = hidden unnamed_addr constant { [6 x i8*] } { [6 x i8*] [i8* null, i8* null, i8* bitcast (void (%"class.blink::mojom::blink::ContactsManager"*)* @_ZN5blink5mojom5blink15ContactsManagerD2Ev to i8*), i8* bitcast (void (%"class.blink::mojom::blink::ContactsManagerInterceptorForTesting"*)* @_ZN5blink5mojom5blink36ContactsManagerInterceptorForTestingD0Ev to i8*), i8* bitcast (void (%"class.blink::mojom::blink::ContactsManagerInterceptorForTesting"*, i1, i1, i1, i1, i1, i1, %"class.base::OnceCallback"*)* @_ZN5blink5mojom5blink36ContactsManagerInterceptorForTesting6SelectEbbbbbbN4base12OnceCallbackIFvN4absl8optionalIN3WTF6VectorIN4mojo9StructPtrINS1_11ContactInfoEEELj0ENS7_18PartitionAllocatorEEEEEEEE to i8*), i8* bitcast (void ()* @__cxa_pure_virtual to i8*)] }, align 8

@_ZN5blink5mojom5blink26ContactsManagerAsyncWaiterC1EPNS1_15ContactsManagerE = hidden unnamed_addr alias void (%"class.blink::mojom::blink::ContactsManagerAsyncWaiter"*, %"class.blink::mojom::blink::ContactsManager"*), void (%"class.blink::mojom::blink::ContactsManagerAsyncWaiter"*, %"class.blink::mojom::blink::ContactsManager"*)* @_ZN5blink5mojom5blink26ContactsManagerAsyncWaiterC2EPNS1_15ContactsManagerE
@_ZN5blink5mojom5blink26ContactsManagerAsyncWaiterD1Ev = hidden unnamed_addr alias void (%"class.blink::mojom::blink::ContactsManagerAsyncWaiter"*), void (%"class.blink::mojom::blink::ContactsManagerAsyncWaiter"*)* @_ZN5blink5mojom5blink26ContactsManagerAsyncWaiterD2Ev

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink5mojom5blink36ContactsManagerInterceptorForTesting6SelectEbbbbbbN4base12OnceCallbackIFvN4absl8optionalIN3WTF6VectorIN4mojo9StructPtrINS1_11ContactInfoEEELj0ENS7_18PartitionAllocatorEEEEEEEE(%"class.blink::mojom::blink::ContactsManagerInterceptorForTesting"*, i1 zeroext, i1 zeroext, i1 zeroext, i1 zeroext, i1 zeroext, i1 zeroext, %"class.base::OnceCallback"* nocapture) unnamed_addr #0 align 2 {
  %9 = alloca %"class.base::OnceCallback", align 8
  %10 = bitcast %"class.blink::mojom::blink::ContactsManagerInterceptorForTesting"* %0 to %"class.blink::mojom::blink::ContactsManager"* (%"class.blink::mojom::blink::ContactsManagerInterceptorForTesting"*)***
  %11 = load %"class.blink::mojom::blink::ContactsManager"* (%"class.blink::mojom::blink::ContactsManagerInterceptorForTesting"*)**, %"class.blink::mojom::blink::ContactsManager"* (%"class.blink::mojom::blink::ContactsManagerInterceptorForTesting"*)*** %10, align 8
  %12 = getelementptr inbounds %"class.blink::mojom::blink::ContactsManager"* (%"class.blink::mojom::blink::ContactsManagerInterceptorForTesting"*)*, %"class.blink::mojom::blink::ContactsManager"* (%"class.blink::mojom::blink::ContactsManagerInterceptorForTesting"*)** %11, i64 3
  %13 = load %"class.blink::mojom::blink::ContactsManager"* (%"class.blink::mojom::blink::ContactsManagerInterceptorForTesting"*)*, %"class.blink::mojom::blink::ContactsManager"* (%"class.blink::mojom::blink::ContactsManagerInterceptorForTesting"*)** %12, align 8
  %14 = tail call %"class.blink::mojom::blink::ContactsManager"* %13(%"class.blink::mojom::blink::ContactsManagerInterceptorForTesting"* %0) #10
  %15 = getelementptr inbounds %"class.base::OnceCallback", %"class.base::OnceCallback"* %7, i64 0, i32 0, i32 0, i32 0
  %16 = bitcast %"class.base::OnceCallback"* %7 to i64*
  %17 = load i64, i64* %16, align 8
  %18 = bitcast %"class.base::OnceCallback"* %9 to i64*
  store i64 %17, i64* %18, align 8
  store %"class.base::internal::BindStateBase"* null, %"class.base::internal::BindStateBase"** %15, align 8
  %19 = bitcast %"class.blink::mojom::blink::ContactsManager"* %14 to void (%"class.blink::mojom::blink::ContactsManager"*, i1, i1, i1, i1, i1, i1, %"class.base::OnceCallback"*)***
  %20 = load void (%"class.blink::mojom::blink::ContactsManager"*, i1, i1, i1, i1, i1, i1, %"class.base::OnceCallback"*)**, void (%"class.blink::mojom::blink::ContactsManager"*, i1, i1, i1, i1, i1, i1, %"class.base::OnceCallback"*)*** %19, align 8
  %21 = getelementptr inbounds void (%"class.blink::mojom::blink::ContactsManager"*, i1, i1, i1, i1, i1, i1, %"class.base::OnceCallback"*)*, void (%"class.blink::mojom::blink::ContactsManager"*, i1, i1, i1, i1, i1, i1, %"class.base::OnceCallback"*)** %20, i64 2
  %22 = load void (%"class.blink::mojom::blink::ContactsManager"*, i1, i1, i1, i1, i1, i1, %"class.base::OnceCallback"*)*, void (%"class.blink::mojom::blink::ContactsManager"*, i1, i1, i1, i1, i1, i1, %"class.base::OnceCallback"*)** %21, align 8
  call void %22(%"class.blink::mojom::blink::ContactsManager"* %14, i1 zeroext %1, i1 zeroext %2, i1 zeroext %3, i1 zeroext %4, i1 zeroext %5, i1 zeroext %6, %"class.base::OnceCallback"* nonnull %9) #10
  %23 = getelementptr inbounds %"class.base::OnceCallback", %"class.base::OnceCallback"* %9, i64 0, i32 0
  call void @_ZN4base8internal12CallbackBaseD2Ev(%"class.base::internal::CallbackBase"* nonnull %23) #10
  ret void
}

; Function Attrs: nounwind
declare void @_ZN4base8internal12CallbackBaseD2Ev(%"class.base::internal::CallbackBase"*) unnamed_addr #1

; Function Attrs: nofree norecurse nounwind ssp uwtable writeonly
define hidden void @_ZN5blink5mojom5blink26ContactsManagerAsyncWaiterC2EPNS1_15ContactsManagerE(%"class.blink::mojom::blink::ContactsManagerAsyncWaiter"* nocapture, %"class.blink::mojom::blink::ContactsManager"*) unnamed_addr #2 align 2 {
  %3 = getelementptr inbounds %"class.blink::mojom::blink::ContactsManagerAsyncWaiter", %"class.blink::mojom::blink::ContactsManagerAsyncWaiter"* %0, i64 0, i32 0
  store %"class.blink::mojom::blink::ContactsManager"* %1, %"class.blink::mojom::blink::ContactsManager"** %3, align 8
  ret void
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden void @_ZN5blink5mojom5blink26ContactsManagerAsyncWaiterD2Ev(%"class.blink::mojom::blink::ContactsManagerAsyncWaiter"* nocapture) unnamed_addr #3 align 2 {
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink5mojom5blink26ContactsManagerAsyncWaiter6SelectEbbbbbbPN4absl8optionalIN3WTF6VectorIN4mojo9StructPtrINS1_11ContactInfoEEELj0ENS5_18PartitionAllocatorEEEEE(%"class.blink::mojom::blink::ContactsManagerAsyncWaiter"* nocapture readonly, i1 zeroext, i1 zeroext, i1 zeroext, i1 zeroext, i1 zeroext, i1 zeroext, %"class.absl::optional"*) local_unnamed_addr #0 align 2 {
  %9 = alloca %"class.base::RunLoop", align 8
  %10 = alloca %"class.base::OnceCallback", align 8
  %11 = alloca %"class.base::Location", align 8
  %12 = ptrtoint %"class.absl::optional"* %7 to i64
  %13 = bitcast %"class.base::RunLoop"* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 48, i8* nonnull %13) #10
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %13, i8 -86, i64 48, i1 false)
  call void @_ZN4base7RunLoopC1ENS0_4TypeE(%"class.base::RunLoop"* nonnull %9, i32 0) #10
  %14 = getelementptr inbounds %"class.blink::mojom::blink::ContactsManagerAsyncWaiter", %"class.blink::mojom::blink::ContactsManagerAsyncWaiter"* %0, i64 0, i32 0
  %15 = load %"class.blink::mojom::blink::ContactsManager"*, %"class.blink::mojom::blink::ContactsManager"** %14, align 8
  %16 = ptrtoint %"class.base::RunLoop"* %9 to i64
  %17 = call i8* @_Znwm(i64 56) #11, !noalias !2
  %18 = bitcast i8* %17 to %"class.base::internal::BindStateBase"*
  call void @_ZN4base8internal13BindStateBaseC2EPFvvEPFvPKS1_E(%"class.base::internal::BindStateBase"* nonnull %18, void ()* bitcast (void (%"class.base::internal::BindStateBase"*, %"class.absl::optional"*)* @"_ZN4base8internal7InvokerINS0_9BindStateIZN5blink5mojom5blink26ContactsManagerAsyncWaiter6SelectEbbbbbbPN4absl8optionalIN3WTF6VectorIN4mojo9StructPtrINS5_11ContactInfoEEELj0ENS9_18PartitionAllocatorEEEEEE3$_0JPNS_7RunLoopESI_EEEFvSH_EE7RunOnceEPNS0_13BindStateBaseEOSH_" to void ()*), void (%"class.base::internal::BindStateBase"*)* nonnull @"_ZN4base8internal9BindStateIZN5blink5mojom5blink26ContactsManagerAsyncWaiter6SelectEbbbbbbPN4absl8optionalIN3WTF6VectorIN4mojo9StructPtrINS4_11ContactInfoEEELj0ENS8_18PartitionAllocatorEEEEEE3$_0JPNS_7RunLoopESH_EE7DestroyEPKNS0_13BindStateBaseE") #10, !noalias !2
  %19 = getelementptr inbounds i8, i8* %17, i64 40
  %20 = bitcast i8* %19 to i64*
  store i64 %16, i64* %20, align 8, !noalias !2
  %21 = getelementptr inbounds i8, i8* %17, i64 48
  %22 = bitcast i8* %21 to i64*
  store i64 %12, i64* %22, align 8, !noalias !2
  %23 = bitcast %"class.base::OnceCallback"* %10 to i8**
  store i8* %17, i8** %23, align 8, !alias.scope !2
  %24 = bitcast %"class.blink::mojom::blink::ContactsManager"* %15 to void (%"class.blink::mojom::blink::ContactsManager"*, i1, i1, i1, i1, i1, i1, %"class.base::OnceCallback"*)***
  %25 = load void (%"class.blink::mojom::blink::ContactsManager"*, i1, i1, i1, i1, i1, i1, %"class.base::OnceCallback"*)**, void (%"class.blink::mojom::blink::ContactsManager"*, i1, i1, i1, i1, i1, i1, %"class.base::OnceCallback"*)*** %24, align 8
  %26 = getelementptr inbounds void (%"class.blink::mojom::blink::ContactsManager"*, i1, i1, i1, i1, i1, i1, %"class.base::OnceCallback"*)*, void (%"class.blink::mojom::blink::ContactsManager"*, i1, i1, i1, i1, i1, i1, %"class.base::OnceCallback"*)** %25, i64 2
  %27 = load void (%"class.blink::mojom::blink::ContactsManager"*, i1, i1, i1, i1, i1, i1, %"class.base::OnceCallback"*)*, void (%"class.blink::mojom::blink::ContactsManager"*, i1, i1, i1, i1, i1, i1, %"class.base::OnceCallback"*)** %26, align 8
  call void %27(%"class.blink::mojom::blink::ContactsManager"* %15, i1 zeroext %1, i1 zeroext %2, i1 zeroext %3, i1 zeroext %4, i1 zeroext %5, i1 zeroext %6, %"class.base::OnceCallback"* nonnull %10) #10
  %28 = getelementptr inbounds %"class.base::OnceCallback", %"class.base::OnceCallback"* %10, i64 0, i32 0
  call void @_ZN4base8internal12CallbackBaseD2Ev(%"class.base::internal::CallbackBase"* nonnull %28) #10
  %29 = bitcast %"class.base::Location"* %11 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %29) #10
  call void @_ZN4base8Location7CurrentEPKcS2_i(%"class.base::Location"* nonnull sret %11, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str, i64 0, i64 0), i8* getelementptr inbounds ([87 x i8], [87 x i8]* @.str.1, i64 0, i64 0), i32 54) #10
  call void @_ZN4base7RunLoop3RunERKNS_8LocationE(%"class.base::RunLoop"* nonnull %9, %"class.base::Location"* nonnull dereferenceable(32) %11) #10
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %29) #10
  call void @_ZN4base7RunLoopD1Ev(%"class.base::RunLoop"* nonnull %9) #10
  call void @llvm.lifetime.end.p0i8(i64 48, i8* nonnull %13) #10
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #4

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #4

declare void @_ZN4base7RunLoopC1ENS0_4TypeE(%"class.base::RunLoop"*, i32) unnamed_addr #5

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #4

declare void @_ZN4base7RunLoop3RunERKNS_8LocationE(%"class.base::RunLoop"*, %"class.base::Location"* dereferenceable(32)) local_unnamed_addr #5

declare void @_ZN4base8Location7CurrentEPKcS2_i(%"class.base::Location"* sret, i8*, i8*, i32) local_unnamed_addr #5

; Function Attrs: nounwind
declare void @_ZN4base7RunLoopD1Ev(%"class.base::RunLoop"*) unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN5blink5mojom5blink15ContactsManagerD2Ev(%"class.blink::mojom::blink::ContactsManager"*) unnamed_addr #0 comdat align 2 {
  ret void
}

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZN5blink5mojom5blink36ContactsManagerInterceptorForTestingD0Ev(%"class.blink::mojom::blink::ContactsManagerInterceptorForTesting"*) unnamed_addr #6 comdat align 2 {
  tail call void @llvm.trap() #12
  unreachable
}

declare void @__cxa_pure_virtual() unnamed_addr

; Function Attrs: cold noreturn nounwind
declare void @llvm.trap() #7

; Function Attrs: nounwind ssp uwtable
define internal void @"_ZN4base8internal7InvokerINS0_9BindStateIZN5blink5mojom5blink26ContactsManagerAsyncWaiter6SelectEbbbbbbPN4absl8optionalIN3WTF6VectorIN4mojo9StructPtrINS5_11ContactInfoEEELj0ENS9_18PartitionAllocatorEEEEEE3$_0JPNS_7RunLoopESI_EEEFvSH_EE7RunOnceEPNS0_13BindStateBaseEOSH_"(%"class.base::internal::BindStateBase"* nocapture readonly, %"class.absl::optional"* nocapture dereferenceable(24)) #0 align 2 {
  %3 = alloca %"class.absl::optional", align 8
  %4 = getelementptr inbounds %"class.base::internal::BindStateBase", %"class.base::internal::BindStateBase"* %0, i64 1, i32 1
  %5 = bitcast void ()** %4 to %"class.base::RunLoop"**
  %6 = getelementptr inbounds void ()*, void ()** %4, i64 1
  %7 = bitcast void ()** %6 to %"class.absl::optional"**
  %8 = getelementptr inbounds %"class.absl::optional", %"class.absl::optional"* %3, i64 0, i32 0, i32 0, i32 0, i32 0
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %8) #10
  %9 = load %"class.base::RunLoop"*, %"class.base::RunLoop"** %5, align 8
  %10 = load %"class.absl::optional"*, %"class.absl::optional"** %7, align 8
  %11 = getelementptr inbounds %"class.absl::optional", %"class.absl::optional"* %1, i64 0, i32 0, i32 0, i32 0, i32 0
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %8, i8 0, i64 24, i1 false) #10
  %12 = load i8, i8* %11, align 8, !range !7
  %13 = icmp eq i8 %12, 0
  br i1 %13, label %26, label %14

14:                                               ; preds = %2
  %15 = getelementptr inbounds %"class.absl::optional", %"class.absl::optional"* %1, i64 0, i32 0, i32 0, i32 0, i32 1, i32 0
  %16 = getelementptr inbounds %"class.absl::optional", %"class.absl::optional"* %3, i64 0, i32 0, i32 0, i32 0, i32 1, i32 0
  %17 = getelementptr inbounds %"class.absl::optional", %"class.absl::optional"* %3, i64 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 0, i32 1
  %18 = getelementptr inbounds %"class.absl::optional", %"class.absl::optional"* %3, i64 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 0, i32 2
  %19 = bitcast %"class.WTF::Vector"* %15 to i64*
  %20 = bitcast %"class.WTF::Vector"* %16 to i64*
  store i64 0, i64* %20, align 8
  %21 = load i64, i64* %19, align 8
  store atomic i64 0, i64* %19 monotonic, align 8
  store atomic i64 %21, i64* %20 monotonic, align 8
  %22 = getelementptr inbounds %"class.absl::optional", %"class.absl::optional"* %1, i64 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 0, i32 1
  %23 = load i32, i32* %22, align 4
  store i32 %23, i32* %17, align 8
  store i32 0, i32* %22, align 4
  %24 = getelementptr inbounds %"class.absl::optional", %"class.absl::optional"* %1, i64 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 0, i32 2
  %25 = load i32, i32* %24, align 4
  store i32 %25, i32* %18, align 4
  store i32 0, i32* %24, align 4
  store i8 1, i8* %8, align 8
  br label %26

26:                                               ; preds = %14, %2
  %27 = getelementptr inbounds %"class.absl::optional", %"class.absl::optional"* %10, i64 0, i32 0
  %28 = getelementptr inbounds %"class.absl::optional", %"class.absl::optional"* %3, i64 0, i32 0
  %29 = call dereferenceable(24) %"class.absl::optional_internal::optional_data"* @_ZN4absl17optional_internal13optional_dataIN3WTF6VectorIN4mojo9StructPtrIN5blink5mojom5blink11ContactInfoEEELj0ENS2_18PartitionAllocatorEEELb0EEaSEOSD_(%"class.absl::optional_internal::optional_data"* %27, %"class.absl::optional_internal::optional_data"* nonnull dereferenceable(24) %28) #10
  call void @_ZN4base7RunLoop4QuitEv(%"class.base::RunLoop"* %9) #10
  %30 = load i8, i8* %8, align 8, !range !7
  %31 = icmp eq i8 %30, 0
  br i1 %31, label %61, label %32

32:                                               ; preds = %26
  %33 = getelementptr inbounds %"class.absl::optional", %"class.absl::optional"* %3, i64 0, i32 0, i32 0, i32 0, i32 1, i32 0
  %34 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %33, i64 0, i32 0, i32 0, i32 0
  %35 = load %"class.mojo::StructPtr"*, %"class.mojo::StructPtr"** %34, align 8
  %36 = icmp eq %"class.mojo::StructPtr"* %35, null
  br i1 %36, label %60, label %37, !prof !8

37:                                               ; preds = %32
  %38 = bitcast %"class.mojo::StructPtr"* %35 to i8*
  %39 = getelementptr inbounds %"class.absl::optional", %"class.absl::optional"* %3, i64 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 0, i32 2
  %40 = load i32, i32* %39, align 4
  %41 = icmp eq i32 %40, 0
  br i1 %41, label %58, label %42, !prof !9

42:                                               ; preds = %37
  %43 = zext i32 %40 to i64
  %44 = getelementptr inbounds %"class.mojo::StructPtr", %"class.mojo::StructPtr"* %35, i64 %43
  br label %45

45:                                               ; preds = %52, %42
  %46 = phi %"class.mojo::StructPtr"* [ %53, %52 ], [ %35, %42 ]
  %47 = getelementptr inbounds %"class.mojo::StructPtr", %"class.mojo::StructPtr"* %46, i64 0, i32 0, i32 0, i32 0, i32 0
  %48 = load %"class.blink::mojom::blink::ContactInfo"*, %"class.blink::mojom::blink::ContactInfo"** %47, align 8
  store %"class.blink::mojom::blink::ContactInfo"* null, %"class.blink::mojom::blink::ContactInfo"** %47, align 8
  %49 = icmp eq %"class.blink::mojom::blink::ContactInfo"* %48, null
  br i1 %49, label %52, label %50

50:                                               ; preds = %45
  call void @_ZN5blink5mojom5blink11ContactInfoD1Ev(%"class.blink::mojom::blink::ContactInfo"* nonnull %48) #10
  %51 = getelementptr inbounds %"class.blink::mojom::blink::ContactInfo", %"class.blink::mojom::blink::ContactInfo"* %48, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0
  call void @_ZdlPv(i8* %51) #11
  br label %52

52:                                               ; preds = %50, %45
  %53 = getelementptr inbounds %"class.mojo::StructPtr", %"class.mojo::StructPtr"* %46, i64 1
  %54 = icmp eq %"class.mojo::StructPtr"* %53, %44
  br i1 %54, label %55, label %45

55:                                               ; preds = %52
  store i32 0, i32* %39, align 4
  %56 = bitcast %"class.WTF::Vector"* %33 to i8**
  %57 = load i8*, i8** %56, align 8
  br label %58

58:                                               ; preds = %55, %37
  %59 = phi i8* [ %57, %55 ], [ %38, %37 ]
  call void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8* %59) #10
  store %"class.mojo::StructPtr"* null, %"class.mojo::StructPtr"** %34, align 8
  br label %60

60:                                               ; preds = %58, %32
  store i8 0, i8* %8, align 8
  br label %61

61:                                               ; preds = %26, %60
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %8) #10
  ret void
}

declare void @_ZN4base7RunLoop4QuitEv(%"class.base::RunLoop"*) local_unnamed_addr #5

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden dereferenceable(24) %"class.absl::optional_internal::optional_data"* @_ZN4absl17optional_internal13optional_dataIN3WTF6VectorIN4mojo9StructPtrIN5blink5mojom5blink11ContactInfoEEELj0ENS2_18PartitionAllocatorEEELb0EEaSEOSD_(%"class.absl::optional_internal::optional_data"*, %"class.absl::optional_internal::optional_data"* dereferenceable(24)) local_unnamed_addr #0 comdat align 2 {
  %3 = getelementptr inbounds %"class.absl::optional_internal::optional_data", %"class.absl::optional_internal::optional_data"* %1, i64 0, i32 0, i32 0, i32 0
  %4 = load i8, i8* %3, align 8, !range !7
  %5 = icmp eq i8 %4, 0
  br i1 %5, label %38, label %6

6:                                                ; preds = %2
  %7 = getelementptr inbounds %"class.absl::optional_internal::optional_data", %"class.absl::optional_internal::optional_data"* %1, i64 0, i32 0, i32 0, i32 1, i32 0
  %8 = getelementptr inbounds %"class.absl::optional_internal::optional_data", %"class.absl::optional_internal::optional_data"* %0, i64 0, i32 0, i32 0, i32 0
  %9 = load i8, i8* %8, align 8, !range !7
  %10 = icmp eq i8 %9, 0
  %11 = getelementptr inbounds %"class.absl::optional_internal::optional_data", %"class.absl::optional_internal::optional_data"* %0, i64 0, i32 0, i32 0, i32 1, i32 0
  br i1 %10, label %25, label %12

12:                                               ; preds = %6
  %13 = bitcast %"class.WTF::Vector"* %7 to i64*
  %14 = load i64, i64* %13, align 8
  %15 = bitcast %"class.WTF::Vector"* %11 to i64*
  %16 = load i64, i64* %15, align 8
  store atomic i64 %16, i64* %13 monotonic, align 8
  store atomic i64 %14, i64* %15 monotonic, align 8
  %17 = getelementptr inbounds %"class.absl::optional_internal::optional_data", %"class.absl::optional_internal::optional_data"* %0, i64 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 0, i32 1
  %18 = getelementptr inbounds %"class.absl::optional_internal::optional_data", %"class.absl::optional_internal::optional_data"* %1, i64 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 0, i32 1
  %19 = load i32, i32* %17, align 4
  %20 = load i32, i32* %18, align 4
  store i32 %20, i32* %17, align 4
  store i32 %19, i32* %18, align 4
  %21 = getelementptr inbounds %"class.absl::optional_internal::optional_data", %"class.absl::optional_internal::optional_data"* %0, i64 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 0, i32 2
  %22 = getelementptr inbounds %"class.absl::optional_internal::optional_data", %"class.absl::optional_internal::optional_data"* %1, i64 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 0, i32 2
  %23 = load i32, i32* %21, align 4
  %24 = load i32, i32* %22, align 4
  store i32 %24, i32* %21, align 4
  store i32 %23, i32* %22, align 4
  br label %71

25:                                               ; preds = %6
  %26 = getelementptr inbounds %"class.absl::optional_internal::optional_data", %"class.absl::optional_internal::optional_data"* %0, i64 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 0, i32 1
  %27 = getelementptr inbounds %"class.absl::optional_internal::optional_data", %"class.absl::optional_internal::optional_data"* %0, i64 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 0, i32 2
  %28 = bitcast %"class.WTF::Vector"* %7 to i64*
  %29 = bitcast %"class.WTF::Vector"* %11 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %29, i8 0, i64 16, i1 false) #10
  %30 = load i64, i64* %28, align 8
  %31 = bitcast %"class.WTF::Vector"* %11 to i64*
  store atomic i64 0, i64* %28 monotonic, align 8
  store atomic i64 %30, i64* %31 monotonic, align 8
  %32 = getelementptr inbounds %"class.absl::optional_internal::optional_data", %"class.absl::optional_internal::optional_data"* %1, i64 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 0, i32 1
  %33 = load i32, i32* %26, align 4
  %34 = load i32, i32* %32, align 4
  store i32 %34, i32* %26, align 4
  store i32 %33, i32* %32, align 4
  %35 = getelementptr inbounds %"class.absl::optional_internal::optional_data", %"class.absl::optional_internal::optional_data"* %1, i64 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 0, i32 2
  %36 = load i32, i32* %27, align 4
  %37 = load i32, i32* %35, align 4
  store i32 %37, i32* %27, align 4
  store i32 %36, i32* %35, align 4
  store i8 1, i8* %8, align 8
  br label %71

38:                                               ; preds = %2
  %39 = getelementptr inbounds %"class.absl::optional_internal::optional_data", %"class.absl::optional_internal::optional_data"* %0, i64 0, i32 0, i32 0, i32 0
  %40 = load i8, i8* %39, align 8, !range !7
  %41 = icmp eq i8 %40, 0
  br i1 %41, label %71, label %42

42:                                               ; preds = %38
  %43 = getelementptr inbounds %"class.absl::optional_internal::optional_data", %"class.absl::optional_internal::optional_data"* %0, i64 0, i32 0, i32 0, i32 1, i32 0
  %44 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %43, i64 0, i32 0, i32 0, i32 0
  %45 = load %"class.mojo::StructPtr"*, %"class.mojo::StructPtr"** %44, align 8
  %46 = icmp eq %"class.mojo::StructPtr"* %45, null
  br i1 %46, label %70, label %47, !prof !8

47:                                               ; preds = %42
  %48 = bitcast %"class.mojo::StructPtr"* %45 to i8*
  %49 = getelementptr inbounds %"class.absl::optional_internal::optional_data", %"class.absl::optional_internal::optional_data"* %0, i64 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 0, i32 2
  %50 = load i32, i32* %49, align 4
  %51 = icmp eq i32 %50, 0
  br i1 %51, label %68, label %52, !prof !9

52:                                               ; preds = %47
  %53 = zext i32 %50 to i64
  %54 = getelementptr inbounds %"class.mojo::StructPtr", %"class.mojo::StructPtr"* %45, i64 %53
  br label %55

55:                                               ; preds = %62, %52
  %56 = phi %"class.mojo::StructPtr"* [ %63, %62 ], [ %45, %52 ]
  %57 = getelementptr inbounds %"class.mojo::StructPtr", %"class.mojo::StructPtr"* %56, i64 0, i32 0, i32 0, i32 0, i32 0
  %58 = load %"class.blink::mojom::blink::ContactInfo"*, %"class.blink::mojom::blink::ContactInfo"** %57, align 8
  store %"class.blink::mojom::blink::ContactInfo"* null, %"class.blink::mojom::blink::ContactInfo"** %57, align 8
  %59 = icmp eq %"class.blink::mojom::blink::ContactInfo"* %58, null
  br i1 %59, label %62, label %60

60:                                               ; preds = %55
  tail call void @_ZN5blink5mojom5blink11ContactInfoD1Ev(%"class.blink::mojom::blink::ContactInfo"* nonnull %58) #10
  %61 = getelementptr inbounds %"class.blink::mojom::blink::ContactInfo", %"class.blink::mojom::blink::ContactInfo"* %58, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0
  tail call void @_ZdlPv(i8* %61) #11
  br label %62

62:                                               ; preds = %60, %55
  %63 = getelementptr inbounds %"class.mojo::StructPtr", %"class.mojo::StructPtr"* %56, i64 1
  %64 = icmp eq %"class.mojo::StructPtr"* %63, %54
  br i1 %64, label %65, label %55

65:                                               ; preds = %62
  store i32 0, i32* %49, align 4
  %66 = bitcast %"class.WTF::Vector"* %43 to i8**
  %67 = load i8*, i8** %66, align 8
  br label %68

68:                                               ; preds = %65, %47
  %69 = phi i8* [ %67, %65 ], [ %48, %47 ]
  tail call void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8* %69) #10
  store %"class.mojo::StructPtr"* null, %"class.mojo::StructPtr"** %44, align 8
  br label %70

70:                                               ; preds = %68, %42
  store i8 0, i8* %39, align 8
  br label %71

71:                                               ; preds = %70, %38, %25, %12
  ret %"class.absl::optional_internal::optional_data"* %0
}

; Function Attrs: nounwind
declare void @_ZN5blink5mojom5blink11ContactInfoD1Ev(%"class.blink::mojom::blink::ContactInfo"*) unnamed_addr #1

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #8

declare void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8*) local_unnamed_addr #5

; Function Attrs: nobuiltin nofree
declare noalias nonnull i8* @_Znwm(i64) local_unnamed_addr #9

; Function Attrs: nounwind ssp uwtable
define internal void @"_ZN4base8internal9BindStateIZN5blink5mojom5blink26ContactsManagerAsyncWaiter6SelectEbbbbbbPN4absl8optionalIN3WTF6VectorIN4mojo9StructPtrINS4_11ContactInfoEEELj0ENS8_18PartitionAllocatorEEEEEE3$_0JPNS_7RunLoopESH_EE7DestroyEPKNS0_13BindStateBaseE"(%"class.base::internal::BindStateBase"*) #0 align 2 {
  %2 = icmp eq %"class.base::internal::BindStateBase"* %0, null
  br i1 %2, label %5, label %3

3:                                                ; preds = %1
  %4 = bitcast %"class.base::internal::BindStateBase"* %0 to i8*
  tail call void @_ZdlPv(i8* %4) #11
  br label %5

5:                                                ; preds = %3, %1
  ret void
}

declare void @_ZN4base8internal13BindStateBaseC2EPFvvEPFvPKS1_E(%"class.base::internal::BindStateBase"*, void ()*, void (%"class.base::internal::BindStateBase"*)*) unnamed_addr #5

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nofree norecurse nounwind ssp uwtable writeonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { norecurse nounwind readnone ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { argmemonly nounwind }
attributes #5 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { inlinehint nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { cold noreturn nounwind }
attributes #8 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #9 = { nobuiltin nofree "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #10 = { nounwind }
attributes #11 = { builtin nounwind }
attributes #12 = { noreturn nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{!3, !5}
!3 = distinct !{!3, !4, !"_ZN4base8internal8BindImplINS_12OnceCallbackEZN5blink5mojom5blink26ContactsManagerAsyncWaiter6SelectEbbbbbbPN4absl8optionalIN3WTF6VectorIN4mojo9StructPtrINS5_11ContactInfoEEELj0ENS9_18PartitionAllocatorEEEEEE3$_0JPNS_7RunLoopERSI_EEEDcOT0_DpOT1_: argument 0"}
!4 = distinct !{!4, !"_ZN4base8internal8BindImplINS_12OnceCallbackEZN5blink5mojom5blink26ContactsManagerAsyncWaiter6SelectEbbbbbbPN4absl8optionalIN3WTF6VectorIN4mojo9StructPtrINS5_11ContactInfoEEELj0ENS9_18PartitionAllocatorEEEEEE3$_0JPNS_7RunLoopERSI_EEEDcOT0_DpOT1_"}
!5 = distinct !{!5, !6, !"_ZN4base8BindOnceIZN5blink5mojom5blink26ContactsManagerAsyncWaiter6SelectEbbbbbbPN4absl8optionalIN3WTF6VectorIN4mojo9StructPtrINS3_11ContactInfoEEELj0ENS7_18PartitionAllocatorEEEEEE3$_0JPNS_7RunLoopERSG_EEENS_12OnceCallbackINS_8internal14BindTypeHelperIT_JDpT0_EE14UnboundRunTypeEEEOSO_DpOSP_: argument 0"}
!6 = distinct !{!6, !"_ZN4base8BindOnceIZN5blink5mojom5blink26ContactsManagerAsyncWaiter6SelectEbbbbbbPN4absl8optionalIN3WTF6VectorIN4mojo9StructPtrINS3_11ContactInfoEEELj0ENS7_18PartitionAllocatorEEEEEE3$_0JPNS_7RunLoopERSG_EEENS_12OnceCallbackINS_8internal14BindTypeHelperIT_JDpT0_EE14UnboundRunTypeEEEOSO_DpOSP_"}
!7 = !{i8 0, i8 2}
!8 = !{!"branch_weights", i32 2000, i32 1}
!9 = !{!"branch_weights", i32 1, i32 2000}
