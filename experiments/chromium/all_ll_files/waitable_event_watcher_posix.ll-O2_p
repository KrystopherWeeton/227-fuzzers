; ModuleID = '../../base/synchronization/waitable_event_watcher_posix.cc'
source_filename = "../../base/synchronization/waitable_event_watcher_posix.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.base::WaitableEventWatcher" = type <{ %class.scoped_refptr.5, %"class.base::AsyncWaiter"*, %class.scoped_refptr, %"class.base::SequenceCheckerDoNothing", [7 x i8] }>
%class.scoped_refptr.5 = type { %"class.base::Flag"* }
%"class.base::Flag" = type <{ %"class.base::RefCountedThreadSafe", [4 x i8], %"class.base::Lock", i8, [7 x i8] }>
%"class.base::RefCountedThreadSafe" = type { %"class.base::subtle::RefCountedThreadSafeBase" }
%"class.base::subtle::RefCountedThreadSafeBase" = type { %"class.base::AtomicRefCount" }
%"class.base::AtomicRefCount" = type { %"struct.std::__1::atomic" }
%"struct.std::__1::atomic" = type { %"struct.std::__1::__atomic_base" }
%"struct.std::__1::__atomic_base" = type { %"struct.std::__1::__atomic_base.0" }
%"struct.std::__1::__atomic_base.0" = type { %"struct.std::__1::__cxx_atomic_impl" }
%"struct.std::__1::__cxx_atomic_impl" = type { %"struct.std::__1::__cxx_atomic_base_impl" }
%"struct.std::__1::__cxx_atomic_base_impl" = type { i32 }
%"class.base::Lock" = type { %"class.base::internal::LockImpl" }
%"class.base::internal::LockImpl" = type { %union.pthread_mutex_t }
%union.pthread_mutex_t = type { %struct.__pthread_mutex_s }
%struct.__pthread_mutex_s = type { i32, i32, i32, i32, i32, i16, i16, %struct.__pthread_internal_list }
%struct.__pthread_internal_list = type { %struct.__pthread_internal_list*, %struct.__pthread_internal_list* }
%"class.base::AsyncWaiter" = type { %"class.base::WaitableEvent::Waiter", %class.scoped_refptr.6, %"class.base::OnceCallback.8", %class.scoped_refptr.5 }
%"class.base::WaitableEvent::Waiter" = type { i32 (...)** }
%class.scoped_refptr.6 = type { %"class.base::SequencedTaskRunner"* }
%"class.base::SequencedTaskRunner" = type { %"class.base::TaskRunner.base", [4 x i8] }
%"class.base::TaskRunner.base" = type <{ i32 (...)**, %"class.base::RefCountedThreadSafe.7" }>
%"class.base::RefCountedThreadSafe.7" = type { %"class.base::subtle::RefCountedThreadSafeBase" }
%"class.base::OnceCallback.8" = type { %"class.base::internal::CallbackBase" }
%"class.base::internal::CallbackBase" = type { %class.scoped_refptr.3 }
%class.scoped_refptr.3 = type { %"class.base::internal::BindStateBase"* }
%"class.base::internal::BindStateBase" = type { %"class.base::RefCountedThreadSafe.4", void ()*, void (%"class.base::internal::BindStateBase"*)*, i1 (%"class.base::internal::BindStateBase"*, i32)* }
%"class.base::RefCountedThreadSafe.4" = type { %"class.base::subtle::RefCountedThreadSafeBase" }
%class.scoped_refptr = type { %"struct.base::WaitableEvent::WaitableEventKernel"* }
%"struct.base::WaitableEvent::WaitableEventKernel" = type { %"class.base::RefCountedThreadSafe.1", %"class.base::Lock", i8, i8, %"class.std::__1::list" }
%"class.base::RefCountedThreadSafe.1" = type { %"class.base::subtle::RefCountedThreadSafeBase" }
%"class.std::__1::list" = type { %"class.std::__1::__list_imp" }
%"class.std::__1::__list_imp" = type { %"struct.std::__1::__list_node_base", %"class.std::__1::__compressed_pair" }
%"struct.std::__1::__list_node_base" = type { %"struct.std::__1::__list_node_base"*, %"struct.std::__1::__list_node_base"* }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { i64 }
%"class.base::SequenceCheckerDoNothing" = type { i8 }
%"class.base::OnceCallback" = type { %"class.base::internal::CallbackBase" }
%"class.base::WaitableEvent" = type <{ %class.scoped_refptr, i8, [7 x i8] }>
%"class.base::Location" = type { i8*, i8*, i32, i8* }
%"class.base::TaskRunner" = type <{ i32 (...)**, %"class.base::RefCountedThreadSafe.7", [4 x i8] }>

$_ZN4base11AsyncWaiter4FireEPNS_13WaitableEventE = comdat any

$_ZN4base11AsyncWaiter7CompareEPv = comdat any

$_ZN4base11AsyncWaiterD2Ev = comdat any

$_ZN4base11AsyncWaiterD0Ev = comdat any

$_ZN4base8internal7InvokerINS0_9BindStateIPFvPNS_4FlagENS_12OnceCallbackIFvPNS_13WaitableEventEEEES7_EJNS0_18RetainedRefWrapperIS3_EES9_S7_EEEFvvEE7RunOnceEPNS0_13BindStateBaseE = comdat any

$_ZN4base8internal9BindStateIPFvPNS_4FlagENS_12OnceCallbackIFvPNS_13WaitableEventEEEES6_EJNS0_18RetainedRefWrapperIS2_EES8_S6_EE7DestroyEPKNS0_13BindStateBaseE = comdat any

$_ZTVN4base11AsyncWaiterE = comdat any

@.str = private unnamed_addr constant [14 x i8] c"StartWatching\00", align 1
@.str.1 = private unnamed_addr constant [59 x i8] c"../../base/synchronization/waitable_event_watcher_posix.cc\00", align 1
@_ZTVN4base11AsyncWaiterE = linkonce_odr hidden unnamed_addr constant { [6 x i8*] } { [6 x i8*] [i8* null, i8* null, i8* bitcast (i1 (%"class.base::AsyncWaiter"*, %"class.base::WaitableEvent"*)* @_ZN4base11AsyncWaiter4FireEPNS_13WaitableEventE to i8*), i8* bitcast (i1 (%"class.base::AsyncWaiter"*, i8*)* @_ZN4base11AsyncWaiter7CompareEPv to i8*), i8* bitcast (void (%"class.base::AsyncWaiter"*)* @_ZN4base11AsyncWaiterD2Ev to i8*), i8* bitcast (void (%"class.base::AsyncWaiter"*)* @_ZN4base11AsyncWaiterD0Ev to i8*)] }, comdat, align 8
@.str.2 = private unnamed_addr constant [5 x i8] c"Fire\00", align 1

@_ZN4base20WaitableEventWatcherC1Ev = hidden unnamed_addr alias void (%"class.base::WaitableEventWatcher"*), void (%"class.base::WaitableEventWatcher"*)* @_ZN4base20WaitableEventWatcherC2Ev
@_ZN4base20WaitableEventWatcherD1Ev = hidden unnamed_addr alias void (%"class.base::WaitableEventWatcher"*), void (%"class.base::WaitableEventWatcher"*)* @_ZN4base20WaitableEventWatcherD2Ev

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN4base19AsyncCallbackHelperEPNS_4FlagENS_12OnceCallbackIFvPNS_13WaitableEventEEEES4_(%"class.base::Flag"*, %"class.base::OnceCallback"* nocapture, %"class.base::WaitableEvent"*) #0 {
  %4 = alloca %"class.base::OnceCallback", align 8
  %5 = getelementptr inbounds %"class.base::Flag", %"class.base::Flag"* %0, i64 0, i32 2
  %6 = getelementptr inbounds %"class.base::Lock", %"class.base::Lock"* %5, i64 0, i32 0, i32 0
  %7 = tail call i32 @pthread_mutex_trylock(%union.pthread_mutex_t* %6) #8
  %8 = icmp eq i32 %7, 0
  br i1 %8, label %11, label %9, !prof !2

9:                                                ; preds = %3
  %10 = getelementptr inbounds %"class.base::Lock", %"class.base::Lock"* %5, i64 0, i32 0
  tail call void @_ZN4base8internal8LockImpl24LockInternalWithTrackingEv(%"class.base::internal::LockImpl"* %10) #8
  br label %11

11:                                               ; preds = %3, %9
  %12 = getelementptr inbounds %"class.base::Flag", %"class.base::Flag"* %0, i64 0, i32 3
  %13 = load i8, i8* %12, align 8, !range !3
  %14 = icmp eq i8 %13, 0
  %15 = tail call i32 @pthread_mutex_unlock(%union.pthread_mutex_t* %6) #8
  br i1 %14, label %16, label %33

16:                                               ; preds = %11
  %17 = tail call i32 @pthread_mutex_trylock(%union.pthread_mutex_t* %6) #8
  %18 = icmp eq i32 %17, 0
  br i1 %18, label %21, label %19, !prof !2

19:                                               ; preds = %16
  %20 = getelementptr inbounds %"class.base::Lock", %"class.base::Lock"* %5, i64 0, i32 0
  tail call void @_ZN4base8internal8LockImpl24LockInternalWithTrackingEv(%"class.base::internal::LockImpl"* %20) #8
  br label %21

21:                                               ; preds = %16, %19
  store i8 1, i8* %12, align 8
  %22 = tail call i32 @pthread_mutex_unlock(%union.pthread_mutex_t* %6) #8
  %23 = bitcast %"class.base::OnceCallback"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %23) #8
  %24 = getelementptr inbounds %"class.base::OnceCallback", %"class.base::OnceCallback"* %1, i64 0, i32 0, i32 0, i32 0
  %25 = bitcast %"class.base::OnceCallback"* %1 to i64*
  %26 = load i64, i64* %25, align 8
  %27 = bitcast %"class.base::OnceCallback"* %4 to i64*
  store i64 %26, i64* %27, align 8
  store %"class.base::internal::BindStateBase"* null, %"class.base::internal::BindStateBase"** %24, align 8
  %28 = getelementptr inbounds %"class.base::OnceCallback", %"class.base::OnceCallback"* %4, i64 0, i32 0
  %29 = inttoptr i64 %26 to %"class.base::internal::BindStateBase"*
  %30 = getelementptr inbounds %"class.base::internal::BindStateBase", %"class.base::internal::BindStateBase"* %29, i64 0, i32 1
  %31 = bitcast void ()** %30 to void (%"class.base::internal::BindStateBase"*, %"class.base::WaitableEvent"*)**
  %32 = load void (%"class.base::internal::BindStateBase"*, %"class.base::WaitableEvent"*)*, void (%"class.base::internal::BindStateBase"*, %"class.base::WaitableEvent"*)** %31, align 8
  tail call void %32(%"class.base::internal::BindStateBase"* %29, %"class.base::WaitableEvent"* %2) #8
  call void @_ZN4base8internal12CallbackBaseD2Ev(%"class.base::internal::CallbackBase"* nonnull %28) #8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %23) #8
  br label %33

33:                                               ; preds = %11, %21
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable writeonly
define hidden void @_ZN4base20WaitableEventWatcherC2Ev(%"class.base::WaitableEventWatcher"* nocapture) unnamed_addr #1 align 2 {
  %2 = bitcast %"class.base::WaitableEventWatcher"* %0 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %2, i8 0, i64 24, i1 false)
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN4base20WaitableEventWatcherD2Ev(%"class.base::WaitableEventWatcher"* nocapture) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.base::WaitableEventWatcher", %"class.base::WaitableEventWatcher"* %0, i64 0, i32 0, i32 0
  %3 = load %"class.base::Flag"*, %"class.base::Flag"** %2, align 8
  %4 = icmp eq %"class.base::Flag"* %3, null
  br i1 %4, label %18, label %5

5:                                                ; preds = %1
  %6 = getelementptr inbounds %"class.base::Flag", %"class.base::Flag"* %3, i64 0, i32 2
  %7 = getelementptr inbounds %"class.base::Lock", %"class.base::Lock"* %6, i64 0, i32 0, i32 0
  %8 = tail call i32 @pthread_mutex_trylock(%union.pthread_mutex_t* %7) #8
  %9 = icmp eq i32 %8, 0
  br i1 %9, label %12, label %10, !prof !2

10:                                               ; preds = %5
  %11 = getelementptr inbounds %"class.base::Lock", %"class.base::Lock"* %6, i64 0, i32 0
  tail call void @_ZN4base8internal8LockImpl24LockInternalWithTrackingEv(%"class.base::internal::LockImpl"* %11) #8
  br label %12

12:                                               ; preds = %5, %10
  %13 = getelementptr inbounds %"class.base::Flag", %"class.base::Flag"* %3, i64 0, i32 3
  %14 = load i8, i8* %13, align 8, !range !3
  %15 = icmp eq i8 %14, 0
  %16 = tail call i32 @pthread_mutex_unlock(%union.pthread_mutex_t* %7) #8
  br i1 %15, label %17, label %18

17:                                               ; preds = %12
  tail call void @_ZN4base20WaitableEventWatcher12StopWatchingEv(%"class.base::WaitableEventWatcher"* %0)
  br label %18

18:                                               ; preds = %12, %1, %17
  %19 = getelementptr inbounds %"class.base::WaitableEventWatcher", %"class.base::WaitableEventWatcher"* %0, i64 0, i32 2, i32 0
  %20 = load %"struct.base::WaitableEvent::WaitableEventKernel"*, %"struct.base::WaitableEvent::WaitableEventKernel"** %19, align 8
  %21 = icmp eq %"struct.base::WaitableEvent::WaitableEventKernel"* %20, null
  br i1 %21, label %28, label %22

22:                                               ; preds = %18
  %23 = getelementptr inbounds %"struct.base::WaitableEvent::WaitableEventKernel", %"struct.base::WaitableEvent::WaitableEventKernel"* %20, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %24 = atomicrmw sub i32* %23, i32 1 acq_rel
  %25 = icmp eq i32 %24, 1
  br i1 %25, label %26, label %28

26:                                               ; preds = %22
  tail call void @_ZN4base13WaitableEvent19WaitableEventKernelD1Ev(%"struct.base::WaitableEvent::WaitableEventKernel"* nonnull %20) #8
  %27 = bitcast %"struct.base::WaitableEvent::WaitableEventKernel"* %20 to i8*
  tail call void @_ZdlPv(i8* %27) #9
  br label %28

28:                                               ; preds = %18, %22, %26
  %29 = load %"class.base::Flag"*, %"class.base::Flag"** %2, align 8
  %30 = icmp eq %"class.base::Flag"* %29, null
  br i1 %30, label %40, label %31

31:                                               ; preds = %28
  %32 = getelementptr inbounds %"class.base::Flag", %"class.base::Flag"* %29, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %33 = atomicrmw sub i32* %32, i32 1 acq_rel
  %34 = icmp eq i32 %33, 1
  br i1 %34, label %35, label %40

35:                                               ; preds = %31
  %36 = getelementptr inbounds %"class.base::Flag", %"class.base::Flag"* %29, i64 0, i32 0
  %37 = getelementptr inbounds %"class.base::RefCountedThreadSafe", %"class.base::RefCountedThreadSafe"* %36, i64 2
  %38 = bitcast %"class.base::RefCountedThreadSafe"* %37 to %"class.base::internal::LockImpl"*
  tail call void @_ZN4base8internal8LockImplD1Ev(%"class.base::internal::LockImpl"* %38) #8
  %39 = bitcast %"class.base::Flag"* %29 to i8*
  tail call void @_ZdlPv(i8* %39) #9
  br label %40

40:                                               ; preds = %28, %31, %35
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN4base20WaitableEventWatcher12StopWatchingEv(%"class.base::WaitableEventWatcher"* nocapture) local_unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.base::WaitableEventWatcher", %"class.base::WaitableEventWatcher"* %0, i64 0, i32 0, i32 0
  %3 = load %"class.base::Flag"*, %"class.base::Flag"** %2, align 8
  %4 = icmp eq %"class.base::Flag"* %3, null
  br i1 %4, label %118, label %5

5:                                                ; preds = %1
  %6 = getelementptr inbounds %"class.base::Flag", %"class.base::Flag"* %3, i64 0, i32 2
  %7 = getelementptr inbounds %"class.base::Lock", %"class.base::Lock"* %6, i64 0, i32 0, i32 0
  %8 = tail call i32 @pthread_mutex_trylock(%union.pthread_mutex_t* %7) #8
  %9 = icmp eq i32 %8, 0
  br i1 %9, label %12, label %10, !prof !2

10:                                               ; preds = %5
  %11 = getelementptr inbounds %"class.base::Lock", %"class.base::Lock"* %6, i64 0, i32 0
  tail call void @_ZN4base8internal8LockImpl24LockInternalWithTrackingEv(%"class.base::internal::LockImpl"* %11) #8
  br label %12

12:                                               ; preds = %5, %10
  %13 = getelementptr inbounds %"class.base::Flag", %"class.base::Flag"* %3, i64 0, i32 3
  %14 = load i8, i8* %13, align 8, !range !3
  %15 = icmp eq i8 %14, 0
  %16 = tail call i32 @pthread_mutex_unlock(%union.pthread_mutex_t* %7) #8
  br i1 %15, label %30, label %17

17:                                               ; preds = %12
  %18 = bitcast %"class.base::WaitableEventWatcher"* %0 to i64*
  %19 = load %"class.base::Flag"*, %"class.base::Flag"** %2, align 8
  store i64 0, i64* %18, align 8
  %20 = icmp eq %"class.base::Flag"* %19, null
  br i1 %20, label %118, label %21

21:                                               ; preds = %17
  %22 = getelementptr inbounds %"class.base::Flag", %"class.base::Flag"* %19, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %23 = atomicrmw sub i32* %22, i32 1 acq_rel
  %24 = icmp eq i32 %23, 1
  br i1 %24, label %25, label %118

25:                                               ; preds = %21
  %26 = getelementptr inbounds %"class.base::Flag", %"class.base::Flag"* %19, i64 0, i32 0
  %27 = getelementptr inbounds %"class.base::RefCountedThreadSafe", %"class.base::RefCountedThreadSafe"* %26, i64 2
  %28 = bitcast %"class.base::RefCountedThreadSafe"* %27 to %"class.base::internal::LockImpl"*
  tail call void @_ZN4base8internal8LockImplD1Ev(%"class.base::internal::LockImpl"* %28) #8
  %29 = bitcast %"class.base::Flag"* %19 to i8*
  tail call void @_ZdlPv(i8* %29) #9
  br label %118

30:                                               ; preds = %12
  %31 = getelementptr inbounds %"class.base::WaitableEventWatcher", %"class.base::WaitableEventWatcher"* %0, i64 0, i32 2, i32 0
  %32 = load %"struct.base::WaitableEvent::WaitableEventKernel"*, %"struct.base::WaitableEvent::WaitableEventKernel"** %31, align 8
  %33 = icmp eq %"struct.base::WaitableEvent::WaitableEventKernel"* %32, null
  br i1 %33, label %34, label %57

34:                                               ; preds = %30
  %35 = load %"class.base::Flag"*, %"class.base::Flag"** %2, align 8
  %36 = getelementptr inbounds %"class.base::Flag", %"class.base::Flag"* %35, i64 0, i32 2
  %37 = getelementptr inbounds %"class.base::Lock", %"class.base::Lock"* %36, i64 0, i32 0, i32 0
  %38 = tail call i32 @pthread_mutex_trylock(%union.pthread_mutex_t* %37) #8
  %39 = icmp eq i32 %38, 0
  br i1 %39, label %42, label %40, !prof !2

40:                                               ; preds = %34
  %41 = getelementptr inbounds %"class.base::Lock", %"class.base::Lock"* %36, i64 0, i32 0
  tail call void @_ZN4base8internal8LockImpl24LockInternalWithTrackingEv(%"class.base::internal::LockImpl"* %41) #8
  br label %42

42:                                               ; preds = %34, %40
  %43 = getelementptr inbounds %"class.base::Flag", %"class.base::Flag"* %35, i64 0, i32 3
  store i8 1, i8* %43, align 8
  %44 = tail call i32 @pthread_mutex_unlock(%union.pthread_mutex_t* %37) #8
  %45 = bitcast %"class.base::WaitableEventWatcher"* %0 to i64*
  %46 = load %"class.base::Flag"*, %"class.base::Flag"** %2, align 8
  store i64 0, i64* %45, align 8
  %47 = icmp eq %"class.base::Flag"* %46, null
  br i1 %47, label %118, label %48

48:                                               ; preds = %42
  %49 = getelementptr inbounds %"class.base::Flag", %"class.base::Flag"* %46, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %50 = atomicrmw sub i32* %49, i32 1 acq_rel
  %51 = icmp eq i32 %50, 1
  br i1 %51, label %52, label %118

52:                                               ; preds = %48
  %53 = getelementptr inbounds %"class.base::Flag", %"class.base::Flag"* %46, i64 0, i32 0
  %54 = getelementptr inbounds %"class.base::RefCountedThreadSafe", %"class.base::RefCountedThreadSafe"* %53, i64 2
  %55 = bitcast %"class.base::RefCountedThreadSafe"* %54 to %"class.base::internal::LockImpl"*
  tail call void @_ZN4base8internal8LockImplD1Ev(%"class.base::internal::LockImpl"* %55) #8
  %56 = bitcast %"class.base::Flag"* %46 to i8*
  tail call void @_ZdlPv(i8* %56) #9
  br label %118

57:                                               ; preds = %30
  %58 = getelementptr inbounds %"struct.base::WaitableEvent::WaitableEventKernel", %"struct.base::WaitableEvent::WaitableEventKernel"* %32, i64 0, i32 1
  %59 = getelementptr inbounds %"class.base::Lock", %"class.base::Lock"* %58, i64 0, i32 0, i32 0
  %60 = tail call i32 @pthread_mutex_trylock(%union.pthread_mutex_t* %59) #8
  %61 = icmp eq i32 %60, 0
  br i1 %61, label %64, label %62, !prof !2

62:                                               ; preds = %57
  %63 = getelementptr inbounds %"class.base::Lock", %"class.base::Lock"* %58, i64 0, i32 0
  tail call void @_ZN4base8internal8LockImpl24LockInternalWithTrackingEv(%"class.base::internal::LockImpl"* %63) #8
  br label %64

64:                                               ; preds = %57, %62
  %65 = load %"struct.base::WaitableEvent::WaitableEventKernel"*, %"struct.base::WaitableEvent::WaitableEventKernel"** %31, align 8
  %66 = getelementptr inbounds %"class.base::WaitableEventWatcher", %"class.base::WaitableEventWatcher"* %0, i64 0, i32 1
  %67 = bitcast %"class.base::AsyncWaiter"** %66 to %"class.base::WaitableEvent::Waiter"**
  %68 = load %"class.base::WaitableEvent::Waiter"*, %"class.base::WaitableEvent::Waiter"** %67, align 8
  %69 = bitcast %"class.base::WaitableEventWatcher"* %0 to i8**
  %70 = load i8*, i8** %69, align 8
  %71 = tail call zeroext i1 @_ZN4base13WaitableEvent19WaitableEventKernel7DequeueEPNS0_6WaiterEPv(%"struct.base::WaitableEvent::WaitableEventKernel"* %65, %"class.base::WaitableEvent::Waiter"* %68, i8* %70) #8
  br i1 %71, label %72, label %93

72:                                               ; preds = %64
  %73 = load %"class.base::AsyncWaiter"*, %"class.base::AsyncWaiter"** %66, align 8
  %74 = icmp eq %"class.base::AsyncWaiter"* %73, null
  br i1 %74, label %80, label %75

75:                                               ; preds = %72
  %76 = bitcast %"class.base::AsyncWaiter"* %73 to void (%"class.base::AsyncWaiter"*)***
  %77 = load void (%"class.base::AsyncWaiter"*)**, void (%"class.base::AsyncWaiter"*)*** %76, align 8
  %78 = getelementptr inbounds void (%"class.base::AsyncWaiter"*)*, void (%"class.base::AsyncWaiter"*)** %77, i64 3
  %79 = load void (%"class.base::AsyncWaiter"*)*, void (%"class.base::AsyncWaiter"*)** %78, align 8
  tail call void %79(%"class.base::AsyncWaiter"* nonnull %73) #8
  br label %80

80:                                               ; preds = %75, %72
  %81 = bitcast %"class.base::WaitableEventWatcher"* %0 to i64*
  %82 = load %"class.base::Flag"*, %"class.base::Flag"** %2, align 8
  store i64 0, i64* %81, align 8
  %83 = icmp eq %"class.base::Flag"* %82, null
  br i1 %83, label %116, label %84

84:                                               ; preds = %80
  %85 = getelementptr inbounds %"class.base::Flag", %"class.base::Flag"* %82, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %86 = atomicrmw sub i32* %85, i32 1 acq_rel
  %87 = icmp eq i32 %86, 1
  br i1 %87, label %88, label %116

88:                                               ; preds = %84
  %89 = getelementptr inbounds %"class.base::Flag", %"class.base::Flag"* %82, i64 0, i32 0
  %90 = getelementptr inbounds %"class.base::RefCountedThreadSafe", %"class.base::RefCountedThreadSafe"* %89, i64 2
  %91 = bitcast %"class.base::RefCountedThreadSafe"* %90 to %"class.base::internal::LockImpl"*
  tail call void @_ZN4base8internal8LockImplD1Ev(%"class.base::internal::LockImpl"* %91) #8
  %92 = bitcast %"class.base::Flag"* %82 to i8*
  tail call void @_ZdlPv(i8* %92) #9
  br label %116

93:                                               ; preds = %64
  %94 = load %"class.base::Flag"*, %"class.base::Flag"** %2, align 8
  %95 = getelementptr inbounds %"class.base::Flag", %"class.base::Flag"* %94, i64 0, i32 2
  %96 = getelementptr inbounds %"class.base::Lock", %"class.base::Lock"* %95, i64 0, i32 0, i32 0
  %97 = tail call i32 @pthread_mutex_trylock(%union.pthread_mutex_t* %96) #8
  %98 = icmp eq i32 %97, 0
  br i1 %98, label %101, label %99, !prof !2

99:                                               ; preds = %93
  %100 = getelementptr inbounds %"class.base::Lock", %"class.base::Lock"* %95, i64 0, i32 0
  tail call void @_ZN4base8internal8LockImpl24LockInternalWithTrackingEv(%"class.base::internal::LockImpl"* %100) #8
  br label %101

101:                                              ; preds = %93, %99
  %102 = getelementptr inbounds %"class.base::Flag", %"class.base::Flag"* %94, i64 0, i32 3
  store i8 1, i8* %102, align 8
  %103 = tail call i32 @pthread_mutex_unlock(%union.pthread_mutex_t* %96) #8
  %104 = bitcast %"class.base::WaitableEventWatcher"* %0 to i64*
  %105 = load %"class.base::Flag"*, %"class.base::Flag"** %2, align 8
  store i64 0, i64* %104, align 8
  %106 = icmp eq %"class.base::Flag"* %105, null
  br i1 %106, label %116, label %107

107:                                              ; preds = %101
  %108 = getelementptr inbounds %"class.base::Flag", %"class.base::Flag"* %105, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %109 = atomicrmw sub i32* %108, i32 1 acq_rel
  %110 = icmp eq i32 %109, 1
  br i1 %110, label %111, label %116

111:                                              ; preds = %107
  %112 = getelementptr inbounds %"class.base::Flag", %"class.base::Flag"* %105, i64 0, i32 0
  %113 = getelementptr inbounds %"class.base::RefCountedThreadSafe", %"class.base::RefCountedThreadSafe"* %112, i64 2
  %114 = bitcast %"class.base::RefCountedThreadSafe"* %113 to %"class.base::internal::LockImpl"*
  tail call void @_ZN4base8internal8LockImplD1Ev(%"class.base::internal::LockImpl"* %114) #8
  %115 = bitcast %"class.base::Flag"* %105 to i8*
  tail call void @_ZdlPv(i8* %115) #9
  br label %116

116:                                              ; preds = %111, %107, %101, %88, %84, %80
  %117 = tail call i32 @pthread_mutex_unlock(%union.pthread_mutex_t* %59) #8
  br label %118

118:                                              ; preds = %52, %48, %42, %25, %21, %17, %1, %116
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN4base20WaitableEventWatcher13StartWatchingEPNS_13WaitableEventENS_12OnceCallbackIFvS2_EEE13scoped_refptrINS_19SequencedTaskRunnerEE(%"class.base::WaitableEventWatcher"* nocapture, %"class.base::WaitableEvent"*, %"class.base::OnceCallback"* nocapture, %"class.base::SequencedTaskRunner"*) local_unnamed_addr #0 align 2 {
  %5 = alloca %"class.base::OnceCallback.8", align 8
  %6 = alloca %"class.base::Location", align 8
  %7 = alloca %"class.base::OnceCallback.8", align 8
  %8 = alloca %"class.base::OnceCallback.8", align 8
  %9 = ptrtoint %"class.base::SequencedTaskRunner"* %3 to i64
  %10 = ptrtoint %"class.base::WaitableEvent"* %1 to i64
  %11 = getelementptr inbounds %"class.base::WaitableEventWatcher", %"class.base::WaitableEventWatcher"* %0, i64 0, i32 0, i32 0
  %12 = load %"class.base::Flag"*, %"class.base::Flag"** %11, align 8
  %13 = icmp eq %"class.base::Flag"* %12, null
  br i1 %13, label %39, label %14

14:                                               ; preds = %4
  %15 = getelementptr inbounds %"class.base::Flag", %"class.base::Flag"* %12, i64 0, i32 2
  %16 = getelementptr inbounds %"class.base::Lock", %"class.base::Lock"* %15, i64 0, i32 0, i32 0
  %17 = tail call i32 @pthread_mutex_trylock(%union.pthread_mutex_t* %16) #8
  %18 = icmp eq i32 %17, 0
  br i1 %18, label %21, label %19, !prof !2

19:                                               ; preds = %14
  %20 = getelementptr inbounds %"class.base::Lock", %"class.base::Lock"* %15, i64 0, i32 0
  tail call void @_ZN4base8internal8LockImpl24LockInternalWithTrackingEv(%"class.base::internal::LockImpl"* %20) #8
  br label %21

21:                                               ; preds = %14, %19
  %22 = getelementptr inbounds %"class.base::Flag", %"class.base::Flag"* %12, i64 0, i32 3
  %23 = load i8, i8* %22, align 8, !range !3
  %24 = icmp eq i8 %23, 0
  %25 = tail call i32 @pthread_mutex_unlock(%union.pthread_mutex_t* %16) #8
  br i1 %24, label %39, label %26

26:                                               ; preds = %21
  %27 = bitcast %"class.base::WaitableEventWatcher"* %0 to i64*
  %28 = load %"class.base::Flag"*, %"class.base::Flag"** %11, align 8
  store i64 0, i64* %27, align 8
  %29 = icmp eq %"class.base::Flag"* %28, null
  br i1 %29, label %39, label %30

30:                                               ; preds = %26
  %31 = getelementptr inbounds %"class.base::Flag", %"class.base::Flag"* %28, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %32 = atomicrmw sub i32* %31, i32 1 acq_rel
  %33 = icmp eq i32 %32, 1
  br i1 %33, label %34, label %39

34:                                               ; preds = %30
  %35 = getelementptr inbounds %"class.base::Flag", %"class.base::Flag"* %28, i64 0, i32 0
  %36 = getelementptr inbounds %"class.base::RefCountedThreadSafe", %"class.base::RefCountedThreadSafe"* %35, i64 2
  %37 = bitcast %"class.base::RefCountedThreadSafe"* %36 to %"class.base::internal::LockImpl"*
  tail call void @_ZN4base8internal8LockImplD1Ev(%"class.base::internal::LockImpl"* %37) #8
  %38 = bitcast %"class.base::Flag"* %28 to i8*
  tail call void @_ZdlPv(i8* %38) #9
  br label %39

39:                                               ; preds = %21, %34, %30, %26, %4
  %40 = tail call i8* @_Znwm(i64 56) #9
  %41 = bitcast i8* %40 to i32*
  store i32 0, i32* %41, align 4
  %42 = getelementptr inbounds i8, i8* %40, i64 8
  %43 = bitcast i8* %42 to %"class.base::internal::LockImpl"*
  tail call void @_ZN4base8internal8LockImplC1Ev(%"class.base::internal::LockImpl"* %43) #8
  %44 = getelementptr inbounds i8, i8* %40, i64 48
  store i8 0, i8* %44, align 8
  %45 = atomicrmw add i32* %41, i32 1 monotonic
  %46 = ptrtoint i8* %40 to i64
  %47 = bitcast %"class.base::WaitableEventWatcher"* %0 to i64*
  %48 = load %"class.base::Flag"*, %"class.base::Flag"** %11, align 8
  store i64 %46, i64* %47, align 8
  %49 = icmp eq %"class.base::Flag"* %48, null
  br i1 %49, label %50, label %54

50:                                               ; preds = %39
  %51 = bitcast i8* %40 to %"class.base::Flag"*
  %52 = bitcast %"class.base::OnceCallback.8"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %52) #8
  %53 = getelementptr inbounds %"class.base::OnceCallback.8", %"class.base::OnceCallback.8"* %5, i64 0, i32 0, i32 0, i32 0
  store %"class.base::internal::BindStateBase"* inttoptr (i64 -6148914691236517206 to %"class.base::internal::BindStateBase"*), %"class.base::internal::BindStateBase"** %53, align 8
  br label %68

54:                                               ; preds = %39
  %55 = getelementptr inbounds %"class.base::Flag", %"class.base::Flag"* %48, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %56 = atomicrmw sub i32* %55, i32 1 acq_rel
  %57 = icmp eq i32 %56, 1
  br i1 %57, label %58, label %63

58:                                               ; preds = %54
  %59 = getelementptr inbounds %"class.base::Flag", %"class.base::Flag"* %48, i64 0, i32 0
  %60 = getelementptr inbounds %"class.base::RefCountedThreadSafe", %"class.base::RefCountedThreadSafe"* %59, i64 2
  %61 = bitcast %"class.base::RefCountedThreadSafe"* %60 to %"class.base::internal::LockImpl"*
  tail call void @_ZN4base8internal8LockImplD1Ev(%"class.base::internal::LockImpl"* %61) #8
  %62 = bitcast %"class.base::Flag"* %48 to i8*
  tail call void @_ZdlPv(i8* %62) #9
  br label %63

63:                                               ; preds = %54, %58
  %64 = load %"class.base::Flag"*, %"class.base::Flag"** %11, align 8
  %65 = bitcast %"class.base::OnceCallback.8"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %65) #8
  %66 = getelementptr inbounds %"class.base::OnceCallback.8", %"class.base::OnceCallback.8"* %5, i64 0, i32 0, i32 0, i32 0
  store %"class.base::internal::BindStateBase"* inttoptr (i64 -6148914691236517206 to %"class.base::internal::BindStateBase"*), %"class.base::internal::BindStateBase"** %66, align 8
  %67 = icmp eq %"class.base::Flag"* %64, null
  br i1 %67, label %74, label %68

68:                                               ; preds = %50, %63
  %69 = phi %"class.base::internal::BindStateBase"** [ %53, %50 ], [ %66, %63 ]
  %70 = phi i8* [ %52, %50 ], [ %65, %63 ]
  %71 = phi %"class.base::Flag"* [ %51, %50 ], [ %64, %63 ]
  %72 = getelementptr inbounds %"class.base::Flag", %"class.base::Flag"* %71, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %73 = atomicrmw add i32* %72, i32 1 monotonic
  br label %74

74:                                               ; preds = %68, %63
  %75 = phi %"class.base::internal::BindStateBase"** [ %66, %63 ], [ %69, %68 ]
  %76 = phi i8* [ %65, %63 ], [ %70, %68 ]
  %77 = phi %"class.base::Flag"* [ null, %63 ], [ %71, %68 ]
  %78 = ptrtoint %"class.base::Flag"* %77 to i64
  %79 = tail call i8* @_Znwm(i64 64) #9, !noalias !4
  %80 = bitcast i8* %79 to %"class.base::internal::BindStateBase"*
  tail call void @_ZN4base8internal13BindStateBaseC2EPFvvEPFvPKS1_E(%"class.base::internal::BindStateBase"* nonnull %80, void ()* bitcast (void (%"class.base::internal::BindStateBase"*)* @_ZN4base8internal7InvokerINS0_9BindStateIPFvPNS_4FlagENS_12OnceCallbackIFvPNS_13WaitableEventEEEES7_EJNS0_18RetainedRefWrapperIS3_EES9_S7_EEEFvvEE7RunOnceEPNS0_13BindStateBaseE to void ()*), void (%"class.base::internal::BindStateBase"*)* nonnull @_ZN4base8internal9BindStateIPFvPNS_4FlagENS_12OnceCallbackIFvPNS_13WaitableEventEEEES6_EJNS0_18RetainedRefWrapperIS2_EES8_S6_EE7DestroyEPKNS0_13BindStateBaseE) #8, !noalias !4
  %81 = getelementptr inbounds i8, i8* %79, i64 32
  %82 = bitcast i8* %81 to i64*
  store i64 ptrtoint (void (%"class.base::Flag"*, %"class.base::OnceCallback"*, %"class.base::WaitableEvent"*)* @_ZN4base19AsyncCallbackHelperEPNS_4FlagENS_12OnceCallbackIFvPNS_13WaitableEventEEEES4_ to i64), i64* %82, align 8, !noalias !4
  %83 = getelementptr inbounds i8, i8* %79, i64 40
  %84 = bitcast i8* %83 to i64*
  store i64 %78, i64* %84, align 8, !noalias !4
  %85 = getelementptr inbounds i8, i8* %79, i64 48
  %86 = getelementptr inbounds %"class.base::OnceCallback", %"class.base::OnceCallback"* %2, i64 0, i32 0, i32 0, i32 0
  %87 = bitcast %"class.base::OnceCallback"* %2 to i64*
  %88 = load i64, i64* %87, align 8, !noalias !4
  %89 = bitcast i8* %85 to i64*
  store i64 %88, i64* %89, align 8, !noalias !4
  store %"class.base::internal::BindStateBase"* null, %"class.base::internal::BindStateBase"** %86, align 8, !noalias !4
  %90 = getelementptr inbounds i8, i8* %79, i64 56
  %91 = bitcast i8* %90 to i64*
  store i64 %10, i64* %91, align 8, !noalias !4
  %92 = bitcast %"class.base::OnceCallback.8"* %5 to i8**
  store i8* %79, i8** %92, align 8, !alias.scope !4
  %93 = getelementptr inbounds %"class.base::WaitableEvent", %"class.base::WaitableEvent"* %1, i64 0, i32 0, i32 0
  %94 = load %"struct.base::WaitableEvent::WaitableEventKernel"*, %"struct.base::WaitableEvent::WaitableEventKernel"** %93, align 8
  %95 = getelementptr inbounds %"struct.base::WaitableEvent::WaitableEventKernel", %"struct.base::WaitableEvent::WaitableEventKernel"* %94, i64 0, i32 1
  %96 = getelementptr inbounds %"class.base::Lock", %"class.base::Lock"* %95, i64 0, i32 0, i32 0
  %97 = tail call i32 @pthread_mutex_trylock(%union.pthread_mutex_t* %96) #8
  %98 = icmp eq i32 %97, 0
  br i1 %98, label %101, label %99, !prof !2

99:                                               ; preds = %74
  %100 = getelementptr inbounds %"class.base::Lock", %"class.base::Lock"* %95, i64 0, i32 0
  tail call void @_ZN4base8internal8LockImpl24LockInternalWithTrackingEv(%"class.base::internal::LockImpl"* %100) #8
  br label %101

101:                                              ; preds = %74, %99
  %102 = getelementptr inbounds %"struct.base::WaitableEvent::WaitableEventKernel", %"struct.base::WaitableEvent::WaitableEventKernel"* %94, i64 0, i32 3
  %103 = load i8, i8* %102, align 1, !range !3
  %104 = icmp eq i8 %103, 0
  br i1 %104, label %118, label %105

105:                                              ; preds = %101
  %106 = getelementptr inbounds %"struct.base::WaitableEvent::WaitableEventKernel", %"struct.base::WaitableEvent::WaitableEventKernel"* %94, i64 0, i32 2
  %107 = load i8, i8* %106, align 8, !range !3
  %108 = icmp eq i8 %107, 0
  br i1 %108, label %109, label %110

109:                                              ; preds = %105
  store i8 0, i8* %102, align 1
  br label %110

110:                                              ; preds = %105, %109
  %111 = bitcast %"class.base::SequencedTaskRunner"* %3 to %"class.base::TaskRunner"*
  %112 = bitcast %"class.base::Location"* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %112) #8
  call void @_ZN4base8Location7CurrentEPKcS2_i(%"class.base::Location"* nonnull sret %6, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str, i64 0, i64 0), i8* getelementptr inbounds ([59 x i8], [59 x i8]* @.str.1, i64 0, i64 0), i32 153) #8
  %113 = bitcast %"class.base::OnceCallback.8"* %5 to i64*
  %114 = load i64, i64* %113, align 8
  %115 = bitcast %"class.base::OnceCallback.8"* %7 to i64*
  store i64 %114, i64* %115, align 8
  store %"class.base::internal::BindStateBase"* null, %"class.base::internal::BindStateBase"** %75, align 8
  %116 = call zeroext i1 @_ZN4base10TaskRunner8PostTaskERKNS_8LocationENS_12OnceCallbackIFvvEEE(%"class.base::TaskRunner"* %111, %"class.base::Location"* nonnull dereferenceable(32) %6, %"class.base::OnceCallback.8"* nonnull %7) #8
  %117 = getelementptr inbounds %"class.base::OnceCallback.8", %"class.base::OnceCallback.8"* %7, i64 0, i32 0
  call void @_ZN4base8internal12CallbackBaseD2Ev(%"class.base::internal::CallbackBase"* nonnull %117) #8
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %112) #8
  br label %159

118:                                              ; preds = %101
  %119 = getelementptr inbounds %"class.base::WaitableEventWatcher", %"class.base::WaitableEventWatcher"* %0, i64 0, i32 2
  %120 = icmp eq %"struct.base::WaitableEvent::WaitableEventKernel"* %94, null
  br i1 %120, label %124, label %121

121:                                              ; preds = %118
  %122 = getelementptr inbounds %"struct.base::WaitableEvent::WaitableEventKernel", %"struct.base::WaitableEvent::WaitableEventKernel"* %94, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %123 = atomicrmw add i32* %122, i32 1 monotonic
  br label %124

124:                                              ; preds = %121, %118
  %125 = ptrtoint %"struct.base::WaitableEvent::WaitableEventKernel"* %94 to i64
  %126 = bitcast %class.scoped_refptr* %119 to i64*
  %127 = getelementptr inbounds %class.scoped_refptr, %class.scoped_refptr* %119, i64 0, i32 0
  %128 = load %"struct.base::WaitableEvent::WaitableEventKernel"*, %"struct.base::WaitableEvent::WaitableEventKernel"** %127, align 8
  store i64 %125, i64* %126, align 8
  %129 = icmp eq %"struct.base::WaitableEvent::WaitableEventKernel"* %128, null
  br i1 %129, label %136, label %130

130:                                              ; preds = %124
  %131 = getelementptr inbounds %"struct.base::WaitableEvent::WaitableEventKernel", %"struct.base::WaitableEvent::WaitableEventKernel"* %128, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %132 = atomicrmw sub i32* %131, i32 1 acq_rel
  %133 = icmp eq i32 %132, 1
  br i1 %133, label %134, label %136

134:                                              ; preds = %130
  tail call void @_ZN4base13WaitableEvent19WaitableEventKernelD1Ev(%"struct.base::WaitableEvent::WaitableEventKernel"* nonnull %128) #8
  %135 = bitcast %"struct.base::WaitableEvent::WaitableEventKernel"* %128 to i8*
  tail call void @_ZdlPv(i8* %135) #9
  br label %136

136:                                              ; preds = %124, %130, %134
  %137 = tail call i8* @_Znwm(i64 32) #9
  %138 = bitcast %"class.base::OnceCallback.8"* %5 to i64*
  %139 = load i64, i64* %138, align 8
  store %"class.base::internal::BindStateBase"* null, %"class.base::internal::BindStateBase"** %75, align 8
  %140 = load %"class.base::Flag"*, %"class.base::Flag"** %11, align 8
  %141 = bitcast i8* %137 to i32 (...)***
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [6 x i8*] }, { [6 x i8*] }* @_ZTVN4base11AsyncWaiterE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %141, align 8
  %142 = getelementptr inbounds i8, i8* %137, i64 8
  %143 = bitcast i8* %142 to i64*
  store i64 %9, i64* %143, align 8
  %144 = getelementptr inbounds i8, i8* %137, i64 16
  %145 = getelementptr inbounds %"class.base::OnceCallback.8", %"class.base::OnceCallback.8"* %8, i64 0, i32 0, i32 0, i32 0
  %146 = bitcast i8* %144 to i64*
  store i64 %139, i64* %146, align 8
  store %"class.base::internal::BindStateBase"* null, %"class.base::internal::BindStateBase"** %145, align 8
  %147 = getelementptr inbounds i8, i8* %137, i64 24
  %148 = bitcast i8* %147 to %"class.base::Flag"**
  store %"class.base::Flag"* %140, %"class.base::Flag"** %148, align 8
  %149 = icmp eq %"class.base::Flag"* %140, null
  br i1 %149, label %153, label %150

150:                                              ; preds = %136
  %151 = getelementptr inbounds %"class.base::Flag", %"class.base::Flag"* %140, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %152 = atomicrmw add i32* %151, i32 1 monotonic
  br label %153

153:                                              ; preds = %136, %150
  %154 = getelementptr inbounds %"class.base::WaitableEventWatcher", %"class.base::WaitableEventWatcher"* %0, i64 0, i32 1
  %155 = bitcast %"class.base::AsyncWaiter"** %154 to i8**
  store i8* %137, i8** %155, align 8
  %156 = getelementptr inbounds %"class.base::OnceCallback.8", %"class.base::OnceCallback.8"* %8, i64 0, i32 0
  call void @_ZN4base8internal12CallbackBaseD2Ev(%"class.base::internal::CallbackBase"* nonnull %156) #8
  %157 = bitcast %"class.base::AsyncWaiter"** %154 to %"class.base::WaitableEvent::Waiter"**
  %158 = load %"class.base::WaitableEvent::Waiter"*, %"class.base::WaitableEvent::Waiter"** %157, align 8
  call void @_ZN4base13WaitableEvent7EnqueueEPNS0_6WaiterE(%"class.base::WaitableEvent"* %1, %"class.base::WaitableEvent::Waiter"* %158) #8
  br label %159

159:                                              ; preds = %153, %110
  %160 = phi %"class.base::SequencedTaskRunner"* [ null, %153 ], [ %3, %110 ]
  %161 = call i32 @pthread_mutex_unlock(%union.pthread_mutex_t* %96) #8
  %162 = getelementptr inbounds %"class.base::OnceCallback.8", %"class.base::OnceCallback.8"* %5, i64 0, i32 0
  call void @_ZN4base8internal12CallbackBaseD2Ev(%"class.base::internal::CallbackBase"* nonnull %162) #8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %76) #8
  %163 = icmp eq %"class.base::SequencedTaskRunner"* %160, null
  br i1 %163, label %172, label %164

164:                                              ; preds = %159
  %165 = getelementptr inbounds %"class.base::SequencedTaskRunner", %"class.base::SequencedTaskRunner"* %160, i64 0, i32 0, i32 1
  %166 = getelementptr inbounds %"class.base::RefCountedThreadSafe.7", %"class.base::RefCountedThreadSafe.7"* %165, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %167 = atomicrmw sub i32* %166, i32 1 acq_rel
  %168 = icmp eq i32 %167, 1
  br i1 %168, label %169, label %172

169:                                              ; preds = %164
  %170 = getelementptr inbounds %"class.base::RefCountedThreadSafe.7", %"class.base::RefCountedThreadSafe.7"* %165, i64 -2
  %171 = bitcast %"class.base::RefCountedThreadSafe.7"* %170 to %"class.base::TaskRunner"*
  call void @_ZN4base16TaskRunnerTraits8DestructEPKNS_10TaskRunnerE(%"class.base::TaskRunner"* %171) #8
  br label %172

172:                                              ; preds = %159, %164, %169
  ret i1 true
}

; Function Attrs: nobuiltin nofree
declare noalias nonnull i8* @_Znwm(i64) local_unnamed_addr #2

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #3

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #3

declare zeroext i1 @_ZN4base10TaskRunner8PostTaskERKNS_8LocationENS_12OnceCallbackIFvvEEE(%"class.base::TaskRunner"*, %"class.base::Location"* dereferenceable(32), %"class.base::OnceCallback.8"*) local_unnamed_addr #4

declare void @_ZN4base8Location7CurrentEPKcS2_i(%"class.base::Location"* sret, i8*, i8*, i32) local_unnamed_addr #4

declare void @_ZN4base13WaitableEvent7EnqueueEPNS0_6WaiterE(%"class.base::WaitableEvent"*, %"class.base::WaitableEvent::Waiter"*) local_unnamed_addr #4

declare zeroext i1 @_ZN4base13WaitableEvent19WaitableEventKernel7DequeueEPNS0_6WaiterEPv(%"struct.base::WaitableEvent::WaitableEventKernel"*, %"class.base::WaitableEvent::Waiter"*, i8*) local_unnamed_addr #4

declare void @_ZN4base8internal8LockImplC1Ev(%"class.base::internal::LockImpl"*) unnamed_addr #4

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZN4base11AsyncWaiter4FireEPNS_13WaitableEventE(%"class.base::AsyncWaiter"*, %"class.base::WaitableEvent"*) unnamed_addr #0 comdat align 2 {
  %3 = alloca %"class.base::Location", align 8
  %4 = alloca %"class.base::OnceCallback.8", align 8
  %5 = getelementptr inbounds %"class.base::AsyncWaiter", %"class.base::AsyncWaiter"* %0, i64 0, i32 3, i32 0
  %6 = load %"class.base::Flag"*, %"class.base::Flag"** %5, align 8
  %7 = getelementptr inbounds %"class.base::Flag", %"class.base::Flag"* %6, i64 0, i32 2
  %8 = getelementptr inbounds %"class.base::Lock", %"class.base::Lock"* %7, i64 0, i32 0, i32 0
  %9 = tail call i32 @pthread_mutex_trylock(%union.pthread_mutex_t* %8) #8
  %10 = icmp eq i32 %9, 0
  br i1 %10, label %13, label %11, !prof !2

11:                                               ; preds = %2
  %12 = getelementptr inbounds %"class.base::Lock", %"class.base::Lock"* %7, i64 0, i32 0
  tail call void @_ZN4base8internal8LockImpl24LockInternalWithTrackingEv(%"class.base::internal::LockImpl"* %12) #8
  br label %13

13:                                               ; preds = %2, %11
  %14 = getelementptr inbounds %"class.base::Flag", %"class.base::Flag"* %6, i64 0, i32 3
  %15 = load i8, i8* %14, align 8, !range !3
  %16 = icmp eq i8 %15, 0
  %17 = tail call i32 @pthread_mutex_unlock(%union.pthread_mutex_t* %8) #8
  br i1 %16, label %18, label %30

18:                                               ; preds = %13
  %19 = getelementptr inbounds %"class.base::AsyncWaiter", %"class.base::AsyncWaiter"* %0, i64 0, i32 1, i32 0
  %20 = bitcast %"class.base::SequencedTaskRunner"** %19 to %"class.base::TaskRunner"**
  %21 = load %"class.base::TaskRunner"*, %"class.base::TaskRunner"** %20, align 8
  %22 = bitcast %"class.base::Location"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %22) #8
  call void @_ZN4base8Location7CurrentEPKcS2_i(%"class.base::Location"* nonnull sret %3, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.2, i64 0, i64 0), i8* getelementptr inbounds ([59 x i8], [59 x i8]* @.str.1, i64 0, i64 0), i32 73) #8
  %23 = getelementptr inbounds %"class.base::AsyncWaiter", %"class.base::AsyncWaiter"* %0, i64 0, i32 2
  %24 = getelementptr inbounds %"class.base::OnceCallback.8", %"class.base::OnceCallback.8"* %23, i64 0, i32 0, i32 0, i32 0
  %25 = bitcast %"class.base::OnceCallback.8"* %23 to i64*
  %26 = load i64, i64* %25, align 8
  %27 = bitcast %"class.base::OnceCallback.8"* %4 to i64*
  store i64 %26, i64* %27, align 8
  store %"class.base::internal::BindStateBase"* null, %"class.base::internal::BindStateBase"** %24, align 8
  %28 = call zeroext i1 @_ZN4base10TaskRunner8PostTaskERKNS_8LocationENS_12OnceCallbackIFvvEEE(%"class.base::TaskRunner"* %21, %"class.base::Location"* nonnull dereferenceable(32) %3, %"class.base::OnceCallback.8"* nonnull %4) #8
  %29 = getelementptr inbounds %"class.base::OnceCallback.8", %"class.base::OnceCallback.8"* %4, i64 0, i32 0
  call void @_ZN4base8internal12CallbackBaseD2Ev(%"class.base::internal::CallbackBase"* nonnull %29) #8
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %22) #8
  br label %30

30:                                               ; preds = %13, %18
  %31 = icmp eq %"class.base::AsyncWaiter"* %0, null
  br i1 %31, label %37, label %32

32:                                               ; preds = %30
  %33 = bitcast %"class.base::AsyncWaiter"* %0 to void (%"class.base::AsyncWaiter"*)***
  %34 = load void (%"class.base::AsyncWaiter"*)**, void (%"class.base::AsyncWaiter"*)*** %33, align 8
  %35 = getelementptr inbounds void (%"class.base::AsyncWaiter"*)*, void (%"class.base::AsyncWaiter"*)** %34, i64 3
  %36 = load void (%"class.base::AsyncWaiter"*)*, void (%"class.base::AsyncWaiter"*)** %35, align 8
  call void %36(%"class.base::AsyncWaiter"* nonnull %0) #8
  br label %37

37:                                               ; preds = %32, %30
  ret i1 true
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZN4base11AsyncWaiter7CompareEPv(%"class.base::AsyncWaiter"*, i8*) unnamed_addr #0 comdat align 2 {
  %3 = getelementptr inbounds %"class.base::AsyncWaiter", %"class.base::AsyncWaiter"* %0, i64 0, i32 3, i32 0
  %4 = bitcast %"class.base::Flag"** %3 to i8**
  %5 = load i8*, i8** %4, align 8
  %6 = icmp eq i8* %5, %1
  ret i1 %6
}

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZN4base11AsyncWaiterD2Ev(%"class.base::AsyncWaiter"*) unnamed_addr #5 comdat align 2 {
  %2 = getelementptr inbounds %"class.base::AsyncWaiter", %"class.base::AsyncWaiter"* %0, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [6 x i8*] }, { [6 x i8*] }* @_ZTVN4base11AsyncWaiterE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8
  %3 = getelementptr inbounds %"class.base::AsyncWaiter", %"class.base::AsyncWaiter"* %0, i64 0, i32 3, i32 0
  %4 = load %"class.base::Flag"*, %"class.base::Flag"** %3, align 8
  %5 = icmp eq %"class.base::Flag"* %4, null
  br i1 %5, label %15, label %6

6:                                                ; preds = %1
  %7 = getelementptr inbounds %"class.base::Flag", %"class.base::Flag"* %4, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %8 = atomicrmw sub i32* %7, i32 1 acq_rel
  %9 = icmp eq i32 %8, 1
  br i1 %9, label %10, label %15

10:                                               ; preds = %6
  %11 = getelementptr inbounds %"class.base::Flag", %"class.base::Flag"* %4, i64 0, i32 0
  %12 = getelementptr inbounds %"class.base::RefCountedThreadSafe", %"class.base::RefCountedThreadSafe"* %11, i64 2
  %13 = bitcast %"class.base::RefCountedThreadSafe"* %12 to %"class.base::internal::LockImpl"*
  tail call void @_ZN4base8internal8LockImplD1Ev(%"class.base::internal::LockImpl"* %13) #8
  %14 = bitcast %"class.base::Flag"* %4 to i8*
  tail call void @_ZdlPv(i8* %14) #9
  br label %15

15:                                               ; preds = %1, %6, %10
  %16 = getelementptr inbounds %"class.base::AsyncWaiter", %"class.base::AsyncWaiter"* %0, i64 0, i32 2, i32 0
  tail call void @_ZN4base8internal12CallbackBaseD2Ev(%"class.base::internal::CallbackBase"* %16) #8
  %17 = getelementptr inbounds %"class.base::AsyncWaiter", %"class.base::AsyncWaiter"* %0, i64 0, i32 1, i32 0
  %18 = load %"class.base::SequencedTaskRunner"*, %"class.base::SequencedTaskRunner"** %17, align 8
  %19 = icmp eq %"class.base::SequencedTaskRunner"* %18, null
  br i1 %19, label %28, label %20

20:                                               ; preds = %15
  %21 = getelementptr inbounds %"class.base::SequencedTaskRunner", %"class.base::SequencedTaskRunner"* %18, i64 0, i32 0, i32 1
  %22 = getelementptr inbounds %"class.base::RefCountedThreadSafe.7", %"class.base::RefCountedThreadSafe.7"* %21, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %23 = atomicrmw sub i32* %22, i32 1 acq_rel
  %24 = icmp eq i32 %23, 1
  br i1 %24, label %25, label %28

25:                                               ; preds = %20
  %26 = getelementptr inbounds %"class.base::RefCountedThreadSafe.7", %"class.base::RefCountedThreadSafe.7"* %21, i64 -2
  %27 = bitcast %"class.base::RefCountedThreadSafe.7"* %26 to %"class.base::TaskRunner"*
  tail call void @_ZN4base16TaskRunnerTraits8DestructEPKNS_10TaskRunnerE(%"class.base::TaskRunner"* %27) #8
  br label %28

28:                                               ; preds = %15, %20, %25
  ret void
}

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZN4base11AsyncWaiterD0Ev(%"class.base::AsyncWaiter"*) unnamed_addr #5 comdat align 2 {
  %2 = getelementptr inbounds %"class.base::AsyncWaiter", %"class.base::AsyncWaiter"* %0, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [6 x i8*] }, { [6 x i8*] }* @_ZTVN4base11AsyncWaiterE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8
  %3 = getelementptr inbounds %"class.base::AsyncWaiter", %"class.base::AsyncWaiter"* %0, i64 0, i32 3, i32 0
  %4 = load %"class.base::Flag"*, %"class.base::Flag"** %3, align 8
  %5 = icmp eq %"class.base::Flag"* %4, null
  br i1 %5, label %15, label %6

6:                                                ; preds = %1
  %7 = getelementptr inbounds %"class.base::Flag", %"class.base::Flag"* %4, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %8 = atomicrmw sub i32* %7, i32 1 acq_rel
  %9 = icmp eq i32 %8, 1
  br i1 %9, label %10, label %15

10:                                               ; preds = %6
  %11 = getelementptr inbounds %"class.base::Flag", %"class.base::Flag"* %4, i64 0, i32 0
  %12 = getelementptr inbounds %"class.base::RefCountedThreadSafe", %"class.base::RefCountedThreadSafe"* %11, i64 2
  %13 = bitcast %"class.base::RefCountedThreadSafe"* %12 to %"class.base::internal::LockImpl"*
  tail call void @_ZN4base8internal8LockImplD1Ev(%"class.base::internal::LockImpl"* %13) #8
  %14 = bitcast %"class.base::Flag"* %4 to i8*
  tail call void @_ZdlPv(i8* %14) #9
  br label %15

15:                                               ; preds = %10, %6, %1
  %16 = getelementptr inbounds %"class.base::AsyncWaiter", %"class.base::AsyncWaiter"* %0, i64 0, i32 2, i32 0
  tail call void @_ZN4base8internal12CallbackBaseD2Ev(%"class.base::internal::CallbackBase"* %16) #8
  %17 = getelementptr inbounds %"class.base::AsyncWaiter", %"class.base::AsyncWaiter"* %0, i64 0, i32 1, i32 0
  %18 = load %"class.base::SequencedTaskRunner"*, %"class.base::SequencedTaskRunner"** %17, align 8
  %19 = icmp eq %"class.base::SequencedTaskRunner"* %18, null
  br i1 %19, label %28, label %20

20:                                               ; preds = %15
  %21 = getelementptr inbounds %"class.base::SequencedTaskRunner", %"class.base::SequencedTaskRunner"* %18, i64 0, i32 0, i32 1
  %22 = getelementptr inbounds %"class.base::RefCountedThreadSafe.7", %"class.base::RefCountedThreadSafe.7"* %21, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %23 = atomicrmw sub i32* %22, i32 1 acq_rel
  %24 = icmp eq i32 %23, 1
  br i1 %24, label %25, label %28

25:                                               ; preds = %20
  %26 = getelementptr inbounds %"class.base::RefCountedThreadSafe.7", %"class.base::RefCountedThreadSafe.7"* %21, i64 -2
  %27 = bitcast %"class.base::RefCountedThreadSafe.7"* %26 to %"class.base::TaskRunner"*
  tail call void @_ZN4base16TaskRunnerTraits8DestructEPKNS_10TaskRunnerE(%"class.base::TaskRunner"* %27) #8
  br label %28

28:                                               ; preds = %15, %20, %25
  %29 = bitcast %"class.base::AsyncWaiter"* %0 to i8*
  tail call void @_ZdlPv(i8* %29) #9
  ret void
}

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #6

declare void @_ZN4base8internal8LockImpl24LockInternalWithTrackingEv(%"class.base::internal::LockImpl"*) local_unnamed_addr #4

; Function Attrs: nounwind
declare i32 @pthread_mutex_trylock(%union.pthread_mutex_t*) local_unnamed_addr #7

; Function Attrs: nounwind
declare i32 @pthread_mutex_unlock(%union.pthread_mutex_t*) local_unnamed_addr #7

declare void @_ZN4base16TaskRunnerTraits8DestructEPKNS_10TaskRunnerE(%"class.base::TaskRunner"*) local_unnamed_addr #4

; Function Attrs: nounwind
declare void @_ZN4base8internal8LockImplD1Ev(%"class.base::internal::LockImpl"*) unnamed_addr #7

; Function Attrs: nounwind
declare void @_ZN4base8internal12CallbackBaseD2Ev(%"class.base::internal::CallbackBase"*) unnamed_addr #7

; Function Attrs: nounwind
declare void @_ZN4base13WaitableEvent19WaitableEventKernelD1Ev(%"struct.base::WaitableEvent::WaitableEventKernel"*) unnamed_addr #7

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #3

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN4base8internal7InvokerINS0_9BindStateIPFvPNS_4FlagENS_12OnceCallbackIFvPNS_13WaitableEventEEEES7_EJNS0_18RetainedRefWrapperIS3_EES9_S7_EEEFvvEE7RunOnceEPNS0_13BindStateBaseE(%"class.base::internal::BindStateBase"*) #0 comdat align 2 {
  %2 = alloca %"class.base::OnceCallback", align 8
  %3 = getelementptr inbounds %"class.base::internal::BindStateBase", %"class.base::internal::BindStateBase"* %0, i64 1
  %4 = bitcast %"class.base::internal::BindStateBase"* %3 to void (%"class.base::Flag"*, %"class.base::OnceCallback"*, %"class.base::WaitableEvent"*)**
  %5 = getelementptr inbounds %"class.base::internal::BindStateBase", %"class.base::internal::BindStateBase"* %0, i64 1, i32 1
  %6 = bitcast void ()** %5 to %"class.base::Flag"**
  %7 = load %"class.base::Flag"*, %"class.base::Flag"** %6, align 8
  %8 = getelementptr inbounds void ()*, void ()** %5, i64 1
  %9 = getelementptr inbounds void ()*, void ()** %5, i64 2
  %10 = bitcast void ()** %9 to %"class.base::WaitableEvent"**
  %11 = bitcast %"class.base::OnceCallback"* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %11) #8
  %12 = load void (%"class.base::Flag"*, %"class.base::OnceCallback"*, %"class.base::WaitableEvent"*)*, void (%"class.base::Flag"*, %"class.base::OnceCallback"*, %"class.base::WaitableEvent"*)** %4, align 8
  %13 = bitcast void ()** %8 to %"class.base::internal::BindStateBase"**
  %14 = bitcast void ()** %8 to i64*
  %15 = load i64, i64* %14, align 8
  %16 = bitcast %"class.base::OnceCallback"* %2 to i64*
  store i64 %15, i64* %16, align 8
  store %"class.base::internal::BindStateBase"* null, %"class.base::internal::BindStateBase"** %13, align 8
  %17 = load %"class.base::WaitableEvent"*, %"class.base::WaitableEvent"** %10, align 8
  call void %12(%"class.base::Flag"* %7, %"class.base::OnceCallback"* nonnull %2, %"class.base::WaitableEvent"* %17) #8
  %18 = getelementptr inbounds %"class.base::OnceCallback", %"class.base::OnceCallback"* %2, i64 0, i32 0
  call void @_ZN4base8internal12CallbackBaseD2Ev(%"class.base::internal::CallbackBase"* nonnull %18) #8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %11) #8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN4base8internal9BindStateIPFvPNS_4FlagENS_12OnceCallbackIFvPNS_13WaitableEventEEEES6_EJNS0_18RetainedRefWrapperIS2_EES8_S6_EE7DestroyEPKNS0_13BindStateBaseE(%"class.base::internal::BindStateBase"*) #0 comdat align 2 {
  %2 = icmp eq %"class.base::internal::BindStateBase"* %0, null
  br i1 %2, label %21, label %3

3:                                                ; preds = %1
  %4 = getelementptr inbounds %"class.base::internal::BindStateBase", %"class.base::internal::BindStateBase"* %0, i64 1, i32 2
  %5 = bitcast void (%"class.base::internal::BindStateBase"*)** %4 to %"class.base::internal::CallbackBase"*
  tail call void @_ZN4base8internal12CallbackBaseD2Ev(%"class.base::internal::CallbackBase"* %5) #8
  %6 = getelementptr inbounds %"class.base::internal::BindStateBase", %"class.base::internal::BindStateBase"* %0, i64 1, i32 1
  %7 = bitcast void ()** %6 to %"class.base::Flag"**
  %8 = load %"class.base::Flag"*, %"class.base::Flag"** %7, align 8
  %9 = icmp eq %"class.base::Flag"* %8, null
  br i1 %9, label %19, label %10

10:                                               ; preds = %3
  %11 = getelementptr inbounds %"class.base::Flag", %"class.base::Flag"* %8, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %12 = atomicrmw sub i32* %11, i32 1 acq_rel
  %13 = icmp eq i32 %12, 1
  br i1 %13, label %14, label %19

14:                                               ; preds = %10
  %15 = getelementptr inbounds %"class.base::Flag", %"class.base::Flag"* %8, i64 0, i32 0
  %16 = getelementptr inbounds %"class.base::RefCountedThreadSafe", %"class.base::RefCountedThreadSafe"* %15, i64 2
  %17 = bitcast %"class.base::RefCountedThreadSafe"* %16 to %"class.base::internal::LockImpl"*
  tail call void @_ZN4base8internal8LockImplD1Ev(%"class.base::internal::LockImpl"* %17) #8
  %18 = bitcast %"class.base::Flag"* %8 to i8*
  tail call void @_ZdlPv(i8* %18) #9
  br label %19

19:                                               ; preds = %3, %10, %14
  %20 = bitcast %"class.base::internal::BindStateBase"* %0 to i8*
  tail call void @_ZdlPv(i8* %20) #9
  br label %21

21:                                               ; preds = %19, %1
  ret void
}

declare void @_ZN4base8internal13BindStateBaseC2EPFvvEPFvPKS1_E(%"class.base::internal::BindStateBase"*, void ()*, void (%"class.base::internal::BindStateBase"*)*) unnamed_addr #4

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nofree norecurse nounwind ssp uwtable writeonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nobuiltin nofree "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { argmemonly nounwind }
attributes #4 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { inlinehint nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { nounwind }
attributes #9 = { builtin nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{!"branch_weights", i32 2000, i32 1}
!3 = !{i8 0, i8 2}
!4 = !{!5, !7}
!5 = distinct !{!5, !6, !"_ZN4base8internal8BindImplINS_12OnceCallbackEPFvPNS_4FlagENS2_IFvPNS_13WaitableEventEEEES6_EJNS0_18RetainedRefWrapperIS3_EES8_RS6_EEEDcOT0_DpOT1_: argument 0"}
!6 = distinct !{!6, !"_ZN4base8internal8BindImplINS_12OnceCallbackEPFvPNS_4FlagENS2_IFvPNS_13WaitableEventEEEES6_EJNS0_18RetainedRefWrapperIS3_EES8_RS6_EEEDcOT0_DpOT1_"}
!7 = distinct !{!7, !8, !"_ZN4base8BindOnceIPFvPNS_4FlagENS_12OnceCallbackIFvPNS_13WaitableEventEEEES5_EJNS_8internal18RetainedRefWrapperIS1_EES7_RS5_EEENS3_INSA_14BindTypeHelperIT_JDpT0_EE14UnboundRunTypeEEEOSF_DpOSG_: argument 0"}
!8 = distinct !{!8, !"_ZN4base8BindOnceIPFvPNS_4FlagENS_12OnceCallbackIFvPNS_13WaitableEventEEEES5_EJNS_8internal18RetainedRefWrapperIS1_EES7_RS5_EEENS3_INSA_14BindTypeHelperIT_JDpT0_EE14UnboundRunTypeEEEOSF_DpOSG_"}
