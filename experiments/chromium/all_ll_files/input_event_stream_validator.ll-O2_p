; ModuleID = '../../content/common/input/input_event_stream_validator.cc'
source_filename = "../../content/common/input/input_event_stream_validator.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.content::InputEventStreamValidator" = type <{ %"class.content::GestureEventStreamValidator", [5 x i8], %"class.content::TouchEventStreamValidator", %"class.std::__1::basic_string", i8, [7 x i8] }>
%"class.content::GestureEventStreamValidator" = type { i8, i8, i8 }
%"class.content::TouchEventStreamValidator" = type { %"class.blink::WebTouchEvent" }
%"class.blink::WebTouchEvent" = type { %"class.blink::WebInputEvent", i32, [16 x %"class.blink::WebTouchPoint"], i32, i8, i8, i8, i32 }
%"class.blink::WebInputEvent" = type { i32 (...)**, float, %"class.gfx::Vector2dF", %"class.base::TimeTicks", i32, i32 }
%"class.gfx::Vector2dF" = type { float, float }
%"class.base::TimeTicks" = type { %"class.base::time_internal::TimeBase" }
%"class.base::time_internal::TimeBase" = type { i64 }
%"class.blink::WebTouchPoint" = type { %"class.blink::WebPointerProperties", i32, float, float, float }
%"class.blink::WebPointerProperties" = type { i32, float, i32, i32, float, i32, i32, i32, i32, i32, i8, %"class.gfx::PointF", %"class.gfx::PointF" }
%"class.gfx::PointF" = type { float, float }
%"class.std::__1::basic_string" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" = type { %union.anon }
%union.anon = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" = type { i8*, i64, i64 }
%"class.base::CommandLine" = type { %"class.std::__1::vector", %"class.std::__1::map", i64 }
%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { %"class.std::__1::basic_string"*, %"class.std::__1::basic_string"*, %"class.std::__1::__compressed_pair.1" }
%"class.std::__1::__compressed_pair.1" = type { %"struct.std::__1::__compressed_pair_elem.2" }
%"struct.std::__1::__compressed_pair_elem.2" = type { %"class.std::__1::basic_string"* }
%"class.std::__1::map" = type { %"class.std::__1::__tree" }
%"class.std::__1::__tree" = type { %"class.std::__1::__tree_end_node"*, %"class.std::__1::__compressed_pair.6", %"class.std::__1::__compressed_pair.11" }
%"class.std::__1::__tree_end_node" = type { %"class.std::__1::__tree_node_base"* }
%"class.std::__1::__tree_node_base" = type opaque
%"class.std::__1::__compressed_pair.6" = type { %"struct.std::__1::__compressed_pair_elem.7" }
%"struct.std::__1::__compressed_pair_elem.7" = type { %"class.std::__1::__tree_end_node" }
%"class.std::__1::__compressed_pair.11" = type { %"struct.std::__1::__compressed_pair_elem.12" }
%"struct.std::__1::__compressed_pair_elem.12" = type { i64 }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short" = type { [23 x i8], %struct.anon }
%struct.anon = type { i8 }
%"class.blink::WebGestureEvent" = type <{ %"class.blink::WebInputEvent", i8, [3 x i8], i32, i32, [4 x i8], %union.anon.14, %"class.gfx::PointF", %"class.gfx::PointF", i32, [4 x i8] }>
%union.anon.14 = type { %struct.anon.20 }
%struct.anon.20 = type { i64, float, float, i32, i8, i32, i8, i8, i8, i8 }

@_ZN8switches25kValidateInputEventStreamE = external constant [0 x i8], align 1

@_ZN7content25InputEventStreamValidatorC1Ev = hidden unnamed_addr alias void (%"class.content::InputEventStreamValidator"*), void (%"class.content::InputEventStreamValidator"*)* @_ZN7content25InputEventStreamValidatorC2Ev
@_ZN7content25InputEventStreamValidatorD1Ev = hidden unnamed_addr alias void (%"class.content::InputEventStreamValidator"*), void (%"class.content::InputEventStreamValidator"*)* @_ZN7content25InputEventStreamValidatorD2Ev

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN7content25InputEventStreamValidatorC2Ev(%"class.content::InputEventStreamValidator"*) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.content::InputEventStreamValidator", %"class.content::InputEventStreamValidator"* %0, i64 0, i32 0
  tail call void @_ZN7content27GestureEventStreamValidatorC1Ev(%"class.content::GestureEventStreamValidator"* %2) #6
  %3 = getelementptr inbounds %"class.content::InputEventStreamValidator", %"class.content::InputEventStreamValidator"* %0, i64 0, i32 2
  tail call void @_ZN7content25TouchEventStreamValidatorC1Ev(%"class.content::TouchEventStreamValidator"* %3) #6
  %4 = getelementptr inbounds %"class.content::InputEventStreamValidator", %"class.content::InputEventStreamValidator"* %0, i64 0, i32 3
  %5 = bitcast %"class.std::__1::basic_string"* %4 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %5, i8 0, i64 24, i1 false) #6
  %6 = getelementptr inbounds %"class.content::InputEventStreamValidator", %"class.content::InputEventStreamValidator"* %0, i64 0, i32 4
  %7 = tail call %"class.base::CommandLine"* @_ZN4base11CommandLine17ForCurrentProcessEv() #6
  %8 = tail call zeroext i1 @_ZNK4base11CommandLine9HasSwitchEPKc(%"class.base::CommandLine"* %7, i8* getelementptr inbounds ([0 x i8], [0 x i8]* @_ZN8switches25kValidateInputEventStreamE, i64 0, i64 0)) #6
  %9 = zext i1 %8 to i8
  store i8 %9, i8* %6, align 8
  ret void
}

declare void @_ZN7content27GestureEventStreamValidatorC1Ev(%"class.content::GestureEventStreamValidator"*) unnamed_addr #1

declare void @_ZN7content25TouchEventStreamValidatorC1Ev(%"class.content::TouchEventStreamValidator"*) unnamed_addr #1

declare %"class.base::CommandLine"* @_ZN4base11CommandLine17ForCurrentProcessEv() local_unnamed_addr #1

declare zeroext i1 @_ZNK4base11CommandLine9HasSwitchEPKc(%"class.base::CommandLine"*, i8*) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN7content25InputEventStreamValidatorD2Ev(%"class.content::InputEventStreamValidator"*) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.content::InputEventStreamValidator", %"class.content::InputEventStreamValidator"* %0, i64 0, i32 3
  %3 = bitcast %"class.std::__1::basic_string"* %2 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %4 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %3, i64 0, i32 1, i32 0
  %5 = load i8, i8* %4, align 1
  %6 = icmp slt i8 %5, 0
  br i1 %6, label %7, label %10

7:                                                ; preds = %1
  %8 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %2, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %9 = load i8*, i8** %8, align 8
  tail call void @_ZdlPv(i8* %9) #7
  br label %10

10:                                               ; preds = %1, %7
  %11 = getelementptr inbounds %"class.content::InputEventStreamValidator", %"class.content::InputEventStreamValidator"* %0, i64 0, i32 2
  tail call void @_ZN7content25TouchEventStreamValidatorD1Ev(%"class.content::TouchEventStreamValidator"* %11) #6
  %12 = getelementptr inbounds %"class.content::InputEventStreamValidator", %"class.content::InputEventStreamValidator"* %0, i64 0, i32 0
  tail call void @_ZN7content27GestureEventStreamValidatorD1Ev(%"class.content::GestureEventStreamValidator"* %12) #6
  ret void
}

; Function Attrs: nounwind
declare void @_ZN7content25TouchEventStreamValidatorD1Ev(%"class.content::TouchEventStreamValidator"*) unnamed_addr #2

; Function Attrs: nounwind
declare void @_ZN7content27GestureEventStreamValidatorD1Ev(%"class.content::GestureEventStreamValidator"*) unnamed_addr #2

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden void @_ZN7content25InputEventStreamValidator8ValidateERKN5blink13WebInputEventE(%"class.content::InputEventStreamValidator"* nocapture, %"class.blink::WebInputEvent"* nocapture dereferenceable(40)) local_unnamed_addr #3 align 2 {
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN7content25InputEventStreamValidator12ValidateImplERKN5blink13WebInputEventEPNSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEE(%"class.content::InputEventStreamValidator"*, %"class.blink::WebInputEvent"* dereferenceable(40), %"class.std::__1::basic_string"*) local_unnamed_addr #0 align 2 {
  %4 = getelementptr inbounds %"class.blink::WebInputEvent", %"class.blink::WebInputEvent"* %1, i64 0, i32 4
  %5 = load i32, i32* %4, align 8
  %6 = add i32 %5, -11
  %7 = icmp ult i32 %6, 17
  br i1 %7, label %8, label %17

8:                                                ; preds = %3
  %9 = getelementptr inbounds %"class.blink::WebInputEvent", %"class.blink::WebInputEvent"* %1, i64 2, i32 3
  %10 = bitcast %"class.base::TimeTicks"* %9 to i32*
  %11 = load i32, i32* %10, align 8
  %12 = icmp eq i32 %11, 2
  br i1 %12, label %13, label %24

13:                                               ; preds = %8
  %14 = bitcast %"class.blink::WebInputEvent"* %1 to %"class.blink::WebGestureEvent"*
  %15 = getelementptr inbounds %"class.content::InputEventStreamValidator", %"class.content::InputEventStreamValidator"* %0, i64 0, i32 0
  %16 = tail call zeroext i1 @_ZN7content27GestureEventStreamValidator8ValidateERKN5blink15WebGestureEventEPNSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEE(%"class.content::GestureEventStreamValidator"* %15, %"class.blink::WebGestureEvent"* dereferenceable(112) %14, %"class.std::__1::basic_string"* %2) #6
  br label %24

17:                                               ; preds = %3
  %18 = add i32 %5, -28
  %19 = icmp ult i32 %18, 5
  br i1 %19, label %20, label %24

20:                                               ; preds = %17
  %21 = bitcast %"class.blink::WebInputEvent"* %1 to %"class.blink::WebTouchEvent"*
  %22 = getelementptr inbounds %"class.content::InputEventStreamValidator", %"class.content::InputEventStreamValidator"* %0, i64 0, i32 2
  %23 = tail call zeroext i1 @_ZN7content25TouchEventStreamValidator8ValidateERKN5blink13WebTouchEventEPNSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEE(%"class.content::TouchEventStreamValidator"* %22, %"class.blink::WebTouchEvent"* dereferenceable(1272) %21, %"class.std::__1::basic_string"* %2) #6
  br label %24

24:                                               ; preds = %8, %17, %13, %20
  %25 = phi i1 [ %16, %13 ], [ %23, %20 ], [ true, %17 ], [ true, %8 ]
  ret i1 %25
}

declare zeroext i1 @_ZN7content27GestureEventStreamValidator8ValidateERKN5blink15WebGestureEventEPNSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEE(%"class.content::GestureEventStreamValidator"*, %"class.blink::WebGestureEvent"* dereferenceable(112), %"class.std::__1::basic_string"*) local_unnamed_addr #1

declare zeroext i1 @_ZN7content25TouchEventStreamValidator8ValidateERKN5blink13WebTouchEventEPNSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEE(%"class.content::TouchEventStreamValidator"*, %"class.blink::WebTouchEvent"* dereferenceable(1272), %"class.std::__1::basic_string"*) local_unnamed_addr #1

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #4

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #5

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { norecurse nounwind readnone ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { argmemonly nounwind }
attributes #6 = { nounwind }
attributes #7 = { builtin nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
