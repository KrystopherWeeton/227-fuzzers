; ModuleID = '../../third_party/angle/src/compiler/translator/tree_ops/gl/UseInterfaceBlockFields.cpp'
source_filename = "../../third_party/angle/src/compiler/translator/tree_ops/gl/UseInterfaceBlockFields.cpp"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.sh::TCompiler" = type { %"class.sh::TShHandleBase", %"class.std::__1::vector.1", %"class.std::__1::vector.1", %"class.std::__1::vector.1", %"class.std::__1::vector.1", %"class.std::__1::vector.1", %"class.std::__1::vector.1", %"class.std::__1::vector.8", %"class.std::__1::vector.8", %"class.std::__1::vector.8", %"struct.sh::ValidateASTOptions", %"class.angle::BitSetT", i8, i8, i32, i32, i32, %"class.sh::CallDAG", %"class.std::__1::vector.59", %struct.ShBuiltInResources, %"class.std::__1::basic_string", %"class.sh::TSymbolTable", %"class.std::__1::map.90", %"class.sh::ArrayBoundsClamper", %"class.sh::BuiltInFunctionEmulator", i32, %"class.sh::TInfoSink", %"class.sh::TDiagnostics", i8*, i8, i8, i8, %"struct.sh::WorkGroupSize", i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %"class.std::__1::map.124", %struct.TPragma, i64 }
%"class.sh::TShHandleBase" = type { i32 (...)**, %"class.angle::PoolAllocator" }
%"class.angle::PoolAllocator" = type <{ i64, i64, i64, i64, i64, %"struct.angle::PoolAllocator::Header"*, %"struct.angle::PoolAllocator::Header"*, %"class.std::__1::vector", i32, [4 x i8], i64, i8, [7 x i8] }>
%"struct.angle::PoolAllocator::Header" = type { %"struct.angle::PoolAllocator::Header"*, i64 }
%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { %"struct.angle::PoolAllocator::AllocState"*, %"struct.angle::PoolAllocator::AllocState"*, %"class.std::__1::__compressed_pair" }
%"struct.angle::PoolAllocator::AllocState" = type { i64, %"struct.angle::PoolAllocator::Header"* }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %"struct.angle::PoolAllocator::AllocState"* }
%"class.std::__1::vector.1" = type { %"class.std::__1::__vector_base.2" }
%"class.std::__1::__vector_base.2" = type { %"struct.sh::ShaderVariable"*, %"struct.sh::ShaderVariable"*, %"class.std::__1::__compressed_pair.3" }
%"struct.sh::ShaderVariable" = type { i32, i32, %"class.std::__1::basic_string", %"class.std::__1::basic_string", %"class.std::__1::vector.117", i8, i8, %"class.std::__1::vector.1", %"class.std::__1::basic_string", %"class.std::__1::basic_string", i8, i32, i8, i32, i32, i32, i8, i8, i8, i32, i8, i32, i8, i8, i8, i8, i32 }
%"class.std::__1::vector.117" = type { %"class.std::__1::__vector_base.118" }
%"class.std::__1::__vector_base.118" = type { i32*, i32*, %"class.std::__1::__compressed_pair.119" }
%"class.std::__1::__compressed_pair.119" = type { %"struct.std::__1::__compressed_pair_elem.120" }
%"struct.std::__1::__compressed_pair_elem.120" = type { i32* }
%"class.std::__1::__compressed_pair.3" = type { %"struct.std::__1::__compressed_pair_elem.4" }
%"struct.std::__1::__compressed_pair_elem.4" = type { %"struct.sh::ShaderVariable"* }
%"class.std::__1::vector.8" = type { %"class.std::__1::__vector_base.9" }
%"class.std::__1::__vector_base.9" = type { %"struct.sh::InterfaceBlock"*, %"struct.sh::InterfaceBlock"*, %"class.std::__1::__compressed_pair.15" }
%"struct.sh::InterfaceBlock" = type { %"class.std::__1::basic_string", %"class.std::__1::basic_string", %"class.std::__1::basic_string", i32, i32, i8, i32, i8, i8, i32, %"class.std::__1::vector.1" }
%"class.std::__1::__compressed_pair.15" = type { %"struct.std::__1::__compressed_pair_elem.16" }
%"struct.std::__1::__compressed_pair_elem.16" = type { %"struct.sh::InterfaceBlock"* }
%"struct.sh::ValidateASTOptions" = type { i8, i8, i8, i8, i8, i8, i8, i8, i8, i8 }
%"class.angle::BitSetT" = type { i32 }
%"class.sh::CallDAG" = type { %"class.std::__1::vector.20", %"class.std::__1::map" }
%"class.std::__1::vector.20" = type { %"class.std::__1::__vector_base.21" }
%"class.std::__1::__vector_base.21" = type { %"struct.sh::CallDAG::Record"*, %"struct.sh::CallDAG::Record"*, %"class.std::__1::__compressed_pair.46" }
%"struct.sh::CallDAG::Record" = type { %"class.sh::TIntermFunctionDefinition"*, %"class.std::__1::vector.39" }
%"class.sh::TIntermFunctionDefinition" = type { %"class.sh::TIntermNode", %"class.sh::TIntermFunctionPrototype"*, %"class.sh::TIntermBlock"* }
%"class.sh::TIntermNode" = type { i32 (...)**, %"struct.sh::TSourceLoc" }
%"struct.sh::TSourceLoc" = type { i32, i32, i32, i32 }
%"class.sh::TIntermFunctionPrototype" = type { %"class.sh::TIntermTyped", %"class.sh::TFunction"* }
%"class.sh::TIntermTyped" = type { %"class.sh::TIntermNode" }
%"class.sh::TFunction" = type <{ %"class.sh::TSymbol.base", i8, %"class.sh::TVector"*, %"class.sh::TVariable"**, i64, %"class.sh::TType"*, %"class.sh::ImmutableString", i8, i8, i8, i8, [4 x i8] }>
%"class.sh::TSymbol.base" = type <{ %"class.sh::ImmutableString", %"class.sh::TSymbolUniqueId", i8, i8, i8 }>
%"class.sh::TSymbolUniqueId" = type { i32 }
%"class.sh::TVector" = type opaque
%"class.sh::TVariable" = type { %"class.sh::TSymbol.base", %"class.sh::TType"*, %"class.sh::TConstantUnion"* }
%"class.sh::TConstantUnion" = type { %union.anon.30, i32 }
%union.anon.30 = type { i32 }
%"class.sh::TType" = type { i32, i32, i32, i8, i8, %"struct.sh::TMemoryQualifier", i8, %"struct.sh::TLayoutQualifier", i8, i8, %"class.sh::TSpan", %"class.sh::TVector.22"*, %"class.sh::TInterfaceBlock"*, %"class.sh::TStructure"*, i8, i64, i8* }
%"struct.sh::TMemoryQualifier" = type { i8, i8, i8, i8, i8 }
%"struct.sh::TLayoutQualifier" = type <{ i32, i32, i32, i32, %"struct.sh::WorkGroupSize", i32, i32, i32, i32, i8, i8, [2 x i8], i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i8, [3 x i8] }>
%"class.sh::TSpan" = type { i32*, i64 }
%"class.sh::TVector.22" = type opaque
%"class.sh::TInterfaceBlock" = type { %"class.sh::TSymbol.base", %"class.sh::TFieldListCollection", i32, i32 }
%"class.sh::TFieldListCollection" = type { %"class.sh::TVector.23"*, i64, i32, %"class.std::__1::basic_string.24" }
%"class.sh::TVector.23" = type opaque
%"class.std::__1::basic_string.24" = type { %"class.std::__1::__compressed_pair.25" }
%"class.std::__1::__compressed_pair.25" = type { %"struct.std::__1::__compressed_pair_elem.26" }
%"struct.std::__1::__compressed_pair_elem.26" = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, pool_allocator<char> >::__rep" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, pool_allocator<char> >::__rep" = type { %union.anon.27 }
%union.anon.27 = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, pool_allocator<char> >::__long" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, pool_allocator<char> >::__long" = type { i8*, i64, i64 }
%"class.sh::TStructure" = type <{ %"class.sh::TSymbol.base", i8, %"class.sh::TFieldListCollection", i8, [7 x i8] }>
%"class.sh::ImmutableString" = type { i8*, i64 }
%"class.std::__1::vector.39" = type { %"class.std::__1::__vector_base.40" }
%"class.std::__1::__vector_base.40" = type { i32*, i32*, %"class.std::__1::__compressed_pair.41" }
%"class.std::__1::__compressed_pair.41" = type { %"struct.std::__1::__compressed_pair_elem.42" }
%"struct.std::__1::__compressed_pair_elem.42" = type { i32* }
%"class.std::__1::__compressed_pair.46" = type { %"struct.std::__1::__compressed_pair_elem.47" }
%"struct.std::__1::__compressed_pair_elem.47" = type { %"struct.sh::CallDAG::Record"* }
%"class.std::__1::map" = type { %"class.std::__1::__tree" }
%"class.std::__1::__tree" = type { %"class.std::__1::__tree_end_node"*, %"class.std::__1::__compressed_pair.51", %"class.std::__1::__compressed_pair.56" }
%"class.std::__1::__tree_end_node" = type { %"class.std::__1::__tree_node_base"* }
%"class.std::__1::__tree_node_base" = type <{ %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_end_node"*, i8, [7 x i8] }>
%"class.std::__1::__compressed_pair.51" = type { %"struct.std::__1::__compressed_pair_elem.52" }
%"struct.std::__1::__compressed_pair_elem.52" = type { %"class.std::__1::__tree_end_node" }
%"class.std::__1::__compressed_pair.56" = type { %"struct.std::__1::__compressed_pair_elem.57" }
%"struct.std::__1::__compressed_pair_elem.57" = type { i64 }
%"class.std::__1::vector.59" = type { %"class.std::__1::__vector_base.60" }
%"class.std::__1::__vector_base.60" = type { %"struct.sh::TCompiler::FunctionMetadata"*, %"struct.sh::TCompiler::FunctionMetadata"*, %"class.std::__1::__compressed_pair.61" }
%"struct.sh::TCompiler::FunctionMetadata" = type { i8 }
%"class.std::__1::__compressed_pair.61" = type { %"struct.std::__1::__compressed_pair_elem.62" }
%"struct.std::__1::__compressed_pair_elem.62" = type { %"struct.sh::TCompiler::FunctionMetadata"* }
%struct.ShBuiltInResources = type { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i64 (i8*, i64)*, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %"struct.std::__1::array", %"struct.std::__1::array", i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, float, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }
%"struct.std::__1::array" = type { [3 x i32] }
%"class.std::__1::basic_string" = type { %"class.std::__1::__compressed_pair.10" }
%"class.std::__1::__compressed_pair.10" = type { %"struct.std::__1::__compressed_pair_elem.11" }
%"struct.std::__1::__compressed_pair_elem.11" = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" = type { %union.anon }
%union.anon = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" = type { i8*, i64, i64 }
%"class.sh::TSymbolTable" = type { %"class.sh::TSymbolTableBase", %"class.std::__1::vector.66", %"class.std::__1::vector.73", i8, i32, i32, i32, %struct.ShBuiltInResources, %"class.std::__1::map.81", %"class.sh::TVariable"* }
%"class.sh::TSymbolTableBase" = type { %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"* }
%"class.sh::TSymbol" = type <{ %"class.sh::ImmutableString", %"class.sh::TSymbolUniqueId", i8, i8, i8, i8 }>
%"class.std::__1::vector.66" = type { %"class.std::__1::__vector_base.67" }
%"class.std::__1::__vector_base.67" = type { %"class.std::__1::unique_ptr"*, %"class.std::__1::unique_ptr"*, %"class.std::__1::__compressed_pair.68" }
%"class.std::__1::unique_ptr" = type opaque
%"class.std::__1::__compressed_pair.68" = type { %"struct.std::__1::__compressed_pair_elem.69" }
%"struct.std::__1::__compressed_pair_elem.69" = type { %"class.std::__1::unique_ptr"* }
%"class.std::__1::vector.73" = type { %"class.std::__1::__vector_base.74" }
%"class.std::__1::__vector_base.74" = type { %"class.std::__1::unique_ptr.75"*, %"class.std::__1::unique_ptr.75"*, %"class.std::__1::__compressed_pair.76" }
%"class.std::__1::unique_ptr.75" = type opaque
%"class.std::__1::__compressed_pair.76" = type { %"struct.std::__1::__compressed_pair_elem.77" }
%"struct.std::__1::__compressed_pair_elem.77" = type { %"class.std::__1::unique_ptr.75"* }
%"class.std::__1::map.81" = type { %"class.std::__1::__tree.82" }
%"class.std::__1::__tree.82" = type { %"class.std::__1::__tree_end_node"*, %"class.std::__1::__compressed_pair.83", %"class.std::__1::__compressed_pair.87" }
%"class.std::__1::__compressed_pair.83" = type { %"struct.std::__1::__compressed_pair_elem.52" }
%"class.std::__1::__compressed_pair.87" = type { %"struct.std::__1::__compressed_pair_elem.57" }
%"class.std::__1::map.90" = type { %"class.std::__1::__tree.91" }
%"class.std::__1::__tree.91" = type { %"class.std::__1::__tree_end_node"*, %"class.std::__1::__compressed_pair.92", %"class.std::__1::__compressed_pair.96" }
%"class.std::__1::__compressed_pair.92" = type { %"struct.std::__1::__compressed_pair_elem.52" }
%"class.std::__1::__compressed_pair.96" = type { %"struct.std::__1::__compressed_pair_elem.57" }
%"class.sh::ArrayBoundsClamper" = type <{ i32, i8, [3 x i8] }>
%"class.sh::BuiltInFunctionEmulator" = type { %"class.std::__1::map.101", %"class.std::__1::map", %"class.std::__1::vector.39", %"class.std::__1::vector.110" }
%"class.std::__1::map.101" = type { %"class.std::__1::__tree.102" }
%"class.std::__1::__tree.102" = type { %"class.std::__1::__tree_end_node"*, %"class.std::__1::__compressed_pair.103", %"class.std::__1::__compressed_pair.107" }
%"class.std::__1::__compressed_pair.103" = type { %"struct.std::__1::__compressed_pair_elem.52" }
%"class.std::__1::__compressed_pair.107" = type { %"struct.std::__1::__compressed_pair_elem.57" }
%"class.std::__1::vector.110" = type { %"class.std::__1::__vector_base.111" }
%"class.std::__1::__vector_base.111" = type { i8* (i32)**, i8* (i32)**, %"class.std::__1::__compressed_pair.112" }
%"class.std::__1::__compressed_pair.112" = type { %"struct.std::__1::__compressed_pair_elem.113" }
%"struct.std::__1::__compressed_pair_elem.113" = type { i8* (i32)** }
%"class.sh::TInfoSink" = type { %"class.sh::TInfoSinkBase", %"class.sh::TInfoSinkBase", %"class.sh::TInfoSinkBase" }
%"class.sh::TInfoSinkBase" = type { %"class.std::__1::basic_string", %"class.std::__1::vector.117" }
%"class.sh::TDiagnostics" = type { %"class.angle::pp::Diagnostics", %"class.sh::TInfoSinkBase"*, i32, i32 }
%"class.angle::pp::Diagnostics" = type { i32 (...)** }
%"struct.sh::WorkGroupSize" = type { [3 x i32] }
%"class.std::__1::map.124" = type { %"class.std::__1::__tree.125" }
%"class.std::__1::__tree.125" = type { %"class.std::__1::__tree_end_node"*, %"class.std::__1::__compressed_pair.126", %"class.std::__1::__compressed_pair.130" }
%"class.std::__1::__compressed_pair.126" = type { %"struct.std::__1::__compressed_pair_elem.52" }
%"class.std::__1::__compressed_pair.130" = type { %"struct.std::__1::__compressed_pair_elem.57" }
%struct.TPragma = type { i8, i8, i8, %"struct.TPragma::STDGL" }
%"struct.TPragma::STDGL" = type { i8 }
%"class.sh::TIntermBlock" = type <{ %"class.sh::TIntermNode", %"class.sh::TIntermAggregateBase", %"class.sh::TVector.31", i8, [7 x i8] }>
%"class.sh::TIntermAggregateBase" = type { i32 (...)** }
%"class.sh::TVector.31" = type { %"class.std::__1::vector.32" }
%"class.std::__1::vector.32" = type { %"class.std::__1::__vector_base.33" }
%"class.std::__1::__vector_base.33" = type { %"class.sh::TIntermNode"**, %"class.sh::TIntermNode"**, %"class.std::__1::__compressed_pair.34" }
%"class.std::__1::__compressed_pair.34" = type { %"struct.std::__1::__compressed_pair_elem.35" }
%"struct.std::__1::__compressed_pair_elem.35" = type { %"class.sh::TIntermNode"** }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short" = type { [23 x i8], %struct.anon }
%struct.anon = type { i8 }
%"class.sh::TIntermSymbol" = type { %"class.sh::TIntermTyped", %"class.sh::TVariable"* }
%"class.sh::TIntermBinary" = type <{ %"class.sh::TIntermOperator.base", [7 x i8], %"class.sh::TIntermTyped"*, %"class.sh::TIntermTyped"*, i8, [7 x i8] }>
%"class.sh::TIntermOperator.base" = type <{ %"class.sh::TIntermExpression", i8 }>
%"class.sh::TIntermExpression" = type { %"class.sh::TIntermTyped", %"class.sh::TType" }
%"class.sh::TIntermConstantUnion" = type { %"class.sh::TIntermExpression", %"class.sh::TConstantUnion"* }
%"class.std::__1::__vector_base_common" = type { i8 }

$_ZNSt3__16vectorIPN2sh11TIntermNodeE14pool_allocatorIS3_EE6insertENS_11__wrap_iterIPKS3_EEOS3_ = comdat any

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN2sh23UseInterfaceBlockFieldsEPNS_9TCompilerEPNS_12TIntermBlockERKNSt3__16vectorINS_14InterfaceBlockENS4_9allocatorIS6_EEEERKNS_12TSymbolTableE(%"class.sh::TCompiler"*, %"class.sh::TIntermBlock"*, %"class.std::__1::vector.8"* nocapture readonly dereferenceable(24), %"class.sh::TSymbolTable"* dereferenceable(1720)) local_unnamed_addr #0 {
  %5 = alloca %"class.sh::ImmutableString", align 8
  %6 = alloca %"class.sh::ImmutableString", align 8
  %7 = alloca %"class.sh::ImmutableString", align 8
  %8 = tail call %"class.sh::TIntermBlock"* @_ZN2sh12FindMainBodyEPNS_12TIntermBlockE(%"class.sh::TIntermBlock"* %1) #4
  %9 = bitcast %"class.sh::TIntermBlock"* %8 to %"class.sh::TVector.31"* (%"class.sh::TIntermBlock"*)***
  %10 = load %"class.sh::TVector.31"* (%"class.sh::TIntermBlock"*)**, %"class.sh::TVector.31"* (%"class.sh::TIntermBlock"*)*** %9, align 8
  %11 = getelementptr inbounds %"class.sh::TVector.31"* (%"class.sh::TIntermBlock"*)*, %"class.sh::TVector.31"* (%"class.sh::TIntermBlock"*)** %10, i64 27
  %12 = load %"class.sh::TVector.31"* (%"class.sh::TIntermBlock"*)*, %"class.sh::TVector.31"* (%"class.sh::TIntermBlock"*)** %11, align 8
  %13 = tail call %"class.sh::TVector.31"* %12(%"class.sh::TIntermBlock"* %8) #4
  %14 = getelementptr inbounds %"class.std::__1::vector.8", %"class.std::__1::vector.8"* %2, i64 0, i32 0, i32 0
  %15 = load %"struct.sh::InterfaceBlock"*, %"struct.sh::InterfaceBlock"** %14, align 8
  %16 = getelementptr inbounds %"class.std::__1::vector.8", %"class.std::__1::vector.8"* %2, i64 0, i32 0, i32 1
  %17 = load %"struct.sh::InterfaceBlock"*, %"struct.sh::InterfaceBlock"** %16, align 8
  %18 = icmp eq %"struct.sh::InterfaceBlock"* %15, %17
  br i1 %18, label %140, label %19

19:                                               ; preds = %4
  %20 = bitcast %"class.sh::ImmutableString"* %6 to i8*
  %21 = getelementptr inbounds %"class.sh::ImmutableString", %"class.sh::ImmutableString"* %6, i64 0, i32 0
  %22 = getelementptr inbounds %"class.sh::ImmutableString", %"class.sh::ImmutableString"* %6, i64 0, i32 1
  %23 = bitcast %"class.sh::ImmutableString"* %7 to i8*
  %24 = getelementptr inbounds %"class.sh::ImmutableString", %"class.sh::ImmutableString"* %7, i64 0, i32 0
  %25 = getelementptr inbounds %"class.sh::ImmutableString", %"class.sh::ImmutableString"* %7, i64 0, i32 1
  %26 = bitcast %"class.sh::ImmutableString"* %5 to i8*
  %27 = getelementptr inbounds %"class.sh::ImmutableString", %"class.sh::ImmutableString"* %5, i64 0, i32 0
  %28 = getelementptr inbounds %"class.sh::ImmutableString", %"class.sh::ImmutableString"* %5, i64 0, i32 1
  br label %29

29:                                               ; preds = %137, %19
  %30 = phi %"struct.sh::InterfaceBlock"* [ %15, %19 ], [ %138, %137 ]
  %31 = getelementptr inbounds %"struct.sh::InterfaceBlock", %"struct.sh::InterfaceBlock"* %30, i64 0, i32 2
  %32 = bitcast %"class.std::__1::basic_string"* %31 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %33 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %32, i64 0, i32 1, i32 0
  %34 = load i8, i8* %33, align 1
  %35 = icmp slt i8 %34, 0
  br i1 %35, label %36, label %39

36:                                               ; preds = %29
  %37 = getelementptr inbounds %"struct.sh::InterfaceBlock", %"struct.sh::InterfaceBlock"* %30, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %38 = load i64, i64* %37, align 8
  br label %41

39:                                               ; preds = %29
  %40 = zext i8 %34 to i64
  br label %41

41:                                               ; preds = %39, %36
  %42 = phi i64 [ %38, %36 ], [ %40, %39 ]
  %43 = icmp eq i64 %42, 0
  br i1 %43, label %44, label %77

44:                                               ; preds = %41
  %45 = getelementptr inbounds %"struct.sh::InterfaceBlock", %"struct.sh::InterfaceBlock"* %30, i64 0, i32 10, i32 0, i32 0
  %46 = load %"struct.sh::ShaderVariable"*, %"struct.sh::ShaderVariable"** %45, align 8
  %47 = getelementptr inbounds %"struct.sh::InterfaceBlock", %"struct.sh::InterfaceBlock"* %30, i64 0, i32 10, i32 0, i32 1
  %48 = load %"struct.sh::ShaderVariable"*, %"struct.sh::ShaderVariable"** %47, align 8
  %49 = icmp eq %"struct.sh::ShaderVariable"* %46, %48
  br i1 %49, label %137, label %50

50:                                               ; preds = %44, %50
  %51 = phi %"struct.sh::ShaderVariable"* [ %75, %50 ], [ %46, %44 ]
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %26) #4
  %52 = getelementptr inbounds %"struct.sh::ShaderVariable", %"struct.sh::ShaderVariable"* %51, i64 0, i32 2
  %53 = bitcast %"class.std::__1::basic_string"* %52 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %54 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %53, i64 0, i32 1, i32 0
  %55 = load i8, i8* %54, align 1
  %56 = icmp slt i8 %55, 0
  %57 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %52, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %58 = load i8*, i8** %57, align 8
  %59 = getelementptr inbounds %"struct.sh::ShaderVariable", %"struct.sh::ShaderVariable"* %51, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %60 = load i64, i64* %59, align 8
  %61 = bitcast %"class.std::__1::basic_string"* %52 to i8*
  %62 = zext i8 %55 to i64
  %63 = select i1 %56, i8* %58, i8* %61
  %64 = select i1 %56, i64 %60, i64 %62
  %65 = add i64 %64, 1
  %66 = call %"class.angle::PoolAllocator"* @_Z22GetGlobalPoolAllocatorv() #4
  %67 = call i8* @_ZN5angle13PoolAllocator8allocateEm(%"class.angle::PoolAllocator"* %66, i64 %65) #4
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %67, i8* align 1 %63, i64 %65, i1 false) #4
  store i8* %67, i8** %27, align 8
  %68 = load i8, i8* %54, align 1
  %69 = icmp slt i8 %68, 0
  %70 = load i64, i64* %59, align 8
  %71 = zext i8 %68 to i64
  %72 = select i1 %69, i64 %70, i64 %71
  store i64 %72, i64* %28, align 8
  %73 = call %"class.sh::TIntermSymbol"* @_ZN2sh23ReferenceGlobalVariableERKNS_15ImmutableStringERKNS_12TSymbolTableE(%"class.sh::ImmutableString"* nonnull dereferenceable(16) %5, %"class.sh::TSymbolTable"* dereferenceable(1720) %3) #4
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %26) #4
  %74 = getelementptr inbounds %"class.sh::TIntermSymbol", %"class.sh::TIntermSymbol"* %73, i64 0, i32 0
  call fastcc void @_ZN2sh12_GLOBAL__N_120AddNodeUseStatementsEPNS_12TIntermTypedEPNS_7TVectorIPNS_11TIntermNodeEEE(%"class.sh::TIntermTyped"* %74, %"class.sh::TVector.31"* %13) #4
  %75 = getelementptr inbounds %"struct.sh::ShaderVariable", %"struct.sh::ShaderVariable"* %51, i64 1
  %76 = icmp eq %"struct.sh::ShaderVariable"* %75, %48
  br i1 %76, label %137, label %50

77:                                               ; preds = %41
  %78 = getelementptr inbounds %"struct.sh::InterfaceBlock", %"struct.sh::InterfaceBlock"* %30, i64 0, i32 3
  %79 = load i32, i32* %78, align 8
  %80 = icmp eq i32 %79, 0
  br i1 %80, label %118, label %81

81:                                               ; preds = %77
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %20) #4
  %82 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %31, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %83 = load i8*, i8** %82, align 8
  %84 = getelementptr inbounds %"struct.sh::InterfaceBlock", %"struct.sh::InterfaceBlock"* %30, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %85 = load i64, i64* %84, align 8
  %86 = bitcast %"class.std::__1::basic_string"* %31 to i8*
  %87 = zext i8 %34 to i64
  %88 = select i1 %35, i8* %83, i8* %86
  %89 = select i1 %35, i64 %85, i64 %87
  %90 = add i64 %89, 1
  %91 = call %"class.angle::PoolAllocator"* @_Z22GetGlobalPoolAllocatorv() #4
  %92 = call i8* @_ZN5angle13PoolAllocator8allocateEm(%"class.angle::PoolAllocator"* %91, i64 %90) #4
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %92, i8* align 1 %88, i64 %90, i1 false) #4
  store i8* %92, i8** %21, align 8
  %93 = load i8, i8* %33, align 1
  %94 = icmp slt i8 %93, 0
  %95 = load i64, i64* %84, align 8
  %96 = zext i8 %93 to i64
  %97 = select i1 %94, i64 %95, i64 %96
  store i64 %97, i64* %22, align 8
  %98 = call %"class.sh::TIntermSymbol"* @_ZN2sh23ReferenceGlobalVariableERKNS_15ImmutableStringERKNS_12TSymbolTableE(%"class.sh::ImmutableString"* nonnull dereferenceable(16) %6, %"class.sh::TSymbolTable"* dereferenceable(1720) %3) #4
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %20) #4
  %99 = load i32, i32* %78, align 8
  %100 = icmp eq i32 %99, 0
  br i1 %100, label %137, label %101

101:                                              ; preds = %81
  %102 = bitcast %"class.sh::TIntermSymbol"* %98 to %"class.sh::TIntermTyped"* (%"class.sh::TIntermSymbol"*)***
  br label %103

103:                                              ; preds = %103, %101
  %104 = phi i32 [ 0, %101 ], [ %115, %103 ]
  %105 = call %"class.angle::PoolAllocator"* @_Z22GetGlobalPoolAllocatorv() #4
  %106 = call i8* @_ZN5angle13PoolAllocator8allocateEm(%"class.angle::PoolAllocator"* %105, i64 240) #4
  %107 = bitcast i8* %106 to %"class.sh::TIntermBinary"*
  %108 = load %"class.sh::TIntermTyped"* (%"class.sh::TIntermSymbol"*)**, %"class.sh::TIntermTyped"* (%"class.sh::TIntermSymbol"*)*** %102, align 8
  %109 = getelementptr inbounds %"class.sh::TIntermTyped"* (%"class.sh::TIntermSymbol"*)*, %"class.sh::TIntermTyped"* (%"class.sh::TIntermSymbol"*)** %108, i64 23
  %110 = load %"class.sh::TIntermTyped"* (%"class.sh::TIntermSymbol"*)*, %"class.sh::TIntermTyped"* (%"class.sh::TIntermSymbol"*)** %109, align 8
  %111 = call %"class.sh::TIntermTyped"* %110(%"class.sh::TIntermSymbol"* %98) #4
  %112 = call %"class.sh::TIntermConstantUnion"* @_ZN2sh15CreateIndexNodeEi(i32 %104) #4
  %113 = getelementptr inbounds %"class.sh::TIntermConstantUnion", %"class.sh::TIntermConstantUnion"* %112, i64 0, i32 0, i32 0
  call void @_ZN2sh13TIntermBinaryC1E9TOperatorPNS_12TIntermTypedES3_(%"class.sh::TIntermBinary"* %107, i8 zeroext 44, %"class.sh::TIntermTyped"* %111, %"class.sh::TIntermTyped"* %113) #4
  %114 = bitcast i8* %106 to %"class.sh::TIntermTyped"*
  call fastcc void @_ZN2sh12_GLOBAL__N_113InsertUseCodeERKNS_14InterfaceBlockEPNS_12TIntermTypedEPNS_7TVectorIPNS_11TIntermNodeEEE(%"struct.sh::InterfaceBlock"* dereferenceable(120) %30, %"class.sh::TIntermTyped"* %114, %"class.sh::TVector.31"* %13) #4
  %115 = add nuw i32 %104, 1
  %116 = load i32, i32* %78, align 8
  %117 = icmp ult i32 %115, %116
  br i1 %117, label %103, label %137

118:                                              ; preds = %77
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %23) #4
  %119 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %31, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %120 = load i8*, i8** %119, align 8
  %121 = getelementptr inbounds %"struct.sh::InterfaceBlock", %"struct.sh::InterfaceBlock"* %30, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %122 = load i64, i64* %121, align 8
  %123 = bitcast %"class.std::__1::basic_string"* %31 to i8*
  %124 = zext i8 %34 to i64
  %125 = select i1 %35, i8* %120, i8* %123
  %126 = select i1 %35, i64 %122, i64 %124
  %127 = add i64 %126, 1
  %128 = call %"class.angle::PoolAllocator"* @_Z22GetGlobalPoolAllocatorv() #4
  %129 = call i8* @_ZN5angle13PoolAllocator8allocateEm(%"class.angle::PoolAllocator"* %128, i64 %127) #4
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %129, i8* align 1 %125, i64 %127, i1 false) #4
  store i8* %129, i8** %24, align 8
  %130 = load i8, i8* %33, align 1
  %131 = icmp slt i8 %130, 0
  %132 = load i64, i64* %121, align 8
  %133 = zext i8 %130 to i64
  %134 = select i1 %131, i64 %132, i64 %133
  store i64 %134, i64* %25, align 8
  %135 = call %"class.sh::TIntermSymbol"* @_ZN2sh23ReferenceGlobalVariableERKNS_15ImmutableStringERKNS_12TSymbolTableE(%"class.sh::ImmutableString"* nonnull dereferenceable(16) %7, %"class.sh::TSymbolTable"* dereferenceable(1720) %3) #4
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %23) #4
  %136 = getelementptr inbounds %"class.sh::TIntermSymbol", %"class.sh::TIntermSymbol"* %135, i64 0, i32 0
  call fastcc void @_ZN2sh12_GLOBAL__N_113InsertUseCodeERKNS_14InterfaceBlockEPNS_12TIntermTypedEPNS_7TVectorIPNS_11TIntermNodeEEE(%"struct.sh::InterfaceBlock"* dereferenceable(120) %30, %"class.sh::TIntermTyped"* %136, %"class.sh::TVector.31"* %13) #4
  br label %137

137:                                              ; preds = %103, %50, %118, %81, %44
  %138 = getelementptr inbounds %"struct.sh::InterfaceBlock", %"struct.sh::InterfaceBlock"* %30, i64 1
  %139 = icmp eq %"struct.sh::InterfaceBlock"* %138, %17
  br i1 %139, label %140, label %29

140:                                              ; preds = %137, %4
  %141 = getelementptr inbounds %"class.sh::TIntermBlock", %"class.sh::TIntermBlock"* %1, i64 0, i32 0
  %142 = call zeroext i1 @_ZN2sh9TCompiler11validateASTEPNS_11TIntermNodeE(%"class.sh::TCompiler"* %0, %"class.sh::TIntermNode"* %141) #4
  ret i1 %142
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

declare %"class.sh::TIntermBlock"* @_ZN2sh12FindMainBodyEPNS_12TIntermBlockE(%"class.sh::TIntermBlock"*) local_unnamed_addr #2

declare zeroext i1 @_ZN2sh9TCompiler11validateASTEPNS_11TIntermNodeE(%"class.sh::TCompiler"*, %"class.sh::TIntermNode"*) local_unnamed_addr #2

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

declare %"class.sh::TIntermSymbol"* @_ZN2sh23ReferenceGlobalVariableERKNS_15ImmutableStringERKNS_12TSymbolTableE(%"class.sh::ImmutableString"* dereferenceable(16), %"class.sh::TSymbolTable"* dereferenceable(1720)) local_unnamed_addr #2

declare %"class.sh::TIntermConstantUnion"* @_ZN2sh15CreateIndexNodeEi(i32) local_unnamed_addr #2

declare void @_ZN2sh13TIntermBinaryC1E9TOperatorPNS_12TIntermTypedES3_(%"class.sh::TIntermBinary"*, i8 zeroext, %"class.sh::TIntermTyped"*, %"class.sh::TIntermTyped"*) unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define internal fastcc void @_ZN2sh12_GLOBAL__N_113InsertUseCodeERKNS_14InterfaceBlockEPNS_12TIntermTypedEPNS_7TVectorIPNS_11TIntermNodeEEE(%"struct.sh::InterfaceBlock"* nocapture readonly dereferenceable(120), %"class.sh::TIntermTyped"*, %"class.sh::TVector.31"*) unnamed_addr #0 {
  %4 = alloca %"class.sh::TIntermNode"*, align 8
  %5 = getelementptr inbounds %"struct.sh::InterfaceBlock", %"struct.sh::InterfaceBlock"* %0, i64 0, i32 10
  %6 = getelementptr inbounds %"struct.sh::InterfaceBlock", %"struct.sh::InterfaceBlock"* %0, i64 0, i32 10, i32 0, i32 1
  %7 = bitcast %"struct.sh::ShaderVariable"** %6 to i64*
  %8 = load i64, i64* %7, align 8
  %9 = bitcast %"class.std::__1::vector.1"* %5 to i64*
  %10 = load i64, i64* %9, align 8
  %11 = icmp eq i64 %8, %10
  br i1 %11, label %18, label %12

12:                                               ; preds = %3
  %13 = bitcast %"class.sh::TIntermTyped"* %1 to %"class.sh::TIntermTyped"* (%"class.sh::TIntermTyped"*)***
  %14 = getelementptr inbounds %"class.sh::TVector.31", %"class.sh::TVector.31"* %2, i64 0, i32 0
  %15 = getelementptr inbounds %"class.sh::TVector.31", %"class.sh::TVector.31"* %2, i64 0, i32 0, i32 0, i32 0
  %16 = bitcast %"class.sh::TIntermNode"** %4 to i8*
  %17 = bitcast %"class.sh::TIntermNode"** %4 to i8**
  br label %19

18:                                               ; preds = %19, %3
  ret void

19:                                               ; preds = %12, %19
  %20 = phi i32 [ 0, %12 ], [ %32, %19 ]
  %21 = call %"class.angle::PoolAllocator"* @_Z22GetGlobalPoolAllocatorv() #4
  %22 = call i8* @_ZN5angle13PoolAllocator8allocateEm(%"class.angle::PoolAllocator"* %21, i64 240) #4
  %23 = bitcast i8* %22 to %"class.sh::TIntermBinary"*
  %24 = load %"class.sh::TIntermTyped"* (%"class.sh::TIntermTyped"*)**, %"class.sh::TIntermTyped"* (%"class.sh::TIntermTyped"*)*** %13, align 8
  %25 = getelementptr inbounds %"class.sh::TIntermTyped"* (%"class.sh::TIntermTyped"*)*, %"class.sh::TIntermTyped"* (%"class.sh::TIntermTyped"*)** %24, i64 23
  %26 = load %"class.sh::TIntermTyped"* (%"class.sh::TIntermTyped"*)*, %"class.sh::TIntermTyped"* (%"class.sh::TIntermTyped"*)** %25, align 8
  %27 = call %"class.sh::TIntermTyped"* %26(%"class.sh::TIntermTyped"* %1) #4
  %28 = call %"class.sh::TIntermConstantUnion"* @_ZN2sh15CreateIndexNodeEi(i32 %20) #4
  %29 = getelementptr inbounds %"class.sh::TIntermConstantUnion", %"class.sh::TIntermConstantUnion"* %28, i64 0, i32 0, i32 0
  call void @_ZN2sh13TIntermBinaryC1E9TOperatorPNS_12TIntermTypedES3_(%"class.sh::TIntermBinary"* %23, i8 zeroext 47, %"class.sh::TIntermTyped"* %27, %"class.sh::TIntermTyped"* %29) #4
  %30 = load %"class.sh::TIntermNode"**, %"class.sh::TIntermNode"*** %15, align 8
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %16) #4
  store i8* %22, i8** %17, align 8
  %31 = call %"class.sh::TIntermNode"** @_ZNSt3__16vectorIPN2sh11TIntermNodeE14pool_allocatorIS3_EE6insertENS_11__wrap_iterIPKS3_EEOS3_(%"class.std::__1::vector.32"* %14, %"class.sh::TIntermNode"** %30, %"class.sh::TIntermNode"** nonnull dereferenceable(8) %4)
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %16) #4
  %32 = add i32 %20, 1
  %33 = zext i32 %32 to i64
  %34 = load i64, i64* %7, align 8
  %35 = load i64, i64* %9, align 8
  %36 = sub i64 %34, %35
  %37 = sdiv exact i64 %36, 208
  %38 = icmp ugt i64 %37, %33
  br i1 %38, label %19, label %18
}

; Function Attrs: nounwind ssp uwtable
define internal fastcc void @_ZN2sh12_GLOBAL__N_120AddNodeUseStatementsEPNS_12TIntermTypedEPNS_7TVectorIPNS_11TIntermNodeEEE(%"class.sh::TIntermTyped"*, %"class.sh::TVector.31"*) unnamed_addr #0 {
  %3 = alloca %"class.sh::TIntermNode"*, align 8
  %4 = bitcast %"class.sh::TIntermTyped"* %0 to %"class.sh::TType"* (%"class.sh::TIntermTyped"*)***
  %5 = load %"class.sh::TType"* (%"class.sh::TIntermTyped"*)**, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*** %4, align 8
  %6 = getelementptr inbounds %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)** %5, i64 31
  %7 = load %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)** %6, align 8
  %8 = tail call dereferenceable(184) %"class.sh::TType"* %7(%"class.sh::TIntermTyped"* %0) #4
  %9 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %8, i64 0, i32 10, i32 1
  %10 = load i64, i64* %9, align 8
  %11 = icmp eq i64 %10, 0
  br i1 %11, label %52, label %12

12:                                               ; preds = %2
  %13 = load %"class.sh::TType"* (%"class.sh::TIntermTyped"*)**, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*** %4, align 8
  %14 = getelementptr inbounds %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)** %13, i64 31
  %15 = load %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)** %14, align 8
  %16 = tail call dereferenceable(184) %"class.sh::TType"* %15(%"class.sh::TIntermTyped"* %0) #4
  %17 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %16, i64 0, i32 10, i32 0
  %18 = load i32*, i32** %17, align 8
  %19 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %16, i64 0, i32 10, i32 1
  %20 = load i64, i64* %19, align 8
  %21 = add i64 %20, -1
  %22 = getelementptr inbounds i32, i32* %18, i64 %21
  %23 = load i32, i32* %22, align 4
  %24 = icmp eq i32 %23, 0
  br i1 %24, label %59, label %25

25:                                               ; preds = %12
  %26 = bitcast %"class.sh::TIntermTyped"* %0 to %"class.sh::TIntermTyped"* (%"class.sh::TIntermTyped"*)***
  br label %27

27:                                               ; preds = %25, %27
  %28 = phi i32 [ 0, %25 ], [ %39, %27 ]
  %29 = tail call %"class.angle::PoolAllocator"* @_Z22GetGlobalPoolAllocatorv() #4
  %30 = tail call i8* @_ZN5angle13PoolAllocator8allocateEm(%"class.angle::PoolAllocator"* %29, i64 240) #4
  %31 = bitcast i8* %30 to %"class.sh::TIntermBinary"*
  %32 = load %"class.sh::TIntermTyped"* (%"class.sh::TIntermTyped"*)**, %"class.sh::TIntermTyped"* (%"class.sh::TIntermTyped"*)*** %26, align 8
  %33 = getelementptr inbounds %"class.sh::TIntermTyped"* (%"class.sh::TIntermTyped"*)*, %"class.sh::TIntermTyped"* (%"class.sh::TIntermTyped"*)** %32, i64 23
  %34 = load %"class.sh::TIntermTyped"* (%"class.sh::TIntermTyped"*)*, %"class.sh::TIntermTyped"* (%"class.sh::TIntermTyped"*)** %33, align 8
  %35 = tail call %"class.sh::TIntermTyped"* %34(%"class.sh::TIntermTyped"* %0) #4
  %36 = tail call %"class.sh::TIntermConstantUnion"* @_ZN2sh15CreateIndexNodeEi(i32 %28) #4
  %37 = getelementptr inbounds %"class.sh::TIntermConstantUnion", %"class.sh::TIntermConstantUnion"* %36, i64 0, i32 0, i32 0
  tail call void @_ZN2sh13TIntermBinaryC1E9TOperatorPNS_12TIntermTypedES3_(%"class.sh::TIntermBinary"* %31, i8 zeroext 44, %"class.sh::TIntermTyped"* %35, %"class.sh::TIntermTyped"* %37) #4
  %38 = bitcast i8* %30 to %"class.sh::TIntermTyped"*
  tail call fastcc void @_ZN2sh12_GLOBAL__N_120AddNodeUseStatementsEPNS_12TIntermTypedEPNS_7TVectorIPNS_11TIntermNodeEEE(%"class.sh::TIntermTyped"* %38, %"class.sh::TVector.31"* %1)
  %39 = add nuw i32 %28, 1
  %40 = load %"class.sh::TType"* (%"class.sh::TIntermTyped"*)**, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*** %4, align 8
  %41 = getelementptr inbounds %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)** %40, i64 31
  %42 = load %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)** %41, align 8
  %43 = tail call dereferenceable(184) %"class.sh::TType"* %42(%"class.sh::TIntermTyped"* %0) #4
  %44 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %43, i64 0, i32 10, i32 0
  %45 = load i32*, i32** %44, align 8
  %46 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %43, i64 0, i32 10, i32 1
  %47 = load i64, i64* %46, align 8
  %48 = add i64 %47, -1
  %49 = getelementptr inbounds i32, i32* %45, i64 %48
  %50 = load i32, i32* %49, align 4
  %51 = icmp ult i32 %39, %50
  br i1 %51, label %27, label %59

52:                                               ; preds = %2
  %53 = getelementptr inbounds %"class.sh::TVector.31", %"class.sh::TVector.31"* %1, i64 0, i32 0
  %54 = getelementptr inbounds %"class.sh::TVector.31", %"class.sh::TVector.31"* %1, i64 0, i32 0, i32 0, i32 0
  %55 = load %"class.sh::TIntermNode"**, %"class.sh::TIntermNode"*** %54, align 8
  %56 = bitcast %"class.sh::TIntermNode"** %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %56) #4
  %57 = getelementptr inbounds %"class.sh::TIntermTyped", %"class.sh::TIntermTyped"* %0, i64 0, i32 0
  store %"class.sh::TIntermNode"* %57, %"class.sh::TIntermNode"** %3, align 8
  %58 = call %"class.sh::TIntermNode"** @_ZNSt3__16vectorIPN2sh11TIntermNodeE14pool_allocatorIS3_EE6insertENS_11__wrap_iterIPKS3_EEOS3_(%"class.std::__1::vector.32"* %53, %"class.sh::TIntermNode"** %55, %"class.sh::TIntermNode"** nonnull dereferenceable(8) %3)
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %56) #4
  br label %59

59:                                               ; preds = %27, %12, %52
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden %"class.sh::TIntermNode"** @_ZNSt3__16vectorIPN2sh11TIntermNodeE14pool_allocatorIS3_EE6insertENS_11__wrap_iterIPKS3_EEOS3_(%"class.std::__1::vector.32"*, %"class.sh::TIntermNode"**, %"class.sh::TIntermNode"** dereferenceable(8)) local_unnamed_addr #0 comdat align 2 {
  %4 = ptrtoint %"class.sh::TIntermNode"** %1 to i64
  %5 = bitcast %"class.sh::TIntermNode"** %1 to i8*
  %6 = getelementptr inbounds %"class.std::__1::vector.32", %"class.std::__1::vector.32"* %0, i64 0, i32 0, i32 0
  %7 = getelementptr inbounds %"class.std::__1::vector.32", %"class.std::__1::vector.32"* %0, i64 0, i32 0, i32 1
  %8 = load %"class.sh::TIntermNode"**, %"class.sh::TIntermNode"*** %7, align 8
  %9 = getelementptr inbounds %"class.std::__1::vector.32", %"class.std::__1::vector.32"* %0, i64 0, i32 0, i32 2, i32 0, i32 0
  %10 = load %"class.sh::TIntermNode"**, %"class.sh::TIntermNode"*** %9, align 8
  %11 = icmp ult %"class.sh::TIntermNode"** %8, %10
  %12 = ptrtoint %"class.sh::TIntermNode"** %8 to i64
  %13 = ptrtoint %"class.sh::TIntermNode"** %10 to i64
  br i1 %11, label %14, label %164

14:                                               ; preds = %3
  %15 = icmp eq %"class.sh::TIntermNode"** %8, %1
  br i1 %15, label %16, label %23

16:                                               ; preds = %14
  %17 = bitcast %"class.sh::TIntermNode"** %2 to i64*
  %18 = load i64, i64* %17, align 8
  %19 = bitcast %"class.sh::TIntermNode"** %1 to i64*
  store i64 %18, i64* %19, align 8
  %20 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1, i64 1
  %21 = ptrtoint %"class.sh::TIntermNode"** %20 to i64
  %22 = bitcast %"class.sh::TIntermNode"*** %7 to i64*
  store i64 %21, i64* %22, align 8
  br label %578

23:                                               ; preds = %14
  %24 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1, i64 1
  %25 = ptrtoint %"class.sh::TIntermNode"** %24 to i64
  %26 = sub i64 %12, %25
  %27 = ashr exact i64 %26, 3
  %28 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1, i64 %27
  %29 = bitcast %"class.sh::TIntermNode"*** %7 to i64*
  %30 = icmp ult %"class.sh::TIntermNode"** %28, %8
  br i1 %30, label %31, label %144

31:                                               ; preds = %23
  %32 = sub nsw i64 0, %27
  %33 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %8, i64 %32
  %34 = bitcast %"class.sh::TIntermNode"** %33 to i8*
  %35 = xor i64 %4, -1
  %36 = getelementptr i8, i8* %34, i64 %35
  %37 = ptrtoint i8* %36 to i64
  %38 = lshr i64 %37, 3
  %39 = add nuw nsw i64 %38, 1
  %40 = icmp ult i64 %39, 4
  br i1 %40, label %41, label %44

41:                                               ; preds = %139, %44, %31
  %42 = phi %"class.sh::TIntermNode"** [ %8, %44 ], [ %8, %31 ], [ %62, %139 ]
  %43 = phi %"class.sh::TIntermNode"** [ %28, %44 ], [ %28, %31 ], [ %63, %139 ]
  br label %151

44:                                               ; preds = %31
  %45 = sub nsw i64 0, %27
  %46 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %8, i64 %45
  %47 = bitcast %"class.sh::TIntermNode"** %46 to i8*
  %48 = xor i64 %4, -1
  %49 = getelementptr i8, i8* %47, i64 %48
  %50 = ptrtoint i8* %49 to i64
  %51 = lshr i64 %50, 3
  %52 = add nuw nsw i64 %51, 1
  %53 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %8, i64 %52
  %54 = add nsw i64 %27, %51
  %55 = add nsw i64 %54, 1
  %56 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1, i64 %55
  %57 = icmp ult %"class.sh::TIntermNode"** %8, %56
  %58 = icmp ult %"class.sh::TIntermNode"** %28, %53
  %59 = and i1 %57, %58
  br i1 %59, label %41, label %60

60:                                               ; preds = %44
  %61 = and i64 %39, 4611686018427387900
  %62 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %8, i64 %61
  %63 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %28, i64 %61
  %64 = add nsw i64 %61, -4
  %65 = lshr exact i64 %64, 2
  %66 = add nuw nsw i64 %65, 1
  %67 = and i64 %66, 3
  %68 = icmp ult i64 %64, 12
  br i1 %68, label %120, label %69

69:                                               ; preds = %60
  %70 = sub nsw i64 %66, %67
  br label %71

71:                                               ; preds = %71, %69
  %72 = phi i64 [ 0, %69 ], [ %117, %71 ]
  %73 = phi i64 [ %70, %69 ], [ %118, %71 ]
  %74 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %8, i64 %72
  %75 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %28, i64 %72
  %76 = bitcast %"class.sh::TIntermNode"** %75 to <2 x i64>*
  %77 = load <2 x i64>, <2 x i64>* %76, align 8, !alias.scope !2
  %78 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %75, i64 2
  %79 = bitcast %"class.sh::TIntermNode"** %78 to <2 x i64>*
  %80 = load <2 x i64>, <2 x i64>* %79, align 8, !alias.scope !2
  %81 = bitcast %"class.sh::TIntermNode"** %74 to <2 x i64>*
  store <2 x i64> %77, <2 x i64>* %81, align 8, !alias.scope !5, !noalias !2
  %82 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %74, i64 2
  %83 = bitcast %"class.sh::TIntermNode"** %82 to <2 x i64>*
  store <2 x i64> %80, <2 x i64>* %83, align 8, !alias.scope !5, !noalias !2
  %84 = or i64 %72, 4
  %85 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %8, i64 %84
  %86 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %28, i64 %84
  %87 = bitcast %"class.sh::TIntermNode"** %86 to <2 x i64>*
  %88 = load <2 x i64>, <2 x i64>* %87, align 8, !alias.scope !2
  %89 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %86, i64 2
  %90 = bitcast %"class.sh::TIntermNode"** %89 to <2 x i64>*
  %91 = load <2 x i64>, <2 x i64>* %90, align 8, !alias.scope !2
  %92 = bitcast %"class.sh::TIntermNode"** %85 to <2 x i64>*
  store <2 x i64> %88, <2 x i64>* %92, align 8, !alias.scope !5, !noalias !2
  %93 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %85, i64 2
  %94 = bitcast %"class.sh::TIntermNode"** %93 to <2 x i64>*
  store <2 x i64> %91, <2 x i64>* %94, align 8, !alias.scope !5, !noalias !2
  %95 = or i64 %72, 8
  %96 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %8, i64 %95
  %97 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %28, i64 %95
  %98 = bitcast %"class.sh::TIntermNode"** %97 to <2 x i64>*
  %99 = load <2 x i64>, <2 x i64>* %98, align 8, !alias.scope !2
  %100 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %97, i64 2
  %101 = bitcast %"class.sh::TIntermNode"** %100 to <2 x i64>*
  %102 = load <2 x i64>, <2 x i64>* %101, align 8, !alias.scope !2
  %103 = bitcast %"class.sh::TIntermNode"** %96 to <2 x i64>*
  store <2 x i64> %99, <2 x i64>* %103, align 8, !alias.scope !5, !noalias !2
  %104 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %96, i64 2
  %105 = bitcast %"class.sh::TIntermNode"** %104 to <2 x i64>*
  store <2 x i64> %102, <2 x i64>* %105, align 8, !alias.scope !5, !noalias !2
  %106 = or i64 %72, 12
  %107 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %8, i64 %106
  %108 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %28, i64 %106
  %109 = bitcast %"class.sh::TIntermNode"** %108 to <2 x i64>*
  %110 = load <2 x i64>, <2 x i64>* %109, align 8, !alias.scope !2
  %111 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %108, i64 2
  %112 = bitcast %"class.sh::TIntermNode"** %111 to <2 x i64>*
  %113 = load <2 x i64>, <2 x i64>* %112, align 8, !alias.scope !2
  %114 = bitcast %"class.sh::TIntermNode"** %107 to <2 x i64>*
  store <2 x i64> %110, <2 x i64>* %114, align 8, !alias.scope !5, !noalias !2
  %115 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %107, i64 2
  %116 = bitcast %"class.sh::TIntermNode"** %115 to <2 x i64>*
  store <2 x i64> %113, <2 x i64>* %116, align 8, !alias.scope !5, !noalias !2
  %117 = add i64 %72, 16
  %118 = add i64 %73, -4
  %119 = icmp eq i64 %118, 0
  br i1 %119, label %120, label %71, !llvm.loop !7

120:                                              ; preds = %71, %60
  %121 = phi i64 [ 0, %60 ], [ %117, %71 ]
  %122 = icmp eq i64 %67, 0
  br i1 %122, label %139, label %123

123:                                              ; preds = %120, %123
  %124 = phi i64 [ %136, %123 ], [ %121, %120 ]
  %125 = phi i64 [ %137, %123 ], [ %67, %120 ]
  %126 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %8, i64 %124
  %127 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %28, i64 %124
  %128 = bitcast %"class.sh::TIntermNode"** %127 to <2 x i64>*
  %129 = load <2 x i64>, <2 x i64>* %128, align 8, !alias.scope !2
  %130 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %127, i64 2
  %131 = bitcast %"class.sh::TIntermNode"** %130 to <2 x i64>*
  %132 = load <2 x i64>, <2 x i64>* %131, align 8, !alias.scope !2
  %133 = bitcast %"class.sh::TIntermNode"** %126 to <2 x i64>*
  store <2 x i64> %129, <2 x i64>* %133, align 8, !alias.scope !5, !noalias !2
  %134 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %126, i64 2
  %135 = bitcast %"class.sh::TIntermNode"** %134 to <2 x i64>*
  store <2 x i64> %132, <2 x i64>* %135, align 8, !alias.scope !5, !noalias !2
  %136 = add i64 %124, 4
  %137 = add i64 %125, -1
  %138 = icmp eq i64 %137, 0
  br i1 %138, label %139, label %123, !llvm.loop !9

139:                                              ; preds = %123, %120
  %140 = icmp eq i64 %39, %61
  br i1 %140, label %141, label %41

141:                                              ; preds = %151, %139
  %142 = phi %"class.sh::TIntermNode"** [ %62, %139 ], [ %158, %151 ]
  %143 = ptrtoint %"class.sh::TIntermNode"** %142 to i64
  br label %144

144:                                              ; preds = %141, %23
  %145 = phi i64 [ %143, %141 ], [ %12, %23 ]
  store i64 %145, i64* %29, align 8
  %146 = icmp eq i64 %26, 0
  br i1 %146, label %160, label %147

147:                                              ; preds = %144
  %148 = sub nsw i64 0, %27
  %149 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %8, i64 %148
  %150 = bitcast %"class.sh::TIntermNode"** %149 to i8*
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* align 8 %150, i8* align 8 %5, i64 %26, i1 false) #4
  br label %160

151:                                              ; preds = %41, %151
  %152 = phi %"class.sh::TIntermNode"** [ %158, %151 ], [ %42, %41 ]
  %153 = phi %"class.sh::TIntermNode"** [ %157, %151 ], [ %43, %41 ]
  %154 = bitcast %"class.sh::TIntermNode"** %153 to i64*
  %155 = load i64, i64* %154, align 8
  %156 = bitcast %"class.sh::TIntermNode"** %152 to i64*
  store i64 %155, i64* %156, align 8
  %157 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %153, i64 1
  %158 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %152, i64 1
  %159 = icmp ult %"class.sh::TIntermNode"** %157, %8
  br i1 %159, label %151, label %141, !llvm.loop !11

160:                                              ; preds = %144, %147
  %161 = bitcast %"class.sh::TIntermNode"** %2 to i64*
  %162 = load i64, i64* %161, align 8
  %163 = bitcast %"class.sh::TIntermNode"** %1 to i64*
  store i64 %162, i64* %163, align 8
  br label %578

164:                                              ; preds = %3
  %165 = bitcast %"class.sh::TIntermNode"*** %7 to i64*
  %166 = bitcast %"class.std::__1::vector.32"* %0 to i64*
  %167 = load i64, i64* %166, align 8
  %168 = sub i64 %12, %167
  %169 = ashr exact i64 %168, 3
  %170 = add nsw i64 %169, 1
  %171 = icmp ugt i64 %170, 2305843009213693951
  br i1 %171, label %172, label %174

172:                                              ; preds = %164
  %173 = bitcast %"class.std::__1::vector.32"* %0 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %173) #5
  unreachable

174:                                              ; preds = %164
  %175 = bitcast %"class.sh::TIntermNode"*** %9 to i64*
  %176 = sub i64 %13, %167
  %177 = ashr exact i64 %176, 3
  %178 = icmp ult i64 %177, 1152921504606846975
  br i1 %178, label %182, label %179

179:                                              ; preds = %174
  %180 = sub i64 %4, %167
  %181 = ashr exact i64 %180, 3
  br label %189

182:                                              ; preds = %174
  %183 = ashr exact i64 %176, 2
  %184 = icmp ult i64 %183, %170
  %185 = select i1 %184, i64 %170, i64 %183
  %186 = sub i64 %4, %167
  %187 = ashr exact i64 %186, 3
  %188 = icmp eq i64 %185, 0
  br i1 %188, label %196, label %189

189:                                              ; preds = %179, %182
  %190 = phi i64 [ %181, %179 ], [ %187, %182 ]
  %191 = phi i64 [ 2305843009213693951, %179 ], [ %185, %182 ]
  %192 = tail call %"class.angle::PoolAllocator"* @_Z22GetGlobalPoolAllocatorv() #4
  %193 = shl i64 %191, 3
  %194 = tail call i8* @_ZN5angle13PoolAllocator8allocateEm(%"class.angle::PoolAllocator"* %192, i64 %193) #4
  %195 = bitcast i8* %194 to %"class.sh::TIntermNode"**
  br label %196

196:                                              ; preds = %182, %189
  %197 = phi i64 [ %190, %189 ], [ %187, %182 ]
  %198 = phi i64 [ %191, %189 ], [ 0, %182 ]
  %199 = phi %"class.sh::TIntermNode"** [ %195, %189 ], [ null, %182 ]
  %200 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %199, i64 %197
  %201 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %199, i64 %198
  %202 = ptrtoint %"class.sh::TIntermNode"** %201 to i64
  %203 = icmp eq i64 %197, %198
  br i1 %203, label %204, label %222

204:                                              ; preds = %196
  %205 = icmp sgt i64 %197, 0
  br i1 %205, label %206, label %210

206:                                              ; preds = %204
  %207 = add nuw nsw i64 %197, 1
  %208 = sdiv i64 %207, -2
  %209 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %200, i64 %208
  br label %222

210:                                              ; preds = %204
  %211 = shl nsw i64 %197, 1
  %212 = icmp eq i64 %197, 0
  %213 = select i1 %212, i64 1, i64 %211
  %214 = lshr i64 %213, 2
  %215 = tail call %"class.angle::PoolAllocator"* @_Z22GetGlobalPoolAllocatorv() #4
  %216 = shl i64 %213, 3
  %217 = tail call i8* @_ZN5angle13PoolAllocator8allocateEm(%"class.angle::PoolAllocator"* %215, i64 %216) #4
  %218 = bitcast i8* %217 to %"class.sh::TIntermNode"**
  %219 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %218, i64 %214
  %220 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %218, i64 %213
  %221 = ptrtoint %"class.sh::TIntermNode"** %220 to i64
  br label %222

222:                                              ; preds = %196, %206, %210
  %223 = phi %"class.sh::TIntermNode"** [ %209, %206 ], [ %219, %210 ], [ %200, %196 ]
  %224 = phi i64 [ %202, %206 ], [ %221, %210 ], [ %202, %196 ]
  %225 = bitcast %"class.sh::TIntermNode"** %223 to i64*
  %226 = bitcast %"class.sh::TIntermNode"** %2 to i64*
  %227 = load i64, i64* %226, align 8
  store i64 %227, i64* %225, align 8
  %228 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %223, i64 1
  %229 = load %"class.sh::TIntermNode"**, %"class.sh::TIntermNode"*** %6, align 8
  %230 = ptrtoint %"class.sh::TIntermNode"** %229 to i64
  %231 = icmp eq %"class.sh::TIntermNode"** %229, %1
  br i1 %231, label %399, label %232

232:                                              ; preds = %222
  %233 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1, i64 -1
  %234 = ptrtoint %"class.sh::TIntermNode"** %233 to i64
  %235 = sub i64 %234, %230
  %236 = lshr i64 %235, 3
  %237 = add nuw nsw i64 %236, 1
  %238 = icmp ult i64 %237, 4
  br i1 %238, label %329, label %239

239:                                              ; preds = %232
  %240 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1, i64 -1
  %241 = ptrtoint %"class.sh::TIntermNode"** %240 to i64
  %242 = sub i64 %241, %230
  %243 = lshr i64 %242, 3
  %244 = xor i64 %243, -1
  %245 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %223, i64 %244
  %246 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1, i64 %244
  %247 = icmp ult %"class.sh::TIntermNode"** %245, %1
  %248 = icmp ult %"class.sh::TIntermNode"** %246, %223
  %249 = and i1 %247, %248
  br i1 %249, label %329, label %250

250:                                              ; preds = %239
  %251 = and i64 %237, 4611686018427387900
  %252 = sub nsw i64 0, %251
  %253 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %223, i64 %252
  %254 = sub nsw i64 0, %251
  %255 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1, i64 %254
  %256 = add nsw i64 %251, -4
  %257 = lshr exact i64 %256, 2
  %258 = add nuw nsw i64 %257, 1
  %259 = and i64 %258, 1
  %260 = icmp eq i64 %256, 0
  br i1 %260, label %305, label %261

261:                                              ; preds = %250
  %262 = sub nuw nsw i64 %258, %259
  %263 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %223, i64 -1
  %264 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1, i64 -1
  %265 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %223, i64 -1
  %266 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1, i64 -1
  br label %267

267:                                              ; preds = %267, %261
  %268 = phi i64 [ 0, %261 ], [ %302, %267 ]
  %269 = phi i64 [ %262, %261 ], [ %303, %267 ]
  %270 = sub i64 0, %268
  %271 = sub i64 0, %268
  %272 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %263, i64 %270
  %273 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %264, i64 %271
  %274 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %273, i64 -1
  %275 = bitcast %"class.sh::TIntermNode"** %274 to <2 x i64>*
  %276 = load <2 x i64>, <2 x i64>* %275, align 8, !alias.scope !12
  %277 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %273, i64 -2
  %278 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %277, i64 -1
  %279 = bitcast %"class.sh::TIntermNode"** %278 to <2 x i64>*
  %280 = load <2 x i64>, <2 x i64>* %279, align 8, !alias.scope !12
  %281 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %272, i64 -1
  %282 = bitcast %"class.sh::TIntermNode"** %281 to <2 x i64>*
  store <2 x i64> %276, <2 x i64>* %282, align 8, !alias.scope !15, !noalias !12
  %283 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %272, i64 -2
  %284 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %283, i64 -1
  %285 = bitcast %"class.sh::TIntermNode"** %284 to <2 x i64>*
  store <2 x i64> %280, <2 x i64>* %285, align 8, !alias.scope !15, !noalias !12
  %286 = sub nuw nsw i64 -4, %268
  %287 = sub nuw nsw i64 -4, %268
  %288 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %265, i64 %286
  %289 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %266, i64 %287
  %290 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %289, i64 -1
  %291 = bitcast %"class.sh::TIntermNode"** %290 to <2 x i64>*
  %292 = load <2 x i64>, <2 x i64>* %291, align 8, !alias.scope !12
  %293 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %289, i64 -2
  %294 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %293, i64 -1
  %295 = bitcast %"class.sh::TIntermNode"** %294 to <2 x i64>*
  %296 = load <2 x i64>, <2 x i64>* %295, align 8, !alias.scope !12
  %297 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %288, i64 -1
  %298 = bitcast %"class.sh::TIntermNode"** %297 to <2 x i64>*
  store <2 x i64> %292, <2 x i64>* %298, align 8, !alias.scope !15, !noalias !12
  %299 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %288, i64 -2
  %300 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %299, i64 -1
  %301 = bitcast %"class.sh::TIntermNode"** %300 to <2 x i64>*
  store <2 x i64> %296, <2 x i64>* %301, align 8, !alias.scope !15, !noalias !12
  %302 = add i64 %268, 8
  %303 = add i64 %269, -2
  %304 = icmp eq i64 %303, 0
  br i1 %304, label %305, label %267, !llvm.loop !17

305:                                              ; preds = %267, %250
  %306 = phi i64 [ 0, %250 ], [ %302, %267 ]
  %307 = icmp eq i64 %259, 0
  br i1 %307, label %327, label %308

308:                                              ; preds = %305
  %309 = sub i64 0, %306
  %310 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %223, i64 -1
  %311 = sub i64 0, %306
  %312 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1, i64 -1
  %313 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %310, i64 %309
  %314 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %312, i64 %311
  %315 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %314, i64 -1
  %316 = bitcast %"class.sh::TIntermNode"** %315 to <2 x i64>*
  %317 = load <2 x i64>, <2 x i64>* %316, align 8, !alias.scope !12
  %318 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %314, i64 -2
  %319 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %318, i64 -1
  %320 = bitcast %"class.sh::TIntermNode"** %319 to <2 x i64>*
  %321 = load <2 x i64>, <2 x i64>* %320, align 8, !alias.scope !12
  %322 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %313, i64 -1
  %323 = bitcast %"class.sh::TIntermNode"** %322 to <2 x i64>*
  store <2 x i64> %317, <2 x i64>* %323, align 8, !alias.scope !15, !noalias !12
  %324 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %313, i64 -2
  %325 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %324, i64 -1
  %326 = bitcast %"class.sh::TIntermNode"** %325 to <2 x i64>*
  store <2 x i64> %321, <2 x i64>* %326, align 8, !alias.scope !15, !noalias !12
  br label %327

327:                                              ; preds = %305, %308
  %328 = icmp eq i64 %237, %251
  br i1 %328, label %399, label %329

329:                                              ; preds = %327, %239, %232
  %330 = phi %"class.sh::TIntermNode"** [ %223, %239 ], [ %223, %232 ], [ %253, %327 ]
  %331 = phi %"class.sh::TIntermNode"** [ %1, %239 ], [ %1, %232 ], [ %255, %327 ]
  %332 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %331, i64 -1
  %333 = ptrtoint %"class.sh::TIntermNode"** %332 to i64
  %334 = sub i64 %333, %230
  %335 = lshr i64 %334, 3
  %336 = add nuw nsw i64 %335, 1
  %337 = and i64 %336, 7
  %338 = icmp eq i64 %337, 0
  br i1 %338, label %350, label %339

339:                                              ; preds = %329, %339
  %340 = phi %"class.sh::TIntermNode"** [ %343, %339 ], [ %330, %329 ]
  %341 = phi %"class.sh::TIntermNode"** [ %344, %339 ], [ %331, %329 ]
  %342 = phi i64 [ %348, %339 ], [ %337, %329 ]
  %343 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %340, i64 -1
  %344 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %341, i64 -1
  %345 = bitcast %"class.sh::TIntermNode"** %344 to i64*
  %346 = load i64, i64* %345, align 8
  %347 = bitcast %"class.sh::TIntermNode"** %343 to i64*
  store i64 %346, i64* %347, align 8
  %348 = add i64 %342, -1
  %349 = icmp eq i64 %348, 0
  br i1 %349, label %350, label %339, !llvm.loop !18

350:                                              ; preds = %339, %329
  %351 = phi %"class.sh::TIntermNode"** [ undef, %329 ], [ %343, %339 ]
  %352 = phi %"class.sh::TIntermNode"** [ %330, %329 ], [ %343, %339 ]
  %353 = phi %"class.sh::TIntermNode"** [ %331, %329 ], [ %344, %339 ]
  %354 = icmp ult i64 %334, 56
  br i1 %354, label %399, label %355

355:                                              ; preds = %350, %355
  %356 = phi %"class.sh::TIntermNode"** [ %393, %355 ], [ %352, %350 ]
  %357 = phi %"class.sh::TIntermNode"** [ %394, %355 ], [ %353, %350 ]
  %358 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %356, i64 -1
  %359 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %357, i64 -1
  %360 = bitcast %"class.sh::TIntermNode"** %359 to i64*
  %361 = load i64, i64* %360, align 8
  %362 = bitcast %"class.sh::TIntermNode"** %358 to i64*
  store i64 %361, i64* %362, align 8
  %363 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %356, i64 -2
  %364 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %357, i64 -2
  %365 = bitcast %"class.sh::TIntermNode"** %364 to i64*
  %366 = load i64, i64* %365, align 8
  %367 = bitcast %"class.sh::TIntermNode"** %363 to i64*
  store i64 %366, i64* %367, align 8
  %368 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %356, i64 -3
  %369 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %357, i64 -3
  %370 = bitcast %"class.sh::TIntermNode"** %369 to i64*
  %371 = load i64, i64* %370, align 8
  %372 = bitcast %"class.sh::TIntermNode"** %368 to i64*
  store i64 %371, i64* %372, align 8
  %373 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %356, i64 -4
  %374 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %357, i64 -4
  %375 = bitcast %"class.sh::TIntermNode"** %374 to i64*
  %376 = load i64, i64* %375, align 8
  %377 = bitcast %"class.sh::TIntermNode"** %373 to i64*
  store i64 %376, i64* %377, align 8
  %378 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %356, i64 -5
  %379 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %357, i64 -5
  %380 = bitcast %"class.sh::TIntermNode"** %379 to i64*
  %381 = load i64, i64* %380, align 8
  %382 = bitcast %"class.sh::TIntermNode"** %378 to i64*
  store i64 %381, i64* %382, align 8
  %383 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %356, i64 -6
  %384 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %357, i64 -6
  %385 = bitcast %"class.sh::TIntermNode"** %384 to i64*
  %386 = load i64, i64* %385, align 8
  %387 = bitcast %"class.sh::TIntermNode"** %383 to i64*
  store i64 %386, i64* %387, align 8
  %388 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %356, i64 -7
  %389 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %357, i64 -7
  %390 = bitcast %"class.sh::TIntermNode"** %389 to i64*
  %391 = load i64, i64* %390, align 8
  %392 = bitcast %"class.sh::TIntermNode"** %388 to i64*
  store i64 %391, i64* %392, align 8
  %393 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %356, i64 -8
  %394 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %357, i64 -8
  %395 = bitcast %"class.sh::TIntermNode"** %394 to i64*
  %396 = load i64, i64* %395, align 8
  %397 = bitcast %"class.sh::TIntermNode"** %393 to i64*
  store i64 %396, i64* %397, align 8
  %398 = icmp eq %"class.sh::TIntermNode"** %394, %229
  br i1 %398, label %399, label %355, !llvm.loop !19

399:                                              ; preds = %350, %355, %327, %222
  %400 = phi %"class.sh::TIntermNode"** [ %223, %222 ], [ %253, %327 ], [ %351, %350 ], [ %393, %355 ]
  %401 = load %"class.sh::TIntermNode"**, %"class.sh::TIntermNode"*** %7, align 8
  %402 = icmp eq %"class.sh::TIntermNode"** %401, %1
  br i1 %402, label %574, label %403

403:                                              ; preds = %399
  %404 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %401, i64 -1
  %405 = ptrtoint %"class.sh::TIntermNode"** %404 to i64
  %406 = sub i64 %405, %4
  %407 = lshr i64 %406, 3
  %408 = add nuw nsw i64 %407, 1
  %409 = icmp ult i64 %408, 4
  br i1 %409, label %503, label %410

410:                                              ; preds = %403
  %411 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %401, i64 -1
  %412 = ptrtoint %"class.sh::TIntermNode"** %411 to i64
  %413 = sub i64 %412, %4
  %414 = lshr i64 %413, 3
  %415 = add nuw nsw i64 %414, 2
  %416 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %223, i64 %415
  %417 = add nuw nsw i64 %414, 1
  %418 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1, i64 %417
  %419 = icmp ult %"class.sh::TIntermNode"** %228, %418
  %420 = icmp ugt %"class.sh::TIntermNode"** %416, %1
  %421 = and i1 %419, %420
  br i1 %421, label %503, label %422

422:                                              ; preds = %410
  %423 = and i64 %408, 4611686018427387900
  %424 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %228, i64 %423
  %425 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1, i64 %423
  %426 = add nsw i64 %423, -4
  %427 = lshr exact i64 %426, 2
  %428 = add nuw nsw i64 %427, 1
  %429 = and i64 %428, 3
  %430 = icmp ult i64 %426, 12
  br i1 %430, label %482, label %431

431:                                              ; preds = %422
  %432 = sub nsw i64 %428, %429
  br label %433

433:                                              ; preds = %433, %431
  %434 = phi i64 [ 0, %431 ], [ %479, %433 ]
  %435 = phi i64 [ %432, %431 ], [ %480, %433 ]
  %436 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %228, i64 %434
  %437 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1, i64 %434
  %438 = bitcast %"class.sh::TIntermNode"** %437 to <2 x i64>*
  %439 = load <2 x i64>, <2 x i64>* %438, align 8, !alias.scope !20
  %440 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %437, i64 2
  %441 = bitcast %"class.sh::TIntermNode"** %440 to <2 x i64>*
  %442 = load <2 x i64>, <2 x i64>* %441, align 8, !alias.scope !20
  %443 = bitcast %"class.sh::TIntermNode"** %436 to <2 x i64>*
  store <2 x i64> %439, <2 x i64>* %443, align 8, !alias.scope !23, !noalias !20
  %444 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %436, i64 2
  %445 = bitcast %"class.sh::TIntermNode"** %444 to <2 x i64>*
  store <2 x i64> %442, <2 x i64>* %445, align 8, !alias.scope !23, !noalias !20
  %446 = or i64 %434, 4
  %447 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %228, i64 %446
  %448 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1, i64 %446
  %449 = bitcast %"class.sh::TIntermNode"** %448 to <2 x i64>*
  %450 = load <2 x i64>, <2 x i64>* %449, align 8, !alias.scope !20
  %451 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %448, i64 2
  %452 = bitcast %"class.sh::TIntermNode"** %451 to <2 x i64>*
  %453 = load <2 x i64>, <2 x i64>* %452, align 8, !alias.scope !20
  %454 = bitcast %"class.sh::TIntermNode"** %447 to <2 x i64>*
  store <2 x i64> %450, <2 x i64>* %454, align 8, !alias.scope !23, !noalias !20
  %455 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %447, i64 2
  %456 = bitcast %"class.sh::TIntermNode"** %455 to <2 x i64>*
  store <2 x i64> %453, <2 x i64>* %456, align 8, !alias.scope !23, !noalias !20
  %457 = or i64 %434, 8
  %458 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %228, i64 %457
  %459 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1, i64 %457
  %460 = bitcast %"class.sh::TIntermNode"** %459 to <2 x i64>*
  %461 = load <2 x i64>, <2 x i64>* %460, align 8, !alias.scope !20
  %462 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %459, i64 2
  %463 = bitcast %"class.sh::TIntermNode"** %462 to <2 x i64>*
  %464 = load <2 x i64>, <2 x i64>* %463, align 8, !alias.scope !20
  %465 = bitcast %"class.sh::TIntermNode"** %458 to <2 x i64>*
  store <2 x i64> %461, <2 x i64>* %465, align 8, !alias.scope !23, !noalias !20
  %466 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %458, i64 2
  %467 = bitcast %"class.sh::TIntermNode"** %466 to <2 x i64>*
  store <2 x i64> %464, <2 x i64>* %467, align 8, !alias.scope !23, !noalias !20
  %468 = or i64 %434, 12
  %469 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %228, i64 %468
  %470 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1, i64 %468
  %471 = bitcast %"class.sh::TIntermNode"** %470 to <2 x i64>*
  %472 = load <2 x i64>, <2 x i64>* %471, align 8, !alias.scope !20
  %473 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %470, i64 2
  %474 = bitcast %"class.sh::TIntermNode"** %473 to <2 x i64>*
  %475 = load <2 x i64>, <2 x i64>* %474, align 8, !alias.scope !20
  %476 = bitcast %"class.sh::TIntermNode"** %469 to <2 x i64>*
  store <2 x i64> %472, <2 x i64>* %476, align 8, !alias.scope !23, !noalias !20
  %477 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %469, i64 2
  %478 = bitcast %"class.sh::TIntermNode"** %477 to <2 x i64>*
  store <2 x i64> %475, <2 x i64>* %478, align 8, !alias.scope !23, !noalias !20
  %479 = add i64 %434, 16
  %480 = add i64 %435, -4
  %481 = icmp eq i64 %480, 0
  br i1 %481, label %482, label %433, !llvm.loop !25

482:                                              ; preds = %433, %422
  %483 = phi i64 [ 0, %422 ], [ %479, %433 ]
  %484 = icmp eq i64 %429, 0
  br i1 %484, label %501, label %485

485:                                              ; preds = %482, %485
  %486 = phi i64 [ %498, %485 ], [ %483, %482 ]
  %487 = phi i64 [ %499, %485 ], [ %429, %482 ]
  %488 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %228, i64 %486
  %489 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1, i64 %486
  %490 = bitcast %"class.sh::TIntermNode"** %489 to <2 x i64>*
  %491 = load <2 x i64>, <2 x i64>* %490, align 8, !alias.scope !20
  %492 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %489, i64 2
  %493 = bitcast %"class.sh::TIntermNode"** %492 to <2 x i64>*
  %494 = load <2 x i64>, <2 x i64>* %493, align 8, !alias.scope !20
  %495 = bitcast %"class.sh::TIntermNode"** %488 to <2 x i64>*
  store <2 x i64> %491, <2 x i64>* %495, align 8, !alias.scope !23, !noalias !20
  %496 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %488, i64 2
  %497 = bitcast %"class.sh::TIntermNode"** %496 to <2 x i64>*
  store <2 x i64> %494, <2 x i64>* %497, align 8, !alias.scope !23, !noalias !20
  %498 = add i64 %486, 4
  %499 = add i64 %487, -1
  %500 = icmp eq i64 %499, 0
  br i1 %500, label %501, label %485, !llvm.loop !26

501:                                              ; preds = %485, %482
  %502 = icmp eq i64 %408, %423
  br i1 %502, label %574, label %503

503:                                              ; preds = %501, %410, %403
  %504 = phi %"class.sh::TIntermNode"** [ %228, %410 ], [ %228, %403 ], [ %424, %501 ]
  %505 = phi %"class.sh::TIntermNode"** [ %1, %410 ], [ %1, %403 ], [ %425, %501 ]
  %506 = ptrtoint %"class.sh::TIntermNode"** %505 to i64
  %507 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %401, i64 -1
  %508 = ptrtoint %"class.sh::TIntermNode"** %507 to i64
  %509 = sub i64 %508, %506
  %510 = lshr i64 %509, 3
  %511 = add nuw nsw i64 %510, 1
  %512 = and i64 %511, 7
  %513 = icmp eq i64 %512, 0
  br i1 %513, label %525, label %514

514:                                              ; preds = %503, %514
  %515 = phi %"class.sh::TIntermNode"** [ %522, %514 ], [ %504, %503 ]
  %516 = phi %"class.sh::TIntermNode"** [ %521, %514 ], [ %505, %503 ]
  %517 = phi i64 [ %523, %514 ], [ %512, %503 ]
  %518 = bitcast %"class.sh::TIntermNode"** %515 to i64*
  %519 = bitcast %"class.sh::TIntermNode"** %516 to i64*
  %520 = load i64, i64* %519, align 8
  store i64 %520, i64* %518, align 8
  %521 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %516, i64 1
  %522 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %515, i64 1
  %523 = add i64 %517, -1
  %524 = icmp eq i64 %523, 0
  br i1 %524, label %525, label %514, !llvm.loop !27

525:                                              ; preds = %514, %503
  %526 = phi %"class.sh::TIntermNode"** [ undef, %503 ], [ %522, %514 ]
  %527 = phi %"class.sh::TIntermNode"** [ %504, %503 ], [ %522, %514 ]
  %528 = phi %"class.sh::TIntermNode"** [ %505, %503 ], [ %521, %514 ]
  %529 = icmp ult i64 %509, 56
  br i1 %529, label %574, label %530

530:                                              ; preds = %525, %530
  %531 = phi %"class.sh::TIntermNode"** [ %572, %530 ], [ %527, %525 ]
  %532 = phi %"class.sh::TIntermNode"** [ %571, %530 ], [ %528, %525 ]
  %533 = bitcast %"class.sh::TIntermNode"** %531 to i64*
  %534 = bitcast %"class.sh::TIntermNode"** %532 to i64*
  %535 = load i64, i64* %534, align 8
  store i64 %535, i64* %533, align 8
  %536 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %532, i64 1
  %537 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %531, i64 1
  %538 = bitcast %"class.sh::TIntermNode"** %537 to i64*
  %539 = bitcast %"class.sh::TIntermNode"** %536 to i64*
  %540 = load i64, i64* %539, align 8
  store i64 %540, i64* %538, align 8
  %541 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %532, i64 2
  %542 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %531, i64 2
  %543 = bitcast %"class.sh::TIntermNode"** %542 to i64*
  %544 = bitcast %"class.sh::TIntermNode"** %541 to i64*
  %545 = load i64, i64* %544, align 8
  store i64 %545, i64* %543, align 8
  %546 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %532, i64 3
  %547 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %531, i64 3
  %548 = bitcast %"class.sh::TIntermNode"** %547 to i64*
  %549 = bitcast %"class.sh::TIntermNode"** %546 to i64*
  %550 = load i64, i64* %549, align 8
  store i64 %550, i64* %548, align 8
  %551 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %532, i64 4
  %552 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %531, i64 4
  %553 = bitcast %"class.sh::TIntermNode"** %552 to i64*
  %554 = bitcast %"class.sh::TIntermNode"** %551 to i64*
  %555 = load i64, i64* %554, align 8
  store i64 %555, i64* %553, align 8
  %556 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %532, i64 5
  %557 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %531, i64 5
  %558 = bitcast %"class.sh::TIntermNode"** %557 to i64*
  %559 = bitcast %"class.sh::TIntermNode"** %556 to i64*
  %560 = load i64, i64* %559, align 8
  store i64 %560, i64* %558, align 8
  %561 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %532, i64 6
  %562 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %531, i64 6
  %563 = bitcast %"class.sh::TIntermNode"** %562 to i64*
  %564 = bitcast %"class.sh::TIntermNode"** %561 to i64*
  %565 = load i64, i64* %564, align 8
  store i64 %565, i64* %563, align 8
  %566 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %532, i64 7
  %567 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %531, i64 7
  %568 = bitcast %"class.sh::TIntermNode"** %567 to i64*
  %569 = bitcast %"class.sh::TIntermNode"** %566 to i64*
  %570 = load i64, i64* %569, align 8
  store i64 %570, i64* %568, align 8
  %571 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %532, i64 8
  %572 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %531, i64 8
  %573 = icmp eq %"class.sh::TIntermNode"** %571, %401
  br i1 %573, label %574, label %530, !llvm.loop !28

574:                                              ; preds = %525, %530, %501, %399
  %575 = phi %"class.sh::TIntermNode"** [ %228, %399 ], [ %424, %501 ], [ %526, %525 ], [ %572, %530 ]
  %576 = ptrtoint %"class.sh::TIntermNode"** %400 to i64
  %577 = ptrtoint %"class.sh::TIntermNode"** %575 to i64
  store i64 %576, i64* %166, align 8
  store i64 %577, i64* %165, align 8
  store i64 %224, i64* %175, align 8
  ret %"class.sh::TIntermNode"** %223

578:                                              ; preds = %16, %160
  ret %"class.sh::TIntermNode"** %1
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memmove.p0i8.p0i8.i64(i8* nocapture, i8* nocapture readonly, i64, i1 immarg) #1

; Function Attrs: noreturn
declare void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"*) local_unnamed_addr #3

declare i8* @_ZN5angle13PoolAllocator8allocateEm(%"class.angle::PoolAllocator"*, i64) local_unnamed_addr #2

declare %"class.angle::PoolAllocator"* @_Z22GetGlobalPoolAllocatorv() local_unnamed_addr #2

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #1

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind }
attributes #5 = { noreturn nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{!3}
!3 = distinct !{!3, !4}
!4 = distinct !{!4, !"LVerDomain"}
!5 = !{!6}
!6 = distinct !{!6, !4}
!7 = distinct !{!7, !8}
!8 = !{!"llvm.loop.isvectorized", i32 1}
!9 = distinct !{!9, !10}
!10 = !{!"llvm.loop.unroll.disable"}
!11 = distinct !{!11, !8}
!12 = !{!13}
!13 = distinct !{!13, !14}
!14 = distinct !{!14, !"LVerDomain"}
!15 = !{!16}
!16 = distinct !{!16, !14}
!17 = distinct !{!17, !8}
!18 = distinct !{!18, !10}
!19 = distinct !{!19, !8}
!20 = !{!21}
!21 = distinct !{!21, !22}
!22 = distinct !{!22, !"LVerDomain"}
!23 = !{!24}
!24 = distinct !{!24, !22}
!25 = distinct !{!25, !8}
!26 = distinct !{!26, !10}
!27 = distinct !{!27, !10}
!28 = distinct !{!28, !8}
