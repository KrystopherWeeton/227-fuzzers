; ModuleID = '../../third_party/blink/common/use_counter/use_counter_feature.cc'
source_filename = "../../third_party/blink/common/use_counter/use_counter_feature.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.blink::UseCounterFeature" = type { i32, i32 }

@switch.table._ZNK5blink17UseCounterFeature7IsValidEv = private unnamed_addr constant [4 x i32] [i32 3927, i32 697, i32 697, i32 87], align 4

@_ZN5blink17UseCounterFeatureC1ENS_5mojom21UseCounterFeatureTypeEj = hidden unnamed_addr alias void (%"class.blink::UseCounterFeature"*, i32, i32), void (%"class.blink::UseCounterFeature"*, i32, i32)* @_ZN5blink17UseCounterFeatureC2ENS_5mojom21UseCounterFeatureTypeEj

; Function Attrs: nofree norecurse nounwind ssp uwtable writeonly
define hidden void @_ZN5blink17UseCounterFeatureC2ENS_5mojom21UseCounterFeatureTypeEj(%"class.blink::UseCounterFeature"* nocapture, i32, i32) unnamed_addr #0 align 2 {
  %4 = getelementptr inbounds %"class.blink::UseCounterFeature", %"class.blink::UseCounterFeature"* %0, i64 0, i32 0
  store i32 %1, i32* %4, align 4
  %5 = getelementptr inbounds %"class.blink::UseCounterFeature", %"class.blink::UseCounterFeature"* %0, i64 0, i32 1
  store i32 %2, i32* %5, align 4
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden zeroext i1 @_ZN5blink17UseCounterFeature15SetTypeAndValueENS_5mojom21UseCounterFeatureTypeEj(%"class.blink::UseCounterFeature"* nocapture, i32, i32) local_unnamed_addr #1 align 2 {
  %4 = getelementptr inbounds %"class.blink::UseCounterFeature", %"class.blink::UseCounterFeature"* %0, i64 0, i32 0
  store i32 %1, i32* %4, align 4
  %5 = getelementptr inbounds %"class.blink::UseCounterFeature", %"class.blink::UseCounterFeature"* %0, i64 0, i32 1
  store i32 %2, i32* %5, align 4
  %6 = sext i32 %1 to i64
  %7 = getelementptr inbounds [4 x i32], [4 x i32]* @switch.table._ZNK5blink17UseCounterFeature7IsValidEv, i64 0, i64 %6
  %8 = load i32, i32* %7, align 4
  %9 = icmp ugt i32 %8, %2
  ret i1 %9
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden zeroext i1 @_ZNK5blink17UseCounterFeature7IsValidEv(%"class.blink::UseCounterFeature"* nocapture readonly) local_unnamed_addr #2 align 2 {
  %2 = getelementptr inbounds %"class.blink::UseCounterFeature", %"class.blink::UseCounterFeature"* %0, i64 0, i32 0
  %3 = load i32, i32* %2, align 4
  %4 = sext i32 %3 to i64
  %5 = getelementptr inbounds [4 x i32], [4 x i32]* @switch.table._ZNK5blink17UseCounterFeature7IsValidEv, i64 0, i64 %4
  %6 = load i32, i32* %5, align 4
  %7 = getelementptr inbounds %"class.blink::UseCounterFeature", %"class.blink::UseCounterFeature"* %0, i64 0, i32 1
  %8 = load i32, i32* %7, align 4
  %9 = icmp ult i32 %8, %6
  ret i1 %9
}

; Function Attrs: nounwind readonly ssp uwtable
define hidden zeroext i1 @_ZNK5blink17UseCounterFeatureeqERKS0_(%"class.blink::UseCounterFeature"*, %"class.blink::UseCounterFeature"* dereferenceable(8)) local_unnamed_addr #3 align 2 {
  %3 = getelementptr inbounds %"class.blink::UseCounterFeature", %"class.blink::UseCounterFeature"* %0, i64 0, i32 0
  %4 = getelementptr inbounds %"class.blink::UseCounterFeature", %"class.blink::UseCounterFeature"* %1, i64 0, i32 0
  %5 = load i32, i32* %3, align 4
  %6 = load i32, i32* %4, align 4
  %7 = icmp eq i32 %5, %6
  br i1 %7, label %8, label %14

8:                                                ; preds = %2
  %9 = getelementptr inbounds %"class.blink::UseCounterFeature", %"class.blink::UseCounterFeature"* %1, i64 0, i32 1
  %10 = getelementptr inbounds %"class.blink::UseCounterFeature", %"class.blink::UseCounterFeature"* %0, i64 0, i32 1
  %11 = load i32, i32* %10, align 4
  %12 = load i32, i32* %9, align 4
  %13 = icmp eq i32 %11, %12
  br label %14

14:                                               ; preds = %2, %8
  %15 = phi i1 [ false, %2 ], [ %13, %8 ]
  ret i1 %15
}

; Function Attrs: nounwind readonly ssp uwtable
define hidden zeroext i1 @_ZNK5blink17UseCounterFeatureltERKS0_(%"class.blink::UseCounterFeature"*, %"class.blink::UseCounterFeature"* dereferenceable(8)) local_unnamed_addr #3 align 2 {
  %3 = getelementptr inbounds %"class.blink::UseCounterFeature", %"class.blink::UseCounterFeature"* %0, i64 0, i32 0
  %4 = getelementptr inbounds %"class.blink::UseCounterFeature", %"class.blink::UseCounterFeature"* %0, i64 0, i32 1
  %5 = getelementptr inbounds %"class.blink::UseCounterFeature", %"class.blink::UseCounterFeature"* %1, i64 0, i32 0
  %6 = getelementptr inbounds %"class.blink::UseCounterFeature", %"class.blink::UseCounterFeature"* %1, i64 0, i32 1
  %7 = load i32, i32* %3, align 4
  %8 = load i32, i32* %5, align 4
  %9 = icmp slt i32 %7, %8
  br i1 %9, label %16, label %10

10:                                               ; preds = %2
  %11 = icmp slt i32 %8, %7
  br i1 %11, label %16, label %12

12:                                               ; preds = %10
  %13 = load i32, i32* %4, align 4
  %14 = load i32, i32* %6, align 4
  %15 = icmp ult i32 %13, %14
  br label %16

16:                                               ; preds = %2, %10, %12
  %17 = phi i1 [ %15, %12 ], [ true, %2 ], [ false, %10 ]
  ret i1 %17
}

attributes #0 = { nofree norecurse nounwind ssp uwtable writeonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nofree norecurse nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { norecurse nounwind readonly ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind readonly ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
