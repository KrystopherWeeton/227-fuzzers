; ModuleID = '../../third_party/blink/renderer/platform/geometry/double_point.cc'
source_filename = "../../third_party/blink/renderer/platform/geometry/double_point.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.blink::DoublePoint" = type { double, double }
%"class.std::__1::basic_ostream" = type { i32 (...)**, %"class.std::__1::basic_ios.base" }
%"class.std::__1::basic_ios.base" = type <{ %"class.std::__1::ios_base", %"class.std::__1::basic_ostream"*, i32 }>
%"class.std::__1::ios_base" = type { i32 (...)**, i32, i64, i64, i32, i32, i8*, i8*, void (i32, %"class.std::__1::ios_base"*, i32)**, i32*, i64, i64, i64*, i64, i64, i8**, i64, i64 }
%"class.WTF::String" = type { %class.scoped_refptr }
%class.scoped_refptr = type { %"class.WTF::StringImpl"* }
%"class.WTF::StringImpl" = type { i32, i32, %"struct.std::__1::atomic" }
%"struct.std::__1::atomic" = type { %"struct.std::__1::__atomic_base" }
%"struct.std::__1::__atomic_base" = type { %"struct.std::__1::__atomic_base.0" }
%"struct.std::__1::__atomic_base.0" = type { %"struct.std::__1::__cxx_atomic_impl" }
%"struct.std::__1::__cxx_atomic_impl" = type { %"struct.std::__1::__cxx_atomic_base_impl" }
%"struct.std::__1::__cxx_atomic_base_impl" = type { i32 }

@.str = private unnamed_addr constant [8 x i8] c"%lg,%lg\00", align 1

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden <2 x float> @_ZNK5blink11DoublePointcvNS_10FloatPointEEv(%"class.blink::DoublePoint"* nocapture readonly) local_unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.blink::DoublePoint", %"class.blink::DoublePoint"* %0, i64 0, i32 0
  %3 = load double, double* %2, align 8
  %4 = fcmp ult double %3, 0x47EFFFFFE0000000
  br i1 %4, label %5, label %9

5:                                                ; preds = %1
  %6 = fcmp ole double %3, 0xC7EFFFFFE0000000
  %7 = select i1 %6, double 0xC7EFFFFFE0000000, double %3
  %8 = fptrunc double %7 to float
  br label %9

9:                                                ; preds = %1, %5
  %10 = phi float [ %8, %5 ], [ 0x47EFFFFFE0000000, %1 ]
  %11 = getelementptr inbounds %"class.blink::DoublePoint", %"class.blink::DoublePoint"* %0, i64 0, i32 1
  %12 = load double, double* %11, align 8
  %13 = fcmp ult double %12, 0x47EFFFFFE0000000
  br i1 %13, label %14, label %18

14:                                               ; preds = %9
  %15 = fcmp ole double %12, 0xC7EFFFFFE0000000
  %16 = select i1 %15, double 0xC7EFFFFFE0000000, double %12
  %17 = fptrunc double %16 to float
  br label %18

18:                                               ; preds = %9, %14
  %19 = phi float [ %17, %14 ], [ 0x47EFFFFFE0000000, %9 ]
  %20 = insertelement <2 x float> undef, float %10, i32 0
  %21 = insertelement <2 x float> %20, float %19, i32 1
  ret <2 x float> %21
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden { double, double } @_ZNK5blink11DoublePoint10ExpandedToERKS0_(%"class.blink::DoublePoint"* nocapture readonly, %"class.blink::DoublePoint"* nocapture readonly dereferenceable(16)) local_unnamed_addr #1 align 2 {
  %3 = getelementptr inbounds %"class.blink::DoublePoint", %"class.blink::DoublePoint"* %0, i64 0, i32 0
  %4 = getelementptr inbounds %"class.blink::DoublePoint", %"class.blink::DoublePoint"* %1, i64 0, i32 0
  %5 = load double, double* %3, align 8
  %6 = load double, double* %4, align 8
  %7 = fcmp olt double %5, %6
  %8 = select i1 %7, double %6, double %5
  %9 = getelementptr inbounds %"class.blink::DoublePoint", %"class.blink::DoublePoint"* %0, i64 0, i32 1
  %10 = getelementptr inbounds %"class.blink::DoublePoint", %"class.blink::DoublePoint"* %1, i64 0, i32 1
  %11 = load double, double* %9, align 8
  %12 = load double, double* %10, align 8
  %13 = fcmp olt double %11, %12
  %14 = select i1 %13, double %12, double %11
  %15 = insertvalue { double, double } undef, double %8, 0
  %16 = insertvalue { double, double } %15, double %14, 1
  ret { double, double } %16
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden { double, double } @_ZNK5blink11DoublePoint8ShrunkToERKS0_(%"class.blink::DoublePoint"* nocapture readonly, %"class.blink::DoublePoint"* nocapture readonly dereferenceable(16)) local_unnamed_addr #1 align 2 {
  %3 = getelementptr inbounds %"class.blink::DoublePoint", %"class.blink::DoublePoint"* %0, i64 0, i32 0
  %4 = getelementptr inbounds %"class.blink::DoublePoint", %"class.blink::DoublePoint"* %1, i64 0, i32 0
  %5 = load double, double* %4, align 8
  %6 = load double, double* %3, align 8
  %7 = fcmp olt double %5, %6
  %8 = select i1 %7, double %5, double %6
  %9 = getelementptr inbounds %"class.blink::DoublePoint", %"class.blink::DoublePoint"* %0, i64 0, i32 1
  %10 = getelementptr inbounds %"class.blink::DoublePoint", %"class.blink::DoublePoint"* %1, i64 0, i32 1
  %11 = load double, double* %10, align 8
  %12 = load double, double* %9, align 8
  %13 = fcmp olt double %11, %12
  %14 = select i1 %13, double %11, double %12
  %15 = insertvalue { double, double } undef, double %8, 0
  %16 = insertvalue { double, double } %15, double %14, 1
  ret { double, double } %16
}

; Function Attrs: nounwind ssp uwtable
define hidden dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN5blinklsERNSt3__113basic_ostreamIcNS0_11char_traitsIcEEEERKNS_11DoublePointE(%"class.std::__1::basic_ostream"* dereferenceable(160), %"class.blink::DoublePoint"* nocapture readonly dereferenceable(16)) local_unnamed_addr #2 {
  %3 = alloca %"class.WTF::String", align 8
  %4 = bitcast %"class.WTF::String"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %4) #5
  %5 = getelementptr inbounds %"class.blink::DoublePoint", %"class.blink::DoublePoint"* %1, i64 0, i32 0
  %6 = load double, double* %5, align 8
  %7 = getelementptr inbounds %"class.blink::DoublePoint", %"class.blink::DoublePoint"* %1, i64 0, i32 1
  %8 = load double, double* %7, align 8
  %9 = tail call %"class.WTF::StringImpl"* (i8*, ...) @_ZN3WTF6String6FormatEPKcz(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str, i64 0, i64 0), double %6, double %8) #5
  %10 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %3, i64 0, i32 0, i32 0
  store %"class.WTF::StringImpl"* %9, %"class.WTF::StringImpl"** %10, align 8
  %11 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN3WTFlsERNSt3__113basic_ostreamIcNS0_11char_traitsIcEEEERKNS_6StringE(%"class.std::__1::basic_ostream"* dereferenceable(160) %0, %"class.WTF::String"* nonnull dereferenceable(8) %3) #5
  %12 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %10, align 8
  %13 = icmp eq %"class.WTF::StringImpl"* %12, null
  br i1 %13, label %27, label %14

14:                                               ; preds = %2
  %15 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %12, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %16 = load atomic i32, i32* %15 monotonic, align 4
  %17 = and i32 %16, 2
  %18 = icmp eq i32 %17, 0
  %19 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %12, i64 0, i32 0
  %20 = load i32, i32* %19, align 4
  br i1 %18, label %21, label %23

21:                                               ; preds = %14
  %22 = add i32 %20, -1
  store i32 %22, i32* %19, align 4
  br label %23

23:                                               ; preds = %21, %14
  %24 = phi i32 [ %22, %21 ], [ %20, %14 ]
  %25 = icmp eq i32 %24, 0
  br i1 %25, label %26, label %27

26:                                               ; preds = %23
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %12) #5
  br label %27

27:                                               ; preds = %2, %23, %26
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %4) #5
  ret %"class.std::__1::basic_ostream"* %11
}

declare dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN3WTFlsERNSt3__113basic_ostreamIcNS0_11char_traitsIcEEEERKNS_6StringE(%"class.std::__1::basic_ostream"* dereferenceable(160), %"class.WTF::String"* dereferenceable(8)) local_unnamed_addr #3

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #4

; Function Attrs: nounwind ssp uwtable
define hidden %"class.WTF::StringImpl"* @_ZNK5blink11DoublePoint8ToStringEv(%"class.blink::DoublePoint"* nocapture readonly) local_unnamed_addr #2 align 2 {
  %2 = getelementptr inbounds %"class.blink::DoublePoint", %"class.blink::DoublePoint"* %0, i64 0, i32 0
  %3 = load double, double* %2, align 8
  %4 = getelementptr inbounds %"class.blink::DoublePoint", %"class.blink::DoublePoint"* %0, i64 0, i32 1
  %5 = load double, double* %4, align 8
  %6 = tail call %"class.WTF::StringImpl"* (i8*, ...) @_ZN3WTF6String6FormatEPKcz(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str, i64 0, i64 0), double %3, double %5) #5
  ret %"class.WTF::StringImpl"* %6
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #4

declare %"class.WTF::StringImpl"* @_ZN3WTF6String6FormatEPKcz(i8*, ...) local_unnamed_addr #3

declare void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"*) local_unnamed_addr #3

attributes #0 = { norecurse nounwind readonly ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="64" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { norecurse nounwind readonly ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { argmemonly nounwind }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
