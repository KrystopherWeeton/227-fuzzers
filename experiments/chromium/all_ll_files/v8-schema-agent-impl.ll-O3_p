; ModuleID = '../../v8/src/inspector/v8-schema-agent-impl.cc'
source_filename = "../../v8/src/inspector/v8-schema-agent-impl.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.v8_inspector::V8SchemaAgentImpl" = type { %"class.v8_inspector::protocol::Schema::Backend", %"class.v8_inspector::V8InspectorSessionImpl"*, %"class.v8_inspector::protocol::Schema::Frontend" }
%"class.v8_inspector::protocol::Schema::Backend" = type { i32 (...)** }
%"class.v8_inspector::protocol::Schema::Frontend" = type { %"class.v8_crdtp::FrontendChannel"* }
%"class.v8_inspector::V8InspectorSessionImpl" = type <{ %"class.v8_inspector::V8InspectorSession", %"class.v8_crdtp::FrontendChannel", i32, i32, %"class.v8_inspector::V8InspectorImpl"*, %"class.v8_inspector::V8Inspector::Channel"*, i8, [7 x i8], %"class.v8_crdtp::UberDispatcher", %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr.43", %"class.std::__1::unique_ptr.49", %"class.std::__1::unique_ptr.55", %"class.std::__1::unique_ptr.61", %"class.std::__1::unique_ptr.67", %"class.std::__1::unique_ptr.73", %"class.std::__1::vector.79", i8, [7 x i8] }>
%"class.v8_inspector::V8InspectorSession" = type { i32 (...)** }
%"class.v8_crdtp::FrontendChannel" = type { i32 (...)** }
%"class.v8_inspector::V8InspectorImpl" = type opaque
%"class.v8_inspector::V8Inspector::Channel" = type { i32 (...)** }
%"class.v8_crdtp::UberDispatcher" = type { i32 (...)**, %"class.v8_crdtp::FrontendChannel"*, %"class.std::__1::vector", %"class.std::__1::vector.1" }
%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { %"struct.std::__1::pair"*, %"struct.std::__1::pair"*, %"class.std::__1::__compressed_pair" }
%"struct.std::__1::pair" = type opaque
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %"struct.std::__1::pair"* }
%"class.std::__1::vector.1" = type { %"class.std::__1::__vector_base.2" }
%"class.std::__1::__vector_base.2" = type { %"struct.std::__1::pair.3"*, %"struct.std::__1::pair.3"*, %"class.std::__1::__compressed_pair.4" }
%"struct.std::__1::pair.3" = type opaque
%"class.std::__1::__compressed_pair.4" = type { %"struct.std::__1::__compressed_pair_elem.5" }
%"struct.std::__1::__compressed_pair_elem.5" = type { %"struct.std::__1::pair.3"* }
%"class.std::__1::unique_ptr" = type { %"class.std::__1::__compressed_pair.9" }
%"class.std::__1::__compressed_pair.9" = type { %"struct.std::__1::__compressed_pair_elem.10" }
%"struct.std::__1::__compressed_pair_elem.10" = type { %"class.v8_inspector::protocol::DictionaryValue"* }
%"class.std::__1::unique_ptr.43" = type { %"class.std::__1::__compressed_pair.44" }
%"class.std::__1::__compressed_pair.44" = type { %"struct.std::__1::__compressed_pair_elem.45" }
%"struct.std::__1::__compressed_pair_elem.45" = type { %"class.v8_inspector::V8RuntimeAgentImpl"* }
%"class.v8_inspector::V8RuntimeAgentImpl" = type opaque
%"class.std::__1::unique_ptr.49" = type { %"class.std::__1::__compressed_pair.50" }
%"class.std::__1::__compressed_pair.50" = type { %"struct.std::__1::__compressed_pair_elem.51" }
%"struct.std::__1::__compressed_pair_elem.51" = type { %"class.v8_inspector::V8DebuggerAgentImpl"* }
%"class.v8_inspector::V8DebuggerAgentImpl" = type opaque
%"class.std::__1::unique_ptr.55" = type { %"class.std::__1::__compressed_pair.56" }
%"class.std::__1::__compressed_pair.56" = type { %"struct.std::__1::__compressed_pair_elem.57" }
%"struct.std::__1::__compressed_pair_elem.57" = type { %"class.v8_inspector::V8HeapProfilerAgentImpl"* }
%"class.v8_inspector::V8HeapProfilerAgentImpl" = type opaque
%"class.std::__1::unique_ptr.61" = type { %"class.std::__1::__compressed_pair.62" }
%"class.std::__1::__compressed_pair.62" = type { %"struct.std::__1::__compressed_pair_elem.63" }
%"struct.std::__1::__compressed_pair_elem.63" = type { %"class.v8_inspector::V8ProfilerAgentImpl"* }
%"class.v8_inspector::V8ProfilerAgentImpl" = type opaque
%"class.std::__1::unique_ptr.67" = type { %"class.std::__1::__compressed_pair.68" }
%"class.std::__1::__compressed_pair.68" = type { %"struct.std::__1::__compressed_pair_elem.69" }
%"struct.std::__1::__compressed_pair_elem.69" = type { %"class.v8_inspector::V8ConsoleAgentImpl"* }
%"class.v8_inspector::V8ConsoleAgentImpl" = type opaque
%"class.std::__1::unique_ptr.73" = type { %"class.std::__1::__compressed_pair.74" }
%"class.std::__1::__compressed_pair.74" = type { %"struct.std::__1::__compressed_pair_elem.75" }
%"struct.std::__1::__compressed_pair_elem.75" = type { %"class.v8_inspector::V8SchemaAgentImpl"* }
%"class.std::__1::vector.79" = type { %"class.std::__1::__vector_base.80" }
%"class.std::__1::__vector_base.80" = type { %"class.std::__1::unique_ptr.81"*, %"class.std::__1::unique_ptr.81"*, %"class.std::__1::__compressed_pair.82" }
%"class.std::__1::unique_ptr.81" = type opaque
%"class.std::__1::__compressed_pair.82" = type { %"struct.std::__1::__compressed_pair_elem.83" }
%"struct.std::__1::__compressed_pair_elem.83" = type { %"class.std::__1::unique_ptr.81"* }
%"class.v8_inspector::protocol::DictionaryValue" = type { %"class.v8_inspector::protocol::Value.base", [4 x i8], %"class.std::__1::unordered_map", %"class.std::__1::vector.30" }
%"class.v8_inspector::protocol::Value.base" = type <{ %"class.v8_crdtp::Serializable", i32 }>
%"class.v8_crdtp::Serializable" = type { i32 (...)** }
%"class.std::__1::unordered_map" = type { %"class.std::__1::__hash_table" }
%"class.std::__1::__hash_table" = type <{ %"class.std::__1::unique_ptr.11", %"class.std::__1::__compressed_pair.20", %"class.std::__1::__compressed_pair.25", %"class.std::__1::__compressed_pair.27", [4 x i8] }>
%"class.std::__1::unique_ptr.11" = type { %"class.std::__1::__compressed_pair.12" }
%"class.std::__1::__compressed_pair.12" = type { %"struct.std::__1::__compressed_pair_elem.13", %"struct.std::__1::__compressed_pair_elem.14" }
%"struct.std::__1::__compressed_pair_elem.13" = type { %"struct.std::__1::__hash_node_base"** }
%"struct.std::__1::__hash_node_base" = type { %"struct.std::__1::__hash_node_base"* }
%"struct.std::__1::__compressed_pair_elem.14" = type { %"class.std::__1::__bucket_list_deallocator" }
%"class.std::__1::__bucket_list_deallocator" = type { %"class.std::__1::__compressed_pair.15" }
%"class.std::__1::__compressed_pair.15" = type { %"struct.std::__1::__compressed_pair_elem.16" }
%"struct.std::__1::__compressed_pair_elem.16" = type { i64 }
%"class.std::__1::__compressed_pair.20" = type { %"struct.std::__1::__compressed_pair_elem.21" }
%"struct.std::__1::__compressed_pair_elem.21" = type { %"struct.std::__1::__hash_node_base" }
%"class.std::__1::__compressed_pair.25" = type { %"struct.std::__1::__compressed_pair_elem.16" }
%"class.std::__1::__compressed_pair.27" = type { %"struct.std::__1::__compressed_pair_elem.28" }
%"struct.std::__1::__compressed_pair_elem.28" = type { float }
%"class.std::__1::vector.30" = type { %"class.std::__1::__vector_base.31" }
%"class.std::__1::__vector_base.31" = type { %"class.v8_inspector::String16"*, %"class.v8_inspector::String16"*, %"class.std::__1::__compressed_pair.37" }
%"class.v8_inspector::String16" = type { %"class.std::__1::basic_string", i64 }
%"class.std::__1::basic_string" = type { %"class.std::__1::__compressed_pair.32" }
%"class.std::__1::__compressed_pair.32" = type { %"struct.std::__1::__compressed_pair_elem.33" }
%"struct.std::__1::__compressed_pair_elem.33" = type { %"struct.std::__1::basic_string<unsigned short, std::__1::char_traits<unsigned short>, std::__1::allocator<unsigned short> >::__rep" }
%"struct.std::__1::basic_string<unsigned short, std::__1::char_traits<unsigned short>, std::__1::allocator<unsigned short> >::__rep" = type { %union.anon }
%union.anon = type { %"struct.std::__1::basic_string<unsigned short, std::__1::char_traits<unsigned short>, std::__1::allocator<unsigned short> >::__long" }
%"struct.std::__1::basic_string<unsigned short, std::__1::char_traits<unsigned short>, std::__1::allocator<unsigned short> >::__long" = type { i16*, i64, i64 }
%"class.std::__1::__compressed_pair.37" = type { %"struct.std::__1::__compressed_pair_elem.38" }
%"struct.std::__1::__compressed_pair_elem.38" = type { %"class.v8_inspector::String16"* }
%"class.v8_crdtp::DispatchResponse" = type { i32, %"class.std::__1::basic_string.106" }
%"class.std::__1::basic_string.106" = type { %"class.std::__1::__compressed_pair.107" }
%"class.std::__1::__compressed_pair.107" = type { %"struct.std::__1::__compressed_pair_elem.108" }
%"struct.std::__1::__compressed_pair_elem.108" = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" = type { %union.anon.109 }
%union.anon.109 = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" = type { i8*, i64, i64 }
%"class.std::__1::unique_ptr.87" = type { %"class.std::__1::__compressed_pair.88" }
%"class.std::__1::__compressed_pair.88" = type { %"struct.std::__1::__compressed_pair_elem.89" }
%"struct.std::__1::__compressed_pair_elem.89" = type { %"class.std::__1::vector.90"* }
%"class.std::__1::vector.90" = type { %"class.std::__1::__vector_base.91" }
%"class.std::__1::__vector_base.91" = type { %"class.std::__1::unique_ptr.92"*, %"class.std::__1::unique_ptr.92"*, %"class.std::__1::__compressed_pair.98" }
%"class.std::__1::unique_ptr.92" = type { %"class.std::__1::__compressed_pair.93" }
%"class.std::__1::__compressed_pair.93" = type { %"struct.std::__1::__compressed_pair_elem.94" }
%"struct.std::__1::__compressed_pair_elem.94" = type { %"class.v8_inspector::protocol::Schema::Domain"* }
%"class.v8_inspector::protocol::Schema::Domain" = type { %"class.v8_crdtp::ProtocolObject", %"class.v8_inspector::protocol::Schema::API::Domain", %"class.v8_inspector::String16", %"class.v8_inspector::String16" }
%"class.v8_crdtp::ProtocolObject" = type { %"class.v8_crdtp::Serializable" }
%"class.v8_inspector::protocol::Schema::API::Domain" = type { %"class.v8_inspector::protocol::Exported" }
%"class.v8_inspector::protocol::Exported" = type { i32 (...)** }
%"class.std::__1::__compressed_pair.98" = type { %"struct.std::__1::__compressed_pair_elem.99" }
%"struct.std::__1::__compressed_pair_elem.99" = type { %"class.std::__1::unique_ptr.92"* }

$_ZN12v8_inspector8protocol6Schema7Backend7disableEv = comdat any

@_ZTVN12v8_inspector17V8SchemaAgentImplE = hidden unnamed_addr constant { [6 x i8*] } { [6 x i8*] [i8* null, i8* null, i8* bitcast (void (%"class.v8_inspector::V8SchemaAgentImpl"*)* @_ZN12v8_inspector17V8SchemaAgentImplD2Ev to i8*), i8* bitcast (void (%"class.v8_inspector::V8SchemaAgentImpl"*)* @_ZN12v8_inspector17V8SchemaAgentImplD0Ev to i8*), i8* bitcast (void (%"class.v8_crdtp::DispatchResponse"*, %"class.v8_inspector::V8SchemaAgentImpl"*, %"class.std::__1::unique_ptr.87"*)* @_ZN12v8_inspector17V8SchemaAgentImpl10getDomainsEPNSt3__110unique_ptrINS1_6vectorINS2_INS_8protocol6Schema6DomainENS1_14default_deleteIS6_EEEENS1_9allocatorIS9_EEEENS7_ISC_EEEE to i8*), i8* bitcast (void (%"class.v8_crdtp::DispatchResponse"*, %"class.v8_inspector::protocol::Schema::Backend"*)* @_ZN12v8_inspector8protocol6Schema7Backend7disableEv to i8*)] }, align 8

@_ZN12v8_inspector17V8SchemaAgentImplC1EPNS_22V8InspectorSessionImplEPN8v8_crdtp15FrontendChannelEPNS_8protocol15DictionaryValueE = hidden unnamed_addr alias void (%"class.v8_inspector::V8SchemaAgentImpl"*, %"class.v8_inspector::V8InspectorSessionImpl"*, %"class.v8_crdtp::FrontendChannel"*, %"class.v8_inspector::protocol::DictionaryValue"*), void (%"class.v8_inspector::V8SchemaAgentImpl"*, %"class.v8_inspector::V8InspectorSessionImpl"*, %"class.v8_crdtp::FrontendChannel"*, %"class.v8_inspector::protocol::DictionaryValue"*)* @_ZN12v8_inspector17V8SchemaAgentImplC2EPNS_22V8InspectorSessionImplEPN8v8_crdtp15FrontendChannelEPNS_8protocol15DictionaryValueE
@_ZN12v8_inspector17V8SchemaAgentImplD1Ev = hidden unnamed_addr alias void (%"class.v8_inspector::V8SchemaAgentImpl"*), void (%"class.v8_inspector::V8SchemaAgentImpl"*)* @_ZN12v8_inspector17V8SchemaAgentImplD2Ev

; Function Attrs: nofree norecurse nounwind ssp uwtable writeonly
define hidden void @_ZN12v8_inspector17V8SchemaAgentImplC2EPNS_22V8InspectorSessionImplEPN8v8_crdtp15FrontendChannelEPNS_8protocol15DictionaryValueE(%"class.v8_inspector::V8SchemaAgentImpl"* nocapture, %"class.v8_inspector::V8InspectorSessionImpl"*, %"class.v8_crdtp::FrontendChannel"*, %"class.v8_inspector::protocol::DictionaryValue"* nocapture readnone) unnamed_addr #0 align 2 {
  %5 = getelementptr inbounds %"class.v8_inspector::V8SchemaAgentImpl", %"class.v8_inspector::V8SchemaAgentImpl"* %0, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [6 x i8*] }, { [6 x i8*] }* @_ZTVN12v8_inspector17V8SchemaAgentImplE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %5, align 8
  %6 = getelementptr inbounds %"class.v8_inspector::V8SchemaAgentImpl", %"class.v8_inspector::V8SchemaAgentImpl"* %0, i64 0, i32 1
  store %"class.v8_inspector::V8InspectorSessionImpl"* %1, %"class.v8_inspector::V8InspectorSessionImpl"** %6, align 8
  %7 = getelementptr inbounds %"class.v8_inspector::V8SchemaAgentImpl", %"class.v8_inspector::V8SchemaAgentImpl"* %0, i64 0, i32 2, i32 0
  store %"class.v8_crdtp::FrontendChannel"* %2, %"class.v8_crdtp::FrontendChannel"** %7, align 8
  ret void
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden void @_ZN12v8_inspector17V8SchemaAgentImplD2Ev(%"class.v8_inspector::V8SchemaAgentImpl"* nocapture) unnamed_addr #1 align 2 {
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN12v8_inspector17V8SchemaAgentImplD0Ev(%"class.v8_inspector::V8SchemaAgentImpl"*) unnamed_addr #2 align 2 {
  %2 = bitcast %"class.v8_inspector::V8SchemaAgentImpl"* %0 to i8*
  tail call void @_ZdlPv(i8* %2) #7
  ret void
}

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN12v8_inspector17V8SchemaAgentImpl10getDomainsEPNSt3__110unique_ptrINS1_6vectorINS2_INS_8protocol6Schema6DomainENS1_14default_deleteIS6_EEEENS1_9allocatorIS9_EEEENS7_ISC_EEEE(%"class.v8_crdtp::DispatchResponse"* noalias sret, %"class.v8_inspector::V8SchemaAgentImpl"* nocapture readonly, %"class.std::__1::unique_ptr.87"* nocapture) unnamed_addr #2 align 2 {
  %4 = alloca %"class.std::__1::vector.90", align 16
  %5 = bitcast %"class.std::__1::vector.90"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %5) #8
  %6 = getelementptr inbounds %"class.v8_inspector::V8SchemaAgentImpl", %"class.v8_inspector::V8SchemaAgentImpl"* %1, i64 0, i32 1
  %7 = load %"class.v8_inspector::V8InspectorSessionImpl"*, %"class.v8_inspector::V8InspectorSessionImpl"** %6, align 8
  call void @_ZN12v8_inspector22V8InspectorSessionImpl20supportedDomainsImplEv(%"class.std::__1::vector.90"* nonnull sret %4, %"class.v8_inspector::V8InspectorSessionImpl"* %7) #8
  %8 = call i8* @_Znwm(i64 24) #7
  %9 = getelementptr inbounds %"class.std::__1::vector.90", %"class.std::__1::vector.90"* %4, i64 0, i32 0, i32 1
  %10 = bitcast %"class.std::__1::vector.90"* %4 to <2 x i64>*
  %11 = load <2 x i64>, <2 x i64>* %10, align 16
  %12 = bitcast i8* %8 to <2 x i64>*
  store <2 x i64> %11, <2 x i64>* %12, align 8
  %13 = getelementptr inbounds %"class.std::__1::vector.90", %"class.std::__1::vector.90"* %4, i64 0, i32 0, i32 2, i32 0, i32 0
  %14 = bitcast %"class.std::__1::unique_ptr.92"** %13 to i64*
  %15 = load i64, i64* %14, align 16
  %16 = getelementptr inbounds i8, i8* %8, i64 16
  %17 = bitcast i8* %16 to i64*
  store i64 %15, i64* %17, align 8
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %5, i8 0, i64 24, i1 false) #8
  %18 = ptrtoint i8* %8 to i64
  %19 = getelementptr inbounds %"class.std::__1::unique_ptr.87", %"class.std::__1::unique_ptr.87"* %2, i64 0, i32 0, i32 0, i32 0
  %20 = load %"class.std::__1::vector.90"*, %"class.std::__1::vector.90"** %19, align 8
  %21 = bitcast %"class.std::__1::unique_ptr.87"* %2 to i64*
  store i64 %18, i64* %21, align 8
  %22 = icmp eq %"class.std::__1::vector.90"* %20, null
  br i1 %22, label %77, label %23

23:                                               ; preds = %3
  %24 = getelementptr inbounds %"class.std::__1::vector.90", %"class.std::__1::vector.90"* %20, i64 0, i32 0, i32 0
  %25 = load %"class.std::__1::unique_ptr.92"*, %"class.std::__1::unique_ptr.92"** %24, align 8
  %26 = icmp eq %"class.std::__1::unique_ptr.92"* %25, null
  br i1 %26, label %50, label %27

27:                                               ; preds = %23
  %28 = bitcast %"class.std::__1::unique_ptr.92"* %25 to i8*
  %29 = getelementptr inbounds %"class.std::__1::vector.90", %"class.std::__1::vector.90"* %20, i64 0, i32 0, i32 1
  %30 = load %"class.std::__1::unique_ptr.92"*, %"class.std::__1::unique_ptr.92"** %29, align 8
  %31 = icmp eq %"class.std::__1::unique_ptr.92"* %30, %25
  br i1 %31, label %48, label %32

32:                                               ; preds = %27, %43
  %33 = phi %"class.std::__1::unique_ptr.92"* [ %34, %43 ], [ %30, %27 ]
  %34 = getelementptr inbounds %"class.std::__1::unique_ptr.92", %"class.std::__1::unique_ptr.92"* %33, i64 -1
  %35 = getelementptr inbounds %"class.std::__1::unique_ptr.92", %"class.std::__1::unique_ptr.92"* %34, i64 0, i32 0, i32 0, i32 0
  %36 = load %"class.v8_inspector::protocol::Schema::Domain"*, %"class.v8_inspector::protocol::Schema::Domain"** %35, align 8
  store %"class.v8_inspector::protocol::Schema::Domain"* null, %"class.v8_inspector::protocol::Schema::Domain"** %35, align 8
  %37 = icmp eq %"class.v8_inspector::protocol::Schema::Domain"* %36, null
  br i1 %37, label %43, label %38

38:                                               ; preds = %32
  %39 = bitcast %"class.v8_inspector::protocol::Schema::Domain"* %36 to void (%"class.v8_inspector::protocol::Schema::Domain"*)***
  %40 = load void (%"class.v8_inspector::protocol::Schema::Domain"*)**, void (%"class.v8_inspector::protocol::Schema::Domain"*)*** %39, align 8
  %41 = getelementptr inbounds void (%"class.v8_inspector::protocol::Schema::Domain"*)*, void (%"class.v8_inspector::protocol::Schema::Domain"*)** %40, i64 2
  %42 = load void (%"class.v8_inspector::protocol::Schema::Domain"*)*, void (%"class.v8_inspector::protocol::Schema::Domain"*)** %41, align 8
  call void %42(%"class.v8_inspector::protocol::Schema::Domain"* nonnull %36) #8
  br label %43

43:                                               ; preds = %38, %32
  %44 = icmp eq %"class.std::__1::unique_ptr.92"* %34, %25
  br i1 %44, label %45, label %32

45:                                               ; preds = %43
  %46 = bitcast %"class.std::__1::vector.90"* %20 to i8**
  %47 = load i8*, i8** %46, align 8
  br label %48

48:                                               ; preds = %45, %27
  %49 = phi i8* [ %47, %45 ], [ %28, %27 ]
  store %"class.std::__1::unique_ptr.92"* %25, %"class.std::__1::unique_ptr.92"** %29, align 8
  call void @_ZdlPv(i8* %49) #7
  br label %50

50:                                               ; preds = %23, %48
  %51 = bitcast %"class.std::__1::vector.90"* %20 to i8*
  call void @_ZdlPv(i8* %51) #7
  %52 = getelementptr inbounds %"class.std::__1::vector.90", %"class.std::__1::vector.90"* %4, i64 0, i32 0, i32 0
  %53 = load %"class.std::__1::unique_ptr.92"*, %"class.std::__1::unique_ptr.92"** %52, align 16
  %54 = icmp eq %"class.std::__1::unique_ptr.92"* %53, null
  br i1 %54, label %77, label %55

55:                                               ; preds = %50
  %56 = bitcast %"class.std::__1::unique_ptr.92"* %53 to i8*
  %57 = load %"class.std::__1::unique_ptr.92"*, %"class.std::__1::unique_ptr.92"** %9, align 8
  %58 = icmp eq %"class.std::__1::unique_ptr.92"* %57, %53
  br i1 %58, label %75, label %59

59:                                               ; preds = %55, %70
  %60 = phi %"class.std::__1::unique_ptr.92"* [ %61, %70 ], [ %57, %55 ]
  %61 = getelementptr inbounds %"class.std::__1::unique_ptr.92", %"class.std::__1::unique_ptr.92"* %60, i64 -1
  %62 = getelementptr inbounds %"class.std::__1::unique_ptr.92", %"class.std::__1::unique_ptr.92"* %61, i64 0, i32 0, i32 0, i32 0
  %63 = load %"class.v8_inspector::protocol::Schema::Domain"*, %"class.v8_inspector::protocol::Schema::Domain"** %62, align 8
  store %"class.v8_inspector::protocol::Schema::Domain"* null, %"class.v8_inspector::protocol::Schema::Domain"** %62, align 8
  %64 = icmp eq %"class.v8_inspector::protocol::Schema::Domain"* %63, null
  br i1 %64, label %70, label %65

65:                                               ; preds = %59
  %66 = bitcast %"class.v8_inspector::protocol::Schema::Domain"* %63 to void (%"class.v8_inspector::protocol::Schema::Domain"*)***
  %67 = load void (%"class.v8_inspector::protocol::Schema::Domain"*)**, void (%"class.v8_inspector::protocol::Schema::Domain"*)*** %66, align 8
  %68 = getelementptr inbounds void (%"class.v8_inspector::protocol::Schema::Domain"*)*, void (%"class.v8_inspector::protocol::Schema::Domain"*)** %67, i64 2
  %69 = load void (%"class.v8_inspector::protocol::Schema::Domain"*)*, void (%"class.v8_inspector::protocol::Schema::Domain"*)** %68, align 8
  call void %69(%"class.v8_inspector::protocol::Schema::Domain"* nonnull %63) #8
  br label %70

70:                                               ; preds = %65, %59
  %71 = icmp eq %"class.std::__1::unique_ptr.92"* %61, %53
  br i1 %71, label %72, label %59

72:                                               ; preds = %70
  %73 = bitcast %"class.std::__1::vector.90"* %4 to i8**
  %74 = load i8*, i8** %73, align 16
  br label %75

75:                                               ; preds = %72, %55
  %76 = phi i8* [ %74, %72 ], [ %56, %55 ]
  store %"class.std::__1::unique_ptr.92"* %53, %"class.std::__1::unique_ptr.92"** %9, align 8
  call void @_ZdlPv(i8* %76) #7
  br label %77

77:                                               ; preds = %3, %50, %75
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %5) #8
  call void @_ZN8v8_crdtp16DispatchResponse7SuccessEv(%"class.v8_crdtp::DispatchResponse"* sret %0) #8
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #4

declare void @_ZN12v8_inspector22V8InspectorSessionImpl20supportedDomainsImplEv(%"class.std::__1::vector.90"* sret, %"class.v8_inspector::V8InspectorSessionImpl"*) local_unnamed_addr #5

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #4

declare void @_ZN8v8_crdtp16DispatchResponse7SuccessEv(%"class.v8_crdtp::DispatchResponse"* sret) local_unnamed_addr #5

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN12v8_inspector8protocol6Schema7Backend7disableEv(%"class.v8_crdtp::DispatchResponse"* noalias sret, %"class.v8_inspector::protocol::Schema::Backend"*) unnamed_addr #2 comdat align 2 {
  tail call void @_ZN8v8_crdtp16DispatchResponse7SuccessEv(%"class.v8_crdtp::DispatchResponse"* sret %0) #8
  ret void
}

; Function Attrs: nobuiltin nofree
declare noalias nonnull i8* @_Znwm(i64) local_unnamed_addr #6

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #4

attributes #0 = { nofree norecurse nounwind ssp uwtable writeonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { norecurse nounwind readnone ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { argmemonly nounwind }
attributes #5 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nobuiltin nofree "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { builtin nounwind }
attributes #8 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
