; ModuleID = '../../ui/accessibility/mojom/ax_relative_bounds_mojom_traits.cc'
source_filename = "../../ui/accessibility/mojom/ax_relative_bounds_mojom_traits.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.gfx::Transform" = type { %class.SkMatrix44 }
%class.SkMatrix44 = type <{ [4 x [4 x float]], i8, [3 x i8] }>
%"struct.ui::AXRelativeBounds" = type { i32 (...)**, i32, %"class.gfx::RectF", %"class.std::__1::unique_ptr" }
%"class.gfx::RectF" = type { %"class.gfx::PointF", %"class.gfx::SizeF" }
%"class.gfx::PointF" = type { float, float }
%"class.gfx::SizeF" = type { float, float }
%"class.std::__1::unique_ptr" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %"class.gfx::Transform"* }
%"class.ax::mojom::internal::AXRelativeBounds_Data" = type { %"struct.mojo::internal::StructHeader", i32, [4 x i8], %"struct.mojo::internal::Pointer", %"struct.mojo::internal::Pointer.1" }
%"struct.mojo::internal::StructHeader" = type { i32, i32 }
%"struct.mojo::internal::Pointer" = type { i64 }
%"struct.mojo::internal::Pointer.1" = type { i64 }
%"class.mojo::Message" = type { %"class.mojo::ScopedHandleBase", %"class.mojo::internal::Buffer", %"class.std::__1::vector", %"class.std::__1::vector.6", %"class.mojo::ConnectionGroup::Ref"*, i8, i8, i8* }
%"class.mojo::ScopedHandleBase" = type { %"class.mojo::MessageHandle" }
%"class.mojo::MessageHandle" = type { i64 }
%"class.mojo::internal::Buffer" = type { %"class.mojo::MessageHandle", i64, i8*, i64, i64 }
%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { %"class.mojo::ScopedHandleBase.2"*, %"class.mojo::ScopedHandleBase.2"*, %"class.std::__1::__compressed_pair.3" }
%"class.mojo::ScopedHandleBase.2" = type { %"class.mojo::Handle" }
%"class.mojo::Handle" = type { i32 }
%"class.std::__1::__compressed_pair.3" = type { %"struct.std::__1::__compressed_pair_elem.4" }
%"struct.std::__1::__compressed_pair_elem.4" = type { %"class.mojo::ScopedHandleBase.2"* }
%"class.std::__1::vector.6" = type { %"class.std::__1::__vector_base.7" }
%"class.std::__1::__vector_base.7" = type { %"class.mojo::ScopedInterfaceEndpointHandle"*, %"class.mojo::ScopedInterfaceEndpointHandle"*, %"class.std::__1::__compressed_pair.8" }
%"class.mojo::ScopedInterfaceEndpointHandle" = type { %class.scoped_refptr }
%class.scoped_refptr = type { %"class.mojo::ScopedInterfaceEndpointHandle::State"* }
%"class.mojo::ScopedInterfaceEndpointHandle::State" = type opaque
%"class.std::__1::__compressed_pair.8" = type { %"struct.std::__1::__compressed_pair_elem.9" }
%"struct.std::__1::__compressed_pair_elem.9" = type { %"class.mojo::ScopedInterfaceEndpointHandle"* }
%"class.mojo::ConnectionGroup::Ref" = type { i32, %class.scoped_refptr.13 }
%class.scoped_refptr.13 = type { %"class.mojo::ConnectionGroup"* }
%"class.mojo::ConnectionGroup" = type <{ i32 (...)**, %"class.base::RefCountedThreadSafe", [4 x i8], %"class.base::RepeatingCallback", %class.scoped_refptr.17, %"class.mojo::ConnectionGroup::Ref", %"struct.std::__1::atomic.19", [4 x i8] }>
%"class.base::RefCountedThreadSafe" = type { %"class.base::subtle::RefCountedThreadSafeBase" }
%"class.base::subtle::RefCountedThreadSafeBase" = type { %"class.base::AtomicRefCount" }
%"class.base::AtomicRefCount" = type { %"struct.std::__1::atomic" }
%"struct.std::__1::atomic" = type { %"struct.std::__1::__atomic_base" }
%"struct.std::__1::__atomic_base" = type { %"struct.std::__1::__atomic_base.14" }
%"struct.std::__1::__atomic_base.14" = type { %"struct.std::__1::__cxx_atomic_impl" }
%"struct.std::__1::__cxx_atomic_impl" = type { %"struct.std::__1::__cxx_atomic_base_impl" }
%"struct.std::__1::__cxx_atomic_base_impl" = type { i32 }
%"class.base::RepeatingCallback" = type { %"class.base::internal::CallbackBaseCopyable" }
%"class.base::internal::CallbackBaseCopyable" = type { %"class.base::internal::CallbackBase" }
%"class.base::internal::CallbackBase" = type { %class.scoped_refptr.15 }
%class.scoped_refptr.15 = type { %"class.base::internal::BindStateBase"* }
%"class.base::internal::BindStateBase" = type { %"class.base::RefCountedThreadSafe.16", void ()*, void (%"class.base::internal::BindStateBase"*)*, i1 (%"class.base::internal::BindStateBase"*, i32)* }
%"class.base::RefCountedThreadSafe.16" = type { %"class.base::subtle::RefCountedThreadSafeBase" }
%class.scoped_refptr.17 = type { %"class.base::SequencedTaskRunner"* }
%"class.base::SequencedTaskRunner" = type { %"class.base::TaskRunner.base", [4 x i8] }
%"class.base::TaskRunner.base" = type <{ i32 (...)**, %"class.base::RefCountedThreadSafe.18" }>
%"class.base::RefCountedThreadSafe.18" = type { %"class.base::subtle::RefCountedThreadSafeBase" }
%"struct.std::__1::atomic.19" = type { %"struct.std::__1::__atomic_base.20" }
%"struct.std::__1::__atomic_base.20" = type { %"struct.std::__1::__atomic_base.21" }
%"struct.std::__1::__atomic_base.21" = type { %"struct.std::__1::__cxx_atomic_impl.22" }
%"struct.std::__1::__cxx_atomic_impl.22" = type { %"struct.std::__1::__cxx_atomic_base_impl.23" }
%"struct.std::__1::__cxx_atomic_base_impl.23" = type { i32 }

@__const._ZN4mojo12StructTraitsIN2ax5mojom24AXRelativeBoundsDataViewEN2ui16AXRelativeBoundsEE4ReadES3_PS5_.transform = private unnamed_addr constant %"class.gfx::Transform" { %class.SkMatrix44 <{ [4 x [4 x float]] [[4 x float] [float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000], [4 x float] [float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000], [4 x float] [float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000], [4 x float] [float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000]], i8 -86, [3 x i8] c"\AA\AA\AA" }> }, align 4
@constinit = private unnamed_addr constant [4 x [4 x float]] [[4 x float] [float 1.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00], [4 x float] [float 0.000000e+00, float 1.000000e+00, float 0.000000e+00, float 0.000000e+00], [4 x float] [float 0.000000e+00, float 0.000000e+00, float 1.000000e+00, float 0.000000e+00], [4 x float] [float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 1.000000e+00]], align 4

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN4mojo12StructTraitsIN2ax5mojom24AXRelativeBoundsDataViewEN2ui16AXRelativeBoundsEE9transformERKS5_(%"class.gfx::Transform"* noalias nocapture sret, %"struct.ui::AXRelativeBounds"* nocapture readonly dereferenceable(40)) local_unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"struct.ui::AXRelativeBounds", %"struct.ui::AXRelativeBounds"* %1, i64 0, i32 3, i32 0, i32 0, i32 0
  %4 = load %"class.gfx::Transform"*, %"class.gfx::Transform"** %3, align 8
  %5 = icmp eq %"class.gfx::Transform"* %4, null
  %6 = bitcast %"class.gfx::Transform"* %0 to i8*
  br i1 %5, label %9, label %7

7:                                                ; preds = %2
  %8 = bitcast %"class.gfx::Transform"* %4 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %6, i8* nonnull align 4 %8, i64 68, i1 false) #5
  br label %11

9:                                                ; preds = %2
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %6, i8* align 4 bitcast ([4 x [4 x float]]* @constinit to i8*), i64 64, i1 false) #5
  %10 = getelementptr inbounds %"class.gfx::Transform", %"class.gfx::Transform"* %0, i64 0, i32 0, i32 1
  store i8 0, i8* %10, align 4
  br label %11

11:                                               ; preds = %9, %7
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN4mojo12StructTraitsIN2ax5mojom24AXRelativeBoundsDataViewEN2ui16AXRelativeBoundsEE4ReadES3_PS5_(%"class.ax::mojom::internal::AXRelativeBounds_Data"*, %"class.mojo::Message"*, %"struct.ui::AXRelativeBounds"* nocapture) local_unnamed_addr #0 align 2 {
  %4 = alloca %"class.gfx::Transform", align 4
  %5 = getelementptr inbounds %"class.ax::mojom::internal::AXRelativeBounds_Data", %"class.ax::mojom::internal::AXRelativeBounds_Data"* %0, i64 0, i32 1
  %6 = load i32, i32* %5, align 1
  %7 = getelementptr inbounds %"struct.ui::AXRelativeBounds", %"struct.ui::AXRelativeBounds"* %2, i64 0, i32 1
  store i32 %6, i32* %7, align 8
  %8 = bitcast %"class.gfx::Transform"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 68, i8* nonnull %8) #5
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %8, i8* align 4 bitcast (%"class.gfx::Transform"* @__const._ZN4mojo12StructTraitsIN2ax5mojom24AXRelativeBoundsDataViewEN2ui16AXRelativeBoundsEE4ReadES3_PS5_.transform to i8*), i64 68, i1 false)
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %8, i8* align 4 bitcast ([4 x [4 x float]]* @constinit to i8*), i64 64, i1 false) #5
  %9 = getelementptr inbounds %"class.gfx::Transform", %"class.gfx::Transform"* %4, i64 0, i32 0, i32 1
  store i8 0, i8* %9, align 4
  %10 = getelementptr inbounds %"class.ax::mojom::internal::AXRelativeBounds_Data", %"class.ax::mojom::internal::AXRelativeBounds_Data"* %0, i64 0, i32 4
  %11 = getelementptr inbounds %"struct.mojo::internal::Pointer.1", %"struct.mojo::internal::Pointer.1"* %10, i64 0, i32 0
  %12 = load i64, i64* %11, align 8
  %13 = icmp eq i64 %12, 0
  br i1 %13, label %40, label %14

14:                                               ; preds = %3
  %15 = bitcast %"struct.mojo::internal::Pointer.1"* %10 to i8*
  %16 = getelementptr inbounds i8, i8* %15, i64 %12
  %17 = getelementptr inbounds i8, i8* %16, i64 8
  %18 = bitcast i8* %17 to i64*
  %19 = load i64, i64* %18, align 8
  %20 = icmp eq i64 %19, 0
  %21 = getelementptr inbounds %"class.gfx::Transform", %"class.gfx::Transform"* %4, i64 0, i32 0
  br i1 %20, label %22, label %23

22:                                               ; preds = %14
  call void @_ZN10SkMatrix4411setIdentityEv(%class.SkMatrix44* nonnull %21) #5
  br label %27

23:                                               ; preds = %14
  %24 = getelementptr inbounds i8, i8* %17, i64 %19
  %25 = getelementptr inbounds i8, i8* %24, i64 8
  %26 = bitcast i8* %25 to float*
  call void @_ZN10SkMatrix4412setColMajorfEPKf(%class.SkMatrix44* nonnull %21, float* %26) #5
  br label %27

27:                                               ; preds = %23, %22
  %28 = load i8, i8* %9, align 4
  %29 = icmp eq i8 %28, 0
  br i1 %29, label %40, label %30

30:                                               ; preds = %27
  %31 = call i8* @_Znwm(i64 68) #6
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %31, i8* nonnull align 4 %8, i64 68, i1 false) #5
  %32 = ptrtoint i8* %31 to i64
  %33 = getelementptr inbounds %"struct.ui::AXRelativeBounds", %"struct.ui::AXRelativeBounds"* %2, i64 0, i32 3
  %34 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %33, i64 0, i32 0, i32 0, i32 0
  %35 = load %"class.gfx::Transform"*, %"class.gfx::Transform"** %34, align 8
  %36 = bitcast %"class.std::__1::unique_ptr"* %33 to i64*
  store i64 %32, i64* %36, align 8
  %37 = icmp eq %"class.gfx::Transform"* %35, null
  br i1 %37, label %40, label %38

38:                                               ; preds = %30
  %39 = bitcast %"class.gfx::Transform"* %35 to i8*
  call void @_ZdlPv(i8* %39) #6
  br label %40

40:                                               ; preds = %3, %30, %38, %27
  %41 = getelementptr inbounds %"struct.ui::AXRelativeBounds", %"struct.ui::AXRelativeBounds"* %2, i64 0, i32 2
  %42 = getelementptr inbounds %"class.ax::mojom::internal::AXRelativeBounds_Data", %"class.ax::mojom::internal::AXRelativeBounds_Data"* %0, i64 0, i32 3
  %43 = getelementptr inbounds %"struct.mojo::internal::Pointer", %"struct.mojo::internal::Pointer"* %42, i64 0, i32 0
  %44 = load i64, i64* %43, align 8
  %45 = icmp eq i64 %44, 0
  %46 = bitcast %"struct.mojo::internal::Pointer"* %42 to i8*
  %47 = getelementptr inbounds i8, i8* %46, i64 %44
  br i1 %45, label %74, label %48

48:                                               ; preds = %40
  %49 = getelementptr inbounds i8, i8* %47, i64 16
  %50 = bitcast i8* %49 to float*
  %51 = load float, float* %50, align 1
  %52 = fcmp olt float %51, 0.000000e+00
  br i1 %52, label %74, label %53

53:                                               ; preds = %48
  %54 = getelementptr inbounds i8, i8* %47, i64 20
  %55 = bitcast i8* %54 to float*
  %56 = load float, float* %55, align 1
  %57 = fcmp olt float %56, 0.000000e+00
  br i1 %57, label %74, label %58

58:                                               ; preds = %53
  %59 = getelementptr inbounds i8, i8* %47, i64 8
  %60 = bitcast i8* %59 to i32*
  %61 = load i32, i32* %60, align 1
  %62 = getelementptr inbounds i8, i8* %47, i64 12
  %63 = bitcast i8* %62 to i32*
  %64 = load i32, i32* %63, align 1
  %65 = bitcast %"class.gfx::RectF"* %41 to i32*
  store i32 %61, i32* %65, align 4
  %66 = getelementptr inbounds %"struct.ui::AXRelativeBounds", %"struct.ui::AXRelativeBounds"* %2, i64 0, i32 2, i32 0, i32 1
  %67 = bitcast float* %66 to i32*
  store i32 %64, i32* %67, align 4
  %68 = fcmp ogt float %51, 0x3EB0000000000000
  %69 = select i1 %68, float %51, float 0.000000e+00
  %70 = getelementptr inbounds %"struct.ui::AXRelativeBounds", %"struct.ui::AXRelativeBounds"* %2, i64 0, i32 2, i32 1, i32 0
  store float %69, float* %70, align 4
  %71 = fcmp ogt float %56, 0x3EB0000000000000
  %72 = select i1 %71, float %56, float 0.000000e+00
  %73 = getelementptr inbounds %"struct.ui::AXRelativeBounds", %"struct.ui::AXRelativeBounds"* %2, i64 0, i32 2, i32 1, i32 1
  store float %72, float* %73, align 4
  br label %74

74:                                               ; preds = %48, %53, %40, %58
  %75 = phi i1 [ false, %48 ], [ false, %53 ], [ true, %40 ], [ true, %58 ]
  call void @llvm.lifetime.end.p0i8(i64 68, i8* nonnull %8) #5
  ret i1 %75
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

declare void @_ZN10SkMatrix4412setColMajorfEPKf(%class.SkMatrix44*, float*) local_unnamed_addr #2

declare void @_ZN10SkMatrix4411setIdentityEv(%class.SkMatrix44*) local_unnamed_addr #2

; Function Attrs: nobuiltin nofree
declare noalias nonnull i8* @_Znwm(i64) local_unnamed_addr #3

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #4

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nobuiltin nofree "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind }
attributes #6 = { builtin nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
