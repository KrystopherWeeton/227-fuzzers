; ModuleID = '../../third_party/libzip/src/lib/zip_source_file_stdio.c'
source_filename = "../../third_party/libzip/src/lib/zip_source_file_stdio.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver fmemopen, fmemopen@GLIBC_2.2.5"
module asm ".symver glob, glob@GLIBC_2.2.5"
module asm ".symver glob64, glob64@GLIBC_2.2.5"
module asm ".symver quick_exit, quick_exit@GLIBC_2.10"

%struct.zip_source_file_operations = type { void (%struct.zip_source_file_context*)*, i64 (%struct.zip_source_file_context*)*, i64 (%struct.zip_source_file_context*)*, i64 (%struct.zip_source_file_context*, i64)*, i1 (%struct.zip_source_file_context*)*, i64 (%struct.zip_source_file_context*, i8*, i64)*, i64 (%struct.zip_source_file_context*)*, void (%struct.zip_source_file_context*)*, i1 (%struct.zip_source_file_context*, i8*, i64, i32)*, i1 (%struct.zip_source_file_context*, %struct.zip_source_file_stat*)*, i8* (%struct.zip_source_file_context*, i8*)*, i64 (%struct.zip_source_file_context*, i8*)*, i64 (%struct.zip_source_file_context*, i8*, i64)* }
%struct.zip_source_file_context = type { %struct.zip_error, i64, i8*, i8*, %struct.zip_stat, %struct.zip_file_attributes, %struct.zip_error, i64, i64, i64, i8*, i8*, %struct.zip_source_file_operations*, i8* }
%struct.zip_stat = type { i64, i8*, i64, i64, i64, i64, i32, i16, i16, i32 }
%struct.zip_file_attributes = type { i64, i8, i8, i8, i8, i32, i16, i16 }
%struct.zip_error = type { i32, i32, i8* }
%struct.zip_source_file_stat = type { i64, i64, i8, i8 }
%struct.zip_source = type { %struct.zip_source*, %union.anon, i8*, %struct.zip_error, i64, i32, i32, i8, %struct.zip*, i32, i8, i8 }
%union.anon = type { i64 (i8*, i8*, i64, i32)* }
%struct.zip = type { %struct.zip_source*, i32, %struct.zip_error, i32, i32, i8*, %struct.zip_string*, %struct.zip_string*, i8, i64, i64, %struct.zip_entry*, i32, i32, %struct.zip_source**, %struct.zip_hash*, %struct.zip_progress* }
%struct.zip_string = type { i8*, i16, i32, i8*, i32 }
%struct.zip_entry = type { %struct.zip_dirent*, %struct.zip_dirent*, %struct.zip_source*, i8 }
%struct.zip_dirent = type { i32, i8, i8, i8, i16, i16, i16, i32, i64, i32, i64, i64, %struct.zip_string*, %struct.zip_extra_field*, %struct.zip_string*, i32, i16, i32, i64, i16, i16, i8* }
%struct.zip_extra_field = type { %struct.zip_extra_field*, i32, i16, i16, i8* }
%struct.zip_hash = type opaque
%struct.zip_progress = type opaque
%struct._IO_FILE = type { i32, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, %struct._IO_marker*, %struct._IO_FILE*, i32, i32, i64, i16, i8, [1 x i8], i8*, i64, %struct._IO_codecvt*, %struct._IO_wide_data*, %struct._IO_FILE*, i8*, i64, i32, [20 x i8] }
%struct._IO_marker = type opaque
%struct._IO_codecvt = type opaque
%struct._IO_wide_data = type opaque
%struct.stat = type { i64, i64, i64, i32, i32, i32, i32, i64, i64, i64, i64, %struct.timespec, %struct.timespec, %struct.timespec, [3 x i64] }
%struct.timespec = type { i64, i64 }
%struct.stat64 = type { i64, i64, i64, i32, i32, i32, i32, i64, i64, i64, i64, %struct.timespec, %struct.timespec, %struct.timespec, [3 x i64] }

@ops_stdio_read = internal global %struct.zip_source_file_operations { void (%struct.zip_source_file_context*)* @_zip_stdio_op_close, i64 (%struct.zip_source_file_context*)* null, i64 (%struct.zip_source_file_context*)* null, i64 (%struct.zip_source_file_context*, i64)* null, i1 (%struct.zip_source_file_context*)* null, i64 (%struct.zip_source_file_context*, i8*, i64)* @_zip_stdio_op_read, i64 (%struct.zip_source_file_context*)* null, void (%struct.zip_source_file_context*)* null, i1 (%struct.zip_source_file_context*, i8*, i64, i32)* @_zip_stdio_op_seek, i1 (%struct.zip_source_file_context*, %struct.zip_source_file_stat*)* @_zip_stdio_op_stat, i8* (%struct.zip_source_file_context*, i8*)* null, i64 (%struct.zip_source_file_context*, i8*)* @_zip_stdio_op_tell, i64 (%struct.zip_source_file_context*, i8*, i64)* null }, align 8
@.str = private unnamed_addr constant [4 x i8] c"r+b\00", align 1
@.str.1 = private unnamed_addr constant [3 x i8] c"rb\00", align 1

; Function Attrs: nounwind ssp uwtable
define hidden %struct.zip_source* @zip_source_filep(%struct.zip*, %struct._IO_FILE*, i64, i64) local_unnamed_addr #0 {
  %5 = icmp eq %struct.zip* %0, null
  br i1 %5, label %15, label %6

6:                                                ; preds = %4
  %7 = getelementptr inbounds %struct.zip, %struct.zip* %0, i64 0, i32 2
  %8 = icmp eq %struct._IO_FILE* %1, null
  %9 = icmp slt i64 %3, -1
  %10 = or i1 %8, %9
  br i1 %10, label %11, label %12

11:                                               ; preds = %6
  tail call void @zip_error_set(%struct.zip_error* %7, i32 18, i32 0) #9
  br label %15

12:                                               ; preds = %6
  %13 = bitcast %struct._IO_FILE* %1 to i8*
  %14 = tail call %struct.zip_source* @zip_source_file_common_new(i8* null, i8* %13, i64 %2, i64 %3, %struct.zip_stat* null, %struct.zip_source_file_operations* nonnull @ops_stdio_read, i8* null, %struct.zip_error* %7) #9
  br label %15

15:                                               ; preds = %12, %11, %4
  %16 = phi %struct.zip_source* [ null, %4 ], [ null, %11 ], [ %14, %12 ]
  ret %struct.zip_source* %16
}

; Function Attrs: nounwind ssp uwtable
define hidden %struct.zip_source* @zip_source_filep_create(%struct._IO_FILE*, i64, i64, %struct.zip_error*) local_unnamed_addr #0 {
  %5 = icmp eq %struct._IO_FILE* %0, null
  %6 = icmp slt i64 %2, -1
  %7 = or i1 %5, %6
  br i1 %7, label %8, label %9

8:                                                ; preds = %4
  tail call void @zip_error_set(%struct.zip_error* %3, i32 18, i32 0) #9
  br label %12

9:                                                ; preds = %4
  %10 = bitcast %struct._IO_FILE* %0 to i8*
  %11 = tail call %struct.zip_source* @zip_source_file_common_new(i8* null, i8* %10, i64 %1, i64 %2, %struct.zip_stat* null, %struct.zip_source_file_operations* nonnull @ops_stdio_read, i8* null, %struct.zip_error* %3) #9
  br label %12

12:                                               ; preds = %9, %8
  %13 = phi %struct.zip_source* [ null, %8 ], [ %11, %9 ]
  ret %struct.zip_source* %13
}

declare void @zip_error_set(%struct.zip_error*, i32, i32) local_unnamed_addr #1

declare %struct.zip_source* @zip_source_file_common_new(i8*, i8*, i64, i64, %struct.zip_stat*, %struct.zip_source_file_operations*, i8*, %struct.zip_error*) local_unnamed_addr #1

; Function Attrs: nofree nounwind ssp uwtable
define hidden void @_zip_stdio_op_close(%struct.zip_source_file_context* nocapture readonly) #2 {
  %2 = getelementptr inbounds %struct.zip_source_file_context, %struct.zip_source_file_context* %0, i64 0, i32 3
  %3 = bitcast i8** %2 to %struct._IO_FILE**
  %4 = load %struct._IO_FILE*, %struct._IO_FILE** %3, align 8
  %5 = tail call i32 @fclose(%struct._IO_FILE* %4)
  ret void
}

; Function Attrs: nofree nounwind
declare i32 @fclose(%struct._IO_FILE* nocapture) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define hidden i64 @_zip_stdio_op_read(%struct.zip_source_file_context*, i8* nocapture, i64) #0 {
  %4 = getelementptr inbounds %struct.zip_source_file_context, %struct.zip_source_file_context* %0, i64 0, i32 3
  %5 = bitcast i8** %4 to %struct._IO_FILE**
  %6 = load %struct._IO_FILE*, %struct._IO_FILE** %5, align 8
  %7 = tail call i64 @fread(i8* %1, i64 1, i64 %2, %struct._IO_FILE* %6)
  %8 = icmp eq i64 %7, 0
  br i1 %8, label %9, label %17

9:                                                ; preds = %3
  %10 = load %struct._IO_FILE*, %struct._IO_FILE** %5, align 8
  %11 = tail call i32 @ferror(%struct._IO_FILE* %10) #9
  %12 = icmp eq i32 %11, 0
  br i1 %12, label %17, label %13

13:                                               ; preds = %9
  %14 = getelementptr inbounds %struct.zip_source_file_context, %struct.zip_source_file_context* %0, i64 0, i32 0
  %15 = tail call i32* @__errno_location() #10
  %16 = load i32, i32* %15, align 4
  tail call void @zip_error_set(%struct.zip_error* %14, i32 5, i32 %16) #9
  br label %17

17:                                               ; preds = %3, %9, %13
  %18 = phi i64 [ -1, %13 ], [ 0, %9 ], [ %7, %3 ]
  ret i64 %18
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #4

; Function Attrs: nofree nounwind
declare i64 @fread(i8* nocapture, i64, i64, %struct._IO_FILE* nocapture) local_unnamed_addr #3

; Function Attrs: nofree nounwind readonly
declare i32 @ferror(%struct._IO_FILE* nocapture) local_unnamed_addr #5

; Function Attrs: nounwind readnone
declare i32* @__errno_location() local_unnamed_addr #6

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #4

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_zip_stdio_op_seek(%struct.zip_source_file_context*, i8* nocapture, i64, i32) #0 {
  %5 = bitcast i8* %1 to %struct._IO_FILE*
  %6 = tail call i32 @fseeko64(%struct._IO_FILE* %5, i64 %2, i32 %3)
  %7 = icmp slt i32 %6, 0
  br i1 %7, label %8, label %12

8:                                                ; preds = %4
  %9 = getelementptr inbounds %struct.zip_source_file_context, %struct.zip_source_file_context* %0, i64 0, i32 0
  %10 = tail call i32* @__errno_location() #10
  %11 = load i32, i32* %10, align 4
  tail call void @zip_error_set(%struct.zip_error* %9, i32 4, i32 %11) #9
  br label %12

12:                                               ; preds = %4, %8
  %13 = phi i1 [ false, %8 ], [ true, %4 ]
  ret i1 %13
}

; Function Attrs: nofree nounwind
declare i32 @fseeko64(%struct._IO_FILE* nocapture, i64, i32) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_zip_stdio_op_stat(%struct.zip_source_file_context*, %struct.zip_source_file_stat* nocapture) #0 {
  %3 = alloca %struct.stat, align 8
  %4 = bitcast %struct.stat* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 144, i8* nonnull %4) #9
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %4, i8 -86, i64 144, i1 false)
  %5 = getelementptr inbounds %struct.zip_source_file_context, %struct.zip_source_file_context* %0, i64 0, i32 2
  %6 = load i8*, i8** %5, align 8
  %7 = icmp eq i8* %6, null
  br i1 %7, label %11, label %8

8:                                                ; preds = %2
  %9 = bitcast %struct.stat* %3 to %struct.stat64*
  %10 = call i32 @__xstat64(i32 1, i8* nonnull %6, %struct.stat64* nonnull %9) #9
  br label %18

11:                                               ; preds = %2
  %12 = getelementptr inbounds %struct.zip_source_file_context, %struct.zip_source_file_context* %0, i64 0, i32 3
  %13 = bitcast i8** %12 to %struct._IO_FILE**
  %14 = load %struct._IO_FILE*, %struct._IO_FILE** %13, align 8
  %15 = tail call i32 @fileno(%struct._IO_FILE* %14) #9
  %16 = bitcast %struct.stat* %3 to %struct.stat64*
  %17 = call i32 @__fxstat64(i32 1, i32 %15, %struct.stat64* nonnull %16) #9
  br label %18

18:                                               ; preds = %11, %8
  %19 = phi i32 [ %10, %8 ], [ %17, %11 ]
  %20 = icmp slt i32 %19, 0
  br i1 %20, label %21, label %29

21:                                               ; preds = %18
  %22 = tail call i32* @__errno_location() #10
  %23 = load i32, i32* %22, align 4
  %24 = icmp eq i32 %23, 2
  br i1 %24, label %25, label %27

25:                                               ; preds = %21
  %26 = getelementptr inbounds %struct.zip_source_file_stat, %struct.zip_source_file_stat* %1, i64 0, i32 2
  store i8 0, i8* %26, align 8
  br label %51

27:                                               ; preds = %21
  %28 = getelementptr inbounds %struct.zip_source_file_context, %struct.zip_source_file_context* %0, i64 0, i32 0
  call void @zip_error_set(%struct.zip_error* %28, i32 5, i32 %23) #9
  br label %51

29:                                               ; preds = %18
  %30 = getelementptr inbounds %struct.stat, %struct.stat* %3, i64 0, i32 8
  %31 = load i64, i64* %30, align 8
  %32 = getelementptr inbounds %struct.zip_source_file_stat, %struct.zip_source_file_stat* %1, i64 0, i32 0
  store i64 %31, i64* %32, align 8
  %33 = getelementptr inbounds %struct.stat, %struct.stat* %3, i64 0, i32 12, i32 0
  %34 = load i64, i64* %33, align 8
  %35 = getelementptr inbounds %struct.zip_source_file_stat, %struct.zip_source_file_stat* %1, i64 0, i32 1
  store i64 %34, i64* %35, align 8
  %36 = getelementptr inbounds %struct.stat, %struct.stat* %3, i64 0, i32 3
  %37 = load i32, i32* %36, align 8
  %38 = and i32 %37, 61440
  %39 = icmp eq i32 %38, 32768
  %40 = getelementptr inbounds %struct.zip_source_file_stat, %struct.zip_source_file_stat* %1, i64 0, i32 3
  %41 = zext i1 %39 to i8
  store i8 %41, i8* %40, align 1
  %42 = getelementptr inbounds %struct.zip_source_file_stat, %struct.zip_source_file_stat* %1, i64 0, i32 2
  store i8 1, i8* %42, align 8
  %43 = getelementptr inbounds %struct.zip_source_file_context, %struct.zip_source_file_context* %0, i64 0, i32 5, i32 0
  store i64 9, i64* %43, align 8
  %44 = getelementptr inbounds %struct.zip_source_file_context, %struct.zip_source_file_context* %0, i64 0, i32 5, i32 2
  store i8 3, i8* %44, align 1
  %45 = shl i32 %37, 16
  %46 = lshr i32 %37, 7
  %47 = and i32 %46, 1
  %48 = or i32 %47, %45
  %49 = xor i32 %48, 1
  %50 = getelementptr inbounds %struct.zip_source_file_context, %struct.zip_source_file_context* %0, i64 0, i32 5, i32 5
  store i32 %49, i32* %50, align 4
  br label %51

51:                                               ; preds = %29, %27, %25
  %52 = phi i1 [ true, %25 ], [ false, %27 ], [ true, %29 ]
  call void @llvm.lifetime.end.p0i8(i64 144, i8* nonnull %4) #9
  ret i1 %52
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #4

; Function Attrs: nofree nounwind
declare i32 @fileno(%struct._IO_FILE* nocapture) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define hidden i64 @_zip_stdio_op_tell(%struct.zip_source_file_context*, i8* nocapture) #0 {
  %3 = bitcast i8* %1 to %struct._IO_FILE*
  %4 = tail call i64 @ftello64(%struct._IO_FILE* %3)
  %5 = icmp slt i64 %4, 0
  br i1 %5, label %6, label %10

6:                                                ; preds = %2
  %7 = getelementptr inbounds %struct.zip_source_file_context, %struct.zip_source_file_context* %0, i64 0, i32 0
  %8 = tail call i32* @__errno_location() #10
  %9 = load i32, i32* %8, align 4
  tail call void @zip_error_set(%struct.zip_error* %7, i32 4, i32 %9) #9
  br label %10

10:                                               ; preds = %6, %2
  ret i64 %4
}

; Function Attrs: nofree nounwind
declare i64 @ftello64(%struct._IO_FILE* nocapture) local_unnamed_addr #3

; Function Attrs: nofree nounwind ssp uwtable
define hidden noalias %struct._IO_FILE* @_zip_fopen_close_on_exec(i8* nocapture readonly, i1 zeroext) local_unnamed_addr #2 {
  %3 = select i1 %1, i32 524290, i32 524288
  %4 = tail call i32 (i8*, i32, ...) @open64(i8* %0, i32 %3, i32 438) #9
  %5 = icmp slt i32 %4, 0
  br i1 %5, label %9, label %6

6:                                                ; preds = %2
  %7 = select i1 %1, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i64 0, i64 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1, i64 0, i64 0)
  %8 = tail call %struct._IO_FILE* @fdopen(i32 %4, i8* %7) #9
  br label %9

9:                                                ; preds = %6, %2
  %10 = phi %struct._IO_FILE* [ null, %2 ], [ %8, %6 ]
  ret %struct._IO_FILE* %10
}

; Function Attrs: nofree
declare i32 @open64(i8* nocapture readonly, i32, ...) local_unnamed_addr #7

; Function Attrs: nofree nounwind
declare noalias %struct._IO_FILE* @fdopen(i32, i8* nocapture readonly) local_unnamed_addr #3

; Function Attrs: nounwind
declare i32 @__xstat64(i32, i8*, %struct.stat64*) local_unnamed_addr #8

; Function Attrs: nounwind
declare i32 @__fxstat64(i32, i32, %struct.stat64*) local_unnamed_addr #8

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nofree nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { argmemonly nounwind }
attributes #5 = { nofree nounwind readonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nounwind readnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { nofree "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #9 = { nounwind }
attributes #10 = { nounwind readnone }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
