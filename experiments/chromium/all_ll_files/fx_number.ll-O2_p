; ModuleID = '../../third_party/pdfium/core/fxcrt/fx_number.cpp'
source_filename = "../../third_party/pdfium/core/fxcrt/fx_number.cpp"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%class.FX_Number = type { i8, i8, %union.anon }
%union.anon = type { i32 }
%"class.fxcrt::StringViewTemplate" = type { %"class.pdfium::span" }
%"class.pdfium::span" = type { %"class.fxcrt::UnownedPtr", i64 }
%"class.fxcrt::UnownedPtr" = type { i8* }

@_ZN9FX_NumberC1Ev = hidden unnamed_addr alias void (%class.FX_Number*), void (%class.FX_Number*)* @_ZN9FX_NumberC2Ev
@_ZN9FX_NumberC1Ei = hidden unnamed_addr alias void (%class.FX_Number*, i32), void (%class.FX_Number*, i32)* @_ZN9FX_NumberC2Ei
@_ZN9FX_NumberC1Ef = hidden unnamed_addr alias void (%class.FX_Number*, float), void (%class.FX_Number*, float)* @_ZN9FX_NumberC2Ef
@_ZN9FX_NumberC1EN5fxcrt18StringViewTemplateIcEE = hidden unnamed_addr alias void (%class.FX_Number*, %"class.fxcrt::StringViewTemplate"*), void (%class.FX_Number*, %"class.fxcrt::StringViewTemplate"*)* @_ZN9FX_NumberC2EN5fxcrt18StringViewTemplateIcEE

; Function Attrs: nofree norecurse nounwind ssp uwtable writeonly
define hidden void @_ZN9FX_NumberC2Ev(%class.FX_Number* nocapture) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %class.FX_Number, %class.FX_Number* %0, i64 0, i32 0
  store i8 1, i8* %2, align 4
  %3 = getelementptr inbounds %class.FX_Number, %class.FX_Number* %0, i64 0, i32 1
  store i8 0, i8* %3, align 1
  %4 = getelementptr inbounds %class.FX_Number, %class.FX_Number* %0, i64 0, i32 2, i32 0
  store i32 0, i32* %4, align 4
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable writeonly
define hidden void @_ZN9FX_NumberC2Ei(%class.FX_Number* nocapture, i32) unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %class.FX_Number, %class.FX_Number* %0, i64 0, i32 0
  store i8 1, i8* %3, align 4
  %4 = getelementptr inbounds %class.FX_Number, %class.FX_Number* %0, i64 0, i32 1
  store i8 1, i8* %4, align 1
  %5 = getelementptr inbounds %class.FX_Number, %class.FX_Number* %0, i64 0, i32 2, i32 0
  store i32 %1, i32* %5, align 4
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable writeonly
define hidden void @_ZN9FX_NumberC2Ef(%class.FX_Number* nocapture, float) unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %class.FX_Number, %class.FX_Number* %0, i64 0, i32 0
  store i8 0, i8* %3, align 4
  %4 = getelementptr inbounds %class.FX_Number, %class.FX_Number* %0, i64 0, i32 1
  store i8 1, i8* %4, align 1
  %5 = getelementptr inbounds %class.FX_Number, %class.FX_Number* %0, i64 0, i32 2
  %6 = bitcast %union.anon* %5 to float*
  store float %1, float* %6, align 4
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN9FX_NumberC2EN5fxcrt18StringViewTemplateIcEE(%class.FX_Number* nocapture, %"class.fxcrt::StringViewTemplate"* nocapture readonly) unnamed_addr #1 align 2 {
  %3 = alloca %"class.fxcrt::StringViewTemplate", align 8
  %4 = getelementptr inbounds %class.FX_Number, %class.FX_Number* %0, i64 0, i32 0
  store i8 1, i8* %4, align 4
  %5 = getelementptr inbounds %class.FX_Number, %class.FX_Number* %0, i64 0, i32 1
  store i8 0, i8* %5, align 1
  %6 = getelementptr inbounds %class.FX_Number, %class.FX_Number* %0, i64 0, i32 2
  %7 = getelementptr inbounds %union.anon, %union.anon* %6, i64 0, i32 0
  store i32 0, i32* %7, align 4
  %8 = getelementptr inbounds %"class.fxcrt::StringViewTemplate", %"class.fxcrt::StringViewTemplate"* %1, i64 0, i32 0, i32 1
  %9 = load i64, i64* %8, align 8
  %10 = icmp eq i64 %9, 0
  br i1 %10, label %83, label %11

11:                                               ; preds = %2
  %12 = getelementptr inbounds %"class.fxcrt::StringViewTemplate", %"class.fxcrt::StringViewTemplate"* %1, i64 0, i32 0, i32 0, i32 0
  %13 = load i8*, i8** %12, align 8
  %14 = tail call i8* @memchr(i8* %13, i32 46, i64 %9) #7
  %15 = icmp eq i8* %14, null
  br i1 %15, label %21, label %16

16:                                               ; preds = %11
  store i8 0, i8* %4, align 4
  store i8 1, i8* %5, align 1
  %17 = bitcast %"class.fxcrt::StringViewTemplate"* %3 to i8*
  %18 = bitcast %"class.fxcrt::StringViewTemplate"* %1 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %17, i8* align 8 %18, i64 16, i1 false)
  %19 = call float @_Z13StringToFloatN5fxcrt18StringViewTemplateIcEE(%"class.fxcrt::StringViewTemplate"* nonnull %3) #8
  %20 = bitcast %union.anon* %6 to float*
  store float %19, float* %20, align 4
  br label %83

21:                                               ; preds = %11
  %22 = load i8, i8* %13, align 1
  switch i8 %22, label %26 [
    i8 43, label %24
    i8 45, label %23
  ]

23:                                               ; preds = %21
  br label %24

24:                                               ; preds = %21, %23
  %25 = phi i1 [ true, %23 ], [ false, %21 ]
  store i8 1, i8* %5, align 1
  br label %26

26:                                               ; preds = %24, %21
  %27 = phi i8 [ 0, %21 ], [ 1, %24 ]
  %28 = phi i64 [ 0, %21 ], [ 1, %24 ]
  %29 = phi i1 [ false, %21 ], [ %25, %24 ]
  %30 = load i64, i64* %8, align 8
  %31 = icmp ult i64 %28, %30
  br i1 %31, label %32, label %70

32:                                               ; preds = %26
  %33 = load i8*, i8** %12, align 8
  br label %34

34:                                               ; preds = %32, %60
  %35 = phi i64 [ %28, %32 ], [ %63, %60 ]
  %36 = phi i8 [ 1, %32 ], [ %62, %60 ]
  %37 = phi i32 [ 0, %32 ], [ %61, %60 ]
  %38 = getelementptr inbounds i8, i8* %33, i64 %35
  %39 = load i8, i8* %38, align 1
  %40 = zext i8 %39 to i32
  %41 = add nsw i32 %40, -48
  %42 = icmp ult i32 %41, 10
  br i1 %42, label %43, label %65

43:                                               ; preds = %34
  %44 = icmp eq i8 %36, 0
  br i1 %44, label %60, label %45

45:                                               ; preds = %43
  %46 = tail call { i32, i1 } @llvm.umul.with.overflow.i32(i32 %37, i32 10) #8
  %47 = extractvalue { i32, i1 } %46, 1
  br i1 %47, label %60, label %48

48:                                               ; preds = %45
  %49 = extractvalue { i32, i1 } %46, 0
  %50 = zext i32 %49 to i33
  %51 = sext i32 %41 to i33
  %52 = tail call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %50, i33 %51) #8
  %53 = extractvalue { i33, i1 } %52, 1
  %54 = extractvalue { i33, i1 } %52, 0
  %55 = icmp slt i33 %54, 0
  %56 = or i1 %53, %55
  %57 = xor i1 %56, true
  %58 = trunc i33 %54 to i32
  %59 = zext i1 %57 to i8
  br label %60

60:                                               ; preds = %43, %45, %48
  %61 = phi i32 [ %58, %48 ], [ 0, %45 ], [ 0, %43 ]
  %62 = phi i8 [ %59, %48 ], [ 0, %45 ], [ 0, %43 ]
  %63 = add nuw i64 %35, 1
  %64 = icmp ult i64 %63, %30
  br i1 %64, label %34, label %65

65:                                               ; preds = %34, %60
  %66 = phi i32 [ %37, %34 ], [ %61, %60 ]
  %67 = phi i8 [ %36, %34 ], [ %62, %60 ]
  %68 = icmp eq i8 %67, 0
  %69 = select i1 %68, i32 0, i32 %66
  br label %70

70:                                               ; preds = %65, %26
  %71 = phi i32 [ 0, %26 ], [ %69, %65 ]
  %72 = icmp eq i8 %27, 0
  br i1 %72, label %81, label %73

73:                                               ; preds = %70
  %74 = select i1 %29, i32 -2147483648, i32 2147483647
  %75 = icmp ugt i32 %71, %74
  %76 = select i1 %75, i32 0, i32 %71
  br i1 %29, label %77, label %81

77:                                               ; preds = %73
  %78 = icmp eq i32 %76, -2147483648
  %79 = sub nsw i32 0, %76
  %80 = select i1 %78, i32 -2147483648, i32 %79, !prof !2
  br label %81

81:                                               ; preds = %77, %73, %70
  %82 = phi i32 [ %71, %70 ], [ %80, %77 ], [ %76, %73 ]
  store i32 %82, i32* %7, align 4
  br label %83

83:                                               ; preds = %2, %81, %16
  ret void
}

declare float @_Z13StringToFloatN5fxcrt18StringViewTemplateIcEE(%"class.fxcrt::StringViewTemplate"*) local_unnamed_addr #2

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #3

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden i32 @_ZNK9FX_Number9GetSignedEv(%class.FX_Number* nocapture readonly) local_unnamed_addr #4 align 2 {
  %2 = getelementptr inbounds %class.FX_Number, %class.FX_Number* %0, i64 0, i32 0
  %3 = load i8, i8* %2, align 4, !range !3
  %4 = icmp eq i8 %3, 0
  %5 = getelementptr inbounds %class.FX_Number, %class.FX_Number* %0, i64 0, i32 2
  br i1 %4, label %9, label %6

6:                                                ; preds = %1
  %7 = getelementptr inbounds %union.anon, %union.anon* %5, i64 0, i32 0
  %8 = load i32, i32* %7, align 4
  br label %13

9:                                                ; preds = %1
  %10 = bitcast %union.anon* %5 to float*
  %11 = load float, float* %10, align 4
  %12 = fptosi float %11 to i32
  br label %13

13:                                               ; preds = %9, %6
  %14 = phi i32 [ %8, %6 ], [ %12, %9 ]
  ret i32 %14
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden float @_ZNK9FX_Number8GetFloatEv(%class.FX_Number* nocapture readonly) local_unnamed_addr #4 align 2 {
  %2 = getelementptr inbounds %class.FX_Number, %class.FX_Number* %0, i64 0, i32 0
  %3 = load i8, i8* %2, align 4, !range !3
  %4 = icmp eq i8 %3, 0
  br i1 %4, label %5, label %9

5:                                                ; preds = %1
  %6 = getelementptr inbounds %class.FX_Number, %class.FX_Number* %0, i64 0, i32 2
  %7 = bitcast %union.anon* %6 to float*
  %8 = load float, float* %7, align 4
  br label %18

9:                                                ; preds = %1
  %10 = getelementptr inbounds %class.FX_Number, %class.FX_Number* %0, i64 0, i32 1
  %11 = load i8, i8* %10, align 1, !range !3
  %12 = icmp eq i8 %11, 0
  %13 = getelementptr inbounds %class.FX_Number, %class.FX_Number* %0, i64 0, i32 2, i32 0
  %14 = load i32, i32* %13, align 4
  %15 = sitofp i32 %14 to float
  %16 = uitofp i32 %14 to float
  %17 = select i1 %12, float %16, float %15
  br label %18

18:                                               ; preds = %9, %5
  %19 = phi float [ %17, %9 ], [ %8, %5 ]
  ret float %19
}

; Function Attrs: nounwind readnone speculatable
declare { i33, i1 } @llvm.sadd.with.overflow.i33(i33, i33) #5

; Function Attrs: nounwind readnone speculatable
declare { i32, i1 } @llvm.umul.with.overflow.i32(i32, i32) #5

; Function Attrs: nofree nounwind readonly
declare i8* @memchr(i8*, i32, i64) local_unnamed_addr #6

attributes #0 = { nofree norecurse nounwind ssp uwtable writeonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { argmemonly nounwind }
attributes #4 = { norecurse nounwind readonly ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind readnone speculatable }
attributes #6 = { nofree nounwind readonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { nounwind readonly }
attributes #8 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{!"branch_weights", i32 1, i32 2000}
!3 = !{i8 0, i8 2}
