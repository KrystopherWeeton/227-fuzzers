; ModuleID = '../../third_party/libaom/source/libaom/aom_dsp/x86/variance_impl_ssse3.c'
source_filename = "../../third_party/libaom/source/libaom/aom_dsp/x86/variance_impl_ssse3.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

; Function Attrs: nofree nounwind ssp uwtable
define hidden void @aom_var_filter_block2d_bil_first_pass_ssse3(i8* nocapture readonly, i16* nocapture, i32, i32, i32, i32, i8* nocapture readonly) local_unnamed_addr #0 {
  %8 = bitcast i8* %6 to <2 x i8>*
  %9 = load <2 x i8>, <2 x i8>* %8, align 1
  %10 = lshr <2 x i8> %9, <i8 1, i8 1>
  %11 = shufflevector <2 x i8> %10, <2 x i8> undef, <16 x i32> <i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1>
  %12 = icmp ugt i32 %5, 7
  %13 = icmp ne i32 %4, 0
  br i1 %12, label %22, label %14

14:                                               ; preds = %7
  br i1 %13, label %15, label %104

15:                                               ; preds = %14
  %16 = zext i32 %2 to i64
  %17 = zext i32 %5 to i64
  %18 = and i32 %4, 1
  %19 = icmp eq i32 %4, 1
  br i1 %19, label %88, label %20

20:                                               ; preds = %15
  %21 = sub i32 %4, %18
  br label %56

22:                                               ; preds = %7
  br i1 %13, label %23, label %104

23:                                               ; preds = %22
  %24 = sub i32 %2, %5
  %25 = zext i32 %24 to i64
  br label %26

26:                                               ; preds = %52, %23
  %27 = phi i8* [ %0, %23 ], [ %53, %52 ]
  %28 = phi i16* [ %1, %23 ], [ %49, %52 ]
  %29 = phi i32 [ 0, %23 ], [ %54, %52 ]
  br label %30

30:                                               ; preds = %26, %30
  %31 = phi i8* [ %48, %30 ], [ %27, %26 ]
  %32 = phi i16* [ %49, %30 ], [ %28, %26 ]
  %33 = phi i32 [ %50, %30 ], [ 0, %26 ]
  %34 = bitcast i8* %31 to i64*
  %35 = load i64, i64* %34, align 1
  %36 = insertelement <2 x i64> undef, i64 %35, i32 0
  %37 = getelementptr inbounds i8, i8* %31, i64 1
  %38 = bitcast i8* %37 to i64*
  %39 = load i64, i64* %38, align 1
  %40 = insertelement <2 x i64> undef, i64 %39, i32 0
  %41 = bitcast <2 x i64> %36 to <16 x i8>
  %42 = bitcast <2 x i64> %40 to <16 x i8>
  %43 = shufflevector <16 x i8> %41, <16 x i8> %42, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %44 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %43, <16 x i8> %11) #2
  %45 = add <8 x i16> %44, <i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32>
  %46 = ashr <8 x i16> %45, <i16 6, i16 6, i16 6, i16 6, i16 6, i16 6, i16 6, i16 6>
  %47 = bitcast i16* %32 to <8 x i16>*
  store <8 x i16> %46, <8 x i16>* %47, align 1
  %48 = getelementptr inbounds i8, i8* %31, i64 8
  %49 = getelementptr inbounds i16, i16* %32, i64 8
  %50 = add i32 %33, 8
  %51 = icmp ult i32 %50, %5
  br i1 %51, label %30, label %52

52:                                               ; preds = %30
  %53 = getelementptr inbounds i8, i8* %48, i64 %25
  %54 = add nuw i32 %29, 1
  %55 = icmp eq i32 %54, %4
  br i1 %55, label %104, label %26

56:                                               ; preds = %56, %20
  %57 = phi i8* [ %0, %20 ], [ %84, %56 ]
  %58 = phi i16* [ %1, %20 ], [ %85, %56 ]
  %59 = phi i32 [ %21, %20 ], [ %86, %56 ]
  %60 = bitcast i8* %57 to i64*
  %61 = load i64, i64* %60, align 1
  %62 = insertelement <2 x i64> <i64 undef, i64 0>, i64 %61, i32 0
  %63 = bitcast <2 x i64> %62 to <16 x i8>
  %64 = shufflevector <16 x i8> %63, <16 x i8> undef, <16 x i32> <i32 0, i32 1, i32 1, i32 2, i32 2, i32 3, i32 3, i32 4, i32 4, i32 5, i32 5, i32 6, i32 6, i32 7, i32 7, i32 8>
  %65 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %64, <16 x i8> %11) #2
  %66 = add <8 x i16> %65, <i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32>
  %67 = ashr <8 x i16> %66, <i16 6, i16 6, i16 6, i16 6, i16 6, i16 6, i16 6, i16 6>
  %68 = bitcast <8 x i16> %67 to <2 x i64>
  %69 = extractelement <2 x i64> %68, i32 0
  %70 = bitcast i16* %58 to i64*
  store i64 %69, i64* %70, align 1
  %71 = getelementptr inbounds i8, i8* %57, i64 %16
  %72 = getelementptr inbounds i16, i16* %58, i64 %17
  %73 = bitcast i8* %71 to i64*
  %74 = load i64, i64* %73, align 1
  %75 = insertelement <2 x i64> <i64 undef, i64 0>, i64 %74, i32 0
  %76 = bitcast <2 x i64> %75 to <16 x i8>
  %77 = shufflevector <16 x i8> %76, <16 x i8> undef, <16 x i32> <i32 0, i32 1, i32 1, i32 2, i32 2, i32 3, i32 3, i32 4, i32 4, i32 5, i32 5, i32 6, i32 6, i32 7, i32 7, i32 8>
  %78 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %77, <16 x i8> %11) #2
  %79 = add <8 x i16> %78, <i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32>
  %80 = ashr <8 x i16> %79, <i16 6, i16 6, i16 6, i16 6, i16 6, i16 6, i16 6, i16 6>
  %81 = bitcast <8 x i16> %80 to <2 x i64>
  %82 = extractelement <2 x i64> %81, i32 0
  %83 = bitcast i16* %72 to i64*
  store i64 %82, i64* %83, align 1
  %84 = getelementptr inbounds i8, i8* %71, i64 %16
  %85 = getelementptr inbounds i16, i16* %72, i64 %17
  %86 = add i32 %59, -2
  %87 = icmp eq i32 %86, 0
  br i1 %87, label %88, label %56

88:                                               ; preds = %56, %15
  %89 = phi i8* [ %0, %15 ], [ %84, %56 ]
  %90 = phi i16* [ %1, %15 ], [ %85, %56 ]
  %91 = icmp eq i32 %18, 0
  br i1 %91, label %104, label %92

92:                                               ; preds = %88
  %93 = bitcast i8* %89 to i64*
  %94 = load i64, i64* %93, align 1
  %95 = insertelement <2 x i64> <i64 undef, i64 0>, i64 %94, i32 0
  %96 = bitcast <2 x i64> %95 to <16 x i8>
  %97 = shufflevector <16 x i8> %96, <16 x i8> undef, <16 x i32> <i32 0, i32 1, i32 1, i32 2, i32 2, i32 3, i32 3, i32 4, i32 4, i32 5, i32 5, i32 6, i32 6, i32 7, i32 7, i32 8>
  %98 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %97, <16 x i8> %11) #2
  %99 = add <8 x i16> %98, <i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32>
  %100 = ashr <8 x i16> %99, <i16 6, i16 6, i16 6, i16 6, i16 6, i16 6, i16 6, i16 6>
  %101 = bitcast <8 x i16> %100 to <2 x i64>
  %102 = extractelement <2 x i64> %101, i32 0
  %103 = bitcast i16* %90 to i64*
  store i64 %102, i64* %103, align 1
  br label %104

104:                                              ; preds = %92, %88, %52, %14, %22
  ret void
}

; Function Attrs: nofree nounwind ssp uwtable
define hidden void @aom_var_filter_block2d_bil_second_pass_ssse3(i16* nocapture readonly, i8* nocapture, i32, i32, i32, i32, i8* nocapture readonly) local_unnamed_addr #0 {
  %8 = bitcast i8* %6 to <2 x i8>*
  %9 = load <2 x i8>, <2 x i8>* %8, align 1
  %10 = zext <2 x i8> %9 to <2 x i16>
  %11 = shufflevector <2 x i16> %10, <2 x i16> undef, <8 x i32> <i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1>
  %12 = icmp eq i32 %4, 0
  br i1 %12, label %54, label %13

13:                                               ; preds = %7
  %14 = icmp eq i32 %5, 0
  %15 = zext i32 %3 to i64
  %16 = sub i32 %2, %5
  %17 = zext i32 %16 to i64
  br label %18

18:                                               ; preds = %48, %13
  %19 = phi i16* [ %0, %13 ], [ %51, %48 ]
  %20 = phi i8* [ %1, %13 ], [ %49, %48 ]
  %21 = phi i32 [ 0, %13 ], [ %52, %48 ]
  br i1 %14, label %48, label %22

22:                                               ; preds = %18, %22
  %23 = phi i16* [ %44, %22 ], [ %19, %18 ]
  %24 = phi i8* [ %45, %22 ], [ %20, %18 ]
  %25 = phi i32 [ %46, %22 ], [ 0, %18 ]
  %26 = bitcast i16* %23 to i64*
  %27 = load i64, i64* %26, align 1
  %28 = insertelement <2 x i64> undef, i64 %27, i32 0
  %29 = getelementptr inbounds i16, i16* %23, i64 %15
  %30 = bitcast i16* %29 to i64*
  %31 = load i64, i64* %30, align 1
  %32 = insertelement <2 x i64> %28, i64 %31, i32 1
  %33 = bitcast <2 x i64> %32 to <16 x i8>
  %34 = shufflevector <16 x i8> %33, <16 x i8> undef, <16 x i32> <i32 0, i32 1, i32 8, i32 9, i32 2, i32 3, i32 10, i32 11, i32 4, i32 5, i32 12, i32 13, i32 6, i32 7, i32 14, i32 15>
  %35 = bitcast <16 x i8> %34 to <8 x i16>
  %36 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %35, <8 x i16> %11) #2
  %37 = add <4 x i32> %36, <i32 64, i32 64, i32 64, i32 64>
  %38 = ashr <4 x i32> %37, <i32 7, i32 7, i32 7, i32 7>
  %39 = bitcast <4 x i32> %38 to <16 x i8>
  %40 = shufflevector <16 x i8> %39, <16 x i8> undef, <16 x i32> <i32 0, i32 4, i32 8, i32 12, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %41 = bitcast <16 x i8> %40 to <4 x i32>
  %42 = extractelement <4 x i32> %41, i32 0
  %43 = bitcast i8* %24 to i32*
  store i32 %42, i32* %43, align 1
  %44 = getelementptr inbounds i16, i16* %23, i64 4
  %45 = getelementptr inbounds i8, i8* %24, i64 4
  %46 = add i32 %25, 4
  %47 = icmp ult i32 %46, %5
  br i1 %47, label %22, label %48

48:                                               ; preds = %22, %18
  %49 = phi i8* [ %20, %18 ], [ %45, %22 ]
  %50 = phi i16* [ %19, %18 ], [ %44, %22 ]
  %51 = getelementptr inbounds i16, i16* %50, i64 %17
  %52 = add nuw i32 %21, 1
  %53 = icmp eq i32 %52, %4
  br i1 %53, label %54, label %18

54:                                               ; preds = %48, %7
  ret void
}

; Function Attrs: nounwind readnone
declare <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8>, <16 x i8>) #1

; Function Attrs: nounwind readnone
declare <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16>, <8 x i16>) #1

attributes #0 = { nofree nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="128" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+ssse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind readnone }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
