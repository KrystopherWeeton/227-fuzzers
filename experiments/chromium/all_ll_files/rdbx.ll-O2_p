; ModuleID = '../../third_party/libsrtp/crypto/replay/rdbx.c'
source_filename = "../../third_party/libsrtp/crypto/replay/rdbx.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.srtp_rdbx_t = type { i64, %struct.bitvector_t }
%struct.bitvector_t = type { i32, i32* }

; Function Attrs: nofree norecurse nounwind ssp uwtable writeonly
define hidden void @srtp_index_init(i64* nocapture) local_unnamed_addr #0 {
  store i64 0, i64* %0, align 8
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @srtp_index_advance(i64* nocapture, i16 zeroext) local_unnamed_addr #1 {
  %3 = zext i16 %1 to i64
  %4 = load i64, i64* %0, align 8
  %5 = add i64 %4, %3
  store i64 %5, i64* %0, align 8
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden i32 @srtp_index_guess(i64* nocapture readonly, i64* nocapture, i16 zeroext) local_unnamed_addr #1 {
  %4 = load i64, i64* %0, align 8
  %5 = lshr i64 %4, 16
  %6 = trunc i64 %4 to i32
  %7 = and i32 %6, 65535
  %8 = icmp ult i32 %7, 32768
  br i1 %8, label %9, label %16

9:                                                ; preds = %3
  %10 = zext i16 %2 to i32
  %11 = sub nsw i32 %10, %7
  %12 = icmp sgt i32 %11, 32768
  br i1 %12, label %13, label %26

13:                                               ; preds = %9
  %14 = add nsw i64 %5, -1
  %15 = add nuw nsw i32 %11, -65536
  br label %26

16:                                               ; preds = %3
  %17 = add nsw i32 %7, -32768
  %18 = zext i16 %2 to i32
  %19 = icmp sgt i32 %17, %18
  br i1 %19, label %20, label %24

20:                                               ; preds = %16
  %21 = add nuw nsw i64 %5, 1
  %22 = or i32 %18, 65536
  %23 = sub nuw nsw i32 %22, %7
  br label %26

24:                                               ; preds = %16
  %25 = sub nsw i32 %18, %7
  br label %26

26:                                               ; preds = %9, %20, %24, %13
  %27 = phi i64 [ %14, %13 ], [ %21, %20 ], [ %5, %24 ], [ %5, %9 ]
  %28 = phi i32 [ %15, %13 ], [ %23, %20 ], [ %25, %24 ], [ %11, %9 ]
  %29 = shl i64 %27, 16
  %30 = and i64 %29, 281474976645120
  %31 = zext i16 %2 to i64
  %32 = or i64 %30, %31
  store i64 %32, i64* %1, align 8
  ret i32 %28
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @srtp_rdbx_init(%struct.srtp_rdbx_t*, i64) local_unnamed_addr #2 {
  %3 = icmp eq i64 %1, 0
  br i1 %3, label %10, label %4

4:                                                ; preds = %2
  %5 = getelementptr inbounds %struct.srtp_rdbx_t, %struct.srtp_rdbx_t* %0, i64 0, i32 1
  %6 = tail call i32 @bitvector_alloc(%struct.bitvector_t* %5, i64 %1) #5
  %7 = icmp eq i32 %6, 0
  br i1 %7, label %8, label %10

8:                                                ; preds = %4
  %9 = getelementptr inbounds %struct.srtp_rdbx_t, %struct.srtp_rdbx_t* %0, i64 0, i32 0
  store i64 0, i64* %9, align 8
  br label %10

10:                                               ; preds = %4, %2, %8
  %11 = phi i32 [ 0, %8 ], [ 2, %2 ], [ 3, %4 ]
  ret i32 %11
}

declare i32 @bitvector_alloc(%struct.bitvector_t*, i64) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define hidden i32 @srtp_rdbx_dealloc(%struct.srtp_rdbx_t*) local_unnamed_addr #2 {
  %2 = getelementptr inbounds %struct.srtp_rdbx_t, %struct.srtp_rdbx_t* %0, i64 0, i32 1
  tail call void @bitvector_dealloc(%struct.bitvector_t* %2) #5
  ret i32 0
}

declare void @bitvector_dealloc(%struct.bitvector_t*) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define hidden i32 @srtp_rdbx_set_roc(%struct.srtp_rdbx_t*, i32) local_unnamed_addr #2 {
  %3 = getelementptr inbounds %struct.srtp_rdbx_t, %struct.srtp_rdbx_t* %0, i64 0, i32 1
  tail call void @bitvector_set_to_zero(%struct.bitvector_t* %3) #5
  %4 = zext i32 %1 to i64
  %5 = getelementptr inbounds %struct.srtp_rdbx_t, %struct.srtp_rdbx_t* %0, i64 0, i32 0
  %6 = load i64, i64* %5, align 8
  %7 = lshr i64 %6, 16
  %8 = icmp ugt i64 %7, %4
  br i1 %8, label %13, label %9

9:                                                ; preds = %2
  %10 = and i64 %6, 65535
  %11 = shl nuw nsw i64 %4, 16
  %12 = or i64 %10, %11
  store i64 %12, i64* %5, align 8
  br label %13

13:                                               ; preds = %2, %9
  %14 = phi i32 [ 0, %9 ], [ 10, %2 ]
  ret i32 %14
}

declare void @bitvector_set_to_zero(%struct.bitvector_t*) local_unnamed_addr #3

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden i64 @srtp_rdbx_get_packet_index(%struct.srtp_rdbx_t* nocapture readonly) local_unnamed_addr #4 {
  %2 = getelementptr inbounds %struct.srtp_rdbx_t, %struct.srtp_rdbx_t* %0, i64 0, i32 0
  %3 = load i64, i64* %2, align 8
  ret i64 %3
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden i64 @srtp_rdbx_get_window_size(%struct.srtp_rdbx_t* nocapture readonly) local_unnamed_addr #4 {
  %2 = getelementptr inbounds %struct.srtp_rdbx_t, %struct.srtp_rdbx_t* %0, i64 0, i32 1, i32 0
  %3 = load i32, i32* %2, align 8
  %4 = zext i32 %3 to i64
  ret i64 %4
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden i32 @srtp_rdbx_check(%struct.srtp_rdbx_t* nocapture readonly, i32) local_unnamed_addr #4 {
  %3 = icmp sgt i32 %1, 0
  br i1 %3, label %22, label %4

4:                                                ; preds = %2
  %5 = getelementptr inbounds %struct.srtp_rdbx_t, %struct.srtp_rdbx_t* %0, i64 0, i32 1, i32 0
  %6 = load i32, i32* %5, align 8
  %7 = add i32 %1, -1
  %8 = add i32 %7, %6
  %9 = icmp slt i32 %8, 0
  br i1 %9, label %22, label %10

10:                                               ; preds = %4
  %11 = getelementptr inbounds %struct.srtp_rdbx_t, %struct.srtp_rdbx_t* %0, i64 0, i32 1, i32 1
  %12 = load i32*, i32** %11, align 8
  %13 = lshr i32 %8, 5
  %14 = zext i32 %13 to i64
  %15 = getelementptr inbounds i32, i32* %12, i64 %14
  %16 = load i32, i32* %15, align 4
  %17 = and i32 %8, 31
  %18 = shl i32 1, %17
  %19 = and i32 %16, %18
  %20 = icmp eq i32 %19, 0
  %21 = select i1 %20, i32 0, i32 9
  br label %22

22:                                               ; preds = %10, %4, %2
  %23 = phi i32 [ 0, %2 ], [ 10, %4 ], [ %21, %10 ]
  ret i32 %23
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @srtp_rdbx_add_index(%struct.srtp_rdbx_t*, i32) local_unnamed_addr #2 {
  %3 = icmp sgt i32 %1, 0
  br i1 %3, label %4, label %14

4:                                                ; preds = %2
  %5 = getelementptr inbounds %struct.srtp_rdbx_t, %struct.srtp_rdbx_t* %0, i64 0, i32 0
  %6 = and i32 %1, 65535
  %7 = zext i32 %6 to i64
  %8 = load i64, i64* %5, align 8
  %9 = add i64 %8, %7
  store i64 %9, i64* %5, align 8
  %10 = getelementptr inbounds %struct.srtp_rdbx_t, %struct.srtp_rdbx_t* %0, i64 0, i32 1
  tail call void @bitvector_left_shift(%struct.bitvector_t* %10, i32 %1) #5
  %11 = getelementptr inbounds %struct.bitvector_t, %struct.bitvector_t* %10, i64 0, i32 0
  %12 = load i32, i32* %11, align 8
  %13 = add i32 %12, -1
  br label %19

14:                                               ; preds = %2
  %15 = getelementptr inbounds %struct.srtp_rdbx_t, %struct.srtp_rdbx_t* %0, i64 0, i32 1, i32 0
  %16 = load i32, i32* %15, align 8
  %17 = add i32 %1, -1
  %18 = add i32 %17, %16
  br label %19

19:                                               ; preds = %14, %4
  %20 = phi i32 [ %18, %14 ], [ %13, %4 ]
  %21 = and i32 %20, 31
  %22 = shl i32 1, %21
  %23 = getelementptr inbounds %struct.srtp_rdbx_t, %struct.srtp_rdbx_t* %0, i64 0, i32 1, i32 1
  %24 = load i32*, i32** %23, align 8
  %25 = lshr i32 %20, 5
  %26 = zext i32 %25 to i64
  %27 = getelementptr inbounds i32, i32* %24, i64 %26
  %28 = load i32, i32* %27, align 4
  %29 = or i32 %22, %28
  store i32 %29, i32* %27, align 4
  ret i32 0
}

declare void @bitvector_left_shift(%struct.bitvector_t*, i32) local_unnamed_addr #3

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden i32 @srtp_rdbx_estimate_index(%struct.srtp_rdbx_t* nocapture readonly, i64* nocapture, i16 zeroext) local_unnamed_addr #1 {
  %4 = getelementptr inbounds %struct.srtp_rdbx_t, %struct.srtp_rdbx_t* %0, i64 0, i32 0
  %5 = load i64, i64* %4, align 8
  %6 = icmp ugt i64 %5, 32768
  br i1 %6, label %7, label %36

7:                                                ; preds = %3
  %8 = lshr i64 %5, 16
  %9 = trunc i64 %5 to i32
  %10 = and i32 %9, 65535
  %11 = icmp ult i32 %10, 32768
  br i1 %11, label %12, label %19

12:                                               ; preds = %7
  %13 = zext i16 %2 to i32
  %14 = sub nsw i32 %13, %10
  %15 = icmp sgt i32 %14, 32768
  br i1 %15, label %16, label %29

16:                                               ; preds = %12
  %17 = add nsw i64 %8, -1
  %18 = add nuw nsw i32 %14, -65536
  br label %29

19:                                               ; preds = %7
  %20 = add nsw i32 %10, -32768
  %21 = zext i16 %2 to i32
  %22 = icmp sgt i32 %20, %21
  br i1 %22, label %23, label %27

23:                                               ; preds = %19
  %24 = add nuw nsw i64 %8, 1
  %25 = or i32 %21, 65536
  %26 = sub nuw nsw i32 %25, %10
  br label %29

27:                                               ; preds = %19
  %28 = sub nsw i32 %21, %10
  br label %29

29:                                               ; preds = %12, %16, %23, %27
  %30 = phi i64 [ %17, %16 ], [ %24, %23 ], [ %8, %27 ], [ %8, %12 ]
  %31 = phi i32 [ %18, %16 ], [ %26, %23 ], [ %28, %27 ], [ %14, %12 ]
  %32 = shl i64 %30, 16
  %33 = and i64 %32, 281474976645120
  %34 = zext i16 %2 to i64
  %35 = or i64 %33, %34
  store i64 %35, i64* %1, align 8
  br label %43

36:                                               ; preds = %3
  %37 = zext i16 %2 to i64
  store i64 %37, i64* %1, align 8
  %38 = zext i16 %2 to i32
  %39 = load i64, i64* %4, align 8
  %40 = trunc i64 %39 to i32
  %41 = and i32 %40, 65535
  %42 = sub nsw i32 %38, %41
  br label %43

43:                                               ; preds = %36, %29
  %44 = phi i32 [ %31, %29 ], [ %42, %36 ]
  ret i32 %44
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden i32 @srtp_rdbx_get_roc(%struct.srtp_rdbx_t* nocapture readonly) local_unnamed_addr #4 {
  %2 = getelementptr inbounds %struct.srtp_rdbx_t, %struct.srtp_rdbx_t* %0, i64 0, i32 0
  %3 = load i64, i64* %2, align 8
  %4 = lshr i64 %3, 16
  %5 = trunc i64 %4 to i32
  ret i32 %5
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @srtp_rdbx_set_roc_seq(%struct.srtp_rdbx_t*, i32, i16 zeroext) local_unnamed_addr #2 {
  %4 = zext i32 %1 to i64
  %5 = getelementptr inbounds %struct.srtp_rdbx_t, %struct.srtp_rdbx_t* %0, i64 0, i32 0
  %6 = load i64, i64* %5, align 8
  %7 = lshr i64 %6, 16
  %8 = icmp ugt i64 %7, %4
  br i1 %8, label %14, label %9

9:                                                ; preds = %3
  %10 = zext i16 %2 to i64
  %11 = shl nuw nsw i64 %4, 16
  %12 = or i64 %11, %10
  store i64 %12, i64* %5, align 8
  %13 = getelementptr inbounds %struct.srtp_rdbx_t, %struct.srtp_rdbx_t* %0, i64 0, i32 1
  tail call void @bitvector_set_to_zero(%struct.bitvector_t* %13) #5
  br label %14

14:                                               ; preds = %3, %9
  %15 = phi i32 [ 0, %9 ], [ 10, %3 ]
  ret i32 %15
}

attributes #0 = { nofree norecurse nounwind ssp uwtable writeonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nofree norecurse nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { norecurse nounwind readonly ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
