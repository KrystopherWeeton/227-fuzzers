; ModuleID = '../../third_party/blink/renderer/core/editing/ime/ime_text_span_vector_builder.cc'
source_filename = "../../third_party/blink/renderer/core/editing/ime/ime_text_span_vector_builder.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.WTF::Vector" = type { %"class.WTF::VectorBuffer" }
%"class.WTF::VectorBuffer" = type { %"class.WTF::VectorBufferBase" }
%"class.WTF::VectorBufferBase" = type { %"class.blink::ImeTextSpan"*, i32, i32 }
%"class.blink::ImeTextSpan" = type { i32, i32, i32, %"class.blink::Color", i32, i32, %"class.blink::Color", %"class.blink::Color", %"class.blink::Color", i8, i8, %"class.WTF::Vector.13" }
%"class.blink::Color" = type { i32 }
%"class.WTF::Vector.13" = type { %"class.WTF::VectorBuffer.14" }
%"class.WTF::VectorBuffer.14" = type { %"class.WTF::VectorBufferBase.15" }
%"class.WTF::VectorBufferBase.15" = type { %"class.WTF::String"*, i32, i32 }
%"class.WTF::String" = type { %class.scoped_refptr }
%class.scoped_refptr = type { %"class.WTF::StringImpl"* }
%"class.WTF::StringImpl" = type { i32, i32, %"struct.std::__1::atomic" }
%"struct.std::__1::atomic" = type { %"struct.std::__1::__atomic_base" }
%"struct.std::__1::__atomic_base" = type { %"struct.std::__1::__atomic_base.16" }
%"struct.std::__1::__atomic_base.16" = type { %"struct.std::__1::__cxx_atomic_impl" }
%"struct.std::__1::__cxx_atomic_impl" = type { %"struct.std::__1::__cxx_atomic_base_impl" }
%"struct.std::__1::__cxx_atomic_base_impl" = type { i32 }
%"class.blink::WebVector" = type { %"class.std::__1::vector" }
%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { %"struct.ui::ImeTextSpan"*, %"struct.ui::ImeTextSpan"*, %"class.std::__1::__compressed_pair.8" }
%"struct.ui::ImeTextSpan" = type { i32, i32, i32, i32, i32, i32, i32, i32, i32, i8, i8, %"class.std::__1::vector.0" }
%"class.std::__1::vector.0" = type { %"class.std::__1::__vector_base.1" }
%"class.std::__1::__vector_base.1" = type { %"class.std::__1::basic_string"*, %"class.std::__1::basic_string"*, %"class.std::__1::__compressed_pair.3" }
%"class.std::__1::basic_string" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" = type { %union.anon }
%union.anon = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" = type { i8*, i64, i64 }
%"class.std::__1::__compressed_pair.3" = type { %"struct.std::__1::__compressed_pair_elem.4" }
%"struct.std::__1::__compressed_pair_elem.4" = type { %"class.std::__1::basic_string"* }
%"class.std::__1::__compressed_pair.8" = type { %"struct.std::__1::__compressed_pair_elem.9" }
%"struct.std::__1::__compressed_pair_elem.9" = type { %"struct.ui::ImeTextSpan"* }
%"class.std::__1::basic_ostream" = type { i32 (...)**, %"class.std::__1::basic_ios.base" }
%"class.std::__1::basic_ios.base" = type <{ %"class.std::__1::ios_base", %"class.std::__1::basic_ostream"*, i32 }>
%"class.std::__1::ios_base" = type { i32 (...)**, i32, i64, i64, i32, i32, i8*, i8*, void (i32, %"class.std::__1::ios_base"*, i32)**, i32*, i64, i64, i64*, i64, i64, i8**, i64, i64 }
%"class.logging::CheckError" = type { %"class.logging::LogMessage"* }
%"class.logging::LogMessage" = type { i32 (...)**, i32, %"class.std::__1::basic_ostringstream", i64, i8*, i32, %"class.base::ScopedClearLastErrorBase" }
%"class.std::__1::basic_ostringstream" = type { %"class.std::__1::basic_ostream.base", %"class.std::__1::basic_stringbuf", %"class.std::__1::basic_ios.base" }
%"class.std::__1::basic_ostream.base" = type { i32 (...)** }
%"class.std::__1::basic_stringbuf" = type <{ %"class.std::__1::basic_streambuf", %"class.std::__1::basic_string", i8*, i32, [4 x i8] }>
%"class.std::__1::basic_streambuf" = type { i32 (...)**, %"class.std::__1::locale", i8*, i8*, i8*, i8*, i8*, i8* }
%"class.std::__1::locale" = type { %"class.std::__1::locale::__imp"* }
%"class.std::__1::locale::__imp" = type opaque
%"class.base::ScopedClearLastErrorBase" = type { i32 }
%"class.logging::CheckOpResult" = type { i8* }

$_ZN3WTF6VectorIN5blink11ImeTextSpanELj0ENS_18PartitionAllocatorEE16ReallocateBufferEj = comdat any

$_ZN3WTF18PartitionAllocator13QuantizedSizeIN5blink11ImeTextSpanEEEmm = comdat any

$_ZN3WTF6VectorIN5blink11ImeTextSpanELj0ENS_18PartitionAllocatorEE14AppendSlowCaseIRKN2ui11ImeTextSpanEEEvOT_ = comdat any

@.str.2 = private unnamed_addr constant [44 x i8] c"count <= MaxElementCountInBackingStore<T>()\00", align 1
@.str.3 = private unnamed_addr constant [78 x i8] c"../../third_party/blink/renderer/platform/wtf/allocator/partition_allocator.h\00", align 1
@__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameIN5blink11ImeTextSpanEEEPKcv = private unnamed_addr constant [66 x i8] c"const char *WTF::GetStringWithTypeName() [T = blink::ImeTextSpan]\00", align 1

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink24ImeTextSpanVectorBuilder5BuildERKNS_9WebVectorIN2ui11ImeTextSpanEEE(%"class.WTF::Vector"* noalias sret, %"class.blink::WebVector"* nocapture readonly dereferenceable(24)) local_unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %0, i64 0, i32 0, i32 0, i32 0
  %4 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %0, i64 0, i32 0, i32 0, i32 1
  %5 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %0, i64 0, i32 0, i32 0, i32 2
  %6 = bitcast %"class.WTF::Vector"* %0 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %6, i8 0, i64 16, i1 false) #6
  %7 = getelementptr inbounds %"class.blink::WebVector", %"class.blink::WebVector"* %1, i64 0, i32 0, i32 0, i32 1
  %8 = bitcast %"struct.ui::ImeTextSpan"** %7 to i64*
  %9 = load i64, i64* %8, align 8
  %10 = bitcast %"class.blink::WebVector"* %1 to i64*
  %11 = load i64, i64* %10, align 8
  %12 = sub i64 %9, %11
  %13 = ashr exact i64 %12, 6
  %14 = icmp ult i64 %13, 4294967296
  br i1 %14, label %16, label %15, !prof !2

15:                                               ; preds = %2
  tail call void @llvm.trap() #6
  unreachable

16:                                               ; preds = %2
  %17 = trunc i64 %13 to i32
  %18 = icmp eq i32 %17, 0
  br i1 %18, label %48, label %19, !prof !3

19:                                               ; preds = %16
  %20 = and i64 %13, 4294967295
  %21 = tail call i64 @_ZN3WTF18PartitionAllocator13QuantizedSizeIN5blink11ImeTextSpanEEEmm(i64 %20) #6
  %22 = tail call i8* @_ZN3WTF18PartitionAllocator15AllocateBackingEmPKc(i64 %21, i8* getelementptr inbounds ([66 x i8], [66 x i8]* @__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameIN5blink11ImeTextSpanEEEPKcv, i64 0, i64 0)) #6
  %23 = ptrtoint i8* %22 to i64
  %24 = bitcast %"class.WTF::Vector"* %0 to i64*
  store atomic i64 %23, i64* %24 monotonic, align 8
  %25 = udiv i64 %21, 56
  %26 = trunc i64 %25 to i32
  store i32 %26, i32* %4, align 8
  %27 = getelementptr inbounds %"class.blink::WebVector", %"class.blink::WebVector"* %1, i64 0, i32 0, i32 0, i32 0
  %28 = and i64 %13, 4294967295
  br label %29

29:                                               ; preds = %46, %19
  %30 = phi i32 [ %26, %19 ], [ %47, %46 ]
  %31 = phi i64 [ 0, %19 ], [ %44, %46 ]
  %32 = load %"struct.ui::ImeTextSpan"*, %"struct.ui::ImeTextSpan"** %27, align 8
  %33 = getelementptr inbounds %"struct.ui::ImeTextSpan", %"struct.ui::ImeTextSpan"* %32, i64 %31
  %34 = load i32, i32* %5, align 4
  %35 = icmp eq i32 %34, %30
  br i1 %35, label %42, label %36, !prof !3

36:                                               ; preds = %29
  %37 = load %"class.blink::ImeTextSpan"*, %"class.blink::ImeTextSpan"** %3, align 8
  %38 = zext i32 %34 to i64
  %39 = getelementptr inbounds %"class.blink::ImeTextSpan", %"class.blink::ImeTextSpan"* %37, i64 %38
  tail call void @_ZN5blink11ImeTextSpanC1ERKN2ui11ImeTextSpanE(%"class.blink::ImeTextSpan"* %39, %"struct.ui::ImeTextSpan"* dereferenceable(64) %33) #6
  %40 = load i32, i32* %5, align 4
  %41 = add i32 %40, 1
  store i32 %41, i32* %5, align 4
  br label %43

42:                                               ; preds = %29
  tail call void @_ZN3WTF6VectorIN5blink11ImeTextSpanELj0ENS_18PartitionAllocatorEE14AppendSlowCaseIRKN2ui11ImeTextSpanEEEvOT_(%"class.WTF::Vector"* %0, %"struct.ui::ImeTextSpan"* dereferenceable(64) %33) #6
  br label %43

43:                                               ; preds = %36, %42
  %44 = add nuw nsw i64 %31, 1
  %45 = icmp eq i64 %44, %28
  br i1 %45, label %48, label %46

46:                                               ; preds = %43
  %47 = load i32, i32* %4, align 8
  br label %29

48:                                               ; preds = %43, %16
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

declare void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"*) local_unnamed_addr #2

declare void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8*) local_unnamed_addr #2

; Function Attrs: cold noreturn nounwind
declare void @llvm.trap() #3

declare dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"*) local_unnamed_addr #2

; Function Attrs: nounwind
declare void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"*) unnamed_addr #4

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN3WTF6VectorIN5blink11ImeTextSpanELj0ENS_18PartitionAllocatorEE16ReallocateBufferEj(%"class.WTF::Vector"*, i32) local_unnamed_addr #0 comdat align 2 {
  %3 = icmp eq i32 %1, 0
  br i1 %3, label %4, label %74

4:                                                ; preds = %2
  %5 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %0, i64 0, i32 0, i32 0, i32 0
  %6 = load %"class.blink::ImeTextSpan"*, %"class.blink::ImeTextSpan"** %5, align 8
  %7 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %0, i64 0, i32 0, i32 0, i32 2
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  %10 = getelementptr inbounds %"class.blink::ImeTextSpan", %"class.blink::ImeTextSpan"* %6, i64 %9
  %11 = bitcast %"class.WTF::Vector"* %0 to i64*
  store atomic i64 0, i64* %11 monotonic, align 8
  %12 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %0, i64 0, i32 0, i32 0, i32 1
  store i32 0, i32* %12, align 8
  %13 = icmp eq i32 %8, 0
  br i1 %13, label %72, label %14

14:                                               ; preds = %4, %68
  %15 = phi %"class.blink::ImeTextSpan"* [ %70, %68 ], [ %6, %4 ]
  %16 = phi %"class.blink::ImeTextSpan"* [ %69, %68 ], [ null, %4 ]
  %17 = bitcast %"class.blink::ImeTextSpan"* %16 to i8*
  %18 = bitcast %"class.blink::ImeTextSpan"* %15 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %17, i8* align 8 %18, i64 38, i1 false) #6
  %19 = getelementptr inbounds %"class.blink::ImeTextSpan", %"class.blink::ImeTextSpan"* %16, i64 0, i32 11
  %20 = bitcast %"class.WTF::Vector.13"* %19 to i8*
  %21 = getelementptr inbounds %"class.blink::ImeTextSpan", %"class.blink::ImeTextSpan"* %15, i64 0, i32 11
  %22 = getelementptr inbounds %"class.blink::ImeTextSpan", %"class.blink::ImeTextSpan"* %16, i64 0, i32 11, i32 0, i32 0, i32 1
  %23 = getelementptr inbounds %"class.blink::ImeTextSpan", %"class.blink::ImeTextSpan"* %16, i64 0, i32 11, i32 0, i32 0, i32 2
  %24 = bitcast %"class.WTF::Vector.13"* %21 to i64*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %20, i8 0, i64 16, i1 false) #6
  %25 = load i64, i64* %24, align 8
  %26 = bitcast %"class.WTF::Vector.13"* %19 to i64*
  store atomic i64 0, i64* %24 monotonic, align 8
  store atomic i64 %25, i64* %26 monotonic, align 8
  %27 = getelementptr inbounds %"class.blink::ImeTextSpan", %"class.blink::ImeTextSpan"* %15, i64 0, i32 11, i32 0, i32 0, i32 1
  %28 = load i32, i32* %22, align 4
  %29 = load i32, i32* %27, align 4
  store i32 %29, i32* %22, align 4
  store i32 %28, i32* %27, align 4
  %30 = getelementptr inbounds %"class.blink::ImeTextSpan", %"class.blink::ImeTextSpan"* %15, i64 0, i32 11, i32 0, i32 0, i32 2
  %31 = load i32, i32* %23, align 4
  %32 = load i32, i32* %30, align 4
  store i32 %32, i32* %23, align 4
  store i32 %31, i32* %30, align 4
  %33 = getelementptr inbounds %"class.WTF::Vector.13", %"class.WTF::Vector.13"* %21, i64 0, i32 0, i32 0, i32 0
  %34 = load %"class.WTF::String"*, %"class.WTF::String"** %33, align 8
  %35 = icmp eq %"class.WTF::String"* %34, null
  br i1 %35, label %68, label %36, !prof !2

36:                                               ; preds = %14
  %37 = bitcast %"class.WTF::String"* %34 to i8*
  %38 = icmp eq i32 %31, 0
  br i1 %38, label %66, label %39, !prof !3

39:                                               ; preds = %36
  %40 = zext i32 %31 to i64
  %41 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %34, i64 %40
  br label %42

42:                                               ; preds = %60, %39
  %43 = phi %"class.WTF::String"* [ %61, %60 ], [ %34, %39 ]
  %44 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %43, i64 0, i32 0, i32 0
  %45 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %44, align 8
  %46 = icmp eq %"class.WTF::StringImpl"* %45, null
  br i1 %46, label %60, label %47

47:                                               ; preds = %42
  %48 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %45, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %49 = load atomic i32, i32* %48 monotonic, align 4
  %50 = and i32 %49, 2
  %51 = icmp eq i32 %50, 0
  %52 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %45, i64 0, i32 0
  %53 = load i32, i32* %52, align 4
  br i1 %51, label %54, label %56

54:                                               ; preds = %47
  %55 = add i32 %53, -1
  store i32 %55, i32* %52, align 4
  br label %56

56:                                               ; preds = %54, %47
  %57 = phi i32 [ %55, %54 ], [ %53, %47 ]
  %58 = icmp eq i32 %57, 0
  br i1 %58, label %59, label %60

59:                                               ; preds = %56
  tail call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %45) #6
  br label %60

60:                                               ; preds = %59, %56, %42
  %61 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %43, i64 1
  %62 = icmp eq %"class.WTF::String"* %61, %41
  br i1 %62, label %63, label %42

63:                                               ; preds = %60
  store i32 0, i32* %30, align 4
  %64 = bitcast %"class.WTF::Vector.13"* %21 to i8**
  %65 = load i8*, i8** %64, align 8
  br label %66

66:                                               ; preds = %63, %36
  %67 = phi i8* [ %65, %63 ], [ %37, %36 ]
  tail call void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8* %67) #6
  store %"class.WTF::String"* null, %"class.WTF::String"** %33, align 8
  br label %68

68:                                               ; preds = %66, %14
  %69 = getelementptr inbounds %"class.blink::ImeTextSpan", %"class.blink::ImeTextSpan"* %16, i64 1
  %70 = getelementptr inbounds %"class.blink::ImeTextSpan", %"class.blink::ImeTextSpan"* %15, i64 1
  %71 = icmp eq %"class.blink::ImeTextSpan"* %70, %10
  br i1 %71, label %72, label %14

72:                                               ; preds = %68, %4
  %73 = bitcast %"class.blink::ImeTextSpan"* %6 to i8*
  tail call void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8* %73) #6
  br label %157

74:                                               ; preds = %2
  %75 = zext i32 %1 to i64
  %76 = tail call i64 @_ZN3WTF18PartitionAllocator13QuantizedSizeIN5blink11ImeTextSpanEEEmm(i64 %75) #6
  %77 = tail call i8* @_ZN3WTF18PartitionAllocator15AllocateBackingEmPKc(i64 %76, i8* getelementptr inbounds ([66 x i8], [66 x i8]* @__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameIN5blink11ImeTextSpanEEEPKcv, i64 0, i64 0)) #6
  %78 = udiv i64 %76, 56
  %79 = ptrtoint i8* %77 to i64
  %80 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %0, i64 0, i32 0, i32 0, i32 0
  %81 = load %"class.blink::ImeTextSpan"*, %"class.blink::ImeTextSpan"** %80, align 8
  %82 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %0, i64 0, i32 0, i32 0, i32 2
  %83 = load i32, i32* %82, align 4
  %84 = zext i32 %83 to i64
  %85 = getelementptr inbounds %"class.blink::ImeTextSpan", %"class.blink::ImeTextSpan"* %81, i64 %84
  %86 = icmp eq i32 %83, 0
  br i1 %86, label %87, label %89

87:                                               ; preds = %74
  %88 = bitcast %"class.blink::ImeTextSpan"* %81 to i8*
  br label %152

89:                                               ; preds = %74
  %90 = bitcast i8* %77 to %"class.blink::ImeTextSpan"*
  br label %91

91:                                               ; preds = %89, %145
  %92 = phi %"class.blink::ImeTextSpan"* [ %147, %145 ], [ %81, %89 ]
  %93 = phi %"class.blink::ImeTextSpan"* [ %146, %145 ], [ %90, %89 ]
  %94 = bitcast %"class.blink::ImeTextSpan"* %93 to i8*
  %95 = bitcast %"class.blink::ImeTextSpan"* %92 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %94, i8* align 8 %95, i64 38, i1 false) #6
  %96 = getelementptr inbounds %"class.blink::ImeTextSpan", %"class.blink::ImeTextSpan"* %93, i64 0, i32 11
  %97 = bitcast %"class.WTF::Vector.13"* %96 to i8*
  %98 = getelementptr inbounds %"class.blink::ImeTextSpan", %"class.blink::ImeTextSpan"* %92, i64 0, i32 11
  %99 = getelementptr inbounds %"class.blink::ImeTextSpan", %"class.blink::ImeTextSpan"* %93, i64 0, i32 11, i32 0, i32 0, i32 1
  %100 = getelementptr inbounds %"class.blink::ImeTextSpan", %"class.blink::ImeTextSpan"* %93, i64 0, i32 11, i32 0, i32 0, i32 2
  %101 = bitcast %"class.WTF::Vector.13"* %98 to i64*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %97, i8 0, i64 16, i1 false) #6
  %102 = load i64, i64* %101, align 8
  %103 = bitcast %"class.WTF::Vector.13"* %96 to i64*
  store atomic i64 0, i64* %101 monotonic, align 8
  store atomic i64 %102, i64* %103 monotonic, align 8
  %104 = getelementptr inbounds %"class.blink::ImeTextSpan", %"class.blink::ImeTextSpan"* %92, i64 0, i32 11, i32 0, i32 0, i32 1
  %105 = load i32, i32* %99, align 4
  %106 = load i32, i32* %104, align 4
  store i32 %106, i32* %99, align 4
  store i32 %105, i32* %104, align 4
  %107 = getelementptr inbounds %"class.blink::ImeTextSpan", %"class.blink::ImeTextSpan"* %92, i64 0, i32 11, i32 0, i32 0, i32 2
  %108 = load i32, i32* %100, align 4
  %109 = load i32, i32* %107, align 4
  store i32 %109, i32* %100, align 4
  store i32 %108, i32* %107, align 4
  %110 = getelementptr inbounds %"class.WTF::Vector.13", %"class.WTF::Vector.13"* %98, i64 0, i32 0, i32 0, i32 0
  %111 = load %"class.WTF::String"*, %"class.WTF::String"** %110, align 8
  %112 = icmp eq %"class.WTF::String"* %111, null
  br i1 %112, label %145, label %113, !prof !2

113:                                              ; preds = %91
  %114 = bitcast %"class.WTF::String"* %111 to i8*
  %115 = icmp eq i32 %108, 0
  br i1 %115, label %143, label %116, !prof !3

116:                                              ; preds = %113
  %117 = zext i32 %108 to i64
  %118 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %111, i64 %117
  br label %119

119:                                              ; preds = %137, %116
  %120 = phi %"class.WTF::String"* [ %138, %137 ], [ %111, %116 ]
  %121 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %120, i64 0, i32 0, i32 0
  %122 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %121, align 8
  %123 = icmp eq %"class.WTF::StringImpl"* %122, null
  br i1 %123, label %137, label %124

124:                                              ; preds = %119
  %125 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %122, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %126 = load atomic i32, i32* %125 monotonic, align 4
  %127 = and i32 %126, 2
  %128 = icmp eq i32 %127, 0
  %129 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %122, i64 0, i32 0
  %130 = load i32, i32* %129, align 4
  br i1 %128, label %131, label %133

131:                                              ; preds = %124
  %132 = add i32 %130, -1
  store i32 %132, i32* %129, align 4
  br label %133

133:                                              ; preds = %131, %124
  %134 = phi i32 [ %132, %131 ], [ %130, %124 ]
  %135 = icmp eq i32 %134, 0
  br i1 %135, label %136, label %137

136:                                              ; preds = %133
  tail call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %122) #6
  br label %137

137:                                              ; preds = %136, %133, %119
  %138 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %120, i64 1
  %139 = icmp eq %"class.WTF::String"* %138, %118
  br i1 %139, label %140, label %119

140:                                              ; preds = %137
  store i32 0, i32* %107, align 4
  %141 = bitcast %"class.WTF::Vector.13"* %98 to i8**
  %142 = load i8*, i8** %141, align 8
  br label %143

143:                                              ; preds = %140, %113
  %144 = phi i8* [ %142, %140 ], [ %114, %113 ]
  tail call void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8* %144) #6
  store %"class.WTF::String"* null, %"class.WTF::String"** %110, align 8
  br label %145

145:                                              ; preds = %143, %91
  %146 = getelementptr inbounds %"class.blink::ImeTextSpan", %"class.blink::ImeTextSpan"* %93, i64 1
  %147 = getelementptr inbounds %"class.blink::ImeTextSpan", %"class.blink::ImeTextSpan"* %92, i64 1
  %148 = icmp eq %"class.blink::ImeTextSpan"* %147, %85
  br i1 %148, label %149, label %91

149:                                              ; preds = %145
  %150 = bitcast %"class.WTF::Vector"* %0 to i8**
  %151 = load i8*, i8** %150, align 8
  br label %152

152:                                              ; preds = %87, %149
  %153 = phi i8* [ %151, %149 ], [ %88, %87 ]
  tail call void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8* %153) #6
  %154 = bitcast %"class.WTF::Vector"* %0 to i64*
  store atomic i64 %79, i64* %154 monotonic, align 8
  %155 = trunc i64 %78 to i32
  %156 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %0, i64 0, i32 0, i32 0, i32 1
  store i32 %155, i32* %156, align 8
  br label %157

157:                                              ; preds = %152, %72
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i64 @_ZN3WTF18PartitionAllocator13QuantizedSizeIN5blink11ImeTextSpanEEEmm(i64) local_unnamed_addr #0 comdat align 2 {
  %2 = alloca %"class.logging::CheckOpResult", align 8
  %3 = alloca %"class.logging::CheckOpResult", align 8
  %4 = alloca %"class.logging::CheckError", align 8
  %5 = bitcast %"class.logging::CheckOpResult"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %5) #6
  %6 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %3, i64 0, i32 0
  store i8* inttoptr (i64 -6148914691236517206 to i8*), i8** %6, align 8
  %7 = bitcast %"class.logging::CheckOpResult"* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %7)
  %8 = icmp ugt i64 %0, 38310473
  br i1 %8, label %10, label %9

9:                                                ; preds = %1
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %7)
  store i8* null, i8** %6, align 8
  br label %19

10:                                               ; preds = %1
  %11 = tail call i8* @_ZN7logging15CheckOpValueStrEm(i64 %0) #6
  %12 = tail call i8* @_ZN7logging15CheckOpValueStrEm(i64 38310473) #6
  call void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"* nonnull %2, i8* getelementptr inbounds ([44 x i8], [44 x i8]* @.str.2, i64 0, i64 0), i8* %11, i8* %12) #6
  %13 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %2, i64 0, i32 0
  %14 = load i8*, i8** %13, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %7)
  store i8* %14, i8** %6, align 8
  %15 = icmp eq i8* %14, null
  br i1 %15, label %19, label %16

16:                                               ; preds = %10
  %17 = bitcast %"class.logging::CheckError"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %17) #6
  call void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* nonnull sret %4, i8* getelementptr inbounds ([78 x i8], [78 x i8]* @.str.3, i64 0, i64 0), i32 31, %"class.logging::CheckOpResult"* nonnull %3) #6
  %18 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %4) #6
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %4) #6
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %17) #6
  br label %19

19:                                               ; preds = %9, %10, %16
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %5) #6
  %20 = mul i64 %0, 56
  %21 = call i64 @_ZN3WTF10Partitions23BufferPotentialCapacityEm(i64 %20) #6
  ret i64 %21
}

declare void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* sret, i8*, i32, %"class.logging::CheckOpResult"*) local_unnamed_addr #2

declare i64 @_ZN3WTF10Partitions23BufferPotentialCapacityEm(i64) local_unnamed_addr #2

declare i8* @_ZN7logging15CheckOpValueStrEm(i64) local_unnamed_addr #2

declare void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"*, i8*, i8*, i8*) unnamed_addr #2

declare i8* @_ZN3WTF18PartitionAllocator15AllocateBackingEmPKc(i64, i8*) local_unnamed_addr #2

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #1

; Function Attrs: noinline nounwind ssp uwtable
define linkonce_odr hidden void @_ZN3WTF6VectorIN5blink11ImeTextSpanELj0ENS_18PartitionAllocatorEE14AppendSlowCaseIRKN2ui11ImeTextSpanEEEvOT_(%"class.WTF::Vector"*, %"struct.ui::ImeTextSpan"* dereferenceable(64)) local_unnamed_addr #5 comdat align 2 {
  %3 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %0, i64 0, i32 0, i32 0, i32 2
  %4 = load i32, i32* %3, align 4
  %5 = add i32 %4, 1
  %6 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %0, i64 0, i32 0, i32 0, i32 1
  %7 = load i32, i32* %6, align 8
  %8 = lshr i32 %7, 2
  %9 = add i32 %7, 1
  %10 = add i32 %9, %8
  %11 = icmp ugt i32 %10, 4
  %12 = select i1 %11, i32 %10, i32 4
  %13 = icmp ugt i32 %12, %5
  %14 = select i1 %13, i32 %12, i32 %5
  %15 = icmp ult i32 %7, %14
  br i1 %15, label %16, label %29, !prof !2

16:                                               ; preds = %2
  %17 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %0, i64 0, i32 0, i32 0, i32 0
  %18 = load %"class.blink::ImeTextSpan"*, %"class.blink::ImeTextSpan"** %17, align 8
  %19 = icmp eq %"class.blink::ImeTextSpan"* %18, null
  br i1 %19, label %20, label %28

20:                                               ; preds = %16
  %21 = zext i32 %14 to i64
  %22 = tail call i64 @_ZN3WTF18PartitionAllocator13QuantizedSizeIN5blink11ImeTextSpanEEEmm(i64 %21) #6
  %23 = tail call i8* @_ZN3WTF18PartitionAllocator15AllocateBackingEmPKc(i64 %22, i8* getelementptr inbounds ([66 x i8], [66 x i8]* @__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameIN5blink11ImeTextSpanEEEPKcv, i64 0, i64 0)) #6
  %24 = ptrtoint i8* %23 to i64
  %25 = bitcast %"class.WTF::Vector"* %0 to i64*
  store atomic i64 %24, i64* %25 monotonic, align 8
  %26 = udiv i64 %22, 56
  %27 = trunc i64 %26 to i32
  store i32 %27, i32* %6, align 8
  br label %29

28:                                               ; preds = %16
  tail call void @_ZN3WTF6VectorIN5blink11ImeTextSpanELj0ENS_18PartitionAllocatorEE16ReallocateBufferEj(%"class.WTF::Vector"* %0, i32 %14) #6
  br label %29

29:                                               ; preds = %2, %20, %28
  %30 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %0, i64 0, i32 0, i32 0, i32 0
  %31 = load %"class.blink::ImeTextSpan"*, %"class.blink::ImeTextSpan"** %30, align 8
  %32 = load i32, i32* %3, align 4
  %33 = zext i32 %32 to i64
  %34 = getelementptr inbounds %"class.blink::ImeTextSpan", %"class.blink::ImeTextSpan"* %31, i64 %33
  tail call void @_ZN5blink11ImeTextSpanC1ERKN2ui11ImeTextSpanE(%"class.blink::ImeTextSpan"* %34, %"struct.ui::ImeTextSpan"* dereferenceable(64) %1) #6
  %35 = load i32, i32* %3, align 4
  %36 = add i32 %35, 1
  store i32 %36, i32* %3, align 4
  ret void
}

declare void @_ZN5blink11ImeTextSpanC1ERKN2ui11ImeTextSpanE(%"class.blink::ImeTextSpan"*, %"struct.ui::ImeTextSpan"* dereferenceable(64)) unnamed_addr #2

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { cold noreturn nounwind }
attributes #4 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { noinline nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{!"branch_weights", i32 2000, i32 1}
!3 = !{!"branch_weights", i32 1, i32 2000}
