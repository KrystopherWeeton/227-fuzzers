; ModuleID = '../../third_party/libaom/source/libaom/av1/common/x86/cfl_sse2.c'
source_filename = "../../third_party/libaom/source/libaom/av1/common/x86/cfl_sse2.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

@cfl_get_subtract_average_fn_sse2.sub_avg = internal unnamed_addr constant [19 x void (i16*, i16*)*] [void (i16*, i16*)* @cfl_subtract_average_4x4_sse2, void (i16*, i16*)* @cfl_subtract_average_8x8_sse2, void (i16*, i16*)* @cfl_subtract_average_16x16_sse2, void (i16*, i16*)* @cfl_subtract_average_32x32_sse2, void (i16*, i16*)* null, void (i16*, i16*)* @cfl_subtract_average_4x8_sse2, void (i16*, i16*)* @cfl_subtract_average_8x4_sse2, void (i16*, i16*)* @cfl_subtract_average_8x16_sse2, void (i16*, i16*)* @cfl_subtract_average_16x8_sse2, void (i16*, i16*)* @cfl_subtract_average_16x32_sse2, void (i16*, i16*)* @cfl_subtract_average_32x16_sse2, void (i16*, i16*)* null, void (i16*, i16*)* null, void (i16*, i16*)* @cfl_subtract_average_4x16_sse2, void (i16*, i16*)* @cfl_subtract_average_16x4_sse2, void (i16*, i16*)* @cfl_subtract_average_8x32_sse2, void (i16*, i16*)* @cfl_subtract_average_32x8_sse2, void (i16*, i16*)* null, void (i16*, i16*)* null], align 16

; Function Attrs: nofree nounwind ssp uwtable
define hidden void @cfl_subtract_average_4x4_sse2(i16* readonly, i16* nocapture) #0 {
  %3 = bitcast i16* %0 to i64*
  %4 = load i64, i64* %3, align 1
  %5 = insertelement <2 x i64> undef, i64 %4, i32 0
  %6 = getelementptr inbounds i16, i16* %0, i64 32
  %7 = bitcast i16* %6 to i64*
  %8 = load i64, i64* %7, align 1
  %9 = insertelement <2 x i64> undef, i64 %8, i32 0
  %10 = bitcast <2 x i64> %5 to <8 x i16>
  %11 = bitcast <2 x i64> %9 to <8 x i16>
  %12 = add <8 x i16> %11, %10
  %13 = getelementptr inbounds i16, i16* %0, i64 64
  %14 = bitcast i16* %13 to i64*
  %15 = load i64, i64* %14, align 1
  %16 = insertelement <2 x i64> undef, i64 %15, i32 0
  %17 = getelementptr inbounds i16, i16* %0, i64 96
  %18 = bitcast i16* %17 to i64*
  %19 = load i64, i64* %18, align 1
  %20 = insertelement <2 x i64> undef, i64 %19, i32 0
  %21 = bitcast <2 x i64> %16 to <8 x i16>
  %22 = bitcast <2 x i64> %20 to <8 x i16>
  %23 = add <8 x i16> %22, %21
  %24 = shufflevector <8 x i16> %12, <8 x i16> <i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef>, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %25 = shufflevector <8 x i16> %23, <8 x i16> <i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef>, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %26 = bitcast <8 x i16> %24 to <4 x i32>
  %27 = bitcast <8 x i16> %25 to <4 x i32>
  %28 = add <4 x i32> %26, %27
  %29 = shufflevector <4 x i32> %28, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 0, i32 1>
  %30 = add <4 x i32> %29, %28
  %31 = shufflevector <4 x i32> %30, <4 x i32> undef, <4 x i32> <i32 1, i32 0, i32 3, i32 2>
  %32 = add <4 x i32> %30, <i32 8, i32 8, i32 8, i32 8>
  %33 = add <4 x i32> %32, %31
  %34 = lshr <4 x i32> %33, <i32 4, i32 4, i32 4, i32 4>
  %35 = tail call <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32> %34, <4 x i32> undef) #3
  %36 = sub <8 x i16> %10, %35
  %37 = bitcast <8 x i16> %36 to <2 x i64>
  %38 = extractelement <2 x i64> %37, i32 0
  %39 = bitcast i16* %1 to i64*
  store i64 %38, i64* %39, align 1
  %40 = getelementptr inbounds i16, i16* %1, i64 32
  %41 = getelementptr inbounds i16, i16* %0, i64 32
  %42 = bitcast i16* %41 to i64*
  %43 = load i64, i64* %42, align 1
  %44 = insertelement <2 x i64> undef, i64 %43, i32 0
  %45 = bitcast <2 x i64> %44 to <8 x i16>
  %46 = sub <8 x i16> %45, %35
  %47 = bitcast <8 x i16> %46 to <2 x i64>
  %48 = extractelement <2 x i64> %47, i32 0
  %49 = bitcast i16* %40 to i64*
  store i64 %48, i64* %49, align 1
  %50 = getelementptr inbounds i16, i16* %0, i64 64
  %51 = getelementptr inbounds i16, i16* %1, i64 64
  %52 = bitcast i16* %50 to i64*
  %53 = load i64, i64* %52, align 1
  %54 = insertelement <2 x i64> undef, i64 %53, i32 0
  %55 = bitcast <2 x i64> %54 to <8 x i16>
  %56 = sub <8 x i16> %55, %35
  %57 = bitcast <8 x i16> %56 to <2 x i64>
  %58 = extractelement <2 x i64> %57, i32 0
  %59 = bitcast i16* %51 to i64*
  store i64 %58, i64* %59, align 1
  %60 = getelementptr inbounds i16, i16* %0, i64 96
  %61 = getelementptr inbounds i16, i16* %1, i64 96
  %62 = bitcast i16* %60 to i64*
  %63 = load i64, i64* %62, align 1
  %64 = insertelement <2 x i64> undef, i64 %63, i32 0
  %65 = bitcast <2 x i64> %64 to <8 x i16>
  %66 = sub <8 x i16> %65, %35
  %67 = bitcast <8 x i16> %66 to <2 x i64>
  %68 = extractelement <2 x i64> %67, i32 0
  %69 = bitcast i16* %61 to i64*
  store i64 %68, i64* %69, align 1
  ret void
}

; Function Attrs: nofree nounwind ssp uwtable
define hidden void @cfl_subtract_average_4x8_sse2(i16* readonly, i16* nocapture) #0 {
  %3 = bitcast i16* %0 to i64*
  %4 = load i64, i64* %3, align 1
  %5 = insertelement <2 x i64> undef, i64 %4, i32 0
  %6 = bitcast <2 x i64> %5 to <8 x i16>
  %7 = getelementptr inbounds i16, i16* %0, i64 128
  %8 = getelementptr inbounds i16, i16* %0, i64 32
  %9 = bitcast i16* %8 to i64*
  %10 = load i64, i64* %9, align 1
  %11 = insertelement <2 x i64> undef, i64 %10, i32 0
  %12 = bitcast <2 x i64> %11 to <8 x i16>
  %13 = add <8 x i16> %12, %6
  %14 = shufflevector <8 x i16> %13, <8 x i16> <i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef>, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %15 = bitcast <8 x i16> %14 to <4 x i32>
  %16 = getelementptr inbounds i16, i16* %0, i64 96
  %17 = bitcast i16* %16 to i64*
  %18 = load i64, i64* %17, align 1
  %19 = insertelement <2 x i64> undef, i64 %18, i32 0
  %20 = bitcast <2 x i64> %19 to <8 x i16>
  %21 = getelementptr inbounds i16, i16* %0, i64 64
  %22 = bitcast i16* %21 to i64*
  %23 = load i64, i64* %22, align 1
  %24 = insertelement <2 x i64> undef, i64 %23, i32 0
  %25 = bitcast <2 x i64> %24 to <8 x i16>
  %26 = add <8 x i16> %20, %25
  %27 = shufflevector <8 x i16> %26, <8 x i16> <i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef>, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %28 = bitcast <8 x i16> %27 to <4 x i32>
  %29 = add <4 x i32> %15, %28
  %30 = bitcast i16* %7 to i64*
  %31 = load i64, i64* %30, align 1
  %32 = insertelement <2 x i64> undef, i64 %31, i32 0
  %33 = getelementptr inbounds i16, i16* %0, i64 160
  %34 = bitcast i16* %33 to i64*
  %35 = load i64, i64* %34, align 1
  %36 = insertelement <2 x i64> undef, i64 %35, i32 0
  %37 = bitcast <2 x i64> %32 to <8 x i16>
  %38 = bitcast <2 x i64> %36 to <8 x i16>
  %39 = add <8 x i16> %38, %37
  %40 = getelementptr inbounds i16, i16* %0, i64 192
  %41 = bitcast i16* %40 to i64*
  %42 = load i64, i64* %41, align 1
  %43 = insertelement <2 x i64> undef, i64 %42, i32 0
  %44 = getelementptr inbounds i16, i16* %0, i64 224
  %45 = bitcast i16* %44 to i64*
  %46 = load i64, i64* %45, align 1
  %47 = insertelement <2 x i64> undef, i64 %46, i32 0
  %48 = bitcast <2 x i64> %43 to <8 x i16>
  %49 = bitcast <2 x i64> %47 to <8 x i16>
  %50 = add <8 x i16> %49, %48
  %51 = shufflevector <8 x i16> %39, <8 x i16> <i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef>, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %52 = shufflevector <8 x i16> %50, <8 x i16> <i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef>, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %53 = bitcast <8 x i16> %51 to <4 x i32>
  %54 = bitcast <8 x i16> %52 to <4 x i32>
  %55 = add <4 x i32> %29, %53
  %56 = add <4 x i32> %55, %54
  %57 = shufflevector <4 x i32> %56, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 0, i32 1>
  %58 = add <4 x i32> %57, %56
  %59 = shufflevector <4 x i32> %58, <4 x i32> undef, <4 x i32> <i32 1, i32 0, i32 3, i32 2>
  %60 = add <4 x i32> %58, <i32 16, i32 16, i32 16, i32 16>
  %61 = add <4 x i32> %60, %59
  %62 = lshr <4 x i32> %61, <i32 5, i32 5, i32 5, i32 5>
  %63 = tail call <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32> %62, <4 x i32> undef) #3
  %64 = sub <8 x i16> %6, %63
  %65 = bitcast <8 x i16> %64 to <2 x i64>
  %66 = extractelement <2 x i64> %65, i32 0
  %67 = bitcast i16* %1 to i64*
  store i64 %66, i64* %67, align 1
  %68 = getelementptr inbounds i16, i16* %1, i64 32
  %69 = getelementptr inbounds i16, i16* %0, i64 32
  %70 = bitcast i16* %69 to i64*
  %71 = load i64, i64* %70, align 1
  %72 = insertelement <2 x i64> undef, i64 %71, i32 0
  %73 = bitcast <2 x i64> %72 to <8 x i16>
  %74 = sub <8 x i16> %73, %63
  %75 = bitcast <8 x i16> %74 to <2 x i64>
  %76 = extractelement <2 x i64> %75, i32 0
  %77 = bitcast i16* %68 to i64*
  store i64 %76, i64* %77, align 1
  %78 = getelementptr inbounds i16, i16* %0, i64 64
  %79 = getelementptr inbounds i16, i16* %1, i64 64
  %80 = bitcast i16* %78 to i64*
  %81 = load i64, i64* %80, align 1
  %82 = insertelement <2 x i64> undef, i64 %81, i32 0
  %83 = bitcast <2 x i64> %82 to <8 x i16>
  %84 = sub <8 x i16> %83, %63
  %85 = bitcast <8 x i16> %84 to <2 x i64>
  %86 = extractelement <2 x i64> %85, i32 0
  %87 = bitcast i16* %79 to i64*
  store i64 %86, i64* %87, align 1
  %88 = getelementptr inbounds i16, i16* %0, i64 96
  %89 = getelementptr inbounds i16, i16* %1, i64 96
  %90 = bitcast i16* %88 to i64*
  %91 = load i64, i64* %90, align 1
  %92 = insertelement <2 x i64> undef, i64 %91, i32 0
  %93 = bitcast <2 x i64> %92 to <8 x i16>
  %94 = sub <8 x i16> %93, %63
  %95 = bitcast <8 x i16> %94 to <2 x i64>
  %96 = extractelement <2 x i64> %95, i32 0
  %97 = bitcast i16* %89 to i64*
  store i64 %96, i64* %97, align 1
  %98 = getelementptr inbounds i16, i16* %0, i64 128
  %99 = getelementptr inbounds i16, i16* %1, i64 128
  %100 = bitcast i16* %98 to i64*
  %101 = load i64, i64* %100, align 1
  %102 = insertelement <2 x i64> undef, i64 %101, i32 0
  %103 = bitcast <2 x i64> %102 to <8 x i16>
  %104 = sub <8 x i16> %103, %63
  %105 = bitcast <8 x i16> %104 to <2 x i64>
  %106 = extractelement <2 x i64> %105, i32 0
  %107 = bitcast i16* %99 to i64*
  store i64 %106, i64* %107, align 1
  %108 = getelementptr inbounds i16, i16* %0, i64 160
  %109 = getelementptr inbounds i16, i16* %1, i64 160
  %110 = bitcast i16* %108 to i64*
  %111 = load i64, i64* %110, align 1
  %112 = insertelement <2 x i64> undef, i64 %111, i32 0
  %113 = bitcast <2 x i64> %112 to <8 x i16>
  %114 = sub <8 x i16> %113, %63
  %115 = bitcast <8 x i16> %114 to <2 x i64>
  %116 = extractelement <2 x i64> %115, i32 0
  %117 = bitcast i16* %109 to i64*
  store i64 %116, i64* %117, align 1
  %118 = getelementptr inbounds i16, i16* %0, i64 192
  %119 = getelementptr inbounds i16, i16* %1, i64 192
  %120 = bitcast i16* %118 to i64*
  %121 = load i64, i64* %120, align 1
  %122 = insertelement <2 x i64> undef, i64 %121, i32 0
  %123 = bitcast <2 x i64> %122 to <8 x i16>
  %124 = sub <8 x i16> %123, %63
  %125 = bitcast <8 x i16> %124 to <2 x i64>
  %126 = extractelement <2 x i64> %125, i32 0
  %127 = bitcast i16* %119 to i64*
  store i64 %126, i64* %127, align 1
  %128 = getelementptr inbounds i16, i16* %0, i64 224
  %129 = getelementptr inbounds i16, i16* %1, i64 224
  %130 = bitcast i16* %128 to i64*
  %131 = load i64, i64* %130, align 1
  %132 = insertelement <2 x i64> undef, i64 %131, i32 0
  %133 = bitcast <2 x i64> %132 to <8 x i16>
  %134 = sub <8 x i16> %133, %63
  %135 = bitcast <8 x i16> %134 to <2 x i64>
  %136 = extractelement <2 x i64> %135, i32 0
  %137 = bitcast i16* %129 to i64*
  store i64 %136, i64* %137, align 1
  ret void
}

; Function Attrs: nofree nounwind ssp uwtable
define hidden void @cfl_subtract_average_4x16_sse2(i16* readonly, i16* nocapture) #0 {
  %3 = getelementptr inbounds i16, i16* %0, i64 512
  %4 = bitcast i16* %3 to <2 x i64>*
  %5 = bitcast i16* %0 to i64*
  %6 = load i64, i64* %5, align 1
  %7 = getelementptr inbounds i16, i16* %0, i64 128
  %8 = getelementptr inbounds i16, i16* %0, i64 32
  %9 = bitcast i16* %8 to i64*
  %10 = load i64, i64* %9, align 1
  %11 = insertelement <2 x i64> undef, i64 %10, i32 0
  %12 = bitcast <2 x i64> %11 to <8 x i16>
  %13 = insertelement <2 x i64> undef, i64 %6, i32 0
  %14 = bitcast <2 x i64> %13 to <8 x i16>
  %15 = add <8 x i16> %12, %14
  %16 = shufflevector <8 x i16> %15, <8 x i16> <i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef>, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %17 = bitcast <8 x i16> %16 to <4 x i32>
  %18 = getelementptr inbounds i16, i16* %0, i64 96
  %19 = bitcast i16* %18 to i64*
  %20 = load i64, i64* %19, align 1
  %21 = insertelement <2 x i64> undef, i64 %20, i32 0
  %22 = bitcast <2 x i64> %21 to <8 x i16>
  %23 = getelementptr inbounds i16, i16* %0, i64 64
  %24 = bitcast i16* %23 to i64*
  %25 = load i64, i64* %24, align 1
  %26 = insertelement <2 x i64> undef, i64 %25, i32 0
  %27 = bitcast <2 x i64> %26 to <8 x i16>
  %28 = add <8 x i16> %22, %27
  %29 = shufflevector <8 x i16> %28, <8 x i16> <i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef>, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %30 = bitcast <8 x i16> %29 to <4 x i32>
  %31 = add <4 x i32> %17, %30
  %32 = bitcast i16* %7 to i64*
  %33 = load i64, i64* %32, align 1
  %34 = insertelement <2 x i64> undef, i64 %33, i32 0
  %35 = getelementptr inbounds i16, i16* %0, i64 160
  %36 = bitcast i16* %35 to i64*
  %37 = load i64, i64* %36, align 1
  %38 = insertelement <2 x i64> undef, i64 %37, i32 0
  %39 = bitcast <2 x i64> %34 to <8 x i16>
  %40 = bitcast <2 x i64> %38 to <8 x i16>
  %41 = add <8 x i16> %40, %39
  %42 = getelementptr inbounds i16, i16* %0, i64 192
  %43 = bitcast i16* %42 to i64*
  %44 = load i64, i64* %43, align 1
  %45 = insertelement <2 x i64> undef, i64 %44, i32 0
  %46 = getelementptr inbounds i16, i16* %0, i64 224
  %47 = bitcast i16* %46 to i64*
  %48 = load i64, i64* %47, align 1
  %49 = insertelement <2 x i64> undef, i64 %48, i32 0
  %50 = bitcast <2 x i64> %45 to <8 x i16>
  %51 = bitcast <2 x i64> %49 to <8 x i16>
  %52 = add <8 x i16> %51, %50
  %53 = shufflevector <8 x i16> %41, <8 x i16> <i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef>, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %54 = shufflevector <8 x i16> %52, <8 x i16> <i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef>, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %55 = bitcast <8 x i16> %53 to <4 x i32>
  %56 = bitcast <8 x i16> %54 to <4 x i32>
  %57 = add <4 x i32> %31, %55
  %58 = add <4 x i32> %57, %56
  %59 = getelementptr inbounds i16, i16* %0, i64 256
  %60 = bitcast i16* %59 to i64*
  %61 = load i64, i64* %60, align 1
  %62 = insertelement <2 x i64> undef, i64 %61, i32 0
  %63 = getelementptr inbounds i16, i16* %0, i64 288
  %64 = bitcast i16* %63 to i64*
  %65 = load i64, i64* %64, align 1
  %66 = insertelement <2 x i64> undef, i64 %65, i32 0
  %67 = bitcast <2 x i64> %62 to <8 x i16>
  %68 = bitcast <2 x i64> %66 to <8 x i16>
  %69 = add <8 x i16> %68, %67
  %70 = getelementptr inbounds i16, i16* %0, i64 320
  %71 = bitcast i16* %70 to i64*
  %72 = load i64, i64* %71, align 1
  %73 = insertelement <2 x i64> undef, i64 %72, i32 0
  %74 = getelementptr inbounds i16, i16* %0, i64 352
  %75 = bitcast i16* %74 to i64*
  %76 = load i64, i64* %75, align 1
  %77 = insertelement <2 x i64> undef, i64 %76, i32 0
  %78 = bitcast <2 x i64> %73 to <8 x i16>
  %79 = bitcast <2 x i64> %77 to <8 x i16>
  %80 = add <8 x i16> %79, %78
  %81 = shufflevector <8 x i16> %69, <8 x i16> <i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef>, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %82 = shufflevector <8 x i16> %80, <8 x i16> <i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef>, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %83 = bitcast <8 x i16> %81 to <4 x i32>
  %84 = bitcast <8 x i16> %82 to <4 x i32>
  %85 = add <4 x i32> %58, %83
  %86 = add <4 x i32> %85, %84
  %87 = getelementptr inbounds i16, i16* %0, i64 384
  %88 = bitcast i16* %87 to i64*
  %89 = load i64, i64* %88, align 1
  %90 = insertelement <2 x i64> undef, i64 %89, i32 0
  %91 = getelementptr inbounds i16, i16* %0, i64 416
  %92 = bitcast i16* %91 to i64*
  %93 = load i64, i64* %92, align 1
  %94 = insertelement <2 x i64> undef, i64 %93, i32 0
  %95 = bitcast <2 x i64> %90 to <8 x i16>
  %96 = bitcast <2 x i64> %94 to <8 x i16>
  %97 = add <8 x i16> %96, %95
  %98 = getelementptr inbounds i16, i16* %0, i64 448
  %99 = bitcast i16* %98 to i64*
  %100 = load i64, i64* %99, align 1
  %101 = insertelement <2 x i64> undef, i64 %100, i32 0
  %102 = getelementptr inbounds i16, i16* %0, i64 480
  %103 = bitcast i16* %102 to i64*
  %104 = load i64, i64* %103, align 1
  %105 = insertelement <2 x i64> undef, i64 %104, i32 0
  %106 = bitcast <2 x i64> %101 to <8 x i16>
  %107 = bitcast <2 x i64> %105 to <8 x i16>
  %108 = add <8 x i16> %107, %106
  %109 = shufflevector <8 x i16> %97, <8 x i16> <i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef>, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %110 = shufflevector <8 x i16> %108, <8 x i16> <i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef>, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %111 = bitcast <8 x i16> %109 to <4 x i32>
  %112 = bitcast <8 x i16> %110 to <4 x i32>
  %113 = add <4 x i32> %86, %111
  %114 = add <4 x i32> %113, %112
  %115 = shufflevector <4 x i32> %114, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 0, i32 1>
  %116 = add <4 x i32> %115, %114
  %117 = shufflevector <4 x i32> %116, <4 x i32> undef, <4 x i32> <i32 1, i32 0, i32 3, i32 2>
  %118 = add <4 x i32> %116, <i32 32, i32 32, i32 32, i32 32>
  %119 = add <4 x i32> %118, %117
  %120 = lshr <4 x i32> %119, <i32 6, i32 6, i32 6, i32 6>
  %121 = tail call <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32> %120, <4 x i32> undef) #3
  %122 = bitcast i16* %1 to <2 x i64>*
  %123 = insertelement <2 x i64> undef, i64 %6, i32 0
  %124 = bitcast <2 x i64> %123 to <8 x i16>
  %125 = sub <8 x i16> %124, %121
  %126 = bitcast <8 x i16> %125 to <2 x i64>
  %127 = extractelement <2 x i64> %126, i32 0
  %128 = bitcast i16* %1 to i64*
  store i64 %127, i64* %128, align 1
  %129 = getelementptr inbounds i16, i16* %0, i64 32
  %130 = bitcast i16* %129 to <2 x i64>*
  br label %131

131:                                              ; preds = %2, %131
  %132 = phi <2 x i64>* [ %130, %2 ], [ %143, %131 ]
  %133 = phi <2 x i64>* [ %122, %2 ], [ %134, %131 ]
  %134 = getelementptr inbounds <2 x i64>, <2 x i64>* %133, i64 4
  %135 = getelementptr inbounds <2 x i64>, <2 x i64>* %132, i64 0, i64 0
  %136 = load i64, i64* %135, align 1
  %137 = insertelement <2 x i64> undef, i64 %136, i32 0
  %138 = bitcast <2 x i64> %137 to <8 x i16>
  %139 = sub <8 x i16> %138, %121
  %140 = bitcast <8 x i16> %139 to <2 x i64>
  %141 = extractelement <2 x i64> %140, i32 0
  %142 = getelementptr inbounds <2 x i64>, <2 x i64>* %134, i64 0, i64 0
  store i64 %141, i64* %142, align 1
  %143 = getelementptr inbounds <2 x i64>, <2 x i64>* %132, i64 4
  %144 = icmp ult <2 x i64>* %143, %4
  br i1 %144, label %131, label %145

145:                                              ; preds = %131
  ret void
}

; Function Attrs: nofree nounwind ssp uwtable
define hidden void @cfl_subtract_average_8x4_sse2(i16* readonly, i16* nocapture) #0 {
  %3 = bitcast i16* %0 to <8 x i16>*
  %4 = load <8 x i16>, <8 x i16>* %3, align 1
  %5 = getelementptr inbounds i16, i16* %0, i64 32
  %6 = bitcast i16* %5 to <8 x i16>*
  %7 = load <8 x i16>, <8 x i16>* %6, align 1
  %8 = add <8 x i16> %7, %4
  %9 = getelementptr inbounds i16, i16* %0, i64 64
  %10 = shufflevector <8 x i16> %8, <8 x i16> <i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef>, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %11 = bitcast <8 x i16> %10 to <4 x i32>
  %12 = shufflevector <8 x i16> %8, <8 x i16> <i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0>, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %13 = bitcast <8 x i16> %12 to <4 x i32>
  %14 = add <4 x i32> %11, %13
  %15 = bitcast i16* %9 to <8 x i16>*
  %16 = load <8 x i16>, <8 x i16>* %15, align 1
  %17 = getelementptr inbounds i16, i16* %0, i64 96
  %18 = bitcast i16* %17 to <8 x i16>*
  %19 = load <8 x i16>, <8 x i16>* %18, align 1
  %20 = add <8 x i16> %19, %16
  %21 = shufflevector <8 x i16> %20, <8 x i16> <i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef>, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %22 = shufflevector <8 x i16> %20, <8 x i16> <i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0>, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %23 = bitcast <8 x i16> %21 to <4 x i32>
  %24 = bitcast <8 x i16> %22 to <4 x i32>
  %25 = add <4 x i32> %14, %23
  %26 = add <4 x i32> %25, %24
  %27 = shufflevector <4 x i32> %26, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 0, i32 1>
  %28 = add <4 x i32> %27, %26
  %29 = shufflevector <4 x i32> %28, <4 x i32> undef, <4 x i32> <i32 1, i32 0, i32 3, i32 2>
  %30 = add <4 x i32> %28, <i32 16, i32 16, i32 16, i32 16>
  %31 = add <4 x i32> %30, %29
  %32 = lshr <4 x i32> %31, <i32 5, i32 5, i32 5, i32 5>
  %33 = tail call <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32> %32, <4 x i32> %32) #3
  %34 = sub <8 x i16> %4, %33
  %35 = bitcast i16* %1 to <8 x i16>*
  store <8 x i16> %34, <8 x i16>* %35, align 1
  %36 = getelementptr inbounds i16, i16* %1, i64 32
  %37 = load <8 x i16>, <8 x i16>* %6, align 1
  %38 = sub <8 x i16> %37, %33
  %39 = bitcast i16* %36 to <8 x i16>*
  store <8 x i16> %38, <8 x i16>* %39, align 1
  %40 = getelementptr inbounds i16, i16* %0, i64 64
  %41 = getelementptr inbounds i16, i16* %1, i64 64
  %42 = bitcast i16* %40 to <8 x i16>*
  %43 = load <8 x i16>, <8 x i16>* %42, align 1
  %44 = sub <8 x i16> %43, %33
  %45 = bitcast i16* %41 to <8 x i16>*
  store <8 x i16> %44, <8 x i16>* %45, align 1
  %46 = getelementptr inbounds i16, i16* %0, i64 96
  %47 = getelementptr inbounds i16, i16* %1, i64 96
  %48 = bitcast i16* %46 to <8 x i16>*
  %49 = load <8 x i16>, <8 x i16>* %48, align 1
  %50 = sub <8 x i16> %49, %33
  %51 = bitcast i16* %47 to <8 x i16>*
  store <8 x i16> %50, <8 x i16>* %51, align 1
  ret void
}

; Function Attrs: nofree nounwind ssp uwtable
define hidden void @cfl_subtract_average_8x8_sse2(i16* readonly, i16* nocapture) #0 {
  %3 = bitcast i16* %0 to <8 x i16>*
  %4 = load <8 x i16>, <8 x i16>* %3, align 1
  %5 = getelementptr inbounds i16, i16* %0, i64 32
  %6 = bitcast i16* %5 to <8 x i16>*
  %7 = load <8 x i16>, <8 x i16>* %6, align 1
  %8 = add <8 x i16> %7, %4
  %9 = getelementptr inbounds i16, i16* %0, i64 64
  %10 = shufflevector <8 x i16> %8, <8 x i16> <i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef>, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %11 = bitcast <8 x i16> %10 to <4 x i32>
  %12 = shufflevector <8 x i16> %8, <8 x i16> <i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0>, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %13 = bitcast <8 x i16> %12 to <4 x i32>
  %14 = add <4 x i32> %11, %13
  %15 = bitcast i16* %9 to <8 x i16>*
  %16 = load <8 x i16>, <8 x i16>* %15, align 1
  %17 = getelementptr inbounds i16, i16* %0, i64 96
  %18 = bitcast i16* %17 to <8 x i16>*
  %19 = load <8 x i16>, <8 x i16>* %18, align 1
  %20 = add <8 x i16> %19, %16
  %21 = shufflevector <8 x i16> %20, <8 x i16> <i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef>, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %22 = shufflevector <8 x i16> %20, <8 x i16> <i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0>, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %23 = bitcast <8 x i16> %21 to <4 x i32>
  %24 = bitcast <8 x i16> %22 to <4 x i32>
  %25 = add <4 x i32> %14, %23
  %26 = add <4 x i32> %25, %24
  %27 = getelementptr inbounds i16, i16* %0, i64 128
  %28 = bitcast i16* %27 to <8 x i16>*
  %29 = load <8 x i16>, <8 x i16>* %28, align 1
  %30 = getelementptr inbounds i16, i16* %0, i64 160
  %31 = bitcast i16* %30 to <8 x i16>*
  %32 = load <8 x i16>, <8 x i16>* %31, align 1
  %33 = add <8 x i16> %32, %29
  %34 = shufflevector <8 x i16> %33, <8 x i16> <i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef>, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %35 = shufflevector <8 x i16> %33, <8 x i16> <i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0>, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %36 = bitcast <8 x i16> %34 to <4 x i32>
  %37 = bitcast <8 x i16> %35 to <4 x i32>
  %38 = add <4 x i32> %26, %36
  %39 = add <4 x i32> %38, %37
  %40 = getelementptr inbounds i16, i16* %0, i64 192
  %41 = bitcast i16* %40 to <8 x i16>*
  %42 = load <8 x i16>, <8 x i16>* %41, align 1
  %43 = getelementptr inbounds i16, i16* %0, i64 224
  %44 = bitcast i16* %43 to <8 x i16>*
  %45 = load <8 x i16>, <8 x i16>* %44, align 1
  %46 = add <8 x i16> %45, %42
  %47 = shufflevector <8 x i16> %46, <8 x i16> <i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef>, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %48 = shufflevector <8 x i16> %46, <8 x i16> <i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0>, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %49 = bitcast <8 x i16> %47 to <4 x i32>
  %50 = bitcast <8 x i16> %48 to <4 x i32>
  %51 = add <4 x i32> %39, %49
  %52 = add <4 x i32> %51, %50
  %53 = shufflevector <4 x i32> %52, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 0, i32 1>
  %54 = add <4 x i32> %53, %52
  %55 = shufflevector <4 x i32> %54, <4 x i32> undef, <4 x i32> <i32 1, i32 0, i32 3, i32 2>
  %56 = add <4 x i32> %54, <i32 32, i32 32, i32 32, i32 32>
  %57 = add <4 x i32> %56, %55
  %58 = lshr <4 x i32> %57, <i32 6, i32 6, i32 6, i32 6>
  %59 = tail call <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32> %58, <4 x i32> %58) #3
  %60 = sub <8 x i16> %4, %59
  %61 = bitcast i16* %1 to <8 x i16>*
  store <8 x i16> %60, <8 x i16>* %61, align 1
  %62 = getelementptr inbounds i16, i16* %1, i64 32
  %63 = load <8 x i16>, <8 x i16>* %6, align 1
  %64 = sub <8 x i16> %63, %59
  %65 = bitcast i16* %62 to <8 x i16>*
  store <8 x i16> %64, <8 x i16>* %65, align 1
  %66 = getelementptr inbounds i16, i16* %0, i64 64
  %67 = getelementptr inbounds i16, i16* %1, i64 64
  %68 = bitcast i16* %66 to <8 x i16>*
  %69 = load <8 x i16>, <8 x i16>* %68, align 1
  %70 = sub <8 x i16> %69, %59
  %71 = bitcast i16* %67 to <8 x i16>*
  store <8 x i16> %70, <8 x i16>* %71, align 1
  %72 = getelementptr inbounds i16, i16* %0, i64 96
  %73 = getelementptr inbounds i16, i16* %1, i64 96
  %74 = bitcast i16* %72 to <8 x i16>*
  %75 = load <8 x i16>, <8 x i16>* %74, align 1
  %76 = sub <8 x i16> %75, %59
  %77 = bitcast i16* %73 to <8 x i16>*
  store <8 x i16> %76, <8 x i16>* %77, align 1
  %78 = getelementptr inbounds i16, i16* %0, i64 128
  %79 = getelementptr inbounds i16, i16* %1, i64 128
  %80 = bitcast i16* %78 to <8 x i16>*
  %81 = load <8 x i16>, <8 x i16>* %80, align 1
  %82 = sub <8 x i16> %81, %59
  %83 = bitcast i16* %79 to <8 x i16>*
  store <8 x i16> %82, <8 x i16>* %83, align 1
  %84 = getelementptr inbounds i16, i16* %0, i64 160
  %85 = getelementptr inbounds i16, i16* %1, i64 160
  %86 = bitcast i16* %84 to <8 x i16>*
  %87 = load <8 x i16>, <8 x i16>* %86, align 1
  %88 = sub <8 x i16> %87, %59
  %89 = bitcast i16* %85 to <8 x i16>*
  store <8 x i16> %88, <8 x i16>* %89, align 1
  %90 = getelementptr inbounds i16, i16* %0, i64 192
  %91 = getelementptr inbounds i16, i16* %1, i64 192
  %92 = bitcast i16* %90 to <8 x i16>*
  %93 = load <8 x i16>, <8 x i16>* %92, align 1
  %94 = sub <8 x i16> %93, %59
  %95 = bitcast i16* %91 to <8 x i16>*
  store <8 x i16> %94, <8 x i16>* %95, align 1
  %96 = getelementptr inbounds i16, i16* %0, i64 224
  %97 = getelementptr inbounds i16, i16* %1, i64 224
  %98 = bitcast i16* %96 to <8 x i16>*
  %99 = load <8 x i16>, <8 x i16>* %98, align 1
  %100 = sub <8 x i16> %99, %59
  %101 = bitcast i16* %97 to <8 x i16>*
  store <8 x i16> %100, <8 x i16>* %101, align 1
  ret void
}

; Function Attrs: nofree nounwind ssp uwtable
define hidden void @cfl_subtract_average_8x16_sse2(i16* readonly, i16* nocapture) #0 {
  %3 = getelementptr inbounds i16, i16* %0, i64 512
  %4 = bitcast i16* %3 to <2 x i64>*
  %5 = bitcast i16* %0 to <8 x i16>*
  %6 = load <8 x i16>, <8 x i16>* %5, align 1
  %7 = getelementptr inbounds i16, i16* %0, i64 32
  %8 = bitcast i16* %7 to <8 x i16>*
  %9 = load <8 x i16>, <8 x i16>* %8, align 1
  %10 = add <8 x i16> %9, %6
  %11 = getelementptr inbounds i16, i16* %0, i64 64
  %12 = shufflevector <8 x i16> %10, <8 x i16> <i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef>, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %13 = bitcast <8 x i16> %12 to <4 x i32>
  %14 = shufflevector <8 x i16> %10, <8 x i16> <i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0>, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %15 = bitcast <8 x i16> %14 to <4 x i32>
  %16 = add <4 x i32> %13, %15
  %17 = bitcast i16* %11 to <8 x i16>*
  %18 = load <8 x i16>, <8 x i16>* %17, align 1
  %19 = getelementptr inbounds i16, i16* %0, i64 96
  %20 = bitcast i16* %19 to <8 x i16>*
  %21 = load <8 x i16>, <8 x i16>* %20, align 1
  %22 = add <8 x i16> %21, %18
  %23 = shufflevector <8 x i16> %22, <8 x i16> <i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef>, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %24 = shufflevector <8 x i16> %22, <8 x i16> <i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0>, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %25 = bitcast <8 x i16> %23 to <4 x i32>
  %26 = bitcast <8 x i16> %24 to <4 x i32>
  %27 = add <4 x i32> %16, %25
  %28 = add <4 x i32> %27, %26
  %29 = getelementptr inbounds i16, i16* %0, i64 128
  %30 = bitcast i16* %29 to <8 x i16>*
  %31 = load <8 x i16>, <8 x i16>* %30, align 1
  %32 = getelementptr inbounds i16, i16* %0, i64 160
  %33 = bitcast i16* %32 to <8 x i16>*
  %34 = load <8 x i16>, <8 x i16>* %33, align 1
  %35 = add <8 x i16> %34, %31
  %36 = shufflevector <8 x i16> %35, <8 x i16> <i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef>, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %37 = shufflevector <8 x i16> %35, <8 x i16> <i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0>, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %38 = bitcast <8 x i16> %36 to <4 x i32>
  %39 = bitcast <8 x i16> %37 to <4 x i32>
  %40 = add <4 x i32> %28, %38
  %41 = add <4 x i32> %40, %39
  %42 = getelementptr inbounds i16, i16* %0, i64 192
  %43 = bitcast i16* %42 to <8 x i16>*
  %44 = load <8 x i16>, <8 x i16>* %43, align 1
  %45 = getelementptr inbounds i16, i16* %0, i64 224
  %46 = bitcast i16* %45 to <8 x i16>*
  %47 = load <8 x i16>, <8 x i16>* %46, align 1
  %48 = add <8 x i16> %47, %44
  %49 = shufflevector <8 x i16> %48, <8 x i16> <i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef>, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %50 = shufflevector <8 x i16> %48, <8 x i16> <i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0>, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %51 = bitcast <8 x i16> %49 to <4 x i32>
  %52 = bitcast <8 x i16> %50 to <4 x i32>
  %53 = add <4 x i32> %41, %51
  %54 = add <4 x i32> %53, %52
  %55 = getelementptr inbounds i16, i16* %0, i64 256
  %56 = bitcast i16* %55 to <8 x i16>*
  %57 = load <8 x i16>, <8 x i16>* %56, align 1
  %58 = getelementptr inbounds i16, i16* %0, i64 288
  %59 = bitcast i16* %58 to <8 x i16>*
  %60 = load <8 x i16>, <8 x i16>* %59, align 1
  %61 = add <8 x i16> %60, %57
  %62 = shufflevector <8 x i16> %61, <8 x i16> <i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef>, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %63 = shufflevector <8 x i16> %61, <8 x i16> <i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0>, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %64 = bitcast <8 x i16> %62 to <4 x i32>
  %65 = bitcast <8 x i16> %63 to <4 x i32>
  %66 = add <4 x i32> %54, %64
  %67 = add <4 x i32> %66, %65
  %68 = getelementptr inbounds i16, i16* %0, i64 320
  %69 = bitcast i16* %68 to <8 x i16>*
  %70 = load <8 x i16>, <8 x i16>* %69, align 1
  %71 = getelementptr inbounds i16, i16* %0, i64 352
  %72 = bitcast i16* %71 to <8 x i16>*
  %73 = load <8 x i16>, <8 x i16>* %72, align 1
  %74 = add <8 x i16> %73, %70
  %75 = shufflevector <8 x i16> %74, <8 x i16> <i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef>, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %76 = shufflevector <8 x i16> %74, <8 x i16> <i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0>, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %77 = bitcast <8 x i16> %75 to <4 x i32>
  %78 = bitcast <8 x i16> %76 to <4 x i32>
  %79 = add <4 x i32> %67, %77
  %80 = add <4 x i32> %79, %78
  %81 = getelementptr inbounds i16, i16* %0, i64 384
  %82 = bitcast i16* %81 to <8 x i16>*
  %83 = load <8 x i16>, <8 x i16>* %82, align 1
  %84 = getelementptr inbounds i16, i16* %0, i64 416
  %85 = bitcast i16* %84 to <8 x i16>*
  %86 = load <8 x i16>, <8 x i16>* %85, align 1
  %87 = add <8 x i16> %86, %83
  %88 = shufflevector <8 x i16> %87, <8 x i16> <i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef>, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %89 = shufflevector <8 x i16> %87, <8 x i16> <i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0>, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %90 = bitcast <8 x i16> %88 to <4 x i32>
  %91 = bitcast <8 x i16> %89 to <4 x i32>
  %92 = add <4 x i32> %80, %90
  %93 = add <4 x i32> %92, %91
  %94 = getelementptr inbounds i16, i16* %0, i64 448
  %95 = bitcast i16* %94 to <8 x i16>*
  %96 = load <8 x i16>, <8 x i16>* %95, align 1
  %97 = getelementptr inbounds i16, i16* %0, i64 480
  %98 = bitcast i16* %97 to <8 x i16>*
  %99 = load <8 x i16>, <8 x i16>* %98, align 1
  %100 = add <8 x i16> %99, %96
  %101 = shufflevector <8 x i16> %100, <8 x i16> <i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef>, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %102 = shufflevector <8 x i16> %100, <8 x i16> <i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0>, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %103 = bitcast <8 x i16> %101 to <4 x i32>
  %104 = bitcast <8 x i16> %102 to <4 x i32>
  %105 = add <4 x i32> %93, %103
  %106 = add <4 x i32> %105, %104
  %107 = shufflevector <4 x i32> %106, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 0, i32 1>
  %108 = add <4 x i32> %107, %106
  %109 = shufflevector <4 x i32> %108, <4 x i32> undef, <4 x i32> <i32 1, i32 0, i32 3, i32 2>
  %110 = add <4 x i32> %108, <i32 64, i32 64, i32 64, i32 64>
  %111 = add <4 x i32> %110, %109
  %112 = lshr <4 x i32> %111, <i32 7, i32 7, i32 7, i32 7>
  %113 = tail call <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32> %112, <4 x i32> %112) #3
  %114 = bitcast i16* %1 to <2 x i64>*
  %115 = sub <8 x i16> %6, %113
  %116 = bitcast i16* %1 to <8 x i16>*
  store <8 x i16> %115, <8 x i16>* %116, align 1
  %117 = getelementptr inbounds i16, i16* %0, i64 32
  %118 = bitcast i16* %117 to <2 x i64>*
  br label %119

119:                                              ; preds = %2, %119
  %120 = phi <2 x i64>* [ %118, %2 ], [ %127, %119 ]
  %121 = phi <2 x i64>* [ %114, %2 ], [ %122, %119 ]
  %122 = getelementptr inbounds <2 x i64>, <2 x i64>* %121, i64 4
  %123 = bitcast <2 x i64>* %120 to <8 x i16>*
  %124 = load <8 x i16>, <8 x i16>* %123, align 1
  %125 = sub <8 x i16> %124, %113
  %126 = bitcast <2 x i64>* %122 to <8 x i16>*
  store <8 x i16> %125, <8 x i16>* %126, align 1
  %127 = getelementptr inbounds <2 x i64>, <2 x i64>* %120, i64 4
  %128 = icmp ult <2 x i64>* %127, %4
  br i1 %128, label %119, label %129

129:                                              ; preds = %119
  ret void
}

; Function Attrs: nofree nounwind ssp uwtable
define hidden void @cfl_subtract_average_8x32_sse2(i16* readonly, i16* nocapture) #0 {
  %3 = bitcast i16* %0 to <2 x i64>*
  %4 = getelementptr inbounds i16, i16* %0, i64 1024
  %5 = bitcast i16* %4 to <2 x i64>*
  br label %6

6:                                                ; preds = %6, %2
  %7 = phi <2 x i64>* [ %3, %2 ], [ %21, %6 ]
  %8 = phi <4 x i32> [ zeroinitializer, %2 ], [ %20, %6 ]
  %9 = bitcast <2 x i64>* %7 to <8 x i16>*
  %10 = load <8 x i16>, <8 x i16>* %9, align 1
  %11 = getelementptr inbounds <2 x i64>, <2 x i64>* %7, i64 4
  %12 = bitcast <2 x i64>* %11 to <8 x i16>*
  %13 = load <8 x i16>, <8 x i16>* %12, align 1
  %14 = add <8 x i16> %13, %10
  %15 = shufflevector <8 x i16> %14, <8 x i16> <i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef>, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %16 = shufflevector <8 x i16> %14, <8 x i16> <i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0>, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %17 = bitcast <8 x i16> %15 to <4 x i32>
  %18 = bitcast <8 x i16> %16 to <4 x i32>
  %19 = add <4 x i32> %8, %17
  %20 = add <4 x i32> %19, %18
  %21 = getelementptr inbounds <2 x i64>, <2 x i64>* %7, i64 8
  %22 = icmp ult <2 x i64>* %21, %5
  br i1 %22, label %6, label %23

23:                                               ; preds = %6
  %24 = shufflevector <4 x i32> %20, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 0, i32 1>
  %25 = add <4 x i32> %24, %20
  %26 = shufflevector <4 x i32> %25, <4 x i32> undef, <4 x i32> <i32 1, i32 0, i32 3, i32 2>
  %27 = add <4 x i32> %25, <i32 128, i32 128, i32 128, i32 128>
  %28 = add <4 x i32> %27, %26
  %29 = lshr <4 x i32> %28, <i32 8, i32 8, i32 8, i32 8>
  %30 = tail call <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32> %29, <4 x i32> %29) #3
  %31 = bitcast i16* %1 to <2 x i64>*
  br label %32

32:                                               ; preds = %32, %23
  %33 = phi <2 x i64>* [ %3, %23 ], [ %39, %32 ]
  %34 = phi <2 x i64>* [ %31, %23 ], [ %40, %32 ]
  %35 = bitcast <2 x i64>* %33 to <8 x i16>*
  %36 = load <8 x i16>, <8 x i16>* %35, align 1
  %37 = sub <8 x i16> %36, %30
  %38 = bitcast <2 x i64>* %34 to <8 x i16>*
  store <8 x i16> %37, <8 x i16>* %38, align 1
  %39 = getelementptr inbounds <2 x i64>, <2 x i64>* %33, i64 4
  %40 = getelementptr inbounds <2 x i64>, <2 x i64>* %34, i64 4
  %41 = icmp ult <2 x i64>* %39, %5
  br i1 %41, label %32, label %42

42:                                               ; preds = %32
  ret void
}

; Function Attrs: nofree nounwind ssp uwtable
define hidden void @cfl_subtract_average_16x4_sse2(i16* readonly, i16* nocapture) #0 {
  %3 = bitcast i16* %0 to <8 x i16>*
  %4 = load <8 x i16>, <8 x i16>* %3, align 1
  %5 = getelementptr inbounds i16, i16* %0, i64 8
  %6 = bitcast i16* %5 to <8 x i16>*
  %7 = load <8 x i16>, <8 x i16>* %6, align 1
  %8 = add <8 x i16> %7, %4
  %9 = getelementptr inbounds i16, i16* %0, i64 32
  %10 = shufflevector <8 x i16> %8, <8 x i16> <i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef>, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %11 = bitcast <8 x i16> %10 to <4 x i32>
  %12 = shufflevector <8 x i16> %8, <8 x i16> <i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0>, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %13 = bitcast <8 x i16> %12 to <4 x i32>
  %14 = add <4 x i32> %11, %13
  %15 = bitcast i16* %9 to <8 x i16>*
  %16 = load <8 x i16>, <8 x i16>* %15, align 1
  %17 = getelementptr inbounds i16, i16* %0, i64 40
  %18 = bitcast i16* %17 to <8 x i16>*
  %19 = load <8 x i16>, <8 x i16>* %18, align 1
  %20 = add <8 x i16> %19, %16
  %21 = shufflevector <8 x i16> %20, <8 x i16> <i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef>, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %22 = shufflevector <8 x i16> %20, <8 x i16> <i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0>, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %23 = bitcast <8 x i16> %21 to <4 x i32>
  %24 = bitcast <8 x i16> %22 to <4 x i32>
  %25 = add <4 x i32> %14, %23
  %26 = add <4 x i32> %25, %24
  %27 = getelementptr inbounds i16, i16* %0, i64 64
  %28 = bitcast i16* %27 to <8 x i16>*
  %29 = load <8 x i16>, <8 x i16>* %28, align 1
  %30 = getelementptr inbounds i16, i16* %0, i64 72
  %31 = bitcast i16* %30 to <8 x i16>*
  %32 = load <8 x i16>, <8 x i16>* %31, align 1
  %33 = add <8 x i16> %32, %29
  %34 = shufflevector <8 x i16> %33, <8 x i16> <i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef>, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %35 = shufflevector <8 x i16> %33, <8 x i16> <i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0>, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %36 = bitcast <8 x i16> %34 to <4 x i32>
  %37 = bitcast <8 x i16> %35 to <4 x i32>
  %38 = add <4 x i32> %26, %36
  %39 = add <4 x i32> %38, %37
  %40 = getelementptr inbounds i16, i16* %0, i64 96
  %41 = bitcast i16* %40 to <8 x i16>*
  %42 = load <8 x i16>, <8 x i16>* %41, align 1
  %43 = getelementptr inbounds i16, i16* %0, i64 104
  %44 = bitcast i16* %43 to <8 x i16>*
  %45 = load <8 x i16>, <8 x i16>* %44, align 1
  %46 = add <8 x i16> %45, %42
  %47 = shufflevector <8 x i16> %46, <8 x i16> <i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef>, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %48 = shufflevector <8 x i16> %46, <8 x i16> <i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0>, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %49 = bitcast <8 x i16> %47 to <4 x i32>
  %50 = bitcast <8 x i16> %48 to <4 x i32>
  %51 = add <4 x i32> %39, %49
  %52 = add <4 x i32> %51, %50
  %53 = shufflevector <4 x i32> %52, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 0, i32 1>
  %54 = add <4 x i32> %53, %52
  %55 = shufflevector <4 x i32> %54, <4 x i32> undef, <4 x i32> <i32 1, i32 0, i32 3, i32 2>
  %56 = add <4 x i32> %54, <i32 32, i32 32, i32 32, i32 32>
  %57 = add <4 x i32> %56, %55
  %58 = lshr <4 x i32> %57, <i32 6, i32 6, i32 6, i32 6>
  %59 = tail call <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32> %58, <4 x i32> %58) #3
  %60 = sub <8 x i16> %4, %59
  %61 = bitcast i16* %1 to <8 x i16>*
  store <8 x i16> %60, <8 x i16>* %61, align 1
  %62 = getelementptr inbounds i16, i16* %1, i64 8
  %63 = load <8 x i16>, <8 x i16>* %6, align 1
  %64 = sub <8 x i16> %63, %59
  %65 = bitcast i16* %62 to <8 x i16>*
  store <8 x i16> %64, <8 x i16>* %65, align 1
  %66 = getelementptr inbounds i16, i16* %1, i64 32
  %67 = bitcast i16* %9 to <8 x i16>*
  %68 = load <8 x i16>, <8 x i16>* %67, align 1
  %69 = sub <8 x i16> %68, %59
  %70 = bitcast i16* %66 to <8 x i16>*
  store <8 x i16> %69, <8 x i16>* %70, align 1
  %71 = getelementptr inbounds i16, i16* %1, i64 40
  %72 = getelementptr inbounds i16, i16* %0, i64 40
  %73 = bitcast i16* %72 to <8 x i16>*
  %74 = load <8 x i16>, <8 x i16>* %73, align 1
  %75 = sub <8 x i16> %74, %59
  %76 = bitcast i16* %71 to <8 x i16>*
  store <8 x i16> %75, <8 x i16>* %76, align 1
  %77 = getelementptr inbounds i16, i16* %0, i64 64
  %78 = getelementptr inbounds i16, i16* %1, i64 64
  %79 = bitcast i16* %77 to <8 x i16>*
  %80 = load <8 x i16>, <8 x i16>* %79, align 1
  %81 = sub <8 x i16> %80, %59
  %82 = bitcast i16* %78 to <8 x i16>*
  store <8 x i16> %81, <8 x i16>* %82, align 1
  %83 = getelementptr inbounds i16, i16* %1, i64 72
  %84 = getelementptr inbounds i16, i16* %0, i64 72
  %85 = bitcast i16* %84 to <8 x i16>*
  %86 = load <8 x i16>, <8 x i16>* %85, align 1
  %87 = sub <8 x i16> %86, %59
  %88 = bitcast i16* %83 to <8 x i16>*
  store <8 x i16> %87, <8 x i16>* %88, align 1
  %89 = getelementptr inbounds i16, i16* %0, i64 96
  %90 = getelementptr inbounds i16, i16* %1, i64 96
  %91 = bitcast i16* %89 to <8 x i16>*
  %92 = load <8 x i16>, <8 x i16>* %91, align 1
  %93 = sub <8 x i16> %92, %59
  %94 = bitcast i16* %90 to <8 x i16>*
  store <8 x i16> %93, <8 x i16>* %94, align 1
  %95 = getelementptr inbounds i16, i16* %1, i64 104
  %96 = getelementptr inbounds i16, i16* %0, i64 104
  %97 = bitcast i16* %96 to <8 x i16>*
  %98 = load <8 x i16>, <8 x i16>* %97, align 1
  %99 = sub <8 x i16> %98, %59
  %100 = bitcast i16* %95 to <8 x i16>*
  store <8 x i16> %99, <8 x i16>* %100, align 1
  ret void
}

; Function Attrs: nofree nounwind ssp uwtable
define hidden void @cfl_subtract_average_16x8_sse2(i16* readonly, i16* nocapture) #0 {
  %3 = bitcast i16* %0 to <8 x i16>*
  %4 = load <8 x i16>, <8 x i16>* %3, align 1
  %5 = getelementptr inbounds i16, i16* %0, i64 8
  %6 = bitcast i16* %5 to <8 x i16>*
  %7 = load <8 x i16>, <8 x i16>* %6, align 1
  %8 = add <8 x i16> %7, %4
  %9 = getelementptr inbounds i16, i16* %0, i64 32
  %10 = shufflevector <8 x i16> %8, <8 x i16> <i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef>, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %11 = bitcast <8 x i16> %10 to <4 x i32>
  %12 = shufflevector <8 x i16> %8, <8 x i16> <i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0>, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %13 = bitcast <8 x i16> %12 to <4 x i32>
  %14 = add <4 x i32> %11, %13
  %15 = bitcast i16* %9 to <8 x i16>*
  %16 = load <8 x i16>, <8 x i16>* %15, align 1
  %17 = getelementptr inbounds i16, i16* %0, i64 40
  %18 = bitcast i16* %17 to <8 x i16>*
  %19 = load <8 x i16>, <8 x i16>* %18, align 1
  %20 = add <8 x i16> %19, %16
  %21 = shufflevector <8 x i16> %20, <8 x i16> <i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef>, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %22 = shufflevector <8 x i16> %20, <8 x i16> <i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0>, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %23 = bitcast <8 x i16> %21 to <4 x i32>
  %24 = bitcast <8 x i16> %22 to <4 x i32>
  %25 = add <4 x i32> %14, %23
  %26 = add <4 x i32> %25, %24
  %27 = getelementptr inbounds i16, i16* %0, i64 64
  %28 = bitcast i16* %27 to <8 x i16>*
  %29 = load <8 x i16>, <8 x i16>* %28, align 1
  %30 = getelementptr inbounds i16, i16* %0, i64 72
  %31 = bitcast i16* %30 to <8 x i16>*
  %32 = load <8 x i16>, <8 x i16>* %31, align 1
  %33 = add <8 x i16> %32, %29
  %34 = shufflevector <8 x i16> %33, <8 x i16> <i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef>, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %35 = shufflevector <8 x i16> %33, <8 x i16> <i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0>, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %36 = bitcast <8 x i16> %34 to <4 x i32>
  %37 = bitcast <8 x i16> %35 to <4 x i32>
  %38 = add <4 x i32> %26, %36
  %39 = add <4 x i32> %38, %37
  %40 = getelementptr inbounds i16, i16* %0, i64 96
  %41 = bitcast i16* %40 to <8 x i16>*
  %42 = load <8 x i16>, <8 x i16>* %41, align 1
  %43 = getelementptr inbounds i16, i16* %0, i64 104
  %44 = bitcast i16* %43 to <8 x i16>*
  %45 = load <8 x i16>, <8 x i16>* %44, align 1
  %46 = add <8 x i16> %45, %42
  %47 = shufflevector <8 x i16> %46, <8 x i16> <i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef>, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %48 = shufflevector <8 x i16> %46, <8 x i16> <i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0>, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %49 = bitcast <8 x i16> %47 to <4 x i32>
  %50 = bitcast <8 x i16> %48 to <4 x i32>
  %51 = add <4 x i32> %39, %49
  %52 = add <4 x i32> %51, %50
  %53 = getelementptr inbounds i16, i16* %0, i64 128
  %54 = bitcast i16* %53 to <8 x i16>*
  %55 = load <8 x i16>, <8 x i16>* %54, align 1
  %56 = getelementptr inbounds i16, i16* %0, i64 136
  %57 = bitcast i16* %56 to <8 x i16>*
  %58 = load <8 x i16>, <8 x i16>* %57, align 1
  %59 = add <8 x i16> %58, %55
  %60 = shufflevector <8 x i16> %59, <8 x i16> <i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef>, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %61 = shufflevector <8 x i16> %59, <8 x i16> <i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0>, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %62 = bitcast <8 x i16> %60 to <4 x i32>
  %63 = bitcast <8 x i16> %61 to <4 x i32>
  %64 = add <4 x i32> %52, %62
  %65 = add <4 x i32> %64, %63
  %66 = getelementptr inbounds i16, i16* %0, i64 160
  %67 = bitcast i16* %66 to <8 x i16>*
  %68 = load <8 x i16>, <8 x i16>* %67, align 1
  %69 = getelementptr inbounds i16, i16* %0, i64 168
  %70 = bitcast i16* %69 to <8 x i16>*
  %71 = load <8 x i16>, <8 x i16>* %70, align 1
  %72 = add <8 x i16> %71, %68
  %73 = shufflevector <8 x i16> %72, <8 x i16> <i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef>, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %74 = shufflevector <8 x i16> %72, <8 x i16> <i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0>, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %75 = bitcast <8 x i16> %73 to <4 x i32>
  %76 = bitcast <8 x i16> %74 to <4 x i32>
  %77 = add <4 x i32> %65, %75
  %78 = add <4 x i32> %77, %76
  %79 = getelementptr inbounds i16, i16* %0, i64 192
  %80 = bitcast i16* %79 to <8 x i16>*
  %81 = load <8 x i16>, <8 x i16>* %80, align 1
  %82 = getelementptr inbounds i16, i16* %0, i64 200
  %83 = bitcast i16* %82 to <8 x i16>*
  %84 = load <8 x i16>, <8 x i16>* %83, align 1
  %85 = add <8 x i16> %84, %81
  %86 = shufflevector <8 x i16> %85, <8 x i16> <i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef>, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %87 = shufflevector <8 x i16> %85, <8 x i16> <i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0>, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %88 = bitcast <8 x i16> %86 to <4 x i32>
  %89 = bitcast <8 x i16> %87 to <4 x i32>
  %90 = add <4 x i32> %78, %88
  %91 = add <4 x i32> %90, %89
  %92 = getelementptr inbounds i16, i16* %0, i64 224
  %93 = bitcast i16* %92 to <8 x i16>*
  %94 = load <8 x i16>, <8 x i16>* %93, align 1
  %95 = getelementptr inbounds i16, i16* %0, i64 232
  %96 = bitcast i16* %95 to <8 x i16>*
  %97 = load <8 x i16>, <8 x i16>* %96, align 1
  %98 = add <8 x i16> %97, %94
  %99 = shufflevector <8 x i16> %98, <8 x i16> <i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef>, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %100 = shufflevector <8 x i16> %98, <8 x i16> <i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0>, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %101 = bitcast <8 x i16> %99 to <4 x i32>
  %102 = bitcast <8 x i16> %100 to <4 x i32>
  %103 = add <4 x i32> %91, %101
  %104 = add <4 x i32> %103, %102
  %105 = shufflevector <4 x i32> %104, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 0, i32 1>
  %106 = add <4 x i32> %105, %104
  %107 = shufflevector <4 x i32> %106, <4 x i32> undef, <4 x i32> <i32 1, i32 0, i32 3, i32 2>
  %108 = add <4 x i32> %106, <i32 64, i32 64, i32 64, i32 64>
  %109 = add <4 x i32> %108, %107
  %110 = lshr <4 x i32> %109, <i32 7, i32 7, i32 7, i32 7>
  %111 = tail call <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32> %110, <4 x i32> %110) #3
  %112 = sub <8 x i16> %4, %111
  %113 = bitcast i16* %1 to <8 x i16>*
  store <8 x i16> %112, <8 x i16>* %113, align 1
  %114 = getelementptr inbounds i16, i16* %1, i64 8
  %115 = load <8 x i16>, <8 x i16>* %6, align 1
  %116 = sub <8 x i16> %115, %111
  %117 = bitcast i16* %114 to <8 x i16>*
  store <8 x i16> %116, <8 x i16>* %117, align 1
  %118 = getelementptr inbounds i16, i16* %1, i64 32
  %119 = bitcast i16* %9 to <8 x i16>*
  %120 = load <8 x i16>, <8 x i16>* %119, align 1
  %121 = sub <8 x i16> %120, %111
  %122 = bitcast i16* %118 to <8 x i16>*
  store <8 x i16> %121, <8 x i16>* %122, align 1
  %123 = getelementptr inbounds i16, i16* %1, i64 40
  %124 = getelementptr inbounds i16, i16* %0, i64 40
  %125 = bitcast i16* %124 to <8 x i16>*
  %126 = load <8 x i16>, <8 x i16>* %125, align 1
  %127 = sub <8 x i16> %126, %111
  %128 = bitcast i16* %123 to <8 x i16>*
  store <8 x i16> %127, <8 x i16>* %128, align 1
  %129 = getelementptr inbounds i16, i16* %0, i64 64
  %130 = getelementptr inbounds i16, i16* %1, i64 64
  %131 = bitcast i16* %129 to <8 x i16>*
  %132 = load <8 x i16>, <8 x i16>* %131, align 1
  %133 = sub <8 x i16> %132, %111
  %134 = bitcast i16* %130 to <8 x i16>*
  store <8 x i16> %133, <8 x i16>* %134, align 1
  %135 = getelementptr inbounds i16, i16* %1, i64 72
  %136 = getelementptr inbounds i16, i16* %0, i64 72
  %137 = bitcast i16* %136 to <8 x i16>*
  %138 = load <8 x i16>, <8 x i16>* %137, align 1
  %139 = sub <8 x i16> %138, %111
  %140 = bitcast i16* %135 to <8 x i16>*
  store <8 x i16> %139, <8 x i16>* %140, align 1
  %141 = getelementptr inbounds i16, i16* %0, i64 96
  %142 = getelementptr inbounds i16, i16* %1, i64 96
  %143 = bitcast i16* %141 to <8 x i16>*
  %144 = load <8 x i16>, <8 x i16>* %143, align 1
  %145 = sub <8 x i16> %144, %111
  %146 = bitcast i16* %142 to <8 x i16>*
  store <8 x i16> %145, <8 x i16>* %146, align 1
  %147 = getelementptr inbounds i16, i16* %1, i64 104
  %148 = getelementptr inbounds i16, i16* %0, i64 104
  %149 = bitcast i16* %148 to <8 x i16>*
  %150 = load <8 x i16>, <8 x i16>* %149, align 1
  %151 = sub <8 x i16> %150, %111
  %152 = bitcast i16* %147 to <8 x i16>*
  store <8 x i16> %151, <8 x i16>* %152, align 1
  %153 = getelementptr inbounds i16, i16* %0, i64 128
  %154 = getelementptr inbounds i16, i16* %1, i64 128
  %155 = bitcast i16* %153 to <8 x i16>*
  %156 = load <8 x i16>, <8 x i16>* %155, align 1
  %157 = sub <8 x i16> %156, %111
  %158 = bitcast i16* %154 to <8 x i16>*
  store <8 x i16> %157, <8 x i16>* %158, align 1
  %159 = getelementptr inbounds i16, i16* %1, i64 136
  %160 = getelementptr inbounds i16, i16* %0, i64 136
  %161 = bitcast i16* %160 to <8 x i16>*
  %162 = load <8 x i16>, <8 x i16>* %161, align 1
  %163 = sub <8 x i16> %162, %111
  %164 = bitcast i16* %159 to <8 x i16>*
  store <8 x i16> %163, <8 x i16>* %164, align 1
  %165 = getelementptr inbounds i16, i16* %0, i64 160
  %166 = getelementptr inbounds i16, i16* %1, i64 160
  %167 = bitcast i16* %165 to <8 x i16>*
  %168 = load <8 x i16>, <8 x i16>* %167, align 1
  %169 = sub <8 x i16> %168, %111
  %170 = bitcast i16* %166 to <8 x i16>*
  store <8 x i16> %169, <8 x i16>* %170, align 1
  %171 = getelementptr inbounds i16, i16* %1, i64 168
  %172 = getelementptr inbounds i16, i16* %0, i64 168
  %173 = bitcast i16* %172 to <8 x i16>*
  %174 = load <8 x i16>, <8 x i16>* %173, align 1
  %175 = sub <8 x i16> %174, %111
  %176 = bitcast i16* %171 to <8 x i16>*
  store <8 x i16> %175, <8 x i16>* %176, align 1
  %177 = getelementptr inbounds i16, i16* %0, i64 192
  %178 = getelementptr inbounds i16, i16* %1, i64 192
  %179 = bitcast i16* %177 to <8 x i16>*
  %180 = load <8 x i16>, <8 x i16>* %179, align 1
  %181 = sub <8 x i16> %180, %111
  %182 = bitcast i16* %178 to <8 x i16>*
  store <8 x i16> %181, <8 x i16>* %182, align 1
  %183 = getelementptr inbounds i16, i16* %1, i64 200
  %184 = getelementptr inbounds i16, i16* %0, i64 200
  %185 = bitcast i16* %184 to <8 x i16>*
  %186 = load <8 x i16>, <8 x i16>* %185, align 1
  %187 = sub <8 x i16> %186, %111
  %188 = bitcast i16* %183 to <8 x i16>*
  store <8 x i16> %187, <8 x i16>* %188, align 1
  %189 = getelementptr inbounds i16, i16* %0, i64 224
  %190 = getelementptr inbounds i16, i16* %1, i64 224
  %191 = bitcast i16* %189 to <8 x i16>*
  %192 = load <8 x i16>, <8 x i16>* %191, align 1
  %193 = sub <8 x i16> %192, %111
  %194 = bitcast i16* %190 to <8 x i16>*
  store <8 x i16> %193, <8 x i16>* %194, align 1
  %195 = getelementptr inbounds i16, i16* %1, i64 232
  %196 = getelementptr inbounds i16, i16* %0, i64 232
  %197 = bitcast i16* %196 to <8 x i16>*
  %198 = load <8 x i16>, <8 x i16>* %197, align 1
  %199 = sub <8 x i16> %198, %111
  %200 = bitcast i16* %195 to <8 x i16>*
  store <8 x i16> %199, <8 x i16>* %200, align 1
  ret void
}

; Function Attrs: nofree nounwind ssp uwtable
define hidden void @cfl_subtract_average_16x16_sse2(i16* readonly, i16* nocapture) #0 {
  %3 = bitcast i16* %0 to <2 x i64>*
  %4 = getelementptr inbounds i16, i16* %0, i64 512
  %5 = bitcast i16* %4 to <2 x i64>*
  br label %6

6:                                                ; preds = %6, %2
  %7 = phi <2 x i64>* [ %3, %2 ], [ %21, %6 ]
  %8 = phi <4 x i32> [ zeroinitializer, %2 ], [ %20, %6 ]
  %9 = bitcast <2 x i64>* %7 to <8 x i16>*
  %10 = load <8 x i16>, <8 x i16>* %9, align 1
  %11 = getelementptr inbounds <2 x i64>, <2 x i64>* %7, i64 1
  %12 = bitcast <2 x i64>* %11 to <8 x i16>*
  %13 = load <8 x i16>, <8 x i16>* %12, align 1
  %14 = add <8 x i16> %13, %10
  %15 = shufflevector <8 x i16> %14, <8 x i16> <i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef>, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %16 = shufflevector <8 x i16> %14, <8 x i16> <i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0>, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %17 = bitcast <8 x i16> %15 to <4 x i32>
  %18 = bitcast <8 x i16> %16 to <4 x i32>
  %19 = add <4 x i32> %8, %17
  %20 = add <4 x i32> %19, %18
  %21 = getelementptr inbounds <2 x i64>, <2 x i64>* %7, i64 4
  %22 = icmp ult <2 x i64>* %21, %5
  br i1 %22, label %6, label %23

23:                                               ; preds = %6
  %24 = shufflevector <4 x i32> %20, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 0, i32 1>
  %25 = add <4 x i32> %24, %20
  %26 = shufflevector <4 x i32> %25, <4 x i32> undef, <4 x i32> <i32 1, i32 0, i32 3, i32 2>
  %27 = add <4 x i32> %25, <i32 128, i32 128, i32 128, i32 128>
  %28 = add <4 x i32> %27, %26
  %29 = lshr <4 x i32> %28, <i32 8, i32 8, i32 8, i32 8>
  %30 = tail call <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32> %29, <4 x i32> %29) #3
  %31 = bitcast i16* %1 to <2 x i64>*
  br label %32

32:                                               ; preds = %32, %23
  %33 = phi <2 x i64>* [ %3, %23 ], [ %45, %32 ]
  %34 = phi <2 x i64>* [ %31, %23 ], [ %46, %32 ]
  %35 = bitcast <2 x i64>* %33 to <8 x i16>*
  %36 = load <8 x i16>, <8 x i16>* %35, align 1
  %37 = sub <8 x i16> %36, %30
  %38 = bitcast <2 x i64>* %34 to <8 x i16>*
  store <8 x i16> %37, <8 x i16>* %38, align 1
  %39 = getelementptr inbounds <2 x i64>, <2 x i64>* %34, i64 1
  %40 = getelementptr inbounds <2 x i64>, <2 x i64>* %33, i64 1
  %41 = bitcast <2 x i64>* %40 to <8 x i16>*
  %42 = load <8 x i16>, <8 x i16>* %41, align 1
  %43 = sub <8 x i16> %42, %30
  %44 = bitcast <2 x i64>* %39 to <8 x i16>*
  store <8 x i16> %43, <8 x i16>* %44, align 1
  %45 = getelementptr inbounds <2 x i64>, <2 x i64>* %33, i64 4
  %46 = getelementptr inbounds <2 x i64>, <2 x i64>* %34, i64 4
  %47 = icmp ult <2 x i64>* %45, %5
  br i1 %47, label %32, label %48

48:                                               ; preds = %32
  ret void
}

; Function Attrs: nofree nounwind ssp uwtable
define hidden void @cfl_subtract_average_16x32_sse2(i16* readonly, i16* nocapture) #0 {
  %3 = bitcast i16* %0 to <2 x i64>*
  %4 = getelementptr inbounds i16, i16* %0, i64 1024
  %5 = bitcast i16* %4 to <2 x i64>*
  br label %6

6:                                                ; preds = %6, %2
  %7 = phi <2 x i64>* [ %3, %2 ], [ %21, %6 ]
  %8 = phi <4 x i32> [ zeroinitializer, %2 ], [ %20, %6 ]
  %9 = bitcast <2 x i64>* %7 to <8 x i16>*
  %10 = load <8 x i16>, <8 x i16>* %9, align 1
  %11 = getelementptr inbounds <2 x i64>, <2 x i64>* %7, i64 1
  %12 = bitcast <2 x i64>* %11 to <8 x i16>*
  %13 = load <8 x i16>, <8 x i16>* %12, align 1
  %14 = add <8 x i16> %13, %10
  %15 = shufflevector <8 x i16> %14, <8 x i16> <i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef>, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %16 = shufflevector <8 x i16> %14, <8 x i16> <i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0>, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %17 = bitcast <8 x i16> %15 to <4 x i32>
  %18 = bitcast <8 x i16> %16 to <4 x i32>
  %19 = add <4 x i32> %8, %17
  %20 = add <4 x i32> %19, %18
  %21 = getelementptr inbounds <2 x i64>, <2 x i64>* %7, i64 4
  %22 = icmp ult <2 x i64>* %21, %5
  br i1 %22, label %6, label %23

23:                                               ; preds = %6
  %24 = shufflevector <4 x i32> %20, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 0, i32 1>
  %25 = add <4 x i32> %24, %20
  %26 = shufflevector <4 x i32> %25, <4 x i32> undef, <4 x i32> <i32 1, i32 0, i32 3, i32 2>
  %27 = add <4 x i32> %25, <i32 256, i32 256, i32 256, i32 256>
  %28 = add <4 x i32> %27, %26
  %29 = lshr <4 x i32> %28, <i32 9, i32 9, i32 9, i32 9>
  %30 = tail call <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32> %29, <4 x i32> %29) #3
  %31 = bitcast i16* %1 to <2 x i64>*
  br label %32

32:                                               ; preds = %32, %23
  %33 = phi <2 x i64>* [ %3, %23 ], [ %45, %32 ]
  %34 = phi <2 x i64>* [ %31, %23 ], [ %46, %32 ]
  %35 = bitcast <2 x i64>* %33 to <8 x i16>*
  %36 = load <8 x i16>, <8 x i16>* %35, align 1
  %37 = sub <8 x i16> %36, %30
  %38 = bitcast <2 x i64>* %34 to <8 x i16>*
  store <8 x i16> %37, <8 x i16>* %38, align 1
  %39 = getelementptr inbounds <2 x i64>, <2 x i64>* %34, i64 1
  %40 = getelementptr inbounds <2 x i64>, <2 x i64>* %33, i64 1
  %41 = bitcast <2 x i64>* %40 to <8 x i16>*
  %42 = load <8 x i16>, <8 x i16>* %41, align 1
  %43 = sub <8 x i16> %42, %30
  %44 = bitcast <2 x i64>* %39 to <8 x i16>*
  store <8 x i16> %43, <8 x i16>* %44, align 1
  %45 = getelementptr inbounds <2 x i64>, <2 x i64>* %33, i64 4
  %46 = getelementptr inbounds <2 x i64>, <2 x i64>* %34, i64 4
  %47 = icmp ult <2 x i64>* %45, %5
  br i1 %47, label %32, label %48

48:                                               ; preds = %32
  ret void
}

; Function Attrs: nofree nounwind ssp uwtable
define hidden void @cfl_subtract_average_32x8_sse2(i16* readonly, i16* nocapture) #0 {
  %3 = bitcast i16* %0 to <8 x i16>*
  %4 = load <8 x i16>, <8 x i16>* %3, align 1
  %5 = getelementptr inbounds i16, i16* %0, i64 8
  %6 = bitcast i16* %5 to <8 x i16>*
  %7 = load <8 x i16>, <8 x i16>* %6, align 1
  %8 = add <8 x i16> %7, %4
  %9 = getelementptr inbounds i16, i16* %0, i64 16
  %10 = bitcast i16* %9 to <8 x i16>*
  %11 = load <8 x i16>, <8 x i16>* %10, align 1
  %12 = getelementptr inbounds i16, i16* %0, i64 24
  %13 = bitcast i16* %12 to <8 x i16>*
  %14 = load <8 x i16>, <8 x i16>* %13, align 1
  %15 = add <8 x i16> %14, %11
  %16 = getelementptr inbounds i16, i16* %0, i64 32
  %17 = shufflevector <8 x i16> %8, <8 x i16> <i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef>, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %18 = bitcast <8 x i16> %17 to <4 x i32>
  %19 = shufflevector <8 x i16> %8, <8 x i16> <i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0>, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %20 = bitcast <8 x i16> %19 to <4 x i32>
  %21 = add <4 x i32> %18, %20
  %22 = shufflevector <8 x i16> %15, <8 x i16> <i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef>, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %23 = bitcast <8 x i16> %22 to <4 x i32>
  %24 = add <4 x i32> %21, %23
  %25 = shufflevector <8 x i16> %15, <8 x i16> <i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0>, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %26 = bitcast <8 x i16> %25 to <4 x i32>
  %27 = add <4 x i32> %24, %26
  %28 = bitcast i16* %16 to <8 x i16>*
  %29 = load <8 x i16>, <8 x i16>* %28, align 1
  %30 = getelementptr inbounds i16, i16* %0, i64 40
  %31 = bitcast i16* %30 to <8 x i16>*
  %32 = load <8 x i16>, <8 x i16>* %31, align 1
  %33 = add <8 x i16> %32, %29
  %34 = shufflevector <8 x i16> %33, <8 x i16> <i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef>, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %35 = shufflevector <8 x i16> %33, <8 x i16> <i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0>, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %36 = bitcast <8 x i16> %34 to <4 x i32>
  %37 = bitcast <8 x i16> %35 to <4 x i32>
  %38 = add <4 x i32> %27, %36
  %39 = add <4 x i32> %38, %37
  %40 = getelementptr inbounds i16, i16* %0, i64 48
  %41 = bitcast i16* %40 to <8 x i16>*
  %42 = load <8 x i16>, <8 x i16>* %41, align 1
  %43 = getelementptr inbounds i16, i16* %0, i64 56
  %44 = bitcast i16* %43 to <8 x i16>*
  %45 = load <8 x i16>, <8 x i16>* %44, align 1
  %46 = add <8 x i16> %45, %42
  %47 = shufflevector <8 x i16> %46, <8 x i16> <i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef>, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %48 = shufflevector <8 x i16> %46, <8 x i16> <i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0>, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %49 = bitcast <8 x i16> %47 to <4 x i32>
  %50 = bitcast <8 x i16> %48 to <4 x i32>
  %51 = add <4 x i32> %39, %49
  %52 = add <4 x i32> %51, %50
  %53 = getelementptr inbounds i16, i16* %0, i64 64
  %54 = bitcast i16* %53 to <8 x i16>*
  %55 = load <8 x i16>, <8 x i16>* %54, align 1
  %56 = getelementptr inbounds i16, i16* %0, i64 72
  %57 = bitcast i16* %56 to <8 x i16>*
  %58 = load <8 x i16>, <8 x i16>* %57, align 1
  %59 = add <8 x i16> %58, %55
  %60 = shufflevector <8 x i16> %59, <8 x i16> <i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef>, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %61 = shufflevector <8 x i16> %59, <8 x i16> <i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0>, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %62 = bitcast <8 x i16> %60 to <4 x i32>
  %63 = bitcast <8 x i16> %61 to <4 x i32>
  %64 = add <4 x i32> %52, %62
  %65 = add <4 x i32> %64, %63
  %66 = getelementptr inbounds i16, i16* %0, i64 80
  %67 = bitcast i16* %66 to <8 x i16>*
  %68 = load <8 x i16>, <8 x i16>* %67, align 1
  %69 = getelementptr inbounds i16, i16* %0, i64 88
  %70 = bitcast i16* %69 to <8 x i16>*
  %71 = load <8 x i16>, <8 x i16>* %70, align 1
  %72 = add <8 x i16> %71, %68
  %73 = shufflevector <8 x i16> %72, <8 x i16> <i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef>, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %74 = shufflevector <8 x i16> %72, <8 x i16> <i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0>, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %75 = bitcast <8 x i16> %73 to <4 x i32>
  %76 = bitcast <8 x i16> %74 to <4 x i32>
  %77 = add <4 x i32> %65, %75
  %78 = add <4 x i32> %77, %76
  %79 = getelementptr inbounds i16, i16* %0, i64 96
  %80 = bitcast i16* %79 to <8 x i16>*
  %81 = load <8 x i16>, <8 x i16>* %80, align 1
  %82 = getelementptr inbounds i16, i16* %0, i64 104
  %83 = bitcast i16* %82 to <8 x i16>*
  %84 = load <8 x i16>, <8 x i16>* %83, align 1
  %85 = add <8 x i16> %84, %81
  %86 = shufflevector <8 x i16> %85, <8 x i16> <i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef>, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %87 = shufflevector <8 x i16> %85, <8 x i16> <i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0>, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %88 = bitcast <8 x i16> %86 to <4 x i32>
  %89 = bitcast <8 x i16> %87 to <4 x i32>
  %90 = add <4 x i32> %78, %88
  %91 = add <4 x i32> %90, %89
  %92 = getelementptr inbounds i16, i16* %0, i64 112
  %93 = bitcast i16* %92 to <8 x i16>*
  %94 = load <8 x i16>, <8 x i16>* %93, align 1
  %95 = getelementptr inbounds i16, i16* %0, i64 120
  %96 = bitcast i16* %95 to <8 x i16>*
  %97 = load <8 x i16>, <8 x i16>* %96, align 1
  %98 = add <8 x i16> %97, %94
  %99 = shufflevector <8 x i16> %98, <8 x i16> <i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef>, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %100 = shufflevector <8 x i16> %98, <8 x i16> <i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0>, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %101 = bitcast <8 x i16> %99 to <4 x i32>
  %102 = bitcast <8 x i16> %100 to <4 x i32>
  %103 = add <4 x i32> %91, %101
  %104 = add <4 x i32> %103, %102
  %105 = getelementptr inbounds i16, i16* %0, i64 128
  %106 = bitcast i16* %105 to <8 x i16>*
  %107 = load <8 x i16>, <8 x i16>* %106, align 1
  %108 = getelementptr inbounds i16, i16* %0, i64 136
  %109 = bitcast i16* %108 to <8 x i16>*
  %110 = load <8 x i16>, <8 x i16>* %109, align 1
  %111 = add <8 x i16> %110, %107
  %112 = shufflevector <8 x i16> %111, <8 x i16> <i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef>, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %113 = shufflevector <8 x i16> %111, <8 x i16> <i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0>, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %114 = bitcast <8 x i16> %112 to <4 x i32>
  %115 = bitcast <8 x i16> %113 to <4 x i32>
  %116 = add <4 x i32> %104, %114
  %117 = add <4 x i32> %116, %115
  %118 = getelementptr inbounds i16, i16* %0, i64 144
  %119 = bitcast i16* %118 to <8 x i16>*
  %120 = load <8 x i16>, <8 x i16>* %119, align 1
  %121 = getelementptr inbounds i16, i16* %0, i64 152
  %122 = bitcast i16* %121 to <8 x i16>*
  %123 = load <8 x i16>, <8 x i16>* %122, align 1
  %124 = add <8 x i16> %123, %120
  %125 = shufflevector <8 x i16> %124, <8 x i16> <i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef>, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %126 = shufflevector <8 x i16> %124, <8 x i16> <i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0>, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %127 = bitcast <8 x i16> %125 to <4 x i32>
  %128 = bitcast <8 x i16> %126 to <4 x i32>
  %129 = add <4 x i32> %117, %127
  %130 = add <4 x i32> %129, %128
  %131 = getelementptr inbounds i16, i16* %0, i64 160
  %132 = bitcast i16* %131 to <8 x i16>*
  %133 = load <8 x i16>, <8 x i16>* %132, align 1
  %134 = getelementptr inbounds i16, i16* %0, i64 168
  %135 = bitcast i16* %134 to <8 x i16>*
  %136 = load <8 x i16>, <8 x i16>* %135, align 1
  %137 = add <8 x i16> %136, %133
  %138 = shufflevector <8 x i16> %137, <8 x i16> <i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef>, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %139 = shufflevector <8 x i16> %137, <8 x i16> <i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0>, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %140 = bitcast <8 x i16> %138 to <4 x i32>
  %141 = bitcast <8 x i16> %139 to <4 x i32>
  %142 = add <4 x i32> %130, %140
  %143 = add <4 x i32> %142, %141
  %144 = getelementptr inbounds i16, i16* %0, i64 176
  %145 = bitcast i16* %144 to <8 x i16>*
  %146 = load <8 x i16>, <8 x i16>* %145, align 1
  %147 = getelementptr inbounds i16, i16* %0, i64 184
  %148 = bitcast i16* %147 to <8 x i16>*
  %149 = load <8 x i16>, <8 x i16>* %148, align 1
  %150 = add <8 x i16> %149, %146
  %151 = shufflevector <8 x i16> %150, <8 x i16> <i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef>, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %152 = shufflevector <8 x i16> %150, <8 x i16> <i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0>, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %153 = bitcast <8 x i16> %151 to <4 x i32>
  %154 = bitcast <8 x i16> %152 to <4 x i32>
  %155 = add <4 x i32> %143, %153
  %156 = add <4 x i32> %155, %154
  %157 = getelementptr inbounds i16, i16* %0, i64 192
  %158 = bitcast i16* %157 to <8 x i16>*
  %159 = load <8 x i16>, <8 x i16>* %158, align 1
  %160 = getelementptr inbounds i16, i16* %0, i64 200
  %161 = bitcast i16* %160 to <8 x i16>*
  %162 = load <8 x i16>, <8 x i16>* %161, align 1
  %163 = add <8 x i16> %162, %159
  %164 = shufflevector <8 x i16> %163, <8 x i16> <i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef>, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %165 = shufflevector <8 x i16> %163, <8 x i16> <i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0>, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %166 = bitcast <8 x i16> %164 to <4 x i32>
  %167 = bitcast <8 x i16> %165 to <4 x i32>
  %168 = add <4 x i32> %156, %166
  %169 = add <4 x i32> %168, %167
  %170 = getelementptr inbounds i16, i16* %0, i64 208
  %171 = bitcast i16* %170 to <8 x i16>*
  %172 = load <8 x i16>, <8 x i16>* %171, align 1
  %173 = getelementptr inbounds i16, i16* %0, i64 216
  %174 = bitcast i16* %173 to <8 x i16>*
  %175 = load <8 x i16>, <8 x i16>* %174, align 1
  %176 = add <8 x i16> %175, %172
  %177 = shufflevector <8 x i16> %176, <8 x i16> <i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef>, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %178 = shufflevector <8 x i16> %176, <8 x i16> <i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0>, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %179 = bitcast <8 x i16> %177 to <4 x i32>
  %180 = bitcast <8 x i16> %178 to <4 x i32>
  %181 = add <4 x i32> %169, %179
  %182 = add <4 x i32> %181, %180
  %183 = getelementptr inbounds i16, i16* %0, i64 224
  %184 = bitcast i16* %183 to <8 x i16>*
  %185 = load <8 x i16>, <8 x i16>* %184, align 1
  %186 = getelementptr inbounds i16, i16* %0, i64 232
  %187 = bitcast i16* %186 to <8 x i16>*
  %188 = load <8 x i16>, <8 x i16>* %187, align 1
  %189 = add <8 x i16> %188, %185
  %190 = shufflevector <8 x i16> %189, <8 x i16> <i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef>, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %191 = shufflevector <8 x i16> %189, <8 x i16> <i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0>, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %192 = bitcast <8 x i16> %190 to <4 x i32>
  %193 = bitcast <8 x i16> %191 to <4 x i32>
  %194 = add <4 x i32> %182, %192
  %195 = add <4 x i32> %194, %193
  %196 = getelementptr inbounds i16, i16* %0, i64 240
  %197 = bitcast i16* %196 to <8 x i16>*
  %198 = load <8 x i16>, <8 x i16>* %197, align 1
  %199 = getelementptr inbounds i16, i16* %0, i64 248
  %200 = bitcast i16* %199 to <8 x i16>*
  %201 = load <8 x i16>, <8 x i16>* %200, align 1
  %202 = add <8 x i16> %201, %198
  %203 = shufflevector <8 x i16> %202, <8 x i16> <i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef>, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %204 = shufflevector <8 x i16> %202, <8 x i16> <i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0>, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %205 = bitcast <8 x i16> %203 to <4 x i32>
  %206 = bitcast <8 x i16> %204 to <4 x i32>
  %207 = add <4 x i32> %195, %205
  %208 = add <4 x i32> %207, %206
  %209 = load <8 x i16>, <8 x i16>* %3, align 1
  %210 = shufflevector <4 x i32> %208, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 0, i32 1>
  %211 = add <4 x i32> %210, %208
  %212 = shufflevector <4 x i32> %211, <4 x i32> undef, <4 x i32> <i32 1, i32 0, i32 3, i32 2>
  %213 = add <4 x i32> %211, <i32 128, i32 128, i32 128, i32 128>
  %214 = add <4 x i32> %213, %212
  %215 = lshr <4 x i32> %214, <i32 8, i32 8, i32 8, i32 8>
  %216 = tail call <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32> %215, <4 x i32> %215) #3
  %217 = sub <8 x i16> %209, %216
  %218 = bitcast i16* %1 to <8 x i16>*
  store <8 x i16> %217, <8 x i16>* %218, align 1
  %219 = getelementptr inbounds i16, i16* %1, i64 8
  %220 = load <8 x i16>, <8 x i16>* %6, align 1
  %221 = sub <8 x i16> %220, %216
  %222 = bitcast i16* %219 to <8 x i16>*
  store <8 x i16> %221, <8 x i16>* %222, align 1
  %223 = getelementptr inbounds i16, i16* %1, i64 16
  %224 = load <8 x i16>, <8 x i16>* %10, align 1
  %225 = sub <8 x i16> %224, %216
  %226 = bitcast i16* %223 to <8 x i16>*
  store <8 x i16> %225, <8 x i16>* %226, align 1
  %227 = getelementptr inbounds i16, i16* %1, i64 24
  %228 = load <8 x i16>, <8 x i16>* %13, align 1
  %229 = sub <8 x i16> %228, %216
  %230 = bitcast i16* %227 to <8 x i16>*
  store <8 x i16> %229, <8 x i16>* %230, align 1
  %231 = getelementptr inbounds i16, i16* %1, i64 32
  %232 = bitcast i16* %16 to <8 x i16>*
  %233 = load <8 x i16>, <8 x i16>* %232, align 1
  %234 = sub <8 x i16> %233, %216
  %235 = bitcast i16* %231 to <8 x i16>*
  store <8 x i16> %234, <8 x i16>* %235, align 1
  %236 = getelementptr inbounds i16, i16* %1, i64 40
  %237 = getelementptr inbounds i16, i16* %0, i64 40
  %238 = bitcast i16* %237 to <8 x i16>*
  %239 = load <8 x i16>, <8 x i16>* %238, align 1
  %240 = sub <8 x i16> %239, %216
  %241 = bitcast i16* %236 to <8 x i16>*
  store <8 x i16> %240, <8 x i16>* %241, align 1
  %242 = getelementptr inbounds i16, i16* %1, i64 48
  %243 = getelementptr inbounds i16, i16* %0, i64 48
  %244 = bitcast i16* %243 to <8 x i16>*
  %245 = load <8 x i16>, <8 x i16>* %244, align 1
  %246 = sub <8 x i16> %245, %216
  %247 = bitcast i16* %242 to <8 x i16>*
  store <8 x i16> %246, <8 x i16>* %247, align 1
  %248 = getelementptr inbounds i16, i16* %1, i64 56
  %249 = getelementptr inbounds i16, i16* %0, i64 56
  %250 = bitcast i16* %249 to <8 x i16>*
  %251 = load <8 x i16>, <8 x i16>* %250, align 1
  %252 = sub <8 x i16> %251, %216
  %253 = bitcast i16* %248 to <8 x i16>*
  store <8 x i16> %252, <8 x i16>* %253, align 1
  %254 = getelementptr inbounds i16, i16* %0, i64 64
  %255 = getelementptr inbounds i16, i16* %1, i64 64
  %256 = bitcast i16* %254 to <8 x i16>*
  %257 = load <8 x i16>, <8 x i16>* %256, align 1
  %258 = sub <8 x i16> %257, %216
  %259 = bitcast i16* %255 to <8 x i16>*
  store <8 x i16> %258, <8 x i16>* %259, align 1
  %260 = getelementptr inbounds i16, i16* %1, i64 72
  %261 = getelementptr inbounds i16, i16* %0, i64 72
  %262 = bitcast i16* %261 to <8 x i16>*
  %263 = load <8 x i16>, <8 x i16>* %262, align 1
  %264 = sub <8 x i16> %263, %216
  %265 = bitcast i16* %260 to <8 x i16>*
  store <8 x i16> %264, <8 x i16>* %265, align 1
  %266 = getelementptr inbounds i16, i16* %1, i64 80
  %267 = getelementptr inbounds i16, i16* %0, i64 80
  %268 = bitcast i16* %267 to <8 x i16>*
  %269 = load <8 x i16>, <8 x i16>* %268, align 1
  %270 = sub <8 x i16> %269, %216
  %271 = bitcast i16* %266 to <8 x i16>*
  store <8 x i16> %270, <8 x i16>* %271, align 1
  %272 = getelementptr inbounds i16, i16* %1, i64 88
  %273 = getelementptr inbounds i16, i16* %0, i64 88
  %274 = bitcast i16* %273 to <8 x i16>*
  %275 = load <8 x i16>, <8 x i16>* %274, align 1
  %276 = sub <8 x i16> %275, %216
  %277 = bitcast i16* %272 to <8 x i16>*
  store <8 x i16> %276, <8 x i16>* %277, align 1
  %278 = getelementptr inbounds i16, i16* %0, i64 96
  %279 = getelementptr inbounds i16, i16* %1, i64 96
  %280 = bitcast i16* %278 to <8 x i16>*
  %281 = load <8 x i16>, <8 x i16>* %280, align 1
  %282 = sub <8 x i16> %281, %216
  %283 = bitcast i16* %279 to <8 x i16>*
  store <8 x i16> %282, <8 x i16>* %283, align 1
  %284 = getelementptr inbounds i16, i16* %1, i64 104
  %285 = getelementptr inbounds i16, i16* %0, i64 104
  %286 = bitcast i16* %285 to <8 x i16>*
  %287 = load <8 x i16>, <8 x i16>* %286, align 1
  %288 = sub <8 x i16> %287, %216
  %289 = bitcast i16* %284 to <8 x i16>*
  store <8 x i16> %288, <8 x i16>* %289, align 1
  %290 = getelementptr inbounds i16, i16* %1, i64 112
  %291 = getelementptr inbounds i16, i16* %0, i64 112
  %292 = bitcast i16* %291 to <8 x i16>*
  %293 = load <8 x i16>, <8 x i16>* %292, align 1
  %294 = sub <8 x i16> %293, %216
  %295 = bitcast i16* %290 to <8 x i16>*
  store <8 x i16> %294, <8 x i16>* %295, align 1
  %296 = getelementptr inbounds i16, i16* %1, i64 120
  %297 = getelementptr inbounds i16, i16* %0, i64 120
  %298 = bitcast i16* %297 to <8 x i16>*
  %299 = load <8 x i16>, <8 x i16>* %298, align 1
  %300 = sub <8 x i16> %299, %216
  %301 = bitcast i16* %296 to <8 x i16>*
  store <8 x i16> %300, <8 x i16>* %301, align 1
  %302 = getelementptr inbounds i16, i16* %0, i64 128
  %303 = getelementptr inbounds i16, i16* %1, i64 128
  %304 = bitcast i16* %302 to <8 x i16>*
  %305 = load <8 x i16>, <8 x i16>* %304, align 1
  %306 = sub <8 x i16> %305, %216
  %307 = bitcast i16* %303 to <8 x i16>*
  store <8 x i16> %306, <8 x i16>* %307, align 1
  %308 = getelementptr inbounds i16, i16* %1, i64 136
  %309 = getelementptr inbounds i16, i16* %0, i64 136
  %310 = bitcast i16* %309 to <8 x i16>*
  %311 = load <8 x i16>, <8 x i16>* %310, align 1
  %312 = sub <8 x i16> %311, %216
  %313 = bitcast i16* %308 to <8 x i16>*
  store <8 x i16> %312, <8 x i16>* %313, align 1
  %314 = getelementptr inbounds i16, i16* %1, i64 144
  %315 = getelementptr inbounds i16, i16* %0, i64 144
  %316 = bitcast i16* %315 to <8 x i16>*
  %317 = load <8 x i16>, <8 x i16>* %316, align 1
  %318 = sub <8 x i16> %317, %216
  %319 = bitcast i16* %314 to <8 x i16>*
  store <8 x i16> %318, <8 x i16>* %319, align 1
  %320 = getelementptr inbounds i16, i16* %1, i64 152
  %321 = getelementptr inbounds i16, i16* %0, i64 152
  %322 = bitcast i16* %321 to <8 x i16>*
  %323 = load <8 x i16>, <8 x i16>* %322, align 1
  %324 = sub <8 x i16> %323, %216
  %325 = bitcast i16* %320 to <8 x i16>*
  store <8 x i16> %324, <8 x i16>* %325, align 1
  %326 = getelementptr inbounds i16, i16* %0, i64 160
  %327 = getelementptr inbounds i16, i16* %1, i64 160
  %328 = bitcast i16* %326 to <8 x i16>*
  %329 = load <8 x i16>, <8 x i16>* %328, align 1
  %330 = sub <8 x i16> %329, %216
  %331 = bitcast i16* %327 to <8 x i16>*
  store <8 x i16> %330, <8 x i16>* %331, align 1
  %332 = getelementptr inbounds i16, i16* %1, i64 168
  %333 = getelementptr inbounds i16, i16* %0, i64 168
  %334 = bitcast i16* %333 to <8 x i16>*
  %335 = load <8 x i16>, <8 x i16>* %334, align 1
  %336 = sub <8 x i16> %335, %216
  %337 = bitcast i16* %332 to <8 x i16>*
  store <8 x i16> %336, <8 x i16>* %337, align 1
  %338 = getelementptr inbounds i16, i16* %1, i64 176
  %339 = getelementptr inbounds i16, i16* %0, i64 176
  %340 = bitcast i16* %339 to <8 x i16>*
  %341 = load <8 x i16>, <8 x i16>* %340, align 1
  %342 = sub <8 x i16> %341, %216
  %343 = bitcast i16* %338 to <8 x i16>*
  store <8 x i16> %342, <8 x i16>* %343, align 1
  %344 = getelementptr inbounds i16, i16* %1, i64 184
  %345 = getelementptr inbounds i16, i16* %0, i64 184
  %346 = bitcast i16* %345 to <8 x i16>*
  %347 = load <8 x i16>, <8 x i16>* %346, align 1
  %348 = sub <8 x i16> %347, %216
  %349 = bitcast i16* %344 to <8 x i16>*
  store <8 x i16> %348, <8 x i16>* %349, align 1
  %350 = getelementptr inbounds i16, i16* %0, i64 192
  %351 = getelementptr inbounds i16, i16* %1, i64 192
  %352 = bitcast i16* %350 to <8 x i16>*
  %353 = load <8 x i16>, <8 x i16>* %352, align 1
  %354 = sub <8 x i16> %353, %216
  %355 = bitcast i16* %351 to <8 x i16>*
  store <8 x i16> %354, <8 x i16>* %355, align 1
  %356 = getelementptr inbounds i16, i16* %1, i64 200
  %357 = getelementptr inbounds i16, i16* %0, i64 200
  %358 = bitcast i16* %357 to <8 x i16>*
  %359 = load <8 x i16>, <8 x i16>* %358, align 1
  %360 = sub <8 x i16> %359, %216
  %361 = bitcast i16* %356 to <8 x i16>*
  store <8 x i16> %360, <8 x i16>* %361, align 1
  %362 = getelementptr inbounds i16, i16* %1, i64 208
  %363 = getelementptr inbounds i16, i16* %0, i64 208
  %364 = bitcast i16* %363 to <8 x i16>*
  %365 = load <8 x i16>, <8 x i16>* %364, align 1
  %366 = sub <8 x i16> %365, %216
  %367 = bitcast i16* %362 to <8 x i16>*
  store <8 x i16> %366, <8 x i16>* %367, align 1
  %368 = getelementptr inbounds i16, i16* %1, i64 216
  %369 = getelementptr inbounds i16, i16* %0, i64 216
  %370 = bitcast i16* %369 to <8 x i16>*
  %371 = load <8 x i16>, <8 x i16>* %370, align 1
  %372 = sub <8 x i16> %371, %216
  %373 = bitcast i16* %368 to <8 x i16>*
  store <8 x i16> %372, <8 x i16>* %373, align 1
  %374 = getelementptr inbounds i16, i16* %0, i64 224
  %375 = getelementptr inbounds i16, i16* %1, i64 224
  %376 = bitcast i16* %374 to <8 x i16>*
  %377 = load <8 x i16>, <8 x i16>* %376, align 1
  %378 = sub <8 x i16> %377, %216
  %379 = bitcast i16* %375 to <8 x i16>*
  store <8 x i16> %378, <8 x i16>* %379, align 1
  %380 = getelementptr inbounds i16, i16* %1, i64 232
  %381 = getelementptr inbounds i16, i16* %0, i64 232
  %382 = bitcast i16* %381 to <8 x i16>*
  %383 = load <8 x i16>, <8 x i16>* %382, align 1
  %384 = sub <8 x i16> %383, %216
  %385 = bitcast i16* %380 to <8 x i16>*
  store <8 x i16> %384, <8 x i16>* %385, align 1
  %386 = getelementptr inbounds i16, i16* %1, i64 240
  %387 = getelementptr inbounds i16, i16* %0, i64 240
  %388 = bitcast i16* %387 to <8 x i16>*
  %389 = load <8 x i16>, <8 x i16>* %388, align 1
  %390 = sub <8 x i16> %389, %216
  %391 = bitcast i16* %386 to <8 x i16>*
  store <8 x i16> %390, <8 x i16>* %391, align 1
  %392 = getelementptr inbounds i16, i16* %1, i64 248
  %393 = getelementptr inbounds i16, i16* %0, i64 248
  %394 = bitcast i16* %393 to <8 x i16>*
  %395 = load <8 x i16>, <8 x i16>* %394, align 1
  %396 = sub <8 x i16> %395, %216
  %397 = bitcast i16* %392 to <8 x i16>*
  store <8 x i16> %396, <8 x i16>* %397, align 1
  ret void
}

; Function Attrs: nofree nounwind ssp uwtable
define hidden void @cfl_subtract_average_32x16_sse2(i16* readonly, i16* nocapture) #0 {
  %3 = bitcast i16* %0 to <2 x i64>*
  %4 = getelementptr inbounds i16, i16* %0, i64 512
  %5 = bitcast i16* %4 to <2 x i64>*
  br label %6

6:                                                ; preds = %6, %2
  %7 = phi <2 x i64>* [ %3, %2 ], [ %34, %6 ]
  %8 = phi <4 x i32> [ zeroinitializer, %2 ], [ %33, %6 ]
  %9 = bitcast <2 x i64>* %7 to <8 x i16>*
  %10 = load <8 x i16>, <8 x i16>* %9, align 1
  %11 = getelementptr inbounds <2 x i64>, <2 x i64>* %7, i64 1
  %12 = bitcast <2 x i64>* %11 to <8 x i16>*
  %13 = load <8 x i16>, <8 x i16>* %12, align 1
  %14 = add <8 x i16> %13, %10
  %15 = shufflevector <8 x i16> %14, <8 x i16> <i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef>, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %16 = shufflevector <8 x i16> %14, <8 x i16> <i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0>, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %17 = bitcast <8 x i16> %15 to <4 x i32>
  %18 = bitcast <8 x i16> %16 to <4 x i32>
  %19 = add <4 x i32> %8, %17
  %20 = add <4 x i32> %19, %18
  %21 = getelementptr inbounds <2 x i64>, <2 x i64>* %7, i64 2
  %22 = bitcast <2 x i64>* %21 to <8 x i16>*
  %23 = load <8 x i16>, <8 x i16>* %22, align 1
  %24 = getelementptr inbounds <2 x i64>, <2 x i64>* %7, i64 3
  %25 = bitcast <2 x i64>* %24 to <8 x i16>*
  %26 = load <8 x i16>, <8 x i16>* %25, align 1
  %27 = add <8 x i16> %26, %23
  %28 = shufflevector <8 x i16> %27, <8 x i16> <i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef>, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %29 = shufflevector <8 x i16> %27, <8 x i16> <i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0>, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %30 = bitcast <8 x i16> %28 to <4 x i32>
  %31 = bitcast <8 x i16> %29 to <4 x i32>
  %32 = add <4 x i32> %20, %30
  %33 = add <4 x i32> %32, %31
  %34 = getelementptr inbounds <2 x i64>, <2 x i64>* %7, i64 4
  %35 = icmp ult <2 x i64>* %34, %5
  br i1 %35, label %6, label %36

36:                                               ; preds = %6
  %37 = shufflevector <4 x i32> %33, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 0, i32 1>
  %38 = add <4 x i32> %37, %33
  %39 = shufflevector <4 x i32> %38, <4 x i32> undef, <4 x i32> <i32 1, i32 0, i32 3, i32 2>
  %40 = add <4 x i32> %38, <i32 256, i32 256, i32 256, i32 256>
  %41 = add <4 x i32> %40, %39
  %42 = lshr <4 x i32> %41, <i32 9, i32 9, i32 9, i32 9>
  %43 = tail call <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32> %42, <4 x i32> %42) #3
  %44 = bitcast i16* %1 to <2 x i64>*
  br label %45

45:                                               ; preds = %45, %36
  %46 = phi <2 x i64>* [ %3, %36 ], [ %70, %45 ]
  %47 = phi <2 x i64>* [ %44, %36 ], [ %71, %45 ]
  %48 = bitcast <2 x i64>* %46 to <8 x i16>*
  %49 = load <8 x i16>, <8 x i16>* %48, align 1
  %50 = sub <8 x i16> %49, %43
  %51 = bitcast <2 x i64>* %47 to <8 x i16>*
  store <8 x i16> %50, <8 x i16>* %51, align 1
  %52 = getelementptr inbounds <2 x i64>, <2 x i64>* %47, i64 1
  %53 = getelementptr inbounds <2 x i64>, <2 x i64>* %46, i64 1
  %54 = bitcast <2 x i64>* %53 to <8 x i16>*
  %55 = load <8 x i16>, <8 x i16>* %54, align 1
  %56 = sub <8 x i16> %55, %43
  %57 = bitcast <2 x i64>* %52 to <8 x i16>*
  store <8 x i16> %56, <8 x i16>* %57, align 1
  %58 = getelementptr inbounds <2 x i64>, <2 x i64>* %47, i64 2
  %59 = getelementptr inbounds <2 x i64>, <2 x i64>* %46, i64 2
  %60 = bitcast <2 x i64>* %59 to <8 x i16>*
  %61 = load <8 x i16>, <8 x i16>* %60, align 1
  %62 = sub <8 x i16> %61, %43
  %63 = bitcast <2 x i64>* %58 to <8 x i16>*
  store <8 x i16> %62, <8 x i16>* %63, align 1
  %64 = getelementptr inbounds <2 x i64>, <2 x i64>* %47, i64 3
  %65 = getelementptr inbounds <2 x i64>, <2 x i64>* %46, i64 3
  %66 = bitcast <2 x i64>* %65 to <8 x i16>*
  %67 = load <8 x i16>, <8 x i16>* %66, align 1
  %68 = sub <8 x i16> %67, %43
  %69 = bitcast <2 x i64>* %64 to <8 x i16>*
  store <8 x i16> %68, <8 x i16>* %69, align 1
  %70 = getelementptr inbounds <2 x i64>, <2 x i64>* %46, i64 4
  %71 = getelementptr inbounds <2 x i64>, <2 x i64>* %47, i64 4
  %72 = icmp ult <2 x i64>* %70, %5
  br i1 %72, label %45, label %73

73:                                               ; preds = %45
  ret void
}

; Function Attrs: nofree nounwind ssp uwtable
define hidden void @cfl_subtract_average_32x32_sse2(i16* readonly, i16* nocapture) #0 {
  %3 = bitcast i16* %0 to <2 x i64>*
  %4 = getelementptr inbounds i16, i16* %0, i64 1024
  %5 = bitcast i16* %4 to <2 x i64>*
  br label %6

6:                                                ; preds = %6, %2
  %7 = phi <2 x i64>* [ %3, %2 ], [ %34, %6 ]
  %8 = phi <4 x i32> [ zeroinitializer, %2 ], [ %33, %6 ]
  %9 = bitcast <2 x i64>* %7 to <8 x i16>*
  %10 = load <8 x i16>, <8 x i16>* %9, align 1
  %11 = getelementptr inbounds <2 x i64>, <2 x i64>* %7, i64 1
  %12 = bitcast <2 x i64>* %11 to <8 x i16>*
  %13 = load <8 x i16>, <8 x i16>* %12, align 1
  %14 = add <8 x i16> %13, %10
  %15 = shufflevector <8 x i16> %14, <8 x i16> <i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef>, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %16 = shufflevector <8 x i16> %14, <8 x i16> <i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0>, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %17 = bitcast <8 x i16> %15 to <4 x i32>
  %18 = bitcast <8 x i16> %16 to <4 x i32>
  %19 = add <4 x i32> %8, %17
  %20 = add <4 x i32> %19, %18
  %21 = getelementptr inbounds <2 x i64>, <2 x i64>* %7, i64 2
  %22 = bitcast <2 x i64>* %21 to <8 x i16>*
  %23 = load <8 x i16>, <8 x i16>* %22, align 1
  %24 = getelementptr inbounds <2 x i64>, <2 x i64>* %7, i64 3
  %25 = bitcast <2 x i64>* %24 to <8 x i16>*
  %26 = load <8 x i16>, <8 x i16>* %25, align 1
  %27 = add <8 x i16> %26, %23
  %28 = shufflevector <8 x i16> %27, <8 x i16> <i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef>, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %29 = shufflevector <8 x i16> %27, <8 x i16> <i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0>, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %30 = bitcast <8 x i16> %28 to <4 x i32>
  %31 = bitcast <8 x i16> %29 to <4 x i32>
  %32 = add <4 x i32> %20, %30
  %33 = add <4 x i32> %32, %31
  %34 = getelementptr inbounds <2 x i64>, <2 x i64>* %7, i64 4
  %35 = icmp ult <2 x i64>* %34, %5
  br i1 %35, label %6, label %36

36:                                               ; preds = %6
  %37 = shufflevector <4 x i32> %33, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 0, i32 1>
  %38 = add <4 x i32> %37, %33
  %39 = shufflevector <4 x i32> %38, <4 x i32> undef, <4 x i32> <i32 1, i32 0, i32 3, i32 2>
  %40 = add <4 x i32> %38, <i32 512, i32 512, i32 512, i32 512>
  %41 = add <4 x i32> %40, %39
  %42 = lshr <4 x i32> %41, <i32 10, i32 10, i32 10, i32 10>
  %43 = tail call <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32> %42, <4 x i32> %42) #3
  %44 = bitcast i16* %1 to <2 x i64>*
  br label %45

45:                                               ; preds = %45, %36
  %46 = phi <2 x i64>* [ %3, %36 ], [ %70, %45 ]
  %47 = phi <2 x i64>* [ %44, %36 ], [ %71, %45 ]
  %48 = bitcast <2 x i64>* %46 to <8 x i16>*
  %49 = load <8 x i16>, <8 x i16>* %48, align 1
  %50 = sub <8 x i16> %49, %43
  %51 = bitcast <2 x i64>* %47 to <8 x i16>*
  store <8 x i16> %50, <8 x i16>* %51, align 1
  %52 = getelementptr inbounds <2 x i64>, <2 x i64>* %47, i64 1
  %53 = getelementptr inbounds <2 x i64>, <2 x i64>* %46, i64 1
  %54 = bitcast <2 x i64>* %53 to <8 x i16>*
  %55 = load <8 x i16>, <8 x i16>* %54, align 1
  %56 = sub <8 x i16> %55, %43
  %57 = bitcast <2 x i64>* %52 to <8 x i16>*
  store <8 x i16> %56, <8 x i16>* %57, align 1
  %58 = getelementptr inbounds <2 x i64>, <2 x i64>* %47, i64 2
  %59 = getelementptr inbounds <2 x i64>, <2 x i64>* %46, i64 2
  %60 = bitcast <2 x i64>* %59 to <8 x i16>*
  %61 = load <8 x i16>, <8 x i16>* %60, align 1
  %62 = sub <8 x i16> %61, %43
  %63 = bitcast <2 x i64>* %58 to <8 x i16>*
  store <8 x i16> %62, <8 x i16>* %63, align 1
  %64 = getelementptr inbounds <2 x i64>, <2 x i64>* %47, i64 3
  %65 = getelementptr inbounds <2 x i64>, <2 x i64>* %46, i64 3
  %66 = bitcast <2 x i64>* %65 to <8 x i16>*
  %67 = load <8 x i16>, <8 x i16>* %66, align 1
  %68 = sub <8 x i16> %67, %43
  %69 = bitcast <2 x i64>* %64 to <8 x i16>*
  store <8 x i16> %68, <8 x i16>* %69, align 1
  %70 = getelementptr inbounds <2 x i64>, <2 x i64>* %46, i64 4
  %71 = getelementptr inbounds <2 x i64>, <2 x i64>* %47, i64 4
  %72 = icmp ult <2 x i64>* %70, %5
  br i1 %72, label %45, label %73

73:                                               ; preds = %45
  ret void
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden void (i16*, i16*)* @cfl_get_subtract_average_fn_sse2(i8 zeroext) local_unnamed_addr #1 {
  %2 = urem i8 %0, 19
  %3 = zext i8 %2 to i64
  %4 = getelementptr inbounds [19 x void (i16*, i16*)*], [19 x void (i16*, i16*)*]* @cfl_get_subtract_average_fn_sse2.sub_avg, i64 0, i64 %3
  %5 = load void (i16*, i16*)*, void (i16*, i16*)** %4, align 8
  ret void (i16*, i16*)* %5
}

; Function Attrs: nounwind readnone
declare <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32>, <4 x i32>) #2

attributes #0 = { nofree nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="128" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { norecurse nounwind readnone ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind readnone }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
