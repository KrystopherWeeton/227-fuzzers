; ModuleID = '../../third_party/libjxl/src/lib/jxl/epf.cc'
source_filename = "../../third_party/libjxl/src/lib/jxl/epf.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"struct.hwy::N_SSE4::Simd" = type { i8 }
%"struct.jxl::FilterDefinition" = type { void (%"struct.jxl::FilterRows"*, %"struct.jxl::LoopFilter"*, %"struct.jxl::FilterWeights"*, i64, i64, i64, i64)*, i64 }
%"struct.jxl::FilterRows" = type <{ [3 x float*], [7 x i64], [3 x float*], float*, i32, [4 x i8] }>
%"struct.jxl::LoopFilter" = type <{ %"class.jxl::Fields", i8, i8, i8, i8, float, float, float, float, float, float, i32, i8, [3 x i8], [8 x float], i8, [3 x i8], [3 x float], float, float, i8, [3 x i8], float, float, float, float, float, [4 x i8], i64, i8, [7 x i8] }>
%"class.jxl::Fields" = type { i32 (...)** }
%"struct.jxl::FilterWeights" = type { [9 x float], %"class.jxl::Plane" }
%"class.jxl::Plane" = type { %"struct.jxl::PlaneBase" }
%"struct.jxl::PlaneBase" = type { i32, i32, i32, i32, i64, %"class.std::__1::unique_ptr" }
%"class.std::__1::unique_ptr" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { i8* }
%"struct.hwy::N_AVX2::Simd" = type { i8 }
%"struct.hwy::N_AVX3::Simd" = type { i8 }
%"struct.hwy::N_SCALAR::Simd" = type { i8 }
%"struct.std::__1::array" = type { [2 x i32] }
%"class.jxl::FilterPipeline" = type { %"class.jxl::Image3", i64, [4 x %"struct.jxl::FilterPipeline::FilterStep"], i64, i8, i64 }
%"class.jxl::Image3" = type { [3 x %"class.jxl::Plane"] }
%"struct.jxl::FilterPipeline::FilterStep" = type { %"class.jxl::Image3"*, i64, %"class.jxl::Image3"*, i64, %"class.jxl::Rect", %"class.jxl::Rect", %"class.jxl::Rect", i64, void (%"struct.jxl::FilterPipeline::FilterStep"*, %"struct.jxl::FilterRows"*, i64)*, void (%"struct.jxl::FilterPipeline::FilterStep"*, %"struct.jxl::FilterRows"*, i64)*, %"struct.jxl::FilterDefinition", i64 }
%"class.jxl::Rect" = type { i64, i64, i64, i64 }
%"struct.hwy::ChosenTarget" = type { %"struct.std::__1::atomic" }
%"struct.std::__1::atomic" = type { %"struct.std::__1::__atomic_base" }
%"struct.std::__1::__atomic_base" = type { %"struct.std::__1::__atomic_base.221" }
%"struct.std::__1::__atomic_base.221" = type { %"struct.std::__1::__cxx_atomic_impl" }
%"struct.std::__1::__cxx_atomic_impl" = type { %"struct.std::__1::__cxx_atomic_base_impl" }
%"struct.std::__1::__cxx_atomic_base_impl" = type { i32 }
%"class.hwy::N_SSE4::Vec128" = type { <4 x float> }
%"class.hwy::N_AVX2::Vec256" = type { <8 x float> }
%"class.hwy::N_AVX3::Vec256" = type { <8 x float> }
%"struct.hwy::N_SCALAR::Vec1" = type { float }
%"struct.jxl::PassesDecoderState" = type { %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"*, [3 x %"struct.jxl::Upsampler"], %"class.jxl::Image3", %"class.jxl::Image3", %"class.std::__1::vector.172", %"class.std::__1::vector.180", %"class.std::__1::vector.111", float, float, %"class.jxl::Image3", %"class.std::__1::vector.172", %"class.jxl::Image3", %"class.jxl::Image3", i8*, i64, i8, i8, %"class.std::__1::function", %"class.std::__1::vector.208", %"class.std::__1::vector.214", i64, %"struct.std::__1::atomic", %"class.std::__1::unique_ptr.222", %"class.std::__1::vector.228", %"struct.jxl::FilterWeights", %"class.jxl::GroupBorderAssigner", %"class.std::__1::vector.242", %"class.std::__1::vector.242", %"class.std::__1::vector.242", [4 x %"class.std::__1::vector.242"], %"class.std::__1::vector.172", %"class.std::__1::vector.242", %"struct.jxl::OutputEncodingInfo" }
%"struct.jxl::PassesSharedState" = type { %"struct.jxl::CodecMetadata"*, %"struct.jxl::FrameHeader", %"struct.jxl::FrameDimensions", %"class.jxl::AcStrategyImage", %"class.jxl::DequantMatrices", %"class.jxl::Quantizer", %"class.jxl::Plane.57", %"class.jxl::Plane.25", %"struct.jxl::ColorCorrelationMap", %"struct.jxl::ImageFeatures", i64, %"class.std::__1::vector.11", %"class.jxl::Plane.25", %"class.jxl::Image3", %"class.jxl::Image3"*, %"struct.jxl::BlockCtxMap", [4 x %"class.jxl::Image3"], [4 x %struct.anon.107], i64 }
%"struct.jxl::CodecMetadata" = type { %"struct.jxl::ImageMetadata", %"class.jxl::SizeHeader", %"struct.jxl::CustomTransformData" }
%"struct.jxl::ImageMetadata" = type <{ %"class.jxl::Fields", i8, [7 x i8], %"struct.jxl::BitDepth", i8, i8, [6 x i8], %"struct.jxl::ColorEncoding", i32, i8, i8, i8, i8, %"class.jxl::SizeHeader", %"struct.jxl::ToneMapping", i32, [4 x i8], %"class.std::__1::vector", %"struct.jxl::CustomTransformData", %"class.jxl::PreviewHeader", %"struct.jxl::AnimationHeader", i64, i8, [7 x i8] }>
%"struct.jxl::BitDepth" = type <{ %"class.jxl::Fields", i8, [3 x i8], i32, i32, [4 x i8] }>
%"struct.jxl::ColorEncoding" = type { %"class.jxl::Fields", i8, i32, i32, %"struct.jxl::CustomTransferFunction", i32, i8, i8, %"class.jxl::PaddedBytes", i32, %"struct.jxl::Customxy", %"struct.jxl::Customxy", %"struct.jxl::Customxy", %"struct.jxl::Customxy" }
%"struct.jxl::CustomTransferFunction" = type { %"class.jxl::Fields", i32, i8, i32, i32 }
%"class.jxl::PaddedBytes" = type { i64, i64, %"class.std::__1::unique_ptr" }
%"struct.jxl::Customxy" = type { %"class.jxl::Fields", i32, i32 }
%"struct.jxl::ToneMapping" = type <{ %"class.jxl::Fields", i8, [3 x i8], float, float, i8, [3 x i8], float, [4 x i8] }>
%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { %"struct.jxl::ExtraChannelInfo"*, %"struct.jxl::ExtraChannelInfo"*, %"class.std::__1::__compressed_pair.6" }
%"struct.jxl::ExtraChannelInfo" = type { %"class.jxl::Fields", i8, i32, %"struct.jxl::BitDepth", i32, %"class.std::__1::basic_string", i8, [4 x float], i32 }
%"class.std::__1::basic_string" = type { %"class.std::__1::__compressed_pair.3" }
%"class.std::__1::__compressed_pair.3" = type { %"struct.std::__1::__compressed_pair_elem.4" }
%"struct.std::__1::__compressed_pair_elem.4" = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" = type { %union.anon }
%union.anon = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" = type { i8*, i64, i64 }
%"class.std::__1::__compressed_pair.6" = type { %"struct.std::__1::__compressed_pair_elem.7" }
%"struct.std::__1::__compressed_pair_elem.7" = type { %"struct.jxl::ExtraChannelInfo"* }
%"class.jxl::PreviewHeader" = type { %"class.jxl::Fields", i8, i32, i32, i32, i32, i32 }
%"struct.jxl::AnimationHeader" = type <{ %"class.jxl::Fields", i32, i32, i32, i8, [3 x i8] }>
%"class.jxl::SizeHeader" = type { %"class.jxl::Fields", i8, i32, i32, i32, i32, i32 }
%"struct.jxl::CustomTransformData" = type <{ %"class.jxl::Fields", i8, i8, [6 x i8], %"struct.jxl::OpsinInverseMatrix", i32, [15 x float], [55 x float], [210 x float], [4 x i8] }>
%"struct.jxl::OpsinInverseMatrix" = type <{ %"class.jxl::Fields", i8, [3 x i8], [9 x float], [3 x float], [4 x float], [4 x i8] }>
%"struct.jxl::FrameHeader" = type { %"class.jxl::Fields", i8, i32, i32, i64, i32, [4 x i8], %"struct.jxl::YCbCrChromaSubsampling", i32, i32, i32, %"class.std::__1::basic_string", %"struct.jxl::Passes", i8, %"struct.jxl::FrameSize", i32, %"class.std::__1::vector.11", %"struct.jxl::FrameOrigin", %"struct.jxl::BlendingInfo", %"class.std::__1::vector.18", %"struct.jxl::AnimationFrame", i8, i32, i8, i32, %"struct.jxl::CodecMetadata"*, %"struct.jxl::LoopFilter", i8, i64 }
%"struct.jxl::YCbCrChromaSubsampling" = type <{ %"class.jxl::Fields", [3 x i32], i8, i8, [2 x i8] }>
%"struct.jxl::Passes" = type <{ %"class.jxl::Fields", i32, i32, [11 x i32], [11 x i32], [11 x i32], [4 x i8] }>
%"struct.jxl::FrameSize" = type { i32, i32 }
%"struct.jxl::FrameOrigin" = type { i32, i32 }
%"struct.jxl::BlendingInfo" = type <{ %"class.jxl::Fields", i32, i32, i8, [3 x i8], i32, i64, i8, [7 x i8] }>
%"class.std::__1::vector.18" = type { %"class.std::__1::__vector_base.19" }
%"class.std::__1::__vector_base.19" = type { %"struct.jxl::BlendingInfo"*, %"struct.jxl::BlendingInfo"*, %"class.std::__1::__compressed_pair.20" }
%"class.std::__1::__compressed_pair.20" = type { %"struct.std::__1::__compressed_pair_elem.21" }
%"struct.std::__1::__compressed_pair_elem.21" = type { %"struct.jxl::BlendingInfo"* }
%"struct.jxl::AnimationFrame" = type { %"class.jxl::Fields", i32, i32, %"struct.jxl::CodecMetadata"* }
%"struct.jxl::FrameDimensions" = type { i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64 }
%"class.jxl::AcStrategyImage" = type { %"class.jxl::Plane.25", i8*, i64 }
%"class.jxl::DequantMatrices" = type { %"class.std::__1::unique_ptr.26", float*, float*, [3 x float], [3 x float], [81 x i64], %"class.std::__1::vector.30" }
%"class.std::__1::unique_ptr.26" = type { %"class.std::__1::__compressed_pair.27" }
%"class.std::__1::__compressed_pair.27" = type { %"struct.std::__1::__compressed_pair_elem.28", %"struct.std::__1::__compressed_pair_elem.29" }
%"struct.std::__1::__compressed_pair_elem.28" = type { float* }
%"struct.std::__1::__compressed_pair_elem.29" = type { %"class.hwy::AlignedFreer" }
%"class.hwy::AlignedFreer" = type { void (i8*, i8*)*, i8* }
%"class.std::__1::vector.30" = type { %"class.std::__1::__vector_base.31" }
%"class.std::__1::__vector_base.31" = type { %"class.jxl::QuantEncoding"*, %"class.jxl::QuantEncoding"*, %"class.std::__1::__compressed_pair.52" }
%"class.jxl::QuantEncoding" = type { %"struct.jxl::QuantEncodingInternal.base", [7 x i8] }
%"struct.jxl::QuantEncodingInternal.base" = type <{ i32, [4 x i8], %"struct.jxl::DctQuantWeightParams", %union.anon.34, %"struct.jxl::DctQuantWeightParams", %union.anon.51 }>
%union.anon.34 = type { %"struct.std::__1::array.41", [4 x i8] }
%"struct.std::__1::array.41" = type { [3 x %"struct.std::__1::array.42"] }
%"struct.std::__1::array.42" = type { [9 x float] }
%"struct.jxl::DctQuantWeightParams" = type <{ i64, %"struct.std::__1::array.32", [4 x i8] }>
%"struct.std::__1::array.32" = type { [3 x %"struct.std::__1::array.33"] }
%"struct.std::__1::array.33" = type { [17 x float] }
%union.anon.51 = type { i8 }
%"class.std::__1::__compressed_pair.52" = type { %"struct.std::__1::__compressed_pair_elem.53" }
%"struct.std::__1::__compressed_pair_elem.53" = type { %"class.jxl::QuantEncoding"* }
%"class.jxl::Quantizer" = type { [4 x float], [4 x float], i32, i32, float, float, float, [3 x float], %"class.jxl::DequantMatrices"* }
%"class.jxl::Plane.57" = type { %"struct.jxl::PlaneBase" }
%"struct.jxl::ColorCorrelationMap" = type { %"class.jxl::Plane.58", %"class.jxl::Plane.58", [4 x float], i32, float, float, float, i32, i32 }
%"class.jxl::Plane.58" = type { %"struct.jxl::PlaneBase" }
%"struct.jxl::ImageFeatures" = type { %"struct.jxl::NoiseParams", %"class.jxl::PatchDictionary", %"class.jxl::Splines" }
%"struct.jxl::NoiseParams" = type { [8 x float] }
%"class.jxl::PatchDictionary" = type { %"struct.jxl::PassesSharedState"*, %"class.std::__1::vector.59", %"class.std::__1::vector.73", %"class.std::__1::vector.73" }
%"class.std::__1::vector.59" = type { %"class.std::__1::__vector_base.60" }
%"class.std::__1::__vector_base.60" = type { %"struct.jxl::PatchPosition"*, %"struct.jxl::PatchPosition"*, %"class.std::__1::__compressed_pair.68" }
%"struct.jxl::PatchPosition" = type { i64, i64, %"class.std::__1::vector.61", %"struct.jxl::PatchReferencePosition" }
%"class.std::__1::vector.61" = type { %"class.std::__1::__vector_base.62" }
%"class.std::__1::__vector_base.62" = type { %"struct.jxl::PatchBlending"*, %"struct.jxl::PatchBlending"*, %"class.std::__1::__compressed_pair.63" }
%"struct.jxl::PatchBlending" = type { i8, i32, i8 }
%"class.std::__1::__compressed_pair.63" = type { %"struct.std::__1::__compressed_pair_elem.64" }
%"struct.std::__1::__compressed_pair_elem.64" = type { %"struct.jxl::PatchBlending"* }
%"struct.jxl::PatchReferencePosition" = type { i64, i64, i64, i64, i64 }
%"class.std::__1::__compressed_pair.68" = type { %"struct.std::__1::__compressed_pair_elem.69" }
%"struct.std::__1::__compressed_pair_elem.69" = type { %"struct.jxl::PatchPosition"* }
%"class.std::__1::vector.73" = type { %"class.std::__1::__vector_base.74" }
%"class.std::__1::__vector_base.74" = type { i64*, i64*, %"class.std::__1::__compressed_pair.75" }
%"class.std::__1::__compressed_pair.75" = type { %"struct.std::__1::__compressed_pair_elem.76" }
%"struct.std::__1::__compressed_pair_elem.76" = type { i64* }
%"class.jxl::Splines" = type { i32, %"class.std::__1::vector.80", %"class.std::__1::vector.94" }
%"class.std::__1::vector.80" = type { %"class.std::__1::__vector_base.81" }
%"class.std::__1::__vector_base.81" = type { %"class.jxl::QuantizedSpline"*, %"class.jxl::QuantizedSpline"*, %"class.std::__1::__compressed_pair.89" }
%"class.jxl::QuantizedSpline" = type { %"class.std::__1::vector.82", [3 x [32 x i32]], [32 x i32] }
%"class.std::__1::vector.82" = type { %"class.std::__1::__vector_base.83" }
%"class.std::__1::__vector_base.83" = type { %"struct.std::__1::pair"*, %"struct.std::__1::pair"*, %"class.std::__1::__compressed_pair.84" }
%"struct.std::__1::pair" = type { i64, i64 }
%"class.std::__1::__compressed_pair.84" = type { %"struct.std::__1::__compressed_pair_elem.85" }
%"struct.std::__1::__compressed_pair_elem.85" = type { %"struct.std::__1::pair"* }
%"class.std::__1::__compressed_pair.89" = type { %"struct.std::__1::__compressed_pair_elem.90" }
%"struct.std::__1::__compressed_pair_elem.90" = type { %"class.jxl::QuantizedSpline"* }
%"class.std::__1::vector.94" = type { %"class.std::__1::__vector_base.95" }
%"class.std::__1::__vector_base.95" = type { %"struct.jxl::Spline::Point"*, %"struct.jxl::Spline::Point"*, %"class.std::__1::__compressed_pair.96" }
%"struct.jxl::Spline::Point" = type { float, float }
%"class.std::__1::__compressed_pair.96" = type { %"struct.std::__1::__compressed_pair_elem.97" }
%"struct.std::__1::__compressed_pair_elem.97" = type { %"struct.jxl::Spline::Point"* }
%"class.std::__1::vector.11" = type { %"class.std::__1::__vector_base.12" }
%"class.std::__1::__vector_base.12" = type { i32*, i32*, %"class.std::__1::__compressed_pair.13" }
%"class.std::__1::__compressed_pair.13" = type { %"struct.std::__1::__compressed_pair_elem.14" }
%"struct.std::__1::__compressed_pair_elem.14" = type { i32* }
%"class.jxl::Plane.25" = type { %"struct.jxl::PlaneBase" }
%"struct.jxl::BlockCtxMap" = type { [3 x %"class.std::__1::vector.44"], %"class.std::__1::vector.11", %"class.std::__1::vector.101", i64, i64 }
%"class.std::__1::vector.44" = type { %"class.std::__1::__vector_base.45" }
%"class.std::__1::__vector_base.45" = type { i32*, i32*, %"class.std::__1::__compressed_pair.46" }
%"class.std::__1::__compressed_pair.46" = type { %"struct.std::__1::__compressed_pair_elem.47" }
%"struct.std::__1::__compressed_pair_elem.47" = type { i32* }
%"class.std::__1::vector.101" = type { %"class.std::__1::__vector_base.102" }
%"class.std::__1::__vector_base.102" = type { i8*, i8*, %"class.std::__1::__compressed_pair.103" }
%"class.std::__1::__compressed_pair.103" = type { %"struct.std::__1::__compressed_pair_elem" }
%struct.anon.107 = type <{ %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"*, i8, [7 x i8] }>
%"class.jxl::ImageBundle" = type { %"class.std::__1::unique_ptr.108", i32, [4 x i8], %"struct.jxl::YCbCrChromaSubsampling", %"struct.jxl::FrameOrigin", i32, i8, i8, %"class.std::__1::basic_string", %"struct.jxl::ImageMetadata"*, %"class.jxl::Image3", %"struct.jxl::ColorEncoding", %"class.std::__1::vector.172", i64 }
%"class.std::__1::unique_ptr.108" = type { %"class.std::__1::__compressed_pair.109" }
%"class.std::__1::__compressed_pair.109" = type { %"struct.std::__1::__compressed_pair_elem.110" }
%"struct.std::__1::__compressed_pair_elem.110" = type { %"struct.jxl::jpeg::JPEGData"* }
%"struct.jxl::jpeg::JPEGData" = type { %"class.jxl::Fields", i32, i32, i32, %"class.std::__1::vector.111", %"class.std::__1::vector.118", %"class.std::__1::vector.111", %"class.std::__1::vector.125", %"class.std::__1::vector.133", %"class.std::__1::vector.142", %"class.std::__1::vector.156", %"class.std::__1::vector.101", %"class.std::__1::vector.111", %"class.std::__1::vector.101", i32, i8, %"class.std::__1::vector.101" }
%"class.std::__1::vector.118" = type { %"class.std::__1::__vector_base.119" }
%"class.std::__1::__vector_base.119" = type { i32*, i32*, %"class.std::__1::__compressed_pair.120" }
%"class.std::__1::__compressed_pair.120" = type { %"struct.std::__1::__compressed_pair_elem.121" }
%"struct.std::__1::__compressed_pair_elem.121" = type { i32* }
%"class.std::__1::vector.125" = type { %"class.std::__1::__vector_base.126" }
%"class.std::__1::__vector_base.126" = type { %"struct.jxl::jpeg::JPEGQuantTable"*, %"struct.jxl::jpeg::JPEGQuantTable"*, %"class.std::__1::__compressed_pair.128" }
%"struct.jxl::jpeg::JPEGQuantTable" = type <{ %"struct.std::__1::array.127", i32, i32, i8, [3 x i8] }>
%"struct.std::__1::array.127" = type { [64 x i32] }
%"class.std::__1::__compressed_pair.128" = type { %"struct.std::__1::__compressed_pair_elem.129" }
%"struct.std::__1::__compressed_pair_elem.129" = type { %"struct.jxl::jpeg::JPEGQuantTable"* }
%"class.std::__1::vector.133" = type { %"class.std::__1::__vector_base.134" }
%"class.std::__1::__vector_base.134" = type { %"struct.jxl::jpeg::JPEGHuffmanCode"*, %"struct.jxl::jpeg::JPEGHuffmanCode"*, %"class.std::__1::__compressed_pair.137" }
%"struct.jxl::jpeg::JPEGHuffmanCode" = type <{ %"struct.std::__1::array.135", %"struct.std::__1::array.136", i32, i8, [3 x i8] }>
%"struct.std::__1::array.135" = type { [17 x i32] }
%"struct.std::__1::array.136" = type { [257 x i32] }
%"class.std::__1::__compressed_pair.137" = type { %"struct.std::__1::__compressed_pair_elem.138" }
%"struct.std::__1::__compressed_pair_elem.138" = type { %"struct.jxl::jpeg::JPEGHuffmanCode"* }
%"class.std::__1::vector.142" = type { %"class.std::__1::__vector_base.143" }
%"class.std::__1::__vector_base.143" = type { %"struct.jxl::jpeg::JPEGComponent"*, %"struct.jxl::jpeg::JPEGComponent"*, %"class.std::__1::__compressed_pair.151" }
%"struct.jxl::jpeg::JPEGComponent" = type { i32, i32, i32, i32, i32, i32, %"class.std::__1::vector.144" }
%"class.std::__1::vector.144" = type { %"class.std::__1::__vector_base.145" }
%"class.std::__1::__vector_base.145" = type { i16*, i16*, %"class.std::__1::__compressed_pair.146" }
%"class.std::__1::__compressed_pair.146" = type { %"struct.std::__1::__compressed_pair_elem.147" }
%"struct.std::__1::__compressed_pair_elem.147" = type { i16* }
%"class.std::__1::__compressed_pair.151" = type { %"struct.std::__1::__compressed_pair_elem.152" }
%"struct.std::__1::__compressed_pair_elem.152" = type { %"struct.jxl::jpeg::JPEGComponent"* }
%"class.std::__1::vector.156" = type { %"class.std::__1::__vector_base.157" }
%"class.std::__1::__vector_base.157" = type { %"struct.jxl::jpeg::JPEGScanInfo"*, %"struct.jxl::jpeg::JPEGScanInfo"*, %"class.std::__1::__compressed_pair.166" }
%"struct.jxl::jpeg::JPEGScanInfo" = type { i32, i32, i32, i32, i32, %"struct.std::__1::array.158", i32, %"class.std::__1::vector.11", %"class.std::__1::vector.159" }
%"struct.std::__1::array.158" = type { [4 x %"struct.jxl::jpeg::JPEGComponentScanInfo"] }
%"struct.jxl::jpeg::JPEGComponentScanInfo" = type { i32, i32, i32 }
%"class.std::__1::vector.159" = type { %"class.std::__1::__vector_base.160" }
%"class.std::__1::__vector_base.160" = type { %"struct.jxl::jpeg::JPEGScanInfo::ExtraZeroRunInfo"*, %"struct.jxl::jpeg::JPEGScanInfo::ExtraZeroRunInfo"*, %"class.std::__1::__compressed_pair.161" }
%"struct.jxl::jpeg::JPEGScanInfo::ExtraZeroRunInfo" = type { i32, i32 }
%"class.std::__1::__compressed_pair.161" = type { %"struct.std::__1::__compressed_pair_elem.162" }
%"struct.std::__1::__compressed_pair_elem.162" = type { %"struct.jxl::jpeg::JPEGScanInfo::ExtraZeroRunInfo"* }
%"class.std::__1::__compressed_pair.166" = type { %"struct.std::__1::__compressed_pair_elem.167" }
%"struct.std::__1::__compressed_pair_elem.167" = type { %"struct.jxl::jpeg::JPEGScanInfo"* }
%"struct.jxl::Upsampler" = type { i64, [4 x [4 x [5 x [5 x float]]]] }
%"class.std::__1::vector.180" = type { %"class.std::__1::__vector_base.181" }
%"class.std::__1::__vector_base.181" = type { %"struct.jxl::ANSCode"*, %"struct.jxl::ANSCode"*, %"class.std::__1::__compressed_pair.203" }
%"struct.jxl::ANSCode" = type { %"class.std::__1::unique_ptr", %"class.std::__1::vector.182", %"class.std::__1::vector.196", %"class.std::__1::vector.44", i8, i8, %"struct.jxl::LZ77Params", i64 }
%"class.std::__1::vector.182" = type { %"class.std::__1::__vector_base.183" }
%"class.std::__1::__vector_base.183" = type { %"struct.jxl::HuffmanDecodingData"*, %"struct.jxl::HuffmanDecodingData"*, %"class.std::__1::__compressed_pair.191" }
%"struct.jxl::HuffmanDecodingData" = type { %"class.std::__1::vector.184" }
%"class.std::__1::vector.184" = type { %"class.std::__1::__vector_base.185" }
%"class.std::__1::__vector_base.185" = type { %"struct.jxl::HuffmanCode"*, %"struct.jxl::HuffmanCode"*, %"class.std::__1::__compressed_pair.186" }
%"struct.jxl::HuffmanCode" = type { i8, i16 }
%"class.std::__1::__compressed_pair.186" = type { %"struct.std::__1::__compressed_pair_elem.187" }
%"struct.std::__1::__compressed_pair_elem.187" = type { %"struct.jxl::HuffmanCode"* }
%"class.std::__1::__compressed_pair.191" = type { %"struct.std::__1::__compressed_pair_elem.192" }
%"struct.std::__1::__compressed_pair_elem.192" = type { %"struct.jxl::HuffmanDecodingData"* }
%"class.std::__1::vector.196" = type { %"class.std::__1::__vector_base.197" }
%"class.std::__1::__vector_base.197" = type { %"struct.jxl::HybridUintConfig"*, %"struct.jxl::HybridUintConfig"*, %"class.std::__1::__compressed_pair.198" }
%"struct.jxl::HybridUintConfig" = type { i32, i32, i32, i32 }
%"class.std::__1::__compressed_pair.198" = type { %"struct.std::__1::__compressed_pair_elem.199" }
%"struct.std::__1::__compressed_pair_elem.199" = type { %"struct.jxl::HybridUintConfig"* }
%"struct.jxl::LZ77Params" = type { %"class.jxl::Fields", i8, i32, i32, %"struct.jxl::HybridUintConfig", i64 }
%"class.std::__1::__compressed_pair.203" = type { %"struct.std::__1::__compressed_pair_elem.204" }
%"struct.std::__1::__compressed_pair_elem.204" = type { %"struct.jxl::ANSCode"* }
%"class.std::__1::vector.111" = type { %"class.std::__1::__vector_base.112" }
%"class.std::__1::__vector_base.112" = type { %"class.std::__1::vector.101"*, %"class.std::__1::vector.101"*, %"class.std::__1::__compressed_pair.113" }
%"class.std::__1::__compressed_pair.113" = type { %"struct.std::__1::__compressed_pair_elem.114" }
%"struct.std::__1::__compressed_pair_elem.114" = type { %"class.std::__1::vector.101"* }
%"class.std::__1::function" = type { %"class.std::__1::__function::__policy_func" }
%"class.std::__1::__function::__policy_func" = type { %"union.std::__1::__function::__policy_storage", %"struct.std::__1::__function::__policy_invoker", %"struct.std::__1::__function::__policy"* }
%"union.std::__1::__function::__policy_storage" = type { i8*, [8 x i8] }
%"struct.std::__1::__function::__policy_invoker" = type { void (%"union.std::__1::__function::__policy_storage"*, float*, i64, i64, i64)* }
%"struct.std::__1::__function::__policy" = type { i8* (i8*)*, void (i8*)*, i8, %"class.std::type_info"* }
%"class.std::type_info" = type { i32 (...)**, i8* }
%"class.std::__1::vector.208" = type { %"class.std::__1::__vector_base.209" }
%"class.std::__1::__vector_base.209" = type { float*, float*, %"class.std::__1::__compressed_pair.210" }
%"class.std::__1::__compressed_pair.210" = type { %"struct.std::__1::__compressed_pair_elem.28" }
%"class.std::__1::vector.214" = type { %"class.std::__1::__vector_base.215" }
%"class.std::__1::__vector_base.215" = type { %"class.std::__1::vector.208"*, %"class.std::__1::vector.208"*, %"class.std::__1::__compressed_pair.216" }
%"class.std::__1::__compressed_pair.216" = type { %"struct.std::__1::__compressed_pair_elem.217" }
%"struct.std::__1::__compressed_pair_elem.217" = type { %"class.std::__1::vector.208"* }
%"class.std::__1::unique_ptr.222" = type { %"class.std::__1::__compressed_pair.223" }
%"class.std::__1::__compressed_pair.223" = type { %"struct.std::__1::__compressed_pair_elem.224" }
%"struct.std::__1::__compressed_pair_elem.224" = type { %"class.jxl::ACImage"* }
%"class.jxl::ACImage" = type { i32 (...)** }
%"class.std::__1::vector.228" = type { %"class.std::__1::__vector_base.229" }
%"class.std::__1::__vector_base.229" = type { %"class.jxl::FilterPipeline"*, %"class.jxl::FilterPipeline"*, %"class.std::__1::__compressed_pair.230" }
%"class.std::__1::__compressed_pair.230" = type { %"struct.std::__1::__compressed_pair_elem.231" }
%"struct.std::__1::__compressed_pair_elem.231" = type { %"class.jxl::FilterPipeline"* }
%"class.jxl::GroupBorderAssigner" = type { %"struct.jxl::FrameDimensions", %"class.std::__1::unique_ptr.235" }
%"class.std::__1::unique_ptr.235" = type { %"class.std::__1::__compressed_pair.236" }
%"class.std::__1::__compressed_pair.236" = type { %"struct.std::__1::__compressed_pair_elem.237" }
%"struct.std::__1::__compressed_pair_elem.237" = type { %"struct.std::__1::atomic.238"* }
%"struct.std::__1::atomic.238" = type opaque
%"class.std::__1::vector.172" = type { %"class.std::__1::__vector_base.173" }
%"class.std::__1::__vector_base.173" = type { %"class.jxl::Plane"*, %"class.jxl::Plane"*, %"class.std::__1::__compressed_pair.174" }
%"class.std::__1::__compressed_pair.174" = type { %"struct.std::__1::__compressed_pair_elem.175" }
%"struct.std::__1::__compressed_pair_elem.175" = type { %"class.jxl::Plane"* }
%"class.std::__1::vector.242" = type { %"class.std::__1::__vector_base.243" }
%"class.std::__1::__vector_base.243" = type { %"class.jxl::Image3"*, %"class.jxl::Image3"*, %"class.std::__1::__compressed_pair.244" }
%"class.std::__1::__compressed_pair.244" = type { %"struct.std::__1::__compressed_pair_elem.245" }
%"struct.std::__1::__compressed_pair_elem.245" = type { %"class.jxl::Image3"* }
%"struct.jxl::OutputEncodingInfo" = type <{ %"struct.jxl::ColorEncoding", float, %"struct.jxl::OpsinParams", i8, i8, [2 x i8] }>
%"struct.jxl::OpsinParams" = type { [36 x float], [4 x float], [4 x float], [4 x float] }

$_ZZN3jxl14FilterPipeline10FilterStep8SetInputEPKNS_6Image3IfEERKNS_4RectES8_mENUlRKS1_PNS_10FilterRowsElE_8__invokeESA_SC_l = comdat any

$_ZZN3jxl14FilterPipeline10FilterStep9SetOutputEPNS_6Image3IfEERKNS_4RectEENUlRKS1_PNS_10FilterRowsElE_8__invokeES9_SB_l = comdat any

$_ZZN3jxl14FilterPipeline10FilterStep22SetOutputCyclicStorageILm3EEEvPNS_6Image3IfEEmENUlRKS1_PNS_10FilterRowsElE_8__invokeES7_S9_l = comdat any

$_ZZN3jxl14FilterPipeline10FilterStep21SetInputCyclicStorageILm3EEEvPKNS_6Image3IfEEmENUlRKS1_PNS_10FilterRowsElE_8__invokeES8_SA_l = comdat any

$_ZZN3jxl14FilterPipeline10FilterStep22SetOutputCyclicStorageILm5EEEvPNS_6Image3IfEEmENUlRKS1_PNS_10FilterRowsElE_8__invokeES7_S9_l = comdat any

$_ZZN3jxl14FilterPipeline10FilterStep21SetInputCyclicStorageILm5EEEvPKNS_6Image3IfEEmENUlRKS1_PNS_10FilterRowsElE_8__invokeES8_SA_l = comdat any

$_ZZN3jxl14FilterPipeline10FilterStep22SetOutputCyclicStorageILm7EEEvPNS_6Image3IfEEmENUlRKS1_PNS_10FilterRowsElE_8__invokeES7_S9_l = comdat any

$_ZZN3jxl14FilterPipeline10FilterStep21SetInputCyclicStorageILm7EEEvPKNS_6Image3IfEEmENUlRKS1_PNS_10FilterRowsElE_8__invokeES8_SA_l = comdat any

$_ZZNK3jxl10LoopFilter7PaddingEvE20padding_per_epf_iter = comdat any

$_ZZNK3jxl10AcStrategy16covered_blocks_xEvE4kLut = comdat any

$_ZZNK3jxl10AcStrategy16covered_blocks_yEvE4kLut = comdat any

@_ZN3jxl6N_SSE42dfE = hidden local_unnamed_addr global %"struct.hwy::N_SSE4::Simd" zeroinitializer, align 1
@_ZN3jxl6N_SSE4L15kGaborishFilterE = internal unnamed_addr constant %"struct.jxl::FilterDefinition" { void (%"struct.jxl::FilterRows"*, %"struct.jxl::LoopFilter"*, %"struct.jxl::FilterWeights"*, i64, i64, i64, i64)* @_ZN3jxl6N_SSE411GaborishRowERKNS_10FilterRowsERKNS_10LoopFilterERKNS_13FilterWeightsEmmmm, i64 1 }, align 8
@_ZN3jxl6N_SSE4L11kEpf1FilterE = internal unnamed_addr constant %"struct.jxl::FilterDefinition" { void (%"struct.jxl::FilterRows"*, %"struct.jxl::LoopFilter"*, %"struct.jxl::FilterWeights"*, i64, i64, i64, i64)* @_ZN3jxl6N_SSE47Epf1RowERKNS_10FilterRowsERKNS_10LoopFilterERKNS_13FilterWeightsEmmmm, i64 2 }, align 8
@_ZN3jxl6N_SSE4L11kEpf2FilterE = internal unnamed_addr constant %"struct.jxl::FilterDefinition" { void (%"struct.jxl::FilterRows"*, %"struct.jxl::LoopFilter"*, %"struct.jxl::FilterWeights"*, i64, i64, i64, i64)* @_ZN3jxl6N_SSE47Epf2RowERKNS_10FilterRowsERKNS_10LoopFilterERKNS_13FilterWeightsEmmmm, i64 1 }, align 8
@_ZN3jxl6N_SSE4L11kEpf0FilterE = internal unnamed_addr constant %"struct.jxl::FilterDefinition" { void (%"struct.jxl::FilterRows"*, %"struct.jxl::LoopFilter"*, %"struct.jxl::FilterWeights"*, i64, i64, i64, i64)* @_ZN3jxl6N_SSE47Epf0RowERKNS_10FilterRowsERKNS_10LoopFilterERKNS_13FilterWeightsEmmmm, i64 3 }, align 8
@.str = private unnamed_addr constant [23 x i8] c"%s:%d: JXL_ASSERT: %s\0A\00", align 1
@.str.1 = private unnamed_addr constant [44 x i8] c"../../third_party/libjxl/src/lib/jxl/epf.cc\00", align 1
@.str.2 = private unnamed_addr constant [33 x i8] c"fp->total_border == lf.Padding()\00", align 1
@.str.3 = private unnamed_addr constant [37 x i8] c"fp->total_border <= kMaxFilterBorder\00", align 1
@_ZN3jxl6N_AVX22dfE = hidden local_unnamed_addr global %"struct.hwy::N_AVX2::Simd" zeroinitializer, align 1
@_ZN3jxl6N_AVX2L15kGaborishFilterE = internal unnamed_addr constant %"struct.jxl::FilterDefinition" { void (%"struct.jxl::FilterRows"*, %"struct.jxl::LoopFilter"*, %"struct.jxl::FilterWeights"*, i64, i64, i64, i64)* @_ZN3jxl6N_AVX211GaborishRowERKNS_10FilterRowsERKNS_10LoopFilterERKNS_13FilterWeightsEmmmm, i64 1 }, align 8
@_ZN3jxl6N_AVX2L11kEpf1FilterE = internal unnamed_addr constant %"struct.jxl::FilterDefinition" { void (%"struct.jxl::FilterRows"*, %"struct.jxl::LoopFilter"*, %"struct.jxl::FilterWeights"*, i64, i64, i64, i64)* @_ZN3jxl6N_AVX27Epf1RowERKNS_10FilterRowsERKNS_10LoopFilterERKNS_13FilterWeightsEmmmm, i64 2 }, align 8
@_ZN3jxl6N_AVX2L11kEpf2FilterE = internal unnamed_addr constant %"struct.jxl::FilterDefinition" { void (%"struct.jxl::FilterRows"*, %"struct.jxl::LoopFilter"*, %"struct.jxl::FilterWeights"*, i64, i64, i64, i64)* @_ZN3jxl6N_AVX27Epf2RowERKNS_10FilterRowsERKNS_10LoopFilterERKNS_13FilterWeightsEmmmm, i64 1 }, align 8
@_ZN3jxl6N_AVX2L11kEpf0FilterE = internal unnamed_addr constant %"struct.jxl::FilterDefinition" { void (%"struct.jxl::FilterRows"*, %"struct.jxl::LoopFilter"*, %"struct.jxl::FilterWeights"*, i64, i64, i64, i64)* @_ZN3jxl6N_AVX27Epf0RowERKNS_10FilterRowsERKNS_10LoopFilterERKNS_13FilterWeightsEmmmm, i64 3 }, align 8
@_ZN3jxl6N_AVX32dfE = hidden local_unnamed_addr global %"struct.hwy::N_AVX3::Simd" zeroinitializer, align 1
@_ZN3jxl6N_AVX3L15kGaborishFilterE = internal unnamed_addr constant %"struct.jxl::FilterDefinition" { void (%"struct.jxl::FilterRows"*, %"struct.jxl::LoopFilter"*, %"struct.jxl::FilterWeights"*, i64, i64, i64, i64)* @_ZN3jxl6N_AVX311GaborishRowERKNS_10FilterRowsERKNS_10LoopFilterERKNS_13FilterWeightsEmmmm, i64 1 }, align 8
@_ZN3jxl6N_AVX3L11kEpf1FilterE = internal unnamed_addr constant %"struct.jxl::FilterDefinition" { void (%"struct.jxl::FilterRows"*, %"struct.jxl::LoopFilter"*, %"struct.jxl::FilterWeights"*, i64, i64, i64, i64)* @_ZN3jxl6N_AVX37Epf1RowERKNS_10FilterRowsERKNS_10LoopFilterERKNS_13FilterWeightsEmmmm, i64 2 }, align 8
@_ZN3jxl6N_AVX3L11kEpf2FilterE = internal unnamed_addr constant %"struct.jxl::FilterDefinition" { void (%"struct.jxl::FilterRows"*, %"struct.jxl::LoopFilter"*, %"struct.jxl::FilterWeights"*, i64, i64, i64, i64)* @_ZN3jxl6N_AVX37Epf2RowERKNS_10FilterRowsERKNS_10LoopFilterERKNS_13FilterWeightsEmmmm, i64 1 }, align 8
@_ZN3jxl6N_AVX3L11kEpf0FilterE = internal unnamed_addr constant %"struct.jxl::FilterDefinition" { void (%"struct.jxl::FilterRows"*, %"struct.jxl::LoopFilter"*, %"struct.jxl::FilterWeights"*, i64, i64, i64, i64)* @_ZN3jxl6N_AVX37Epf0RowERKNS_10FilterRowsERKNS_10LoopFilterERKNS_13FilterWeightsEmmmm, i64 3 }, align 8
@_ZN3jxl8N_SCALAR2dfE = hidden local_unnamed_addr global %"struct.hwy::N_SCALAR::Simd" zeroinitializer, align 1
@_ZZN3jxl8N_SCALAR7Epf0RowERKNS_10FilterRowsERKNS_10LoopFilterERKNS_13FilterWeightsEmmmmE8sads_off = internal unnamed_addr constant [12 x %"struct.std::__1::array"] [%"struct.std::__1::array" { [2 x i32] [i32 -2, i32 0] }, %"struct.std::__1::array" { [2 x i32] [i32 -1, i32 -1] }, %"struct.std::__1::array" { [2 x i32] [i32 -1, i32 0] }, %"struct.std::__1::array" { [2 x i32] [i32 -1, i32 1] }, %"struct.std::__1::array" { [2 x i32] [i32 0, i32 -2] }, %"struct.std::__1::array" { [2 x i32] [i32 0, i32 -1] }, %"struct.std::__1::array" { [2 x i32] [i32 0, i32 1] }, %"struct.std::__1::array" { [2 x i32] [i32 0, i32 2] }, %"struct.std::__1::array" { [2 x i32] [i32 1, i32 -1] }, %"struct.std::__1::array" { [2 x i32] [i32 1, i32 0] }, %"struct.std::__1::array" { [2 x i32] [i32 1, i32 1] }, %"struct.std::__1::array" { [2 x i32] [i32 2, i32 0] }], align 16
@_ZN3jxl8N_SCALARL15kGaborishFilterE = internal unnamed_addr constant %"struct.jxl::FilterDefinition" { void (%"struct.jxl::FilterRows"*, %"struct.jxl::LoopFilter"*, %"struct.jxl::FilterWeights"*, i64, i64, i64, i64)* @_ZN3jxl8N_SCALAR11GaborishRowERKNS_10FilterRowsERKNS_10LoopFilterERKNS_13FilterWeightsEmmmm, i64 1 }, align 8
@_ZN3jxl8N_SCALARL11kEpf1FilterE = internal unnamed_addr constant %"struct.jxl::FilterDefinition" { void (%"struct.jxl::FilterRows"*, %"struct.jxl::LoopFilter"*, %"struct.jxl::FilterWeights"*, i64, i64, i64, i64)* @_ZN3jxl8N_SCALAR7Epf1RowERKNS_10FilterRowsERKNS_10LoopFilterERKNS_13FilterWeightsEmmmm, i64 2 }, align 8
@_ZN3jxl8N_SCALARL11kEpf2FilterE = internal unnamed_addr constant %"struct.jxl::FilterDefinition" { void (%"struct.jxl::FilterRows"*, %"struct.jxl::LoopFilter"*, %"struct.jxl::FilterWeights"*, i64, i64, i64, i64)* @_ZN3jxl8N_SCALAR7Epf2RowERKNS_10FilterRowsERKNS_10LoopFilterERKNS_13FilterWeightsEmmmm, i64 1 }, align 8
@_ZN3jxl8N_SCALARL11kEpf0FilterE = internal unnamed_addr constant %"struct.jxl::FilterDefinition" { void (%"struct.jxl::FilterRows"*, %"struct.jxl::LoopFilter"*, %"struct.jxl::FilterWeights"*, i64, i64, i64, i64)* @_ZN3jxl8N_SCALAR7Epf0RowERKNS_10FilterRowsERKNS_10LoopFilterERKNS_13FilterWeightsEmmmm, i64 3 }, align 8
@.str.4 = private unnamed_addr constant [22 x i8] c"%s:%d: JXL_CHECK: %s\0A\00", align 1
@.str.5 = private unnamed_addr constant [17 x i8] c"lf.epf_iters > 0\00", align 1
@_ZN3jxlL38FilterPipelineInitHighwayDispatchTableE = internal unnamed_addr constant [12 x void (%"class.jxl::FilterPipeline"*, %"struct.jxl::LoopFilter"*, %"class.jxl::Image3"*, %"class.jxl::Rect"*, %"class.jxl::Rect"*, i64, %"class.jxl::Image3"*, %"class.jxl::Rect"*)*] [void (%"class.jxl::FilterPipeline"*, %"struct.jxl::LoopFilter"*, %"class.jxl::Image3"*, %"class.jxl::Rect"*, %"class.jxl::Rect"*, i64, %"class.jxl::Image3"*, %"class.jxl::Rect"*)* @_ZN3hwy13FunctionCacheIvJPN3jxl14FilterPipelineERKNS1_10LoopFilterERKNS1_6Image3IfEERKNS1_4RectESD_mPS8_SD_EE13ChooseAndCallIXadL_ZNS1_L38FilterPipelineInitHighwayDispatchTableEEEEEvS3_S6_SA_SD_SD_mSE_SD_, void (%"class.jxl::FilterPipeline"*, %"struct.jxl::LoopFilter"*, %"class.jxl::Image3"*, %"class.jxl::Rect"*, %"class.jxl::Rect"*, i64, %"class.jxl::Image3"*, %"class.jxl::Rect"*)* null, void (%"class.jxl::FilterPipeline"*, %"struct.jxl::LoopFilter"*, %"class.jxl::Image3"*, %"class.jxl::Rect"*, %"class.jxl::Rect"*, i64, %"class.jxl::Image3"*, %"class.jxl::Rect"*)* null, void (%"class.jxl::FilterPipeline"*, %"struct.jxl::LoopFilter"*, %"class.jxl::Image3"*, %"class.jxl::Rect"*, %"class.jxl::Rect"*, i64, %"class.jxl::Image3"*, %"class.jxl::Rect"*)* null, void (%"class.jxl::FilterPipeline"*, %"struct.jxl::LoopFilter"*, %"class.jxl::Image3"*, %"class.jxl::Rect"*, %"class.jxl::Rect"*, i64, %"class.jxl::Image3"*, %"class.jxl::Rect"*)* @_ZN3jxl6N_AVX318FilterPipelineInitEPNS_14FilterPipelineERKNS_10LoopFilterERKNS_6Image3IfEERKNS_4RectESC_mPS7_SC_, void (%"class.jxl::FilterPipeline"*, %"struct.jxl::LoopFilter"*, %"class.jxl::Image3"*, %"class.jxl::Rect"*, %"class.jxl::Rect"*, i64, %"class.jxl::Image3"*, %"class.jxl::Rect"*)* @_ZN3jxl6N_AVX218FilterPipelineInitEPNS_14FilterPipelineERKNS_10LoopFilterERKNS_6Image3IfEERKNS_4RectESC_mPS7_SC_, void (%"class.jxl::FilterPipeline"*, %"struct.jxl::LoopFilter"*, %"class.jxl::Image3"*, %"class.jxl::Rect"*, %"class.jxl::Rect"*, i64, %"class.jxl::Image3"*, %"class.jxl::Rect"*)* null, void (%"class.jxl::FilterPipeline"*, %"struct.jxl::LoopFilter"*, %"class.jxl::Image3"*, %"class.jxl::Rect"*, %"class.jxl::Rect"*, i64, %"class.jxl::Image3"*, %"class.jxl::Rect"*)* @_ZN3jxl6N_SSE418FilterPipelineInitEPNS_14FilterPipelineERKNS_10LoopFilterERKNS_6Image3IfEERKNS_4RectESC_mPS7_SC_, void (%"class.jxl::FilterPipeline"*, %"struct.jxl::LoopFilter"*, %"class.jxl::Image3"*, %"class.jxl::Rect"*, %"class.jxl::Rect"*, i64, %"class.jxl::Image3"*, %"class.jxl::Rect"*)* null, void (%"class.jxl::FilterPipeline"*, %"struct.jxl::LoopFilter"*, %"class.jxl::Image3"*, %"class.jxl::Rect"*, %"class.jxl::Rect"*, i64, %"class.jxl::Image3"*, %"class.jxl::Rect"*)* null, void (%"class.jxl::FilterPipeline"*, %"struct.jxl::LoopFilter"*, %"class.jxl::Image3"*, %"class.jxl::Rect"*, %"class.jxl::Rect"*, i64, %"class.jxl::Image3"*, %"class.jxl::Rect"*)* null, void (%"class.jxl::FilterPipeline"*, %"struct.jxl::LoopFilter"*, %"class.jxl::Image3"*, %"class.jxl::Rect"*, %"class.jxl::Rect"*, i64, %"class.jxl::Image3"*, %"class.jxl::Rect"*)* @_ZN3jxl8N_SCALAR18FilterPipelineInitEPNS_14FilterPipelineERKNS_10LoopFilterERKNS_6Image3IfEERKNS_4RectESC_mPS7_SC_], align 16
@_ZN3hwy13chosen_targetE = external global %"struct.hwy::ChosenTarget", align 4
@_ZZNK3jxl10LoopFilter7PaddingEvE20padding_per_epf_iter = linkonce_odr hidden local_unnamed_addr constant [4 x i64] [i64 0, i64 2, i64 3, i64 6], comdat, align 16
@_ZZNK3jxl10AcStrategy16covered_blocks_xEvE4kLut = linkonce_odr hidden local_unnamed_addr constant [27 x i8] c"\01\01\01\01\02\04\01\02\01\04\02\04\01\01\01\01\01\01\08\04\08\10\08\10 \10 ", comdat, align 16
@_ZZNK3jxl10AcStrategy16covered_blocks_yEvE4kLut = linkonce_odr hidden local_unnamed_addr constant [27 x i8] c"\01\01\01\01\02\04\02\01\04\01\04\02\01\01\01\01\01\01\08\08\04\10\10\08  \10", comdat, align 16

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @_ZN3jxl6N_SSE411GaborishRowERKNS_10FilterRowsERKNS_10LoopFilterERKNS_13FilterWeightsEmmmm(%"struct.jxl::FilterRows"* nocapture readonly dereferenceable(120), %"struct.jxl::LoopFilter"* nocapture readnone dereferenceable(144), %"struct.jxl::FilterWeights"* nocapture readonly dereferenceable(72), i64, i64, i64, i64) #0 {
  %8 = getelementptr inbounds %"struct.jxl::FilterRows", %"struct.jxl::FilterRows"* %0, i64 0, i32 1, i64 2
  %9 = getelementptr inbounds %"struct.jxl::FilterRows", %"struct.jxl::FilterRows"* %0, i64 0, i32 1, i64 3
  %10 = getelementptr inbounds %"struct.jxl::FilterRows", %"struct.jxl::FilterRows"* %0, i64 0, i32 1, i64 4
  %11 = icmp ult i64 %3, %4
  %12 = getelementptr inbounds %"struct.jxl::FilterRows", %"struct.jxl::FilterRows"* %0, i64 0, i32 0, i64 0
  %13 = load float*, float** %12, align 8
  %14 = load i64, i64* %8, align 8
  %15 = getelementptr inbounds float, float* %13, i64 %14
  %16 = load i64, i64* %9, align 8
  %17 = getelementptr inbounds float, float* %13, i64 %16
  %18 = load i64, i64* %10, align 8
  %19 = getelementptr inbounds float, float* %13, i64 %18
  %20 = getelementptr inbounds %"struct.jxl::FilterRows", %"struct.jxl::FilterRows"* %0, i64 0, i32 2, i64 0
  %21 = load float*, float** %20, align 8
  %22 = getelementptr inbounds %"struct.jxl::FilterWeights", %"struct.jxl::FilterWeights"* %2, i64 0, i32 0, i64 0
  %23 = load float, float* %22, align 4
  %24 = insertelement <4 x float> undef, float %23, i32 0
  %25 = shufflevector <4 x float> %24, <4 x float> undef, <4 x i32> zeroinitializer
  %26 = getelementptr inbounds %"struct.jxl::FilterWeights", %"struct.jxl::FilterWeights"* %2, i64 0, i32 0, i64 1
  %27 = load float, float* %26, align 4
  %28 = insertelement <4 x float> undef, float %27, i32 0
  %29 = shufflevector <4 x float> %28, <4 x float> undef, <4 x i32> zeroinitializer
  %30 = getelementptr inbounds %"struct.jxl::FilterWeights", %"struct.jxl::FilterWeights"* %2, i64 0, i32 0, i64 2
  %31 = load float, float* %30, align 4
  %32 = insertelement <4 x float> undef, float %31, i32 0
  %33 = shufflevector <4 x float> %32, <4 x float> undef, <4 x i32> zeroinitializer
  br i1 %11, label %34, label %82

34:                                               ; preds = %7, %34
  %35 = phi i64 [ %76, %34 ], [ %3, %7 ]
  %36 = getelementptr inbounds float, float* %15, i64 %35
  %37 = getelementptr inbounds float, float* %17, i64 %35
  %38 = getelementptr inbounds float, float* %19, i64 %35
  %39 = getelementptr inbounds float, float* %21, i64 %35
  %40 = bitcast float* %36 to <4 x float>*
  %41 = load <4 x float>, <4 x float>* %40, align 16, !alias.scope !2, !noalias !7
  %42 = getelementptr inbounds float, float* %36, i64 -1
  %43 = bitcast float* %42 to <4 x float>*
  %44 = load <4 x float>, <4 x float>* %43, align 1, !alias.scope !11, !noalias !7
  %45 = getelementptr inbounds float, float* %36, i64 1
  %46 = bitcast float* %45 to <4 x float>*
  %47 = load <4 x float>, <4 x float>* %46, align 1, !alias.scope !14, !noalias !7
  %48 = bitcast float* %37 to <4 x float>*
  %49 = load <4 x float>, <4 x float>* %48, align 16, !alias.scope !17, !noalias !20
  %50 = getelementptr inbounds float, float* %37, i64 -1
  %51 = bitcast float* %50 to <4 x float>*
  %52 = load <4 x float>, <4 x float>* %51, align 1, !alias.scope !21, !noalias !20
  %53 = getelementptr inbounds float, float* %37, i64 1
  %54 = bitcast float* %53 to <4 x float>*
  %55 = load <4 x float>, <4 x float>* %54, align 1, !alias.scope !24, !noalias !20
  %56 = bitcast float* %38 to <4 x float>*
  %57 = load <4 x float>, <4 x float>* %56, align 16, !alias.scope !27, !noalias !30
  %58 = getelementptr inbounds float, float* %38, i64 -1
  %59 = bitcast float* %58 to <4 x float>*
  %60 = load <4 x float>, <4 x float>* %59, align 1, !alias.scope !31, !noalias !30
  %61 = getelementptr inbounds float, float* %38, i64 1
  %62 = bitcast float* %61 to <4 x float>*
  %63 = load <4 x float>, <4 x float>* %62, align 1, !alias.scope !34, !noalias !30
  %64 = fadd <4 x float> %52, %55
  %65 = fadd <4 x float> %41, %57
  %66 = fadd <4 x float> %64, %65
  %67 = fadd <4 x float> %44, %47
  %68 = fadd <4 x float> %60, %63
  %69 = fadd <4 x float> %67, %68
  %70 = fmul <4 x float> %25, %49
  %71 = fmul <4 x float> %29, %66
  %72 = fadd <4 x float> %70, %71
  %73 = fmul <4 x float> %33, %69
  %74 = fadd <4 x float> %72, %73
  %75 = bitcast float* %39 to <4 x float>*
  store <4 x float> %74, <4 x float>* %75, align 16, !alias.scope !37, !noalias !40
  %76 = add i64 %35, 4
  %77 = icmp ult i64 %76, %4
  br i1 %77, label %34, label %78

78:                                               ; preds = %34
  %79 = load i64, i64* %8, align 8
  %80 = load i64, i64* %9, align 8
  %81 = load i64, i64* %10, align 8
  br label %82

82:                                               ; preds = %78, %7
  %83 = phi i64 [ %81, %78 ], [ %18, %7 ]
  %84 = phi i64 [ %80, %78 ], [ %16, %7 ]
  %85 = phi i64 [ %79, %78 ], [ %14, %7 ]
  %86 = getelementptr inbounds %"struct.jxl::FilterRows", %"struct.jxl::FilterRows"* %0, i64 0, i32 0, i64 1
  %87 = load float*, float** %86, align 8
  %88 = getelementptr inbounds float, float* %87, i64 %85
  %89 = getelementptr inbounds float, float* %87, i64 %84
  %90 = getelementptr inbounds float, float* %87, i64 %83
  %91 = getelementptr inbounds %"struct.jxl::FilterRows", %"struct.jxl::FilterRows"* %0, i64 0, i32 2, i64 1
  %92 = load float*, float** %91, align 8
  %93 = getelementptr inbounds %"struct.jxl::FilterWeights", %"struct.jxl::FilterWeights"* %2, i64 0, i32 0, i64 3
  %94 = load float, float* %93, align 4
  %95 = insertelement <4 x float> undef, float %94, i32 0
  %96 = shufflevector <4 x float> %95, <4 x float> undef, <4 x i32> zeroinitializer
  %97 = getelementptr inbounds %"struct.jxl::FilterWeights", %"struct.jxl::FilterWeights"* %2, i64 0, i32 0, i64 4
  %98 = load float, float* %97, align 4
  %99 = insertelement <4 x float> undef, float %98, i32 0
  %100 = shufflevector <4 x float> %99, <4 x float> undef, <4 x i32> zeroinitializer
  %101 = getelementptr inbounds %"struct.jxl::FilterWeights", %"struct.jxl::FilterWeights"* %2, i64 0, i32 0, i64 5
  %102 = load float, float* %101, align 4
  %103 = insertelement <4 x float> undef, float %102, i32 0
  %104 = shufflevector <4 x float> %103, <4 x float> undef, <4 x i32> zeroinitializer
  br i1 %11, label %105, label %153

105:                                              ; preds = %82, %105
  %106 = phi i64 [ %147, %105 ], [ %3, %82 ]
  %107 = getelementptr inbounds float, float* %88, i64 %106
  %108 = getelementptr inbounds float, float* %89, i64 %106
  %109 = getelementptr inbounds float, float* %90, i64 %106
  %110 = getelementptr inbounds float, float* %92, i64 %106
  %111 = bitcast float* %107 to <4 x float>*
  %112 = load <4 x float>, <4 x float>* %111, align 16, !alias.scope !2, !noalias !7
  %113 = getelementptr inbounds float, float* %107, i64 -1
  %114 = bitcast float* %113 to <4 x float>*
  %115 = load <4 x float>, <4 x float>* %114, align 1, !alias.scope !11, !noalias !7
  %116 = getelementptr inbounds float, float* %107, i64 1
  %117 = bitcast float* %116 to <4 x float>*
  %118 = load <4 x float>, <4 x float>* %117, align 1, !alias.scope !14, !noalias !7
  %119 = bitcast float* %108 to <4 x float>*
  %120 = load <4 x float>, <4 x float>* %119, align 16, !alias.scope !17, !noalias !20
  %121 = getelementptr inbounds float, float* %108, i64 -1
  %122 = bitcast float* %121 to <4 x float>*
  %123 = load <4 x float>, <4 x float>* %122, align 1, !alias.scope !21, !noalias !20
  %124 = getelementptr inbounds float, float* %108, i64 1
  %125 = bitcast float* %124 to <4 x float>*
  %126 = load <4 x float>, <4 x float>* %125, align 1, !alias.scope !24, !noalias !20
  %127 = bitcast float* %109 to <4 x float>*
  %128 = load <4 x float>, <4 x float>* %127, align 16, !alias.scope !27, !noalias !30
  %129 = getelementptr inbounds float, float* %109, i64 -1
  %130 = bitcast float* %129 to <4 x float>*
  %131 = load <4 x float>, <4 x float>* %130, align 1, !alias.scope !31, !noalias !30
  %132 = getelementptr inbounds float, float* %109, i64 1
  %133 = bitcast float* %132 to <4 x float>*
  %134 = load <4 x float>, <4 x float>* %133, align 1, !alias.scope !34, !noalias !30
  %135 = fadd <4 x float> %123, %126
  %136 = fadd <4 x float> %112, %128
  %137 = fadd <4 x float> %135, %136
  %138 = fadd <4 x float> %115, %118
  %139 = fadd <4 x float> %131, %134
  %140 = fadd <4 x float> %138, %139
  %141 = fmul <4 x float> %96, %120
  %142 = fmul <4 x float> %100, %137
  %143 = fadd <4 x float> %141, %142
  %144 = fmul <4 x float> %104, %140
  %145 = fadd <4 x float> %143, %144
  %146 = bitcast float* %110 to <4 x float>*
  store <4 x float> %145, <4 x float>* %146, align 16, !alias.scope !37, !noalias !40
  %147 = add i64 %106, 4
  %148 = icmp ult i64 %147, %4
  br i1 %148, label %105, label %149

149:                                              ; preds = %105
  %150 = load i64, i64* %8, align 8
  %151 = load i64, i64* %9, align 8
  %152 = load i64, i64* %10, align 8
  br label %153

153:                                              ; preds = %149, %82
  %154 = phi i64 [ %152, %149 ], [ %83, %82 ]
  %155 = phi i64 [ %151, %149 ], [ %84, %82 ]
  %156 = phi i64 [ %150, %149 ], [ %85, %82 ]
  %157 = getelementptr inbounds %"struct.jxl::FilterRows", %"struct.jxl::FilterRows"* %0, i64 0, i32 0, i64 2
  %158 = load float*, float** %157, align 8
  %159 = getelementptr inbounds float, float* %158, i64 %156
  %160 = getelementptr inbounds float, float* %158, i64 %155
  %161 = getelementptr inbounds float, float* %158, i64 %154
  %162 = getelementptr inbounds %"struct.jxl::FilterRows", %"struct.jxl::FilterRows"* %0, i64 0, i32 2, i64 2
  %163 = load float*, float** %162, align 8
  %164 = getelementptr inbounds %"struct.jxl::FilterWeights", %"struct.jxl::FilterWeights"* %2, i64 0, i32 0, i64 6
  %165 = load float, float* %164, align 4
  %166 = insertelement <4 x float> undef, float %165, i32 0
  %167 = shufflevector <4 x float> %166, <4 x float> undef, <4 x i32> zeroinitializer
  %168 = getelementptr inbounds %"struct.jxl::FilterWeights", %"struct.jxl::FilterWeights"* %2, i64 0, i32 0, i64 7
  %169 = load float, float* %168, align 4
  %170 = insertelement <4 x float> undef, float %169, i32 0
  %171 = shufflevector <4 x float> %170, <4 x float> undef, <4 x i32> zeroinitializer
  %172 = getelementptr inbounds %"struct.jxl::FilterWeights", %"struct.jxl::FilterWeights"* %2, i64 0, i32 0, i64 8
  %173 = load float, float* %172, align 4
  %174 = insertelement <4 x float> undef, float %173, i32 0
  %175 = shufflevector <4 x float> %174, <4 x float> undef, <4 x i32> zeroinitializer
  br i1 %11, label %176, label %220

176:                                              ; preds = %153, %176
  %177 = phi i64 [ %218, %176 ], [ %3, %153 ]
  %178 = getelementptr inbounds float, float* %159, i64 %177
  %179 = getelementptr inbounds float, float* %160, i64 %177
  %180 = getelementptr inbounds float, float* %161, i64 %177
  %181 = getelementptr inbounds float, float* %163, i64 %177
  %182 = bitcast float* %178 to <4 x float>*
  %183 = load <4 x float>, <4 x float>* %182, align 16, !alias.scope !2, !noalias !7
  %184 = getelementptr inbounds float, float* %178, i64 -1
  %185 = bitcast float* %184 to <4 x float>*
  %186 = load <4 x float>, <4 x float>* %185, align 1, !alias.scope !11, !noalias !7
  %187 = getelementptr inbounds float, float* %178, i64 1
  %188 = bitcast float* %187 to <4 x float>*
  %189 = load <4 x float>, <4 x float>* %188, align 1, !alias.scope !14, !noalias !7
  %190 = bitcast float* %179 to <4 x float>*
  %191 = load <4 x float>, <4 x float>* %190, align 16, !alias.scope !17, !noalias !20
  %192 = getelementptr inbounds float, float* %179, i64 -1
  %193 = bitcast float* %192 to <4 x float>*
  %194 = load <4 x float>, <4 x float>* %193, align 1, !alias.scope !21, !noalias !20
  %195 = getelementptr inbounds float, float* %179, i64 1
  %196 = bitcast float* %195 to <4 x float>*
  %197 = load <4 x float>, <4 x float>* %196, align 1, !alias.scope !24, !noalias !20
  %198 = bitcast float* %180 to <4 x float>*
  %199 = load <4 x float>, <4 x float>* %198, align 16, !alias.scope !27, !noalias !30
  %200 = getelementptr inbounds float, float* %180, i64 -1
  %201 = bitcast float* %200 to <4 x float>*
  %202 = load <4 x float>, <4 x float>* %201, align 1, !alias.scope !31, !noalias !30
  %203 = getelementptr inbounds float, float* %180, i64 1
  %204 = bitcast float* %203 to <4 x float>*
  %205 = load <4 x float>, <4 x float>* %204, align 1, !alias.scope !34, !noalias !30
  %206 = fadd <4 x float> %194, %197
  %207 = fadd <4 x float> %183, %199
  %208 = fadd <4 x float> %206, %207
  %209 = fadd <4 x float> %186, %189
  %210 = fadd <4 x float> %202, %205
  %211 = fadd <4 x float> %209, %210
  %212 = fmul <4 x float> %167, %191
  %213 = fmul <4 x float> %171, %208
  %214 = fadd <4 x float> %212, %213
  %215 = fmul <4 x float> %175, %211
  %216 = fadd <4 x float> %214, %215
  %217 = bitcast float* %181 to <4 x float>*
  store <4 x float> %216, <4 x float>* %217, align 16, !alias.scope !37, !noalias !40
  %218 = add i64 %177, 4
  %219 = icmp ult i64 %218, %4
  br i1 %219, label %176, label %220

220:                                              ; preds = %176, %153
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN3jxl6N_SSE47Epf0RowERKNS_10FilterRowsERKNS_10LoopFilterERKNS_13FilterWeightsEmmmm(%"struct.jxl::FilterRows"* readonly dereferenceable(120), %"struct.jxl::LoopFilter"* nocapture readonly dereferenceable(144), %"struct.jxl::FilterWeights"* nocapture readnone dereferenceable(72), i64, i64, i64, i64) #2 {
  %8 = alloca [8 x float], align 16
  %9 = alloca [12 x %"class.hwy::N_SSE4::Vec128"], align 16
  %10 = bitcast [12 x %"class.hwy::N_SSE4::Vec128"]* %9 to i8*
  %11 = getelementptr inbounds %"struct.jxl::FilterRows", %"struct.jxl::FilterRows"* %0, i64 0, i32 3
  %12 = load float*, float** %11, align 8
  %13 = getelementptr inbounds %"struct.jxl::LoopFilter", %"struct.jxl::LoopFilter"* %1, i64 0, i32 23
  %14 = load float, float* %13, align 4
  %15 = getelementptr inbounds %"struct.jxl::LoopFilter", %"struct.jxl::LoopFilter"* %1, i64 0, i32 25
  %16 = load float, float* %15, align 4
  %17 = fmul float %14, %16
  %18 = bitcast [8 x float]* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %18) #14
  %19 = getelementptr inbounds [8 x float], [8 x float]* %8, i64 0, i64 0
  %20 = getelementptr inbounds [8 x float], [8 x float]* %8, i64 0, i64 1
  %21 = getelementptr inbounds [8 x float], [8 x float]* %8, i64 0, i64 5
  %22 = getelementptr inbounds [8 x float], [8 x float]* %8, i64 0, i64 6
  %23 = getelementptr inbounds [8 x float], [8 x float]* %8, i64 0, i64 7
  store float %17, float* %19, align 16
  %24 = insertelement <4 x float> undef, float %14, i32 0
  %25 = shufflevector <4 x float> %24, <4 x float> undef, <4 x i32> zeroinitializer
  %26 = bitcast float* %20 to <4 x float>*
  store <4 x float> %25, <4 x float>* %26, align 4
  store float %14, float* %21, align 4
  store float %14, float* %22, align 8
  store float %17, float* %23, align 4
  switch i64 %6, label %33 [
    i64 7, label %27
    i64 0, label %27
  ]

27:                                               ; preds = %7, %7
  %28 = getelementptr inbounds [8 x float], [8 x float]* %8, i64 0, i64 4
  %29 = insertelement <4 x float> undef, float %17, i32 0
  %30 = shufflevector <4 x float> %29, <4 x float> undef, <4 x i32> zeroinitializer
  %31 = bitcast [8 x float]* %8 to <4 x float>*
  store <4 x float> %30, <4 x float>* %31, align 16, !alias.scope !41
  %32 = bitcast float* %28 to <4 x float>*
  store <4 x float> %30, <4 x float>* %32, align 16, !alias.scope !41
  br label %33

33:                                               ; preds = %27, %7
  %34 = icmp ult i64 %3, %4
  br i1 %34, label %35, label %46

35:                                               ; preds = %33
  %36 = getelementptr inbounds %"struct.jxl::FilterRows", %"struct.jxl::FilterRows"* %0, i64 0, i32 0, i64 0
  %37 = getelementptr inbounds %"struct.jxl::FilterRows", %"struct.jxl::FilterRows"* %0, i64 0, i32 1, i64 3
  %38 = getelementptr inbounds %"struct.jxl::FilterRows", %"struct.jxl::FilterRows"* %0, i64 0, i32 0, i64 1
  %39 = getelementptr inbounds %"struct.jxl::FilterRows", %"struct.jxl::FilterRows"* %0, i64 0, i32 0, i64 2
  %40 = getelementptr inbounds %"struct.jxl::LoopFilter", %"struct.jxl::LoopFilter"* %1, i64 0, i32 18
  %41 = getelementptr inbounds %"struct.jxl::FilterRows", %"struct.jxl::FilterRows"* %0, i64 0, i32 2, i64 0
  %42 = getelementptr inbounds %"struct.jxl::FilterRows", %"struct.jxl::FilterRows"* %0, i64 0, i32 2, i64 1
  %43 = getelementptr inbounds %"struct.jxl::FilterRows", %"struct.jxl::FilterRows"* %0, i64 0, i32 2, i64 2
  %44 = getelementptr inbounds %"struct.jxl::FilterRows", %"struct.jxl::FilterRows"* %0, i64 0, i32 1, i64 2
  %45 = getelementptr inbounds %"struct.jxl::FilterRows", %"struct.jxl::FilterRows"* %0, i64 0, i32 1, i64 4
  br label %47

46:                                               ; preds = %263, %33
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %18) #14
  ret void

47:                                               ; preds = %35, %263
  %48 = phi i64 [ %3, %35 ], [ %264, %263 ]
  %49 = add i64 %48, %5
  %50 = lshr i64 %49, 3
  %51 = getelementptr inbounds float, float* %12, i64 %50
  %52 = load float, float* %51, align 4
  %53 = fcmp olt float %52, 0xC00F3DF000000000
  br i1 %53, label %54, label %82

54:                                               ; preds = %47
  %55 = load float*, float** %36, align 8
  %56 = load i64, i64* %37, align 8
  %57 = getelementptr inbounds float, float* %55, i64 %48
  %58 = getelementptr inbounds float, float* %57, i64 %56
  %59 = bitcast float* %58 to <4 x float>*
  %60 = load <4 x float>, <4 x float>* %59, align 16, !alias.scope !44
  %61 = load float*, float** %41, align 8
  %62 = getelementptr inbounds float, float* %61, i64 %48
  %63 = bitcast float* %62 to <4 x float>*
  store <4 x float> %60, <4 x float>* %63, align 16, !alias.scope !47
  %64 = load float*, float** %38, align 8
  %65 = load i64, i64* %37, align 8
  %66 = getelementptr inbounds float, float* %64, i64 %48
  %67 = getelementptr inbounds float, float* %66, i64 %65
  %68 = bitcast float* %67 to <4 x float>*
  %69 = load <4 x float>, <4 x float>* %68, align 16, !alias.scope !44
  %70 = load float*, float** %42, align 8
  %71 = getelementptr inbounds float, float* %70, i64 %48
  %72 = bitcast float* %71 to <4 x float>*
  store <4 x float> %69, <4 x float>* %72, align 16, !alias.scope !47
  %73 = load float*, float** %39, align 8
  %74 = load i64, i64* %37, align 8
  %75 = getelementptr inbounds float, float* %73, i64 %48
  %76 = getelementptr inbounds float, float* %75, i64 %74
  %77 = bitcast float* %76 to <4 x float>*
  %78 = load <4 x float>, <4 x float>* %77, align 16, !alias.scope !44
  %79 = load float*, float** %43, align 8
  %80 = getelementptr inbounds float, float* %79, i64 %48
  %81 = bitcast float* %80 to <4 x float>*
  store <4 x float> %78, <4 x float>* %81, align 16, !alias.scope !47
  br label %263

82:                                               ; preds = %47
  %83 = and i64 %49, 7
  %84 = getelementptr inbounds [8 x float], [8 x float]* %8, i64 0, i64 %83
  %85 = bitcast float* %84 to <4 x float>*
  %86 = load <4 x float>, <4 x float>* %85, align 16, !alias.scope !50
  %87 = insertelement <4 x float> undef, float %52, i32 0
  %88 = shufflevector <4 x float> %87, <4 x float> undef, <4 x i32> zeroinitializer
  call void @llvm.lifetime.start.p0i8(i64 192, i8* nonnull %10) #14
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %10, i8 0, i64 192, i1 false)
  %89 = load i64, i64* %37, align 8
  %90 = load i64, i64* %44, align 8
  %91 = load i64, i64* %45, align 8
  br label %112

92:                                               ; preds = %202
  %93 = fmul <4 x float> %88, %86
  %94 = load float*, float** %36, align 8
  %95 = getelementptr inbounds float, float* %94, i64 %89
  %96 = getelementptr inbounds float, float* %95, i64 %48
  %97 = bitcast float* %96 to <4 x float>*
  %98 = load <4 x float>, <4 x float>* %97, align 1, !alias.scope !53
  %99 = load float*, float** %38, align 8
  %100 = getelementptr inbounds float, float* %99, i64 %89
  %101 = getelementptr inbounds float, float* %100, i64 %48
  %102 = bitcast float* %101 to <4 x float>*
  %103 = load <4 x float>, <4 x float>* %102, align 1, !alias.scope !56
  %104 = load float*, float** %39, align 8
  %105 = getelementptr inbounds float, float* %104, i64 %89
  %106 = getelementptr inbounds float, float* %105, i64 %48
  %107 = bitcast float* %106 to <4 x float>*
  %108 = load <4 x float>, <4 x float>* %107, align 1, !alias.scope !59
  %109 = load float, float* %40, align 4, !noalias !62
  %110 = insertelement <4 x float> undef, float %109, i32 0
  %111 = shufflevector <4 x float> %110, <4 x float> undef, <4 x i32> zeroinitializer
  br label %219

112:                                              ; preds = %202, %82
  %113 = phi i64 [ %203, %202 ], [ 0, %82 ]
  %114 = getelementptr inbounds %"struct.jxl::LoopFilter", %"struct.jxl::LoopFilter"* %1, i64 0, i32 17, i64 %113
  %115 = load float, float* %114, align 4
  %116 = insertelement <4 x float> undef, float %115, i32 0
  %117 = shufflevector <4 x float> %116, <4 x float> undef, <4 x i32> zeroinitializer
  %118 = getelementptr inbounds %"struct.jxl::FilterRows", %"struct.jxl::FilterRows"* %0, i64 0, i32 0, i64 %113
  %119 = load float*, float** %118, align 8
  %120 = getelementptr inbounds float, float* %119, i64 %48
  %121 = getelementptr inbounds float, float* %120, i64 %90
  %122 = bitcast float* %121 to <4 x float>*
  %123 = load <4 x float>, <4 x float>* %122, align 1, !alias.scope !68
  %124 = getelementptr inbounds float, float* %120, i64 %91
  %125 = bitcast float* %124 to <4 x float>*
  %126 = load <4 x float>, <4 x float>* %125, align 1, !alias.scope !68
  %127 = getelementptr inbounds float, float* %120, i64 %89
  %128 = getelementptr inbounds float, float* %127, i64 1
  %129 = bitcast float* %128 to <4 x float>*
  %130 = load <4 x float>, <4 x float>* %129, align 1, !alias.scope !68
  %131 = bitcast float* %127 to <4 x float>*
  %132 = load <4 x float>, <4 x float>* %131, align 1, !alias.scope !68
  %133 = getelementptr inbounds float, float* %127, i64 -1
  %134 = bitcast float* %133 to <4 x float>*
  %135 = load <4 x float>, <4 x float>* %134, align 1, !alias.scope !68
  br label %136

136:                                              ; preds = %136, %112
  %137 = phi i64 [ 0, %112 ], [ %200, %136 ]
  %138 = getelementptr inbounds [12 x %"struct.std::__1::array"], [12 x %"struct.std::__1::array"]* @_ZZN3jxl8N_SCALAR7Epf0RowERKNS_10FilterRowsERKNS_10LoopFilterERKNS_13FilterWeightsEmmmmE8sads_off, i64 0, i64 %137, i32 0, i64 0
  %139 = load i32, i32* %138, align 8
  %140 = getelementptr inbounds [12 x %"struct.std::__1::array"], [12 x %"struct.std::__1::array"]* @_ZZN3jxl8N_SCALAR7Epf0RowERKNS_10FilterRowsERKNS_10LoopFilterERKNS_13FilterWeightsEmmmmE8sads_off, i64 0, i64 %137, i32 0, i64 1
  %141 = load i32, i32* %140, align 4
  %142 = sext i32 %141 to i64
  %143 = sext i32 %139 to i64
  %144 = add nsw i64 %143, 3
  %145 = getelementptr inbounds %"struct.jxl::FilterRows", %"struct.jxl::FilterRows"* %0, i64 0, i32 1, i64 %144
  %146 = load i64, i64* %145, align 8
  %147 = getelementptr inbounds float, float* %120, i64 %142
  %148 = getelementptr inbounds float, float* %147, i64 %146
  %149 = bitcast float* %148 to <4 x float>*
  %150 = load <4 x float>, <4 x float>* %149, align 1, !alias.scope !71
  %151 = fsub <4 x float> %132, %150
  %152 = bitcast <4 x float> %151 to <4 x i32>
  %153 = and <4 x i32> %152, <i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647>
  %154 = bitcast <4 x i32> %153 to <4 x float>
  %155 = fadd <4 x float> %154, zeroinitializer
  %156 = sext i32 %139 to i64
  %157 = add nsw i64 %156, 2
  %158 = getelementptr inbounds %"struct.jxl::FilterRows", %"struct.jxl::FilterRows"* %0, i64 0, i32 1, i64 %157
  %159 = load i64, i64* %158, align 8
  %160 = getelementptr inbounds float, float* %147, i64 %159
  %161 = bitcast float* %160 to <4 x float>*
  %162 = load <4 x float>, <4 x float>* %161, align 1, !alias.scope !71
  %163 = fsub <4 x float> %123, %162
  %164 = bitcast <4 x float> %163 to <4 x i32>
  %165 = and <4 x i32> %164, <i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647>
  %166 = bitcast <4 x i32> %165 to <4 x float>
  %167 = fadd <4 x float> %155, %166
  %168 = getelementptr inbounds float, float* %148, i64 -1
  %169 = bitcast float* %168 to <4 x float>*
  %170 = load <4 x float>, <4 x float>* %169, align 1, !alias.scope !71
  %171 = fsub <4 x float> %135, %170
  %172 = bitcast <4 x float> %171 to <4 x i32>
  %173 = and <4 x i32> %172, <i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647>
  %174 = bitcast <4 x i32> %173 to <4 x float>
  %175 = fadd <4 x float> %167, %174
  %176 = sext i32 %139 to i64
  %177 = add nsw i64 %176, 4
  %178 = getelementptr inbounds %"struct.jxl::FilterRows", %"struct.jxl::FilterRows"* %0, i64 0, i32 1, i64 %177
  %179 = load i64, i64* %178, align 8
  %180 = getelementptr inbounds float, float* %147, i64 %179
  %181 = bitcast float* %180 to <4 x float>*
  %182 = load <4 x float>, <4 x float>* %181, align 1, !alias.scope !71
  %183 = fsub <4 x float> %126, %182
  %184 = bitcast <4 x float> %183 to <4 x i32>
  %185 = and <4 x i32> %184, <i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647>
  %186 = bitcast <4 x i32> %185 to <4 x float>
  %187 = fadd <4 x float> %175, %186
  %188 = getelementptr inbounds float, float* %148, i64 1
  %189 = bitcast float* %188 to <4 x float>*
  %190 = load <4 x float>, <4 x float>* %189, align 1, !alias.scope !71
  %191 = fsub <4 x float> %130, %190
  %192 = bitcast <4 x float> %191 to <4 x i32>
  %193 = and <4 x i32> %192, <i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647>
  %194 = bitcast <4 x i32> %193 to <4 x float>
  %195 = fadd <4 x float> %187, %194
  %196 = getelementptr inbounds [12 x %"class.hwy::N_SSE4::Vec128"], [12 x %"class.hwy::N_SSE4::Vec128"]* %9, i64 0, i64 %137, i32 0
  %197 = load <4 x float>, <4 x float>* %196, align 16
  %198 = fmul <4 x float> %117, %195
  %199 = fadd <4 x float> %198, %197
  store <4 x float> %199, <4 x float>* %196, align 16
  %200 = add nuw nsw i64 %137, 1
  %201 = icmp eq i64 %200, 12
  br i1 %201, label %202, label %136

202:                                              ; preds = %136
  %203 = add nuw nsw i64 %113, 1
  %204 = icmp eq i64 %203, 3
  br i1 %204, label %92, label %112

205:                                              ; preds = %219
  %206 = fdiv <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %254
  %207 = fmul <4 x float> %256, %206
  %208 = load float*, float** %41, align 8
  %209 = getelementptr inbounds float, float* %208, i64 %48
  %210 = bitcast float* %209 to <4 x float>*
  store <4 x float> %207, <4 x float>* %210, align 16, !alias.scope !74
  %211 = fmul <4 x float> %206, %258
  %212 = load float*, float** %42, align 8
  %213 = getelementptr inbounds float, float* %212, i64 %48
  %214 = bitcast float* %213 to <4 x float>*
  store <4 x float> %211, <4 x float>* %214, align 16, !alias.scope !77
  %215 = fmul <4 x float> %206, %260
  %216 = load float*, float** %43, align 8
  %217 = getelementptr inbounds float, float* %216, i64 %48
  %218 = bitcast float* %217 to <4 x float>*
  store <4 x float> %215, <4 x float>* %218, align 16, !alias.scope !80
  call void @llvm.lifetime.end.p0i8(i64 192, i8* nonnull %10) #14
  br label %263

219:                                              ; preds = %219, %92
  %220 = phi i64 [ 0, %92 ], [ %261, %219 ]
  %221 = phi <4 x float> [ %108, %92 ], [ %260, %219 ]
  %222 = phi <4 x float> [ %103, %92 ], [ %258, %219 ]
  %223 = phi <4 x float> [ %98, %92 ], [ %256, %219 ]
  %224 = phi <4 x float> [ <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %92 ], [ %254, %219 ]
  %225 = getelementptr inbounds [12 x %"struct.std::__1::array"], [12 x %"struct.std::__1::array"]* @_ZZN3jxl8N_SCALAR7Epf0RowERKNS_10FilterRowsERKNS_10LoopFilterERKNS_13FilterWeightsEmmmmE8sads_off, i64 0, i64 %220, i32 0, i64 0
  %226 = load i32, i32* %225, align 8
  %227 = getelementptr inbounds [12 x %"struct.std::__1::array"], [12 x %"struct.std::__1::array"]* @_ZZN3jxl8N_SCALAR7Epf0RowERKNS_10FilterRowsERKNS_10LoopFilterERKNS_13FilterWeightsEmmmmE8sads_off, i64 0, i64 %220, i32 0, i64 1
  %228 = load i32, i32* %227, align 4
  %229 = sext i32 %228 to i64
  %230 = add i64 %48, %229
  %231 = getelementptr inbounds [12 x %"class.hwy::N_SSE4::Vec128"], [12 x %"class.hwy::N_SSE4::Vec128"]* %9, i64 0, i64 %220, i32 0
  %232 = load <4 x float>, <4 x float>* %231, align 16
  %233 = sext i32 %226 to i64
  %234 = add nsw i64 %233, 3
  %235 = getelementptr inbounds %"struct.jxl::FilterRows", %"struct.jxl::FilterRows"* %0, i64 0, i32 1, i64 %234
  %236 = load i64, i64* %235, align 8, !noalias !62
  %237 = getelementptr inbounds float, float* %94, i64 %236
  %238 = getelementptr inbounds float, float* %237, i64 %230
  %239 = bitcast float* %238 to <4 x float>*
  %240 = load <4 x float>, <4 x float>* %239, align 1, !alias.scope !83, !noalias !62
  %241 = getelementptr inbounds float, float* %99, i64 %236
  %242 = getelementptr inbounds float, float* %241, i64 %230
  %243 = bitcast float* %242 to <4 x float>*
  %244 = load <4 x float>, <4 x float>* %243, align 1, !alias.scope !86, !noalias !62
  %245 = getelementptr inbounds float, float* %104, i64 %236
  %246 = getelementptr inbounds float, float* %245, i64 %230
  %247 = bitcast float* %246 to <4 x float>*
  %248 = load <4 x float>, <4 x float>* %247, align 1, !alias.scope !89, !noalias !62
  %249 = fmul <4 x float> %93, %232
  %250 = fadd <4 x float> %249, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %251 = fmul <4 x float> %250, %250
  %252 = fcmp ugt <4 x float> %250, %111
  %253 = select <4 x i1> %252, <4 x float> %251, <4 x float> zeroinitializer
  %254 = fadd <4 x float> %224, %253
  %255 = fmul <4 x float> %240, %253
  %256 = fadd <4 x float> %223, %255
  %257 = fmul <4 x float> %244, %253
  %258 = fadd <4 x float> %222, %257
  %259 = fmul <4 x float> %248, %253
  %260 = fadd <4 x float> %221, %259
  %261 = add nuw nsw i64 %220, 1
  %262 = icmp eq i64 %261, 12
  br i1 %262, label %205, label %219

263:                                              ; preds = %54, %205
  %264 = add i64 %48, 4
  %265 = icmp ult i64 %264, %4
  br i1 %265, label %47, label %46
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN3jxl6N_SSE47Epf1RowERKNS_10FilterRowsERKNS_10LoopFilterERKNS_13FilterWeightsEmmmm(%"struct.jxl::FilterRows"* readonly dereferenceable(120), %"struct.jxl::LoopFilter"* nocapture readonly dereferenceable(144), %"struct.jxl::FilterWeights"* nocapture readnone dereferenceable(72), i64, i64, i64, i64) #2 {
  %8 = alloca [8 x float], align 16
  %9 = getelementptr inbounds %"struct.jxl::FilterRows", %"struct.jxl::FilterRows"* %0, i64 0, i32 3
  %10 = load float*, float** %9, align 8
  %11 = getelementptr inbounds %"struct.jxl::LoopFilter", %"struct.jxl::LoopFilter"* %1, i64 0, i32 25
  %12 = load float, float* %11, align 4
  %13 = bitcast [8 x float]* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %13) #14
  %14 = getelementptr inbounds [8 x float], [8 x float]* %8, i64 0, i64 0
  %15 = getelementptr inbounds [8 x float], [8 x float]* %8, i64 0, i64 1
  %16 = getelementptr inbounds [8 x float], [8 x float]* %8, i64 0, i64 5
  %17 = getelementptr inbounds [8 x float], [8 x float]* %8, i64 0, i64 6
  %18 = getelementptr inbounds [8 x float], [8 x float]* %8, i64 0, i64 7
  store float %12, float* %14, align 16
  %19 = bitcast float* %15 to <4 x float>*
  store <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, <4 x float>* %19, align 4
  store float 1.000000e+00, float* %16, align 4
  store float 1.000000e+00, float* %17, align 8
  store float %12, float* %18, align 4
  switch i64 %6, label %26 [
    i64 7, label %20
    i64 0, label %20
  ]

20:                                               ; preds = %7, %7
  %21 = getelementptr inbounds [8 x float], [8 x float]* %8, i64 0, i64 4
  %22 = insertelement <4 x float> undef, float %12, i32 0
  %23 = shufflevector <4 x float> %22, <4 x float> undef, <4 x i32> zeroinitializer
  %24 = bitcast [8 x float]* %8 to <4 x float>*
  store <4 x float> %23, <4 x float>* %24, align 16, !alias.scope !92
  %25 = bitcast float* %21 to <4 x float>*
  store <4 x float> %23, <4 x float>* %25, align 16, !alias.scope !92
  br label %26

26:                                               ; preds = %20, %7
  %27 = icmp ult i64 %3, %4
  br i1 %27, label %28, label %41

28:                                               ; preds = %26
  %29 = getelementptr inbounds %"struct.jxl::FilterRows", %"struct.jxl::FilterRows"* %0, i64 0, i32 1, i64 1
  %30 = getelementptr inbounds %"struct.jxl::FilterRows", %"struct.jxl::FilterRows"* %0, i64 0, i32 1, i64 2
  %31 = getelementptr inbounds %"struct.jxl::FilterRows", %"struct.jxl::FilterRows"* %0, i64 0, i32 1, i64 3
  %32 = getelementptr inbounds %"struct.jxl::FilterRows", %"struct.jxl::FilterRows"* %0, i64 0, i32 1, i64 4
  %33 = getelementptr inbounds %"struct.jxl::FilterRows", %"struct.jxl::FilterRows"* %0, i64 0, i32 1, i64 5
  %34 = getelementptr inbounds %"struct.jxl::FilterRows", %"struct.jxl::FilterRows"* %0, i64 0, i32 0, i64 0
  %35 = getelementptr inbounds %"struct.jxl::FilterRows", %"struct.jxl::FilterRows"* %0, i64 0, i32 0, i64 1
  %36 = getelementptr inbounds %"struct.jxl::FilterRows", %"struct.jxl::FilterRows"* %0, i64 0, i32 0, i64 2
  %37 = getelementptr inbounds %"struct.jxl::LoopFilter", %"struct.jxl::LoopFilter"* %1, i64 0, i32 18
  %38 = getelementptr inbounds %"struct.jxl::FilterRows", %"struct.jxl::FilterRows"* %0, i64 0, i32 2, i64 0
  %39 = getelementptr inbounds %"struct.jxl::FilterRows", %"struct.jxl::FilterRows"* %0, i64 0, i32 2, i64 1
  %40 = getelementptr inbounds %"struct.jxl::FilterRows", %"struct.jxl::FilterRows"* %0, i64 0, i32 2, i64 2
  br label %42

41:                                               ; preds = %353, %26
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %13) #14
  ret void

42:                                               ; preds = %28, %353
  %43 = phi i64 [ %3, %28 ], [ %358, %353 ]
  %44 = add i64 %43, %5
  %45 = lshr i64 %44, 3
  %46 = getelementptr inbounds float, float* %10, i64 %45
  %47 = load float, float* %46, align 4
  %48 = fcmp olt float %47, 0xC00F3DF000000000
  br i1 %48, label %49, label %74

49:                                               ; preds = %42
  %50 = load float*, float** %34, align 8
  %51 = load i64, i64* %31, align 8
  %52 = getelementptr inbounds float, float* %50, i64 %43
  %53 = getelementptr inbounds float, float* %52, i64 %51
  %54 = bitcast float* %53 to <4 x float>*
  %55 = load <4 x float>, <4 x float>* %54, align 16, !alias.scope !95
  %56 = load float*, float** %38, align 8
  %57 = getelementptr inbounds float, float* %56, i64 %43
  %58 = bitcast float* %57 to <4 x float>*
  store <4 x float> %55, <4 x float>* %58, align 16, !alias.scope !98
  %59 = load float*, float** %35, align 8
  %60 = load i64, i64* %31, align 8
  %61 = getelementptr inbounds float, float* %59, i64 %43
  %62 = getelementptr inbounds float, float* %61, i64 %60
  %63 = bitcast float* %62 to <4 x float>*
  %64 = load <4 x float>, <4 x float>* %63, align 16, !alias.scope !95
  %65 = load float*, float** %39, align 8
  %66 = getelementptr inbounds float, float* %65, i64 %43
  %67 = bitcast float* %66 to <4 x float>*
  store <4 x float> %64, <4 x float>* %67, align 16, !alias.scope !98
  %68 = load float*, float** %36, align 8
  %69 = load i64, i64* %31, align 8
  %70 = getelementptr inbounds float, float* %68, i64 %43
  %71 = getelementptr inbounds float, float* %70, i64 %69
  %72 = bitcast float* %71 to <4 x float>*
  %73 = load <4 x float>, <4 x float>* %72, align 16, !alias.scope !95
  br label %353

74:                                               ; preds = %42
  %75 = and i64 %44, 7
  %76 = getelementptr inbounds [8 x float], [8 x float]* %8, i64 0, i64 %75
  %77 = bitcast float* %76 to <4 x float>*
  %78 = load <4 x float>, <4 x float>* %77, align 16, !alias.scope !101
  %79 = insertelement <4 x float> undef, float %47, i32 0
  %80 = shufflevector <4 x float> %79, <4 x float> undef, <4 x i32> zeroinitializer
  %81 = load i64, i64* %29, align 8
  %82 = load i64, i64* %30, align 8
  %83 = load i64, i64* %31, align 8
  %84 = load i64, i64* %32, align 8
  %85 = load i64, i64* %33, align 8
  br label %211

86:                                               ; preds = %211
  %87 = fmul <4 x float> %80, %78
  %88 = load float*, float** %34, align 8
  %89 = load i64, i64* %31, align 8
  %90 = getelementptr inbounds float, float* %88, i64 %89
  %91 = getelementptr inbounds float, float* %90, i64 %43
  %92 = bitcast float* %91 to <4 x float>*
  %93 = load <4 x float>, <4 x float>* %92, align 16, !alias.scope !104
  %94 = load float*, float** %35, align 8
  %95 = getelementptr inbounds float, float* %94, i64 %89
  %96 = getelementptr inbounds float, float* %95, i64 %43
  %97 = bitcast float* %96 to <4 x float>*
  %98 = load <4 x float>, <4 x float>* %97, align 16, !alias.scope !107
  %99 = load float*, float** %36, align 8
  %100 = getelementptr inbounds float, float* %99, i64 %89
  %101 = getelementptr inbounds float, float* %100, i64 %43
  %102 = bitcast float* %101 to <4 x float>*
  %103 = load <4 x float>, <4 x float>* %102, align 16, !alias.scope !110
  %104 = load i64, i64* %30, align 8, !noalias !113
  %105 = getelementptr inbounds float, float* %88, i64 %104
  %106 = getelementptr inbounds float, float* %105, i64 %43
  %107 = bitcast float* %106 to <4 x float>*
  %108 = load <4 x float>, <4 x float>* %107, align 16, !alias.scope !119, !noalias !113
  %109 = getelementptr inbounds float, float* %94, i64 %104
  %110 = getelementptr inbounds float, float* %109, i64 %43
  %111 = bitcast float* %110 to <4 x float>*
  %112 = load <4 x float>, <4 x float>* %111, align 16, !alias.scope !122, !noalias !113
  %113 = getelementptr inbounds float, float* %99, i64 %104
  %114 = getelementptr inbounds float, float* %113, i64 %43
  %115 = bitcast float* %114 to <4 x float>*
  %116 = load <4 x float>, <4 x float>* %115, align 16, !alias.scope !125, !noalias !113
  %117 = load float, float* %37, align 4, !noalias !113
  %118 = insertelement <4 x float> undef, float %117, i32 0
  %119 = shufflevector <4 x float> %118, <4 x float> undef, <4 x i32> zeroinitializer
  %120 = fmul <4 x float> %87, %344
  %121 = fadd <4 x float> %120, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %122 = fmul <4 x float> %121, %121
  %123 = fcmp ugt <4 x float> %121, %119
  %124 = select <4 x i1> %123, <4 x float> %122, <4 x float> zeroinitializer
  %125 = fadd <4 x float> %124, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %126 = fmul <4 x float> %108, %124
  %127 = fadd <4 x float> %93, %126
  %128 = fmul <4 x float> %112, %124
  %129 = fadd <4 x float> %98, %128
  %130 = fmul <4 x float> %116, %124
  %131 = fadd <4 x float> %103, %130
  %132 = add i64 %43, -1
  %133 = getelementptr inbounds float, float* %90, i64 %132
  %134 = bitcast float* %133 to <4 x float>*
  %135 = load <4 x float>, <4 x float>* %134, align 1, !alias.scope !128, !noalias !131
  %136 = getelementptr inbounds float, float* %95, i64 %132
  %137 = bitcast float* %136 to <4 x float>*
  %138 = load <4 x float>, <4 x float>* %137, align 1, !alias.scope !137, !noalias !131
  %139 = getelementptr inbounds float, float* %100, i64 %132
  %140 = bitcast float* %139 to <4 x float>*
  %141 = load <4 x float>, <4 x float>* %140, align 1, !alias.scope !140, !noalias !131
  %142 = fmul <4 x float> %87, %346
  %143 = fadd <4 x float> %142, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %144 = fmul <4 x float> %143, %143
  %145 = fcmp ugt <4 x float> %143, %119
  %146 = select <4 x i1> %145, <4 x float> %144, <4 x float> zeroinitializer
  %147 = fadd <4 x float> %146, %125
  %148 = fmul <4 x float> %135, %146
  %149 = fadd <4 x float> %148, %127
  %150 = fmul <4 x float> %138, %146
  %151 = fadd <4 x float> %150, %129
  %152 = fmul <4 x float> %141, %146
  %153 = fadd <4 x float> %152, %131
  %154 = add i64 %43, 1
  %155 = getelementptr inbounds float, float* %90, i64 %154
  %156 = bitcast float* %155 to <4 x float>*
  %157 = load <4 x float>, <4 x float>* %156, align 1, !alias.scope !143, !noalias !146
  %158 = getelementptr inbounds float, float* %95, i64 %154
  %159 = bitcast float* %158 to <4 x float>*
  %160 = load <4 x float>, <4 x float>* %159, align 1, !alias.scope !152, !noalias !146
  %161 = getelementptr inbounds float, float* %100, i64 %154
  %162 = bitcast float* %161 to <4 x float>*
  %163 = load <4 x float>, <4 x float>* %162, align 1, !alias.scope !155, !noalias !146
  %164 = fmul <4 x float> %87, %348
  %165 = fadd <4 x float> %164, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %166 = fmul <4 x float> %165, %165
  %167 = fcmp ugt <4 x float> %165, %119
  %168 = select <4 x i1> %167, <4 x float> %166, <4 x float> zeroinitializer
  %169 = fadd <4 x float> %168, %147
  %170 = fmul <4 x float> %157, %168
  %171 = fadd <4 x float> %170, %149
  %172 = fmul <4 x float> %168, %160
  %173 = fadd <4 x float> %172, %151
  %174 = fmul <4 x float> %168, %163
  %175 = fadd <4 x float> %174, %153
  %176 = load i64, i64* %32, align 8, !noalias !158
  %177 = getelementptr inbounds float, float* %88, i64 %176
  %178 = getelementptr inbounds float, float* %177, i64 %43
  %179 = bitcast float* %178 to <4 x float>*
  %180 = load <4 x float>, <4 x float>* %179, align 16, !alias.scope !164, !noalias !158
  %181 = getelementptr inbounds float, float* %94, i64 %176
  %182 = getelementptr inbounds float, float* %181, i64 %43
  %183 = bitcast float* %182 to <4 x float>*
  %184 = load <4 x float>, <4 x float>* %183, align 16, !alias.scope !167, !noalias !158
  %185 = getelementptr inbounds float, float* %99, i64 %176
  %186 = getelementptr inbounds float, float* %185, i64 %43
  %187 = bitcast float* %186 to <4 x float>*
  %188 = load <4 x float>, <4 x float>* %187, align 16, !alias.scope !170, !noalias !158
  %189 = fmul <4 x float> %87, %350
  %190 = fadd <4 x float> %189, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %191 = fmul <4 x float> %190, %190
  %192 = fcmp ugt <4 x float> %190, %119
  %193 = select <4 x i1> %192, <4 x float> %191, <4 x float> zeroinitializer
  %194 = fadd <4 x float> %193, %169
  %195 = fmul <4 x float> %193, %180
  %196 = fadd <4 x float> %171, %195
  %197 = fmul <4 x float> %193, %184
  %198 = fadd <4 x float> %173, %197
  %199 = fmul <4 x float> %193, %188
  %200 = fadd <4 x float> %175, %199
  %201 = fdiv <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %194
  %202 = fmul <4 x float> %201, %196
  %203 = load float*, float** %38, align 8
  %204 = getelementptr inbounds float, float* %203, i64 %43
  %205 = bitcast float* %204 to <4 x float>*
  store <4 x float> %202, <4 x float>* %205, align 16, !alias.scope !173
  %206 = fmul <4 x float> %201, %198
  %207 = load float*, float** %39, align 8
  %208 = getelementptr inbounds float, float* %207, i64 %43
  %209 = bitcast float* %208 to <4 x float>*
  store <4 x float> %206, <4 x float>* %209, align 16, !alias.scope !176
  %210 = fmul <4 x float> %201, %200
  br label %353

211:                                              ; preds = %211, %74
  %212 = phi <4 x float> [ zeroinitializer, %74 ], [ %344, %211 ]
  %213 = phi <4 x float> [ zeroinitializer, %74 ], [ %346, %211 ]
  %214 = phi <4 x float> [ zeroinitializer, %74 ], [ %348, %211 ]
  %215 = phi <4 x float> [ zeroinitializer, %74 ], [ %350, %211 ]
  %216 = phi i64 [ 0, %74 ], [ %351, %211 ]
  %217 = getelementptr inbounds %"struct.jxl::FilterRows", %"struct.jxl::FilterRows"* %0, i64 0, i32 0, i64 %216
  %218 = load float*, float** %217, align 8
  %219 = getelementptr inbounds float, float* %218, i64 %43
  %220 = getelementptr inbounds float, float* %219, i64 %81
  %221 = bitcast float* %220 to <4 x float>*
  %222 = load <4 x float>, <4 x float>* %221, align 16, !alias.scope !179
  %223 = getelementptr inbounds float, float* %219, i64 %82
  %224 = bitcast float* %223 to <4 x float>*
  %225 = load <4 x float>, <4 x float>* %224, align 16, !alias.scope !182
  %226 = fsub <4 x float> %222, %225
  %227 = bitcast <4 x float> %226 to <4 x i32>
  %228 = and <4 x i32> %227, <i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647>
  %229 = bitcast <4 x i32> %228 to <4 x float>
  %230 = getelementptr inbounds float, float* %223, i64 -1
  %231 = bitcast float* %230 to <4 x float>*
  %232 = load <4 x float>, <4 x float>* %231, align 1, !alias.scope !185
  %233 = fsub <4 x float> %232, %225
  %234 = bitcast <4 x float> %233 to <4 x i32>
  %235 = and <4 x i32> %234, <i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647>
  %236 = bitcast <4 x i32> %235 to <4 x float>
  %237 = getelementptr inbounds float, float* %223, i64 1
  %238 = bitcast float* %237 to <4 x float>*
  %239 = load <4 x float>, <4 x float>* %238, align 1, !alias.scope !188
  %240 = fsub <4 x float> %239, %225
  %241 = bitcast <4 x float> %240 to <4 x i32>
  %242 = and <4 x i32> %241, <i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647>
  %243 = bitcast <4 x i32> %242 to <4 x float>
  %244 = getelementptr inbounds float, float* %219, i64 %83
  %245 = getelementptr inbounds float, float* %244, i64 -2
  %246 = bitcast float* %245 to <4 x float>*
  %247 = load <4 x float>, <4 x float>* %246, align 1, !alias.scope !191
  %248 = getelementptr inbounds float, float* %244, i64 -1
  %249 = bitcast float* %248 to <4 x float>*
  %250 = load <4 x float>, <4 x float>* %249, align 1, !alias.scope !194
  %251 = fsub <4 x float> %247, %250
  %252 = bitcast <4 x float> %251 to <4 x i32>
  %253 = and <4 x i32> %252, <i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647>
  %254 = bitcast <4 x i32> %253 to <4 x float>
  %255 = fadd <4 x float> %236, %254
  %256 = fsub <4 x float> %232, %250
  %257 = bitcast <4 x float> %256 to <4 x i32>
  %258 = and <4 x i32> %257, <i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647>
  %259 = bitcast <4 x i32> %258 to <4 x float>
  %260 = fadd <4 x float> %229, %259
  %261 = bitcast float* %244 to <4 x float>*
  %262 = load <4 x float>, <4 x float>* %261, align 1, !alias.scope !197
  %263 = fsub <4 x float> %250, %262
  %264 = bitcast <4 x float> %263 to <4 x i32>
  %265 = and <4 x i32> %264, <i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647>
  %266 = bitcast <4 x i32> %265 to <4 x float>
  %267 = fadd <4 x float> %255, %266
  %268 = fadd <4 x float> %243, %266
  %269 = fsub <4 x float> %262, %225
  %270 = bitcast <4 x float> %269 to <4 x i32>
  %271 = and <4 x i32> %270, <i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647>
  %272 = bitcast <4 x i32> %271 to <4 x float>
  %273 = fadd <4 x float> %260, %272
  %274 = getelementptr inbounds float, float* %244, i64 1
  %275 = bitcast float* %274 to <4 x float>*
  %276 = load <4 x float>, <4 x float>* %275, align 1, !alias.scope !200
  %277 = fsub <4 x float> %239, %276
  %278 = bitcast <4 x float> %277 to <4 x i32>
  %279 = and <4 x i32> %278, <i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647>
  %280 = bitcast <4 x i32> %279 to <4 x float>
  %281 = fadd <4 x float> %273, %280
  %282 = fsub <4 x float> %262, %276
  %283 = bitcast <4 x float> %282 to <4 x i32>
  %284 = and <4 x i32> %283, <i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647>
  %285 = bitcast <4 x i32> %284 to <4 x float>
  %286 = fadd <4 x float> %267, %285
  %287 = fadd <4 x float> %268, %285
  %288 = getelementptr inbounds float, float* %244, i64 2
  %289 = bitcast float* %288 to <4 x float>*
  %290 = load <4 x float>, <4 x float>* %289, align 1, !alias.scope !203
  %291 = fsub <4 x float> %290, %276
  %292 = bitcast <4 x float> %291 to <4 x i32>
  %293 = and <4 x i32> %292, <i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647>
  %294 = bitcast <4 x i32> %293 to <4 x float>
  %295 = fadd <4 x float> %287, %294
  %296 = getelementptr inbounds float, float* %219, i64 %84
  %297 = getelementptr inbounds float, float* %296, i64 -1
  %298 = bitcast float* %297 to <4 x float>*
  %299 = load <4 x float>, <4 x float>* %298, align 1, !alias.scope !206
  %300 = fsub <4 x float> %299, %250
  %301 = bitcast <4 x float> %300 to <4 x i32>
  %302 = and <4 x i32> %301, <i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647>
  %303 = bitcast <4 x i32> %302 to <4 x float>
  %304 = fadd <4 x float> %272, %303
  %305 = bitcast float* %296 to <4 x float>*
  %306 = load <4 x float>, <4 x float>* %305, align 16, !alias.scope !209
  %307 = fsub <4 x float> %262, %306
  %308 = bitcast <4 x float> %307 to <4 x i32>
  %309 = and <4 x i32> %308, <i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647>
  %310 = bitcast <4 x i32> %309 to <4 x float>
  %311 = fadd <4 x float> %281, %310
  %312 = fadd <4 x float> %304, %310
  %313 = fsub <4 x float> %299, %306
  %314 = bitcast <4 x float> %313 to <4 x i32>
  %315 = and <4 x i32> %314, <i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647>
  %316 = bitcast <4 x i32> %315 to <4 x float>
  %317 = fadd <4 x float> %286, %316
  %318 = getelementptr inbounds float, float* %296, i64 1
  %319 = bitcast float* %318 to <4 x float>*
  %320 = load <4 x float>, <4 x float>* %319, align 1, !alias.scope !212
  %321 = fsub <4 x float> %320, %306
  %322 = bitcast <4 x float> %321 to <4 x i32>
  %323 = and <4 x i32> %322, <i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647>
  %324 = bitcast <4 x i32> %323 to <4 x float>
  %325 = fadd <4 x float> %295, %324
  %326 = fsub <4 x float> %320, %276
  %327 = bitcast <4 x float> %326 to <4 x i32>
  %328 = and <4 x i32> %327, <i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647>
  %329 = bitcast <4 x i32> %328 to <4 x float>
  %330 = fadd <4 x float> %312, %329
  %331 = getelementptr inbounds float, float* %219, i64 %85
  %332 = bitcast float* %331 to <4 x float>*
  %333 = load <4 x float>, <4 x float>* %332, align 16, !alias.scope !215
  %334 = fsub <4 x float> %333, %306
  %335 = bitcast <4 x float> %334 to <4 x i32>
  %336 = and <4 x i32> %335, <i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647>
  %337 = bitcast <4 x i32> %336 to <4 x float>
  %338 = fadd <4 x float> %330, %337
  %339 = getelementptr inbounds %"struct.jxl::LoopFilter", %"struct.jxl::LoopFilter"* %1, i64 0, i32 17, i64 %216
  %340 = load float, float* %339, align 4
  %341 = insertelement <4 x float> undef, float %340, i32 0
  %342 = shufflevector <4 x float> %341, <4 x float> undef, <4 x i32> zeroinitializer
  %343 = fmul <4 x float> %311, %342
  %344 = fadd <4 x float> %212, %343
  %345 = fmul <4 x float> %317, %342
  %346 = fadd <4 x float> %213, %345
  %347 = fmul <4 x float> %325, %342
  %348 = fadd <4 x float> %214, %347
  %349 = fmul <4 x float> %342, %338
  %350 = fadd <4 x float> %215, %349
  %351 = add nuw nsw i64 %216, 1
  %352 = icmp eq i64 %351, 3
  br i1 %352, label %86, label %211

353:                                              ; preds = %49, %86
  %354 = phi <4 x float> [ %73, %49 ], [ %210, %86 ]
  %355 = load float*, float** %40, align 8
  %356 = getelementptr inbounds float, float* %355, i64 %43
  %357 = bitcast float* %356 to <4 x float>*
  store <4 x float> %354, <4 x float>* %357, align 16, !alias.scope !218
  %358 = add i64 %43, 4
  %359 = icmp ult i64 %358, %4
  br i1 %359, label %42, label %41
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN3jxl6N_SSE47Epf2RowERKNS_10FilterRowsERKNS_10LoopFilterERKNS_13FilterWeightsEmmmm(%"struct.jxl::FilterRows"* readonly dereferenceable(120), %"struct.jxl::LoopFilter"* nocapture readonly dereferenceable(144), %"struct.jxl::FilterWeights"* nocapture readnone dereferenceable(72), i64, i64, i64, i64) #2 {
  %8 = alloca [8 x float], align 16
  %9 = getelementptr inbounds %"struct.jxl::FilterRows", %"struct.jxl::FilterRows"* %0, i64 0, i32 3
  %10 = load float*, float** %9, align 8
  %11 = getelementptr inbounds %"struct.jxl::LoopFilter", %"struct.jxl::LoopFilter"* %1, i64 0, i32 24
  %12 = load float, float* %11, align 8
  %13 = getelementptr inbounds %"struct.jxl::LoopFilter", %"struct.jxl::LoopFilter"* %1, i64 0, i32 25
  %14 = load float, float* %13, align 4
  %15 = fmul float %12, %14
  %16 = bitcast [8 x float]* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %16) #14
  %17 = getelementptr inbounds [8 x float], [8 x float]* %8, i64 0, i64 0
  %18 = getelementptr inbounds [8 x float], [8 x float]* %8, i64 0, i64 1
  %19 = getelementptr inbounds [8 x float], [8 x float]* %8, i64 0, i64 5
  %20 = getelementptr inbounds [8 x float], [8 x float]* %8, i64 0, i64 6
  %21 = getelementptr inbounds [8 x float], [8 x float]* %8, i64 0, i64 7
  store float %15, float* %17, align 16
  %22 = insertelement <4 x float> undef, float %12, i32 0
  %23 = shufflevector <4 x float> %22, <4 x float> undef, <4 x i32> zeroinitializer
  %24 = bitcast float* %18 to <4 x float>*
  store <4 x float> %23, <4 x float>* %24, align 4
  store float %12, float* %19, align 4
  store float %12, float* %20, align 8
  store float %15, float* %21, align 4
  switch i64 %6, label %31 [
    i64 7, label %25
    i64 0, label %25
  ]

25:                                               ; preds = %7, %7
  %26 = getelementptr inbounds [8 x float], [8 x float]* %8, i64 0, i64 4
  %27 = insertelement <4 x float> undef, float %15, i32 0
  %28 = shufflevector <4 x float> %27, <4 x float> undef, <4 x i32> zeroinitializer
  %29 = bitcast [8 x float]* %8 to <4 x float>*
  store <4 x float> %28, <4 x float>* %29, align 16, !alias.scope !221
  %30 = bitcast float* %26 to <4 x float>*
  store <4 x float> %28, <4 x float>* %30, align 16, !alias.scope !221
  br label %31

31:                                               ; preds = %25, %7
  %32 = icmp ult i64 %3, %4
  br i1 %32, label %33, label %47

33:                                               ; preds = %31
  %34 = getelementptr inbounds %"struct.jxl::FilterRows", %"struct.jxl::FilterRows"* %0, i64 0, i32 0, i64 0
  %35 = getelementptr inbounds %"struct.jxl::FilterRows", %"struct.jxl::FilterRows"* %0, i64 0, i32 1, i64 3
  %36 = getelementptr inbounds %"struct.jxl::FilterRows", %"struct.jxl::FilterRows"* %0, i64 0, i32 0, i64 1
  %37 = getelementptr inbounds %"struct.jxl::FilterRows", %"struct.jxl::FilterRows"* %0, i64 0, i32 0, i64 2
  %38 = getelementptr inbounds %"struct.jxl::FilterRows", %"struct.jxl::FilterRows"* %0, i64 0, i32 1, i64 2
  %39 = getelementptr inbounds %"struct.jxl::LoopFilter", %"struct.jxl::LoopFilter"* %1, i64 0, i32 17, i64 0
  %40 = getelementptr inbounds %"struct.jxl::LoopFilter", %"struct.jxl::LoopFilter"* %1, i64 0, i32 17, i64 1
  %41 = getelementptr inbounds %"struct.jxl::LoopFilter", %"struct.jxl::LoopFilter"* %1, i64 0, i32 17, i64 2
  %42 = getelementptr inbounds %"struct.jxl::LoopFilter", %"struct.jxl::LoopFilter"* %1, i64 0, i32 19
  %43 = getelementptr inbounds %"struct.jxl::FilterRows", %"struct.jxl::FilterRows"* %0, i64 0, i32 1, i64 4
  %44 = getelementptr inbounds %"struct.jxl::FilterRows", %"struct.jxl::FilterRows"* %0, i64 0, i32 2, i64 0
  %45 = getelementptr inbounds %"struct.jxl::FilterRows", %"struct.jxl::FilterRows"* %0, i64 0, i32 2, i64 1
  %46 = getelementptr inbounds %"struct.jxl::FilterRows", %"struct.jxl::FilterRows"* %0, i64 0, i32 2, i64 2
  br label %48

47:                                               ; preds = %288, %31
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %16) #14
  ret void

48:                                               ; preds = %33, %288
  %49 = phi i64 [ %3, %33 ], [ %293, %288 ]
  %50 = add i64 %49, %5
  %51 = lshr i64 %50, 3
  %52 = getelementptr inbounds float, float* %10, i64 %51
  %53 = load float, float* %52, align 4
  %54 = fcmp olt float %53, 0xC00F3DF000000000
  br i1 %54, label %55, label %80

55:                                               ; preds = %48
  %56 = load float*, float** %34, align 8
  %57 = load i64, i64* %35, align 8
  %58 = getelementptr inbounds float, float* %56, i64 %49
  %59 = getelementptr inbounds float, float* %58, i64 %57
  %60 = bitcast float* %59 to <4 x float>*
  %61 = load <4 x float>, <4 x float>* %60, align 16, !alias.scope !224
  %62 = load float*, float** %44, align 8
  %63 = getelementptr inbounds float, float* %62, i64 %49
  %64 = bitcast float* %63 to <4 x float>*
  store <4 x float> %61, <4 x float>* %64, align 16, !alias.scope !227
  %65 = load float*, float** %36, align 8
  %66 = load i64, i64* %35, align 8
  %67 = getelementptr inbounds float, float* %65, i64 %49
  %68 = getelementptr inbounds float, float* %67, i64 %66
  %69 = bitcast float* %68 to <4 x float>*
  %70 = load <4 x float>, <4 x float>* %69, align 16, !alias.scope !224
  %71 = load float*, float** %45, align 8
  %72 = getelementptr inbounds float, float* %71, i64 %49
  %73 = bitcast float* %72 to <4 x float>*
  store <4 x float> %70, <4 x float>* %73, align 16, !alias.scope !227
  %74 = load float*, float** %37, align 8
  %75 = load i64, i64* %35, align 8
  %76 = getelementptr inbounds float, float* %74, i64 %49
  %77 = getelementptr inbounds float, float* %76, i64 %75
  %78 = bitcast float* %77 to <4 x float>*
  %79 = load <4 x float>, <4 x float>* %78, align 16, !alias.scope !224
  br label %288

80:                                               ; preds = %48
  %81 = and i64 %50, 7
  %82 = getelementptr inbounds [8 x float], [8 x float]* %8, i64 0, i64 %81
  %83 = bitcast float* %82 to <4 x float>*
  %84 = load <4 x float>, <4 x float>* %83, align 16, !alias.scope !230
  %85 = insertelement <4 x float> undef, float %53, i32 0
  %86 = shufflevector <4 x float> %85, <4 x float> undef, <4 x i32> zeroinitializer
  %87 = fmul <4 x float> %86, %84
  %88 = load float*, float** %34, align 8
  %89 = load i64, i64* %35, align 8
  %90 = getelementptr inbounds float, float* %88, i64 %89
  %91 = getelementptr inbounds float, float* %90, i64 %49
  %92 = bitcast float* %91 to <4 x float>*
  %93 = load <4 x float>, <4 x float>* %92, align 16, !alias.scope !233
  %94 = load float*, float** %36, align 8
  %95 = getelementptr inbounds float, float* %94, i64 %89
  %96 = getelementptr inbounds float, float* %95, i64 %49
  %97 = bitcast float* %96 to <4 x float>*
  %98 = load <4 x float>, <4 x float>* %97, align 16, !alias.scope !236
  %99 = load float*, float** %37, align 8
  %100 = getelementptr inbounds float, float* %99, i64 %89
  %101 = getelementptr inbounds float, float* %100, i64 %49
  %102 = bitcast float* %101 to <4 x float>*
  %103 = load <4 x float>, <4 x float>* %102, align 16, !alias.scope !239
  %104 = load i64, i64* %38, align 8, !noalias !242
  %105 = getelementptr inbounds float, float* %88, i64 %104
  %106 = getelementptr inbounds float, float* %105, i64 %49
  %107 = bitcast float* %106 to <4 x float>*
  %108 = load <4 x float>, <4 x float>* %107, align 16, !alias.scope !248, !noalias !242
  %109 = getelementptr inbounds float, float* %94, i64 %104
  %110 = getelementptr inbounds float, float* %109, i64 %49
  %111 = bitcast float* %110 to <4 x float>*
  %112 = load <4 x float>, <4 x float>* %111, align 16, !alias.scope !251, !noalias !242
  %113 = getelementptr inbounds float, float* %99, i64 %104
  %114 = getelementptr inbounds float, float* %113, i64 %49
  %115 = bitcast float* %114 to <4 x float>*
  %116 = load <4 x float>, <4 x float>* %115, align 16, !alias.scope !254, !noalias !242
  %117 = fsub <4 x float> %108, %93
  %118 = bitcast <4 x float> %117 to <4 x i32>
  %119 = and <4 x i32> %118, <i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647>
  %120 = bitcast <4 x i32> %119 to <4 x float>
  %121 = load float, float* %39, align 8, !noalias !242
  %122 = insertelement <4 x float> undef, float %121, i32 0
  %123 = shufflevector <4 x float> %122, <4 x float> undef, <4 x i32> zeroinitializer
  %124 = fmul <4 x float> %123, %120
  %125 = fsub <4 x float> %112, %98
  %126 = bitcast <4 x float> %125 to <4 x i32>
  %127 = and <4 x i32> %126, <i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647>
  %128 = bitcast <4 x i32> %127 to <4 x float>
  %129 = load float, float* %40, align 4, !noalias !242
  %130 = insertelement <4 x float> undef, float %129, i32 0
  %131 = shufflevector <4 x float> %130, <4 x float> undef, <4 x i32> zeroinitializer
  %132 = fmul <4 x float> %131, %128
  %133 = fadd <4 x float> %124, %132
  %134 = fsub <4 x float> %116, %103
  %135 = bitcast <4 x float> %134 to <4 x i32>
  %136 = and <4 x i32> %135, <i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647>
  %137 = bitcast <4 x i32> %136 to <4 x float>
  %138 = load float, float* %41, align 8, !noalias !242
  %139 = insertelement <4 x float> undef, float %138, i32 0
  %140 = shufflevector <4 x float> %139, <4 x float> undef, <4 x i32> zeroinitializer
  %141 = fmul <4 x float> %140, %137
  %142 = fadd <4 x float> %141, %133
  %143 = load float, float* %42, align 8, !noalias !242
  %144 = insertelement <4 x float> undef, float %143, i32 0
  %145 = shufflevector <4 x float> %144, <4 x float> undef, <4 x i32> zeroinitializer
  %146 = fmul <4 x float> %87, %142
  %147 = fadd <4 x float> %146, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %148 = fmul <4 x float> %147, %147
  %149 = fcmp ugt <4 x float> %147, %145
  %150 = select <4 x i1> %149, <4 x float> %148, <4 x float> zeroinitializer
  %151 = fadd <4 x float> %150, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %152 = fmul <4 x float> %108, %150
  %153 = fadd <4 x float> %93, %152
  %154 = fmul <4 x float> %112, %150
  %155 = fadd <4 x float> %98, %154
  %156 = fmul <4 x float> %116, %150
  %157 = fadd <4 x float> %103, %156
  %158 = add i64 %49, -1
  %159 = getelementptr inbounds float, float* %90, i64 %158
  %160 = bitcast float* %159 to <4 x float>*
  %161 = load <4 x float>, <4 x float>* %160, align 1, !alias.scope !257, !noalias !260
  %162 = getelementptr inbounds float, float* %95, i64 %158
  %163 = bitcast float* %162 to <4 x float>*
  %164 = load <4 x float>, <4 x float>* %163, align 1, !alias.scope !266, !noalias !260
  %165 = getelementptr inbounds float, float* %100, i64 %158
  %166 = bitcast float* %165 to <4 x float>*
  %167 = load <4 x float>, <4 x float>* %166, align 1, !alias.scope !269, !noalias !260
  %168 = fsub <4 x float> %161, %93
  %169 = bitcast <4 x float> %168 to <4 x i32>
  %170 = and <4 x i32> %169, <i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647>
  %171 = bitcast <4 x i32> %170 to <4 x float>
  %172 = fmul <4 x float> %123, %171
  %173 = fsub <4 x float> %164, %98
  %174 = bitcast <4 x float> %173 to <4 x i32>
  %175 = and <4 x i32> %174, <i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647>
  %176 = bitcast <4 x i32> %175 to <4 x float>
  %177 = fmul <4 x float> %131, %176
  %178 = fadd <4 x float> %172, %177
  %179 = fsub <4 x float> %167, %103
  %180 = bitcast <4 x float> %179 to <4 x i32>
  %181 = and <4 x i32> %180, <i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647>
  %182 = bitcast <4 x i32> %181 to <4 x float>
  %183 = fmul <4 x float> %140, %182
  %184 = fadd <4 x float> %183, %178
  %185 = fmul <4 x float> %87, %184
  %186 = fadd <4 x float> %185, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %187 = fmul <4 x float> %186, %186
  %188 = fcmp ugt <4 x float> %186, %145
  %189 = select <4 x i1> %188, <4 x float> %187, <4 x float> zeroinitializer
  %190 = fadd <4 x float> %151, %189
  %191 = fmul <4 x float> %161, %189
  %192 = fadd <4 x float> %153, %191
  %193 = fmul <4 x float> %164, %189
  %194 = fadd <4 x float> %155, %193
  %195 = fmul <4 x float> %167, %189
  %196 = fadd <4 x float> %157, %195
  %197 = add nuw i64 %49, 1
  %198 = getelementptr inbounds float, float* %90, i64 %197
  %199 = bitcast float* %198 to <4 x float>*
  %200 = load <4 x float>, <4 x float>* %199, align 1, !alias.scope !272, !noalias !275
  %201 = getelementptr inbounds float, float* %95, i64 %197
  %202 = bitcast float* %201 to <4 x float>*
  %203 = load <4 x float>, <4 x float>* %202, align 1, !alias.scope !281, !noalias !275
  %204 = getelementptr inbounds float, float* %100, i64 %197
  %205 = bitcast float* %204 to <4 x float>*
  %206 = load <4 x float>, <4 x float>* %205, align 1, !alias.scope !284, !noalias !275
  %207 = fsub <4 x float> %200, %93
  %208 = bitcast <4 x float> %207 to <4 x i32>
  %209 = and <4 x i32> %208, <i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647>
  %210 = bitcast <4 x i32> %209 to <4 x float>
  %211 = fmul <4 x float> %123, %210
  %212 = fsub <4 x float> %203, %98
  %213 = bitcast <4 x float> %212 to <4 x i32>
  %214 = and <4 x i32> %213, <i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647>
  %215 = bitcast <4 x i32> %214 to <4 x float>
  %216 = fmul <4 x float> %131, %215
  %217 = fadd <4 x float> %211, %216
  %218 = fsub <4 x float> %206, %103
  %219 = bitcast <4 x float> %218 to <4 x i32>
  %220 = and <4 x i32> %219, <i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647>
  %221 = bitcast <4 x i32> %220 to <4 x float>
  %222 = fmul <4 x float> %140, %221
  %223 = fadd <4 x float> %222, %217
  %224 = fmul <4 x float> %87, %223
  %225 = fadd <4 x float> %224, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %226 = fmul <4 x float> %225, %225
  %227 = fcmp ugt <4 x float> %225, %145
  %228 = select <4 x i1> %227, <4 x float> %226, <4 x float> zeroinitializer
  %229 = fadd <4 x float> %190, %228
  %230 = fmul <4 x float> %200, %228
  %231 = fadd <4 x float> %192, %230
  %232 = fmul <4 x float> %203, %228
  %233 = fadd <4 x float> %194, %232
  %234 = fmul <4 x float> %206, %228
  %235 = fadd <4 x float> %196, %234
  %236 = load i64, i64* %43, align 8, !noalias !287
  %237 = getelementptr inbounds float, float* %88, i64 %236
  %238 = getelementptr inbounds float, float* %237, i64 %49
  %239 = bitcast float* %238 to <4 x float>*
  %240 = load <4 x float>, <4 x float>* %239, align 16, !alias.scope !293, !noalias !287
  %241 = getelementptr inbounds float, float* %94, i64 %236
  %242 = getelementptr inbounds float, float* %241, i64 %49
  %243 = bitcast float* %242 to <4 x float>*
  %244 = load <4 x float>, <4 x float>* %243, align 16, !alias.scope !296, !noalias !287
  %245 = getelementptr inbounds float, float* %99, i64 %236
  %246 = getelementptr inbounds float, float* %245, i64 %49
  %247 = bitcast float* %246 to <4 x float>*
  %248 = load <4 x float>, <4 x float>* %247, align 16, !alias.scope !299, !noalias !287
  %249 = fsub <4 x float> %240, %93
  %250 = bitcast <4 x float> %249 to <4 x i32>
  %251 = and <4 x i32> %250, <i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647>
  %252 = bitcast <4 x i32> %251 to <4 x float>
  %253 = fmul <4 x float> %123, %252
  %254 = fsub <4 x float> %244, %98
  %255 = bitcast <4 x float> %254 to <4 x i32>
  %256 = and <4 x i32> %255, <i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647>
  %257 = bitcast <4 x i32> %256 to <4 x float>
  %258 = fmul <4 x float> %131, %257
  %259 = fadd <4 x float> %253, %258
  %260 = fsub <4 x float> %248, %103
  %261 = bitcast <4 x float> %260 to <4 x i32>
  %262 = and <4 x i32> %261, <i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647>
  %263 = bitcast <4 x i32> %262 to <4 x float>
  %264 = fmul <4 x float> %140, %263
  %265 = fadd <4 x float> %264, %259
  %266 = fmul <4 x float> %87, %265
  %267 = fadd <4 x float> %266, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %268 = fmul <4 x float> %267, %267
  %269 = fcmp ugt <4 x float> %267, %145
  %270 = select <4 x i1> %269, <4 x float> %268, <4 x float> zeroinitializer
  %271 = fadd <4 x float> %229, %270
  %272 = fmul <4 x float> %240, %270
  %273 = fadd <4 x float> %231, %272
  %274 = fmul <4 x float> %244, %270
  %275 = fadd <4 x float> %233, %274
  %276 = fmul <4 x float> %248, %270
  %277 = fadd <4 x float> %235, %276
  %278 = fdiv <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %271
  %279 = fmul <4 x float> %273, %278
  %280 = load float*, float** %44, align 8
  %281 = getelementptr inbounds float, float* %280, i64 %49
  %282 = bitcast float* %281 to <4 x float>*
  store <4 x float> %279, <4 x float>* %282, align 16, !alias.scope !302
  %283 = fmul <4 x float> %275, %278
  %284 = load float*, float** %45, align 8
  %285 = getelementptr inbounds float, float* %284, i64 %49
  %286 = bitcast float* %285 to <4 x float>*
  store <4 x float> %283, <4 x float>* %286, align 16, !alias.scope !305
  %287 = fmul <4 x float> %277, %278
  br label %288

288:                                              ; preds = %55, %80
  %289 = phi <4 x float> [ %79, %55 ], [ %287, %80 ]
  %290 = load float*, float** %46, align 8
  %291 = getelementptr inbounds float, float* %290, i64 %49
  %292 = bitcast float* %291 to <4 x float>*
  store <4 x float> %289, <4 x float>* %292, align 16, !alias.scope !308
  %293 = add i64 %49, 4
  %294 = icmp ult i64 %293, %4
  br i1 %294, label %48, label %47
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN3jxl6N_SSE418FilterPipelineInitEPNS_14FilterPipelineERKNS_10LoopFilterERKNS_6Image3IfEERKNS_4RectESC_mPS7_SC_(%"class.jxl::FilterPipeline"*, %"struct.jxl::LoopFilter"* nocapture readonly dereferenceable(144), %"class.jxl::Image3"* dereferenceable(96), %"class.jxl::Rect"* nocapture readonly dereferenceable(32), %"class.jxl::Rect"* nocapture readonly dereferenceable(32), i64, %"class.jxl::Image3"*, %"class.jxl::Rect"* nocapture readonly dereferenceable(32)) #3 {
  %9 = getelementptr inbounds %"struct.jxl::LoopFilter", %"struct.jxl::LoopFilter"* %1, i64 0, i32 11
  %10 = load i32, i32* %9, align 4
  %11 = icmp ne i32 %10, 0
  %12 = getelementptr inbounds %"class.jxl::FilterPipeline", %"class.jxl::FilterPipeline"* %0, i64 0, i32 4
  %13 = zext i1 %11 to i8
  store i8 %13, i8* %12, align 8
  %14 = getelementptr inbounds %"class.jxl::FilterPipeline", %"class.jxl::FilterPipeline"* %0, i64 0, i32 3
  store i64 0, i64* %14, align 8
  %15 = getelementptr inbounds %"class.jxl::FilterPipeline", %"class.jxl::FilterPipeline"* %0, i64 0, i32 1
  store i64 0, i64* %15, align 8
  %16 = getelementptr inbounds %"class.jxl::FilterPipeline", %"class.jxl::FilterPipeline"* %0, i64 0, i32 2, i64 0, i32 0
  store %"class.jxl::Image3"* %2, %"class.jxl::Image3"** %16, align 8
  %17 = getelementptr inbounds %"class.jxl::FilterPipeline", %"class.jxl::FilterPipeline"* %0, i64 0, i32 2, i64 0, i32 4
  %18 = bitcast %"class.jxl::Rect"* %17 to i8*
  %19 = bitcast %"class.jxl::Rect"* %3 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %18, i8* align 8 %19, i64 32, i1 false) #14
  %20 = getelementptr inbounds %"class.jxl::FilterPipeline", %"class.jxl::FilterPipeline"* %0, i64 0, i32 2, i64 0, i32 6
  %21 = bitcast %"class.jxl::Rect"* %20 to i8*
  %22 = bitcast %"class.jxl::Rect"* %4 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %21, i8* align 8 %22, i64 32, i1 false) #14
  %23 = getelementptr inbounds %"class.jxl::FilterPipeline", %"class.jxl::FilterPipeline"* %0, i64 0, i32 2, i64 0, i32 7
  store i64 %5, i64* %23, align 8
  %24 = getelementptr inbounds %"class.jxl::FilterPipeline", %"class.jxl::FilterPipeline"* %0, i64 0, i32 2, i64 0, i32 8
  store void (%"struct.jxl::FilterPipeline::FilterStep"*, %"struct.jxl::FilterRows"*, i64)* @_ZZN3jxl14FilterPipeline10FilterStep8SetInputEPKNS_6Image3IfEERKNS_4RectES8_mENUlRKS1_PNS_10FilterRowsElE_8__invokeESA_SC_l, void (%"struct.jxl::FilterPipeline::FilterStep"*, %"struct.jxl::FilterRows"*, i64)** %24, align 8
  %25 = getelementptr inbounds %"struct.jxl::LoopFilter", %"struct.jxl::LoopFilter"* %1, i64 0, i32 2
  %26 = load i8, i8* %25, align 1, !range !311
  %27 = icmp eq i8 %26, 0
  br i1 %27, label %31, label %28

28:                                               ; preds = %8
  %29 = getelementptr inbounds %"class.jxl::FilterPipeline", %"class.jxl::FilterPipeline"* %0, i64 0, i32 2, i64 0, i32 10
  %30 = bitcast %"struct.jxl::FilterDefinition"* %29 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %30, i8* align 8 bitcast (%"struct.jxl::FilterDefinition"* @_ZN3jxl6N_SSE4L15kGaborishFilterE to i8*), i64 16, i1 false) #14
  store i64 1, i64* %14, align 8
  br label %31

31:                                               ; preds = %8, %28
  %32 = phi i64 [ 0, %8 ], [ 1, %28 ]
  %33 = load i32, i32* %9, align 4
  switch i32 %33, label %162 [
    i32 1, label %34
    i32 2, label %54
    i32 3, label %96
  ]

34:                                               ; preds = %31
  %35 = getelementptr inbounds %"class.jxl::FilterPipeline", %"class.jxl::FilterPipeline"* %0, i64 0, i32 2, i64 %32, i32 10
  %36 = bitcast %"struct.jxl::FilterDefinition"* %35 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %36, i8* align 8 bitcast (%"struct.jxl::FilterDefinition"* @_ZN3jxl6N_SSE4L11kEpf1FilterE to i8*), i64 16, i1 false) #14
  %37 = load i64, i64* %14, align 8
  %38 = icmp eq i64 %37, 0
  br i1 %38, label %160, label %39

39:                                               ; preds = %34
  %40 = add i64 %37, -1
  %41 = getelementptr inbounds %"class.jxl::FilterPipeline", %"class.jxl::FilterPipeline"* %0, i64 0, i32 0
  %42 = getelementptr inbounds %"class.jxl::FilterPipeline", %"class.jxl::FilterPipeline"* %0, i64 0, i32 2, i64 %40, i32 2
  store %"class.jxl::Image3"* %41, %"class.jxl::Image3"** %42, align 8
  %43 = getelementptr inbounds %"class.jxl::FilterPipeline", %"class.jxl::FilterPipeline"* %0, i64 0, i32 2, i64 %40, i32 3
  store i64 0, i64* %43, align 8
  %44 = getelementptr inbounds %"class.jxl::FilterPipeline", %"class.jxl::FilterPipeline"* %0, i64 0, i32 2, i64 %40, i32 9
  store void (%"struct.jxl::FilterPipeline::FilterStep"*, %"struct.jxl::FilterRows"*, i64)* @_ZZN3jxl14FilterPipeline10FilterStep22SetOutputCyclicStorageILm5EEEvPNS_6Image3IfEEmENUlRKS1_PNS_10FilterRowsElE_8__invokeES7_S9_l, void (%"struct.jxl::FilterPipeline::FilterStep"*, %"struct.jxl::FilterRows"*, i64)** %44, align 8
  %45 = load i64, i64* %14, align 8
  %46 = load i64, i64* %15, align 8
  %47 = getelementptr inbounds %"class.jxl::FilterPipeline", %"class.jxl::FilterPipeline"* %0, i64 0, i32 2, i64 %45, i32 0
  store %"class.jxl::Image3"* %41, %"class.jxl::Image3"** %47, align 8
  %48 = getelementptr inbounds %"class.jxl::FilterPipeline", %"class.jxl::FilterPipeline"* %0, i64 0, i32 2, i64 %45, i32 1
  store i64 %46, i64* %48, align 8
  %49 = getelementptr inbounds %"class.jxl::FilterPipeline", %"class.jxl::FilterPipeline"* %0, i64 0, i32 2, i64 %45, i32 8
  store void (%"struct.jxl::FilterPipeline::FilterStep"*, %"struct.jxl::FilterRows"*, i64)* @_ZZN3jxl14FilterPipeline10FilterStep21SetInputCyclicStorageILm5EEEvPKNS_6Image3IfEEmENUlRKS1_PNS_10FilterRowsElE_8__invokeES8_SA_l, void (%"struct.jxl::FilterPipeline::FilterStep"*, %"struct.jxl::FilterRows"*, i64)** %49, align 8
  %50 = load i64, i64* %15, align 8
  %51 = add i64 %50, 5
  store i64 %51, i64* %15, align 8
  %52 = load i64, i64* %14, align 8
  %53 = add i64 %52, 1
  br label %160

54:                                               ; preds = %31
  %55 = getelementptr inbounds %"class.jxl::FilterPipeline", %"class.jxl::FilterPipeline"* %0, i64 0, i32 2, i64 %32, i32 10
  %56 = bitcast %"struct.jxl::FilterDefinition"* %55 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %56, i8* align 8 bitcast (%"struct.jxl::FilterDefinition"* @_ZN3jxl6N_SSE4L11kEpf1FilterE to i8*), i64 16, i1 false) #14
  %57 = load i64, i64* %14, align 8
  %58 = icmp eq i64 %57, 0
  br i1 %58, label %74, label %59

59:                                               ; preds = %54
  %60 = add i64 %57, -1
  %61 = getelementptr inbounds %"class.jxl::FilterPipeline", %"class.jxl::FilterPipeline"* %0, i64 0, i32 0
  %62 = getelementptr inbounds %"class.jxl::FilterPipeline", %"class.jxl::FilterPipeline"* %0, i64 0, i32 2, i64 %60, i32 2
  store %"class.jxl::Image3"* %61, %"class.jxl::Image3"** %62, align 8
  %63 = getelementptr inbounds %"class.jxl::FilterPipeline", %"class.jxl::FilterPipeline"* %0, i64 0, i32 2, i64 %60, i32 3
  store i64 0, i64* %63, align 8
  %64 = getelementptr inbounds %"class.jxl::FilterPipeline", %"class.jxl::FilterPipeline"* %0, i64 0, i32 2, i64 %60, i32 9
  store void (%"struct.jxl::FilterPipeline::FilterStep"*, %"struct.jxl::FilterRows"*, i64)* @_ZZN3jxl14FilterPipeline10FilterStep22SetOutputCyclicStorageILm5EEEvPNS_6Image3IfEEmENUlRKS1_PNS_10FilterRowsElE_8__invokeES7_S9_l, void (%"struct.jxl::FilterPipeline::FilterStep"*, %"struct.jxl::FilterRows"*, i64)** %64, align 8
  %65 = load i64, i64* %14, align 8
  %66 = load i64, i64* %15, align 8
  %67 = getelementptr inbounds %"class.jxl::FilterPipeline", %"class.jxl::FilterPipeline"* %0, i64 0, i32 2, i64 %65, i32 0
  store %"class.jxl::Image3"* %61, %"class.jxl::Image3"** %67, align 8
  %68 = getelementptr inbounds %"class.jxl::FilterPipeline", %"class.jxl::FilterPipeline"* %0, i64 0, i32 2, i64 %65, i32 1
  store i64 %66, i64* %68, align 8
  %69 = getelementptr inbounds %"class.jxl::FilterPipeline", %"class.jxl::FilterPipeline"* %0, i64 0, i32 2, i64 %65, i32 8
  store void (%"struct.jxl::FilterPipeline::FilterStep"*, %"struct.jxl::FilterRows"*, i64)* @_ZZN3jxl14FilterPipeline10FilterStep21SetInputCyclicStorageILm5EEEvPKNS_6Image3IfEEmENUlRKS1_PNS_10FilterRowsElE_8__invokeES8_SA_l, void (%"struct.jxl::FilterPipeline::FilterStep"*, %"struct.jxl::FilterRows"*, i64)** %69, align 8
  %70 = load i64, i64* %15, align 8
  %71 = add i64 %70, 5
  store i64 %71, i64* %15, align 8
  %72 = load i64, i64* %14, align 8
  %73 = add i64 %72, 1
  br label %74

74:                                               ; preds = %54, %59
  %75 = phi i64 [ 1, %54 ], [ %73, %59 ]
  store i64 %75, i64* %14, align 8
  %76 = getelementptr inbounds %"class.jxl::FilterPipeline", %"class.jxl::FilterPipeline"* %0, i64 0, i32 2, i64 %75, i32 10
  %77 = bitcast %"struct.jxl::FilterDefinition"* %76 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %77, i8* align 8 bitcast (%"struct.jxl::FilterDefinition"* @_ZN3jxl6N_SSE4L11kEpf2FilterE to i8*), i64 16, i1 false) #14
  %78 = load i64, i64* %14, align 8
  %79 = icmp eq i64 %78, 0
  br i1 %79, label %160, label %80

80:                                               ; preds = %74
  %81 = add i64 %78, -1
  %82 = getelementptr inbounds %"class.jxl::FilterPipeline", %"class.jxl::FilterPipeline"* %0, i64 0, i32 0
  %83 = load i64, i64* %15, align 8
  %84 = getelementptr inbounds %"class.jxl::FilterPipeline", %"class.jxl::FilterPipeline"* %0, i64 0, i32 2, i64 %81, i32 2
  store %"class.jxl::Image3"* %82, %"class.jxl::Image3"** %84, align 8
  %85 = getelementptr inbounds %"class.jxl::FilterPipeline", %"class.jxl::FilterPipeline"* %0, i64 0, i32 2, i64 %81, i32 3
  store i64 %83, i64* %85, align 8
  %86 = getelementptr inbounds %"class.jxl::FilterPipeline", %"class.jxl::FilterPipeline"* %0, i64 0, i32 2, i64 %81, i32 9
  store void (%"struct.jxl::FilterPipeline::FilterStep"*, %"struct.jxl::FilterRows"*, i64)* @_ZZN3jxl14FilterPipeline10FilterStep22SetOutputCyclicStorageILm3EEEvPNS_6Image3IfEEmENUlRKS1_PNS_10FilterRowsElE_8__invokeES7_S9_l, void (%"struct.jxl::FilterPipeline::FilterStep"*, %"struct.jxl::FilterRows"*, i64)** %86, align 8
  %87 = load i64, i64* %14, align 8
  %88 = load i64, i64* %15, align 8
  %89 = getelementptr inbounds %"class.jxl::FilterPipeline", %"class.jxl::FilterPipeline"* %0, i64 0, i32 2, i64 %87, i32 0
  store %"class.jxl::Image3"* %82, %"class.jxl::Image3"** %89, align 8
  %90 = getelementptr inbounds %"class.jxl::FilterPipeline", %"class.jxl::FilterPipeline"* %0, i64 0, i32 2, i64 %87, i32 1
  store i64 %88, i64* %90, align 8
  %91 = getelementptr inbounds %"class.jxl::FilterPipeline", %"class.jxl::FilterPipeline"* %0, i64 0, i32 2, i64 %87, i32 8
  store void (%"struct.jxl::FilterPipeline::FilterStep"*, %"struct.jxl::FilterRows"*, i64)* @_ZZN3jxl14FilterPipeline10FilterStep21SetInputCyclicStorageILm3EEEvPKNS_6Image3IfEEmENUlRKS1_PNS_10FilterRowsElE_8__invokeES8_SA_l, void (%"struct.jxl::FilterPipeline::FilterStep"*, %"struct.jxl::FilterRows"*, i64)** %91, align 8
  %92 = load i64, i64* %15, align 8
  %93 = add i64 %92, 3
  store i64 %93, i64* %15, align 8
  %94 = load i64, i64* %14, align 8
  %95 = add i64 %94, 1
  br label %160

96:                                               ; preds = %31
  %97 = getelementptr inbounds %"class.jxl::FilterPipeline", %"class.jxl::FilterPipeline"* %0, i64 0, i32 2, i64 %32, i32 10
  %98 = bitcast %"struct.jxl::FilterDefinition"* %97 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %98, i8* align 8 bitcast (%"struct.jxl::FilterDefinition"* @_ZN3jxl6N_SSE4L11kEpf0FilterE to i8*), i64 16, i1 false) #14
  %99 = load i64, i64* %14, align 8
  %100 = icmp eq i64 %99, 0
  br i1 %100, label %116, label %101

101:                                              ; preds = %96
  %102 = add i64 %99, -1
  %103 = getelementptr inbounds %"class.jxl::FilterPipeline", %"class.jxl::FilterPipeline"* %0, i64 0, i32 0
  %104 = getelementptr inbounds %"class.jxl::FilterPipeline", %"class.jxl::FilterPipeline"* %0, i64 0, i32 2, i64 %102, i32 2
  store %"class.jxl::Image3"* %103, %"class.jxl::Image3"** %104, align 8
  %105 = getelementptr inbounds %"class.jxl::FilterPipeline", %"class.jxl::FilterPipeline"* %0, i64 0, i32 2, i64 %102, i32 3
  store i64 0, i64* %105, align 8
  %106 = getelementptr inbounds %"class.jxl::FilterPipeline", %"class.jxl::FilterPipeline"* %0, i64 0, i32 2, i64 %102, i32 9
  store void (%"struct.jxl::FilterPipeline::FilterStep"*, %"struct.jxl::FilterRows"*, i64)* @_ZZN3jxl14FilterPipeline10FilterStep22SetOutputCyclicStorageILm7EEEvPNS_6Image3IfEEmENUlRKS1_PNS_10FilterRowsElE_8__invokeES7_S9_l, void (%"struct.jxl::FilterPipeline::FilterStep"*, %"struct.jxl::FilterRows"*, i64)** %106, align 8
  %107 = load i64, i64* %14, align 8
  %108 = load i64, i64* %15, align 8
  %109 = getelementptr inbounds %"class.jxl::FilterPipeline", %"class.jxl::FilterPipeline"* %0, i64 0, i32 2, i64 %107, i32 0
  store %"class.jxl::Image3"* %103, %"class.jxl::Image3"** %109, align 8
  %110 = getelementptr inbounds %"class.jxl::FilterPipeline", %"class.jxl::FilterPipeline"* %0, i64 0, i32 2, i64 %107, i32 1
  store i64 %108, i64* %110, align 8
  %111 = getelementptr inbounds %"class.jxl::FilterPipeline", %"class.jxl::FilterPipeline"* %0, i64 0, i32 2, i64 %107, i32 8
  store void (%"struct.jxl::FilterPipeline::FilterStep"*, %"struct.jxl::FilterRows"*, i64)* @_ZZN3jxl14FilterPipeline10FilterStep21SetInputCyclicStorageILm7EEEvPKNS_6Image3IfEEmENUlRKS1_PNS_10FilterRowsElE_8__invokeES8_SA_l, void (%"struct.jxl::FilterPipeline::FilterStep"*, %"struct.jxl::FilterRows"*, i64)** %111, align 8
  %112 = load i64, i64* %15, align 8
  %113 = add i64 %112, 7
  store i64 %113, i64* %15, align 8
  %114 = load i64, i64* %14, align 8
  %115 = add i64 %114, 1
  br label %116

116:                                              ; preds = %96, %101
  %117 = phi i64 [ 1, %96 ], [ %115, %101 ]
  store i64 %117, i64* %14, align 8
  %118 = getelementptr inbounds %"class.jxl::FilterPipeline", %"class.jxl::FilterPipeline"* %0, i64 0, i32 2, i64 %117, i32 10
  %119 = bitcast %"struct.jxl::FilterDefinition"* %118 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %119, i8* align 8 bitcast (%"struct.jxl::FilterDefinition"* @_ZN3jxl6N_SSE4L11kEpf1FilterE to i8*), i64 16, i1 false) #14
  %120 = load i64, i64* %14, align 8
  %121 = icmp eq i64 %120, 0
  br i1 %121, label %138, label %122

122:                                              ; preds = %116
  %123 = add i64 %120, -1
  %124 = getelementptr inbounds %"class.jxl::FilterPipeline", %"class.jxl::FilterPipeline"* %0, i64 0, i32 0
  %125 = load i64, i64* %15, align 8
  %126 = getelementptr inbounds %"class.jxl::FilterPipeline", %"class.jxl::FilterPipeline"* %0, i64 0, i32 2, i64 %123, i32 2
  store %"class.jxl::Image3"* %124, %"class.jxl::Image3"** %126, align 8
  %127 = getelementptr inbounds %"class.jxl::FilterPipeline", %"class.jxl::FilterPipeline"* %0, i64 0, i32 2, i64 %123, i32 3
  store i64 %125, i64* %127, align 8
  %128 = getelementptr inbounds %"class.jxl::FilterPipeline", %"class.jxl::FilterPipeline"* %0, i64 0, i32 2, i64 %123, i32 9
  store void (%"struct.jxl::FilterPipeline::FilterStep"*, %"struct.jxl::FilterRows"*, i64)* @_ZZN3jxl14FilterPipeline10FilterStep22SetOutputCyclicStorageILm5EEEvPNS_6Image3IfEEmENUlRKS1_PNS_10FilterRowsElE_8__invokeES7_S9_l, void (%"struct.jxl::FilterPipeline::FilterStep"*, %"struct.jxl::FilterRows"*, i64)** %128, align 8
  %129 = load i64, i64* %14, align 8
  %130 = load i64, i64* %15, align 8
  %131 = getelementptr inbounds %"class.jxl::FilterPipeline", %"class.jxl::FilterPipeline"* %0, i64 0, i32 2, i64 %129, i32 0
  store %"class.jxl::Image3"* %124, %"class.jxl::Image3"** %131, align 8
  %132 = getelementptr inbounds %"class.jxl::FilterPipeline", %"class.jxl::FilterPipeline"* %0, i64 0, i32 2, i64 %129, i32 1
  store i64 %130, i64* %132, align 8
  %133 = getelementptr inbounds %"class.jxl::FilterPipeline", %"class.jxl::FilterPipeline"* %0, i64 0, i32 2, i64 %129, i32 8
  store void (%"struct.jxl::FilterPipeline::FilterStep"*, %"struct.jxl::FilterRows"*, i64)* @_ZZN3jxl14FilterPipeline10FilterStep21SetInputCyclicStorageILm5EEEvPKNS_6Image3IfEEmENUlRKS1_PNS_10FilterRowsElE_8__invokeES8_SA_l, void (%"struct.jxl::FilterPipeline::FilterStep"*, %"struct.jxl::FilterRows"*, i64)** %133, align 8
  %134 = load i64, i64* %15, align 8
  %135 = add i64 %134, 5
  store i64 %135, i64* %15, align 8
  %136 = load i64, i64* %14, align 8
  %137 = add i64 %136, 1
  br label %138

138:                                              ; preds = %116, %122
  %139 = phi i64 [ 1, %116 ], [ %137, %122 ]
  store i64 %139, i64* %14, align 8
  %140 = getelementptr inbounds %"class.jxl::FilterPipeline", %"class.jxl::FilterPipeline"* %0, i64 0, i32 2, i64 %139, i32 10
  %141 = bitcast %"struct.jxl::FilterDefinition"* %140 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %141, i8* align 8 bitcast (%"struct.jxl::FilterDefinition"* @_ZN3jxl6N_SSE4L11kEpf2FilterE to i8*), i64 16, i1 false) #14
  %142 = load i64, i64* %14, align 8
  %143 = icmp eq i64 %142, 0
  br i1 %143, label %160, label %144

144:                                              ; preds = %138
  %145 = add i64 %142, -1
  %146 = getelementptr inbounds %"class.jxl::FilterPipeline", %"class.jxl::FilterPipeline"* %0, i64 0, i32 0
  %147 = load i64, i64* %15, align 8
  %148 = getelementptr inbounds %"class.jxl::FilterPipeline", %"class.jxl::FilterPipeline"* %0, i64 0, i32 2, i64 %145, i32 2
  store %"class.jxl::Image3"* %146, %"class.jxl::Image3"** %148, align 8
  %149 = getelementptr inbounds %"class.jxl::FilterPipeline", %"class.jxl::FilterPipeline"* %0, i64 0, i32 2, i64 %145, i32 3
  store i64 %147, i64* %149, align 8
  %150 = getelementptr inbounds %"class.jxl::FilterPipeline", %"class.jxl::FilterPipeline"* %0, i64 0, i32 2, i64 %145, i32 9
  store void (%"struct.jxl::FilterPipeline::FilterStep"*, %"struct.jxl::FilterRows"*, i64)* @_ZZN3jxl14FilterPipeline10FilterStep22SetOutputCyclicStorageILm3EEEvPNS_6Image3IfEEmENUlRKS1_PNS_10FilterRowsElE_8__invokeES7_S9_l, void (%"struct.jxl::FilterPipeline::FilterStep"*, %"struct.jxl::FilterRows"*, i64)** %150, align 8
  %151 = load i64, i64* %14, align 8
  %152 = load i64, i64* %15, align 8
  %153 = getelementptr inbounds %"class.jxl::FilterPipeline", %"class.jxl::FilterPipeline"* %0, i64 0, i32 2, i64 %151, i32 0
  store %"class.jxl::Image3"* %146, %"class.jxl::Image3"** %153, align 8
  %154 = getelementptr inbounds %"class.jxl::FilterPipeline", %"class.jxl::FilterPipeline"* %0, i64 0, i32 2, i64 %151, i32 1
  store i64 %152, i64* %154, align 8
  %155 = getelementptr inbounds %"class.jxl::FilterPipeline", %"class.jxl::FilterPipeline"* %0, i64 0, i32 2, i64 %151, i32 8
  store void (%"struct.jxl::FilterPipeline::FilterStep"*, %"struct.jxl::FilterRows"*, i64)* @_ZZN3jxl14FilterPipeline10FilterStep21SetInputCyclicStorageILm3EEEvPKNS_6Image3IfEEmENUlRKS1_PNS_10FilterRowsElE_8__invokeES8_SA_l, void (%"struct.jxl::FilterPipeline::FilterStep"*, %"struct.jxl::FilterRows"*, i64)** %155, align 8
  %156 = load i64, i64* %15, align 8
  %157 = add i64 %156, 3
  store i64 %157, i64* %15, align 8
  %158 = load i64, i64* %14, align 8
  %159 = add i64 %158, 1
  br label %160

160:                                              ; preds = %144, %138, %80, %74, %39, %34
  %161 = phi i64 [ 1, %34 ], [ %53, %39 ], [ 1, %74 ], [ %95, %80 ], [ 1, %138 ], [ %159, %144 ]
  store i64 %161, i64* %14, align 8
  br label %162

162:                                              ; preds = %160, %31
  %163 = phi i64 [ %32, %31 ], [ %161, %160 ]
  %164 = add i64 %163, -1
  %165 = getelementptr inbounds %"class.jxl::FilterPipeline", %"class.jxl::FilterPipeline"* %0, i64 0, i32 2, i64 %164, i32 2
  store %"class.jxl::Image3"* %6, %"class.jxl::Image3"** %165, align 8
  %166 = getelementptr inbounds %"class.jxl::FilterPipeline", %"class.jxl::FilterPipeline"* %0, i64 0, i32 2, i64 %164, i32 5
  %167 = bitcast %"class.jxl::Rect"* %166 to i8*
  %168 = bitcast %"class.jxl::Rect"* %7 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %167, i8* align 8 %168, i64 32, i1 false) #14
  %169 = getelementptr inbounds %"class.jxl::FilterPipeline", %"class.jxl::FilterPipeline"* %0, i64 0, i32 2, i64 %164, i32 9
  store void (%"struct.jxl::FilterPipeline::FilterStep"*, %"struct.jxl::FilterRows"*, i64)* @_ZZN3jxl14FilterPipeline10FilterStep9SetOutputEPNS_6Image3IfEERKNS_4RectEENUlRKS1_PNS_10FilterRowsElE_8__invokeES9_SB_l, void (%"struct.jxl::FilterPipeline::FilterStep"*, %"struct.jxl::FilterRows"*, i64)** %169, align 8
  %170 = load i64, i64* %14, align 8
  %171 = trunc i64 %170 to i32
  %172 = add i32 %171, -1
  %173 = icmp sgt i32 %172, -1
  br i1 %173, label %174, label %176

174:                                              ; preds = %162
  %175 = sext i32 %172 to i64
  br label %187

176:                                              ; preds = %187, %162
  %177 = phi i64 [ 0, %162 ], [ %196, %187 ]
  %178 = getelementptr inbounds %"class.jxl::FilterPipeline", %"class.jxl::FilterPipeline"* %0, i64 0, i32 5
  store i64 %177, i64* %178, align 8
  %179 = load i32, i32* %9, align 4
  %180 = zext i32 %179 to i64
  %181 = getelementptr inbounds [4 x i64], [4 x i64]* @_ZZNK3jxl10LoopFilter7PaddingEvE20padding_per_epf_iter, i64 0, i64 %180
  %182 = load i64, i64* %181, align 8
  %183 = load i8, i8* %25, align 1, !range !311
  %184 = zext i8 %183 to i64
  %185 = add i64 %182, %184
  %186 = icmp eq i64 %177, %185
  br i1 %186, label %203, label %200

187:                                              ; preds = %174, %187
  %188 = phi i64 [ %175, %174 ], [ %199, %187 ]
  %189 = phi i32 [ %172, %174 ], [ %197, %187 ]
  %190 = phi i64 [ 0, %174 ], [ %196, %187 ]
  %191 = add i64 %190, 3
  %192 = and i64 %191, -4
  %193 = getelementptr inbounds %"class.jxl::FilterPipeline", %"class.jxl::FilterPipeline"* %0, i64 0, i32 2, i64 %188, i32 11
  store i64 %192, i64* %193, align 8
  %194 = getelementptr inbounds %"class.jxl::FilterPipeline", %"class.jxl::FilterPipeline"* %0, i64 0, i32 2, i64 %188, i32 10, i32 1
  %195 = load i64, i64* %194, align 8
  %196 = add i64 %195, %190
  %197 = add nsw i32 %189, -1
  %198 = icmp sgt i32 %189, 0
  %199 = add nsw i64 %188, -1
  br i1 %198, label %187, label %176

200:                                              ; preds = %176
  %201 = tail call zeroext i1 (i8*, ...) @_ZN3jxl5DebugEPKcz(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str, i64 0, i64 0), i8* getelementptr inbounds ([44 x i8], [44 x i8]* @.str.1, i64 0, i64 0), i32 531, i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.2, i64 0, i64 0)) #14
  %202 = tail call zeroext i1 @_ZN3jxl5AbortEv() #16
  unreachable

203:                                              ; preds = %176
  %204 = icmp ult i64 %177, 9
  br i1 %204, label %208, label %205

205:                                              ; preds = %203
  %206 = tail call zeroext i1 (i8*, ...) @_ZN3jxl5DebugEPKcz(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str, i64 0, i64 0), i8* getelementptr inbounds ([44 x i8], [44 x i8]* @.str.1, i64 0, i64 0), i32 532, i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str.3, i64 0, i64 0)) #14
  %207 = tail call zeroext i1 @_ZN3jxl5AbortEv() #16
  unreachable

208:                                              ; preds = %203
  ret void
}

declare zeroext i1 @_ZN3jxl5DebugEPKcz(i8*, ...) local_unnamed_addr #4

; Function Attrs: noreturn
declare zeroext i1 @_ZN3jxl5AbortEv() local_unnamed_addr #5

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN3jxl6N_AVX211GaborishRowERKNS_10FilterRowsERKNS_10LoopFilterERKNS_13FilterWeightsEmmmm(%"struct.jxl::FilterRows"* nocapture readonly dereferenceable(120), %"struct.jxl::LoopFilter"* nocapture readnone dereferenceable(144), %"struct.jxl::FilterWeights"* nocapture readonly dereferenceable(72), i64, i64, i64, i64) #6 {
  %8 = getelementptr inbounds %"struct.jxl::FilterRows", %"struct.jxl::FilterRows"* %0, i64 0, i32 1, i64 2
  %9 = getelementptr inbounds %"struct.jxl::FilterRows", %"struct.jxl::FilterRows"* %0, i64 0, i32 1, i64 3
  %10 = getelementptr inbounds %"struct.jxl::FilterRows", %"struct.jxl::FilterRows"* %0, i64 0, i32 1, i64 4
  %11 = icmp ult i64 %3, %4
  %12 = getelementptr inbounds %"struct.jxl::FilterRows", %"struct.jxl::FilterRows"* %0, i64 0, i32 0, i64 0
  %13 = load float*, float** %12, align 8
  %14 = load i64, i64* %8, align 8
  %15 = getelementptr inbounds float, float* %13, i64 %14
  %16 = load i64, i64* %9, align 8
  %17 = getelementptr inbounds float, float* %13, i64 %16
  %18 = load i64, i64* %10, align 8
  %19 = getelementptr inbounds float, float* %13, i64 %18
  %20 = getelementptr inbounds %"struct.jxl::FilterRows", %"struct.jxl::FilterRows"* %0, i64 0, i32 2, i64 0
  %21 = load float*, float** %20, align 8
  %22 = getelementptr inbounds %"struct.jxl::FilterWeights", %"struct.jxl::FilterWeights"* %2, i64 0, i32 0, i64 0
  %23 = load float, float* %22, align 4
  %24 = insertelement <8 x float> undef, float %23, i32 0
  %25 = shufflevector <8 x float> %24, <8 x float> undef, <8 x i32> zeroinitializer
  %26 = getelementptr inbounds %"struct.jxl::FilterWeights", %"struct.jxl::FilterWeights"* %2, i64 0, i32 0, i64 1
  %27 = load float, float* %26, align 4
  %28 = insertelement <8 x float> undef, float %27, i32 0
  %29 = shufflevector <8 x float> %28, <8 x float> undef, <8 x i32> zeroinitializer
  %30 = getelementptr inbounds %"struct.jxl::FilterWeights", %"struct.jxl::FilterWeights"* %2, i64 0, i32 0, i64 2
  %31 = load float, float* %30, align 4
  %32 = insertelement <8 x float> undef, float %31, i32 0
  %33 = shufflevector <8 x float> %32, <8 x float> undef, <8 x i32> zeroinitializer
  br i1 %11, label %34, label %80

34:                                               ; preds = %7, %34
  %35 = phi i64 [ %74, %34 ], [ %3, %7 ]
  %36 = getelementptr inbounds float, float* %15, i64 %35
  %37 = getelementptr inbounds float, float* %17, i64 %35
  %38 = getelementptr inbounds float, float* %19, i64 %35
  %39 = getelementptr inbounds float, float* %21, i64 %35
  %40 = bitcast float* %36 to <8 x float>*
  %41 = load <8 x float>, <8 x float>* %40, align 32, !alias.scope !312, !noalias !317
  %42 = getelementptr inbounds float, float* %36, i64 -1
  %43 = bitcast float* %42 to <8 x float>*
  %44 = load <8 x float>, <8 x float>* %43, align 1, !alias.scope !322, !noalias !325
  %45 = getelementptr inbounds float, float* %36, i64 1
  %46 = bitcast float* %45 to <8 x float>*
  %47 = load <8 x float>, <8 x float>* %46, align 1, !alias.scope !327, !noalias !330
  %48 = bitcast float* %37 to <8 x float>*
  %49 = load <8 x float>, <8 x float>* %48, align 32, !alias.scope !332, !noalias !335
  %50 = getelementptr inbounds float, float* %37, i64 -1
  %51 = bitcast float* %50 to <8 x float>*
  %52 = load <8 x float>, <8 x float>* %51, align 1, !alias.scope !337, !noalias !340
  %53 = getelementptr inbounds float, float* %37, i64 1
  %54 = bitcast float* %53 to <8 x float>*
  %55 = load <8 x float>, <8 x float>* %54, align 1, !alias.scope !342, !noalias !345
  %56 = bitcast float* %38 to <8 x float>*
  %57 = load <8 x float>, <8 x float>* %56, align 32, !alias.scope !347, !noalias !350
  %58 = getelementptr inbounds float, float* %38, i64 -1
  %59 = bitcast float* %58 to <8 x float>*
  %60 = load <8 x float>, <8 x float>* %59, align 1, !alias.scope !352, !noalias !355
  %61 = getelementptr inbounds float, float* %38, i64 1
  %62 = bitcast float* %61 to <8 x float>*
  %63 = load <8 x float>, <8 x float>* %62, align 1, !alias.scope !357, !noalias !360
  %64 = fadd <8 x float> %52, %55
  %65 = fadd <8 x float> %41, %57
  %66 = fadd <8 x float> %64, %65
  %67 = fadd <8 x float> %44, %47
  %68 = fadd <8 x float> %60, %63
  %69 = fadd <8 x float> %67, %68
  %70 = fmul <8 x float> %25, %49
  %71 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %66, <8 x float> %29, <8 x float> %70) #14
  %72 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %69, <8 x float> %33, <8 x float> %71) #14
  %73 = bitcast float* %39 to <8 x float>*
  store <8 x float> %72, <8 x float>* %73, align 32, !alias.scope !362, !noalias !365
  %74 = add i64 %35, 8
  %75 = icmp ult i64 %74, %4
  br i1 %75, label %34, label %76

76:                                               ; preds = %34
  %77 = load i64, i64* %8, align 8
  %78 = load i64, i64* %9, align 8
  %79 = load i64, i64* %10, align 8
  br label %80

80:                                               ; preds = %76, %7
  %81 = phi i64 [ %79, %76 ], [ %18, %7 ]
  %82 = phi i64 [ %78, %76 ], [ %16, %7 ]
  %83 = phi i64 [ %77, %76 ], [ %14, %7 ]
  %84 = getelementptr inbounds %"struct.jxl::FilterRows", %"struct.jxl::FilterRows"* %0, i64 0, i32 0, i64 1
  %85 = load float*, float** %84, align 8
  %86 = getelementptr inbounds float, float* %85, i64 %83
  %87 = getelementptr inbounds float, float* %85, i64 %82
  %88 = getelementptr inbounds float, float* %85, i64 %81
  %89 = getelementptr inbounds %"struct.jxl::FilterRows", %"struct.jxl::FilterRows"* %0, i64 0, i32 2, i64 1
  %90 = load float*, float** %89, align 8
  %91 = getelementptr inbounds %"struct.jxl::FilterWeights", %"struct.jxl::FilterWeights"* %2, i64 0, i32 0, i64 3
  %92 = load float, float* %91, align 4
  %93 = insertelement <8 x float> undef, float %92, i32 0
  %94 = shufflevector <8 x float> %93, <8 x float> undef, <8 x i32> zeroinitializer
  %95 = getelementptr inbounds %"struct.jxl::FilterWeights", %"struct.jxl::FilterWeights"* %2, i64 0, i32 0, i64 4
  %96 = load float, float* %95, align 4
  %97 = insertelement <8 x float> undef, float %96, i32 0
  %98 = shufflevector <8 x float> %97, <8 x float> undef, <8 x i32> zeroinitializer
  %99 = getelementptr inbounds %"struct.jxl::FilterWeights", %"struct.jxl::FilterWeights"* %2, i64 0, i32 0, i64 5
  %100 = load float, float* %99, align 4
  %101 = insertelement <8 x float> undef, float %100, i32 0
  %102 = shufflevector <8 x float> %101, <8 x float> undef, <8 x i32> zeroinitializer
  br i1 %11, label %103, label %149

103:                                              ; preds = %80, %103
  %104 = phi i64 [ %143, %103 ], [ %3, %80 ]
  %105 = getelementptr inbounds float, float* %86, i64 %104
  %106 = getelementptr inbounds float, float* %87, i64 %104
  %107 = getelementptr inbounds float, float* %88, i64 %104
  %108 = getelementptr inbounds float, float* %90, i64 %104
  %109 = bitcast float* %105 to <8 x float>*
  %110 = load <8 x float>, <8 x float>* %109, align 32, !alias.scope !312, !noalias !317
  %111 = getelementptr inbounds float, float* %105, i64 -1
  %112 = bitcast float* %111 to <8 x float>*
  %113 = load <8 x float>, <8 x float>* %112, align 1, !alias.scope !322, !noalias !325
  %114 = getelementptr inbounds float, float* %105, i64 1
  %115 = bitcast float* %114 to <8 x float>*
  %116 = load <8 x float>, <8 x float>* %115, align 1, !alias.scope !327, !noalias !330
  %117 = bitcast float* %106 to <8 x float>*
  %118 = load <8 x float>, <8 x float>* %117, align 32, !alias.scope !332, !noalias !335
  %119 = getelementptr inbounds float, float* %106, i64 -1
  %120 = bitcast float* %119 to <8 x float>*
  %121 = load <8 x float>, <8 x float>* %120, align 1, !alias.scope !337, !noalias !340
  %122 = getelementptr inbounds float, float* %106, i64 1
  %123 = bitcast float* %122 to <8 x float>*
  %124 = load <8 x float>, <8 x float>* %123, align 1, !alias.scope !342, !noalias !345
  %125 = bitcast float* %107 to <8 x float>*
  %126 = load <8 x float>, <8 x float>* %125, align 32, !alias.scope !347, !noalias !350
  %127 = getelementptr inbounds float, float* %107, i64 -1
  %128 = bitcast float* %127 to <8 x float>*
  %129 = load <8 x float>, <8 x float>* %128, align 1, !alias.scope !352, !noalias !355
  %130 = getelementptr inbounds float, float* %107, i64 1
  %131 = bitcast float* %130 to <8 x float>*
  %132 = load <8 x float>, <8 x float>* %131, align 1, !alias.scope !357, !noalias !360
  %133 = fadd <8 x float> %121, %124
  %134 = fadd <8 x float> %110, %126
  %135 = fadd <8 x float> %133, %134
  %136 = fadd <8 x float> %113, %116
  %137 = fadd <8 x float> %129, %132
  %138 = fadd <8 x float> %136, %137
  %139 = fmul <8 x float> %94, %118
  %140 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %135, <8 x float> %98, <8 x float> %139) #14
  %141 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %138, <8 x float> %102, <8 x float> %140) #14
  %142 = bitcast float* %108 to <8 x float>*
  store <8 x float> %141, <8 x float>* %142, align 32, !alias.scope !362, !noalias !365
  %143 = add i64 %104, 8
  %144 = icmp ult i64 %143, %4
  br i1 %144, label %103, label %145

145:                                              ; preds = %103
  %146 = load i64, i64* %8, align 8
  %147 = load i64, i64* %9, align 8
  %148 = load i64, i64* %10, align 8
  br label %149

149:                                              ; preds = %145, %80
  %150 = phi i64 [ %148, %145 ], [ %81, %80 ]
  %151 = phi i64 [ %147, %145 ], [ %82, %80 ]
  %152 = phi i64 [ %146, %145 ], [ %83, %80 ]
  %153 = getelementptr inbounds %"struct.jxl::FilterRows", %"struct.jxl::FilterRows"* %0, i64 0, i32 0, i64 2
  %154 = load float*, float** %153, align 8
  %155 = getelementptr inbounds float, float* %154, i64 %152
  %156 = getelementptr inbounds float, float* %154, i64 %151
  %157 = getelementptr inbounds float, float* %154, i64 %150
  %158 = getelementptr inbounds %"struct.jxl::FilterRows", %"struct.jxl::FilterRows"* %0, i64 0, i32 2, i64 2
  %159 = load float*, float** %158, align 8
  %160 = getelementptr inbounds %"struct.jxl::FilterWeights", %"struct.jxl::FilterWeights"* %2, i64 0, i32 0, i64 6
  %161 = load float, float* %160, align 4
  %162 = insertelement <8 x float> undef, float %161, i32 0
  %163 = shufflevector <8 x float> %162, <8 x float> undef, <8 x i32> zeroinitializer
  %164 = getelementptr inbounds %"struct.jxl::FilterWeights", %"struct.jxl::FilterWeights"* %2, i64 0, i32 0, i64 7
  %165 = load float, float* %164, align 4
  %166 = insertelement <8 x float> undef, float %165, i32 0
  %167 = shufflevector <8 x float> %166, <8 x float> undef, <8 x i32> zeroinitializer
  %168 = getelementptr inbounds %"struct.jxl::FilterWeights", %"struct.jxl::FilterWeights"* %2, i64 0, i32 0, i64 8
  %169 = load float, float* %168, align 4
  %170 = insertelement <8 x float> undef, float %169, i32 0
  %171 = shufflevector <8 x float> %170, <8 x float> undef, <8 x i32> zeroinitializer
  br i1 %11, label %172, label %214

172:                                              ; preds = %149, %172
  %173 = phi i64 [ %212, %172 ], [ %3, %149 ]
  %174 = getelementptr inbounds float, float* %155, i64 %173
  %175 = getelementptr inbounds float, float* %156, i64 %173
  %176 = getelementptr inbounds float, float* %157, i64 %173
  %177 = getelementptr inbounds float, float* %159, i64 %173
  %178 = bitcast float* %174 to <8 x float>*
  %179 = load <8 x float>, <8 x float>* %178, align 32, !alias.scope !312, !noalias !317
  %180 = getelementptr inbounds float, float* %174, i64 -1
  %181 = bitcast float* %180 to <8 x float>*
  %182 = load <8 x float>, <8 x float>* %181, align 1, !alias.scope !322, !noalias !325
  %183 = getelementptr inbounds float, float* %174, i64 1
  %184 = bitcast float* %183 to <8 x float>*
  %185 = load <8 x float>, <8 x float>* %184, align 1, !alias.scope !327, !noalias !330
  %186 = bitcast float* %175 to <8 x float>*
  %187 = load <8 x float>, <8 x float>* %186, align 32, !alias.scope !332, !noalias !335
  %188 = getelementptr inbounds float, float* %175, i64 -1
  %189 = bitcast float* %188 to <8 x float>*
  %190 = load <8 x float>, <8 x float>* %189, align 1, !alias.scope !337, !noalias !340
  %191 = getelementptr inbounds float, float* %175, i64 1
  %192 = bitcast float* %191 to <8 x float>*
  %193 = load <8 x float>, <8 x float>* %192, align 1, !alias.scope !342, !noalias !345
  %194 = bitcast float* %176 to <8 x float>*
  %195 = load <8 x float>, <8 x float>* %194, align 32, !alias.scope !347, !noalias !350
  %196 = getelementptr inbounds float, float* %176, i64 -1
  %197 = bitcast float* %196 to <8 x float>*
  %198 = load <8 x float>, <8 x float>* %197, align 1, !alias.scope !352, !noalias !355
  %199 = getelementptr inbounds float, float* %176, i64 1
  %200 = bitcast float* %199 to <8 x float>*
  %201 = load <8 x float>, <8 x float>* %200, align 1, !alias.scope !357, !noalias !360
  %202 = fadd <8 x float> %190, %193
  %203 = fadd <8 x float> %179, %195
  %204 = fadd <8 x float> %202, %203
  %205 = fadd <8 x float> %182, %185
  %206 = fadd <8 x float> %198, %201
  %207 = fadd <8 x float> %205, %206
  %208 = fmul <8 x float> %163, %187
  %209 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %204, <8 x float> %167, <8 x float> %208) #14
  %210 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %207, <8 x float> %171, <8 x float> %209) #14
  %211 = bitcast float* %177 to <8 x float>*
  store <8 x float> %210, <8 x float>* %211, align 32, !alias.scope !362, !noalias !365
  %212 = add i64 %173, 8
  %213 = icmp ult i64 %212, %4
  br i1 %213, label %172, label %214

214:                                              ; preds = %172, %149
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN3jxl6N_AVX27Epf0RowERKNS_10FilterRowsERKNS_10LoopFilterERKNS_13FilterWeightsEmmmm(%"struct.jxl::FilterRows"* readonly dereferenceable(120), %"struct.jxl::LoopFilter"* nocapture readonly dereferenceable(144), %"struct.jxl::FilterWeights"* nocapture readnone dereferenceable(72), i64, i64, i64, i64) #6 {
  %8 = alloca <8 x float>, align 32
  %9 = alloca [12 x %"class.hwy::N_AVX2::Vec256"], align 32
  %10 = bitcast [12 x %"class.hwy::N_AVX2::Vec256"]* %9 to i8*
  %11 = getelementptr inbounds %"struct.jxl::FilterRows", %"struct.jxl::FilterRows"* %0, i64 0, i32 3
  %12 = load float*, float** %11, align 8
  %13 = getelementptr inbounds %"struct.jxl::LoopFilter", %"struct.jxl::LoopFilter"* %1, i64 0, i32 23
  %14 = load float, float* %13, align 4
  %15 = getelementptr inbounds %"struct.jxl::LoopFilter", %"struct.jxl::LoopFilter"* %1, i64 0, i32 25
  %16 = load float, float* %15, align 4
  %17 = fmul float %14, %16
  %18 = bitcast <8 x float>* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %18) #14
  %19 = getelementptr inbounds <8 x float>, <8 x float>* %8, i64 0, i64 0
  %20 = getelementptr inbounds <8 x float>, <8 x float>* %8, i64 0, i64 1
  %21 = getelementptr inbounds <8 x float>, <8 x float>* %8, i64 0, i64 5
  %22 = getelementptr inbounds <8 x float>, <8 x float>* %8, i64 0, i64 6
  %23 = getelementptr inbounds <8 x float>, <8 x float>* %8, i64 0, i64 7
  store float %17, float* %19, align 32
  %24 = insertelement <4 x float> undef, float %14, i32 0
  %25 = shufflevector <4 x float> %24, <4 x float> undef, <4 x i32> zeroinitializer
  %26 = bitcast float* %20 to <4 x float>*
  store <4 x float> %25, <4 x float>* %26, align 4
  store float %14, float* %21, align 4
  store float %14, float* %22, align 8
  store float %17, float* %23, align 4
  switch i64 %6, label %30 [
    i64 7, label %27
    i64 0, label %27
  ]

27:                                               ; preds = %7, %7
  %28 = insertelement <8 x float> undef, float %17, i32 0
  %29 = shufflevector <8 x float> %28, <8 x float> undef, <8 x i32> zeroinitializer
  store <8 x float> %29, <8 x float>* %8, align 32, !alias.scope !366
  br label %30

30:                                               ; preds = %27, %7
  %31 = icmp ult i64 %3, %4
  br i1 %31, label %32, label %47

32:                                               ; preds = %30
  %33 = getelementptr inbounds %"struct.jxl::FilterRows", %"struct.jxl::FilterRows"* %0, i64 0, i32 0, i64 0
  %34 = getelementptr inbounds %"struct.jxl::FilterRows", %"struct.jxl::FilterRows"* %0, i64 0, i32 1, i64 3
  %35 = getelementptr inbounds %"struct.jxl::FilterRows", %"struct.jxl::FilterRows"* %0, i64 0, i32 0, i64 1
  %36 = getelementptr inbounds %"struct.jxl::FilterRows", %"struct.jxl::FilterRows"* %0, i64 0, i32 0, i64 2
  %37 = getelementptr inbounds %"struct.jxl::LoopFilter", %"struct.jxl::LoopFilter"* %1, i64 0, i32 18
  %38 = getelementptr inbounds %"struct.jxl::FilterRows", %"struct.jxl::FilterRows"* %0, i64 0, i32 2, i64 0
  %39 = getelementptr inbounds %"struct.jxl::FilterRows", %"struct.jxl::FilterRows"* %0, i64 0, i32 2, i64 1
  %40 = getelementptr inbounds %"struct.jxl::FilterRows", %"struct.jxl::FilterRows"* %0, i64 0, i32 2, i64 2
  %41 = add i64 %5, %3
  %42 = and i64 %41, 7
  %43 = getelementptr inbounds <8 x float>, <8 x float>* %8, i64 0, i64 %42
  %44 = bitcast float* %43 to <8 x float>*
  %45 = getelementptr inbounds %"struct.jxl::FilterRows", %"struct.jxl::FilterRows"* %0, i64 0, i32 1, i64 2
  %46 = getelementptr inbounds %"struct.jxl::FilterRows", %"struct.jxl::FilterRows"* %0, i64 0, i32 1, i64 4
  br label %48

47:                                               ; preds = %256, %30
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %18) #14
  ret void

48:                                               ; preds = %32, %256
  %49 = phi i64 [ %3, %32 ], [ %257, %256 ]
  %50 = add i64 %49, %5
  %51 = lshr i64 %50, 3
  %52 = getelementptr inbounds float, float* %12, i64 %51
  %53 = load float, float* %52, align 4
  %54 = fcmp olt float %53, 0xC00F3DF000000000
  br i1 %54, label %55, label %83

55:                                               ; preds = %48
  %56 = load float*, float** %33, align 8
  %57 = load i64, i64* %34, align 8
  %58 = getelementptr inbounds float, float* %56, i64 %49
  %59 = getelementptr inbounds float, float* %58, i64 %57
  %60 = bitcast float* %59 to <8 x float>*
  %61 = load <8 x float>, <8 x float>* %60, align 32, !alias.scope !369, !noalias !372
  %62 = load float*, float** %38, align 8
  %63 = getelementptr inbounds float, float* %62, i64 %49
  %64 = bitcast float* %63 to <8 x float>*
  store <8 x float> %61, <8 x float>* %64, align 32, !alias.scope !374
  %65 = load float*, float** %35, align 8
  %66 = load i64, i64* %34, align 8
  %67 = getelementptr inbounds float, float* %65, i64 %49
  %68 = getelementptr inbounds float, float* %67, i64 %66
  %69 = bitcast float* %68 to <8 x float>*
  %70 = load <8 x float>, <8 x float>* %69, align 32, !alias.scope !369, !noalias !372
  %71 = load float*, float** %39, align 8
  %72 = getelementptr inbounds float, float* %71, i64 %49
  %73 = bitcast float* %72 to <8 x float>*
  store <8 x float> %70, <8 x float>* %73, align 32, !alias.scope !374
  %74 = load float*, float** %36, align 8
  %75 = load i64, i64* %34, align 8
  %76 = getelementptr inbounds float, float* %74, i64 %49
  %77 = getelementptr inbounds float, float* %76, i64 %75
  %78 = bitcast float* %77 to <8 x float>*
  %79 = load <8 x float>, <8 x float>* %78, align 32, !alias.scope !369, !noalias !372
  %80 = load float*, float** %40, align 8
  %81 = getelementptr inbounds float, float* %80, i64 %49
  %82 = bitcast float* %81 to <8 x float>*
  store <8 x float> %79, <8 x float>* %82, align 32, !alias.scope !374
  br label %256

83:                                               ; preds = %48
  %84 = load <8 x float>, <8 x float>* %44, align 32, !alias.scope !377, !noalias !380
  %85 = insertelement <8 x float> undef, float %53, i32 0
  %86 = shufflevector <8 x float> %85, <8 x float> undef, <8 x i32> zeroinitializer
  call void @llvm.lifetime.start.p0i8(i64 384, i8* nonnull %10) #14
  call void @llvm.memset.p0i8.i64(i8* nonnull align 32 %10, i8 0, i64 384, i1 false)
  %87 = load i64, i64* %34, align 8
  %88 = load i64, i64* %45, align 8
  %89 = load i64, i64* %46, align 8
  br label %110

90:                                               ; preds = %199
  %91 = fmul <8 x float> %86, %84
  %92 = load float*, float** %33, align 8
  %93 = getelementptr inbounds float, float* %92, i64 %87
  %94 = getelementptr inbounds float, float* %93, i64 %49
  %95 = bitcast float* %94 to <8 x float>*
  %96 = load <8 x float>, <8 x float>* %95, align 1, !alias.scope !382, !noalias !385
  %97 = load float*, float** %35, align 8
  %98 = getelementptr inbounds float, float* %97, i64 %87
  %99 = getelementptr inbounds float, float* %98, i64 %49
  %100 = bitcast float* %99 to <8 x float>*
  %101 = load <8 x float>, <8 x float>* %100, align 1, !alias.scope !387, !noalias !390
  %102 = load float*, float** %36, align 8
  %103 = getelementptr inbounds float, float* %102, i64 %87
  %104 = getelementptr inbounds float, float* %103, i64 %49
  %105 = bitcast float* %104 to <8 x float>*
  %106 = load <8 x float>, <8 x float>* %105, align 1, !alias.scope !392, !noalias !395
  %107 = load float, float* %37, align 4, !noalias !397
  %108 = insertelement <8 x float> undef, float %107, i32 0
  %109 = shufflevector <8 x float> %108, <8 x float> undef, <8 x i32> zeroinitializer
  br label %216

110:                                              ; preds = %199, %83
  %111 = phi i64 [ %200, %199 ], [ 0, %83 ]
  %112 = getelementptr inbounds %"struct.jxl::LoopFilter", %"struct.jxl::LoopFilter"* %1, i64 0, i32 17, i64 %111
  %113 = load float, float* %112, align 4
  %114 = insertelement <8 x float> undef, float %113, i32 0
  %115 = shufflevector <8 x float> %114, <8 x float> undef, <8 x i32> zeroinitializer
  %116 = getelementptr inbounds %"struct.jxl::FilterRows", %"struct.jxl::FilterRows"* %0, i64 0, i32 0, i64 %111
  %117 = load float*, float** %116, align 8
  %118 = getelementptr inbounds float, float* %117, i64 %49
  %119 = getelementptr inbounds float, float* %118, i64 %88
  %120 = bitcast float* %119 to <8 x float>*
  %121 = load <8 x float>, <8 x float>* %120, align 1, !alias.scope !403, !noalias !406
  %122 = getelementptr inbounds float, float* %118, i64 %89
  %123 = bitcast float* %122 to <8 x float>*
  %124 = load <8 x float>, <8 x float>* %123, align 1, !alias.scope !403, !noalias !406
  %125 = getelementptr inbounds float, float* %118, i64 %87
  %126 = getelementptr inbounds float, float* %125, i64 1
  %127 = bitcast float* %126 to <8 x float>*
  %128 = load <8 x float>, <8 x float>* %127, align 1, !alias.scope !403, !noalias !406
  %129 = bitcast float* %125 to <8 x float>*
  %130 = load <8 x float>, <8 x float>* %129, align 1, !alias.scope !403, !noalias !406
  %131 = getelementptr inbounds float, float* %125, i64 -1
  %132 = bitcast float* %131 to <8 x float>*
  %133 = load <8 x float>, <8 x float>* %132, align 1, !alias.scope !403, !noalias !406
  br label %134

134:                                              ; preds = %134, %110
  %135 = phi i64 [ 0, %110 ], [ %197, %134 ]
  %136 = getelementptr inbounds [12 x %"struct.std::__1::array"], [12 x %"struct.std::__1::array"]* @_ZZN3jxl8N_SCALAR7Epf0RowERKNS_10FilterRowsERKNS_10LoopFilterERKNS_13FilterWeightsEmmmmE8sads_off, i64 0, i64 %135, i32 0, i64 0
  %137 = load i32, i32* %136, align 8
  %138 = getelementptr inbounds [12 x %"struct.std::__1::array"], [12 x %"struct.std::__1::array"]* @_ZZN3jxl8N_SCALAR7Epf0RowERKNS_10FilterRowsERKNS_10LoopFilterERKNS_13FilterWeightsEmmmmE8sads_off, i64 0, i64 %135, i32 0, i64 1
  %139 = load i32, i32* %138, align 4
  %140 = sext i32 %139 to i64
  %141 = sext i32 %137 to i64
  %142 = add nsw i64 %141, 3
  %143 = getelementptr inbounds %"struct.jxl::FilterRows", %"struct.jxl::FilterRows"* %0, i64 0, i32 1, i64 %142
  %144 = load i64, i64* %143, align 8
  %145 = getelementptr inbounds float, float* %118, i64 %140
  %146 = getelementptr inbounds float, float* %145, i64 %144
  %147 = bitcast float* %146 to <8 x float>*
  %148 = load <8 x float>, <8 x float>* %147, align 1, !alias.scope !408, !noalias !411
  %149 = fsub <8 x float> %130, %148
  %150 = bitcast <8 x float> %149 to <8 x i32>
  %151 = and <8 x i32> %150, <i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647>
  %152 = bitcast <8 x i32> %151 to <8 x float>
  %153 = fadd <8 x float> %152, zeroinitializer
  %154 = sext i32 %137 to i64
  %155 = add nsw i64 %154, 2
  %156 = getelementptr inbounds %"struct.jxl::FilterRows", %"struct.jxl::FilterRows"* %0, i64 0, i32 1, i64 %155
  %157 = load i64, i64* %156, align 8
  %158 = getelementptr inbounds float, float* %145, i64 %157
  %159 = bitcast float* %158 to <8 x float>*
  %160 = load <8 x float>, <8 x float>* %159, align 1, !alias.scope !408, !noalias !411
  %161 = fsub <8 x float> %121, %160
  %162 = bitcast <8 x float> %161 to <8 x i32>
  %163 = and <8 x i32> %162, <i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647>
  %164 = bitcast <8 x i32> %163 to <8 x float>
  %165 = fadd <8 x float> %153, %164
  %166 = getelementptr inbounds float, float* %146, i64 -1
  %167 = bitcast float* %166 to <8 x float>*
  %168 = load <8 x float>, <8 x float>* %167, align 1, !alias.scope !408, !noalias !411
  %169 = fsub <8 x float> %133, %168
  %170 = bitcast <8 x float> %169 to <8 x i32>
  %171 = and <8 x i32> %170, <i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647>
  %172 = bitcast <8 x i32> %171 to <8 x float>
  %173 = fadd <8 x float> %165, %172
  %174 = sext i32 %137 to i64
  %175 = add nsw i64 %174, 4
  %176 = getelementptr inbounds %"struct.jxl::FilterRows", %"struct.jxl::FilterRows"* %0, i64 0, i32 1, i64 %175
  %177 = load i64, i64* %176, align 8
  %178 = getelementptr inbounds float, float* %145, i64 %177
  %179 = bitcast float* %178 to <8 x float>*
  %180 = load <8 x float>, <8 x float>* %179, align 1, !alias.scope !408, !noalias !411
  %181 = fsub <8 x float> %124, %180
  %182 = bitcast <8 x float> %181 to <8 x i32>
  %183 = and <8 x i32> %182, <i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647>
  %184 = bitcast <8 x i32> %183 to <8 x float>
  %185 = fadd <8 x float> %173, %184
  %186 = getelementptr inbounds float, float* %146, i64 1
  %187 = bitcast float* %186 to <8 x float>*
  %188 = load <8 x float>, <8 x float>* %187, align 1, !alias.scope !408, !noalias !411
  %189 = fsub <8 x float> %128, %188
  %190 = bitcast <8 x float> %189 to <8 x i32>
  %191 = and <8 x i32> %190, <i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647>
  %192 = bitcast <8 x i32> %191 to <8 x float>
  %193 = fadd <8 x float> %185, %192
  %194 = getelementptr inbounds [12 x %"class.hwy::N_AVX2::Vec256"], [12 x %"class.hwy::N_AVX2::Vec256"]* %9, i64 0, i64 %135, i32 0
  %195 = load <8 x float>, <8 x float>* %194, align 32
  %196 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %193, <8 x float> %115, <8 x float> %195) #14
  store <8 x float> %196, <8 x float>* %194, align 32
  %197 = add nuw nsw i64 %135, 1
  %198 = icmp eq i64 %197, 12
  br i1 %198, label %199, label %134

199:                                              ; preds = %134
  %200 = add nuw nsw i64 %111, 1
  %201 = icmp eq i64 %200, 3
  br i1 %201, label %90, label %110

202:                                              ; preds = %216
  %203 = fdiv <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %250
  %204 = fmul <8 x float> %251, %203
  %205 = load float*, float** %38, align 8
  %206 = getelementptr inbounds float, float* %205, i64 %49
  %207 = bitcast float* %206 to <8 x float>*
  store <8 x float> %204, <8 x float>* %207, align 32, !alias.scope !413
  %208 = fmul <8 x float> %252, %203
  %209 = load float*, float** %39, align 8
  %210 = getelementptr inbounds float, float* %209, i64 %49
  %211 = bitcast float* %210 to <8 x float>*
  store <8 x float> %208, <8 x float>* %211, align 32, !alias.scope !416
  %212 = fmul <8 x float> %253, %203
  %213 = load float*, float** %40, align 8
  %214 = getelementptr inbounds float, float* %213, i64 %49
  %215 = bitcast float* %214 to <8 x float>*
  store <8 x float> %212, <8 x float>* %215, align 32, !alias.scope !419
  call void @llvm.lifetime.end.p0i8(i64 384, i8* nonnull %10) #14
  br label %256

216:                                              ; preds = %216, %90
  %217 = phi i64 [ 0, %90 ], [ %254, %216 ]
  %218 = phi <8 x float> [ <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %90 ], [ %250, %216 ]
  %219 = phi <8 x float> [ %96, %90 ], [ %251, %216 ]
  %220 = phi <8 x float> [ %101, %90 ], [ %252, %216 ]
  %221 = phi <8 x float> [ %106, %90 ], [ %253, %216 ]
  %222 = getelementptr inbounds [12 x %"struct.std::__1::array"], [12 x %"struct.std::__1::array"]* @_ZZN3jxl8N_SCALAR7Epf0RowERKNS_10FilterRowsERKNS_10LoopFilterERKNS_13FilterWeightsEmmmmE8sads_off, i64 0, i64 %217, i32 0, i64 0
  %223 = load i32, i32* %222, align 8
  %224 = getelementptr inbounds [12 x %"struct.std::__1::array"], [12 x %"struct.std::__1::array"]* @_ZZN3jxl8N_SCALAR7Epf0RowERKNS_10FilterRowsERKNS_10LoopFilterERKNS_13FilterWeightsEmmmmE8sads_off, i64 0, i64 %217, i32 0, i64 1
  %225 = load i32, i32* %224, align 4
  %226 = sext i32 %225 to i64
  %227 = add i64 %49, %226
  %228 = getelementptr inbounds [12 x %"class.hwy::N_AVX2::Vec256"], [12 x %"class.hwy::N_AVX2::Vec256"]* %9, i64 0, i64 %217, i32 0
  %229 = load <8 x float>, <8 x float>* %228, align 32
  %230 = sext i32 %223 to i64
  %231 = add nsw i64 %230, 3
  %232 = getelementptr inbounds %"struct.jxl::FilterRows", %"struct.jxl::FilterRows"* %0, i64 0, i32 1, i64 %231
  %233 = load i64, i64* %232, align 8, !noalias !397
  %234 = getelementptr inbounds float, float* %92, i64 %233
  %235 = getelementptr inbounds float, float* %234, i64 %227
  %236 = bitcast float* %235 to <8 x float>*
  %237 = load <8 x float>, <8 x float>* %236, align 1, !alias.scope !422, !noalias !425
  %238 = getelementptr inbounds float, float* %97, i64 %233
  %239 = getelementptr inbounds float, float* %238, i64 %227
  %240 = bitcast float* %239 to <8 x float>*
  %241 = load <8 x float>, <8 x float>* %240, align 1, !alias.scope !427, !noalias !430
  %242 = getelementptr inbounds float, float* %102, i64 %233
  %243 = getelementptr inbounds float, float* %242, i64 %227
  %244 = bitcast float* %243 to <8 x float>*
  %245 = load <8 x float>, <8 x float>* %244, align 1, !alias.scope !432, !noalias !435
  %246 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %229, <8 x float> %91, <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>) #14
  %247 = fmul <8 x float> %246, %246
  %248 = fcmp ugt <8 x float> %246, %109
  %249 = select <8 x i1> %248, <8 x float> %247, <8 x float> zeroinitializer
  %250 = fadd <8 x float> %218, %249
  %251 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %249, <8 x float> %237, <8 x float> %219) #14
  %252 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %249, <8 x float> %241, <8 x float> %220) #14
  %253 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %249, <8 x float> %245, <8 x float> %221) #14
  %254 = add nuw nsw i64 %217, 1
  %255 = icmp eq i64 %254, 12
  br i1 %255, label %202, label %216

256:                                              ; preds = %55, %202
  %257 = add i64 %49, 8
  %258 = icmp ult i64 %257, %4
  br i1 %258, label %48, label %47
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN3jxl6N_AVX27Epf1RowERKNS_10FilterRowsERKNS_10LoopFilterERKNS_13FilterWeightsEmmmm(%"struct.jxl::FilterRows"* readonly dereferenceable(120), %"struct.jxl::LoopFilter"* nocapture readonly dereferenceable(144), %"struct.jxl::FilterWeights"* nocapture readnone dereferenceable(72), i64, i64, i64, i64) #6 {
  %8 = alloca <8 x float>, align 32
  %9 = getelementptr inbounds %"struct.jxl::FilterRows", %"struct.jxl::FilterRows"* %0, i64 0, i32 3
  %10 = load float*, float** %9, align 8
  %11 = getelementptr inbounds %"struct.jxl::LoopFilter", %"struct.jxl::LoopFilter"* %1, i64 0, i32 25
  %12 = load float, float* %11, align 4
  %13 = bitcast <8 x float>* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %13) #14
  %14 = getelementptr inbounds <8 x float>, <8 x float>* %8, i64 0, i64 0
  %15 = getelementptr inbounds <8 x float>, <8 x float>* %8, i64 0, i64 1
  %16 = getelementptr inbounds <8 x float>, <8 x float>* %8, i64 0, i64 5
  %17 = getelementptr inbounds <8 x float>, <8 x float>* %8, i64 0, i64 6
  %18 = getelementptr inbounds <8 x float>, <8 x float>* %8, i64 0, i64 7
  store float %12, float* %14, align 32
  %19 = bitcast float* %15 to <4 x float>*
  store <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, <4 x float>* %19, align 4
  store float 1.000000e+00, float* %16, align 4
  store float 1.000000e+00, float* %17, align 8
  store float %12, float* %18, align 4
  switch i64 %6, label %23 [
    i64 7, label %20
    i64 0, label %20
  ]

20:                                               ; preds = %7, %7
  %21 = insertelement <8 x float> undef, float %12, i32 0
  %22 = shufflevector <8 x float> %21, <8 x float> undef, <8 x i32> zeroinitializer
  store <8 x float> %22, <8 x float>* %8, align 32, !alias.scope !437
  br label %23

23:                                               ; preds = %20, %7
  %24 = icmp ult i64 %3, %4
  br i1 %24, label %25, label %42

25:                                               ; preds = %23
  %26 = getelementptr inbounds %"struct.jxl::FilterRows", %"struct.jxl::FilterRows"* %0, i64 0, i32 1, i64 1
  %27 = getelementptr inbounds %"struct.jxl::FilterRows", %"struct.jxl::FilterRows"* %0, i64 0, i32 1, i64 2
  %28 = getelementptr inbounds %"struct.jxl::FilterRows", %"struct.jxl::FilterRows"* %0, i64 0, i32 1, i64 3
  %29 = getelementptr inbounds %"struct.jxl::FilterRows", %"struct.jxl::FilterRows"* %0, i64 0, i32 1, i64 4
  %30 = getelementptr inbounds %"struct.jxl::FilterRows", %"struct.jxl::FilterRows"* %0, i64 0, i32 1, i64 5
  %31 = getelementptr inbounds %"struct.jxl::FilterRows", %"struct.jxl::FilterRows"* %0, i64 0, i32 0, i64 0
  %32 = getelementptr inbounds %"struct.jxl::FilterRows", %"struct.jxl::FilterRows"* %0, i64 0, i32 0, i64 1
  %33 = getelementptr inbounds %"struct.jxl::FilterRows", %"struct.jxl::FilterRows"* %0, i64 0, i32 0, i64 2
  %34 = getelementptr inbounds %"struct.jxl::LoopFilter", %"struct.jxl::LoopFilter"* %1, i64 0, i32 18
  %35 = getelementptr inbounds %"struct.jxl::FilterRows", %"struct.jxl::FilterRows"* %0, i64 0, i32 2, i64 0
  %36 = getelementptr inbounds %"struct.jxl::FilterRows", %"struct.jxl::FilterRows"* %0, i64 0, i32 2, i64 1
  %37 = getelementptr inbounds %"struct.jxl::FilterRows", %"struct.jxl::FilterRows"* %0, i64 0, i32 2, i64 2
  %38 = add i64 %5, %3
  %39 = and i64 %38, 7
  %40 = getelementptr inbounds <8 x float>, <8 x float>* %8, i64 0, i64 %39
  %41 = bitcast float* %40 to <8 x float>*
  br label %43

42:                                               ; preds = %331, %23
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %13) #14
  ret void

43:                                               ; preds = %25, %331
  %44 = phi i64 [ %3, %25 ], [ %336, %331 ]
  %45 = add i64 %44, %5
  %46 = lshr i64 %45, 3
  %47 = getelementptr inbounds float, float* %10, i64 %46
  %48 = load float, float* %47, align 4
  %49 = fcmp olt float %48, 0xC00F3DF000000000
  br i1 %49, label %50, label %75

50:                                               ; preds = %43
  %51 = load float*, float** %31, align 8
  %52 = load i64, i64* %28, align 8
  %53 = getelementptr inbounds float, float* %51, i64 %44
  %54 = getelementptr inbounds float, float* %53, i64 %52
  %55 = bitcast float* %54 to <8 x float>*
  %56 = load <8 x float>, <8 x float>* %55, align 32, !alias.scope !440, !noalias !443
  %57 = load float*, float** %35, align 8
  %58 = getelementptr inbounds float, float* %57, i64 %44
  %59 = bitcast float* %58 to <8 x float>*
  store <8 x float> %56, <8 x float>* %59, align 32, !alias.scope !445
  %60 = load float*, float** %32, align 8
  %61 = load i64, i64* %28, align 8
  %62 = getelementptr inbounds float, float* %60, i64 %44
  %63 = getelementptr inbounds float, float* %62, i64 %61
  %64 = bitcast float* %63 to <8 x float>*
  %65 = load <8 x float>, <8 x float>* %64, align 32, !alias.scope !440, !noalias !443
  %66 = load float*, float** %36, align 8
  %67 = getelementptr inbounds float, float* %66, i64 %44
  %68 = bitcast float* %67 to <8 x float>*
  store <8 x float> %65, <8 x float>* %68, align 32, !alias.scope !445
  %69 = load float*, float** %33, align 8
  %70 = load i64, i64* %28, align 8
  %71 = getelementptr inbounds float, float* %69, i64 %44
  %72 = getelementptr inbounds float, float* %71, i64 %70
  %73 = bitcast float* %72 to <8 x float>*
  %74 = load <8 x float>, <8 x float>* %73, align 32, !alias.scope !440, !noalias !443
  br label %331

75:                                               ; preds = %43
  %76 = load <8 x float>, <8 x float>* %41, align 32, !alias.scope !448, !noalias !451
  %77 = insertelement <8 x float> undef, float %48, i32 0
  %78 = shufflevector <8 x float> %77, <8 x float> undef, <8 x i32> zeroinitializer
  %79 = load i64, i64* %26, align 8
  %80 = load i64, i64* %27, align 8
  %81 = load i64, i64* %28, align 8
  %82 = load i64, i64* %29, align 8
  %83 = load i64, i64* %30, align 8
  br label %193

84:                                               ; preds = %193
  %85 = fmul <8 x float> %78, %76
  %86 = load float*, float** %31, align 8
  %87 = load i64, i64* %28, align 8
  %88 = getelementptr inbounds float, float* %86, i64 %87
  %89 = getelementptr inbounds float, float* %88, i64 %44
  %90 = bitcast float* %89 to <8 x float>*
  %91 = load <8 x float>, <8 x float>* %90, align 32, !alias.scope !453, !noalias !456
  %92 = load float*, float** %32, align 8
  %93 = getelementptr inbounds float, float* %92, i64 %87
  %94 = getelementptr inbounds float, float* %93, i64 %44
  %95 = bitcast float* %94 to <8 x float>*
  %96 = load <8 x float>, <8 x float>* %95, align 32, !alias.scope !458, !noalias !461
  %97 = load float*, float** %33, align 8
  %98 = getelementptr inbounds float, float* %97, i64 %87
  %99 = getelementptr inbounds float, float* %98, i64 %44
  %100 = bitcast float* %99 to <8 x float>*
  %101 = load <8 x float>, <8 x float>* %100, align 32, !alias.scope !463, !noalias !466
  %102 = load i64, i64* %27, align 8, !noalias !468
  %103 = getelementptr inbounds float, float* %86, i64 %102
  %104 = getelementptr inbounds float, float* %103, i64 %44
  %105 = bitcast float* %104 to <8 x float>*
  %106 = load <8 x float>, <8 x float>* %105, align 32, !alias.scope !474, !noalias !477
  %107 = getelementptr inbounds float, float* %92, i64 %102
  %108 = getelementptr inbounds float, float* %107, i64 %44
  %109 = bitcast float* %108 to <8 x float>*
  %110 = load <8 x float>, <8 x float>* %109, align 32, !alias.scope !479, !noalias !482
  %111 = getelementptr inbounds float, float* %97, i64 %102
  %112 = getelementptr inbounds float, float* %111, i64 %44
  %113 = bitcast float* %112 to <8 x float>*
  %114 = load <8 x float>, <8 x float>* %113, align 32, !alias.scope !484, !noalias !487
  %115 = load float, float* %34, align 4, !noalias !468
  %116 = insertelement <8 x float> undef, float %115, i32 0
  %117 = shufflevector <8 x float> %116, <8 x float> undef, <8 x i32> zeroinitializer
  %118 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %325, <8 x float> %85, <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>) #14
  %119 = fmul <8 x float> %118, %118
  %120 = fcmp ugt <8 x float> %118, %117
  %121 = select <8 x i1> %120, <8 x float> %119, <8 x float> zeroinitializer
  %122 = fadd <8 x float> %121, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %123 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %121, <8 x float> %106, <8 x float> %91) #14
  %124 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %121, <8 x float> %110, <8 x float> %96) #14
  %125 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %121, <8 x float> %114, <8 x float> %101) #14
  %126 = add i64 %44, -1
  %127 = getelementptr inbounds float, float* %88, i64 %126
  %128 = bitcast float* %127 to <8 x float>*
  %129 = load <8 x float>, <8 x float>* %128, align 1, !alias.scope !489, !noalias !492
  %130 = getelementptr inbounds float, float* %93, i64 %126
  %131 = bitcast float* %130 to <8 x float>*
  %132 = load <8 x float>, <8 x float>* %131, align 1, !alias.scope !499, !noalias !502
  %133 = getelementptr inbounds float, float* %98, i64 %126
  %134 = bitcast float* %133 to <8 x float>*
  %135 = load <8 x float>, <8 x float>* %134, align 1, !alias.scope !504, !noalias !507
  %136 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %326, <8 x float> %85, <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>) #14
  %137 = fmul <8 x float> %136, %136
  %138 = fcmp ugt <8 x float> %136, %117
  %139 = select <8 x i1> %138, <8 x float> %137, <8 x float> zeroinitializer
  %140 = fadd <8 x float> %139, %122
  %141 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %139, <8 x float> %129, <8 x float> %123) #14
  %142 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %139, <8 x float> %132, <8 x float> %124) #14
  %143 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %139, <8 x float> %135, <8 x float> %125) #14
  %144 = add i64 %44, 1
  %145 = getelementptr inbounds float, float* %88, i64 %144
  %146 = bitcast float* %145 to <8 x float>*
  %147 = load <8 x float>, <8 x float>* %146, align 1, !alias.scope !509, !noalias !512
  %148 = getelementptr inbounds float, float* %93, i64 %144
  %149 = bitcast float* %148 to <8 x float>*
  %150 = load <8 x float>, <8 x float>* %149, align 1, !alias.scope !519, !noalias !522
  %151 = getelementptr inbounds float, float* %98, i64 %144
  %152 = bitcast float* %151 to <8 x float>*
  %153 = load <8 x float>, <8 x float>* %152, align 1, !alias.scope !524, !noalias !527
  %154 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %327, <8 x float> %85, <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>) #14
  %155 = fmul <8 x float> %154, %154
  %156 = fcmp ugt <8 x float> %154, %117
  %157 = select <8 x i1> %156, <8 x float> %155, <8 x float> zeroinitializer
  %158 = fadd <8 x float> %157, %140
  %159 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %157, <8 x float> %147, <8 x float> %141) #14
  %160 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %157, <8 x float> %150, <8 x float> %142) #14
  %161 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %157, <8 x float> %153, <8 x float> %143) #14
  %162 = load i64, i64* %29, align 8, !noalias !529
  %163 = getelementptr inbounds float, float* %86, i64 %162
  %164 = getelementptr inbounds float, float* %163, i64 %44
  %165 = bitcast float* %164 to <8 x float>*
  %166 = load <8 x float>, <8 x float>* %165, align 32, !alias.scope !535, !noalias !538
  %167 = getelementptr inbounds float, float* %92, i64 %162
  %168 = getelementptr inbounds float, float* %167, i64 %44
  %169 = bitcast float* %168 to <8 x float>*
  %170 = load <8 x float>, <8 x float>* %169, align 32, !alias.scope !540, !noalias !543
  %171 = getelementptr inbounds float, float* %97, i64 %162
  %172 = getelementptr inbounds float, float* %171, i64 %44
  %173 = bitcast float* %172 to <8 x float>*
  %174 = load <8 x float>, <8 x float>* %173, align 32, !alias.scope !545, !noalias !548
  %175 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %328, <8 x float> %85, <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>) #14
  %176 = fmul <8 x float> %175, %175
  %177 = fcmp ugt <8 x float> %175, %117
  %178 = select <8 x i1> %177, <8 x float> %176, <8 x float> zeroinitializer
  %179 = fadd <8 x float> %178, %158
  %180 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %178, <8 x float> %166, <8 x float> %159) #14
  %181 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %178, <8 x float> %170, <8 x float> %160) #14
  %182 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %178, <8 x float> %174, <8 x float> %161) #14
  %183 = fdiv <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %179
  %184 = fmul <8 x float> %180, %183
  %185 = load float*, float** %35, align 8
  %186 = getelementptr inbounds float, float* %185, i64 %44
  %187 = bitcast float* %186 to <8 x float>*
  store <8 x float> %184, <8 x float>* %187, align 32, !alias.scope !550
  %188 = fmul <8 x float> %183, %181
  %189 = load float*, float** %36, align 8
  %190 = getelementptr inbounds float, float* %189, i64 %44
  %191 = bitcast float* %190 to <8 x float>*
  store <8 x float> %188, <8 x float>* %191, align 32, !alias.scope !553
  %192 = fmul <8 x float> %183, %182
  br label %331

193:                                              ; preds = %193, %75
  %194 = phi i64 [ 0, %75 ], [ %329, %193 ]
  %195 = phi <8 x float> [ zeroinitializer, %75 ], [ %325, %193 ]
  %196 = phi <8 x float> [ zeroinitializer, %75 ], [ %326, %193 ]
  %197 = phi <8 x float> [ zeroinitializer, %75 ], [ %327, %193 ]
  %198 = phi <8 x float> [ zeroinitializer, %75 ], [ %328, %193 ]
  %199 = getelementptr inbounds %"struct.jxl::FilterRows", %"struct.jxl::FilterRows"* %0, i64 0, i32 0, i64 %194
  %200 = load float*, float** %199, align 8
  %201 = getelementptr inbounds float, float* %200, i64 %44
  %202 = getelementptr inbounds float, float* %201, i64 %79
  %203 = bitcast float* %202 to <8 x float>*
  %204 = load <8 x float>, <8 x float>* %203, align 32, !alias.scope !556, !noalias !559
  %205 = getelementptr inbounds float, float* %201, i64 %80
  %206 = bitcast float* %205 to <8 x float>*
  %207 = load <8 x float>, <8 x float>* %206, align 32, !alias.scope !561, !noalias !564
  %208 = fsub <8 x float> %204, %207
  %209 = bitcast <8 x float> %208 to <8 x i32>
  %210 = and <8 x i32> %209, <i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647>
  %211 = getelementptr inbounds float, float* %205, i64 -1
  %212 = bitcast float* %211 to <8 x float>*
  %213 = load <8 x float>, <8 x float>* %212, align 1, !alias.scope !566, !noalias !569
  %214 = fsub <8 x float> %213, %207
  %215 = bitcast <8 x float> %214 to <8 x i32>
  %216 = and <8 x i32> %215, <i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647>
  %217 = getelementptr inbounds float, float* %205, i64 1
  %218 = bitcast float* %217 to <8 x float>*
  %219 = load <8 x float>, <8 x float>* %218, align 1, !alias.scope !571, !noalias !574
  %220 = fsub <8 x float> %219, %207
  %221 = bitcast <8 x float> %220 to <8 x i32>
  %222 = and <8 x i32> %221, <i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647>
  %223 = getelementptr inbounds float, float* %201, i64 %81
  %224 = getelementptr inbounds float, float* %223, i64 -2
  %225 = bitcast float* %224 to <8 x float>*
  %226 = load <8 x float>, <8 x float>* %225, align 1, !alias.scope !576, !noalias !579
  %227 = getelementptr inbounds float, float* %223, i64 -1
  %228 = bitcast float* %227 to <8 x float>*
  %229 = load <8 x float>, <8 x float>* %228, align 1, !alias.scope !581, !noalias !584
  %230 = fsub <8 x float> %226, %229
  %231 = bitcast <8 x float> %230 to <8 x i32>
  %232 = and <8 x i32> %231, <i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647>
  %233 = bitcast <8 x i32> %216 to <8 x float>
  %234 = bitcast <8 x i32> %232 to <8 x float>
  %235 = fadd <8 x float> %233, %234
  %236 = fsub <8 x float> %213, %229
  %237 = bitcast <8 x float> %236 to <8 x i32>
  %238 = and <8 x i32> %237, <i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647>
  %239 = bitcast <8 x i32> %210 to <8 x float>
  %240 = bitcast <8 x i32> %238 to <8 x float>
  %241 = fadd <8 x float> %239, %240
  %242 = bitcast float* %223 to <8 x float>*
  %243 = load <8 x float>, <8 x float>* %242, align 1, !alias.scope !586, !noalias !589
  %244 = fsub <8 x float> %229, %243
  %245 = bitcast <8 x float> %244 to <8 x i32>
  %246 = and <8 x i32> %245, <i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647>
  %247 = bitcast <8 x i32> %246 to <8 x float>
  %248 = fadd <8 x float> %235, %247
  %249 = bitcast <8 x i32> %222 to <8 x float>
  %250 = fadd <8 x float> %249, %247
  %251 = fsub <8 x float> %243, %207
  %252 = bitcast <8 x float> %251 to <8 x i32>
  %253 = and <8 x i32> %252, <i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647>
  %254 = bitcast <8 x i32> %253 to <8 x float>
  %255 = fadd <8 x float> %241, %254
  %256 = getelementptr inbounds float, float* %223, i64 1
  %257 = bitcast float* %256 to <8 x float>*
  %258 = load <8 x float>, <8 x float>* %257, align 1, !alias.scope !591, !noalias !594
  %259 = fsub <8 x float> %219, %258
  %260 = bitcast <8 x float> %259 to <8 x i32>
  %261 = and <8 x i32> %260, <i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647>
  %262 = bitcast <8 x i32> %261 to <8 x float>
  %263 = fadd <8 x float> %255, %262
  %264 = fsub <8 x float> %243, %258
  %265 = bitcast <8 x float> %264 to <8 x i32>
  %266 = and <8 x i32> %265, <i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647>
  %267 = bitcast <8 x i32> %266 to <8 x float>
  %268 = fadd <8 x float> %248, %267
  %269 = fadd <8 x float> %250, %267
  %270 = getelementptr inbounds float, float* %223, i64 2
  %271 = bitcast float* %270 to <8 x float>*
  %272 = load <8 x float>, <8 x float>* %271, align 1, !alias.scope !596, !noalias !599
  %273 = fsub <8 x float> %272, %258
  %274 = bitcast <8 x float> %273 to <8 x i32>
  %275 = and <8 x i32> %274, <i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647>
  %276 = bitcast <8 x i32> %275 to <8 x float>
  %277 = fadd <8 x float> %269, %276
  %278 = getelementptr inbounds float, float* %201, i64 %82
  %279 = getelementptr inbounds float, float* %278, i64 -1
  %280 = bitcast float* %279 to <8 x float>*
  %281 = load <8 x float>, <8 x float>* %280, align 1, !alias.scope !601, !noalias !604
  %282 = fsub <8 x float> %281, %229
  %283 = bitcast <8 x float> %282 to <8 x i32>
  %284 = and <8 x i32> %283, <i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647>
  %285 = bitcast <8 x i32> %284 to <8 x float>
  %286 = fadd <8 x float> %254, %285
  %287 = bitcast float* %278 to <8 x float>*
  %288 = load <8 x float>, <8 x float>* %287, align 32, !alias.scope !606, !noalias !609
  %289 = fsub <8 x float> %243, %288
  %290 = bitcast <8 x float> %289 to <8 x i32>
  %291 = and <8 x i32> %290, <i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647>
  %292 = bitcast <8 x i32> %291 to <8 x float>
  %293 = fadd <8 x float> %263, %292
  %294 = fadd <8 x float> %286, %292
  %295 = fsub <8 x float> %281, %288
  %296 = bitcast <8 x float> %295 to <8 x i32>
  %297 = and <8 x i32> %296, <i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647>
  %298 = bitcast <8 x i32> %297 to <8 x float>
  %299 = fadd <8 x float> %268, %298
  %300 = getelementptr inbounds float, float* %278, i64 1
  %301 = bitcast float* %300 to <8 x float>*
  %302 = load <8 x float>, <8 x float>* %301, align 1, !alias.scope !611, !noalias !614
  %303 = fsub <8 x float> %302, %288
  %304 = bitcast <8 x float> %303 to <8 x i32>
  %305 = and <8 x i32> %304, <i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647>
  %306 = bitcast <8 x i32> %305 to <8 x float>
  %307 = fadd <8 x float> %277, %306
  %308 = fsub <8 x float> %302, %258
  %309 = bitcast <8 x float> %308 to <8 x i32>
  %310 = and <8 x i32> %309, <i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647>
  %311 = bitcast <8 x i32> %310 to <8 x float>
  %312 = fadd <8 x float> %294, %311
  %313 = getelementptr inbounds float, float* %201, i64 %83
  %314 = bitcast float* %313 to <8 x float>*
  %315 = load <8 x float>, <8 x float>* %314, align 32, !alias.scope !616, !noalias !619
  %316 = fsub <8 x float> %315, %288
  %317 = bitcast <8 x float> %316 to <8 x i32>
  %318 = and <8 x i32> %317, <i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647>
  %319 = bitcast <8 x i32> %318 to <8 x float>
  %320 = fadd <8 x float> %312, %319
  %321 = getelementptr inbounds %"struct.jxl::LoopFilter", %"struct.jxl::LoopFilter"* %1, i64 0, i32 17, i64 %194
  %322 = load float, float* %321, align 4
  %323 = insertelement <8 x float> undef, float %322, i32 0
  %324 = shufflevector <8 x float> %323, <8 x float> undef, <8 x i32> zeroinitializer
  %325 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %293, <8 x float> %324, <8 x float> %195) #14
  %326 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %299, <8 x float> %324, <8 x float> %196) #14
  %327 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %307, <8 x float> %324, <8 x float> %197) #14
  %328 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %320, <8 x float> %324, <8 x float> %198) #14
  %329 = add nuw nsw i64 %194, 1
  %330 = icmp eq i64 %329, 3
  br i1 %330, label %84, label %193

331:                                              ; preds = %50, %84
  %332 = phi <8 x float> [ %74, %50 ], [ %192, %84 ]
  %333 = load float*, float** %37, align 8
  %334 = getelementptr inbounds float, float* %333, i64 %44
  %335 = bitcast float* %334 to <8 x float>*
  store <8 x float> %332, <8 x float>* %335, align 32, !alias.scope !621
  %336 = add i64 %44, 8
  %337 = icmp ult i64 %336, %4
  br i1 %337, label %43, label %42
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN3jxl6N_AVX27Epf2RowERKNS_10FilterRowsERKNS_10LoopFilterERKNS_13FilterWeightsEmmmm(%"struct.jxl::FilterRows"* readonly dereferenceable(120), %"struct.jxl::LoopFilter"* nocapture readonly dereferenceable(144), %"struct.jxl::FilterWeights"* nocapture readnone dereferenceable(72), i64, i64, i64, i64) #6 {
  %8 = alloca <8 x float>, align 32
  %9 = getelementptr inbounds %"struct.jxl::FilterRows", %"struct.jxl::FilterRows"* %0, i64 0, i32 3
  %10 = load float*, float** %9, align 8
  %11 = getelementptr inbounds %"struct.jxl::LoopFilter", %"struct.jxl::LoopFilter"* %1, i64 0, i32 24
  %12 = load float, float* %11, align 8
  %13 = getelementptr inbounds %"struct.jxl::LoopFilter", %"struct.jxl::LoopFilter"* %1, i64 0, i32 25
  %14 = load float, float* %13, align 4
  %15 = fmul float %12, %14
  %16 = bitcast <8 x float>* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %16) #14
  %17 = getelementptr inbounds <8 x float>, <8 x float>* %8, i64 0, i64 0
  %18 = getelementptr inbounds <8 x float>, <8 x float>* %8, i64 0, i64 1
  %19 = getelementptr inbounds <8 x float>, <8 x float>* %8, i64 0, i64 5
  %20 = getelementptr inbounds <8 x float>, <8 x float>* %8, i64 0, i64 6
  %21 = getelementptr inbounds <8 x float>, <8 x float>* %8, i64 0, i64 7
  store float %15, float* %17, align 32
  %22 = insertelement <4 x float> undef, float %12, i32 0
  %23 = shufflevector <4 x float> %22, <4 x float> undef, <4 x i32> zeroinitializer
  %24 = bitcast float* %18 to <4 x float>*
  store <4 x float> %23, <4 x float>* %24, align 4
  store float %12, float* %19, align 4
  store float %12, float* %20, align 8
  store float %15, float* %21, align 4
  switch i64 %6, label %28 [
    i64 7, label %25
    i64 0, label %25
  ]

25:                                               ; preds = %7, %7
  %26 = insertelement <8 x float> undef, float %15, i32 0
  %27 = shufflevector <8 x float> %26, <8 x float> undef, <8 x i32> zeroinitializer
  store <8 x float> %27, <8 x float>* %8, align 32, !alias.scope !624
  br label %28

28:                                               ; preds = %25, %7
  %29 = icmp ult i64 %3, %4
  br i1 %29, label %30, label %48

30:                                               ; preds = %28
  %31 = getelementptr inbounds %"struct.jxl::FilterRows", %"struct.jxl::FilterRows"* %0, i64 0, i32 0, i64 0
  %32 = getelementptr inbounds %"struct.jxl::FilterRows", %"struct.jxl::FilterRows"* %0, i64 0, i32 1, i64 3
  %33 = getelementptr inbounds %"struct.jxl::FilterRows", %"struct.jxl::FilterRows"* %0, i64 0, i32 0, i64 1
  %34 = getelementptr inbounds %"struct.jxl::FilterRows", %"struct.jxl::FilterRows"* %0, i64 0, i32 0, i64 2
  %35 = getelementptr inbounds %"struct.jxl::FilterRows", %"struct.jxl::FilterRows"* %0, i64 0, i32 1, i64 2
  %36 = getelementptr inbounds %"struct.jxl::LoopFilter", %"struct.jxl::LoopFilter"* %1, i64 0, i32 17, i64 0
  %37 = getelementptr inbounds %"struct.jxl::LoopFilter", %"struct.jxl::LoopFilter"* %1, i64 0, i32 17, i64 1
  %38 = getelementptr inbounds %"struct.jxl::LoopFilter", %"struct.jxl::LoopFilter"* %1, i64 0, i32 17, i64 2
  %39 = getelementptr inbounds %"struct.jxl::LoopFilter", %"struct.jxl::LoopFilter"* %1, i64 0, i32 19
  %40 = getelementptr inbounds %"struct.jxl::FilterRows", %"struct.jxl::FilterRows"* %0, i64 0, i32 1, i64 4
  %41 = getelementptr inbounds %"struct.jxl::FilterRows", %"struct.jxl::FilterRows"* %0, i64 0, i32 2, i64 0
  %42 = getelementptr inbounds %"struct.jxl::FilterRows", %"struct.jxl::FilterRows"* %0, i64 0, i32 2, i64 1
  %43 = getelementptr inbounds %"struct.jxl::FilterRows", %"struct.jxl::FilterRows"* %0, i64 0, i32 2, i64 2
  %44 = add i64 %5, %3
  %45 = and i64 %44, 7
  %46 = getelementptr inbounds <8 x float>, <8 x float>* %8, i64 0, i64 %45
  %47 = bitcast float* %46 to <8 x float>*
  br label %49

48:                                               ; preds = %262, %28
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %16) #14
  ret void

49:                                               ; preds = %30, %262
  %50 = phi i64 [ %3, %30 ], [ %267, %262 ]
  %51 = add i64 %50, %5
  %52 = lshr i64 %51, 3
  %53 = getelementptr inbounds float, float* %10, i64 %52
  %54 = load float, float* %53, align 4
  %55 = fcmp olt float %54, 0xC00F3DF000000000
  br i1 %55, label %56, label %81

56:                                               ; preds = %49
  %57 = load float*, float** %31, align 8
  %58 = load i64, i64* %32, align 8
  %59 = getelementptr inbounds float, float* %57, i64 %50
  %60 = getelementptr inbounds float, float* %59, i64 %58
  %61 = bitcast float* %60 to <8 x float>*
  %62 = load <8 x float>, <8 x float>* %61, align 32, !alias.scope !627, !noalias !630
  %63 = load float*, float** %41, align 8
  %64 = getelementptr inbounds float, float* %63, i64 %50
  %65 = bitcast float* %64 to <8 x float>*
  store <8 x float> %62, <8 x float>* %65, align 32, !alias.scope !632
  %66 = load float*, float** %33, align 8
  %67 = load i64, i64* %32, align 8
  %68 = getelementptr inbounds float, float* %66, i64 %50
  %69 = getelementptr inbounds float, float* %68, i64 %67
  %70 = bitcast float* %69 to <8 x float>*
  %71 = load <8 x float>, <8 x float>* %70, align 32, !alias.scope !627, !noalias !630
  %72 = load float*, float** %42, align 8
  %73 = getelementptr inbounds float, float* %72, i64 %50
  %74 = bitcast float* %73 to <8 x float>*
  store <8 x float> %71, <8 x float>* %74, align 32, !alias.scope !632
  %75 = load float*, float** %34, align 8
  %76 = load i64, i64* %32, align 8
  %77 = getelementptr inbounds float, float* %75, i64 %50
  %78 = getelementptr inbounds float, float* %77, i64 %76
  %79 = bitcast float* %78 to <8 x float>*
  %80 = load <8 x float>, <8 x float>* %79, align 32, !alias.scope !627, !noalias !630
  br label %262

81:                                               ; preds = %49
  %82 = load <8 x float>, <8 x float>* %47, align 32, !alias.scope !635, !noalias !638
  %83 = insertelement <8 x float> undef, float %54, i32 0
  %84 = shufflevector <8 x float> %83, <8 x float> undef, <8 x i32> zeroinitializer
  %85 = fmul <8 x float> %84, %82
  %86 = load float*, float** %31, align 8
  %87 = load i64, i64* %32, align 8
  %88 = getelementptr inbounds float, float* %86, i64 %87
  %89 = getelementptr inbounds float, float* %88, i64 %50
  %90 = bitcast float* %89 to <8 x float>*
  %91 = load <8 x float>, <8 x float>* %90, align 32, !alias.scope !640, !noalias !643
  %92 = load float*, float** %33, align 8
  %93 = getelementptr inbounds float, float* %92, i64 %87
  %94 = getelementptr inbounds float, float* %93, i64 %50
  %95 = bitcast float* %94 to <8 x float>*
  %96 = load <8 x float>, <8 x float>* %95, align 32, !alias.scope !645, !noalias !648
  %97 = load float*, float** %34, align 8
  %98 = getelementptr inbounds float, float* %97, i64 %87
  %99 = getelementptr inbounds float, float* %98, i64 %50
  %100 = bitcast float* %99 to <8 x float>*
  %101 = load <8 x float>, <8 x float>* %100, align 32, !alias.scope !650, !noalias !653
  %102 = load i64, i64* %35, align 8, !noalias !655
  %103 = getelementptr inbounds float, float* %86, i64 %102
  %104 = getelementptr inbounds float, float* %103, i64 %50
  %105 = bitcast float* %104 to <8 x float>*
  %106 = load <8 x float>, <8 x float>* %105, align 32, !alias.scope !661, !noalias !664
  %107 = getelementptr inbounds float, float* %92, i64 %102
  %108 = getelementptr inbounds float, float* %107, i64 %50
  %109 = bitcast float* %108 to <8 x float>*
  %110 = load <8 x float>, <8 x float>* %109, align 32, !alias.scope !666, !noalias !669
  %111 = getelementptr inbounds float, float* %97, i64 %102
  %112 = getelementptr inbounds float, float* %111, i64 %50
  %113 = bitcast float* %112 to <8 x float>*
  %114 = load <8 x float>, <8 x float>* %113, align 32, !alias.scope !671, !noalias !674
  %115 = fsub <8 x float> %106, %91
  %116 = bitcast <8 x float> %115 to <8 x i32>
  %117 = and <8 x i32> %116, <i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647>
  %118 = load float, float* %36, align 8, !noalias !655
  %119 = insertelement <8 x float> undef, float %118, i32 0
  %120 = shufflevector <8 x float> %119, <8 x float> undef, <8 x i32> zeroinitializer
  %121 = bitcast <8 x i32> %117 to <8 x float>
  %122 = fmul <8 x float> %120, %121
  %123 = fsub <8 x float> %110, %96
  %124 = bitcast <8 x float> %123 to <8 x i32>
  %125 = and <8 x i32> %124, <i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647>
  %126 = load float, float* %37, align 4, !noalias !655
  %127 = insertelement <8 x float> undef, float %126, i32 0
  %128 = shufflevector <8 x float> %127, <8 x float> undef, <8 x i32> zeroinitializer
  %129 = bitcast <8 x i32> %125 to <8 x float>
  %130 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %129, <8 x float> %128, <8 x float> %122) #14
  %131 = fsub <8 x float> %114, %101
  %132 = bitcast <8 x float> %131 to <8 x i32>
  %133 = and <8 x i32> %132, <i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647>
  %134 = load float, float* %38, align 8, !noalias !655
  %135 = insertelement <8 x float> undef, float %134, i32 0
  %136 = shufflevector <8 x float> %135, <8 x float> undef, <8 x i32> zeroinitializer
  %137 = bitcast <8 x i32> %133 to <8 x float>
  %138 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %137, <8 x float> %136, <8 x float> %130) #14
  %139 = load float, float* %39, align 8, !noalias !655
  %140 = insertelement <8 x float> undef, float %139, i32 0
  %141 = shufflevector <8 x float> %140, <8 x float> undef, <8 x i32> zeroinitializer
  %142 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %138, <8 x float> %85, <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>) #14
  %143 = fmul <8 x float> %142, %142
  %144 = fcmp ugt <8 x float> %142, %141
  %145 = select <8 x i1> %144, <8 x float> %143, <8 x float> zeroinitializer
  %146 = fadd <8 x float> %145, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %147 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %145, <8 x float> %106, <8 x float> %91) #14
  %148 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %145, <8 x float> %110, <8 x float> %96) #14
  %149 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %145, <8 x float> %114, <8 x float> %101) #14
  %150 = add i64 %50, -1
  %151 = getelementptr inbounds float, float* %88, i64 %150
  %152 = bitcast float* %151 to <8 x float>*
  %153 = load <8 x float>, <8 x float>* %152, align 1, !alias.scope !676, !noalias !679
  %154 = getelementptr inbounds float, float* %93, i64 %150
  %155 = bitcast float* %154 to <8 x float>*
  %156 = load <8 x float>, <8 x float>* %155, align 1, !alias.scope !686, !noalias !689
  %157 = getelementptr inbounds float, float* %98, i64 %150
  %158 = bitcast float* %157 to <8 x float>*
  %159 = load <8 x float>, <8 x float>* %158, align 1, !alias.scope !691, !noalias !694
  %160 = fsub <8 x float> %153, %91
  %161 = bitcast <8 x float> %160 to <8 x i32>
  %162 = and <8 x i32> %161, <i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647>
  %163 = bitcast <8 x i32> %162 to <8 x float>
  %164 = fmul <8 x float> %120, %163
  %165 = fsub <8 x float> %156, %96
  %166 = bitcast <8 x float> %165 to <8 x i32>
  %167 = and <8 x i32> %166, <i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647>
  %168 = bitcast <8 x i32> %167 to <8 x float>
  %169 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %168, <8 x float> %128, <8 x float> %164) #14
  %170 = fsub <8 x float> %159, %101
  %171 = bitcast <8 x float> %170 to <8 x i32>
  %172 = and <8 x i32> %171, <i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647>
  %173 = bitcast <8 x i32> %172 to <8 x float>
  %174 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %173, <8 x float> %136, <8 x float> %169) #14
  %175 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %174, <8 x float> %85, <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>) #14
  %176 = fmul <8 x float> %175, %175
  %177 = fcmp ugt <8 x float> %175, %141
  %178 = select <8 x i1> %177, <8 x float> %176, <8 x float> zeroinitializer
  %179 = fadd <8 x float> %146, %178
  %180 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %178, <8 x float> %153, <8 x float> %147) #14
  %181 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %178, <8 x float> %156, <8 x float> %148) #14
  %182 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %178, <8 x float> %159, <8 x float> %149) #14
  %183 = add nuw i64 %50, 1
  %184 = getelementptr inbounds float, float* %88, i64 %183
  %185 = bitcast float* %184 to <8 x float>*
  %186 = load <8 x float>, <8 x float>* %185, align 1, !alias.scope !696, !noalias !699
  %187 = getelementptr inbounds float, float* %93, i64 %183
  %188 = bitcast float* %187 to <8 x float>*
  %189 = load <8 x float>, <8 x float>* %188, align 1, !alias.scope !706, !noalias !709
  %190 = getelementptr inbounds float, float* %98, i64 %183
  %191 = bitcast float* %190 to <8 x float>*
  %192 = load <8 x float>, <8 x float>* %191, align 1, !alias.scope !711, !noalias !714
  %193 = fsub <8 x float> %186, %91
  %194 = bitcast <8 x float> %193 to <8 x i32>
  %195 = and <8 x i32> %194, <i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647>
  %196 = bitcast <8 x i32> %195 to <8 x float>
  %197 = fmul <8 x float> %120, %196
  %198 = fsub <8 x float> %189, %96
  %199 = bitcast <8 x float> %198 to <8 x i32>
  %200 = and <8 x i32> %199, <i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647>
  %201 = bitcast <8 x i32> %200 to <8 x float>
  %202 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %201, <8 x float> %128, <8 x float> %197) #14
  %203 = fsub <8 x float> %192, %101
  %204 = bitcast <8 x float> %203 to <8 x i32>
  %205 = and <8 x i32> %204, <i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647>
  %206 = bitcast <8 x i32> %205 to <8 x float>
  %207 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %206, <8 x float> %136, <8 x float> %202) #14
  %208 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %207, <8 x float> %85, <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>) #14
  %209 = fmul <8 x float> %208, %208
  %210 = fcmp ugt <8 x float> %208, %141
  %211 = select <8 x i1> %210, <8 x float> %209, <8 x float> zeroinitializer
  %212 = fadd <8 x float> %179, %211
  %213 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %211, <8 x float> %186, <8 x float> %180) #14
  %214 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %211, <8 x float> %189, <8 x float> %181) #14
  %215 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %211, <8 x float> %192, <8 x float> %182) #14
  %216 = load i64, i64* %40, align 8, !noalias !716
  %217 = getelementptr inbounds float, float* %86, i64 %216
  %218 = getelementptr inbounds float, float* %217, i64 %50
  %219 = bitcast float* %218 to <8 x float>*
  %220 = load <8 x float>, <8 x float>* %219, align 32, !alias.scope !722, !noalias !725
  %221 = getelementptr inbounds float, float* %92, i64 %216
  %222 = getelementptr inbounds float, float* %221, i64 %50
  %223 = bitcast float* %222 to <8 x float>*
  %224 = load <8 x float>, <8 x float>* %223, align 32, !alias.scope !727, !noalias !730
  %225 = getelementptr inbounds float, float* %97, i64 %216
  %226 = getelementptr inbounds float, float* %225, i64 %50
  %227 = bitcast float* %226 to <8 x float>*
  %228 = load <8 x float>, <8 x float>* %227, align 32, !alias.scope !732, !noalias !735
  %229 = fsub <8 x float> %220, %91
  %230 = bitcast <8 x float> %229 to <8 x i32>
  %231 = and <8 x i32> %230, <i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647>
  %232 = bitcast <8 x i32> %231 to <8 x float>
  %233 = fmul <8 x float> %120, %232
  %234 = fsub <8 x float> %224, %96
  %235 = bitcast <8 x float> %234 to <8 x i32>
  %236 = and <8 x i32> %235, <i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647>
  %237 = bitcast <8 x i32> %236 to <8 x float>
  %238 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %237, <8 x float> %128, <8 x float> %233) #14
  %239 = fsub <8 x float> %228, %101
  %240 = bitcast <8 x float> %239 to <8 x i32>
  %241 = and <8 x i32> %240, <i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647>
  %242 = bitcast <8 x i32> %241 to <8 x float>
  %243 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %242, <8 x float> %136, <8 x float> %238) #14
  %244 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %243, <8 x float> %85, <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>) #14
  %245 = fmul <8 x float> %244, %244
  %246 = fcmp ugt <8 x float> %244, %141
  %247 = select <8 x i1> %246, <8 x float> %245, <8 x float> zeroinitializer
  %248 = fadd <8 x float> %212, %247
  %249 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %247, <8 x float> %220, <8 x float> %213) #14
  %250 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %247, <8 x float> %224, <8 x float> %214) #14
  %251 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %247, <8 x float> %228, <8 x float> %215) #14
  %252 = fdiv <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %248
  %253 = fmul <8 x float> %249, %252
  %254 = load float*, float** %41, align 8
  %255 = getelementptr inbounds float, float* %254, i64 %50
  %256 = bitcast float* %255 to <8 x float>*
  store <8 x float> %253, <8 x float>* %256, align 32, !alias.scope !737
  %257 = fmul <8 x float> %250, %252
  %258 = load float*, float** %42, align 8
  %259 = getelementptr inbounds float, float* %258, i64 %50
  %260 = bitcast float* %259 to <8 x float>*
  store <8 x float> %257, <8 x float>* %260, align 32, !alias.scope !740
  %261 = fmul <8 x float> %251, %252
  br label %262

262:                                              ; preds = %56, %81
  %263 = phi <8 x float> [ %80, %56 ], [ %261, %81 ]
  %264 = load float*, float** %43, align 8
  %265 = getelementptr inbounds float, float* %264, i64 %50
  %266 = bitcast float* %265 to <8 x float>*
  store <8 x float> %263, <8 x float>* %266, align 32, !alias.scope !743
  %267 = add i64 %50, 8
  %268 = icmp ult i64 %267, %4
  br i1 %268, label %49, label %48
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN3jxl6N_AVX218FilterPipelineInitEPNS_14FilterPipelineERKNS_10LoopFilterERKNS_6Image3IfEERKNS_4RectESC_mPS7_SC_(%"class.jxl::FilterPipeline"*, %"struct.jxl::LoopFilter"* nocapture readonly dereferenceable(144), %"class.jxl::Image3"* dereferenceable(96), %"class.jxl::Rect"* nocapture readonly dereferenceable(32), %"class.jxl::Rect"* nocapture readonly dereferenceable(32), i64, %"class.jxl::Image3"*, %"class.jxl::Rect"* nocapture readonly dereferenceable(32)) #7 {
  %9 = getelementptr inbounds %"struct.jxl::LoopFilter", %"struct.jxl::LoopFilter"* %1, i64 0, i32 11
  %10 = load i32, i32* %9, align 4
  %11 = icmp ne i32 %10, 0
  %12 = getelementptr inbounds %"class.jxl::FilterPipeline", %"class.jxl::FilterPipeline"* %0, i64 0, i32 4
  %13 = zext i1 %11 to i8
  store i8 %13, i8* %12, align 8
  %14 = getelementptr inbounds %"class.jxl::FilterPipeline", %"class.jxl::FilterPipeline"* %0, i64 0, i32 3
  store i64 0, i64* %14, align 8
  %15 = getelementptr inbounds %"class.jxl::FilterPipeline", %"class.jxl::FilterPipeline"* %0, i64 0, i32 1
  store i64 0, i64* %15, align 8
  %16 = getelementptr inbounds %"class.jxl::FilterPipeline", %"class.jxl::FilterPipeline"* %0, i64 0, i32 2, i64 0, i32 0
  store %"class.jxl::Image3"* %2, %"class.jxl::Image3"** %16, align 8
  %17 = getelementptr inbounds %"class.jxl::FilterPipeline", %"class.jxl::FilterPipeline"* %0, i64 0, i32 2, i64 0, i32 4
  %18 = bitcast %"class.jxl::Rect"* %17 to i8*
  %19 = bitcast %"class.jxl::Rect"* %3 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %18, i8* align 8 %19, i64 32, i1 false) #14
  %20 = getelementptr inbounds %"class.jxl::FilterPipeline", %"class.jxl::FilterPipeline"* %0, i64 0, i32 2, i64 0, i32 6
  %21 = bitcast %"class.jxl::Rect"* %20 to i8*
  %22 = bitcast %"class.jxl::Rect"* %4 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %21, i8* align 8 %22, i64 32, i1 false) #14
  %23 = getelementptr inbounds %"class.jxl::FilterPipeline", %"class.jxl::FilterPipeline"* %0, i64 0, i32 2, i64 0, i32 7
  store i64 %5, i64* %23, align 8
  %24 = getelementptr inbounds %"class.jxl::FilterPipeline", %"class.jxl::FilterPipeline"* %0, i64 0, i32 2, i64 0, i32 8
  store void (%"struct.jxl::FilterPipeline::FilterStep"*, %"struct.jxl::FilterRows"*, i64)* @_ZZN3jxl14FilterPipeline10FilterStep8SetInputEPKNS_6Image3IfEERKNS_4RectES8_mENUlRKS1_PNS_10FilterRowsElE_8__invokeESA_SC_l, void (%"struct.jxl::FilterPipeline::FilterStep"*, %"struct.jxl::FilterRows"*, i64)** %24, align 8
  %25 = getelementptr inbounds %"struct.jxl::LoopFilter", %"struct.jxl::LoopFilter"* %1, i64 0, i32 2
  %26 = load i8, i8* %25, align 1, !range !311
  %27 = icmp eq i8 %26, 0
  br i1 %27, label %31, label %28

28:                                               ; preds = %8
  %29 = getelementptr inbounds %"class.jxl::FilterPipeline", %"class.jxl::FilterPipeline"* %0, i64 0, i32 2, i64 0, i32 10
  %30 = bitcast %"struct.jxl::FilterDefinition"* %29 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %30, i8* align 8 bitcast (%"struct.jxl::FilterDefinition"* @_ZN3jxl6N_AVX2L15kGaborishFilterE to i8*), i64 16, i1 false) #14
  store i64 1, i64* %14, align 8
  br label %31

31:                                               ; preds = %8, %28
  %32 = phi i64 [ 0, %8 ], [ 1, %28 ]
  %33 = load i32, i32* %9, align 4
  switch i32 %33, label %162 [
    i32 1, label %34
    i32 2, label %54
    i32 3, label %96
  ]

34:                                               ; preds = %31
  %35 = getelementptr inbounds %"class.jxl::FilterPipeline", %"class.jxl::FilterPipeline"* %0, i64 0, i32 2, i64 %32, i32 10
  %36 = bitcast %"struct.jxl::FilterDefinition"* %35 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %36, i8* align 8 bitcast (%"struct.jxl::FilterDefinition"* @_ZN3jxl6N_AVX2L11kEpf1FilterE to i8*), i64 16, i1 false) #14
  %37 = load i64, i64* %14, align 8
  %38 = icmp eq i64 %37, 0
  br i1 %38, label %160, label %39

39:                                               ; preds = %34
  %40 = add i64 %37, -1
  %41 = getelementptr inbounds %"class.jxl::FilterPipeline", %"class.jxl::FilterPipeline"* %0, i64 0, i32 0
  %42 = getelementptr inbounds %"class.jxl::FilterPipeline", %"class.jxl::FilterPipeline"* %0, i64 0, i32 2, i64 %40, i32 2
  store %"class.jxl::Image3"* %41, %"class.jxl::Image3"** %42, align 8
  %43 = getelementptr inbounds %"class.jxl::FilterPipeline", %"class.jxl::FilterPipeline"* %0, i64 0, i32 2, i64 %40, i32 3
  store i64 0, i64* %43, align 8
  %44 = getelementptr inbounds %"class.jxl::FilterPipeline", %"class.jxl::FilterPipeline"* %0, i64 0, i32 2, i64 %40, i32 9
  store void (%"struct.jxl::FilterPipeline::FilterStep"*, %"struct.jxl::FilterRows"*, i64)* @_ZZN3jxl14FilterPipeline10FilterStep22SetOutputCyclicStorageILm5EEEvPNS_6Image3IfEEmENUlRKS1_PNS_10FilterRowsElE_8__invokeES7_S9_l, void (%"struct.jxl::FilterPipeline::FilterStep"*, %"struct.jxl::FilterRows"*, i64)** %44, align 8
  %45 = load i64, i64* %14, align 8
  %46 = load i64, i64* %15, align 8
  %47 = getelementptr inbounds %"class.jxl::FilterPipeline", %"class.jxl::FilterPipeline"* %0, i64 0, i32 2, i64 %45, i32 0
  store %"class.jxl::Image3"* %41, %"class.jxl::Image3"** %47, align 8
  %48 = getelementptr inbounds %"class.jxl::FilterPipeline", %"class.jxl::FilterPipeline"* %0, i64 0, i32 2, i64 %45, i32 1
  store i64 %46, i64* %48, align 8
  %49 = getelementptr inbounds %"class.jxl::FilterPipeline", %"class.jxl::FilterPipeline"* %0, i64 0, i32 2, i64 %45, i32 8
  store void (%"struct.jxl::FilterPipeline::FilterStep"*, %"struct.jxl::FilterRows"*, i64)* @_ZZN3jxl14FilterPipeline10FilterStep21SetInputCyclicStorageILm5EEEvPKNS_6Image3IfEEmENUlRKS1_PNS_10FilterRowsElE_8__invokeES8_SA_l, void (%"struct.jxl::FilterPipeline::FilterStep"*, %"struct.jxl::FilterRows"*, i64)** %49, align 8
  %50 = load i64, i64* %15, align 8
  %51 = add i64 %50, 5
  store i64 %51, i64* %15, align 8
  %52 = load i64, i64* %14, align 8
  %53 = add i64 %52, 1
  br label %160

54:                                               ; preds = %31
  %55 = getelementptr inbounds %"class.jxl::FilterPipeline", %"class.jxl::FilterPipeline"* %0, i64 0, i32 2, i64 %32, i32 10
  %56 = bitcast %"struct.jxl::FilterDefinition"* %55 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %56, i8* align 8 bitcast (%"struct.jxl::FilterDefinition"* @_ZN3jxl6N_AVX2L11kEpf1FilterE to i8*), i64 16, i1 false) #14
  %57 = load i64, i64* %14, align 8
  %58 = icmp eq i64 %57, 0
  br i1 %58, label %74, label %59

59:                                               ; preds = %54
  %60 = add i64 %57, -1
  %61 = getelementptr inbounds %"class.jxl::FilterPipeline", %"class.jxl::FilterPipeline"* %0, i64 0, i32 0
  %62 = getelementptr inbounds %"class.jxl::FilterPipeline", %"class.jxl::FilterPipeline"* %0, i64 0, i32 2, i64 %60, i32 2
  store %"class.jxl::Image3"* %61, %"class.jxl::Image3"** %62, align 8
  %63 = getelementptr inbounds %"class.jxl::FilterPipeline", %"class.jxl::FilterPipeline"* %0, i64 0, i32 2, i64 %60, i32 3
  store i64 0, i64* %63, align 8
  %64 = getelementptr inbounds %"class.jxl::FilterPipeline", %"class.jxl::FilterPipeline"* %0, i64 0, i32 2, i64 %60, i32 9
  store void (%"struct.jxl::FilterPipeline::FilterStep"*, %"struct.jxl::FilterRows"*, i64)* @_ZZN3jxl14FilterPipeline10FilterStep22SetOutputCyclicStorageILm5EEEvPNS_6Image3IfEEmENUlRKS1_PNS_10FilterRowsElE_8__invokeES7_S9_l, void (%"struct.jxl::FilterPipeline::FilterStep"*, %"struct.jxl::FilterRows"*, i64)** %64, align 8
  %65 = load i64, i64* %14, align 8
  %66 = load i64, i64* %15, align 8
  %67 = getelementptr inbounds %"class.jxl::FilterPipeline", %"class.jxl::FilterPipeline"* %0, i64 0, i32 2, i64 %65, i32 0
  store %"class.jxl::Image3"* %61, %"class.jxl::Image3"** %67, align 8
  %68 = getelementptr inbounds %"class.jxl::FilterPipeline", %"class.jxl::FilterPipeline"* %0, i64 0, i32 2, i64 %65, i32 1
  store i64 %66, i64* %68, align 8
  %69 = getelementptr inbounds %"class.jxl::FilterPipeline", %"class.jxl::FilterPipeline"* %0, i64 0, i32 2, i64 %65, i32 8
  store void (%"struct.jxl::FilterPipeline::FilterStep"*, %"struct.jxl::FilterRows"*, i64)* @_ZZN3jxl14FilterPipeline10FilterStep21SetInputCyclicStorageILm5EEEvPKNS_6Image3IfEEmENUlRKS1_PNS_10FilterRowsElE_8__invokeES8_SA_l, void (%"struct.jxl::FilterPipeline::FilterStep"*, %"struct.jxl::FilterRows"*, i64)** %69, align 8
  %70 = load i64, i64* %15, align 8
  %71 = add i64 %70, 5
  store i64 %71, i64* %15, align 8
  %72 = load i64, i64* %14, align 8
  %73 = add i64 %72, 1
  br label %74

74:                                               ; preds = %54, %59
  %75 = phi i64 [ 1, %54 ], [ %73, %59 ]
  store i64 %75, i64* %14, align 8
  %76 = getelementptr inbounds %"class.jxl::FilterPipeline", %"class.jxl::FilterPipeline"* %0, i64 0, i32 2, i64 %75, i32 10
  %77 = bitcast %"struct.jxl::FilterDefinition"* %76 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %77, i8* align 8 bitcast (%"struct.jxl::FilterDefinition"* @_ZN3jxl6N_AVX2L11kEpf2FilterE to i8*), i64 16, i1 false) #14
  %78 = load i64, i64* %14, align 8
  %79 = icmp eq i64 %78, 0
  br i1 %79, label %160, label %80

80:                                               ; preds = %74
  %81 = add i64 %78, -1
  %82 = getelementptr inbounds %"class.jxl::FilterPipeline", %"class.jxl::FilterPipeline"* %0, i64 0, i32 0
  %83 = load i64, i64* %15, align 8
  %84 = getelementptr inbounds %"class.jxl::FilterPipeline", %"class.jxl::FilterPipeline"* %0, i64 0, i32 2, i64 %81, i32 2
  store %"class.jxl::Image3"* %82, %"class.jxl::Image3"** %84, align 8
  %85 = getelementptr inbounds %"class.jxl::FilterPipeline", %"class.jxl::FilterPipeline"* %0, i64 0, i32 2, i64 %81, i32 3
  store i64 %83, i64* %85, align 8
  %86 = getelementptr inbounds %"class.jxl::FilterPipeline", %"class.jxl::FilterPipeline"* %0, i64 0, i32 2, i64 %81, i32 9
  store void (%"struct.jxl::FilterPipeline::FilterStep"*, %"struct.jxl::FilterRows"*, i64)* @_ZZN3jxl14FilterPipeline10FilterStep22SetOutputCyclicStorageILm3EEEvPNS_6Image3IfEEmENUlRKS1_PNS_10FilterRowsElE_8__invokeES7_S9_l, void (%"struct.jxl::FilterPipeline::FilterStep"*, %"struct.jxl::FilterRows"*, i64)** %86, align 8
  %87 = load i64, i64* %14, align 8
  %88 = load i64, i64* %15, align 8
  %89 = getelementptr inbounds %"class.jxl::FilterPipeline", %"class.jxl::FilterPipeline"* %0, i64 0, i32 2, i64 %87, i32 0
  store %"class.jxl::Image3"* %82, %"class.jxl::Image3"** %89, align 8
  %90 = getelementptr inbounds %"class.jxl::FilterPipeline", %"class.jxl::FilterPipeline"* %0, i64 0, i32 2, i64 %87, i32 1
  store i64 %88, i64* %90, align 8
  %91 = getelementptr inbounds %"class.jxl::FilterPipeline", %"class.jxl::FilterPipeline"* %0, i64 0, i32 2, i64 %87, i32 8
  store void (%"struct.jxl::FilterPipeline::FilterStep"*, %"struct.jxl::FilterRows"*, i64)* @_ZZN3jxl14FilterPipeline10FilterStep21SetInputCyclicStorageILm3EEEvPKNS_6Image3IfEEmENUlRKS1_PNS_10FilterRowsElE_8__invokeES8_SA_l, void (%"struct.jxl::FilterPipeline::FilterStep"*, %"struct.jxl::FilterRows"*, i64)** %91, align 8
  %92 = load i64, i64* %15, align 8
  %93 = add i64 %92, 3
  store i64 %93, i64* %15, align 8
  %94 = load i64, i64* %14, align 8
  %95 = add i64 %94, 1
  br label %160

96:                                               ; preds = %31
  %97 = getelementptr inbounds %"class.jxl::FilterPipeline", %"class.jxl::FilterPipeline"* %0, i64 0, i32 2, i64 %32, i32 10
  %98 = bitcast %"struct.jxl::FilterDefinition"* %97 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %98, i8* align 8 bitcast (%"struct.jxl::FilterDefinition"* @_ZN3jxl6N_AVX2L11kEpf0FilterE to i8*), i64 16, i1 false) #14
  %99 = load i64, i64* %14, align 8
  %100 = icmp eq i64 %99, 0
  br i1 %100, label %116, label %101

101:                                              ; preds = %96
  %102 = add i64 %99, -1
  %103 = getelementptr inbounds %"class.jxl::FilterPipeline", %"class.jxl::FilterPipeline"* %0, i64 0, i32 0
  %104 = getelementptr inbounds %"class.jxl::FilterPipeline", %"class.jxl::FilterPipeline"* %0, i64 0, i32 2, i64 %102, i32 2
  store %"class.jxl::Image3"* %103, %"class.jxl::Image3"** %104, align 8
  %105 = getelementptr inbounds %"class.jxl::FilterPipeline", %"class.jxl::FilterPipeline"* %0, i64 0, i32 2, i64 %102, i32 3
  store i64 0, i64* %105, align 8
  %106 = getelementptr inbounds %"class.jxl::FilterPipeline", %"class.jxl::FilterPipeline"* %0, i64 0, i32 2, i64 %102, i32 9
  store void (%"struct.jxl::FilterPipeline::FilterStep"*, %"struct.jxl::FilterRows"*, i64)* @_ZZN3jxl14FilterPipeline10FilterStep22SetOutputCyclicStorageILm7EEEvPNS_6Image3IfEEmENUlRKS1_PNS_10FilterRowsElE_8__invokeES7_S9_l, void (%"struct.jxl::FilterPipeline::FilterStep"*, %"struct.jxl::FilterRows"*, i64)** %106, align 8
  %107 = load i64, i64* %14, align 8
  %108 = load i64, i64* %15, align 8
  %109 = getelementptr inbounds %"class.jxl::FilterPipeline", %"class.jxl::FilterPipeline"* %0, i64 0, i32 2, i64 %107, i32 0
  store %"class.jxl::Image3"* %103, %"class.jxl::Image3"** %109, align 8
  %110 = getelementptr inbounds %"class.jxl::FilterPipeline", %"class.jxl::FilterPipeline"* %0, i64 0, i32 2, i64 %107, i32 1
  store i64 %108, i64* %110, align 8
  %111 = getelementptr inbounds %"class.jxl::FilterPipeline", %"class.jxl::FilterPipeline"* %0, i64 0, i32 2, i64 %107, i32 8
  store void (%"struct.jxl::FilterPipeline::FilterStep"*, %"struct.jxl::FilterRows"*, i64)* @_ZZN3jxl14FilterPipeline10FilterStep21SetInputCyclicStorageILm7EEEvPKNS_6Image3IfEEmENUlRKS1_PNS_10FilterRowsElE_8__invokeES8_SA_l, void (%"struct.jxl::FilterPipeline::FilterStep"*, %"struct.jxl::FilterRows"*, i64)** %111, align 8
  %112 = load i64, i64* %15, align 8
  %113 = add i64 %112, 7
  store i64 %113, i64* %15, align 8
  %114 = load i64, i64* %14, align 8
  %115 = add i64 %114, 1
  br label %116

116:                                              ; preds = %96, %101
  %117 = phi i64 [ 1, %96 ], [ %115, %101 ]
  store i64 %117, i64* %14, align 8
  %118 = getelementptr inbounds %"class.jxl::FilterPipeline", %"class.jxl::FilterPipeline"* %0, i64 0, i32 2, i64 %117, i32 10
  %119 = bitcast %"struct.jxl::FilterDefinition"* %118 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %119, i8* align 8 bitcast (%"struct.jxl::FilterDefinition"* @_ZN3jxl6N_AVX2L11kEpf1FilterE to i8*), i64 16, i1 false) #14
  %120 = load i64, i64* %14, align 8
  %121 = icmp eq i64 %120, 0
  br i1 %121, label %138, label %122

122:                                              ; preds = %116
  %123 = add i64 %120, -1
  %124 = getelementptr inbounds %"class.jxl::FilterPipeline", %"class.jxl::FilterPipeline"* %0, i64 0, i32 0
  %125 = load i64, i64* %15, align 8
  %126 = getelementptr inbounds %"class.jxl::FilterPipeline", %"class.jxl::FilterPipeline"* %0, i64 0, i32 2, i64 %123, i32 2
  store %"class.jxl::Image3"* %124, %"class.jxl::Image3"** %126, align 8
  %127 = getelementptr inbounds %"class.jxl::FilterPipeline", %"class.jxl::FilterPipeline"* %0, i64 0, i32 2, i64 %123, i32 3
  store i64 %125, i64* %127, align 8
  %128 = getelementptr inbounds %"class.jxl::FilterPipeline", %"class.jxl::FilterPipeline"* %0, i64 0, i32 2, i64 %123, i32 9
  store void (%"struct.jxl::FilterPipeline::FilterStep"*, %"struct.jxl::FilterRows"*, i64)* @_ZZN3jxl14FilterPipeline10FilterStep22SetOutputCyclicStorageILm5EEEvPNS_6Image3IfEEmENUlRKS1_PNS_10FilterRowsElE_8__invokeES7_S9_l, void (%"struct.jxl::FilterPipeline::FilterStep"*, %"struct.jxl::FilterRows"*, i64)** %128, align 8
  %129 = load i64, i64* %14, align 8
  %130 = load i64, i64* %15, align 8
  %131 = getelementptr inbounds %"class.jxl::FilterPipeline", %"class.jxl::FilterPipeline"* %0, i64 0, i32 2, i64 %129, i32 0
  store %"class.jxl::Image3"* %124, %"class.jxl::Image3"** %131, align 8
  %132 = getelementptr inbounds %"class.jxl::FilterPipeline", %"class.jxl::FilterPipeline"* %0, i64 0, i32 2, i64 %129, i32 1
  store i64 %130, i64* %132, align 8
  %133 = getelementptr inbounds %"class.jxl::FilterPipeline", %"class.jxl::FilterPipeline"* %0, i64 0, i32 2, i64 %129, i32 8
  store void (%"struct.jxl::FilterPipeline::FilterStep"*, %"struct.jxl::FilterRows"*, i64)* @_ZZN3jxl14FilterPipeline10FilterStep21SetInputCyclicStorageILm5EEEvPKNS_6Image3IfEEmENUlRKS1_PNS_10FilterRowsElE_8__invokeES8_SA_l, void (%"struct.jxl::FilterPipeline::FilterStep"*, %"struct.jxl::FilterRows"*, i64)** %133, align 8
  %134 = load i64, i64* %15, align 8
  %135 = add i64 %134, 5
  store i64 %135, i64* %15, align 8
  %136 = load i64, i64* %14, align 8
  %137 = add i64 %136, 1
  br label %138

138:                                              ; preds = %116, %122
  %139 = phi i64 [ 1, %116 ], [ %137, %122 ]
  store i64 %139, i64* %14, align 8
  %140 = getelementptr inbounds %"class.jxl::FilterPipeline", %"class.jxl::FilterPipeline"* %0, i64 0, i32 2, i64 %139, i32 10
  %141 = bitcast %"struct.jxl::FilterDefinition"* %140 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %141, i8* align 8 bitcast (%"struct.jxl::FilterDefinition"* @_ZN3jxl6N_AVX2L11kEpf2FilterE to i8*), i64 16, i1 false) #14
  %142 = load i64, i64* %14, align 8
  %143 = icmp eq i64 %142, 0
  br i1 %143, label %160, label %144

144:                                              ; preds = %138
  %145 = add i64 %142, -1
  %146 = getelementptr inbounds %"class.jxl::FilterPipeline", %"class.jxl::FilterPipeline"* %0, i64 0, i32 0
  %147 = load i64, i64* %15, align 8
  %148 = getelementptr inbounds %"class.jxl::FilterPipeline", %"class.jxl::FilterPipeline"* %0, i64 0, i32 2, i64 %145, i32 2
  store %"class.jxl::Image3"* %146, %"class.jxl::Image3"** %148, align 8
  %149 = getelementptr inbounds %"class.jxl::FilterPipeline", %"class.jxl::FilterPipeline"* %0, i64 0, i32 2, i64 %145, i32 3
  store i64 %147, i64* %149, align 8
  %150 = getelementptr inbounds %"class.jxl::FilterPipeline", %"class.jxl::FilterPipeline"* %0, i64 0, i32 2, i64 %145, i32 9
  store void (%"struct.jxl::FilterPipeline::FilterStep"*, %"struct.jxl::FilterRows"*, i64)* @_ZZN3jxl14FilterPipeline10FilterStep22SetOutputCyclicStorageILm3EEEvPNS_6Image3IfEEmENUlRKS1_PNS_10FilterRowsElE_8__invokeES7_S9_l, void (%"struct.jxl::FilterPipeline::FilterStep"*, %"struct.jxl::FilterRows"*, i64)** %150, align 8
  %151 = load i64, i64* %14, align 8
  %152 = load i64, i64* %15, align 8
  %153 = getelementptr inbounds %"class.jxl::FilterPipeline", %"class.jxl::FilterPipeline"* %0, i64 0, i32 2, i64 %151, i32 0
  store %"class.jxl::Image3"* %146, %"class.jxl::Image3"** %153, align 8
  %154 = getelementptr inbounds %"class.jxl::FilterPipeline", %"class.jxl::FilterPipeline"* %0, i64 0, i32 2, i64 %151, i32 1
  store i64 %152, i64* %154, align 8
  %155 = getelementptr inbounds %"class.jxl::FilterPipeline", %"class.jxl::FilterPipeline"* %0, i64 0, i32 2, i64 %151, i32 8
  store void (%"struct.jxl::FilterPipeline::FilterStep"*, %"struct.jxl::FilterRows"*, i64)* @_ZZN3jxl14FilterPipeline10FilterStep21SetInputCyclicStorageILm3EEEvPKNS_6Image3IfEEmENUlRKS1_PNS_10FilterRowsElE_8__invokeES8_SA_l, void (%"struct.jxl::FilterPipeline::FilterStep"*, %"struct.jxl::FilterRows"*, i64)** %155, align 8
  %156 = load i64, i64* %15, align 8
  %157 = add i64 %156, 3
  store i64 %157, i64* %15, align 8
  %158 = load i64, i64* %14, align 8
  %159 = add i64 %158, 1
  br label %160

160:                                              ; preds = %144, %138, %80, %74, %39, %34
  %161 = phi i64 [ 1, %34 ], [ %53, %39 ], [ 1, %74 ], [ %95, %80 ], [ 1, %138 ], [ %159, %144 ]
  store i64 %161, i64* %14, align 8
  br label %162

162:                                              ; preds = %160, %31
  %163 = phi i64 [ %32, %31 ], [ %161, %160 ]
  %164 = add i64 %163, -1
  %165 = getelementptr inbounds %"class.jxl::FilterPipeline", %"class.jxl::FilterPipeline"* %0, i64 0, i32 2, i64 %164, i32 2
  store %"class.jxl::Image3"* %6, %"class.jxl::Image3"** %165, align 8
  %166 = getelementptr inbounds %"class.jxl::FilterPipeline", %"class.jxl::FilterPipeline"* %0, i64 0, i32 2, i64 %164, i32 5
  %167 = bitcast %"class.jxl::Rect"* %166 to i8*
  %168 = bitcast %"class.jxl::Rect"* %7 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %167, i8* align 8 %168, i64 32, i1 false) #14
  %169 = getelementptr inbounds %"class.jxl::FilterPipeline", %"class.jxl::FilterPipeline"* %0, i64 0, i32 2, i64 %164, i32 9
  store void (%"struct.jxl::FilterPipeline::FilterStep"*, %"struct.jxl::FilterRows"*, i64)* @_ZZN3jxl14FilterPipeline10FilterStep9SetOutputEPNS_6Image3IfEERKNS_4RectEENUlRKS1_PNS_10FilterRowsElE_8__invokeES9_SB_l, void (%"struct.jxl::FilterPipeline::FilterStep"*, %"struct.jxl::FilterRows"*, i64)** %169, align 8
  %170 = load i64, i64* %14, align 8
  %171 = trunc i64 %170 to i32
  %172 = add i32 %171, -1
  %173 = icmp sgt i32 %172, -1
  br i1 %173, label %174, label %176

174:                                              ; preds = %162
  %175 = sext i32 %172 to i64
  br label %187

176:                                              ; preds = %187, %162
  %177 = phi i64 [ 0, %162 ], [ %196, %187 ]
  %178 = getelementptr inbounds %"class.jxl::FilterPipeline", %"class.jxl::FilterPipeline"* %0, i64 0, i32 5
  store i64 %177, i64* %178, align 8
  %179 = load i32, i32* %9, align 4
  %180 = zext i32 %179 to i64
  %181 = getelementptr inbounds [4 x i64], [4 x i64]* @_ZZNK3jxl10LoopFilter7PaddingEvE20padding_per_epf_iter, i64 0, i64 %180
  %182 = load i64, i64* %181, align 8
  %183 = load i8, i8* %25, align 1, !range !311
  %184 = zext i8 %183 to i64
  %185 = add i64 %182, %184
  %186 = icmp eq i64 %177, %185
  br i1 %186, label %203, label %200

187:                                              ; preds = %174, %187
  %188 = phi i64 [ %175, %174 ], [ %199, %187 ]
  %189 = phi i32 [ %172, %174 ], [ %197, %187 ]
  %190 = phi i64 [ 0, %174 ], [ %196, %187 ]
  %191 = add i64 %190, 7
  %192 = and i64 %191, -8
  %193 = getelementptr inbounds %"class.jxl::FilterPipeline", %"class.jxl::FilterPipeline"* %0, i64 0, i32 2, i64 %188, i32 11
  store i64 %192, i64* %193, align 8
  %194 = getelementptr inbounds %"class.jxl::FilterPipeline", %"class.jxl::FilterPipeline"* %0, i64 0, i32 2, i64 %188, i32 10, i32 1
  %195 = load i64, i64* %194, align 8
  %196 = add i64 %195, %190
  %197 = add nsw i32 %189, -1
  %198 = icmp sgt i32 %189, 0
  %199 = add nsw i64 %188, -1
  br i1 %198, label %187, label %176

200:                                              ; preds = %176
  %201 = tail call zeroext i1 (i8*, ...) @_ZN3jxl5DebugEPKcz(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str, i64 0, i64 0), i8* getelementptr inbounds ([44 x i8], [44 x i8]* @.str.1, i64 0, i64 0), i32 531, i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.2, i64 0, i64 0)) #14
  %202 = tail call zeroext i1 @_ZN3jxl5AbortEv() #16
  unreachable

203:                                              ; preds = %176
  %204 = icmp ult i64 %177, 9
  br i1 %204, label %208, label %205

205:                                              ; preds = %203
  %206 = tail call zeroext i1 (i8*, ...) @_ZN3jxl5DebugEPKcz(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str, i64 0, i64 0), i8* getelementptr inbounds ([44 x i8], [44 x i8]* @.str.1, i64 0, i64 0), i32 532, i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str.3, i64 0, i64 0)) #14
  %207 = tail call zeroext i1 @_ZN3jxl5AbortEv() #16
  unreachable

208:                                              ; preds = %203
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN3jxl6N_AVX311GaborishRowERKNS_10FilterRowsERKNS_10LoopFilterERKNS_13FilterWeightsEmmmm(%"struct.jxl::FilterRows"* nocapture readonly dereferenceable(120), %"struct.jxl::LoopFilter"* nocapture readnone dereferenceable(144), %"struct.jxl::FilterWeights"* nocapture readonly dereferenceable(72), i64, i64, i64, i64) #8 {
  %8 = getelementptr inbounds %"struct.jxl::FilterRows", %"struct.jxl::FilterRows"* %0, i64 0, i32 1, i64 2
  %9 = getelementptr inbounds %"struct.jxl::FilterRows", %"struct.jxl::FilterRows"* %0, i64 0, i32 1, i64 3
  %10 = getelementptr inbounds %"struct.jxl::FilterRows", %"struct.jxl::FilterRows"* %0, i64 0, i32 1, i64 4
  %11 = icmp ult i64 %3, %4
  %12 = add i64 %3, 8
  br label %14

13:                                               ; preds = %206
  ret void

14:                                               ; preds = %206, %7
  %15 = phi i64 [ 0, %7 ], [ %207, %206 ]
  %16 = getelementptr inbounds %"struct.jxl::FilterRows", %"struct.jxl::FilterRows"* %0, i64 0, i32 0, i64 %15
  %17 = load float*, float** %16, align 8
  %18 = load i64, i64* %8, align 8
  %19 = getelementptr inbounds float, float* %17, i64 %18
  %20 = load i64, i64* %9, align 8
  %21 = getelementptr inbounds float, float* %17, i64 %20
  %22 = load i64, i64* %10, align 8
  %23 = getelementptr inbounds float, float* %17, i64 %22
  %24 = getelementptr inbounds %"struct.jxl::FilterRows", %"struct.jxl::FilterRows"* %0, i64 0, i32 2, i64 %15
  %25 = load float*, float** %24, align 8
  %26 = getelementptr inbounds float, float* %25, i64 %3
  %27 = ptrtoint float* %26 to i64
  %28 = and i64 %27, 63
  %29 = icmp ne i64 %28, 0
  %30 = and i1 %11, %29
  %31 = mul nuw nsw i64 %15, 3
  br i1 %30, label %35, label %32

32:                                               ; preds = %14
  %33 = add nuw nsw i64 %31, 1
  %34 = add nuw nsw i64 %31, 2
  br label %87

35:                                               ; preds = %14
  %36 = getelementptr inbounds %"struct.jxl::FilterWeights", %"struct.jxl::FilterWeights"* %2, i64 0, i32 0, i64 %31
  %37 = load float, float* %36, align 4
  %38 = insertelement <8 x float> undef, float %37, i32 0
  %39 = shufflevector <8 x float> %38, <8 x float> undef, <8 x i32> zeroinitializer
  %40 = add nuw nsw i64 %31, 1
  %41 = getelementptr inbounds %"struct.jxl::FilterWeights", %"struct.jxl::FilterWeights"* %2, i64 0, i32 0, i64 %40
  %42 = load float, float* %41, align 4
  %43 = insertelement <8 x float> undef, float %42, i32 0
  %44 = shufflevector <8 x float> %43, <8 x float> undef, <8 x i32> zeroinitializer
  %45 = add nuw nsw i64 %31, 2
  %46 = getelementptr inbounds %"struct.jxl::FilterWeights", %"struct.jxl::FilterWeights"* %2, i64 0, i32 0, i64 %45
  %47 = load float, float* %46, align 4
  %48 = insertelement <8 x float> undef, float %47, i32 0
  %49 = shufflevector <8 x float> %48, <8 x float> undef, <8 x i32> zeroinitializer
  %50 = getelementptr inbounds float, float* %19, i64 %3
  %51 = getelementptr inbounds float, float* %21, i64 %3
  %52 = getelementptr inbounds float, float* %23, i64 %3
  %53 = bitcast float* %50 to <8 x float>*
  %54 = load <8 x float>, <8 x float>* %53, align 1, !alias.scope !746, !noalias !751
  %55 = getelementptr inbounds float, float* %50, i64 -1
  %56 = bitcast float* %55 to <8 x float>*
  %57 = load <8 x float>, <8 x float>* %56, align 1, !alias.scope !756, !noalias !759
  %58 = getelementptr inbounds float, float* %50, i64 1
  %59 = bitcast float* %58 to <8 x float>*
  %60 = load <8 x float>, <8 x float>* %59, align 1, !alias.scope !761, !noalias !764
  %61 = bitcast float* %51 to <8 x float>*
  %62 = load <8 x float>, <8 x float>* %61, align 1, !alias.scope !766, !noalias !769
  %63 = getelementptr inbounds float, float* %51, i64 -1
  %64 = bitcast float* %63 to <8 x float>*
  %65 = load <8 x float>, <8 x float>* %64, align 1, !alias.scope !771, !noalias !774
  %66 = getelementptr inbounds float, float* %51, i64 1
  %67 = bitcast float* %66 to <8 x float>*
  %68 = load <8 x float>, <8 x float>* %67, align 1, !alias.scope !776, !noalias !779
  %69 = bitcast float* %52 to <8 x float>*
  %70 = load <8 x float>, <8 x float>* %69, align 1, !alias.scope !781, !noalias !784
  %71 = getelementptr inbounds float, float* %52, i64 -1
  %72 = bitcast float* %71 to <8 x float>*
  %73 = load <8 x float>, <8 x float>* %72, align 1, !alias.scope !786, !noalias !789
  %74 = getelementptr inbounds float, float* %52, i64 1
  %75 = bitcast float* %74 to <8 x float>*
  %76 = load <8 x float>, <8 x float>* %75, align 1, !alias.scope !791, !noalias !794
  %77 = fadd <8 x float> %65, %68
  %78 = fadd <8 x float> %54, %70
  %79 = fadd <8 x float> %77, %78
  %80 = fadd <8 x float> %57, %60
  %81 = fadd <8 x float> %73, %76
  %82 = fadd <8 x float> %80, %81
  %83 = fmul <8 x float> %39, %62
  %84 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %79, <8 x float> %44, <8 x float> %83) #14
  %85 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %82, <8 x float> %49, <8 x float> %84) #14
  %86 = bitcast float* %26 to <8 x float>*
  store <8 x float> %85, <8 x float>* %86, align 32, !alias.scope !796, !noalias !799
  br label %87

87:                                               ; preds = %32, %35
  %88 = phi i64 [ %34, %32 ], [ %45, %35 ]
  %89 = phi i64 [ %33, %32 ], [ %40, %35 ]
  %90 = phi i64 [ %3, %32 ], [ %12, %35 ]
  %91 = getelementptr inbounds %"struct.jxl::FilterWeights", %"struct.jxl::FilterWeights"* %2, i64 0, i32 0, i64 %31
  %92 = load float, float* %91, align 4
  %93 = insertelement <16 x float> undef, float %92, i32 0
  %94 = shufflevector <16 x float> %93, <16 x float> undef, <16 x i32> zeroinitializer
  %95 = getelementptr inbounds %"struct.jxl::FilterWeights", %"struct.jxl::FilterWeights"* %2, i64 0, i32 0, i64 %89
  %96 = load float, float* %95, align 4
  %97 = insertelement <16 x float> undef, float %96, i32 0
  %98 = shufflevector <16 x float> %97, <16 x float> undef, <16 x i32> zeroinitializer
  %99 = getelementptr inbounds %"struct.jxl::FilterWeights", %"struct.jxl::FilterWeights"* %2, i64 0, i32 0, i64 %88
  %100 = load float, float* %99, align 4
  %101 = insertelement <16 x float> undef, float %100, i32 0
  %102 = shufflevector <16 x float> %101, <16 x float> undef, <16 x i32> zeroinitializer
  %103 = add i64 %90, 16
  %104 = icmp ugt i64 %103, %4
  br i1 %104, label %152, label %105

105:                                              ; preds = %87, %105
  %106 = phi i64 [ %146, %105 ], [ %103, %87 ]
  %107 = phi i64 [ %106, %105 ], [ %90, %87 ]
  %108 = getelementptr inbounds float, float* %19, i64 %107
  %109 = getelementptr inbounds float, float* %21, i64 %107
  %110 = getelementptr inbounds float, float* %23, i64 %107
  %111 = getelementptr inbounds float, float* %25, i64 %107
  %112 = bitcast float* %108 to <16 x float>*
  %113 = load <16 x float>, <16 x float>* %112, align 1, !alias.scope !800, !noalias !805
  %114 = getelementptr inbounds float, float* %108, i64 -1
  %115 = bitcast float* %114 to <16 x float>*
  %116 = load <16 x float>, <16 x float>* %115, align 1, !alias.scope !810, !noalias !813
  %117 = getelementptr inbounds float, float* %108, i64 1
  %118 = bitcast float* %117 to <16 x float>*
  %119 = load <16 x float>, <16 x float>* %118, align 1, !alias.scope !815, !noalias !818
  %120 = bitcast float* %109 to <16 x float>*
  %121 = load <16 x float>, <16 x float>* %120, align 1, !alias.scope !820, !noalias !823
  %122 = getelementptr inbounds float, float* %109, i64 -1
  %123 = bitcast float* %122 to <16 x float>*
  %124 = load <16 x float>, <16 x float>* %123, align 1, !alias.scope !825, !noalias !828
  %125 = getelementptr inbounds float, float* %109, i64 1
  %126 = bitcast float* %125 to <16 x float>*
  %127 = load <16 x float>, <16 x float>* %126, align 1, !alias.scope !830, !noalias !833
  %128 = bitcast float* %110 to <16 x float>*
  %129 = load <16 x float>, <16 x float>* %128, align 1, !alias.scope !835, !noalias !838
  %130 = getelementptr inbounds float, float* %110, i64 -1
  %131 = bitcast float* %130 to <16 x float>*
  %132 = load <16 x float>, <16 x float>* %131, align 1, !alias.scope !840, !noalias !843
  %133 = getelementptr inbounds float, float* %110, i64 1
  %134 = bitcast float* %133 to <16 x float>*
  %135 = load <16 x float>, <16 x float>* %134, align 1, !alias.scope !845, !noalias !848
  %136 = fadd <16 x float> %124, %127
  %137 = fadd <16 x float> %113, %129
  %138 = fadd <16 x float> %136, %137
  %139 = fadd <16 x float> %116, %119
  %140 = fadd <16 x float> %132, %135
  %141 = fadd <16 x float> %139, %140
  %142 = fmul <16 x float> %94, %121
  %143 = tail call <16 x float> @llvm.fma.v16f32(<16 x float> %138, <16 x float> %98, <16 x float> %142) #14
  %144 = tail call <16 x float> @llvm.fma.v16f32(<16 x float> %141, <16 x float> %102, <16 x float> %143) #14
  %145 = bitcast float* %111 to <16 x float>*
  store <16 x float> %144, <16 x float>* %145, align 64, !alias.scope !850, !noalias !853
  %146 = add i64 %106, 16
  %147 = icmp ugt i64 %146, %4
  br i1 %147, label %148, label %105

148:                                              ; preds = %105
  %149 = load float, float* %91, align 4
  %150 = load float, float* %95, align 4
  %151 = load float, float* %99, align 4
  br label %152

152:                                              ; preds = %148, %87
  %153 = phi float [ %100, %87 ], [ %151, %148 ]
  %154 = phi float [ %96, %87 ], [ %150, %148 ]
  %155 = phi float [ %92, %87 ], [ %149, %148 ]
  %156 = phi i64 [ %90, %87 ], [ %106, %148 ]
  %157 = insertelement <8 x float> undef, float %155, i32 0
  %158 = shufflevector <8 x float> %157, <8 x float> undef, <8 x i32> zeroinitializer
  %159 = insertelement <8 x float> undef, float %154, i32 0
  %160 = shufflevector <8 x float> %159, <8 x float> undef, <8 x i32> zeroinitializer
  %161 = insertelement <8 x float> undef, float %153, i32 0
  %162 = shufflevector <8 x float> %161, <8 x float> undef, <8 x i32> zeroinitializer
  %163 = icmp ult i64 %156, %4
  br i1 %163, label %164, label %206

164:                                              ; preds = %152, %164
  %165 = phi i64 [ %204, %164 ], [ %156, %152 ]
  %166 = getelementptr inbounds float, float* %19, i64 %165
  %167 = getelementptr inbounds float, float* %21, i64 %165
  %168 = getelementptr inbounds float, float* %23, i64 %165
  %169 = getelementptr inbounds float, float* %25, i64 %165
  %170 = bitcast float* %166 to <8 x float>*
  %171 = load <8 x float>, <8 x float>* %170, align 1, !alias.scope !854, !noalias !859
  %172 = getelementptr inbounds float, float* %166, i64 -1
  %173 = bitcast float* %172 to <8 x float>*
  %174 = load <8 x float>, <8 x float>* %173, align 1, !alias.scope !864, !noalias !867
  %175 = getelementptr inbounds float, float* %166, i64 1
  %176 = bitcast float* %175 to <8 x float>*
  %177 = load <8 x float>, <8 x float>* %176, align 1, !alias.scope !869, !noalias !872
  %178 = bitcast float* %167 to <8 x float>*
  %179 = load <8 x float>, <8 x float>* %178, align 1, !alias.scope !874, !noalias !877
  %180 = getelementptr inbounds float, float* %167, i64 -1
  %181 = bitcast float* %180 to <8 x float>*
  %182 = load <8 x float>, <8 x float>* %181, align 1, !alias.scope !879, !noalias !882
  %183 = getelementptr inbounds float, float* %167, i64 1
  %184 = bitcast float* %183 to <8 x float>*
  %185 = load <8 x float>, <8 x float>* %184, align 1, !alias.scope !884, !noalias !887
  %186 = bitcast float* %168 to <8 x float>*
  %187 = load <8 x float>, <8 x float>* %186, align 1, !alias.scope !889, !noalias !892
  %188 = getelementptr inbounds float, float* %168, i64 -1
  %189 = bitcast float* %188 to <8 x float>*
  %190 = load <8 x float>, <8 x float>* %189, align 1, !alias.scope !894, !noalias !897
  %191 = getelementptr inbounds float, float* %168, i64 1
  %192 = bitcast float* %191 to <8 x float>*
  %193 = load <8 x float>, <8 x float>* %192, align 1, !alias.scope !899, !noalias !902
  %194 = fadd <8 x float> %182, %185
  %195 = fadd <8 x float> %171, %187
  %196 = fadd <8 x float> %194, %195
  %197 = fadd <8 x float> %174, %177
  %198 = fadd <8 x float> %190, %193
  %199 = fadd <8 x float> %197, %198
  %200 = fmul <8 x float> %158, %179
  %201 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %196, <8 x float> %160, <8 x float> %200) #14
  %202 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %199, <8 x float> %162, <8 x float> %201) #14
  %203 = bitcast float* %169 to <8 x float>*
  store <8 x float> %202, <8 x float>* %203, align 32, !alias.scope !904, !noalias !907
  %204 = add i64 %165, 8
  %205 = icmp ult i64 %204, %4
  br i1 %205, label %164, label %206

206:                                              ; preds = %164, %152
  %207 = add nuw nsw i64 %15, 1
  %208 = icmp eq i64 %207, 3
  br i1 %208, label %13, label %14
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN3jxl6N_AVX37Epf0RowERKNS_10FilterRowsERKNS_10LoopFilterERKNS_13FilterWeightsEmmmm(%"struct.jxl::FilterRows"* readonly dereferenceable(120), %"struct.jxl::LoopFilter"* nocapture readonly dereferenceable(144), %"struct.jxl::FilterWeights"* nocapture readnone dereferenceable(72), i64, i64, i64, i64) #9 {
  %8 = alloca <8 x float>, align 64
  %9 = alloca [12 x %"class.hwy::N_AVX3::Vec256"], align 32
  %10 = bitcast [12 x %"class.hwy::N_AVX3::Vec256"]* %9 to i8*
  %11 = getelementptr inbounds %"struct.jxl::FilterRows", %"struct.jxl::FilterRows"* %0, i64 0, i32 3
  %12 = load float*, float** %11, align 8
  %13 = getelementptr inbounds %"struct.jxl::LoopFilter", %"struct.jxl::LoopFilter"* %1, i64 0, i32 23
  %14 = load float, float* %13, align 4
  %15 = getelementptr inbounds %"struct.jxl::LoopFilter", %"struct.jxl::LoopFilter"* %1, i64 0, i32 25
  %16 = load float, float* %15, align 4
  %17 = fmul float %14, %16
  %18 = bitcast <8 x float>* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %18) #14
  %19 = getelementptr inbounds <8 x float>, <8 x float>* %8, i64 0, i64 0
  %20 = getelementptr inbounds <8 x float>, <8 x float>* %8, i64 0, i64 1
  %21 = getelementptr inbounds <8 x float>, <8 x float>* %8, i64 0, i64 5
  %22 = getelementptr inbounds <8 x float>, <8 x float>* %8, i64 0, i64 6
  %23 = getelementptr inbounds <8 x float>, <8 x float>* %8, i64 0, i64 7
  store float %17, float* %19, align 64
  %24 = insertelement <4 x float> undef, float %14, i32 0
  %25 = shufflevector <4 x float> %24, <4 x float> undef, <4 x i32> zeroinitializer
  %26 = bitcast float* %20 to <4 x float>*
  store <4 x float> %25, <4 x float>* %26, align 4
  store float %14, float* %21, align 4
  store float %14, float* %22, align 8
  store float %17, float* %23, align 4
  switch i64 %6, label %30 [
    i64 7, label %27
    i64 0, label %27
  ]

27:                                               ; preds = %7, %7
  %28 = insertelement <8 x float> undef, float %17, i32 0
  %29 = shufflevector <8 x float> %28, <8 x float> undef, <8 x i32> zeroinitializer
  store <8 x float> %29, <8 x float>* %8, align 64, !alias.scope !908
  br label %30

30:                                               ; preds = %27, %7
  %31 = icmp ult i64 %3, %4
  br i1 %31, label %32, label %47

32:                                               ; preds = %30
  %33 = getelementptr inbounds %"struct.jxl::FilterRows", %"struct.jxl::FilterRows"* %0, i64 0, i32 0, i64 0
  %34 = getelementptr inbounds %"struct.jxl::FilterRows", %"struct.jxl::FilterRows"* %0, i64 0, i32 1, i64 3
  %35 = getelementptr inbounds %"struct.jxl::FilterRows", %"struct.jxl::FilterRows"* %0, i64 0, i32 0, i64 1
  %36 = getelementptr inbounds %"struct.jxl::FilterRows", %"struct.jxl::FilterRows"* %0, i64 0, i32 0, i64 2
  %37 = getelementptr inbounds %"struct.jxl::LoopFilter", %"struct.jxl::LoopFilter"* %1, i64 0, i32 18
  %38 = getelementptr inbounds %"struct.jxl::FilterRows", %"struct.jxl::FilterRows"* %0, i64 0, i32 2, i64 0
  %39 = getelementptr inbounds %"struct.jxl::FilterRows", %"struct.jxl::FilterRows"* %0, i64 0, i32 2, i64 1
  %40 = getelementptr inbounds %"struct.jxl::FilterRows", %"struct.jxl::FilterRows"* %0, i64 0, i32 2, i64 2
  %41 = add i64 %5, %3
  %42 = and i64 %41, 7
  %43 = getelementptr inbounds <8 x float>, <8 x float>* %8, i64 0, i64 %42
  %44 = bitcast float* %43 to <8 x float>*
  %45 = getelementptr inbounds %"struct.jxl::FilterRows", %"struct.jxl::FilterRows"* %0, i64 0, i32 1, i64 2
  %46 = getelementptr inbounds %"struct.jxl::FilterRows", %"struct.jxl::FilterRows"* %0, i64 0, i32 1, i64 4
  br label %48

47:                                               ; preds = %256, %30
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %18) #14
  ret void

48:                                               ; preds = %32, %256
  %49 = phi i64 [ %3, %32 ], [ %257, %256 ]
  %50 = add i64 %49, %5
  %51 = lshr i64 %50, 3
  %52 = getelementptr inbounds float, float* %12, i64 %51
  %53 = load float, float* %52, align 4
  %54 = fcmp olt float %53, 0xC00F3DF000000000
  br i1 %54, label %55, label %83

55:                                               ; preds = %48
  %56 = load float*, float** %33, align 8
  %57 = load i64, i64* %34, align 8
  %58 = getelementptr inbounds float, float* %56, i64 %49
  %59 = getelementptr inbounds float, float* %58, i64 %57
  %60 = bitcast float* %59 to <8 x float>*
  %61 = load <8 x float>, <8 x float>* %60, align 32, !alias.scope !911, !noalias !914
  %62 = load float*, float** %38, align 8
  %63 = getelementptr inbounds float, float* %62, i64 %49
  %64 = bitcast float* %63 to <8 x float>*
  store <8 x float> %61, <8 x float>* %64, align 32, !alias.scope !916
  %65 = load float*, float** %35, align 8
  %66 = load i64, i64* %34, align 8
  %67 = getelementptr inbounds float, float* %65, i64 %49
  %68 = getelementptr inbounds float, float* %67, i64 %66
  %69 = bitcast float* %68 to <8 x float>*
  %70 = load <8 x float>, <8 x float>* %69, align 32, !alias.scope !911, !noalias !914
  %71 = load float*, float** %39, align 8
  %72 = getelementptr inbounds float, float* %71, i64 %49
  %73 = bitcast float* %72 to <8 x float>*
  store <8 x float> %70, <8 x float>* %73, align 32, !alias.scope !916
  %74 = load float*, float** %36, align 8
  %75 = load i64, i64* %34, align 8
  %76 = getelementptr inbounds float, float* %74, i64 %49
  %77 = getelementptr inbounds float, float* %76, i64 %75
  %78 = bitcast float* %77 to <8 x float>*
  %79 = load <8 x float>, <8 x float>* %78, align 32, !alias.scope !911, !noalias !914
  %80 = load float*, float** %40, align 8
  %81 = getelementptr inbounds float, float* %80, i64 %49
  %82 = bitcast float* %81 to <8 x float>*
  store <8 x float> %79, <8 x float>* %82, align 32, !alias.scope !916
  br label %256

83:                                               ; preds = %48
  %84 = load <8 x float>, <8 x float>* %44, align 32, !alias.scope !919, !noalias !922
  %85 = insertelement <8 x float> undef, float %53, i32 0
  %86 = shufflevector <8 x float> %85, <8 x float> undef, <8 x i32> zeroinitializer
  call void @llvm.lifetime.start.p0i8(i64 384, i8* nonnull %10) #14
  call void @llvm.memset.p0i8.i64(i8* nonnull align 32 %10, i8 0, i64 384, i1 false)
  %87 = load i64, i64* %34, align 8
  %88 = load i64, i64* %45, align 8
  %89 = load i64, i64* %46, align 8
  br label %110

90:                                               ; preds = %199
  %91 = fmul <8 x float> %86, %84
  %92 = load float*, float** %33, align 8
  %93 = getelementptr inbounds float, float* %92, i64 %87
  %94 = getelementptr inbounds float, float* %93, i64 %49
  %95 = bitcast float* %94 to <8 x float>*
  %96 = load <8 x float>, <8 x float>* %95, align 1, !alias.scope !924, !noalias !927
  %97 = load float*, float** %35, align 8
  %98 = getelementptr inbounds float, float* %97, i64 %87
  %99 = getelementptr inbounds float, float* %98, i64 %49
  %100 = bitcast float* %99 to <8 x float>*
  %101 = load <8 x float>, <8 x float>* %100, align 1, !alias.scope !929, !noalias !932
  %102 = load float*, float** %36, align 8
  %103 = getelementptr inbounds float, float* %102, i64 %87
  %104 = getelementptr inbounds float, float* %103, i64 %49
  %105 = bitcast float* %104 to <8 x float>*
  %106 = load <8 x float>, <8 x float>* %105, align 1, !alias.scope !934, !noalias !937
  %107 = load float, float* %37, align 4, !noalias !939
  %108 = insertelement <8 x float> undef, float %107, i32 0
  %109 = shufflevector <8 x float> %108, <8 x float> undef, <8 x i32> zeroinitializer
  br label %216

110:                                              ; preds = %199, %83
  %111 = phi i64 [ %200, %199 ], [ 0, %83 ]
  %112 = getelementptr inbounds %"struct.jxl::LoopFilter", %"struct.jxl::LoopFilter"* %1, i64 0, i32 17, i64 %111
  %113 = load float, float* %112, align 4
  %114 = insertelement <8 x float> undef, float %113, i32 0
  %115 = shufflevector <8 x float> %114, <8 x float> undef, <8 x i32> zeroinitializer
  %116 = getelementptr inbounds %"struct.jxl::FilterRows", %"struct.jxl::FilterRows"* %0, i64 0, i32 0, i64 %111
  %117 = load float*, float** %116, align 8
  %118 = getelementptr inbounds float, float* %117, i64 %49
  %119 = getelementptr inbounds float, float* %118, i64 %88
  %120 = bitcast float* %119 to <8 x float>*
  %121 = load <8 x float>, <8 x float>* %120, align 1, !alias.scope !945, !noalias !948
  %122 = getelementptr inbounds float, float* %118, i64 %89
  %123 = bitcast float* %122 to <8 x float>*
  %124 = load <8 x float>, <8 x float>* %123, align 1, !alias.scope !945, !noalias !948
  %125 = getelementptr inbounds float, float* %118, i64 %87
  %126 = getelementptr inbounds float, float* %125, i64 1
  %127 = bitcast float* %126 to <8 x float>*
  %128 = load <8 x float>, <8 x float>* %127, align 1, !alias.scope !945, !noalias !948
  %129 = bitcast float* %125 to <8 x float>*
  %130 = load <8 x float>, <8 x float>* %129, align 1, !alias.scope !945, !noalias !948
  %131 = getelementptr inbounds float, float* %125, i64 -1
  %132 = bitcast float* %131 to <8 x float>*
  %133 = load <8 x float>, <8 x float>* %132, align 1, !alias.scope !945, !noalias !948
  br label %134

134:                                              ; preds = %134, %110
  %135 = phi i64 [ 0, %110 ], [ %197, %134 ]
  %136 = getelementptr inbounds [12 x %"struct.std::__1::array"], [12 x %"struct.std::__1::array"]* @_ZZN3jxl8N_SCALAR7Epf0RowERKNS_10FilterRowsERKNS_10LoopFilterERKNS_13FilterWeightsEmmmmE8sads_off, i64 0, i64 %135, i32 0, i64 0
  %137 = load i32, i32* %136, align 8
  %138 = getelementptr inbounds [12 x %"struct.std::__1::array"], [12 x %"struct.std::__1::array"]* @_ZZN3jxl8N_SCALAR7Epf0RowERKNS_10FilterRowsERKNS_10LoopFilterERKNS_13FilterWeightsEmmmmE8sads_off, i64 0, i64 %135, i32 0, i64 1
  %139 = load i32, i32* %138, align 4
  %140 = sext i32 %139 to i64
  %141 = sext i32 %137 to i64
  %142 = add nsw i64 %141, 3
  %143 = getelementptr inbounds %"struct.jxl::FilterRows", %"struct.jxl::FilterRows"* %0, i64 0, i32 1, i64 %142
  %144 = load i64, i64* %143, align 8
  %145 = getelementptr inbounds float, float* %118, i64 %140
  %146 = getelementptr inbounds float, float* %145, i64 %144
  %147 = bitcast float* %146 to <8 x float>*
  %148 = load <8 x float>, <8 x float>* %147, align 1, !alias.scope !950, !noalias !953
  %149 = fsub <8 x float> %130, %148
  %150 = bitcast <8 x float> %149 to <8 x i32>
  %151 = and <8 x i32> %150, <i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647>
  %152 = bitcast <8 x i32> %151 to <8 x float>
  %153 = fadd <8 x float> %152, zeroinitializer
  %154 = sext i32 %137 to i64
  %155 = add nsw i64 %154, 2
  %156 = getelementptr inbounds %"struct.jxl::FilterRows", %"struct.jxl::FilterRows"* %0, i64 0, i32 1, i64 %155
  %157 = load i64, i64* %156, align 8
  %158 = getelementptr inbounds float, float* %145, i64 %157
  %159 = bitcast float* %158 to <8 x float>*
  %160 = load <8 x float>, <8 x float>* %159, align 1, !alias.scope !950, !noalias !953
  %161 = fsub <8 x float> %121, %160
  %162 = bitcast <8 x float> %161 to <8 x i32>
  %163 = and <8 x i32> %162, <i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647>
  %164 = bitcast <8 x i32> %163 to <8 x float>
  %165 = fadd <8 x float> %153, %164
  %166 = getelementptr inbounds float, float* %146, i64 -1
  %167 = bitcast float* %166 to <8 x float>*
  %168 = load <8 x float>, <8 x float>* %167, align 1, !alias.scope !950, !noalias !953
  %169 = fsub <8 x float> %133, %168
  %170 = bitcast <8 x float> %169 to <8 x i32>
  %171 = and <8 x i32> %170, <i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647>
  %172 = bitcast <8 x i32> %171 to <8 x float>
  %173 = fadd <8 x float> %165, %172
  %174 = sext i32 %137 to i64
  %175 = add nsw i64 %174, 4
  %176 = getelementptr inbounds %"struct.jxl::FilterRows", %"struct.jxl::FilterRows"* %0, i64 0, i32 1, i64 %175
  %177 = load i64, i64* %176, align 8
  %178 = getelementptr inbounds float, float* %145, i64 %177
  %179 = bitcast float* %178 to <8 x float>*
  %180 = load <8 x float>, <8 x float>* %179, align 1, !alias.scope !950, !noalias !953
  %181 = fsub <8 x float> %124, %180
  %182 = bitcast <8 x float> %181 to <8 x i32>
  %183 = and <8 x i32> %182, <i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647>
  %184 = bitcast <8 x i32> %183 to <8 x float>
  %185 = fadd <8 x float> %173, %184
  %186 = getelementptr inbounds float, float* %146, i64 1
  %187 = bitcast float* %186 to <8 x float>*
  %188 = load <8 x float>, <8 x float>* %187, align 1, !alias.scope !950, !noalias !953
  %189 = fsub <8 x float> %128, %188
  %190 = bitcast <8 x float> %189 to <8 x i32>
  %191 = and <8 x i32> %190, <i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647>
  %192 = bitcast <8 x i32> %191 to <8 x float>
  %193 = fadd <8 x float> %185, %192
  %194 = getelementptr inbounds [12 x %"class.hwy::N_AVX3::Vec256"], [12 x %"class.hwy::N_AVX3::Vec256"]* %9, i64 0, i64 %135, i32 0
  %195 = load <8 x float>, <8 x float>* %194, align 32
  %196 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %193, <8 x float> %115, <8 x float> %195) #14
  store <8 x float> %196, <8 x float>* %194, align 32
  %197 = add nuw nsw i64 %135, 1
  %198 = icmp eq i64 %197, 12
  br i1 %198, label %199, label %134

199:                                              ; preds = %134
  %200 = add nuw nsw i64 %111, 1
  %201 = icmp eq i64 %200, 3
  br i1 %201, label %90, label %110

202:                                              ; preds = %216
  %203 = fdiv <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %250
  %204 = fmul <8 x float> %251, %203
  %205 = load float*, float** %38, align 8
  %206 = getelementptr inbounds float, float* %205, i64 %49
  %207 = bitcast float* %206 to <8 x float>*
  store <8 x float> %204, <8 x float>* %207, align 32, !alias.scope !955
  %208 = fmul <8 x float> %252, %203
  %209 = load float*, float** %39, align 8
  %210 = getelementptr inbounds float, float* %209, i64 %49
  %211 = bitcast float* %210 to <8 x float>*
  store <8 x float> %208, <8 x float>* %211, align 32, !alias.scope !958
  %212 = fmul <8 x float> %253, %203
  %213 = load float*, float** %40, align 8
  %214 = getelementptr inbounds float, float* %213, i64 %49
  %215 = bitcast float* %214 to <8 x float>*
  store <8 x float> %212, <8 x float>* %215, align 32, !alias.scope !961
  call void @llvm.lifetime.end.p0i8(i64 384, i8* nonnull %10) #14
  br label %256

216:                                              ; preds = %216, %90
  %217 = phi i64 [ 0, %90 ], [ %254, %216 ]
  %218 = phi <8 x float> [ <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %90 ], [ %250, %216 ]
  %219 = phi <8 x float> [ %96, %90 ], [ %251, %216 ]
  %220 = phi <8 x float> [ %101, %90 ], [ %252, %216 ]
  %221 = phi <8 x float> [ %106, %90 ], [ %253, %216 ]
  %222 = getelementptr inbounds [12 x %"struct.std::__1::array"], [12 x %"struct.std::__1::array"]* @_ZZN3jxl8N_SCALAR7Epf0RowERKNS_10FilterRowsERKNS_10LoopFilterERKNS_13FilterWeightsEmmmmE8sads_off, i64 0, i64 %217, i32 0, i64 0
  %223 = load i32, i32* %222, align 8
  %224 = getelementptr inbounds [12 x %"struct.std::__1::array"], [12 x %"struct.std::__1::array"]* @_ZZN3jxl8N_SCALAR7Epf0RowERKNS_10FilterRowsERKNS_10LoopFilterERKNS_13FilterWeightsEmmmmE8sads_off, i64 0, i64 %217, i32 0, i64 1
  %225 = load i32, i32* %224, align 4
  %226 = sext i32 %225 to i64
  %227 = add i64 %49, %226
  %228 = getelementptr inbounds [12 x %"class.hwy::N_AVX3::Vec256"], [12 x %"class.hwy::N_AVX3::Vec256"]* %9, i64 0, i64 %217, i32 0
  %229 = load <8 x float>, <8 x float>* %228, align 32
  %230 = sext i32 %223 to i64
  %231 = add nsw i64 %230, 3
  %232 = getelementptr inbounds %"struct.jxl::FilterRows", %"struct.jxl::FilterRows"* %0, i64 0, i32 1, i64 %231
  %233 = load i64, i64* %232, align 8, !noalias !939
  %234 = getelementptr inbounds float, float* %92, i64 %233
  %235 = getelementptr inbounds float, float* %234, i64 %227
  %236 = bitcast float* %235 to <8 x float>*
  %237 = load <8 x float>, <8 x float>* %236, align 1, !alias.scope !964, !noalias !967
  %238 = getelementptr inbounds float, float* %97, i64 %233
  %239 = getelementptr inbounds float, float* %238, i64 %227
  %240 = bitcast float* %239 to <8 x float>*
  %241 = load <8 x float>, <8 x float>* %240, align 1, !alias.scope !969, !noalias !972
  %242 = getelementptr inbounds float, float* %102, i64 %233
  %243 = getelementptr inbounds float, float* %242, i64 %227
  %244 = bitcast float* %243 to <8 x float>*
  %245 = load <8 x float>, <8 x float>* %244, align 1, !alias.scope !974, !noalias !977
  %246 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %229, <8 x float> %91, <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>) #14
  %247 = fmul <8 x float> %246, %246
  %248 = fcmp ugt <8 x float> %246, %109
  %249 = select <8 x i1> %248, <8 x float> %247, <8 x float> zeroinitializer
  %250 = fadd <8 x float> %218, %249
  %251 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %249, <8 x float> %237, <8 x float> %219) #14
  %252 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %249, <8 x float> %241, <8 x float> %220) #14
  %253 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %249, <8 x float> %245, <8 x float> %221) #14
  %254 = add nuw nsw i64 %217, 1
  %255 = icmp eq i64 %254, 12
  br i1 %255, label %202, label %216

256:                                              ; preds = %55, %202
  %257 = add i64 %49, 8
  %258 = icmp ult i64 %257, %4
  br i1 %258, label %48, label %47
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN3jxl6N_AVX37Epf1RowERKNS_10FilterRowsERKNS_10LoopFilterERKNS_13FilterWeightsEmmmm(%"struct.jxl::FilterRows"* readonly dereferenceable(120), %"struct.jxl::LoopFilter"* nocapture readonly dereferenceable(144), %"struct.jxl::FilterWeights"* nocapture readnone dereferenceable(72), i64, i64, i64, i64) #9 {
  %8 = alloca <8 x float>, align 64
  %9 = getelementptr inbounds %"struct.jxl::FilterRows", %"struct.jxl::FilterRows"* %0, i64 0, i32 3
  %10 = load float*, float** %9, align 8
  %11 = getelementptr inbounds %"struct.jxl::LoopFilter", %"struct.jxl::LoopFilter"* %1, i64 0, i32 25
  %12 = load float, float* %11, align 4
  %13 = bitcast <8 x float>* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %13) #14
  %14 = getelementptr inbounds <8 x float>, <8 x float>* %8, i64 0, i64 0
  %15 = getelementptr inbounds <8 x float>, <8 x float>* %8, i64 0, i64 1
  %16 = getelementptr inbounds <8 x float>, <8 x float>* %8, i64 0, i64 5
  %17 = getelementptr inbounds <8 x float>, <8 x float>* %8, i64 0, i64 6
  %18 = getelementptr inbounds <8 x float>, <8 x float>* %8, i64 0, i64 7
  store float %12, float* %14, align 64
  %19 = bitcast float* %15 to <4 x float>*
  store <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, <4 x float>* %19, align 4
  store float 1.000000e+00, float* %16, align 4
  store float 1.000000e+00, float* %17, align 8
  store float %12, float* %18, align 4
  switch i64 %6, label %23 [
    i64 7, label %20
    i64 0, label %20
  ]

20:                                               ; preds = %7, %7
  %21 = insertelement <8 x float> undef, float %12, i32 0
  %22 = shufflevector <8 x float> %21, <8 x float> undef, <8 x i32> zeroinitializer
  store <8 x float> %22, <8 x float>* %8, align 64, !alias.scope !979
  br label %23

23:                                               ; preds = %20, %7
  %24 = icmp ult i64 %3, %4
  br i1 %24, label %25, label %42

25:                                               ; preds = %23
  %26 = getelementptr inbounds %"struct.jxl::FilterRows", %"struct.jxl::FilterRows"* %0, i64 0, i32 1, i64 1
  %27 = getelementptr inbounds %"struct.jxl::FilterRows", %"struct.jxl::FilterRows"* %0, i64 0, i32 1, i64 2
  %28 = getelementptr inbounds %"struct.jxl::FilterRows", %"struct.jxl::FilterRows"* %0, i64 0, i32 1, i64 3
  %29 = getelementptr inbounds %"struct.jxl::FilterRows", %"struct.jxl::FilterRows"* %0, i64 0, i32 1, i64 4
  %30 = getelementptr inbounds %"struct.jxl::FilterRows", %"struct.jxl::FilterRows"* %0, i64 0, i32 1, i64 5
  %31 = getelementptr inbounds %"struct.jxl::FilterRows", %"struct.jxl::FilterRows"* %0, i64 0, i32 0, i64 0
  %32 = getelementptr inbounds %"struct.jxl::FilterRows", %"struct.jxl::FilterRows"* %0, i64 0, i32 0, i64 1
  %33 = getelementptr inbounds %"struct.jxl::FilterRows", %"struct.jxl::FilterRows"* %0, i64 0, i32 0, i64 2
  %34 = getelementptr inbounds %"struct.jxl::LoopFilter", %"struct.jxl::LoopFilter"* %1, i64 0, i32 18
  %35 = getelementptr inbounds %"struct.jxl::FilterRows", %"struct.jxl::FilterRows"* %0, i64 0, i32 2, i64 0
  %36 = getelementptr inbounds %"struct.jxl::FilterRows", %"struct.jxl::FilterRows"* %0, i64 0, i32 2, i64 1
  %37 = getelementptr inbounds %"struct.jxl::FilterRows", %"struct.jxl::FilterRows"* %0, i64 0, i32 2, i64 2
  %38 = add i64 %5, %3
  %39 = and i64 %38, 7
  %40 = getelementptr inbounds <8 x float>, <8 x float>* %8, i64 0, i64 %39
  %41 = bitcast float* %40 to <8 x float>*
  br label %43

42:                                               ; preds = %331, %23
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %13) #14
  ret void

43:                                               ; preds = %25, %331
  %44 = phi i64 [ %3, %25 ], [ %336, %331 ]
  %45 = add i64 %44, %5
  %46 = lshr i64 %45, 3
  %47 = getelementptr inbounds float, float* %10, i64 %46
  %48 = load float, float* %47, align 4
  %49 = fcmp olt float %48, 0xC00F3DF000000000
  br i1 %49, label %50, label %75

50:                                               ; preds = %43
  %51 = load float*, float** %31, align 8
  %52 = load i64, i64* %28, align 8
  %53 = getelementptr inbounds float, float* %51, i64 %44
  %54 = getelementptr inbounds float, float* %53, i64 %52
  %55 = bitcast float* %54 to <8 x float>*
  %56 = load <8 x float>, <8 x float>* %55, align 32, !alias.scope !982, !noalias !985
  %57 = load float*, float** %35, align 8
  %58 = getelementptr inbounds float, float* %57, i64 %44
  %59 = bitcast float* %58 to <8 x float>*
  store <8 x float> %56, <8 x float>* %59, align 32, !alias.scope !987
  %60 = load float*, float** %32, align 8
  %61 = load i64, i64* %28, align 8
  %62 = getelementptr inbounds float, float* %60, i64 %44
  %63 = getelementptr inbounds float, float* %62, i64 %61
  %64 = bitcast float* %63 to <8 x float>*
  %65 = load <8 x float>, <8 x float>* %64, align 32, !alias.scope !982, !noalias !985
  %66 = load float*, float** %36, align 8
  %67 = getelementptr inbounds float, float* %66, i64 %44
  %68 = bitcast float* %67 to <8 x float>*
  store <8 x float> %65, <8 x float>* %68, align 32, !alias.scope !987
  %69 = load float*, float** %33, align 8
  %70 = load i64, i64* %28, align 8
  %71 = getelementptr inbounds float, float* %69, i64 %44
  %72 = getelementptr inbounds float, float* %71, i64 %70
  %73 = bitcast float* %72 to <8 x float>*
  %74 = load <8 x float>, <8 x float>* %73, align 32, !alias.scope !982, !noalias !985
  br label %331

75:                                               ; preds = %43
  %76 = load <8 x float>, <8 x float>* %41, align 32, !alias.scope !990, !noalias !993
  %77 = insertelement <8 x float> undef, float %48, i32 0
  %78 = shufflevector <8 x float> %77, <8 x float> undef, <8 x i32> zeroinitializer
  %79 = load i64, i64* %26, align 8
  %80 = load i64, i64* %27, align 8
  %81 = load i64, i64* %28, align 8
  %82 = load i64, i64* %29, align 8
  %83 = load i64, i64* %30, align 8
  br label %193

84:                                               ; preds = %193
  %85 = fmul <8 x float> %78, %76
  %86 = load float*, float** %31, align 8
  %87 = load i64, i64* %28, align 8
  %88 = getelementptr inbounds float, float* %86, i64 %87
  %89 = getelementptr inbounds float, float* %88, i64 %44
  %90 = bitcast float* %89 to <8 x float>*
  %91 = load <8 x float>, <8 x float>* %90, align 32, !alias.scope !995, !noalias !998
  %92 = load float*, float** %32, align 8
  %93 = getelementptr inbounds float, float* %92, i64 %87
  %94 = getelementptr inbounds float, float* %93, i64 %44
  %95 = bitcast float* %94 to <8 x float>*
  %96 = load <8 x float>, <8 x float>* %95, align 32, !alias.scope !1000, !noalias !1003
  %97 = load float*, float** %33, align 8
  %98 = getelementptr inbounds float, float* %97, i64 %87
  %99 = getelementptr inbounds float, float* %98, i64 %44
  %100 = bitcast float* %99 to <8 x float>*
  %101 = load <8 x float>, <8 x float>* %100, align 32, !alias.scope !1005, !noalias !1008
  %102 = load i64, i64* %27, align 8, !noalias !1010
  %103 = getelementptr inbounds float, float* %86, i64 %102
  %104 = getelementptr inbounds float, float* %103, i64 %44
  %105 = bitcast float* %104 to <8 x float>*
  %106 = load <8 x float>, <8 x float>* %105, align 32, !alias.scope !1016, !noalias !1019
  %107 = getelementptr inbounds float, float* %92, i64 %102
  %108 = getelementptr inbounds float, float* %107, i64 %44
  %109 = bitcast float* %108 to <8 x float>*
  %110 = load <8 x float>, <8 x float>* %109, align 32, !alias.scope !1021, !noalias !1024
  %111 = getelementptr inbounds float, float* %97, i64 %102
  %112 = getelementptr inbounds float, float* %111, i64 %44
  %113 = bitcast float* %112 to <8 x float>*
  %114 = load <8 x float>, <8 x float>* %113, align 32, !alias.scope !1026, !noalias !1029
  %115 = load float, float* %34, align 4, !noalias !1010
  %116 = insertelement <8 x float> undef, float %115, i32 0
  %117 = shufflevector <8 x float> %116, <8 x float> undef, <8 x i32> zeroinitializer
  %118 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %325, <8 x float> %85, <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>) #14
  %119 = fmul <8 x float> %118, %118
  %120 = fcmp ugt <8 x float> %118, %117
  %121 = select <8 x i1> %120, <8 x float> %119, <8 x float> zeroinitializer
  %122 = fadd <8 x float> %121, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %123 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %121, <8 x float> %106, <8 x float> %91) #14
  %124 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %121, <8 x float> %110, <8 x float> %96) #14
  %125 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %121, <8 x float> %114, <8 x float> %101) #14
  %126 = add i64 %44, -1
  %127 = getelementptr inbounds float, float* %88, i64 %126
  %128 = bitcast float* %127 to <8 x float>*
  %129 = load <8 x float>, <8 x float>* %128, align 1, !alias.scope !1031, !noalias !1034
  %130 = getelementptr inbounds float, float* %93, i64 %126
  %131 = bitcast float* %130 to <8 x float>*
  %132 = load <8 x float>, <8 x float>* %131, align 1, !alias.scope !1041, !noalias !1044
  %133 = getelementptr inbounds float, float* %98, i64 %126
  %134 = bitcast float* %133 to <8 x float>*
  %135 = load <8 x float>, <8 x float>* %134, align 1, !alias.scope !1046, !noalias !1049
  %136 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %326, <8 x float> %85, <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>) #14
  %137 = fmul <8 x float> %136, %136
  %138 = fcmp ugt <8 x float> %136, %117
  %139 = select <8 x i1> %138, <8 x float> %137, <8 x float> zeroinitializer
  %140 = fadd <8 x float> %139, %122
  %141 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %139, <8 x float> %129, <8 x float> %123) #14
  %142 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %139, <8 x float> %132, <8 x float> %124) #14
  %143 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %139, <8 x float> %135, <8 x float> %125) #14
  %144 = add i64 %44, 1
  %145 = getelementptr inbounds float, float* %88, i64 %144
  %146 = bitcast float* %145 to <8 x float>*
  %147 = load <8 x float>, <8 x float>* %146, align 1, !alias.scope !1051, !noalias !1054
  %148 = getelementptr inbounds float, float* %93, i64 %144
  %149 = bitcast float* %148 to <8 x float>*
  %150 = load <8 x float>, <8 x float>* %149, align 1, !alias.scope !1061, !noalias !1064
  %151 = getelementptr inbounds float, float* %98, i64 %144
  %152 = bitcast float* %151 to <8 x float>*
  %153 = load <8 x float>, <8 x float>* %152, align 1, !alias.scope !1066, !noalias !1069
  %154 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %327, <8 x float> %85, <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>) #14
  %155 = fmul <8 x float> %154, %154
  %156 = fcmp ugt <8 x float> %154, %117
  %157 = select <8 x i1> %156, <8 x float> %155, <8 x float> zeroinitializer
  %158 = fadd <8 x float> %157, %140
  %159 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %157, <8 x float> %147, <8 x float> %141) #14
  %160 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %157, <8 x float> %150, <8 x float> %142) #14
  %161 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %157, <8 x float> %153, <8 x float> %143) #14
  %162 = load i64, i64* %29, align 8, !noalias !1071
  %163 = getelementptr inbounds float, float* %86, i64 %162
  %164 = getelementptr inbounds float, float* %163, i64 %44
  %165 = bitcast float* %164 to <8 x float>*
  %166 = load <8 x float>, <8 x float>* %165, align 32, !alias.scope !1077, !noalias !1080
  %167 = getelementptr inbounds float, float* %92, i64 %162
  %168 = getelementptr inbounds float, float* %167, i64 %44
  %169 = bitcast float* %168 to <8 x float>*
  %170 = load <8 x float>, <8 x float>* %169, align 32, !alias.scope !1082, !noalias !1085
  %171 = getelementptr inbounds float, float* %97, i64 %162
  %172 = getelementptr inbounds float, float* %171, i64 %44
  %173 = bitcast float* %172 to <8 x float>*
  %174 = load <8 x float>, <8 x float>* %173, align 32, !alias.scope !1087, !noalias !1090
  %175 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %328, <8 x float> %85, <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>) #14
  %176 = fmul <8 x float> %175, %175
  %177 = fcmp ugt <8 x float> %175, %117
  %178 = select <8 x i1> %177, <8 x float> %176, <8 x float> zeroinitializer
  %179 = fadd <8 x float> %178, %158
  %180 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %178, <8 x float> %166, <8 x float> %159) #14
  %181 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %178, <8 x float> %170, <8 x float> %160) #14
  %182 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %178, <8 x float> %174, <8 x float> %161) #14
  %183 = fdiv <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %179
  %184 = fmul <8 x float> %180, %183
  %185 = load float*, float** %35, align 8
  %186 = getelementptr inbounds float, float* %185, i64 %44
  %187 = bitcast float* %186 to <8 x float>*
  store <8 x float> %184, <8 x float>* %187, align 32, !alias.scope !1092
  %188 = fmul <8 x float> %183, %181
  %189 = load float*, float** %36, align 8
  %190 = getelementptr inbounds float, float* %189, i64 %44
  %191 = bitcast float* %190 to <8 x float>*
  store <8 x float> %188, <8 x float>* %191, align 32, !alias.scope !1095
  %192 = fmul <8 x float> %183, %182
  br label %331

193:                                              ; preds = %193, %75
  %194 = phi i64 [ 0, %75 ], [ %329, %193 ]
  %195 = phi <8 x float> [ zeroinitializer, %75 ], [ %325, %193 ]
  %196 = phi <8 x float> [ zeroinitializer, %75 ], [ %326, %193 ]
  %197 = phi <8 x float> [ zeroinitializer, %75 ], [ %327, %193 ]
  %198 = phi <8 x float> [ zeroinitializer, %75 ], [ %328, %193 ]
  %199 = getelementptr inbounds %"struct.jxl::FilterRows", %"struct.jxl::FilterRows"* %0, i64 0, i32 0, i64 %194
  %200 = load float*, float** %199, align 8
  %201 = getelementptr inbounds float, float* %200, i64 %44
  %202 = getelementptr inbounds float, float* %201, i64 %79
  %203 = bitcast float* %202 to <8 x float>*
  %204 = load <8 x float>, <8 x float>* %203, align 32, !alias.scope !1098, !noalias !1101
  %205 = getelementptr inbounds float, float* %201, i64 %80
  %206 = bitcast float* %205 to <8 x float>*
  %207 = load <8 x float>, <8 x float>* %206, align 32, !alias.scope !1103, !noalias !1106
  %208 = fsub <8 x float> %204, %207
  %209 = bitcast <8 x float> %208 to <8 x i32>
  %210 = and <8 x i32> %209, <i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647>
  %211 = getelementptr inbounds float, float* %205, i64 -1
  %212 = bitcast float* %211 to <8 x float>*
  %213 = load <8 x float>, <8 x float>* %212, align 1, !alias.scope !1108, !noalias !1111
  %214 = fsub <8 x float> %213, %207
  %215 = bitcast <8 x float> %214 to <8 x i32>
  %216 = and <8 x i32> %215, <i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647>
  %217 = getelementptr inbounds float, float* %205, i64 1
  %218 = bitcast float* %217 to <8 x float>*
  %219 = load <8 x float>, <8 x float>* %218, align 1, !alias.scope !1113, !noalias !1116
  %220 = fsub <8 x float> %219, %207
  %221 = bitcast <8 x float> %220 to <8 x i32>
  %222 = and <8 x i32> %221, <i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647>
  %223 = getelementptr inbounds float, float* %201, i64 %81
  %224 = getelementptr inbounds float, float* %223, i64 -2
  %225 = bitcast float* %224 to <8 x float>*
  %226 = load <8 x float>, <8 x float>* %225, align 1, !alias.scope !1118, !noalias !1121
  %227 = getelementptr inbounds float, float* %223, i64 -1
  %228 = bitcast float* %227 to <8 x float>*
  %229 = load <8 x float>, <8 x float>* %228, align 1, !alias.scope !1123, !noalias !1126
  %230 = fsub <8 x float> %226, %229
  %231 = bitcast <8 x float> %230 to <8 x i32>
  %232 = and <8 x i32> %231, <i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647>
  %233 = bitcast <8 x i32> %216 to <8 x float>
  %234 = bitcast <8 x i32> %232 to <8 x float>
  %235 = fadd <8 x float> %233, %234
  %236 = fsub <8 x float> %213, %229
  %237 = bitcast <8 x float> %236 to <8 x i32>
  %238 = and <8 x i32> %237, <i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647>
  %239 = bitcast <8 x i32> %210 to <8 x float>
  %240 = bitcast <8 x i32> %238 to <8 x float>
  %241 = fadd <8 x float> %239, %240
  %242 = bitcast float* %223 to <8 x float>*
  %243 = load <8 x float>, <8 x float>* %242, align 1, !alias.scope !1128, !noalias !1131
  %244 = fsub <8 x float> %229, %243
  %245 = bitcast <8 x float> %244 to <8 x i32>
  %246 = and <8 x i32> %245, <i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647>
  %247 = bitcast <8 x i32> %246 to <8 x float>
  %248 = fadd <8 x float> %235, %247
  %249 = bitcast <8 x i32> %222 to <8 x float>
  %250 = fadd <8 x float> %249, %247
  %251 = fsub <8 x float> %243, %207
  %252 = bitcast <8 x float> %251 to <8 x i32>
  %253 = and <8 x i32> %252, <i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647>
  %254 = bitcast <8 x i32> %253 to <8 x float>
  %255 = fadd <8 x float> %241, %254
  %256 = getelementptr inbounds float, float* %223, i64 1
  %257 = bitcast float* %256 to <8 x float>*
  %258 = load <8 x float>, <8 x float>* %257, align 1, !alias.scope !1133, !noalias !1136
  %259 = fsub <8 x float> %219, %258
  %260 = bitcast <8 x float> %259 to <8 x i32>
  %261 = and <8 x i32> %260, <i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647>
  %262 = bitcast <8 x i32> %261 to <8 x float>
  %263 = fadd <8 x float> %255, %262
  %264 = fsub <8 x float> %243, %258
  %265 = bitcast <8 x float> %264 to <8 x i32>
  %266 = and <8 x i32> %265, <i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647>
  %267 = bitcast <8 x i32> %266 to <8 x float>
  %268 = fadd <8 x float> %248, %267
  %269 = fadd <8 x float> %250, %267
  %270 = getelementptr inbounds float, float* %223, i64 2
  %271 = bitcast float* %270 to <8 x float>*
  %272 = load <8 x float>, <8 x float>* %271, align 1, !alias.scope !1138, !noalias !1141
  %273 = fsub <8 x float> %272, %258
  %274 = bitcast <8 x float> %273 to <8 x i32>
  %275 = and <8 x i32> %274, <i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647>
  %276 = bitcast <8 x i32> %275 to <8 x float>
  %277 = fadd <8 x float> %269, %276
  %278 = getelementptr inbounds float, float* %201, i64 %82
  %279 = getelementptr inbounds float, float* %278, i64 -1
  %280 = bitcast float* %279 to <8 x float>*
  %281 = load <8 x float>, <8 x float>* %280, align 1, !alias.scope !1143, !noalias !1146
  %282 = fsub <8 x float> %281, %229
  %283 = bitcast <8 x float> %282 to <8 x i32>
  %284 = and <8 x i32> %283, <i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647>
  %285 = bitcast <8 x i32> %284 to <8 x float>
  %286 = fadd <8 x float> %254, %285
  %287 = bitcast float* %278 to <8 x float>*
  %288 = load <8 x float>, <8 x float>* %287, align 32, !alias.scope !1148, !noalias !1151
  %289 = fsub <8 x float> %243, %288
  %290 = bitcast <8 x float> %289 to <8 x i32>
  %291 = and <8 x i32> %290, <i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647>
  %292 = bitcast <8 x i32> %291 to <8 x float>
  %293 = fadd <8 x float> %263, %292
  %294 = fadd <8 x float> %286, %292
  %295 = fsub <8 x float> %281, %288
  %296 = bitcast <8 x float> %295 to <8 x i32>
  %297 = and <8 x i32> %296, <i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647>
  %298 = bitcast <8 x i32> %297 to <8 x float>
  %299 = fadd <8 x float> %268, %298
  %300 = getelementptr inbounds float, float* %278, i64 1
  %301 = bitcast float* %300 to <8 x float>*
  %302 = load <8 x float>, <8 x float>* %301, align 1, !alias.scope !1153, !noalias !1156
  %303 = fsub <8 x float> %302, %288
  %304 = bitcast <8 x float> %303 to <8 x i32>
  %305 = and <8 x i32> %304, <i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647>
  %306 = bitcast <8 x i32> %305 to <8 x float>
  %307 = fadd <8 x float> %277, %306
  %308 = fsub <8 x float> %302, %258
  %309 = bitcast <8 x float> %308 to <8 x i32>
  %310 = and <8 x i32> %309, <i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647>
  %311 = bitcast <8 x i32> %310 to <8 x float>
  %312 = fadd <8 x float> %294, %311
  %313 = getelementptr inbounds float, float* %201, i64 %83
  %314 = bitcast float* %313 to <8 x float>*
  %315 = load <8 x float>, <8 x float>* %314, align 32, !alias.scope !1158, !noalias !1161
  %316 = fsub <8 x float> %315, %288
  %317 = bitcast <8 x float> %316 to <8 x i32>
  %318 = and <8 x i32> %317, <i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647>
  %319 = bitcast <8 x i32> %318 to <8 x float>
  %320 = fadd <8 x float> %312, %319
  %321 = getelementptr inbounds %"struct.jxl::LoopFilter", %"struct.jxl::LoopFilter"* %1, i64 0, i32 17, i64 %194
  %322 = load float, float* %321, align 4
  %323 = insertelement <8 x float> undef, float %322, i32 0
  %324 = shufflevector <8 x float> %323, <8 x float> undef, <8 x i32> zeroinitializer
  %325 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %293, <8 x float> %324, <8 x float> %195) #14
  %326 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %299, <8 x float> %324, <8 x float> %196) #14
  %327 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %307, <8 x float> %324, <8 x float> %197) #14
  %328 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %320, <8 x float> %324, <8 x float> %198) #14
  %329 = add nuw nsw i64 %194, 1
  %330 = icmp eq i64 %329, 3
  br i1 %330, label %84, label %193

331:                                              ; preds = %50, %84
  %332 = phi <8 x float> [ %74, %50 ], [ %192, %84 ]
  %333 = load float*, float** %37, align 8
  %334 = getelementptr inbounds float, float* %333, i64 %44
  %335 = bitcast float* %334 to <8 x float>*
  store <8 x float> %332, <8 x float>* %335, align 32, !alias.scope !1163
  %336 = add i64 %44, 8
  %337 = icmp ult i64 %336, %4
  br i1 %337, label %43, label %42
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN3jxl6N_AVX37Epf2RowERKNS_10FilterRowsERKNS_10LoopFilterERKNS_13FilterWeightsEmmmm(%"struct.jxl::FilterRows"* readonly dereferenceable(120), %"struct.jxl::LoopFilter"* nocapture readonly dereferenceable(144), %"struct.jxl::FilterWeights"* nocapture readnone dereferenceable(72), i64, i64, i64, i64) #9 {
  %8 = alloca <8 x float>, align 64
  %9 = getelementptr inbounds %"struct.jxl::FilterRows", %"struct.jxl::FilterRows"* %0, i64 0, i32 3
  %10 = load float*, float** %9, align 8
  %11 = getelementptr inbounds %"struct.jxl::LoopFilter", %"struct.jxl::LoopFilter"* %1, i64 0, i32 24
  %12 = load float, float* %11, align 8
  %13 = getelementptr inbounds %"struct.jxl::LoopFilter", %"struct.jxl::LoopFilter"* %1, i64 0, i32 25
  %14 = load float, float* %13, align 4
  %15 = fmul float %12, %14
  %16 = bitcast <8 x float>* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %16) #14
  %17 = getelementptr inbounds <8 x float>, <8 x float>* %8, i64 0, i64 0
  %18 = getelementptr inbounds <8 x float>, <8 x float>* %8, i64 0, i64 1
  %19 = getelementptr inbounds <8 x float>, <8 x float>* %8, i64 0, i64 5
  %20 = getelementptr inbounds <8 x float>, <8 x float>* %8, i64 0, i64 6
  %21 = getelementptr inbounds <8 x float>, <8 x float>* %8, i64 0, i64 7
  store float %15, float* %17, align 64
  %22 = insertelement <4 x float> undef, float %12, i32 0
  %23 = shufflevector <4 x float> %22, <4 x float> undef, <4 x i32> zeroinitializer
  %24 = bitcast float* %18 to <4 x float>*
  store <4 x float> %23, <4 x float>* %24, align 4
  store float %12, float* %19, align 4
  store float %12, float* %20, align 8
  store float %15, float* %21, align 4
  switch i64 %6, label %28 [
    i64 7, label %25
    i64 0, label %25
  ]

25:                                               ; preds = %7, %7
  %26 = insertelement <8 x float> undef, float %15, i32 0
  %27 = shufflevector <8 x float> %26, <8 x float> undef, <8 x i32> zeroinitializer
  store <8 x float> %27, <8 x float>* %8, align 64, !alias.scope !1166
  br label %28

28:                                               ; preds = %25, %7
  %29 = icmp ult i64 %3, %4
  br i1 %29, label %30, label %48

30:                                               ; preds = %28
  %31 = getelementptr inbounds %"struct.jxl::FilterRows", %"struct.jxl::FilterRows"* %0, i64 0, i32 0, i64 0
  %32 = getelementptr inbounds %"struct.jxl::FilterRows", %"struct.jxl::FilterRows"* %0, i64 0, i32 1, i64 3
  %33 = getelementptr inbounds %"struct.jxl::FilterRows", %"struct.jxl::FilterRows"* %0, i64 0, i32 0, i64 1
  %34 = getelementptr inbounds %"struct.jxl::FilterRows", %"struct.jxl::FilterRows"* %0, i64 0, i32 0, i64 2
  %35 = getelementptr inbounds %"struct.jxl::FilterRows", %"struct.jxl::FilterRows"* %0, i64 0, i32 1, i64 2
  %36 = getelementptr inbounds %"struct.jxl::LoopFilter", %"struct.jxl::LoopFilter"* %1, i64 0, i32 17, i64 0
  %37 = getelementptr inbounds %"struct.jxl::LoopFilter", %"struct.jxl::LoopFilter"* %1, i64 0, i32 17, i64 1
  %38 = getelementptr inbounds %"struct.jxl::LoopFilter", %"struct.jxl::LoopFilter"* %1, i64 0, i32 17, i64 2
  %39 = getelementptr inbounds %"struct.jxl::LoopFilter", %"struct.jxl::LoopFilter"* %1, i64 0, i32 19
  %40 = getelementptr inbounds %"struct.jxl::FilterRows", %"struct.jxl::FilterRows"* %0, i64 0, i32 1, i64 4
  %41 = getelementptr inbounds %"struct.jxl::FilterRows", %"struct.jxl::FilterRows"* %0, i64 0, i32 2, i64 0
  %42 = getelementptr inbounds %"struct.jxl::FilterRows", %"struct.jxl::FilterRows"* %0, i64 0, i32 2, i64 1
  %43 = getelementptr inbounds %"struct.jxl::FilterRows", %"struct.jxl::FilterRows"* %0, i64 0, i32 2, i64 2
  %44 = add i64 %5, %3
  %45 = and i64 %44, 7
  %46 = getelementptr inbounds <8 x float>, <8 x float>* %8, i64 0, i64 %45
  %47 = bitcast float* %46 to <8 x float>*
  br label %49

48:                                               ; preds = %262, %28
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %16) #14
  ret void

49:                                               ; preds = %30, %262
  %50 = phi i64 [ %3, %30 ], [ %267, %262 ]
  %51 = add i64 %50, %5
  %52 = lshr i64 %51, 3
  %53 = getelementptr inbounds float, float* %10, i64 %52
  %54 = load float, float* %53, align 4
  %55 = fcmp olt float %54, 0xC00F3DF000000000
  br i1 %55, label %56, label %81

56:                                               ; preds = %49
  %57 = load float*, float** %31, align 8
  %58 = load i64, i64* %32, align 8
  %59 = getelementptr inbounds float, float* %57, i64 %50
  %60 = getelementptr inbounds float, float* %59, i64 %58
  %61 = bitcast float* %60 to <8 x float>*
  %62 = load <8 x float>, <8 x float>* %61, align 32, !alias.scope !1169, !noalias !1172
  %63 = load float*, float** %41, align 8
  %64 = getelementptr inbounds float, float* %63, i64 %50
  %65 = bitcast float* %64 to <8 x float>*
  store <8 x float> %62, <8 x float>* %65, align 32, !alias.scope !1174
  %66 = load float*, float** %33, align 8
  %67 = load i64, i64* %32, align 8
  %68 = getelementptr inbounds float, float* %66, i64 %50
  %69 = getelementptr inbounds float, float* %68, i64 %67
  %70 = bitcast float* %69 to <8 x float>*
  %71 = load <8 x float>, <8 x float>* %70, align 32, !alias.scope !1169, !noalias !1172
  %72 = load float*, float** %42, align 8
  %73 = getelementptr inbounds float, float* %72, i64 %50
  %74 = bitcast float* %73 to <8 x float>*
  store <8 x float> %71, <8 x float>* %74, align 32, !alias.scope !1174
  %75 = load float*, float** %34, align 8
  %76 = load i64, i64* %32, align 8
  %77 = getelementptr inbounds float, float* %75, i64 %50
  %78 = getelementptr inbounds float, float* %77, i64 %76
  %79 = bitcast float* %78 to <8 x float>*
  %80 = load <8 x float>, <8 x float>* %79, align 32, !alias.scope !1169, !noalias !1172
  br label %262

81:                                               ; preds = %49
  %82 = load <8 x float>, <8 x float>* %47, align 32, !alias.scope !1177, !noalias !1180
  %83 = insertelement <8 x float> undef, float %54, i32 0
  %84 = shufflevector <8 x float> %83, <8 x float> undef, <8 x i32> zeroinitializer
  %85 = fmul <8 x float> %84, %82
  %86 = load float*, float** %31, align 8
  %87 = load i64, i64* %32, align 8
  %88 = getelementptr inbounds float, float* %86, i64 %87
  %89 = getelementptr inbounds float, float* %88, i64 %50
  %90 = bitcast float* %89 to <8 x float>*
  %91 = load <8 x float>, <8 x float>* %90, align 32, !alias.scope !1182, !noalias !1185
  %92 = load float*, float** %33, align 8
  %93 = getelementptr inbounds float, float* %92, i64 %87
  %94 = getelementptr inbounds float, float* %93, i64 %50
  %95 = bitcast float* %94 to <8 x float>*
  %96 = load <8 x float>, <8 x float>* %95, align 32, !alias.scope !1187, !noalias !1190
  %97 = load float*, float** %34, align 8
  %98 = getelementptr inbounds float, float* %97, i64 %87
  %99 = getelementptr inbounds float, float* %98, i64 %50
  %100 = bitcast float* %99 to <8 x float>*
  %101 = load <8 x float>, <8 x float>* %100, align 32, !alias.scope !1192, !noalias !1195
  %102 = load i64, i64* %35, align 8, !noalias !1197
  %103 = getelementptr inbounds float, float* %86, i64 %102
  %104 = getelementptr inbounds float, float* %103, i64 %50
  %105 = bitcast float* %104 to <8 x float>*
  %106 = load <8 x float>, <8 x float>* %105, align 32, !alias.scope !1203, !noalias !1206
  %107 = getelementptr inbounds float, float* %92, i64 %102
  %108 = getelementptr inbounds float, float* %107, i64 %50
  %109 = bitcast float* %108 to <8 x float>*
  %110 = load <8 x float>, <8 x float>* %109, align 32, !alias.scope !1208, !noalias !1211
  %111 = getelementptr inbounds float, float* %97, i64 %102
  %112 = getelementptr inbounds float, float* %111, i64 %50
  %113 = bitcast float* %112 to <8 x float>*
  %114 = load <8 x float>, <8 x float>* %113, align 32, !alias.scope !1213, !noalias !1216
  %115 = fsub <8 x float> %106, %91
  %116 = bitcast <8 x float> %115 to <8 x i32>
  %117 = and <8 x i32> %116, <i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647>
  %118 = load float, float* %36, align 8, !noalias !1197
  %119 = insertelement <8 x float> undef, float %118, i32 0
  %120 = shufflevector <8 x float> %119, <8 x float> undef, <8 x i32> zeroinitializer
  %121 = bitcast <8 x i32> %117 to <8 x float>
  %122 = fmul <8 x float> %120, %121
  %123 = fsub <8 x float> %110, %96
  %124 = bitcast <8 x float> %123 to <8 x i32>
  %125 = and <8 x i32> %124, <i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647>
  %126 = load float, float* %37, align 4, !noalias !1197
  %127 = insertelement <8 x float> undef, float %126, i32 0
  %128 = shufflevector <8 x float> %127, <8 x float> undef, <8 x i32> zeroinitializer
  %129 = bitcast <8 x i32> %125 to <8 x float>
  %130 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %129, <8 x float> %128, <8 x float> %122) #14
  %131 = fsub <8 x float> %114, %101
  %132 = bitcast <8 x float> %131 to <8 x i32>
  %133 = and <8 x i32> %132, <i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647>
  %134 = load float, float* %38, align 8, !noalias !1197
  %135 = insertelement <8 x float> undef, float %134, i32 0
  %136 = shufflevector <8 x float> %135, <8 x float> undef, <8 x i32> zeroinitializer
  %137 = bitcast <8 x i32> %133 to <8 x float>
  %138 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %137, <8 x float> %136, <8 x float> %130) #14
  %139 = load float, float* %39, align 8, !noalias !1197
  %140 = insertelement <8 x float> undef, float %139, i32 0
  %141 = shufflevector <8 x float> %140, <8 x float> undef, <8 x i32> zeroinitializer
  %142 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %138, <8 x float> %85, <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>) #14
  %143 = fmul <8 x float> %142, %142
  %144 = fcmp ugt <8 x float> %142, %141
  %145 = select <8 x i1> %144, <8 x float> %143, <8 x float> zeroinitializer
  %146 = fadd <8 x float> %145, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %147 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %145, <8 x float> %106, <8 x float> %91) #14
  %148 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %145, <8 x float> %110, <8 x float> %96) #14
  %149 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %145, <8 x float> %114, <8 x float> %101) #14
  %150 = add i64 %50, -1
  %151 = getelementptr inbounds float, float* %88, i64 %150
  %152 = bitcast float* %151 to <8 x float>*
  %153 = load <8 x float>, <8 x float>* %152, align 1, !alias.scope !1218, !noalias !1221
  %154 = getelementptr inbounds float, float* %93, i64 %150
  %155 = bitcast float* %154 to <8 x float>*
  %156 = load <8 x float>, <8 x float>* %155, align 1, !alias.scope !1228, !noalias !1231
  %157 = getelementptr inbounds float, float* %98, i64 %150
  %158 = bitcast float* %157 to <8 x float>*
  %159 = load <8 x float>, <8 x float>* %158, align 1, !alias.scope !1233, !noalias !1236
  %160 = fsub <8 x float> %153, %91
  %161 = bitcast <8 x float> %160 to <8 x i32>
  %162 = and <8 x i32> %161, <i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647>
  %163 = bitcast <8 x i32> %162 to <8 x float>
  %164 = fmul <8 x float> %120, %163
  %165 = fsub <8 x float> %156, %96
  %166 = bitcast <8 x float> %165 to <8 x i32>
  %167 = and <8 x i32> %166, <i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647>
  %168 = bitcast <8 x i32> %167 to <8 x float>
  %169 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %168, <8 x float> %128, <8 x float> %164) #14
  %170 = fsub <8 x float> %159, %101
  %171 = bitcast <8 x float> %170 to <8 x i32>
  %172 = and <8 x i32> %171, <i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647>
  %173 = bitcast <8 x i32> %172 to <8 x float>
  %174 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %173, <8 x float> %136, <8 x float> %169) #14
  %175 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %174, <8 x float> %85, <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>) #14
  %176 = fmul <8 x float> %175, %175
  %177 = fcmp ugt <8 x float> %175, %141
  %178 = select <8 x i1> %177, <8 x float> %176, <8 x float> zeroinitializer
  %179 = fadd <8 x float> %146, %178
  %180 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %178, <8 x float> %153, <8 x float> %147) #14
  %181 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %178, <8 x float> %156, <8 x float> %148) #14
  %182 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %178, <8 x float> %159, <8 x float> %149) #14
  %183 = add nuw i64 %50, 1
  %184 = getelementptr inbounds float, float* %88, i64 %183
  %185 = bitcast float* %184 to <8 x float>*
  %186 = load <8 x float>, <8 x float>* %185, align 1, !alias.scope !1238, !noalias !1241
  %187 = getelementptr inbounds float, float* %93, i64 %183
  %188 = bitcast float* %187 to <8 x float>*
  %189 = load <8 x float>, <8 x float>* %188, align 1, !alias.scope !1248, !noalias !1251
  %190 = getelementptr inbounds float, float* %98, i64 %183
  %191 = bitcast float* %190 to <8 x float>*
  %192 = load <8 x float>, <8 x float>* %191, align 1, !alias.scope !1253, !noalias !1256
  %193 = fsub <8 x float> %186, %91
  %194 = bitcast <8 x float> %193 to <8 x i32>
  %195 = and <8 x i32> %194, <i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647>
  %196 = bitcast <8 x i32> %195 to <8 x float>
  %197 = fmul <8 x float> %120, %196
  %198 = fsub <8 x float> %189, %96
  %199 = bitcast <8 x float> %198 to <8 x i32>
  %200 = and <8 x i32> %199, <i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647>
  %201 = bitcast <8 x i32> %200 to <8 x float>
  %202 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %201, <8 x float> %128, <8 x float> %197) #14
  %203 = fsub <8 x float> %192, %101
  %204 = bitcast <8 x float> %203 to <8 x i32>
  %205 = and <8 x i32> %204, <i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647>
  %206 = bitcast <8 x i32> %205 to <8 x float>
  %207 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %206, <8 x float> %136, <8 x float> %202) #14
  %208 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %207, <8 x float> %85, <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>) #14
  %209 = fmul <8 x float> %208, %208
  %210 = fcmp ugt <8 x float> %208, %141
  %211 = select <8 x i1> %210, <8 x float> %209, <8 x float> zeroinitializer
  %212 = fadd <8 x float> %179, %211
  %213 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %211, <8 x float> %186, <8 x float> %180) #14
  %214 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %211, <8 x float> %189, <8 x float> %181) #14
  %215 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %211, <8 x float> %192, <8 x float> %182) #14
  %216 = load i64, i64* %40, align 8, !noalias !1258
  %217 = getelementptr inbounds float, float* %86, i64 %216
  %218 = getelementptr inbounds float, float* %217, i64 %50
  %219 = bitcast float* %218 to <8 x float>*
  %220 = load <8 x float>, <8 x float>* %219, align 32, !alias.scope !1264, !noalias !1267
  %221 = getelementptr inbounds float, float* %92, i64 %216
  %222 = getelementptr inbounds float, float* %221, i64 %50
  %223 = bitcast float* %222 to <8 x float>*
  %224 = load <8 x float>, <8 x float>* %223, align 32, !alias.scope !1269, !noalias !1272
  %225 = getelementptr inbounds float, float* %97, i64 %216
  %226 = getelementptr inbounds float, float* %225, i64 %50
  %227 = bitcast float* %226 to <8 x float>*
  %228 = load <8 x float>, <8 x float>* %227, align 32, !alias.scope !1274, !noalias !1277
  %229 = fsub <8 x float> %220, %91
  %230 = bitcast <8 x float> %229 to <8 x i32>
  %231 = and <8 x i32> %230, <i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647>
  %232 = bitcast <8 x i32> %231 to <8 x float>
  %233 = fmul <8 x float> %120, %232
  %234 = fsub <8 x float> %224, %96
  %235 = bitcast <8 x float> %234 to <8 x i32>
  %236 = and <8 x i32> %235, <i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647>
  %237 = bitcast <8 x i32> %236 to <8 x float>
  %238 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %237, <8 x float> %128, <8 x float> %233) #14
  %239 = fsub <8 x float> %228, %101
  %240 = bitcast <8 x float> %239 to <8 x i32>
  %241 = and <8 x i32> %240, <i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647>
  %242 = bitcast <8 x i32> %241 to <8 x float>
  %243 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %242, <8 x float> %136, <8 x float> %238) #14
  %244 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %243, <8 x float> %85, <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>) #14
  %245 = fmul <8 x float> %244, %244
  %246 = fcmp ugt <8 x float> %244, %141
  %247 = select <8 x i1> %246, <8 x float> %245, <8 x float> zeroinitializer
  %248 = fadd <8 x float> %212, %247
  %249 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %247, <8 x float> %220, <8 x float> %213) #14
  %250 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %247, <8 x float> %224, <8 x float> %214) #14
  %251 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %247, <8 x float> %228, <8 x float> %215) #14
  %252 = fdiv <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %248
  %253 = fmul <8 x float> %249, %252
  %254 = load float*, float** %41, align 8
  %255 = getelementptr inbounds float, float* %254, i64 %50
  %256 = bitcast float* %255 to <8 x float>*
  store <8 x float> %253, <8 x float>* %256, align 32, !alias.scope !1279
  %257 = fmul <8 x float> %250, %252
  %258 = load float*, float** %42, align 8
  %259 = getelementptr inbounds float, float* %258, i64 %50
  %260 = bitcast float* %259 to <8 x float>*
  store <8 x float> %257, <8 x float>* %260, align 32, !alias.scope !1282
  %261 = fmul <8 x float> %251, %252
  br label %262

262:                                              ; preds = %56, %81
  %263 = phi <8 x float> [ %80, %56 ], [ %261, %81 ]
  %264 = load float*, float** %43, align 8
  %265 = getelementptr inbounds float, float* %264, i64 %50
  %266 = bitcast float* %265 to <8 x float>*
  store <8 x float> %263, <8 x float>* %266, align 32, !alias.scope !1285
  %267 = add i64 %50, 8
  %268 = icmp ult i64 %267, %4
  br i1 %268, label %49, label %48
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN3jxl6N_AVX318FilterPipelineInitEPNS_14FilterPipelineERKNS_10LoopFilterERKNS_6Image3IfEERKNS_4RectESC_mPS7_SC_(%"class.jxl::FilterPipeline"*, %"struct.jxl::LoopFilter"* nocapture readonly dereferenceable(144), %"class.jxl::Image3"* dereferenceable(96), %"class.jxl::Rect"* nocapture readonly dereferenceable(32), %"class.jxl::Rect"* nocapture readonly dereferenceable(32), i64, %"class.jxl::Image3"*, %"class.jxl::Rect"* nocapture readonly dereferenceable(32)) #10 {
  %9 = getelementptr inbounds %"struct.jxl::LoopFilter", %"struct.jxl::LoopFilter"* %1, i64 0, i32 11
  %10 = load i32, i32* %9, align 4
  %11 = icmp ne i32 %10, 0
  %12 = getelementptr inbounds %"class.jxl::FilterPipeline", %"class.jxl::FilterPipeline"* %0, i64 0, i32 4
  %13 = zext i1 %11 to i8
  store i8 %13, i8* %12, align 8
  %14 = getelementptr inbounds %"class.jxl::FilterPipeline", %"class.jxl::FilterPipeline"* %0, i64 0, i32 3
  store i64 0, i64* %14, align 8
  %15 = getelementptr inbounds %"class.jxl::FilterPipeline", %"class.jxl::FilterPipeline"* %0, i64 0, i32 1
  store i64 0, i64* %15, align 8
  %16 = getelementptr inbounds %"class.jxl::FilterPipeline", %"class.jxl::FilterPipeline"* %0, i64 0, i32 2, i64 0, i32 0
  store %"class.jxl::Image3"* %2, %"class.jxl::Image3"** %16, align 8
  %17 = getelementptr inbounds %"class.jxl::FilterPipeline", %"class.jxl::FilterPipeline"* %0, i64 0, i32 2, i64 0, i32 4
  %18 = bitcast %"class.jxl::Rect"* %17 to i8*
  %19 = bitcast %"class.jxl::Rect"* %3 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %18, i8* align 8 %19, i64 32, i1 false) #14
  %20 = getelementptr inbounds %"class.jxl::FilterPipeline", %"class.jxl::FilterPipeline"* %0, i64 0, i32 2, i64 0, i32 6
  %21 = bitcast %"class.jxl::Rect"* %20 to i8*
  %22 = bitcast %"class.jxl::Rect"* %4 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %21, i8* align 8 %22, i64 32, i1 false) #14
  %23 = getelementptr inbounds %"class.jxl::FilterPipeline", %"class.jxl::FilterPipeline"* %0, i64 0, i32 2, i64 0, i32 7
  store i64 %5, i64* %23, align 8
  %24 = getelementptr inbounds %"class.jxl::FilterPipeline", %"class.jxl::FilterPipeline"* %0, i64 0, i32 2, i64 0, i32 8
  store void (%"struct.jxl::FilterPipeline::FilterStep"*, %"struct.jxl::FilterRows"*, i64)* @_ZZN3jxl14FilterPipeline10FilterStep8SetInputEPKNS_6Image3IfEERKNS_4RectES8_mENUlRKS1_PNS_10FilterRowsElE_8__invokeESA_SC_l, void (%"struct.jxl::FilterPipeline::FilterStep"*, %"struct.jxl::FilterRows"*, i64)** %24, align 8
  %25 = getelementptr inbounds %"struct.jxl::LoopFilter", %"struct.jxl::LoopFilter"* %1, i64 0, i32 2
  %26 = load i8, i8* %25, align 1, !range !311
  %27 = icmp eq i8 %26, 0
  br i1 %27, label %31, label %28

28:                                               ; preds = %8
  %29 = getelementptr inbounds %"class.jxl::FilterPipeline", %"class.jxl::FilterPipeline"* %0, i64 0, i32 2, i64 0, i32 10
  %30 = bitcast %"struct.jxl::FilterDefinition"* %29 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %30, i8* align 8 bitcast (%"struct.jxl::FilterDefinition"* @_ZN3jxl6N_AVX3L15kGaborishFilterE to i8*), i64 16, i1 false) #14
  store i64 1, i64* %14, align 8
  br label %31

31:                                               ; preds = %8, %28
  %32 = phi i64 [ 0, %8 ], [ 1, %28 ]
  %33 = load i32, i32* %9, align 4
  switch i32 %33, label %162 [
    i32 1, label %34
    i32 2, label %54
    i32 3, label %96
  ]

34:                                               ; preds = %31
  %35 = getelementptr inbounds %"class.jxl::FilterPipeline", %"class.jxl::FilterPipeline"* %0, i64 0, i32 2, i64 %32, i32 10
  %36 = bitcast %"struct.jxl::FilterDefinition"* %35 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %36, i8* align 8 bitcast (%"struct.jxl::FilterDefinition"* @_ZN3jxl6N_AVX3L11kEpf1FilterE to i8*), i64 16, i1 false) #14
  %37 = load i64, i64* %14, align 8
  %38 = icmp eq i64 %37, 0
  br i1 %38, label %160, label %39

39:                                               ; preds = %34
  %40 = add i64 %37, -1
  %41 = getelementptr inbounds %"class.jxl::FilterPipeline", %"class.jxl::FilterPipeline"* %0, i64 0, i32 0
  %42 = getelementptr inbounds %"class.jxl::FilterPipeline", %"class.jxl::FilterPipeline"* %0, i64 0, i32 2, i64 %40, i32 2
  store %"class.jxl::Image3"* %41, %"class.jxl::Image3"** %42, align 8
  %43 = getelementptr inbounds %"class.jxl::FilterPipeline", %"class.jxl::FilterPipeline"* %0, i64 0, i32 2, i64 %40, i32 3
  store i64 0, i64* %43, align 8
  %44 = getelementptr inbounds %"class.jxl::FilterPipeline", %"class.jxl::FilterPipeline"* %0, i64 0, i32 2, i64 %40, i32 9
  store void (%"struct.jxl::FilterPipeline::FilterStep"*, %"struct.jxl::FilterRows"*, i64)* @_ZZN3jxl14FilterPipeline10FilterStep22SetOutputCyclicStorageILm5EEEvPNS_6Image3IfEEmENUlRKS1_PNS_10FilterRowsElE_8__invokeES7_S9_l, void (%"struct.jxl::FilterPipeline::FilterStep"*, %"struct.jxl::FilterRows"*, i64)** %44, align 8
  %45 = load i64, i64* %14, align 8
  %46 = load i64, i64* %15, align 8
  %47 = getelementptr inbounds %"class.jxl::FilterPipeline", %"class.jxl::FilterPipeline"* %0, i64 0, i32 2, i64 %45, i32 0
  store %"class.jxl::Image3"* %41, %"class.jxl::Image3"** %47, align 8
  %48 = getelementptr inbounds %"class.jxl::FilterPipeline", %"class.jxl::FilterPipeline"* %0, i64 0, i32 2, i64 %45, i32 1
  store i64 %46, i64* %48, align 8
  %49 = getelementptr inbounds %"class.jxl::FilterPipeline", %"class.jxl::FilterPipeline"* %0, i64 0, i32 2, i64 %45, i32 8
  store void (%"struct.jxl::FilterPipeline::FilterStep"*, %"struct.jxl::FilterRows"*, i64)* @_ZZN3jxl14FilterPipeline10FilterStep21SetInputCyclicStorageILm5EEEvPKNS_6Image3IfEEmENUlRKS1_PNS_10FilterRowsElE_8__invokeES8_SA_l, void (%"struct.jxl::FilterPipeline::FilterStep"*, %"struct.jxl::FilterRows"*, i64)** %49, align 8
  %50 = load i64, i64* %15, align 8
  %51 = add i64 %50, 5
  store i64 %51, i64* %15, align 8
  %52 = load i64, i64* %14, align 8
  %53 = add i64 %52, 1
  br label %160

54:                                               ; preds = %31
  %55 = getelementptr inbounds %"class.jxl::FilterPipeline", %"class.jxl::FilterPipeline"* %0, i64 0, i32 2, i64 %32, i32 10
  %56 = bitcast %"struct.jxl::FilterDefinition"* %55 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %56, i8* align 8 bitcast (%"struct.jxl::FilterDefinition"* @_ZN3jxl6N_AVX3L11kEpf1FilterE to i8*), i64 16, i1 false) #14
  %57 = load i64, i64* %14, align 8
  %58 = icmp eq i64 %57, 0
  br i1 %58, label %74, label %59

59:                                               ; preds = %54
  %60 = add i64 %57, -1
  %61 = getelementptr inbounds %"class.jxl::FilterPipeline", %"class.jxl::FilterPipeline"* %0, i64 0, i32 0
  %62 = getelementptr inbounds %"class.jxl::FilterPipeline", %"class.jxl::FilterPipeline"* %0, i64 0, i32 2, i64 %60, i32 2
  store %"class.jxl::Image3"* %61, %"class.jxl::Image3"** %62, align 8
  %63 = getelementptr inbounds %"class.jxl::FilterPipeline", %"class.jxl::FilterPipeline"* %0, i64 0, i32 2, i64 %60, i32 3
  store i64 0, i64* %63, align 8
  %64 = getelementptr inbounds %"class.jxl::FilterPipeline", %"class.jxl::FilterPipeline"* %0, i64 0, i32 2, i64 %60, i32 9
  store void (%"struct.jxl::FilterPipeline::FilterStep"*, %"struct.jxl::FilterRows"*, i64)* @_ZZN3jxl14FilterPipeline10FilterStep22SetOutputCyclicStorageILm5EEEvPNS_6Image3IfEEmENUlRKS1_PNS_10FilterRowsElE_8__invokeES7_S9_l, void (%"struct.jxl::FilterPipeline::FilterStep"*, %"struct.jxl::FilterRows"*, i64)** %64, align 8
  %65 = load i64, i64* %14, align 8
  %66 = load i64, i64* %15, align 8
  %67 = getelementptr inbounds %"class.jxl::FilterPipeline", %"class.jxl::FilterPipeline"* %0, i64 0, i32 2, i64 %65, i32 0
  store %"class.jxl::Image3"* %61, %"class.jxl::Image3"** %67, align 8
  %68 = getelementptr inbounds %"class.jxl::FilterPipeline", %"class.jxl::FilterPipeline"* %0, i64 0, i32 2, i64 %65, i32 1
  store i64 %66, i64* %68, align 8
  %69 = getelementptr inbounds %"class.jxl::FilterPipeline", %"class.jxl::FilterPipeline"* %0, i64 0, i32 2, i64 %65, i32 8
  store void (%"struct.jxl::FilterPipeline::FilterStep"*, %"struct.jxl::FilterRows"*, i64)* @_ZZN3jxl14FilterPipeline10FilterStep21SetInputCyclicStorageILm5EEEvPKNS_6Image3IfEEmENUlRKS1_PNS_10FilterRowsElE_8__invokeES8_SA_l, void (%"struct.jxl::FilterPipeline::FilterStep"*, %"struct.jxl::FilterRows"*, i64)** %69, align 8
  %70 = load i64, i64* %15, align 8
  %71 = add i64 %70, 5
  store i64 %71, i64* %15, align 8
  %72 = load i64, i64* %14, align 8
  %73 = add i64 %72, 1
  br label %74

74:                                               ; preds = %54, %59
  %75 = phi i64 [ 1, %54 ], [ %73, %59 ]
  store i64 %75, i64* %14, align 8
  %76 = getelementptr inbounds %"class.jxl::FilterPipeline", %"class.jxl::FilterPipeline"* %0, i64 0, i32 2, i64 %75, i32 10
  %77 = bitcast %"struct.jxl::FilterDefinition"* %76 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %77, i8* align 8 bitcast (%"struct.jxl::FilterDefinition"* @_ZN3jxl6N_AVX3L11kEpf2FilterE to i8*), i64 16, i1 false) #14
  %78 = load i64, i64* %14, align 8
  %79 = icmp eq i64 %78, 0
  br i1 %79, label %160, label %80

80:                                               ; preds = %74
  %81 = add i64 %78, -1
  %82 = getelementptr inbounds %"class.jxl::FilterPipeline", %"class.jxl::FilterPipeline"* %0, i64 0, i32 0
  %83 = load i64, i64* %15, align 8
  %84 = getelementptr inbounds %"class.jxl::FilterPipeline", %"class.jxl::FilterPipeline"* %0, i64 0, i32 2, i64 %81, i32 2
  store %"class.jxl::Image3"* %82, %"class.jxl::Image3"** %84, align 8
  %85 = getelementptr inbounds %"class.jxl::FilterPipeline", %"class.jxl::FilterPipeline"* %0, i64 0, i32 2, i64 %81, i32 3
  store i64 %83, i64* %85, align 8
  %86 = getelementptr inbounds %"class.jxl::FilterPipeline", %"class.jxl::FilterPipeline"* %0, i64 0, i32 2, i64 %81, i32 9
  store void (%"struct.jxl::FilterPipeline::FilterStep"*, %"struct.jxl::FilterRows"*, i64)* @_ZZN3jxl14FilterPipeline10FilterStep22SetOutputCyclicStorageILm3EEEvPNS_6Image3IfEEmENUlRKS1_PNS_10FilterRowsElE_8__invokeES7_S9_l, void (%"struct.jxl::FilterPipeline::FilterStep"*, %"struct.jxl::FilterRows"*, i64)** %86, align 8
  %87 = load i64, i64* %14, align 8
  %88 = load i64, i64* %15, align 8
  %89 = getelementptr inbounds %"class.jxl::FilterPipeline", %"class.jxl::FilterPipeline"* %0, i64 0, i32 2, i64 %87, i32 0
  store %"class.jxl::Image3"* %82, %"class.jxl::Image3"** %89, align 8
  %90 = getelementptr inbounds %"class.jxl::FilterPipeline", %"class.jxl::FilterPipeline"* %0, i64 0, i32 2, i64 %87, i32 1
  store i64 %88, i64* %90, align 8
  %91 = getelementptr inbounds %"class.jxl::FilterPipeline", %"class.jxl::FilterPipeline"* %0, i64 0, i32 2, i64 %87, i32 8
  store void (%"struct.jxl::FilterPipeline::FilterStep"*, %"struct.jxl::FilterRows"*, i64)* @_ZZN3jxl14FilterPipeline10FilterStep21SetInputCyclicStorageILm3EEEvPKNS_6Image3IfEEmENUlRKS1_PNS_10FilterRowsElE_8__invokeES8_SA_l, void (%"struct.jxl::FilterPipeline::FilterStep"*, %"struct.jxl::FilterRows"*, i64)** %91, align 8
  %92 = load i64, i64* %15, align 8
  %93 = add i64 %92, 3
  store i64 %93, i64* %15, align 8
  %94 = load i64, i64* %14, align 8
  %95 = add i64 %94, 1
  br label %160

96:                                               ; preds = %31
  %97 = getelementptr inbounds %"class.jxl::FilterPipeline", %"class.jxl::FilterPipeline"* %0, i64 0, i32 2, i64 %32, i32 10
  %98 = bitcast %"struct.jxl::FilterDefinition"* %97 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %98, i8* align 8 bitcast (%"struct.jxl::FilterDefinition"* @_ZN3jxl6N_AVX3L11kEpf0FilterE to i8*), i64 16, i1 false) #14
  %99 = load i64, i64* %14, align 8
  %100 = icmp eq i64 %99, 0
  br i1 %100, label %116, label %101

101:                                              ; preds = %96
  %102 = add i64 %99, -1
  %103 = getelementptr inbounds %"class.jxl::FilterPipeline", %"class.jxl::FilterPipeline"* %0, i64 0, i32 0
  %104 = getelementptr inbounds %"class.jxl::FilterPipeline", %"class.jxl::FilterPipeline"* %0, i64 0, i32 2, i64 %102, i32 2
  store %"class.jxl::Image3"* %103, %"class.jxl::Image3"** %104, align 8
  %105 = getelementptr inbounds %"class.jxl::FilterPipeline", %"class.jxl::FilterPipeline"* %0, i64 0, i32 2, i64 %102, i32 3
  store i64 0, i64* %105, align 8
  %106 = getelementptr inbounds %"class.jxl::FilterPipeline", %"class.jxl::FilterPipeline"* %0, i64 0, i32 2, i64 %102, i32 9
  store void (%"struct.jxl::FilterPipeline::FilterStep"*, %"struct.jxl::FilterRows"*, i64)* @_ZZN3jxl14FilterPipeline10FilterStep22SetOutputCyclicStorageILm7EEEvPNS_6Image3IfEEmENUlRKS1_PNS_10FilterRowsElE_8__invokeES7_S9_l, void (%"struct.jxl::FilterPipeline::FilterStep"*, %"struct.jxl::FilterRows"*, i64)** %106, align 8
  %107 = load i64, i64* %14, align 8
  %108 = load i64, i64* %15, align 8
  %109 = getelementptr inbounds %"class.jxl::FilterPipeline", %"class.jxl::FilterPipeline"* %0, i64 0, i32 2, i64 %107, i32 0
  store %"class.jxl::Image3"* %103, %"class.jxl::Image3"** %109, align 8
  %110 = getelementptr inbounds %"class.jxl::FilterPipeline", %"class.jxl::FilterPipeline"* %0, i64 0, i32 2, i64 %107, i32 1
  store i64 %108, i64* %110, align 8
  %111 = getelementptr inbounds %"class.jxl::FilterPipeline", %"class.jxl::FilterPipeline"* %0, i64 0, i32 2, i64 %107, i32 8
  store void (%"struct.jxl::FilterPipeline::FilterStep"*, %"struct.jxl::FilterRows"*, i64)* @_ZZN3jxl14FilterPipeline10FilterStep21SetInputCyclicStorageILm7EEEvPKNS_6Image3IfEEmENUlRKS1_PNS_10FilterRowsElE_8__invokeES8_SA_l, void (%"struct.jxl::FilterPipeline::FilterStep"*, %"struct.jxl::FilterRows"*, i64)** %111, align 8
  %112 = load i64, i64* %15, align 8
  %113 = add i64 %112, 7
  store i64 %113, i64* %15, align 8
  %114 = load i64, i64* %14, align 8
  %115 = add i64 %114, 1
  br label %116

116:                                              ; preds = %96, %101
  %117 = phi i64 [ 1, %96 ], [ %115, %101 ]
  store i64 %117, i64* %14, align 8
  %118 = getelementptr inbounds %"class.jxl::FilterPipeline", %"class.jxl::FilterPipeline"* %0, i64 0, i32 2, i64 %117, i32 10
  %119 = bitcast %"struct.jxl::FilterDefinition"* %118 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %119, i8* align 8 bitcast (%"struct.jxl::FilterDefinition"* @_ZN3jxl6N_AVX3L11kEpf1FilterE to i8*), i64 16, i1 false) #14
  %120 = load i64, i64* %14, align 8
  %121 = icmp eq i64 %120, 0
  br i1 %121, label %138, label %122

122:                                              ; preds = %116
  %123 = add i64 %120, -1
  %124 = getelementptr inbounds %"class.jxl::FilterPipeline", %"class.jxl::FilterPipeline"* %0, i64 0, i32 0
  %125 = load i64, i64* %15, align 8
  %126 = getelementptr inbounds %"class.jxl::FilterPipeline", %"class.jxl::FilterPipeline"* %0, i64 0, i32 2, i64 %123, i32 2
  store %"class.jxl::Image3"* %124, %"class.jxl::Image3"** %126, align 8
  %127 = getelementptr inbounds %"class.jxl::FilterPipeline", %"class.jxl::FilterPipeline"* %0, i64 0, i32 2, i64 %123, i32 3
  store i64 %125, i64* %127, align 8
  %128 = getelementptr inbounds %"class.jxl::FilterPipeline", %"class.jxl::FilterPipeline"* %0, i64 0, i32 2, i64 %123, i32 9
  store void (%"struct.jxl::FilterPipeline::FilterStep"*, %"struct.jxl::FilterRows"*, i64)* @_ZZN3jxl14FilterPipeline10FilterStep22SetOutputCyclicStorageILm5EEEvPNS_6Image3IfEEmENUlRKS1_PNS_10FilterRowsElE_8__invokeES7_S9_l, void (%"struct.jxl::FilterPipeline::FilterStep"*, %"struct.jxl::FilterRows"*, i64)** %128, align 8
  %129 = load i64, i64* %14, align 8
  %130 = load i64, i64* %15, align 8
  %131 = getelementptr inbounds %"class.jxl::FilterPipeline", %"class.jxl::FilterPipeline"* %0, i64 0, i32 2, i64 %129, i32 0
  store %"class.jxl::Image3"* %124, %"class.jxl::Image3"** %131, align 8
  %132 = getelementptr inbounds %"class.jxl::FilterPipeline", %"class.jxl::FilterPipeline"* %0, i64 0, i32 2, i64 %129, i32 1
  store i64 %130, i64* %132, align 8
  %133 = getelementptr inbounds %"class.jxl::FilterPipeline", %"class.jxl::FilterPipeline"* %0, i64 0, i32 2, i64 %129, i32 8
  store void (%"struct.jxl::FilterPipeline::FilterStep"*, %"struct.jxl::FilterRows"*, i64)* @_ZZN3jxl14FilterPipeline10FilterStep21SetInputCyclicStorageILm5EEEvPKNS_6Image3IfEEmENUlRKS1_PNS_10FilterRowsElE_8__invokeES8_SA_l, void (%"struct.jxl::FilterPipeline::FilterStep"*, %"struct.jxl::FilterRows"*, i64)** %133, align 8
  %134 = load i64, i64* %15, align 8
  %135 = add i64 %134, 5
  store i64 %135, i64* %15, align 8
  %136 = load i64, i64* %14, align 8
  %137 = add i64 %136, 1
  br label %138

138:                                              ; preds = %116, %122
  %139 = phi i64 [ 1, %116 ], [ %137, %122 ]
  store i64 %139, i64* %14, align 8
  %140 = getelementptr inbounds %"class.jxl::FilterPipeline", %"class.jxl::FilterPipeline"* %0, i64 0, i32 2, i64 %139, i32 10
  %141 = bitcast %"struct.jxl::FilterDefinition"* %140 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %141, i8* align 8 bitcast (%"struct.jxl::FilterDefinition"* @_ZN3jxl6N_AVX3L11kEpf2FilterE to i8*), i64 16, i1 false) #14
  %142 = load i64, i64* %14, align 8
  %143 = icmp eq i64 %142, 0
  br i1 %143, label %160, label %144

144:                                              ; preds = %138
  %145 = add i64 %142, -1
  %146 = getelementptr inbounds %"class.jxl::FilterPipeline", %"class.jxl::FilterPipeline"* %0, i64 0, i32 0
  %147 = load i64, i64* %15, align 8
  %148 = getelementptr inbounds %"class.jxl::FilterPipeline", %"class.jxl::FilterPipeline"* %0, i64 0, i32 2, i64 %145, i32 2
  store %"class.jxl::Image3"* %146, %"class.jxl::Image3"** %148, align 8
  %149 = getelementptr inbounds %"class.jxl::FilterPipeline", %"class.jxl::FilterPipeline"* %0, i64 0, i32 2, i64 %145, i32 3
  store i64 %147, i64* %149, align 8
  %150 = getelementptr inbounds %"class.jxl::FilterPipeline", %"class.jxl::FilterPipeline"* %0, i64 0, i32 2, i64 %145, i32 9
  store void (%"struct.jxl::FilterPipeline::FilterStep"*, %"struct.jxl::FilterRows"*, i64)* @_ZZN3jxl14FilterPipeline10FilterStep22SetOutputCyclicStorageILm3EEEvPNS_6Image3IfEEmENUlRKS1_PNS_10FilterRowsElE_8__invokeES7_S9_l, void (%"struct.jxl::FilterPipeline::FilterStep"*, %"struct.jxl::FilterRows"*, i64)** %150, align 8
  %151 = load i64, i64* %14, align 8
  %152 = load i64, i64* %15, align 8
  %153 = getelementptr inbounds %"class.jxl::FilterPipeline", %"class.jxl::FilterPipeline"* %0, i64 0, i32 2, i64 %151, i32 0
  store %"class.jxl::Image3"* %146, %"class.jxl::Image3"** %153, align 8
  %154 = getelementptr inbounds %"class.jxl::FilterPipeline", %"class.jxl::FilterPipeline"* %0, i64 0, i32 2, i64 %151, i32 1
  store i64 %152, i64* %154, align 8
  %155 = getelementptr inbounds %"class.jxl::FilterPipeline", %"class.jxl::FilterPipeline"* %0, i64 0, i32 2, i64 %151, i32 8
  store void (%"struct.jxl::FilterPipeline::FilterStep"*, %"struct.jxl::FilterRows"*, i64)* @_ZZN3jxl14FilterPipeline10FilterStep21SetInputCyclicStorageILm3EEEvPKNS_6Image3IfEEmENUlRKS1_PNS_10FilterRowsElE_8__invokeES8_SA_l, void (%"struct.jxl::FilterPipeline::FilterStep"*, %"struct.jxl::FilterRows"*, i64)** %155, align 8
  %156 = load i64, i64* %15, align 8
  %157 = add i64 %156, 3
  store i64 %157, i64* %15, align 8
  %158 = load i64, i64* %14, align 8
  %159 = add i64 %158, 1
  br label %160

160:                                              ; preds = %144, %138, %80, %74, %39, %34
  %161 = phi i64 [ 1, %34 ], [ %53, %39 ], [ 1, %74 ], [ %95, %80 ], [ 1, %138 ], [ %159, %144 ]
  store i64 %161, i64* %14, align 8
  br label %162

162:                                              ; preds = %160, %31
  %163 = phi i64 [ %32, %31 ], [ %161, %160 ]
  %164 = add i64 %163, -1
  %165 = getelementptr inbounds %"class.jxl::FilterPipeline", %"class.jxl::FilterPipeline"* %0, i64 0, i32 2, i64 %164, i32 2
  store %"class.jxl::Image3"* %6, %"class.jxl::Image3"** %165, align 8
  %166 = getelementptr inbounds %"class.jxl::FilterPipeline", %"class.jxl::FilterPipeline"* %0, i64 0, i32 2, i64 %164, i32 5
  %167 = bitcast %"class.jxl::Rect"* %166 to i8*
  %168 = bitcast %"class.jxl::Rect"* %7 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %167, i8* align 8 %168, i64 32, i1 false) #14
  %169 = getelementptr inbounds %"class.jxl::FilterPipeline", %"class.jxl::FilterPipeline"* %0, i64 0, i32 2, i64 %164, i32 9
  store void (%"struct.jxl::FilterPipeline::FilterStep"*, %"struct.jxl::FilterRows"*, i64)* @_ZZN3jxl14FilterPipeline10FilterStep9SetOutputEPNS_6Image3IfEERKNS_4RectEENUlRKS1_PNS_10FilterRowsElE_8__invokeES9_SB_l, void (%"struct.jxl::FilterPipeline::FilterStep"*, %"struct.jxl::FilterRows"*, i64)** %169, align 8
  %170 = load i64, i64* %14, align 8
  %171 = trunc i64 %170 to i32
  %172 = add i32 %171, -1
  %173 = icmp sgt i32 %172, -1
  br i1 %173, label %174, label %176

174:                                              ; preds = %162
  %175 = sext i32 %172 to i64
  br label %187

176:                                              ; preds = %187, %162
  %177 = phi i64 [ 0, %162 ], [ %196, %187 ]
  %178 = getelementptr inbounds %"class.jxl::FilterPipeline", %"class.jxl::FilterPipeline"* %0, i64 0, i32 5
  store i64 %177, i64* %178, align 8
  %179 = load i32, i32* %9, align 4
  %180 = zext i32 %179 to i64
  %181 = getelementptr inbounds [4 x i64], [4 x i64]* @_ZZNK3jxl10LoopFilter7PaddingEvE20padding_per_epf_iter, i64 0, i64 %180
  %182 = load i64, i64* %181, align 8
  %183 = load i8, i8* %25, align 1, !range !311
  %184 = zext i8 %183 to i64
  %185 = add i64 %182, %184
  %186 = icmp eq i64 %177, %185
  br i1 %186, label %203, label %200

187:                                              ; preds = %174, %187
  %188 = phi i64 [ %175, %174 ], [ %199, %187 ]
  %189 = phi i32 [ %172, %174 ], [ %197, %187 ]
  %190 = phi i64 [ 0, %174 ], [ %196, %187 ]
  %191 = add i64 %190, 7
  %192 = and i64 %191, -8
  %193 = getelementptr inbounds %"class.jxl::FilterPipeline", %"class.jxl::FilterPipeline"* %0, i64 0, i32 2, i64 %188, i32 11
  store i64 %192, i64* %193, align 8
  %194 = getelementptr inbounds %"class.jxl::FilterPipeline", %"class.jxl::FilterPipeline"* %0, i64 0, i32 2, i64 %188, i32 10, i32 1
  %195 = load i64, i64* %194, align 8
  %196 = add i64 %195, %190
  %197 = add nsw i32 %189, -1
  %198 = icmp sgt i32 %189, 0
  %199 = add nsw i64 %188, -1
  br i1 %198, label %187, label %176

200:                                              ; preds = %176
  %201 = tail call zeroext i1 (i8*, ...) @_ZN3jxl5DebugEPKcz(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str, i64 0, i64 0), i8* getelementptr inbounds ([44 x i8], [44 x i8]* @.str.1, i64 0, i64 0), i32 531, i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.2, i64 0, i64 0)) #14
  %202 = tail call zeroext i1 @_ZN3jxl5AbortEv() #16
  unreachable

203:                                              ; preds = %176
  %204 = icmp ult i64 %177, 9
  br i1 %204, label %208, label %205

205:                                              ; preds = %203
  %206 = tail call zeroext i1 (i8*, ...) @_ZN3jxl5DebugEPKcz(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str, i64 0, i64 0), i8* getelementptr inbounds ([44 x i8], [44 x i8]* @.str.1, i64 0, i64 0), i32 532, i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str.3, i64 0, i64 0)) #14
  %207 = tail call zeroext i1 @_ZN3jxl5AbortEv() #16
  unreachable

208:                                              ; preds = %203
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @_ZN3jxl8N_SCALAR11GaborishRowERKNS_10FilterRowsERKNS_10LoopFilterERKNS_13FilterWeightsEmmmm(%"struct.jxl::FilterRows"* nocapture readonly dereferenceable(120), %"struct.jxl::LoopFilter"* nocapture readnone dereferenceable(144), %"struct.jxl::FilterWeights"* nocapture readonly dereferenceable(72), i64, i64, i64, i64) #11 {
  %8 = getelementptr inbounds %"struct.jxl::FilterRows", %"struct.jxl::FilterRows"* %0, i64 0, i32 1, i64 2
  %9 = getelementptr inbounds %"struct.jxl::FilterRows", %"struct.jxl::FilterRows"* %0, i64 0, i32 1, i64 3
  %10 = getelementptr inbounds %"struct.jxl::FilterRows", %"struct.jxl::FilterRows"* %0, i64 0, i32 1, i64 4
  %11 = icmp ugt i64 %4, %3
  %12 = getelementptr inbounds %"struct.jxl::FilterRows", %"struct.jxl::FilterRows"* %0, i64 0, i32 0, i64 0
  %13 = load float*, float** %12, align 8
  %14 = load i64, i64* %8, align 8
  %15 = getelementptr inbounds float, float* %13, i64 %14
  %16 = load i64, i64* %9, align 8
  %17 = getelementptr inbounds float, float* %13, i64 %16
  %18 = load i64, i64* %10, align 8
  %19 = getelementptr inbounds float, float* %13, i64 %18
  %20 = getelementptr inbounds %"struct.jxl::FilterRows", %"struct.jxl::FilterRows"* %0, i64 0, i32 2, i64 0
  %21 = load float*, float** %20, align 8
  %22 = getelementptr inbounds %"struct.jxl::FilterWeights", %"struct.jxl::FilterWeights"* %2, i64 0, i32 0, i64 0
  %23 = load float, float* %22, align 4
  %24 = getelementptr inbounds %"struct.jxl::FilterWeights", %"struct.jxl::FilterWeights"* %2, i64 0, i32 0, i64 1
  %25 = load float, float* %24, align 4
  %26 = getelementptr inbounds %"struct.jxl::FilterWeights", %"struct.jxl::FilterWeights"* %2, i64 0, i32 0, i64 2
  %27 = load float, float* %26, align 4
  br i1 %11, label %28, label %127

28:                                               ; preds = %7
  %29 = sub i64 %4, %3
  %30 = icmp ult i64 %29, 4
  br i1 %30, label %87, label %31

31:                                               ; preds = %28
  %32 = and i64 %29, -4
  %33 = add i64 %32, %3
  %34 = insertelement <4 x float> undef, float %23, i32 0
  %35 = shufflevector <4 x float> %34, <4 x float> undef, <4 x i32> zeroinitializer
  %36 = insertelement <4 x float> undef, float %25, i32 0
  %37 = shufflevector <4 x float> %36, <4 x float> undef, <4 x i32> zeroinitializer
  %38 = insertelement <4 x float> undef, float %27, i32 0
  %39 = shufflevector <4 x float> %38, <4 x float> undef, <4 x i32> zeroinitializer
  br label %40

40:                                               ; preds = %40, %31
  %41 = phi i64 [ 0, %31 ], [ %83, %40 ]
  %42 = add i64 %41, %3
  %43 = getelementptr inbounds float, float* %15, i64 %42
  %44 = getelementptr inbounds float, float* %17, i64 %42
  %45 = getelementptr inbounds float, float* %19, i64 %42
  %46 = getelementptr inbounds float, float* %21, i64 %42
  %47 = bitcast float* %43 to <4 x float>*
  %48 = load <4 x float>, <4 x float>* %47, align 4, !alias.scope !1288, !noalias !1293
  %49 = getelementptr inbounds float, float* %43, i64 -1
  %50 = bitcast float* %49 to <4 x float>*
  %51 = load <4 x float>, <4 x float>* %50, align 4, !alias.scope !1297, !noalias !1293
  %52 = getelementptr inbounds float, float* %43, i64 1
  %53 = bitcast float* %52 to <4 x float>*
  %54 = load <4 x float>, <4 x float>* %53, align 4, !alias.scope !1302, !noalias !1293
  %55 = bitcast float* %44 to <4 x float>*
  %56 = load <4 x float>, <4 x float>* %55, align 4, !alias.scope !1307, !noalias !1310
  %57 = getelementptr inbounds float, float* %44, i64 -1
  %58 = bitcast float* %57 to <4 x float>*
  %59 = load <4 x float>, <4 x float>* %58, align 4, !alias.scope !1311, !noalias !1310
  %60 = getelementptr inbounds float, float* %44, i64 1
  %61 = bitcast float* %60 to <4 x float>*
  %62 = load <4 x float>, <4 x float>* %61, align 4, !alias.scope !1316, !noalias !1310
  %63 = bitcast float* %45 to <4 x float>*
  %64 = load <4 x float>, <4 x float>* %63, align 4, !alias.scope !1321, !noalias !1324
  %65 = getelementptr inbounds float, float* %45, i64 -1
  %66 = bitcast float* %65 to <4 x float>*
  %67 = load <4 x float>, <4 x float>* %66, align 4, !alias.scope !1325, !noalias !1324
  %68 = getelementptr inbounds float, float* %45, i64 1
  %69 = bitcast float* %68 to <4 x float>*
  %70 = load <4 x float>, <4 x float>* %69, align 4, !alias.scope !1330, !noalias !1324
  %71 = fadd <4 x float> %59, %62
  %72 = fadd <4 x float> %48, %64
  %73 = fadd <4 x float> %71, %72
  %74 = fadd <4 x float> %51, %54
  %75 = fadd <4 x float> %67, %70
  %76 = fadd <4 x float> %74, %75
  %77 = fmul <4 x float> %35, %56
  %78 = fmul <4 x float> %37, %73
  %79 = fadd <4 x float> %77, %78
  %80 = fmul <4 x float> %39, %76
  %81 = fadd <4 x float> %79, %80
  %82 = bitcast float* %46 to <4 x float>*
  store <4 x float> %81, <4 x float>* %82, align 4, !alias.scope !1335, !noalias !1338
  %83 = add i64 %41, 4
  %84 = icmp eq i64 %83, %32
  br i1 %84, label %85, label %40, !llvm.loop !1339

85:                                               ; preds = %40
  %86 = icmp eq i64 %29, %32
  br i1 %86, label %123, label %87

87:                                               ; preds = %85, %28
  %88 = phi i64 [ %3, %28 ], [ %33, %85 ]
  br label %89

89:                                               ; preds = %87, %89
  %90 = phi i64 [ %121, %89 ], [ %88, %87 ]
  %91 = getelementptr inbounds float, float* %15, i64 %90
  %92 = getelementptr inbounds float, float* %17, i64 %90
  %93 = getelementptr inbounds float, float* %19, i64 %90
  %94 = getelementptr inbounds float, float* %21, i64 %90
  %95 = load float, float* %91, align 4, !alias.scope !1288, !noalias !1293
  %96 = getelementptr inbounds float, float* %91, i64 -1
  %97 = load float, float* %96, align 4, !alias.scope !1297, !noalias !1293
  %98 = getelementptr inbounds float, float* %91, i64 1
  %99 = load float, float* %98, align 4, !alias.scope !1302, !noalias !1293
  %100 = load float, float* %92, align 4, !alias.scope !1307, !noalias !1310
  %101 = getelementptr inbounds float, float* %92, i64 -1
  %102 = load float, float* %101, align 4, !alias.scope !1311, !noalias !1310
  %103 = getelementptr inbounds float, float* %92, i64 1
  %104 = load float, float* %103, align 4, !alias.scope !1316, !noalias !1310
  %105 = load float, float* %93, align 4, !alias.scope !1321, !noalias !1324
  %106 = getelementptr inbounds float, float* %93, i64 -1
  %107 = load float, float* %106, align 4, !alias.scope !1325, !noalias !1324
  %108 = getelementptr inbounds float, float* %93, i64 1
  %109 = load float, float* %108, align 4, !alias.scope !1330, !noalias !1324
  %110 = fadd float %102, %104
  %111 = fadd float %95, %105
  %112 = fadd float %110, %111
  %113 = fadd float %97, %99
  %114 = fadd float %107, %109
  %115 = fadd float %113, %114
  %116 = fmul float %23, %100
  %117 = fmul float %25, %112
  %118 = fadd float %116, %117
  %119 = fmul float %27, %115
  %120 = fadd float %118, %119
  store float %120, float* %94, align 4, !alias.scope !1335, !noalias !1338
  %121 = add nuw i64 %90, 1
  %122 = icmp eq i64 %121, %4
  br i1 %122, label %123, label %89, !llvm.loop !1341

123:                                              ; preds = %89, %85
  %124 = load i64, i64* %8, align 8
  %125 = load i64, i64* %9, align 8
  %126 = load i64, i64* %10, align 8
  br label %127

127:                                              ; preds = %123, %7
  %128 = phi i64 [ %126, %123 ], [ %18, %7 ]
  %129 = phi i64 [ %125, %123 ], [ %16, %7 ]
  %130 = phi i64 [ %124, %123 ], [ %14, %7 ]
  %131 = getelementptr inbounds %"struct.jxl::FilterRows", %"struct.jxl::FilterRows"* %0, i64 0, i32 0, i64 1
  %132 = load float*, float** %131, align 8
  %133 = getelementptr inbounds float, float* %132, i64 %130
  %134 = getelementptr inbounds float, float* %132, i64 %129
  %135 = getelementptr inbounds float, float* %132, i64 %128
  %136 = getelementptr inbounds %"struct.jxl::FilterRows", %"struct.jxl::FilterRows"* %0, i64 0, i32 2, i64 1
  %137 = load float*, float** %136, align 8
  %138 = getelementptr inbounds %"struct.jxl::FilterWeights", %"struct.jxl::FilterWeights"* %2, i64 0, i32 0, i64 3
  %139 = load float, float* %138, align 4
  %140 = getelementptr inbounds %"struct.jxl::FilterWeights", %"struct.jxl::FilterWeights"* %2, i64 0, i32 0, i64 4
  %141 = load float, float* %140, align 4
  %142 = getelementptr inbounds %"struct.jxl::FilterWeights", %"struct.jxl::FilterWeights"* %2, i64 0, i32 0, i64 5
  %143 = load float, float* %142, align 4
  br i1 %11, label %144, label %243

144:                                              ; preds = %127
  %145 = sub i64 %4, %3
  %146 = icmp ult i64 %145, 4
  br i1 %146, label %203, label %147

147:                                              ; preds = %144
  %148 = and i64 %145, -4
  %149 = add i64 %148, %3
  %150 = insertelement <4 x float> undef, float %139, i32 0
  %151 = shufflevector <4 x float> %150, <4 x float> undef, <4 x i32> zeroinitializer
  %152 = insertelement <4 x float> undef, float %141, i32 0
  %153 = shufflevector <4 x float> %152, <4 x float> undef, <4 x i32> zeroinitializer
  %154 = insertelement <4 x float> undef, float %143, i32 0
  %155 = shufflevector <4 x float> %154, <4 x float> undef, <4 x i32> zeroinitializer
  br label %156

156:                                              ; preds = %156, %147
  %157 = phi i64 [ 0, %147 ], [ %199, %156 ]
  %158 = add i64 %157, %3
  %159 = getelementptr inbounds float, float* %133, i64 %158
  %160 = getelementptr inbounds float, float* %134, i64 %158
  %161 = getelementptr inbounds float, float* %135, i64 %158
  %162 = getelementptr inbounds float, float* %137, i64 %158
  %163 = bitcast float* %159 to <4 x float>*
  %164 = load <4 x float>, <4 x float>* %163, align 4, !alias.scope !1288, !noalias !1293
  %165 = getelementptr inbounds float, float* %159, i64 -1
  %166 = bitcast float* %165 to <4 x float>*
  %167 = load <4 x float>, <4 x float>* %166, align 4, !alias.scope !1297, !noalias !1293
  %168 = getelementptr inbounds float, float* %159, i64 1
  %169 = bitcast float* %168 to <4 x float>*
  %170 = load <4 x float>, <4 x float>* %169, align 4, !alias.scope !1302, !noalias !1293
  %171 = bitcast float* %160 to <4 x float>*
  %172 = load <4 x float>, <4 x float>* %171, align 4, !alias.scope !1307, !noalias !1310
  %173 = getelementptr inbounds float, float* %160, i64 -1
  %174 = bitcast float* %173 to <4 x float>*
  %175 = load <4 x float>, <4 x float>* %174, align 4, !alias.scope !1311, !noalias !1310
  %176 = getelementptr inbounds float, float* %160, i64 1
  %177 = bitcast float* %176 to <4 x float>*
  %178 = load <4 x float>, <4 x float>* %177, align 4, !alias.scope !1316, !noalias !1310
  %179 = bitcast float* %161 to <4 x float>*
  %180 = load <4 x float>, <4 x float>* %179, align 4, !alias.scope !1321, !noalias !1324
  %181 = getelementptr inbounds float, float* %161, i64 -1
  %182 = bitcast float* %181 to <4 x float>*
  %183 = load <4 x float>, <4 x float>* %182, align 4, !alias.scope !1325, !noalias !1324
  %184 = getelementptr inbounds float, float* %161, i64 1
  %185 = bitcast float* %184 to <4 x float>*
  %186 = load <4 x float>, <4 x float>* %185, align 4, !alias.scope !1330, !noalias !1324
  %187 = fadd <4 x float> %175, %178
  %188 = fadd <4 x float> %164, %180
  %189 = fadd <4 x float> %187, %188
  %190 = fadd <4 x float> %167, %170
  %191 = fadd <4 x float> %183, %186
  %192 = fadd <4 x float> %190, %191
  %193 = fmul <4 x float> %151, %172
  %194 = fmul <4 x float> %153, %189
  %195 = fadd <4 x float> %193, %194
  %196 = fmul <4 x float> %155, %192
  %197 = fadd <4 x float> %195, %196
  %198 = bitcast float* %162 to <4 x float>*
  store <4 x float> %197, <4 x float>* %198, align 4, !alias.scope !1335, !noalias !1338
  %199 = add i64 %157, 4
  %200 = icmp eq i64 %199, %148
  br i1 %200, label %201, label %156, !llvm.loop !1343

201:                                              ; preds = %156
  %202 = icmp eq i64 %145, %148
  br i1 %202, label %239, label %203

203:                                              ; preds = %201, %144
  %204 = phi i64 [ %3, %144 ], [ %149, %201 ]
  br label %205

205:                                              ; preds = %203, %205
  %206 = phi i64 [ %237, %205 ], [ %204, %203 ]
  %207 = getelementptr inbounds float, float* %133, i64 %206
  %208 = getelementptr inbounds float, float* %134, i64 %206
  %209 = getelementptr inbounds float, float* %135, i64 %206
  %210 = getelementptr inbounds float, float* %137, i64 %206
  %211 = load float, float* %207, align 4, !alias.scope !1288, !noalias !1293
  %212 = getelementptr inbounds float, float* %207, i64 -1
  %213 = load float, float* %212, align 4, !alias.scope !1297, !noalias !1293
  %214 = getelementptr inbounds float, float* %207, i64 1
  %215 = load float, float* %214, align 4, !alias.scope !1302, !noalias !1293
  %216 = load float, float* %208, align 4, !alias.scope !1307, !noalias !1310
  %217 = getelementptr inbounds float, float* %208, i64 -1
  %218 = load float, float* %217, align 4, !alias.scope !1311, !noalias !1310
  %219 = getelementptr inbounds float, float* %208, i64 1
  %220 = load float, float* %219, align 4, !alias.scope !1316, !noalias !1310
  %221 = load float, float* %209, align 4, !alias.scope !1321, !noalias !1324
  %222 = getelementptr inbounds float, float* %209, i64 -1
  %223 = load float, float* %222, align 4, !alias.scope !1325, !noalias !1324
  %224 = getelementptr inbounds float, float* %209, i64 1
  %225 = load float, float* %224, align 4, !alias.scope !1330, !noalias !1324
  %226 = fadd float %218, %220
  %227 = fadd float %211, %221
  %228 = fadd float %226, %227
  %229 = fadd float %213, %215
  %230 = fadd float %223, %225
  %231 = fadd float %229, %230
  %232 = fmul float %139, %216
  %233 = fmul float %141, %228
  %234 = fadd float %232, %233
  %235 = fmul float %143, %231
  %236 = fadd float %234, %235
  store float %236, float* %210, align 4, !alias.scope !1335, !noalias !1338
  %237 = add nuw i64 %206, 1
  %238 = icmp eq i64 %237, %4
  br i1 %238, label %239, label %205, !llvm.loop !1344

239:                                              ; preds = %205, %201
  %240 = load i64, i64* %8, align 8
  %241 = load i64, i64* %9, align 8
  %242 = load i64, i64* %10, align 8
  br label %243

243:                                              ; preds = %239, %127
  %244 = phi i64 [ %242, %239 ], [ %128, %127 ]
  %245 = phi i64 [ %241, %239 ], [ %129, %127 ]
  %246 = phi i64 [ %240, %239 ], [ %130, %127 ]
  %247 = getelementptr inbounds %"struct.jxl::FilterRows", %"struct.jxl::FilterRows"* %0, i64 0, i32 0, i64 2
  %248 = load float*, float** %247, align 8
  %249 = getelementptr inbounds float, float* %248, i64 %246
  %250 = getelementptr inbounds float, float* %248, i64 %245
  %251 = getelementptr inbounds float, float* %248, i64 %244
  %252 = getelementptr inbounds %"struct.jxl::FilterRows", %"struct.jxl::FilterRows"* %0, i64 0, i32 2, i64 2
  %253 = load float*, float** %252, align 8
  %254 = getelementptr inbounds %"struct.jxl::FilterWeights", %"struct.jxl::FilterWeights"* %2, i64 0, i32 0, i64 6
  %255 = load float, float* %254, align 4
  %256 = getelementptr inbounds %"struct.jxl::FilterWeights", %"struct.jxl::FilterWeights"* %2, i64 0, i32 0, i64 7
  %257 = load float, float* %256, align 4
  %258 = getelementptr inbounds %"struct.jxl::FilterWeights", %"struct.jxl::FilterWeights"* %2, i64 0, i32 0, i64 8
  %259 = load float, float* %258, align 4
  br i1 %11, label %260, label %355

260:                                              ; preds = %243
  %261 = sub i64 %4, %3
  %262 = icmp ult i64 %261, 4
  br i1 %262, label %319, label %263

263:                                              ; preds = %260
  %264 = and i64 %261, -4
  %265 = add i64 %264, %3
  %266 = insertelement <4 x float> undef, float %255, i32 0
  %267 = shufflevector <4 x float> %266, <4 x float> undef, <4 x i32> zeroinitializer
  %268 = insertelement <4 x float> undef, float %257, i32 0
  %269 = shufflevector <4 x float> %268, <4 x float> undef, <4 x i32> zeroinitializer
  %270 = insertelement <4 x float> undef, float %259, i32 0
  %271 = shufflevector <4 x float> %270, <4 x float> undef, <4 x i32> zeroinitializer
  br label %272

272:                                              ; preds = %272, %263
  %273 = phi i64 [ 0, %263 ], [ %315, %272 ]
  %274 = add i64 %273, %3
  %275 = getelementptr inbounds float, float* %249, i64 %274
  %276 = getelementptr inbounds float, float* %250, i64 %274
  %277 = getelementptr inbounds float, float* %251, i64 %274
  %278 = getelementptr inbounds float, float* %253, i64 %274
  %279 = bitcast float* %275 to <4 x float>*
  %280 = load <4 x float>, <4 x float>* %279, align 4, !alias.scope !1288, !noalias !1293
  %281 = getelementptr inbounds float, float* %275, i64 -1
  %282 = bitcast float* %281 to <4 x float>*
  %283 = load <4 x float>, <4 x float>* %282, align 4, !alias.scope !1297, !noalias !1293
  %284 = getelementptr inbounds float, float* %275, i64 1
  %285 = bitcast float* %284 to <4 x float>*
  %286 = load <4 x float>, <4 x float>* %285, align 4, !alias.scope !1302, !noalias !1293
  %287 = bitcast float* %276 to <4 x float>*
  %288 = load <4 x float>, <4 x float>* %287, align 4, !alias.scope !1307, !noalias !1310
  %289 = getelementptr inbounds float, float* %276, i64 -1
  %290 = bitcast float* %289 to <4 x float>*
  %291 = load <4 x float>, <4 x float>* %290, align 4, !alias.scope !1311, !noalias !1310
  %292 = getelementptr inbounds float, float* %276, i64 1
  %293 = bitcast float* %292 to <4 x float>*
  %294 = load <4 x float>, <4 x float>* %293, align 4, !alias.scope !1316, !noalias !1310
  %295 = bitcast float* %277 to <4 x float>*
  %296 = load <4 x float>, <4 x float>* %295, align 4, !alias.scope !1321, !noalias !1324
  %297 = getelementptr inbounds float, float* %277, i64 -1
  %298 = bitcast float* %297 to <4 x float>*
  %299 = load <4 x float>, <4 x float>* %298, align 4, !alias.scope !1325, !noalias !1324
  %300 = getelementptr inbounds float, float* %277, i64 1
  %301 = bitcast float* %300 to <4 x float>*
  %302 = load <4 x float>, <4 x float>* %301, align 4, !alias.scope !1330, !noalias !1324
  %303 = fadd <4 x float> %291, %294
  %304 = fadd <4 x float> %280, %296
  %305 = fadd <4 x float> %303, %304
  %306 = fadd <4 x float> %283, %286
  %307 = fadd <4 x float> %299, %302
  %308 = fadd <4 x float> %306, %307
  %309 = fmul <4 x float> %267, %288
  %310 = fmul <4 x float> %269, %305
  %311 = fadd <4 x float> %309, %310
  %312 = fmul <4 x float> %271, %308
  %313 = fadd <4 x float> %311, %312
  %314 = bitcast float* %278 to <4 x float>*
  store <4 x float> %313, <4 x float>* %314, align 4, !alias.scope !1335, !noalias !1338
  %315 = add i64 %273, 4
  %316 = icmp eq i64 %315, %264
  br i1 %316, label %317, label %272, !llvm.loop !1345

317:                                              ; preds = %272
  %318 = icmp eq i64 %261, %264
  br i1 %318, label %355, label %319

319:                                              ; preds = %317, %260
  %320 = phi i64 [ %3, %260 ], [ %265, %317 ]
  br label %321

321:                                              ; preds = %319, %321
  %322 = phi i64 [ %353, %321 ], [ %320, %319 ]
  %323 = getelementptr inbounds float, float* %249, i64 %322
  %324 = getelementptr inbounds float, float* %250, i64 %322
  %325 = getelementptr inbounds float, float* %251, i64 %322
  %326 = getelementptr inbounds float, float* %253, i64 %322
  %327 = load float, float* %323, align 4, !alias.scope !1288, !noalias !1293
  %328 = getelementptr inbounds float, float* %323, i64 -1
  %329 = load float, float* %328, align 4, !alias.scope !1297, !noalias !1293
  %330 = getelementptr inbounds float, float* %323, i64 1
  %331 = load float, float* %330, align 4, !alias.scope !1302, !noalias !1293
  %332 = load float, float* %324, align 4, !alias.scope !1307, !noalias !1310
  %333 = getelementptr inbounds float, float* %324, i64 -1
  %334 = load float, float* %333, align 4, !alias.scope !1311, !noalias !1310
  %335 = getelementptr inbounds float, float* %324, i64 1
  %336 = load float, float* %335, align 4, !alias.scope !1316, !noalias !1310
  %337 = load float, float* %325, align 4, !alias.scope !1321, !noalias !1324
  %338 = getelementptr inbounds float, float* %325, i64 -1
  %339 = load float, float* %338, align 4, !alias.scope !1325, !noalias !1324
  %340 = getelementptr inbounds float, float* %325, i64 1
  %341 = load float, float* %340, align 4, !alias.scope !1330, !noalias !1324
  %342 = fadd float %334, %336
  %343 = fadd float %327, %337
  %344 = fadd float %342, %343
  %345 = fadd float %329, %331
  %346 = fadd float %339, %341
  %347 = fadd float %345, %346
  %348 = fmul float %255, %332
  %349 = fmul float %257, %344
  %350 = fadd float %348, %349
  %351 = fmul float %259, %347
  %352 = fadd float %350, %351
  store float %352, float* %326, align 4, !alias.scope !1335, !noalias !1338
  %353 = add nuw i64 %322, 1
  %354 = icmp eq i64 %353, %4
  br i1 %354, label %355, label %321, !llvm.loop !1346

355:                                              ; preds = %321, %317, %243
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN3jxl8N_SCALAR7Epf0RowERKNS_10FilterRowsERKNS_10LoopFilterERKNS_13FilterWeightsEmmmm(%"struct.jxl::FilterRows"* readonly dereferenceable(120), %"struct.jxl::LoopFilter"* nocapture readonly dereferenceable(144), %"struct.jxl::FilterWeights"* nocapture readnone dereferenceable(72), i64, i64, i64, i64) #12 {
  %8 = alloca [8 x float], align 16
  %9 = alloca [12 x %"struct.hwy::N_SCALAR::Vec1"], align 16
  %10 = bitcast [12 x %"struct.hwy::N_SCALAR::Vec1"]* %9 to i8*
  %11 = getelementptr inbounds %"struct.jxl::FilterRows", %"struct.jxl::FilterRows"* %0, i64 0, i32 3
  %12 = load float*, float** %11, align 8
  %13 = getelementptr inbounds %"struct.jxl::LoopFilter", %"struct.jxl::LoopFilter"* %1, i64 0, i32 23
  %14 = load float, float* %13, align 4
  %15 = getelementptr inbounds %"struct.jxl::LoopFilter", %"struct.jxl::LoopFilter"* %1, i64 0, i32 25
  %16 = load float, float* %15, align 4
  %17 = fmul float %14, %16
  %18 = bitcast [8 x float]* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %18) #14
  %19 = getelementptr inbounds [8 x float], [8 x float]* %8, i64 0, i64 0
  %20 = getelementptr inbounds [8 x float], [8 x float]* %8, i64 0, i64 1
  %21 = getelementptr inbounds [8 x float], [8 x float]* %8, i64 0, i64 5
  %22 = getelementptr inbounds [8 x float], [8 x float]* %8, i64 0, i64 6
  %23 = getelementptr inbounds [8 x float], [8 x float]* %8, i64 0, i64 7
  store float %17, float* %19, align 16
  %24 = insertelement <4 x float> undef, float %14, i32 0
  %25 = shufflevector <4 x float> %24, <4 x float> undef, <4 x i32> zeroinitializer
  %26 = bitcast float* %20 to <4 x float>*
  store <4 x float> %25, <4 x float>* %26, align 4
  store float %14, float* %21, align 4
  store float %14, float* %22, align 8
  store float %17, float* %23, align 4
  switch i64 %6, label %33 [
    i64 7, label %27
    i64 0, label %27
  ]

27:                                               ; preds = %7, %7
  %28 = getelementptr inbounds [8 x float], [8 x float]* %8, i64 0, i64 4
  %29 = insertelement <4 x float> undef, float %17, i32 0
  %30 = shufflevector <4 x float> %29, <4 x float> undef, <4 x i32> zeroinitializer
  %31 = bitcast [8 x float]* %8 to <4 x float>*
  store <4 x float> %30, <4 x float>* %31, align 16, !alias.scope !1347
  %32 = bitcast float* %28 to <4 x float>*
  store <4 x float> %30, <4 x float>* %32, align 16, !alias.scope !1347
  br label %33

33:                                               ; preds = %27, %7
  %34 = icmp ult i64 %3, %4
  br i1 %34, label %35, label %52

35:                                               ; preds = %33
  %36 = getelementptr inbounds %"struct.jxl::FilterRows", %"struct.jxl::FilterRows"* %0, i64 0, i32 0, i64 0
  %37 = getelementptr inbounds %"struct.jxl::FilterRows", %"struct.jxl::FilterRows"* %0, i64 0, i32 1, i64 3
  %38 = getelementptr inbounds %"struct.jxl::FilterRows", %"struct.jxl::FilterRows"* %0, i64 0, i32 0, i64 1
  %39 = getelementptr inbounds %"struct.jxl::FilterRows", %"struct.jxl::FilterRows"* %0, i64 0, i32 0, i64 2
  %40 = getelementptr inbounds %"struct.jxl::LoopFilter", %"struct.jxl::LoopFilter"* %1, i64 0, i32 18
  %41 = getelementptr inbounds %"struct.jxl::FilterRows", %"struct.jxl::FilterRows"* %0, i64 0, i32 2, i64 0
  %42 = getelementptr inbounds %"struct.jxl::FilterRows", %"struct.jxl::FilterRows"* %0, i64 0, i32 2, i64 1
  %43 = getelementptr inbounds %"struct.jxl::FilterRows", %"struct.jxl::FilterRows"* %0, i64 0, i32 2, i64 2
  %44 = getelementptr inbounds %"struct.jxl::FilterRows", %"struct.jxl::FilterRows"* %0, i64 0, i32 1, i64 2
  %45 = getelementptr inbounds %"struct.jxl::FilterRows", %"struct.jxl::FilterRows"* %0, i64 0, i32 1, i64 4
  %46 = getelementptr inbounds %"struct.jxl::LoopFilter", %"struct.jxl::LoopFilter"* %1, i64 0, i32 17, i64 0
  %47 = getelementptr inbounds %"struct.jxl::FilterRows", %"struct.jxl::FilterRows"* %0, i64 0, i32 0, i64 0
  %48 = getelementptr inbounds %"struct.jxl::LoopFilter", %"struct.jxl::LoopFilter"* %1, i64 0, i32 17, i64 1
  %49 = getelementptr inbounds %"struct.jxl::FilterRows", %"struct.jxl::FilterRows"* %0, i64 0, i32 0, i64 1
  %50 = getelementptr inbounds %"struct.jxl::LoopFilter", %"struct.jxl::LoopFilter"* %1, i64 0, i32 17, i64 2
  %51 = getelementptr inbounds %"struct.jxl::FilterRows", %"struct.jxl::FilterRows"* %0, i64 0, i32 0, i64 2
  br label %53

52:                                               ; preds = %224, %33
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %18) #14
  ret void

53:                                               ; preds = %224, %35
  %54 = phi i64 [ %3, %35 ], [ %225, %224 ]
  %55 = add i64 %54, %5
  %56 = lshr i64 %55, 3
  %57 = getelementptr inbounds float, float* %12, i64 %56
  %58 = load float, float* %57, align 4
  %59 = fcmp olt float %58, 0xC00F3DF000000000
  br i1 %59, label %60, label %88

60:                                               ; preds = %53
  %61 = load float*, float** %36, align 8
  %62 = load i64, i64* %37, align 8
  %63 = getelementptr inbounds float, float* %61, i64 %54
  %64 = getelementptr inbounds float, float* %63, i64 %62
  %65 = bitcast float* %64 to i32*
  %66 = load i32, i32* %65, align 4, !alias.scope !1350
  %67 = load float*, float** %41, align 8
  %68 = getelementptr inbounds float, float* %67, i64 %54
  %69 = bitcast float* %68 to i32*
  store i32 %66, i32* %69, align 4, !alias.scope !1353
  %70 = load float*, float** %38, align 8
  %71 = load i64, i64* %37, align 8
  %72 = getelementptr inbounds float, float* %70, i64 %54
  %73 = getelementptr inbounds float, float* %72, i64 %71
  %74 = bitcast float* %73 to i32*
  %75 = load i32, i32* %74, align 4, !alias.scope !1350
  %76 = load float*, float** %42, align 8
  %77 = getelementptr inbounds float, float* %76, i64 %54
  %78 = bitcast float* %77 to i32*
  store i32 %75, i32* %78, align 4, !alias.scope !1353
  %79 = load float*, float** %39, align 8
  %80 = load i64, i64* %37, align 8
  %81 = getelementptr inbounds float, float* %79, i64 %54
  %82 = getelementptr inbounds float, float* %81, i64 %80
  %83 = bitcast float* %82 to i32*
  %84 = load i32, i32* %83, align 4, !alias.scope !1350
  %85 = load float*, float** %43, align 8
  %86 = getelementptr inbounds float, float* %85, i64 %54
  %87 = bitcast float* %86 to i32*
  store i32 %84, i32* %87, align 4, !alias.scope !1353
  br label %224

88:                                               ; preds = %53
  %89 = and i64 %55, 7
  %90 = getelementptr inbounds [8 x float], [8 x float]* %8, i64 0, i64 %89
  %91 = load float, float* %90, align 4, !alias.scope !1356
  call void @llvm.lifetime.start.p0i8(i64 48, i8* nonnull %10) #14
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %10, i8 0, i64 48, i1 false)
  %92 = load i64, i64* %37, align 8
  %93 = load i64, i64* %44, align 8
  %94 = load i64, i64* %45, align 8
  %95 = load float, float* %46, align 4
  %96 = load float*, float** %47, align 8
  %97 = getelementptr inbounds float, float* %96, i64 %54
  %98 = getelementptr inbounds float, float* %97, i64 %93
  %99 = load float, float* %98, align 4, !alias.scope !1359
  %100 = getelementptr inbounds float, float* %97, i64 %94
  %101 = load float, float* %100, align 4, !alias.scope !1359
  %102 = getelementptr inbounds float, float* %97, i64 %92
  %103 = getelementptr inbounds float, float* %102, i64 1
  %104 = load float, float* %103, align 4, !alias.scope !1359
  %105 = load float, float* %102, align 4, !alias.scope !1359
  %106 = getelementptr inbounds float, float* %102, i64 -1
  %107 = load float, float* %106, align 4, !alias.scope !1359
  br label %108

108:                                              ; preds = %108, %88
  %109 = phi i64 [ 0, %88 ], [ %156, %108 ]
  %110 = getelementptr inbounds [12 x %"struct.std::__1::array"], [12 x %"struct.std::__1::array"]* @_ZZN3jxl8N_SCALAR7Epf0RowERKNS_10FilterRowsERKNS_10LoopFilterERKNS_13FilterWeightsEmmmmE8sads_off, i64 0, i64 %109, i32 0, i64 0
  %111 = load i32, i32* %110, align 8
  %112 = getelementptr inbounds [12 x %"struct.std::__1::array"], [12 x %"struct.std::__1::array"]* @_ZZN3jxl8N_SCALAR7Epf0RowERKNS_10FilterRowsERKNS_10LoopFilterERKNS_13FilterWeightsEmmmmE8sads_off, i64 0, i64 %109, i32 0, i64 1
  %113 = load i32, i32* %112, align 4
  %114 = sext i32 %113 to i64
  %115 = sext i32 %111 to i64
  %116 = add nsw i64 %115, 3
  %117 = getelementptr inbounds %"struct.jxl::FilterRows", %"struct.jxl::FilterRows"* %0, i64 0, i32 1, i64 %116
  %118 = load i64, i64* %117, align 8
  %119 = getelementptr inbounds float, float* %97, i64 %114
  %120 = getelementptr inbounds float, float* %119, i64 %118
  %121 = load float, float* %120, align 4, !alias.scope !1364
  %122 = fsub float %105, %121
  %123 = tail call float @llvm.fabs.f32(float %122) #14
  %124 = sext i32 %111 to i64
  %125 = add nsw i64 %124, 2
  %126 = getelementptr inbounds %"struct.jxl::FilterRows", %"struct.jxl::FilterRows"* %0, i64 0, i32 1, i64 %125
  %127 = load i64, i64* %126, align 8
  %128 = getelementptr inbounds float, float* %119, i64 %127
  %129 = load float, float* %128, align 4, !alias.scope !1364
  %130 = fsub float %99, %129
  %131 = tail call float @llvm.fabs.f32(float %130) #14
  %132 = fadd float %123, %131
  %133 = getelementptr inbounds float, float* %120, i64 -1
  %134 = load float, float* %133, align 4, !alias.scope !1364
  %135 = fsub float %107, %134
  %136 = tail call float @llvm.fabs.f32(float %135) #14
  %137 = fadd float %132, %136
  %138 = sext i32 %111 to i64
  %139 = add nsw i64 %138, 4
  %140 = getelementptr inbounds %"struct.jxl::FilterRows", %"struct.jxl::FilterRows"* %0, i64 0, i32 1, i64 %139
  %141 = load i64, i64* %140, align 8
  %142 = getelementptr inbounds float, float* %119, i64 %141
  %143 = load float, float* %142, align 4, !alias.scope !1364
  %144 = fsub float %101, %143
  %145 = tail call float @llvm.fabs.f32(float %144) #14
  %146 = fadd float %137, %145
  %147 = getelementptr inbounds float, float* %120, i64 1
  %148 = load float, float* %147, align 4, !alias.scope !1364
  %149 = fsub float %104, %148
  %150 = tail call float @llvm.fabs.f32(float %149) #14
  %151 = fadd float %146, %150
  %152 = getelementptr inbounds [12 x %"struct.hwy::N_SCALAR::Vec1"], [12 x %"struct.hwy::N_SCALAR::Vec1"]* %9, i64 0, i64 %109, i32 0
  %153 = load float, float* %152, align 4
  %154 = fmul float %95, %151
  %155 = fadd float %154, %153
  store float %155, float* %152, align 4
  %156 = add nuw nsw i64 %109, 1
  %157 = icmp eq i64 %156, 12
  br i1 %157, label %158, label %108

158:                                              ; preds = %108
  %159 = load float, float* %48, align 4
  %160 = load float*, float** %49, align 8
  %161 = getelementptr inbounds float, float* %160, i64 %54
  %162 = getelementptr inbounds float, float* %161, i64 %93
  %163 = load float, float* %162, align 4, !alias.scope !1359
  %164 = getelementptr inbounds float, float* %161, i64 %94
  %165 = load float, float* %164, align 4, !alias.scope !1359
  %166 = getelementptr inbounds float, float* %161, i64 %92
  %167 = getelementptr inbounds float, float* %166, i64 1
  %168 = load float, float* %167, align 4, !alias.scope !1359
  %169 = load float, float* %166, align 4, !alias.scope !1359
  %170 = getelementptr inbounds float, float* %166, i64 -1
  %171 = load float, float* %170, align 4, !alias.scope !1359
  br label %227

172:                                              ; preds = %183
  %173 = fdiv float 1.000000e+00, %215
  %174 = fmul float %217, %173
  %175 = load float*, float** %41, align 8
  %176 = getelementptr inbounds float, float* %175, i64 %54
  store float %174, float* %176, align 4, !alias.scope !1369
  %177 = fmul float %173, %219
  %178 = load float*, float** %42, align 8
  %179 = getelementptr inbounds float, float* %178, i64 %54
  store float %177, float* %179, align 4, !alias.scope !1372
  %180 = fmul float %173, %221
  %181 = load float*, float** %43, align 8
  %182 = getelementptr inbounds float, float* %181, i64 %54
  store float %180, float* %182, align 4, !alias.scope !1375
  call void @llvm.lifetime.end.p0i8(i64 48, i8* nonnull %10) #14
  br label %224

183:                                              ; preds = %183, %341
  %184 = phi i64 [ 0, %341 ], [ %222, %183 ]
  %185 = phi float [ %354, %341 ], [ %221, %183 ]
  %186 = phi float [ %350, %341 ], [ %219, %183 ]
  %187 = phi float [ %346, %341 ], [ %217, %183 ]
  %188 = phi float [ 1.000000e+00, %341 ], [ %215, %183 ]
  %189 = getelementptr inbounds [12 x %"struct.std::__1::array"], [12 x %"struct.std::__1::array"]* @_ZZN3jxl8N_SCALAR7Epf0RowERKNS_10FilterRowsERKNS_10LoopFilterERKNS_13FilterWeightsEmmmmE8sads_off, i64 0, i64 %184, i32 0, i64 0
  %190 = load i32, i32* %189, align 8
  %191 = getelementptr inbounds [12 x %"struct.std::__1::array"], [12 x %"struct.std::__1::array"]* @_ZZN3jxl8N_SCALAR7Epf0RowERKNS_10FilterRowsERKNS_10LoopFilterERKNS_13FilterWeightsEmmmmE8sads_off, i64 0, i64 %184, i32 0, i64 1
  %192 = load i32, i32* %191, align 4
  %193 = sext i32 %192 to i64
  %194 = add i64 %54, %193
  %195 = getelementptr inbounds [12 x %"struct.hwy::N_SCALAR::Vec1"], [12 x %"struct.hwy::N_SCALAR::Vec1"]* %9, i64 0, i64 %184, i32 0
  %196 = load float, float* %195, align 4
  %197 = sext i32 %190 to i64
  %198 = add nsw i64 %197, 3
  %199 = getelementptr inbounds %"struct.jxl::FilterRows", %"struct.jxl::FilterRows"* %0, i64 0, i32 1, i64 %198
  %200 = load i64, i64* %199, align 8, !noalias !1378
  %201 = getelementptr inbounds float, float* %343, i64 %200
  %202 = getelementptr inbounds float, float* %201, i64 %194
  %203 = load float, float* %202, align 4, !alias.scope !1384, !noalias !1378
  %204 = getelementptr inbounds float, float* %347, i64 %200
  %205 = getelementptr inbounds float, float* %204, i64 %194
  %206 = load float, float* %205, align 4, !alias.scope !1389, !noalias !1378
  %207 = getelementptr inbounds float, float* %351, i64 %200
  %208 = getelementptr inbounds float, float* %207, i64 %194
  %209 = load float, float* %208, align 4, !alias.scope !1394, !noalias !1378
  %210 = fmul float %342, %196
  %211 = fadd float %210, 1.000000e+00
  %212 = fmul float %211, %211
  %213 = fcmp ugt float %211, %355
  %214 = select i1 %213, float %212, float 0.000000e+00
  %215 = fadd float %188, %214
  %216 = fmul float %203, %214
  %217 = fadd float %187, %216
  %218 = fmul float %206, %214
  %219 = fadd float %186, %218
  %220 = fmul float %209, %214
  %221 = fadd float %185, %220
  %222 = add nuw nsw i64 %184, 1
  %223 = icmp eq i64 %222, 12
  br i1 %223, label %172, label %183

224:                                              ; preds = %60, %172
  %225 = add nuw i64 %54, 1
  %226 = icmp eq i64 %225, %4
  br i1 %226, label %52, label %53

227:                                              ; preds = %227, %158
  %228 = phi i64 [ 0, %158 ], [ %275, %227 ]
  %229 = getelementptr inbounds [12 x %"struct.std::__1::array"], [12 x %"struct.std::__1::array"]* @_ZZN3jxl8N_SCALAR7Epf0RowERKNS_10FilterRowsERKNS_10LoopFilterERKNS_13FilterWeightsEmmmmE8sads_off, i64 0, i64 %228, i32 0, i64 0
  %230 = load i32, i32* %229, align 8
  %231 = getelementptr inbounds [12 x %"struct.std::__1::array"], [12 x %"struct.std::__1::array"]* @_ZZN3jxl8N_SCALAR7Epf0RowERKNS_10FilterRowsERKNS_10LoopFilterERKNS_13FilterWeightsEmmmmE8sads_off, i64 0, i64 %228, i32 0, i64 1
  %232 = load i32, i32* %231, align 4
  %233 = sext i32 %232 to i64
  %234 = sext i32 %230 to i64
  %235 = add nsw i64 %234, 3
  %236 = getelementptr inbounds %"struct.jxl::FilterRows", %"struct.jxl::FilterRows"* %0, i64 0, i32 1, i64 %235
  %237 = load i64, i64* %236, align 8
  %238 = getelementptr inbounds float, float* %161, i64 %233
  %239 = getelementptr inbounds float, float* %238, i64 %237
  %240 = load float, float* %239, align 4, !alias.scope !1364
  %241 = fsub float %169, %240
  %242 = tail call float @llvm.fabs.f32(float %241) #14
  %243 = sext i32 %230 to i64
  %244 = add nsw i64 %243, 2
  %245 = getelementptr inbounds %"struct.jxl::FilterRows", %"struct.jxl::FilterRows"* %0, i64 0, i32 1, i64 %244
  %246 = load i64, i64* %245, align 8
  %247 = getelementptr inbounds float, float* %238, i64 %246
  %248 = load float, float* %247, align 4, !alias.scope !1364
  %249 = fsub float %163, %248
  %250 = tail call float @llvm.fabs.f32(float %249) #14
  %251 = fadd float %242, %250
  %252 = getelementptr inbounds float, float* %239, i64 -1
  %253 = load float, float* %252, align 4, !alias.scope !1364
  %254 = fsub float %171, %253
  %255 = tail call float @llvm.fabs.f32(float %254) #14
  %256 = fadd float %251, %255
  %257 = sext i32 %230 to i64
  %258 = add nsw i64 %257, 4
  %259 = getelementptr inbounds %"struct.jxl::FilterRows", %"struct.jxl::FilterRows"* %0, i64 0, i32 1, i64 %258
  %260 = load i64, i64* %259, align 8
  %261 = getelementptr inbounds float, float* %238, i64 %260
  %262 = load float, float* %261, align 4, !alias.scope !1364
  %263 = fsub float %165, %262
  %264 = tail call float @llvm.fabs.f32(float %263) #14
  %265 = fadd float %256, %264
  %266 = getelementptr inbounds float, float* %239, i64 1
  %267 = load float, float* %266, align 4, !alias.scope !1364
  %268 = fsub float %168, %267
  %269 = tail call float @llvm.fabs.f32(float %268) #14
  %270 = fadd float %265, %269
  %271 = getelementptr inbounds [12 x %"struct.hwy::N_SCALAR::Vec1"], [12 x %"struct.hwy::N_SCALAR::Vec1"]* %9, i64 0, i64 %228, i32 0
  %272 = load float, float* %271, align 4
  %273 = fmul float %159, %270
  %274 = fadd float %273, %272
  store float %274, float* %271, align 4
  %275 = add nuw nsw i64 %228, 1
  %276 = icmp eq i64 %275, 12
  br i1 %276, label %277, label %227

277:                                              ; preds = %227
  %278 = load float, float* %50, align 4
  %279 = load float*, float** %51, align 8
  %280 = getelementptr inbounds float, float* %279, i64 %54
  %281 = getelementptr inbounds float, float* %280, i64 %93
  %282 = load float, float* %281, align 4, !alias.scope !1359
  %283 = getelementptr inbounds float, float* %280, i64 %94
  %284 = load float, float* %283, align 4, !alias.scope !1359
  %285 = getelementptr inbounds float, float* %280, i64 %92
  %286 = getelementptr inbounds float, float* %285, i64 1
  %287 = load float, float* %286, align 4, !alias.scope !1359
  %288 = load float, float* %285, align 4, !alias.scope !1359
  %289 = getelementptr inbounds float, float* %285, i64 -1
  %290 = load float, float* %289, align 4, !alias.scope !1359
  br label %291

291:                                              ; preds = %291, %277
  %292 = phi i64 [ 0, %277 ], [ %339, %291 ]
  %293 = getelementptr inbounds [12 x %"struct.std::__1::array"], [12 x %"struct.std::__1::array"]* @_ZZN3jxl8N_SCALAR7Epf0RowERKNS_10FilterRowsERKNS_10LoopFilterERKNS_13FilterWeightsEmmmmE8sads_off, i64 0, i64 %292, i32 0, i64 0
  %294 = load i32, i32* %293, align 8
  %295 = getelementptr inbounds [12 x %"struct.std::__1::array"], [12 x %"struct.std::__1::array"]* @_ZZN3jxl8N_SCALAR7Epf0RowERKNS_10FilterRowsERKNS_10LoopFilterERKNS_13FilterWeightsEmmmmE8sads_off, i64 0, i64 %292, i32 0, i64 1
  %296 = load i32, i32* %295, align 4
  %297 = sext i32 %296 to i64
  %298 = sext i32 %294 to i64
  %299 = add nsw i64 %298, 3
  %300 = getelementptr inbounds %"struct.jxl::FilterRows", %"struct.jxl::FilterRows"* %0, i64 0, i32 1, i64 %299
  %301 = load i64, i64* %300, align 8
  %302 = getelementptr inbounds float, float* %280, i64 %297
  %303 = getelementptr inbounds float, float* %302, i64 %301
  %304 = load float, float* %303, align 4, !alias.scope !1364
  %305 = fsub float %288, %304
  %306 = tail call float @llvm.fabs.f32(float %305) #14
  %307 = sext i32 %294 to i64
  %308 = add nsw i64 %307, 2
  %309 = getelementptr inbounds %"struct.jxl::FilterRows", %"struct.jxl::FilterRows"* %0, i64 0, i32 1, i64 %308
  %310 = load i64, i64* %309, align 8
  %311 = getelementptr inbounds float, float* %302, i64 %310
  %312 = load float, float* %311, align 4, !alias.scope !1364
  %313 = fsub float %282, %312
  %314 = tail call float @llvm.fabs.f32(float %313) #14
  %315 = fadd float %306, %314
  %316 = getelementptr inbounds float, float* %303, i64 -1
  %317 = load float, float* %316, align 4, !alias.scope !1364
  %318 = fsub float %290, %317
  %319 = tail call float @llvm.fabs.f32(float %318) #14
  %320 = fadd float %315, %319
  %321 = sext i32 %294 to i64
  %322 = add nsw i64 %321, 4
  %323 = getelementptr inbounds %"struct.jxl::FilterRows", %"struct.jxl::FilterRows"* %0, i64 0, i32 1, i64 %322
  %324 = load i64, i64* %323, align 8
  %325 = getelementptr inbounds float, float* %302, i64 %324
  %326 = load float, float* %325, align 4, !alias.scope !1364
  %327 = fsub float %284, %326
  %328 = tail call float @llvm.fabs.f32(float %327) #14
  %329 = fadd float %320, %328
  %330 = getelementptr inbounds float, float* %303, i64 1
  %331 = load float, float* %330, align 4, !alias.scope !1364
  %332 = fsub float %287, %331
  %333 = tail call float @llvm.fabs.f32(float %332) #14
  %334 = fadd float %329, %333
  %335 = getelementptr inbounds [12 x %"struct.hwy::N_SCALAR::Vec1"], [12 x %"struct.hwy::N_SCALAR::Vec1"]* %9, i64 0, i64 %292, i32 0
  %336 = load float, float* %335, align 4
  %337 = fmul float %278, %334
  %338 = fadd float %337, %336
  store float %338, float* %335, align 4
  %339 = add nuw nsw i64 %292, 1
  %340 = icmp eq i64 %339, 12
  br i1 %340, label %341, label %291

341:                                              ; preds = %291
  %342 = fmul float %58, %91
  %343 = load float*, float** %36, align 8
  %344 = getelementptr inbounds float, float* %343, i64 %92
  %345 = getelementptr inbounds float, float* %344, i64 %54
  %346 = load float, float* %345, align 4, !alias.scope !1399
  %347 = load float*, float** %38, align 8
  %348 = getelementptr inbounds float, float* %347, i64 %92
  %349 = getelementptr inbounds float, float* %348, i64 %54
  %350 = load float, float* %349, align 4, !alias.scope !1404
  %351 = load float*, float** %39, align 8
  %352 = getelementptr inbounds float, float* %351, i64 %92
  %353 = getelementptr inbounds float, float* %352, i64 %54
  %354 = load float, float* %353, align 4, !alias.scope !1409
  %355 = load float, float* %40, align 4, !noalias !1378
  br label %183
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN3jxl8N_SCALAR7Epf1RowERKNS_10FilterRowsERKNS_10LoopFilterERKNS_13FilterWeightsEmmmm(%"struct.jxl::FilterRows"* readonly dereferenceable(120), %"struct.jxl::LoopFilter"* nocapture readonly dereferenceable(144), %"struct.jxl::FilterWeights"* nocapture readnone dereferenceable(72), i64, i64, i64, i64) #12 {
  %8 = alloca [8 x float], align 16
  %9 = getelementptr inbounds %"struct.jxl::FilterRows", %"struct.jxl::FilterRows"* %0, i64 0, i32 3
  %10 = load float*, float** %9, align 8
  %11 = getelementptr inbounds %"struct.jxl::LoopFilter", %"struct.jxl::LoopFilter"* %1, i64 0, i32 25
  %12 = bitcast float* %11 to i32*
  %13 = load i32, i32* %12, align 4
  %14 = bitcast [8 x float]* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %14) #14
  %15 = getelementptr inbounds [8 x float], [8 x float]* %8, i64 0, i64 1
  %16 = getelementptr inbounds [8 x float], [8 x float]* %8, i64 0, i64 5
  %17 = getelementptr inbounds [8 x float], [8 x float]* %8, i64 0, i64 6
  %18 = getelementptr inbounds [8 x float], [8 x float]* %8, i64 0, i64 7
  %19 = bitcast [8 x float]* %8 to i32*
  store i32 %13, i32* %19, align 16
  %20 = bitcast float* %15 to <4 x float>*
  store <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, <4 x float>* %20, align 4
  store float 1.000000e+00, float* %16, align 4
  store float 1.000000e+00, float* %17, align 8
  %21 = bitcast float* %18 to i32*
  store i32 %13, i32* %21, align 4
  switch i64 %6, label %28 [
    i64 7, label %22
    i64 0, label %22
  ]

22:                                               ; preds = %7, %7
  %23 = getelementptr inbounds [8 x float], [8 x float]* %8, i64 0, i64 4
  %24 = insertelement <4 x i32> undef, i32 %13, i32 0
  %25 = shufflevector <4 x i32> %24, <4 x i32> undef, <4 x i32> zeroinitializer
  %26 = bitcast [8 x float]* %8 to <4 x i32>*
  store <4 x i32> %25, <4 x i32>* %26, align 16, !alias.scope !1414
  %27 = bitcast float* %23 to <4 x i32>*
  store <4 x i32> %25, <4 x i32>* %27, align 16, !alias.scope !1414
  br label %28

28:                                               ; preds = %22, %7
  %29 = icmp ult i64 %3, %4
  br i1 %29, label %30, label %43

30:                                               ; preds = %28
  %31 = getelementptr inbounds %"struct.jxl::FilterRows", %"struct.jxl::FilterRows"* %0, i64 0, i32 1, i64 1
  %32 = getelementptr inbounds %"struct.jxl::FilterRows", %"struct.jxl::FilterRows"* %0, i64 0, i32 1, i64 2
  %33 = getelementptr inbounds %"struct.jxl::FilterRows", %"struct.jxl::FilterRows"* %0, i64 0, i32 1, i64 3
  %34 = getelementptr inbounds %"struct.jxl::FilterRows", %"struct.jxl::FilterRows"* %0, i64 0, i32 1, i64 4
  %35 = getelementptr inbounds %"struct.jxl::FilterRows", %"struct.jxl::FilterRows"* %0, i64 0, i32 1, i64 5
  %36 = getelementptr inbounds %"struct.jxl::FilterRows", %"struct.jxl::FilterRows"* %0, i64 0, i32 0, i64 0
  %37 = getelementptr inbounds %"struct.jxl::FilterRows", %"struct.jxl::FilterRows"* %0, i64 0, i32 0, i64 1
  %38 = getelementptr inbounds %"struct.jxl::FilterRows", %"struct.jxl::FilterRows"* %0, i64 0, i32 0, i64 2
  %39 = getelementptr inbounds %"struct.jxl::LoopFilter", %"struct.jxl::LoopFilter"* %1, i64 0, i32 18
  %40 = getelementptr inbounds %"struct.jxl::FilterRows", %"struct.jxl::FilterRows"* %0, i64 0, i32 2, i64 0
  %41 = getelementptr inbounds %"struct.jxl::FilterRows", %"struct.jxl::FilterRows"* %0, i64 0, i32 2, i64 1
  %42 = getelementptr inbounds %"struct.jxl::FilterRows", %"struct.jxl::FilterRows"* %0, i64 0, i32 2, i64 2
  br label %44

43:                                               ; preds = %279, %28
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %14) #14
  ret void

44:                                               ; preds = %279, %30
  %45 = phi i64 [ %3, %30 ], [ %280, %279 ]
  %46 = add i64 %45, %5
  %47 = lshr i64 %46, 3
  %48 = getelementptr inbounds float, float* %10, i64 %47
  %49 = load float, float* %48, align 4
  %50 = fcmp olt float %49, 0xC00F3DF000000000
  br i1 %50, label %51, label %80

51:                                               ; preds = %44
  %52 = load float*, float** %36, align 8
  %53 = load i64, i64* %33, align 8
  %54 = getelementptr inbounds float, float* %52, i64 %45
  %55 = getelementptr inbounds float, float* %54, i64 %53
  %56 = bitcast float* %55 to i32*
  %57 = load i32, i32* %56, align 4, !alias.scope !1417
  %58 = load float*, float** %40, align 8
  %59 = getelementptr inbounds float, float* %58, i64 %45
  %60 = bitcast float* %59 to i32*
  store i32 %57, i32* %60, align 4, !alias.scope !1420
  %61 = load float*, float** %37, align 8
  %62 = load i64, i64* %33, align 8
  %63 = getelementptr inbounds float, float* %61, i64 %45
  %64 = getelementptr inbounds float, float* %63, i64 %62
  %65 = bitcast float* %64 to i32*
  %66 = load i32, i32* %65, align 4, !alias.scope !1417
  %67 = load float*, float** %41, align 8
  %68 = getelementptr inbounds float, float* %67, i64 %45
  %69 = bitcast float* %68 to i32*
  store i32 %66, i32* %69, align 4, !alias.scope !1420
  %70 = load float*, float** %38, align 8
  %71 = load i64, i64* %33, align 8
  %72 = getelementptr inbounds float, float* %70, i64 %45
  %73 = getelementptr inbounds float, float* %72, i64 %71
  %74 = bitcast float* %73 to i32*
  %75 = load i32, i32* %74, align 4, !alias.scope !1417
  %76 = load float*, float** %42, align 8
  %77 = getelementptr inbounds float, float* %76, i64 %45
  %78 = bitcast float* %77 to i32*
  store i32 %75, i32* %78, align 4, !alias.scope !1420
  %79 = add nuw i64 %45, 1
  br label %279

80:                                               ; preds = %44
  %81 = and i64 %46, 7
  %82 = getelementptr inbounds [8 x float], [8 x float]* %8, i64 0, i64 %81
  %83 = load float, float* %82, align 4, !alias.scope !1423
  %84 = load i64, i64* %31, align 8
  %85 = load i64, i64* %32, align 8
  %86 = load i64, i64* %33, align 8
  %87 = load i64, i64* %34, align 8
  %88 = load i64, i64* %35, align 8
  br label %198

89:                                               ; preds = %198
  %90 = fmul float %49, %83
  %91 = load float*, float** %36, align 8
  %92 = getelementptr inbounds float, float* %91, i64 %86
  %93 = getelementptr inbounds float, float* %92, i64 %45
  %94 = load float, float* %93, align 4, !alias.scope !1426
  %95 = load float*, float** %37, align 8
  %96 = getelementptr inbounds float, float* %95, i64 %86
  %97 = getelementptr inbounds float, float* %96, i64 %45
  %98 = load float, float* %97, align 4, !alias.scope !1429
  %99 = load float*, float** %38, align 8
  %100 = getelementptr inbounds float, float* %99, i64 %86
  %101 = getelementptr inbounds float, float* %100, i64 %45
  %102 = load float, float* %101, align 4, !alias.scope !1432
  %103 = getelementptr inbounds float, float* %91, i64 %85
  %104 = getelementptr inbounds float, float* %103, i64 %45
  %105 = load float, float* %104, align 4, !alias.scope !1435, !noalias !1438
  %106 = getelementptr inbounds float, float* %95, i64 %85
  %107 = getelementptr inbounds float, float* %106, i64 %45
  %108 = load float, float* %107, align 4, !alias.scope !1444, !noalias !1438
  %109 = getelementptr inbounds float, float* %99, i64 %85
  %110 = getelementptr inbounds float, float* %109, i64 %45
  %111 = load float, float* %110, align 4, !alias.scope !1447, !noalias !1438
  %112 = load float, float* %39, align 4, !noalias !1438
  %113 = extractelement <4 x float> %276, i32 0
  %114 = fmul float %90, %113
  %115 = fadd float %114, 1.000000e+00
  %116 = fmul float %115, %115
  %117 = fcmp ugt float %115, %112
  %118 = select i1 %117, float %116, float 0.000000e+00
  %119 = fadd float %118, 1.000000e+00
  %120 = fmul float %105, %118
  %121 = fadd float %94, %120
  %122 = fmul float %108, %118
  %123 = fadd float %98, %122
  %124 = fmul float %111, %118
  %125 = fadd float %102, %124
  %126 = add i64 %45, -1
  %127 = getelementptr inbounds float, float* %92, i64 %126
  %128 = load float, float* %127, align 4, !alias.scope !1450, !noalias !1455
  %129 = getelementptr inbounds float, float* %96, i64 %126
  %130 = load float, float* %129, align 4, !alias.scope !1461, !noalias !1455
  %131 = getelementptr inbounds float, float* %100, i64 %126
  %132 = load float, float* %131, align 4, !alias.scope !1466, !noalias !1455
  %133 = extractelement <4 x float> %276, i32 1
  %134 = fmul float %90, %133
  %135 = fadd float %134, 1.000000e+00
  %136 = fmul float %135, %135
  %137 = fcmp ugt float %135, %112
  %138 = select i1 %137, float %136, float 0.000000e+00
  %139 = fadd float %138, %119
  %140 = fmul float %128, %138
  %141 = fadd float %140, %121
  %142 = fmul float %130, %138
  %143 = fadd float %142, %123
  %144 = fmul float %138, %132
  %145 = fadd float %144, %125
  %146 = add nuw i64 %45, 1
  %147 = getelementptr inbounds float, float* %92, i64 %146
  %148 = load float, float* %147, align 4, !alias.scope !1471, !noalias !1476
  %149 = getelementptr inbounds float, float* %96, i64 %146
  %150 = load float, float* %149, align 4, !alias.scope !1482, !noalias !1476
  %151 = getelementptr inbounds float, float* %100, i64 %146
  %152 = load float, float* %151, align 4, !alias.scope !1487, !noalias !1476
  %153 = extractelement <4 x float> %276, i32 2
  %154 = fmul float %90, %153
  %155 = fadd float %154, 1.000000e+00
  %156 = fmul float %155, %155
  %157 = fcmp ugt float %155, %112
  %158 = select i1 %157, float %156, float 0.000000e+00
  %159 = fadd float %158, %139
  %160 = fmul float %158, %148
  %161 = fadd float %160, %141
  %162 = fmul float %158, %150
  %163 = fadd float %143, %162
  %164 = fmul float %158, %152
  %165 = fadd float %145, %164
  %166 = getelementptr inbounds float, float* %91, i64 %87
  %167 = getelementptr inbounds float, float* %166, i64 %45
  %168 = load float, float* %167, align 4, !alias.scope !1492, !noalias !1495
  %169 = getelementptr inbounds float, float* %95, i64 %87
  %170 = getelementptr inbounds float, float* %169, i64 %45
  %171 = load float, float* %170, align 4, !alias.scope !1501, !noalias !1495
  %172 = getelementptr inbounds float, float* %99, i64 %87
  %173 = getelementptr inbounds float, float* %172, i64 %45
  %174 = load float, float* %173, align 4, !alias.scope !1504, !noalias !1495
  %175 = extractelement <4 x float> %276, i32 3
  %176 = fmul float %90, %175
  %177 = fadd float %176, 1.000000e+00
  %178 = fmul float %177, %177
  %179 = fcmp ugt float %177, %112
  %180 = select i1 %179, float %178, float 0.000000e+00
  %181 = fadd float %180, %159
  %182 = fmul float %180, %168
  %183 = fadd float %161, %182
  %184 = fmul float %180, %171
  %185 = fadd float %163, %184
  %186 = fmul float %180, %174
  %187 = fadd float %165, %186
  %188 = fdiv float 1.000000e+00, %181
  %189 = fmul float %188, %183
  %190 = load float*, float** %40, align 8
  %191 = getelementptr inbounds float, float* %190, i64 %45
  store float %189, float* %191, align 4, !alias.scope !1507
  %192 = fmul float %188, %185
  %193 = load float*, float** %41, align 8
  %194 = getelementptr inbounds float, float* %193, i64 %45
  store float %192, float* %194, align 4, !alias.scope !1510
  %195 = fmul float %188, %187
  %196 = load float*, float** %42, align 8
  %197 = getelementptr inbounds float, float* %196, i64 %45
  store float %195, float* %197, align 4, !alias.scope !1513
  br label %279

198:                                              ; preds = %198, %80
  %199 = phi i64 [ 0, %80 ], [ %277, %198 ]
  %200 = phi <4 x float> [ zeroinitializer, %80 ], [ %276, %198 ]
  %201 = getelementptr inbounds %"struct.jxl::FilterRows", %"struct.jxl::FilterRows"* %0, i64 0, i32 0, i64 %199
  %202 = load float*, float** %201, align 8
  %203 = getelementptr inbounds float, float* %202, i64 %45
  %204 = getelementptr inbounds float, float* %203, i64 %84
  %205 = load float, float* %204, align 4, !alias.scope !1516
  %206 = getelementptr inbounds float, float* %203, i64 %85
  %207 = load float, float* %206, align 4, !alias.scope !1519
  %208 = getelementptr inbounds float, float* %206, i64 -1
  %209 = load float, float* %208, align 4, !alias.scope !1522
  %210 = getelementptr inbounds float, float* %206, i64 1
  %211 = load float, float* %210, align 4, !alias.scope !1527
  %212 = getelementptr inbounds float, float* %203, i64 %86
  %213 = getelementptr inbounds float, float* %212, i64 -2
  %214 = load float, float* %213, align 4, !alias.scope !1532
  %215 = getelementptr inbounds float, float* %212, i64 -1
  %216 = bitcast float* %215 to <2 x float>*
  %217 = load <2 x float>, <2 x float>* %216, align 4, !alias.scope !1537
  %218 = shufflevector <2 x float> %217, <2 x float> undef, <4 x i32> <i32 undef, i32 1, i32 undef, i32 undef>
  %219 = insertelement <4 x float> undef, float %205, i32 0
  %220 = insertelement <4 x float> %219, float %209, i32 1
  %221 = insertelement <4 x float> %220, float %211, i32 2
  %222 = extractelement <2 x float> %217, i32 1
  %223 = shufflevector <4 x float> %221, <4 x float> %218, <4 x i32> <i32 0, i32 1, i32 2, i32 5>
  %224 = insertelement <4 x float> undef, float %207, i32 0
  %225 = shufflevector <4 x float> %224, <4 x float> undef, <4 x i32> zeroinitializer
  %226 = fsub <4 x float> %223, %225
  %227 = call <4 x float> @llvm.fabs.v4f32(<4 x float> %226)
  %228 = getelementptr inbounds float, float* %212, i64 1
  %229 = load float, float* %228, align 4, !alias.scope !1546
  %230 = getelementptr inbounds float, float* %212, i64 2
  %231 = load float, float* %230, align 4, !alias.scope !1551
  %232 = getelementptr inbounds float, float* %203, i64 %87
  %233 = getelementptr inbounds float, float* %232, i64 -1
  %234 = load float, float* %233, align 4, !alias.scope !1556
  %235 = insertelement <4 x float> undef, float %209, i32 0
  %236 = insertelement <4 x float> %235, float %214, i32 1
  %237 = extractelement <2 x float> %217, i32 0
  %238 = insertelement <4 x float> %236, float %237, i32 2
  %239 = insertelement <4 x float> %238, float %234, i32 3
  %240 = shufflevector <2 x float> %217, <2 x float> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 0>
  %241 = fsub <4 x float> %239, %240
  %242 = call <4 x float> @llvm.fabs.v4f32(<4 x float> %241)
  %243 = fadd <4 x float> %227, %242
  %244 = load float, float* %232, align 4, !alias.scope !1561
  %245 = shufflevector <4 x float> %227, <4 x float> %242, <4 x i32> <i32 3, i32 6, i32 undef, i32 undef>
  %246 = getelementptr inbounds float, float* %232, i64 1
  %247 = load float, float* %246, align 4, !alias.scope !1564
  %248 = insertelement <4 x float> undef, float %211, i32 0
  %249 = insertelement <4 x float> %248, float %222, i32 1
  %250 = insertelement <4 x float> %249, float %231, i32 2
  %251 = insertelement <4 x float> %250, float %247, i32 3
  %252 = insertelement <4 x float> undef, float %229, i32 0
  %253 = shufflevector <4 x float> %252, <4 x float> undef, <4 x i32> zeroinitializer
  %254 = fsub <4 x float> %251, %253
  %255 = call <4 x float> @llvm.fabs.v4f32(<4 x float> %254)
  %256 = shufflevector <4 x float> %245, <4 x float> %255, <4 x i32> <i32 0, i32 1, i32 5, i32 undef>
  %257 = getelementptr inbounds float, float* %203, i64 %88
  %258 = load float, float* %257, align 4, !alias.scope !1569
  %259 = insertelement <4 x float> undef, float %222, i32 0
  %260 = insertelement <4 x float> %259, float %234, i32 1
  %261 = insertelement <4 x float> %260, float %247, i32 2
  %262 = insertelement <4 x float> %261, float %258, i32 3
  %263 = insertelement <4 x float> undef, float %244, i32 0
  %264 = shufflevector <4 x float> %263, <4 x float> undef, <4 x i32> zeroinitializer
  %265 = fsub <4 x float> %262, %264
  %266 = call <4 x float> @llvm.fabs.v4f32(<4 x float> %265)
  %267 = shufflevector <4 x float> %256, <4 x float> %266, <4 x i32> <i32 0, i32 1, i32 2, i32 4>
  %268 = fadd <4 x float> %243, %267
  %269 = fadd <4 x float> %268, %255
  %270 = fadd <4 x float> %269, %266
  %271 = getelementptr inbounds %"struct.jxl::LoopFilter", %"struct.jxl::LoopFilter"* %1, i64 0, i32 17, i64 %199
  %272 = load float, float* %271, align 4
  %273 = insertelement <4 x float> undef, float %272, i32 0
  %274 = shufflevector <4 x float> %273, <4 x float> undef, <4 x i32> zeroinitializer
  %275 = fmul <4 x float> %270, %274
  %276 = fadd <4 x float> %200, %275
  %277 = add nuw nsw i64 %199, 1
  %278 = icmp eq i64 %277, 3
  br i1 %278, label %89, label %198

279:                                              ; preds = %51, %89
  %280 = phi i64 [ %79, %51 ], [ %146, %89 ]
  %281 = icmp eq i64 %280, %4
  br i1 %281, label %43, label %44
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN3jxl8N_SCALAR7Epf2RowERKNS_10FilterRowsERKNS_10LoopFilterERKNS_13FilterWeightsEmmmm(%"struct.jxl::FilterRows"* readonly dereferenceable(120), %"struct.jxl::LoopFilter"* nocapture readonly dereferenceable(144), %"struct.jxl::FilterWeights"* nocapture readnone dereferenceable(72), i64, i64, i64, i64) #12 {
  %8 = alloca [8 x float], align 16
  %9 = getelementptr inbounds %"struct.jxl::FilterRows", %"struct.jxl::FilterRows"* %0, i64 0, i32 3
  %10 = load float*, float** %9, align 8
  %11 = getelementptr inbounds %"struct.jxl::LoopFilter", %"struct.jxl::LoopFilter"* %1, i64 0, i32 24
  %12 = load float, float* %11, align 8
  %13 = getelementptr inbounds %"struct.jxl::LoopFilter", %"struct.jxl::LoopFilter"* %1, i64 0, i32 25
  %14 = load float, float* %13, align 4
  %15 = fmul float %12, %14
  %16 = bitcast [8 x float]* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %16) #14
  %17 = getelementptr inbounds [8 x float], [8 x float]* %8, i64 0, i64 0
  %18 = getelementptr inbounds [8 x float], [8 x float]* %8, i64 0, i64 1
  %19 = getelementptr inbounds [8 x float], [8 x float]* %8, i64 0, i64 5
  %20 = getelementptr inbounds [8 x float], [8 x float]* %8, i64 0, i64 6
  %21 = getelementptr inbounds [8 x float], [8 x float]* %8, i64 0, i64 7
  store float %15, float* %17, align 16
  %22 = insertelement <4 x float> undef, float %12, i32 0
  %23 = shufflevector <4 x float> %22, <4 x float> undef, <4 x i32> zeroinitializer
  %24 = bitcast float* %18 to <4 x float>*
  store <4 x float> %23, <4 x float>* %24, align 4
  store float %12, float* %19, align 4
  store float %12, float* %20, align 8
  store float %15, float* %21, align 4
  switch i64 %6, label %31 [
    i64 7, label %25
    i64 0, label %25
  ]

25:                                               ; preds = %7, %7
  %26 = getelementptr inbounds [8 x float], [8 x float]* %8, i64 0, i64 4
  %27 = insertelement <4 x float> undef, float %15, i32 0
  %28 = shufflevector <4 x float> %27, <4 x float> undef, <4 x i32> zeroinitializer
  %29 = bitcast [8 x float]* %8 to <4 x float>*
  store <4 x float> %28, <4 x float>* %29, align 16, !alias.scope !1572
  %30 = bitcast float* %26 to <4 x float>*
  store <4 x float> %28, <4 x float>* %30, align 16, !alias.scope !1572
  br label %31

31:                                               ; preds = %25, %7
  %32 = icmp ult i64 %3, %4
  br i1 %32, label %33, label %47

33:                                               ; preds = %31
  %34 = getelementptr inbounds %"struct.jxl::FilterRows", %"struct.jxl::FilterRows"* %0, i64 0, i32 0, i64 0
  %35 = getelementptr inbounds %"struct.jxl::FilterRows", %"struct.jxl::FilterRows"* %0, i64 0, i32 1, i64 3
  %36 = getelementptr inbounds %"struct.jxl::FilterRows", %"struct.jxl::FilterRows"* %0, i64 0, i32 0, i64 1
  %37 = getelementptr inbounds %"struct.jxl::FilterRows", %"struct.jxl::FilterRows"* %0, i64 0, i32 0, i64 2
  %38 = getelementptr inbounds %"struct.jxl::FilterRows", %"struct.jxl::FilterRows"* %0, i64 0, i32 1, i64 2
  %39 = getelementptr inbounds %"struct.jxl::LoopFilter", %"struct.jxl::LoopFilter"* %1, i64 0, i32 17, i64 0
  %40 = getelementptr inbounds %"struct.jxl::LoopFilter", %"struct.jxl::LoopFilter"* %1, i64 0, i32 17, i64 1
  %41 = getelementptr inbounds %"struct.jxl::LoopFilter", %"struct.jxl::LoopFilter"* %1, i64 0, i32 17, i64 2
  %42 = getelementptr inbounds %"struct.jxl::LoopFilter", %"struct.jxl::LoopFilter"* %1, i64 0, i32 19
  %43 = getelementptr inbounds %"struct.jxl::FilterRows", %"struct.jxl::FilterRows"* %0, i64 0, i32 1, i64 4
  %44 = getelementptr inbounds %"struct.jxl::FilterRows", %"struct.jxl::FilterRows"* %0, i64 0, i32 2, i64 0
  %45 = getelementptr inbounds %"struct.jxl::FilterRows", %"struct.jxl::FilterRows"* %0, i64 0, i32 2, i64 1
  %46 = getelementptr inbounds %"struct.jxl::FilterRows", %"struct.jxl::FilterRows"* %0, i64 0, i32 2, i64 2
  br label %48

47:                                               ; preds = %250, %31
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %16) #14
  ret void

48:                                               ; preds = %250, %33
  %49 = phi i64 [ %3, %33 ], [ %251, %250 ]
  %50 = add i64 %49, %5
  %51 = lshr i64 %50, 3
  %52 = getelementptr inbounds float, float* %10, i64 %51
  %53 = load float, float* %52, align 4
  %54 = fcmp olt float %53, 0xC00F3DF000000000
  br i1 %54, label %55, label %84

55:                                               ; preds = %48
  %56 = load float*, float** %34, align 8
  %57 = load i64, i64* %35, align 8
  %58 = getelementptr inbounds float, float* %56, i64 %49
  %59 = getelementptr inbounds float, float* %58, i64 %57
  %60 = bitcast float* %59 to i32*
  %61 = load i32, i32* %60, align 4, !alias.scope !1575
  %62 = load float*, float** %44, align 8
  %63 = getelementptr inbounds float, float* %62, i64 %49
  %64 = bitcast float* %63 to i32*
  store i32 %61, i32* %64, align 4, !alias.scope !1578
  %65 = load float*, float** %36, align 8
  %66 = load i64, i64* %35, align 8
  %67 = getelementptr inbounds float, float* %65, i64 %49
  %68 = getelementptr inbounds float, float* %67, i64 %66
  %69 = bitcast float* %68 to i32*
  %70 = load i32, i32* %69, align 4, !alias.scope !1575
  %71 = load float*, float** %45, align 8
  %72 = getelementptr inbounds float, float* %71, i64 %49
  %73 = bitcast float* %72 to i32*
  store i32 %70, i32* %73, align 4, !alias.scope !1578
  %74 = load float*, float** %37, align 8
  %75 = load i64, i64* %35, align 8
  %76 = getelementptr inbounds float, float* %74, i64 %49
  %77 = getelementptr inbounds float, float* %76, i64 %75
  %78 = bitcast float* %77 to i32*
  %79 = load i32, i32* %78, align 4, !alias.scope !1575
  %80 = load float*, float** %46, align 8
  %81 = getelementptr inbounds float, float* %80, i64 %49
  %82 = bitcast float* %81 to i32*
  store i32 %79, i32* %82, align 4, !alias.scope !1578
  %83 = add nuw i64 %49, 1
  br label %250

84:                                               ; preds = %48
  %85 = and i64 %50, 7
  %86 = getelementptr inbounds [8 x float], [8 x float]* %8, i64 0, i64 %85
  %87 = load float, float* %86, align 4, !alias.scope !1581
  %88 = fmul float %53, %87
  %89 = load float*, float** %34, align 8
  %90 = load i64, i64* %35, align 8
  %91 = getelementptr inbounds float, float* %89, i64 %90
  %92 = getelementptr inbounds float, float* %91, i64 %49
  %93 = load float, float* %92, align 4, !alias.scope !1584
  %94 = load float*, float** %36, align 8
  %95 = getelementptr inbounds float, float* %94, i64 %90
  %96 = getelementptr inbounds float, float* %95, i64 %49
  %97 = load float, float* %96, align 4, !alias.scope !1587
  %98 = load float*, float** %37, align 8
  %99 = getelementptr inbounds float, float* %98, i64 %90
  %100 = getelementptr inbounds float, float* %99, i64 %49
  %101 = load float, float* %100, align 4, !alias.scope !1590
  %102 = load i64, i64* %38, align 8, !noalias !1593
  %103 = getelementptr inbounds float, float* %89, i64 %102
  %104 = getelementptr inbounds float, float* %103, i64 %49
  %105 = load float, float* %104, align 4, !alias.scope !1599, !noalias !1593
  %106 = getelementptr inbounds float, float* %94, i64 %102
  %107 = getelementptr inbounds float, float* %106, i64 %49
  %108 = load float, float* %107, align 4, !alias.scope !1602, !noalias !1593
  %109 = getelementptr inbounds float, float* %98, i64 %102
  %110 = getelementptr inbounds float, float* %109, i64 %49
  %111 = load float, float* %110, align 4, !alias.scope !1605, !noalias !1593
  %112 = load float, float* %39, align 8, !noalias !1593
  %113 = fsub float %108, %97
  %114 = tail call float @llvm.fabs.f32(float %113) #14
  %115 = load float, float* %40, align 4, !noalias !1593
  %116 = fmul float %114, %115
  %117 = insertelement <2 x float> undef, float %111, i32 0
  %118 = insertelement <2 x float> %117, float %105, i32 1
  %119 = insertelement <2 x float> undef, float %101, i32 0
  %120 = insertelement <2 x float> %119, float %93, i32 1
  %121 = fsub <2 x float> %118, %120
  %122 = call <2 x float> @llvm.fabs.v2f32(<2 x float> %121)
  %123 = load float, float* %41, align 8, !noalias !1593
  %124 = insertelement <2 x float> undef, float %123, i32 0
  %125 = insertelement <2 x float> %124, float %112, i32 1
  %126 = fmul <2 x float> %122, %125
  %127 = extractelement <2 x float> %126, i32 1
  %128 = fadd float %127, %116
  %129 = extractelement <2 x float> %126, i32 0
  %130 = fadd float %129, %128
  %131 = load float, float* %42, align 8, !noalias !1593
  %132 = fmul float %88, %130
  %133 = fadd float %132, 1.000000e+00
  %134 = fmul float %133, %133
  %135 = fcmp ugt float %133, %131
  %136 = select i1 %135, float %134, float 0.000000e+00
  %137 = fadd float %136, 1.000000e+00
  %138 = fmul float %105, %136
  %139 = fadd float %93, %138
  %140 = fmul float %108, %136
  %141 = fadd float %97, %140
  %142 = fmul float %111, %136
  %143 = fadd float %101, %142
  %144 = add i64 %49, -1
  %145 = getelementptr inbounds float, float* %91, i64 %144
  %146 = load float, float* %145, align 4, !alias.scope !1608, !noalias !1613
  %147 = getelementptr inbounds float, float* %95, i64 %144
  %148 = load float, float* %147, align 4, !alias.scope !1619, !noalias !1613
  %149 = getelementptr inbounds float, float* %99, i64 %144
  %150 = load float, float* %149, align 4, !alias.scope !1624, !noalias !1613
  %151 = fsub float %148, %97
  %152 = tail call float @llvm.fabs.f32(float %151) #14
  %153 = fmul float %115, %152
  %154 = insertelement <2 x float> undef, float %150, i32 0
  %155 = insertelement <2 x float> %154, float %146, i32 1
  %156 = fsub <2 x float> %155, %120
  %157 = call <2 x float> @llvm.fabs.v2f32(<2 x float> %156)
  %158 = fmul <2 x float> %125, %157
  %159 = extractelement <2 x float> %158, i32 1
  %160 = fadd float %159, %153
  %161 = extractelement <2 x float> %158, i32 0
  %162 = fadd float %161, %160
  %163 = fmul float %88, %162
  %164 = fadd float %163, 1.000000e+00
  %165 = fmul float %164, %164
  %166 = fcmp ugt float %164, %131
  %167 = select i1 %166, float %165, float 0.000000e+00
  %168 = fadd float %137, %167
  %169 = fmul float %146, %167
  %170 = fadd float %139, %169
  %171 = fmul float %148, %167
  %172 = fadd float %141, %171
  %173 = fmul float %150, %167
  %174 = fadd float %143, %173
  %175 = add nuw i64 %49, 1
  %176 = getelementptr inbounds float, float* %91, i64 %175
  %177 = load float, float* %176, align 4, !alias.scope !1629, !noalias !1634
  %178 = getelementptr inbounds float, float* %95, i64 %175
  %179 = load float, float* %178, align 4, !alias.scope !1640, !noalias !1634
  %180 = getelementptr inbounds float, float* %99, i64 %175
  %181 = load float, float* %180, align 4, !alias.scope !1645, !noalias !1634
  %182 = fsub float %179, %97
  %183 = tail call float @llvm.fabs.f32(float %182) #14
  %184 = fmul float %115, %183
  %185 = insertelement <2 x float> undef, float %181, i32 0
  %186 = insertelement <2 x float> %185, float %177, i32 1
  %187 = fsub <2 x float> %186, %120
  %188 = call <2 x float> @llvm.fabs.v2f32(<2 x float> %187)
  %189 = fmul <2 x float> %125, %188
  %190 = extractelement <2 x float> %189, i32 1
  %191 = fadd float %190, %184
  %192 = extractelement <2 x float> %189, i32 0
  %193 = fadd float %192, %191
  %194 = fmul float %88, %193
  %195 = fadd float %194, 1.000000e+00
  %196 = fmul float %195, %195
  %197 = fcmp ugt float %195, %131
  %198 = select i1 %197, float %196, float 0.000000e+00
  %199 = fadd float %168, %198
  %200 = fmul float %177, %198
  %201 = fadd float %170, %200
  %202 = fmul float %179, %198
  %203 = fadd float %172, %202
  %204 = fmul float %181, %198
  %205 = fadd float %174, %204
  %206 = load i64, i64* %43, align 8, !noalias !1650
  %207 = getelementptr inbounds float, float* %89, i64 %206
  %208 = getelementptr inbounds float, float* %207, i64 %49
  %209 = load float, float* %208, align 4, !alias.scope !1656, !noalias !1650
  %210 = getelementptr inbounds float, float* %94, i64 %206
  %211 = getelementptr inbounds float, float* %210, i64 %49
  %212 = load float, float* %211, align 4, !alias.scope !1659, !noalias !1650
  %213 = getelementptr inbounds float, float* %98, i64 %206
  %214 = getelementptr inbounds float, float* %213, i64 %49
  %215 = load float, float* %214, align 4, !alias.scope !1662, !noalias !1650
  %216 = fsub float %212, %97
  %217 = tail call float @llvm.fabs.f32(float %216) #14
  %218 = fmul float %115, %217
  %219 = insertelement <2 x float> undef, float %215, i32 0
  %220 = insertelement <2 x float> %219, float %209, i32 1
  %221 = fsub <2 x float> %220, %120
  %222 = call <2 x float> @llvm.fabs.v2f32(<2 x float> %221)
  %223 = fmul <2 x float> %125, %222
  %224 = extractelement <2 x float> %223, i32 1
  %225 = fadd float %224, %218
  %226 = extractelement <2 x float> %223, i32 0
  %227 = fadd float %226, %225
  %228 = fmul float %88, %227
  %229 = fadd float %228, 1.000000e+00
  %230 = fmul float %229, %229
  %231 = fcmp ugt float %229, %131
  %232 = select i1 %231, float %230, float 0.000000e+00
  %233 = fadd float %199, %232
  %234 = fmul float %209, %232
  %235 = fadd float %201, %234
  %236 = fmul float %212, %232
  %237 = fadd float %203, %236
  %238 = fmul float %215, %232
  %239 = fadd float %205, %238
  %240 = fdiv float 1.000000e+00, %233
  %241 = fmul float %235, %240
  %242 = load float*, float** %44, align 8
  %243 = getelementptr inbounds float, float* %242, i64 %49
  store float %241, float* %243, align 4, !alias.scope !1665
  %244 = fmul float %237, %240
  %245 = load float*, float** %45, align 8
  %246 = getelementptr inbounds float, float* %245, i64 %49
  store float %244, float* %246, align 4, !alias.scope !1668
  %247 = fmul float %239, %240
  %248 = load float*, float** %46, align 8
  %249 = getelementptr inbounds float, float* %248, i64 %49
  store float %247, float* %249, align 4, !alias.scope !1671
  br label %250

250:                                              ; preds = %55, %84
  %251 = phi i64 [ %83, %55 ], [ %175, %84 ]
  %252 = icmp eq i64 %251, %4
  br i1 %252, label %47, label %48
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN3jxl8N_SCALAR18FilterPipelineInitEPNS_14FilterPipelineERKNS_10LoopFilterERKNS_6Image3IfEERKNS_4RectESC_mPS7_SC_(%"class.jxl::FilterPipeline"*, %"struct.jxl::LoopFilter"* nocapture readonly dereferenceable(144), %"class.jxl::Image3"* dereferenceable(96), %"class.jxl::Rect"* nocapture readonly dereferenceable(32), %"class.jxl::Rect"* nocapture readonly dereferenceable(32), i64, %"class.jxl::Image3"*, %"class.jxl::Rect"* nocapture readonly dereferenceable(32)) #12 {
  %9 = getelementptr inbounds %"struct.jxl::LoopFilter", %"struct.jxl::LoopFilter"* %1, i64 0, i32 11
  %10 = load i32, i32* %9, align 4
  %11 = icmp ne i32 %10, 0
  %12 = getelementptr inbounds %"class.jxl::FilterPipeline", %"class.jxl::FilterPipeline"* %0, i64 0, i32 4
  %13 = zext i1 %11 to i8
  store i8 %13, i8* %12, align 8
  %14 = getelementptr inbounds %"class.jxl::FilterPipeline", %"class.jxl::FilterPipeline"* %0, i64 0, i32 3
  store i64 0, i64* %14, align 8
  %15 = getelementptr inbounds %"class.jxl::FilterPipeline", %"class.jxl::FilterPipeline"* %0, i64 0, i32 1
  store i64 0, i64* %15, align 8
  %16 = getelementptr inbounds %"class.jxl::FilterPipeline", %"class.jxl::FilterPipeline"* %0, i64 0, i32 2, i64 0, i32 0
  store %"class.jxl::Image3"* %2, %"class.jxl::Image3"** %16, align 8
  %17 = getelementptr inbounds %"class.jxl::FilterPipeline", %"class.jxl::FilterPipeline"* %0, i64 0, i32 2, i64 0, i32 4
  %18 = bitcast %"class.jxl::Rect"* %17 to i8*
  %19 = bitcast %"class.jxl::Rect"* %3 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %18, i8* align 8 %19, i64 32, i1 false) #14
  %20 = getelementptr inbounds %"class.jxl::FilterPipeline", %"class.jxl::FilterPipeline"* %0, i64 0, i32 2, i64 0, i32 6
  %21 = bitcast %"class.jxl::Rect"* %20 to i8*
  %22 = bitcast %"class.jxl::Rect"* %4 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %21, i8* align 8 %22, i64 32, i1 false) #14
  %23 = getelementptr inbounds %"class.jxl::FilterPipeline", %"class.jxl::FilterPipeline"* %0, i64 0, i32 2, i64 0, i32 7
  store i64 %5, i64* %23, align 8
  %24 = getelementptr inbounds %"class.jxl::FilterPipeline", %"class.jxl::FilterPipeline"* %0, i64 0, i32 2, i64 0, i32 8
  store void (%"struct.jxl::FilterPipeline::FilterStep"*, %"struct.jxl::FilterRows"*, i64)* @_ZZN3jxl14FilterPipeline10FilterStep8SetInputEPKNS_6Image3IfEERKNS_4RectES8_mENUlRKS1_PNS_10FilterRowsElE_8__invokeESA_SC_l, void (%"struct.jxl::FilterPipeline::FilterStep"*, %"struct.jxl::FilterRows"*, i64)** %24, align 8
  %25 = getelementptr inbounds %"struct.jxl::LoopFilter", %"struct.jxl::LoopFilter"* %1, i64 0, i32 2
  %26 = load i8, i8* %25, align 1, !range !311
  %27 = icmp eq i8 %26, 0
  br i1 %27, label %31, label %28

28:                                               ; preds = %8
  %29 = getelementptr inbounds %"class.jxl::FilterPipeline", %"class.jxl::FilterPipeline"* %0, i64 0, i32 2, i64 0, i32 10
  %30 = bitcast %"struct.jxl::FilterDefinition"* %29 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %30, i8* align 8 bitcast (%"struct.jxl::FilterDefinition"* @_ZN3jxl8N_SCALARL15kGaborishFilterE to i8*), i64 16, i1 false) #14
  store i64 1, i64* %14, align 8
  br label %31

31:                                               ; preds = %8, %28
  %32 = phi i64 [ 0, %8 ], [ 1, %28 ]
  %33 = load i32, i32* %9, align 4
  switch i32 %33, label %162 [
    i32 1, label %34
    i32 2, label %54
    i32 3, label %96
  ]

34:                                               ; preds = %31
  %35 = getelementptr inbounds %"class.jxl::FilterPipeline", %"class.jxl::FilterPipeline"* %0, i64 0, i32 2, i64 %32, i32 10
  %36 = bitcast %"struct.jxl::FilterDefinition"* %35 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %36, i8* align 8 bitcast (%"struct.jxl::FilterDefinition"* @_ZN3jxl8N_SCALARL11kEpf1FilterE to i8*), i64 16, i1 false) #14
  %37 = load i64, i64* %14, align 8
  %38 = icmp eq i64 %37, 0
  br i1 %38, label %160, label %39

39:                                               ; preds = %34
  %40 = add i64 %37, -1
  %41 = getelementptr inbounds %"class.jxl::FilterPipeline", %"class.jxl::FilterPipeline"* %0, i64 0, i32 0
  %42 = getelementptr inbounds %"class.jxl::FilterPipeline", %"class.jxl::FilterPipeline"* %0, i64 0, i32 2, i64 %40, i32 2
  store %"class.jxl::Image3"* %41, %"class.jxl::Image3"** %42, align 8
  %43 = getelementptr inbounds %"class.jxl::FilterPipeline", %"class.jxl::FilterPipeline"* %0, i64 0, i32 2, i64 %40, i32 3
  store i64 0, i64* %43, align 8
  %44 = getelementptr inbounds %"class.jxl::FilterPipeline", %"class.jxl::FilterPipeline"* %0, i64 0, i32 2, i64 %40, i32 9
  store void (%"struct.jxl::FilterPipeline::FilterStep"*, %"struct.jxl::FilterRows"*, i64)* @_ZZN3jxl14FilterPipeline10FilterStep22SetOutputCyclicStorageILm5EEEvPNS_6Image3IfEEmENUlRKS1_PNS_10FilterRowsElE_8__invokeES7_S9_l, void (%"struct.jxl::FilterPipeline::FilterStep"*, %"struct.jxl::FilterRows"*, i64)** %44, align 8
  %45 = load i64, i64* %14, align 8
  %46 = load i64, i64* %15, align 8
  %47 = getelementptr inbounds %"class.jxl::FilterPipeline", %"class.jxl::FilterPipeline"* %0, i64 0, i32 2, i64 %45, i32 0
  store %"class.jxl::Image3"* %41, %"class.jxl::Image3"** %47, align 8
  %48 = getelementptr inbounds %"class.jxl::FilterPipeline", %"class.jxl::FilterPipeline"* %0, i64 0, i32 2, i64 %45, i32 1
  store i64 %46, i64* %48, align 8
  %49 = getelementptr inbounds %"class.jxl::FilterPipeline", %"class.jxl::FilterPipeline"* %0, i64 0, i32 2, i64 %45, i32 8
  store void (%"struct.jxl::FilterPipeline::FilterStep"*, %"struct.jxl::FilterRows"*, i64)* @_ZZN3jxl14FilterPipeline10FilterStep21SetInputCyclicStorageILm5EEEvPKNS_6Image3IfEEmENUlRKS1_PNS_10FilterRowsElE_8__invokeES8_SA_l, void (%"struct.jxl::FilterPipeline::FilterStep"*, %"struct.jxl::FilterRows"*, i64)** %49, align 8
  %50 = load i64, i64* %15, align 8
  %51 = add i64 %50, 5
  store i64 %51, i64* %15, align 8
  %52 = load i64, i64* %14, align 8
  %53 = add i64 %52, 1
  br label %160

54:                                               ; preds = %31
  %55 = getelementptr inbounds %"class.jxl::FilterPipeline", %"class.jxl::FilterPipeline"* %0, i64 0, i32 2, i64 %32, i32 10
  %56 = bitcast %"struct.jxl::FilterDefinition"* %55 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %56, i8* align 8 bitcast (%"struct.jxl::FilterDefinition"* @_ZN3jxl8N_SCALARL11kEpf1FilterE to i8*), i64 16, i1 false) #14
  %57 = load i64, i64* %14, align 8
  %58 = icmp eq i64 %57, 0
  br i1 %58, label %74, label %59

59:                                               ; preds = %54
  %60 = add i64 %57, -1
  %61 = getelementptr inbounds %"class.jxl::FilterPipeline", %"class.jxl::FilterPipeline"* %0, i64 0, i32 0
  %62 = getelementptr inbounds %"class.jxl::FilterPipeline", %"class.jxl::FilterPipeline"* %0, i64 0, i32 2, i64 %60, i32 2
  store %"class.jxl::Image3"* %61, %"class.jxl::Image3"** %62, align 8
  %63 = getelementptr inbounds %"class.jxl::FilterPipeline", %"class.jxl::FilterPipeline"* %0, i64 0, i32 2, i64 %60, i32 3
  store i64 0, i64* %63, align 8
  %64 = getelementptr inbounds %"class.jxl::FilterPipeline", %"class.jxl::FilterPipeline"* %0, i64 0, i32 2, i64 %60, i32 9
  store void (%"struct.jxl::FilterPipeline::FilterStep"*, %"struct.jxl::FilterRows"*, i64)* @_ZZN3jxl14FilterPipeline10FilterStep22SetOutputCyclicStorageILm5EEEvPNS_6Image3IfEEmENUlRKS1_PNS_10FilterRowsElE_8__invokeES7_S9_l, void (%"struct.jxl::FilterPipeline::FilterStep"*, %"struct.jxl::FilterRows"*, i64)** %64, align 8
  %65 = load i64, i64* %14, align 8
  %66 = load i64, i64* %15, align 8
  %67 = getelementptr inbounds %"class.jxl::FilterPipeline", %"class.jxl::FilterPipeline"* %0, i64 0, i32 2, i64 %65, i32 0
  store %"class.jxl::Image3"* %61, %"class.jxl::Image3"** %67, align 8
  %68 = getelementptr inbounds %"class.jxl::FilterPipeline", %"class.jxl::FilterPipeline"* %0, i64 0, i32 2, i64 %65, i32 1
  store i64 %66, i64* %68, align 8
  %69 = getelementptr inbounds %"class.jxl::FilterPipeline", %"class.jxl::FilterPipeline"* %0, i64 0, i32 2, i64 %65, i32 8
  store void (%"struct.jxl::FilterPipeline::FilterStep"*, %"struct.jxl::FilterRows"*, i64)* @_ZZN3jxl14FilterPipeline10FilterStep21SetInputCyclicStorageILm5EEEvPKNS_6Image3IfEEmENUlRKS1_PNS_10FilterRowsElE_8__invokeES8_SA_l, void (%"struct.jxl::FilterPipeline::FilterStep"*, %"struct.jxl::FilterRows"*, i64)** %69, align 8
  %70 = load i64, i64* %15, align 8
  %71 = add i64 %70, 5
  store i64 %71, i64* %15, align 8
  %72 = load i64, i64* %14, align 8
  %73 = add i64 %72, 1
  br label %74

74:                                               ; preds = %54, %59
  %75 = phi i64 [ 1, %54 ], [ %73, %59 ]
  store i64 %75, i64* %14, align 8
  %76 = getelementptr inbounds %"class.jxl::FilterPipeline", %"class.jxl::FilterPipeline"* %0, i64 0, i32 2, i64 %75, i32 10
  %77 = bitcast %"struct.jxl::FilterDefinition"* %76 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %77, i8* align 8 bitcast (%"struct.jxl::FilterDefinition"* @_ZN3jxl8N_SCALARL11kEpf2FilterE to i8*), i64 16, i1 false) #14
  %78 = load i64, i64* %14, align 8
  %79 = icmp eq i64 %78, 0
  br i1 %79, label %160, label %80

80:                                               ; preds = %74
  %81 = add i64 %78, -1
  %82 = getelementptr inbounds %"class.jxl::FilterPipeline", %"class.jxl::FilterPipeline"* %0, i64 0, i32 0
  %83 = load i64, i64* %15, align 8
  %84 = getelementptr inbounds %"class.jxl::FilterPipeline", %"class.jxl::FilterPipeline"* %0, i64 0, i32 2, i64 %81, i32 2
  store %"class.jxl::Image3"* %82, %"class.jxl::Image3"** %84, align 8
  %85 = getelementptr inbounds %"class.jxl::FilterPipeline", %"class.jxl::FilterPipeline"* %0, i64 0, i32 2, i64 %81, i32 3
  store i64 %83, i64* %85, align 8
  %86 = getelementptr inbounds %"class.jxl::FilterPipeline", %"class.jxl::FilterPipeline"* %0, i64 0, i32 2, i64 %81, i32 9
  store void (%"struct.jxl::FilterPipeline::FilterStep"*, %"struct.jxl::FilterRows"*, i64)* @_ZZN3jxl14FilterPipeline10FilterStep22SetOutputCyclicStorageILm3EEEvPNS_6Image3IfEEmENUlRKS1_PNS_10FilterRowsElE_8__invokeES7_S9_l, void (%"struct.jxl::FilterPipeline::FilterStep"*, %"struct.jxl::FilterRows"*, i64)** %86, align 8
  %87 = load i64, i64* %14, align 8
  %88 = load i64, i64* %15, align 8
  %89 = getelementptr inbounds %"class.jxl::FilterPipeline", %"class.jxl::FilterPipeline"* %0, i64 0, i32 2, i64 %87, i32 0
  store %"class.jxl::Image3"* %82, %"class.jxl::Image3"** %89, align 8
  %90 = getelementptr inbounds %"class.jxl::FilterPipeline", %"class.jxl::FilterPipeline"* %0, i64 0, i32 2, i64 %87, i32 1
  store i64 %88, i64* %90, align 8
  %91 = getelementptr inbounds %"class.jxl::FilterPipeline", %"class.jxl::FilterPipeline"* %0, i64 0, i32 2, i64 %87, i32 8
  store void (%"struct.jxl::FilterPipeline::FilterStep"*, %"struct.jxl::FilterRows"*, i64)* @_ZZN3jxl14FilterPipeline10FilterStep21SetInputCyclicStorageILm3EEEvPKNS_6Image3IfEEmENUlRKS1_PNS_10FilterRowsElE_8__invokeES8_SA_l, void (%"struct.jxl::FilterPipeline::FilterStep"*, %"struct.jxl::FilterRows"*, i64)** %91, align 8
  %92 = load i64, i64* %15, align 8
  %93 = add i64 %92, 3
  store i64 %93, i64* %15, align 8
  %94 = load i64, i64* %14, align 8
  %95 = add i64 %94, 1
  br label %160

96:                                               ; preds = %31
  %97 = getelementptr inbounds %"class.jxl::FilterPipeline", %"class.jxl::FilterPipeline"* %0, i64 0, i32 2, i64 %32, i32 10
  %98 = bitcast %"struct.jxl::FilterDefinition"* %97 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %98, i8* align 8 bitcast (%"struct.jxl::FilterDefinition"* @_ZN3jxl8N_SCALARL11kEpf0FilterE to i8*), i64 16, i1 false) #14
  %99 = load i64, i64* %14, align 8
  %100 = icmp eq i64 %99, 0
  br i1 %100, label %116, label %101

101:                                              ; preds = %96
  %102 = add i64 %99, -1
  %103 = getelementptr inbounds %"class.jxl::FilterPipeline", %"class.jxl::FilterPipeline"* %0, i64 0, i32 0
  %104 = getelementptr inbounds %"class.jxl::FilterPipeline", %"class.jxl::FilterPipeline"* %0, i64 0, i32 2, i64 %102, i32 2
  store %"class.jxl::Image3"* %103, %"class.jxl::Image3"** %104, align 8
  %105 = getelementptr inbounds %"class.jxl::FilterPipeline", %"class.jxl::FilterPipeline"* %0, i64 0, i32 2, i64 %102, i32 3
  store i64 0, i64* %105, align 8
  %106 = getelementptr inbounds %"class.jxl::FilterPipeline", %"class.jxl::FilterPipeline"* %0, i64 0, i32 2, i64 %102, i32 9
  store void (%"struct.jxl::FilterPipeline::FilterStep"*, %"struct.jxl::FilterRows"*, i64)* @_ZZN3jxl14FilterPipeline10FilterStep22SetOutputCyclicStorageILm7EEEvPNS_6Image3IfEEmENUlRKS1_PNS_10FilterRowsElE_8__invokeES7_S9_l, void (%"struct.jxl::FilterPipeline::FilterStep"*, %"struct.jxl::FilterRows"*, i64)** %106, align 8
  %107 = load i64, i64* %14, align 8
  %108 = load i64, i64* %15, align 8
  %109 = getelementptr inbounds %"class.jxl::FilterPipeline", %"class.jxl::FilterPipeline"* %0, i64 0, i32 2, i64 %107, i32 0
  store %"class.jxl::Image3"* %103, %"class.jxl::Image3"** %109, align 8
  %110 = getelementptr inbounds %"class.jxl::FilterPipeline", %"class.jxl::FilterPipeline"* %0, i64 0, i32 2, i64 %107, i32 1
  store i64 %108, i64* %110, align 8
  %111 = getelementptr inbounds %"class.jxl::FilterPipeline", %"class.jxl::FilterPipeline"* %0, i64 0, i32 2, i64 %107, i32 8
  store void (%"struct.jxl::FilterPipeline::FilterStep"*, %"struct.jxl::FilterRows"*, i64)* @_ZZN3jxl14FilterPipeline10FilterStep21SetInputCyclicStorageILm7EEEvPKNS_6Image3IfEEmENUlRKS1_PNS_10FilterRowsElE_8__invokeES8_SA_l, void (%"struct.jxl::FilterPipeline::FilterStep"*, %"struct.jxl::FilterRows"*, i64)** %111, align 8
  %112 = load i64, i64* %15, align 8
  %113 = add i64 %112, 7
  store i64 %113, i64* %15, align 8
  %114 = load i64, i64* %14, align 8
  %115 = add i64 %114, 1
  br label %116

116:                                              ; preds = %96, %101
  %117 = phi i64 [ 1, %96 ], [ %115, %101 ]
  store i64 %117, i64* %14, align 8
  %118 = getelementptr inbounds %"class.jxl::FilterPipeline", %"class.jxl::FilterPipeline"* %0, i64 0, i32 2, i64 %117, i32 10
  %119 = bitcast %"struct.jxl::FilterDefinition"* %118 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %119, i8* align 8 bitcast (%"struct.jxl::FilterDefinition"* @_ZN3jxl8N_SCALARL11kEpf1FilterE to i8*), i64 16, i1 false) #14
  %120 = load i64, i64* %14, align 8
  %121 = icmp eq i64 %120, 0
  br i1 %121, label %138, label %122

122:                                              ; preds = %116
  %123 = add i64 %120, -1
  %124 = getelementptr inbounds %"class.jxl::FilterPipeline", %"class.jxl::FilterPipeline"* %0, i64 0, i32 0
  %125 = load i64, i64* %15, align 8
  %126 = getelementptr inbounds %"class.jxl::FilterPipeline", %"class.jxl::FilterPipeline"* %0, i64 0, i32 2, i64 %123, i32 2
  store %"class.jxl::Image3"* %124, %"class.jxl::Image3"** %126, align 8
  %127 = getelementptr inbounds %"class.jxl::FilterPipeline", %"class.jxl::FilterPipeline"* %0, i64 0, i32 2, i64 %123, i32 3
  store i64 %125, i64* %127, align 8
  %128 = getelementptr inbounds %"class.jxl::FilterPipeline", %"class.jxl::FilterPipeline"* %0, i64 0, i32 2, i64 %123, i32 9
  store void (%"struct.jxl::FilterPipeline::FilterStep"*, %"struct.jxl::FilterRows"*, i64)* @_ZZN3jxl14FilterPipeline10FilterStep22SetOutputCyclicStorageILm5EEEvPNS_6Image3IfEEmENUlRKS1_PNS_10FilterRowsElE_8__invokeES7_S9_l, void (%"struct.jxl::FilterPipeline::FilterStep"*, %"struct.jxl::FilterRows"*, i64)** %128, align 8
  %129 = load i64, i64* %14, align 8
  %130 = load i64, i64* %15, align 8
  %131 = getelementptr inbounds %"class.jxl::FilterPipeline", %"class.jxl::FilterPipeline"* %0, i64 0, i32 2, i64 %129, i32 0
  store %"class.jxl::Image3"* %124, %"class.jxl::Image3"** %131, align 8
  %132 = getelementptr inbounds %"class.jxl::FilterPipeline", %"class.jxl::FilterPipeline"* %0, i64 0, i32 2, i64 %129, i32 1
  store i64 %130, i64* %132, align 8
  %133 = getelementptr inbounds %"class.jxl::FilterPipeline", %"class.jxl::FilterPipeline"* %0, i64 0, i32 2, i64 %129, i32 8
  store void (%"struct.jxl::FilterPipeline::FilterStep"*, %"struct.jxl::FilterRows"*, i64)* @_ZZN3jxl14FilterPipeline10FilterStep21SetInputCyclicStorageILm5EEEvPKNS_6Image3IfEEmENUlRKS1_PNS_10FilterRowsElE_8__invokeES8_SA_l, void (%"struct.jxl::FilterPipeline::FilterStep"*, %"struct.jxl::FilterRows"*, i64)** %133, align 8
  %134 = load i64, i64* %15, align 8
  %135 = add i64 %134, 5
  store i64 %135, i64* %15, align 8
  %136 = load i64, i64* %14, align 8
  %137 = add i64 %136, 1
  br label %138

138:                                              ; preds = %116, %122
  %139 = phi i64 [ 1, %116 ], [ %137, %122 ]
  store i64 %139, i64* %14, align 8
  %140 = getelementptr inbounds %"class.jxl::FilterPipeline", %"class.jxl::FilterPipeline"* %0, i64 0, i32 2, i64 %139, i32 10
  %141 = bitcast %"struct.jxl::FilterDefinition"* %140 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %141, i8* align 8 bitcast (%"struct.jxl::FilterDefinition"* @_ZN3jxl8N_SCALARL11kEpf2FilterE to i8*), i64 16, i1 false) #14
  %142 = load i64, i64* %14, align 8
  %143 = icmp eq i64 %142, 0
  br i1 %143, label %160, label %144

144:                                              ; preds = %138
  %145 = add i64 %142, -1
  %146 = getelementptr inbounds %"class.jxl::FilterPipeline", %"class.jxl::FilterPipeline"* %0, i64 0, i32 0
  %147 = load i64, i64* %15, align 8
  %148 = getelementptr inbounds %"class.jxl::FilterPipeline", %"class.jxl::FilterPipeline"* %0, i64 0, i32 2, i64 %145, i32 2
  store %"class.jxl::Image3"* %146, %"class.jxl::Image3"** %148, align 8
  %149 = getelementptr inbounds %"class.jxl::FilterPipeline", %"class.jxl::FilterPipeline"* %0, i64 0, i32 2, i64 %145, i32 3
  store i64 %147, i64* %149, align 8
  %150 = getelementptr inbounds %"class.jxl::FilterPipeline", %"class.jxl::FilterPipeline"* %0, i64 0, i32 2, i64 %145, i32 9
  store void (%"struct.jxl::FilterPipeline::FilterStep"*, %"struct.jxl::FilterRows"*, i64)* @_ZZN3jxl14FilterPipeline10FilterStep22SetOutputCyclicStorageILm3EEEvPNS_6Image3IfEEmENUlRKS1_PNS_10FilterRowsElE_8__invokeES7_S9_l, void (%"struct.jxl::FilterPipeline::FilterStep"*, %"struct.jxl::FilterRows"*, i64)** %150, align 8
  %151 = load i64, i64* %14, align 8
  %152 = load i64, i64* %15, align 8
  %153 = getelementptr inbounds %"class.jxl::FilterPipeline", %"class.jxl::FilterPipeline"* %0, i64 0, i32 2, i64 %151, i32 0
  store %"class.jxl::Image3"* %146, %"class.jxl::Image3"** %153, align 8
  %154 = getelementptr inbounds %"class.jxl::FilterPipeline", %"class.jxl::FilterPipeline"* %0, i64 0, i32 2, i64 %151, i32 1
  store i64 %152, i64* %154, align 8
  %155 = getelementptr inbounds %"class.jxl::FilterPipeline", %"class.jxl::FilterPipeline"* %0, i64 0, i32 2, i64 %151, i32 8
  store void (%"struct.jxl::FilterPipeline::FilterStep"*, %"struct.jxl::FilterRows"*, i64)* @_ZZN3jxl14FilterPipeline10FilterStep21SetInputCyclicStorageILm3EEEvPKNS_6Image3IfEEmENUlRKS1_PNS_10FilterRowsElE_8__invokeES8_SA_l, void (%"struct.jxl::FilterPipeline::FilterStep"*, %"struct.jxl::FilterRows"*, i64)** %155, align 8
  %156 = load i64, i64* %15, align 8
  %157 = add i64 %156, 3
  store i64 %157, i64* %15, align 8
  %158 = load i64, i64* %14, align 8
  %159 = add i64 %158, 1
  br label %160

160:                                              ; preds = %144, %138, %80, %74, %39, %34
  %161 = phi i64 [ 1, %34 ], [ %53, %39 ], [ 1, %74 ], [ %95, %80 ], [ 1, %138 ], [ %159, %144 ]
  store i64 %161, i64* %14, align 8
  br label %162

162:                                              ; preds = %160, %31
  %163 = phi i64 [ %32, %31 ], [ %161, %160 ]
  %164 = add i64 %163, -1
  %165 = getelementptr inbounds %"class.jxl::FilterPipeline", %"class.jxl::FilterPipeline"* %0, i64 0, i32 2, i64 %164, i32 2
  store %"class.jxl::Image3"* %6, %"class.jxl::Image3"** %165, align 8
  %166 = getelementptr inbounds %"class.jxl::FilterPipeline", %"class.jxl::FilterPipeline"* %0, i64 0, i32 2, i64 %164, i32 5
  %167 = bitcast %"class.jxl::Rect"* %166 to i8*
  %168 = bitcast %"class.jxl::Rect"* %7 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %167, i8* align 8 %168, i64 32, i1 false) #14
  %169 = getelementptr inbounds %"class.jxl::FilterPipeline", %"class.jxl::FilterPipeline"* %0, i64 0, i32 2, i64 %164, i32 9
  store void (%"struct.jxl::FilterPipeline::FilterStep"*, %"struct.jxl::FilterRows"*, i64)* @_ZZN3jxl14FilterPipeline10FilterStep9SetOutputEPNS_6Image3IfEERKNS_4RectEENUlRKS1_PNS_10FilterRowsElE_8__invokeES9_SB_l, void (%"struct.jxl::FilterPipeline::FilterStep"*, %"struct.jxl::FilterRows"*, i64)** %169, align 8
  %170 = load i64, i64* %14, align 8
  %171 = trunc i64 %170 to i32
  %172 = add i32 %171, -1
  %173 = icmp sgt i32 %172, -1
  br i1 %173, label %174, label %176

174:                                              ; preds = %162
  %175 = sext i32 %172 to i64
  br label %187

176:                                              ; preds = %187, %162
  %177 = phi i64 [ 0, %162 ], [ %194, %187 ]
  %178 = getelementptr inbounds %"class.jxl::FilterPipeline", %"class.jxl::FilterPipeline"* %0, i64 0, i32 5
  store i64 %177, i64* %178, align 8
  %179 = load i32, i32* %9, align 4
  %180 = zext i32 %179 to i64
  %181 = getelementptr inbounds [4 x i64], [4 x i64]* @_ZZNK3jxl10LoopFilter7PaddingEvE20padding_per_epf_iter, i64 0, i64 %180
  %182 = load i64, i64* %181, align 8
  %183 = load i8, i8* %25, align 1, !range !311
  %184 = zext i8 %183 to i64
  %185 = add i64 %182, %184
  %186 = icmp eq i64 %177, %185
  br i1 %186, label %201, label %198

187:                                              ; preds = %174, %187
  %188 = phi i64 [ %175, %174 ], [ %197, %187 ]
  %189 = phi i32 [ %172, %174 ], [ %195, %187 ]
  %190 = phi i64 [ 0, %174 ], [ %194, %187 ]
  %191 = getelementptr inbounds %"class.jxl::FilterPipeline", %"class.jxl::FilterPipeline"* %0, i64 0, i32 2, i64 %188, i32 11
  store i64 %190, i64* %191, align 8
  %192 = getelementptr inbounds %"class.jxl::FilterPipeline", %"class.jxl::FilterPipeline"* %0, i64 0, i32 2, i64 %188, i32 10, i32 1
  %193 = load i64, i64* %192, align 8
  %194 = add i64 %193, %190
  %195 = add nsw i32 %189, -1
  %196 = icmp sgt i32 %189, 0
  %197 = add nsw i64 %188, -1
  br i1 %196, label %187, label %176

198:                                              ; preds = %176
  %199 = tail call zeroext i1 (i8*, ...) @_ZN3jxl5DebugEPKcz(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str, i64 0, i64 0), i8* getelementptr inbounds ([44 x i8], [44 x i8]* @.str.1, i64 0, i64 0), i32 531, i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.2, i64 0, i64 0)) #14
  %200 = tail call zeroext i1 @_ZN3jxl5AbortEv() #16
  unreachable

201:                                              ; preds = %176
  %202 = icmp ult i64 %177, 9
  br i1 %202, label %206, label %203

203:                                              ; preds = %201
  %204 = tail call zeroext i1 (i8*, ...) @_ZN3jxl5DebugEPKcz(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str, i64 0, i64 0), i8* getelementptr inbounds ([44 x i8], [44 x i8]* @.str.1, i64 0, i64 0), i32 532, i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str.3, i64 0, i64 0)) #14
  %205 = tail call zeroext i1 @_ZN3jxl5AbortEv() #16
  unreachable

206:                                              ; preds = %201
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN3jxl12ComputeSigmaERKNS_4RectEPNS_18PassesDecoderStateE(%"class.jxl::Rect"* nocapture readonly dereferenceable(32), %"struct.jxl::PassesDecoderState"* nocapture readonly) local_unnamed_addr #12 {
  %3 = getelementptr inbounds %"struct.jxl::PassesDecoderState", %"struct.jxl::PassesDecoderState"* %1, i64 0, i32 1
  %4 = load %"struct.jxl::PassesSharedState"*, %"struct.jxl::PassesSharedState"** %3, align 8
  %5 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %4, i64 0, i32 1, i32 26, i32 11
  %6 = load i32, i32* %5, align 4
  %7 = icmp eq i32 %6, 0
  br i1 %7, label %8, label %11

8:                                                ; preds = %2
  %9 = tail call zeroext i1 (i8*, ...) @_ZN3jxl5DebugEPKcz(i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.4, i64 0, i64 0), i8* getelementptr inbounds ([44 x i8], [44 x i8]* @.str.1, i64 0, i64 0), i32 561, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.5, i64 0, i64 0)) #14
  %10 = tail call zeroext i1 @_ZN3jxl5AbortEv() #16
  unreachable

11:                                               ; preds = %2
  %12 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %4, i64 0, i32 5, i32 5
  %13 = load float, float* %12, align 4
  %14 = getelementptr inbounds %"struct.jxl::PassesDecoderState", %"struct.jxl::PassesDecoderState"* %1, i64 0, i32 25, i32 1, i32 0, i32 4
  %15 = load i64, i64* %14, align 8
  %16 = lshr i64 %15, 2
  %17 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %4, i64 0, i32 7, i32 0, i32 4
  %18 = load i64, i64* %17, align 8
  %19 = getelementptr inbounds %"class.jxl::Rect", %"class.jxl::Rect"* %0, i64 0, i32 3
  %20 = load i64, i64* %19, align 8
  %21 = icmp eq i64 %20, 0
  br i1 %21, label %32, label %22

22:                                               ; preds = %11
  %23 = getelementptr inbounds %"class.jxl::Rect", %"class.jxl::Rect"* %0, i64 0, i32 1
  %24 = getelementptr inbounds %"struct.jxl::PassesDecoderState", %"struct.jxl::PassesDecoderState"* %1, i64 0, i32 25, i32 1, i32 0, i32 5, i32 0, i32 0, i32 0
  %25 = getelementptr inbounds %"class.jxl::Rect", %"class.jxl::Rect"* %0, i64 0, i32 0
  %26 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %4, i64 0, i32 3, i32 0, i32 0, i32 5, i32 0, i32 0, i32 0
  %27 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %4, i64 0, i32 3, i32 0, i32 0, i32 4
  %28 = getelementptr inbounds %"class.jxl::Rect", %"class.jxl::Rect"* %0, i64 0, i32 2
  %29 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %4, i64 0, i32 1, i32 26, i32 22
  %30 = load i64, i64* %28, align 8
  %31 = shl nuw nsw i64 %16, 1
  br label %33

32:                                               ; preds = %83, %11
  ret void

33:                                               ; preds = %88, %22
  %34 = phi i64 [ %20, %22 ], [ %84, %88 ]
  %35 = phi i64 [ %30, %22 ], [ %85, %88 ]
  %36 = phi i64 [ %18, %22 ], [ %92, %88 ]
  %37 = phi %"struct.jxl::PassesSharedState"* [ %4, %22 ], [ %90, %88 ]
  %38 = phi i64 [ %15, %22 ], [ %89, %88 ]
  %39 = phi i64 [ 0, %22 ], [ %86, %88 ]
  %40 = load i64, i64* %23, align 8
  %41 = add i64 %40, %39
  %42 = load i8*, i8** %24, align 8
  %43 = mul i64 %38, %41
  %44 = getelementptr inbounds i8, i8* %42, i64 %43
  %45 = ptrtoint i8* %44 to i64
  %46 = and i64 %45, 63
  %47 = icmp eq i64 %46, 0
  tail call void @llvm.assume(i1 %47) #14
  %48 = bitcast i8* %44 to float*
  %49 = load i64, i64* %25, align 8
  %50 = getelementptr inbounds float, float* %48, i64 %49
  %51 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %37, i64 0, i32 7, i32 0, i32 5, i32 0, i32 0, i32 0
  %52 = load i8*, i8** %51, align 8
  %53 = mul i64 %36, %41
  %54 = getelementptr inbounds i8, i8* %52, i64 %53
  %55 = ptrtoint i8* %54 to i64
  %56 = and i64 %55, 63
  %57 = icmp eq i64 %56, 0
  tail call void @llvm.assume(i1 %57) #14
  %58 = getelementptr inbounds i8, i8* %54, i64 %49
  %59 = load i8*, i8** %26, align 8
  %60 = load i64, i64* %27, align 8
  %61 = mul i64 %60, %41
  %62 = getelementptr inbounds i8, i8* %59, i64 %61
  %63 = ptrtoint i8* %62 to i64
  %64 = and i64 %63, 63
  %65 = icmp eq i64 %64, 0
  tail call void @llvm.assume(i1 %65) #14
  %66 = getelementptr inbounds i8, i8* %62, i64 %49
  %67 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %37, i64 0, i32 6, i32 0, i32 5, i32 0, i32 0, i32 0
  %68 = load i8*, i8** %67, align 8
  %69 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %37, i64 0, i32 6, i32 0, i32 4
  %70 = load i64, i64* %69, align 8
  %71 = mul i64 %70, %41
  %72 = getelementptr inbounds i8, i8* %68, i64 %71
  %73 = ptrtoint i8* %72 to i64
  %74 = and i64 %73, 63
  %75 = icmp eq i64 %74, 0
  tail call void @llvm.assume(i1 %75) #14
  %76 = bitcast i8* %72 to i32*
  %77 = getelementptr inbounds i32, i32* %76, i64 %49
  %78 = icmp eq i64 %35, 0
  br i1 %78, label %83, label %79

79:                                               ; preds = %33
  %80 = getelementptr inbounds float, float* %50, i64 2
  br label %93

81:                                               ; preds = %320
  %82 = load i64, i64* %19, align 8
  br label %83

83:                                               ; preds = %81, %33
  %84 = phi i64 [ %82, %81 ], [ %34, %33 ]
  %85 = phi i64 [ %322, %81 ], [ 0, %33 ]
  %86 = add nuw i64 %39, 1
  %87 = icmp ult i64 %86, %84
  br i1 %87, label %88, label %32

88:                                               ; preds = %83
  %89 = load i64, i64* %14, align 8
  %90 = load %"struct.jxl::PassesSharedState"*, %"struct.jxl::PassesSharedState"** %3, align 8
  %91 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %90, i64 0, i32 7, i32 0, i32 4
  %92 = load i64, i64* %91, align 8
  br label %33

93:                                               ; preds = %79, %320
  %94 = phi i64 [ 0, %79 ], [ %321, %320 ]
  %95 = getelementptr inbounds i8, i8* %66, i64 %94
  %96 = load i8, i8* %95, align 1
  %97 = lshr i8 %96, 1
  %98 = and i8 %96, 1
  %99 = zext i8 %97 to i64
  %100 = getelementptr inbounds [27 x i8], [27 x i8]* @_ZZNK3jxl10AcStrategy16covered_blocks_xEvE4kLut, i64 0, i64 %99
  %101 = load i8, i8* %100, align 1
  %102 = zext i8 %101 to i64
  %103 = icmp eq i8 %98, 0
  br i1 %103, label %320, label %104

104:                                              ; preds = %93
  %105 = load float, float* %29, align 8
  %106 = getelementptr inbounds i32, i32* %77, i64 %94
  %107 = load i32, i32* %106, align 4
  %108 = sitofp i32 %107 to float
  %109 = fmul float %13, %108
  %110 = fmul float %109, 0xBFF2BEC340000000
  %111 = fdiv float %105, %110
  %112 = getelementptr inbounds [27 x i8], [27 x i8]* @_ZZNK3jxl10AcStrategy16covered_blocks_yEvE4kLut, i64 0, i64 %99
  %113 = load i8, i8* %112, align 1
  %114 = zext i8 %113 to i64
  br label %115

115:                                              ; preds = %131, %104
  %116 = phi i64 [ 0, %104 ], [ %132, %131 ]
  %117 = mul i64 %116, %18
  %118 = add nuw nsw i64 %116, 2
  %119 = mul i64 %118, %16
  %120 = add i64 %119, 2
  br label %134

121:                                              ; preds = %131
  %122 = load i64, i64* %25, align 8
  %123 = sub i64 0, %122
  %124 = icmp eq i64 %94, %123
  br i1 %124, label %125, label %203

125:                                              ; preds = %121
  %126 = add nsw i64 %114, -1
  %127 = and i64 %114, 3
  %128 = icmp ult i64 %126, 3
  br i1 %128, label %185, label %129

129:                                              ; preds = %125
  %130 = sub nsw i64 %114, %127
  br label %151

131:                                              ; preds = %134
  %132 = add nuw nsw i64 %116, 1
  %133 = icmp ult i64 %132, %114
  br i1 %133, label %115, label %121

134:                                              ; preds = %115, %134
  %135 = phi i64 [ 0, %115 ], [ %149, %134 ]
  %136 = add i64 %135, %94
  %137 = add i64 %136, %117
  %138 = getelementptr inbounds i8, i8* %58, i64 %137
  %139 = load i8, i8* %138, align 1
  %140 = zext i8 %139 to i64
  %141 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %4, i64 0, i32 1, i32 26, i32 14, i64 %140
  %142 = load float, float* %141, align 4
  %143 = fmul float %111, %142
  %144 = fcmp olt float %143, 0xBF1A36E2E0000000
  %145 = select i1 %144, float %143, float 0xBF1A36E2E0000000
  %146 = fdiv float 1.000000e+00, %145
  %147 = add i64 %120, %136
  %148 = getelementptr inbounds float, float* %50, i64 %147
  store float %146, float* %148, align 4
  %149 = add nuw nsw i64 %135, 1
  %150 = icmp ult i64 %149, %102
  br i1 %150, label %134, label %131

151:                                              ; preds = %151, %129
  %152 = phi i64 [ 0, %129 ], [ %182, %151 ]
  %153 = phi i64 [ %130, %129 ], [ %183, %151 ]
  %154 = or i64 %152, 2
  %155 = mul i64 %154, %16
  %156 = getelementptr inbounds float, float* %80, i64 %155
  %157 = getelementptr inbounds float, float* %156, i64 -1
  %158 = bitcast float* %156 to i32*
  %159 = load i32, i32* %158, align 4
  %160 = bitcast float* %157 to i32*
  store i32 %159, i32* %160, align 4
  %161 = or i64 %152, 3
  %162 = mul i64 %161, %16
  %163 = getelementptr inbounds float, float* %80, i64 %162
  %164 = getelementptr inbounds float, float* %163, i64 -1
  %165 = bitcast float* %163 to i32*
  %166 = load i32, i32* %165, align 4
  %167 = bitcast float* %164 to i32*
  store i32 %166, i32* %167, align 4
  %168 = add nuw nsw i64 %152, 4
  %169 = mul i64 %168, %16
  %170 = getelementptr inbounds float, float* %80, i64 %169
  %171 = getelementptr inbounds float, float* %170, i64 -1
  %172 = bitcast float* %170 to i32*
  %173 = load i32, i32* %172, align 4
  %174 = bitcast float* %171 to i32*
  store i32 %173, i32* %174, align 4
  %175 = add nuw nsw i64 %152, 5
  %176 = mul i64 %175, %16
  %177 = getelementptr inbounds float, float* %80, i64 %176
  %178 = getelementptr inbounds float, float* %177, i64 -1
  %179 = bitcast float* %177 to i32*
  %180 = load i32, i32* %179, align 4
  %181 = bitcast float* %178 to i32*
  store i32 %180, i32* %181, align 4
  %182 = add nuw nsw i64 %152, 4
  %183 = add i64 %153, -4
  %184 = icmp eq i64 %183, 0
  br i1 %184, label %185, label %151

185:                                              ; preds = %151, %125
  %186 = phi i64 [ 0, %125 ], [ %182, %151 ]
  %187 = icmp eq i64 %127, 0
  br i1 %187, label %201, label %188

188:                                              ; preds = %185, %188
  %189 = phi i64 [ %198, %188 ], [ %186, %185 ]
  %190 = phi i64 [ %199, %188 ], [ %127, %185 ]
  %191 = add nuw nsw i64 %189, 2
  %192 = mul i64 %191, %16
  %193 = getelementptr inbounds float, float* %80, i64 %192
  %194 = getelementptr inbounds float, float* %193, i64 -1
  %195 = bitcast float* %193 to i32*
  %196 = load i32, i32* %195, align 4
  %197 = bitcast float* %194 to i32*
  store i32 %196, i32* %197, align 4
  %198 = add nuw nsw i64 %189, 1
  %199 = add i64 %190, -1
  %200 = icmp eq i64 %199, 0
  br i1 %200, label %201, label %188, !llvm.loop !1674

201:                                              ; preds = %188, %185
  %202 = load i64, i64* %25, align 8
  br label %203

203:                                              ; preds = %201, %121
  %204 = phi i64 [ %202, %201 ], [ %122, %121 ]
  %205 = add i64 %94, %102
  %206 = add i64 %205, %204
  %207 = load %"struct.jxl::PassesSharedState"*, %"struct.jxl::PassesSharedState"** %3, align 8
  %208 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %207, i64 0, i32 2, i32 8
  %209 = load i64, i64* %208, align 8
  %210 = icmp eq i64 %206, %209
  br i1 %210, label %211, label %275

211:                                              ; preds = %203
  %212 = getelementptr inbounds float, float* %80, i64 %94
  %213 = getelementptr inbounds float, float* %212, i64 %102
  %214 = add nsw i64 %114, -1
  %215 = and i64 %114, 3
  %216 = icmp ult i64 %214, 3
  br i1 %216, label %253, label %217

217:                                              ; preds = %211
  %218 = sub nsw i64 %114, %215
  br label %219

219:                                              ; preds = %219, %217
  %220 = phi i64 [ 0, %217 ], [ %250, %219 ]
  %221 = phi i64 [ %218, %217 ], [ %251, %219 ]
  %222 = or i64 %220, 2
  %223 = mul i64 %222, %16
  %224 = getelementptr inbounds float, float* %213, i64 %223
  %225 = getelementptr inbounds float, float* %224, i64 -1
  %226 = bitcast float* %225 to i32*
  %227 = load i32, i32* %226, align 4
  %228 = bitcast float* %224 to i32*
  store i32 %227, i32* %228, align 4
  %229 = or i64 %220, 3
  %230 = mul i64 %229, %16
  %231 = getelementptr inbounds float, float* %213, i64 %230
  %232 = getelementptr inbounds float, float* %231, i64 -1
  %233 = bitcast float* %232 to i32*
  %234 = load i32, i32* %233, align 4
  %235 = bitcast float* %231 to i32*
  store i32 %234, i32* %235, align 4
  %236 = add nuw nsw i64 %220, 4
  %237 = mul i64 %236, %16
  %238 = getelementptr inbounds float, float* %213, i64 %237
  %239 = getelementptr inbounds float, float* %238, i64 -1
  %240 = bitcast float* %239 to i32*
  %241 = load i32, i32* %240, align 4
  %242 = bitcast float* %238 to i32*
  store i32 %241, i32* %242, align 4
  %243 = add nuw nsw i64 %220, 5
  %244 = mul i64 %243, %16
  %245 = getelementptr inbounds float, float* %213, i64 %244
  %246 = getelementptr inbounds float, float* %245, i64 -1
  %247 = bitcast float* %246 to i32*
  %248 = load i32, i32* %247, align 4
  %249 = bitcast float* %245 to i32*
  store i32 %248, i32* %249, align 4
  %250 = add nuw nsw i64 %220, 4
  %251 = add i64 %221, -4
  %252 = icmp eq i64 %251, 0
  br i1 %252, label %253, label %219

253:                                              ; preds = %219, %211
  %254 = phi i64 [ 0, %211 ], [ %250, %219 ]
  %255 = icmp eq i64 %215, 0
  br i1 %255, label %269, label %256

256:                                              ; preds = %253, %256
  %257 = phi i64 [ %266, %256 ], [ %254, %253 ]
  %258 = phi i64 [ %267, %256 ], [ %215, %253 ]
  %259 = add nuw nsw i64 %257, 2
  %260 = mul i64 %259, %16
  %261 = getelementptr inbounds float, float* %213, i64 %260
  %262 = getelementptr inbounds float, float* %261, i64 -1
  %263 = bitcast float* %262 to i32*
  %264 = load i32, i32* %263, align 4
  %265 = bitcast float* %261 to i32*
  store i32 %264, i32* %265, align 4
  %266 = add nuw nsw i64 %257, 1
  %267 = add i64 %258, -1
  %268 = icmp eq i64 %267, 0
  br i1 %268, label %269, label %256, !llvm.loop !1676

269:                                              ; preds = %256, %253
  %270 = load i64, i64* %25, align 8
  %271 = load %"struct.jxl::PassesSharedState"*, %"struct.jxl::PassesSharedState"** %3, align 8
  %272 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %271, i64 0, i32 2, i32 8
  %273 = load i64, i64* %272, align 8
  %274 = add i64 %205, %270
  br label %275

275:                                              ; preds = %269, %203
  %276 = phi i64 [ %274, %269 ], [ %206, %203 ]
  %277 = phi i64 [ %273, %269 ], [ %209, %203 ]
  %278 = phi %"struct.jxl::PassesSharedState"* [ %271, %269 ], [ %207, %203 ]
  %279 = phi i64 [ %270, %269 ], [ %204, %203 ]
  %280 = sub i64 0, %279
  %281 = icmp eq i64 %94, %280
  %282 = add i64 %94, 2
  %283 = select i1 %281, i64 1, i64 %282
  %284 = icmp eq i64 %276, %277
  %285 = zext i1 %284 to i64
  %286 = add i64 %205, 2
  %287 = sub i64 %286, %283
  %288 = add i64 %287, %285
  %289 = load i64, i64* %23, align 8
  %290 = sub i64 0, %289
  %291 = icmp eq i64 %39, %290
  br i1 %291, label %292, label %301

292:                                              ; preds = %275
  %293 = getelementptr inbounds float, float* %50, i64 %283
  %294 = shl i64 %288, 2
  %295 = getelementptr inbounds float, float* %293, i64 %16
  %296 = bitcast float* %295 to i8*
  %297 = getelementptr inbounds float, float* %293, i64 %31
  %298 = bitcast float* %297 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %296, i8* align 4 %298, i64 %294, i1 false)
  %299 = load i64, i64* %23, align 8
  %300 = load %"struct.jxl::PassesSharedState"*, %"struct.jxl::PassesSharedState"** %3, align 8
  br label %301

301:                                              ; preds = %292, %275
  %302 = phi %"struct.jxl::PassesSharedState"* [ %300, %292 ], [ %278, %275 ]
  %303 = phi i64 [ %299, %292 ], [ %289, %275 ]
  %304 = add i64 %39, %114
  %305 = add i64 %304, %303
  %306 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %302, i64 0, i32 2, i32 9
  %307 = load i64, i64* %306, align 8
  %308 = icmp eq i64 %305, %307
  br i1 %308, label %309, label %320

309:                                              ; preds = %301
  %310 = getelementptr inbounds float, float* %50, i64 %283
  %311 = add nuw nsw i64 %114, 2
  %312 = add nuw nsw i64 %114, 1
  %313 = shl i64 %288, 2
  %314 = mul i64 %311, %16
  %315 = getelementptr inbounds float, float* %310, i64 %314
  %316 = bitcast float* %315 to i8*
  %317 = mul i64 %312, %16
  %318 = getelementptr inbounds float, float* %310, i64 %317
  %319 = bitcast float* %318 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %316, i8* align 4 %319, i64 %313, i1 false)
  br label %320

320:                                              ; preds = %309, %93, %301
  %321 = add nuw i64 %94, 1
  %322 = load i64, i64* %28, align 8
  %323 = icmp ult i64 %321, %322
  br i1 %323, label %93, label %81
}

; Function Attrs: nounwind ssp uwtable
define hidden %"class.jxl::FilterPipeline"* @_ZN3jxl21PrepareFilterPipelineEPNS_18PassesDecoderStateERKNS_4RectERKNS_6Image3IfEES4_mmPS6_S4_(%"struct.jxl::PassesDecoderState"* nocapture readonly, %"class.jxl::Rect"* dereferenceable(32), %"class.jxl::Image3"* dereferenceable(96), %"class.jxl::Rect"* dereferenceable(32), i64, i64, %"class.jxl::Image3"* noalias, %"class.jxl::Rect"* dereferenceable(32)) local_unnamed_addr #12 {
  %9 = getelementptr inbounds %"struct.jxl::PassesDecoderState", %"struct.jxl::PassesDecoderState"* %0, i64 0, i32 1
  %10 = load %"struct.jxl::PassesSharedState"*, %"struct.jxl::PassesSharedState"** %9, align 8
  %11 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %10, i64 0, i32 1, i32 26
  %12 = getelementptr inbounds %"struct.jxl::PassesDecoderState", %"struct.jxl::PassesDecoderState"* %0, i64 0, i32 24, i32 0, i32 0
  %13 = load %"class.jxl::FilterPipeline"*, %"class.jxl::FilterPipeline"** %12, align 8
  %14 = getelementptr inbounds %"class.jxl::FilterPipeline", %"class.jxl::FilterPipeline"* %13, i64 %5
  %15 = load atomic i32, i32* getelementptr inbounds (%"struct.hwy::ChosenTarget", %"struct.hwy::ChosenTarget"* @_ZN3hwy13chosen_targetE, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0) seq_cst, align 4
  %16 = and i32 %15, 2225
  %17 = tail call i32 @llvm.cttz.i32(i32 %16, i1 true) #14, !range !1677
  %18 = zext i32 %17 to i64
  %19 = getelementptr inbounds [12 x void (%"class.jxl::FilterPipeline"*, %"struct.jxl::LoopFilter"*, %"class.jxl::Image3"*, %"class.jxl::Rect"*, %"class.jxl::Rect"*, i64, %"class.jxl::Image3"*, %"class.jxl::Rect"*)*], [12 x void (%"class.jxl::FilterPipeline"*, %"struct.jxl::LoopFilter"*, %"class.jxl::Image3"*, %"class.jxl::Rect"*, %"class.jxl::Rect"*, i64, %"class.jxl::Image3"*, %"class.jxl::Rect"*)*]* @_ZN3jxlL38FilterPipelineInitHighwayDispatchTableE, i64 0, i64 %18
  %20 = load void (%"class.jxl::FilterPipeline"*, %"struct.jxl::LoopFilter"*, %"class.jxl::Image3"*, %"class.jxl::Rect"*, %"class.jxl::Rect"*, i64, %"class.jxl::Image3"*, %"class.jxl::Rect"*)*, void (%"class.jxl::FilterPipeline"*, %"struct.jxl::LoopFilter"*, %"class.jxl::Image3"*, %"class.jxl::Rect"*, %"class.jxl::Rect"*, i64, %"class.jxl::Image3"*, %"class.jxl::Rect"*)** %19, align 8
  tail call void %20(%"class.jxl::FilterPipeline"* %14, %"struct.jxl::LoopFilter"* dereferenceable(144) %11, %"class.jxl::Image3"* dereferenceable(96) %2, %"class.jxl::Rect"* dereferenceable(32) %3, %"class.jxl::Rect"* dereferenceable(32) %1, i64 %4, %"class.jxl::Image3"* %6, %"class.jxl::Rect"* dereferenceable(32) %7) #14
  ret %"class.jxl::FilterPipeline"* %14
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN3jxl12ApplyFiltersEPNS_18PassesDecoderStateERKNS_4RectERKNS_6Image3IfEES4_mPS6_S4_(%"struct.jxl::PassesDecoderState"*, %"class.jxl::Rect"* dereferenceable(32), %"class.jxl::Image3"* dereferenceable(96), %"class.jxl::Rect"* dereferenceable(32), i64, %"class.jxl::Image3"* noalias, %"class.jxl::Rect"* dereferenceable(32)) local_unnamed_addr #12 {
  %8 = getelementptr inbounds %"class.jxl::Rect", %"class.jxl::Rect"* %3, i64 0, i32 3
  %9 = load i64, i64* %8, align 8
  %10 = getelementptr inbounds %"struct.jxl::PassesDecoderState", %"struct.jxl::PassesDecoderState"* %0, i64 0, i32 1
  %11 = load %"struct.jxl::PassesSharedState"*, %"struct.jxl::PassesSharedState"** %10, align 8, !noalias !1678
  %12 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %11, i64 0, i32 1, i32 26
  %13 = getelementptr inbounds %"struct.jxl::PassesDecoderState", %"struct.jxl::PassesDecoderState"* %0, i64 0, i32 24, i32 0, i32 0
  %14 = load %"class.jxl::FilterPipeline"*, %"class.jxl::FilterPipeline"** %13, align 8, !noalias !1678
  %15 = getelementptr inbounds %"class.jxl::FilterPipeline", %"class.jxl::FilterPipeline"* %14, i64 %4
  %16 = load atomic i32, i32* getelementptr inbounds (%"struct.hwy::ChosenTarget", %"struct.hwy::ChosenTarget"* @_ZN3hwy13chosen_targetE, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0) seq_cst, align 4, !noalias !1678
  %17 = and i32 %16, 2225
  %18 = tail call i32 @llvm.cttz.i32(i32 %17, i1 true) #14, !range !1677
  %19 = zext i32 %18 to i64
  %20 = getelementptr inbounds [12 x void (%"class.jxl::FilterPipeline"*, %"struct.jxl::LoopFilter"*, %"class.jxl::Image3"*, %"class.jxl::Rect"*, %"class.jxl::Rect"*, i64, %"class.jxl::Image3"*, %"class.jxl::Rect"*)*], [12 x void (%"class.jxl::FilterPipeline"*, %"struct.jxl::LoopFilter"*, %"class.jxl::Image3"*, %"class.jxl::Rect"*, %"class.jxl::Rect"*, i64, %"class.jxl::Image3"*, %"class.jxl::Rect"*)*]* @_ZN3jxlL38FilterPipelineInitHighwayDispatchTableE, i64 0, i64 %19
  %21 = load void (%"class.jxl::FilterPipeline"*, %"struct.jxl::LoopFilter"*, %"class.jxl::Image3"*, %"class.jxl::Rect"*, %"class.jxl::Rect"*, i64, %"class.jxl::Image3"*, %"class.jxl::Rect"*)*, void (%"class.jxl::FilterPipeline"*, %"struct.jxl::LoopFilter"*, %"class.jxl::Image3"*, %"class.jxl::Rect"*, %"class.jxl::Rect"*, i64, %"class.jxl::Image3"*, %"class.jxl::Rect"*)** %20, align 8, !noalias !1678
  tail call void %21(%"class.jxl::FilterPipeline"* %15, %"struct.jxl::LoopFilter"* dereferenceable(144) %12, %"class.jxl::Image3"* dereferenceable(96) %2, %"class.jxl::Rect"* dereferenceable(32) %3, %"class.jxl::Rect"* dereferenceable(32) %1, i64 %9, %"class.jxl::Image3"* %5, %"class.jxl::Rect"* dereferenceable(32) %6) #14
  %22 = load %"struct.jxl::PassesSharedState"*, %"struct.jxl::PassesSharedState"** %10, align 8
  %23 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %22, i64 0, i32 1, i32 26
  %24 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %22, i64 0, i32 1, i32 26, i32 11
  %25 = load i32, i32* %24, align 4
  %26 = zext i32 %25 to i64
  %27 = getelementptr inbounds [4 x i64], [4 x i64]* @_ZZNK3jxl10LoopFilter7PaddingEvE20padding_per_epf_iter, i64 0, i64 %26
  %28 = load i64, i64* %27, align 8
  %29 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %22, i64 0, i32 1, i32 26, i32 2
  %30 = load i8, i8* %29, align 1, !range !311
  %31 = zext i8 %30 to i64
  %32 = add i64 %28, %31
  %33 = sub i64 0, %32
  %34 = getelementptr inbounds %"class.jxl::Rect", %"class.jxl::Rect"* %1, i64 0, i32 3
  %35 = load i64, i64* %34, align 8
  %36 = add i64 %32, %35
  %37 = icmp sgt i64 %36, %33
  br i1 %37, label %38, label %40

38:                                               ; preds = %7
  %39 = getelementptr inbounds %"struct.jxl::PassesDecoderState", %"struct.jxl::PassesDecoderState"* %0, i64 0, i32 25
  br label %41

40:                                               ; preds = %41, %7
  ret void

41:                                               ; preds = %38, %41
  %42 = phi i64 [ %33, %38 ], [ %43, %41 ]
  tail call void @_ZN3jxl14FilterPipeline15ApplyFiltersRowERKNS_10LoopFilterERKNS_13FilterWeightsERKNS_4RectEl(%"class.jxl::FilterPipeline"* %15, %"struct.jxl::LoopFilter"* dereferenceable(144) %23, %"struct.jxl::FilterWeights"* dereferenceable(72) %39, %"class.jxl::Rect"* dereferenceable(32) %1, i64 %42) #14
  %43 = add nsw i64 %42, 1
  %44 = load i32, i32* %24, align 4
  %45 = zext i32 %44 to i64
  %46 = getelementptr inbounds [4 x i64], [4 x i64]* @_ZZNK3jxl10LoopFilter7PaddingEvE20padding_per_epf_iter, i64 0, i64 %45
  %47 = load i64, i64* %46, align 8
  %48 = load i8, i8* %29, align 1, !range !311
  %49 = zext i8 %48 to i64
  %50 = add i64 %47, %49
  %51 = load i64, i64* %34, align 8
  %52 = add i64 %50, %51
  %53 = icmp slt i64 %43, %52
  br i1 %53, label %41, label %40
}

declare void @_ZN3jxl14FilterPipeline15ApplyFiltersRowERKNS_10LoopFilterERKNS_13FilterWeightsERKNS_4RectEl(%"class.jxl::FilterPipeline"*, %"struct.jxl::LoopFilter"* dereferenceable(144), %"struct.jxl::FilterWeights"* dereferenceable(72), %"class.jxl::Rect"* dereferenceable(32), i64) local_unnamed_addr #4

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZZN3jxl14FilterPipeline10FilterStep8SetInputEPKNS_6Image3IfEERKNS_4RectES8_mENUlRKS1_PNS_10FilterRowsElE_8__invokeESA_SC_l(%"struct.jxl::FilterPipeline::FilterStep"* dereferenceable(176), %"struct.jxl::FilterRows"*, i64) #13 comdat align 2 {
  %4 = getelementptr inbounds %"struct.jxl::FilterPipeline::FilterStep", %"struct.jxl::FilterPipeline::FilterStep"* %0, i64 0, i32 6, i32 1
  %5 = load i64, i64* %4, align 8
  %6 = getelementptr inbounds %"struct.jxl::FilterPipeline::FilterStep", %"struct.jxl::FilterPipeline::FilterStep"* %0, i64 0, i32 4, i32 1
  %7 = load i64, i64* %6, align 8
  %8 = getelementptr inbounds %"struct.jxl::FilterPipeline::FilterStep", %"struct.jxl::FilterPipeline::FilterStep"* %0, i64 0, i32 0
  %9 = load %"class.jxl::Image3"*, %"class.jxl::Image3"** %8, align 8
  %10 = getelementptr inbounds %"struct.jxl::FilterPipeline::FilterStep", %"struct.jxl::FilterPipeline::FilterStep"* %0, i64 0, i32 4, i32 0
  %11 = load i64, i64* %10, align 8
  %12 = add i64 %11, -16
  %13 = getelementptr inbounds %"struct.jxl::FilterPipeline::FilterStep", %"struct.jxl::FilterPipeline::FilterStep"* %0, i64 0, i32 7
  %14 = load i64, i64* %13, align 8
  %15 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %9, i64 0, i32 0, i64 0, i32 0, i32 5, i32 0, i32 0, i32 0
  %16 = load i8*, i8** %15, align 8
  %17 = ptrtoint i8* %16 to i64
  %18 = and i64 %17, 63
  %19 = icmp eq i64 %18, 0
  tail call void @llvm.assume(i1 %19) #14
  %20 = bitcast %"struct.jxl::FilterRows"* %1 to i8**
  store i8* %16, i8** %20, align 8
  %21 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %9, i64 0, i32 0, i64 1, i32 0, i32 5, i32 0, i32 0, i32 0
  %22 = load i8*, i8** %21, align 8
  %23 = ptrtoint i8* %22 to i64
  %24 = and i64 %23, 63
  %25 = icmp eq i64 %24, 0
  tail call void @llvm.assume(i1 %25) #14
  %26 = getelementptr inbounds %"struct.jxl::FilterRows", %"struct.jxl::FilterRows"* %1, i64 0, i32 0, i64 1
  %27 = bitcast float** %26 to i8**
  store i8* %22, i8** %27, align 8
  %28 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %9, i64 0, i32 0, i64 2, i32 0, i32 5, i32 0, i32 0, i32 0
  %29 = load i8*, i8** %28, align 8
  %30 = ptrtoint i8* %29 to i64
  %31 = and i64 %30, 63
  %32 = icmp eq i64 %31, 0
  tail call void @llvm.assume(i1 %32) #14
  %33 = getelementptr inbounds %"struct.jxl::FilterRows", %"struct.jxl::FilterRows"* %1, i64 0, i32 0, i64 2
  %34 = bitcast float** %33 to i8**
  store i8* %29, i8** %34, align 8
  %35 = getelementptr inbounds %"struct.jxl::FilterRows", %"struct.jxl::FilterRows"* %1, i64 0, i32 4
  %36 = load i32, i32* %35, align 8
  %37 = sub i32 0, %36
  %38 = icmp slt i32 %36, %37
  br i1 %38, label %73, label %39

39:                                               ; preds = %3
  %40 = add i64 %5, %2
  %41 = shl i64 %14, 1
  %42 = sub i64 %7, %5
  %43 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %9, i64 0, i32 0, i64 0, i32 0, i32 4
  %44 = sext i32 %37 to i64
  br label %45

45:                                               ; preds = %60, %39
  %46 = phi i64 [ %69, %60 ], [ %44, %39 ]
  %47 = add i64 %40, %46
  %48 = icmp slt i64 %47, 0
  %49 = icmp sge i64 %47, %14
  %50 = or i1 %48, %49
  br i1 %50, label %51, label %60

51:                                               ; preds = %45, %51
  %52 = phi i1 [ %57, %51 ], [ %48, %45 ]
  %53 = phi i64 [ %56, %51 ], [ %47, %45 ]
  %54 = xor i64 %53, -1
  %55 = select i1 %52, i64 0, i64 %41
  %56 = add i64 %55, %54
  %57 = icmp slt i64 %56, 0
  %58 = icmp sge i64 %56, %14
  %59 = or i1 %57, %58
  br i1 %59, label %51, label %60

60:                                               ; preds = %51, %45
  %61 = phi i64 [ %47, %45 ], [ %56, %51 ]
  %62 = add i64 %42, %61
  %63 = load i64, i64* %43, align 8
  %64 = lshr i64 %63, 2
  %65 = mul i64 %64, %62
  %66 = add nsw i64 %12, %65
  %67 = add nsw i64 %46, 3
  %68 = getelementptr inbounds %"struct.jxl::FilterRows", %"struct.jxl::FilterRows"* %1, i64 0, i32 1, i64 %67
  store i64 %66, i64* %68, align 8
  %69 = add nsw i64 %46, 1
  %70 = load i32, i32* %35, align 8
  %71 = sext i32 %70 to i64
  %72 = icmp slt i64 %46, %71
  br i1 %72, label %45, label %73

73:                                               ; preds = %60, %3
  ret void
}

; Function Attrs: nounwind
declare void @llvm.assume(i1) #14

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZZN3jxl14FilterPipeline10FilterStep9SetOutputEPNS_6Image3IfEERKNS_4RectEENUlRKS1_PNS_10FilterRowsElE_8__invokeES9_SB_l(%"struct.jxl::FilterPipeline::FilterStep"* dereferenceable(176), %"struct.jxl::FilterRows"*, i64) #13 comdat align 2 {
  %4 = getelementptr inbounds %"struct.jxl::FilterPipeline::FilterStep", %"struct.jxl::FilterPipeline::FilterStep"* %0, i64 0, i32 2
  %5 = load %"class.jxl::Image3"*, %"class.jxl::Image3"** %4, align 8
  %6 = getelementptr inbounds %"struct.jxl::FilterPipeline::FilterStep", %"struct.jxl::FilterPipeline::FilterStep"* %0, i64 0, i32 5, i32 1
  %7 = load i64, i64* %6, align 8
  %8 = add i64 %7, %2
  %9 = getelementptr inbounds %"struct.jxl::FilterPipeline::FilterStep", %"struct.jxl::FilterPipeline::FilterStep"* %0, i64 0, i32 5, i32 0
  %10 = load i64, i64* %9, align 8
  %11 = add i64 %10, -16
  %12 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %5, i64 0, i32 0, i64 0, i32 0, i32 4
  %13 = load i64, i64* %12, align 8
  %14 = mul i64 %13, %8
  %15 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %5, i64 0, i32 0, i64 0, i32 0, i32 5, i32 0, i32 0, i32 0
  %16 = load i8*, i8** %15, align 8
  %17 = ptrtoint i8* %16 to i64
  %18 = and i64 %17, 63
  %19 = icmp eq i64 %18, 0
  tail call void @llvm.assume(i1 %19) #14
  %20 = getelementptr inbounds i8, i8* %16, i64 %14
  %21 = ptrtoint i8* %20 to i64
  %22 = and i64 %21, 63
  %23 = icmp eq i64 %22, 0
  tail call void @llvm.assume(i1 %23) #14
  %24 = bitcast i8* %20 to float*
  %25 = getelementptr inbounds float, float* %24, i64 %11
  %26 = getelementptr inbounds %"struct.jxl::FilterRows", %"struct.jxl::FilterRows"* %1, i64 0, i32 2, i64 0
  store float* %25, float** %26, align 8
  %27 = load i64, i64* %12, align 8
  %28 = mul i64 %27, %8
  %29 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %5, i64 0, i32 0, i64 1, i32 0, i32 5, i32 0, i32 0, i32 0
  %30 = load i8*, i8** %29, align 8
  %31 = ptrtoint i8* %30 to i64
  %32 = and i64 %31, 63
  %33 = icmp eq i64 %32, 0
  tail call void @llvm.assume(i1 %33) #14
  %34 = getelementptr inbounds i8, i8* %30, i64 %28
  %35 = ptrtoint i8* %34 to i64
  %36 = and i64 %35, 63
  %37 = icmp eq i64 %36, 0
  tail call void @llvm.assume(i1 %37) #14
  %38 = bitcast i8* %34 to float*
  %39 = getelementptr inbounds float, float* %38, i64 %11
  %40 = getelementptr inbounds %"struct.jxl::FilterRows", %"struct.jxl::FilterRows"* %1, i64 0, i32 2, i64 1
  store float* %39, float** %40, align 8
  %41 = load i64, i64* %12, align 8
  %42 = mul i64 %41, %8
  %43 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %5, i64 0, i32 0, i64 2, i32 0, i32 5, i32 0, i32 0, i32 0
  %44 = load i8*, i8** %43, align 8
  %45 = ptrtoint i8* %44 to i64
  %46 = and i64 %45, 63
  %47 = icmp eq i64 %46, 0
  tail call void @llvm.assume(i1 %47) #14
  %48 = getelementptr inbounds i8, i8* %44, i64 %42
  %49 = ptrtoint i8* %48 to i64
  %50 = and i64 %49, 63
  %51 = icmp eq i64 %50, 0
  tail call void @llvm.assume(i1 %51) #14
  %52 = bitcast i8* %48 to float*
  %53 = getelementptr inbounds float, float* %52, i64 %11
  %54 = getelementptr inbounds %"struct.jxl::FilterRows", %"struct.jxl::FilterRows"* %1, i64 0, i32 2, i64 2
  store float* %53, float** %54, align 8
  ret void
}

; Function Attrs: nounwind readnone speculatable
declare <8 x float> @llvm.fma.v8f32(<8 x float>, <8 x float>, <8 x float>) #15

; Function Attrs: nounwind readnone speculatable
declare float @llvm.fabs.f32(float) #15

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN3hwy13FunctionCacheIvJPN3jxl14FilterPipelineERKNS1_10LoopFilterERKNS1_6Image3IfEERKNS1_4RectESD_mPS8_SD_EE13ChooseAndCallIXadL_ZNS1_L38FilterPipelineInitHighwayDispatchTableEEEEEvS3_S6_SA_SD_SD_mSE_SD_(%"class.jxl::FilterPipeline"*, %"struct.jxl::LoopFilter"* dereferenceable(144), %"class.jxl::Image3"* dereferenceable(96), %"class.jxl::Rect"* dereferenceable(32), %"class.jxl::Rect"* dereferenceable(32), i64, %"class.jxl::Image3"*, %"class.jxl::Rect"* dereferenceable(32)) #12 align 2 {
  tail call void @_ZN3hwy12ChosenTarget6UpdateEv(%"struct.hwy::ChosenTarget"* nonnull @_ZN3hwy13chosen_targetE) #14
  %9 = load atomic i32, i32* getelementptr inbounds (%"struct.hwy::ChosenTarget", %"struct.hwy::ChosenTarget"* @_ZN3hwy13chosen_targetE, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0) seq_cst, align 4
  %10 = and i32 %9, 2225
  %11 = tail call i32 @llvm.cttz.i32(i32 %10, i1 true) #14, !range !1677
  %12 = zext i32 %11 to i64
  %13 = getelementptr inbounds [12 x void (%"class.jxl::FilterPipeline"*, %"struct.jxl::LoopFilter"*, %"class.jxl::Image3"*, %"class.jxl::Rect"*, %"class.jxl::Rect"*, i64, %"class.jxl::Image3"*, %"class.jxl::Rect"*)*], [12 x void (%"class.jxl::FilterPipeline"*, %"struct.jxl::LoopFilter"*, %"class.jxl::Image3"*, %"class.jxl::Rect"*, %"class.jxl::Rect"*, i64, %"class.jxl::Image3"*, %"class.jxl::Rect"*)*]* @_ZN3jxlL38FilterPipelineInitHighwayDispatchTableE, i64 0, i64 %12
  %14 = load void (%"class.jxl::FilterPipeline"*, %"struct.jxl::LoopFilter"*, %"class.jxl::Image3"*, %"class.jxl::Rect"*, %"class.jxl::Rect"*, i64, %"class.jxl::Image3"*, %"class.jxl::Rect"*)*, void (%"class.jxl::FilterPipeline"*, %"struct.jxl::LoopFilter"*, %"class.jxl::Image3"*, %"class.jxl::Rect"*, %"class.jxl::Rect"*, i64, %"class.jxl::Image3"*, %"class.jxl::Rect"*)** %13, align 8
  tail call void %14(%"class.jxl::FilterPipeline"* %0, %"struct.jxl::LoopFilter"* dereferenceable(144) %1, %"class.jxl::Image3"* dereferenceable(96) %2, %"class.jxl::Rect"* dereferenceable(32) %3, %"class.jxl::Rect"* dereferenceable(32) %4, i64 %5, %"class.jxl::Image3"* %6, %"class.jxl::Rect"* dereferenceable(32) %7) #14
  ret void
}

declare void @_ZN3hwy12ChosenTarget6UpdateEv(%"struct.hwy::ChosenTarget"*) local_unnamed_addr #4

; Function Attrs: nounwind readnone speculatable
declare i32 @llvm.cttz.i32(i32, i1 immarg) #15

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZZN3jxl14FilterPipeline10FilterStep22SetOutputCyclicStorageILm3EEEvPNS_6Image3IfEEmENUlRKS1_PNS_10FilterRowsElE_8__invokeES7_S9_l(%"struct.jxl::FilterPipeline::FilterStep"* dereferenceable(176), %"struct.jxl::FilterRows"*, i64) #13 comdat align 2 {
  %4 = getelementptr inbounds %"struct.jxl::FilterPipeline::FilterStep", %"struct.jxl::FilterPipeline::FilterStep"* %0, i64 0, i32 2
  %5 = load %"class.jxl::Image3"*, %"class.jxl::Image3"** %4, align 8
  %6 = getelementptr inbounds %"struct.jxl::FilterPipeline::FilterStep", %"struct.jxl::FilterPipeline::FilterStep"* %0, i64 0, i32 3
  %7 = load i64, i64* %6, align 8
  %8 = add i64 %2, 48
  %9 = urem i64 %8, 3
  %10 = add i64 %7, %9
  %11 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %5, i64 0, i32 0, i64 0, i32 0, i32 4
  %12 = load i64, i64* %11, align 8
  %13 = mul i64 %12, %10
  %14 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %5, i64 0, i32 0, i64 0, i32 0, i32 5, i32 0, i32 0, i32 0
  %15 = load i8*, i8** %14, align 8
  %16 = ptrtoint i8* %15 to i64
  %17 = and i64 %16, 63
  %18 = icmp eq i64 %17, 0
  tail call void @llvm.assume(i1 %18) #14
  %19 = getelementptr inbounds i8, i8* %15, i64 %13
  %20 = ptrtoint i8* %19 to i64
  %21 = and i64 %20, 63
  %22 = icmp eq i64 %21, 0
  tail call void @llvm.assume(i1 %22) #14
  %23 = getelementptr inbounds %"struct.jxl::FilterRows", %"struct.jxl::FilterRows"* %1, i64 0, i32 2, i64 0
  %24 = bitcast float** %23 to i8**
  store i8* %19, i8** %24, align 8
  %25 = load i64, i64* %11, align 8
  %26 = mul i64 %25, %10
  %27 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %5, i64 0, i32 0, i64 1, i32 0, i32 5, i32 0, i32 0, i32 0
  %28 = load i8*, i8** %27, align 8
  %29 = ptrtoint i8* %28 to i64
  %30 = and i64 %29, 63
  %31 = icmp eq i64 %30, 0
  tail call void @llvm.assume(i1 %31) #14
  %32 = getelementptr inbounds i8, i8* %28, i64 %26
  %33 = ptrtoint i8* %32 to i64
  %34 = and i64 %33, 63
  %35 = icmp eq i64 %34, 0
  tail call void @llvm.assume(i1 %35) #14
  %36 = getelementptr inbounds %"struct.jxl::FilterRows", %"struct.jxl::FilterRows"* %1, i64 0, i32 2, i64 1
  %37 = bitcast float** %36 to i8**
  store i8* %32, i8** %37, align 8
  %38 = load i64, i64* %11, align 8
  %39 = mul i64 %38, %10
  %40 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %5, i64 0, i32 0, i64 2, i32 0, i32 5, i32 0, i32 0, i32 0
  %41 = load i8*, i8** %40, align 8
  %42 = ptrtoint i8* %41 to i64
  %43 = and i64 %42, 63
  %44 = icmp eq i64 %43, 0
  tail call void @llvm.assume(i1 %44) #14
  %45 = getelementptr inbounds i8, i8* %41, i64 %39
  %46 = ptrtoint i8* %45 to i64
  %47 = and i64 %46, 63
  %48 = icmp eq i64 %47, 0
  tail call void @llvm.assume(i1 %48) #14
  %49 = getelementptr inbounds %"struct.jxl::FilterRows", %"struct.jxl::FilterRows"* %1, i64 0, i32 2, i64 2
  %50 = bitcast float** %49 to i8**
  store i8* %45, i8** %50, align 8
  ret void
}

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZZN3jxl14FilterPipeline10FilterStep21SetInputCyclicStorageILm3EEEvPKNS_6Image3IfEEmENUlRKS1_PNS_10FilterRowsElE_8__invokeES8_SA_l(%"struct.jxl::FilterPipeline::FilterStep"* dereferenceable(176), %"struct.jxl::FilterRows"*, i64) #13 comdat align 2 {
  %4 = getelementptr inbounds %"struct.jxl::FilterPipeline::FilterStep", %"struct.jxl::FilterPipeline::FilterStep"* %0, i64 0, i32 0
  %5 = load %"class.jxl::Image3"*, %"class.jxl::Image3"** %4, align 8
  %6 = getelementptr inbounds %"struct.jxl::FilterPipeline::FilterStep", %"struct.jxl::FilterPipeline::FilterStep"* %0, i64 0, i32 1
  %7 = load i64, i64* %6, align 8
  %8 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %5, i64 0, i32 0, i64 0, i32 0, i32 5, i32 0, i32 0, i32 0
  %9 = load i8*, i8** %8, align 8
  %10 = ptrtoint i8* %9 to i64
  %11 = and i64 %10, 63
  %12 = icmp eq i64 %11, 0
  tail call void @llvm.assume(i1 %12) #14
  %13 = bitcast %"struct.jxl::FilterRows"* %1 to i8**
  store i8* %9, i8** %13, align 8
  %14 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %5, i64 0, i32 0, i64 1, i32 0, i32 5, i32 0, i32 0, i32 0
  %15 = load i8*, i8** %14, align 8
  %16 = ptrtoint i8* %15 to i64
  %17 = and i64 %16, 63
  %18 = icmp eq i64 %17, 0
  tail call void @llvm.assume(i1 %18) #14
  %19 = getelementptr inbounds %"struct.jxl::FilterRows", %"struct.jxl::FilterRows"* %1, i64 0, i32 0, i64 1
  %20 = bitcast float** %19 to i8**
  store i8* %15, i8** %20, align 8
  %21 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %5, i64 0, i32 0, i64 2, i32 0, i32 5, i32 0, i32 0, i32 0
  %22 = load i8*, i8** %21, align 8
  %23 = ptrtoint i8* %22 to i64
  %24 = and i64 %23, 63
  %25 = icmp eq i64 %24, 0
  tail call void @llvm.assume(i1 %25) #14
  %26 = getelementptr inbounds %"struct.jxl::FilterRows", %"struct.jxl::FilterRows"* %1, i64 0, i32 0, i64 2
  %27 = bitcast float** %26 to i8**
  store i8* %22, i8** %27, align 8
  %28 = getelementptr inbounds %"struct.jxl::FilterRows", %"struct.jxl::FilterRows"* %1, i64 0, i32 4
  %29 = load i32, i32* %28, align 8
  %30 = sub i32 0, %29
  %31 = icmp slt i32 %29, %30
  br i1 %31, label %50, label %32

32:                                               ; preds = %3
  %33 = add i64 %2, 48
  %34 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %5, i64 0, i32 0, i64 0, i32 0, i32 4
  %35 = sext i32 %30 to i64
  br label %36

36:                                               ; preds = %36, %32
  %37 = phi i64 [ %46, %36 ], [ %35, %32 ]
  %38 = add i64 %33, %37
  %39 = urem i64 %38, 3
  %40 = add i64 %39, %7
  %41 = load i64, i64* %34, align 8
  %42 = lshr i64 %41, 2
  %43 = mul i64 %40, %42
  %44 = add nsw i64 %37, 3
  %45 = getelementptr inbounds %"struct.jxl::FilterRows", %"struct.jxl::FilterRows"* %1, i64 0, i32 1, i64 %44
  store i64 %43, i64* %45, align 8
  %46 = add nsw i64 %37, 1
  %47 = load i32, i32* %28, align 8
  %48 = sext i32 %47 to i64
  %49 = icmp slt i64 %37, %48
  br i1 %49, label %36, label %50

50:                                               ; preds = %36, %3
  ret void
}

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZZN3jxl14FilterPipeline10FilterStep22SetOutputCyclicStorageILm5EEEvPNS_6Image3IfEEmENUlRKS1_PNS_10FilterRowsElE_8__invokeES7_S9_l(%"struct.jxl::FilterPipeline::FilterStep"* dereferenceable(176), %"struct.jxl::FilterRows"*, i64) #13 comdat align 2 {
  %4 = getelementptr inbounds %"struct.jxl::FilterPipeline::FilterStep", %"struct.jxl::FilterPipeline::FilterStep"* %0, i64 0, i32 2
  %5 = load %"class.jxl::Image3"*, %"class.jxl::Image3"** %4, align 8
  %6 = getelementptr inbounds %"struct.jxl::FilterPipeline::FilterStep", %"struct.jxl::FilterPipeline::FilterStep"* %0, i64 0, i32 3
  %7 = load i64, i64* %6, align 8
  %8 = add i64 %2, 80
  %9 = urem i64 %8, 5
  %10 = add i64 %7, %9
  %11 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %5, i64 0, i32 0, i64 0, i32 0, i32 4
  %12 = load i64, i64* %11, align 8
  %13 = mul i64 %12, %10
  %14 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %5, i64 0, i32 0, i64 0, i32 0, i32 5, i32 0, i32 0, i32 0
  %15 = load i8*, i8** %14, align 8
  %16 = ptrtoint i8* %15 to i64
  %17 = and i64 %16, 63
  %18 = icmp eq i64 %17, 0
  tail call void @llvm.assume(i1 %18) #14
  %19 = getelementptr inbounds i8, i8* %15, i64 %13
  %20 = ptrtoint i8* %19 to i64
  %21 = and i64 %20, 63
  %22 = icmp eq i64 %21, 0
  tail call void @llvm.assume(i1 %22) #14
  %23 = getelementptr inbounds %"struct.jxl::FilterRows", %"struct.jxl::FilterRows"* %1, i64 0, i32 2, i64 0
  %24 = bitcast float** %23 to i8**
  store i8* %19, i8** %24, align 8
  %25 = load i64, i64* %11, align 8
  %26 = mul i64 %25, %10
  %27 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %5, i64 0, i32 0, i64 1, i32 0, i32 5, i32 0, i32 0, i32 0
  %28 = load i8*, i8** %27, align 8
  %29 = ptrtoint i8* %28 to i64
  %30 = and i64 %29, 63
  %31 = icmp eq i64 %30, 0
  tail call void @llvm.assume(i1 %31) #14
  %32 = getelementptr inbounds i8, i8* %28, i64 %26
  %33 = ptrtoint i8* %32 to i64
  %34 = and i64 %33, 63
  %35 = icmp eq i64 %34, 0
  tail call void @llvm.assume(i1 %35) #14
  %36 = getelementptr inbounds %"struct.jxl::FilterRows", %"struct.jxl::FilterRows"* %1, i64 0, i32 2, i64 1
  %37 = bitcast float** %36 to i8**
  store i8* %32, i8** %37, align 8
  %38 = load i64, i64* %11, align 8
  %39 = mul i64 %38, %10
  %40 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %5, i64 0, i32 0, i64 2, i32 0, i32 5, i32 0, i32 0, i32 0
  %41 = load i8*, i8** %40, align 8
  %42 = ptrtoint i8* %41 to i64
  %43 = and i64 %42, 63
  %44 = icmp eq i64 %43, 0
  tail call void @llvm.assume(i1 %44) #14
  %45 = getelementptr inbounds i8, i8* %41, i64 %39
  %46 = ptrtoint i8* %45 to i64
  %47 = and i64 %46, 63
  %48 = icmp eq i64 %47, 0
  tail call void @llvm.assume(i1 %48) #14
  %49 = getelementptr inbounds %"struct.jxl::FilterRows", %"struct.jxl::FilterRows"* %1, i64 0, i32 2, i64 2
  %50 = bitcast float** %49 to i8**
  store i8* %45, i8** %50, align 8
  ret void
}

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZZN3jxl14FilterPipeline10FilterStep21SetInputCyclicStorageILm5EEEvPKNS_6Image3IfEEmENUlRKS1_PNS_10FilterRowsElE_8__invokeES8_SA_l(%"struct.jxl::FilterPipeline::FilterStep"* dereferenceable(176), %"struct.jxl::FilterRows"*, i64) #13 comdat align 2 {
  %4 = getelementptr inbounds %"struct.jxl::FilterPipeline::FilterStep", %"struct.jxl::FilterPipeline::FilterStep"* %0, i64 0, i32 0
  %5 = load %"class.jxl::Image3"*, %"class.jxl::Image3"** %4, align 8
  %6 = getelementptr inbounds %"struct.jxl::FilterPipeline::FilterStep", %"struct.jxl::FilterPipeline::FilterStep"* %0, i64 0, i32 1
  %7 = load i64, i64* %6, align 8
  %8 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %5, i64 0, i32 0, i64 0, i32 0, i32 5, i32 0, i32 0, i32 0
  %9 = load i8*, i8** %8, align 8
  %10 = ptrtoint i8* %9 to i64
  %11 = and i64 %10, 63
  %12 = icmp eq i64 %11, 0
  tail call void @llvm.assume(i1 %12) #14
  %13 = bitcast %"struct.jxl::FilterRows"* %1 to i8**
  store i8* %9, i8** %13, align 8
  %14 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %5, i64 0, i32 0, i64 1, i32 0, i32 5, i32 0, i32 0, i32 0
  %15 = load i8*, i8** %14, align 8
  %16 = ptrtoint i8* %15 to i64
  %17 = and i64 %16, 63
  %18 = icmp eq i64 %17, 0
  tail call void @llvm.assume(i1 %18) #14
  %19 = getelementptr inbounds %"struct.jxl::FilterRows", %"struct.jxl::FilterRows"* %1, i64 0, i32 0, i64 1
  %20 = bitcast float** %19 to i8**
  store i8* %15, i8** %20, align 8
  %21 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %5, i64 0, i32 0, i64 2, i32 0, i32 5, i32 0, i32 0, i32 0
  %22 = load i8*, i8** %21, align 8
  %23 = ptrtoint i8* %22 to i64
  %24 = and i64 %23, 63
  %25 = icmp eq i64 %24, 0
  tail call void @llvm.assume(i1 %25) #14
  %26 = getelementptr inbounds %"struct.jxl::FilterRows", %"struct.jxl::FilterRows"* %1, i64 0, i32 0, i64 2
  %27 = bitcast float** %26 to i8**
  store i8* %22, i8** %27, align 8
  %28 = getelementptr inbounds %"struct.jxl::FilterRows", %"struct.jxl::FilterRows"* %1, i64 0, i32 4
  %29 = load i32, i32* %28, align 8
  %30 = sub i32 0, %29
  %31 = icmp slt i32 %29, %30
  br i1 %31, label %50, label %32

32:                                               ; preds = %3
  %33 = add i64 %2, 80
  %34 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %5, i64 0, i32 0, i64 0, i32 0, i32 4
  %35 = sext i32 %30 to i64
  br label %36

36:                                               ; preds = %36, %32
  %37 = phi i64 [ %46, %36 ], [ %35, %32 ]
  %38 = add i64 %33, %37
  %39 = urem i64 %38, 5
  %40 = add i64 %39, %7
  %41 = load i64, i64* %34, align 8
  %42 = lshr i64 %41, 2
  %43 = mul i64 %40, %42
  %44 = add nsw i64 %37, 3
  %45 = getelementptr inbounds %"struct.jxl::FilterRows", %"struct.jxl::FilterRows"* %1, i64 0, i32 1, i64 %44
  store i64 %43, i64* %45, align 8
  %46 = add nsw i64 %37, 1
  %47 = load i32, i32* %28, align 8
  %48 = sext i32 %47 to i64
  %49 = icmp slt i64 %37, %48
  br i1 %49, label %36, label %50

50:                                               ; preds = %36, %3
  ret void
}

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZZN3jxl14FilterPipeline10FilterStep22SetOutputCyclicStorageILm7EEEvPNS_6Image3IfEEmENUlRKS1_PNS_10FilterRowsElE_8__invokeES7_S9_l(%"struct.jxl::FilterPipeline::FilterStep"* dereferenceable(176), %"struct.jxl::FilterRows"*, i64) #13 comdat align 2 {
  %4 = getelementptr inbounds %"struct.jxl::FilterPipeline::FilterStep", %"struct.jxl::FilterPipeline::FilterStep"* %0, i64 0, i32 2
  %5 = load %"class.jxl::Image3"*, %"class.jxl::Image3"** %4, align 8
  %6 = getelementptr inbounds %"struct.jxl::FilterPipeline::FilterStep", %"struct.jxl::FilterPipeline::FilterStep"* %0, i64 0, i32 3
  %7 = load i64, i64* %6, align 8
  %8 = add i64 %2, 112
  %9 = urem i64 %8, 7
  %10 = add i64 %7, %9
  %11 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %5, i64 0, i32 0, i64 0, i32 0, i32 4
  %12 = load i64, i64* %11, align 8
  %13 = mul i64 %12, %10
  %14 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %5, i64 0, i32 0, i64 0, i32 0, i32 5, i32 0, i32 0, i32 0
  %15 = load i8*, i8** %14, align 8
  %16 = ptrtoint i8* %15 to i64
  %17 = and i64 %16, 63
  %18 = icmp eq i64 %17, 0
  tail call void @llvm.assume(i1 %18) #14
  %19 = getelementptr inbounds i8, i8* %15, i64 %13
  %20 = ptrtoint i8* %19 to i64
  %21 = and i64 %20, 63
  %22 = icmp eq i64 %21, 0
  tail call void @llvm.assume(i1 %22) #14
  %23 = getelementptr inbounds %"struct.jxl::FilterRows", %"struct.jxl::FilterRows"* %1, i64 0, i32 2, i64 0
  %24 = bitcast float** %23 to i8**
  store i8* %19, i8** %24, align 8
  %25 = load i64, i64* %11, align 8
  %26 = mul i64 %25, %10
  %27 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %5, i64 0, i32 0, i64 1, i32 0, i32 5, i32 0, i32 0, i32 0
  %28 = load i8*, i8** %27, align 8
  %29 = ptrtoint i8* %28 to i64
  %30 = and i64 %29, 63
  %31 = icmp eq i64 %30, 0
  tail call void @llvm.assume(i1 %31) #14
  %32 = getelementptr inbounds i8, i8* %28, i64 %26
  %33 = ptrtoint i8* %32 to i64
  %34 = and i64 %33, 63
  %35 = icmp eq i64 %34, 0
  tail call void @llvm.assume(i1 %35) #14
  %36 = getelementptr inbounds %"struct.jxl::FilterRows", %"struct.jxl::FilterRows"* %1, i64 0, i32 2, i64 1
  %37 = bitcast float** %36 to i8**
  store i8* %32, i8** %37, align 8
  %38 = load i64, i64* %11, align 8
  %39 = mul i64 %38, %10
  %40 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %5, i64 0, i32 0, i64 2, i32 0, i32 5, i32 0, i32 0, i32 0
  %41 = load i8*, i8** %40, align 8
  %42 = ptrtoint i8* %41 to i64
  %43 = and i64 %42, 63
  %44 = icmp eq i64 %43, 0
  tail call void @llvm.assume(i1 %44) #14
  %45 = getelementptr inbounds i8, i8* %41, i64 %39
  %46 = ptrtoint i8* %45 to i64
  %47 = and i64 %46, 63
  %48 = icmp eq i64 %47, 0
  tail call void @llvm.assume(i1 %48) #14
  %49 = getelementptr inbounds %"struct.jxl::FilterRows", %"struct.jxl::FilterRows"* %1, i64 0, i32 2, i64 2
  %50 = bitcast float** %49 to i8**
  store i8* %45, i8** %50, align 8
  ret void
}

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZZN3jxl14FilterPipeline10FilterStep21SetInputCyclicStorageILm7EEEvPKNS_6Image3IfEEmENUlRKS1_PNS_10FilterRowsElE_8__invokeES8_SA_l(%"struct.jxl::FilterPipeline::FilterStep"* dereferenceable(176), %"struct.jxl::FilterRows"*, i64) #13 comdat align 2 {
  %4 = getelementptr inbounds %"struct.jxl::FilterPipeline::FilterStep", %"struct.jxl::FilterPipeline::FilterStep"* %0, i64 0, i32 0
  %5 = load %"class.jxl::Image3"*, %"class.jxl::Image3"** %4, align 8
  %6 = getelementptr inbounds %"struct.jxl::FilterPipeline::FilterStep", %"struct.jxl::FilterPipeline::FilterStep"* %0, i64 0, i32 1
  %7 = load i64, i64* %6, align 8
  %8 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %5, i64 0, i32 0, i64 0, i32 0, i32 5, i32 0, i32 0, i32 0
  %9 = load i8*, i8** %8, align 8
  %10 = ptrtoint i8* %9 to i64
  %11 = and i64 %10, 63
  %12 = icmp eq i64 %11, 0
  tail call void @llvm.assume(i1 %12) #14
  %13 = bitcast %"struct.jxl::FilterRows"* %1 to i8**
  store i8* %9, i8** %13, align 8
  %14 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %5, i64 0, i32 0, i64 1, i32 0, i32 5, i32 0, i32 0, i32 0
  %15 = load i8*, i8** %14, align 8
  %16 = ptrtoint i8* %15 to i64
  %17 = and i64 %16, 63
  %18 = icmp eq i64 %17, 0
  tail call void @llvm.assume(i1 %18) #14
  %19 = getelementptr inbounds %"struct.jxl::FilterRows", %"struct.jxl::FilterRows"* %1, i64 0, i32 0, i64 1
  %20 = bitcast float** %19 to i8**
  store i8* %15, i8** %20, align 8
  %21 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %5, i64 0, i32 0, i64 2, i32 0, i32 5, i32 0, i32 0, i32 0
  %22 = load i8*, i8** %21, align 8
  %23 = ptrtoint i8* %22 to i64
  %24 = and i64 %23, 63
  %25 = icmp eq i64 %24, 0
  tail call void @llvm.assume(i1 %25) #14
  %26 = getelementptr inbounds %"struct.jxl::FilterRows", %"struct.jxl::FilterRows"* %1, i64 0, i32 0, i64 2
  %27 = bitcast float** %26 to i8**
  store i8* %22, i8** %27, align 8
  %28 = getelementptr inbounds %"struct.jxl::FilterRows", %"struct.jxl::FilterRows"* %1, i64 0, i32 4
  %29 = load i32, i32* %28, align 8
  %30 = sub i32 0, %29
  %31 = icmp slt i32 %29, %30
  br i1 %31, label %50, label %32

32:                                               ; preds = %3
  %33 = add i64 %2, 112
  %34 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %5, i64 0, i32 0, i64 0, i32 0, i32 4
  %35 = sext i32 %30 to i64
  br label %36

36:                                               ; preds = %36, %32
  %37 = phi i64 [ %46, %36 ], [ %35, %32 ]
  %38 = add i64 %33, %37
  %39 = urem i64 %38, 7
  %40 = add i64 %39, %7
  %41 = load i64, i64* %34, align 8
  %42 = lshr i64 %41, 2
  %43 = mul i64 %40, %42
  %44 = add nsw i64 %37, 3
  %45 = getelementptr inbounds %"struct.jxl::FilterRows", %"struct.jxl::FilterRows"* %1, i64 0, i32 1, i64 %44
  store i64 %43, i64* %45, align 8
  %46 = add nsw i64 %37, 1
  %47 = load i32, i32* %28, align 8
  %48 = sext i32 %47 to i64
  %49 = icmp slt i64 %37, %48
  br i1 %49, label %36, label %50

50:                                               ; preds = %36, %3
  ret void
}

; Function Attrs: nounwind readnone speculatable
declare <16 x float> @llvm.fma.v16f32(<16 x float>, <16 x float>, <16 x float>) #15

; Function Attrs: nounwind readnone speculatable
declare <4 x float> @llvm.fabs.v4f32(<4 x float>) #15

; Function Attrs: nounwind readnone speculatable
declare <2 x float> @llvm.fabs.v2f32(<2 x float>) #15

attributes #0 = { nofree norecurse nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="128" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+sse4.1,+ssse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="128" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+sse4.1,+ssse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+sse4.1,+ssse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="256" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+avx,+avx2,+bmi,+bmi2,+cx8,+f16c,+fma,+fxsr,+mmx,+popcnt,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+ssse3,+x87,+xsave" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+avx,+avx2,+bmi,+bmi2,+cx8,+f16c,+fma,+fxsr,+mmx,+popcnt,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+ssse3,+x87,+xsave" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="512" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+avx,+avx2,+avx512bw,+avx512dq,+avx512f,+avx512vl,+bmi,+bmi2,+cx8,+f16c,+fma,+fxsr,+mmx,+popcnt,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+ssse3,+x87,+xsave" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #9 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="256" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+avx,+avx2,+avx512bw,+avx512dq,+avx512f,+avx512vl,+bmi,+bmi2,+cx8,+f16c,+fma,+fxsr,+mmx,+popcnt,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+ssse3,+x87,+xsave" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #10 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+avx,+avx2,+avx512bw,+avx512dq,+avx512f,+avx512vl,+bmi,+bmi2,+cx8,+f16c,+fma,+fxsr,+mmx,+popcnt,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+ssse3,+x87,+xsave" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #11 = { nofree norecurse nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #12 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #13 = { inlinehint nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #14 = { nounwind }
attributes #15 = { nounwind readnone speculatable }
attributes #16 = { noreturn nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{!3, !5}
!3 = distinct !{!3, !4, !"_ZN3hwy6N_SSE4L4LoadENS0_4SimdIfLm4EEEPKf: argument 0"}
!4 = distinct !{!4, !"_ZN3hwy6N_SSE4L4LoadENS0_4SimdIfLm4EEEPKf"}
!5 = distinct !{!5, !6, !"_ZN3jxl6N_SSE414GaborishVectorIN3hwy6N_SSE44SimdIfLm4EEENS3_6Vec128IfLm4EEEEEvT_PKfSA_SA_T0_SB_SB_Pf: argument 0"}
!6 = distinct !{!6, !"_ZN3jxl6N_SSE414GaborishVectorIN3hwy6N_SSE44SimdIfLm4EEENS3_6Vec128IfLm4EEEEEvT_PKfSA_SA_T0_SB_SB_Pf"}
!7 = !{!8, !9, !10}
!8 = distinct !{!8, !6, !"_ZN3jxl6N_SSE414GaborishVectorIN3hwy6N_SSE44SimdIfLm4EEENS3_6Vec128IfLm4EEEEEvT_PKfSA_SA_T0_SB_SB_Pf: argument 1"}
!9 = distinct !{!9, !6, !"_ZN3jxl6N_SSE414GaborishVectorIN3hwy6N_SSE44SimdIfLm4EEENS3_6Vec128IfLm4EEEEEvT_PKfSA_SA_T0_SB_SB_Pf: argument 2"}
!10 = distinct !{!10, !6, !"_ZN3jxl6N_SSE414GaborishVectorIN3hwy6N_SSE44SimdIfLm4EEENS3_6Vec128IfLm4EEEEEvT_PKfSA_SA_T0_SB_SB_Pf: argument 3"}
!11 = !{!12, !5}
!12 = distinct !{!12, !13, !"_ZN3hwy6N_SSE4L5LoadUENS0_4SimdIfLm4EEEPKf: argument 0"}
!13 = distinct !{!13, !"_ZN3hwy6N_SSE4L5LoadUENS0_4SimdIfLm4EEEPKf"}
!14 = !{!15, !5}
!15 = distinct !{!15, !16, !"_ZN3hwy6N_SSE4L5LoadUENS0_4SimdIfLm4EEEPKf: argument 0"}
!16 = distinct !{!16, !"_ZN3hwy6N_SSE4L5LoadUENS0_4SimdIfLm4EEEPKf"}
!17 = !{!18, !8}
!18 = distinct !{!18, !19, !"_ZN3hwy6N_SSE4L4LoadENS0_4SimdIfLm4EEEPKf: argument 0"}
!19 = distinct !{!19, !"_ZN3hwy6N_SSE4L4LoadENS0_4SimdIfLm4EEEPKf"}
!20 = !{!5, !9, !10}
!21 = !{!22, !8}
!22 = distinct !{!22, !23, !"_ZN3hwy6N_SSE4L5LoadUENS0_4SimdIfLm4EEEPKf: argument 0"}
!23 = distinct !{!23, !"_ZN3hwy6N_SSE4L5LoadUENS0_4SimdIfLm4EEEPKf"}
!24 = !{!25, !8}
!25 = distinct !{!25, !26, !"_ZN3hwy6N_SSE4L5LoadUENS0_4SimdIfLm4EEEPKf: argument 0"}
!26 = distinct !{!26, !"_ZN3hwy6N_SSE4L5LoadUENS0_4SimdIfLm4EEEPKf"}
!27 = !{!28, !9}
!28 = distinct !{!28, !29, !"_ZN3hwy6N_SSE4L4LoadENS0_4SimdIfLm4EEEPKf: argument 0"}
!29 = distinct !{!29, !"_ZN3hwy6N_SSE4L4LoadENS0_4SimdIfLm4EEEPKf"}
!30 = !{!5, !8, !10}
!31 = !{!32, !9}
!32 = distinct !{!32, !33, !"_ZN3hwy6N_SSE4L5LoadUENS0_4SimdIfLm4EEEPKf: argument 0"}
!33 = distinct !{!33, !"_ZN3hwy6N_SSE4L5LoadUENS0_4SimdIfLm4EEEPKf"}
!34 = !{!35, !9}
!35 = distinct !{!35, !36, !"_ZN3hwy6N_SSE4L5LoadUENS0_4SimdIfLm4EEEPKf: argument 0"}
!36 = distinct !{!36, !"_ZN3hwy6N_SSE4L5LoadUENS0_4SimdIfLm4EEEPKf"}
!37 = !{!38, !10}
!38 = distinct !{!38, !39, !"_ZN3hwy6N_SSE4L5StoreENS0_6Vec128IfLm4EEENS0_4SimdIfLm4EEEPf: argument 0"}
!39 = distinct !{!39, !"_ZN3hwy6N_SSE4L5StoreENS0_6Vec128IfLm4EEENS0_4SimdIfLm4EEEPf"}
!40 = !{!5, !8, !9}
!41 = !{!42}
!42 = distinct !{!42, !43, !"_ZN3hwy6N_SSE4L5StoreENS0_6Vec128IfLm4EEENS0_4SimdIfLm4EEEPf: argument 0"}
!43 = distinct !{!43, !"_ZN3hwy6N_SSE4L5StoreENS0_6Vec128IfLm4EEENS0_4SimdIfLm4EEEPf"}
!44 = !{!45}
!45 = distinct !{!45, !46, !"_ZN3hwy6N_SSE4L4LoadENS0_4SimdIfLm4EEEPKf: argument 0"}
!46 = distinct !{!46, !"_ZN3hwy6N_SSE4L4LoadENS0_4SimdIfLm4EEEPKf"}
!47 = !{!48}
!48 = distinct !{!48, !49, !"_ZN3hwy6N_SSE4L5StoreENS0_6Vec128IfLm4EEENS0_4SimdIfLm4EEEPf: argument 0"}
!49 = distinct !{!49, !"_ZN3hwy6N_SSE4L5StoreENS0_6Vec128IfLm4EEENS0_4SimdIfLm4EEEPf"}
!50 = !{!51}
!51 = distinct !{!51, !52, !"_ZN3hwy6N_SSE4L4LoadENS0_4SimdIfLm4EEEPKf: argument 0"}
!52 = distinct !{!52, !"_ZN3hwy6N_SSE4L4LoadENS0_4SimdIfLm4EEEPKf"}
!53 = !{!54}
!54 = distinct !{!54, !55, !"_ZN3hwy6N_SSE4L5LoadUENS0_4SimdIfLm4EEEPKf: argument 0"}
!55 = distinct !{!55, !"_ZN3hwy6N_SSE4L5LoadUENS0_4SimdIfLm4EEEPKf"}
!56 = !{!57}
!57 = distinct !{!57, !58, !"_ZN3hwy6N_SSE4L5LoadUENS0_4SimdIfLm4EEEPKf: argument 0"}
!58 = distinct !{!58, !"_ZN3hwy6N_SSE4L5LoadUENS0_4SimdIfLm4EEEPKf"}
!59 = !{!60}
!60 = distinct !{!60, !61, !"_ZN3hwy6N_SSE4L5LoadUENS0_4SimdIfLm4EEEPKf: argument 0"}
!61 = distinct !{!61, !"_ZN3hwy6N_SSE4L5LoadUENS0_4SimdIfLm4EEEPKf"}
!62 = !{!63, !65, !66, !67}
!63 = distinct !{!63, !64, !"_ZN3jxl6N_SSE413AddPixelStep1ILb0EEEviRKNS_10FilterRowsEmN3hwy6N_SSE46Vec128IfLm4EEES8_RKNS_10LoopFilterEPS8_SC_SC_SC_: argument 0"}
!64 = distinct !{!64, !"_ZN3jxl6N_SSE413AddPixelStep1ILb0EEEviRKNS_10FilterRowsEmN3hwy6N_SSE46Vec128IfLm4EEES8_RKNS_10LoopFilterEPS8_SC_SC_SC_"}
!65 = distinct !{!65, !64, !"_ZN3jxl6N_SSE413AddPixelStep1ILb0EEEviRKNS_10FilterRowsEmN3hwy6N_SSE46Vec128IfLm4EEES8_RKNS_10LoopFilterEPS8_SC_SC_SC_: argument 1"}
!66 = distinct !{!66, !64, !"_ZN3jxl6N_SSE413AddPixelStep1ILb0EEEviRKNS_10FilterRowsEmN3hwy6N_SSE46Vec128IfLm4EEES8_RKNS_10LoopFilterEPS8_SC_SC_SC_: argument 2"}
!67 = distinct !{!67, !64, !"_ZN3jxl6N_SSE413AddPixelStep1ILb0EEEviRKNS_10FilterRowsEmN3hwy6N_SSE46Vec128IfLm4EEES8_RKNS_10LoopFilterEPS8_SC_SC_SC_: argument 3"}
!68 = !{!69}
!69 = distinct !{!69, !70, !"_ZN3hwy6N_SSE4L5LoadUENS0_4SimdIfLm4EEEPKf: argument 0"}
!70 = distinct !{!70, !"_ZN3hwy6N_SSE4L5LoadUENS0_4SimdIfLm4EEEPKf"}
!71 = !{!72}
!72 = distinct !{!72, !73, !"_ZN3hwy6N_SSE4L5LoadUENS0_4SimdIfLm4EEEPKf: argument 0"}
!73 = distinct !{!73, !"_ZN3hwy6N_SSE4L5LoadUENS0_4SimdIfLm4EEEPKf"}
!74 = !{!75}
!75 = distinct !{!75, !76, !"_ZN3hwy6N_SSE4L5StoreENS0_6Vec128IfLm4EEENS0_4SimdIfLm4EEEPf: argument 0"}
!76 = distinct !{!76, !"_ZN3hwy6N_SSE4L5StoreENS0_6Vec128IfLm4EEENS0_4SimdIfLm4EEEPf"}
!77 = !{!78}
!78 = distinct !{!78, !79, !"_ZN3hwy6N_SSE4L5StoreENS0_6Vec128IfLm4EEENS0_4SimdIfLm4EEEPf: argument 0"}
!79 = distinct !{!79, !"_ZN3hwy6N_SSE4L5StoreENS0_6Vec128IfLm4EEENS0_4SimdIfLm4EEEPf"}
!80 = !{!81}
!81 = distinct !{!81, !82, !"_ZN3hwy6N_SSE4L5StoreENS0_6Vec128IfLm4EEENS0_4SimdIfLm4EEEPf: argument 0"}
!82 = distinct !{!82, !"_ZN3hwy6N_SSE4L5StoreENS0_6Vec128IfLm4EEENS0_4SimdIfLm4EEEPf"}
!83 = !{!84}
!84 = distinct !{!84, !85, !"_ZN3hwy6N_SSE4L5LoadUENS0_4SimdIfLm4EEEPKf: argument 0"}
!85 = distinct !{!85, !"_ZN3hwy6N_SSE4L5LoadUENS0_4SimdIfLm4EEEPKf"}
!86 = !{!87}
!87 = distinct !{!87, !88, !"_ZN3hwy6N_SSE4L5LoadUENS0_4SimdIfLm4EEEPKf: argument 0"}
!88 = distinct !{!88, !"_ZN3hwy6N_SSE4L5LoadUENS0_4SimdIfLm4EEEPKf"}
!89 = !{!90}
!90 = distinct !{!90, !91, !"_ZN3hwy6N_SSE4L5LoadUENS0_4SimdIfLm4EEEPKf: argument 0"}
!91 = distinct !{!91, !"_ZN3hwy6N_SSE4L5LoadUENS0_4SimdIfLm4EEEPKf"}
!92 = !{!93}
!93 = distinct !{!93, !94, !"_ZN3hwy6N_SSE4L5StoreENS0_6Vec128IfLm4EEENS0_4SimdIfLm4EEEPf: argument 0"}
!94 = distinct !{!94, !"_ZN3hwy6N_SSE4L5StoreENS0_6Vec128IfLm4EEENS0_4SimdIfLm4EEEPf"}
!95 = !{!96}
!96 = distinct !{!96, !97, !"_ZN3hwy6N_SSE4L4LoadENS0_4SimdIfLm4EEEPKf: argument 0"}
!97 = distinct !{!97, !"_ZN3hwy6N_SSE4L4LoadENS0_4SimdIfLm4EEEPKf"}
!98 = !{!99}
!99 = distinct !{!99, !100, !"_ZN3hwy6N_SSE4L5StoreENS0_6Vec128IfLm4EEENS0_4SimdIfLm4EEEPf: argument 0"}
!100 = distinct !{!100, !"_ZN3hwy6N_SSE4L5StoreENS0_6Vec128IfLm4EEENS0_4SimdIfLm4EEEPf"}
!101 = !{!102}
!102 = distinct !{!102, !103, !"_ZN3hwy6N_SSE4L4LoadENS0_4SimdIfLm4EEEPKf: argument 0"}
!103 = distinct !{!103, !"_ZN3hwy6N_SSE4L4LoadENS0_4SimdIfLm4EEEPKf"}
!104 = !{!105}
!105 = distinct !{!105, !106, !"_ZN3hwy6N_SSE4L4LoadENS0_4SimdIfLm4EEEPKf: argument 0"}
!106 = distinct !{!106, !"_ZN3hwy6N_SSE4L4LoadENS0_4SimdIfLm4EEEPKf"}
!107 = !{!108}
!108 = distinct !{!108, !109, !"_ZN3hwy6N_SSE4L4LoadENS0_4SimdIfLm4EEEPKf: argument 0"}
!109 = distinct !{!109, !"_ZN3hwy6N_SSE4L4LoadENS0_4SimdIfLm4EEEPKf"}
!110 = !{!111}
!111 = distinct !{!111, !112, !"_ZN3hwy6N_SSE4L4LoadENS0_4SimdIfLm4EEEPKf: argument 0"}
!112 = distinct !{!112, !"_ZN3hwy6N_SSE4L4LoadENS0_4SimdIfLm4EEEPKf"}
!113 = !{!114, !116, !117, !118}
!114 = distinct !{!114, !115, !"_ZN3jxl6N_SSE413AddPixelStep1ILb1EEEviRKNS_10FilterRowsEmN3hwy6N_SSE46Vec128IfLm4EEES8_RKNS_10LoopFilterEPS8_SC_SC_SC_: argument 0"}
!115 = distinct !{!115, !"_ZN3jxl6N_SSE413AddPixelStep1ILb1EEEviRKNS_10FilterRowsEmN3hwy6N_SSE46Vec128IfLm4EEES8_RKNS_10LoopFilterEPS8_SC_SC_SC_"}
!116 = distinct !{!116, !115, !"_ZN3jxl6N_SSE413AddPixelStep1ILb1EEEviRKNS_10FilterRowsEmN3hwy6N_SSE46Vec128IfLm4EEES8_RKNS_10LoopFilterEPS8_SC_SC_SC_: argument 1"}
!117 = distinct !{!117, !115, !"_ZN3jxl6N_SSE413AddPixelStep1ILb1EEEviRKNS_10FilterRowsEmN3hwy6N_SSE46Vec128IfLm4EEES8_RKNS_10LoopFilterEPS8_SC_SC_SC_: argument 2"}
!118 = distinct !{!118, !115, !"_ZN3jxl6N_SSE413AddPixelStep1ILb1EEEviRKNS_10FilterRowsEmN3hwy6N_SSE46Vec128IfLm4EEES8_RKNS_10LoopFilterEPS8_SC_SC_SC_: argument 3"}
!119 = !{!120}
!120 = distinct !{!120, !121, !"_ZN3hwy6N_SSE4L4LoadENS0_4SimdIfLm4EEEPKf: argument 0"}
!121 = distinct !{!121, !"_ZN3hwy6N_SSE4L4LoadENS0_4SimdIfLm4EEEPKf"}
!122 = !{!123}
!123 = distinct !{!123, !124, !"_ZN3hwy6N_SSE4L4LoadENS0_4SimdIfLm4EEEPKf: argument 0"}
!124 = distinct !{!124, !"_ZN3hwy6N_SSE4L4LoadENS0_4SimdIfLm4EEEPKf"}
!125 = !{!126}
!126 = distinct !{!126, !127, !"_ZN3hwy6N_SSE4L4LoadENS0_4SimdIfLm4EEEPKf: argument 0"}
!127 = distinct !{!127, !"_ZN3hwy6N_SSE4L4LoadENS0_4SimdIfLm4EEEPKf"}
!128 = !{!129}
!129 = distinct !{!129, !130, !"_ZN3hwy6N_SSE4L5LoadUENS0_4SimdIfLm4EEEPKf: argument 0"}
!130 = distinct !{!130, !"_ZN3hwy6N_SSE4L5LoadUENS0_4SimdIfLm4EEEPKf"}
!131 = !{!132, !134, !135, !136}
!132 = distinct !{!132, !133, !"_ZN3jxl6N_SSE413AddPixelStep1ILb0EEEviRKNS_10FilterRowsEmN3hwy6N_SSE46Vec128IfLm4EEES8_RKNS_10LoopFilterEPS8_SC_SC_SC_: argument 0"}
!133 = distinct !{!133, !"_ZN3jxl6N_SSE413AddPixelStep1ILb0EEEviRKNS_10FilterRowsEmN3hwy6N_SSE46Vec128IfLm4EEES8_RKNS_10LoopFilterEPS8_SC_SC_SC_"}
!134 = distinct !{!134, !133, !"_ZN3jxl6N_SSE413AddPixelStep1ILb0EEEviRKNS_10FilterRowsEmN3hwy6N_SSE46Vec128IfLm4EEES8_RKNS_10LoopFilterEPS8_SC_SC_SC_: argument 1"}
!135 = distinct !{!135, !133, !"_ZN3jxl6N_SSE413AddPixelStep1ILb0EEEviRKNS_10FilterRowsEmN3hwy6N_SSE46Vec128IfLm4EEES8_RKNS_10LoopFilterEPS8_SC_SC_SC_: argument 2"}
!136 = distinct !{!136, !133, !"_ZN3jxl6N_SSE413AddPixelStep1ILb0EEEviRKNS_10FilterRowsEmN3hwy6N_SSE46Vec128IfLm4EEES8_RKNS_10LoopFilterEPS8_SC_SC_SC_: argument 3"}
!137 = !{!138}
!138 = distinct !{!138, !139, !"_ZN3hwy6N_SSE4L5LoadUENS0_4SimdIfLm4EEEPKf: argument 0"}
!139 = distinct !{!139, !"_ZN3hwy6N_SSE4L5LoadUENS0_4SimdIfLm4EEEPKf"}
!140 = !{!141}
!141 = distinct !{!141, !142, !"_ZN3hwy6N_SSE4L5LoadUENS0_4SimdIfLm4EEEPKf: argument 0"}
!142 = distinct !{!142, !"_ZN3hwy6N_SSE4L5LoadUENS0_4SimdIfLm4EEEPKf"}
!143 = !{!144}
!144 = distinct !{!144, !145, !"_ZN3hwy6N_SSE4L5LoadUENS0_4SimdIfLm4EEEPKf: argument 0"}
!145 = distinct !{!145, !"_ZN3hwy6N_SSE4L5LoadUENS0_4SimdIfLm4EEEPKf"}
!146 = !{!147, !149, !150, !151}
!147 = distinct !{!147, !148, !"_ZN3jxl6N_SSE413AddPixelStep1ILb0EEEviRKNS_10FilterRowsEmN3hwy6N_SSE46Vec128IfLm4EEES8_RKNS_10LoopFilterEPS8_SC_SC_SC_: argument 0"}
!148 = distinct !{!148, !"_ZN3jxl6N_SSE413AddPixelStep1ILb0EEEviRKNS_10FilterRowsEmN3hwy6N_SSE46Vec128IfLm4EEES8_RKNS_10LoopFilterEPS8_SC_SC_SC_"}
!149 = distinct !{!149, !148, !"_ZN3jxl6N_SSE413AddPixelStep1ILb0EEEviRKNS_10FilterRowsEmN3hwy6N_SSE46Vec128IfLm4EEES8_RKNS_10LoopFilterEPS8_SC_SC_SC_: argument 1"}
!150 = distinct !{!150, !148, !"_ZN3jxl6N_SSE413AddPixelStep1ILb0EEEviRKNS_10FilterRowsEmN3hwy6N_SSE46Vec128IfLm4EEES8_RKNS_10LoopFilterEPS8_SC_SC_SC_: argument 2"}
!151 = distinct !{!151, !148, !"_ZN3jxl6N_SSE413AddPixelStep1ILb0EEEviRKNS_10FilterRowsEmN3hwy6N_SSE46Vec128IfLm4EEES8_RKNS_10LoopFilterEPS8_SC_SC_SC_: argument 3"}
!152 = !{!153}
!153 = distinct !{!153, !154, !"_ZN3hwy6N_SSE4L5LoadUENS0_4SimdIfLm4EEEPKf: argument 0"}
!154 = distinct !{!154, !"_ZN3hwy6N_SSE4L5LoadUENS0_4SimdIfLm4EEEPKf"}
!155 = !{!156}
!156 = distinct !{!156, !157, !"_ZN3hwy6N_SSE4L5LoadUENS0_4SimdIfLm4EEEPKf: argument 0"}
!157 = distinct !{!157, !"_ZN3hwy6N_SSE4L5LoadUENS0_4SimdIfLm4EEEPKf"}
!158 = !{!159, !161, !162, !163}
!159 = distinct !{!159, !160, !"_ZN3jxl6N_SSE413AddPixelStep1ILb1EEEviRKNS_10FilterRowsEmN3hwy6N_SSE46Vec128IfLm4EEES8_RKNS_10LoopFilterEPS8_SC_SC_SC_: argument 0"}
!160 = distinct !{!160, !"_ZN3jxl6N_SSE413AddPixelStep1ILb1EEEviRKNS_10FilterRowsEmN3hwy6N_SSE46Vec128IfLm4EEES8_RKNS_10LoopFilterEPS8_SC_SC_SC_"}
!161 = distinct !{!161, !160, !"_ZN3jxl6N_SSE413AddPixelStep1ILb1EEEviRKNS_10FilterRowsEmN3hwy6N_SSE46Vec128IfLm4EEES8_RKNS_10LoopFilterEPS8_SC_SC_SC_: argument 1"}
!162 = distinct !{!162, !160, !"_ZN3jxl6N_SSE413AddPixelStep1ILb1EEEviRKNS_10FilterRowsEmN3hwy6N_SSE46Vec128IfLm4EEES8_RKNS_10LoopFilterEPS8_SC_SC_SC_: argument 2"}
!163 = distinct !{!163, !160, !"_ZN3jxl6N_SSE413AddPixelStep1ILb1EEEviRKNS_10FilterRowsEmN3hwy6N_SSE46Vec128IfLm4EEES8_RKNS_10LoopFilterEPS8_SC_SC_SC_: argument 3"}
!164 = !{!165}
!165 = distinct !{!165, !166, !"_ZN3hwy6N_SSE4L4LoadENS0_4SimdIfLm4EEEPKf: argument 0"}
!166 = distinct !{!166, !"_ZN3hwy6N_SSE4L4LoadENS0_4SimdIfLm4EEEPKf"}
!167 = !{!168}
!168 = distinct !{!168, !169, !"_ZN3hwy6N_SSE4L4LoadENS0_4SimdIfLm4EEEPKf: argument 0"}
!169 = distinct !{!169, !"_ZN3hwy6N_SSE4L4LoadENS0_4SimdIfLm4EEEPKf"}
!170 = !{!171}
!171 = distinct !{!171, !172, !"_ZN3hwy6N_SSE4L4LoadENS0_4SimdIfLm4EEEPKf: argument 0"}
!172 = distinct !{!172, !"_ZN3hwy6N_SSE4L4LoadENS0_4SimdIfLm4EEEPKf"}
!173 = !{!174}
!174 = distinct !{!174, !175, !"_ZN3hwy6N_SSE4L5StoreENS0_6Vec128IfLm4EEENS0_4SimdIfLm4EEEPf: argument 0"}
!175 = distinct !{!175, !"_ZN3hwy6N_SSE4L5StoreENS0_6Vec128IfLm4EEENS0_4SimdIfLm4EEEPf"}
!176 = !{!177}
!177 = distinct !{!177, !178, !"_ZN3hwy6N_SSE4L5StoreENS0_6Vec128IfLm4EEENS0_4SimdIfLm4EEEPf: argument 0"}
!178 = distinct !{!178, !"_ZN3hwy6N_SSE4L5StoreENS0_6Vec128IfLm4EEENS0_4SimdIfLm4EEEPf"}
!179 = !{!180}
!180 = distinct !{!180, !181, !"_ZN3hwy6N_SSE4L4LoadENS0_4SimdIfLm4EEEPKf: argument 0"}
!181 = distinct !{!181, !"_ZN3hwy6N_SSE4L4LoadENS0_4SimdIfLm4EEEPKf"}
!182 = !{!183}
!183 = distinct !{!183, !184, !"_ZN3hwy6N_SSE4L4LoadENS0_4SimdIfLm4EEEPKf: argument 0"}
!184 = distinct !{!184, !"_ZN3hwy6N_SSE4L4LoadENS0_4SimdIfLm4EEEPKf"}
!185 = !{!186}
!186 = distinct !{!186, !187, !"_ZN3hwy6N_SSE4L5LoadUENS0_4SimdIfLm4EEEPKf: argument 0"}
!187 = distinct !{!187, !"_ZN3hwy6N_SSE4L5LoadUENS0_4SimdIfLm4EEEPKf"}
!188 = !{!189}
!189 = distinct !{!189, !190, !"_ZN3hwy6N_SSE4L5LoadUENS0_4SimdIfLm4EEEPKf: argument 0"}
!190 = distinct !{!190, !"_ZN3hwy6N_SSE4L5LoadUENS0_4SimdIfLm4EEEPKf"}
!191 = !{!192}
!192 = distinct !{!192, !193, !"_ZN3hwy6N_SSE4L5LoadUENS0_4SimdIfLm4EEEPKf: argument 0"}
!193 = distinct !{!193, !"_ZN3hwy6N_SSE4L5LoadUENS0_4SimdIfLm4EEEPKf"}
!194 = !{!195}
!195 = distinct !{!195, !196, !"_ZN3hwy6N_SSE4L5LoadUENS0_4SimdIfLm4EEEPKf: argument 0"}
!196 = distinct !{!196, !"_ZN3hwy6N_SSE4L5LoadUENS0_4SimdIfLm4EEEPKf"}
!197 = !{!198}
!198 = distinct !{!198, !199, !"_ZN3hwy6N_SSE4L5LoadUENS0_4SimdIfLm4EEEPKf: argument 0"}
!199 = distinct !{!199, !"_ZN3hwy6N_SSE4L5LoadUENS0_4SimdIfLm4EEEPKf"}
!200 = !{!201}
!201 = distinct !{!201, !202, !"_ZN3hwy6N_SSE4L5LoadUENS0_4SimdIfLm4EEEPKf: argument 0"}
!202 = distinct !{!202, !"_ZN3hwy6N_SSE4L5LoadUENS0_4SimdIfLm4EEEPKf"}
!203 = !{!204}
!204 = distinct !{!204, !205, !"_ZN3hwy6N_SSE4L5LoadUENS0_4SimdIfLm4EEEPKf: argument 0"}
!205 = distinct !{!205, !"_ZN3hwy6N_SSE4L5LoadUENS0_4SimdIfLm4EEEPKf"}
!206 = !{!207}
!207 = distinct !{!207, !208, !"_ZN3hwy6N_SSE4L5LoadUENS0_4SimdIfLm4EEEPKf: argument 0"}
!208 = distinct !{!208, !"_ZN3hwy6N_SSE4L5LoadUENS0_4SimdIfLm4EEEPKf"}
!209 = !{!210}
!210 = distinct !{!210, !211, !"_ZN3hwy6N_SSE4L4LoadENS0_4SimdIfLm4EEEPKf: argument 0"}
!211 = distinct !{!211, !"_ZN3hwy6N_SSE4L4LoadENS0_4SimdIfLm4EEEPKf"}
!212 = !{!213}
!213 = distinct !{!213, !214, !"_ZN3hwy6N_SSE4L5LoadUENS0_4SimdIfLm4EEEPKf: argument 0"}
!214 = distinct !{!214, !"_ZN3hwy6N_SSE4L5LoadUENS0_4SimdIfLm4EEEPKf"}
!215 = !{!216}
!216 = distinct !{!216, !217, !"_ZN3hwy6N_SSE4L4LoadENS0_4SimdIfLm4EEEPKf: argument 0"}
!217 = distinct !{!217, !"_ZN3hwy6N_SSE4L4LoadENS0_4SimdIfLm4EEEPKf"}
!218 = !{!219, !99}
!219 = distinct !{!219, !220, !"_ZN3hwy6N_SSE4L5StoreENS0_6Vec128IfLm4EEENS0_4SimdIfLm4EEEPf: argument 0"}
!220 = distinct !{!220, !"_ZN3hwy6N_SSE4L5StoreENS0_6Vec128IfLm4EEENS0_4SimdIfLm4EEEPf"}
!221 = !{!222}
!222 = distinct !{!222, !223, !"_ZN3hwy6N_SSE4L5StoreENS0_6Vec128IfLm4EEENS0_4SimdIfLm4EEEPf: argument 0"}
!223 = distinct !{!223, !"_ZN3hwy6N_SSE4L5StoreENS0_6Vec128IfLm4EEENS0_4SimdIfLm4EEEPf"}
!224 = !{!225}
!225 = distinct !{!225, !226, !"_ZN3hwy6N_SSE4L4LoadENS0_4SimdIfLm4EEEPKf: argument 0"}
!226 = distinct !{!226, !"_ZN3hwy6N_SSE4L4LoadENS0_4SimdIfLm4EEEPKf"}
!227 = !{!228}
!228 = distinct !{!228, !229, !"_ZN3hwy6N_SSE4L5StoreENS0_6Vec128IfLm4EEENS0_4SimdIfLm4EEEPf: argument 0"}
!229 = distinct !{!229, !"_ZN3hwy6N_SSE4L5StoreENS0_6Vec128IfLm4EEENS0_4SimdIfLm4EEEPf"}
!230 = !{!231}
!231 = distinct !{!231, !232, !"_ZN3hwy6N_SSE4L4LoadENS0_4SimdIfLm4EEEPKf: argument 0"}
!232 = distinct !{!232, !"_ZN3hwy6N_SSE4L4LoadENS0_4SimdIfLm4EEEPKf"}
!233 = !{!234}
!234 = distinct !{!234, !235, !"_ZN3hwy6N_SSE4L4LoadENS0_4SimdIfLm4EEEPKf: argument 0"}
!235 = distinct !{!235, !"_ZN3hwy6N_SSE4L4LoadENS0_4SimdIfLm4EEEPKf"}
!236 = !{!237}
!237 = distinct !{!237, !238, !"_ZN3hwy6N_SSE4L4LoadENS0_4SimdIfLm4EEEPKf: argument 0"}
!238 = distinct !{!238, !"_ZN3hwy6N_SSE4L4LoadENS0_4SimdIfLm4EEEPKf"}
!239 = !{!240}
!240 = distinct !{!240, !241, !"_ZN3hwy6N_SSE4L4LoadENS0_4SimdIfLm4EEEPKf: argument 0"}
!241 = distinct !{!241, !"_ZN3hwy6N_SSE4L4LoadENS0_4SimdIfLm4EEEPKf"}
!242 = !{!243, !245, !246, !247}
!243 = distinct !{!243, !244, !"_ZN3jxl6N_SSE413AddPixelStep2ILb1EEEviRKNS_10FilterRowsEmN3hwy6N_SSE46Vec128IfLm4EEES8_S8_S8_RKNS_10LoopFilterEPS8_SC_SC_SC_: argument 0"}
!244 = distinct !{!244, !"_ZN3jxl6N_SSE413AddPixelStep2ILb1EEEviRKNS_10FilterRowsEmN3hwy6N_SSE46Vec128IfLm4EEES8_S8_S8_RKNS_10LoopFilterEPS8_SC_SC_SC_"}
!245 = distinct !{!245, !244, !"_ZN3jxl6N_SSE413AddPixelStep2ILb1EEEviRKNS_10FilterRowsEmN3hwy6N_SSE46Vec128IfLm4EEES8_S8_S8_RKNS_10LoopFilterEPS8_SC_SC_SC_: argument 1"}
!246 = distinct !{!246, !244, !"_ZN3jxl6N_SSE413AddPixelStep2ILb1EEEviRKNS_10FilterRowsEmN3hwy6N_SSE46Vec128IfLm4EEES8_S8_S8_RKNS_10LoopFilterEPS8_SC_SC_SC_: argument 2"}
!247 = distinct !{!247, !244, !"_ZN3jxl6N_SSE413AddPixelStep2ILb1EEEviRKNS_10FilterRowsEmN3hwy6N_SSE46Vec128IfLm4EEES8_S8_S8_RKNS_10LoopFilterEPS8_SC_SC_SC_: argument 3"}
!248 = !{!249}
!249 = distinct !{!249, !250, !"_ZN3hwy6N_SSE4L4LoadENS0_4SimdIfLm4EEEPKf: argument 0"}
!250 = distinct !{!250, !"_ZN3hwy6N_SSE4L4LoadENS0_4SimdIfLm4EEEPKf"}
!251 = !{!252}
!252 = distinct !{!252, !253, !"_ZN3hwy6N_SSE4L4LoadENS0_4SimdIfLm4EEEPKf: argument 0"}
!253 = distinct !{!253, !"_ZN3hwy6N_SSE4L4LoadENS0_4SimdIfLm4EEEPKf"}
!254 = !{!255}
!255 = distinct !{!255, !256, !"_ZN3hwy6N_SSE4L4LoadENS0_4SimdIfLm4EEEPKf: argument 0"}
!256 = distinct !{!256, !"_ZN3hwy6N_SSE4L4LoadENS0_4SimdIfLm4EEEPKf"}
!257 = !{!258}
!258 = distinct !{!258, !259, !"_ZN3hwy6N_SSE4L5LoadUENS0_4SimdIfLm4EEEPKf: argument 0"}
!259 = distinct !{!259, !"_ZN3hwy6N_SSE4L5LoadUENS0_4SimdIfLm4EEEPKf"}
!260 = !{!261, !263, !264, !265}
!261 = distinct !{!261, !262, !"_ZN3jxl6N_SSE413AddPixelStep2ILb0EEEviRKNS_10FilterRowsEmN3hwy6N_SSE46Vec128IfLm4EEES8_S8_S8_RKNS_10LoopFilterEPS8_SC_SC_SC_: argument 0"}
!262 = distinct !{!262, !"_ZN3jxl6N_SSE413AddPixelStep2ILb0EEEviRKNS_10FilterRowsEmN3hwy6N_SSE46Vec128IfLm4EEES8_S8_S8_RKNS_10LoopFilterEPS8_SC_SC_SC_"}
!263 = distinct !{!263, !262, !"_ZN3jxl6N_SSE413AddPixelStep2ILb0EEEviRKNS_10FilterRowsEmN3hwy6N_SSE46Vec128IfLm4EEES8_S8_S8_RKNS_10LoopFilterEPS8_SC_SC_SC_: argument 1"}
!264 = distinct !{!264, !262, !"_ZN3jxl6N_SSE413AddPixelStep2ILb0EEEviRKNS_10FilterRowsEmN3hwy6N_SSE46Vec128IfLm4EEES8_S8_S8_RKNS_10LoopFilterEPS8_SC_SC_SC_: argument 2"}
!265 = distinct !{!265, !262, !"_ZN3jxl6N_SSE413AddPixelStep2ILb0EEEviRKNS_10FilterRowsEmN3hwy6N_SSE46Vec128IfLm4EEES8_S8_S8_RKNS_10LoopFilterEPS8_SC_SC_SC_: argument 3"}
!266 = !{!267}
!267 = distinct !{!267, !268, !"_ZN3hwy6N_SSE4L5LoadUENS0_4SimdIfLm4EEEPKf: argument 0"}
!268 = distinct !{!268, !"_ZN3hwy6N_SSE4L5LoadUENS0_4SimdIfLm4EEEPKf"}
!269 = !{!270}
!270 = distinct !{!270, !271, !"_ZN3hwy6N_SSE4L5LoadUENS0_4SimdIfLm4EEEPKf: argument 0"}
!271 = distinct !{!271, !"_ZN3hwy6N_SSE4L5LoadUENS0_4SimdIfLm4EEEPKf"}
!272 = !{!273}
!273 = distinct !{!273, !274, !"_ZN3hwy6N_SSE4L5LoadUENS0_4SimdIfLm4EEEPKf: argument 0"}
!274 = distinct !{!274, !"_ZN3hwy6N_SSE4L5LoadUENS0_4SimdIfLm4EEEPKf"}
!275 = !{!276, !278, !279, !280}
!276 = distinct !{!276, !277, !"_ZN3jxl6N_SSE413AddPixelStep2ILb0EEEviRKNS_10FilterRowsEmN3hwy6N_SSE46Vec128IfLm4EEES8_S8_S8_RKNS_10LoopFilterEPS8_SC_SC_SC_: argument 0"}
!277 = distinct !{!277, !"_ZN3jxl6N_SSE413AddPixelStep2ILb0EEEviRKNS_10FilterRowsEmN3hwy6N_SSE46Vec128IfLm4EEES8_S8_S8_RKNS_10LoopFilterEPS8_SC_SC_SC_"}
!278 = distinct !{!278, !277, !"_ZN3jxl6N_SSE413AddPixelStep2ILb0EEEviRKNS_10FilterRowsEmN3hwy6N_SSE46Vec128IfLm4EEES8_S8_S8_RKNS_10LoopFilterEPS8_SC_SC_SC_: argument 1"}
!279 = distinct !{!279, !277, !"_ZN3jxl6N_SSE413AddPixelStep2ILb0EEEviRKNS_10FilterRowsEmN3hwy6N_SSE46Vec128IfLm4EEES8_S8_S8_RKNS_10LoopFilterEPS8_SC_SC_SC_: argument 2"}
!280 = distinct !{!280, !277, !"_ZN3jxl6N_SSE413AddPixelStep2ILb0EEEviRKNS_10FilterRowsEmN3hwy6N_SSE46Vec128IfLm4EEES8_S8_S8_RKNS_10LoopFilterEPS8_SC_SC_SC_: argument 3"}
!281 = !{!282}
!282 = distinct !{!282, !283, !"_ZN3hwy6N_SSE4L5LoadUENS0_4SimdIfLm4EEEPKf: argument 0"}
!283 = distinct !{!283, !"_ZN3hwy6N_SSE4L5LoadUENS0_4SimdIfLm4EEEPKf"}
!284 = !{!285}
!285 = distinct !{!285, !286, !"_ZN3hwy6N_SSE4L5LoadUENS0_4SimdIfLm4EEEPKf: argument 0"}
!286 = distinct !{!286, !"_ZN3hwy6N_SSE4L5LoadUENS0_4SimdIfLm4EEEPKf"}
!287 = !{!288, !290, !291, !292}
!288 = distinct !{!288, !289, !"_ZN3jxl6N_SSE413AddPixelStep2ILb1EEEviRKNS_10FilterRowsEmN3hwy6N_SSE46Vec128IfLm4EEES8_S8_S8_RKNS_10LoopFilterEPS8_SC_SC_SC_: argument 0"}
!289 = distinct !{!289, !"_ZN3jxl6N_SSE413AddPixelStep2ILb1EEEviRKNS_10FilterRowsEmN3hwy6N_SSE46Vec128IfLm4EEES8_S8_S8_RKNS_10LoopFilterEPS8_SC_SC_SC_"}
!290 = distinct !{!290, !289, !"_ZN3jxl6N_SSE413AddPixelStep2ILb1EEEviRKNS_10FilterRowsEmN3hwy6N_SSE46Vec128IfLm4EEES8_S8_S8_RKNS_10LoopFilterEPS8_SC_SC_SC_: argument 1"}
!291 = distinct !{!291, !289, !"_ZN3jxl6N_SSE413AddPixelStep2ILb1EEEviRKNS_10FilterRowsEmN3hwy6N_SSE46Vec128IfLm4EEES8_S8_S8_RKNS_10LoopFilterEPS8_SC_SC_SC_: argument 2"}
!292 = distinct !{!292, !289, !"_ZN3jxl6N_SSE413AddPixelStep2ILb1EEEviRKNS_10FilterRowsEmN3hwy6N_SSE46Vec128IfLm4EEES8_S8_S8_RKNS_10LoopFilterEPS8_SC_SC_SC_: argument 3"}
!293 = !{!294}
!294 = distinct !{!294, !295, !"_ZN3hwy6N_SSE4L4LoadENS0_4SimdIfLm4EEEPKf: argument 0"}
!295 = distinct !{!295, !"_ZN3hwy6N_SSE4L4LoadENS0_4SimdIfLm4EEEPKf"}
!296 = !{!297}
!297 = distinct !{!297, !298, !"_ZN3hwy6N_SSE4L4LoadENS0_4SimdIfLm4EEEPKf: argument 0"}
!298 = distinct !{!298, !"_ZN3hwy6N_SSE4L4LoadENS0_4SimdIfLm4EEEPKf"}
!299 = !{!300}
!300 = distinct !{!300, !301, !"_ZN3hwy6N_SSE4L4LoadENS0_4SimdIfLm4EEEPKf: argument 0"}
!301 = distinct !{!301, !"_ZN3hwy6N_SSE4L4LoadENS0_4SimdIfLm4EEEPKf"}
!302 = !{!303}
!303 = distinct !{!303, !304, !"_ZN3hwy6N_SSE4L5StoreENS0_6Vec128IfLm4EEENS0_4SimdIfLm4EEEPf: argument 0"}
!304 = distinct !{!304, !"_ZN3hwy6N_SSE4L5StoreENS0_6Vec128IfLm4EEENS0_4SimdIfLm4EEEPf"}
!305 = !{!306}
!306 = distinct !{!306, !307, !"_ZN3hwy6N_SSE4L5StoreENS0_6Vec128IfLm4EEENS0_4SimdIfLm4EEEPf: argument 0"}
!307 = distinct !{!307, !"_ZN3hwy6N_SSE4L5StoreENS0_6Vec128IfLm4EEENS0_4SimdIfLm4EEEPf"}
!308 = !{!309, !228}
!309 = distinct !{!309, !310, !"_ZN3hwy6N_SSE4L5StoreENS0_6Vec128IfLm4EEENS0_4SimdIfLm4EEEPf: argument 0"}
!310 = distinct !{!310, !"_ZN3hwy6N_SSE4L5StoreENS0_6Vec128IfLm4EEENS0_4SimdIfLm4EEEPf"}
!311 = !{i8 0, i8 2}
!312 = !{!313, !315}
!313 = distinct !{!313, !314, !"_ZN3hwy6N_AVX2L4LoadENS0_4SimdIfLm8EEEPKf: argument 1"}
!314 = distinct !{!314, !"_ZN3hwy6N_AVX2L4LoadENS0_4SimdIfLm8EEEPKf"}
!315 = distinct !{!315, !316, !"_ZN3jxl6N_AVX214GaborishVectorIN3hwy6N_AVX24SimdIfLm8EEENS3_6Vec256IfEEEEvT_PKfSA_SA_T0_SB_SB_Pf: argument 0"}
!316 = distinct !{!316, !"_ZN3jxl6N_AVX214GaborishVectorIN3hwy6N_AVX24SimdIfLm8EEENS3_6Vec256IfEEEEvT_PKfSA_SA_T0_SB_SB_Pf"}
!317 = !{!318, !319, !320, !321}
!318 = distinct !{!318, !314, !"_ZN3hwy6N_AVX2L4LoadENS0_4SimdIfLm8EEEPKf: argument 0"}
!319 = distinct !{!319, !316, !"_ZN3jxl6N_AVX214GaborishVectorIN3hwy6N_AVX24SimdIfLm8EEENS3_6Vec256IfEEEEvT_PKfSA_SA_T0_SB_SB_Pf: argument 1"}
!320 = distinct !{!320, !316, !"_ZN3jxl6N_AVX214GaborishVectorIN3hwy6N_AVX24SimdIfLm8EEENS3_6Vec256IfEEEEvT_PKfSA_SA_T0_SB_SB_Pf: argument 2"}
!321 = distinct !{!321, !316, !"_ZN3jxl6N_AVX214GaborishVectorIN3hwy6N_AVX24SimdIfLm8EEENS3_6Vec256IfEEEEvT_PKfSA_SA_T0_SB_SB_Pf: argument 3"}
!322 = !{!323, !315}
!323 = distinct !{!323, !324, !"_ZN3hwy6N_AVX2L5LoadUENS0_4SimdIfLm8EEEPKf: argument 1"}
!324 = distinct !{!324, !"_ZN3hwy6N_AVX2L5LoadUENS0_4SimdIfLm8EEEPKf"}
!325 = !{!326, !319, !320, !321}
!326 = distinct !{!326, !324, !"_ZN3hwy6N_AVX2L5LoadUENS0_4SimdIfLm8EEEPKf: argument 0"}
!327 = !{!328, !315}
!328 = distinct !{!328, !329, !"_ZN3hwy6N_AVX2L5LoadUENS0_4SimdIfLm8EEEPKf: argument 1"}
!329 = distinct !{!329, !"_ZN3hwy6N_AVX2L5LoadUENS0_4SimdIfLm8EEEPKf"}
!330 = !{!331, !319, !320, !321}
!331 = distinct !{!331, !329, !"_ZN3hwy6N_AVX2L5LoadUENS0_4SimdIfLm8EEEPKf: argument 0"}
!332 = !{!333, !319}
!333 = distinct !{!333, !334, !"_ZN3hwy6N_AVX2L4LoadENS0_4SimdIfLm8EEEPKf: argument 1"}
!334 = distinct !{!334, !"_ZN3hwy6N_AVX2L4LoadENS0_4SimdIfLm8EEEPKf"}
!335 = !{!336, !315, !320, !321}
!336 = distinct !{!336, !334, !"_ZN3hwy6N_AVX2L4LoadENS0_4SimdIfLm8EEEPKf: argument 0"}
!337 = !{!338, !319}
!338 = distinct !{!338, !339, !"_ZN3hwy6N_AVX2L5LoadUENS0_4SimdIfLm8EEEPKf: argument 1"}
!339 = distinct !{!339, !"_ZN3hwy6N_AVX2L5LoadUENS0_4SimdIfLm8EEEPKf"}
!340 = !{!341, !315, !320, !321}
!341 = distinct !{!341, !339, !"_ZN3hwy6N_AVX2L5LoadUENS0_4SimdIfLm8EEEPKf: argument 0"}
!342 = !{!343, !319}
!343 = distinct !{!343, !344, !"_ZN3hwy6N_AVX2L5LoadUENS0_4SimdIfLm8EEEPKf: argument 1"}
!344 = distinct !{!344, !"_ZN3hwy6N_AVX2L5LoadUENS0_4SimdIfLm8EEEPKf"}
!345 = !{!346, !315, !320, !321}
!346 = distinct !{!346, !344, !"_ZN3hwy6N_AVX2L5LoadUENS0_4SimdIfLm8EEEPKf: argument 0"}
!347 = !{!348, !320}
!348 = distinct !{!348, !349, !"_ZN3hwy6N_AVX2L4LoadENS0_4SimdIfLm8EEEPKf: argument 1"}
!349 = distinct !{!349, !"_ZN3hwy6N_AVX2L4LoadENS0_4SimdIfLm8EEEPKf"}
!350 = !{!351, !315, !319, !321}
!351 = distinct !{!351, !349, !"_ZN3hwy6N_AVX2L4LoadENS0_4SimdIfLm8EEEPKf: argument 0"}
!352 = !{!353, !320}
!353 = distinct !{!353, !354, !"_ZN3hwy6N_AVX2L5LoadUENS0_4SimdIfLm8EEEPKf: argument 1"}
!354 = distinct !{!354, !"_ZN3hwy6N_AVX2L5LoadUENS0_4SimdIfLm8EEEPKf"}
!355 = !{!356, !315, !319, !321}
!356 = distinct !{!356, !354, !"_ZN3hwy6N_AVX2L5LoadUENS0_4SimdIfLm8EEEPKf: argument 0"}
!357 = !{!358, !320}
!358 = distinct !{!358, !359, !"_ZN3hwy6N_AVX2L5LoadUENS0_4SimdIfLm8EEEPKf: argument 1"}
!359 = distinct !{!359, !"_ZN3hwy6N_AVX2L5LoadUENS0_4SimdIfLm8EEEPKf"}
!360 = !{!361, !315, !319, !321}
!361 = distinct !{!361, !359, !"_ZN3hwy6N_AVX2L5LoadUENS0_4SimdIfLm8EEEPKf: argument 0"}
!362 = !{!363, !321}
!363 = distinct !{!363, !364, !"_ZN3hwy6N_AVX2L5StoreENS0_6Vec256IfEENS0_4SimdIfLm8EEEPf: argument 0"}
!364 = distinct !{!364, !"_ZN3hwy6N_AVX2L5StoreENS0_6Vec256IfEENS0_4SimdIfLm8EEEPf"}
!365 = !{!315, !319, !320}
!366 = !{!367}
!367 = distinct !{!367, !368, !"_ZN3hwy6N_AVX2L5StoreENS0_6Vec256IfEENS0_4SimdIfLm8EEEPf: argument 0"}
!368 = distinct !{!368, !"_ZN3hwy6N_AVX2L5StoreENS0_6Vec256IfEENS0_4SimdIfLm8EEEPf"}
!369 = !{!370}
!370 = distinct !{!370, !371, !"_ZN3hwy6N_AVX2L4LoadENS0_4SimdIfLm8EEEPKf: argument 1"}
!371 = distinct !{!371, !"_ZN3hwy6N_AVX2L4LoadENS0_4SimdIfLm8EEEPKf"}
!372 = !{!373}
!373 = distinct !{!373, !371, !"_ZN3hwy6N_AVX2L4LoadENS0_4SimdIfLm8EEEPKf: argument 0"}
!374 = !{!375}
!375 = distinct !{!375, !376, !"_ZN3hwy6N_AVX2L5StoreENS0_6Vec256IfEENS0_4SimdIfLm8EEEPf: argument 0"}
!376 = distinct !{!376, !"_ZN3hwy6N_AVX2L5StoreENS0_6Vec256IfEENS0_4SimdIfLm8EEEPf"}
!377 = !{!378}
!378 = distinct !{!378, !379, !"_ZN3hwy6N_AVX2L4LoadENS0_4SimdIfLm8EEEPKf: argument 1"}
!379 = distinct !{!379, !"_ZN3hwy6N_AVX2L4LoadENS0_4SimdIfLm8EEEPKf"}
!380 = !{!381}
!381 = distinct !{!381, !379, !"_ZN3hwy6N_AVX2L4LoadENS0_4SimdIfLm8EEEPKf: argument 0"}
!382 = !{!383}
!383 = distinct !{!383, !384, !"_ZN3hwy6N_AVX2L5LoadUENS0_4SimdIfLm8EEEPKf: argument 1"}
!384 = distinct !{!384, !"_ZN3hwy6N_AVX2L5LoadUENS0_4SimdIfLm8EEEPKf"}
!385 = !{!386}
!386 = distinct !{!386, !384, !"_ZN3hwy6N_AVX2L5LoadUENS0_4SimdIfLm8EEEPKf: argument 0"}
!387 = !{!388}
!388 = distinct !{!388, !389, !"_ZN3hwy6N_AVX2L5LoadUENS0_4SimdIfLm8EEEPKf: argument 1"}
!389 = distinct !{!389, !"_ZN3hwy6N_AVX2L5LoadUENS0_4SimdIfLm8EEEPKf"}
!390 = !{!391}
!391 = distinct !{!391, !389, !"_ZN3hwy6N_AVX2L5LoadUENS0_4SimdIfLm8EEEPKf: argument 0"}
!392 = !{!393}
!393 = distinct !{!393, !394, !"_ZN3hwy6N_AVX2L5LoadUENS0_4SimdIfLm8EEEPKf: argument 1"}
!394 = distinct !{!394, !"_ZN3hwy6N_AVX2L5LoadUENS0_4SimdIfLm8EEEPKf"}
!395 = !{!396}
!396 = distinct !{!396, !394, !"_ZN3hwy6N_AVX2L5LoadUENS0_4SimdIfLm8EEEPKf: argument 0"}
!397 = !{!398, !400, !401, !402}
!398 = distinct !{!398, !399, !"_ZN3jxl6N_AVX213AddPixelStep1ILb0EEEviRKNS_10FilterRowsEmN3hwy6N_AVX26Vec256IfEES8_RKNS_10LoopFilterEPS8_SC_SC_SC_: argument 0"}
!399 = distinct !{!399, !"_ZN3jxl6N_AVX213AddPixelStep1ILb0EEEviRKNS_10FilterRowsEmN3hwy6N_AVX26Vec256IfEES8_RKNS_10LoopFilterEPS8_SC_SC_SC_"}
!400 = distinct !{!400, !399, !"_ZN3jxl6N_AVX213AddPixelStep1ILb0EEEviRKNS_10FilterRowsEmN3hwy6N_AVX26Vec256IfEES8_RKNS_10LoopFilterEPS8_SC_SC_SC_: argument 1"}
!401 = distinct !{!401, !399, !"_ZN3jxl6N_AVX213AddPixelStep1ILb0EEEviRKNS_10FilterRowsEmN3hwy6N_AVX26Vec256IfEES8_RKNS_10LoopFilterEPS8_SC_SC_SC_: argument 2"}
!402 = distinct !{!402, !399, !"_ZN3jxl6N_AVX213AddPixelStep1ILb0EEEviRKNS_10FilterRowsEmN3hwy6N_AVX26Vec256IfEES8_RKNS_10LoopFilterEPS8_SC_SC_SC_: argument 3"}
!403 = !{!404}
!404 = distinct !{!404, !405, !"_ZN3hwy6N_AVX2L5LoadUENS0_4SimdIfLm8EEEPKf: argument 1"}
!405 = distinct !{!405, !"_ZN3hwy6N_AVX2L5LoadUENS0_4SimdIfLm8EEEPKf"}
!406 = !{!407}
!407 = distinct !{!407, !405, !"_ZN3hwy6N_AVX2L5LoadUENS0_4SimdIfLm8EEEPKf: argument 0"}
!408 = !{!409}
!409 = distinct !{!409, !410, !"_ZN3hwy6N_AVX2L5LoadUENS0_4SimdIfLm8EEEPKf: argument 1"}
!410 = distinct !{!410, !"_ZN3hwy6N_AVX2L5LoadUENS0_4SimdIfLm8EEEPKf"}
!411 = !{!412}
!412 = distinct !{!412, !410, !"_ZN3hwy6N_AVX2L5LoadUENS0_4SimdIfLm8EEEPKf: argument 0"}
!413 = !{!414}
!414 = distinct !{!414, !415, !"_ZN3hwy6N_AVX2L5StoreENS0_6Vec256IfEENS0_4SimdIfLm8EEEPf: argument 0"}
!415 = distinct !{!415, !"_ZN3hwy6N_AVX2L5StoreENS0_6Vec256IfEENS0_4SimdIfLm8EEEPf"}
!416 = !{!417}
!417 = distinct !{!417, !418, !"_ZN3hwy6N_AVX2L5StoreENS0_6Vec256IfEENS0_4SimdIfLm8EEEPf: argument 0"}
!418 = distinct !{!418, !"_ZN3hwy6N_AVX2L5StoreENS0_6Vec256IfEENS0_4SimdIfLm8EEEPf"}
!419 = !{!420}
!420 = distinct !{!420, !421, !"_ZN3hwy6N_AVX2L5StoreENS0_6Vec256IfEENS0_4SimdIfLm8EEEPf: argument 0"}
!421 = distinct !{!421, !"_ZN3hwy6N_AVX2L5StoreENS0_6Vec256IfEENS0_4SimdIfLm8EEEPf"}
!422 = !{!423}
!423 = distinct !{!423, !424, !"_ZN3hwy6N_AVX2L5LoadUENS0_4SimdIfLm8EEEPKf: argument 1"}
!424 = distinct !{!424, !"_ZN3hwy6N_AVX2L5LoadUENS0_4SimdIfLm8EEEPKf"}
!425 = !{!426, !398, !400, !401, !402}
!426 = distinct !{!426, !424, !"_ZN3hwy6N_AVX2L5LoadUENS0_4SimdIfLm8EEEPKf: argument 0"}
!427 = !{!428}
!428 = distinct !{!428, !429, !"_ZN3hwy6N_AVX2L5LoadUENS0_4SimdIfLm8EEEPKf: argument 1"}
!429 = distinct !{!429, !"_ZN3hwy6N_AVX2L5LoadUENS0_4SimdIfLm8EEEPKf"}
!430 = !{!431, !398, !400, !401, !402}
!431 = distinct !{!431, !429, !"_ZN3hwy6N_AVX2L5LoadUENS0_4SimdIfLm8EEEPKf: argument 0"}
!432 = !{!433}
!433 = distinct !{!433, !434, !"_ZN3hwy6N_AVX2L5LoadUENS0_4SimdIfLm8EEEPKf: argument 1"}
!434 = distinct !{!434, !"_ZN3hwy6N_AVX2L5LoadUENS0_4SimdIfLm8EEEPKf"}
!435 = !{!436, !398, !400, !401, !402}
!436 = distinct !{!436, !434, !"_ZN3hwy6N_AVX2L5LoadUENS0_4SimdIfLm8EEEPKf: argument 0"}
!437 = !{!438}
!438 = distinct !{!438, !439, !"_ZN3hwy6N_AVX2L5StoreENS0_6Vec256IfEENS0_4SimdIfLm8EEEPf: argument 0"}
!439 = distinct !{!439, !"_ZN3hwy6N_AVX2L5StoreENS0_6Vec256IfEENS0_4SimdIfLm8EEEPf"}
!440 = !{!441}
!441 = distinct !{!441, !442, !"_ZN3hwy6N_AVX2L4LoadENS0_4SimdIfLm8EEEPKf: argument 1"}
!442 = distinct !{!442, !"_ZN3hwy6N_AVX2L4LoadENS0_4SimdIfLm8EEEPKf"}
!443 = !{!444}
!444 = distinct !{!444, !442, !"_ZN3hwy6N_AVX2L4LoadENS0_4SimdIfLm8EEEPKf: argument 0"}
!445 = !{!446}
!446 = distinct !{!446, !447, !"_ZN3hwy6N_AVX2L5StoreENS0_6Vec256IfEENS0_4SimdIfLm8EEEPf: argument 0"}
!447 = distinct !{!447, !"_ZN3hwy6N_AVX2L5StoreENS0_6Vec256IfEENS0_4SimdIfLm8EEEPf"}
!448 = !{!449}
!449 = distinct !{!449, !450, !"_ZN3hwy6N_AVX2L4LoadENS0_4SimdIfLm8EEEPKf: argument 1"}
!450 = distinct !{!450, !"_ZN3hwy6N_AVX2L4LoadENS0_4SimdIfLm8EEEPKf"}
!451 = !{!452}
!452 = distinct !{!452, !450, !"_ZN3hwy6N_AVX2L4LoadENS0_4SimdIfLm8EEEPKf: argument 0"}
!453 = !{!454}
!454 = distinct !{!454, !455, !"_ZN3hwy6N_AVX2L4LoadENS0_4SimdIfLm8EEEPKf: argument 1"}
!455 = distinct !{!455, !"_ZN3hwy6N_AVX2L4LoadENS0_4SimdIfLm8EEEPKf"}
!456 = !{!457}
!457 = distinct !{!457, !455, !"_ZN3hwy6N_AVX2L4LoadENS0_4SimdIfLm8EEEPKf: argument 0"}
!458 = !{!459}
!459 = distinct !{!459, !460, !"_ZN3hwy6N_AVX2L4LoadENS0_4SimdIfLm8EEEPKf: argument 1"}
!460 = distinct !{!460, !"_ZN3hwy6N_AVX2L4LoadENS0_4SimdIfLm8EEEPKf"}
!461 = !{!462}
!462 = distinct !{!462, !460, !"_ZN3hwy6N_AVX2L4LoadENS0_4SimdIfLm8EEEPKf: argument 0"}
!463 = !{!464}
!464 = distinct !{!464, !465, !"_ZN3hwy6N_AVX2L4LoadENS0_4SimdIfLm8EEEPKf: argument 1"}
!465 = distinct !{!465, !"_ZN3hwy6N_AVX2L4LoadENS0_4SimdIfLm8EEEPKf"}
!466 = !{!467}
!467 = distinct !{!467, !465, !"_ZN3hwy6N_AVX2L4LoadENS0_4SimdIfLm8EEEPKf: argument 0"}
!468 = !{!469, !471, !472, !473}
!469 = distinct !{!469, !470, !"_ZN3jxl6N_AVX213AddPixelStep1ILb1EEEviRKNS_10FilterRowsEmN3hwy6N_AVX26Vec256IfEES8_RKNS_10LoopFilterEPS8_SC_SC_SC_: argument 0"}
!470 = distinct !{!470, !"_ZN3jxl6N_AVX213AddPixelStep1ILb1EEEviRKNS_10FilterRowsEmN3hwy6N_AVX26Vec256IfEES8_RKNS_10LoopFilterEPS8_SC_SC_SC_"}
!471 = distinct !{!471, !470, !"_ZN3jxl6N_AVX213AddPixelStep1ILb1EEEviRKNS_10FilterRowsEmN3hwy6N_AVX26Vec256IfEES8_RKNS_10LoopFilterEPS8_SC_SC_SC_: argument 1"}
!472 = distinct !{!472, !470, !"_ZN3jxl6N_AVX213AddPixelStep1ILb1EEEviRKNS_10FilterRowsEmN3hwy6N_AVX26Vec256IfEES8_RKNS_10LoopFilterEPS8_SC_SC_SC_: argument 2"}
!473 = distinct !{!473, !470, !"_ZN3jxl6N_AVX213AddPixelStep1ILb1EEEviRKNS_10FilterRowsEmN3hwy6N_AVX26Vec256IfEES8_RKNS_10LoopFilterEPS8_SC_SC_SC_: argument 3"}
!474 = !{!475}
!475 = distinct !{!475, !476, !"_ZN3hwy6N_AVX2L4LoadENS0_4SimdIfLm8EEEPKf: argument 1"}
!476 = distinct !{!476, !"_ZN3hwy6N_AVX2L4LoadENS0_4SimdIfLm8EEEPKf"}
!477 = !{!478, !469, !471, !472, !473}
!478 = distinct !{!478, !476, !"_ZN3hwy6N_AVX2L4LoadENS0_4SimdIfLm8EEEPKf: argument 0"}
!479 = !{!480}
!480 = distinct !{!480, !481, !"_ZN3hwy6N_AVX2L4LoadENS0_4SimdIfLm8EEEPKf: argument 1"}
!481 = distinct !{!481, !"_ZN3hwy6N_AVX2L4LoadENS0_4SimdIfLm8EEEPKf"}
!482 = !{!483, !469, !471, !472, !473}
!483 = distinct !{!483, !481, !"_ZN3hwy6N_AVX2L4LoadENS0_4SimdIfLm8EEEPKf: argument 0"}
!484 = !{!485}
!485 = distinct !{!485, !486, !"_ZN3hwy6N_AVX2L4LoadENS0_4SimdIfLm8EEEPKf: argument 1"}
!486 = distinct !{!486, !"_ZN3hwy6N_AVX2L4LoadENS0_4SimdIfLm8EEEPKf"}
!487 = !{!488, !469, !471, !472, !473}
!488 = distinct !{!488, !486, !"_ZN3hwy6N_AVX2L4LoadENS0_4SimdIfLm8EEEPKf: argument 0"}
!489 = !{!490}
!490 = distinct !{!490, !491, !"_ZN3hwy6N_AVX2L5LoadUENS0_4SimdIfLm8EEEPKf: argument 1"}
!491 = distinct !{!491, !"_ZN3hwy6N_AVX2L5LoadUENS0_4SimdIfLm8EEEPKf"}
!492 = !{!493, !494, !496, !497, !498}
!493 = distinct !{!493, !491, !"_ZN3hwy6N_AVX2L5LoadUENS0_4SimdIfLm8EEEPKf: argument 0"}
!494 = distinct !{!494, !495, !"_ZN3jxl6N_AVX213AddPixelStep1ILb0EEEviRKNS_10FilterRowsEmN3hwy6N_AVX26Vec256IfEES8_RKNS_10LoopFilterEPS8_SC_SC_SC_: argument 0"}
!495 = distinct !{!495, !"_ZN3jxl6N_AVX213AddPixelStep1ILb0EEEviRKNS_10FilterRowsEmN3hwy6N_AVX26Vec256IfEES8_RKNS_10LoopFilterEPS8_SC_SC_SC_"}
!496 = distinct !{!496, !495, !"_ZN3jxl6N_AVX213AddPixelStep1ILb0EEEviRKNS_10FilterRowsEmN3hwy6N_AVX26Vec256IfEES8_RKNS_10LoopFilterEPS8_SC_SC_SC_: argument 1"}
!497 = distinct !{!497, !495, !"_ZN3jxl6N_AVX213AddPixelStep1ILb0EEEviRKNS_10FilterRowsEmN3hwy6N_AVX26Vec256IfEES8_RKNS_10LoopFilterEPS8_SC_SC_SC_: argument 2"}
!498 = distinct !{!498, !495, !"_ZN3jxl6N_AVX213AddPixelStep1ILb0EEEviRKNS_10FilterRowsEmN3hwy6N_AVX26Vec256IfEES8_RKNS_10LoopFilterEPS8_SC_SC_SC_: argument 3"}
!499 = !{!500}
!500 = distinct !{!500, !501, !"_ZN3hwy6N_AVX2L5LoadUENS0_4SimdIfLm8EEEPKf: argument 1"}
!501 = distinct !{!501, !"_ZN3hwy6N_AVX2L5LoadUENS0_4SimdIfLm8EEEPKf"}
!502 = !{!503, !494, !496, !497, !498}
!503 = distinct !{!503, !501, !"_ZN3hwy6N_AVX2L5LoadUENS0_4SimdIfLm8EEEPKf: argument 0"}
!504 = !{!505}
!505 = distinct !{!505, !506, !"_ZN3hwy6N_AVX2L5LoadUENS0_4SimdIfLm8EEEPKf: argument 1"}
!506 = distinct !{!506, !"_ZN3hwy6N_AVX2L5LoadUENS0_4SimdIfLm8EEEPKf"}
!507 = !{!508, !494, !496, !497, !498}
!508 = distinct !{!508, !506, !"_ZN3hwy6N_AVX2L5LoadUENS0_4SimdIfLm8EEEPKf: argument 0"}
!509 = !{!510}
!510 = distinct !{!510, !511, !"_ZN3hwy6N_AVX2L5LoadUENS0_4SimdIfLm8EEEPKf: argument 1"}
!511 = distinct !{!511, !"_ZN3hwy6N_AVX2L5LoadUENS0_4SimdIfLm8EEEPKf"}
!512 = !{!513, !514, !516, !517, !518}
!513 = distinct !{!513, !511, !"_ZN3hwy6N_AVX2L5LoadUENS0_4SimdIfLm8EEEPKf: argument 0"}
!514 = distinct !{!514, !515, !"_ZN3jxl6N_AVX213AddPixelStep1ILb0EEEviRKNS_10FilterRowsEmN3hwy6N_AVX26Vec256IfEES8_RKNS_10LoopFilterEPS8_SC_SC_SC_: argument 0"}
!515 = distinct !{!515, !"_ZN3jxl6N_AVX213AddPixelStep1ILb0EEEviRKNS_10FilterRowsEmN3hwy6N_AVX26Vec256IfEES8_RKNS_10LoopFilterEPS8_SC_SC_SC_"}
!516 = distinct !{!516, !515, !"_ZN3jxl6N_AVX213AddPixelStep1ILb0EEEviRKNS_10FilterRowsEmN3hwy6N_AVX26Vec256IfEES8_RKNS_10LoopFilterEPS8_SC_SC_SC_: argument 1"}
!517 = distinct !{!517, !515, !"_ZN3jxl6N_AVX213AddPixelStep1ILb0EEEviRKNS_10FilterRowsEmN3hwy6N_AVX26Vec256IfEES8_RKNS_10LoopFilterEPS8_SC_SC_SC_: argument 2"}
!518 = distinct !{!518, !515, !"_ZN3jxl6N_AVX213AddPixelStep1ILb0EEEviRKNS_10FilterRowsEmN3hwy6N_AVX26Vec256IfEES8_RKNS_10LoopFilterEPS8_SC_SC_SC_: argument 3"}
!519 = !{!520}
!520 = distinct !{!520, !521, !"_ZN3hwy6N_AVX2L5LoadUENS0_4SimdIfLm8EEEPKf: argument 1"}
!521 = distinct !{!521, !"_ZN3hwy6N_AVX2L5LoadUENS0_4SimdIfLm8EEEPKf"}
!522 = !{!523, !514, !516, !517, !518}
!523 = distinct !{!523, !521, !"_ZN3hwy6N_AVX2L5LoadUENS0_4SimdIfLm8EEEPKf: argument 0"}
!524 = !{!525}
!525 = distinct !{!525, !526, !"_ZN3hwy6N_AVX2L5LoadUENS0_4SimdIfLm8EEEPKf: argument 1"}
!526 = distinct !{!526, !"_ZN3hwy6N_AVX2L5LoadUENS0_4SimdIfLm8EEEPKf"}
!527 = !{!528, !514, !516, !517, !518}
!528 = distinct !{!528, !526, !"_ZN3hwy6N_AVX2L5LoadUENS0_4SimdIfLm8EEEPKf: argument 0"}
!529 = !{!530, !532, !533, !534}
!530 = distinct !{!530, !531, !"_ZN3jxl6N_AVX213AddPixelStep1ILb1EEEviRKNS_10FilterRowsEmN3hwy6N_AVX26Vec256IfEES8_RKNS_10LoopFilterEPS8_SC_SC_SC_: argument 0"}
!531 = distinct !{!531, !"_ZN3jxl6N_AVX213AddPixelStep1ILb1EEEviRKNS_10FilterRowsEmN3hwy6N_AVX26Vec256IfEES8_RKNS_10LoopFilterEPS8_SC_SC_SC_"}
!532 = distinct !{!532, !531, !"_ZN3jxl6N_AVX213AddPixelStep1ILb1EEEviRKNS_10FilterRowsEmN3hwy6N_AVX26Vec256IfEES8_RKNS_10LoopFilterEPS8_SC_SC_SC_: argument 1"}
!533 = distinct !{!533, !531, !"_ZN3jxl6N_AVX213AddPixelStep1ILb1EEEviRKNS_10FilterRowsEmN3hwy6N_AVX26Vec256IfEES8_RKNS_10LoopFilterEPS8_SC_SC_SC_: argument 2"}
!534 = distinct !{!534, !531, !"_ZN3jxl6N_AVX213AddPixelStep1ILb1EEEviRKNS_10FilterRowsEmN3hwy6N_AVX26Vec256IfEES8_RKNS_10LoopFilterEPS8_SC_SC_SC_: argument 3"}
!535 = !{!536}
!536 = distinct !{!536, !537, !"_ZN3hwy6N_AVX2L4LoadENS0_4SimdIfLm8EEEPKf: argument 1"}
!537 = distinct !{!537, !"_ZN3hwy6N_AVX2L4LoadENS0_4SimdIfLm8EEEPKf"}
!538 = !{!539, !530, !532, !533, !534}
!539 = distinct !{!539, !537, !"_ZN3hwy6N_AVX2L4LoadENS0_4SimdIfLm8EEEPKf: argument 0"}
!540 = !{!541}
!541 = distinct !{!541, !542, !"_ZN3hwy6N_AVX2L4LoadENS0_4SimdIfLm8EEEPKf: argument 1"}
!542 = distinct !{!542, !"_ZN3hwy6N_AVX2L4LoadENS0_4SimdIfLm8EEEPKf"}
!543 = !{!544, !530, !532, !533, !534}
!544 = distinct !{!544, !542, !"_ZN3hwy6N_AVX2L4LoadENS0_4SimdIfLm8EEEPKf: argument 0"}
!545 = !{!546}
!546 = distinct !{!546, !547, !"_ZN3hwy6N_AVX2L4LoadENS0_4SimdIfLm8EEEPKf: argument 1"}
!547 = distinct !{!547, !"_ZN3hwy6N_AVX2L4LoadENS0_4SimdIfLm8EEEPKf"}
!548 = !{!549, !530, !532, !533, !534}
!549 = distinct !{!549, !547, !"_ZN3hwy6N_AVX2L4LoadENS0_4SimdIfLm8EEEPKf: argument 0"}
!550 = !{!551}
!551 = distinct !{!551, !552, !"_ZN3hwy6N_AVX2L5StoreENS0_6Vec256IfEENS0_4SimdIfLm8EEEPf: argument 0"}
!552 = distinct !{!552, !"_ZN3hwy6N_AVX2L5StoreENS0_6Vec256IfEENS0_4SimdIfLm8EEEPf"}
!553 = !{!554}
!554 = distinct !{!554, !555, !"_ZN3hwy6N_AVX2L5StoreENS0_6Vec256IfEENS0_4SimdIfLm8EEEPf: argument 0"}
!555 = distinct !{!555, !"_ZN3hwy6N_AVX2L5StoreENS0_6Vec256IfEENS0_4SimdIfLm8EEEPf"}
!556 = !{!557}
!557 = distinct !{!557, !558, !"_ZN3hwy6N_AVX2L4LoadENS0_4SimdIfLm8EEEPKf: argument 1"}
!558 = distinct !{!558, !"_ZN3hwy6N_AVX2L4LoadENS0_4SimdIfLm8EEEPKf"}
!559 = !{!560}
!560 = distinct !{!560, !558, !"_ZN3hwy6N_AVX2L4LoadENS0_4SimdIfLm8EEEPKf: argument 0"}
!561 = !{!562}
!562 = distinct !{!562, !563, !"_ZN3hwy6N_AVX2L4LoadENS0_4SimdIfLm8EEEPKf: argument 1"}
!563 = distinct !{!563, !"_ZN3hwy6N_AVX2L4LoadENS0_4SimdIfLm8EEEPKf"}
!564 = !{!565}
!565 = distinct !{!565, !563, !"_ZN3hwy6N_AVX2L4LoadENS0_4SimdIfLm8EEEPKf: argument 0"}
!566 = !{!567}
!567 = distinct !{!567, !568, !"_ZN3hwy6N_AVX2L5LoadUENS0_4SimdIfLm8EEEPKf: argument 1"}
!568 = distinct !{!568, !"_ZN3hwy6N_AVX2L5LoadUENS0_4SimdIfLm8EEEPKf"}
!569 = !{!570}
!570 = distinct !{!570, !568, !"_ZN3hwy6N_AVX2L5LoadUENS0_4SimdIfLm8EEEPKf: argument 0"}
!571 = !{!572}
!572 = distinct !{!572, !573, !"_ZN3hwy6N_AVX2L5LoadUENS0_4SimdIfLm8EEEPKf: argument 1"}
!573 = distinct !{!573, !"_ZN3hwy6N_AVX2L5LoadUENS0_4SimdIfLm8EEEPKf"}
!574 = !{!575}
!575 = distinct !{!575, !573, !"_ZN3hwy6N_AVX2L5LoadUENS0_4SimdIfLm8EEEPKf: argument 0"}
!576 = !{!577}
!577 = distinct !{!577, !578, !"_ZN3hwy6N_AVX2L5LoadUENS0_4SimdIfLm8EEEPKf: argument 1"}
!578 = distinct !{!578, !"_ZN3hwy6N_AVX2L5LoadUENS0_4SimdIfLm8EEEPKf"}
!579 = !{!580}
!580 = distinct !{!580, !578, !"_ZN3hwy6N_AVX2L5LoadUENS0_4SimdIfLm8EEEPKf: argument 0"}
!581 = !{!582}
!582 = distinct !{!582, !583, !"_ZN3hwy6N_AVX2L5LoadUENS0_4SimdIfLm8EEEPKf: argument 1"}
!583 = distinct !{!583, !"_ZN3hwy6N_AVX2L5LoadUENS0_4SimdIfLm8EEEPKf"}
!584 = !{!585}
!585 = distinct !{!585, !583, !"_ZN3hwy6N_AVX2L5LoadUENS0_4SimdIfLm8EEEPKf: argument 0"}
!586 = !{!587}
!587 = distinct !{!587, !588, !"_ZN3hwy6N_AVX2L5LoadUENS0_4SimdIfLm8EEEPKf: argument 1"}
!588 = distinct !{!588, !"_ZN3hwy6N_AVX2L5LoadUENS0_4SimdIfLm8EEEPKf"}
!589 = !{!590}
!590 = distinct !{!590, !588, !"_ZN3hwy6N_AVX2L5LoadUENS0_4SimdIfLm8EEEPKf: argument 0"}
!591 = !{!592}
!592 = distinct !{!592, !593, !"_ZN3hwy6N_AVX2L5LoadUENS0_4SimdIfLm8EEEPKf: argument 1"}
!593 = distinct !{!593, !"_ZN3hwy6N_AVX2L5LoadUENS0_4SimdIfLm8EEEPKf"}
!594 = !{!595}
!595 = distinct !{!595, !593, !"_ZN3hwy6N_AVX2L5LoadUENS0_4SimdIfLm8EEEPKf: argument 0"}
!596 = !{!597}
!597 = distinct !{!597, !598, !"_ZN3hwy6N_AVX2L5LoadUENS0_4SimdIfLm8EEEPKf: argument 1"}
!598 = distinct !{!598, !"_ZN3hwy6N_AVX2L5LoadUENS0_4SimdIfLm8EEEPKf"}
!599 = !{!600}
!600 = distinct !{!600, !598, !"_ZN3hwy6N_AVX2L5LoadUENS0_4SimdIfLm8EEEPKf: argument 0"}
!601 = !{!602}
!602 = distinct !{!602, !603, !"_ZN3hwy6N_AVX2L5LoadUENS0_4SimdIfLm8EEEPKf: argument 1"}
!603 = distinct !{!603, !"_ZN3hwy6N_AVX2L5LoadUENS0_4SimdIfLm8EEEPKf"}
!604 = !{!605}
!605 = distinct !{!605, !603, !"_ZN3hwy6N_AVX2L5LoadUENS0_4SimdIfLm8EEEPKf: argument 0"}
!606 = !{!607}
!607 = distinct !{!607, !608, !"_ZN3hwy6N_AVX2L4LoadENS0_4SimdIfLm8EEEPKf: argument 1"}
!608 = distinct !{!608, !"_ZN3hwy6N_AVX2L4LoadENS0_4SimdIfLm8EEEPKf"}
!609 = !{!610}
!610 = distinct !{!610, !608, !"_ZN3hwy6N_AVX2L4LoadENS0_4SimdIfLm8EEEPKf: argument 0"}
!611 = !{!612}
!612 = distinct !{!612, !613, !"_ZN3hwy6N_AVX2L5LoadUENS0_4SimdIfLm8EEEPKf: argument 1"}
!613 = distinct !{!613, !"_ZN3hwy6N_AVX2L5LoadUENS0_4SimdIfLm8EEEPKf"}
!614 = !{!615}
!615 = distinct !{!615, !613, !"_ZN3hwy6N_AVX2L5LoadUENS0_4SimdIfLm8EEEPKf: argument 0"}
!616 = !{!617}
!617 = distinct !{!617, !618, !"_ZN3hwy6N_AVX2L4LoadENS0_4SimdIfLm8EEEPKf: argument 1"}
!618 = distinct !{!618, !"_ZN3hwy6N_AVX2L4LoadENS0_4SimdIfLm8EEEPKf"}
!619 = !{!620}
!620 = distinct !{!620, !618, !"_ZN3hwy6N_AVX2L4LoadENS0_4SimdIfLm8EEEPKf: argument 0"}
!621 = !{!622, !446}
!622 = distinct !{!622, !623, !"_ZN3hwy6N_AVX2L5StoreENS0_6Vec256IfEENS0_4SimdIfLm8EEEPf: argument 0"}
!623 = distinct !{!623, !"_ZN3hwy6N_AVX2L5StoreENS0_6Vec256IfEENS0_4SimdIfLm8EEEPf"}
!624 = !{!625}
!625 = distinct !{!625, !626, !"_ZN3hwy6N_AVX2L5StoreENS0_6Vec256IfEENS0_4SimdIfLm8EEEPf: argument 0"}
!626 = distinct !{!626, !"_ZN3hwy6N_AVX2L5StoreENS0_6Vec256IfEENS0_4SimdIfLm8EEEPf"}
!627 = !{!628}
!628 = distinct !{!628, !629, !"_ZN3hwy6N_AVX2L4LoadENS0_4SimdIfLm8EEEPKf: argument 1"}
!629 = distinct !{!629, !"_ZN3hwy6N_AVX2L4LoadENS0_4SimdIfLm8EEEPKf"}
!630 = !{!631}
!631 = distinct !{!631, !629, !"_ZN3hwy6N_AVX2L4LoadENS0_4SimdIfLm8EEEPKf: argument 0"}
!632 = !{!633}
!633 = distinct !{!633, !634, !"_ZN3hwy6N_AVX2L5StoreENS0_6Vec256IfEENS0_4SimdIfLm8EEEPf: argument 0"}
!634 = distinct !{!634, !"_ZN3hwy6N_AVX2L5StoreENS0_6Vec256IfEENS0_4SimdIfLm8EEEPf"}
!635 = !{!636}
!636 = distinct !{!636, !637, !"_ZN3hwy6N_AVX2L4LoadENS0_4SimdIfLm8EEEPKf: argument 1"}
!637 = distinct !{!637, !"_ZN3hwy6N_AVX2L4LoadENS0_4SimdIfLm8EEEPKf"}
!638 = !{!639}
!639 = distinct !{!639, !637, !"_ZN3hwy6N_AVX2L4LoadENS0_4SimdIfLm8EEEPKf: argument 0"}
!640 = !{!641}
!641 = distinct !{!641, !642, !"_ZN3hwy6N_AVX2L4LoadENS0_4SimdIfLm8EEEPKf: argument 1"}
!642 = distinct !{!642, !"_ZN3hwy6N_AVX2L4LoadENS0_4SimdIfLm8EEEPKf"}
!643 = !{!644}
!644 = distinct !{!644, !642, !"_ZN3hwy6N_AVX2L4LoadENS0_4SimdIfLm8EEEPKf: argument 0"}
!645 = !{!646}
!646 = distinct !{!646, !647, !"_ZN3hwy6N_AVX2L4LoadENS0_4SimdIfLm8EEEPKf: argument 1"}
!647 = distinct !{!647, !"_ZN3hwy6N_AVX2L4LoadENS0_4SimdIfLm8EEEPKf"}
!648 = !{!649}
!649 = distinct !{!649, !647, !"_ZN3hwy6N_AVX2L4LoadENS0_4SimdIfLm8EEEPKf: argument 0"}
!650 = !{!651}
!651 = distinct !{!651, !652, !"_ZN3hwy6N_AVX2L4LoadENS0_4SimdIfLm8EEEPKf: argument 1"}
!652 = distinct !{!652, !"_ZN3hwy6N_AVX2L4LoadENS0_4SimdIfLm8EEEPKf"}
!653 = !{!654}
!654 = distinct !{!654, !652, !"_ZN3hwy6N_AVX2L4LoadENS0_4SimdIfLm8EEEPKf: argument 0"}
!655 = !{!656, !658, !659, !660}
!656 = distinct !{!656, !657, !"_ZN3jxl6N_AVX213AddPixelStep2ILb1EEEviRKNS_10FilterRowsEmN3hwy6N_AVX26Vec256IfEES8_S8_S8_RKNS_10LoopFilterEPS8_SC_SC_SC_: argument 0"}
!657 = distinct !{!657, !"_ZN3jxl6N_AVX213AddPixelStep2ILb1EEEviRKNS_10FilterRowsEmN3hwy6N_AVX26Vec256IfEES8_S8_S8_RKNS_10LoopFilterEPS8_SC_SC_SC_"}
!658 = distinct !{!658, !657, !"_ZN3jxl6N_AVX213AddPixelStep2ILb1EEEviRKNS_10FilterRowsEmN3hwy6N_AVX26Vec256IfEES8_S8_S8_RKNS_10LoopFilterEPS8_SC_SC_SC_: argument 1"}
!659 = distinct !{!659, !657, !"_ZN3jxl6N_AVX213AddPixelStep2ILb1EEEviRKNS_10FilterRowsEmN3hwy6N_AVX26Vec256IfEES8_S8_S8_RKNS_10LoopFilterEPS8_SC_SC_SC_: argument 2"}
!660 = distinct !{!660, !657, !"_ZN3jxl6N_AVX213AddPixelStep2ILb1EEEviRKNS_10FilterRowsEmN3hwy6N_AVX26Vec256IfEES8_S8_S8_RKNS_10LoopFilterEPS8_SC_SC_SC_: argument 3"}
!661 = !{!662}
!662 = distinct !{!662, !663, !"_ZN3hwy6N_AVX2L4LoadENS0_4SimdIfLm8EEEPKf: argument 1"}
!663 = distinct !{!663, !"_ZN3hwy6N_AVX2L4LoadENS0_4SimdIfLm8EEEPKf"}
!664 = !{!665, !656, !658, !659, !660}
!665 = distinct !{!665, !663, !"_ZN3hwy6N_AVX2L4LoadENS0_4SimdIfLm8EEEPKf: argument 0"}
!666 = !{!667}
!667 = distinct !{!667, !668, !"_ZN3hwy6N_AVX2L4LoadENS0_4SimdIfLm8EEEPKf: argument 1"}
!668 = distinct !{!668, !"_ZN3hwy6N_AVX2L4LoadENS0_4SimdIfLm8EEEPKf"}
!669 = !{!670, !656, !658, !659, !660}
!670 = distinct !{!670, !668, !"_ZN3hwy6N_AVX2L4LoadENS0_4SimdIfLm8EEEPKf: argument 0"}
!671 = !{!672}
!672 = distinct !{!672, !673, !"_ZN3hwy6N_AVX2L4LoadENS0_4SimdIfLm8EEEPKf: argument 1"}
!673 = distinct !{!673, !"_ZN3hwy6N_AVX2L4LoadENS0_4SimdIfLm8EEEPKf"}
!674 = !{!675, !656, !658, !659, !660}
!675 = distinct !{!675, !673, !"_ZN3hwy6N_AVX2L4LoadENS0_4SimdIfLm8EEEPKf: argument 0"}
!676 = !{!677}
!677 = distinct !{!677, !678, !"_ZN3hwy6N_AVX2L5LoadUENS0_4SimdIfLm8EEEPKf: argument 1"}
!678 = distinct !{!678, !"_ZN3hwy6N_AVX2L5LoadUENS0_4SimdIfLm8EEEPKf"}
!679 = !{!680, !681, !683, !684, !685}
!680 = distinct !{!680, !678, !"_ZN3hwy6N_AVX2L5LoadUENS0_4SimdIfLm8EEEPKf: argument 0"}
!681 = distinct !{!681, !682, !"_ZN3jxl6N_AVX213AddPixelStep2ILb0EEEviRKNS_10FilterRowsEmN3hwy6N_AVX26Vec256IfEES8_S8_S8_RKNS_10LoopFilterEPS8_SC_SC_SC_: argument 0"}
!682 = distinct !{!682, !"_ZN3jxl6N_AVX213AddPixelStep2ILb0EEEviRKNS_10FilterRowsEmN3hwy6N_AVX26Vec256IfEES8_S8_S8_RKNS_10LoopFilterEPS8_SC_SC_SC_"}
!683 = distinct !{!683, !682, !"_ZN3jxl6N_AVX213AddPixelStep2ILb0EEEviRKNS_10FilterRowsEmN3hwy6N_AVX26Vec256IfEES8_S8_S8_RKNS_10LoopFilterEPS8_SC_SC_SC_: argument 1"}
!684 = distinct !{!684, !682, !"_ZN3jxl6N_AVX213AddPixelStep2ILb0EEEviRKNS_10FilterRowsEmN3hwy6N_AVX26Vec256IfEES8_S8_S8_RKNS_10LoopFilterEPS8_SC_SC_SC_: argument 2"}
!685 = distinct !{!685, !682, !"_ZN3jxl6N_AVX213AddPixelStep2ILb0EEEviRKNS_10FilterRowsEmN3hwy6N_AVX26Vec256IfEES8_S8_S8_RKNS_10LoopFilterEPS8_SC_SC_SC_: argument 3"}
!686 = !{!687}
!687 = distinct !{!687, !688, !"_ZN3hwy6N_AVX2L5LoadUENS0_4SimdIfLm8EEEPKf: argument 1"}
!688 = distinct !{!688, !"_ZN3hwy6N_AVX2L5LoadUENS0_4SimdIfLm8EEEPKf"}
!689 = !{!690, !681, !683, !684, !685}
!690 = distinct !{!690, !688, !"_ZN3hwy6N_AVX2L5LoadUENS0_4SimdIfLm8EEEPKf: argument 0"}
!691 = !{!692}
!692 = distinct !{!692, !693, !"_ZN3hwy6N_AVX2L5LoadUENS0_4SimdIfLm8EEEPKf: argument 1"}
!693 = distinct !{!693, !"_ZN3hwy6N_AVX2L5LoadUENS0_4SimdIfLm8EEEPKf"}
!694 = !{!695, !681, !683, !684, !685}
!695 = distinct !{!695, !693, !"_ZN3hwy6N_AVX2L5LoadUENS0_4SimdIfLm8EEEPKf: argument 0"}
!696 = !{!697}
!697 = distinct !{!697, !698, !"_ZN3hwy6N_AVX2L5LoadUENS0_4SimdIfLm8EEEPKf: argument 1"}
!698 = distinct !{!698, !"_ZN3hwy6N_AVX2L5LoadUENS0_4SimdIfLm8EEEPKf"}
!699 = !{!700, !701, !703, !704, !705}
!700 = distinct !{!700, !698, !"_ZN3hwy6N_AVX2L5LoadUENS0_4SimdIfLm8EEEPKf: argument 0"}
!701 = distinct !{!701, !702, !"_ZN3jxl6N_AVX213AddPixelStep2ILb0EEEviRKNS_10FilterRowsEmN3hwy6N_AVX26Vec256IfEES8_S8_S8_RKNS_10LoopFilterEPS8_SC_SC_SC_: argument 0"}
!702 = distinct !{!702, !"_ZN3jxl6N_AVX213AddPixelStep2ILb0EEEviRKNS_10FilterRowsEmN3hwy6N_AVX26Vec256IfEES8_S8_S8_RKNS_10LoopFilterEPS8_SC_SC_SC_"}
!703 = distinct !{!703, !702, !"_ZN3jxl6N_AVX213AddPixelStep2ILb0EEEviRKNS_10FilterRowsEmN3hwy6N_AVX26Vec256IfEES8_S8_S8_RKNS_10LoopFilterEPS8_SC_SC_SC_: argument 1"}
!704 = distinct !{!704, !702, !"_ZN3jxl6N_AVX213AddPixelStep2ILb0EEEviRKNS_10FilterRowsEmN3hwy6N_AVX26Vec256IfEES8_S8_S8_RKNS_10LoopFilterEPS8_SC_SC_SC_: argument 2"}
!705 = distinct !{!705, !702, !"_ZN3jxl6N_AVX213AddPixelStep2ILb0EEEviRKNS_10FilterRowsEmN3hwy6N_AVX26Vec256IfEES8_S8_S8_RKNS_10LoopFilterEPS8_SC_SC_SC_: argument 3"}
!706 = !{!707}
!707 = distinct !{!707, !708, !"_ZN3hwy6N_AVX2L5LoadUENS0_4SimdIfLm8EEEPKf: argument 1"}
!708 = distinct !{!708, !"_ZN3hwy6N_AVX2L5LoadUENS0_4SimdIfLm8EEEPKf"}
!709 = !{!710, !701, !703, !704, !705}
!710 = distinct !{!710, !708, !"_ZN3hwy6N_AVX2L5LoadUENS0_4SimdIfLm8EEEPKf: argument 0"}
!711 = !{!712}
!712 = distinct !{!712, !713, !"_ZN3hwy6N_AVX2L5LoadUENS0_4SimdIfLm8EEEPKf: argument 1"}
!713 = distinct !{!713, !"_ZN3hwy6N_AVX2L5LoadUENS0_4SimdIfLm8EEEPKf"}
!714 = !{!715, !701, !703, !704, !705}
!715 = distinct !{!715, !713, !"_ZN3hwy6N_AVX2L5LoadUENS0_4SimdIfLm8EEEPKf: argument 0"}
!716 = !{!717, !719, !720, !721}
!717 = distinct !{!717, !718, !"_ZN3jxl6N_AVX213AddPixelStep2ILb1EEEviRKNS_10FilterRowsEmN3hwy6N_AVX26Vec256IfEES8_S8_S8_RKNS_10LoopFilterEPS8_SC_SC_SC_: argument 0"}
!718 = distinct !{!718, !"_ZN3jxl6N_AVX213AddPixelStep2ILb1EEEviRKNS_10FilterRowsEmN3hwy6N_AVX26Vec256IfEES8_S8_S8_RKNS_10LoopFilterEPS8_SC_SC_SC_"}
!719 = distinct !{!719, !718, !"_ZN3jxl6N_AVX213AddPixelStep2ILb1EEEviRKNS_10FilterRowsEmN3hwy6N_AVX26Vec256IfEES8_S8_S8_RKNS_10LoopFilterEPS8_SC_SC_SC_: argument 1"}
!720 = distinct !{!720, !718, !"_ZN3jxl6N_AVX213AddPixelStep2ILb1EEEviRKNS_10FilterRowsEmN3hwy6N_AVX26Vec256IfEES8_S8_S8_RKNS_10LoopFilterEPS8_SC_SC_SC_: argument 2"}
!721 = distinct !{!721, !718, !"_ZN3jxl6N_AVX213AddPixelStep2ILb1EEEviRKNS_10FilterRowsEmN3hwy6N_AVX26Vec256IfEES8_S8_S8_RKNS_10LoopFilterEPS8_SC_SC_SC_: argument 3"}
!722 = !{!723}
!723 = distinct !{!723, !724, !"_ZN3hwy6N_AVX2L4LoadENS0_4SimdIfLm8EEEPKf: argument 1"}
!724 = distinct !{!724, !"_ZN3hwy6N_AVX2L4LoadENS0_4SimdIfLm8EEEPKf"}
!725 = !{!726, !717, !719, !720, !721}
!726 = distinct !{!726, !724, !"_ZN3hwy6N_AVX2L4LoadENS0_4SimdIfLm8EEEPKf: argument 0"}
!727 = !{!728}
!728 = distinct !{!728, !729, !"_ZN3hwy6N_AVX2L4LoadENS0_4SimdIfLm8EEEPKf: argument 1"}
!729 = distinct !{!729, !"_ZN3hwy6N_AVX2L4LoadENS0_4SimdIfLm8EEEPKf"}
!730 = !{!731, !717, !719, !720, !721}
!731 = distinct !{!731, !729, !"_ZN3hwy6N_AVX2L4LoadENS0_4SimdIfLm8EEEPKf: argument 0"}
!732 = !{!733}
!733 = distinct !{!733, !734, !"_ZN3hwy6N_AVX2L4LoadENS0_4SimdIfLm8EEEPKf: argument 1"}
!734 = distinct !{!734, !"_ZN3hwy6N_AVX2L4LoadENS0_4SimdIfLm8EEEPKf"}
!735 = !{!736, !717, !719, !720, !721}
!736 = distinct !{!736, !734, !"_ZN3hwy6N_AVX2L4LoadENS0_4SimdIfLm8EEEPKf: argument 0"}
!737 = !{!738}
!738 = distinct !{!738, !739, !"_ZN3hwy6N_AVX2L5StoreENS0_6Vec256IfEENS0_4SimdIfLm8EEEPf: argument 0"}
!739 = distinct !{!739, !"_ZN3hwy6N_AVX2L5StoreENS0_6Vec256IfEENS0_4SimdIfLm8EEEPf"}
!740 = !{!741}
!741 = distinct !{!741, !742, !"_ZN3hwy6N_AVX2L5StoreENS0_6Vec256IfEENS0_4SimdIfLm8EEEPf: argument 0"}
!742 = distinct !{!742, !"_ZN3hwy6N_AVX2L5StoreENS0_6Vec256IfEENS0_4SimdIfLm8EEEPf"}
!743 = !{!744, !633}
!744 = distinct !{!744, !745, !"_ZN3hwy6N_AVX2L5StoreENS0_6Vec256IfEENS0_4SimdIfLm8EEEPf: argument 0"}
!745 = distinct !{!745, !"_ZN3hwy6N_AVX2L5StoreENS0_6Vec256IfEENS0_4SimdIfLm8EEEPf"}
!746 = !{!747, !749}
!747 = distinct !{!747, !748, !"_ZN3hwy6N_AVX3L5LoadUENS0_4SimdIfLm8EEEPKf: argument 1"}
!748 = distinct !{!748, !"_ZN3hwy6N_AVX3L5LoadUENS0_4SimdIfLm8EEEPKf"}
!749 = distinct !{!749, !750, !"_ZN3jxl6N_AVX314GaborishVectorIN3hwy6N_AVX34SimdIfLm8EEENS3_6Vec256IfEEEEvT_PKfSA_SA_T0_SB_SB_Pf: argument 0"}
!750 = distinct !{!750, !"_ZN3jxl6N_AVX314GaborishVectorIN3hwy6N_AVX34SimdIfLm8EEENS3_6Vec256IfEEEEvT_PKfSA_SA_T0_SB_SB_Pf"}
!751 = !{!752, !753, !754, !755}
!752 = distinct !{!752, !748, !"_ZN3hwy6N_AVX3L5LoadUENS0_4SimdIfLm8EEEPKf: argument 0"}
!753 = distinct !{!753, !750, !"_ZN3jxl6N_AVX314GaborishVectorIN3hwy6N_AVX34SimdIfLm8EEENS3_6Vec256IfEEEEvT_PKfSA_SA_T0_SB_SB_Pf: argument 1"}
!754 = distinct !{!754, !750, !"_ZN3jxl6N_AVX314GaborishVectorIN3hwy6N_AVX34SimdIfLm8EEENS3_6Vec256IfEEEEvT_PKfSA_SA_T0_SB_SB_Pf: argument 2"}
!755 = distinct !{!755, !750, !"_ZN3jxl6N_AVX314GaborishVectorIN3hwy6N_AVX34SimdIfLm8EEENS3_6Vec256IfEEEEvT_PKfSA_SA_T0_SB_SB_Pf: argument 3"}
!756 = !{!757, !749}
!757 = distinct !{!757, !758, !"_ZN3hwy6N_AVX3L5LoadUENS0_4SimdIfLm8EEEPKf: argument 1"}
!758 = distinct !{!758, !"_ZN3hwy6N_AVX3L5LoadUENS0_4SimdIfLm8EEEPKf"}
!759 = !{!760, !753, !754, !755}
!760 = distinct !{!760, !758, !"_ZN3hwy6N_AVX3L5LoadUENS0_4SimdIfLm8EEEPKf: argument 0"}
!761 = !{!762, !749}
!762 = distinct !{!762, !763, !"_ZN3hwy6N_AVX3L5LoadUENS0_4SimdIfLm8EEEPKf: argument 1"}
!763 = distinct !{!763, !"_ZN3hwy6N_AVX3L5LoadUENS0_4SimdIfLm8EEEPKf"}
!764 = !{!765, !753, !754, !755}
!765 = distinct !{!765, !763, !"_ZN3hwy6N_AVX3L5LoadUENS0_4SimdIfLm8EEEPKf: argument 0"}
!766 = !{!767, !753}
!767 = distinct !{!767, !768, !"_ZN3hwy6N_AVX3L5LoadUENS0_4SimdIfLm8EEEPKf: argument 1"}
!768 = distinct !{!768, !"_ZN3hwy6N_AVX3L5LoadUENS0_4SimdIfLm8EEEPKf"}
!769 = !{!770, !749, !754, !755}
!770 = distinct !{!770, !768, !"_ZN3hwy6N_AVX3L5LoadUENS0_4SimdIfLm8EEEPKf: argument 0"}
!771 = !{!772, !753}
!772 = distinct !{!772, !773, !"_ZN3hwy6N_AVX3L5LoadUENS0_4SimdIfLm8EEEPKf: argument 1"}
!773 = distinct !{!773, !"_ZN3hwy6N_AVX3L5LoadUENS0_4SimdIfLm8EEEPKf"}
!774 = !{!775, !749, !754, !755}
!775 = distinct !{!775, !773, !"_ZN3hwy6N_AVX3L5LoadUENS0_4SimdIfLm8EEEPKf: argument 0"}
!776 = !{!777, !753}
!777 = distinct !{!777, !778, !"_ZN3hwy6N_AVX3L5LoadUENS0_4SimdIfLm8EEEPKf: argument 1"}
!778 = distinct !{!778, !"_ZN3hwy6N_AVX3L5LoadUENS0_4SimdIfLm8EEEPKf"}
!779 = !{!780, !749, !754, !755}
!780 = distinct !{!780, !778, !"_ZN3hwy6N_AVX3L5LoadUENS0_4SimdIfLm8EEEPKf: argument 0"}
!781 = !{!782, !754}
!782 = distinct !{!782, !783, !"_ZN3hwy6N_AVX3L5LoadUENS0_4SimdIfLm8EEEPKf: argument 1"}
!783 = distinct !{!783, !"_ZN3hwy6N_AVX3L5LoadUENS0_4SimdIfLm8EEEPKf"}
!784 = !{!785, !749, !753, !755}
!785 = distinct !{!785, !783, !"_ZN3hwy6N_AVX3L5LoadUENS0_4SimdIfLm8EEEPKf: argument 0"}
!786 = !{!787, !754}
!787 = distinct !{!787, !788, !"_ZN3hwy6N_AVX3L5LoadUENS0_4SimdIfLm8EEEPKf: argument 1"}
!788 = distinct !{!788, !"_ZN3hwy6N_AVX3L5LoadUENS0_4SimdIfLm8EEEPKf"}
!789 = !{!790, !749, !753, !755}
!790 = distinct !{!790, !788, !"_ZN3hwy6N_AVX3L5LoadUENS0_4SimdIfLm8EEEPKf: argument 0"}
!791 = !{!792, !754}
!792 = distinct !{!792, !793, !"_ZN3hwy6N_AVX3L5LoadUENS0_4SimdIfLm8EEEPKf: argument 1"}
!793 = distinct !{!793, !"_ZN3hwy6N_AVX3L5LoadUENS0_4SimdIfLm8EEEPKf"}
!794 = !{!795, !749, !753, !755}
!795 = distinct !{!795, !793, !"_ZN3hwy6N_AVX3L5LoadUENS0_4SimdIfLm8EEEPKf: argument 0"}
!796 = !{!797, !755}
!797 = distinct !{!797, !798, !"_ZN3hwy6N_AVX3L5StoreENS0_6Vec256IfEENS0_4SimdIfLm8EEEPf: argument 0"}
!798 = distinct !{!798, !"_ZN3hwy6N_AVX3L5StoreENS0_6Vec256IfEENS0_4SimdIfLm8EEEPf"}
!799 = !{!749, !753, !754}
!800 = !{!801, !803}
!801 = distinct !{!801, !802, !"_ZN3hwy6N_AVX3L5LoadUENS0_4SimdIfLm16EEEPKf: argument 1"}
!802 = distinct !{!802, !"_ZN3hwy6N_AVX3L5LoadUENS0_4SimdIfLm16EEEPKf"}
!803 = distinct !{!803, !804, !"_ZN3jxl6N_AVX314GaborishVectorIN3hwy6N_AVX34SimdIfLm16EEENS3_6Vec512IfEEEEvT_PKfSA_SA_T0_SB_SB_Pf: argument 0"}
!804 = distinct !{!804, !"_ZN3jxl6N_AVX314GaborishVectorIN3hwy6N_AVX34SimdIfLm16EEENS3_6Vec512IfEEEEvT_PKfSA_SA_T0_SB_SB_Pf"}
!805 = !{!806, !807, !808, !809}
!806 = distinct !{!806, !802, !"_ZN3hwy6N_AVX3L5LoadUENS0_4SimdIfLm16EEEPKf: argument 0"}
!807 = distinct !{!807, !804, !"_ZN3jxl6N_AVX314GaborishVectorIN3hwy6N_AVX34SimdIfLm16EEENS3_6Vec512IfEEEEvT_PKfSA_SA_T0_SB_SB_Pf: argument 1"}
!808 = distinct !{!808, !804, !"_ZN3jxl6N_AVX314GaborishVectorIN3hwy6N_AVX34SimdIfLm16EEENS3_6Vec512IfEEEEvT_PKfSA_SA_T0_SB_SB_Pf: argument 2"}
!809 = distinct !{!809, !804, !"_ZN3jxl6N_AVX314GaborishVectorIN3hwy6N_AVX34SimdIfLm16EEENS3_6Vec512IfEEEEvT_PKfSA_SA_T0_SB_SB_Pf: argument 3"}
!810 = !{!811, !803}
!811 = distinct !{!811, !812, !"_ZN3hwy6N_AVX3L5LoadUENS0_4SimdIfLm16EEEPKf: argument 1"}
!812 = distinct !{!812, !"_ZN3hwy6N_AVX3L5LoadUENS0_4SimdIfLm16EEEPKf"}
!813 = !{!814, !807, !808, !809}
!814 = distinct !{!814, !812, !"_ZN3hwy6N_AVX3L5LoadUENS0_4SimdIfLm16EEEPKf: argument 0"}
!815 = !{!816, !803}
!816 = distinct !{!816, !817, !"_ZN3hwy6N_AVX3L5LoadUENS0_4SimdIfLm16EEEPKf: argument 1"}
!817 = distinct !{!817, !"_ZN3hwy6N_AVX3L5LoadUENS0_4SimdIfLm16EEEPKf"}
!818 = !{!819, !807, !808, !809}
!819 = distinct !{!819, !817, !"_ZN3hwy6N_AVX3L5LoadUENS0_4SimdIfLm16EEEPKf: argument 0"}
!820 = !{!821, !807}
!821 = distinct !{!821, !822, !"_ZN3hwy6N_AVX3L5LoadUENS0_4SimdIfLm16EEEPKf: argument 1"}
!822 = distinct !{!822, !"_ZN3hwy6N_AVX3L5LoadUENS0_4SimdIfLm16EEEPKf"}
!823 = !{!824, !803, !808, !809}
!824 = distinct !{!824, !822, !"_ZN3hwy6N_AVX3L5LoadUENS0_4SimdIfLm16EEEPKf: argument 0"}
!825 = !{!826, !807}
!826 = distinct !{!826, !827, !"_ZN3hwy6N_AVX3L5LoadUENS0_4SimdIfLm16EEEPKf: argument 1"}
!827 = distinct !{!827, !"_ZN3hwy6N_AVX3L5LoadUENS0_4SimdIfLm16EEEPKf"}
!828 = !{!829, !803, !808, !809}
!829 = distinct !{!829, !827, !"_ZN3hwy6N_AVX3L5LoadUENS0_4SimdIfLm16EEEPKf: argument 0"}
!830 = !{!831, !807}
!831 = distinct !{!831, !832, !"_ZN3hwy6N_AVX3L5LoadUENS0_4SimdIfLm16EEEPKf: argument 1"}
!832 = distinct !{!832, !"_ZN3hwy6N_AVX3L5LoadUENS0_4SimdIfLm16EEEPKf"}
!833 = !{!834, !803, !808, !809}
!834 = distinct !{!834, !832, !"_ZN3hwy6N_AVX3L5LoadUENS0_4SimdIfLm16EEEPKf: argument 0"}
!835 = !{!836, !808}
!836 = distinct !{!836, !837, !"_ZN3hwy6N_AVX3L5LoadUENS0_4SimdIfLm16EEEPKf: argument 1"}
!837 = distinct !{!837, !"_ZN3hwy6N_AVX3L5LoadUENS0_4SimdIfLm16EEEPKf"}
!838 = !{!839, !803, !807, !809}
!839 = distinct !{!839, !837, !"_ZN3hwy6N_AVX3L5LoadUENS0_4SimdIfLm16EEEPKf: argument 0"}
!840 = !{!841, !808}
!841 = distinct !{!841, !842, !"_ZN3hwy6N_AVX3L5LoadUENS0_4SimdIfLm16EEEPKf: argument 1"}
!842 = distinct !{!842, !"_ZN3hwy6N_AVX3L5LoadUENS0_4SimdIfLm16EEEPKf"}
!843 = !{!844, !803, !807, !809}
!844 = distinct !{!844, !842, !"_ZN3hwy6N_AVX3L5LoadUENS0_4SimdIfLm16EEEPKf: argument 0"}
!845 = !{!846, !808}
!846 = distinct !{!846, !847, !"_ZN3hwy6N_AVX3L5LoadUENS0_4SimdIfLm16EEEPKf: argument 1"}
!847 = distinct !{!847, !"_ZN3hwy6N_AVX3L5LoadUENS0_4SimdIfLm16EEEPKf"}
!848 = !{!849, !803, !807, !809}
!849 = distinct !{!849, !847, !"_ZN3hwy6N_AVX3L5LoadUENS0_4SimdIfLm16EEEPKf: argument 0"}
!850 = !{!851, !809}
!851 = distinct !{!851, !852, !"_ZN3hwy6N_AVX3L5StoreENS0_6Vec512IfEENS0_4SimdIfLm16EEEPf: argument 0"}
!852 = distinct !{!852, !"_ZN3hwy6N_AVX3L5StoreENS0_6Vec512IfEENS0_4SimdIfLm16EEEPf"}
!853 = !{!803, !807, !808}
!854 = !{!855, !857}
!855 = distinct !{!855, !856, !"_ZN3hwy6N_AVX3L5LoadUENS0_4SimdIfLm8EEEPKf: argument 1"}
!856 = distinct !{!856, !"_ZN3hwy6N_AVX3L5LoadUENS0_4SimdIfLm8EEEPKf"}
!857 = distinct !{!857, !858, !"_ZN3jxl6N_AVX314GaborishVectorIN3hwy6N_AVX34SimdIfLm8EEENS3_6Vec256IfEEEEvT_PKfSA_SA_T0_SB_SB_Pf: argument 0"}
!858 = distinct !{!858, !"_ZN3jxl6N_AVX314GaborishVectorIN3hwy6N_AVX34SimdIfLm8EEENS3_6Vec256IfEEEEvT_PKfSA_SA_T0_SB_SB_Pf"}
!859 = !{!860, !861, !862, !863}
!860 = distinct !{!860, !856, !"_ZN3hwy6N_AVX3L5LoadUENS0_4SimdIfLm8EEEPKf: argument 0"}
!861 = distinct !{!861, !858, !"_ZN3jxl6N_AVX314GaborishVectorIN3hwy6N_AVX34SimdIfLm8EEENS3_6Vec256IfEEEEvT_PKfSA_SA_T0_SB_SB_Pf: argument 1"}
!862 = distinct !{!862, !858, !"_ZN3jxl6N_AVX314GaborishVectorIN3hwy6N_AVX34SimdIfLm8EEENS3_6Vec256IfEEEEvT_PKfSA_SA_T0_SB_SB_Pf: argument 2"}
!863 = distinct !{!863, !858, !"_ZN3jxl6N_AVX314GaborishVectorIN3hwy6N_AVX34SimdIfLm8EEENS3_6Vec256IfEEEEvT_PKfSA_SA_T0_SB_SB_Pf: argument 3"}
!864 = !{!865, !857}
!865 = distinct !{!865, !866, !"_ZN3hwy6N_AVX3L5LoadUENS0_4SimdIfLm8EEEPKf: argument 1"}
!866 = distinct !{!866, !"_ZN3hwy6N_AVX3L5LoadUENS0_4SimdIfLm8EEEPKf"}
!867 = !{!868, !861, !862, !863}
!868 = distinct !{!868, !866, !"_ZN3hwy6N_AVX3L5LoadUENS0_4SimdIfLm8EEEPKf: argument 0"}
!869 = !{!870, !857}
!870 = distinct !{!870, !871, !"_ZN3hwy6N_AVX3L5LoadUENS0_4SimdIfLm8EEEPKf: argument 1"}
!871 = distinct !{!871, !"_ZN3hwy6N_AVX3L5LoadUENS0_4SimdIfLm8EEEPKf"}
!872 = !{!873, !861, !862, !863}
!873 = distinct !{!873, !871, !"_ZN3hwy6N_AVX3L5LoadUENS0_4SimdIfLm8EEEPKf: argument 0"}
!874 = !{!875, !861}
!875 = distinct !{!875, !876, !"_ZN3hwy6N_AVX3L5LoadUENS0_4SimdIfLm8EEEPKf: argument 1"}
!876 = distinct !{!876, !"_ZN3hwy6N_AVX3L5LoadUENS0_4SimdIfLm8EEEPKf"}
!877 = !{!878, !857, !862, !863}
!878 = distinct !{!878, !876, !"_ZN3hwy6N_AVX3L5LoadUENS0_4SimdIfLm8EEEPKf: argument 0"}
!879 = !{!880, !861}
!880 = distinct !{!880, !881, !"_ZN3hwy6N_AVX3L5LoadUENS0_4SimdIfLm8EEEPKf: argument 1"}
!881 = distinct !{!881, !"_ZN3hwy6N_AVX3L5LoadUENS0_4SimdIfLm8EEEPKf"}
!882 = !{!883, !857, !862, !863}
!883 = distinct !{!883, !881, !"_ZN3hwy6N_AVX3L5LoadUENS0_4SimdIfLm8EEEPKf: argument 0"}
!884 = !{!885, !861}
!885 = distinct !{!885, !886, !"_ZN3hwy6N_AVX3L5LoadUENS0_4SimdIfLm8EEEPKf: argument 1"}
!886 = distinct !{!886, !"_ZN3hwy6N_AVX3L5LoadUENS0_4SimdIfLm8EEEPKf"}
!887 = !{!888, !857, !862, !863}
!888 = distinct !{!888, !886, !"_ZN3hwy6N_AVX3L5LoadUENS0_4SimdIfLm8EEEPKf: argument 0"}
!889 = !{!890, !862}
!890 = distinct !{!890, !891, !"_ZN3hwy6N_AVX3L5LoadUENS0_4SimdIfLm8EEEPKf: argument 1"}
!891 = distinct !{!891, !"_ZN3hwy6N_AVX3L5LoadUENS0_4SimdIfLm8EEEPKf"}
!892 = !{!893, !857, !861, !863}
!893 = distinct !{!893, !891, !"_ZN3hwy6N_AVX3L5LoadUENS0_4SimdIfLm8EEEPKf: argument 0"}
!894 = !{!895, !862}
!895 = distinct !{!895, !896, !"_ZN3hwy6N_AVX3L5LoadUENS0_4SimdIfLm8EEEPKf: argument 1"}
!896 = distinct !{!896, !"_ZN3hwy6N_AVX3L5LoadUENS0_4SimdIfLm8EEEPKf"}
!897 = !{!898, !857, !861, !863}
!898 = distinct !{!898, !896, !"_ZN3hwy6N_AVX3L5LoadUENS0_4SimdIfLm8EEEPKf: argument 0"}
!899 = !{!900, !862}
!900 = distinct !{!900, !901, !"_ZN3hwy6N_AVX3L5LoadUENS0_4SimdIfLm8EEEPKf: argument 1"}
!901 = distinct !{!901, !"_ZN3hwy6N_AVX3L5LoadUENS0_4SimdIfLm8EEEPKf"}
!902 = !{!903, !857, !861, !863}
!903 = distinct !{!903, !901, !"_ZN3hwy6N_AVX3L5LoadUENS0_4SimdIfLm8EEEPKf: argument 0"}
!904 = !{!905, !863}
!905 = distinct !{!905, !906, !"_ZN3hwy6N_AVX3L5StoreENS0_6Vec256IfEENS0_4SimdIfLm8EEEPf: argument 0"}
!906 = distinct !{!906, !"_ZN3hwy6N_AVX3L5StoreENS0_6Vec256IfEENS0_4SimdIfLm8EEEPf"}
!907 = !{!857, !861, !862}
!908 = !{!909}
!909 = distinct !{!909, !910, !"_ZN3hwy6N_AVX3L5StoreENS0_6Vec256IfEENS0_4SimdIfLm8EEEPf: argument 0"}
!910 = distinct !{!910, !"_ZN3hwy6N_AVX3L5StoreENS0_6Vec256IfEENS0_4SimdIfLm8EEEPf"}
!911 = !{!912}
!912 = distinct !{!912, !913, !"_ZN3hwy6N_AVX3L4LoadENS0_4SimdIfLm8EEEPKf: argument 1"}
!913 = distinct !{!913, !"_ZN3hwy6N_AVX3L4LoadENS0_4SimdIfLm8EEEPKf"}
!914 = !{!915}
!915 = distinct !{!915, !913, !"_ZN3hwy6N_AVX3L4LoadENS0_4SimdIfLm8EEEPKf: argument 0"}
!916 = !{!917}
!917 = distinct !{!917, !918, !"_ZN3hwy6N_AVX3L5StoreENS0_6Vec256IfEENS0_4SimdIfLm8EEEPf: argument 0"}
!918 = distinct !{!918, !"_ZN3hwy6N_AVX3L5StoreENS0_6Vec256IfEENS0_4SimdIfLm8EEEPf"}
!919 = !{!920}
!920 = distinct !{!920, !921, !"_ZN3hwy6N_AVX3L4LoadENS0_4SimdIfLm8EEEPKf: argument 1"}
!921 = distinct !{!921, !"_ZN3hwy6N_AVX3L4LoadENS0_4SimdIfLm8EEEPKf"}
!922 = !{!923}
!923 = distinct !{!923, !921, !"_ZN3hwy6N_AVX3L4LoadENS0_4SimdIfLm8EEEPKf: argument 0"}
!924 = !{!925}
!925 = distinct !{!925, !926, !"_ZN3hwy6N_AVX3L5LoadUENS0_4SimdIfLm8EEEPKf: argument 1"}
!926 = distinct !{!926, !"_ZN3hwy6N_AVX3L5LoadUENS0_4SimdIfLm8EEEPKf"}
!927 = !{!928}
!928 = distinct !{!928, !926, !"_ZN3hwy6N_AVX3L5LoadUENS0_4SimdIfLm8EEEPKf: argument 0"}
!929 = !{!930}
!930 = distinct !{!930, !931, !"_ZN3hwy6N_AVX3L5LoadUENS0_4SimdIfLm8EEEPKf: argument 1"}
!931 = distinct !{!931, !"_ZN3hwy6N_AVX3L5LoadUENS0_4SimdIfLm8EEEPKf"}
!932 = !{!933}
!933 = distinct !{!933, !931, !"_ZN3hwy6N_AVX3L5LoadUENS0_4SimdIfLm8EEEPKf: argument 0"}
!934 = !{!935}
!935 = distinct !{!935, !936, !"_ZN3hwy6N_AVX3L5LoadUENS0_4SimdIfLm8EEEPKf: argument 1"}
!936 = distinct !{!936, !"_ZN3hwy6N_AVX3L5LoadUENS0_4SimdIfLm8EEEPKf"}
!937 = !{!938}
!938 = distinct !{!938, !936, !"_ZN3hwy6N_AVX3L5LoadUENS0_4SimdIfLm8EEEPKf: argument 0"}
!939 = !{!940, !942, !943, !944}
!940 = distinct !{!940, !941, !"_ZN3jxl6N_AVX313AddPixelStep1ILb0EEEviRKNS_10FilterRowsEmN3hwy6N_AVX36Vec256IfEES8_RKNS_10LoopFilterEPS8_SC_SC_SC_: argument 0"}
!941 = distinct !{!941, !"_ZN3jxl6N_AVX313AddPixelStep1ILb0EEEviRKNS_10FilterRowsEmN3hwy6N_AVX36Vec256IfEES8_RKNS_10LoopFilterEPS8_SC_SC_SC_"}
!942 = distinct !{!942, !941, !"_ZN3jxl6N_AVX313AddPixelStep1ILb0EEEviRKNS_10FilterRowsEmN3hwy6N_AVX36Vec256IfEES8_RKNS_10LoopFilterEPS8_SC_SC_SC_: argument 1"}
!943 = distinct !{!943, !941, !"_ZN3jxl6N_AVX313AddPixelStep1ILb0EEEviRKNS_10FilterRowsEmN3hwy6N_AVX36Vec256IfEES8_RKNS_10LoopFilterEPS8_SC_SC_SC_: argument 2"}
!944 = distinct !{!944, !941, !"_ZN3jxl6N_AVX313AddPixelStep1ILb0EEEviRKNS_10FilterRowsEmN3hwy6N_AVX36Vec256IfEES8_RKNS_10LoopFilterEPS8_SC_SC_SC_: argument 3"}
!945 = !{!946}
!946 = distinct !{!946, !947, !"_ZN3hwy6N_AVX3L5LoadUENS0_4SimdIfLm8EEEPKf: argument 1"}
!947 = distinct !{!947, !"_ZN3hwy6N_AVX3L5LoadUENS0_4SimdIfLm8EEEPKf"}
!948 = !{!949}
!949 = distinct !{!949, !947, !"_ZN3hwy6N_AVX3L5LoadUENS0_4SimdIfLm8EEEPKf: argument 0"}
!950 = !{!951}
!951 = distinct !{!951, !952, !"_ZN3hwy6N_AVX3L5LoadUENS0_4SimdIfLm8EEEPKf: argument 1"}
!952 = distinct !{!952, !"_ZN3hwy6N_AVX3L5LoadUENS0_4SimdIfLm8EEEPKf"}
!953 = !{!954}
!954 = distinct !{!954, !952, !"_ZN3hwy6N_AVX3L5LoadUENS0_4SimdIfLm8EEEPKf: argument 0"}
!955 = !{!956}
!956 = distinct !{!956, !957, !"_ZN3hwy6N_AVX3L5StoreENS0_6Vec256IfEENS0_4SimdIfLm8EEEPf: argument 0"}
!957 = distinct !{!957, !"_ZN3hwy6N_AVX3L5StoreENS0_6Vec256IfEENS0_4SimdIfLm8EEEPf"}
!958 = !{!959}
!959 = distinct !{!959, !960, !"_ZN3hwy6N_AVX3L5StoreENS0_6Vec256IfEENS0_4SimdIfLm8EEEPf: argument 0"}
!960 = distinct !{!960, !"_ZN3hwy6N_AVX3L5StoreENS0_6Vec256IfEENS0_4SimdIfLm8EEEPf"}
!961 = !{!962}
!962 = distinct !{!962, !963, !"_ZN3hwy6N_AVX3L5StoreENS0_6Vec256IfEENS0_4SimdIfLm8EEEPf: argument 0"}
!963 = distinct !{!963, !"_ZN3hwy6N_AVX3L5StoreENS0_6Vec256IfEENS0_4SimdIfLm8EEEPf"}
!964 = !{!965}
!965 = distinct !{!965, !966, !"_ZN3hwy6N_AVX3L5LoadUENS0_4SimdIfLm8EEEPKf: argument 1"}
!966 = distinct !{!966, !"_ZN3hwy6N_AVX3L5LoadUENS0_4SimdIfLm8EEEPKf"}
!967 = !{!968, !940, !942, !943, !944}
!968 = distinct !{!968, !966, !"_ZN3hwy6N_AVX3L5LoadUENS0_4SimdIfLm8EEEPKf: argument 0"}
!969 = !{!970}
!970 = distinct !{!970, !971, !"_ZN3hwy6N_AVX3L5LoadUENS0_4SimdIfLm8EEEPKf: argument 1"}
!971 = distinct !{!971, !"_ZN3hwy6N_AVX3L5LoadUENS0_4SimdIfLm8EEEPKf"}
!972 = !{!973, !940, !942, !943, !944}
!973 = distinct !{!973, !971, !"_ZN3hwy6N_AVX3L5LoadUENS0_4SimdIfLm8EEEPKf: argument 0"}
!974 = !{!975}
!975 = distinct !{!975, !976, !"_ZN3hwy6N_AVX3L5LoadUENS0_4SimdIfLm8EEEPKf: argument 1"}
!976 = distinct !{!976, !"_ZN3hwy6N_AVX3L5LoadUENS0_4SimdIfLm8EEEPKf"}
!977 = !{!978, !940, !942, !943, !944}
!978 = distinct !{!978, !976, !"_ZN3hwy6N_AVX3L5LoadUENS0_4SimdIfLm8EEEPKf: argument 0"}
!979 = !{!980}
!980 = distinct !{!980, !981, !"_ZN3hwy6N_AVX3L5StoreENS0_6Vec256IfEENS0_4SimdIfLm8EEEPf: argument 0"}
!981 = distinct !{!981, !"_ZN3hwy6N_AVX3L5StoreENS0_6Vec256IfEENS0_4SimdIfLm8EEEPf"}
!982 = !{!983}
!983 = distinct !{!983, !984, !"_ZN3hwy6N_AVX3L4LoadENS0_4SimdIfLm8EEEPKf: argument 1"}
!984 = distinct !{!984, !"_ZN3hwy6N_AVX3L4LoadENS0_4SimdIfLm8EEEPKf"}
!985 = !{!986}
!986 = distinct !{!986, !984, !"_ZN3hwy6N_AVX3L4LoadENS0_4SimdIfLm8EEEPKf: argument 0"}
!987 = !{!988}
!988 = distinct !{!988, !989, !"_ZN3hwy6N_AVX3L5StoreENS0_6Vec256IfEENS0_4SimdIfLm8EEEPf: argument 0"}
!989 = distinct !{!989, !"_ZN3hwy6N_AVX3L5StoreENS0_6Vec256IfEENS0_4SimdIfLm8EEEPf"}
!990 = !{!991}
!991 = distinct !{!991, !992, !"_ZN3hwy6N_AVX3L4LoadENS0_4SimdIfLm8EEEPKf: argument 1"}
!992 = distinct !{!992, !"_ZN3hwy6N_AVX3L4LoadENS0_4SimdIfLm8EEEPKf"}
!993 = !{!994}
!994 = distinct !{!994, !992, !"_ZN3hwy6N_AVX3L4LoadENS0_4SimdIfLm8EEEPKf: argument 0"}
!995 = !{!996}
!996 = distinct !{!996, !997, !"_ZN3hwy6N_AVX3L4LoadENS0_4SimdIfLm8EEEPKf: argument 1"}
!997 = distinct !{!997, !"_ZN3hwy6N_AVX3L4LoadENS0_4SimdIfLm8EEEPKf"}
!998 = !{!999}
!999 = distinct !{!999, !997, !"_ZN3hwy6N_AVX3L4LoadENS0_4SimdIfLm8EEEPKf: argument 0"}
!1000 = !{!1001}
!1001 = distinct !{!1001, !1002, !"_ZN3hwy6N_AVX3L4LoadENS0_4SimdIfLm8EEEPKf: argument 1"}
!1002 = distinct !{!1002, !"_ZN3hwy6N_AVX3L4LoadENS0_4SimdIfLm8EEEPKf"}
!1003 = !{!1004}
!1004 = distinct !{!1004, !1002, !"_ZN3hwy6N_AVX3L4LoadENS0_4SimdIfLm8EEEPKf: argument 0"}
!1005 = !{!1006}
!1006 = distinct !{!1006, !1007, !"_ZN3hwy6N_AVX3L4LoadENS0_4SimdIfLm8EEEPKf: argument 1"}
!1007 = distinct !{!1007, !"_ZN3hwy6N_AVX3L4LoadENS0_4SimdIfLm8EEEPKf"}
!1008 = !{!1009}
!1009 = distinct !{!1009, !1007, !"_ZN3hwy6N_AVX3L4LoadENS0_4SimdIfLm8EEEPKf: argument 0"}
!1010 = !{!1011, !1013, !1014, !1015}
!1011 = distinct !{!1011, !1012, !"_ZN3jxl6N_AVX313AddPixelStep1ILb1EEEviRKNS_10FilterRowsEmN3hwy6N_AVX36Vec256IfEES8_RKNS_10LoopFilterEPS8_SC_SC_SC_: argument 0"}
!1012 = distinct !{!1012, !"_ZN3jxl6N_AVX313AddPixelStep1ILb1EEEviRKNS_10FilterRowsEmN3hwy6N_AVX36Vec256IfEES8_RKNS_10LoopFilterEPS8_SC_SC_SC_"}
!1013 = distinct !{!1013, !1012, !"_ZN3jxl6N_AVX313AddPixelStep1ILb1EEEviRKNS_10FilterRowsEmN3hwy6N_AVX36Vec256IfEES8_RKNS_10LoopFilterEPS8_SC_SC_SC_: argument 1"}
!1014 = distinct !{!1014, !1012, !"_ZN3jxl6N_AVX313AddPixelStep1ILb1EEEviRKNS_10FilterRowsEmN3hwy6N_AVX36Vec256IfEES8_RKNS_10LoopFilterEPS8_SC_SC_SC_: argument 2"}
!1015 = distinct !{!1015, !1012, !"_ZN3jxl6N_AVX313AddPixelStep1ILb1EEEviRKNS_10FilterRowsEmN3hwy6N_AVX36Vec256IfEES8_RKNS_10LoopFilterEPS8_SC_SC_SC_: argument 3"}
!1016 = !{!1017}
!1017 = distinct !{!1017, !1018, !"_ZN3hwy6N_AVX3L4LoadENS0_4SimdIfLm8EEEPKf: argument 1"}
!1018 = distinct !{!1018, !"_ZN3hwy6N_AVX3L4LoadENS0_4SimdIfLm8EEEPKf"}
!1019 = !{!1020, !1011, !1013, !1014, !1015}
!1020 = distinct !{!1020, !1018, !"_ZN3hwy6N_AVX3L4LoadENS0_4SimdIfLm8EEEPKf: argument 0"}
!1021 = !{!1022}
!1022 = distinct !{!1022, !1023, !"_ZN3hwy6N_AVX3L4LoadENS0_4SimdIfLm8EEEPKf: argument 1"}
!1023 = distinct !{!1023, !"_ZN3hwy6N_AVX3L4LoadENS0_4SimdIfLm8EEEPKf"}
!1024 = !{!1025, !1011, !1013, !1014, !1015}
!1025 = distinct !{!1025, !1023, !"_ZN3hwy6N_AVX3L4LoadENS0_4SimdIfLm8EEEPKf: argument 0"}
!1026 = !{!1027}
!1027 = distinct !{!1027, !1028, !"_ZN3hwy6N_AVX3L4LoadENS0_4SimdIfLm8EEEPKf: argument 1"}
!1028 = distinct !{!1028, !"_ZN3hwy6N_AVX3L4LoadENS0_4SimdIfLm8EEEPKf"}
!1029 = !{!1030, !1011, !1013, !1014, !1015}
!1030 = distinct !{!1030, !1028, !"_ZN3hwy6N_AVX3L4LoadENS0_4SimdIfLm8EEEPKf: argument 0"}
!1031 = !{!1032}
!1032 = distinct !{!1032, !1033, !"_ZN3hwy6N_AVX3L5LoadUENS0_4SimdIfLm8EEEPKf: argument 1"}
!1033 = distinct !{!1033, !"_ZN3hwy6N_AVX3L5LoadUENS0_4SimdIfLm8EEEPKf"}
!1034 = !{!1035, !1036, !1038, !1039, !1040}
!1035 = distinct !{!1035, !1033, !"_ZN3hwy6N_AVX3L5LoadUENS0_4SimdIfLm8EEEPKf: argument 0"}
!1036 = distinct !{!1036, !1037, !"_ZN3jxl6N_AVX313AddPixelStep1ILb0EEEviRKNS_10FilterRowsEmN3hwy6N_AVX36Vec256IfEES8_RKNS_10LoopFilterEPS8_SC_SC_SC_: argument 0"}
!1037 = distinct !{!1037, !"_ZN3jxl6N_AVX313AddPixelStep1ILb0EEEviRKNS_10FilterRowsEmN3hwy6N_AVX36Vec256IfEES8_RKNS_10LoopFilterEPS8_SC_SC_SC_"}
!1038 = distinct !{!1038, !1037, !"_ZN3jxl6N_AVX313AddPixelStep1ILb0EEEviRKNS_10FilterRowsEmN3hwy6N_AVX36Vec256IfEES8_RKNS_10LoopFilterEPS8_SC_SC_SC_: argument 1"}
!1039 = distinct !{!1039, !1037, !"_ZN3jxl6N_AVX313AddPixelStep1ILb0EEEviRKNS_10FilterRowsEmN3hwy6N_AVX36Vec256IfEES8_RKNS_10LoopFilterEPS8_SC_SC_SC_: argument 2"}
!1040 = distinct !{!1040, !1037, !"_ZN3jxl6N_AVX313AddPixelStep1ILb0EEEviRKNS_10FilterRowsEmN3hwy6N_AVX36Vec256IfEES8_RKNS_10LoopFilterEPS8_SC_SC_SC_: argument 3"}
!1041 = !{!1042}
!1042 = distinct !{!1042, !1043, !"_ZN3hwy6N_AVX3L5LoadUENS0_4SimdIfLm8EEEPKf: argument 1"}
!1043 = distinct !{!1043, !"_ZN3hwy6N_AVX3L5LoadUENS0_4SimdIfLm8EEEPKf"}
!1044 = !{!1045, !1036, !1038, !1039, !1040}
!1045 = distinct !{!1045, !1043, !"_ZN3hwy6N_AVX3L5LoadUENS0_4SimdIfLm8EEEPKf: argument 0"}
!1046 = !{!1047}
!1047 = distinct !{!1047, !1048, !"_ZN3hwy6N_AVX3L5LoadUENS0_4SimdIfLm8EEEPKf: argument 1"}
!1048 = distinct !{!1048, !"_ZN3hwy6N_AVX3L5LoadUENS0_4SimdIfLm8EEEPKf"}
!1049 = !{!1050, !1036, !1038, !1039, !1040}
!1050 = distinct !{!1050, !1048, !"_ZN3hwy6N_AVX3L5LoadUENS0_4SimdIfLm8EEEPKf: argument 0"}
!1051 = !{!1052}
!1052 = distinct !{!1052, !1053, !"_ZN3hwy6N_AVX3L5LoadUENS0_4SimdIfLm8EEEPKf: argument 1"}
!1053 = distinct !{!1053, !"_ZN3hwy6N_AVX3L5LoadUENS0_4SimdIfLm8EEEPKf"}
!1054 = !{!1055, !1056, !1058, !1059, !1060}
!1055 = distinct !{!1055, !1053, !"_ZN3hwy6N_AVX3L5LoadUENS0_4SimdIfLm8EEEPKf: argument 0"}
!1056 = distinct !{!1056, !1057, !"_ZN3jxl6N_AVX313AddPixelStep1ILb0EEEviRKNS_10FilterRowsEmN3hwy6N_AVX36Vec256IfEES8_RKNS_10LoopFilterEPS8_SC_SC_SC_: argument 0"}
!1057 = distinct !{!1057, !"_ZN3jxl6N_AVX313AddPixelStep1ILb0EEEviRKNS_10FilterRowsEmN3hwy6N_AVX36Vec256IfEES8_RKNS_10LoopFilterEPS8_SC_SC_SC_"}
!1058 = distinct !{!1058, !1057, !"_ZN3jxl6N_AVX313AddPixelStep1ILb0EEEviRKNS_10FilterRowsEmN3hwy6N_AVX36Vec256IfEES8_RKNS_10LoopFilterEPS8_SC_SC_SC_: argument 1"}
!1059 = distinct !{!1059, !1057, !"_ZN3jxl6N_AVX313AddPixelStep1ILb0EEEviRKNS_10FilterRowsEmN3hwy6N_AVX36Vec256IfEES8_RKNS_10LoopFilterEPS8_SC_SC_SC_: argument 2"}
!1060 = distinct !{!1060, !1057, !"_ZN3jxl6N_AVX313AddPixelStep1ILb0EEEviRKNS_10FilterRowsEmN3hwy6N_AVX36Vec256IfEES8_RKNS_10LoopFilterEPS8_SC_SC_SC_: argument 3"}
!1061 = !{!1062}
!1062 = distinct !{!1062, !1063, !"_ZN3hwy6N_AVX3L5LoadUENS0_4SimdIfLm8EEEPKf: argument 1"}
!1063 = distinct !{!1063, !"_ZN3hwy6N_AVX3L5LoadUENS0_4SimdIfLm8EEEPKf"}
!1064 = !{!1065, !1056, !1058, !1059, !1060}
!1065 = distinct !{!1065, !1063, !"_ZN3hwy6N_AVX3L5LoadUENS0_4SimdIfLm8EEEPKf: argument 0"}
!1066 = !{!1067}
!1067 = distinct !{!1067, !1068, !"_ZN3hwy6N_AVX3L5LoadUENS0_4SimdIfLm8EEEPKf: argument 1"}
!1068 = distinct !{!1068, !"_ZN3hwy6N_AVX3L5LoadUENS0_4SimdIfLm8EEEPKf"}
!1069 = !{!1070, !1056, !1058, !1059, !1060}
!1070 = distinct !{!1070, !1068, !"_ZN3hwy6N_AVX3L5LoadUENS0_4SimdIfLm8EEEPKf: argument 0"}
!1071 = !{!1072, !1074, !1075, !1076}
!1072 = distinct !{!1072, !1073, !"_ZN3jxl6N_AVX313AddPixelStep1ILb1EEEviRKNS_10FilterRowsEmN3hwy6N_AVX36Vec256IfEES8_RKNS_10LoopFilterEPS8_SC_SC_SC_: argument 0"}
!1073 = distinct !{!1073, !"_ZN3jxl6N_AVX313AddPixelStep1ILb1EEEviRKNS_10FilterRowsEmN3hwy6N_AVX36Vec256IfEES8_RKNS_10LoopFilterEPS8_SC_SC_SC_"}
!1074 = distinct !{!1074, !1073, !"_ZN3jxl6N_AVX313AddPixelStep1ILb1EEEviRKNS_10FilterRowsEmN3hwy6N_AVX36Vec256IfEES8_RKNS_10LoopFilterEPS8_SC_SC_SC_: argument 1"}
!1075 = distinct !{!1075, !1073, !"_ZN3jxl6N_AVX313AddPixelStep1ILb1EEEviRKNS_10FilterRowsEmN3hwy6N_AVX36Vec256IfEES8_RKNS_10LoopFilterEPS8_SC_SC_SC_: argument 2"}
!1076 = distinct !{!1076, !1073, !"_ZN3jxl6N_AVX313AddPixelStep1ILb1EEEviRKNS_10FilterRowsEmN3hwy6N_AVX36Vec256IfEES8_RKNS_10LoopFilterEPS8_SC_SC_SC_: argument 3"}
!1077 = !{!1078}
!1078 = distinct !{!1078, !1079, !"_ZN3hwy6N_AVX3L4LoadENS0_4SimdIfLm8EEEPKf: argument 1"}
!1079 = distinct !{!1079, !"_ZN3hwy6N_AVX3L4LoadENS0_4SimdIfLm8EEEPKf"}
!1080 = !{!1081, !1072, !1074, !1075, !1076}
!1081 = distinct !{!1081, !1079, !"_ZN3hwy6N_AVX3L4LoadENS0_4SimdIfLm8EEEPKf: argument 0"}
!1082 = !{!1083}
!1083 = distinct !{!1083, !1084, !"_ZN3hwy6N_AVX3L4LoadENS0_4SimdIfLm8EEEPKf: argument 1"}
!1084 = distinct !{!1084, !"_ZN3hwy6N_AVX3L4LoadENS0_4SimdIfLm8EEEPKf"}
!1085 = !{!1086, !1072, !1074, !1075, !1076}
!1086 = distinct !{!1086, !1084, !"_ZN3hwy6N_AVX3L4LoadENS0_4SimdIfLm8EEEPKf: argument 0"}
!1087 = !{!1088}
!1088 = distinct !{!1088, !1089, !"_ZN3hwy6N_AVX3L4LoadENS0_4SimdIfLm8EEEPKf: argument 1"}
!1089 = distinct !{!1089, !"_ZN3hwy6N_AVX3L4LoadENS0_4SimdIfLm8EEEPKf"}
!1090 = !{!1091, !1072, !1074, !1075, !1076}
!1091 = distinct !{!1091, !1089, !"_ZN3hwy6N_AVX3L4LoadENS0_4SimdIfLm8EEEPKf: argument 0"}
!1092 = !{!1093}
!1093 = distinct !{!1093, !1094, !"_ZN3hwy6N_AVX3L5StoreENS0_6Vec256IfEENS0_4SimdIfLm8EEEPf: argument 0"}
!1094 = distinct !{!1094, !"_ZN3hwy6N_AVX3L5StoreENS0_6Vec256IfEENS0_4SimdIfLm8EEEPf"}
!1095 = !{!1096}
!1096 = distinct !{!1096, !1097, !"_ZN3hwy6N_AVX3L5StoreENS0_6Vec256IfEENS0_4SimdIfLm8EEEPf: argument 0"}
!1097 = distinct !{!1097, !"_ZN3hwy6N_AVX3L5StoreENS0_6Vec256IfEENS0_4SimdIfLm8EEEPf"}
!1098 = !{!1099}
!1099 = distinct !{!1099, !1100, !"_ZN3hwy6N_AVX3L4LoadENS0_4SimdIfLm8EEEPKf: argument 1"}
!1100 = distinct !{!1100, !"_ZN3hwy6N_AVX3L4LoadENS0_4SimdIfLm8EEEPKf"}
!1101 = !{!1102}
!1102 = distinct !{!1102, !1100, !"_ZN3hwy6N_AVX3L4LoadENS0_4SimdIfLm8EEEPKf: argument 0"}
!1103 = !{!1104}
!1104 = distinct !{!1104, !1105, !"_ZN3hwy6N_AVX3L4LoadENS0_4SimdIfLm8EEEPKf: argument 1"}
!1105 = distinct !{!1105, !"_ZN3hwy6N_AVX3L4LoadENS0_4SimdIfLm8EEEPKf"}
!1106 = !{!1107}
!1107 = distinct !{!1107, !1105, !"_ZN3hwy6N_AVX3L4LoadENS0_4SimdIfLm8EEEPKf: argument 0"}
!1108 = !{!1109}
!1109 = distinct !{!1109, !1110, !"_ZN3hwy6N_AVX3L5LoadUENS0_4SimdIfLm8EEEPKf: argument 1"}
!1110 = distinct !{!1110, !"_ZN3hwy6N_AVX3L5LoadUENS0_4SimdIfLm8EEEPKf"}
!1111 = !{!1112}
!1112 = distinct !{!1112, !1110, !"_ZN3hwy6N_AVX3L5LoadUENS0_4SimdIfLm8EEEPKf: argument 0"}
!1113 = !{!1114}
!1114 = distinct !{!1114, !1115, !"_ZN3hwy6N_AVX3L5LoadUENS0_4SimdIfLm8EEEPKf: argument 1"}
!1115 = distinct !{!1115, !"_ZN3hwy6N_AVX3L5LoadUENS0_4SimdIfLm8EEEPKf"}
!1116 = !{!1117}
!1117 = distinct !{!1117, !1115, !"_ZN3hwy6N_AVX3L5LoadUENS0_4SimdIfLm8EEEPKf: argument 0"}
!1118 = !{!1119}
!1119 = distinct !{!1119, !1120, !"_ZN3hwy6N_AVX3L5LoadUENS0_4SimdIfLm8EEEPKf: argument 1"}
!1120 = distinct !{!1120, !"_ZN3hwy6N_AVX3L5LoadUENS0_4SimdIfLm8EEEPKf"}
!1121 = !{!1122}
!1122 = distinct !{!1122, !1120, !"_ZN3hwy6N_AVX3L5LoadUENS0_4SimdIfLm8EEEPKf: argument 0"}
!1123 = !{!1124}
!1124 = distinct !{!1124, !1125, !"_ZN3hwy6N_AVX3L5LoadUENS0_4SimdIfLm8EEEPKf: argument 1"}
!1125 = distinct !{!1125, !"_ZN3hwy6N_AVX3L5LoadUENS0_4SimdIfLm8EEEPKf"}
!1126 = !{!1127}
!1127 = distinct !{!1127, !1125, !"_ZN3hwy6N_AVX3L5LoadUENS0_4SimdIfLm8EEEPKf: argument 0"}
!1128 = !{!1129}
!1129 = distinct !{!1129, !1130, !"_ZN3hwy6N_AVX3L5LoadUENS0_4SimdIfLm8EEEPKf: argument 1"}
!1130 = distinct !{!1130, !"_ZN3hwy6N_AVX3L5LoadUENS0_4SimdIfLm8EEEPKf"}
!1131 = !{!1132}
!1132 = distinct !{!1132, !1130, !"_ZN3hwy6N_AVX3L5LoadUENS0_4SimdIfLm8EEEPKf: argument 0"}
!1133 = !{!1134}
!1134 = distinct !{!1134, !1135, !"_ZN3hwy6N_AVX3L5LoadUENS0_4SimdIfLm8EEEPKf: argument 1"}
!1135 = distinct !{!1135, !"_ZN3hwy6N_AVX3L5LoadUENS0_4SimdIfLm8EEEPKf"}
!1136 = !{!1137}
!1137 = distinct !{!1137, !1135, !"_ZN3hwy6N_AVX3L5LoadUENS0_4SimdIfLm8EEEPKf: argument 0"}
!1138 = !{!1139}
!1139 = distinct !{!1139, !1140, !"_ZN3hwy6N_AVX3L5LoadUENS0_4SimdIfLm8EEEPKf: argument 1"}
!1140 = distinct !{!1140, !"_ZN3hwy6N_AVX3L5LoadUENS0_4SimdIfLm8EEEPKf"}
!1141 = !{!1142}
!1142 = distinct !{!1142, !1140, !"_ZN3hwy6N_AVX3L5LoadUENS0_4SimdIfLm8EEEPKf: argument 0"}
!1143 = !{!1144}
!1144 = distinct !{!1144, !1145, !"_ZN3hwy6N_AVX3L5LoadUENS0_4SimdIfLm8EEEPKf: argument 1"}
!1145 = distinct !{!1145, !"_ZN3hwy6N_AVX3L5LoadUENS0_4SimdIfLm8EEEPKf"}
!1146 = !{!1147}
!1147 = distinct !{!1147, !1145, !"_ZN3hwy6N_AVX3L5LoadUENS0_4SimdIfLm8EEEPKf: argument 0"}
!1148 = !{!1149}
!1149 = distinct !{!1149, !1150, !"_ZN3hwy6N_AVX3L4LoadENS0_4SimdIfLm8EEEPKf: argument 1"}
!1150 = distinct !{!1150, !"_ZN3hwy6N_AVX3L4LoadENS0_4SimdIfLm8EEEPKf"}
!1151 = !{!1152}
!1152 = distinct !{!1152, !1150, !"_ZN3hwy6N_AVX3L4LoadENS0_4SimdIfLm8EEEPKf: argument 0"}
!1153 = !{!1154}
!1154 = distinct !{!1154, !1155, !"_ZN3hwy6N_AVX3L5LoadUENS0_4SimdIfLm8EEEPKf: argument 1"}
!1155 = distinct !{!1155, !"_ZN3hwy6N_AVX3L5LoadUENS0_4SimdIfLm8EEEPKf"}
!1156 = !{!1157}
!1157 = distinct !{!1157, !1155, !"_ZN3hwy6N_AVX3L5LoadUENS0_4SimdIfLm8EEEPKf: argument 0"}
!1158 = !{!1159}
!1159 = distinct !{!1159, !1160, !"_ZN3hwy6N_AVX3L4LoadENS0_4SimdIfLm8EEEPKf: argument 1"}
!1160 = distinct !{!1160, !"_ZN3hwy6N_AVX3L4LoadENS0_4SimdIfLm8EEEPKf"}
!1161 = !{!1162}
!1162 = distinct !{!1162, !1160, !"_ZN3hwy6N_AVX3L4LoadENS0_4SimdIfLm8EEEPKf: argument 0"}
!1163 = !{!1164, !988}
!1164 = distinct !{!1164, !1165, !"_ZN3hwy6N_AVX3L5StoreENS0_6Vec256IfEENS0_4SimdIfLm8EEEPf: argument 0"}
!1165 = distinct !{!1165, !"_ZN3hwy6N_AVX3L5StoreENS0_6Vec256IfEENS0_4SimdIfLm8EEEPf"}
!1166 = !{!1167}
!1167 = distinct !{!1167, !1168, !"_ZN3hwy6N_AVX3L5StoreENS0_6Vec256IfEENS0_4SimdIfLm8EEEPf: argument 0"}
!1168 = distinct !{!1168, !"_ZN3hwy6N_AVX3L5StoreENS0_6Vec256IfEENS0_4SimdIfLm8EEEPf"}
!1169 = !{!1170}
!1170 = distinct !{!1170, !1171, !"_ZN3hwy6N_AVX3L4LoadENS0_4SimdIfLm8EEEPKf: argument 1"}
!1171 = distinct !{!1171, !"_ZN3hwy6N_AVX3L4LoadENS0_4SimdIfLm8EEEPKf"}
!1172 = !{!1173}
!1173 = distinct !{!1173, !1171, !"_ZN3hwy6N_AVX3L4LoadENS0_4SimdIfLm8EEEPKf: argument 0"}
!1174 = !{!1175}
!1175 = distinct !{!1175, !1176, !"_ZN3hwy6N_AVX3L5StoreENS0_6Vec256IfEENS0_4SimdIfLm8EEEPf: argument 0"}
!1176 = distinct !{!1176, !"_ZN3hwy6N_AVX3L5StoreENS0_6Vec256IfEENS0_4SimdIfLm8EEEPf"}
!1177 = !{!1178}
!1178 = distinct !{!1178, !1179, !"_ZN3hwy6N_AVX3L4LoadENS0_4SimdIfLm8EEEPKf: argument 1"}
!1179 = distinct !{!1179, !"_ZN3hwy6N_AVX3L4LoadENS0_4SimdIfLm8EEEPKf"}
!1180 = !{!1181}
!1181 = distinct !{!1181, !1179, !"_ZN3hwy6N_AVX3L4LoadENS0_4SimdIfLm8EEEPKf: argument 0"}
!1182 = !{!1183}
!1183 = distinct !{!1183, !1184, !"_ZN3hwy6N_AVX3L4LoadENS0_4SimdIfLm8EEEPKf: argument 1"}
!1184 = distinct !{!1184, !"_ZN3hwy6N_AVX3L4LoadENS0_4SimdIfLm8EEEPKf"}
!1185 = !{!1186}
!1186 = distinct !{!1186, !1184, !"_ZN3hwy6N_AVX3L4LoadENS0_4SimdIfLm8EEEPKf: argument 0"}
!1187 = !{!1188}
!1188 = distinct !{!1188, !1189, !"_ZN3hwy6N_AVX3L4LoadENS0_4SimdIfLm8EEEPKf: argument 1"}
!1189 = distinct !{!1189, !"_ZN3hwy6N_AVX3L4LoadENS0_4SimdIfLm8EEEPKf"}
!1190 = !{!1191}
!1191 = distinct !{!1191, !1189, !"_ZN3hwy6N_AVX3L4LoadENS0_4SimdIfLm8EEEPKf: argument 0"}
!1192 = !{!1193}
!1193 = distinct !{!1193, !1194, !"_ZN3hwy6N_AVX3L4LoadENS0_4SimdIfLm8EEEPKf: argument 1"}
!1194 = distinct !{!1194, !"_ZN3hwy6N_AVX3L4LoadENS0_4SimdIfLm8EEEPKf"}
!1195 = !{!1196}
!1196 = distinct !{!1196, !1194, !"_ZN3hwy6N_AVX3L4LoadENS0_4SimdIfLm8EEEPKf: argument 0"}
!1197 = !{!1198, !1200, !1201, !1202}
!1198 = distinct !{!1198, !1199, !"_ZN3jxl6N_AVX313AddPixelStep2ILb1EEEviRKNS_10FilterRowsEmN3hwy6N_AVX36Vec256IfEES8_S8_S8_RKNS_10LoopFilterEPS8_SC_SC_SC_: argument 0"}
!1199 = distinct !{!1199, !"_ZN3jxl6N_AVX313AddPixelStep2ILb1EEEviRKNS_10FilterRowsEmN3hwy6N_AVX36Vec256IfEES8_S8_S8_RKNS_10LoopFilterEPS8_SC_SC_SC_"}
!1200 = distinct !{!1200, !1199, !"_ZN3jxl6N_AVX313AddPixelStep2ILb1EEEviRKNS_10FilterRowsEmN3hwy6N_AVX36Vec256IfEES8_S8_S8_RKNS_10LoopFilterEPS8_SC_SC_SC_: argument 1"}
!1201 = distinct !{!1201, !1199, !"_ZN3jxl6N_AVX313AddPixelStep2ILb1EEEviRKNS_10FilterRowsEmN3hwy6N_AVX36Vec256IfEES8_S8_S8_RKNS_10LoopFilterEPS8_SC_SC_SC_: argument 2"}
!1202 = distinct !{!1202, !1199, !"_ZN3jxl6N_AVX313AddPixelStep2ILb1EEEviRKNS_10FilterRowsEmN3hwy6N_AVX36Vec256IfEES8_S8_S8_RKNS_10LoopFilterEPS8_SC_SC_SC_: argument 3"}
!1203 = !{!1204}
!1204 = distinct !{!1204, !1205, !"_ZN3hwy6N_AVX3L4LoadENS0_4SimdIfLm8EEEPKf: argument 1"}
!1205 = distinct !{!1205, !"_ZN3hwy6N_AVX3L4LoadENS0_4SimdIfLm8EEEPKf"}
!1206 = !{!1207, !1198, !1200, !1201, !1202}
!1207 = distinct !{!1207, !1205, !"_ZN3hwy6N_AVX3L4LoadENS0_4SimdIfLm8EEEPKf: argument 0"}
!1208 = !{!1209}
!1209 = distinct !{!1209, !1210, !"_ZN3hwy6N_AVX3L4LoadENS0_4SimdIfLm8EEEPKf: argument 1"}
!1210 = distinct !{!1210, !"_ZN3hwy6N_AVX3L4LoadENS0_4SimdIfLm8EEEPKf"}
!1211 = !{!1212, !1198, !1200, !1201, !1202}
!1212 = distinct !{!1212, !1210, !"_ZN3hwy6N_AVX3L4LoadENS0_4SimdIfLm8EEEPKf: argument 0"}
!1213 = !{!1214}
!1214 = distinct !{!1214, !1215, !"_ZN3hwy6N_AVX3L4LoadENS0_4SimdIfLm8EEEPKf: argument 1"}
!1215 = distinct !{!1215, !"_ZN3hwy6N_AVX3L4LoadENS0_4SimdIfLm8EEEPKf"}
!1216 = !{!1217, !1198, !1200, !1201, !1202}
!1217 = distinct !{!1217, !1215, !"_ZN3hwy6N_AVX3L4LoadENS0_4SimdIfLm8EEEPKf: argument 0"}
!1218 = !{!1219}
!1219 = distinct !{!1219, !1220, !"_ZN3hwy6N_AVX3L5LoadUENS0_4SimdIfLm8EEEPKf: argument 1"}
!1220 = distinct !{!1220, !"_ZN3hwy6N_AVX3L5LoadUENS0_4SimdIfLm8EEEPKf"}
!1221 = !{!1222, !1223, !1225, !1226, !1227}
!1222 = distinct !{!1222, !1220, !"_ZN3hwy6N_AVX3L5LoadUENS0_4SimdIfLm8EEEPKf: argument 0"}
!1223 = distinct !{!1223, !1224, !"_ZN3jxl6N_AVX313AddPixelStep2ILb0EEEviRKNS_10FilterRowsEmN3hwy6N_AVX36Vec256IfEES8_S8_S8_RKNS_10LoopFilterEPS8_SC_SC_SC_: argument 0"}
!1224 = distinct !{!1224, !"_ZN3jxl6N_AVX313AddPixelStep2ILb0EEEviRKNS_10FilterRowsEmN3hwy6N_AVX36Vec256IfEES8_S8_S8_RKNS_10LoopFilterEPS8_SC_SC_SC_"}
!1225 = distinct !{!1225, !1224, !"_ZN3jxl6N_AVX313AddPixelStep2ILb0EEEviRKNS_10FilterRowsEmN3hwy6N_AVX36Vec256IfEES8_S8_S8_RKNS_10LoopFilterEPS8_SC_SC_SC_: argument 1"}
!1226 = distinct !{!1226, !1224, !"_ZN3jxl6N_AVX313AddPixelStep2ILb0EEEviRKNS_10FilterRowsEmN3hwy6N_AVX36Vec256IfEES8_S8_S8_RKNS_10LoopFilterEPS8_SC_SC_SC_: argument 2"}
!1227 = distinct !{!1227, !1224, !"_ZN3jxl6N_AVX313AddPixelStep2ILb0EEEviRKNS_10FilterRowsEmN3hwy6N_AVX36Vec256IfEES8_S8_S8_RKNS_10LoopFilterEPS8_SC_SC_SC_: argument 3"}
!1228 = !{!1229}
!1229 = distinct !{!1229, !1230, !"_ZN3hwy6N_AVX3L5LoadUENS0_4SimdIfLm8EEEPKf: argument 1"}
!1230 = distinct !{!1230, !"_ZN3hwy6N_AVX3L5LoadUENS0_4SimdIfLm8EEEPKf"}
!1231 = !{!1232, !1223, !1225, !1226, !1227}
!1232 = distinct !{!1232, !1230, !"_ZN3hwy6N_AVX3L5LoadUENS0_4SimdIfLm8EEEPKf: argument 0"}
!1233 = !{!1234}
!1234 = distinct !{!1234, !1235, !"_ZN3hwy6N_AVX3L5LoadUENS0_4SimdIfLm8EEEPKf: argument 1"}
!1235 = distinct !{!1235, !"_ZN3hwy6N_AVX3L5LoadUENS0_4SimdIfLm8EEEPKf"}
!1236 = !{!1237, !1223, !1225, !1226, !1227}
!1237 = distinct !{!1237, !1235, !"_ZN3hwy6N_AVX3L5LoadUENS0_4SimdIfLm8EEEPKf: argument 0"}
!1238 = !{!1239}
!1239 = distinct !{!1239, !1240, !"_ZN3hwy6N_AVX3L5LoadUENS0_4SimdIfLm8EEEPKf: argument 1"}
!1240 = distinct !{!1240, !"_ZN3hwy6N_AVX3L5LoadUENS0_4SimdIfLm8EEEPKf"}
!1241 = !{!1242, !1243, !1245, !1246, !1247}
!1242 = distinct !{!1242, !1240, !"_ZN3hwy6N_AVX3L5LoadUENS0_4SimdIfLm8EEEPKf: argument 0"}
!1243 = distinct !{!1243, !1244, !"_ZN3jxl6N_AVX313AddPixelStep2ILb0EEEviRKNS_10FilterRowsEmN3hwy6N_AVX36Vec256IfEES8_S8_S8_RKNS_10LoopFilterEPS8_SC_SC_SC_: argument 0"}
!1244 = distinct !{!1244, !"_ZN3jxl6N_AVX313AddPixelStep2ILb0EEEviRKNS_10FilterRowsEmN3hwy6N_AVX36Vec256IfEES8_S8_S8_RKNS_10LoopFilterEPS8_SC_SC_SC_"}
!1245 = distinct !{!1245, !1244, !"_ZN3jxl6N_AVX313AddPixelStep2ILb0EEEviRKNS_10FilterRowsEmN3hwy6N_AVX36Vec256IfEES8_S8_S8_RKNS_10LoopFilterEPS8_SC_SC_SC_: argument 1"}
!1246 = distinct !{!1246, !1244, !"_ZN3jxl6N_AVX313AddPixelStep2ILb0EEEviRKNS_10FilterRowsEmN3hwy6N_AVX36Vec256IfEES8_S8_S8_RKNS_10LoopFilterEPS8_SC_SC_SC_: argument 2"}
!1247 = distinct !{!1247, !1244, !"_ZN3jxl6N_AVX313AddPixelStep2ILb0EEEviRKNS_10FilterRowsEmN3hwy6N_AVX36Vec256IfEES8_S8_S8_RKNS_10LoopFilterEPS8_SC_SC_SC_: argument 3"}
!1248 = !{!1249}
!1249 = distinct !{!1249, !1250, !"_ZN3hwy6N_AVX3L5LoadUENS0_4SimdIfLm8EEEPKf: argument 1"}
!1250 = distinct !{!1250, !"_ZN3hwy6N_AVX3L5LoadUENS0_4SimdIfLm8EEEPKf"}
!1251 = !{!1252, !1243, !1245, !1246, !1247}
!1252 = distinct !{!1252, !1250, !"_ZN3hwy6N_AVX3L5LoadUENS0_4SimdIfLm8EEEPKf: argument 0"}
!1253 = !{!1254}
!1254 = distinct !{!1254, !1255, !"_ZN3hwy6N_AVX3L5LoadUENS0_4SimdIfLm8EEEPKf: argument 1"}
!1255 = distinct !{!1255, !"_ZN3hwy6N_AVX3L5LoadUENS0_4SimdIfLm8EEEPKf"}
!1256 = !{!1257, !1243, !1245, !1246, !1247}
!1257 = distinct !{!1257, !1255, !"_ZN3hwy6N_AVX3L5LoadUENS0_4SimdIfLm8EEEPKf: argument 0"}
!1258 = !{!1259, !1261, !1262, !1263}
!1259 = distinct !{!1259, !1260, !"_ZN3jxl6N_AVX313AddPixelStep2ILb1EEEviRKNS_10FilterRowsEmN3hwy6N_AVX36Vec256IfEES8_S8_S8_RKNS_10LoopFilterEPS8_SC_SC_SC_: argument 0"}
!1260 = distinct !{!1260, !"_ZN3jxl6N_AVX313AddPixelStep2ILb1EEEviRKNS_10FilterRowsEmN3hwy6N_AVX36Vec256IfEES8_S8_S8_RKNS_10LoopFilterEPS8_SC_SC_SC_"}
!1261 = distinct !{!1261, !1260, !"_ZN3jxl6N_AVX313AddPixelStep2ILb1EEEviRKNS_10FilterRowsEmN3hwy6N_AVX36Vec256IfEES8_S8_S8_RKNS_10LoopFilterEPS8_SC_SC_SC_: argument 1"}
!1262 = distinct !{!1262, !1260, !"_ZN3jxl6N_AVX313AddPixelStep2ILb1EEEviRKNS_10FilterRowsEmN3hwy6N_AVX36Vec256IfEES8_S8_S8_RKNS_10LoopFilterEPS8_SC_SC_SC_: argument 2"}
!1263 = distinct !{!1263, !1260, !"_ZN3jxl6N_AVX313AddPixelStep2ILb1EEEviRKNS_10FilterRowsEmN3hwy6N_AVX36Vec256IfEES8_S8_S8_RKNS_10LoopFilterEPS8_SC_SC_SC_: argument 3"}
!1264 = !{!1265}
!1265 = distinct !{!1265, !1266, !"_ZN3hwy6N_AVX3L4LoadENS0_4SimdIfLm8EEEPKf: argument 1"}
!1266 = distinct !{!1266, !"_ZN3hwy6N_AVX3L4LoadENS0_4SimdIfLm8EEEPKf"}
!1267 = !{!1268, !1259, !1261, !1262, !1263}
!1268 = distinct !{!1268, !1266, !"_ZN3hwy6N_AVX3L4LoadENS0_4SimdIfLm8EEEPKf: argument 0"}
!1269 = !{!1270}
!1270 = distinct !{!1270, !1271, !"_ZN3hwy6N_AVX3L4LoadENS0_4SimdIfLm8EEEPKf: argument 1"}
!1271 = distinct !{!1271, !"_ZN3hwy6N_AVX3L4LoadENS0_4SimdIfLm8EEEPKf"}
!1272 = !{!1273, !1259, !1261, !1262, !1263}
!1273 = distinct !{!1273, !1271, !"_ZN3hwy6N_AVX3L4LoadENS0_4SimdIfLm8EEEPKf: argument 0"}
!1274 = !{!1275}
!1275 = distinct !{!1275, !1276, !"_ZN3hwy6N_AVX3L4LoadENS0_4SimdIfLm8EEEPKf: argument 1"}
!1276 = distinct !{!1276, !"_ZN3hwy6N_AVX3L4LoadENS0_4SimdIfLm8EEEPKf"}
!1277 = !{!1278, !1259, !1261, !1262, !1263}
!1278 = distinct !{!1278, !1276, !"_ZN3hwy6N_AVX3L4LoadENS0_4SimdIfLm8EEEPKf: argument 0"}
!1279 = !{!1280}
!1280 = distinct !{!1280, !1281, !"_ZN3hwy6N_AVX3L5StoreENS0_6Vec256IfEENS0_4SimdIfLm8EEEPf: argument 0"}
!1281 = distinct !{!1281, !"_ZN3hwy6N_AVX3L5StoreENS0_6Vec256IfEENS0_4SimdIfLm8EEEPf"}
!1282 = !{!1283}
!1283 = distinct !{!1283, !1284, !"_ZN3hwy6N_AVX3L5StoreENS0_6Vec256IfEENS0_4SimdIfLm8EEEPf: argument 0"}
!1284 = distinct !{!1284, !"_ZN3hwy6N_AVX3L5StoreENS0_6Vec256IfEENS0_4SimdIfLm8EEEPf"}
!1285 = !{!1286, !1175}
!1286 = distinct !{!1286, !1287, !"_ZN3hwy6N_AVX3L5StoreENS0_6Vec256IfEENS0_4SimdIfLm8EEEPf: argument 0"}
!1287 = distinct !{!1287, !"_ZN3hwy6N_AVX3L5StoreENS0_6Vec256IfEENS0_4SimdIfLm8EEEPf"}
!1288 = !{!1289, !1291}
!1289 = distinct !{!1289, !1290, !"_ZN3hwy8N_SCALAR4LoadIfEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_: argument 0"}
!1290 = distinct !{!1290, !"_ZN3hwy8N_SCALAR4LoadIfEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_"}
!1291 = distinct !{!1291, !1292, !"_ZN3jxl8N_SCALAR14GaborishVectorIN3hwy8N_SCALAR4SimdIfLm1EEENS3_4Vec1IfEEEEvT_PKfSA_SA_T0_SB_SB_Pf: argument 0"}
!1292 = distinct !{!1292, !"_ZN3jxl8N_SCALAR14GaborishVectorIN3hwy8N_SCALAR4SimdIfLm1EEENS3_4Vec1IfEEEEvT_PKfSA_SA_T0_SB_SB_Pf"}
!1293 = !{!1294, !1295, !1296}
!1294 = distinct !{!1294, !1292, !"_ZN3jxl8N_SCALAR14GaborishVectorIN3hwy8N_SCALAR4SimdIfLm1EEENS3_4Vec1IfEEEEvT_PKfSA_SA_T0_SB_SB_Pf: argument 1"}
!1295 = distinct !{!1295, !1292, !"_ZN3jxl8N_SCALAR14GaborishVectorIN3hwy8N_SCALAR4SimdIfLm1EEENS3_4Vec1IfEEEEvT_PKfSA_SA_T0_SB_SB_Pf: argument 2"}
!1296 = distinct !{!1296, !1292, !"_ZN3jxl8N_SCALAR14GaborishVectorIN3hwy8N_SCALAR4SimdIfLm1EEENS3_4Vec1IfEEEEvT_PKfSA_SA_T0_SB_SB_Pf: argument 3"}
!1297 = !{!1298, !1300, !1291}
!1298 = distinct !{!1298, !1299, !"_ZN3hwy8N_SCALAR4LoadIfEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_: argument 0"}
!1299 = distinct !{!1299, !"_ZN3hwy8N_SCALAR4LoadIfEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_"}
!1300 = distinct !{!1300, !1301, !"_ZN3hwy8N_SCALAR5LoadUIfEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_: argument 0"}
!1301 = distinct !{!1301, !"_ZN3hwy8N_SCALAR5LoadUIfEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_"}
!1302 = !{!1303, !1305, !1291}
!1303 = distinct !{!1303, !1304, !"_ZN3hwy8N_SCALAR4LoadIfEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_: argument 0"}
!1304 = distinct !{!1304, !"_ZN3hwy8N_SCALAR4LoadIfEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_"}
!1305 = distinct !{!1305, !1306, !"_ZN3hwy8N_SCALAR5LoadUIfEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_: argument 0"}
!1306 = distinct !{!1306, !"_ZN3hwy8N_SCALAR5LoadUIfEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_"}
!1307 = !{!1308, !1294}
!1308 = distinct !{!1308, !1309, !"_ZN3hwy8N_SCALAR4LoadIfEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_: argument 0"}
!1309 = distinct !{!1309, !"_ZN3hwy8N_SCALAR4LoadIfEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_"}
!1310 = !{!1291, !1295, !1296}
!1311 = !{!1312, !1314, !1294}
!1312 = distinct !{!1312, !1313, !"_ZN3hwy8N_SCALAR4LoadIfEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_: argument 0"}
!1313 = distinct !{!1313, !"_ZN3hwy8N_SCALAR4LoadIfEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_"}
!1314 = distinct !{!1314, !1315, !"_ZN3hwy8N_SCALAR5LoadUIfEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_: argument 0"}
!1315 = distinct !{!1315, !"_ZN3hwy8N_SCALAR5LoadUIfEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_"}
!1316 = !{!1317, !1319, !1294}
!1317 = distinct !{!1317, !1318, !"_ZN3hwy8N_SCALAR4LoadIfEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_: argument 0"}
!1318 = distinct !{!1318, !"_ZN3hwy8N_SCALAR4LoadIfEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_"}
!1319 = distinct !{!1319, !1320, !"_ZN3hwy8N_SCALAR5LoadUIfEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_: argument 0"}
!1320 = distinct !{!1320, !"_ZN3hwy8N_SCALAR5LoadUIfEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_"}
!1321 = !{!1322, !1295}
!1322 = distinct !{!1322, !1323, !"_ZN3hwy8N_SCALAR4LoadIfEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_: argument 0"}
!1323 = distinct !{!1323, !"_ZN3hwy8N_SCALAR4LoadIfEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_"}
!1324 = !{!1291, !1294, !1296}
!1325 = !{!1326, !1328, !1295}
!1326 = distinct !{!1326, !1327, !"_ZN3hwy8N_SCALAR4LoadIfEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_: argument 0"}
!1327 = distinct !{!1327, !"_ZN3hwy8N_SCALAR4LoadIfEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_"}
!1328 = distinct !{!1328, !1329, !"_ZN3hwy8N_SCALAR5LoadUIfEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_: argument 0"}
!1329 = distinct !{!1329, !"_ZN3hwy8N_SCALAR5LoadUIfEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_"}
!1330 = !{!1331, !1333, !1295}
!1331 = distinct !{!1331, !1332, !"_ZN3hwy8N_SCALAR4LoadIfEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_: argument 0"}
!1332 = distinct !{!1332, !"_ZN3hwy8N_SCALAR4LoadIfEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_"}
!1333 = distinct !{!1333, !1334, !"_ZN3hwy8N_SCALAR5LoadUIfEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_: argument 0"}
!1334 = distinct !{!1334, !"_ZN3hwy8N_SCALAR5LoadUIfEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_"}
!1335 = !{!1336, !1296}
!1336 = distinct !{!1336, !1337, !"_ZN3hwy8N_SCALAR5StoreIfEEvNS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPS3_: argument 0"}
!1337 = distinct !{!1337, !"_ZN3hwy8N_SCALAR5StoreIfEEvNS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPS3_"}
!1338 = !{!1291, !1294, !1295}
!1339 = distinct !{!1339, !1340}
!1340 = !{!"llvm.loop.isvectorized", i32 1}
!1341 = distinct !{!1341, !1342, !1340}
!1342 = !{!"llvm.loop.unroll.runtime.disable"}
!1343 = distinct !{!1343, !1340}
!1344 = distinct !{!1344, !1342, !1340}
!1345 = distinct !{!1345, !1340}
!1346 = distinct !{!1346, !1342, !1340}
!1347 = !{!1348}
!1348 = distinct !{!1348, !1349, !"_ZN3hwy8N_SCALAR5StoreIfEEvNS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPS3_: argument 0"}
!1349 = distinct !{!1349, !"_ZN3hwy8N_SCALAR5StoreIfEEvNS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPS3_"}
!1350 = !{!1351}
!1351 = distinct !{!1351, !1352, !"_ZN3hwy8N_SCALAR4LoadIfEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_: argument 0"}
!1352 = distinct !{!1352, !"_ZN3hwy8N_SCALAR4LoadIfEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_"}
!1353 = !{!1354}
!1354 = distinct !{!1354, !1355, !"_ZN3hwy8N_SCALAR5StoreIfEEvNS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPS3_: argument 0"}
!1355 = distinct !{!1355, !"_ZN3hwy8N_SCALAR5StoreIfEEvNS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPS3_"}
!1356 = !{!1357}
!1357 = distinct !{!1357, !1358, !"_ZN3hwy8N_SCALAR4LoadIfEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_: argument 0"}
!1358 = distinct !{!1358, !"_ZN3hwy8N_SCALAR4LoadIfEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_"}
!1359 = !{!1360, !1362}
!1360 = distinct !{!1360, !1361, !"_ZN3hwy8N_SCALAR4LoadIfEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_: argument 0"}
!1361 = distinct !{!1361, !"_ZN3hwy8N_SCALAR4LoadIfEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_"}
!1362 = distinct !{!1362, !1363, !"_ZN3hwy8N_SCALAR5LoadUIfEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_: argument 0"}
!1363 = distinct !{!1363, !"_ZN3hwy8N_SCALAR5LoadUIfEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_"}
!1364 = !{!1365, !1367}
!1365 = distinct !{!1365, !1366, !"_ZN3hwy8N_SCALAR4LoadIfEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_: argument 0"}
!1366 = distinct !{!1366, !"_ZN3hwy8N_SCALAR4LoadIfEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_"}
!1367 = distinct !{!1367, !1368, !"_ZN3hwy8N_SCALAR5LoadUIfEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_: argument 0"}
!1368 = distinct !{!1368, !"_ZN3hwy8N_SCALAR5LoadUIfEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_"}
!1369 = !{!1370}
!1370 = distinct !{!1370, !1371, !"_ZN3hwy8N_SCALAR5StoreIfEEvNS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPS3_: argument 0"}
!1371 = distinct !{!1371, !"_ZN3hwy8N_SCALAR5StoreIfEEvNS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPS3_"}
!1372 = !{!1373}
!1373 = distinct !{!1373, !1374, !"_ZN3hwy8N_SCALAR5StoreIfEEvNS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPS3_: argument 0"}
!1374 = distinct !{!1374, !"_ZN3hwy8N_SCALAR5StoreIfEEvNS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPS3_"}
!1375 = !{!1376}
!1376 = distinct !{!1376, !1377, !"_ZN3hwy8N_SCALAR5StoreIfEEvNS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPS3_: argument 0"}
!1377 = distinct !{!1377, !"_ZN3hwy8N_SCALAR5StoreIfEEvNS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPS3_"}
!1378 = !{!1379, !1381, !1382, !1383}
!1379 = distinct !{!1379, !1380, !"_ZN3jxl8N_SCALAR13AddPixelStep1ILb0EEEviRKNS_10FilterRowsEmN3hwy8N_SCALAR4Vec1IfEES8_RKNS_10LoopFilterEPS8_SC_SC_SC_: argument 0"}
!1380 = distinct !{!1380, !"_ZN3jxl8N_SCALAR13AddPixelStep1ILb0EEEviRKNS_10FilterRowsEmN3hwy8N_SCALAR4Vec1IfEES8_RKNS_10LoopFilterEPS8_SC_SC_SC_"}
!1381 = distinct !{!1381, !1380, !"_ZN3jxl8N_SCALAR13AddPixelStep1ILb0EEEviRKNS_10FilterRowsEmN3hwy8N_SCALAR4Vec1IfEES8_RKNS_10LoopFilterEPS8_SC_SC_SC_: argument 1"}
!1382 = distinct !{!1382, !1380, !"_ZN3jxl8N_SCALAR13AddPixelStep1ILb0EEEviRKNS_10FilterRowsEmN3hwy8N_SCALAR4Vec1IfEES8_RKNS_10LoopFilterEPS8_SC_SC_SC_: argument 2"}
!1383 = distinct !{!1383, !1380, !"_ZN3jxl8N_SCALAR13AddPixelStep1ILb0EEEviRKNS_10FilterRowsEmN3hwy8N_SCALAR4Vec1IfEES8_RKNS_10LoopFilterEPS8_SC_SC_SC_: argument 3"}
!1384 = !{!1385, !1387}
!1385 = distinct !{!1385, !1386, !"_ZN3hwy8N_SCALAR4LoadIfEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_: argument 0"}
!1386 = distinct !{!1386, !"_ZN3hwy8N_SCALAR4LoadIfEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_"}
!1387 = distinct !{!1387, !1388, !"_ZN3hwy8N_SCALAR5LoadUIfEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_: argument 0"}
!1388 = distinct !{!1388, !"_ZN3hwy8N_SCALAR5LoadUIfEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_"}
!1389 = !{!1390, !1392}
!1390 = distinct !{!1390, !1391, !"_ZN3hwy8N_SCALAR4LoadIfEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_: argument 0"}
!1391 = distinct !{!1391, !"_ZN3hwy8N_SCALAR4LoadIfEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_"}
!1392 = distinct !{!1392, !1393, !"_ZN3hwy8N_SCALAR5LoadUIfEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_: argument 0"}
!1393 = distinct !{!1393, !"_ZN3hwy8N_SCALAR5LoadUIfEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_"}
!1394 = !{!1395, !1397}
!1395 = distinct !{!1395, !1396, !"_ZN3hwy8N_SCALAR4LoadIfEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_: argument 0"}
!1396 = distinct !{!1396, !"_ZN3hwy8N_SCALAR4LoadIfEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_"}
!1397 = distinct !{!1397, !1398, !"_ZN3hwy8N_SCALAR5LoadUIfEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_: argument 0"}
!1398 = distinct !{!1398, !"_ZN3hwy8N_SCALAR5LoadUIfEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_"}
!1399 = !{!1400, !1402}
!1400 = distinct !{!1400, !1401, !"_ZN3hwy8N_SCALAR4LoadIfEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_: argument 0"}
!1401 = distinct !{!1401, !"_ZN3hwy8N_SCALAR4LoadIfEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_"}
!1402 = distinct !{!1402, !1403, !"_ZN3hwy8N_SCALAR5LoadUIfEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_: argument 0"}
!1403 = distinct !{!1403, !"_ZN3hwy8N_SCALAR5LoadUIfEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_"}
!1404 = !{!1405, !1407}
!1405 = distinct !{!1405, !1406, !"_ZN3hwy8N_SCALAR4LoadIfEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_: argument 0"}
!1406 = distinct !{!1406, !"_ZN3hwy8N_SCALAR4LoadIfEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_"}
!1407 = distinct !{!1407, !1408, !"_ZN3hwy8N_SCALAR5LoadUIfEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_: argument 0"}
!1408 = distinct !{!1408, !"_ZN3hwy8N_SCALAR5LoadUIfEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_"}
!1409 = !{!1410, !1412}
!1410 = distinct !{!1410, !1411, !"_ZN3hwy8N_SCALAR4LoadIfEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_: argument 0"}
!1411 = distinct !{!1411, !"_ZN3hwy8N_SCALAR4LoadIfEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_"}
!1412 = distinct !{!1412, !1413, !"_ZN3hwy8N_SCALAR5LoadUIfEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_: argument 0"}
!1413 = distinct !{!1413, !"_ZN3hwy8N_SCALAR5LoadUIfEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_"}
!1414 = !{!1415}
!1415 = distinct !{!1415, !1416, !"_ZN3hwy8N_SCALAR5StoreIfEEvNS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPS3_: argument 0"}
!1416 = distinct !{!1416, !"_ZN3hwy8N_SCALAR5StoreIfEEvNS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPS3_"}
!1417 = !{!1418}
!1418 = distinct !{!1418, !1419, !"_ZN3hwy8N_SCALAR4LoadIfEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_: argument 0"}
!1419 = distinct !{!1419, !"_ZN3hwy8N_SCALAR4LoadIfEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_"}
!1420 = !{!1421}
!1421 = distinct !{!1421, !1422, !"_ZN3hwy8N_SCALAR5StoreIfEEvNS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPS3_: argument 0"}
!1422 = distinct !{!1422, !"_ZN3hwy8N_SCALAR5StoreIfEEvNS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPS3_"}
!1423 = !{!1424}
!1424 = distinct !{!1424, !1425, !"_ZN3hwy8N_SCALAR4LoadIfEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_: argument 0"}
!1425 = distinct !{!1425, !"_ZN3hwy8N_SCALAR4LoadIfEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_"}
!1426 = !{!1427}
!1427 = distinct !{!1427, !1428, !"_ZN3hwy8N_SCALAR4LoadIfEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_: argument 0"}
!1428 = distinct !{!1428, !"_ZN3hwy8N_SCALAR4LoadIfEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_"}
!1429 = !{!1430}
!1430 = distinct !{!1430, !1431, !"_ZN3hwy8N_SCALAR4LoadIfEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_: argument 0"}
!1431 = distinct !{!1431, !"_ZN3hwy8N_SCALAR4LoadIfEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_"}
!1432 = !{!1433}
!1433 = distinct !{!1433, !1434, !"_ZN3hwy8N_SCALAR4LoadIfEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_: argument 0"}
!1434 = distinct !{!1434, !"_ZN3hwy8N_SCALAR4LoadIfEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_"}
!1435 = !{!1436}
!1436 = distinct !{!1436, !1437, !"_ZN3hwy8N_SCALAR4LoadIfEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_: argument 0"}
!1437 = distinct !{!1437, !"_ZN3hwy8N_SCALAR4LoadIfEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_"}
!1438 = !{!1439, !1441, !1442, !1443}
!1439 = distinct !{!1439, !1440, !"_ZN3jxl8N_SCALAR13AddPixelStep1ILb1EEEviRKNS_10FilterRowsEmN3hwy8N_SCALAR4Vec1IfEES8_RKNS_10LoopFilterEPS8_SC_SC_SC_: argument 0"}
!1440 = distinct !{!1440, !"_ZN3jxl8N_SCALAR13AddPixelStep1ILb1EEEviRKNS_10FilterRowsEmN3hwy8N_SCALAR4Vec1IfEES8_RKNS_10LoopFilterEPS8_SC_SC_SC_"}
!1441 = distinct !{!1441, !1440, !"_ZN3jxl8N_SCALAR13AddPixelStep1ILb1EEEviRKNS_10FilterRowsEmN3hwy8N_SCALAR4Vec1IfEES8_RKNS_10LoopFilterEPS8_SC_SC_SC_: argument 1"}
!1442 = distinct !{!1442, !1440, !"_ZN3jxl8N_SCALAR13AddPixelStep1ILb1EEEviRKNS_10FilterRowsEmN3hwy8N_SCALAR4Vec1IfEES8_RKNS_10LoopFilterEPS8_SC_SC_SC_: argument 2"}
!1443 = distinct !{!1443, !1440, !"_ZN3jxl8N_SCALAR13AddPixelStep1ILb1EEEviRKNS_10FilterRowsEmN3hwy8N_SCALAR4Vec1IfEES8_RKNS_10LoopFilterEPS8_SC_SC_SC_: argument 3"}
!1444 = !{!1445}
!1445 = distinct !{!1445, !1446, !"_ZN3hwy8N_SCALAR4LoadIfEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_: argument 0"}
!1446 = distinct !{!1446, !"_ZN3hwy8N_SCALAR4LoadIfEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_"}
!1447 = !{!1448}
!1448 = distinct !{!1448, !1449, !"_ZN3hwy8N_SCALAR4LoadIfEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_: argument 0"}
!1449 = distinct !{!1449, !"_ZN3hwy8N_SCALAR4LoadIfEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_"}
!1450 = !{!1451, !1453}
!1451 = distinct !{!1451, !1452, !"_ZN3hwy8N_SCALAR4LoadIfEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_: argument 0"}
!1452 = distinct !{!1452, !"_ZN3hwy8N_SCALAR4LoadIfEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_"}
!1453 = distinct !{!1453, !1454, !"_ZN3hwy8N_SCALAR5LoadUIfEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_: argument 0"}
!1454 = distinct !{!1454, !"_ZN3hwy8N_SCALAR5LoadUIfEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_"}
!1455 = !{!1456, !1458, !1459, !1460}
!1456 = distinct !{!1456, !1457, !"_ZN3jxl8N_SCALAR13AddPixelStep1ILb0EEEviRKNS_10FilterRowsEmN3hwy8N_SCALAR4Vec1IfEES8_RKNS_10LoopFilterEPS8_SC_SC_SC_: argument 0"}
!1457 = distinct !{!1457, !"_ZN3jxl8N_SCALAR13AddPixelStep1ILb0EEEviRKNS_10FilterRowsEmN3hwy8N_SCALAR4Vec1IfEES8_RKNS_10LoopFilterEPS8_SC_SC_SC_"}
!1458 = distinct !{!1458, !1457, !"_ZN3jxl8N_SCALAR13AddPixelStep1ILb0EEEviRKNS_10FilterRowsEmN3hwy8N_SCALAR4Vec1IfEES8_RKNS_10LoopFilterEPS8_SC_SC_SC_: argument 1"}
!1459 = distinct !{!1459, !1457, !"_ZN3jxl8N_SCALAR13AddPixelStep1ILb0EEEviRKNS_10FilterRowsEmN3hwy8N_SCALAR4Vec1IfEES8_RKNS_10LoopFilterEPS8_SC_SC_SC_: argument 2"}
!1460 = distinct !{!1460, !1457, !"_ZN3jxl8N_SCALAR13AddPixelStep1ILb0EEEviRKNS_10FilterRowsEmN3hwy8N_SCALAR4Vec1IfEES8_RKNS_10LoopFilterEPS8_SC_SC_SC_: argument 3"}
!1461 = !{!1462, !1464}
!1462 = distinct !{!1462, !1463, !"_ZN3hwy8N_SCALAR4LoadIfEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_: argument 0"}
!1463 = distinct !{!1463, !"_ZN3hwy8N_SCALAR4LoadIfEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_"}
!1464 = distinct !{!1464, !1465, !"_ZN3hwy8N_SCALAR5LoadUIfEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_: argument 0"}
!1465 = distinct !{!1465, !"_ZN3hwy8N_SCALAR5LoadUIfEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_"}
!1466 = !{!1467, !1469}
!1467 = distinct !{!1467, !1468, !"_ZN3hwy8N_SCALAR4LoadIfEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_: argument 0"}
!1468 = distinct !{!1468, !"_ZN3hwy8N_SCALAR4LoadIfEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_"}
!1469 = distinct !{!1469, !1470, !"_ZN3hwy8N_SCALAR5LoadUIfEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_: argument 0"}
!1470 = distinct !{!1470, !"_ZN3hwy8N_SCALAR5LoadUIfEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_"}
!1471 = !{!1472, !1474}
!1472 = distinct !{!1472, !1473, !"_ZN3hwy8N_SCALAR4LoadIfEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_: argument 0"}
!1473 = distinct !{!1473, !"_ZN3hwy8N_SCALAR4LoadIfEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_"}
!1474 = distinct !{!1474, !1475, !"_ZN3hwy8N_SCALAR5LoadUIfEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_: argument 0"}
!1475 = distinct !{!1475, !"_ZN3hwy8N_SCALAR5LoadUIfEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_"}
!1476 = !{!1477, !1479, !1480, !1481}
!1477 = distinct !{!1477, !1478, !"_ZN3jxl8N_SCALAR13AddPixelStep1ILb0EEEviRKNS_10FilterRowsEmN3hwy8N_SCALAR4Vec1IfEES8_RKNS_10LoopFilterEPS8_SC_SC_SC_: argument 0"}
!1478 = distinct !{!1478, !"_ZN3jxl8N_SCALAR13AddPixelStep1ILb0EEEviRKNS_10FilterRowsEmN3hwy8N_SCALAR4Vec1IfEES8_RKNS_10LoopFilterEPS8_SC_SC_SC_"}
!1479 = distinct !{!1479, !1478, !"_ZN3jxl8N_SCALAR13AddPixelStep1ILb0EEEviRKNS_10FilterRowsEmN3hwy8N_SCALAR4Vec1IfEES8_RKNS_10LoopFilterEPS8_SC_SC_SC_: argument 1"}
!1480 = distinct !{!1480, !1478, !"_ZN3jxl8N_SCALAR13AddPixelStep1ILb0EEEviRKNS_10FilterRowsEmN3hwy8N_SCALAR4Vec1IfEES8_RKNS_10LoopFilterEPS8_SC_SC_SC_: argument 2"}
!1481 = distinct !{!1481, !1478, !"_ZN3jxl8N_SCALAR13AddPixelStep1ILb0EEEviRKNS_10FilterRowsEmN3hwy8N_SCALAR4Vec1IfEES8_RKNS_10LoopFilterEPS8_SC_SC_SC_: argument 3"}
!1482 = !{!1483, !1485}
!1483 = distinct !{!1483, !1484, !"_ZN3hwy8N_SCALAR4LoadIfEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_: argument 0"}
!1484 = distinct !{!1484, !"_ZN3hwy8N_SCALAR4LoadIfEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_"}
!1485 = distinct !{!1485, !1486, !"_ZN3hwy8N_SCALAR5LoadUIfEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_: argument 0"}
!1486 = distinct !{!1486, !"_ZN3hwy8N_SCALAR5LoadUIfEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_"}
!1487 = !{!1488, !1490}
!1488 = distinct !{!1488, !1489, !"_ZN3hwy8N_SCALAR4LoadIfEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_: argument 0"}
!1489 = distinct !{!1489, !"_ZN3hwy8N_SCALAR4LoadIfEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_"}
!1490 = distinct !{!1490, !1491, !"_ZN3hwy8N_SCALAR5LoadUIfEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_: argument 0"}
!1491 = distinct !{!1491, !"_ZN3hwy8N_SCALAR5LoadUIfEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_"}
!1492 = !{!1493}
!1493 = distinct !{!1493, !1494, !"_ZN3hwy8N_SCALAR4LoadIfEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_: argument 0"}
!1494 = distinct !{!1494, !"_ZN3hwy8N_SCALAR4LoadIfEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_"}
!1495 = !{!1496, !1498, !1499, !1500}
!1496 = distinct !{!1496, !1497, !"_ZN3jxl8N_SCALAR13AddPixelStep1ILb1EEEviRKNS_10FilterRowsEmN3hwy8N_SCALAR4Vec1IfEES8_RKNS_10LoopFilterEPS8_SC_SC_SC_: argument 0"}
!1497 = distinct !{!1497, !"_ZN3jxl8N_SCALAR13AddPixelStep1ILb1EEEviRKNS_10FilterRowsEmN3hwy8N_SCALAR4Vec1IfEES8_RKNS_10LoopFilterEPS8_SC_SC_SC_"}
!1498 = distinct !{!1498, !1497, !"_ZN3jxl8N_SCALAR13AddPixelStep1ILb1EEEviRKNS_10FilterRowsEmN3hwy8N_SCALAR4Vec1IfEES8_RKNS_10LoopFilterEPS8_SC_SC_SC_: argument 1"}
!1499 = distinct !{!1499, !1497, !"_ZN3jxl8N_SCALAR13AddPixelStep1ILb1EEEviRKNS_10FilterRowsEmN3hwy8N_SCALAR4Vec1IfEES8_RKNS_10LoopFilterEPS8_SC_SC_SC_: argument 2"}
!1500 = distinct !{!1500, !1497, !"_ZN3jxl8N_SCALAR13AddPixelStep1ILb1EEEviRKNS_10FilterRowsEmN3hwy8N_SCALAR4Vec1IfEES8_RKNS_10LoopFilterEPS8_SC_SC_SC_: argument 3"}
!1501 = !{!1502}
!1502 = distinct !{!1502, !1503, !"_ZN3hwy8N_SCALAR4LoadIfEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_: argument 0"}
!1503 = distinct !{!1503, !"_ZN3hwy8N_SCALAR4LoadIfEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_"}
!1504 = !{!1505}
!1505 = distinct !{!1505, !1506, !"_ZN3hwy8N_SCALAR4LoadIfEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_: argument 0"}
!1506 = distinct !{!1506, !"_ZN3hwy8N_SCALAR4LoadIfEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_"}
!1507 = !{!1508}
!1508 = distinct !{!1508, !1509, !"_ZN3hwy8N_SCALAR5StoreIfEEvNS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPS3_: argument 0"}
!1509 = distinct !{!1509, !"_ZN3hwy8N_SCALAR5StoreIfEEvNS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPS3_"}
!1510 = !{!1511}
!1511 = distinct !{!1511, !1512, !"_ZN3hwy8N_SCALAR5StoreIfEEvNS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPS3_: argument 0"}
!1512 = distinct !{!1512, !"_ZN3hwy8N_SCALAR5StoreIfEEvNS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPS3_"}
!1513 = !{!1514}
!1514 = distinct !{!1514, !1515, !"_ZN3hwy8N_SCALAR5StoreIfEEvNS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPS3_: argument 0"}
!1515 = distinct !{!1515, !"_ZN3hwy8N_SCALAR5StoreIfEEvNS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPS3_"}
!1516 = !{!1517}
!1517 = distinct !{!1517, !1518, !"_ZN3hwy8N_SCALAR4LoadIfEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_: argument 0"}
!1518 = distinct !{!1518, !"_ZN3hwy8N_SCALAR4LoadIfEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_"}
!1519 = !{!1520}
!1520 = distinct !{!1520, !1521, !"_ZN3hwy8N_SCALAR4LoadIfEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_: argument 0"}
!1521 = distinct !{!1521, !"_ZN3hwy8N_SCALAR4LoadIfEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_"}
!1522 = !{!1523, !1525}
!1523 = distinct !{!1523, !1524, !"_ZN3hwy8N_SCALAR4LoadIfEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_: argument 0"}
!1524 = distinct !{!1524, !"_ZN3hwy8N_SCALAR4LoadIfEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_"}
!1525 = distinct !{!1525, !1526, !"_ZN3hwy8N_SCALAR5LoadUIfEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_: argument 0"}
!1526 = distinct !{!1526, !"_ZN3hwy8N_SCALAR5LoadUIfEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_"}
!1527 = !{!1528, !1530}
!1528 = distinct !{!1528, !1529, !"_ZN3hwy8N_SCALAR4LoadIfEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_: argument 0"}
!1529 = distinct !{!1529, !"_ZN3hwy8N_SCALAR4LoadIfEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_"}
!1530 = distinct !{!1530, !1531, !"_ZN3hwy8N_SCALAR5LoadUIfEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_: argument 0"}
!1531 = distinct !{!1531, !"_ZN3hwy8N_SCALAR5LoadUIfEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_"}
!1532 = !{!1533, !1535}
!1533 = distinct !{!1533, !1534, !"_ZN3hwy8N_SCALAR4LoadIfEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_: argument 0"}
!1534 = distinct !{!1534, !"_ZN3hwy8N_SCALAR4LoadIfEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_"}
!1535 = distinct !{!1535, !1536, !"_ZN3hwy8N_SCALAR5LoadUIfEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_: argument 0"}
!1536 = distinct !{!1536, !"_ZN3hwy8N_SCALAR5LoadUIfEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_"}
!1537 = !{!1538, !1540, !1542, !1544}
!1538 = distinct !{!1538, !1539, !"_ZN3hwy8N_SCALAR4LoadIfEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_: argument 0"}
!1539 = distinct !{!1539, !"_ZN3hwy8N_SCALAR4LoadIfEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_"}
!1540 = distinct !{!1540, !1541, !"_ZN3hwy8N_SCALAR5LoadUIfEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_: argument 0"}
!1541 = distinct !{!1541, !"_ZN3hwy8N_SCALAR5LoadUIfEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_"}
!1542 = distinct !{!1542, !1543, !"_ZN3hwy8N_SCALAR4LoadIfEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_: argument 0"}
!1543 = distinct !{!1543, !"_ZN3hwy8N_SCALAR4LoadIfEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_"}
!1544 = distinct !{!1544, !1545, !"_ZN3hwy8N_SCALAR5LoadUIfEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_: argument 0"}
!1545 = distinct !{!1545, !"_ZN3hwy8N_SCALAR5LoadUIfEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_"}
!1546 = !{!1547, !1549}
!1547 = distinct !{!1547, !1548, !"_ZN3hwy8N_SCALAR4LoadIfEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_: argument 0"}
!1548 = distinct !{!1548, !"_ZN3hwy8N_SCALAR4LoadIfEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_"}
!1549 = distinct !{!1549, !1550, !"_ZN3hwy8N_SCALAR5LoadUIfEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_: argument 0"}
!1550 = distinct !{!1550, !"_ZN3hwy8N_SCALAR5LoadUIfEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_"}
!1551 = !{!1552, !1554}
!1552 = distinct !{!1552, !1553, !"_ZN3hwy8N_SCALAR4LoadIfEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_: argument 0"}
!1553 = distinct !{!1553, !"_ZN3hwy8N_SCALAR4LoadIfEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_"}
!1554 = distinct !{!1554, !1555, !"_ZN3hwy8N_SCALAR5LoadUIfEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_: argument 0"}
!1555 = distinct !{!1555, !"_ZN3hwy8N_SCALAR5LoadUIfEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_"}
!1556 = !{!1557, !1559}
!1557 = distinct !{!1557, !1558, !"_ZN3hwy8N_SCALAR4LoadIfEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_: argument 0"}
!1558 = distinct !{!1558, !"_ZN3hwy8N_SCALAR4LoadIfEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_"}
!1559 = distinct !{!1559, !1560, !"_ZN3hwy8N_SCALAR5LoadUIfEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_: argument 0"}
!1560 = distinct !{!1560, !"_ZN3hwy8N_SCALAR5LoadUIfEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_"}
!1561 = !{!1562}
!1562 = distinct !{!1562, !1563, !"_ZN3hwy8N_SCALAR4LoadIfEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_: argument 0"}
!1563 = distinct !{!1563, !"_ZN3hwy8N_SCALAR4LoadIfEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_"}
!1564 = !{!1565, !1567}
!1565 = distinct !{!1565, !1566, !"_ZN3hwy8N_SCALAR4LoadIfEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_: argument 0"}
!1566 = distinct !{!1566, !"_ZN3hwy8N_SCALAR4LoadIfEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_"}
!1567 = distinct !{!1567, !1568, !"_ZN3hwy8N_SCALAR5LoadUIfEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_: argument 0"}
!1568 = distinct !{!1568, !"_ZN3hwy8N_SCALAR5LoadUIfEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_"}
!1569 = !{!1570}
!1570 = distinct !{!1570, !1571, !"_ZN3hwy8N_SCALAR4LoadIfEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_: argument 0"}
!1571 = distinct !{!1571, !"_ZN3hwy8N_SCALAR4LoadIfEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_"}
!1572 = !{!1573}
!1573 = distinct !{!1573, !1574, !"_ZN3hwy8N_SCALAR5StoreIfEEvNS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPS3_: argument 0"}
!1574 = distinct !{!1574, !"_ZN3hwy8N_SCALAR5StoreIfEEvNS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPS3_"}
!1575 = !{!1576}
!1576 = distinct !{!1576, !1577, !"_ZN3hwy8N_SCALAR4LoadIfEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_: argument 0"}
!1577 = distinct !{!1577, !"_ZN3hwy8N_SCALAR4LoadIfEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_"}
!1578 = !{!1579}
!1579 = distinct !{!1579, !1580, !"_ZN3hwy8N_SCALAR5StoreIfEEvNS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPS3_: argument 0"}
!1580 = distinct !{!1580, !"_ZN3hwy8N_SCALAR5StoreIfEEvNS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPS3_"}
!1581 = !{!1582}
!1582 = distinct !{!1582, !1583, !"_ZN3hwy8N_SCALAR4LoadIfEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_: argument 0"}
!1583 = distinct !{!1583, !"_ZN3hwy8N_SCALAR4LoadIfEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_"}
!1584 = !{!1585}
!1585 = distinct !{!1585, !1586, !"_ZN3hwy8N_SCALAR4LoadIfEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_: argument 0"}
!1586 = distinct !{!1586, !"_ZN3hwy8N_SCALAR4LoadIfEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_"}
!1587 = !{!1588}
!1588 = distinct !{!1588, !1589, !"_ZN3hwy8N_SCALAR4LoadIfEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_: argument 0"}
!1589 = distinct !{!1589, !"_ZN3hwy8N_SCALAR4LoadIfEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_"}
!1590 = !{!1591}
!1591 = distinct !{!1591, !1592, !"_ZN3hwy8N_SCALAR4LoadIfEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_: argument 0"}
!1592 = distinct !{!1592, !"_ZN3hwy8N_SCALAR4LoadIfEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_"}
!1593 = !{!1594, !1596, !1597, !1598}
!1594 = distinct !{!1594, !1595, !"_ZN3jxl8N_SCALAR13AddPixelStep2ILb1EEEviRKNS_10FilterRowsEmN3hwy8N_SCALAR4Vec1IfEES8_S8_S8_RKNS_10LoopFilterEPS8_SC_SC_SC_: argument 0"}
!1595 = distinct !{!1595, !"_ZN3jxl8N_SCALAR13AddPixelStep2ILb1EEEviRKNS_10FilterRowsEmN3hwy8N_SCALAR4Vec1IfEES8_S8_S8_RKNS_10LoopFilterEPS8_SC_SC_SC_"}
!1596 = distinct !{!1596, !1595, !"_ZN3jxl8N_SCALAR13AddPixelStep2ILb1EEEviRKNS_10FilterRowsEmN3hwy8N_SCALAR4Vec1IfEES8_S8_S8_RKNS_10LoopFilterEPS8_SC_SC_SC_: argument 1"}
!1597 = distinct !{!1597, !1595, !"_ZN3jxl8N_SCALAR13AddPixelStep2ILb1EEEviRKNS_10FilterRowsEmN3hwy8N_SCALAR4Vec1IfEES8_S8_S8_RKNS_10LoopFilterEPS8_SC_SC_SC_: argument 2"}
!1598 = distinct !{!1598, !1595, !"_ZN3jxl8N_SCALAR13AddPixelStep2ILb1EEEviRKNS_10FilterRowsEmN3hwy8N_SCALAR4Vec1IfEES8_S8_S8_RKNS_10LoopFilterEPS8_SC_SC_SC_: argument 3"}
!1599 = !{!1600}
!1600 = distinct !{!1600, !1601, !"_ZN3hwy8N_SCALAR4LoadIfEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_: argument 0"}
!1601 = distinct !{!1601, !"_ZN3hwy8N_SCALAR4LoadIfEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_"}
!1602 = !{!1603}
!1603 = distinct !{!1603, !1604, !"_ZN3hwy8N_SCALAR4LoadIfEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_: argument 0"}
!1604 = distinct !{!1604, !"_ZN3hwy8N_SCALAR4LoadIfEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_"}
!1605 = !{!1606}
!1606 = distinct !{!1606, !1607, !"_ZN3hwy8N_SCALAR4LoadIfEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_: argument 0"}
!1607 = distinct !{!1607, !"_ZN3hwy8N_SCALAR4LoadIfEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_"}
!1608 = !{!1609, !1611}
!1609 = distinct !{!1609, !1610, !"_ZN3hwy8N_SCALAR4LoadIfEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_: argument 0"}
!1610 = distinct !{!1610, !"_ZN3hwy8N_SCALAR4LoadIfEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_"}
!1611 = distinct !{!1611, !1612, !"_ZN3hwy8N_SCALAR5LoadUIfEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_: argument 0"}
!1612 = distinct !{!1612, !"_ZN3hwy8N_SCALAR5LoadUIfEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_"}
!1613 = !{!1614, !1616, !1617, !1618}
!1614 = distinct !{!1614, !1615, !"_ZN3jxl8N_SCALAR13AddPixelStep2ILb0EEEviRKNS_10FilterRowsEmN3hwy8N_SCALAR4Vec1IfEES8_S8_S8_RKNS_10LoopFilterEPS8_SC_SC_SC_: argument 0"}
!1615 = distinct !{!1615, !"_ZN3jxl8N_SCALAR13AddPixelStep2ILb0EEEviRKNS_10FilterRowsEmN3hwy8N_SCALAR4Vec1IfEES8_S8_S8_RKNS_10LoopFilterEPS8_SC_SC_SC_"}
!1616 = distinct !{!1616, !1615, !"_ZN3jxl8N_SCALAR13AddPixelStep2ILb0EEEviRKNS_10FilterRowsEmN3hwy8N_SCALAR4Vec1IfEES8_S8_S8_RKNS_10LoopFilterEPS8_SC_SC_SC_: argument 1"}
!1617 = distinct !{!1617, !1615, !"_ZN3jxl8N_SCALAR13AddPixelStep2ILb0EEEviRKNS_10FilterRowsEmN3hwy8N_SCALAR4Vec1IfEES8_S8_S8_RKNS_10LoopFilterEPS8_SC_SC_SC_: argument 2"}
!1618 = distinct !{!1618, !1615, !"_ZN3jxl8N_SCALAR13AddPixelStep2ILb0EEEviRKNS_10FilterRowsEmN3hwy8N_SCALAR4Vec1IfEES8_S8_S8_RKNS_10LoopFilterEPS8_SC_SC_SC_: argument 3"}
!1619 = !{!1620, !1622}
!1620 = distinct !{!1620, !1621, !"_ZN3hwy8N_SCALAR4LoadIfEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_: argument 0"}
!1621 = distinct !{!1621, !"_ZN3hwy8N_SCALAR4LoadIfEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_"}
!1622 = distinct !{!1622, !1623, !"_ZN3hwy8N_SCALAR5LoadUIfEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_: argument 0"}
!1623 = distinct !{!1623, !"_ZN3hwy8N_SCALAR5LoadUIfEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_"}
!1624 = !{!1625, !1627}
!1625 = distinct !{!1625, !1626, !"_ZN3hwy8N_SCALAR4LoadIfEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_: argument 0"}
!1626 = distinct !{!1626, !"_ZN3hwy8N_SCALAR4LoadIfEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_"}
!1627 = distinct !{!1627, !1628, !"_ZN3hwy8N_SCALAR5LoadUIfEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_: argument 0"}
!1628 = distinct !{!1628, !"_ZN3hwy8N_SCALAR5LoadUIfEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_"}
!1629 = !{!1630, !1632}
!1630 = distinct !{!1630, !1631, !"_ZN3hwy8N_SCALAR4LoadIfEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_: argument 0"}
!1631 = distinct !{!1631, !"_ZN3hwy8N_SCALAR4LoadIfEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_"}
!1632 = distinct !{!1632, !1633, !"_ZN3hwy8N_SCALAR5LoadUIfEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_: argument 0"}
!1633 = distinct !{!1633, !"_ZN3hwy8N_SCALAR5LoadUIfEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_"}
!1634 = !{!1635, !1637, !1638, !1639}
!1635 = distinct !{!1635, !1636, !"_ZN3jxl8N_SCALAR13AddPixelStep2ILb0EEEviRKNS_10FilterRowsEmN3hwy8N_SCALAR4Vec1IfEES8_S8_S8_RKNS_10LoopFilterEPS8_SC_SC_SC_: argument 0"}
!1636 = distinct !{!1636, !"_ZN3jxl8N_SCALAR13AddPixelStep2ILb0EEEviRKNS_10FilterRowsEmN3hwy8N_SCALAR4Vec1IfEES8_S8_S8_RKNS_10LoopFilterEPS8_SC_SC_SC_"}
!1637 = distinct !{!1637, !1636, !"_ZN3jxl8N_SCALAR13AddPixelStep2ILb0EEEviRKNS_10FilterRowsEmN3hwy8N_SCALAR4Vec1IfEES8_S8_S8_RKNS_10LoopFilterEPS8_SC_SC_SC_: argument 1"}
!1638 = distinct !{!1638, !1636, !"_ZN3jxl8N_SCALAR13AddPixelStep2ILb0EEEviRKNS_10FilterRowsEmN3hwy8N_SCALAR4Vec1IfEES8_S8_S8_RKNS_10LoopFilterEPS8_SC_SC_SC_: argument 2"}
!1639 = distinct !{!1639, !1636, !"_ZN3jxl8N_SCALAR13AddPixelStep2ILb0EEEviRKNS_10FilterRowsEmN3hwy8N_SCALAR4Vec1IfEES8_S8_S8_RKNS_10LoopFilterEPS8_SC_SC_SC_: argument 3"}
!1640 = !{!1641, !1643}
!1641 = distinct !{!1641, !1642, !"_ZN3hwy8N_SCALAR4LoadIfEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_: argument 0"}
!1642 = distinct !{!1642, !"_ZN3hwy8N_SCALAR4LoadIfEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_"}
!1643 = distinct !{!1643, !1644, !"_ZN3hwy8N_SCALAR5LoadUIfEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_: argument 0"}
!1644 = distinct !{!1644, !"_ZN3hwy8N_SCALAR5LoadUIfEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_"}
!1645 = !{!1646, !1648}
!1646 = distinct !{!1646, !1647, !"_ZN3hwy8N_SCALAR4LoadIfEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_: argument 0"}
!1647 = distinct !{!1647, !"_ZN3hwy8N_SCALAR4LoadIfEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_"}
!1648 = distinct !{!1648, !1649, !"_ZN3hwy8N_SCALAR5LoadUIfEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_: argument 0"}
!1649 = distinct !{!1649, !"_ZN3hwy8N_SCALAR5LoadUIfEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_"}
!1650 = !{!1651, !1653, !1654, !1655}
!1651 = distinct !{!1651, !1652, !"_ZN3jxl8N_SCALAR13AddPixelStep2ILb1EEEviRKNS_10FilterRowsEmN3hwy8N_SCALAR4Vec1IfEES8_S8_S8_RKNS_10LoopFilterEPS8_SC_SC_SC_: argument 0"}
!1652 = distinct !{!1652, !"_ZN3jxl8N_SCALAR13AddPixelStep2ILb1EEEviRKNS_10FilterRowsEmN3hwy8N_SCALAR4Vec1IfEES8_S8_S8_RKNS_10LoopFilterEPS8_SC_SC_SC_"}
!1653 = distinct !{!1653, !1652, !"_ZN3jxl8N_SCALAR13AddPixelStep2ILb1EEEviRKNS_10FilterRowsEmN3hwy8N_SCALAR4Vec1IfEES8_S8_S8_RKNS_10LoopFilterEPS8_SC_SC_SC_: argument 1"}
!1654 = distinct !{!1654, !1652, !"_ZN3jxl8N_SCALAR13AddPixelStep2ILb1EEEviRKNS_10FilterRowsEmN3hwy8N_SCALAR4Vec1IfEES8_S8_S8_RKNS_10LoopFilterEPS8_SC_SC_SC_: argument 2"}
!1655 = distinct !{!1655, !1652, !"_ZN3jxl8N_SCALAR13AddPixelStep2ILb1EEEviRKNS_10FilterRowsEmN3hwy8N_SCALAR4Vec1IfEES8_S8_S8_RKNS_10LoopFilterEPS8_SC_SC_SC_: argument 3"}
!1656 = !{!1657}
!1657 = distinct !{!1657, !1658, !"_ZN3hwy8N_SCALAR4LoadIfEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_: argument 0"}
!1658 = distinct !{!1658, !"_ZN3hwy8N_SCALAR4LoadIfEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_"}
!1659 = !{!1660}
!1660 = distinct !{!1660, !1661, !"_ZN3hwy8N_SCALAR4LoadIfEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_: argument 0"}
!1661 = distinct !{!1661, !"_ZN3hwy8N_SCALAR4LoadIfEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_"}
!1662 = !{!1663}
!1663 = distinct !{!1663, !1664, !"_ZN3hwy8N_SCALAR4LoadIfEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_: argument 0"}
!1664 = distinct !{!1664, !"_ZN3hwy8N_SCALAR4LoadIfEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_"}
!1665 = !{!1666}
!1666 = distinct !{!1666, !1667, !"_ZN3hwy8N_SCALAR5StoreIfEEvNS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPS3_: argument 0"}
!1667 = distinct !{!1667, !"_ZN3hwy8N_SCALAR5StoreIfEEvNS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPS3_"}
!1668 = !{!1669}
!1669 = distinct !{!1669, !1670, !"_ZN3hwy8N_SCALAR5StoreIfEEvNS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPS3_: argument 0"}
!1670 = distinct !{!1670, !"_ZN3hwy8N_SCALAR5StoreIfEEvNS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPS3_"}
!1671 = !{!1672}
!1672 = distinct !{!1672, !1673, !"_ZN3hwy8N_SCALAR5StoreIfEEvNS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPS3_: argument 0"}
!1673 = distinct !{!1673, !"_ZN3hwy8N_SCALAR5StoreIfEEvNS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPS3_"}
!1674 = distinct !{!1674, !1675}
!1675 = !{!"llvm.loop.unroll.disable"}
!1676 = distinct !{!1676, !1675}
!1677 = !{i32 0, i32 33}
!1678 = !{!1679}
!1679 = distinct !{!1679, !1680, !"_ZN3jxl21PrepareFilterPipelineEPNS_18PassesDecoderStateERKNS_4RectERKNS_6Image3IfEES4_mmPS6_S4_: argument 0"}
!1680 = distinct !{!1680, !"_ZN3jxl21PrepareFilterPipelineEPNS_18PassesDecoderStateERKNS_4RectERKNS_6Image3IfEES4_mmPS6_S4_"}
