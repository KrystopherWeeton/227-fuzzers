; ModuleID = '../../third_party/libwebp/src/enc/predictor_enc.c'
source_filename = "../../third_party/libwebp/src/enc/predictor_enc.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.VP8LMultipliers = type { i8, i8, i8 }

@VP8LPredictors = external local_unnamed_addr global [16 x i32 (i32, i32*)*], align 16
@VP8LPredictorsSub = external local_unnamed_addr global [16 x void (i32*, i32*, i32, i32*)*], align 16
@VP8LCombinedShannonEntropy = external local_unnamed_addr global float (i32*, i32*)*, align 8
@VP8LCollectColorRedTransforms = external local_unnamed_addr global void (i32*, i32, i32, i32, i32, i32*)*, align 8
@GetBestGreenRedToBlue.offset = internal unnamed_addr constant [8 x [2 x i8]] [[2 x i8] c"\00\FF", [2 x i8] c"\00\01", [2 x i8] c"\FF\00", [2 x i8] c"\01\00", [2 x i8] c"\FF\FF", [2 x i8] c"\FF\01", [2 x i8] c"\01\FF", [2 x i8] c"\01\01"], align 16
@GetBestGreenRedToBlue.delta_lut = internal unnamed_addr constant [7 x i8] c"\10\10\08\04\02\02\02", align 1
@VP8LCollectColorBlueTransforms = external local_unnamed_addr global void (i32*, i32, i32, i32, i32, i32, i32*)*, align 8
@VP8LTransformColor = external local_unnamed_addr global void (%struct.VP8LMultipliers*, i32*, i32)*, align 8

; Function Attrs: nounwind ssp uwtable
define hidden void @VP8LResidualImage(i32, i32, i32, i32, i32*, i32*, i32* nocapture, i32, i32, i32) local_unnamed_addr #0 {
  %11 = alloca [4 x [256 x i32]], align 16
  %12 = alloca [4 x [256 x i32]], align 16
  %13 = alloca [64 x i32], align 16
  %14 = alloca [4 x [256 x i32]], align 16
  %15 = bitcast [4 x [256 x i32]]* %14 to i8*
  %16 = shl i32 1, %2
  %17 = add i32 %0, -1
  %18 = add i32 %16, %17
  %19 = lshr i32 %18, %2
  %20 = add i32 %1, -1
  %21 = add i32 %20, %16
  %22 = lshr i32 %21, %2
  call void @llvm.lifetime.start.p0i8(i64 4096, i8* nonnull %15) #3
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %15, i8 -86, i64 4096, i1 false)
  %23 = icmp eq i32 %3, 0
  br i1 %23, label %106, label %24

24:                                               ; preds = %10
  %25 = mul i32 %19, %22
  %26 = icmp sgt i32 %25, 0
  br i1 %26, label %27, label %684

27:                                               ; preds = %24
  %28 = zext i32 %25 to i64
  %29 = icmp ult i32 %25, 8
  br i1 %29, label %99, label %30

30:                                               ; preds = %27
  %31 = and i64 %28, 4294967288
  %32 = add nsw i64 %31, -8
  %33 = lshr exact i64 %32, 3
  %34 = add nuw nsw i64 %33, 1
  %35 = and i64 %34, 7
  %36 = icmp ult i64 %32, 56
  br i1 %36, label %84, label %37

37:                                               ; preds = %30
  %38 = sub nsw i64 %34, %35
  br label %39

39:                                               ; preds = %39, %37
  %40 = phi i64 [ 0, %37 ], [ %81, %39 ]
  %41 = phi i64 [ %38, %37 ], [ %82, %39 ]
  %42 = getelementptr inbounds i32, i32* %6, i64 %40
  %43 = bitcast i32* %42 to <4 x i32>*
  store <4 x i32> <i32 -16774400, i32 -16774400, i32 -16774400, i32 -16774400>, <4 x i32>* %43, align 4
  %44 = getelementptr inbounds i32, i32* %42, i64 4
  %45 = bitcast i32* %44 to <4 x i32>*
  store <4 x i32> <i32 -16774400, i32 -16774400, i32 -16774400, i32 -16774400>, <4 x i32>* %45, align 4
  %46 = or i64 %40, 8
  %47 = getelementptr inbounds i32, i32* %6, i64 %46
  %48 = bitcast i32* %47 to <4 x i32>*
  store <4 x i32> <i32 -16774400, i32 -16774400, i32 -16774400, i32 -16774400>, <4 x i32>* %48, align 4
  %49 = getelementptr inbounds i32, i32* %47, i64 4
  %50 = bitcast i32* %49 to <4 x i32>*
  store <4 x i32> <i32 -16774400, i32 -16774400, i32 -16774400, i32 -16774400>, <4 x i32>* %50, align 4
  %51 = or i64 %40, 16
  %52 = getelementptr inbounds i32, i32* %6, i64 %51
  %53 = bitcast i32* %52 to <4 x i32>*
  store <4 x i32> <i32 -16774400, i32 -16774400, i32 -16774400, i32 -16774400>, <4 x i32>* %53, align 4
  %54 = getelementptr inbounds i32, i32* %52, i64 4
  %55 = bitcast i32* %54 to <4 x i32>*
  store <4 x i32> <i32 -16774400, i32 -16774400, i32 -16774400, i32 -16774400>, <4 x i32>* %55, align 4
  %56 = or i64 %40, 24
  %57 = getelementptr inbounds i32, i32* %6, i64 %56
  %58 = bitcast i32* %57 to <4 x i32>*
  store <4 x i32> <i32 -16774400, i32 -16774400, i32 -16774400, i32 -16774400>, <4 x i32>* %58, align 4
  %59 = getelementptr inbounds i32, i32* %57, i64 4
  %60 = bitcast i32* %59 to <4 x i32>*
  store <4 x i32> <i32 -16774400, i32 -16774400, i32 -16774400, i32 -16774400>, <4 x i32>* %60, align 4
  %61 = or i64 %40, 32
  %62 = getelementptr inbounds i32, i32* %6, i64 %61
  %63 = bitcast i32* %62 to <4 x i32>*
  store <4 x i32> <i32 -16774400, i32 -16774400, i32 -16774400, i32 -16774400>, <4 x i32>* %63, align 4
  %64 = getelementptr inbounds i32, i32* %62, i64 4
  %65 = bitcast i32* %64 to <4 x i32>*
  store <4 x i32> <i32 -16774400, i32 -16774400, i32 -16774400, i32 -16774400>, <4 x i32>* %65, align 4
  %66 = or i64 %40, 40
  %67 = getelementptr inbounds i32, i32* %6, i64 %66
  %68 = bitcast i32* %67 to <4 x i32>*
  store <4 x i32> <i32 -16774400, i32 -16774400, i32 -16774400, i32 -16774400>, <4 x i32>* %68, align 4
  %69 = getelementptr inbounds i32, i32* %67, i64 4
  %70 = bitcast i32* %69 to <4 x i32>*
  store <4 x i32> <i32 -16774400, i32 -16774400, i32 -16774400, i32 -16774400>, <4 x i32>* %70, align 4
  %71 = or i64 %40, 48
  %72 = getelementptr inbounds i32, i32* %6, i64 %71
  %73 = bitcast i32* %72 to <4 x i32>*
  store <4 x i32> <i32 -16774400, i32 -16774400, i32 -16774400, i32 -16774400>, <4 x i32>* %73, align 4
  %74 = getelementptr inbounds i32, i32* %72, i64 4
  %75 = bitcast i32* %74 to <4 x i32>*
  store <4 x i32> <i32 -16774400, i32 -16774400, i32 -16774400, i32 -16774400>, <4 x i32>* %75, align 4
  %76 = or i64 %40, 56
  %77 = getelementptr inbounds i32, i32* %6, i64 %76
  %78 = bitcast i32* %77 to <4 x i32>*
  store <4 x i32> <i32 -16774400, i32 -16774400, i32 -16774400, i32 -16774400>, <4 x i32>* %78, align 4
  %79 = getelementptr inbounds i32, i32* %77, i64 4
  %80 = bitcast i32* %79 to <4 x i32>*
  store <4 x i32> <i32 -16774400, i32 -16774400, i32 -16774400, i32 -16774400>, <4 x i32>* %80, align 4
  %81 = add i64 %40, 64
  %82 = add i64 %41, -8
  %83 = icmp eq i64 %82, 0
  br i1 %83, label %84, label %39, !llvm.loop !2

84:                                               ; preds = %39, %30
  %85 = phi i64 [ 0, %30 ], [ %81, %39 ]
  %86 = icmp eq i64 %35, 0
  br i1 %86, label %97, label %87

87:                                               ; preds = %84, %87
  %88 = phi i64 [ %94, %87 ], [ %85, %84 ]
  %89 = phi i64 [ %95, %87 ], [ %35, %84 ]
  %90 = getelementptr inbounds i32, i32* %6, i64 %88
  %91 = bitcast i32* %90 to <4 x i32>*
  store <4 x i32> <i32 -16774400, i32 -16774400, i32 -16774400, i32 -16774400>, <4 x i32>* %91, align 4
  %92 = getelementptr inbounds i32, i32* %90, i64 4
  %93 = bitcast i32* %92 to <4 x i32>*
  store <4 x i32> <i32 -16774400, i32 -16774400, i32 -16774400, i32 -16774400>, <4 x i32>* %93, align 4
  %94 = add i64 %88, 8
  %95 = add i64 %89, -1
  %96 = icmp eq i64 %95, 0
  br i1 %96, label %97, label %87, !llvm.loop !4

97:                                               ; preds = %87, %84
  %98 = icmp eq i64 %31, %28
  br i1 %98, label %684, label %99

99:                                               ; preds = %97, %27
  %100 = phi i64 [ 0, %27 ], [ %31, %97 ]
  br label %101

101:                                              ; preds = %99, %101
  %102 = phi i64 [ %104, %101 ], [ %100, %99 ]
  %103 = getelementptr inbounds i32, i32* %6, i64 %102
  store i32 -16774400, i32* %103, align 4
  %104 = add nuw nsw i64 %102, 1
  %105 = icmp eq i64 %104, %28
  br i1 %105, label %684, label %101, !llvm.loop !6

106:                                              ; preds = %10
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %15, i8 0, i64 4096, i1 false)
  %107 = icmp sgt i32 %22, 0
  br i1 %107, label %108, label %684

108:                                              ; preds = %106
  %109 = icmp sgt i32 %19, 0
  %110 = sext i32 %0 to i64
  %111 = getelementptr inbounds i32, i32* %5, i64 1
  %112 = getelementptr inbounds i32, i32* %111, i64 %110
  %113 = bitcast [4 x [256 x i32]]* %11 to i8*
  %114 = bitcast [4 x [256 x i32]]* %12 to i8*
  %115 = getelementptr inbounds [4 x [256 x i32]], [4 x [256 x i32]]* %11, i64 0, i64 0
  %116 = getelementptr inbounds [4 x [256 x i32]], [4 x [256 x i32]]* %12, i64 0, i64 0
  %117 = bitcast [64 x i32]* %13 to i8*
  %118 = getelementptr inbounds [64 x i32], [64 x i32]* %13, i64 0, i64 0
  %119 = icmp eq i32 %8, 0
  %120 = getelementptr inbounds [64 x i32], [64 x i32]* %13, i64 0, i64 1
  %121 = getelementptr inbounds [4 x [256 x i32]], [4 x [256 x i32]]* %14, i64 0, i64 0, i64 0
  %122 = getelementptr inbounds [4 x [256 x i32]], [4 x [256 x i32]]* %14, i64 0, i64 1, i64 0
  %123 = getelementptr inbounds [4 x [256 x i32]], [4 x [256 x i32]]* %14, i64 0, i64 2, i64 0
  %124 = getelementptr inbounds [4 x [256 x i32]], [4 x [256 x i32]]* %14, i64 0, i64 3, i64 0
  %125 = sext i32 %1 to i64
  %126 = sext i32 %19 to i64
  %127 = zext i32 %22 to i64
  %128 = zext i32 %19 to i64
  %129 = getelementptr inbounds [4 x [256 x i32]], [4 x [256 x i32]]* %14, i64 0, i64 3, i64 0
  %130 = getelementptr inbounds [4 x [256 x i32]], [4 x [256 x i32]]* %14, i64 1, i64 0, i64 0
  %131 = getelementptr inbounds [4 x [256 x i32]], [4 x [256 x i32]]* %14, i64 0, i64 2, i64 0
  %132 = getelementptr inbounds [4 x [256 x i32]], [4 x [256 x i32]]* %14, i64 0, i64 3, i64 0
  %133 = getelementptr inbounds [4 x [256 x i32]], [4 x [256 x i32]]* %14, i64 0, i64 1, i64 0
  %134 = getelementptr inbounds [4 x [256 x i32]], [4 x [256 x i32]]* %14, i64 0, i64 2, i64 0
  %135 = getelementptr inbounds [4 x [256 x i32]], [4 x [256 x i32]]* %14, i64 0, i64 1, i64 0
  %136 = bitcast i32* %135 to [256 x i32]*
  br label %137

137:                                              ; preds = %681, %108
  %138 = phi i64 [ 0, %108 ], [ %682, %681 ]
  br i1 %109, label %139, label %681

139:                                              ; preds = %137
  %140 = trunc i64 %138 to i32
  %141 = shl i32 %140, %2
  %142 = sub nsw i32 %1, %141
  %143 = icmp sgt i32 %16, %142
  %144 = select i1 %143, i32 %142, i32 %16
  %145 = mul nsw i64 %138, %126
  %146 = add i64 %145, 4294967295
  %147 = icmp eq i64 %138, 0
  %148 = add nsw i64 %138, -1
  %149 = mul nsw i64 %148, %126
  %150 = icmp sgt i32 %141, 0
  %151 = add nsw i32 %141, -1
  %152 = mul nsw i32 %151, %0
  %153 = sext i32 %152 to i64
  %154 = getelementptr inbounds i32, i32* %4, i64 %153
  %155 = icmp sgt i32 %144, 0
  %156 = sext i32 %141 to i64
  %157 = sext i32 %144 to i64
  br label %158

158:                                              ; preds = %674, %139
  %159 = phi i64 [ 0, %139 ], [ %679, %674 ]
  %160 = trunc i64 %159 to i32
  %161 = shl i32 %160, %2
  %162 = sub nsw i32 %0, %161
  %163 = icmp sgt i32 %16, %162
  %164 = select i1 %163, i32 %162, i32 %16
  %165 = icmp sgt i32 %161, 0
  %166 = zext i1 %165 to i32
  %167 = sub nsw i32 %161, %166
  %168 = icmp eq i64 %159, 0
  br i1 %168, label %178, label %169

169:                                              ; preds = %158
  %170 = add i64 %146, %159
  %171 = shl i64 %170, 32
  %172 = ashr exact i64 %171, 32
  %173 = getelementptr inbounds i32, i32* %6, i64 %172
  %174 = load i32, i32* %173, align 4
  %175 = lshr i32 %174, 8
  %176 = and i32 %175, 255
  %177 = zext i32 %176 to i64
  br label %178

178:                                              ; preds = %158, %169
  %179 = phi i64 [ %177, %169 ], [ 255, %158 ]
  br i1 %147, label %187, label %180

180:                                              ; preds = %178
  %181 = add nsw i64 %159, %149
  %182 = getelementptr inbounds i32, i32* %6, i64 %181
  %183 = load i32, i32* %182, align 4
  %184 = lshr i32 %183, 8
  %185 = and i32 %184, 255
  %186 = zext i32 %185 to i64
  br label %187

187:                                              ; preds = %178, %180
  %188 = phi i64 [ %186, %180 ], [ 255, %178 ]
  call void @llvm.lifetime.start.p0i8(i64 4096, i8* nonnull %113) #3
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %113, i8 -86, i64 4096, i1 false) #3
  call void @llvm.lifetime.start.p0i8(i64 4096, i8* nonnull %114) #3
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %114, i8 -86, i64 4096, i1 false) #3
  call void @llvm.lifetime.start.p0i8(i64 256, i8* nonnull %117) #3
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %117, i8 -86, i64 256, i1 false) #3
  %189 = sext i32 %167 to i64
  %190 = getelementptr inbounds i32, i32* %154, i64 %189
  %191 = bitcast i32* %190 to i8*
  %192 = add nsw i32 %164, %166
  %193 = add nsw i32 %192, 1
  %194 = sext i32 %193 to i64
  %195 = shl nsw i64 %194, 2
  %196 = add nsw i32 %164, %161
  %197 = icmp eq i32 %161, 0
  %198 = add nsw i32 %164, -1
  %199 = icmp sgt i32 %164, 0
  %200 = sext i32 %161 to i64
  %201 = sext i32 %164 to i64
  %202 = getelementptr inbounds i32, i32* %4, i64 %189
  br label %203

203:                                              ; preds = %387, %187
  %204 = phi i64 [ 0, %187 ], [ %392, %387 ]
  %205 = phi [256 x i32]* [ %116, %187 ], [ %391, %387 ]
  %206 = phi [256 x i32]* [ %115, %187 ], [ %390, %387 ]
  %207 = phi i32 [ 0, %187 ], [ %389, %387 ]
  %208 = phi float [ 0x46293E5940000000, %187 ], [ %388, %387 ]
  %209 = phi i32* [ %112, %187 ], [ %344, %387 ]
  %210 = phi i32* [ %5, %187 ], [ %343, %387 ]
  %211 = bitcast [256 x i32]* %206 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 4 %211, i8 0, i64 4096, i1 false) #3
  br i1 %150, label %212, label %215

212:                                              ; preds = %203
  %213 = getelementptr inbounds i32, i32* %209, i64 %189
  %214 = bitcast i32* %213 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %214, i8* align 4 %191, i64 %195, i1 false) #3
  br label %215

215:                                              ; preds = %212, %203
  br i1 %155, label %216, label %342

216:                                              ; preds = %215
  %217 = getelementptr inbounds [16 x void (i32*, i32*, i32, i32*)*], [16 x void (i32*, i32*, i32, i32*)*]* @VP8LPredictorsSub, i64 0, i64 %204
  %218 = getelementptr inbounds [16 x i32 (i32, i32*)*], [16 x i32 (i32, i32*)*]* @VP8LPredictors, i64 0, i64 %204
  br label %219

219:                                              ; preds = %339, %216
  %220 = phi i64 [ 0, %216 ], [ %340, %339 ]
  %221 = phi i32* [ %209, %216 ], [ %222, %339 ]
  %222 = phi i32* [ %210, %216 ], [ %221, %339 ]
  %223 = add nsw i64 %220, %156
  %224 = getelementptr inbounds i32, i32* %222, i64 %189
  %225 = bitcast i32* %224 to i8*
  %226 = mul nsw i64 %223, %110
  %227 = getelementptr inbounds i32, i32* %202, i64 %226
  %228 = bitcast i32* %227 to i8*
  %229 = add nsw i64 %223, 1
  %230 = icmp slt i64 %229, %125
  %231 = zext i1 %230 to i32
  %232 = add nsw i32 %192, %231
  %233 = sext i32 %232 to i64
  %234 = shl nsw i64 %233, 2
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %225, i8* align 4 %228, i64 %234, i1 false) #3
  br i1 %119, label %259, label %235

235:                                              ; preds = %219
  %236 = trunc i64 %223 to i32
  %237 = icmp eq i32 %236, 0
  br i1 %197, label %238, label %243

238:                                              ; preds = %235
  br i1 %237, label %239, label %241

239:                                              ; preds = %238
  %240 = load void (i32*, i32*, i32, i32*)*, void (i32*, i32*, i32, i32*)** getelementptr inbounds ([16 x void (i32*, i32*, i32, i32*)*], [16 x void (i32*, i32*, i32, i32*)*]* @VP8LPredictorsSub, i64 0, i64 0), align 16
  call void %240(i32* %222, i32* null, i32 1, i32* nonnull %118) #3
  br label %244

241:                                              ; preds = %238
  %242 = load void (i32*, i32*, i32, i32*)*, void (i32*, i32*, i32, i32*)** getelementptr inbounds ([16 x void (i32*, i32*, i32, i32*)*], [16 x void (i32*, i32*, i32, i32*)*]* @VP8LPredictorsSub, i64 0, i64 2), align 16
  call void %242(i32* %222, i32* %221, i32 1, i32* nonnull %118) #3
  br label %251

243:                                              ; preds = %235
  br i1 %237, label %244, label %251

244:                                              ; preds = %243, %239
  %245 = phi i32* [ %120, %239 ], [ %118, %243 ]
  %246 = phi i32 [ 1, %239 ], [ %161, %243 ]
  %247 = phi i32 [ %198, %239 ], [ %164, %243 ]
  %248 = load void (i32*, i32*, i32, i32*)*, void (i32*, i32*, i32, i32*)** getelementptr inbounds ([16 x void (i32*, i32*, i32, i32*)*], [16 x void (i32*, i32*, i32, i32*)*]* @VP8LPredictorsSub, i64 0, i64 1), align 8
  %249 = sext i32 %246 to i64
  %250 = getelementptr inbounds i32, i32* %222, i64 %249
  call void %248(i32* %250, i32* null, i32 %247, i32* %245) #3
  br label %310

251:                                              ; preds = %243, %241
  %252 = phi i32* [ %120, %241 ], [ %118, %243 ]
  %253 = phi i32 [ 1, %241 ], [ %161, %243 ]
  %254 = phi i32 [ %198, %241 ], [ %164, %243 ]
  %255 = load void (i32*, i32*, i32, i32*)*, void (i32*, i32*, i32, i32*)** %217, align 8
  %256 = sext i32 %253 to i64
  %257 = getelementptr inbounds i32, i32* %222, i64 %256
  %258 = getelementptr inbounds i32, i32* %221, i64 %256
  call void %255(i32* %257, i32* %258, i32 %254, i32* %252) #3
  br label %310

259:                                              ; preds = %219
  %260 = load i32 (i32, i32*)*, i32 (i32, i32*)** %218, align 8
  br i1 %199, label %261, label %339

261:                                              ; preds = %259
  %262 = trunc i64 %223 to i32
  %263 = icmp eq i32 %262, 0
  %264 = icmp ne i32 %262, 0
  %265 = getelementptr inbounds i32, i32* %221, i64 %110
  br label %266

266:                                              ; preds = %303, %261
  %267 = phi i64 [ %200, %261 ], [ %307, %303 ]
  %268 = icmp eq i64 %267, 0
  br i1 %263, label %269, label %274

269:                                              ; preds = %266
  br i1 %268, label %283, label %270

270:                                              ; preds = %269
  %271 = add nsw i64 %267, -1
  %272 = getelementptr inbounds i32, i32* %222, i64 %271
  %273 = load i32, i32* %272, align 4
  br label %283

274:                                              ; preds = %266
  br i1 %268, label %275, label %277

275:                                              ; preds = %274
  %276 = load i32, i32* %221, align 4
  br label %283

277:                                              ; preds = %274
  %278 = add nsw i64 %267, -1
  %279 = getelementptr inbounds i32, i32* %222, i64 %278
  %280 = load i32, i32* %279, align 4
  %281 = getelementptr inbounds i32, i32* %221, i64 %267
  %282 = call i32 %260(i32 %280, i32* %281) #3
  br label %283

283:                                              ; preds = %277, %275, %270, %269
  %284 = phi i32 [ %276, %275 ], [ %282, %277 ], [ %273, %270 ], [ -16777216, %269 ]
  %285 = getelementptr inbounds i32, i32* %222, i64 %267
  %286 = load i32, i32* %285, align 4
  %287 = or i32 %286, 16711935
  %288 = and i32 %284, -16711936
  %289 = sub i32 %287, %288
  %290 = or i32 %286, 65280
  %291 = and i32 %284, 16711935
  %292 = sub i32 %290, %291
  %293 = and i32 %289, -16711936
  %294 = and i32 %292, 16711935
  %295 = or i32 %293, %294
  %296 = icmp ult i32 %286, 16777216
  br i1 %296, label %297, label %303

297:                                              ; preds = %283
  %298 = and i32 %289, -16777216
  %299 = and i32 %284, 16777215
  store i32 %299, i32* %285, align 4
  %300 = and i1 %264, %268
  br i1 %300, label %301, label %303

301:                                              ; preds = %297
  %302 = load i32, i32* %222, align 4
  store i32 %302, i32* %265, align 4
  br label %303

303:                                              ; preds = %301, %297, %283
  %304 = phi i32 [ %298, %301 ], [ %298, %297 ], [ %295, %283 ]
  %305 = sub nsw i64 %267, %200
  %306 = getelementptr inbounds [64 x i32], [64 x i32]* %13, i64 0, i64 %305
  store i32 %304, i32* %306, align 4
  %307 = add nsw i64 %267, 1
  %308 = trunc i64 %307 to i32
  %309 = icmp eq i32 %196, %308
  br i1 %309, label %310, label %266

310:                                              ; preds = %303, %251, %244
  br i1 %199, label %311, label %339

311:                                              ; preds = %310, %311
  %312 = phi i64 [ %337, %311 ], [ 0, %310 ]
  %313 = getelementptr inbounds [64 x i32], [64 x i32]* %13, i64 0, i64 %312
  %314 = load i32, i32* %313, align 4
  %315 = lshr i32 %314, 24
  %316 = zext i32 %315 to i64
  %317 = getelementptr inbounds [256 x i32], [256 x i32]* %206, i64 0, i64 %316
  %318 = load i32, i32* %317, align 4
  %319 = add nsw i32 %318, 1
  store i32 %319, i32* %317, align 4
  %320 = lshr i32 %314, 16
  %321 = and i32 %320, 255
  %322 = zext i32 %321 to i64
  %323 = getelementptr inbounds [256 x i32], [256 x i32]* %206, i64 1, i64 %322
  %324 = load i32, i32* %323, align 4
  %325 = add nsw i32 %324, 1
  store i32 %325, i32* %323, align 4
  %326 = lshr i32 %314, 8
  %327 = and i32 %326, 255
  %328 = zext i32 %327 to i64
  %329 = getelementptr inbounds [256 x i32], [256 x i32]* %206, i64 2, i64 %328
  %330 = load i32, i32* %329, align 4
  %331 = add nsw i32 %330, 1
  store i32 %331, i32* %329, align 4
  %332 = and i32 %314, 255
  %333 = zext i32 %332 to i64
  %334 = getelementptr inbounds [256 x i32], [256 x i32]* %206, i64 3, i64 %333
  %335 = load i32, i32* %334, align 4
  %336 = add nsw i32 %335, 1
  store i32 %336, i32* %334, align 4
  %337 = add nuw nsw i64 %312, 1
  %338 = icmp slt i64 %337, %201
  br i1 %338, label %311, label %339

339:                                              ; preds = %311, %310, %259
  %340 = add nuw nsw i64 %220, 1
  %341 = icmp slt i64 %340, %157
  br i1 %341, label %219, label %342

342:                                              ; preds = %339, %215
  %343 = phi i32* [ %210, %215 ], [ %221, %339 ]
  %344 = phi i32* [ %209, %215 ], [ %222, %339 ]
  %345 = getelementptr inbounds [256 x i32], [256 x i32]* %206, i64 0, i64 0
  %346 = call fastcc float @PredictionCostSpatial(i32* %345, i32 1, double 0x3FEE147AE147AE14) #3
  %347 = fpext float %346 to double
  %348 = fadd double %347, 0.000000e+00
  %349 = load float (i32*, i32*)*, float (i32*, i32*)** @VP8LCombinedShannonEntropy, align 8
  %350 = call float %349(i32* %345, i32* nonnull %121) #3
  %351 = fpext float %350 to double
  %352 = fadd double %348, %351
  %353 = getelementptr inbounds [256 x i32], [256 x i32]* %206, i64 1, i64 0
  %354 = call fastcc float @PredictionCostSpatial(i32* %353, i32 1, double 0x3FEE147AE147AE14) #3
  %355 = fpext float %354 to double
  %356 = fadd double %352, %355
  %357 = load float (i32*, i32*)*, float (i32*, i32*)** @VP8LCombinedShannonEntropy, align 8
  %358 = call float %357(i32* %353, i32* %122) #3
  %359 = fpext float %358 to double
  %360 = fadd double %356, %359
  %361 = getelementptr inbounds [256 x i32], [256 x i32]* %206, i64 2, i64 0
  %362 = call fastcc float @PredictionCostSpatial(i32* %361, i32 1, double 0x3FEE147AE147AE14) #3
  %363 = fpext float %362 to double
  %364 = fadd double %360, %363
  %365 = load float (i32*, i32*)*, float (i32*, i32*)** @VP8LCombinedShannonEntropy, align 8
  %366 = call float %365(i32* %361, i32* %123) #3
  %367 = fpext float %366 to double
  %368 = fadd double %364, %367
  %369 = getelementptr inbounds [256 x i32], [256 x i32]* %206, i64 3, i64 0
  %370 = call fastcc float @PredictionCostSpatial(i32* %369, i32 1, double 0x3FEE147AE147AE14) #3
  %371 = fpext float %370 to double
  %372 = fadd double %368, %371
  %373 = load float (i32*, i32*)*, float (i32*, i32*)** @VP8LCombinedShannonEntropy, align 8
  %374 = call float %373(i32* %369, i32* %124) #3
  %375 = fpext float %374 to double
  %376 = fadd double %372, %375
  %377 = fptrunc double %376 to float
  %378 = icmp eq i64 %204, %179
  %379 = fadd float %377, -1.500000e+01
  %380 = select i1 %378, float %379, float %377
  %381 = icmp eq i64 %204, %188
  %382 = fadd float %380, -1.500000e+01
  %383 = select i1 %381, float %382, float %380
  %384 = fcmp olt float %383, %208
  br i1 %384, label %385, label %387

385:                                              ; preds = %342
  %386 = trunc i64 %204 to i32
  br label %387

387:                                              ; preds = %385, %342
  %388 = phi float [ %383, %385 ], [ %208, %342 ]
  %389 = phi i32 [ %386, %385 ], [ %207, %342 ]
  %390 = phi [256 x i32]* [ %205, %385 ], [ %206, %342 ]
  %391 = phi [256 x i32]* [ %206, %385 ], [ %205, %342 ]
  %392 = add nuw nsw i64 %204, 1
  %393 = icmp eq i64 %392, 14
  br i1 %393, label %394, label %203

394:                                              ; preds = %387
  %395 = getelementptr [256 x i32], [256 x i32]* %391, i64 1, i64 0
  %396 = bitcast i32* %395 to [4 x [256 x i32]]*
  %397 = icmp ult [4 x [256 x i32]]* %14, %396
  %398 = icmp ult [256 x i32]* %391, %136
  %399 = and i1 %397, %398
  br i1 %399, label %437, label %400

400:                                              ; preds = %394, %400
  %401 = phi i64 [ %435, %400 ], [ 0, %394 ]
  %402 = getelementptr inbounds [256 x i32], [256 x i32]* %391, i64 0, i64 %401
  %403 = bitcast i32* %402 to <4 x i32>*
  %404 = load <4 x i32>, <4 x i32>* %403, align 4, !alias.scope !8
  %405 = getelementptr inbounds i32, i32* %402, i64 4
  %406 = bitcast i32* %405 to <4 x i32>*
  %407 = load <4 x i32>, <4 x i32>* %406, align 4, !alias.scope !8
  %408 = getelementptr inbounds [4 x [256 x i32]], [4 x [256 x i32]]* %14, i64 0, i64 0, i64 %401
  %409 = bitcast i32* %408 to <4 x i32>*
  %410 = load <4 x i32>, <4 x i32>* %409, align 16, !alias.scope !11, !noalias !8
  %411 = getelementptr inbounds i32, i32* %408, i64 4
  %412 = bitcast i32* %411 to <4 x i32>*
  %413 = load <4 x i32>, <4 x i32>* %412, align 16, !alias.scope !11, !noalias !8
  %414 = add nsw <4 x i32> %410, %404
  %415 = add nsw <4 x i32> %413, %407
  %416 = bitcast i32* %408 to <4 x i32>*
  store <4 x i32> %414, <4 x i32>* %416, align 16, !alias.scope !11, !noalias !8
  %417 = bitcast i32* %411 to <4 x i32>*
  store <4 x i32> %415, <4 x i32>* %417, align 16, !alias.scope !11, !noalias !8
  %418 = or i64 %401, 8
  %419 = getelementptr inbounds [256 x i32], [256 x i32]* %391, i64 0, i64 %418
  %420 = bitcast i32* %419 to <4 x i32>*
  %421 = load <4 x i32>, <4 x i32>* %420, align 4, !alias.scope !8
  %422 = getelementptr inbounds i32, i32* %419, i64 4
  %423 = bitcast i32* %422 to <4 x i32>*
  %424 = load <4 x i32>, <4 x i32>* %423, align 4, !alias.scope !8
  %425 = getelementptr inbounds [4 x [256 x i32]], [4 x [256 x i32]]* %14, i64 0, i64 0, i64 %418
  %426 = bitcast i32* %425 to <4 x i32>*
  %427 = load <4 x i32>, <4 x i32>* %426, align 16, !alias.scope !11, !noalias !8
  %428 = getelementptr inbounds i32, i32* %425, i64 4
  %429 = bitcast i32* %428 to <4 x i32>*
  %430 = load <4 x i32>, <4 x i32>* %429, align 16, !alias.scope !11, !noalias !8
  %431 = add nsw <4 x i32> %427, %421
  %432 = add nsw <4 x i32> %430, %424
  %433 = bitcast i32* %425 to <4 x i32>*
  store <4 x i32> %431, <4 x i32>* %433, align 16, !alias.scope !11, !noalias !8
  %434 = bitcast i32* %428 to <4 x i32>*
  store <4 x i32> %432, <4 x i32>* %434, align 16, !alias.scope !11, !noalias !8
  %435 = add nuw nsw i64 %401, 16
  %436 = icmp eq i64 %435, 256
  br i1 %436, label %464, label %400, !llvm.loop !13

437:                                              ; preds = %394, %437
  %438 = phi i64 [ %462, %437 ], [ 0, %394 ]
  %439 = getelementptr inbounds [256 x i32], [256 x i32]* %391, i64 0, i64 %438
  %440 = load i32, i32* %439, align 4
  %441 = getelementptr inbounds [4 x [256 x i32]], [4 x [256 x i32]]* %14, i64 0, i64 0, i64 %438
  %442 = load i32, i32* %441, align 16
  %443 = add nsw i32 %442, %440
  store i32 %443, i32* %441, align 16
  %444 = or i64 %438, 1
  %445 = getelementptr inbounds [256 x i32], [256 x i32]* %391, i64 0, i64 %444
  %446 = load i32, i32* %445, align 4
  %447 = getelementptr inbounds [4 x [256 x i32]], [4 x [256 x i32]]* %14, i64 0, i64 0, i64 %444
  %448 = load i32, i32* %447, align 4
  %449 = add nsw i32 %448, %446
  store i32 %449, i32* %447, align 4
  %450 = or i64 %438, 2
  %451 = getelementptr inbounds [256 x i32], [256 x i32]* %391, i64 0, i64 %450
  %452 = load i32, i32* %451, align 4
  %453 = getelementptr inbounds [4 x [256 x i32]], [4 x [256 x i32]]* %14, i64 0, i64 0, i64 %450
  %454 = load i32, i32* %453, align 8
  %455 = add nsw i32 %454, %452
  store i32 %455, i32* %453, align 8
  %456 = or i64 %438, 3
  %457 = getelementptr inbounds [256 x i32], [256 x i32]* %391, i64 0, i64 %456
  %458 = load i32, i32* %457, align 4
  %459 = getelementptr inbounds [4 x [256 x i32]], [4 x [256 x i32]]* %14, i64 0, i64 0, i64 %456
  %460 = load i32, i32* %459, align 4
  %461 = add nsw i32 %460, %458
  store i32 %461, i32* %459, align 4
  %462 = add nuw nsw i64 %438, 4
  %463 = icmp eq i64 %462, 256
  br i1 %463, label %464, label %437, !llvm.loop !14

464:                                              ; preds = %400, %437
  %465 = getelementptr [256 x i32], [256 x i32]* %391, i64 1, i64 0
  %466 = getelementptr [256 x i32], [256 x i32]* %391, i64 2, i64 0
  %467 = icmp ult i32* %133, %466
  %468 = icmp ult i32* %465, %134
  %469 = and i1 %467, %468
  br i1 %469, label %507, label %470

470:                                              ; preds = %464, %470
  %471 = phi i64 [ %505, %470 ], [ 0, %464 ]
  %472 = getelementptr inbounds [256 x i32], [256 x i32]* %391, i64 1, i64 %471
  %473 = bitcast i32* %472 to <4 x i32>*
  %474 = load <4 x i32>, <4 x i32>* %473, align 4, !alias.scope !15
  %475 = getelementptr inbounds i32, i32* %472, i64 4
  %476 = bitcast i32* %475 to <4 x i32>*
  %477 = load <4 x i32>, <4 x i32>* %476, align 4, !alias.scope !15
  %478 = getelementptr inbounds [4 x [256 x i32]], [4 x [256 x i32]]* %14, i64 0, i64 1, i64 %471
  %479 = bitcast i32* %478 to <4 x i32>*
  %480 = load <4 x i32>, <4 x i32>* %479, align 16, !alias.scope !18, !noalias !15
  %481 = getelementptr inbounds i32, i32* %478, i64 4
  %482 = bitcast i32* %481 to <4 x i32>*
  %483 = load <4 x i32>, <4 x i32>* %482, align 16, !alias.scope !18, !noalias !15
  %484 = add nsw <4 x i32> %480, %474
  %485 = add nsw <4 x i32> %483, %477
  %486 = bitcast i32* %478 to <4 x i32>*
  store <4 x i32> %484, <4 x i32>* %486, align 16, !alias.scope !18, !noalias !15
  %487 = bitcast i32* %481 to <4 x i32>*
  store <4 x i32> %485, <4 x i32>* %487, align 16, !alias.scope !18, !noalias !15
  %488 = or i64 %471, 8
  %489 = getelementptr inbounds [256 x i32], [256 x i32]* %391, i64 1, i64 %488
  %490 = bitcast i32* %489 to <4 x i32>*
  %491 = load <4 x i32>, <4 x i32>* %490, align 4, !alias.scope !15
  %492 = getelementptr inbounds i32, i32* %489, i64 4
  %493 = bitcast i32* %492 to <4 x i32>*
  %494 = load <4 x i32>, <4 x i32>* %493, align 4, !alias.scope !15
  %495 = getelementptr inbounds [4 x [256 x i32]], [4 x [256 x i32]]* %14, i64 0, i64 1, i64 %488
  %496 = bitcast i32* %495 to <4 x i32>*
  %497 = load <4 x i32>, <4 x i32>* %496, align 16, !alias.scope !18, !noalias !15
  %498 = getelementptr inbounds i32, i32* %495, i64 4
  %499 = bitcast i32* %498 to <4 x i32>*
  %500 = load <4 x i32>, <4 x i32>* %499, align 16, !alias.scope !18, !noalias !15
  %501 = add nsw <4 x i32> %497, %491
  %502 = add nsw <4 x i32> %500, %494
  %503 = bitcast i32* %495 to <4 x i32>*
  store <4 x i32> %501, <4 x i32>* %503, align 16, !alias.scope !18, !noalias !15
  %504 = bitcast i32* %498 to <4 x i32>*
  store <4 x i32> %502, <4 x i32>* %504, align 16, !alias.scope !18, !noalias !15
  %505 = add nuw nsw i64 %471, 16
  %506 = icmp eq i64 %505, 256
  br i1 %506, label %534, label %470, !llvm.loop !20

507:                                              ; preds = %464, %507
  %508 = phi i64 [ %532, %507 ], [ 0, %464 ]
  %509 = getelementptr inbounds [256 x i32], [256 x i32]* %391, i64 1, i64 %508
  %510 = load i32, i32* %509, align 4
  %511 = getelementptr inbounds [4 x [256 x i32]], [4 x [256 x i32]]* %14, i64 0, i64 1, i64 %508
  %512 = load i32, i32* %511, align 16
  %513 = add nsw i32 %512, %510
  store i32 %513, i32* %511, align 16
  %514 = or i64 %508, 1
  %515 = getelementptr inbounds [256 x i32], [256 x i32]* %391, i64 1, i64 %514
  %516 = load i32, i32* %515, align 4
  %517 = getelementptr inbounds [4 x [256 x i32]], [4 x [256 x i32]]* %14, i64 0, i64 1, i64 %514
  %518 = load i32, i32* %517, align 4
  %519 = add nsw i32 %518, %516
  store i32 %519, i32* %517, align 4
  %520 = or i64 %508, 2
  %521 = getelementptr inbounds [256 x i32], [256 x i32]* %391, i64 1, i64 %520
  %522 = load i32, i32* %521, align 4
  %523 = getelementptr inbounds [4 x [256 x i32]], [4 x [256 x i32]]* %14, i64 0, i64 1, i64 %520
  %524 = load i32, i32* %523, align 8
  %525 = add nsw i32 %524, %522
  store i32 %525, i32* %523, align 8
  %526 = or i64 %508, 3
  %527 = getelementptr inbounds [256 x i32], [256 x i32]* %391, i64 1, i64 %526
  %528 = load i32, i32* %527, align 4
  %529 = getelementptr inbounds [4 x [256 x i32]], [4 x [256 x i32]]* %14, i64 0, i64 1, i64 %526
  %530 = load i32, i32* %529, align 4
  %531 = add nsw i32 %530, %528
  store i32 %531, i32* %529, align 4
  %532 = add nuw nsw i64 %508, 4
  %533 = icmp eq i64 %532, 256
  br i1 %533, label %534, label %507, !llvm.loop !21

534:                                              ; preds = %470, %507
  %535 = getelementptr [256 x i32], [256 x i32]* %391, i64 2, i64 0
  %536 = getelementptr [256 x i32], [256 x i32]* %391, i64 3, i64 0
  %537 = icmp ult i32* %131, %536
  %538 = icmp ult i32* %535, %132
  %539 = and i1 %537, %538
  br i1 %539, label %577, label %540

540:                                              ; preds = %534, %540
  %541 = phi i64 [ %575, %540 ], [ 0, %534 ]
  %542 = getelementptr inbounds [256 x i32], [256 x i32]* %391, i64 2, i64 %541
  %543 = bitcast i32* %542 to <4 x i32>*
  %544 = load <4 x i32>, <4 x i32>* %543, align 4, !alias.scope !22
  %545 = getelementptr inbounds i32, i32* %542, i64 4
  %546 = bitcast i32* %545 to <4 x i32>*
  %547 = load <4 x i32>, <4 x i32>* %546, align 4, !alias.scope !22
  %548 = getelementptr inbounds [4 x [256 x i32]], [4 x [256 x i32]]* %14, i64 0, i64 2, i64 %541
  %549 = bitcast i32* %548 to <4 x i32>*
  %550 = load <4 x i32>, <4 x i32>* %549, align 16, !alias.scope !25, !noalias !22
  %551 = getelementptr inbounds i32, i32* %548, i64 4
  %552 = bitcast i32* %551 to <4 x i32>*
  %553 = load <4 x i32>, <4 x i32>* %552, align 16, !alias.scope !25, !noalias !22
  %554 = add nsw <4 x i32> %550, %544
  %555 = add nsw <4 x i32> %553, %547
  %556 = bitcast i32* %548 to <4 x i32>*
  store <4 x i32> %554, <4 x i32>* %556, align 16, !alias.scope !25, !noalias !22
  %557 = bitcast i32* %551 to <4 x i32>*
  store <4 x i32> %555, <4 x i32>* %557, align 16, !alias.scope !25, !noalias !22
  %558 = or i64 %541, 8
  %559 = getelementptr inbounds [256 x i32], [256 x i32]* %391, i64 2, i64 %558
  %560 = bitcast i32* %559 to <4 x i32>*
  %561 = load <4 x i32>, <4 x i32>* %560, align 4, !alias.scope !22
  %562 = getelementptr inbounds i32, i32* %559, i64 4
  %563 = bitcast i32* %562 to <4 x i32>*
  %564 = load <4 x i32>, <4 x i32>* %563, align 4, !alias.scope !22
  %565 = getelementptr inbounds [4 x [256 x i32]], [4 x [256 x i32]]* %14, i64 0, i64 2, i64 %558
  %566 = bitcast i32* %565 to <4 x i32>*
  %567 = load <4 x i32>, <4 x i32>* %566, align 16, !alias.scope !25, !noalias !22
  %568 = getelementptr inbounds i32, i32* %565, i64 4
  %569 = bitcast i32* %568 to <4 x i32>*
  %570 = load <4 x i32>, <4 x i32>* %569, align 16, !alias.scope !25, !noalias !22
  %571 = add nsw <4 x i32> %567, %561
  %572 = add nsw <4 x i32> %570, %564
  %573 = bitcast i32* %565 to <4 x i32>*
  store <4 x i32> %571, <4 x i32>* %573, align 16, !alias.scope !25, !noalias !22
  %574 = bitcast i32* %568 to <4 x i32>*
  store <4 x i32> %572, <4 x i32>* %574, align 16, !alias.scope !25, !noalias !22
  %575 = add nuw nsw i64 %541, 16
  %576 = icmp eq i64 %575, 256
  br i1 %576, label %604, label %540, !llvm.loop !27

577:                                              ; preds = %534, %577
  %578 = phi i64 [ %602, %577 ], [ 0, %534 ]
  %579 = getelementptr inbounds [256 x i32], [256 x i32]* %391, i64 2, i64 %578
  %580 = load i32, i32* %579, align 4
  %581 = getelementptr inbounds [4 x [256 x i32]], [4 x [256 x i32]]* %14, i64 0, i64 2, i64 %578
  %582 = load i32, i32* %581, align 16
  %583 = add nsw i32 %582, %580
  store i32 %583, i32* %581, align 16
  %584 = or i64 %578, 1
  %585 = getelementptr inbounds [256 x i32], [256 x i32]* %391, i64 2, i64 %584
  %586 = load i32, i32* %585, align 4
  %587 = getelementptr inbounds [4 x [256 x i32]], [4 x [256 x i32]]* %14, i64 0, i64 2, i64 %584
  %588 = load i32, i32* %587, align 4
  %589 = add nsw i32 %588, %586
  store i32 %589, i32* %587, align 4
  %590 = or i64 %578, 2
  %591 = getelementptr inbounds [256 x i32], [256 x i32]* %391, i64 2, i64 %590
  %592 = load i32, i32* %591, align 4
  %593 = getelementptr inbounds [4 x [256 x i32]], [4 x [256 x i32]]* %14, i64 0, i64 2, i64 %590
  %594 = load i32, i32* %593, align 8
  %595 = add nsw i32 %594, %592
  store i32 %595, i32* %593, align 8
  %596 = or i64 %578, 3
  %597 = getelementptr inbounds [256 x i32], [256 x i32]* %391, i64 2, i64 %596
  %598 = load i32, i32* %597, align 4
  %599 = getelementptr inbounds [4 x [256 x i32]], [4 x [256 x i32]]* %14, i64 0, i64 2, i64 %596
  %600 = load i32, i32* %599, align 4
  %601 = add nsw i32 %600, %598
  store i32 %601, i32* %599, align 4
  %602 = add nuw nsw i64 %578, 4
  %603 = icmp eq i64 %602, 256
  br i1 %603, label %604, label %577, !llvm.loop !28

604:                                              ; preds = %540, %577
  %605 = getelementptr [256 x i32], [256 x i32]* %391, i64 3, i64 0
  %606 = getelementptr [256 x i32], [256 x i32]* %391, i64 4, i64 0
  %607 = icmp ult i32* %129, %606
  %608 = icmp ult i32* %605, %130
  %609 = and i1 %607, %608
  br i1 %609, label %647, label %610

610:                                              ; preds = %604, %610
  %611 = phi i64 [ %645, %610 ], [ 0, %604 ]
  %612 = getelementptr inbounds [256 x i32], [256 x i32]* %391, i64 3, i64 %611
  %613 = bitcast i32* %612 to <4 x i32>*
  %614 = load <4 x i32>, <4 x i32>* %613, align 4, !alias.scope !29
  %615 = getelementptr inbounds i32, i32* %612, i64 4
  %616 = bitcast i32* %615 to <4 x i32>*
  %617 = load <4 x i32>, <4 x i32>* %616, align 4, !alias.scope !29
  %618 = getelementptr inbounds [4 x [256 x i32]], [4 x [256 x i32]]* %14, i64 0, i64 3, i64 %611
  %619 = bitcast i32* %618 to <4 x i32>*
  %620 = load <4 x i32>, <4 x i32>* %619, align 16, !alias.scope !32, !noalias !29
  %621 = getelementptr inbounds i32, i32* %618, i64 4
  %622 = bitcast i32* %621 to <4 x i32>*
  %623 = load <4 x i32>, <4 x i32>* %622, align 16, !alias.scope !32, !noalias !29
  %624 = add nsw <4 x i32> %620, %614
  %625 = add nsw <4 x i32> %623, %617
  %626 = bitcast i32* %618 to <4 x i32>*
  store <4 x i32> %624, <4 x i32>* %626, align 16, !alias.scope !32, !noalias !29
  %627 = bitcast i32* %621 to <4 x i32>*
  store <4 x i32> %625, <4 x i32>* %627, align 16, !alias.scope !32, !noalias !29
  %628 = or i64 %611, 8
  %629 = getelementptr inbounds [256 x i32], [256 x i32]* %391, i64 3, i64 %628
  %630 = bitcast i32* %629 to <4 x i32>*
  %631 = load <4 x i32>, <4 x i32>* %630, align 4, !alias.scope !29
  %632 = getelementptr inbounds i32, i32* %629, i64 4
  %633 = bitcast i32* %632 to <4 x i32>*
  %634 = load <4 x i32>, <4 x i32>* %633, align 4, !alias.scope !29
  %635 = getelementptr inbounds [4 x [256 x i32]], [4 x [256 x i32]]* %14, i64 0, i64 3, i64 %628
  %636 = bitcast i32* %635 to <4 x i32>*
  %637 = load <4 x i32>, <4 x i32>* %636, align 16, !alias.scope !32, !noalias !29
  %638 = getelementptr inbounds i32, i32* %635, i64 4
  %639 = bitcast i32* %638 to <4 x i32>*
  %640 = load <4 x i32>, <4 x i32>* %639, align 16, !alias.scope !32, !noalias !29
  %641 = add nsw <4 x i32> %637, %631
  %642 = add nsw <4 x i32> %640, %634
  %643 = bitcast i32* %635 to <4 x i32>*
  store <4 x i32> %641, <4 x i32>* %643, align 16, !alias.scope !32, !noalias !29
  %644 = bitcast i32* %638 to <4 x i32>*
  store <4 x i32> %642, <4 x i32>* %644, align 16, !alias.scope !32, !noalias !29
  %645 = add nuw nsw i64 %611, 16
  %646 = icmp eq i64 %645, 256
  br i1 %646, label %674, label %610, !llvm.loop !34

647:                                              ; preds = %604, %647
  %648 = phi i64 [ %672, %647 ], [ 0, %604 ]
  %649 = getelementptr inbounds [256 x i32], [256 x i32]* %391, i64 3, i64 %648
  %650 = load i32, i32* %649, align 4
  %651 = getelementptr inbounds [4 x [256 x i32]], [4 x [256 x i32]]* %14, i64 0, i64 3, i64 %648
  %652 = load i32, i32* %651, align 16
  %653 = add nsw i32 %652, %650
  store i32 %653, i32* %651, align 16
  %654 = or i64 %648, 1
  %655 = getelementptr inbounds [256 x i32], [256 x i32]* %391, i64 3, i64 %654
  %656 = load i32, i32* %655, align 4
  %657 = getelementptr inbounds [4 x [256 x i32]], [4 x [256 x i32]]* %14, i64 0, i64 3, i64 %654
  %658 = load i32, i32* %657, align 4
  %659 = add nsw i32 %658, %656
  store i32 %659, i32* %657, align 4
  %660 = or i64 %648, 2
  %661 = getelementptr inbounds [256 x i32], [256 x i32]* %391, i64 3, i64 %660
  %662 = load i32, i32* %661, align 4
  %663 = getelementptr inbounds [4 x [256 x i32]], [4 x [256 x i32]]* %14, i64 0, i64 3, i64 %660
  %664 = load i32, i32* %663, align 8
  %665 = add nsw i32 %664, %662
  store i32 %665, i32* %663, align 8
  %666 = or i64 %648, 3
  %667 = getelementptr inbounds [256 x i32], [256 x i32]* %391, i64 3, i64 %666
  %668 = load i32, i32* %667, align 4
  %669 = getelementptr inbounds [4 x [256 x i32]], [4 x [256 x i32]]* %14, i64 0, i64 3, i64 %666
  %670 = load i32, i32* %669, align 4
  %671 = add nsw i32 %670, %668
  store i32 %671, i32* %669, align 4
  %672 = add nuw nsw i64 %648, 4
  %673 = icmp eq i64 %672, 256
  br i1 %673, label %674, label %647, !llvm.loop !35

674:                                              ; preds = %610, %647
  call void @llvm.lifetime.end.p0i8(i64 256, i8* nonnull %117) #3
  call void @llvm.lifetime.end.p0i8(i64 4096, i8* nonnull %114) #3
  call void @llvm.lifetime.end.p0i8(i64 4096, i8* nonnull %113) #3
  %675 = shl i32 %389, 8
  %676 = or i32 %675, -16777216
  %677 = add nsw i64 %159, %145
  %678 = getelementptr inbounds i32, i32* %6, i64 %677
  store i32 %676, i32* %678, align 4
  %679 = add nuw nsw i64 %159, 1
  %680 = icmp eq i64 %679, %128
  br i1 %680, label %681, label %158

681:                                              ; preds = %674, %137
  %682 = add nuw nsw i64 %138, 1
  %683 = icmp eq i64 %682, %127
  br i1 %683, label %684, label %137

684:                                              ; preds = %101, %681, %97, %24, %106
  %685 = sext i32 %0 to i64
  %686 = icmp sgt i32 %1, 0
  br i1 %686, label %687, label %822

687:                                              ; preds = %684
  %688 = getelementptr inbounds i32, i32* %5, i64 %685
  %689 = getelementptr inbounds i32, i32* %688, i64 1
  %690 = icmp sgt i32 %0, 0
  %691 = icmp eq i32 %8, 0
  %692 = sext i32 %1 to i64
  %693 = zext i32 %1 to i64
  br label %694

694:                                              ; preds = %820, %687
  %695 = phi i64 [ 0, %687 ], [ %702, %820 ]
  %696 = phi i32* [ %689, %687 ], [ %697, %820 ]
  %697 = phi i32* [ %5, %687 ], [ %696, %820 ]
  %698 = bitcast i32* %697 to i8*
  %699 = mul nsw i64 %695, %685
  %700 = getelementptr inbounds i32, i32* %4, i64 %699
  %701 = bitcast i32* %700 to i8*
  %702 = add nuw nsw i64 %695, 1
  %703 = icmp slt i64 %702, %692
  %704 = zext i1 %703 to i32
  %705 = add nsw i32 %704, %0
  %706 = sext i32 %705 to i64
  %707 = shl nsw i64 %706, 2
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %698, i8* align 4 %701, i64 %707, i1 false) #3
  br i1 %23, label %708, label %716

708:                                              ; preds = %694
  br i1 %690, label %709, label %820

709:                                              ; preds = %708
  %710 = trunc i64 %695 to i32
  %711 = lshr i32 %710, %2
  %712 = mul nsw i32 %711, %19
  %713 = icmp eq i64 %695, 0
  %714 = icmp ne i64 %695, 0
  %715 = getelementptr inbounds i32, i32* %696, i64 %685
  br label %729

716:                                              ; preds = %694
  %717 = icmp eq i64 %695, 0
  br i1 %717, label %718, label %723

718:                                              ; preds = %716
  %719 = load void (i32*, i32*, i32, i32*)*, void (i32*, i32*, i32, i32*)** getelementptr inbounds ([16 x void (i32*, i32*, i32, i32*)*], [16 x void (i32*, i32*, i32, i32*)*]* @VP8LPredictorsSub, i64 0, i64 0), align 16
  call void %719(i32* %697, i32* null, i32 1, i32* %700) #3
  %720 = getelementptr inbounds i32, i32* %700, i64 1
  %721 = load void (i32*, i32*, i32, i32*)*, void (i32*, i32*, i32, i32*)** getelementptr inbounds ([16 x void (i32*, i32*, i32, i32*)*], [16 x void (i32*, i32*, i32, i32*)*]* @VP8LPredictorsSub, i64 0, i64 1), align 8
  %722 = getelementptr inbounds i32, i32* %697, i64 1
  call void %721(i32* %722, i32* null, i32 %17, i32* %720) #3
  br label %820

723:                                              ; preds = %716
  %724 = load void (i32*, i32*, i32, i32*)*, void (i32*, i32*, i32, i32*)** getelementptr inbounds ([16 x void (i32*, i32*, i32, i32*)*], [16 x void (i32*, i32*, i32, i32*)*]* @VP8LPredictorsSub, i64 0, i64 2), align 16
  call void %724(i32* %697, i32* %696, i32 1, i32* %700) #3
  %725 = getelementptr inbounds i32, i32* %700, i64 1
  %726 = load void (i32*, i32*, i32, i32*)*, void (i32*, i32*, i32, i32*)** getelementptr inbounds ([16 x void (i32*, i32*, i32, i32*)*], [16 x void (i32*, i32*, i32, i32*)*]* @VP8LPredictorsSub, i64 0, i64 11), align 8
  %727 = getelementptr inbounds i32, i32* %697, i64 1
  %728 = getelementptr inbounds i32, i32* %696, i64 1
  call void %726(i32* %727, i32* %728, i32 %17, i32* %725) #3
  br label %820

729:                                              ; preds = %818, %709
  %730 = phi i32 [ 0, %709 ], [ %740, %818 ]
  %731 = ashr i32 %730, %2
  %732 = add nsw i32 %731, %712
  %733 = sext i32 %732 to i64
  %734 = getelementptr inbounds i32, i32* %6, i64 %733
  %735 = load i32, i32* %734, align 4
  %736 = lshr i32 %735, 8
  %737 = and i32 %736, 255
  %738 = add nsw i32 %730, %16
  %739 = icmp sgt i32 %738, %0
  %740 = select i1 %739, i32 %0, i32 %738
  %741 = sext i32 %730 to i64
  %742 = getelementptr inbounds i32, i32* %700, i64 %741
  br i1 %691, label %769, label %743

743:                                              ; preds = %729
  %744 = sub nsw i32 %740, %730
  %745 = icmp eq i32 %730, 0
  br i1 %745, label %746, label %754

746:                                              ; preds = %743
  br i1 %713, label %747, label %749

747:                                              ; preds = %746
  %748 = load void (i32*, i32*, i32, i32*)*, void (i32*, i32*, i32, i32*)** getelementptr inbounds ([16 x void (i32*, i32*, i32, i32*)*], [16 x void (i32*, i32*, i32, i32*)*]* @VP8LPredictorsSub, i64 0, i64 0), align 16
  call void %748(i32* %697, i32* null, i32 1, i32* %742) #3
  br label %751

749:                                              ; preds = %746
  %750 = load void (i32*, i32*, i32, i32*)*, void (i32*, i32*, i32, i32*)** getelementptr inbounds ([16 x void (i32*, i32*, i32, i32*)*], [16 x void (i32*, i32*, i32, i32*)*]* @VP8LPredictorsSub, i64 0, i64 2), align 16
  call void %750(i32* %697, i32* %696, i32 1, i32* %742) #3
  br label %751

751:                                              ; preds = %749, %747
  %752 = getelementptr inbounds i32, i32* %742, i64 1
  %753 = add nsw i32 %744, -1
  br label %754

754:                                              ; preds = %751, %743
  %755 = phi i32 [ %753, %751 ], [ %744, %743 ]
  %756 = phi i32 [ 1, %751 ], [ %730, %743 ]
  %757 = phi i32* [ %752, %751 ], [ %742, %743 ]
  br i1 %713, label %758, label %762

758:                                              ; preds = %754
  %759 = load void (i32*, i32*, i32, i32*)*, void (i32*, i32*, i32, i32*)** getelementptr inbounds ([16 x void (i32*, i32*, i32, i32*)*], [16 x void (i32*, i32*, i32, i32*)*]* @VP8LPredictorsSub, i64 0, i64 1), align 8
  %760 = sext i32 %756 to i64
  %761 = getelementptr inbounds i32, i32* %697, i64 %760
  call void %759(i32* %761, i32* null, i32 %755, i32* %757) #3
  br label %818

762:                                              ; preds = %754
  %763 = zext i32 %737 to i64
  %764 = getelementptr inbounds [16 x void (i32*, i32*, i32, i32*)*], [16 x void (i32*, i32*, i32, i32*)*]* @VP8LPredictorsSub, i64 0, i64 %763
  %765 = load void (i32*, i32*, i32, i32*)*, void (i32*, i32*, i32, i32*)** %764, align 8
  %766 = sext i32 %756 to i64
  %767 = getelementptr inbounds i32, i32* %697, i64 %766
  %768 = getelementptr inbounds i32, i32* %696, i64 %766
  call void %765(i32* %767, i32* %768, i32 %755, i32* %757) #3
  br label %818

769:                                              ; preds = %729
  %770 = zext i32 %737 to i64
  %771 = getelementptr inbounds [16 x i32 (i32, i32*)*], [16 x i32 (i32, i32*)*]* @VP8LPredictors, i64 0, i64 %770
  %772 = load i32 (i32, i32*)*, i32 (i32, i32*)** %771, align 8
  %773 = icmp sgt i32 %740, %730
  br i1 %773, label %774, label %818

774:                                              ; preds = %769, %811
  %775 = phi i64 [ %815, %811 ], [ %741, %769 ]
  %776 = icmp eq i64 %775, 0
  br i1 %713, label %777, label %782

777:                                              ; preds = %774
  br i1 %776, label %791, label %778

778:                                              ; preds = %777
  %779 = add nsw i64 %775, -1
  %780 = getelementptr inbounds i32, i32* %697, i64 %779
  %781 = load i32, i32* %780, align 4
  br label %791

782:                                              ; preds = %774
  br i1 %776, label %783, label %785

783:                                              ; preds = %782
  %784 = load i32, i32* %696, align 4
  br label %791

785:                                              ; preds = %782
  %786 = add nsw i64 %775, -1
  %787 = getelementptr inbounds i32, i32* %697, i64 %786
  %788 = load i32, i32* %787, align 4
  %789 = getelementptr inbounds i32, i32* %696, i64 %775
  %790 = call i32 %772(i32 %788, i32* %789) #3
  br label %791

791:                                              ; preds = %785, %783, %778, %777
  %792 = phi i32 [ %784, %783 ], [ %790, %785 ], [ %781, %778 ], [ -16777216, %777 ]
  %793 = getelementptr inbounds i32, i32* %697, i64 %775
  %794 = load i32, i32* %793, align 4
  %795 = or i32 %794, 16711935
  %796 = and i32 %792, -16711936
  %797 = sub i32 %795, %796
  %798 = or i32 %794, 65280
  %799 = and i32 %792, 16711935
  %800 = sub i32 %798, %799
  %801 = and i32 %797, -16711936
  %802 = and i32 %800, 16711935
  %803 = or i32 %801, %802
  %804 = icmp ult i32 %794, 16777216
  br i1 %804, label %805, label %811

805:                                              ; preds = %791
  %806 = and i32 %797, -16777216
  %807 = and i32 %792, 16777215
  store i32 %807, i32* %793, align 4
  %808 = and i1 %714, %776
  br i1 %808, label %809, label %811

809:                                              ; preds = %805
  %810 = load i32, i32* %697, align 4
  store i32 %810, i32* %715, align 4
  br label %811

811:                                              ; preds = %809, %805, %791
  %812 = phi i32 [ %806, %809 ], [ %806, %805 ], [ %803, %791 ]
  %813 = sub nsw i64 %775, %741
  %814 = getelementptr inbounds i32, i32* %742, i64 %813
  store i32 %812, i32* %814, align 4
  %815 = add nsw i64 %775, 1
  %816 = trunc i64 %815 to i32
  %817 = icmp eq i32 %740, %816
  br i1 %817, label %818, label %774

818:                                              ; preds = %811, %769, %762, %758
  %819 = icmp slt i32 %738, %0
  br i1 %819, label %729, label %820

820:                                              ; preds = %818, %723, %718, %708
  %821 = icmp eq i64 %702, %693
  br i1 %821, label %822, label %694

822:                                              ; preds = %820, %684
  call void @llvm.lifetime.end.p0i8(i64 4096, i8* nonnull %15) #3
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nounwind ssp uwtable
define hidden void @VP8LColorSpaceTransform(i32, i32, i32, i32, i32*, i32* nocapture) local_unnamed_addr #0 {
  %7 = alloca [256 x i32], align 16
  %8 = alloca %struct.VP8LMultipliers, align 4
  %9 = alloca [256 x i32], align 16
  %10 = alloca [256 x i32], align 16
  %11 = shl i32 1, %2
  %12 = add i32 %11, -1
  %13 = add i32 %12, %0
  %14 = lshr i32 %13, %2
  %15 = add i32 %12, %1
  %16 = lshr i32 %15, %2
  %17 = bitcast [256 x i32]* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 1024, i8* nonnull %17) #3
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %17, i8 0, i64 1024, i1 false)
  %18 = bitcast [256 x i32]* %10 to i8*
  call void @llvm.lifetime.start.p0i8(i64 1024, i8* nonnull %18) #3
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %18, i8 0, i64 1024, i1 false)
  %19 = icmp sgt i32 %16, 0
  br i1 %19, label %20, label %767

20:                                               ; preds = %6
  %21 = icmp sgt i32 %14, 0
  %22 = getelementptr inbounds [256 x i32], [256 x i32]* %9, i64 0, i64 0
  %23 = getelementptr inbounds [256 x i32], [256 x i32]* %10, i64 0, i64 0
  %24 = mul nsw i32 %3, 7
  %25 = ashr i32 %24, 8
  %26 = add nsw i32 %25, 4
  %27 = bitcast [256 x i32]* %7 to i8*
  %28 = getelementptr inbounds [256 x i32], [256 x i32]* %7, i64 0, i64 0
  %29 = getelementptr inbounds [256 x i32], [256 x i32]* %7, i64 0, i64 1
  %30 = getelementptr inbounds [256 x i32], [256 x i32]* %7, i64 0, i64 255
  %31 = getelementptr inbounds [256 x i32], [256 x i32]* %7, i64 0, i64 2
  %32 = getelementptr inbounds [256 x i32], [256 x i32]* %7, i64 0, i64 254
  %33 = getelementptr inbounds [256 x i32], [256 x i32]* %7, i64 0, i64 3
  %34 = getelementptr inbounds [256 x i32], [256 x i32]* %7, i64 0, i64 253
  %35 = getelementptr inbounds [256 x i32], [256 x i32]* %7, i64 0, i64 4
  %36 = getelementptr inbounds [256 x i32], [256 x i32]* %7, i64 0, i64 252
  %37 = getelementptr inbounds [256 x i32], [256 x i32]* %7, i64 0, i64 5
  %38 = getelementptr inbounds [256 x i32], [256 x i32]* %7, i64 0, i64 251
  %39 = getelementptr inbounds [256 x i32], [256 x i32]* %7, i64 0, i64 6
  %40 = getelementptr inbounds [256 x i32], [256 x i32]* %7, i64 0, i64 250
  %41 = getelementptr inbounds [256 x i32], [256 x i32]* %7, i64 0, i64 7
  %42 = getelementptr inbounds [256 x i32], [256 x i32]* %7, i64 0, i64 249
  %43 = getelementptr inbounds [256 x i32], [256 x i32]* %7, i64 0, i64 8
  %44 = getelementptr inbounds [256 x i32], [256 x i32]* %7, i64 0, i64 248
  %45 = getelementptr inbounds [256 x i32], [256 x i32]* %7, i64 0, i64 9
  %46 = getelementptr inbounds [256 x i32], [256 x i32]* %7, i64 0, i64 247
  %47 = getelementptr inbounds [256 x i32], [256 x i32]* %7, i64 0, i64 10
  %48 = getelementptr inbounds [256 x i32], [256 x i32]* %7, i64 0, i64 246
  %49 = getelementptr inbounds [256 x i32], [256 x i32]* %7, i64 0, i64 11
  %50 = getelementptr inbounds [256 x i32], [256 x i32]* %7, i64 0, i64 245
  %51 = getelementptr inbounds [256 x i32], [256 x i32]* %7, i64 0, i64 12
  %52 = getelementptr inbounds [256 x i32], [256 x i32]* %7, i64 0, i64 244
  %53 = getelementptr inbounds [256 x i32], [256 x i32]* %7, i64 0, i64 13
  %54 = getelementptr inbounds [256 x i32], [256 x i32]* %7, i64 0, i64 243
  %55 = getelementptr inbounds [256 x i32], [256 x i32]* %7, i64 0, i64 14
  %56 = getelementptr inbounds [256 x i32], [256 x i32]* %7, i64 0, i64 242
  %57 = getelementptr inbounds [256 x i32], [256 x i32]* %7, i64 0, i64 15
  %58 = getelementptr inbounds [256 x i32], [256 x i32]* %7, i64 0, i64 241
  %59 = icmp sgt i32 %26, 0
  %60 = icmp slt i32 %3, 25
  %61 = icmp sgt i32 %3, 50
  %62 = select i1 %61, i64 7, i64 4
  %63 = select i1 %60, i64 1, i64 %62
  %64 = getelementptr inbounds %struct.VP8LMultipliers, %struct.VP8LMultipliers* %8, i64 0, i32 0
  %65 = bitcast %struct.VP8LMultipliers* %8 to i24*
  %66 = sext i32 %0 to i64
  %67 = add nsw i32 %0, 2
  %68 = sext i32 %67 to i64
  %69 = sext i32 %14 to i64
  %70 = zext i32 %16 to i64
  %71 = zext i32 %14 to i64
  br label %72

72:                                               ; preds = %758, %20
  %73 = phi i64 [ 0, %20 ], [ %765, %758 ]
  %74 = phi i8 [ 0, %20 ], [ %764, %758 ]
  %75 = phi i8 [ 0, %20 ], [ %763, %758 ]
  %76 = phi i8 [ 0, %20 ], [ %762, %758 ]
  %77 = phi i8 [ 0, %20 ], [ %761, %758 ]
  %78 = phi i8 [ 0, %20 ], [ %760, %758 ]
  %79 = phi i8 [ 0, %20 ], [ %759, %758 ]
  br i1 %21, label %80, label %758

80:                                               ; preds = %72
  %81 = trunc i64 %73 to i32
  %82 = shl i32 %81, %2
  %83 = add nsw i32 %82, %11
  %84 = icmp sgt i32 %83, %1
  %85 = select i1 %84, i32 %1, i32 %83
  %86 = mul nsw i64 %73, %69
  %87 = icmp eq i64 %73, 0
  %88 = sub nsw i32 %85, %82
  %89 = mul i32 %82, %0
  %90 = sext i32 %89 to i64
  %91 = getelementptr inbounds i32, i32* %4, i64 %90
  %92 = sub nsw i32 %1, %82
  %93 = icmp slt i32 %92, %11
  %94 = select i1 %93, i32 %92, i32 %11
  %95 = icmp sgt i32 %94, 0
  %96 = icmp sgt i32 %85, %82
  %97 = sext i32 %82 to i64
  %98 = sext i32 %85 to i64
  br label %99

99:                                               ; preds = %751, %80
  %100 = phi i64 [ 0, %80 ], [ %752, %751 ]
  %101 = phi i8 [ %74, %80 ], [ %125, %751 ]
  %102 = phi i8 [ %75, %80 ], [ %124, %751 ]
  %103 = phi i8 [ %76, %80 ], [ %123, %751 ]
  %104 = phi i8 [ %77, %80 ], [ %646, %751 ]
  %105 = phi i8 [ %78, %80 ], [ %647, %751 ]
  %106 = phi i8 [ %79, %80 ], [ %648, %751 ]
  %107 = trunc i64 %100 to i32
  %108 = shl i32 %107, %2
  %109 = add nsw i32 %108, %11
  %110 = icmp sgt i32 %109, %0
  %111 = select i1 %110, i32 %0, i32 %109
  %112 = add nsw i64 %100, %86
  br i1 %87, label %122, label %113

113:                                              ; preds = %99
  %114 = sub nsw i64 %112, %69
  %115 = getelementptr inbounds i32, i32* %5, i64 %114
  %116 = load i32, i32* %115, align 4
  %117 = trunc i32 %116 to i8
  %118 = lshr i32 %116, 8
  %119 = trunc i32 %118 to i8
  %120 = lshr i32 %116, 16
  %121 = trunc i32 %120 to i8
  br label %122

122:                                              ; preds = %99, %113
  %123 = phi i8 [ %103, %99 ], [ %121, %113 ]
  %124 = phi i8 [ %102, %99 ], [ %119, %113 ]
  %125 = phi i8 [ %101, %99 ], [ %117, %113 ]
  %126 = sub nsw i32 %111, %108
  %127 = sext i32 %108 to i64
  %128 = getelementptr inbounds i32, i32* %91, i64 %127
  call void @llvm.lifetime.start.p0i8(i64 1024, i8* nonnull %27) #3
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %27, i8 0, i64 1024, i1 false) #3
  %129 = load void (i32*, i32, i32, i32, i32, i32*)*, void (i32*, i32, i32, i32, i32, i32*)** @VP8LCollectColorRedTransforms, align 8
  call void %129(i32* %128, i32 %0, i32 %126, i32 %88, i32 0, i32* nonnull %28) #3
  %130 = load float (i32*, i32*)*, float (i32*, i32*)** @VP8LCombinedShannonEntropy, align 8
  %131 = call float %130(i32* nonnull %28, i32* nonnull %22) #3
  %132 = load i32, i32* %28, align 16
  %133 = mul nsw i32 %132, 3
  %134 = sitofp i32 %133 to double
  %135 = load i32, i32* %29, align 4
  %136 = load i32, i32* %30, align 4
  %137 = add nsw i32 %136, %135
  %138 = sitofp i32 %137 to double
  %139 = fmul double %138, 2.400000e+00
  %140 = fadd double %139, %134
  %141 = load i32, i32* %31, align 8
  %142 = load i32, i32* %32, align 8
  %143 = add nsw i32 %142, %141
  %144 = sitofp i32 %143 to double
  %145 = fmul double %144, 1.440000e+00
  %146 = fadd double %140, %145
  %147 = load i32, i32* %33, align 4
  %148 = load i32, i32* %34, align 4
  %149 = add nsw i32 %148, %147
  %150 = sitofp i32 %149 to double
  %151 = fmul double %150, 8.640000e-01
  %152 = fadd double %146, %151
  %153 = load i32, i32* %35, align 16
  %154 = load i32, i32* %36, align 16
  %155 = add nsw i32 %154, %153
  %156 = sitofp i32 %155 to double
  %157 = fmul double %156, 5.184000e-01
  %158 = fadd double %152, %157
  %159 = load i32, i32* %37, align 4
  %160 = load i32, i32* %38, align 4
  %161 = add nsw i32 %160, %159
  %162 = sitofp i32 %161 to double
  %163 = fmul double %162, 3.110400e-01
  %164 = fadd double %158, %163
  %165 = load i32, i32* %39, align 8
  %166 = load i32, i32* %40, align 8
  %167 = add nsw i32 %166, %165
  %168 = sitofp i32 %167 to double
  %169 = fmul double %168, 0x3FC7E34B945308BB
  %170 = fadd double %164, %169
  %171 = load i32, i32* %41, align 4
  %172 = load i32, i32* %42, align 4
  %173 = add nsw i32 %172, %171
  %174 = sitofp i32 %173 to double
  %175 = fmul double %174, 0x3FBCAA5AB1FD3DAD
  %176 = fadd double %170, %175
  %177 = load i32, i32* %43, align 16
  %178 = load i32, i32* %44, align 16
  %179 = add nsw i32 %178, %177
  %180 = sitofp i32 %179 to double
  %181 = fmul double %180, 0x3FB133033797F1CE
  %182 = fadd double %176, %181
  %183 = load i32, i32* %45, align 4
  %184 = load i32, i32* %46, align 4
  %185 = add nsw i32 %184, %183
  %186 = sitofp i32 %185 to double
  %187 = fmul double %186, 0x3FA4A39D75E98891
  %188 = fadd double %182, %187
  %189 = load i32, i32* %47, align 8
  %190 = load i32, i32* %48, align 8
  %191 = add nsw i32 %190, %189
  %192 = sitofp i32 %191 to double
  %193 = fmul double %192, 0x3F98C4568D7EA3E1
  %194 = fadd double %188, %193
  %195 = load i32, i32* %49, align 4
  %196 = load i32, i32* %50, align 4
  %197 = add nsw i32 %196, %195
  %198 = sitofp i32 %197 to double
  %199 = fmul double %198, 0x3F8DB867DCFE5E41
  %200 = fadd double %194, %199
  %201 = load i32, i32* %51, align 16
  %202 = load i32, i32* %52, align 16
  %203 = add nsw i32 %202, %201
  %204 = sitofp i32 %203 to double
  %205 = fmul double %204, 0x3F81D50B1E32388D
  %206 = fadd double %200, %205
  %207 = load i32, i32* %53, align 4
  %208 = load i32, i32* %54, align 4
  %209 = add nsw i32 %208, %207
  %210 = sitofp i32 %209 to double
  %211 = fmul double %210, 0x3F75660D576F770F
  %212 = fadd double %206, %211
  %213 = load i32, i32* %55, align 8
  %214 = load i32, i32* %56, align 8
  %215 = add nsw i32 %214, %213
  %216 = sitofp i32 %215 to double
  %217 = fmul double %216, 0x3F69ADA99C1F5BAB
  %218 = fadd double %212, %217
  %219 = load i32, i32* %57, align 4
  %220 = load i32, i32* %58, align 4
  %221 = add nsw i32 %220, %219
  %222 = sitofp i32 %221 to double
  %223 = fmul double %222, 0x3F5ED06521BF3ACD
  %224 = fadd double %218, %223
  %225 = fmul double %224, -1.000000e-01
  %226 = fptrunc double %225 to float
  %227 = fadd float %131, %226
  %228 = icmp eq i8 %104, 0
  %229 = fadd float %227, -3.000000e+00
  %230 = select i1 %228, float %229, float %227
  call void @llvm.lifetime.end.p0i8(i64 1024, i8* nonnull %27) #3
  br i1 %59, label %231, label %369

231:                                              ; preds = %122
  %232 = icmp eq i8 %125, 0
  %233 = fadd float %230, -3.000000e+00
  %234 = select i1 %232, float %233, float %230
  %235 = fadd float %234, -3.000000e+00
  br label %236

236:                                              ; preds = %364, %231
  %237 = phi i32 [ %366, %364 ], [ 0, %231 ]
  %238 = phi i32 [ %367, %364 ], [ 0, %231 ]
  %239 = phi float [ %365, %364 ], [ %235, %231 ]
  %240 = lshr i32 32, %238
  %241 = sub nsw i32 0, %240
  %242 = icmp slt i32 %240, %241
  br i1 %242, label %364, label %243

243:                                              ; preds = %236
  %244 = shl i32 %240, 1
  br label %245

245:                                              ; preds = %245, %243
  %246 = phi i32 [ %237, %243 ], [ %361, %245 ]
  %247 = phi i32 [ %241, %243 ], [ %362, %245 ]
  %248 = phi float [ %239, %243 ], [ %360, %245 ]
  %249 = add nsw i32 %247, %246
  call void @llvm.lifetime.start.p0i8(i64 1024, i8* nonnull %27) #3
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %27, i8 0, i64 1024, i1 false) #3
  %250 = load void (i32*, i32, i32, i32, i32, i32*)*, void (i32*, i32, i32, i32, i32, i32*)** @VP8LCollectColorRedTransforms, align 8
  call void %250(i32* %128, i32 %0, i32 %126, i32 %88, i32 %249, i32* nonnull %28) #3
  %251 = load float (i32*, i32*)*, float (i32*, i32*)** @VP8LCombinedShannonEntropy, align 8
  %252 = call float %251(i32* nonnull %28, i32* nonnull %22) #3
  %253 = load i32, i32* %28, align 16
  %254 = mul nsw i32 %253, 3
  %255 = sitofp i32 %254 to double
  %256 = load i32, i32* %29, align 4
  %257 = load i32, i32* %30, align 4
  %258 = add nsw i32 %257, %256
  %259 = sitofp i32 %258 to double
  %260 = fmul double %259, 2.400000e+00
  %261 = fadd double %260, %255
  %262 = load i32, i32* %31, align 8
  %263 = load i32, i32* %32, align 8
  %264 = add nsw i32 %263, %262
  %265 = sitofp i32 %264 to double
  %266 = fmul double %265, 1.440000e+00
  %267 = fadd double %261, %266
  %268 = load i32, i32* %33, align 4
  %269 = load i32, i32* %34, align 4
  %270 = add nsw i32 %269, %268
  %271 = sitofp i32 %270 to double
  %272 = fmul double %271, 8.640000e-01
  %273 = fadd double %267, %272
  %274 = load i32, i32* %35, align 16
  %275 = load i32, i32* %36, align 16
  %276 = add nsw i32 %275, %274
  %277 = sitofp i32 %276 to double
  %278 = fmul double %277, 5.184000e-01
  %279 = fadd double %273, %278
  %280 = load i32, i32* %37, align 4
  %281 = load i32, i32* %38, align 4
  %282 = add nsw i32 %281, %280
  %283 = sitofp i32 %282 to double
  %284 = fmul double %283, 3.110400e-01
  %285 = fadd double %279, %284
  %286 = load i32, i32* %39, align 8
  %287 = load i32, i32* %40, align 8
  %288 = add nsw i32 %287, %286
  %289 = sitofp i32 %288 to double
  %290 = fmul double %289, 0x3FC7E34B945308BB
  %291 = fadd double %285, %290
  %292 = load i32, i32* %41, align 4
  %293 = load i32, i32* %42, align 4
  %294 = add nsw i32 %293, %292
  %295 = sitofp i32 %294 to double
  %296 = fmul double %295, 0x3FBCAA5AB1FD3DAD
  %297 = fadd double %291, %296
  %298 = load i32, i32* %43, align 16
  %299 = load i32, i32* %44, align 16
  %300 = add nsw i32 %299, %298
  %301 = sitofp i32 %300 to double
  %302 = fmul double %301, 0x3FB133033797F1CE
  %303 = fadd double %297, %302
  %304 = load i32, i32* %45, align 4
  %305 = load i32, i32* %46, align 4
  %306 = add nsw i32 %305, %304
  %307 = sitofp i32 %306 to double
  %308 = fmul double %307, 0x3FA4A39D75E98891
  %309 = fadd double %303, %308
  %310 = load i32, i32* %47, align 8
  %311 = load i32, i32* %48, align 8
  %312 = add nsw i32 %311, %310
  %313 = sitofp i32 %312 to double
  %314 = fmul double %313, 0x3F98C4568D7EA3E1
  %315 = fadd double %309, %314
  %316 = load i32, i32* %49, align 4
  %317 = load i32, i32* %50, align 4
  %318 = add nsw i32 %317, %316
  %319 = sitofp i32 %318 to double
  %320 = fmul double %319, 0x3F8DB867DCFE5E41
  %321 = fadd double %315, %320
  %322 = load i32, i32* %51, align 16
  %323 = load i32, i32* %52, align 16
  %324 = add nsw i32 %323, %322
  %325 = sitofp i32 %324 to double
  %326 = fmul double %325, 0x3F81D50B1E32388D
  %327 = fadd double %321, %326
  %328 = load i32, i32* %53, align 4
  %329 = load i32, i32* %54, align 4
  %330 = add nsw i32 %329, %328
  %331 = sitofp i32 %330 to double
  %332 = fmul double %331, 0x3F75660D576F770F
  %333 = fadd double %327, %332
  %334 = load i32, i32* %55, align 8
  %335 = load i32, i32* %56, align 8
  %336 = add nsw i32 %335, %334
  %337 = sitofp i32 %336 to double
  %338 = fmul double %337, 0x3F69ADA99C1F5BAB
  %339 = fadd double %333, %338
  %340 = load i32, i32* %57, align 4
  %341 = load i32, i32* %58, align 4
  %342 = add nsw i32 %341, %340
  %343 = sitofp i32 %342 to double
  %344 = fmul double %343, 0x3F5ED06521BF3ACD
  %345 = fadd double %339, %344
  %346 = fmul double %345, -1.000000e-01
  %347 = fptrunc double %346 to float
  %348 = fadd float %252, %347
  %349 = trunc i32 %249 to i8
  %350 = icmp eq i8 %104, %349
  %351 = fadd float %348, -3.000000e+00
  %352 = select i1 %350, float %351, float %348
  %353 = icmp eq i8 %125, %349
  %354 = fadd float %352, -3.000000e+00
  %355 = select i1 %353, float %354, float %352
  %356 = icmp eq i32 %249, 0
  %357 = fadd float %355, -3.000000e+00
  %358 = select i1 %356, float %357, float %355
  call void @llvm.lifetime.end.p0i8(i64 1024, i8* nonnull %27) #3
  %359 = fcmp olt float %358, %248
  %360 = select i1 %359, float %358, float %248
  %361 = select i1 %359, i32 %249, i32 %246
  %362 = add nsw i32 %247, %244
  %363 = icmp sgt i32 %362, %240
  br i1 %363, label %364, label %245

364:                                              ; preds = %245, %236
  %365 = phi float [ %239, %236 ], [ %360, %245 ]
  %366 = phi i32 [ %237, %236 ], [ %361, %245 ]
  %367 = add nuw nsw i32 %238, 1
  %368 = icmp eq i32 %367, %26
  br i1 %368, label %369, label %236

369:                                              ; preds = %364, %122
  %370 = phi i32 [ 0, %122 ], [ %366, %364 ]
  call void @llvm.lifetime.start.p0i8(i64 1024, i8* nonnull %27) #3
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %27, i8 0, i64 1024, i1 false) #3
  %371 = load void (i32*, i32, i32, i32, i32, i32, i32*)*, void (i32*, i32, i32, i32, i32, i32, i32*)** @VP8LCollectColorBlueTransforms, align 8
  call void %371(i32* %128, i32 %0, i32 %126, i32 %88, i32 0, i32 0, i32* nonnull %28) #3
  %372 = load float (i32*, i32*)*, float (i32*, i32*)** @VP8LCombinedShannonEntropy, align 8
  %373 = call float %372(i32* nonnull %28, i32* nonnull %23) #3
  %374 = load i32, i32* %28, align 16
  %375 = mul nsw i32 %374, 3
  %376 = sitofp i32 %375 to double
  %377 = load i32, i32* %29, align 4
  %378 = load i32, i32* %30, align 4
  %379 = add nsw i32 %378, %377
  %380 = sitofp i32 %379 to double
  %381 = fmul double %380, 2.400000e+00
  %382 = fadd double %381, %376
  %383 = load i32, i32* %31, align 8
  %384 = load i32, i32* %32, align 8
  %385 = add nsw i32 %384, %383
  %386 = sitofp i32 %385 to double
  %387 = fmul double %386, 1.440000e+00
  %388 = fadd double %382, %387
  %389 = load i32, i32* %33, align 4
  %390 = load i32, i32* %34, align 4
  %391 = add nsw i32 %390, %389
  %392 = sitofp i32 %391 to double
  %393 = fmul double %392, 8.640000e-01
  %394 = fadd double %388, %393
  %395 = load i32, i32* %35, align 16
  %396 = load i32, i32* %36, align 16
  %397 = add nsw i32 %396, %395
  %398 = sitofp i32 %397 to double
  %399 = fmul double %398, 5.184000e-01
  %400 = fadd double %394, %399
  %401 = load i32, i32* %37, align 4
  %402 = load i32, i32* %38, align 4
  %403 = add nsw i32 %402, %401
  %404 = sitofp i32 %403 to double
  %405 = fmul double %404, 3.110400e-01
  %406 = fadd double %400, %405
  %407 = load i32, i32* %39, align 8
  %408 = load i32, i32* %40, align 8
  %409 = add nsw i32 %408, %407
  %410 = sitofp i32 %409 to double
  %411 = fmul double %410, 0x3FC7E34B945308BB
  %412 = fadd double %406, %411
  %413 = load i32, i32* %41, align 4
  %414 = load i32, i32* %42, align 4
  %415 = add nsw i32 %414, %413
  %416 = sitofp i32 %415 to double
  %417 = fmul double %416, 0x3FBCAA5AB1FD3DAD
  %418 = fadd double %412, %417
  %419 = load i32, i32* %43, align 16
  %420 = load i32, i32* %44, align 16
  %421 = add nsw i32 %420, %419
  %422 = sitofp i32 %421 to double
  %423 = fmul double %422, 0x3FB133033797F1CE
  %424 = fadd double %418, %423
  %425 = load i32, i32* %45, align 4
  %426 = load i32, i32* %46, align 4
  %427 = add nsw i32 %426, %425
  %428 = sitofp i32 %427 to double
  %429 = fmul double %428, 0x3FA4A39D75E98891
  %430 = fadd double %424, %429
  %431 = load i32, i32* %47, align 8
  %432 = load i32, i32* %48, align 8
  %433 = add nsw i32 %432, %431
  %434 = sitofp i32 %433 to double
  %435 = fmul double %434, 0x3F98C4568D7EA3E1
  %436 = fadd double %430, %435
  %437 = load i32, i32* %49, align 4
  %438 = load i32, i32* %50, align 4
  %439 = add nsw i32 %438, %437
  %440 = sitofp i32 %439 to double
  %441 = fmul double %440, 0x3F8DB867DCFE5E41
  %442 = fadd double %436, %441
  %443 = load i32, i32* %51, align 16
  %444 = load i32, i32* %52, align 16
  %445 = add nsw i32 %444, %443
  %446 = sitofp i32 %445 to double
  %447 = fmul double %446, 0x3F81D50B1E32388D
  %448 = fadd double %442, %447
  %449 = load i32, i32* %53, align 4
  %450 = load i32, i32* %54, align 4
  %451 = add nsw i32 %450, %449
  %452 = sitofp i32 %451 to double
  %453 = fmul double %452, 0x3F75660D576F770F
  %454 = fadd double %448, %453
  %455 = load i32, i32* %55, align 8
  %456 = load i32, i32* %56, align 8
  %457 = add nsw i32 %456, %455
  %458 = sitofp i32 %457 to double
  %459 = fmul double %458, 0x3F69ADA99C1F5BAB
  %460 = fadd double %454, %459
  %461 = load i32, i32* %57, align 4
  %462 = load i32, i32* %58, align 4
  %463 = add nsw i32 %462, %461
  %464 = sitofp i32 %463 to double
  %465 = fmul double %464, 0x3F5ED06521BF3ACD
  %466 = fadd double %460, %465
  %467 = fmul double %466, -1.000000e-01
  %468 = fptrunc double %467 to float
  %469 = fadd float %373, %468
  %470 = icmp eq i8 %105, 0
  %471 = fadd float %469, -3.000000e+00
  %472 = select i1 %470, float %471, float %469
  %473 = icmp eq i8 %124, 0
  %474 = fadd float %472, -3.000000e+00
  %475 = select i1 %473, float %474, float %472
  %476 = icmp eq i8 %106, 0
  %477 = fadd float %475, -3.000000e+00
  %478 = select i1 %476, float %477, float %475
  %479 = icmp eq i8 %123, 0
  %480 = fadd float %478, -3.000000e+00
  %481 = select i1 %479, float %480, float %478
  %482 = fadd float %481, -3.000000e+00
  %483 = fadd float %482, -3.000000e+00
  call void @llvm.lifetime.end.p0i8(i64 1024, i8* nonnull %27) #3
  br label %484

484:                                              ; preds = %636, %369
  %485 = phi i64 [ %642, %636 ], [ 0, %369 ]
  %486 = phi i32 [ %632, %636 ], [ 0, %369 ]
  %487 = phi i32 [ %631, %636 ], [ 0, %369 ]
  %488 = phi float [ %630, %636 ], [ %483, %369 ]
  %489 = getelementptr inbounds [7 x i8], [7 x i8]* @GetBestGreenRedToBlue.delta_lut, i64 0, i64 %485
  %490 = load i8, i8* %489, align 1
  %491 = sext i8 %490 to i32
  %492 = icmp eq i64 %485, 4
  %493 = and i1 %60, %492
  %494 = xor i1 %493, true
  br label %495

495:                                              ; preds = %495, %484
  %496 = phi i64 [ %633, %495 ], [ 0, %484 ]
  %497 = phi i32 [ %632, %495 ], [ %486, %484 ]
  %498 = phi i32 [ %631, %495 ], [ %487, %484 ]
  %499 = phi float [ %630, %495 ], [ %488, %484 ]
  %500 = getelementptr inbounds [8 x [2 x i8]], [8 x [2 x i8]]* @GetBestGreenRedToBlue.offset, i64 0, i64 %496, i64 0
  %501 = load i8, i8* %500, align 2
  %502 = sext i8 %501 to i32
  %503 = mul nsw i32 %502, %491
  %504 = add nsw i32 %503, %497
  %505 = getelementptr inbounds [8 x [2 x i8]], [8 x [2 x i8]]* @GetBestGreenRedToBlue.offset, i64 0, i64 %496, i64 1
  %506 = load i8, i8* %505, align 1
  %507 = sext i8 %506 to i32
  %508 = mul nsw i32 %507, %491
  %509 = add nsw i32 %508, %498
  call void @llvm.lifetime.start.p0i8(i64 1024, i8* nonnull %27) #3
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %27, i8 0, i64 1024, i1 false) #3
  %510 = load void (i32*, i32, i32, i32, i32, i32, i32*)*, void (i32*, i32, i32, i32, i32, i32, i32*)** @VP8LCollectColorBlueTransforms, align 8
  call void %510(i32* %128, i32 %0, i32 %126, i32 %88, i32 %504, i32 %509, i32* nonnull %28) #3
  %511 = load float (i32*, i32*)*, float (i32*, i32*)** @VP8LCombinedShannonEntropy, align 8
  %512 = call float %511(i32* nonnull %28, i32* nonnull %23) #3
  %513 = load i32, i32* %28, align 16
  %514 = mul nsw i32 %513, 3
  %515 = sitofp i32 %514 to double
  %516 = load i32, i32* %29, align 4
  %517 = load i32, i32* %30, align 4
  %518 = add nsw i32 %517, %516
  %519 = sitofp i32 %518 to double
  %520 = fmul double %519, 2.400000e+00
  %521 = fadd double %520, %515
  %522 = load i32, i32* %31, align 8
  %523 = load i32, i32* %32, align 8
  %524 = add nsw i32 %523, %522
  %525 = sitofp i32 %524 to double
  %526 = fmul double %525, 1.440000e+00
  %527 = fadd double %521, %526
  %528 = load i32, i32* %33, align 4
  %529 = load i32, i32* %34, align 4
  %530 = add nsw i32 %529, %528
  %531 = sitofp i32 %530 to double
  %532 = fmul double %531, 8.640000e-01
  %533 = fadd double %527, %532
  %534 = load i32, i32* %35, align 16
  %535 = load i32, i32* %36, align 16
  %536 = add nsw i32 %535, %534
  %537 = sitofp i32 %536 to double
  %538 = fmul double %537, 5.184000e-01
  %539 = fadd double %533, %538
  %540 = load i32, i32* %37, align 4
  %541 = load i32, i32* %38, align 4
  %542 = add nsw i32 %541, %540
  %543 = sitofp i32 %542 to double
  %544 = fmul double %543, 3.110400e-01
  %545 = fadd double %539, %544
  %546 = load i32, i32* %39, align 8
  %547 = load i32, i32* %40, align 8
  %548 = add nsw i32 %547, %546
  %549 = sitofp i32 %548 to double
  %550 = fmul double %549, 0x3FC7E34B945308BB
  %551 = fadd double %545, %550
  %552 = load i32, i32* %41, align 4
  %553 = load i32, i32* %42, align 4
  %554 = add nsw i32 %553, %552
  %555 = sitofp i32 %554 to double
  %556 = fmul double %555, 0x3FBCAA5AB1FD3DAD
  %557 = fadd double %551, %556
  %558 = load i32, i32* %43, align 16
  %559 = load i32, i32* %44, align 16
  %560 = add nsw i32 %559, %558
  %561 = sitofp i32 %560 to double
  %562 = fmul double %561, 0x3FB133033797F1CE
  %563 = fadd double %557, %562
  %564 = load i32, i32* %45, align 4
  %565 = load i32, i32* %46, align 4
  %566 = add nsw i32 %565, %564
  %567 = sitofp i32 %566 to double
  %568 = fmul double %567, 0x3FA4A39D75E98891
  %569 = fadd double %563, %568
  %570 = load i32, i32* %47, align 8
  %571 = load i32, i32* %48, align 8
  %572 = add nsw i32 %571, %570
  %573 = sitofp i32 %572 to double
  %574 = fmul double %573, 0x3F98C4568D7EA3E1
  %575 = fadd double %569, %574
  %576 = load i32, i32* %49, align 4
  %577 = load i32, i32* %50, align 4
  %578 = add nsw i32 %577, %576
  %579 = sitofp i32 %578 to double
  %580 = fmul double %579, 0x3F8DB867DCFE5E41
  %581 = fadd double %575, %580
  %582 = load i32, i32* %51, align 16
  %583 = load i32, i32* %52, align 16
  %584 = add nsw i32 %583, %582
  %585 = sitofp i32 %584 to double
  %586 = fmul double %585, 0x3F81D50B1E32388D
  %587 = fadd double %581, %586
  %588 = load i32, i32* %53, align 4
  %589 = load i32, i32* %54, align 4
  %590 = add nsw i32 %589, %588
  %591 = sitofp i32 %590 to double
  %592 = fmul double %591, 0x3F75660D576F770F
  %593 = fadd double %587, %592
  %594 = load i32, i32* %55, align 8
  %595 = load i32, i32* %56, align 8
  %596 = add nsw i32 %595, %594
  %597 = sitofp i32 %596 to double
  %598 = fmul double %597, 0x3F69ADA99C1F5BAB
  %599 = fadd double %593, %598
  %600 = load i32, i32* %57, align 4
  %601 = load i32, i32* %58, align 4
  %602 = add nsw i32 %601, %600
  %603 = sitofp i32 %602 to double
  %604 = fmul double %603, 0x3F5ED06521BF3ACD
  %605 = fadd double %599, %604
  %606 = fmul double %605, -1.000000e-01
  %607 = fptrunc double %606 to float
  %608 = fadd float %512, %607
  %609 = trunc i32 %504 to i8
  %610 = icmp eq i8 %105, %609
  %611 = fadd float %608, -3.000000e+00
  %612 = select i1 %610, float %611, float %608
  %613 = icmp eq i8 %124, %609
  %614 = fadd float %612, -3.000000e+00
  %615 = select i1 %613, float %614, float %612
  %616 = trunc i32 %509 to i8
  %617 = icmp eq i8 %106, %616
  %618 = fadd float %615, -3.000000e+00
  %619 = select i1 %617, float %618, float %615
  %620 = icmp eq i8 %123, %616
  %621 = fadd float %619, -3.000000e+00
  %622 = select i1 %620, float %621, float %619
  %623 = icmp eq i32 %504, 0
  %624 = fadd float %622, -3.000000e+00
  %625 = select i1 %623, float %624, float %622
  %626 = icmp eq i32 %509, 0
  %627 = fadd float %625, -3.000000e+00
  %628 = select i1 %626, float %627, float %625
  call void @llvm.lifetime.end.p0i8(i64 1024, i8* nonnull %27) #3
  %629 = fcmp olt float %628, %499
  %630 = select i1 %629, float %628, float %499
  %631 = select i1 %629, i32 %509, i32 %498
  %632 = select i1 %629, i32 %504, i32 %497
  %633 = add nuw nsw i64 %496, 1
  %634 = icmp ult i64 %633, 8
  %635 = and i1 %634, %494
  br i1 %635, label %495, label %636

636:                                              ; preds = %495
  %637 = add nsw i64 %485, -4
  %638 = icmp ugt i64 %637, 2
  %639 = or i32 %632, %631
  %640 = icmp ne i32 %639, 0
  %641 = or i1 %638, %640
  %642 = add nuw nsw i64 %485, 1
  %643 = icmp ult i64 %642, %63
  %644 = and i1 %643, %641
  br i1 %644, label %484, label %645

645:                                              ; preds = %636
  %646 = trunc i32 %370 to i8
  %647 = trunc i32 %632 to i8
  %648 = trunc i32 %631 to i8
  %649 = shl i32 %631, 16
  %650 = shl i32 %632, 8
  %651 = and i32 %650, 65280
  %652 = and i32 %370, 255
  %653 = or i32 %652, %649
  %654 = or i32 %653, %651
  %655 = or i32 %654, -16777216
  %656 = getelementptr inbounds i32, i32* %5, i64 %112
  store i32 %655, i32* %656, align 4
  %657 = trunc i32 %631 to i24
  %658 = shl i24 %657, 16
  %659 = trunc i32 %632 to i24
  %660 = shl i24 %659, 8
  %661 = and i24 %660, 65280
  %662 = trunc i32 %370 to i24
  %663 = and i24 %662, 255
  %664 = or i24 %658, %663
  %665 = or i24 %664, %661
  call void @llvm.lifetime.start.p0i8(i64 3, i8* nonnull %64)
  store i24 %665, i24* %65, align 4
  %666 = sub nsw i32 %0, %108
  %667 = icmp slt i32 %666, %11
  %668 = select i1 %667, i32 %666, i32 %11
  br i1 %95, label %669, label %680

669:                                              ; preds = %645
  %670 = add nsw i32 %108, %89
  %671 = sext i32 %670 to i64
  %672 = getelementptr inbounds i32, i32* %4, i64 %671
  br label %673

673:                                              ; preds = %673, %669
  %674 = phi i32 [ %94, %669 ], [ %676, %673 ]
  %675 = phi i32* [ %672, %669 ], [ %678, %673 ]
  %676 = add nsw i32 %674, -1
  %677 = load void (%struct.VP8LMultipliers*, i32*, i32)*, void (%struct.VP8LMultipliers*, i32*, i32)** @VP8LTransformColor, align 8
  call void %677(%struct.VP8LMultipliers* nonnull %8, i32* %675, i32 %668) #3
  %678 = getelementptr inbounds i32, i32* %675, i64 %66
  %679 = icmp sgt i32 %676, 0
  br i1 %679, label %673, label %680

680:                                              ; preds = %673, %645
  call void @llvm.lifetime.end.p0i8(i64 3, i8* nonnull %64)
  br i1 %96, label %681, label %751

681:                                              ; preds = %680
  %682 = add i32 %89, %108
  br label %683

683:                                              ; preds = %681, %747
  %684 = phi i64 [ %97, %681 ], [ %748, %747 ]
  %685 = phi i32 [ %682, %681 ], [ %750, %747 ]
  %686 = mul nsw i64 %684, %66
  %687 = add nsw i64 %686, %127
  %688 = trunc i64 %686 to i32
  %689 = add i32 %111, %688
  %690 = sext i32 %689 to i64
  %691 = icmp slt i64 %687, %690
  br i1 %691, label %692, label %747

692:                                              ; preds = %683
  %693 = sext i32 %685 to i64
  br label %694

694:                                              ; preds = %692, %744
  %695 = phi i64 [ %693, %692 ], [ %745, %744 ]
  %696 = getelementptr inbounds i32, i32* %4, i64 %695
  %697 = load i32, i32* %696, align 4
  %698 = icmp sgt i64 %695, 1
  br i1 %698, label %699, label %709

699:                                              ; preds = %694
  %700 = add nsw i64 %695, -2
  %701 = getelementptr inbounds i32, i32* %4, i64 %700
  %702 = load i32, i32* %701, align 4
  %703 = icmp eq i32 %697, %702
  br i1 %703, label %704, label %709

704:                                              ; preds = %699
  %705 = add nsw i64 %695, -1
  %706 = getelementptr inbounds i32, i32* %4, i64 %705
  %707 = load i32, i32* %706, align 4
  %708 = icmp eq i32 %697, %707
  br i1 %708, label %744, label %709

709:                                              ; preds = %704, %699, %694
  %710 = icmp slt i64 %695, %68
  br i1 %710, label %732, label %711

711:                                              ; preds = %709
  %712 = add nsw i64 %695, -2
  %713 = getelementptr inbounds i32, i32* %4, i64 %712
  %714 = load i32, i32* %713, align 4
  %715 = sub nsw i64 %695, %66
  %716 = add nsw i64 %715, -2
  %717 = getelementptr inbounds i32, i32* %4, i64 %716
  %718 = load i32, i32* %717, align 4
  %719 = icmp eq i32 %714, %718
  br i1 %719, label %720, label %732

720:                                              ; preds = %711
  %721 = add nsw i64 %695, -1
  %722 = getelementptr inbounds i32, i32* %4, i64 %721
  %723 = load i32, i32* %722, align 4
  %724 = add nsw i64 %715, -1
  %725 = getelementptr inbounds i32, i32* %4, i64 %724
  %726 = load i32, i32* %725, align 4
  %727 = icmp eq i32 %723, %726
  br i1 %727, label %728, label %732

728:                                              ; preds = %720
  %729 = getelementptr inbounds i32, i32* %4, i64 %715
  %730 = load i32, i32* %729, align 4
  %731 = icmp eq i32 %697, %730
  br i1 %731, label %744, label %732

732:                                              ; preds = %709, %728, %720, %711
  %733 = lshr i32 %697, 16
  %734 = and i32 %733, 255
  %735 = zext i32 %734 to i64
  %736 = getelementptr inbounds [256 x i32], [256 x i32]* %9, i64 0, i64 %735
  %737 = load i32, i32* %736, align 4
  %738 = add nsw i32 %737, 1
  store i32 %738, i32* %736, align 4
  %739 = and i32 %697, 255
  %740 = zext i32 %739 to i64
  %741 = getelementptr inbounds [256 x i32], [256 x i32]* %10, i64 0, i64 %740
  %742 = load i32, i32* %741, align 4
  %743 = add nsw i32 %742, 1
  store i32 %743, i32* %741, align 4
  br label %744

744:                                              ; preds = %728, %704, %732
  %745 = add nsw i64 %695, 1
  %746 = icmp slt i64 %745, %690
  br i1 %746, label %694, label %747

747:                                              ; preds = %744, %683
  %748 = add nsw i64 %684, 1
  %749 = icmp slt i64 %748, %98
  %750 = add i32 %685, %0
  br i1 %749, label %683, label %751

751:                                              ; preds = %747, %680
  %752 = add nuw nsw i64 %100, 1
  %753 = icmp eq i64 %752, %71
  br i1 %753, label %754, label %99

754:                                              ; preds = %751
  %755 = trunc i32 %370 to i8
  %756 = trunc i32 %632 to i8
  %757 = trunc i32 %631 to i8
  br label %758

758:                                              ; preds = %754, %72
  %759 = phi i8 [ %79, %72 ], [ %757, %754 ]
  %760 = phi i8 [ %78, %72 ], [ %756, %754 ]
  %761 = phi i8 [ %77, %72 ], [ %755, %754 ]
  %762 = phi i8 [ %76, %72 ], [ %123, %754 ]
  %763 = phi i8 [ %75, %72 ], [ %124, %754 ]
  %764 = phi i8 [ %74, %72 ], [ %125, %754 ]
  %765 = add nuw nsw i64 %73, 1
  %766 = icmp eq i64 %765, %70
  br i1 %766, label %767, label %72

767:                                              ; preds = %758, %6
  call void @llvm.lifetime.end.p0i8(i64 1024, i8* nonnull %18) #3
  call void @llvm.lifetime.end.p0i8(i64 1024, i8* nonnull %17) #3
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #1

; Function Attrs: norecurse nounwind readonly ssp uwtable
define internal fastcc float @PredictionCostSpatial(i32* nocapture readonly, i32, double) unnamed_addr #2 {
  %4 = load i32, i32* %0, align 4
  %5 = mul nsw i32 %4, %1
  %6 = sitofp i32 %5 to double
  %7 = getelementptr inbounds i32, i32* %0, i64 1
  %8 = load i32, i32* %7, align 4
  %9 = getelementptr inbounds i32, i32* %0, i64 255
  %10 = load i32, i32* %9, align 4
  %11 = add nsw i32 %10, %8
  %12 = sitofp i32 %11 to double
  %13 = fmul double %12, %2
  %14 = fadd double %13, %6
  %15 = fmul double %2, 6.000000e-01
  %16 = getelementptr inbounds i32, i32* %0, i64 2
  %17 = load i32, i32* %16, align 4
  %18 = getelementptr inbounds i32, i32* %0, i64 254
  %19 = load i32, i32* %18, align 4
  %20 = add nsw i32 %19, %17
  %21 = sitofp i32 %20 to double
  %22 = fmul double %15, %21
  %23 = fadd double %14, %22
  %24 = fmul double %15, 6.000000e-01
  %25 = getelementptr inbounds i32, i32* %0, i64 3
  %26 = load i32, i32* %25, align 4
  %27 = getelementptr inbounds i32, i32* %0, i64 253
  %28 = load i32, i32* %27, align 4
  %29 = add nsw i32 %28, %26
  %30 = sitofp i32 %29 to double
  %31 = fmul double %24, %30
  %32 = fadd double %23, %31
  %33 = fmul double %24, 6.000000e-01
  %34 = getelementptr inbounds i32, i32* %0, i64 4
  %35 = load i32, i32* %34, align 4
  %36 = getelementptr inbounds i32, i32* %0, i64 252
  %37 = load i32, i32* %36, align 4
  %38 = add nsw i32 %37, %35
  %39 = sitofp i32 %38 to double
  %40 = fmul double %33, %39
  %41 = fadd double %32, %40
  %42 = fmul double %33, 6.000000e-01
  %43 = getelementptr inbounds i32, i32* %0, i64 5
  %44 = load i32, i32* %43, align 4
  %45 = getelementptr inbounds i32, i32* %0, i64 251
  %46 = load i32, i32* %45, align 4
  %47 = add nsw i32 %46, %44
  %48 = sitofp i32 %47 to double
  %49 = fmul double %42, %48
  %50 = fadd double %41, %49
  %51 = fmul double %42, 6.000000e-01
  %52 = getelementptr inbounds i32, i32* %0, i64 6
  %53 = load i32, i32* %52, align 4
  %54 = getelementptr inbounds i32, i32* %0, i64 250
  %55 = load i32, i32* %54, align 4
  %56 = add nsw i32 %55, %53
  %57 = sitofp i32 %56 to double
  %58 = fmul double %51, %57
  %59 = fadd double %50, %58
  %60 = fmul double %51, 6.000000e-01
  %61 = getelementptr inbounds i32, i32* %0, i64 7
  %62 = load i32, i32* %61, align 4
  %63 = getelementptr inbounds i32, i32* %0, i64 249
  %64 = load i32, i32* %63, align 4
  %65 = add nsw i32 %64, %62
  %66 = sitofp i32 %65 to double
  %67 = fmul double %60, %66
  %68 = fadd double %59, %67
  %69 = fmul double %60, 6.000000e-01
  %70 = getelementptr inbounds i32, i32* %0, i64 8
  %71 = load i32, i32* %70, align 4
  %72 = getelementptr inbounds i32, i32* %0, i64 248
  %73 = load i32, i32* %72, align 4
  %74 = add nsw i32 %73, %71
  %75 = sitofp i32 %74 to double
  %76 = fmul double %69, %75
  %77 = fadd double %68, %76
  %78 = fmul double %69, 6.000000e-01
  %79 = getelementptr inbounds i32, i32* %0, i64 9
  %80 = load i32, i32* %79, align 4
  %81 = getelementptr inbounds i32, i32* %0, i64 247
  %82 = load i32, i32* %81, align 4
  %83 = add nsw i32 %82, %80
  %84 = sitofp i32 %83 to double
  %85 = fmul double %78, %84
  %86 = fadd double %77, %85
  %87 = fmul double %78, 6.000000e-01
  %88 = getelementptr inbounds i32, i32* %0, i64 10
  %89 = load i32, i32* %88, align 4
  %90 = getelementptr inbounds i32, i32* %0, i64 246
  %91 = load i32, i32* %90, align 4
  %92 = add nsw i32 %91, %89
  %93 = sitofp i32 %92 to double
  %94 = fmul double %87, %93
  %95 = fadd double %86, %94
  %96 = fmul double %87, 6.000000e-01
  %97 = getelementptr inbounds i32, i32* %0, i64 11
  %98 = load i32, i32* %97, align 4
  %99 = getelementptr inbounds i32, i32* %0, i64 245
  %100 = load i32, i32* %99, align 4
  %101 = add nsw i32 %100, %98
  %102 = sitofp i32 %101 to double
  %103 = fmul double %96, %102
  %104 = fadd double %95, %103
  %105 = fmul double %96, 6.000000e-01
  %106 = getelementptr inbounds i32, i32* %0, i64 12
  %107 = load i32, i32* %106, align 4
  %108 = getelementptr inbounds i32, i32* %0, i64 244
  %109 = load i32, i32* %108, align 4
  %110 = add nsw i32 %109, %107
  %111 = sitofp i32 %110 to double
  %112 = fmul double %105, %111
  %113 = fadd double %104, %112
  %114 = fmul double %105, 6.000000e-01
  %115 = getelementptr inbounds i32, i32* %0, i64 13
  %116 = load i32, i32* %115, align 4
  %117 = getelementptr inbounds i32, i32* %0, i64 243
  %118 = load i32, i32* %117, align 4
  %119 = add nsw i32 %118, %116
  %120 = sitofp i32 %119 to double
  %121 = fmul double %114, %120
  %122 = fadd double %113, %121
  %123 = fmul double %114, 6.000000e-01
  %124 = getelementptr inbounds i32, i32* %0, i64 14
  %125 = load i32, i32* %124, align 4
  %126 = getelementptr inbounds i32, i32* %0, i64 242
  %127 = load i32, i32* %126, align 4
  %128 = add nsw i32 %127, %125
  %129 = sitofp i32 %128 to double
  %130 = fmul double %123, %129
  %131 = fadd double %122, %130
  %132 = fmul double %123, 6.000000e-01
  %133 = getelementptr inbounds i32, i32* %0, i64 15
  %134 = load i32, i32* %133, align 4
  %135 = getelementptr inbounds i32, i32* %0, i64 241
  %136 = load i32, i32* %135, align 4
  %137 = add nsw i32 %136, %134
  %138 = sitofp i32 %137 to double
  %139 = fmul double %132, %138
  %140 = fadd double %131, %139
  %141 = fmul double %140, -1.000000e-01
  %142 = fptrunc double %141 to float
  ret float %142
}

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { norecurse nounwind readonly ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = distinct !{!2, !3}
!3 = !{!"llvm.loop.isvectorized", i32 1}
!4 = distinct !{!4, !5}
!5 = !{!"llvm.loop.unroll.disable"}
!6 = distinct !{!6, !7, !3}
!7 = !{!"llvm.loop.unroll.runtime.disable"}
!8 = !{!9}
!9 = distinct !{!9, !10}
!10 = distinct !{!10, !"LVerDomain"}
!11 = !{!12}
!12 = distinct !{!12, !10}
!13 = distinct !{!13, !3}
!14 = distinct !{!14, !3}
!15 = !{!16}
!16 = distinct !{!16, !17}
!17 = distinct !{!17, !"LVerDomain"}
!18 = !{!19}
!19 = distinct !{!19, !17}
!20 = distinct !{!20, !3}
!21 = distinct !{!21, !3}
!22 = !{!23}
!23 = distinct !{!23, !24}
!24 = distinct !{!24, !"LVerDomain"}
!25 = !{!26}
!26 = distinct !{!26, !24}
!27 = distinct !{!27, !3}
!28 = distinct !{!28, !3}
!29 = !{!30}
!30 = distinct !{!30, !31}
!31 = distinct !{!31, !"LVerDomain"}
!32 = !{!33}
!33 = distinct !{!33, !31}
!34 = distinct !{!34, !3}
!35 = distinct !{!35, !3}
