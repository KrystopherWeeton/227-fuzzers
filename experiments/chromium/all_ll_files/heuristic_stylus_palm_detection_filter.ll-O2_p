; ModuleID = '../../ui/events/ozone/evdev/touch_filter/heuristic_stylus_palm_detection_filter.cc'
source_filename = "../../ui/events/ozone/evdev/touch_filter/heuristic_stylus_palm_detection_filter.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.ui::HeuristicStylusPalmDetectionFilter" = type { %"class.ui::PalmDetectionFilter", i32, %"class.base::TimeDelta", %"class.base::TimeDelta", %"class.std::__1::vector", %"class.std::__1::vector.1" }
%"class.ui::PalmDetectionFilter" = type { i32 (...)**, %"struct.ui::SharedPalmDetectionFilterState"* }
%"class.base::TimeDelta" = type { i64 }
%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { %"class.base::TimeTicks"*, %"class.base::TimeTicks"*, %"class.std::__1::__compressed_pair" }
%"class.base::TimeTicks" = type { %"class.base::time_internal::TimeBase" }
%"class.base::time_internal::TimeBase" = type { i64 }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %"class.base::TimeTicks"* }
%"class.std::__1::vector.1" = type { %"class.std::__1::__vector_base.2" }
%"class.std::__1::__vector_base.2" = type { i32*, i32*, %"class.std::__1::__compressed_pair.3" }
%"class.std::__1::__compressed_pair.3" = type { %"struct.std::__1::__compressed_pair_elem.4" }
%"struct.std::__1::__compressed_pair_elem.4" = type { i32* }
%"struct.ui::SharedPalmDetectionFilterState" = type { %"class.base::TimeTicks", %"class.base::TimeTicks", i32, i32, %"class.base::TimeTicks" }
%"class.std::__1::vector.8" = type { %"class.std::__1::__vector_base.9" }
%"class.std::__1::__vector_base.9" = type { %"struct.ui::InProgressTouchEvdev"*, %"struct.ui::InProgressTouchEvdev"*, %"class.std::__1::__compressed_pair.10" }
%"struct.ui::InProgressTouchEvdev" = type <{ i32, i32, i32, i8, i8, i8, i8, i8, i8, i8, i8, i8, [3 x i8], float, float, i32, [4 x i8], i64, float, float, float, i32, i32, float, float, i32, i8, [7 x i8] }>
%"class.std::__1::__compressed_pair.10" = type { %"struct.std::__1::__compressed_pair_elem.11" }
%"struct.std::__1::__compressed_pair_elem.11" = type { %"struct.ui::InProgressTouchEvdev"* }
%"class.std::__1::bitset" = type { %"class.std::__1::__bitset" }
%"class.std::__1::__bitset" = type { i64 }
%"class.std::__1::basic_string" = type { %"class.std::__1::__compressed_pair.15" }
%"class.std::__1::__compressed_pair.15" = type { %"struct.std::__1::__compressed_pair_elem.16" }
%"struct.std::__1::__compressed_pair_elem.16" = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" = type { %union.anon }
%union.anon = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" = type { i8*, i64, i64 }
%"class.std::__1::__vector_base_common" = type { i8 }

$_ZNSt3__16vectorIN4base9TimeTicksENS_9allocatorIS2_EEE8__appendEmRKS2_ = comdat any

$_ZNSt3__16vectorIiNS_9allocatorIiEEE8__appendEmRKi = comdat any

@_ZTVN2ui34HeuristicStylusPalmDetectionFilterE = hidden unnamed_addr constant { [6 x i8*] } { [6 x i8*] [i8* null, i8* null, i8* bitcast (void (%"class.ui::HeuristicStylusPalmDetectionFilter"*)* @_ZN2ui34HeuristicStylusPalmDetectionFilterD2Ev to i8*), i8* bitcast (void (%"class.ui::HeuristicStylusPalmDetectionFilter"*)* @_ZN2ui34HeuristicStylusPalmDetectionFilterD0Ev to i8*), i8* bitcast (void (%"class.ui::HeuristicStylusPalmDetectionFilter"*, %"class.std::__1::vector.8"*, i64, %"class.std::__1::bitset"*, %"class.std::__1::bitset"*)* @_ZN2ui34HeuristicStylusPalmDetectionFilter6FilterERKNSt3__16vectorINS_20InProgressTouchEvdevENS1_9allocatorIS3_EEEEN4base9TimeTicksEPNS1_6bitsetILm20EEESD_ to i8*), i8* bitcast (void (%"class.std::__1::basic_string"*, %"class.ui::HeuristicStylusPalmDetectionFilter"*)* @_ZNK2ui34HeuristicStylusPalmDetectionFilter20FilterNameForTestingEv to i8*)] }, align 8
@_ZN2ui34HeuristicStylusPalmDetectionFilter11kFilterNameE = hidden local_unnamed_addr constant [35 x i8] c"HeuristicStylusPalmDetectionFilter\00", align 16

@_ZN2ui34HeuristicStylusPalmDetectionFilterC1EPNS_30SharedPalmDetectionFilterStateEiN4base9TimeDeltaES4_ = hidden unnamed_addr alias void (%"class.ui::HeuristicStylusPalmDetectionFilter"*, %"struct.ui::SharedPalmDetectionFilterState"*, i32, i64, i64), void (%"class.ui::HeuristicStylusPalmDetectionFilter"*, %"struct.ui::SharedPalmDetectionFilterState"*, i32, i64, i64)* @_ZN2ui34HeuristicStylusPalmDetectionFilterC2EPNS_30SharedPalmDetectionFilterStateEiN4base9TimeDeltaES4_
@_ZN2ui34HeuristicStylusPalmDetectionFilterD1Ev = hidden unnamed_addr alias void (%"class.ui::HeuristicStylusPalmDetectionFilter"*), void (%"class.ui::HeuristicStylusPalmDetectionFilter"*)* @_ZN2ui34HeuristicStylusPalmDetectionFilterD2Ev

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2ui34HeuristicStylusPalmDetectionFilter6FilterERKNSt3__16vectorINS_20InProgressTouchEvdevENS1_9allocatorIS3_EEEEN4base9TimeTicksEPNS1_6bitsetILm20EEESD_(%"class.ui::HeuristicStylusPalmDetectionFilter"* nocapture readonly, %"class.std::__1::vector.8"* nocapture readonly dereferenceable(24), i64, %"class.std::__1::bitset"* nocapture, %"class.std::__1::bitset"* nocapture) unnamed_addr #0 align 2 {
  %6 = getelementptr inbounds %"class.std::__1::bitset", %"class.std::__1::bitset"* %3, i64 0, i32 0, i32 0
  %7 = load i64, i64* %6, align 8
  %8 = and i64 %7, -1048576
  store i64 %8, i64* %6, align 8
  %9 = getelementptr inbounds %"class.std::__1::bitset", %"class.std::__1::bitset"* %4, i64 0, i32 0, i32 0
  %10 = load i64, i64* %9, align 8
  %11 = and i64 %10, -1048576
  store i64 %11, i64* %9, align 8
  %12 = getelementptr inbounds %"class.ui::HeuristicStylusPalmDetectionFilter", %"class.ui::HeuristicStylusPalmDetectionFilter"* %0, i64 0, i32 0, i32 1
  %13 = load %"struct.ui::SharedPalmDetectionFilterState"*, %"struct.ui::SharedPalmDetectionFilterState"** %12, align 8
  %14 = getelementptr inbounds %"struct.ui::SharedPalmDetectionFilterState", %"struct.ui::SharedPalmDetectionFilterState"* %13, i64 0, i32 0, i32 0, i32 0
  %15 = load i64, i64* %14, align 8
  %16 = getelementptr inbounds %"class.std::__1::vector.8", %"class.std::__1::vector.8"* %1, i64 0, i32 0, i32 0
  %17 = getelementptr inbounds %"class.ui::HeuristicStylusPalmDetectionFilter", %"class.ui::HeuristicStylusPalmDetectionFilter"* %0, i64 0, i32 5, i32 0, i32 0
  %18 = getelementptr inbounds %"class.ui::HeuristicStylusPalmDetectionFilter", %"class.ui::HeuristicStylusPalmDetectionFilter"* %0, i64 0, i32 4, i32 0, i32 0
  %19 = getelementptr inbounds %"class.ui::HeuristicStylusPalmDetectionFilter", %"class.ui::HeuristicStylusPalmDetectionFilter"* %0, i64 0, i32 3, i32 0
  %20 = getelementptr inbounds %"class.ui::HeuristicStylusPalmDetectionFilter", %"class.ui::HeuristicStylusPalmDetectionFilter"* %0, i64 0, i32 2, i32 0
  %21 = getelementptr inbounds %"class.ui::HeuristicStylusPalmDetectionFilter", %"class.ui::HeuristicStylusPalmDetectionFilter"* %0, i64 0, i32 1
  br label %22

22:                                               ; preds = %77, %5
  %23 = phi i64 [ 0, %5 ], [ %79, %77 ]
  %24 = phi i32 [ 0, %5 ], [ %78, %77 ]
  %25 = load %"struct.ui::InProgressTouchEvdev"*, %"struct.ui::InProgressTouchEvdev"** %16, align 8
  %26 = getelementptr inbounds %"struct.ui::InProgressTouchEvdev", %"struct.ui::InProgressTouchEvdev"* %25, i64 %23, i32 21
  %27 = load i32, i32* %26, align 4
  %28 = icmp eq i32 %27, 320
  br i1 %28, label %81, label %29

29:                                               ; preds = %22
  %30 = getelementptr inbounds %"struct.ui::InProgressTouchEvdev", %"struct.ui::InProgressTouchEvdev"* %25, i64 %23, i32 11
  %31 = load i8, i8* %30, align 4, !range !2
  %32 = icmp eq i8 %31, 0
  %33 = load i32*, i32** %17, align 8
  %34 = getelementptr inbounds i32, i32* %33, i64 %23
  br i1 %32, label %35, label %36

35:                                               ; preds = %29
  store i32 0, i32* %34, align 4
  br label %77

36:                                               ; preds = %29
  %37 = load i32, i32* %34, align 4
  %38 = icmp eq i32 %37, 0
  br i1 %38, label %39, label %47

39:                                               ; preds = %36
  %40 = load %"class.base::TimeTicks"*, %"class.base::TimeTicks"** %18, align 8
  %41 = getelementptr inbounds %"class.base::TimeTicks", %"class.base::TimeTicks"* %40, i64 %23, i32 0, i32 0
  store i64 %2, i64* %41, align 8
  %42 = load %"struct.ui::SharedPalmDetectionFilterState"*, %"struct.ui::SharedPalmDetectionFilterState"** %12, align 8
  %43 = getelementptr inbounds %"struct.ui::SharedPalmDetectionFilterState", %"struct.ui::SharedPalmDetectionFilterState"* %42, i64 0, i32 1, i32 0, i32 0
  store i64 %2, i64* %43, align 8
  %44 = load i32*, i32** %17, align 8
  %45 = getelementptr inbounds i32, i32* %44, i64 %23
  %46 = load i32, i32* %45, align 4
  br label %47

47:                                               ; preds = %39, %36
  %48 = phi i32 [ %46, %39 ], [ %37, %36 ]
  %49 = phi i32* [ %44, %39 ], [ %33, %36 ]
  %50 = getelementptr inbounds i32, i32* %49, i64 %23
  %51 = add nsw i32 %48, 1
  store i32 %51, i32* %50, align 4
  %52 = load %"class.base::TimeTicks"*, %"class.base::TimeTicks"** %18, align 8
  %53 = getelementptr inbounds %"class.base::TimeTicks", %"class.base::TimeTicks"* %52, i64 %23, i32 0, i32 0
  %54 = load i64, i64* %53, align 8
  %55 = sub nsw i64 %54, %15
  %56 = load i64, i64* %19, align 8
  %57 = icmp slt i64 %55, %56
  br i1 %57, label %58, label %62

58:                                               ; preds = %47
  %59 = shl i64 1, %23
  %60 = load i64, i64* %9, align 8
  %61 = or i64 %60, %59
  store i64 %61, i64* %9, align 8
  br label %77

62:                                               ; preds = %47
  %63 = load i64, i64* %20, align 8
  %64 = icmp slt i64 %55, %63
  br i1 %64, label %65, label %75

65:                                               ; preds = %62
  %66 = load i32*, i32** %17, align 8
  %67 = getelementptr inbounds i32, i32* %66, i64 %23
  %68 = load i32, i32* %67, align 4
  %69 = load i32, i32* %21, align 8
  %70 = icmp sgt i32 %68, %69
  br i1 %70, label %75, label %71

71:                                               ; preds = %65
  %72 = shl i64 1, %23
  %73 = load i64, i64* %6, align 8
  %74 = or i64 %73, %72
  store i64 %74, i64* %6, align 8
  br label %77

75:                                               ; preds = %65, %62
  %76 = add i32 %24, 1
  br label %77

77:                                               ; preds = %35, %71, %75, %58
  %78 = phi i32 [ %76, %75 ], [ %24, %71 ], [ %24, %58 ], [ %24, %35 ]
  %79 = add nuw nsw i64 %23, 1
  %80 = icmp eq i64 %79, 20
  br i1 %80, label %84, label %22

81:                                               ; preds = %22
  %82 = load %"struct.ui::SharedPalmDetectionFilterState"*, %"struct.ui::SharedPalmDetectionFilterState"** %12, align 8
  %83 = getelementptr inbounds %"struct.ui::SharedPalmDetectionFilterState", %"struct.ui::SharedPalmDetectionFilterState"* %82, i64 0, i32 0, i32 0, i32 0
  store i64 %2, i64* %83, align 8
  br label %87

84:                                               ; preds = %77
  %85 = load %"struct.ui::SharedPalmDetectionFilterState"*, %"struct.ui::SharedPalmDetectionFilterState"** %12, align 8
  %86 = getelementptr inbounds %"struct.ui::SharedPalmDetectionFilterState", %"struct.ui::SharedPalmDetectionFilterState"* %85, i64 0, i32 2
  store i32 %78, i32* %86, align 8
  br label %87

87:                                               ; preds = %81, %84
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2ui34HeuristicStylusPalmDetectionFilterC2EPNS_30SharedPalmDetectionFilterStateEiN4base9TimeDeltaES4_(%"class.ui::HeuristicStylusPalmDetectionFilter"*, %"struct.ui::SharedPalmDetectionFilterState"*, i32, i64, i64) unnamed_addr #0 align 2 {
  %6 = alloca %"class.base::TimeTicks", align 8
  %7 = alloca i32, align 4
  %8 = getelementptr inbounds %"class.ui::HeuristicStylusPalmDetectionFilter", %"class.ui::HeuristicStylusPalmDetectionFilter"* %0, i64 0, i32 0
  tail call void @_ZN2ui19PalmDetectionFilterC2EPNS_30SharedPalmDetectionFilterStateE(%"class.ui::PalmDetectionFilter"* %8, %"struct.ui::SharedPalmDetectionFilterState"* %1) #9
  %9 = getelementptr inbounds %"class.ui::HeuristicStylusPalmDetectionFilter", %"class.ui::HeuristicStylusPalmDetectionFilter"* %0, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [6 x i8*] }, { [6 x i8*] }* @_ZTVN2ui34HeuristicStylusPalmDetectionFilterE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %9, align 8
  %10 = getelementptr inbounds %"class.ui::HeuristicStylusPalmDetectionFilter", %"class.ui::HeuristicStylusPalmDetectionFilter"* %0, i64 0, i32 1
  store i32 %2, i32* %10, align 8
  %11 = getelementptr inbounds %"class.ui::HeuristicStylusPalmDetectionFilter", %"class.ui::HeuristicStylusPalmDetectionFilter"* %0, i64 0, i32 2, i32 0
  store i64 %3, i64* %11, align 8
  %12 = getelementptr inbounds %"class.ui::HeuristicStylusPalmDetectionFilter", %"class.ui::HeuristicStylusPalmDetectionFilter"* %0, i64 0, i32 3, i32 0
  store i64 %4, i64* %12, align 8
  %13 = getelementptr inbounds %"class.ui::HeuristicStylusPalmDetectionFilter", %"class.ui::HeuristicStylusPalmDetectionFilter"* %0, i64 0, i32 4
  %14 = getelementptr inbounds %"class.ui::HeuristicStylusPalmDetectionFilter", %"class.ui::HeuristicStylusPalmDetectionFilter"* %0, i64 0, i32 5
  %15 = bitcast %"class.base::TimeTicks"* %6 to i8*
  %16 = bitcast %"class.std::__1::vector"* %13 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %16, i8 0, i64 48, i1 false)
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %15) #9
  %17 = tail call i64 @_ZN4base9TimeTicks9UnixEpochEv() #9
  %18 = getelementptr inbounds %"class.base::TimeTicks", %"class.base::TimeTicks"* %6, i64 0, i32 0, i32 0
  store i64 %17, i64* %18, align 8
  %19 = getelementptr inbounds %"class.ui::HeuristicStylusPalmDetectionFilter", %"class.ui::HeuristicStylusPalmDetectionFilter"* %0, i64 0, i32 4, i32 0, i32 1
  %20 = bitcast %"class.base::TimeTicks"** %19 to i64*
  %21 = load i64, i64* %20, align 8
  %22 = bitcast %"class.std::__1::vector"* %13 to i64*
  %23 = load i64, i64* %22, align 8
  %24 = sub i64 %21, %23
  %25 = ashr exact i64 %24, 3
  %26 = icmp ult i64 %25, 20
  %27 = inttoptr i64 %23 to %"class.base::TimeTicks"*
  br i1 %26, label %28, label %30

28:                                               ; preds = %5
  %29 = sub nuw nsw i64 20, %25
  call void @_ZNSt3__16vectorIN4base9TimeTicksENS_9allocatorIS2_EEE8__appendEmRKS2_(%"class.std::__1::vector"* %13, i64 %29, %"class.base::TimeTicks"* nonnull dereferenceable(8) %6) #9
  br label %34

30:                                               ; preds = %5
  %31 = icmp eq i64 %24, 160
  br i1 %31, label %34, label %32

32:                                               ; preds = %30
  %33 = getelementptr inbounds %"class.base::TimeTicks", %"class.base::TimeTicks"* %27, i64 20
  store %"class.base::TimeTicks"* %33, %"class.base::TimeTicks"** %19, align 8
  br label %34

34:                                               ; preds = %30, %28, %32
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %15) #9
  %35 = bitcast i32* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %35) #9
  store i32 0, i32* %7, align 4
  %36 = getelementptr inbounds %"class.ui::HeuristicStylusPalmDetectionFilter", %"class.ui::HeuristicStylusPalmDetectionFilter"* %0, i64 0, i32 5, i32 0, i32 1
  %37 = bitcast i32** %36 to i64*
  %38 = load i64, i64* %37, align 8
  %39 = bitcast %"class.std::__1::vector.1"* %14 to i64*
  %40 = load i64, i64* %39, align 8
  %41 = sub i64 %38, %40
  %42 = ashr exact i64 %41, 2
  %43 = icmp ult i64 %42, 20
  %44 = inttoptr i64 %40 to i32*
  br i1 %43, label %45, label %47

45:                                               ; preds = %34
  %46 = sub nuw nsw i64 20, %42
  call void @_ZNSt3__16vectorIiNS_9allocatorIiEEE8__appendEmRKi(%"class.std::__1::vector.1"* %14, i64 %46, i32* nonnull dereferenceable(4) %7) #9
  br label %51

47:                                               ; preds = %34
  %48 = icmp eq i64 %41, 80
  br i1 %48, label %51, label %49

49:                                               ; preds = %47
  %50 = getelementptr inbounds i32, i32* %44, i64 20
  store i32* %50, i32** %36, align 8
  br label %51

51:                                               ; preds = %47, %45, %49
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %35) #9
  ret void
}

declare void @_ZN2ui19PalmDetectionFilterC2EPNS_30SharedPalmDetectionFilterStateE(%"class.ui::PalmDetectionFilter"*, %"struct.ui::SharedPalmDetectionFilterState"*) unnamed_addr #2

declare i64 @_ZN4base9TimeTicks9UnixEpochEv() local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2ui34HeuristicStylusPalmDetectionFilterD2Ev(%"class.ui::HeuristicStylusPalmDetectionFilter"*) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.ui::HeuristicStylusPalmDetectionFilter", %"class.ui::HeuristicStylusPalmDetectionFilter"* %0, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [6 x i8*] }, { [6 x i8*] }* @_ZTVN2ui34HeuristicStylusPalmDetectionFilterE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8
  %3 = getelementptr inbounds %"class.ui::HeuristicStylusPalmDetectionFilter", %"class.ui::HeuristicStylusPalmDetectionFilter"* %0, i64 0, i32 5, i32 0, i32 0
  %4 = load i32*, i32** %3, align 8
  %5 = icmp eq i32* %4, null
  br i1 %5, label %11, label %6

6:                                                ; preds = %1
  %7 = ptrtoint i32* %4 to i64
  %8 = getelementptr inbounds %"class.ui::HeuristicStylusPalmDetectionFilter", %"class.ui::HeuristicStylusPalmDetectionFilter"* %0, i64 0, i32 5, i32 0, i32 1
  %9 = bitcast i32** %8 to i64*
  store i64 %7, i64* %9, align 8
  %10 = bitcast i32* %4 to i8*
  tail call void @_ZdlPv(i8* %10) #10
  br label %11

11:                                               ; preds = %1, %6
  %12 = getelementptr inbounds %"class.ui::HeuristicStylusPalmDetectionFilter", %"class.ui::HeuristicStylusPalmDetectionFilter"* %0, i64 0, i32 4, i32 0, i32 0
  %13 = load %"class.base::TimeTicks"*, %"class.base::TimeTicks"** %12, align 8
  %14 = icmp eq %"class.base::TimeTicks"* %13, null
  br i1 %14, label %20, label %15

15:                                               ; preds = %11
  %16 = ptrtoint %"class.base::TimeTicks"* %13 to i64
  %17 = getelementptr inbounds %"class.ui::HeuristicStylusPalmDetectionFilter", %"class.ui::HeuristicStylusPalmDetectionFilter"* %0, i64 0, i32 4, i32 0, i32 1
  %18 = bitcast %"class.base::TimeTicks"** %17 to i64*
  store i64 %16, i64* %18, align 8
  %19 = bitcast %"class.base::TimeTicks"* %13 to i8*
  tail call void @_ZdlPv(i8* %19) #10
  br label %20

20:                                               ; preds = %11, %15
  %21 = getelementptr inbounds %"class.ui::HeuristicStylusPalmDetectionFilter", %"class.ui::HeuristicStylusPalmDetectionFilter"* %0, i64 0, i32 0
  tail call void @_ZN2ui19PalmDetectionFilterD2Ev(%"class.ui::PalmDetectionFilter"* %21) #9
  ret void
}

; Function Attrs: nounwind
declare void @_ZN2ui19PalmDetectionFilterD2Ev(%"class.ui::PalmDetectionFilter"*) unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2ui34HeuristicStylusPalmDetectionFilterD0Ev(%"class.ui::HeuristicStylusPalmDetectionFilter"*) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.ui::HeuristicStylusPalmDetectionFilter", %"class.ui::HeuristicStylusPalmDetectionFilter"* %0, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [6 x i8*] }, { [6 x i8*] }* @_ZTVN2ui34HeuristicStylusPalmDetectionFilterE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8
  %3 = getelementptr inbounds %"class.ui::HeuristicStylusPalmDetectionFilter", %"class.ui::HeuristicStylusPalmDetectionFilter"* %0, i64 0, i32 5, i32 0, i32 0
  %4 = load i32*, i32** %3, align 8
  %5 = icmp eq i32* %4, null
  br i1 %5, label %11, label %6

6:                                                ; preds = %1
  %7 = ptrtoint i32* %4 to i64
  %8 = getelementptr inbounds %"class.ui::HeuristicStylusPalmDetectionFilter", %"class.ui::HeuristicStylusPalmDetectionFilter"* %0, i64 0, i32 5, i32 0, i32 1
  %9 = bitcast i32** %8 to i64*
  store i64 %7, i64* %9, align 8
  %10 = bitcast i32* %4 to i8*
  tail call void @_ZdlPv(i8* %10) #10
  br label %11

11:                                               ; preds = %6, %1
  %12 = getelementptr inbounds %"class.ui::HeuristicStylusPalmDetectionFilter", %"class.ui::HeuristicStylusPalmDetectionFilter"* %0, i64 0, i32 4, i32 0, i32 0
  %13 = load %"class.base::TimeTicks"*, %"class.base::TimeTicks"** %12, align 8
  %14 = icmp eq %"class.base::TimeTicks"* %13, null
  br i1 %14, label %20, label %15

15:                                               ; preds = %11
  %16 = ptrtoint %"class.base::TimeTicks"* %13 to i64
  %17 = getelementptr inbounds %"class.ui::HeuristicStylusPalmDetectionFilter", %"class.ui::HeuristicStylusPalmDetectionFilter"* %0, i64 0, i32 4, i32 0, i32 1
  %18 = bitcast %"class.base::TimeTicks"** %17 to i64*
  store i64 %16, i64* %18, align 8
  %19 = bitcast %"class.base::TimeTicks"* %13 to i8*
  tail call void @_ZdlPv(i8* %19) #10
  br label %20

20:                                               ; preds = %11, %15
  %21 = getelementptr inbounds %"class.ui::HeuristicStylusPalmDetectionFilter", %"class.ui::HeuristicStylusPalmDetectionFilter"* %0, i64 0, i32 0
  tail call void @_ZN2ui19PalmDetectionFilterD2Ev(%"class.ui::PalmDetectionFilter"* %21) #9
  %22 = bitcast %"class.ui::HeuristicStylusPalmDetectionFilter"* %0 to i8*
  tail call void @_ZdlPv(i8* %22) #10
  ret void
}

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #4

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZNK2ui34HeuristicStylusPalmDetectionFilter20FilterNameForTestingEv(%"class.std::__1::basic_string"* noalias sret, %"class.ui::HeuristicStylusPalmDetectionFilter"* nocapture readnone) unnamed_addr #0 align 2 {
  %3 = tail call i8* @_Znwm(i64 48) #10
  %4 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  store i8* %3, i8** %4, align 8
  %5 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %6 = bitcast i64* %5 to <2 x i64>*
  store <2 x i64> <i64 34, i64 -9223372036854775760>, <2 x i64>* %6, align 8
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 1 %3, i8* align 16 getelementptr inbounds ([35 x i8], [35 x i8]* @_ZN2ui34HeuristicStylusPalmDetectionFilter11kFilterNameE, i64 0, i64 0), i64 34, i1 false) #9
  %7 = getelementptr inbounds i8, i8* %3, i64 34
  store i8 0, i8* %7, align 1
  ret void
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden i64 @_ZNK2ui34HeuristicStylusPalmDetectionFilter8HoldTimeEv(%"class.ui::HeuristicStylusPalmDetectionFilter"* nocapture readonly) local_unnamed_addr #5 align 2 {
  %2 = getelementptr inbounds %"class.ui::HeuristicStylusPalmDetectionFilter", %"class.ui::HeuristicStylusPalmDetectionFilter"* %0, i64 0, i32 2, i32 0
  %3 = load i64, i64* %2, align 8
  ret i64 %3
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden i64 @_ZNK2ui34HeuristicStylusPalmDetectionFilter10CancelTimeEv(%"class.ui::HeuristicStylusPalmDetectionFilter"* nocapture readonly) local_unnamed_addr #5 align 2 {
  %2 = getelementptr inbounds %"class.ui::HeuristicStylusPalmDetectionFilter", %"class.ui::HeuristicStylusPalmDetectionFilter"* %0, i64 0, i32 3, i32 0
  %3 = load i64, i64* %2, align 8
  ret i64 %3
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

; Function Attrs: noreturn nounwind
declare void @abort() local_unnamed_addr #6

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__16vectorIN4base9TimeTicksENS_9allocatorIS2_EEE8__appendEmRKS2_(%"class.std::__1::vector"*, i64, %"class.base::TimeTicks"* dereferenceable(8)) local_unnamed_addr #0 comdat align 2 {
  %4 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 0, i32 2, i32 0, i32 0
  %5 = bitcast %"class.base::TimeTicks"** %4 to i64*
  %6 = load i64, i64* %5, align 8
  %7 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 0, i32 1
  %8 = bitcast %"class.base::TimeTicks"** %7 to i64*
  %9 = load i64, i64* %8, align 8
  %10 = sub i64 %6, %9
  %11 = ashr exact i64 %10, 3
  %12 = icmp ult i64 %11, %1
  br i1 %12, label %132, label %13

13:                                               ; preds = %3
  %14 = inttoptr i64 %9 to %"class.base::TimeTicks"*
  %15 = inttoptr i64 %9 to i8*
  %16 = getelementptr inbounds %"class.base::TimeTicks", %"class.base::TimeTicks"* %14, i64 %1
  %17 = icmp eq i64 %1, 0
  br i1 %17, label %130, label %18

18:                                               ; preds = %13
  %19 = getelementptr inbounds %"class.base::TimeTicks", %"class.base::TimeTicks"* %2, i64 0, i32 0, i32 0
  %20 = shl nsw i64 %1, 3
  %21 = add i64 %20, -8
  %22 = lshr exact i64 %21, 3
  %23 = add nuw nsw i64 %22, 1
  %24 = icmp ult i64 %23, 4
  br i1 %24, label %25, label %47

25:                                               ; preds = %106, %47, %18
  %26 = phi %"class.base::TimeTicks"* [ %14, %47 ], [ %14, %18 ], [ %60, %106 ]
  %27 = ptrtoint %"class.base::TimeTicks"* %26 to i64
  %28 = add i64 %1, -1
  %29 = getelementptr %"class.base::TimeTicks", %"class.base::TimeTicks"* %14, i64 %28, i32 0, i32 0
  %30 = ptrtoint i64* %29 to i64
  %31 = sub i64 %30, %27
  %32 = lshr i64 %31, 3
  %33 = add nuw nsw i64 %32, 1
  %34 = and i64 %33, 7
  %35 = icmp eq i64 %34, 0
  br i1 %35, label %44, label %36

36:                                               ; preds = %25, %36
  %37 = phi %"class.base::TimeTicks"* [ %41, %36 ], [ %26, %25 ]
  %38 = phi i64 [ %42, %36 ], [ %34, %25 ]
  %39 = getelementptr inbounds %"class.base::TimeTicks", %"class.base::TimeTicks"* %37, i64 0, i32 0, i32 0
  %40 = load i64, i64* %19, align 8
  store i64 %40, i64* %39, align 8
  %41 = getelementptr inbounds %"class.base::TimeTicks", %"class.base::TimeTicks"* %37, i64 1
  %42 = add i64 %38, -1
  %43 = icmp eq i64 %42, 0
  br i1 %43, label %44, label %36, !llvm.loop !3

44:                                               ; preds = %36, %25
  %45 = phi %"class.base::TimeTicks"* [ %26, %25 ], [ %41, %36 ]
  %46 = icmp ult i64 %31, 56
  br i1 %46, label %108, label %110

47:                                               ; preds = %18
  %48 = shl nsw i64 %1, 3
  %49 = add i64 %48, -8
  %50 = lshr exact i64 %49, 3
  %51 = add nuw nsw i64 %50, 1
  %52 = getelementptr %"class.base::TimeTicks", %"class.base::TimeTicks"* %14, i64 %51
  %53 = bitcast %"class.base::TimeTicks"* %2 to i8*
  %54 = getelementptr i8, i8* %53, i64 1
  %55 = icmp ugt i8* %54, %15
  %56 = icmp ugt %"class.base::TimeTicks"* %52, %2
  %57 = and i1 %55, %56
  br i1 %57, label %25, label %58

58:                                               ; preds = %47
  %59 = and i64 %23, 4611686018427387900
  %60 = getelementptr %"class.base::TimeTicks", %"class.base::TimeTicks"* %14, i64 %59
  %61 = add nsw i64 %59, -4
  %62 = lshr exact i64 %61, 2
  %63 = add nuw nsw i64 %62, 1
  %64 = and i64 %63, 1
  %65 = icmp eq i64 %61, 0
  br i1 %65, label %93, label %66

66:                                               ; preds = %58
  %67 = sub nuw nsw i64 %63, %64
  %68 = load i64, i64* %19, align 8, !alias.scope !5
  %69 = insertelement <2 x i64> undef, i64 %68, i32 0
  %70 = shufflevector <2 x i64> %69, <2 x i64> undef, <2 x i32> zeroinitializer
  %71 = insertelement <2 x i64> undef, i64 %68, i32 0
  %72 = shufflevector <2 x i64> %71, <2 x i64> undef, <2 x i32> zeroinitializer
  %73 = load i64, i64* %19, align 8, !alias.scope !5
  %74 = insertelement <2 x i64> undef, i64 %73, i32 0
  %75 = shufflevector <2 x i64> %74, <2 x i64> undef, <2 x i32> zeroinitializer
  %76 = insertelement <2 x i64> undef, i64 %73, i32 0
  %77 = shufflevector <2 x i64> %76, <2 x i64> undef, <2 x i32> zeroinitializer
  br label %78

78:                                               ; preds = %78, %66
  %79 = phi i64 [ 0, %66 ], [ %90, %78 ]
  %80 = phi i64 [ %67, %66 ], [ %91, %78 ]
  %81 = getelementptr inbounds %"class.base::TimeTicks", %"class.base::TimeTicks"* %14, i64 %79, i32 0, i32 0
  %82 = bitcast i64* %81 to <2 x i64>*
  store <2 x i64> %70, <2 x i64>* %82, align 8, !alias.scope !8, !noalias !5
  %83 = getelementptr i64, i64* %81, i64 2
  %84 = bitcast i64* %83 to <2 x i64>*
  store <2 x i64> %72, <2 x i64>* %84, align 8, !alias.scope !8, !noalias !5
  %85 = or i64 %79, 4
  %86 = getelementptr inbounds %"class.base::TimeTicks", %"class.base::TimeTicks"* %14, i64 %85, i32 0, i32 0
  %87 = bitcast i64* %86 to <2 x i64>*
  store <2 x i64> %75, <2 x i64>* %87, align 8, !alias.scope !8, !noalias !5
  %88 = getelementptr i64, i64* %86, i64 2
  %89 = bitcast i64* %88 to <2 x i64>*
  store <2 x i64> %77, <2 x i64>* %89, align 8, !alias.scope !8, !noalias !5
  %90 = add i64 %79, 8
  %91 = add i64 %80, -2
  %92 = icmp eq i64 %91, 0
  br i1 %92, label %93, label %78, !llvm.loop !10

93:                                               ; preds = %78, %58
  %94 = phi i64 [ 0, %58 ], [ %90, %78 ]
  %95 = icmp eq i64 %64, 0
  br i1 %95, label %106, label %96

96:                                               ; preds = %93
  %97 = getelementptr inbounds %"class.base::TimeTicks", %"class.base::TimeTicks"* %14, i64 %94, i32 0, i32 0
  %98 = load i64, i64* %19, align 8, !alias.scope !5
  %99 = insertelement <2 x i64> undef, i64 %98, i32 0
  %100 = shufflevector <2 x i64> %99, <2 x i64> undef, <2 x i32> zeroinitializer
  %101 = insertelement <2 x i64> undef, i64 %98, i32 0
  %102 = shufflevector <2 x i64> %101, <2 x i64> undef, <2 x i32> zeroinitializer
  %103 = bitcast i64* %97 to <2 x i64>*
  store <2 x i64> %100, <2 x i64>* %103, align 8, !alias.scope !8, !noalias !5
  %104 = getelementptr i64, i64* %97, i64 2
  %105 = bitcast i64* %104 to <2 x i64>*
  store <2 x i64> %102, <2 x i64>* %105, align 8, !alias.scope !8, !noalias !5
  br label %106

106:                                              ; preds = %93, %96
  %107 = icmp eq i64 %23, %59
  br i1 %107, label %108, label %25

108:                                              ; preds = %44, %110, %106
  %109 = ptrtoint %"class.base::TimeTicks"* %16 to i64
  br label %130

110:                                              ; preds = %44, %110
  %111 = phi %"class.base::TimeTicks"* [ %128, %110 ], [ %45, %44 ]
  %112 = getelementptr inbounds %"class.base::TimeTicks", %"class.base::TimeTicks"* %111, i64 0, i32 0, i32 0
  %113 = load i64, i64* %19, align 8
  store i64 %113, i64* %112, align 8
  %114 = getelementptr inbounds %"class.base::TimeTicks", %"class.base::TimeTicks"* %111, i64 1, i32 0, i32 0
  %115 = load i64, i64* %19, align 8
  store i64 %115, i64* %114, align 8
  %116 = getelementptr inbounds %"class.base::TimeTicks", %"class.base::TimeTicks"* %111, i64 2, i32 0, i32 0
  %117 = load i64, i64* %19, align 8
  store i64 %117, i64* %116, align 8
  %118 = getelementptr inbounds %"class.base::TimeTicks", %"class.base::TimeTicks"* %111, i64 3, i32 0, i32 0
  %119 = load i64, i64* %19, align 8
  store i64 %119, i64* %118, align 8
  %120 = getelementptr inbounds %"class.base::TimeTicks", %"class.base::TimeTicks"* %111, i64 4, i32 0, i32 0
  %121 = load i64, i64* %19, align 8
  store i64 %121, i64* %120, align 8
  %122 = getelementptr inbounds %"class.base::TimeTicks", %"class.base::TimeTicks"* %111, i64 5, i32 0, i32 0
  %123 = load i64, i64* %19, align 8
  store i64 %123, i64* %122, align 8
  %124 = getelementptr inbounds %"class.base::TimeTicks", %"class.base::TimeTicks"* %111, i64 6, i32 0, i32 0
  %125 = load i64, i64* %19, align 8
  store i64 %125, i64* %124, align 8
  %126 = getelementptr inbounds %"class.base::TimeTicks", %"class.base::TimeTicks"* %111, i64 7, i32 0, i32 0
  %127 = load i64, i64* %19, align 8
  store i64 %127, i64* %126, align 8
  %128 = getelementptr inbounds %"class.base::TimeTicks", %"class.base::TimeTicks"* %111, i64 8
  %129 = icmp eq %"class.base::TimeTicks"* %128, %16
  br i1 %129, label %108, label %110, !llvm.loop !12

130:                                              ; preds = %13, %108
  %131 = phi i64 [ %109, %108 ], [ %9, %13 ]
  store i64 %131, i64* %8, align 8
  br label %298

132:                                              ; preds = %3
  %133 = bitcast %"class.std::__1::vector"* %0 to i64*
  %134 = load i64, i64* %133, align 8
  %135 = sub i64 %9, %134
  %136 = ashr exact i64 %135, 3
  %137 = add i64 %136, %1
  %138 = icmp ugt i64 %137, 2305843009213693951
  br i1 %138, label %139, label %141

139:                                              ; preds = %132
  %140 = bitcast %"class.std::__1::vector"* %0 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %140) #11
  unreachable

141:                                              ; preds = %132
  %142 = sub i64 %6, %134
  %143 = ashr exact i64 %142, 3
  %144 = icmp ult i64 %143, 1152921504606846975
  br i1 %144, label %145, label %153

145:                                              ; preds = %141
  %146 = ashr exact i64 %142, 2
  %147 = icmp ult i64 %146, %137
  %148 = select i1 %147, i64 %137, i64 %146
  %149 = icmp eq i64 %148, 0
  br i1 %149, label %158, label %150

150:                                              ; preds = %145
  %151 = icmp ugt i64 %148, 2305843009213693951
  br i1 %151, label %152, label %153

152:                                              ; preds = %150
  tail call void @abort() #11
  unreachable

153:                                              ; preds = %141, %150
  %154 = phi i64 [ %148, %150 ], [ 2305843009213693951, %141 ]
  %155 = shl i64 %154, 3
  %156 = tail call i8* @_Znwm(i64 %155) #10
  %157 = bitcast i8* %156 to %"class.base::TimeTicks"*
  br label %158

158:                                              ; preds = %153, %145
  %159 = phi i64 [ %154, %153 ], [ 0, %145 ]
  %160 = phi %"class.base::TimeTicks"* [ %157, %153 ], [ null, %145 ]
  %161 = getelementptr inbounds %"class.base::TimeTicks", %"class.base::TimeTicks"* %160, i64 %136
  %162 = getelementptr inbounds %"class.base::TimeTicks", %"class.base::TimeTicks"* %160, i64 %159
  %163 = getelementptr inbounds %"class.base::TimeTicks", %"class.base::TimeTicks"* %161, i64 %1
  %164 = getelementptr inbounds %"class.base::TimeTicks", %"class.base::TimeTicks"* %2, i64 0, i32 0, i32 0
  %165 = shl nsw i64 %1, 3
  %166 = add i64 %165, -8
  %167 = lshr exact i64 %166, 3
  %168 = add nuw nsw i64 %167, 1
  %169 = icmp ult i64 %168, 4
  br i1 %169, label %233, label %170

170:                                              ; preds = %158
  %171 = bitcast %"class.base::TimeTicks"* %161 to i8*
  %172 = shl nsw i64 %1, 3
  %173 = add i64 %172, -8
  %174 = lshr exact i64 %173, 3
  %175 = add nsw i64 %136, %174
  %176 = add nsw i64 %175, 1
  %177 = getelementptr %"class.base::TimeTicks", %"class.base::TimeTicks"* %160, i64 %176
  %178 = bitcast %"class.base::TimeTicks"* %2 to i8*
  %179 = getelementptr i8, i8* %178, i64 1
  %180 = icmp ugt i8* %179, %171
  %181 = icmp ugt %"class.base::TimeTicks"* %177, %2
  %182 = and i1 %180, %181
  br i1 %182, label %233, label %183

183:                                              ; preds = %170
  %184 = and i64 %168, 4611686018427387900
  %185 = getelementptr %"class.base::TimeTicks", %"class.base::TimeTicks"* %161, i64 %184
  %186 = add nsw i64 %184, -4
  %187 = lshr exact i64 %186, 2
  %188 = add nuw nsw i64 %187, 1
  %189 = and i64 %188, 1
  %190 = icmp eq i64 %186, 0
  br i1 %190, label %218, label %191

191:                                              ; preds = %183
  %192 = sub nuw nsw i64 %188, %189
  %193 = load i64, i64* %164, align 8, !alias.scope !13
  %194 = insertelement <2 x i64> undef, i64 %193, i32 0
  %195 = shufflevector <2 x i64> %194, <2 x i64> undef, <2 x i32> zeroinitializer
  %196 = insertelement <2 x i64> undef, i64 %193, i32 0
  %197 = shufflevector <2 x i64> %196, <2 x i64> undef, <2 x i32> zeroinitializer
  %198 = load i64, i64* %164, align 8, !alias.scope !13
  %199 = insertelement <2 x i64> undef, i64 %198, i32 0
  %200 = shufflevector <2 x i64> %199, <2 x i64> undef, <2 x i32> zeroinitializer
  %201 = insertelement <2 x i64> undef, i64 %198, i32 0
  %202 = shufflevector <2 x i64> %201, <2 x i64> undef, <2 x i32> zeroinitializer
  br label %203

203:                                              ; preds = %203, %191
  %204 = phi i64 [ 0, %191 ], [ %215, %203 ]
  %205 = phi i64 [ %192, %191 ], [ %216, %203 ]
  %206 = getelementptr %"class.base::TimeTicks", %"class.base::TimeTicks"* %161, i64 %204
  %207 = bitcast %"class.base::TimeTicks"* %206 to <2 x i64>*
  store <2 x i64> %195, <2 x i64>* %207, align 8, !alias.scope !16, !noalias !13
  %208 = getelementptr %"class.base::TimeTicks", %"class.base::TimeTicks"* %206, i64 2
  %209 = bitcast %"class.base::TimeTicks"* %208 to <2 x i64>*
  store <2 x i64> %197, <2 x i64>* %209, align 8, !alias.scope !16, !noalias !13
  %210 = or i64 %204, 4
  %211 = getelementptr %"class.base::TimeTicks", %"class.base::TimeTicks"* %161, i64 %210
  %212 = bitcast %"class.base::TimeTicks"* %211 to <2 x i64>*
  store <2 x i64> %200, <2 x i64>* %212, align 8, !alias.scope !16, !noalias !13
  %213 = getelementptr %"class.base::TimeTicks", %"class.base::TimeTicks"* %211, i64 2
  %214 = bitcast %"class.base::TimeTicks"* %213 to <2 x i64>*
  store <2 x i64> %202, <2 x i64>* %214, align 8, !alias.scope !16, !noalias !13
  %215 = add i64 %204, 8
  %216 = add i64 %205, -2
  %217 = icmp eq i64 %216, 0
  br i1 %217, label %218, label %203, !llvm.loop !18

218:                                              ; preds = %203, %183
  %219 = phi i64 [ 0, %183 ], [ %215, %203 ]
  %220 = icmp eq i64 %189, 0
  br i1 %220, label %231, label %221

221:                                              ; preds = %218
  %222 = getelementptr %"class.base::TimeTicks", %"class.base::TimeTicks"* %161, i64 %219
  %223 = load i64, i64* %164, align 8, !alias.scope !13
  %224 = insertelement <2 x i64> undef, i64 %223, i32 0
  %225 = shufflevector <2 x i64> %224, <2 x i64> undef, <2 x i32> zeroinitializer
  %226 = insertelement <2 x i64> undef, i64 %223, i32 0
  %227 = shufflevector <2 x i64> %226, <2 x i64> undef, <2 x i32> zeroinitializer
  %228 = bitcast %"class.base::TimeTicks"* %222 to <2 x i64>*
  store <2 x i64> %225, <2 x i64>* %228, align 8, !alias.scope !16, !noalias !13
  %229 = getelementptr %"class.base::TimeTicks", %"class.base::TimeTicks"* %222, i64 2
  %230 = bitcast %"class.base::TimeTicks"* %229 to <2 x i64>*
  store <2 x i64> %227, <2 x i64>* %230, align 8, !alias.scope !16, !noalias !13
  br label %231

231:                                              ; preds = %218, %221
  %232 = icmp eq i64 %168, %184
  br i1 %232, label %276, label %233

233:                                              ; preds = %231, %170, %158
  %234 = phi %"class.base::TimeTicks"* [ %161, %170 ], [ %161, %158 ], [ %185, %231 ]
  %235 = ptrtoint %"class.base::TimeTicks"* %234 to i64
  %236 = add i64 %136, %1
  %237 = add i64 %236, -1
  %238 = getelementptr %"class.base::TimeTicks", %"class.base::TimeTicks"* %160, i64 %237, i32 0, i32 0
  %239 = ptrtoint i64* %238 to i64
  %240 = sub i64 %239, %235
  %241 = lshr i64 %240, 3
  %242 = add nuw nsw i64 %241, 1
  %243 = and i64 %242, 7
  %244 = icmp eq i64 %243, 0
  br i1 %244, label %253, label %245

245:                                              ; preds = %233, %245
  %246 = phi %"class.base::TimeTicks"* [ %250, %245 ], [ %234, %233 ]
  %247 = phi i64 [ %251, %245 ], [ %243, %233 ]
  %248 = getelementptr inbounds %"class.base::TimeTicks", %"class.base::TimeTicks"* %246, i64 0, i32 0, i32 0
  %249 = load i64, i64* %164, align 8
  store i64 %249, i64* %248, align 8
  %250 = getelementptr inbounds %"class.base::TimeTicks", %"class.base::TimeTicks"* %246, i64 1
  %251 = add i64 %247, -1
  %252 = icmp eq i64 %251, 0
  br i1 %252, label %253, label %245, !llvm.loop !19

253:                                              ; preds = %245, %233
  %254 = phi %"class.base::TimeTicks"* [ %234, %233 ], [ %250, %245 ]
  %255 = icmp ult i64 %240, 56
  br i1 %255, label %276, label %256

256:                                              ; preds = %253, %256
  %257 = phi %"class.base::TimeTicks"* [ %274, %256 ], [ %254, %253 ]
  %258 = getelementptr inbounds %"class.base::TimeTicks", %"class.base::TimeTicks"* %257, i64 0, i32 0, i32 0
  %259 = load i64, i64* %164, align 8
  store i64 %259, i64* %258, align 8
  %260 = getelementptr inbounds %"class.base::TimeTicks", %"class.base::TimeTicks"* %257, i64 1, i32 0, i32 0
  %261 = load i64, i64* %164, align 8
  store i64 %261, i64* %260, align 8
  %262 = getelementptr inbounds %"class.base::TimeTicks", %"class.base::TimeTicks"* %257, i64 2, i32 0, i32 0
  %263 = load i64, i64* %164, align 8
  store i64 %263, i64* %262, align 8
  %264 = getelementptr inbounds %"class.base::TimeTicks", %"class.base::TimeTicks"* %257, i64 3, i32 0, i32 0
  %265 = load i64, i64* %164, align 8
  store i64 %265, i64* %264, align 8
  %266 = getelementptr inbounds %"class.base::TimeTicks", %"class.base::TimeTicks"* %257, i64 4, i32 0, i32 0
  %267 = load i64, i64* %164, align 8
  store i64 %267, i64* %266, align 8
  %268 = getelementptr inbounds %"class.base::TimeTicks", %"class.base::TimeTicks"* %257, i64 5, i32 0, i32 0
  %269 = load i64, i64* %164, align 8
  store i64 %269, i64* %268, align 8
  %270 = getelementptr inbounds %"class.base::TimeTicks", %"class.base::TimeTicks"* %257, i64 6, i32 0, i32 0
  %271 = load i64, i64* %164, align 8
  store i64 %271, i64* %270, align 8
  %272 = getelementptr inbounds %"class.base::TimeTicks", %"class.base::TimeTicks"* %257, i64 7, i32 0, i32 0
  %273 = load i64, i64* %164, align 8
  store i64 %273, i64* %272, align 8
  %274 = getelementptr inbounds %"class.base::TimeTicks", %"class.base::TimeTicks"* %257, i64 8
  %275 = icmp eq %"class.base::TimeTicks"* %163, %274
  br i1 %275, label %276, label %256, !llvm.loop !20

276:                                              ; preds = %253, %256, %231
  %277 = ptrtoint %"class.base::TimeTicks"* %162 to i64
  %278 = ptrtoint %"class.base::TimeTicks"* %163 to i64
  %279 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 0, i32 0
  %280 = load %"class.base::TimeTicks"*, %"class.base::TimeTicks"** %279, align 8
  %281 = load i64, i64* %8, align 8
  %282 = ptrtoint %"class.base::TimeTicks"* %280 to i64
  %283 = sub i64 %281, %282
  %284 = ashr exact i64 %283, 3
  %285 = sub nsw i64 0, %284
  %286 = getelementptr inbounds %"class.base::TimeTicks", %"class.base::TimeTicks"* %161, i64 %285
  %287 = ptrtoint %"class.base::TimeTicks"* %286 to i64
  %288 = icmp sgt i64 %283, 0
  br i1 %288, label %289, label %293

289:                                              ; preds = %276
  %290 = bitcast %"class.base::TimeTicks"* %286 to i8*
  %291 = bitcast %"class.base::TimeTicks"* %280 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %290, i8* align 8 %291, i64 %283, i1 false) #9
  %292 = load %"class.base::TimeTicks"*, %"class.base::TimeTicks"** %279, align 8
  br label %293

293:                                              ; preds = %276, %289
  %294 = phi %"class.base::TimeTicks"* [ %280, %276 ], [ %292, %289 ]
  store i64 %287, i64* %133, align 8
  store i64 %278, i64* %8, align 8
  store i64 %277, i64* %5, align 8
  %295 = icmp eq %"class.base::TimeTicks"* %294, null
  br i1 %295, label %298, label %296

296:                                              ; preds = %293
  %297 = bitcast %"class.base::TimeTicks"* %294 to i8*
  tail call void @_ZdlPv(i8* %297) #10
  br label %298

298:                                              ; preds = %296, %293, %130
  ret void
}

; Function Attrs: noreturn
declare void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"*) local_unnamed_addr #7

; Function Attrs: nobuiltin nofree
declare noalias nonnull i8* @_Znwm(i64) local_unnamed_addr #8

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__16vectorIiNS_9allocatorIiEEE8__appendEmRKi(%"class.std::__1::vector.1"*, i64, i32* dereferenceable(4)) local_unnamed_addr #0 comdat align 2 {
  %4 = bitcast i32* %2 to i8*
  %5 = bitcast i32* %2 to i8*
  %6 = getelementptr inbounds %"class.std::__1::vector.1", %"class.std::__1::vector.1"* %0, i64 0, i32 0, i32 2, i32 0, i32 0
  %7 = bitcast i32** %6 to i64*
  %8 = load i64, i64* %7, align 8
  %9 = getelementptr inbounds %"class.std::__1::vector.1", %"class.std::__1::vector.1"* %0, i64 0, i32 0, i32 1
  %10 = bitcast i32** %9 to i64*
  %11 = load i64, i64* %10, align 8
  %12 = sub i64 %8, %11
  %13 = ashr exact i64 %12, 2
  %14 = icmp ult i64 %13, %1
  br i1 %14, label %130, label %15

15:                                               ; preds = %3
  %16 = inttoptr i64 %11 to i32*
  %17 = inttoptr i64 %11 to i8*
  %18 = getelementptr inbounds i32, i32* %16, i64 %1
  %19 = icmp eq i64 %1, 0
  br i1 %19, label %128, label %20

20:                                               ; preds = %15
  %21 = shl nsw i64 %1, 2
  %22 = add i64 %21, -4
  %23 = lshr exact i64 %22, 2
  %24 = add nuw nsw i64 %23, 1
  %25 = icmp ult i64 %24, 8
  br i1 %25, label %26, label %47

26:                                               ; preds = %105, %47, %20
  %27 = phi i32* [ %16, %47 ], [ %16, %20 ], [ %59, %105 ]
  %28 = ptrtoint i32* %27 to i64
  %29 = add i64 %1, -1
  %30 = getelementptr i32, i32* %16, i64 %29
  %31 = ptrtoint i32* %30 to i64
  %32 = sub i64 %31, %28
  %33 = lshr i64 %32, 2
  %34 = add nuw nsw i64 %33, 1
  %35 = and i64 %34, 7
  %36 = icmp eq i64 %35, 0
  br i1 %36, label %44, label %37

37:                                               ; preds = %26, %37
  %38 = phi i32* [ %41, %37 ], [ %27, %26 ]
  %39 = phi i64 [ %42, %37 ], [ %35, %26 ]
  %40 = load i32, i32* %2, align 4
  store i32 %40, i32* %38, align 4
  %41 = getelementptr inbounds i32, i32* %38, i64 1
  %42 = add i64 %39, -1
  %43 = icmp eq i64 %42, 0
  br i1 %43, label %44, label %37, !llvm.loop !21

44:                                               ; preds = %37, %26
  %45 = phi i32* [ %27, %26 ], [ %41, %37 ]
  %46 = icmp ult i64 %32, 28
  br i1 %46, label %107, label %109

47:                                               ; preds = %20
  %48 = shl nsw i64 %1, 2
  %49 = add i64 %48, -4
  %50 = lshr exact i64 %49, 2
  %51 = add nuw nsw i64 %50, 1
  %52 = getelementptr i32, i32* %16, i64 %51
  %53 = getelementptr i8, i8* %5, i64 1
  %54 = icmp ugt i8* %53, %17
  %55 = icmp ugt i32* %52, %2
  %56 = and i1 %54, %55
  br i1 %56, label %26, label %57

57:                                               ; preds = %47
  %58 = and i64 %24, 9223372036854775800
  %59 = getelementptr i32, i32* %16, i64 %58
  %60 = add nsw i64 %58, -8
  %61 = lshr exact i64 %60, 3
  %62 = add nuw nsw i64 %61, 1
  %63 = and i64 %62, 1
  %64 = icmp eq i64 %60, 0
  br i1 %64, label %92, label %65

65:                                               ; preds = %57
  %66 = sub nuw nsw i64 %62, %63
  %67 = load i32, i32* %2, align 4, !alias.scope !22
  %68 = insertelement <4 x i32> undef, i32 %67, i32 0
  %69 = shufflevector <4 x i32> %68, <4 x i32> undef, <4 x i32> zeroinitializer
  %70 = insertelement <4 x i32> undef, i32 %67, i32 0
  %71 = shufflevector <4 x i32> %70, <4 x i32> undef, <4 x i32> zeroinitializer
  %72 = load i32, i32* %2, align 4, !alias.scope !22
  %73 = insertelement <4 x i32> undef, i32 %72, i32 0
  %74 = shufflevector <4 x i32> %73, <4 x i32> undef, <4 x i32> zeroinitializer
  %75 = insertelement <4 x i32> undef, i32 %72, i32 0
  %76 = shufflevector <4 x i32> %75, <4 x i32> undef, <4 x i32> zeroinitializer
  br label %77

77:                                               ; preds = %77, %65
  %78 = phi i64 [ 0, %65 ], [ %89, %77 ]
  %79 = phi i64 [ %66, %65 ], [ %90, %77 ]
  %80 = getelementptr i32, i32* %16, i64 %78
  %81 = bitcast i32* %80 to <4 x i32>*
  store <4 x i32> %69, <4 x i32>* %81, align 4, !alias.scope !25, !noalias !22
  %82 = getelementptr i32, i32* %80, i64 4
  %83 = bitcast i32* %82 to <4 x i32>*
  store <4 x i32> %71, <4 x i32>* %83, align 4, !alias.scope !25, !noalias !22
  %84 = or i64 %78, 8
  %85 = getelementptr i32, i32* %16, i64 %84
  %86 = bitcast i32* %85 to <4 x i32>*
  store <4 x i32> %74, <4 x i32>* %86, align 4, !alias.scope !25, !noalias !22
  %87 = getelementptr i32, i32* %85, i64 4
  %88 = bitcast i32* %87 to <4 x i32>*
  store <4 x i32> %76, <4 x i32>* %88, align 4, !alias.scope !25, !noalias !22
  %89 = add i64 %78, 16
  %90 = add i64 %79, -2
  %91 = icmp eq i64 %90, 0
  br i1 %91, label %92, label %77, !llvm.loop !27

92:                                               ; preds = %77, %57
  %93 = phi i64 [ 0, %57 ], [ %89, %77 ]
  %94 = icmp eq i64 %63, 0
  br i1 %94, label %105, label %95

95:                                               ; preds = %92
  %96 = getelementptr i32, i32* %16, i64 %93
  %97 = load i32, i32* %2, align 4, !alias.scope !22
  %98 = insertelement <4 x i32> undef, i32 %97, i32 0
  %99 = shufflevector <4 x i32> %98, <4 x i32> undef, <4 x i32> zeroinitializer
  %100 = insertelement <4 x i32> undef, i32 %97, i32 0
  %101 = shufflevector <4 x i32> %100, <4 x i32> undef, <4 x i32> zeroinitializer
  %102 = bitcast i32* %96 to <4 x i32>*
  store <4 x i32> %99, <4 x i32>* %102, align 4, !alias.scope !25, !noalias !22
  %103 = getelementptr i32, i32* %96, i64 4
  %104 = bitcast i32* %103 to <4 x i32>*
  store <4 x i32> %101, <4 x i32>* %104, align 4, !alias.scope !25, !noalias !22
  br label %105

105:                                              ; preds = %92, %95
  %106 = icmp eq i64 %24, %58
  br i1 %106, label %107, label %26

107:                                              ; preds = %44, %109, %105
  %108 = ptrtoint i32* %18 to i64
  br label %128

109:                                              ; preds = %44, %109
  %110 = phi i32* [ %126, %109 ], [ %45, %44 ]
  %111 = load i32, i32* %2, align 4
  store i32 %111, i32* %110, align 4
  %112 = getelementptr inbounds i32, i32* %110, i64 1
  %113 = load i32, i32* %2, align 4
  store i32 %113, i32* %112, align 4
  %114 = getelementptr inbounds i32, i32* %110, i64 2
  %115 = load i32, i32* %2, align 4
  store i32 %115, i32* %114, align 4
  %116 = getelementptr inbounds i32, i32* %110, i64 3
  %117 = load i32, i32* %2, align 4
  store i32 %117, i32* %116, align 4
  %118 = getelementptr inbounds i32, i32* %110, i64 4
  %119 = load i32, i32* %2, align 4
  store i32 %119, i32* %118, align 4
  %120 = getelementptr inbounds i32, i32* %110, i64 5
  %121 = load i32, i32* %2, align 4
  store i32 %121, i32* %120, align 4
  %122 = getelementptr inbounds i32, i32* %110, i64 6
  %123 = load i32, i32* %2, align 4
  store i32 %123, i32* %122, align 4
  %124 = getelementptr inbounds i32, i32* %110, i64 7
  %125 = load i32, i32* %2, align 4
  store i32 %125, i32* %124, align 4
  %126 = getelementptr inbounds i32, i32* %110, i64 8
  %127 = icmp eq i32* %126, %18
  br i1 %127, label %107, label %109, !llvm.loop !28

128:                                              ; preds = %15, %107
  %129 = phi i64 [ %108, %107 ], [ %11, %15 ]
  store i64 %129, i64* %10, align 8
  br label %292

130:                                              ; preds = %3
  %131 = bitcast %"class.std::__1::vector.1"* %0 to i64*
  %132 = load i64, i64* %131, align 8
  %133 = sub i64 %11, %132
  %134 = ashr exact i64 %133, 2
  %135 = add i64 %134, %1
  %136 = icmp ugt i64 %135, 4611686018427387903
  br i1 %136, label %137, label %139

137:                                              ; preds = %130
  %138 = bitcast %"class.std::__1::vector.1"* %0 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %138) #11
  unreachable

139:                                              ; preds = %130
  %140 = sub i64 %8, %132
  %141 = ashr exact i64 %140, 2
  %142 = icmp ult i64 %141, 2305843009213693951
  br i1 %142, label %143, label %151

143:                                              ; preds = %139
  %144 = ashr exact i64 %140, 1
  %145 = icmp ult i64 %144, %135
  %146 = select i1 %145, i64 %135, i64 %144
  %147 = icmp eq i64 %146, 0
  br i1 %147, label %156, label %148

148:                                              ; preds = %143
  %149 = icmp ugt i64 %146, 4611686018427387903
  br i1 %149, label %150, label %151

150:                                              ; preds = %148
  tail call void @abort() #11
  unreachable

151:                                              ; preds = %139, %148
  %152 = phi i64 [ %146, %148 ], [ 4611686018427387903, %139 ]
  %153 = shl i64 %152, 2
  %154 = tail call i8* @_Znwm(i64 %153) #10
  %155 = bitcast i8* %154 to i32*
  br label %156

156:                                              ; preds = %143, %151
  %157 = phi i64 [ %152, %151 ], [ 0, %143 ]
  %158 = phi i32* [ %155, %151 ], [ null, %143 ]
  %159 = getelementptr inbounds i32, i32* %158, i64 %134
  %160 = getelementptr inbounds i32, i32* %158, i64 %157
  %161 = getelementptr inbounds i32, i32* %159, i64 %1
  %162 = shl nsw i64 %1, 2
  %163 = add i64 %162, -4
  %164 = lshr exact i64 %163, 2
  %165 = add nuw nsw i64 %164, 1
  %166 = icmp ult i64 %165, 8
  br i1 %166, label %229, label %167

167:                                              ; preds = %156
  %168 = bitcast i32* %159 to i8*
  %169 = shl nsw i64 %1, 2
  %170 = add i64 %169, -4
  %171 = lshr exact i64 %170, 2
  %172 = add nsw i64 %134, %171
  %173 = add i64 %172, 1
  %174 = getelementptr i32, i32* %158, i64 %173
  %175 = getelementptr i8, i8* %4, i64 1
  %176 = icmp ugt i8* %175, %168
  %177 = icmp ugt i32* %174, %2
  %178 = and i1 %176, %177
  br i1 %178, label %229, label %179

179:                                              ; preds = %167
  %180 = and i64 %165, 9223372036854775800
  %181 = getelementptr i32, i32* %159, i64 %180
  %182 = add nsw i64 %180, -8
  %183 = lshr exact i64 %182, 3
  %184 = add nuw nsw i64 %183, 1
  %185 = and i64 %184, 1
  %186 = icmp eq i64 %182, 0
  br i1 %186, label %214, label %187

187:                                              ; preds = %179
  %188 = sub nuw nsw i64 %184, %185
  %189 = load i32, i32* %2, align 4, !alias.scope !29
  %190 = insertelement <4 x i32> undef, i32 %189, i32 0
  %191 = shufflevector <4 x i32> %190, <4 x i32> undef, <4 x i32> zeroinitializer
  %192 = insertelement <4 x i32> undef, i32 %189, i32 0
  %193 = shufflevector <4 x i32> %192, <4 x i32> undef, <4 x i32> zeroinitializer
  %194 = load i32, i32* %2, align 4, !alias.scope !29
  %195 = insertelement <4 x i32> undef, i32 %194, i32 0
  %196 = shufflevector <4 x i32> %195, <4 x i32> undef, <4 x i32> zeroinitializer
  %197 = insertelement <4 x i32> undef, i32 %194, i32 0
  %198 = shufflevector <4 x i32> %197, <4 x i32> undef, <4 x i32> zeroinitializer
  br label %199

199:                                              ; preds = %199, %187
  %200 = phi i64 [ 0, %187 ], [ %211, %199 ]
  %201 = phi i64 [ %188, %187 ], [ %212, %199 ]
  %202 = getelementptr i32, i32* %159, i64 %200
  %203 = bitcast i32* %202 to <4 x i32>*
  store <4 x i32> %191, <4 x i32>* %203, align 4, !alias.scope !32, !noalias !29
  %204 = getelementptr i32, i32* %202, i64 4
  %205 = bitcast i32* %204 to <4 x i32>*
  store <4 x i32> %193, <4 x i32>* %205, align 4, !alias.scope !32, !noalias !29
  %206 = or i64 %200, 8
  %207 = getelementptr i32, i32* %159, i64 %206
  %208 = bitcast i32* %207 to <4 x i32>*
  store <4 x i32> %196, <4 x i32>* %208, align 4, !alias.scope !32, !noalias !29
  %209 = getelementptr i32, i32* %207, i64 4
  %210 = bitcast i32* %209 to <4 x i32>*
  store <4 x i32> %198, <4 x i32>* %210, align 4, !alias.scope !32, !noalias !29
  %211 = add i64 %200, 16
  %212 = add i64 %201, -2
  %213 = icmp eq i64 %212, 0
  br i1 %213, label %214, label %199, !llvm.loop !34

214:                                              ; preds = %199, %179
  %215 = phi i64 [ 0, %179 ], [ %211, %199 ]
  %216 = icmp eq i64 %185, 0
  br i1 %216, label %227, label %217

217:                                              ; preds = %214
  %218 = getelementptr i32, i32* %159, i64 %215
  %219 = load i32, i32* %2, align 4, !alias.scope !29
  %220 = insertelement <4 x i32> undef, i32 %219, i32 0
  %221 = shufflevector <4 x i32> %220, <4 x i32> undef, <4 x i32> zeroinitializer
  %222 = insertelement <4 x i32> undef, i32 %219, i32 0
  %223 = shufflevector <4 x i32> %222, <4 x i32> undef, <4 x i32> zeroinitializer
  %224 = bitcast i32* %218 to <4 x i32>*
  store <4 x i32> %221, <4 x i32>* %224, align 4, !alias.scope !32, !noalias !29
  %225 = getelementptr i32, i32* %218, i64 4
  %226 = bitcast i32* %225 to <4 x i32>*
  store <4 x i32> %223, <4 x i32>* %226, align 4, !alias.scope !32, !noalias !29
  br label %227

227:                                              ; preds = %214, %217
  %228 = icmp eq i64 %165, %180
  br i1 %228, label %270, label %229

229:                                              ; preds = %227, %167, %156
  %230 = phi i32* [ %159, %167 ], [ %159, %156 ], [ %181, %227 ]
  %231 = ptrtoint i32* %230 to i64
  %232 = add i64 %134, %1
  %233 = add i64 %232, -1
  %234 = getelementptr i32, i32* %158, i64 %233
  %235 = ptrtoint i32* %234 to i64
  %236 = sub i64 %235, %231
  %237 = lshr i64 %236, 2
  %238 = add nuw nsw i64 %237, 1
  %239 = and i64 %238, 7
  %240 = icmp eq i64 %239, 0
  br i1 %240, label %248, label %241

241:                                              ; preds = %229, %241
  %242 = phi i32* [ %245, %241 ], [ %230, %229 ]
  %243 = phi i64 [ %246, %241 ], [ %239, %229 ]
  %244 = load i32, i32* %2, align 4
  store i32 %244, i32* %242, align 4
  %245 = getelementptr inbounds i32, i32* %242, i64 1
  %246 = add i64 %243, -1
  %247 = icmp eq i64 %246, 0
  br i1 %247, label %248, label %241, !llvm.loop !35

248:                                              ; preds = %241, %229
  %249 = phi i32* [ %230, %229 ], [ %245, %241 ]
  %250 = icmp ult i64 %236, 28
  br i1 %250, label %270, label %251

251:                                              ; preds = %248, %251
  %252 = phi i32* [ %268, %251 ], [ %249, %248 ]
  %253 = load i32, i32* %2, align 4
  store i32 %253, i32* %252, align 4
  %254 = getelementptr inbounds i32, i32* %252, i64 1
  %255 = load i32, i32* %2, align 4
  store i32 %255, i32* %254, align 4
  %256 = getelementptr inbounds i32, i32* %252, i64 2
  %257 = load i32, i32* %2, align 4
  store i32 %257, i32* %256, align 4
  %258 = getelementptr inbounds i32, i32* %252, i64 3
  %259 = load i32, i32* %2, align 4
  store i32 %259, i32* %258, align 4
  %260 = getelementptr inbounds i32, i32* %252, i64 4
  %261 = load i32, i32* %2, align 4
  store i32 %261, i32* %260, align 4
  %262 = getelementptr inbounds i32, i32* %252, i64 5
  %263 = load i32, i32* %2, align 4
  store i32 %263, i32* %262, align 4
  %264 = getelementptr inbounds i32, i32* %252, i64 6
  %265 = load i32, i32* %2, align 4
  store i32 %265, i32* %264, align 4
  %266 = getelementptr inbounds i32, i32* %252, i64 7
  %267 = load i32, i32* %2, align 4
  store i32 %267, i32* %266, align 4
  %268 = getelementptr inbounds i32, i32* %252, i64 8
  %269 = icmp eq i32* %161, %268
  br i1 %269, label %270, label %251, !llvm.loop !36

270:                                              ; preds = %248, %251, %227
  %271 = ptrtoint i32* %160 to i64
  %272 = ptrtoint i32* %161 to i64
  %273 = getelementptr inbounds %"class.std::__1::vector.1", %"class.std::__1::vector.1"* %0, i64 0, i32 0, i32 0
  %274 = load i32*, i32** %273, align 8
  %275 = load i64, i64* %10, align 8
  %276 = ptrtoint i32* %274 to i64
  %277 = sub i64 %275, %276
  %278 = ashr exact i64 %277, 2
  %279 = sub nsw i64 0, %278
  %280 = getelementptr inbounds i32, i32* %159, i64 %279
  %281 = ptrtoint i32* %280 to i64
  %282 = icmp sgt i64 %277, 0
  br i1 %282, label %283, label %287

283:                                              ; preds = %270
  %284 = bitcast i32* %280 to i8*
  %285 = bitcast i32* %274 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %284, i8* align 4 %285, i64 %277, i1 false) #9
  %286 = load i32*, i32** %273, align 8
  br label %287

287:                                              ; preds = %270, %283
  %288 = phi i32* [ %274, %270 ], [ %286, %283 ]
  store i64 %281, i64* %131, align 8
  store i64 %272, i64* %10, align 8
  store i64 %271, i64* %7, align 8
  %289 = icmp eq i32* %288, null
  br i1 %289, label %292, label %290

290:                                              ; preds = %287
  %291 = bitcast i32* %288 to i8*
  tail call void @_ZdlPv(i8* %291) #10
  br label %292

292:                                              ; preds = %290, %287, %128
  ret void
}

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { norecurse nounwind readonly ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { noreturn nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { nobuiltin nofree "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #9 = { nounwind }
attributes #10 = { builtin nounwind }
attributes #11 = { noreturn nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{i8 0, i8 2}
!3 = distinct !{!3, !4}
!4 = !{!"llvm.loop.unroll.disable"}
!5 = !{!6}
!6 = distinct !{!6, !7}
!7 = distinct !{!7, !"LVerDomain"}
!8 = !{!9}
!9 = distinct !{!9, !7}
!10 = distinct !{!10, !11}
!11 = !{!"llvm.loop.isvectorized", i32 1}
!12 = distinct !{!12, !11}
!13 = !{!14}
!14 = distinct !{!14, !15}
!15 = distinct !{!15, !"LVerDomain"}
!16 = !{!17}
!17 = distinct !{!17, !15}
!18 = distinct !{!18, !11}
!19 = distinct !{!19, !4}
!20 = distinct !{!20, !11}
!21 = distinct !{!21, !4}
!22 = !{!23}
!23 = distinct !{!23, !24}
!24 = distinct !{!24, !"LVerDomain"}
!25 = !{!26}
!26 = distinct !{!26, !24}
!27 = distinct !{!27, !11}
!28 = distinct !{!28, !11}
!29 = !{!30}
!30 = distinct !{!30, !31}
!31 = distinct !{!31, !"LVerDomain"}
!32 = !{!33}
!33 = distinct !{!33, !31}
!34 = distinct !{!34, !11}
!35 = distinct !{!35, !4}
!36 = distinct !{!36, !11}
