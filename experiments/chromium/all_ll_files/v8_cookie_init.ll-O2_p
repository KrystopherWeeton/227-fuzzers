; ModuleID = 'gen/third_party/blink/renderer/bindings/modules/v8/v8_cookie_init.cc'
source_filename = "gen/third_party/blink/renderer/bindings/modules/v8/v8_cookie_init.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.WTF::ThreadSpecific" = type { %"class.blink::ThreadState"**, %"class.base::ThreadLocalStorage::Slot" }
%"class.blink::ThreadState" = type <{ %"class.std::__1::unique_ptr.78", i32, [4 x i8], %"class.std::__1::unique_ptr.214", %"class.std::__1::unique_ptr.214", i8**, i8, i8, i8, i8, i8, i8, [2 x i8], i64, i64, i32, i32, i32, [4 x i8], %"class.WTF::Deque", %"class.v8::Isolate"*, void (%"class.v8::Isolate"*, %"class.v8::EmbedderGraph"*, i8*)*, %"class.std::__1::unique_ptr.224", %"class.std::__1::unique_ptr.230", %"struct.blink::ThreadState::GCData", %"class.std::__1::unique_ptr.242", %"class.std::__1::unique_ptr.248", %"class.base::JobHandle", %"class.base::JobHandle", %"struct.std::__1::atomic.255", [7 x i8], i64, i8, [7 x i8], i64, %"class.base::TimeTicks", i8, i8, [6 x i8] }>
%"class.std::__1::unique_ptr.78" = type { %"class.std::__1::__compressed_pair.79" }
%"class.std::__1::__compressed_pair.79" = type { %"struct.std::__1::__compressed_pair_elem.80" }
%"struct.std::__1::__compressed_pair_elem.80" = type { %"class.blink::ThreadHeap"* }
%"class.blink::ThreadHeap" = type { %"class.blink::ThreadState"*, %"class.std::__1::unique_ptr.81", %"class.std::__1::unique_ptr.87", %"class.std::__1::unique_ptr.93", %"class.std::__1::unique_ptr.99", %"class.std::__1::unique_ptr.105", %"class.std::__1::unique_ptr.111", %"class.std::__1::unique_ptr.122", %"class.std::__1::unique_ptr.129", %"class.std::__1::unique_ptr.129", %"class.std::__1::unique_ptr.136", %"class.std::__1::unique_ptr.143", %"class.std::__1::unique_ptr.150", %"class.std::__1::unique_ptr.150", %"class.std::__1::unique_ptr.157", %"class.std::__1::unique_ptr.164", %"class.std::__1::unique_ptr.171", %"class.std::__1::unique_ptr.194", %"struct.blink::ThreadHeap::LastAllocatedRegion", [9 x %"class.blink::BaseArena"*], i64, i64 }
%"class.std::__1::unique_ptr.81" = type { %"class.std::__1::__compressed_pair.82" }
%"class.std::__1::__compressed_pair.82" = type { %"struct.std::__1::__compressed_pair_elem.83" }
%"struct.std::__1::__compressed_pair_elem.83" = type { %"class.blink::ThreadHeapStatsCollector"* }
%"class.blink::ThreadHeapStatsCollector" = type opaque
%"class.std::__1::unique_ptr.87" = type { %"class.std::__1::__compressed_pair.88" }
%"class.std::__1::__compressed_pair.88" = type { %"struct.std::__1::__compressed_pair_elem.89" }
%"struct.std::__1::__compressed_pair_elem.89" = type { %"class.blink::RegionTree"* }
%"class.blink::RegionTree" = type opaque
%"class.std::__1::unique_ptr.93" = type { %"class.std::__1::__compressed_pair.94" }
%"class.std::__1::__compressed_pair.94" = type { %"struct.std::__1::__compressed_pair_elem.95" }
%"struct.std::__1::__compressed_pair_elem.95" = type { %"class.blink::PageBloomFilter"* }
%"class.blink::PageBloomFilter" = type opaque
%"class.std::__1::unique_ptr.99" = type { %"class.std::__1::__compressed_pair.100" }
%"class.std::__1::__compressed_pair.100" = type { %"struct.std::__1::__compressed_pair_elem.101" }
%"struct.std::__1::__compressed_pair_elem.101" = type { %"class.blink::PagePool"* }
%"class.blink::PagePool" = type opaque
%"class.std::__1::unique_ptr.105" = type { %"class.std::__1::__compressed_pair.106" }
%"class.std::__1::__compressed_pair.106" = type { %"struct.std::__1::__compressed_pair_elem.107" }
%"struct.std::__1::__compressed_pair_elem.107" = type { %"class.blink::ProcessHeapReporter"* }
%"class.blink::ProcessHeapReporter" = type opaque
%"class.std::__1::unique_ptr.111" = type { %"class.std::__1::__compressed_pair.112" }
%"class.std::__1::__compressed_pair.112" = type { %"struct.std::__1::__compressed_pair_elem.113" }
%"struct.std::__1::__compressed_pair_elem.113" = type { %"class.blink::Worklist"* }
%"class.blink::Worklist" = type { [4 x %"struct.blink::Worklist<blink::TraceDescriptor, 512, 4>::PrivateSegmentHolder"], %"class.blink::Worklist<blink::TraceDescriptor, 512, 4>::GlobalPool" }
%"struct.blink::Worklist<blink::TraceDescriptor, 512, 4>::PrivateSegmentHolder" = type { %"class.blink::Worklist<blink::TraceDescriptor, 512, 4>::Segment"*, %"class.blink::Worklist<blink::TraceDescriptor, 512, 4>::Segment"*, [64 x i8] }
%"class.blink::Worklist<blink::TraceDescriptor, 512, 4>::Segment" = type { %"class.blink::Worklist<blink::TraceDescriptor, 512, 4>::Segment"*, i64, [512 x %"struct.blink::TraceDescriptor"] }
%"struct.blink::TraceDescriptor" = type { i8*, {}* }
%"class.blink::Worklist<blink::TraceDescriptor, 512, 4>::GlobalPool" = type { %"class.base::Lock", %"class.blink::Worklist<blink::TraceDescriptor, 512, 4>::Segment"*, %"struct.std::__1::atomic.114" }
%"class.base::Lock" = type { %"class.base::internal::LockImpl" }
%"class.base::internal::LockImpl" = type { %union.pthread_mutex_t }
%union.pthread_mutex_t = type { %struct.__pthread_mutex_s }
%struct.__pthread_mutex_s = type { i32, i32, i32, i32, i32, i16, i16, %struct.__pthread_internal_list }
%struct.__pthread_internal_list = type { %struct.__pthread_internal_list*, %struct.__pthread_internal_list* }
%"struct.std::__1::atomic.114" = type { %"struct.std::__1::__atomic_base.115" }
%"struct.std::__1::__atomic_base.115" = type { %"struct.std::__1::__atomic_base.116" }
%"struct.std::__1::__atomic_base.116" = type { %"struct.std::__1::__cxx_atomic_impl.117" }
%"struct.std::__1::__cxx_atomic_impl.117" = type { %"struct.std::__1::__cxx_atomic_base_impl.118" }
%"struct.std::__1::__cxx_atomic_base_impl.118" = type { i64 }
%"class.std::__1::unique_ptr.122" = type { %"class.std::__1::__compressed_pair.123" }
%"class.std::__1::__compressed_pair.123" = type { %"struct.std::__1::__compressed_pair_elem.124" }
%"struct.std::__1::__compressed_pair_elem.124" = type { %"class.blink::Worklist.125"* }
%"class.blink::Worklist.125" = type { [4 x %"struct.blink::Worklist<blink::HeapObjectHeader *, 64, 4>::PrivateSegmentHolder"], %"class.blink::Worklist<blink::HeapObjectHeader *, 64, 4>::GlobalPool" }
%"struct.blink::Worklist<blink::HeapObjectHeader *, 64, 4>::PrivateSegmentHolder" = type { %"class.blink::Worklist<blink::HeapObjectHeader *, 64, 4>::Segment"*, %"class.blink::Worklist<blink::HeapObjectHeader *, 64, 4>::Segment"*, [64 x i8] }
%"class.blink::Worklist<blink::HeapObjectHeader *, 64, 4>::Segment" = type opaque
%"class.blink::Worklist<blink::HeapObjectHeader *, 64, 4>::GlobalPool" = type { %"class.base::Lock", %"class.blink::Worklist<blink::HeapObjectHeader *, 64, 4>::Segment"*, %"struct.std::__1::atomic.114" }
%"class.std::__1::unique_ptr.129" = type { %"class.std::__1::__compressed_pair.130" }
%"class.std::__1::__compressed_pair.130" = type { %"struct.std::__1::__compressed_pair_elem.131" }
%"struct.std::__1::__compressed_pair_elem.131" = type { %"class.blink::Worklist.132"* }
%"class.blink::Worklist.132" = type { [4 x %"struct.blink::Worklist<const void *, 16, 4>::PrivateSegmentHolder"], %"class.blink::Worklist<const void *, 16, 4>::GlobalPool" }
%"struct.blink::Worklist<const void *, 16, 4>::PrivateSegmentHolder" = type { %"class.blink::Worklist<const void *, 16, 4>::Segment"*, %"class.blink::Worklist<const void *, 16, 4>::Segment"*, [64 x i8] }
%"class.blink::Worklist<const void *, 16, 4>::Segment" = type { %"class.blink::Worklist<const void *, 16, 4>::Segment"*, i64, [16 x i8*] }
%"class.blink::Worklist<const void *, 16, 4>::GlobalPool" = type { %"class.base::Lock", %"class.blink::Worklist<const void *, 16, 4>::Segment"*, %"struct.std::__1::atomic.114" }
%"class.std::__1::unique_ptr.136" = type { %"class.std::__1::__compressed_pair.137" }
%"class.std::__1::__compressed_pair.137" = type { %"struct.std::__1::__compressed_pair_elem.138" }
%"struct.std::__1::__compressed_pair_elem.138" = type { %"class.blink::Worklist.139"* }
%"class.blink::Worklist.139" = type { [4 x %"struct.blink::Worklist<blink::CustomCallbackItem, 64, 4>::PrivateSegmentHolder"], %"class.blink::Worklist<blink::CustomCallbackItem, 64, 4>::GlobalPool" }
%"struct.blink::Worklist<blink::CustomCallbackItem, 64, 4>::PrivateSegmentHolder" = type { %"class.blink::Worklist<blink::CustomCallbackItem, 64, 4>::Segment"*, %"class.blink::Worklist<blink::CustomCallbackItem, 64, 4>::Segment"*, [64 x i8] }
%"class.blink::Worklist<blink::CustomCallbackItem, 64, 4>::Segment" = type opaque
%"class.blink::Worklist<blink::CustomCallbackItem, 64, 4>::GlobalPool" = type { %"class.base::Lock", %"class.blink::Worklist<blink::CustomCallbackItem, 64, 4>::Segment"*, %"struct.std::__1::atomic.114" }
%"class.std::__1::unique_ptr.143" = type { %"class.std::__1::__compressed_pair.144" }
%"class.std::__1::__compressed_pair.144" = type { %"struct.std::__1::__compressed_pair_elem.145" }
%"struct.std::__1::__compressed_pair_elem.145" = type { %"class.blink::Worklist.146"* }
%"class.blink::Worklist.146" = type { [4 x %"struct.blink::Worklist<const void *const *, 256, 4>::PrivateSegmentHolder"], %"class.blink::Worklist<const void *const *, 256, 4>::GlobalPool" }
%"struct.blink::Worklist<const void *const *, 256, 4>::PrivateSegmentHolder" = type { %"class.blink::Worklist<const void *const *, 256, 4>::Segment"*, %"class.blink::Worklist<const void *const *, 256, 4>::Segment"*, [64 x i8] }
%"class.blink::Worklist<const void *const *, 256, 4>::Segment" = type opaque
%"class.blink::Worklist<const void *const *, 256, 4>::GlobalPool" = type { %"class.base::Lock", %"class.blink::Worklist<const void *const *, 256, 4>::Segment"*, %"struct.std::__1::atomic.114" }
%"class.std::__1::unique_ptr.150" = type { %"class.std::__1::__compressed_pair.151" }
%"class.std::__1::__compressed_pair.151" = type { %"struct.std::__1::__compressed_pair_elem.152" }
%"struct.std::__1::__compressed_pair_elem.152" = type { %"class.blink::Worklist.153"* }
%"class.blink::Worklist.153" = type { [4 x %"struct.blink::Worklist<blink::EphemeronPairItem, 64, 4>::PrivateSegmentHolder"], %"class.blink::Worklist<blink::EphemeronPairItem, 64, 4>::GlobalPool" }
%"struct.blink::Worklist<blink::EphemeronPairItem, 64, 4>::PrivateSegmentHolder" = type { %"class.blink::Worklist<blink::EphemeronPairItem, 64, 4>::Segment"*, %"class.blink::Worklist<blink::EphemeronPairItem, 64, 4>::Segment"*, [64 x i8] }
%"class.blink::Worklist<blink::EphemeronPairItem, 64, 4>::Segment" = type opaque
%"class.blink::Worklist<blink::EphemeronPairItem, 64, 4>::GlobalPool" = type { %"class.base::Lock", %"class.blink::Worklist<blink::EphemeronPairItem, 64, 4>::Segment"*, %"struct.std::__1::atomic.114" }
%"class.std::__1::unique_ptr.157" = type { %"class.std::__1::__compressed_pair.158" }
%"class.std::__1::__compressed_pair.158" = type { %"struct.std::__1::__compressed_pair_elem.159" }
%"struct.std::__1::__compressed_pair_elem.159" = type { %"class.blink::Worklist.160"* }
%"class.blink::Worklist.160" = type { [4 x %"struct.blink::Worklist<const blink::TraceWrapperV8Reference<v8::Value> *, 16, 4>::PrivateSegmentHolder"], %"class.blink::Worklist<const blink::TraceWrapperV8Reference<v8::Value> *, 16, 4>::GlobalPool" }
%"struct.blink::Worklist<const blink::TraceWrapperV8Reference<v8::Value> *, 16, 4>::PrivateSegmentHolder" = type { %"class.blink::Worklist<const blink::TraceWrapperV8Reference<v8::Value> *, 16, 4>::Segment"*, %"class.blink::Worklist<const blink::TraceWrapperV8Reference<v8::Value> *, 16, 4>::Segment"*, [64 x i8] }
%"class.blink::Worklist<const blink::TraceWrapperV8Reference<v8::Value> *, 16, 4>::Segment" = type opaque
%"class.blink::Worklist<const blink::TraceWrapperV8Reference<v8::Value> *, 16, 4>::GlobalPool" = type { %"class.base::Lock", %"class.blink::Worklist<const blink::TraceWrapperV8Reference<v8::Value> *, 16, 4>::Segment"*, %"struct.std::__1::atomic.114" }
%"class.std::__1::unique_ptr.164" = type { %"class.std::__1::__compressed_pair.165" }
%"class.std::__1::__compressed_pair.165" = type { %"struct.std::__1::__compressed_pair_elem.166" }
%"struct.std::__1::__compressed_pair_elem.166" = type { %"class.blink::Worklist.167"* }
%"class.blink::Worklist.167" = type { [4 x %"struct.blink::Worklist<blink::NotSafeToConcurrentlyTraceItem, 64, 4>::PrivateSegmentHolder"], %"class.blink::Worklist<blink::NotSafeToConcurrentlyTraceItem, 64, 4>::GlobalPool" }
%"struct.blink::Worklist<blink::NotSafeToConcurrentlyTraceItem, 64, 4>::PrivateSegmentHolder" = type { %"class.blink::Worklist<blink::NotSafeToConcurrentlyTraceItem, 64, 4>::Segment"*, %"class.blink::Worklist<blink::NotSafeToConcurrentlyTraceItem, 64, 4>::Segment"*, [64 x i8] }
%"class.blink::Worklist<blink::NotSafeToConcurrentlyTraceItem, 64, 4>::Segment" = type { %"class.blink::Worklist<blink::NotSafeToConcurrentlyTraceItem, 64, 4>::Segment"*, i64, [64 x %"struct.blink::NotSafeToConcurrentlyTraceItem"] }
%"struct.blink::NotSafeToConcurrentlyTraceItem" = type { %"struct.blink::TraceDescriptor", i64 }
%"class.blink::Worklist<blink::NotSafeToConcurrentlyTraceItem, 64, 4>::GlobalPool" = type { %"class.base::Lock", %"class.blink::Worklist<blink::NotSafeToConcurrentlyTraceItem, 64, 4>::Segment"*, %"struct.std::__1::atomic.114" }
%"class.std::__1::unique_ptr.171" = type { %"class.std::__1::__compressed_pair.172" }
%"class.std::__1::__compressed_pair.172" = type { %"struct.std::__1::__compressed_pair_elem.173" }
%"struct.std::__1::__compressed_pair_elem.173" = type { %"class.blink::WeakContainersWorklist"* }
%"class.blink::WeakContainersWorklist" = type { %"class.WTF::Mutex", %"class.std::__1::unordered_set" }
%"class.WTF::Mutex" = type { %"class.WTF::MutexBase" }
%"class.WTF::MutexBase" = type { %"struct.WTF::PlatformMutex" }
%"struct.WTF::PlatformMutex" = type { %union.pthread_mutex_t }
%"class.std::__1::unordered_set" = type { %"class.std::__1::__hash_table" }
%"class.std::__1::__hash_table" = type <{ %"class.std::__1::unique_ptr.174", %"class.std::__1::__compressed_pair.181", %"class.std::__1::__compressed_pair.186", %"class.std::__1::__compressed_pair.188", [4 x i8] }>
%"class.std::__1::unique_ptr.174" = type { %"class.std::__1::__compressed_pair.175" }
%"class.std::__1::__compressed_pair.175" = type { %"struct.std::__1::__compressed_pair_elem.176", %"struct.std::__1::__compressed_pair_elem.177" }
%"struct.std::__1::__compressed_pair_elem.176" = type { %"struct.std::__1::__hash_node_base"** }
%"struct.std::__1::__hash_node_base" = type { %"struct.std::__1::__hash_node_base"* }
%"struct.std::__1::__compressed_pair_elem.177" = type { %"class.std::__1::__bucket_list_deallocator" }
%"class.std::__1::__bucket_list_deallocator" = type { %"class.std::__1::__compressed_pair.178" }
%"class.std::__1::__compressed_pair.178" = type { %"struct.std::__1::__compressed_pair_elem.179" }
%"struct.std::__1::__compressed_pair_elem.179" = type { i64 }
%"class.std::__1::__compressed_pair.181" = type { %"struct.std::__1::__compressed_pair_elem.182" }
%"struct.std::__1::__compressed_pair_elem.182" = type { %"struct.std::__1::__hash_node_base" }
%"class.std::__1::__compressed_pair.186" = type { %"struct.std::__1::__compressed_pair_elem.179" }
%"class.std::__1::__compressed_pair.188" = type { %"struct.std::__1::__compressed_pair_elem.189" }
%"struct.std::__1::__compressed_pair_elem.189" = type { float }
%"class.std::__1::unique_ptr.194" = type { %"class.std::__1::__compressed_pair.195" }
%"class.std::__1::__compressed_pair.195" = type { %"struct.std::__1::__compressed_pair_elem.196" }
%"struct.std::__1::__compressed_pair_elem.196" = type { %"class.blink::HeapCompact"* }
%"class.blink::HeapCompact" = type <{ %"class.blink::ThreadHeap"*, %"class.std::__1::unique_ptr.197", i8, [7 x i8], i64, i64, i32, [4 x i8], i64, i8, [7 x i8] }>
%"class.std::__1::unique_ptr.197" = type { %"class.std::__1::__compressed_pair.198" }
%"class.std::__1::__compressed_pair.198" = type { %"struct.std::__1::__compressed_pair_elem.199" }
%"struct.std::__1::__compressed_pair_elem.199" = type { %"class.blink::HeapCompact::MovableObjectFixups"* }
%"class.blink::HeapCompact::MovableObjectFixups" = type opaque
%"struct.blink::ThreadHeap::LastAllocatedRegion" = type { i8*, i64 }
%"class.blink::BaseArena" = type <{ i32 (...)**, %"class.blink::PageStackThreadSafe", %"class.blink::PageStackThreadSafe", %"class.blink::PageStackThreadSafe", %"class.blink::PageStackThreadSafe", %"class.blink::ThreadState"*, i32, [4 x i8] }>
%"class.blink::PageStackThreadSafe" = type { %"class.blink::PageStack", %"class.WTF::Mutex" }
%"class.blink::PageStack" = type { %"class.WTF::Vector.206" }
%"class.WTF::Vector.206" = type { %"class.WTF::VectorBuffer.207" }
%"class.WTF::VectorBuffer.207" = type { %"class.WTF::VectorBufferBase.208" }
%"class.WTF::VectorBufferBase.208" = type { %"class.blink::BasePage"**, i32, i32 }
%"class.blink::BasePage" = type <{ i32 (...)**, %"class.blink::PageMemory"*, %"class.blink::BaseArena"*, %"class.blink::ThreadState"*, i64, i8, i8, i8, [5 x i8] }>
%"class.blink::PageMemory" = type opaque
%"class.std::__1::unique_ptr.214" = type { %"class.std::__1::__compressed_pair.215" }
%"class.std::__1::__compressed_pair.215" = type { %"struct.std::__1::__compressed_pair_elem.216" }
%"struct.std::__1::__compressed_pair_elem.216" = type { %"class.blink::PersistentRegion"* }
%"class.blink::PersistentRegion" = type { %"class.blink::PersistentRegionBase" }
%"class.blink::PersistentRegionBase" = type { %"class.blink::PersistentNode"*, %"struct.blink::PersistentNodeSlots"* }
%"class.blink::PersistentNode" = type { i8*, void (%"class.blink::Visitor"*, i8*)* }
%"class.blink::Visitor" = type { i32 (...)**, %"class.blink::ThreadState"* }
%"struct.blink::PersistentNodeSlots" = type { %"struct.blink::PersistentNodeSlots"*, [256 x %"class.blink::PersistentNode"] }
%"class.WTF::Deque" = type { %"class.WTF::Deque<std::__1::pair<void *, bool (*)(const blink::LivenessBroker &, void *)>, 0, WTF::PartitionAllocator>::BackingBuffer", i32, i32 }
%"class.WTF::Deque<std::__1::pair<void *, bool (*)(const blink::LivenessBroker &, void *)>, 0, WTF::PartitionAllocator>::BackingBuffer" = type { %"class.WTF::VectorBuffer.222" }
%"class.WTF::VectorBuffer.222" = type { %"class.WTF::VectorBufferBase.223" }
%"class.WTF::VectorBufferBase.223" = type { %"struct.std::__1::pair"*, i32, i32 }
%"struct.std::__1::pair" = type { i8*, i1 (%"class.blink::LivenessBroker"*, i8*)* }
%"class.blink::LivenessBroker" = type { i8 }
%"class.v8::Isolate" = type { i8 }
%"class.v8::EmbedderGraph" = type opaque
%"class.std::__1::unique_ptr.224" = type { %"class.std::__1::__compressed_pair.225" }
%"class.std::__1::__compressed_pair.225" = type { %"struct.std::__1::__compressed_pair_elem.226" }
%"struct.std::__1::__compressed_pair_elem.226" = type { %"class.blink::UnifiedHeapController"* }
%"class.blink::UnifiedHeapController" = type opaque
%"class.std::__1::unique_ptr.230" = type { %"class.std::__1::__compressed_pair.231" }
%"class.std::__1::__compressed_pair.231" = type { %"struct.std::__1::__compressed_pair_elem.232" }
%"struct.std::__1::__compressed_pair_elem.232" = type { %"class.v8::EmbedderRootsHandler"* }
%"class.v8::EmbedderRootsHandler" = type { i32 (...)** }
%"struct.blink::ThreadState::GCData" = type { i32, i32, i32, i32, %"class.std::__1::unique_ptr.236" }
%"class.std::__1::unique_ptr.236" = type { %"class.std::__1::__compressed_pair.237" }
%"class.std::__1::__compressed_pair.237" = type { %"struct.std::__1::__compressed_pair_elem.238" }
%"struct.std::__1::__compressed_pair_elem.238" = type { %"class.blink::MarkingVisitor"* }
%"class.blink::MarkingVisitor" = type { %"class.blink::MarkingVisitorBase", %"class.blink::MarkingVisitor::RecentlyRetracedWeakContainers" }
%"class.blink::MarkingVisitorBase" = type { %"class.blink::Visitor", %"class.blink::Worklist<blink::TraceDescriptor, 512, 4>::View", %"class.blink::Worklist<blink::HeapObjectHeader *, 64, 4>::View", %"class.blink::Worklist<const void *, 16, 4>::View", %"class.blink::Worklist<blink::CustomCallbackItem, 64, 4>::View", %"class.blink::Worklist<const void *const *, 256, 4>::View", %"class.blink::Worklist<blink::EphemeronPairItem, 64, 4>::View", %"class.blink::Worklist<blink::EphemeronPairItem, 64, 4>::View", %"class.blink::WeakContainersWorklist"*, i64, i32, i32 }
%"class.blink::Worklist<blink::TraceDescriptor, 512, 4>::View" = type <{ %"class.blink::Worklist"*, i32, [4 x i8] }>
%"class.blink::Worklist<blink::HeapObjectHeader *, 64, 4>::View" = type <{ %"class.blink::Worklist.125"*, i32, [4 x i8] }>
%"class.blink::Worklist<const void *, 16, 4>::View" = type <{ %"class.blink::Worklist.132"*, i32, [4 x i8] }>
%"class.blink::Worklist<blink::CustomCallbackItem, 64, 4>::View" = type <{ %"class.blink::Worklist.139"*, i32, [4 x i8] }>
%"class.blink::Worklist<const void *const *, 256, 4>::View" = type <{ %"class.blink::Worklist.146"*, i32, [4 x i8] }>
%"class.blink::Worklist<blink::EphemeronPairItem, 64, 4>::View" = type <{ %"class.blink::Worklist.153"*, i32, [4 x i8] }>
%"class.blink::MarkingVisitor::RecentlyRetracedWeakContainers" = type { %"class.std::__1::vector", i64 }
%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { %"class.blink::HeapObjectHeader"**, %"class.blink::HeapObjectHeader"**, %"class.std::__1::__compressed_pair.286" }
%"class.blink::HeapObjectHeader" = type { i32, i16, i16 }
%"class.std::__1::__compressed_pair.286" = type { %"struct.std::__1::__compressed_pair_elem.287" }
%"struct.std::__1::__compressed_pair_elem.287" = type { %"class.blink::HeapObjectHeader"** }
%"class.std::__1::unique_ptr.242" = type { %"class.std::__1::__compressed_pair.243" }
%"class.std::__1::__compressed_pair.243" = type { %"struct.std::__1::__compressed_pair_elem.244" }
%"struct.std::__1::__compressed_pair_elem.244" = type { %"class.blink::ThreadState::IncrementalMarkingScheduler"* }
%"class.blink::ThreadState::IncrementalMarkingScheduler" = type opaque
%"class.std::__1::unique_ptr.248" = type { %"class.std::__1::__compressed_pair.249" }
%"class.std::__1::__compressed_pair.249" = type { %"struct.std::__1::__compressed_pair_elem.250" }
%"struct.std::__1::__compressed_pair_elem.250" = type { %"class.blink::MarkingSchedulingOracle"* }
%"class.blink::MarkingSchedulingOracle" = type opaque
%"class.base::JobHandle" = type { %class.scoped_refptr.254 }
%class.scoped_refptr.254 = type { %"class.base::internal::JobTaskSource"* }
%"class.base::internal::JobTaskSource" = type opaque
%"struct.std::__1::atomic.255" = type { %"struct.std::__1::__atomic_base.256" }
%"struct.std::__1::__atomic_base.256" = type { %"struct.std::__1::__cxx_atomic_impl.257" }
%"struct.std::__1::__cxx_atomic_impl.257" = type { %"struct.std::__1::__cxx_atomic_base_impl.258" }
%"struct.std::__1::__cxx_atomic_base_impl.258" = type { i8 }
%"class.base::TimeTicks" = type { %"class.base::time_internal::TimeBase" }
%"class.base::time_internal::TimeBase" = type { i64 }
%"class.base::ThreadLocalStorage::Slot" = type { i32, i32 }
%"struct.blink::GCInfo" = type { void (%"class.blink::Visitor"*, i8*)*, void (i8*)*, { i8*, i8 } (i8*)*, i8 }
%"class.blink::GCInfoTable" = type { %"struct.blink::GCInfo"**, i32, i32, %"class.WTF::Mutex" }
%"class.v8::Value" = type { i8 }
%"class.blink::CookieInit" = type { %"class.blink::IDLDictionaryBase", i8, %"class.WTF::String", i64, %"class.WTF::String", %"class.WTF::String", %"class.WTF::String", %"class.WTF::String" }
%"class.blink::IDLDictionaryBase" = type { i32 (...)** }
%"class.WTF::String" = type { %class.scoped_refptr }
%class.scoped_refptr = type { %"class.WTF::StringImpl"* }
%"class.WTF::StringImpl" = type { i32, i32, %"struct.std::__1::atomic" }
%"struct.std::__1::atomic" = type { %"struct.std::__1::__atomic_base" }
%"struct.std::__1::__atomic_base" = type { %"struct.std::__1::__atomic_base.0" }
%"struct.std::__1::__atomic_base.0" = type { %"struct.std::__1::__cxx_atomic_impl" }
%"struct.std::__1::__cxx_atomic_impl" = type { %"struct.std::__1::__cxx_atomic_base_impl" }
%"struct.std::__1::__cxx_atomic_base_impl" = type { i32 }
%"class.blink::ExceptionState" = type { i32 (...)**, %"class.blink::ExceptionContext", %"class.blink::ExceptionState::ContextScope"*, %"class.v8::Isolate"*, i32, %"class.WTF::String", %"class.blink::TraceWrapperV8Reference" }
%"class.blink::ExceptionContext" = type { i16, i16, i8*, i8* }
%"class.blink::ExceptionState::ContextScope" = type { %"class.blink::ExceptionState"*, %"class.blink::ExceptionState::ContextScope"*, %"class.blink::ExceptionContext" }
%"class.blink::TraceWrapperV8Reference" = type { %"class.v8::TracedReference" }
%"class.v8::TracedReference" = type { %"class.v8::BasicTracedReference" }
%"class.v8::BasicTracedReference" = type { %"class.v8::TracedReferenceBase" }
%"class.v8::TracedReferenceBase" = type { i64* }
%"class.v8::TryCatch" = type <{ %"class.v8::internal::Isolate"*, %"class.v8::TryCatch"*, i8*, i8*, i8*, i8, [7 x i8] }>
%"class.v8::internal::Isolate" = type opaque
%"class.blink::V8StringResource.5" = type { %"class.v8::Local", i32, %"class.WTF::String", %"class.WTF::StringView::StackBackingStore" }
%"class.v8::Local" = type { %"class.v8::Value"* }
%"class.WTF::StringView::StackBackingStore" = type { [64 x i16], %"class.std::__1::unique_ptr" }
%"class.std::__1::unique_ptr" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { i8* }
%"class.v8::Object" = type { i8 }
%"class.blink::V8PerIsolateData" = type { i32, %"class.gin::IsolateHolder", %"class.WTF::HashMap", %"class.WTF::HashMap", %"class.WTF::HashMap.25", %"class.std::__1::unique_ptr.30", %"class.std::__1::unique_ptr.72", %"class.blink::Persistent", i8, i8, i8, %"class.WTF::Vector.259", %"class.std::__1::unique_ptr.264", %"class.blink::Persistent.270", %"class.blink::Persistent.274", %"class.blink::RuntimeCallStats", void (%"class.v8::Isolate"*, i32, i32)*, void (%"class.v8::Isolate"*, i32, i32)*, i64 }
%"class.gin::IsolateHolder" = type { %"class.std::__1::unique_ptr.9", %"class.v8::Isolate"*, %"class.std::__1::unique_ptr.13", %"class.std::__1::unique_ptr.19", i32, i32 }
%"class.std::__1::unique_ptr.9" = type { %"class.std::__1::__compressed_pair.10" }
%"class.std::__1::__compressed_pair.10" = type { %"struct.std::__1::__compressed_pair_elem.11" }
%"struct.std::__1::__compressed_pair_elem.11" = type { %"class.v8::SnapshotCreator"* }
%"class.v8::SnapshotCreator" = type { i8* }
%"class.std::__1::unique_ptr.13" = type { %"class.std::__1::__compressed_pair.14" }
%"class.std::__1::__compressed_pair.14" = type { %"struct.std::__1::__compressed_pair_elem.15" }
%"struct.std::__1::__compressed_pair_elem.15" = type { %"class.gin::PerIsolateData"* }
%"class.gin::PerIsolateData" = type opaque
%"class.std::__1::unique_ptr.19" = type { %"class.std::__1::__compressed_pair.20" }
%"class.std::__1::__compressed_pair.20" = type { %"struct.std::__1::__compressed_pair_elem.21" }
%"struct.std::__1::__compressed_pair_elem.21" = type { %"class.gin::V8IsolateMemoryDumpProvider"* }
%"class.gin::V8IsolateMemoryDumpProvider" = type opaque
%"class.WTF::HashMap" = type { %"class.WTF::HashTable" }
%"class.WTF::HashTable" = type <{ %"struct.WTF::KeyValuePair"*, i32, i32, i32, [4 x i8] }>
%"struct.WTF::KeyValuePair" = type opaque
%"class.WTF::HashMap.25" = type { %"class.WTF::HashTable.26" }
%"class.WTF::HashTable.26" = type <{ %"struct.WTF::KeyValuePair.29"*, i32, i32, i32, [4 x i8] }>
%"struct.WTF::KeyValuePair.29" = type opaque
%"class.std::__1::unique_ptr.30" = type { %"class.std::__1::__compressed_pair.31" }
%"class.std::__1::__compressed_pair.31" = type { %"struct.std::__1::__compressed_pair_elem.32" }
%"struct.std::__1::__compressed_pair_elem.32" = type { %"class.blink::StringCache"* }
%"class.blink::StringCache" = type { %"class.v8::GlobalValueMap", %"class.v8::PersistentValueMapBase<WTF::StringImpl *, v8::String, blink::StringCacheMapTraits>::PersistentValueReference", %"class.v8::GlobalValueMap.38", %class.scoped_refptr }
%"class.v8::GlobalValueMap" = type { %"class.v8::PersistentValueMapBase" }
%"class.v8::PersistentValueMapBase" = type { %"class.v8::Isolate"*, %"class.WTF::HashMap.33", i8* }
%"class.WTF::HashMap.33" = type { %"class.WTF::HashTable.34" }
%"class.WTF::HashTable.34" = type <{ %"struct.WTF::KeyValuePair.37"*, i32, i32, i32, [4 x i8] }>
%"struct.WTF::KeyValuePair.37" = type { %"class.WTF::StringImpl"*, i64 }
%"class.v8::PersistentValueMapBase<WTF::StringImpl *, v8::String, blink::StringCacheMapTraits>::PersistentValueReference" = type { i64 }
%"class.v8::GlobalValueMap.38" = type { %"class.v8::PersistentValueMapBase.39" }
%"class.v8::PersistentValueMapBase.39" = type { %"class.v8::Isolate"*, %"class.WTF::HashMap.40", i8* }
%"class.WTF::HashMap.40" = type { %"class.WTF::HashTable.41" }
%"class.WTF::HashTable.41" = type <{ %"struct.WTF::KeyValuePair.44"*, i32, i32, i32, [4 x i8] }>
%"struct.WTF::KeyValuePair.44" = type { %"class.blink::ParkableStringImpl"*, i64 }
%"class.blink::ParkableStringImpl" = type { %"class.WTF::RefCounted", %"class.WTF::String", %"class.std::__1::unique_ptr.45" }
%"class.WTF::RefCounted" = type { %"class.base::RefCounted" }
%"class.base::RefCounted" = type { %"class.base::subtle::RefCountedBase" }
%"class.base::subtle::RefCountedBase" = type { i32 }
%"class.std::__1::unique_ptr.45" = type { %"class.std::__1::__compressed_pair.46" }
%"class.std::__1::__compressed_pair.46" = type { %"struct.std::__1::__compressed_pair_elem.47" }
%"struct.std::__1::__compressed_pair_elem.47" = type { %"struct.blink::ParkableStringImpl::ParkableMetadata"* }
%"struct.blink::ParkableStringImpl::ParkableMetadata" = type { %"class.WTF::Mutex", i32, i8, i8, %"class.std::__1::unique_ptr.48", %"class.std::__1::unique_ptr.56", %"class.WTF::Vector.62", i8, i32 }
%"class.std::__1::unique_ptr.48" = type { %"class.std::__1::__compressed_pair.49" }
%"class.std::__1::__compressed_pair.49" = type { %"struct.std::__1::__compressed_pair_elem.50" }
%"struct.std::__1::__compressed_pair_elem.50" = type { %"class.WTF::Vector"* }
%"class.WTF::Vector" = type { %"class.WTF::VectorBuffer" }
%"class.WTF::VectorBuffer" = type { %"class.WTF::VectorBufferBase" }
%"class.WTF::VectorBufferBase" = type { i8*, i32, i32 }
%"class.std::__1::unique_ptr.56" = type { %"class.std::__1::__compressed_pair.57" }
%"class.std::__1::__compressed_pair.57" = type { %"struct.std::__1::__compressed_pair_elem.58" }
%"struct.std::__1::__compressed_pair_elem.58" = type { %"class.blink::DiskDataMetadata"* }
%"class.blink::DiskDataMetadata" = type { i64, i64 }
%"class.WTF::Vector.62" = type { %"class.WTF::VectorBuffer.63" }
%"class.WTF::VectorBuffer.63" = type { %"class.WTF::VectorBufferBase", [32 x i8] }
%"class.std::__1::unique_ptr.72" = type { %"class.std::__1::__compressed_pair.73" }
%"class.std::__1::__compressed_pair.73" = type { %"struct.std::__1::__compressed_pair_elem.74" }
%"struct.std::__1::__compressed_pair_elem.74" = type { %"class.blink::V8PrivateProperty"* }
%"class.blink::V8PrivateProperty" = type opaque
%"class.blink::Persistent" = type { %"class.blink::PersistentBase" }
%"class.blink::PersistentBase" = type { %"class.blink::ScriptState"*, %"class.blink::PersistentNodePtr" }
%"class.blink::ScriptState" = type { %"class.v8::Isolate"*, %"class.blink::ScopedPersistent", %class.scoped_refptr.293, %"class.blink::Member.312", %"class.blink::SelfKeepAlive", %"class.util::TokenType" }
%"class.blink::ScopedPersistent" = type { %"class.v8::Persistent" }
%"class.v8::Persistent" = type { %"class.v8::PersistentBase" }
%"class.v8::PersistentBase" = type { %"class.v8::Context"* }
%"class.v8::Context" = type { i8 }
%class.scoped_refptr.293 = type { %"class.blink::DOMWrapperWorld"* }
%"class.blink::DOMWrapperWorld" = type { %"class.WTF::RefCounted.294", i32, i32, %"class.blink::Persistent.296" }
%"class.WTF::RefCounted.294" = type { %"class.base::RefCounted.295" }
%"class.base::RefCounted.295" = type { %"class.base::subtle::RefCountedBase" }
%"class.blink::Persistent.296" = type { %"class.blink::PersistentBase.297" }
%"class.blink::PersistentBase.297" = type { %"class.blink::DOMDataStore"*, %"class.blink::PersistentNodePtr" }
%"class.blink::DOMDataStore" = type { i32 (...)**, i8, [7 x i8], %"class.blink::HeapHashMap" }
%"class.blink::HeapHashMap" = type { %"class.WTF::HashMap.302" }
%"class.WTF::HashMap.302" = type { %"class.WTF::HashTable.303" }
%"class.WTF::HashTable.303" = type <{ %"struct.WTF::KeyValuePair.305"*, i32, i32, i32, [4 x i8] }>
%"struct.WTF::KeyValuePair.305" = type { %"class.blink::WeakMember", %"class.blink::TraceWrapperV8Reference.309" }
%"class.blink::WeakMember" = type { %"class.blink::MemberBase.306" }
%"class.blink::MemberBase.306" = type { %"class.blink::ScriptWrappable"* }
%"class.blink::ScriptWrappable" = type { %"class.blink::NameClient", %"class.blink::TraceWrapperV8Reference.309" }
%"class.blink::NameClient" = type { i32 (...)** }
%"class.blink::TraceWrapperV8Reference.309" = type { %"class.v8::TracedReference.310" }
%"class.v8::TracedReference.310" = type { %"class.v8::BasicTracedReference.311" }
%"class.v8::BasicTracedReference.311" = type { %"class.v8::TracedReferenceBase" }
%"class.blink::Member.312" = type { %"class.blink::MemberBase.313" }
%"class.blink::MemberBase.313" = type { %"class.blink::V8PerContextData"* }
%"class.blink::V8PerContextData" = type opaque
%"class.blink::SelfKeepAlive" = type { %"class.blink::Persistent" }
%"class.util::TokenType" = type { %"class.base::StrongAlias" }
%"class.base::StrongAlias" = type { %"class.base::UnguessableToken" }
%"class.base::UnguessableToken" = type { %"class.base::Token" }
%"class.base::Token" = type { i64, i64 }
%"class.blink::PersistentNodePtr" = type { %"class.blink::PersistentNode"* }
%"class.WTF::Vector.259" = type { %"class.WTF::VectorBuffer.260" }
%"class.WTF::VectorBuffer.260" = type { %"class.WTF::VectorBufferBase.261" }
%"class.WTF::VectorBufferBase.261" = type { %"class.base::OnceCallback"*, i32, i32 }
%"class.base::OnceCallback" = type opaque
%"class.std::__1::unique_ptr.264" = type { %"class.std::__1::__compressed_pair.265" }
%"class.std::__1::__compressed_pair.265" = type { %"struct.std::__1::__compressed_pair_elem.266" }
%"struct.std::__1::__compressed_pair_elem.266" = type { %"class.blink::V8PerIsolateData::Data"* }
%"class.blink::V8PerIsolateData::Data" = type { i32 (...)** }
%"class.blink::Persistent.270" = type { %"class.blink::PersistentBase.271" }
%"class.blink::PersistentBase.271" = type { %"class.blink::V8PerIsolateData::GarbageCollectedData"*, %"class.blink::PersistentNodePtr" }
%"class.blink::V8PerIsolateData::GarbageCollectedData" = type { i32 (...)** }
%"class.blink::Persistent.274" = type { %"class.blink::PersistentBase.275" }
%"class.blink::PersistentBase.275" = type { %"class.blink::ActiveScriptWrappableManager"*, %"class.blink::PersistentNodePtr" }
%"class.blink::ActiveScriptWrappableManager" = type { %"class.blink::HeapVector", i64 }
%"class.blink::HeapVector" = type { %"class.WTF::Vector.280" }
%"class.WTF::Vector.280" = type { %"class.WTF::VectorBuffer.281" }
%"class.WTF::VectorBuffer.281" = type { %"class.WTF::VectorBufferBase.282" }
%"class.WTF::VectorBufferBase.282" = type { %"struct.std::__1::pair.283"*, i32, i32 }
%"struct.std::__1::pair.283" = type { %"class.blink::UntracedMember", %"class.blink::Member" }
%"class.blink::UntracedMember" = type { %"class.blink::MemberBase" }
%"class.blink::MemberBase" = type { %"class.blink::ActiveScriptWrappableBase"* }
%"class.blink::ActiveScriptWrappableBase" = type { %"class.blink::GarbageCollectedMixin" }
%"class.blink::GarbageCollectedMixin" = type { i32 (...)** }
%"class.blink::Member" = type { %"class.blink::MemberBase.284" }
%"class.blink::MemberBase.284" = type { %"class.blink::ActiveScriptWrappableBase"* }
%"class.blink::RuntimeCallStats" = type { %"class.blink::RuntimeCallTimer"*, i8, [40 x %"class.blink::RuntimeCallCounter"], %"class.base::TickClock"* }
%"class.blink::RuntimeCallTimer" = type { %"class.blink::RuntimeCallCounter"*, %"class.blink::RuntimeCallTimer"*, %"class.base::TimeTicks", %"class.base::TimeDelta", %"class.base::TickClock"* }
%"class.blink::RuntimeCallCounter" = type { i64, %"class.base::TimeDelta", i8* }
%"class.base::TimeDelta" = type { i64 }
%"class.base::TickClock" = type opaque
%"class.v8::Eternal" = type { %"class.v8::Name"* }
%"class.v8::Name" = type { i8 }
%"class.base::span.314" = type { %"struct.base::internal::ExtentStorage", i8** }
%"struct.base::internal::ExtentStorage" = type { i64 }
%"class.v8::Uint32" = type { i8 }
%"class.v8::Int32" = type { i8 }
%"class.v8::String" = type { i8 }
%"class.blink::V8StringResource" = type { %"class.v8::Local", i32, %"class.WTF::String", %"class.WTF::StringView::StackBackingStore" }
%"class.WTF::StringView" = type <{ %"class.WTF::StringImpl"*, i8*, i32, [4 x i8] }>
%"class.v8::Number" = type { i8 }
%"class.logging::CheckOpResult" = type { i8* }
%"class.logging::CheckError" = type { %"class.logging::LogMessage"* }
%"class.logging::LogMessage" = type { i32 (...)**, i32, %"class.std::__1::basic_ostringstream", i64, i8*, i32, %"class.base::ScopedClearLastErrorBase" }
%"class.std::__1::basic_ostringstream" = type { %"class.std::__1::basic_ostream.base", %"class.std::__1::basic_stringbuf", %"class.std::__1::basic_ios.base" }
%"class.std::__1::basic_ostream.base" = type { i32 (...)** }
%"class.std::__1::basic_stringbuf" = type <{ %"class.std::__1::basic_streambuf", %"class.std::__1::basic_string", i8*, i32, [4 x i8] }>
%"class.std::__1::basic_streambuf" = type { i32 (...)**, %"class.std::__1::locale", i8*, i8*, i8*, i8*, i8*, i8* }
%"class.std::__1::locale" = type { %"class.std::__1::locale::__imp"* }
%"class.std::__1::locale::__imp" = type opaque
%"class.std::__1::basic_string" = type { %"class.std::__1::__compressed_pair.336" }
%"class.std::__1::__compressed_pair.336" = type { %"struct.std::__1::__compressed_pair_elem.337" }
%"struct.std::__1::__compressed_pair_elem.337" = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" = type { %union.anon }
%union.anon = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" = type { i8*, i64, i64 }
%"class.std::__1::basic_ios.base" = type <{ %"class.std::__1::ios_base", %"class.std::__1::basic_ostream"*, i32 }>
%"class.std::__1::ios_base" = type { i32 (...)**, i32, i64, i64, i32, i32, i8*, i8*, void (i32, %"class.std::__1::ios_base"*, i32)**, i32*, i64, i64, i64*, i64, i64, i8**, i64, i64 }
%"class.std::__1::basic_ostream" = type { i32 (...)**, %"class.std::__1::basic_ios.base" }
%"class.base::ScopedClearLastErrorBase" = type { i32 }
%"class.blink::NormalPageArena" = type { %"class.blink::BaseArena.base", [4 x i8], %"class.blink::FreeList", i8*, i64, i64 }
%"class.blink::BaseArena.base" = type <{ i32 (...)**, %"class.blink::PageStackThreadSafe", %"class.blink::PageStackThreadSafe", %"class.blink::PageStackThreadSafe", %"class.blink::PageStackThreadSafe", %"class.blink::ThreadState"*, i32 }>
%"class.blink::FreeList" = type <{ [17 x %"class.blink::FreeListEntry"*], [17 x %"class.blink::FreeListEntry"*], i32, [4 x i8] }>
%"class.blink::FreeListEntry" = type { %"class.blink::HeapObjectHeader", %"class.blink::FreeListEntry"* }
%"class.blink::PlatformAwareObjectStartBitmap" = type { %"class.blink::ObjectStartBitmap" }
%"class.blink::ObjectStartBitmap" = type { i8*, [2048 x i8] }

$_ZN5blink17NativeValueTraitsINS_16IDLUSVStringBaseILNS_20V8StringResourceModeE3EEEvE11NativeValueEPN2v87IsolateENS5_5LocalINS5_5ValueEEERNS_14ExceptionStateE = comdat any

$_ZN5blink17NativeValueTraitsINS_16IDLUSVStringBaseILNS_20V8StringResourceModeE0EEEvE11NativeValueEPN2v87IsolateENS5_5LocalINS5_5ValueEEERNS_14ExceptionStateE = comdat any

$_ZN5blink8V8StringEPN2v87IsolateERKN3WTF10StringViewE = comdat any

$_ZN5blink10ThreadHeap8AllocateINS_17IDLDictionaryBaseEEEPhm = comdat any

$_ZN5blink10TraceTraitINS_17IDLDictionaryBaseEE5TraceEPNS_7VisitorEPKv = comdat any

$_ZN5blink8internal14FinalizerTraitINS_17IDLDictionaryBaseEE8FinalizeEPv = comdat any

$_ZN5blink9NameTraitINS_17IDLDictionaryBaseEE7GetNameEPKv = comdat any

$_ZN5blink16V8StringResourceILNS_20V8StringResourceModeE3EE11PrepareFastEv = comdat any

$_ZN5blink16V8StringResourceILNS_20V8StringResourceModeE0EE11PrepareFastEv = comdat any

$_ZZN5blink11GCInfoTraitINS_17IDLDictionaryBaseEE5IndexEvE7kGcInfo = comdat any

$_ZZN5blink11GCInfoTraitINS_17IDLDictionaryBaseEE5IndexEvE13gc_info_index = comdat any

@.str = private unnamed_addr constant [41 x i8] c"Missing required member(s): name, value.\00", align 1
@.str.1 = private unnamed_addr constant [30 x i8] c"cannot convert to dictionary.\00", align 1
@.str.2 = private unnamed_addr constant [35 x i8] c"required member name is undefined.\00", align 1
@_ZZN5blink12V8CookieInit6ToImplEPN2v87IsolateENS1_5LocalINS1_5ValueEEEPNS_10CookieInitERNS_14ExceptionStateEE12kValidValues = internal constant [3 x i8*] [i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.3, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.4, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.5, i32 0, i32 0)], align 16
@.str.3 = private unnamed_addr constant [7 x i8] c"strict\00", align 1
@.str.4 = private unnamed_addr constant [4 x i8] c"lax\00", align 1
@.str.5 = private unnamed_addr constant [5 x i8] c"none\00", align 1
@.str.6 = private unnamed_addr constant [15 x i8] c"CookieSameSite\00", align 1
@.str.7 = private unnamed_addr constant [36 x i8] c"required member value is undefined.\00", align 1
@.str.8 = private unnamed_addr constant [2 x i8] c"/\00", align 1
@_ZZN5blinkL23eternalV8CookieInitKeysEPN2v87IsolateEE5kKeys = internal constant [6 x i8*] [i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.9, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.10, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.11, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.12, i32 0, i32 0), i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.13, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.14, i32 0, i32 0)], align 16
@.str.9 = private unnamed_addr constant [7 x i8] c"domain\00", align 1
@.str.10 = private unnamed_addr constant [8 x i8] c"expires\00", align 1
@.str.11 = private unnamed_addr constant [5 x i8] c"name\00", align 1
@.str.12 = private unnamed_addr constant [5 x i8] c"path\00", align 1
@.str.13 = private unnamed_addr constant [9 x i8] c"sameSite\00", align 1
@.str.14 = private unnamed_addr constant [6 x i8] c"value\00", align 1
@.ref.tmp = private constant { i64, i8** } { i64 6, i8** getelementptr inbounds ([6 x i8*], [6 x i8*]* @_ZZN5blinkL23eternalV8CookieInitKeysEPN2v87IsolateEE5kKeys, i32 0, i32 0) }, align 8
@_ZN5blink11ThreadState16thread_specific_E = external local_unnamed_addr global %"class.WTF::ThreadSpecific"*, align 8
@__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameIPN5blink11ThreadStateEEEPKcv = private unnamed_addr constant [68 x i8] c"const char *WTF::GetStringWithTypeName() [T = blink::ThreadState *]\00", align 1
@.str.15 = private unnamed_addr constant [23 x i8] c"allocation_size > size\00", align 1
@.str.16 = private unnamed_addr constant [59 x i8] c"../../third_party/blink/renderer/platform/heap/impl/heap.h\00", align 1
@_ZZN5blink11GCInfoTraitINS_17IDLDictionaryBaseEE5IndexEvE7kGcInfo = linkonce_odr hidden constant %"struct.blink::GCInfo" { void (%"class.blink::Visitor"*, i8*)* @_ZN5blink10TraceTraitINS_17IDLDictionaryBaseEE5TraceEPNS_7VisitorEPKv, void (i8*)* @_ZN5blink8internal14FinalizerTraitINS_17IDLDictionaryBaseEE8FinalizeEPv, { i8*, i8 } (i8*)* @_ZN5blink9NameTraitINS_17IDLDictionaryBaseEE7GetNameEPKv, i8 1 }, comdat, align 8
@_ZZN5blink11GCInfoTraitINS_17IDLDictionaryBaseEE5IndexEvE13gc_info_index = linkonce_odr hidden global { { i32 } } zeroinitializer, comdat, align 4
@.str.17 = private unnamed_addr constant [13 x i8] c"InternalNode\00", align 1
@_ZN5blink11GCInfoTable13global_table_E = external local_unnamed_addr global %"class.blink::GCInfoTable"*, align 8

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink12V8CookieInit6ToImplEPN2v87IsolateENS1_5LocalINS1_5ValueEEEPNS_10CookieInitERNS_14ExceptionStateE(%"class.v8::Isolate"*, %"class.v8::Value"*, %"class.blink::CookieInit"* nocapture, %"class.blink::ExceptionState"* dereferenceable(72)) local_unnamed_addr #0 align 2 {
  %5 = alloca %"class.v8::TryCatch", align 8
  %6 = alloca %"class.v8::TryCatch", align 8
  %7 = alloca %"class.blink::V8StringResource.5", align 8
  %8 = alloca %"class.WTF::String", align 8
  %9 = alloca %"class.WTF::String", align 8
  %10 = icmp eq %"class.v8::Value"* %1, null
  br i1 %10, label %32, label %11

11:                                               ; preds = %4
  %12 = bitcast %"class.v8::Value"* %1 to i64*
  %13 = load i64, i64* %12, align 8
  %14 = and i64 %13, 3
  %15 = icmp eq i64 %14, 1
  br i1 %15, label %16, label %33

16:                                               ; preds = %11
  %17 = add i64 %13, -1
  %18 = inttoptr i64 %17 to i32*
  %19 = load i32, i32* %18, align 4
  %20 = and i64 %13, -4294967296
  %21 = zext i32 %19 to i64
  %22 = or i64 %20, %21
  %23 = add i64 %22, 7
  %24 = inttoptr i64 %23 to i16*
  %25 = load i16, i16* %24, align 2
  %26 = icmp eq i16 %25, 67
  br i1 %26, label %27, label %33

27:                                               ; preds = %16
  %28 = add i64 %13, 23
  %29 = inttoptr i64 %28 to i32*
  %30 = load i32, i32* %29, align 4
  %31 = ashr i32 %30, 1
  switch i32 %31, label %33 [
    i32 5, label %32
    i32 3, label %32
  ]

32:                                               ; preds = %27, %27, %4
  tail call void @_ZN5blink14ExceptionState14ThrowTypeErrorEPKc(%"class.blink::ExceptionState"* %3, i8* getelementptr inbounds ([41 x i8], [41 x i8]* @.str, i64 0, i64 0)) #7
  br label %1045

33:                                               ; preds = %27, %16, %11
  %34 = tail call zeroext i1 @_ZNK2v85Value8IsObjectEv(%"class.v8::Value"* nonnull %1) #7
  br i1 %34, label %36, label %35

35:                                               ; preds = %33
  tail call void @_ZN5blink14ExceptionState14ThrowTypeErrorEPKc(%"class.blink::ExceptionState"* %3, i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.1, i64 0, i64 0)) #7
  br label %1045

36:                                               ; preds = %33
  %37 = bitcast %"class.v8::Value"* %1 to %"class.v8::Object"*
  %38 = ptrtoint %"class.v8::Isolate"* %0 to i64
  %39 = add i64 %38, 8
  %40 = inttoptr i64 %39 to %"class.blink::V8PerIsolateData"**
  %41 = load %"class.blink::V8PerIsolateData"*, %"class.blink::V8PerIsolateData"** %40, align 8
  %42 = tail call { i64, %"class.v8::Eternal"* } @_ZN5blink16V8PerIsolateData28FindOrCreateEternalNameCacheEPKvRKN4base4spanIKPKcLm18446744073709551615EEE(%"class.blink::V8PerIsolateData"* %41, i8* bitcast ([6 x i8*]* @_ZZN5blinkL23eternalV8CookieInitKeysEPN2v87IsolateEE5kKeys to i8*), %"class.base::span.314"* dereferenceable(16) bitcast ({ i64, i8** }* @.ref.tmp to %"class.base::span.314"*)) #7
  %43 = extractvalue { i64, %"class.v8::Eternal"* } %42, 1
  %44 = bitcast %"class.v8::TryCatch"* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 48, i8* nonnull %44) #7
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %44, i8 -86, i64 48, i1 false)
  call void @_ZN2v88TryCatchC1EPNS_7IsolateE(%"class.v8::TryCatch"* nonnull %6, %"class.v8::Isolate"* %0) #7
  %45 = call %"class.v8::Context"* @_ZN2v87Isolate17GetCurrentContextEv(%"class.v8::Isolate"* %0) #7
  %46 = bitcast %"class.v8::Eternal"* %43 to %"class.v8::Value"**
  %47 = load %"class.v8::Value"*, %"class.v8::Value"** %46, align 8
  %48 = call %"class.v8::Value"* @_ZN2v86Object3GetENS_5LocalINS_7ContextEEENS1_INS_5ValueEEE(%"class.v8::Object"* nonnull %37, %"class.v8::Context"* %45, %"class.v8::Value"* %47) #7
  %49 = icmp eq %"class.v8::Value"* %48, null
  br i1 %49, label %50, label %56

50:                                               ; preds = %36
  %51 = call %"class.v8::Value"* @_ZNK2v88TryCatch9ExceptionEv(%"class.v8::TryCatch"* nonnull %6) #7
  %52 = bitcast %"class.blink::ExceptionState"* %3 to void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)***
  %53 = load void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)**, void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)*** %52, align 8
  %54 = getelementptr inbounds void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)*, void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)** %53, i64 5
  %55 = load void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)*, void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)** %54, align 8
  call void %55(%"class.blink::ExceptionState"* %3, %"class.v8::Value"* %51) #7
  br label %1044

56:                                               ; preds = %36
  %57 = bitcast %"class.v8::Value"* %48 to i64*
  %58 = load i64, i64* %57, align 8
  %59 = and i64 %58, 3
  %60 = icmp eq i64 %59, 1
  br i1 %60, label %61, label %78

61:                                               ; preds = %56
  %62 = add i64 %58, -1
  %63 = inttoptr i64 %62 to i32*
  %64 = load i32, i32* %63, align 4
  %65 = and i64 %58, -4294967296
  %66 = zext i32 %64 to i64
  %67 = or i64 %65, %66
  %68 = add i64 %67, 7
  %69 = inttoptr i64 %68 to i16*
  %70 = load i16, i16* %69, align 2
  %71 = icmp eq i16 %70, 67
  br i1 %71, label %72, label %78

72:                                               ; preds = %61
  %73 = add i64 %58, 23
  %74 = inttoptr i64 %73 to i32*
  %75 = load i32, i32* %74, align 4
  %76 = and i32 %75, -2
  %77 = icmp eq i32 %76, 10
  br i1 %77, label %214, label %78

78:                                               ; preds = %61, %56, %72
  %79 = call %"class.WTF::StringImpl"* @_ZN5blink17NativeValueTraitsINS_16IDLUSVStringBaseILNS_20V8StringResourceModeE3EEEvE11NativeValueEPN2v87IsolateENS5_5LocalINS5_5ValueEEERNS_14ExceptionStateE(%"class.v8::Isolate"* %0, %"class.v8::Value"* nonnull %48, %"class.blink::ExceptionState"* dereferenceable(72) %3)
  %80 = icmp eq %"class.WTF::StringImpl"* %79, null
  br i1 %80, label %110, label %81

81:                                               ; preds = %78
  %82 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %79, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %83 = load atomic i32, i32* %82 monotonic, align 4
  %84 = and i32 %83, 2
  %85 = icmp eq i32 %84, 0
  %86 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %79, i64 0, i32 0
  %87 = load i32, i32* %86, align 4
  br i1 %85, label %88, label %98

88:                                               ; preds = %81
  %89 = zext i32 %87 to i33
  %90 = call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %89, i33 1) #7
  %91 = extractvalue { i33, i1 } %90, 1
  %92 = extractvalue { i33, i1 } %90, 0
  %93 = icmp slt i33 %92, 0
  %94 = or i1 %91, %93
  br i1 %94, label %95, label %96, !prof !2

95:                                               ; preds = %88
  call void @llvm.trap() #7
  unreachable

96:                                               ; preds = %88
  %97 = trunc i33 %92 to i32
  store i32 %97, i32* %86, align 4
  br label %98

98:                                               ; preds = %81, %96
  %99 = phi i32 [ %97, %96 ], [ %87, %81 ]
  %100 = load atomic i32, i32* %82 monotonic, align 4
  %101 = and i32 %100, 2
  %102 = icmp eq i32 %101, 0
  br i1 %102, label %103, label %106

103:                                              ; preds = %98
  %104 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %79, i64 0, i32 0
  %105 = add i32 %99, -1
  store i32 %105, i32* %104, align 4
  br label %106

106:                                              ; preds = %103, %98
  %107 = phi i32 [ %105, %103 ], [ %99, %98 ]
  %108 = icmp eq i32 %107, 0
  br i1 %108, label %109, label %110

109:                                              ; preds = %106
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %79) #7
  br label %110

110:                                              ; preds = %78, %106, %109
  %111 = getelementptr inbounds %"class.blink::ExceptionState", %"class.blink::ExceptionState"* %3, i64 0, i32 4
  %112 = load i32, i32* %111, align 8
  %113 = icmp eq i32 %112, 0
  br i1 %113, label %114, label %200

114:                                              ; preds = %110
  br i1 %80, label %132, label %115

115:                                              ; preds = %114
  %116 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %79, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %117 = load atomic i32, i32* %116 monotonic, align 4
  %118 = and i32 %117, 2
  %119 = icmp eq i32 %118, 0
  br i1 %119, label %120, label %134

120:                                              ; preds = %115
  %121 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %79, i64 0, i32 0
  %122 = load i32, i32* %121, align 4
  %123 = zext i32 %122 to i33
  %124 = call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %123, i33 1) #7
  %125 = extractvalue { i33, i1 } %124, 1
  %126 = extractvalue { i33, i1 } %124, 0
  %127 = icmp slt i33 %126, 0
  %128 = or i1 %125, %127
  br i1 %128, label %129, label %130, !prof !2

129:                                              ; preds = %120
  call void @llvm.trap() #7
  unreachable

130:                                              ; preds = %120
  %131 = trunc i33 %126 to i32
  store i32 %131, i32* %121, align 4
  br label %134

132:                                              ; preds = %114
  %133 = getelementptr inbounds %"class.blink::CookieInit", %"class.blink::CookieInit"* %2, i64 0, i32 2
  br label %151

134:                                              ; preds = %115, %130
  %135 = getelementptr inbounds %"class.blink::CookieInit", %"class.blink::CookieInit"* %2, i64 0, i32 2
  %136 = load atomic i32, i32* %116 monotonic, align 4
  %137 = and i32 %136, 2
  %138 = icmp eq i32 %137, 0
  br i1 %138, label %139, label %151

139:                                              ; preds = %134
  %140 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %79, i64 0, i32 0
  %141 = load i32, i32* %140, align 4
  %142 = zext i32 %141 to i33
  %143 = call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %142, i33 1) #7
  %144 = extractvalue { i33, i1 } %143, 1
  %145 = extractvalue { i33, i1 } %143, 0
  %146 = icmp slt i33 %145, 0
  %147 = or i1 %144, %146
  br i1 %147, label %148, label %149, !prof !2

148:                                              ; preds = %139
  call void @llvm.trap() #7
  unreachable

149:                                              ; preds = %139
  %150 = trunc i33 %145 to i32
  store i32 %150, i32* %140, align 4
  br label %151

151:                                              ; preds = %132, %149, %134
  %152 = phi i1 [ false, %149 ], [ false, %134 ], [ true, %132 ]
  %153 = phi %"class.WTF::String"* [ %135, %149 ], [ %135, %134 ], [ %133, %132 ]
  %154 = ptrtoint %"class.WTF::StringImpl"* %79 to i64
  %155 = bitcast %"class.WTF::String"* %153 to i64*
  %156 = getelementptr inbounds %"class.blink::CookieInit", %"class.blink::CookieInit"* %2, i64 0, i32 2, i32 0, i32 0
  %157 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %156, align 8
  store i64 %154, i64* %155, align 8
  %158 = icmp eq %"class.WTF::StringImpl"* %157, null
  br i1 %158, label %172, label %159

159:                                              ; preds = %151
  %160 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %157, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %161 = load atomic i32, i32* %160 monotonic, align 4
  %162 = and i32 %161, 2
  %163 = icmp eq i32 %162, 0
  %164 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %157, i64 0, i32 0
  %165 = load i32, i32* %164, align 4
  br i1 %163, label %166, label %168

166:                                              ; preds = %159
  %167 = add i32 %165, -1
  store i32 %167, i32* %164, align 4
  br label %168

168:                                              ; preds = %166, %159
  %169 = phi i32 [ %167, %166 ], [ %165, %159 ]
  %170 = icmp eq i32 %169, 0
  br i1 %170, label %171, label %172

171:                                              ; preds = %168
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %157) #7
  br label %172

172:                                              ; preds = %151, %168, %171
  br i1 %152, label %186, label %173

173:                                              ; preds = %172
  %174 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %79, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %175 = load atomic i32, i32* %174 monotonic, align 4
  %176 = and i32 %175, 2
  %177 = icmp eq i32 %176, 0
  %178 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %79, i64 0, i32 0
  %179 = load i32, i32* %178, align 4
  br i1 %177, label %180, label %182

180:                                              ; preds = %173
  %181 = add i32 %179, -1
  store i32 %181, i32* %178, align 4
  br label %182

182:                                              ; preds = %180, %173
  %183 = phi i32 [ %181, %180 ], [ %179, %173 ]
  %184 = icmp eq i32 %183, 0
  br i1 %184, label %185, label %186

185:                                              ; preds = %182
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %79) #7
  br label %186

186:                                              ; preds = %185, %182, %172
  br i1 %80, label %214, label %187

187:                                              ; preds = %186
  %188 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %79, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %189 = load atomic i32, i32* %188 monotonic, align 4
  %190 = and i32 %189, 2
  %191 = icmp eq i32 %190, 0
  %192 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %79, i64 0, i32 0
  %193 = load i32, i32* %192, align 4
  br i1 %191, label %194, label %196

194:                                              ; preds = %187
  %195 = add i32 %193, -1
  store i32 %195, i32* %192, align 4
  br label %196

196:                                              ; preds = %194, %187
  %197 = phi i32 [ %195, %194 ], [ %193, %187 ]
  %198 = icmp eq i32 %197, 0
  br i1 %198, label %199, label %214

199:                                              ; preds = %196
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %79) #7
  br label %214

200:                                              ; preds = %110
  br i1 %80, label %1044, label %201

201:                                              ; preds = %200
  %202 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %79, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %203 = load atomic i32, i32* %202 monotonic, align 4
  %204 = and i32 %203, 2
  %205 = icmp eq i32 %204, 0
  %206 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %79, i64 0, i32 0
  %207 = load i32, i32* %206, align 4
  br i1 %205, label %208, label %210

208:                                              ; preds = %201
  %209 = add i32 %207, -1
  store i32 %209, i32* %206, align 4
  br label %210

210:                                              ; preds = %208, %201
  %211 = phi i32 [ %209, %208 ], [ %207, %201 ]
  %212 = icmp eq i32 %211, 0
  br i1 %212, label %213, label %1044

213:                                              ; preds = %210
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %79) #7
  br label %1044

214:                                              ; preds = %199, %196, %186, %72
  %215 = getelementptr inbounds %"class.v8::Eternal", %"class.v8::Eternal"* %43, i64 1, i32 0
  %216 = bitcast %"class.v8::Name"** %215 to %"class.v8::Value"**
  %217 = load %"class.v8::Value"*, %"class.v8::Value"** %216, align 8
  %218 = call %"class.v8::Value"* @_ZN2v86Object3GetENS_5LocalINS_7ContextEEENS1_INS_5ValueEEE(%"class.v8::Object"* nonnull %37, %"class.v8::Context"* %45, %"class.v8::Value"* %217) #7
  %219 = icmp eq %"class.v8::Value"* %218, null
  br i1 %219, label %220, label %226

220:                                              ; preds = %214
  %221 = call %"class.v8::Value"* @_ZNK2v88TryCatch9ExceptionEv(%"class.v8::TryCatch"* nonnull %6) #7
  %222 = bitcast %"class.blink::ExceptionState"* %3 to void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)***
  %223 = load void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)**, void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)*** %222, align 8
  %224 = getelementptr inbounds void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)*, void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)** %223, i64 5
  %225 = load void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)*, void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)** %224, align 8
  call void %225(%"class.blink::ExceptionState"* %3, %"class.v8::Value"* %221) #7
  br label %1044

226:                                              ; preds = %214
  %227 = bitcast %"class.v8::Value"* %218 to i64*
  %228 = load i64, i64* %227, align 8
  %229 = and i64 %228, 3
  %230 = icmp eq i64 %229, 1
  br i1 %230, label %231, label %254

231:                                              ; preds = %226
  %232 = add i64 %228, -1
  %233 = inttoptr i64 %232 to i32*
  %234 = load i32, i32* %233, align 4
  %235 = and i64 %228, -4294967296
  %236 = zext i32 %234 to i64
  %237 = or i64 %235, %236
  %238 = add i64 %237, 7
  %239 = inttoptr i64 %238 to i16*
  %240 = load i16, i16* %239, align 2
  %241 = icmp eq i16 %240, 67
  br i1 %241, label %242, label %254

242:                                              ; preds = %231
  %243 = add i64 %228, 23
  %244 = inttoptr i64 %243 to i32*
  %245 = load i32, i32* %244, align 4
  %246 = and i32 %245, -2
  %247 = icmp eq i32 %246, 10
  br i1 %247, label %278, label %248

248:                                              ; preds = %242
  %249 = add i64 %228, 23
  %250 = inttoptr i64 %249 to i32*
  %251 = load i32, i32* %250, align 4
  %252 = and i32 %251, -2
  %253 = icmp eq i32 %252, 6
  br i1 %253, label %275, label %254

254:                                              ; preds = %231, %226, %248
  %255 = call zeroext i1 @_ZNK2v85Value8IsUint32Ev(%"class.v8::Value"* nonnull %218) #7
  br i1 %255, label %256, label %260, !prof !3

256:                                              ; preds = %254
  %257 = bitcast %"class.v8::Value"* %218 to %"class.v8::Uint32"*
  %258 = call i32 @_ZNK2v86Uint325ValueEv(%"class.v8::Uint32"* nonnull %257) #7
  %259 = zext i32 %258 to i64
  br label %268

260:                                              ; preds = %254
  %261 = call zeroext i1 @_ZNK2v85Value7IsInt32Ev(%"class.v8::Value"* nonnull %218) #7
  br i1 %261, label %262, label %266, !prof !3

262:                                              ; preds = %260
  %263 = bitcast %"class.v8::Value"* %218 to %"class.v8::Int32"*
  %264 = call i32 @_ZNK2v85Int325ValueEv(%"class.v8::Int32"* nonnull %263) #7
  %265 = sext i32 %264 to i64
  br label %268

266:                                              ; preds = %260
  %267 = call i64 @_ZN5blink12ToUInt64SlowEPN2v87IsolateENS0_5LocalINS0_5ValueEEENS_30IntegerConversionConfigurationERNS_14ExceptionStateE(%"class.v8::Isolate"* %0, %"class.v8::Value"* nonnull %218, i32 0, %"class.blink::ExceptionState"* dereferenceable(72) %3) #7
  br label %268

268:                                              ; preds = %256, %262, %266
  %269 = phi i64 [ %259, %256 ], [ %265, %262 ], [ %267, %266 ]
  %270 = getelementptr inbounds %"class.blink::ExceptionState", %"class.blink::ExceptionState"* %3, i64 0, i32 4
  %271 = load i32, i32* %270, align 8
  %272 = icmp eq i32 %271, 0
  br i1 %272, label %273, label %1044

273:                                              ; preds = %268
  %274 = getelementptr inbounds %"class.blink::CookieInit", %"class.blink::CookieInit"* %2, i64 0, i32 3
  store i64 %269, i64* %274, align 8
  br label %275

275:                                              ; preds = %248, %273
  %276 = phi i8 [ 1, %273 ], [ 0, %248 ]
  %277 = getelementptr inbounds %"class.blink::CookieInit", %"class.blink::CookieInit"* %2, i64 0, i32 1
  store i8 %276, i8* %277, align 8
  br label %278

278:                                              ; preds = %275, %242
  %279 = getelementptr inbounds %"class.v8::Eternal", %"class.v8::Eternal"* %43, i64 2, i32 0
  %280 = bitcast %"class.v8::Name"** %279 to %"class.v8::Value"**
  %281 = load %"class.v8::Value"*, %"class.v8::Value"** %280, align 8
  %282 = call %"class.v8::Value"* @_ZN2v86Object3GetENS_5LocalINS_7ContextEEENS1_INS_5ValueEEE(%"class.v8::Object"* nonnull %37, %"class.v8::Context"* %45, %"class.v8::Value"* %281) #7
  %283 = icmp eq %"class.v8::Value"* %282, null
  br i1 %283, label %284, label %290

284:                                              ; preds = %278
  %285 = call %"class.v8::Value"* @_ZNK2v88TryCatch9ExceptionEv(%"class.v8::TryCatch"* nonnull %6) #7
  %286 = bitcast %"class.blink::ExceptionState"* %3 to void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)***
  %287 = load void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)**, void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)*** %286, align 8
  %288 = getelementptr inbounds void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)*, void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)** %287, i64 5
  %289 = load void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)*, void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)** %288, align 8
  call void %289(%"class.blink::ExceptionState"* %3, %"class.v8::Value"* %285) #7
  br label %1044

290:                                              ; preds = %278
  %291 = bitcast %"class.v8::Value"* %282 to i64*
  %292 = load i64, i64* %291, align 8
  %293 = and i64 %292, 3
  %294 = icmp eq i64 %293, 1
  br i1 %294, label %295, label %313

295:                                              ; preds = %290
  %296 = add i64 %292, -1
  %297 = inttoptr i64 %296 to i32*
  %298 = load i32, i32* %297, align 4
  %299 = and i64 %292, -4294967296
  %300 = zext i32 %298 to i64
  %301 = or i64 %299, %300
  %302 = add i64 %301, 7
  %303 = inttoptr i64 %302 to i16*
  %304 = load i16, i16* %303, align 2
  %305 = icmp eq i16 %304, 67
  br i1 %305, label %306, label %313

306:                                              ; preds = %295
  %307 = add i64 %292, 23
  %308 = inttoptr i64 %307 to i32*
  %309 = load i32, i32* %308, align 4
  %310 = and i32 %309, -2
  %311 = icmp eq i32 %310, 10
  br i1 %311, label %312, label %313

312:                                              ; preds = %306
  call void @_ZN5blink14ExceptionState14ThrowTypeErrorEPKc(%"class.blink::ExceptionState"* %3, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.2, i64 0, i64 0)) #7
  br label %1044

313:                                              ; preds = %295, %290, %306
  %314 = call %"class.WTF::StringImpl"* @_ZN5blink17NativeValueTraitsINS_16IDLUSVStringBaseILNS_20V8StringResourceModeE0EEEvE11NativeValueEPN2v87IsolateENS5_5LocalINS5_5ValueEEERNS_14ExceptionStateE(%"class.v8::Isolate"* %0, %"class.v8::Value"* nonnull %282, %"class.blink::ExceptionState"* dereferenceable(72) %3)
  %315 = icmp eq %"class.WTF::StringImpl"* %314, null
  br i1 %315, label %345, label %316

316:                                              ; preds = %313
  %317 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %314, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %318 = load atomic i32, i32* %317 monotonic, align 4
  %319 = and i32 %318, 2
  %320 = icmp eq i32 %319, 0
  %321 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %314, i64 0, i32 0
  %322 = load i32, i32* %321, align 4
  br i1 %320, label %323, label %333

323:                                              ; preds = %316
  %324 = zext i32 %322 to i33
  %325 = call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %324, i33 1) #7
  %326 = extractvalue { i33, i1 } %325, 1
  %327 = extractvalue { i33, i1 } %325, 0
  %328 = icmp slt i33 %327, 0
  %329 = or i1 %326, %328
  br i1 %329, label %330, label %331, !prof !2

330:                                              ; preds = %323
  call void @llvm.trap() #7
  unreachable

331:                                              ; preds = %323
  %332 = trunc i33 %327 to i32
  store i32 %332, i32* %321, align 4
  br label %333

333:                                              ; preds = %316, %331
  %334 = phi i32 [ %332, %331 ], [ %322, %316 ]
  %335 = load atomic i32, i32* %317 monotonic, align 4
  %336 = and i32 %335, 2
  %337 = icmp eq i32 %336, 0
  br i1 %337, label %338, label %341

338:                                              ; preds = %333
  %339 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %314, i64 0, i32 0
  %340 = add i32 %334, -1
  store i32 %340, i32* %339, align 4
  br label %341

341:                                              ; preds = %338, %333
  %342 = phi i32 [ %340, %338 ], [ %334, %333 ]
  %343 = icmp eq i32 %342, 0
  br i1 %343, label %344, label %345

344:                                              ; preds = %341
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %314) #7
  br label %345

345:                                              ; preds = %313, %341, %344
  %346 = getelementptr inbounds %"class.blink::ExceptionState", %"class.blink::ExceptionState"* %3, i64 0, i32 4
  %347 = load i32, i32* %346, align 8
  %348 = icmp eq i32 %347, 0
  br i1 %348, label %349, label %441

349:                                              ; preds = %345
  br i1 %315, label %367, label %350

350:                                              ; preds = %349
  %351 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %314, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %352 = load atomic i32, i32* %351 monotonic, align 4
  %353 = and i32 %352, 2
  %354 = icmp eq i32 %353, 0
  br i1 %354, label %355, label %369

355:                                              ; preds = %350
  %356 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %314, i64 0, i32 0
  %357 = load i32, i32* %356, align 4
  %358 = zext i32 %357 to i33
  %359 = call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %358, i33 1) #7
  %360 = extractvalue { i33, i1 } %359, 1
  %361 = extractvalue { i33, i1 } %359, 0
  %362 = icmp slt i33 %361, 0
  %363 = or i1 %360, %362
  br i1 %363, label %364, label %365, !prof !2

364:                                              ; preds = %355
  call void @llvm.trap() #7
  unreachable

365:                                              ; preds = %355
  %366 = trunc i33 %361 to i32
  store i32 %366, i32* %356, align 4
  br label %369

367:                                              ; preds = %349
  %368 = getelementptr inbounds %"class.blink::CookieInit", %"class.blink::CookieInit"* %2, i64 0, i32 4
  br label %386

369:                                              ; preds = %350, %365
  %370 = getelementptr inbounds %"class.blink::CookieInit", %"class.blink::CookieInit"* %2, i64 0, i32 4
  %371 = load atomic i32, i32* %351 monotonic, align 4
  %372 = and i32 %371, 2
  %373 = icmp eq i32 %372, 0
  br i1 %373, label %374, label %386

374:                                              ; preds = %369
  %375 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %314, i64 0, i32 0
  %376 = load i32, i32* %375, align 4
  %377 = zext i32 %376 to i33
  %378 = call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %377, i33 1) #7
  %379 = extractvalue { i33, i1 } %378, 1
  %380 = extractvalue { i33, i1 } %378, 0
  %381 = icmp slt i33 %380, 0
  %382 = or i1 %379, %381
  br i1 %382, label %383, label %384, !prof !2

383:                                              ; preds = %374
  call void @llvm.trap() #7
  unreachable

384:                                              ; preds = %374
  %385 = trunc i33 %380 to i32
  store i32 %385, i32* %375, align 4
  br label %386

386:                                              ; preds = %367, %384, %369
  %387 = phi i1 [ false, %384 ], [ false, %369 ], [ true, %367 ]
  %388 = phi %"class.WTF::String"* [ %370, %384 ], [ %370, %369 ], [ %368, %367 ]
  %389 = ptrtoint %"class.WTF::StringImpl"* %314 to i64
  %390 = bitcast %"class.WTF::String"* %388 to i64*
  %391 = getelementptr inbounds %"class.blink::CookieInit", %"class.blink::CookieInit"* %2, i64 0, i32 4, i32 0, i32 0
  %392 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %391, align 8
  store i64 %389, i64* %390, align 8
  %393 = icmp eq %"class.WTF::StringImpl"* %392, null
  br i1 %393, label %407, label %394

394:                                              ; preds = %386
  %395 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %392, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %396 = load atomic i32, i32* %395 monotonic, align 4
  %397 = and i32 %396, 2
  %398 = icmp eq i32 %397, 0
  %399 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %392, i64 0, i32 0
  %400 = load i32, i32* %399, align 4
  br i1 %398, label %401, label %403

401:                                              ; preds = %394
  %402 = add i32 %400, -1
  store i32 %402, i32* %399, align 4
  br label %403

403:                                              ; preds = %401, %394
  %404 = phi i32 [ %402, %401 ], [ %400, %394 ]
  %405 = icmp eq i32 %404, 0
  br i1 %405, label %406, label %407

406:                                              ; preds = %403
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %392) #7
  br label %407

407:                                              ; preds = %386, %403, %406
  br i1 %387, label %421, label %408

408:                                              ; preds = %407
  %409 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %314, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %410 = load atomic i32, i32* %409 monotonic, align 4
  %411 = and i32 %410, 2
  %412 = icmp eq i32 %411, 0
  %413 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %314, i64 0, i32 0
  %414 = load i32, i32* %413, align 4
  br i1 %412, label %415, label %417

415:                                              ; preds = %408
  %416 = add i32 %414, -1
  store i32 %416, i32* %413, align 4
  br label %417

417:                                              ; preds = %415, %408
  %418 = phi i32 [ %416, %415 ], [ %414, %408 ]
  %419 = icmp eq i32 %418, 0
  br i1 %419, label %420, label %421

420:                                              ; preds = %417
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %314) #7
  br label %421

421:                                              ; preds = %420, %417, %407
  br i1 %315, label %435, label %422

422:                                              ; preds = %421
  %423 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %314, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %424 = load atomic i32, i32* %423 monotonic, align 4
  %425 = and i32 %424, 2
  %426 = icmp eq i32 %425, 0
  %427 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %314, i64 0, i32 0
  %428 = load i32, i32* %427, align 4
  br i1 %426, label %429, label %431

429:                                              ; preds = %422
  %430 = add i32 %428, -1
  store i32 %430, i32* %427, align 4
  br label %431

431:                                              ; preds = %429, %422
  %432 = phi i32 [ %430, %429 ], [ %428, %422 ]
  %433 = icmp eq i32 %432, 0
  br i1 %433, label %434, label %435

434:                                              ; preds = %431
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %314) #7
  br label %435

435:                                              ; preds = %421, %431, %434
  %436 = getelementptr inbounds %"class.v8::Eternal", %"class.v8::Eternal"* %43, i64 3, i32 0
  %437 = bitcast %"class.v8::Name"** %436 to %"class.v8::Value"**
  %438 = load %"class.v8::Value"*, %"class.v8::Value"** %437, align 8
  %439 = call %"class.v8::Value"* @_ZN2v86Object3GetENS_5LocalINS_7ContextEEENS1_INS_5ValueEEE(%"class.v8::Object"* nonnull %37, %"class.v8::Context"* %45, %"class.v8::Value"* %438) #7
  %440 = icmp eq %"class.v8::Value"* %439, null
  br i1 %440, label %455, label %461

441:                                              ; preds = %345
  br i1 %315, label %1044, label %442

442:                                              ; preds = %441
  %443 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %314, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %444 = load atomic i32, i32* %443 monotonic, align 4
  %445 = and i32 %444, 2
  %446 = icmp eq i32 %445, 0
  %447 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %314, i64 0, i32 0
  %448 = load i32, i32* %447, align 4
  br i1 %446, label %449, label %451

449:                                              ; preds = %442
  %450 = add i32 %448, -1
  store i32 %450, i32* %447, align 4
  br label %451

451:                                              ; preds = %449, %442
  %452 = phi i32 [ %450, %449 ], [ %448, %442 ]
  %453 = icmp eq i32 %452, 0
  br i1 %453, label %454, label %1044

454:                                              ; preds = %451
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %314) #7
  br label %1044

455:                                              ; preds = %435
  %456 = call %"class.v8::Value"* @_ZNK2v88TryCatch9ExceptionEv(%"class.v8::TryCatch"* nonnull %6) #7
  %457 = bitcast %"class.blink::ExceptionState"* %3 to void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)***
  %458 = load void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)**, void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)*** %457, align 8
  %459 = getelementptr inbounds void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)*, void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)** %458, i64 5
  %460 = load void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)*, void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)** %459, align 8
  call void %460(%"class.blink::ExceptionState"* %3, %"class.v8::Value"* %456) #7
  br label %1044

461:                                              ; preds = %435
  %462 = bitcast %"class.v8::Value"* %439 to i64*
  %463 = load i64, i64* %462, align 8
  %464 = and i64 %463, 3
  %465 = icmp eq i64 %464, 1
  br i1 %465, label %466, label %483

466:                                              ; preds = %461
  %467 = add i64 %463, -1
  %468 = inttoptr i64 %467 to i32*
  %469 = load i32, i32* %468, align 4
  %470 = and i64 %463, -4294967296
  %471 = zext i32 %469 to i64
  %472 = or i64 %470, %471
  %473 = add i64 %472, 7
  %474 = inttoptr i64 %473 to i16*
  %475 = load i16, i16* %474, align 2
  %476 = icmp eq i16 %475, 67
  br i1 %476, label %477, label %483

477:                                              ; preds = %466
  %478 = add i64 %463, 23
  %479 = inttoptr i64 %478 to i32*
  %480 = load i32, i32* %479, align 4
  %481 = and i32 %480, -2
  %482 = icmp eq i32 %481, 10
  br i1 %482, label %618, label %483

483:                                              ; preds = %466, %461, %477
  %484 = call %"class.WTF::StringImpl"* @_ZN5blink17NativeValueTraitsINS_16IDLUSVStringBaseILNS_20V8StringResourceModeE0EEEvE11NativeValueEPN2v87IsolateENS5_5LocalINS5_5ValueEEERNS_14ExceptionStateE(%"class.v8::Isolate"* %0, %"class.v8::Value"* nonnull %439, %"class.blink::ExceptionState"* dereferenceable(72) %3)
  %485 = icmp eq %"class.WTF::StringImpl"* %484, null
  br i1 %485, label %515, label %486

486:                                              ; preds = %483
  %487 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %484, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %488 = load atomic i32, i32* %487 monotonic, align 4
  %489 = and i32 %488, 2
  %490 = icmp eq i32 %489, 0
  %491 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %484, i64 0, i32 0
  %492 = load i32, i32* %491, align 4
  br i1 %490, label %493, label %503

493:                                              ; preds = %486
  %494 = zext i32 %492 to i33
  %495 = call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %494, i33 1) #7
  %496 = extractvalue { i33, i1 } %495, 1
  %497 = extractvalue { i33, i1 } %495, 0
  %498 = icmp slt i33 %497, 0
  %499 = or i1 %496, %498
  br i1 %499, label %500, label %501, !prof !2

500:                                              ; preds = %493
  call void @llvm.trap() #7
  unreachable

501:                                              ; preds = %493
  %502 = trunc i33 %497 to i32
  store i32 %502, i32* %491, align 4
  br label %503

503:                                              ; preds = %486, %501
  %504 = phi i32 [ %502, %501 ], [ %492, %486 ]
  %505 = load atomic i32, i32* %487 monotonic, align 4
  %506 = and i32 %505, 2
  %507 = icmp eq i32 %506, 0
  br i1 %507, label %508, label %511

508:                                              ; preds = %503
  %509 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %484, i64 0, i32 0
  %510 = add i32 %504, -1
  store i32 %510, i32* %509, align 4
  br label %511

511:                                              ; preds = %508, %503
  %512 = phi i32 [ %510, %508 ], [ %504, %503 ]
  %513 = icmp eq i32 %512, 0
  br i1 %513, label %514, label %515

514:                                              ; preds = %511
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %484) #7
  br label %515

515:                                              ; preds = %483, %511, %514
  %516 = load i32, i32* %346, align 8
  %517 = icmp eq i32 %516, 0
  br i1 %517, label %518, label %604

518:                                              ; preds = %515
  br i1 %485, label %536, label %519

519:                                              ; preds = %518
  %520 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %484, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %521 = load atomic i32, i32* %520 monotonic, align 4
  %522 = and i32 %521, 2
  %523 = icmp eq i32 %522, 0
  br i1 %523, label %524, label %538

524:                                              ; preds = %519
  %525 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %484, i64 0, i32 0
  %526 = load i32, i32* %525, align 4
  %527 = zext i32 %526 to i33
  %528 = call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %527, i33 1) #7
  %529 = extractvalue { i33, i1 } %528, 1
  %530 = extractvalue { i33, i1 } %528, 0
  %531 = icmp slt i33 %530, 0
  %532 = or i1 %529, %531
  br i1 %532, label %533, label %534, !prof !2

533:                                              ; preds = %524
  call void @llvm.trap() #7
  unreachable

534:                                              ; preds = %524
  %535 = trunc i33 %530 to i32
  store i32 %535, i32* %525, align 4
  br label %538

536:                                              ; preds = %518
  %537 = getelementptr inbounds %"class.blink::CookieInit", %"class.blink::CookieInit"* %2, i64 0, i32 5
  br label %555

538:                                              ; preds = %519, %534
  %539 = getelementptr inbounds %"class.blink::CookieInit", %"class.blink::CookieInit"* %2, i64 0, i32 5
  %540 = load atomic i32, i32* %520 monotonic, align 4
  %541 = and i32 %540, 2
  %542 = icmp eq i32 %541, 0
  br i1 %542, label %543, label %555

543:                                              ; preds = %538
  %544 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %484, i64 0, i32 0
  %545 = load i32, i32* %544, align 4
  %546 = zext i32 %545 to i33
  %547 = call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %546, i33 1) #7
  %548 = extractvalue { i33, i1 } %547, 1
  %549 = extractvalue { i33, i1 } %547, 0
  %550 = icmp slt i33 %549, 0
  %551 = or i1 %548, %550
  br i1 %551, label %552, label %553, !prof !2

552:                                              ; preds = %543
  call void @llvm.trap() #7
  unreachable

553:                                              ; preds = %543
  %554 = trunc i33 %549 to i32
  store i32 %554, i32* %544, align 4
  br label %555

555:                                              ; preds = %536, %553, %538
  %556 = phi i1 [ false, %553 ], [ false, %538 ], [ true, %536 ]
  %557 = phi %"class.WTF::String"* [ %539, %553 ], [ %539, %538 ], [ %537, %536 ]
  %558 = ptrtoint %"class.WTF::StringImpl"* %484 to i64
  %559 = bitcast %"class.WTF::String"* %557 to i64*
  %560 = getelementptr inbounds %"class.blink::CookieInit", %"class.blink::CookieInit"* %2, i64 0, i32 5, i32 0, i32 0
  %561 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %560, align 8
  store i64 %558, i64* %559, align 8
  %562 = icmp eq %"class.WTF::StringImpl"* %561, null
  br i1 %562, label %576, label %563

563:                                              ; preds = %555
  %564 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %561, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %565 = load atomic i32, i32* %564 monotonic, align 4
  %566 = and i32 %565, 2
  %567 = icmp eq i32 %566, 0
  %568 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %561, i64 0, i32 0
  %569 = load i32, i32* %568, align 4
  br i1 %567, label %570, label %572

570:                                              ; preds = %563
  %571 = add i32 %569, -1
  store i32 %571, i32* %568, align 4
  br label %572

572:                                              ; preds = %570, %563
  %573 = phi i32 [ %571, %570 ], [ %569, %563 ]
  %574 = icmp eq i32 %573, 0
  br i1 %574, label %575, label %576

575:                                              ; preds = %572
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %561) #7
  br label %576

576:                                              ; preds = %555, %572, %575
  br i1 %556, label %590, label %577

577:                                              ; preds = %576
  %578 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %484, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %579 = load atomic i32, i32* %578 monotonic, align 4
  %580 = and i32 %579, 2
  %581 = icmp eq i32 %580, 0
  %582 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %484, i64 0, i32 0
  %583 = load i32, i32* %582, align 4
  br i1 %581, label %584, label %586

584:                                              ; preds = %577
  %585 = add i32 %583, -1
  store i32 %585, i32* %582, align 4
  br label %586

586:                                              ; preds = %584, %577
  %587 = phi i32 [ %585, %584 ], [ %583, %577 ]
  %588 = icmp eq i32 %587, 0
  br i1 %588, label %589, label %590

589:                                              ; preds = %586
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %484) #7
  br label %590

590:                                              ; preds = %589, %586, %576
  br i1 %485, label %618, label %591

591:                                              ; preds = %590
  %592 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %484, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %593 = load atomic i32, i32* %592 monotonic, align 4
  %594 = and i32 %593, 2
  %595 = icmp eq i32 %594, 0
  %596 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %484, i64 0, i32 0
  %597 = load i32, i32* %596, align 4
  br i1 %595, label %598, label %600

598:                                              ; preds = %591
  %599 = add i32 %597, -1
  store i32 %599, i32* %596, align 4
  br label %600

600:                                              ; preds = %598, %591
  %601 = phi i32 [ %599, %598 ], [ %597, %591 ]
  %602 = icmp eq i32 %601, 0
  br i1 %602, label %603, label %618

603:                                              ; preds = %600
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %484) #7
  br label %618

604:                                              ; preds = %515
  br i1 %485, label %1044, label %605

605:                                              ; preds = %604
  %606 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %484, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %607 = load atomic i32, i32* %606 monotonic, align 4
  %608 = and i32 %607, 2
  %609 = icmp eq i32 %608, 0
  %610 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %484, i64 0, i32 0
  %611 = load i32, i32* %610, align 4
  br i1 %609, label %612, label %614

612:                                              ; preds = %605
  %613 = add i32 %611, -1
  store i32 %613, i32* %610, align 4
  br label %614

614:                                              ; preds = %612, %605
  %615 = phi i32 [ %613, %612 ], [ %611, %605 ]
  %616 = icmp eq i32 %615, 0
  br i1 %616, label %617, label %1044

617:                                              ; preds = %614
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %484) #7
  br label %1044

618:                                              ; preds = %603, %600, %590, %477
  %619 = getelementptr inbounds %"class.v8::Eternal", %"class.v8::Eternal"* %43, i64 4, i32 0
  %620 = bitcast %"class.v8::Name"** %619 to %"class.v8::Value"**
  %621 = load %"class.v8::Value"*, %"class.v8::Value"** %620, align 8
  %622 = call %"class.v8::Value"* @_ZN2v86Object3GetENS_5LocalINS_7ContextEEENS1_INS_5ValueEEE(%"class.v8::Object"* nonnull %37, %"class.v8::Context"* %45, %"class.v8::Value"* %621) #7
  %623 = icmp eq %"class.v8::Value"* %622, null
  br i1 %623, label %624, label %630

624:                                              ; preds = %618
  %625 = call %"class.v8::Value"* @_ZNK2v88TryCatch9ExceptionEv(%"class.v8::TryCatch"* nonnull %6) #7
  %626 = bitcast %"class.blink::ExceptionState"* %3 to void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)***
  %627 = load void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)**, void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)*** %626, align 8
  %628 = getelementptr inbounds void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)*, void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)** %627, i64 5
  %629 = load void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)*, void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)** %628, align 8
  call void %629(%"class.blink::ExceptionState"* %3, %"class.v8::Value"* %625) #7
  br label %1044

630:                                              ; preds = %618
  %631 = bitcast %"class.v8::Value"* %622 to i64*
  %632 = load i64, i64* %631, align 8
  %633 = and i64 %632, 3
  %634 = icmp eq i64 %633, 1
  br i1 %634, label %635, label %652

635:                                              ; preds = %630
  %636 = add i64 %632, -1
  %637 = inttoptr i64 %636 to i32*
  %638 = load i32, i32* %637, align 4
  %639 = and i64 %632, -4294967296
  %640 = zext i32 %638 to i64
  %641 = or i64 %639, %640
  %642 = add i64 %641, 7
  %643 = inttoptr i64 %642 to i16*
  %644 = load i16, i16* %643, align 2
  %645 = icmp eq i16 %644, 67
  br i1 %645, label %646, label %652

646:                                              ; preds = %635
  %647 = add i64 %632, 23
  %648 = inttoptr i64 %647 to i32*
  %649 = load i32, i32* %648, align 4
  %650 = and i32 %649, -2
  %651 = icmp eq i32 %650, 10
  br i1 %651, label %874, label %652

652:                                              ; preds = %635, %630, %646
  %653 = bitcast %"class.blink::V8StringResource.5"* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 160, i8* nonnull %653) #7
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %653, i8 -86, i64 152, i1 false)
  %654 = getelementptr inbounds %"class.blink::V8StringResource.5", %"class.blink::V8StringResource.5"* %7, i64 0, i32 0, i32 0
  store %"class.v8::Value"* %622, %"class.v8::Value"** %654, align 8
  %655 = getelementptr inbounds %"class.blink::V8StringResource.5", %"class.blink::V8StringResource.5"* %7, i64 0, i32 1
  store i32 0, i32* %655, align 8
  %656 = getelementptr inbounds %"class.blink::V8StringResource.5", %"class.blink::V8StringResource.5"* %7, i64 0, i32 2, i32 0, i32 0
  store %"class.WTF::StringImpl"* null, %"class.WTF::StringImpl"** %656, align 8
  %657 = getelementptr inbounds %"class.blink::V8StringResource.5", %"class.blink::V8StringResource.5"* %7, i64 0, i32 3, i32 1
  %658 = bitcast %"class.std::__1::unique_ptr"* %657 to i64*
  store i64 0, i64* %658, align 8
  %659 = call zeroext i1 @_ZN5blink16V8StringResourceILNS_20V8StringResourceModeE0EE11PrepareFastEv(%"class.blink::V8StringResource.5"* nonnull %7) #7
  br i1 %659, label %676, label %660

660:                                              ; preds = %652
  %661 = call %"class.v8::Isolate"* @_ZN2v87Isolate10GetCurrentEv() #7
  %662 = bitcast %"class.v8::TryCatch"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 48, i8* nonnull %662) #7
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %662, i8 -86, i64 48, i1 false) #7
  call void @_ZN2v88TryCatchC1EPNS_7IsolateE(%"class.v8::TryCatch"* nonnull %5, %"class.v8::Isolate"* %661) #7
  %663 = load %"class.v8::Value"*, %"class.v8::Value"** %654, align 8
  %664 = call %"class.v8::Context"* @_ZN2v87Isolate17GetCurrentContextEv(%"class.v8::Isolate"* %661) #7
  %665 = call %"class.v8::String"* @_ZNK2v85Value8ToStringENS_5LocalINS_7ContextEEE(%"class.v8::Value"* %663, %"class.v8::Context"* %664) #7
  %666 = ptrtoint %"class.v8::String"* %665 to i64
  %667 = bitcast %"class.blink::V8StringResource.5"* %7 to i64*
  store i64 %666, i64* %667, align 8
  %668 = icmp eq %"class.v8::String"* %665, null
  br i1 %668, label %670, label %669

669:                                              ; preds = %660
  call void @_ZN2v88TryCatchD1Ev(%"class.v8::TryCatch"* nonnull %5) #7
  call void @llvm.lifetime.end.p0i8(i64 48, i8* nonnull %662) #7
  br label %676

670:                                              ; preds = %660
  %671 = call %"class.v8::Value"* @_ZNK2v88TryCatch9ExceptionEv(%"class.v8::TryCatch"* nonnull %5) #7
  %672 = bitcast %"class.blink::ExceptionState"* %3 to void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)***
  %673 = load void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)**, void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)*** %672, align 8
  %674 = getelementptr inbounds void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)*, void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)** %673, i64 5
  %675 = load void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)*, void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)** %674, align 8
  call void %675(%"class.blink::ExceptionState"* %3, %"class.v8::Value"* %671) #7
  call void @_ZN2v88TryCatchD1Ev(%"class.v8::TryCatch"* nonnull %5) #7
  call void @llvm.lifetime.end.p0i8(i64 48, i8* nonnull %662) #7
  br label %852

676:                                              ; preds = %652, %669
  %677 = bitcast %"class.WTF::String"* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %677) #7
  %678 = load %"class.v8::Value"*, %"class.v8::Value"** %654, align 8
  %679 = icmp eq %"class.v8::Value"* %678, null
  br i1 %679, label %684, label %680, !prof !2

680:                                              ; preds = %676
  %681 = bitcast %"class.v8::Value"* %678 to %"class.v8::String"*
  %682 = load i32, i32* %655, align 8
  %683 = call %"class.WTF::StringImpl"* @_ZN5blink13ToBlinkStringIN3WTF6StringEEET_N2v85LocalINS4_6StringEEENS_12ExternalModeE(%"class.v8::String"* nonnull %681, i32 %682) #7
  br label %704

684:                                              ; preds = %676
  %685 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %656, align 8
  %686 = icmp eq %"class.WTF::StringImpl"* %685, null
  br i1 %686, label %704, label %687

687:                                              ; preds = %684
  %688 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %685, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %689 = load atomic i32, i32* %688 monotonic, align 4
  %690 = and i32 %689, 2
  %691 = icmp eq i32 %690, 0
  br i1 %691, label %692, label %704

692:                                              ; preds = %687
  %693 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %685, i64 0, i32 0
  %694 = load i32, i32* %693, align 4
  %695 = zext i32 %694 to i33
  %696 = call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %695, i33 1) #7
  %697 = extractvalue { i33, i1 } %696, 1
  %698 = extractvalue { i33, i1 } %696, 0
  %699 = icmp slt i33 %698, 0
  %700 = or i1 %697, %699
  br i1 %700, label %701, label %702, !prof !2

701:                                              ; preds = %692
  call void @llvm.trap() #7
  unreachable

702:                                              ; preds = %692
  %703 = trunc i33 %698 to i32
  store i32 %703, i32* %693, align 4
  br label %704

704:                                              ; preds = %680, %684, %687, %702
  %705 = phi %"class.WTF::StringImpl"* [ %683, %680 ], [ null, %684 ], [ %685, %687 ], [ %685, %702 ]
  %706 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %8, i64 0, i32 0, i32 0
  store %"class.WTF::StringImpl"* %705, %"class.WTF::StringImpl"** %706, align 8
  %707 = bitcast %"class.WTF::String"* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %707) #7
  call void @_ZN3WTF6StringC2EPKcm(%"class.WTF::String"* nonnull %9, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.6, i64 0, i64 0), i64 14) #7
  %708 = call zeroext i1 @_ZN5blink11IsValidEnumERKN3WTF6StringEPKPKcmS3_RNS_14ExceptionStateE(%"class.WTF::String"* nonnull dereferenceable(8) %8, i8** getelementptr inbounds ([3 x i8*], [3 x i8*]* @_ZZN5blink12V8CookieInit6ToImplEPN2v87IsolateENS1_5LocalINS1_5ValueEEEPNS_10CookieInitERNS_14ExceptionStateEE12kValidValues, i64 0, i64 0), i64 3, %"class.WTF::String"* nonnull dereferenceable(8) %9, %"class.blink::ExceptionState"* dereferenceable(72) %3) #7
  %709 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %9, i64 0, i32 0, i32 0
  %710 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %709, align 8
  %711 = icmp eq %"class.WTF::StringImpl"* %710, null
  br i1 %711, label %725, label %712

712:                                              ; preds = %704
  %713 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %710, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %714 = load atomic i32, i32* %713 monotonic, align 4
  %715 = and i32 %714, 2
  %716 = icmp eq i32 %715, 0
  %717 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %710, i64 0, i32 0
  %718 = load i32, i32* %717, align 4
  br i1 %716, label %719, label %721

719:                                              ; preds = %712
  %720 = add i32 %718, -1
  store i32 %720, i32* %717, align 4
  br label %721

721:                                              ; preds = %719, %712
  %722 = phi i32 [ %720, %719 ], [ %718, %712 ]
  %723 = icmp eq i32 %722, 0
  br i1 %723, label %724, label %725

724:                                              ; preds = %721
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %710) #7
  br label %725

725:                                              ; preds = %704, %721, %724
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %707) #7
  %726 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %706, align 8
  %727 = icmp eq %"class.WTF::StringImpl"* %726, null
  br i1 %727, label %741, label %728

728:                                              ; preds = %725
  %729 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %726, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %730 = load atomic i32, i32* %729 monotonic, align 4
  %731 = and i32 %730, 2
  %732 = icmp eq i32 %731, 0
  %733 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %726, i64 0, i32 0
  %734 = load i32, i32* %733, align 4
  br i1 %732, label %735, label %737

735:                                              ; preds = %728
  %736 = add i32 %734, -1
  store i32 %736, i32* %733, align 4
  br label %737

737:                                              ; preds = %735, %728
  %738 = phi i32 [ %736, %735 ], [ %734, %728 ]
  %739 = icmp eq i32 %738, 0
  br i1 %739, label %740, label %741

740:                                              ; preds = %737
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %726) #7
  br label %741

741:                                              ; preds = %725, %737, %740
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %677) #7
  br i1 %708, label %742, label %852

742:                                              ; preds = %741
  %743 = load %"class.v8::Value"*, %"class.v8::Value"** %654, align 8
  %744 = icmp eq %"class.v8::Value"* %743, null
  br i1 %744, label %745, label %769, !prof !2

745:                                              ; preds = %742
  %746 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %656, align 8
  %747 = icmp eq %"class.WTF::StringImpl"* %746, null
  br i1 %747, label %748, label %750

748:                                              ; preds = %745
  %749 = getelementptr inbounds %"class.blink::CookieInit", %"class.blink::CookieInit"* %2, i64 0, i32 6
  br label %794

750:                                              ; preds = %745
  %751 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %746, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %752 = load atomic i32, i32* %751 monotonic, align 4
  %753 = and i32 %752, 2
  %754 = icmp eq i32 %753, 0
  br i1 %754, label %755, label %767

755:                                              ; preds = %750
  %756 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %746, i64 0, i32 0
  %757 = load i32, i32* %756, align 4
  %758 = zext i32 %757 to i33
  %759 = call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %758, i33 1) #7
  %760 = extractvalue { i33, i1 } %759, 1
  %761 = extractvalue { i33, i1 } %759, 0
  %762 = icmp slt i33 %761, 0
  %763 = or i1 %760, %762
  br i1 %763, label %764, label %765, !prof !2

764:                                              ; preds = %755
  call void @llvm.trap() #7
  unreachable

765:                                              ; preds = %755
  %766 = trunc i33 %761 to i32
  store i32 %766, i32* %756, align 4
  br label %767

767:                                              ; preds = %750, %765
  %768 = getelementptr inbounds %"class.blink::CookieInit", %"class.blink::CookieInit"* %2, i64 0, i32 6
  br label %775

769:                                              ; preds = %742
  %770 = bitcast %"class.v8::Value"* %743 to %"class.v8::String"*
  %771 = load i32, i32* %655, align 8
  %772 = call %"class.WTF::StringImpl"* @_ZN5blink13ToBlinkStringIN3WTF6StringEEET_N2v85LocalINS4_6StringEEENS_12ExternalModeE(%"class.v8::String"* nonnull %770, i32 %771) #7
  %773 = getelementptr inbounds %"class.blink::CookieInit", %"class.blink::CookieInit"* %2, i64 0, i32 6
  %774 = icmp eq %"class.WTF::StringImpl"* %772, null
  br i1 %774, label %794, label %775

775:                                              ; preds = %767, %769
  %776 = phi %"class.WTF::String"* [ %768, %767 ], [ %773, %769 ]
  %777 = phi %"class.WTF::StringImpl"* [ %746, %767 ], [ %772, %769 ]
  %778 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %777, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %779 = load atomic i32, i32* %778 monotonic, align 4
  %780 = and i32 %779, 2
  %781 = icmp eq i32 %780, 0
  br i1 %781, label %782, label %794

782:                                              ; preds = %775
  %783 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %777, i64 0, i32 0
  %784 = load i32, i32* %783, align 4
  %785 = zext i32 %784 to i33
  %786 = call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %785, i33 1) #7
  %787 = extractvalue { i33, i1 } %786, 1
  %788 = extractvalue { i33, i1 } %786, 0
  %789 = icmp slt i33 %788, 0
  %790 = or i1 %787, %789
  br i1 %790, label %791, label %792, !prof !2

791:                                              ; preds = %782
  call void @llvm.trap() #7
  unreachable

792:                                              ; preds = %782
  %793 = trunc i33 %788 to i32
  store i32 %793, i32* %783, align 4
  br label %794

794:                                              ; preds = %748, %792, %775, %769
  %795 = phi i1 [ false, %792 ], [ false, %775 ], [ true, %769 ], [ true, %748 ]
  %796 = phi %"class.WTF::String"* [ %776, %792 ], [ %776, %775 ], [ %773, %769 ], [ %749, %748 ]
  %797 = phi %"class.WTF::StringImpl"* [ %777, %792 ], [ %777, %775 ], [ null, %769 ], [ null, %748 ]
  %798 = ptrtoint %"class.WTF::StringImpl"* %797 to i64
  %799 = bitcast %"class.WTF::String"* %796 to i64*
  %800 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %796, i64 0, i32 0, i32 0
  %801 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %800, align 8
  store i64 %798, i64* %799, align 8
  %802 = icmp eq %"class.WTF::StringImpl"* %801, null
  br i1 %802, label %816, label %803

803:                                              ; preds = %794
  %804 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %801, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %805 = load atomic i32, i32* %804 monotonic, align 4
  %806 = and i32 %805, 2
  %807 = icmp eq i32 %806, 0
  %808 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %801, i64 0, i32 0
  %809 = load i32, i32* %808, align 4
  br i1 %807, label %810, label %812

810:                                              ; preds = %803
  %811 = add i32 %809, -1
  store i32 %811, i32* %808, align 4
  br label %812

812:                                              ; preds = %810, %803
  %813 = phi i32 [ %811, %810 ], [ %809, %803 ]
  %814 = icmp eq i32 %813, 0
  br i1 %814, label %815, label %816

815:                                              ; preds = %812
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %801) #7
  br label %816

816:                                              ; preds = %794, %812, %815
  br i1 %795, label %830, label %817

817:                                              ; preds = %816
  %818 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %797, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %819 = load atomic i32, i32* %818 monotonic, align 4
  %820 = and i32 %819, 2
  %821 = icmp eq i32 %820, 0
  %822 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %797, i64 0, i32 0
  %823 = load i32, i32* %822, align 4
  br i1 %821, label %824, label %826

824:                                              ; preds = %817
  %825 = add i32 %823, -1
  store i32 %825, i32* %822, align 4
  br label %826

826:                                              ; preds = %824, %817
  %827 = phi i32 [ %825, %824 ], [ %823, %817 ]
  %828 = icmp eq i32 %827, 0
  br i1 %828, label %829, label %830

829:                                              ; preds = %826
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %797) #7
  br label %830

830:                                              ; preds = %816, %826, %829
  %831 = getelementptr inbounds %"class.blink::V8StringResource.5", %"class.blink::V8StringResource.5"* %7, i64 0, i32 3, i32 1, i32 0, i32 0, i32 0
  %832 = load i8*, i8** %831, align 8
  store i8* null, i8** %831, align 8
  %833 = icmp eq i8* %832, null
  br i1 %833, label %835, label %834

834:                                              ; preds = %830
  call void @_ZN3WTF10Partitions10BufferFreeEPv(i8* nonnull %832) #7
  br label %835

835:                                              ; preds = %834, %830
  %836 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %656, align 8
  %837 = icmp eq %"class.WTF::StringImpl"* %836, null
  br i1 %837, label %851, label %838

838:                                              ; preds = %835
  %839 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %836, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %840 = load atomic i32, i32* %839 monotonic, align 4
  %841 = and i32 %840, 2
  %842 = icmp eq i32 %841, 0
  %843 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %836, i64 0, i32 0
  %844 = load i32, i32* %843, align 4
  br i1 %842, label %845, label %847

845:                                              ; preds = %838
  %846 = add i32 %844, -1
  store i32 %846, i32* %843, align 4
  br label %847

847:                                              ; preds = %845, %838
  %848 = phi i32 [ %846, %845 ], [ %844, %838 ]
  %849 = icmp eq i32 %848, 0
  br i1 %849, label %850, label %851

850:                                              ; preds = %847
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %836) #7
  br label %851

851:                                              ; preds = %835, %847, %850
  call void @llvm.lifetime.end.p0i8(i64 160, i8* nonnull %653) #7
  br label %874

852:                                              ; preds = %670, %741
  %853 = getelementptr inbounds %"class.blink::V8StringResource.5", %"class.blink::V8StringResource.5"* %7, i64 0, i32 3, i32 1, i32 0, i32 0, i32 0
  %854 = load i8*, i8** %853, align 8
  store i8* null, i8** %853, align 8
  %855 = icmp eq i8* %854, null
  br i1 %855, label %857, label %856

856:                                              ; preds = %852
  call void @_ZN3WTF10Partitions10BufferFreeEPv(i8* nonnull %854) #7
  br label %857

857:                                              ; preds = %856, %852
  %858 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %656, align 8
  %859 = icmp eq %"class.WTF::StringImpl"* %858, null
  br i1 %859, label %873, label %860

860:                                              ; preds = %857
  %861 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %858, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %862 = load atomic i32, i32* %861 monotonic, align 4
  %863 = and i32 %862, 2
  %864 = icmp eq i32 %863, 0
  %865 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %858, i64 0, i32 0
  %866 = load i32, i32* %865, align 4
  br i1 %864, label %867, label %869

867:                                              ; preds = %860
  %868 = add i32 %866, -1
  store i32 %868, i32* %865, align 4
  br label %869

869:                                              ; preds = %867, %860
  %870 = phi i32 [ %868, %867 ], [ %866, %860 ]
  %871 = icmp eq i32 %870, 0
  br i1 %871, label %872, label %873

872:                                              ; preds = %869
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %858) #7
  br label %873

873:                                              ; preds = %857, %869, %872
  call void @llvm.lifetime.end.p0i8(i64 160, i8* nonnull %653) #7
  br label %1044

874:                                              ; preds = %851, %646
  %875 = getelementptr inbounds %"class.v8::Eternal", %"class.v8::Eternal"* %43, i64 5, i32 0
  %876 = bitcast %"class.v8::Name"** %875 to %"class.v8::Value"**
  %877 = load %"class.v8::Value"*, %"class.v8::Value"** %876, align 8
  %878 = call %"class.v8::Value"* @_ZN2v86Object3GetENS_5LocalINS_7ContextEEENS1_INS_5ValueEEE(%"class.v8::Object"* nonnull %37, %"class.v8::Context"* %45, %"class.v8::Value"* %877) #7
  %879 = icmp eq %"class.v8::Value"* %878, null
  br i1 %879, label %880, label %886

880:                                              ; preds = %874
  %881 = call %"class.v8::Value"* @_ZNK2v88TryCatch9ExceptionEv(%"class.v8::TryCatch"* nonnull %6) #7
  %882 = bitcast %"class.blink::ExceptionState"* %3 to void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)***
  %883 = load void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)**, void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)*** %882, align 8
  %884 = getelementptr inbounds void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)*, void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)** %883, i64 5
  %885 = load void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)*, void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)** %884, align 8
  call void %885(%"class.blink::ExceptionState"* %3, %"class.v8::Value"* %881) #7
  br label %1044

886:                                              ; preds = %874
  %887 = bitcast %"class.v8::Value"* %878 to i64*
  %888 = load i64, i64* %887, align 8
  %889 = and i64 %888, 3
  %890 = icmp eq i64 %889, 1
  br i1 %890, label %891, label %909

891:                                              ; preds = %886
  %892 = add i64 %888, -1
  %893 = inttoptr i64 %892 to i32*
  %894 = load i32, i32* %893, align 4
  %895 = and i64 %888, -4294967296
  %896 = zext i32 %894 to i64
  %897 = or i64 %895, %896
  %898 = add i64 %897, 7
  %899 = inttoptr i64 %898 to i16*
  %900 = load i16, i16* %899, align 2
  %901 = icmp eq i16 %900, 67
  br i1 %901, label %902, label %909

902:                                              ; preds = %891
  %903 = add i64 %888, 23
  %904 = inttoptr i64 %903 to i32*
  %905 = load i32, i32* %904, align 4
  %906 = and i32 %905, -2
  %907 = icmp eq i32 %906, 10
  br i1 %907, label %908, label %909

908:                                              ; preds = %902
  call void @_ZN5blink14ExceptionState14ThrowTypeErrorEPKc(%"class.blink::ExceptionState"* %3, i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.7, i64 0, i64 0)) #7
  br label %1044

909:                                              ; preds = %891, %886, %902
  %910 = call %"class.WTF::StringImpl"* @_ZN5blink17NativeValueTraitsINS_16IDLUSVStringBaseILNS_20V8StringResourceModeE0EEEvE11NativeValueEPN2v87IsolateENS5_5LocalINS5_5ValueEEERNS_14ExceptionStateE(%"class.v8::Isolate"* %0, %"class.v8::Value"* nonnull %878, %"class.blink::ExceptionState"* dereferenceable(72) %3)
  %911 = icmp eq %"class.WTF::StringImpl"* %910, null
  br i1 %911, label %941, label %912

912:                                              ; preds = %909
  %913 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %910, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %914 = load atomic i32, i32* %913 monotonic, align 4
  %915 = and i32 %914, 2
  %916 = icmp eq i32 %915, 0
  %917 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %910, i64 0, i32 0
  %918 = load i32, i32* %917, align 4
  br i1 %916, label %919, label %929

919:                                              ; preds = %912
  %920 = zext i32 %918 to i33
  %921 = call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %920, i33 1) #7
  %922 = extractvalue { i33, i1 } %921, 1
  %923 = extractvalue { i33, i1 } %921, 0
  %924 = icmp slt i33 %923, 0
  %925 = or i1 %922, %924
  br i1 %925, label %926, label %927, !prof !2

926:                                              ; preds = %919
  call void @llvm.trap() #7
  unreachable

927:                                              ; preds = %919
  %928 = trunc i33 %923 to i32
  store i32 %928, i32* %917, align 4
  br label %929

929:                                              ; preds = %912, %927
  %930 = phi i32 [ %928, %927 ], [ %918, %912 ]
  %931 = load atomic i32, i32* %913 monotonic, align 4
  %932 = and i32 %931, 2
  %933 = icmp eq i32 %932, 0
  br i1 %933, label %934, label %937

934:                                              ; preds = %929
  %935 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %910, i64 0, i32 0
  %936 = add i32 %930, -1
  store i32 %936, i32* %935, align 4
  br label %937

937:                                              ; preds = %934, %929
  %938 = phi i32 [ %936, %934 ], [ %930, %929 ]
  %939 = icmp eq i32 %938, 0
  br i1 %939, label %940, label %941

940:                                              ; preds = %937
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %910) #7
  br label %941

941:                                              ; preds = %909, %937, %940
  %942 = load i32, i32* %346, align 8
  %943 = icmp eq i32 %942, 0
  br i1 %943, label %944, label %1030

944:                                              ; preds = %941
  br i1 %911, label %962, label %945

945:                                              ; preds = %944
  %946 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %910, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %947 = load atomic i32, i32* %946 monotonic, align 4
  %948 = and i32 %947, 2
  %949 = icmp eq i32 %948, 0
  br i1 %949, label %950, label %964

950:                                              ; preds = %945
  %951 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %910, i64 0, i32 0
  %952 = load i32, i32* %951, align 4
  %953 = zext i32 %952 to i33
  %954 = call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %953, i33 1) #7
  %955 = extractvalue { i33, i1 } %954, 1
  %956 = extractvalue { i33, i1 } %954, 0
  %957 = icmp slt i33 %956, 0
  %958 = or i1 %955, %957
  br i1 %958, label %959, label %960, !prof !2

959:                                              ; preds = %950
  call void @llvm.trap() #7
  unreachable

960:                                              ; preds = %950
  %961 = trunc i33 %956 to i32
  store i32 %961, i32* %951, align 4
  br label %964

962:                                              ; preds = %944
  %963 = getelementptr inbounds %"class.blink::CookieInit", %"class.blink::CookieInit"* %2, i64 0, i32 7
  br label %981

964:                                              ; preds = %945, %960
  %965 = getelementptr inbounds %"class.blink::CookieInit", %"class.blink::CookieInit"* %2, i64 0, i32 7
  %966 = load atomic i32, i32* %946 monotonic, align 4
  %967 = and i32 %966, 2
  %968 = icmp eq i32 %967, 0
  br i1 %968, label %969, label %981

969:                                              ; preds = %964
  %970 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %910, i64 0, i32 0
  %971 = load i32, i32* %970, align 4
  %972 = zext i32 %971 to i33
  %973 = call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %972, i33 1) #7
  %974 = extractvalue { i33, i1 } %973, 1
  %975 = extractvalue { i33, i1 } %973, 0
  %976 = icmp slt i33 %975, 0
  %977 = or i1 %974, %976
  br i1 %977, label %978, label %979, !prof !2

978:                                              ; preds = %969
  call void @llvm.trap() #7
  unreachable

979:                                              ; preds = %969
  %980 = trunc i33 %975 to i32
  store i32 %980, i32* %970, align 4
  br label %981

981:                                              ; preds = %962, %979, %964
  %982 = phi i1 [ false, %979 ], [ false, %964 ], [ true, %962 ]
  %983 = phi %"class.WTF::String"* [ %965, %979 ], [ %965, %964 ], [ %963, %962 ]
  %984 = ptrtoint %"class.WTF::StringImpl"* %910 to i64
  %985 = bitcast %"class.WTF::String"* %983 to i64*
  %986 = getelementptr inbounds %"class.blink::CookieInit", %"class.blink::CookieInit"* %2, i64 0, i32 7, i32 0, i32 0
  %987 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %986, align 8
  store i64 %984, i64* %985, align 8
  %988 = icmp eq %"class.WTF::StringImpl"* %987, null
  br i1 %988, label %1002, label %989

989:                                              ; preds = %981
  %990 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %987, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %991 = load atomic i32, i32* %990 monotonic, align 4
  %992 = and i32 %991, 2
  %993 = icmp eq i32 %992, 0
  %994 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %987, i64 0, i32 0
  %995 = load i32, i32* %994, align 4
  br i1 %993, label %996, label %998

996:                                              ; preds = %989
  %997 = add i32 %995, -1
  store i32 %997, i32* %994, align 4
  br label %998

998:                                              ; preds = %996, %989
  %999 = phi i32 [ %997, %996 ], [ %995, %989 ]
  %1000 = icmp eq i32 %999, 0
  br i1 %1000, label %1001, label %1002

1001:                                             ; preds = %998
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %987) #7
  br label %1002

1002:                                             ; preds = %981, %998, %1001
  br i1 %982, label %1016, label %1003

1003:                                             ; preds = %1002
  %1004 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %910, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %1005 = load atomic i32, i32* %1004 monotonic, align 4
  %1006 = and i32 %1005, 2
  %1007 = icmp eq i32 %1006, 0
  %1008 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %910, i64 0, i32 0
  %1009 = load i32, i32* %1008, align 4
  br i1 %1007, label %1010, label %1012

1010:                                             ; preds = %1003
  %1011 = add i32 %1009, -1
  store i32 %1011, i32* %1008, align 4
  br label %1012

1012:                                             ; preds = %1010, %1003
  %1013 = phi i32 [ %1011, %1010 ], [ %1009, %1003 ]
  %1014 = icmp eq i32 %1013, 0
  br i1 %1014, label %1015, label %1016

1015:                                             ; preds = %1012
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %910) #7
  br label %1016

1016:                                             ; preds = %1015, %1012, %1002
  br i1 %911, label %1044, label %1017

1017:                                             ; preds = %1016
  %1018 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %910, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %1019 = load atomic i32, i32* %1018 monotonic, align 4
  %1020 = and i32 %1019, 2
  %1021 = icmp eq i32 %1020, 0
  %1022 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %910, i64 0, i32 0
  %1023 = load i32, i32* %1022, align 4
  br i1 %1021, label %1024, label %1026

1024:                                             ; preds = %1017
  %1025 = add i32 %1023, -1
  store i32 %1025, i32* %1022, align 4
  br label %1026

1026:                                             ; preds = %1024, %1017
  %1027 = phi i32 [ %1025, %1024 ], [ %1023, %1017 ]
  %1028 = icmp eq i32 %1027, 0
  br i1 %1028, label %1029, label %1044

1029:                                             ; preds = %1026
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %910) #7
  br label %1044

1030:                                             ; preds = %941
  br i1 %911, label %1044, label %1031

1031:                                             ; preds = %1030
  %1032 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %910, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %1033 = load atomic i32, i32* %1032 monotonic, align 4
  %1034 = and i32 %1033, 2
  %1035 = icmp eq i32 %1034, 0
  %1036 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %910, i64 0, i32 0
  %1037 = load i32, i32* %1036, align 4
  br i1 %1035, label %1038, label %1040

1038:                                             ; preds = %1031
  %1039 = add i32 %1037, -1
  store i32 %1039, i32* %1036, align 4
  br label %1040

1040:                                             ; preds = %1038, %1031
  %1041 = phi i32 [ %1039, %1038 ], [ %1037, %1031 ]
  %1042 = icmp eq i32 %1041, 0
  br i1 %1042, label %1043, label %1044

1043:                                             ; preds = %1040
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %910) #7
  br label %1044

1044:                                             ; preds = %1043, %1040, %1030, %1029, %1026, %1016, %617, %614, %604, %454, %451, %441, %213, %210, %200, %268, %220, %455, %880, %908, %873, %624, %312, %284, %50
  call void @_ZN2v88TryCatchD1Ev(%"class.v8::TryCatch"* nonnull %6) #7
  call void @llvm.lifetime.end.p0i8(i64 48, i8* nonnull %44) #7
  br label %1045

1045:                                             ; preds = %1044, %32, %35
  ret void
}

declare void @_ZN5blink14ExceptionState14ThrowTypeErrorEPKc(%"class.blink::ExceptionState"*, i8*) local_unnamed_addr #1

declare zeroext i1 @_ZNK2v85Value8IsObjectEv(%"class.v8::Value"*) local_unnamed_addr #1

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #2

declare void @_ZN2v88TryCatchC1EPNS_7IsolateE(%"class.v8::TryCatch"*, %"class.v8::Isolate"*) unnamed_addr #1

declare %"class.v8::Context"* @_ZN2v87Isolate17GetCurrentContextEv(%"class.v8::Isolate"*) local_unnamed_addr #1

declare %"class.v8::Value"* @_ZN2v86Object3GetENS_5LocalINS_7ContextEEENS1_INS_5ValueEEE(%"class.v8::Object"*, %"class.v8::Context"*, %"class.v8::Value"*) local_unnamed_addr #1

declare %"class.v8::Value"* @_ZNK2v88TryCatch9ExceptionEv(%"class.v8::TryCatch"*) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden %"class.WTF::StringImpl"* @_ZN5blink17NativeValueTraitsINS_16IDLUSVStringBaseILNS_20V8StringResourceModeE3EEEvE11NativeValueEPN2v87IsolateENS5_5LocalINS5_5ValueEEERNS_14ExceptionStateE(%"class.v8::Isolate"*, %"class.v8::Value"*, %"class.blink::ExceptionState"* dereferenceable(72)) local_unnamed_addr #0 comdat align 2 {
  %4 = alloca %"class.v8::TryCatch", align 8
  %5 = alloca %"class.blink::V8StringResource", align 8
  %6 = bitcast %"class.blink::V8StringResource"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 160, i8* nonnull %6) #7
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %6, i8 -86, i64 152, i1 false)
  %7 = getelementptr inbounds %"class.blink::V8StringResource", %"class.blink::V8StringResource"* %5, i64 0, i32 0, i32 0
  store %"class.v8::Value"* %1, %"class.v8::Value"** %7, align 8
  %8 = getelementptr inbounds %"class.blink::V8StringResource", %"class.blink::V8StringResource"* %5, i64 0, i32 1
  store i32 0, i32* %8, align 8
  %9 = getelementptr inbounds %"class.blink::V8StringResource", %"class.blink::V8StringResource"* %5, i64 0, i32 2, i32 0, i32 0
  store %"class.WTF::StringImpl"* null, %"class.WTF::StringImpl"** %9, align 8
  %10 = getelementptr inbounds %"class.blink::V8StringResource", %"class.blink::V8StringResource"* %5, i64 0, i32 3, i32 1
  %11 = bitcast %"class.std::__1::unique_ptr"* %10 to i64*
  store i64 0, i64* %11, align 8
  %12 = call zeroext i1 @_ZN5blink16V8StringResourceILNS_20V8StringResourceModeE3EE11PrepareFastEv(%"class.blink::V8StringResource"* nonnull %5) #7
  br i1 %12, label %28, label %13

13:                                               ; preds = %3
  %14 = bitcast %"class.v8::TryCatch"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 48, i8* nonnull %14) #7
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %14, i8 -86, i64 48, i1 false) #7
  call void @_ZN2v88TryCatchC1EPNS_7IsolateE(%"class.v8::TryCatch"* nonnull %4, %"class.v8::Isolate"* %0) #7
  %15 = load %"class.v8::Value"*, %"class.v8::Value"** %7, align 8
  %16 = call %"class.v8::Context"* @_ZN2v87Isolate17GetCurrentContextEv(%"class.v8::Isolate"* %0) #7
  %17 = call %"class.v8::String"* @_ZNK2v85Value8ToStringENS_5LocalINS_7ContextEEE(%"class.v8::Value"* %15, %"class.v8::Context"* %16) #7
  %18 = ptrtoint %"class.v8::String"* %17 to i64
  %19 = bitcast %"class.blink::V8StringResource"* %5 to i64*
  store i64 %18, i64* %19, align 8
  %20 = icmp eq %"class.v8::String"* %17, null
  br i1 %20, label %22, label %21

21:                                               ; preds = %13
  call void @_ZN2v88TryCatchD1Ev(%"class.v8::TryCatch"* nonnull %4) #7
  call void @llvm.lifetime.end.p0i8(i64 48, i8* nonnull %14) #7
  br label %28

22:                                               ; preds = %13
  %23 = call %"class.v8::Value"* @_ZNK2v88TryCatch9ExceptionEv(%"class.v8::TryCatch"* nonnull %4) #7
  %24 = bitcast %"class.blink::ExceptionState"* %2 to void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)***
  %25 = load void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)**, void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)*** %24, align 8
  %26 = getelementptr inbounds void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)*, void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)** %25, i64 5
  %27 = load void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)*, void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)** %26, align 8
  call void %27(%"class.blink::ExceptionState"* %2, %"class.v8::Value"* %23) #7
  call void @_ZN2v88TryCatchD1Ev(%"class.v8::TryCatch"* nonnull %4) #7
  call void @llvm.lifetime.end.p0i8(i64 48, i8* nonnull %14) #7
  br label %58

28:                                               ; preds = %3, %21
  %29 = load %"class.v8::Value"*, %"class.v8::Value"** %7, align 8
  %30 = icmp eq %"class.v8::Value"* %29, null
  br i1 %30, label %35, label %31, !prof !2

31:                                               ; preds = %28
  %32 = bitcast %"class.v8::Value"* %29 to %"class.v8::String"*
  %33 = load i32, i32* %8, align 8
  %34 = call %"class.WTF::StringImpl"* @_ZN5blink13ToBlinkStringIN3WTF6StringEEET_N2v85LocalINS4_6StringEEENS_12ExternalModeE(%"class.v8::String"* nonnull %32, i32 %33) #7
  br label %55

35:                                               ; preds = %28
  %36 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %9, align 8
  %37 = icmp eq %"class.WTF::StringImpl"* %36, null
  br i1 %37, label %55, label %38

38:                                               ; preds = %35
  %39 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %36, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %40 = load atomic i32, i32* %39 monotonic, align 4
  %41 = and i32 %40, 2
  %42 = icmp eq i32 %41, 0
  br i1 %42, label %43, label %55

43:                                               ; preds = %38
  %44 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %36, i64 0, i32 0
  %45 = load i32, i32* %44, align 4
  %46 = zext i32 %45 to i33
  %47 = call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %46, i33 1) #7
  %48 = extractvalue { i33, i1 } %47, 1
  %49 = extractvalue { i33, i1 } %47, 0
  %50 = icmp slt i33 %49, 0
  %51 = or i1 %48, %50
  br i1 %51, label %52, label %53, !prof !2

52:                                               ; preds = %43
  call void @llvm.trap() #7
  unreachable

53:                                               ; preds = %43
  %54 = trunc i33 %49 to i32
  store i32 %54, i32* %44, align 4
  br label %55

55:                                               ; preds = %31, %35, %38, %53
  %56 = phi %"class.WTF::StringImpl"* [ %34, %31 ], [ null, %35 ], [ %36, %38 ], [ %36, %53 ]
  %57 = call %"class.WTF::StringImpl"* @_ZN5blink26ReplaceUnmatchedSurrogatesEN3WTF6StringE(%"class.WTF::StringImpl"* %56) #7
  br label %58

58:                                               ; preds = %55, %22
  %59 = phi %"class.WTF::StringImpl"* [ %57, %55 ], [ null, %22 ]
  %60 = getelementptr inbounds %"class.blink::V8StringResource", %"class.blink::V8StringResource"* %5, i64 0, i32 3, i32 1, i32 0, i32 0, i32 0
  %61 = load i8*, i8** %60, align 8
  store i8* null, i8** %60, align 8
  %62 = icmp eq i8* %61, null
  br i1 %62, label %64, label %63

63:                                               ; preds = %58
  call void @_ZN3WTF10Partitions10BufferFreeEPv(i8* nonnull %61) #7
  br label %64

64:                                               ; preds = %63, %58
  %65 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %9, align 8
  %66 = icmp eq %"class.WTF::StringImpl"* %65, null
  br i1 %66, label %80, label %67

67:                                               ; preds = %64
  %68 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %65, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %69 = load atomic i32, i32* %68 monotonic, align 4
  %70 = and i32 %69, 2
  %71 = icmp eq i32 %70, 0
  %72 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %65, i64 0, i32 0
  %73 = load i32, i32* %72, align 4
  br i1 %71, label %74, label %76

74:                                               ; preds = %67
  %75 = add i32 %73, -1
  store i32 %75, i32* %72, align 4
  br label %76

76:                                               ; preds = %74, %67
  %77 = phi i32 [ %75, %74 ], [ %73, %67 ]
  %78 = icmp eq i32 %77, 0
  br i1 %78, label %79, label %80

79:                                               ; preds = %76
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %65) #7
  br label %80

80:                                               ; preds = %64, %76, %79
  call void @llvm.lifetime.end.p0i8(i64 160, i8* nonnull %6) #7
  ret %"class.WTF::StringImpl"* %59
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden %"class.WTF::StringImpl"* @_ZN5blink17NativeValueTraitsINS_16IDLUSVStringBaseILNS_20V8StringResourceModeE0EEEvE11NativeValueEPN2v87IsolateENS5_5LocalINS5_5ValueEEERNS_14ExceptionStateE(%"class.v8::Isolate"*, %"class.v8::Value"*, %"class.blink::ExceptionState"* dereferenceable(72)) local_unnamed_addr #0 comdat align 2 {
  %4 = alloca %"class.v8::TryCatch", align 8
  %5 = alloca %"class.blink::V8StringResource.5", align 8
  %6 = bitcast %"class.blink::V8StringResource.5"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 160, i8* nonnull %6) #7
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %6, i8 -86, i64 152, i1 false)
  %7 = getelementptr inbounds %"class.blink::V8StringResource.5", %"class.blink::V8StringResource.5"* %5, i64 0, i32 0, i32 0
  store %"class.v8::Value"* %1, %"class.v8::Value"** %7, align 8
  %8 = getelementptr inbounds %"class.blink::V8StringResource.5", %"class.blink::V8StringResource.5"* %5, i64 0, i32 1
  store i32 0, i32* %8, align 8
  %9 = getelementptr inbounds %"class.blink::V8StringResource.5", %"class.blink::V8StringResource.5"* %5, i64 0, i32 2, i32 0, i32 0
  store %"class.WTF::StringImpl"* null, %"class.WTF::StringImpl"** %9, align 8
  %10 = getelementptr inbounds %"class.blink::V8StringResource.5", %"class.blink::V8StringResource.5"* %5, i64 0, i32 3, i32 1
  %11 = bitcast %"class.std::__1::unique_ptr"* %10 to i64*
  store i64 0, i64* %11, align 8
  %12 = call zeroext i1 @_ZN5blink16V8StringResourceILNS_20V8StringResourceModeE0EE11PrepareFastEv(%"class.blink::V8StringResource.5"* nonnull %5) #7
  br i1 %12, label %28, label %13

13:                                               ; preds = %3
  %14 = bitcast %"class.v8::TryCatch"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 48, i8* nonnull %14) #7
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %14, i8 -86, i64 48, i1 false) #7
  call void @_ZN2v88TryCatchC1EPNS_7IsolateE(%"class.v8::TryCatch"* nonnull %4, %"class.v8::Isolate"* %0) #7
  %15 = load %"class.v8::Value"*, %"class.v8::Value"** %7, align 8
  %16 = call %"class.v8::Context"* @_ZN2v87Isolate17GetCurrentContextEv(%"class.v8::Isolate"* %0) #7
  %17 = call %"class.v8::String"* @_ZNK2v85Value8ToStringENS_5LocalINS_7ContextEEE(%"class.v8::Value"* %15, %"class.v8::Context"* %16) #7
  %18 = ptrtoint %"class.v8::String"* %17 to i64
  %19 = bitcast %"class.blink::V8StringResource.5"* %5 to i64*
  store i64 %18, i64* %19, align 8
  %20 = icmp eq %"class.v8::String"* %17, null
  br i1 %20, label %22, label %21

21:                                               ; preds = %13
  call void @_ZN2v88TryCatchD1Ev(%"class.v8::TryCatch"* nonnull %4) #7
  call void @llvm.lifetime.end.p0i8(i64 48, i8* nonnull %14) #7
  br label %28

22:                                               ; preds = %13
  %23 = call %"class.v8::Value"* @_ZNK2v88TryCatch9ExceptionEv(%"class.v8::TryCatch"* nonnull %4) #7
  %24 = bitcast %"class.blink::ExceptionState"* %2 to void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)***
  %25 = load void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)**, void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)*** %24, align 8
  %26 = getelementptr inbounds void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)*, void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)** %25, i64 5
  %27 = load void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)*, void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)** %26, align 8
  call void %27(%"class.blink::ExceptionState"* %2, %"class.v8::Value"* %23) #7
  call void @_ZN2v88TryCatchD1Ev(%"class.v8::TryCatch"* nonnull %4) #7
  call void @llvm.lifetime.end.p0i8(i64 48, i8* nonnull %14) #7
  br label %58

28:                                               ; preds = %3, %21
  %29 = load %"class.v8::Value"*, %"class.v8::Value"** %7, align 8
  %30 = icmp eq %"class.v8::Value"* %29, null
  br i1 %30, label %35, label %31, !prof !2

31:                                               ; preds = %28
  %32 = bitcast %"class.v8::Value"* %29 to %"class.v8::String"*
  %33 = load i32, i32* %8, align 8
  %34 = call %"class.WTF::StringImpl"* @_ZN5blink13ToBlinkStringIN3WTF6StringEEET_N2v85LocalINS4_6StringEEENS_12ExternalModeE(%"class.v8::String"* nonnull %32, i32 %33) #7
  br label %55

35:                                               ; preds = %28
  %36 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %9, align 8
  %37 = icmp eq %"class.WTF::StringImpl"* %36, null
  br i1 %37, label %55, label %38

38:                                               ; preds = %35
  %39 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %36, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %40 = load atomic i32, i32* %39 monotonic, align 4
  %41 = and i32 %40, 2
  %42 = icmp eq i32 %41, 0
  br i1 %42, label %43, label %55

43:                                               ; preds = %38
  %44 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %36, i64 0, i32 0
  %45 = load i32, i32* %44, align 4
  %46 = zext i32 %45 to i33
  %47 = call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %46, i33 1) #7
  %48 = extractvalue { i33, i1 } %47, 1
  %49 = extractvalue { i33, i1 } %47, 0
  %50 = icmp slt i33 %49, 0
  %51 = or i1 %48, %50
  br i1 %51, label %52, label %53, !prof !2

52:                                               ; preds = %43
  call void @llvm.trap() #7
  unreachable

53:                                               ; preds = %43
  %54 = trunc i33 %49 to i32
  store i32 %54, i32* %44, align 4
  br label %55

55:                                               ; preds = %31, %35, %38, %53
  %56 = phi %"class.WTF::StringImpl"* [ %34, %31 ], [ null, %35 ], [ %36, %38 ], [ %36, %53 ]
  %57 = call %"class.WTF::StringImpl"* @_ZN5blink26ReplaceUnmatchedSurrogatesEN3WTF6StringE(%"class.WTF::StringImpl"* %56) #7
  br label %58

58:                                               ; preds = %55, %22
  %59 = phi %"class.WTF::StringImpl"* [ %57, %55 ], [ null, %22 ]
  %60 = getelementptr inbounds %"class.blink::V8StringResource.5", %"class.blink::V8StringResource.5"* %5, i64 0, i32 3, i32 1, i32 0, i32 0, i32 0
  %61 = load i8*, i8** %60, align 8
  store i8* null, i8** %60, align 8
  %62 = icmp eq i8* %61, null
  br i1 %62, label %64, label %63

63:                                               ; preds = %58
  call void @_ZN3WTF10Partitions10BufferFreeEPv(i8* nonnull %61) #7
  br label %64

64:                                               ; preds = %63, %58
  %65 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %9, align 8
  %66 = icmp eq %"class.WTF::StringImpl"* %65, null
  br i1 %66, label %80, label %67

67:                                               ; preds = %64
  %68 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %65, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %69 = load atomic i32, i32* %68 monotonic, align 4
  %70 = and i32 %69, 2
  %71 = icmp eq i32 %70, 0
  %72 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %65, i64 0, i32 0
  %73 = load i32, i32* %72, align 4
  br i1 %71, label %74, label %76

74:                                               ; preds = %67
  %75 = add i32 %73, -1
  store i32 %75, i32* %72, align 4
  br label %76

76:                                               ; preds = %74, %67
  %77 = phi i32 [ %75, %74 ], [ %73, %67 ]
  %78 = icmp eq i32 %77, 0
  br i1 %78, label %79, label %80

79:                                               ; preds = %76
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %65) #7
  br label %80

80:                                               ; preds = %64, %76, %79
  call void @llvm.lifetime.end.p0i8(i64 160, i8* nonnull %6) #7
  ret %"class.WTF::StringImpl"* %59
}

declare zeroext i1 @_ZN5blink11IsValidEnumERKN3WTF6StringEPKPKcmS3_RNS_14ExceptionStateE(%"class.WTF::String"* dereferenceable(8), i8**, i64, %"class.WTF::String"* dereferenceable(8), %"class.blink::ExceptionState"* dereferenceable(72)) local_unnamed_addr #1

; Function Attrs: nounwind
declare void @_ZN2v88TryCatchD1Ev(%"class.v8::TryCatch"*) unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define hidden %"class.v8::Value"* @_ZNK5blink10CookieInit8ToV8ImplEN2v85LocalINS1_6ObjectEEEPNS1_7IsolateE(%"class.blink::CookieInit"* nocapture readonly, %"class.v8::Object"* nocapture readnone, %"class.v8::Isolate"*) unnamed_addr #0 align 2 {
  %4 = tail call %"class.v8::Object"* @_ZN2v86Object3NewEPNS_7IsolateE(%"class.v8::Isolate"* %2) #7
  %5 = tail call zeroext i1 @_ZN5blink14toV8CookieInitEPKNS_10CookieInitEN2v85LocalINS3_6ObjectEEES6_PNS3_7IsolateE(%"class.blink::CookieInit"* %0, %"class.v8::Object"* %4, %"class.v8::Object"* undef, %"class.v8::Isolate"* %2)
  %6 = bitcast %"class.v8::Object"* %4 to %"class.v8::Value"*
  %7 = ptrtoint %"class.v8::Isolate"* %2 to i64
  %8 = add i64 %7, 160
  %9 = inttoptr i64 %8 to %"class.v8::Value"*
  %10 = select i1 %5, %"class.v8::Value"* %6, %"class.v8::Value"* %9
  ret %"class.v8::Value"* %10
}

declare %"class.v8::Object"* @_ZN2v86Object3NewEPNS_7IsolateE(%"class.v8::Isolate"*) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN5blink14toV8CookieInitEPKNS_10CookieInitEN2v85LocalINS3_6ObjectEEES6_PNS3_7IsolateE(%"class.blink::CookieInit"* nocapture readonly, %"class.v8::Object"*, %"class.v8::Object"* nocapture readnone, %"class.v8::Isolate"*) local_unnamed_addr #0 {
  %5 = alloca %"class.WTF::StringView", align 8
  %6 = alloca %"class.WTF::StringView", align 8
  %7 = alloca %"class.WTF::StringView", align 8
  %8 = alloca %"class.WTF::StringView", align 8
  %9 = alloca %"class.WTF::StringView", align 8
  %10 = ptrtoint %"class.v8::Isolate"* %3 to i64
  %11 = add i64 %10, 8
  %12 = inttoptr i64 %11 to %"class.blink::V8PerIsolateData"**
  %13 = load %"class.blink::V8PerIsolateData"*, %"class.blink::V8PerIsolateData"** %12, align 8
  %14 = tail call { i64, %"class.v8::Eternal"* } @_ZN5blink16V8PerIsolateData28FindOrCreateEternalNameCacheEPKvRKN4base4spanIKPKcLm18446744073709551615EEE(%"class.blink::V8PerIsolateData"* %13, i8* bitcast ([6 x i8*]* @_ZZN5blinkL23eternalV8CookieInitKeysEPN2v87IsolateEE5kKeys to i8*), %"class.base::span.314"* dereferenceable(16) bitcast ({ i64, i8** }* @.ref.tmp to %"class.base::span.314"*)) #7
  %15 = extractvalue { i64, %"class.v8::Eternal"* } %14, 1
  %16 = tail call %"class.v8::Context"* @_ZN2v87Isolate17GetCurrentContextEv(%"class.v8::Isolate"* %3) #7
  %17 = getelementptr inbounds %"class.blink::CookieInit", %"class.blink::CookieInit"* %0, i64 0, i32 2, i32 0, i32 0
  %18 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %17, align 8
  %19 = icmp eq %"class.WTF::StringImpl"* %18, null
  br i1 %19, label %31, label %20

20:                                               ; preds = %4
  %21 = bitcast %"class.WTF::StringView"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %21) #7
  %22 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %5, i64 0, i32 0
  store %"class.WTF::StringImpl"* %18, %"class.WTF::StringImpl"** %22, align 8
  %23 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %18, i64 0, i32 1
  %24 = load i32, i32* %23, align 4
  %25 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %18, i64 1
  %26 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %5, i64 0, i32 1
  %27 = bitcast i8** %26 to %"class.WTF::StringImpl"**
  store %"class.WTF::StringImpl"* %25, %"class.WTF::StringImpl"** %27, align 8
  %28 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %5, i64 0, i32 2
  store i32 %24, i32* %28, align 8
  %29 = call %"class.v8::String"* @_ZN5blink8V8StringEPN2v87IsolateERKN3WTF10StringViewE(%"class.v8::Isolate"* %3, %"class.WTF::StringView"* nonnull dereferenceable(24) %5)
  %30 = ptrtoint %"class.v8::String"* %29 to i64
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %21) #7
  br label %33

31:                                               ; preds = %4
  %32 = add i64 %10, 176
  br label %33

33:                                               ; preds = %20, %31
  %34 = phi i64 [ %30, %20 ], [ %32, %31 ]
  %35 = inttoptr i64 %34 to %"class.v8::Value"*
  %36 = getelementptr inbounds %"class.v8::Eternal", %"class.v8::Eternal"* %15, i64 0, i32 0
  %37 = load %"class.v8::Name"*, %"class.v8::Name"** %36, align 8
  %38 = call i16 @_ZN2v86Object18CreateDataPropertyENS_5LocalINS_7ContextEEENS1_INS_4NameEEENS1_INS_5ValueEEE(%"class.v8::Object"* %1, %"class.v8::Context"* %16, %"class.v8::Name"* %37, %"class.v8::Value"* %35) #7
  %39 = trunc i16 %38 to i8
  %40 = icmp ne i8 %39, 0
  %41 = icmp ugt i16 %38, 255
  %42 = and i1 %41, %40
  br i1 %42, label %43, label %166

43:                                               ; preds = %33
  %44 = getelementptr inbounds %"class.blink::CookieInit", %"class.blink::CookieInit"* %0, i64 0, i32 1
  %45 = load i8, i8* %44, align 8, !range !4
  %46 = icmp eq i8 %45, 0
  br i1 %46, label %53, label %47

47:                                               ; preds = %43
  %48 = getelementptr inbounds %"class.blink::CookieInit", %"class.blink::CookieInit"* %0, i64 0, i32 3
  %49 = load i64, i64* %48, align 8
  %50 = uitofp i64 %49 to double
  %51 = call %"class.v8::Number"* @_ZN2v86Number3NewEPNS_7IsolateEd(%"class.v8::Isolate"* %3, double %50) #7
  %52 = ptrtoint %"class.v8::Number"* %51 to i64
  br label %55

53:                                               ; preds = %43
  %54 = add i64 %10, 176
  br label %55

55:                                               ; preds = %47, %53
  %56 = phi i64 [ %52, %47 ], [ %54, %53 ]
  %57 = inttoptr i64 %56 to %"class.v8::Value"*
  %58 = getelementptr inbounds %"class.v8::Eternal", %"class.v8::Eternal"* %15, i64 1, i32 0
  %59 = load %"class.v8::Name"*, %"class.v8::Name"** %58, align 8
  %60 = call i16 @_ZN2v86Object18CreateDataPropertyENS_5LocalINS_7ContextEEENS1_INS_4NameEEENS1_INS_5ValueEEE(%"class.v8::Object"* %1, %"class.v8::Context"* %16, %"class.v8::Name"* %59, %"class.v8::Value"* %57) #7
  %61 = trunc i16 %60 to i8
  %62 = icmp ne i8 %61, 0
  %63 = icmp ugt i16 %60, 255
  %64 = and i1 %63, %62
  br i1 %64, label %65, label %166

65:                                               ; preds = %55
  %66 = getelementptr inbounds %"class.blink::CookieInit", %"class.blink::CookieInit"* %0, i64 0, i32 4, i32 0, i32 0
  %67 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %66, align 8
  %68 = icmp eq %"class.WTF::StringImpl"* %67, null
  br i1 %68, label %87, label %69

69:                                               ; preds = %65
  %70 = bitcast %"class.WTF::StringView"* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %70) #7
  %71 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %6, i64 0, i32 0
  store %"class.WTF::StringImpl"* %67, %"class.WTF::StringImpl"** %71, align 8
  %72 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %67, i64 0, i32 1
  %73 = load i32, i32* %72, align 4
  %74 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %67, i64 1
  %75 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %6, i64 0, i32 1
  %76 = bitcast i8** %75 to %"class.WTF::StringImpl"**
  store %"class.WTF::StringImpl"* %74, %"class.WTF::StringImpl"** %76, align 8
  %77 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %6, i64 0, i32 2
  store i32 %73, i32* %77, align 8
  %78 = call %"class.v8::String"* @_ZN5blink8V8StringEPN2v87IsolateERKN3WTF10StringViewE(%"class.v8::Isolate"* %3, %"class.WTF::StringView"* nonnull dereferenceable(24) %6)
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %70) #7
  %79 = bitcast %"class.v8::String"* %78 to %"class.v8::Value"*
  %80 = getelementptr inbounds %"class.v8::Eternal", %"class.v8::Eternal"* %15, i64 2, i32 0
  %81 = load %"class.v8::Name"*, %"class.v8::Name"** %80, align 8
  %82 = call i16 @_ZN2v86Object18CreateDataPropertyENS_5LocalINS_7ContextEEENS1_INS_4NameEEENS1_INS_5ValueEEE(%"class.v8::Object"* %1, %"class.v8::Context"* %16, %"class.v8::Name"* %81, %"class.v8::Value"* %79) #7
  %83 = trunc i16 %82 to i8
  %84 = icmp ne i8 %83, 0
  %85 = icmp ugt i16 %82, 255
  %86 = and i1 %85, %84
  br i1 %86, label %87, label %166

87:                                               ; preds = %65, %69
  %88 = getelementptr inbounds %"class.blink::CookieInit", %"class.blink::CookieInit"* %0, i64 0, i32 5, i32 0, i32 0
  %89 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %88, align 8
  %90 = icmp eq %"class.WTF::StringImpl"* %89, null
  br i1 %90, label %101, label %91

91:                                               ; preds = %87
  %92 = bitcast %"class.WTF::StringView"* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %92) #7
  %93 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %7, i64 0, i32 0
  store %"class.WTF::StringImpl"* %89, %"class.WTF::StringImpl"** %93, align 8
  %94 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %89, i64 0, i32 1
  %95 = load i32, i32* %94, align 4
  %96 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %89, i64 1
  %97 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %7, i64 0, i32 1
  %98 = bitcast i8** %97 to %"class.WTF::StringImpl"**
  store %"class.WTF::StringImpl"* %96, %"class.WTF::StringImpl"** %98, align 8
  %99 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %7, i64 0, i32 2
  store i32 %95, i32* %99, align 8
  %100 = call %"class.v8::String"* @_ZN5blink8V8StringEPN2v87IsolateERKN3WTF10StringViewE(%"class.v8::Isolate"* %3, %"class.WTF::StringView"* nonnull dereferenceable(24) %7)
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %92) #7
  br label %105

101:                                              ; preds = %87
  %102 = call %"class.v8::String"* @_ZN2v86String14NewFromOneByteEPNS_7IsolateEPKhNS_13NewStringTypeEi(%"class.v8::Isolate"* %3, i8* nonnull getelementptr inbounds ([2 x i8], [2 x i8]* @.str.8, i64 0, i64 0), i32 0, i32 1) #7
  %103 = icmp eq %"class.v8::String"* %102, null
  br i1 %103, label %104, label %105, !prof !2

104:                                              ; preds = %101
  call void @_ZN2v82V812ToLocalEmptyEv() #7
  br label %105

105:                                              ; preds = %104, %101, %91
  %106 = phi %"class.v8::String"* [ %100, %91 ], [ %102, %101 ], [ null, %104 ]
  %107 = bitcast %"class.v8::String"* %106 to %"class.v8::Value"*
  %108 = getelementptr inbounds %"class.v8::Eternal", %"class.v8::Eternal"* %15, i64 3, i32 0
  %109 = load %"class.v8::Name"*, %"class.v8::Name"** %108, align 8
  %110 = call i16 @_ZN2v86Object18CreateDataPropertyENS_5LocalINS_7ContextEEENS1_INS_4NameEEENS1_INS_5ValueEEE(%"class.v8::Object"* %1, %"class.v8::Context"* %16, %"class.v8::Name"* %109, %"class.v8::Value"* %107) #7
  %111 = trunc i16 %110 to i8
  %112 = icmp ne i8 %111, 0
  %113 = icmp ugt i16 %110, 255
  %114 = and i1 %113, %112
  br i1 %114, label %115, label %166

115:                                              ; preds = %105
  %116 = getelementptr inbounds %"class.blink::CookieInit", %"class.blink::CookieInit"* %0, i64 0, i32 6, i32 0, i32 0
  %117 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %116, align 8
  %118 = icmp eq %"class.WTF::StringImpl"* %117, null
  br i1 %118, label %129, label %119

119:                                              ; preds = %115
  %120 = bitcast %"class.WTF::StringView"* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %120) #7
  %121 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %8, i64 0, i32 0
  store %"class.WTF::StringImpl"* %117, %"class.WTF::StringImpl"** %121, align 8
  %122 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %117, i64 0, i32 1
  %123 = load i32, i32* %122, align 4
  %124 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %117, i64 1
  %125 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %8, i64 0, i32 1
  %126 = bitcast i8** %125 to %"class.WTF::StringImpl"**
  store %"class.WTF::StringImpl"* %124, %"class.WTF::StringImpl"** %126, align 8
  %127 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %8, i64 0, i32 2
  store i32 %123, i32* %127, align 8
  %128 = call %"class.v8::String"* @_ZN5blink8V8StringEPN2v87IsolateERKN3WTF10StringViewE(%"class.v8::Isolate"* %3, %"class.WTF::StringView"* nonnull dereferenceable(24) %8)
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %120) #7
  br label %133

129:                                              ; preds = %115
  %130 = call %"class.v8::String"* @_ZN2v86String14NewFromOneByteEPNS_7IsolateEPKhNS_13NewStringTypeEi(%"class.v8::Isolate"* %3, i8* nonnull getelementptr inbounds ([7 x i8], [7 x i8]* @.str.3, i64 0, i64 0), i32 0, i32 6) #7
  %131 = icmp eq %"class.v8::String"* %130, null
  br i1 %131, label %132, label %133, !prof !2

132:                                              ; preds = %129
  call void @_ZN2v82V812ToLocalEmptyEv() #7
  br label %133

133:                                              ; preds = %132, %129, %119
  %134 = phi %"class.v8::String"* [ %128, %119 ], [ %130, %129 ], [ null, %132 ]
  %135 = bitcast %"class.v8::String"* %134 to %"class.v8::Value"*
  %136 = getelementptr inbounds %"class.v8::Eternal", %"class.v8::Eternal"* %15, i64 4, i32 0
  %137 = load %"class.v8::Name"*, %"class.v8::Name"** %136, align 8
  %138 = call i16 @_ZN2v86Object18CreateDataPropertyENS_5LocalINS_7ContextEEENS1_INS_4NameEEENS1_INS_5ValueEEE(%"class.v8::Object"* %1, %"class.v8::Context"* %16, %"class.v8::Name"* %137, %"class.v8::Value"* %135) #7
  %139 = trunc i16 %138 to i8
  %140 = icmp ne i8 %139, 0
  %141 = icmp ugt i16 %138, 255
  %142 = and i1 %141, %140
  br i1 %142, label %143, label %166

143:                                              ; preds = %133
  %144 = getelementptr inbounds %"class.blink::CookieInit", %"class.blink::CookieInit"* %0, i64 0, i32 7, i32 0, i32 0
  %145 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %144, align 8
  %146 = icmp eq %"class.WTF::StringImpl"* %145, null
  br i1 %146, label %165, label %147

147:                                              ; preds = %143
  %148 = bitcast %"class.WTF::StringView"* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %148) #7
  %149 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %9, i64 0, i32 0
  store %"class.WTF::StringImpl"* %145, %"class.WTF::StringImpl"** %149, align 8
  %150 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %145, i64 0, i32 1
  %151 = load i32, i32* %150, align 4
  %152 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %145, i64 1
  %153 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %9, i64 0, i32 1
  %154 = bitcast i8** %153 to %"class.WTF::StringImpl"**
  store %"class.WTF::StringImpl"* %152, %"class.WTF::StringImpl"** %154, align 8
  %155 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %9, i64 0, i32 2
  store i32 %151, i32* %155, align 8
  %156 = call %"class.v8::String"* @_ZN5blink8V8StringEPN2v87IsolateERKN3WTF10StringViewE(%"class.v8::Isolate"* %3, %"class.WTF::StringView"* nonnull dereferenceable(24) %9)
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %148) #7
  %157 = bitcast %"class.v8::String"* %156 to %"class.v8::Value"*
  %158 = getelementptr inbounds %"class.v8::Eternal", %"class.v8::Eternal"* %15, i64 5, i32 0
  %159 = load %"class.v8::Name"*, %"class.v8::Name"** %158, align 8
  %160 = call i16 @_ZN2v86Object18CreateDataPropertyENS_5LocalINS_7ContextEEENS1_INS_4NameEEENS1_INS_5ValueEEE(%"class.v8::Object"* %1, %"class.v8::Context"* %16, %"class.v8::Name"* %159, %"class.v8::Value"* %157) #7
  %161 = trunc i16 %160 to i8
  %162 = icmp ne i8 %161, 0
  %163 = icmp ugt i16 %160, 255
  %164 = and i1 %163, %162
  br i1 %164, label %165, label %166

165:                                              ; preds = %143, %147
  br label %166

166:                                              ; preds = %55, %105, %165, %147, %133, %69, %33
  %167 = phi i1 [ false, %33 ], [ false, %55 ], [ false, %69 ], [ false, %105 ], [ false, %133 ], [ true, %165 ], [ false, %147 ]
  ret i1 %167
}

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden %"class.v8::String"* @_ZN5blink8V8StringEPN2v87IsolateERKN3WTF10StringViewE(%"class.v8::Isolate"*, %"class.WTF::StringView"* dereferenceable(24)) local_unnamed_addr #4 comdat {
  %3 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %1, i64 0, i32 1
  %4 = load i8*, i8** %3, align 8
  %5 = icmp eq i8* %4, null
  %6 = bitcast i8* %4 to i16*
  br i1 %5, label %7, label %11

7:                                                ; preds = %2
  %8 = ptrtoint %"class.v8::Isolate"* %0 to i64
  %9 = add i64 %8, 200
  %10 = inttoptr i64 %9 to %"class.v8::String"*
  br label %63

11:                                               ; preds = %2
  %12 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %1, i64 0, i32 0
  %13 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %12, align 8
  %14 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %13, i64 1
  %15 = bitcast %"class.WTF::StringImpl"* %14 to i8*
  %16 = icmp eq i8* %4, %15
  br i1 %16, label %17, label %48

17:                                               ; preds = %11
  %18 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %1, i64 0, i32 2
  %19 = load i32, i32* %18, align 8
  %20 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %13, i64 0, i32 1
  %21 = load i32, i32* %20, align 4
  %22 = icmp ne i32 %19, %21
  %23 = icmp eq %"class.WTF::StringImpl"* %13, null
  %24 = or i1 %23, %22
  br i1 %24, label %48, label %25

25:                                               ; preds = %17
  %26 = ptrtoint %"class.v8::Isolate"* %0 to i64
  %27 = add i64 %26, 8
  %28 = inttoptr i64 %27 to %"class.blink::V8PerIsolateData"**
  %29 = load %"class.blink::V8PerIsolateData"*, %"class.blink::V8PerIsolateData"** %28, align 8
  %30 = getelementptr inbounds %"class.blink::V8PerIsolateData", %"class.blink::V8PerIsolateData"* %29, i64 0, i32 5, i32 0, i32 0, i32 0
  %31 = load %"class.blink::StringCache"*, %"class.blink::StringCache"** %30, align 8
  %32 = getelementptr inbounds %"class.blink::StringCache", %"class.blink::StringCache"* %31, i64 0, i32 3, i32 0
  %33 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %32, align 8
  %34 = icmp eq %"class.WTF::StringImpl"* %33, %13
  br i1 %34, label %35, label %46

35:                                               ; preds = %25
  %36 = getelementptr inbounds %"class.blink::StringCache", %"class.blink::StringCache"* %31, i64 0, i32 1
  %37 = bitcast %"class.v8::PersistentValueMapBase<WTF::StringImpl *, v8::String, blink::StringCacheMapTraits>::PersistentValueReference"* %36 to %"class.v8::String"**
  %38 = load %"class.v8::String"*, %"class.v8::String"** %37, align 8
  %39 = icmp eq %"class.v8::String"* %38, null
  br i1 %39, label %63, label %40

40:                                               ; preds = %35
  %41 = bitcast %"class.v8::String"* %38 to i64*
  %42 = bitcast %"class.v8::Isolate"* %0 to %"class.v8::internal::Isolate"*
  %43 = load i64, i64* %41, align 8
  %44 = tail call i64* @_ZN2v811HandleScope12CreateHandleEPNS_8internal7IsolateEm(%"class.v8::internal::Isolate"* %42, i64 %43) #7
  %45 = bitcast i64* %44 to %"class.v8::String"*
  br label %63

46:                                               ; preds = %25
  %47 = tail call %"class.v8::String"* @_ZN5blink11StringCache20V8ExternalStringSlowEPN2v87IsolateEPN3WTF10StringImplE(%"class.blink::StringCache"* %31, %"class.v8::Isolate"* %0, %"class.WTF::StringImpl"* nonnull %13) #7
  br label %63

48:                                               ; preds = %17, %11
  %49 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %13, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %50 = load atomic i32, i32* %49 monotonic, align 4
  %51 = and i32 %50, 1
  %52 = icmp eq i32 %51, 0
  %53 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %1, i64 0, i32 2
  %54 = load i32, i32* %53, align 8
  br i1 %52, label %59, label %55

55:                                               ; preds = %48
  %56 = tail call %"class.v8::String"* @_ZN2v86String14NewFromOneByteEPNS_7IsolateEPKhNS_13NewStringTypeEi(%"class.v8::Isolate"* %0, i8* nonnull %4, i32 0, i32 %54) #7
  %57 = icmp eq %"class.v8::String"* %56, null
  br i1 %57, label %58, label %63, !prof !2

58:                                               ; preds = %55
  tail call void @_ZN2v82V812ToLocalEmptyEv() #7
  br label %63

59:                                               ; preds = %48
  %60 = tail call %"class.v8::String"* @_ZN2v86String14NewFromTwoByteEPNS_7IsolateEPKtNS_13NewStringTypeEi(%"class.v8::Isolate"* %0, i16* nonnull %6, i32 0, i32 %54) #7
  %61 = icmp eq %"class.v8::String"* %60, null
  br i1 %61, label %62, label %63, !prof !2

62:                                               ; preds = %59
  tail call void @_ZN2v82V812ToLocalEmptyEv() #7
  br label %63

63:                                               ; preds = %46, %40, %35, %62, %59, %58, %55, %7
  %64 = phi %"class.v8::String"* [ %10, %7 ], [ %56, %55 ], [ null, %58 ], [ %60, %59 ], [ null, %62 ], [ null, %35 ], [ %45, %40 ], [ %47, %46 ]
  ret %"class.v8::String"* %64
}

declare %"class.v8::Number"* @_ZN2v86Number3NewEPNS_7IsolateEd(%"class.v8::Isolate"*, double) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden %"class.blink::CookieInit"* @_ZN5blink17NativeValueTraitsINS_10CookieInitEvE11NativeValueEPN2v87IsolateENS3_5LocalINS3_5ValueEEERNS_14ExceptionStateE(%"class.v8::Isolate"*, %"class.v8::Value"*, %"class.blink::ExceptionState"* dereferenceable(72)) local_unnamed_addr #0 align 2 {
  %4 = tail call i8* @_ZN5blink10ThreadHeap8AllocateINS_17IDLDictionaryBaseEEEPhm(i64 64) #7
  %5 = bitcast i8* %4 to %"class.blink::CookieInit"*
  tail call void @_ZN5blink10CookieInitC1Ev(%"class.blink::CookieInit"* %5) #7
  %6 = getelementptr inbounds i8, i8* %4, i64 -4
  %7 = bitcast i8* %6 to i16*
  %8 = load atomic i16, i16* %7 monotonic, align 2
  %9 = or i16 %8, 1
  store atomic i16 %9, i16* %7 release, align 2
  tail call void @_ZN5blink12V8CookieInit6ToImplEPN2v87IsolateENS1_5LocalINS1_5ValueEEEPNS_10CookieInitERNS_14ExceptionStateE(%"class.v8::Isolate"* %0, %"class.v8::Value"* %1, %"class.blink::CookieInit"* %5, %"class.blink::ExceptionState"* dereferenceable(72) %2)
  ret %"class.blink::CookieInit"* %5
}

declare { i64, %"class.v8::Eternal"* } @_ZN5blink16V8PerIsolateData28FindOrCreateEternalNameCacheEPKvRKN4base4spanIKPKcLm18446744073709551615EEE(%"class.blink::V8PerIsolateData"*, i8*, %"class.base::span.314"* dereferenceable(16)) local_unnamed_addr #1

declare void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"*) local_unnamed_addr #1

; Function Attrs: nounwind readnone speculatable
declare { i33, i1 } @llvm.sadd.with.overflow.i33(i33, i33) #5

; Function Attrs: cold noreturn nounwind
declare void @llvm.trap() #6

declare void @_ZN3WTF10Partitions10BufferFreeEPv(i8*) local_unnamed_addr #1

declare void @_ZN3WTF6StringC2EPKcm(%"class.WTF::String"*, i8*, i64) unnamed_addr #1

declare %"class.v8::String"* @_ZN2v86String14NewFromOneByteEPNS_7IsolateEPKhNS_13NewStringTypeEi(%"class.v8::Isolate"*, i8*, i32, i32) local_unnamed_addr #1

declare %"class.v8::String"* @_ZN2v86String14NewFromTwoByteEPNS_7IsolateEPKtNS_13NewStringTypeEi(%"class.v8::Isolate"*, i16*, i32, i32) local_unnamed_addr #1

declare %"class.v8::String"* @_ZN5blink11StringCache20V8ExternalStringSlowEPN2v87IsolateEPN3WTF10StringImplE(%"class.blink::StringCache"*, %"class.v8::Isolate"*, %"class.WTF::StringImpl"*) local_unnamed_addr #1

declare i64* @_ZN2v811HandleScope12CreateHandleEPNS_8internal7IsolateEm(%"class.v8::internal::Isolate"*, i64) local_unnamed_addr #1

declare void @_ZN2v82V812ToLocalEmptyEv() local_unnamed_addr #1

declare i16 @_ZN2v86Object18CreateDataPropertyENS_5LocalINS_7ContextEEENS1_INS_4NameEEENS1_INS_5ValueEEE(%"class.v8::Object"*, %"class.v8::Context"*, %"class.v8::Name"*, %"class.v8::Value"*) local_unnamed_addr #1

declare void @_ZN5blink10CookieInitC1Ev(%"class.blink::CookieInit"*) unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i8* @_ZN5blink10ThreadHeap8AllocateINS_17IDLDictionaryBaseEEEPhm(i64) local_unnamed_addr #0 comdat align 2 {
  %2 = alloca %"class.logging::CheckOpResult", align 8
  %3 = alloca %"class.logging::CheckOpResult", align 8
  %4 = alloca %"class.logging::CheckError", align 8
  %5 = load %"class.WTF::ThreadSpecific"*, %"class.WTF::ThreadSpecific"** @_ZN5blink11ThreadState16thread_specific_E, align 8
  %6 = getelementptr inbounds %"class.WTF::ThreadSpecific", %"class.WTF::ThreadSpecific"* %5, i64 0, i32 1
  %7 = tail call i8* @_ZNK4base18ThreadLocalStorage4Slot3GetEv(%"class.base::ThreadLocalStorage::Slot"* %6) #7
  %8 = icmp eq i8* %7, null
  br i1 %8, label %9, label %11, !prof !2

9:                                                ; preds = %1
  %10 = tail call i8* @_ZN3WTF10Partitions16FastZeroedMallocEmPKc(i64 8, i8* getelementptr inbounds ([68 x i8], [68 x i8]* @__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameIPN5blink11ThreadStateEEEPKcv, i64 0, i64 0)) #7
  tail call void @_ZN4base18ThreadLocalStorage4Slot3SetEPv(%"class.base::ThreadLocalStorage::Slot"* %6, i8* %10) #7
  br label %11

11:                                               ; preds = %1, %9
  %12 = phi i8* [ %10, %9 ], [ %7, %1 ]
  %13 = bitcast i8* %12 to %"class.blink::ThreadState"**
  %14 = load %"class.blink::ThreadState"*, %"class.blink::ThreadState"** %13, align 8
  %15 = getelementptr inbounds %"class.blink::ThreadState", %"class.blink::ThreadState"* %14, i64 0, i32 0, i32 0, i32 0, i32 0
  %16 = load %"class.blink::ThreadHeap"*, %"class.blink::ThreadHeap"** %15, align 8
  %17 = icmp ult i64 %0, 64
  %18 = icmp ugt i64 %0, 31
  %19 = zext i1 %18 to i64
  %20 = icmp ult i64 %0, 128
  %21 = select i1 %20, i64 2, i64 3
  %22 = select i1 %17, i64 %19, i64 %21
  %23 = load atomic i32, i32* getelementptr inbounds ({ { i32 } }, { { i32 } }* @_ZZN5blink11GCInfoTraitINS_17IDLDictionaryBaseEE5IndexEvE13gc_info_index, i64 0, i32 0, i32 0) acquire, align 4
  %24 = icmp eq i32 %23, 0
  br i1 %24, label %25, label %28

25:                                               ; preds = %11
  %26 = load %"class.blink::GCInfoTable"*, %"class.blink::GCInfoTable"** @_ZN5blink11GCInfoTable13global_table_E, align 8
  %27 = tail call i32 @_ZN5blink11GCInfoTable17EnsureGCInfoIndexEPKNS_6GCInfoEPNSt3__16atomicIjEE(%"class.blink::GCInfoTable"* %26, %"struct.blink::GCInfo"* nonnull @_ZZN5blink11GCInfoTraitINS_17IDLDictionaryBaseEE5IndexEvE7kGcInfo, %"struct.std::__1::atomic"* bitcast ({ { i32 } }* @_ZZN5blink11GCInfoTraitINS_17IDLDictionaryBaseEE5IndexEvE13gc_info_index to %"struct.std::__1::atomic"*)) #7
  br label %28

28:                                               ; preds = %11, %25
  %29 = phi i32 [ %23, %11 ], [ %27, %25 ]
  %30 = getelementptr inbounds %"class.blink::ThreadHeap", %"class.blink::ThreadHeap"* %16, i64 0, i32 19, i64 %22
  %31 = bitcast %"class.blink::BaseArena"** %30 to %"class.blink::NormalPageArena"**
  %32 = load %"class.blink::NormalPageArena"*, %"class.blink::NormalPageArena"** %31, align 8
  %33 = bitcast %"class.logging::CheckOpResult"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %33) #7
  %34 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %3, i64 0, i32 0
  store i8* inttoptr (i64 -6148914691236517206 to i8*), i8** %34, align 8
  %35 = bitcast %"class.logging::CheckOpResult"* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %35) #7
  %36 = icmp ult i64 %0, -8
  br i1 %36, label %37, label %38

37:                                               ; preds = %28
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %35) #7
  store i8* null, i8** %34, align 8
  br label %48

38:                                               ; preds = %28
  %39 = add nsw i64 %0, 8
  %40 = tail call i8* @_ZN7logging15CheckOpValueStrEm(i64 %39) #7
  %41 = tail call i8* @_ZN7logging15CheckOpValueStrEm(i64 %0) #7
  call void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"* nonnull %2, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.15, i64 0, i64 0), i8* %40, i8* %41) #7
  %42 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %2, i64 0, i32 0
  %43 = load i8*, i8** %42, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %35) #7
  store i8* %43, i8** %34, align 8
  %44 = icmp eq i8* %43, null
  br i1 %44, label %48, label %45

45:                                               ; preds = %38
  %46 = bitcast %"class.logging::CheckError"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %46) #7
  call void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* nonnull sret %4, i8* getelementptr inbounds ([59 x i8], [59 x i8]* @.str.16, i64 0, i64 0), i32 246, %"class.logging::CheckOpResult"* nonnull %3) #7
  %47 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %4) #7
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %4) #7
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %46) #7
  br label %48

48:                                               ; preds = %37, %38, %45
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %33) #7
  %49 = add i64 %0, 15
  %50 = and i64 %49, -8
  %51 = getelementptr inbounds %"class.blink::NormalPageArena", %"class.blink::NormalPageArena"* %32, i64 0, i32 4
  %52 = load i64, i64* %51, align 8
  %53 = icmp ult i64 %52, %50
  br i1 %53, label %86, label %54, !prof !2

54:                                               ; preds = %48
  %55 = getelementptr inbounds %"class.blink::NormalPageArena", %"class.blink::NormalPageArena"* %32, i64 0, i32 3
  %56 = load i8*, i8** %55, align 8
  %57 = getelementptr inbounds i8, i8* %56, i64 %50
  store i8* %57, i8** %55, align 8
  %58 = sub i64 %52, %50
  store i64 %58, i64* %51, align 8
  %59 = bitcast i8* %56 to i32*
  store i32 0, i32* %59, align 4
  %60 = getelementptr inbounds i8, i8* %56, i64 4
  %61 = bitcast i8* %60 to i16*
  %62 = trunc i32 %29 to i16
  %63 = shl i16 %62, 2
  store atomic i16 %63, i16* %61 monotonic, align 2
  %64 = lshr exact i64 %50, 1
  %65 = trunc i64 %64 to i16
  %66 = getelementptr inbounds i8, i8* %56, i64 6
  %67 = bitcast i8* %66 to i16*
  store i16 %65, i16* %67, align 2
  %68 = ptrtoint i8* %56 to i64
  %69 = and i64 %68, -131072
  %70 = inttoptr i64 %69 to i8*
  %71 = getelementptr inbounds i8, i8* %70, i64 4400
  %72 = bitcast i8* %71 to %"class.blink::PlatformAwareObjectStartBitmap"*
  %73 = bitcast i8* %71 to i64*
  %74 = load i64, i64* %73, align 16
  %75 = sub i64 %68, %74
  %76 = lshr i64 %75, 3
  %77 = lshr i64 %75, 6
  %78 = getelementptr inbounds %"class.blink::PlatformAwareObjectStartBitmap", %"class.blink::PlatformAwareObjectStartBitmap"* %72, i64 0, i32 0, i32 1, i64 %77
  %79 = load i8, i8* %78, align 1
  %80 = trunc i64 %76 to i32
  %81 = and i32 %80, 7
  %82 = shl i32 1, %81
  %83 = trunc i32 %82 to i8
  %84 = or i8 %79, %83
  store atomic i8 %84, i8* %78 release, align 1
  %85 = getelementptr inbounds i8, i8* %56, i64 8
  br label %89

86:                                               ; preds = %48
  %87 = zext i32 %29 to i64
  %88 = call i8* @_ZN5blink15NormalPageArena17OutOfLineAllocateEmm(%"class.blink::NormalPageArena"* %32, i64 %50, i64 %87) #7
  br label %89

89:                                               ; preds = %54, %86
  %90 = phi i8* [ %85, %54 ], [ %88, %86 ]
  ret i8* %90
}

declare i8* @_ZN3WTF10Partitions16FastZeroedMallocEmPKc(i64, i8*) local_unnamed_addr #1

declare i8* @_ZNK4base18ThreadLocalStorage4Slot3GetEv(%"class.base::ThreadLocalStorage::Slot"*) local_unnamed_addr #1

declare void @_ZN4base18ThreadLocalStorage4Slot3SetEPv(%"class.base::ThreadLocalStorage::Slot"*, i8*) local_unnamed_addr #1

declare i8* @_ZN5blink15NormalPageArena17OutOfLineAllocateEmm(%"class.blink::NormalPageArena"*, i64, i64) local_unnamed_addr #1

declare void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* sret, i8*, i32, %"class.logging::CheckOpResult"*) local_unnamed_addr #1

declare dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"*) local_unnamed_addr #1

; Function Attrs: nounwind
declare void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"*) unnamed_addr #3

declare i8* @_ZN7logging15CheckOpValueStrEm(i64) local_unnamed_addr #1

declare void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"*, i8*, i8*, i8*) unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN5blink10TraceTraitINS_17IDLDictionaryBaseEE5TraceEPNS_7VisitorEPKv(%"class.blink::Visitor"*, i8*) #0 comdat align 2 {
  %3 = bitcast i8* %1 to %"class.blink::IDLDictionaryBase"*
  %4 = bitcast i8* %1 to void (%"class.blink::IDLDictionaryBase"*, %"class.blink::Visitor"*)***
  %5 = load void (%"class.blink::IDLDictionaryBase"*, %"class.blink::Visitor"*)**, void (%"class.blink::IDLDictionaryBase"*, %"class.blink::Visitor"*)*** %4, align 8
  %6 = getelementptr inbounds void (%"class.blink::IDLDictionaryBase"*, %"class.blink::Visitor"*)*, void (%"class.blink::IDLDictionaryBase"*, %"class.blink::Visitor"*)** %5, i64 3
  %7 = load void (%"class.blink::IDLDictionaryBase"*, %"class.blink::Visitor"*)*, void (%"class.blink::IDLDictionaryBase"*, %"class.blink::Visitor"*)** %6, align 8
  tail call void %7(%"class.blink::IDLDictionaryBase"* %3, %"class.blink::Visitor"* %0) #7
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN5blink8internal14FinalizerTraitINS_17IDLDictionaryBaseEE8FinalizeEPv(i8*) #0 comdat align 2 {
  %2 = bitcast i8* %0 to %"class.blink::IDLDictionaryBase"*
  %3 = bitcast i8* %0 to void (%"class.blink::IDLDictionaryBase"*)***
  %4 = load void (%"class.blink::IDLDictionaryBase"*)**, void (%"class.blink::IDLDictionaryBase"*)*** %3, align 8
  %5 = load void (%"class.blink::IDLDictionaryBase"*)*, void (%"class.blink::IDLDictionaryBase"*)** %4, align 8
  tail call void %5(%"class.blink::IDLDictionaryBase"* %2) #7
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden { i8*, i8 } @_ZN5blink9NameTraitINS_17IDLDictionaryBaseEE7GetNameEPKv(i8*) #0 comdat align 2 {
  ret { i8*, i8 } { i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.17, i64 0, i64 0), i8 1 }
}

declare i32 @_ZN5blink11GCInfoTable17EnsureGCInfoIndexEPKNS_6GCInfoEPNSt3__16atomicIjEE(%"class.blink::GCInfoTable"*, %"struct.blink::GCInfo"*, %"struct.std::__1::atomic"*) local_unnamed_addr #1

declare %"class.WTF::StringImpl"* @_ZN5blink26ReplaceUnmatchedSurrogatesEN3WTF6StringE(%"class.WTF::StringImpl"*) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZN5blink16V8StringResourceILNS_20V8StringResourceModeE3EE11PrepareFastEv(%"class.blink::V8StringResource"*) local_unnamed_addr #0 comdat align 2 {
  %2 = getelementptr inbounds %"class.blink::V8StringResource", %"class.blink::V8StringResource"* %0, i64 0, i32 0, i32 0
  %3 = load %"class.v8::Value"*, %"class.v8::Value"** %2, align 8
  %4 = icmp eq %"class.v8::Value"* %3, null
  br i1 %4, label %118, label %5

5:                                                ; preds = %1
  %6 = bitcast %"class.v8::Value"* %3 to i64*
  %7 = load i64, i64* %6, align 8
  %8 = and i64 %7, 3
  %9 = icmp eq i64 %8, 1
  br i1 %9, label %10, label %57

10:                                               ; preds = %5
  %11 = add i64 %7, -1
  %12 = inttoptr i64 %11 to i32*
  %13 = load i32, i32* %12, align 4
  %14 = and i64 %7, -4294967296
  %15 = zext i32 %13 to i64
  %16 = or i64 %14, %15
  %17 = add i64 %16, 7
  %18 = inttoptr i64 %17 to i16*
  %19 = load i16, i16* %18, align 2
  %20 = icmp eq i16 %19, 67
  br i1 %20, label %21, label %46

21:                                               ; preds = %10
  %22 = add i64 %7, 23
  %23 = inttoptr i64 %22 to i32*
  %24 = load i32, i32* %23, align 4
  %25 = and i32 %24, -2
  switch i32 %25, label %46 [
    i32 6, label %26
    i32 10, label %26
  ]

26:                                               ; preds = %21, %21
  %27 = getelementptr inbounds %"class.blink::V8StringResource", %"class.blink::V8StringResource"* %0, i64 0, i32 2
  %28 = bitcast %"class.WTF::String"* %27 to i64*
  %29 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %27, i64 0, i32 0, i32 0
  %30 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %29, align 8
  store i64 0, i64* %28, align 8
  %31 = icmp eq %"class.WTF::StringImpl"* %30, null
  br i1 %31, label %45, label %32

32:                                               ; preds = %26
  %33 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %30, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %34 = load atomic i32, i32* %33 monotonic, align 4
  %35 = and i32 %34, 2
  %36 = icmp eq i32 %35, 0
  %37 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %30, i64 0, i32 0
  %38 = load i32, i32* %37, align 4
  br i1 %36, label %39, label %41

39:                                               ; preds = %32
  %40 = add i32 %38, -1
  store i32 %40, i32* %37, align 4
  br label %41

41:                                               ; preds = %39, %32
  %42 = phi i32 [ %40, %39 ], [ %38, %32 ]
  %43 = icmp eq i32 %42, 0
  br i1 %43, label %44, label %45

44:                                               ; preds = %41
  tail call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %30) #7
  br label %45

45:                                               ; preds = %44, %41, %26
  store %"class.v8::Value"* null, %"class.v8::Value"** %2, align 8
  br label %118

46:                                               ; preds = %21, %10
  %47 = add i64 %7, -1
  %48 = inttoptr i64 %47 to i32*
  %49 = load i32, i32* %48, align 4
  %50 = and i64 %7, -4294967296
  %51 = zext i32 %49 to i64
  %52 = or i64 %50, %51
  %53 = add i64 %52, 7
  %54 = inttoptr i64 %53 to i16*
  %55 = load i16, i16* %54, align 2
  %56 = icmp ult i16 %55, 64
  br i1 %56, label %118, label %57, !prof !3

57:                                               ; preds = %5, %46
  %58 = tail call zeroext i1 @_ZNK2v85Value7IsInt32Ev(%"class.v8::Value"* nonnull %3) #7
  br i1 %58, label %59, label %116, !prof !3

59:                                               ; preds = %57
  %60 = bitcast %"class.blink::V8StringResource"* %0 to %"class.v8::Int32"**
  %61 = load %"class.v8::Int32"*, %"class.v8::Int32"** %60, align 8
  %62 = tail call i32 @_ZNK2v85Int325ValueEv(%"class.v8::Int32"* %61) #7
  %63 = tail call %"class.WTF::StringImpl"* @_ZN5blink13ToBlinkStringEi(i32 %62) #7
  %64 = getelementptr inbounds %"class.blink::V8StringResource", %"class.blink::V8StringResource"* %0, i64 0, i32 2
  %65 = icmp eq %"class.WTF::StringImpl"* %63, null
  br i1 %65, label %83, label %66

66:                                               ; preds = %59
  %67 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %63, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %68 = load atomic i32, i32* %67 monotonic, align 4
  %69 = and i32 %68, 2
  %70 = icmp eq i32 %69, 0
  br i1 %70, label %71, label %83

71:                                               ; preds = %66
  %72 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %63, i64 0, i32 0
  %73 = load i32, i32* %72, align 4
  %74 = zext i32 %73 to i33
  %75 = tail call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %74, i33 1) #7
  %76 = extractvalue { i33, i1 } %75, 1
  %77 = extractvalue { i33, i1 } %75, 0
  %78 = icmp slt i33 %77, 0
  %79 = or i1 %76, %78
  br i1 %79, label %80, label %81, !prof !2

80:                                               ; preds = %71
  tail call void @llvm.trap() #7
  unreachable

81:                                               ; preds = %71
  %82 = trunc i33 %77 to i32
  store i32 %82, i32* %72, align 4
  br label %83

83:                                               ; preds = %81, %66, %59
  %84 = ptrtoint %"class.WTF::StringImpl"* %63 to i64
  %85 = bitcast %"class.WTF::String"* %64 to i64*
  %86 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %64, i64 0, i32 0, i32 0
  %87 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %86, align 8
  store i64 %84, i64* %85, align 8
  %88 = icmp eq %"class.WTF::StringImpl"* %87, null
  br i1 %88, label %102, label %89

89:                                               ; preds = %83
  %90 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %87, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %91 = load atomic i32, i32* %90 monotonic, align 4
  %92 = and i32 %91, 2
  %93 = icmp eq i32 %92, 0
  %94 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %87, i64 0, i32 0
  %95 = load i32, i32* %94, align 4
  br i1 %93, label %96, label %98

96:                                               ; preds = %89
  %97 = add i32 %95, -1
  store i32 %97, i32* %94, align 4
  br label %98

98:                                               ; preds = %96, %89
  %99 = phi i32 [ %97, %96 ], [ %95, %89 ]
  %100 = icmp eq i32 %99, 0
  br i1 %100, label %101, label %102

101:                                              ; preds = %98
  tail call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %87) #7
  br label %102

102:                                              ; preds = %83, %98, %101
  store %"class.v8::Value"* null, %"class.v8::Value"** %2, align 8
  br i1 %65, label %118, label %103

103:                                              ; preds = %102
  %104 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %63, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %105 = load atomic i32, i32* %104 monotonic, align 4
  %106 = and i32 %105, 2
  %107 = icmp eq i32 %106, 0
  %108 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %63, i64 0, i32 0
  %109 = load i32, i32* %108, align 4
  br i1 %107, label %110, label %112

110:                                              ; preds = %103
  %111 = add i32 %109, -1
  store i32 %111, i32* %108, align 4
  br label %112

112:                                              ; preds = %110, %103
  %113 = phi i32 [ %111, %110 ], [ %109, %103 ]
  %114 = icmp eq i32 %113, 0
  br i1 %114, label %115, label %118

115:                                              ; preds = %112
  tail call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %63) #7
  br label %118

116:                                              ; preds = %57
  %117 = getelementptr inbounds %"class.blink::V8StringResource", %"class.blink::V8StringResource"* %0, i64 0, i32 1
  store i32 1, i32* %117, align 8
  br label %118

118:                                              ; preds = %115, %112, %102, %46, %1, %116, %45
  %119 = phi i1 [ false, %116 ], [ true, %45 ], [ true, %1 ], [ true, %46 ], [ true, %102 ], [ true, %112 ], [ true, %115 ]
  ret i1 %119
}

declare zeroext i1 @_ZNK2v85Value7IsInt32Ev(%"class.v8::Value"*) local_unnamed_addr #1

declare %"class.WTF::StringImpl"* @_ZN5blink13ToBlinkStringEi(i32) local_unnamed_addr #1

declare i32 @_ZNK2v85Int325ValueEv(%"class.v8::Int32"*) local_unnamed_addr #1

declare %"class.v8::String"* @_ZNK2v85Value8ToStringENS_5LocalINS_7ContextEEE(%"class.v8::Value"*, %"class.v8::Context"*) local_unnamed_addr #1

declare %"class.WTF::StringImpl"* @_ZN5blink13ToBlinkStringIN3WTF6StringEEET_N2v85LocalINS4_6StringEEENS_12ExternalModeE(%"class.v8::String"*, i32) local_unnamed_addr #1

declare zeroext i1 @_ZNK2v85Value8IsUint32Ev(%"class.v8::Value"*) local_unnamed_addr #1

declare i32 @_ZNK2v86Uint325ValueEv(%"class.v8::Uint32"*) local_unnamed_addr #1

declare i64 @_ZN5blink12ToUInt64SlowEPN2v87IsolateENS0_5LocalINS0_5ValueEEENS_30IntegerConversionConfigurationERNS_14ExceptionStateE(%"class.v8::Isolate"*, %"class.v8::Value"*, i32, %"class.blink::ExceptionState"* dereferenceable(72)) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZN5blink16V8StringResourceILNS_20V8StringResourceModeE0EE11PrepareFastEv(%"class.blink::V8StringResource.5"*) local_unnamed_addr #0 comdat align 2 {
  %2 = getelementptr inbounds %"class.blink::V8StringResource.5", %"class.blink::V8StringResource.5"* %0, i64 0, i32 0, i32 0
  %3 = load %"class.v8::Value"*, %"class.v8::Value"** %2, align 8
  %4 = icmp eq %"class.v8::Value"* %3, null
  br i1 %4, label %82, label %5

5:                                                ; preds = %1
  %6 = bitcast %"class.v8::Value"* %3 to i64*
  %7 = load i64, i64* %6, align 8
  %8 = and i64 %7, 3
  %9 = icmp eq i64 %8, 1
  br i1 %9, label %10, label %21, !prof !5

10:                                               ; preds = %5
  %11 = add i64 %7, -1
  %12 = inttoptr i64 %11 to i32*
  %13 = load i32, i32* %12, align 4
  %14 = and i64 %7, -4294967296
  %15 = zext i32 %13 to i64
  %16 = or i64 %14, %15
  %17 = add i64 %16, 7
  %18 = inttoptr i64 %17 to i16*
  %19 = load i16, i16* %18, align 2
  %20 = icmp ult i16 %19, 64
  br i1 %20, label %82, label %21, !prof !3

21:                                               ; preds = %5, %10
  %22 = tail call zeroext i1 @_ZNK2v85Value7IsInt32Ev(%"class.v8::Value"* nonnull %3) #7
  br i1 %22, label %23, label %80, !prof !3

23:                                               ; preds = %21
  %24 = bitcast %"class.blink::V8StringResource.5"* %0 to %"class.v8::Int32"**
  %25 = load %"class.v8::Int32"*, %"class.v8::Int32"** %24, align 8
  %26 = tail call i32 @_ZNK2v85Int325ValueEv(%"class.v8::Int32"* %25) #7
  %27 = tail call %"class.WTF::StringImpl"* @_ZN5blink13ToBlinkStringEi(i32 %26) #7
  %28 = getelementptr inbounds %"class.blink::V8StringResource.5", %"class.blink::V8StringResource.5"* %0, i64 0, i32 2
  %29 = icmp eq %"class.WTF::StringImpl"* %27, null
  br i1 %29, label %47, label %30

30:                                               ; preds = %23
  %31 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %27, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %32 = load atomic i32, i32* %31 monotonic, align 4
  %33 = and i32 %32, 2
  %34 = icmp eq i32 %33, 0
  br i1 %34, label %35, label %47

35:                                               ; preds = %30
  %36 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %27, i64 0, i32 0
  %37 = load i32, i32* %36, align 4
  %38 = zext i32 %37 to i33
  %39 = tail call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %38, i33 1) #7
  %40 = extractvalue { i33, i1 } %39, 1
  %41 = extractvalue { i33, i1 } %39, 0
  %42 = icmp slt i33 %41, 0
  %43 = or i1 %40, %42
  br i1 %43, label %44, label %45, !prof !2

44:                                               ; preds = %35
  tail call void @llvm.trap() #7
  unreachable

45:                                               ; preds = %35
  %46 = trunc i33 %41 to i32
  store i32 %46, i32* %36, align 4
  br label %47

47:                                               ; preds = %45, %30, %23
  %48 = ptrtoint %"class.WTF::StringImpl"* %27 to i64
  %49 = bitcast %"class.WTF::String"* %28 to i64*
  %50 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %28, i64 0, i32 0, i32 0
  %51 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %50, align 8
  store i64 %48, i64* %49, align 8
  %52 = icmp eq %"class.WTF::StringImpl"* %51, null
  br i1 %52, label %66, label %53

53:                                               ; preds = %47
  %54 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %51, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %55 = load atomic i32, i32* %54 monotonic, align 4
  %56 = and i32 %55, 2
  %57 = icmp eq i32 %56, 0
  %58 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %51, i64 0, i32 0
  %59 = load i32, i32* %58, align 4
  br i1 %57, label %60, label %62

60:                                               ; preds = %53
  %61 = add i32 %59, -1
  store i32 %61, i32* %58, align 4
  br label %62

62:                                               ; preds = %60, %53
  %63 = phi i32 [ %61, %60 ], [ %59, %53 ]
  %64 = icmp eq i32 %63, 0
  br i1 %64, label %65, label %66

65:                                               ; preds = %62
  tail call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %51) #7
  br label %66

66:                                               ; preds = %47, %62, %65
  store %"class.v8::Value"* null, %"class.v8::Value"** %2, align 8
  br i1 %29, label %82, label %67

67:                                               ; preds = %66
  %68 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %27, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %69 = load atomic i32, i32* %68 monotonic, align 4
  %70 = and i32 %69, 2
  %71 = icmp eq i32 %70, 0
  %72 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %27, i64 0, i32 0
  %73 = load i32, i32* %72, align 4
  br i1 %71, label %74, label %76

74:                                               ; preds = %67
  %75 = add i32 %73, -1
  store i32 %75, i32* %72, align 4
  br label %76

76:                                               ; preds = %74, %67
  %77 = phi i32 [ %75, %74 ], [ %73, %67 ]
  %78 = icmp eq i32 %77, 0
  br i1 %78, label %79, label %82

79:                                               ; preds = %76
  tail call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %27) #7
  br label %82

80:                                               ; preds = %21
  %81 = getelementptr inbounds %"class.blink::V8StringResource.5", %"class.blink::V8StringResource.5"* %0, i64 0, i32 1
  store i32 1, i32* %81, align 8
  br label %82

82:                                               ; preds = %79, %76, %66, %10, %1, %80
  %83 = phi i1 [ false, %80 ], [ true, %1 ], [ true, %10 ], [ true, %66 ], [ true, %76 ], [ true, %79 ]
  ret i1 %83
}

declare %"class.v8::Isolate"* @_ZN2v87Isolate10GetCurrentEv() local_unnamed_addr #1

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind }
attributes #3 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { inlinehint nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind readnone speculatable }
attributes #6 = { cold noreturn nounwind }
attributes #7 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{!"branch_weights", i32 1, i32 2000}
!3 = !{!"branch_weights", i32 2000, i32 1}
!4 = !{i8 0, i8 2}
!5 = !{!"branch_weights", i32 2146410443, i32 1073205}
