; ModuleID = '../../third_party/brotli/enc/metablock.c'
source_filename = "../../third_party/brotli/enc/metablock.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%union.anon = type { %struct.ContextBlockSplitter }
%struct.ContextBlockSplitter = type { i64, i64, i64, i64, double, i64, %struct.BlockSplit*, %struct.HistogramLiteral*, i64*, i64, i64, i64, [2 x i64], [26 x double], i64 }
%struct.BlockSplit = type { i64, i64, i8*, i32*, i64, i64 }
%struct.HistogramLiteral = type { [256 x i32], i64, double }
%struct.BlockSplitterCommand = type { i64, i64, double, i64, %struct.BlockSplit*, %struct.HistogramCommand*, i64*, i64, i64, i64, [2 x i64], [2 x double], i64 }
%struct.HistogramCommand = type { [704 x i32], i64, double }
%struct.BlockSplitterDistance = type { i64, i64, double, i64, %struct.BlockSplit*, %struct.HistogramDistance*, i64*, i64, i64, i64, [2 x i64], [2 x double], i64 }
%struct.HistogramDistance = type { [544 x i32], i64, double }
%struct.BrotliEncoderParams = type { i32, i32, i32, i32, i64, i64, i32, i32, %struct.BrotliHasherParams, %struct.BrotliDistanceParams, %struct.BrotliEncoderDictionary }
%struct.BrotliHasherParams = type { i32, i32, i32, i32, i32 }
%struct.BrotliDistanceParams = type { i32, i32, i32, i32, i64 }
%struct.BrotliEncoderDictionary = type { %struct.BrotliDictionary*, i32, i32, i64, i16*, i8*, i16*, %struct.DictWord* }
%struct.BrotliDictionary = type { [32 x i8], [32 x i32], i64, i8* }
%struct.DictWord = type { i8, i8, i16 }
%struct.MemoryManager = type { i8* (i8*, i64)*, void (i8*, i8*)*, i8* }
%struct.Command = type { i32, i32, i32, i16, i16 }
%struct.MetaBlockSplit = type { %struct.BlockSplit, %struct.BlockSplit, %struct.BlockSplit, i32*, i64, i32*, i64, %struct.HistogramLiteral*, i64, %struct.HistogramCommand*, i64, %struct.HistogramDistance*, i64 }
%struct.BlockSplitterLiteral = type { i64, i64, double, i64, %struct.BlockSplit*, %struct.HistogramLiteral*, i64*, i64, i64, i64, [2 x i64], [2 x double], i64 }

@__const.BrotliBuildMetaBlockGreedyInternal.lit_blocks = private unnamed_addr constant %union.anon { %struct.ContextBlockSplitter { i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, double 0xFFFFFFFFFFFFFFFF, i64 -6148914691236517206, %struct.BlockSplit* inttoptr (i64 -6148914691236517206 to %struct.BlockSplit*), %struct.HistogramLiteral* inttoptr (i64 -6148914691236517206 to %struct.HistogramLiteral*), i64* inttoptr (i64 -6148914691236517206 to i64*), i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, [2 x i64] [i64 -6148914691236517206, i64 -6148914691236517206], [26 x double] [double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF], i64 -6148914691236517206 } }, align 8
@__const.BrotliBuildMetaBlockGreedyInternal.cmd_blocks = private unnamed_addr constant %struct.BlockSplitterCommand { i64 -6148914691236517206, i64 -6148914691236517206, double 0xFFFFFFFFFFFFFFFF, i64 -6148914691236517206, %struct.BlockSplit* inttoptr (i64 -6148914691236517206 to %struct.BlockSplit*), %struct.HistogramCommand* inttoptr (i64 -6148914691236517206 to %struct.HistogramCommand*), i64* inttoptr (i64 -6148914691236517206 to i64*), i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, [2 x i64] [i64 -6148914691236517206, i64 -6148914691236517206], [2 x double] [double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF], i64 -6148914691236517206 }, align 8
@__const.BrotliBuildMetaBlockGreedyInternal.dist_blocks = private unnamed_addr constant %struct.BlockSplitterDistance { i64 -6148914691236517206, i64 -6148914691236517206, double 0xFFFFFFFFFFFFFFFF, i64 -6148914691236517206, %struct.BlockSplit* inttoptr (i64 -6148914691236517206 to %struct.BlockSplit*), %struct.HistogramDistance* inttoptr (i64 -6148914691236517206 to %struct.HistogramDistance*), i64* inttoptr (i64 -6148914691236517206 to i64*), i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, [2 x i64] [i64 -6148914691236517206, i64 -6148914691236517206], [2 x double] [double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF], i64 -6148914691236517206 }, align 8
@__const.BlockSplitterFinishBlockLiteral.combined_histo = private unnamed_addr constant [2 x %struct.HistogramLiteral] [%struct.HistogramLiteral { [256 x i32] [i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766], i64 -6148914691236517206, double 0xFFFFFFFFFFFFFFFF }, %struct.HistogramLiteral { [256 x i32] [i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766], i64 -6148914691236517206, double 0xFFFFFFFFFFFFFFFF }], align 16
@kBrotliLog2Table = external hidden local_unnamed_addr constant [256 x double], align 16
@__const.BlockSplitterFinishBlockCommand.combined_histo = private unnamed_addr constant [2 x %struct.HistogramCommand] [%struct.HistogramCommand { [704 x i32] [i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766], i64 -6148914691236517206, double 0xFFFFFFFFFFFFFFFF }, %struct.HistogramCommand { [704 x i32] [i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766], i64 -6148914691236517206, double 0xFFFFFFFFFFFFFFFF }], align 16
@__const.BlockSplitterFinishBlockDistance.combined_histo = private unnamed_addr constant [2 x %struct.HistogramDistance] [%struct.HistogramDistance { [544 x i32] [i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766], i64 -6148914691236517206, double 0xFFFFFFFFFFFFFFFF }, %struct.HistogramDistance { [544 x i32] [i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766], i64 -6148914691236517206, double 0xFFFFFFFFFFFFFFFF }], align 16

; Function Attrs: nofree nounwind ssp uwtable
define hidden void @BrotliInitDistanceParams(%struct.BrotliEncoderParams* nocapture, i32, i32) local_unnamed_addr #0 {
  %4 = getelementptr inbounds %struct.BrotliEncoderParams, %struct.BrotliEncoderParams* %0, i64 0, i32 9, i32 0
  store i32 %1, i32* %4, align 8
  %5 = getelementptr inbounds %struct.BrotliEncoderParams, %struct.BrotliEncoderParams* %0, i64 0, i32 9, i32 1
  store i32 %2, i32* %5, align 4
  %6 = add i32 %2, 16
  %7 = add i32 %1, 1
  %8 = shl i32 24, %7
  %9 = add i32 %6, %8
  %10 = add i32 %1, 26
  %11 = shl i32 1, %10
  %12 = add i32 %11, %2
  %13 = add i32 %1, 2
  %14 = shl i32 -1, %13
  %15 = add i32 %12, %14
  %16 = getelementptr inbounds %struct.BrotliEncoderParams, %struct.BrotliEncoderParams* %0, i64 0, i32 7
  %17 = load i32, i32* %16, align 4
  %18 = icmp eq i32 %17, 0
  br i1 %18, label %59, label %19

19:                                               ; preds = %3
  %20 = icmp ugt i32 %2, 2147483643
  br i1 %20, label %54, label %21

21:                                               ; preds = %19
  %22 = sub nuw nsw i32 2147483644, %2
  %23 = shl nsw i32 -1, %1
  %24 = lshr i32 %22, %1
  %25 = add nuw i32 %24, 4
  %26 = lshr i32 %25, 1
  %27 = tail call i32 @llvm.ctlz.i32(i32 %26, i1 false) #6, !range !2
  %28 = sub nsw i32 31, %27
  %29 = lshr i32 %25, %28
  %30 = and i32 %29, 1
  %31 = shl nuw nsw i32 %27, 1
  %32 = sub nsw i32 60, %31
  %33 = or i32 %30, %32
  %34 = icmp eq i32 %33, 0
  br i1 %34, label %54, label %35

35:                                               ; preds = %21
  %36 = xor i32 %23, -1
  %37 = add nsw i32 %33, -1
  %38 = lshr i32 %37, 1
  %39 = add nuw i32 %38, 1
  %40 = shl i32 2, %38
  %41 = shl i32 4, %38
  %42 = and i32 %37, 1
  %43 = shl i32 %42, %39
  %44 = shl i32 %37, %1
  %45 = or i32 %44, %36
  %46 = add nuw i32 %2, 17
  %47 = add i32 %46, %45
  %48 = add i32 %40, -5
  %49 = add i32 %48, %41
  %50 = add i32 %49, %43
  %51 = shl i32 %50, %1
  %52 = sub i32 %2, %23
  %53 = add i32 %52, %51
  br label %54

54:                                               ; preds = %21, %19, %35
  %55 = phi i32 [ -2147483636, %19 ], [ %47, %35 ], [ %6, %21 ]
  %56 = phi i32 [ 2147483644, %19 ], [ %53, %35 ], [ %2, %21 ]
  %57 = shl i32 62, %7
  %58 = add i32 %6, %57
  br label %59

59:                                               ; preds = %3, %54
  %60 = phi i32 [ %55, %54 ], [ %9, %3 ]
  %61 = phi i32 [ %56, %54 ], [ %15, %3 ]
  %62 = phi i32 [ %58, %54 ], [ %9, %3 ]
  %63 = getelementptr inbounds %struct.BrotliEncoderParams, %struct.BrotliEncoderParams* %0, i64 0, i32 9, i32 2
  store i32 %62, i32* %63, align 8
  %64 = getelementptr inbounds %struct.BrotliEncoderParams, %struct.BrotliEncoderParams* %0, i64 0, i32 9, i32 3
  store i32 %60, i32* %64, align 4
  %65 = zext i32 %61 to i64
  %66 = getelementptr inbounds %struct.BrotliEncoderParams, %struct.BrotliEncoderParams* %0, i64 0, i32 9, i32 4
  store i64 %65, i64* %66, align 8
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nounwind ssp uwtable
define hidden void @BrotliBuildMetaBlock(%struct.MemoryManager*, i8*, i64, i64, %struct.BrotliEncoderParams*, i8 zeroext, i8 zeroext, %struct.Command*, i64, i32, %struct.MetaBlockSplit*) local_unnamed_addr #2 {
  %12 = alloca %struct.BrotliEncoderParams, align 8
  %13 = alloca %struct.BrotliEncoderParams, align 8
  %14 = alloca double, align 8
  %15 = alloca double, align 8
  %16 = bitcast %struct.BrotliEncoderParams* %12 to i8*
  call void @llvm.lifetime.start.p0i8(i64 144, i8* nonnull %16) #6
  %17 = bitcast %struct.BrotliEncoderParams* %4 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %16, i8* align 8 %17, i64 144, i1 false)
  %18 = bitcast %struct.BrotliEncoderParams* %13 to i8*
  call void @llvm.lifetime.start.p0i8(i64 144, i8* nonnull %18) #6
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %18, i8* align 8 %17, i64 144, i1 false)
  %19 = bitcast double* %14 to i8*
  %20 = getelementptr inbounds %struct.BrotliEncoderParams, %struct.BrotliEncoderParams* %13, i64 0, i32 9, i32 0
  %21 = getelementptr inbounds %struct.BrotliEncoderParams, %struct.BrotliEncoderParams* %13, i64 0, i32 9, i32 1
  %22 = getelementptr inbounds %struct.BrotliEncoderParams, %struct.BrotliEncoderParams* %13, i64 0, i32 7
  %23 = getelementptr inbounds %struct.BrotliEncoderParams, %struct.BrotliEncoderParams* %13, i64 0, i32 9, i32 2
  %24 = getelementptr inbounds %struct.BrotliEncoderParams, %struct.BrotliEncoderParams* %13, i64 0, i32 9, i32 3
  %25 = getelementptr inbounds %struct.BrotliEncoderParams, %struct.BrotliEncoderParams* %13, i64 0, i32 9, i32 4
  %26 = getelementptr inbounds %struct.BrotliEncoderParams, %struct.BrotliEncoderParams* %12, i64 0, i32 9
  %27 = getelementptr inbounds %struct.BrotliDistanceParams, %struct.BrotliDistanceParams* %26, i64 0, i32 0
  %28 = getelementptr inbounds %struct.BrotliEncoderParams, %struct.BrotliEncoderParams* %12, i64 0, i32 9, i32 1
  %29 = getelementptr inbounds %struct.BrotliEncoderParams, %struct.BrotliEncoderParams* %13, i64 0, i32 9
  %30 = getelementptr inbounds %struct.BrotliEncoderParams, %struct.BrotliEncoderParams* %4, i64 0, i32 9
  %31 = bitcast %struct.BrotliDistanceParams* %30 to i8*
  %32 = bitcast %struct.BrotliDistanceParams* %29 to i8*
  br label %33

33:                                               ; preds = %127, %11
  %34 = phi double [ 0x547D42AEA2879F2E, %11 ], [ %129, %127 ]
  %35 = phi i32 [ 1, %11 ], [ %128, %127 ]
  %36 = phi i32 [ 0, %11 ], [ %130, %127 ]
  %37 = phi i32 [ 0, %11 ], [ %39, %127 ]
  %38 = icmp ult i32 %36, 16
  %39 = add nuw nsw i32 %37, 1
  br i1 %38, label %40, label %116

40:                                               ; preds = %33
  %41 = shl i32 48, %37
  %42 = shl i32 67108864, %37
  %43 = shl i32 -4, %37
  %44 = add i32 %43, %42
  %45 = shl nsw i32 -1, %37
  %46 = xor i32 %45, -1
  %47 = shl i32 124, %37
  %48 = load i32, i32* %22, align 4
  %49 = icmp eq i32 %48, 0
  br label %50

50:                                               ; preds = %113, %40
  %51 = phi double [ %34, %40 ], [ %111, %113 ]
  %52 = phi i32 [ %35, %40 ], [ %107, %113 ]
  %53 = phi i32 [ %36, %40 ], [ %114, %113 ]
  %54 = shl i32 %53, %37
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %19) #6
  store double 0xFFFFFFFFFFFFFFFF, double* %14, align 8
  store i32 %37, i32* %20, align 8
  store i32 %54, i32* %21, align 4
  %55 = add i32 %54, 16
  %56 = add i32 %55, %41
  %57 = add i32 %44, %54
  br i1 %49, label %95, label %58

58:                                               ; preds = %50
  %59 = icmp ugt i32 %54, 2147483643
  br i1 %59, label %91, label %60

60:                                               ; preds = %58
  %61 = sub nuw nsw i32 2147483644, %54
  %62 = lshr i32 %61, %37
  %63 = add nuw i32 %62, 4
  %64 = lshr i32 %63, 1
  %65 = tail call i32 @llvm.ctlz.i32(i32 %64, i1 false) #6, !range !2
  %66 = sub nsw i32 31, %65
  %67 = lshr i32 %63, %66
  %68 = and i32 %67, 1
  %69 = shl nuw nsw i32 %65, 1
  %70 = sub nsw i32 60, %69
  %71 = or i32 %68, %70
  %72 = icmp eq i32 %71, 0
  br i1 %72, label %91, label %73

73:                                               ; preds = %60
  %74 = add nsw i32 %71, -1
  %75 = lshr i32 %74, 1
  %76 = add nuw i32 %75, 1
  %77 = shl i32 2, %75
  %78 = shl i32 4, %75
  %79 = and i32 %74, 1
  %80 = shl i32 %79, %76
  %81 = shl i32 %74, %37
  %82 = or i32 %81, %46
  %83 = add nuw i32 %54, 17
  %84 = add i32 %83, %82
  %85 = add i32 %77, -5
  %86 = add i32 %85, %78
  %87 = add i32 %86, %80
  %88 = shl i32 %87, %37
  %89 = sub i32 %54, %45
  %90 = add i32 %89, %88
  br label %91

91:                                               ; preds = %73, %60, %58
  %92 = phi i32 [ -2147483636, %58 ], [ %84, %73 ], [ %55, %60 ]
  %93 = phi i32 [ 2147483644, %58 ], [ %90, %73 ], [ %54, %60 ]
  %94 = add i32 %55, %47
  br label %95

95:                                               ; preds = %50, %91
  %96 = phi i32 [ %92, %91 ], [ %56, %50 ]
  %97 = phi i32 [ %93, %91 ], [ %57, %50 ]
  %98 = phi i32 [ %94, %91 ], [ %56, %50 ]
  store i32 %98, i32* %23, align 8
  store i32 %96, i32* %24, align 4
  %99 = zext i32 %97 to i64
  store i64 %99, i64* %25, align 8
  %100 = load i32, i32* %27, align 8
  %101 = icmp eq i32 %37, %100
  br i1 %101, label %102, label %106

102:                                              ; preds = %95
  %103 = load i32, i32* %28, align 4
  %104 = icmp eq i32 %54, %103
  %105 = select i1 %104, i32 0, i32 %52
  br label %106

106:                                              ; preds = %102, %95
  %107 = phi i32 [ %52, %95 ], [ %105, %102 ]
  %108 = call fastcc i32 @ComputeDistanceCost(%struct.Command* %7, i64 %8, %struct.BrotliDistanceParams* %26, %struct.BrotliDistanceParams* %29, double* nonnull %14)
  %109 = icmp eq i32 %108, 0
  br i1 %109, label %122, label %110

110:                                              ; preds = %106
  %111 = load double, double* %14, align 8
  %112 = fcmp ogt double %111, %51
  br i1 %112, label %122, label %113

113:                                              ; preds = %110
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %31, i8* align 8 %32, i64 24, i1 false)
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %19) #6
  %114 = add nuw i32 %53, 1
  %115 = icmp eq i32 %114, 16
  br i1 %115, label %116, label %50

116:                                              ; preds = %113, %33
  %117 = phi i32 [ %36, %33 ], [ 16, %113 ]
  %118 = phi double [ %34, %33 ], [ %111, %113 ]
  %119 = phi i32 [ %35, %33 ], [ %107, %113 ]
  %120 = add nsw i32 %117, -1
  %121 = lshr i32 %120, 1
  br label %127

122:                                              ; preds = %106, %110
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %19) #6
  %123 = icmp eq i32 %53, 0
  %124 = add nsw i32 %53, -1
  %125 = lshr i32 %124, 1
  %126 = select i1 %123, i32 0, i32 %125
  br label %127

127:                                              ; preds = %122, %116
  %128 = phi i32 [ %119, %116 ], [ %107, %122 ]
  %129 = phi double [ %118, %116 ], [ %51, %122 ]
  %130 = phi i32 [ %121, %116 ], [ %126, %122 ]
  %131 = icmp eq i32 %39, 4
  br i1 %131, label %132, label %33

132:                                              ; preds = %127
  %133 = icmp eq i32 %128, 0
  br i1 %133, label %142, label %134

134:                                              ; preds = %132
  %135 = bitcast double* %15 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %135) #6
  store double 0xFFFFFFFFFFFFFFFF, double* %15, align 8
  %136 = call fastcc i32 @ComputeDistanceCost(%struct.Command* %7, i64 %8, %struct.BrotliDistanceParams* %26, %struct.BrotliDistanceParams* %26, double* nonnull %15)
  %137 = load double, double* %15, align 8
  %138 = fcmp olt double %137, %129
  br i1 %138, label %139, label %141

139:                                              ; preds = %134
  %140 = bitcast %struct.BrotliDistanceParams* %26 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %31, i8* align 8 %140, i64 24, i1 false)
  br label %141

141:                                              ; preds = %139, %134
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %135) #6
  br label %142

142:                                              ; preds = %132, %141
  %143 = getelementptr inbounds %struct.BrotliEncoderParams, %struct.BrotliEncoderParams* %12, i64 0, i32 9, i32 0
  %144 = load i32, i32* %143, align 8
  %145 = getelementptr inbounds %struct.BrotliEncoderParams, %struct.BrotliEncoderParams* %4, i64 0, i32 9, i32 0
  %146 = load i32, i32* %145, align 8
  %147 = icmp eq i32 %144, %146
  br i1 %147, label %148, label %155

148:                                              ; preds = %142
  %149 = load i32, i32* %28, align 4
  %150 = getelementptr inbounds %struct.BrotliEncoderParams, %struct.BrotliEncoderParams* %4, i64 0, i32 9, i32 1
  %151 = load i32, i32* %150, align 4
  %152 = icmp ne i32 %149, %151
  %153 = icmp ne i64 %8, 0
  %154 = and i1 %153, %152
  br i1 %154, label %159, label %244

155:                                              ; preds = %142
  %156 = icmp eq i64 %8, 0
  br i1 %156, label %244, label %157

157:                                              ; preds = %155
  %158 = load i32, i32* %28, align 4
  br label %159

159:                                              ; preds = %157, %148
  %160 = phi i32 [ %158, %157 ], [ %149, %148 ]
  %161 = getelementptr inbounds %struct.BrotliEncoderParams, %struct.BrotliEncoderParams* %4, i64 0, i32 9, i32 1
  %162 = add i32 %160, 16
  %163 = shl nsw i32 -1, %144
  %164 = xor i32 %163, -1
  br label %165

165:                                              ; preds = %241, %159
  %166 = phi i64 [ 0, %159 ], [ %242, %241 ]
  %167 = getelementptr inbounds %struct.Command, %struct.Command* %7, i64 %166, i32 1
  %168 = load i32, i32* %167, align 4
  %169 = and i32 %168, 33554431
  %170 = icmp eq i32 %169, 0
  br i1 %170, label %241, label %171

171:                                              ; preds = %165
  %172 = getelementptr inbounds %struct.Command, %struct.Command* %7, i64 %166, i32 3
  %173 = load i16, i16* %172, align 4
  %174 = icmp ugt i16 %173, 127
  br i1 %174, label %175, label %241

175:                                              ; preds = %171
  %176 = getelementptr inbounds %struct.Command, %struct.Command* %7, i64 %166, i32 4
  %177 = load i16, i16* %176, align 2
  %178 = zext i16 %177 to i32
  %179 = and i32 %178, 1023
  %180 = icmp ult i32 %179, %162
  br i1 %180, label %197, label %181

181:                                              ; preds = %175
  %182 = lshr i32 %178, 10
  %183 = getelementptr inbounds %struct.Command, %struct.Command* %7, i64 %166, i32 2
  %184 = load i32, i32* %183, align 4
  %185 = sub i32 %179, %160
  %186 = add i32 %185, -16
  %187 = lshr i32 %186, %144
  %188 = and i32 %186, %164
  %189 = and i32 %187, 1
  %190 = or i32 %189, 2
  %191 = shl i32 %190, %182
  %192 = add i32 %191, -4
  %193 = add i32 %192, %184
  %194 = shl i32 %193, %144
  %195 = add i32 %188, %162
  %196 = add i32 %195, %194
  br label %197

197:                                              ; preds = %181, %175
  %198 = phi i32 [ %196, %181 ], [ %179, %175 ]
  %199 = zext i32 %198 to i64
  %200 = load i32, i32* %161, align 4
  %201 = zext i32 %200 to i64
  %202 = load i32, i32* %145, align 8
  %203 = zext i32 %202 to i64
  %204 = getelementptr inbounds %struct.Command, %struct.Command* %7, i64 %166, i32 2
  %205 = add nuw nsw i64 %201, 16
  %206 = icmp ugt i64 %205, %199
  br i1 %206, label %207, label %209

207:                                              ; preds = %197
  %208 = trunc i32 %198 to i16
  store i16 %208, i16* %176, align 2
  br label %239

209:                                              ; preds = %197
  %210 = shl i64 4, %203
  %211 = add nsw i64 %199, -16
  %212 = sub nsw i64 %211, %201
  %213 = add i64 %212, %210
  %214 = trunc i64 %213 to i32
  %215 = tail call i32 @llvm.ctlz.i32(i32 %214, i1 true) #6, !range !3
  %216 = sub nsw i32 30, %215
  %217 = zext i32 %216 to i64
  %218 = shl nsw i32 -1, %202
  %219 = xor i32 %218, 65535
  %220 = zext i32 %219 to i64
  %221 = and i64 %213, %220
  %222 = lshr i64 %213, %217
  %223 = and i64 %222, 1
  %224 = or i64 %223, 2
  %225 = shl i64 %224, %217
  %226 = sub nsw i64 %217, %203
  %227 = shl nsw i64 %226, 10
  %228 = shl nsw i64 %226, 1
  %229 = add nsw i64 %228, -2
  %230 = or i64 %229, %223
  %231 = shl i64 %230, %203
  %232 = add nuw nsw i64 %221, %205
  %233 = add i64 %232, %231
  %234 = or i64 %233, %227
  %235 = trunc i64 %234 to i16
  store i16 %235, i16* %176, align 2
  %236 = sub i64 %213, %225
  %237 = lshr i64 %236, %203
  %238 = trunc i64 %237 to i32
  br label %239

239:                                              ; preds = %209, %207
  %240 = phi i32 [ %238, %209 ], [ 0, %207 ]
  store i32 %240, i32* %204, align 4
  br label %241

241:                                              ; preds = %239, %171, %165
  %242 = add nuw i64 %166, 1
  %243 = icmp ult i64 %242, %8
  br i1 %243, label %165, label %244

244:                                              ; preds = %241, %148, %155
  %245 = getelementptr inbounds %struct.MetaBlockSplit, %struct.MetaBlockSplit* %10, i64 0, i32 0
  %246 = getelementptr inbounds %struct.MetaBlockSplit, %struct.MetaBlockSplit* %10, i64 0, i32 1
  %247 = getelementptr inbounds %struct.MetaBlockSplit, %struct.MetaBlockSplit* %10, i64 0, i32 2
  tail call void @BrotliSplitBlock(%struct.MemoryManager* %0, %struct.Command* %7, i64 %8, i8* %1, i64 %2, i64 %3, %struct.BrotliEncoderParams* %4, %struct.BlockSplit* %245, %struct.BlockSplit* %246, %struct.BlockSplit* %247) #6
  %248 = getelementptr inbounds %struct.BrotliEncoderParams, %struct.BrotliEncoderParams* %4, i64 0, i32 6
  %249 = load i32, i32* %248, align 8
  %250 = icmp eq i32 %249, 0
  %251 = getelementptr inbounds %struct.MetaBlockSplit, %struct.MetaBlockSplit* %10, i64 0, i32 0, i32 0
  %252 = load i64, i64* %251, align 8
  br i1 %250, label %253, label %267

253:                                              ; preds = %244
  %254 = icmp eq i64 %252, 0
  br i1 %254, label %267, label %255

255:                                              ; preds = %253
  %256 = shl i64 %252, 2
  %257 = tail call i8* @BrotliAllocate(%struct.MemoryManager* %0, i64 %256) #6
  %258 = bitcast i8* %257 to i32*
  %259 = load i64, i64* %251, align 8
  %260 = icmp eq i64 %259, 0
  br i1 %260, label %267, label %261

261:                                              ; preds = %255, %261
  %262 = phi i64 [ %264, %261 ], [ 0, %255 ]
  %263 = getelementptr inbounds i32, i32* %258, i64 %262
  store i32 %9, i32* %263, align 4
  %264 = add nuw i64 %262, 1
  %265 = load i64, i64* %251, align 8
  %266 = icmp ult i64 %264, %265
  br i1 %266, label %261, label %267

267:                                              ; preds = %261, %244, %253, %255
  %268 = phi i64 [ 0, %255 ], [ 0, %253 ], [ %252, %244 ], [ %265, %261 ]
  %269 = phi i8* [ %257, %255 ], [ null, %253 ], [ null, %244 ], [ %257, %261 ]
  %270 = phi i32* [ %258, %255 ], [ null, %253 ], [ null, %244 ], [ %258, %261 ]
  %271 = phi i64 [ 64, %255 ], [ 64, %253 ], [ 1, %244 ], [ 64, %261 ]
  %272 = getelementptr inbounds %struct.MetaBlockSplit, %struct.MetaBlockSplit* %10, i64 0, i32 0, i32 0
  %273 = mul i64 %268, %271
  %274 = icmp eq i64 %273, 0
  br i1 %274, label %317, label %275

275:                                              ; preds = %267
  %276 = mul i64 %273, 1040
  %277 = tail call i8* @BrotliAllocate(%struct.MemoryManager* %0, i64 %276) #6
  %278 = bitcast i8* %277 to %struct.HistogramLiteral*
  %279 = add i64 %273, -1
  %280 = and i64 %273, 3
  %281 = icmp ult i64 %279, 3
  br i1 %281, label %305, label %282

282:                                              ; preds = %275
  %283 = sub i64 %273, %280
  br label %284

284:                                              ; preds = %284, %282
  %285 = phi i64 [ 0, %282 ], [ %302, %284 ]
  %286 = phi i64 [ %283, %282 ], [ %303, %284 ]
  %287 = getelementptr inbounds %struct.HistogramLiteral, %struct.HistogramLiteral* %278, i64 %285
  %288 = getelementptr inbounds %struct.HistogramLiteral, %struct.HistogramLiteral* %278, i64 %285, i32 2
  %289 = bitcast %struct.HistogramLiteral* %287 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %289, i8 0, i64 1032, i1 false) #6
  store double 0x7FF0000000000000, double* %288, align 8
  %290 = or i64 %285, 1
  %291 = getelementptr inbounds %struct.HistogramLiteral, %struct.HistogramLiteral* %278, i64 %290
  %292 = getelementptr inbounds %struct.HistogramLiteral, %struct.HistogramLiteral* %278, i64 %290, i32 2
  %293 = bitcast %struct.HistogramLiteral* %291 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %293, i8 0, i64 1032, i1 false) #6
  store double 0x7FF0000000000000, double* %292, align 8
  %294 = or i64 %285, 2
  %295 = getelementptr inbounds %struct.HistogramLiteral, %struct.HistogramLiteral* %278, i64 %294
  %296 = getelementptr inbounds %struct.HistogramLiteral, %struct.HistogramLiteral* %278, i64 %294, i32 2
  %297 = bitcast %struct.HistogramLiteral* %295 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %297, i8 0, i64 1032, i1 false) #6
  store double 0x7FF0000000000000, double* %296, align 8
  %298 = or i64 %285, 3
  %299 = getelementptr inbounds %struct.HistogramLiteral, %struct.HistogramLiteral* %278, i64 %298
  %300 = getelementptr inbounds %struct.HistogramLiteral, %struct.HistogramLiteral* %278, i64 %298, i32 2
  %301 = bitcast %struct.HistogramLiteral* %299 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %301, i8 0, i64 1032, i1 false) #6
  store double 0x7FF0000000000000, double* %300, align 8
  %302 = add nuw i64 %285, 4
  %303 = add i64 %286, -4
  %304 = icmp eq i64 %303, 0
  br i1 %304, label %305, label %284

305:                                              ; preds = %284, %275
  %306 = phi i64 [ 0, %275 ], [ %302, %284 ]
  %307 = icmp eq i64 %280, 0
  br i1 %307, label %317, label %308

308:                                              ; preds = %305, %308
  %309 = phi i64 [ %314, %308 ], [ %306, %305 ]
  %310 = phi i64 [ %315, %308 ], [ %280, %305 ]
  %311 = getelementptr inbounds %struct.HistogramLiteral, %struct.HistogramLiteral* %278, i64 %309
  %312 = getelementptr inbounds %struct.HistogramLiteral, %struct.HistogramLiteral* %278, i64 %309, i32 2
  %313 = bitcast %struct.HistogramLiteral* %311 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %313, i8 0, i64 1032, i1 false) #6
  store double 0x7FF0000000000000, double* %312, align 8
  %314 = add nuw i64 %309, 1
  %315 = add i64 %310, -1
  %316 = icmp eq i64 %315, 0
  br i1 %316, label %317, label %308, !llvm.loop !4

317:                                              ; preds = %305, %308, %267
  %318 = phi %struct.HistogramLiteral* [ null, %267 ], [ %278, %308 ], [ %278, %305 ]
  %319 = phi i8* [ null, %267 ], [ %277, %308 ], [ %277, %305 ]
  %320 = getelementptr inbounds %struct.BlockSplit, %struct.BlockSplit* %247, i64 0, i32 0
  %321 = load i64, i64* %320, align 8
  %322 = shl i64 %321, 2
  %323 = icmp eq i64 %322, 0
  br i1 %323, label %347, label %324

324:                                              ; preds = %317
  %325 = mul i64 %321, 8768
  %326 = tail call i8* @BrotliAllocate(%struct.MemoryManager* %0, i64 %325) #6
  %327 = bitcast i8* %326 to %struct.HistogramDistance*
  br label %328

328:                                              ; preds = %328, %324
  %329 = phi i64 [ 0, %324 ], [ %345, %328 ]
  %330 = getelementptr inbounds %struct.HistogramDistance, %struct.HistogramDistance* %327, i64 %329
  %331 = getelementptr inbounds %struct.HistogramDistance, %struct.HistogramDistance* %327, i64 %329, i32 2
  %332 = bitcast %struct.HistogramDistance* %330 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %332, i8 0, i64 2184, i1 false) #6
  store double 0x7FF0000000000000, double* %331, align 8
  %333 = or i64 %329, 1
  %334 = getelementptr inbounds %struct.HistogramDistance, %struct.HistogramDistance* %327, i64 %333
  %335 = getelementptr inbounds %struct.HistogramDistance, %struct.HistogramDistance* %327, i64 %333, i32 2
  %336 = bitcast %struct.HistogramDistance* %334 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %336, i8 0, i64 2184, i1 false) #6
  store double 0x7FF0000000000000, double* %335, align 8
  %337 = or i64 %329, 2
  %338 = getelementptr inbounds %struct.HistogramDistance, %struct.HistogramDistance* %327, i64 %337
  %339 = getelementptr inbounds %struct.HistogramDistance, %struct.HistogramDistance* %327, i64 %337, i32 2
  %340 = bitcast %struct.HistogramDistance* %338 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %340, i8 0, i64 2184, i1 false) #6
  store double 0x7FF0000000000000, double* %339, align 8
  %341 = or i64 %329, 3
  %342 = getelementptr inbounds %struct.HistogramDistance, %struct.HistogramDistance* %327, i64 %341
  %343 = getelementptr inbounds %struct.HistogramDistance, %struct.HistogramDistance* %327, i64 %341, i32 2
  %344 = bitcast %struct.HistogramDistance* %342 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %344, i8 0, i64 2184, i1 false) #6
  store double 0x7FF0000000000000, double* %343, align 8
  %345 = add nuw i64 %329, 4
  %346 = icmp eq i64 %345, %322
  br i1 %346, label %347, label %328

347:                                              ; preds = %328, %317
  %348 = phi %struct.HistogramDistance* [ null, %317 ], [ %327, %328 ]
  %349 = phi i8* [ null, %317 ], [ %326, %328 ]
  %350 = getelementptr inbounds %struct.BlockSplit, %struct.BlockSplit* %246, i64 0, i32 0
  %351 = load i64, i64* %350, align 8
  %352 = getelementptr inbounds %struct.MetaBlockSplit, %struct.MetaBlockSplit* %10, i64 0, i32 10
  store i64 %351, i64* %352, align 8
  %353 = icmp eq i64 %351, 0
  br i1 %353, label %354, label %356

354:                                              ; preds = %347
  %355 = getelementptr inbounds %struct.MetaBlockSplit, %struct.MetaBlockSplit* %10, i64 0, i32 9
  store %struct.HistogramCommand* null, %struct.HistogramCommand** %355, align 8
  br label %405

356:                                              ; preds = %347
  %357 = mul i64 %351, 2832
  %358 = tail call i8* @BrotliAllocate(%struct.MemoryManager* %0, i64 %357) #6
  %359 = bitcast i8* %358 to %struct.HistogramCommand*
  %360 = load i64, i64* %352, align 8
  %361 = getelementptr inbounds %struct.MetaBlockSplit, %struct.MetaBlockSplit* %10, i64 0, i32 9
  %362 = bitcast %struct.HistogramCommand** %361 to i8**
  store i8* %358, i8** %362, align 8
  %363 = icmp eq i64 %360, 0
  br i1 %363, label %405, label %364

364:                                              ; preds = %356
  %365 = add i64 %360, -1
  %366 = and i64 %360, 3
  %367 = icmp ult i64 %365, 3
  br i1 %367, label %391, label %368

368:                                              ; preds = %364
  %369 = sub i64 %360, %366
  br label %370

370:                                              ; preds = %370, %368
  %371 = phi i64 [ 0, %368 ], [ %388, %370 ]
  %372 = phi i64 [ %369, %368 ], [ %389, %370 ]
  %373 = getelementptr inbounds %struct.HistogramCommand, %struct.HistogramCommand* %359, i64 %371
  %374 = getelementptr inbounds %struct.HistogramCommand, %struct.HistogramCommand* %359, i64 %371, i32 2
  %375 = bitcast %struct.HistogramCommand* %373 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %375, i8 0, i64 2824, i1 false) #6
  store double 0x7FF0000000000000, double* %374, align 8
  %376 = or i64 %371, 1
  %377 = getelementptr inbounds %struct.HistogramCommand, %struct.HistogramCommand* %359, i64 %376
  %378 = getelementptr inbounds %struct.HistogramCommand, %struct.HistogramCommand* %359, i64 %376, i32 2
  %379 = bitcast %struct.HistogramCommand* %377 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %379, i8 0, i64 2824, i1 false) #6
  store double 0x7FF0000000000000, double* %378, align 8
  %380 = or i64 %371, 2
  %381 = getelementptr inbounds %struct.HistogramCommand, %struct.HistogramCommand* %359, i64 %380
  %382 = getelementptr inbounds %struct.HistogramCommand, %struct.HistogramCommand* %359, i64 %380, i32 2
  %383 = bitcast %struct.HistogramCommand* %381 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %383, i8 0, i64 2824, i1 false) #6
  store double 0x7FF0000000000000, double* %382, align 8
  %384 = or i64 %371, 3
  %385 = getelementptr inbounds %struct.HistogramCommand, %struct.HistogramCommand* %359, i64 %384
  %386 = getelementptr inbounds %struct.HistogramCommand, %struct.HistogramCommand* %359, i64 %384, i32 2
  %387 = bitcast %struct.HistogramCommand* %385 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %387, i8 0, i64 2824, i1 false) #6
  store double 0x7FF0000000000000, double* %386, align 8
  %388 = add nuw i64 %371, 4
  %389 = add i64 %372, -4
  %390 = icmp eq i64 %389, 0
  br i1 %390, label %391, label %370

391:                                              ; preds = %370, %364
  %392 = phi i64 [ 0, %364 ], [ %388, %370 ]
  %393 = icmp eq i64 %366, 0
  br i1 %393, label %403, label %394

394:                                              ; preds = %391, %394
  %395 = phi i64 [ %400, %394 ], [ %392, %391 ]
  %396 = phi i64 [ %401, %394 ], [ %366, %391 ]
  %397 = getelementptr inbounds %struct.HistogramCommand, %struct.HistogramCommand* %359, i64 %395
  %398 = getelementptr inbounds %struct.HistogramCommand, %struct.HistogramCommand* %359, i64 %395, i32 2
  %399 = bitcast %struct.HistogramCommand* %397 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %399, i8 0, i64 2824, i1 false) #6
  store double 0x7FF0000000000000, double* %398, align 8
  %400 = add nuw i64 %395, 1
  %401 = add i64 %396, -1
  %402 = icmp eq i64 %401, 0
  br i1 %402, label %403, label %394, !llvm.loop !6

403:                                              ; preds = %394, %391
  %404 = load %struct.HistogramCommand*, %struct.HistogramCommand** %361, align 8
  br label %405

405:                                              ; preds = %403, %354, %356
  %406 = phi %struct.HistogramCommand* [ null, %354 ], [ %359, %356 ], [ %404, %403 ]
  tail call void @BrotliBuildHistogramsWithContext(%struct.Command* %7, i64 %8, %struct.BlockSplit* %245, %struct.BlockSplit* %246, %struct.BlockSplit* %247, i8* %1, i64 %2, i64 %3, i8 zeroext %5, i8 zeroext %6, i32* %270, %struct.HistogramLiteral* %318, %struct.HistogramCommand* %406, %struct.HistogramDistance* %348) #6
  tail call void @BrotliFree(%struct.MemoryManager* %0, i8* %269) #6
  %407 = load i64, i64* %272, align 8
  %408 = shl i64 %407, 6
  %409 = getelementptr inbounds %struct.MetaBlockSplit, %struct.MetaBlockSplit* %10, i64 0, i32 4
  store i64 %408, i64* %409, align 8
  %410 = icmp eq i64 %408, 0
  br i1 %410, label %411, label %414

411:                                              ; preds = %405
  %412 = getelementptr inbounds %struct.MetaBlockSplit, %struct.MetaBlockSplit* %10, i64 0, i32 3
  store i32* null, i32** %412, align 8
  %413 = getelementptr inbounds %struct.MetaBlockSplit, %struct.MetaBlockSplit* %10, i64 0, i32 8
  store i64 0, i64* %413, align 8
  br label %428

414:                                              ; preds = %405
  %415 = shl i64 %407, 8
  %416 = tail call i8* @BrotliAllocate(%struct.MemoryManager* %0, i64 %415) #6
  %417 = load i64, i64* %409, align 8
  %418 = getelementptr inbounds %struct.MetaBlockSplit, %struct.MetaBlockSplit* %10, i64 0, i32 3
  %419 = bitcast i32** %418 to i8**
  store i8* %416, i8** %419, align 8
  %420 = getelementptr inbounds %struct.MetaBlockSplit, %struct.MetaBlockSplit* %10, i64 0, i32 8
  store i64 %417, i64* %420, align 8
  %421 = icmp eq i64 %417, 0
  %422 = bitcast i8* %416 to i32*
  br i1 %421, label %428, label %423

423:                                              ; preds = %414
  %424 = mul i64 %417, 1040
  %425 = tail call i8* @BrotliAllocate(%struct.MemoryManager* %0, i64 %424) #6
  %426 = bitcast i8* %425 to %struct.HistogramLiteral*
  %427 = load i32*, i32** %418, align 8
  br label %428

428:                                              ; preds = %411, %414, %423
  %429 = phi i32* [ %427, %423 ], [ %422, %414 ], [ null, %411 ]
  %430 = phi i64* [ %420, %423 ], [ %420, %414 ], [ %413, %411 ]
  %431 = phi i32** [ %418, %423 ], [ %418, %414 ], [ %412, %411 ]
  %432 = phi %struct.HistogramLiteral* [ %426, %423 ], [ null, %414 ], [ null, %411 ]
  %433 = getelementptr inbounds %struct.MetaBlockSplit, %struct.MetaBlockSplit* %10, i64 0, i32 7
  store %struct.HistogramLiteral* %432, %struct.HistogramLiteral** %433, align 8
  tail call void @BrotliClusterHistogramsLiteral(%struct.MemoryManager* %0, %struct.HistogramLiteral* %318, i64 %273, i64 256, %struct.HistogramLiteral* %432, i64* %430, i32* %429) #6
  tail call void @BrotliFree(%struct.MemoryManager* %0, i8* %319) #6
  %434 = load i32, i32* %248, align 8
  %435 = icmp eq i32 %434, 0
  br i1 %435, label %472, label %436

436:                                              ; preds = %428
  %437 = load i64, i64* %272, align 8
  %438 = icmp eq i64 %437, 0
  br i1 %438, label %472, label %441

439:                                              ; preds = %445
  %440 = icmp eq i64 %443, 0
  br i1 %440, label %472, label %441

441:                                              ; preds = %436, %439
  %442 = phi i64 [ %443, %439 ], [ %437, %436 ]
  %443 = add i64 %442, -1
  %444 = shl i64 %443, 6
  br label %445

445:                                              ; preds = %445, %441
  %446 = phi i64 [ 0, %441 ], [ %470, %445 ]
  %447 = load i32*, i32** %431, align 8
  %448 = getelementptr inbounds i32, i32* %447, i64 %443
  %449 = load i32, i32* %448, align 4
  %450 = add i64 %446, %444
  %451 = getelementptr inbounds i32, i32* %447, i64 %450
  store i32 %449, i32* %451, align 4
  %452 = or i64 %446, 1
  %453 = load i32*, i32** %431, align 8
  %454 = getelementptr inbounds i32, i32* %453, i64 %443
  %455 = load i32, i32* %454, align 4
  %456 = add i64 %452, %444
  %457 = getelementptr inbounds i32, i32* %453, i64 %456
  store i32 %455, i32* %457, align 4
  %458 = or i64 %446, 2
  %459 = load i32*, i32** %431, align 8
  %460 = getelementptr inbounds i32, i32* %459, i64 %443
  %461 = load i32, i32* %460, align 4
  %462 = add i64 %458, %444
  %463 = getelementptr inbounds i32, i32* %459, i64 %462
  store i32 %461, i32* %463, align 4
  %464 = or i64 %446, 3
  %465 = load i32*, i32** %431, align 8
  %466 = getelementptr inbounds i32, i32* %465, i64 %443
  %467 = load i32, i32* %466, align 4
  %468 = add i64 %464, %444
  %469 = getelementptr inbounds i32, i32* %465, i64 %468
  store i32 %467, i32* %469, align 4
  %470 = add nuw nsw i64 %446, 4
  %471 = icmp eq i64 %470, 64
  br i1 %471, label %439, label %445

472:                                              ; preds = %439, %436, %428
  %473 = load i64, i64* %320, align 8
  %474 = shl i64 %473, 2
  %475 = getelementptr inbounds %struct.MetaBlockSplit, %struct.MetaBlockSplit* %10, i64 0, i32 6
  store i64 %474, i64* %475, align 8
  %476 = icmp eq i64 %474, 0
  br i1 %476, label %477, label %480

477:                                              ; preds = %472
  %478 = getelementptr inbounds %struct.MetaBlockSplit, %struct.MetaBlockSplit* %10, i64 0, i32 5
  store i32* null, i32** %478, align 8
  %479 = getelementptr inbounds %struct.MetaBlockSplit, %struct.MetaBlockSplit* %10, i64 0, i32 12
  store i64 0, i64* %479, align 8
  br label %495

480:                                              ; preds = %472
  %481 = shl i64 %473, 4
  %482 = tail call i8* @BrotliAllocate(%struct.MemoryManager* %0, i64 %481) #6
  %483 = load i64, i64* %475, align 8
  %484 = getelementptr inbounds %struct.MetaBlockSplit, %struct.MetaBlockSplit* %10, i64 0, i32 5
  %485 = bitcast i32** %484 to i8**
  store i8* %482, i8** %485, align 8
  %486 = getelementptr inbounds %struct.MetaBlockSplit, %struct.MetaBlockSplit* %10, i64 0, i32 12
  store i64 %483, i64* %486, align 8
  %487 = icmp eq i64 %483, 0
  %488 = bitcast i8* %482 to i32*
  br i1 %487, label %495, label %489

489:                                              ; preds = %480
  %490 = mul i64 %483, 2192
  %491 = tail call i8* @BrotliAllocate(%struct.MemoryManager* %0, i64 %490) #6
  %492 = bitcast i8* %491 to %struct.HistogramDistance*
  %493 = load i64, i64* %475, align 8
  %494 = load i32*, i32** %484, align 8
  br label %495

495:                                              ; preds = %477, %480, %489
  %496 = phi i32* [ %494, %489 ], [ %488, %480 ], [ null, %477 ]
  %497 = phi i64 [ %493, %489 ], [ 0, %480 ], [ 0, %477 ]
  %498 = phi i64* [ %486, %489 ], [ %486, %480 ], [ %479, %477 ]
  %499 = phi %struct.HistogramDistance* [ %492, %489 ], [ null, %480 ], [ null, %477 ]
  %500 = getelementptr inbounds %struct.MetaBlockSplit, %struct.MetaBlockSplit* %10, i64 0, i32 11
  store %struct.HistogramDistance* %499, %struct.HistogramDistance** %500, align 8
  tail call void @BrotliClusterHistogramsDistance(%struct.MemoryManager* %0, %struct.HistogramDistance* %348, i64 %497, i64 256, %struct.HistogramDistance* %499, i64* %498, i32* %496) #6
  tail call void @BrotliFree(%struct.MemoryManager* %0, i8* %349) #6
  call void @llvm.lifetime.end.p0i8(i64 144, i8* nonnull %18) #6
  call void @llvm.lifetime.end.p0i8(i64 144, i8* nonnull %16) #6
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #1

; Function Attrs: nounwind ssp uwtable
define internal fastcc i32 @ComputeDistanceCost(%struct.Command* nocapture readonly, i64, %struct.BrotliDistanceParams* nocapture readonly, %struct.BrotliDistanceParams* nocapture readonly, double* nocapture) unnamed_addr #2 {
  %6 = alloca %struct.HistogramDistance, align 8
  %7 = bitcast %struct.HistogramDistance* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 2192, i8* nonnull %7) #6
  %8 = getelementptr inbounds %struct.HistogramDistance, %struct.HistogramDistance* %6, i64 0, i32 2
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %7, i8 0, i64 2184, i1 false) #6
  store double 0x7FF0000000000000, double* %8, align 8
  %9 = getelementptr inbounds %struct.BrotliDistanceParams, %struct.BrotliDistanceParams* %2, i64 0, i32 0
  %10 = load i32, i32* %9, align 8
  %11 = getelementptr inbounds %struct.BrotliDistanceParams, %struct.BrotliDistanceParams* %3, i64 0, i32 0
  %12 = load i32, i32* %11, align 8
  %13 = icmp eq i32 %10, %12
  br i1 %13, label %14, label %21

14:                                               ; preds = %5
  %15 = getelementptr inbounds %struct.BrotliDistanceParams, %struct.BrotliDistanceParams* %2, i64 0, i32 1
  %16 = load i32, i32* %15, align 4
  %17 = getelementptr inbounds %struct.BrotliDistanceParams, %struct.BrotliDistanceParams* %3, i64 0, i32 1
  %18 = load i32, i32* %17, align 4
  %19 = icmp eq i32 %16, %18
  %20 = zext i1 %19 to i32
  br label %21

21:                                               ; preds = %14, %5
  %22 = phi i32 [ 0, %5 ], [ %20, %14 ]
  %23 = icmp eq i64 %1, 0
  br i1 %23, label %122, label %24

24:                                               ; preds = %21
  %25 = icmp eq i32 %22, 0
  %26 = getelementptr inbounds %struct.BrotliDistanceParams, %struct.BrotliDistanceParams* %2, i64 0, i32 1
  %27 = shl nsw i32 -1, %10
  %28 = xor i32 %27, -1
  %29 = getelementptr inbounds %struct.BrotliDistanceParams, %struct.BrotliDistanceParams* %3, i64 0, i32 4
  %30 = getelementptr inbounds %struct.BrotliDistanceParams, %struct.BrotliDistanceParams* %3, i64 0, i32 1
  %31 = zext i32 %12 to i64
  %32 = shl i64 4, %31
  %33 = add i64 %32, -16
  %34 = shl nsw i32 -1, %12
  %35 = xor i32 %34, 65535
  %36 = zext i32 %35 to i64
  %37 = getelementptr inbounds %struct.HistogramDistance, %struct.HistogramDistance* %6, i64 0, i32 1
  br label %38

38:                                               ; preds = %118, %24
  %39 = phi double [ 0.000000e+00, %24 ], [ %119, %118 ]
  %40 = phi i64 [ 0, %24 ], [ %120, %118 ]
  %41 = getelementptr inbounds %struct.Command, %struct.Command* %0, i64 %40, i32 1
  %42 = load i32, i32* %41, align 4
  %43 = and i32 %42, 33554431
  %44 = icmp eq i32 %43, 0
  br i1 %44, label %118, label %45

45:                                               ; preds = %38
  %46 = getelementptr inbounds %struct.Command, %struct.Command* %0, i64 %40, i32 3
  %47 = load i16, i16* %46, align 4
  %48 = icmp ugt i16 %47, 127
  br i1 %48, label %49, label %118

49:                                               ; preds = %45
  %50 = getelementptr inbounds %struct.Command, %struct.Command* %0, i64 %40, i32 4
  %51 = load i16, i16* %50, align 2
  br i1 %25, label %52, label %106

52:                                               ; preds = %49
  %53 = zext i16 %51 to i32
  %54 = and i32 %53, 1023
  %55 = load i32, i32* %26, align 4
  %56 = add i32 %55, 16
  %57 = icmp ult i32 %54, %56
  br i1 %57, label %74, label %58

58:                                               ; preds = %52
  %59 = lshr i32 %53, 10
  %60 = getelementptr inbounds %struct.Command, %struct.Command* %0, i64 %40, i32 2
  %61 = load i32, i32* %60, align 4
  %62 = sub i32 %54, %55
  %63 = add i32 %62, -16
  %64 = lshr i32 %63, %10
  %65 = and i32 %63, %28
  %66 = and i32 %64, 1
  %67 = or i32 %66, 2
  %68 = shl i32 %67, %59
  %69 = add i32 %68, -4
  %70 = add i32 %69, %61
  %71 = shl i32 %70, %10
  %72 = add i32 %65, %56
  %73 = add i32 %72, %71
  br label %74

74:                                               ; preds = %52, %58
  %75 = phi i32 [ %73, %58 ], [ %54, %52 ]
  %76 = zext i32 %75 to i64
  %77 = load i64, i64* %29, align 8
  %78 = icmp ult i64 %77, %76
  br i1 %78, label %126, label %79

79:                                               ; preds = %74
  %80 = load i32, i32* %30, align 4
  %81 = zext i32 %80 to i64
  %82 = add nuw nsw i64 %81, 16
  %83 = icmp ugt i64 %82, %76
  br i1 %83, label %84, label %86

84:                                               ; preds = %79
  %85 = trunc i32 %75 to i16
  br label %106

86:                                               ; preds = %79
  %87 = add i64 %33, %76
  %88 = sub i64 %87, %81
  %89 = trunc i64 %88 to i32
  %90 = tail call i32 @llvm.ctlz.i32(i32 %89, i1 true) #6, !range !3
  %91 = sub nsw i32 30, %90
  %92 = zext i32 %91 to i64
  %93 = and i64 %88, %36
  %94 = lshr i64 %88, %92
  %95 = and i64 %94, 1
  %96 = sub nsw i64 %92, %31
  %97 = shl nsw i64 %96, 10
  %98 = shl nsw i64 %96, 1
  %99 = add nsw i64 %98, -2
  %100 = or i64 %99, %95
  %101 = shl i64 %100, %31
  %102 = add nuw nsw i64 %93, %82
  %103 = add i64 %102, %101
  %104 = or i64 %103, %97
  %105 = trunc i64 %104 to i16
  br label %106

106:                                              ; preds = %49, %86, %84
  %107 = phi i16 [ %105, %86 ], [ %85, %84 ], [ %51, %49 ]
  %108 = and i16 %107, 1023
  %109 = zext i16 %108 to i64
  %110 = getelementptr inbounds %struct.HistogramDistance, %struct.HistogramDistance* %6, i64 0, i32 0, i64 %109
  %111 = load i32, i32* %110, align 4
  %112 = add i32 %111, 1
  store i32 %112, i32* %110, align 4
  %113 = load i64, i64* %37, align 8
  %114 = add i64 %113, 1
  store i64 %114, i64* %37, align 8
  %115 = lshr i16 %107, 10
  %116 = uitofp i16 %115 to double
  %117 = fadd double %39, %116
  br label %118

118:                                              ; preds = %38, %106, %45
  %119 = phi double [ %39, %45 ], [ %117, %106 ], [ %39, %38 ]
  %120 = add nuw i64 %40, 1
  %121 = icmp eq i64 %120, %1
  br i1 %121, label %122, label %38

122:                                              ; preds = %118, %21
  %123 = phi double [ 0.000000e+00, %21 ], [ %119, %118 ]
  %124 = call double @BrotliPopulationCostDistance(%struct.HistogramDistance* nonnull %6) #6
  %125 = fadd double %123, %124
  store double %125, double* %4, align 8
  br label %126

126:                                              ; preds = %74, %122
  %127 = phi i32 [ 1, %122 ], [ 0, %74 ]
  call void @llvm.lifetime.end.p0i8(i64 2192, i8* nonnull %7) #6
  ret i32 %127
}

declare hidden void @BrotliSplitBlock(%struct.MemoryManager*, %struct.Command*, i64, i8*, i64, i64, %struct.BrotliEncoderParams*, %struct.BlockSplit*, %struct.BlockSplit*, %struct.BlockSplit*) local_unnamed_addr #3

declare hidden i8* @BrotliAllocate(%struct.MemoryManager*, i64) local_unnamed_addr #3

declare hidden void @BrotliBuildHistogramsWithContext(%struct.Command*, i64, %struct.BlockSplit*, %struct.BlockSplit*, %struct.BlockSplit*, i8*, i64, i64, i8 zeroext, i8 zeroext, i32*, %struct.HistogramLiteral*, %struct.HistogramCommand*, %struct.HistogramDistance*) local_unnamed_addr #3

declare hidden void @BrotliFree(%struct.MemoryManager*, i8*) local_unnamed_addr #3

declare hidden void @BrotliClusterHistogramsLiteral(%struct.MemoryManager*, %struct.HistogramLiteral*, i64, i64, %struct.HistogramLiteral*, i64*, i32*) local_unnamed_addr #3

declare hidden void @BrotliClusterHistogramsDistance(%struct.MemoryManager*, %struct.HistogramDistance*, i64, i64, %struct.HistogramDistance*, i64*, i32*) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define hidden void @BrotliBuildMetaBlockGreedy(%struct.MemoryManager*, i8* nocapture readonly, i64, i64, i8 zeroext, i8 zeroext, i8* nocapture readonly, i64, i32* nocapture readonly, %struct.Command* nocapture readonly, i64, %struct.MetaBlockSplit*) local_unnamed_addr #2 {
  %13 = alloca %union.anon, align 8
  %14 = alloca %struct.BlockSplitterCommand, align 16
  %15 = alloca %struct.BlockSplitterDistance, align 16
  %16 = alloca %union.anon, align 16
  %17 = alloca %struct.BlockSplitterCommand, align 16
  %18 = alloca %struct.BlockSplitterDistance, align 16
  %19 = icmp eq i64 %7, 1
  br i1 %19, label %20, label %391

20:                                               ; preds = %12
  %21 = bitcast %union.anon* %16 to i8*
  call void @llvm.lifetime.start.p0i8(i64 328, i8* nonnull %21) #6
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 16 %21, i8* align 8 bitcast (%union.anon* @__const.BrotliBuildMetaBlockGreedyInternal.lit_blocks to i8*), i64 328, i1 false) #6
  %22 = bitcast %struct.BlockSplitterCommand* %17 to i8*
  call void @llvm.lifetime.start.p0i8(i64 120, i8* nonnull %22) #6
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 16 %22, i8* align 8 bitcast (%struct.BlockSplitterCommand* @__const.BrotliBuildMetaBlockGreedyInternal.cmd_blocks to i8*), i64 120, i1 false) #6
  %23 = bitcast %struct.BlockSplitterDistance* %18 to i8*
  call void @llvm.lifetime.start.p0i8(i64 120, i8* nonnull %23) #6
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 16 %23, i8* align 8 bitcast (%struct.BlockSplitterDistance* @__const.BrotliBuildMetaBlockGreedyInternal.dist_blocks to i8*), i64 120, i1 false) #6
  %24 = icmp eq i64 %10, 0
  br i1 %24, label %73, label %25

25:                                               ; preds = %20
  %26 = add i64 %10, -1
  %27 = and i64 %10, 3
  %28 = icmp ult i64 %26, 3
  br i1 %28, label %57, label %29

29:                                               ; preds = %25
  %30 = sub i64 %10, %27
  br label %31

31:                                               ; preds = %31, %29
  %32 = phi i64 [ 0, %29 ], [ %54, %31 ]
  %33 = phi i64 [ 0, %29 ], [ %53, %31 ]
  %34 = phi i64 [ %30, %29 ], [ %55, %31 ]
  %35 = getelementptr inbounds %struct.Command, %struct.Command* %9, i64 %32, i32 0
  %36 = load i32, i32* %35, align 4
  %37 = zext i32 %36 to i64
  %38 = add i64 %33, %37
  %39 = or i64 %32, 1
  %40 = getelementptr inbounds %struct.Command, %struct.Command* %9, i64 %39, i32 0
  %41 = load i32, i32* %40, align 4
  %42 = zext i32 %41 to i64
  %43 = add i64 %38, %42
  %44 = or i64 %32, 2
  %45 = getelementptr inbounds %struct.Command, %struct.Command* %9, i64 %44, i32 0
  %46 = load i32, i32* %45, align 4
  %47 = zext i32 %46 to i64
  %48 = add i64 %43, %47
  %49 = or i64 %32, 3
  %50 = getelementptr inbounds %struct.Command, %struct.Command* %9, i64 %49, i32 0
  %51 = load i32, i32* %50, align 4
  %52 = zext i32 %51 to i64
  %53 = add i64 %48, %52
  %54 = add nuw i64 %32, 4
  %55 = add i64 %34, -4
  %56 = icmp eq i64 %55, 0
  br i1 %56, label %57, label %31

57:                                               ; preds = %31, %25
  %58 = phi i64 [ undef, %25 ], [ %53, %31 ]
  %59 = phi i64 [ 0, %25 ], [ %54, %31 ]
  %60 = phi i64 [ 0, %25 ], [ %53, %31 ]
  %61 = icmp eq i64 %27, 0
  br i1 %61, label %73, label %62

62:                                               ; preds = %57, %62
  %63 = phi i64 [ %70, %62 ], [ %59, %57 ]
  %64 = phi i64 [ %69, %62 ], [ %60, %57 ]
  %65 = phi i64 [ %71, %62 ], [ %27, %57 ]
  %66 = getelementptr inbounds %struct.Command, %struct.Command* %9, i64 %63, i32 0
  %67 = load i32, i32* %66, align 4
  %68 = zext i32 %67 to i64
  %69 = add i64 %64, %68
  %70 = add nuw i64 %63, 1
  %71 = add i64 %65, -1
  %72 = icmp eq i64 %71, 0
  br i1 %72, label %73, label %62, !llvm.loop !7

73:                                               ; preds = %57, %62, %20
  %74 = phi i64 [ 0, %20 ], [ %58, %57 ], [ %69, %62 ]
  %75 = getelementptr inbounds %struct.MetaBlockSplit, %struct.MetaBlockSplit* %11, i64 0, i32 0
  %76 = getelementptr inbounds %struct.MetaBlockSplit, %struct.MetaBlockSplit* %11, i64 0, i32 7
  %77 = getelementptr inbounds %struct.MetaBlockSplit, %struct.MetaBlockSplit* %11, i64 0, i32 8
  %78 = lshr i64 %74, 9
  %79 = add nuw nsw i64 %78, 1
  %80 = icmp ult i64 %79, 257
  %81 = select i1 %80, i64 %79, i64 257
  %82 = bitcast %union.anon* %16 to <2 x i64>*
  store <2 x i64> <i64 256, i64 512>, <2 x i64>* %82, align 16
  %83 = getelementptr inbounds %union.anon, %union.anon* %16, i64 0, i32 0, i32 2
  %84 = bitcast i64* %83 to double*
  store double 4.000000e+02, double* %84, align 16
  %85 = getelementptr inbounds %union.anon, %union.anon* %16, i64 0, i32 0, i32 3
  store i64 0, i64* %85, align 8
  %86 = getelementptr inbounds %union.anon, %union.anon* %16, i64 0, i32 0, i32 4
  %87 = bitcast double* %86 to %struct.BlockSplit**
  store %struct.BlockSplit* %75, %struct.BlockSplit** %87, align 16
  %88 = getelementptr inbounds %union.anon, %union.anon* %16, i64 0, i32 0, i32 6
  %89 = bitcast %struct.BlockSplit** %88 to i64**
  store i64* %77, i64** %89, align 16
  %90 = getelementptr inbounds %union.anon, %union.anon* %16, i64 0, i32 0, i32 7
  %91 = bitcast %struct.HistogramLiteral** %90 to i64*
  store i64 512, i64* %91, align 8
  %92 = getelementptr inbounds %union.anon, %union.anon* %16, i64 0, i32 0, i32 8
  %93 = getelementptr inbounds %union.anon, %union.anon* %16, i64 0, i32 0, i32 13
  %94 = bitcast [26 x double]* %93 to i64*
  store i64 0, i64* %94, align 16
  %95 = getelementptr inbounds %struct.MetaBlockSplit, %struct.MetaBlockSplit* %11, i64 0, i32 0, i32 4
  %96 = bitcast i64** %92 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 16 %96, i8 0, i64 16, i1 false) #6
  %97 = load i64, i64* %95, align 8
  %98 = icmp ugt i64 %97, %78
  br i1 %98, label %116, label %99

99:                                               ; preds = %73
  %100 = icmp eq i64 %97, 0
  %101 = select i1 %100, i64 %79, i64 %97
  br label %102

102:                                              ; preds = %102, %99
  %103 = phi i64 [ %101, %99 ], [ %105, %102 ]
  %104 = icmp ugt i64 %103, %78
  %105 = shl i64 %103, 1
  br i1 %104, label %106, label %102

106:                                              ; preds = %102
  %107 = tail call i8* @BrotliAllocate(%struct.MemoryManager* %0, i64 %103) #6
  %108 = load i64, i64* %95, align 8
  %109 = icmp eq i64 %108, 0
  br i1 %109, label %113, label %110

110:                                              ; preds = %106
  %111 = getelementptr inbounds %struct.MetaBlockSplit, %struct.MetaBlockSplit* %11, i64 0, i32 0, i32 2
  %112 = load i8*, i8** %111, align 8
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %107, i8* align 1 %112, i64 %108, i1 false) #6
  br label %113

113:                                              ; preds = %110, %106
  %114 = getelementptr inbounds %struct.MetaBlockSplit, %struct.MetaBlockSplit* %11, i64 0, i32 0, i32 2
  %115 = load i8*, i8** %114, align 8
  tail call void @BrotliFree(%struct.MemoryManager* %0, i8* %115) #6
  store i8* %107, i8** %114, align 8
  store i64 %103, i64* %95, align 8
  br label %116

116:                                              ; preds = %113, %73
  %117 = getelementptr inbounds %struct.MetaBlockSplit, %struct.MetaBlockSplit* %11, i64 0, i32 0, i32 5
  %118 = load i64, i64* %117, align 8
  %119 = icmp ugt i64 %118, %78
  br i1 %119, label %141, label %120

120:                                              ; preds = %116
  %121 = icmp eq i64 %118, 0
  %122 = select i1 %121, i64 %79, i64 %118
  br label %123

123:                                              ; preds = %123, %120
  %124 = phi i64 [ %122, %120 ], [ %126, %123 ]
  %125 = icmp ugt i64 %124, %78
  %126 = shl i64 %124, 1
  br i1 %125, label %127, label %123

127:                                              ; preds = %123
  %128 = shl i64 %124, 2
  %129 = tail call i8* @BrotliAllocate(%struct.MemoryManager* %0, i64 %128) #6
  %130 = load i64, i64* %117, align 8
  %131 = icmp eq i64 %130, 0
  br i1 %131, label %137, label %132

132:                                              ; preds = %127
  %133 = getelementptr inbounds %struct.MetaBlockSplit, %struct.MetaBlockSplit* %11, i64 0, i32 0, i32 3
  %134 = bitcast i32** %133 to i8**
  %135 = load i8*, i8** %134, align 8
  %136 = shl i64 %130, 2
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %129, i8* align 4 %135, i64 %136, i1 false) #6
  br label %137

137:                                              ; preds = %127, %132
  %138 = getelementptr inbounds %struct.MetaBlockSplit, %struct.MetaBlockSplit* %11, i64 0, i32 0, i32 3
  %139 = bitcast i32** %138 to i8**
  %140 = load i8*, i8** %139, align 8
  tail call void @BrotliFree(%struct.MemoryManager* %0, i8* %140) #6
  store i8* %129, i8** %139, align 8
  store i64 %124, i64* %117, align 8
  br label %141

141:                                              ; preds = %137, %116
  %142 = getelementptr inbounds %struct.MetaBlockSplit, %struct.MetaBlockSplit* %11, i64 0, i32 0, i32 1
  store i64 %79, i64* %142, align 8
  store i64 %81, i64* %77, align 8
  %143 = mul nuw i64 %81, 1040
  %144 = tail call i8* @BrotliAllocate(%struct.MemoryManager* %0, i64 %143) #6
  %145 = bitcast %struct.HistogramLiteral** %76 to i8**
  store i8* %144, i8** %145, align 8
  %146 = getelementptr inbounds %union.anon, %union.anon* %16, i64 0, i32 0, i32 5
  %147 = bitcast i64* %146 to i8**
  store i8* %144, i8** %147, align 8
  %148 = getelementptr inbounds i8, i8* %144, i64 1032
  %149 = bitcast i8* %148 to double*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %144, i8 0, i64 1032, i1 false) #6
  store double 0x7FF0000000000000, double* %149, align 8
  %150 = getelementptr inbounds %union.anon, %union.anon* %16, i64 0, i32 0, i32 10
  %151 = bitcast i64* %150 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 16 %151, i8 0, i64 16, i1 false) #6
  %152 = getelementptr inbounds %struct.MetaBlockSplit, %struct.MetaBlockSplit* %11, i64 0, i32 1
  %153 = getelementptr inbounds %struct.MetaBlockSplit, %struct.MetaBlockSplit* %11, i64 0, i32 9
  %154 = getelementptr inbounds %struct.MetaBlockSplit, %struct.MetaBlockSplit* %11, i64 0, i32 10
  %155 = lshr i64 %10, 10
  %156 = add nuw nsw i64 %155, 1
  %157 = icmp ult i64 %156, 257
  %158 = select i1 %157, i64 %156, i64 257
  %159 = bitcast %struct.BlockSplitterCommand* %17 to <2 x i64>*
  store <2 x i64> <i64 704, i64 1024>, <2 x i64>* %159, align 16
  %160 = getelementptr inbounds %struct.BlockSplitterCommand, %struct.BlockSplitterCommand* %17, i64 0, i32 2
  store double 5.000000e+02, double* %160, align 16
  %161 = getelementptr inbounds %struct.BlockSplitterCommand, %struct.BlockSplitterCommand* %17, i64 0, i32 3
  store i64 0, i64* %161, align 8
  %162 = getelementptr inbounds %struct.BlockSplitterCommand, %struct.BlockSplitterCommand* %17, i64 0, i32 4
  store %struct.BlockSplit* %152, %struct.BlockSplit** %162, align 16
  %163 = getelementptr inbounds %struct.BlockSplitterCommand, %struct.BlockSplitterCommand* %17, i64 0, i32 6
  store i64* %154, i64** %163, align 16
  %164 = getelementptr inbounds %struct.BlockSplitterCommand, %struct.BlockSplitterCommand* %17, i64 0, i32 7
  store i64 1024, i64* %164, align 8
  %165 = getelementptr inbounds %struct.BlockSplitterCommand, %struct.BlockSplitterCommand* %17, i64 0, i32 8
  %166 = getelementptr inbounds %struct.BlockSplitterCommand, %struct.BlockSplitterCommand* %17, i64 0, i32 12
  store i64 0, i64* %166, align 16
  %167 = getelementptr inbounds %struct.MetaBlockSplit, %struct.MetaBlockSplit* %11, i64 0, i32 1, i32 4
  %168 = bitcast i64* %165 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 16 %168, i8 0, i64 16, i1 false) #6
  %169 = load i64, i64* %167, align 8
  %170 = icmp ugt i64 %169, %155
  br i1 %170, label %188, label %171

171:                                              ; preds = %141
  %172 = icmp eq i64 %169, 0
  %173 = select i1 %172, i64 %156, i64 %169
  br label %174

174:                                              ; preds = %174, %171
  %175 = phi i64 [ %173, %171 ], [ %177, %174 ]
  %176 = icmp ugt i64 %175, %155
  %177 = shl i64 %175, 1
  br i1 %176, label %178, label %174

178:                                              ; preds = %174
  %179 = tail call i8* @BrotliAllocate(%struct.MemoryManager* %0, i64 %175) #6
  %180 = load i64, i64* %167, align 8
  %181 = icmp eq i64 %180, 0
  br i1 %181, label %185, label %182

182:                                              ; preds = %178
  %183 = getelementptr inbounds %struct.MetaBlockSplit, %struct.MetaBlockSplit* %11, i64 0, i32 1, i32 2
  %184 = load i8*, i8** %183, align 8
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %179, i8* align 1 %184, i64 %180, i1 false) #6
  br label %185

185:                                              ; preds = %182, %178
  %186 = getelementptr inbounds %struct.MetaBlockSplit, %struct.MetaBlockSplit* %11, i64 0, i32 1, i32 2
  %187 = load i8*, i8** %186, align 8
  tail call void @BrotliFree(%struct.MemoryManager* %0, i8* %187) #6
  store i8* %179, i8** %186, align 8
  store i64 %175, i64* %167, align 8
  br label %188

188:                                              ; preds = %185, %141
  %189 = getelementptr inbounds %struct.MetaBlockSplit, %struct.MetaBlockSplit* %11, i64 0, i32 1, i32 5
  %190 = load i64, i64* %189, align 8
  %191 = icmp ugt i64 %190, %155
  br i1 %191, label %213, label %192

192:                                              ; preds = %188
  %193 = icmp eq i64 %190, 0
  %194 = select i1 %193, i64 %156, i64 %190
  br label %195

195:                                              ; preds = %195, %192
  %196 = phi i64 [ %194, %192 ], [ %198, %195 ]
  %197 = icmp ugt i64 %196, %155
  %198 = shl i64 %196, 1
  br i1 %197, label %199, label %195

199:                                              ; preds = %195
  %200 = shl i64 %196, 2
  %201 = tail call i8* @BrotliAllocate(%struct.MemoryManager* %0, i64 %200) #6
  %202 = load i64, i64* %189, align 8
  %203 = icmp eq i64 %202, 0
  br i1 %203, label %209, label %204

204:                                              ; preds = %199
  %205 = getelementptr inbounds %struct.MetaBlockSplit, %struct.MetaBlockSplit* %11, i64 0, i32 1, i32 3
  %206 = bitcast i32** %205 to i8**
  %207 = load i8*, i8** %206, align 8
  %208 = shl i64 %202, 2
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %201, i8* align 4 %207, i64 %208, i1 false) #6
  br label %209

209:                                              ; preds = %199, %204
  %210 = getelementptr inbounds %struct.MetaBlockSplit, %struct.MetaBlockSplit* %11, i64 0, i32 1, i32 3
  %211 = bitcast i32** %210 to i8**
  %212 = load i8*, i8** %211, align 8
  tail call void @BrotliFree(%struct.MemoryManager* %0, i8* %212) #6
  store i8* %201, i8** %211, align 8
  store i64 %196, i64* %189, align 8
  br label %213

213:                                              ; preds = %209, %188
  %214 = getelementptr inbounds %struct.MetaBlockSplit, %struct.MetaBlockSplit* %11, i64 0, i32 1, i32 1
  store i64 %156, i64* %214, align 8
  store i64 %158, i64* %154, align 8
  %215 = mul nuw i64 %158, 2832
  %216 = tail call i8* @BrotliAllocate(%struct.MemoryManager* %0, i64 %215) #6
  %217 = bitcast %struct.HistogramCommand** %153 to i8**
  store i8* %216, i8** %217, align 8
  %218 = getelementptr inbounds %struct.BlockSplitterCommand, %struct.BlockSplitterCommand* %17, i64 0, i32 5
  %219 = bitcast %struct.HistogramCommand** %218 to i8**
  store i8* %216, i8** %219, align 8
  %220 = getelementptr inbounds i8, i8* %216, i64 2824
  %221 = bitcast i8* %220 to double*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %216, i8 0, i64 2824, i1 false) #6
  store double 0x7FF0000000000000, double* %221, align 8
  %222 = getelementptr inbounds %struct.BlockSplitterCommand, %struct.BlockSplitterCommand* %17, i64 0, i32 10, i64 0
  %223 = bitcast i64* %222 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 16 %223, i8 0, i64 16, i1 false) #6
  %224 = getelementptr inbounds %struct.MetaBlockSplit, %struct.MetaBlockSplit* %11, i64 0, i32 2
  %225 = getelementptr inbounds %struct.MetaBlockSplit, %struct.MetaBlockSplit* %11, i64 0, i32 11
  %226 = getelementptr inbounds %struct.MetaBlockSplit, %struct.MetaBlockSplit* %11, i64 0, i32 12
  %227 = lshr i64 %10, 9
  %228 = add nuw nsw i64 %227, 1
  %229 = icmp ult i64 %228, 257
  %230 = select i1 %229, i64 %228, i64 257
  %231 = bitcast %struct.BlockSplitterDistance* %18 to <2 x i64>*
  store <2 x i64> <i64 64, i64 512>, <2 x i64>* %231, align 16
  %232 = getelementptr inbounds %struct.BlockSplitterDistance, %struct.BlockSplitterDistance* %18, i64 0, i32 2
  store double 1.000000e+02, double* %232, align 16
  %233 = getelementptr inbounds %struct.BlockSplitterDistance, %struct.BlockSplitterDistance* %18, i64 0, i32 3
  store i64 0, i64* %233, align 8
  %234 = getelementptr inbounds %struct.BlockSplitterDistance, %struct.BlockSplitterDistance* %18, i64 0, i32 4
  store %struct.BlockSplit* %224, %struct.BlockSplit** %234, align 16
  %235 = getelementptr inbounds %struct.BlockSplitterDistance, %struct.BlockSplitterDistance* %18, i64 0, i32 6
  store i64* %226, i64** %235, align 16
  %236 = getelementptr inbounds %struct.BlockSplitterDistance, %struct.BlockSplitterDistance* %18, i64 0, i32 7
  store i64 512, i64* %236, align 8
  %237 = getelementptr inbounds %struct.BlockSplitterDistance, %struct.BlockSplitterDistance* %18, i64 0, i32 8
  %238 = getelementptr inbounds %struct.BlockSplitterDistance, %struct.BlockSplitterDistance* %18, i64 0, i32 12
  store i64 0, i64* %238, align 16
  %239 = getelementptr inbounds %struct.MetaBlockSplit, %struct.MetaBlockSplit* %11, i64 0, i32 2, i32 4
  %240 = bitcast i64* %237 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 16 %240, i8 0, i64 16, i1 false) #6
  %241 = load i64, i64* %239, align 8
  %242 = icmp ugt i64 %241, %227
  %243 = bitcast i8* %216 to %struct.HistogramCommand*
  br i1 %242, label %261, label %244

244:                                              ; preds = %213
  %245 = icmp eq i64 %241, 0
  %246 = select i1 %245, i64 %228, i64 %241
  br label %247

247:                                              ; preds = %247, %244
  %248 = phi i64 [ %246, %244 ], [ %250, %247 ]
  %249 = icmp ugt i64 %248, %227
  %250 = shl i64 %248, 1
  br i1 %249, label %251, label %247

251:                                              ; preds = %247
  %252 = tail call i8* @BrotliAllocate(%struct.MemoryManager* %0, i64 %248) #6
  %253 = load i64, i64* %239, align 8
  %254 = icmp eq i64 %253, 0
  br i1 %254, label %258, label %255

255:                                              ; preds = %251
  %256 = getelementptr inbounds %struct.MetaBlockSplit, %struct.MetaBlockSplit* %11, i64 0, i32 2, i32 2
  %257 = load i8*, i8** %256, align 8
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %252, i8* align 1 %257, i64 %253, i1 false) #6
  br label %258

258:                                              ; preds = %255, %251
  %259 = getelementptr inbounds %struct.MetaBlockSplit, %struct.MetaBlockSplit* %11, i64 0, i32 2, i32 2
  %260 = load i8*, i8** %259, align 8
  tail call void @BrotliFree(%struct.MemoryManager* %0, i8* %260) #6
  store i8* %252, i8** %259, align 8
  store i64 %248, i64* %239, align 8
  br label %261

261:                                              ; preds = %258, %213
  %262 = getelementptr inbounds %struct.MetaBlockSplit, %struct.MetaBlockSplit* %11, i64 0, i32 2, i32 5
  %263 = load i64, i64* %262, align 8
  %264 = icmp ugt i64 %263, %227
  br i1 %264, label %286, label %265

265:                                              ; preds = %261
  %266 = icmp eq i64 %263, 0
  %267 = select i1 %266, i64 %228, i64 %263
  br label %268

268:                                              ; preds = %268, %265
  %269 = phi i64 [ %267, %265 ], [ %271, %268 ]
  %270 = icmp ugt i64 %269, %227
  %271 = shl i64 %269, 1
  br i1 %270, label %272, label %268

272:                                              ; preds = %268
  %273 = shl i64 %269, 2
  %274 = tail call i8* @BrotliAllocate(%struct.MemoryManager* %0, i64 %273) #6
  %275 = load i64, i64* %262, align 8
  %276 = icmp eq i64 %275, 0
  br i1 %276, label %282, label %277

277:                                              ; preds = %272
  %278 = getelementptr inbounds %struct.MetaBlockSplit, %struct.MetaBlockSplit* %11, i64 0, i32 2, i32 3
  %279 = bitcast i32** %278 to i8**
  %280 = load i8*, i8** %279, align 8
  %281 = shl i64 %275, 2
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %274, i8* align 4 %280, i64 %281, i1 false) #6
  br label %282

282:                                              ; preds = %272, %277
  %283 = getelementptr inbounds %struct.MetaBlockSplit, %struct.MetaBlockSplit* %11, i64 0, i32 2, i32 3
  %284 = bitcast i32** %283 to i8**
  %285 = load i8*, i8** %284, align 8
  tail call void @BrotliFree(%struct.MemoryManager* %0, i8* %285) #6
  store i8* %274, i8** %284, align 8
  store i64 %269, i64* %262, align 8
  br label %286

286:                                              ; preds = %282, %261
  %287 = getelementptr inbounds %struct.MetaBlockSplit, %struct.MetaBlockSplit* %11, i64 0, i32 2, i32 1
  store i64 %228, i64* %287, align 8
  store i64 %230, i64* %226, align 8
  %288 = mul nuw i64 %230, 2192
  %289 = tail call i8* @BrotliAllocate(%struct.MemoryManager* %0, i64 %288) #6
  %290 = bitcast %struct.HistogramDistance** %225 to i8**
  store i8* %289, i8** %290, align 8
  %291 = getelementptr inbounds %struct.BlockSplitterDistance, %struct.BlockSplitterDistance* %18, i64 0, i32 5
  %292 = bitcast %struct.HistogramDistance** %291 to i8**
  store i8* %289, i8** %292, align 8
  %293 = getelementptr inbounds i8, i8* %289, i64 2184
  %294 = bitcast i8* %293 to double*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %289, i8 0, i64 2184, i1 false) #6
  store double 0x7FF0000000000000, double* %294, align 8
  %295 = getelementptr inbounds %struct.BlockSplitterDistance, %struct.BlockSplitterDistance* %18, i64 0, i32 10, i64 0
  %296 = bitcast i64* %295 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 16 %296, i8 0, i64 16, i1 false) #6
  br i1 %24, label %297, label %299

297:                                              ; preds = %286
  %298 = bitcast %union.anon* %16 to %struct.BlockSplitterLiteral*
  br label %389

299:                                              ; preds = %286
  %300 = getelementptr inbounds %struct.BlockSplitterCommand, %struct.BlockSplitterCommand* %17, i64 0, i32 9
  %301 = getelementptr inbounds %union.anon, %union.anon* %16, i64 0, i32 0, i32 9
  %302 = bitcast i64* %146 to %struct.HistogramLiteral**
  %303 = bitcast i64** %92 to i64*
  %304 = bitcast %union.anon* %16 to %struct.BlockSplitterLiteral*
  %305 = getelementptr inbounds %struct.BlockSplitterDistance, %struct.BlockSplitterDistance* %18, i64 0, i32 9
  br label %306

306:                                              ; preds = %386, %299
  %307 = phi i64 [ 0, %299 ], [ %388, %386 ]
  %308 = phi %struct.HistogramCommand* [ %243, %299 ], [ %387, %386 ]
  %309 = phi i64 [ %2, %299 ], [ %363, %386 ]
  %310 = phi i64 [ 0, %299 ], [ %384, %386 ]
  %311 = getelementptr inbounds %struct.Command, %struct.Command* %9, i64 %310, i32 0
  %312 = load i32, i32* %311, align 4
  %313 = getelementptr inbounds %struct.Command, %struct.Command* %9, i64 %310, i32 1
  %314 = load i32, i32* %313, align 4
  %315 = getelementptr inbounds %struct.Command, %struct.Command* %9, i64 %310, i32 3
  %316 = load i16, i16* %315, align 4
  %317 = getelementptr inbounds %struct.Command, %struct.Command* %9, i64 %310, i32 4
  %318 = load i16, i16* %317, align 2
  %319 = zext i16 %316 to i64
  %320 = getelementptr inbounds %struct.HistogramCommand, %struct.HistogramCommand* %308, i64 %307, i32 0, i64 %319
  %321 = load i32, i32* %320, align 4
  %322 = add i32 %321, 1
  store i32 %322, i32* %320, align 4
  %323 = getelementptr inbounds %struct.HistogramCommand, %struct.HistogramCommand* %308, i64 %307, i32 1
  %324 = load i64, i64* %323, align 8
  %325 = add i64 %324, 1
  store i64 %325, i64* %323, align 8
  %326 = load i64, i64* %165, align 16
  %327 = add i64 %326, 1
  store i64 %327, i64* %165, align 16
  %328 = load i64, i64* %164, align 8
  %329 = icmp eq i64 %327, %328
  br i1 %329, label %330, label %331

330:                                              ; preds = %306
  call fastcc void @BlockSplitterFinishBlockCommand(%struct.BlockSplitterCommand* nonnull %17, i32 0) #6
  br label %331

331:                                              ; preds = %330, %306
  %332 = icmp eq i32 %312, 0
  br i1 %332, label %359, label %333

333:                                              ; preds = %331
  %334 = zext i32 %312 to i64
  br label %335

335:                                              ; preds = %355, %333
  %336 = phi i64 [ %356, %355 ], [ %309, %333 ]
  %337 = phi i64 [ %357, %355 ], [ %334, %333 ]
  %338 = and i64 %336, %3
  %339 = getelementptr inbounds i8, i8* %1, i64 %338
  %340 = load i8, i8* %339, align 1
  %341 = zext i8 %340 to i64
  %342 = load %struct.HistogramLiteral*, %struct.HistogramLiteral** %302, align 8
  %343 = load i64, i64* %301, align 8
  %344 = getelementptr inbounds %struct.HistogramLiteral, %struct.HistogramLiteral* %342, i64 %343, i32 0, i64 %341
  %345 = load i32, i32* %344, align 4
  %346 = add i32 %345, 1
  store i32 %346, i32* %344, align 4
  %347 = getelementptr inbounds %struct.HistogramLiteral, %struct.HistogramLiteral* %342, i64 %343, i32 1
  %348 = load i64, i64* %347, align 8
  %349 = add i64 %348, 1
  store i64 %349, i64* %347, align 8
  %350 = load i64, i64* %303, align 16
  %351 = add i64 %350, 1
  store i64 %351, i64* %303, align 16
  %352 = load i64, i64* %91, align 8
  %353 = icmp eq i64 %351, %352
  br i1 %353, label %354, label %355

354:                                              ; preds = %335
  call fastcc void @BlockSplitterFinishBlockLiteral(%struct.BlockSplitterLiteral* nonnull %304, i32 0) #6
  br label %355

355:                                              ; preds = %354, %335
  %356 = add i64 %336, 1
  %357 = add nsw i64 %337, -1
  %358 = icmp eq i64 %357, 0
  br i1 %358, label %359, label %335

359:                                              ; preds = %355, %331
  %360 = phi i64 [ %309, %331 ], [ %356, %355 ]
  %361 = and i32 %314, 33554431
  %362 = zext i32 %361 to i64
  %363 = add i64 %360, %362
  %364 = icmp ne i32 %361, 0
  %365 = icmp ugt i16 %316, 127
  %366 = and i1 %364, %365
  br i1 %366, label %367, label %383

367:                                              ; preds = %359
  %368 = and i16 %318, 1023
  %369 = zext i16 %368 to i64
  %370 = load %struct.HistogramDistance*, %struct.HistogramDistance** %291, align 8
  %371 = load i64, i64* %305, align 8
  %372 = getelementptr inbounds %struct.HistogramDistance, %struct.HistogramDistance* %370, i64 %371, i32 0, i64 %369
  %373 = load i32, i32* %372, align 4
  %374 = add i32 %373, 1
  store i32 %374, i32* %372, align 4
  %375 = getelementptr inbounds %struct.HistogramDistance, %struct.HistogramDistance* %370, i64 %371, i32 1
  %376 = load i64, i64* %375, align 8
  %377 = add i64 %376, 1
  store i64 %377, i64* %375, align 8
  %378 = load i64, i64* %237, align 16
  %379 = add i64 %378, 1
  store i64 %379, i64* %237, align 16
  %380 = load i64, i64* %236, align 8
  %381 = icmp eq i64 %379, %380
  br i1 %381, label %382, label %383

382:                                              ; preds = %367
  call fastcc void @BlockSplitterFinishBlockDistance(%struct.BlockSplitterDistance* nonnull %18, i32 0) #6
  br label %383

383:                                              ; preds = %359, %382, %367
  %384 = add nuw i64 %310, 1
  %385 = icmp eq i64 %384, %10
  br i1 %385, label %389, label %386

386:                                              ; preds = %383
  %387 = load %struct.HistogramCommand*, %struct.HistogramCommand** %218, align 8
  %388 = load i64, i64* %300, align 8
  br label %306

389:                                              ; preds = %383, %297
  %390 = phi %struct.BlockSplitterLiteral* [ %298, %297 ], [ %304, %383 ]
  call fastcc void @BlockSplitterFinishBlockLiteral(%struct.BlockSplitterLiteral* nonnull %390, i32 1) #6
  call fastcc void @BlockSplitterFinishBlockCommand(%struct.BlockSplitterCommand* nonnull %17, i32 1) #6
  call fastcc void @BlockSplitterFinishBlockDistance(%struct.BlockSplitterDistance* nonnull %18, i32 1) #6
  br label %873

391:                                              ; preds = %12
  %392 = bitcast %union.anon* %13 to i8*
  call void @llvm.lifetime.start.p0i8(i64 328, i8* nonnull %392) #6
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %392, i8* align 8 bitcast (%union.anon* @__const.BrotliBuildMetaBlockGreedyInternal.lit_blocks to i8*), i64 328, i1 false) #6
  %393 = bitcast %struct.BlockSplitterCommand* %14 to i8*
  call void @llvm.lifetime.start.p0i8(i64 120, i8* nonnull %393) #6
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 16 %393, i8* align 8 bitcast (%struct.BlockSplitterCommand* @__const.BrotliBuildMetaBlockGreedyInternal.cmd_blocks to i8*), i64 120, i1 false) #6
  %394 = bitcast %struct.BlockSplitterDistance* %15 to i8*
  call void @llvm.lifetime.start.p0i8(i64 120, i8* nonnull %394) #6
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 16 %394, i8* align 8 bitcast (%struct.BlockSplitterDistance* @__const.BrotliBuildMetaBlockGreedyInternal.dist_blocks to i8*), i64 120, i1 false) #6
  %395 = icmp eq i64 %10, 0
  br i1 %395, label %444, label %396

396:                                              ; preds = %391
  %397 = add i64 %10, -1
  %398 = and i64 %10, 3
  %399 = icmp ult i64 %397, 3
  br i1 %399, label %428, label %400

400:                                              ; preds = %396
  %401 = sub i64 %10, %398
  br label %402

402:                                              ; preds = %402, %400
  %403 = phi i64 [ 0, %400 ], [ %425, %402 ]
  %404 = phi i64 [ 0, %400 ], [ %424, %402 ]
  %405 = phi i64 [ %401, %400 ], [ %426, %402 ]
  %406 = getelementptr inbounds %struct.Command, %struct.Command* %9, i64 %403, i32 0
  %407 = load i32, i32* %406, align 4
  %408 = zext i32 %407 to i64
  %409 = add i64 %404, %408
  %410 = or i64 %403, 1
  %411 = getelementptr inbounds %struct.Command, %struct.Command* %9, i64 %410, i32 0
  %412 = load i32, i32* %411, align 4
  %413 = zext i32 %412 to i64
  %414 = add i64 %409, %413
  %415 = or i64 %403, 2
  %416 = getelementptr inbounds %struct.Command, %struct.Command* %9, i64 %415, i32 0
  %417 = load i32, i32* %416, align 4
  %418 = zext i32 %417 to i64
  %419 = add i64 %414, %418
  %420 = or i64 %403, 3
  %421 = getelementptr inbounds %struct.Command, %struct.Command* %9, i64 %420, i32 0
  %422 = load i32, i32* %421, align 4
  %423 = zext i32 %422 to i64
  %424 = add i64 %419, %423
  %425 = add nuw i64 %403, 4
  %426 = add i64 %405, -4
  %427 = icmp eq i64 %426, 0
  br i1 %427, label %428, label %402

428:                                              ; preds = %402, %396
  %429 = phi i64 [ undef, %396 ], [ %424, %402 ]
  %430 = phi i64 [ 0, %396 ], [ %425, %402 ]
  %431 = phi i64 [ 0, %396 ], [ %424, %402 ]
  %432 = icmp eq i64 %398, 0
  br i1 %432, label %444, label %433

433:                                              ; preds = %428, %433
  %434 = phi i64 [ %441, %433 ], [ %430, %428 ]
  %435 = phi i64 [ %440, %433 ], [ %431, %428 ]
  %436 = phi i64 [ %442, %433 ], [ %398, %428 ]
  %437 = getelementptr inbounds %struct.Command, %struct.Command* %9, i64 %434, i32 0
  %438 = load i32, i32* %437, align 4
  %439 = zext i32 %438 to i64
  %440 = add i64 %435, %439
  %441 = add nuw i64 %434, 1
  %442 = add i64 %436, -1
  %443 = icmp eq i64 %442, 0
  br i1 %443, label %444, label %433, !llvm.loop !8

444:                                              ; preds = %428, %433, %391
  %445 = phi i64 [ 0, %391 ], [ %429, %428 ], [ %440, %433 ]
  %446 = getelementptr inbounds %struct.MetaBlockSplit, %struct.MetaBlockSplit* %11, i64 0, i32 0
  %447 = getelementptr inbounds %struct.MetaBlockSplit, %struct.MetaBlockSplit* %11, i64 0, i32 7
  %448 = getelementptr inbounds %struct.MetaBlockSplit, %struct.MetaBlockSplit* %11, i64 0, i32 8
  %449 = lshr i64 %445, 9
  %450 = add nuw nsw i64 %449, 1
  %451 = getelementptr inbounds %union.anon, %union.anon* %13, i64 0, i32 0, i32 0
  store i64 256, i64* %451, align 8
  %452 = getelementptr inbounds %union.anon, %union.anon* %13, i64 0, i32 0, i32 1
  store i64 %7, i64* %452, align 8
  %453 = udiv i64 256, %7
  %454 = getelementptr inbounds %union.anon, %union.anon* %13, i64 0, i32 0, i32 2
  store i64 %453, i64* %454, align 8
  %455 = getelementptr inbounds %union.anon, %union.anon* %13, i64 0, i32 0, i32 3
  store i64 512, i64* %455, align 8
  %456 = getelementptr inbounds %union.anon, %union.anon* %13, i64 0, i32 0, i32 4
  store double 4.000000e+02, double* %456, align 8
  %457 = getelementptr inbounds %union.anon, %union.anon* %13, i64 0, i32 0, i32 5
  store i64 0, i64* %457, align 8
  %458 = getelementptr inbounds %union.anon, %union.anon* %13, i64 0, i32 0, i32 6
  store %struct.BlockSplit* %446, %struct.BlockSplit** %458, align 8
  %459 = getelementptr inbounds %union.anon, %union.anon* %13, i64 0, i32 0, i32 8
  store i64* %448, i64** %459, align 8
  %460 = getelementptr inbounds %union.anon, %union.anon* %13, i64 0, i32 0, i32 9
  store i64 512, i64* %460, align 8
  %461 = getelementptr inbounds %union.anon, %union.anon* %13, i64 0, i32 0, i32 10
  %462 = getelementptr inbounds %union.anon, %union.anon* %13, i64 0, i32 0, i32 14
  store i64 0, i64* %462, align 8
  %463 = add nuw nsw i64 %453, 1
  %464 = icmp ult i64 %450, %463
  %465 = select i1 %464, i64 %450, i64 %463
  %466 = getelementptr inbounds %struct.MetaBlockSplit, %struct.MetaBlockSplit* %11, i64 0, i32 0, i32 4
  %467 = bitcast i64* %461 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %467, i8 0, i64 16, i1 false) #6
  %468 = load i64, i64* %466, align 8
  %469 = icmp ugt i64 %468, %449
  br i1 %469, label %487, label %470

470:                                              ; preds = %444
  %471 = icmp eq i64 %468, 0
  %472 = select i1 %471, i64 %450, i64 %468
  br label %473

473:                                              ; preds = %473, %470
  %474 = phi i64 [ %472, %470 ], [ %476, %473 ]
  %475 = icmp ugt i64 %474, %449
  %476 = shl i64 %474, 1
  br i1 %475, label %477, label %473

477:                                              ; preds = %473
  %478 = tail call i8* @BrotliAllocate(%struct.MemoryManager* %0, i64 %474) #6
  %479 = load i64, i64* %466, align 8
  %480 = icmp eq i64 %479, 0
  br i1 %480, label %484, label %481

481:                                              ; preds = %477
  %482 = getelementptr inbounds %struct.MetaBlockSplit, %struct.MetaBlockSplit* %11, i64 0, i32 0, i32 2
  %483 = load i8*, i8** %482, align 8
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %478, i8* align 1 %483, i64 %479, i1 false) #6
  br label %484

484:                                              ; preds = %481, %477
  %485 = getelementptr inbounds %struct.MetaBlockSplit, %struct.MetaBlockSplit* %11, i64 0, i32 0, i32 2
  %486 = load i8*, i8** %485, align 8
  tail call void @BrotliFree(%struct.MemoryManager* %0, i8* %486) #6
  store i8* %478, i8** %485, align 8
  store i64 %474, i64* %466, align 8
  br label %487

487:                                              ; preds = %484, %444
  %488 = getelementptr inbounds %struct.MetaBlockSplit, %struct.MetaBlockSplit* %11, i64 0, i32 0, i32 5
  %489 = load i64, i64* %488, align 8
  %490 = icmp ugt i64 %489, %449
  br i1 %490, label %512, label %491

491:                                              ; preds = %487
  %492 = icmp eq i64 %489, 0
  %493 = select i1 %492, i64 %450, i64 %489
  br label %494

494:                                              ; preds = %494, %491
  %495 = phi i64 [ %493, %491 ], [ %497, %494 ]
  %496 = icmp ugt i64 %495, %449
  %497 = shl i64 %495, 1
  br i1 %496, label %498, label %494

498:                                              ; preds = %494
  %499 = shl i64 %495, 2
  %500 = tail call i8* @BrotliAllocate(%struct.MemoryManager* %0, i64 %499) #6
  %501 = load i64, i64* %488, align 8
  %502 = icmp eq i64 %501, 0
  br i1 %502, label %508, label %503

503:                                              ; preds = %498
  %504 = getelementptr inbounds %struct.MetaBlockSplit, %struct.MetaBlockSplit* %11, i64 0, i32 0, i32 3
  %505 = bitcast i32** %504 to i8**
  %506 = load i8*, i8** %505, align 8
  %507 = shl i64 %501, 2
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %500, i8* align 4 %506, i64 %507, i1 false) #6
  br label %508

508:                                              ; preds = %498, %503
  %509 = getelementptr inbounds %struct.MetaBlockSplit, %struct.MetaBlockSplit* %11, i64 0, i32 0, i32 3
  %510 = bitcast i32** %509 to i8**
  %511 = load i8*, i8** %510, align 8
  tail call void @BrotliFree(%struct.MemoryManager* %0, i8* %511) #6
  store i8* %500, i8** %510, align 8
  store i64 %495, i64* %488, align 8
  br label %512

512:                                              ; preds = %508, %487
  %513 = getelementptr inbounds %struct.MetaBlockSplit, %struct.MetaBlockSplit* %11, i64 0, i32 0, i32 1
  store i64 %450, i64* %513, align 8
  %514 = mul i64 %465, %7
  store i64 %514, i64* %448, align 8
  %515 = icmp eq i64 %514, 0
  br i1 %515, label %520, label %516

516:                                              ; preds = %512
  %517 = mul i64 %514, 1040
  %518 = tail call i8* @BrotliAllocate(%struct.MemoryManager* %0, i64 %517) #6
  %519 = bitcast i8* %518 to %struct.HistogramLiteral*
  br label %520

520:                                              ; preds = %516, %512
  %521 = phi %struct.HistogramLiteral* [ %519, %516 ], [ null, %512 ]
  store %struct.HistogramLiteral* %521, %struct.HistogramLiteral** %447, align 8
  %522 = getelementptr inbounds %union.anon, %union.anon* %13, i64 0, i32 0, i32 7
  store %struct.HistogramLiteral* %521, %struct.HistogramLiteral** %522, align 8
  %523 = icmp eq i64 %7, 0
  br i1 %523, label %563, label %524

524:                                              ; preds = %520
  %525 = add i64 %7, -1
  %526 = and i64 %7, 3
  %527 = icmp ult i64 %525, 3
  br i1 %527, label %551, label %528

528:                                              ; preds = %524
  %529 = sub i64 %7, %526
  br label %530

530:                                              ; preds = %530, %528
  %531 = phi i64 [ 0, %528 ], [ %548, %530 ]
  %532 = phi i64 [ %529, %528 ], [ %549, %530 ]
  %533 = getelementptr inbounds %struct.HistogramLiteral, %struct.HistogramLiteral* %521, i64 %531
  %534 = getelementptr inbounds %struct.HistogramLiteral, %struct.HistogramLiteral* %521, i64 %531, i32 2
  %535 = bitcast %struct.HistogramLiteral* %533 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %535, i8 0, i64 1032, i1 false) #6
  store double 0x7FF0000000000000, double* %534, align 8
  %536 = or i64 %531, 1
  %537 = getelementptr inbounds %struct.HistogramLiteral, %struct.HistogramLiteral* %521, i64 %536
  %538 = getelementptr inbounds %struct.HistogramLiteral, %struct.HistogramLiteral* %521, i64 %536, i32 2
  %539 = bitcast %struct.HistogramLiteral* %537 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %539, i8 0, i64 1032, i1 false) #6
  store double 0x7FF0000000000000, double* %538, align 8
  %540 = or i64 %531, 2
  %541 = getelementptr inbounds %struct.HistogramLiteral, %struct.HistogramLiteral* %521, i64 %540
  %542 = getelementptr inbounds %struct.HistogramLiteral, %struct.HistogramLiteral* %521, i64 %540, i32 2
  %543 = bitcast %struct.HistogramLiteral* %541 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %543, i8 0, i64 1032, i1 false) #6
  store double 0x7FF0000000000000, double* %542, align 8
  %544 = or i64 %531, 3
  %545 = getelementptr inbounds %struct.HistogramLiteral, %struct.HistogramLiteral* %521, i64 %544
  %546 = getelementptr inbounds %struct.HistogramLiteral, %struct.HistogramLiteral* %521, i64 %544, i32 2
  %547 = bitcast %struct.HistogramLiteral* %545 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %547, i8 0, i64 1032, i1 false) #6
  store double 0x7FF0000000000000, double* %546, align 8
  %548 = add nuw i64 %531, 4
  %549 = add i64 %532, -4
  %550 = icmp eq i64 %549, 0
  br i1 %550, label %551, label %530

551:                                              ; preds = %530, %524
  %552 = phi i64 [ 0, %524 ], [ %548, %530 ]
  %553 = icmp eq i64 %526, 0
  br i1 %553, label %563, label %554

554:                                              ; preds = %551, %554
  %555 = phi i64 [ %560, %554 ], [ %552, %551 ]
  %556 = phi i64 [ %561, %554 ], [ %526, %551 ]
  %557 = getelementptr inbounds %struct.HistogramLiteral, %struct.HistogramLiteral* %521, i64 %555
  %558 = getelementptr inbounds %struct.HistogramLiteral, %struct.HistogramLiteral* %521, i64 %555, i32 2
  %559 = bitcast %struct.HistogramLiteral* %557 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %559, i8 0, i64 1032, i1 false) #6
  store double 0x7FF0000000000000, double* %558, align 8
  %560 = add nuw i64 %555, 1
  %561 = add i64 %556, -1
  %562 = icmp eq i64 %561, 0
  br i1 %562, label %563, label %554, !llvm.loop !9

563:                                              ; preds = %551, %554, %520
  %564 = getelementptr inbounds %union.anon, %union.anon* %13, i64 0, i32 0, i32 12, i64 0
  %565 = bitcast i64* %564 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %565, i8 0, i64 16, i1 false) #6
  %566 = getelementptr inbounds %struct.MetaBlockSplit, %struct.MetaBlockSplit* %11, i64 0, i32 1
  %567 = getelementptr inbounds %struct.MetaBlockSplit, %struct.MetaBlockSplit* %11, i64 0, i32 9
  %568 = getelementptr inbounds %struct.MetaBlockSplit, %struct.MetaBlockSplit* %11, i64 0, i32 10
  %569 = lshr i64 %10, 10
  %570 = add nuw nsw i64 %569, 1
  %571 = icmp ult i64 %570, 257
  %572 = select i1 %571, i64 %570, i64 257
  %573 = bitcast %struct.BlockSplitterCommand* %14 to <2 x i64>*
  store <2 x i64> <i64 704, i64 1024>, <2 x i64>* %573, align 16
  %574 = getelementptr inbounds %struct.BlockSplitterCommand, %struct.BlockSplitterCommand* %14, i64 0, i32 2
  store double 5.000000e+02, double* %574, align 16
  %575 = getelementptr inbounds %struct.BlockSplitterCommand, %struct.BlockSplitterCommand* %14, i64 0, i32 3
  store i64 0, i64* %575, align 8
  %576 = getelementptr inbounds %struct.BlockSplitterCommand, %struct.BlockSplitterCommand* %14, i64 0, i32 4
  store %struct.BlockSplit* %566, %struct.BlockSplit** %576, align 16
  %577 = getelementptr inbounds %struct.BlockSplitterCommand, %struct.BlockSplitterCommand* %14, i64 0, i32 6
  store i64* %568, i64** %577, align 16
  %578 = getelementptr inbounds %struct.BlockSplitterCommand, %struct.BlockSplitterCommand* %14, i64 0, i32 7
  store i64 1024, i64* %578, align 8
  %579 = getelementptr inbounds %struct.BlockSplitterCommand, %struct.BlockSplitterCommand* %14, i64 0, i32 8
  %580 = getelementptr inbounds %struct.BlockSplitterCommand, %struct.BlockSplitterCommand* %14, i64 0, i32 12
  store i64 0, i64* %580, align 16
  %581 = getelementptr inbounds %struct.MetaBlockSplit, %struct.MetaBlockSplit* %11, i64 0, i32 1, i32 4
  %582 = bitcast i64* %579 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 16 %582, i8 0, i64 16, i1 false) #6
  %583 = load i64, i64* %581, align 8
  %584 = icmp ugt i64 %583, %569
  br i1 %584, label %602, label %585

585:                                              ; preds = %563
  %586 = icmp eq i64 %583, 0
  %587 = select i1 %586, i64 %570, i64 %583
  br label %588

588:                                              ; preds = %588, %585
  %589 = phi i64 [ %587, %585 ], [ %591, %588 ]
  %590 = icmp ugt i64 %589, %569
  %591 = shl i64 %589, 1
  br i1 %590, label %592, label %588

592:                                              ; preds = %588
  %593 = tail call i8* @BrotliAllocate(%struct.MemoryManager* %0, i64 %589) #6
  %594 = load i64, i64* %581, align 8
  %595 = icmp eq i64 %594, 0
  br i1 %595, label %599, label %596

596:                                              ; preds = %592
  %597 = getelementptr inbounds %struct.MetaBlockSplit, %struct.MetaBlockSplit* %11, i64 0, i32 1, i32 2
  %598 = load i8*, i8** %597, align 8
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %593, i8* align 1 %598, i64 %594, i1 false) #6
  br label %599

599:                                              ; preds = %596, %592
  %600 = getelementptr inbounds %struct.MetaBlockSplit, %struct.MetaBlockSplit* %11, i64 0, i32 1, i32 2
  %601 = load i8*, i8** %600, align 8
  tail call void @BrotliFree(%struct.MemoryManager* %0, i8* %601) #6
  store i8* %593, i8** %600, align 8
  store i64 %589, i64* %581, align 8
  br label %602

602:                                              ; preds = %599, %563
  %603 = getelementptr inbounds %struct.MetaBlockSplit, %struct.MetaBlockSplit* %11, i64 0, i32 1, i32 5
  %604 = load i64, i64* %603, align 8
  %605 = icmp ugt i64 %604, %569
  br i1 %605, label %627, label %606

606:                                              ; preds = %602
  %607 = icmp eq i64 %604, 0
  %608 = select i1 %607, i64 %570, i64 %604
  br label %609

609:                                              ; preds = %609, %606
  %610 = phi i64 [ %608, %606 ], [ %612, %609 ]
  %611 = icmp ugt i64 %610, %569
  %612 = shl i64 %610, 1
  br i1 %611, label %613, label %609

613:                                              ; preds = %609
  %614 = shl i64 %610, 2
  %615 = tail call i8* @BrotliAllocate(%struct.MemoryManager* %0, i64 %614) #6
  %616 = load i64, i64* %603, align 8
  %617 = icmp eq i64 %616, 0
  br i1 %617, label %623, label %618

618:                                              ; preds = %613
  %619 = getelementptr inbounds %struct.MetaBlockSplit, %struct.MetaBlockSplit* %11, i64 0, i32 1, i32 3
  %620 = bitcast i32** %619 to i8**
  %621 = load i8*, i8** %620, align 8
  %622 = shl i64 %616, 2
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %615, i8* align 4 %621, i64 %622, i1 false) #6
  br label %623

623:                                              ; preds = %613, %618
  %624 = getelementptr inbounds %struct.MetaBlockSplit, %struct.MetaBlockSplit* %11, i64 0, i32 1, i32 3
  %625 = bitcast i32** %624 to i8**
  %626 = load i8*, i8** %625, align 8
  tail call void @BrotliFree(%struct.MemoryManager* %0, i8* %626) #6
  store i8* %615, i8** %625, align 8
  store i64 %610, i64* %603, align 8
  br label %627

627:                                              ; preds = %623, %602
  %628 = getelementptr inbounds %struct.MetaBlockSplit, %struct.MetaBlockSplit* %11, i64 0, i32 1, i32 1
  store i64 %570, i64* %628, align 8
  store i64 %572, i64* %568, align 8
  %629 = mul nuw i64 %572, 2832
  %630 = tail call i8* @BrotliAllocate(%struct.MemoryManager* %0, i64 %629) #6
  %631 = bitcast %struct.HistogramCommand** %567 to i8**
  store i8* %630, i8** %631, align 8
  %632 = getelementptr inbounds %struct.BlockSplitterCommand, %struct.BlockSplitterCommand* %14, i64 0, i32 5
  %633 = bitcast %struct.HistogramCommand** %632 to i8**
  store i8* %630, i8** %633, align 8
  %634 = getelementptr inbounds i8, i8* %630, i64 2824
  %635 = bitcast i8* %634 to double*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %630, i8 0, i64 2824, i1 false) #6
  store double 0x7FF0000000000000, double* %635, align 8
  %636 = getelementptr inbounds %struct.BlockSplitterCommand, %struct.BlockSplitterCommand* %14, i64 0, i32 10, i64 0
  %637 = bitcast i64* %636 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 16 %637, i8 0, i64 16, i1 false) #6
  %638 = getelementptr inbounds %struct.MetaBlockSplit, %struct.MetaBlockSplit* %11, i64 0, i32 2
  %639 = getelementptr inbounds %struct.MetaBlockSplit, %struct.MetaBlockSplit* %11, i64 0, i32 11
  %640 = getelementptr inbounds %struct.MetaBlockSplit, %struct.MetaBlockSplit* %11, i64 0, i32 12
  %641 = lshr i64 %10, 9
  %642 = add nuw nsw i64 %641, 1
  %643 = icmp ult i64 %642, 257
  %644 = select i1 %643, i64 %642, i64 257
  %645 = bitcast %struct.BlockSplitterDistance* %15 to <2 x i64>*
  store <2 x i64> <i64 64, i64 512>, <2 x i64>* %645, align 16
  %646 = getelementptr inbounds %struct.BlockSplitterDistance, %struct.BlockSplitterDistance* %15, i64 0, i32 2
  store double 1.000000e+02, double* %646, align 16
  %647 = getelementptr inbounds %struct.BlockSplitterDistance, %struct.BlockSplitterDistance* %15, i64 0, i32 3
  store i64 0, i64* %647, align 8
  %648 = getelementptr inbounds %struct.BlockSplitterDistance, %struct.BlockSplitterDistance* %15, i64 0, i32 4
  store %struct.BlockSplit* %638, %struct.BlockSplit** %648, align 16
  %649 = getelementptr inbounds %struct.BlockSplitterDistance, %struct.BlockSplitterDistance* %15, i64 0, i32 6
  store i64* %640, i64** %649, align 16
  %650 = getelementptr inbounds %struct.BlockSplitterDistance, %struct.BlockSplitterDistance* %15, i64 0, i32 7
  store i64 512, i64* %650, align 8
  %651 = getelementptr inbounds %struct.BlockSplitterDistance, %struct.BlockSplitterDistance* %15, i64 0, i32 8
  %652 = getelementptr inbounds %struct.BlockSplitterDistance, %struct.BlockSplitterDistance* %15, i64 0, i32 12
  store i64 0, i64* %652, align 16
  %653 = getelementptr inbounds %struct.MetaBlockSplit, %struct.MetaBlockSplit* %11, i64 0, i32 2, i32 4
  %654 = bitcast i64* %651 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 16 %654, i8 0, i64 16, i1 false) #6
  %655 = load i64, i64* %653, align 8
  %656 = icmp ugt i64 %655, %641
  %657 = bitcast i8* %630 to %struct.HistogramCommand*
  br i1 %656, label %675, label %658

658:                                              ; preds = %627
  %659 = icmp eq i64 %655, 0
  %660 = select i1 %659, i64 %642, i64 %655
  br label %661

661:                                              ; preds = %661, %658
  %662 = phi i64 [ %660, %658 ], [ %664, %661 ]
  %663 = icmp ugt i64 %662, %641
  %664 = shl i64 %662, 1
  br i1 %663, label %665, label %661

665:                                              ; preds = %661
  %666 = tail call i8* @BrotliAllocate(%struct.MemoryManager* %0, i64 %662) #6
  %667 = load i64, i64* %653, align 8
  %668 = icmp eq i64 %667, 0
  br i1 %668, label %672, label %669

669:                                              ; preds = %665
  %670 = getelementptr inbounds %struct.MetaBlockSplit, %struct.MetaBlockSplit* %11, i64 0, i32 2, i32 2
  %671 = load i8*, i8** %670, align 8
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %666, i8* align 1 %671, i64 %667, i1 false) #6
  br label %672

672:                                              ; preds = %669, %665
  %673 = getelementptr inbounds %struct.MetaBlockSplit, %struct.MetaBlockSplit* %11, i64 0, i32 2, i32 2
  %674 = load i8*, i8** %673, align 8
  tail call void @BrotliFree(%struct.MemoryManager* %0, i8* %674) #6
  store i8* %666, i8** %673, align 8
  store i64 %662, i64* %653, align 8
  br label %675

675:                                              ; preds = %672, %627
  %676 = getelementptr inbounds %struct.MetaBlockSplit, %struct.MetaBlockSplit* %11, i64 0, i32 2, i32 5
  %677 = load i64, i64* %676, align 8
  %678 = icmp ugt i64 %677, %641
  br i1 %678, label %700, label %679

679:                                              ; preds = %675
  %680 = icmp eq i64 %677, 0
  %681 = select i1 %680, i64 %642, i64 %677
  br label %682

682:                                              ; preds = %682, %679
  %683 = phi i64 [ %681, %679 ], [ %685, %682 ]
  %684 = icmp ugt i64 %683, %641
  %685 = shl i64 %683, 1
  br i1 %684, label %686, label %682

686:                                              ; preds = %682
  %687 = shl i64 %683, 2
  %688 = tail call i8* @BrotliAllocate(%struct.MemoryManager* %0, i64 %687) #6
  %689 = load i64, i64* %676, align 8
  %690 = icmp eq i64 %689, 0
  br i1 %690, label %696, label %691

691:                                              ; preds = %686
  %692 = getelementptr inbounds %struct.MetaBlockSplit, %struct.MetaBlockSplit* %11, i64 0, i32 2, i32 3
  %693 = bitcast i32** %692 to i8**
  %694 = load i8*, i8** %693, align 8
  %695 = shl i64 %689, 2
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %688, i8* align 4 %694, i64 %695, i1 false) #6
  br label %696

696:                                              ; preds = %686, %691
  %697 = getelementptr inbounds %struct.MetaBlockSplit, %struct.MetaBlockSplit* %11, i64 0, i32 2, i32 3
  %698 = bitcast i32** %697 to i8**
  %699 = load i8*, i8** %698, align 8
  tail call void @BrotliFree(%struct.MemoryManager* %0, i8* %699) #6
  store i8* %688, i8** %698, align 8
  store i64 %683, i64* %676, align 8
  br label %700

700:                                              ; preds = %696, %675
  %701 = getelementptr inbounds %struct.MetaBlockSplit, %struct.MetaBlockSplit* %11, i64 0, i32 2, i32 1
  store i64 %642, i64* %701, align 8
  store i64 %644, i64* %640, align 8
  %702 = mul nuw i64 %644, 2192
  %703 = tail call i8* @BrotliAllocate(%struct.MemoryManager* %0, i64 %702) #6
  %704 = bitcast %struct.HistogramDistance** %639 to i8**
  store i8* %703, i8** %704, align 8
  %705 = getelementptr inbounds %struct.BlockSplitterDistance, %struct.BlockSplitterDistance* %15, i64 0, i32 5
  %706 = bitcast %struct.HistogramDistance** %705 to i8**
  store i8* %703, i8** %706, align 8
  %707 = getelementptr inbounds i8, i8* %703, i64 2184
  %708 = bitcast i8* %707 to double*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %703, i8 0, i64 2184, i1 false) #6
  store double 0x7FF0000000000000, double* %708, align 8
  %709 = getelementptr inbounds %struct.BlockSplitterDistance, %struct.BlockSplitterDistance* %15, i64 0, i32 10, i64 0
  %710 = bitcast i64* %709 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 16 %710, i8 0, i64 16, i1 false) #6
  br i1 %395, label %828, label %711

711:                                              ; preds = %700
  %712 = getelementptr inbounds %struct.BlockSplitterCommand, %struct.BlockSplitterCommand* %14, i64 0, i32 9
  %713 = getelementptr inbounds i8, i8* %6, i64 256
  %714 = getelementptr inbounds %union.anon, %union.anon* %13, i64 0, i32 0, i32 11
  %715 = getelementptr inbounds %union.anon, %union.anon* %13, i64 0, i32 0
  %716 = getelementptr inbounds %struct.BlockSplitterDistance, %struct.BlockSplitterDistance* %15, i64 0, i32 9
  br label %717

717:                                              ; preds = %825, %711
  %718 = phi i64 [ 0, %711 ], [ %827, %825 ]
  %719 = phi %struct.HistogramCommand* [ %657, %711 ], [ %826, %825 ]
  %720 = phi i64 [ %2, %711 ], [ %792, %825 ]
  %721 = phi i64 [ 0, %711 ], [ %823, %825 ]
  %722 = phi i8 [ %4, %711 ], [ %822, %825 ]
  %723 = phi i8 [ %5, %711 ], [ %821, %825 ]
  %724 = getelementptr inbounds %struct.Command, %struct.Command* %9, i64 %721, i32 0
  %725 = load i32, i32* %724, align 4
  %726 = getelementptr inbounds %struct.Command, %struct.Command* %9, i64 %721, i32 1
  %727 = load i32, i32* %726, align 4
  %728 = getelementptr inbounds %struct.Command, %struct.Command* %9, i64 %721, i32 3
  %729 = load i16, i16* %728, align 4
  %730 = getelementptr inbounds %struct.Command, %struct.Command* %9, i64 %721, i32 4
  %731 = load i16, i16* %730, align 2
  %732 = zext i16 %729 to i64
  %733 = getelementptr inbounds %struct.HistogramCommand, %struct.HistogramCommand* %719, i64 %718, i32 0, i64 %732
  %734 = load i32, i32* %733, align 4
  %735 = add i32 %734, 1
  store i32 %735, i32* %733, align 4
  %736 = getelementptr inbounds %struct.HistogramCommand, %struct.HistogramCommand* %719, i64 %718, i32 1
  %737 = load i64, i64* %736, align 8
  %738 = add i64 %737, 1
  store i64 %738, i64* %736, align 8
  %739 = load i64, i64* %579, align 16
  %740 = add i64 %739, 1
  store i64 %740, i64* %579, align 16
  %741 = load i64, i64* %578, align 8
  %742 = icmp eq i64 %740, %741
  br i1 %742, label %743, label %744

743:                                              ; preds = %717
  call fastcc void @BlockSplitterFinishBlockCommand(%struct.BlockSplitterCommand* nonnull %14, i32 0) #6
  br label %744

744:                                              ; preds = %743, %717
  %745 = icmp eq i32 %725, 0
  br i1 %745, label %786, label %746

746:                                              ; preds = %744
  %747 = zext i32 %725 to i64
  br label %748

748:                                              ; preds = %746, %782
  %749 = phi i64 [ %783, %782 ], [ %720, %746 ]
  %750 = phi i64 [ %784, %782 ], [ %747, %746 ]
  %751 = phi i8 [ %755, %782 ], [ %722, %746 ]
  %752 = phi i8 [ %751, %782 ], [ %723, %746 ]
  %753 = and i64 %749, %3
  %754 = getelementptr inbounds i8, i8* %1, i64 %753
  %755 = load i8, i8* %754, align 1
  %756 = zext i8 %751 to i64
  %757 = getelementptr inbounds i8, i8* %6, i64 %756
  %758 = load i8, i8* %757, align 1
  %759 = zext i8 %752 to i64
  %760 = getelementptr inbounds i8, i8* %713, i64 %759
  %761 = load i8, i8* %760, align 1
  %762 = or i8 %761, %758
  %763 = zext i8 %762 to i64
  %764 = zext i8 %755 to i64
  %765 = getelementptr inbounds i32, i32* %8, i64 %763
  %766 = load i32, i32* %765, align 4
  %767 = zext i32 %766 to i64
  %768 = load %struct.HistogramLiteral*, %struct.HistogramLiteral** %522, align 8
  %769 = load i64, i64* %714, align 8
  %770 = add i64 %769, %767
  %771 = getelementptr inbounds %struct.HistogramLiteral, %struct.HistogramLiteral* %768, i64 %770, i32 0, i64 %764
  %772 = load i32, i32* %771, align 4
  %773 = add i32 %772, 1
  store i32 %773, i32* %771, align 4
  %774 = getelementptr inbounds %struct.HistogramLiteral, %struct.HistogramLiteral* %768, i64 %770, i32 1
  %775 = load i64, i64* %774, align 8
  %776 = add i64 %775, 1
  store i64 %776, i64* %774, align 8
  %777 = load i64, i64* %461, align 8
  %778 = add i64 %777, 1
  store i64 %778, i64* %461, align 8
  %779 = load i64, i64* %460, align 8
  %780 = icmp eq i64 %778, %779
  br i1 %780, label %781, label %782

781:                                              ; preds = %748
  call fastcc void @ContextBlockSplitterFinishBlock(%struct.ContextBlockSplitter* nonnull %715, %struct.MemoryManager* %0, i32 0) #6
  br label %782

782:                                              ; preds = %781, %748
  %783 = add i64 %749, 1
  %784 = add nsw i64 %750, -1
  %785 = icmp eq i64 %784, 0
  br i1 %785, label %786, label %748

786:                                              ; preds = %782, %744
  %787 = phi i8 [ %723, %744 ], [ %751, %782 ]
  %788 = phi i8 [ %722, %744 ], [ %755, %782 ]
  %789 = phi i64 [ %720, %744 ], [ %783, %782 ]
  %790 = and i32 %727, 33554431
  %791 = zext i32 %790 to i64
  %792 = add i64 %789, %791
  %793 = icmp eq i32 %790, 0
  br i1 %793, label %820, label %794

794:                                              ; preds = %786
  %795 = add i64 %792, -2
  %796 = and i64 %795, %3
  %797 = getelementptr inbounds i8, i8* %1, i64 %796
  %798 = load i8, i8* %797, align 1
  %799 = add i64 %792, -1
  %800 = and i64 %799, %3
  %801 = getelementptr inbounds i8, i8* %1, i64 %800
  %802 = load i8, i8* %801, align 1
  %803 = icmp ugt i16 %729, 127
  br i1 %803, label %804, label %820

804:                                              ; preds = %794
  %805 = and i16 %731, 1023
  %806 = zext i16 %805 to i64
  %807 = load %struct.HistogramDistance*, %struct.HistogramDistance** %705, align 8
  %808 = load i64, i64* %716, align 8
  %809 = getelementptr inbounds %struct.HistogramDistance, %struct.HistogramDistance* %807, i64 %808, i32 0, i64 %806
  %810 = load i32, i32* %809, align 4
  %811 = add i32 %810, 1
  store i32 %811, i32* %809, align 4
  %812 = getelementptr inbounds %struct.HistogramDistance, %struct.HistogramDistance* %807, i64 %808, i32 1
  %813 = load i64, i64* %812, align 8
  %814 = add i64 %813, 1
  store i64 %814, i64* %812, align 8
  %815 = load i64, i64* %651, align 16
  %816 = add i64 %815, 1
  store i64 %816, i64* %651, align 16
  %817 = load i64, i64* %650, align 8
  %818 = icmp eq i64 %816, %817
  br i1 %818, label %819, label %820

819:                                              ; preds = %804
  call fastcc void @BlockSplitterFinishBlockDistance(%struct.BlockSplitterDistance* nonnull %15, i32 0) #6
  br label %820

820:                                              ; preds = %819, %804, %794, %786
  %821 = phi i8 [ %798, %794 ], [ %787, %786 ], [ %798, %804 ], [ %798, %819 ]
  %822 = phi i8 [ %802, %794 ], [ %788, %786 ], [ %802, %804 ], [ %802, %819 ]
  %823 = add nuw i64 %721, 1
  %824 = icmp eq i64 %823, %10
  br i1 %824, label %828, label %825

825:                                              ; preds = %820
  %826 = load %struct.HistogramCommand*, %struct.HistogramCommand** %632, align 8
  %827 = load i64, i64* %712, align 8
  br label %717

828:                                              ; preds = %820, %700
  %829 = getelementptr inbounds %union.anon, %union.anon* %13, i64 0, i32 0
  call fastcc void @ContextBlockSplitterFinishBlock(%struct.ContextBlockSplitter* nonnull %829, %struct.MemoryManager* %0, i32 1) #6
  call fastcc void @BlockSplitterFinishBlockCommand(%struct.BlockSplitterCommand* nonnull %14, i32 1) #6
  call fastcc void @BlockSplitterFinishBlockDistance(%struct.BlockSplitterDistance* nonnull %15, i32 1) #6
  %830 = icmp ugt i64 %7, 1
  br i1 %830, label %831, label %873

831:                                              ; preds = %828
  %832 = getelementptr inbounds %struct.MetaBlockSplit, %struct.MetaBlockSplit* %11, i64 0, i32 0, i32 0
  %833 = load i64, i64* %832, align 8
  %834 = shl i64 %833, 6
  %835 = getelementptr inbounds %struct.MetaBlockSplit, %struct.MetaBlockSplit* %11, i64 0, i32 4
  store i64 %834, i64* %835, align 8
  %836 = icmp eq i64 %834, 0
  br i1 %836, label %842, label %837

837:                                              ; preds = %831
  %838 = shl i64 %833, 8
  %839 = call i8* @BrotliAllocate(%struct.MemoryManager* %0, i64 %838) #6
  %840 = bitcast i8* %839 to i32*
  %841 = load i64, i64* %832, align 8
  br label %842

842:                                              ; preds = %837, %831
  %843 = phi i64 [ %841, %837 ], [ %833, %831 ]
  %844 = phi i32* [ %840, %837 ], [ null, %831 ]
  %845 = getelementptr inbounds %struct.MetaBlockSplit, %struct.MetaBlockSplit* %11, i64 0, i32 3
  store i32* %844, i32** %845, align 8
  %846 = icmp eq i64 %843, 0
  br i1 %846, label %873, label %847

847:                                              ; preds = %842, %869
  %848 = phi i64 [ %870, %869 ], [ 0, %842 ]
  %849 = mul i64 %848, %7
  %850 = trunc i64 %849 to i32
  %851 = shl i64 %848, 6
  br label %852

852:                                              ; preds = %852, %847
  %853 = phi i64 [ 0, %847 ], [ %867, %852 ]
  %854 = getelementptr inbounds i32, i32* %8, i64 %853
  %855 = load i32, i32* %854, align 4
  %856 = add i32 %855, %850
  %857 = load i32*, i32** %845, align 8
  %858 = add nuw nsw i64 %853, %851
  %859 = getelementptr inbounds i32, i32* %857, i64 %858
  store i32 %856, i32* %859, align 4
  %860 = or i64 %853, 1
  %861 = getelementptr inbounds i32, i32* %8, i64 %860
  %862 = load i32, i32* %861, align 4
  %863 = add i32 %862, %850
  %864 = load i32*, i32** %845, align 8
  %865 = add nuw nsw i64 %860, %851
  %866 = getelementptr inbounds i32, i32* %864, i64 %865
  store i32 %863, i32* %866, align 4
  %867 = add nuw nsw i64 %853, 2
  %868 = icmp eq i64 %867, 64
  br i1 %868, label %869, label %852

869:                                              ; preds = %852
  %870 = add nuw i64 %848, 1
  %871 = load i64, i64* %832, align 8
  %872 = icmp ult i64 %870, %871
  br i1 %872, label %847, label %873

873:                                              ; preds = %869, %842, %828, %389
  %874 = phi i8* [ %23, %389 ], [ %394, %828 ], [ %394, %842 ], [ %394, %869 ]
  %875 = phi i8* [ %22, %389 ], [ %393, %828 ], [ %393, %842 ], [ %393, %869 ]
  %876 = phi i8* [ %21, %389 ], [ %392, %828 ], [ %392, %842 ], [ %392, %869 ]
  call void @llvm.lifetime.end.p0i8(i64 120, i8* nonnull %874) #6
  call void @llvm.lifetime.end.p0i8(i64 120, i8* nonnull %875) #6
  call void @llvm.lifetime.end.p0i8(i64 328, i8* nonnull %876) #6
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @BrotliOptimizeHistograms(i32, %struct.MetaBlockSplit* nocapture readonly) local_unnamed_addr #2 {
  %3 = alloca [704 x i8], align 16
  %4 = getelementptr inbounds [704 x i8], [704 x i8]* %3, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 704, i8* nonnull %4) #6
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %4, i8 -86, i64 704, i1 false)
  %5 = getelementptr inbounds %struct.MetaBlockSplit, %struct.MetaBlockSplit* %1, i64 0, i32 8
  %6 = load i64, i64* %5, align 8
  %7 = icmp eq i64 %6, 0
  br i1 %7, label %10, label %8

8:                                                ; preds = %2
  %9 = getelementptr inbounds %struct.MetaBlockSplit, %struct.MetaBlockSplit* %1, i64 0, i32 7
  br label %16

10:                                               ; preds = %16, %2
  %11 = getelementptr inbounds %struct.MetaBlockSplit, %struct.MetaBlockSplit* %1, i64 0, i32 10
  %12 = load i64, i64* %11, align 8
  %13 = icmp eq i64 %12, 0
  br i1 %13, label %23, label %14

14:                                               ; preds = %10
  %15 = getelementptr inbounds %struct.MetaBlockSplit, %struct.MetaBlockSplit* %1, i64 0, i32 9
  br label %30

16:                                               ; preds = %8, %16
  %17 = phi i64 [ 0, %8 ], [ %20, %16 ]
  %18 = load %struct.HistogramLiteral*, %struct.HistogramLiteral** %9, align 8
  %19 = getelementptr inbounds %struct.HistogramLiteral, %struct.HistogramLiteral* %18, i64 %17, i32 0, i64 0
  call void @BrotliOptimizeHuffmanCountsForRle(i64 256, i32* %19, i8* nonnull %4) #6
  %20 = add nuw i64 %17, 1
  %21 = load i64, i64* %5, align 8
  %22 = icmp ult i64 %20, %21
  br i1 %22, label %16, label %10

23:                                               ; preds = %30, %10
  %24 = getelementptr inbounds %struct.MetaBlockSplit, %struct.MetaBlockSplit* %1, i64 0, i32 12
  %25 = load i64, i64* %24, align 8
  %26 = icmp eq i64 %25, 0
  br i1 %26, label %44, label %27

27:                                               ; preds = %23
  %28 = zext i32 %0 to i64
  %29 = getelementptr inbounds %struct.MetaBlockSplit, %struct.MetaBlockSplit* %1, i64 0, i32 11
  br label %37

30:                                               ; preds = %14, %30
  %31 = phi i64 [ 0, %14 ], [ %34, %30 ]
  %32 = load %struct.HistogramCommand*, %struct.HistogramCommand** %15, align 8
  %33 = getelementptr inbounds %struct.HistogramCommand, %struct.HistogramCommand* %32, i64 %31, i32 0, i64 0
  call void @BrotliOptimizeHuffmanCountsForRle(i64 704, i32* %33, i8* nonnull %4) #6
  %34 = add nuw i64 %31, 1
  %35 = load i64, i64* %11, align 8
  %36 = icmp ult i64 %34, %35
  br i1 %36, label %30, label %23

37:                                               ; preds = %27, %37
  %38 = phi i64 [ 0, %27 ], [ %41, %37 ]
  %39 = load %struct.HistogramDistance*, %struct.HistogramDistance** %29, align 8
  %40 = getelementptr inbounds %struct.HistogramDistance, %struct.HistogramDistance* %39, i64 %38, i32 0, i64 0
  call void @BrotliOptimizeHuffmanCountsForRle(i64 %28, i32* %40, i8* nonnull %4) #6
  %41 = add nuw i64 %38, 1
  %42 = load i64, i64* %24, align 8
  %43 = icmp ult i64 %41, %42
  br i1 %43, label %37, label %44

44:                                               ; preds = %37, %23
  call void @llvm.lifetime.end.p0i8(i64 704, i8* nonnull %4) #6
  ret void
}

declare hidden void @BrotliOptimizeHuffmanCountsForRle(i64, i32*, i8*) local_unnamed_addr #3

declare hidden double @BrotliPopulationCostDistance(%struct.HistogramDistance*) local_unnamed_addr #3

; Function Attrs: nounwind readnone speculatable
declare i32 @llvm.ctlz.i32(i32, i1 immarg) #4

; Function Attrs: nounwind ssp uwtable
define internal fastcc void @BlockSplitterFinishBlockLiteral(%struct.BlockSplitterLiteral*, i32) unnamed_addr #2 {
  %3 = alloca [2 x %struct.HistogramLiteral], align 16
  %4 = alloca [2 x double], align 16
  %5 = alloca [2 x double], align 16
  %6 = getelementptr inbounds %struct.BlockSplitterLiteral, %struct.BlockSplitterLiteral* %0, i64 0, i32 4
  %7 = load %struct.BlockSplit*, %struct.BlockSplit** %6, align 8
  %8 = getelementptr inbounds %struct.BlockSplitterLiteral, %struct.BlockSplitterLiteral* %0, i64 0, i32 11, i64 0
  %9 = getelementptr inbounds %struct.BlockSplitterLiteral, %struct.BlockSplitterLiteral* %0, i64 0, i32 5
  %10 = load %struct.HistogramLiteral*, %struct.HistogramLiteral** %9, align 8
  %11 = getelementptr inbounds %struct.BlockSplitterLiteral, %struct.BlockSplitterLiteral* %0, i64 0, i32 8
  %12 = load i64, i64* %11, align 8
  %13 = getelementptr inbounds %struct.BlockSplitterLiteral, %struct.BlockSplitterLiteral* %0, i64 0, i32 1
  %14 = load i64, i64* %13, align 8
  %15 = icmp ugt i64 %12, %14
  %16 = select i1 %15, i64 %12, i64 %14
  store i64 %16, i64* %11, align 8
  %17 = getelementptr inbounds %struct.BlockSplitterLiteral, %struct.BlockSplitterLiteral* %0, i64 0, i32 3
  %18 = load i64, i64* %17, align 8
  %19 = icmp eq i64 %18, 0
  br i1 %19, label %20, label %108

20:                                               ; preds = %2
  %21 = trunc i64 %16 to i32
  %22 = getelementptr inbounds %struct.BlockSplit, %struct.BlockSplit* %7, i64 0, i32 3
  %23 = load i32*, i32** %22, align 8
  store i32 %21, i32* %23, align 4
  %24 = getelementptr inbounds %struct.BlockSplit, %struct.BlockSplit* %7, i64 0, i32 2
  %25 = load i8*, i8** %24, align 8
  store i8 0, i8* %25, align 1
  %26 = getelementptr inbounds %struct.HistogramLiteral, %struct.HistogramLiteral* %10, i64 0, i32 0, i64 0
  %27 = getelementptr inbounds %struct.BlockSplitterLiteral, %struct.BlockSplitterLiteral* %0, i64 0, i32 0
  %28 = load i64, i64* %27, align 8
  %29 = getelementptr inbounds %struct.HistogramLiteral, %struct.HistogramLiteral* %10, i64 0, i32 0, i64 %28
  %30 = and i64 %28, 1
  %31 = icmp eq i64 %30, 0
  br i1 %31, label %32, label %53

32:                                               ; preds = %68, %20
  %33 = phi i32* [ %57, %68 ], [ %26, %20 ]
  %34 = phi i64 [ %60, %68 ], [ 0, %20 ]
  %35 = phi double [ %71, %68 ], [ 0.000000e+00, %20 ]
  %36 = icmp ult i32* %33, %29
  br i1 %36, label %37, label %72

37:                                               ; preds = %32
  %38 = getelementptr inbounds i32, i32* %33, i64 1
  %39 = load i32, i32* %33, align 4
  %40 = zext i32 %39 to i64
  %41 = add i64 %34, %40
  %42 = uitofp i32 %39 to double
  %43 = icmp ult i32 %39, 256
  br i1 %43, label %44, label %47

44:                                               ; preds = %37
  %45 = getelementptr inbounds [256 x double], [256 x double]* @kBrotliLog2Table, i64 0, i64 %40
  %46 = load double, double* %45, align 8
  br label %49

47:                                               ; preds = %37
  %48 = tail call double @log2(double %42) #6
  br label %49

49:                                               ; preds = %47, %44
  %50 = phi double [ %46, %44 ], [ %48, %47 ]
  %51 = fmul double %50, %42
  %52 = fsub double %35, %51
  br label %53

53:                                               ; preds = %49, %20
  %54 = phi i32* [ %26, %20 ], [ %38, %49 ]
  %55 = phi i64 [ 0, %20 ], [ %41, %49 ]
  %56 = phi double [ 0.000000e+00, %20 ], [ %52, %49 ]
  %57 = getelementptr inbounds i32, i32* %54, i64 1
  %58 = load i32, i32* %54, align 4
  %59 = zext i32 %58 to i64
  %60 = add i64 %55, %59
  %61 = uitofp i32 %58 to double
  %62 = icmp ult i32 %58, 256
  br i1 %62, label %63, label %66

63:                                               ; preds = %53
  %64 = getelementptr inbounds [256 x double], [256 x double]* @kBrotliLog2Table, i64 0, i64 %59
  %65 = load double, double* %64, align 8
  br label %68

66:                                               ; preds = %53
  %67 = tail call double @log2(double %61) #6
  br label %68

68:                                               ; preds = %66, %63
  %69 = phi double [ %65, %63 ], [ %67, %66 ]
  %70 = fmul double %69, %61
  %71 = fsub double %56, %70
  br label %32

72:                                               ; preds = %32
  %73 = icmp eq i64 %34, 0
  %74 = uitofp i64 %34 to double
  br i1 %73, label %86, label %75

75:                                               ; preds = %72
  %76 = icmp ult i64 %34, 256
  br i1 %76, label %77, label %80

77:                                               ; preds = %75
  %78 = getelementptr inbounds [256 x double], [256 x double]* @kBrotliLog2Table, i64 0, i64 %34
  %79 = load double, double* %78, align 8
  br label %82

80:                                               ; preds = %75
  %81 = tail call double @log2(double %74) #6
  br label %82

82:                                               ; preds = %80, %77
  %83 = phi double [ %79, %77 ], [ %81, %80 ]
  %84 = fmul double %83, %74
  %85 = fadd double %35, %84
  br label %86

86:                                               ; preds = %72, %82
  %87 = phi double [ %85, %82 ], [ %35, %72 ]
  %88 = fcmp olt double %87, %74
  %89 = select i1 %88, double %74, double %87
  store double %89, double* %8, align 8
  %90 = getelementptr inbounds %struct.BlockSplitterLiteral, %struct.BlockSplitterLiteral* %0, i64 0, i32 11, i64 1
  store double %89, double* %90, align 8
  %91 = load i64, i64* %17, align 8
  %92 = add i64 %91, 1
  store i64 %92, i64* %17, align 8
  %93 = getelementptr inbounds %struct.BlockSplit, %struct.BlockSplit* %7, i64 0, i32 0
  %94 = load i64, i64* %93, align 8
  %95 = add i64 %94, 1
  store i64 %95, i64* %93, align 8
  %96 = getelementptr inbounds %struct.BlockSplitterLiteral, %struct.BlockSplitterLiteral* %0, i64 0, i32 9
  %97 = load i64, i64* %96, align 8
  %98 = add i64 %97, 1
  store i64 %98, i64* %96, align 8
  %99 = getelementptr inbounds %struct.BlockSplitterLiteral, %struct.BlockSplitterLiteral* %0, i64 0, i32 6
  %100 = load i64*, i64** %99, align 8
  %101 = load i64, i64* %100, align 8
  %102 = icmp ult i64 %98, %101
  br i1 %102, label %103, label %107

103:                                              ; preds = %86
  %104 = getelementptr inbounds %struct.HistogramLiteral, %struct.HistogramLiteral* %10, i64 %98
  %105 = getelementptr inbounds %struct.HistogramLiteral, %struct.HistogramLiteral* %10, i64 %98, i32 2
  %106 = bitcast %struct.HistogramLiteral* %104 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %106, i8 0, i64 1032, i1 false) #6
  store double 0x7FF0000000000000, double* %105, align 8
  br label %107

107:                                              ; preds = %103, %86
  store i64 0, i64* %11, align 8
  br label %463

108:                                              ; preds = %2
  %109 = icmp eq i64 %16, 0
  br i1 %109, label %463, label %110

110:                                              ; preds = %108
  %111 = getelementptr inbounds %struct.BlockSplitterLiteral, %struct.BlockSplitterLiteral* %0, i64 0, i32 9
  %112 = load i64, i64* %111, align 8
  %113 = getelementptr inbounds %struct.HistogramLiteral, %struct.HistogramLiteral* %10, i64 %112, i32 0, i64 0
  %114 = getelementptr inbounds %struct.BlockSplitterLiteral, %struct.BlockSplitterLiteral* %0, i64 0, i32 0
  %115 = load i64, i64* %114, align 8
  %116 = getelementptr inbounds %struct.HistogramLiteral, %struct.HistogramLiteral* %10, i64 %112, i32 0, i64 %115
  %117 = and i64 %115, 1
  %118 = icmp eq i64 %117, 0
  br i1 %118, label %119, label %140

119:                                              ; preds = %155, %110
  %120 = phi i32* [ %144, %155 ], [ %113, %110 ]
  %121 = phi i64 [ %147, %155 ], [ 0, %110 ]
  %122 = phi double [ %158, %155 ], [ 0.000000e+00, %110 ]
  %123 = icmp ult i32* %120, %116
  br i1 %123, label %124, label %159

124:                                              ; preds = %119
  %125 = getelementptr inbounds i32, i32* %120, i64 1
  %126 = load i32, i32* %120, align 4
  %127 = zext i32 %126 to i64
  %128 = add i64 %121, %127
  %129 = uitofp i32 %126 to double
  %130 = icmp ult i32 %126, 256
  br i1 %130, label %131, label %134

131:                                              ; preds = %124
  %132 = getelementptr inbounds [256 x double], [256 x double]* @kBrotliLog2Table, i64 0, i64 %127
  %133 = load double, double* %132, align 8
  br label %136

134:                                              ; preds = %124
  %135 = tail call double @log2(double %129) #6
  br label %136

136:                                              ; preds = %134, %131
  %137 = phi double [ %133, %131 ], [ %135, %134 ]
  %138 = fmul double %137, %129
  %139 = fsub double %122, %138
  br label %140

140:                                              ; preds = %136, %110
  %141 = phi i32* [ %113, %110 ], [ %125, %136 ]
  %142 = phi i64 [ 0, %110 ], [ %128, %136 ]
  %143 = phi double [ 0.000000e+00, %110 ], [ %139, %136 ]
  %144 = getelementptr inbounds i32, i32* %141, i64 1
  %145 = load i32, i32* %141, align 4
  %146 = zext i32 %145 to i64
  %147 = add i64 %142, %146
  %148 = uitofp i32 %145 to double
  %149 = icmp ult i32 %145, 256
  br i1 %149, label %150, label %153

150:                                              ; preds = %140
  %151 = getelementptr inbounds [256 x double], [256 x double]* @kBrotliLog2Table, i64 0, i64 %146
  %152 = load double, double* %151, align 8
  br label %155

153:                                              ; preds = %140
  %154 = tail call double @log2(double %148) #6
  br label %155

155:                                              ; preds = %153, %150
  %156 = phi double [ %152, %150 ], [ %154, %153 ]
  %157 = fmul double %156, %148
  %158 = fsub double %143, %157
  br label %119

159:                                              ; preds = %119
  %160 = icmp eq i64 %121, 0
  %161 = uitofp i64 %121 to double
  br i1 %160, label %173, label %162

162:                                              ; preds = %159
  %163 = icmp ult i64 %121, 256
  br i1 %163, label %164, label %167

164:                                              ; preds = %162
  %165 = getelementptr inbounds [256 x double], [256 x double]* @kBrotliLog2Table, i64 0, i64 %121
  %166 = load double, double* %165, align 8
  br label %169

167:                                              ; preds = %162
  %168 = tail call double @log2(double %161) #6
  br label %169

169:                                              ; preds = %167, %164
  %170 = phi double [ %166, %164 ], [ %168, %167 ]
  %171 = fmul double %170, %161
  %172 = fadd double %122, %171
  br label %173

173:                                              ; preds = %159, %169
  %174 = phi double [ %172, %169 ], [ %122, %159 ]
  %175 = fcmp olt double %174, %161
  %176 = select i1 %175, double %161, double %174
  %177 = bitcast [2 x %struct.HistogramLiteral]* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 2080, i8* nonnull %177) #6
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 16 %177, i8* align 16 bitcast ([2 x %struct.HistogramLiteral]* @__const.BlockSplitterFinishBlockLiteral.combined_histo to i8*), i64 2080, i1 false)
  %178 = bitcast [2 x double]* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %178) #6
  %179 = getelementptr inbounds [2 x double], [2 x double]* %4, i64 0, i64 1
  %180 = bitcast [2 x double]* %5 to i8*
  %181 = bitcast [2 x double]* %4 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %181, i8 -1, i64 16, i1 false)
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %180) #6
  %182 = getelementptr inbounds [2 x double], [2 x double]* %5, i64 0, i64 0
  %183 = getelementptr inbounds [2 x double], [2 x double]* %5, i64 0, i64 1
  %184 = bitcast [2 x double]* %5 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %184, i8 -1, i64 16, i1 false)
  %185 = getelementptr %struct.HistogramLiteral, %struct.HistogramLiteral* %10, i64 0, i32 1
  br label %186

186:                                              ; preds = %322, %173
  %187 = phi i64 [ 0, %173 ], [ %332, %322 ]
  %188 = getelementptr inbounds %struct.BlockSplitterLiteral, %struct.BlockSplitterLiteral* %0, i64 0, i32 10, i64 %187
  %189 = load i64, i64* %188, align 8
  %190 = getelementptr inbounds [2 x %struct.HistogramLiteral], [2 x %struct.HistogramLiteral]* %3, i64 0, i64 %187
  %191 = load i64, i64* %111, align 8
  %192 = getelementptr inbounds %struct.HistogramLiteral, %struct.HistogramLiteral* %10, i64 %191
  %193 = bitcast %struct.HistogramLiteral* %190 to i8*
  %194 = bitcast %struct.HistogramLiteral* %192 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 16 %193, i8* align 8 %194, i64 1040, i1 false)
  %195 = getelementptr inbounds %struct.HistogramLiteral, %struct.HistogramLiteral* %10, i64 %189, i32 1
  %196 = load i64, i64* %195, align 8
  %197 = getelementptr inbounds [2 x %struct.HistogramLiteral], [2 x %struct.HistogramLiteral]* %3, i64 0, i64 %187, i32 1
  %198 = load i64, i64* %197, align 16
  %199 = add i64 %198, %196
  store i64 %199, i64* %197, align 16
  %200 = getelementptr [2 x %struct.HistogramLiteral], [2 x %struct.HistogramLiteral]* %3, i64 0, i64 %187, i32 1
  %201 = getelementptr [2 x %struct.HistogramLiteral], [2 x %struct.HistogramLiteral]* %3, i64 0, i64 %187
  %202 = getelementptr %struct.HistogramLiteral, %struct.HistogramLiteral* %10, i64 %189
  %203 = mul i64 %189, 130
  %204 = getelementptr i64, i64* %185, i64 %203
  %205 = bitcast i64* %204 to %struct.HistogramLiteral*
  %206 = icmp ult %struct.HistogramLiteral* %201, %205
  %207 = bitcast i64* %200 to %struct.HistogramLiteral*
  %208 = icmp ult %struct.HistogramLiteral* %202, %207
  %209 = and i1 %206, %208
  br i1 %209, label %247, label %210

210:                                              ; preds = %186, %210
  %211 = phi i64 [ %245, %210 ], [ 0, %186 ]
  %212 = getelementptr inbounds %struct.HistogramLiteral, %struct.HistogramLiteral* %10, i64 %189, i32 0, i64 %211
  %213 = bitcast i32* %212 to <4 x i32>*
  %214 = load <4 x i32>, <4 x i32>* %213, align 4, !alias.scope !10
  %215 = getelementptr inbounds i32, i32* %212, i64 4
  %216 = bitcast i32* %215 to <4 x i32>*
  %217 = load <4 x i32>, <4 x i32>* %216, align 4, !alias.scope !10
  %218 = getelementptr inbounds [2 x %struct.HistogramLiteral], [2 x %struct.HistogramLiteral]* %3, i64 0, i64 %187, i32 0, i64 %211
  %219 = bitcast i32* %218 to <4 x i32>*
  %220 = load <4 x i32>, <4 x i32>* %219, align 16, !alias.scope !13, !noalias !10
  %221 = getelementptr inbounds i32, i32* %218, i64 4
  %222 = bitcast i32* %221 to <4 x i32>*
  %223 = load <4 x i32>, <4 x i32>* %222, align 16, !alias.scope !13, !noalias !10
  %224 = add <4 x i32> %220, %214
  %225 = add <4 x i32> %223, %217
  %226 = bitcast i32* %218 to <4 x i32>*
  store <4 x i32> %224, <4 x i32>* %226, align 16, !alias.scope !13, !noalias !10
  %227 = bitcast i32* %221 to <4 x i32>*
  store <4 x i32> %225, <4 x i32>* %227, align 16, !alias.scope !13, !noalias !10
  %228 = or i64 %211, 8
  %229 = getelementptr inbounds %struct.HistogramLiteral, %struct.HistogramLiteral* %10, i64 %189, i32 0, i64 %228
  %230 = bitcast i32* %229 to <4 x i32>*
  %231 = load <4 x i32>, <4 x i32>* %230, align 4, !alias.scope !10
  %232 = getelementptr inbounds i32, i32* %229, i64 4
  %233 = bitcast i32* %232 to <4 x i32>*
  %234 = load <4 x i32>, <4 x i32>* %233, align 4, !alias.scope !10
  %235 = getelementptr inbounds [2 x %struct.HistogramLiteral], [2 x %struct.HistogramLiteral]* %3, i64 0, i64 %187, i32 0, i64 %228
  %236 = bitcast i32* %235 to <4 x i32>*
  %237 = load <4 x i32>, <4 x i32>* %236, align 16, !alias.scope !13, !noalias !10
  %238 = getelementptr inbounds i32, i32* %235, i64 4
  %239 = bitcast i32* %238 to <4 x i32>*
  %240 = load <4 x i32>, <4 x i32>* %239, align 16, !alias.scope !13, !noalias !10
  %241 = add <4 x i32> %237, %231
  %242 = add <4 x i32> %240, %234
  %243 = bitcast i32* %235 to <4 x i32>*
  store <4 x i32> %241, <4 x i32>* %243, align 16, !alias.scope !13, !noalias !10
  %244 = bitcast i32* %238 to <4 x i32>*
  store <4 x i32> %242, <4 x i32>* %244, align 16, !alias.scope !13, !noalias !10
  %245 = add nuw nsw i64 %211, 16
  %246 = icmp eq i64 %245, 256
  br i1 %246, label %262, label %210, !llvm.loop !15

247:                                              ; preds = %186, %247
  %248 = phi i64 [ %260, %247 ], [ 0, %186 ]
  %249 = getelementptr inbounds %struct.HistogramLiteral, %struct.HistogramLiteral* %10, i64 %189, i32 0, i64 %248
  %250 = load i32, i32* %249, align 4
  %251 = getelementptr inbounds [2 x %struct.HistogramLiteral], [2 x %struct.HistogramLiteral]* %3, i64 0, i64 %187, i32 0, i64 %248
  %252 = load i32, i32* %251, align 8
  %253 = add i32 %252, %250
  store i32 %253, i32* %251, align 8
  %254 = or i64 %248, 1
  %255 = getelementptr inbounds %struct.HistogramLiteral, %struct.HistogramLiteral* %10, i64 %189, i32 0, i64 %254
  %256 = load i32, i32* %255, align 4
  %257 = getelementptr inbounds [2 x %struct.HistogramLiteral], [2 x %struct.HistogramLiteral]* %3, i64 0, i64 %187, i32 0, i64 %254
  %258 = load i32, i32* %257, align 4
  %259 = add i32 %258, %256
  store i32 %259, i32* %257, align 4
  %260 = add nuw nsw i64 %248, 2
  %261 = icmp eq i64 %260, 256
  br i1 %261, label %262, label %247, !llvm.loop !17

262:                                              ; preds = %210, %247
  %263 = getelementptr inbounds %struct.HistogramLiteral, %struct.HistogramLiteral* %190, i64 0, i32 0, i64 0
  %264 = load i64, i64* %114, align 8
  %265 = getelementptr inbounds [2 x %struct.HistogramLiteral], [2 x %struct.HistogramLiteral]* %3, i64 0, i64 %187, i32 0, i64 %264
  %266 = and i64 %264, 1
  %267 = icmp eq i64 %266, 0
  br i1 %267, label %268, label %289

268:                                              ; preds = %304, %262
  %269 = phi i32* [ %293, %304 ], [ %263, %262 ]
  %270 = phi i64 [ %296, %304 ], [ 0, %262 ]
  %271 = phi double [ %307, %304 ], [ 0.000000e+00, %262 ]
  %272 = icmp ult i32* %269, %265
  br i1 %272, label %273, label %308

273:                                              ; preds = %268
  %274 = getelementptr inbounds i32, i32* %269, i64 1
  %275 = load i32, i32* %269, align 4
  %276 = zext i32 %275 to i64
  %277 = add i64 %270, %276
  %278 = uitofp i32 %275 to double
  %279 = icmp ult i32 %275, 256
  br i1 %279, label %280, label %283

280:                                              ; preds = %273
  %281 = getelementptr inbounds [256 x double], [256 x double]* @kBrotliLog2Table, i64 0, i64 %276
  %282 = load double, double* %281, align 8
  br label %285

283:                                              ; preds = %273
  %284 = call double @log2(double %278) #6
  br label %285

285:                                              ; preds = %283, %280
  %286 = phi double [ %282, %280 ], [ %284, %283 ]
  %287 = fmul double %286, %278
  %288 = fsub double %271, %287
  br label %289

289:                                              ; preds = %285, %262
  %290 = phi i32* [ %263, %262 ], [ %274, %285 ]
  %291 = phi i64 [ 0, %262 ], [ %277, %285 ]
  %292 = phi double [ 0.000000e+00, %262 ], [ %288, %285 ]
  %293 = getelementptr inbounds i32, i32* %290, i64 1
  %294 = load i32, i32* %290, align 4
  %295 = zext i32 %294 to i64
  %296 = add i64 %291, %295
  %297 = uitofp i32 %294 to double
  %298 = icmp ult i32 %294, 256
  br i1 %298, label %299, label %302

299:                                              ; preds = %289
  %300 = getelementptr inbounds [256 x double], [256 x double]* @kBrotliLog2Table, i64 0, i64 %295
  %301 = load double, double* %300, align 8
  br label %304

302:                                              ; preds = %289
  %303 = call double @log2(double %297) #6
  br label %304

304:                                              ; preds = %302, %299
  %305 = phi double [ %301, %299 ], [ %303, %302 ]
  %306 = fmul double %305, %297
  %307 = fsub double %292, %306
  br label %268

308:                                              ; preds = %268
  %309 = icmp eq i64 %270, 0
  %310 = uitofp i64 %270 to double
  br i1 %309, label %322, label %311

311:                                              ; preds = %308
  %312 = icmp ult i64 %270, 256
  br i1 %312, label %313, label %316

313:                                              ; preds = %311
  %314 = getelementptr inbounds [256 x double], [256 x double]* @kBrotliLog2Table, i64 0, i64 %270
  %315 = load double, double* %314, align 8
  br label %318

316:                                              ; preds = %311
  %317 = call double @log2(double %310) #6
  br label %318

318:                                              ; preds = %316, %313
  %319 = phi double [ %315, %313 ], [ %317, %316 ]
  %320 = fmul double %319, %310
  %321 = fadd double %271, %320
  br label %322

322:                                              ; preds = %308, %318
  %323 = phi double [ %321, %318 ], [ %271, %308 ]
  %324 = fcmp olt double %323, %310
  %325 = select i1 %324, double %310, double %323
  %326 = getelementptr inbounds [2 x double], [2 x double]* %4, i64 0, i64 %187
  store double %325, double* %326, align 8
  %327 = fsub double %325, %176
  %328 = getelementptr inbounds %struct.BlockSplitterLiteral, %struct.BlockSplitterLiteral* %0, i64 0, i32 11, i64 %187
  %329 = load double, double* %328, align 8
  %330 = fsub double %327, %329
  %331 = getelementptr inbounds [2 x double], [2 x double]* %5, i64 0, i64 %187
  store double %330, double* %331, align 8
  %332 = add nuw nsw i64 %187, 1
  %333 = icmp eq i64 %332, 2
  br i1 %333, label %334, label %186

334:                                              ; preds = %322
  %335 = getelementptr inbounds %struct.BlockSplit, %struct.BlockSplit* %7, i64 0, i32 0
  %336 = load i64, i64* %335, align 8
  %337 = icmp ult i64 %336, 256
  br i1 %337, label %341, label %338

338:                                              ; preds = %334
  %339 = load double, double* %183, align 8
  %340 = load double, double* %182, align 16
  br label %389

341:                                              ; preds = %334
  %342 = load double, double* %182, align 16
  %343 = getelementptr inbounds %struct.BlockSplitterLiteral, %struct.BlockSplitterLiteral* %0, i64 0, i32 2
  %344 = load double, double* %343, align 8
  %345 = fcmp ogt double %342, %344
  %346 = load double, double* %183, align 8
  %347 = fcmp ogt double %346, %344
  %348 = and i1 %345, %347
  br i1 %348, label %349, label %389

349:                                              ; preds = %341
  %350 = load i64, i64* %11, align 8
  %351 = trunc i64 %350 to i32
  %352 = getelementptr inbounds %struct.BlockSplit, %struct.BlockSplit* %7, i64 0, i32 3
  %353 = load i32*, i32** %352, align 8
  %354 = load i64, i64* %17, align 8
  %355 = getelementptr inbounds i32, i32* %353, i64 %354
  store i32 %351, i32* %355, align 4
  %356 = load i64, i64* %335, align 8
  %357 = trunc i64 %356 to i8
  %358 = getelementptr inbounds %struct.BlockSplit, %struct.BlockSplit* %7, i64 0, i32 2
  %359 = load i8*, i8** %358, align 8
  %360 = load i64, i64* %17, align 8
  %361 = getelementptr inbounds i8, i8* %359, i64 %360
  store i8 %357, i8* %361, align 1
  %362 = getelementptr inbounds %struct.BlockSplitterLiteral, %struct.BlockSplitterLiteral* %0, i64 0, i32 10, i64 0
  %363 = load i64, i64* %362, align 8
  %364 = getelementptr inbounds %struct.BlockSplitterLiteral, %struct.BlockSplitterLiteral* %0, i64 0, i32 10, i64 1
  store i64 %363, i64* %364, align 8
  %365 = load i64, i64* %335, align 8
  %366 = and i64 %365, 255
  store i64 %366, i64* %362, align 8
  %367 = bitcast double* %8 to i64*
  %368 = load i64, i64* %367, align 8
  %369 = getelementptr inbounds %struct.BlockSplitterLiteral, %struct.BlockSplitterLiteral* %0, i64 0, i32 11, i64 1
  %370 = bitcast double* %369 to i64*
  store i64 %368, i64* %370, align 8
  store double %176, double* %8, align 8
  %371 = load i64, i64* %17, align 8
  %372 = add i64 %371, 1
  store i64 %372, i64* %17, align 8
  %373 = load i64, i64* %335, align 8
  %374 = add i64 %373, 1
  store i64 %374, i64* %335, align 8
  %375 = load i64, i64* %111, align 8
  %376 = add i64 %375, 1
  store i64 %376, i64* %111, align 8
  %377 = getelementptr inbounds %struct.BlockSplitterLiteral, %struct.BlockSplitterLiteral* %0, i64 0, i32 6
  %378 = load i64*, i64** %377, align 8
  %379 = load i64, i64* %378, align 8
  %380 = icmp ult i64 %376, %379
  br i1 %380, label %381, label %385

381:                                              ; preds = %349
  %382 = getelementptr inbounds %struct.HistogramLiteral, %struct.HistogramLiteral* %10, i64 %376
  %383 = getelementptr inbounds %struct.HistogramLiteral, %struct.HistogramLiteral* %10, i64 %376, i32 2
  %384 = bitcast %struct.HistogramLiteral* %382 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %384, i8 0, i64 1032, i1 false) #6
  store double 0x7FF0000000000000, double* %383, align 8
  br label %385

385:                                              ; preds = %381, %349
  store i64 0, i64* %11, align 8
  %386 = getelementptr inbounds %struct.BlockSplitterLiteral, %struct.BlockSplitterLiteral* %0, i64 0, i32 12
  store i64 0, i64* %386, align 8
  %387 = load i64, i64* %13, align 8
  %388 = getelementptr inbounds %struct.BlockSplitterLiteral, %struct.BlockSplitterLiteral* %0, i64 0, i32 7
  store i64 %387, i64* %388, align 8
  br label %462

389:                                              ; preds = %338, %341
  %390 = phi double [ %340, %338 ], [ %342, %341 ]
  %391 = phi double [ %339, %338 ], [ %346, %341 ]
  %392 = fadd double %390, -2.000000e+01
  %393 = fcmp olt double %391, %392
  %394 = load i64, i64* %11, align 8
  %395 = trunc i64 %394 to i32
  %396 = getelementptr inbounds %struct.BlockSplit, %struct.BlockSplit* %7, i64 0, i32 3
  %397 = load i32*, i32** %396, align 8
  %398 = load i64, i64* %17, align 8
  br i1 %393, label %399, label %431

399:                                              ; preds = %389
  %400 = getelementptr inbounds i32, i32* %397, i64 %398
  store i32 %395, i32* %400, align 4
  %401 = getelementptr inbounds %struct.BlockSplit, %struct.BlockSplit* %7, i64 0, i32 2
  %402 = load i8*, i8** %401, align 8
  %403 = load i64, i64* %17, align 8
  %404 = add i64 %403, -2
  %405 = getelementptr inbounds i8, i8* %402, i64 %404
  %406 = load i8, i8* %405, align 1
  %407 = getelementptr inbounds i8, i8* %402, i64 %403
  store i8 %406, i8* %407, align 1
  %408 = getelementptr inbounds %struct.BlockSplitterLiteral, %struct.BlockSplitterLiteral* %0, i64 0, i32 10, i64 0
  %409 = load i64, i64* %408, align 8
  %410 = getelementptr inbounds %struct.BlockSplitterLiteral, %struct.BlockSplitterLiteral* %0, i64 0, i32 10, i64 1
  %411 = load i64, i64* %410, align 8
  store i64 %411, i64* %408, align 8
  store i64 %409, i64* %410, align 8
  %412 = getelementptr inbounds %struct.HistogramLiteral, %struct.HistogramLiteral* %10, i64 %411
  %413 = getelementptr inbounds [2 x %struct.HistogramLiteral], [2 x %struct.HistogramLiteral]* %3, i64 0, i64 1
  %414 = bitcast %struct.HistogramLiteral* %412 to i8*
  %415 = bitcast %struct.HistogramLiteral* %413 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %414, i8* align 16 %415, i64 1040, i1 false)
  %416 = bitcast double* %8 to i64*
  %417 = load i64, i64* %416, align 8
  %418 = getelementptr inbounds %struct.BlockSplitterLiteral, %struct.BlockSplitterLiteral* %0, i64 0, i32 11, i64 1
  %419 = bitcast double* %418 to i64*
  store i64 %417, i64* %419, align 8
  %420 = bitcast double* %179 to i64*
  %421 = load i64, i64* %420, align 8
  store i64 %421, i64* %416, align 8
  %422 = load i64, i64* %17, align 8
  %423 = add i64 %422, 1
  store i64 %423, i64* %17, align 8
  store i64 0, i64* %11, align 8
  %424 = load i64, i64* %111, align 8
  %425 = getelementptr inbounds %struct.HistogramLiteral, %struct.HistogramLiteral* %10, i64 %424
  %426 = getelementptr inbounds %struct.HistogramLiteral, %struct.HistogramLiteral* %10, i64 %424, i32 2
  %427 = bitcast %struct.HistogramLiteral* %425 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %427, i8 0, i64 1032, i1 false) #6
  store double 0x7FF0000000000000, double* %426, align 8
  %428 = getelementptr inbounds %struct.BlockSplitterLiteral, %struct.BlockSplitterLiteral* %0, i64 0, i32 12
  store i64 0, i64* %428, align 8
  %429 = load i64, i64* %13, align 8
  %430 = getelementptr inbounds %struct.BlockSplitterLiteral, %struct.BlockSplitterLiteral* %0, i64 0, i32 7
  store i64 %429, i64* %430, align 8
  br label %462

431:                                              ; preds = %389
  %432 = add i64 %398, -1
  %433 = getelementptr inbounds i32, i32* %397, i64 %432
  %434 = load i32, i32* %433, align 4
  %435 = add i32 %434, %395
  store i32 %435, i32* %433, align 4
  %436 = getelementptr inbounds %struct.BlockSplitterLiteral, %struct.BlockSplitterLiteral* %0, i64 0, i32 10, i64 0
  %437 = load i64, i64* %436, align 8
  %438 = getelementptr inbounds %struct.HistogramLiteral, %struct.HistogramLiteral* %10, i64 %437
  %439 = bitcast %struct.HistogramLiteral* %438 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %439, i8* nonnull align 16 %177, i64 1040, i1 false)
  %440 = bitcast [2 x double]* %4 to i64*
  %441 = load i64, i64* %440, align 16
  %442 = bitcast double* %8 to i64*
  store i64 %441, i64* %442, align 8
  %443 = load i64, i64* %335, align 8
  %444 = icmp eq i64 %443, 1
  br i1 %444, label %445, label %448

445:                                              ; preds = %431
  %446 = getelementptr inbounds %struct.BlockSplitterLiteral, %struct.BlockSplitterLiteral* %0, i64 0, i32 11, i64 1
  %447 = bitcast double* %446 to i64*
  store i64 %441, i64* %447, align 8
  br label %448

448:                                              ; preds = %445, %431
  store i64 0, i64* %11, align 8
  %449 = load i64, i64* %111, align 8
  %450 = getelementptr inbounds %struct.HistogramLiteral, %struct.HistogramLiteral* %10, i64 %449
  %451 = getelementptr inbounds %struct.HistogramLiteral, %struct.HistogramLiteral* %10, i64 %449, i32 2
  %452 = bitcast %struct.HistogramLiteral* %450 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %452, i8 0, i64 1032, i1 false) #6
  store double 0x7FF0000000000000, double* %451, align 8
  %453 = getelementptr inbounds %struct.BlockSplitterLiteral, %struct.BlockSplitterLiteral* %0, i64 0, i32 12
  %454 = load i64, i64* %453, align 8
  %455 = add i64 %454, 1
  store i64 %455, i64* %453, align 8
  %456 = icmp ugt i64 %455, 1
  br i1 %456, label %457, label %462

457:                                              ; preds = %448
  %458 = load i64, i64* %13, align 8
  %459 = getelementptr inbounds %struct.BlockSplitterLiteral, %struct.BlockSplitterLiteral* %0, i64 0, i32 7
  %460 = load i64, i64* %459, align 8
  %461 = add i64 %460, %458
  store i64 %461, i64* %459, align 8
  br label %462

462:                                              ; preds = %399, %457, %448, %385
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %180) #6
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %178) #6
  call void @llvm.lifetime.end.p0i8(i64 2080, i8* nonnull %177) #6
  br label %463

463:                                              ; preds = %108, %462, %107
  %464 = icmp eq i32 %1, 0
  br i1 %464, label %472, label %465

465:                                              ; preds = %463
  %466 = getelementptr inbounds %struct.BlockSplit, %struct.BlockSplit* %7, i64 0, i32 0
  %467 = load i64, i64* %466, align 8
  %468 = getelementptr inbounds %struct.BlockSplitterLiteral, %struct.BlockSplitterLiteral* %0, i64 0, i32 6
  %469 = load i64*, i64** %468, align 8
  store i64 %467, i64* %469, align 8
  %470 = load i64, i64* %17, align 8
  %471 = getelementptr inbounds %struct.BlockSplit, %struct.BlockSplit* %7, i64 0, i32 1
  store i64 %470, i64* %471, align 8
  br label %472

472:                                              ; preds = %463, %465
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal fastcc void @ContextBlockSplitterFinishBlock(%struct.ContextBlockSplitter*, %struct.MemoryManager*, i32) unnamed_addr #2 {
  %4 = bitcast %struct.ContextBlockSplitter* %0 to i8*
  %5 = alloca [13 x double], align 16
  %6 = alloca [26 x double], align 16
  %7 = alloca [2 x double], align 16
  %8 = getelementptr inbounds %struct.ContextBlockSplitter, %struct.ContextBlockSplitter* %0, i64 0, i32 6
  %9 = load %struct.BlockSplit*, %struct.BlockSplit** %8, align 8
  %10 = getelementptr inbounds %struct.ContextBlockSplitter, %struct.ContextBlockSplitter* %0, i64 0, i32 1
  %11 = load i64, i64* %10, align 8
  %12 = getelementptr inbounds %struct.ContextBlockSplitter, %struct.ContextBlockSplitter* %0, i64 0, i32 7
  %13 = load %struct.HistogramLiteral*, %struct.HistogramLiteral** %12, align 8
  %14 = getelementptr inbounds %struct.ContextBlockSplitter, %struct.ContextBlockSplitter* %0, i64 0, i32 10
  %15 = load i64, i64* %14, align 8
  %16 = getelementptr inbounds %struct.ContextBlockSplitter, %struct.ContextBlockSplitter* %0, i64 0, i32 3
  %17 = load i64, i64* %16, align 8
  %18 = icmp ult i64 %15, %17
  br i1 %18, label %19, label %20

19:                                               ; preds = %3
  store i64 %17, i64* %14, align 8
  br label %20

20:                                               ; preds = %19, %3
  %21 = phi i64 [ %17, %19 ], [ %15, %3 ]
  %22 = getelementptr inbounds %struct.ContextBlockSplitter, %struct.ContextBlockSplitter* %0, i64 0, i32 5
  %23 = load i64, i64* %22, align 8
  %24 = icmp eq i64 %23, 0
  br i1 %24, label %25, label %162

25:                                               ; preds = %20
  %26 = trunc i64 %21 to i32
  %27 = getelementptr inbounds %struct.BlockSplit, %struct.BlockSplit* %9, i64 0, i32 3
  %28 = load i32*, i32** %27, align 8
  store i32 %26, i32* %28, align 4
  %29 = getelementptr inbounds %struct.BlockSplit, %struct.BlockSplit* %9, i64 0, i32 2
  %30 = load i8*, i8** %29, align 8
  store i8 0, i8* %30, align 1
  %31 = icmp eq i64 %11, 0
  br i1 %31, label %104, label %32

32:                                               ; preds = %25
  %33 = getelementptr inbounds %struct.ContextBlockSplitter, %struct.ContextBlockSplitter* %0, i64 0, i32 0
  br label %34

34:                                               ; preds = %95, %32
  %35 = phi i64 [ 0, %32 ], [ %102, %95 ]
  %36 = getelementptr inbounds %struct.HistogramLiteral, %struct.HistogramLiteral* %13, i64 %35, i32 0, i64 0
  %37 = load i64, i64* %33, align 8
  %38 = getelementptr inbounds %struct.HistogramLiteral, %struct.HistogramLiteral* %13, i64 %35, i32 0, i64 %37
  %39 = and i64 %37, 1
  %40 = icmp eq i64 %39, 0
  br i1 %40, label %41, label %62

41:                                               ; preds = %77, %34
  %42 = phi i32* [ %66, %77 ], [ %36, %34 ]
  %43 = phi i64 [ %69, %77 ], [ 0, %34 ]
  %44 = phi double [ %80, %77 ], [ 0.000000e+00, %34 ]
  %45 = icmp ult i32* %42, %38
  br i1 %45, label %46, label %81

46:                                               ; preds = %41
  %47 = getelementptr inbounds i32, i32* %42, i64 1
  %48 = load i32, i32* %42, align 4
  %49 = zext i32 %48 to i64
  %50 = add i64 %43, %49
  %51 = uitofp i32 %48 to double
  %52 = icmp ult i32 %48, 256
  br i1 %52, label %53, label %56

53:                                               ; preds = %46
  %54 = getelementptr inbounds [256 x double], [256 x double]* @kBrotliLog2Table, i64 0, i64 %49
  %55 = load double, double* %54, align 8
  br label %58

56:                                               ; preds = %46
  %57 = tail call double @log2(double %51) #6
  br label %58

58:                                               ; preds = %56, %53
  %59 = phi double [ %55, %53 ], [ %57, %56 ]
  %60 = fmul double %59, %51
  %61 = fsub double %44, %60
  br label %62

62:                                               ; preds = %58, %34
  %63 = phi i32* [ %36, %34 ], [ %47, %58 ]
  %64 = phi i64 [ 0, %34 ], [ %50, %58 ]
  %65 = phi double [ 0.000000e+00, %34 ], [ %61, %58 ]
  %66 = getelementptr inbounds i32, i32* %63, i64 1
  %67 = load i32, i32* %63, align 4
  %68 = zext i32 %67 to i64
  %69 = add i64 %64, %68
  %70 = uitofp i32 %67 to double
  %71 = icmp ult i32 %67, 256
  br i1 %71, label %72, label %75

72:                                               ; preds = %62
  %73 = getelementptr inbounds [256 x double], [256 x double]* @kBrotliLog2Table, i64 0, i64 %68
  %74 = load double, double* %73, align 8
  br label %77

75:                                               ; preds = %62
  %76 = tail call double @log2(double %70) #6
  br label %77

77:                                               ; preds = %75, %72
  %78 = phi double [ %74, %72 ], [ %76, %75 ]
  %79 = fmul double %78, %70
  %80 = fsub double %65, %79
  br label %41

81:                                               ; preds = %41
  %82 = icmp eq i64 %43, 0
  %83 = uitofp i64 %43 to double
  br i1 %82, label %95, label %84

84:                                               ; preds = %81
  %85 = icmp ult i64 %43, 256
  br i1 %85, label %86, label %89

86:                                               ; preds = %84
  %87 = getelementptr inbounds [256 x double], [256 x double]* @kBrotliLog2Table, i64 0, i64 %43
  %88 = load double, double* %87, align 8
  br label %91

89:                                               ; preds = %84
  %90 = tail call double @log2(double %83) #6
  br label %91

91:                                               ; preds = %89, %86
  %92 = phi double [ %88, %86 ], [ %90, %89 ]
  %93 = fmul double %92, %83
  %94 = fadd double %44, %93
  br label %95

95:                                               ; preds = %81, %91
  %96 = phi double [ %94, %91 ], [ %44, %81 ]
  %97 = fcmp olt double %96, %83
  %98 = select i1 %97, double %83, double %96
  %99 = getelementptr inbounds %struct.ContextBlockSplitter, %struct.ContextBlockSplitter* %0, i64 0, i32 13, i64 %35
  store double %98, double* %99, align 8
  %100 = add i64 %35, %11
  %101 = getelementptr inbounds %struct.ContextBlockSplitter, %struct.ContextBlockSplitter* %0, i64 0, i32 13, i64 %100
  store double %98, double* %101, align 8
  %102 = add nuw i64 %35, 1
  %103 = icmp eq i64 %102, %11
  br i1 %103, label %104, label %34

104:                                              ; preds = %95, %25
  %105 = load i64, i64* %22, align 8
  %106 = add i64 %105, 1
  store i64 %106, i64* %22, align 8
  %107 = getelementptr inbounds %struct.BlockSplit, %struct.BlockSplit* %9, i64 0, i32 0
  %108 = load i64, i64* %107, align 8
  %109 = add i64 %108, 1
  store i64 %109, i64* %107, align 8
  %110 = getelementptr inbounds %struct.ContextBlockSplitter, %struct.ContextBlockSplitter* %0, i64 0, i32 11
  %111 = load i64, i64* %110, align 8
  %112 = add i64 %111, %11
  store i64 %112, i64* %110, align 8
  %113 = getelementptr inbounds %struct.ContextBlockSplitter, %struct.ContextBlockSplitter* %0, i64 0, i32 8
  %114 = load i64*, i64** %113, align 8
  %115 = load i64, i64* %114, align 8
  %116 = icmp ult i64 %112, %115
  br i1 %116, label %117, label %161

117:                                              ; preds = %104
  %118 = load %struct.HistogramLiteral*, %struct.HistogramLiteral** %12, align 8
  %119 = getelementptr inbounds %struct.HistogramLiteral, %struct.HistogramLiteral* %118, i64 %112
  %120 = load i64, i64* %10, align 8
  %121 = icmp eq i64 %120, 0
  br i1 %121, label %161, label %122

122:                                              ; preds = %117
  %123 = add i64 %120, -1
  %124 = and i64 %120, 3
  %125 = icmp ult i64 %123, 3
  br i1 %125, label %149, label %126

126:                                              ; preds = %122
  %127 = sub i64 %120, %124
  br label %128

128:                                              ; preds = %128, %126
  %129 = phi i64 [ 0, %126 ], [ %146, %128 ]
  %130 = phi i64 [ %127, %126 ], [ %147, %128 ]
  %131 = getelementptr inbounds %struct.HistogramLiteral, %struct.HistogramLiteral* %119, i64 %129
  %132 = getelementptr inbounds %struct.HistogramLiteral, %struct.HistogramLiteral* %119, i64 %129, i32 2
  %133 = bitcast %struct.HistogramLiteral* %131 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %133, i8 0, i64 1032, i1 false) #6
  store double 0x7FF0000000000000, double* %132, align 8
  %134 = or i64 %129, 1
  %135 = getelementptr inbounds %struct.HistogramLiteral, %struct.HistogramLiteral* %119, i64 %134
  %136 = getelementptr inbounds %struct.HistogramLiteral, %struct.HistogramLiteral* %119, i64 %134, i32 2
  %137 = bitcast %struct.HistogramLiteral* %135 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %137, i8 0, i64 1032, i1 false) #6
  store double 0x7FF0000000000000, double* %136, align 8
  %138 = or i64 %129, 2
  %139 = getelementptr inbounds %struct.HistogramLiteral, %struct.HistogramLiteral* %119, i64 %138
  %140 = getelementptr inbounds %struct.HistogramLiteral, %struct.HistogramLiteral* %119, i64 %138, i32 2
  %141 = bitcast %struct.HistogramLiteral* %139 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %141, i8 0, i64 1032, i1 false) #6
  store double 0x7FF0000000000000, double* %140, align 8
  %142 = or i64 %129, 3
  %143 = getelementptr inbounds %struct.HistogramLiteral, %struct.HistogramLiteral* %119, i64 %142
  %144 = getelementptr inbounds %struct.HistogramLiteral, %struct.HistogramLiteral* %119, i64 %142, i32 2
  %145 = bitcast %struct.HistogramLiteral* %143 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %145, i8 0, i64 1032, i1 false) #6
  store double 0x7FF0000000000000, double* %144, align 8
  %146 = add nuw i64 %129, 4
  %147 = add i64 %130, -4
  %148 = icmp eq i64 %147, 0
  br i1 %148, label %149, label %128

149:                                              ; preds = %128, %122
  %150 = phi i64 [ 0, %122 ], [ %146, %128 ]
  %151 = icmp eq i64 %124, 0
  br i1 %151, label %161, label %152

152:                                              ; preds = %149, %152
  %153 = phi i64 [ %158, %152 ], [ %150, %149 ]
  %154 = phi i64 [ %159, %152 ], [ %124, %149 ]
  %155 = getelementptr inbounds %struct.HistogramLiteral, %struct.HistogramLiteral* %119, i64 %153
  %156 = getelementptr inbounds %struct.HistogramLiteral, %struct.HistogramLiteral* %119, i64 %153, i32 2
  %157 = bitcast %struct.HistogramLiteral* %155 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %157, i8 0, i64 1032, i1 false) #6
  store double 0x7FF0000000000000, double* %156, align 8
  %158 = add nuw i64 %153, 1
  %159 = add i64 %154, -1
  %160 = icmp eq i64 %159, 0
  br i1 %160, label %161, label %152, !llvm.loop !18

161:                                              ; preds = %149, %152, %117, %104
  store i64 0, i64* %14, align 8
  br label %773

162:                                              ; preds = %20
  %163 = icmp eq i64 %21, 0
  br i1 %163, label %773, label %164

164:                                              ; preds = %162
  %165 = bitcast [13 x double]* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 104, i8* nonnull %165) #6
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %165, i8 -1, i64 104, i1 false)
  %166 = and i64 %11, 9223372036854775807
  %167 = icmp eq i64 %166, 0
  br i1 %167, label %172, label %168

168:                                              ; preds = %164
  %169 = mul i64 %11, 2080
  %170 = tail call i8* @BrotliAllocate(%struct.MemoryManager* %1, i64 %169) #6
  %171 = bitcast i8* %170 to %struct.HistogramLiteral*
  br label %172

172:                                              ; preds = %164, %168
  %173 = phi i8* [ %170, %168 ], [ null, %164 ]
  %174 = phi %struct.HistogramLiteral* [ %171, %168 ], [ null, %164 ]
  %175 = bitcast [26 x double]* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 208, i8* nonnull %175) #6
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %175, i8 -1, i64 208, i1 false)
  %176 = bitcast [2 x double]* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %176) #6
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %176, i8 0, i64 16, i1 false)
  %177 = icmp eq i64 %11, 0
  br i1 %177, label %407, label %178

178:                                              ; preds = %172
  %179 = getelementptr inbounds %struct.ContextBlockSplitter, %struct.ContextBlockSplitter* %0, i64 0, i32 11
  %180 = getelementptr inbounds %struct.ContextBlockSplitter, %struct.ContextBlockSplitter* %0, i64 0, i32 0
  %181 = getelementptr %struct.HistogramLiteral, %struct.HistogramLiteral* %13, i64 0, i32 1
  br label %182

182:                                              ; preds = %404, %178
  %183 = phi i64 [ 0, %178 ], [ %405, %404 ]
  %184 = load i64, i64* %179, align 8
  %185 = add i64 %184, %183
  %186 = getelementptr inbounds %struct.HistogramLiteral, %struct.HistogramLiteral* %13, i64 %185
  %187 = getelementptr inbounds %struct.HistogramLiteral, %struct.HistogramLiteral* %186, i64 0, i32 0, i64 0
  %188 = load i64, i64* %180, align 8
  %189 = getelementptr inbounds %struct.HistogramLiteral, %struct.HistogramLiteral* %13, i64 %185, i32 0, i64 %188
  %190 = and i64 %188, 1
  %191 = icmp eq i64 %190, 0
  br i1 %191, label %192, label %213

192:                                              ; preds = %228, %182
  %193 = phi i32* [ %217, %228 ], [ %187, %182 ]
  %194 = phi i64 [ %220, %228 ], [ 0, %182 ]
  %195 = phi double [ %231, %228 ], [ 0.000000e+00, %182 ]
  %196 = icmp ult i32* %193, %189
  br i1 %196, label %197, label %232

197:                                              ; preds = %192
  %198 = getelementptr inbounds i32, i32* %193, i64 1
  %199 = load i32, i32* %193, align 4
  %200 = zext i32 %199 to i64
  %201 = add i64 %194, %200
  %202 = uitofp i32 %199 to double
  %203 = icmp ult i32 %199, 256
  br i1 %203, label %204, label %207

204:                                              ; preds = %197
  %205 = getelementptr inbounds [256 x double], [256 x double]* @kBrotliLog2Table, i64 0, i64 %200
  %206 = load double, double* %205, align 8
  br label %209

207:                                              ; preds = %197
  %208 = tail call double @log2(double %202) #6
  br label %209

209:                                              ; preds = %207, %204
  %210 = phi double [ %206, %204 ], [ %208, %207 ]
  %211 = fmul double %210, %202
  %212 = fsub double %195, %211
  br label %213

213:                                              ; preds = %209, %182
  %214 = phi i32* [ %187, %182 ], [ %198, %209 ]
  %215 = phi i64 [ 0, %182 ], [ %201, %209 ]
  %216 = phi double [ 0.000000e+00, %182 ], [ %212, %209 ]
  %217 = getelementptr inbounds i32, i32* %214, i64 1
  %218 = load i32, i32* %214, align 4
  %219 = zext i32 %218 to i64
  %220 = add i64 %215, %219
  %221 = uitofp i32 %218 to double
  %222 = icmp ult i32 %218, 256
  br i1 %222, label %223, label %226

223:                                              ; preds = %213
  %224 = getelementptr inbounds [256 x double], [256 x double]* @kBrotliLog2Table, i64 0, i64 %219
  %225 = load double, double* %224, align 8
  br label %228

226:                                              ; preds = %213
  %227 = tail call double @log2(double %221) #6
  br label %228

228:                                              ; preds = %226, %223
  %229 = phi double [ %225, %223 ], [ %227, %226 ]
  %230 = fmul double %229, %221
  %231 = fsub double %216, %230
  br label %192

232:                                              ; preds = %192
  %233 = icmp eq i64 %194, 0
  %234 = uitofp i64 %194 to double
  br i1 %233, label %246, label %235

235:                                              ; preds = %232
  %236 = icmp ult i64 %194, 256
  br i1 %236, label %237, label %240

237:                                              ; preds = %235
  %238 = getelementptr inbounds [256 x double], [256 x double]* @kBrotliLog2Table, i64 0, i64 %194
  %239 = load double, double* %238, align 8
  br label %242

240:                                              ; preds = %235
  %241 = tail call double @log2(double %234) #6
  br label %242

242:                                              ; preds = %240, %237
  %243 = phi double [ %239, %237 ], [ %241, %240 ]
  %244 = fmul double %243, %234
  %245 = fadd double %195, %244
  br label %246

246:                                              ; preds = %232, %242
  %247 = phi double [ %245, %242 ], [ %195, %232 ]
  %248 = fcmp olt double %247, %234
  %249 = select i1 %248, double %234, double %247
  %250 = getelementptr inbounds [13 x double], [13 x double]* %5, i64 0, i64 %183
  store double %249, double* %250, align 8
  %251 = bitcast %struct.HistogramLiteral* %186 to i8*
  br label %252

252:                                              ; preds = %390, %246
  %253 = phi i64 [ 0, %246 ], [ %402, %390 ]
  %254 = mul i64 %11, %253
  %255 = add i64 %183, %254
  %256 = mul nuw nsw i64 %253, %11
  %257 = add i64 %256, %183
  %258 = getelementptr inbounds %struct.ContextBlockSplitter, %struct.ContextBlockSplitter* %0, i64 0, i32 12, i64 %253
  %259 = load i64, i64* %258, align 8
  %260 = add i64 %259, %183
  %261 = getelementptr inbounds %struct.HistogramLiteral, %struct.HistogramLiteral* %174, i64 %257
  %262 = bitcast %struct.HistogramLiteral* %261 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %262, i8* align 8 %251, i64 1040, i1 false)
  %263 = getelementptr inbounds %struct.HistogramLiteral, %struct.HistogramLiteral* %13, i64 %260, i32 1
  %264 = load i64, i64* %263, align 8
  %265 = getelementptr inbounds %struct.HistogramLiteral, %struct.HistogramLiteral* %174, i64 %257, i32 1
  %266 = load i64, i64* %265, align 8
  %267 = add i64 %266, %264
  store i64 %267, i64* %265, align 8
  %268 = getelementptr %struct.HistogramLiteral, %struct.HistogramLiteral* %174, i64 %255, i32 1
  %269 = getelementptr %struct.HistogramLiteral, %struct.HistogramLiteral* %174, i64 %255
  %270 = getelementptr %struct.HistogramLiteral, %struct.HistogramLiteral* %13, i64 %260
  %271 = mul i64 %260, 130
  %272 = getelementptr i64, i64* %181, i64 %271
  %273 = bitcast i64* %272 to %struct.HistogramLiteral*
  %274 = icmp ult %struct.HistogramLiteral* %269, %273
  %275 = bitcast i64* %268 to %struct.HistogramLiteral*
  %276 = icmp ult %struct.HistogramLiteral* %270, %275
  %277 = and i1 %274, %276
  br i1 %277, label %315, label %278

278:                                              ; preds = %252, %278
  %279 = phi i64 [ %313, %278 ], [ 0, %252 ]
  %280 = getelementptr inbounds %struct.HistogramLiteral, %struct.HistogramLiteral* %13, i64 %260, i32 0, i64 %279
  %281 = bitcast i32* %280 to <4 x i32>*
  %282 = load <4 x i32>, <4 x i32>* %281, align 4, !alias.scope !19
  %283 = getelementptr inbounds i32, i32* %280, i64 4
  %284 = bitcast i32* %283 to <4 x i32>*
  %285 = load <4 x i32>, <4 x i32>* %284, align 4, !alias.scope !19
  %286 = getelementptr inbounds %struct.HistogramLiteral, %struct.HistogramLiteral* %174, i64 %257, i32 0, i64 %279
  %287 = bitcast i32* %286 to <4 x i32>*
  %288 = load <4 x i32>, <4 x i32>* %287, align 4, !alias.scope !22, !noalias !19
  %289 = getelementptr inbounds i32, i32* %286, i64 4
  %290 = bitcast i32* %289 to <4 x i32>*
  %291 = load <4 x i32>, <4 x i32>* %290, align 4, !alias.scope !22, !noalias !19
  %292 = add <4 x i32> %288, %282
  %293 = add <4 x i32> %291, %285
  %294 = bitcast i32* %286 to <4 x i32>*
  store <4 x i32> %292, <4 x i32>* %294, align 4, !alias.scope !22, !noalias !19
  %295 = bitcast i32* %289 to <4 x i32>*
  store <4 x i32> %293, <4 x i32>* %295, align 4, !alias.scope !22, !noalias !19
  %296 = or i64 %279, 8
  %297 = getelementptr inbounds %struct.HistogramLiteral, %struct.HistogramLiteral* %13, i64 %260, i32 0, i64 %296
  %298 = bitcast i32* %297 to <4 x i32>*
  %299 = load <4 x i32>, <4 x i32>* %298, align 4, !alias.scope !19
  %300 = getelementptr inbounds i32, i32* %297, i64 4
  %301 = bitcast i32* %300 to <4 x i32>*
  %302 = load <4 x i32>, <4 x i32>* %301, align 4, !alias.scope !19
  %303 = getelementptr inbounds %struct.HistogramLiteral, %struct.HistogramLiteral* %174, i64 %257, i32 0, i64 %296
  %304 = bitcast i32* %303 to <4 x i32>*
  %305 = load <4 x i32>, <4 x i32>* %304, align 4, !alias.scope !22, !noalias !19
  %306 = getelementptr inbounds i32, i32* %303, i64 4
  %307 = bitcast i32* %306 to <4 x i32>*
  %308 = load <4 x i32>, <4 x i32>* %307, align 4, !alias.scope !22, !noalias !19
  %309 = add <4 x i32> %305, %299
  %310 = add <4 x i32> %308, %302
  %311 = bitcast i32* %303 to <4 x i32>*
  store <4 x i32> %309, <4 x i32>* %311, align 4, !alias.scope !22, !noalias !19
  %312 = bitcast i32* %306 to <4 x i32>*
  store <4 x i32> %310, <4 x i32>* %312, align 4, !alias.scope !22, !noalias !19
  %313 = add nuw nsw i64 %279, 16
  %314 = icmp eq i64 %313, 256
  br i1 %314, label %330, label %278, !llvm.loop !24

315:                                              ; preds = %252, %315
  %316 = phi i64 [ %328, %315 ], [ 0, %252 ]
  %317 = getelementptr inbounds %struct.HistogramLiteral, %struct.HistogramLiteral* %13, i64 %260, i32 0, i64 %316
  %318 = load i32, i32* %317, align 4
  %319 = getelementptr inbounds %struct.HistogramLiteral, %struct.HistogramLiteral* %174, i64 %257, i32 0, i64 %316
  %320 = load i32, i32* %319, align 4
  %321 = add i32 %320, %318
  store i32 %321, i32* %319, align 4
  %322 = or i64 %316, 1
  %323 = getelementptr inbounds %struct.HistogramLiteral, %struct.HistogramLiteral* %13, i64 %260, i32 0, i64 %322
  %324 = load i32, i32* %323, align 4
  %325 = getelementptr inbounds %struct.HistogramLiteral, %struct.HistogramLiteral* %174, i64 %257, i32 0, i64 %322
  %326 = load i32, i32* %325, align 4
  %327 = add i32 %326, %324
  store i32 %327, i32* %325, align 4
  %328 = add nuw nsw i64 %316, 2
  %329 = icmp eq i64 %328, 256
  br i1 %329, label %330, label %315, !llvm.loop !25

330:                                              ; preds = %278, %315
  %331 = getelementptr inbounds %struct.HistogramLiteral, %struct.HistogramLiteral* %261, i64 0, i32 0, i64 0
  %332 = load i64, i64* %180, align 8
  %333 = getelementptr inbounds %struct.HistogramLiteral, %struct.HistogramLiteral* %174, i64 %257, i32 0, i64 %332
  %334 = and i64 %332, 1
  %335 = icmp eq i64 %334, 0
  br i1 %335, label %336, label %357

336:                                              ; preds = %372, %330
  %337 = phi i32* [ %361, %372 ], [ %331, %330 ]
  %338 = phi i64 [ %364, %372 ], [ 0, %330 ]
  %339 = phi double [ %375, %372 ], [ 0.000000e+00, %330 ]
  %340 = icmp ult i32* %337, %333
  br i1 %340, label %341, label %376

341:                                              ; preds = %336
  %342 = getelementptr inbounds i32, i32* %337, i64 1
  %343 = load i32, i32* %337, align 4
  %344 = zext i32 %343 to i64
  %345 = add i64 %338, %344
  %346 = uitofp i32 %343 to double
  %347 = icmp ult i32 %343, 256
  br i1 %347, label %348, label %351

348:                                              ; preds = %341
  %349 = getelementptr inbounds [256 x double], [256 x double]* @kBrotliLog2Table, i64 0, i64 %344
  %350 = load double, double* %349, align 8
  br label %353

351:                                              ; preds = %341
  %352 = tail call double @log2(double %346) #6
  br label %353

353:                                              ; preds = %351, %348
  %354 = phi double [ %350, %348 ], [ %352, %351 ]
  %355 = fmul double %354, %346
  %356 = fsub double %339, %355
  br label %357

357:                                              ; preds = %353, %330
  %358 = phi i32* [ %331, %330 ], [ %342, %353 ]
  %359 = phi i64 [ 0, %330 ], [ %345, %353 ]
  %360 = phi double [ 0.000000e+00, %330 ], [ %356, %353 ]
  %361 = getelementptr inbounds i32, i32* %358, i64 1
  %362 = load i32, i32* %358, align 4
  %363 = zext i32 %362 to i64
  %364 = add i64 %359, %363
  %365 = uitofp i32 %362 to double
  %366 = icmp ult i32 %362, 256
  br i1 %366, label %367, label %370

367:                                              ; preds = %357
  %368 = getelementptr inbounds [256 x double], [256 x double]* @kBrotliLog2Table, i64 0, i64 %363
  %369 = load double, double* %368, align 8
  br label %372

370:                                              ; preds = %357
  %371 = tail call double @log2(double %365) #6
  br label %372

372:                                              ; preds = %370, %367
  %373 = phi double [ %369, %367 ], [ %371, %370 ]
  %374 = fmul double %373, %365
  %375 = fsub double %360, %374
  br label %336

376:                                              ; preds = %336
  %377 = icmp eq i64 %338, 0
  %378 = uitofp i64 %338 to double
  br i1 %377, label %390, label %379

379:                                              ; preds = %376
  %380 = icmp ult i64 %338, 256
  br i1 %380, label %381, label %384

381:                                              ; preds = %379
  %382 = getelementptr inbounds [256 x double], [256 x double]* @kBrotliLog2Table, i64 0, i64 %338
  %383 = load double, double* %382, align 8
  br label %386

384:                                              ; preds = %379
  %385 = tail call double @log2(double %378) #6
  br label %386

386:                                              ; preds = %384, %381
  %387 = phi double [ %383, %381 ], [ %385, %384 ]
  %388 = fmul double %387, %378
  %389 = fadd double %339, %388
  br label %390

390:                                              ; preds = %376, %386
  %391 = phi double [ %389, %386 ], [ %339, %376 ]
  %392 = fcmp olt double %391, %378
  %393 = select i1 %392, double %378, double %391
  %394 = getelementptr inbounds [26 x double], [26 x double]* %6, i64 0, i64 %257
  store double %393, double* %394, align 8
  %395 = fsub double %393, %249
  %396 = getelementptr inbounds %struct.ContextBlockSplitter, %struct.ContextBlockSplitter* %0, i64 0, i32 13, i64 %257
  %397 = load double, double* %396, align 8
  %398 = fsub double %395, %397
  %399 = getelementptr inbounds [2 x double], [2 x double]* %7, i64 0, i64 %253
  %400 = load double, double* %399, align 8
  %401 = fadd double %400, %398
  store double %401, double* %399, align 8
  %402 = add nuw nsw i64 %253, 1
  %403 = icmp eq i64 %402, 2
  br i1 %403, label %404, label %252

404:                                              ; preds = %390
  %405 = add nuw i64 %183, 1
  %406 = icmp eq i64 %405, %11
  br i1 %406, label %407, label %182

407:                                              ; preds = %404, %172
  %408 = getelementptr inbounds %struct.BlockSplit, %struct.BlockSplit* %9, i64 0, i32 0
  %409 = load i64, i64* %408, align 8
  %410 = getelementptr inbounds %struct.ContextBlockSplitter, %struct.ContextBlockSplitter* %0, i64 0, i32 2
  %411 = load i64, i64* %410, align 8
  %412 = icmp ult i64 %409, %411
  %413 = getelementptr inbounds [2 x double], [2 x double]* %7, i64 0, i64 0
  %414 = load double, double* %413, align 16
  br i1 %412, label %415, label %670

415:                                              ; preds = %407
  %416 = getelementptr inbounds %struct.ContextBlockSplitter, %struct.ContextBlockSplitter* %0, i64 0, i32 4
  %417 = load double, double* %416, align 8
  %418 = fcmp ogt double %414, %417
  br i1 %418, label %419, label %670

419:                                              ; preds = %415
  %420 = getelementptr inbounds [2 x double], [2 x double]* %7, i64 0, i64 1
  %421 = load double, double* %420, align 8
  %422 = fcmp ogt double %421, %417
  br i1 %422, label %423, label %670

423:                                              ; preds = %419
  %424 = load i64, i64* %14, align 8
  %425 = trunc i64 %424 to i32
  %426 = getelementptr inbounds %struct.BlockSplit, %struct.BlockSplit* %9, i64 0, i32 3
  %427 = load i32*, i32** %426, align 8
  %428 = load i64, i64* %22, align 8
  %429 = getelementptr inbounds i32, i32* %427, i64 %428
  store i32 %425, i32* %429, align 4
  %430 = load i64, i64* %408, align 8
  %431 = trunc i64 %430 to i8
  %432 = getelementptr inbounds %struct.BlockSplit, %struct.BlockSplit* %9, i64 0, i32 2
  %433 = load i8*, i8** %432, align 8
  %434 = load i64, i64* %22, align 8
  %435 = getelementptr inbounds i8, i8* %433, i64 %434
  store i8 %431, i8* %435, align 1
  %436 = getelementptr inbounds %struct.ContextBlockSplitter, %struct.ContextBlockSplitter* %0, i64 0, i32 12, i64 0
  %437 = load i64, i64* %436, align 8
  %438 = getelementptr inbounds %struct.ContextBlockSplitter, %struct.ContextBlockSplitter* %0, i64 0, i32 12, i64 1
  store i64 %437, i64* %438, align 8
  %439 = load i64, i64* %408, align 8
  %440 = mul i64 %439, %11
  store i64 %440, i64* %436, align 8
  br i1 %177, label %610, label %441

441:                                              ; preds = %423
  %442 = icmp ult i64 %11, 4
  br i1 %442, label %543, label %443

443:                                              ; preds = %441
  %444 = add i64 %11, -1
  %445 = getelementptr %struct.ContextBlockSplitter, %struct.ContextBlockSplitter* %0, i64 0, i32 13, i64 0
  %446 = ptrtoint double* %445 to i64
  %447 = call { i64, i1 } @llvm.umul.with.overflow.i64(i64 %444, i64 8)
  %448 = extractvalue { i64, i1 } %447, 0
  %449 = extractvalue { i64, i1 } %447, 1
  %450 = xor i64 %446, -1
  %451 = icmp ugt i64 %448, %450
  %452 = or i1 %451, %449
  %453 = shl i64 %11, 3
  %454 = add i64 %453, 112
  %455 = getelementptr i8, i8* %4, i64 %454
  %456 = ptrtoint i8* %455 to i64
  %457 = call { i64, i1 } @llvm.umul.with.overflow.i64(i64 %444, i64 8)
  %458 = extractvalue { i64, i1 } %457, 0
  %459 = extractvalue { i64, i1 } %457, 1
  %460 = xor i64 %456, -1
  %461 = icmp ugt i64 %458, %460
  %462 = or i1 %461, %459
  %463 = or i1 %452, %462
  br i1 %463, label %543, label %464

464:                                              ; preds = %443
  %465 = and i64 %11, -4
  %466 = add i64 %465, -4
  %467 = lshr exact i64 %466, 2
  %468 = add nuw nsw i64 %467, 1
  %469 = and i64 %468, 1
  %470 = icmp eq i64 %466, 0
  br i1 %470, label %518, label %471

471:                                              ; preds = %464
  %472 = sub nuw nsw i64 %468, %469
  br label %473

473:                                              ; preds = %473, %471
  %474 = phi i64 [ 0, %471 ], [ %515, %473 ]
  %475 = phi i64 [ %472, %471 ], [ %516, %473 ]
  %476 = getelementptr inbounds %struct.ContextBlockSplitter, %struct.ContextBlockSplitter* %0, i64 0, i32 13, i64 %474
  %477 = bitcast double* %476 to <2 x i64>*
  %478 = load <2 x i64>, <2 x i64>* %477, align 8
  %479 = getelementptr inbounds double, double* %476, i64 2
  %480 = bitcast double* %479 to <2 x i64>*
  %481 = load <2 x i64>, <2 x i64>* %480, align 8
  %482 = add i64 %474, %11
  %483 = getelementptr inbounds %struct.ContextBlockSplitter, %struct.ContextBlockSplitter* %0, i64 0, i32 13, i64 %482
  %484 = bitcast double* %483 to <2 x i64>*
  store <2 x i64> %478, <2 x i64>* %484, align 8
  %485 = getelementptr inbounds double, double* %483, i64 2
  %486 = bitcast double* %485 to <2 x i64>*
  store <2 x i64> %481, <2 x i64>* %486, align 8
  %487 = getelementptr inbounds [13 x double], [13 x double]* %5, i64 0, i64 %474
  %488 = bitcast double* %487 to <2 x i64>*
  %489 = load <2 x i64>, <2 x i64>* %488, align 16
  %490 = getelementptr inbounds double, double* %487, i64 2
  %491 = bitcast double* %490 to <2 x i64>*
  %492 = load <2 x i64>, <2 x i64>* %491, align 16
  %493 = bitcast double* %476 to <2 x i64>*
  store <2 x i64> %489, <2 x i64>* %493, align 8
  %494 = bitcast double* %479 to <2 x i64>*
  store <2 x i64> %492, <2 x i64>* %494, align 8
  %495 = or i64 %474, 4
  %496 = getelementptr inbounds %struct.ContextBlockSplitter, %struct.ContextBlockSplitter* %0, i64 0, i32 13, i64 %495
  %497 = bitcast double* %496 to <2 x i64>*
  %498 = load <2 x i64>, <2 x i64>* %497, align 8
  %499 = getelementptr inbounds double, double* %496, i64 2
  %500 = bitcast double* %499 to <2 x i64>*
  %501 = load <2 x i64>, <2 x i64>* %500, align 8
  %502 = add i64 %495, %11
  %503 = getelementptr inbounds %struct.ContextBlockSplitter, %struct.ContextBlockSplitter* %0, i64 0, i32 13, i64 %502
  %504 = bitcast double* %503 to <2 x i64>*
  store <2 x i64> %498, <2 x i64>* %504, align 8
  %505 = getelementptr inbounds double, double* %503, i64 2
  %506 = bitcast double* %505 to <2 x i64>*
  store <2 x i64> %501, <2 x i64>* %506, align 8
  %507 = getelementptr inbounds [13 x double], [13 x double]* %5, i64 0, i64 %495
  %508 = bitcast double* %507 to <2 x i64>*
  %509 = load <2 x i64>, <2 x i64>* %508, align 16
  %510 = getelementptr inbounds double, double* %507, i64 2
  %511 = bitcast double* %510 to <2 x i64>*
  %512 = load <2 x i64>, <2 x i64>* %511, align 16
  %513 = bitcast double* %496 to <2 x i64>*
  store <2 x i64> %509, <2 x i64>* %513, align 8
  %514 = bitcast double* %499 to <2 x i64>*
  store <2 x i64> %512, <2 x i64>* %514, align 8
  %515 = add i64 %474, 8
  %516 = add i64 %475, -2
  %517 = icmp eq i64 %516, 0
  br i1 %517, label %518, label %473, !llvm.loop !26

518:                                              ; preds = %473, %464
  %519 = phi i64 [ 0, %464 ], [ %515, %473 ]
  %520 = icmp eq i64 %469, 0
  br i1 %520, label %541, label %521

521:                                              ; preds = %518
  %522 = getelementptr inbounds %struct.ContextBlockSplitter, %struct.ContextBlockSplitter* %0, i64 0, i32 13, i64 %519
  %523 = bitcast double* %522 to <2 x i64>*
  %524 = load <2 x i64>, <2 x i64>* %523, align 8
  %525 = getelementptr inbounds double, double* %522, i64 2
  %526 = bitcast double* %525 to <2 x i64>*
  %527 = load <2 x i64>, <2 x i64>* %526, align 8
  %528 = add i64 %519, %11
  %529 = getelementptr inbounds %struct.ContextBlockSplitter, %struct.ContextBlockSplitter* %0, i64 0, i32 13, i64 %528
  %530 = bitcast double* %529 to <2 x i64>*
  store <2 x i64> %524, <2 x i64>* %530, align 8
  %531 = getelementptr inbounds double, double* %529, i64 2
  %532 = bitcast double* %531 to <2 x i64>*
  store <2 x i64> %527, <2 x i64>* %532, align 8
  %533 = getelementptr inbounds [13 x double], [13 x double]* %5, i64 0, i64 %519
  %534 = bitcast double* %533 to <2 x i64>*
  %535 = load <2 x i64>, <2 x i64>* %534, align 16
  %536 = getelementptr inbounds double, double* %533, i64 2
  %537 = bitcast double* %536 to <2 x i64>*
  %538 = load <2 x i64>, <2 x i64>* %537, align 16
  %539 = bitcast double* %522 to <2 x i64>*
  store <2 x i64> %535, <2 x i64>* %539, align 8
  %540 = bitcast double* %525 to <2 x i64>*
  store <2 x i64> %538, <2 x i64>* %540, align 8
  br label %541

541:                                              ; preds = %518, %521
  %542 = icmp eq i64 %11, %465
  br i1 %542, label %610, label %543

543:                                              ; preds = %541, %443, %441
  %544 = phi i64 [ 0, %443 ], [ 0, %441 ], [ %465, %541 ]
  %545 = xor i64 %544, -1
  %546 = add i64 %11, %545
  %547 = and i64 %11, 3
  %548 = icmp eq i64 %547, 0
  br i1 %548, label %564, label %549

549:                                              ; preds = %543, %549
  %550 = phi i64 [ %561, %549 ], [ %544, %543 ]
  %551 = phi i64 [ %562, %549 ], [ %547, %543 ]
  %552 = getelementptr inbounds %struct.ContextBlockSplitter, %struct.ContextBlockSplitter* %0, i64 0, i32 13, i64 %550
  %553 = bitcast double* %552 to i64*
  %554 = load i64, i64* %553, align 8
  %555 = add i64 %550, %11
  %556 = getelementptr inbounds %struct.ContextBlockSplitter, %struct.ContextBlockSplitter* %0, i64 0, i32 13, i64 %555
  %557 = bitcast double* %556 to i64*
  store i64 %554, i64* %557, align 8
  %558 = getelementptr inbounds [13 x double], [13 x double]* %5, i64 0, i64 %550
  %559 = bitcast double* %558 to i64*
  %560 = load i64, i64* %559, align 8
  store i64 %560, i64* %553, align 8
  %561 = add nuw i64 %550, 1
  %562 = add i64 %551, -1
  %563 = icmp eq i64 %562, 0
  br i1 %563, label %564, label %549, !llvm.loop !27

564:                                              ; preds = %549, %543
  %565 = phi i64 [ %544, %543 ], [ %561, %549 ]
  %566 = icmp ult i64 %546, 3
  br i1 %566, label %610, label %567

567:                                              ; preds = %564, %567
  %568 = phi i64 [ %608, %567 ], [ %565, %564 ]
  %569 = getelementptr inbounds %struct.ContextBlockSplitter, %struct.ContextBlockSplitter* %0, i64 0, i32 13, i64 %568
  %570 = bitcast double* %569 to i64*
  %571 = load i64, i64* %570, align 8
  %572 = add i64 %568, %11
  %573 = getelementptr inbounds %struct.ContextBlockSplitter, %struct.ContextBlockSplitter* %0, i64 0, i32 13, i64 %572
  %574 = bitcast double* %573 to i64*
  store i64 %571, i64* %574, align 8
  %575 = getelementptr inbounds [13 x double], [13 x double]* %5, i64 0, i64 %568
  %576 = bitcast double* %575 to i64*
  %577 = load i64, i64* %576, align 8
  store i64 %577, i64* %570, align 8
  %578 = add nuw i64 %568, 1
  %579 = getelementptr inbounds %struct.ContextBlockSplitter, %struct.ContextBlockSplitter* %0, i64 0, i32 13, i64 %578
  %580 = bitcast double* %579 to i64*
  %581 = load i64, i64* %580, align 8
  %582 = add i64 %578, %11
  %583 = getelementptr inbounds %struct.ContextBlockSplitter, %struct.ContextBlockSplitter* %0, i64 0, i32 13, i64 %582
  %584 = bitcast double* %583 to i64*
  store i64 %581, i64* %584, align 8
  %585 = getelementptr inbounds [13 x double], [13 x double]* %5, i64 0, i64 %578
  %586 = bitcast double* %585 to i64*
  %587 = load i64, i64* %586, align 8
  store i64 %587, i64* %580, align 8
  %588 = add nuw i64 %568, 2
  %589 = getelementptr inbounds %struct.ContextBlockSplitter, %struct.ContextBlockSplitter* %0, i64 0, i32 13, i64 %588
  %590 = bitcast double* %589 to i64*
  %591 = load i64, i64* %590, align 8
  %592 = add i64 %588, %11
  %593 = getelementptr inbounds %struct.ContextBlockSplitter, %struct.ContextBlockSplitter* %0, i64 0, i32 13, i64 %592
  %594 = bitcast double* %593 to i64*
  store i64 %591, i64* %594, align 8
  %595 = getelementptr inbounds [13 x double], [13 x double]* %5, i64 0, i64 %588
  %596 = bitcast double* %595 to i64*
  %597 = load i64, i64* %596, align 8
  store i64 %597, i64* %590, align 8
  %598 = add nuw i64 %568, 3
  %599 = getelementptr inbounds %struct.ContextBlockSplitter, %struct.ContextBlockSplitter* %0, i64 0, i32 13, i64 %598
  %600 = bitcast double* %599 to i64*
  %601 = load i64, i64* %600, align 8
  %602 = add i64 %598, %11
  %603 = getelementptr inbounds %struct.ContextBlockSplitter, %struct.ContextBlockSplitter* %0, i64 0, i32 13, i64 %602
  %604 = bitcast double* %603 to i64*
  store i64 %601, i64* %604, align 8
  %605 = getelementptr inbounds [13 x double], [13 x double]* %5, i64 0, i64 %598
  %606 = bitcast double* %605 to i64*
  %607 = load i64, i64* %606, align 8
  store i64 %607, i64* %600, align 8
  %608 = add nuw i64 %568, 4
  %609 = icmp eq i64 %608, %11
  br i1 %609, label %610, label %567, !llvm.loop !28

610:                                              ; preds = %564, %567, %541, %423
  %611 = load i64, i64* %22, align 8
  %612 = add i64 %611, 1
  store i64 %612, i64* %22, align 8
  %613 = load i64, i64* %408, align 8
  %614 = add i64 %613, 1
  store i64 %614, i64* %408, align 8
  %615 = getelementptr inbounds %struct.ContextBlockSplitter, %struct.ContextBlockSplitter* %0, i64 0, i32 11
  %616 = load i64, i64* %615, align 8
  %617 = add i64 %616, %11
  store i64 %617, i64* %615, align 8
  %618 = getelementptr inbounds %struct.ContextBlockSplitter, %struct.ContextBlockSplitter* %0, i64 0, i32 8
  %619 = load i64*, i64** %618, align 8
  %620 = load i64, i64* %619, align 8
  %621 = icmp ult i64 %617, %620
  br i1 %621, label %622, label %666

622:                                              ; preds = %610
  %623 = load %struct.HistogramLiteral*, %struct.HistogramLiteral** %12, align 8
  %624 = getelementptr inbounds %struct.HistogramLiteral, %struct.HistogramLiteral* %623, i64 %617
  %625 = load i64, i64* %10, align 8
  %626 = icmp eq i64 %625, 0
  br i1 %626, label %666, label %627

627:                                              ; preds = %622
  %628 = add i64 %625, -1
  %629 = and i64 %625, 3
  %630 = icmp ult i64 %628, 3
  br i1 %630, label %654, label %631

631:                                              ; preds = %627
  %632 = sub i64 %625, %629
  br label %633

633:                                              ; preds = %633, %631
  %634 = phi i64 [ 0, %631 ], [ %651, %633 ]
  %635 = phi i64 [ %632, %631 ], [ %652, %633 ]
  %636 = getelementptr inbounds %struct.HistogramLiteral, %struct.HistogramLiteral* %624, i64 %634
  %637 = getelementptr inbounds %struct.HistogramLiteral, %struct.HistogramLiteral* %624, i64 %634, i32 2
  %638 = bitcast %struct.HistogramLiteral* %636 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %638, i8 0, i64 1032, i1 false) #6
  store double 0x7FF0000000000000, double* %637, align 8
  %639 = or i64 %634, 1
  %640 = getelementptr inbounds %struct.HistogramLiteral, %struct.HistogramLiteral* %624, i64 %639
  %641 = getelementptr inbounds %struct.HistogramLiteral, %struct.HistogramLiteral* %624, i64 %639, i32 2
  %642 = bitcast %struct.HistogramLiteral* %640 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %642, i8 0, i64 1032, i1 false) #6
  store double 0x7FF0000000000000, double* %641, align 8
  %643 = or i64 %634, 2
  %644 = getelementptr inbounds %struct.HistogramLiteral, %struct.HistogramLiteral* %624, i64 %643
  %645 = getelementptr inbounds %struct.HistogramLiteral, %struct.HistogramLiteral* %624, i64 %643, i32 2
  %646 = bitcast %struct.HistogramLiteral* %644 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %646, i8 0, i64 1032, i1 false) #6
  store double 0x7FF0000000000000, double* %645, align 8
  %647 = or i64 %634, 3
  %648 = getelementptr inbounds %struct.HistogramLiteral, %struct.HistogramLiteral* %624, i64 %647
  %649 = getelementptr inbounds %struct.HistogramLiteral, %struct.HistogramLiteral* %624, i64 %647, i32 2
  %650 = bitcast %struct.HistogramLiteral* %648 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %650, i8 0, i64 1032, i1 false) #6
  store double 0x7FF0000000000000, double* %649, align 8
  %651 = add nuw i64 %634, 4
  %652 = add i64 %635, -4
  %653 = icmp eq i64 %652, 0
  br i1 %653, label %654, label %633

654:                                              ; preds = %633, %627
  %655 = phi i64 [ 0, %627 ], [ %651, %633 ]
  %656 = icmp eq i64 %629, 0
  br i1 %656, label %666, label %657

657:                                              ; preds = %654, %657
  %658 = phi i64 [ %663, %657 ], [ %655, %654 ]
  %659 = phi i64 [ %664, %657 ], [ %629, %654 ]
  %660 = getelementptr inbounds %struct.HistogramLiteral, %struct.HistogramLiteral* %624, i64 %658
  %661 = getelementptr inbounds %struct.HistogramLiteral, %struct.HistogramLiteral* %624, i64 %658, i32 2
  %662 = bitcast %struct.HistogramLiteral* %660 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %662, i8 0, i64 1032, i1 false) #6
  store double 0x7FF0000000000000, double* %661, align 8
  %663 = add nuw i64 %658, 1
  %664 = add i64 %659, -1
  %665 = icmp eq i64 %664, 0
  br i1 %665, label %666, label %657, !llvm.loop !29

666:                                              ; preds = %654, %657, %622, %610
  store i64 0, i64* %14, align 8
  %667 = getelementptr inbounds %struct.ContextBlockSplitter, %struct.ContextBlockSplitter* %0, i64 0, i32 14
  store i64 0, i64* %667, align 8
  %668 = load i64, i64* %16, align 8
  %669 = getelementptr inbounds %struct.ContextBlockSplitter, %struct.ContextBlockSplitter* %0, i64 0, i32 9
  store i64 %668, i64* %669, align 8
  br label %772

670:                                              ; preds = %407, %419, %415
  %671 = getelementptr inbounds [2 x double], [2 x double]* %7, i64 0, i64 1
  %672 = load double, double* %671, align 8
  %673 = fadd double %414, -2.000000e+01
  %674 = fcmp olt double %672, %673
  %675 = load i64, i64* %14, align 8
  %676 = trunc i64 %675 to i32
  %677 = getelementptr inbounds %struct.BlockSplit, %struct.BlockSplit* %9, i64 0, i32 3
  %678 = load i32*, i32** %677, align 8
  %679 = load i64, i64* %22, align 8
  br i1 %674, label %680, label %727

680:                                              ; preds = %670
  %681 = getelementptr inbounds i32, i32* %678, i64 %679
  store i32 %676, i32* %681, align 4
  %682 = getelementptr inbounds %struct.BlockSplit, %struct.BlockSplit* %9, i64 0, i32 2
  %683 = load i8*, i8** %682, align 8
  %684 = load i64, i64* %22, align 8
  %685 = add i64 %684, -2
  %686 = getelementptr inbounds i8, i8* %683, i64 %685
  %687 = load i8, i8* %686, align 1
  %688 = getelementptr inbounds i8, i8* %683, i64 %684
  store i8 %687, i8* %688, align 1
  %689 = getelementptr inbounds %struct.ContextBlockSplitter, %struct.ContextBlockSplitter* %0, i64 0, i32 12, i64 0
  %690 = load i64, i64* %689, align 8
  %691 = getelementptr inbounds %struct.ContextBlockSplitter, %struct.ContextBlockSplitter* %0, i64 0, i32 12, i64 1
  %692 = load i64, i64* %691, align 8
  store i64 %692, i64* %689, align 8
  store i64 %690, i64* %691, align 8
  br i1 %177, label %721, label %693

693:                                              ; preds = %680
  %694 = getelementptr inbounds %struct.ContextBlockSplitter, %struct.ContextBlockSplitter* %0, i64 0, i32 11
  br label %695

695:                                              ; preds = %719, %693
  %696 = phi i64 [ %692, %693 ], [ %720, %719 ]
  %697 = phi i64 [ 0, %693 ], [ %717, %719 ]
  %698 = add i64 %696, %697
  %699 = getelementptr inbounds %struct.HistogramLiteral, %struct.HistogramLiteral* %13, i64 %698
  %700 = add i64 %697, %11
  %701 = getelementptr inbounds %struct.HistogramLiteral, %struct.HistogramLiteral* %174, i64 %700
  %702 = bitcast %struct.HistogramLiteral* %699 to i8*
  %703 = bitcast %struct.HistogramLiteral* %701 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %702, i8* align 8 %703, i64 1040, i1 false)
  %704 = getelementptr inbounds %struct.ContextBlockSplitter, %struct.ContextBlockSplitter* %0, i64 0, i32 13, i64 %697
  %705 = bitcast double* %704 to i64*
  %706 = load i64, i64* %705, align 8
  %707 = getelementptr inbounds %struct.ContextBlockSplitter, %struct.ContextBlockSplitter* %0, i64 0, i32 13, i64 %700
  %708 = bitcast double* %707 to i64*
  store i64 %706, i64* %708, align 8
  %709 = getelementptr inbounds [26 x double], [26 x double]* %6, i64 0, i64 %700
  %710 = bitcast double* %709 to i64*
  %711 = load i64, i64* %710, align 8
  store i64 %711, i64* %705, align 8
  %712 = load i64, i64* %694, align 8
  %713 = add i64 %712, %697
  %714 = getelementptr inbounds %struct.HistogramLiteral, %struct.HistogramLiteral* %13, i64 %713
  %715 = getelementptr inbounds %struct.HistogramLiteral, %struct.HistogramLiteral* %13, i64 %713, i32 2
  %716 = bitcast %struct.HistogramLiteral* %714 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %716, i8 0, i64 1032, i1 false) #6
  store double 0x7FF0000000000000, double* %715, align 8
  %717 = add nuw i64 %697, 1
  %718 = icmp eq i64 %717, %11
  br i1 %718, label %721, label %719

719:                                              ; preds = %695
  %720 = load i64, i64* %689, align 8
  br label %695

721:                                              ; preds = %695, %680
  %722 = load i64, i64* %22, align 8
  %723 = add i64 %722, 1
  store i64 %723, i64* %22, align 8
  store i64 0, i64* %14, align 8
  %724 = getelementptr inbounds %struct.ContextBlockSplitter, %struct.ContextBlockSplitter* %0, i64 0, i32 14
  store i64 0, i64* %724, align 8
  %725 = load i64, i64* %16, align 8
  %726 = getelementptr inbounds %struct.ContextBlockSplitter, %struct.ContextBlockSplitter* %0, i64 0, i32 9
  store i64 %725, i64* %726, align 8
  br label %772

727:                                              ; preds = %670
  %728 = add i64 %679, -1
  %729 = getelementptr inbounds i32, i32* %678, i64 %728
  %730 = load i32, i32* %729, align 4
  %731 = add i32 %730, %676
  store i32 %731, i32* %729, align 4
  br i1 %177, label %762, label %732

732:                                              ; preds = %727
  %733 = getelementptr inbounds %struct.ContextBlockSplitter, %struct.ContextBlockSplitter* %0, i64 0, i32 12, i64 0
  %734 = getelementptr inbounds %struct.ContextBlockSplitter, %struct.ContextBlockSplitter* %0, i64 0, i32 11
  br label %735

735:                                              ; preds = %754, %732
  %736 = phi i64 [ 0, %732 ], [ %760, %754 ]
  %737 = load i64, i64* %733, align 8
  %738 = add i64 %737, %736
  %739 = getelementptr inbounds %struct.HistogramLiteral, %struct.HistogramLiteral* %13, i64 %738
  %740 = getelementptr inbounds %struct.HistogramLiteral, %struct.HistogramLiteral* %174, i64 %736
  %741 = bitcast %struct.HistogramLiteral* %739 to i8*
  %742 = bitcast %struct.HistogramLiteral* %740 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %741, i8* align 8 %742, i64 1040, i1 false)
  %743 = getelementptr inbounds [26 x double], [26 x double]* %6, i64 0, i64 %736
  %744 = bitcast double* %743 to i64*
  %745 = load i64, i64* %744, align 8
  %746 = getelementptr inbounds %struct.ContextBlockSplitter, %struct.ContextBlockSplitter* %0, i64 0, i32 13, i64 %736
  %747 = bitcast double* %746 to i64*
  store i64 %745, i64* %747, align 8
  %748 = load i64, i64* %408, align 8
  %749 = icmp eq i64 %748, 1
  br i1 %749, label %750, label %754

750:                                              ; preds = %735
  %751 = add i64 %736, %11
  %752 = getelementptr inbounds %struct.ContextBlockSplitter, %struct.ContextBlockSplitter* %0, i64 0, i32 13, i64 %751
  %753 = bitcast double* %752 to i64*
  store i64 %745, i64* %753, align 8
  br label %754

754:                                              ; preds = %750, %735
  %755 = load i64, i64* %734, align 8
  %756 = add i64 %755, %736
  %757 = getelementptr inbounds %struct.HistogramLiteral, %struct.HistogramLiteral* %13, i64 %756
  %758 = getelementptr inbounds %struct.HistogramLiteral, %struct.HistogramLiteral* %13, i64 %756, i32 2
  %759 = bitcast %struct.HistogramLiteral* %757 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %759, i8 0, i64 1032, i1 false) #6
  store double 0x7FF0000000000000, double* %758, align 8
  %760 = add nuw i64 %736, 1
  %761 = icmp eq i64 %760, %11
  br i1 %761, label %762, label %735

762:                                              ; preds = %754, %727
  store i64 0, i64* %14, align 8
  %763 = getelementptr inbounds %struct.ContextBlockSplitter, %struct.ContextBlockSplitter* %0, i64 0, i32 14
  %764 = load i64, i64* %763, align 8
  %765 = add i64 %764, 1
  store i64 %765, i64* %763, align 8
  %766 = icmp ugt i64 %765, 1
  br i1 %766, label %767, label %772

767:                                              ; preds = %762
  %768 = load i64, i64* %16, align 8
  %769 = getelementptr inbounds %struct.ContextBlockSplitter, %struct.ContextBlockSplitter* %0, i64 0, i32 9
  %770 = load i64, i64* %769, align 8
  %771 = add i64 %770, %768
  store i64 %771, i64* %769, align 8
  br label %772

772:                                              ; preds = %721, %767, %762, %666
  tail call void @BrotliFree(%struct.MemoryManager* %1, i8* %173) #6
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %176) #6
  call void @llvm.lifetime.end.p0i8(i64 208, i8* nonnull %175) #6
  call void @llvm.lifetime.end.p0i8(i64 104, i8* nonnull %165) #6
  br label %773

773:                                              ; preds = %162, %772, %161
  %774 = icmp eq i32 %2, 0
  br i1 %774, label %783, label %775

775:                                              ; preds = %773
  %776 = getelementptr inbounds %struct.BlockSplit, %struct.BlockSplit* %9, i64 0, i32 0
  %777 = load i64, i64* %776, align 8
  %778 = mul i64 %777, %11
  %779 = getelementptr inbounds %struct.ContextBlockSplitter, %struct.ContextBlockSplitter* %0, i64 0, i32 8
  %780 = load i64*, i64** %779, align 8
  store i64 %778, i64* %780, align 8
  %781 = load i64, i64* %22, align 8
  %782 = getelementptr inbounds %struct.BlockSplit, %struct.BlockSplit* %9, i64 0, i32 1
  store i64 %781, i64* %782, align 8
  br label %783

783:                                              ; preds = %773, %775
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal fastcc void @BlockSplitterFinishBlockCommand(%struct.BlockSplitterCommand*, i32) unnamed_addr #2 {
  %3 = alloca [2 x %struct.HistogramCommand], align 16
  %4 = alloca [2 x double], align 16
  %5 = alloca [2 x double], align 16
  %6 = getelementptr inbounds %struct.BlockSplitterCommand, %struct.BlockSplitterCommand* %0, i64 0, i32 4
  %7 = load %struct.BlockSplit*, %struct.BlockSplit** %6, align 8
  %8 = getelementptr inbounds %struct.BlockSplitterCommand, %struct.BlockSplitterCommand* %0, i64 0, i32 11, i64 0
  %9 = getelementptr inbounds %struct.BlockSplitterCommand, %struct.BlockSplitterCommand* %0, i64 0, i32 5
  %10 = load %struct.HistogramCommand*, %struct.HistogramCommand** %9, align 8
  %11 = getelementptr inbounds %struct.BlockSplitterCommand, %struct.BlockSplitterCommand* %0, i64 0, i32 8
  %12 = load i64, i64* %11, align 8
  %13 = getelementptr inbounds %struct.BlockSplitterCommand, %struct.BlockSplitterCommand* %0, i64 0, i32 1
  %14 = load i64, i64* %13, align 8
  %15 = icmp ugt i64 %12, %14
  %16 = select i1 %15, i64 %12, i64 %14
  store i64 %16, i64* %11, align 8
  %17 = getelementptr inbounds %struct.BlockSplitterCommand, %struct.BlockSplitterCommand* %0, i64 0, i32 3
  %18 = load i64, i64* %17, align 8
  %19 = icmp eq i64 %18, 0
  br i1 %19, label %20, label %108

20:                                               ; preds = %2
  %21 = trunc i64 %16 to i32
  %22 = getelementptr inbounds %struct.BlockSplit, %struct.BlockSplit* %7, i64 0, i32 3
  %23 = load i32*, i32** %22, align 8
  store i32 %21, i32* %23, align 4
  %24 = getelementptr inbounds %struct.BlockSplit, %struct.BlockSplit* %7, i64 0, i32 2
  %25 = load i8*, i8** %24, align 8
  store i8 0, i8* %25, align 1
  %26 = getelementptr inbounds %struct.HistogramCommand, %struct.HistogramCommand* %10, i64 0, i32 0, i64 0
  %27 = getelementptr inbounds %struct.BlockSplitterCommand, %struct.BlockSplitterCommand* %0, i64 0, i32 0
  %28 = load i64, i64* %27, align 8
  %29 = getelementptr inbounds %struct.HistogramCommand, %struct.HistogramCommand* %10, i64 0, i32 0, i64 %28
  %30 = and i64 %28, 1
  %31 = icmp eq i64 %30, 0
  br i1 %31, label %32, label %53

32:                                               ; preds = %68, %20
  %33 = phi i32* [ %57, %68 ], [ %26, %20 ]
  %34 = phi i64 [ %60, %68 ], [ 0, %20 ]
  %35 = phi double [ %71, %68 ], [ 0.000000e+00, %20 ]
  %36 = icmp ult i32* %33, %29
  br i1 %36, label %37, label %72

37:                                               ; preds = %32
  %38 = getelementptr inbounds i32, i32* %33, i64 1
  %39 = load i32, i32* %33, align 4
  %40 = zext i32 %39 to i64
  %41 = add i64 %34, %40
  %42 = uitofp i32 %39 to double
  %43 = icmp ult i32 %39, 256
  br i1 %43, label %44, label %47

44:                                               ; preds = %37
  %45 = getelementptr inbounds [256 x double], [256 x double]* @kBrotliLog2Table, i64 0, i64 %40
  %46 = load double, double* %45, align 8
  br label %49

47:                                               ; preds = %37
  %48 = tail call double @log2(double %42) #6
  br label %49

49:                                               ; preds = %47, %44
  %50 = phi double [ %46, %44 ], [ %48, %47 ]
  %51 = fmul double %50, %42
  %52 = fsub double %35, %51
  br label %53

53:                                               ; preds = %49, %20
  %54 = phi i32* [ %26, %20 ], [ %38, %49 ]
  %55 = phi i64 [ 0, %20 ], [ %41, %49 ]
  %56 = phi double [ 0.000000e+00, %20 ], [ %52, %49 ]
  %57 = getelementptr inbounds i32, i32* %54, i64 1
  %58 = load i32, i32* %54, align 4
  %59 = zext i32 %58 to i64
  %60 = add i64 %55, %59
  %61 = uitofp i32 %58 to double
  %62 = icmp ult i32 %58, 256
  br i1 %62, label %63, label %66

63:                                               ; preds = %53
  %64 = getelementptr inbounds [256 x double], [256 x double]* @kBrotliLog2Table, i64 0, i64 %59
  %65 = load double, double* %64, align 8
  br label %68

66:                                               ; preds = %53
  %67 = tail call double @log2(double %61) #6
  br label %68

68:                                               ; preds = %66, %63
  %69 = phi double [ %65, %63 ], [ %67, %66 ]
  %70 = fmul double %69, %61
  %71 = fsub double %56, %70
  br label %32

72:                                               ; preds = %32
  %73 = icmp eq i64 %34, 0
  %74 = uitofp i64 %34 to double
  br i1 %73, label %86, label %75

75:                                               ; preds = %72
  %76 = icmp ult i64 %34, 256
  br i1 %76, label %77, label %80

77:                                               ; preds = %75
  %78 = getelementptr inbounds [256 x double], [256 x double]* @kBrotliLog2Table, i64 0, i64 %34
  %79 = load double, double* %78, align 8
  br label %82

80:                                               ; preds = %75
  %81 = tail call double @log2(double %74) #6
  br label %82

82:                                               ; preds = %80, %77
  %83 = phi double [ %79, %77 ], [ %81, %80 ]
  %84 = fmul double %83, %74
  %85 = fadd double %35, %84
  br label %86

86:                                               ; preds = %72, %82
  %87 = phi double [ %85, %82 ], [ %35, %72 ]
  %88 = fcmp olt double %87, %74
  %89 = select i1 %88, double %74, double %87
  store double %89, double* %8, align 8
  %90 = getelementptr inbounds %struct.BlockSplitterCommand, %struct.BlockSplitterCommand* %0, i64 0, i32 11, i64 1
  store double %89, double* %90, align 8
  %91 = load i64, i64* %17, align 8
  %92 = add i64 %91, 1
  store i64 %92, i64* %17, align 8
  %93 = getelementptr inbounds %struct.BlockSplit, %struct.BlockSplit* %7, i64 0, i32 0
  %94 = load i64, i64* %93, align 8
  %95 = add i64 %94, 1
  store i64 %95, i64* %93, align 8
  %96 = getelementptr inbounds %struct.BlockSplitterCommand, %struct.BlockSplitterCommand* %0, i64 0, i32 9
  %97 = load i64, i64* %96, align 8
  %98 = add i64 %97, 1
  store i64 %98, i64* %96, align 8
  %99 = getelementptr inbounds %struct.BlockSplitterCommand, %struct.BlockSplitterCommand* %0, i64 0, i32 6
  %100 = load i64*, i64** %99, align 8
  %101 = load i64, i64* %100, align 8
  %102 = icmp ult i64 %98, %101
  br i1 %102, label %103, label %107

103:                                              ; preds = %86
  %104 = getelementptr inbounds %struct.HistogramCommand, %struct.HistogramCommand* %10, i64 %98
  %105 = getelementptr inbounds %struct.HistogramCommand, %struct.HistogramCommand* %10, i64 %98, i32 2
  %106 = bitcast %struct.HistogramCommand* %104 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %106, i8 0, i64 2824, i1 false) #6
  store double 0x7FF0000000000000, double* %105, align 8
  br label %107

107:                                              ; preds = %103, %86
  store i64 0, i64* %11, align 8
  br label %463

108:                                              ; preds = %2
  %109 = icmp eq i64 %16, 0
  br i1 %109, label %463, label %110

110:                                              ; preds = %108
  %111 = getelementptr inbounds %struct.BlockSplitterCommand, %struct.BlockSplitterCommand* %0, i64 0, i32 9
  %112 = load i64, i64* %111, align 8
  %113 = getelementptr inbounds %struct.HistogramCommand, %struct.HistogramCommand* %10, i64 %112, i32 0, i64 0
  %114 = getelementptr inbounds %struct.BlockSplitterCommand, %struct.BlockSplitterCommand* %0, i64 0, i32 0
  %115 = load i64, i64* %114, align 8
  %116 = getelementptr inbounds %struct.HistogramCommand, %struct.HistogramCommand* %10, i64 %112, i32 0, i64 %115
  %117 = and i64 %115, 1
  %118 = icmp eq i64 %117, 0
  br i1 %118, label %119, label %140

119:                                              ; preds = %155, %110
  %120 = phi i32* [ %144, %155 ], [ %113, %110 ]
  %121 = phi i64 [ %147, %155 ], [ 0, %110 ]
  %122 = phi double [ %158, %155 ], [ 0.000000e+00, %110 ]
  %123 = icmp ult i32* %120, %116
  br i1 %123, label %124, label %159

124:                                              ; preds = %119
  %125 = getelementptr inbounds i32, i32* %120, i64 1
  %126 = load i32, i32* %120, align 4
  %127 = zext i32 %126 to i64
  %128 = add i64 %121, %127
  %129 = uitofp i32 %126 to double
  %130 = icmp ult i32 %126, 256
  br i1 %130, label %131, label %134

131:                                              ; preds = %124
  %132 = getelementptr inbounds [256 x double], [256 x double]* @kBrotliLog2Table, i64 0, i64 %127
  %133 = load double, double* %132, align 8
  br label %136

134:                                              ; preds = %124
  %135 = tail call double @log2(double %129) #6
  br label %136

136:                                              ; preds = %134, %131
  %137 = phi double [ %133, %131 ], [ %135, %134 ]
  %138 = fmul double %137, %129
  %139 = fsub double %122, %138
  br label %140

140:                                              ; preds = %136, %110
  %141 = phi i32* [ %113, %110 ], [ %125, %136 ]
  %142 = phi i64 [ 0, %110 ], [ %128, %136 ]
  %143 = phi double [ 0.000000e+00, %110 ], [ %139, %136 ]
  %144 = getelementptr inbounds i32, i32* %141, i64 1
  %145 = load i32, i32* %141, align 4
  %146 = zext i32 %145 to i64
  %147 = add i64 %142, %146
  %148 = uitofp i32 %145 to double
  %149 = icmp ult i32 %145, 256
  br i1 %149, label %150, label %153

150:                                              ; preds = %140
  %151 = getelementptr inbounds [256 x double], [256 x double]* @kBrotliLog2Table, i64 0, i64 %146
  %152 = load double, double* %151, align 8
  br label %155

153:                                              ; preds = %140
  %154 = tail call double @log2(double %148) #6
  br label %155

155:                                              ; preds = %153, %150
  %156 = phi double [ %152, %150 ], [ %154, %153 ]
  %157 = fmul double %156, %148
  %158 = fsub double %143, %157
  br label %119

159:                                              ; preds = %119
  %160 = icmp eq i64 %121, 0
  %161 = uitofp i64 %121 to double
  br i1 %160, label %173, label %162

162:                                              ; preds = %159
  %163 = icmp ult i64 %121, 256
  br i1 %163, label %164, label %167

164:                                              ; preds = %162
  %165 = getelementptr inbounds [256 x double], [256 x double]* @kBrotliLog2Table, i64 0, i64 %121
  %166 = load double, double* %165, align 8
  br label %169

167:                                              ; preds = %162
  %168 = tail call double @log2(double %161) #6
  br label %169

169:                                              ; preds = %167, %164
  %170 = phi double [ %166, %164 ], [ %168, %167 ]
  %171 = fmul double %170, %161
  %172 = fadd double %122, %171
  br label %173

173:                                              ; preds = %159, %169
  %174 = phi double [ %172, %169 ], [ %122, %159 ]
  %175 = fcmp olt double %174, %161
  %176 = select i1 %175, double %161, double %174
  %177 = bitcast [2 x %struct.HistogramCommand]* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 5664, i8* nonnull %177) #6
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 16 %177, i8* align 16 bitcast ([2 x %struct.HistogramCommand]* @__const.BlockSplitterFinishBlockCommand.combined_histo to i8*), i64 5664, i1 false)
  %178 = bitcast [2 x double]* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %178) #6
  %179 = getelementptr inbounds [2 x double], [2 x double]* %4, i64 0, i64 1
  %180 = bitcast [2 x double]* %5 to i8*
  %181 = bitcast [2 x double]* %4 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %181, i8 -1, i64 16, i1 false)
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %180) #6
  %182 = getelementptr inbounds [2 x double], [2 x double]* %5, i64 0, i64 0
  %183 = getelementptr inbounds [2 x double], [2 x double]* %5, i64 0, i64 1
  %184 = bitcast [2 x double]* %5 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %184, i8 -1, i64 16, i1 false)
  %185 = getelementptr %struct.HistogramCommand, %struct.HistogramCommand* %10, i64 0, i32 1
  br label %186

186:                                              ; preds = %322, %173
  %187 = phi i64 [ 0, %173 ], [ %332, %322 ]
  %188 = getelementptr inbounds %struct.BlockSplitterCommand, %struct.BlockSplitterCommand* %0, i64 0, i32 10, i64 %187
  %189 = load i64, i64* %188, align 8
  %190 = getelementptr inbounds [2 x %struct.HistogramCommand], [2 x %struct.HistogramCommand]* %3, i64 0, i64 %187
  %191 = load i64, i64* %111, align 8
  %192 = getelementptr inbounds %struct.HistogramCommand, %struct.HistogramCommand* %10, i64 %191
  %193 = bitcast %struct.HistogramCommand* %190 to i8*
  %194 = bitcast %struct.HistogramCommand* %192 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 16 %193, i8* align 8 %194, i64 2832, i1 false)
  %195 = getelementptr inbounds %struct.HistogramCommand, %struct.HistogramCommand* %10, i64 %189, i32 1
  %196 = load i64, i64* %195, align 8
  %197 = getelementptr inbounds [2 x %struct.HistogramCommand], [2 x %struct.HistogramCommand]* %3, i64 0, i64 %187, i32 1
  %198 = load i64, i64* %197, align 16
  %199 = add i64 %198, %196
  store i64 %199, i64* %197, align 16
  %200 = getelementptr [2 x %struct.HistogramCommand], [2 x %struct.HistogramCommand]* %3, i64 0, i64 %187, i32 1
  %201 = getelementptr [2 x %struct.HistogramCommand], [2 x %struct.HistogramCommand]* %3, i64 0, i64 %187
  %202 = getelementptr %struct.HistogramCommand, %struct.HistogramCommand* %10, i64 %189
  %203 = mul i64 %189, 354
  %204 = getelementptr i64, i64* %185, i64 %203
  %205 = bitcast i64* %204 to %struct.HistogramCommand*
  %206 = icmp ult %struct.HistogramCommand* %201, %205
  %207 = bitcast i64* %200 to %struct.HistogramCommand*
  %208 = icmp ult %struct.HistogramCommand* %202, %207
  %209 = and i1 %206, %208
  br i1 %209, label %247, label %210

210:                                              ; preds = %186, %210
  %211 = phi i64 [ %245, %210 ], [ 0, %186 ]
  %212 = getelementptr inbounds %struct.HistogramCommand, %struct.HistogramCommand* %10, i64 %189, i32 0, i64 %211
  %213 = bitcast i32* %212 to <4 x i32>*
  %214 = load <4 x i32>, <4 x i32>* %213, align 4, !alias.scope !30
  %215 = getelementptr inbounds i32, i32* %212, i64 4
  %216 = bitcast i32* %215 to <4 x i32>*
  %217 = load <4 x i32>, <4 x i32>* %216, align 4, !alias.scope !30
  %218 = getelementptr inbounds [2 x %struct.HistogramCommand], [2 x %struct.HistogramCommand]* %3, i64 0, i64 %187, i32 0, i64 %211
  %219 = bitcast i32* %218 to <4 x i32>*
  %220 = load <4 x i32>, <4 x i32>* %219, align 16, !alias.scope !33, !noalias !30
  %221 = getelementptr inbounds i32, i32* %218, i64 4
  %222 = bitcast i32* %221 to <4 x i32>*
  %223 = load <4 x i32>, <4 x i32>* %222, align 16, !alias.scope !33, !noalias !30
  %224 = add <4 x i32> %220, %214
  %225 = add <4 x i32> %223, %217
  %226 = bitcast i32* %218 to <4 x i32>*
  store <4 x i32> %224, <4 x i32>* %226, align 16, !alias.scope !33, !noalias !30
  %227 = bitcast i32* %221 to <4 x i32>*
  store <4 x i32> %225, <4 x i32>* %227, align 16, !alias.scope !33, !noalias !30
  %228 = or i64 %211, 8
  %229 = getelementptr inbounds %struct.HistogramCommand, %struct.HistogramCommand* %10, i64 %189, i32 0, i64 %228
  %230 = bitcast i32* %229 to <4 x i32>*
  %231 = load <4 x i32>, <4 x i32>* %230, align 4, !alias.scope !30
  %232 = getelementptr inbounds i32, i32* %229, i64 4
  %233 = bitcast i32* %232 to <4 x i32>*
  %234 = load <4 x i32>, <4 x i32>* %233, align 4, !alias.scope !30
  %235 = getelementptr inbounds [2 x %struct.HistogramCommand], [2 x %struct.HistogramCommand]* %3, i64 0, i64 %187, i32 0, i64 %228
  %236 = bitcast i32* %235 to <4 x i32>*
  %237 = load <4 x i32>, <4 x i32>* %236, align 16, !alias.scope !33, !noalias !30
  %238 = getelementptr inbounds i32, i32* %235, i64 4
  %239 = bitcast i32* %238 to <4 x i32>*
  %240 = load <4 x i32>, <4 x i32>* %239, align 16, !alias.scope !33, !noalias !30
  %241 = add <4 x i32> %237, %231
  %242 = add <4 x i32> %240, %234
  %243 = bitcast i32* %235 to <4 x i32>*
  store <4 x i32> %241, <4 x i32>* %243, align 16, !alias.scope !33, !noalias !30
  %244 = bitcast i32* %238 to <4 x i32>*
  store <4 x i32> %242, <4 x i32>* %244, align 16, !alias.scope !33, !noalias !30
  %245 = add nuw nsw i64 %211, 16
  %246 = icmp eq i64 %245, 704
  br i1 %246, label %262, label %210, !llvm.loop !35

247:                                              ; preds = %186, %247
  %248 = phi i64 [ %260, %247 ], [ 0, %186 ]
  %249 = getelementptr inbounds %struct.HistogramCommand, %struct.HistogramCommand* %10, i64 %189, i32 0, i64 %248
  %250 = load i32, i32* %249, align 4
  %251 = getelementptr inbounds [2 x %struct.HistogramCommand], [2 x %struct.HistogramCommand]* %3, i64 0, i64 %187, i32 0, i64 %248
  %252 = load i32, i32* %251, align 8
  %253 = add i32 %252, %250
  store i32 %253, i32* %251, align 8
  %254 = or i64 %248, 1
  %255 = getelementptr inbounds %struct.HistogramCommand, %struct.HistogramCommand* %10, i64 %189, i32 0, i64 %254
  %256 = load i32, i32* %255, align 4
  %257 = getelementptr inbounds [2 x %struct.HistogramCommand], [2 x %struct.HistogramCommand]* %3, i64 0, i64 %187, i32 0, i64 %254
  %258 = load i32, i32* %257, align 4
  %259 = add i32 %258, %256
  store i32 %259, i32* %257, align 4
  %260 = add nuw nsw i64 %248, 2
  %261 = icmp eq i64 %260, 704
  br i1 %261, label %262, label %247, !llvm.loop !36

262:                                              ; preds = %210, %247
  %263 = getelementptr inbounds %struct.HistogramCommand, %struct.HistogramCommand* %190, i64 0, i32 0, i64 0
  %264 = load i64, i64* %114, align 8
  %265 = getelementptr inbounds [2 x %struct.HistogramCommand], [2 x %struct.HistogramCommand]* %3, i64 0, i64 %187, i32 0, i64 %264
  %266 = and i64 %264, 1
  %267 = icmp eq i64 %266, 0
  br i1 %267, label %268, label %289

268:                                              ; preds = %304, %262
  %269 = phi i32* [ %293, %304 ], [ %263, %262 ]
  %270 = phi i64 [ %296, %304 ], [ 0, %262 ]
  %271 = phi double [ %307, %304 ], [ 0.000000e+00, %262 ]
  %272 = icmp ult i32* %269, %265
  br i1 %272, label %273, label %308

273:                                              ; preds = %268
  %274 = getelementptr inbounds i32, i32* %269, i64 1
  %275 = load i32, i32* %269, align 4
  %276 = zext i32 %275 to i64
  %277 = add i64 %270, %276
  %278 = uitofp i32 %275 to double
  %279 = icmp ult i32 %275, 256
  br i1 %279, label %280, label %283

280:                                              ; preds = %273
  %281 = getelementptr inbounds [256 x double], [256 x double]* @kBrotliLog2Table, i64 0, i64 %276
  %282 = load double, double* %281, align 8
  br label %285

283:                                              ; preds = %273
  %284 = call double @log2(double %278) #6
  br label %285

285:                                              ; preds = %283, %280
  %286 = phi double [ %282, %280 ], [ %284, %283 ]
  %287 = fmul double %286, %278
  %288 = fsub double %271, %287
  br label %289

289:                                              ; preds = %285, %262
  %290 = phi i32* [ %263, %262 ], [ %274, %285 ]
  %291 = phi i64 [ 0, %262 ], [ %277, %285 ]
  %292 = phi double [ 0.000000e+00, %262 ], [ %288, %285 ]
  %293 = getelementptr inbounds i32, i32* %290, i64 1
  %294 = load i32, i32* %290, align 4
  %295 = zext i32 %294 to i64
  %296 = add i64 %291, %295
  %297 = uitofp i32 %294 to double
  %298 = icmp ult i32 %294, 256
  br i1 %298, label %299, label %302

299:                                              ; preds = %289
  %300 = getelementptr inbounds [256 x double], [256 x double]* @kBrotliLog2Table, i64 0, i64 %295
  %301 = load double, double* %300, align 8
  br label %304

302:                                              ; preds = %289
  %303 = call double @log2(double %297) #6
  br label %304

304:                                              ; preds = %302, %299
  %305 = phi double [ %301, %299 ], [ %303, %302 ]
  %306 = fmul double %305, %297
  %307 = fsub double %292, %306
  br label %268

308:                                              ; preds = %268
  %309 = icmp eq i64 %270, 0
  %310 = uitofp i64 %270 to double
  br i1 %309, label %322, label %311

311:                                              ; preds = %308
  %312 = icmp ult i64 %270, 256
  br i1 %312, label %313, label %316

313:                                              ; preds = %311
  %314 = getelementptr inbounds [256 x double], [256 x double]* @kBrotliLog2Table, i64 0, i64 %270
  %315 = load double, double* %314, align 8
  br label %318

316:                                              ; preds = %311
  %317 = call double @log2(double %310) #6
  br label %318

318:                                              ; preds = %316, %313
  %319 = phi double [ %315, %313 ], [ %317, %316 ]
  %320 = fmul double %319, %310
  %321 = fadd double %271, %320
  br label %322

322:                                              ; preds = %308, %318
  %323 = phi double [ %321, %318 ], [ %271, %308 ]
  %324 = fcmp olt double %323, %310
  %325 = select i1 %324, double %310, double %323
  %326 = getelementptr inbounds [2 x double], [2 x double]* %4, i64 0, i64 %187
  store double %325, double* %326, align 8
  %327 = fsub double %325, %176
  %328 = getelementptr inbounds %struct.BlockSplitterCommand, %struct.BlockSplitterCommand* %0, i64 0, i32 11, i64 %187
  %329 = load double, double* %328, align 8
  %330 = fsub double %327, %329
  %331 = getelementptr inbounds [2 x double], [2 x double]* %5, i64 0, i64 %187
  store double %330, double* %331, align 8
  %332 = add nuw nsw i64 %187, 1
  %333 = icmp eq i64 %332, 2
  br i1 %333, label %334, label %186

334:                                              ; preds = %322
  %335 = getelementptr inbounds %struct.BlockSplit, %struct.BlockSplit* %7, i64 0, i32 0
  %336 = load i64, i64* %335, align 8
  %337 = icmp ult i64 %336, 256
  br i1 %337, label %341, label %338

338:                                              ; preds = %334
  %339 = load double, double* %183, align 8
  %340 = load double, double* %182, align 16
  br label %389

341:                                              ; preds = %334
  %342 = load double, double* %182, align 16
  %343 = getelementptr inbounds %struct.BlockSplitterCommand, %struct.BlockSplitterCommand* %0, i64 0, i32 2
  %344 = load double, double* %343, align 8
  %345 = fcmp ogt double %342, %344
  %346 = load double, double* %183, align 8
  %347 = fcmp ogt double %346, %344
  %348 = and i1 %345, %347
  br i1 %348, label %349, label %389

349:                                              ; preds = %341
  %350 = load i64, i64* %11, align 8
  %351 = trunc i64 %350 to i32
  %352 = getelementptr inbounds %struct.BlockSplit, %struct.BlockSplit* %7, i64 0, i32 3
  %353 = load i32*, i32** %352, align 8
  %354 = load i64, i64* %17, align 8
  %355 = getelementptr inbounds i32, i32* %353, i64 %354
  store i32 %351, i32* %355, align 4
  %356 = load i64, i64* %335, align 8
  %357 = trunc i64 %356 to i8
  %358 = getelementptr inbounds %struct.BlockSplit, %struct.BlockSplit* %7, i64 0, i32 2
  %359 = load i8*, i8** %358, align 8
  %360 = load i64, i64* %17, align 8
  %361 = getelementptr inbounds i8, i8* %359, i64 %360
  store i8 %357, i8* %361, align 1
  %362 = getelementptr inbounds %struct.BlockSplitterCommand, %struct.BlockSplitterCommand* %0, i64 0, i32 10, i64 0
  %363 = load i64, i64* %362, align 8
  %364 = getelementptr inbounds %struct.BlockSplitterCommand, %struct.BlockSplitterCommand* %0, i64 0, i32 10, i64 1
  store i64 %363, i64* %364, align 8
  %365 = load i64, i64* %335, align 8
  %366 = and i64 %365, 255
  store i64 %366, i64* %362, align 8
  %367 = bitcast double* %8 to i64*
  %368 = load i64, i64* %367, align 8
  %369 = getelementptr inbounds %struct.BlockSplitterCommand, %struct.BlockSplitterCommand* %0, i64 0, i32 11, i64 1
  %370 = bitcast double* %369 to i64*
  store i64 %368, i64* %370, align 8
  store double %176, double* %8, align 8
  %371 = load i64, i64* %17, align 8
  %372 = add i64 %371, 1
  store i64 %372, i64* %17, align 8
  %373 = load i64, i64* %335, align 8
  %374 = add i64 %373, 1
  store i64 %374, i64* %335, align 8
  %375 = load i64, i64* %111, align 8
  %376 = add i64 %375, 1
  store i64 %376, i64* %111, align 8
  %377 = getelementptr inbounds %struct.BlockSplitterCommand, %struct.BlockSplitterCommand* %0, i64 0, i32 6
  %378 = load i64*, i64** %377, align 8
  %379 = load i64, i64* %378, align 8
  %380 = icmp ult i64 %376, %379
  br i1 %380, label %381, label %385

381:                                              ; preds = %349
  %382 = getelementptr inbounds %struct.HistogramCommand, %struct.HistogramCommand* %10, i64 %376
  %383 = getelementptr inbounds %struct.HistogramCommand, %struct.HistogramCommand* %10, i64 %376, i32 2
  %384 = bitcast %struct.HistogramCommand* %382 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %384, i8 0, i64 2824, i1 false) #6
  store double 0x7FF0000000000000, double* %383, align 8
  br label %385

385:                                              ; preds = %381, %349
  store i64 0, i64* %11, align 8
  %386 = getelementptr inbounds %struct.BlockSplitterCommand, %struct.BlockSplitterCommand* %0, i64 0, i32 12
  store i64 0, i64* %386, align 8
  %387 = load i64, i64* %13, align 8
  %388 = getelementptr inbounds %struct.BlockSplitterCommand, %struct.BlockSplitterCommand* %0, i64 0, i32 7
  store i64 %387, i64* %388, align 8
  br label %462

389:                                              ; preds = %338, %341
  %390 = phi double [ %340, %338 ], [ %342, %341 ]
  %391 = phi double [ %339, %338 ], [ %346, %341 ]
  %392 = fadd double %390, -2.000000e+01
  %393 = fcmp olt double %391, %392
  %394 = load i64, i64* %11, align 8
  %395 = trunc i64 %394 to i32
  %396 = getelementptr inbounds %struct.BlockSplit, %struct.BlockSplit* %7, i64 0, i32 3
  %397 = load i32*, i32** %396, align 8
  %398 = load i64, i64* %17, align 8
  br i1 %393, label %399, label %431

399:                                              ; preds = %389
  %400 = getelementptr inbounds i32, i32* %397, i64 %398
  store i32 %395, i32* %400, align 4
  %401 = getelementptr inbounds %struct.BlockSplit, %struct.BlockSplit* %7, i64 0, i32 2
  %402 = load i8*, i8** %401, align 8
  %403 = load i64, i64* %17, align 8
  %404 = add i64 %403, -2
  %405 = getelementptr inbounds i8, i8* %402, i64 %404
  %406 = load i8, i8* %405, align 1
  %407 = getelementptr inbounds i8, i8* %402, i64 %403
  store i8 %406, i8* %407, align 1
  %408 = getelementptr inbounds %struct.BlockSplitterCommand, %struct.BlockSplitterCommand* %0, i64 0, i32 10, i64 0
  %409 = load i64, i64* %408, align 8
  %410 = getelementptr inbounds %struct.BlockSplitterCommand, %struct.BlockSplitterCommand* %0, i64 0, i32 10, i64 1
  %411 = load i64, i64* %410, align 8
  store i64 %411, i64* %408, align 8
  store i64 %409, i64* %410, align 8
  %412 = getelementptr inbounds %struct.HistogramCommand, %struct.HistogramCommand* %10, i64 %411
  %413 = getelementptr inbounds [2 x %struct.HistogramCommand], [2 x %struct.HistogramCommand]* %3, i64 0, i64 1
  %414 = bitcast %struct.HistogramCommand* %412 to i8*
  %415 = bitcast %struct.HistogramCommand* %413 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %414, i8* align 16 %415, i64 2832, i1 false)
  %416 = bitcast double* %8 to i64*
  %417 = load i64, i64* %416, align 8
  %418 = getelementptr inbounds %struct.BlockSplitterCommand, %struct.BlockSplitterCommand* %0, i64 0, i32 11, i64 1
  %419 = bitcast double* %418 to i64*
  store i64 %417, i64* %419, align 8
  %420 = bitcast double* %179 to i64*
  %421 = load i64, i64* %420, align 8
  store i64 %421, i64* %416, align 8
  %422 = load i64, i64* %17, align 8
  %423 = add i64 %422, 1
  store i64 %423, i64* %17, align 8
  store i64 0, i64* %11, align 8
  %424 = load i64, i64* %111, align 8
  %425 = getelementptr inbounds %struct.HistogramCommand, %struct.HistogramCommand* %10, i64 %424
  %426 = getelementptr inbounds %struct.HistogramCommand, %struct.HistogramCommand* %10, i64 %424, i32 2
  %427 = bitcast %struct.HistogramCommand* %425 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %427, i8 0, i64 2824, i1 false) #6
  store double 0x7FF0000000000000, double* %426, align 8
  %428 = getelementptr inbounds %struct.BlockSplitterCommand, %struct.BlockSplitterCommand* %0, i64 0, i32 12
  store i64 0, i64* %428, align 8
  %429 = load i64, i64* %13, align 8
  %430 = getelementptr inbounds %struct.BlockSplitterCommand, %struct.BlockSplitterCommand* %0, i64 0, i32 7
  store i64 %429, i64* %430, align 8
  br label %462

431:                                              ; preds = %389
  %432 = add i64 %398, -1
  %433 = getelementptr inbounds i32, i32* %397, i64 %432
  %434 = load i32, i32* %433, align 4
  %435 = add i32 %434, %395
  store i32 %435, i32* %433, align 4
  %436 = getelementptr inbounds %struct.BlockSplitterCommand, %struct.BlockSplitterCommand* %0, i64 0, i32 10, i64 0
  %437 = load i64, i64* %436, align 8
  %438 = getelementptr inbounds %struct.HistogramCommand, %struct.HistogramCommand* %10, i64 %437
  %439 = bitcast %struct.HistogramCommand* %438 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %439, i8* nonnull align 16 %177, i64 2832, i1 false)
  %440 = bitcast [2 x double]* %4 to i64*
  %441 = load i64, i64* %440, align 16
  %442 = bitcast double* %8 to i64*
  store i64 %441, i64* %442, align 8
  %443 = load i64, i64* %335, align 8
  %444 = icmp eq i64 %443, 1
  br i1 %444, label %445, label %448

445:                                              ; preds = %431
  %446 = getelementptr inbounds %struct.BlockSplitterCommand, %struct.BlockSplitterCommand* %0, i64 0, i32 11, i64 1
  %447 = bitcast double* %446 to i64*
  store i64 %441, i64* %447, align 8
  br label %448

448:                                              ; preds = %445, %431
  store i64 0, i64* %11, align 8
  %449 = load i64, i64* %111, align 8
  %450 = getelementptr inbounds %struct.HistogramCommand, %struct.HistogramCommand* %10, i64 %449
  %451 = getelementptr inbounds %struct.HistogramCommand, %struct.HistogramCommand* %10, i64 %449, i32 2
  %452 = bitcast %struct.HistogramCommand* %450 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %452, i8 0, i64 2824, i1 false) #6
  store double 0x7FF0000000000000, double* %451, align 8
  %453 = getelementptr inbounds %struct.BlockSplitterCommand, %struct.BlockSplitterCommand* %0, i64 0, i32 12
  %454 = load i64, i64* %453, align 8
  %455 = add i64 %454, 1
  store i64 %455, i64* %453, align 8
  %456 = icmp ugt i64 %455, 1
  br i1 %456, label %457, label %462

457:                                              ; preds = %448
  %458 = load i64, i64* %13, align 8
  %459 = getelementptr inbounds %struct.BlockSplitterCommand, %struct.BlockSplitterCommand* %0, i64 0, i32 7
  %460 = load i64, i64* %459, align 8
  %461 = add i64 %460, %458
  store i64 %461, i64* %459, align 8
  br label %462

462:                                              ; preds = %399, %457, %448, %385
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %180) #6
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %178) #6
  call void @llvm.lifetime.end.p0i8(i64 5664, i8* nonnull %177) #6
  br label %463

463:                                              ; preds = %108, %462, %107
  %464 = icmp eq i32 %1, 0
  br i1 %464, label %472, label %465

465:                                              ; preds = %463
  %466 = getelementptr inbounds %struct.BlockSplit, %struct.BlockSplit* %7, i64 0, i32 0
  %467 = load i64, i64* %466, align 8
  %468 = getelementptr inbounds %struct.BlockSplitterCommand, %struct.BlockSplitterCommand* %0, i64 0, i32 6
  %469 = load i64*, i64** %468, align 8
  store i64 %467, i64* %469, align 8
  %470 = load i64, i64* %17, align 8
  %471 = getelementptr inbounds %struct.BlockSplit, %struct.BlockSplit* %7, i64 0, i32 1
  store i64 %470, i64* %471, align 8
  br label %472

472:                                              ; preds = %463, %465
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal fastcc void @BlockSplitterFinishBlockDistance(%struct.BlockSplitterDistance*, i32) unnamed_addr #2 {
  %3 = alloca [2 x %struct.HistogramDistance], align 16
  %4 = alloca [2 x double], align 16
  %5 = alloca [2 x double], align 16
  %6 = getelementptr inbounds %struct.BlockSplitterDistance, %struct.BlockSplitterDistance* %0, i64 0, i32 4
  %7 = load %struct.BlockSplit*, %struct.BlockSplit** %6, align 8
  %8 = getelementptr inbounds %struct.BlockSplitterDistance, %struct.BlockSplitterDistance* %0, i64 0, i32 11, i64 0
  %9 = getelementptr inbounds %struct.BlockSplitterDistance, %struct.BlockSplitterDistance* %0, i64 0, i32 5
  %10 = load %struct.HistogramDistance*, %struct.HistogramDistance** %9, align 8
  %11 = getelementptr inbounds %struct.BlockSplitterDistance, %struct.BlockSplitterDistance* %0, i64 0, i32 8
  %12 = load i64, i64* %11, align 8
  %13 = getelementptr inbounds %struct.BlockSplitterDistance, %struct.BlockSplitterDistance* %0, i64 0, i32 1
  %14 = load i64, i64* %13, align 8
  %15 = icmp ugt i64 %12, %14
  %16 = select i1 %15, i64 %12, i64 %14
  store i64 %16, i64* %11, align 8
  %17 = getelementptr inbounds %struct.BlockSplitterDistance, %struct.BlockSplitterDistance* %0, i64 0, i32 3
  %18 = load i64, i64* %17, align 8
  %19 = icmp eq i64 %18, 0
  br i1 %19, label %20, label %108

20:                                               ; preds = %2
  %21 = trunc i64 %16 to i32
  %22 = getelementptr inbounds %struct.BlockSplit, %struct.BlockSplit* %7, i64 0, i32 3
  %23 = load i32*, i32** %22, align 8
  store i32 %21, i32* %23, align 4
  %24 = getelementptr inbounds %struct.BlockSplit, %struct.BlockSplit* %7, i64 0, i32 2
  %25 = load i8*, i8** %24, align 8
  store i8 0, i8* %25, align 1
  %26 = getelementptr inbounds %struct.HistogramDistance, %struct.HistogramDistance* %10, i64 0, i32 0, i64 0
  %27 = getelementptr inbounds %struct.BlockSplitterDistance, %struct.BlockSplitterDistance* %0, i64 0, i32 0
  %28 = load i64, i64* %27, align 8
  %29 = getelementptr inbounds %struct.HistogramDistance, %struct.HistogramDistance* %10, i64 0, i32 0, i64 %28
  %30 = and i64 %28, 1
  %31 = icmp eq i64 %30, 0
  br i1 %31, label %32, label %53

32:                                               ; preds = %68, %20
  %33 = phi i32* [ %57, %68 ], [ %26, %20 ]
  %34 = phi i64 [ %60, %68 ], [ 0, %20 ]
  %35 = phi double [ %71, %68 ], [ 0.000000e+00, %20 ]
  %36 = icmp ult i32* %33, %29
  br i1 %36, label %37, label %72

37:                                               ; preds = %32
  %38 = getelementptr inbounds i32, i32* %33, i64 1
  %39 = load i32, i32* %33, align 4
  %40 = zext i32 %39 to i64
  %41 = add i64 %34, %40
  %42 = uitofp i32 %39 to double
  %43 = icmp ult i32 %39, 256
  br i1 %43, label %44, label %47

44:                                               ; preds = %37
  %45 = getelementptr inbounds [256 x double], [256 x double]* @kBrotliLog2Table, i64 0, i64 %40
  %46 = load double, double* %45, align 8
  br label %49

47:                                               ; preds = %37
  %48 = tail call double @log2(double %42) #6
  br label %49

49:                                               ; preds = %47, %44
  %50 = phi double [ %46, %44 ], [ %48, %47 ]
  %51 = fmul double %50, %42
  %52 = fsub double %35, %51
  br label %53

53:                                               ; preds = %49, %20
  %54 = phi i32* [ %26, %20 ], [ %38, %49 ]
  %55 = phi i64 [ 0, %20 ], [ %41, %49 ]
  %56 = phi double [ 0.000000e+00, %20 ], [ %52, %49 ]
  %57 = getelementptr inbounds i32, i32* %54, i64 1
  %58 = load i32, i32* %54, align 4
  %59 = zext i32 %58 to i64
  %60 = add i64 %55, %59
  %61 = uitofp i32 %58 to double
  %62 = icmp ult i32 %58, 256
  br i1 %62, label %63, label %66

63:                                               ; preds = %53
  %64 = getelementptr inbounds [256 x double], [256 x double]* @kBrotliLog2Table, i64 0, i64 %59
  %65 = load double, double* %64, align 8
  br label %68

66:                                               ; preds = %53
  %67 = tail call double @log2(double %61) #6
  br label %68

68:                                               ; preds = %66, %63
  %69 = phi double [ %65, %63 ], [ %67, %66 ]
  %70 = fmul double %69, %61
  %71 = fsub double %56, %70
  br label %32

72:                                               ; preds = %32
  %73 = icmp eq i64 %34, 0
  %74 = uitofp i64 %34 to double
  br i1 %73, label %86, label %75

75:                                               ; preds = %72
  %76 = icmp ult i64 %34, 256
  br i1 %76, label %77, label %80

77:                                               ; preds = %75
  %78 = getelementptr inbounds [256 x double], [256 x double]* @kBrotliLog2Table, i64 0, i64 %34
  %79 = load double, double* %78, align 8
  br label %82

80:                                               ; preds = %75
  %81 = tail call double @log2(double %74) #6
  br label %82

82:                                               ; preds = %80, %77
  %83 = phi double [ %79, %77 ], [ %81, %80 ]
  %84 = fmul double %83, %74
  %85 = fadd double %35, %84
  br label %86

86:                                               ; preds = %72, %82
  %87 = phi double [ %85, %82 ], [ %35, %72 ]
  %88 = fcmp olt double %87, %74
  %89 = select i1 %88, double %74, double %87
  store double %89, double* %8, align 8
  %90 = getelementptr inbounds %struct.BlockSplitterDistance, %struct.BlockSplitterDistance* %0, i64 0, i32 11, i64 1
  store double %89, double* %90, align 8
  %91 = load i64, i64* %17, align 8
  %92 = add i64 %91, 1
  store i64 %92, i64* %17, align 8
  %93 = getelementptr inbounds %struct.BlockSplit, %struct.BlockSplit* %7, i64 0, i32 0
  %94 = load i64, i64* %93, align 8
  %95 = add i64 %94, 1
  store i64 %95, i64* %93, align 8
  %96 = getelementptr inbounds %struct.BlockSplitterDistance, %struct.BlockSplitterDistance* %0, i64 0, i32 9
  %97 = load i64, i64* %96, align 8
  %98 = add i64 %97, 1
  store i64 %98, i64* %96, align 8
  %99 = getelementptr inbounds %struct.BlockSplitterDistance, %struct.BlockSplitterDistance* %0, i64 0, i32 6
  %100 = load i64*, i64** %99, align 8
  %101 = load i64, i64* %100, align 8
  %102 = icmp ult i64 %98, %101
  br i1 %102, label %103, label %107

103:                                              ; preds = %86
  %104 = getelementptr inbounds %struct.HistogramDistance, %struct.HistogramDistance* %10, i64 %98
  %105 = getelementptr inbounds %struct.HistogramDistance, %struct.HistogramDistance* %10, i64 %98, i32 2
  %106 = bitcast %struct.HistogramDistance* %104 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %106, i8 0, i64 2184, i1 false) #6
  store double 0x7FF0000000000000, double* %105, align 8
  br label %107

107:                                              ; preds = %103, %86
  store i64 0, i64* %11, align 8
  br label %463

108:                                              ; preds = %2
  %109 = icmp eq i64 %16, 0
  br i1 %109, label %463, label %110

110:                                              ; preds = %108
  %111 = getelementptr inbounds %struct.BlockSplitterDistance, %struct.BlockSplitterDistance* %0, i64 0, i32 9
  %112 = load i64, i64* %111, align 8
  %113 = getelementptr inbounds %struct.HistogramDistance, %struct.HistogramDistance* %10, i64 %112, i32 0, i64 0
  %114 = getelementptr inbounds %struct.BlockSplitterDistance, %struct.BlockSplitterDistance* %0, i64 0, i32 0
  %115 = load i64, i64* %114, align 8
  %116 = getelementptr inbounds %struct.HistogramDistance, %struct.HistogramDistance* %10, i64 %112, i32 0, i64 %115
  %117 = and i64 %115, 1
  %118 = icmp eq i64 %117, 0
  br i1 %118, label %119, label %140

119:                                              ; preds = %155, %110
  %120 = phi i32* [ %144, %155 ], [ %113, %110 ]
  %121 = phi i64 [ %147, %155 ], [ 0, %110 ]
  %122 = phi double [ %158, %155 ], [ 0.000000e+00, %110 ]
  %123 = icmp ult i32* %120, %116
  br i1 %123, label %124, label %159

124:                                              ; preds = %119
  %125 = getelementptr inbounds i32, i32* %120, i64 1
  %126 = load i32, i32* %120, align 4
  %127 = zext i32 %126 to i64
  %128 = add i64 %121, %127
  %129 = uitofp i32 %126 to double
  %130 = icmp ult i32 %126, 256
  br i1 %130, label %131, label %134

131:                                              ; preds = %124
  %132 = getelementptr inbounds [256 x double], [256 x double]* @kBrotliLog2Table, i64 0, i64 %127
  %133 = load double, double* %132, align 8
  br label %136

134:                                              ; preds = %124
  %135 = tail call double @log2(double %129) #6
  br label %136

136:                                              ; preds = %134, %131
  %137 = phi double [ %133, %131 ], [ %135, %134 ]
  %138 = fmul double %137, %129
  %139 = fsub double %122, %138
  br label %140

140:                                              ; preds = %136, %110
  %141 = phi i32* [ %113, %110 ], [ %125, %136 ]
  %142 = phi i64 [ 0, %110 ], [ %128, %136 ]
  %143 = phi double [ 0.000000e+00, %110 ], [ %139, %136 ]
  %144 = getelementptr inbounds i32, i32* %141, i64 1
  %145 = load i32, i32* %141, align 4
  %146 = zext i32 %145 to i64
  %147 = add i64 %142, %146
  %148 = uitofp i32 %145 to double
  %149 = icmp ult i32 %145, 256
  br i1 %149, label %150, label %153

150:                                              ; preds = %140
  %151 = getelementptr inbounds [256 x double], [256 x double]* @kBrotliLog2Table, i64 0, i64 %146
  %152 = load double, double* %151, align 8
  br label %155

153:                                              ; preds = %140
  %154 = tail call double @log2(double %148) #6
  br label %155

155:                                              ; preds = %153, %150
  %156 = phi double [ %152, %150 ], [ %154, %153 ]
  %157 = fmul double %156, %148
  %158 = fsub double %143, %157
  br label %119

159:                                              ; preds = %119
  %160 = icmp eq i64 %121, 0
  %161 = uitofp i64 %121 to double
  br i1 %160, label %173, label %162

162:                                              ; preds = %159
  %163 = icmp ult i64 %121, 256
  br i1 %163, label %164, label %167

164:                                              ; preds = %162
  %165 = getelementptr inbounds [256 x double], [256 x double]* @kBrotliLog2Table, i64 0, i64 %121
  %166 = load double, double* %165, align 8
  br label %169

167:                                              ; preds = %162
  %168 = tail call double @log2(double %161) #6
  br label %169

169:                                              ; preds = %167, %164
  %170 = phi double [ %166, %164 ], [ %168, %167 ]
  %171 = fmul double %170, %161
  %172 = fadd double %122, %171
  br label %173

173:                                              ; preds = %159, %169
  %174 = phi double [ %172, %169 ], [ %122, %159 ]
  %175 = fcmp olt double %174, %161
  %176 = select i1 %175, double %161, double %174
  %177 = bitcast [2 x %struct.HistogramDistance]* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4384, i8* nonnull %177) #6
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 16 %177, i8* align 16 bitcast ([2 x %struct.HistogramDistance]* @__const.BlockSplitterFinishBlockDistance.combined_histo to i8*), i64 4384, i1 false)
  %178 = bitcast [2 x double]* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %178) #6
  %179 = getelementptr inbounds [2 x double], [2 x double]* %4, i64 0, i64 1
  %180 = bitcast [2 x double]* %5 to i8*
  %181 = bitcast [2 x double]* %4 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %181, i8 -1, i64 16, i1 false)
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %180) #6
  %182 = getelementptr inbounds [2 x double], [2 x double]* %5, i64 0, i64 0
  %183 = getelementptr inbounds [2 x double], [2 x double]* %5, i64 0, i64 1
  %184 = bitcast [2 x double]* %5 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %184, i8 -1, i64 16, i1 false)
  %185 = getelementptr %struct.HistogramDistance, %struct.HistogramDistance* %10, i64 0, i32 1
  br label %186

186:                                              ; preds = %322, %173
  %187 = phi i64 [ 0, %173 ], [ %332, %322 ]
  %188 = getelementptr inbounds %struct.BlockSplitterDistance, %struct.BlockSplitterDistance* %0, i64 0, i32 10, i64 %187
  %189 = load i64, i64* %188, align 8
  %190 = getelementptr inbounds [2 x %struct.HistogramDistance], [2 x %struct.HistogramDistance]* %3, i64 0, i64 %187
  %191 = load i64, i64* %111, align 8
  %192 = getelementptr inbounds %struct.HistogramDistance, %struct.HistogramDistance* %10, i64 %191
  %193 = bitcast %struct.HistogramDistance* %190 to i8*
  %194 = bitcast %struct.HistogramDistance* %192 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 16 %193, i8* align 8 %194, i64 2192, i1 false)
  %195 = getelementptr inbounds %struct.HistogramDistance, %struct.HistogramDistance* %10, i64 %189, i32 1
  %196 = load i64, i64* %195, align 8
  %197 = getelementptr inbounds [2 x %struct.HistogramDistance], [2 x %struct.HistogramDistance]* %3, i64 0, i64 %187, i32 1
  %198 = load i64, i64* %197, align 16
  %199 = add i64 %198, %196
  store i64 %199, i64* %197, align 16
  %200 = getelementptr [2 x %struct.HistogramDistance], [2 x %struct.HistogramDistance]* %3, i64 0, i64 %187, i32 1
  %201 = getelementptr [2 x %struct.HistogramDistance], [2 x %struct.HistogramDistance]* %3, i64 0, i64 %187
  %202 = getelementptr %struct.HistogramDistance, %struct.HistogramDistance* %10, i64 %189
  %203 = mul i64 %189, 274
  %204 = getelementptr i64, i64* %185, i64 %203
  %205 = bitcast i64* %204 to %struct.HistogramDistance*
  %206 = icmp ult %struct.HistogramDistance* %201, %205
  %207 = bitcast i64* %200 to %struct.HistogramDistance*
  %208 = icmp ult %struct.HistogramDistance* %202, %207
  %209 = and i1 %206, %208
  br i1 %209, label %247, label %210

210:                                              ; preds = %186, %210
  %211 = phi i64 [ %245, %210 ], [ 0, %186 ]
  %212 = getelementptr inbounds %struct.HistogramDistance, %struct.HistogramDistance* %10, i64 %189, i32 0, i64 %211
  %213 = bitcast i32* %212 to <4 x i32>*
  %214 = load <4 x i32>, <4 x i32>* %213, align 4, !alias.scope !37
  %215 = getelementptr inbounds i32, i32* %212, i64 4
  %216 = bitcast i32* %215 to <4 x i32>*
  %217 = load <4 x i32>, <4 x i32>* %216, align 4, !alias.scope !37
  %218 = getelementptr inbounds [2 x %struct.HistogramDistance], [2 x %struct.HistogramDistance]* %3, i64 0, i64 %187, i32 0, i64 %211
  %219 = bitcast i32* %218 to <4 x i32>*
  %220 = load <4 x i32>, <4 x i32>* %219, align 16, !alias.scope !40, !noalias !37
  %221 = getelementptr inbounds i32, i32* %218, i64 4
  %222 = bitcast i32* %221 to <4 x i32>*
  %223 = load <4 x i32>, <4 x i32>* %222, align 16, !alias.scope !40, !noalias !37
  %224 = add <4 x i32> %220, %214
  %225 = add <4 x i32> %223, %217
  %226 = bitcast i32* %218 to <4 x i32>*
  store <4 x i32> %224, <4 x i32>* %226, align 16, !alias.scope !40, !noalias !37
  %227 = bitcast i32* %221 to <4 x i32>*
  store <4 x i32> %225, <4 x i32>* %227, align 16, !alias.scope !40, !noalias !37
  %228 = or i64 %211, 8
  %229 = getelementptr inbounds %struct.HistogramDistance, %struct.HistogramDistance* %10, i64 %189, i32 0, i64 %228
  %230 = bitcast i32* %229 to <4 x i32>*
  %231 = load <4 x i32>, <4 x i32>* %230, align 4, !alias.scope !37
  %232 = getelementptr inbounds i32, i32* %229, i64 4
  %233 = bitcast i32* %232 to <4 x i32>*
  %234 = load <4 x i32>, <4 x i32>* %233, align 4, !alias.scope !37
  %235 = getelementptr inbounds [2 x %struct.HistogramDistance], [2 x %struct.HistogramDistance]* %3, i64 0, i64 %187, i32 0, i64 %228
  %236 = bitcast i32* %235 to <4 x i32>*
  %237 = load <4 x i32>, <4 x i32>* %236, align 16, !alias.scope !40, !noalias !37
  %238 = getelementptr inbounds i32, i32* %235, i64 4
  %239 = bitcast i32* %238 to <4 x i32>*
  %240 = load <4 x i32>, <4 x i32>* %239, align 16, !alias.scope !40, !noalias !37
  %241 = add <4 x i32> %237, %231
  %242 = add <4 x i32> %240, %234
  %243 = bitcast i32* %235 to <4 x i32>*
  store <4 x i32> %241, <4 x i32>* %243, align 16, !alias.scope !40, !noalias !37
  %244 = bitcast i32* %238 to <4 x i32>*
  store <4 x i32> %242, <4 x i32>* %244, align 16, !alias.scope !40, !noalias !37
  %245 = add nuw nsw i64 %211, 16
  %246 = icmp eq i64 %245, 544
  br i1 %246, label %262, label %210, !llvm.loop !42

247:                                              ; preds = %186, %247
  %248 = phi i64 [ %260, %247 ], [ 0, %186 ]
  %249 = getelementptr inbounds %struct.HistogramDistance, %struct.HistogramDistance* %10, i64 %189, i32 0, i64 %248
  %250 = load i32, i32* %249, align 4
  %251 = getelementptr inbounds [2 x %struct.HistogramDistance], [2 x %struct.HistogramDistance]* %3, i64 0, i64 %187, i32 0, i64 %248
  %252 = load i32, i32* %251, align 8
  %253 = add i32 %252, %250
  store i32 %253, i32* %251, align 8
  %254 = or i64 %248, 1
  %255 = getelementptr inbounds %struct.HistogramDistance, %struct.HistogramDistance* %10, i64 %189, i32 0, i64 %254
  %256 = load i32, i32* %255, align 4
  %257 = getelementptr inbounds [2 x %struct.HistogramDistance], [2 x %struct.HistogramDistance]* %3, i64 0, i64 %187, i32 0, i64 %254
  %258 = load i32, i32* %257, align 4
  %259 = add i32 %258, %256
  store i32 %259, i32* %257, align 4
  %260 = add nuw nsw i64 %248, 2
  %261 = icmp eq i64 %260, 544
  br i1 %261, label %262, label %247, !llvm.loop !43

262:                                              ; preds = %210, %247
  %263 = getelementptr inbounds %struct.HistogramDistance, %struct.HistogramDistance* %190, i64 0, i32 0, i64 0
  %264 = load i64, i64* %114, align 8
  %265 = getelementptr inbounds [2 x %struct.HistogramDistance], [2 x %struct.HistogramDistance]* %3, i64 0, i64 %187, i32 0, i64 %264
  %266 = and i64 %264, 1
  %267 = icmp eq i64 %266, 0
  br i1 %267, label %268, label %289

268:                                              ; preds = %304, %262
  %269 = phi i32* [ %293, %304 ], [ %263, %262 ]
  %270 = phi i64 [ %296, %304 ], [ 0, %262 ]
  %271 = phi double [ %307, %304 ], [ 0.000000e+00, %262 ]
  %272 = icmp ult i32* %269, %265
  br i1 %272, label %273, label %308

273:                                              ; preds = %268
  %274 = getelementptr inbounds i32, i32* %269, i64 1
  %275 = load i32, i32* %269, align 4
  %276 = zext i32 %275 to i64
  %277 = add i64 %270, %276
  %278 = uitofp i32 %275 to double
  %279 = icmp ult i32 %275, 256
  br i1 %279, label %280, label %283

280:                                              ; preds = %273
  %281 = getelementptr inbounds [256 x double], [256 x double]* @kBrotliLog2Table, i64 0, i64 %276
  %282 = load double, double* %281, align 8
  br label %285

283:                                              ; preds = %273
  %284 = call double @log2(double %278) #6
  br label %285

285:                                              ; preds = %283, %280
  %286 = phi double [ %282, %280 ], [ %284, %283 ]
  %287 = fmul double %286, %278
  %288 = fsub double %271, %287
  br label %289

289:                                              ; preds = %285, %262
  %290 = phi i32* [ %263, %262 ], [ %274, %285 ]
  %291 = phi i64 [ 0, %262 ], [ %277, %285 ]
  %292 = phi double [ 0.000000e+00, %262 ], [ %288, %285 ]
  %293 = getelementptr inbounds i32, i32* %290, i64 1
  %294 = load i32, i32* %290, align 4
  %295 = zext i32 %294 to i64
  %296 = add i64 %291, %295
  %297 = uitofp i32 %294 to double
  %298 = icmp ult i32 %294, 256
  br i1 %298, label %299, label %302

299:                                              ; preds = %289
  %300 = getelementptr inbounds [256 x double], [256 x double]* @kBrotliLog2Table, i64 0, i64 %295
  %301 = load double, double* %300, align 8
  br label %304

302:                                              ; preds = %289
  %303 = call double @log2(double %297) #6
  br label %304

304:                                              ; preds = %302, %299
  %305 = phi double [ %301, %299 ], [ %303, %302 ]
  %306 = fmul double %305, %297
  %307 = fsub double %292, %306
  br label %268

308:                                              ; preds = %268
  %309 = icmp eq i64 %270, 0
  %310 = uitofp i64 %270 to double
  br i1 %309, label %322, label %311

311:                                              ; preds = %308
  %312 = icmp ult i64 %270, 256
  br i1 %312, label %313, label %316

313:                                              ; preds = %311
  %314 = getelementptr inbounds [256 x double], [256 x double]* @kBrotliLog2Table, i64 0, i64 %270
  %315 = load double, double* %314, align 8
  br label %318

316:                                              ; preds = %311
  %317 = call double @log2(double %310) #6
  br label %318

318:                                              ; preds = %316, %313
  %319 = phi double [ %315, %313 ], [ %317, %316 ]
  %320 = fmul double %319, %310
  %321 = fadd double %271, %320
  br label %322

322:                                              ; preds = %308, %318
  %323 = phi double [ %321, %318 ], [ %271, %308 ]
  %324 = fcmp olt double %323, %310
  %325 = select i1 %324, double %310, double %323
  %326 = getelementptr inbounds [2 x double], [2 x double]* %4, i64 0, i64 %187
  store double %325, double* %326, align 8
  %327 = fsub double %325, %176
  %328 = getelementptr inbounds %struct.BlockSplitterDistance, %struct.BlockSplitterDistance* %0, i64 0, i32 11, i64 %187
  %329 = load double, double* %328, align 8
  %330 = fsub double %327, %329
  %331 = getelementptr inbounds [2 x double], [2 x double]* %5, i64 0, i64 %187
  store double %330, double* %331, align 8
  %332 = add nuw nsw i64 %187, 1
  %333 = icmp eq i64 %332, 2
  br i1 %333, label %334, label %186

334:                                              ; preds = %322
  %335 = getelementptr inbounds %struct.BlockSplit, %struct.BlockSplit* %7, i64 0, i32 0
  %336 = load i64, i64* %335, align 8
  %337 = icmp ult i64 %336, 256
  br i1 %337, label %341, label %338

338:                                              ; preds = %334
  %339 = load double, double* %183, align 8
  %340 = load double, double* %182, align 16
  br label %389

341:                                              ; preds = %334
  %342 = load double, double* %182, align 16
  %343 = getelementptr inbounds %struct.BlockSplitterDistance, %struct.BlockSplitterDistance* %0, i64 0, i32 2
  %344 = load double, double* %343, align 8
  %345 = fcmp ogt double %342, %344
  %346 = load double, double* %183, align 8
  %347 = fcmp ogt double %346, %344
  %348 = and i1 %345, %347
  br i1 %348, label %349, label %389

349:                                              ; preds = %341
  %350 = load i64, i64* %11, align 8
  %351 = trunc i64 %350 to i32
  %352 = getelementptr inbounds %struct.BlockSplit, %struct.BlockSplit* %7, i64 0, i32 3
  %353 = load i32*, i32** %352, align 8
  %354 = load i64, i64* %17, align 8
  %355 = getelementptr inbounds i32, i32* %353, i64 %354
  store i32 %351, i32* %355, align 4
  %356 = load i64, i64* %335, align 8
  %357 = trunc i64 %356 to i8
  %358 = getelementptr inbounds %struct.BlockSplit, %struct.BlockSplit* %7, i64 0, i32 2
  %359 = load i8*, i8** %358, align 8
  %360 = load i64, i64* %17, align 8
  %361 = getelementptr inbounds i8, i8* %359, i64 %360
  store i8 %357, i8* %361, align 1
  %362 = getelementptr inbounds %struct.BlockSplitterDistance, %struct.BlockSplitterDistance* %0, i64 0, i32 10, i64 0
  %363 = load i64, i64* %362, align 8
  %364 = getelementptr inbounds %struct.BlockSplitterDistance, %struct.BlockSplitterDistance* %0, i64 0, i32 10, i64 1
  store i64 %363, i64* %364, align 8
  %365 = load i64, i64* %335, align 8
  %366 = and i64 %365, 255
  store i64 %366, i64* %362, align 8
  %367 = bitcast double* %8 to i64*
  %368 = load i64, i64* %367, align 8
  %369 = getelementptr inbounds %struct.BlockSplitterDistance, %struct.BlockSplitterDistance* %0, i64 0, i32 11, i64 1
  %370 = bitcast double* %369 to i64*
  store i64 %368, i64* %370, align 8
  store double %176, double* %8, align 8
  %371 = load i64, i64* %17, align 8
  %372 = add i64 %371, 1
  store i64 %372, i64* %17, align 8
  %373 = load i64, i64* %335, align 8
  %374 = add i64 %373, 1
  store i64 %374, i64* %335, align 8
  %375 = load i64, i64* %111, align 8
  %376 = add i64 %375, 1
  store i64 %376, i64* %111, align 8
  %377 = getelementptr inbounds %struct.BlockSplitterDistance, %struct.BlockSplitterDistance* %0, i64 0, i32 6
  %378 = load i64*, i64** %377, align 8
  %379 = load i64, i64* %378, align 8
  %380 = icmp ult i64 %376, %379
  br i1 %380, label %381, label %385

381:                                              ; preds = %349
  %382 = getelementptr inbounds %struct.HistogramDistance, %struct.HistogramDistance* %10, i64 %376
  %383 = getelementptr inbounds %struct.HistogramDistance, %struct.HistogramDistance* %10, i64 %376, i32 2
  %384 = bitcast %struct.HistogramDistance* %382 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %384, i8 0, i64 2184, i1 false) #6
  store double 0x7FF0000000000000, double* %383, align 8
  br label %385

385:                                              ; preds = %381, %349
  store i64 0, i64* %11, align 8
  %386 = getelementptr inbounds %struct.BlockSplitterDistance, %struct.BlockSplitterDistance* %0, i64 0, i32 12
  store i64 0, i64* %386, align 8
  %387 = load i64, i64* %13, align 8
  %388 = getelementptr inbounds %struct.BlockSplitterDistance, %struct.BlockSplitterDistance* %0, i64 0, i32 7
  store i64 %387, i64* %388, align 8
  br label %462

389:                                              ; preds = %338, %341
  %390 = phi double [ %340, %338 ], [ %342, %341 ]
  %391 = phi double [ %339, %338 ], [ %346, %341 ]
  %392 = fadd double %390, -2.000000e+01
  %393 = fcmp olt double %391, %392
  %394 = load i64, i64* %11, align 8
  %395 = trunc i64 %394 to i32
  %396 = getelementptr inbounds %struct.BlockSplit, %struct.BlockSplit* %7, i64 0, i32 3
  %397 = load i32*, i32** %396, align 8
  %398 = load i64, i64* %17, align 8
  br i1 %393, label %399, label %431

399:                                              ; preds = %389
  %400 = getelementptr inbounds i32, i32* %397, i64 %398
  store i32 %395, i32* %400, align 4
  %401 = getelementptr inbounds %struct.BlockSplit, %struct.BlockSplit* %7, i64 0, i32 2
  %402 = load i8*, i8** %401, align 8
  %403 = load i64, i64* %17, align 8
  %404 = add i64 %403, -2
  %405 = getelementptr inbounds i8, i8* %402, i64 %404
  %406 = load i8, i8* %405, align 1
  %407 = getelementptr inbounds i8, i8* %402, i64 %403
  store i8 %406, i8* %407, align 1
  %408 = getelementptr inbounds %struct.BlockSplitterDistance, %struct.BlockSplitterDistance* %0, i64 0, i32 10, i64 0
  %409 = load i64, i64* %408, align 8
  %410 = getelementptr inbounds %struct.BlockSplitterDistance, %struct.BlockSplitterDistance* %0, i64 0, i32 10, i64 1
  %411 = load i64, i64* %410, align 8
  store i64 %411, i64* %408, align 8
  store i64 %409, i64* %410, align 8
  %412 = getelementptr inbounds %struct.HistogramDistance, %struct.HistogramDistance* %10, i64 %411
  %413 = getelementptr inbounds [2 x %struct.HistogramDistance], [2 x %struct.HistogramDistance]* %3, i64 0, i64 1
  %414 = bitcast %struct.HistogramDistance* %412 to i8*
  %415 = bitcast %struct.HistogramDistance* %413 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %414, i8* align 16 %415, i64 2192, i1 false)
  %416 = bitcast double* %8 to i64*
  %417 = load i64, i64* %416, align 8
  %418 = getelementptr inbounds %struct.BlockSplitterDistance, %struct.BlockSplitterDistance* %0, i64 0, i32 11, i64 1
  %419 = bitcast double* %418 to i64*
  store i64 %417, i64* %419, align 8
  %420 = bitcast double* %179 to i64*
  %421 = load i64, i64* %420, align 8
  store i64 %421, i64* %416, align 8
  %422 = load i64, i64* %17, align 8
  %423 = add i64 %422, 1
  store i64 %423, i64* %17, align 8
  store i64 0, i64* %11, align 8
  %424 = load i64, i64* %111, align 8
  %425 = getelementptr inbounds %struct.HistogramDistance, %struct.HistogramDistance* %10, i64 %424
  %426 = getelementptr inbounds %struct.HistogramDistance, %struct.HistogramDistance* %10, i64 %424, i32 2
  %427 = bitcast %struct.HistogramDistance* %425 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %427, i8 0, i64 2184, i1 false) #6
  store double 0x7FF0000000000000, double* %426, align 8
  %428 = getelementptr inbounds %struct.BlockSplitterDistance, %struct.BlockSplitterDistance* %0, i64 0, i32 12
  store i64 0, i64* %428, align 8
  %429 = load i64, i64* %13, align 8
  %430 = getelementptr inbounds %struct.BlockSplitterDistance, %struct.BlockSplitterDistance* %0, i64 0, i32 7
  store i64 %429, i64* %430, align 8
  br label %462

431:                                              ; preds = %389
  %432 = add i64 %398, -1
  %433 = getelementptr inbounds i32, i32* %397, i64 %432
  %434 = load i32, i32* %433, align 4
  %435 = add i32 %434, %395
  store i32 %435, i32* %433, align 4
  %436 = getelementptr inbounds %struct.BlockSplitterDistance, %struct.BlockSplitterDistance* %0, i64 0, i32 10, i64 0
  %437 = load i64, i64* %436, align 8
  %438 = getelementptr inbounds %struct.HistogramDistance, %struct.HistogramDistance* %10, i64 %437
  %439 = bitcast %struct.HistogramDistance* %438 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %439, i8* nonnull align 16 %177, i64 2192, i1 false)
  %440 = bitcast [2 x double]* %4 to i64*
  %441 = load i64, i64* %440, align 16
  %442 = bitcast double* %8 to i64*
  store i64 %441, i64* %442, align 8
  %443 = load i64, i64* %335, align 8
  %444 = icmp eq i64 %443, 1
  br i1 %444, label %445, label %448

445:                                              ; preds = %431
  %446 = getelementptr inbounds %struct.BlockSplitterDistance, %struct.BlockSplitterDistance* %0, i64 0, i32 11, i64 1
  %447 = bitcast double* %446 to i64*
  store i64 %441, i64* %447, align 8
  br label %448

448:                                              ; preds = %445, %431
  store i64 0, i64* %11, align 8
  %449 = load i64, i64* %111, align 8
  %450 = getelementptr inbounds %struct.HistogramDistance, %struct.HistogramDistance* %10, i64 %449
  %451 = getelementptr inbounds %struct.HistogramDistance, %struct.HistogramDistance* %10, i64 %449, i32 2
  %452 = bitcast %struct.HistogramDistance* %450 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %452, i8 0, i64 2184, i1 false) #6
  store double 0x7FF0000000000000, double* %451, align 8
  %453 = getelementptr inbounds %struct.BlockSplitterDistance, %struct.BlockSplitterDistance* %0, i64 0, i32 12
  %454 = load i64, i64* %453, align 8
  %455 = add i64 %454, 1
  store i64 %455, i64* %453, align 8
  %456 = icmp ugt i64 %455, 1
  br i1 %456, label %457, label %462

457:                                              ; preds = %448
  %458 = load i64, i64* %13, align 8
  %459 = getelementptr inbounds %struct.BlockSplitterDistance, %struct.BlockSplitterDistance* %0, i64 0, i32 7
  %460 = load i64, i64* %459, align 8
  %461 = add i64 %460, %458
  store i64 %461, i64* %459, align 8
  br label %462

462:                                              ; preds = %399, %457, %448, %385
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %180) #6
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %178) #6
  call void @llvm.lifetime.end.p0i8(i64 4384, i8* nonnull %177) #6
  br label %463

463:                                              ; preds = %108, %462, %107
  %464 = icmp eq i32 %1, 0
  br i1 %464, label %472, label %465

465:                                              ; preds = %463
  %466 = getelementptr inbounds %struct.BlockSplit, %struct.BlockSplit* %7, i64 0, i32 0
  %467 = load i64, i64* %466, align 8
  %468 = getelementptr inbounds %struct.BlockSplitterDistance, %struct.BlockSplitterDistance* %0, i64 0, i32 6
  %469 = load i64*, i64** %468, align 8
  store i64 %467, i64* %469, align 8
  %470 = load i64, i64* %17, align 8
  %471 = getelementptr inbounds %struct.BlockSplit, %struct.BlockSplit* %7, i64 0, i32 1
  store i64 %470, i64* %471, align 8
  br label %472

472:                                              ; preds = %463, %465
  ret void
}

; Function Attrs: nofree nounwind
declare double @log2(double) local_unnamed_addr #5

; Function Attrs: nounwind readnone speculatable
declare { i64, i1 } @llvm.umul.with.overflow.i64(i64, i64) #4

attributes #0 = { nofree nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind readnone speculatable }
attributes #5 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{i32 1, i32 33}
!3 = !{i32 0, i32 33}
!4 = distinct !{!4, !5}
!5 = !{!"llvm.loop.unroll.disable"}
!6 = distinct !{!6, !5}
!7 = distinct !{!7, !5}
!8 = distinct !{!8, !5}
!9 = distinct !{!9, !5}
!10 = !{!11}
!11 = distinct !{!11, !12}
!12 = distinct !{!12, !"LVerDomain"}
!13 = !{!14}
!14 = distinct !{!14, !12}
!15 = distinct !{!15, !16}
!16 = !{!"llvm.loop.isvectorized", i32 1}
!17 = distinct !{!17, !16}
!18 = distinct !{!18, !5}
!19 = !{!20}
!20 = distinct !{!20, !21}
!21 = distinct !{!21, !"LVerDomain"}
!22 = !{!23}
!23 = distinct !{!23, !21}
!24 = distinct !{!24, !16}
!25 = distinct !{!25, !16}
!26 = distinct !{!26, !16}
!27 = distinct !{!27, !5}
!28 = distinct !{!28, !16}
!29 = distinct !{!29, !5}
!30 = !{!31}
!31 = distinct !{!31, !32}
!32 = distinct !{!32, !"LVerDomain"}
!33 = !{!34}
!34 = distinct !{!34, !32}
!35 = distinct !{!35, !16}
!36 = distinct !{!36, !16}
!37 = !{!38}
!38 = distinct !{!38, !39}
!39 = distinct !{!39, !"LVerDomain"}
!40 = !{!41}
!41 = distinct !{!41, !39}
!42 = distinct !{!42, !16}
!43 = distinct !{!43, !16}
