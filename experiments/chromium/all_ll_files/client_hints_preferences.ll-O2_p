; ModuleID = '../../third_party/blink/renderer/platform/loader/fetch/client_hints_preferences.cc'
source_filename = "../../third_party/blink/renderer/platform/loader/fetch/client_hints_preferences.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.WTF::StringImpl" = type { i32, i32, %"struct.std::__1::atomic" }
%"struct.std::__1::atomic" = type { %"struct.std::__1::__atomic_base" }
%"struct.std::__1::__atomic_base" = type { %"struct.std::__1::__atomic_base.14" }
%"struct.std::__1::__atomic_base.14" = type { %"struct.std::__1::__cxx_atomic_impl" }
%"struct.std::__1::__cxx_atomic_impl" = type { %"struct.std::__1::__cxx_atomic_base_impl" }
%"struct.std::__1::__cxx_atomic_base_impl" = type { i32 }
%"class.blink::ClientHintsPreferences" = type { %"struct.blink::WebEnabledClientHints" }
%"struct.blink::WebEnabledClientHints" = type { [16 x i8] }
%"class.base::CommandLine" = type { %"class.std::__1::vector", %"class.std::__1::map", i64 }
%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { %"class.std::__1::basic_string"*, %"class.std::__1::basic_string"*, %"class.std::__1::__compressed_pair.1" }
%"class.std::__1::basic_string" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" = type { %union.anon }
%union.anon = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" = type { i8*, i64, i64 }
%"class.std::__1::__compressed_pair.1" = type { %"struct.std::__1::__compressed_pair_elem.2" }
%"struct.std::__1::__compressed_pair_elem.2" = type { %"class.std::__1::basic_string"* }
%"class.std::__1::map" = type { %"class.std::__1::__tree" }
%"class.std::__1::__tree" = type { %"class.std::__1::__tree_end_node"*, %"class.std::__1::__compressed_pair.6", %"class.std::__1::__compressed_pair.11" }
%"class.std::__1::__tree_end_node" = type { %"class.std::__1::__tree_node_base"* }
%"class.std::__1::__tree_node_base" = type opaque
%"class.std::__1::__compressed_pair.6" = type { %"struct.std::__1::__compressed_pair_elem.7" }
%"struct.std::__1::__compressed_pair_elem.7" = type { %"class.std::__1::__tree_end_node" }
%"class.std::__1::__compressed_pair.11" = type { %"struct.std::__1::__compressed_pair_elem.12" }
%"struct.std::__1::__compressed_pair_elem.12" = type { i64 }
%"class.WTF::String" = type { %class.scoped_refptr }
%class.scoped_refptr = type { %"class.WTF::StringImpl"* }
%"class.blink::KURL" = type { i8, i8, %"class.WTF::String", %"struct.url::Parsed", %"class.WTF::String", %"class.std::__1::unique_ptr" }
%"struct.url::Parsed" = type { %"struct.url::Component", %"struct.url::Component", %"struct.url::Component", %"struct.url::Component", %"struct.url::Component", %"struct.url::Component", %"struct.url::Component", %"struct.url::Component", i8, %"struct.url::Parsed"* }
%"struct.url::Component" = type { i32, i32 }
%"class.std::__1::unique_ptr" = type { %"class.std::__1::__compressed_pair.15" }
%"class.std::__1::__compressed_pair.15" = type { %"struct.std::__1::__compressed_pair_elem.16" }
%"struct.std::__1::__compressed_pair_elem.16" = type { %"class.blink::KURL"* }
%"class.blink::ClientHintsPreferences::Context" = type { i32 (...)** }
%"class.absl::optional" = type { %"class.absl::optional_internal::optional_data" }
%"class.absl::optional_internal::optional_data" = type { %"class.absl::optional_internal::optional_data_base" }
%"class.absl::optional_internal::optional_data_base" = type { %"class.absl::optional_internal::optional_data_dtor_base" }
%"class.absl::optional_internal::optional_data_dtor_base" = type { i8, %union.anon.18 }
%union.anon.18 = type { %"class.std::__1::vector.19" }
%"class.std::__1::vector.19" = type { %"class.std::__1::__vector_base.20" }
%"class.std::__1::__vector_base.20" = type { i32*, i32*, %"class.std::__1::__compressed_pair.21" }
%"class.std::__1::__compressed_pair.21" = type { %"struct.std::__1::__compressed_pair_elem.22" }
%"struct.std::__1::__compressed_pair_elem.22" = type { i32* }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short" = type { [23 x i8], %struct.anon }
%struct.anon = type { i8 }
%"class.WTF::StringView" = type <{ %"class.WTF::StringImpl"*, i8*, i32, [4 x i8] }>
%"class.url::Origin" = type { %"class.url::SchemeHostPort", %"class.absl::optional.26" }
%"class.url::SchemeHostPort" = type <{ %"class.std::__1::basic_string", %"class.std::__1::basic_string", i16, [6 x i8] }>
%"class.absl::optional.26" = type { %"class.absl::optional_internal::optional_data.27" }
%"class.absl::optional_internal::optional_data.27" = type { %"class.absl::optional_internal::optional_data_base.28" }
%"class.absl::optional_internal::optional_data_base.28" = type { %"class.absl::optional_internal::optional_data_dtor_base.29" }
%"class.absl::optional_internal::optional_data_dtor_base.29" = type { i8, %union.anon.30 }
%union.anon.30 = type { %"class.url::Origin::Nonce" }
%"class.url::Origin::Nonce" = type { %"class.base::UnguessableToken" }
%"class.base::UnguessableToken" = type { %"class.base::Token" }
%"class.base::Token" = type { i64, i64 }
%class.GURL = type { %"class.std::__1::basic_string", i8, %"struct.url::Parsed", %"class.std::__1::unique_ptr.31" }
%"class.std::__1::unique_ptr.31" = type { %"class.std::__1::__compressed_pair.32" }
%"class.std::__1::__compressed_pair.32" = type { %"struct.std::__1::__compressed_pair_elem.33" }
%"struct.std::__1::__compressed_pair_elem.33" = type { %class.GURL* }

@_ZN5blink8switches27kUserAgentClientHintDisableE = external constant [0 x i8], align 1
@.str = private unnamed_addr constant [5 x i8] c"http\00", align 1
@.str.1 = private unnamed_addr constant [6 x i8] c"https\00", align 1
@_ZN5blink26RuntimeEnabledFeaturesBase34is_user_agent_client_hint_enabled_E = external local_unnamed_addr global i8, align 1
@_ZN5blink26RuntimeEnabledFeaturesBase35is_lang_client_hint_header_enabled_E = external local_unnamed_addr global i8, align 1
@_ZN5blink26RuntimeEnabledFeaturesBase51is_prefers_color_scheme_client_hint_header_enabled_E = external local_unnamed_addr global i8, align 1
@_ZN3WTF10StringImpl6empty_E = external local_unnamed_addr global %"class.WTF::StringImpl"*, align 8

@_ZN5blink22ClientHintsPreferencesC1Ev = hidden unnamed_addr alias void (%"class.blink::ClientHintsPreferences"*), void (%"class.blink::ClientHintsPreferences"*)* @_ZN5blink22ClientHintsPreferencesC2Ev

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink22ClientHintsPreferencesC2Ev(%"class.blink::ClientHintsPreferences"* nocapture) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.blink::ClientHintsPreferences", %"class.blink::ClientHintsPreferences"* %0, i64 0, i32 0, i32 0, i64 0
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %2, i8 0, i64 16, i1 false) #7
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @_ZN5blink22ClientHintsPreferences10UpdateFromERKS0_(%"class.blink::ClientHintsPreferences"* nocapture, %"class.blink::ClientHintsPreferences"* nocapture readonly dereferenceable(16)) local_unnamed_addr #1 align 2 {
  %3 = getelementptr inbounds %"class.blink::ClientHintsPreferences", %"class.blink::ClientHintsPreferences"* %1, i64 0, i32 0, i32 0, i64 0
  %4 = load i8, i8* %3, align 1, !range !2
  %5 = getelementptr inbounds %"class.blink::ClientHintsPreferences", %"class.blink::ClientHintsPreferences"* %0, i64 0, i32 0, i32 0, i64 0
  store i8 %4, i8* %5, align 1
  %6 = getelementptr inbounds %"class.blink::ClientHintsPreferences", %"class.blink::ClientHintsPreferences"* %1, i64 0, i32 0, i32 0, i64 1
  %7 = load i8, i8* %6, align 1, !range !2
  %8 = getelementptr inbounds %"class.blink::ClientHintsPreferences", %"class.blink::ClientHintsPreferences"* %0, i64 0, i32 0, i32 0, i64 1
  store i8 %7, i8* %8, align 1
  %9 = getelementptr inbounds %"class.blink::ClientHintsPreferences", %"class.blink::ClientHintsPreferences"* %1, i64 0, i32 0, i32 0, i64 2
  %10 = load i8, i8* %9, align 1, !range !2
  %11 = getelementptr inbounds %"class.blink::ClientHintsPreferences", %"class.blink::ClientHintsPreferences"* %0, i64 0, i32 0, i32 0, i64 2
  store i8 %10, i8* %11, align 1
  %12 = getelementptr inbounds %"class.blink::ClientHintsPreferences", %"class.blink::ClientHintsPreferences"* %1, i64 0, i32 0, i32 0, i64 3
  %13 = load i8, i8* %12, align 1, !range !2
  %14 = getelementptr inbounds %"class.blink::ClientHintsPreferences", %"class.blink::ClientHintsPreferences"* %0, i64 0, i32 0, i32 0, i64 3
  store i8 %13, i8* %14, align 1
  %15 = getelementptr inbounds %"class.blink::ClientHintsPreferences", %"class.blink::ClientHintsPreferences"* %1, i64 0, i32 0, i32 0, i64 4
  %16 = load i8, i8* %15, align 1, !range !2
  %17 = getelementptr inbounds %"class.blink::ClientHintsPreferences", %"class.blink::ClientHintsPreferences"* %0, i64 0, i32 0, i32 0, i64 4
  store i8 %16, i8* %17, align 1
  %18 = getelementptr inbounds %"class.blink::ClientHintsPreferences", %"class.blink::ClientHintsPreferences"* %1, i64 0, i32 0, i32 0, i64 5
  %19 = load i8, i8* %18, align 1, !range !2
  %20 = getelementptr inbounds %"class.blink::ClientHintsPreferences", %"class.blink::ClientHintsPreferences"* %0, i64 0, i32 0, i32 0, i64 5
  store i8 %19, i8* %20, align 1
  %21 = getelementptr inbounds %"class.blink::ClientHintsPreferences", %"class.blink::ClientHintsPreferences"* %1, i64 0, i32 0, i32 0, i64 6
  %22 = load i8, i8* %21, align 1, !range !2
  %23 = getelementptr inbounds %"class.blink::ClientHintsPreferences", %"class.blink::ClientHintsPreferences"* %0, i64 0, i32 0, i32 0, i64 6
  store i8 %22, i8* %23, align 1
  %24 = getelementptr inbounds %"class.blink::ClientHintsPreferences", %"class.blink::ClientHintsPreferences"* %1, i64 0, i32 0, i32 0, i64 7
  %25 = load i8, i8* %24, align 1, !range !2
  %26 = getelementptr inbounds %"class.blink::ClientHintsPreferences", %"class.blink::ClientHintsPreferences"* %0, i64 0, i32 0, i32 0, i64 7
  store i8 %25, i8* %26, align 1
  %27 = getelementptr inbounds %"class.blink::ClientHintsPreferences", %"class.blink::ClientHintsPreferences"* %1, i64 0, i32 0, i32 0, i64 8
  %28 = load i8, i8* %27, align 1, !range !2
  %29 = getelementptr inbounds %"class.blink::ClientHintsPreferences", %"class.blink::ClientHintsPreferences"* %0, i64 0, i32 0, i32 0, i64 8
  store i8 %28, i8* %29, align 1
  %30 = getelementptr inbounds %"class.blink::ClientHintsPreferences", %"class.blink::ClientHintsPreferences"* %1, i64 0, i32 0, i32 0, i64 9
  %31 = load i8, i8* %30, align 1, !range !2
  %32 = getelementptr inbounds %"class.blink::ClientHintsPreferences", %"class.blink::ClientHintsPreferences"* %0, i64 0, i32 0, i32 0, i64 9
  store i8 %31, i8* %32, align 1
  %33 = getelementptr inbounds %"class.blink::ClientHintsPreferences", %"class.blink::ClientHintsPreferences"* %1, i64 0, i32 0, i32 0, i64 10
  %34 = load i8, i8* %33, align 1, !range !2
  %35 = getelementptr inbounds %"class.blink::ClientHintsPreferences", %"class.blink::ClientHintsPreferences"* %0, i64 0, i32 0, i32 0, i64 10
  store i8 %34, i8* %35, align 1
  %36 = getelementptr inbounds %"class.blink::ClientHintsPreferences", %"class.blink::ClientHintsPreferences"* %1, i64 0, i32 0, i32 0, i64 11
  %37 = load i8, i8* %36, align 1, !range !2
  %38 = getelementptr inbounds %"class.blink::ClientHintsPreferences", %"class.blink::ClientHintsPreferences"* %0, i64 0, i32 0, i32 0, i64 11
  store i8 %37, i8* %38, align 1
  %39 = getelementptr inbounds %"class.blink::ClientHintsPreferences", %"class.blink::ClientHintsPreferences"* %1, i64 0, i32 0, i32 0, i64 12
  %40 = load i8, i8* %39, align 1, !range !2
  %41 = getelementptr inbounds %"class.blink::ClientHintsPreferences", %"class.blink::ClientHintsPreferences"* %0, i64 0, i32 0, i32 0, i64 12
  store i8 %40, i8* %41, align 1
  %42 = getelementptr inbounds %"class.blink::ClientHintsPreferences", %"class.blink::ClientHintsPreferences"* %1, i64 0, i32 0, i32 0, i64 13
  %43 = load i8, i8* %42, align 1, !range !2
  %44 = getelementptr inbounds %"class.blink::ClientHintsPreferences", %"class.blink::ClientHintsPreferences"* %0, i64 0, i32 0, i32 0, i64 13
  store i8 %43, i8* %44, align 1
  %45 = getelementptr inbounds %"class.blink::ClientHintsPreferences", %"class.blink::ClientHintsPreferences"* %1, i64 0, i32 0, i32 0, i64 14
  %46 = load i8, i8* %45, align 1, !range !2
  %47 = getelementptr inbounds %"class.blink::ClientHintsPreferences", %"class.blink::ClientHintsPreferences"* %0, i64 0, i32 0, i32 0, i64 14
  store i8 %46, i8* %47, align 1
  %48 = getelementptr inbounds %"class.blink::ClientHintsPreferences", %"class.blink::ClientHintsPreferences"* %1, i64 0, i32 0, i32 0, i64 15
  %49 = load i8, i8* %48, align 1, !range !2
  %50 = getelementptr inbounds %"class.blink::ClientHintsPreferences", %"class.blink::ClientHintsPreferences"* %0, i64 0, i32 0, i32 0, i64 15
  store i8 %49, i8* %50, align 1
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @_ZN5blink22ClientHintsPreferences11CombineWithERKS0_(%"class.blink::ClientHintsPreferences"* nocapture, %"class.blink::ClientHintsPreferences"* nocapture readonly dereferenceable(16)) local_unnamed_addr #1 align 2 {
  %3 = getelementptr inbounds %"class.blink::ClientHintsPreferences", %"class.blink::ClientHintsPreferences"* %1, i64 0, i32 0, i32 0, i64 0
  %4 = load i8, i8* %3, align 1, !range !2
  %5 = icmp eq i8 %4, 0
  br i1 %5, label %8, label %6

6:                                                ; preds = %2
  %7 = getelementptr inbounds %"class.blink::ClientHintsPreferences", %"class.blink::ClientHintsPreferences"* %0, i64 0, i32 0, i32 0, i64 0
  store i8 1, i8* %7, align 1
  br label %8

8:                                                ; preds = %2, %6
  %9 = getelementptr inbounds %"class.blink::ClientHintsPreferences", %"class.blink::ClientHintsPreferences"* %1, i64 0, i32 0, i32 0, i64 1
  %10 = load i8, i8* %9, align 1, !range !2
  %11 = icmp eq i8 %10, 0
  br i1 %11, label %14, label %12

12:                                               ; preds = %8
  %13 = getelementptr inbounds %"class.blink::ClientHintsPreferences", %"class.blink::ClientHintsPreferences"* %0, i64 0, i32 0, i32 0, i64 1
  store i8 1, i8* %13, align 1
  br label %14

14:                                               ; preds = %12, %8
  %15 = getelementptr inbounds %"class.blink::ClientHintsPreferences", %"class.blink::ClientHintsPreferences"* %1, i64 0, i32 0, i32 0, i64 2
  %16 = load i8, i8* %15, align 1, !range !2
  %17 = icmp eq i8 %16, 0
  br i1 %17, label %20, label %18

18:                                               ; preds = %14
  %19 = getelementptr inbounds %"class.blink::ClientHintsPreferences", %"class.blink::ClientHintsPreferences"* %0, i64 0, i32 0, i32 0, i64 2
  store i8 1, i8* %19, align 1
  br label %20

20:                                               ; preds = %18, %14
  %21 = getelementptr inbounds %"class.blink::ClientHintsPreferences", %"class.blink::ClientHintsPreferences"* %1, i64 0, i32 0, i32 0, i64 3
  %22 = load i8, i8* %21, align 1, !range !2
  %23 = icmp eq i8 %22, 0
  br i1 %23, label %26, label %24

24:                                               ; preds = %20
  %25 = getelementptr inbounds %"class.blink::ClientHintsPreferences", %"class.blink::ClientHintsPreferences"* %0, i64 0, i32 0, i32 0, i64 3
  store i8 1, i8* %25, align 1
  br label %26

26:                                               ; preds = %24, %20
  %27 = getelementptr inbounds %"class.blink::ClientHintsPreferences", %"class.blink::ClientHintsPreferences"* %1, i64 0, i32 0, i32 0, i64 4
  %28 = load i8, i8* %27, align 1, !range !2
  %29 = icmp eq i8 %28, 0
  br i1 %29, label %32, label %30

30:                                               ; preds = %26
  %31 = getelementptr inbounds %"class.blink::ClientHintsPreferences", %"class.blink::ClientHintsPreferences"* %0, i64 0, i32 0, i32 0, i64 4
  store i8 1, i8* %31, align 1
  br label %32

32:                                               ; preds = %30, %26
  %33 = getelementptr inbounds %"class.blink::ClientHintsPreferences", %"class.blink::ClientHintsPreferences"* %1, i64 0, i32 0, i32 0, i64 5
  %34 = load i8, i8* %33, align 1, !range !2
  %35 = icmp eq i8 %34, 0
  br i1 %35, label %38, label %36

36:                                               ; preds = %32
  %37 = getelementptr inbounds %"class.blink::ClientHintsPreferences", %"class.blink::ClientHintsPreferences"* %0, i64 0, i32 0, i32 0, i64 5
  store i8 1, i8* %37, align 1
  br label %38

38:                                               ; preds = %36, %32
  %39 = getelementptr inbounds %"class.blink::ClientHintsPreferences", %"class.blink::ClientHintsPreferences"* %1, i64 0, i32 0, i32 0, i64 6
  %40 = load i8, i8* %39, align 1, !range !2
  %41 = icmp eq i8 %40, 0
  br i1 %41, label %44, label %42

42:                                               ; preds = %38
  %43 = getelementptr inbounds %"class.blink::ClientHintsPreferences", %"class.blink::ClientHintsPreferences"* %0, i64 0, i32 0, i32 0, i64 6
  store i8 1, i8* %43, align 1
  br label %44

44:                                               ; preds = %42, %38
  %45 = getelementptr inbounds %"class.blink::ClientHintsPreferences", %"class.blink::ClientHintsPreferences"* %1, i64 0, i32 0, i32 0, i64 7
  %46 = load i8, i8* %45, align 1, !range !2
  %47 = icmp eq i8 %46, 0
  br i1 %47, label %50, label %48

48:                                               ; preds = %44
  %49 = getelementptr inbounds %"class.blink::ClientHintsPreferences", %"class.blink::ClientHintsPreferences"* %0, i64 0, i32 0, i32 0, i64 7
  store i8 1, i8* %49, align 1
  br label %50

50:                                               ; preds = %48, %44
  %51 = getelementptr inbounds %"class.blink::ClientHintsPreferences", %"class.blink::ClientHintsPreferences"* %1, i64 0, i32 0, i32 0, i64 8
  %52 = load i8, i8* %51, align 1, !range !2
  %53 = icmp eq i8 %52, 0
  br i1 %53, label %56, label %54

54:                                               ; preds = %50
  %55 = getelementptr inbounds %"class.blink::ClientHintsPreferences", %"class.blink::ClientHintsPreferences"* %0, i64 0, i32 0, i32 0, i64 8
  store i8 1, i8* %55, align 1
  br label %56

56:                                               ; preds = %54, %50
  %57 = getelementptr inbounds %"class.blink::ClientHintsPreferences", %"class.blink::ClientHintsPreferences"* %1, i64 0, i32 0, i32 0, i64 9
  %58 = load i8, i8* %57, align 1, !range !2
  %59 = icmp eq i8 %58, 0
  br i1 %59, label %62, label %60

60:                                               ; preds = %56
  %61 = getelementptr inbounds %"class.blink::ClientHintsPreferences", %"class.blink::ClientHintsPreferences"* %0, i64 0, i32 0, i32 0, i64 9
  store i8 1, i8* %61, align 1
  br label %62

62:                                               ; preds = %60, %56
  %63 = getelementptr inbounds %"class.blink::ClientHintsPreferences", %"class.blink::ClientHintsPreferences"* %1, i64 0, i32 0, i32 0, i64 10
  %64 = load i8, i8* %63, align 1, !range !2
  %65 = icmp eq i8 %64, 0
  br i1 %65, label %68, label %66

66:                                               ; preds = %62
  %67 = getelementptr inbounds %"class.blink::ClientHintsPreferences", %"class.blink::ClientHintsPreferences"* %0, i64 0, i32 0, i32 0, i64 10
  store i8 1, i8* %67, align 1
  br label %68

68:                                               ; preds = %66, %62
  %69 = getelementptr inbounds %"class.blink::ClientHintsPreferences", %"class.blink::ClientHintsPreferences"* %1, i64 0, i32 0, i32 0, i64 11
  %70 = load i8, i8* %69, align 1, !range !2
  %71 = icmp eq i8 %70, 0
  br i1 %71, label %74, label %72

72:                                               ; preds = %68
  %73 = getelementptr inbounds %"class.blink::ClientHintsPreferences", %"class.blink::ClientHintsPreferences"* %0, i64 0, i32 0, i32 0, i64 11
  store i8 1, i8* %73, align 1
  br label %74

74:                                               ; preds = %72, %68
  %75 = getelementptr inbounds %"class.blink::ClientHintsPreferences", %"class.blink::ClientHintsPreferences"* %1, i64 0, i32 0, i32 0, i64 12
  %76 = load i8, i8* %75, align 1, !range !2
  %77 = icmp eq i8 %76, 0
  br i1 %77, label %80, label %78

78:                                               ; preds = %74
  %79 = getelementptr inbounds %"class.blink::ClientHintsPreferences", %"class.blink::ClientHintsPreferences"* %0, i64 0, i32 0, i32 0, i64 12
  store i8 1, i8* %79, align 1
  br label %80

80:                                               ; preds = %78, %74
  %81 = getelementptr inbounds %"class.blink::ClientHintsPreferences", %"class.blink::ClientHintsPreferences"* %1, i64 0, i32 0, i32 0, i64 13
  %82 = load i8, i8* %81, align 1, !range !2
  %83 = icmp eq i8 %82, 0
  br i1 %83, label %86, label %84

84:                                               ; preds = %80
  %85 = getelementptr inbounds %"class.blink::ClientHintsPreferences", %"class.blink::ClientHintsPreferences"* %0, i64 0, i32 0, i32 0, i64 13
  store i8 1, i8* %85, align 1
  br label %86

86:                                               ; preds = %84, %80
  %87 = getelementptr inbounds %"class.blink::ClientHintsPreferences", %"class.blink::ClientHintsPreferences"* %1, i64 0, i32 0, i32 0, i64 14
  %88 = load i8, i8* %87, align 1, !range !2
  %89 = icmp eq i8 %88, 0
  br i1 %89, label %92, label %90

90:                                               ; preds = %86
  %91 = getelementptr inbounds %"class.blink::ClientHintsPreferences", %"class.blink::ClientHintsPreferences"* %0, i64 0, i32 0, i32 0, i64 14
  store i8 1, i8* %91, align 1
  br label %92

92:                                               ; preds = %90, %86
  %93 = getelementptr inbounds %"class.blink::ClientHintsPreferences", %"class.blink::ClientHintsPreferences"* %1, i64 0, i32 0, i32 0, i64 15
  %94 = load i8, i8* %93, align 1, !range !2
  %95 = icmp eq i8 %94, 0
  br i1 %95, label %98, label %96

96:                                               ; preds = %92
  %97 = getelementptr inbounds %"class.blink::ClientHintsPreferences", %"class.blink::ClientHintsPreferences"* %0, i64 0, i32 0, i32 0, i64 15
  store i8 1, i8* %97, align 1
  br label %98

98:                                               ; preds = %96, %92
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN5blink22ClientHintsPreferences26UserAgentClientHintEnabledEv() local_unnamed_addr #0 align 2 {
  %1 = load i8, i8* @_ZN5blink26RuntimeEnabledFeaturesBase34is_user_agent_client_hint_enabled_E, align 1, !range !2
  %2 = icmp eq i8 %1, 0
  br i1 %2, label %7, label %3

3:                                                ; preds = %0
  %4 = tail call %"class.base::CommandLine"* @_ZN4base11CommandLine17ForCurrentProcessEv() #7
  %5 = tail call zeroext i1 @_ZNK4base11CommandLine9HasSwitchEPKc(%"class.base::CommandLine"* %4, i8* getelementptr inbounds ([0 x i8], [0 x i8]* @_ZN5blink8switches27kUserAgentClientHintDisableE, i64 0, i64 0)) #7
  %6 = xor i1 %5, true
  br label %7

7:                                                ; preds = %0, %3
  %8 = phi i1 [ false, %0 ], [ %6, %3 ]
  ret i1 %8
}

declare %"class.base::CommandLine"* @_ZN4base11CommandLine17ForCurrentProcessEv() local_unnamed_addr #3

declare zeroext i1 @_ZNK4base11CommandLine9HasSwitchEPKc(%"class.base::CommandLine"*, i8*) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink22ClientHintsPreferences27UpdateFromHttpEquivAcceptCHERKN3WTF6StringERKNS_4KURLEPNS0_7ContextE(%"class.blink::ClientHintsPreferences"* nocapture, %"class.WTF::String"* dereferenceable(8), %"class.blink::KURL"* dereferenceable(112), %"class.blink::ClientHintsPreferences::Context"*) local_unnamed_addr #0 align 2 {
  %5 = alloca %"class.absl::optional", align 8
  %6 = alloca %"class.absl::optional", align 8
  %7 = alloca %"class.std::__1::basic_string", align 8
  %8 = tail call zeroext i1 @_ZN5blink22ClientHintsPreferences20IsClientHintsAllowedERKNS_4KURLE(%"class.blink::KURL"* dereferenceable(112) %2)
  br i1 %8, label %9, label %159

9:                                                ; preds = %4
  %10 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %1, i64 0, i32 0, i32 0
  %11 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %10, align 8
  %12 = icmp eq %"class.WTF::StringImpl"* %11, null
  br i1 %12, label %24, label %13

13:                                               ; preds = %9
  %14 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %11, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %15 = load atomic i32, i32* %14 monotonic, align 4
  %16 = and i32 %15, 8
  %17 = icmp eq i32 %16, 0
  br i1 %17, label %18, label %20

18:                                               ; preds = %13
  %19 = tail call i32 @_ZNK3WTF10StringImpl17ComputeASCIIFlagsEv(%"class.WTF::StringImpl"* nonnull %11) #7
  br label %20

20:                                               ; preds = %13, %18
  %21 = phi i32 [ %19, %18 ], [ %15, %13 ]
  %22 = and i32 %21, 16
  %23 = icmp eq i32 %22, 0
  br i1 %23, label %159, label %24

24:                                               ; preds = %20, %9
  %25 = getelementptr inbounds %"class.absl::optional", %"class.absl::optional"* %5, i64 0, i32 0, i32 0, i32 0, i32 0
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %25) #7
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %25, i8 -86, i64 32, i1 false)
  %26 = bitcast %"class.std::__1::basic_string"* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %26) #7
  call void @_ZNK3WTF6String6Latin1Ev(%"class.std::__1::basic_string"* nonnull sret %7, %"class.WTF::String"* %1) #7
  call void @_ZN7network22ParseClientHintsHeaderERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE(%"class.absl::optional"* nonnull sret %6, %"class.std::__1::basic_string"* nonnull dereferenceable(24) %7) #7
  %27 = load i8, i8* @_ZN5blink26RuntimeEnabledFeaturesBase35is_lang_client_hint_header_enabled_E, align 1, !range !2
  %28 = icmp ne i8 %27, 0
  %29 = load i8, i8* @_ZN5blink26RuntimeEnabledFeaturesBase34is_user_agent_client_hint_enabled_E, align 1, !range !2
  %30 = icmp eq i8 %29, 0
  br i1 %30, label %35, label %31

31:                                               ; preds = %24
  %32 = call %"class.base::CommandLine"* @_ZN4base11CommandLine17ForCurrentProcessEv() #7
  %33 = call zeroext i1 @_ZNK4base11CommandLine9HasSwitchEPKc(%"class.base::CommandLine"* %32, i8* getelementptr inbounds ([0 x i8], [0 x i8]* @_ZN5blink8switches27kUserAgentClientHintDisableE, i64 0, i64 0)) #7
  %34 = xor i1 %33, true
  br label %35

35:                                               ; preds = %24, %31
  %36 = phi i1 [ false, %24 ], [ %34, %31 ]
  %37 = load i8, i8* @_ZN5blink26RuntimeEnabledFeaturesBase51is_prefers_color_scheme_client_hint_header_enabled_E, align 1, !range !2
  %38 = icmp ne i8 %37, 0
  call void @_ZN5blink14FilterAcceptCHEN4absl8optionalINSt3__16vectorIN7network5mojom18WebClientHintsTypeENS2_9allocatorIS6_EEEEEEbbb(%"class.absl::optional"* nonnull sret %5, %"class.absl::optional"* nonnull %6, i1 zeroext %28, i1 zeroext %36, i1 zeroext %38) #7
  %39 = getelementptr inbounds %"class.absl::optional", %"class.absl::optional"* %6, i64 0, i32 0, i32 0, i32 0, i32 0
  %40 = load i8, i8* %39, align 8, !range !2
  %41 = icmp eq i8 %40, 0
  br i1 %41, label %52, label %42

42:                                               ; preds = %35
  %43 = getelementptr inbounds %"class.absl::optional", %"class.absl::optional"* %6, i64 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 0
  %44 = load i32*, i32** %43, align 8
  %45 = icmp eq i32* %44, null
  br i1 %45, label %51, label %46

46:                                               ; preds = %42
  %47 = ptrtoint i32* %44 to i64
  %48 = getelementptr inbounds %"class.absl::optional", %"class.absl::optional"* %6, i64 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 1
  %49 = bitcast i32** %48 to i64*
  store i64 %47, i64* %49, align 8
  %50 = bitcast i32* %44 to i8*
  call void @_ZdlPv(i8* %50) #8
  br label %51

51:                                               ; preds = %46, %42
  store i8 0, i8* %39, align 8
  br label %52

52:                                               ; preds = %35, %51
  %53 = bitcast %"class.std::__1::basic_string"* %7 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %54 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %53, i64 0, i32 1, i32 0
  %55 = load i8, i8* %54, align 1
  %56 = icmp slt i8 %55, 0
  br i1 %56, label %57, label %60

57:                                               ; preds = %52
  %58 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %7, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %59 = load i8*, i8** %58, align 8
  call void @_ZdlPv(i8* %59) #8
  br label %60

60:                                               ; preds = %52, %57
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %26) #7
  %61 = load i8, i8* %25, align 8, !range !2
  %62 = icmp eq i8 %61, 0
  br i1 %62, label %158, label %63

63:                                               ; preds = %60
  %64 = getelementptr inbounds %"class.absl::optional", %"class.absl::optional"* %5, i64 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 0
  %65 = load i32*, i32** %64, align 8
  %66 = getelementptr inbounds %"class.absl::optional", %"class.absl::optional"* %5, i64 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 1
  %67 = load i32*, i32** %66, align 8
  %68 = icmp eq i32* %65, %67
  br i1 %68, label %90, label %69

69:                                               ; preds = %63
  %70 = ptrtoint i32* %65 to i64
  %71 = getelementptr i32, i32* %67, i64 -1
  %72 = ptrtoint i32* %71 to i64
  %73 = sub i64 %72, %70
  %74 = lshr i64 %73, 2
  %75 = add nuw nsw i64 %74, 1
  %76 = and i64 %75, 7
  %77 = icmp eq i64 %76, 0
  br i1 %77, label %87, label %78

78:                                               ; preds = %69, %78
  %79 = phi i32* [ %84, %78 ], [ %65, %69 ]
  %80 = phi i64 [ %85, %78 ], [ %76, %69 ]
  %81 = load i32, i32* %79, align 4
  %82 = sext i32 %81 to i64
  %83 = getelementptr inbounds %"class.blink::ClientHintsPreferences", %"class.blink::ClientHintsPreferences"* %0, i64 0, i32 0, i32 0, i64 %82
  store i8 1, i8* %83, align 1
  %84 = getelementptr inbounds i32, i32* %79, i64 1
  %85 = add i64 %80, -1
  %86 = icmp eq i64 %85, 0
  br i1 %86, label %87, label %78, !llvm.loop !3

87:                                               ; preds = %78, %69
  %88 = phi i32* [ %65, %69 ], [ %84, %78 ]
  %89 = icmp ult i64 %73, 28
  br i1 %89, label %90, label %94

90:                                               ; preds = %87, %94, %63
  %91 = icmp eq %"class.blink::ClientHintsPreferences::Context"* %3, null
  br i1 %91, label %145, label %92

92:                                               ; preds = %90
  %93 = bitcast %"class.blink::ClientHintsPreferences::Context"* %3 to void (%"class.blink::ClientHintsPreferences::Context"*, i32)***
  br label %129

94:                                               ; preds = %87, %94
  %95 = phi i32* [ %127, %94 ], [ %88, %87 ]
  %96 = load i32, i32* %95, align 4
  %97 = sext i32 %96 to i64
  %98 = getelementptr inbounds %"class.blink::ClientHintsPreferences", %"class.blink::ClientHintsPreferences"* %0, i64 0, i32 0, i32 0, i64 %97
  store i8 1, i8* %98, align 1
  %99 = getelementptr inbounds i32, i32* %95, i64 1
  %100 = load i32, i32* %99, align 4
  %101 = sext i32 %100 to i64
  %102 = getelementptr inbounds %"class.blink::ClientHintsPreferences", %"class.blink::ClientHintsPreferences"* %0, i64 0, i32 0, i32 0, i64 %101
  store i8 1, i8* %102, align 1
  %103 = getelementptr inbounds i32, i32* %95, i64 2
  %104 = load i32, i32* %103, align 4
  %105 = sext i32 %104 to i64
  %106 = getelementptr inbounds %"class.blink::ClientHintsPreferences", %"class.blink::ClientHintsPreferences"* %0, i64 0, i32 0, i32 0, i64 %105
  store i8 1, i8* %106, align 1
  %107 = getelementptr inbounds i32, i32* %95, i64 3
  %108 = load i32, i32* %107, align 4
  %109 = sext i32 %108 to i64
  %110 = getelementptr inbounds %"class.blink::ClientHintsPreferences", %"class.blink::ClientHintsPreferences"* %0, i64 0, i32 0, i32 0, i64 %109
  store i8 1, i8* %110, align 1
  %111 = getelementptr inbounds i32, i32* %95, i64 4
  %112 = load i32, i32* %111, align 4
  %113 = sext i32 %112 to i64
  %114 = getelementptr inbounds %"class.blink::ClientHintsPreferences", %"class.blink::ClientHintsPreferences"* %0, i64 0, i32 0, i32 0, i64 %113
  store i8 1, i8* %114, align 1
  %115 = getelementptr inbounds i32, i32* %95, i64 5
  %116 = load i32, i32* %115, align 4
  %117 = sext i32 %116 to i64
  %118 = getelementptr inbounds %"class.blink::ClientHintsPreferences", %"class.blink::ClientHintsPreferences"* %0, i64 0, i32 0, i32 0, i64 %117
  store i8 1, i8* %118, align 1
  %119 = getelementptr inbounds i32, i32* %95, i64 6
  %120 = load i32, i32* %119, align 4
  %121 = sext i32 %120 to i64
  %122 = getelementptr inbounds %"class.blink::ClientHintsPreferences", %"class.blink::ClientHintsPreferences"* %0, i64 0, i32 0, i32 0, i64 %121
  store i8 1, i8* %122, align 1
  %123 = getelementptr inbounds i32, i32* %95, i64 7
  %124 = load i32, i32* %123, align 4
  %125 = sext i32 %124 to i64
  %126 = getelementptr inbounds %"class.blink::ClientHintsPreferences", %"class.blink::ClientHintsPreferences"* %0, i64 0, i32 0, i32 0, i64 %125
  store i8 1, i8* %126, align 1
  %127 = getelementptr inbounds i32, i32* %95, i64 8
  %128 = icmp eq i32* %127, %67
  br i1 %128, label %90, label %94

129:                                              ; preds = %140, %92
  %130 = phi i64 [ 0, %92 ], [ %141, %140 ]
  %131 = shl i64 %130, 32
  %132 = ashr exact i64 %131, 32
  %133 = getelementptr inbounds %"class.blink::ClientHintsPreferences", %"class.blink::ClientHintsPreferences"* %0, i64 0, i32 0, i32 0, i64 %132
  %134 = load i8, i8* %133, align 1, !range !2
  %135 = icmp eq i8 %134, 0
  br i1 %135, label %140, label %136

136:                                              ; preds = %129
  %137 = trunc i64 %130 to i32
  %138 = load void (%"class.blink::ClientHintsPreferences::Context"*, i32)**, void (%"class.blink::ClientHintsPreferences::Context"*, i32)*** %93, align 8
  %139 = load void (%"class.blink::ClientHintsPreferences::Context"*, i32)*, void (%"class.blink::ClientHintsPreferences::Context"*, i32)** %138, align 8
  call void %139(%"class.blink::ClientHintsPreferences::Context"* nonnull %3, i32 %137) #7
  br label %140

140:                                              ; preds = %129, %136
  %141 = add nuw nsw i64 %130, 1
  %142 = icmp eq i64 %141, 16
  br i1 %142, label %143, label %129

143:                                              ; preds = %140
  %144 = load i8, i8* %25, align 8, !range !2
  br label %145

145:                                              ; preds = %143, %90
  %146 = phi i8 [ %144, %143 ], [ %61, %90 ]
  %147 = icmp eq i8 %146, 0
  br i1 %147, label %158, label %148

148:                                              ; preds = %145
  %149 = getelementptr inbounds %"class.absl::optional", %"class.absl::optional"* %5, i64 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 0
  %150 = load i32*, i32** %149, align 8
  %151 = icmp eq i32* %150, null
  br i1 %151, label %157, label %152

152:                                              ; preds = %148
  %153 = ptrtoint i32* %150 to i64
  %154 = getelementptr inbounds %"class.absl::optional", %"class.absl::optional"* %5, i64 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 1
  %155 = bitcast i32** %154 to i64*
  store i64 %153, i64* %155, align 8
  %156 = bitcast i32* %150 to i8*
  call void @_ZdlPv(i8* %156) #8
  br label %157

157:                                              ; preds = %152, %148
  store i8 0, i8* %25, align 8
  br label %158

158:                                              ; preds = %60, %145, %157
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %25) #7
  br label %159

159:                                              ; preds = %20, %4, %158
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN5blink22ClientHintsPreferences20IsClientHintsAllowedERKNS_4KURLE(%"class.blink::KURL"* dereferenceable(112)) local_unnamed_addr #0 align 2 {
  %2 = alloca %"class.WTF::StringView", align 8
  %3 = alloca %"class.WTF::StringView", align 8
  %4 = alloca %"class.url::Origin", align 8
  %5 = alloca %class.GURL, align 8
  %6 = load i64, i64* bitcast (%"class.WTF::StringImpl"** @_ZN3WTF10StringImpl6empty_E to i64*), align 8
  %7 = bitcast %"class.WTF::StringView"* %2 to i64*
  store i64 %6, i64* %7, align 8
  %8 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %2, i64 0, i32 1
  store i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i64 0, i64 0), i8** %8, align 8
  %9 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %2, i64 0, i32 2
  store i32 4, i32* %9, align 8
  %10 = tail call zeroext i1 @_ZNK5blink4KURL10ProtocolIsEN3WTF10StringViewE(%"class.blink::KURL"* %0, %"class.WTF::StringView"* nonnull byval(%"class.WTF::StringView") align 8 %2) #7
  br i1 %10, label %17, label %11

11:                                               ; preds = %1
  %12 = load i64, i64* bitcast (%"class.WTF::StringImpl"** @_ZN3WTF10StringImpl6empty_E to i64*), align 8
  %13 = bitcast %"class.WTF::StringView"* %3 to i64*
  store i64 %12, i64* %13, align 8
  %14 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %3, i64 0, i32 1
  store i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.1, i64 0, i64 0), i8** %14, align 8
  %15 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %3, i64 0, i32 2
  store i32 5, i32* %15, align 8
  %16 = tail call zeroext i1 @_ZNK5blink4KURL10ProtocolIsEN3WTF10StringViewE(%"class.blink::KURL"* %0, %"class.WTF::StringView"* nonnull byval(%"class.WTF::StringView") align 8 %3) #7
  br i1 %16, label %17, label %21

17:                                               ; preds = %1, %11
  %18 = bitcast %"class.url::Origin"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 80, i8* nonnull %18) #7
  %19 = bitcast %class.GURL* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 120, i8* nonnull %19) #7
  call void @_ZNK5blink4KURLcv4GURLEv(%class.GURL* nonnull sret %5, %"class.blink::KURL"* %0) #7
  call void @_ZN3url6Origin6CreateERK4GURL(%"class.url::Origin"* nonnull sret %4, %class.GURL* nonnull dereferenceable(120) %5) #7
  %20 = call zeroext i1 @_ZN7network30IsOriginPotentiallyTrustworthyERKN3url6OriginE(%"class.url::Origin"* nonnull dereferenceable(80) %4) #7
  call void @_ZN3url6OriginD1Ev(%"class.url::Origin"* nonnull %4) #7
  call void @_ZN4GURLD1Ev(%class.GURL* nonnull %5) #7
  call void @llvm.lifetime.end.p0i8(i64 120, i8* nonnull %19) #7
  call void @llvm.lifetime.end.p0i8(i64 80, i8* nonnull %18) #7
  br label %21

21:                                               ; preds = %11, %17
  %22 = phi i1 [ %20, %17 ], [ false, %11 ]
  ret i1 %22
}

declare void @_ZN5blink14FilterAcceptCHEN4absl8optionalINSt3__16vectorIN7network5mojom18WebClientHintsTypeENS2_9allocatorIS6_EEEEEEbbb(%"class.absl::optional"* sret, %"class.absl::optional"*, i1 zeroext, i1 zeroext, i1 zeroext) local_unnamed_addr #3

declare void @_ZN7network22ParseClientHintsHeaderERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE(%"class.absl::optional"* sret, %"class.std::__1::basic_string"* dereferenceable(24)) local_unnamed_addr #3

declare void @_ZNK3WTF6String6Latin1Ev(%"class.std::__1::basic_string"* sret, %"class.WTF::String"*) local_unnamed_addr #3

declare zeroext i1 @_ZNK5blink4KURL10ProtocolIsEN3WTF10StringViewE(%"class.blink::KURL"*, %"class.WTF::StringView"* byval(%"class.WTF::StringView") align 8) local_unnamed_addr #3

declare zeroext i1 @_ZN7network30IsOriginPotentiallyTrustworthyERKN3url6OriginE(%"class.url::Origin"* dereferenceable(80)) local_unnamed_addr #3

declare void @_ZN3url6Origin6CreateERK4GURL(%"class.url::Origin"* sret, %class.GURL* dereferenceable(120)) local_unnamed_addr #3

declare void @_ZNK5blink4KURLcv4GURLEv(%class.GURL* sret, %"class.blink::KURL"*) local_unnamed_addr #3

; Function Attrs: nounwind
declare void @_ZN3url6OriginD1Ev(%"class.url::Origin"*) unnamed_addr #4

; Function Attrs: nounwind
declare void @_ZN4GURLD1Ev(%class.GURL*) unnamed_addr #4

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden { i64, i64 } @_ZNK5blink22ClientHintsPreferences24GetWebEnabledClientHintsEv(%"class.blink::ClientHintsPreferences"* nocapture readonly) local_unnamed_addr #5 align 2 {
  %2 = bitcast %"class.blink::ClientHintsPreferences"* %0 to i64*
  %3 = load i64, i64* %2, align 1
  %4 = getelementptr inbounds %"class.blink::ClientHintsPreferences", %"class.blink::ClientHintsPreferences"* %0, i64 0, i32 0, i32 0, i64 8
  %5 = bitcast i8* %4 to i64*
  %6 = load i64, i64* %5, align 1
  %7 = insertvalue { i64, i64 } undef, i64 %3, 0
  %8 = insertvalue { i64, i64 } %7, i64 %6, 1
  ret { i64, i64 } %8
}

declare i32 @_ZNK3WTF10StringImpl17ComputeASCIIFlagsEv(%"class.WTF::StringImpl"*) local_unnamed_addr #3

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #6

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #2

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nofree norecurse nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind }
attributes #3 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { norecurse nounwind readonly ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { nounwind }
attributes #8 = { builtin nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{i8 0, i8 2}
!3 = distinct !{!3, !4}
!4 = !{!"llvm.loop.unroll.disable"}
