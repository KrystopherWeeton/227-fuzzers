; ModuleID = '../../chrome/browser/vr/vr_geometry_util.cc'
source_filename = "../../chrome/browser/vr/vr_geometry_util.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.gfx::Transform" = type { %class.SkMatrix44 }
%class.SkMatrix44 = type <{ [4 x [4 x float]], i8, [3 x i8] }>
%"class.gfx::Size" = type { i32, i32 }
%"class.gfx::RectF" = type { %"class.gfx::PointF", %"class.gfx::SizeF" }
%"class.gfx::PointF" = type { float, float }
%"class.gfx::SizeF" = type { float, float }
%"class.gfx::Point3F" = type { float, float, float }

@__const._ZN2vr19CalculateScreenSizeERKN3gfx9TransformEfRKNS0_5SizeFE.model_view_proj_matrix = private unnamed_addr constant %"class.gfx::Transform" { %class.SkMatrix44 <{ [4 x [4 x float]] [[4 x float] [float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000], [4 x float] [float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000], [4 x float] [float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000], [4 x float] [float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000]], i8 -86, [3 x i8] c"\AA\AA\AA" }> }, align 4
@constinit = private unnamed_addr constant [4 x [4 x float]] [[4 x float] [float 1.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00], [4 x float] [float 0.000000e+00, float 1.000000e+00, float 0.000000e+00, float 0.000000e+00], [4 x float] [float 0.000000e+00, float 0.000000e+00, float 1.000000e+00, float 0.000000e+00], [4 x float] [float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 1.000000e+00]], align 4

; Function Attrs: nounwind readonly ssp uwtable
define hidden { i64, i64 } @_ZN2vr23CalculatePixelSpaceRectERKN3gfx4SizeERKNS0_5RectFE(%"class.gfx::Size"* nocapture readonly dereferenceable(8), %"class.gfx::RectF"* nocapture readonly dereferenceable(16)) local_unnamed_addr #0 {
  %3 = getelementptr inbounds %"class.gfx::Size", %"class.gfx::Size"* %0, i64 0, i32 0
  %4 = load i32, i32* %3, align 4
  %5 = sitofp i32 %4 to float
  %6 = getelementptr inbounds %"class.gfx::Size", %"class.gfx::Size"* %0, i64 0, i32 1
  %7 = load i32, i32* %6, align 4
  %8 = sitofp i32 %7 to float
  %9 = getelementptr inbounds %"class.gfx::RectF", %"class.gfx::RectF"* %1, i64 0, i32 0, i32 0
  %10 = load float, float* %9, align 4
  %11 = fmul float %10, %5
  %12 = getelementptr inbounds %"class.gfx::RectF", %"class.gfx::RectF"* %1, i64 0, i32 0, i32 1
  %13 = load float, float* %12, align 4
  %14 = fmul float %13, %8
  %15 = getelementptr inbounds %"class.gfx::RectF", %"class.gfx::RectF"* %1, i64 0, i32 1, i32 0
  %16 = load float, float* %15, align 4
  %17 = fmul float %16, %5
  %18 = getelementptr inbounds %"class.gfx::RectF", %"class.gfx::RectF"* %1, i64 0, i32 1, i32 1
  %19 = load float, float* %18, align 4
  %20 = fmul float %19, %8
  %21 = fcmp ogt float %17, 0x3EB0000000000000
  %22 = select i1 %21, float %17, float 0.000000e+00
  %23 = fcmp ogt float %20, 0x3EB0000000000000
  %24 = select i1 %23, float %20, float 0.000000e+00
  %25 = fptosi float %11 to i32
  %26 = fptosi float %14 to i32
  %27 = fptosi float %22 to i32
  %28 = fptosi float %24 to i32
  %29 = icmp sgt i32 %25, 0
  %30 = icmp sgt i32 %27, 0
  %31 = and i1 %29, %30
  %32 = sub nuw nsw i32 2147483647, %25
  %33 = icmp ult i32 %32, %27
  %34 = and i1 %33, %31
  %35 = select i1 %34, i32 %32, i32 %27
  %36 = icmp sgt i32 %26, 0
  %37 = icmp sgt i32 %28, 0
  %38 = and i1 %36, %37
  %39 = sub nuw nsw i32 2147483647, %26
  %40 = icmp ult i32 %39, %28
  %41 = and i1 %40, %38
  %42 = select i1 %41, i32 %39, i32 %28
  %43 = icmp sgt i32 %35, 0
  %44 = select i1 %43, i32 %35, i32 0
  %45 = icmp sgt i32 %42, 0
  %46 = select i1 %45, i32 %42, i32 0
  %47 = zext i32 %26 to i64
  %48 = shl nuw i64 %47, 32
  %49 = zext i32 %25 to i64
  %50 = or i64 %48, %49
  %51 = insertvalue { i64, i64 } undef, i64 %50, 0
  %52 = zext i32 %46 to i64
  %53 = shl nuw nsw i64 %52, 32
  %54 = zext i32 %44 to i64
  %55 = or i64 %53, %54
  %56 = insertvalue { i64, i64 } %51, i64 %55, 1
  ret { i64, i64 } %56
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nounwind ssp uwtable
define hidden <2 x float> @_ZN2vr19CalculateScreenSizeERKN3gfx9TransformEfRKNS0_5SizeFE(%"class.gfx::Transform"* dereferenceable(68), float, %"class.gfx::SizeF"* nocapture readonly dereferenceable(8)) local_unnamed_addr #2 {
  %4 = alloca %"class.gfx::Transform", align 4
  %5 = alloca %"class.gfx::Transform", align 4
  %6 = alloca %"class.gfx::Transform", align 4
  %7 = alloca %"class.gfx::Transform", align 4
  %8 = alloca %"class.gfx::Point3F", align 8
  %9 = alloca %"class.gfx::Point3F", align 8
  %10 = bitcast %"class.gfx::Transform"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 68, i8* nonnull %10) #5
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %10, i8* align 4 bitcast (%"class.gfx::Transform"* @__const._ZN2vr19CalculateScreenSizeERKN3gfx9TransformEfRKNS0_5SizeFE.model_view_proj_matrix to i8*), i64 68, i1 false)
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %10, i8* align 4 bitcast ([4 x [4 x float]]* @constinit to i8*), i64 64, i1 false) #5
  %11 = getelementptr inbounds %"class.gfx::Transform", %"class.gfx::Transform"* %4, i64 0, i32 0, i32 1
  store i8 0, i8* %11, align 4
  %12 = getelementptr inbounds %"class.gfx::SizeF", %"class.gfx::SizeF"* %2, i64 0, i32 0
  %13 = load float, float* %12, align 4
  %14 = getelementptr inbounds %"class.gfx::SizeF", %"class.gfx::SizeF"* %2, i64 0, i32 1
  %15 = load float, float* %14, align 4
  call void @_ZN3gfx9Transform5ScaleEff(%"class.gfx::Transform"* nonnull %4, float %13, float %15) #5
  %16 = bitcast %"class.gfx::Transform"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 68, i8* nonnull %16) #5
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %16, i8* align 4 bitcast (%"class.gfx::Transform"* @__const._ZN2vr19CalculateScreenSizeERKN3gfx9TransformEfRKNS0_5SizeFE.model_view_proj_matrix to i8*), i64 68, i1 false)
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %16, i8* align 4 bitcast ([4 x [4 x float]]* @constinit to i8*), i64 64, i1 false) #5
  %17 = getelementptr inbounds %"class.gfx::Transform", %"class.gfx::Transform"* %5, i64 0, i32 0, i32 1
  store i8 0, i8* %17, align 4
  %18 = fsub float -0.000000e+00, %1
  call void @_ZN3gfx9Transform11Translate3dEfff(%"class.gfx::Transform"* nonnull %5, float 0.000000e+00, float 0.000000e+00, float %18) #5
  %19 = bitcast %"class.gfx::Transform"* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 68, i8* nonnull %19) #5
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %19, i8* align 4 bitcast (%"class.gfx::Transform"* @__const._ZN2vr19CalculateScreenSizeERKN3gfx9TransformEfRKNS0_5SizeFE.model_view_proj_matrix to i8*), i64 68, i1 false)
  %20 = bitcast %"class.gfx::Transform"* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 68, i8* nonnull %20) #5
  %21 = getelementptr inbounds %"class.gfx::Transform", %"class.gfx::Transform"* %7, i64 0, i32 0
  %22 = getelementptr inbounds %"class.gfx::Transform", %"class.gfx::Transform"* %0, i64 0, i32 0
  %23 = getelementptr inbounds %"class.gfx::Transform", %"class.gfx::Transform"* %5, i64 0, i32 0
  call void @_ZN10SkMatrix449setConcatERKS_S1_(%class.SkMatrix44* nonnull %21, %class.SkMatrix44* dereferenceable(68) %22, %class.SkMatrix44* nonnull dereferenceable(68) %23) #5
  %24 = getelementptr inbounds %"class.gfx::Transform", %"class.gfx::Transform"* %6, i64 0, i32 0
  %25 = getelementptr inbounds %"class.gfx::Transform", %"class.gfx::Transform"* %4, i64 0, i32 0
  call void @_ZN10SkMatrix449setConcatERKS_S1_(%class.SkMatrix44* nonnull %24, %class.SkMatrix44* nonnull dereferenceable(68) %21, %class.SkMatrix44* nonnull dereferenceable(68) %25) #5
  call void @llvm.lifetime.end.p0i8(i64 68, i8* nonnull %20) #5
  %26 = bitcast %"class.gfx::Point3F"* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 12, i8* nonnull %26) #5
  %27 = getelementptr inbounds %"class.gfx::Point3F", %"class.gfx::Point3F"* %8, i64 0, i32 0
  %28 = getelementptr inbounds %"class.gfx::Point3F", %"class.gfx::Point3F"* %8, i64 0, i32 1
  %29 = getelementptr inbounds %"class.gfx::Point3F", %"class.gfx::Point3F"* %8, i64 0, i32 2
  store float 5.000000e-01, float* %27, align 8
  store float 5.000000e-01, float* %28, align 4
  store float 0.000000e+00, float* %29, align 8
  call void @_ZNK3gfx9Transform14TransformPointEPNS_7Point3FE(%"class.gfx::Transform"* nonnull %6, %"class.gfx::Point3F"* nonnull %8) #5
  %30 = bitcast %"class.gfx::Point3F"* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 12, i8* nonnull %30) #5
  %31 = getelementptr inbounds %"class.gfx::Point3F", %"class.gfx::Point3F"* %9, i64 0, i32 0
  %32 = getelementptr inbounds %"class.gfx::Point3F", %"class.gfx::Point3F"* %9, i64 0, i32 1
  %33 = getelementptr inbounds %"class.gfx::Point3F", %"class.gfx::Point3F"* %9, i64 0, i32 2
  store float -5.000000e-01, float* %31, align 8
  store float -5.000000e-01, float* %32, align 4
  store float 0.000000e+00, float* %33, align 8
  call void @_ZNK3gfx9Transform14TransformPointEPNS_7Point3FE(%"class.gfx::Transform"* nonnull %6, %"class.gfx::Point3F"* nonnull %9) #5
  %34 = bitcast %"class.gfx::Point3F"* %8 to <2 x float>*
  %35 = load <2 x float>, <2 x float>* %34, align 8
  %36 = call <2 x float> @llvm.fabs.v2f32(<2 x float> %35)
  %37 = bitcast %"class.gfx::Point3F"* %9 to <2 x float>*
  %38 = load <2 x float>, <2 x float>* %37, align 8
  %39 = call <2 x float> @llvm.fabs.v2f32(<2 x float> %38)
  %40 = fadd <2 x float> %36, %39
  %41 = fmul <2 x float> %40, <float 5.000000e-01, float 5.000000e-01>
  %42 = fcmp ogt <2 x float> %41, <float 0x3EB0000000000000, float 0x3EB0000000000000>
  %43 = select <2 x i1> %42, <2 x float> %41, <2 x float> zeroinitializer
  call void @llvm.lifetime.end.p0i8(i64 12, i8* nonnull %30) #5
  call void @llvm.lifetime.end.p0i8(i64 12, i8* nonnull %26) #5
  call void @llvm.lifetime.end.p0i8(i64 68, i8* nonnull %19) #5
  call void @llvm.lifetime.end.p0i8(i64 68, i8* nonnull %16) #5
  call void @llvm.lifetime.end.p0i8(i64 68, i8* nonnull %10) #5
  ret <2 x float> %43
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #1

declare void @_ZN3gfx9Transform5ScaleEff(%"class.gfx::Transform"*, float, float) local_unnamed_addr #3

declare void @_ZN3gfx9Transform11Translate3dEfff(%"class.gfx::Transform"*, float, float, float) local_unnamed_addr #3

declare void @_ZNK3gfx9Transform14TransformPointEPNS_7Point3FE(%"class.gfx::Transform"*, %"class.gfx::Point3F"*) local_unnamed_addr #3

declare void @_ZN10SkMatrix449setConcatERKS_S1_(%class.SkMatrix44*, %class.SkMatrix44* dereferenceable(68), %class.SkMatrix44* dereferenceable(68)) local_unnamed_addr #3

; Function Attrs: nounwind readnone speculatable
declare <2 x float> @llvm.fabs.v2f32(<2 x float>) #4

attributes #0 = { nounwind readonly ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="64" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind readnone speculatable }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
