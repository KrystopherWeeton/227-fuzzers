; ModuleID = '../../third_party/unrar/src/rs.cpp'
source_filename = "../../third_party/unrar/src/rs.cpp"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver fmemopen, fmemopen@GLIBC_2.2.5"
module asm ".symver glob, glob@GLIBC_2.2.5"
module asm ".symver glob64, glob64@GLIBC_2.2.5"
module asm ".symver quick_exit, quick_exit@GLIBC_2.10"
module asm ".symver fmemopen, fmemopen@GLIBC_2.2.5"
module asm ".symver glob, glob@GLIBC_2.2.5"
module asm ".symver glob64, glob64@GLIBC_2.2.5"
module asm ".symver quick_exit, quick_exit@GLIBC_2.10"

%class.RSCoder = type <{ [512 x i32], [256 x i32], [1024 x i32], [256 x i32], i32, [256 x i32], i32, [512 x i32], i8, [3 x i8] }>

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN7RSCoder4InitEi(%class.RSCoder* nocapture, i32) local_unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %class.RSCoder, %class.RSCoder* %0, i64 0, i32 6
  store i32 %1, i32* %3, align 4
  %4 = getelementptr inbounds %class.RSCoder, %class.RSCoder* %0, i64 0, i32 8
  store i8 0, i8* %4, align 4
  br label %5

5:                                                ; preds = %53, %2
  %6 = phi i64 [ 0, %2 ], [ %62, %53 ]
  %7 = phi i32 [ 1, %2 ], [ %61, %53 ]
  %8 = sext i32 %7 to i64
  %9 = getelementptr inbounds %class.RSCoder, %class.RSCoder* %0, i64 0, i32 1, i64 %8
  %10 = trunc i64 %6 to i32
  store i32 %10, i32* %9, align 4
  %11 = getelementptr inbounds %class.RSCoder, %class.RSCoder* %0, i64 0, i32 0, i64 %6
  store i32 %7, i32* %11, align 4
  %12 = shl i32 %7, 1
  %13 = icmp sgt i32 %12, 255
  %14 = xor i32 %12, 285
  %15 = select i1 %13, i32 %14, i32 %12
  %16 = or i64 %6, 1
  %17 = icmp eq i64 %16, 255
  br i1 %17, label %18, label %53

18:                                               ; preds = %5, %18
  %19 = phi i64 [ %47, %18 ], [ 0, %5 ]
  %20 = add nuw nsw i64 %19, 255
  %21 = getelementptr inbounds %class.RSCoder, %class.RSCoder* %0, i64 0, i32 0, i64 %19
  %22 = bitcast i32* %21 to <4 x i32>*
  %23 = load <4 x i32>, <4 x i32>* %22, align 4
  %24 = getelementptr inbounds %class.RSCoder, %class.RSCoder* %0, i64 0, i32 0, i64 %20
  %25 = bitcast i32* %24 to <4 x i32>*
  store <4 x i32> %23, <4 x i32>* %25, align 4
  %26 = or i64 %19, 4
  %27 = add nuw nsw i64 %19, 259
  %28 = getelementptr inbounds %class.RSCoder, %class.RSCoder* %0, i64 0, i32 0, i64 %26
  %29 = bitcast i32* %28 to <4 x i32>*
  %30 = load <4 x i32>, <4 x i32>* %29, align 4
  %31 = getelementptr inbounds %class.RSCoder, %class.RSCoder* %0, i64 0, i32 0, i64 %27
  %32 = bitcast i32* %31 to <4 x i32>*
  store <4 x i32> %30, <4 x i32>* %32, align 4
  %33 = or i64 %19, 8
  %34 = add nuw nsw i64 %19, 263
  %35 = getelementptr inbounds %class.RSCoder, %class.RSCoder* %0, i64 0, i32 0, i64 %33
  %36 = bitcast i32* %35 to <4 x i32>*
  %37 = load <4 x i32>, <4 x i32>* %36, align 4
  %38 = getelementptr inbounds %class.RSCoder, %class.RSCoder* %0, i64 0, i32 0, i64 %34
  %39 = bitcast i32* %38 to <4 x i32>*
  store <4 x i32> %37, <4 x i32>* %39, align 4
  %40 = or i64 %19, 12
  %41 = add nuw nsw i64 %19, 267
  %42 = getelementptr inbounds %class.RSCoder, %class.RSCoder* %0, i64 0, i32 0, i64 %40
  %43 = bitcast i32* %42 to <4 x i32>*
  %44 = load <4 x i32>, <4 x i32>* %43, align 4
  %45 = getelementptr inbounds %class.RSCoder, %class.RSCoder* %0, i64 0, i32 0, i64 %41
  %46 = bitcast i32* %45 to <4 x i32>*
  store <4 x i32> %44, <4 x i32>* %46, align 4
  %47 = add nuw nsw i64 %19, 16
  %48 = icmp eq i64 %47, 256
  br i1 %48, label %49, label %18, !llvm.loop !2

49:                                               ; preds = %18
  %50 = getelementptr inbounds %class.RSCoder, %class.RSCoder* %0, i64 0, i32 0, i64 256
  %51 = load i32, i32* %50, align 4
  %52 = getelementptr inbounds %class.RSCoder, %class.RSCoder* %0, i64 0, i32 0, i64 511
  store i32 %51, i32* %52, align 4
  tail call void @_ZN7RSCoder6pnInitEv(%class.RSCoder* %0)
  ret void

53:                                               ; preds = %5
  %54 = sext i32 %15 to i64
  %55 = getelementptr inbounds %class.RSCoder, %class.RSCoder* %0, i64 0, i32 1, i64 %54
  %56 = trunc i64 %16 to i32
  store i32 %56, i32* %55, align 4
  %57 = getelementptr inbounds %class.RSCoder, %class.RSCoder* %0, i64 0, i32 0, i64 %16
  store i32 %15, i32* %57, align 4
  %58 = shl i32 %15, 1
  %59 = icmp sgt i32 %58, 255
  %60 = xor i32 %58, 285
  %61 = select i1 %59, i32 %60, i32 %58
  %62 = add nuw nsw i64 %6, 2
  br label %5
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @_ZN7RSCoder6gfInitEv(%class.RSCoder* nocapture) local_unnamed_addr #1 align 2 {
  br label %2

2:                                                ; preds = %50, %1
  %3 = phi i64 [ 0, %1 ], [ %59, %50 ]
  %4 = phi i32 [ 1, %1 ], [ %58, %50 ]
  %5 = sext i32 %4 to i64
  %6 = getelementptr inbounds %class.RSCoder, %class.RSCoder* %0, i64 0, i32 1, i64 %5
  %7 = trunc i64 %3 to i32
  store i32 %7, i32* %6, align 4
  %8 = getelementptr inbounds %class.RSCoder, %class.RSCoder* %0, i64 0, i32 0, i64 %3
  store i32 %4, i32* %8, align 4
  %9 = shl i32 %4, 1
  %10 = icmp sgt i32 %9, 255
  %11 = xor i32 %9, 285
  %12 = select i1 %10, i32 %11, i32 %9
  %13 = or i64 %3, 1
  %14 = icmp eq i64 %13, 255
  br i1 %14, label %15, label %50

15:                                               ; preds = %2, %15
  %16 = phi i64 [ %44, %15 ], [ 0, %2 ]
  %17 = add nuw nsw i64 %16, 255
  %18 = getelementptr inbounds %class.RSCoder, %class.RSCoder* %0, i64 0, i32 0, i64 %16
  %19 = bitcast i32* %18 to <4 x i32>*
  %20 = load <4 x i32>, <4 x i32>* %19, align 4
  %21 = getelementptr inbounds %class.RSCoder, %class.RSCoder* %0, i64 0, i32 0, i64 %17
  %22 = bitcast i32* %21 to <4 x i32>*
  store <4 x i32> %20, <4 x i32>* %22, align 4
  %23 = or i64 %16, 4
  %24 = add nuw nsw i64 %16, 259
  %25 = getelementptr inbounds %class.RSCoder, %class.RSCoder* %0, i64 0, i32 0, i64 %23
  %26 = bitcast i32* %25 to <4 x i32>*
  %27 = load <4 x i32>, <4 x i32>* %26, align 4
  %28 = getelementptr inbounds %class.RSCoder, %class.RSCoder* %0, i64 0, i32 0, i64 %24
  %29 = bitcast i32* %28 to <4 x i32>*
  store <4 x i32> %27, <4 x i32>* %29, align 4
  %30 = or i64 %16, 8
  %31 = add nuw nsw i64 %16, 263
  %32 = getelementptr inbounds %class.RSCoder, %class.RSCoder* %0, i64 0, i32 0, i64 %30
  %33 = bitcast i32* %32 to <4 x i32>*
  %34 = load <4 x i32>, <4 x i32>* %33, align 4
  %35 = getelementptr inbounds %class.RSCoder, %class.RSCoder* %0, i64 0, i32 0, i64 %31
  %36 = bitcast i32* %35 to <4 x i32>*
  store <4 x i32> %34, <4 x i32>* %36, align 4
  %37 = or i64 %16, 12
  %38 = add nuw nsw i64 %16, 267
  %39 = getelementptr inbounds %class.RSCoder, %class.RSCoder* %0, i64 0, i32 0, i64 %37
  %40 = bitcast i32* %39 to <4 x i32>*
  %41 = load <4 x i32>, <4 x i32>* %40, align 4
  %42 = getelementptr inbounds %class.RSCoder, %class.RSCoder* %0, i64 0, i32 0, i64 %38
  %43 = bitcast i32* %42 to <4 x i32>*
  store <4 x i32> %41, <4 x i32>* %43, align 4
  %44 = add nuw nsw i64 %16, 16
  %45 = icmp eq i64 %44, 256
  br i1 %45, label %46, label %15, !llvm.loop !4

46:                                               ; preds = %15
  %47 = getelementptr inbounds %class.RSCoder, %class.RSCoder* %0, i64 0, i32 0, i64 256
  %48 = load i32, i32* %47, align 4
  %49 = getelementptr inbounds %class.RSCoder, %class.RSCoder* %0, i64 0, i32 0, i64 511
  store i32 %48, i32* %49, align 4
  ret void

50:                                               ; preds = %2
  %51 = sext i32 %12 to i64
  %52 = getelementptr inbounds %class.RSCoder, %class.RSCoder* %0, i64 0, i32 1, i64 %51
  %53 = trunc i64 %13 to i32
  store i32 %53, i32* %52, align 4
  %54 = getelementptr inbounds %class.RSCoder, %class.RSCoder* %0, i64 0, i32 0, i64 %13
  store i32 %12, i32* %54, align 4
  %55 = shl i32 %12, 1
  %56 = icmp sgt i32 %55, 255
  %57 = xor i32 %55, 285
  %58 = select i1 %56, i32 %57, i32 %55
  %59 = add nuw nsw i64 %3, 2
  br label %2
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN7RSCoder6pnInitEv(%class.RSCoder* nocapture) local_unnamed_addr #0 align 2 {
  %2 = alloca [256 x i32], align 16
  %3 = bitcast [256 x i32]* %2 to i8*
  %4 = alloca [256 x i32], align 16
  %5 = bitcast [256 x i32]* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 1024, i8* nonnull %3) #3
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %3, i8 -86, i64 1024, i1 false)
  %6 = getelementptr inbounds %class.RSCoder, %class.RSCoder* %0, i64 0, i32 6
  %7 = load i32, i32* %6, align 4
  %8 = icmp sgt i32 %7, 0
  br i1 %8, label %11, label %9

9:                                                ; preds = %1
  %10 = getelementptr inbounds [256 x i32], [256 x i32]* %2, i64 0, i64 0
  store i32 1, i32* %10, align 16
  br label %19

11:                                               ; preds = %1
  %12 = zext i32 %7 to i64
  %13 = shl nuw nsw i64 %12, 2
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %3, i8 0, i64 %13, i1 false)
  %14 = getelementptr inbounds [256 x i32], [256 x i32]* %2, i64 0, i64 0
  store i32 1, i32* %14, align 16
  %15 = getelementptr inbounds [256 x i32], [256 x i32]* %4, i64 0, i64 0
  %16 = getelementptr inbounds [256 x i32], [256 x i32]* %4, i64 0, i64 1
  %17 = getelementptr %class.RSCoder, %class.RSCoder* %0, i64 0, i32 2, i64 0
  %18 = bitcast i32* %17 to i8*
  br label %20

19:                                               ; preds = %98, %9
  call void @llvm.lifetime.end.p0i8(i64 1024, i8* nonnull %3) #3
  ret void

20:                                               ; preds = %98, %11
  %21 = phi i32 [ %99, %98 ], [ %7, %11 ]
  %22 = phi i32 [ %100, %98 ], [ %7, %11 ]
  %23 = phi i64 [ %102, %98 ], [ 1, %11 ]
  call void @llvm.lifetime.start.p0i8(i64 1024, i8* nonnull %5) #3
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %5, i8 -86, i64 1024, i1 false)
  %24 = icmp sgt i32 %22, 0
  br i1 %24, label %28, label %25

25:                                               ; preds = %20
  %26 = getelementptr inbounds %class.RSCoder, %class.RSCoder* %0, i64 0, i32 0, i64 %23
  %27 = load i32, i32* %26, align 4
  store i32 %27, i32* %15, align 16
  store i32 1, i32* %16, align 4
  br label %89

28:                                               ; preds = %20
  %29 = zext i32 %22 to i64
  %30 = shl nuw nsw i64 %29, 2
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %5, i8 0, i64 %30, i1 false)
  %31 = getelementptr inbounds %class.RSCoder, %class.RSCoder* %0, i64 0, i32 0, i64 %23
  %32 = load i32, i32* %31, align 4
  store i32 %32, i32* %15, align 16
  store i32 1, i32* %16, align 4
  br label %35

33:                                               ; preds = %35
  %34 = icmp sgt i32 %39, 0
  br i1 %34, label %42, label %98

35:                                               ; preds = %28, %35
  %36 = phi i64 [ %38, %35 ], [ 0, %28 ]
  %37 = getelementptr inbounds %class.RSCoder, %class.RSCoder* %0, i64 0, i32 2, i64 %36
  store i32 0, i32* %37, align 4
  %38 = add nuw nsw i64 %36, 1
  %39 = load i32, i32* %6, align 4
  %40 = sext i32 %39 to i64
  %41 = icmp slt i64 %38, %40
  br i1 %41, label %35, label %33

42:                                               ; preds = %33, %86
  %43 = phi i32 [ %88, %86 ], [ %32, %33 ]
  %44 = phi i32 [ %83, %86 ], [ %39, %33 ]
  %45 = phi i64 [ %84, %86 ], [ 0, %33 ]
  %46 = icmp ne i32 %43, 0
  %47 = sext i32 %44 to i64
  %48 = icmp slt i64 %45, %47
  %49 = and i1 %48, %46
  br i1 %49, label %50, label %81

50:                                               ; preds = %42
  %51 = trunc i64 %45 to i32
  %52 = sext i32 %43 to i64
  %53 = getelementptr inbounds %class.RSCoder, %class.RSCoder* %0, i64 0, i32 1, i64 %52
  br label %54

54:                                               ; preds = %68, %50
  %55 = phi i64 [ 0, %50 ], [ %74, %68 ]
  %56 = getelementptr inbounds [256 x i32], [256 x i32]* %2, i64 0, i64 %55
  %57 = load i32, i32* %56, align 4
  %58 = icmp eq i32 %57, 0
  br i1 %58, label %68, label %59

59:                                               ; preds = %54
  %60 = load i32, i32* %53, align 4
  %61 = sext i32 %57 to i64
  %62 = getelementptr inbounds %class.RSCoder, %class.RSCoder* %0, i64 0, i32 1, i64 %61
  %63 = load i32, i32* %62, align 4
  %64 = add nsw i32 %63, %60
  %65 = sext i32 %64 to i64
  %66 = getelementptr inbounds %class.RSCoder, %class.RSCoder* %0, i64 0, i32 0, i64 %65
  %67 = load i32, i32* %66, align 4
  br label %68

68:                                               ; preds = %59, %54
  %69 = phi i32 [ %67, %59 ], [ 0, %54 ]
  %70 = add nuw nsw i64 %55, %45
  %71 = getelementptr inbounds %class.RSCoder, %class.RSCoder* %0, i64 0, i32 2, i64 %70
  %72 = load i32, i32* %71, align 4
  %73 = xor i32 %72, %69
  store i32 %73, i32* %71, align 4
  %74 = add nuw nsw i64 %55, 1
  %75 = load i32, i32* %6, align 4
  %76 = sub nsw i32 %75, %51
  %77 = sext i32 %76 to i64
  %78 = icmp slt i64 %74, %77
  br i1 %78, label %54, label %79

79:                                               ; preds = %68
  %80 = sext i32 %75 to i64
  br label %81

81:                                               ; preds = %79, %42
  %82 = phi i64 [ %80, %79 ], [ %47, %42 ]
  %83 = phi i32 [ %75, %79 ], [ %44, %42 ]
  %84 = add nuw nsw i64 %45, 1
  %85 = icmp slt i64 %84, %82
  br i1 %85, label %86, label %89

86:                                               ; preds = %81
  %87 = getelementptr inbounds [256 x i32], [256 x i32]* %4, i64 0, i64 %84
  %88 = load i32, i32* %87, align 4
  br label %42

89:                                               ; preds = %81, %25
  %90 = phi i32 [ %21, %25 ], [ %83, %81 ]
  %91 = phi i32 [ %22, %25 ], [ %83, %81 ]
  %92 = icmp sgt i32 %91, 0
  br i1 %92, label %93, label %98

93:                                               ; preds = %89
  %94 = icmp sgt i32 %90, 1
  %95 = select i1 %94, i32 %90, i32 1
  %96 = zext i32 %95 to i64
  %97 = shl nuw nsw i64 %96, 2
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 16 %3, i8* align 4 %18, i64 %97, i1 false)
  br label %98

98:                                               ; preds = %33, %89, %93
  %99 = phi i32 [ %90, %93 ], [ %90, %89 ], [ %39, %33 ]
  %100 = phi i32 [ %90, %93 ], [ %91, %89 ], [ %39, %33 ]
  %101 = sext i32 %100 to i64
  call void @llvm.lifetime.end.p0i8(i64 1024, i8* nonnull %5) #3
  %102 = add nuw nsw i64 %23, 1
  %103 = icmp slt i64 %23, %101
  br i1 %103, label %20, label %19
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #2

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @_ZN7RSCoder6pnMultEPiS0_S0_(%class.RSCoder* nocapture readonly, i32* nocapture readonly, i32* nocapture readonly, i32* nocapture) local_unnamed_addr #1 align 2 {
  %5 = getelementptr inbounds %class.RSCoder, %class.RSCoder* %0, i64 0, i32 6
  %6 = load i32, i32* %5, align 4
  %7 = icmp sgt i32 %6, 0
  br i1 %7, label %10, label %17

8:                                                ; preds = %10
  %9 = icmp sgt i32 %14, 0
  br i1 %9, label %18, label %17

10:                                               ; preds = %4, %10
  %11 = phi i64 [ %13, %10 ], [ 0, %4 ]
  %12 = getelementptr inbounds i32, i32* %3, i64 %11
  store i32 0, i32* %12, align 4
  %13 = add nuw nsw i64 %11, 1
  %14 = load i32, i32* %5, align 4
  %15 = sext i32 %14 to i64
  %16 = icmp slt i64 %13, %15
  br i1 %16, label %10, label %8

17:                                               ; preds = %61, %4, %8
  ret void

18:                                               ; preds = %8, %61
  %19 = phi i32 [ %62, %61 ], [ %14, %8 ]
  %20 = phi i64 [ %63, %61 ], [ 0, %8 ]
  %21 = getelementptr inbounds i32, i32* %1, i64 %20
  %22 = load i32, i32* %21, align 4
  %23 = icmp ne i32 %22, 0
  %24 = sext i32 %19 to i64
  %25 = icmp slt i64 %20, %24
  %26 = and i1 %23, %25
  br i1 %26, label %27, label %61

27:                                               ; preds = %18
  %28 = trunc i64 %20 to i32
  br label %29

29:                                               ; preds = %59, %27
  %30 = phi i32 [ %22, %27 ], [ %60, %59 ]
  %31 = phi i64 [ 0, %27 ], [ %54, %59 ]
  %32 = getelementptr inbounds i32, i32* %2, i64 %31
  %33 = load i32, i32* %32, align 4
  %34 = icmp eq i32 %30, 0
  %35 = icmp eq i32 %33, 0
  %36 = or i1 %34, %35
  br i1 %36, label %48, label %37

37:                                               ; preds = %29
  %38 = sext i32 %30 to i64
  %39 = getelementptr inbounds %class.RSCoder, %class.RSCoder* %0, i64 0, i32 1, i64 %38
  %40 = load i32, i32* %39, align 4
  %41 = sext i32 %33 to i64
  %42 = getelementptr inbounds %class.RSCoder, %class.RSCoder* %0, i64 0, i32 1, i64 %41
  %43 = load i32, i32* %42, align 4
  %44 = add nsw i32 %43, %40
  %45 = sext i32 %44 to i64
  %46 = getelementptr inbounds %class.RSCoder, %class.RSCoder* %0, i64 0, i32 0, i64 %45
  %47 = load i32, i32* %46, align 4
  br label %48

48:                                               ; preds = %29, %37
  %49 = phi i32 [ %47, %37 ], [ 0, %29 ]
  %50 = add nuw nsw i64 %31, %20
  %51 = getelementptr inbounds i32, i32* %3, i64 %50
  %52 = load i32, i32* %51, align 4
  %53 = xor i32 %52, %49
  store i32 %53, i32* %51, align 4
  %54 = add nuw nsw i64 %31, 1
  %55 = load i32, i32* %5, align 4
  %56 = sub nsw i32 %55, %28
  %57 = sext i32 %56 to i64
  %58 = icmp slt i64 %54, %57
  br i1 %58, label %59, label %61

59:                                               ; preds = %48
  %60 = load i32, i32* %21, align 4
  br label %29

61:                                               ; preds = %48, %18
  %62 = phi i32 [ %19, %18 ], [ %55, %48 ]
  %63 = add nuw nsw i64 %20, 1
  %64 = sext i32 %62 to i64
  %65 = icmp slt i64 %63, %64
  br i1 %65, label %18, label %17
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN7RSCoder6EncodeEPhiS0_(%class.RSCoder* nocapture readonly, i8* nocapture readonly, i32, i8* nocapture) local_unnamed_addr #0 align 2 {
  %5 = alloca [256 x i32], align 16
  %6 = bitcast [256 x i32]* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 1024, i8* nonnull %6) #3
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %6, i8 -86, i64 1024, i1 false)
  %7 = getelementptr inbounds %class.RSCoder, %class.RSCoder* %0, i64 0, i32 6
  %8 = load i32, i32* %7, align 4
  %9 = icmp slt i32 %8, 0
  br i1 %9, label %14, label %10

10:                                               ; preds = %4
  %11 = zext i32 %8 to i64
  %12 = shl nuw nsw i64 %11, 2
  %13 = add nuw nsw i64 %12, 4
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %6, i8 0, i64 %13, i1 false)
  br label %14

14:                                               ; preds = %10, %4
  %15 = icmp sgt i32 %2, 0
  br i1 %15, label %16, label %28

16:                                               ; preds = %14
  %17 = add i32 %8, -1
  %18 = sext i32 %17 to i64
  %19 = getelementptr inbounds [256 x i32], [256 x i32]* %5, i64 0, i64 %18
  %20 = icmp sgt i32 %17, 0
  %21 = getelementptr inbounds %class.RSCoder, %class.RSCoder* %0, i64 0, i32 2, i64 0
  %22 = load i32, i32* %21, align 4
  %23 = icmp eq i32 %22, 0
  %24 = sext i32 %22 to i64
  %25 = getelementptr inbounds %class.RSCoder, %class.RSCoder* %0, i64 0, i32 1, i64 %24
  %26 = getelementptr inbounds [256 x i32], [256 x i32]* %5, i64 0, i64 0
  %27 = zext i32 %2 to i64
  br label %30

28:                                               ; preds = %53, %14
  %29 = icmp sgt i32 %8, 0
  br i1 %29, label %81, label %80

30:                                               ; preds = %53, %16
  %31 = phi i64 [ 0, %16 ], [ %55, %53 ]
  %32 = getelementptr inbounds i8, i8* %1, i64 %31
  %33 = load i8, i8* %32, align 1
  %34 = zext i8 %33 to i32
  %35 = load i32, i32* %19, align 4
  %36 = xor i32 %35, %34
  br i1 %20, label %37, label %41

37:                                               ; preds = %30
  %38 = icmp eq i32 %36, 0
  %39 = sext i32 %36 to i64
  %40 = getelementptr inbounds %class.RSCoder, %class.RSCoder* %0, i64 0, i32 1, i64 %39
  br label %57

41:                                               ; preds = %75, %30
  %42 = icmp eq i32 %36, 0
  %43 = or i1 %42, %23
  br i1 %43, label %53, label %44

44:                                               ; preds = %41
  %45 = load i32, i32* %25, align 4
  %46 = sext i32 %36 to i64
  %47 = getelementptr inbounds %class.RSCoder, %class.RSCoder* %0, i64 0, i32 1, i64 %46
  %48 = load i32, i32* %47, align 4
  %49 = add nsw i32 %48, %45
  %50 = sext i32 %49 to i64
  %51 = getelementptr inbounds %class.RSCoder, %class.RSCoder* %0, i64 0, i32 0, i64 %50
  %52 = load i32, i32* %51, align 4
  br label %53

53:                                               ; preds = %41, %44
  %54 = phi i32 [ %52, %44 ], [ 0, %41 ]
  store i32 %54, i32* %26, align 16
  %55 = add nuw nsw i64 %31, 1
  %56 = icmp eq i64 %55, %27
  br i1 %56, label %28, label %30

57:                                               ; preds = %37, %75
  %58 = phi i64 [ %18, %37 ], [ %59, %75 ]
  %59 = add nsw i64 %58, -1
  %60 = getelementptr inbounds [256 x i32], [256 x i32]* %5, i64 0, i64 %59
  %61 = load i32, i32* %60, align 4
  %62 = getelementptr inbounds %class.RSCoder, %class.RSCoder* %0, i64 0, i32 2, i64 %58
  %63 = load i32, i32* %62, align 4
  %64 = icmp eq i32 %63, 0
  %65 = or i1 %38, %64
  br i1 %65, label %75, label %66

66:                                               ; preds = %57
  %67 = sext i32 %63 to i64
  %68 = getelementptr inbounds %class.RSCoder, %class.RSCoder* %0, i64 0, i32 1, i64 %67
  %69 = load i32, i32* %68, align 4
  %70 = load i32, i32* %40, align 4
  %71 = add nsw i32 %70, %69
  %72 = sext i32 %71 to i64
  %73 = getelementptr inbounds %class.RSCoder, %class.RSCoder* %0, i64 0, i32 0, i64 %72
  %74 = load i32, i32* %73, align 4
  br label %75

75:                                               ; preds = %57, %66
  %76 = phi i32 [ %74, %66 ], [ 0, %57 ]
  %77 = xor i32 %76, %61
  %78 = getelementptr inbounds [256 x i32], [256 x i32]* %5, i64 0, i64 %58
  store i32 %77, i32* %78, align 4
  %79 = icmp sgt i64 %59, 0
  br i1 %79, label %57, label %41

80:                                               ; preds = %81, %28
  call void @llvm.lifetime.end.p0i8(i64 1024, i8* nonnull %6) #3
  ret void

81:                                               ; preds = %28, %81
  %82 = phi i64 [ %92, %81 ], [ 0, %28 ]
  %83 = phi i32 [ %93, %81 ], [ %8, %28 ]
  %84 = trunc i64 %82 to i32
  %85 = xor i32 %84, -1
  %86 = add i32 %83, %85
  %87 = sext i32 %86 to i64
  %88 = getelementptr inbounds [256 x i32], [256 x i32]* %5, i64 0, i64 %87
  %89 = load i32, i32* %88, align 4
  %90 = trunc i32 %89 to i8
  %91 = getelementptr inbounds i8, i8* %3, i64 %82
  store i8 %90, i8* %91, align 1
  %92 = add nuw nsw i64 %82, 1
  %93 = load i32, i32* %7, align 4
  %94 = sext i32 %93 to i64
  %95 = icmp slt i64 %92, %94
  br i1 %95, label %81, label %80
}

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN7RSCoder6DecodeEPhiPii(%class.RSCoder*, i8* nocapture, i32, i32* nocapture readonly, i32) local_unnamed_addr #0 align 2 {
  %6 = alloca [512 x i32], align 16
  %7 = alloca [512 x i32], align 16
  %8 = bitcast [512 x i32]* %7 to i8*
  %9 = bitcast [512 x i32]* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 2048, i8* nonnull %9) #3
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %9, i8 -86, i64 2048, i1 false)
  %10 = getelementptr inbounds %class.RSCoder, %class.RSCoder* %0, i64 0, i32 6
  %11 = load i32, i32* %10, align 4
  %12 = icmp sgt i32 %11, 0
  br i1 %12, label %13, label %394

13:                                               ; preds = %5
  %14 = icmp sgt i32 %2, 0
  %15 = sext i32 %11 to i64
  %16 = zext i32 %2 to i64
  %17 = and i64 %16, 1
  %18 = icmp eq i32 %2, 1
  %19 = sub nsw i64 %16, %17
  %20 = icmp eq i64 %17, 0
  br label %21

21:                                               ; preds = %13, %63
  %22 = phi i64 [ 0, %13 ], [ %24, %63 ]
  %23 = phi i8 [ 1, %13 ], [ %64, %63 ]
  %24 = add nuw nsw i64 %22, 1
  br i1 %14, label %27, label %25

25:                                               ; preds = %21
  %26 = getelementptr inbounds [512 x i32], [512 x i32]* %6, i64 0, i64 %22
  store i32 0, i32* %26, align 4
  br label %62

27:                                               ; preds = %21
  %28 = getelementptr inbounds %class.RSCoder, %class.RSCoder* %0, i64 0, i32 0, i64 %24
  %29 = load i32, i32* %28, align 4
  %30 = icmp eq i32 %29, 0
  %31 = sext i32 %29 to i64
  %32 = getelementptr inbounds %class.RSCoder, %class.RSCoder* %0, i64 0, i32 1, i64 %31
  br i1 %18, label %36, label %66

33:                                               ; preds = %63
  %34 = and i8 %64, 1
  %35 = icmp eq i8 %34, 0
  br i1 %35, label %93, label %394

36:                                               ; preds = %405, %27
  %37 = phi i32 [ undef, %27 ], [ %407, %405 ]
  %38 = phi i64 [ 0, %27 ], [ %408, %405 ]
  %39 = phi i32 [ 0, %27 ], [ %407, %405 ]
  br i1 %20, label %58, label %40

40:                                               ; preds = %36
  %41 = getelementptr inbounds i8, i8* %1, i64 %38
  %42 = load i8, i8* %41, align 1
  %43 = zext i8 %42 to i32
  %44 = icmp eq i32 %39, 0
  %45 = or i1 %44, %30
  br i1 %45, label %55, label %46

46:                                               ; preds = %40
  %47 = load i32, i32* %32, align 4
  %48 = sext i32 %39 to i64
  %49 = getelementptr inbounds %class.RSCoder, %class.RSCoder* %0, i64 0, i32 1, i64 %48
  %50 = load i32, i32* %49, align 4
  %51 = add nsw i32 %50, %47
  %52 = sext i32 %51 to i64
  %53 = getelementptr inbounds %class.RSCoder, %class.RSCoder* %0, i64 0, i32 0, i64 %52
  %54 = load i32, i32* %53, align 4
  br label %55

55:                                               ; preds = %40, %46
  %56 = phi i32 [ %54, %46 ], [ 0, %40 ]
  %57 = xor i32 %56, %43
  br label %58

58:                                               ; preds = %36, %55
  %59 = phi i32 [ %37, %36 ], [ %57, %55 ]
  %60 = getelementptr inbounds [512 x i32], [512 x i32]* %6, i64 0, i64 %22
  store i32 %59, i32* %60, align 4
  %61 = icmp eq i32 %59, 0
  br i1 %61, label %62, label %63

62:                                               ; preds = %25, %58
  br label %63

63:                                               ; preds = %58, %62
  %64 = phi i8 [ %23, %62 ], [ 0, %58 ]
  %65 = icmp slt i64 %24, %15
  br i1 %65, label %21, label %33

66:                                               ; preds = %27, %405
  %67 = phi i64 [ %408, %405 ], [ 0, %27 ]
  %68 = phi i32 [ %407, %405 ], [ 0, %27 ]
  %69 = phi i64 [ %409, %405 ], [ %19, %27 ]
  %70 = getelementptr inbounds i8, i8* %1, i64 %67
  %71 = load i8, i8* %70, align 1
  %72 = zext i8 %71 to i32
  %73 = icmp eq i32 %68, 0
  %74 = or i1 %73, %30
  br i1 %74, label %84, label %75

75:                                               ; preds = %66
  %76 = load i32, i32* %32, align 4
  %77 = sext i32 %68 to i64
  %78 = getelementptr inbounds %class.RSCoder, %class.RSCoder* %0, i64 0, i32 1, i64 %77
  %79 = load i32, i32* %78, align 4
  %80 = add nsw i32 %79, %76
  %81 = sext i32 %80 to i64
  %82 = getelementptr inbounds %class.RSCoder, %class.RSCoder* %0, i64 0, i32 0, i64 %81
  %83 = load i32, i32* %82, align 4
  br label %84

84:                                               ; preds = %66, %75
  %85 = phi i32 [ %83, %75 ], [ 0, %66 ]
  %86 = xor i32 %85, %72
  %87 = or i64 %67, 1
  %88 = getelementptr inbounds i8, i8* %1, i64 %87
  %89 = load i8, i8* %88, align 1
  %90 = zext i8 %89 to i32
  %91 = icmp eq i32 %86, 0
  %92 = or i1 %91, %30
  br i1 %92, label %405, label %396

93:                                               ; preds = %33
  %94 = getelementptr inbounds %class.RSCoder, %class.RSCoder* %0, i64 0, i32 8
  %95 = load i8, i8* %94, align 4, !range !5
  %96 = icmp eq i8 %95, 0
  br i1 %96, label %97, label %257

97:                                               ; preds = %93
  store i8 1, i8* %94, align 4
  %98 = icmp slt i32 %11, 0
  br i1 %98, label %105, label %99

99:                                               ; preds = %97
  %100 = getelementptr %class.RSCoder, %class.RSCoder* %0, i64 0, i32 7, i64 0
  %101 = bitcast i32* %100 to i8*
  %102 = zext i32 %11 to i64
  %103 = shl nuw nsw i64 %102, 2
  %104 = add nuw nsw i64 %103, 4
  call void @llvm.memset.p0i8.i64(i8* align 4 %101, i8 0, i64 %104, i1 false)
  br label %105

105:                                              ; preds = %99, %97
  %106 = getelementptr inbounds %class.RSCoder, %class.RSCoder* %0, i64 0, i32 7, i64 0
  store i32 1, i32* %106, align 4
  %107 = icmp sgt i32 %4, 0
  br i1 %107, label %108, label %110

108:                                              ; preds = %105
  %109 = zext i32 %4 to i64
  br label %119

110:                                              ; preds = %135, %105
  %111 = getelementptr inbounds %class.RSCoder, %class.RSCoder* %0, i64 0, i32 4
  store i32 0, i32* %111, align 4
  %112 = icmp sgt i32 %2, -1
  br i1 %112, label %115, label %113

113:                                              ; preds = %110
  %114 = load i32, i32* %10, align 4
  br label %257

115:                                              ; preds = %110
  %116 = sub nsw i32 255, %2
  %117 = sext i32 %116 to i64
  %118 = load i32, i32* %10, align 4
  br label %162

119:                                              ; preds = %138, %108
  %120 = phi i32 [ %11, %108 ], [ %139, %138 ]
  %121 = phi i64 [ 0, %108 ], [ %136, %138 ]
  %122 = getelementptr inbounds i32, i32* %3, i64 %121
  %123 = load i32, i32* %122, align 4
  %124 = xor i32 %123, -1
  %125 = add i32 %124, %2
  %126 = sext i32 %125 to i64
  %127 = getelementptr inbounds %class.RSCoder, %class.RSCoder* %0, i64 0, i32 0, i64 %126
  %128 = load i32, i32* %127, align 4
  %129 = icmp sgt i32 %120, 0
  br i1 %129, label %130, label %135

130:                                              ; preds = %119
  %131 = icmp eq i32 %128, 0
  %132 = sext i32 %128 to i64
  %133 = getelementptr inbounds %class.RSCoder, %class.RSCoder* %0, i64 0, i32 1, i64 %132
  %134 = sext i32 %120 to i64
  br label %140

135:                                              ; preds = %156, %119
  %136 = add nuw nsw i64 %121, 1
  %137 = icmp eq i64 %136, %109
  br i1 %137, label %110, label %138

138:                                              ; preds = %135
  %139 = load i32, i32* %10, align 4
  br label %119

140:                                              ; preds = %130, %156
  %141 = phi i64 [ %134, %130 ], [ %142, %156 ]
  %142 = add nsw i64 %141, -1
  %143 = getelementptr inbounds %class.RSCoder, %class.RSCoder* %0, i64 0, i32 7, i64 %142
  %144 = load i32, i32* %143, align 4
  %145 = icmp eq i32 %144, 0
  %146 = or i1 %131, %145
  br i1 %146, label %156, label %147

147:                                              ; preds = %140
  %148 = load i32, i32* %133, align 4
  %149 = sext i32 %144 to i64
  %150 = getelementptr inbounds %class.RSCoder, %class.RSCoder* %0, i64 0, i32 1, i64 %149
  %151 = load i32, i32* %150, align 4
  %152 = add nsw i32 %151, %148
  %153 = sext i32 %152 to i64
  %154 = getelementptr inbounds %class.RSCoder, %class.RSCoder* %0, i64 0, i32 0, i64 %153
  %155 = load i32, i32* %154, align 4
  br label %156

156:                                              ; preds = %140, %147
  %157 = phi i32 [ %155, %147 ], [ 0, %140 ]
  %158 = getelementptr inbounds %class.RSCoder, %class.RSCoder* %0, i64 0, i32 7, i64 %141
  %159 = load i32, i32* %158, align 4
  %160 = xor i32 %159, %157
  store i32 %160, i32* %158, align 4
  %161 = icmp sgt i64 %142, 0
  br i1 %161, label %140, label %135

162:                                              ; preds = %115, %252
  %163 = phi i32 [ 0, %115 ], [ %253, %252 ]
  %164 = phi i32 [ %118, %115 ], [ %254, %252 ]
  %165 = phi i64 [ %117, %115 ], [ %255, %252 ]
  %166 = icmp slt i32 %164, 0
  br i1 %166, label %202, label %167

167:                                              ; preds = %162
  %168 = sext i32 %164 to i64
  %169 = trunc i64 %165 to i32
  br label %172

170:                                              ; preds = %197
  %171 = icmp eq i32 %199, 0
  br i1 %171, label %202, label %252

172:                                              ; preds = %197, %167
  %173 = phi i64 [ %200, %197 ], [ 0, %167 ]
  %174 = phi i32 [ %199, %197 ], [ 0, %167 ]
  %175 = trunc i64 %173 to i32
  %176 = mul nsw i32 %175, %169
  %177 = srem i32 %176, 255
  %178 = sext i32 %177 to i64
  %179 = getelementptr inbounds %class.RSCoder, %class.RSCoder* %0, i64 0, i32 0, i64 %178
  %180 = load i32, i32* %179, align 4
  %181 = getelementptr inbounds %class.RSCoder, %class.RSCoder* %0, i64 0, i32 7, i64 %173
  %182 = load i32, i32* %181, align 4
  %183 = icmp eq i32 %180, 0
  %184 = icmp eq i32 %182, 0
  %185 = or i1 %183, %184
  br i1 %185, label %197, label %186

186:                                              ; preds = %172
  %187 = sext i32 %180 to i64
  %188 = getelementptr inbounds %class.RSCoder, %class.RSCoder* %0, i64 0, i32 1, i64 %187
  %189 = load i32, i32* %188, align 4
  %190 = sext i32 %182 to i64
  %191 = getelementptr inbounds %class.RSCoder, %class.RSCoder* %0, i64 0, i32 1, i64 %190
  %192 = load i32, i32* %191, align 4
  %193 = add nsw i32 %192, %189
  %194 = sext i32 %193 to i64
  %195 = getelementptr inbounds %class.RSCoder, %class.RSCoder* %0, i64 0, i32 0, i64 %194
  %196 = load i32, i32* %195, align 4
  br label %197

197:                                              ; preds = %172, %186
  %198 = phi i32 [ %196, %186 ], [ 0, %172 ]
  %199 = xor i32 %198, %174
  %200 = add nuw nsw i64 %173, 1
  %201 = icmp slt i64 %173, %168
  br i1 %201, label %172, label %170

202:                                              ; preds = %162, %170
  %203 = sext i32 %163 to i64
  %204 = getelementptr inbounds %class.RSCoder, %class.RSCoder* %0, i64 0, i32 3, i64 %203
  %205 = trunc i64 %165 to i32
  %206 = sub i32 255, %205
  store i32 %206, i32* %204, align 4
  %207 = load i32, i32* %111, align 4
  %208 = sext i32 %207 to i64
  %209 = getelementptr inbounds %class.RSCoder, %class.RSCoder* %0, i64 0, i32 5, i64 %208
  store i32 0, i32* %209, align 4
  %210 = load i32, i32* %10, align 4
  %211 = icmp slt i32 %210, 1
  br i1 %211, label %212, label %216

212:                                              ; preds = %241, %202
  %213 = phi i32 [ %210, %202 ], [ %249, %241 ]
  %214 = load i32, i32* %111, align 4
  %215 = add nsw i32 %214, 1
  store i32 %215, i32* %111, align 4
  br label %252

216:                                              ; preds = %202, %241
  %217 = phi i64 [ %248, %241 ], [ 1, %202 ]
  %218 = getelementptr inbounds %class.RSCoder, %class.RSCoder* %0, i64 0, i32 7, i64 %217
  %219 = load i32, i32* %218, align 4
  %220 = add nsw i64 %217, -1
  %221 = mul nsw i64 %220, %165
  %222 = trunc i64 %221 to i32
  %223 = srem i32 %222, 255
  %224 = sext i32 %223 to i64
  %225 = getelementptr inbounds %class.RSCoder, %class.RSCoder* %0, i64 0, i32 0, i64 %224
  %226 = load i32, i32* %225, align 4
  %227 = icmp eq i32 %219, 0
  %228 = icmp eq i32 %226, 0
  %229 = or i1 %227, %228
  br i1 %229, label %241, label %230

230:                                              ; preds = %216
  %231 = sext i32 %219 to i64
  %232 = getelementptr inbounds %class.RSCoder, %class.RSCoder* %0, i64 0, i32 1, i64 %231
  %233 = load i32, i32* %232, align 4
  %234 = sext i32 %226 to i64
  %235 = getelementptr inbounds %class.RSCoder, %class.RSCoder* %0, i64 0, i32 1, i64 %234
  %236 = load i32, i32* %235, align 4
  %237 = add nsw i32 %236, %233
  %238 = sext i32 %237 to i64
  %239 = getelementptr inbounds %class.RSCoder, %class.RSCoder* %0, i64 0, i32 0, i64 %238
  %240 = load i32, i32* %239, align 4
  br label %241

241:                                              ; preds = %216, %230
  %242 = phi i32 [ %240, %230 ], [ 0, %216 ]
  %243 = load i32, i32* %111, align 4
  %244 = sext i32 %243 to i64
  %245 = getelementptr inbounds %class.RSCoder, %class.RSCoder* %0, i64 0, i32 5, i64 %244
  %246 = load i32, i32* %245, align 4
  %247 = xor i32 %246, %242
  store i32 %247, i32* %245, align 4
  %248 = add nuw nsw i64 %217, 2
  %249 = load i32, i32* %10, align 4
  %250 = sext i32 %249 to i64
  %251 = icmp sgt i64 %248, %250
  br i1 %251, label %212, label %216

252:                                              ; preds = %212, %170
  %253 = phi i32 [ %215, %212 ], [ %163, %170 ]
  %254 = phi i32 [ %213, %212 ], [ %164, %170 ]
  %255 = add nsw i64 %165, 1
  %256 = icmp slt i64 %255, 256
  br i1 %256, label %162, label %257

257:                                              ; preds = %252, %113, %93
  %258 = phi i32 [ %114, %113 ], [ %11, %93 ], [ %254, %252 ]
  call void @llvm.lifetime.start.p0i8(i64 2048, i8* nonnull %8) #3
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %8, i8 -86, i64 2048, i1 false)
  %259 = icmp sgt i32 %258, 0
  br i1 %259, label %260, label %299

260:                                              ; preds = %257
  %261 = sext i32 %258 to i64
  %262 = shl nuw nsw i64 %261, 2
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %8, i8 0, i64 %262, i1 false)
  br label %263

263:                                              ; preds = %296, %260
  %264 = phi i64 [ %297, %296 ], [ 0, %260 ]
  %265 = getelementptr inbounds %class.RSCoder, %class.RSCoder* %0, i64 0, i32 7, i64 %264
  %266 = load i32, i32* %265, align 4
  %267 = icmp eq i32 %266, 0
  br i1 %267, label %296, label %268

268:                                              ; preds = %263
  %269 = trunc i64 %264 to i32
  %270 = sext i32 %266 to i64
  %271 = getelementptr inbounds %class.RSCoder, %class.RSCoder* %0, i64 0, i32 1, i64 %270
  %272 = sub nsw i32 %258, %269
  %273 = sext i32 %272 to i64
  br label %274

274:                                              ; preds = %288, %268
  %275 = phi i64 [ 0, %268 ], [ %294, %288 ]
  %276 = getelementptr inbounds [512 x i32], [512 x i32]* %6, i64 0, i64 %275
  %277 = load i32, i32* %276, align 4
  %278 = icmp eq i32 %277, 0
  br i1 %278, label %288, label %279

279:                                              ; preds = %274
  %280 = load i32, i32* %271, align 4
  %281 = sext i32 %277 to i64
  %282 = getelementptr inbounds %class.RSCoder, %class.RSCoder* %0, i64 0, i32 1, i64 %281
  %283 = load i32, i32* %282, align 4
  %284 = add nsw i32 %283, %280
  %285 = sext i32 %284 to i64
  %286 = getelementptr inbounds %class.RSCoder, %class.RSCoder* %0, i64 0, i32 0, i64 %285
  %287 = load i32, i32* %286, align 4
  br label %288

288:                                              ; preds = %279, %274
  %289 = phi i32 [ %287, %279 ], [ 0, %274 ]
  %290 = add nuw nsw i64 %275, %264
  %291 = getelementptr inbounds [512 x i32], [512 x i32]* %7, i64 0, i64 %290
  %292 = load i32, i32* %291, align 4
  %293 = xor i32 %292, %289
  store i32 %293, i32* %291, align 4
  %294 = add nuw nsw i64 %275, 1
  %295 = icmp slt i64 %294, %273
  br i1 %295, label %274, label %296

296:                                              ; preds = %288, %263
  %297 = add nuw nsw i64 %264, 1
  %298 = icmp eq i64 %297, %261
  br i1 %298, label %299, label %263

299:                                              ; preds = %296, %257
  %300 = getelementptr inbounds %class.RSCoder, %class.RSCoder* %0, i64 0, i32 4
  %301 = load i32, i32* %300, align 4
  %302 = icmp sle i32 %301, %258
  %303 = icmp sgt i32 %301, 0
  %304 = and i1 %302, %303
  br i1 %304, label %305, label %390

305:                                              ; preds = %299, %384
  %306 = phi i32 [ %385, %384 ], [ %301, %299 ]
  %307 = phi i32 [ %389, %384 ], [ %258, %299 ]
  %308 = phi i64 [ %386, %384 ], [ 0, %299 ]
  %309 = getelementptr inbounds %class.RSCoder, %class.RSCoder* %0, i64 0, i32 3, i64 %308
  %310 = load i32, i32* %309, align 4
  %311 = sub nsw i32 255, %310
  %312 = icmp sgt i32 %307, 0
  br i1 %312, label %313, label %315

313:                                              ; preds = %305
  %314 = sext i32 %307 to i64
  br label %322

315:                                              ; preds = %347, %305
  %316 = phi i32 [ 0, %305 ], [ %349, %347 ]
  %317 = xor i32 %310, -1
  %318 = add i32 %317, %2
  %319 = icmp sgt i32 %318, -1
  %320 = icmp slt i32 %318, %2
  %321 = and i1 %319, %320
  br i1 %321, label %352, label %384

322:                                              ; preds = %313, %347
  %323 = phi i64 [ 0, %313 ], [ %350, %347 ]
  %324 = phi i32 [ 0, %313 ], [ %349, %347 ]
  %325 = getelementptr inbounds [512 x i32], [512 x i32]* %7, i64 0, i64 %323
  %326 = load i32, i32* %325, align 4
  %327 = trunc i64 %323 to i32
  %328 = mul nsw i32 %311, %327
  %329 = srem i32 %328, 255
  %330 = sext i32 %329 to i64
  %331 = getelementptr inbounds %class.RSCoder, %class.RSCoder* %0, i64 0, i32 0, i64 %330
  %332 = load i32, i32* %331, align 4
  %333 = icmp eq i32 %326, 0
  %334 = icmp eq i32 %332, 0
  %335 = or i1 %333, %334
  br i1 %335, label %347, label %336

336:                                              ; preds = %322
  %337 = sext i32 %326 to i64
  %338 = getelementptr inbounds %class.RSCoder, %class.RSCoder* %0, i64 0, i32 1, i64 %337
  %339 = load i32, i32* %338, align 4
  %340 = sext i32 %332 to i64
  %341 = getelementptr inbounds %class.RSCoder, %class.RSCoder* %0, i64 0, i32 1, i64 %340
  %342 = load i32, i32* %341, align 4
  %343 = add nsw i32 %342, %339
  %344 = sext i32 %343 to i64
  %345 = getelementptr inbounds %class.RSCoder, %class.RSCoder* %0, i64 0, i32 0, i64 %344
  %346 = load i32, i32* %345, align 4
  br label %347

347:                                              ; preds = %322, %336
  %348 = phi i32 [ %346, %336 ], [ 0, %322 ]
  %349 = xor i32 %348, %324
  %350 = add nuw nsw i64 %323, 1
  %351 = icmp slt i64 %350, %314
  br i1 %351, label %322, label %315

352:                                              ; preds = %315
  %353 = getelementptr inbounds %class.RSCoder, %class.RSCoder* %0, i64 0, i32 5, i64 %308
  %354 = load i32, i32* %353, align 4
  %355 = sext i32 %354 to i64
  %356 = getelementptr inbounds %class.RSCoder, %class.RSCoder* %0, i64 0, i32 1, i64 %355
  %357 = load i32, i32* %356, align 4
  %358 = sub nsw i32 255, %357
  %359 = sext i32 %358 to i64
  %360 = getelementptr inbounds %class.RSCoder, %class.RSCoder* %0, i64 0, i32 0, i64 %359
  %361 = load i32, i32* %360, align 4
  %362 = icmp eq i32 %316, 0
  %363 = icmp eq i32 %361, 0
  %364 = or i1 %362, %363
  br i1 %364, label %376, label %365

365:                                              ; preds = %352
  %366 = sext i32 %316 to i64
  %367 = getelementptr inbounds %class.RSCoder, %class.RSCoder* %0, i64 0, i32 1, i64 %366
  %368 = load i32, i32* %367, align 4
  %369 = sext i32 %361 to i64
  %370 = getelementptr inbounds %class.RSCoder, %class.RSCoder* %0, i64 0, i32 1, i64 %369
  %371 = load i32, i32* %370, align 4
  %372 = add nsw i32 %371, %368
  %373 = sext i32 %372 to i64
  %374 = getelementptr inbounds %class.RSCoder, %class.RSCoder* %0, i64 0, i32 0, i64 %373
  %375 = load i32, i32* %374, align 4
  br label %376

376:                                              ; preds = %352, %365
  %377 = phi i32 [ %375, %365 ], [ 0, %352 ]
  %378 = sext i32 %318 to i64
  %379 = getelementptr inbounds i8, i8* %1, i64 %378
  %380 = load i8, i8* %379, align 1
  %381 = trunc i32 %377 to i8
  %382 = xor i8 %380, %381
  store i8 %382, i8* %379, align 1
  %383 = load i32, i32* %300, align 4
  br label %384

384:                                              ; preds = %376, %315
  %385 = phi i32 [ %383, %376 ], [ %306, %315 ]
  %386 = add nuw nsw i64 %308, 1
  %387 = sext i32 %385 to i64
  %388 = icmp slt i64 %386, %387
  %389 = load i32, i32* %10, align 4
  br i1 %388, label %305, label %390

390:                                              ; preds = %384, %299
  %391 = phi i32 [ %258, %299 ], [ %389, %384 ]
  %392 = phi i32 [ %301, %299 ], [ %385, %384 ]
  %393 = icmp sle i32 %392, %391
  call void @llvm.lifetime.end.p0i8(i64 2048, i8* nonnull %8) #3
  br label %394

394:                                              ; preds = %5, %33, %390
  %395 = phi i1 [ %393, %390 ], [ true, %33 ], [ true, %5 ]
  call void @llvm.lifetime.end.p0i8(i64 2048, i8* nonnull %9) #3
  ret i1 %395

396:                                              ; preds = %84
  %397 = load i32, i32* %32, align 4
  %398 = sext i32 %86 to i64
  %399 = getelementptr inbounds %class.RSCoder, %class.RSCoder* %0, i64 0, i32 1, i64 %398
  %400 = load i32, i32* %399, align 4
  %401 = add nsw i32 %400, %397
  %402 = sext i32 %401 to i64
  %403 = getelementptr inbounds %class.RSCoder, %class.RSCoder* %0, i64 0, i32 0, i64 %402
  %404 = load i32, i32* %403, align 4
  br label %405

405:                                              ; preds = %396, %84
  %406 = phi i32 [ %404, %396 ], [ 0, %84 ]
  %407 = xor i32 %406, %90
  %408 = add nuw nsw i64 %67, 2
  %409 = add i64 %69, -2
  %410 = icmp eq i64 %409, 0
  br i1 %410, label %36, label %66
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #2

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nofree norecurse nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = distinct !{!2, !3}
!3 = !{!"llvm.loop.isvectorized", i32 1}
!4 = distinct !{!4, !3}
!5 = !{i8 0, i8 2}
