; ModuleID = '../../third_party/skia/src/core/SkDrawShadowInfo.cpp'
source_filename = "../../third_party/skia/src/core/SkDrawShadowInfo.cpp"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%struct.SkPoint3 = type { float, float, float }
%struct.SkRect = type { float, float, float, float }
%class.SkMatrix = type { [9 x float], i32 }
%struct.SkPoint = type { float, float }
%class.SkPath = type <{ %class.sk_sp, i32, %"struct.std::__1::atomic.3", %"struct.std::__1::atomic.3", i8, i8 }>
%class.sk_sp = type { %class.SkPathRef* }
%class.SkPathRef = type <{ %class.SkNVRefCnt, %struct.SkRect, [4 x i8], %class.SkTDArray, %class.SkTDArray.1, %class.SkTDArray.2, i32, [4 x i8], %"class.SkIDChangeListener::List", i8, i8, i8, i8, i8, i8, i8, i8 }>
%class.SkNVRefCnt = type { %"struct.std::__1::atomic" }
%"struct.std::__1::atomic" = type { %"struct.std::__1::__atomic_base" }
%"struct.std::__1::__atomic_base" = type { %"struct.std::__1::__atomic_base.0" }
%"struct.std::__1::__atomic_base.0" = type { %"struct.std::__1::__cxx_atomic_impl" }
%"struct.std::__1::__cxx_atomic_impl" = type { %"struct.std::__1::__cxx_atomic_base_impl" }
%"struct.std::__1::__cxx_atomic_base_impl" = type { i32 }
%class.SkTDArray = type { %struct.SkPoint*, i32, i32 }
%class.SkTDArray.1 = type { i8*, i32, i32 }
%class.SkTDArray.2 = type { float*, i32, i32 }
%"class.SkIDChangeListener::List" = type { %class.SkMutex, %class.SkTDArray.8 }
%class.SkMutex = type { %class.SkSemaphore }
%class.SkSemaphore = type { %"struct.std::__1::atomic", %class.SkOnce, %"struct.SkSemaphore::OSSemaphore"* }
%class.SkOnce = type { %"struct.std::__1::atomic.3" }
%"struct.SkSemaphore::OSSemaphore" = type opaque
%class.SkTDArray.8 = type { %class.SkIDChangeListener**, i32, i32 }
%class.SkIDChangeListener = type { %class.SkRefCnt.base, %"struct.std::__1::atomic.9", [3 x i8] }
%class.SkRefCnt.base = type { %class.SkRefCntBase.base }
%class.SkRefCntBase.base = type <{ i32 (...)**, %"struct.std::__1::atomic" }>
%"struct.std::__1::atomic.9" = type { %"struct.std::__1::__atomic_base.10" }
%"struct.std::__1::__atomic_base.10" = type { %"struct.std::__1::__cxx_atomic_impl.11" }
%"struct.std::__1::__cxx_atomic_impl.11" = type { %"struct.std::__1::__cxx_atomic_base_impl.12" }
%"struct.std::__1::__cxx_atomic_base_impl.12" = type { i8 }
%"struct.std::__1::atomic.3" = type { %"struct.std::__1::__atomic_base.4" }
%"struct.std::__1::__atomic_base.4" = type { %"struct.std::__1::__atomic_base.5" }
%"struct.std::__1::__atomic_base.5" = type { %"struct.std::__1::__cxx_atomic_impl.6" }
%"struct.std::__1::__cxx_atomic_impl.6" = type { %"struct.std::__1::__cxx_atomic_base_impl.7" }
%"struct.std::__1::__cxx_atomic_base_impl.7" = type { i8 }
%struct.SkDrawShadowRec = type { %struct.SkPoint3, %struct.SkPoint3, float, i32, i32, i32 }

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN19SkDrawShadowMetrics22GetSpotShadowTransformERK8SkPoint3fRK8SkMatrixS2_RK6SkRectbPS3_Pf(%struct.SkPoint3* nocapture readonly dereferenceable(12), float, %class.SkMatrix* dereferenceable(40), %struct.SkPoint3* nocapture readonly dereferenceable(12), %struct.SkRect* dereferenceable(16), i1 zeroext, %class.SkMatrix*, float* nocapture) local_unnamed_addr #0 {
  %9 = alloca [4 x %struct.SkPoint], align 16
  %10 = alloca %class.SkMatrix, align 4
  %11 = bitcast %struct.SkPoint3* %3 to <2 x float>*
  %12 = load <2 x float>, <2 x float>* %11, align 4
  %13 = getelementptr inbounds %struct.SkPoint3, %struct.SkPoint3* %3, i64 0, i32 2
  %14 = load float, float* %13, align 4
  %15 = getelementptr inbounds %struct.SkRect, %struct.SkRect* %4, i64 0, i32 0
  %16 = load float, float* %15, align 4
  %17 = fmul float %16, 5.000000e-01
  %18 = getelementptr inbounds %struct.SkRect, %struct.SkRect* %4, i64 0, i32 2
  %19 = load float, float* %18, align 4
  %20 = fmul float %19, 5.000000e-01
  %21 = fadd float %17, %20
  %22 = getelementptr inbounds %struct.SkRect, %struct.SkRect* %4, i64 0, i32 1
  %23 = load float, float* %22, align 4
  %24 = fmul float %23, 5.000000e-01
  %25 = getelementptr inbounds %struct.SkRect, %struct.SkRect* %4, i64 0, i32 3
  %26 = load float, float* %25, align 4
  %27 = fmul float %26, 5.000000e-01
  %28 = fadd float %24, %27
  %29 = extractelement <2 x float> %12, i32 0
  %30 = fmul float %29, %21
  %31 = extractelement <2 x float> %12, i32 1
  %32 = fmul float %31, %28
  %33 = fadd float %30, %32
  %34 = fadd float %14, %33
  %35 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %2, i64 0, i32 1
  %36 = load i32, i32* %35, align 4
  %37 = and i32 %36, 192
  %38 = icmp eq i32 %37, 128
  br i1 %38, label %39, label %42

39:                                               ; preds = %8
  %40 = tail call zeroext i8 @_ZNK8SkMatrix26computePerspectiveTypeMaskEv(%class.SkMatrix* %2) #4
  %41 = zext i8 %40 to i32
  store i32 %41, i32* %35, align 4
  br label %42

42:                                               ; preds = %8, %39
  %43 = phi i32 [ %41, %39 ], [ %36, %8 ]
  %44 = and i32 %43, 8
  %45 = icmp eq i32 %44, 0
  %46 = or i1 %45, %5
  br i1 %46, label %47, label %96

47:                                               ; preds = %42
  %48 = bitcast %struct.SkPoint3* %0 to <2 x float>*
  %49 = load <2 x float>, <2 x float>* %48, align 4
  %50 = getelementptr inbounds %struct.SkPoint3, %struct.SkPoint3* %0, i64 0, i32 2
  %51 = load float, float* %50, align 4
  br i1 %5, label %52, label %55

52:                                               ; preds = %47
  %53 = fmul float %34, %1
  store float %53, float* %7, align 4
  %54 = insertelement <2 x float> <float undef, float 1.000000e+00>, float %34, i32 0
  br label %68

55:                                               ; preds = %47
  %56 = fsub float %51, %34
  %57 = insertelement <2 x float> undef, float %34, i32 0
  %58 = insertelement <2 x float> %57, float %51, i32 1
  %59 = insertelement <2 x float> undef, float %56, i32 0
  %60 = shufflevector <2 x float> %59, <2 x float> undef, <2 x i32> zeroinitializer
  %61 = fdiv <2 x float> %58, %60
  %62 = fcmp ogt <2 x float> %61, <float 0x3FEE666660000000, float 0x3FFF333340000000>
  %63 = select <2 x i1> %62, <2 x float> <float 0x3FEE666660000000, float 0x3FFF333340000000>, <2 x float> %61
  %64 = fcmp ogt <2 x float> %63, <float 0.000000e+00, float 1.000000e+00>
  %65 = select <2 x i1> %64, <2 x float> %63, <2 x float> <float 0.000000e+00, float 1.000000e+00>
  %66 = extractelement <2 x float> %65, i32 0
  %67 = fmul float %66, %1
  store float %67, float* %7, align 4
  br label %68

68:                                               ; preds = %55, %52
  %69 = phi <2 x float> [ %65, %55 ], [ %54, %52 ]
  %70 = extractelement <2 x float> %69, i32 0
  %71 = fsub float -0.000000e+00, %70
  %72 = insertelement <2 x float> undef, float %71, i32 0
  %73 = shufflevector <2 x float> %72, <2 x float> undef, <2 x i32> zeroinitializer
  %74 = fmul <2 x float> %49, %73
  %75 = extractelement <2 x float> %74, i32 0
  %76 = extractelement <2 x float> %74, i32 1
  %77 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %6, i64 0, i32 0, i64 0
  %78 = extractelement <2 x float> %69, i32 1
  store float %78, float* %77, align 4
  %79 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %6, i64 0, i32 0, i64 1
  store float 0.000000e+00, float* %79, align 4
  %80 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %6, i64 0, i32 0, i64 2
  store float %75, float* %80, align 4
  %81 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %6, i64 0, i32 0, i64 3
  store float 0.000000e+00, float* %81, align 4
  %82 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %6, i64 0, i32 0, i64 4
  store float %78, float* %82, align 4
  %83 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %6, i64 0, i32 0, i64 5
  store float %76, float* %83, align 4
  %84 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %6, i64 0, i32 0, i64 6
  store float 0.000000e+00, float* %84, align 4
  %85 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %6, i64 0, i32 0, i64 7
  store float 0.000000e+00, float* %85, align 4
  %86 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %6, i64 0, i32 0, i64 8
  store float 1.000000e+00, float* %86, align 4
  %87 = fcmp une float %78, 1.000000e+00
  %88 = fcmp une float %75, 0.000000e+00
  %89 = fcmp une float %76, 0.000000e+00
  %90 = or i1 %88, %89
  %91 = zext i1 %90 to i32
  %92 = select i1 %87, i32 18, i32 16
  %93 = or i32 %92, %91
  %94 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %6, i64 0, i32 1
  store i32 %93, i32* %94, align 4
  %95 = tail call dereferenceable(40) %class.SkMatrix* @_ZN8SkMatrix9preConcatERKS_(%class.SkMatrix* %6, %class.SkMatrix* dereferenceable(40) %2) #4
  br label %245

96:                                               ; preds = %42
  %97 = load float, float* %18, align 4
  %98 = load float, float* %15, align 4
  %99 = fsub float %97, %98
  %100 = tail call float @llvm.fabs.f32(float %99) #4
  %101 = fcmp ugt float %100, 0x3F30000000000000
  br i1 %101, label %102, label %245

102:                                              ; preds = %96
  %103 = load float, float* %25, align 4
  %104 = load float, float* %22, align 4
  %105 = fsub float %103, %104
  %106 = tail call float @llvm.fabs.f32(float %105) #4
  %107 = fcmp ugt float %106, 0x3F30000000000000
  br i1 %107, label %108, label %245

108:                                              ; preds = %102
  %109 = bitcast [4 x %struct.SkPoint]* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %109) #4
  %110 = getelementptr inbounds [4 x %struct.SkPoint], [4 x %struct.SkPoint]* %9, i64 0, i64 0
  %111 = bitcast [4 x %struct.SkPoint]* %9 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %111, i8 -1, i64 32, i1 false)
  call void @_ZNK6SkRect6toQuadEP7SkPoint(%struct.SkRect* %4, %struct.SkPoint* nonnull %110) #4
  call void @_ZNK8SkMatrix9mapPointsEP7SkPointPKS0_i(%class.SkMatrix* %2, %struct.SkPoint* nonnull %110, %struct.SkPoint* nonnull %110, i32 4) #4
  %112 = call zeroext i1 @_Z17SkIsConvexPolygonPK7SkPointi(%struct.SkPoint* nonnull %110, i32 4) #4
  br i1 %112, label %114, label %113

113:                                              ; preds = %108
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %109) #4
  br label %245

114:                                              ; preds = %108
  %115 = getelementptr inbounds [4 x %struct.SkPoint], [4 x %struct.SkPoint]* %9, i64 0, i64 3, i32 1
  %116 = getelementptr inbounds [4 x %struct.SkPoint], [4 x %struct.SkPoint]* %9, i64 0, i64 3, i32 0
  %117 = getelementptr inbounds [4 x %struct.SkPoint], [4 x %struct.SkPoint]* %9, i64 0, i64 2, i32 1
  %118 = getelementptr inbounds [4 x %struct.SkPoint], [4 x %struct.SkPoint]* %9, i64 0, i64 2, i32 0
  %119 = getelementptr inbounds [4 x %struct.SkPoint], [4 x %struct.SkPoint]* %9, i64 0, i64 1, i32 1
  %120 = getelementptr inbounds [4 x %struct.SkPoint], [4 x %struct.SkPoint]* %9, i64 0, i64 1, i32 0
  %121 = bitcast %struct.SkRect* %4 to <2 x float>*
  %122 = load <2 x float>, <2 x float>* %121, align 4
  %123 = fmul <2 x float> %12, %122
  %124 = extractelement <2 x float> %123, i32 0
  %125 = extractelement <2 x float> %123, i32 1
  %126 = fadd float %124, %125
  %127 = fadd float %14, %126
  %128 = bitcast [4 x %struct.SkPoint]* %9 to <2 x float>*
  %129 = load <2 x float>, <2 x float>* %128, align 16
  %130 = load float, float* %18, align 4
  %131 = fmul float %29, %130
  %132 = fadd float %125, %131
  %133 = fadd float %14, %132
  %134 = load float, float* %120, align 8
  %135 = load float, float* %119, align 4
  %136 = load float, float* %25, align 4
  %137 = fmul float %31, %136
  %138 = fadd float %131, %137
  %139 = fadd float %14, %138
  %140 = load float, float* %118, align 16
  %141 = load float, float* %117, align 4
  %142 = fadd float %124, %137
  %143 = fadd float %14, %142
  %144 = load float, float* %116, align 8
  %145 = load float, float* %115, align 4
  %146 = getelementptr inbounds %struct.SkPoint3, %struct.SkPoint3* %0, i64 0, i32 2
  %147 = load float, float* %146, align 4
  %148 = bitcast %struct.SkPoint3* %0 to <2 x float>*
  %149 = load <2 x float>, <2 x float>* %148, align 4
  %150 = fsub float %147, %127
  %151 = fcmp ugt float %150, 0x3F30000000000000
  br i1 %151, label %152, label %244

152:                                              ; preds = %114
  %153 = fdiv float %127, %150
  %154 = fsub <2 x float> %149, %129
  %155 = insertelement <2 x float> undef, float %153, i32 0
  %156 = shufflevector <2 x float> %155, <2 x float> undef, <2 x i32> zeroinitializer
  %157 = fmul <2 x float> %156, %154
  %158 = fsub <2 x float> %129, %157
  %159 = fsub float %147, %133
  %160 = fcmp ugt float %159, 0x3F30000000000000
  br i1 %160, label %247, label %244

161:                                              ; preds = %269
  %162 = insertelement <2 x float> undef, float %291, i32 0
  %163 = insertelement <2 x float> %162, float %294, i32 1
  %164 = insertelement <2 x float> %162, float %276, i32 1
  %165 = fsub <2 x float> %164, %158
  %166 = fsub float %294, %277
  %167 = fmul float %324, %166
  %168 = extractelement <2 x float> %165, i32 0
  %169 = extractelement <2 x float> %165, i32 1
  %170 = fmul float %169, %168
  %171 = fsub float %167, %170
  %172 = fcmp ogt float %171, 0.000000e+00
  br i1 %172, label %173, label %179

173:                                              ; preds = %161
  %174 = fsub float -0.000000e+00, %291
  %175 = insertelement <2 x float> undef, float %174, i32 0
  %176 = fsub float -0.000000e+00, %294
  %177 = insertelement <2 x float> %175, float %176, i32 1
  %178 = fsub float -0.000000e+00, %297
  br label %179

179:                                              ; preds = %173, %161
  %180 = phi <2 x float> [ %177, %173 ], [ %163, %161 ]
  %181 = phi float [ %178, %173 ], [ %297, %161 ]
  %182 = fsub float %252, %279
  %183 = fmul float %182, %166
  %184 = fmul float %278, %168
  %185 = fsub float %183, %184
  %186 = fcmp olt float %185, 0.000000e+00
  %187 = fsub <2 x float> <float -0.000000e+00, float -0.000000e+00>, %322
  %188 = fsub float -0.000000e+00, %327
  %189 = select i1 %186, <2 x float> %187, <2 x float> %322
  %190 = select i1 %186, float %188, float %327
  %191 = shufflevector <2 x float> %180, <2 x float> undef, <4 x i32> <i32 undef, i32 1, i32 undef, i32 undef>
  %192 = extractelement <2 x float> %180, i32 0
  %193 = extractelement <2 x float> %189, i32 0
  %194 = insertelement <4 x float> undef, float %192, i32 0
  %195 = insertelement <4 x float> %194, float %193, i32 1
  %196 = insertelement <4 x float> %195, float %340, i32 2
  %197 = shufflevector <4 x float> %196, <4 x float> %191, <4 x i32> <i32 0, i32 1, i32 2, i32 5>
  %198 = insertelement <4 x float> undef, float %346, i32 0
  %199 = shufflevector <4 x float> %198, <4 x float> undef, <4 x i32> zeroinitializer
  %200 = fdiv <4 x float> %197, %199
  %201 = extractelement <2 x float> %189, i32 1
  %202 = insertelement <4 x float> undef, float %201, i32 0
  %203 = insertelement <4 x float> %202, float %343, i32 1
  %204 = insertelement <4 x float> %203, float %181, i32 2
  %205 = insertelement <4 x float> %204, float %190, i32 3
  %206 = fdiv <4 x float> %205, %199
  %207 = bitcast %class.SkMatrix* %6 to <4 x float>*
  store <4 x float> %200, <4 x float>* %207, align 4
  %208 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %6, i64 0, i32 0, i64 4
  %209 = bitcast float* %208 to <4 x float>*
  store <4 x float> %206, <4 x float>* %209, align 4
  %210 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %6, i64 0, i32 0, i64 8
  store float 1.000000e+00, float* %210, align 4
  %211 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %6, i64 0, i32 1
  store i32 128, i32* %211, align 4
  %212 = bitcast %class.SkMatrix* %10 to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %212) #4
  %213 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %10, i64 0, i32 1
  %214 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %10, i64 0, i32 0, i64 0
  %215 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %10, i64 0, i32 0, i64 1
  %216 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %10, i64 0, i32 0, i64 2
  %217 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %10, i64 0, i32 0, i64 3
  %218 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %10, i64 0, i32 0, i64 4
  %219 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %10, i64 0, i32 0, i64 5
  %220 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %10, i64 0, i32 0, i64 6
  %221 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %10, i64 0, i32 0, i64 7
  %222 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %10, i64 0, i32 0, i64 8
  %223 = load float, float* %18, align 4
  %224 = load float, float* %15, align 4
  %225 = fsub float %223, %224
  %226 = fdiv float 2.000000e+00, %225
  %227 = load float, float* %25, align 4
  %228 = load float, float* %22, align 4
  %229 = fsub float %227, %228
  %230 = fdiv float 2.000000e+00, %229
  %231 = fmul float %224, %226
  %232 = fsub float -1.000000e+00, %231
  %233 = fmul float %228, %230
  %234 = fsub float -1.000000e+00, %233
  store float %226, float* %214, align 4
  store float 0.000000e+00, float* %215, align 4
  store float %232, float* %216, align 4
  store float 0.000000e+00, float* %217, align 4
  store float %230, float* %218, align 4
  store float %234, float* %219, align 4
  store float 0.000000e+00, float* %220, align 4
  store float 0.000000e+00, float* %221, align 4
  store float 1.000000e+00, float* %222, align 4
  store i32 128, i32* %213, align 4
  %235 = call dereferenceable(40) %class.SkMatrix* @_ZN8SkMatrix9preConcatERKS_(%class.SkMatrix* %6, %class.SkMatrix* nonnull dereferenceable(40) %10) #4
  %236 = load float, float* %146, align 4
  %237 = fsub float %236, %34
  %238 = fdiv float %34, %237
  %239 = fcmp ogt float %238, 0x3FEE666660000000
  %240 = select i1 %239, float 0x3FEE666660000000, float %238
  %241 = fcmp ogt float %240, 0.000000e+00
  %242 = select i1 %241, float %240, float 0.000000e+00
  %243 = fmul float %242, %1
  store float %243, float* %7, align 4
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %212) #4
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %109) #4
  br label %245

244:                                              ; preds = %114, %152, %247, %259, %269
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %109) #4
  br label %245

245:                                              ; preds = %102, %96, %68, %179, %244, %113
  %246 = phi i1 [ false, %102 ], [ false, %96 ], [ false, %113 ], [ false, %244 ], [ true, %179 ], [ true, %68 ]
  ret i1 %246

247:                                              ; preds = %152
  %248 = fdiv float %133, %159
  %249 = extractelement <2 x float> %149, i32 0
  %250 = fsub float %249, %134
  %251 = fmul float %248, %250
  %252 = fsub float %134, %251
  %253 = extractelement <2 x float> %149, i32 1
  %254 = fsub float %253, %135
  %255 = fmul float %248, %254
  %256 = fsub float %135, %255
  %257 = fsub float %147, %139
  %258 = fcmp ugt float %257, 0x3F30000000000000
  br i1 %258, label %259, label %244

259:                                              ; preds = %247
  %260 = fdiv float %139, %257
  %261 = fsub float %249, %140
  %262 = fmul float %260, %261
  %263 = fsub float %140, %262
  %264 = fsub float %253, %141
  %265 = fmul float %260, %264
  %266 = fsub float %141, %265
  %267 = fsub float %147, %143
  %268 = fcmp ugt float %267, 0x3F30000000000000
  br i1 %268, label %269, label %244

269:                                              ; preds = %259
  %270 = fdiv float %143, %267
  %271 = fsub float %249, %144
  %272 = fmul float %270, %271
  %273 = fsub float %144, %272
  %274 = fsub float %253, %145
  %275 = fmul float %270, %274
  %276 = fsub float %145, %275
  %277 = extractelement <2 x float> %158, i32 1
  %278 = fsub float %256, %277
  %279 = extractelement <2 x float> %158, i32 0
  %280 = fsub float %279, %252
  %281 = fmul float %277, %252
  %282 = fmul float %256, %279
  %283 = fsub float %281, %282
  %284 = fsub float %266, %276
  %285 = fsub float %273, %263
  %286 = fmul float %276, %263
  %287 = fmul float %266, %273
  %288 = fsub float %286, %287
  %289 = fmul float %280, %288
  %290 = fmul float %283, %285
  %291 = fsub float %289, %290
  %292 = fmul float %283, %284
  %293 = fmul float %278, %288
  %294 = fsub float %292, %293
  %295 = fmul float %278, %285
  %296 = fmul float %280, %284
  %297 = fsub float %295, %296
  %298 = fsub float %277, %276
  %299 = insertelement <2 x float> undef, float %273, i32 0
  %300 = insertelement <2 x float> %299, float %256, i32 1
  %301 = insertelement <2 x float> undef, float %279, i32 0
  %302 = insertelement <2 x float> %301, float %266, i32 1
  %303 = fsub <2 x float> %300, %302
  %304 = fsub float %263, %252
  %305 = insertelement <2 x float> undef, float %252, i32 0
  %306 = shufflevector <2 x float> %305, <2 x float> %158, <2 x i32> <i32 0, i32 2>
  %307 = insertelement <2 x float> undef, float %266, i32 0
  %308 = insertelement <2 x float> %307, float %276, i32 1
  %309 = fmul <2 x float> %306, %308
  %310 = insertelement <2 x float> %158, float %256, i32 0
  %311 = insertelement <2 x float> undef, float %263, i32 0
  %312 = insertelement <2 x float> %311, float %273, i32 1
  %313 = fmul <2 x float> %310, %312
  %314 = fsub <2 x float> %309, %313
  %315 = fmul <2 x float> %303, %314
  %316 = extractelement <2 x float> %314, i32 1
  %317 = insertelement <2 x float> undef, float %316, i32 0
  %318 = insertelement <2 x float> %317, float %298, i32 1
  %319 = insertelement <2 x float> undef, float %304, i32 0
  %320 = shufflevector <2 x float> %319, <2 x float> %314, <2 x i32> <i32 0, i32 2>
  %321 = fmul <2 x float> %318, %320
  %322 = fsub <2 x float> %315, %321
  %323 = fmul float %298, %304
  %324 = extractelement <2 x float> %303, i32 0
  %325 = extractelement <2 x float> %303, i32 1
  %326 = fmul float %325, %324
  %327 = fsub float %323, %326
  %328 = fsub float %277, %266
  %329 = fsub float %263, %279
  %330 = fmul float %279, %266
  %331 = fmul float %277, %263
  %332 = fsub float %330, %331
  %333 = fsub float %256, %276
  %334 = fsub float %273, %252
  %335 = fmul float %252, %276
  %336 = fmul float %256, %273
  %337 = fsub float %335, %336
  %338 = fmul float %337, %329
  %339 = fmul float %334, %332
  %340 = fsub float %338, %339
  %341 = fmul float %333, %332
  %342 = fmul float %328, %337
  %343 = fsub float %341, %342
  %344 = fmul float %328, %334
  %345 = fmul float %333, %329
  %346 = fsub float %344, %345
  %347 = call float @llvm.fabs.f32(float %346) #4
  %348 = fcmp ugt float %347, 0x3F30000000000000
  br i1 %348, label %161, label %244
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #1

declare dereferenceable(40) %class.SkMatrix* @_ZN8SkMatrix9preConcatERKS_(%class.SkMatrix*, %class.SkMatrix* dereferenceable(40)) local_unnamed_addr #2

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

declare zeroext i1 @_Z17SkIsConvexPolygonPK7SkPointi(%struct.SkPoint*, i32) local_unnamed_addr #2

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN19SkDrawShadowMetrics14GetLocalBoundsERK6SkPathRK15SkDrawShadowRecRK8SkMatrixP6SkRect(%class.SkPath* nocapture readonly dereferenceable(16), %struct.SkDrawShadowRec* nocapture readonly dereferenceable(40), %class.SkMatrix* dereferenceable(40), %struct.SkRect*) local_unnamed_addr #0 {
  %5 = alloca <4 x float>, align 16
  %6 = bitcast <4 x float>* %5 to %struct.SkRect*
  %7 = alloca i32, align 4
  %8 = alloca float, align 4
  %9 = alloca float, align 4
  %10 = alloca float, align 4
  %11 = alloca <2 x float>, align 8
  %12 = bitcast <2 x float>* %11 to %struct.SkPoint*
  %13 = alloca %struct.SkPoint3, align 8
  %14 = alloca <2 x float>, align 8
  %15 = bitcast <2 x float>* %14 to %struct.SkPoint*
  %16 = alloca %struct.SkPoint3, align 8
  %17 = alloca %class.SkMatrix, align 16
  %18 = alloca <4 x float>, align 16
  %19 = bitcast <4 x float>* %18 to %struct.SkRect*
  %20 = alloca %class.SkMatrix, align 16
  %21 = bitcast <4 x float>* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %21) #4
  %22 = getelementptr inbounds %struct.SkRect, %struct.SkRect* %6, i64 0, i32 2
  %23 = getelementptr inbounds %struct.SkRect, %struct.SkRect* %6, i64 0, i32 3
  %24 = getelementptr inbounds %class.SkPath, %class.SkPath* %0, i64 0, i32 0, i32 0
  %25 = bitcast <4 x float>* %5 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %25, i8 -1, i64 16, i1 false)
  %26 = load %class.SkPathRef*, %class.SkPathRef** %24, align 8
  %27 = getelementptr inbounds %class.SkPathRef, %class.SkPathRef* %26, i64 0, i32 9
  %28 = load i8, i8* %27, align 8
  %29 = icmp eq i8 %28, 0
  br i1 %29, label %39, label %30

30:                                               ; preds = %4
  %31 = getelementptr inbounds %class.SkPathRef, %class.SkPathRef* %26, i64 0, i32 1
  %32 = getelementptr inbounds %class.SkPathRef, %class.SkPathRef* %26, i64 0, i32 3, i32 0
  %33 = load %struct.SkPoint*, %struct.SkPoint** %32, align 8
  %34 = getelementptr inbounds %class.SkPathRef, %class.SkPathRef* %26, i64 0, i32 3, i32 2
  %35 = load i32, i32* %34, align 4
  %36 = tail call zeroext i1 @_ZN6SkRect14setBoundsCheckEPK7SkPointi(%struct.SkRect* %31, %struct.SkPoint* %33, i32 %35) #4
  %37 = getelementptr inbounds %class.SkPathRef, %class.SkPathRef* %26, i64 0, i32 10
  %38 = zext i1 %36 to i8
  store i8 %38, i8* %37, align 1
  store i8 0, i8* %27, align 8
  br label %39

39:                                               ; preds = %4, %30
  %40 = getelementptr inbounds %class.SkPathRef, %class.SkPathRef* %26, i64 0, i32 1
  %41 = bitcast %struct.SkRect* %40 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 16 %21, i8* align 4 %41, i64 16, i1 false)
  %42 = bitcast i32* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %42)
  store i32 -1, i32* %7, align 4
  %43 = bitcast %struct.SkDrawShadowRec* %1 to <2 x float>*
  %44 = load <2 x float>, <2 x float>* %43, align 4
  %45 = call <2 x float> @llvm.fabs.v2f32(<2 x float> %44)
  %46 = fcmp ugt <2 x float> %45, <float 0x3F30000000000000, float 0x3F30000000000000>
  %47 = extractelement <2 x i1> %46, i32 0
  %48 = extractelement <2 x i1> %46, i32 1
  %49 = or i1 %47, %48
  br i1 %49, label %54, label %50

50:                                               ; preds = %39
  %51 = getelementptr inbounds %struct.SkDrawShadowRec, %struct.SkDrawShadowRec* %1, i64 0, i32 0, i32 2
  %52 = bitcast float* %51 to i32*
  %53 = load i32, i32* %52, align 4
  store i32 %53, i32* %7, align 4
  br label %94

54:                                               ; preds = %39
  %55 = bitcast <4 x float>* %5 to <2 x float>*
  %56 = load <2 x float>, <2 x float>* %55, align 16
  %57 = fmul <2 x float> %56, %44
  %58 = extractelement <2 x float> %57, i32 0
  %59 = extractelement <2 x float> %57, i32 1
  %60 = fadd float %58, %59
  %61 = getelementptr inbounds %struct.SkDrawShadowRec, %struct.SkDrawShadowRec* %1, i64 0, i32 0, i32 2
  %62 = load float, float* %61, align 4
  %63 = fadd float %62, %60
  %64 = bitcast i32* %7 to float*
  store float %63, float* %64, align 4
  %65 = bitcast float* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %65)
  %66 = load float, float* %22, align 8
  %67 = extractelement <2 x float> %44, i32 0
  %68 = fmul float %67, %66
  %69 = fadd float %59, %68
  %70 = fadd float %62, %69
  store float %70, float* %8, align 4
  %71 = fcmp olt float %63, %70
  %72 = select i1 %71, float* %8, float* %64
  %73 = bitcast float* %72 to i32*
  %74 = load i32, i32* %73, align 4
  store i32 %74, i32* %7, align 4
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %65)
  %75 = bitcast float* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %75)
  %76 = load float, float* %23, align 4
  %77 = extractelement <2 x float> %44, i32 1
  %78 = fmul float %77, %76
  %79 = fadd float %58, %78
  %80 = fadd float %62, %79
  store float %80, float* %9, align 4
  %81 = bitcast i32 %74 to float
  %82 = fcmp ogt float %80, %81
  %83 = select i1 %82, float* %9, float* %64
  %84 = bitcast float* %83 to i32*
  %85 = load i32, i32* %84, align 4
  store i32 %85, i32* %7, align 4
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %75)
  %86 = bitcast float* %10 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %86)
  %87 = fadd float %68, %78
  %88 = fadd float %62, %87
  store float %88, float* %10, align 4
  %89 = bitcast i32 %85 to float
  %90 = fcmp ogt float %88, %89
  %91 = select i1 %90, float* %10, float* %64
  %92 = bitcast float* %91 to i32*
  %93 = load i32, i32* %92, align 4
  store i32 %93, i32* %7, align 4
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %86)
  br label %94

94:                                               ; preds = %54, %50
  %95 = phi i32 [ %93, %54 ], [ %53, %50 ]
  %96 = bitcast i32 %95 to float
  %97 = bitcast <2 x float>* %11 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %97) #4
  %98 = getelementptr inbounds <2 x float>, <2 x float>* %11, i64 0, i64 0
  store float 0xFFFFFFFFE0000000, float* %98, align 8
  %99 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %12, i64 0, i32 1
  store float 0xFFFFFFFFE0000000, float* %99, align 4
  %100 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %2, i64 0, i32 1
  %101 = load i32, i32* %100, align 4
  %102 = and i32 %101, 192
  %103 = icmp eq i32 %102, 128
  br i1 %103, label %104, label %107

104:                                              ; preds = %94
  %105 = tail call zeroext i8 @_ZNK8SkMatrix26computePerspectiveTypeMaskEv(%class.SkMatrix* %2) #4
  %106 = zext i8 %105 to i32
  store i32 %106, i32* %100, align 4
  br label %107

107:                                              ; preds = %94, %104
  %108 = phi i32 [ %106, %104 ], [ %101, %94 ]
  %109 = and i32 %108, 8
  %110 = icmp eq i32 %109, 0
  br i1 %110, label %162, label %111

111:                                              ; preds = %107
  %112 = call zeroext i1 @_ZNK8SkMatrix7mapRectEP6SkRectRKS0_22SkApplyPerspectiveClip(%class.SkMatrix* %2, %struct.SkRect* nonnull %6, %struct.SkRect* nonnull dereferenceable(16) %6, i32 1) #4
  %113 = fmul float %96, 7.812500e-03
  %114 = fmul float %113, 6.400000e+01
  %115 = fcmp ogt float %114, 1.500000e+02
  %116 = select i1 %115, float 1.500000e+02, float %114
  %117 = getelementptr inbounds %struct.SkDrawShadowRec, %struct.SkDrawShadowRec* %1, i64 0, i32 5
  %118 = load i32, i32* %117, align 4
  %119 = and i32 %118, 4
  %120 = icmp eq i32 %119, 0
  br i1 %120, label %135, label %121

121:                                              ; preds = %111
  %122 = bitcast %struct.SkPoint3* %13 to i8*
  call void @llvm.lifetime.start.p0i8(i64 12, i8* nonnull %122) #4
  %123 = getelementptr inbounds %struct.SkDrawShadowRec, %struct.SkDrawShadowRec* %1, i64 0, i32 1
  %124 = bitcast %struct.SkPoint3* %123 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %122, i8* align 4 %124, i64 12, i1 false)
  %125 = call zeroext i1 @_ZN8SkPoint39normalizeEv(%struct.SkPoint3* nonnull %13) #4
  %126 = bitcast %struct.SkPoint3* %13 to <2 x float>*
  %127 = load <2 x float>, <2 x float>* %126, align 8
  %128 = getelementptr inbounds %struct.SkDrawShadowRec, %struct.SkDrawShadowRec* %1, i64 0, i32 2
  %129 = load float, float* %128, align 4
  %130 = fmul float %129, %96
  %131 = fsub float -0.000000e+00, %96
  %132 = insertelement <2 x float> undef, float %131, i32 0
  %133 = shufflevector <2 x float> %132, <2 x float> undef, <2 x i32> zeroinitializer
  %134 = fmul <2 x float> %127, %133
  store <2 x float> %134, <2 x float>* %11, align 8
  call void @llvm.lifetime.end.p0i8(i64 12, i8* nonnull %122) #4
  br label %240

135:                                              ; preds = %111
  %136 = bitcast <2 x float>* %14 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %136) #4
  %137 = getelementptr inbounds %struct.SkDrawShadowRec, %struct.SkDrawShadowRec* %1, i64 0, i32 1, i32 0
  %138 = bitcast float* %137 to i64*
  %139 = load i64, i64* %138, align 4
  %140 = bitcast <2 x float>* %14 to i64*
  store i64 %139, i64* %140, align 8
  call void @_ZNK8SkMatrix9mapPointsEP7SkPointPKS0_i(%class.SkMatrix* %2, %struct.SkPoint* nonnull %15, %struct.SkPoint* nonnull %15, i32 1) #4
  %141 = load <2 x float>, <2 x float>* %14, align 8
  %142 = getelementptr inbounds %struct.SkDrawShadowRec, %struct.SkDrawShadowRec* %1, i64 0, i32 1, i32 2
  %143 = load float, float* %142, align 4
  %144 = getelementptr inbounds %struct.SkDrawShadowRec, %struct.SkDrawShadowRec* %1, i64 0, i32 2
  %145 = load float, float* %144, align 4
  %146 = fsub float %143, %96
  %147 = fdiv float %96, %146
  %148 = fcmp ogt float %147, 0x3FEE666660000000
  %149 = select i1 %148, float 0x3FEE666660000000, float %147
  %150 = fcmp ogt float %149, 0.000000e+00
  %151 = select i1 %150, float %149, float 0.000000e+00
  %152 = fmul float %145, %151
  %153 = fdiv float %143, %146
  %154 = fcmp ogt float %153, 0x3FFF333340000000
  %155 = select i1 %154, float 0x3FFF333340000000, float %153
  %156 = fcmp ogt float %155, 1.000000e+00
  %157 = select i1 %156, float %155, float 1.000000e+00
  %158 = fsub float -0.000000e+00, %151
  %159 = insertelement <2 x float> undef, float %158, i32 0
  %160 = shufflevector <2 x float> %159, <2 x float> undef, <2 x i32> zeroinitializer
  %161 = fmul <2 x float> %141, %160
  store <2 x float> %161, <2 x float>* %11, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %136) #4
  br label %240

162:                                              ; preds = %107
  %163 = tail call float @_ZNK8SkMatrix11getMinScaleEv(%class.SkMatrix* %2) #4
  %164 = fdiv float 1.000000e+00, %163
  %165 = fmul float %96, 7.812500e-03
  %166 = fmul float %165, 6.400000e+01
  %167 = fcmp ogt float %166, 1.500000e+02
  %168 = select i1 %167, float 1.500000e+02, float %166
  %169 = fmul float %164, %168
  %170 = getelementptr inbounds %struct.SkDrawShadowRec, %struct.SkDrawShadowRec* %1, i64 0, i32 5
  %171 = load i32, i32* %170, align 4
  %172 = and i32 %171, 4
  %173 = icmp eq i32 %172, 0
  br i1 %173, label %211, label %174

174:                                              ; preds = %162
  %175 = bitcast %struct.SkPoint3* %16 to i8*
  call void @llvm.lifetime.start.p0i8(i64 12, i8* nonnull %175) #4
  %176 = getelementptr inbounds %struct.SkDrawShadowRec, %struct.SkDrawShadowRec* %1, i64 0, i32 1
  %177 = bitcast %struct.SkPoint3* %176 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %175, i8* align 4 %177, i64 12, i1 false)
  %178 = call zeroext i1 @_ZN8SkPoint39normalizeEv(%struct.SkPoint3* nonnull %16) #4
  %179 = bitcast %struct.SkPoint3* %16 to <2 x float>*
  %180 = load <2 x float>, <2 x float>* %179, align 8
  %181 = getelementptr inbounds %struct.SkDrawShadowRec, %struct.SkDrawShadowRec* %1, i64 0, i32 2
  %182 = load float, float* %181, align 4
  %183 = fmul float %182, %96
  %184 = fsub float -0.000000e+00, %96
  %185 = insertelement <2 x float> undef, float %184, i32 0
  %186 = shufflevector <2 x float> %185, <2 x float> undef, <2 x i32> zeroinitializer
  %187 = fmul <2 x float> %180, %186
  store <2 x float> %187, <2 x float>* %11, align 8
  %188 = bitcast %class.SkMatrix* %17 to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %188) #4
  %189 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %17, i64 0, i32 1
  %190 = bitcast %class.SkMatrix* %17 to <4 x float>*
  store <4 x float> <float 1.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00>, <4 x float>* %190, align 16
  %191 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %17, i64 0, i32 0, i64 4
  %192 = bitcast float* %191 to <4 x float>*
  store <4 x float> <float 1.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00>, <4 x float>* %192, align 16
  %193 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %17, i64 0, i32 0, i64 8
  store float 1.000000e+00, float* %193, align 16
  store i32 16, i32* %189, align 4
  %194 = load i32, i32* %100, align 4
  %195 = trunc i32 %194 to i8
  %196 = icmp slt i8 %195, 0
  br i1 %196, label %197, label %200

197:                                              ; preds = %174
  %198 = call zeroext i8 @_ZNK8SkMatrix15computeTypeMaskEv(%class.SkMatrix* %2) #4
  %199 = zext i8 %198 to i32
  store i32 %199, i32* %100, align 4
  br label %200

200:                                              ; preds = %197, %174
  %201 = phi i32 [ %199, %197 ], [ %194, %174 ]
  %202 = and i32 %201, 15
  %203 = icmp eq i32 %202, 0
  br i1 %203, label %204, label %206

204:                                              ; preds = %200
  %205 = call dereferenceable(40) %class.SkMatrix* @_ZN8SkMatrix5resetEv(%class.SkMatrix* nonnull %17) #4
  br label %208

206:                                              ; preds = %200
  %207 = call zeroext i1 @_ZNK8SkMatrix17invertNonIdentityEPS_(%class.SkMatrix* %2, %class.SkMatrix* nonnull %17) #4
  br i1 %207, label %208, label %209

208:                                              ; preds = %204, %206
  call void @_ZNK8SkMatrix10mapVectorsEP7SkPointPKS0_i(%class.SkMatrix* nonnull %17, %struct.SkPoint* nonnull %12, %struct.SkPoint* nonnull %12, i32 1) #4
  br label %209

209:                                              ; preds = %208, %206
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %188) #4
  call void @llvm.lifetime.end.p0i8(i64 12, i8* nonnull %175) #4
  %210 = load <2 x float>, <2 x float>* %11, align 8
  br label %235

211:                                              ; preds = %162
  %212 = getelementptr inbounds %struct.SkDrawShadowRec, %struct.SkDrawShadowRec* %1, i64 0, i32 1, i32 0
  %213 = bitcast float* %212 to <2 x float>*
  %214 = load <2 x float>, <2 x float>* %213, align 4
  %215 = getelementptr inbounds %struct.SkDrawShadowRec, %struct.SkDrawShadowRec* %1, i64 0, i32 1, i32 2
  %216 = load float, float* %215, align 4
  %217 = getelementptr inbounds %struct.SkDrawShadowRec, %struct.SkDrawShadowRec* %1, i64 0, i32 2
  %218 = load float, float* %217, align 4
  %219 = fsub float %216, %96
  %220 = fdiv float %96, %219
  %221 = fcmp ogt float %220, 0x3FEE666660000000
  %222 = select i1 %221, float 0x3FEE666660000000, float %220
  %223 = fcmp ogt float %222, 0.000000e+00
  %224 = select i1 %223, float %222, float 0.000000e+00
  %225 = fmul float %218, %224
  %226 = fdiv float %216, %219
  %227 = fcmp ogt float %226, 0x3FFF333340000000
  %228 = select i1 %227, float 0x3FFF333340000000, float %226
  %229 = fcmp ogt float %228, 1.000000e+00
  %230 = select i1 %229, float %228, float 1.000000e+00
  %231 = fsub float -0.000000e+00, %224
  %232 = insertelement <2 x float> undef, float %231, i32 0
  %233 = shufflevector <2 x float> %232, <2 x float> undef, <2 x i32> zeroinitializer
  %234 = fmul <2 x float> %214, %233
  store <2 x float> %234, <2 x float>* %11, align 8
  br label %235

235:                                              ; preds = %211, %209
  %236 = phi float [ 1.000000e+00, %209 ], [ %230, %211 ]
  %237 = phi float [ %183, %209 ], [ %225, %211 ]
  %238 = phi <2 x float> [ %210, %209 ], [ %234, %211 ]
  %239 = fmul float %164, %237
  br label %240

240:                                              ; preds = %121, %135, %235
  %241 = phi float [ 1.000000e+00, %121 ], [ %157, %135 ], [ %236, %235 ]
  %242 = phi float [ %130, %121 ], [ %152, %135 ], [ %239, %235 ]
  %243 = phi float [ %116, %121 ], [ %116, %135 ], [ %169, %235 ]
  %244 = phi <2 x float> [ %134, %121 ], [ %161, %135 ], [ %238, %235 ]
  %245 = shufflevector <2 x float> %244, <2 x float> undef, <4 x i32> <i32 0, i32 1, i32 0, i32 1>
  %246 = bitcast <4 x float>* %18 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %246) #4
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 16 %246, i8* nonnull align 16 %21, i64 16, i1 false)
  %247 = load <4 x float>, <4 x float>* %5, align 16
  %248 = insertelement <4 x float> undef, float %243, i32 0
  %249 = shufflevector <4 x float> %248, <4 x float> undef, <4 x i32> zeroinitializer
  %250 = fsub <4 x float> %247, %249
  %251 = fadd <4 x float> %247, %249
  %252 = shufflevector <4 x float> %250, <4 x float> %251, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  store <4 x float> %252, <4 x float>* %5, align 16
  %253 = load <4 x float>, <4 x float>* %18, align 16
  %254 = insertelement <4 x float> undef, float %241, i32 0
  %255 = shufflevector <4 x float> %254, <4 x float> undef, <4 x i32> zeroinitializer
  %256 = fmul <4 x float> %255, %253
  %257 = fadd <4 x float> %256, %245
  %258 = insertelement <4 x float> undef, float %242, i32 0
  %259 = shufflevector <4 x float> %258, <4 x float> undef, <4 x i32> zeroinitializer
  %260 = fsub <4 x float> %257, %259
  %261 = fadd <4 x float> %257, %259
  %262 = shufflevector <4 x float> %260, <4 x float> %261, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  store <4 x float> %262, <4 x float>* %18, align 16
  %263 = bitcast %struct.SkRect* %3 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %263, i8* nonnull align 16 %21, i64 16, i1 false)
  call void @_ZN6SkRect4joinERKS_(%struct.SkRect* %3, %struct.SkRect* nonnull dereferenceable(16) %19) #4
  %264 = bitcast %struct.SkRect* %3 to <4 x float>*
  %265 = load <4 x float>, <4 x float>* %264, align 4
  %266 = fadd <4 x float> %265, <float -1.000000e+00, float -1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %267 = bitcast %struct.SkRect* %3 to <4 x float>*
  store <4 x float> %266, <4 x float>* %267, align 4
  %268 = load i32, i32* %100, align 4
  %269 = and i32 %268, 192
  %270 = icmp eq i32 %269, 128
  br i1 %270, label %271, label %274

271:                                              ; preds = %240
  %272 = call zeroext i8 @_ZNK8SkMatrix26computePerspectiveTypeMaskEv(%class.SkMatrix* %2) #4
  %273 = zext i8 %272 to i32
  store i32 %273, i32* %100, align 4
  br label %274

274:                                              ; preds = %240, %271
  %275 = phi i32 [ %273, %271 ], [ %268, %240 ]
  %276 = and i32 %275, 8
  %277 = icmp eq i32 %276, 0
  br i1 %277, label %301, label %278

278:                                              ; preds = %274
  %279 = bitcast %class.SkMatrix* %20 to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %279) #4
  %280 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %20, i64 0, i32 1
  %281 = bitcast %class.SkMatrix* %20 to <4 x float>*
  store <4 x float> <float 1.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00>, <4 x float>* %281, align 16
  %282 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %20, i64 0, i32 0, i64 4
  %283 = bitcast float* %282 to <4 x float>*
  store <4 x float> <float 1.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00>, <4 x float>* %283, align 16
  %284 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %20, i64 0, i32 0, i64 8
  store float 1.000000e+00, float* %284, align 16
  store i32 16, i32* %280, align 4
  %285 = trunc i32 %275 to i8
  %286 = icmp slt i8 %285, 0
  br i1 %286, label %287, label %290

287:                                              ; preds = %278
  %288 = call zeroext i8 @_ZNK8SkMatrix15computeTypeMaskEv(%class.SkMatrix* %2) #4
  %289 = zext i8 %288 to i32
  store i32 %289, i32* %100, align 4
  br label %290

290:                                              ; preds = %287, %278
  %291 = phi i32 [ %289, %287 ], [ %275, %278 ]
  %292 = and i32 %291, 15
  %293 = icmp eq i32 %292, 0
  br i1 %293, label %294, label %296

294:                                              ; preds = %290
  %295 = call dereferenceable(40) %class.SkMatrix* @_ZN8SkMatrix5resetEv(%class.SkMatrix* nonnull %20) #4
  br label %298

296:                                              ; preds = %290
  %297 = call zeroext i1 @_ZNK8SkMatrix17invertNonIdentityEPS_(%class.SkMatrix* %2, %class.SkMatrix* nonnull %20) #4
  br i1 %297, label %298, label %300

298:                                              ; preds = %294, %296
  %299 = call zeroext i1 @_ZNK8SkMatrix7mapRectEP6SkRectRKS0_22SkApplyPerspectiveClip(%class.SkMatrix* nonnull %20, %struct.SkRect* %3, %struct.SkRect* dereferenceable(16) %3, i32 1) #4
  br label %300

300:                                              ; preds = %298, %296
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %279) #4
  br label %301

301:                                              ; preds = %274, %300
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %246) #4
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %97) #4
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %42)
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %21) #4
  ret void
}

declare zeroext i1 @_ZN8SkPoint39normalizeEv(%struct.SkPoint3*) local_unnamed_addr #2

declare float @_ZNK8SkMatrix11getMinScaleEv(%class.SkMatrix*) local_unnamed_addr #2

declare void @_ZN6SkRect4joinERKS_(%struct.SkRect*, %struct.SkRect* dereferenceable(16)) local_unnamed_addr #2

declare zeroext i8 @_ZNK8SkMatrix26computePerspectiveTypeMaskEv(%class.SkMatrix*) local_unnamed_addr #2

; Function Attrs: nounwind readnone speculatable
declare float @llvm.fabs.f32(float) #3

declare void @_ZNK6SkRect6toQuadEP7SkPoint(%struct.SkRect*, %struct.SkPoint*) local_unnamed_addr #2

declare zeroext i1 @_ZN6SkRect14setBoundsCheckEPK7SkPointi(%struct.SkRect*, %struct.SkPoint*, i32) local_unnamed_addr #2

declare zeroext i1 @_ZNK8SkMatrix7mapRectEP6SkRectRKS0_22SkApplyPerspectiveClip(%class.SkMatrix*, %struct.SkRect*, %struct.SkRect* dereferenceable(16), i32) local_unnamed_addr #2

declare void @_ZNK8SkMatrix9mapPointsEP7SkPointPKS0_i(%class.SkMatrix*, %struct.SkPoint*, %struct.SkPoint*, i32) local_unnamed_addr #2

declare dereferenceable(40) %class.SkMatrix* @_ZN8SkMatrix5resetEv(%class.SkMatrix*) local_unnamed_addr #2

declare zeroext i1 @_ZNK8SkMatrix17invertNonIdentityEPS_(%class.SkMatrix*, %class.SkMatrix*) local_unnamed_addr #2

declare zeroext i8 @_ZNK8SkMatrix15computeTypeMaskEv(%class.SkMatrix*) local_unnamed_addr #2

declare void @_ZNK8SkMatrix10mapVectorsEP7SkPointPKS0_i(%class.SkMatrix*, %struct.SkPoint*, %struct.SkPoint*, i32) local_unnamed_addr #2

; Function Attrs: nounwind readnone speculatable
declare <2 x float> @llvm.fabs.v2f32(<2 x float>) #3

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="64" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind readnone speculatable }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
