; ModuleID = '../../third_party/skia/src/pathops/SkOpCubicHull.cpp'
source_filename = "../../third_party/skia/src/pathops/SkOpCubicHull.cpp"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%struct.SkDCubic = type { [4 x %struct.SkDPoint] }
%struct.SkDPoint = type { double, double }

; Function Attrs: nounwind ssp uwtable
define hidden i32 @_ZNK8SkDCubic10convexHullEPc(%struct.SkDCubic* nocapture readonly, i8* nocapture) local_unnamed_addr #0 align 2 {
  %3 = alloca %struct.SkDCubic, align 8
  %4 = alloca %struct.SkDCubic, align 8
  %5 = getelementptr inbounds %struct.SkDCubic, %struct.SkDCubic* %0, i64 0, i32 0, i64 0, i32 1
  %6 = load double, double* %5, align 8
  %7 = getelementptr inbounds %struct.SkDCubic, %struct.SkDCubic* %0, i64 0, i32 0, i64 1, i32 1
  %8 = load double, double* %7, align 8
  %9 = fcmp ogt double %6, %8
  br i1 %9, label %18, label %10

10:                                               ; preds = %2
  %11 = fcmp oeq double %6, %8
  br i1 %11, label %12, label %19

12:                                               ; preds = %10
  %13 = getelementptr inbounds %struct.SkDCubic, %struct.SkDCubic* %0, i64 0, i32 0, i64 0, i32 0
  %14 = load double, double* %13, align 8
  %15 = getelementptr inbounds %struct.SkDCubic, %struct.SkDCubic* %0, i64 0, i32 0, i64 1, i32 0
  %16 = load double, double* %15, align 8
  %17 = fcmp ogt double %14, %16
  br i1 %17, label %18, label %19

18:                                               ; preds = %12, %2
  br label %19

19:                                               ; preds = %10, %12, %18
  %20 = phi double [ %8, %18 ], [ %6, %12 ], [ %6, %10 ]
  %21 = phi i64 [ 1, %18 ], [ 0, %12 ], [ 0, %10 ]
  %22 = getelementptr inbounds %struct.SkDCubic, %struct.SkDCubic* %0, i64 0, i32 0, i64 2, i32 1
  %23 = load double, double* %22, align 8
  %24 = fcmp ogt double %20, %23
  br i1 %24, label %221, label %213

25:                                               ; preds = %152
  %26 = icmp eq i32 %157, 2
  br i1 %26, label %160, label %27

27:                                               ; preds = %25, %238
  %28 = phi i64 [ %239, %238 ], [ %156, %25 ]
  %29 = phi i32 [ 0, %238 ], [ %157, %25 ]
  %30 = phi i32 [ -1, %238 ], [ %148, %25 ]
  %31 = trunc i64 %28 to i32
  %32 = getelementptr inbounds %struct.SkDCubic, %struct.SkDCubic* %3, i64 0, i32 0, i64 %28, i32 1
  br label %33

33:                                               ; preds = %147, %27
  %34 = phi i64 [ 0, %27 ], [ %150, %147 ]
  %35 = phi i32 [ -1, %27 ], [ %149, %147 ]
  %36 = phi i32 [ %30, %27 ], [ %148, %147 ]
  %37 = icmp eq i64 %34, %28
  br i1 %37, label %147, label %38

38:                                               ; preds = %33
  %39 = trunc i64 %34 to i32
  %40 = xor i64 %34, %28
  %41 = trunc i64 %40 to i32
  %42 = sub nsw i32 3, %41
  %43 = lshr i32 1, %42
  %44 = xor i32 %43, 3
  %45 = xor i32 %44, %31
  %46 = xor i32 %44, %39
  call void @llvm.lifetime.start.p0i8(i64 64, i8* nonnull %241) #3
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %241, i8 -1, i64 64, i1 false)
  %47 = call fastcc zeroext i1 @_ZL6rotateRK8SkDCubiciiRS_(%struct.SkDCubic* dereferenceable(64) %0, i32 %31, i32 %39, %struct.SkDCubic* nonnull dereferenceable(64) %3)
  br i1 %47, label %51, label %48

48:                                               ; preds = %38
  %49 = trunc i32 %45 to i8
  store i8 %49, i8* %242, align 1
  %50 = trunc i32 %46 to i8
  br label %207

51:                                               ; preds = %38
  %52 = sext i32 %45 to i64
  %53 = getelementptr inbounds %struct.SkDCubic, %struct.SkDCubic* %3, i64 0, i32 0, i64 %52, i32 1
  %54 = load double, double* %53, align 8
  %55 = load double, double* %32, align 8
  %56 = sext i32 %46 to i64
  %57 = getelementptr inbounds %struct.SkDCubic, %struct.SkDCubic* %3, i64 0, i32 0, i64 %56, i32 1
  %58 = load double, double* %57, align 8
  %59 = insertelement <2 x double> undef, double %58, i32 0
  %60 = insertelement <2 x double> %59, double %54, i32 1
  %61 = insertelement <2 x double> undef, double %55, i32 0
  %62 = shufflevector <2 x double> %61, <2 x double> undef, <2 x i32> zeroinitializer
  %63 = fsub <2 x double> %60, %62
  %64 = fcmp ogt <2 x double> %63, zeroinitializer
  %65 = zext <2 x i1> %64 to <2 x i32>
  %66 = fcmp oge <2 x double> %63, zeroinitializer
  %67 = zext <2 x i1> %66 to <2 x i32>
  %68 = add nuw nsw <2 x i32> %65, %67
  %69 = extractelement <2 x i32> %68, i32 0
  %70 = extractelement <2 x i32> %68, i32 1
  %71 = xor i32 %69, %70
  switch i32 %71, label %144 [
    i32 2, label %72
    i32 0, label %143
  ]

72:                                               ; preds = %51
  %73 = icmp sgt i32 %36, -1
  br i1 %73, label %74, label %144

74:                                               ; preds = %72
  store i8 0, i8* %1, align 1
  store i8 3, i8* %242, align 1
  %75 = load double, double* %243, align 8
  %76 = load double, double* %244, align 8
  %77 = fcmp oeq double %75, %76
  br i1 %77, label %78, label %82

78:                                               ; preds = %74
  %79 = load double, double* %7, align 8
  %80 = load double, double* %5, align 8
  %81 = fcmp oeq double %79, %80
  br i1 %81, label %207, label %82

82:                                               ; preds = %74, %78
  %83 = load double, double* %245, align 8
  %84 = fcmp oeq double %75, %83
  br i1 %84, label %85, label %89

85:                                               ; preds = %82
  %86 = load double, double* %7, align 8
  %87 = load double, double* %226, align 8
  %88 = fcmp oeq double %86, %87
  br i1 %88, label %207, label %89

89:                                               ; preds = %82, %85
  %90 = load double, double* %246, align 8
  %91 = fcmp oeq double %90, %76
  br i1 %91, label %92, label %96

92:                                               ; preds = %89
  %93 = load double, double* %22, align 8
  %94 = load double, double* %5, align 8
  %95 = fcmp oeq double %93, %94
  br i1 %95, label %207, label %96

96:                                               ; preds = %89, %92
  %97 = fcmp oeq double %90, %83
  br i1 %97, label %101, label %98

98:                                               ; preds = %96
  %99 = load double, double* %226, align 8
  %100 = load double, double* %22, align 8
  br label %105

101:                                              ; preds = %96
  %102 = load double, double* %22, align 8
  %103 = load double, double* %226, align 8
  %104 = fcmp oeq double %102, %103
  br i1 %104, label %207, label %105

105:                                              ; preds = %98, %101
  %106 = phi double [ %100, %98 ], [ %102, %101 ]
  %107 = phi double [ %99, %98 ], [ %103, %101 ]
  %108 = load double, double* %7, align 8
  %109 = load double, double* %5, align 8
  %110 = insertelement <2 x double> undef, double %75, i32 0
  %111 = insertelement <2 x double> %110, double %90, i32 1
  %112 = insertelement <2 x double> undef, double %76, i32 0
  %113 = shufflevector <2 x double> %112, <2 x double> undef, <2 x i32> zeroinitializer
  %114 = fsub <2 x double> %111, %113
  %115 = insertelement <2 x double> undef, double %108, i32 0
  %116 = insertelement <2 x double> %115, double %106, i32 1
  %117 = insertelement <2 x double> undef, double %109, i32 0
  %118 = shufflevector <2 x double> %117, <2 x double> undef, <2 x i32> zeroinitializer
  %119 = fsub <2 x double> %116, %118
  %120 = fmul <2 x double> %114, %114
  %121 = fmul <2 x double> %119, %119
  %122 = fadd <2 x double> %120, %121
  %123 = insertelement <2 x double> undef, double %83, i32 0
  %124 = shufflevector <2 x double> %123, <2 x double> undef, <2 x i32> zeroinitializer
  %125 = fsub <2 x double> %111, %124
  %126 = insertelement <2 x double> undef, double %107, i32 0
  %127 = shufflevector <2 x double> %126, <2 x double> undef, <2 x i32> zeroinitializer
  %128 = fsub <2 x double> %116, %127
  %129 = fmul <2 x double> %125, %125
  %130 = fmul <2 x double> %128, %128
  %131 = fadd <2 x double> %129, %130
  %132 = fcmp olt <2 x double> %131, %122
  %133 = select <2 x i1> %132, <2 x double> %131, <2 x double> %122
  %134 = extractelement <2 x double> %133, i32 0
  %135 = extractelement <2 x double> %133, i32 1
  %136 = fcmp olt double %135, %134
  %137 = select i1 %136, double %135, double %134
  %138 = tail call double @llvm.fabs.f64(double %137) #3
  %139 = fcmp olt double %138, 0x3E80000000000000
  br i1 %139, label %140, label %144

140:                                              ; preds = %105
  %141 = fcmp olt double %134, %135
  %142 = select i1 %141, i8 2, i8 1
  br label %207

143:                                              ; preds = %51
  br label %144

144:                                              ; preds = %105, %143, %72, %51
  %145 = phi i32 [ %36, %143 ], [ %39, %72 ], [ %36, %51 ], [ %39, %105 ]
  %146 = phi i32 [ %39, %143 ], [ %35, %72 ], [ %35, %51 ], [ %35, %105 ]
  call void @llvm.lifetime.end.p0i8(i64 64, i8* nonnull %241) #3
  br label %147

147:                                              ; preds = %144, %33
  %148 = phi i32 [ %36, %33 ], [ %145, %144 ]
  %149 = phi i32 [ %35, %33 ], [ %146, %144 ]
  %150 = add nuw nsw i64 %34, 1
  %151 = icmp eq i64 %150, 4
  br i1 %151, label %152, label %33

152:                                              ; preds = %147
  %153 = icmp sgt i32 %148, -1
  %154 = icmp slt i32 %149, 0
  %155 = or i1 %153, %154
  %156 = sext i32 %149 to i64
  %157 = add nuw nsw i32 %29, 1
  br i1 %155, label %158, label %25

158:                                              ; preds = %152
  %159 = trunc i64 %28 to i32
  br label %160

160:                                              ; preds = %25, %158
  %161 = phi i32 [ %159, %158 ], [ %149, %25 ]
  %162 = phi i64 [ %28, %158 ], [ %156, %25 ]
  %163 = icmp slt i32 %148, 0
  %164 = xor i32 %161, 3
  %165 = select i1 %163, i32 %164, i32 %148
  %166 = xor i32 %165, %161
  %167 = sub nsw i32 3, %166
  %168 = lshr i32 1, %167
  %169 = xor i32 %168, 3
  %170 = xor i32 %169, %161
  %171 = xor i32 %169, %165
  %172 = trunc i64 %162 to i8
  store i8 %172, i8* %1, align 1
  %173 = trunc i32 %170 to i8
  store i8 %173, i8* %242, align 1
  %174 = bitcast %struct.SkDCubic* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 64, i8* nonnull %174) #3
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %174, i8 -1, i64 64, i1 false)
  %175 = call fastcc zeroext i1 @_ZL6rotateRK8SkDCubiciiRS_(%struct.SkDCubic* dereferenceable(64) %0, i32 %170, i32 %171, %struct.SkDCubic* nonnull dereferenceable(64) %4)
  br i1 %175, label %176, label %202

176:                                              ; preds = %160
  %177 = getelementptr inbounds %struct.SkDCubic, %struct.SkDCubic* %4, i64 0, i32 0, i64 %162, i32 1
  %178 = load double, double* %177, align 8
  %179 = sext i32 %170 to i64
  %180 = getelementptr inbounds %struct.SkDCubic, %struct.SkDCubic* %4, i64 0, i32 0, i64 %179, i32 1
  %181 = load double, double* %180, align 8
  %182 = sext i32 %165 to i64
  %183 = getelementptr inbounds %struct.SkDCubic, %struct.SkDCubic* %4, i64 0, i32 0, i64 %182, i32 1
  %184 = load double, double* %183, align 8
  %185 = insertelement <2 x double> undef, double %184, i32 0
  %186 = insertelement <2 x double> %185, double %178, i32 1
  %187 = insertelement <2 x double> undef, double %181, i32 0
  %188 = shufflevector <2 x double> %187, <2 x double> undef, <2 x i32> zeroinitializer
  %189 = fsub <2 x double> %186, %188
  %190 = fcmp ogt <2 x double> %189, zeroinitializer
  %191 = zext <2 x i1> %190 to <2 x i32>
  %192 = fcmp oge <2 x double> %189, zeroinitializer
  %193 = zext <2 x i1> %192 to <2 x i32>
  %194 = add nuw nsw <2 x i32> %191, %193
  %195 = extractelement <2 x i32> %194, i32 0
  %196 = extractelement <2 x i32> %194, i32 1
  %197 = xor i32 %195, %196
  %198 = icmp eq i32 %197, 2
  br i1 %198, label %199, label %202

199:                                              ; preds = %176
  %200 = trunc i32 %165 to i8
  %201 = getelementptr inbounds i8, i8* %1, i64 2
  store i8 %200, i8* %201, align 1
  br label %202

202:                                              ; preds = %176, %160, %199
  %203 = phi i32 [ %171, %199 ], [ %165, %160 ], [ %171, %176 ]
  %204 = phi i64 [ 3, %199 ], [ 2, %160 ], [ 2, %176 ]
  %205 = phi i32 [ 4, %199 ], [ 3, %160 ], [ 3, %176 ]
  %206 = trunc i32 %203 to i8
  br label %207

207:                                              ; preds = %85, %78, %101, %92, %48, %140, %202
  %208 = phi i64 [ %204, %202 ], [ 2, %140 ], [ 2, %48 ], [ 2, %92 ], [ 2, %101 ], [ 2, %78 ], [ 2, %85 ]
  %209 = phi i8 [ %206, %202 ], [ %142, %140 ], [ %50, %48 ], [ 2, %85 ], [ 2, %78 ], [ 1, %101 ], [ 1, %92 ]
  %210 = phi i8* [ %174, %202 ], [ %241, %140 ], [ %241, %48 ], [ %241, %92 ], [ %241, %101 ], [ %241, %78 ], [ %241, %85 ]
  %211 = phi i32 [ %205, %202 ], [ 3, %140 ], [ 3, %48 ], [ 3, %92 ], [ 3, %101 ], [ 3, %78 ], [ 3, %85 ]
  %212 = getelementptr inbounds i8, i8* %1, i64 %208
  store i8 %209, i8* %212, align 1
  call void @llvm.lifetime.end.p0i8(i64 64, i8* nonnull %210) #3
  ret i32 %211

213:                                              ; preds = %19
  %214 = fcmp oeq double %20, %23
  br i1 %214, label %215, label %222

215:                                              ; preds = %213
  %216 = getelementptr inbounds %struct.SkDCubic, %struct.SkDCubic* %0, i64 0, i32 0, i64 %21, i32 0
  %217 = load double, double* %216, align 8
  %218 = getelementptr inbounds %struct.SkDCubic, %struct.SkDCubic* %0, i64 0, i32 0, i64 2, i32 0
  %219 = load double, double* %218, align 8
  %220 = fcmp ogt double %217, %219
  br i1 %220, label %221, label %222

221:                                              ; preds = %215, %19
  br label %222

222:                                              ; preds = %221, %215, %213
  %223 = phi i64 [ 2, %221 ], [ %21, %215 ], [ %21, %213 ]
  %224 = getelementptr inbounds %struct.SkDCubic, %struct.SkDCubic* %0, i64 0, i32 0, i64 %223, i32 1
  %225 = load double, double* %224, align 8
  %226 = getelementptr inbounds %struct.SkDCubic, %struct.SkDCubic* %0, i64 0, i32 0, i64 3, i32 1
  %227 = load double, double* %226, align 8
  %228 = fcmp ogt double %225, %227
  br i1 %228, label %237, label %229

229:                                              ; preds = %222
  %230 = fcmp oeq double %225, %227
  br i1 %230, label %231, label %238

231:                                              ; preds = %229
  %232 = getelementptr inbounds %struct.SkDCubic, %struct.SkDCubic* %0, i64 0, i32 0, i64 %223, i32 0
  %233 = load double, double* %232, align 8
  %234 = getelementptr inbounds %struct.SkDCubic, %struct.SkDCubic* %0, i64 0, i32 0, i64 3, i32 0
  %235 = load double, double* %234, align 8
  %236 = fcmp ogt double %233, %235
  br i1 %236, label %237, label %238

237:                                              ; preds = %231, %222
  br label %238

238:                                              ; preds = %237, %231, %229
  %239 = phi i64 [ 3, %237 ], [ %223, %231 ], [ %223, %229 ]
  %240 = trunc i64 %239 to i8
  store i8 %240, i8* %1, align 1
  %241 = bitcast %struct.SkDCubic* %3 to i8*
  %242 = getelementptr inbounds i8, i8* %1, i64 1
  %243 = getelementptr inbounds %struct.SkDCubic, %struct.SkDCubic* %0, i64 0, i32 0, i64 1, i32 0
  %244 = getelementptr inbounds %struct.SkDCubic, %struct.SkDCubic* %0, i64 0, i32 0, i64 0, i32 0
  %245 = getelementptr inbounds %struct.SkDCubic, %struct.SkDCubic* %0, i64 0, i32 0, i64 3, i32 0
  %246 = getelementptr inbounds %struct.SkDCubic, %struct.SkDCubic* %0, i64 0, i32 0, i64 2, i32 0
  br label %27
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

; Function Attrs: nounwind ssp uwtable
define internal fastcc zeroext i1 @_ZL6rotateRK8SkDCubiciiRS_(%struct.SkDCubic* nocapture readonly dereferenceable(64), i32, i32, %struct.SkDCubic* nocapture dereferenceable(64)) unnamed_addr #0 {
  %5 = sext i32 %2 to i64
  %6 = getelementptr inbounds %struct.SkDCubic, %struct.SkDCubic* %0, i64 0, i32 0, i64 %5, i32 1
  %7 = load double, double* %6, align 8
  %8 = sext i32 %1 to i64
  %9 = getelementptr inbounds %struct.SkDCubic, %struct.SkDCubic* %0, i64 0, i32 0, i64 %8, i32 1
  %10 = load double, double* %9, align 8
  %11 = fsub double %7, %10
  %12 = getelementptr inbounds %struct.SkDCubic, %struct.SkDCubic* %0, i64 0, i32 0, i64 %5, i32 0
  %13 = load double, double* %12, align 8
  %14 = getelementptr inbounds %struct.SkDCubic, %struct.SkDCubic* %0, i64 0, i32 0, i64 %8, i32 0
  %15 = load double, double* %14, align 8
  %16 = fsub double %13, %15
  %17 = tail call double @llvm.fabs.f64(double %11) #3
  %18 = fcmp olt double %17, 0x3E80000000000000
  br i1 %18, label %76, label %19

19:                                               ; preds = %4
  %20 = getelementptr inbounds %struct.SkDCubic, %struct.SkDCubic* %0, i64 0, i32 0, i64 0, i32 0
  %21 = load double, double* %20, align 8
  %22 = fmul double %16, %21
  %23 = getelementptr inbounds %struct.SkDCubic, %struct.SkDCubic* %0, i64 0, i32 0, i64 0, i32 1
  %24 = load double, double* %23, align 8
  %25 = fmul double %11, %24
  %26 = fadd double %22, %25
  %27 = getelementptr inbounds %struct.SkDCubic, %struct.SkDCubic* %3, i64 0, i32 0, i64 0, i32 0
  store double %26, double* %27, align 8
  %28 = load double, double* %23, align 8
  %29 = fmul double %16, %28
  %30 = load double, double* %20, align 8
  %31 = fmul double %11, %30
  %32 = fsub double %29, %31
  %33 = getelementptr inbounds %struct.SkDCubic, %struct.SkDCubic* %3, i64 0, i32 0, i64 0, i32 1
  store double %32, double* %33, align 8
  %34 = getelementptr inbounds %struct.SkDCubic, %struct.SkDCubic* %0, i64 0, i32 0, i64 1, i32 0
  %35 = load double, double* %34, align 8
  %36 = fmul double %16, %35
  %37 = getelementptr inbounds %struct.SkDCubic, %struct.SkDCubic* %0, i64 0, i32 0, i64 1, i32 1
  %38 = load double, double* %37, align 8
  %39 = fmul double %11, %38
  %40 = fadd double %36, %39
  %41 = getelementptr inbounds %struct.SkDCubic, %struct.SkDCubic* %3, i64 0, i32 0, i64 1, i32 0
  store double %40, double* %41, align 8
  %42 = load double, double* %37, align 8
  %43 = fmul double %16, %42
  %44 = load double, double* %34, align 8
  %45 = fmul double %11, %44
  %46 = fsub double %43, %45
  %47 = getelementptr inbounds %struct.SkDCubic, %struct.SkDCubic* %3, i64 0, i32 0, i64 1, i32 1
  store double %46, double* %47, align 8
  %48 = getelementptr inbounds %struct.SkDCubic, %struct.SkDCubic* %0, i64 0, i32 0, i64 2, i32 0
  %49 = load double, double* %48, align 8
  %50 = fmul double %16, %49
  %51 = getelementptr inbounds %struct.SkDCubic, %struct.SkDCubic* %0, i64 0, i32 0, i64 2, i32 1
  %52 = load double, double* %51, align 8
  %53 = fmul double %11, %52
  %54 = fadd double %50, %53
  %55 = getelementptr inbounds %struct.SkDCubic, %struct.SkDCubic* %3, i64 0, i32 0, i64 2, i32 0
  store double %54, double* %55, align 8
  %56 = load double, double* %51, align 8
  %57 = fmul double %16, %56
  %58 = load double, double* %48, align 8
  %59 = fmul double %11, %58
  %60 = fsub double %57, %59
  %61 = getelementptr inbounds %struct.SkDCubic, %struct.SkDCubic* %3, i64 0, i32 0, i64 2, i32 1
  store double %60, double* %61, align 8
  %62 = getelementptr inbounds %struct.SkDCubic, %struct.SkDCubic* %0, i64 0, i32 0, i64 3, i32 0
  %63 = load double, double* %62, align 8
  %64 = fmul double %16, %63
  %65 = getelementptr inbounds %struct.SkDCubic, %struct.SkDCubic* %0, i64 0, i32 0, i64 3, i32 1
  %66 = load double, double* %65, align 8
  %67 = fmul double %11, %66
  %68 = fadd double %64, %67
  %69 = getelementptr inbounds %struct.SkDCubic, %struct.SkDCubic* %3, i64 0, i32 0, i64 3, i32 0
  store double %68, double* %69, align 8
  %70 = load double, double* %65, align 8
  %71 = fmul double %16, %70
  %72 = load double, double* %62, align 8
  %73 = fmul double %11, %72
  %74 = fsub double %71, %73
  %75 = getelementptr inbounds %struct.SkDCubic, %struct.SkDCubic* %3, i64 0, i32 0, i64 3, i32 1
  store double %74, double* %75, align 8
  br label %114

76:                                               ; preds = %4
  %77 = tail call double @llvm.fabs.f64(double %16) #3
  %78 = fcmp olt double %77, 0x3E80000000000000
  br i1 %78, label %114, label %79

79:                                               ; preds = %76
  %80 = bitcast %struct.SkDCubic* %3 to i8*
  %81 = bitcast %struct.SkDCubic* %0 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %80, i8* align 8 %81, i64 64, i1 false)
  %82 = fcmp une double %11, 0.000000e+00
  br i1 %82, label %83, label %114

83:                                               ; preds = %79
  %84 = bitcast double* %9 to i64*
  %85 = load i64, i64* %84, align 8
  %86 = getelementptr inbounds %struct.SkDCubic, %struct.SkDCubic* %3, i64 0, i32 0, i64 %5, i32 1
  %87 = bitcast double* %86 to i64*
  store i64 %85, i64* %87, align 8
  %88 = xor i32 %2, %1
  %89 = sub nsw i32 3, %88
  %90 = lshr i32 1, %89
  %91 = xor i32 %90, 3
  %92 = xor i32 %91, %2
  %93 = xor i32 %91, %1
  %94 = sext i32 %92 to i64
  %95 = getelementptr inbounds %struct.SkDCubic, %struct.SkDCubic* %0, i64 0, i32 0, i64 %94, i32 1
  %96 = load double, double* %95, align 8
  %97 = load double, double* %9, align 8
  %98 = fsub double %96, %97
  %99 = tail call double @llvm.fabs.f64(double %98) #3
  %100 = fcmp olt double %99, 0x3E80000000000000
  br i1 %100, label %101, label %104

101:                                              ; preds = %83
  %102 = getelementptr inbounds %struct.SkDCubic, %struct.SkDCubic* %3, i64 0, i32 0, i64 %94, i32 1
  store double %97, double* %102, align 8
  %103 = load double, double* %9, align 8
  br label %104

104:                                              ; preds = %101, %83
  %105 = phi double [ %103, %101 ], [ %97, %83 ]
  %106 = sext i32 %93 to i64
  %107 = getelementptr inbounds %struct.SkDCubic, %struct.SkDCubic* %0, i64 0, i32 0, i64 %106, i32 1
  %108 = load double, double* %107, align 8
  %109 = fsub double %108, %105
  %110 = tail call double @llvm.fabs.f64(double %109) #3
  %111 = fcmp olt double %110, 0x3E80000000000000
  br i1 %111, label %112, label %114

112:                                              ; preds = %104
  %113 = getelementptr inbounds %struct.SkDCubic, %struct.SkDCubic* %3, i64 0, i32 0, i64 %106, i32 1
  store double %105, double* %113, align 8
  br label %114

114:                                              ; preds = %19, %79, %112, %104, %76
  %115 = phi i1 [ false, %76 ], [ true, %104 ], [ true, %112 ], [ true, %79 ], [ true, %19 ]
  ret i1 %115
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #1

; Function Attrs: nounwind readnone speculatable
declare double @llvm.fabs.f64(double) #2

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { nounwind readnone speculatable }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
