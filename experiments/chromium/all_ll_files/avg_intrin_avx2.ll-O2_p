; ModuleID = '../../third_party/libvpx/source/libvpx/vpx_dsp/x86/avg_intrin_avx2.c'
source_filename = "../../third_party/libvpx/source/libvpx/vpx_dsp/x86/avg_intrin_avx2.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

; Function Attrs: nounwind ssp uwtable
define hidden void @vpx_highbd_hadamard_8x8_avx2(i16* nocapture readonly, i64, i32* nocapture) local_unnamed_addr #0 {
  %4 = bitcast i16* %0 to <8 x i16>*
  %5 = load <8 x i16>, <8 x i16>* %4, align 1
  %6 = getelementptr inbounds i16, i16* %0, i64 %1
  %7 = bitcast i16* %6 to <8 x i16>*
  %8 = load <8 x i16>, <8 x i16>* %7, align 1
  %9 = getelementptr inbounds i16, i16* %6, i64 %1
  %10 = bitcast i16* %9 to <8 x i16>*
  %11 = load <8 x i16>, <8 x i16>* %10, align 1
  %12 = getelementptr inbounds i16, i16* %9, i64 %1
  %13 = bitcast i16* %12 to <8 x i16>*
  %14 = load <8 x i16>, <8 x i16>* %13, align 1
  %15 = getelementptr inbounds i16, i16* %12, i64 %1
  %16 = bitcast i16* %15 to <8 x i16>*
  %17 = load <8 x i16>, <8 x i16>* %16, align 1
  %18 = getelementptr inbounds i16, i16* %15, i64 %1
  %19 = bitcast i16* %18 to <8 x i16>*
  %20 = load <8 x i16>, <8 x i16>* %19, align 1
  %21 = getelementptr inbounds i16, i16* %18, i64 %1
  %22 = bitcast i16* %21 to <8 x i16>*
  %23 = load <8 x i16>, <8 x i16>* %22, align 1
  %24 = getelementptr inbounds i16, i16* %21, i64 %1
  %25 = bitcast i16* %24 to <8 x i16>*
  %26 = load <8 x i16>, <8 x i16>* %25, align 1
  %27 = sext <8 x i16> %5 to <8 x i32>
  %28 = sext <8 x i16> %8 to <8 x i32>
  %29 = sext <8 x i16> %11 to <8 x i32>
  %30 = sext <8 x i16> %14 to <8 x i32>
  %31 = sext <8 x i16> %17 to <8 x i32>
  %32 = sext <8 x i16> %20 to <8 x i32>
  %33 = sext <8 x i16> %23 to <8 x i32>
  %34 = sext <8 x i16> %26 to <8 x i32>
  %35 = add nsw <8 x i32> %28, %27
  %36 = sub nsw <8 x i32> %27, %28
  %37 = add nsw <8 x i32> %30, %29
  %38 = sub nsw <8 x i32> %29, %30
  %39 = add nsw <8 x i32> %32, %31
  %40 = sub nsw <8 x i32> %31, %32
  %41 = add nsw <8 x i32> %34, %33
  %42 = sub nsw <8 x i32> %33, %34
  %43 = add nsw <8 x i32> %37, %35
  %44 = add nsw <8 x i32> %38, %36
  %45 = sub nsw <8 x i32> %35, %37
  %46 = sub nsw <8 x i32> %36, %38
  %47 = add nsw <8 x i32> %41, %39
  %48 = add nsw <8 x i32> %42, %40
  %49 = sub nsw <8 x i32> %39, %41
  %50 = sub nsw <8 x i32> %40, %42
  %51 = add nsw <8 x i32> %47, %43
  %52 = add nsw <8 x i32> %48, %44
  %53 = add nsw <8 x i32> %49, %45
  %54 = add nsw <8 x i32> %50, %46
  %55 = sub nsw <8 x i32> %43, %47
  %56 = sub nsw <8 x i32> %44, %48
  %57 = sub nsw <8 x i32> %45, %49
  %58 = sub nsw <8 x i32> %46, %50
  %59 = shufflevector <8 x i32> %51, <8 x i32> %57, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 4, i32 12, i32 5, i32 13>
  %60 = bitcast <8 x i32> %59 to <4 x i64>
  %61 = shufflevector <8 x i32> %55, <8 x i32> %53, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 4, i32 12, i32 5, i32 13>
  %62 = bitcast <8 x i32> %61 to <4 x i64>
  %63 = shufflevector <8 x i32> %51, <8 x i32> %57, <8 x i32> <i32 2, i32 10, i32 3, i32 11, i32 6, i32 14, i32 7, i32 15>
  %64 = bitcast <8 x i32> %63 to <4 x i64>
  %65 = shufflevector <8 x i32> %55, <8 x i32> %53, <8 x i32> <i32 2, i32 10, i32 3, i32 11, i32 6, i32 14, i32 7, i32 15>
  %66 = bitcast <8 x i32> %65 to <4 x i64>
  %67 = shufflevector <8 x i32> %54, <8 x i32> %58, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 4, i32 12, i32 5, i32 13>
  %68 = bitcast <8 x i32> %67 to <4 x i64>
  %69 = shufflevector <8 x i32> %56, <8 x i32> %52, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 4, i32 12, i32 5, i32 13>
  %70 = bitcast <8 x i32> %69 to <4 x i64>
  %71 = shufflevector <8 x i32> %54, <8 x i32> %58, <8 x i32> <i32 2, i32 10, i32 3, i32 11, i32 6, i32 14, i32 7, i32 15>
  %72 = bitcast <8 x i32> %71 to <4 x i64>
  %73 = shufflevector <8 x i32> %56, <8 x i32> %52, <8 x i32> <i32 2, i32 10, i32 3, i32 11, i32 6, i32 14, i32 7, i32 15>
  %74 = bitcast <8 x i32> %73 to <4 x i64>
  %75 = shufflevector <4 x i64> %60, <4 x i64> %62, <4 x i32> <i32 0, i32 4, i32 2, i32 6>
  %76 = shufflevector <4 x i64> %68, <4 x i64> %70, <4 x i32> <i32 0, i32 4, i32 2, i32 6>
  %77 = shufflevector <4 x i64> %60, <4 x i64> %62, <4 x i32> <i32 1, i32 5, i32 3, i32 7>
  %78 = shufflevector <4 x i64> %68, <4 x i64> %70, <4 x i32> <i32 1, i32 5, i32 3, i32 7>
  %79 = shufflevector <4 x i64> %64, <4 x i64> %66, <4 x i32> <i32 0, i32 4, i32 2, i32 6>
  %80 = shufflevector <4 x i64> %72, <4 x i64> %74, <4 x i32> <i32 0, i32 4, i32 2, i32 6>
  %81 = shufflevector <4 x i64> %64, <4 x i64> %66, <4 x i32> <i32 1, i32 5, i32 3, i32 7>
  %82 = shufflevector <4 x i64> %72, <4 x i64> %74, <4 x i32> <i32 1, i32 5, i32 3, i32 7>
  %83 = shufflevector <4 x i64> %75, <4 x i64> %76, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %84 = shufflevector <4 x i64> %75, <4 x i64> %76, <4 x i32> <i32 2, i32 3, i32 6, i32 7>
  %85 = shufflevector <4 x i64> %77, <4 x i64> %78, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %86 = shufflevector <4 x i64> %77, <4 x i64> %78, <4 x i32> <i32 2, i32 3, i32 6, i32 7>
  %87 = shufflevector <4 x i64> %79, <4 x i64> %80, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %88 = shufflevector <4 x i64> %79, <4 x i64> %80, <4 x i32> <i32 2, i32 3, i32 6, i32 7>
  %89 = shufflevector <4 x i64> %81, <4 x i64> %82, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %90 = shufflevector <4 x i64> %81, <4 x i64> %82, <4 x i32> <i32 2, i32 3, i32 6, i32 7>
  %91 = bitcast <4 x i64> %83 to <8 x i32>
  %92 = bitcast <4 x i64> %84 to <8 x i32>
  %93 = bitcast <4 x i64> %85 to <8 x i32>
  %94 = bitcast <4 x i64> %86 to <8 x i32>
  %95 = bitcast <4 x i64> %87 to <8 x i32>
  %96 = bitcast <4 x i64> %88 to <8 x i32>
  %97 = bitcast <4 x i64> %89 to <8 x i32>
  %98 = bitcast <4 x i64> %90 to <8 x i32>
  %99 = add <8 x i32> %92, %91
  %100 = sub <8 x i32> %91, %92
  %101 = add <8 x i32> %94, %93
  %102 = sub <8 x i32> %93, %94
  %103 = add <8 x i32> %96, %95
  %104 = sub <8 x i32> %95, %96
  %105 = add <8 x i32> %98, %97
  %106 = sub <8 x i32> %97, %98
  %107 = add <8 x i32> %101, %99
  %108 = add <8 x i32> %102, %100
  %109 = sub <8 x i32> %99, %101
  %110 = sub <8 x i32> %100, %102
  %111 = add <8 x i32> %105, %103
  %112 = add <8 x i32> %106, %104
  %113 = sub <8 x i32> %103, %105
  %114 = sub <8 x i32> %104, %106
  %115 = add <8 x i32> %111, %107
  %116 = add <8 x i32> %112, %108
  %117 = add <8 x i32> %113, %109
  %118 = add <8 x i32> %114, %110
  %119 = sub <8 x i32> %107, %111
  %120 = sub <8 x i32> %108, %112
  %121 = sub <8 x i32> %109, %113
  %122 = sub <8 x i32> %110, %114
  %123 = bitcast i32* %2 to <8 x i32>*
  store <8 x i32> %115, <8 x i32>* %123, align 1
  %124 = getelementptr inbounds i32, i32* %2, i64 8
  %125 = bitcast i32* %124 to <8 x i32>*
  store <8 x i32> %121, <8 x i32>* %125, align 1
  %126 = getelementptr inbounds i32, i32* %2, i64 16
  %127 = bitcast i32* %126 to <8 x i32>*
  store <8 x i32> %119, <8 x i32>* %127, align 1
  %128 = getelementptr inbounds i32, i32* %2, i64 24
  %129 = bitcast i32* %128 to <8 x i32>*
  store <8 x i32> %117, <8 x i32>* %129, align 1
  %130 = getelementptr inbounds i32, i32* %2, i64 32
  %131 = bitcast i32* %130 to <8 x i32>*
  store <8 x i32> %118, <8 x i32>* %131, align 1
  %132 = getelementptr inbounds i32, i32* %2, i64 40
  %133 = bitcast i32* %132 to <8 x i32>*
  store <8 x i32> %122, <8 x i32>* %133, align 1
  %134 = getelementptr inbounds i32, i32* %2, i64 48
  %135 = bitcast i32* %134 to <8 x i32>*
  store <8 x i32> %120, <8 x i32>* %135, align 1
  %136 = getelementptr inbounds i32, i32* %2, i64 56
  %137 = bitcast i32* %136 to <8 x i32>*
  store <8 x i32> %116, <8 x i32>* %137, align 1
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nofree nounwind ssp uwtable
define hidden void @vpx_highbd_hadamard_16x16_avx2(i16* nocapture readonly, i64, i32* nocapture) local_unnamed_addr #2 {
  br label %4

4:                                                ; preds = %4, %3
  %5 = phi i64 [ 0, %3 ], [ %149, %4 ]
  %6 = shl i64 %5, 2
  %7 = and i64 %6, 4294967288
  %8 = mul nsw i64 %7, %1
  %9 = getelementptr inbounds i16, i16* %0, i64 %8
  %10 = shl i64 %5, 3
  %11 = and i64 %10, 8
  %12 = getelementptr inbounds i16, i16* %9, i64 %11
  %13 = shl nsw i64 %5, 6
  %14 = getelementptr inbounds i32, i32* %2, i64 %13
  %15 = bitcast i16* %12 to <8 x i16>*
  %16 = load <8 x i16>, <8 x i16>* %15, align 1
  %17 = getelementptr inbounds i16, i16* %12, i64 %1
  %18 = bitcast i16* %17 to <8 x i16>*
  %19 = load <8 x i16>, <8 x i16>* %18, align 1
  %20 = getelementptr inbounds i16, i16* %17, i64 %1
  %21 = bitcast i16* %20 to <8 x i16>*
  %22 = load <8 x i16>, <8 x i16>* %21, align 1
  %23 = getelementptr inbounds i16, i16* %20, i64 %1
  %24 = bitcast i16* %23 to <8 x i16>*
  %25 = load <8 x i16>, <8 x i16>* %24, align 1
  %26 = getelementptr inbounds i16, i16* %23, i64 %1
  %27 = bitcast i16* %26 to <8 x i16>*
  %28 = load <8 x i16>, <8 x i16>* %27, align 1
  %29 = getelementptr inbounds i16, i16* %26, i64 %1
  %30 = bitcast i16* %29 to <8 x i16>*
  %31 = load <8 x i16>, <8 x i16>* %30, align 1
  %32 = getelementptr inbounds i16, i16* %29, i64 %1
  %33 = bitcast i16* %32 to <8 x i16>*
  %34 = load <8 x i16>, <8 x i16>* %33, align 1
  %35 = getelementptr inbounds i16, i16* %32, i64 %1
  %36 = bitcast i16* %35 to <8 x i16>*
  %37 = load <8 x i16>, <8 x i16>* %36, align 1
  %38 = sext <8 x i16> %16 to <8 x i32>
  %39 = sext <8 x i16> %19 to <8 x i32>
  %40 = sext <8 x i16> %22 to <8 x i32>
  %41 = sext <8 x i16> %25 to <8 x i32>
  %42 = sext <8 x i16> %28 to <8 x i32>
  %43 = sext <8 x i16> %31 to <8 x i32>
  %44 = sext <8 x i16> %34 to <8 x i32>
  %45 = sext <8 x i16> %37 to <8 x i32>
  %46 = add nsw <8 x i32> %39, %38
  %47 = sub nsw <8 x i32> %38, %39
  %48 = add nsw <8 x i32> %41, %40
  %49 = sub nsw <8 x i32> %40, %41
  %50 = add nsw <8 x i32> %43, %42
  %51 = sub nsw <8 x i32> %42, %43
  %52 = add nsw <8 x i32> %45, %44
  %53 = sub nsw <8 x i32> %44, %45
  %54 = add nsw <8 x i32> %48, %46
  %55 = add nsw <8 x i32> %49, %47
  %56 = sub nsw <8 x i32> %46, %48
  %57 = sub nsw <8 x i32> %47, %49
  %58 = add nsw <8 x i32> %52, %50
  %59 = add nsw <8 x i32> %53, %51
  %60 = sub nsw <8 x i32> %50, %52
  %61 = sub nsw <8 x i32> %51, %53
  %62 = add nsw <8 x i32> %58, %54
  %63 = add nsw <8 x i32> %59, %55
  %64 = add nsw <8 x i32> %60, %56
  %65 = add nsw <8 x i32> %61, %57
  %66 = sub nsw <8 x i32> %54, %58
  %67 = sub nsw <8 x i32> %55, %59
  %68 = sub nsw <8 x i32> %56, %60
  %69 = sub nsw <8 x i32> %57, %61
  %70 = shufflevector <8 x i32> %62, <8 x i32> %68, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 4, i32 12, i32 5, i32 13>
  %71 = bitcast <8 x i32> %70 to <4 x i64>
  %72 = shufflevector <8 x i32> %66, <8 x i32> %64, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 4, i32 12, i32 5, i32 13>
  %73 = bitcast <8 x i32> %72 to <4 x i64>
  %74 = shufflevector <8 x i32> %62, <8 x i32> %68, <8 x i32> <i32 2, i32 10, i32 3, i32 11, i32 6, i32 14, i32 7, i32 15>
  %75 = bitcast <8 x i32> %74 to <4 x i64>
  %76 = shufflevector <8 x i32> %66, <8 x i32> %64, <8 x i32> <i32 2, i32 10, i32 3, i32 11, i32 6, i32 14, i32 7, i32 15>
  %77 = bitcast <8 x i32> %76 to <4 x i64>
  %78 = shufflevector <8 x i32> %65, <8 x i32> %69, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 4, i32 12, i32 5, i32 13>
  %79 = bitcast <8 x i32> %78 to <4 x i64>
  %80 = shufflevector <8 x i32> %67, <8 x i32> %63, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 4, i32 12, i32 5, i32 13>
  %81 = bitcast <8 x i32> %80 to <4 x i64>
  %82 = shufflevector <8 x i32> %65, <8 x i32> %69, <8 x i32> <i32 2, i32 10, i32 3, i32 11, i32 6, i32 14, i32 7, i32 15>
  %83 = bitcast <8 x i32> %82 to <4 x i64>
  %84 = shufflevector <8 x i32> %67, <8 x i32> %63, <8 x i32> <i32 2, i32 10, i32 3, i32 11, i32 6, i32 14, i32 7, i32 15>
  %85 = bitcast <8 x i32> %84 to <4 x i64>
  %86 = shufflevector <4 x i64> %71, <4 x i64> %73, <4 x i32> <i32 0, i32 4, i32 2, i32 6>
  %87 = shufflevector <4 x i64> %79, <4 x i64> %81, <4 x i32> <i32 0, i32 4, i32 2, i32 6>
  %88 = shufflevector <4 x i64> %71, <4 x i64> %73, <4 x i32> <i32 1, i32 5, i32 3, i32 7>
  %89 = shufflevector <4 x i64> %79, <4 x i64> %81, <4 x i32> <i32 1, i32 5, i32 3, i32 7>
  %90 = shufflevector <4 x i64> %75, <4 x i64> %77, <4 x i32> <i32 0, i32 4, i32 2, i32 6>
  %91 = shufflevector <4 x i64> %83, <4 x i64> %85, <4 x i32> <i32 0, i32 4, i32 2, i32 6>
  %92 = shufflevector <4 x i64> %75, <4 x i64> %77, <4 x i32> <i32 1, i32 5, i32 3, i32 7>
  %93 = shufflevector <4 x i64> %83, <4 x i64> %85, <4 x i32> <i32 1, i32 5, i32 3, i32 7>
  %94 = shufflevector <4 x i64> %86, <4 x i64> %87, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %95 = shufflevector <4 x i64> %86, <4 x i64> %87, <4 x i32> <i32 2, i32 3, i32 6, i32 7>
  %96 = shufflevector <4 x i64> %88, <4 x i64> %89, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %97 = shufflevector <4 x i64> %88, <4 x i64> %89, <4 x i32> <i32 2, i32 3, i32 6, i32 7>
  %98 = shufflevector <4 x i64> %90, <4 x i64> %91, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %99 = shufflevector <4 x i64> %90, <4 x i64> %91, <4 x i32> <i32 2, i32 3, i32 6, i32 7>
  %100 = shufflevector <4 x i64> %92, <4 x i64> %93, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %101 = shufflevector <4 x i64> %92, <4 x i64> %93, <4 x i32> <i32 2, i32 3, i32 6, i32 7>
  %102 = bitcast <4 x i64> %94 to <8 x i32>
  %103 = bitcast <4 x i64> %95 to <8 x i32>
  %104 = bitcast <4 x i64> %96 to <8 x i32>
  %105 = bitcast <4 x i64> %97 to <8 x i32>
  %106 = bitcast <4 x i64> %98 to <8 x i32>
  %107 = bitcast <4 x i64> %99 to <8 x i32>
  %108 = bitcast <4 x i64> %100 to <8 x i32>
  %109 = bitcast <4 x i64> %101 to <8 x i32>
  %110 = add <8 x i32> %103, %102
  %111 = sub <8 x i32> %102, %103
  %112 = add <8 x i32> %105, %104
  %113 = sub <8 x i32> %104, %105
  %114 = add <8 x i32> %107, %106
  %115 = sub <8 x i32> %106, %107
  %116 = add <8 x i32> %109, %108
  %117 = sub <8 x i32> %108, %109
  %118 = add <8 x i32> %112, %110
  %119 = add <8 x i32> %113, %111
  %120 = sub <8 x i32> %110, %112
  %121 = sub <8 x i32> %111, %113
  %122 = add <8 x i32> %116, %114
  %123 = add <8 x i32> %117, %115
  %124 = sub <8 x i32> %114, %116
  %125 = sub <8 x i32> %115, %117
  %126 = add <8 x i32> %122, %118
  %127 = add <8 x i32> %123, %119
  %128 = add <8 x i32> %124, %120
  %129 = add <8 x i32> %125, %121
  %130 = sub <8 x i32> %118, %122
  %131 = sub <8 x i32> %119, %123
  %132 = sub <8 x i32> %120, %124
  %133 = sub <8 x i32> %121, %125
  %134 = bitcast i32* %14 to <8 x i32>*
  store <8 x i32> %126, <8 x i32>* %134, align 1
  %135 = getelementptr inbounds i32, i32* %14, i64 8
  %136 = bitcast i32* %135 to <8 x i32>*
  store <8 x i32> %132, <8 x i32>* %136, align 1
  %137 = getelementptr inbounds i32, i32* %14, i64 16
  %138 = bitcast i32* %137 to <8 x i32>*
  store <8 x i32> %130, <8 x i32>* %138, align 1
  %139 = getelementptr inbounds i32, i32* %14, i64 24
  %140 = bitcast i32* %139 to <8 x i32>*
  store <8 x i32> %128, <8 x i32>* %140, align 1
  %141 = getelementptr inbounds i32, i32* %14, i64 32
  %142 = bitcast i32* %141 to <8 x i32>*
  store <8 x i32> %129, <8 x i32>* %142, align 1
  %143 = getelementptr inbounds i32, i32* %14, i64 40
  %144 = bitcast i32* %143 to <8 x i32>*
  store <8 x i32> %133, <8 x i32>* %144, align 1
  %145 = getelementptr inbounds i32, i32* %14, i64 48
  %146 = bitcast i32* %145 to <8 x i32>*
  store <8 x i32> %131, <8 x i32>* %146, align 1
  %147 = getelementptr inbounds i32, i32* %14, i64 56
  %148 = bitcast i32* %147 to <8 x i32>*
  store <8 x i32> %127, <8 x i32>* %148, align 1
  %149 = add nuw nsw i64 %5, 1
  %150 = icmp eq i64 %149, 4
  br i1 %150, label %151, label %4

151:                                              ; preds = %4
  %152 = bitcast i32* %2 to <8 x i32>*
  %153 = load <8 x i32>, <8 x i32>* %152, align 1
  %154 = getelementptr inbounds i32, i32* %2, i64 64
  %155 = bitcast i32* %154 to <8 x i32>*
  %156 = load <8 x i32>, <8 x i32>* %155, align 1
  %157 = getelementptr inbounds i32, i32* %2, i64 128
  %158 = bitcast i32* %157 to <8 x i32>*
  %159 = load <8 x i32>, <8 x i32>* %158, align 1
  %160 = getelementptr inbounds i32, i32* %2, i64 192
  %161 = bitcast i32* %160 to <8 x i32>*
  %162 = load <8 x i32>, <8 x i32>* %161, align 1
  %163 = add <8 x i32> %156, %153
  %164 = sub <8 x i32> %153, %156
  %165 = add <8 x i32> %162, %159
  %166 = sub <8 x i32> %159, %162
  %167 = ashr <8 x i32> %163, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %168 = ashr <8 x i32> %164, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %169 = ashr <8 x i32> %165, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %170 = ashr <8 x i32> %166, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %171 = add nsw <8 x i32> %169, %167
  %172 = add nsw <8 x i32> %170, %168
  %173 = sub nsw <8 x i32> %167, %169
  %174 = sub nsw <8 x i32> %168, %170
  store <8 x i32> %171, <8 x i32>* %152, align 1
  store <8 x i32> %172, <8 x i32>* %155, align 1
  store <8 x i32> %173, <8 x i32>* %158, align 1
  store <8 x i32> %174, <8 x i32>* %161, align 1
  %175 = getelementptr inbounds i32, i32* %2, i64 8
  %176 = bitcast i32* %175 to <8 x i32>*
  %177 = load <8 x i32>, <8 x i32>* %176, align 1
  %178 = getelementptr inbounds i32, i32* %2, i64 72
  %179 = bitcast i32* %178 to <8 x i32>*
  %180 = load <8 x i32>, <8 x i32>* %179, align 1
  %181 = getelementptr inbounds i32, i32* %2, i64 136
  %182 = bitcast i32* %181 to <8 x i32>*
  %183 = load <8 x i32>, <8 x i32>* %182, align 1
  %184 = getelementptr inbounds i32, i32* %2, i64 200
  %185 = bitcast i32* %184 to <8 x i32>*
  %186 = load <8 x i32>, <8 x i32>* %185, align 1
  %187 = add <8 x i32> %180, %177
  %188 = sub <8 x i32> %177, %180
  %189 = add <8 x i32> %186, %183
  %190 = sub <8 x i32> %183, %186
  %191 = ashr <8 x i32> %187, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %192 = ashr <8 x i32> %188, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %193 = ashr <8 x i32> %189, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %194 = ashr <8 x i32> %190, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %195 = add nsw <8 x i32> %193, %191
  %196 = add nsw <8 x i32> %194, %192
  %197 = sub nsw <8 x i32> %191, %193
  %198 = sub nsw <8 x i32> %192, %194
  store <8 x i32> %195, <8 x i32>* %176, align 1
  store <8 x i32> %196, <8 x i32>* %179, align 1
  store <8 x i32> %197, <8 x i32>* %182, align 1
  store <8 x i32> %198, <8 x i32>* %185, align 1
  %199 = getelementptr inbounds i32, i32* %2, i64 16
  %200 = bitcast i32* %199 to <8 x i32>*
  %201 = load <8 x i32>, <8 x i32>* %200, align 1
  %202 = getelementptr inbounds i32, i32* %2, i64 80
  %203 = bitcast i32* %202 to <8 x i32>*
  %204 = load <8 x i32>, <8 x i32>* %203, align 1
  %205 = getelementptr inbounds i32, i32* %2, i64 144
  %206 = bitcast i32* %205 to <8 x i32>*
  %207 = load <8 x i32>, <8 x i32>* %206, align 1
  %208 = getelementptr inbounds i32, i32* %2, i64 208
  %209 = bitcast i32* %208 to <8 x i32>*
  %210 = load <8 x i32>, <8 x i32>* %209, align 1
  %211 = add <8 x i32> %204, %201
  %212 = sub <8 x i32> %201, %204
  %213 = add <8 x i32> %210, %207
  %214 = sub <8 x i32> %207, %210
  %215 = ashr <8 x i32> %211, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %216 = ashr <8 x i32> %212, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %217 = ashr <8 x i32> %213, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %218 = ashr <8 x i32> %214, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %219 = add nsw <8 x i32> %217, %215
  %220 = add nsw <8 x i32> %218, %216
  %221 = sub nsw <8 x i32> %215, %217
  %222 = sub nsw <8 x i32> %216, %218
  store <8 x i32> %219, <8 x i32>* %200, align 1
  store <8 x i32> %220, <8 x i32>* %203, align 1
  store <8 x i32> %221, <8 x i32>* %206, align 1
  store <8 x i32> %222, <8 x i32>* %209, align 1
  %223 = getelementptr inbounds i32, i32* %2, i64 24
  %224 = bitcast i32* %223 to <8 x i32>*
  %225 = load <8 x i32>, <8 x i32>* %224, align 1
  %226 = getelementptr inbounds i32, i32* %2, i64 88
  %227 = bitcast i32* %226 to <8 x i32>*
  %228 = load <8 x i32>, <8 x i32>* %227, align 1
  %229 = getelementptr inbounds i32, i32* %2, i64 152
  %230 = bitcast i32* %229 to <8 x i32>*
  %231 = load <8 x i32>, <8 x i32>* %230, align 1
  %232 = getelementptr inbounds i32, i32* %2, i64 216
  %233 = bitcast i32* %232 to <8 x i32>*
  %234 = load <8 x i32>, <8 x i32>* %233, align 1
  %235 = add <8 x i32> %228, %225
  %236 = sub <8 x i32> %225, %228
  %237 = add <8 x i32> %234, %231
  %238 = sub <8 x i32> %231, %234
  %239 = ashr <8 x i32> %235, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %240 = ashr <8 x i32> %236, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %241 = ashr <8 x i32> %237, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %242 = ashr <8 x i32> %238, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %243 = add nsw <8 x i32> %241, %239
  %244 = add nsw <8 x i32> %242, %240
  %245 = sub nsw <8 x i32> %239, %241
  %246 = sub nsw <8 x i32> %240, %242
  store <8 x i32> %243, <8 x i32>* %224, align 1
  store <8 x i32> %244, <8 x i32>* %227, align 1
  store <8 x i32> %245, <8 x i32>* %230, align 1
  store <8 x i32> %246, <8 x i32>* %233, align 1
  %247 = getelementptr inbounds i32, i32* %2, i64 32
  %248 = bitcast i32* %247 to <8 x i32>*
  %249 = load <8 x i32>, <8 x i32>* %248, align 1
  %250 = getelementptr inbounds i32, i32* %2, i64 96
  %251 = bitcast i32* %250 to <8 x i32>*
  %252 = load <8 x i32>, <8 x i32>* %251, align 1
  %253 = getelementptr inbounds i32, i32* %2, i64 160
  %254 = bitcast i32* %253 to <8 x i32>*
  %255 = load <8 x i32>, <8 x i32>* %254, align 1
  %256 = getelementptr inbounds i32, i32* %2, i64 224
  %257 = bitcast i32* %256 to <8 x i32>*
  %258 = load <8 x i32>, <8 x i32>* %257, align 1
  %259 = add <8 x i32> %252, %249
  %260 = sub <8 x i32> %249, %252
  %261 = add <8 x i32> %258, %255
  %262 = sub <8 x i32> %255, %258
  %263 = ashr <8 x i32> %259, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %264 = ashr <8 x i32> %260, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %265 = ashr <8 x i32> %261, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %266 = ashr <8 x i32> %262, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %267 = add nsw <8 x i32> %265, %263
  %268 = add nsw <8 x i32> %266, %264
  %269 = sub nsw <8 x i32> %263, %265
  %270 = sub nsw <8 x i32> %264, %266
  store <8 x i32> %267, <8 x i32>* %248, align 1
  store <8 x i32> %268, <8 x i32>* %251, align 1
  store <8 x i32> %269, <8 x i32>* %254, align 1
  store <8 x i32> %270, <8 x i32>* %257, align 1
  %271 = getelementptr inbounds i32, i32* %2, i64 40
  %272 = bitcast i32* %271 to <8 x i32>*
  %273 = load <8 x i32>, <8 x i32>* %272, align 1
  %274 = getelementptr inbounds i32, i32* %2, i64 104
  %275 = bitcast i32* %274 to <8 x i32>*
  %276 = load <8 x i32>, <8 x i32>* %275, align 1
  %277 = getelementptr inbounds i32, i32* %2, i64 168
  %278 = bitcast i32* %277 to <8 x i32>*
  %279 = load <8 x i32>, <8 x i32>* %278, align 1
  %280 = getelementptr inbounds i32, i32* %2, i64 232
  %281 = bitcast i32* %280 to <8 x i32>*
  %282 = load <8 x i32>, <8 x i32>* %281, align 1
  %283 = add <8 x i32> %276, %273
  %284 = sub <8 x i32> %273, %276
  %285 = add <8 x i32> %282, %279
  %286 = sub <8 x i32> %279, %282
  %287 = ashr <8 x i32> %283, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %288 = ashr <8 x i32> %284, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %289 = ashr <8 x i32> %285, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %290 = ashr <8 x i32> %286, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %291 = add nsw <8 x i32> %289, %287
  %292 = add nsw <8 x i32> %290, %288
  %293 = sub nsw <8 x i32> %287, %289
  %294 = sub nsw <8 x i32> %288, %290
  store <8 x i32> %291, <8 x i32>* %272, align 1
  store <8 x i32> %292, <8 x i32>* %275, align 1
  store <8 x i32> %293, <8 x i32>* %278, align 1
  store <8 x i32> %294, <8 x i32>* %281, align 1
  %295 = getelementptr inbounds i32, i32* %2, i64 48
  %296 = bitcast i32* %295 to <8 x i32>*
  %297 = load <8 x i32>, <8 x i32>* %296, align 1
  %298 = getelementptr inbounds i32, i32* %2, i64 112
  %299 = bitcast i32* %298 to <8 x i32>*
  %300 = load <8 x i32>, <8 x i32>* %299, align 1
  %301 = getelementptr inbounds i32, i32* %2, i64 176
  %302 = bitcast i32* %301 to <8 x i32>*
  %303 = load <8 x i32>, <8 x i32>* %302, align 1
  %304 = getelementptr inbounds i32, i32* %2, i64 240
  %305 = bitcast i32* %304 to <8 x i32>*
  %306 = load <8 x i32>, <8 x i32>* %305, align 1
  %307 = add <8 x i32> %300, %297
  %308 = sub <8 x i32> %297, %300
  %309 = add <8 x i32> %306, %303
  %310 = sub <8 x i32> %303, %306
  %311 = ashr <8 x i32> %307, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %312 = ashr <8 x i32> %308, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %313 = ashr <8 x i32> %309, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %314 = ashr <8 x i32> %310, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %315 = add nsw <8 x i32> %313, %311
  %316 = add nsw <8 x i32> %314, %312
  %317 = sub nsw <8 x i32> %311, %313
  %318 = sub nsw <8 x i32> %312, %314
  store <8 x i32> %315, <8 x i32>* %296, align 1
  store <8 x i32> %316, <8 x i32>* %299, align 1
  store <8 x i32> %317, <8 x i32>* %302, align 1
  store <8 x i32> %318, <8 x i32>* %305, align 1
  %319 = getelementptr inbounds i32, i32* %2, i64 56
  %320 = bitcast i32* %319 to <8 x i32>*
  %321 = load <8 x i32>, <8 x i32>* %320, align 1
  %322 = getelementptr inbounds i32, i32* %2, i64 120
  %323 = bitcast i32* %322 to <8 x i32>*
  %324 = load <8 x i32>, <8 x i32>* %323, align 1
  %325 = getelementptr inbounds i32, i32* %2, i64 184
  %326 = bitcast i32* %325 to <8 x i32>*
  %327 = load <8 x i32>, <8 x i32>* %326, align 1
  %328 = getelementptr inbounds i32, i32* %2, i64 248
  %329 = bitcast i32* %328 to <8 x i32>*
  %330 = load <8 x i32>, <8 x i32>* %329, align 1
  %331 = add <8 x i32> %324, %321
  %332 = sub <8 x i32> %321, %324
  %333 = add <8 x i32> %330, %327
  %334 = sub <8 x i32> %327, %330
  %335 = ashr <8 x i32> %331, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %336 = ashr <8 x i32> %332, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %337 = ashr <8 x i32> %333, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %338 = ashr <8 x i32> %334, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %339 = add nsw <8 x i32> %337, %335
  %340 = add nsw <8 x i32> %338, %336
  %341 = sub nsw <8 x i32> %335, %337
  %342 = sub nsw <8 x i32> %336, %338
  store <8 x i32> %339, <8 x i32>* %320, align 1
  store <8 x i32> %340, <8 x i32>* %323, align 1
  store <8 x i32> %341, <8 x i32>* %326, align 1
  store <8 x i32> %342, <8 x i32>* %329, align 1
  ret void
}

; Function Attrs: nofree nounwind ssp uwtable
define hidden void @vpx_highbd_hadamard_32x32_avx2(i16* nocapture readonly, i64, i32* nocapture) local_unnamed_addr #2 {
  tail call void @vpx_highbd_hadamard_16x16_avx2(i16* %0, i64 %1, i32* %2)
  %4 = getelementptr inbounds i16, i16* %0, i64 16
  %5 = getelementptr inbounds i32, i32* %2, i64 256
  tail call void @vpx_highbd_hadamard_16x16_avx2(i16* %4, i64 %1, i32* %5)
  %6 = shl nsw i64 %1, 4
  %7 = getelementptr inbounds i16, i16* %0, i64 %6
  %8 = getelementptr inbounds i32, i32* %2, i64 512
  tail call void @vpx_highbd_hadamard_16x16_avx2(i16* %7, i64 %1, i32* %8)
  %9 = getelementptr inbounds i16, i16* %7, i64 16
  %10 = getelementptr inbounds i32, i32* %2, i64 768
  tail call void @vpx_highbd_hadamard_16x16_avx2(i16* %9, i64 %1, i32* %10)
  br label %11

11:                                               ; preds = %3, %11
  %12 = phi i32* [ %37, %11 ], [ %2, %3 ]
  %13 = phi i32 [ %38, %11 ], [ 0, %3 ]
  %14 = bitcast i32* %12 to <8 x i32>*
  %15 = load <8 x i32>, <8 x i32>* %14, align 1
  %16 = getelementptr inbounds i32, i32* %12, i64 256
  %17 = bitcast i32* %16 to <8 x i32>*
  %18 = load <8 x i32>, <8 x i32>* %17, align 1
  %19 = getelementptr inbounds i32, i32* %12, i64 512
  %20 = bitcast i32* %19 to <8 x i32>*
  %21 = load <8 x i32>, <8 x i32>* %20, align 1
  %22 = getelementptr inbounds i32, i32* %12, i64 768
  %23 = bitcast i32* %22 to <8 x i32>*
  %24 = load <8 x i32>, <8 x i32>* %23, align 1
  %25 = add <8 x i32> %18, %15
  %26 = sub <8 x i32> %15, %18
  %27 = add <8 x i32> %24, %21
  %28 = sub <8 x i32> %21, %24
  %29 = ashr <8 x i32> %25, <i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2>
  %30 = ashr <8 x i32> %26, <i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2>
  %31 = ashr <8 x i32> %27, <i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2>
  %32 = ashr <8 x i32> %28, <i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2>
  %33 = add nsw <8 x i32> %31, %29
  %34 = add nsw <8 x i32> %32, %30
  %35 = sub nsw <8 x i32> %29, %31
  %36 = sub nsw <8 x i32> %30, %32
  store <8 x i32> %33, <8 x i32>* %14, align 1
  store <8 x i32> %34, <8 x i32>* %17, align 1
  store <8 x i32> %35, <8 x i32>* %20, align 1
  store <8 x i32> %36, <8 x i32>* %23, align 1
  %37 = getelementptr inbounds i32, i32* %12, i64 8
  %38 = add nuw nsw i32 %13, 8
  %39 = icmp ult i32 %38, 256
  br i1 %39, label %11, label %40

40:                                               ; preds = %11
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @vpx_hadamard_16x16_avx2(i16* nocapture readonly, i64, i32* nocapture) local_unnamed_addr #0 {
  %4 = alloca [256 x i16], align 32
  %5 = bitcast [256 x i16]* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 512, i8* nonnull %5) #6
  call void @llvm.memset.p0i8.i64(i8* nonnull align 32 %5, i8 -86, i64 512, i1 false) #6
  %6 = shl i64 %1, 3
  br label %7

7:                                                ; preds = %7, %3
  %8 = phi i64 [ 0, %3 ], [ %163, %7 ]
  %9 = mul nuw nsw i64 %6, %8
  %10 = getelementptr inbounds i16, i16* %0, i64 %9
  %11 = shl nsw i64 %8, 7
  %12 = getelementptr inbounds [256 x i16], [256 x i16]* %4, i64 0, i64 %11
  %13 = bitcast i16* %10 to <16 x i16>*
  %14 = load <16 x i16>, <16 x i16>* %13, align 1
  %15 = getelementptr inbounds i16, i16* %10, i64 %1
  %16 = bitcast i16* %15 to <16 x i16>*
  %17 = load <16 x i16>, <16 x i16>* %16, align 1
  %18 = getelementptr inbounds i16, i16* %15, i64 %1
  %19 = bitcast i16* %18 to <16 x i16>*
  %20 = load <16 x i16>, <16 x i16>* %19, align 1
  %21 = getelementptr inbounds i16, i16* %18, i64 %1
  %22 = bitcast i16* %21 to <16 x i16>*
  %23 = load <16 x i16>, <16 x i16>* %22, align 1
  %24 = getelementptr inbounds i16, i16* %21, i64 %1
  %25 = bitcast i16* %24 to <16 x i16>*
  %26 = load <16 x i16>, <16 x i16>* %25, align 1
  %27 = getelementptr inbounds i16, i16* %24, i64 %1
  %28 = bitcast i16* %27 to <16 x i16>*
  %29 = load <16 x i16>, <16 x i16>* %28, align 1
  %30 = getelementptr inbounds i16, i16* %27, i64 %1
  %31 = bitcast i16* %30 to <16 x i16>*
  %32 = load <16 x i16>, <16 x i16>* %31, align 1
  %33 = getelementptr inbounds i16, i16* %30, i64 %1
  %34 = bitcast i16* %33 to <16 x i16>*
  %35 = load <16 x i16>, <16 x i16>* %34, align 1
  %36 = add <16 x i16> %17, %14
  %37 = sub <16 x i16> %14, %17
  %38 = add <16 x i16> %23, %20
  %39 = sub <16 x i16> %20, %23
  %40 = add <16 x i16> %29, %26
  %41 = sub <16 x i16> %26, %29
  %42 = add <16 x i16> %35, %32
  %43 = sub <16 x i16> %32, %35
  %44 = add <16 x i16> %38, %36
  %45 = add <16 x i16> %39, %37
  %46 = sub <16 x i16> %36, %38
  %47 = sub <16 x i16> %37, %39
  %48 = add <16 x i16> %42, %40
  %49 = add <16 x i16> %43, %41
  %50 = sub <16 x i16> %40, %42
  %51 = sub <16 x i16> %41, %43
  %52 = add <16 x i16> %48, %44
  %53 = add <16 x i16> %49, %45
  %54 = add <16 x i16> %50, %46
  %55 = add <16 x i16> %51, %47
  %56 = sub <16 x i16> %44, %48
  %57 = sub <16 x i16> %45, %49
  %58 = sub <16 x i16> %46, %50
  %59 = sub <16 x i16> %47, %51
  %60 = shufflevector <16 x i16> %52, <16 x i16> %58, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27>
  %61 = shufflevector <16 x i16> %56, <16 x i16> %54, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27>
  %62 = shufflevector <16 x i16> %52, <16 x i16> %58, <16 x i32> <i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %63 = shufflevector <16 x i16> %56, <16 x i16> %54, <16 x i32> <i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %64 = shufflevector <16 x i16> %55, <16 x i16> %59, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27>
  %65 = shufflevector <16 x i16> %57, <16 x i16> %53, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27>
  %66 = shufflevector <16 x i16> %55, <16 x i16> %59, <16 x i32> <i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %67 = shufflevector <16 x i16> %57, <16 x i16> %53, <16 x i32> <i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %68 = bitcast <16 x i16> %60 to <8 x i32>
  %69 = bitcast <16 x i16> %61 to <8 x i32>
  %70 = shufflevector <8 x i32> %68, <8 x i32> %69, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 4, i32 12, i32 5, i32 13>
  %71 = bitcast <8 x i32> %70 to <4 x i64>
  %72 = bitcast <16 x i16> %64 to <8 x i32>
  %73 = bitcast <16 x i16> %65 to <8 x i32>
  %74 = shufflevector <8 x i32> %72, <8 x i32> %73, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 4, i32 12, i32 5, i32 13>
  %75 = bitcast <8 x i32> %74 to <4 x i64>
  %76 = shufflevector <8 x i32> %68, <8 x i32> %69, <8 x i32> <i32 2, i32 10, i32 3, i32 11, i32 6, i32 14, i32 7, i32 15>
  %77 = bitcast <8 x i32> %76 to <4 x i64>
  %78 = shufflevector <8 x i32> %72, <8 x i32> %73, <8 x i32> <i32 2, i32 10, i32 3, i32 11, i32 6, i32 14, i32 7, i32 15>
  %79 = bitcast <8 x i32> %78 to <4 x i64>
  %80 = bitcast <16 x i16> %62 to <8 x i32>
  %81 = bitcast <16 x i16> %63 to <8 x i32>
  %82 = shufflevector <8 x i32> %80, <8 x i32> %81, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 4, i32 12, i32 5, i32 13>
  %83 = bitcast <8 x i32> %82 to <4 x i64>
  %84 = bitcast <16 x i16> %66 to <8 x i32>
  %85 = bitcast <16 x i16> %67 to <8 x i32>
  %86 = shufflevector <8 x i32> %84, <8 x i32> %85, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 4, i32 12, i32 5, i32 13>
  %87 = bitcast <8 x i32> %86 to <4 x i64>
  %88 = shufflevector <8 x i32> %80, <8 x i32> %81, <8 x i32> <i32 2, i32 10, i32 3, i32 11, i32 6, i32 14, i32 7, i32 15>
  %89 = bitcast <8 x i32> %88 to <4 x i64>
  %90 = shufflevector <8 x i32> %84, <8 x i32> %85, <8 x i32> <i32 2, i32 10, i32 3, i32 11, i32 6, i32 14, i32 7, i32 15>
  %91 = bitcast <8 x i32> %90 to <4 x i64>
  %92 = shufflevector <4 x i64> %71, <4 x i64> %75, <4 x i32> <i32 0, i32 4, i32 2, i32 6>
  %93 = shufflevector <4 x i64> %71, <4 x i64> %75, <4 x i32> <i32 1, i32 5, i32 3, i32 7>
  %94 = shufflevector <4 x i64> %77, <4 x i64> %79, <4 x i32> <i32 0, i32 4, i32 2, i32 6>
  %95 = shufflevector <4 x i64> %77, <4 x i64> %79, <4 x i32> <i32 1, i32 5, i32 3, i32 7>
  %96 = shufflevector <4 x i64> %83, <4 x i64> %87, <4 x i32> <i32 0, i32 4, i32 2, i32 6>
  %97 = shufflevector <4 x i64> %83, <4 x i64> %87, <4 x i32> <i32 1, i32 5, i32 3, i32 7>
  %98 = shufflevector <4 x i64> %89, <4 x i64> %91, <4 x i32> <i32 0, i32 4, i32 2, i32 6>
  %99 = shufflevector <4 x i64> %89, <4 x i64> %91, <4 x i32> <i32 1, i32 5, i32 3, i32 7>
  %100 = bitcast <4 x i64> %92 to <16 x i16>
  %101 = bitcast <4 x i64> %93 to <16 x i16>
  %102 = bitcast <4 x i64> %94 to <16 x i16>
  %103 = bitcast <4 x i64> %95 to <16 x i16>
  %104 = bitcast <4 x i64> %96 to <16 x i16>
  %105 = bitcast <4 x i64> %97 to <16 x i16>
  %106 = bitcast <4 x i64> %98 to <16 x i16>
  %107 = bitcast <4 x i64> %99 to <16 x i16>
  %108 = add <16 x i16> %101, %100
  %109 = sub <16 x i16> %100, %101
  %110 = add <16 x i16> %103, %102
  %111 = sub <16 x i16> %102, %103
  %112 = add <16 x i16> %105, %104
  %113 = sub <16 x i16> %104, %105
  %114 = add <16 x i16> %107, %106
  %115 = sub <16 x i16> %106, %107
  %116 = add <16 x i16> %110, %108
  %117 = add <16 x i16> %111, %109
  %118 = sub <16 x i16> %108, %110
  %119 = sub <16 x i16> %109, %111
  %120 = add <16 x i16> %114, %112
  %121 = add <16 x i16> %115, %113
  %122 = sub <16 x i16> %112, %114
  %123 = sub <16 x i16> %113, %115
  %124 = add <16 x i16> %120, %116
  %125 = bitcast <16 x i16> %124 to <4 x i64>
  %126 = add <16 x i16> %121, %117
  %127 = bitcast <16 x i16> %126 to <4 x i64>
  %128 = add <16 x i16> %122, %118
  %129 = bitcast <16 x i16> %128 to <4 x i64>
  %130 = add <16 x i16> %123, %119
  %131 = bitcast <16 x i16> %130 to <4 x i64>
  %132 = sub <16 x i16> %116, %120
  %133 = bitcast <16 x i16> %132 to <4 x i64>
  %134 = sub <16 x i16> %117, %121
  %135 = bitcast <16 x i16> %134 to <4 x i64>
  %136 = sub <16 x i16> %118, %122
  %137 = bitcast <16 x i16> %136 to <4 x i64>
  %138 = sub <16 x i16> %119, %123
  %139 = bitcast <16 x i16> %138 to <4 x i64>
  %140 = bitcast i16* %12 to <4 x i64>*
  %141 = shufflevector <4 x i64> %125, <4 x i64> %137, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  store <4 x i64> %141, <4 x i64>* %140, align 32
  %142 = getelementptr inbounds i16, i16* %12, i64 16
  %143 = bitcast i16* %142 to <4 x i64>*
  %144 = shufflevector <4 x i64> %133, <4 x i64> %129, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  store <4 x i64> %144, <4 x i64>* %143, align 32
  %145 = getelementptr inbounds i16, i16* %12, i64 32
  %146 = bitcast i16* %145 to <4 x i64>*
  %147 = shufflevector <4 x i64> %131, <4 x i64> %139, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  store <4 x i64> %147, <4 x i64>* %146, align 32
  %148 = getelementptr inbounds i16, i16* %12, i64 48
  %149 = bitcast i16* %148 to <4 x i64>*
  %150 = shufflevector <4 x i64> %135, <4 x i64> %127, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  store <4 x i64> %150, <4 x i64>* %149, align 32
  %151 = getelementptr inbounds i16, i16* %12, i64 64
  %152 = bitcast i16* %151 to <4 x i64>*
  %153 = shufflevector <4 x i64> %125, <4 x i64> %137, <4 x i32> <i32 2, i32 3, i32 6, i32 7>
  store <4 x i64> %153, <4 x i64>* %152, align 32
  %154 = getelementptr inbounds i16, i16* %12, i64 80
  %155 = bitcast i16* %154 to <4 x i64>*
  %156 = shufflevector <4 x i64> %133, <4 x i64> %129, <4 x i32> <i32 2, i32 3, i32 6, i32 7>
  store <4 x i64> %156, <4 x i64>* %155, align 32
  %157 = getelementptr inbounds i16, i16* %12, i64 96
  %158 = bitcast i16* %157 to <4 x i64>*
  %159 = shufflevector <4 x i64> %131, <4 x i64> %139, <4 x i32> <i32 2, i32 3, i32 6, i32 7>
  store <4 x i64> %159, <4 x i64>* %158, align 32
  %160 = getelementptr inbounds i16, i16* %12, i64 112
  %161 = bitcast i16* %160 to <4 x i64>*
  %162 = shufflevector <4 x i64> %135, <4 x i64> %127, <4 x i32> <i32 2, i32 3, i32 6, i32 7>
  store <4 x i64> %162, <4 x i64>* %161, align 32
  %163 = add nuw nsw i64 %8, 1
  %164 = icmp eq i64 %163, 2
  br i1 %164, label %165, label %7

165:                                              ; preds = %7
  %166 = bitcast [256 x i16]* %4 to <16 x i16>*
  %167 = load <16 x i16>, <16 x i16>* %166, align 32
  %168 = getelementptr inbounds [256 x i16], [256 x i16]* %4, i64 0, i64 64
  %169 = bitcast i16* %168 to <16 x i16>*
  %170 = load <16 x i16>, <16 x i16>* %169, align 32
  %171 = getelementptr inbounds [256 x i16], [256 x i16]* %4, i64 0, i64 128
  %172 = bitcast i16* %171 to <16 x i16>*
  %173 = load <16 x i16>, <16 x i16>* %172, align 32
  %174 = getelementptr inbounds [256 x i16], [256 x i16]* %4, i64 0, i64 192
  %175 = bitcast i16* %174 to <16 x i16>*
  %176 = load <16 x i16>, <16 x i16>* %175, align 32
  %177 = add <16 x i16> %170, %167
  %178 = sub <16 x i16> %167, %170
  %179 = add <16 x i16> %176, %173
  %180 = sub <16 x i16> %173, %176
  %181 = ashr <16 x i16> %177, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %182 = ashr <16 x i16> %178, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %183 = ashr <16 x i16> %179, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %184 = ashr <16 x i16> %180, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %185 = add nsw <16 x i16> %183, %181
  %186 = tail call <16 x i16> @llvm.x86.avx2.pmulh.w(<16 x i16> %185, <16 x i16> <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>) #6
  %187 = shufflevector <16 x i16> %185, <16 x i16> %186, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27>
  %188 = shufflevector <16 x i16> %185, <16 x i16> %186, <16 x i32> <i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %189 = bitcast i32* %2 to <16 x i16>*
  store <16 x i16> %187, <16 x i16>* %189, align 1
  %190 = getelementptr inbounds i32, i32* %2, i64 8
  %191 = bitcast i32* %190 to <16 x i16>*
  store <16 x i16> %188, <16 x i16>* %191, align 1
  %192 = add nsw <16 x i16> %184, %182
  %193 = getelementptr inbounds i32, i32* %2, i64 64
  %194 = tail call <16 x i16> @llvm.x86.avx2.pmulh.w(<16 x i16> %192, <16 x i16> <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>) #6
  %195 = shufflevector <16 x i16> %192, <16 x i16> %194, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27>
  %196 = shufflevector <16 x i16> %192, <16 x i16> %194, <16 x i32> <i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %197 = bitcast i32* %193 to <16 x i16>*
  store <16 x i16> %195, <16 x i16>* %197, align 1
  %198 = getelementptr inbounds i32, i32* %2, i64 72
  %199 = bitcast i32* %198 to <16 x i16>*
  store <16 x i16> %196, <16 x i16>* %199, align 1
  %200 = sub nsw <16 x i16> %181, %183
  %201 = getelementptr inbounds i32, i32* %2, i64 128
  %202 = tail call <16 x i16> @llvm.x86.avx2.pmulh.w(<16 x i16> %200, <16 x i16> <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>) #6
  %203 = shufflevector <16 x i16> %200, <16 x i16> %202, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27>
  %204 = shufflevector <16 x i16> %200, <16 x i16> %202, <16 x i32> <i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %205 = bitcast i32* %201 to <16 x i16>*
  store <16 x i16> %203, <16 x i16>* %205, align 1
  %206 = getelementptr inbounds i32, i32* %2, i64 136
  %207 = bitcast i32* %206 to <16 x i16>*
  store <16 x i16> %204, <16 x i16>* %207, align 1
  %208 = sub nsw <16 x i16> %182, %184
  %209 = getelementptr inbounds i32, i32* %2, i64 192
  %210 = tail call <16 x i16> @llvm.x86.avx2.pmulh.w(<16 x i16> %208, <16 x i16> <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>) #6
  %211 = shufflevector <16 x i16> %208, <16 x i16> %210, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27>
  %212 = shufflevector <16 x i16> %208, <16 x i16> %210, <16 x i32> <i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %213 = bitcast i32* %209 to <16 x i16>*
  store <16 x i16> %211, <16 x i16>* %213, align 1
  %214 = getelementptr inbounds i32, i32* %2, i64 200
  %215 = bitcast i32* %214 to <16 x i16>*
  store <16 x i16> %212, <16 x i16>* %215, align 1
  %216 = getelementptr inbounds i32, i32* %2, i64 16
  %217 = getelementptr inbounds [256 x i16], [256 x i16]* %4, i64 0, i64 16
  %218 = bitcast i16* %217 to <16 x i16>*
  %219 = load <16 x i16>, <16 x i16>* %218, align 32
  %220 = getelementptr inbounds [256 x i16], [256 x i16]* %4, i64 0, i64 80
  %221 = bitcast i16* %220 to <16 x i16>*
  %222 = load <16 x i16>, <16 x i16>* %221, align 32
  %223 = getelementptr inbounds [256 x i16], [256 x i16]* %4, i64 0, i64 144
  %224 = bitcast i16* %223 to <16 x i16>*
  %225 = load <16 x i16>, <16 x i16>* %224, align 32
  %226 = getelementptr inbounds [256 x i16], [256 x i16]* %4, i64 0, i64 208
  %227 = bitcast i16* %226 to <16 x i16>*
  %228 = load <16 x i16>, <16 x i16>* %227, align 32
  %229 = add <16 x i16> %222, %219
  %230 = sub <16 x i16> %219, %222
  %231 = add <16 x i16> %228, %225
  %232 = sub <16 x i16> %225, %228
  %233 = ashr <16 x i16> %229, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %234 = ashr <16 x i16> %230, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %235 = ashr <16 x i16> %231, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %236 = ashr <16 x i16> %232, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %237 = add nsw <16 x i16> %235, %233
  %238 = tail call <16 x i16> @llvm.x86.avx2.pmulh.w(<16 x i16> %237, <16 x i16> <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>) #6
  %239 = shufflevector <16 x i16> %237, <16 x i16> %238, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27>
  %240 = shufflevector <16 x i16> %237, <16 x i16> %238, <16 x i32> <i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %241 = bitcast i32* %216 to <16 x i16>*
  store <16 x i16> %239, <16 x i16>* %241, align 1
  %242 = getelementptr inbounds i32, i32* %2, i64 24
  %243 = bitcast i32* %242 to <16 x i16>*
  store <16 x i16> %240, <16 x i16>* %243, align 1
  %244 = add nsw <16 x i16> %236, %234
  %245 = getelementptr inbounds i32, i32* %2, i64 80
  %246 = tail call <16 x i16> @llvm.x86.avx2.pmulh.w(<16 x i16> %244, <16 x i16> <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>) #6
  %247 = shufflevector <16 x i16> %244, <16 x i16> %246, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27>
  %248 = shufflevector <16 x i16> %244, <16 x i16> %246, <16 x i32> <i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %249 = bitcast i32* %245 to <16 x i16>*
  store <16 x i16> %247, <16 x i16>* %249, align 1
  %250 = getelementptr inbounds i32, i32* %2, i64 88
  %251 = bitcast i32* %250 to <16 x i16>*
  store <16 x i16> %248, <16 x i16>* %251, align 1
  %252 = sub nsw <16 x i16> %233, %235
  %253 = getelementptr inbounds i32, i32* %2, i64 144
  %254 = tail call <16 x i16> @llvm.x86.avx2.pmulh.w(<16 x i16> %252, <16 x i16> <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>) #6
  %255 = shufflevector <16 x i16> %252, <16 x i16> %254, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27>
  %256 = shufflevector <16 x i16> %252, <16 x i16> %254, <16 x i32> <i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %257 = bitcast i32* %253 to <16 x i16>*
  store <16 x i16> %255, <16 x i16>* %257, align 1
  %258 = getelementptr inbounds i32, i32* %2, i64 152
  %259 = bitcast i32* %258 to <16 x i16>*
  store <16 x i16> %256, <16 x i16>* %259, align 1
  %260 = sub nsw <16 x i16> %234, %236
  %261 = getelementptr inbounds i32, i32* %2, i64 208
  %262 = tail call <16 x i16> @llvm.x86.avx2.pmulh.w(<16 x i16> %260, <16 x i16> <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>) #6
  %263 = shufflevector <16 x i16> %260, <16 x i16> %262, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27>
  %264 = shufflevector <16 x i16> %260, <16 x i16> %262, <16 x i32> <i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %265 = bitcast i32* %261 to <16 x i16>*
  store <16 x i16> %263, <16 x i16>* %265, align 1
  %266 = getelementptr inbounds i32, i32* %2, i64 216
  %267 = bitcast i32* %266 to <16 x i16>*
  store <16 x i16> %264, <16 x i16>* %267, align 1
  %268 = getelementptr inbounds i32, i32* %2, i64 32
  %269 = getelementptr inbounds [256 x i16], [256 x i16]* %4, i64 0, i64 32
  %270 = bitcast i16* %269 to <16 x i16>*
  %271 = load <16 x i16>, <16 x i16>* %270, align 32
  %272 = getelementptr inbounds [256 x i16], [256 x i16]* %4, i64 0, i64 96
  %273 = bitcast i16* %272 to <16 x i16>*
  %274 = load <16 x i16>, <16 x i16>* %273, align 32
  %275 = getelementptr inbounds [256 x i16], [256 x i16]* %4, i64 0, i64 160
  %276 = bitcast i16* %275 to <16 x i16>*
  %277 = load <16 x i16>, <16 x i16>* %276, align 32
  %278 = getelementptr inbounds [256 x i16], [256 x i16]* %4, i64 0, i64 224
  %279 = bitcast i16* %278 to <16 x i16>*
  %280 = load <16 x i16>, <16 x i16>* %279, align 32
  %281 = add <16 x i16> %274, %271
  %282 = sub <16 x i16> %271, %274
  %283 = add <16 x i16> %280, %277
  %284 = sub <16 x i16> %277, %280
  %285 = ashr <16 x i16> %281, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %286 = ashr <16 x i16> %282, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %287 = ashr <16 x i16> %283, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %288 = ashr <16 x i16> %284, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %289 = add nsw <16 x i16> %287, %285
  %290 = tail call <16 x i16> @llvm.x86.avx2.pmulh.w(<16 x i16> %289, <16 x i16> <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>) #6
  %291 = shufflevector <16 x i16> %289, <16 x i16> %290, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27>
  %292 = shufflevector <16 x i16> %289, <16 x i16> %290, <16 x i32> <i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %293 = bitcast i32* %268 to <16 x i16>*
  store <16 x i16> %291, <16 x i16>* %293, align 1
  %294 = getelementptr inbounds i32, i32* %2, i64 40
  %295 = bitcast i32* %294 to <16 x i16>*
  store <16 x i16> %292, <16 x i16>* %295, align 1
  %296 = add nsw <16 x i16> %288, %286
  %297 = getelementptr inbounds i32, i32* %2, i64 96
  %298 = tail call <16 x i16> @llvm.x86.avx2.pmulh.w(<16 x i16> %296, <16 x i16> <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>) #6
  %299 = shufflevector <16 x i16> %296, <16 x i16> %298, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27>
  %300 = shufflevector <16 x i16> %296, <16 x i16> %298, <16 x i32> <i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %301 = bitcast i32* %297 to <16 x i16>*
  store <16 x i16> %299, <16 x i16>* %301, align 1
  %302 = getelementptr inbounds i32, i32* %2, i64 104
  %303 = bitcast i32* %302 to <16 x i16>*
  store <16 x i16> %300, <16 x i16>* %303, align 1
  %304 = sub nsw <16 x i16> %285, %287
  %305 = getelementptr inbounds i32, i32* %2, i64 160
  %306 = tail call <16 x i16> @llvm.x86.avx2.pmulh.w(<16 x i16> %304, <16 x i16> <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>) #6
  %307 = shufflevector <16 x i16> %304, <16 x i16> %306, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27>
  %308 = shufflevector <16 x i16> %304, <16 x i16> %306, <16 x i32> <i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %309 = bitcast i32* %305 to <16 x i16>*
  store <16 x i16> %307, <16 x i16>* %309, align 1
  %310 = getelementptr inbounds i32, i32* %2, i64 168
  %311 = bitcast i32* %310 to <16 x i16>*
  store <16 x i16> %308, <16 x i16>* %311, align 1
  %312 = sub nsw <16 x i16> %286, %288
  %313 = getelementptr inbounds i32, i32* %2, i64 224
  %314 = tail call <16 x i16> @llvm.x86.avx2.pmulh.w(<16 x i16> %312, <16 x i16> <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>) #6
  %315 = shufflevector <16 x i16> %312, <16 x i16> %314, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27>
  %316 = shufflevector <16 x i16> %312, <16 x i16> %314, <16 x i32> <i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %317 = bitcast i32* %313 to <16 x i16>*
  store <16 x i16> %315, <16 x i16>* %317, align 1
  %318 = getelementptr inbounds i32, i32* %2, i64 232
  %319 = bitcast i32* %318 to <16 x i16>*
  store <16 x i16> %316, <16 x i16>* %319, align 1
  %320 = getelementptr inbounds i32, i32* %2, i64 48
  %321 = getelementptr inbounds [256 x i16], [256 x i16]* %4, i64 0, i64 48
  %322 = bitcast i16* %321 to <16 x i16>*
  %323 = load <16 x i16>, <16 x i16>* %322, align 32
  %324 = getelementptr inbounds [256 x i16], [256 x i16]* %4, i64 0, i64 112
  %325 = bitcast i16* %324 to <16 x i16>*
  %326 = load <16 x i16>, <16 x i16>* %325, align 32
  %327 = getelementptr inbounds [256 x i16], [256 x i16]* %4, i64 0, i64 176
  %328 = bitcast i16* %327 to <16 x i16>*
  %329 = load <16 x i16>, <16 x i16>* %328, align 32
  %330 = getelementptr inbounds [256 x i16], [256 x i16]* %4, i64 0, i64 240
  %331 = bitcast i16* %330 to <16 x i16>*
  %332 = load <16 x i16>, <16 x i16>* %331, align 32
  %333 = add <16 x i16> %326, %323
  %334 = sub <16 x i16> %323, %326
  %335 = add <16 x i16> %332, %329
  %336 = sub <16 x i16> %329, %332
  %337 = ashr <16 x i16> %333, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %338 = ashr <16 x i16> %334, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %339 = ashr <16 x i16> %335, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %340 = ashr <16 x i16> %336, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %341 = add nsw <16 x i16> %339, %337
  %342 = tail call <16 x i16> @llvm.x86.avx2.pmulh.w(<16 x i16> %341, <16 x i16> <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>) #6
  %343 = shufflevector <16 x i16> %341, <16 x i16> %342, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27>
  %344 = shufflevector <16 x i16> %341, <16 x i16> %342, <16 x i32> <i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %345 = bitcast i32* %320 to <16 x i16>*
  store <16 x i16> %343, <16 x i16>* %345, align 1
  %346 = getelementptr inbounds i32, i32* %2, i64 56
  %347 = bitcast i32* %346 to <16 x i16>*
  store <16 x i16> %344, <16 x i16>* %347, align 1
  %348 = add nsw <16 x i16> %340, %338
  %349 = getelementptr inbounds i32, i32* %2, i64 112
  %350 = tail call <16 x i16> @llvm.x86.avx2.pmulh.w(<16 x i16> %348, <16 x i16> <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>) #6
  %351 = shufflevector <16 x i16> %348, <16 x i16> %350, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27>
  %352 = shufflevector <16 x i16> %348, <16 x i16> %350, <16 x i32> <i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %353 = bitcast i32* %349 to <16 x i16>*
  store <16 x i16> %351, <16 x i16>* %353, align 1
  %354 = getelementptr inbounds i32, i32* %2, i64 120
  %355 = bitcast i32* %354 to <16 x i16>*
  store <16 x i16> %352, <16 x i16>* %355, align 1
  %356 = sub nsw <16 x i16> %337, %339
  %357 = getelementptr inbounds i32, i32* %2, i64 176
  %358 = tail call <16 x i16> @llvm.x86.avx2.pmulh.w(<16 x i16> %356, <16 x i16> <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>) #6
  %359 = shufflevector <16 x i16> %356, <16 x i16> %358, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27>
  %360 = shufflevector <16 x i16> %356, <16 x i16> %358, <16 x i32> <i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %361 = bitcast i32* %357 to <16 x i16>*
  store <16 x i16> %359, <16 x i16>* %361, align 1
  %362 = getelementptr inbounds i32, i32* %2, i64 184
  %363 = bitcast i32* %362 to <16 x i16>*
  store <16 x i16> %360, <16 x i16>* %363, align 1
  %364 = sub nsw <16 x i16> %338, %340
  %365 = getelementptr inbounds i32, i32* %2, i64 240
  %366 = tail call <16 x i16> @llvm.x86.avx2.pmulh.w(<16 x i16> %364, <16 x i16> <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>) #6
  %367 = shufflevector <16 x i16> %364, <16 x i16> %366, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27>
  %368 = shufflevector <16 x i16> %364, <16 x i16> %366, <16 x i32> <i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %369 = bitcast i32* %365 to <16 x i16>*
  store <16 x i16> %367, <16 x i16>* %369, align 1
  %370 = getelementptr inbounds i32, i32* %2, i64 248
  %371 = bitcast i32* %370 to <16 x i16>*
  store <16 x i16> %368, <16 x i16>* %371, align 1
  call void @llvm.lifetime.end.p0i8(i64 512, i8* nonnull %5) #6
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @vpx_hadamard_32x32_avx2(i16* nocapture readonly, i64, i32* nocapture) local_unnamed_addr #0 {
  %4 = alloca [256 x i16], align 32
  %5 = alloca [1024 x i16], align 32
  %6 = bitcast [1024 x i16]* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 2048, i8* nonnull %6) #6
  call void @llvm.memset.p0i8.i64(i8* nonnull align 32 %6, i8 -86, i64 2048, i1 false)
  %7 = bitcast [256 x i16]* %4 to i8*
  %8 = shl i64 %1, 3
  %9 = bitcast [256 x i16]* %4 to <16 x i16>*
  %10 = getelementptr inbounds [256 x i16], [256 x i16]* %4, i64 0, i64 64
  %11 = bitcast i16* %10 to <16 x i16>*
  %12 = getelementptr inbounds [256 x i16], [256 x i16]* %4, i64 0, i64 128
  %13 = bitcast i16* %12 to <16 x i16>*
  %14 = getelementptr inbounds [256 x i16], [256 x i16]* %4, i64 0, i64 192
  %15 = bitcast i16* %14 to <16 x i16>*
  %16 = getelementptr inbounds [256 x i16], [256 x i16]* %4, i64 0, i64 16
  %17 = bitcast i16* %16 to <16 x i16>*
  %18 = getelementptr inbounds [256 x i16], [256 x i16]* %4, i64 0, i64 80
  %19 = bitcast i16* %18 to <16 x i16>*
  %20 = getelementptr inbounds [256 x i16], [256 x i16]* %4, i64 0, i64 144
  %21 = bitcast i16* %20 to <16 x i16>*
  %22 = getelementptr inbounds [256 x i16], [256 x i16]* %4, i64 0, i64 208
  %23 = bitcast i16* %22 to <16 x i16>*
  %24 = getelementptr inbounds [256 x i16], [256 x i16]* %4, i64 0, i64 32
  %25 = bitcast i16* %24 to <16 x i16>*
  %26 = getelementptr inbounds [256 x i16], [256 x i16]* %4, i64 0, i64 96
  %27 = bitcast i16* %26 to <16 x i16>*
  %28 = getelementptr inbounds [256 x i16], [256 x i16]* %4, i64 0, i64 160
  %29 = bitcast i16* %28 to <16 x i16>*
  %30 = getelementptr inbounds [256 x i16], [256 x i16]* %4, i64 0, i64 224
  %31 = bitcast i16* %30 to <16 x i16>*
  %32 = getelementptr inbounds [256 x i16], [256 x i16]* %4, i64 0, i64 48
  %33 = bitcast i16* %32 to <16 x i16>*
  %34 = getelementptr inbounds [256 x i16], [256 x i16]* %4, i64 0, i64 112
  %35 = bitcast i16* %34 to <16 x i16>*
  %36 = getelementptr inbounds [256 x i16], [256 x i16]* %4, i64 0, i64 176
  %37 = bitcast i16* %36 to <16 x i16>*
  %38 = getelementptr inbounds [256 x i16], [256 x i16]* %4, i64 0, i64 240
  %39 = bitcast i16* %38 to <16 x i16>*
  br label %40

40:                                               ; preds = %208, %3
  %41 = phi i64 [ 0, %3 ], [ %305, %208 ]
  %42 = shl i64 %41, 3
  %43 = and i64 %42, 4294967280
  %44 = mul nsw i64 %43, %1
  %45 = getelementptr inbounds i16, i16* %0, i64 %44
  %46 = shl i64 %41, 4
  %47 = and i64 %46, 16
  %48 = getelementptr inbounds i16, i16* %45, i64 %47
  %49 = shl nsw i64 %41, 8
  call void @llvm.lifetime.start.p0i8(i64 512, i8* nonnull %7) #6
  call void @llvm.memset.p0i8.i64(i8* nonnull align 32 %7, i8 -86, i64 512, i1 false) #6
  br label %50

50:                                               ; preds = %50, %40
  %51 = phi i64 [ 0, %40 ], [ %206, %50 ]
  %52 = mul nuw nsw i64 %8, %51
  %53 = getelementptr inbounds i16, i16* %48, i64 %52
  %54 = shl nsw i64 %51, 7
  %55 = getelementptr inbounds [256 x i16], [256 x i16]* %4, i64 0, i64 %54
  %56 = bitcast i16* %53 to <16 x i16>*
  %57 = load <16 x i16>, <16 x i16>* %56, align 1
  %58 = getelementptr inbounds i16, i16* %53, i64 %1
  %59 = bitcast i16* %58 to <16 x i16>*
  %60 = load <16 x i16>, <16 x i16>* %59, align 1
  %61 = getelementptr inbounds i16, i16* %58, i64 %1
  %62 = bitcast i16* %61 to <16 x i16>*
  %63 = load <16 x i16>, <16 x i16>* %62, align 1
  %64 = getelementptr inbounds i16, i16* %61, i64 %1
  %65 = bitcast i16* %64 to <16 x i16>*
  %66 = load <16 x i16>, <16 x i16>* %65, align 1
  %67 = getelementptr inbounds i16, i16* %64, i64 %1
  %68 = bitcast i16* %67 to <16 x i16>*
  %69 = load <16 x i16>, <16 x i16>* %68, align 1
  %70 = getelementptr inbounds i16, i16* %67, i64 %1
  %71 = bitcast i16* %70 to <16 x i16>*
  %72 = load <16 x i16>, <16 x i16>* %71, align 1
  %73 = getelementptr inbounds i16, i16* %70, i64 %1
  %74 = bitcast i16* %73 to <16 x i16>*
  %75 = load <16 x i16>, <16 x i16>* %74, align 1
  %76 = getelementptr inbounds i16, i16* %73, i64 %1
  %77 = bitcast i16* %76 to <16 x i16>*
  %78 = load <16 x i16>, <16 x i16>* %77, align 1
  %79 = add <16 x i16> %60, %57
  %80 = sub <16 x i16> %57, %60
  %81 = add <16 x i16> %66, %63
  %82 = sub <16 x i16> %63, %66
  %83 = add <16 x i16> %72, %69
  %84 = sub <16 x i16> %69, %72
  %85 = add <16 x i16> %78, %75
  %86 = sub <16 x i16> %75, %78
  %87 = add <16 x i16> %81, %79
  %88 = add <16 x i16> %82, %80
  %89 = sub <16 x i16> %79, %81
  %90 = sub <16 x i16> %80, %82
  %91 = add <16 x i16> %85, %83
  %92 = add <16 x i16> %86, %84
  %93 = sub <16 x i16> %83, %85
  %94 = sub <16 x i16> %84, %86
  %95 = add <16 x i16> %91, %87
  %96 = add <16 x i16> %92, %88
  %97 = add <16 x i16> %93, %89
  %98 = add <16 x i16> %94, %90
  %99 = sub <16 x i16> %87, %91
  %100 = sub <16 x i16> %88, %92
  %101 = sub <16 x i16> %89, %93
  %102 = sub <16 x i16> %90, %94
  %103 = shufflevector <16 x i16> %95, <16 x i16> %101, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27>
  %104 = shufflevector <16 x i16> %99, <16 x i16> %97, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27>
  %105 = shufflevector <16 x i16> %95, <16 x i16> %101, <16 x i32> <i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %106 = shufflevector <16 x i16> %99, <16 x i16> %97, <16 x i32> <i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %107 = shufflevector <16 x i16> %98, <16 x i16> %102, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27>
  %108 = shufflevector <16 x i16> %100, <16 x i16> %96, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27>
  %109 = shufflevector <16 x i16> %98, <16 x i16> %102, <16 x i32> <i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %110 = shufflevector <16 x i16> %100, <16 x i16> %96, <16 x i32> <i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %111 = bitcast <16 x i16> %103 to <8 x i32>
  %112 = bitcast <16 x i16> %104 to <8 x i32>
  %113 = shufflevector <8 x i32> %111, <8 x i32> %112, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 4, i32 12, i32 5, i32 13>
  %114 = bitcast <8 x i32> %113 to <4 x i64>
  %115 = bitcast <16 x i16> %107 to <8 x i32>
  %116 = bitcast <16 x i16> %108 to <8 x i32>
  %117 = shufflevector <8 x i32> %115, <8 x i32> %116, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 4, i32 12, i32 5, i32 13>
  %118 = bitcast <8 x i32> %117 to <4 x i64>
  %119 = shufflevector <8 x i32> %111, <8 x i32> %112, <8 x i32> <i32 2, i32 10, i32 3, i32 11, i32 6, i32 14, i32 7, i32 15>
  %120 = bitcast <8 x i32> %119 to <4 x i64>
  %121 = shufflevector <8 x i32> %115, <8 x i32> %116, <8 x i32> <i32 2, i32 10, i32 3, i32 11, i32 6, i32 14, i32 7, i32 15>
  %122 = bitcast <8 x i32> %121 to <4 x i64>
  %123 = bitcast <16 x i16> %105 to <8 x i32>
  %124 = bitcast <16 x i16> %106 to <8 x i32>
  %125 = shufflevector <8 x i32> %123, <8 x i32> %124, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 4, i32 12, i32 5, i32 13>
  %126 = bitcast <8 x i32> %125 to <4 x i64>
  %127 = bitcast <16 x i16> %109 to <8 x i32>
  %128 = bitcast <16 x i16> %110 to <8 x i32>
  %129 = shufflevector <8 x i32> %127, <8 x i32> %128, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 4, i32 12, i32 5, i32 13>
  %130 = bitcast <8 x i32> %129 to <4 x i64>
  %131 = shufflevector <8 x i32> %123, <8 x i32> %124, <8 x i32> <i32 2, i32 10, i32 3, i32 11, i32 6, i32 14, i32 7, i32 15>
  %132 = bitcast <8 x i32> %131 to <4 x i64>
  %133 = shufflevector <8 x i32> %127, <8 x i32> %128, <8 x i32> <i32 2, i32 10, i32 3, i32 11, i32 6, i32 14, i32 7, i32 15>
  %134 = bitcast <8 x i32> %133 to <4 x i64>
  %135 = shufflevector <4 x i64> %114, <4 x i64> %118, <4 x i32> <i32 0, i32 4, i32 2, i32 6>
  %136 = shufflevector <4 x i64> %114, <4 x i64> %118, <4 x i32> <i32 1, i32 5, i32 3, i32 7>
  %137 = shufflevector <4 x i64> %120, <4 x i64> %122, <4 x i32> <i32 0, i32 4, i32 2, i32 6>
  %138 = shufflevector <4 x i64> %120, <4 x i64> %122, <4 x i32> <i32 1, i32 5, i32 3, i32 7>
  %139 = shufflevector <4 x i64> %126, <4 x i64> %130, <4 x i32> <i32 0, i32 4, i32 2, i32 6>
  %140 = shufflevector <4 x i64> %126, <4 x i64> %130, <4 x i32> <i32 1, i32 5, i32 3, i32 7>
  %141 = shufflevector <4 x i64> %132, <4 x i64> %134, <4 x i32> <i32 0, i32 4, i32 2, i32 6>
  %142 = shufflevector <4 x i64> %132, <4 x i64> %134, <4 x i32> <i32 1, i32 5, i32 3, i32 7>
  %143 = bitcast <4 x i64> %135 to <16 x i16>
  %144 = bitcast <4 x i64> %136 to <16 x i16>
  %145 = bitcast <4 x i64> %137 to <16 x i16>
  %146 = bitcast <4 x i64> %138 to <16 x i16>
  %147 = bitcast <4 x i64> %139 to <16 x i16>
  %148 = bitcast <4 x i64> %140 to <16 x i16>
  %149 = bitcast <4 x i64> %141 to <16 x i16>
  %150 = bitcast <4 x i64> %142 to <16 x i16>
  %151 = add <16 x i16> %144, %143
  %152 = sub <16 x i16> %143, %144
  %153 = add <16 x i16> %146, %145
  %154 = sub <16 x i16> %145, %146
  %155 = add <16 x i16> %148, %147
  %156 = sub <16 x i16> %147, %148
  %157 = add <16 x i16> %150, %149
  %158 = sub <16 x i16> %149, %150
  %159 = add <16 x i16> %153, %151
  %160 = add <16 x i16> %154, %152
  %161 = sub <16 x i16> %151, %153
  %162 = sub <16 x i16> %152, %154
  %163 = add <16 x i16> %157, %155
  %164 = add <16 x i16> %158, %156
  %165 = sub <16 x i16> %155, %157
  %166 = sub <16 x i16> %156, %158
  %167 = add <16 x i16> %163, %159
  %168 = bitcast <16 x i16> %167 to <4 x i64>
  %169 = add <16 x i16> %164, %160
  %170 = bitcast <16 x i16> %169 to <4 x i64>
  %171 = add <16 x i16> %165, %161
  %172 = bitcast <16 x i16> %171 to <4 x i64>
  %173 = add <16 x i16> %166, %162
  %174 = bitcast <16 x i16> %173 to <4 x i64>
  %175 = sub <16 x i16> %159, %163
  %176 = bitcast <16 x i16> %175 to <4 x i64>
  %177 = sub <16 x i16> %160, %164
  %178 = bitcast <16 x i16> %177 to <4 x i64>
  %179 = sub <16 x i16> %161, %165
  %180 = bitcast <16 x i16> %179 to <4 x i64>
  %181 = sub <16 x i16> %162, %166
  %182 = bitcast <16 x i16> %181 to <4 x i64>
  %183 = bitcast i16* %55 to <4 x i64>*
  %184 = shufflevector <4 x i64> %168, <4 x i64> %180, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  store <4 x i64> %184, <4 x i64>* %183, align 32
  %185 = getelementptr inbounds i16, i16* %55, i64 16
  %186 = bitcast i16* %185 to <4 x i64>*
  %187 = shufflevector <4 x i64> %176, <4 x i64> %172, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  store <4 x i64> %187, <4 x i64>* %186, align 32
  %188 = getelementptr inbounds i16, i16* %55, i64 32
  %189 = bitcast i16* %188 to <4 x i64>*
  %190 = shufflevector <4 x i64> %174, <4 x i64> %182, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  store <4 x i64> %190, <4 x i64>* %189, align 32
  %191 = getelementptr inbounds i16, i16* %55, i64 48
  %192 = bitcast i16* %191 to <4 x i64>*
  %193 = shufflevector <4 x i64> %178, <4 x i64> %170, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  store <4 x i64> %193, <4 x i64>* %192, align 32
  %194 = getelementptr inbounds i16, i16* %55, i64 64
  %195 = bitcast i16* %194 to <4 x i64>*
  %196 = shufflevector <4 x i64> %168, <4 x i64> %180, <4 x i32> <i32 2, i32 3, i32 6, i32 7>
  store <4 x i64> %196, <4 x i64>* %195, align 32
  %197 = getelementptr inbounds i16, i16* %55, i64 80
  %198 = bitcast i16* %197 to <4 x i64>*
  %199 = shufflevector <4 x i64> %176, <4 x i64> %172, <4 x i32> <i32 2, i32 3, i32 6, i32 7>
  store <4 x i64> %199, <4 x i64>* %198, align 32
  %200 = getelementptr inbounds i16, i16* %55, i64 96
  %201 = bitcast i16* %200 to <4 x i64>*
  %202 = shufflevector <4 x i64> %174, <4 x i64> %182, <4 x i32> <i32 2, i32 3, i32 6, i32 7>
  store <4 x i64> %202, <4 x i64>* %201, align 32
  %203 = getelementptr inbounds i16, i16* %55, i64 112
  %204 = bitcast i16* %203 to <4 x i64>*
  %205 = shufflevector <4 x i64> %178, <4 x i64> %170, <4 x i32> <i32 2, i32 3, i32 6, i32 7>
  store <4 x i64> %205, <4 x i64>* %204, align 32
  %206 = add nuw nsw i64 %51, 1
  %207 = icmp eq i64 %206, 2
  br i1 %207, label %208, label %50

208:                                              ; preds = %50
  %209 = getelementptr inbounds [1024 x i16], [1024 x i16]* %5, i64 0, i64 %49
  %210 = load <16 x i16>, <16 x i16>* %9, align 32
  %211 = load <16 x i16>, <16 x i16>* %11, align 32
  %212 = load <16 x i16>, <16 x i16>* %13, align 32
  %213 = load <16 x i16>, <16 x i16>* %15, align 32
  %214 = add <16 x i16> %211, %210
  %215 = sub <16 x i16> %210, %211
  %216 = add <16 x i16> %213, %212
  %217 = sub <16 x i16> %212, %213
  %218 = ashr <16 x i16> %214, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %219 = ashr <16 x i16> %215, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %220 = ashr <16 x i16> %216, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %221 = ashr <16 x i16> %217, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %222 = add nsw <16 x i16> %220, %218
  %223 = bitcast i16* %209 to <16 x i16>*
  store <16 x i16> %222, <16 x i16>* %223, align 32
  %224 = getelementptr inbounds i16, i16* %209, i64 64
  %225 = add nsw <16 x i16> %221, %219
  %226 = bitcast i16* %224 to <16 x i16>*
  store <16 x i16> %225, <16 x i16>* %226, align 32
  %227 = getelementptr inbounds i16, i16* %209, i64 128
  %228 = sub nsw <16 x i16> %218, %220
  %229 = bitcast i16* %227 to <16 x i16>*
  store <16 x i16> %228, <16 x i16>* %229, align 32
  %230 = getelementptr inbounds i16, i16* %209, i64 192
  %231 = sub nsw <16 x i16> %219, %221
  %232 = bitcast i16* %230 to <16 x i16>*
  store <16 x i16> %231, <16 x i16>* %232, align 32
  %233 = getelementptr inbounds i16, i16* %209, i64 16
  %234 = load <16 x i16>, <16 x i16>* %17, align 32
  %235 = load <16 x i16>, <16 x i16>* %19, align 32
  %236 = load <16 x i16>, <16 x i16>* %21, align 32
  %237 = load <16 x i16>, <16 x i16>* %23, align 32
  %238 = add <16 x i16> %235, %234
  %239 = sub <16 x i16> %234, %235
  %240 = add <16 x i16> %237, %236
  %241 = sub <16 x i16> %236, %237
  %242 = ashr <16 x i16> %238, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %243 = ashr <16 x i16> %239, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %244 = ashr <16 x i16> %240, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %245 = ashr <16 x i16> %241, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %246 = add nsw <16 x i16> %244, %242
  %247 = bitcast i16* %233 to <16 x i16>*
  store <16 x i16> %246, <16 x i16>* %247, align 32
  %248 = getelementptr inbounds i16, i16* %209, i64 80
  %249 = add nsw <16 x i16> %245, %243
  %250 = bitcast i16* %248 to <16 x i16>*
  store <16 x i16> %249, <16 x i16>* %250, align 32
  %251 = getelementptr inbounds i16, i16* %209, i64 144
  %252 = sub nsw <16 x i16> %242, %244
  %253 = bitcast i16* %251 to <16 x i16>*
  store <16 x i16> %252, <16 x i16>* %253, align 32
  %254 = getelementptr inbounds i16, i16* %209, i64 208
  %255 = sub nsw <16 x i16> %243, %245
  %256 = bitcast i16* %254 to <16 x i16>*
  store <16 x i16> %255, <16 x i16>* %256, align 32
  %257 = getelementptr inbounds i16, i16* %209, i64 32
  %258 = load <16 x i16>, <16 x i16>* %25, align 32
  %259 = load <16 x i16>, <16 x i16>* %27, align 32
  %260 = load <16 x i16>, <16 x i16>* %29, align 32
  %261 = load <16 x i16>, <16 x i16>* %31, align 32
  %262 = add <16 x i16> %259, %258
  %263 = sub <16 x i16> %258, %259
  %264 = add <16 x i16> %261, %260
  %265 = sub <16 x i16> %260, %261
  %266 = ashr <16 x i16> %262, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %267 = ashr <16 x i16> %263, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %268 = ashr <16 x i16> %264, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %269 = ashr <16 x i16> %265, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %270 = add nsw <16 x i16> %268, %266
  %271 = bitcast i16* %257 to <16 x i16>*
  store <16 x i16> %270, <16 x i16>* %271, align 32
  %272 = getelementptr inbounds i16, i16* %209, i64 96
  %273 = add nsw <16 x i16> %269, %267
  %274 = bitcast i16* %272 to <16 x i16>*
  store <16 x i16> %273, <16 x i16>* %274, align 32
  %275 = getelementptr inbounds i16, i16* %209, i64 160
  %276 = sub nsw <16 x i16> %266, %268
  %277 = bitcast i16* %275 to <16 x i16>*
  store <16 x i16> %276, <16 x i16>* %277, align 32
  %278 = getelementptr inbounds i16, i16* %209, i64 224
  %279 = sub nsw <16 x i16> %267, %269
  %280 = bitcast i16* %278 to <16 x i16>*
  store <16 x i16> %279, <16 x i16>* %280, align 32
  %281 = getelementptr inbounds i16, i16* %209, i64 48
  %282 = load <16 x i16>, <16 x i16>* %33, align 32
  %283 = load <16 x i16>, <16 x i16>* %35, align 32
  %284 = load <16 x i16>, <16 x i16>* %37, align 32
  %285 = load <16 x i16>, <16 x i16>* %39, align 32
  %286 = add <16 x i16> %283, %282
  %287 = sub <16 x i16> %282, %283
  %288 = add <16 x i16> %285, %284
  %289 = sub <16 x i16> %284, %285
  %290 = ashr <16 x i16> %286, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %291 = ashr <16 x i16> %287, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %292 = ashr <16 x i16> %288, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %293 = ashr <16 x i16> %289, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %294 = add nsw <16 x i16> %292, %290
  %295 = bitcast i16* %281 to <16 x i16>*
  store <16 x i16> %294, <16 x i16>* %295, align 32
  %296 = getelementptr inbounds i16, i16* %209, i64 112
  %297 = add nsw <16 x i16> %293, %291
  %298 = bitcast i16* %296 to <16 x i16>*
  store <16 x i16> %297, <16 x i16>* %298, align 32
  %299 = getelementptr inbounds i16, i16* %209, i64 176
  %300 = sub nsw <16 x i16> %290, %292
  %301 = bitcast i16* %299 to <16 x i16>*
  store <16 x i16> %300, <16 x i16>* %301, align 32
  %302 = getelementptr inbounds i16, i16* %209, i64 240
  %303 = sub nsw <16 x i16> %291, %293
  %304 = bitcast i16* %302 to <16 x i16>*
  store <16 x i16> %303, <16 x i16>* %304, align 32
  call void @llvm.lifetime.end.p0i8(i64 512, i8* nonnull %7) #6
  %305 = add nuw nsw i64 %41, 1
  %306 = icmp eq i64 %305, 4
  br i1 %306, label %307, label %40

307:                                              ; preds = %208
  %308 = getelementptr inbounds [1024 x i16], [1024 x i16]* %5, i64 0, i64 0
  br label %309

309:                                              ; preds = %307, %309
  %310 = phi i32* [ %363, %309 ], [ %2, %307 ]
  %311 = phi i16* [ %364, %309 ], [ %308, %307 ]
  %312 = phi i32 [ %365, %309 ], [ 0, %307 ]
  %313 = bitcast i16* %311 to <16 x i16>*
  %314 = load <16 x i16>, <16 x i16>* %313, align 1
  %315 = getelementptr inbounds i16, i16* %311, i64 256
  %316 = bitcast i16* %315 to <16 x i16>*
  %317 = load <16 x i16>, <16 x i16>* %316, align 1
  %318 = getelementptr inbounds i16, i16* %311, i64 512
  %319 = bitcast i16* %318 to <16 x i16>*
  %320 = load <16 x i16>, <16 x i16>* %319, align 1
  %321 = getelementptr inbounds i16, i16* %311, i64 768
  %322 = bitcast i16* %321 to <16 x i16>*
  %323 = load <16 x i16>, <16 x i16>* %322, align 1
  %324 = add <16 x i16> %317, %314
  %325 = sub <16 x i16> %314, %317
  %326 = add <16 x i16> %323, %320
  %327 = sub <16 x i16> %320, %323
  %328 = ashr <16 x i16> %324, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %329 = ashr <16 x i16> %325, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %330 = ashr <16 x i16> %326, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %331 = ashr <16 x i16> %327, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %332 = add nsw <16 x i16> %330, %328
  %333 = tail call <16 x i16> @llvm.x86.avx2.pmulh.w(<16 x i16> %332, <16 x i16> <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>) #6
  %334 = shufflevector <16 x i16> %332, <16 x i16> %333, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27>
  %335 = shufflevector <16 x i16> %332, <16 x i16> %333, <16 x i32> <i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %336 = bitcast i32* %310 to <16 x i16>*
  store <16 x i16> %334, <16 x i16>* %336, align 1
  %337 = getelementptr inbounds i32, i32* %310, i64 8
  %338 = bitcast i32* %337 to <16 x i16>*
  store <16 x i16> %335, <16 x i16>* %338, align 1
  %339 = add nsw <16 x i16> %331, %329
  %340 = getelementptr inbounds i32, i32* %310, i64 256
  %341 = tail call <16 x i16> @llvm.x86.avx2.pmulh.w(<16 x i16> %339, <16 x i16> <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>) #6
  %342 = shufflevector <16 x i16> %339, <16 x i16> %341, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27>
  %343 = shufflevector <16 x i16> %339, <16 x i16> %341, <16 x i32> <i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %344 = bitcast i32* %340 to <16 x i16>*
  store <16 x i16> %342, <16 x i16>* %344, align 1
  %345 = getelementptr inbounds i32, i32* %310, i64 264
  %346 = bitcast i32* %345 to <16 x i16>*
  store <16 x i16> %343, <16 x i16>* %346, align 1
  %347 = sub nsw <16 x i16> %328, %330
  %348 = getelementptr inbounds i32, i32* %310, i64 512
  %349 = tail call <16 x i16> @llvm.x86.avx2.pmulh.w(<16 x i16> %347, <16 x i16> <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>) #6
  %350 = shufflevector <16 x i16> %347, <16 x i16> %349, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27>
  %351 = shufflevector <16 x i16> %347, <16 x i16> %349, <16 x i32> <i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %352 = bitcast i32* %348 to <16 x i16>*
  store <16 x i16> %350, <16 x i16>* %352, align 1
  %353 = getelementptr inbounds i32, i32* %310, i64 520
  %354 = bitcast i32* %353 to <16 x i16>*
  store <16 x i16> %351, <16 x i16>* %354, align 1
  %355 = sub nsw <16 x i16> %329, %331
  %356 = getelementptr inbounds i32, i32* %310, i64 768
  %357 = tail call <16 x i16> @llvm.x86.avx2.pmulh.w(<16 x i16> %355, <16 x i16> <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>) #6
  %358 = shufflevector <16 x i16> %355, <16 x i16> %357, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27>
  %359 = shufflevector <16 x i16> %355, <16 x i16> %357, <16 x i32> <i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %360 = bitcast i32* %356 to <16 x i16>*
  store <16 x i16> %358, <16 x i16>* %360, align 1
  %361 = getelementptr inbounds i32, i32* %310, i64 776
  %362 = bitcast i32* %361 to <16 x i16>*
  store <16 x i16> %359, <16 x i16>* %362, align 1
  %363 = getelementptr inbounds i32, i32* %310, i64 16
  %364 = getelementptr inbounds i16, i16* %311, i64 16
  %365 = add nuw nsw i32 %312, 16
  %366 = icmp ult i32 %365, 256
  br i1 %366, label %309, label %367

367:                                              ; preds = %309
  call void @llvm.lifetime.end.p0i8(i64 2048, i8* nonnull %6) #6
  ret void
}

; Function Attrs: nounwind readonly ssp uwtable
define hidden i32 @vpx_satd_avx2(i32* nocapture readonly, i32) local_unnamed_addr #3 {
  %3 = icmp sgt i32 %1, 0
  br i1 %3, label %4, label %62

4:                                                ; preds = %2
  %5 = add i32 %1, -1
  %6 = lshr i32 %5, 4
  %7 = add nuw nsw i32 %6, 1
  %8 = and i32 %7, 1
  %9 = icmp eq i32 %6, 0
  br i1 %9, label %42, label %10

10:                                               ; preds = %4
  %11 = sub nuw nsw i32 %7, %8
  br label %12

12:                                               ; preds = %12, %10
  %13 = phi i32* [ %0, %10 ], [ %39, %12 ]
  %14 = phi <8 x i32> [ zeroinitializer, %10 ], [ %38, %12 ]
  %15 = phi i32 [ %11, %10 ], [ %40, %12 ]
  %16 = bitcast i32* %13 to <8 x i32>*
  %17 = load <8 x i32>, <8 x i32>* %16, align 1
  %18 = getelementptr inbounds i32, i32* %13, i64 8
  %19 = bitcast i32* %18 to <8 x i32>*
  %20 = load <8 x i32>, <8 x i32>* %19, align 1
  %21 = tail call <16 x i16> @llvm.x86.avx2.packssdw(<8 x i32> %17, <8 x i32> %20) #6
  %22 = sub <16 x i16> zeroinitializer, %21
  %23 = icmp slt <16 x i16> %21, zeroinitializer
  %24 = select <16 x i1> %23, <16 x i16> %22, <16 x i16> %21
  %25 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %24, <16 x i16> <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>) #6
  %26 = add <8 x i32> %25, %14
  %27 = getelementptr inbounds i32, i32* %13, i64 16
  %28 = bitcast i32* %27 to <8 x i32>*
  %29 = load <8 x i32>, <8 x i32>* %28, align 1
  %30 = getelementptr inbounds i32, i32* %13, i64 24
  %31 = bitcast i32* %30 to <8 x i32>*
  %32 = load <8 x i32>, <8 x i32>* %31, align 1
  %33 = tail call <16 x i16> @llvm.x86.avx2.packssdw(<8 x i32> %29, <8 x i32> %32) #6
  %34 = sub <16 x i16> zeroinitializer, %33
  %35 = icmp slt <16 x i16> %33, zeroinitializer
  %36 = select <16 x i1> %35, <16 x i16> %34, <16 x i16> %33
  %37 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %36, <16 x i16> <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>) #6
  %38 = add <8 x i32> %37, %26
  %39 = getelementptr inbounds i32, i32* %13, i64 32
  %40 = add i32 %15, -2
  %41 = icmp eq i32 %40, 0
  br i1 %41, label %42, label %12

42:                                               ; preds = %12, %4
  %43 = phi <8 x i32> [ undef, %4 ], [ %38, %12 ]
  %44 = phi i32* [ %0, %4 ], [ %39, %12 ]
  %45 = phi <8 x i32> [ zeroinitializer, %4 ], [ %38, %12 ]
  %46 = icmp eq i32 %8, 0
  br i1 %46, label %59, label %47

47:                                               ; preds = %42
  %48 = bitcast i32* %44 to <8 x i32>*
  %49 = load <8 x i32>, <8 x i32>* %48, align 1
  %50 = getelementptr inbounds i32, i32* %44, i64 8
  %51 = bitcast i32* %50 to <8 x i32>*
  %52 = load <8 x i32>, <8 x i32>* %51, align 1
  %53 = tail call <16 x i16> @llvm.x86.avx2.packssdw(<8 x i32> %49, <8 x i32> %52) #6
  %54 = icmp slt <16 x i16> %53, zeroinitializer
  %55 = sub <16 x i16> zeroinitializer, %53
  %56 = select <16 x i1> %54, <16 x i16> %55, <16 x i16> %53
  %57 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %56, <16 x i16> <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>) #6
  %58 = add <8 x i32> %57, %45
  br label %59

59:                                               ; preds = %42, %47
  %60 = phi <8 x i32> [ %43, %42 ], [ %58, %47 ]
  %61 = bitcast <8 x i32> %60 to <32 x i8>
  br label %62

62:                                               ; preds = %59, %2
  %63 = phi <8 x i32> [ %60, %59 ], [ zeroinitializer, %2 ]
  %64 = phi <32 x i8> [ %61, %59 ], [ zeroinitializer, %2 ]
  %65 = shufflevector <32 x i8> %64, <32 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <32 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55>
  %66 = bitcast <32 x i8> %65 to <8 x i32>
  %67 = add <8 x i32> %63, %66
  %68 = bitcast <8 x i32> %67 to <4 x i64>
  %69 = lshr <4 x i64> %68, <i64 32, i64 32, i64 32, i64 32>
  %70 = bitcast <4 x i64> %69 to <8 x i32>
  %71 = add <8 x i32> %67, %70
  %72 = bitcast <8 x i32> %71 to <4 x i64>
  %73 = shufflevector <4 x i64> %72, <4 x i64> undef, <2 x i32> <i32 0, i32 undef>
  %74 = shufflevector <8 x i32> %71, <8 x i32> undef, <4 x i32> <i32 4, i32 undef, i32 undef, i32 undef>
  %75 = bitcast <2 x i64> %73 to <4 x i32>
  %76 = add <4 x i32> %74, %75
  %77 = extractelement <4 x i32> %76, i32 0
  ret i32 %77
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden i32 @vpx_highbd_satd_avx2(i32* nocapture readonly, i32) local_unnamed_addr #4 {
  %3 = icmp sgt i32 %1, 0
  br i1 %3, label %4, label %67

4:                                                ; preds = %2
  %5 = add i32 %1, -1
  %6 = lshr i32 %5, 3
  %7 = add nuw nsw i32 %6, 1
  %8 = and i32 %7, 3
  %9 = icmp ult i32 %5, 24
  br i1 %9, label %46, label %10

10:                                               ; preds = %4
  %11 = sub nsw i32 %7, %8
  br label %12

12:                                               ; preds = %12, %10
  %13 = phi i32* [ %0, %10 ], [ %43, %12 ]
  %14 = phi <8 x i32> [ zeroinitializer, %10 ], [ %42, %12 ]
  %15 = phi i32 [ %11, %10 ], [ %44, %12 ]
  %16 = bitcast i32* %13 to <8 x i32>*
  %17 = load <8 x i32>, <8 x i32>* %16, align 1
  %18 = sub <8 x i32> zeroinitializer, %17
  %19 = icmp slt <8 x i32> %17, zeroinitializer
  %20 = select <8 x i1> %19, <8 x i32> %18, <8 x i32> %17
  %21 = add <8 x i32> %20, %14
  %22 = getelementptr inbounds i32, i32* %13, i64 8
  %23 = bitcast i32* %22 to <8 x i32>*
  %24 = load <8 x i32>, <8 x i32>* %23, align 1
  %25 = sub <8 x i32> zeroinitializer, %24
  %26 = icmp slt <8 x i32> %24, zeroinitializer
  %27 = select <8 x i1> %26, <8 x i32> %25, <8 x i32> %24
  %28 = add <8 x i32> %27, %21
  %29 = getelementptr inbounds i32, i32* %13, i64 16
  %30 = bitcast i32* %29 to <8 x i32>*
  %31 = load <8 x i32>, <8 x i32>* %30, align 1
  %32 = sub <8 x i32> zeroinitializer, %31
  %33 = icmp slt <8 x i32> %31, zeroinitializer
  %34 = select <8 x i1> %33, <8 x i32> %32, <8 x i32> %31
  %35 = add <8 x i32> %34, %28
  %36 = getelementptr inbounds i32, i32* %13, i64 24
  %37 = bitcast i32* %36 to <8 x i32>*
  %38 = load <8 x i32>, <8 x i32>* %37, align 1
  %39 = sub <8 x i32> zeroinitializer, %38
  %40 = icmp slt <8 x i32> %38, zeroinitializer
  %41 = select <8 x i1> %40, <8 x i32> %39, <8 x i32> %38
  %42 = add <8 x i32> %41, %35
  %43 = getelementptr inbounds i32, i32* %13, i64 32
  %44 = add i32 %15, -4
  %45 = icmp eq i32 %44, 0
  br i1 %45, label %46, label %12

46:                                               ; preds = %12, %4
  %47 = phi <8 x i32> [ undef, %4 ], [ %42, %12 ]
  %48 = phi i32* [ %0, %4 ], [ %43, %12 ]
  %49 = phi <8 x i32> [ zeroinitializer, %4 ], [ %42, %12 ]
  %50 = icmp eq i32 %8, 0
  br i1 %50, label %64, label %51

51:                                               ; preds = %46, %51
  %52 = phi i32* [ %61, %51 ], [ %48, %46 ]
  %53 = phi <8 x i32> [ %60, %51 ], [ %49, %46 ]
  %54 = phi i32 [ %62, %51 ], [ %8, %46 ]
  %55 = bitcast i32* %52 to <8 x i32>*
  %56 = load <8 x i32>, <8 x i32>* %55, align 1
  %57 = sub <8 x i32> zeroinitializer, %56
  %58 = icmp slt <8 x i32> %56, zeroinitializer
  %59 = select <8 x i1> %58, <8 x i32> %57, <8 x i32> %56
  %60 = add <8 x i32> %59, %53
  %61 = getelementptr inbounds i32, i32* %52, i64 8
  %62 = add i32 %54, -1
  %63 = icmp eq i32 %62, 0
  br i1 %63, label %64, label %51, !llvm.loop !2

64:                                               ; preds = %51, %46
  %65 = phi <8 x i32> [ %47, %46 ], [ %60, %51 ]
  %66 = bitcast <8 x i32> %65 to <32 x i8>
  br label %67

67:                                               ; preds = %64, %2
  %68 = phi <8 x i32> [ %65, %64 ], [ zeroinitializer, %2 ]
  %69 = phi <32 x i8> [ %66, %64 ], [ zeroinitializer, %2 ]
  %70 = shufflevector <32 x i8> %69, <32 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <32 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55>
  %71 = bitcast <32 x i8> %70 to <8 x i32>
  %72 = add <8 x i32> %68, %71
  %73 = bitcast <8 x i32> %72 to <4 x i64>
  %74 = lshr <4 x i64> %73, <i64 32, i64 32, i64 32, i64 32>
  %75 = bitcast <4 x i64> %74 to <8 x i32>
  %76 = add <8 x i32> %72, %75
  %77 = bitcast <8 x i32> %76 to <4 x i64>
  %78 = shufflevector <4 x i64> %77, <4 x i64> undef, <2 x i32> <i32 0, i32 undef>
  %79 = shufflevector <8 x i32> %76, <8 x i32> undef, <4 x i32> <i32 4, i32 undef, i32 undef, i32 undef>
  %80 = bitcast <2 x i64> %78 to <4 x i32>
  %81 = add <4 x i32> %79, %80
  %82 = extractelement <4 x i32> %81, i32 0
  ret i32 %82
}

; Function Attrs: nounwind readnone
declare <16 x i16> @llvm.x86.avx2.pmulh.w(<16 x i16>, <16 x i16>) #5

; Function Attrs: nounwind readnone
declare <16 x i16> @llvm.x86.avx2.packssdw(<8 x i32>, <8 x i32>) #5

; Function Attrs: nounwind readnone
declare <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16>, <16 x i16>) #5

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="256" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+avx,+avx2,+cx8,+fxsr,+mmx,+popcnt,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+ssse3,+x87,+xsave" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { nofree nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="256" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+avx,+avx2,+cx8,+fxsr,+mmx,+popcnt,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+ssse3,+x87,+xsave" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind readonly ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="256" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+avx,+avx2,+cx8,+fxsr,+mmx,+popcnt,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+ssse3,+x87,+xsave" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { norecurse nounwind readonly ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="256" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+avx,+avx2,+cx8,+fxsr,+mmx,+popcnt,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+ssse3,+x87,+xsave" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind readnone }
attributes #6 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = distinct !{!2, !3}
!3 = !{!"llvm.loop.unroll.disable"}
