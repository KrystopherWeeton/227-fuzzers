; ModuleID = '../../third_party/webrtc/modules/audio_coding/codecs/g711/g711_interface.c'
source_filename = "../../third_party/webrtc/modules/audio_coding/codecs/g711/g711_interface.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@.str = private unnamed_addr constant [6 x i8] c"2.0.0\00", align 1

; Function Attrs: nounwind ssp uwtable
define hidden i64 @WebRtcG711_EncodeA(i16* nocapture readonly, i64 returned, i8* nocapture) local_unnamed_addr #0 {
  %4 = icmp eq i64 %1, 0
  br i1 %4, label %38, label %5

5:                                                ; preds = %3, %32
  %6 = phi i64 [ %36, %32 ], [ 0, %3 ]
  %7 = getelementptr inbounds i16, i16* %0, i64 %6
  %8 = load i16, i16* %7, align 2
  %9 = sext i16 %8 to i32
  %10 = icmp sgt i16 %8, -1
  %11 = xor i1 %10, true
  %12 = sext i1 %11 to i32
  %13 = xor i32 %12, %9
  %14 = select i1 %10, i32 213, i32 85
  %15 = or i32 %13, 255
  %16 = tail call i32 asm sideeffect " movq $$-1,%rdx;\0A bsrq %rax,%rdx;\0A", "={dx},{ax},~{dirflag},~{fpsr},~{flags}"(i32 %15) #5, !srcloc !2
  %17 = add nsw i32 %16, -7
  %18 = icmp sgt i32 %17, 7
  br i1 %18, label %19, label %23

19:                                               ; preds = %5
  %20 = icmp sgt i32 %13, -1
  %21 = xor i32 %14, 127
  %22 = select i1 %20, i32 %21, i32 %14
  br label %32

23:                                               ; preds = %5
  %24 = shl i32 %17, 4
  %25 = icmp eq i32 %17, 0
  %26 = add nsw i32 %16, -4
  %27 = select i1 %25, i32 4, i32 %26
  %28 = ashr i32 %13, %27
  %29 = and i32 %28, 15
  %30 = or i32 %29, %24
  %31 = xor i32 %30, %14
  br label %32

32:                                               ; preds = %19, %23
  %33 = phi i32 [ %31, %23 ], [ %22, %19 ]
  %34 = trunc i32 %33 to i8
  %35 = getelementptr inbounds i8, i8* %2, i64 %6
  store i8 %34, i8* %35, align 1
  %36 = add nuw i64 %6, 1
  %37 = icmp eq i64 %36, %1
  br i1 %37, label %38, label %5

38:                                               ; preds = %32, %3
  ret i64 %1
}

; Function Attrs: nounwind ssp uwtable
define hidden i64 @WebRtcG711_EncodeU(i16* nocapture readonly, i64 returned, i8* nocapture) local_unnamed_addr #0 {
  %4 = icmp eq i64 %1, 0
  br i1 %4, label %34, label %5

5:                                                ; preds = %3, %28
  %6 = phi i64 [ %32, %28 ], [ 0, %3 ]
  %7 = getelementptr inbounds i16, i16* %0, i64 %6
  %8 = load i16, i16* %7, align 2
  %9 = sext i16 %8 to i32
  %10 = icmp slt i16 %8, 0
  %11 = sub nsw i32 131, %9
  %12 = add nsw i32 %9, 132
  %13 = select i1 %10, i32 %11, i32 %12
  %14 = select i1 %10, i32 127, i32 255
  %15 = or i32 %13, 255
  %16 = tail call i32 asm sideeffect " movq $$-1,%rdx;\0A bsrq %rax,%rdx;\0A", "={dx},{ax},~{dirflag},~{fpsr},~{flags}"(i32 %15) #5, !srcloc !2
  %17 = add nsw i32 %16, -7
  %18 = icmp sgt i32 %17, 7
  br i1 %18, label %19, label %21

19:                                               ; preds = %5
  %20 = and i32 %14, 128
  br label %28

21:                                               ; preds = %5
  %22 = shl i32 %17, 4
  %23 = add nsw i32 %16, -4
  %24 = ashr i32 %13, %23
  %25 = and i32 %24, 15
  %26 = or i32 %25, %22
  %27 = xor i32 %26, %14
  br label %28

28:                                               ; preds = %19, %21
  %29 = phi i32 [ %20, %19 ], [ %27, %21 ]
  %30 = trunc i32 %29 to i8
  %31 = getelementptr inbounds i8, i8* %2, i64 %6
  store i8 %30, i8* %31, align 1
  %32 = add nuw i64 %6, 1
  %33 = icmp eq i64 %32, %1
  br i1 %33, label %34, label %5

34:                                               ; preds = %28, %3
  ret i64 %1
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden i64 @WebRtcG711_DecodeA(i8* nocapture readonly, i64 returned, i16* nocapture, i16* nocapture) local_unnamed_addr #1 {
  %5 = bitcast i16* %2 to i8*
  %6 = icmp eq i64 %1, 0
  br i1 %6, label %73, label %7

7:                                                ; preds = %4
  %8 = icmp ult i64 %1, 8
  br i1 %8, label %45, label %9

9:                                                ; preds = %7
  %10 = getelementptr i16, i16* %2, i64 %1
  %11 = bitcast i16* %10 to i8*
  %12 = getelementptr i8, i8* %0, i64 %1
  %13 = icmp ugt i8* %12, %5
  %14 = icmp ugt i8* %11, %0
  %15 = and i1 %13, %14
  br i1 %15, label %45, label %16

16:                                               ; preds = %9
  %17 = and i64 %1, -8
  br label %18

18:                                               ; preds = %18, %16
  %19 = phi i64 [ 0, %16 ], [ %41, %18 ]
  %20 = getelementptr inbounds i8, i8* %0, i64 %19
  %21 = bitcast i8* %20 to <8 x i8>*
  %22 = load <8 x i8>, <8 x i8>* %21, align 1, !alias.scope !3
  %23 = xor <8 x i8> %22, <i8 85, i8 85, i8 85, i8 85, i8 85, i8 85, i8 85, i8 85>
  %24 = zext <8 x i8> %23 to <8 x i32>
  %25 = shl nuw nsw <8 x i32> %24, <i32 4, i32 4, i32 4, i32 4, i32 4, i32 4, i32 4, i32 4>
  %26 = and <8 x i32> %25, <i32 240, i32 240, i32 240, i32 240, i32 240, i32 240, i32 240, i32 240>
  %27 = lshr <8 x i32> %24, <i32 4, i32 4, i32 4, i32 4, i32 4, i32 4, i32 4, i32 4>
  %28 = and <8 x i32> %27, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %29 = icmp eq <8 x i32> %28, zeroinitializer
  %30 = or <8 x i32> %26, <i32 264, i32 264, i32 264, i32 264, i32 264, i32 264, i32 264, i32 264>
  %31 = add nsw <8 x i32> %28, <i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1>
  %32 = shl <8 x i32> %30, %31
  %33 = or <8 x i32> %26, <i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8>
  %34 = select <8 x i1> %29, <8 x i32> %33, <8 x i32> %32
  %35 = icmp slt <8 x i8> %22, zeroinitializer
  %36 = sub nsw <8 x i32> zeroinitializer, %34
  %37 = select <8 x i1> %35, <8 x i32> %34, <8 x i32> %36
  %38 = trunc <8 x i32> %37 to <8 x i16>
  %39 = getelementptr inbounds i16, i16* %2, i64 %19
  %40 = bitcast i16* %39 to <8 x i16>*
  store <8 x i16> %38, <8 x i16>* %40, align 2, !alias.scope !6, !noalias !3
  %41 = add i64 %19, 8
  %42 = icmp eq i64 %41, %17
  br i1 %42, label %43, label %18, !llvm.loop !8

43:                                               ; preds = %18
  %44 = icmp eq i64 %17, %1
  br i1 %44, label %73, label %45

45:                                               ; preds = %43, %9, %7
  %46 = phi i64 [ 0, %9 ], [ 0, %7 ], [ %17, %43 ]
  br label %47

47:                                               ; preds = %45, %64
  %48 = phi i64 [ %71, %64 ], [ %46, %45 ]
  %49 = getelementptr inbounds i8, i8* %0, i64 %48
  %50 = load i8, i8* %49, align 1
  %51 = xor i8 %50, 85
  %52 = zext i8 %51 to i32
  %53 = shl nuw nsw i32 %52, 4
  %54 = and i32 %53, 240
  %55 = lshr i32 %52, 4
  %56 = and i32 %55, 7
  %57 = icmp eq i32 %56, 0
  br i1 %57, label %62, label %58

58:                                               ; preds = %47
  %59 = or i32 %54, 264
  %60 = add nsw i32 %56, -1
  %61 = shl i32 %59, %60
  br label %64

62:                                               ; preds = %47
  %63 = or i32 %54, 8
  br label %64

64:                                               ; preds = %58, %62
  %65 = phi i32 [ %61, %58 ], [ %63, %62 ]
  %66 = icmp slt i8 %50, 0
  %67 = sub nsw i32 0, %65
  %68 = select i1 %66, i32 %65, i32 %67
  %69 = trunc i32 %68 to i16
  %70 = getelementptr inbounds i16, i16* %2, i64 %48
  store i16 %69, i16* %70, align 2
  %71 = add nuw i64 %48, 1
  %72 = icmp eq i64 %71, %1
  br i1 %72, label %73, label %47, !llvm.loop !10

73:                                               ; preds = %64, %43, %4
  store i16 1, i16* %3, align 2
  ret i64 %1
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden i64 @WebRtcG711_DecodeU(i8* nocapture readonly, i64 returned, i16* nocapture, i16* nocapture) local_unnamed_addr #1 {
  %5 = bitcast i16* %2 to i8*
  %6 = icmp eq i64 %1, 0
  br i1 %6, label %64, label %7

7:                                                ; preds = %4
  %8 = icmp ult i64 %1, 8
  br i1 %8, label %42, label %9

9:                                                ; preds = %7
  %10 = getelementptr i16, i16* %2, i64 %1
  %11 = bitcast i16* %10 to i8*
  %12 = getelementptr i8, i8* %0, i64 %1
  %13 = icmp ugt i8* %12, %5
  %14 = icmp ugt i8* %11, %0
  %15 = and i1 %13, %14
  br i1 %15, label %42, label %16

16:                                               ; preds = %9
  %17 = and i64 %1, -8
  br label %18

18:                                               ; preds = %18, %16
  %19 = phi i64 [ 0, %16 ], [ %38, %18 ]
  %20 = getelementptr inbounds i8, i8* %0, i64 %19
  %21 = bitcast i8* %20 to <8 x i8>*
  %22 = load <8 x i8>, <8 x i8>* %21, align 1, !alias.scope !11
  %23 = xor <8 x i8> %22, <i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1>
  %24 = zext <8 x i8> %23 to <8 x i32>
  %25 = shl nuw nsw <8 x i32> %24, <i32 3, i32 3, i32 3, i32 3, i32 3, i32 3, i32 3, i32 3>
  %26 = and <8 x i32> %25, <i32 120, i32 120, i32 120, i32 120, i32 120, i32 120, i32 120, i32 120>
  %27 = or <8 x i32> %26, <i32 132, i32 132, i32 132, i32 132, i32 132, i32 132, i32 132, i32 132>
  %28 = lshr <8 x i32> %24, <i32 4, i32 4, i32 4, i32 4, i32 4, i32 4, i32 4, i32 4>
  %29 = and <8 x i32> %28, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %30 = shl <8 x i32> %27, %29
  %31 = icmp sgt <8 x i8> %22, <i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1>
  %32 = sub nsw <8 x i32> <i32 132, i32 132, i32 132, i32 132, i32 132, i32 132, i32 132, i32 132>, %30
  %33 = add nuw nsw <8 x i32> %30, <i32 65404, i32 65404, i32 65404, i32 65404, i32 65404, i32 65404, i32 65404, i32 65404>
  %34 = select <8 x i1> %31, <8 x i32> %32, <8 x i32> %33
  %35 = trunc <8 x i32> %34 to <8 x i16>
  %36 = getelementptr inbounds i16, i16* %2, i64 %19
  %37 = bitcast i16* %36 to <8 x i16>*
  store <8 x i16> %35, <8 x i16>* %37, align 2, !alias.scope !14, !noalias !11
  %38 = add i64 %19, 8
  %39 = icmp eq i64 %38, %17
  br i1 %39, label %40, label %18, !llvm.loop !16

40:                                               ; preds = %18
  %41 = icmp eq i64 %17, %1
  br i1 %41, label %64, label %42

42:                                               ; preds = %40, %9, %7
  %43 = phi i64 [ 0, %9 ], [ 0, %7 ], [ %17, %40 ]
  br label %44

44:                                               ; preds = %42, %44
  %45 = phi i64 [ %62, %44 ], [ %43, %42 ]
  %46 = getelementptr inbounds i8, i8* %0, i64 %45
  %47 = load i8, i8* %46, align 1
  %48 = xor i8 %47, -1
  %49 = zext i8 %48 to i32
  %50 = shl nuw nsw i32 %49, 3
  %51 = and i32 %50, 120
  %52 = or i32 %51, 132
  %53 = lshr i32 %49, 4
  %54 = and i32 %53, 7
  %55 = shl i32 %52, %54
  %56 = icmp sgt i8 %47, -1
  %57 = sub nsw i32 132, %55
  %58 = add nuw nsw i32 %55, 65404
  %59 = select i1 %56, i32 %57, i32 %58
  %60 = trunc i32 %59 to i16
  %61 = getelementptr inbounds i16, i16* %2, i64 %45
  store i16 %60, i16* %61, align 2
  %62 = add nuw i64 %45, 1
  %63 = icmp eq i64 %62, %1
  br i1 %63, label %64, label %44, !llvm.loop !17

64:                                               ; preds = %44, %40, %4
  store i16 1, i16* %3, align 2
  ret i64 %1
}

; Function Attrs: nofree nounwind ssp uwtable
define hidden signext i16 @WebRtcG711_Version(i8*, i16 signext) local_unnamed_addr #2 {
  %3 = sext i16 %1 to i64
  %4 = tail call i64 @llvm.objectsize.i64.p0i8(i8* %0, i1 false, i1 true, i1 false) #5
  %5 = tail call i8* @__strncpy_chk(i8* %0, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str, i64 0, i64 0), i64 %3, i64 %4) #5
  ret i16 0
}

; Function Attrs: nofree nounwind
declare i8* @__strncpy_chk(i8*, i8*, i64, i64) local_unnamed_addr #3

; Function Attrs: nounwind readnone speculatable
declare i64 @llvm.objectsize.i64.p0i8(i8*, i1 immarg, i1 immarg, i1 immarg) #4

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nofree norecurse nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nofree nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind readnone speculatable }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{i32 115730, i32 115758}
!3 = !{!4}
!4 = distinct !{!4, !5}
!5 = distinct !{!5, !"LVerDomain"}
!6 = !{!7}
!7 = distinct !{!7, !5}
!8 = distinct !{!8, !9}
!9 = !{!"llvm.loop.isvectorized", i32 1}
!10 = distinct !{!10, !9}
!11 = !{!12}
!12 = distinct !{!12, !13}
!13 = distinct !{!13, !"LVerDomain"}
!14 = !{!15}
!15 = distinct !{!15, !13}
!16 = distinct !{!16, !9}
!17 = distinct !{!17, !9}
