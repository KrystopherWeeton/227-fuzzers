; ModuleID = '../../third_party/skia/src/core/SkColorFilter_Matrix.cpp'
source_filename = "../../third_party/skia/src/core/SkColorFilter_Matrix.cpp"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%class.SkColorFilter_Matrix = type <{ %class.SkColorFilterBase.base, [20 x float], i8, i8, [2 x i8] }>
%class.SkColorFilterBase.base = type { %class.SkColorFilter.base }
%class.SkColorFilter.base = type { %class.SkFlattenable.base }
%class.SkFlattenable.base = type { %class.SkRefCnt.base }
%class.SkRefCnt.base = type { %class.SkRefCntBase.base }
%class.SkRefCntBase.base = type <{ i32 (...)**, %"struct.std::__1::atomic" }>
%"struct.std::__1::atomic" = type { %"struct.std::__1::__atomic_base" }
%"struct.std::__1::__atomic_base" = type { %"struct.std::__1::__atomic_base.0" }
%"struct.std::__1::__atomic_base.0" = type { %"struct.std::__1::__cxx_atomic_impl" }
%"struct.std::__1::__cxx_atomic_impl" = type { %"struct.std::__1::__cxx_atomic_base_impl" }
%"struct.std::__1::__cxx_atomic_base_impl" = type { i32 }
%class.SkWriteBuffer = type { i32 (...)**, %struct.SkSerialProcs }
%struct.SkSerialProcs = type { void (%class.sk_sp*, %class.SkPicture*, i8*)*, i8*, void (%class.sk_sp*, %class.SkImage*, i8*)*, i8*, void (%class.sk_sp*, %class.SkTypeface*, i8*)*, i8* }
%class.sk_sp = type { %class.SkData* }
%class.SkData = type { %class.SkNVRefCnt, void (i8*, i8*)*, i8*, i8*, i64 }
%class.SkNVRefCnt = type { %"struct.std::__1::atomic" }
%class.SkPicture = type <{ %class.SkRefCnt.base, i32, %"struct.std::__1::atomic.1", [7 x i8] }>
%"struct.std::__1::atomic.1" = type { %"struct.std::__1::__atomic_base.2" }
%"struct.std::__1::__atomic_base.2" = type { %"struct.std::__1::__cxx_atomic_impl.3" }
%"struct.std::__1::__cxx_atomic_impl.3" = type { %"struct.std::__1::__cxx_atomic_base_impl.4" }
%"struct.std::__1::__cxx_atomic_base_impl.4" = type { i8 }
%class.SkImage = type <{ %class.SkRefCnt.base, [4 x i8], %struct.SkImageInfo, i32, [4 x i8] }>
%struct.SkImageInfo = type { %class.SkColorInfo, %struct.SkISize }
%class.SkColorInfo = type { %class.sk_sp.5, i32, i32 }
%class.sk_sp.5 = type { %class.SkColorSpace* }
%class.SkColorSpace = type <{ %class.SkNVRefCnt.6, i32, i32, %struct.skcms_TransferFunction, %struct.skcms_Matrix3x3, %struct.skcms_TransferFunction, %struct.skcms_Matrix3x3, %class.SkOnce, [3 x i8] }>
%class.SkNVRefCnt.6 = type { %"struct.std::__1::atomic" }
%struct.skcms_TransferFunction = type { float, float, float, float, float, float, float }
%struct.skcms_Matrix3x3 = type { [3 x [3 x float]] }
%class.SkOnce = type { %"struct.std::__1::atomic.7" }
%"struct.std::__1::atomic.7" = type { %"struct.std::__1::__atomic_base.8" }
%"struct.std::__1::__atomic_base.8" = type { %"struct.std::__1::__atomic_base.9" }
%"struct.std::__1::__atomic_base.9" = type { %"struct.std::__1::__cxx_atomic_impl.10" }
%"struct.std::__1::__cxx_atomic_impl.10" = type { %"struct.std::__1::__cxx_atomic_base_impl.11" }
%"struct.std::__1::__cxx_atomic_base_impl.11" = type { i8 }
%struct.SkISize = type { i32, i32 }
%class.SkTypeface = type <{ %class.SkWeakRefCnt, i32, %class.SkFontStyle, %struct.SkRect, %class.SkOnce, i8, [6 x i8] }>
%class.SkWeakRefCnt = type { %class.SkRefCnt.base, %"struct.std::__1::atomic" }
%class.SkFontStyle = type { i32 }
%struct.SkRect = type { float, float, float, float }
%class.sk_sp.16 = type { %class.SkFlattenable* }
%class.SkFlattenable = type { %class.SkRefCnt.base, [4 x i8] }
%class.SkReadBuffer = type <{ i8*, i8*, i8*, %class.SkTHashMap, i32, [4 x i8], %class.sk_sp.13*, i32, [4 x i8], {}**, i32, [4 x i8], %struct.SkDeserialProcs, i8, [7 x i8] }>
%class.SkTHashMap = type { %class.SkTHashTable }
%class.SkTHashTable = type { i32, i32, %class.SkAutoTArray }
%class.SkAutoTArray = type { %"class.std::__1::unique_ptr" }
%"class.std::__1::unique_ptr" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %"struct.SkTHashTable<SkTHashMap<unsigned int, sk_sp<SkFlattenable> (*)(SkReadBuffer &), SkGoodHash>::Pair, unsigned int, SkTHashMap<unsigned int, sk_sp<SkFlattenable> (*)(SkReadBuffer &), SkGoodHash>::Pair>::Slot"* }
%"struct.SkTHashTable<SkTHashMap<unsigned int, sk_sp<SkFlattenable> (*)(SkReadBuffer &), SkGoodHash>::Pair, unsigned int, SkTHashMap<unsigned int, sk_sp<SkFlattenable> (*)(SkReadBuffer &), SkGoodHash>::Pair>::Slot" = type <{ %"struct.SkTHashMap<unsigned int, sk_sp<SkFlattenable> (*)(SkReadBuffer &), SkGoodHash>::Pair", i32, [4 x i8] }>
%"struct.SkTHashMap<unsigned int, sk_sp<SkFlattenable> (*)(SkReadBuffer &), SkGoodHash>::Pair" = type { %"struct.std::__1::pair" }
%"struct.std::__1::pair" = type { i32, void (%class.sk_sp.16*, %class.SkReadBuffer*)* }
%class.sk_sp.13 = type { %class.SkTypeface* }
%struct.SkDeserialProcs = type { {}*, i8*, {}*, i8*, void (%class.sk_sp.13*, i8*, i64, i8*)*, i8* }
%class.sk_sp.17 = type { %class.SkColorFilter* }
%class.SkColorFilter = type { %class.SkFlattenable.base, [4 x i8] }
%struct.SkStageRec = type { %class.SkRasterPipeline*, %class.SkArenaAlloc*, i32, %class.SkColorSpace*, %class.SkPaint*, %class.SkMatrix*, %class.SkMatrixProvider* }
%class.SkRasterPipeline = type { %class.SkArenaAlloc*, %"struct.SkRasterPipeline::StageList"*, i32, i32 }
%"struct.SkRasterPipeline::StageList" = type { %"struct.SkRasterPipeline::StageList"*, i32, i8* }
%class.SkArenaAlloc = type <{ i8*, i8*, i8*, %class.SkFibBlockSizes, [4 x i8] }>
%class.SkFibBlockSizes = type { i32 }
%class.SkPaint = type <{ %class.sk_sp.18, %class.sk_sp.19, %class.sk_sp.20, %class.sk_sp.17, %class.sk_sp.21, %struct.SkRGBA4f, float, float, %union.anon, [4 x i8] }>
%class.sk_sp.18 = type { %class.SkPathEffect* }
%class.SkPathEffect = type { %class.SkFlattenable.base, [4 x i8] }
%class.sk_sp.19 = type { %class.SkShader* }
%class.SkShader = type { %class.SkFlattenable.base, [4 x i8] }
%class.sk_sp.20 = type { %class.SkMaskFilter* }
%class.SkMaskFilter = type { %class.SkFlattenable.base, [4 x i8] }
%class.sk_sp.21 = type { %class.SkImageFilter* }
%class.SkImageFilter = type { %class.SkFlattenable.base, [4 x i8] }
%struct.SkRGBA4f = type { float, float, float, float }
%union.anon = type { %struct.anon }
%struct.anon = type { i32 }
%class.SkMatrix = type { [9 x float], i32 }
%class.SkMatrixProvider = type opaque
%"class.skvm::Builder" = type <{ %class.SkTHashMap.22, %"class.std::__1::vector", %"class.std::__1::vector.34", %"struct.skvm::Features", [6 x i8] }>
%class.SkTHashMap.22 = type { %class.SkTHashTable.23 }
%class.SkTHashTable.23 = type { i32, i32, %class.SkAutoTArray.24 }
%class.SkAutoTArray.24 = type { %"class.std::__1::unique_ptr.25" }
%"class.std::__1::unique_ptr.25" = type { %"class.std::__1::__compressed_pair.26" }
%"class.std::__1::__compressed_pair.26" = type { %"struct.std::__1::__compressed_pair_elem.27" }
%"struct.std::__1::__compressed_pair_elem.27" = type { %"struct.SkTHashTable<SkTHashMap<skvm::Instruction, int, skvm::InstructionHash>::Pair, skvm::Instruction, SkTHashMap<skvm::Instruction, int, skvm::InstructionHash>::Pair>::Slot"* }
%"struct.SkTHashTable<SkTHashMap<skvm::Instruction, int, skvm::InstructionHash>::Pair, skvm::Instruction, SkTHashMap<skvm::Instruction, int, skvm::InstructionHash>::Pair>::Slot" = type opaque
%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { %"struct.skvm::Instruction"*, %"struct.skvm::Instruction"*, %"class.std::__1::__compressed_pair.31" }
%"struct.skvm::Instruction" = type { i32, i32, i32, i32, i32, i32, i32 }
%"class.std::__1::__compressed_pair.31" = type { %"struct.std::__1::__compressed_pair_elem.32" }
%"struct.std::__1::__compressed_pair_elem.32" = type { %"struct.skvm::Instruction"* }
%"class.std::__1::vector.34" = type { %"class.std::__1::__vector_base.35" }
%"class.std::__1::__vector_base.35" = type { i32*, i32*, %"class.std::__1::__compressed_pair.36" }
%"class.std::__1::__compressed_pair.36" = type { %"struct.std::__1::__compressed_pair_elem.37" }
%"struct.std::__1::__compressed_pair_elem.37" = type { i32* }
%"struct.skvm::Features" = type { i8, i8 }
%"struct.skvm::Color" = type { %"struct.skvm::F32", %"struct.skvm::F32", %"struct.skvm::F32", %"struct.skvm::F32" }
%"struct.skvm::F32" = type <{ %"class.skvm::Builder"*, i32, [4 x i8] }>
%"struct.skvm::Uniforms" = type { %"struct.skvm::Ptr", %"class.std::__1::vector.34" }
%"struct.skvm::Ptr" = type { i32 }
%class.anon.131 = type { %"class.skvm::Builder"**, %"struct.skvm::Uniforms"**, %class.SkColorFilter_Matrix*, %"struct.skvm::Color"* }
%class.anon.125 = type { %"class.skvm::Builder"**, %"struct.skvm::Uniforms"**, %class.SkColorFilter_Matrix*, %"struct.skvm::HSLA"* }
%"struct.skvm::HSLA" = type { %"struct.skvm::F32", %"struct.skvm::F32", %"struct.skvm::F32", %"struct.skvm::F32" }
%class.GrFragmentProcessor = type <{ %class.GrProcessor, %class.SkSTArray, %class.GrFragmentProcessor*, i32, %"struct.SkSL::SampleUsage", [4 x i8] }>
%class.GrProcessor = type { i32 (...)**, i32, i32 }
%class.SkSTArray = type { %class.SkAlignedSTStorage, %class.SkTArray }
%class.SkAlignedSTStorage = type { [8 x i8] }
%class.SkTArray = type { %"class.std::__1::unique_ptr.48"*, i64 }
%"class.std::__1::unique_ptr.48" = type { %"class.std::__1::__compressed_pair.49" }
%"class.std::__1::__compressed_pair.49" = type { %"struct.std::__1::__compressed_pair_elem.50" }
%"struct.std::__1::__compressed_pair_elem.50" = type { %class.GrFragmentProcessor* }
%"struct.SkSL::SampleUsage" = type <{ i32, i8, [3 x i8] }>
%class.GrRecordingContext = type { %class.GrImageContext.base, %"class.GrRecordingContext::Stats", %"class.std::__1::unique_ptr.55", %"class.GrRecordingContext::OwnedArenas", %"class.std::__1::unique_ptr.98", %"class.std::__1::unique_ptr.104" }
%class.GrImageContext.base = type <{ %class.GrContext_Base, %class.GrSingleOwner }>
%class.GrContext_Base = type { %class.SkRefCnt.base, %class.sk_sp.54 }
%class.sk_sp.54 = type { %class.GrContextThreadSafeProxy* }
%class.GrContextThreadSafeProxy = type opaque
%class.GrSingleOwner = type { i8 }
%"class.GrRecordingContext::Stats" = type { i8 }
%"class.std::__1::unique_ptr.55" = type { %"class.std::__1::__compressed_pair.56" }
%"class.std::__1::__compressed_pair.56" = type { %"struct.std::__1::__compressed_pair_elem.57" }
%"struct.std::__1::__compressed_pair_elem.57" = type { %class.GrAuditTrail* }
%class.GrAuditTrail = type <{ %class.SkTArray.58, %class.SkTHashMap.60, %class.SkTHashMap.69, %class.SkTArray.78, %class.SkTArray.80, i32, i8, [3 x i8] }>
%class.SkTArray.58 = type { %"class.std::__1::unique_ptr.59"*, i64 }
%"class.std::__1::unique_ptr.59" = type { %"class.std::__1::__compressed_pair.112" }
%"class.std::__1::__compressed_pair.112" = type { %"struct.std::__1::__compressed_pair_elem.113" }
%"struct.std::__1::__compressed_pair_elem.113" = type { %"struct.GrAuditTrail::Op"* }
%"struct.GrAuditTrail::Op" = type <{ %class.SkString, %class.SkTArray.80, %struct.SkRect, i32, i32, i32, [4 x i8] }>
%class.SkString = type { %class.sk_sp.81 }
%class.sk_sp.81 = type { %"struct.SkString::Rec"* }
%"struct.SkString::Rec" = type <{ i32, %"struct.std::__1::atomic", i8, [3 x i8] }>
%class.SkTHashMap.60 = type { %class.SkTHashTable.61 }
%class.SkTHashTable.61 = type { i32, i32, %class.SkAutoTArray.62 }
%class.SkAutoTArray.62 = type { %"class.std::__1::unique_ptr.63" }
%"class.std::__1::unique_ptr.63" = type { %"class.std::__1::__compressed_pair.64" }
%"class.std::__1::__compressed_pair.64" = type { %"struct.std::__1::__compressed_pair_elem.65" }
%"struct.std::__1::__compressed_pair_elem.65" = type { %"struct.SkTHashTable<SkTHashMap<unsigned int, int, SkGoodHash>::Pair, unsigned int, SkTHashMap<unsigned int, int, SkGoodHash>::Pair>::Slot"* }
%"struct.SkTHashTable<SkTHashMap<unsigned int, int, SkGoodHash>::Pair, unsigned int, SkTHashMap<unsigned int, int, SkGoodHash>::Pair>::Slot" = type { %"struct.SkTHashMap<unsigned int, int, SkGoodHash>::Pair", i32 }
%"struct.SkTHashMap<unsigned int, int, SkGoodHash>::Pair" = type { %"struct.std::__1::pair.117" }
%"struct.std::__1::pair.117" = type { i32, i32 }
%class.SkTHashMap.69 = type { %class.SkTHashTable.70 }
%class.SkTHashTable.70 = type { i32, i32, %class.SkAutoTArray.71 }
%class.SkAutoTArray.71 = type { %"class.std::__1::unique_ptr.72" }
%"class.std::__1::unique_ptr.72" = type { %"class.std::__1::__compressed_pair.73" }
%"class.std::__1::__compressed_pair.73" = type { %"struct.std::__1::__compressed_pair_elem.74" }
%"struct.std::__1::__compressed_pair_elem.74" = type { %"struct.SkTHashTable<SkTHashMap<int, SkTArray<GrAuditTrail::Op *, false> *, SkGoodHash>::Pair, int, SkTHashMap<int, SkTArray<GrAuditTrail::Op *, false> *, SkGoodHash>::Pair>::Slot"* }
%"struct.SkTHashTable<SkTHashMap<int, SkTArray<GrAuditTrail::Op *, false> *, SkGoodHash>::Pair, int, SkTHashMap<int, SkTArray<GrAuditTrail::Op *, false> *, SkGoodHash>::Pair>::Slot" = type <{ %"struct.SkTHashMap<int, SkTArray<GrAuditTrail::Op *, false> *, SkGoodHash>::Pair", i32, [4 x i8] }>
%"struct.SkTHashMap<int, SkTArray<GrAuditTrail::Op *, false> *, SkGoodHash>::Pair" = type { %"struct.std::__1::pair.118" }
%"struct.std::__1::pair.118" = type { i32, %class.SkTArray.119* }
%class.SkTArray.119 = type { %"struct.GrAuditTrail::Op"**, i64 }
%class.SkTArray.78 = type { %"class.std::__1::unique_ptr.79"*, i64 }
%"class.std::__1::unique_ptr.79" = type { %"class.std::__1::__compressed_pair.120" }
%"class.std::__1::__compressed_pair.120" = type { %"struct.std::__1::__compressed_pair_elem.121" }
%"struct.std::__1::__compressed_pair_elem.121" = type { %"struct.GrAuditTrail::OpNode"* }
%"struct.GrAuditTrail::OpNode" = type <{ %struct.SkRect, %class.SkTArray.119, %"class.GrSurfaceProxy::UniqueID", [4 x i8] }>
%"class.GrSurfaceProxy::UniqueID" = type { i32 }
%class.SkTArray.80 = type { %class.SkString*, i64 }
%"class.GrRecordingContext::OwnedArenas" = type { i8, %"class.std::__1::unique_ptr.85", %"class.std::__1::unique_ptr.91" }
%"class.std::__1::unique_ptr.85" = type { %"class.std::__1::__compressed_pair.86" }
%"class.std::__1::__compressed_pair.86" = type { %"struct.std::__1::__compressed_pair_elem.87" }
%"struct.std::__1::__compressed_pair_elem.87" = type { %class.SkArenaAlloc* }
%"class.std::__1::unique_ptr.91" = type { %"class.std::__1::__compressed_pair.92" }
%"class.std::__1::__compressed_pair.92" = type { %"struct.std::__1::__compressed_pair_elem.93" }
%"struct.std::__1::__compressed_pair_elem.93" = type { %class.GrSubRunAllocator* }
%class.GrSubRunAllocator = type { %class.GrBagOfBytes }
%class.GrBagOfBytes = type { i8*, i32, %class.SkFibBlockSizes.94 }
%class.SkFibBlockSizes.94 = type { i32 }
%"class.std::__1::unique_ptr.98" = type { %"class.std::__1::__compressed_pair.99" }
%"class.std::__1::__compressed_pair.99" = type { %"struct.std::__1::__compressed_pair_elem.100" }
%"struct.std::__1::__compressed_pair_elem.100" = type { %class.GrDrawingManager* }
%class.GrDrawingManager = type opaque
%"class.std::__1::unique_ptr.104" = type { %"class.std::__1::__compressed_pair.105" }
%"class.std::__1::__compressed_pair.105" = type { %"struct.std::__1::__compressed_pair_elem.106" }
%"struct.std::__1::__compressed_pair_elem.106" = type { %class.GrProxyProvider* }
%class.GrProxyProvider = type opaque
%class.GrColorInfo = type opaque
%class.SkColorMatrix = type { %"struct.std::__1::array" }
%"struct.std::__1::array" = type { [20 x float] }
%class.SkRefCntBase = type <{ i32 (...)**, %"struct.std::__1::atomic", [4 x i8] }>
%class.SkColorFilterBase = type { %class.SkColorFilter.base, [4 x i8] }
%struct.SkRGBA4f.111 = type { float, float, float, float }
%class.anon.128 = type { %"class.skvm::Builder"**, %"struct.skvm::Uniforms"** }
%"class.std::__1::__vector_base_common" = type { i8 }
%class.anon.132 = type { %"class.skvm::Builder"**, %"struct.skvm::Uniforms"** }

$_ZN30GrColorMatrixFragmentProcessor4MakeENSt3__110unique_ptrI19GrFragmentProcessorNS0_14default_deleteIS2_EEEEPKfbbb = comdat any

$_ZN12SkRefCntBaseD2Ev = comdat any

$_ZN20SkColorFilter_MatrixD0Ev = comdat any

$_ZNK12SkRefCntBase16internal_disposeEv = comdat any

$_ZNK20SkColorFilter_Matrix10getFactoryEv = comdat any

$_ZNK20SkColorFilter_Matrix11getTypeNameEv = comdat any

$_ZNK17SkColorFilterBase18getFlattenableTypeEv = comdat any

$_ZNK20SkColorFilter_Matrix18onIsAlphaUnchangedEv = comdat any

$_ZN4skvm8Uniforms5pushFEf = comdat any

$_ZN4skvm7Builder7clamp01ENS_5ColorE = comdat any

@_ZTV20SkColorFilter_Matrix = hidden unnamed_addr constant { [16 x i8*] } { [16 x i8*] [i8* null, i8* null, i8* bitcast (void (%class.SkRefCntBase*)* @_ZN12SkRefCntBaseD2Ev to i8*), i8* bitcast (void (%class.SkColorFilter_Matrix*)* @_ZN20SkColorFilter_MatrixD0Ev to i8*), i8* bitcast (void (%class.SkRefCntBase*)* @_ZNK12SkRefCntBase16internal_disposeEv to i8*), i8* bitcast (void (%class.sk_sp.16*, %class.SkReadBuffer*)* (%class.SkColorFilter_Matrix*)* @_ZNK20SkColorFilter_Matrix10getFactoryEv to i8*), i8* bitcast (i8* (%class.SkColorFilter_Matrix*)* @_ZNK20SkColorFilter_Matrix11getTypeNameEv to i8*), i8* bitcast (void (%class.SkColorFilter_Matrix*, %class.SkWriteBuffer*)* @_ZNK20SkColorFilter_Matrix7flattenER13SkWriteBuffer to i8*), i8* bitcast (i32 (%class.SkColorFilterBase*)* @_ZNK17SkColorFilterBase18getFlattenableTypeEv to i8*), i8* bitcast (i1 (%class.SkColorFilter_Matrix*)* @_ZNK20SkColorFilter_Matrix18onIsAlphaUnchangedEv to i8*), i8* bitcast ({ i8, %class.GrFragmentProcessor* } (%class.SkColorFilter_Matrix*, %class.GrFragmentProcessor*, %class.GrRecordingContext*, %class.GrColorInfo*)* @_ZNK20SkColorFilter_Matrix19asFragmentProcessorENSt3__110unique_ptrI19GrFragmentProcessorNS0_14default_deleteIS2_EEEEP18GrRecordingContextRK11GrColorInfo to i8*), i8* bitcast ({ <2 x float>, <2 x float> } (%class.SkColorFilterBase*, %struct.SkRGBA4f.111*, %class.SkColorSpace*)* @_ZNK17SkColorFilterBase15onFilterColor4fERK8SkRGBA4fIL11SkAlphaType2EEP12SkColorSpace to i8*), i8* bitcast (i1 (%class.SkColorFilter_Matrix*, float*)* @_ZNK20SkColorFilter_Matrix16onAsAColorMatrixEPf to i8*), i8* bitcast (i1 (%class.SkColorFilterBase*, i32*, i32*)* @_ZNK17SkColorFilterBase14onAsAColorModeEPjP11SkBlendMode to i8*), i8* bitcast (i1 (%class.SkColorFilter_Matrix*, %struct.SkStageRec*, i1)* @_ZNK20SkColorFilter_Matrix14onAppendStagesERK10SkStageRecb to i8*), i8* bitcast (void (%"struct.skvm::Color"*, %class.SkColorFilter_Matrix*, %"class.skvm::Builder"*, %"struct.skvm::Color"*, %class.SkColorSpace*, %"struct.skvm::Uniforms"*, %class.SkArenaAlloc*)* @_ZNK20SkColorFilter_Matrix9onProgramEPN4skvm7BuilderENS0_5ColorEP12SkColorSpacePNS0_8UniformsEP12SkArenaAlloc to i8*)] }, align 8
@.str = private unnamed_addr constant [21 x i8] c"SkColorFilter_Matrix\00", align 1
@.str.1 = private unnamed_addr constant [31 x i8] c"SkColorMatrixFilterRowMajor255\00", align 1
@_ZTV30GrColorMatrixFragmentProcessor = external unnamed_addr constant { [10 x i8*] }, align 8
@_ZTV22GrRGBToHSLFilterEffect = external unnamed_addr constant { [10 x i8*] }, align 8
@_ZTV22GrHSLToRGBFilterEffect = external unnamed_addr constant { [10 x i8*] }, align 8

@_ZN20SkColorFilter_MatrixC1EPKfNS_6DomainE = hidden unnamed_addr alias void (%class.SkColorFilter_Matrix*, float*, i8), void (%class.SkColorFilter_Matrix*, float*, i8)* @_ZN20SkColorFilter_MatrixC2EPKfNS_6DomainE

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN20SkColorFilter_MatrixC2EPKfNS_6DomainE(%class.SkColorFilter_Matrix* nocapture, float* nocapture readonly, i8 zeroext) unnamed_addr #0 align 2 {
  %4 = getelementptr inbounds %class.SkColorFilter_Matrix, %class.SkColorFilter_Matrix* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0
  store i32 1, i32* %4, align 4
  %5 = getelementptr inbounds %class.SkColorFilter_Matrix, %class.SkColorFilter_Matrix* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [16 x i8*] }, { [16 x i8*] }* @_ZTV20SkColorFilter_Matrix, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %5, align 8
  %6 = getelementptr inbounds %class.SkColorFilter_Matrix, %class.SkColorFilter_Matrix* %0, i64 0, i32 2
  %7 = getelementptr inbounds float, float* %1, i64 15
  %8 = load float, float* %7, align 4
  %9 = tail call float @llvm.fabs.f32(float %8) #10
  %10 = fcmp ugt float %9, 0x3F30000000000000
  br i1 %10, label %33, label %11

11:                                               ; preds = %3
  %12 = getelementptr inbounds float, float* %1, i64 16
  %13 = load float, float* %12, align 4
  %14 = tail call float @llvm.fabs.f32(float %13) #10
  %15 = fcmp ugt float %14, 0x3F30000000000000
  br i1 %15, label %33, label %16

16:                                               ; preds = %11
  %17 = getelementptr inbounds float, float* %1, i64 17
  %18 = load float, float* %17, align 4
  %19 = tail call float @llvm.fabs.f32(float %18) #10
  %20 = fcmp ugt float %19, 0x3F30000000000000
  br i1 %20, label %33, label %21

21:                                               ; preds = %16
  %22 = getelementptr inbounds float, float* %1, i64 18
  %23 = load float, float* %22, align 4
  %24 = fadd float %23, -1.000000e+00
  %25 = tail call float @llvm.fabs.f32(float %24) #10
  %26 = fcmp ugt float %25, 0x3F30000000000000
  br i1 %26, label %33, label %27

27:                                               ; preds = %21
  %28 = getelementptr inbounds float, float* %1, i64 19
  %29 = load float, float* %28, align 4
  %30 = tail call float @llvm.fabs.f32(float %29) #10
  %31 = fcmp ole float %30, 0x3F30000000000000
  %32 = zext i1 %31 to i8
  br label %33

33:                                               ; preds = %3, %11, %16, %21, %27
  %34 = phi i8 [ 0, %21 ], [ 0, %16 ], [ 0, %11 ], [ 0, %3 ], [ %32, %27 ]
  store i8 %34, i8* %6, align 4
  %35 = getelementptr inbounds %class.SkColorFilter_Matrix, %class.SkColorFilter_Matrix* %0, i64 0, i32 3
  store i8 %2, i8* %35, align 1
  %36 = getelementptr inbounds %class.SkColorFilter_Matrix, %class.SkColorFilter_Matrix* %0, i64 0, i32 1, i64 0
  %37 = bitcast float* %36 to i8*
  %38 = bitcast float* %1 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %37, i8* align 4 %38, i64 80, i1 false)
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #1

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZNK20SkColorFilter_Matrix7flattenER13SkWriteBuffer(%class.SkColorFilter_Matrix*, %class.SkWriteBuffer* dereferenceable(56)) unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %class.SkColorFilter_Matrix, %class.SkColorFilter_Matrix* %0, i64 0, i32 1, i64 0
  %4 = bitcast %class.SkWriteBuffer* %1 to void (%class.SkWriteBuffer*, float*, i32)***
  %5 = load void (%class.SkWriteBuffer*, float*, i32)**, void (%class.SkWriteBuffer*, float*, i32)*** %4, align 8
  %6 = getelementptr inbounds void (%class.SkWriteBuffer*, float*, i32)*, void (%class.SkWriteBuffer*, float*, i32)** %5, i64 6
  %7 = load void (%class.SkWriteBuffer*, float*, i32)*, void (%class.SkWriteBuffer*, float*, i32)** %6, align 8
  tail call void %7(%class.SkWriteBuffer* %1, float* %3, i32 20) #10
  %8 = getelementptr inbounds %class.SkColorFilter_Matrix, %class.SkColorFilter_Matrix* %0, i64 0, i32 3
  %9 = load i8, i8* %8, align 1
  %10 = icmp eq i8 %9, 0
  %11 = bitcast %class.SkWriteBuffer* %1 to void (%class.SkWriteBuffer*, i1)***
  %12 = load void (%class.SkWriteBuffer*, i1)**, void (%class.SkWriteBuffer*, i1)*** %11, align 8
  %13 = getelementptr inbounds void (%class.SkWriteBuffer*, i1)*, void (%class.SkWriteBuffer*, i1)** %12, i64 4
  %14 = load void (%class.SkWriteBuffer*, i1)*, void (%class.SkWriteBuffer*, i1)** %13, align 8
  tail call void %14(%class.SkWriteBuffer* %1, i1 zeroext %10) #10
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN20SkColorFilter_Matrix10CreateProcER12SkReadBuffer(%class.sk_sp.16* noalias nocapture sret, %class.SkReadBuffer* dereferenceable(136)) #0 align 2 {
  %3 = alloca [20 x float], align 16
  %4 = bitcast [20 x float]* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 80, i8* nonnull %4) #10
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %4, i8 -1, i64 80, i1 false)
  %5 = getelementptr inbounds [20 x float], [20 x float]* %3, i64 0, i64 0
  %6 = call zeroext i1 @_ZN12SkReadBuffer15readScalarArrayEPfm(%class.SkReadBuffer* %1, float* nonnull %5, i64 20) #10
  br i1 %6, label %9, label %7

7:                                                ; preds = %2
  %8 = getelementptr inbounds %class.sk_sp.16, %class.sk_sp.16* %0, i64 0, i32 0
  store %class.SkFlattenable* null, %class.SkFlattenable** %8, align 8
  br label %130

9:                                                ; preds = %2
  %10 = call zeroext i1 @_ZN12SkReadBuffer8readBoolEv(%class.SkReadBuffer* %1) #10
  %11 = load float, float* %5, align 16
  %12 = fmul float %11, 0.000000e+00
  %13 = getelementptr inbounds [20 x float], [20 x float]* %3, i64 0, i64 1
  %14 = load float, float* %13, align 4
  %15 = fmul float %12, %14
  %16 = getelementptr inbounds [20 x float], [20 x float]* %3, i64 0, i64 2
  %17 = load float, float* %16, align 8
  %18 = fmul float %15, %17
  %19 = getelementptr inbounds [20 x float], [20 x float]* %3, i64 0, i64 3
  %20 = load float, float* %19, align 4
  %21 = fmul float %18, %20
  %22 = getelementptr inbounds [20 x float], [20 x float]* %3, i64 0, i64 4
  %23 = load float, float* %22, align 16
  %24 = fmul float %21, %23
  %25 = getelementptr inbounds [20 x float], [20 x float]* %3, i64 0, i64 5
  %26 = load float, float* %25, align 4
  %27 = fmul float %24, %26
  %28 = getelementptr inbounds [20 x float], [20 x float]* %3, i64 0, i64 6
  %29 = load float, float* %28, align 8
  %30 = fmul float %27, %29
  %31 = getelementptr inbounds [20 x float], [20 x float]* %3, i64 0, i64 7
  %32 = load float, float* %31, align 4
  %33 = fmul float %30, %32
  %34 = getelementptr inbounds [20 x float], [20 x float]* %3, i64 0, i64 8
  %35 = load float, float* %34, align 16
  %36 = fmul float %33, %35
  %37 = getelementptr inbounds [20 x float], [20 x float]* %3, i64 0, i64 9
  %38 = load float, float* %37, align 4
  %39 = fmul float %36, %38
  %40 = getelementptr inbounds [20 x float], [20 x float]* %3, i64 0, i64 10
  %41 = load float, float* %40, align 8
  %42 = fmul float %39, %41
  %43 = getelementptr inbounds [20 x float], [20 x float]* %3, i64 0, i64 11
  %44 = load float, float* %43, align 4
  %45 = fmul float %42, %44
  %46 = getelementptr inbounds [20 x float], [20 x float]* %3, i64 0, i64 12
  %47 = load float, float* %46, align 16
  %48 = fmul float %45, %47
  %49 = getelementptr inbounds [20 x float], [20 x float]* %3, i64 0, i64 13
  %50 = load float, float* %49, align 4
  %51 = fmul float %48, %50
  %52 = getelementptr inbounds [20 x float], [20 x float]* %3, i64 0, i64 14
  %53 = load float, float* %52, align 8
  %54 = fmul float %51, %53
  %55 = getelementptr inbounds [20 x float], [20 x float]* %3, i64 0, i64 15
  %56 = load float, float* %55, align 4
  %57 = fmul float %54, %56
  %58 = getelementptr inbounds [20 x float], [20 x float]* %3, i64 0, i64 16
  %59 = load float, float* %58, align 16
  %60 = fmul float %57, %59
  %61 = getelementptr inbounds [20 x float], [20 x float]* %3, i64 0, i64 17
  %62 = load float, float* %61, align 4
  %63 = fmul float %60, %62
  %64 = getelementptr inbounds [20 x float], [20 x float]* %3, i64 0, i64 18
  %65 = load float, float* %64, align 8
  %66 = fmul float %63, %65
  %67 = getelementptr inbounds [20 x float], [20 x float]* %3, i64 0, i64 19
  %68 = load float, float* %67, align 4
  %69 = fmul float %66, %68
  %70 = fcmp oeq float %69, 0.000000e+00
  br i1 %10, label %71, label %99

71:                                               ; preds = %9
  br i1 %70, label %72, label %127

72:                                               ; preds = %71
  %73 = call i8* @_Znwm(i64 96) #11, !noalias !2
  %74 = getelementptr inbounds i8, i8* %73, i64 8
  %75 = bitcast i8* %74 to i32*
  store i32 1, i32* %75, align 4, !noalias !2
  %76 = bitcast i8* %73 to i32 (...)***
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [16 x i8*] }, { [16 x i8*] }* @_ZTV20SkColorFilter_Matrix, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %76, align 8, !noalias !2
  %77 = getelementptr inbounds i8, i8* %73, i64 92
  %78 = call float @llvm.fabs.f32(float %56) #10
  %79 = fcmp ugt float %78, 0x3F30000000000000
  %80 = call float @llvm.fabs.f32(float %59) #10
  %81 = fcmp ugt float %80, 0x3F30000000000000
  %82 = or i1 %79, %81
  %83 = call float @llvm.fabs.f32(float %62) #10
  %84 = fcmp ugt float %83, 0x3F30000000000000
  %85 = or i1 %82, %84
  br i1 %85, label %94, label %86

86:                                               ; preds = %72
  %87 = fadd float %65, -1.000000e+00
  %88 = call float @llvm.fabs.f32(float %87) #10
  %89 = fcmp ugt float %88, 0x3F30000000000000
  br i1 %89, label %94, label %90

90:                                               ; preds = %86
  %91 = call float @llvm.fabs.f32(float %68) #10
  %92 = fcmp ole float %91, 0x3F30000000000000
  %93 = zext i1 %92 to i8
  br label %94

94:                                               ; preds = %90, %86, %72
  %95 = phi i8 [ 0, %86 ], [ 0, %72 ], [ %93, %90 ]
  store i8 %95, i8* %77, align 4, !noalias !2
  %96 = getelementptr inbounds i8, i8* %73, i64 93
  store i8 0, i8* %96, align 1, !noalias !2
  %97 = getelementptr inbounds i8, i8* %73, i64 12
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %97, i8* nonnull align 16 %4, i64 80, i1 false) #10, !noalias !2
  %98 = ptrtoint i8* %73 to i64
  br label %127

99:                                               ; preds = %9
  br i1 %70, label %100, label %127

100:                                              ; preds = %99
  %101 = call i8* @_Znwm(i64 96) #11, !noalias !7
  %102 = getelementptr inbounds i8, i8* %101, i64 8
  %103 = bitcast i8* %102 to i32*
  store i32 1, i32* %103, align 4, !noalias !7
  %104 = bitcast i8* %101 to i32 (...)***
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [16 x i8*] }, { [16 x i8*] }* @_ZTV20SkColorFilter_Matrix, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %104, align 8, !noalias !7
  %105 = getelementptr inbounds i8, i8* %101, i64 92
  %106 = call float @llvm.fabs.f32(float %56) #10
  %107 = fcmp ugt float %106, 0x3F30000000000000
  %108 = call float @llvm.fabs.f32(float %59) #10
  %109 = fcmp ugt float %108, 0x3F30000000000000
  %110 = or i1 %107, %109
  %111 = call float @llvm.fabs.f32(float %62) #10
  %112 = fcmp ugt float %111, 0x3F30000000000000
  %113 = or i1 %110, %112
  br i1 %113, label %122, label %114

114:                                              ; preds = %100
  %115 = fadd float %65, -1.000000e+00
  %116 = call float @llvm.fabs.f32(float %115) #10
  %117 = fcmp ugt float %116, 0x3F30000000000000
  br i1 %117, label %122, label %118

118:                                              ; preds = %114
  %119 = call float @llvm.fabs.f32(float %68) #10
  %120 = fcmp ole float %119, 0x3F30000000000000
  %121 = zext i1 %120 to i8
  br label %122

122:                                              ; preds = %118, %114, %100
  %123 = phi i8 [ 0, %114 ], [ 0, %100 ], [ %121, %118 ]
  store i8 %123, i8* %105, align 4, !noalias !7
  %124 = getelementptr inbounds i8, i8* %101, i64 93
  store i8 1, i8* %124, align 1, !noalias !7
  %125 = getelementptr inbounds i8, i8* %101, i64 12
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %125, i8* nonnull align 16 %4, i64 80, i1 false) #10, !noalias !7
  %126 = ptrtoint i8* %101 to i64
  br label %127

127:                                              ; preds = %71, %94, %99, %122
  %128 = phi i64 [ %98, %94 ], [ 0, %71 ], [ %126, %122 ], [ 0, %99 ]
  %129 = bitcast %class.sk_sp.16* %0 to i64*
  store i64 %128, i64* %129, align 8
  br label %130

130:                                              ; preds = %127, %7
  call void @llvm.lifetime.end.p0i8(i64 80, i8* nonnull %4) #10
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

declare zeroext i1 @_ZN12SkReadBuffer15readScalarArrayEPfm(%class.SkReadBuffer*, float*, i64) local_unnamed_addr #2

declare zeroext i1 @_ZN12SkReadBuffer8readBoolEv(%class.SkReadBuffer*) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN14SkColorFilters6MatrixEPKf(%class.sk_sp.17* noalias nocapture sret, float*) local_unnamed_addr #0 align 2 {
  tail call fastcc void @_ZL10MakeMatrixPKfN20SkColorFilter_Matrix6DomainE(%class.sk_sp.17* sret %0, float* %1, i8 zeroext 0)
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN14SkColorFilters10HSLAMatrixEPKf(%class.sk_sp.17* noalias nocapture sret, float*) local_unnamed_addr #0 align 2 {
  tail call fastcc void @_ZL10MakeMatrixPKfN20SkColorFilter_Matrix6DomainE(%class.sk_sp.17* sret %0, float* %1, i8 zeroext 1)
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZNK20SkColorFilter_Matrix16onAsAColorMatrixEPf(%class.SkColorFilter_Matrix* nocapture readonly, float*) unnamed_addr #0 align 2 {
  %3 = icmp eq float* %1, null
  br i1 %3, label %8, label %4

4:                                                ; preds = %2
  %5 = bitcast float* %1 to i8*
  %6 = getelementptr inbounds %class.SkColorFilter_Matrix, %class.SkColorFilter_Matrix* %0, i64 0, i32 1, i64 0
  %7 = bitcast float* %6 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %5, i8* align 4 %7, i64 80, i1 false)
  br label %8

8:                                                ; preds = %2, %4
  ret i1 true
}

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZNK20SkColorFilter_Matrix14onAppendStagesERK10SkStageRecb(%class.SkColorFilter_Matrix*, %struct.SkStageRec* nocapture readonly dereferenceable(56), i1 zeroext) unnamed_addr #0 align 2 {
  br i1 %2, label %4, label %13

4:                                                ; preds = %3
  %5 = getelementptr inbounds %class.SkColorFilter_Matrix, %class.SkColorFilter_Matrix* %0, i64 0, i32 2
  %6 = load i8, i8* %5, align 4, !range !12
  %7 = icmp ne i8 %6, 0
  %8 = getelementptr inbounds %class.SkColorFilter_Matrix, %class.SkColorFilter_Matrix* %0, i64 0, i32 3
  %9 = load i8, i8* %8, align 1
  %10 = icmp eq i8 %9, 1
  %11 = getelementptr inbounds %struct.SkStageRec, %struct.SkStageRec* %1, i64 0, i32 0
  %12 = load %class.SkRasterPipeline*, %class.SkRasterPipeline** %11, align 8
  br i1 %10, label %19, label %24

13:                                               ; preds = %3
  %14 = getelementptr inbounds %class.SkColorFilter_Matrix, %class.SkColorFilter_Matrix* %0, i64 0, i32 3
  %15 = load i8, i8* %14, align 1
  %16 = icmp eq i8 %15, 1
  %17 = getelementptr inbounds %struct.SkStageRec, %struct.SkStageRec* %1, i64 0, i32 0
  %18 = load %class.SkRasterPipeline*, %class.SkRasterPipeline** %17, align 8
  tail call void @_ZN16SkRasterPipeline6appendENS_10StockStageEPv(%class.SkRasterPipeline* %18, i32 7, i8* null) #10
  br i1 %16, label %19, label %24

19:                                               ; preds = %4, %13
  %20 = phi i1 [ %7, %4 ], [ false, %13 ]
  %21 = phi %class.SkRasterPipeline* [ %12, %4 ], [ %18, %13 ]
  tail call void @_ZN16SkRasterPipeline6appendENS_10StockStageEPv(%class.SkRasterPipeline* %21, i32 182, i8* null) #10
  %22 = getelementptr inbounds %class.SkColorFilter_Matrix, %class.SkColorFilter_Matrix* %0, i64 0, i32 1, i64 0
  %23 = bitcast float* %22 to i8*
  tail call void @_ZN16SkRasterPipeline6appendENS_10StockStageEPv(%class.SkRasterPipeline* %21, i32 130, i8* %23) #10
  tail call void @_ZN16SkRasterPipeline6appendENS_10StockStageEPv(%class.SkRasterPipeline* %21, i32 183, i8* null) #10
  br label %29

24:                                               ; preds = %4, %13
  %25 = phi i1 [ %7, %4 ], [ false, %13 ]
  %26 = phi %class.SkRasterPipeline* [ %12, %4 ], [ %18, %13 ]
  %27 = getelementptr inbounds %class.SkColorFilter_Matrix, %class.SkColorFilter_Matrix* %0, i64 0, i32 1, i64 0
  %28 = bitcast float* %27 to i8*
  tail call void @_ZN16SkRasterPipeline6appendENS_10StockStageEPv(%class.SkRasterPipeline* %26, i32 130, i8* %28) #10
  br label %29

29:                                               ; preds = %24, %19
  %30 = phi i1 [ %25, %24 ], [ %20, %19 ]
  %31 = phi %class.SkRasterPipeline* [ %26, %24 ], [ %21, %19 ]
  tail call void @_ZN16SkRasterPipeline6appendENS_10StockStageEPv(%class.SkRasterPipeline* %31, i32 3, i8* null) #10
  tail call void @_ZN16SkRasterPipeline6appendENS_10StockStageEPv(%class.SkRasterPipeline* %31, i32 4, i8* null) #10
  br i1 %30, label %33, label %32

32:                                               ; preds = %29
  tail call void @_ZN16SkRasterPipeline6appendENS_10StockStageEPv(%class.SkRasterPipeline* %31, i32 8, i8* null) #10
  br label %33

33:                                               ; preds = %32, %29
  ret i1 true
}

declare void @_ZN16SkRasterPipeline6appendENS_10StockStageEPv(%class.SkRasterPipeline*, i32, i8*) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZNK20SkColorFilter_Matrix9onProgramEPN4skvm7BuilderENS0_5ColorEP12SkColorSpacePNS0_8UniformsEP12SkArenaAlloc(%"struct.skvm::Color"* noalias nocapture sret, %class.SkColorFilter_Matrix*, %"class.skvm::Builder"*, %"struct.skvm::Color"* nocapture byval(%"struct.skvm::Color") align 8, %class.SkColorSpace* nocapture readnone, %"struct.skvm::Uniforms"*, %class.SkArenaAlloc* nocapture readnone) unnamed_addr #0 align 2 {
  %8 = alloca %"struct.skvm::Color", align 8
  %9 = alloca %class.anon.131, align 8
  %10 = alloca %"struct.skvm::Color", align 8
  %11 = alloca %"struct.skvm::Color", align 8
  %12 = alloca %class.anon.125, align 8
  %13 = alloca %"struct.skvm::HSLA", align 8
  %14 = alloca %"struct.skvm::Color", align 8
  %15 = alloca %"class.skvm::Builder"*, align 8
  %16 = alloca %"struct.skvm::Uniforms"*, align 8
  %17 = alloca [64 x i8], align 8
  %18 = alloca %"struct.skvm::HSLA", align 8
  %19 = alloca %"struct.skvm::Color", align 8
  %20 = alloca %"struct.skvm::HSLA", align 8
  %21 = alloca %"struct.skvm::Color", align 8
  %22 = getelementptr inbounds [64 x i8], [64 x i8]* %17, i64 0, i64 0
  store %"class.skvm::Builder"* %2, %"class.skvm::Builder"** %15, align 8
  store %"struct.skvm::Uniforms"* %5, %"struct.skvm::Uniforms"** %16, align 8
  %23 = ptrtoint %"class.skvm::Builder"** %15 to i64
  %24 = ptrtoint %"struct.skvm::Uniforms"** %16 to i64
  %25 = ptrtoint %class.SkColorFilter_Matrix* %1 to i64
  call void @llvm.lifetime.start.p0i8(i64 64, i8* nonnull %22)
  %26 = bitcast %"struct.skvm::Color"* %3 to i8*
  %27 = getelementptr inbounds %"struct.skvm::Color", %"struct.skvm::Color"* %3, i64 0, i32 3, i32 0
  %28 = load %"class.skvm::Builder"*, %"class.skvm::Builder"** %27, align 8
  %29 = getelementptr inbounds %"struct.skvm::Color", %"struct.skvm::Color"* %3, i64 0, i32 3, i32 1
  %30 = bitcast i32* %29 to i64*
  %31 = load i64, i64* %30, align 8
  %32 = bitcast %"struct.skvm::Color"* %14 to i8*
  call void @llvm.lifetime.start.p0i8(i64 64, i8* nonnull %32) #10, !noalias !13
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %32, i8* nonnull align 8 %26, i64 48, i1 false)
  %33 = getelementptr inbounds %"struct.skvm::Color", %"struct.skvm::Color"* %14, i64 0, i32 3, i32 0
  store %"class.skvm::Builder"* %28, %"class.skvm::Builder"** %33, align 8, !noalias !13
  %34 = getelementptr inbounds %"struct.skvm::Color", %"struct.skvm::Color"* %14, i64 0, i32 3, i32 1
  %35 = bitcast i32* %34 to i64*
  store i64 %31, i64* %35, align 8
  %36 = getelementptr inbounds %"struct.skvm::Color", %"struct.skvm::Color"* %14, i64 0, i32 0
  %37 = getelementptr inbounds %"struct.skvm::Color", %"struct.skvm::Color"* %14, i64 0, i32 1
  %38 = getelementptr inbounds %"struct.skvm::Color", %"struct.skvm::Color"* %14, i64 0, i32 2
  %39 = trunc i64 %31 to i32
  call void @_ZN4skvm7Builder8unpremulEPNS_3F32ES2_S2_S1_(%"class.skvm::Builder"* %28, %"struct.skvm::F32"* nonnull %36, %"struct.skvm::F32"* %37, %"struct.skvm::F32"* %38, %"class.skvm::Builder"* %28, i32 %39) #10, !noalias !16
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %22, i8* nonnull align 8 %32, i64 64, i1 false) #10
  call void @llvm.lifetime.end.p0i8(i64 64, i8* nonnull %32) #10, !noalias !13
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %26, i8* nonnull align 8 %22, i64 64, i1 false)
  call void @llvm.lifetime.end.p0i8(i64 64, i8* nonnull %22)
  %40 = getelementptr inbounds %class.SkColorFilter_Matrix, %class.SkColorFilter_Matrix* %1, i64 0, i32 3
  %41 = load i8, i8* %40, align 1
  %42 = icmp eq i8 %41, 1
  br i1 %42, label %43, label %76

43:                                               ; preds = %7
  %44 = load %"class.skvm::Builder"*, %"class.skvm::Builder"** %15, align 8
  call void @_ZN4skvm7Builder7to_hslaENS_5ColorE(%"struct.skvm::HSLA"* nonnull sret %18, %"class.skvm::Builder"* %44, %"struct.skvm::Color"* nonnull byval(%"struct.skvm::Color") align 8 %3) #10
  %45 = bitcast %"struct.skvm::HSLA"* %13 to i8*
  call void @llvm.lifetime.start.p0i8(i64 64, i8* nonnull %45)
  %46 = bitcast %"struct.skvm::HSLA"* %18 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %45, i8* nonnull align 8 %46, i64 64, i1 false) #10
  %47 = bitcast %class.anon.125* %12 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %47) #10, !noalias !19
  %48 = getelementptr inbounds %class.anon.125, %class.anon.125* %12, i64 0, i32 1
  %49 = getelementptr inbounds %class.anon.125, %class.anon.125* %12, i64 0, i32 2
  %50 = getelementptr inbounds %class.anon.125, %class.anon.125* %12, i64 0, i32 3
  %51 = bitcast %class.anon.125* %12 to i64*
  store i64 %23, i64* %51, align 8, !noalias !19
  %52 = bitcast %"struct.skvm::Uniforms"*** %48 to i64*
  store i64 %24, i64* %52, align 8, !noalias !19
  %53 = bitcast %class.SkColorFilter_Matrix** %49 to i64*
  store i64 %25, i64* %53, align 8, !noalias !19
  store %"struct.skvm::HSLA"* %13, %"struct.skvm::HSLA"** %50, align 8, !noalias !19
  %54 = call fastcc { %"class.skvm::Builder"*, i32 } @"_ZZZNK20SkColorFilter_Matrix9onProgramEPN4skvm7BuilderENS0_5ColorEP12SkColorSpacePNS0_8UniformsEP12SkArenaAllocENK3$_0clINS0_4HSLAEEEDaT_ENKUliE_clEi"(%class.anon.125* nonnull %12, i32 0) #10, !noalias !19
  %55 = extractvalue { %"class.skvm::Builder"*, i32 } %54, 0
  %56 = extractvalue { %"class.skvm::Builder"*, i32 } %54, 1
  %57 = call fastcc { %"class.skvm::Builder"*, i32 } @"_ZZZNK20SkColorFilter_Matrix9onProgramEPN4skvm7BuilderENS0_5ColorEP12SkColorSpacePNS0_8UniformsEP12SkArenaAllocENK3$_0clINS0_4HSLAEEEDaT_ENKUliE_clEi"(%class.anon.125* nonnull %12, i32 1) #10, !noalias !19
  %58 = extractvalue { %"class.skvm::Builder"*, i32 } %57, 0
  %59 = extractvalue { %"class.skvm::Builder"*, i32 } %57, 1
  %60 = call fastcc { %"class.skvm::Builder"*, i32 } @"_ZZZNK20SkColorFilter_Matrix9onProgramEPN4skvm7BuilderENS0_5ColorEP12SkColorSpacePNS0_8UniformsEP12SkArenaAllocENK3$_0clINS0_4HSLAEEEDaT_ENKUliE_clEi"(%class.anon.125* nonnull %12, i32 2) #10, !noalias !19
  %61 = extractvalue { %"class.skvm::Builder"*, i32 } %60, 0
  %62 = extractvalue { %"class.skvm::Builder"*, i32 } %60, 1
  %63 = call fastcc { %"class.skvm::Builder"*, i32 } @"_ZZZNK20SkColorFilter_Matrix9onProgramEPN4skvm7BuilderENS0_5ColorEP12SkColorSpacePNS0_8UniformsEP12SkArenaAllocENK3$_0clINS0_4HSLAEEEDaT_ENKUliE_clEi"(%class.anon.125* nonnull %12, i32 3) #10, !noalias !19
  %64 = extractvalue { %"class.skvm::Builder"*, i32 } %63, 0
  %65 = extractvalue { %"class.skvm::Builder"*, i32 } %63, 1
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %47) #10, !noalias !19
  call void @llvm.lifetime.end.p0i8(i64 64, i8* nonnull %45)
  %66 = bitcast %"struct.skvm::Color"* %19 to i8*
  call void @llvm.lifetime.start.p0i8(i64 64, i8* nonnull %66) #10
  %67 = load %"class.skvm::Builder"*, %"class.skvm::Builder"** %15, align 8
  %68 = getelementptr inbounds %"struct.skvm::HSLA", %"struct.skvm::HSLA"* %20, i64 0, i32 0, i32 0
  store %"class.skvm::Builder"* %55, %"class.skvm::Builder"** %68, align 8
  %69 = getelementptr inbounds %"struct.skvm::HSLA", %"struct.skvm::HSLA"* %20, i64 0, i32 0, i32 1
  store i32 %56, i32* %69, align 8
  %70 = getelementptr inbounds %"struct.skvm::HSLA", %"struct.skvm::HSLA"* %20, i64 0, i32 1, i32 0
  store %"class.skvm::Builder"* %58, %"class.skvm::Builder"** %70, align 8
  %71 = getelementptr inbounds %"struct.skvm::HSLA", %"struct.skvm::HSLA"* %20, i64 0, i32 1, i32 1
  store i32 %59, i32* %71, align 8
  %72 = getelementptr inbounds %"struct.skvm::HSLA", %"struct.skvm::HSLA"* %20, i64 0, i32 2, i32 0
  store %"class.skvm::Builder"* %61, %"class.skvm::Builder"** %72, align 8
  %73 = getelementptr inbounds %"struct.skvm::HSLA", %"struct.skvm::HSLA"* %20, i64 0, i32 2, i32 1
  store i32 %62, i32* %73, align 8
  %74 = getelementptr inbounds %"struct.skvm::HSLA", %"struct.skvm::HSLA"* %20, i64 0, i32 3, i32 0
  store %"class.skvm::Builder"* %64, %"class.skvm::Builder"** %74, align 8
  %75 = getelementptr inbounds %"struct.skvm::HSLA", %"struct.skvm::HSLA"* %20, i64 0, i32 3, i32 1
  store i32 %65, i32* %75, align 8
  call void @_ZN4skvm7Builder7to_rgbaENS_4HSLAE(%"struct.skvm::Color"* nonnull sret %19, %"class.skvm::Builder"* %67, %"struct.skvm::HSLA"* nonnull byval(%"struct.skvm::HSLA") align 8 %20) #10
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %26, i8* nonnull align 8 %66, i64 64, i1 false)
  call void @llvm.lifetime.end.p0i8(i64 64, i8* nonnull %66) #10
  br label %103

76:                                               ; preds = %7
  %77 = bitcast %"struct.skvm::Color"* %10 to i8*
  call void @llvm.lifetime.start.p0i8(i64 64, i8* nonnull %77)
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %77, i8* nonnull align 8 %26, i64 64, i1 false)
  %78 = bitcast %class.anon.131* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %78) #10, !noalias !22
  %79 = getelementptr inbounds %class.anon.131, %class.anon.131* %9, i64 0, i32 1
  %80 = getelementptr inbounds %class.anon.131, %class.anon.131* %9, i64 0, i32 2
  %81 = getelementptr inbounds %class.anon.131, %class.anon.131* %9, i64 0, i32 3
  %82 = bitcast %class.anon.131* %9 to i64*
  store i64 %23, i64* %82, align 8, !noalias !22
  %83 = bitcast %"struct.skvm::Uniforms"*** %79 to i64*
  store i64 %24, i64* %83, align 8, !noalias !22
  %84 = bitcast %class.SkColorFilter_Matrix** %80 to i64*
  store i64 %25, i64* %84, align 8, !noalias !22
  store %"struct.skvm::Color"* %10, %"struct.skvm::Color"** %81, align 8, !noalias !22
  %85 = call fastcc { %"class.skvm::Builder"*, i32 } @"_ZZZNK20SkColorFilter_Matrix9onProgramEPN4skvm7BuilderENS0_5ColorEP12SkColorSpacePNS0_8UniformsEP12SkArenaAllocENK3$_0clIS3_EEDaT_ENKUliE_clEi"(%class.anon.131* nonnull %9, i32 0) #10, !noalias !22
  %86 = extractvalue { %"class.skvm::Builder"*, i32 } %85, 0
  %87 = extractvalue { %"class.skvm::Builder"*, i32 } %85, 1
  %88 = call fastcc { %"class.skvm::Builder"*, i32 } @"_ZZZNK20SkColorFilter_Matrix9onProgramEPN4skvm7BuilderENS0_5ColorEP12SkColorSpacePNS0_8UniformsEP12SkArenaAllocENK3$_0clIS3_EEDaT_ENKUliE_clEi"(%class.anon.131* nonnull %9, i32 1) #10, !noalias !22
  %89 = extractvalue { %"class.skvm::Builder"*, i32 } %88, 0
  %90 = extractvalue { %"class.skvm::Builder"*, i32 } %88, 1
  %91 = call fastcc { %"class.skvm::Builder"*, i32 } @"_ZZZNK20SkColorFilter_Matrix9onProgramEPN4skvm7BuilderENS0_5ColorEP12SkColorSpacePNS0_8UniformsEP12SkArenaAllocENK3$_0clIS3_EEDaT_ENKUliE_clEi"(%class.anon.131* nonnull %9, i32 2) #10, !noalias !22
  %92 = extractvalue { %"class.skvm::Builder"*, i32 } %91, 0
  %93 = extractvalue { %"class.skvm::Builder"*, i32 } %91, 1
  %94 = call fastcc { %"class.skvm::Builder"*, i32 } @"_ZZZNK20SkColorFilter_Matrix9onProgramEPN4skvm7BuilderENS0_5ColorEP12SkColorSpacePNS0_8UniformsEP12SkArenaAllocENK3$_0clIS3_EEDaT_ENKUliE_clEi"(%class.anon.131* nonnull %9, i32 3) #10, !noalias !22
  %95 = extractvalue { %"class.skvm::Builder"*, i32 } %94, 0
  %96 = extractvalue { %"class.skvm::Builder"*, i32 } %94, 1
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %78) #10, !noalias !22
  call void @llvm.lifetime.end.p0i8(i64 64, i8* nonnull %77)
  %97 = getelementptr inbounds %"struct.skvm::Color", %"struct.skvm::Color"* %3, i64 0, i32 0, i32 0
  store %"class.skvm::Builder"* %86, %"class.skvm::Builder"** %97, align 8
  %98 = getelementptr inbounds %"struct.skvm::Color", %"struct.skvm::Color"* %3, i64 0, i32 0, i32 1
  store i32 %87, i32* %98, align 8
  %99 = getelementptr inbounds %"struct.skvm::Color", %"struct.skvm::Color"* %3, i64 0, i32 1, i32 0
  store %"class.skvm::Builder"* %89, %"class.skvm::Builder"** %99, align 8
  %100 = getelementptr inbounds %"struct.skvm::Color", %"struct.skvm::Color"* %3, i64 0, i32 1, i32 1
  store i32 %90, i32* %100, align 8
  %101 = getelementptr inbounds %"struct.skvm::Color", %"struct.skvm::Color"* %3, i64 0, i32 2, i32 0
  store %"class.skvm::Builder"* %92, %"class.skvm::Builder"** %101, align 8
  %102 = getelementptr inbounds %"struct.skvm::Color", %"struct.skvm::Color"* %3, i64 0, i32 2, i32 1
  store i32 %93, i32* %102, align 8
  store %"class.skvm::Builder"* %95, %"class.skvm::Builder"** %27, align 8
  store i32 %96, i32* %29, align 8
  br label %103

103:                                              ; preds = %76, %43
  %104 = bitcast %"struct.skvm::Color"* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 64, i8* nonnull %104)
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %104, i8* nonnull align 8 %26, i64 64, i1 false)
  %105 = getelementptr inbounds %"struct.skvm::Color", %"struct.skvm::Color"* %8, i64 0, i32 3, i32 0
  %106 = load %"class.skvm::Builder"*, %"class.skvm::Builder"** %105, align 8, !noalias !25
  call void @_ZN4skvm7Builder7clamp01ENS_5ColorE(%"struct.skvm::Color"* nonnull sret %21, %"class.skvm::Builder"* %106, %"struct.skvm::Color"* nonnull byval(%"struct.skvm::Color") align 8 %3) #10
  call void @llvm.lifetime.end.p0i8(i64 64, i8* nonnull %104)
  %107 = bitcast %"struct.skvm::Color"* %21 to i8*
  %108 = getelementptr inbounds %"struct.skvm::Color", %"struct.skvm::Color"* %21, i64 0, i32 3, i32 0
  %109 = load %"class.skvm::Builder"*, %"class.skvm::Builder"** %108, align 8
  %110 = getelementptr inbounds %"struct.skvm::Color", %"struct.skvm::Color"* %21, i64 0, i32 3, i32 1
  %111 = bitcast i32* %110 to i64*
  %112 = load i64, i64* %111, align 8
  %113 = bitcast %"struct.skvm::Color"* %11 to i8*
  call void @llvm.lifetime.start.p0i8(i64 64, i8* nonnull %113) #10, !noalias !28
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %113, i8* nonnull align 8 %107, i64 48, i1 false)
  %114 = getelementptr inbounds %"struct.skvm::Color", %"struct.skvm::Color"* %11, i64 0, i32 3, i32 0
  store %"class.skvm::Builder"* %109, %"class.skvm::Builder"** %114, align 8, !noalias !28
  %115 = getelementptr inbounds %"struct.skvm::Color", %"struct.skvm::Color"* %11, i64 0, i32 3, i32 1
  %116 = bitcast i32* %115 to i64*
  store i64 %112, i64* %116, align 8
  %117 = getelementptr inbounds %"struct.skvm::Color", %"struct.skvm::Color"* %11, i64 0, i32 0
  %118 = getelementptr inbounds %"struct.skvm::Color", %"struct.skvm::Color"* %11, i64 0, i32 1
  %119 = getelementptr inbounds %"struct.skvm::Color", %"struct.skvm::Color"* %11, i64 0, i32 2
  %120 = trunc i64 %112 to i32
  call void @_ZN4skvm7Builder6premulEPNS_3F32ES2_S2_S1_(%"class.skvm::Builder"* %109, %"struct.skvm::F32"* nonnull %117, %"struct.skvm::F32"* %118, %"struct.skvm::F32"* %119, %"class.skvm::Builder"* %109, i32 %120) #10, !noalias !31
  %121 = bitcast %"struct.skvm::Color"* %0 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %121, i8* nonnull align 8 %113, i64 64, i1 false) #10
  call void @llvm.lifetime.end.p0i8(i64 64, i8* nonnull %113) #10, !noalias !28
  ret void
}

declare void @_ZN4skvm7Builder7to_hslaENS_5ColorE(%"struct.skvm::HSLA"* sret, %"class.skvm::Builder"*, %"struct.skvm::Color"* byval(%"struct.skvm::Color") align 8) local_unnamed_addr #2

declare void @_ZN4skvm7Builder7to_rgbaENS_4HSLAE(%"struct.skvm::Color"* sret, %"class.skvm::Builder"*, %"struct.skvm::HSLA"* byval(%"struct.skvm::HSLA") align 8) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden { i8, %class.GrFragmentProcessor* } @_ZNK20SkColorFilter_Matrix19asFragmentProcessorENSt3__110unique_ptrI19GrFragmentProcessorNS0_14default_deleteIS2_EEEEP18GrRecordingContextRK11GrColorInfo(%class.SkColorFilter_Matrix*, %class.GrFragmentProcessor*, %class.GrRecordingContext* nocapture readnone, %class.GrColorInfo* nocapture readnone) unnamed_addr #0 align 2 {
  %5 = ptrtoint %class.GrFragmentProcessor* %1 to i64
  %6 = getelementptr inbounds %class.SkColorFilter_Matrix, %class.SkColorFilter_Matrix* %0, i64 0, i32 3
  %7 = load i8, i8* %6, align 1
  switch i8 %7, label %68 [
    i8 0, label %8
    i8 1, label %12
  ]

8:                                                ; preds = %4
  %9 = getelementptr inbounds %class.SkColorFilter_Matrix, %class.SkColorFilter_Matrix* %0, i64 0, i32 1, i64 0
  %10 = tail call %class.GrFragmentProcessor* @_ZN30GrColorMatrixFragmentProcessor4MakeENSt3__110unique_ptrI19GrFragmentProcessorNS0_14default_deleteIS2_EEEEPKfbbb(%class.GrFragmentProcessor* %1, float* %9, i1 zeroext true, i1 zeroext true, i1 zeroext true)
  %11 = ptrtoint %class.GrFragmentProcessor* %10 to i64
  br label %68

12:                                               ; preds = %4
  %13 = tail call i8* @_ZN11GrProcessornwEm(i64 64) #10
  %14 = bitcast i8* %13 to %class.GrFragmentProcessor*
  %15 = icmp eq %class.GrFragmentProcessor* %1, null
  br i1 %15, label %20, label %16

16:                                               ; preds = %12
  %17 = getelementptr inbounds %class.GrFragmentProcessor, %class.GrFragmentProcessor* %1, i64 0, i32 3
  %18 = load i32, i32* %17, align 8
  %19 = and i32 %18, 6
  br label %20

20:                                               ; preds = %12, %16
  %21 = phi i32 [ %19, %16 ], [ 6, %12 ]
  %22 = bitcast i8* %13 to i32 (...)***
  %23 = getelementptr inbounds i8, i8* %13, i64 8
  %24 = bitcast i8* %23 to i32*
  store i32 72, i32* %24, align 8
  %25 = getelementptr inbounds i8, i8* %13, i64 12
  %26 = bitcast i8* %25 to i32*
  store i32 0, i32* %26, align 4
  %27 = getelementptr inbounds i8, i8* %13, i64 24
  %28 = getelementptr inbounds i8, i8* %13, i64 16
  %29 = getelementptr inbounds i8, i8* %13, i64 32
  %30 = bitcast i8* %29 to i64*
  %31 = bitcast i8* %27 to i8**
  store i8* %28, i8** %31, align 8
  store i64 8589934592, i64* %30, align 8
  %32 = getelementptr inbounds i8, i8* %13, i64 40
  %33 = bitcast i8* %32 to %class.GrFragmentProcessor**
  store %class.GrFragmentProcessor* null, %class.GrFragmentProcessor** %33, align 8
  %34 = getelementptr inbounds i8, i8* %13, i64 48
  %35 = bitcast i8* %34 to i32*
  store i32 %21, i32* %35, align 8
  %36 = getelementptr inbounds i8, i8* %13, i64 52
  %37 = bitcast i8* %36 to i32*
  store i32 0, i32* %37, align 4
  %38 = getelementptr inbounds i8, i8* %13, i64 56
  store i8 0, i8* %38, align 4
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [10 x i8*] }, { [10 x i8*] }* @_ZTV22GrRGBToHSLFilterEffect, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %22, align 8
  tail call void @_ZN19GrFragmentProcessor13registerChildENSt3__110unique_ptrIS_NS0_14default_deleteIS_EEEEN4SkSL11SampleUsageE(%class.GrFragmentProcessor* %14, %class.GrFragmentProcessor* %1, i64 1) #10
  %39 = getelementptr inbounds %class.SkColorFilter_Matrix, %class.SkColorFilter_Matrix* %0, i64 0, i32 1, i64 0
  %40 = tail call %class.GrFragmentProcessor* @_ZN30GrColorMatrixFragmentProcessor4MakeENSt3__110unique_ptrI19GrFragmentProcessorNS0_14default_deleteIS2_EEEEPKfbbb(%class.GrFragmentProcessor* %14, float* %39, i1 zeroext false, i1 zeroext false, i1 zeroext false)
  %41 = tail call i8* @_ZN11GrProcessornwEm(i64 64) #10
  %42 = bitcast i8* %41 to %class.GrFragmentProcessor*
  %43 = icmp eq %class.GrFragmentProcessor* %40, null
  br i1 %43, label %48, label %44

44:                                               ; preds = %20
  %45 = getelementptr inbounds %class.GrFragmentProcessor, %class.GrFragmentProcessor* %40, i64 0, i32 3
  %46 = load i32, i32* %45, align 8
  %47 = and i32 %46, 6
  br label %48

48:                                               ; preds = %20, %44
  %49 = phi i32 [ %47, %44 ], [ 6, %20 ]
  %50 = bitcast i8* %41 to i32 (...)***
  %51 = getelementptr inbounds i8, i8* %41, i64 8
  %52 = bitcast i8* %51 to i32*
  store i32 56, i32* %52, align 8
  %53 = getelementptr inbounds i8, i8* %41, i64 12
  %54 = bitcast i8* %53 to i32*
  store i32 0, i32* %54, align 4
  %55 = getelementptr inbounds i8, i8* %41, i64 24
  %56 = getelementptr inbounds i8, i8* %41, i64 16
  %57 = getelementptr inbounds i8, i8* %41, i64 32
  %58 = bitcast i8* %57 to i64*
  %59 = bitcast i8* %55 to i8**
  store i8* %56, i8** %59, align 8
  store i64 8589934592, i64* %58, align 8
  %60 = getelementptr inbounds i8, i8* %41, i64 40
  %61 = bitcast i8* %60 to %class.GrFragmentProcessor**
  store %class.GrFragmentProcessor* null, %class.GrFragmentProcessor** %61, align 8
  %62 = getelementptr inbounds i8, i8* %41, i64 48
  %63 = bitcast i8* %62 to i32*
  store i32 %49, i32* %63, align 8
  %64 = getelementptr inbounds i8, i8* %41, i64 52
  %65 = bitcast i8* %64 to i32*
  store i32 0, i32* %65, align 4
  %66 = getelementptr inbounds i8, i8* %41, i64 56
  store i8 0, i8* %66, align 4
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [10 x i8*] }, { [10 x i8*] }* @_ZTV22GrHSLToRGBFilterEffect, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %50, align 8
  tail call void @_ZN19GrFragmentProcessor13registerChildENSt3__110unique_ptrIS_NS0_14default_deleteIS_EEEEN4SkSL11SampleUsageE(%class.GrFragmentProcessor* %42, %class.GrFragmentProcessor* %40, i64 1) #10
  %67 = ptrtoint i8* %41 to i64
  br label %68

68:                                               ; preds = %8, %48, %4
  %69 = phi i64 [ %5, %4 ], [ %67, %48 ], [ %11, %8 ]
  %70 = inttoptr i64 %69 to %class.GrFragmentProcessor*
  %71 = insertvalue { i8, %class.GrFragmentProcessor* } { i8 1, %class.GrFragmentProcessor* undef }, %class.GrFragmentProcessor* %70, 1
  ret { i8, %class.GrFragmentProcessor* } %71
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden %class.GrFragmentProcessor* @_ZN30GrColorMatrixFragmentProcessor4MakeENSt3__110unique_ptrI19GrFragmentProcessorNS0_14default_deleteIS2_EEEEPKfbbb(%class.GrFragmentProcessor*, float*, i1 zeroext, i1 zeroext, i1 zeroext) local_unnamed_addr #3 comdat align 2 {
  %6 = bitcast float* %1 to i32*
  %7 = load i32, i32* %6, align 4
  %8 = getelementptr inbounds float, float* %1, i64 1
  %9 = bitcast float* %8 to i32*
  %10 = load i32, i32* %9, align 4
  %11 = getelementptr inbounds float, float* %1, i64 2
  %12 = bitcast float* %11 to i32*
  %13 = load i32, i32* %12, align 4
  %14 = getelementptr inbounds float, float* %1, i64 3
  %15 = bitcast float* %14 to i32*
  %16 = load i32, i32* %15, align 4
  %17 = getelementptr inbounds float, float* %1, i64 5
  %18 = bitcast float* %17 to i32*
  %19 = load i32, i32* %18, align 4
  %20 = getelementptr inbounds float, float* %1, i64 6
  %21 = bitcast float* %20 to i32*
  %22 = load i32, i32* %21, align 4
  %23 = getelementptr inbounds float, float* %1, i64 7
  %24 = bitcast float* %23 to i32*
  %25 = load i32, i32* %24, align 4
  %26 = getelementptr inbounds float, float* %1, i64 8
  %27 = bitcast float* %26 to i32*
  %28 = load i32, i32* %27, align 4
  %29 = getelementptr inbounds float, float* %1, i64 10
  %30 = bitcast float* %29 to i32*
  %31 = load i32, i32* %30, align 4
  %32 = getelementptr inbounds float, float* %1, i64 11
  %33 = bitcast float* %32 to i32*
  %34 = load i32, i32* %33, align 4
  %35 = getelementptr inbounds float, float* %1, i64 12
  %36 = bitcast float* %35 to i32*
  %37 = load i32, i32* %36, align 4
  %38 = getelementptr inbounds float, float* %1, i64 13
  %39 = bitcast float* %38 to i32*
  %40 = load i32, i32* %39, align 4
  %41 = getelementptr inbounds float, float* %1, i64 15
  %42 = bitcast float* %41 to i32*
  %43 = load i32, i32* %42, align 4
  %44 = getelementptr inbounds float, float* %1, i64 16
  %45 = bitcast float* %44 to i32*
  %46 = load i32, i32* %45, align 4
  %47 = getelementptr inbounds float, float* %1, i64 17
  %48 = bitcast float* %47 to i32*
  %49 = load i32, i32* %48, align 4
  %50 = getelementptr inbounds float, float* %1, i64 18
  %51 = bitcast float* %50 to i32*
  %52 = load i32, i32* %51, align 4
  %53 = getelementptr inbounds float, float* %1, i64 4
  %54 = load float, float* %53, align 4
  %55 = insertelement <2 x float> undef, float %54, i32 0
  %56 = getelementptr inbounds float, float* %1, i64 9
  %57 = load float, float* %56, align 4
  %58 = insertelement <2 x float> %55, float %57, i32 1
  %59 = getelementptr inbounds float, float* %1, i64 14
  %60 = load float, float* %59, align 4
  %61 = insertelement <2 x float> undef, float %60, i32 0
  %62 = getelementptr inbounds float, float* %1, i64 19
  %63 = load float, float* %62, align 4
  %64 = insertelement <2 x float> %61, float %63, i32 1
  %65 = tail call i8* @_ZN11GrProcessornwEm(i64 144) #10
  %66 = zext i1 %2 to i8
  %67 = zext i1 %3 to i8
  %68 = zext i1 %4 to i8
  %69 = bitcast i8* %65 to %class.GrFragmentProcessor*
  %70 = icmp eq %class.GrFragmentProcessor* %0, null
  br i1 %70, label %75, label %71

71:                                               ; preds = %5
  %72 = getelementptr inbounds %class.GrFragmentProcessor, %class.GrFragmentProcessor* %0, i64 0, i32 3
  %73 = load i32, i32* %72, align 8
  %74 = and i32 %73, 4
  br label %75

75:                                               ; preds = %71, %5
  %76 = phi i32 [ %74, %71 ], [ 4, %5 ]
  %77 = bitcast i8* %65 to i32 (...)***
  %78 = getelementptr inbounds i8, i8* %65, i64 8
  %79 = bitcast i8* %78 to i32*
  store i32 32, i32* %79, align 8
  %80 = getelementptr inbounds i8, i8* %65, i64 12
  %81 = bitcast i8* %80 to i32*
  store i32 0, i32* %81, align 4
  %82 = getelementptr inbounds i8, i8* %65, i64 24
  %83 = getelementptr inbounds i8, i8* %65, i64 16
  %84 = getelementptr inbounds i8, i8* %65, i64 32
  %85 = bitcast i8* %84 to i64*
  %86 = bitcast i8* %82 to i8**
  store i8* %83, i8** %86, align 8
  store i64 8589934592, i64* %85, align 8
  %87 = getelementptr inbounds i8, i8* %65, i64 40
  %88 = bitcast i8* %87 to %class.GrFragmentProcessor**
  store %class.GrFragmentProcessor* null, %class.GrFragmentProcessor** %88, align 8
  %89 = getelementptr inbounds i8, i8* %65, i64 48
  %90 = bitcast i8* %89 to i32*
  store i32 %76, i32* %90, align 8
  %91 = getelementptr inbounds i8, i8* %65, i64 52
  %92 = bitcast i8* %91 to i32*
  store i32 0, i32* %92, align 4
  %93 = getelementptr inbounds i8, i8* %65, i64 56
  store i8 0, i8* %93, align 4
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [10 x i8*] }, { [10 x i8*] }* @_ZTV30GrColorMatrixFragmentProcessor, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %77, align 8
  %94 = getelementptr inbounds i8, i8* %65, i64 60
  %95 = bitcast i8* %94 to i32*
  store i32 %7, i32* %95, align 4
  %96 = getelementptr inbounds i8, i8* %65, i64 64
  %97 = bitcast i8* %96 to i32*
  store i32 %19, i32* %97, align 4
  %98 = getelementptr inbounds i8, i8* %65, i64 68
  %99 = bitcast i8* %98 to i32*
  store i32 %31, i32* %99, align 4
  %100 = getelementptr inbounds i8, i8* %65, i64 72
  %101 = bitcast i8* %100 to i32*
  store i32 %43, i32* %101, align 4
  %102 = getelementptr inbounds i8, i8* %65, i64 76
  %103 = bitcast i8* %102 to i32*
  store i32 %10, i32* %103, align 4
  %104 = getelementptr inbounds i8, i8* %65, i64 80
  %105 = bitcast i8* %104 to i32*
  store i32 %22, i32* %105, align 4
  %106 = getelementptr inbounds i8, i8* %65, i64 84
  %107 = bitcast i8* %106 to i32*
  store i32 %34, i32* %107, align 4
  %108 = getelementptr inbounds i8, i8* %65, i64 88
  %109 = bitcast i8* %108 to i32*
  store i32 %46, i32* %109, align 4
  %110 = getelementptr inbounds i8, i8* %65, i64 92
  %111 = bitcast i8* %110 to i32*
  store i32 %13, i32* %111, align 4
  %112 = getelementptr inbounds i8, i8* %65, i64 96
  %113 = bitcast i8* %112 to i32*
  store i32 %25, i32* %113, align 4
  %114 = getelementptr inbounds i8, i8* %65, i64 100
  %115 = bitcast i8* %114 to i32*
  store i32 %37, i32* %115, align 4
  %116 = getelementptr inbounds i8, i8* %65, i64 104
  %117 = bitcast i8* %116 to i32*
  store i32 %49, i32* %117, align 4
  %118 = getelementptr inbounds i8, i8* %65, i64 108
  %119 = bitcast i8* %118 to i32*
  store i32 %16, i32* %119, align 4
  %120 = getelementptr inbounds i8, i8* %65, i64 112
  %121 = bitcast i8* %120 to i32*
  store i32 %28, i32* %121, align 4
  %122 = getelementptr inbounds i8, i8* %65, i64 116
  %123 = bitcast i8* %122 to i32*
  store i32 %40, i32* %123, align 4
  %124 = getelementptr inbounds i8, i8* %65, i64 120
  %125 = bitcast i8* %124 to i32*
  store i32 %52, i32* %125, align 4
  %126 = getelementptr inbounds i8, i8* %65, i64 124
  %127 = bitcast i8* %126 to <2 x float>*
  store <2 x float> %58, <2 x float>* %127, align 4
  %128 = getelementptr inbounds i8, i8* %65, i64 132
  %129 = bitcast i8* %128 to <2 x float>*
  store <2 x float> %64, <2 x float>* %129, align 4
  %130 = getelementptr inbounds i8, i8* %65, i64 140
  store i8 %66, i8* %130, align 4
  %131 = getelementptr inbounds i8, i8* %65, i64 141
  store i8 %67, i8* %131, align 1
  %132 = getelementptr inbounds i8, i8* %65, i64 142
  store i8 %68, i8* %132, align 2
  tail call void @_ZN19GrFragmentProcessor13registerChildENSt3__110unique_ptrIS_NS0_14default_deleteIS_EEEEN4SkSL11SampleUsageE(%class.GrFragmentProcessor* %69, %class.GrFragmentProcessor* %0, i64 1) #10
  ret %class.GrFragmentProcessor* %69
}

; Function Attrs: nounwind ssp uwtable
define internal fastcc void @_ZL10MakeMatrixPKfN20SkColorFilter_Matrix6DomainE(%class.sk_sp.17* noalias nocapture sret, float*, i8 zeroext) unnamed_addr #0 {
  %4 = load float, float* %1, align 4
  %5 = fmul float %4, 0.000000e+00
  %6 = getelementptr inbounds float, float* %1, i64 1
  %7 = load float, float* %6, align 4
  %8 = fmul float %5, %7
  %9 = getelementptr inbounds float, float* %1, i64 2
  %10 = load float, float* %9, align 4
  %11 = fmul float %8, %10
  %12 = getelementptr inbounds float, float* %1, i64 3
  %13 = load float, float* %12, align 4
  %14 = fmul float %11, %13
  %15 = getelementptr inbounds float, float* %1, i64 4
  %16 = load float, float* %15, align 4
  %17 = fmul float %14, %16
  %18 = getelementptr inbounds float, float* %1, i64 5
  %19 = load float, float* %18, align 4
  %20 = fmul float %17, %19
  %21 = getelementptr inbounds float, float* %1, i64 6
  %22 = load float, float* %21, align 4
  %23 = fmul float %20, %22
  %24 = getelementptr inbounds float, float* %1, i64 7
  %25 = load float, float* %24, align 4
  %26 = fmul float %23, %25
  %27 = getelementptr inbounds float, float* %1, i64 8
  %28 = load float, float* %27, align 4
  %29 = fmul float %26, %28
  %30 = getelementptr inbounds float, float* %1, i64 9
  %31 = load float, float* %30, align 4
  %32 = fmul float %29, %31
  %33 = getelementptr inbounds float, float* %1, i64 10
  %34 = load float, float* %33, align 4
  %35 = fmul float %32, %34
  %36 = getelementptr inbounds float, float* %1, i64 11
  %37 = load float, float* %36, align 4
  %38 = fmul float %35, %37
  %39 = getelementptr inbounds float, float* %1, i64 12
  %40 = load float, float* %39, align 4
  %41 = fmul float %38, %40
  %42 = getelementptr inbounds float, float* %1, i64 13
  %43 = load float, float* %42, align 4
  %44 = fmul float %41, %43
  %45 = getelementptr inbounds float, float* %1, i64 14
  %46 = load float, float* %45, align 4
  %47 = fmul float %44, %46
  %48 = getelementptr inbounds float, float* %1, i64 15
  %49 = load float, float* %48, align 4
  %50 = fmul float %47, %49
  %51 = getelementptr inbounds float, float* %1, i64 16
  %52 = load float, float* %51, align 4
  %53 = fmul float %50, %52
  %54 = getelementptr inbounds float, float* %1, i64 17
  %55 = load float, float* %54, align 4
  %56 = fmul float %53, %55
  %57 = getelementptr inbounds float, float* %1, i64 18
  %58 = load float, float* %57, align 4
  %59 = fmul float %56, %58
  %60 = getelementptr inbounds float, float* %1, i64 19
  %61 = load float, float* %60, align 4
  %62 = fmul float %59, %61
  %63 = fcmp oeq float %62, 0.000000e+00
  br i1 %63, label %66, label %64

64:                                               ; preds = %3
  %65 = getelementptr inbounds %class.sk_sp.17, %class.sk_sp.17* %0, i64 0, i32 0
  store %class.SkColorFilter* null, %class.SkColorFilter** %65, align 8
  br label %95

66:                                               ; preds = %3
  %67 = tail call i8* @_Znwm(i64 96) #11, !noalias !34
  %68 = getelementptr inbounds i8, i8* %67, i64 8
  %69 = bitcast i8* %68 to i32*
  store i32 1, i32* %69, align 4, !noalias !34
  %70 = bitcast i8* %67 to i32 (...)***
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [16 x i8*] }, { [16 x i8*] }* @_ZTV20SkColorFilter_Matrix, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %70, align 8, !noalias !34
  %71 = getelementptr inbounds i8, i8* %67, i64 92
  %72 = tail call float @llvm.fabs.f32(float %49) #10
  %73 = fcmp ugt float %72, 0x3F30000000000000
  %74 = tail call float @llvm.fabs.f32(float %52) #10
  %75 = fcmp ugt float %74, 0x3F30000000000000
  %76 = or i1 %73, %75
  %77 = tail call float @llvm.fabs.f32(float %55) #10
  %78 = fcmp ugt float %77, 0x3F30000000000000
  %79 = or i1 %76, %78
  br i1 %79, label %88, label %80

80:                                               ; preds = %66
  %81 = fadd float %58, -1.000000e+00
  %82 = tail call float @llvm.fabs.f32(float %81) #10
  %83 = fcmp ugt float %82, 0x3F30000000000000
  br i1 %83, label %88, label %84

84:                                               ; preds = %80
  %85 = tail call float @llvm.fabs.f32(float %61) #10
  %86 = fcmp ole float %85, 0x3F30000000000000
  %87 = zext i1 %86 to i8
  br label %88

88:                                               ; preds = %84, %80, %66
  %89 = phi i8 [ 0, %80 ], [ 0, %66 ], [ %87, %84 ]
  store i8 %89, i8* %71, align 4, !noalias !34
  %90 = getelementptr inbounds i8, i8* %67, i64 93
  store i8 %2, i8* %90, align 1, !noalias !34
  %91 = getelementptr inbounds i8, i8* %67, i64 12
  %92 = bitcast float* %1 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %91, i8* align 4 %92, i64 80, i1 false) #10, !noalias !34
  %93 = ptrtoint i8* %67 to i64
  %94 = bitcast %class.sk_sp.17* %0 to i64*
  store i64 %93, i64* %94, align 8
  br label %95

95:                                               ; preds = %88, %64
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN14SkColorFilters6MatrixERK13SkColorMatrix(%class.sk_sp.17* noalias nocapture sret, %class.SkColorMatrix* dereferenceable(80)) local_unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %class.SkColorMatrix, %class.SkColorMatrix* %1, i64 0, i32 0, i32 0, i64 0
  tail call fastcc void @_ZL10MakeMatrixPKfN20SkColorFilter_Matrix6DomainE(%class.sk_sp.17* sret %0, float* %3, i8 zeroext 0)
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN14SkColorFilters10HSLAMatrixERK13SkColorMatrix(%class.sk_sp.17* noalias nocapture sret, %class.SkColorMatrix* dereferenceable(80)) local_unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %class.SkColorMatrix, %class.SkColorMatrix* %1, i64 0, i32 0, i32 0, i64 0
  tail call fastcc void @_ZL10MakeMatrixPKfN20SkColorFilter_Matrix6DomainE(%class.sk_sp.17* sret %0, float* %3, i8 zeroext 1)
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN20SkColorFilter_Matrix20RegisterFlattenablesEv() local_unnamed_addr #0 align 2 {
  tail call void @_ZN13SkFlattenable8RegisterEPKcPF5sk_spIS_ER12SkReadBufferE(i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str, i64 0, i64 0), void (%class.sk_sp.16*, %class.SkReadBuffer*)* nonnull @_ZN20SkColorFilter_Matrix10CreateProcER12SkReadBuffer) #10
  tail call void @_ZN13SkFlattenable8RegisterEPKcPF5sk_spIS_ER12SkReadBufferE(i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str.1, i64 0, i64 0), void (%class.sk_sp.16*, %class.SkReadBuffer*)* nonnull @"_ZZN20SkColorFilter_Matrix20RegisterFlattenablesEvEN3$_18__invokeER12SkReadBuffer") #10
  ret void
}

declare void @_ZN13SkFlattenable8RegisterEPKcPF5sk_spIS_ER12SkReadBufferE(i8*, void (%class.sk_sp.16*, %class.SkReadBuffer*)*) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN12SkRefCntBaseD2Ev(%class.SkRefCntBase*) unnamed_addr #0 comdat align 2 {
  ret void
}

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZN20SkColorFilter_MatrixD0Ev(%class.SkColorFilter_Matrix*) unnamed_addr #4 comdat align 2 {
  %2 = bitcast %class.SkColorFilter_Matrix* %0 to i8*
  tail call void @_ZdlPv(i8* %2) #11
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNK12SkRefCntBase16internal_disposeEv(%class.SkRefCntBase*) unnamed_addr #0 comdat align 2 {
  %2 = icmp eq %class.SkRefCntBase* %0, null
  br i1 %2, label %8, label %3

3:                                                ; preds = %1
  %4 = bitcast %class.SkRefCntBase* %0 to void (%class.SkRefCntBase*)***
  %5 = load void (%class.SkRefCntBase*)**, void (%class.SkRefCntBase*)*** %4, align 8
  %6 = getelementptr inbounds void (%class.SkRefCntBase*)*, void (%class.SkRefCntBase*)** %5, i64 1
  %7 = load void (%class.SkRefCntBase*)*, void (%class.SkRefCntBase*)** %6, align 8
  tail call void %7(%class.SkRefCntBase* nonnull %0) #10
  br label %8

8:                                                ; preds = %3, %1
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void (%class.sk_sp.16*, %class.SkReadBuffer*)* @_ZNK20SkColorFilter_Matrix10getFactoryEv(%class.SkColorFilter_Matrix*) unnamed_addr #0 comdat align 2 {
  ret void (%class.sk_sp.16*, %class.SkReadBuffer*)* @_ZN20SkColorFilter_Matrix10CreateProcER12SkReadBuffer
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i8* @_ZNK20SkColorFilter_Matrix11getTypeNameEv(%class.SkColorFilter_Matrix*) unnamed_addr #0 comdat align 2 {
  ret i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str, i64 0, i64 0)
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i32 @_ZNK17SkColorFilterBase18getFlattenableTypeEv(%class.SkColorFilterBase*) unnamed_addr #0 comdat align 2 {
  ret i32 0
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZNK20SkColorFilter_Matrix18onIsAlphaUnchangedEv(%class.SkColorFilter_Matrix*) unnamed_addr #0 comdat align 2 {
  %2 = getelementptr inbounds %class.SkColorFilter_Matrix, %class.SkColorFilter_Matrix* %0, i64 0, i32 2
  %3 = load i8, i8* %2, align 4, !range !12
  %4 = icmp ne i8 %3, 0
  ret i1 %4
}

declare { <2 x float>, <2 x float> } @_ZNK17SkColorFilterBase15onFilterColor4fERK8SkRGBA4fIL11SkAlphaType2EEP12SkColorSpace(%class.SkColorFilterBase*, %struct.SkRGBA4f.111* dereferenceable(16), %class.SkColorSpace*) unnamed_addr #2

declare zeroext i1 @_ZNK17SkColorFilterBase14onAsAColorModeEPjP11SkBlendMode(%class.SkColorFilterBase*, i32*, i32*) unnamed_addr #2

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #5

; Function Attrs: nounwind readnone speculatable
declare float @llvm.fabs.f32(float) #6

declare void @_ZN4skvm7Builder8unpremulEPNS_3F32ES2_S2_S1_(%"class.skvm::Builder"*, %"struct.skvm::F32"*, %"struct.skvm::F32"*, %"struct.skvm::F32"*, %"class.skvm::Builder"*, i32) local_unnamed_addr #2

; Function Attrs: inlinehint nounwind ssp uwtable
define internal fastcc { %"class.skvm::Builder"*, i32 } @"_ZZZNK20SkColorFilter_Matrix9onProgramEPN4skvm7BuilderENS0_5ColorEP12SkColorSpacePNS0_8UniformsEP12SkArenaAllocENK3$_0clINS0_4HSLAEEEDaT_ENKUliE_clEi"(%class.anon.125* nocapture readonly, i32) unnamed_addr #4 align 2 {
  %3 = alloca %class.anon.128, align 8
  %4 = getelementptr inbounds %class.anon.125, %class.anon.125* %0, i64 0, i32 2
  %5 = load %class.SkColorFilter_Matrix*, %class.SkColorFilter_Matrix** %4, align 8
  %6 = bitcast %class.anon.128* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %6) #10
  %7 = getelementptr inbounds %class.anon.128, %class.anon.128* %3, i64 0, i32 1
  %8 = bitcast %class.anon.125* %0 to i64*
  %9 = load i64, i64* %8, align 8
  %10 = bitcast %class.anon.128* %3 to i64*
  store i64 %9, i64* %10, align 8
  %11 = getelementptr inbounds %class.anon.125, %class.anon.125* %0, i64 0, i32 1
  %12 = bitcast %"struct.skvm::Uniforms"*** %11 to i64*
  %13 = load i64, i64* %12, align 8
  %14 = bitcast %"struct.skvm::Uniforms"*** %7 to i64*
  store i64 %13, i64* %14, align 8
  %15 = mul nsw i32 %1, 5
  %16 = add nsw i32 %15, 4
  %17 = sext i32 %16 to i64
  %18 = getelementptr inbounds %class.SkColorFilter_Matrix, %class.SkColorFilter_Matrix* %5, i64 0, i32 1, i64 %17
  %19 = load float, float* %18, align 4
  %20 = fcmp oeq float %19, 0.000000e+00
  %21 = inttoptr i64 %9 to %"class.skvm::Builder"**
  %22 = load %"class.skvm::Builder"*, %"class.skvm::Builder"** %21, align 8
  br i1 %20, label %23, label %25

23:                                               ; preds = %2
  %24 = tail call { %"class.skvm::Builder"*, i32 } @_ZN4skvm7Builder5splatEi(%"class.skvm::Builder"* %22, i32 0) #10
  br label %33

25:                                               ; preds = %2
  %26 = inttoptr i64 %13 to %"struct.skvm::Uniforms"**
  %27 = load %"struct.skvm::Uniforms"*, %"struct.skvm::Uniforms"** %26, align 8
  %28 = tail call i64 @_ZN4skvm8Uniforms5pushFEf(%"struct.skvm::Uniforms"* %27, float %19)
  %29 = trunc i64 %28 to i32
  %30 = lshr i64 %28, 32
  %31 = trunc i64 %30 to i32
  %32 = tail call { %"class.skvm::Builder"*, i32 } @_ZN4skvm7Builder9uniform32ENS_3PtrEi(%"class.skvm::Builder"* %22, i32 %29, i32 %31) #10
  br label %33

33:                                               ; preds = %25, %23
  %34 = phi { %"class.skvm::Builder"*, i32 } [ %32, %25 ], [ %24, %23 ]
  %35 = extractvalue { %"class.skvm::Builder"*, i32 } %34, 0
  %36 = extractvalue { %"class.skvm::Builder"*, i32 } %34, 1
  %37 = getelementptr inbounds %class.anon.125, %class.anon.125* %0, i64 0, i32 3
  %38 = load %"struct.skvm::HSLA"*, %"struct.skvm::HSLA"** %37, align 8
  %39 = getelementptr inbounds %"struct.skvm::HSLA", %"struct.skvm::HSLA"* %38, i64 0, i32 0, i32 0
  %40 = load %"class.skvm::Builder"*, %"class.skvm::Builder"** %39, align 8
  %41 = getelementptr inbounds %"struct.skvm::HSLA", %"struct.skvm::HSLA"* %38, i64 0, i32 0, i32 1
  %42 = load i32, i32* %41, align 8
  %43 = getelementptr inbounds %"struct.skvm::HSLA", %"struct.skvm::HSLA"* %38, i64 0, i32 1, i32 0
  %44 = load %"class.skvm::Builder"*, %"class.skvm::Builder"** %43, align 8
  %45 = getelementptr inbounds %"struct.skvm::HSLA", %"struct.skvm::HSLA"* %38, i64 0, i32 1, i32 1
  %46 = load i32, i32* %45, align 8
  %47 = getelementptr inbounds %"struct.skvm::HSLA", %"struct.skvm::HSLA"* %38, i64 0, i32 2, i32 0
  %48 = load %"class.skvm::Builder"*, %"class.skvm::Builder"** %47, align 8
  %49 = getelementptr inbounds %"struct.skvm::HSLA", %"struct.skvm::HSLA"* %38, i64 0, i32 2, i32 1
  %50 = load i32, i32* %49, align 8
  %51 = getelementptr inbounds %"struct.skvm::HSLA", %"struct.skvm::HSLA"* %38, i64 0, i32 3, i32 0
  %52 = load %"class.skvm::Builder"*, %"class.skvm::Builder"** %51, align 8
  %53 = getelementptr inbounds %"struct.skvm::HSLA", %"struct.skvm::HSLA"* %38, i64 0, i32 3, i32 1
  %54 = load i32, i32* %53, align 8
  %55 = sext i32 %15 to i64
  %56 = getelementptr inbounds %class.SkColorFilter_Matrix, %class.SkColorFilter_Matrix* %5, i64 0, i32 1, i64 %55
  %57 = load float, float* %56, align 4
  %58 = add nsw i32 %15, 1
  %59 = sext i32 %58 to i64
  %60 = getelementptr inbounds %class.SkColorFilter_Matrix, %class.SkColorFilter_Matrix* %5, i64 0, i32 1, i64 %59
  %61 = load float, float* %60, align 4
  %62 = add nsw i32 %15, 2
  %63 = sext i32 %62 to i64
  %64 = getelementptr inbounds %class.SkColorFilter_Matrix, %class.SkColorFilter_Matrix* %5, i64 0, i32 1, i64 %63
  %65 = load float, float* %64, align 4
  %66 = add nsw i32 %15, 3
  %67 = sext i32 %66 to i64
  %68 = getelementptr inbounds %class.SkColorFilter_Matrix, %class.SkColorFilter_Matrix* %5, i64 0, i32 1, i64 %67
  %69 = load float, float* %68, align 4
  %70 = call fastcc { %"class.skvm::Builder"*, i32 } @"_ZZZZNK20SkColorFilter_Matrix9onProgramEPN4skvm7BuilderENS0_5ColorEP12SkColorSpacePNS0_8UniformsEP12SkArenaAllocENK3$_0clINS0_4HSLAEEEDaT_ENKUliE_clEiENKUlfNS0_3F32ESF_E_clEfSF_SF_"(%class.anon.128* nonnull %3, float %69, %"class.skvm::Builder"* %52, i32 %54, %"class.skvm::Builder"* %35, i32 %36)
  %71 = extractvalue { %"class.skvm::Builder"*, i32 } %70, 0
  %72 = extractvalue { %"class.skvm::Builder"*, i32 } %70, 1
  %73 = call fastcc { %"class.skvm::Builder"*, i32 } @"_ZZZZNK20SkColorFilter_Matrix9onProgramEPN4skvm7BuilderENS0_5ColorEP12SkColorSpacePNS0_8UniformsEP12SkArenaAllocENK3$_0clINS0_4HSLAEEEDaT_ENKUliE_clEiENKUlfNS0_3F32ESF_E_clEfSF_SF_"(%class.anon.128* nonnull %3, float %65, %"class.skvm::Builder"* %48, i32 %50, %"class.skvm::Builder"* %71, i32 %72)
  %74 = extractvalue { %"class.skvm::Builder"*, i32 } %73, 0
  %75 = extractvalue { %"class.skvm::Builder"*, i32 } %73, 1
  %76 = call fastcc { %"class.skvm::Builder"*, i32 } @"_ZZZZNK20SkColorFilter_Matrix9onProgramEPN4skvm7BuilderENS0_5ColorEP12SkColorSpacePNS0_8UniformsEP12SkArenaAllocENK3$_0clINS0_4HSLAEEEDaT_ENKUliE_clEiENKUlfNS0_3F32ESF_E_clEfSF_SF_"(%class.anon.128* nonnull %3, float %61, %"class.skvm::Builder"* %44, i32 %46, %"class.skvm::Builder"* %74, i32 %75)
  %77 = extractvalue { %"class.skvm::Builder"*, i32 } %76, 0
  %78 = extractvalue { %"class.skvm::Builder"*, i32 } %76, 1
  %79 = call fastcc { %"class.skvm::Builder"*, i32 } @"_ZZZZNK20SkColorFilter_Matrix9onProgramEPN4skvm7BuilderENS0_5ColorEP12SkColorSpacePNS0_8UniformsEP12SkArenaAllocENK3$_0clINS0_4HSLAEEEDaT_ENKUliE_clEiENKUlfNS0_3F32ESF_E_clEfSF_SF_"(%class.anon.128* nonnull %3, float %57, %"class.skvm::Builder"* %40, i32 %42, %"class.skvm::Builder"* %77, i32 %78)
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %6) #10
  ret { %"class.skvm::Builder"*, i32 } %79
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i64 @_ZN4skvm8Uniforms5pushFEf(%"struct.skvm::Uniforms"*, float) local_unnamed_addr #0 comdat align 2 {
  %3 = getelementptr inbounds %"struct.skvm::Uniforms", %"struct.skvm::Uniforms"* %0, i64 0, i32 1
  %4 = getelementptr inbounds %"struct.skvm::Uniforms", %"struct.skvm::Uniforms"* %0, i64 0, i32 1, i32 0, i32 1
  %5 = load i32*, i32** %4, align 8
  %6 = getelementptr inbounds %"struct.skvm::Uniforms", %"struct.skvm::Uniforms"* %0, i64 0, i32 1, i32 0, i32 2, i32 0, i32 0
  %7 = load i32*, i32** %6, align 8
  %8 = icmp eq i32* %5, %7
  %9 = ptrtoint i32* %7 to i64
  br i1 %8, label %16, label %10

10:                                               ; preds = %2
  %11 = bitcast i32* %5 to float*
  store float %1, float* %11, align 4
  %12 = getelementptr inbounds i32, i32* %5, i64 1
  %13 = ptrtoint i32* %12 to i64
  %14 = bitcast i32** %4 to i64*
  store i64 %13, i64* %14, align 8
  %15 = bitcast %"class.std::__1::vector.34"* %3 to i64*
  br label %74

16:                                               ; preds = %2
  %17 = ptrtoint i32* %5 to i64
  %18 = bitcast i32** %4 to i64*
  %19 = bitcast %"class.std::__1::vector.34"* %3 to i64*
  %20 = load i64, i64* %19, align 8
  %21 = sub i64 %17, %20
  %22 = ashr exact i64 %21, 2
  %23 = add nsw i64 %22, 1
  %24 = icmp ugt i64 %23, 4611686018427387903
  br i1 %24, label %25, label %27

25:                                               ; preds = %16
  %26 = bitcast %"class.std::__1::vector.34"* %3 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %26) #12
  unreachable

27:                                               ; preds = %16
  %28 = bitcast i32** %6 to i64*
  %29 = sub i64 %9, %20
  %30 = ashr exact i64 %29, 2
  %31 = icmp ult i64 %30, 2305843009213693951
  br i1 %31, label %32, label %40

32:                                               ; preds = %27
  %33 = ashr exact i64 %29, 1
  %34 = icmp ult i64 %33, %23
  %35 = select i1 %34, i64 %23, i64 %33
  %36 = icmp eq i64 %35, 0
  br i1 %36, label %45, label %37

37:                                               ; preds = %32
  %38 = icmp ugt i64 %35, 4611686018427387903
  br i1 %38, label %39, label %40

39:                                               ; preds = %37
  tail call void @abort() #12
  unreachable

40:                                               ; preds = %37, %27
  %41 = phi i64 [ %35, %37 ], [ 4611686018427387903, %27 ]
  %42 = shl i64 %41, 2
  %43 = tail call i8* @_Znwm(i64 %42) #11
  %44 = bitcast i8* %43 to i32*
  br label %45

45:                                               ; preds = %40, %32
  %46 = phi i64 [ %41, %40 ], [ 0, %32 ]
  %47 = phi i32* [ %44, %40 ], [ null, %32 ]
  %48 = getelementptr inbounds i32, i32* %47, i64 %22
  %49 = getelementptr inbounds i32, i32* %47, i64 %46
  %50 = ptrtoint i32* %49 to i64
  %51 = bitcast i32* %48 to float*
  store float %1, float* %51, align 4
  %52 = getelementptr inbounds i32, i32* %48, i64 1
  %53 = ptrtoint i32* %52 to i64
  %54 = getelementptr inbounds %"class.std::__1::vector.34", %"class.std::__1::vector.34"* %3, i64 0, i32 0, i32 0
  %55 = load i32*, i32** %54, align 8
  %56 = load i64, i64* %18, align 8
  %57 = ptrtoint i32* %55 to i64
  %58 = sub i64 %56, %57
  %59 = ashr exact i64 %58, 2
  %60 = sub nsw i64 0, %59
  %61 = getelementptr inbounds i32, i32* %48, i64 %60
  %62 = ptrtoint i32* %61 to i64
  %63 = icmp sgt i64 %58, 0
  br i1 %63, label %64, label %68

64:                                               ; preds = %45
  %65 = bitcast i32* %61 to i8*
  %66 = bitcast i32* %55 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %65, i8* align 4 %66, i64 %58, i1 false) #10
  %67 = load i32*, i32** %54, align 8
  br label %68

68:                                               ; preds = %64, %45
  %69 = phi i32* [ %55, %45 ], [ %67, %64 ]
  store i64 %62, i64* %19, align 8
  store i64 %53, i64* %18, align 8
  store i64 %50, i64* %28, align 8
  %70 = icmp eq i32* %69, null
  br i1 %70, label %74, label %71

71:                                               ; preds = %68
  %72 = bitcast i32* %69 to i8*
  tail call void @_ZdlPv(i8* %72) #11
  %73 = load i64, i64* %18, align 8
  br label %74

74:                                               ; preds = %10, %68, %71
  %75 = phi i64* [ %15, %10 ], [ %19, %68 ], [ %19, %71 ]
  %76 = phi i64 [ %13, %10 ], [ %53, %68 ], [ %73, %71 ]
  %77 = getelementptr inbounds %"struct.skvm::Uniforms", %"struct.skvm::Uniforms"* %0, i64 0, i32 0, i32 0
  %78 = load i32, i32* %77, align 8
  %79 = load i64, i64* %75, align 8
  %80 = sub i64 %76, %79
  %81 = shl i64 %80, 32
  %82 = add i64 %81, -17179869184
  %83 = zext i32 %78 to i64
  %84 = or i64 %82, %83
  ret i64 %84
}

; Function Attrs: inlinehint nounwind ssp uwtable
define internal fastcc { %"class.skvm::Builder"*, i32 } @"_ZZZZNK20SkColorFilter_Matrix9onProgramEPN4skvm7BuilderENS0_5ColorEP12SkColorSpacePNS0_8UniformsEP12SkArenaAllocENK3$_0clINS0_4HSLAEEEDaT_ENKUliE_clEiENKUlfNS0_3F32ESF_E_clEfSF_SF_"(%class.anon.128* nocapture readonly, float, %"class.skvm::Builder"*, i32, %"class.skvm::Builder"*, i32) unnamed_addr #4 align 2 {
  %7 = fcmp oeq float %1, 0.000000e+00
  br i1 %7, label %40, label %8

8:                                                ; preds = %6
  %9 = fcmp oeq float %1, 1.000000e+00
  br i1 %9, label %10, label %14

10:                                               ; preds = %8
  %11 = tail call { %"class.skvm::Builder"*, i32 } @_ZN4skvm7Builder3addENS_3F32ES1_(%"class.skvm::Builder"* %4, %"class.skvm::Builder"* %4, i32 %5, %"class.skvm::Builder"* %2, i32 %3) #10
  %12 = extractvalue { %"class.skvm::Builder"*, i32 } %11, 0
  %13 = extractvalue { %"class.skvm::Builder"*, i32 } %11, 1
  br label %40

14:                                               ; preds = %8
  %15 = fcmp oeq float %1, -1.000000e+00
  br i1 %15, label %16, label %20

16:                                               ; preds = %14
  %17 = tail call { %"class.skvm::Builder"*, i32 } @_ZN4skvm7Builder3subENS_3F32ES1_(%"class.skvm::Builder"* %4, %"class.skvm::Builder"* %4, i32 %5, %"class.skvm::Builder"* %2, i32 %3) #10
  %18 = extractvalue { %"class.skvm::Builder"*, i32 } %17, 0
  %19 = extractvalue { %"class.skvm::Builder"*, i32 } %17, 1
  br label %40

20:                                               ; preds = %14
  %21 = getelementptr inbounds %class.anon.128, %class.anon.128* %0, i64 0, i32 0
  %22 = load %"class.skvm::Builder"**, %"class.skvm::Builder"*** %21, align 8
  %23 = load %"class.skvm::Builder"*, %"class.skvm::Builder"** %22, align 8
  %24 = getelementptr inbounds %class.anon.128, %class.anon.128* %0, i64 0, i32 1
  %25 = load %"struct.skvm::Uniforms"**, %"struct.skvm::Uniforms"*** %24, align 8
  %26 = load %"struct.skvm::Uniforms"*, %"struct.skvm::Uniforms"** %25, align 8
  %27 = tail call i64 @_ZN4skvm8Uniforms5pushFEf(%"struct.skvm::Uniforms"* %26, float %1)
  %28 = trunc i64 %27 to i32
  %29 = lshr i64 %27, 32
  %30 = trunc i64 %29 to i32
  %31 = tail call { %"class.skvm::Builder"*, i32 } @_ZN4skvm7Builder9uniform32ENS_3PtrEi(%"class.skvm::Builder"* %23, i32 %28, i32 %30) #10
  %32 = extractvalue { %"class.skvm::Builder"*, i32 } %31, 0
  %33 = extractvalue { %"class.skvm::Builder"*, i32 } %31, 1
  %34 = tail call { %"class.skvm::Builder"*, i32 } @_ZN4skvm7Builder3mulENS_3F32ES1_(%"class.skvm::Builder"* %2, %"class.skvm::Builder"* %2, i32 %3, %"class.skvm::Builder"* %32, i32 %33) #10
  %35 = extractvalue { %"class.skvm::Builder"*, i32 } %34, 0
  %36 = extractvalue { %"class.skvm::Builder"*, i32 } %34, 1
  %37 = tail call { %"class.skvm::Builder"*, i32 } @_ZN4skvm7Builder3addENS_3F32ES1_(%"class.skvm::Builder"* %35, %"class.skvm::Builder"* %35, i32 %36, %"class.skvm::Builder"* %4, i32 %5) #10
  %38 = extractvalue { %"class.skvm::Builder"*, i32 } %37, 0
  %39 = extractvalue { %"class.skvm::Builder"*, i32 } %37, 1
  br label %40

40:                                               ; preds = %6, %10, %20, %16
  %41 = phi %"class.skvm::Builder"* [ %12, %10 ], [ %18, %16 ], [ %38, %20 ], [ %4, %6 ]
  %42 = phi i32 [ %13, %10 ], [ %19, %16 ], [ %39, %20 ], [ %5, %6 ]
  %43 = insertvalue { %"class.skvm::Builder"*, i32 } undef, %"class.skvm::Builder"* %41, 0
  %44 = insertvalue { %"class.skvm::Builder"*, i32 } %43, i32 %42, 1
  ret { %"class.skvm::Builder"*, i32 } %44
}

declare { %"class.skvm::Builder"*, i32 } @_ZN4skvm7Builder5splatEi(%"class.skvm::Builder"*, i32) local_unnamed_addr #2

declare { %"class.skvm::Builder"*, i32 } @_ZN4skvm7Builder9uniform32ENS_3PtrEi(%"class.skvm::Builder"*, i32, i32) local_unnamed_addr #2

; Function Attrs: noreturn
declare void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"*) local_unnamed_addr #7

; Function Attrs: noreturn nounwind
declare void @abort() local_unnamed_addr #8

; Function Attrs: nobuiltin nofree
declare noalias nonnull i8* @_Znwm(i64) local_unnamed_addr #9

declare { %"class.skvm::Builder"*, i32 } @_ZN4skvm7Builder3addENS_3F32ES1_(%"class.skvm::Builder"*, %"class.skvm::Builder"*, i32, %"class.skvm::Builder"*, i32) local_unnamed_addr #2

declare { %"class.skvm::Builder"*, i32 } @_ZN4skvm7Builder3subENS_3F32ES1_(%"class.skvm::Builder"*, %"class.skvm::Builder"*, i32, %"class.skvm::Builder"*, i32) local_unnamed_addr #2

declare { %"class.skvm::Builder"*, i32 } @_ZN4skvm7Builder3mulENS_3F32ES1_(%"class.skvm::Builder"*, %"class.skvm::Builder"*, i32, %"class.skvm::Builder"*, i32) local_unnamed_addr #2

; Function Attrs: inlinehint nounwind ssp uwtable
define internal fastcc { %"class.skvm::Builder"*, i32 } @"_ZZZNK20SkColorFilter_Matrix9onProgramEPN4skvm7BuilderENS0_5ColorEP12SkColorSpacePNS0_8UniformsEP12SkArenaAllocENK3$_0clIS3_EEDaT_ENKUliE_clEi"(%class.anon.131* nocapture readonly, i32) unnamed_addr #4 align 2 {
  %3 = alloca %class.anon.132, align 8
  %4 = getelementptr inbounds %class.anon.131, %class.anon.131* %0, i64 0, i32 2
  %5 = load %class.SkColorFilter_Matrix*, %class.SkColorFilter_Matrix** %4, align 8
  %6 = bitcast %class.anon.132* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %6) #10
  %7 = getelementptr inbounds %class.anon.132, %class.anon.132* %3, i64 0, i32 1
  %8 = bitcast %class.anon.131* %0 to i64*
  %9 = load i64, i64* %8, align 8
  %10 = bitcast %class.anon.132* %3 to i64*
  store i64 %9, i64* %10, align 8
  %11 = getelementptr inbounds %class.anon.131, %class.anon.131* %0, i64 0, i32 1
  %12 = bitcast %"struct.skvm::Uniforms"*** %11 to i64*
  %13 = load i64, i64* %12, align 8
  %14 = bitcast %"struct.skvm::Uniforms"*** %7 to i64*
  store i64 %13, i64* %14, align 8
  %15 = mul nsw i32 %1, 5
  %16 = add nsw i32 %15, 4
  %17 = sext i32 %16 to i64
  %18 = getelementptr inbounds %class.SkColorFilter_Matrix, %class.SkColorFilter_Matrix* %5, i64 0, i32 1, i64 %17
  %19 = load float, float* %18, align 4
  %20 = fcmp oeq float %19, 0.000000e+00
  %21 = inttoptr i64 %9 to %"class.skvm::Builder"**
  %22 = load %"class.skvm::Builder"*, %"class.skvm::Builder"** %21, align 8
  br i1 %20, label %23, label %25

23:                                               ; preds = %2
  %24 = tail call { %"class.skvm::Builder"*, i32 } @_ZN4skvm7Builder5splatEi(%"class.skvm::Builder"* %22, i32 0) #10
  br label %33

25:                                               ; preds = %2
  %26 = inttoptr i64 %13 to %"struct.skvm::Uniforms"**
  %27 = load %"struct.skvm::Uniforms"*, %"struct.skvm::Uniforms"** %26, align 8
  %28 = tail call i64 @_ZN4skvm8Uniforms5pushFEf(%"struct.skvm::Uniforms"* %27, float %19)
  %29 = trunc i64 %28 to i32
  %30 = lshr i64 %28, 32
  %31 = trunc i64 %30 to i32
  %32 = tail call { %"class.skvm::Builder"*, i32 } @_ZN4skvm7Builder9uniform32ENS_3PtrEi(%"class.skvm::Builder"* %22, i32 %29, i32 %31) #10
  br label %33

33:                                               ; preds = %25, %23
  %34 = phi { %"class.skvm::Builder"*, i32 } [ %32, %25 ], [ %24, %23 ]
  %35 = extractvalue { %"class.skvm::Builder"*, i32 } %34, 0
  %36 = extractvalue { %"class.skvm::Builder"*, i32 } %34, 1
  %37 = getelementptr inbounds %class.anon.131, %class.anon.131* %0, i64 0, i32 3
  %38 = load %"struct.skvm::Color"*, %"struct.skvm::Color"** %37, align 8
  %39 = getelementptr inbounds %"struct.skvm::Color", %"struct.skvm::Color"* %38, i64 0, i32 0, i32 0
  %40 = load %"class.skvm::Builder"*, %"class.skvm::Builder"** %39, align 8
  %41 = getelementptr inbounds %"struct.skvm::Color", %"struct.skvm::Color"* %38, i64 0, i32 0, i32 1
  %42 = load i32, i32* %41, align 8
  %43 = getelementptr inbounds %"struct.skvm::Color", %"struct.skvm::Color"* %38, i64 0, i32 1, i32 0
  %44 = load %"class.skvm::Builder"*, %"class.skvm::Builder"** %43, align 8
  %45 = getelementptr inbounds %"struct.skvm::Color", %"struct.skvm::Color"* %38, i64 0, i32 1, i32 1
  %46 = load i32, i32* %45, align 8
  %47 = getelementptr inbounds %"struct.skvm::Color", %"struct.skvm::Color"* %38, i64 0, i32 2, i32 0
  %48 = load %"class.skvm::Builder"*, %"class.skvm::Builder"** %47, align 8
  %49 = getelementptr inbounds %"struct.skvm::Color", %"struct.skvm::Color"* %38, i64 0, i32 2, i32 1
  %50 = load i32, i32* %49, align 8
  %51 = getelementptr inbounds %"struct.skvm::Color", %"struct.skvm::Color"* %38, i64 0, i32 3, i32 0
  %52 = load %"class.skvm::Builder"*, %"class.skvm::Builder"** %51, align 8
  %53 = getelementptr inbounds %"struct.skvm::Color", %"struct.skvm::Color"* %38, i64 0, i32 3, i32 1
  %54 = load i32, i32* %53, align 8
  %55 = sext i32 %15 to i64
  %56 = getelementptr inbounds %class.SkColorFilter_Matrix, %class.SkColorFilter_Matrix* %5, i64 0, i32 1, i64 %55
  %57 = load float, float* %56, align 4
  %58 = add nsw i32 %15, 1
  %59 = sext i32 %58 to i64
  %60 = getelementptr inbounds %class.SkColorFilter_Matrix, %class.SkColorFilter_Matrix* %5, i64 0, i32 1, i64 %59
  %61 = load float, float* %60, align 4
  %62 = add nsw i32 %15, 2
  %63 = sext i32 %62 to i64
  %64 = getelementptr inbounds %class.SkColorFilter_Matrix, %class.SkColorFilter_Matrix* %5, i64 0, i32 1, i64 %63
  %65 = load float, float* %64, align 4
  %66 = add nsw i32 %15, 3
  %67 = sext i32 %66 to i64
  %68 = getelementptr inbounds %class.SkColorFilter_Matrix, %class.SkColorFilter_Matrix* %5, i64 0, i32 1, i64 %67
  %69 = load float, float* %68, align 4
  %70 = call fastcc { %"class.skvm::Builder"*, i32 } @"_ZZZZNK20SkColorFilter_Matrix9onProgramEPN4skvm7BuilderENS0_5ColorEP12SkColorSpacePNS0_8UniformsEP12SkArenaAllocENK3$_0clIS3_EEDaT_ENKUliE_clEiENKUlfNS0_3F32ESE_E_clEfSE_SE_"(%class.anon.132* nonnull %3, float %69, %"class.skvm::Builder"* %52, i32 %54, %"class.skvm::Builder"* %35, i32 %36)
  %71 = extractvalue { %"class.skvm::Builder"*, i32 } %70, 0
  %72 = extractvalue { %"class.skvm::Builder"*, i32 } %70, 1
  %73 = call fastcc { %"class.skvm::Builder"*, i32 } @"_ZZZZNK20SkColorFilter_Matrix9onProgramEPN4skvm7BuilderENS0_5ColorEP12SkColorSpacePNS0_8UniformsEP12SkArenaAllocENK3$_0clIS3_EEDaT_ENKUliE_clEiENKUlfNS0_3F32ESE_E_clEfSE_SE_"(%class.anon.132* nonnull %3, float %65, %"class.skvm::Builder"* %48, i32 %50, %"class.skvm::Builder"* %71, i32 %72)
  %74 = extractvalue { %"class.skvm::Builder"*, i32 } %73, 0
  %75 = extractvalue { %"class.skvm::Builder"*, i32 } %73, 1
  %76 = call fastcc { %"class.skvm::Builder"*, i32 } @"_ZZZZNK20SkColorFilter_Matrix9onProgramEPN4skvm7BuilderENS0_5ColorEP12SkColorSpacePNS0_8UniformsEP12SkArenaAllocENK3$_0clIS3_EEDaT_ENKUliE_clEiENKUlfNS0_3F32ESE_E_clEfSE_SE_"(%class.anon.132* nonnull %3, float %61, %"class.skvm::Builder"* %44, i32 %46, %"class.skvm::Builder"* %74, i32 %75)
  %77 = extractvalue { %"class.skvm::Builder"*, i32 } %76, 0
  %78 = extractvalue { %"class.skvm::Builder"*, i32 } %76, 1
  %79 = call fastcc { %"class.skvm::Builder"*, i32 } @"_ZZZZNK20SkColorFilter_Matrix9onProgramEPN4skvm7BuilderENS0_5ColorEP12SkColorSpacePNS0_8UniformsEP12SkArenaAllocENK3$_0clIS3_EEDaT_ENKUliE_clEiENKUlfNS0_3F32ESE_E_clEfSE_SE_"(%class.anon.132* nonnull %3, float %57, %"class.skvm::Builder"* %40, i32 %42, %"class.skvm::Builder"* %77, i32 %78)
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %6) #10
  ret { %"class.skvm::Builder"*, i32 } %79
}

; Function Attrs: inlinehint nounwind ssp uwtable
define internal fastcc { %"class.skvm::Builder"*, i32 } @"_ZZZZNK20SkColorFilter_Matrix9onProgramEPN4skvm7BuilderENS0_5ColorEP12SkColorSpacePNS0_8UniformsEP12SkArenaAllocENK3$_0clIS3_EEDaT_ENKUliE_clEiENKUlfNS0_3F32ESE_E_clEfSE_SE_"(%class.anon.132* nocapture readonly, float, %"class.skvm::Builder"*, i32, %"class.skvm::Builder"*, i32) unnamed_addr #4 align 2 {
  %7 = fcmp oeq float %1, 0.000000e+00
  br i1 %7, label %40, label %8

8:                                                ; preds = %6
  %9 = fcmp oeq float %1, 1.000000e+00
  br i1 %9, label %10, label %14

10:                                               ; preds = %8
  %11 = tail call { %"class.skvm::Builder"*, i32 } @_ZN4skvm7Builder3addENS_3F32ES1_(%"class.skvm::Builder"* %4, %"class.skvm::Builder"* %4, i32 %5, %"class.skvm::Builder"* %2, i32 %3) #10
  %12 = extractvalue { %"class.skvm::Builder"*, i32 } %11, 0
  %13 = extractvalue { %"class.skvm::Builder"*, i32 } %11, 1
  br label %40

14:                                               ; preds = %8
  %15 = fcmp oeq float %1, -1.000000e+00
  br i1 %15, label %16, label %20

16:                                               ; preds = %14
  %17 = tail call { %"class.skvm::Builder"*, i32 } @_ZN4skvm7Builder3subENS_3F32ES1_(%"class.skvm::Builder"* %4, %"class.skvm::Builder"* %4, i32 %5, %"class.skvm::Builder"* %2, i32 %3) #10
  %18 = extractvalue { %"class.skvm::Builder"*, i32 } %17, 0
  %19 = extractvalue { %"class.skvm::Builder"*, i32 } %17, 1
  br label %40

20:                                               ; preds = %14
  %21 = getelementptr inbounds %class.anon.132, %class.anon.132* %0, i64 0, i32 0
  %22 = load %"class.skvm::Builder"**, %"class.skvm::Builder"*** %21, align 8
  %23 = load %"class.skvm::Builder"*, %"class.skvm::Builder"** %22, align 8
  %24 = getelementptr inbounds %class.anon.132, %class.anon.132* %0, i64 0, i32 1
  %25 = load %"struct.skvm::Uniforms"**, %"struct.skvm::Uniforms"*** %24, align 8
  %26 = load %"struct.skvm::Uniforms"*, %"struct.skvm::Uniforms"** %25, align 8
  %27 = tail call i64 @_ZN4skvm8Uniforms5pushFEf(%"struct.skvm::Uniforms"* %26, float %1)
  %28 = trunc i64 %27 to i32
  %29 = lshr i64 %27, 32
  %30 = trunc i64 %29 to i32
  %31 = tail call { %"class.skvm::Builder"*, i32 } @_ZN4skvm7Builder9uniform32ENS_3PtrEi(%"class.skvm::Builder"* %23, i32 %28, i32 %30) #10
  %32 = extractvalue { %"class.skvm::Builder"*, i32 } %31, 0
  %33 = extractvalue { %"class.skvm::Builder"*, i32 } %31, 1
  %34 = tail call { %"class.skvm::Builder"*, i32 } @_ZN4skvm7Builder3mulENS_3F32ES1_(%"class.skvm::Builder"* %2, %"class.skvm::Builder"* %2, i32 %3, %"class.skvm::Builder"* %32, i32 %33) #10
  %35 = extractvalue { %"class.skvm::Builder"*, i32 } %34, 0
  %36 = extractvalue { %"class.skvm::Builder"*, i32 } %34, 1
  %37 = tail call { %"class.skvm::Builder"*, i32 } @_ZN4skvm7Builder3addENS_3F32ES1_(%"class.skvm::Builder"* %35, %"class.skvm::Builder"* %35, i32 %36, %"class.skvm::Builder"* %4, i32 %5) #10
  %38 = extractvalue { %"class.skvm::Builder"*, i32 } %37, 0
  %39 = extractvalue { %"class.skvm::Builder"*, i32 } %37, 1
  br label %40

40:                                               ; preds = %6, %10, %20, %16
  %41 = phi %"class.skvm::Builder"* [ %12, %10 ], [ %18, %16 ], [ %38, %20 ], [ %4, %6 ]
  %42 = phi i32 [ %13, %10 ], [ %19, %16 ], [ %39, %20 ], [ %5, %6 ]
  %43 = insertvalue { %"class.skvm::Builder"*, i32 } undef, %"class.skvm::Builder"* %41, 0
  %44 = insertvalue { %"class.skvm::Builder"*, i32 } %43, i32 %42, 1
  ret { %"class.skvm::Builder"*, i32 } %44
}

declare void @_ZN4skvm7Builder6premulEPNS_3F32ES2_S2_S1_(%"class.skvm::Builder"*, %"struct.skvm::F32"*, %"struct.skvm::F32"*, %"struct.skvm::F32"*, %"class.skvm::Builder"*, i32) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN4skvm7Builder7clamp01ENS_5ColorE(%"struct.skvm::Color"* noalias sret, %"class.skvm::Builder"*, %"struct.skvm::Color"* byval(%"struct.skvm::Color") align 8) local_unnamed_addr #0 comdat align 2 {
  %4 = getelementptr inbounds %"struct.skvm::Color", %"struct.skvm::Color"* %2, i64 0, i32 0, i32 0
  %5 = load %"class.skvm::Builder"*, %"class.skvm::Builder"** %4, align 8
  %6 = getelementptr inbounds %"struct.skvm::Color", %"struct.skvm::Color"* %2, i64 0, i32 0, i32 1
  %7 = load i32, i32* %6, align 8
  %8 = tail call { %"class.skvm::Builder"*, i32 } @_ZN4skvm7Builder5splatEi(%"class.skvm::Builder"* %1, i32 0) #10
  %9 = extractvalue { %"class.skvm::Builder"*, i32 } %8, 0
  %10 = extractvalue { %"class.skvm::Builder"*, i32 } %8, 1
  %11 = tail call { %"class.skvm::Builder"*, i32 } @_ZN4skvm7Builder5splatEi(%"class.skvm::Builder"* %1, i32 1065353216) #10
  %12 = extractvalue { %"class.skvm::Builder"*, i32 } %11, 0
  %13 = extractvalue { %"class.skvm::Builder"*, i32 } %11, 1
  %14 = tail call { %"class.skvm::Builder"*, i32 } @_ZN4skvm7Builder3minENS_3F32ES1_(%"class.skvm::Builder"* %1, %"class.skvm::Builder"* %5, i32 %7, %"class.skvm::Builder"* %12, i32 %13) #10
  %15 = extractvalue { %"class.skvm::Builder"*, i32 } %14, 0
  %16 = extractvalue { %"class.skvm::Builder"*, i32 } %14, 1
  %17 = tail call { %"class.skvm::Builder"*, i32 } @_ZN4skvm7Builder3maxENS_3F32ES1_(%"class.skvm::Builder"* %1, %"class.skvm::Builder"* %9, i32 %10, %"class.skvm::Builder"* %15, i32 %16) #10
  %18 = getelementptr inbounds %"struct.skvm::Color", %"struct.skvm::Color"* %0, i64 0, i32 0, i32 0
  %19 = extractvalue { %"class.skvm::Builder"*, i32 } %17, 0
  store %"class.skvm::Builder"* %19, %"class.skvm::Builder"** %18, align 8
  %20 = getelementptr inbounds %"struct.skvm::Color", %"struct.skvm::Color"* %0, i64 0, i32 0, i32 1
  %21 = extractvalue { %"class.skvm::Builder"*, i32 } %17, 1
  store i32 %21, i32* %20, align 8
  %22 = getelementptr inbounds %"struct.skvm::Color", %"struct.skvm::Color"* %2, i64 0, i32 1, i32 0
  %23 = load %"class.skvm::Builder"*, %"class.skvm::Builder"** %22, align 8
  %24 = getelementptr inbounds %"struct.skvm::Color", %"struct.skvm::Color"* %2, i64 0, i32 1, i32 1
  %25 = load i32, i32* %24, align 8
  %26 = tail call { %"class.skvm::Builder"*, i32 } @_ZN4skvm7Builder5splatEi(%"class.skvm::Builder"* %1, i32 0) #10
  %27 = extractvalue { %"class.skvm::Builder"*, i32 } %26, 0
  %28 = extractvalue { %"class.skvm::Builder"*, i32 } %26, 1
  %29 = tail call { %"class.skvm::Builder"*, i32 } @_ZN4skvm7Builder5splatEi(%"class.skvm::Builder"* %1, i32 1065353216) #10
  %30 = extractvalue { %"class.skvm::Builder"*, i32 } %29, 0
  %31 = extractvalue { %"class.skvm::Builder"*, i32 } %29, 1
  %32 = tail call { %"class.skvm::Builder"*, i32 } @_ZN4skvm7Builder3minENS_3F32ES1_(%"class.skvm::Builder"* %1, %"class.skvm::Builder"* %23, i32 %25, %"class.skvm::Builder"* %30, i32 %31) #10
  %33 = extractvalue { %"class.skvm::Builder"*, i32 } %32, 0
  %34 = extractvalue { %"class.skvm::Builder"*, i32 } %32, 1
  %35 = tail call { %"class.skvm::Builder"*, i32 } @_ZN4skvm7Builder3maxENS_3F32ES1_(%"class.skvm::Builder"* %1, %"class.skvm::Builder"* %27, i32 %28, %"class.skvm::Builder"* %33, i32 %34) #10
  %36 = getelementptr inbounds %"struct.skvm::Color", %"struct.skvm::Color"* %0, i64 0, i32 1, i32 0
  %37 = extractvalue { %"class.skvm::Builder"*, i32 } %35, 0
  store %"class.skvm::Builder"* %37, %"class.skvm::Builder"** %36, align 8
  %38 = getelementptr inbounds %"struct.skvm::Color", %"struct.skvm::Color"* %0, i64 0, i32 1, i32 1
  %39 = extractvalue { %"class.skvm::Builder"*, i32 } %35, 1
  store i32 %39, i32* %38, align 8
  %40 = getelementptr inbounds %"struct.skvm::Color", %"struct.skvm::Color"* %2, i64 0, i32 2, i32 0
  %41 = load %"class.skvm::Builder"*, %"class.skvm::Builder"** %40, align 8
  %42 = getelementptr inbounds %"struct.skvm::Color", %"struct.skvm::Color"* %2, i64 0, i32 2, i32 1
  %43 = load i32, i32* %42, align 8
  %44 = tail call { %"class.skvm::Builder"*, i32 } @_ZN4skvm7Builder5splatEi(%"class.skvm::Builder"* %1, i32 0) #10
  %45 = extractvalue { %"class.skvm::Builder"*, i32 } %44, 0
  %46 = extractvalue { %"class.skvm::Builder"*, i32 } %44, 1
  %47 = tail call { %"class.skvm::Builder"*, i32 } @_ZN4skvm7Builder5splatEi(%"class.skvm::Builder"* %1, i32 1065353216) #10
  %48 = extractvalue { %"class.skvm::Builder"*, i32 } %47, 0
  %49 = extractvalue { %"class.skvm::Builder"*, i32 } %47, 1
  %50 = tail call { %"class.skvm::Builder"*, i32 } @_ZN4skvm7Builder3minENS_3F32ES1_(%"class.skvm::Builder"* %1, %"class.skvm::Builder"* %41, i32 %43, %"class.skvm::Builder"* %48, i32 %49) #10
  %51 = extractvalue { %"class.skvm::Builder"*, i32 } %50, 0
  %52 = extractvalue { %"class.skvm::Builder"*, i32 } %50, 1
  %53 = tail call { %"class.skvm::Builder"*, i32 } @_ZN4skvm7Builder3maxENS_3F32ES1_(%"class.skvm::Builder"* %1, %"class.skvm::Builder"* %45, i32 %46, %"class.skvm::Builder"* %51, i32 %52) #10
  %54 = getelementptr inbounds %"struct.skvm::Color", %"struct.skvm::Color"* %0, i64 0, i32 2, i32 0
  %55 = extractvalue { %"class.skvm::Builder"*, i32 } %53, 0
  store %"class.skvm::Builder"* %55, %"class.skvm::Builder"** %54, align 8
  %56 = getelementptr inbounds %"struct.skvm::Color", %"struct.skvm::Color"* %0, i64 0, i32 2, i32 1
  %57 = extractvalue { %"class.skvm::Builder"*, i32 } %53, 1
  store i32 %57, i32* %56, align 8
  %58 = getelementptr inbounds %"struct.skvm::Color", %"struct.skvm::Color"* %2, i64 0, i32 3, i32 0
  %59 = load %"class.skvm::Builder"*, %"class.skvm::Builder"** %58, align 8
  %60 = getelementptr inbounds %"struct.skvm::Color", %"struct.skvm::Color"* %2, i64 0, i32 3, i32 1
  %61 = load i32, i32* %60, align 8
  %62 = tail call { %"class.skvm::Builder"*, i32 } @_ZN4skvm7Builder5splatEi(%"class.skvm::Builder"* %1, i32 0) #10
  %63 = extractvalue { %"class.skvm::Builder"*, i32 } %62, 0
  %64 = extractvalue { %"class.skvm::Builder"*, i32 } %62, 1
  %65 = tail call { %"class.skvm::Builder"*, i32 } @_ZN4skvm7Builder5splatEi(%"class.skvm::Builder"* %1, i32 1065353216) #10
  %66 = extractvalue { %"class.skvm::Builder"*, i32 } %65, 0
  %67 = extractvalue { %"class.skvm::Builder"*, i32 } %65, 1
  %68 = tail call { %"class.skvm::Builder"*, i32 } @_ZN4skvm7Builder3minENS_3F32ES1_(%"class.skvm::Builder"* %1, %"class.skvm::Builder"* %59, i32 %61, %"class.skvm::Builder"* %66, i32 %67) #10
  %69 = extractvalue { %"class.skvm::Builder"*, i32 } %68, 0
  %70 = extractvalue { %"class.skvm::Builder"*, i32 } %68, 1
  %71 = tail call { %"class.skvm::Builder"*, i32 } @_ZN4skvm7Builder3maxENS_3F32ES1_(%"class.skvm::Builder"* %1, %"class.skvm::Builder"* %63, i32 %64, %"class.skvm::Builder"* %69, i32 %70) #10
  %72 = getelementptr inbounds %"struct.skvm::Color", %"struct.skvm::Color"* %0, i64 0, i32 3, i32 0
  %73 = extractvalue { %"class.skvm::Builder"*, i32 } %71, 0
  store %"class.skvm::Builder"* %73, %"class.skvm::Builder"** %72, align 8
  %74 = getelementptr inbounds %"struct.skvm::Color", %"struct.skvm::Color"* %0, i64 0, i32 3, i32 1
  %75 = extractvalue { %"class.skvm::Builder"*, i32 } %71, 1
  store i32 %75, i32* %74, align 8
  ret void
}

declare { %"class.skvm::Builder"*, i32 } @_ZN4skvm7Builder3maxENS_3F32ES1_(%"class.skvm::Builder"*, %"class.skvm::Builder"*, i32, %"class.skvm::Builder"*, i32) local_unnamed_addr #2

declare { %"class.skvm::Builder"*, i32 } @_ZN4skvm7Builder3minENS_3F32ES1_(%"class.skvm::Builder"*, %"class.skvm::Builder"*, i32, %"class.skvm::Builder"*, i32) local_unnamed_addr #2

declare i8* @_ZN11GrProcessornwEm(i64) local_unnamed_addr #2

declare void @_ZN19GrFragmentProcessor13registerChildENSt3__110unique_ptrIS_NS0_14default_deleteIS_EEEEN4SkSL11SampleUsageE(%class.GrFragmentProcessor*, %class.GrFragmentProcessor*, i64) local_unnamed_addr #2

; Function Attrs: inlinehint nounwind ssp uwtable
define internal void @"_ZZN20SkColorFilter_Matrix20RegisterFlattenablesEvEN3$_18__invokeER12SkReadBuffer"(%class.sk_sp.16* noalias nocapture sret, %class.SkReadBuffer* dereferenceable(136)) #4 align 2 {
  %3 = alloca [20 x float], align 16
  %4 = bitcast [20 x float]* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 80, i8* nonnull %4) #10, !noalias !37
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %4, i8 -1, i64 80, i1 false) #10, !noalias !37
  %5 = getelementptr inbounds [20 x float], [20 x float]* %3, i64 0, i64 0
  %6 = call zeroext i1 @_ZN12SkReadBuffer15readScalarArrayEPfm(%class.SkReadBuffer* %1, float* nonnull %5, i64 20) #10, !noalias !37
  br i1 %6, label %7, label %107

7:                                                ; preds = %2
  %8 = getelementptr inbounds [20 x float], [20 x float]* %3, i64 0, i64 4
  %9 = load float, float* %8, align 16, !noalias !37
  %10 = fmul float %9, 0x3F70101020000000
  store float %10, float* %8, align 16, !noalias !37
  %11 = getelementptr inbounds [20 x float], [20 x float]* %3, i64 0, i64 9
  %12 = load float, float* %11, align 4, !noalias !37
  %13 = fmul float %12, 0x3F70101020000000
  store float %13, float* %11, align 4, !noalias !37
  %14 = getelementptr inbounds [20 x float], [20 x float]* %3, i64 0, i64 14
  %15 = load float, float* %5, align 16, !noalias !40
  %16 = fmul float %15, 0.000000e+00
  %17 = getelementptr inbounds [20 x float], [20 x float]* %3, i64 0, i64 1
  %18 = load float, float* %17, align 4, !noalias !40
  %19 = fmul float %16, %18
  %20 = getelementptr inbounds [20 x float], [20 x float]* %3, i64 0, i64 2
  %21 = load float, float* %20, align 8, !noalias !40
  %22 = fmul float %19, %21
  %23 = getelementptr inbounds [20 x float], [20 x float]* %3, i64 0, i64 3
  %24 = load float, float* %23, align 4, !noalias !40
  %25 = fmul float %22, %24
  %26 = fmul float %10, %25
  %27 = getelementptr inbounds [20 x float], [20 x float]* %3, i64 0, i64 5
  %28 = load float, float* %27, align 4, !noalias !40
  %29 = fmul float %28, %26
  %30 = getelementptr inbounds [20 x float], [20 x float]* %3, i64 0, i64 6
  %31 = load float, float* %30, align 8, !noalias !40
  %32 = fmul float %31, %29
  %33 = getelementptr inbounds [20 x float], [20 x float]* %3, i64 0, i64 7
  %34 = load float, float* %33, align 4, !noalias !40
  %35 = fmul float %34, %32
  %36 = getelementptr inbounds [20 x float], [20 x float]* %3, i64 0, i64 8
  %37 = load float, float* %36, align 16, !noalias !40
  %38 = fmul float %37, %35
  %39 = fmul float %13, %38
  %40 = getelementptr inbounds [20 x float], [20 x float]* %3, i64 0, i64 10
  %41 = load float, float* %40, align 8, !noalias !40
  %42 = fmul float %41, %39
  %43 = getelementptr inbounds [20 x float], [20 x float]* %3, i64 0, i64 11
  %44 = load float, float* %43, align 4, !noalias !40
  %45 = fmul float %44, %42
  %46 = getelementptr inbounds [20 x float], [20 x float]* %3, i64 0, i64 12
  %47 = load float, float* %46, align 16, !noalias !40
  %48 = fmul float %47, %45
  %49 = getelementptr inbounds [20 x float], [20 x float]* %3, i64 0, i64 13
  %50 = bitcast float* %49 to <2 x float>*
  %51 = load <2 x float>, <2 x float>* %50, align 4, !noalias !37
  %52 = insertelement <2 x float> <float undef, float 0x3F70101020000000>, float %48, i32 0
  %53 = fmul <2 x float> %51, %52
  %54 = extractelement <2 x float> %53, i32 1
  store float %54, float* %14, align 8, !noalias !37
  %55 = getelementptr inbounds [20 x float], [20 x float]* %3, i64 0, i64 19
  %56 = extractelement <2 x float> %53, i32 0
  %57 = fmul float %54, %56
  %58 = getelementptr inbounds [20 x float], [20 x float]* %3, i64 0, i64 15
  %59 = load float, float* %58, align 4, !noalias !40
  %60 = fmul float %59, %57
  %61 = getelementptr inbounds [20 x float], [20 x float]* %3, i64 0, i64 16
  %62 = load float, float* %61, align 16, !noalias !40
  %63 = fmul float %62, %60
  %64 = getelementptr inbounds [20 x float], [20 x float]* %3, i64 0, i64 17
  %65 = load float, float* %64, align 4, !noalias !40
  %66 = fmul float %65, %63
  %67 = getelementptr inbounds [20 x float], [20 x float]* %3, i64 0, i64 18
  %68 = bitcast float* %67 to <2 x float>*
  %69 = load <2 x float>, <2 x float>* %68, align 8, !noalias !37
  %70 = insertelement <2 x float> <float undef, float 0x3F70101020000000>, float %66, i32 0
  %71 = fmul <2 x float> %69, %70
  %72 = extractelement <2 x float> %71, i32 1
  store float %72, float* %55, align 4, !noalias !37
  %73 = extractelement <2 x float> %71, i32 0
  %74 = fmul float %72, %73
  %75 = fcmp oeq float %74, 0.000000e+00
  br i1 %75, label %76, label %104

76:                                               ; preds = %7
  %77 = call i8* @_Znwm(i64 96) #11, !noalias !43
  %78 = getelementptr inbounds i8, i8* %77, i64 8
  %79 = bitcast i8* %78 to i32*
  store i32 1, i32* %79, align 4, !noalias !43
  %80 = bitcast i8* %77 to i32 (...)***
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [16 x i8*] }, { [16 x i8*] }* @_ZTV20SkColorFilter_Matrix, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %80, align 8, !noalias !43
  %81 = getelementptr inbounds i8, i8* %77, i64 92
  %82 = call float @llvm.fabs.f32(float %59) #10
  %83 = fcmp ugt float %82, 0x3F30000000000000
  %84 = call float @llvm.fabs.f32(float %62) #10
  %85 = fcmp ugt float %84, 0x3F30000000000000
  %86 = or i1 %83, %85
  %87 = call float @llvm.fabs.f32(float %65) #10
  %88 = fcmp ugt float %87, 0x3F30000000000000
  %89 = or i1 %86, %88
  br i1 %89, label %99, label %90

90:                                               ; preds = %76
  %91 = extractelement <2 x float> %69, i32 0
  %92 = fadd float %91, -1.000000e+00
  %93 = call float @llvm.fabs.f32(float %92) #10
  %94 = fcmp ugt float %93, 0x3F30000000000000
  br i1 %94, label %99, label %95

95:                                               ; preds = %90
  %96 = call float @llvm.fabs.f32(float %72) #10
  %97 = fcmp ole float %96, 0x3F30000000000000
  %98 = zext i1 %97 to i8
  br label %99

99:                                               ; preds = %95, %90, %76
  %100 = phi i8 [ 0, %90 ], [ 0, %76 ], [ %98, %95 ]
  store i8 %100, i8* %81, align 4, !noalias !43
  %101 = getelementptr inbounds i8, i8* %77, i64 93
  store i8 0, i8* %101, align 1, !noalias !43
  %102 = getelementptr inbounds i8, i8* %77, i64 12
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %102, i8* nonnull align 16 %4, i64 80, i1 false) #10, !noalias !43
  %103 = ptrtoint i8* %77 to i64
  br label %104

104:                                              ; preds = %99, %7
  %105 = phi i64 [ %103, %99 ], [ 0, %7 ]
  %106 = bitcast %class.sk_sp.16* %0 to i64*
  store i64 %105, i64* %106, align 8, !alias.scope !37
  br label %109

107:                                              ; preds = %2
  %108 = getelementptr inbounds %class.sk_sp.16, %class.sk_sp.16* %0, i64 0, i32 0
  store %class.SkFlattenable* null, %class.SkFlattenable** %108, align 8, !alias.scope !37
  br label %109

109:                                              ; preds = %104, %107
  call void @llvm.lifetime.end.p0i8(i64 80, i8* nonnull %4) #10, !noalias !37
  ret void
}

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="64" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { inlinehint nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nounwind readnone speculatable }
attributes #7 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { noreturn nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #9 = { nobuiltin nofree "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #10 = { nounwind }
attributes #11 = { builtin nounwind }
attributes #12 = { noreturn nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{!3, !5}
!3 = distinct !{!3, !4, !"_Z10sk_make_spI20SkColorFilter_MatrixJRPKfRNS0_6DomainEEE5sk_spIT_EDpOT0_: argument 0"}
!4 = distinct !{!4, !"_Z10sk_make_spI20SkColorFilter_MatrixJRPKfRNS0_6DomainEEE5sk_spIT_EDpOT0_"}
!5 = distinct !{!5, !6, !"_ZL10MakeMatrixPKfN20SkColorFilter_Matrix6DomainE: argument 0"}
!6 = distinct !{!6, !"_ZL10MakeMatrixPKfN20SkColorFilter_Matrix6DomainE"}
!7 = !{!8, !10}
!8 = distinct !{!8, !9, !"_Z10sk_make_spI20SkColorFilter_MatrixJRPKfRNS0_6DomainEEE5sk_spIT_EDpOT0_: argument 0"}
!9 = distinct !{!9, !"_Z10sk_make_spI20SkColorFilter_MatrixJRPKfRNS0_6DomainEEE5sk_spIT_EDpOT0_"}
!10 = distinct !{!10, !11, !"_ZL10MakeMatrixPKfN20SkColorFilter_Matrix6DomainE: argument 0"}
!11 = distinct !{!11, !"_ZL10MakeMatrixPKfN20SkColorFilter_Matrix6DomainE"}
!12 = !{i8 0, i8 2}
!13 = !{!14}
!14 = distinct !{!14, !15, !"_ZN4skvmL8unpremulENS_5ColorE: argument 0"}
!15 = distinct !{!15, !"_ZN4skvmL8unpremulENS_5ColorE"}
!16 = !{!17, !14}
!17 = distinct !{!17, !18, !"_ZN4skvm7Builder8unpremulENS_5ColorE: argument 0"}
!18 = distinct !{!18, !"_ZN4skvm7Builder8unpremulENS_5ColorE"}
!19 = !{!20}
!20 = distinct !{!20, !21, !"_ZZNK20SkColorFilter_Matrix9onProgramEPN4skvm7BuilderENS0_5ColorEP12SkColorSpacePNS0_8UniformsEP12SkArenaAllocENK3$_0clINS0_4HSLAEEEDaT_: argument 0"}
!21 = distinct !{!21, !"_ZZNK20SkColorFilter_Matrix9onProgramEPN4skvm7BuilderENS0_5ColorEP12SkColorSpacePNS0_8UniformsEP12SkArenaAllocENK3$_0clINS0_4HSLAEEEDaT_"}
!22 = !{!23}
!23 = distinct !{!23, !24, !"_ZZNK20SkColorFilter_Matrix9onProgramEPN4skvm7BuilderENS0_5ColorEP12SkColorSpacePNS0_8UniformsEP12SkArenaAllocENK3$_0clIS3_EEDaT_: argument 0"}
!24 = distinct !{!24, !"_ZZNK20SkColorFilter_Matrix9onProgramEPN4skvm7BuilderENS0_5ColorEP12SkColorSpacePNS0_8UniformsEP12SkArenaAllocENK3$_0clIS3_EEDaT_"}
!25 = !{!26}
!26 = distinct !{!26, !27, !"_ZN4skvmL7clamp01ENS_5ColorE: argument 0"}
!27 = distinct !{!27, !"_ZN4skvmL7clamp01ENS_5ColorE"}
!28 = !{!29}
!29 = distinct !{!29, !30, !"_ZN4skvmL6premulENS_5ColorE: argument 0"}
!30 = distinct !{!30, !"_ZN4skvmL6premulENS_5ColorE"}
!31 = !{!32, !29}
!32 = distinct !{!32, !33, !"_ZN4skvm7Builder6premulENS_5ColorE: argument 0"}
!33 = distinct !{!33, !"_ZN4skvm7Builder6premulENS_5ColorE"}
!34 = !{!35}
!35 = distinct !{!35, !36, !"_Z10sk_make_spI20SkColorFilter_MatrixJRPKfRNS0_6DomainEEE5sk_spIT_EDpOT0_: argument 0"}
!36 = distinct !{!36, !"_Z10sk_make_spI20SkColorFilter_MatrixJRPKfRNS0_6DomainEEE5sk_spIT_EDpOT0_"}
!37 = !{!38}
!38 = distinct !{!38, !39, !"_ZZN20SkColorFilter_Matrix20RegisterFlattenablesEvENK3$_1clER12SkReadBuffer: argument 0"}
!39 = distinct !{!39, !"_ZZN20SkColorFilter_Matrix20RegisterFlattenablesEvENK3$_1clER12SkReadBuffer"}
!40 = !{!41, !38}
!41 = distinct !{!41, !42, !"_ZL10MakeMatrixPKfN20SkColorFilter_Matrix6DomainE: argument 0"}
!42 = distinct !{!42, !"_ZL10MakeMatrixPKfN20SkColorFilter_Matrix6DomainE"}
!43 = !{!44, !41, !38}
!44 = distinct !{!44, !45, !"_Z10sk_make_spI20SkColorFilter_MatrixJRPKfRNS0_6DomainEEE5sk_spIT_EDpOT0_: argument 0"}
!45 = distinct !{!45, !"_Z10sk_make_spI20SkColorFilter_MatrixJRPKfRNS0_6DomainEEE5sk_spIT_EDpOT0_"}
