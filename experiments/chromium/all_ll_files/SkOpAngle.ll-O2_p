; ModuleID = '../../third_party/skia/src/pathops/SkOpAngle.cpp'
source_filename = "../../third_party/skia/src/pathops/SkOpAngle.cpp"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%struct.SkPoint = type { float, float }
%struct.SkDLine = type { [2 x %struct.SkDPoint] }
%struct.SkDPoint = type { double, double }
%class.SkIntersections = type <{ [13 x %struct.SkDPoint], [2 x %struct.SkDPoint], [2 x [13 x double]], [2 x i16], [2 x i8], i8, i8, i8, i8, [6 x i8] }>
%struct.SkDQuad = type { [3 x %struct.SkDPoint] }
%class.SkOpAngle = type <{ %struct.SkDCurve, %class.SkDCurveSweep, double, %class.SkLineParameters, %class.SkOpAngle*, %class.SkOpSpanBase*, %class.SkOpSpanBase*, %class.SkOpSpanBase*, %class.SkOpSpanBase*, i32, i8, i8, i8, i8, i8, i8, i8, [5 x i8] }>
%struct.SkDCurve = type { %union.anon }
%union.anon = type { %struct.SkDCubic }
%struct.SkDCubic = type { [4 x %struct.SkDPoint] }
%class.SkDCurveSweep = type <{ %struct.SkDCurve, [2 x %struct.SkDVector], i8, i8, [6 x i8] }>
%struct.SkDVector = type { double, double }
%class.SkLineParameters = type { double, double, double }
%class.SkOpSpanBase = type <{ %class.SkOpPtT, %class.SkOpSegment*, %class.SkOpSpanBase*, %class.SkOpAngle*, %class.SkOpSpan*, i32, i8, i8, [2 x i8] }>
%class.SkOpPtT = type <{ double, %struct.SkPoint, %class.SkOpSpanBase*, %class.SkOpPtT*, i8, i8, i8, [5 x i8] }>
%class.SkOpSegment = type <{ %class.SkOpSpan, %class.SkOpSpanBase, %class.SkOpContour*, %class.SkOpSegment*, %class.SkOpSegment*, %struct.SkPoint*, %struct.SkPathOpsBounds, float, i32, i32, i32, i8, [7 x i8] }>
%class.SkOpSpan = type <{ %class.SkOpSpanBase.base, [2 x i8], %class.SkOpSpan*, %class.SkOpAngle*, %class.SkOpSpanBase*, i32, i32, i32, i32, i32, i8, i8, [2 x i8] }>
%class.SkOpSpanBase.base = type <{ %class.SkOpPtT, %class.SkOpSegment*, %class.SkOpSpanBase*, %class.SkOpAngle*, %class.SkOpSpan*, i32, i8, i8 }>
%class.SkOpContour = type opaque
%struct.SkPathOpsBounds = type { %struct.SkRect }
%struct.SkRect = type { float, float, float, float }
%class.anon = type { i8 }
%class.SkOpGlobalState = type <{ %class.SkArenaAlloc*, %class.SkOpCoincidence*, %class.SkOpContourHead*, i32, i8, i8, i8, i8 }>
%class.SkArenaAlloc = type <{ i8*, i8*, i8*, %class.SkFibBlockSizes, [4 x i8] }>
%class.SkFibBlockSizes = type { i32 }
%class.SkOpCoincidence = type opaque
%class.SkOpContourHead = type opaque
%struct.SkDConic = type { %struct.SkDQuad, float }

$_ZN16SkLineParameters14cubicEndPointsERK8SkDCubic = comdat any

$_Z12SkTIntroSortIdZ8SkTQSortIdEvPT_S2_EUlRKdS4_E_EviS2_iRKT0_ = comdat any

$_Z11SkTHeapSortIdZ8SkTQSortIdEvPT_S2_EUlRKdS4_E_EvS2_mRKT0_ = comdat any

@__const._ZN9SkOpAngle13endsIntersectEPS_.smallTs = private unnamed_addr constant [2 x double] [double -1.000000e+00, double -1.000000e+00], align 16
@_ZL17CurveIntersectRay = internal unnamed_addr constant [5 x void (%struct.SkPoint*, float, %struct.SkDLine*, %class.SkIntersections*)*] [void (%struct.SkPoint*, float, %struct.SkDLine*, %class.SkIntersections*)* null, void (%struct.SkPoint*, float, %struct.SkDLine*, %class.SkIntersections*)* @_ZL18line_intersect_rayPK7SkPointfRK7SkDLineP15SkIntersections, void (%struct.SkPoint*, float, %struct.SkDLine*, %class.SkIntersections*)* @_ZL18quad_intersect_rayPK7SkPointfRK7SkDLineP15SkIntersections, void (%struct.SkPoint*, float, %struct.SkDLine*, %class.SkIntersections*)* @_ZL19conic_intersect_rayPK7SkPointfRK7SkDLineP15SkIntersections, void (%struct.SkPoint*, float, %struct.SkDLine*, %class.SkIntersections*)* @_ZL19cubic_intersect_rayPK7SkPointfRK7SkDLineP15SkIntersections], align 16
@_ZL14CurveDSlopeAtT = internal unnamed_addr constant [5 x { double, double } (%struct.SkPoint*, float, double)*] [{ double, double } (%struct.SkPoint*, float, double)* null, { double, double } (%struct.SkPoint*, float, double)* @_ZL15dline_dxdy_at_tPK7SkPointfd, { double, double } (%struct.SkPoint*, float, double)* @_ZL15dquad_dxdy_at_tPK7SkPointfd, { double, double } (%struct.SkPoint*, float, double)* @_ZL16dconic_dxdy_at_tPK7SkPointfd, { double, double } (%struct.SkPoint*, float, double)* @_ZL16dcubic_dxdy_at_tPK7SkPointfd], align 16
@_ZZNK9SkOpAngle10findSectorEN6SkPath4VerbEddE10sedecimant = internal unnamed_addr constant [3 x [3 x [3 x i32]]] [[3 x [3 x i32]] [[3 x i32] [i32 4, i32 3, i32 2], [3 x i32] [i32 7, i32 -1, i32 15], [3 x i32] [i32 10, i32 11, i32 12]], [3 x [3 x i32]] [[3 x i32] [i32 5, i32 -1, i32 1], [3 x i32] [i32 -1, i32 -1, i32 -1], [3 x i32] [i32 9, i32 -1, i32 13]], [3 x [3 x i32]] [[3 x i32] [i32 6, i32 3, i32 0], [3 x i32] [i32 7, i32 -1, i32 15], [3 x i32] [i32 8, i32 11, i32 14]]], align 16
@__const._ZNK9SkOpAngle9midToSideEPKS_Pb.oppMid = private unnamed_addr constant %class.SkIntersections <{ [13 x %struct.SkDPoint] [%struct.SkDPoint { double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF }, %struct.SkDPoint { double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF }, %struct.SkDPoint { double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF }, %struct.SkDPoint { double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF }, %struct.SkDPoint { double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF }, %struct.SkDPoint { double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF }, %struct.SkDPoint { double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF }, %struct.SkDPoint { double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF }, %struct.SkDPoint { double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF }, %struct.SkDPoint { double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF }, %struct.SkDPoint { double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF }, %struct.SkDPoint { double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF }, %struct.SkDPoint { double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF }], [2 x %struct.SkDPoint] [%struct.SkDPoint { double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF }, %struct.SkDPoint { double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF }], [2 x [13 x double]] [[13 x double] [double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF], [13 x double] [double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF]], [2 x i16] [i16 -21846, i16 -21846], [2 x i8] c"\AA\AA", i8 -86, i8 -86, i8 -86, i8 -86, [6 x i8] c"\AA\AA\AA\AA\AA\AA" }>, align 8
@_ZL14CurveDPointAtT = internal unnamed_addr constant [5 x { double, double } (%struct.SkPoint*, float, double)*] [{ double, double } (%struct.SkPoint*, float, double)* null, { double, double } (%struct.SkPoint*, float, double)* @_ZL13dline_xy_at_tPK7SkPointfd, { double, double } (%struct.SkPoint*, float, double)* @_ZL13dquad_xy_at_tPK7SkPointfd, { double, double } (%struct.SkPoint*, float, double)* @_ZL14dconic_xy_at_tPK7SkPointfd, { double, double } (%struct.SkPoint*, float, double)* @_ZL14dcubic_xy_at_tPK7SkPointfd], align 16
@__const._ZL16dconic_dxdy_at_tPK7SkPointfd.conic = private unnamed_addr constant { %struct.SkDQuad, float, [4 x i8] } { %struct.SkDQuad { [3 x %struct.SkDPoint] [%struct.SkDPoint { double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF }, %struct.SkDPoint { double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF }, %struct.SkDPoint { double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF }] }, float 0xFFFFFFFFE0000000, [4 x i8] c"\AA\AA\AA\AA" }, align 8

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN9SkOpAngle5afterEPS_(%class.SkOpAngle*, %class.SkOpAngle*) local_unnamed_addr #0 align 2 {
  %3 = alloca <2 x double>, align 16
  %4 = bitcast <2 x double>* %3 to %struct.SkDVector*
  %5 = alloca <2 x double>, align 16
  %6 = bitcast <2 x double>* %5 to %struct.SkDVector*
  %7 = alloca i32, align 4
  %8 = alloca i32, align 4
  %9 = getelementptr inbounds %class.SkOpAngle, %class.SkOpAngle* %1, i64 0, i32 4
  %10 = load %class.SkOpAngle*, %class.SkOpAngle** %9, align 8
  %11 = getelementptr inbounds %class.SkOpAngle, %class.SkOpAngle* %0, i64 0, i32 1
  %12 = bitcast %class.SkDCurveSweep* %11 to i8*
  %13 = bitcast %class.SkOpAngle* %0 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %12, i8* align 8 %13, i64 64, i1 false)
  %14 = getelementptr inbounds %class.SkOpAngle, %class.SkOpAngle* %1, i64 0, i32 1
  %15 = getelementptr inbounds %class.SkDCurveSweep, %class.SkDCurveSweep* %14, i64 0, i32 0
  %16 = bitcast %class.SkDCurveSweep* %14 to i8*
  %17 = bitcast %class.SkOpAngle* %1 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %16, i8* align 8 %17, i64 64, i1 false)
  %18 = getelementptr inbounds %class.SkOpAngle, %class.SkOpAngle* %1, i64 0, i32 6
  %19 = load %class.SkOpSpanBase*, %class.SkOpSpanBase** %18, align 8
  %20 = getelementptr inbounds %class.SkOpSpanBase, %class.SkOpSpanBase* %19, i64 0, i32 1
  %21 = load %class.SkOpSegment*, %class.SkOpSegment** %20, align 8
  %22 = getelementptr inbounds %class.SkOpSegment, %class.SkOpSegment* %21, i64 0, i32 10
  %23 = load i32, i32* %22, align 4
  %24 = bitcast <2 x double>* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %24) #10
  %25 = bitcast %class.SkDCurveSweep* %11 to <2 x double>*
  %26 = load <2 x double>, <2 x double>* %25, align 8
  %27 = bitcast %class.SkDCurveSweep* %14 to <2 x double>*
  %28 = load <2 x double>, <2 x double>* %27, align 8
  %29 = fsub <2 x double> %26, %28
  store <2 x double> %29, <2 x double>* %3, align 16
  call void @_ZN8SkDCurve6offsetEN6SkPath4VerbERK9SkDVector(%struct.SkDCurve* %15, i32 %23, %struct.SkDVector* nonnull dereferenceable(16) %4) #10
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %24) #10
  %30 = getelementptr inbounds %class.SkOpAngle, %class.SkOpAngle* %10, i64 0, i32 1
  %31 = getelementptr inbounds %class.SkDCurveSweep, %class.SkDCurveSweep* %30, i64 0, i32 0
  %32 = bitcast %class.SkDCurveSweep* %30 to i8*
  %33 = bitcast %class.SkOpAngle* %10 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %32, i8* align 8 %33, i64 64, i1 false)
  %34 = getelementptr inbounds %class.SkOpAngle, %class.SkOpAngle* %10, i64 0, i32 6
  %35 = load %class.SkOpSpanBase*, %class.SkOpSpanBase** %34, align 8
  %36 = getelementptr inbounds %class.SkOpSpanBase, %class.SkOpSpanBase* %35, i64 0, i32 1
  %37 = load %class.SkOpSegment*, %class.SkOpSegment** %36, align 8
  %38 = getelementptr inbounds %class.SkOpSegment, %class.SkOpSegment* %37, i64 0, i32 10
  %39 = load i32, i32* %38, align 4
  %40 = bitcast <2 x double>* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %40) #10
  %41 = bitcast %class.SkDCurveSweep* %11 to <2 x double>*
  %42 = load <2 x double>, <2 x double>* %41, align 8
  %43 = bitcast %class.SkDCurveSweep* %30 to <2 x double>*
  %44 = load <2 x double>, <2 x double>* %43, align 8
  %45 = fsub <2 x double> %42, %44
  store <2 x double> %45, <2 x double>* %5, align 16
  call void @_ZN8SkDCurve6offsetEN6SkPath4VerbERK9SkDVector(%struct.SkDCurve* %31, i32 %39, %struct.SkDVector* nonnull dereferenceable(16) %6) #10
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %40) #10
  %46 = getelementptr inbounds %class.SkOpAngle, %class.SkOpAngle* %1, i64 0, i32 13
  %47 = load i8, i8* %46, align 1, !range !2
  %48 = icmp eq i8 %47, 0
  br i1 %48, label %51, label %49

49:                                               ; preds = %2
  %50 = call zeroext i1 @_ZN9SkOpAngle13computeSectorEv(%class.SkOpAngle* %1)
  br i1 %50, label %51, label %311

51:                                               ; preds = %2, %49
  %52 = getelementptr inbounds %class.SkOpAngle, %class.SkOpAngle* %0, i64 0, i32 13
  %53 = load i8, i8* %52, align 1, !range !2
  %54 = icmp eq i8 %53, 0
  br i1 %54, label %57, label %55

55:                                               ; preds = %51
  %56 = call zeroext i1 @_ZN9SkOpAngle13computeSectorEv(%class.SkOpAngle* %0)
  br i1 %56, label %57, label %311

57:                                               ; preds = %51, %55
  %58 = getelementptr inbounds %class.SkOpAngle, %class.SkOpAngle* %10, i64 0, i32 13
  %59 = load i8, i8* %58, align 1, !range !2
  %60 = icmp eq i8 %59, 0
  br i1 %60, label %63, label %61

61:                                               ; preds = %57
  %62 = call zeroext i1 @_ZN9SkOpAngle13computeSectorEv(%class.SkOpAngle* %10)
  br i1 %62, label %63, label %311

63:                                               ; preds = %57, %61
  %64 = getelementptr inbounds %class.SkOpAngle, %class.SkOpAngle* %1, i64 0, i32 9
  %65 = load i32, i32* %64, align 8
  %66 = getelementptr inbounds %class.SkOpAngle, %class.SkOpAngle* %10, i64 0, i32 9
  %67 = load i32, i32* %66, align 8
  %68 = or i32 %67, %65
  %69 = getelementptr inbounds %class.SkOpAngle, %class.SkOpAngle* %0, i64 0, i32 9
  %70 = load i32, i32* %69, align 8
  %71 = and i32 %68, %70
  %72 = icmp ne i32 %71, 0
  %73 = and i32 %67, %65
  %74 = icmp eq i32 %73, 0
  br i1 %74, label %75, label %101

75:                                               ; preds = %63
  br i1 %72, label %88, label %76

76:                                               ; preds = %75
  %77 = getelementptr inbounds %class.SkOpAngle, %class.SkOpAngle* %1, i64 0, i32 11
  %78 = load i8, i8* %77, align 1
  %79 = getelementptr inbounds %class.SkOpAngle, %class.SkOpAngle* %10, i64 0, i32 10
  %80 = load i8, i8* %79, align 4
  %81 = icmp sgt i8 %78, %80
  %82 = getelementptr inbounds %class.SkOpAngle, %class.SkOpAngle* %0, i64 0, i32 10
  %83 = load i8, i8* %82, align 4
  %84 = icmp sgt i8 %83, %78
  %85 = xor i1 %81, %84
  %86 = icmp sgt i8 %83, %80
  %87 = xor i1 %86, %85
  br label %311

88:                                               ; preds = %75
  %89 = getelementptr inbounds %class.SkOpAngle, %class.SkOpAngle* %10, i64 0, i32 10
  %90 = load i8, i8* %89, align 4
  %91 = zext i8 %90 to i32
  %92 = getelementptr inbounds %class.SkOpAngle, %class.SkOpAngle* %1, i64 0, i32 10
  %93 = load i8, i8* %92, align 4
  %94 = zext i8 %93 to i32
  %95 = sub nsw i32 %91, %94
  %96 = and i32 %95, 31
  %97 = icmp ugt i32 %96, 20
  %98 = icmp ugt i32 %96, 11
  %99 = select i1 %98, i32 -1, i32 1
  %100 = select i1 %97, i32 0, i32 %99
  br label %111

101:                                              ; preds = %63
  %102 = call i32 @_ZN9SkOpAngle9orderableEPS_(%class.SkOpAngle* %1, %class.SkOpAngle* %10)
  %103 = xor i1 %72, true
  %104 = icmp sgt i32 %102, -1
  %105 = and i1 %104, %103
  br i1 %105, label %109, label %106

106:                                              ; preds = %101
  %107 = load i32, i32* %64, align 8
  %108 = load i32, i32* %69, align 8
  br label %111

109:                                              ; preds = %101
  %110 = icmp eq i32 %102, 0
  br label %311

111:                                              ; preds = %106, %88
  %112 = phi i32 [ %108, %106 ], [ %70, %88 ]
  %113 = phi i32 [ %107, %106 ], [ %65, %88 ]
  %114 = phi i32 [ %102, %106 ], [ %100, %88 ]
  %115 = bitcast i32* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %115) #10
  store i32 -1431655766, i32* %7, align 4
  %116 = and i32 %112, %113
  %117 = icmp eq i32 %116, 0
  br i1 %117, label %121, label %118

118:                                              ; preds = %111
  %119 = call i32 @_ZN9SkOpAngle9orderableEPS_(%class.SkOpAngle* %1, %class.SkOpAngle* %0)
  %120 = load i32, i32* %69, align 8
  br label %134

121:                                              ; preds = %111
  %122 = getelementptr inbounds %class.SkOpAngle, %class.SkOpAngle* %0, i64 0, i32 10
  %123 = load i8, i8* %122, align 4
  %124 = zext i8 %123 to i32
  %125 = getelementptr inbounds %class.SkOpAngle, %class.SkOpAngle* %1, i64 0, i32 10
  %126 = load i8, i8* %125, align 4
  %127 = zext i8 %126 to i32
  %128 = sub nsw i32 %124, %127
  %129 = and i32 %128, 31
  %130 = icmp ugt i32 %129, 20
  %131 = icmp ugt i32 %129, 11
  %132 = select i1 %131, i32 -1, i32 1
  %133 = select i1 %130, i32 0, i32 %132
  br label %134

134:                                              ; preds = %121, %118
  %135 = phi i32 [ %120, %118 ], [ %112, %121 ]
  %136 = phi i32 [ %119, %118 ], [ %133, %121 ]
  store i32 %136, i32* %7, align 4
  %137 = bitcast i32* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %137) #10
  store i32 -1431655766, i32* %8, align 4
  %138 = load i32, i32* %66, align 8
  %139 = and i32 %135, %138
  %140 = icmp eq i32 %139, 0
  br i1 %140, label %143, label %141

141:                                              ; preds = %134
  %142 = call i32 @_ZN9SkOpAngle9orderableEPS_(%class.SkOpAngle* %0, %class.SkOpAngle* %10)
  br label %156

143:                                              ; preds = %134
  %144 = getelementptr inbounds %class.SkOpAngle, %class.SkOpAngle* %10, i64 0, i32 10
  %145 = load i8, i8* %144, align 4
  %146 = zext i8 %145 to i32
  %147 = getelementptr inbounds %class.SkOpAngle, %class.SkOpAngle* %0, i64 0, i32 10
  %148 = load i8, i8* %147, align 4
  %149 = zext i8 %148 to i32
  %150 = sub nsw i32 %146, %149
  %151 = and i32 %150, 31
  %152 = icmp ugt i32 %151, 20
  %153 = icmp ugt i32 %151, 11
  %154 = select i1 %153, i32 -1, i32 1
  %155 = select i1 %152, i32 0, i32 %154
  br label %156

156:                                              ; preds = %143, %141
  %157 = phi i32 [ %142, %141 ], [ %155, %143 ]
  store i32 %157, i32* %8, align 4
  call void @_ZNK9SkOpAngle17alignmentSameSideEPKS_Pi(%class.SkOpAngle* %0, %class.SkOpAngle* %1, i32* nonnull %7)
  call void @_ZNK9SkOpAngle17alignmentSameSideEPKS_Pi(%class.SkOpAngle* %0, %class.SkOpAngle* %10, i32* nonnull %8)
  %158 = load i32, i32* %7, align 4
  %159 = or i32 %158, %114
  %160 = load i32, i32* %8, align 4
  %161 = or i32 %159, %160
  %162 = icmp sgt i32 %161, -1
  br i1 %162, label %163, label %169

163:                                              ; preds = %156
  %164 = icmp eq i32 %114, 0
  %165 = and i32 %160, %158
  %166 = or i32 %160, %158
  %167 = select i1 %164, i32 %166, i32 %165
  %168 = icmp ne i32 %167, 0
  br label %309

169:                                              ; preds = %156
  %170 = icmp eq i32 %159, 0
  br i1 %170, label %171, label %183

171:                                              ; preds = %169
  %172 = getelementptr inbounds %class.SkOpAngle, %class.SkOpAngle* %0, i64 0, i32 10
  %173 = load i8, i8* %172, align 4
  %174 = sext i8 %173 to i32
  %175 = getelementptr inbounds %class.SkOpAngle, %class.SkOpAngle* %1, i64 0, i32 10
  %176 = load i8, i8* %175, align 4
  %177 = sext i8 %176 to i32
  %178 = sub nsw i32 %174, %177
  %179 = icmp slt i32 %178, 0
  %180 = sub nsw i32 0, %178
  %181 = select i1 %179, i32 %180, i32 %178
  %182 = icmp sgt i32 %181, 7
  br label %309

183:                                              ; preds = %169
  %184 = icmp eq i32 %158, 1
  %185 = icmp eq i32 %160, 0
  %186 = and i1 %184, %185
  br i1 %186, label %187, label %199

187:                                              ; preds = %183
  %188 = getelementptr inbounds %class.SkOpAngle, %class.SkOpAngle* %10, i64 0, i32 10
  %189 = load i8, i8* %188, align 4
  %190 = sext i8 %189 to i32
  %191 = getelementptr inbounds %class.SkOpAngle, %class.SkOpAngle* %0, i64 0, i32 10
  %192 = load i8, i8* %191, align 4
  %193 = sext i8 %192 to i32
  %194 = sub nsw i32 %190, %193
  %195 = icmp slt i32 %194, 0
  %196 = sub nsw i32 0, %194
  %197 = select i1 %195, i32 %196, i32 %194
  %198 = icmp sgt i32 %197, 7
  br label %309

199:                                              ; preds = %183
  %200 = icmp eq i32 %114, 1
  %201 = icmp eq i32 %160, 1
  %202 = and i1 %200, %201
  br i1 %202, label %203, label %215

203:                                              ; preds = %199
  %204 = getelementptr inbounds %class.SkOpAngle, %class.SkOpAngle* %10, i64 0, i32 10
  %205 = load i8, i8* %204, align 4
  %206 = sext i8 %205 to i32
  %207 = getelementptr inbounds %class.SkOpAngle, %class.SkOpAngle* %1, i64 0, i32 10
  %208 = load i8, i8* %207, align 4
  %209 = sext i8 %208 to i32
  %210 = sub nsw i32 %206, %209
  %211 = icmp slt i32 %210, 0
  %212 = sub nsw i32 0, %210
  %213 = select i1 %211, i32 %212, i32 %210
  %214 = icmp sgt i32 %213, 7
  br label %309

215:                                              ; preds = %199
  %216 = getelementptr inbounds %class.SkOpAngle, %class.SkOpAngle* %0, i64 0, i32 12
  %217 = load i8, i8* %216, align 2, !range !2
  %218 = icmp eq i8 %217, 0
  br i1 %218, label %219, label %227

219:                                              ; preds = %215
  %220 = getelementptr inbounds %class.SkOpAngle, %class.SkOpAngle* %1, i64 0, i32 12
  %221 = load i8, i8* %220, align 2, !range !2
  %222 = icmp eq i8 %221, 0
  br i1 %222, label %223, label %227

223:                                              ; preds = %219
  %224 = getelementptr inbounds %class.SkOpAngle, %class.SkOpAngle* %10, i64 0, i32 12
  %225 = load i8, i8* %224, align 2, !range !2
  %226 = icmp eq i8 %225, 0
  br i1 %226, label %299, label %227

227:                                              ; preds = %223, %219, %215
  %228 = getelementptr inbounds %class.SkOpAngle, %class.SkOpAngle* %0, i64 0, i32 1, i32 2
  %229 = load i8, i8* %228, align 8, !range !2
  %230 = icmp eq i8 %229, 0
  br i1 %230, label %231, label %299

231:                                              ; preds = %227
  %232 = getelementptr inbounds %class.SkOpAngle, %class.SkOpAngle* %1, i64 0, i32 1, i32 2
  %233 = load i8, i8* %232, align 8, !range !2
  %234 = icmp eq i8 %233, 0
  br i1 %234, label %235, label %299

235:                                              ; preds = %231
  %236 = getelementptr inbounds %class.SkOpAngle, %class.SkOpAngle* %10, i64 0, i32 1, i32 2
  %237 = load i8, i8* %236, align 8, !range !2
  %238 = icmp eq i8 %237, 0
  br i1 %238, label %239, label %299

239:                                              ; preds = %235
  %240 = getelementptr inbounds %class.SkOpAngle, %class.SkOpAngle* %1, i64 0, i32 0, i32 0, i32 0, i32 0, i64 0, i32 0
  %241 = load double, double* %240, align 8
  %242 = getelementptr inbounds %class.SkOpAngle, %class.SkOpAngle* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i64 0, i32 0
  %243 = load double, double* %242, align 8
  %244 = fcmp oeq double %241, %243
  br i1 %244, label %245, label %252

245:                                              ; preds = %239
  %246 = getelementptr inbounds %class.SkOpAngle, %class.SkOpAngle* %1, i64 0, i32 0, i32 0, i32 0, i32 0, i64 0, i32 1
  %247 = load double, double* %246, align 8
  %248 = getelementptr inbounds %class.SkOpAngle, %class.SkOpAngle* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i64 0, i32 1
  %249 = load double, double* %248, align 8
  %250 = fcmp oeq double %247, %249
  %251 = zext i1 %250 to i32
  br label %252

252:                                              ; preds = %239, %245
  %253 = phi i32 [ 0, %239 ], [ %251, %245 ]
  %254 = getelementptr inbounds %class.SkOpAngle, %class.SkOpAngle* %10, i64 0, i32 0, i32 0, i32 0, i32 0, i64 0, i32 0
  %255 = load double, double* %254, align 8
  %256 = fcmp oeq double %241, %255
  br i1 %256, label %257, label %263

257:                                              ; preds = %252
  %258 = getelementptr inbounds %class.SkOpAngle, %class.SkOpAngle* %1, i64 0, i32 0, i32 0, i32 0, i32 0, i64 0, i32 1
  %259 = load double, double* %258, align 8
  %260 = getelementptr inbounds %class.SkOpAngle, %class.SkOpAngle* %10, i64 0, i32 0, i32 0, i32 0, i32 0, i64 0, i32 1
  %261 = load double, double* %260, align 8
  %262 = fcmp oeq double %259, %261
  br label %263

263:                                              ; preds = %252, %257
  %264 = phi i1 [ false, %252 ], [ %262, %257 ]
  %265 = zext i1 %264 to i32
  %266 = fcmp oeq double %243, %255
  br i1 %266, label %267, label %273

267:                                              ; preds = %263
  %268 = getelementptr inbounds %class.SkOpAngle, %class.SkOpAngle* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i64 0, i32 1
  %269 = load double, double* %268, align 8
  %270 = getelementptr inbounds %class.SkOpAngle, %class.SkOpAngle* %10, i64 0, i32 0, i32 0, i32 0, i32 0, i64 0, i32 1
  %271 = load double, double* %270, align 8
  %272 = fcmp oeq double %269, %271
  br label %273

273:                                              ; preds = %263, %267
  %274 = phi i1 [ false, %263 ], [ %272, %267 ]
  %275 = zext i1 %274 to i32
  %276 = add nuw nsw i32 %253, %265
  %277 = add nuw nsw i32 %276, %275
  %278 = icmp eq i32 %277, 1
  br i1 %278, label %279, label %299

279:                                              ; preds = %273
  br i1 %264, label %280, label %286

280:                                              ; preds = %279
  %281 = call i32 @_ZN9SkOpAngle19linesOnOriginalSideEPKS_(%class.SkOpAngle* %1, %class.SkOpAngle* %0)
  %282 = call i32 @_ZN9SkOpAngle19linesOnOriginalSideEPKS_(%class.SkOpAngle* %10, %class.SkOpAngle* %0)
  %283 = xor i32 %282, %281
  %284 = icmp eq i32 %283, 1
  %285 = icmp ne i32 %281, 0
  br i1 %284, label %309, label %299

286:                                              ; preds = %279
  br i1 %274, label %287, label %293

287:                                              ; preds = %286
  %288 = call i32 @_ZN9SkOpAngle19linesOnOriginalSideEPKS_(%class.SkOpAngle* %0, %class.SkOpAngle* %1)
  %289 = call i32 @_ZN9SkOpAngle19linesOnOriginalSideEPKS_(%class.SkOpAngle* %10, %class.SkOpAngle* %1)
  %290 = xor i32 %289, %288
  %291 = icmp eq i32 %290, 1
  %292 = icmp ne i32 %289, 0
  br i1 %291, label %309, label %299

293:                                              ; preds = %286
  %294 = call i32 @_ZN9SkOpAngle19linesOnOriginalSideEPKS_(%class.SkOpAngle* %10, %class.SkOpAngle* %0)
  %295 = call i32 @_ZN9SkOpAngle19linesOnOriginalSideEPKS_(%class.SkOpAngle* %1, %class.SkOpAngle* %10)
  %296 = xor i32 %295, %294
  %297 = icmp eq i32 %296, 1
  %298 = icmp ne i32 %294, 0
  br i1 %297, label %309, label %299

299:                                              ; preds = %280, %287, %293, %235, %231, %227, %273, %223
  %300 = icmp slt i32 %114, 0
  br i1 %300, label %301, label %307

301:                                              ; preds = %299
  %302 = icmp slt i32 %158, 0
  br i1 %302, label %303, label %305

303:                                              ; preds = %301
  %304 = icmp ne i32 %160, 0
  br label %309

305:                                              ; preds = %301
  %306 = icmp ne i32 %158, 0
  br label %309

307:                                              ; preds = %299
  %308 = icmp eq i32 %114, 0
  br label %309

309:                                              ; preds = %280, %287, %293, %307, %305, %303, %203, %187, %171, %163
  %310 = phi i1 [ %168, %163 ], [ %182, %171 ], [ %198, %187 ], [ %214, %203 ], [ %304, %303 ], [ %306, %305 ], [ %308, %307 ], [ %298, %293 ], [ %292, %287 ], [ %285, %280 ]
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %137) #10
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %115) #10
  br label %311

311:                                              ; preds = %76, %109, %309, %61, %55, %49
  %312 = phi i1 [ true, %49 ], [ true, %55 ], [ true, %61 ], [ %110, %109 ], [ %310, %309 ], [ %87, %76 ]
  ret i1 %312
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #1

declare void @_ZN8SkDCurve6offsetEN6SkPath4VerbERK9SkDVector(%struct.SkDCurve*, i32, %struct.SkDVector* dereferenceable(16)) local_unnamed_addr #2

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden %class.SkOpSegment* @_ZNK9SkOpAngle7segmentEv(%class.SkOpAngle* nocapture readonly) local_unnamed_addr #3 align 2 {
  %2 = getelementptr inbounds %class.SkOpAngle, %class.SkOpAngle* %0, i64 0, i32 6
  %3 = load %class.SkOpSpanBase*, %class.SkOpSpanBase** %2, align 8
  %4 = getelementptr inbounds %class.SkOpSpanBase, %class.SkOpSpanBase* %3, i64 0, i32 1
  %5 = load %class.SkOpSegment*, %class.SkOpSegment** %4, align 8
  ret %class.SkOpSegment* %5
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN9SkOpAngle13computeSectorEv(%class.SkOpAngle*) local_unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %class.SkOpAngle, %class.SkOpAngle* %0, i64 0, i32 14
  %3 = load i8, i8* %2, align 8, !range !2
  %4 = icmp eq i8 %3, 0
  br i1 %4, label %9, label %5

5:                                                ; preds = %1
  %6 = getelementptr inbounds %class.SkOpAngle, %class.SkOpAngle* %0, i64 0, i32 12
  %7 = load i8, i8* %6, align 2, !range !2
  %8 = icmp eq i8 %7, 0
  br label %113

9:                                                ; preds = %1
  store i8 1, i8* %2, align 8
  %10 = getelementptr inbounds %class.SkOpAngle, %class.SkOpAngle* %0, i64 0, i32 6
  %11 = load %class.SkOpSpanBase*, %class.SkOpSpanBase** %10, align 8
  %12 = getelementptr inbounds %class.SkOpSpanBase, %class.SkOpSpanBase* %11, i64 0, i32 0, i32 0
  %13 = load double, double* %12, align 8
  %14 = getelementptr inbounds %class.SkOpAngle, %class.SkOpAngle* %0, i64 0, i32 7
  %15 = load %class.SkOpSpanBase*, %class.SkOpSpanBase** %14, align 8
  %16 = getelementptr inbounds %class.SkOpSpanBase, %class.SkOpSpanBase* %15, i64 0, i32 0, i32 0
  %17 = load double, double* %16, align 8
  %18 = fcmp olt double %13, %17
  %19 = fcmp une double %17, 1.000000e+00
  %20 = xor i1 %18, true
  %21 = or i1 %19, %20
  %22 = ptrtoint %class.SkOpSpanBase* %15 to i64
  br i1 %21, label %23, label %26

23:                                               ; preds = %9
  %24 = getelementptr inbounds %class.SkOpSpanBase, %class.SkOpSpanBase* %11, i64 0, i32 1
  %25 = load %class.SkOpSegment*, %class.SkOpSegment** %24, align 8
  br label %28

26:                                               ; preds = %9
  %27 = getelementptr inbounds %class.SkOpAngle, %class.SkOpAngle* %0, i64 0, i32 12
  store i8 1, i8* %27, align 2
  br label %113

28:                                               ; preds = %23, %63
  %29 = phi %class.SkOpSpanBase* [ %65, %63 ], [ %15, %23 ]
  %30 = getelementptr inbounds %class.SkOpSpanBase, %class.SkOpSpanBase* %29, i64 0, i32 1
  %31 = bitcast %class.SkOpSegment** %30 to %class.SkOpSpanBase**
  %32 = load %class.SkOpSpanBase*, %class.SkOpSpanBase** %31, align 8
  %33 = getelementptr inbounds %class.SkOpSpanBase, %class.SkOpSpanBase* %29, i64 0, i32 0, i32 0
  br label %34

34:                                               ; preds = %50, %28
  %35 = phi %class.SkOpSpanBase* [ %32, %28 ], [ %52, %50 ]
  %36 = getelementptr inbounds %class.SkOpSpanBase, %class.SkOpSpanBase* %35, i64 0, i32 1
  %37 = load %class.SkOpSegment*, %class.SkOpSegment** %36, align 8
  %38 = icmp ne %class.SkOpSegment* %37, %25
  %39 = icmp eq %class.SkOpSpanBase* %35, %29
  %40 = or i1 %39, %38
  %41 = getelementptr inbounds %class.SkOpSpanBase, %class.SkOpSpanBase* %35, i64 0, i32 0, i32 0
  %42 = load double, double* %41, align 8
  br i1 %40, label %48, label %43

43:                                               ; preds = %34
  %44 = load double, double* %33, align 8
  %45 = fsub double %42, %44
  %46 = tail call double @llvm.fabs.f64(double %45) #10
  %47 = fcmp olt double %46, 0x3E80000000000000
  br i1 %47, label %67, label %48

48:                                               ; preds = %34, %43
  %49 = fcmp oeq double %42, 1.000000e+00
  br i1 %49, label %54, label %50

50:                                               ; preds = %48
  %51 = getelementptr inbounds %class.SkOpSpanBase, %class.SkOpSpanBase* %35, i64 1, i32 0, i32 2
  %52 = load %class.SkOpSpanBase*, %class.SkOpSpanBase** %51, align 8
  %53 = icmp eq %class.SkOpSpanBase* %52, null
  br i1 %53, label %54, label %34

54:                                               ; preds = %50, %48
  br i1 %18, label %55, label %60

55:                                               ; preds = %54
  %56 = load double, double* %33, align 8
  %57 = fcmp oeq double %56, 1.000000e+00
  br i1 %57, label %74, label %58

58:                                               ; preds = %55
  %59 = getelementptr inbounds %class.SkOpSpanBase, %class.SkOpSpanBase* %29, i64 1, i32 0, i32 2
  br label %63

60:                                               ; preds = %54
  %61 = getelementptr inbounds %class.SkOpSpanBase, %class.SkOpSpanBase* %29, i64 0, i32 4
  %62 = bitcast %class.SkOpSpan** %61 to %class.SkOpSpanBase**
  br label %63

63:                                               ; preds = %58, %60
  %64 = phi %class.SkOpSpanBase** [ %59, %58 ], [ %62, %60 ]
  %65 = load %class.SkOpSpanBase*, %class.SkOpSpanBase** %64, align 8
  %66 = icmp eq %class.SkOpSpanBase* %65, null
  br i1 %66, label %67, label %28

67:                                               ; preds = %63, %43
  %68 = phi %class.SkOpSpanBase* [ %29, %43 ], [ null, %63 ]
  %69 = icmp ne %class.SkOpSpanBase* %68, null
  br i1 %18, label %70, label %82

70:                                               ; preds = %67
  br i1 %69, label %71, label %74

71:                                               ; preds = %70
  %72 = getelementptr inbounds %class.SkOpSpanBase, %class.SkOpSpanBase* %68, i64 0, i32 4
  %73 = load %class.SkOpSpan*, %class.SkOpSpan** %72, align 8
  br label %78

74:                                               ; preds = %55, %70
  %75 = getelementptr inbounds %class.SkOpSpanBase, %class.SkOpSpanBase* %15, i64 0, i32 1
  %76 = load %class.SkOpSegment*, %class.SkOpSegment** %75, align 8
  %77 = getelementptr inbounds %class.SkOpSegment, %class.SkOpSegment* %76, i64 0, i32 0
  br label %78

78:                                               ; preds = %74, %71
  %79 = phi %class.SkOpSpanBase* [ %68, %71 ], [ null, %74 ]
  %80 = phi %class.SkOpSpan* [ %73, %71 ], [ %77, %74 ]
  %81 = bitcast %class.SkOpSpan* %80 to %class.SkOpSpanBase*
  br label %90

82:                                               ; preds = %67
  br i1 %69, label %83, label %86

83:                                               ; preds = %82
  %84 = getelementptr inbounds %class.SkOpSpanBase, %class.SkOpSpanBase* %68, i64 1, i32 0, i32 2
  %85 = load %class.SkOpSpanBase*, %class.SkOpSpanBase** %84, align 8
  br label %90

86:                                               ; preds = %82
  %87 = getelementptr inbounds %class.SkOpSpanBase, %class.SkOpSpanBase* %15, i64 0, i32 1
  %88 = load %class.SkOpSegment*, %class.SkOpSegment** %87, align 8
  %89 = getelementptr inbounds %class.SkOpSegment, %class.SkOpSegment* %88, i64 0, i32 1
  br label %90

90:                                               ; preds = %83, %86, %78
  %91 = phi %class.SkOpSpanBase* [ %79, %78 ], [ %68, %83 ], [ null, %86 ]
  %92 = phi %class.SkOpSpanBase* [ %81, %78 ], [ %85, %83 ], [ %89, %86 ]
  %93 = icmp eq %class.SkOpSpanBase* %91, %15
  %94 = icmp eq %class.SkOpSpanBase* %92, %15
  %95 = or i1 %93, %94
  %96 = icmp eq %class.SkOpSpanBase* %92, %11
  %97 = or i1 %96, %95
  br i1 %97, label %98, label %100

98:                                               ; preds = %90
  %99 = getelementptr inbounds %class.SkOpAngle, %class.SkOpAngle* %0, i64 0, i32 12
  store i8 1, i8* %99, align 2
  br label %113

100:                                              ; preds = %90
  %101 = getelementptr inbounds %class.SkOpSpanBase, %class.SkOpSpanBase* %92, i64 0, i32 0, i32 0
  %102 = load double, double* %101, align 8
  %103 = fcmp olt double %13, %102
  %104 = xor i1 %18, %103
  br i1 %104, label %105, label %107

105:                                              ; preds = %100
  %106 = getelementptr inbounds %class.SkOpAngle, %class.SkOpAngle* %0, i64 0, i32 12
  store i8 1, i8* %106, align 2
  br label %113

107:                                              ; preds = %100
  %108 = bitcast %class.SkOpSpanBase** %14 to i64*
  store %class.SkOpSpanBase* %92, %class.SkOpSpanBase** %14, align 8
  %109 = getelementptr inbounds %class.SkOpAngle, %class.SkOpAngle* %0, i64 0, i32 8
  store %class.SkOpSpanBase* %92, %class.SkOpSpanBase** %109, align 8
  tail call void @_ZN9SkOpAngle8setSpansEv(%class.SkOpAngle* %0)
  tail call void @_ZN9SkOpAngle9setSectorEv(%class.SkOpAngle* %0)
  store i64 %22, i64* %108, align 8
  %110 = getelementptr inbounds %class.SkOpAngle, %class.SkOpAngle* %0, i64 0, i32 12
  %111 = load i8, i8* %110, align 2, !range !2
  %112 = icmp eq i8 %111, 0
  br label %113

113:                                              ; preds = %26, %107, %105, %98, %5
  %114 = phi i1 [ %8, %5 ], [ false, %26 ], [ false, %98 ], [ false, %105 ], [ %112, %107 ]
  ret i1 %114
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @_ZN9SkOpAngle9orderableEPS_(%class.SkOpAngle* nocapture, %class.SkOpAngle* nocapture) local_unnamed_addr #0 align 2 {
  %3 = alloca <2 x double>, align 16
  %4 = bitcast <2 x double>* %3 to %struct.SkDPoint*
  %5 = alloca <2 x double>, align 16
  %6 = bitcast <2 x double>* %5 to %struct.SkDVector*
  %7 = alloca <2 x double>, align 16
  %8 = bitcast <2 x double>* %7 to %struct.SkDPoint*
  %9 = alloca <2 x double>, align 16
  %10 = bitcast <2 x double>* %9 to %struct.SkDVector*
  %11 = getelementptr inbounds %class.SkOpAngle, %class.SkOpAngle* %0, i64 0, i32 1, i32 2
  %12 = load i8, i8* %11, align 8, !range !2
  %13 = icmp eq i8 %12, 0
  %14 = getelementptr inbounds %class.SkOpAngle, %class.SkOpAngle* %1, i64 0, i32 1, i32 2
  %15 = load i8, i8* %14, align 8, !range !2
  %16 = icmp ne i8 %15, 0
  br i1 %13, label %17, label %64

17:                                               ; preds = %2
  br i1 %16, label %39, label %18

18:                                               ; preds = %17
  %19 = getelementptr inbounds %class.SkOpAngle, %class.SkOpAngle* %0, i64 0, i32 3, i32 1
  %20 = load double, double* %19, align 8
  %21 = getelementptr inbounds %class.SkOpAngle, %class.SkOpAngle* %0, i64 0, i32 3, i32 0
  %22 = load double, double* %21, align 8
  %23 = getelementptr inbounds %class.SkOpAngle, %class.SkOpAngle* %1, i64 0, i32 3, i32 1
  %24 = load double, double* %23, align 8
  %25 = getelementptr inbounds %class.SkOpAngle, %class.SkOpAngle* %1, i64 0, i32 3, i32 0
  %26 = load double, double* %25, align 8
  %27 = fmul double %20, %26
  %28 = fmul double %22, %24
  %29 = fcmp oeq double %27, %28
  br i1 %29, label %33, label %30

30:                                               ; preds = %18
  %31 = fcmp ogt double %27, %28
  %32 = zext i1 %31 to i32
  br label %102

33:                                               ; preds = %18
  %34 = fmul double %20, %24
  %35 = fcmp uge double %34, 0.000000e+00
  %36 = fmul double %22, %26
  %37 = fcmp uge double %36, 0.000000e+00
  %38 = and i1 %35, %37
  br i1 %38, label %99, label %102

39:                                               ; preds = %17
  %40 = bitcast <2 x double>* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %40) #10
  %41 = getelementptr inbounds %class.SkOpAngle, %class.SkOpAngle* %0, i64 0, i32 1, i32 0
  %42 = bitcast %struct.SkDCurve* %41 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 16 %40, i8* align 8 %42, i64 16, i1 false) #10
  %43 = bitcast <2 x double>* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %43) #10
  %44 = getelementptr inbounds %class.SkOpAngle, %class.SkOpAngle* %0, i64 0, i32 1, i32 0, i32 0, i32 0, i32 0, i64 1, i32 0
  %45 = bitcast double* %44 to <2 x double>*
  %46 = load <2 x double>, <2 x double>* %45, align 8
  %47 = load <2 x double>, <2 x double>* %3, align 16
  %48 = fsub <2 x double> %46, %47
  store <2 x double> %48, <2 x double>* %5, align 16
  %49 = call i32 @_ZNK9SkOpAngle13lineOnOneSideERK8SkDPointRK9SkDVectorPKS_b(%class.SkOpAngle* undef, %struct.SkDPoint* nonnull dereferenceable(16) %4, %struct.SkDVector* nonnull dereferenceable(16) %6, %class.SkOpAngle* %1, i1 zeroext false) #10
  %50 = icmp eq i32 %49, -2
  br i1 %50, label %51, label %53

51:                                               ; preds = %39
  %52 = getelementptr inbounds %class.SkOpAngle, %class.SkOpAngle* %0, i64 0, i32 12
  store i8 1, i8* %52, align 2
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %43) #10
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %40) #10
  br label %99

53:                                               ; preds = %39
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %43) #10
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %40) #10
  %54 = icmp sgt i32 %49, -1
  br i1 %54, label %102, label %55

55:                                               ; preds = %53
  %56 = getelementptr inbounds %class.SkOpAngle, %class.SkOpAngle* %0, i64 0, i32 12
  %57 = load i8, i8* %56, align 2, !range !2
  %58 = icmp eq i8 %57, 0
  br i1 %58, label %59, label %99

59:                                               ; preds = %55
  %60 = getelementptr inbounds %class.SkOpAngle, %class.SkOpAngle* %1, i64 0, i32 2
  %61 = load double, double* %60, align 8
  %62 = tail call double @llvm.fabs.f64(double %61) #10
  %63 = fcmp olt double %62, 0x3E80000000000000
  br i1 %63, label %99, label %96

64:                                               ; preds = %2
  br i1 %16, label %93, label %65

65:                                               ; preds = %64
  %66 = bitcast <2 x double>* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %66) #10
  %67 = getelementptr inbounds %class.SkOpAngle, %class.SkOpAngle* %1, i64 0, i32 1, i32 0
  %68 = bitcast %struct.SkDCurve* %67 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 16 %66, i8* align 8 %68, i64 16, i1 false) #10
  %69 = bitcast <2 x double>* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %69) #10
  %70 = getelementptr inbounds %class.SkOpAngle, %class.SkOpAngle* %1, i64 0, i32 1, i32 0, i32 0, i32 0, i32 0, i64 1, i32 0
  %71 = bitcast double* %70 to <2 x double>*
  %72 = load <2 x double>, <2 x double>* %71, align 8
  %73 = load <2 x double>, <2 x double>* %7, align 16
  %74 = fsub <2 x double> %72, %73
  store <2 x double> %74, <2 x double>* %9, align 16
  %75 = call i32 @_ZNK9SkOpAngle13lineOnOneSideERK8SkDPointRK9SkDVectorPKS_b(%class.SkOpAngle* undef, %struct.SkDPoint* nonnull dereferenceable(16) %8, %struct.SkDVector* nonnull dereferenceable(16) %10, %class.SkOpAngle* %0, i1 zeroext false) #10
  %76 = icmp eq i32 %75, -2
  br i1 %76, label %77, label %79

77:                                               ; preds = %65
  %78 = getelementptr inbounds %class.SkOpAngle, %class.SkOpAngle* %1, i64 0, i32 12
  store i8 1, i8* %78, align 2
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %69) #10
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %66) #10
  br label %99

79:                                               ; preds = %65
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %69) #10
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %66) #10
  %80 = icmp sgt i32 %75, -1
  br i1 %80, label %81, label %84

81:                                               ; preds = %79
  %82 = icmp eq i32 %75, 0
  %83 = zext i1 %82 to i32
  br label %102

84:                                               ; preds = %79
  %85 = getelementptr inbounds %class.SkOpAngle, %class.SkOpAngle* %1, i64 0, i32 12
  %86 = load i8, i8* %85, align 2, !range !2
  %87 = icmp eq i8 %86, 0
  br i1 %87, label %88, label %99

88:                                               ; preds = %84
  %89 = getelementptr inbounds %class.SkOpAngle, %class.SkOpAngle* %0, i64 0, i32 2
  %90 = load double, double* %89, align 8
  %91 = tail call double @llvm.fabs.f64(double %90) #10
  %92 = fcmp olt double %91, 0x3E80000000000000
  br i1 %92, label %99, label %96

93:                                               ; preds = %64
  %94 = tail call i32 @_ZN9SkOpAngle18convexHullOverlapsEPKS_(%class.SkOpAngle* %0, %class.SkOpAngle* %1)
  %95 = icmp sgt i32 %94, -1
  br i1 %95, label %102, label %96

96:                                               ; preds = %88, %93, %59
  %97 = tail call zeroext i1 @_ZN9SkOpAngle13endsIntersectEPS_(%class.SkOpAngle* %0, %class.SkOpAngle* %1)
  %98 = zext i1 %97 to i32
  br label %102

99:                                               ; preds = %77, %51, %84, %55, %88, %59, %33
  %100 = getelementptr inbounds %class.SkOpAngle, %class.SkOpAngle* %0, i64 0, i32 12
  store i8 1, i8* %100, align 2
  %101 = getelementptr inbounds %class.SkOpAngle, %class.SkOpAngle* %1, i64 0, i32 12
  store i8 1, i8* %101, align 2
  br label %102

102:                                              ; preds = %30, %93, %53, %33, %99, %96, %81
  %103 = phi i32 [ %98, %96 ], [ %83, %81 ], [ -1, %99 ], [ 1, %33 ], [ %49, %53 ], [ %94, %93 ], [ %32, %30 ]
  ret i32 %103
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZNK9SkOpAngle17alignmentSameSideEPKS_Pi(%class.SkOpAngle* nocapture readonly, %class.SkOpAngle* nocapture readonly, i32* nocapture) local_unnamed_addr #0 align 2 {
  %4 = load i32, i32* %2, align 4
  %5 = icmp slt i32 %4, 0
  br i1 %5, label %89, label %6

6:                                                ; preds = %3
  %7 = getelementptr inbounds %class.SkOpAngle, %class.SkOpAngle* %0, i64 0, i32 1, i32 2
  %8 = load i8, i8* %7, align 8, !range !2
  %9 = icmp eq i8 %8, 0
  br i1 %9, label %10, label %89

10:                                               ; preds = %6
  %11 = getelementptr inbounds %class.SkOpAngle, %class.SkOpAngle* %1, i64 0, i32 1, i32 2
  %12 = load i8, i8* %11, align 8, !range !2
  %13 = icmp eq i8 %12, 0
  br i1 %13, label %14, label %89

14:                                               ; preds = %10
  %15 = getelementptr inbounds %class.SkOpAngle, %class.SkOpAngle* %1, i64 0, i32 1, i32 0, i32 0, i32 0, i32 0, i64 0, i32 0
  %16 = bitcast double* %15 to <2 x double>*
  %17 = load <2 x double>, <2 x double>* %16, align 8
  %18 = extractelement <2 x double> %17, i32 0
  %19 = bitcast %class.SkOpAngle* %1 to <2 x double>*
  %20 = load <2 x double>, <2 x double>* %19, align 8
  %21 = extractelement <2 x double> %20, i32 0
  %22 = fcmp oeq double %18, %21
  %23 = extractelement <2 x double> %17, i32 1
  %24 = extractelement <2 x double> %20, i32 1
  %25 = fcmp oeq double %23, %24
  %26 = and i1 %22, %25
  br i1 %26, label %89, label %27

27:                                               ; preds = %14
  %28 = getelementptr inbounds %class.SkOpAngle, %class.SkOpAngle* %0, i64 0, i32 6
  %29 = load %class.SkOpSpanBase*, %class.SkOpSpanBase** %28, align 8
  %30 = getelementptr inbounds %class.SkOpSpanBase, %class.SkOpSpanBase* %29, i64 0, i32 1
  %31 = load %class.SkOpSegment*, %class.SkOpSegment** %30, align 8
  %32 = getelementptr inbounds %class.SkOpSegment, %class.SkOpSegment* %31, i64 0, i32 10
  %33 = load i32, i32* %32, align 4
  %34 = add i32 %33, 1
  %35 = ashr i32 %34, 2
  %36 = getelementptr inbounds %class.SkOpAngle, %class.SkOpAngle* %1, i64 0, i32 1, i32 0, i32 0, i32 0, i32 0, i64 1, i32 0
  %37 = bitcast double* %36 to <2 x double>*
  %38 = load <2 x double>, <2 x double>* %37, align 8
  %39 = fsub <2 x double> %38, %17
  %40 = getelementptr inbounds %class.SkOpAngle, %class.SkOpAngle* %1, i64 0, i32 0, i32 0, i32 0, i32 0, i64 1, i32 0
  %41 = bitcast double* %40 to <2 x double>*
  %42 = load <2 x double>, <2 x double>* %41, align 8
  %43 = fsub <2 x double> %42, %20
  %44 = shufflevector <2 x double> %43, <2 x double> undef, <2 x i32> <i32 1, i32 0>
  %45 = icmp sgt i32 %33, %35
  br i1 %45, label %46, label %89

46:                                               ; preds = %27
  %47 = sub i32 %34, %35
  %48 = zext i32 %47 to i64
  %49 = bitcast %class.SkOpAngle* %1 to <2 x double>*
  %50 = bitcast double* %15 to <2 x double>*
  br label %56

51:                                               ; preds = %56
  %52 = add nuw nsw i64 %57, 1
  %53 = icmp eq i64 %52, %48
  br i1 %53, label %89, label %54

54:                                               ; preds = %51
  %55 = load <2 x double>, <2 x double>* %50, align 8
  br label %56

56:                                               ; preds = %54, %46
  %57 = phi i64 [ 1, %46 ], [ %52, %54 ]
  %58 = phi <2 x double> [ %17, %46 ], [ %55, %54 ]
  %59 = getelementptr inbounds %class.SkOpAngle, %class.SkOpAngle* %0, i64 0, i32 1, i32 0, i32 0, i32 0, i32 0, i64 %57, i32 0
  %60 = bitcast double* %59 to <2 x double>*
  %61 = load <2 x double>, <2 x double>* %60, align 8
  %62 = fsub <2 x double> %61, %58
  %63 = fmul <2 x double> %44, %62
  %64 = extractelement <2 x double> %63, i32 1
  %65 = fptrunc double %64 to float
  %66 = extractelement <2 x double> %63, i32 0
  %67 = fptrunc double %66 to float
  %68 = tail call zeroext i1 @_Z15AlmostEqualUlpsff(float %65, float %67) #10
  %69 = fsub double %64, %66
  %70 = select i1 %68, double 0.000000e+00, double %69
  %71 = bitcast double* %59 to <2 x double>*
  %72 = load <2 x double>, <2 x double>* %71, align 8
  %73 = load <2 x double>, <2 x double>* %49, align 8
  %74 = fsub <2 x double> %72, %73
  %75 = shufflevector <2 x double> %74, <2 x double> undef, <2 x i32> <i32 1, i32 0>
  %76 = fmul <2 x double> %39, %75
  %77 = extractelement <2 x double> %76, i32 0
  %78 = fptrunc double %77 to float
  %79 = extractelement <2 x double> %76, i32 1
  %80 = fptrunc double %79 to float
  %81 = tail call zeroext i1 @_Z15AlmostEqualUlpsff(float %78, float %80) #10
  %82 = fsub double %77, %79
  %83 = select i1 %81, double 0.000000e+00, double %82
  %84 = fmul double %70, %83
  %85 = fcmp olt double %84, 0.000000e+00
  br i1 %85, label %86, label %51

86:                                               ; preds = %56
  %87 = load i32, i32* %2, align 4
  %88 = xor i32 %87, 1
  store i32 %88, i32* %2, align 4
  br label %89

89:                                               ; preds = %51, %14, %27, %10, %6, %86, %3
  ret void
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden zeroext i1 @_ZNK9SkOpAngle14oppositePlanesEPKS_(%class.SkOpAngle* nocapture readonly, %class.SkOpAngle* nocapture readonly) local_unnamed_addr #3 align 2 {
  %3 = getelementptr inbounds %class.SkOpAngle, %class.SkOpAngle* %1, i64 0, i32 10
  %4 = load i8, i8* %3, align 4
  %5 = sext i8 %4 to i32
  %6 = getelementptr inbounds %class.SkOpAngle, %class.SkOpAngle* %0, i64 0, i32 10
  %7 = load i8, i8* %6, align 4
  %8 = sext i8 %7 to i32
  %9 = sub nsw i32 %5, %8
  %10 = icmp slt i32 %9, 0
  %11 = sub nsw i32 0, %9
  %12 = select i1 %10, i32 %11, i32 %9
  %13 = icmp sgt i32 %12, 7
  ret i1 %13
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @_ZN9SkOpAngle19linesOnOriginalSideEPKS_(%class.SkOpAngle* nocapture, %class.SkOpAngle* nocapture readonly) local_unnamed_addr #0 align 2 {
  %3 = bitcast %class.SkOpAngle* %0 to <2 x double>*
  %4 = load <2 x double>, <2 x double>* %3, align 8
  %5 = getelementptr inbounds %class.SkOpAngle, %class.SkOpAngle* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i64 1, i32 0
  %6 = bitcast double* %5 to <2 x double>*
  %7 = load <2 x double>, <2 x double>* %6, align 8
  %8 = fsub <2 x double> %7, %4
  %9 = bitcast %class.SkOpAngle* %1 to <2 x double>*
  %10 = load <2 x double>, <2 x double>* %9, align 8
  %11 = fsub <2 x double> %10, %4
  %12 = shufflevector <2 x double> %8, <2 x double> undef, <2 x i32> <i32 1, i32 0>
  %13 = fmul <2 x double> %12, %11
  %14 = extractelement <2 x double> %8, i32 0
  %15 = extractelement <2 x double> %11, i32 0
  %16 = fmul double %14, %15
  %17 = extractelement <2 x double> %8, i32 1
  %18 = extractelement <2 x double> %11, i32 1
  %19 = fmul double %17, %18
  %20 = fadd double %16, %19
  %21 = extractelement <2 x double> %13, i32 1
  %22 = fptrunc double %21 to float
  %23 = extractelement <2 x double> %13, i32 0
  %24 = fptrunc double %23 to float
  %25 = tail call zeroext i1 @_Z16AlmostBequalUlpsff(float %22, float %24) #10
  %26 = fsub double %21, %23
  %27 = select i1 %25, double 0.000000e+00, double %26
  %28 = getelementptr inbounds %class.SkOpAngle, %class.SkOpAngle* %1, i64 0, i32 0, i32 0, i32 0, i32 0, i64 1, i32 0
  %29 = bitcast double* %28 to <2 x double>*
  %30 = load <2 x double>, <2 x double>* %29, align 8
  %31 = fsub <2 x double> %30, %4
  %32 = shufflevector <2 x double> %31, <2 x double> undef, <2 x i32> <i32 1, i32 0>
  %33 = fmul <2 x double> %8, %32
  %34 = extractelement <2 x double> %31, i32 0
  %35 = fmul double %14, %34
  %36 = extractelement <2 x double> %31, i32 1
  %37 = fmul double %17, %36
  %38 = fadd double %35, %37
  %39 = extractelement <2 x double> %33, i32 0
  %40 = fptrunc double %39 to float
  %41 = extractelement <2 x double> %33, i32 1
  %42 = fptrunc double %41 to float
  %43 = tail call zeroext i1 @_Z16AlmostBequalUlpsff(float %40, float %42) #10
  %44 = fsub double %39, %41
  %45 = select i1 %43, double 0.000000e+00, double %44
  %46 = fmul double %27, %45
  %47 = fcmp olt double %46, 0.000000e+00
  br i1 %47, label %68, label %48

48:                                               ; preds = %2
  %49 = fcmp une double %27, 0.000000e+00
  br i1 %49, label %50, label %53

50:                                               ; preds = %48
  %51 = fcmp olt double %27, 0.000000e+00
  %52 = zext i1 %51 to i32
  br label %68

53:                                               ; preds = %48
  %54 = fcmp une double %45, 0.000000e+00
  br i1 %54, label %55, label %58

55:                                               ; preds = %53
  %56 = fcmp olt double %45, 0.000000e+00
  %57 = zext i1 %56 to i32
  br label %68

58:                                               ; preds = %53
  %59 = fcmp oeq double %20, 0.000000e+00
  %60 = fcmp olt double %38, 0.000000e+00
  %61 = and i1 %59, %60
  br i1 %61, label %68, label %62

62:                                               ; preds = %58
  %63 = fcmp uge double %20, 0.000000e+00
  %64 = fcmp une double %38, 0.000000e+00
  %65 = or i1 %63, %64
  br i1 %65, label %66, label %68

66:                                               ; preds = %62
  %67 = getelementptr inbounds %class.SkOpAngle, %class.SkOpAngle* %0, i64 0, i32 12
  store i8 1, i8* %67, align 2
  br label %68

68:                                               ; preds = %58, %62, %2, %66, %55, %50
  %69 = phi i32 [ %52, %50 ], [ %57, %55 ], [ -1, %66 ], [ -1, %2 ], [ 2, %62 ], [ 2, %58 ]
  ret i32 %69
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @_ZNK9SkOpAngle13lineOnOneSideERK8SkDPointRK9SkDVectorPKS_b(%class.SkOpAngle* nocapture readnone, %struct.SkDPoint* nocapture readonly dereferenceable(16), %struct.SkDVector* nocapture readonly dereferenceable(16), %class.SkOpAngle* nocapture readonly, i1 zeroext) local_unnamed_addr #0 align 2 {
  %6 = alloca [3 x double], align 16
  %7 = bitcast [3 x double]* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %7) #10
  %8 = getelementptr inbounds [3 x double], [3 x double]* %6, i64 0, i64 0
  %9 = getelementptr inbounds [3 x double], [3 x double]* %6, i64 0, i64 1
  %10 = getelementptr inbounds [3 x double], [3 x double]* %6, i64 0, i64 2
  %11 = getelementptr inbounds %class.SkOpAngle, %class.SkOpAngle* %3, i64 0, i32 6
  %12 = bitcast [3 x double]* %6 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %12, i8 -1, i64 24, i1 false)
  %13 = load %class.SkOpSpanBase*, %class.SkOpSpanBase** %11, align 8
  %14 = getelementptr inbounds %class.SkOpSpanBase, %class.SkOpSpanBase* %13, i64 0, i32 1
  %15 = load %class.SkOpSegment*, %class.SkOpSegment** %14, align 8
  %16 = getelementptr inbounds %class.SkOpSegment, %class.SkOpSegment* %15, i64 0, i32 10
  %17 = load i32, i32* %16, align 4
  %18 = add i32 %17, 1
  %19 = ashr i32 %18, 2
  %20 = getelementptr inbounds %class.SkOpAngle, %class.SkOpAngle* %3, i64 0, i32 0
  %21 = getelementptr inbounds %class.SkOpAngle, %class.SkOpAngle* %3, i64 0, i32 1, i32 0
  %22 = select i1 %4, %struct.SkDCurve* %20, %struct.SkDCurve* %21
  %23 = icmp sgt i32 %17, %19
  br i1 %23, label %24, label %34

24:                                               ; preds = %5
  %25 = getelementptr inbounds %struct.SkDVector, %struct.SkDVector* %2, i64 0, i32 0
  %26 = getelementptr inbounds %struct.SkDPoint, %struct.SkDPoint* %1, i64 0, i32 1
  %27 = getelementptr inbounds %struct.SkDVector, %struct.SkDVector* %2, i64 0, i32 1
  %28 = getelementptr inbounds %struct.SkDPoint, %struct.SkDPoint* %1, i64 0, i32 0
  %29 = sub i32 %18, %19
  %30 = zext i32 %29 to i64
  br label %39

31:                                               ; preds = %39
  %32 = load double, double* %8, align 16
  %33 = load double, double* %9, align 8
  br label %34

34:                                               ; preds = %5, %31
  %35 = phi double [ %33, %31 ], [ 0xFFFFFFFFFFFFFFFF, %5 ]
  %36 = phi double [ %32, %31 ], [ 0xFFFFFFFFFFFFFFFF, %5 ]
  %37 = fmul double %36, %35
  %38 = fcmp olt double %37, 0.000000e+00
  br i1 %38, label %88, label %62

39:                                               ; preds = %39, %24
  %40 = phi i64 [ %60, %39 ], [ 1, %24 ]
  %41 = load double, double* %25, align 8
  %42 = getelementptr inbounds %struct.SkDCurve, %struct.SkDCurve* %22, i64 0, i32 0, i32 0, i32 0, i64 %40, i32 1
  %43 = load double, double* %42, align 8
  %44 = load double, double* %26, align 8
  %45 = fsub double %43, %44
  %46 = fmul double %41, %45
  %47 = load double, double* %27, align 8
  %48 = getelementptr inbounds %struct.SkDCurve, %struct.SkDCurve* %22, i64 0, i32 0, i32 0, i32 0, i64 %40, i32 0
  %49 = load double, double* %48, align 8
  %50 = load double, double* %28, align 8
  %51 = fsub double %49, %50
  %52 = fmul double %47, %51
  %53 = fptrunc double %46 to float
  %54 = fptrunc double %52 to float
  %55 = tail call zeroext i1 @_Z16AlmostBequalUlpsff(float %53, float %54) #10
  %56 = fsub double %46, %52
  %57 = select i1 %55, double 0.000000e+00, double %56
  %58 = add nsw i64 %40, -1
  %59 = getelementptr inbounds [3 x double], [3 x double]* %6, i64 0, i64 %58
  store double %57, double* %59, align 8
  %60 = add nuw nsw i64 %40, 1
  %61 = icmp eq i64 %60, %30
  br i1 %61, label %31, label %39

62:                                               ; preds = %34
  %63 = icmp eq i32 %17, 4
  br i1 %63, label %64, label %71

64:                                               ; preds = %62
  %65 = load double, double* %10, align 16
  %66 = fmul double %36, %65
  %67 = fcmp olt double %66, 0.000000e+00
  %68 = fmul double %35, %65
  %69 = fcmp olt double %68, 0.000000e+00
  %70 = or i1 %67, %69
  br i1 %70, label %88, label %71

71:                                               ; preds = %64, %62
  %72 = fcmp une double %36, 0.000000e+00
  br i1 %72, label %73, label %76

73:                                               ; preds = %71
  %74 = fcmp olt double %36, 0.000000e+00
  %75 = zext i1 %74 to i32
  br label %88

76:                                               ; preds = %71
  %77 = fcmp une double %35, 0.000000e+00
  br i1 %77, label %78, label %81

78:                                               ; preds = %76
  %79 = fcmp olt double %35, 0.000000e+00
  %80 = zext i1 %79 to i32
  br label %88

81:                                               ; preds = %76
  br i1 %63, label %82, label %88

82:                                               ; preds = %81
  %83 = load double, double* %10, align 16
  %84 = fcmp une double %83, 0.000000e+00
  br i1 %84, label %85, label %88

85:                                               ; preds = %82
  %86 = fcmp olt double %83, 0.000000e+00
  %87 = zext i1 %86 to i32
  br label %88

88:                                               ; preds = %81, %82, %64, %34, %85, %78, %73
  %89 = phi i32 [ %75, %73 ], [ %80, %78 ], [ %87, %85 ], [ -1, %34 ], [ -1, %64 ], [ -2, %82 ], [ -2, %81 ]
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %7) #10
  ret i32 %89
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @_ZN9SkOpAngle13lineOnOneSideEPKS_b(%class.SkOpAngle* nocapture, %class.SkOpAngle* nocapture readonly, i1 zeroext) local_unnamed_addr #0 align 2 {
  %4 = alloca <2 x double>, align 16
  %5 = bitcast <2 x double>* %4 to %struct.SkDPoint*
  %6 = alloca <2 x double>, align 16
  %7 = bitcast <2 x double>* %6 to %struct.SkDVector*
  %8 = bitcast <2 x double>* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %8) #10
  %9 = getelementptr inbounds %class.SkOpAngle, %class.SkOpAngle* %0, i64 0, i32 1, i32 0
  %10 = bitcast %struct.SkDCurve* %9 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 16 %8, i8* align 8 %10, i64 16, i1 false)
  %11 = bitcast <2 x double>* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %11) #10
  %12 = getelementptr inbounds %class.SkOpAngle, %class.SkOpAngle* %0, i64 0, i32 1, i32 0, i32 0, i32 0, i32 0, i64 1, i32 0
  %13 = bitcast double* %12 to <2 x double>*
  %14 = load <2 x double>, <2 x double>* %13, align 8
  %15 = load <2 x double>, <2 x double>* %4, align 16
  %16 = fsub <2 x double> %14, %15
  store <2 x double> %16, <2 x double>* %6, align 16
  %17 = call i32 @_ZNK9SkOpAngle13lineOnOneSideERK8SkDPointRK9SkDVectorPKS_b(%class.SkOpAngle* undef, %struct.SkDPoint* nonnull dereferenceable(16) %5, %struct.SkDVector* nonnull dereferenceable(16) %7, %class.SkOpAngle* %1, i1 zeroext %2)
  %18 = icmp eq i32 %17, -2
  br i1 %18, label %19, label %21

19:                                               ; preds = %3
  %20 = getelementptr inbounds %class.SkOpAngle, %class.SkOpAngle* %0, i64 0, i32 12
  store i8 1, i8* %20, align 2
  br label %21

21:                                               ; preds = %19, %3
  %22 = phi i32 [ -1, %19 ], [ %17, %3 ]
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %11) #10
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %8) #10
  ret i32 %22
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden zeroext i1 @_ZNK9SkOpAngle16checkCrossesZeroEv(%class.SkOpAngle* nocapture readonly) local_unnamed_addr #3 align 2 {
  %2 = getelementptr inbounds %class.SkOpAngle, %class.SkOpAngle* %0, i64 0, i32 10
  %3 = getelementptr inbounds %class.SkOpAngle, %class.SkOpAngle* %0, i64 0, i32 11
  %4 = load i8, i8* %3, align 1
  %5 = load i8, i8* %2, align 1
  %6 = icmp slt i8 %4, %5
  %7 = select i1 %6, i8 %4, i8 %5
  %8 = sext i8 %7 to i32
  %9 = icmp slt i8 %5, %4
  %10 = select i1 %9, i8 %4, i8 %5
  %11 = sext i8 %10 to i32
  %12 = sub nsw i32 %11, %8
  %13 = icmp sgt i32 %12, 16
  ret i1 %13
}

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN9SkOpAngle13checkParallelEPS_(%class.SkOpAngle* nocapture, %class.SkOpAngle* nocapture) local_unnamed_addr #0 align 2 {
  %3 = alloca [2 x %struct.SkDVector], align 16
  %4 = alloca i8, align 1
  %5 = bitcast [2 x %struct.SkDVector]* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %5) #10
  %6 = getelementptr inbounds [2 x %struct.SkDVector], [2 x %struct.SkDVector]* %3, i64 0, i64 1
  %7 = getelementptr inbounds %class.SkOpAngle, %class.SkOpAngle* %0, i64 0, i32 1
  %8 = getelementptr inbounds %class.SkOpAngle, %class.SkOpAngle* %0, i64 0, i32 1, i32 3
  %9 = bitcast [2 x %struct.SkDVector]* %3 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %9, i8 -1, i64 32, i1 false)
  %10 = load i8, i8* %8, align 1, !range !2
  %11 = icmp eq i8 %10, 0
  br i1 %11, label %14, label %12

12:                                               ; preds = %2
  %13 = getelementptr inbounds %class.SkOpAngle, %class.SkOpAngle* %0, i64 0, i32 1, i32 1, i64 0
  br label %23

14:                                               ; preds = %2
  %15 = getelementptr inbounds [2 x %struct.SkDVector], [2 x %struct.SkDVector]* %3, i64 0, i64 0
  %16 = getelementptr inbounds %class.SkOpAngle, %class.SkOpAngle* %0, i64 0, i32 1, i32 0, i32 0, i32 0, i32 0, i64 1, i32 0
  %17 = bitcast double* %16 to <2 x double>*
  %18 = load <2 x double>, <2 x double>* %17, align 8
  %19 = bitcast %class.SkDCurveSweep* %7 to <2 x double>*
  %20 = load <2 x double>, <2 x double>* %19, align 8
  %21 = fsub <2 x double> %18, %20
  %22 = bitcast [2 x %struct.SkDVector]* %3 to <2 x double>*
  store <2 x double> %21, <2 x double>* %22, align 16
  br label %23

23:                                               ; preds = %14, %12
  %24 = phi %struct.SkDVector* [ %13, %12 ], [ %15, %14 ]
  %25 = getelementptr inbounds %class.SkOpAngle, %class.SkOpAngle* %1, i64 0, i32 1
  %26 = getelementptr inbounds %class.SkOpAngle, %class.SkOpAngle* %1, i64 0, i32 1, i32 3
  %27 = load i8, i8* %26, align 1, !range !2
  %28 = icmp eq i8 %27, 0
  br i1 %28, label %33, label %29

29:                                               ; preds = %23
  %30 = getelementptr inbounds %class.SkOpAngle, %class.SkOpAngle* %1, i64 0, i32 1, i32 1, i64 0
  %31 = getelementptr inbounds %struct.SkDVector, %struct.SkDVector* %30, i64 0, i32 0
  %32 = load double, double* %31, align 8
  br label %43

33:                                               ; preds = %23
  %34 = getelementptr inbounds %class.SkOpAngle, %class.SkOpAngle* %1, i64 0, i32 1, i32 0, i32 0, i32 0, i32 0, i64 1, i32 0
  %35 = bitcast double* %34 to <2 x double>*
  %36 = load <2 x double>, <2 x double>* %35, align 8
  %37 = bitcast %class.SkDCurveSweep* %25 to <2 x double>*
  %38 = load <2 x double>, <2 x double>* %37, align 8
  %39 = fsub <2 x double> %36, %38
  %40 = getelementptr inbounds [2 x %struct.SkDVector], [2 x %struct.SkDVector]* %3, i64 0, i64 1, i32 0
  %41 = bitcast double* %40 to <2 x double>*
  store <2 x double> %39, <2 x double>* %41, align 16
  %42 = extractelement <2 x double> %39, i32 0
  br label %43

43:                                               ; preds = %33, %29
  %44 = phi double [ %32, %29 ], [ %42, %33 ]
  %45 = phi %struct.SkDVector* [ %30, %29 ], [ %6, %33 ]
  %46 = getelementptr inbounds %struct.SkDVector, %struct.SkDVector* %45, i64 0, i32 1
  %47 = load double, double* %46, align 8
  %48 = bitcast %struct.SkDVector* %24 to <2 x double>*
  %49 = load <2 x double>, <2 x double>* %48, align 8
  %50 = insertelement <2 x double> undef, double %47, i32 0
  %51 = insertelement <2 x double> %50, double %44, i32 1
  %52 = fmul <2 x double> %49, %51
  %53 = extractelement <2 x double> %52, i32 0
  %54 = fptrunc double %53 to float
  %55 = extractelement <2 x double> %52, i32 1
  %56 = fptrunc double %55 to float
  %57 = tail call zeroext i1 @_Z15AlmostEqualUlpsff(float %54, float %56) #10
  %58 = fsub double %53, %55
  %59 = select i1 %57, double 0.000000e+00, double %58
  %60 = tail call zeroext i1 @_ZN9SkOpAngle15tangentsDivergeEPKS_d(%class.SkOpAngle* %0, %class.SkOpAngle* %1, double %59)
  br i1 %60, label %61, label %63

61:                                               ; preds = %43
  %62 = fcmp olt double %59, 0.000000e+00
  br label %163

63:                                               ; preds = %43
  call void @llvm.lifetime.start.p0i8(i64 1, i8* nonnull %4) #10
  store i8 -86, i8* %4, align 1
  %64 = getelementptr inbounds %class.SkOpAngle, %class.SkOpAngle* %0, i64 0, i32 7
  %65 = load %class.SkOpSpanBase*, %class.SkOpSpanBase** %64, align 8
  %66 = getelementptr inbounds %class.SkOpAngle, %class.SkOpAngle* %1, i64 0, i32 7
  %67 = load %class.SkOpSpanBase*, %class.SkOpSpanBase** %66, align 8
  %68 = tail call zeroext i1 @_ZNK12SkOpSpanBase8containsEPKS_(%class.SkOpSpanBase* %65, %class.SkOpSpanBase* %67) #10
  br i1 %68, label %79, label %69

69:                                               ; preds = %63
  %70 = call zeroext i1 @_ZNK9SkOpAngle9endToSideEPKS_Pb(%class.SkOpAngle* %0, %class.SkOpAngle* %1, i8* nonnull %4)
  br i1 %70, label %71, label %74

71:                                               ; preds = %69
  %72 = load i8, i8* %4, align 1, !range !2
  %73 = icmp ne i8 %72, 0
  br label %161

74:                                               ; preds = %69
  %75 = call zeroext i1 @_ZNK9SkOpAngle9endToSideEPKS_Pb(%class.SkOpAngle* %1, %class.SkOpAngle* %0, i8* nonnull %4)
  br i1 %75, label %76, label %79

76:                                               ; preds = %74
  %77 = load i8, i8* %4, align 1, !range !2
  %78 = icmp eq i8 %77, 0
  br label %161

79:                                               ; preds = %74, %63
  %80 = call zeroext i1 @_ZNK9SkOpAngle9midToSideEPKS_Pb(%class.SkOpAngle* %0, %class.SkOpAngle* %1, i8* nonnull %4)
  br i1 %80, label %81, label %84

81:                                               ; preds = %79
  %82 = load i8, i8* %4, align 1, !range !2
  %83 = icmp ne i8 %82, 0
  br label %161

84:                                               ; preds = %79
  %85 = call zeroext i1 @_ZNK9SkOpAngle9midToSideEPKS_Pb(%class.SkOpAngle* %1, %class.SkOpAngle* %0, i8* nonnull %4)
  br i1 %85, label %86, label %89

86:                                               ; preds = %84
  %87 = load i8, i8* %4, align 1, !range !2
  %88 = icmp eq i8 %87, 0
  br label %161

89:                                               ; preds = %84
  %90 = getelementptr inbounds %class.SkOpAngle, %class.SkOpAngle* %0, i64 0, i32 6
  %91 = load %class.SkOpSpanBase*, %class.SkOpSpanBase** %90, align 8
  %92 = getelementptr inbounds %class.SkOpSpanBase, %class.SkOpSpanBase* %91, i64 0, i32 1
  %93 = load %class.SkOpSegment*, %class.SkOpSegment** %92, align 8
  %94 = getelementptr inbounds %class.SkOpSpanBase, %class.SkOpSpanBase* %91, i64 0, i32 0, i32 0
  %95 = load double, double* %94, align 8
  %96 = load %class.SkOpSpanBase*, %class.SkOpSpanBase** %64, align 8
  %97 = getelementptr inbounds %class.SkOpSpanBase, %class.SkOpSpanBase* %96, i64 0, i32 0, i32 0
  %98 = load double, double* %97, align 8
  %99 = fadd double %95, %98
  %100 = fmul double %99, 5.000000e-01
  %101 = getelementptr inbounds %class.SkOpSegment, %class.SkOpSegment* %93, i64 0, i32 10
  %102 = load i32, i32* %101, align 4
  %103 = zext i32 %102 to i64
  %104 = getelementptr inbounds [5 x { double, double } (%struct.SkPoint*, float, double)*], [5 x { double, double } (%struct.SkPoint*, float, double)*]* @_ZL14CurveDPointAtT, i64 0, i64 %103
  %105 = load { double, double } (%struct.SkPoint*, float, double)*, { double, double } (%struct.SkPoint*, float, double)** %104, align 8
  %106 = getelementptr inbounds %class.SkOpSegment, %class.SkOpSegment* %93, i64 0, i32 5
  %107 = load %struct.SkPoint*, %struct.SkPoint** %106, align 8
  %108 = getelementptr inbounds %class.SkOpSegment, %class.SkOpSegment* %93, i64 0, i32 7
  %109 = load float, float* %108, align 8
  %110 = tail call { double, double } %105(%struct.SkPoint* %107, float %109, double %100) #10
  %111 = extractvalue { double, double } %110, 0
  %112 = extractvalue { double, double } %110, 1
  %113 = bitcast %class.SkDCurveSweep* %7 to <2 x double>*
  %114 = load <2 x double>, <2 x double>* %113, align 8
  %115 = insertelement <2 x double> undef, double %111, i32 0
  %116 = insertelement <2 x double> %115, double %112, i32 1
  %117 = fsub <2 x double> %116, %114
  %118 = getelementptr inbounds %class.SkOpAngle, %class.SkOpAngle* %1, i64 0, i32 6
  %119 = load %class.SkOpSpanBase*, %class.SkOpSpanBase** %118, align 8
  %120 = getelementptr inbounds %class.SkOpSpanBase, %class.SkOpSpanBase* %119, i64 0, i32 1
  %121 = load %class.SkOpSegment*, %class.SkOpSegment** %120, align 8
  %122 = getelementptr inbounds %class.SkOpSpanBase, %class.SkOpSpanBase* %119, i64 0, i32 0, i32 0
  %123 = load double, double* %122, align 8
  %124 = load %class.SkOpSpanBase*, %class.SkOpSpanBase** %66, align 8
  %125 = getelementptr inbounds %class.SkOpSpanBase, %class.SkOpSpanBase* %124, i64 0, i32 0, i32 0
  %126 = load double, double* %125, align 8
  %127 = fadd double %123, %126
  %128 = fmul double %127, 5.000000e-01
  %129 = getelementptr inbounds %class.SkOpSegment, %class.SkOpSegment* %121, i64 0, i32 10
  %130 = load i32, i32* %129, align 4
  %131 = zext i32 %130 to i64
  %132 = getelementptr inbounds [5 x { double, double } (%struct.SkPoint*, float, double)*], [5 x { double, double } (%struct.SkPoint*, float, double)*]* @_ZL14CurveDPointAtT, i64 0, i64 %131
  %133 = load { double, double } (%struct.SkPoint*, float, double)*, { double, double } (%struct.SkPoint*, float, double)** %132, align 8
  %134 = getelementptr inbounds %class.SkOpSegment, %class.SkOpSegment* %121, i64 0, i32 5
  %135 = load %struct.SkPoint*, %struct.SkPoint** %134, align 8
  %136 = getelementptr inbounds %class.SkOpSegment, %class.SkOpSegment* %121, i64 0, i32 7
  %137 = load float, float* %136, align 8
  %138 = tail call { double, double } %133(%struct.SkPoint* %135, float %137, double %128) #10
  %139 = extractvalue { double, double } %138, 0
  %140 = extractvalue { double, double } %138, 1
  %141 = bitcast %class.SkDCurveSweep* %25 to <2 x double>*
  %142 = load <2 x double>, <2 x double>* %141, align 8
  %143 = shufflevector <2 x double> %142, <2 x double> undef, <2 x i32> <i32 1, i32 0>
  %144 = insertelement <2 x double> undef, double %140, i32 0
  %145 = insertelement <2 x double> %144, double %139, i32 1
  %146 = fsub <2 x double> %145, %143
  %147 = fmul <2 x double> %117, %146
  %148 = extractelement <2 x double> %147, i32 0
  %149 = fptrunc double %148 to float
  %150 = extractelement <2 x double> %147, i32 1
  %151 = fptrunc double %150 to float
  %152 = tail call zeroext i1 @_Z15AlmostEqualUlpsff(float %149, float %151) #10
  %153 = fsub double %148, %150
  %154 = select i1 %152, double 0.000000e+00, double %153
  %155 = fcmp oeq double %154, 0.000000e+00
  br i1 %155, label %156, label %159

156:                                              ; preds = %89
  %157 = getelementptr inbounds %class.SkOpAngle, %class.SkOpAngle* %0, i64 0, i32 12
  store i8 1, i8* %157, align 2
  %158 = getelementptr inbounds %class.SkOpAngle, %class.SkOpAngle* %1, i64 0, i32 12
  store i8 1, i8* %158, align 2
  br label %161

159:                                              ; preds = %89
  %160 = fcmp olt double %154, 0.000000e+00
  br label %161

161:                                              ; preds = %156, %159, %86, %81, %76, %71
  %162 = phi i1 [ %83, %81 ], [ %88, %86 ], [ %73, %71 ], [ %78, %76 ], [ true, %156 ], [ %160, %159 ]
  call void @llvm.lifetime.end.p0i8(i64 1, i8* nonnull %4) #10
  br label %163

163:                                              ; preds = %161, %61
  %164 = phi i1 [ %62, %61 ], [ %162, %161 ]
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %5) #10
  ret i1 %164
}

; Function Attrs: nofree nounwind ssp uwtable
define hidden zeroext i1 @_ZN9SkOpAngle15tangentsDivergeEPKS_d(%class.SkOpAngle* nocapture, %class.SkOpAngle* nocapture readonly, double) local_unnamed_addr #4 align 2 {
  %4 = fcmp oeq double %2, 0.000000e+00
  br i1 %4, label %208, label %5

5:                                                ; preds = %3
  %6 = getelementptr inbounds %class.SkOpAngle, %class.SkOpAngle* %0, i64 0, i32 1, i32 1, i64 0, i32 0
  %7 = getelementptr inbounds %class.SkOpAngle, %class.SkOpAngle* %1, i64 0, i32 1, i32 1, i64 0, i32 0
  %8 = bitcast double* %6 to <2 x double>*
  %9 = load <2 x double>, <2 x double>* %8, align 8
  %10 = bitcast double* %7 to <2 x double>*
  %11 = load <2 x double>, <2 x double>* %10, align 8
  %12 = fmul <2 x double> %9, %11
  %13 = extractelement <2 x double> %12, i32 0
  %14 = extractelement <2 x double> %12, i32 1
  %15 = fadd double %13, %14
  %16 = fcmp une double %15, 0.000000e+00
  br i1 %16, label %17, label %208

17:                                               ; preds = %5
  %18 = fdiv double %2, %15
  %19 = fmul <2 x double> %9, %9
  %20 = extractelement <2 x double> %19, i32 0
  %21 = extractelement <2 x double> %19, i32 1
  %22 = fadd double %20, %21
  %23 = tail call double @sqrt(double %22) #10
  %24 = fmul double %18, %23
  %25 = bitcast double* %7 to <2 x double>*
  %26 = load <2 x double>, <2 x double>* %25, align 8
  %27 = fmul <2 x double> %26, %26
  %28 = extractelement <2 x double> %27, i32 0
  %29 = extractelement <2 x double> %27, i32 1
  %30 = fadd double %28, %29
  %31 = tail call double @sqrt(double %30) #10
  %32 = fmul double %18, %31
  %33 = tail call double @llvm.fabs.f64(double %24)
  %34 = tail call double @llvm.fabs.f64(double %32)
  %35 = fcmp olt double %33, %34
  br i1 %35, label %36, label %116

36:                                               ; preds = %17
  %37 = getelementptr inbounds %class.SkOpAngle, %class.SkOpAngle* %0, i64 0, i32 6
  %38 = load %class.SkOpSpanBase*, %class.SkOpSpanBase** %37, align 8
  %39 = getelementptr inbounds %class.SkOpSpanBase, %class.SkOpSpanBase* %38, i64 0, i32 1
  %40 = load %class.SkOpSegment*, %class.SkOpSegment** %39, align 8
  %41 = getelementptr inbounds %class.SkOpSegment, %class.SkOpSegment* %40, i64 0, i32 10
  %42 = load i32, i32* %41, align 4
  %43 = add i32 %42, 1
  %44 = ashr i32 %43, 2
  %45 = sub i32 %42, %44
  %46 = getelementptr inbounds %class.SkOpSegment, %class.SkOpSegment* %40, i64 0, i32 5
  %47 = load %struct.SkPoint*, %struct.SkPoint** %46, align 8
  %48 = icmp sgt i32 %45, 0
  br i1 %48, label %49, label %196

49:                                               ; preds = %36
  %50 = sub i32 %43, %44
  %51 = zext i32 %45 to i64
  %52 = zext i32 %50 to i64
  %53 = add nsw i64 %52, -2
  br label %59

54:                                               ; preds = %88, %83
  %55 = phi double [ %84, %83 ], [ %113, %88 ]
  %56 = add nuw nsw i64 %60, 1
  %57 = add nuw nsw i64 %61, 1
  %58 = icmp eq i64 %56, %51
  br i1 %58, label %196, label %59

59:                                               ; preds = %54, %49
  %60 = phi i64 [ 0, %49 ], [ %56, %54 ]
  %61 = phi i64 [ 1, %49 ], [ %57, %54 ]
  %62 = phi double [ 0.000000e+00, %49 ], [ %55, %54 ]
  %63 = xor i64 %60, 1
  %64 = add nuw i64 %63, %52
  %65 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %47, i64 %60, i32 0
  %66 = bitcast float* %65 to <2 x float>*
  %67 = load <2 x float>, <2 x float>* %66, align 4
  %68 = and i64 %64, 1
  %69 = icmp eq i64 %68, 0
  br i1 %69, label %83, label %70

70:                                               ; preds = %59
  %71 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %47, i64 %61, i32 0
  %72 = bitcast float* %71 to <2 x float>*
  %73 = load <2 x float>, <2 x float>* %72, align 4
  %74 = fsub <2 x float> %73, %67
  %75 = fpext <2 x float> %74 to <2 x double>
  %76 = fmul <2 x double> %75, %75
  %77 = extractelement <2 x double> %76, i32 0
  %78 = extractelement <2 x double> %76, i32 1
  %79 = fadd double %77, %78
  %80 = fcmp olt double %62, %79
  %81 = select i1 %80, double %79, double %62
  %82 = add nuw nsw i64 %61, 1
  br label %83

83:                                               ; preds = %70, %59
  %84 = phi double [ %81, %70 ], [ undef, %59 ]
  %85 = phi i64 [ %82, %70 ], [ %61, %59 ]
  %86 = phi double [ %81, %70 ], [ %62, %59 ]
  %87 = icmp eq i64 %53, %60
  br i1 %87, label %54, label %88

88:                                               ; preds = %83, %88
  %89 = phi i64 [ %114, %88 ], [ %85, %83 ]
  %90 = phi double [ %113, %88 ], [ %86, %83 ]
  %91 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %47, i64 %89, i32 0
  %92 = bitcast float* %91 to <2 x float>*
  %93 = load <2 x float>, <2 x float>* %92, align 4
  %94 = fsub <2 x float> %93, %67
  %95 = fpext <2 x float> %94 to <2 x double>
  %96 = fmul <2 x double> %95, %95
  %97 = extractelement <2 x double> %96, i32 0
  %98 = extractelement <2 x double> %96, i32 1
  %99 = fadd double %97, %98
  %100 = fcmp olt double %90, %99
  %101 = select i1 %100, double %99, double %90
  %102 = add nuw nsw i64 %89, 1
  %103 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %47, i64 %102, i32 0
  %104 = bitcast float* %103 to <2 x float>*
  %105 = load <2 x float>, <2 x float>* %104, align 4
  %106 = fsub <2 x float> %105, %67
  %107 = fpext <2 x float> %106 to <2 x double>
  %108 = fmul <2 x double> %107, %107
  %109 = extractelement <2 x double> %108, i32 0
  %110 = extractelement <2 x double> %108, i32 1
  %111 = fadd double %109, %110
  %112 = fcmp olt double %101, %111
  %113 = select i1 %112, double %111, double %101
  %114 = add nuw nsw i64 %89, 2
  %115 = icmp eq i64 %114, %52
  br i1 %115, label %54, label %88

116:                                              ; preds = %17
  %117 = getelementptr inbounds %class.SkOpAngle, %class.SkOpAngle* %1, i64 0, i32 6
  %118 = load %class.SkOpSpanBase*, %class.SkOpSpanBase** %117, align 8
  %119 = getelementptr inbounds %class.SkOpSpanBase, %class.SkOpSpanBase* %118, i64 0, i32 1
  %120 = load %class.SkOpSegment*, %class.SkOpSegment** %119, align 8
  %121 = getelementptr inbounds %class.SkOpSegment, %class.SkOpSegment* %120, i64 0, i32 10
  %122 = load i32, i32* %121, align 4
  %123 = add i32 %122, 1
  %124 = ashr i32 %123, 2
  %125 = sub i32 %122, %124
  %126 = getelementptr inbounds %class.SkOpSegment, %class.SkOpSegment* %120, i64 0, i32 5
  %127 = load %struct.SkPoint*, %struct.SkPoint** %126, align 8
  %128 = icmp sgt i32 %125, 0
  br i1 %128, label %129, label %196

129:                                              ; preds = %116
  %130 = sub i32 %123, %124
  %131 = zext i32 %125 to i64
  %132 = zext i32 %130 to i64
  %133 = add nsw i64 %132, -2
  br label %139

134:                                              ; preds = %168, %163
  %135 = phi double [ %164, %163 ], [ %193, %168 ]
  %136 = add nuw nsw i64 %140, 1
  %137 = add nuw nsw i64 %141, 1
  %138 = icmp eq i64 %136, %131
  br i1 %138, label %196, label %139

139:                                              ; preds = %134, %129
  %140 = phi i64 [ 0, %129 ], [ %136, %134 ]
  %141 = phi i64 [ 1, %129 ], [ %137, %134 ]
  %142 = phi double [ 0.000000e+00, %129 ], [ %135, %134 ]
  %143 = xor i64 %140, 1
  %144 = add nuw i64 %143, %132
  %145 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %127, i64 %140, i32 0
  %146 = bitcast float* %145 to <2 x float>*
  %147 = load <2 x float>, <2 x float>* %146, align 4
  %148 = and i64 %144, 1
  %149 = icmp eq i64 %148, 0
  br i1 %149, label %163, label %150

150:                                              ; preds = %139
  %151 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %127, i64 %141, i32 0
  %152 = bitcast float* %151 to <2 x float>*
  %153 = load <2 x float>, <2 x float>* %152, align 4
  %154 = fsub <2 x float> %153, %147
  %155 = fpext <2 x float> %154 to <2 x double>
  %156 = fmul <2 x double> %155, %155
  %157 = extractelement <2 x double> %156, i32 0
  %158 = extractelement <2 x double> %156, i32 1
  %159 = fadd double %157, %158
  %160 = fcmp olt double %142, %159
  %161 = select i1 %160, double %159, double %142
  %162 = add nuw nsw i64 %141, 1
  br label %163

163:                                              ; preds = %150, %139
  %164 = phi double [ %161, %150 ], [ undef, %139 ]
  %165 = phi i64 [ %162, %150 ], [ %141, %139 ]
  %166 = phi double [ %161, %150 ], [ %142, %139 ]
  %167 = icmp eq i64 %133, %140
  br i1 %167, label %134, label %168

168:                                              ; preds = %163, %168
  %169 = phi i64 [ %194, %168 ], [ %165, %163 ]
  %170 = phi double [ %193, %168 ], [ %166, %163 ]
  %171 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %127, i64 %169, i32 0
  %172 = bitcast float* %171 to <2 x float>*
  %173 = load <2 x float>, <2 x float>* %172, align 4
  %174 = fsub <2 x float> %173, %147
  %175 = fpext <2 x float> %174 to <2 x double>
  %176 = fmul <2 x double> %175, %175
  %177 = extractelement <2 x double> %176, i32 0
  %178 = extractelement <2 x double> %176, i32 1
  %179 = fadd double %177, %178
  %180 = fcmp olt double %170, %179
  %181 = select i1 %180, double %179, double %170
  %182 = add nuw nsw i64 %169, 1
  %183 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %127, i64 %182, i32 0
  %184 = bitcast float* %183 to <2 x float>*
  %185 = load <2 x float>, <2 x float>* %184, align 4
  %186 = fsub <2 x float> %185, %147
  %187 = fpext <2 x float> %186 to <2 x double>
  %188 = fmul <2 x double> %187, %187
  %189 = extractelement <2 x double> %188, i32 0
  %190 = extractelement <2 x double> %188, i32 1
  %191 = fadd double %189, %190
  %192 = fcmp olt double %181, %191
  %193 = select i1 %192, double %191, double %181
  %194 = add nuw nsw i64 %169, 2
  %195 = icmp eq i64 %194, %132
  br i1 %195, label %134, label %168

196:                                              ; preds = %134, %54, %116, %36
  %197 = phi double [ 0.000000e+00, %36 ], [ 0.000000e+00, %116 ], [ %55, %54 ], [ %135, %134 ]
  %198 = phi double [ %24, %36 ], [ %32, %116 ], [ %24, %54 ], [ %32, %134 ]
  %199 = tail call double @sqrt(double %197) #10
  %200 = fdiv double %199, %198
  %201 = tail call double @llvm.fabs.f64(double %200)
  %202 = fcmp oge double %201, 5.000000e+01
  %203 = fcmp olt double %201, 2.000000e+02
  %204 = and i1 %202, %203
  %205 = getelementptr inbounds %class.SkOpAngle, %class.SkOpAngle* %0, i64 0, i32 16
  %206 = zext i1 %204 to i8
  store i8 %206, i8* %205, align 2
  %207 = fcmp olt double %201, 5.000000e+01
  br label %208

208:                                              ; preds = %196, %5, %3
  %209 = phi i1 [ false, %3 ], [ %207, %196 ], [ true, %5 ]
  ret i1 %209
}

declare zeroext i1 @_ZNK12SkOpSpanBase8containsEPKS_(%class.SkOpSpanBase*, %class.SkOpSpanBase*) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZNK9SkOpAngle9endToSideEPKS_Pb(%class.SkOpAngle* nocapture readonly, %class.SkOpAngle* nocapture readonly, i8* nocapture) local_unnamed_addr #0 align 2 {
  %4 = alloca %struct.SkDLine, align 16
  %5 = alloca %class.SkIntersections, align 8
  %6 = alloca double, align 8
  %7 = getelementptr inbounds %class.SkOpAngle, %class.SkOpAngle* %0, i64 0, i32 6
  %8 = load %class.SkOpSpanBase*, %class.SkOpSpanBase** %7, align 8
  %9 = getelementptr inbounds %class.SkOpSpanBase, %class.SkOpSpanBase* %8, i64 0, i32 1
  %10 = load %class.SkOpSegment*, %class.SkOpSegment** %9, align 8
  %11 = getelementptr inbounds %class.SkOpSegment, %class.SkOpSegment* %10, i64 0, i32 10
  %12 = load i32, i32* %11, align 4
  %13 = bitcast %struct.SkDLine* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %13) #10
  %14 = getelementptr inbounds %struct.SkDLine, %struct.SkDLine* %4, i64 0, i32 0, i64 1, i32 1
  %15 = getelementptr inbounds %struct.SkDLine, %struct.SkDLine* %4, i64 0, i32 0, i64 0
  %16 = getelementptr inbounds %class.SkOpAngle, %class.SkOpAngle* %0, i64 0, i32 7
  %17 = getelementptr inbounds %struct.SkDLine, %struct.SkDLine* %4, i64 0, i32 0, i64 0, i32 1
  %18 = bitcast double* %17 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %18, i8 -1, i64 24, i1 false)
  %19 = load %class.SkOpSpanBase*, %class.SkOpSpanBase** %16, align 8
  %20 = getelementptr inbounds %class.SkOpSpanBase, %class.SkOpSpanBase* %19, i64 0, i32 0, i32 1, i32 0
  %21 = bitcast float* %20 to <2 x float>*
  %22 = load <2 x float>, <2 x float>* %21, align 4
  %23 = fpext <2 x float> %22 to <2 x double>
  %24 = bitcast %struct.SkDLine* %4 to <2 x double>*
  store <2 x double> %23, <2 x double>* %24, align 16
  %25 = getelementptr inbounds %struct.SkDLine, %struct.SkDLine* %4, i64 0, i32 0, i64 1
  %26 = bitcast %struct.SkDPoint* %25 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 16 %26, i8* nonnull align 16 %13, i64 16, i1 false)
  %27 = zext i32 %12 to i64
  %28 = getelementptr inbounds [5 x { double, double } (%struct.SkPoint*, float, double)*], [5 x { double, double } (%struct.SkPoint*, float, double)*]* @_ZL14CurveDSlopeAtT, i64 0, i64 %27
  %29 = load { double, double } (%struct.SkPoint*, float, double)*, { double, double } (%struct.SkPoint*, float, double)** %28, align 8
  %30 = getelementptr inbounds %class.SkOpSegment, %class.SkOpSegment* %10, i64 0, i32 5
  %31 = load %struct.SkPoint*, %struct.SkPoint** %30, align 8
  %32 = getelementptr inbounds %class.SkOpSegment, %class.SkOpSegment* %10, i64 0, i32 7
  %33 = load float, float* %32, align 8
  %34 = getelementptr inbounds %class.SkOpSpanBase, %class.SkOpSpanBase* %19, i64 0, i32 0, i32 0
  %35 = load double, double* %34, align 8
  %36 = tail call { double, double } %29(%struct.SkPoint* %31, float %33, double %35) #10
  %37 = extractvalue { double, double } %36, 0
  %38 = extractvalue { double, double } %36, 1
  %39 = getelementptr inbounds %struct.SkDPoint, %struct.SkDPoint* %25, i64 0, i32 0
  %40 = load double, double* %39, align 16
  %41 = fadd double %40, %38
  store double %41, double* %39, align 16
  %42 = load double, double* %14, align 8
  %43 = fsub double %42, %37
  store double %43, double* %14, align 8
  %44 = bitcast %class.SkIntersections* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 464, i8* nonnull %44) #10
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %44, i8* align 8 bitcast (%class.SkIntersections* @__const._ZNK9SkOpAngle9midToSideEPKS_Pb.oppMid to i8*), i64 464, i1 false)
  %45 = getelementptr inbounds %class.SkIntersections, %class.SkIntersections* %5, i64 0, i32 8
  store i8 0, i8* %45, align 1
  %46 = getelementptr inbounds %class.SkIntersections, %class.SkIntersections* %5, i64 0, i32 4, i64 0
  %47 = bitcast i8* %46 to i16*
  store i16 0, i16* %47, align 4
  %48 = getelementptr inbounds %class.SkIntersections, %class.SkIntersections* %5, i64 0, i32 7
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %44, i8 0, i64 448, i1 false) #10
  store i8 1, i8* %48, align 8
  %49 = getelementptr inbounds %class.SkIntersections, %class.SkIntersections* %5, i64 0, i32 5
  store i8 0, i8* %49, align 2
  %50 = getelementptr inbounds %class.SkIntersections, %class.SkIntersections* %5, i64 0, i32 3, i64 0
  %51 = bitcast i16* %50 to i32*
  store i32 0, i32* %51, align 8
  %52 = getelementptr inbounds %class.SkIntersections, %class.SkIntersections* %5, i64 0, i32 6
  store i8 0, i8* %52, align 1
  %53 = getelementptr inbounds %class.SkOpAngle, %class.SkOpAngle* %1, i64 0, i32 6
  %54 = load %class.SkOpSpanBase*, %class.SkOpSpanBase** %53, align 8
  %55 = getelementptr inbounds %class.SkOpSpanBase, %class.SkOpSpanBase* %54, i64 0, i32 1
  %56 = load %class.SkOpSegment*, %class.SkOpSegment** %55, align 8
  %57 = getelementptr inbounds %class.SkOpSegment, %class.SkOpSegment* %56, i64 0, i32 10
  %58 = load i32, i32* %57, align 4
  %59 = zext i32 %58 to i64
  %60 = getelementptr inbounds [5 x void (%struct.SkPoint*, float, %struct.SkDLine*, %class.SkIntersections*)*], [5 x void (%struct.SkPoint*, float, %struct.SkDLine*, %class.SkIntersections*)*]* @_ZL17CurveIntersectRay, i64 0, i64 %59
  %61 = load void (%struct.SkPoint*, float, %struct.SkDLine*, %class.SkIntersections*)*, void (%struct.SkPoint*, float, %struct.SkDLine*, %class.SkIntersections*)** %60, align 8
  %62 = getelementptr inbounds %class.SkOpSegment, %class.SkOpSegment* %56, i64 0, i32 5
  %63 = load %struct.SkPoint*, %struct.SkPoint** %62, align 8
  %64 = getelementptr inbounds %class.SkOpSegment, %class.SkOpSegment* %56, i64 0, i32 7
  %65 = load float, float* %64, align 8
  call void %61(%struct.SkPoint* %63, float %65, %struct.SkDLine* nonnull dereferenceable(32) %4, %class.SkIntersections* nonnull %5) #10
  %66 = bitcast double* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %66) #10
  store double 0xFFFFFFFFFFFFFFFF, double* %6, align 8
  %67 = load %class.SkOpSpanBase*, %class.SkOpSpanBase** %53, align 8
  %68 = getelementptr inbounds %class.SkOpSpanBase, %class.SkOpSpanBase* %67, i64 0, i32 0, i32 0
  %69 = load double, double* %68, align 8
  %70 = getelementptr inbounds %class.SkOpAngle, %class.SkOpAngle* %1, i64 0, i32 7
  %71 = load %class.SkOpSpanBase*, %class.SkOpSpanBase** %70, align 8
  %72 = getelementptr inbounds %class.SkOpSpanBase, %class.SkOpSpanBase* %71, i64 0, i32 0, i32 0
  %73 = load double, double* %72, align 8
  %74 = call i32 @_ZNK15SkIntersections9closestToEddRK8SkDPointPd(%class.SkIntersections* nonnull %5, double %69, double %73, %struct.SkDPoint* nonnull dereferenceable(16) %15, double* nonnull %6) #10
  %75 = icmp sgt i32 %74, -1
  %76 = load double, double* %6, align 8
  %77 = fcmp une double %76, 0.000000e+00
  %78 = and i1 %75, %77
  br i1 %78, label %79, label %150

79:                                               ; preds = %3
  %80 = load %class.SkOpSpanBase*, %class.SkOpSpanBase** %7, align 8
  %81 = getelementptr inbounds %class.SkOpSpanBase, %class.SkOpSpanBase* %80, i64 0, i32 0, i32 1, i32 0
  %82 = bitcast float* %81 to <2 x float>*
  %83 = load <2 x float>, <2 x float>* %82, align 4
  %84 = fpext <2 x float> %83 to <2 x double>
  %85 = add i32 %58, 1
  %86 = ashr i32 %85, 2
  %87 = icmp slt i32 %58, %86
  br i1 %87, label %91, label %88

88:                                               ; preds = %79
  %89 = sub i32 %85, %86
  %90 = zext i32 %89 to i64
  br label %102

91:                                               ; preds = %102, %79
  %92 = phi double [ 0x7FF0000000000000, %79 ], [ %117, %102 ]
  %93 = phi double [ 0xFFF0000000000000, %79 ], [ %127, %102 ]
  %94 = phi double [ 0x7FF0000000000000, %79 ], [ %113, %102 ]
  %95 = phi double [ 0xFFF0000000000000, %79 ], [ %126, %102 ]
  %96 = fsub double %95, %94
  %97 = fsub double %93, %92
  %98 = fcmp olt double %96, %97
  %99 = select i1 %98, double %97, double %96
  %100 = fdiv double %76, %99
  store double %100, double* %6, align 8
  %101 = fcmp ult double %100, 5.000000e-12
  br i1 %101, label %150, label %128

102:                                              ; preds = %102, %88
  %103 = phi i64 [ %123, %102 ], [ -4503599627370496, %88 ]
  %104 = phi double [ %127, %102 ], [ 0xFFF0000000000000, %88 ]
  %105 = phi i64 [ %120, %102 ], [ -4503599627370496, %88 ]
  %106 = phi double [ %126, %102 ], [ 0xFFF0000000000000, %88 ]
  %107 = phi i64 [ %124, %102 ], [ 0, %88 ]
  %108 = phi double [ %117, %102 ], [ 0x7FF0000000000000, %88 ]
  %109 = phi double [ %113, %102 ], [ 0x7FF0000000000000, %88 ]
  %110 = getelementptr inbounds %class.SkOpAngle, %class.SkOpAngle* %1, i64 0, i32 1, i32 0, i32 0, i32 0, i32 0, i64 %107, i32 0
  %111 = load double, double* %110, align 8
  %112 = fcmp olt double %111, %109
  %113 = select i1 %112, double %111, double %109
  %114 = getelementptr inbounds %class.SkOpAngle, %class.SkOpAngle* %1, i64 0, i32 1, i32 0, i32 0, i32 0, i32 0, i64 %107, i32 1
  %115 = load double, double* %114, align 8
  %116 = fcmp olt double %115, %108
  %117 = select i1 %116, double %115, double %108
  %118 = fcmp olt double %106, %111
  %119 = bitcast double %111 to i64
  %120 = select i1 %118, i64 %119, i64 %105
  %121 = fcmp olt double %104, %115
  %122 = bitcast double %115 to i64
  %123 = select i1 %121, i64 %122, i64 %103
  %124 = add nuw nsw i64 %107, 1
  %125 = icmp eq i64 %124, %90
  %126 = bitcast i64 %120 to double
  %127 = bitcast i64 %123 to double
  br i1 %125, label %91, label %102

128:                                              ; preds = %91
  %129 = sext i32 %74 to i64
  %130 = getelementptr inbounds %class.SkIntersections, %class.SkIntersections* %5, i64 0, i32 0, i64 %129, i32 0
  %131 = bitcast double* %130 to <2 x double>*
  %132 = load <2 x double>, <2 x double>* %131, align 8
  %133 = bitcast %struct.SkDLine* %4 to <2 x double>*
  %134 = load <2 x double>, <2 x double>* %133, align 16
  %135 = fsub <2 x double> %134, %84
  %136 = shufflevector <2 x double> %135, <2 x double> undef, <2 x i32> <i32 1, i32 0>
  %137 = fsub <2 x double> %132, %84
  %138 = fmul <2 x double> %137, %136
  %139 = extractelement <2 x double> %138, i32 1
  %140 = fptrunc double %139 to float
  %141 = extractelement <2 x double> %138, i32 0
  %142 = fptrunc double %141 to float
  %143 = call zeroext i1 @_Z28AlmostEqualUlpsNoNormalCheckff(float %140, float %142) #10
  %144 = fsub double %139, %141
  %145 = select i1 %143, double 0.000000e+00, double %144
  %146 = fcmp une double %145, 0.000000e+00
  br i1 %146, label %147, label %150

147:                                              ; preds = %128
  %148 = fcmp olt double %145, 0.000000e+00
  %149 = zext i1 %148 to i8
  store i8 %149, i8* %2, align 1
  br label %150

150:                                              ; preds = %91, %128, %147, %3
  %151 = phi i1 [ false, %3 ], [ false, %91 ], [ true, %147 ], [ false, %128 ]
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %66) #10
  call void @llvm.lifetime.end.p0i8(i64 464, i8* nonnull %44) #10
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %13) #10
  ret i1 %151
}

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZNK9SkOpAngle9midToSideEPKS_Pb(%class.SkOpAngle* nocapture readonly, %class.SkOpAngle* nocapture readonly, i8* nocapture) local_unnamed_addr #0 align 2 {
  %4 = alloca <2 x double>, align 16
  %5 = bitcast <2 x double>* %4 to %struct.SkDPoint*
  %6 = alloca %struct.SkDLine, align 16
  %7 = alloca %class.SkIntersections, align 8
  %8 = alloca %class.SkIntersections, align 8
  %9 = getelementptr inbounds %class.SkOpAngle, %class.SkOpAngle* %0, i64 0, i32 6
  %10 = load %class.SkOpSpanBase*, %class.SkOpSpanBase** %9, align 8
  %11 = getelementptr inbounds %class.SkOpSpanBase, %class.SkOpSpanBase* %10, i64 0, i32 1
  %12 = load %class.SkOpSegment*, %class.SkOpSegment** %11, align 8
  %13 = getelementptr inbounds %class.SkOpSegment, %class.SkOpSegment* %12, i64 0, i32 10
  %14 = load i32, i32* %13, align 4
  %15 = getelementptr inbounds %class.SkOpAngle, %class.SkOpAngle* %0, i64 0, i32 7
  %16 = load %class.SkOpSpanBase*, %class.SkOpSpanBase** %15, align 8
  %17 = bitcast <2 x double>* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %17) #10
  %18 = getelementptr inbounds %class.SkOpSpanBase, %class.SkOpSpanBase* %10, i64 0, i32 0, i32 1, i32 0
  %19 = getelementptr inbounds %struct.SkDPoint, %struct.SkDPoint* %5, i64 0, i32 1
  %20 = bitcast double* %19 to i64*
  store i64 -1, i64* %20, align 8
  %21 = getelementptr inbounds %class.SkOpSpanBase, %class.SkOpSpanBase* %10, i64 0, i32 0, i32 1, i32 1
  %22 = bitcast float* %18 to <2 x float>*
  %23 = load <2 x float>, <2 x float>* %22, align 4
  %24 = fpext <2 x float> %23 to <2 x double>
  store <2 x double> %24, <2 x double>* %4, align 16
  %25 = bitcast %struct.SkDLine* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %25) #10
  %26 = getelementptr inbounds %struct.SkDLine, %struct.SkDLine* %6, i64 0, i32 0, i64 1, i32 0
  %27 = getelementptr inbounds %struct.SkDLine, %struct.SkDLine* %6, i64 0, i32 0, i64 1, i32 1
  %28 = getelementptr inbounds %struct.SkDLine, %struct.SkDLine* %6, i64 0, i32 0, i64 0, i32 1
  %29 = bitcast double* %28 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %29, i8 -1, i64 24, i1 false)
  %30 = getelementptr inbounds %class.SkOpSpanBase, %class.SkOpSpanBase* %16, i64 0, i32 0, i32 1, i32 0
  %31 = bitcast float* %18 to <2 x float>*
  %32 = load <2 x float>, <2 x float>* %31, align 4
  %33 = getelementptr inbounds %class.SkOpSpanBase, %class.SkOpSpanBase* %16, i64 0, i32 0, i32 1, i32 1
  %34 = bitcast float* %30 to <2 x float>*
  %35 = load <2 x float>, <2 x float>* %34, align 4
  %36 = fadd <2 x float> %32, %35
  %37 = fmul <2 x float> %36, <float 5.000000e-01, float 5.000000e-01>
  %38 = fpext <2 x float> %37 to <2 x double>
  %39 = bitcast %struct.SkDLine* %6 to <2 x double>*
  store <2 x double> %38, <2 x double>* %39, align 16
  %40 = load float, float* %33, align 4
  %41 = load float, float* %21, align 4
  %42 = fsub float %40, %41
  %43 = fpext float %42 to double
  %44 = extractelement <2 x double> %38, i32 0
  %45 = fadd double %44, %43
  store double %45, double* %26, align 16
  %46 = load float, float* %30, align 4
  %47 = load float, float* %18, align 4
  %48 = fsub float %46, %47
  %49 = fpext float %48 to double
  %50 = extractelement <2 x double> %38, i32 1
  %51 = fsub double %50, %49
  store double %51, double* %27, align 8
  %52 = bitcast %class.SkIntersections* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 464, i8* nonnull %52) #10
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %52, i8* align 8 bitcast (%class.SkIntersections* @__const._ZNK9SkOpAngle9midToSideEPKS_Pb.oppMid to i8*), i64 464, i1 false)
  %53 = getelementptr inbounds %class.SkIntersections, %class.SkIntersections* %7, i64 0, i32 8
  store i8 0, i8* %53, align 1
  %54 = getelementptr inbounds %class.SkIntersections, %class.SkIntersections* %7, i64 0, i32 4, i64 0
  %55 = bitcast i8* %54 to i16*
  store i16 0, i16* %55, align 4
  %56 = getelementptr inbounds %class.SkIntersections, %class.SkIntersections* %7, i64 0, i32 7
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %52, i8 0, i64 448, i1 false) #10
  store i8 1, i8* %56, align 8
  %57 = getelementptr inbounds %class.SkIntersections, %class.SkIntersections* %7, i64 0, i32 5
  store i8 0, i8* %57, align 2
  %58 = getelementptr inbounds %class.SkIntersections, %class.SkIntersections* %7, i64 0, i32 3, i64 0
  %59 = bitcast i16* %58 to i32*
  store i32 0, i32* %59, align 8
  %60 = getelementptr inbounds %class.SkIntersections, %class.SkIntersections* %7, i64 0, i32 6
  store i8 0, i8* %60, align 1
  %61 = zext i32 %14 to i64
  %62 = getelementptr inbounds [5 x void (%struct.SkPoint*, float, %struct.SkDLine*, %class.SkIntersections*)*], [5 x void (%struct.SkPoint*, float, %struct.SkDLine*, %class.SkIntersections*)*]* @_ZL17CurveIntersectRay, i64 0, i64 %61
  %63 = load void (%struct.SkPoint*, float, %struct.SkDLine*, %class.SkIntersections*)*, void (%struct.SkPoint*, float, %struct.SkDLine*, %class.SkIntersections*)** %62, align 8
  %64 = getelementptr inbounds %class.SkOpSegment, %class.SkOpSegment* %12, i64 0, i32 5
  %65 = load %struct.SkPoint*, %struct.SkPoint** %64, align 8
  %66 = getelementptr inbounds %class.SkOpSegment, %class.SkOpSegment* %12, i64 0, i32 7
  %67 = load float, float* %66, align 8
  call void %63(%struct.SkPoint* %65, float %67, %struct.SkDLine* nonnull dereferenceable(32) %6, %class.SkIntersections* nonnull %7) #10
  %68 = load %class.SkOpSpanBase*, %class.SkOpSpanBase** %9, align 8
  %69 = getelementptr inbounds %class.SkOpSpanBase, %class.SkOpSpanBase* %68, i64 0, i32 0, i32 0
  %70 = load double, double* %69, align 8
  %71 = load %class.SkOpSpanBase*, %class.SkOpSpanBase** %15, align 8
  %72 = getelementptr inbounds %class.SkOpSpanBase, %class.SkOpSpanBase* %71, i64 0, i32 0, i32 0
  %73 = load double, double* %72, align 8
  %74 = call i32 @_ZNK15SkIntersections11mostOutsideEddRK8SkDPoint(%class.SkIntersections* nonnull %7, double %70, double %73, %struct.SkDPoint* nonnull dereferenceable(16) %5) #10
  %75 = icmp slt i32 %74, 0
  br i1 %75, label %135, label %76

76:                                               ; preds = %3
  %77 = getelementptr inbounds %class.SkOpAngle, %class.SkOpAngle* %1, i64 0, i32 6
  %78 = load %class.SkOpSpanBase*, %class.SkOpSpanBase** %77, align 8
  %79 = getelementptr inbounds %class.SkOpSpanBase, %class.SkOpSpanBase* %78, i64 0, i32 1
  %80 = load %class.SkOpSegment*, %class.SkOpSegment** %79, align 8
  %81 = getelementptr inbounds %class.SkOpSegment, %class.SkOpSegment* %80, i64 0, i32 10
  %82 = load i32, i32* %81, align 4
  %83 = bitcast %class.SkIntersections* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 464, i8* nonnull %83) #10
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %83, i8* align 8 bitcast (%class.SkIntersections* @__const._ZNK9SkOpAngle9midToSideEPKS_Pb.oppMid to i8*), i64 464, i1 false)
  %84 = getelementptr inbounds %class.SkIntersections, %class.SkIntersections* %8, i64 0, i32 8
  store i8 0, i8* %84, align 1
  %85 = getelementptr inbounds %class.SkIntersections, %class.SkIntersections* %8, i64 0, i32 4, i64 0
  %86 = bitcast i8* %85 to i16*
  store i16 0, i16* %86, align 4
  %87 = getelementptr inbounds %class.SkIntersections, %class.SkIntersections* %8, i64 0, i32 7
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %83, i8 0, i64 448, i1 false) #10
  store i8 1, i8* %87, align 8
  %88 = getelementptr inbounds %class.SkIntersections, %class.SkIntersections* %8, i64 0, i32 5
  store i8 0, i8* %88, align 2
  %89 = getelementptr inbounds %class.SkIntersections, %class.SkIntersections* %8, i64 0, i32 3, i64 0
  %90 = bitcast i16* %89 to i32*
  store i32 0, i32* %90, align 8
  %91 = getelementptr inbounds %class.SkIntersections, %class.SkIntersections* %8, i64 0, i32 6
  store i8 0, i8* %91, align 1
  %92 = zext i32 %82 to i64
  %93 = getelementptr inbounds [5 x void (%struct.SkPoint*, float, %struct.SkDLine*, %class.SkIntersections*)*], [5 x void (%struct.SkPoint*, float, %struct.SkDLine*, %class.SkIntersections*)*]* @_ZL17CurveIntersectRay, i64 0, i64 %92
  %94 = load void (%struct.SkPoint*, float, %struct.SkDLine*, %class.SkIntersections*)*, void (%struct.SkPoint*, float, %struct.SkDLine*, %class.SkIntersections*)** %93, align 8
  %95 = getelementptr inbounds %class.SkOpSegment, %class.SkOpSegment* %80, i64 0, i32 5
  %96 = load %struct.SkPoint*, %struct.SkPoint** %95, align 8
  %97 = getelementptr inbounds %class.SkOpSegment, %class.SkOpSegment* %80, i64 0, i32 7
  %98 = load float, float* %97, align 8
  call void %94(%struct.SkPoint* %96, float %98, %struct.SkDLine* nonnull dereferenceable(32) %6, %class.SkIntersections* nonnull %8) #10
  %99 = load %class.SkOpSpanBase*, %class.SkOpSpanBase** %77, align 8
  %100 = getelementptr inbounds %class.SkOpSpanBase, %class.SkOpSpanBase* %99, i64 0, i32 0, i32 0
  %101 = load double, double* %100, align 8
  %102 = getelementptr inbounds %class.SkOpAngle, %class.SkOpAngle* %1, i64 0, i32 7
  %103 = load %class.SkOpSpanBase*, %class.SkOpSpanBase** %102, align 8
  %104 = getelementptr inbounds %class.SkOpSpanBase, %class.SkOpSpanBase* %103, i64 0, i32 0, i32 0
  %105 = load double, double* %104, align 8
  %106 = call i32 @_ZNK15SkIntersections11mostOutsideEddRK8SkDPoint(%class.SkIntersections* nonnull %8, double %101, double %105, %struct.SkDPoint* nonnull dereferenceable(16) %5) #10
  %107 = icmp slt i32 %106, 0
  br i1 %107, label %133, label %108

108:                                              ; preds = %76
  %109 = sext i32 %74 to i64
  %110 = getelementptr inbounds %class.SkIntersections, %class.SkIntersections* %7, i64 0, i32 0, i64 %109, i32 0
  %111 = bitcast double* %110 to <2 x double>*
  %112 = load <2 x double>, <2 x double>* %111, align 8
  %113 = load <2 x double>, <2 x double>* %4, align 16
  %114 = fsub <2 x double> %112, %113
  %115 = sext i32 %106 to i64
  %116 = getelementptr inbounds %class.SkIntersections, %class.SkIntersections* %8, i64 0, i32 0, i64 %115, i32 0
  %117 = bitcast double* %116 to <2 x double>*
  %118 = load <2 x double>, <2 x double>* %117, align 8
  %119 = fsub <2 x double> %118, %113
  %120 = shufflevector <2 x double> %119, <2 x double> undef, <2 x i32> <i32 1, i32 0>
  %121 = fmul <2 x double> %114, %120
  %122 = extractelement <2 x double> %121, i32 0
  %123 = fptrunc double %122 to float
  %124 = extractelement <2 x double> %121, i32 1
  %125 = fptrunc double %124 to float
  %126 = call zeroext i1 @_Z15AlmostEqualUlpsff(float %123, float %125) #10
  %127 = fsub double %122, %124
  %128 = select i1 %126, double 0.000000e+00, double %127
  %129 = fcmp une double %128, 0.000000e+00
  br i1 %129, label %130, label %133

130:                                              ; preds = %108
  %131 = fcmp olt double %128, 0.000000e+00
  %132 = zext i1 %131 to i8
  store i8 %132, i8* %2, align 1
  br label %133

133:                                              ; preds = %130, %108, %76
  %134 = phi i1 [ false, %76 ], [ true, %130 ], [ false, %108 ]
  call void @llvm.lifetime.end.p0i8(i64 464, i8* nonnull %83) #10
  br label %135

135:                                              ; preds = %3, %133
  %136 = phi i1 [ %134, %133 ], [ false, %3 ]
  call void @llvm.lifetime.end.p0i8(i64 464, i8* nonnull %52) #10
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %25) #10
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %17) #10
  ret i1 %136
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden double @_ZNK9SkOpAngle4midTEv(%class.SkOpAngle* nocapture readonly) local_unnamed_addr #3 align 2 {
  %2 = getelementptr inbounds %class.SkOpAngle, %class.SkOpAngle* %0, i64 0, i32 6
  %3 = load %class.SkOpSpanBase*, %class.SkOpSpanBase** %2, align 8
  %4 = getelementptr inbounds %class.SkOpSpanBase, %class.SkOpSpanBase* %3, i64 0, i32 0, i32 0
  %5 = load double, double* %4, align 8
  %6 = getelementptr inbounds %class.SkOpAngle, %class.SkOpAngle* %0, i64 0, i32 7
  %7 = load %class.SkOpSpanBase*, %class.SkOpSpanBase** %6, align 8
  %8 = getelementptr inbounds %class.SkOpSpanBase, %class.SkOpSpanBase* %7, i64 0, i32 0, i32 0
  %9 = load double, double* %8, align 8
  %10 = fadd double %5, %9
  %11 = fmul double %10, 5.000000e-01
  ret double %11
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN9SkOpAngle8setSpansEv(%class.SkOpAngle*) local_unnamed_addr #5 align 2 {
  %2 = alloca %struct.SkDCubic, align 8
  %3 = alloca %class.anon, align 1
  %4 = alloca %struct.SkDCubic, align 8
  %5 = alloca %class.SkLineParameters, align 8
  %6 = alloca [4 x double], align 16
  %7 = alloca %class.SkLineParameters, align 16
  %8 = getelementptr inbounds %class.SkOpAngle, %class.SkOpAngle* %0, i64 0, i32 12
  store i8 0, i8* %8, align 2
  %9 = getelementptr inbounds %class.SkOpAngle, %class.SkOpAngle* %0, i64 0, i32 5
  store %class.SkOpSpanBase* null, %class.SkOpSpanBase** %9, align 8
  %10 = getelementptr inbounds %class.SkOpAngle, %class.SkOpAngle* %0, i64 0, i32 6
  %11 = load %class.SkOpSpanBase*, %class.SkOpSpanBase** %10, align 8
  %12 = icmp eq %class.SkOpSpanBase* %11, null
  br i1 %12, label %13, label %14

13:                                               ; preds = %1
  store i8 1, i8* %8, align 2
  br label %396

14:                                               ; preds = %1
  %15 = getelementptr inbounds %class.SkOpSpanBase, %class.SkOpSpanBase* %11, i64 0, i32 1
  %16 = load %class.SkOpSegment*, %class.SkOpSegment** %15, align 8
  %17 = getelementptr inbounds %class.SkOpSegment, %class.SkOpSegment* %16, i64 0, i32 5
  %18 = load %struct.SkPoint*, %struct.SkPoint** %17, align 8
  %19 = getelementptr inbounds %class.SkOpAngle, %class.SkOpAngle* %0, i64 0, i32 7
  %20 = load %class.SkOpSpanBase*, %class.SkOpSpanBase** %19, align 8
  %21 = getelementptr inbounds %class.SkOpAngle, %class.SkOpAngle* %0, i64 0, i32 1
  %22 = getelementptr inbounds %class.SkDCurveSweep, %class.SkDCurveSweep* %21, i64 0, i32 0
  %23 = tail call zeroext i1 @_ZNK11SkOpSegment9subDivideEPK12SkOpSpanBaseS2_P8SkDCurve(%class.SkOpSegment* %16, %class.SkOpSpanBase* nonnull %11, %class.SkOpSpanBase* %20, %struct.SkDCurve* %22) #10
  %24 = bitcast %class.SkOpAngle* %0 to i8*
  %25 = bitcast %class.SkDCurveSweep* %21 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %24, i8* align 8 %25, i64 64, i1 false)
  %26 = getelementptr inbounds %class.SkOpSegment, %class.SkOpSegment* %16, i64 0, i32 10
  %27 = load i32, i32* %26, align 4
  tail call void @_ZN13SkDCurveSweep17setCurveHullSweepEN6SkPath4VerbE(%class.SkDCurveSweep* %21, i32 %27) #10
  %28 = icmp eq i32 %27, 1
  br i1 %28, label %70, label %29

29:                                               ; preds = %14
  %30 = getelementptr inbounds %class.SkOpAngle, %class.SkOpAngle* %0, i64 0, i32 1, i32 2
  %31 = load i8, i8* %30, align 8, !range !2
  %32 = icmp eq i8 %31, 0
  br i1 %32, label %33, label %69

33:                                               ; preds = %29
  %34 = add nsw i32 %27, 1
  %35 = ashr i32 %34, 2
  %36 = sub nsw i32 %27, %35
  %37 = sext i32 %36 to i64
  %38 = getelementptr inbounds %class.SkOpAngle, %class.SkOpAngle* %0, i64 0, i32 1, i32 0, i32 0, i32 0, i32 0, i64 %37
  %39 = getelementptr inbounds %class.SkOpAngle, %class.SkOpAngle* %0, i64 0, i32 1, i32 0, i32 0, i32 0, i32 0, i64 1
  %40 = bitcast %struct.SkDPoint* %39 to i8*
  %41 = bitcast %struct.SkDPoint* %38 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %40, i8* align 8 %41, i64 16, i1 false)
  %42 = getelementptr inbounds %class.SkOpAngle, %class.SkOpAngle* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i64 1
  %43 = bitcast %struct.SkDPoint* %42 to i8*
  call void @llvm.memmove.p0i8.p0i8.i64(i8* align 8 %43, i8* align 8 %41, i64 16, i1 false)
  %44 = getelementptr inbounds %class.SkDCurveSweep, %class.SkDCurveSweep* %21, i64 0, i32 0, i32 0, i32 0, i32 0, i64 0, i32 0
  %45 = load double, double* %44, align 8
  %46 = getelementptr inbounds %class.SkOpAngle, %class.SkOpAngle* %0, i64 0, i32 1, i32 0, i32 0, i32 0, i32 0, i64 0, i32 1
  %47 = bitcast double* %46 to <2 x double>*
  %48 = load <2 x double>, <2 x double>* %47, align 8
  %49 = fptrunc <2 x double> %48 to <2 x float>
  %50 = getelementptr inbounds %class.SkOpAngle, %class.SkOpAngle* %0, i64 0, i32 1, i32 0, i32 0, i32 0, i32 0, i64 1, i32 1
  %51 = load double, double* %50, align 8
  %52 = insertelement <2 x double> undef, double %51, i32 0
  %53 = insertelement <2 x double> %52, double %45, i32 1
  %54 = fptrunc <2 x double> %53 to <2 x float>
  %55 = fpext <2 x float> %49 to <2 x double>
  %56 = fpext <2 x float> %54 to <2 x double>
  %57 = getelementptr inbounds %class.SkOpAngle, %class.SkOpAngle* %0, i64 0, i32 3, i32 0
  %58 = fsub <2 x double> %55, %56
  %59 = bitcast double* %57 to <2 x double>*
  store <2 x double> %58, <2 x double>* %59, align 8
  %60 = extractelement <2 x double> %56, i32 0
  %61 = extractelement <2 x double> %56, i32 1
  %62 = fmul double %61, %60
  %63 = extractelement <2 x double> %55, i32 0
  %64 = extractelement <2 x double> %55, i32 1
  %65 = fmul double %63, %64
  %66 = fsub double %62, %65
  %67 = getelementptr inbounds %class.SkOpAngle, %class.SkOpAngle* %0, i64 0, i32 3, i32 2
  store double %66, double* %67, align 8
  %68 = getelementptr inbounds %class.SkOpAngle, %class.SkOpAngle* %0, i64 0, i32 2
  store double 0.000000e+00, double* %68, align 8
  br label %69

69:                                               ; preds = %29, %33
  switch i32 %27, label %396 [
    i32 4, label %153
    i32 2, label %105
    i32 3, label %105
  ]

70:                                               ; preds = %14
  %71 = load %class.SkOpSpanBase*, %class.SkOpSpanBase** %10, align 8
  %72 = getelementptr inbounds %class.SkOpSpanBase, %class.SkOpSpanBase* %71, i64 0, i32 0, i32 0
  %73 = load double, double* %72, align 8
  %74 = load %class.SkOpSpanBase*, %class.SkOpSpanBase** %19, align 8
  %75 = getelementptr inbounds %class.SkOpSpanBase, %class.SkOpSpanBase* %74, i64 0, i32 0, i32 0
  %76 = load double, double* %75, align 8
  %77 = fcmp olt double %73, %76
  %78 = zext i1 %77 to i64
  %79 = getelementptr inbounds %class.SkOpSpanBase, %class.SkOpSpanBase* %71, i64 0, i32 0, i32 1, i32 0
  %80 = load float, float* %79, align 4
  %81 = getelementptr inbounds %class.SkOpSpanBase, %class.SkOpSpanBase* %71, i64 0, i32 0, i32 1, i32 1
  %82 = load float, float* %81, align 4
  %83 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %18, i64 %78, i32 0
  %84 = load float, float* %83, align 4
  %85 = insertelement <2 x float> undef, float %82, i32 0
  %86 = insertelement <2 x float> %85, float %84, i32 1
  %87 = fpext <2 x float> %86 to <2 x double>
  %88 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %18, i64 %78, i32 1
  %89 = load float, float* %88, align 4
  %90 = insertelement <2 x float> undef, float %89, i32 0
  %91 = insertelement <2 x float> %90, float %80, i32 1
  %92 = fpext <2 x float> %91 to <2 x double>
  %93 = getelementptr inbounds %class.SkOpAngle, %class.SkOpAngle* %0, i64 0, i32 3, i32 0
  %94 = fsub <2 x double> %87, %92
  %95 = bitcast double* %93 to <2 x double>*
  store <2 x double> %94, <2 x double>* %95, align 8
  %96 = extractelement <2 x double> %92, i32 0
  %97 = extractelement <2 x double> %92, i32 1
  %98 = fmul double %97, %96
  %99 = extractelement <2 x double> %87, i32 0
  %100 = extractelement <2 x double> %87, i32 1
  %101 = fmul double %99, %100
  %102 = fsub double %98, %101
  %103 = getelementptr inbounds %class.SkOpAngle, %class.SkOpAngle* %0, i64 0, i32 3, i32 2
  store double %102, double* %103, align 8
  %104 = getelementptr inbounds %class.SkOpAngle, %class.SkOpAngle* %0, i64 0, i32 2
  store double 0.000000e+00, double* %104, align 8
  br label %396

105:                                              ; preds = %69, %69
  %106 = getelementptr inbounds %class.SkOpAngle, %class.SkOpAngle* %0, i64 0, i32 1, i32 0, i32 0, i32 0, i32 0, i64 0, i32 1
  %107 = load double, double* %106, align 8
  %108 = getelementptr inbounds %class.SkOpAngle, %class.SkOpAngle* %0, i64 0, i32 1, i32 0, i32 0, i32 0, i32 0, i64 1, i32 1
  %109 = load double, double* %108, align 8
  %110 = fsub double %107, %109
  %111 = getelementptr inbounds %class.SkOpAngle, %class.SkOpAngle* %0, i64 0, i32 1, i32 0, i32 0, i32 0, i32 0, i64 1, i32 0
  %112 = load double, double* %111, align 8
  %113 = getelementptr inbounds %class.SkDCurveSweep, %class.SkDCurveSweep* %21, i64 0, i32 0, i32 0, i32 0, i32 0, i64 0, i32 0
  %114 = load double, double* %113, align 8
  %115 = fsub double %112, %114
  %116 = fmul double %109, %114
  %117 = fmul double %107, %112
  %118 = fsub double %116, %117
  %119 = fcmp une double %110, 0.000000e+00
  br i1 %119, label %139, label %120

120:                                              ; preds = %105
  %121 = fcmp oeq double %115, 0.000000e+00
  br i1 %121, label %122, label %132

122:                                              ; preds = %120
  %123 = getelementptr inbounds %class.SkOpAngle, %class.SkOpAngle* %0, i64 0, i32 1, i32 0, i32 0, i32 0, i32 0, i64 2, i32 1
  %124 = load double, double* %123, align 8
  %125 = fsub double %107, %124
  %126 = getelementptr inbounds %class.SkOpAngle, %class.SkOpAngle* %0, i64 0, i32 1, i32 0, i32 0, i32 0, i32 0, i64 2, i32 0
  %127 = load double, double* %126, align 8
  %128 = fsub double %127, %114
  %129 = fmul double %114, %124
  %130 = fmul double %107, %127
  %131 = fsub double %129, %130
  br label %139

132:                                              ; preds = %120
  %133 = fcmp olt double %115, 0.000000e+00
  br i1 %133, label %139, label %134

134:                                              ; preds = %132
  %135 = getelementptr inbounds %class.SkOpAngle, %class.SkOpAngle* %0, i64 0, i32 1, i32 0, i32 0, i32 0, i32 0, i64 2, i32 1
  %136 = load double, double* %135, align 8
  %137 = fcmp ogt double %107, %136
  br i1 %137, label %138, label %139

138:                                              ; preds = %134
  br label %139

139:                                              ; preds = %105, %122, %132, %134, %138
  %140 = phi double [ %110, %105 ], [ %125, %122 ], [ %110, %132 ], [ 0x3CB0000000000000, %138 ], [ %110, %134 ]
  %141 = phi double [ %115, %105 ], [ %128, %122 ], [ %115, %132 ], [ %115, %138 ], [ %115, %134 ]
  %142 = phi double [ %118, %105 ], [ %131, %122 ], [ %118, %132 ], [ %118, %138 ], [ %118, %134 ]
  %143 = getelementptr inbounds %class.SkOpAngle, %class.SkOpAngle* %0, i64 0, i32 1, i32 0, i32 0, i32 0, i32 0, i64 2, i32 0
  %144 = load double, double* %143, align 8
  %145 = fmul double %140, %144
  %146 = getelementptr inbounds %class.SkOpAngle, %class.SkOpAngle* %0, i64 0, i32 1, i32 0, i32 0, i32 0, i32 0, i64 2, i32 1
  %147 = load double, double* %146, align 8
  %148 = fmul double %141, %147
  %149 = fadd double %145, %148
  %150 = fadd double %142, %149
  %151 = fsub double -0.000000e+00, %150
  %152 = getelementptr inbounds %class.SkOpAngle, %class.SkOpAngle* %0, i64 0, i32 2
  store double %151, double* %152, align 8
  br label %396

153:                                              ; preds = %69
  %154 = bitcast %class.SkLineParameters* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %154) #10
  %155 = getelementptr inbounds %class.SkLineParameters, %class.SkLineParameters* %5, i64 0, i32 0
  %156 = getelementptr inbounds %class.SkLineParameters, %class.SkLineParameters* %5, i64 0, i32 1
  %157 = getelementptr inbounds %class.SkLineParameters, %class.SkLineParameters* %5, i64 0, i32 2
  %158 = getelementptr inbounds %class.SkDCurveSweep, %class.SkDCurveSweep* %21, i64 0, i32 0, i32 0, i32 0
  %159 = bitcast %class.SkLineParameters* %5 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %159, i8 -1, i64 24, i1 false)
  %160 = call zeroext i1 @_ZN16SkLineParameters14cubicEndPointsERK8SkDCubic(%class.SkLineParameters* nonnull %5, %struct.SkDCubic* dereferenceable(64) %158) #10
  %161 = getelementptr inbounds %class.SkDCurveSweep, %class.SkDCurveSweep* %21, i64 0, i32 0, i32 0, i32 0, i32 0, i64 0, i32 0
  %162 = load double, double* %161, align 8
  %163 = getelementptr inbounds %class.SkOpAngle, %class.SkOpAngle* %0, i64 0, i32 1, i32 0, i32 0, i32 0, i32 0, i64 1, i32 0
  %164 = load double, double* %163, align 8
  %165 = fcmp oeq double %162, %164
  br i1 %165, label %166, label %172

166:                                              ; preds = %153
  %167 = getelementptr inbounds %class.SkOpAngle, %class.SkOpAngle* %0, i64 0, i32 1, i32 0, i32 0, i32 0, i32 0, i64 0, i32 1
  %168 = load double, double* %167, align 8
  %169 = getelementptr inbounds %class.SkOpAngle, %class.SkOpAngle* %0, i64 0, i32 1, i32 0, i32 0, i32 0, i32 0, i64 1, i32 1
  %170 = load double, double* %169, align 8
  %171 = fcmp oeq double %168, %170
  br i1 %171, label %176, label %172

172:                                              ; preds = %166, %153
  %173 = bitcast %class.SkDCurveSweep* %21 to %struct.SkDLine*
  %174 = getelementptr inbounds %class.SkOpAngle, %class.SkOpAngle* %0, i64 0, i32 1, i32 0, i32 0, i32 0, i32 0, i64 2
  %175 = call zeroext i1 @_ZNK7SkDLine7nearRayERK8SkDPoint(%struct.SkDLine* %173, %struct.SkDPoint* dereferenceable(16) %174) #10
  br label %176

176:                                              ; preds = %172, %166
  %177 = load double, double* %155, align 8
  %178 = getelementptr inbounds %class.SkOpAngle, %class.SkOpAngle* %0, i64 0, i32 1, i32 0, i32 0, i32 0, i32 0, i64 3, i32 0
  %179 = load double, double* %178, align 8
  %180 = fmul double %177, %179
  %181 = load double, double* %156, align 8
  %182 = getelementptr inbounds %class.SkOpAngle, %class.SkOpAngle* %0, i64 0, i32 1, i32 0, i32 0, i32 0, i32 0, i64 3, i32 1
  %183 = load double, double* %182, align 8
  %184 = fmul double %181, %183
  %185 = fadd double %180, %184
  %186 = load double, double* %157, align 8
  %187 = fadd double %186, %185
  %188 = fsub double -0.000000e+00, %187
  %189 = getelementptr inbounds %class.SkOpAngle, %class.SkOpAngle* %0, i64 0, i32 2
  store double %188, double* %189, align 8
  %190 = bitcast [4 x double]* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %190) #10
  %191 = getelementptr inbounds [4 x double], [4 x double]* %6, i64 0, i64 0
  %192 = bitcast %struct.SkDCubic* %2 to i8*
  %193 = bitcast [4 x double]* %6 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %193, i8 -1, i64 32, i1 false)
  call void @llvm.lifetime.start.p0i8(i64 64, i8* nonnull %192) #10
  %194 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %18, i64 0, i32 0
  %195 = load float, float* %194, align 4
  %196 = fpext float %195 to double
  %197 = getelementptr inbounds %struct.SkDCubic, %struct.SkDCubic* %2, i64 0, i32 0, i64 0, i32 0
  store double %196, double* %197, align 8
  %198 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %18, i64 0, i32 1
  %199 = load float, float* %198, align 4
  %200 = fpext float %199 to double
  %201 = getelementptr inbounds %struct.SkDCubic, %struct.SkDCubic* %2, i64 0, i32 0, i64 0, i32 1
  store double %200, double* %201, align 8
  %202 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %18, i64 1, i32 0
  %203 = load float, float* %202, align 4
  %204 = fpext float %203 to double
  %205 = getelementptr inbounds %struct.SkDCubic, %struct.SkDCubic* %2, i64 0, i32 0, i64 1, i32 0
  store double %204, double* %205, align 8
  %206 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %18, i64 1, i32 1
  %207 = load float, float* %206, align 4
  %208 = fpext float %207 to double
  %209 = getelementptr inbounds %struct.SkDCubic, %struct.SkDCubic* %2, i64 0, i32 0, i64 1, i32 1
  store double %208, double* %209, align 8
  %210 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %18, i64 2, i32 0
  %211 = load float, float* %210, align 4
  %212 = fpext float %211 to double
  %213 = getelementptr inbounds %struct.SkDCubic, %struct.SkDCubic* %2, i64 0, i32 0, i64 2, i32 0
  store double %212, double* %213, align 8
  %214 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %18, i64 2, i32 1
  %215 = load float, float* %214, align 4
  %216 = fpext float %215 to double
  %217 = getelementptr inbounds %struct.SkDCubic, %struct.SkDCubic* %2, i64 0, i32 0, i64 2, i32 1
  store double %216, double* %217, align 8
  %218 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %18, i64 3, i32 0
  %219 = load float, float* %218, align 4
  %220 = fpext float %219 to double
  %221 = getelementptr inbounds %struct.SkDCubic, %struct.SkDCubic* %2, i64 0, i32 0, i64 3, i32 0
  store double %220, double* %221, align 8
  %222 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %18, i64 3, i32 1
  %223 = load float, float* %222, align 4
  %224 = fpext float %223 to double
  %225 = getelementptr inbounds %struct.SkDCubic, %struct.SkDCubic* %2, i64 0, i32 0, i64 3, i32 1
  store double %224, double* %225, align 8
  %226 = call i32 @_ZNK8SkDCubic15findInflectionsEPd(%struct.SkDCubic* nonnull %2, double* nonnull %191) #10
  call void @llvm.lifetime.end.p0i8(i64 64, i8* nonnull %192) #10
  %227 = load %class.SkOpSpanBase*, %class.SkOpSpanBase** %10, align 8
  %228 = getelementptr inbounds %class.SkOpSpanBase, %class.SkOpSpanBase* %227, i64 0, i32 0, i32 0
  %229 = load double, double* %228, align 8
  %230 = load %class.SkOpSpanBase*, %class.SkOpSpanBase** %19, align 8
  %231 = getelementptr inbounds %class.SkOpSpanBase, %class.SkOpSpanBase* %230, i64 0, i32 0, i32 0
  %232 = load double, double* %231, align 8
  %233 = icmp sgt i32 %226, 0
  br i1 %233, label %234, label %299

234:                                              ; preds = %176
  %235 = zext i32 %226 to i64
  %236 = icmp ult i32 %226, 4
  br i1 %236, label %285, label %237

237:                                              ; preds = %234
  %238 = and i64 %235, 4294967292
  %239 = insertelement <2 x double> undef, double %229, i32 0
  %240 = shufflevector <2 x double> %239, <2 x double> undef, <2 x i32> zeroinitializer
  %241 = insertelement <2 x double> undef, double %229, i32 0
  %242 = shufflevector <2 x double> %241, <2 x double> undef, <2 x i32> zeroinitializer
  %243 = insertelement <2 x double> undef, double %232, i32 0
  %244 = shufflevector <2 x double> %243, <2 x double> undef, <2 x i32> zeroinitializer
  %245 = insertelement <2 x double> undef, double %232, i32 0
  %246 = shufflevector <2 x double> %245, <2 x double> undef, <2 x i32> zeroinitializer
  br label %247

247:                                              ; preds = %280, %237
  %248 = phi i64 [ 0, %237 ], [ %281, %280 ]
  %249 = getelementptr inbounds [4 x double], [4 x double]* %6, i64 0, i64 %248
  %250 = bitcast double* %249 to <2 x double>*
  %251 = load <2 x double>, <2 x double>* %250, align 16
  %252 = getelementptr inbounds double, double* %249, i64 2
  %253 = bitcast double* %252 to <2 x double>*
  %254 = load <2 x double>, <2 x double>* %253, align 16
  %255 = fsub <2 x double> %240, %251
  %256 = fsub <2 x double> %242, %254
  %257 = fsub <2 x double> %244, %251
  %258 = fsub <2 x double> %246, %254
  %259 = fmul <2 x double> %255, %257
  %260 = fmul <2 x double> %256, %258
  %261 = fcmp ugt <2 x double> %259, zeroinitializer
  %262 = fcmp ugt <2 x double> %260, zeroinitializer
  %263 = extractelement <2 x i1> %261, i32 0
  br i1 %263, label %264, label %265

264:                                              ; preds = %247
  store double -1.000000e+00, double* %249, align 16
  br label %265

265:                                              ; preds = %264, %247
  %266 = extractelement <2 x i1> %261, i32 1
  br i1 %266, label %267, label %270

267:                                              ; preds = %265
  %268 = or i64 %248, 1
  %269 = getelementptr inbounds [4 x double], [4 x double]* %6, i64 0, i64 %268
  store double -1.000000e+00, double* %269, align 8
  br label %270

270:                                              ; preds = %267, %265
  %271 = extractelement <2 x i1> %262, i32 0
  br i1 %271, label %272, label %275

272:                                              ; preds = %270
  %273 = or i64 %248, 2
  %274 = getelementptr inbounds [4 x double], [4 x double]* %6, i64 0, i64 %273
  store double -1.000000e+00, double* %274, align 16
  br label %275

275:                                              ; preds = %272, %270
  %276 = extractelement <2 x i1> %262, i32 1
  br i1 %276, label %277, label %280

277:                                              ; preds = %275
  %278 = or i64 %248, 3
  %279 = getelementptr inbounds [4 x double], [4 x double]* %6, i64 0, i64 %278
  store double -1.000000e+00, double* %279, align 8
  br label %280

280:                                              ; preds = %277, %275
  %281 = add i64 %248, 4
  %282 = icmp eq i64 %281, %238
  br i1 %282, label %283, label %247, !llvm.loop !3

283:                                              ; preds = %280
  %284 = icmp eq i64 %238, %235
  br i1 %284, label %299, label %285

285:                                              ; preds = %283, %234
  %286 = phi i64 [ 0, %234 ], [ %238, %283 ]
  br label %287

287:                                              ; preds = %285, %296
  %288 = phi i64 [ %297, %296 ], [ %286, %285 ]
  %289 = getelementptr inbounds [4 x double], [4 x double]* %6, i64 0, i64 %288
  %290 = load double, double* %289, align 8
  %291 = fsub double %229, %290
  %292 = fsub double %232, %290
  %293 = fmul double %291, %292
  %294 = fcmp ugt double %293, 0.000000e+00
  br i1 %294, label %295, label %296

295:                                              ; preds = %287
  store double -1.000000e+00, double* %289, align 8
  br label %296

296:                                              ; preds = %287, %295
  %297 = add nuw nsw i64 %288, 1
  %298 = icmp eq i64 %297, %235
  br i1 %298, label %299, label %287, !llvm.loop !5

299:                                              ; preds = %296, %283, %176
  %300 = add nsw i32 %226, 1
  %301 = sext i32 %226 to i64
  %302 = getelementptr inbounds [4 x double], [4 x double]* %6, i64 0, i64 %301
  store double %229, double* %302, align 8
  %303 = add nsw i32 %226, 2
  %304 = sext i32 %300 to i64
  %305 = getelementptr inbounds [4 x double], [4 x double]* %6, i64 0, i64 %304
  store double %232, double* %305, align 8
  %306 = getelementptr inbounds %class.anon, %class.anon* %3, i64 0, i32 0
  call void @llvm.lifetime.start.p0i8(i64 1, i8* nonnull %306) #10
  %307 = icmp slt i32 %226, 0
  br i1 %307, label %312, label %308

308:                                              ; preds = %299
  %309 = call i32 @llvm.ctlz.i32(i32 %226, i1 false) #10, !range !7
  %310 = shl nuw nsw i32 %309, 1
  %311 = sub nsw i32 64, %310
  call void @_Z12SkTIntroSortIdZ8SkTQSortIdEvPT_S2_EUlRKdS4_E_EviS2_iRKT0_(i32 %311, double* nonnull %191, i32 %303, %class.anon* nonnull dereferenceable(1) %3) #10
  br label %312

312:                                              ; preds = %299, %308
  call void @llvm.lifetime.end.p0i8(i64 1, i8* nonnull %306) #10
  %313 = shl i32 %303, 1
  br label %314

314:                                              ; preds = %314, %312
  %315 = phi i64 [ %319, %314 ], [ 0, %312 ]
  %316 = getelementptr inbounds [4 x double], [4 x double]* %6, i64 0, i64 %315
  %317 = load double, double* %316, align 8
  %318 = fcmp olt double %317, 0.000000e+00
  %319 = add nuw i64 %315, 1
  br i1 %318, label %314, label %320

320:                                              ; preds = %314
  %321 = add nsw i32 %313, -1
  %322 = trunc i64 %315 to i32
  %323 = shl nuw i32 %322, 1
  %324 = icmp slt i32 %323, %321
  br i1 %324, label %325, label %393

325:                                              ; preds = %320
  %326 = bitcast %struct.SkDCubic* %4 to i8*
  %327 = getelementptr inbounds %struct.SkDCubic, %struct.SkDCubic* %4, i64 0, i32 0, i64 0, i32 0
  %328 = getelementptr inbounds %struct.SkDCubic, %struct.SkDCubic* %4, i64 0, i32 0, i64 0, i32 1
  %329 = getelementptr inbounds %struct.SkDCubic, %struct.SkDCubic* %4, i64 0, i32 0, i64 1, i32 0
  %330 = getelementptr inbounds %struct.SkDCubic, %struct.SkDCubic* %4, i64 0, i32 0, i64 1, i32 1
  %331 = getelementptr inbounds %struct.SkDCubic, %struct.SkDCubic* %4, i64 0, i32 0, i64 2, i32 0
  %332 = getelementptr inbounds %struct.SkDCubic, %struct.SkDCubic* %4, i64 0, i32 0, i64 2, i32 1
  %333 = getelementptr inbounds %struct.SkDCubic, %struct.SkDCubic* %4, i64 0, i32 0, i64 3, i32 0
  %334 = getelementptr inbounds %struct.SkDCubic, %struct.SkDCubic* %4, i64 0, i32 0, i64 3, i32 1
  %335 = bitcast %class.SkLineParameters* %7 to i8*
  %336 = getelementptr inbounds %class.SkLineParameters, %class.SkLineParameters* %7, i64 0, i32 2
  %337 = add i32 %313, -1
  %338 = bitcast %class.SkLineParameters* %7 to i8*
  %339 = bitcast %class.SkLineParameters* %7 to <2 x double>*
  br label %340

340:                                              ; preds = %356, %325
  %341 = phi double [ 0.000000e+00, %325 ], [ %390, %356 ]
  %342 = phi i32 [ %323, %325 ], [ %391, %356 ]
  %343 = ashr i32 %342, 1
  %344 = sext i32 %343 to i64
  %345 = getelementptr inbounds [4 x double], [4 x double]* %6, i64 0, i64 %344
  %346 = load double, double* %345, align 8
  %347 = and i32 %342, 1
  %348 = icmp eq i32 %347, 0
  br i1 %348, label %356, label %349

349:                                              ; preds = %340
  %350 = add nsw i32 %343, 1
  %351 = sext i32 %350 to i64
  %352 = getelementptr inbounds [4 x double], [4 x double]* %6, i64 0, i64 %351
  %353 = load double, double* %352, align 8
  %354 = fadd double %346, %353
  %355 = fmul double %354, 5.000000e-01
  br label %356

356:                                              ; preds = %340, %349
  %357 = phi double [ %355, %349 ], [ %346, %340 ]
  call void @llvm.lifetime.start.p0i8(i64 64, i8* nonnull %326) #10
  %358 = load float, float* %194, align 4
  %359 = fpext float %358 to double
  store double %359, double* %327, align 8
  %360 = load float, float* %198, align 4
  %361 = fpext float %360 to double
  store double %361, double* %328, align 8
  %362 = load float, float* %202, align 4
  %363 = fpext float %362 to double
  store double %363, double* %329, align 8
  %364 = load float, float* %206, align 4
  %365 = fpext float %364 to double
  store double %365, double* %330, align 8
  %366 = load float, float* %210, align 4
  %367 = fpext float %366 to double
  store double %367, double* %331, align 8
  %368 = load float, float* %214, align 4
  %369 = fpext float %368 to double
  store double %369, double* %332, align 8
  %370 = load float, float* %218, align 4
  %371 = fpext float %370 to double
  store double %371, double* %333, align 8
  %372 = load float, float* %222, align 4
  %373 = fpext float %372 to double
  store double %373, double* %334, align 8
  %374 = call { double, double } @_ZNK8SkDCubic5ptAtTEd(%struct.SkDCubic* nonnull %4, double %357) #10
  call void @llvm.lifetime.end.p0i8(i64 64, i8* nonnull %326) #10
  %375 = extractvalue { double, double } %374, 0
  %376 = extractvalue { double, double } %374, 1
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %335) #10
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %338, i8 -1, i64 24, i1 false)
  %377 = call zeroext i1 @_ZN16SkLineParameters14cubicEndPointsERK8SkDCubic(%class.SkLineParameters* nonnull %7, %struct.SkDCubic* dereferenceable(64) %158)
  %378 = load <2 x double>, <2 x double>* %339, align 16
  %379 = insertelement <2 x double> undef, double %375, i32 0
  %380 = insertelement <2 x double> %379, double %376, i32 1
  %381 = fmul <2 x double> %380, %378
  %382 = extractelement <2 x double> %381, i32 0
  %383 = extractelement <2 x double> %381, i32 1
  %384 = fadd double %382, %383
  %385 = load double, double* %336, align 16
  %386 = fadd double %385, %384
  %387 = call double @llvm.fabs.f64(double %341)
  %388 = call double @llvm.fabs.f64(double %386)
  %389 = fcmp olt double %387, %388
  %390 = select i1 %389, double %386, double %341
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %335) #10
  %391 = add i32 %342, 1
  %392 = icmp eq i32 %391, %337
  br i1 %392, label %393, label %340

393:                                              ; preds = %356, %320
  %394 = phi double [ 0.000000e+00, %320 ], [ %390, %356 ]
  %395 = fsub double -0.000000e+00, %394
  store double %395, double* %189, align 8
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %190) #10
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %154) #10
  br label %396

396:                                              ; preds = %70, %69, %393, %139, %13
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN9SkOpAngle9setSectorEv(%class.SkOpAngle*) local_unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %class.SkOpAngle, %class.SkOpAngle* %0, i64 0, i32 6
  %3 = load %class.SkOpSpanBase*, %class.SkOpSpanBase** %2, align 8
  %4 = icmp eq %class.SkOpSpanBase* %3, null
  br i1 %4, label %5, label %7

5:                                                ; preds = %1
  %6 = getelementptr inbounds %class.SkOpAngle, %class.SkOpAngle* %0, i64 0, i32 12
  store i8 1, i8* %6, align 2
  br label %160

7:                                                ; preds = %1
  %8 = getelementptr inbounds %class.SkOpSpanBase, %class.SkOpSpanBase* %3, i64 0, i32 1
  %9 = load %class.SkOpSegment*, %class.SkOpSegment** %8, align 8
  %10 = getelementptr inbounds %class.SkOpSegment, %class.SkOpSegment* %9, i64 0, i32 10
  %11 = load i32, i32* %10, align 4
  %12 = getelementptr inbounds %class.SkOpAngle, %class.SkOpAngle* %0, i64 0, i32 1, i32 1, i64 0, i32 0
  %13 = load double, double* %12, align 8
  %14 = getelementptr inbounds %class.SkOpAngle, %class.SkOpAngle* %0, i64 0, i32 1, i32 1, i64 0, i32 1
  %15 = load double, double* %14, align 8
  %16 = tail call double @llvm.fabs.f64(double %13) #10
  %17 = tail call double @llvm.fabs.f64(double %15) #10
  %18 = icmp eq i32 %11, 1
  br i1 %18, label %23, label %19

19:                                               ; preds = %7
  %20 = fptrunc double %16 to float
  %21 = fptrunc double %17 to float
  %22 = tail call zeroext i1 @_Z15AlmostEqualUlpsff(float %20, float %21) #10
  br i1 %22, label %25, label %23

23:                                               ; preds = %19, %7
  %24 = fsub double %16, %17
  br label %25

25:                                               ; preds = %19, %23
  %26 = phi double [ %24, %23 ], [ 0.000000e+00, %19 ]
  %27 = fcmp oge double %26, 0.000000e+00
  %28 = zext i1 %27 to i64
  %29 = fcmp ogt double %26, 0.000000e+00
  %30 = zext i1 %29 to i64
  %31 = add nuw nsw i64 %28, %30
  %32 = fcmp oge double %15, 0.000000e+00
  %33 = zext i1 %32 to i64
  %34 = fcmp ogt double %15, 0.000000e+00
  %35 = zext i1 %34 to i64
  %36 = add nuw nsw i64 %33, %35
  %37 = fcmp oge double %13, 0.000000e+00
  %38 = zext i1 %37 to i64
  %39 = fcmp ogt double %13, 0.000000e+00
  %40 = zext i1 %39 to i64
  %41 = add nuw nsw i64 %38, %40
  %42 = getelementptr inbounds [3 x [3 x [3 x i32]]], [3 x [3 x [3 x i32]]]* @_ZZNK9SkOpAngle10findSectorEN6SkPath4VerbEddE10sedecimant, i64 0, i64 %31, i64 %36, i64 %41
  %43 = load i32, i32* %42, align 4
  %44 = trunc i32 %43 to i8
  %45 = shl i8 %44, 1
  %46 = or i8 %45, 1
  %47 = getelementptr inbounds %class.SkOpAngle, %class.SkOpAngle* %0, i64 0, i32 10
  store i8 %46, i8* %47, align 4
  %48 = icmp slt i8 %46, 0
  br i1 %48, label %96, label %49

49:                                               ; preds = %25
  %50 = getelementptr inbounds %class.SkOpAngle, %class.SkOpAngle* %0, i64 0, i32 1, i32 2
  %51 = load i8, i8* %50, align 8, !range !2
  %52 = icmp eq i8 %51, 0
  br i1 %52, label %53, label %58

53:                                               ; preds = %49
  %54 = getelementptr inbounds %class.SkOpAngle, %class.SkOpAngle* %0, i64 0, i32 11
  store i8 %46, i8* %54, align 1
  %55 = sext i8 %46 to i32
  %56 = shl i32 1, %55
  %57 = getelementptr inbounds %class.SkOpAngle, %class.SkOpAngle* %0, i64 0, i32 9
  store i32 %56, i32* %57, align 8
  br label %160

58:                                               ; preds = %49
  %59 = getelementptr inbounds %class.SkOpAngle, %class.SkOpAngle* %0, i64 0, i32 1, i32 1, i64 1, i32 0
  %60 = load double, double* %59, align 8
  %61 = getelementptr inbounds %class.SkOpAngle, %class.SkOpAngle* %0, i64 0, i32 1, i32 1, i64 1, i32 1
  %62 = load double, double* %61, align 8
  %63 = tail call double @llvm.fabs.f64(double %60) #10
  %64 = tail call double @llvm.fabs.f64(double %62) #10
  br i1 %18, label %69, label %65

65:                                               ; preds = %58
  %66 = fptrunc double %63 to float
  %67 = fptrunc double %64 to float
  %68 = tail call zeroext i1 @_Z15AlmostEqualUlpsff(float %66, float %67) #10
  br i1 %68, label %71, label %69

69:                                               ; preds = %65, %58
  %70 = fsub double %63, %64
  br label %71

71:                                               ; preds = %65, %69
  %72 = phi double [ %70, %69 ], [ 0.000000e+00, %65 ]
  %73 = fcmp oge double %72, 0.000000e+00
  %74 = zext i1 %73 to i64
  %75 = fcmp ogt double %72, 0.000000e+00
  %76 = zext i1 %75 to i64
  %77 = add nuw nsw i64 %74, %76
  %78 = fcmp oge double %62, 0.000000e+00
  %79 = zext i1 %78 to i64
  %80 = fcmp ogt double %62, 0.000000e+00
  %81 = zext i1 %80 to i64
  %82 = add nuw nsw i64 %79, %81
  %83 = fcmp oge double %60, 0.000000e+00
  %84 = zext i1 %83 to i64
  %85 = fcmp ogt double %60, 0.000000e+00
  %86 = zext i1 %85 to i64
  %87 = add nuw nsw i64 %84, %86
  %88 = getelementptr inbounds [3 x [3 x [3 x i32]]], [3 x [3 x [3 x i32]]]* @_ZZNK9SkOpAngle10findSectorEN6SkPath4VerbEddE10sedecimant, i64 0, i64 %77, i64 %82, i64 %87
  %89 = load i32, i32* %88, align 4
  %90 = shl nsw i32 %89, 1
  %91 = or i32 %90, 1
  %92 = trunc i32 %91 to i8
  %93 = getelementptr inbounds %class.SkOpAngle, %class.SkOpAngle* %0, i64 0, i32 11
  store i8 %92, i8* %93, align 1
  %94 = and i32 %89, 64
  %95 = icmp eq i32 %94, 0
  br i1 %95, label %100, label %96

96:                                               ; preds = %71, %25
  %97 = getelementptr inbounds %class.SkOpAngle, %class.SkOpAngle* %0, i64 0, i32 11
  store i8 -1, i8* %97, align 1
  store i8 -1, i8* %47, align 4
  %98 = getelementptr inbounds %class.SkOpAngle, %class.SkOpAngle* %0, i64 0, i32 9
  store i32 0, i32* %98, align 8
  %99 = getelementptr inbounds %class.SkOpAngle, %class.SkOpAngle* %0, i64 0, i32 13
  store i8 1, i8* %99, align 1
  br label %160

100:                                              ; preds = %71
  %101 = and i32 %91, 255
  %102 = load i8, i8* %47, align 4
  %103 = sext i8 %102 to i32
  %104 = icmp ne i32 %101, %103
  %105 = and i32 %103, 3
  %106 = icmp eq i32 %105, 3
  %107 = or i1 %104, %106
  br i1 %107, label %111, label %108

108:                                              ; preds = %100
  %109 = shl i32 1, %101
  %110 = getelementptr inbounds %class.SkOpAngle, %class.SkOpAngle* %0, i64 0, i32 9
  store i32 %109, i32* %110, align 8
  br label %160

111:                                              ; preds = %100
  %112 = icmp sgt i8 %102, %92
  %113 = select i1 %112, i8 %92, i8 %102
  %114 = sext i8 %113 to i32
  %115 = icmp slt i8 %102, %92
  %116 = select i1 %115, i8 %92, i8 %102
  %117 = sext i8 %116 to i32
  %118 = sub nsw i32 %117, %114
  %119 = icmp sgt i32 %118, 16
  %120 = select i1 %112, i8* %93, i8* %47
  %121 = load i8, i8* %120, align 1
  %122 = icmp eq i8 %102, %121
  %123 = xor i1 %119, %122
  %124 = and i8 %102, 3
  %125 = icmp eq i8 %124, 3
  br i1 %125, label %126, label %130

126:                                              ; preds = %111
  %127 = select i1 %123, i8 1, i8 31
  %128 = add i8 %127, %102
  %129 = and i8 %128, 31
  store i8 %129, i8* %47, align 4
  br label %130

130:                                              ; preds = %126, %111
  %131 = phi i8 [ %129, %126 ], [ %102, %111 ]
  %132 = and i8 %92, 3
  %133 = icmp eq i8 %132, 3
  br i1 %133, label %134, label %138

134:                                              ; preds = %130
  %135 = select i1 %123, i8 31, i8 1
  %136 = add i8 %135, %92
  %137 = and i8 %136, 30
  store i8 %137, i8* %93, align 1
  br label %138

138:                                              ; preds = %134, %130
  %139 = phi i8 [ %137, %134 ], [ %92, %130 ]
  %140 = icmp slt i8 %139, %131
  %141 = select i1 %140, i8 %139, i8 %131
  %142 = sext i8 %141 to i32
  %143 = icmp slt i8 %131, %139
  %144 = select i1 %143, i8 %139, i8 %131
  %145 = sext i8 %144 to i32
  %146 = sub nsw i32 %145, %142
  %147 = icmp sgt i32 %146, 16
  br i1 %147, label %154, label %148

148:                                              ; preds = %138
  %149 = sub nsw i32 31, %145
  %150 = add nsw i32 %149, %142
  %151 = lshr i32 -1, %150
  %152 = shl i32 %151, %142
  %153 = getelementptr inbounds %class.SkOpAngle, %class.SkOpAngle* %0, i64 0, i32 9
  store i32 %152, i32* %153, align 8
  br label %160

154:                                              ; preds = %138
  %155 = sub nsw i32 31, %142
  %156 = lshr i32 -1, %155
  %157 = shl i32 -1, %145
  %158 = or i32 %156, %157
  %159 = getelementptr inbounds %class.SkOpAngle, %class.SkOpAngle* %0, i64 0, i32 9
  store i32 %158, i32* %159, align 8
  br label %160

160:                                              ; preds = %53, %96, %108, %154, %148, %5
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @_ZN9SkOpAngle18convexHullOverlapsEPKS_(%class.SkOpAngle* nocapture, %class.SkOpAngle* nocapture readonly) local_unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %class.SkOpAngle, %class.SkOpAngle* %0, i64 0, i32 1, i32 1, i64 0, i32 0
  %4 = getelementptr inbounds %class.SkOpAngle, %class.SkOpAngle* %0, i64 0, i32 1, i32 1, i64 1, i32 1
  %5 = getelementptr inbounds %class.SkOpAngle, %class.SkOpAngle* %0, i64 0, i32 1, i32 1, i64 0, i32 1
  %6 = bitcast double* %3 to <2 x double>*
  %7 = load <2 x double>, <2 x double>* %6, align 8
  %8 = getelementptr inbounds %class.SkOpAngle, %class.SkOpAngle* %0, i64 0, i32 1, i32 1, i64 1, i32 0
  %9 = bitcast double* %8 to <2 x double>*
  %10 = load <2 x double>, <2 x double>* %9, align 8
  %11 = shufflevector <2 x double> %10, <2 x double> undef, <2 x i32> <i32 1, i32 0>
  %12 = fmul <2 x double> %7, %11
  %13 = extractelement <2 x double> %12, i32 0
  %14 = fptrunc double %13 to float
  %15 = extractelement <2 x double> %12, i32 1
  %16 = fptrunc double %15 to float
  %17 = tail call zeroext i1 @_Z15AlmostEqualUlpsff(float %14, float %16) #10
  %18 = fsub double %13, %15
  %19 = select i1 %17, double 0.000000e+00, double %18
  %20 = load double, double* %3, align 8
  %21 = getelementptr inbounds %class.SkOpAngle, %class.SkOpAngle* %1, i64 0, i32 1, i32 1, i64 0, i32 1
  %22 = load double, double* %21, align 8
  %23 = fmul double %20, %22
  %24 = load double, double* %5, align 8
  %25 = getelementptr inbounds %class.SkOpAngle, %class.SkOpAngle* %1, i64 0, i32 1, i32 1, i64 0, i32 0
  %26 = load double, double* %25, align 8
  %27 = fmul double %24, %26
  %28 = fptrunc double %23 to float
  %29 = fptrunc double %27 to float
  %30 = tail call zeroext i1 @_Z15AlmostEqualUlpsff(float %28, float %29) #10
  %31 = fsub double %23, %27
  %32 = select i1 %30, double 0.000000e+00, double %31
  %33 = load double, double* %8, align 8
  %34 = load double, double* %21, align 8
  %35 = fmul double %33, %34
  %36 = load double, double* %4, align 8
  %37 = load double, double* %25, align 8
  %38 = fmul double %36, %37
  %39 = fptrunc double %35 to float
  %40 = fptrunc double %38 to float
  %41 = tail call zeroext i1 @_Z15AlmostEqualUlpsff(float %39, float %40) #10
  %42 = fsub double %35, %38
  %43 = select i1 %41, double 0.000000e+00, double %42
  %44 = fcmp ogt double %19, 0.000000e+00
  br i1 %44, label %45, label %49

45:                                               ; preds = %2
  %46 = fcmp ogt double %32, 0.000000e+00
  %47 = fcmp olt double %43, 0.000000e+00
  %48 = and i1 %46, %47
  br label %53

49:                                               ; preds = %2
  %50 = fcmp olt double %32, 0.000000e+00
  %51 = fcmp ogt double %43, 0.000000e+00
  %52 = and i1 %50, %51
  br label %53

53:                                               ; preds = %49, %45
  %54 = phi i1 [ %48, %45 ], [ %52, %49 ]
  %55 = load double, double* %3, align 8
  %56 = getelementptr inbounds %class.SkOpAngle, %class.SkOpAngle* %1, i64 0, i32 1, i32 1, i64 1, i32 1
  %57 = load double, double* %56, align 8
  %58 = fmul double %55, %57
  %59 = load double, double* %5, align 8
  %60 = getelementptr inbounds %class.SkOpAngle, %class.SkOpAngle* %1, i64 0, i32 1, i32 1, i64 1, i32 0
  %61 = load double, double* %60, align 8
  %62 = fmul double %59, %61
  %63 = fptrunc double %58 to float
  %64 = fptrunc double %62 to float
  %65 = tail call zeroext i1 @_Z15AlmostEqualUlpsff(float %63, float %64) #10
  %66 = fsub double %58, %62
  %67 = select i1 %65, double 0.000000e+00, double %66
  %68 = load double, double* %8, align 8
  %69 = load double, double* %56, align 8
  %70 = fmul double %68, %69
  %71 = load double, double* %4, align 8
  %72 = load double, double* %60, align 8
  %73 = fmul double %71, %72
  %74 = fptrunc double %70 to float
  %75 = fptrunc double %73 to float
  %76 = tail call zeroext i1 @_Z15AlmostEqualUlpsff(float %74, float %75) #10
  %77 = fsub double %70, %73
  %78 = select i1 %76, double 0.000000e+00, double %77
  br i1 %44, label %79, label %83

79:                                               ; preds = %53
  %80 = fcmp ogt double %67, 0.000000e+00
  %81 = fcmp olt double %78, 0.000000e+00
  %82 = and i1 %80, %81
  br label %87

83:                                               ; preds = %53
  %84 = fcmp olt double %67, 0.000000e+00
  %85 = fcmp ogt double %78, 0.000000e+00
  %86 = and i1 %84, %85
  br label %87

87:                                               ; preds = %83, %79
  %88 = phi i1 [ %82, %79 ], [ %86, %83 ]
  %89 = or i1 %54, %88
  %90 = load double, double* %25, align 8
  %91 = load double, double* %56, align 8
  %92 = fmul double %90, %91
  %93 = load double, double* %21, align 8
  %94 = load double, double* %60, align 8
  %95 = fmul double %93, %94
  %96 = fptrunc double %92 to float
  %97 = fptrunc double %95 to float
  %98 = tail call zeroext i1 @_Z15AlmostEqualUlpsff(float %96, float %97) #10
  %99 = fsub double %92, %95
  %100 = select i1 %98, double 0.000000e+00, double %99
  br i1 %89, label %226, label %101

101:                                              ; preds = %87
  %102 = fcmp oeq double %32, 0.000000e+00
  %103 = fcmp oeq double %78, 0.000000e+00
  %104 = and i1 %102, %103
  br i1 %104, label %226, label %105

105:                                              ; preds = %101
  %106 = fcmp oeq double %43, 0.000000e+00
  %107 = fcmp oeq double %67, 0.000000e+00
  %108 = and i1 %106, %107
  br i1 %108, label %226, label %109

109:                                              ; preds = %105
  %110 = fcmp ogt double %100, 0.000000e+00
  br i1 %110, label %111, label %118

111:                                              ; preds = %109
  %112 = fcmp olt double %32, 0.000000e+00
  %113 = fcmp ogt double %67, 0.000000e+00
  %114 = and i1 %112, %113
  %115 = fcmp olt double %43, 0.000000e+00
  %116 = fcmp ogt double %78, 0.000000e+00
  %117 = and i1 %115, %116
  br label %125

118:                                              ; preds = %109
  %119 = fcmp ogt double %32, 0.000000e+00
  %120 = fcmp olt double %67, 0.000000e+00
  %121 = and i1 %119, %120
  %122 = fcmp ogt double %43, 0.000000e+00
  %123 = fcmp olt double %78, 0.000000e+00
  %124 = and i1 %122, %123
  br label %125

125:                                              ; preds = %118, %111
  %126 = phi i1 [ %114, %111 ], [ %121, %118 ]
  %127 = phi i1 [ %117, %111 ], [ %124, %118 ]
  %128 = or i1 %126, %127
  br i1 %128, label %226, label %129

129:                                              ; preds = %125
  %130 = fcmp oge double %32, 0.000000e+00
  %131 = fcmp oge double %67, 0.000000e+00
  %132 = and i1 %130, %131
  %133 = fcmp oge double %43, 0.000000e+00
  %134 = and i1 %133, %132
  %135 = fcmp oge double %78, 0.000000e+00
  %136 = and i1 %134, %135
  br i1 %136, label %226, label %137

137:                                              ; preds = %129
  %138 = fcmp ole double %32, 0.000000e+00
  %139 = fcmp ole double %67, 0.000000e+00
  %140 = and i1 %138, %139
  %141 = fcmp ole double %43, 0.000000e+00
  %142 = and i1 %141, %140
  %143 = fcmp ole double %78, 0.000000e+00
  %144 = and i1 %142, %143
  br i1 %144, label %226, label %145

145:                                              ; preds = %137
  %146 = getelementptr inbounds %class.SkOpAngle, %class.SkOpAngle* %0, i64 0, i32 6
  %147 = load %class.SkOpSpanBase*, %class.SkOpSpanBase** %146, align 8
  %148 = getelementptr inbounds %class.SkOpSpanBase, %class.SkOpSpanBase* %147, i64 0, i32 1
  %149 = load %class.SkOpSegment*, %class.SkOpSegment** %148, align 8
  %150 = getelementptr inbounds %class.SkOpSpanBase, %class.SkOpSpanBase* %147, i64 0, i32 0, i32 0
  %151 = load double, double* %150, align 8
  %152 = getelementptr inbounds %class.SkOpAngle, %class.SkOpAngle* %0, i64 0, i32 7
  %153 = load %class.SkOpSpanBase*, %class.SkOpSpanBase** %152, align 8
  %154 = getelementptr inbounds %class.SkOpSpanBase, %class.SkOpSpanBase* %153, i64 0, i32 0, i32 0
  %155 = load double, double* %154, align 8
  %156 = fadd double %151, %155
  %157 = fmul double %156, 5.000000e-01
  %158 = getelementptr inbounds %class.SkOpSegment, %class.SkOpSegment* %149, i64 0, i32 10
  %159 = load i32, i32* %158, align 4
  %160 = zext i32 %159 to i64
  %161 = getelementptr inbounds [5 x { double, double } (%struct.SkPoint*, float, double)*], [5 x { double, double } (%struct.SkPoint*, float, double)*]* @_ZL14CurveDPointAtT, i64 0, i64 %160
  %162 = load { double, double } (%struct.SkPoint*, float, double)*, { double, double } (%struct.SkPoint*, float, double)** %161, align 8
  %163 = getelementptr inbounds %class.SkOpSegment, %class.SkOpSegment* %149, i64 0, i32 5
  %164 = load %struct.SkPoint*, %struct.SkPoint** %163, align 8
  %165 = getelementptr inbounds %class.SkOpSegment, %class.SkOpSegment* %149, i64 0, i32 7
  %166 = load float, float* %165, align 8
  %167 = tail call { double, double } %162(%struct.SkPoint* %164, float %166, double %157) #10
  %168 = extractvalue { double, double } %167, 0
  %169 = extractvalue { double, double } %167, 1
  %170 = getelementptr inbounds %class.SkOpAngle, %class.SkOpAngle* %0, i64 0, i32 1, i32 0, i32 0, i32 0, i32 0, i64 0, i32 0
  %171 = bitcast double* %170 to <2 x double>*
  %172 = load <2 x double>, <2 x double>* %171, align 8
  %173 = insertelement <2 x double> undef, double %168, i32 0
  %174 = insertelement <2 x double> %173, double %169, i32 1
  %175 = fsub <2 x double> %174, %172
  %176 = getelementptr inbounds %class.SkOpAngle, %class.SkOpAngle* %1, i64 0, i32 6
  %177 = load %class.SkOpSpanBase*, %class.SkOpSpanBase** %176, align 8
  %178 = getelementptr inbounds %class.SkOpSpanBase, %class.SkOpSpanBase* %177, i64 0, i32 1
  %179 = load %class.SkOpSegment*, %class.SkOpSegment** %178, align 8
  %180 = getelementptr inbounds %class.SkOpSpanBase, %class.SkOpSpanBase* %177, i64 0, i32 0, i32 0
  %181 = load double, double* %180, align 8
  %182 = getelementptr inbounds %class.SkOpAngle, %class.SkOpAngle* %1, i64 0, i32 7
  %183 = load %class.SkOpSpanBase*, %class.SkOpSpanBase** %182, align 8
  %184 = getelementptr inbounds %class.SkOpSpanBase, %class.SkOpSpanBase* %183, i64 0, i32 0, i32 0
  %185 = load double, double* %184, align 8
  %186 = fadd double %181, %185
  %187 = fmul double %186, 5.000000e-01
  %188 = getelementptr inbounds %class.SkOpSegment, %class.SkOpSegment* %179, i64 0, i32 10
  %189 = load i32, i32* %188, align 4
  %190 = zext i32 %189 to i64
  %191 = getelementptr inbounds [5 x { double, double } (%struct.SkPoint*, float, double)*], [5 x { double, double } (%struct.SkPoint*, float, double)*]* @_ZL14CurveDPointAtT, i64 0, i64 %190
  %192 = load { double, double } (%struct.SkPoint*, float, double)*, { double, double } (%struct.SkPoint*, float, double)** %191, align 8
  %193 = getelementptr inbounds %class.SkOpSegment, %class.SkOpSegment* %179, i64 0, i32 5
  %194 = load %struct.SkPoint*, %struct.SkPoint** %193, align 8
  %195 = getelementptr inbounds %class.SkOpSegment, %class.SkOpSegment* %179, i64 0, i32 7
  %196 = load float, float* %195, align 8
  %197 = tail call { double, double } %192(%struct.SkPoint* %194, float %196, double %187) #10
  %198 = extractvalue { double, double } %197, 0
  %199 = extractvalue { double, double } %197, 1
  %200 = getelementptr inbounds %class.SkOpAngle, %class.SkOpAngle* %1, i64 0, i32 1, i32 0, i32 0, i32 0, i32 0, i64 0, i32 0
  %201 = bitcast double* %200 to <2 x double>*
  %202 = load <2 x double>, <2 x double>* %201, align 8
  %203 = shufflevector <2 x double> %202, <2 x double> undef, <2 x i32> <i32 1, i32 0>
  %204 = insertelement <2 x double> undef, double %199, i32 0
  %205 = insertelement <2 x double> %204, double %198, i32 1
  %206 = fsub <2 x double> %205, %203
  %207 = fmul <2 x double> %175, %206
  %208 = extractelement <2 x double> %207, i32 0
  %209 = fptrunc double %208 to float
  %210 = extractelement <2 x double> %207, i32 1
  %211 = fptrunc double %210 to float
  %212 = tail call zeroext i1 @_Z15AlmostEqualUlpsff(float %209, float %211) #10
  %213 = fsub double %208, %210
  %214 = select i1 %212, double 0.000000e+00, double %213
  %215 = fcmp ogt double %32, 0.000000e+00
  %216 = fcmp ogt double %214, 0.000000e+00
  %217 = and i1 %215, %216
  br i1 %217, label %226, label %218

218:                                              ; preds = %145
  %219 = fcmp olt double %32, 0.000000e+00
  %220 = fcmp olt double %214, 0.000000e+00
  %221 = and i1 %219, %220
  br i1 %221, label %226, label %222

222:                                              ; preds = %218
  %223 = tail call zeroext i1 @_ZN9SkOpAngle15tangentsDivergeEPKS_d(%class.SkOpAngle* %0, %class.SkOpAngle* %1, double %32)
  %224 = select i1 %223, i1 %219, i1 %220
  %225 = zext i1 %224 to i32
  br label %226

226:                                              ; preds = %145, %218, %222, %125, %129, %137, %101, %105, %87
  %227 = phi i32 [ -1, %87 ], [ -1, %105 ], [ -1, %101 ], [ -1, %125 ], [ 0, %129 ], [ 1, %137 ], [ 0, %145 ], [ 1, %218 ], [ %225, %222 ]
  ret i32 %227
}

; Function Attrs: nounwind ssp uwtable
define hidden double @_ZNK9SkOpAngle12distEndRatioEd(%class.SkOpAngle* nocapture readonly, double) local_unnamed_addr #5 align 2 {
  %3 = getelementptr inbounds %class.SkOpAngle, %class.SkOpAngle* %0, i64 0, i32 6
  %4 = load %class.SkOpSpanBase*, %class.SkOpSpanBase** %3, align 8
  %5 = getelementptr inbounds %class.SkOpSpanBase, %class.SkOpSpanBase* %4, i64 0, i32 1
  %6 = load %class.SkOpSegment*, %class.SkOpSegment** %5, align 8
  %7 = getelementptr inbounds %class.SkOpSegment, %class.SkOpSegment* %6, i64 0, i32 10
  %8 = load i32, i32* %7, align 4
  %9 = add i32 %8, 1
  %10 = ashr i32 %9, 2
  %11 = sub i32 %8, %10
  %12 = getelementptr inbounds %class.SkOpSegment, %class.SkOpSegment* %6, i64 0, i32 5
  %13 = load %struct.SkPoint*, %struct.SkPoint** %12, align 8
  %14 = icmp sgt i32 %11, 0
  br i1 %14, label %15, label %24

15:                                               ; preds = %2
  %16 = sub i32 %9, %10
  %17 = zext i32 %11 to i64
  %18 = zext i32 %16 to i64
  %19 = add nsw i64 %18, -2
  br label %28

20:                                               ; preds = %58, %53
  %21 = phi double [ %54, %53 ], [ %83, %58 ]
  %22 = add nuw nsw i64 %30, 1
  %23 = icmp eq i64 %34, %17
  br i1 %23, label %24, label %28

24:                                               ; preds = %20, %2
  %25 = phi double [ 0.000000e+00, %2 ], [ %21, %20 ]
  %26 = tail call double @sqrt(double %25) #10
  %27 = fdiv double %26, %1
  ret double %27

28:                                               ; preds = %15, %20
  %29 = phi i64 [ 0, %15 ], [ %34, %20 ]
  %30 = phi i64 [ 1, %15 ], [ %22, %20 ]
  %31 = phi double [ 0.000000e+00, %15 ], [ %21, %20 ]
  %32 = xor i64 %29, 1
  %33 = add nuw i64 %32, %18
  %34 = add nuw nsw i64 %29, 1
  %35 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %13, i64 %29, i32 0
  %36 = bitcast float* %35 to <2 x float>*
  %37 = load <2 x float>, <2 x float>* %36, align 4
  %38 = and i64 %33, 1
  %39 = icmp eq i64 %38, 0
  br i1 %39, label %53, label %40

40:                                               ; preds = %28
  %41 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %13, i64 %30, i32 0
  %42 = bitcast float* %41 to <2 x float>*
  %43 = load <2 x float>, <2 x float>* %42, align 4
  %44 = fsub <2 x float> %43, %37
  %45 = fpext <2 x float> %44 to <2 x double>
  %46 = fmul <2 x double> %45, %45
  %47 = extractelement <2 x double> %46, i32 0
  %48 = extractelement <2 x double> %46, i32 1
  %49 = fadd double %47, %48
  %50 = fcmp olt double %31, %49
  %51 = select i1 %50, double %49, double %31
  %52 = add nuw nsw i64 %30, 1
  br label %53

53:                                               ; preds = %40, %28
  %54 = phi double [ %51, %40 ], [ undef, %28 ]
  %55 = phi i64 [ %52, %40 ], [ %30, %28 ]
  %56 = phi double [ %51, %40 ], [ %31, %28 ]
  %57 = icmp eq i64 %19, %29
  br i1 %57, label %20, label %58

58:                                               ; preds = %53, %58
  %59 = phi i64 [ %84, %58 ], [ %55, %53 ]
  %60 = phi double [ %83, %58 ], [ %56, %53 ]
  %61 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %13, i64 %59, i32 0
  %62 = bitcast float* %61 to <2 x float>*
  %63 = load <2 x float>, <2 x float>* %62, align 4
  %64 = fsub <2 x float> %63, %37
  %65 = fpext <2 x float> %64 to <2 x double>
  %66 = fmul <2 x double> %65, %65
  %67 = extractelement <2 x double> %66, i32 0
  %68 = extractelement <2 x double> %66, i32 1
  %69 = fadd double %67, %68
  %70 = fcmp olt double %60, %69
  %71 = select i1 %70, double %69, double %60
  %72 = add nuw nsw i64 %59, 1
  %73 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %13, i64 %72, i32 0
  %74 = bitcast float* %73 to <2 x float>*
  %75 = load <2 x float>, <2 x float>* %74, align 4
  %76 = fsub <2 x float> %75, %37
  %77 = fpext <2 x float> %76 to <2 x double>
  %78 = fmul <2 x double> %77, %77
  %79 = extractelement <2 x double> %78, i32 0
  %80 = extractelement <2 x double> %78, i32 1
  %81 = fadd double %79, %80
  %82 = fcmp olt double %71, %81
  %83 = select i1 %82, double %81, double %71
  %84 = add nuw nsw i64 %59, 2
  %85 = icmp eq i64 %84, %18
  br i1 %85, label %20, label %58
}

; Function Attrs: nofree nounwind
declare double @sqrt(double) local_unnamed_addr #6

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN9SkOpAngle13endsIntersectEPS_(%class.SkOpAngle* nocapture, %class.SkOpAngle* nocapture) local_unnamed_addr #0 align 2 {
  %3 = alloca [2 x %struct.SkDLine], align 16
  %4 = alloca [2 x double], align 16
  %5 = alloca i16, align 2
  %6 = bitcast i16* %5 to [2 x i8]*
  %7 = alloca %class.SkIntersections, align 8
  %8 = alloca i64, align 8
  %9 = alloca double, align 8
  %10 = alloca <2 x double>, align 16
  %11 = bitcast <2 x double>* %10 to %struct.SkDVector*
  %12 = getelementptr inbounds %class.SkOpAngle, %class.SkOpAngle* %0, i64 0, i32 6
  %13 = load %class.SkOpSpanBase*, %class.SkOpSpanBase** %12, align 8
  %14 = getelementptr inbounds %class.SkOpSpanBase, %class.SkOpSpanBase* %13, i64 0, i32 1
  %15 = load %class.SkOpSegment*, %class.SkOpSegment** %14, align 8
  %16 = getelementptr inbounds %class.SkOpSegment, %class.SkOpSegment* %15, i64 0, i32 10
  %17 = load i32, i32* %16, align 4
  %18 = getelementptr inbounds %class.SkOpAngle, %class.SkOpAngle* %1, i64 0, i32 6
  %19 = load %class.SkOpSpanBase*, %class.SkOpSpanBase** %18, align 8
  %20 = getelementptr inbounds %class.SkOpSpanBase, %class.SkOpSpanBase* %19, i64 0, i32 1
  %21 = load %class.SkOpSegment*, %class.SkOpSegment** %20, align 8
  %22 = getelementptr inbounds %class.SkOpSegment, %class.SkOpSegment* %21, i64 0, i32 10
  %23 = load i32, i32* %22, align 4
  %24 = add nsw i32 %17, 1
  %25 = ashr i32 %24, 2
  %26 = sub nsw i32 %17, %25
  %27 = add nsw i32 %23, 1
  %28 = ashr i32 %27, 2
  %29 = sub nsw i32 %23, %28
  %30 = bitcast [2 x %struct.SkDLine]* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 64, i8* nonnull %30) #10
  %31 = getelementptr inbounds %class.SkOpAngle, %class.SkOpAngle* %0, i64 0, i32 1
  %32 = getelementptr inbounds %class.SkDCurveSweep, %class.SkDCurveSweep* %31, i64 0, i32 0
  %33 = bitcast %class.SkDCurveSweep* %31 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 16 %30, i8* align 8 %33, i64 16, i1 false)
  %34 = getelementptr inbounds [2 x %struct.SkDLine], [2 x %struct.SkDLine]* %3, i64 0, i64 0, i32 0, i64 1
  %35 = getelementptr inbounds %class.SkOpAngle, %class.SkOpAngle* %1, i64 0, i32 1, i32 0
  %36 = sext i32 %29 to i64
  %37 = getelementptr inbounds %class.SkOpAngle, %class.SkOpAngle* %1, i64 0, i32 1, i32 0, i32 0, i32 0, i32 0, i64 %36
  %38 = bitcast %struct.SkDPoint* %34 to i8*
  %39 = bitcast %struct.SkDPoint* %37 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 16 %38, i8* align 8 %39, i64 16, i1 false)
  %40 = getelementptr inbounds [2 x %struct.SkDLine], [2 x %struct.SkDLine]* %3, i64 0, i64 1, i32 0, i64 0
  %41 = bitcast %struct.SkDPoint* %40 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 16 %41, i8* align 8 %33, i64 16, i1 false)
  %42 = getelementptr inbounds [2 x %struct.SkDLine], [2 x %struct.SkDLine]* %3, i64 0, i64 1, i32 0, i64 1
  %43 = sext i32 %26 to i64
  %44 = getelementptr inbounds %class.SkOpAngle, %class.SkOpAngle* %0, i64 0, i32 1, i32 0, i32 0, i32 0, i32 0, i64 %43
  %45 = bitcast %struct.SkDPoint* %42 to i8*
  %46 = bitcast %struct.SkDPoint* %44 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 16 %45, i8* align 8 %46, i64 16, i1 false)
  %47 = getelementptr inbounds %class.SkOpAngle, %class.SkOpAngle* %0, i64 0, i32 7
  %48 = load %class.SkOpSpanBase*, %class.SkOpSpanBase** %47, align 8
  %49 = getelementptr inbounds %class.SkOpAngle, %class.SkOpAngle* %1, i64 0, i32 7
  %50 = load %class.SkOpSpanBase*, %class.SkOpSpanBase** %49, align 8
  %51 = tail call zeroext i1 @_ZNK12SkOpSpanBase8containsEPKS_(%class.SkOpSpanBase* %48, %class.SkOpSpanBase* %50) #10
  br i1 %51, label %52, label %54

52:                                               ; preds = %2
  %53 = tail call zeroext i1 @_ZN9SkOpAngle13checkParallelEPS_(%class.SkOpAngle* %0, %class.SkOpAngle* %1)
  br label %415

54:                                               ; preds = %2
  %55 = bitcast [2 x double]* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %55) #10
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 16 %55, i8* align 16 bitcast ([2 x double]* @__const._ZN9SkOpAngle13endsIntersectEPS_.smallTs to i8*), i64 16, i1 false)
  %56 = bitcast i16* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 2, i8* nonnull %56) #10
  store i16 0, i16* %5, align 2
  %57 = bitcast %class.SkIntersections* %7 to i8*
  %58 = getelementptr inbounds %class.SkIntersections, %class.SkIntersections* %7, i64 0, i32 8
  %59 = getelementptr inbounds %class.SkIntersections, %class.SkIntersections* %7, i64 0, i32 4, i64 0
  %60 = bitcast i8* %59 to i16*
  %61 = getelementptr inbounds %class.SkIntersections, %class.SkIntersections* %7, i64 0, i32 7
  %62 = getelementptr inbounds %class.SkIntersections, %class.SkIntersections* %7, i64 0, i32 5
  %63 = getelementptr inbounds %class.SkIntersections, %class.SkIntersections* %7, i64 0, i32 3, i64 0
  %64 = bitcast i16* %63 to i32*
  %65 = getelementptr inbounds %class.SkIntersections, %class.SkIntersections* %7, i64 0, i32 6
  %66 = bitcast i64* %8 to i8*
  %67 = bitcast i64* %8 to double*
  %68 = bitcast double* %9 to i8*
  br label %84

69:                                               ; preds = %163
  %70 = load i8, i8* %56, align 2
  %71 = icmp eq i8 %70, 0
  %72 = getelementptr inbounds [2 x i8], [2 x i8]* %6, i64 0, i64 1
  %73 = load i8, i8* %72, align 1
  %74 = icmp eq i8 %73, 0
  %75 = getelementptr inbounds %class.SkOpAngle, %class.SkOpAngle* %0, i64 0, i32 1, i32 2
  %76 = getelementptr inbounds %class.SkOpAngle, %class.SkOpAngle* %1, i64 0, i32 1, i32 2
  %77 = getelementptr inbounds %class.SkOpAngle, %class.SkOpAngle* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i64 0, i32 0
  %78 = getelementptr inbounds %class.SkDCurveSweep, %class.SkDCurveSweep* %31, i64 0, i32 0, i32 0, i32 0, i32 0, i64 0, i32 0
  %79 = getelementptr inbounds %class.SkOpAngle, %class.SkOpAngle* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i64 0, i32 1
  %80 = getelementptr inbounds %class.SkOpAngle, %class.SkOpAngle* %0, i64 0, i32 1, i32 0, i32 0, i32 0, i32 0, i64 0, i32 1
  %81 = getelementptr inbounds %class.SkOpAngle, %class.SkOpAngle* %1, i64 0, i32 0, i32 0, i32 0, i32 0, i64 0
  %82 = bitcast <2 x double>* %10 to i8*
  %83 = bitcast %class.SkOpAngle* %1 to <2 x double>*
  br label %166

84:                                               ; preds = %163, %54
  %85 = phi i64 [ 0, %54 ], [ %164, %163 ]
  %86 = icmp ne i64 %85, 0
  %87 = select i1 %86, i32 %23, i32 %17
  %88 = icmp eq i32 %87, 1
  br i1 %88, label %163, label %89

89:                                               ; preds = %84
  %90 = select i1 %86, %class.SkOpSpanBase** %18, %class.SkOpSpanBase** %12
  %91 = load %class.SkOpSpanBase*, %class.SkOpSpanBase** %90, align 8
  %92 = getelementptr inbounds %class.SkOpSpanBase, %class.SkOpSpanBase* %91, i64 0, i32 1
  %93 = load %class.SkOpSegment*, %class.SkOpSegment** %92, align 8
  call void @llvm.lifetime.start.p0i8(i64 464, i8* nonnull %57) #10
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %57, i8* align 8 bitcast (%class.SkIntersections* @__const._ZNK9SkOpAngle9midToSideEPKS_Pb.oppMid to i8*), i64 464, i1 false)
  store i8 0, i8* %58, align 1
  store i16 0, i16* %60, align 4
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %57, i8 0, i64 448, i1 false) #10
  store i8 1, i8* %61, align 8
  store i8 0, i8* %62, align 2
  store i32 0, i32* %64, align 8
  store i8 0, i8* %65, align 1
  %94 = zext i32 %87 to i64
  %95 = getelementptr inbounds [5 x void (%struct.SkPoint*, float, %struct.SkDLine*, %class.SkIntersections*)*], [5 x void (%struct.SkPoint*, float, %struct.SkDLine*, %class.SkIntersections*)*]* @_ZL17CurveIntersectRay, i64 0, i64 %94
  %96 = load void (%struct.SkPoint*, float, %struct.SkDLine*, %class.SkIntersections*)*, void (%struct.SkPoint*, float, %struct.SkDLine*, %class.SkIntersections*)** %95, align 8
  %97 = getelementptr inbounds %class.SkOpSegment, %class.SkOpSegment* %93, i64 0, i32 5
  %98 = load %struct.SkPoint*, %struct.SkPoint** %97, align 8
  %99 = getelementptr inbounds %class.SkOpSegment, %class.SkOpSegment* %93, i64 0, i32 7
  %100 = load float, float* %99, align 8
  %101 = getelementptr inbounds [2 x %struct.SkDLine], [2 x %struct.SkDLine]* %3, i64 0, i64 %85
  call void %96(%struct.SkPoint* %98, float %100, %struct.SkDLine* dereferenceable(32) %101, %class.SkIntersections* nonnull %7) #10
  %102 = select i1 %86, %class.SkOpAngle* %1, %class.SkOpAngle* %0
  %103 = select i1 %86, %class.SkOpSpanBase** %18, %class.SkOpSpanBase** %12
  %104 = getelementptr inbounds %class.SkOpAngle, %class.SkOpAngle* %102, i64 0, i32 8
  %105 = load %class.SkOpSpanBase*, %class.SkOpSpanBase** %104, align 8
  %106 = getelementptr inbounds %class.SkOpSpanBase, %class.SkOpSpanBase* %105, i64 0, i32 0, i32 0
  %107 = load double, double* %106, align 8
  %108 = load %class.SkOpSpanBase*, %class.SkOpSpanBase** %103, align 8
  %109 = getelementptr inbounds %class.SkOpSpanBase, %class.SkOpSpanBase* %108, i64 0, i32 0, i32 0
  %110 = load double, double* %109, align 8
  %111 = fcmp olt double %110, %107
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %66)
  %112 = xor i1 %111, true
  %113 = uitofp i1 %112 to double
  store double %113, double* %67, align 8
  %114 = load i8, i8* %62, align 2
  %115 = icmp eq i8 %114, 0
  br i1 %115, label %122, label %116

116:                                              ; preds = %89
  %117 = fcmp ugt double %110, %107
  %118 = getelementptr inbounds [2 x double], [2 x double]* %4, i64 0, i64 %85
  %119 = bitcast double* %118 to i64*
  %120 = getelementptr inbounds [2 x i8], [2 x i8]* %6, i64 0, i64 %85
  %121 = zext i8 %114 to i64
  br label %123

122:                                              ; preds = %159, %89
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %66)
  call void @llvm.lifetime.end.p0i8(i64 464, i8* nonnull %57) #10
  br label %163

123:                                              ; preds = %116, %159
  %124 = phi double [ %113, %116 ], [ %160, %159 ]
  %125 = phi i64 [ 0, %116 ], [ %161, %159 ]
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %68)
  %126 = getelementptr inbounds %class.SkIntersections, %class.SkIntersections* %7, i64 0, i32 2, i64 0, i64 %125
  %127 = load double, double* %126, align 8
  store double %127, double* %9, align 8
  br i1 %117, label %134, label %128

128:                                              ; preds = %123
  %129 = fsub double %110, %127
  %130 = fcmp olt double %129, 0x3EC0000000000000
  %131 = fsub double %127, %107
  %132 = fcmp olt double %131, 0x3EC0000000000000
  %133 = and i1 %130, %132
  br i1 %133, label %142, label %159

134:                                              ; preds = %123
  %135 = fsub double %127, %110
  %136 = fcmp olt double %135, 0x3EC0000000000000
  %137 = fsub double %107, %127
  %138 = fcmp olt double %137, 0x3EC0000000000000
  %139 = and i1 %136, %138
  br i1 %139, label %140, label %159

140:                                              ; preds = %134
  %141 = fsub double %110, %127
  br label %142

142:                                              ; preds = %140, %128
  %143 = phi double [ %141, %140 ], [ %129, %128 ]
  %144 = call double @llvm.fabs.f64(double %143) #10
  %145 = fcmp olt double %144, 0x3EC0000000000000
  br i1 %145, label %159, label %146

146:                                              ; preds = %142
  %147 = fcmp olt double %124, %127
  %148 = select i1 %147, double* %9, double* %67
  %149 = fcmp olt double %127, %124
  %150 = select i1 %149, double* %9, double* %67
  %151 = select i1 %111, double* %148, double* %150
  %152 = bitcast double* %151 to i64*
  %153 = load i64, i64* %152, align 8
  store i64 %153, i64* %8, align 8
  store i64 %153, i64* %119, align 8
  %154 = bitcast i64 %153 to double
  %155 = fsub double %154, %107
  %156 = call double @llvm.fabs.f64(double %155) #10
  %157 = fcmp olt double %156, 0x3EC0000000000000
  %158 = zext i1 %157 to i8
  store i8 %158, i8* %120, align 1
  br label %159

159:                                              ; preds = %134, %128, %142, %146
  %160 = phi double [ %124, %134 ], [ %124, %128 ], [ %124, %142 ], [ %154, %146 ]
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %68)
  %161 = add nuw nsw i64 %125, 1
  %162 = icmp ult i64 %161, %121
  br i1 %162, label %123, label %122

163:                                              ; preds = %84, %122
  %164 = add nuw nsw i64 %85, 1
  %165 = icmp eq i64 %164, 2
  br i1 %165, label %69, label %84

166:                                              ; preds = %341, %69
  %167 = phi i64 [ 0, %69 ], [ %348, %341 ]
  %168 = phi i8 [ 0, %69 ], [ %347, %341 ]
  %169 = phi i32 [ -1, %69 ], [ %346, %341 ]
  %170 = phi double [ -1.000000e+00, %69 ], [ %345, %341 ]
  %171 = phi i8 [ 0, %69 ], [ %344, %341 ]
  %172 = phi double [ 0.000000e+00, %69 ], [ %343, %341 ]
  %173 = phi double [ 0.000000e+00, %69 ], [ %342, %341 ]
  %174 = getelementptr inbounds [2 x double], [2 x double]* %4, i64 0, i64 %167
  %175 = load double, double* %174, align 8
  %176 = fcmp olt double %175, 0.000000e+00
  br i1 %176, label %341, label %177

177:                                              ; preds = %166
  %178 = icmp ne i64 %167, 0
  %179 = select i1 %178, %class.SkOpSpanBase** %18, %class.SkOpSpanBase** %12
  %180 = load %class.SkOpSpanBase*, %class.SkOpSpanBase** %179, align 8
  %181 = getelementptr inbounds %class.SkOpSpanBase, %class.SkOpSpanBase* %180, i64 0, i32 1
  %182 = load %class.SkOpSegment*, %class.SkOpSegment** %181, align 8
  %183 = getelementptr inbounds %class.SkOpSegment, %class.SkOpSegment* %182, i64 0, i32 10
  %184 = load i32, i32* %183, align 4
  %185 = zext i32 %184 to i64
  %186 = getelementptr inbounds [5 x { double, double } (%struct.SkPoint*, float, double)*], [5 x { double, double } (%struct.SkPoint*, float, double)*]* @_ZL14CurveDPointAtT, i64 0, i64 %185
  %187 = load { double, double } (%struct.SkPoint*, float, double)*, { double, double } (%struct.SkPoint*, float, double)** %186, align 8
  %188 = getelementptr inbounds %class.SkOpSegment, %class.SkOpSegment* %182, i64 0, i32 5
  %189 = load %struct.SkPoint*, %struct.SkPoint** %188, align 8
  %190 = getelementptr inbounds %class.SkOpSegment, %class.SkOpSegment* %182, i64 0, i32 7
  %191 = load float, float* %190, align 8
  %192 = call { double, double } %187(%struct.SkPoint* %189, float %191, double %175) #10
  %193 = extractvalue { double, double } %192, 0
  %194 = extractvalue { double, double } %192, 1
  %195 = getelementptr inbounds [2 x %struct.SkDLine], [2 x %struct.SkDLine]* %3, i64 0, i64 %167, i32 0, i64 0, i32 0
  %196 = bitcast double* %195 to <2 x double>*
  %197 = load <2 x double>, <2 x double>* %196, align 16
  %198 = insertelement <2 x double> undef, double %193, i32 0
  %199 = insertelement <2 x double> %198, double %194, i32 1
  %200 = fsub <2 x double> %199, %197
  %201 = select i1 %178, i32 %26, i32 %29
  %202 = icmp eq i32 %201, 1
  %203 = getelementptr inbounds [2 x %struct.SkDLine], [2 x %struct.SkDLine]* %3, i64 0, i64 %167, i32 0, i64 1, i32 0
  %204 = load double, double* %203, align 16
  %205 = getelementptr inbounds [2 x %struct.SkDLine], [2 x %struct.SkDLine]* %3, i64 0, i64 %167, i32 0, i64 1, i32 1
  %206 = load double, double* %205, align 8
  %207 = insertelement <2 x double> undef, double %204, i32 0
  %208 = insertelement <2 x double> %207, double %206, i32 1
  %209 = fsub <2 x double> %208, %197
  br i1 %202, label %210, label %220

210:                                              ; preds = %177
  %211 = shufflevector <2 x double> %200, <2 x double> %209, <2 x i32> <i32 0, i32 2>
  %212 = fmul <2 x double> %211, %211
  %213 = shufflevector <2 x double> %200, <2 x double> %209, <2 x i32> <i32 1, i32 3>
  %214 = fmul <2 x double> %213, %213
  %215 = fadd <2 x double> %212, %214
  %216 = extractelement <2 x double> %215, i32 0
  %217 = fmul double %216, 2.000000e+00
  %218 = extractelement <2 x double> %215, i32 1
  %219 = fcmp uge double %217, %218
  br i1 %219, label %220, label %341

220:                                              ; preds = %177, %210
  %221 = phi <2 x double> [ %209, %210 ], [ %209, %177 ]
  %222 = fmul <2 x double> %200, %221
  %223 = fcmp olt <2 x double> %222, zeroinitializer
  %224 = extractelement <2 x i1> %223, i32 0
  %225 = extractelement <2 x i1> %223, i32 1
  %226 = or i1 %224, %225
  br i1 %226, label %341, label %227

227:                                              ; preds = %220
  %228 = fmul <2 x double> %200, %200
  %229 = extractelement <2 x double> %228, i32 0
  %230 = extractelement <2 x double> %228, i32 1
  %231 = fadd double %229, %230
  %232 = call double @sqrt(double %231) #10
  %233 = fmul <2 x double> %221, %221
  %234 = extractelement <2 x double> %233, i32 0
  %235 = extractelement <2 x double> %233, i32 1
  %236 = fadd double %234, %235
  %237 = call double @sqrt(double %236) #10
  %238 = fcmp ogt double %232, %237
  %239 = zext i1 %238 to i8
  %240 = xor i1 %238, true
  %241 = or i1 %74, %240
  %242 = or i1 %71, %241
  br i1 %242, label %243, label %353

243:                                              ; preds = %227
  %244 = fsub double %232, %237
  %245 = call double @llvm.fabs.f64(double %244)
  %246 = select i1 %178, %struct.SkDCurve* %35, %struct.SkDCurve* %32
  %247 = select i1 %178, i32 %29, i32 %26
  %248 = icmp slt i32 %247, 0
  br i1 %248, label %252, label %249

249:                                              ; preds = %243
  %250 = add nuw i32 %247, 1
  %251 = zext i32 %250 to i64
  br label %268

252:                                              ; preds = %268, %243
  %253 = phi double [ 0x7FF0000000000000, %243 ], [ %283, %268 ]
  %254 = phi double [ 0xFFF0000000000000, %243 ], [ %293, %268 ]
  %255 = phi double [ 0x7FF0000000000000, %243 ], [ %279, %268 ]
  %256 = phi double [ 0xFFF0000000000000, %243 ], [ %292, %268 ]
  %257 = fsub double %256, %255
  %258 = fsub double %254, %253
  %259 = fcmp olt double %257, %258
  %260 = select i1 %259, double %258, double %257
  %261 = fdiv double %245, %260
  %262 = fcmp olt double %261, 4.000000e-03
  %263 = fcmp ogt double %261, 1.000000e-03
  %264 = and i1 %262, %263
  %265 = and i8 %168, 1
  %266 = icmp eq i8 %265, 0
  %267 = and i1 %266, %264
  br i1 %267, label %294, label %330

268:                                              ; preds = %268, %249
  %269 = phi i64 [ %289, %268 ], [ -4503599627370496, %249 ]
  %270 = phi double [ %293, %268 ], [ 0xFFF0000000000000, %249 ]
  %271 = phi i64 [ %286, %268 ], [ -4503599627370496, %249 ]
  %272 = phi double [ %292, %268 ], [ 0xFFF0000000000000, %249 ]
  %273 = phi i64 [ %290, %268 ], [ 0, %249 ]
  %274 = phi double [ %283, %268 ], [ 0x7FF0000000000000, %249 ]
  %275 = phi double [ %279, %268 ], [ 0x7FF0000000000000, %249 ]
  %276 = getelementptr inbounds %struct.SkDCurve, %struct.SkDCurve* %246, i64 0, i32 0, i32 0, i32 0, i64 %273, i32 0
  %277 = load double, double* %276, align 8
  %278 = fcmp olt double %277, %275
  %279 = select i1 %278, double %277, double %275
  %280 = getelementptr inbounds %struct.SkDCurve, %struct.SkDCurve* %246, i64 0, i32 0, i32 0, i32 0, i64 %273, i32 1
  %281 = load double, double* %280, align 8
  %282 = fcmp olt double %281, %274
  %283 = select i1 %282, double %281, double %274
  %284 = fcmp olt double %272, %277
  %285 = bitcast double %277 to i64
  %286 = select i1 %284, i64 %285, i64 %271
  %287 = fcmp olt double %270, %281
  %288 = bitcast double %281 to i64
  %289 = select i1 %287, i64 %288, i64 %269
  %290 = add nuw nsw i64 %273, 1
  %291 = icmp eq i64 %290, %251
  %292 = bitcast i64 %286 to double
  %293 = bitcast i64 %289 to double
  br i1 %291, label %252, label %268

294:                                              ; preds = %252
  %295 = load i8, i8* %75, align 8, !range !2
  %296 = icmp eq i8 %295, 0
  br i1 %296, label %330, label %297

297:                                              ; preds = %294
  %298 = load i8, i8* %76, align 8, !range !2
  %299 = icmp eq i8 %298, 0
  br i1 %299, label %330, label %300

300:                                              ; preds = %297
  %301 = load double, double* %77, align 8
  %302 = load double, double* %78, align 8
  %303 = fcmp une double %301, %302
  br i1 %303, label %308, label %304

304:                                              ; preds = %300
  %305 = load double, double* %79, align 8
  %306 = load double, double* %80, align 8
  %307 = fcmp une double %305, %306
  br i1 %307, label %308, label %330

308:                                              ; preds = %300, %304
  %309 = load %class.SkOpSpanBase*, %class.SkOpSpanBase** %18, align 8
  %310 = getelementptr inbounds %class.SkOpSpanBase, %class.SkOpSpanBase* %309, i64 0, i32 1
  %311 = load %class.SkOpSegment*, %class.SkOpSegment** %310, align 8
  %312 = getelementptr inbounds %class.SkOpSegment, %class.SkOpSegment* %311, i64 0, i32 10
  %313 = load i32, i32* %312, align 4
  %314 = add nsw i32 %313, 1
  %315 = ashr i32 %314, 2
  %316 = sub nsw i32 %313, %315
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %82) #10
  %317 = sext i32 %316 to i64
  %318 = getelementptr inbounds %class.SkOpAngle, %class.SkOpAngle* %1, i64 0, i32 0, i32 0, i32 0, i32 0, i64 %317, i32 0
  %319 = bitcast double* %318 to <2 x double>*
  %320 = load <2 x double>, <2 x double>* %319, align 8
  %321 = load <2 x double>, <2 x double>* %83, align 8
  %322 = fsub <2 x double> %320, %321
  store <2 x double> %322, <2 x double>* %10, align 16
  %323 = call i32 @_ZNK9SkOpAngle13lineOnOneSideERK8SkDPointRK9SkDVectorPKS_b(%class.SkOpAngle* undef, %struct.SkDPoint* dereferenceable(16) %81, %struct.SkDVector* nonnull dereferenceable(16) %11, %class.SkOpAngle* %0, i1 zeroext true)
  %324 = icmp sgt i32 %323, -1
  br i1 %324, label %325, label %328

325:                                              ; preds = %308
  %326 = call i32 @_ZNK9SkOpAngle13lineOnOneSideERK8SkDPointRK9SkDVectorPKS_b(%class.SkOpAngle* undef, %struct.SkDPoint* dereferenceable(16) %81, %struct.SkDVector* nonnull dereferenceable(16) %11, %class.SkOpAngle* %0, i1 zeroext false)
  %327 = icmp eq i32 %323, %326
  br i1 %327, label %328, label %329

328:                                              ; preds = %308, %325
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %82) #10
  br label %330

329:                                              ; preds = %325
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %82) #10
  br label %341

330:                                              ; preds = %297, %294, %328, %304, %252
  br i1 %263, label %331, label %341

331:                                              ; preds = %330
  %332 = xor i8 %265, 1
  %333 = extractelement <2 x double> %200, i32 1
  %334 = select i1 %266, double %333, double %173
  %335 = extractelement <2 x double> %200, i32 0
  %336 = select i1 %266, double %335, double %172
  %337 = select i1 %266, i8 %239, i8 %171
  %338 = select i1 %266, double %175, double %170
  %339 = trunc i64 %167 to i32
  %340 = select i1 %266, i32 %339, i32 %169
  br label %341

341:                                              ; preds = %210, %331, %329, %330, %220, %166
  %342 = phi double [ %173, %166 ], [ %173, %220 ], [ %173, %210 ], [ %173, %330 ], [ %173, %329 ], [ %334, %331 ]
  %343 = phi double [ %172, %166 ], [ %172, %220 ], [ %172, %210 ], [ %172, %330 ], [ %172, %329 ], [ %336, %331 ]
  %344 = phi i8 [ %171, %166 ], [ %171, %220 ], [ %171, %210 ], [ %171, %330 ], [ %171, %329 ], [ %337, %331 ]
  %345 = phi double [ %170, %166 ], [ %170, %220 ], [ %170, %210 ], [ %170, %330 ], [ %170, %329 ], [ %338, %331 ]
  %346 = phi i32 [ %169, %166 ], [ %169, %220 ], [ %169, %210 ], [ %169, %330 ], [ %169, %329 ], [ %340, %331 ]
  %347 = phi i8 [ %168, %166 ], [ %168, %220 ], [ %168, %210 ], [ %168, %330 ], [ %168, %329 ], [ %332, %331 ]
  %348 = add nuw nsw i64 %167, 1
  %349 = icmp eq i64 %348, 2
  br i1 %349, label %350, label %166

350:                                              ; preds = %341
  %351 = and i8 %347, 1
  %352 = icmp eq i8 %351, 0
  br i1 %352, label %411, label %357

353:                                              ; preds = %227
  %354 = trunc i64 %167 to i32
  %355 = extractelement <2 x double> %200, i32 0
  %356 = extractelement <2 x double> %200, i32 1
  br label %357

357:                                              ; preds = %353, %350
  %358 = phi i32 [ %346, %350 ], [ %354, %353 ]
  %359 = phi double [ %345, %350 ], [ %175, %353 ]
  %360 = phi i8 [ %344, %350 ], [ %239, %353 ]
  %361 = phi double [ %343, %350 ], [ %355, %353 ]
  %362 = phi double [ %342, %350 ], [ %356, %353 ]
  %363 = icmp ne i32 %358, 0
  %364 = select i1 %363, %struct.SkDCurve* %35, %struct.SkDCurve* %32
  %365 = select i1 %363, %class.SkOpSpanBase** %18, %class.SkOpSpanBase** %12
  %366 = load %class.SkOpSpanBase*, %class.SkOpSpanBase** %365, align 8
  %367 = getelementptr inbounds %class.SkOpSpanBase, %class.SkOpSpanBase* %366, i64 0, i32 0, i32 0
  %368 = getelementptr inbounds %class.SkOpSpanBase, %class.SkOpSpanBase* %366, i64 0, i32 1
  %369 = load double, double* %367, align 8
  %370 = load %class.SkOpSegment*, %class.SkOpSegment** %368, align 8
  %371 = fsub double %359, %369
  %372 = fmul double %371, 5.000000e-01
  %373 = fadd double %369, %372
  %374 = getelementptr inbounds %class.SkOpSegment, %class.SkOpSegment* %370, i64 0, i32 10
  %375 = load i32, i32* %374, align 4
  %376 = zext i32 %375 to i64
  %377 = getelementptr inbounds [5 x { double, double } (%struct.SkPoint*, float, double)*], [5 x { double, double } (%struct.SkPoint*, float, double)*]* @_ZL14CurveDPointAtT, i64 0, i64 %376
  %378 = load { double, double } (%struct.SkPoint*, float, double)*, { double, double } (%struct.SkPoint*, float, double)** %377, align 8
  %379 = getelementptr inbounds %class.SkOpSegment, %class.SkOpSegment* %370, i64 0, i32 5
  %380 = load %struct.SkPoint*, %struct.SkPoint** %379, align 8
  %381 = getelementptr inbounds %class.SkOpSegment, %class.SkOpSegment* %370, i64 0, i32 7
  %382 = load float, float* %381, align 8
  %383 = call { double, double } %378(%struct.SkPoint* %380, float %382, double %373) #10
  %384 = extractvalue { double, double } %383, 0
  %385 = extractvalue { double, double } %383, 1
  %386 = getelementptr inbounds %struct.SkDCurve, %struct.SkDCurve* %364, i64 0, i32 0, i32 0, i32 0, i64 0, i32 0
  %387 = load double, double* %386, align 8
  %388 = fsub double %384, %387
  %389 = getelementptr inbounds %struct.SkDCurve, %struct.SkDCurve* %364, i64 0, i32 0, i32 0, i32 0, i64 0, i32 1
  %390 = load double, double* %389, align 8
  %391 = fsub double %385, %390
  %392 = fmul double %362, %388
  %393 = fmul double %361, %391
  %394 = fptrunc double %392 to float
  %395 = fptrunc double %393 to float
  %396 = call zeroext i1 @_Z15AlmostEqualUlpsff(float %394, float %395) #10
  %397 = fsub double %392, %393
  %398 = select i1 %396, double 0.000000e+00, double %397
  %399 = fcmp une double %398, 0.000000e+00
  br i1 %399, label %402, label %400

400:                                              ; preds = %357
  %401 = call zeroext i1 @_ZN9SkOpAngle13checkParallelEPS_(%class.SkOpAngle* %0, %class.SkOpAngle* %1)
  br label %413

402:                                              ; preds = %357
  %403 = and i8 %360, 1
  %404 = zext i8 %403 to i32
  %405 = icmp eq i32 %358, 0
  %406 = zext i1 %405 to i32
  %407 = xor i32 %404, %406
  %408 = fcmp olt double %398, 0.000000e+00
  %409 = zext i1 %408 to i32
  %410 = icmp ne i32 %407, %409
  br label %413

411:                                              ; preds = %350
  %412 = call zeroext i1 @_ZN9SkOpAngle13checkParallelEPS_(%class.SkOpAngle* %0, %class.SkOpAngle* %1)
  br label %413

413:                                              ; preds = %400, %402, %411
  %414 = phi i1 [ %412, %411 ], [ %410, %402 ], [ %401, %400 ]
  call void @llvm.lifetime.end.p0i8(i64 2, i8* nonnull %56) #10
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %55) #10
  br label %415

415:                                              ; preds = %413, %52
  %416 = phi i1 [ %53, %52 ], [ %414, %413 ]
  call void @llvm.lifetime.end.p0i8(i64 64, i8* nonnull %30) #10
  ret i1 %416
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

; Function Attrs: nounwind readnone speculatable
declare double @llvm.fabs.f64(double) #7

declare i32 @_ZNK15SkIntersections9closestToEddRK8SkDPointPd(%class.SkIntersections*, double, double, %struct.SkDPoint* dereferenceable(16), double*) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden i32 @_ZNK9SkOpAngle10findSectorEN6SkPath4VerbEdd(%class.SkOpAngle* nocapture readnone, i32, double, double) local_unnamed_addr #0 align 2 {
  %5 = tail call double @llvm.fabs.f64(double %2)
  %6 = tail call double @llvm.fabs.f64(double %3)
  %7 = icmp eq i32 %1, 1
  br i1 %7, label %12, label %8

8:                                                ; preds = %4
  %9 = fptrunc double %5 to float
  %10 = fptrunc double %6 to float
  %11 = tail call zeroext i1 @_Z15AlmostEqualUlpsff(float %9, float %10) #10
  br i1 %11, label %14, label %12

12:                                               ; preds = %8, %4
  %13 = fsub double %5, %6
  br label %14

14:                                               ; preds = %8, %12
  %15 = phi double [ %13, %12 ], [ 0.000000e+00, %8 ]
  %16 = fcmp oge double %15, 0.000000e+00
  %17 = zext i1 %16 to i64
  %18 = fcmp ogt double %15, 0.000000e+00
  %19 = zext i1 %18 to i64
  %20 = add nuw nsw i64 %17, %19
  %21 = fcmp oge double %3, 0.000000e+00
  %22 = zext i1 %21 to i64
  %23 = fcmp ogt double %3, 0.000000e+00
  %24 = zext i1 %23 to i64
  %25 = add nuw nsw i64 %22, %24
  %26 = fcmp oge double %2, 0.000000e+00
  %27 = zext i1 %26 to i64
  %28 = fcmp ogt double %2, 0.000000e+00
  %29 = zext i1 %28 to i64
  %30 = add nuw nsw i64 %27, %29
  %31 = getelementptr inbounds [3 x [3 x [3 x i32]]], [3 x [3 x [3 x i32]]]* @_ZZNK9SkOpAngle10findSectorEN6SkPath4VerbEddE10sedecimant, i64 0, i64 %20, i64 %25, i64 %30
  %32 = load i32, i32* %31, align 4
  %33 = shl nsw i32 %32, 1
  %34 = or i32 %33, 1
  ret i32 %34
}

; Function Attrs: nounwind ssp uwtable
define hidden %class.SkOpGlobalState* @_ZNK9SkOpAngle11globalStateEv(%class.SkOpAngle* nocapture readonly) local_unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %class.SkOpAngle, %class.SkOpAngle* %0, i64 0, i32 6
  %3 = load %class.SkOpSpanBase*, %class.SkOpSpanBase** %2, align 8
  %4 = getelementptr inbounds %class.SkOpSpanBase, %class.SkOpSpanBase* %3, i64 0, i32 1
  %5 = load %class.SkOpSegment*, %class.SkOpSegment** %4, align 8
  %6 = tail call %class.SkOpGlobalState* @_ZNK11SkOpSegment11globalStateEv(%class.SkOpSegment* %5) #10
  ret %class.SkOpGlobalState* %6
}

declare %class.SkOpGlobalState* @_ZNK11SkOpSegment11globalStateEv(%class.SkOpSegment*) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN9SkOpAngle6insertEPS_(%class.SkOpAngle*, %class.SkOpAngle*) local_unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %class.SkOpAngle, %class.SkOpAngle* %1, i64 0, i32 4
  %4 = load %class.SkOpAngle*, %class.SkOpAngle** %3, align 8
  %5 = icmp eq %class.SkOpAngle* %4, null
  br i1 %5, label %75, label %6

6:                                                ; preds = %2, %6
  %7 = phi i32 [ %11, %6 ], [ 0, %2 ]
  %8 = phi %class.SkOpAngle* [ %10, %6 ], [ %0, %2 ]
  %9 = getelementptr inbounds %class.SkOpAngle, %class.SkOpAngle* %8, i64 0, i32 4
  %10 = load %class.SkOpAngle*, %class.SkOpAngle** %9, align 8
  %11 = add nuw nsw i32 %7, 1
  %12 = icmp eq %class.SkOpAngle* %10, null
  %13 = icmp eq %class.SkOpAngle* %10, %0
  %14 = or i1 %12, %13
  br i1 %14, label %15, label %6

15:                                               ; preds = %6
  %16 = icmp eq %class.SkOpAngle* %4, %1
  br i1 %16, label %26, label %17

17:                                               ; preds = %15, %17
  %18 = phi i32 [ %20, %17 ], [ 0, %15 ]
  %19 = phi %class.SkOpAngle* [ %22, %17 ], [ %4, %15 ]
  %20 = add nuw nsw i32 %18, 1
  %21 = getelementptr inbounds %class.SkOpAngle, %class.SkOpAngle* %19, i64 0, i32 4
  %22 = load %class.SkOpAngle*, %class.SkOpAngle** %21, align 8
  %23 = icmp eq %class.SkOpAngle* %22, null
  %24 = icmp eq %class.SkOpAngle* %22, %1
  %25 = or i1 %23, %24
  br i1 %25, label %26, label %17

26:                                               ; preds = %17, %15
  %27 = phi i32 [ 0, %15 ], [ %20, %17 ]
  %28 = icmp ult i32 %7, %27
  br i1 %28, label %50, label %29

29:                                               ; preds = %26, %32
  %30 = phi %class.SkOpAngle* [ %34, %32 ], [ %1, %26 ]
  %31 = icmp eq %class.SkOpAngle* %30, %0
  br i1 %31, label %48, label %32

32:                                               ; preds = %29
  %33 = getelementptr inbounds %class.SkOpAngle, %class.SkOpAngle* %30, i64 0, i32 4
  %34 = load %class.SkOpAngle*, %class.SkOpAngle** %33, align 8
  %35 = icmp eq %class.SkOpAngle* %34, %1
  br i1 %35, label %36, label %29

36:                                               ; preds = %32
  %37 = getelementptr inbounds %class.SkOpAngle, %class.SkOpAngle* %1, i64 0, i32 4
  store %class.SkOpAngle* null, %class.SkOpAngle** %37, align 8
  %38 = tail call zeroext i1 @_ZN9SkOpAngle6insertEPS_(%class.SkOpAngle* %0, %class.SkOpAngle* %1) #10
  %39 = icmp eq %class.SkOpAngle* %4, %1
  br i1 %39, label %47, label %40

40:                                               ; preds = %36, %40
  %41 = phi %class.SkOpAngle* [ %43, %40 ], [ %4, %36 ]
  %42 = getelementptr inbounds %class.SkOpAngle, %class.SkOpAngle* %41, i64 0, i32 4
  %43 = load %class.SkOpAngle*, %class.SkOpAngle** %42, align 8
  %44 = getelementptr inbounds %class.SkOpAngle, %class.SkOpAngle* %41, i64 0, i32 4
  store %class.SkOpAngle* null, %class.SkOpAngle** %44, align 8
  %45 = tail call zeroext i1 @_ZN9SkOpAngle6insertEPS_(%class.SkOpAngle* %0, %class.SkOpAngle* %41) #10
  %46 = icmp eq %class.SkOpAngle* %43, %1
  br i1 %46, label %47, label %40

47:                                               ; preds = %40, %36
  tail call void @_ZNK9SkOpAngle17debugValidateNextEv(%class.SkOpAngle* %0) #10
  br label %48

48:                                               ; preds = %29, %54, %98, %94, %91, %72, %47
  %49 = phi i1 [ true, %47 ], [ true, %91 ], [ true, %94 ], [ true, %72 ], [ false, %98 ], [ true, %54 ], [ true, %29 ]
  ret i1 %49

50:                                               ; preds = %26
  %51 = getelementptr inbounds %class.SkOpAngle, %class.SkOpAngle* %0, i64 0, i32 4
  %52 = load %class.SkOpAngle*, %class.SkOpAngle** %51, align 8
  %53 = icmp eq %class.SkOpAngle* %52, null
  br i1 %53, label %73, label %54

54:                                               ; preds = %50, %57
  %55 = phi %class.SkOpAngle* [ %59, %57 ], [ %0, %50 ]
  %56 = icmp eq %class.SkOpAngle* %55, %1
  br i1 %56, label %48, label %57

57:                                               ; preds = %54
  %58 = getelementptr inbounds %class.SkOpAngle, %class.SkOpAngle* %55, i64 0, i32 4
  %59 = load %class.SkOpAngle*, %class.SkOpAngle** %58, align 8
  %60 = icmp eq %class.SkOpAngle* %59, %0
  br i1 %60, label %61, label %54

61:                                               ; preds = %57
  %62 = getelementptr inbounds %class.SkOpAngle, %class.SkOpAngle* %0, i64 0, i32 4
  store %class.SkOpAngle* null, %class.SkOpAngle** %62, align 8
  %63 = tail call zeroext i1 @_ZN9SkOpAngle6insertEPS_(%class.SkOpAngle* %1, %class.SkOpAngle* %0) #10
  %64 = icmp eq %class.SkOpAngle* %52, %0
  br i1 %64, label %72, label %65

65:                                               ; preds = %61, %65
  %66 = phi %class.SkOpAngle* [ %68, %65 ], [ %52, %61 ]
  %67 = getelementptr inbounds %class.SkOpAngle, %class.SkOpAngle* %66, i64 0, i32 4
  %68 = load %class.SkOpAngle*, %class.SkOpAngle** %67, align 8
  %69 = getelementptr inbounds %class.SkOpAngle, %class.SkOpAngle* %66, i64 0, i32 4
  store %class.SkOpAngle* null, %class.SkOpAngle** %69, align 8
  %70 = tail call zeroext i1 @_ZN9SkOpAngle6insertEPS_(%class.SkOpAngle* %1, %class.SkOpAngle* %66) #10
  %71 = icmp eq %class.SkOpAngle* %68, %0
  br i1 %71, label %72, label %65

72:                                               ; preds = %65, %61
  tail call void @_ZNK9SkOpAngle17debugValidateNextEv(%class.SkOpAngle* %1) #10
  br label %48

73:                                               ; preds = %50
  %74 = tail call zeroext i1 @_ZN9SkOpAngle6insertEPS_(%class.SkOpAngle* %1, %class.SkOpAngle* %0)
  ret i1 true

75:                                               ; preds = %2
  %76 = getelementptr inbounds %class.SkOpAngle, %class.SkOpAngle* %0, i64 0, i32 4
  %77 = load %class.SkOpAngle*, %class.SkOpAngle** %76, align 8
  %78 = icmp eq %class.SkOpAngle* %77, null
  br i1 %78, label %79, label %80

79:                                               ; preds = %75
  store %class.SkOpAngle* %0, %class.SkOpAngle** %76, align 8
  br label %91

80:                                               ; preds = %75
  %81 = getelementptr inbounds %class.SkOpAngle, %class.SkOpAngle* %77, i64 0, i32 4
  %82 = load %class.SkOpAngle*, %class.SkOpAngle** %81, align 8
  %83 = icmp eq %class.SkOpAngle* %82, %0
  %84 = tail call zeroext i1 @_ZN9SkOpAngle5afterEPS_(%class.SkOpAngle* %1, %class.SkOpAngle* %0)
  br i1 %83, label %87, label %85

85:                                               ; preds = %80
  %86 = getelementptr inbounds %class.SkOpAngle, %class.SkOpAngle* %1, i64 0, i32 16
  br i1 %84, label %94, label %98

87:                                               ; preds = %80
  %88 = getelementptr inbounds %class.SkOpAngle, %class.SkOpAngle* %77, i64 0, i32 4
  %89 = select i1 %84, %class.SkOpAngle** %76, %class.SkOpAngle** %88
  %90 = select i1 %84, %class.SkOpAngle* %77, %class.SkOpAngle* %0
  br label %91

91:                                               ; preds = %87, %79
  %92 = phi %class.SkOpAngle** [ %76, %79 ], [ %89, %87 ]
  %93 = phi %class.SkOpAngle* [ %0, %79 ], [ %90, %87 ]
  store %class.SkOpAngle* %1, %class.SkOpAngle** %92, align 8
  store %class.SkOpAngle* %93, %class.SkOpAngle** %3, align 8
  tail call void @_ZNK9SkOpAngle17debugValidateNextEv(%class.SkOpAngle* %0) #10
  br label %48

94:                                               ; preds = %105, %85
  %95 = phi %class.SkOpAngle* [ %77, %85 ], [ %107, %105 ]
  %96 = phi %class.SkOpAngle* [ %0, %85 ], [ %101, %105 ]
  %97 = getelementptr inbounds %class.SkOpAngle, %class.SkOpAngle* %96, i64 0, i32 4
  store %class.SkOpAngle* %1, %class.SkOpAngle** %97, align 8
  store %class.SkOpAngle* %95, %class.SkOpAngle** %3, align 8
  tail call void @_ZNK9SkOpAngle17debugValidateNextEv(%class.SkOpAngle* %0) #10
  br label %48

98:                                               ; preds = %85, %105
  %99 = phi i1 [ %112, %105 ], [ true, %85 ]
  %100 = phi i8 [ %104, %105 ], [ 0, %85 ]
  %101 = phi %class.SkOpAngle* [ %107, %105 ], [ %77, %85 ]
  %102 = icmp ne %class.SkOpAngle* %101, %0
  %103 = or i1 %102, %99
  %104 = select i1 %102, i8 %100, i8 1
  br i1 %103, label %105, label %48

105:                                              ; preds = %98
  %106 = getelementptr inbounds %class.SkOpAngle, %class.SkOpAngle* %101, i64 0, i32 4
  %107 = load %class.SkOpAngle*, %class.SkOpAngle** %106, align 8
  %108 = tail call zeroext i1 @_ZN9SkOpAngle5afterEPS_(%class.SkOpAngle* %1, %class.SkOpAngle* %101)
  %109 = zext i1 %108 to i32
  %110 = load i8, i8* %86, align 2, !range !2
  %111 = and i8 %104, 1
  %112 = icmp eq i8 %111, 0
  %113 = and i8 %110, %111
  %114 = zext i8 %113 to i32
  %115 = icmp eq i32 %114, %109
  br i1 %115, label %98, label %94
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden i32 @_ZNK9SkOpAngle9loopCountEv(%class.SkOpAngle* readonly) local_unnamed_addr #3 align 2 {
  br label %2

2:                                                ; preds = %2, %1
  %3 = phi i32 [ 0, %1 ], [ %7, %2 ]
  %4 = phi %class.SkOpAngle* [ %0, %1 ], [ %6, %2 ]
  %5 = getelementptr inbounds %class.SkOpAngle, %class.SkOpAngle* %4, i64 0, i32 4
  %6 = load %class.SkOpAngle*, %class.SkOpAngle** %5, align 8
  %7 = add nuw nsw i32 %3, 1
  %8 = icmp eq %class.SkOpAngle* %6, null
  %9 = icmp eq %class.SkOpAngle* %6, %0
  %10 = or i1 %8, %9
  br i1 %10, label %11, label %2

11:                                               ; preds = %2
  ret i32 %7
}

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN9SkOpAngle5mergeEPS_(%class.SkOpAngle*, %class.SkOpAngle* readonly) local_unnamed_addr #0 align 2 {
  br label %3

3:                                                ; preds = %6, %2
  %4 = phi %class.SkOpAngle* [ %1, %2 ], [ %8, %6 ]
  %5 = icmp eq %class.SkOpAngle* %4, %0
  br i1 %5, label %17, label %6

6:                                                ; preds = %3
  %7 = getelementptr inbounds %class.SkOpAngle, %class.SkOpAngle* %4, i64 0, i32 4
  %8 = load %class.SkOpAngle*, %class.SkOpAngle** %7, align 8
  %9 = icmp eq %class.SkOpAngle* %8, %1
  br i1 %9, label %10, label %3

10:                                               ; preds = %6, %10
  %11 = phi %class.SkOpAngle* [ %13, %10 ], [ %1, %6 ]
  %12 = getelementptr inbounds %class.SkOpAngle, %class.SkOpAngle* %11, i64 0, i32 4
  %13 = load %class.SkOpAngle*, %class.SkOpAngle** %12, align 8
  store %class.SkOpAngle* null, %class.SkOpAngle** %12, align 8
  %14 = tail call zeroext i1 @_ZN9SkOpAngle6insertEPS_(%class.SkOpAngle* %0, %class.SkOpAngle* %11)
  %15 = icmp eq %class.SkOpAngle* %13, %1
  br i1 %15, label %16, label %10

16:                                               ; preds = %10
  tail call void @_ZNK9SkOpAngle17debugValidateNextEv(%class.SkOpAngle* %0) #10
  br label %17

17:                                               ; preds = %3, %16
  %18 = phi i1 [ true, %16 ], [ false, %3 ]
  ret i1 %18
}

declare void @_ZNK9SkOpAngle17debugValidateNextEv(%class.SkOpAngle*) local_unnamed_addr #2

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden %class.SkOpSpanBase* @_ZNK9SkOpAngle10lastMarkedEv(%class.SkOpAngle* nocapture readonly) local_unnamed_addr #8 align 2 {
  %2 = getelementptr inbounds %class.SkOpAngle, %class.SkOpAngle* %0, i64 0, i32 5
  %3 = load %class.SkOpSpanBase*, %class.SkOpSpanBase** %2, align 8
  %4 = icmp eq %class.SkOpSpanBase* %3, null
  br i1 %4, label %11, label %5

5:                                                ; preds = %1
  %6 = getelementptr inbounds %class.SkOpSpanBase, %class.SkOpSpanBase* %3, i64 0, i32 7
  %7 = load i8, i8* %6, align 1, !range !2
  %8 = icmp eq i8 %7, 0
  br i1 %8, label %9, label %11

9:                                                ; preds = %5
  store i8 1, i8* %6, align 1
  %10 = load %class.SkOpSpanBase*, %class.SkOpSpanBase** %2, align 8
  br label %11

11:                                               ; preds = %9, %1, %5
  %12 = phi %class.SkOpSpanBase* [ null, %5 ], [ null, %1 ], [ %10, %9 ]
  ret %class.SkOpSpanBase* %12
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden zeroext i1 @_ZNK9SkOpAngle12loopContainsEPKS_(%class.SkOpAngle* readonly, %class.SkOpAngle* nocapture readonly) local_unnamed_addr #3 align 2 {
  %3 = getelementptr inbounds %class.SkOpAngle, %class.SkOpAngle* %0, i64 0, i32 4
  %4 = load %class.SkOpAngle*, %class.SkOpAngle** %3, align 8
  %5 = icmp eq %class.SkOpAngle* %4, null
  br i1 %5, label %38, label %6

6:                                                ; preds = %2
  %7 = getelementptr inbounds %class.SkOpAngle, %class.SkOpAngle* %1, i64 0, i32 6
  %8 = load %class.SkOpSpanBase*, %class.SkOpSpanBase** %7, align 8
  %9 = getelementptr inbounds %class.SkOpSpanBase, %class.SkOpSpanBase* %8, i64 0, i32 1
  %10 = load %class.SkOpSegment*, %class.SkOpSegment** %9, align 8
  %11 = getelementptr inbounds %class.SkOpSpanBase, %class.SkOpSpanBase* %8, i64 0, i32 0, i32 0
  %12 = load double, double* %11, align 8
  %13 = getelementptr inbounds %class.SkOpAngle, %class.SkOpAngle* %1, i64 0, i32 7
  %14 = load %class.SkOpSpanBase*, %class.SkOpSpanBase** %13, align 8
  %15 = getelementptr inbounds %class.SkOpSpanBase, %class.SkOpSpanBase* %14, i64 0, i32 0, i32 0
  %16 = load double, double* %15, align 8
  br label %17

17:                                               ; preds = %34, %6
  %18 = phi %class.SkOpAngle* [ %0, %6 ], [ %36, %34 ]
  %19 = getelementptr inbounds %class.SkOpAngle, %class.SkOpAngle* %18, i64 0, i32 6
  %20 = load %class.SkOpSpanBase*, %class.SkOpSpanBase** %19, align 8
  %21 = getelementptr inbounds %class.SkOpSpanBase, %class.SkOpSpanBase* %20, i64 0, i32 1
  %22 = load %class.SkOpSegment*, %class.SkOpSegment** %21, align 8
  %23 = icmp eq %class.SkOpSegment* %22, %10
  br i1 %23, label %24, label %34

24:                                               ; preds = %17
  %25 = getelementptr inbounds %class.SkOpSpanBase, %class.SkOpSpanBase* %20, i64 0, i32 0, i32 0
  %26 = load double, double* %25, align 8
  %27 = fcmp une double %26, %16
  br i1 %27, label %34, label %28

28:                                               ; preds = %24
  %29 = getelementptr inbounds %class.SkOpAngle, %class.SkOpAngle* %18, i64 0, i32 7
  %30 = load %class.SkOpSpanBase*, %class.SkOpSpanBase** %29, align 8
  %31 = getelementptr inbounds %class.SkOpSpanBase, %class.SkOpSpanBase* %30, i64 0, i32 0, i32 0
  %32 = load double, double* %31, align 8
  %33 = fcmp oeq double %32, %12
  br i1 %33, label %38, label %34

34:                                               ; preds = %17, %28, %24
  %35 = getelementptr inbounds %class.SkOpAngle, %class.SkOpAngle* %18, i64 0, i32 4
  %36 = load %class.SkOpAngle*, %class.SkOpAngle** %35, align 8
  %37 = icmp eq %class.SkOpAngle* %36, %0
  br i1 %37, label %38, label %17

38:                                               ; preds = %28, %34, %2
  %39 = phi i1 [ false, %2 ], [ true, %28 ], [ false, %34 ]
  ret i1 %39
}

declare i32 @_ZNK15SkIntersections11mostOutsideEddRK8SkDPoint(%class.SkIntersections*, double, double, %struct.SkDPoint* dereferenceable(16)) local_unnamed_addr #2

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden %class.SkOpAngle* @_ZNK9SkOpAngle8previousEv(%class.SkOpAngle* readonly) local_unnamed_addr #3 align 2 {
  %2 = getelementptr inbounds %class.SkOpAngle, %class.SkOpAngle* %0, i64 0, i32 4
  %3 = load %class.SkOpAngle*, %class.SkOpAngle** %2, align 8
  br label %4

4:                                                ; preds = %4, %1
  %5 = phi %class.SkOpAngle* [ %3, %1 ], [ %7, %4 ]
  %6 = getelementptr inbounds %class.SkOpAngle, %class.SkOpAngle* %5, i64 0, i32 4
  %7 = load %class.SkOpAngle*, %class.SkOpAngle** %6, align 8
  %8 = icmp eq %class.SkOpAngle* %7, %0
  br i1 %8, label %9, label %4

9:                                                ; preds = %4
  ret %class.SkOpAngle* %5
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN9SkOpAngle3setEP12SkOpSpanBaseS1_(%class.SkOpAngle*, %class.SkOpSpanBase*, %class.SkOpSpanBase*) local_unnamed_addr #0 align 2 {
  %4 = getelementptr inbounds %class.SkOpAngle, %class.SkOpAngle* %0, i64 0, i32 6
  store %class.SkOpSpanBase* %1, %class.SkOpSpanBase** %4, align 8
  %5 = getelementptr inbounds %class.SkOpAngle, %class.SkOpAngle* %0, i64 0, i32 7
  store %class.SkOpSpanBase* %2, %class.SkOpSpanBase** %5, align 8
  %6 = getelementptr inbounds %class.SkOpAngle, %class.SkOpAngle* %0, i64 0, i32 8
  store %class.SkOpSpanBase* %2, %class.SkOpSpanBase** %6, align 8
  %7 = getelementptr inbounds %class.SkOpAngle, %class.SkOpAngle* %0, i64 0, i32 4
  store %class.SkOpAngle* null, %class.SkOpAngle** %7, align 8
  %8 = getelementptr inbounds %class.SkOpAngle, %class.SkOpAngle* %0, i64 0, i32 13
  %9 = bitcast i8* %8 to i32*
  store i32 0, i32* %9, align 1
  tail call void @_ZN9SkOpAngle8setSpansEv(%class.SkOpAngle* %0)
  tail call void @_ZN9SkOpAngle9setSectorEv(%class.SkOpAngle* %0)
  ret void
}

declare zeroext i1 @_ZNK11SkOpSegment9subDivideEPK12SkOpSpanBaseS2_P8SkDCurve(%class.SkOpSegment*, %class.SkOpSpanBase*, %class.SkOpSpanBase*, %struct.SkDCurve*) local_unnamed_addr #2

declare void @_ZN13SkDCurveSweep17setCurveHullSweepEN6SkPath4VerbE(%class.SkDCurveSweep*, i32) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define internal { double, double } @_ZL14dcubic_xy_at_tPK7SkPointfd(%struct.SkPoint* nocapture readonly, float, double) #0 {
  %4 = alloca %struct.SkDCubic, align 16
  %5 = bitcast %struct.SkDCubic* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 64, i8* nonnull %5) #10
  %6 = bitcast %struct.SkPoint* %0 to <2 x float>*
  %7 = load <2 x float>, <2 x float>* %6, align 4
  %8 = fpext <2 x float> %7 to <2 x double>
  %9 = bitcast %struct.SkDCubic* %4 to <2 x double>*
  store <2 x double> %8, <2 x double>* %9, align 16
  %10 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %0, i64 1, i32 0
  %11 = getelementptr inbounds %struct.SkDCubic, %struct.SkDCubic* %4, i64 0, i32 0, i64 1, i32 0
  %12 = bitcast float* %10 to <2 x float>*
  %13 = load <2 x float>, <2 x float>* %12, align 4
  %14 = fpext <2 x float> %13 to <2 x double>
  %15 = bitcast double* %11 to <2 x double>*
  store <2 x double> %14, <2 x double>* %15, align 16
  %16 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %0, i64 2, i32 0
  %17 = getelementptr inbounds %struct.SkDCubic, %struct.SkDCubic* %4, i64 0, i32 0, i64 2, i32 0
  %18 = bitcast float* %16 to <2 x float>*
  %19 = load <2 x float>, <2 x float>* %18, align 4
  %20 = fpext <2 x float> %19 to <2 x double>
  %21 = bitcast double* %17 to <2 x double>*
  store <2 x double> %20, <2 x double>* %21, align 16
  %22 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %0, i64 3, i32 0
  %23 = getelementptr inbounds %struct.SkDCubic, %struct.SkDCubic* %4, i64 0, i32 0, i64 3, i32 0
  %24 = bitcast float* %22 to <2 x float>*
  %25 = load <2 x float>, <2 x float>* %24, align 4
  %26 = fpext <2 x float> %25 to <2 x double>
  %27 = bitcast double* %23 to <2 x double>*
  store <2 x double> %26, <2 x double>* %27, align 16
  %28 = call { double, double } @_ZNK8SkDCubic5ptAtTEd(%struct.SkDCubic* nonnull %4, double %2) #10
  call void @llvm.lifetime.end.p0i8(i64 64, i8* nonnull %5) #10
  ret { double, double } %28
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZN16SkLineParameters14cubicEndPointsERK8SkDCubic(%class.SkLineParameters*, %struct.SkDCubic* dereferenceable(64)) local_unnamed_addr #0 comdat align 2 {
  %3 = getelementptr inbounds %struct.SkDCubic, %struct.SkDCubic* %1, i64 0, i32 0, i64 0, i32 1
  %4 = load double, double* %3, align 8
  %5 = getelementptr inbounds %struct.SkDCubic, %struct.SkDCubic* %1, i64 0, i32 0, i64 1, i32 1
  %6 = load double, double* %5, align 8
  %7 = fsub double %4, %6
  %8 = getelementptr inbounds %class.SkLineParameters, %class.SkLineParameters* %0, i64 0, i32 0
  store double %7, double* %8, align 8
  %9 = getelementptr inbounds %struct.SkDCubic, %struct.SkDCubic* %1, i64 0, i32 0, i64 1, i32 0
  %10 = load double, double* %9, align 8
  %11 = getelementptr inbounds %struct.SkDCubic, %struct.SkDCubic* %1, i64 0, i32 0, i64 0, i32 0
  %12 = load double, double* %11, align 8
  %13 = fsub double %10, %12
  %14 = getelementptr inbounds %class.SkLineParameters, %class.SkLineParameters* %0, i64 0, i32 1
  store double %13, double* %14, align 8
  %15 = load double, double* %11, align 8
  %16 = load double, double* %5, align 8
  %17 = fmul double %15, %16
  %18 = load double, double* %9, align 8
  %19 = load double, double* %3, align 8
  %20 = fmul double %18, %19
  %21 = fsub double %17, %20
  %22 = getelementptr inbounds %class.SkLineParameters, %class.SkLineParameters* %0, i64 0, i32 2
  store double %21, double* %22, align 8
  %23 = fcmp une double %7, 0.000000e+00
  br i1 %23, label %86, label %24

24:                                               ; preds = %2
  %25 = fcmp oeq double %13, 0.000000e+00
  br i1 %25, label %26, label %61

26:                                               ; preds = %24
  %27 = load double, double* %3, align 8
  %28 = getelementptr inbounds %struct.SkDCubic, %struct.SkDCubic* %1, i64 0, i32 0, i64 2, i32 1
  %29 = load double, double* %28, align 8
  %30 = fsub double %27, %29
  store double %30, double* %8, align 8
  %31 = getelementptr inbounds %struct.SkDCubic, %struct.SkDCubic* %1, i64 0, i32 0, i64 2, i32 0
  %32 = load double, double* %31, align 8
  %33 = load double, double* %11, align 8
  %34 = fsub double %32, %33
  store double %34, double* %14, align 8
  %35 = load double, double* %11, align 8
  %36 = load double, double* %28, align 8
  %37 = fmul double %35, %36
  %38 = load double, double* %31, align 8
  %39 = load double, double* %3, align 8
  %40 = fmul double %38, %39
  %41 = fsub double %37, %40
  store double %41, double* %22, align 8
  %42 = fcmp une double %30, 0.000000e+00
  br i1 %42, label %86, label %43

43:                                               ; preds = %26
  %44 = fcmp oeq double %34, 0.000000e+00
  br i1 %44, label %45, label %61

45:                                               ; preds = %43
  %46 = load double, double* %3, align 8
  %47 = getelementptr inbounds %struct.SkDCubic, %struct.SkDCubic* %1, i64 0, i32 0, i64 3, i32 1
  %48 = load double, double* %47, align 8
  %49 = fsub double %46, %48
  store double %49, double* %8, align 8
  %50 = getelementptr inbounds %struct.SkDCubic, %struct.SkDCubic* %1, i64 0, i32 0, i64 3, i32 0
  %51 = load double, double* %50, align 8
  %52 = load double, double* %11, align 8
  %53 = fsub double %51, %52
  store double %53, double* %14, align 8
  %54 = load double, double* %11, align 8
  %55 = load double, double* %47, align 8
  %56 = fmul double %54, %55
  %57 = load double, double* %50, align 8
  %58 = load double, double* %3, align 8
  %59 = fmul double %57, %58
  %60 = fsub double %56, %59
  store double %60, double* %22, align 8
  br label %86

61:                                               ; preds = %43, %24
  %62 = phi double [ %34, %43 ], [ %13, %24 ]
  %63 = phi i32 [ 3, %43 ], [ 2, %24 ]
  %64 = fcmp olt double %62, 0.000000e+00
  br i1 %64, label %86, label %65

65:                                               ; preds = %61
  %66 = load double, double* %3, align 8
  %67 = zext i32 %63 to i64
  %68 = getelementptr inbounds %struct.SkDCubic, %struct.SkDCubic* %1, i64 0, i32 0, i64 %67, i32 1
  %69 = load double, double* %68, align 8
  %70 = fptrunc double %66 to float
  %71 = fptrunc double %69 to float
  %72 = tail call zeroext i1 @_Z18NotAlmostEqualUlpsff(float %70, float %71) #10
  br i1 %72, label %73, label %78

73:                                               ; preds = %65
  %74 = load double, double* %3, align 8
  %75 = load double, double* %68, align 8
  %76 = fcmp ogt double %74, %75
  br i1 %76, label %77, label %86

77:                                               ; preds = %73
  store double 0x3CB0000000000000, double* %8, align 8
  br label %86

78:                                               ; preds = %65
  %79 = icmp eq i32 %63, 3
  br i1 %79, label %86, label %80

80:                                               ; preds = %78
  %81 = load double, double* %3, align 8
  %82 = getelementptr inbounds %struct.SkDCubic, %struct.SkDCubic* %1, i64 0, i32 0, i64 3, i32 1
  %83 = load double, double* %82, align 8
  %84 = fcmp ogt double %81, %83
  br i1 %84, label %85, label %86

85:                                               ; preds = %80
  store double 0x3CB0000000000000, double* %8, align 8
  br label %86

86:                                               ; preds = %80, %85, %78, %73, %77, %61, %26, %2, %45
  %87 = phi i1 [ false, %45 ], [ true, %2 ], [ true, %26 ], [ true, %61 ], [ true, %77 ], [ true, %73 ], [ true, %78 ], [ true, %85 ], [ true, %80 ]
  ret i1 %87
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden %class.SkOpSpan* @_ZN9SkOpAngle7starterEv(%class.SkOpAngle* nocapture readonly) local_unnamed_addr #3 align 2 {
  %2 = getelementptr inbounds %class.SkOpAngle, %class.SkOpAngle* %0, i64 0, i32 6
  %3 = load %class.SkOpSpanBase*, %class.SkOpSpanBase** %2, align 8
  %4 = getelementptr inbounds %class.SkOpAngle, %class.SkOpAngle* %0, i64 0, i32 7
  %5 = load %class.SkOpSpanBase*, %class.SkOpSpanBase** %4, align 8
  %6 = getelementptr inbounds %class.SkOpSpanBase, %class.SkOpSpanBase* %3, i64 0, i32 0, i32 0
  %7 = load double, double* %6, align 8
  %8 = getelementptr inbounds %class.SkOpSpanBase, %class.SkOpSpanBase* %5, i64 0, i32 0, i32 0
  %9 = load double, double* %8, align 8
  %10 = fcmp olt double %7, %9
  %11 = select i1 %10, %class.SkOpSpanBase* %3, %class.SkOpSpanBase* %5
  %12 = bitcast %class.SkOpSpanBase* %11 to %class.SkOpSpan*
  ret %class.SkOpSpan* %12
}

declare zeroext i1 @_Z16AlmostBequalUlpsff(float, float) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define internal { double, double } @_ZL13dline_xy_at_tPK7SkPointfd(%struct.SkPoint* nocapture readonly, float, double) #0 {
  %4 = alloca %struct.SkDLine, align 16
  %5 = bitcast %struct.SkDLine* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %5) #10
  %6 = getelementptr inbounds %struct.SkDLine, %struct.SkDLine* %4, i64 0, i32 0, i64 1, i32 0
  %7 = bitcast %struct.SkPoint* %0 to <2 x float>*
  %8 = load <2 x float>, <2 x float>* %7, align 4
  %9 = fpext <2 x float> %8 to <2 x double>
  %10 = bitcast %struct.SkDLine* %4 to <2 x double>*
  store <2 x double> %9, <2 x double>* %10, align 16
  %11 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %0, i64 1, i32 0
  %12 = bitcast float* %11 to <2 x float>*
  %13 = load <2 x float>, <2 x float>* %12, align 4
  %14 = fpext <2 x float> %13 to <2 x double>
  %15 = bitcast double* %6 to <2 x double>*
  store <2 x double> %14, <2 x double>* %15, align 16
  %16 = call { double, double } @_ZNK7SkDLine5ptAtTEd(%struct.SkDLine* nonnull %4, double %2) #10
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %5) #10
  ret { double, double } %16
}

; Function Attrs: nounwind ssp uwtable
define internal { double, double } @_ZL13dquad_xy_at_tPK7SkPointfd(%struct.SkPoint* nocapture readonly, float, double) #0 {
  %4 = alloca %struct.SkDQuad, align 16
  %5 = bitcast %struct.SkDQuad* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 48, i8* nonnull %5) #10
  %6 = getelementptr inbounds %struct.SkDQuad, %struct.SkDQuad* %4, i64 0, i32 0, i64 1, i32 0
  %7 = getelementptr inbounds %struct.SkDQuad, %struct.SkDQuad* %4, i64 0, i32 0, i64 2, i32 0
  %8 = bitcast %struct.SkPoint* %0 to <2 x float>*
  %9 = load <2 x float>, <2 x float>* %8, align 4
  %10 = fpext <2 x float> %9 to <2 x double>
  %11 = bitcast %struct.SkDQuad* %4 to <2 x double>*
  store <2 x double> %10, <2 x double>* %11, align 16
  %12 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %0, i64 1, i32 0
  %13 = bitcast float* %12 to <2 x float>*
  %14 = load <2 x float>, <2 x float>* %13, align 4
  %15 = fpext <2 x float> %14 to <2 x double>
  %16 = bitcast double* %6 to <2 x double>*
  store <2 x double> %15, <2 x double>* %16, align 16
  %17 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %0, i64 2, i32 0
  %18 = bitcast float* %17 to <2 x float>*
  %19 = load <2 x float>, <2 x float>* %18, align 4
  %20 = fpext <2 x float> %19 to <2 x double>
  %21 = bitcast double* %7 to <2 x double>*
  store <2 x double> %20, <2 x double>* %21, align 16
  %22 = call { double, double } @_ZNK7SkDQuad5ptAtTEd(%struct.SkDQuad* nonnull %4, double %2) #10
  call void @llvm.lifetime.end.p0i8(i64 48, i8* nonnull %5) #10
  ret { double, double } %22
}

; Function Attrs: nounwind ssp uwtable
define internal { double, double } @_ZL14dconic_xy_at_tPK7SkPointfd(%struct.SkPoint* nocapture readonly, float, double) #0 {
  %4 = alloca %struct.SkDConic, align 16
  %5 = bitcast %struct.SkDConic* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 56, i8* nonnull %5) #10
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 16 %5, i8* align 8 bitcast ({ %struct.SkDQuad, float, [4 x i8] }* @__const._ZL16dconic_dxdy_at_tPK7SkPointfd.conic to i8*), i64 56, i1 false)
  %6 = bitcast %struct.SkPoint* %0 to <2 x float>*
  %7 = load <2 x float>, <2 x float>* %6, align 4
  %8 = fpext <2 x float> %7 to <2 x double>
  %9 = bitcast %struct.SkDConic* %4 to <2 x double>*
  store <2 x double> %8, <2 x double>* %9, align 16
  %10 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %0, i64 1, i32 0
  %11 = getelementptr inbounds %struct.SkDConic, %struct.SkDConic* %4, i64 0, i32 0, i32 0, i64 1, i32 0
  %12 = bitcast float* %10 to <2 x float>*
  %13 = load <2 x float>, <2 x float>* %12, align 4
  %14 = fpext <2 x float> %13 to <2 x double>
  %15 = bitcast double* %11 to <2 x double>*
  store <2 x double> %14, <2 x double>* %15, align 16
  %16 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %0, i64 2, i32 0
  %17 = getelementptr inbounds %struct.SkDConic, %struct.SkDConic* %4, i64 0, i32 0, i32 0, i64 2, i32 0
  %18 = bitcast float* %16 to <2 x float>*
  %19 = load <2 x float>, <2 x float>* %18, align 4
  %20 = fpext <2 x float> %19 to <2 x double>
  %21 = bitcast double* %17 to <2 x double>*
  store <2 x double> %20, <2 x double>* %21, align 16
  %22 = getelementptr inbounds %struct.SkDConic, %struct.SkDConic* %4, i64 0, i32 1
  store float %1, float* %22, align 16
  %23 = call { double, double } @_ZNK8SkDConic5ptAtTEd(%struct.SkDConic* nonnull %4, double %2) #10
  call void @llvm.lifetime.end.p0i8(i64 56, i8* nonnull %5) #10
  ret { double, double } %23
}

declare { double, double } @_ZNK7SkDLine5ptAtTEd(%struct.SkDLine*, double) local_unnamed_addr #2

declare { double, double } @_ZNK7SkDQuad5ptAtTEd(%struct.SkDQuad*, double) local_unnamed_addr #2

declare { double, double } @_ZNK8SkDConic5ptAtTEd(%struct.SkDConic*, double) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define internal void @_ZL18line_intersect_rayPK7SkPointfRK7SkDLineP15SkIntersections(%struct.SkPoint* nocapture readonly, float, %struct.SkDLine* dereferenceable(32), %class.SkIntersections*) #0 {
  %5 = alloca %struct.SkDLine, align 16
  %6 = bitcast %struct.SkDLine* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %6) #10
  %7 = getelementptr inbounds %struct.SkDLine, %struct.SkDLine* %5, i64 0, i32 0, i64 1, i32 0
  %8 = bitcast %struct.SkPoint* %0 to <2 x float>*
  %9 = load <2 x float>, <2 x float>* %8, align 4
  %10 = fpext <2 x float> %9 to <2 x double>
  %11 = bitcast %struct.SkDLine* %5 to <2 x double>*
  store <2 x double> %10, <2 x double>* %11, align 16
  %12 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %0, i64 1, i32 0
  %13 = bitcast float* %12 to <2 x float>*
  %14 = load <2 x float>, <2 x float>* %13, align 4
  %15 = fpext <2 x float> %14 to <2 x double>
  %16 = bitcast double* %7 to <2 x double>*
  store <2 x double> %15, <2 x double>* %16, align 16
  %17 = call i32 @_ZN15SkIntersections12intersectRayERK7SkDLineS2_(%class.SkIntersections* %3, %struct.SkDLine* nonnull dereferenceable(32) %5, %struct.SkDLine* dereferenceable(32) %2) #10
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %6) #10
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZL18quad_intersect_rayPK7SkPointfRK7SkDLineP15SkIntersections(%struct.SkPoint* nocapture readonly, float, %struct.SkDLine* dereferenceable(32), %class.SkIntersections*) #0 {
  %5 = alloca %struct.SkDQuad, align 16
  %6 = bitcast %struct.SkDQuad* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 48, i8* nonnull %6) #10
  %7 = getelementptr inbounds %struct.SkDQuad, %struct.SkDQuad* %5, i64 0, i32 0, i64 1, i32 0
  %8 = getelementptr inbounds %struct.SkDQuad, %struct.SkDQuad* %5, i64 0, i32 0, i64 2, i32 0
  %9 = bitcast %struct.SkPoint* %0 to <2 x float>*
  %10 = load <2 x float>, <2 x float>* %9, align 4
  %11 = fpext <2 x float> %10 to <2 x double>
  %12 = bitcast %struct.SkDQuad* %5 to <2 x double>*
  store <2 x double> %11, <2 x double>* %12, align 16
  %13 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %0, i64 1, i32 0
  %14 = bitcast float* %13 to <2 x float>*
  %15 = load <2 x float>, <2 x float>* %14, align 4
  %16 = fpext <2 x float> %15 to <2 x double>
  %17 = bitcast double* %7 to <2 x double>*
  store <2 x double> %16, <2 x double>* %17, align 16
  %18 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %0, i64 2, i32 0
  %19 = bitcast float* %18 to <2 x float>*
  %20 = load <2 x float>, <2 x float>* %19, align 4
  %21 = fpext <2 x float> %20 to <2 x double>
  %22 = bitcast double* %8 to <2 x double>*
  store <2 x double> %21, <2 x double>* %22, align 16
  %23 = call i32 @_ZN15SkIntersections12intersectRayERK7SkDQuadRK7SkDLine(%class.SkIntersections* %3, %struct.SkDQuad* nonnull dereferenceable(48) %5, %struct.SkDLine* dereferenceable(32) %2) #10
  call void @llvm.lifetime.end.p0i8(i64 48, i8* nonnull %6) #10
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZL19conic_intersect_rayPK7SkPointfRK7SkDLineP15SkIntersections(%struct.SkPoint* nocapture readonly, float, %struct.SkDLine* dereferenceable(32), %class.SkIntersections*) #0 {
  %5 = alloca %struct.SkDConic, align 16
  %6 = bitcast %struct.SkDConic* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 56, i8* nonnull %6) #10
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 16 %6, i8* align 8 bitcast ({ %struct.SkDQuad, float, [4 x i8] }* @__const._ZL16dconic_dxdy_at_tPK7SkPointfd.conic to i8*), i64 56, i1 false)
  %7 = bitcast %struct.SkPoint* %0 to <2 x float>*
  %8 = load <2 x float>, <2 x float>* %7, align 4
  %9 = fpext <2 x float> %8 to <2 x double>
  %10 = bitcast %struct.SkDConic* %5 to <2 x double>*
  store <2 x double> %9, <2 x double>* %10, align 16
  %11 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %0, i64 1, i32 0
  %12 = getelementptr inbounds %struct.SkDConic, %struct.SkDConic* %5, i64 0, i32 0, i32 0, i64 1, i32 0
  %13 = bitcast float* %11 to <2 x float>*
  %14 = load <2 x float>, <2 x float>* %13, align 4
  %15 = fpext <2 x float> %14 to <2 x double>
  %16 = bitcast double* %12 to <2 x double>*
  store <2 x double> %15, <2 x double>* %16, align 16
  %17 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %0, i64 2, i32 0
  %18 = getelementptr inbounds %struct.SkDConic, %struct.SkDConic* %5, i64 0, i32 0, i32 0, i64 2, i32 0
  %19 = bitcast float* %17 to <2 x float>*
  %20 = load <2 x float>, <2 x float>* %19, align 4
  %21 = fpext <2 x float> %20 to <2 x double>
  %22 = bitcast double* %18 to <2 x double>*
  store <2 x double> %21, <2 x double>* %22, align 16
  %23 = getelementptr inbounds %struct.SkDConic, %struct.SkDConic* %5, i64 0, i32 1
  store float %1, float* %23, align 16
  %24 = call i32 @_ZN15SkIntersections12intersectRayERK8SkDConicRK7SkDLine(%class.SkIntersections* %3, %struct.SkDConic* nonnull dereferenceable(56) %5, %struct.SkDLine* dereferenceable(32) %2) #10
  call void @llvm.lifetime.end.p0i8(i64 56, i8* nonnull %6) #10
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZL19cubic_intersect_rayPK7SkPointfRK7SkDLineP15SkIntersections(%struct.SkPoint* nocapture readonly, float, %struct.SkDLine* dereferenceable(32), %class.SkIntersections*) #0 {
  %5 = alloca %struct.SkDCubic, align 16
  %6 = bitcast %struct.SkDCubic* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 64, i8* nonnull %6) #10
  %7 = bitcast %struct.SkPoint* %0 to <2 x float>*
  %8 = load <2 x float>, <2 x float>* %7, align 4
  %9 = fpext <2 x float> %8 to <2 x double>
  %10 = bitcast %struct.SkDCubic* %5 to <2 x double>*
  store <2 x double> %9, <2 x double>* %10, align 16
  %11 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %0, i64 1, i32 0
  %12 = getelementptr inbounds %struct.SkDCubic, %struct.SkDCubic* %5, i64 0, i32 0, i64 1, i32 0
  %13 = bitcast float* %11 to <2 x float>*
  %14 = load <2 x float>, <2 x float>* %13, align 4
  %15 = fpext <2 x float> %14 to <2 x double>
  %16 = bitcast double* %12 to <2 x double>*
  store <2 x double> %15, <2 x double>* %16, align 16
  %17 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %0, i64 2, i32 0
  %18 = getelementptr inbounds %struct.SkDCubic, %struct.SkDCubic* %5, i64 0, i32 0, i64 2, i32 0
  %19 = bitcast float* %17 to <2 x float>*
  %20 = load <2 x float>, <2 x float>* %19, align 4
  %21 = fpext <2 x float> %20 to <2 x double>
  %22 = bitcast double* %18 to <2 x double>*
  store <2 x double> %21, <2 x double>* %22, align 16
  %23 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %0, i64 3, i32 0
  %24 = getelementptr inbounds %struct.SkDCubic, %struct.SkDCubic* %5, i64 0, i32 0, i64 3, i32 0
  %25 = bitcast float* %23 to <2 x float>*
  %26 = load <2 x float>, <2 x float>* %25, align 4
  %27 = fpext <2 x float> %26 to <2 x double>
  %28 = bitcast double* %24 to <2 x double>*
  store <2 x double> %27, <2 x double>* %28, align 16
  %29 = call i32 @_ZN15SkIntersections12intersectRayERK8SkDCubicRK7SkDLine(%class.SkIntersections* %3, %struct.SkDCubic* nonnull dereferenceable(64) %5, %struct.SkDLine* dereferenceable(32) %2) #10
  call void @llvm.lifetime.end.p0i8(i64 64, i8* nonnull %6) #10
  ret void
}

declare i32 @_ZN15SkIntersections12intersectRayERK7SkDLineS2_(%class.SkIntersections*, %struct.SkDLine* dereferenceable(32), %struct.SkDLine* dereferenceable(32)) local_unnamed_addr #2

declare i32 @_ZN15SkIntersections12intersectRayERK7SkDQuadRK7SkDLine(%class.SkIntersections*, %struct.SkDQuad* dereferenceable(48), %struct.SkDLine* dereferenceable(32)) local_unnamed_addr #2

declare i32 @_ZN15SkIntersections12intersectRayERK8SkDConicRK7SkDLine(%class.SkIntersections*, %struct.SkDConic* dereferenceable(56), %struct.SkDLine* dereferenceable(32)) local_unnamed_addr #2

declare i32 @_ZN15SkIntersections12intersectRayERK8SkDCubicRK7SkDLine(%class.SkIntersections*, %struct.SkDCubic* dereferenceable(64), %struct.SkDLine* dereferenceable(32)) local_unnamed_addr #2

; Function Attrs: nounwind readonly ssp uwtable
define internal { double, double } @_ZL15dline_dxdy_at_tPK7SkPointfd(%struct.SkPoint* nocapture readonly, float, double) #9 {
  %4 = bitcast %struct.SkPoint* %0 to <2 x float>*
  %5 = load <2 x float>, <2 x float>* %4, align 4
  %6 = fpext <2 x float> %5 to <2 x double>
  %7 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %0, i64 1, i32 0
  %8 = bitcast float* %7 to <2 x float>*
  %9 = load <2 x float>, <2 x float>* %8, align 4
  %10 = fpext <2 x float> %9 to <2 x double>
  %11 = fsub <2 x double> %10, %6
  %12 = extractelement <2 x double> %11, i32 0
  %13 = insertvalue { double, double } undef, double %12, 0
  %14 = extractelement <2 x double> %11, i32 1
  %15 = insertvalue { double, double } %13, double %14, 1
  ret { double, double } %15
}

; Function Attrs: nounwind ssp uwtable
define internal { double, double } @_ZL15dquad_dxdy_at_tPK7SkPointfd(%struct.SkPoint* nocapture readonly, float, double) #0 {
  %4 = alloca %struct.SkDQuad, align 16
  %5 = bitcast %struct.SkDQuad* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 48, i8* nonnull %5) #10
  %6 = getelementptr inbounds %struct.SkDQuad, %struct.SkDQuad* %4, i64 0, i32 0, i64 1, i32 0
  %7 = getelementptr inbounds %struct.SkDQuad, %struct.SkDQuad* %4, i64 0, i32 0, i64 2, i32 0
  %8 = bitcast %struct.SkPoint* %0 to <2 x float>*
  %9 = load <2 x float>, <2 x float>* %8, align 4
  %10 = fpext <2 x float> %9 to <2 x double>
  %11 = bitcast %struct.SkDQuad* %4 to <2 x double>*
  store <2 x double> %10, <2 x double>* %11, align 16
  %12 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %0, i64 1, i32 0
  %13 = bitcast float* %12 to <2 x float>*
  %14 = load <2 x float>, <2 x float>* %13, align 4
  %15 = fpext <2 x float> %14 to <2 x double>
  %16 = bitcast double* %6 to <2 x double>*
  store <2 x double> %15, <2 x double>* %16, align 16
  %17 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %0, i64 2, i32 0
  %18 = bitcast float* %17 to <2 x float>*
  %19 = load <2 x float>, <2 x float>* %18, align 4
  %20 = fpext <2 x float> %19 to <2 x double>
  %21 = bitcast double* %7 to <2 x double>*
  store <2 x double> %20, <2 x double>* %21, align 16
  %22 = call { double, double } @_ZNK7SkDQuad7dxdyAtTEd(%struct.SkDQuad* nonnull %4, double %2) #10
  call void @llvm.lifetime.end.p0i8(i64 48, i8* nonnull %5) #10
  ret { double, double } %22
}

; Function Attrs: nounwind ssp uwtable
define internal { double, double } @_ZL16dconic_dxdy_at_tPK7SkPointfd(%struct.SkPoint* nocapture readonly, float, double) #0 {
  %4 = alloca %struct.SkDConic, align 16
  %5 = bitcast %struct.SkDConic* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 56, i8* nonnull %5) #10
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 16 %5, i8* align 8 bitcast ({ %struct.SkDQuad, float, [4 x i8] }* @__const._ZL16dconic_dxdy_at_tPK7SkPointfd.conic to i8*), i64 56, i1 false)
  %6 = bitcast %struct.SkPoint* %0 to <2 x float>*
  %7 = load <2 x float>, <2 x float>* %6, align 4
  %8 = fpext <2 x float> %7 to <2 x double>
  %9 = bitcast %struct.SkDConic* %4 to <2 x double>*
  store <2 x double> %8, <2 x double>* %9, align 16
  %10 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %0, i64 1, i32 0
  %11 = getelementptr inbounds %struct.SkDConic, %struct.SkDConic* %4, i64 0, i32 0, i32 0, i64 1, i32 0
  %12 = bitcast float* %10 to <2 x float>*
  %13 = load <2 x float>, <2 x float>* %12, align 4
  %14 = fpext <2 x float> %13 to <2 x double>
  %15 = bitcast double* %11 to <2 x double>*
  store <2 x double> %14, <2 x double>* %15, align 16
  %16 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %0, i64 2, i32 0
  %17 = getelementptr inbounds %struct.SkDConic, %struct.SkDConic* %4, i64 0, i32 0, i32 0, i64 2, i32 0
  %18 = bitcast float* %16 to <2 x float>*
  %19 = load <2 x float>, <2 x float>* %18, align 4
  %20 = fpext <2 x float> %19 to <2 x double>
  %21 = bitcast double* %17 to <2 x double>*
  store <2 x double> %20, <2 x double>* %21, align 16
  %22 = getelementptr inbounds %struct.SkDConic, %struct.SkDConic* %4, i64 0, i32 1
  store float %1, float* %22, align 16
  %23 = call { double, double } @_ZNK8SkDConic7dxdyAtTEd(%struct.SkDConic* nonnull %4, double %2) #10
  call void @llvm.lifetime.end.p0i8(i64 56, i8* nonnull %5) #10
  ret { double, double } %23
}

; Function Attrs: nounwind ssp uwtable
define internal { double, double } @_ZL16dcubic_dxdy_at_tPK7SkPointfd(%struct.SkPoint* nocapture readonly, float, double) #0 {
  %4 = alloca %struct.SkDCubic, align 16
  %5 = bitcast %struct.SkDCubic* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 64, i8* nonnull %5) #10
  %6 = bitcast %struct.SkPoint* %0 to <2 x float>*
  %7 = load <2 x float>, <2 x float>* %6, align 4
  %8 = fpext <2 x float> %7 to <2 x double>
  %9 = bitcast %struct.SkDCubic* %4 to <2 x double>*
  store <2 x double> %8, <2 x double>* %9, align 16
  %10 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %0, i64 1, i32 0
  %11 = getelementptr inbounds %struct.SkDCubic, %struct.SkDCubic* %4, i64 0, i32 0, i64 1, i32 0
  %12 = bitcast float* %10 to <2 x float>*
  %13 = load <2 x float>, <2 x float>* %12, align 4
  %14 = fpext <2 x float> %13 to <2 x double>
  %15 = bitcast double* %11 to <2 x double>*
  store <2 x double> %14, <2 x double>* %15, align 16
  %16 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %0, i64 2, i32 0
  %17 = getelementptr inbounds %struct.SkDCubic, %struct.SkDCubic* %4, i64 0, i32 0, i64 2, i32 0
  %18 = bitcast float* %16 to <2 x float>*
  %19 = load <2 x float>, <2 x float>* %18, align 4
  %20 = fpext <2 x float> %19 to <2 x double>
  %21 = bitcast double* %17 to <2 x double>*
  store <2 x double> %20, <2 x double>* %21, align 16
  %22 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %0, i64 3, i32 0
  %23 = getelementptr inbounds %struct.SkDCubic, %struct.SkDCubic* %4, i64 0, i32 0, i64 3, i32 0
  %24 = bitcast float* %22 to <2 x float>*
  %25 = load <2 x float>, <2 x float>* %24, align 4
  %26 = fpext <2 x float> %25 to <2 x double>
  %27 = bitcast double* %23 to <2 x double>*
  store <2 x double> %26, <2 x double>* %27, align 16
  %28 = call { double, double } @_ZNK8SkDCubic7dxdyAtTEd(%struct.SkDCubic* nonnull %4, double %2) #10
  call void @llvm.lifetime.end.p0i8(i64 64, i8* nonnull %5) #10
  ret { double, double } %28
}

declare { double, double } @_ZNK7SkDQuad7dxdyAtTEd(%struct.SkDQuad*, double) local_unnamed_addr #2

declare { double, double } @_ZNK8SkDConic7dxdyAtTEd(%struct.SkDConic*, double) local_unnamed_addr #2

declare { double, double } @_ZNK8SkDCubic7dxdyAtTEd(%struct.SkDCubic*, double) local_unnamed_addr #2

declare zeroext i1 @_Z28AlmostEqualUlpsNoNormalCheckff(float, float) local_unnamed_addr #2

declare zeroext i1 @_Z15AlmostEqualUlpsff(float, float) local_unnamed_addr #2

declare zeroext i1 @_ZNK7SkDLine7nearRayERK8SkDPoint(%struct.SkDLine*, %struct.SkDPoint* dereferenceable(16)) local_unnamed_addr #2

declare i32 @_ZNK8SkDCubic15findInflectionsEPd(%struct.SkDCubic*, double*) local_unnamed_addr #2

declare { double, double } @_ZNK8SkDCubic5ptAtTEd(%struct.SkDCubic*, double) local_unnamed_addr #2

declare zeroext i1 @_Z18NotAlmostEqualUlpsff(float, float) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_Z12SkTIntroSortIdZ8SkTQSortIdEvPT_S2_EUlRKdS4_E_EviS2_iRKT0_(i32, double*, i32, %class.anon* dereferenceable(1)) local_unnamed_addr #0 comdat {
  %5 = icmp slt i32 %2, 33
  br i1 %5, label %6, label %36

6:                                                ; preds = %94, %4
  %7 = phi i32 [ %2, %4 ], [ %107, %94 ]
  %8 = phi double* [ %1, %4 ], [ %106, %94 ]
  %9 = sext i32 %7 to i64
  %10 = add nsw i64 %9, -1
  %11 = getelementptr inbounds double, double* %8, i64 %10
  %12 = icmp slt i32 %7, 2
  br i1 %12, label %109, label %13

13:                                               ; preds = %6
  %14 = getelementptr inbounds double, double* %8, i64 1
  br label %15

15:                                               ; preds = %33, %13
  %16 = phi double* [ %34, %33 ], [ %14, %13 ]
  %17 = phi double* [ %16, %33 ], [ %8, %13 ]
  %18 = load double, double* %16, align 8
  %19 = load double, double* %17, align 8
  %20 = fcmp olt double %18, %19
  br i1 %20, label %21, label %33

21:                                               ; preds = %15, %28
  %22 = phi double* [ %23, %28 ], [ %16, %15 ]
  %23 = getelementptr inbounds double, double* %22, i64 -1
  %24 = bitcast double* %23 to i64*
  %25 = load i64, i64* %24, align 8
  %26 = bitcast double* %22 to i64*
  store i64 %25, i64* %26, align 8
  %27 = icmp ugt double* %23, %8
  br i1 %27, label %28, label %32

28:                                               ; preds = %21
  %29 = getelementptr inbounds double, double* %22, i64 -2
  %30 = load double, double* %29, align 8
  %31 = fcmp ogt double %30, %18
  br i1 %31, label %21, label %32

32:                                               ; preds = %28, %21
  store double %18, double* %23, align 8
  br label %33

33:                                               ; preds = %32, %15
  %34 = getelementptr inbounds double, double* %16, i64 1
  %35 = icmp ugt double* %34, %11
  br i1 %35, label %109, label %15

36:                                               ; preds = %4, %94
  %37 = phi i32 [ %44, %94 ], [ %0, %4 ]
  %38 = phi double* [ %106, %94 ], [ %1, %4 ]
  %39 = phi i32 [ %107, %94 ], [ %2, %4 ]
  %40 = icmp eq i32 %37, 0
  br i1 %40, label %41, label %43

41:                                               ; preds = %36
  %42 = sext i32 %39 to i64
  tail call void @_Z11SkTHeapSortIdZ8SkTQSortIdEvPT_S2_EUlRKdS4_E_EvS2_mRKT0_(double* %38, i64 %42, %class.anon* dereferenceable(1) %3)
  br label %109

43:                                               ; preds = %36
  %44 = add nsw i32 %37, -1
  %45 = add nsw i32 %39, -1
  %46 = ashr i32 %45, 1
  %47 = sext i32 %46 to i64
  %48 = getelementptr inbounds double, double* %38, i64 %47
  %49 = sext i32 %39 to i64
  %50 = getelementptr inbounds double, double* %38, i64 -1
  %51 = getelementptr inbounds double, double* %50, i64 %49
  %52 = bitcast double* %48 to i64*
  %53 = load i64, i64* %52, align 8
  %54 = bitcast double* %51 to i64*
  %55 = load i64, i64* %54, align 8
  store i64 %55, i64* %52, align 8
  store i64 %53, i64* %54, align 8
  %56 = icmp ugt double* %51, %38
  br i1 %56, label %57, label %94

57:                                               ; preds = %43
  %58 = bitcast i64 %53 to double
  %59 = shl nsw i64 %49, 3
  %60 = add nsw i64 %59, -9
  %61 = and i64 %60, 8
  %62 = icmp eq i64 %61, 0
  br i1 %62, label %63, label %71

63:                                               ; preds = %57
  %64 = load double, double* %38, align 8
  %65 = fcmp olt double %64, %58
  br i1 %65, label %66, label %68

66:                                               ; preds = %63
  store double %64, double* %38, align 8
  %67 = getelementptr inbounds double, double* %38, i64 1
  br label %68

68:                                               ; preds = %66, %63
  %69 = phi double* [ %67, %66 ], [ %38, %63 ]
  %70 = getelementptr inbounds double, double* %38, i64 1
  br label %71

71:                                               ; preds = %68, %57
  %72 = phi double* [ %69, %68 ], [ %38, %57 ]
  %73 = phi double* [ %70, %68 ], [ %38, %57 ]
  %74 = phi double* [ %69, %68 ], [ undef, %57 ]
  %75 = icmp eq i64 %60, 7
  br i1 %75, label %91, label %76

76:                                               ; preds = %71, %115
  %77 = phi double* [ %116, %115 ], [ %72, %71 ]
  %78 = phi double* [ %117, %115 ], [ %73, %71 ]
  %79 = load double, double* %78, align 8
  %80 = fcmp olt double %79, %58
  br i1 %80, label %81, label %86

81:                                               ; preds = %76
  %82 = bitcast double* %78 to i64*
  %83 = bitcast double* %77 to i64*
  %84 = load i64, i64* %83, align 8
  store i64 %84, i64* %82, align 8
  store double %79, double* %77, align 8
  %85 = getelementptr inbounds double, double* %77, i64 1
  br label %86

86:                                               ; preds = %81, %76
  %87 = phi double* [ %85, %81 ], [ %77, %76 ]
  %88 = getelementptr inbounds double, double* %78, i64 1
  %89 = load double, double* %88, align 8
  %90 = fcmp olt double %89, %58
  br i1 %90, label %110, label %115

91:                                               ; preds = %115, %71
  %92 = phi double* [ %74, %71 ], [ %116, %115 ]
  %93 = load i64, i64* %54, align 8
  br label %94

94:                                               ; preds = %43, %91
  %95 = phi i64 [ %53, %43 ], [ %93, %91 ]
  %96 = phi double* [ %38, %43 ], [ %92, %91 ]
  %97 = bitcast double* %96 to i64*
  %98 = load i64, i64* %97, align 8
  store i64 %95, i64* %97, align 8
  store i64 %98, i64* %54, align 8
  %99 = ptrtoint double* %96 to i64
  %100 = ptrtoint double* %38 to i64
  %101 = sub i64 %99, %100
  %102 = lshr exact i64 %101, 3
  %103 = trunc i64 %102 to i32
  tail call void @_Z12SkTIntroSortIdZ8SkTQSortIdEvPT_S2_EUlRKdS4_E_EviS2_iRKT0_(i32 %44, double* %38, i32 %103, %class.anon* dereferenceable(1) %3)
  %104 = add nsw i32 %103, 1
  %105 = sext i32 %104 to i64
  %106 = getelementptr inbounds double, double* %38, i64 %105
  %107 = sub nsw i32 %39, %104
  %108 = icmp slt i32 %107, 33
  br i1 %108, label %6, label %36

109:                                              ; preds = %33, %6, %41
  ret void

110:                                              ; preds = %86
  %111 = bitcast double* %88 to i64*
  %112 = bitcast double* %87 to i64*
  %113 = load i64, i64* %112, align 8
  store i64 %113, i64* %111, align 8
  store double %89, double* %87, align 8
  %114 = getelementptr inbounds double, double* %87, i64 1
  br label %115

115:                                              ; preds = %110, %86
  %116 = phi double* [ %114, %110 ], [ %87, %86 ]
  %117 = getelementptr inbounds double, double* %78, i64 2
  %118 = icmp ult double* %117, %51
  br i1 %118, label %76, label %91
}

; Function Attrs: nounwind readnone speculatable
declare i32 @llvm.ctlz.i32(i32, i1 immarg) #7

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_Z11SkTHeapSortIdZ8SkTQSortIdEvPT_S2_EUlRKdS4_E_EvS2_mRKT0_(double*, i64, %class.anon* dereferenceable(1)) local_unnamed_addr #0 comdat {
  %4 = lshr i64 %1, 1
  %5 = icmp eq i64 %4, 0
  br i1 %5, label %6, label %11

6:                                                ; preds = %45, %3
  %7 = add i64 %1, -1
  %8 = icmp eq i64 %7, 0
  br i1 %8, label %50, label %9

9:                                                ; preds = %6
  %10 = bitcast double* %0 to i64*
  br label %51

11:                                               ; preds = %3, %45
  %12 = phi i64 [ %13, %45 ], [ %4, %3 ]
  %13 = add nsw i64 %12, -1
  %14 = getelementptr inbounds double, double* %0, i64 %13
  %15 = bitcast double* %14 to i64*
  %16 = load i64, i64* %15, align 8
  %17 = shl i64 %12, 1
  %18 = icmp ugt i64 %17, %1
  br i1 %18, label %45, label %19

19:                                               ; preds = %11
  %20 = bitcast i64 %16 to double
  br label %21

21:                                               ; preds = %41, %19
  %22 = phi i64 [ %17, %19 ], [ %43, %41 ]
  %23 = phi i64 [ %12, %19 ], [ %35, %41 ]
  %24 = icmp ult i64 %22, %1
  br i1 %24, label %25, label %34

25:                                               ; preds = %21
  %26 = add i64 %22, -1
  %27 = getelementptr inbounds double, double* %0, i64 %26
  %28 = getelementptr inbounds double, double* %0, i64 %22
  %29 = load double, double* %27, align 8
  %30 = load double, double* %28, align 8
  %31 = fcmp olt double %29, %30
  %32 = zext i1 %31 to i64
  %33 = or i64 %22, %32
  br label %34

34:                                               ; preds = %25, %21
  %35 = phi i64 [ %22, %21 ], [ %33, %25 ]
  %36 = add i64 %35, -1
  %37 = getelementptr inbounds double, double* %0, i64 %36
  %38 = load double, double* %37, align 8
  %39 = fcmp ogt double %38, %20
  %40 = add i64 %23, -1
  br i1 %39, label %41, label %45

41:                                               ; preds = %34
  %42 = getelementptr inbounds double, double* %0, i64 %40
  store double %38, double* %42, align 8
  %43 = shl i64 %35, 1
  %44 = icmp ugt i64 %43, %1
  br i1 %44, label %45, label %21

45:                                               ; preds = %34, %41, %11
  %46 = phi i64 [ %13, %11 ], [ %40, %34 ], [ %36, %41 ]
  %47 = getelementptr inbounds double, double* %0, i64 %46
  %48 = bitcast double* %47 to i64*
  store i64 %16, i64* %48, align 8
  %49 = icmp eq i64 %13, 0
  br i1 %49, label %6, label %11

50:                                               ; preds = %102, %59, %6
  ret void

51:                                               ; preds = %9, %102
  %52 = phi i64 [ %7, %9 ], [ %107, %102 ]
  %53 = getelementptr inbounds double, double* %0, i64 %52
  %54 = load i64, i64* %10, align 8
  %55 = bitcast double* %53 to i64*
  %56 = load i64, i64* %55, align 8
  store i64 %56, i64* %10, align 8
  store i64 %54, i64* %55, align 8
  %57 = load i64, i64* %10, align 8
  %58 = icmp eq i64 %52, 1
  br i1 %58, label %59, label %66

59:                                               ; preds = %51
  %60 = bitcast double* %0 to i64*
  store i64 %57, i64* %60, align 8
  br label %50

61:                                               ; preds = %79
  %62 = lshr i64 %80, 1
  %63 = icmp eq i64 %62, 0
  br i1 %63, label %102, label %64

64:                                               ; preds = %61
  %65 = bitcast i64 %57 to double
  br label %90

66:                                               ; preds = %51, %79
  %67 = phi i64 [ %88, %79 ], [ 2, %51 ]
  %68 = phi i64 [ %80, %79 ], [ 1, %51 ]
  %69 = icmp ult i64 %67, %52
  br i1 %69, label %70, label %79

70:                                               ; preds = %66
  %71 = add i64 %67, -1
  %72 = getelementptr inbounds double, double* %0, i64 %71
  %73 = getelementptr inbounds double, double* %0, i64 %67
  %74 = load double, double* %72, align 8
  %75 = load double, double* %73, align 8
  %76 = fcmp olt double %74, %75
  %77 = zext i1 %76 to i64
  %78 = or i64 %67, %77
  br label %79

79:                                               ; preds = %70, %66
  %80 = phi i64 [ %67, %66 ], [ %78, %70 ]
  %81 = add i64 %80, -1
  %82 = getelementptr inbounds double, double* %0, i64 %81
  %83 = bitcast double* %82 to i64*
  %84 = load i64, i64* %83, align 8
  %85 = add i64 %68, -1
  %86 = getelementptr inbounds double, double* %0, i64 %85
  %87 = bitcast double* %86 to i64*
  store i64 %84, i64* %87, align 8
  %88 = shl i64 %80, 1
  %89 = icmp ugt i64 %88, %52
  br i1 %89, label %61, label %66

90:                                               ; preds = %97, %64
  %91 = phi i64 [ %62, %64 ], [ %100, %97 ]
  %92 = phi i64 [ %80, %64 ], [ %91, %97 ]
  %93 = add nsw i64 %91, -1
  %94 = getelementptr inbounds double, double* %0, i64 %93
  %95 = load double, double* %94, align 8
  %96 = fcmp olt double %95, %65
  br i1 %96, label %97, label %102

97:                                               ; preds = %90
  %98 = add i64 %92, -1
  %99 = getelementptr inbounds double, double* %0, i64 %98
  store double %95, double* %99, align 8
  %100 = lshr i64 %91, 1
  %101 = icmp eq i64 %100, 0
  br i1 %101, label %102, label %90

102:                                              ; preds = %90, %97, %61
  %103 = phi i64 [ %80, %61 ], [ %92, %90 ], [ %91, %97 ]
  %104 = add i64 %103, -1
  %105 = getelementptr inbounds double, double* %0, i64 %104
  %106 = bitcast double* %105 to i64*
  store i64 %57, i64* %106, align 8
  %107 = add i64 %52, -1
  %108 = icmp eq i64 %107, 0
  br i1 %108, label %50, label %51
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memmove.p0i8.p0i8.i64(i8* nocapture, i8* nocapture readonly, i64, i1 immarg) #1

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { norecurse nounwind readonly ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nofree nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="64" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="64" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { nounwind readnone speculatable }
attributes #8 = { nofree norecurse nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #9 = { nounwind readonly ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #10 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{i8 0, i8 2}
!3 = distinct !{!3, !4}
!4 = !{!"llvm.loop.isvectorized", i32 1}
!5 = distinct !{!5, !6, !4}
!6 = !{!"llvm.loop.unroll.runtime.disable"}
!7 = !{i32 0, i32 33}
