; ModuleID = '../../third_party/blink/renderer/core/css/cssom/css_numeric_value_type.cc'
source_filename = "../../third_party/blink/renderer/core/css/cssom/css_numeric_value_type.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.blink::CSSNumericValueType" = type { %"class.WTF::Vector", i32, i8, i32, [4 x i8] }
%"class.WTF::Vector" = type { %"class.WTF::VectorBuffer.base", [4 x i8] }
%"class.WTF::VectorBuffer.base" = type <{ %"class.WTF::VectorBufferBase", [28 x i8] }>
%"class.WTF::VectorBufferBase" = type { i32*, i32, i32 }
%"class.WTF::StringImpl" = type { i32, i32, %"struct.std::__1::atomic" }
%"struct.std::__1::atomic" = type { %"struct.std::__1::__atomic_base" }
%"struct.std::__1::__atomic_base" = type { %"struct.std::__1::__atomic_base.0" }
%"struct.std::__1::__atomic_base.0" = type { %"struct.std::__1::__cxx_atomic_impl" }
%"struct.std::__1::__cxx_atomic_impl" = type { %"struct.std::__1::__cxx_atomic_base_impl" }
%"struct.std::__1::__cxx_atomic_base_impl" = type { i32 }
%"class.WTF::AtomicString" = type { %"class.WTF::String" }
%"class.WTF::String" = type { %class.scoped_refptr }
%class.scoped_refptr = type { %"class.WTF::StringImpl"* }
%"class.WTF::VectorBuffer" = type <{ %"class.WTF::VectorBufferBase", [28 x i8], [4 x i8] }>
%"class.logging::CheckOpResult" = type { i8* }
%"class.logging::CheckError" = type { %"class.logging::LogMessage"* }
%"class.logging::LogMessage" = type { i32 (...)**, i32, %"class.std::__1::basic_ostringstream", i64, i8*, i32, %"class.base::ScopedClearLastErrorBase" }
%"class.std::__1::basic_ostringstream" = type { %"class.std::__1::basic_ostream.base", %"class.std::__1::basic_stringbuf", %"class.std::__1::basic_ios.base" }
%"class.std::__1::basic_ostream.base" = type { i32 (...)** }
%"class.std::__1::basic_stringbuf" = type <{ %"class.std::__1::basic_streambuf", %"class.std::__1::basic_string", i8*, i32, [4 x i8] }>
%"class.std::__1::basic_streambuf" = type { i32 (...)**, %"class.std::__1::locale", i8*, i8*, i8*, i8*, i8*, i8* }
%"class.std::__1::locale" = type { %"class.std::__1::locale::__imp"* }
%"class.std::__1::locale::__imp" = type opaque
%"class.std::__1::basic_string" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" = type { %union.anon }
%union.anon = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" = type { i8*, i64, i64 }
%"class.std::__1::basic_ios.base" = type <{ %"class.std::__1::ios_base", %"class.std::__1::basic_ostream"*, i32 }>
%"class.std::__1::ios_base" = type { i32 (...)**, i32, i64, i64, i32, i32, i8*, i8*, void (i32, %"class.std::__1::ios_base"*, i32)**, i32*, i64, i64, i64*, i64, i64, i8**, i64, i64 }
%"class.std::__1::basic_ostream" = type { i32 (...)**, %"class.std::__1::basic_ios.base" }
%"class.base::ScopedClearLastErrorBase" = type { i32 }

$_ZN3WTF6VectorIiLj7ENS_18PartitionAllocatorEE4FillIS1_EENSt3__19enable_ifIXntsrT_19kIsGarbageCollectedEvE4typeERKij = comdat any

$_ZN3WTF12VectorBufferIiLj7ENS_18PartitionAllocatorEE16SwapVectorBufferERS2_NS_16VectorBufferBaseIiS1_E11OffsetRangeES6_ = comdat any

$_ZNK3WTF6VectorIiLj7ENS_18PartitionAllocatorEE2atEj = comdat any

$_ZN3WTF6VectorIiLj7ENS_18PartitionAllocatorEE2atEj = comdat any

$_ZN3WTF6VectorIiLj7ENS_18PartitionAllocatorEE16ReallocateBufferEj = comdat any

$_ZN3WTF18PartitionAllocator13QuantizedSizeIiEEmm = comdat any

$_ZN3WTF12VectorBufferIiLj7ENS_18PartitionAllocatorEE22ReallyDeallocateBufferEPi = comdat any

@.str = private unnamed_addr constant [7 x i8] c"length\00", align 1
@.str.1 = private unnamed_addr constant [6 x i8] c"angle\00", align 1
@.str.2 = private unnamed_addr constant [5 x i8] c"time\00", align 1
@.str.3 = private unnamed_addr constant [10 x i8] c"frequency\00", align 1
@.str.4 = private unnamed_addr constant [11 x i8] c"resolution\00", align 1
@.str.5 = private unnamed_addr constant [5 x i8] c"flex\00", align 1
@.str.6 = private unnamed_addr constant [8 x i8] c"percent\00", align 1
@.str.7 = private unnamed_addr constant [1 x i8] zeroinitializer, align 1
@.str.8 = private unnamed_addr constant [11 x i8] c"i < size()\00", align 1
@.str.9 = private unnamed_addr constant [55 x i8] c"../../third_party/blink/renderer/platform/wtf/vector.h\00", align 1
@.str.10 = private unnamed_addr constant [44 x i8] c"count <= MaxElementCountInBackingStore<T>()\00", align 1
@.str.11 = private unnamed_addr constant [78 x i8] c"../../third_party/blink/renderer/platform/wtf/allocator/partition_allocator.h\00", align 1
@__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameIiEEPKcv = private unnamed_addr constant [51 x i8] c"const char *WTF::GetStringWithTypeName() [T = int]\00", align 1

@_ZN5blink19CSSNumericValueTypeC1ENS_17CSSPrimitiveValue8UnitTypeE = hidden unnamed_addr alias void (%"class.blink::CSSNumericValueType"*, i32), void (%"class.blink::CSSNumericValueType"*, i32)* @_ZN5blink19CSSNumericValueTypeC2ENS_17CSSPrimitiveValue8UnitTypeE
@_ZN5blink19CSSNumericValueTypeC1EiNS_17CSSPrimitiveValue8UnitTypeE = hidden unnamed_addr alias void (%"class.blink::CSSNumericValueType"*, i32, i32), void (%"class.blink::CSSNumericValueType"*, i32, i32)* @_ZN5blink19CSSNumericValueTypeC2EiNS_17CSSPrimitiveValue8UnitTypeE

; Function Attrs: nounwind ssp uwtable
define hidden %"class.WTF::StringImpl"* @_ZN5blink19CSSNumericValueType16BaseTypeToStringENS0_8BaseTypeE(i32) local_unnamed_addr #0 align 2 {
  %2 = alloca %"class.WTF::AtomicString", align 8
  switch i32 %0, label %10 [
    i32 0, label %3
    i32 1, label %4
    i32 2, label %5
    i32 3, label %6
    i32 4, label %7
    i32 5, label %8
    i32 6, label %9
  ]

3:                                                ; preds = %1
  call void @_ZN3WTF12AtomicStringC2EPKhm(%"class.WTF::AtomicString"* nonnull %2, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str, i64 0, i64 0), i64 6) #5
  br label %11

4:                                                ; preds = %1
  call void @_ZN3WTF12AtomicStringC2EPKhm(%"class.WTF::AtomicString"* nonnull %2, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.1, i64 0, i64 0), i64 5) #5
  br label %11

5:                                                ; preds = %1
  call void @_ZN3WTF12AtomicStringC2EPKhm(%"class.WTF::AtomicString"* nonnull %2, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.2, i64 0, i64 0), i64 4) #5
  br label %11

6:                                                ; preds = %1
  call void @_ZN3WTF12AtomicStringC2EPKhm(%"class.WTF::AtomicString"* nonnull %2, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.3, i64 0, i64 0), i64 9) #5
  br label %11

7:                                                ; preds = %1
  call void @_ZN3WTF12AtomicStringC2EPKhm(%"class.WTF::AtomicString"* nonnull %2, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.4, i64 0, i64 0), i64 10) #5
  br label %11

8:                                                ; preds = %1
  call void @_ZN3WTF12AtomicStringC2EPKhm(%"class.WTF::AtomicString"* nonnull %2, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.5, i64 0, i64 0), i64 4) #5
  br label %11

9:                                                ; preds = %1
  call void @_ZN3WTF12AtomicStringC2EPKhm(%"class.WTF::AtomicString"* nonnull %2, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.6, i64 0, i64 0), i64 7) #5
  br label %11

10:                                               ; preds = %1
  call void @_ZN3WTF12AtomicStringC2EPKhm(%"class.WTF::AtomicString"* nonnull %2, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.7, i64 0, i64 0), i64 0) #5
  br label %11

11:                                               ; preds = %10, %9, %8, %7, %6, %5, %4, %3
  %12 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %2, i64 0, i32 0, i32 0, i32 0
  %13 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %12, align 8
  ret %"class.WTF::StringImpl"* %13
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink19CSSNumericValueTypeC2ENS_17CSSPrimitiveValue8UnitTypeE(%"class.blink::CSSNumericValueType"*, i32) unnamed_addr #0 align 2 {
  %3 = alloca i32, align 4
  %4 = getelementptr inbounds %"class.blink::CSSNumericValueType", %"class.blink::CSSNumericValueType"* %0, i64 0, i32 0
  %5 = getelementptr inbounds %"class.blink::CSSNumericValueType", %"class.blink::CSSNumericValueType"* %0, i64 0, i32 0, i32 0, i32 1, i64 0
  %6 = bitcast %"class.blink::CSSNumericValueType"* %0 to i8**
  store i8* %5, i8** %6, align 8
  %7 = getelementptr inbounds %"class.blink::CSSNumericValueType", %"class.blink::CSSNumericValueType"* %0, i64 0, i32 0, i32 0, i32 0, i32 1
  store i32 7, i32* %7, align 8
  %8 = getelementptr inbounds %"class.blink::CSSNumericValueType", %"class.blink::CSSNumericValueType"* %0, i64 0, i32 0, i32 0, i32 0, i32 2
  store i32 0, i32* %8, align 4
  %9 = getelementptr inbounds %"class.blink::CSSNumericValueType", %"class.blink::CSSNumericValueType"* %0, i64 0, i32 1
  store i32 6, i32* %9, align 8
  %10 = getelementptr inbounds %"class.blink::CSSNumericValueType", %"class.blink::CSSNumericValueType"* %0, i64 0, i32 2
  store i8 0, i8* %10, align 4
  %11 = getelementptr inbounds %"class.blink::CSSNumericValueType", %"class.blink::CSSNumericValueType"* %0, i64 0, i32 3
  store i32 0, i32* %11, align 8
  %12 = bitcast i32* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %12) #5
  store i32 0, i32* %3, align 4
  call void @_ZN3WTF6VectorIiLj7ENS_18PartitionAllocatorEE4FillIS1_EENSt3__19enable_ifIXntsrT_19kIsGarbageCollectedEvE4typeERKij(%"class.WTF::Vector"* %4, i32* nonnull dereferenceable(4) %3, i32 7)
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %12) #5
  switch i32 %1, label %19 [
    i32 1, label %28
    i32 2, label %18
    i32 30, label %17
    i32 29, label %16
    i32 28, label %16
    i32 27, label %16
    i32 26, label %15
    i32 25, label %15
    i32 22, label %14
    i32 21, label %14
    i32 20, label %14
    i32 19, label %14
    i32 24, label %13
    i32 23, label %13
  ]

13:                                               ; preds = %2, %2
  br label %19

14:                                               ; preds = %2, %2, %2, %2
  br label %19

15:                                               ; preds = %2, %2
  br label %19

16:                                               ; preds = %2, %2, %2
  br label %19

17:                                               ; preds = %2
  br label %19

18:                                               ; preds = %2
  br label %19

19:                                               ; preds = %2, %13, %14, %15, %16, %17, %18
  %20 = phi i32 [ 6, %18 ], [ 5, %17 ], [ 4, %16 ], [ 3, %15 ], [ 1, %14 ], [ 2, %13 ], [ 0, %2 ]
  %21 = call dereferenceable(4) i32* @_ZN3WTF6VectorIiLj7ENS_18PartitionAllocatorEE2atEj(%"class.WTF::Vector"* %4, i32 %20) #5
  %22 = load i32, i32* %21, align 4
  %23 = icmp eq i32 %22, 0
  br i1 %23, label %24, label %27

24:                                               ; preds = %19
  %25 = load i32, i32* %11, align 8
  %26 = add i32 %25, 1
  store i32 %26, i32* %11, align 8
  br label %27

27:                                               ; preds = %19, %24
  store i32 1, i32* %21, align 4
  br label %28

28:                                               ; preds = %2, %27
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN3WTF6VectorIiLj7ENS_18PartitionAllocatorEE4FillIS1_EENSt3__19enable_ifIXntsrT_19kIsGarbageCollectedEvE4typeERKij(%"class.WTF::Vector"*, i32* dereferenceable(4), i32) local_unnamed_addr #0 comdat align 2 {
  %4 = bitcast i32* %1 to i8*
  %5 = bitcast i32* %1 to i8*
  %6 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %0, i64 0, i32 0, i32 0, i32 2
  %7 = load i32, i32* %6, align 4
  %8 = icmp ugt i32 %7, %2
  br i1 %8, label %9, label %10

9:                                                ; preds = %3
  store i32 %2, i32* %6, align 4
  br label %56

10:                                               ; preds = %3
  %11 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %0, i64 0, i32 0, i32 0, i32 1
  %12 = load i32, i32* %11, align 8
  %13 = icmp ult i32 %12, %2
  br i1 %13, label %14, label %54

14:                                               ; preds = %10
  %15 = icmp eq i32 %12, 0
  br i1 %15, label %30, label %16

16:                                               ; preds = %14
  %17 = icmp eq i32 %7, 0
  br i1 %17, label %19, label %18

18:                                               ; preds = %16
  store i32 0, i32* %6, align 4
  br label %19

19:                                               ; preds = %18, %16
  %20 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %0, i64 0, i32 0, i32 0, i32 0
  %21 = load i32*, i32** %20, align 8
  %22 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %0, i64 0, i32 0, i32 1, i64 0
  %23 = ptrtoint i8* %22 to i64
  %24 = bitcast %"class.WTF::Vector"* %0 to i64*
  store atomic i64 %23, i64* %24 monotonic, align 8
  store i32 7, i32* %11, align 8
  %25 = bitcast i8* %22 to i32*
  %26 = icmp eq i32* %21, %25
  br i1 %26, label %30, label %27, !prof !2

27:                                               ; preds = %19
  %28 = bitcast %"class.WTF::Vector"* %0 to %"class.WTF::VectorBuffer"*
  tail call void @_ZN3WTF12VectorBufferIiLj7ENS_18PartitionAllocatorEE22ReallyDeallocateBufferEPi(%"class.WTF::VectorBuffer"* %28, i32* %21) #5
  %29 = load i32, i32* %11, align 8
  br label %30

30:                                               ; preds = %14, %19, %27
  %31 = phi i32 [ 0, %14 ], [ 7, %19 ], [ %29, %27 ]
  %32 = icmp ult i32 %31, %2
  br i1 %32, label %33, label %54, !prof !2

33:                                               ; preds = %30
  %34 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %0, i64 0, i32 0, i32 0, i32 0
  %35 = load i32*, i32** %34, align 8
  %36 = icmp eq i32* %35, null
  br i1 %36, label %37, label %53

37:                                               ; preds = %33
  %38 = icmp ugt i32 %2, 7
  br i1 %38, label %39, label %47

39:                                               ; preds = %37
  %40 = zext i32 %2 to i64
  %41 = tail call i64 @_ZN3WTF18PartitionAllocator13QuantizedSizeIiEEmm(i64 %40) #5
  %42 = tail call i8* @_ZN3WTF18PartitionAllocator15AllocateBackingEmPKc(i64 %41, i8* getelementptr inbounds ([51 x i8], [51 x i8]* @__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameIiEEPKcv, i64 0, i64 0)) #5
  %43 = ptrtoint i8* %42 to i64
  %44 = bitcast %"class.WTF::Vector"* %0 to i64*
  store atomic i64 %43, i64* %44 monotonic, align 8
  %45 = lshr i64 %41, 2
  %46 = trunc i64 %45 to i32
  br label %51

47:                                               ; preds = %37
  %48 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %0, i64 0, i32 0, i32 1, i64 0
  %49 = ptrtoint i8* %48 to i64
  %50 = bitcast %"class.WTF::Vector"* %0 to i64*
  store atomic i64 %49, i64* %50 monotonic, align 8
  br label %51

51:                                               ; preds = %47, %39
  %52 = phi i32 [ 7, %47 ], [ %46, %39 ]
  store i32 %52, i32* %11, align 8
  br label %54

53:                                               ; preds = %33
  tail call void @_ZN3WTF6VectorIiLj7ENS_18PartitionAllocatorEE16ReallocateBufferEj(%"class.WTF::Vector"* %0, i32 %2) #5
  br label %54

54:                                               ; preds = %10, %30, %51, %53
  %55 = load i32, i32* %6, align 4
  br label %56

56:                                               ; preds = %54, %9
  %57 = phi i32 [ %55, %54 ], [ %2, %9 ]
  %58 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %0, i64 0, i32 0, i32 0, i32 0
  %59 = icmp eq i32 %57, 0
  br i1 %59, label %134, label %60

60:                                               ; preds = %56
  %61 = zext i32 %57 to i64
  %62 = load i32*, i32** %58, align 8
  %63 = icmp ult i32 %57, 8
  br i1 %63, label %122, label %64

64:                                               ; preds = %60
  %65 = bitcast i32* %62 to i8*
  %66 = getelementptr i32, i32* %62, i64 %61
  %67 = getelementptr i8, i8* %5, i64 1
  %68 = icmp ugt i8* %67, %65
  %69 = icmp ugt i32* %66, %1
  %70 = and i1 %68, %69
  br i1 %70, label %122, label %71

71:                                               ; preds = %64
  %72 = and i64 %61, 4294967288
  %73 = getelementptr i32, i32* %62, i64 %72
  %74 = sub nsw i64 %61, %72
  %75 = add nsw i64 %72, -8
  %76 = lshr exact i64 %75, 3
  %77 = add nuw nsw i64 %76, 1
  %78 = and i64 %77, 1
  %79 = icmp eq i64 %75, 0
  br i1 %79, label %107, label %80

80:                                               ; preds = %71
  %81 = sub nuw nsw i64 %77, %78
  %82 = load i32, i32* %1, align 4, !alias.scope !3
  %83 = insertelement <4 x i32> undef, i32 %82, i32 0
  %84 = shufflevector <4 x i32> %83, <4 x i32> undef, <4 x i32> zeroinitializer
  %85 = insertelement <4 x i32> undef, i32 %82, i32 0
  %86 = shufflevector <4 x i32> %85, <4 x i32> undef, <4 x i32> zeroinitializer
  %87 = load i32, i32* %1, align 4, !alias.scope !3
  %88 = insertelement <4 x i32> undef, i32 %87, i32 0
  %89 = shufflevector <4 x i32> %88, <4 x i32> undef, <4 x i32> zeroinitializer
  %90 = insertelement <4 x i32> undef, i32 %87, i32 0
  %91 = shufflevector <4 x i32> %90, <4 x i32> undef, <4 x i32> zeroinitializer
  br label %92

92:                                               ; preds = %92, %80
  %93 = phi i64 [ 0, %80 ], [ %104, %92 ]
  %94 = phi i64 [ %81, %80 ], [ %105, %92 ]
  %95 = getelementptr i32, i32* %62, i64 %93
  %96 = bitcast i32* %95 to <4 x i32>*
  store <4 x i32> %84, <4 x i32>* %96, align 4, !alias.scope !6, !noalias !3
  %97 = getelementptr i32, i32* %95, i64 4
  %98 = bitcast i32* %97 to <4 x i32>*
  store <4 x i32> %86, <4 x i32>* %98, align 4, !alias.scope !6, !noalias !3
  %99 = or i64 %93, 8
  %100 = getelementptr i32, i32* %62, i64 %99
  %101 = bitcast i32* %100 to <4 x i32>*
  store <4 x i32> %89, <4 x i32>* %101, align 4, !alias.scope !6, !noalias !3
  %102 = getelementptr i32, i32* %100, i64 4
  %103 = bitcast i32* %102 to <4 x i32>*
  store <4 x i32> %91, <4 x i32>* %103, align 4, !alias.scope !6, !noalias !3
  %104 = add i64 %93, 16
  %105 = add i64 %94, -2
  %106 = icmp eq i64 %105, 0
  br i1 %106, label %107, label %92, !llvm.loop !8

107:                                              ; preds = %92, %71
  %108 = phi i64 [ 0, %71 ], [ %104, %92 ]
  %109 = icmp eq i64 %78, 0
  br i1 %109, label %120, label %110

110:                                              ; preds = %107
  %111 = getelementptr i32, i32* %62, i64 %108
  %112 = load i32, i32* %1, align 4, !alias.scope !3
  %113 = insertelement <4 x i32> undef, i32 %112, i32 0
  %114 = shufflevector <4 x i32> %113, <4 x i32> undef, <4 x i32> zeroinitializer
  %115 = insertelement <4 x i32> undef, i32 %112, i32 0
  %116 = shufflevector <4 x i32> %115, <4 x i32> undef, <4 x i32> zeroinitializer
  %117 = bitcast i32* %111 to <4 x i32>*
  store <4 x i32> %114, <4 x i32>* %117, align 4, !alias.scope !6, !noalias !3
  %118 = getelementptr i32, i32* %111, i64 4
  %119 = bitcast i32* %118 to <4 x i32>*
  store <4 x i32> %116, <4 x i32>* %119, align 4, !alias.scope !6, !noalias !3
  br label %120

120:                                              ; preds = %107, %110
  %121 = icmp eq i64 %72, %61
  br i1 %121, label %132, label %122

122:                                              ; preds = %120, %64, %60
  %123 = phi i32* [ %62, %64 ], [ %62, %60 ], [ %73, %120 ]
  %124 = phi i64 [ %61, %64 ], [ %61, %60 ], [ %74, %120 ]
  br label %125

125:                                              ; preds = %122, %125
  %126 = phi i32* [ %129, %125 ], [ %123, %122 ]
  %127 = phi i64 [ %130, %125 ], [ %124, %122 ]
  %128 = load i32, i32* %1, align 4
  store i32 %128, i32* %126, align 4
  %129 = getelementptr inbounds i32, i32* %126, i64 1
  %130 = add nsw i64 %127, -1
  %131 = icmp sgt i64 %130, 0
  br i1 %131, label %125, label %132, !llvm.loop !10

132:                                              ; preds = %125, %120
  %133 = load i32, i32* %6, align 4
  br label %134

134:                                              ; preds = %132, %56
  %135 = phi i32 [ %133, %132 ], [ 0, %56 ]
  %136 = load i32*, i32** %58, align 8
  %137 = zext i32 %2 to i64
  %138 = getelementptr inbounds i32, i32* %136, i64 %137
  %139 = icmp eq i32 %135, %2
  br i1 %139, label %254, label %140

140:                                              ; preds = %134
  %141 = zext i32 %135 to i64
  %142 = getelementptr inbounds i32, i32* %136, i64 %141
  %143 = shl nuw nsw i64 %137, 2
  %144 = add nsw i64 %143, -4
  %145 = shl nuw nsw i64 %141, 2
  %146 = sub nsw i64 %144, %145
  %147 = lshr exact i64 %146, 2
  %148 = add nuw nsw i64 %147, 1
  %149 = icmp ult i64 %148, 8
  br i1 %149, label %214, label %150

150:                                              ; preds = %140
  %151 = bitcast i32* %142 to i8*
  %152 = shl nuw nsw i64 %137, 2
  %153 = add nsw i64 %152, -4
  %154 = shl nuw nsw i64 %141, 2
  %155 = sub nsw i64 %153, %154
  %156 = lshr exact i64 %155, 2
  %157 = add nuw nsw i64 %156, %141
  %158 = add nuw i64 %157, 1
  %159 = getelementptr i32, i32* %136, i64 %158
  %160 = getelementptr i8, i8* %4, i64 1
  %161 = icmp ugt i8* %160, %151
  %162 = icmp ugt i32* %159, %1
  %163 = and i1 %161, %162
  br i1 %163, label %214, label %164

164:                                              ; preds = %150
  %165 = and i64 %148, 9223372036854775800
  %166 = getelementptr i32, i32* %142, i64 %165
  %167 = add nsw i64 %165, -8
  %168 = lshr exact i64 %167, 3
  %169 = add nuw nsw i64 %168, 1
  %170 = and i64 %169, 1
  %171 = icmp eq i64 %167, 0
  br i1 %171, label %199, label %172

172:                                              ; preds = %164
  %173 = sub nuw nsw i64 %169, %170
  %174 = load i32, i32* %1, align 4, !alias.scope !11
  %175 = insertelement <4 x i32> undef, i32 %174, i32 0
  %176 = shufflevector <4 x i32> %175, <4 x i32> undef, <4 x i32> zeroinitializer
  %177 = insertelement <4 x i32> undef, i32 %174, i32 0
  %178 = shufflevector <4 x i32> %177, <4 x i32> undef, <4 x i32> zeroinitializer
  %179 = load i32, i32* %1, align 4, !alias.scope !11
  %180 = insertelement <4 x i32> undef, i32 %179, i32 0
  %181 = shufflevector <4 x i32> %180, <4 x i32> undef, <4 x i32> zeroinitializer
  %182 = insertelement <4 x i32> undef, i32 %179, i32 0
  %183 = shufflevector <4 x i32> %182, <4 x i32> undef, <4 x i32> zeroinitializer
  br label %184

184:                                              ; preds = %184, %172
  %185 = phi i64 [ 0, %172 ], [ %196, %184 ]
  %186 = phi i64 [ %173, %172 ], [ %197, %184 ]
  %187 = getelementptr i32, i32* %142, i64 %185
  %188 = bitcast i32* %187 to <4 x i32>*
  store <4 x i32> %176, <4 x i32>* %188, align 4, !alias.scope !14, !noalias !11
  %189 = getelementptr i32, i32* %187, i64 4
  %190 = bitcast i32* %189 to <4 x i32>*
  store <4 x i32> %178, <4 x i32>* %190, align 4, !alias.scope !14, !noalias !11
  %191 = or i64 %185, 8
  %192 = getelementptr i32, i32* %142, i64 %191
  %193 = bitcast i32* %192 to <4 x i32>*
  store <4 x i32> %181, <4 x i32>* %193, align 4, !alias.scope !14, !noalias !11
  %194 = getelementptr i32, i32* %192, i64 4
  %195 = bitcast i32* %194 to <4 x i32>*
  store <4 x i32> %183, <4 x i32>* %195, align 4, !alias.scope !14, !noalias !11
  %196 = add i64 %185, 16
  %197 = add i64 %186, -2
  %198 = icmp eq i64 %197, 0
  br i1 %198, label %199, label %184, !llvm.loop !16

199:                                              ; preds = %184, %164
  %200 = phi i64 [ 0, %164 ], [ %196, %184 ]
  %201 = icmp eq i64 %170, 0
  br i1 %201, label %212, label %202

202:                                              ; preds = %199
  %203 = getelementptr i32, i32* %142, i64 %200
  %204 = load i32, i32* %1, align 4, !alias.scope !11
  %205 = insertelement <4 x i32> undef, i32 %204, i32 0
  %206 = shufflevector <4 x i32> %205, <4 x i32> undef, <4 x i32> zeroinitializer
  %207 = insertelement <4 x i32> undef, i32 %204, i32 0
  %208 = shufflevector <4 x i32> %207, <4 x i32> undef, <4 x i32> zeroinitializer
  %209 = bitcast i32* %203 to <4 x i32>*
  store <4 x i32> %206, <4 x i32>* %209, align 4, !alias.scope !14, !noalias !11
  %210 = getelementptr i32, i32* %203, i64 4
  %211 = bitcast i32* %210 to <4 x i32>*
  store <4 x i32> %208, <4 x i32>* %211, align 4, !alias.scope !14, !noalias !11
  br label %212

212:                                              ; preds = %199, %202
  %213 = icmp eq i64 %148, %165
  br i1 %213, label %254, label %214

214:                                              ; preds = %212, %150, %140
  %215 = phi i32* [ %142, %150 ], [ %142, %140 ], [ %166, %212 ]
  %216 = ptrtoint i32* %215 to i64
  %217 = add nsw i64 %137, -1
  %218 = getelementptr i32, i32* %136, i64 %217
  %219 = ptrtoint i32* %218 to i64
  %220 = sub i64 %219, %216
  %221 = lshr i64 %220, 2
  %222 = add nuw nsw i64 %221, 1
  %223 = and i64 %222, 7
  %224 = icmp eq i64 %223, 0
  br i1 %224, label %232, label %225

225:                                              ; preds = %214, %225
  %226 = phi i32* [ %229, %225 ], [ %215, %214 ]
  %227 = phi i64 [ %230, %225 ], [ %223, %214 ]
  %228 = load i32, i32* %1, align 4
  store i32 %228, i32* %226, align 4
  %229 = getelementptr inbounds i32, i32* %226, i64 1
  %230 = add i64 %227, -1
  %231 = icmp eq i64 %230, 0
  br i1 %231, label %232, label %225, !llvm.loop !17

232:                                              ; preds = %225, %214
  %233 = phi i32* [ %215, %214 ], [ %229, %225 ]
  %234 = icmp ult i64 %220, 28
  br i1 %234, label %254, label %235

235:                                              ; preds = %232, %235
  %236 = phi i32* [ %252, %235 ], [ %233, %232 ]
  %237 = load i32, i32* %1, align 4
  store i32 %237, i32* %236, align 4
  %238 = getelementptr inbounds i32, i32* %236, i64 1
  %239 = load i32, i32* %1, align 4
  store i32 %239, i32* %238, align 4
  %240 = getelementptr inbounds i32, i32* %236, i64 2
  %241 = load i32, i32* %1, align 4
  store i32 %241, i32* %240, align 4
  %242 = getelementptr inbounds i32, i32* %236, i64 3
  %243 = load i32, i32* %1, align 4
  store i32 %243, i32* %242, align 4
  %244 = getelementptr inbounds i32, i32* %236, i64 4
  %245 = load i32, i32* %1, align 4
  store i32 %245, i32* %244, align 4
  %246 = getelementptr inbounds i32, i32* %236, i64 5
  %247 = load i32, i32* %1, align 4
  store i32 %247, i32* %246, align 4
  %248 = getelementptr inbounds i32, i32* %236, i64 6
  %249 = load i32, i32* %1, align 4
  store i32 %249, i32* %248, align 4
  %250 = getelementptr inbounds i32, i32* %236, i64 7
  %251 = load i32, i32* %1, align 4
  store i32 %251, i32* %250, align 4
  %252 = getelementptr inbounds i32, i32* %236, i64 8
  %253 = icmp eq i32* %252, %138
  br i1 %253, label %254, label %235, !llvm.loop !19

254:                                              ; preds = %232, %235, %212, %134
  store i32 %2, i32* %6, align 4
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink19CSSNumericValueTypeC2EiNS_17CSSPrimitiveValue8UnitTypeE(%"class.blink::CSSNumericValueType"*, i32, i32) unnamed_addr #0 align 2 {
  %4 = alloca i32, align 4
  %5 = getelementptr inbounds %"class.blink::CSSNumericValueType", %"class.blink::CSSNumericValueType"* %0, i64 0, i32 0
  %6 = getelementptr inbounds %"class.blink::CSSNumericValueType", %"class.blink::CSSNumericValueType"* %0, i64 0, i32 0, i32 0, i32 1, i64 0
  %7 = bitcast %"class.blink::CSSNumericValueType"* %0 to i8**
  store i8* %6, i8** %7, align 8
  %8 = getelementptr inbounds %"class.blink::CSSNumericValueType", %"class.blink::CSSNumericValueType"* %0, i64 0, i32 0, i32 0, i32 0, i32 1
  store i32 7, i32* %8, align 8
  %9 = getelementptr inbounds %"class.blink::CSSNumericValueType", %"class.blink::CSSNumericValueType"* %0, i64 0, i32 0, i32 0, i32 0, i32 2
  store i32 0, i32* %9, align 4
  %10 = getelementptr inbounds %"class.blink::CSSNumericValueType", %"class.blink::CSSNumericValueType"* %0, i64 0, i32 1
  store i32 6, i32* %10, align 8
  %11 = getelementptr inbounds %"class.blink::CSSNumericValueType", %"class.blink::CSSNumericValueType"* %0, i64 0, i32 2
  store i8 0, i8* %11, align 4
  %12 = getelementptr inbounds %"class.blink::CSSNumericValueType", %"class.blink::CSSNumericValueType"* %0, i64 0, i32 3
  store i32 0, i32* %12, align 8
  %13 = bitcast i32* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %13) #5
  store i32 0, i32* %4, align 4
  call void @_ZN3WTF6VectorIiLj7ENS_18PartitionAllocatorEE4FillIS1_EENSt3__19enable_ifIXntsrT_19kIsGarbageCollectedEvE4typeERKij(%"class.WTF::Vector"* %5, i32* nonnull dereferenceable(4) %4, i32 7)
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %13) #5
  switch i32 %2, label %20 [
    i32 1, label %36
    i32 2, label %19
    i32 30, label %18
    i32 29, label %17
    i32 28, label %17
    i32 27, label %17
    i32 26, label %16
    i32 25, label %16
    i32 22, label %15
    i32 21, label %15
    i32 20, label %15
    i32 19, label %15
    i32 24, label %14
    i32 23, label %14
  ]

14:                                               ; preds = %3, %3
  br label %20

15:                                               ; preds = %3, %3, %3, %3
  br label %20

16:                                               ; preds = %3, %3
  br label %20

17:                                               ; preds = %3, %3, %3
  br label %20

18:                                               ; preds = %3
  br label %20

19:                                               ; preds = %3
  br label %20

20:                                               ; preds = %3, %14, %15, %16, %17, %18, %19
  %21 = phi i32 [ 6, %19 ], [ 5, %18 ], [ 4, %17 ], [ 3, %16 ], [ 1, %15 ], [ 2, %14 ], [ 0, %3 ]
  %22 = call dereferenceable(4) i32* @_ZN3WTF6VectorIiLj7ENS_18PartitionAllocatorEE2atEj(%"class.WTF::Vector"* %5, i32 %21) #5
  %23 = load i32, i32* %22, align 4
  %24 = icmp eq i32 %23, 0
  %25 = icmp ne i32 %1, 0
  %26 = and i1 %25, %24
  br i1 %26, label %31, label %27

27:                                               ; preds = %20
  %28 = icmp ne i32 %23, 0
  %29 = icmp eq i32 %1, 0
  %30 = and i1 %29, %28
  br i1 %30, label %31, label %35

31:                                               ; preds = %27, %20
  %32 = phi i32 [ 1, %20 ], [ -1, %27 ]
  %33 = load i32, i32* %12, align 8
  %34 = add i32 %33, %32
  store i32 %34, i32* %12, align 8
  br label %35

35:                                               ; preds = %31, %27
  store i32 %1, i32* %22, align 4
  br label %36

36:                                               ; preds = %3, %35
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink19CSSNumericValueType15NegateExponentsES0_(%"class.blink::CSSNumericValueType"* noalias sret, %"class.blink::CSSNumericValueType"*) local_unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.blink::CSSNumericValueType", %"class.blink::CSSNumericValueType"* %1, i64 0, i32 0, i32 0, i32 0, i32 0
  %4 = load i32*, i32** %3, align 8
  %5 = getelementptr inbounds %"class.blink::CSSNumericValueType", %"class.blink::CSSNumericValueType"* %1, i64 0, i32 0, i32 0, i32 0, i32 2
  %6 = load i32, i32* %5, align 4
  %7 = zext i32 %6 to i64
  %8 = getelementptr inbounds i32, i32* %4, i64 %7
  %9 = icmp eq i32 %6, 0
  br i1 %9, label %77, label %10

10:                                               ; preds = %2
  %11 = shl nuw nsw i64 %7, 2
  %12 = add nsw i64 %11, -4
  %13 = lshr exact i64 %12, 2
  %14 = add nuw nsw i64 %13, 1
  %15 = icmp ult i64 %14, 8
  br i1 %15, label %69, label %16

16:                                               ; preds = %10
  %17 = and i64 %14, 9223372036854775800
  %18 = getelementptr i32, i32* %4, i64 %17
  %19 = add nsw i64 %17, -8
  %20 = lshr exact i64 %19, 3
  %21 = add nuw nsw i64 %20, 1
  %22 = and i64 %21, 1
  %23 = icmp eq i64 %19, 0
  br i1 %23, label %53, label %24

24:                                               ; preds = %16
  %25 = sub nuw nsw i64 %21, %22
  br label %26

26:                                               ; preds = %26, %24
  %27 = phi i64 [ 0, %24 ], [ %50, %26 ]
  %28 = phi i64 [ %25, %24 ], [ %51, %26 ]
  %29 = getelementptr i32, i32* %4, i64 %27
  %30 = bitcast i32* %29 to <4 x i32>*
  %31 = load <4 x i32>, <4 x i32>* %30, align 4
  %32 = getelementptr i32, i32* %29, i64 4
  %33 = bitcast i32* %32 to <4 x i32>*
  %34 = load <4 x i32>, <4 x i32>* %33, align 4
  %35 = sub nsw <4 x i32> zeroinitializer, %31
  %36 = sub nsw <4 x i32> zeroinitializer, %34
  %37 = bitcast i32* %29 to <4 x i32>*
  store <4 x i32> %35, <4 x i32>* %37, align 4
  %38 = bitcast i32* %32 to <4 x i32>*
  store <4 x i32> %36, <4 x i32>* %38, align 4
  %39 = or i64 %27, 8
  %40 = getelementptr i32, i32* %4, i64 %39
  %41 = bitcast i32* %40 to <4 x i32>*
  %42 = load <4 x i32>, <4 x i32>* %41, align 4
  %43 = getelementptr i32, i32* %40, i64 4
  %44 = bitcast i32* %43 to <4 x i32>*
  %45 = load <4 x i32>, <4 x i32>* %44, align 4
  %46 = sub nsw <4 x i32> zeroinitializer, %42
  %47 = sub nsw <4 x i32> zeroinitializer, %45
  %48 = bitcast i32* %40 to <4 x i32>*
  store <4 x i32> %46, <4 x i32>* %48, align 4
  %49 = bitcast i32* %43 to <4 x i32>*
  store <4 x i32> %47, <4 x i32>* %49, align 4
  %50 = add i64 %27, 16
  %51 = add i64 %28, -2
  %52 = icmp eq i64 %51, 0
  br i1 %52, label %53, label %26, !llvm.loop !20

53:                                               ; preds = %26, %16
  %54 = phi i64 [ 0, %16 ], [ %50, %26 ]
  %55 = icmp eq i64 %22, 0
  br i1 %55, label %67, label %56

56:                                               ; preds = %53
  %57 = getelementptr i32, i32* %4, i64 %54
  %58 = bitcast i32* %57 to <4 x i32>*
  %59 = load <4 x i32>, <4 x i32>* %58, align 4
  %60 = getelementptr i32, i32* %57, i64 4
  %61 = bitcast i32* %60 to <4 x i32>*
  %62 = load <4 x i32>, <4 x i32>* %61, align 4
  %63 = sub nsw <4 x i32> zeroinitializer, %59
  %64 = sub nsw <4 x i32> zeroinitializer, %62
  %65 = bitcast i32* %57 to <4 x i32>*
  store <4 x i32> %63, <4 x i32>* %65, align 4
  %66 = bitcast i32* %60 to <4 x i32>*
  store <4 x i32> %64, <4 x i32>* %66, align 4
  br label %67

67:                                               ; preds = %53, %56
  %68 = icmp eq i64 %14, %17
  br i1 %68, label %77, label %69

69:                                               ; preds = %67, %10
  %70 = phi i32* [ %4, %10 ], [ %18, %67 ]
  br label %71

71:                                               ; preds = %69, %71
  %72 = phi i32* [ %75, %71 ], [ %70, %69 ]
  %73 = load i32, i32* %72, align 4
  %74 = sub nsw i32 0, %73
  store i32 %74, i32* %72, align 4
  %75 = getelementptr inbounds i32, i32* %72, i64 1
  %76 = icmp eq i32* %75, %8
  br i1 %76, label %77, label %71, !llvm.loop !21

77:                                               ; preds = %71, %67, %2
  %78 = bitcast %"class.blink::CSSNumericValueType"* %0 to %"class.WTF::VectorBuffer"*
  %79 = getelementptr inbounds %"class.blink::CSSNumericValueType", %"class.blink::CSSNumericValueType"* %0, i64 0, i32 0, i32 0, i32 1, i64 0
  %80 = bitcast %"class.blink::CSSNumericValueType"* %0 to i8**
  store i8* %79, i8** %80, align 8
  %81 = getelementptr inbounds %"class.blink::CSSNumericValueType", %"class.blink::CSSNumericValueType"* %0, i64 0, i32 0, i32 0, i32 0, i32 1
  store i32 7, i32* %81, align 8
  %82 = getelementptr inbounds %"class.blink::CSSNumericValueType", %"class.blink::CSSNumericValueType"* %0, i64 0, i32 0, i32 0, i32 0, i32 2
  store i32 0, i32* %82, align 4
  %83 = bitcast %"class.blink::CSSNumericValueType"* %1 to %"class.WTF::VectorBuffer"*
  tail call void @_ZN3WTF12VectorBufferIiLj7ENS_18PartitionAllocatorEE16SwapVectorBufferERS2_NS_16VectorBufferBaseIiS1_E11OffsetRangeES6_(%"class.WTF::VectorBuffer"* %78, %"class.WTF::VectorBuffer"* dereferenceable(48) %83, i64 0, i64 0) #5
  %84 = getelementptr inbounds %"class.blink::CSSNumericValueType", %"class.blink::CSSNumericValueType"* %0, i64 0, i32 1
  %85 = getelementptr inbounds %"class.blink::CSSNumericValueType", %"class.blink::CSSNumericValueType"* %1, i64 0, i32 1
  %86 = bitcast i32* %84 to i8*
  %87 = bitcast i32* %85 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %86, i8* align 8 %87, i64 12, i1 false) #5
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink19CSSNumericValueType3AddES0_S0_Rb(%"class.blink::CSSNumericValueType"* noalias sret, %"class.blink::CSSNumericValueType"*, %"class.blink::CSSNumericValueType"*, i8* nocapture dereferenceable(1)) local_unnamed_addr #0 align 2 {
  %5 = getelementptr inbounds %"class.blink::CSSNumericValueType", %"class.blink::CSSNumericValueType"* %1, i64 0, i32 2
  %6 = load i8, i8* %5, align 4, !range !23
  %7 = icmp eq i8 %6, 0
  %8 = getelementptr inbounds %"class.blink::CSSNumericValueType", %"class.blink::CSSNumericValueType"* %2, i64 0, i32 2
  %9 = load i8, i8* %8, align 4, !range !23
  %10 = icmp ne i8 %9, 0
  br i1 %7, label %26, label %11

11:                                               ; preds = %4
  %12 = getelementptr inbounds %"class.blink::CSSNumericValueType", %"class.blink::CSSNumericValueType"* %1, i64 0, i32 1
  %13 = load i32, i32* %12, align 8
  br i1 %10, label %14, label %25

14:                                               ; preds = %11
  %15 = getelementptr inbounds %"class.blink::CSSNumericValueType", %"class.blink::CSSNumericValueType"* %2, i64 0, i32 1
  %16 = load i32, i32* %15, align 8
  %17 = icmp eq i32 %13, %16
  br i1 %17, label %25, label %18

18:                                               ; preds = %14
  store i8 1, i8* %3, align 1
  %19 = bitcast %"class.blink::CSSNumericValueType"* %0 to %"class.WTF::VectorBuffer"*
  %20 = getelementptr inbounds %"class.blink::CSSNumericValueType", %"class.blink::CSSNumericValueType"* %0, i64 0, i32 0, i32 0, i32 1, i64 0
  %21 = bitcast %"class.blink::CSSNumericValueType"* %0 to i8**
  store i8* %20, i8** %21, align 8
  %22 = getelementptr inbounds %"class.blink::CSSNumericValueType", %"class.blink::CSSNumericValueType"* %0, i64 0, i32 0, i32 0, i32 0, i32 1
  store i32 7, i32* %22, align 8
  %23 = getelementptr inbounds %"class.blink::CSSNumericValueType", %"class.blink::CSSNumericValueType"* %0, i64 0, i32 0, i32 0, i32 0, i32 2
  store i32 0, i32* %23, align 4
  %24 = bitcast %"class.blink::CSSNumericValueType"* %1 to %"class.WTF::VectorBuffer"*
  tail call void @_ZN3WTF12VectorBufferIiLj7ENS_18PartitionAllocatorEE16SwapVectorBufferERS2_NS_16VectorBufferBaseIiS1_E11OffsetRangeES6_(%"class.WTF::VectorBuffer"* %19, %"class.WTF::VectorBuffer"* dereferenceable(48) %24, i64 0, i64 0) #5
  br label %68

25:                                               ; preds = %11, %14
  tail call void @_ZN5blink19CSSNumericValueType16ApplyPercentHintENS0_8BaseTypeE(%"class.blink::CSSNumericValueType"* %2, i32 %13)
  br label %30

26:                                               ; preds = %4
  br i1 %10, label %27, label %30

27:                                               ; preds = %26
  %28 = getelementptr inbounds %"class.blink::CSSNumericValueType", %"class.blink::CSSNumericValueType"* %2, i64 0, i32 1
  %29 = load i32, i32* %28, align 8
  tail call void @_ZN5blink19CSSNumericValueType16ApplyPercentHintENS0_8BaseTypeE(%"class.blink::CSSNumericValueType"* %1, i32 %29)
  br label %30

30:                                               ; preds = %26, %27, %25
  %31 = getelementptr inbounds %"class.blink::CSSNumericValueType", %"class.blink::CSSNumericValueType"* %1, i64 0, i32 0
  %32 = getelementptr inbounds %"class.blink::CSSNumericValueType", %"class.blink::CSSNumericValueType"* %2, i64 0, i32 0
  br label %33

33:                                               ; preds = %49, %30
  %34 = phi i32 [ 0, %30 ], [ %50, %49 ]
  %35 = tail call dereferenceable(4) i32* @_ZN3WTF6VectorIiLj7ENS_18PartitionAllocatorEE2atEj(%"class.WTF::Vector"* %31, i32 %34) #5
  %36 = load i32, i32* %35, align 4
  %37 = tail call dereferenceable(4) i32* @_ZN3WTF6VectorIiLj7ENS_18PartitionAllocatorEE2atEj(%"class.WTF::Vector"* %32, i32 %34) #5
  %38 = load i32, i32* %37, align 4
  %39 = icmp eq i32 %36, %38
  br i1 %39, label %49, label %40

40:                                               ; preds = %33
  %41 = icmp eq i32 %34, 6
  br i1 %41, label %43, label %42

42:                                               ; preds = %40
  tail call void @_ZN5blink19CSSNumericValueType16ApplyPercentHintENS0_8BaseTypeE(%"class.blink::CSSNumericValueType"* %1, i32 %34)
  tail call void @_ZN5blink19CSSNumericValueType16ApplyPercentHintENS0_8BaseTypeE(%"class.blink::CSSNumericValueType"* %2, i32 %34)
  br label %43

43:                                               ; preds = %40, %42
  %44 = tail call dereferenceable(4) i32* @_ZN3WTF6VectorIiLj7ENS_18PartitionAllocatorEE2atEj(%"class.WTF::Vector"* %31, i32 %34) #5
  %45 = load i32, i32* %44, align 4
  %46 = tail call dereferenceable(4) i32* @_ZN3WTF6VectorIiLj7ENS_18PartitionAllocatorEE2atEj(%"class.WTF::Vector"* %32, i32 %34) #5
  %47 = load i32, i32* %46, align 4
  %48 = icmp eq i32 %45, %47
  br i1 %48, label %49, label %52

49:                                               ; preds = %43, %33
  %50 = add nuw nsw i32 %34, 1
  %51 = icmp eq i32 %50, 7
  br i1 %51, label %60, label %33

52:                                               ; preds = %43
  store i8 1, i8* %3, align 1
  %53 = bitcast %"class.blink::CSSNumericValueType"* %0 to %"class.WTF::VectorBuffer"*
  %54 = getelementptr inbounds %"class.blink::CSSNumericValueType", %"class.blink::CSSNumericValueType"* %0, i64 0, i32 0, i32 0, i32 1, i64 0
  %55 = bitcast %"class.blink::CSSNumericValueType"* %0 to i8**
  store i8* %54, i8** %55, align 8
  %56 = getelementptr inbounds %"class.blink::CSSNumericValueType", %"class.blink::CSSNumericValueType"* %0, i64 0, i32 0, i32 0, i32 0, i32 1
  store i32 7, i32* %56, align 8
  %57 = getelementptr inbounds %"class.blink::CSSNumericValueType", %"class.blink::CSSNumericValueType"* %0, i64 0, i32 0, i32 0, i32 0, i32 2
  store i32 0, i32* %57, align 4
  %58 = bitcast %"class.blink::CSSNumericValueType"* %1 to %"class.WTF::VectorBuffer"*
  tail call void @_ZN3WTF12VectorBufferIiLj7ENS_18PartitionAllocatorEE16SwapVectorBufferERS2_NS_16VectorBufferBaseIiS1_E11OffsetRangeES6_(%"class.WTF::VectorBuffer"* %53, %"class.WTF::VectorBuffer"* dereferenceable(48) %58, i64 0, i64 0) #5
  %59 = getelementptr inbounds %"class.blink::CSSNumericValueType", %"class.blink::CSSNumericValueType"* %1, i64 0, i32 1
  br label %68

60:                                               ; preds = %49
  store i8 0, i8* %3, align 1
  %61 = bitcast %"class.blink::CSSNumericValueType"* %0 to %"class.WTF::VectorBuffer"*
  %62 = getelementptr inbounds %"class.blink::CSSNumericValueType", %"class.blink::CSSNumericValueType"* %0, i64 0, i32 0, i32 0, i32 1, i64 0
  %63 = bitcast %"class.blink::CSSNumericValueType"* %0 to i8**
  store i8* %62, i8** %63, align 8
  %64 = getelementptr inbounds %"class.blink::CSSNumericValueType", %"class.blink::CSSNumericValueType"* %0, i64 0, i32 0, i32 0, i32 0, i32 1
  store i32 7, i32* %64, align 8
  %65 = getelementptr inbounds %"class.blink::CSSNumericValueType", %"class.blink::CSSNumericValueType"* %0, i64 0, i32 0, i32 0, i32 0, i32 2
  store i32 0, i32* %65, align 4
  %66 = bitcast %"class.blink::CSSNumericValueType"* %1 to %"class.WTF::VectorBuffer"*
  tail call void @_ZN3WTF12VectorBufferIiLj7ENS_18PartitionAllocatorEE16SwapVectorBufferERS2_NS_16VectorBufferBaseIiS1_E11OffsetRangeES6_(%"class.WTF::VectorBuffer"* %61, %"class.WTF::VectorBuffer"* dereferenceable(48) %66, i64 0, i64 0) #5
  %67 = getelementptr inbounds %"class.blink::CSSNumericValueType", %"class.blink::CSSNumericValueType"* %1, i64 0, i32 1
  br label %68

68:                                               ; preds = %52, %60, %18
  %69 = phi i32* [ %59, %52 ], [ %67, %60 ], [ %12, %18 ]
  %70 = getelementptr inbounds %"class.blink::CSSNumericValueType", %"class.blink::CSSNumericValueType"* %0, i64 0, i32 1
  %71 = bitcast i32* %70 to i8*
  %72 = bitcast i32* %69 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %71, i8* align 8 %72, i64 12, i1 false) #5
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink19CSSNumericValueType16ApplyPercentHintENS0_8BaseTypeE(%"class.blink::CSSNumericValueType"*, i32) local_unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.blink::CSSNumericValueType", %"class.blink::CSSNumericValueType"* %0, i64 0, i32 0
  %4 = tail call dereferenceable(4) i32* @_ZNK3WTF6VectorIiLj7ENS_18PartitionAllocatorEE2atEj(%"class.WTF::Vector"* %3, i32 %1) #5
  %5 = load i32, i32* %4, align 4
  %6 = tail call dereferenceable(4) i32* @_ZNK3WTF6VectorIiLj7ENS_18PartitionAllocatorEE2atEj(%"class.WTF::Vector"* %3, i32 6) #5
  %7 = load i32, i32* %6, align 4
  %8 = add nsw i32 %7, %5
  %9 = tail call dereferenceable(4) i32* @_ZN3WTF6VectorIiLj7ENS_18PartitionAllocatorEE2atEj(%"class.WTF::Vector"* %3, i32 %1) #5
  %10 = load i32, i32* %9, align 4
  %11 = icmp eq i32 %10, 0
  %12 = icmp ne i32 %8, 0
  %13 = and i1 %12, %11
  br i1 %13, label %18, label %14

14:                                               ; preds = %2
  %15 = icmp ne i32 %10, 0
  %16 = icmp eq i32 %8, 0
  %17 = and i1 %16, %15
  br i1 %17, label %18, label %23

18:                                               ; preds = %14, %2
  %19 = phi i32 [ 1, %2 ], [ -1, %14 ]
  %20 = getelementptr inbounds %"class.blink::CSSNumericValueType", %"class.blink::CSSNumericValueType"* %0, i64 0, i32 3
  %21 = load i32, i32* %20, align 8
  %22 = add i32 %21, %19
  store i32 %22, i32* %20, align 8
  br label %23

23:                                               ; preds = %18, %14
  store i32 %8, i32* %9, align 4
  %24 = tail call dereferenceable(4) i32* @_ZN3WTF6VectorIiLj7ENS_18PartitionAllocatorEE2atEj(%"class.WTF::Vector"* %3, i32 6) #5
  %25 = load i32, i32* %24, align 4
  %26 = icmp eq i32 %25, 0
  br i1 %26, label %31, label %27

27:                                               ; preds = %23
  %28 = getelementptr inbounds %"class.blink::CSSNumericValueType", %"class.blink::CSSNumericValueType"* %0, i64 0, i32 3
  %29 = load i32, i32* %28, align 8
  %30 = add i32 %29, -1
  store i32 %30, i32* %28, align 8
  br label %31

31:                                               ; preds = %23, %27
  store i32 0, i32* %24, align 4
  %32 = getelementptr inbounds %"class.blink::CSSNumericValueType", %"class.blink::CSSNumericValueType"* %0, i64 0, i32 1
  store i32 %1, i32* %32, align 8
  %33 = getelementptr inbounds %"class.blink::CSSNumericValueType", %"class.blink::CSSNumericValueType"* %0, i64 0, i32 2
  store i8 1, i8* %33, align 4
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink19CSSNumericValueType8MultiplyES0_S0_Rb(%"class.blink::CSSNumericValueType"* noalias sret, %"class.blink::CSSNumericValueType"*, %"class.blink::CSSNumericValueType"*, i8* nocapture dereferenceable(1)) local_unnamed_addr #0 align 2 {
  %5 = getelementptr inbounds %"class.blink::CSSNumericValueType", %"class.blink::CSSNumericValueType"* %1, i64 0, i32 2
  %6 = load i8, i8* %5, align 4, !range !23
  %7 = icmp eq i8 %6, 0
  %8 = getelementptr inbounds %"class.blink::CSSNumericValueType", %"class.blink::CSSNumericValueType"* %2, i64 0, i32 2
  %9 = load i8, i8* %8, align 4, !range !23
  %10 = icmp ne i8 %9, 0
  br i1 %7, label %26, label %11

11:                                               ; preds = %4
  %12 = getelementptr inbounds %"class.blink::CSSNumericValueType", %"class.blink::CSSNumericValueType"* %1, i64 0, i32 1
  %13 = load i32, i32* %12, align 8
  br i1 %10, label %14, label %25

14:                                               ; preds = %11
  %15 = getelementptr inbounds %"class.blink::CSSNumericValueType", %"class.blink::CSSNumericValueType"* %2, i64 0, i32 1
  %16 = load i32, i32* %15, align 8
  %17 = icmp eq i32 %13, %16
  br i1 %17, label %25, label %18

18:                                               ; preds = %14
  store i8 1, i8* %3, align 1
  %19 = bitcast %"class.blink::CSSNumericValueType"* %0 to %"class.WTF::VectorBuffer"*
  %20 = getelementptr inbounds %"class.blink::CSSNumericValueType", %"class.blink::CSSNumericValueType"* %0, i64 0, i32 0, i32 0, i32 1, i64 0
  %21 = bitcast %"class.blink::CSSNumericValueType"* %0 to i8**
  store i8* %20, i8** %21, align 8
  %22 = getelementptr inbounds %"class.blink::CSSNumericValueType", %"class.blink::CSSNumericValueType"* %0, i64 0, i32 0, i32 0, i32 0, i32 1
  store i32 7, i32* %22, align 8
  %23 = getelementptr inbounds %"class.blink::CSSNumericValueType", %"class.blink::CSSNumericValueType"* %0, i64 0, i32 0, i32 0, i32 0, i32 2
  store i32 0, i32* %23, align 4
  %24 = bitcast %"class.blink::CSSNumericValueType"* %1 to %"class.WTF::VectorBuffer"*
  tail call void @_ZN3WTF12VectorBufferIiLj7ENS_18PartitionAllocatorEE16SwapVectorBufferERS2_NS_16VectorBufferBaseIiS1_E11OffsetRangeES6_(%"class.WTF::VectorBuffer"* %19, %"class.WTF::VectorBuffer"* dereferenceable(48) %24, i64 0, i64 0) #5
  br label %65

25:                                               ; preds = %11, %14
  tail call void @_ZN5blink19CSSNumericValueType16ApplyPercentHintENS0_8BaseTypeE(%"class.blink::CSSNumericValueType"* %2, i32 %13)
  br label %30

26:                                               ; preds = %4
  br i1 %10, label %27, label %30

27:                                               ; preds = %26
  %28 = getelementptr inbounds %"class.blink::CSSNumericValueType", %"class.blink::CSSNumericValueType"* %2, i64 0, i32 1
  %29 = load i32, i32* %28, align 8
  tail call void @_ZN5blink19CSSNumericValueType16ApplyPercentHintENS0_8BaseTypeE(%"class.blink::CSSNumericValueType"* %1, i32 %29)
  br label %30

30:                                               ; preds = %26, %27, %25
  %31 = getelementptr inbounds %"class.blink::CSSNumericValueType", %"class.blink::CSSNumericValueType"* %1, i64 0, i32 0
  %32 = getelementptr inbounds %"class.blink::CSSNumericValueType", %"class.blink::CSSNumericValueType"* %2, i64 0, i32 0
  %33 = getelementptr inbounds %"class.blink::CSSNumericValueType", %"class.blink::CSSNumericValueType"* %1, i64 0, i32 3
  br label %42

34:                                               ; preds = %62
  store i8 0, i8* %3, align 1
  %35 = bitcast %"class.blink::CSSNumericValueType"* %0 to %"class.WTF::VectorBuffer"*
  %36 = getelementptr inbounds %"class.blink::CSSNumericValueType", %"class.blink::CSSNumericValueType"* %0, i64 0, i32 0, i32 0, i32 1, i64 0
  %37 = bitcast %"class.blink::CSSNumericValueType"* %0 to i8**
  store i8* %36, i8** %37, align 8
  %38 = getelementptr inbounds %"class.blink::CSSNumericValueType", %"class.blink::CSSNumericValueType"* %0, i64 0, i32 0, i32 0, i32 0, i32 1
  store i32 7, i32* %38, align 8
  %39 = getelementptr inbounds %"class.blink::CSSNumericValueType", %"class.blink::CSSNumericValueType"* %0, i64 0, i32 0, i32 0, i32 0, i32 2
  store i32 0, i32* %39, align 4
  %40 = bitcast %"class.blink::CSSNumericValueType"* %1 to %"class.WTF::VectorBuffer"*
  tail call void @_ZN3WTF12VectorBufferIiLj7ENS_18PartitionAllocatorEE16SwapVectorBufferERS2_NS_16VectorBufferBaseIiS1_E11OffsetRangeES6_(%"class.WTF::VectorBuffer"* %35, %"class.WTF::VectorBuffer"* dereferenceable(48) %40, i64 0, i64 0) #5
  %41 = getelementptr inbounds %"class.blink::CSSNumericValueType", %"class.blink::CSSNumericValueType"* %1, i64 0, i32 1
  br label %65

42:                                               ; preds = %62, %30
  %43 = phi i32 [ 0, %30 ], [ %63, %62 ]
  %44 = tail call dereferenceable(4) i32* @_ZNK3WTF6VectorIiLj7ENS_18PartitionAllocatorEE2atEj(%"class.WTF::Vector"* %31, i32 %43) #5
  %45 = load i32, i32* %44, align 4
  %46 = tail call dereferenceable(4) i32* @_ZNK3WTF6VectorIiLj7ENS_18PartitionAllocatorEE2atEj(%"class.WTF::Vector"* %32, i32 %43) #5
  %47 = load i32, i32* %46, align 4
  %48 = add nsw i32 %47, %45
  %49 = tail call dereferenceable(4) i32* @_ZN3WTF6VectorIiLj7ENS_18PartitionAllocatorEE2atEj(%"class.WTF::Vector"* %31, i32 %43) #5
  %50 = load i32, i32* %49, align 4
  %51 = icmp eq i32 %50, 0
  %52 = icmp ne i32 %48, 0
  %53 = and i1 %52, %51
  br i1 %53, label %58, label %54

54:                                               ; preds = %42
  %55 = icmp ne i32 %50, 0
  %56 = icmp eq i32 %48, 0
  %57 = and i1 %56, %55
  br i1 %57, label %58, label %62

58:                                               ; preds = %54, %42
  %59 = phi i32 [ 1, %42 ], [ -1, %54 ]
  %60 = load i32, i32* %33, align 8
  %61 = add i32 %60, %59
  store i32 %61, i32* %33, align 8
  br label %62

62:                                               ; preds = %58, %54
  store i32 %48, i32* %49, align 4
  %63 = add nuw nsw i32 %43, 1
  %64 = icmp eq i32 %63, 7
  br i1 %64, label %34, label %42

65:                                               ; preds = %34, %18
  %66 = phi i32* [ %41, %34 ], [ %12, %18 ]
  %67 = getelementptr inbounds %"class.blink::CSSNumericValueType", %"class.blink::CSSNumericValueType"* %0, i64 0, i32 1
  %68 = bitcast i32* %67 to i8*
  %69 = bitcast i32* %66 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %68, i8* align 8 %69, i64 12, i1 false) #5
  ret void
}

declare void @_ZN3WTF12AtomicStringC2EPKhm(%"class.WTF::AtomicString"*, i8*, i64) unnamed_addr #2

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #1

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN3WTF12VectorBufferIiLj7ENS_18PartitionAllocatorEE16SwapVectorBufferERS2_NS_16VectorBufferBaseIiS1_E11OffsetRangeES6_(%"class.WTF::VectorBuffer"*, %"class.WTF::VectorBuffer"* dereferenceable(48), i64, i64) local_unnamed_addr #0 comdat align 2 {
  %5 = trunc i64 %3 to i32
  %6 = lshr i64 %3, 32
  %7 = trunc i64 %6 to i32
  %8 = getelementptr inbounds %"class.WTF::VectorBuffer", %"class.WTF::VectorBuffer"* %0, i64 0, i32 0, i32 0
  %9 = load i32*, i32** %8, align 8
  %10 = getelementptr inbounds %"class.WTF::VectorBuffer", %"class.WTF::VectorBuffer"* %0, i64 0, i32 1, i64 0
  %11 = bitcast i8* %10 to i32*
  %12 = icmp eq i32* %9, %11
  %13 = ptrtoint i32* %9 to i64
  br i1 %12, label %32, label %14

14:                                               ; preds = %4
  %15 = getelementptr inbounds %"class.WTF::VectorBuffer", %"class.WTF::VectorBuffer"* %1, i64 0, i32 0, i32 0
  %16 = load i32*, i32** %15, align 8
  %17 = getelementptr inbounds %"class.WTF::VectorBuffer", %"class.WTF::VectorBuffer"* %1, i64 0, i32 1, i64 0
  %18 = bitcast i8* %17 to i32*
  %19 = icmp eq i32* %16, %18
  br i1 %19, label %42, label %20

20:                                               ; preds = %14
  %21 = ptrtoint i32* %16 to i64
  %22 = bitcast %"class.WTF::VectorBuffer"* %1 to i64*
  %23 = bitcast %"class.WTF::VectorBuffer"* %0 to i64*
  store atomic i64 %13, i64* %22 monotonic, align 8
  store atomic i64 %21, i64* %23 monotonic, align 8
  %24 = getelementptr inbounds %"class.WTF::VectorBuffer", %"class.WTF::VectorBuffer"* %0, i64 0, i32 0, i32 1
  %25 = getelementptr inbounds %"class.WTF::VectorBuffer", %"class.WTF::VectorBuffer"* %1, i64 0, i32 0, i32 1
  %26 = load i32, i32* %24, align 4
  %27 = load i32, i32* %25, align 4
  store i32 %27, i32* %24, align 4
  store i32 %26, i32* %25, align 4
  %28 = getelementptr inbounds %"class.WTF::VectorBuffer", %"class.WTF::VectorBuffer"* %0, i64 0, i32 0, i32 2
  %29 = getelementptr inbounds %"class.WTF::VectorBuffer", %"class.WTF::VectorBuffer"* %1, i64 0, i32 0, i32 2
  %30 = load i32, i32* %28, align 4
  %31 = load i32, i32* %29, align 4
  store i32 %31, i32* %28, align 4
  store i32 %30, i32* %29, align 4
  br label %274

32:                                               ; preds = %4
  %33 = lshr i64 %2, 32
  %34 = trunc i64 %33 to i32
  %35 = trunc i64 %2 to i32
  %36 = getelementptr inbounds %"class.WTF::VectorBuffer", %"class.WTF::VectorBuffer"* %0, i64 0, i32 0, i32 2
  %37 = load i32, i32* %36, align 4
  %38 = getelementptr inbounds %"class.WTF::VectorBuffer", %"class.WTF::VectorBuffer"* %1, i64 0, i32 1, i64 0
  %39 = bitcast i8* %38 to i32*
  %40 = getelementptr inbounds %"class.WTF::VectorBuffer", %"class.WTF::VectorBuffer"* %1, i64 0, i32 0, i32 0
  %41 = load i32*, i32** %40, align 8
  br label %42

42:                                               ; preds = %14, %32
  %43 = phi i32* [ %18, %14 ], [ %39, %32 ]
  %44 = phi i32* [ %16, %14 ], [ %41, %32 ]
  %45 = phi i32 [ 0, %14 ], [ %34, %32 ]
  %46 = phi i32 [ 0, %14 ], [ %35, %32 ]
  %47 = phi i32 [ 0, %14 ], [ %37, %32 ]
  %48 = phi i32* [ null, %14 ], [ %9, %32 ]
  %49 = phi i32* [ null, %14 ], [ %39, %32 ]
  %50 = getelementptr inbounds %"class.WTF::VectorBuffer", %"class.WTF::VectorBuffer"* %1, i64 0, i32 1, i64 0
  %51 = icmp eq i32* %44, %43
  br i1 %51, label %52, label %55

52:                                               ; preds = %42
  %53 = getelementptr inbounds %"class.WTF::VectorBuffer", %"class.WTF::VectorBuffer"* %1, i64 0, i32 0, i32 2
  %54 = load i32, i32* %53, align 4
  br label %55

55:                                               ; preds = %42, %52
  %56 = phi i32 [ %7, %52 ], [ 0, %42 ]
  %57 = phi i32 [ %5, %52 ], [ 0, %42 ]
  %58 = phi i32 [ %54, %52 ], [ 0, %42 ]
  %59 = phi i32* [ %43, %52 ], [ null, %42 ]
  %60 = phi i32* [ %11, %52 ], [ null, %42 ]
  %61 = getelementptr inbounds %"class.WTF::VectorBuffer", %"class.WTF::VectorBuffer"* %0, i64 0, i32 0, i32 1
  %62 = getelementptr inbounds %"class.WTF::VectorBuffer", %"class.WTF::VectorBuffer"* %1, i64 0, i32 0, i32 1
  %63 = load i32, i32* %61, align 4
  %64 = load i32, i32* %62, align 4
  store i32 %64, i32* %61, align 4
  store i32 %63, i32* %62, align 4
  %65 = icmp eq i32* %48, null
  %66 = icmp ne i32* %59, null
  %67 = or i1 %65, %66
  br i1 %67, label %68, label %70

68:                                               ; preds = %55
  %69 = and i1 %65, %66
  br i1 %69, label %70, label %78

70:                                               ; preds = %68, %55
  %71 = phi %"class.WTF::VectorBuffer"* [ %1, %55 ], [ %0, %68 ]
  %72 = phi %"class.WTF::VectorBuffer"* [ %0, %55 ], [ %1, %68 ]
  %73 = phi i8* [ %50, %55 ], [ %10, %68 ]
  %74 = bitcast %"class.WTF::VectorBuffer"* %71 to i64*
  %75 = load i64, i64* %74, align 8
  %76 = bitcast %"class.WTF::VectorBuffer"* %72 to i64*
  store atomic i64 %75, i64* %76 monotonic, align 8
  %77 = ptrtoint i8* %73 to i64
  store atomic i64 %77, i64* %74 monotonic, align 8
  br label %78

78:                                               ; preds = %70, %68
  %79 = getelementptr inbounds %"class.WTF::VectorBuffer", %"class.WTF::VectorBuffer"* %0, i64 0, i32 0, i32 2
  %80 = getelementptr inbounds %"class.WTF::VectorBuffer", %"class.WTF::VectorBuffer"* %1, i64 0, i32 0, i32 2
  %81 = load i32, i32* %79, align 4
  %82 = load i32, i32* %80, align 4
  store i32 %82, i32* %79, align 4
  store i32 %81, i32* %80, align 4
  %83 = icmp ne i32* %48, null
  %84 = icmp ult i32 %47, 7
  %85 = icmp eq i32 %46, %45
  %86 = icmp eq i32 %57, %56
  br label %87

87:                                               ; preds = %78, %272
  %88 = phi i32 [ 0, %78 ], [ %119, %272 ]
  %89 = icmp ult i32 %88, %47
  %90 = and i1 %83, %89
  %91 = and i1 %84, %90
  %92 = select i1 %91, i32 %47, i32 7
  br i1 %85, label %102, label %93

93:                                               ; preds = %87
  %94 = icmp ult i32 %88, %46
  %95 = icmp ult i32 %46, %92
  %96 = and i1 %94, %95
  %97 = select i1 %96, i32 %46, i32 %92
  %98 = icmp ult i32 %88, %45
  br i1 %98, label %99, label %102

99:                                               ; preds = %93
  %100 = icmp ult i32 %45, %97
  %101 = select i1 %100, i32 %45, i32 %97
  br label %102

102:                                              ; preds = %87, %99, %93
  %103 = phi i32 [ %101, %99 ], [ %97, %93 ], [ %92, %87 ]
  %104 = icmp ult i32 %88, %58
  %105 = and i1 %66, %104
  %106 = icmp ult i32 %58, %103
  %107 = and i1 %105, %106
  %108 = select i1 %107, i32 %58, i32 %103
  br i1 %86, label %118, label %109

109:                                              ; preds = %102
  %110 = icmp ult i32 %88, %57
  %111 = icmp ult i32 %57, %108
  %112 = and i1 %110, %111
  %113 = select i1 %112, i32 %57, i32 %108
  %114 = icmp ult i32 %88, %56
  br i1 %114, label %115, label %118

115:                                              ; preds = %109
  %116 = icmp ult i32 %56, %113
  %117 = select i1 %116, i32 %56, i32 %113
  br label %118

118:                                              ; preds = %102, %115, %109
  %119 = phi i32 [ %117, %115 ], [ %113, %109 ], [ %108, %102 ]
  br i1 %90, label %120, label %125

120:                                              ; preds = %118
  %121 = icmp ult i32 %88, %46
  %122 = or i1 %85, %121
  %123 = icmp uge i32 %88, %45
  %124 = or i1 %123, %122
  br label %125

125:                                              ; preds = %120, %118
  %126 = phi i1 [ false, %118 ], [ %124, %120 ]
  br i1 %105, label %127, label %239

127:                                              ; preds = %125
  %128 = icmp ult i32 %88, %57
  %129 = or i1 %86, %128
  %130 = xor i1 %129, true
  %131 = icmp ult i32 %88, %56
  %132 = and i1 %131, %130
  %133 = xor i1 %126, true
  %134 = or i1 %132, %133
  %135 = xor i1 %131, true
  %136 = or i1 %129, %135
  br i1 %134, label %239, label %137

137:                                              ; preds = %127
  %138 = zext i32 %88 to i64
  %139 = zext i32 %119 to i64
  %140 = getelementptr inbounds i32, i32* %48, i64 %139
  %141 = bitcast i32* %140 to i8*
  %142 = icmp eq i32 %88, %119
  br i1 %142, label %272, label %143

143:                                              ; preds = %137
  %144 = getelementptr inbounds i32, i32* %48, i64 %138
  %145 = bitcast i32* %144 to i8*
  %146 = getelementptr inbounds i32, i32* %59, i64 %138
  %147 = bitcast i32* %146 to i8*
  %148 = sub nsw i64 %139, %138
  %149 = shl nsw i64 %148, 2
  %150 = icmp ult i64 %149, 32
  br i1 %150, label %228, label %151

151:                                              ; preds = %143
  %152 = getelementptr i32, i32* %59, i64 %139
  %153 = icmp ult i32* %144, %152
  %154 = icmp ult i32* %146, %140
  %155 = and i1 %153, %154
  br i1 %155, label %228, label %156

156:                                              ; preds = %151
  %157 = and i64 %149, -32
  %158 = getelementptr i8, i8* %147, i64 %157
  %159 = getelementptr i8, i8* %145, i64 %157
  %160 = add nsw i64 %157, -32
  %161 = lshr exact i64 %160, 5
  %162 = add nuw nsw i64 %161, 1
  %163 = and i64 %162, 1
  %164 = icmp eq i64 %160, 0
  br i1 %164, label %206, label %165

165:                                              ; preds = %156
  %166 = sub nuw nsw i64 %162, %163
  br label %167

167:                                              ; preds = %167, %165
  %168 = phi i64 [ 0, %165 ], [ %203, %167 ]
  %169 = phi i64 [ %166, %165 ], [ %204, %167 ]
  %170 = getelementptr i8, i8* %147, i64 %168
  %171 = getelementptr i8, i8* %145, i64 %168
  %172 = bitcast i8* %171 to <16 x i8>*
  %173 = load <16 x i8>, <16 x i8>* %172, align 1, !alias.scope !24, !noalias !27
  %174 = getelementptr i8, i8* %171, i64 16
  %175 = bitcast i8* %174 to <16 x i8>*
  %176 = load <16 x i8>, <16 x i8>* %175, align 1, !alias.scope !24, !noalias !27
  %177 = bitcast i8* %170 to <16 x i8>*
  %178 = load <16 x i8>, <16 x i8>* %177, align 1, !alias.scope !27
  %179 = getelementptr i8, i8* %170, i64 16
  %180 = bitcast i8* %179 to <16 x i8>*
  %181 = load <16 x i8>, <16 x i8>* %180, align 1, !alias.scope !27
  %182 = bitcast i8* %171 to <16 x i8>*
  store <16 x i8> %178, <16 x i8>* %182, align 1, !alias.scope !24, !noalias !27
  %183 = bitcast i8* %174 to <16 x i8>*
  store <16 x i8> %181, <16 x i8>* %183, align 1, !alias.scope !24, !noalias !27
  %184 = bitcast i8* %170 to <16 x i8>*
  store <16 x i8> %173, <16 x i8>* %184, align 1, !alias.scope !27
  %185 = bitcast i8* %179 to <16 x i8>*
  store <16 x i8> %176, <16 x i8>* %185, align 1, !alias.scope !27
  %186 = or i64 %168, 32
  %187 = getelementptr i8, i8* %147, i64 %186
  %188 = getelementptr i8, i8* %145, i64 %186
  %189 = bitcast i8* %188 to <16 x i8>*
  %190 = load <16 x i8>, <16 x i8>* %189, align 1, !alias.scope !24, !noalias !27
  %191 = getelementptr i8, i8* %188, i64 16
  %192 = bitcast i8* %191 to <16 x i8>*
  %193 = load <16 x i8>, <16 x i8>* %192, align 1, !alias.scope !24, !noalias !27
  %194 = bitcast i8* %187 to <16 x i8>*
  %195 = load <16 x i8>, <16 x i8>* %194, align 1, !alias.scope !27
  %196 = getelementptr i8, i8* %187, i64 16
  %197 = bitcast i8* %196 to <16 x i8>*
  %198 = load <16 x i8>, <16 x i8>* %197, align 1, !alias.scope !27
  %199 = bitcast i8* %188 to <16 x i8>*
  store <16 x i8> %195, <16 x i8>* %199, align 1, !alias.scope !24, !noalias !27
  %200 = bitcast i8* %191 to <16 x i8>*
  store <16 x i8> %198, <16 x i8>* %200, align 1, !alias.scope !24, !noalias !27
  %201 = bitcast i8* %187 to <16 x i8>*
  store <16 x i8> %190, <16 x i8>* %201, align 1, !alias.scope !27
  %202 = bitcast i8* %196 to <16 x i8>*
  store <16 x i8> %193, <16 x i8>* %202, align 1, !alias.scope !27
  %203 = add i64 %168, 64
  %204 = add i64 %169, -2
  %205 = icmp eq i64 %204, 0
  br i1 %205, label %206, label %167, !llvm.loop !29

206:                                              ; preds = %167, %156
  %207 = phi i64 [ 0, %156 ], [ %203, %167 ]
  %208 = icmp eq i64 %163, 0
  br i1 %208, label %226, label %209

209:                                              ; preds = %206
  %210 = getelementptr i8, i8* %147, i64 %207
  %211 = getelementptr i8, i8* %145, i64 %207
  %212 = bitcast i8* %211 to <16 x i8>*
  %213 = load <16 x i8>, <16 x i8>* %212, align 1, !alias.scope !24, !noalias !27
  %214 = getelementptr i8, i8* %211, i64 16
  %215 = bitcast i8* %214 to <16 x i8>*
  %216 = load <16 x i8>, <16 x i8>* %215, align 1, !alias.scope !24, !noalias !27
  %217 = bitcast i8* %210 to <16 x i8>*
  %218 = load <16 x i8>, <16 x i8>* %217, align 1, !alias.scope !27
  %219 = getelementptr i8, i8* %210, i64 16
  %220 = bitcast i8* %219 to <16 x i8>*
  %221 = load <16 x i8>, <16 x i8>* %220, align 1, !alias.scope !27
  %222 = bitcast i8* %211 to <16 x i8>*
  store <16 x i8> %218, <16 x i8>* %222, align 1, !alias.scope !24, !noalias !27
  %223 = bitcast i8* %214 to <16 x i8>*
  store <16 x i8> %221, <16 x i8>* %223, align 1, !alias.scope !24, !noalias !27
  %224 = bitcast i8* %210 to <16 x i8>*
  store <16 x i8> %213, <16 x i8>* %224, align 1, !alias.scope !27
  %225 = bitcast i8* %219 to <16 x i8>*
  store <16 x i8> %216, <16 x i8>* %225, align 1, !alias.scope !27
  br label %226

226:                                              ; preds = %206, %209
  %227 = icmp eq i64 %149, %157
  br i1 %227, label %272, label %228

228:                                              ; preds = %226, %151, %143
  %229 = phi i8* [ %147, %151 ], [ %147, %143 ], [ %158, %226 ]
  %230 = phi i8* [ %145, %151 ], [ %145, %143 ], [ %159, %226 ]
  br label %231

231:                                              ; preds = %228, %231
  %232 = phi i8* [ %237, %231 ], [ %229, %228 ]
  %233 = phi i8* [ %236, %231 ], [ %230, %228 ]
  %234 = load i8, i8* %233, align 1
  %235 = load i8, i8* %232, align 1
  store i8 %235, i8* %233, align 1
  store i8 %234, i8* %232, align 1
  %236 = getelementptr inbounds i8, i8* %233, i64 1
  %237 = getelementptr inbounds i8, i8* %232, i64 1
  %238 = icmp eq i8* %236, %141
  br i1 %238, label %272, label %231, !llvm.loop !30

239:                                              ; preds = %127, %125
  %240 = phi i1 [ false, %125 ], [ %136, %127 ]
  br i1 %126, label %241, label %256

241:                                              ; preds = %239
  %242 = zext i32 %88 to i64
  %243 = getelementptr inbounds i32, i32* %48, i64 %242
  %244 = getelementptr inbounds i32, i32* %49, i64 %242
  %245 = icmp ne i32* %244, null
  %246 = icmp ne i32* %243, null
  %247 = and i1 %246, %245
  br i1 %247, label %248, label %272, !prof !2

248:                                              ; preds = %241
  %249 = zext i32 %119 to i64
  %250 = getelementptr inbounds i32, i32* %48, i64 %249
  %251 = bitcast i32* %243 to i8*
  %252 = ptrtoint i32* %250 to i64
  %253 = ptrtoint i32* %243 to i64
  %254 = sub i64 %252, %253
  %255 = bitcast i32* %244 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %255, i8* nonnull align 4 %251, i64 %254, i1 false) #5
  br label %272

256:                                              ; preds = %239
  br i1 %240, label %257, label %272

257:                                              ; preds = %256
  %258 = zext i32 %88 to i64
  %259 = getelementptr inbounds i32, i32* %59, i64 %258
  %260 = getelementptr inbounds i32, i32* %60, i64 %258
  %261 = icmp ne i32* %260, null
  %262 = icmp ne i32* %259, null
  %263 = and i1 %262, %261
  br i1 %263, label %264, label %272, !prof !2

264:                                              ; preds = %257
  %265 = zext i32 %119 to i64
  %266 = getelementptr inbounds i32, i32* %59, i64 %265
  %267 = bitcast i32* %259 to i8*
  %268 = ptrtoint i32* %266 to i64
  %269 = ptrtoint i32* %259 to i64
  %270 = sub i64 %268, %269
  %271 = bitcast i32* %260 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %271, i8* nonnull align 4 %267, i64 %270, i1 false) #5
  br label %272

272:                                              ; preds = %231, %226, %264, %257, %248, %241, %137, %256
  %273 = icmp ult i32 %119, 7
  br i1 %273, label %87, label %274

274:                                              ; preds = %272, %20
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden dereferenceable(4) i32* @_ZNK3WTF6VectorIiLj7ENS_18PartitionAllocatorEE2atEj(%"class.WTF::Vector"*, i32) local_unnamed_addr #0 comdat align 2 {
  %3 = alloca %"class.logging::CheckOpResult", align 8
  %4 = alloca %"class.logging::CheckOpResult", align 8
  %5 = alloca %"class.logging::CheckError", align 8
  %6 = bitcast %"class.logging::CheckOpResult"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %6) #5
  %7 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %4, i64 0, i32 0
  store i8* inttoptr (i64 -6148914691236517206 to i8*), i8** %7, align 8
  %8 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %0, i64 0, i32 0, i32 0, i32 2
  %9 = load i32, i32* %8, align 4
  %10 = bitcast %"class.logging::CheckOpResult"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %10)
  %11 = icmp ugt i32 %9, %1
  br i1 %11, label %12, label %13

12:                                               ; preds = %2
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %10)
  store i8* null, i8** %7, align 8
  br label %22

13:                                               ; preds = %2
  %14 = tail call i8* @_ZN7logging15CheckOpValueStrEj(i32 %1) #5
  %15 = tail call i8* @_ZN7logging15CheckOpValueStrEj(i32 %9) #5
  call void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"* nonnull %3, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.8, i64 0, i64 0), i8* %14, i8* %15) #5
  %16 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %3, i64 0, i32 0
  %17 = load i8*, i8** %16, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %10)
  store i8* %17, i8** %7, align 8
  %18 = icmp eq i8* %17, null
  br i1 %18, label %22, label %19

19:                                               ; preds = %13
  %20 = bitcast %"class.logging::CheckError"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %20) #5
  call void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* nonnull sret %5, i8* getelementptr inbounds ([55 x i8], [55 x i8]* @.str.9, i64 0, i64 0), i32 1176, %"class.logging::CheckOpResult"* nonnull %4) #5
  %21 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %5) #5
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %5) #5
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %20) #5
  br label %22

22:                                               ; preds = %12, %13, %19
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %6) #5
  %23 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %0, i64 0, i32 0, i32 0, i32 0
  %24 = load i32*, i32** %23, align 8
  %25 = zext i32 %1 to i64
  %26 = getelementptr inbounds i32, i32* %24, i64 %25
  ret i32* %26
}

declare void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* sret, i8*, i32, %"class.logging::CheckOpResult"*) local_unnamed_addr #2

declare dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"*) local_unnamed_addr #2

; Function Attrs: nounwind
declare void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"*) unnamed_addr #3

declare i8* @_ZN7logging15CheckOpValueStrEj(i32) local_unnamed_addr #2

declare void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"*, i8*, i8*, i8*) unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden dereferenceable(4) i32* @_ZN3WTF6VectorIiLj7ENS_18PartitionAllocatorEE2atEj(%"class.WTF::Vector"*, i32) local_unnamed_addr #0 comdat align 2 {
  %3 = alloca %"class.logging::CheckOpResult", align 8
  %4 = alloca %"class.logging::CheckOpResult", align 8
  %5 = alloca %"class.logging::CheckError", align 8
  %6 = bitcast %"class.logging::CheckOpResult"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %6) #5
  %7 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %4, i64 0, i32 0
  store i8* inttoptr (i64 -6148914691236517206 to i8*), i8** %7, align 8
  %8 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %0, i64 0, i32 0, i32 0, i32 2
  %9 = load i32, i32* %8, align 4
  %10 = bitcast %"class.logging::CheckOpResult"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %10)
  %11 = icmp ugt i32 %9, %1
  br i1 %11, label %12, label %13

12:                                               ; preds = %2
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %10)
  store i8* null, i8** %7, align 8
  br label %22

13:                                               ; preds = %2
  %14 = tail call i8* @_ZN7logging15CheckOpValueStrEj(i32 %1) #5
  %15 = tail call i8* @_ZN7logging15CheckOpValueStrEj(i32 %9) #5
  call void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"* nonnull %3, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.8, i64 0, i64 0), i8* %14, i8* %15) #5
  %16 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %3, i64 0, i32 0
  %17 = load i8*, i8** %16, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %10)
  store i8* %17, i8** %7, align 8
  %18 = icmp eq i8* %17, null
  br i1 %18, label %22, label %19

19:                                               ; preds = %13
  %20 = bitcast %"class.logging::CheckError"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %20) #5
  call void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* nonnull sret %5, i8* getelementptr inbounds ([55 x i8], [55 x i8]* @.str.9, i64 0, i64 0), i32 1172, %"class.logging::CheckOpResult"* nonnull %4) #5
  %21 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %5) #5
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %5) #5
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %20) #5
  br label %22

22:                                               ; preds = %12, %13, %19
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %6) #5
  %23 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %0, i64 0, i32 0, i32 0, i32 0
  %24 = load i32*, i32** %23, align 8
  %25 = zext i32 %1 to i64
  %26 = getelementptr inbounds i32, i32* %24, i64 %25
  ret i32* %26
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN3WTF6VectorIiLj7ENS_18PartitionAllocatorEE16ReallocateBufferEj(%"class.WTF::Vector"*, i32) local_unnamed_addr #0 comdat align 2 {
  %3 = icmp ult i32 %1, 8
  br i1 %3, label %4, label %29

4:                                                ; preds = %2
  %5 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %0, i64 0, i32 0, i32 0, i32 0
  %6 = load i32*, i32** %5, align 8
  %7 = icmp eq i32* %6, null
  %8 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %0, i64 0, i32 0, i32 1, i64 0
  %9 = bitcast i8* %8 to i32*
  %10 = icmp eq i32* %6, %9
  %11 = or i1 %10, %7
  br i1 %11, label %12, label %16

12:                                               ; preds = %4
  %13 = ptrtoint i8* %8 to i64
  %14 = bitcast %"class.WTF::Vector"* %0 to i64*
  store atomic i64 %13, i64* %14 monotonic, align 8
  %15 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %0, i64 0, i32 0, i32 0, i32 1
  store i32 7, i32* %15, align 8
  br label %58

16:                                               ; preds = %4
  %17 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %0, i64 0, i32 0, i32 0, i32 2
  %18 = load i32, i32* %17, align 4
  %19 = bitcast %"class.WTF::Vector"* %0 to %"class.WTF::VectorBuffer"*
  %20 = ptrtoint i8* %8 to i64
  %21 = bitcast %"class.WTF::Vector"* %0 to i64*
  store atomic i64 %20, i64* %21 monotonic, align 8
  %22 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %0, i64 0, i32 0, i32 0, i32 1
  store i32 7, i32* %22, align 8
  %23 = icmp eq i8* %8, null
  br i1 %23, label %28, label %24, !prof !31

24:                                               ; preds = %16
  %25 = zext i32 %18 to i64
  %26 = bitcast i32* %6 to i8*
  %27 = shl nuw nsw i64 %25, 2
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %8, i8* nonnull align 4 %26, i64 %27, i1 false) #5
  br label %28

28:                                               ; preds = %24, %16
  tail call void @_ZN3WTF12VectorBufferIiLj7ENS_18PartitionAllocatorEE22ReallyDeallocateBufferEPi(%"class.WTF::VectorBuffer"* %19, i32* nonnull %6) #5
  br label %58

29:                                               ; preds = %2
  %30 = zext i32 %1 to i64
  %31 = tail call i64 @_ZN3WTF18PartitionAllocator13QuantizedSizeIiEEmm(i64 %30) #5
  %32 = tail call i8* @_ZN3WTF18PartitionAllocator15AllocateBackingEmPKc(i64 %31, i8* getelementptr inbounds ([51 x i8], [51 x i8]* @__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameIiEEPKcv, i64 0, i64 0)) #5
  %33 = lshr i64 %31, 2
  %34 = ptrtoint i8* %32 to i64
  %35 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %0, i64 0, i32 0, i32 0, i32 0
  %36 = load i32*, i32** %35, align 8
  %37 = icmp ne i8* %32, null
  %38 = icmp ne i32* %36, null
  %39 = and i1 %37, %38
  br i1 %39, label %40, label %47, !prof !2

40:                                               ; preds = %29
  %41 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %0, i64 0, i32 0, i32 0, i32 2
  %42 = load i32, i32* %41, align 4
  %43 = zext i32 %42 to i64
  %44 = bitcast i32* %36 to i8*
  %45 = shl nuw nsw i64 %43, 2
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %32, i8* nonnull align 4 %44, i64 %45, i1 false) #5
  %46 = load i32*, i32** %35, align 8
  br label %47

47:                                               ; preds = %29, %40
  %48 = phi i32* [ %36, %29 ], [ %46, %40 ]
  %49 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %0, i64 0, i32 0, i32 1, i64 0
  %50 = bitcast i8* %49 to i32*
  %51 = icmp eq i32* %48, %50
  br i1 %51, label %54, label %52, !prof !2

52:                                               ; preds = %47
  %53 = bitcast %"class.WTF::Vector"* %0 to %"class.WTF::VectorBuffer"*
  tail call void @_ZN3WTF12VectorBufferIiLj7ENS_18PartitionAllocatorEE22ReallyDeallocateBufferEPi(%"class.WTF::VectorBuffer"* %53, i32* %48) #5
  br label %54

54:                                               ; preds = %47, %52
  %55 = bitcast %"class.WTF::Vector"* %0 to i64*
  store atomic i64 %34, i64* %55 monotonic, align 8
  %56 = trunc i64 %33 to i32
  %57 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %0, i64 0, i32 0, i32 0, i32 1
  store i32 %56, i32* %57, align 8
  br label %58

58:                                               ; preds = %28, %54, %12
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i64 @_ZN3WTF18PartitionAllocator13QuantizedSizeIiEEmm(i64) local_unnamed_addr #0 comdat align 2 {
  %2 = alloca %"class.logging::CheckOpResult", align 8
  %3 = alloca %"class.logging::CheckOpResult", align 8
  %4 = alloca %"class.logging::CheckError", align 8
  %5 = bitcast %"class.logging::CheckOpResult"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %5) #5
  %6 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %3, i64 0, i32 0
  store i8* inttoptr (i64 -6148914691236517206 to i8*), i8** %6, align 8
  %7 = bitcast %"class.logging::CheckOpResult"* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %7)
  %8 = icmp ugt i64 %0, 536346624
  br i1 %8, label %10, label %9

9:                                                ; preds = %1
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %7)
  store i8* null, i8** %6, align 8
  br label %19

10:                                               ; preds = %1
  %11 = tail call i8* @_ZN7logging15CheckOpValueStrEm(i64 %0) #5
  %12 = tail call i8* @_ZN7logging15CheckOpValueStrEm(i64 536346624) #5
  call void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"* nonnull %2, i8* getelementptr inbounds ([44 x i8], [44 x i8]* @.str.10, i64 0, i64 0), i8* %11, i8* %12) #5
  %13 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %2, i64 0, i32 0
  %14 = load i8*, i8** %13, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %7)
  store i8* %14, i8** %6, align 8
  %15 = icmp eq i8* %14, null
  br i1 %15, label %19, label %16

16:                                               ; preds = %10
  %17 = bitcast %"class.logging::CheckError"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %17) #5
  call void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* nonnull sret %4, i8* getelementptr inbounds ([78 x i8], [78 x i8]* @.str.11, i64 0, i64 0), i32 31, %"class.logging::CheckOpResult"* nonnull %3) #5
  %18 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %4) #5
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %4) #5
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %17) #5
  br label %19

19:                                               ; preds = %9, %10, %16
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %5) #5
  %20 = shl i64 %0, 2
  %21 = call i64 @_ZN3WTF10Partitions23BufferPotentialCapacityEm(i64 %20) #5
  ret i64 %21
}

declare i64 @_ZN3WTF10Partitions23BufferPotentialCapacityEm(i64) local_unnamed_addr #2

declare i8* @_ZN7logging15CheckOpValueStrEm(i64) local_unnamed_addr #2

declare i8* @_ZN3WTF18PartitionAllocator15AllocateBackingEmPKc(i64, i8*) local_unnamed_addr #2

; Function Attrs: noinline nounwind ssp uwtable
define linkonce_odr hidden void @_ZN3WTF12VectorBufferIiLj7ENS_18PartitionAllocatorEE22ReallyDeallocateBufferEPi(%"class.WTF::VectorBuffer"*, i32*) local_unnamed_addr #4 comdat align 2 {
  %3 = bitcast i32* %1 to i8*
  tail call void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8* %3) #5
  ret void
}

declare void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8*) local_unnamed_addr #2

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { noinline nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{!"branch_weights", i32 2000, i32 1}
!3 = !{!4}
!4 = distinct !{!4, !5}
!5 = distinct !{!5, !"LVerDomain"}
!6 = !{!7}
!7 = distinct !{!7, !5}
!8 = distinct !{!8, !9}
!9 = !{!"llvm.loop.isvectorized", i32 1}
!10 = distinct !{!10, !9}
!11 = !{!12}
!12 = distinct !{!12, !13}
!13 = distinct !{!13, !"LVerDomain"}
!14 = !{!15}
!15 = distinct !{!15, !13}
!16 = distinct !{!16, !9}
!17 = distinct !{!17, !18}
!18 = !{!"llvm.loop.unroll.disable"}
!19 = distinct !{!19, !9}
!20 = distinct !{!20, !9}
!21 = distinct !{!21, !22, !9}
!22 = !{!"llvm.loop.unroll.runtime.disable"}
!23 = !{i8 0, i8 2}
!24 = !{!25}
!25 = distinct !{!25, !26}
!26 = distinct !{!26, !"LVerDomain"}
!27 = !{!28}
!28 = distinct !{!28, !26}
!29 = distinct !{!29, !9}
!30 = distinct !{!30, !9}
!31 = !{!"branch_weights", i32 1, i32 2000}
