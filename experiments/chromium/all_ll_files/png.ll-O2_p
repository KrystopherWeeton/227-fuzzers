; ModuleID = '../../third_party/libpng/png.c'
source_filename = "../../third_party/libpng/png.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%struct.png_XYZ = type { i32, i32, i32, i32, i32, i32, i32, i32, i32 }
%struct.png_xy = type { i32, i32, i32, i32, i32, i32, i32, i32 }
%struct.anon = type { i32, i32, i32, [4 x i32], i8, i8, i16 }
%struct.png_struct_def = type { [1 x %struct.__jmp_buf_tag], void (%struct.__jmp_buf_tag*, i32)*, [1 x %struct.__jmp_buf_tag]*, i64, void (%struct.png_struct_def*, i8*)*, void (%struct.png_struct_def*, i8*)*, i8*, void (%struct.png_struct_def*, i8*, i64)*, void (%struct.png_struct_def*, i8*, i64)*, i8*, void (%struct.png_struct_def*, %struct.png_row_info_struct*, i8*)*, void (%struct.png_struct_def*, %struct.png_row_info_struct*, i8*)*, i8*, i8, i8, i32, i32, i32, i32, %struct.z_stream_s, %struct.png_compression_buffer*, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i64, i32, i32, i32, i8*, i8*, i8*, i8*, i64, i32, i32, %struct.png_color_struct*, i16, i16, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i16, i8, i32, %struct.png_color_16_struct, %struct.png_color_16_struct, void (%struct.png_struct_def*)*, i32, i32, i32, i32, i8*, i16**, i8*, i8*, i16**, i16**, %struct.png_color_8_struct, %struct.png_color_8_struct, i8*, %struct.png_color_16_struct, void (%struct.png_struct_def*, i32, i32)*, void (%struct.png_struct_def*, i32, i32)*, void (%struct.png_struct_def*, %struct.png_info_def*)*, void (%struct.png_struct_def*, i8*, i32, i32)*, void (%struct.png_struct_def*, %struct.png_info_def*)*, i8*, i8*, i8*, i8*, i32, i32, i64, i64, i64, i64, i32, i32, i32, i32, i8*, i32 (%struct.png_struct_def*, %struct.png_unknown_chunk_t*)*, i32, i32, i8*, i8, i8, i16, i16, i8*, i8* (%struct.png_struct_def*, i64)*, void (%struct.png_struct_def*, i8*)*, i8*, i8, i32, i32, i32, i64, %struct.png_unknown_chunk_t, i64, i8*, i64, i32, i8*, [4 x void (%struct.png_row_info_struct*, i8*, i8*)*], %struct.png_colorspace }
%struct.__jmp_buf_tag = type { [8 x i64], i32, %struct.__sigset_t }
%struct.__sigset_t = type { [16 x i64] }
%struct.png_row_info_struct = type { i32, i64, i8, i8, i8, i8 }
%struct.z_stream_s = type { i8*, i32, i64, i8*, i32, i64, i8*, %struct.internal_state*, i8* (i8*, i32, i32)*, void (i8*, i8*)*, i8*, i32, i64, i64 }
%struct.internal_state = type opaque
%struct.png_compression_buffer = type { %struct.png_compression_buffer*, [1 x i8] }
%struct.png_color_struct = type { i8, i8, i8 }
%struct.png_color_8_struct = type { i8, i8, i8, i8, i8 }
%struct.png_color_16_struct = type { i8, i16, i16, i16, i16 }
%struct.png_info_def = type { i32, i32, i32, i64, %struct.png_color_struct*, i16, i16, i8, i8, i8, i8, i8, i8, i8, i8, [8 x i8], %struct.png_colorspace, i8*, i8*, i32, i32, i32, %struct.png_text_struct*, %struct.png_color_8_struct, i8*, %struct.png_color_16_struct, %struct.png_color_16_struct, i32, %struct.png_unknown_chunk_t*, i32, i8** }
%struct.png_text_struct = type { i32, i8*, i8*, i64, i64, i8*, i8* }
%struct.png_unknown_chunk_t = type { [5 x i8], i8*, i64, i8 }
%struct.png_colorspace = type { i32, %struct.png_xy, %struct.png_XYZ, i16, i16 }
%struct._IO_FILE = type { i32, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, %struct._IO_marker*, %struct._IO_FILE*, i32, i32, i64, i16, i8, [1 x i8], i8*, i64, %struct._IO_codecvt*, %struct._IO_wide_data*, %struct._IO_FILE*, i8*, i64, i32, [20 x i8] }
%struct._IO_marker = type opaque
%struct._IO_codecvt = type opaque
%struct._IO_wide_data = type opaque
%struct.png_image = type { %struct.png_control*, i32, i32, i32, i32, i32, i32, i32, [64 x i8] }
%struct.png_control = type { %struct.png_struct_def*, %struct.png_info_def*, i8*, i8*, i64, i8 }

@.str = private unnamed_addr constant [33 x i8] c"Too many bytes for PNG signature\00", align 1
@__const.cr_png_sig_cmp.png_signature = private unnamed_addr constant [8 x i8] c"\89PNG\0D\0A\1A\0A", align 1
@.str.1 = private unnamed_addr constant [35 x i8] c"Potential overflow in png_zalloc()\00", align 1
@.str.2 = private unnamed_addr constant [7 x i8] c"1.6.37\00", align 1
@.str.3 = private unnamed_addr constant [31 x i8] c"Application built with libpng-\00", align 1
@.str.4 = private unnamed_addr constant [19 x i8] c" but running with \00", align 1
@.str.5 = private unnamed_addr constant [42 x i8] c"Unknown freer parameter in png_data_freer\00", align 1
@.str.6 = private unnamed_addr constant [219 x i8] c"\0Alibpng version 1.6.37\0ACopyright (c) 2018-2019 Cosmin Truta\0ACopyright (c) 1998-2002,2004,2006-2018 Glenn Randers-Pehrson\0ACopyright (c) 1996-1997 Andreas Dilger\0ACopyright (c) 1995-1996 Guy Eric Schalnat, Group 42, Inc.\0A\00", align 1
@.str.7 = private unnamed_addr constant [42 x i8] c" libpng version 1.6.37 - April 14, 2019\0A\0A\00", align 1
@.str.8 = private unnamed_addr constant [28 x i8] c"unexpected zlib return code\00", align 1
@.str.9 = private unnamed_addr constant [28 x i8] c"unexpected end of LZ stream\00", align 1
@.str.10 = private unnamed_addr constant [22 x i8] c"missing LZ dictionary\00", align 1
@.str.11 = private unnamed_addr constant [14 x i8] c"zlib IO error\00", align 1
@.str.12 = private unnamed_addr constant [23 x i8] c"bad parameters to zlib\00", align 1
@.str.13 = private unnamed_addr constant [18 x i8] c"damaged LZ stream\00", align 1
@.str.14 = private unnamed_addr constant [20 x i8] c"insufficient memory\00", align 1
@.str.15 = private unnamed_addr constant [10 x i8] c"truncated\00", align 1
@.str.16 = private unnamed_addr constant [25 x i8] c"unsupported zlib version\00", align 1
@.str.17 = private unnamed_addr constant [23 x i8] c"unexpected zlib return\00", align 1
@.str.18 = private unnamed_addr constant [25 x i8] c"gamma value out of range\00", align 1
@.str.19 = private unnamed_addr constant [10 x i8] c"duplicate\00", align 1
@.str.20 = private unnamed_addr constant [23 x i8] c"invalid chromaticities\00", align 1
@.str.21 = private unnamed_addr constant [39 x i8] c"internal error checking chromaticities\00", align 1
@.str.22 = private unnamed_addr constant [19 x i8] c"invalid end points\00", align 1
@cr_png_colorspace_set_sRGB.sRGB_XYZ = internal unnamed_addr constant %struct.png_XYZ { i32 41239, i32 21264, i32 1933, i32 35758, i32 71517, i32 11919, i32 18048, i32 7219, i32 95053 }, align 4
@.str.23 = private unnamed_addr constant [5 x i8] c"sRGB\00", align 1
@.str.24 = private unnamed_addr constant [30 x i8] c"invalid sRGB rendering intent\00", align 1
@.str.25 = private unnamed_addr constant [31 x i8] c"inconsistent rendering intents\00", align 1
@.str.26 = private unnamed_addr constant [35 x i8] c"duplicate sRGB information ignored\00", align 1
@sRGB_xy = internal constant %struct.png_xy { i32 64000, i32 33000, i32 30000, i32 60000, i32 15000, i32 6000, i32 31270, i32 32900 }, align 4
@.str.27 = private unnamed_addr constant [31 x i8] c"cHRM chunk does not match sRGB\00", align 1
@.str.28 = private unnamed_addr constant [27 x i8] c"exceeds application limits\00", align 1
@.str.29 = private unnamed_addr constant [30 x i8] c"length does not match profile\00", align 1
@.str.30 = private unnamed_addr constant [15 x i8] c"invalid length\00", align 1
@.str.31 = private unnamed_addr constant [20 x i8] c"tag count too large\00", align 1
@.str.32 = private unnamed_addr constant [25 x i8] c"invalid rendering intent\00", align 1
@.str.33 = private unnamed_addr constant [29 x i8] c"intent outside defined range\00", align 1
@.str.34 = private unnamed_addr constant [18 x i8] c"invalid signature\00", align 1
@D50_nCIEXYZ = internal constant [12 x i8] c"\00\00\F6\D6\00\01\00\00\00\00\D3-", align 1
@.str.35 = private unnamed_addr constant [26 x i8] c"PCS illuminant is not D50\00", align 1
@.str.36 = private unnamed_addr constant [47 x i8] c"RGB color space not permitted on grayscale PNG\00", align 1
@.str.37 = private unnamed_addr constant [42 x i8] c"Gray color space not permitted on RGB PNG\00", align 1
@.str.38 = private unnamed_addr constant [32 x i8] c"invalid ICC profile color space\00", align 1
@.str.39 = private unnamed_addr constant [38 x i8] c"invalid embedded Abstract ICC profile\00", align 1
@.str.40 = private unnamed_addr constant [40 x i8] c"unexpected DeviceLink ICC profile class\00", align 1
@.str.41 = private unnamed_addr constant [40 x i8] c"unexpected NamedColor ICC profile class\00", align 1
@.str.42 = private unnamed_addr constant [31 x i8] c"unrecognized ICC profile class\00", align 1
@.str.43 = private unnamed_addr constant [28 x i8] c"unexpected ICC PCS encoding\00", align 1
@.str.44 = private unnamed_addr constant [32 x i8] c"ICC profile tag outside profile\00", align 1
@.str.45 = private unnamed_addr constant [42 x i8] c"ICC profile tag start not a multiple of 4\00", align 1
@.str.46 = private unnamed_addr constant [42 x i8] c"internal error handling cHRM coefficients\00", align 1
@.str.47 = private unnamed_addr constant [34 x i8] c"internal error handling cHRM->XYZ\00", align 1
@.str.48 = private unnamed_addr constant [28 x i8] c"Image width is zero in IHDR\00", align 1
@.str.49 = private unnamed_addr constant [28 x i8] c"Invalid image width in IHDR\00", align 1
@.str.51 = private unnamed_addr constant [39 x i8] c"Image width exceeds user limit in IHDR\00", align 1
@.str.52 = private unnamed_addr constant [29 x i8] c"Image height is zero in IHDR\00", align 1
@.str.53 = private unnamed_addr constant [29 x i8] c"Invalid image height in IHDR\00", align 1
@.str.54 = private unnamed_addr constant [40 x i8] c"Image height exceeds user limit in IHDR\00", align 1
@.str.55 = private unnamed_addr constant [26 x i8] c"Invalid bit depth in IHDR\00", align 1
@.str.56 = private unnamed_addr constant [27 x i8] c"Invalid color type in IHDR\00", align 1
@.str.57 = private unnamed_addr constant [49 x i8] c"Invalid color type/bit depth combination in IHDR\00", align 1
@.str.58 = private unnamed_addr constant [33 x i8] c"Unknown interlace method in IHDR\00", align 1
@.str.59 = private unnamed_addr constant [35 x i8] c"Unknown compression method in IHDR\00", align 1
@.str.60 = private unnamed_addr constant [30 x i8] c"Unknown filter method in IHDR\00", align 1
@.str.61 = private unnamed_addr constant [18 x i8] c"Invalid IHDR data\00", align 1
@.str.62 = private unnamed_addr constant [29 x i8] c"fixed point overflow ignored\00", align 1
@.str.63 = private unnamed_addr constant [26 x i8] c"gamma table being rebuilt\00", align 1
@cr_png_sRGB_table = hidden local_unnamed_addr constant [256 x i16] [i16 0, i16 20, i16 40, i16 60, i16 80, i16 99, i16 119, i16 139, i16 159, i16 179, i16 199, i16 219, i16 241, i16 264, i16 288, i16 313, i16 340, i16 367, i16 396, i16 427, i16 458, i16 491, i16 526, i16 562, i16 599, i16 637, i16 677, i16 718, i16 761, i16 805, i16 851, i16 898, i16 947, i16 997, i16 1048, i16 1101, i16 1156, i16 1212, i16 1270, i16 1330, i16 1391, i16 1453, i16 1517, i16 1583, i16 1651, i16 1720, i16 1790, i16 1863, i16 1937, i16 2013, i16 2090, i16 2170, i16 2250, i16 2333, i16 2418, i16 2504, i16 2592, i16 2681, i16 2773, i16 2866, i16 2961, i16 3058, i16 3157, i16 3258, i16 3360, i16 3464, i16 3570, i16 3678, i16 3788, i16 3900, i16 4014, i16 4129, i16 4247, i16 4366, i16 4488, i16 4611, i16 4736, i16 4864, i16 4993, i16 5124, i16 5257, i16 5392, i16 5530, i16 5669, i16 5810, i16 5953, i16 6099, i16 6246, i16 6395, i16 6547, i16 6700, i16 6856, i16 7014, i16 7174, i16 7335, i16 7500, i16 7666, i16 7834, i16 8004, i16 8177, i16 8352, i16 8528, i16 8708, i16 8889, i16 9072, i16 9258, i16 9445, i16 9635, i16 9828, i16 10022, i16 10219, i16 10417, i16 10619, i16 10822, i16 11028, i16 11235, i16 11446, i16 11658, i16 11873, i16 12090, i16 12309, i16 12530, i16 12754, i16 12980, i16 13209, i16 13440, i16 13673, i16 13909, i16 14146, i16 14387, i16 14629, i16 14874, i16 15122, i16 15371, i16 15623, i16 15878, i16 16135, i16 16394, i16 16656, i16 16920, i16 17187, i16 17456, i16 17727, i16 18001, i16 18277, i16 18556, i16 18837, i16 19121, i16 19407, i16 19696, i16 19987, i16 20281, i16 20577, i16 20876, i16 21177, i16 21481, i16 21787, i16 22096, i16 22407, i16 22721, i16 23038, i16 23357, i16 23678, i16 24002, i16 24329, i16 24658, i16 24990, i16 25325, i16 25662, i16 26001, i16 26344, i16 26688, i16 27036, i16 27386, i16 27739, i16 28094, i16 28452, i16 28813, i16 29176, i16 29542, i16 29911, i16 30282, i16 30656, i16 31033, i16 31412, i16 31794, i16 32179, i16 32567, i16 -32579, i16 -32186, i16 -31791, i16 -31393, i16 -30992, i16 -30588, i16 -30181, i16 -29772, i16 -29360, i16 -28945, i16 -28528, i16 -28107, i16 -27684, i16 -27258, i16 -26830, i16 -26398, i16 -25964, i16 -25527, i16 -25087, i16 -24645, i16 -24199, i16 -23751, i16 -23300, i16 -22846, i16 -22389, i16 -21930, i16 -21467, i16 -21002, i16 -20534, i16 -20063, i16 -19589, i16 -19113, i16 -18633, i16 -18151, i16 -17665, i16 -17177, i16 -16686, i16 -16192, i16 -15695, i16 -15195, i16 -14692, i16 -14187, i16 -13678, i16 -13167, i16 -12652, i16 -12135, i16 -11615, i16 -11091, i16 -10565, i16 -10036, i16 -9504, i16 -8969, i16 -8431, i16 -7890, i16 -7346, i16 -6799, i16 -6249, i16 -5696, i16 -5140, i16 -4581, i16 -4019, i16 -3454, i16 -2886, i16 -2315, i16 -1741, i16 -1164, i16 -584, i16 -1], align 16
@cr_png_sRGB_base = hidden local_unnamed_addr constant [512 x i16] [i16 128, i16 1782, i16 3383, i16 4644, i16 5675, i16 6564, i16 7357, i16 8074, i16 8732, i16 9346, i16 9921, i16 10463, i16 10977, i16 11466, i16 11935, i16 12384, i16 12816, i16 13233, i16 13634, i16 14024, i16 14402, i16 14769, i16 15125, i16 15473, i16 15812, i16 16142, i16 16466, i16 16781, i16 17090, i16 17393, i16 17690, i16 17981, i16 18266, i16 18546, i16 18822, i16 19093, i16 19359, i16 19621, i16 19879, i16 20133, i16 20383, i16 20630, i16 20873, i16 21113, i16 21349, i16 21583, i16 21813, i16 22041, i16 22265, i16 22487, i16 22707, i16 22923, i16 23138, i16 23350, i16 23559, i16 23767, i16 23972, i16 24175, i16 24376, i16 24575, i16 24772, i16 24967, i16 25160, i16 25352, i16 25542, i16 25730, i16 25916, i16 26101, i16 26284, i16 26465, i16 26645, i16 26823, i16 27000, i16 27176, i16 27350, i16 27523, i16 27695, i16 27865, i16 28034, i16 28201, i16 28368, i16 28533, i16 28697, i16 28860, i16 29021, i16 29182, i16 29341, i16 29500, i16 29657, i16 29813, i16 29969, i16 30123, i16 30276, i16 30429, i16 30580, i16 30730, i16 30880, i16 31028, i16 31176, i16 31323, i16 31469, i16 31614, i16 31758, i16 31902, i16 32045, i16 32186, i16 32327, i16 32468, i16 32607, i16 32746, i16 -32652, i16 -32515, i16 -32378, i16 -32242, i16 -32107, i16 -31972, i16 -31839, i16 -31705, i16 -31573, i16 -31441, i16 -31310, i16 -31179, i16 -31050, i16 -30920, i16 -30792, i16 -30663, i16 -30536, i16 -30409, i16 -30283, i16 -30157, i16 -30032, i16 -29907, i16 -29783, i16 -29660, i16 -29537, i16 -29414, i16 -29292, i16 -29171, i16 -29050, i16 -28930, i16 -28810, i16 -28691, i16 -28572, i16 -28453, i16 -28335, i16 -28218, i16 -28101, i16 -27985, i16 -27868, i16 -27753, i16 -27638, i16 -27523, i16 -27409, i16 -27295, i16 -27182, i16 -27069, i16 -26956, i16 -26844, i16 -26733, i16 -26621, i16 -26510, i16 -26400, i16 -26290, i16 -26180, i16 -26071, i16 -25962, i16 -25854, i16 -25746, i16 -25638, i16 -25531, i16 -25424, i16 -25317, i16 -25211, i16 -25105, i16 -24999, i16 -24894, i16 -24789, i16 -24685, i16 -24581, i16 -24477, i16 -24373, i16 -24270, i16 -24167, i16 -24065, i16 -23963, i16 -23861, i16 -23759, i16 -23658, i16 -23557, i16 -23457, i16 -23357, i16 -23257, i16 -23157, i16 -23058, i16 -22959, i16 -22860, i16 -22761, i16 -22663, i16 -22565, i16 -22468, i16 -22371, i16 -22274, i16 -22177, i16 -22080, i16 -21984, i16 -21888, i16 -21793, i16 -21697, i16 -21602, i16 -21508, i16 -21413, i16 -21319, i16 -21225, i16 -21131, i16 -21037, i16 -20944, i16 -20851, i16 -20758, i16 -20666, i16 -20574, i16 -20482, i16 -20390, i16 -20298, i16 -20207, i16 -20116, i16 -20025, i16 -19935, i16 -19844, i16 -19754, i16 -19664, i16 -19575, i16 -19485, i16 -19396, i16 -19307, i16 -19218, i16 -19130, i16 -19042, i16 -18953, i16 -18866, i16 -18778, i16 -18690, i16 -18603, i16 -18516, i16 -18429, i16 -18343, i16 -18256, i16 -18170, i16 -18084, i16 -17998, i16 -17913, i16 -17827, i16 -17742, i16 -17657, i16 -17572, i16 -17488, i16 -17403, i16 -17319, i16 -17235, i16 -17151, i16 -17068, i16 -16984, i16 -16901, i16 -16818, i16 -16735, i16 -16652, i16 -16570, i16 -16488, i16 -16405, i16 -16323, i16 -16242, i16 -16160, i16 -16078, i16 -15997, i16 -15916, i16 -15835, i16 -15754, i16 -15674, i16 -15593, i16 -15513, i16 -15433, i16 -15353, i16 -15273, i16 -15194, i16 -15114, i16 -15035, i16 -14956, i16 -14877, i16 -14798, i16 -14720, i16 -14641, i16 -14563, i16 -14485, i16 -14407, i16 -14329, i16 -14251, i16 -14174, i16 -14097, i16 -14019, i16 -13942, i16 -13865, i16 -13789, i16 -13712, i16 -13636, i16 -13559, i16 -13483, i16 -13407, i16 -13331, i16 -13256, i16 -13180, i16 -13104, i16 -13029, i16 -12954, i16 -12879, i16 -12804, i16 -12729, i16 -12655, i16 -12580, i16 -12506, i16 -12432, i16 -12358, i16 -12284, i16 -12210, i16 -12136, i16 -12063, i16 -11990, i16 -11916, i16 -11843, i16 -11770, i16 -11697, i16 -11625, i16 -11552, i16 -11480, i16 -11407, i16 -11335, i16 -11263, i16 -11191, i16 -11119, i16 -11047, i16 -10976, i16 -10904, i16 -10833, i16 -10762, i16 -10691, i16 -10620, i16 -10549, i16 -10478, i16 -10407, i16 -10337, i16 -10267, i16 -10196, i16 -10126, i16 -10056, i16 -9986, i16 -9916, i16 -9847, i16 -9777, i16 -9708, i16 -9638, i16 -9569, i16 -9500, i16 -9431, i16 -9362, i16 -9293, i16 -9225, i16 -9156, i16 -9088, i16 -9019, i16 -8951, i16 -8883, i16 -8815, i16 -8747, i16 -8679, i16 -8612, i16 -8544, i16 -8477, i16 -8409, i16 -8342, i16 -8275, i16 -8208, i16 -8141, i16 -8074, i16 -8007, i16 -7941, i16 -7874, i16 -7808, i16 -7741, i16 -7675, i16 -7609, i16 -7543, i16 -7477, i16 -7411, i16 -7345, i16 -7280, i16 -7214, i16 -7149, i16 -7083, i16 -7018, i16 -6953, i16 -6888, i16 -6823, i16 -6758, i16 -6693, i16 -6628, i16 -6564, i16 -6499, i16 -6435, i16 -6371, i16 -6306, i16 -6242, i16 -6178, i16 -6114, i16 -6050, i16 -5987, i16 -5923, i16 -5859, i16 -5796, i16 -5732, i16 -5669, i16 -5606, i16 -5543, i16 -5480, i16 -5417, i16 -5354, i16 -5291, i16 -5228, i16 -5166, i16 -5103, i16 -5041, i16 -4978, i16 -4916, i16 -4854, i16 -4792, i16 -4730, i16 -4668, i16 -4606, i16 -4544, i16 -4482, i16 -4421, i16 -4359, i16 -4298, i16 -4236, i16 -4175, i16 -4114, i16 -4053, i16 -3992, i16 -3931, i16 -3870, i16 -3809, i16 -3748, i16 -3688, i16 -3627, i16 -3567, i16 -3506, i16 -3446, i16 -3386, i16 -3325, i16 -3265, i16 -3205, i16 -3145, i16 -3086, i16 -3026, i16 -2966, i16 -2906, i16 -2847, i16 -2787, i16 -2728, i16 -2669, i16 -2609, i16 -2550, i16 -2491, i16 -2432, i16 -2373, i16 -2314, i16 -2255, i16 -2196, i16 -2138, i16 -2079, i16 -2021, i16 -1962, i16 -1904, i16 -1845, i16 -1787, i16 -1729, i16 -1671, i16 -1613, i16 -1555, i16 -1497, i16 -1439, i16 -1381, i16 -1324, i16 -1266, i16 -1208, i16 -1151, i16 -1093, i16 -1036, i16 -979, i16 -922, i16 -864, i16 -807, i16 -750, i16 -693, i16 -636, i16 -580, i16 -523, i16 -466, i16 -410, i16 -353, i16 -297, i16 -240, i16 -184, i16 -127, i16 -71], align 16
@cr_png_sRGB_delta = hidden local_unnamed_addr constant [512 x i8] c"\CF\C9\9E\81qdalign 16
@.str.64 = private unnamed_addr constant [32 x i8] c"gamma value does not match sRGB\00", align 1
@.str.65 = private unnamed_addr constant [43 x i8] c"gamma value does not match libpng estimate\00", align 1
@.str.66 = private unnamed_addr constant [28 x i8] c"inconsistent chromaticities\00", align 1
@.str.67 = private unnamed_addr constant [10 x i8] c"profile '\00", align 1
@.str.68 = private unnamed_addr constant [4 x i8] c"': \00", align 1
@.str.69 = private unnamed_addr constant [4 x i8] c"h: \00", align 1
@.str.70 = private unnamed_addr constant [10 x i8] c"too short\00", align 1
@png_sRGB_checks = internal unnamed_addr constant [7 x %struct.anon] [%struct.anon { i32 171956726, i32 998732473, i32 3048, [4 x i32] [i32 704134622, i32 -1343072850, i32 2017655524, i32 -897369843], i8 1, i8 0, i16 0 }, %struct.anon { i32 1225385441, i32 1115601697, i32 3052, [4 x i32] [i32 -916728265, i32 -379745733, i32 234065817, i32 -1053686903], i8 1, i8 0, i16 1 }, %struct.anon { i32 -48151391, i32 812636334, i32 60988, [4 x i32] [i32 -60411016, i32 937592939, i32 -42800765, i32 -2111245896], i8 1, i8 0, i16 0 }, %struct.anon { i32 547108306, i32 -1141934062, i32 60960, [4 x i32] [i32 878062271, i32 -1723020026, i32 1831622433, i32 -791245731], i8 1, i8 0, i16 0 }, %struct.anon { i32 -1605052574, i32 1565600206, i32 3024, [4 x i32] zeroinitializer, i8 0, i8 0, i16 1 }, %struct.anon { i32 -142281733, i32 405710162, i32 3144, [4 x i32] zeroinitializer, i8 0, i8 1, i16 0 }, %struct.anon { i32 60355580, i32 -224505235, i32 3144, [4 x i32] zeroinitializer, i8 0, i8 1, i16 1 }], align 16
@.str.71 = private unnamed_addr constant [29 x i8] c"known incorrect sRGB profile\00", align 1
@.str.72 = private unnamed_addr constant [43 x i8] c"out-of-date sRGB profile with no signature\00", align 1
@.str.73 = private unnamed_addr constant [56 x i8] c"Not recognizing known sRGB profile that has been edited\00", align 1
@switch.table.cr_png_zstream_error = private unnamed_addr constant [10 x i8*] [i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.17, i64 0, i64 0), i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.16, i64 0, i64 0), i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.15, i64 0, i64 0), i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.14, i64 0, i64 0), i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.13, i64 0, i64 0), i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.12, i64 0, i64 0), i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.11, i64 0, i64 0), i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.8, i64 0, i64 0), i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.9, i64 0, i64 0), i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.10, i64 0, i64 0)], align 8

; Function Attrs: nounwind ssp uwtable
define hidden void @cr_png_set_sig_bytes(%struct.png_struct_def* noalias, i32) local_unnamed_addr #0 {
  %3 = icmp eq %struct.png_struct_def* %0, null
  br i1 %3, label %12, label %4

4:                                                ; preds = %2
  %5 = icmp sgt i32 %1, 0
  %6 = select i1 %5, i32 %1, i32 0
  %7 = icmp ugt i32 %6, 8
  br i1 %7, label %8, label %9

8:                                                ; preds = %4
  tail call void @cr_png_error(%struct.png_struct_def* nonnull %0, i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str, i64 0, i64 0)) #19
  unreachable

9:                                                ; preds = %4
  %10 = trunc i32 %6 to i8
  %11 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 66
  store i8 %10, i8* %11, align 1
  br label %12

12:                                               ; preds = %2, %9
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: noreturn
declare void @cr_png_error(%struct.png_struct_def*, i8*) local_unnamed_addr #2

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nounwind readonly ssp uwtable
define hidden i32 @cr_png_sig_cmp(i8* nocapture readonly, i64, i64) local_unnamed_addr #3 {
  %4 = icmp ugt i64 %2, 8
  br i1 %4, label %7, label %5

5:                                                ; preds = %3
  %6 = icmp eq i64 %2, 0
  br i1 %6, label %18, label %7

7:                                                ; preds = %3, %5
  %8 = phi i64 [ %2, %5 ], [ 8, %3 ]
  %9 = icmp ugt i64 %1, 7
  br i1 %9, label %18, label %10

10:                                               ; preds = %7
  %11 = add nuw nsw i64 %8, %1
  %12 = icmp ugt i64 %11, 8
  %13 = sub nuw nsw i64 8, %1
  %14 = select i1 %12, i64 %13, i64 %8
  %15 = getelementptr inbounds i8, i8* %0, i64 %1
  %16 = getelementptr inbounds [8 x i8], [8 x i8]* @__const.cr_png_sig_cmp.png_signature, i64 0, i64 %1
  %17 = tail call i32 @memcmp(i8* %15, i8* %16, i64 %14) #20
  br label %18

18:                                               ; preds = %7, %5, %10
  %19 = phi i32 [ %17, %10 ], [ -1, %5 ], [ -1, %7 ]
  ret i32 %19
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #1

; Function Attrs: nofree nounwind readonly
declare i32 @memcmp(i8* nocapture, i8* nocapture, i64) local_unnamed_addr #4

; Function Attrs: nounwind ssp uwtable
define hidden noalias i8* @cr_png_zalloc(i8*, i32, i32) #0 {
  %4 = zext i32 %2 to i64
  %5 = icmp eq i8* %0, null
  br i1 %5, label %16, label %6

6:                                                ; preds = %3
  %7 = zext i32 %1 to i64
  %8 = udiv i64 -1, %4
  %9 = icmp ugt i64 %8, %7
  br i1 %9, label %12, label %10

10:                                               ; preds = %6
  %11 = bitcast i8* %0 to %struct.png_struct_def*
  tail call void @cr_png_warning(%struct.png_struct_def* nonnull %11, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.1, i64 0, i64 0)) #21
  br label %16

12:                                               ; preds = %6
  %13 = mul nuw i64 %4, %7
  %14 = bitcast i8* %0 to %struct.png_struct_def*
  %15 = tail call noalias i8* @cr_png_malloc_warn(%struct.png_struct_def* nonnull %14, i64 %13) #21
  br label %16

16:                                               ; preds = %3, %12, %10
  %17 = phi i8* [ null, %10 ], [ %15, %12 ], [ null, %3 ]
  ret i8* %17
}

declare void @cr_png_warning(%struct.png_struct_def*, i8*) local_unnamed_addr #5

declare noalias i8* @cr_png_malloc_warn(%struct.png_struct_def*, i64) local_unnamed_addr #5

; Function Attrs: nounwind ssp uwtable
define hidden void @cr_png_zfree(i8*, i8*) #0 {
  %3 = bitcast i8* %0 to %struct.png_struct_def*
  tail call void @cr_png_free(%struct.png_struct_def* %3, i8* %1) #21
  ret void
}

declare void @cr_png_free(%struct.png_struct_def*, i8*) local_unnamed_addr #5

; Function Attrs: nounwind ssp uwtable
define hidden void @cr_png_reset_crc(%struct.png_struct_def* noalias nocapture) local_unnamed_addr #0 {
  %2 = tail call i64 @Cr_z_crc32(i64 0, i8* null, i32 0) #21
  %3 = trunc i64 %2 to i32
  %4 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 51
  store i32 %3, i32* %4, align 4
  ret void
}

declare i64 @Cr_z_crc32(i64, i8*, i32) local_unnamed_addr #5

; Function Attrs: nounwind ssp uwtable
define hidden void @cr_png_calculate_crc(%struct.png_struct_def* noalias nocapture, i8*, i64) local_unnamed_addr #0 {
  %4 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 44
  %5 = load i32, i32* %4, align 8
  %6 = and i32 %5, 536870912
  %7 = icmp eq i32 %6, 0
  %8 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 16
  %9 = load i32, i32* %8, align 8
  %10 = and i32 %9, 768
  %11 = icmp ne i32 %10, 768
  %12 = and i32 %9, 2048
  %13 = icmp eq i32 %12, 0
  %14 = select i1 %7, i1 %13, i1 %11
  %15 = icmp ne i64 %2, 0
  %16 = and i1 %15, %14
  br i1 %16, label %17, label %35

17:                                               ; preds = %3
  %18 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 51
  %19 = load i32, i32* %18, align 4
  %20 = zext i32 %19 to i64
  br label %21

21:                                               ; preds = %21, %17
  %22 = phi i64 [ %2, %17 ], [ %31, %21 ]
  %23 = phi i64 [ %20, %17 ], [ %28, %21 ]
  %24 = phi i8* [ %1, %17 ], [ %30, %21 ]
  %25 = trunc i64 %22 to i32
  %26 = icmp eq i32 %25, 0
  %27 = select i1 %26, i32 -1, i32 %25
  %28 = tail call i64 @Cr_z_crc32(i64 %23, i8* %24, i32 %27) #21
  %29 = zext i32 %27 to i64
  %30 = getelementptr inbounds i8, i8* %24, i64 %29
  %31 = sub i64 %22, %29
  %32 = icmp eq i64 %31, 0
  br i1 %32, label %33, label %21

33:                                               ; preds = %21
  %34 = trunc i64 %28 to i32
  store i32 %34, i32* %18, align 4
  br label %35

35:                                               ; preds = %33, %3
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @cr_png_user_version_check(%struct.png_struct_def* noalias, i8*) local_unnamed_addr #0 {
  %3 = alloca [128 x i8], align 16
  %4 = icmp eq i8* %1, null
  %5 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 16
  br i1 %4, label %16, label %6

6:                                                ; preds = %2
  %7 = load i8, i8* %1, align 1
  %8 = icmp eq i8 %7, 49
  br i1 %8, label %12, label %9

9:                                                ; preds = %6
  %10 = load i32, i32* %5, align 8
  %11 = or i32 %10, 131072
  store i32 %11, i32* %5, align 8
  br label %12

12:                                               ; preds = %6, %9
  %13 = icmp eq i8 %7, 46
  %14 = zext i1 %13 to i32
  %15 = icmp eq i8 %7, 0
  br i1 %15, label %19, label %33

16:                                               ; preds = %2
  %17 = load i32, i32* %5, align 8
  %18 = or i32 %17, 131072
  store i32 %18, i32* %5, align 8
  br label %21

19:                                               ; preds = %103, %107, %96, %82, %68, %54, %40, %12
  %20 = load i32, i32* %5, align 8
  br label %21

21:                                               ; preds = %19, %16
  %22 = phi i32 [ %20, %19 ], [ %18, %16 ]
  %23 = and i32 %22, 131072
  %24 = icmp eq i32 %23, 0
  br i1 %24, label %31, label %25

25:                                               ; preds = %21
  %26 = getelementptr inbounds [128 x i8], [128 x i8]* %3, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 128, i8* nonnull %26) #21
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %26, i8 -86, i64 128, i1 false)
  %27 = call i64 @cr_png_safecat(i8* nonnull %26, i64 128, i64 0, i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str.3, i64 0, i64 0)) #21
  %28 = call i64 @cr_png_safecat(i8* nonnull %26, i64 128, i64 %27, i8* %1) #21
  %29 = call i64 @cr_png_safecat(i8* nonnull %26, i64 128, i64 %28, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.4, i64 0, i64 0)) #21
  %30 = call i64 @cr_png_safecat(i8* nonnull %26, i64 128, i64 %29, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.2, i64 0, i64 0)) #21
  call void @cr_png_warning(%struct.png_struct_def* %0, i8* nonnull %26) #21
  call void @llvm.lifetime.end.p0i8(i64 128, i8* nonnull %26) #21
  br label %31

31:                                               ; preds = %21, %25
  %32 = phi i32 [ 0, %25 ], [ 1, %21 ]
  ret i32 %32

33:                                               ; preds = %12
  %34 = getelementptr inbounds i8, i8* %1, i64 1
  %35 = load i8, i8* %34, align 1
  %36 = icmp eq i8 %35, 46
  br i1 %36, label %40, label %37

37:                                               ; preds = %33
  %38 = load i32, i32* %5, align 8
  %39 = or i32 %38, 131072
  store i32 %39, i32* %5, align 8
  br label %40

40:                                               ; preds = %37, %33
  %41 = icmp eq i8 %35, 46
  %42 = zext i1 %41 to i32
  %43 = add nuw nsw i32 %14, %42
  %44 = icmp uge i32 %43, 2
  %45 = icmp eq i8 %35, 0
  %46 = or i1 %44, %45
  br i1 %46, label %19, label %47

47:                                               ; preds = %40
  %48 = getelementptr inbounds i8, i8* %1, i64 2
  %49 = load i8, i8* %48, align 1
  %50 = icmp eq i8 %49, 54
  br i1 %50, label %54, label %51

51:                                               ; preds = %47
  %52 = load i32, i32* %5, align 8
  %53 = or i32 %52, 131072
  store i32 %53, i32* %5, align 8
  br label %54

54:                                               ; preds = %51, %47
  %55 = icmp eq i8 %49, 46
  %56 = zext i1 %55 to i32
  %57 = add nuw nsw i32 %43, %56
  %58 = icmp uge i32 %57, 2
  %59 = icmp eq i8 %49, 0
  %60 = or i1 %58, %59
  br i1 %60, label %19, label %61

61:                                               ; preds = %54
  %62 = getelementptr inbounds i8, i8* %1, i64 3
  %63 = load i8, i8* %62, align 1
  %64 = icmp eq i8 %63, 46
  br i1 %64, label %68, label %65

65:                                               ; preds = %61
  %66 = load i32, i32* %5, align 8
  %67 = or i32 %66, 131072
  store i32 %67, i32* %5, align 8
  br label %68

68:                                               ; preds = %65, %61
  %69 = icmp eq i8 %63, 46
  %70 = zext i1 %69 to i32
  %71 = add nuw nsw i32 %57, %70
  %72 = icmp uge i32 %71, 2
  %73 = icmp eq i8 %63, 0
  %74 = or i1 %72, %73
  br i1 %74, label %19, label %75

75:                                               ; preds = %68
  %76 = getelementptr inbounds i8, i8* %1, i64 4
  %77 = load i8, i8* %76, align 1
  %78 = icmp eq i8 %77, 51
  br i1 %78, label %82, label %79

79:                                               ; preds = %75
  %80 = load i32, i32* %5, align 8
  %81 = or i32 %80, 131072
  store i32 %81, i32* %5, align 8
  br label %82

82:                                               ; preds = %79, %75
  %83 = icmp eq i8 %77, 46
  %84 = zext i1 %83 to i32
  %85 = add nuw nsw i32 %71, %84
  %86 = icmp uge i32 %85, 2
  %87 = icmp eq i8 %77, 0
  %88 = or i1 %86, %87
  br i1 %88, label %19, label %89

89:                                               ; preds = %82
  %90 = getelementptr inbounds i8, i8* %1, i64 5
  %91 = load i8, i8* %90, align 1
  %92 = icmp eq i8 %91, 55
  br i1 %92, label %96, label %93

93:                                               ; preds = %89
  %94 = load i32, i32* %5, align 8
  %95 = or i32 %94, 131072
  store i32 %95, i32* %5, align 8
  br label %96

96:                                               ; preds = %93, %89
  %97 = icmp eq i8 %91, 46
  %98 = zext i1 %97 to i32
  %99 = add nuw nsw i32 %85, %98
  %100 = icmp uge i32 %99, 2
  %101 = icmp eq i8 %91, 0
  %102 = or i1 %100, %101
  br i1 %102, label %19, label %103

103:                                              ; preds = %96
  %104 = getelementptr inbounds i8, i8* %1, i64 6
  %105 = load i8, i8* %104, align 1
  %106 = icmp eq i8 %105, 0
  br i1 %106, label %19, label %107

107:                                              ; preds = %103
  %108 = load i32, i32* %5, align 8
  %109 = or i32 %108, 131072
  store i32 %109, i32* %5, align 8
  br label %19
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

declare i64 @cr_png_safecat(i8*, i64, i64, i8*) local_unnamed_addr #5

; Function Attrs: nounwind ssp uwtable
define hidden noalias %struct.png_struct_def* @cr_png_create_png_struct(i8*, i8*, void (%struct.png_struct_def*, i8*)*, void (%struct.png_struct_def*, i8*)*, i8*, i8* (%struct.png_struct_def*, i64)*, void (%struct.png_struct_def*, i8*)*) local_unnamed_addr #0 {
  %8 = alloca %struct.png_struct_def, align 8
  %9 = alloca [1 x %struct.__jmp_buf_tag], align 16
  %10 = bitcast %struct.png_struct_def* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 1168, i8* nonnull %10) #21
  %11 = bitcast [1 x %struct.__jmp_buf_tag]* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 200, i8* nonnull %11) #21
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %11, i8 -86, i64 200, i1 false)
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %10, i8 0, i64 1168, i1 false)
  %12 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %8, i64 0, i32 123
  store i32 1000000, i32* %12, align 4
  %13 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %8, i64 0, i32 124
  store i32 1000000, i32* %13, align 8
  %14 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %8, i64 0, i32 125
  store i32 128, i32* %14, align 4
  %15 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %8, i64 0, i32 126
  store i64 4000000, i64* %15, align 8
  call void @cr_png_set_mem_fn(%struct.png_struct_def* nonnull %8, i8* %4, i8* (%struct.png_struct_def*, i64)* %5, void (%struct.png_struct_def*, i8*)* %6) #21
  call void @cr_png_set_error_fn(%struct.png_struct_def* nonnull %8, i8* %1, void (%struct.png_struct_def*, i8*)* %2, void (%struct.png_struct_def*, i8*)* %3) #21
  %16 = getelementptr inbounds [1 x %struct.__jmp_buf_tag], [1 x %struct.__jmp_buf_tag]* %9, i64 0, i64 0
  %17 = call i32 @_setjmp(%struct.__jmp_buf_tag* nonnull %16) #22
  %18 = icmp eq i32 %17, 0
  br i1 %18, label %19, label %34

19:                                               ; preds = %7
  %20 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %8, i64 0, i32 2
  store [1 x %struct.__jmp_buf_tag]* %9, [1 x %struct.__jmp_buf_tag]** %20, align 8
  %21 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %8, i64 0, i32 3
  store i64 0, i64* %21, align 8
  %22 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %8, i64 0, i32 1
  store void (%struct.__jmp_buf_tag*, i32)* @longjmp, void (%struct.__jmp_buf_tag*, i32)** %22, align 8
  %23 = call i32 @cr_png_user_version_check(%struct.png_struct_def* nonnull %8, i8* %0)
  %24 = icmp eq i32 %23, 0
  br i1 %24, label %34, label %25

25:                                               ; preds = %19
  %26 = call noalias i8* @cr_png_malloc_warn(%struct.png_struct_def* nonnull %8, i64 1168) #21
  %27 = icmp eq i8* %26, null
  br i1 %27, label %34, label %28

28:                                               ; preds = %25
  %29 = bitcast i8* %26 to %struct.png_struct_def*
  %30 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %8, i64 0, i32 19, i32 8
  store i8* (i8*, i32, i32)* @cr_png_zalloc, i8* (i8*, i32, i32)** %30, align 8
  %31 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %8, i64 0, i32 19, i32 9
  store void (i8*, i8*)* @cr_png_zfree, void (i8*, i8*)** %31, align 8
  %32 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %8, i64 0, i32 19, i32 10
  store i8* %26, i8** %32, align 8
  %33 = bitcast void (%struct.__jmp_buf_tag*, i32)** %22 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %33, i8 0, i64 24, i1 false)
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %26, i8* nonnull align 8 %10, i64 1168, i1 false)
  br label %34

34:                                               ; preds = %7, %19, %25, %28
  %35 = phi %struct.png_struct_def* [ %29, %28 ], [ null, %25 ], [ null, %19 ], [ null, %7 ]
  call void @llvm.lifetime.end.p0i8(i64 200, i8* nonnull %11) #21
  call void @llvm.lifetime.end.p0i8(i64 1168, i8* nonnull %10) #21
  ret %struct.png_struct_def* %35
}

declare void @cr_png_set_mem_fn(%struct.png_struct_def*, i8*, i8* (%struct.png_struct_def*, i64)*, void (%struct.png_struct_def*, i8*)*) local_unnamed_addr #5

declare void @cr_png_set_error_fn(%struct.png_struct_def*, i8*, void (%struct.png_struct_def*, i8*)*, void (%struct.png_struct_def*, i8*)*) local_unnamed_addr #5

; Function Attrs: nounwind returns_twice
declare i32 @_setjmp(%struct.__jmp_buf_tag*) local_unnamed_addr #6

; Function Attrs: noreturn nounwind
declare void @longjmp(%struct.__jmp_buf_tag*, i32) #7

; Function Attrs: nounwind ssp uwtable
define hidden noalias %struct.png_info_def* @cr_png_create_info_struct(%struct.png_struct_def* noalias) local_unnamed_addr #0 {
  %2 = icmp eq %struct.png_struct_def* %0, null
  br i1 %2, label %8, label %3

3:                                                ; preds = %1
  %4 = tail call noalias i8* @cr_png_malloc_base(%struct.png_struct_def* nonnull %0, i64 232) #21
  %5 = bitcast i8* %4 to %struct.png_info_def*
  %6 = icmp eq i8* %4, null
  br i1 %6, label %8, label %7

7:                                                ; preds = %3
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %4, i8 0, i64 232, i1 false)
  br label %8

8:                                                ; preds = %7, %3, %1
  %9 = phi %struct.png_info_def* [ null, %1 ], [ %5, %3 ], [ %5, %7 ]
  ret %struct.png_info_def* %9
}

declare noalias i8* @cr_png_malloc_base(%struct.png_struct_def*, i64) local_unnamed_addr #5

; Function Attrs: nounwind ssp uwtable
define hidden void @cr_png_destroy_info_struct(%struct.png_struct_def* noalias, %struct.png_info_def**) local_unnamed_addr #0 {
  %3 = icmp eq %struct.png_struct_def* %0, null
  %4 = icmp eq %struct.png_info_def** %1, null
  %5 = or i1 %3, %4
  br i1 %5, label %11, label %6

6:                                                ; preds = %2
  %7 = load %struct.png_info_def*, %struct.png_info_def** %1, align 8
  %8 = bitcast %struct.png_info_def* %7 to i8*
  %9 = icmp eq %struct.png_info_def* %7, null
  br i1 %9, label %11, label %10

10:                                               ; preds = %6
  store %struct.png_info_def* null, %struct.png_info_def** %1, align 8
  tail call void @cr_png_free_data(%struct.png_struct_def* nonnull %0, %struct.png_info_def* nonnull %7, i32 65535, i32 -1)
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %8, i8 0, i64 232, i1 false)
  tail call void @cr_png_free(%struct.png_struct_def* nonnull %0, i8* nonnull %8) #21
  br label %11

11:                                               ; preds = %10, %6, %2
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @cr_png_free_data(%struct.png_struct_def* noalias, %struct.png_info_def* noalias, i32, i32) local_unnamed_addr #0 {
  %5 = icmp eq %struct.png_struct_def* %0, null
  %6 = icmp eq %struct.png_info_def* %1, null
  %7 = or i1 %5, %6
  br i1 %7, label %159, label %8

8:                                                ; preds = %4
  %9 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i64 0, i32 22
  %10 = load %struct.png_text_struct*, %struct.png_text_struct** %9, align 8
  %11 = icmp eq %struct.png_text_struct* %10, null
  br i1 %11, label %44, label %12

12:                                               ; preds = %8
  %13 = and i32 %2, 16384
  %14 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i64 0, i32 27
  %15 = load i32, i32* %14, align 4
  %16 = and i32 %13, %15
  %17 = icmp eq i32 %16, 0
  br i1 %17, label %44, label %18

18:                                               ; preds = %12
  %19 = icmp eq i32 %3, -1
  br i1 %19, label %20, label %24

20:                                               ; preds = %18
  %21 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i64 0, i32 20
  %22 = load i32, i32* %21, align 4
  %23 = icmp sgt i32 %22, 0
  br i1 %23, label %30, label %40

24:                                               ; preds = %18
  %25 = sext i32 %3 to i64
  %26 = getelementptr inbounds %struct.png_text_struct, %struct.png_text_struct* %10, i64 %25, i32 1
  %27 = load i8*, i8** %26, align 8
  tail call void @cr_png_free(%struct.png_struct_def* nonnull %0, i8* %27) #21
  %28 = load %struct.png_text_struct*, %struct.png_text_struct** %9, align 8
  %29 = getelementptr inbounds %struct.png_text_struct, %struct.png_text_struct* %28, i64 %25, i32 1
  store i8* null, i8** %29, align 8
  br label %44

30:                                               ; preds = %20, %30
  %31 = phi i64 [ %35, %30 ], [ 0, %20 ]
  %32 = phi %struct.png_text_struct* [ %39, %30 ], [ %10, %20 ]
  %33 = getelementptr inbounds %struct.png_text_struct, %struct.png_text_struct* %32, i64 %31, i32 1
  %34 = load i8*, i8** %33, align 8
  tail call void @cr_png_free(%struct.png_struct_def* %0, i8* %34) #21
  %35 = add nuw nsw i64 %31, 1
  %36 = load i32, i32* %21, align 4
  %37 = sext i32 %36 to i64
  %38 = icmp slt i64 %35, %37
  %39 = load %struct.png_text_struct*, %struct.png_text_struct** %9, align 8
  br i1 %38, label %30, label %40

40:                                               ; preds = %30, %20
  %41 = phi %struct.png_text_struct* [ %10, %20 ], [ %39, %30 ]
  %42 = bitcast %struct.png_text_struct* %41 to i8*
  tail call void @cr_png_free(%struct.png_struct_def* %0, i8* %42) #21
  store %struct.png_text_struct* null, %struct.png_text_struct** %9, align 8
  store i32 0, i32* %21, align 4
  %43 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i64 0, i32 21
  store i32 0, i32* %43, align 8
  br label %44

44:                                               ; preds = %12, %8, %24, %40
  %45 = and i32 %2, 8192
  %46 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i64 0, i32 27
  %47 = load i32, i32* %46, align 4
  %48 = and i32 %45, %47
  %49 = icmp eq i32 %48, 0
  br i1 %49, label %58, label %50

50:                                               ; preds = %44
  %51 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i64 0, i32 2
  %52 = load i32, i32* %51, align 8
  %53 = and i32 %52, -17
  store i32 %53, i32* %51, align 8
  %54 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i64 0, i32 24
  %55 = load i8*, i8** %54, align 8
  tail call void @cr_png_free(%struct.png_struct_def* %0, i8* %55) #21
  store i8* null, i8** %54, align 8
  %56 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i64 0, i32 6
  store i16 0, i16* %56, align 2
  %57 = load i32, i32* %46, align 4
  br label %58

58:                                               ; preds = %44, %50
  %59 = phi i32 [ %47, %44 ], [ %57, %50 ]
  %60 = and i32 %2, 16
  %61 = and i32 %60, %59
  %62 = icmp eq i32 %61, 0
  br i1 %62, label %72, label %63

63:                                               ; preds = %58
  %64 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i64 0, i32 17
  %65 = load i8*, i8** %64, align 8
  tail call void @cr_png_free(%struct.png_struct_def* %0, i8* %65) #21
  %66 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i64 0, i32 18
  %67 = load i8*, i8** %66, align 8
  tail call void @cr_png_free(%struct.png_struct_def* %0, i8* %67) #21
  %68 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i64 0, i32 2
  %69 = bitcast i8** %64 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %69, i8 0, i64 16, i1 false)
  %70 = load i32, i32* %68, align 8
  %71 = and i32 %70, -4097
  store i32 %71, i32* %68, align 8
  br label %72

72:                                               ; preds = %58, %63
  %73 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i64 0, i32 28
  %74 = load %struct.png_unknown_chunk_t*, %struct.png_unknown_chunk_t** %73, align 8
  %75 = icmp eq %struct.png_unknown_chunk_t* %74, null
  br i1 %75, label %106, label %76

76:                                               ; preds = %72
  %77 = and i32 %2, 512
  %78 = load i32, i32* %46, align 4
  %79 = and i32 %77, %78
  %80 = icmp eq i32 %79, 0
  br i1 %80, label %106, label %81

81:                                               ; preds = %76
  %82 = icmp eq i32 %3, -1
  br i1 %82, label %83, label %87

83:                                               ; preds = %81
  %84 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i64 0, i32 29
  %85 = load i32, i32* %84, align 8
  %86 = icmp sgt i32 %85, 0
  br i1 %86, label %93, label %103

87:                                               ; preds = %81
  %88 = sext i32 %3 to i64
  %89 = getelementptr inbounds %struct.png_unknown_chunk_t, %struct.png_unknown_chunk_t* %74, i64 %88, i32 1
  %90 = load i8*, i8** %89, align 8
  tail call void @cr_png_free(%struct.png_struct_def* %0, i8* %90) #21
  %91 = load %struct.png_unknown_chunk_t*, %struct.png_unknown_chunk_t** %73, align 8
  %92 = getelementptr inbounds %struct.png_unknown_chunk_t, %struct.png_unknown_chunk_t* %91, i64 %88, i32 1
  store i8* null, i8** %92, align 8
  br label %106

93:                                               ; preds = %83, %93
  %94 = phi i64 [ %98, %93 ], [ 0, %83 ]
  %95 = phi %struct.png_unknown_chunk_t* [ %102, %93 ], [ %74, %83 ]
  %96 = getelementptr inbounds %struct.png_unknown_chunk_t, %struct.png_unknown_chunk_t* %95, i64 %94, i32 1
  %97 = load i8*, i8** %96, align 8
  tail call void @cr_png_free(%struct.png_struct_def* %0, i8* %97) #21
  %98 = add nuw nsw i64 %94, 1
  %99 = load i32, i32* %84, align 8
  %100 = sext i32 %99 to i64
  %101 = icmp slt i64 %98, %100
  %102 = load %struct.png_unknown_chunk_t*, %struct.png_unknown_chunk_t** %73, align 8
  br i1 %101, label %93, label %103

103:                                              ; preds = %93, %83
  %104 = phi %struct.png_unknown_chunk_t* [ %74, %83 ], [ %102, %93 ]
  %105 = getelementptr inbounds %struct.png_unknown_chunk_t, %struct.png_unknown_chunk_t* %104, i64 0, i32 0, i64 0
  tail call void @cr_png_free(%struct.png_struct_def* %0, i8* %105) #21
  store %struct.png_unknown_chunk_t* null, %struct.png_unknown_chunk_t** %73, align 8
  store i32 0, i32* %84, align 8
  br label %106

106:                                              ; preds = %76, %72, %87, %103
  %107 = and i32 %2, 4096
  %108 = load i32, i32* %46, align 4
  %109 = and i32 %107, %108
  %110 = icmp eq i32 %109, 0
  br i1 %110, label %120, label %111

111:                                              ; preds = %106
  %112 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i64 0, i32 4
  %113 = bitcast %struct.png_color_struct** %112 to i8**
  %114 = load i8*, i8** %113, align 8
  tail call void @cr_png_free(%struct.png_struct_def* %0, i8* %114) #21
  store %struct.png_color_struct* null, %struct.png_color_struct** %112, align 8
  %115 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i64 0, i32 2
  %116 = load i32, i32* %115, align 8
  %117 = and i32 %116, -9
  store i32 %117, i32* %115, align 8
  %118 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i64 0, i32 5
  store i16 0, i16* %118, align 8
  %119 = load i32, i32* %46, align 4
  br label %120

120:                                              ; preds = %106, %111
  %121 = phi i32 [ %108, %106 ], [ %119, %111 ]
  %122 = and i32 %2, 64
  %123 = and i32 %122, %121
  %124 = icmp eq i32 %123, 0
  br i1 %124, label %152, label %125

125:                                              ; preds = %120
  %126 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i64 0, i32 30
  %127 = load i8**, i8*** %126, align 8
  %128 = icmp eq i8** %127, null
  br i1 %128, label %147, label %129

129:                                              ; preds = %125
  %130 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i64 0, i32 1
  %131 = load i32, i32* %130, align 4
  %132 = icmp eq i32 %131, 0
  br i1 %132, label %143, label %133

133:                                              ; preds = %129, %133
  %134 = phi i64 [ %138, %133 ], [ 0, %129 ]
  %135 = phi i8** [ %142, %133 ], [ %127, %129 ]
  %136 = getelementptr inbounds i8*, i8** %135, i64 %134
  %137 = load i8*, i8** %136, align 8
  tail call void @cr_png_free(%struct.png_struct_def* %0, i8* %137) #21
  %138 = add nuw nsw i64 %134, 1
  %139 = load i32, i32* %130, align 4
  %140 = zext i32 %139 to i64
  %141 = icmp ult i64 %138, %140
  %142 = load i8**, i8*** %126, align 8
  br i1 %141, label %133, label %143

143:                                              ; preds = %133, %129
  %144 = phi i8** [ %127, %129 ], [ %142, %133 ]
  %145 = bitcast i8** %144 to i8*
  tail call void @cr_png_free(%struct.png_struct_def* %0, i8* %145) #21
  store i8** null, i8*** %126, align 8
  %146 = load i32, i32* %46, align 4
  br label %147

147:                                              ; preds = %125, %143
  %148 = phi i32 [ %121, %125 ], [ %146, %143 ]
  %149 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i64 0, i32 2
  %150 = load i32, i32* %149, align 8
  %151 = and i32 %150, -32769
  store i32 %151, i32* %149, align 8
  br label %152

152:                                              ; preds = %120, %147
  %153 = phi i32 [ %121, %120 ], [ %148, %147 ]
  %154 = icmp eq i32 %3, -1
  %155 = and i32 %2, -16929
  %156 = select i1 %154, i32 %2, i32 %155
  %157 = xor i32 %156, -1
  %158 = and i32 %153, %157
  store i32 %158, i32* %46, align 4
  br label %159

159:                                              ; preds = %4, %152
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @cr_png_info_init_3(%struct.png_info_def** nocapture, i64) local_unnamed_addr #0 {
  %3 = load %struct.png_info_def*, %struct.png_info_def** %0, align 8
  %4 = icmp eq %struct.png_info_def* %3, null
  br i1 %4, label %17, label %5

5:                                                ; preds = %2
  %6 = icmp ult i64 %1, 232
  br i1 %6, label %7, label %14

7:                                                ; preds = %5
  store %struct.png_info_def* null, %struct.png_info_def** %0, align 8
  %8 = bitcast %struct.png_info_def* %3 to i8*
  tail call void @free(i8* %8) #21
  %9 = tail call noalias i8* @cr_png_malloc_base(%struct.png_struct_def* null, i64 232) #21
  %10 = icmp eq i8* %9, null
  br i1 %10, label %17, label %11

11:                                               ; preds = %7
  %12 = bitcast i8* %9 to %struct.png_info_def*
  %13 = bitcast %struct.png_info_def** %0 to i8**
  store i8* %9, i8** %13, align 8
  br label %14

14:                                               ; preds = %11, %5
  %15 = phi %struct.png_info_def* [ %12, %11 ], [ %3, %5 ]
  %16 = bitcast %struct.png_info_def* %15 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %16, i8 0, i64 232, i1 false)
  br label %17

17:                                               ; preds = %7, %2, %14
  ret void
}

; Function Attrs: nounwind
declare void @free(i8* nocapture) local_unnamed_addr #8

; Function Attrs: nounwind ssp uwtable
define hidden void @cr_png_data_freer(%struct.png_struct_def* noalias, %struct.png_info_def* noalias, i32, i32) local_unnamed_addr #0 {
  %5 = icmp eq %struct.png_struct_def* %0, null
  %6 = icmp eq %struct.png_info_def* %1, null
  %7 = or i1 %5, %6
  br i1 %7, label %19, label %8

8:                                                ; preds = %4
  switch i32 %2, label %18 [
    i32 1, label %9
    i32 2, label %13
  ]

9:                                                ; preds = %8
  %10 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i64 0, i32 27
  %11 = load i32, i32* %10, align 4
  %12 = or i32 %11, %3
  store i32 %12, i32* %10, align 4
  br label %19

13:                                               ; preds = %8
  %14 = xor i32 %3, -1
  %15 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i64 0, i32 27
  %16 = load i32, i32* %15, align 4
  %17 = and i32 %16, %14
  store i32 %17, i32* %15, align 4
  br label %19

18:                                               ; preds = %8
  tail call void @cr_png_error(%struct.png_struct_def* nonnull %0, i8* getelementptr inbounds ([42 x i8], [42 x i8]* @.str.5, i64 0, i64 0)) #19
  unreachable

19:                                               ; preds = %4, %13, %9
  ret void
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden i8* @cr_png_get_io_ptr(%struct.png_struct_def* noalias readonly) local_unnamed_addr #9 {
  %2 = icmp eq %struct.png_struct_def* %0, null
  br i1 %2, label %6, label %3

3:                                                ; preds = %1
  %4 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 9
  %5 = load i8*, i8** %4, align 8
  br label %6

6:                                                ; preds = %1, %3
  %7 = phi i8* [ %5, %3 ], [ null, %1 ]
  ret i8* %7
}

; Function Attrs: nofree norecurse nounwind ssp uwtable writeonly
define hidden void @cr_png_init_io(%struct.png_struct_def* noalias, %struct._IO_FILE*) local_unnamed_addr #10 {
  %3 = icmp eq %struct.png_struct_def* %0, null
  br i1 %3, label %7, label %4

4:                                                ; preds = %2
  %5 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 9
  %6 = bitcast i8** %5 to %struct._IO_FILE**
  store %struct._IO_FILE* %1, %struct._IO_FILE** %6, align 8
  br label %7

7:                                                ; preds = %2, %4
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @cr_png_save_int_32(i8*, i32) local_unnamed_addr #0 {
  tail call void @cr_png_save_uint_32(i8* %0, i32 %1) #21
  ret void
}

declare void @cr_png_save_uint_32(i8*, i32) local_unnamed_addr #5

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden i8* @cr_png_get_copyright(%struct.png_struct_def* noalias nocapture readnone) local_unnamed_addr #11 {
  ret i8* getelementptr inbounds ([219 x i8], [219 x i8]* @.str.6, i64 0, i64 0)
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden i8* @cr_png_get_libpng_ver(%struct.png_struct_def* noalias nocapture readnone) local_unnamed_addr #11 {
  ret i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.2, i64 0, i64 0)
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden i8* @cr_png_get_header_ver(%struct.png_struct_def* noalias nocapture readnone) local_unnamed_addr #11 {
  ret i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.2, i64 0, i64 0)
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden i8* @cr_png_get_header_version(%struct.png_struct_def* noalias nocapture readnone) local_unnamed_addr #11 {
  ret i8* getelementptr inbounds ([42 x i8], [42 x i8]* @.str.7, i64 0, i64 0)
}

; Function Attrs: nounwind readonly ssp uwtable
define hidden i32 @cr_png_handle_as_unknown(%struct.png_struct_def* noalias readonly, i8* readonly) local_unnamed_addr #3 {
  %3 = icmp eq %struct.png_struct_def* %0, null
  %4 = icmp eq i8* %1, null
  %5 = or i1 %3, %4
  br i1 %5, label %27, label %6

6:                                                ; preds = %2
  %7 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 112
  %8 = load i32, i32* %7, align 4
  %9 = icmp eq i32 %8, 0
  br i1 %9, label %27, label %10

10:                                               ; preds = %6
  %11 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 113
  %12 = load i8*, i8** %11, align 8
  %13 = mul i32 %8, 5
  %14 = zext i32 %13 to i64
  %15 = getelementptr inbounds i8, i8* %12, i64 %14
  br label %16

16:                                               ; preds = %25, %10
  %17 = phi i8* [ %15, %10 ], [ %18, %25 ]
  %18 = getelementptr inbounds i8, i8* %17, i64 -5
  %19 = tail call i32 @bcmp(i8* %1, i8* %18, i64 4)
  %20 = icmp eq i32 %19, 0
  br i1 %20, label %21, label %25

21:                                               ; preds = %16
  %22 = getelementptr inbounds i8, i8* %17, i64 -1
  %23 = load i8, i8* %22, align 1
  %24 = zext i8 %23 to i32
  br label %27

25:                                               ; preds = %16
  %26 = icmp ugt i8* %18, %12
  br i1 %26, label %16, label %27

27:                                               ; preds = %25, %2, %6, %21
  %28 = phi i32 [ %24, %21 ], [ 0, %6 ], [ 0, %2 ], [ 0, %25 ]
  ret i32 %28
}

; Function Attrs: nounwind readonly ssp uwtable
define hidden i32 @cr_png_chunk_unknown_handling(%struct.png_struct_def* noalias readonly, i32) local_unnamed_addr #3 {
  %3 = alloca [5 x i8], align 1
  %4 = getelementptr inbounds [5 x i8], [5 x i8]* %3, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 5, i8* nonnull %4) #21
  %5 = getelementptr inbounds [5 x i8], [5 x i8]* %3, i64 0, i64 1
  %6 = getelementptr inbounds [5 x i8], [5 x i8]* %3, i64 0, i64 2
  %7 = getelementptr inbounds [5 x i8], [5 x i8]* %3, i64 0, i64 3
  %8 = getelementptr inbounds [5 x i8], [5 x i8]* %3, i64 0, i64 4
  %9 = lshr i32 %1, 24
  %10 = trunc i32 %9 to i8
  store i8 %10, i8* %4, align 1
  %11 = lshr i32 %1, 16
  %12 = trunc i32 %11 to i8
  store i8 %12, i8* %5, align 1
  %13 = lshr i32 %1, 8
  %14 = trunc i32 %13 to i8
  store i8 %14, i8* %6, align 1
  %15 = trunc i32 %1 to i8
  store i8 %15, i8* %7, align 1
  store i8 0, i8* %8, align 1
  %16 = icmp eq %struct.png_struct_def* %0, null
  br i1 %16, label %38, label %17

17:                                               ; preds = %2
  %18 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 112
  %19 = load i32, i32* %18, align 4, !alias.scope !2
  %20 = icmp eq i32 %19, 0
  br i1 %20, label %38, label %21

21:                                               ; preds = %17
  %22 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 113
  %23 = load i8*, i8** %22, align 8, !alias.scope !2
  %24 = mul i32 %19, 5
  %25 = zext i32 %24 to i64
  %26 = getelementptr inbounds i8, i8* %23, i64 %25
  br label %27

27:                                               ; preds = %36, %21
  %28 = phi i8* [ %26, %21 ], [ %29, %36 ]
  %29 = getelementptr inbounds i8, i8* %28, i64 -5
  %30 = call i32 @bcmp(i8* nonnull %4, i8* %29, i64 4) #21
  %31 = icmp eq i32 %30, 0
  br i1 %31, label %32, label %36

32:                                               ; preds = %27
  %33 = getelementptr inbounds i8, i8* %28, i64 -1
  %34 = load i8, i8* %33, align 1
  %35 = zext i8 %34 to i32
  br label %38

36:                                               ; preds = %27
  %37 = icmp ugt i8* %29, %23
  br i1 %37, label %27, label %38

38:                                               ; preds = %36, %2, %17, %32
  %39 = phi i32 [ %35, %32 ], [ 0, %17 ], [ 0, %2 ], [ 0, %36 ]
  call void @llvm.lifetime.end.p0i8(i64 5, i8* nonnull %4) #21
  ret i32 %39
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @cr_png_reset_zstream(%struct.png_struct_def* noalias) local_unnamed_addr #0 {
  %2 = icmp eq %struct.png_struct_def* %0, null
  br i1 %2, label %6, label %3

3:                                                ; preds = %1
  %4 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 19
  %5 = tail call i32 @Cr_z_inflateReset(%struct.z_stream_s* %4) #21
  br label %6

6:                                                ; preds = %1, %3
  %7 = phi i32 [ %5, %3 ], [ -2, %1 ]
  ret i32 %7
}

declare i32 @Cr_z_inflateReset(%struct.z_stream_s*) local_unnamed_addr #5

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden i32 @cr_png_access_version_number() local_unnamed_addr #11 {
  ret i32 10637
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @cr_png_zstream_error(%struct.png_struct_def* noalias nocapture, i32) local_unnamed_addr #12 {
  %3 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 19, i32 6
  %4 = load i8*, i8** %3, align 8
  %5 = icmp eq i8* %4, null
  br i1 %5, label %6, label %15

6:                                                ; preds = %2
  %7 = add i32 %1, 7
  %8 = icmp ult i32 %7, 10
  br i1 %8, label %9, label %13

9:                                                ; preds = %6
  %10 = sext i32 %7 to i64
  %11 = getelementptr inbounds [10 x i8*], [10 x i8*]* @switch.table.cr_png_zstream_error, i64 0, i64 %10
  %12 = load i8*, i8** %11, align 8
  br label %13

13:                                               ; preds = %6, %9
  %14 = phi i8* [ %12, %9 ], [ getelementptr inbounds ([28 x i8], [28 x i8]* @.str.8, i64 0, i64 0), %6 ]
  store i8* %14, i8** %3, align 8
  br label %15

15:                                               ; preds = %13, %2
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @cr_png_colorspace_set_gamma(%struct.png_struct_def* noalias, %struct.png_colorspace* noalias nocapture, i32) local_unnamed_addr #0 {
  %4 = add i32 %2, -16
  %5 = icmp ugt i32 %4, 624999984
  br i1 %5, label %6, label %9

6:                                                ; preds = %3
  %7 = getelementptr inbounds %struct.png_colorspace, %struct.png_colorspace* %1, i64 0, i32 4
  %8 = load i16, i16* %7, align 2
  br label %51

9:                                                ; preds = %3
  %10 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 15
  %11 = load i32, i32* %10, align 4
  %12 = trunc i32 %11 to i16
  %13 = icmp sgt i16 %12, -1
  %14 = getelementptr inbounds %struct.png_colorspace, %struct.png_colorspace* %1, i64 0, i32 4
  %15 = load i16, i16* %14, align 2
  %16 = and i16 %15, 8
  %17 = icmp eq i16 %16, 0
  %18 = or i1 %13, %17
  br i1 %18, label %19, label %51

19:                                               ; preds = %9
  %20 = getelementptr inbounds %struct.png_colorspace, %struct.png_colorspace* %1, i64 0, i32 4
  %21 = icmp slt i16 %15, 0
  br i1 %21, label %56, label %22

22:                                               ; preds = %19
  %23 = and i16 %15, 1
  %24 = icmp eq i16 %23, 0
  br i1 %24, label %48, label %25

25:                                               ; preds = %22
  %26 = getelementptr inbounds %struct.png_colorspace, %struct.png_colorspace* %1, i64 0, i32 0
  %27 = load i32, i32* %26, align 4, !alias.scope !5, !noalias !8
  %28 = icmp eq i32 %27, 0
  br i1 %28, label %43, label %29

29:                                               ; preds = %25
  %30 = sitofp i32 %27 to double
  %31 = fmul double %30, 1.000000e+05
  %32 = sitofp i32 %2 to double
  %33 = fdiv double %31, %32
  %34 = fadd double %33, 5.000000e-01
  %35 = tail call double @llvm.floor.f64(double %34) #21
  %36 = fcmp ole double %35, 0x41DFFFFFFFC00000
  %37 = fcmp oge double %35, 0xC1E0000000000000
  %38 = and i1 %36, %37
  br i1 %38, label %39, label %43

39:                                               ; preds = %29
  %40 = fptosi double %35 to i32
  %41 = add i32 %40, -95000
  %42 = icmp ult i32 %41, 10001
  br i1 %42, label %48, label %43

43:                                               ; preds = %39, %29, %25
  %44 = and i16 %15, 32
  %45 = icmp eq i16 %44, 0
  br i1 %45, label %46, label %47

46:                                               ; preds = %43
  tail call void @cr_png_chunk_report(%struct.png_struct_def* %0, i8* getelementptr inbounds ([43 x i8], [43 x i8]* @.str.65, i64 0, i64 0), i32 0) #21, !noalias !5
  br label %48

47:                                               ; preds = %43
  tail call void @cr_png_chunk_report(%struct.png_struct_def* %0, i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str.64, i64 0, i64 0), i32 2) #21, !noalias !5
  br label %56

48:                                               ; preds = %22, %39, %46
  %49 = getelementptr inbounds %struct.png_colorspace, %struct.png_colorspace* %1, i64 0, i32 0
  store i32 %2, i32* %49, align 4
  %50 = or i16 %15, 9
  store i16 %50, i16* %20, align 2
  br label %56

51:                                               ; preds = %9, %6
  %52 = phi i16 [ %8, %6 ], [ %15, %9 ]
  %53 = phi i8* [ getelementptr inbounds ([25 x i8], [25 x i8]* @.str.18, i64 0, i64 0), %6 ], [ getelementptr inbounds ([10 x i8], [10 x i8]* @.str.19, i64 0, i64 0), %9 ]
  %54 = getelementptr inbounds %struct.png_colorspace, %struct.png_colorspace* %1, i64 0, i32 4
  %55 = or i16 %52, -32768
  store i16 %55, i16* %54, align 2
  tail call void @cr_png_chunk_report(%struct.png_struct_def* %0, i8* nonnull %53, i32 1) #21
  br label %56

56:                                               ; preds = %47, %48, %19, %51
  ret void
}

declare void @cr_png_chunk_report(%struct.png_struct_def*, i8*, i32) local_unnamed_addr #5

; Function Attrs: nounwind ssp uwtable
define hidden void @cr_png_colorspace_sync_info(%struct.png_struct_def* noalias, %struct.png_info_def* noalias) local_unnamed_addr #0 {
  %3 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i64 0, i32 16, i32 4
  %4 = load i16, i16* %3, align 2
  %5 = icmp slt i16 %4, 0
  br i1 %5, label %6, label %30

6:                                                ; preds = %2
  %7 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i64 0, i32 2
  %8 = load i32, i32* %7, align 8
  %9 = and i32 %8, -6150
  store i32 %9, i32* %7, align 8
  %10 = icmp eq %struct.png_struct_def* %0, null
  %11 = icmp eq %struct.png_info_def* %1, null
  %12 = or i1 %10, %11
  br i1 %12, label %49, label %13

13:                                               ; preds = %6
  %14 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i64 0, i32 27
  %15 = load i32, i32* %14, align 4, !alias.scope !10, !noalias !13
  %16 = and i32 %15, 16
  %17 = icmp eq i32 %16, 0
  br i1 %17, label %27, label %18

18:                                               ; preds = %13
  %19 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i64 0, i32 17
  %20 = load i8*, i8** %19, align 8, !alias.scope !10, !noalias !13
  tail call void @cr_png_free(%struct.png_struct_def* nonnull %0, i8* %20) #21
  %21 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i64 0, i32 18
  %22 = load i8*, i8** %21, align 8, !alias.scope !10, !noalias !13
  tail call void @cr_png_free(%struct.png_struct_def* nonnull %0, i8* %22) #21
  %23 = bitcast i8** %19 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %23, i8 0, i64 16, i1 false) #21, !alias.scope !10, !noalias !13
  %24 = load i32, i32* %7, align 8, !alias.scope !10, !noalias !13
  %25 = and i32 %24, -4097
  store i32 %25, i32* %7, align 8, !alias.scope !10, !noalias !13
  %26 = load i32, i32* %14, align 4, !alias.scope !10, !noalias !13
  br label %27

27:                                               ; preds = %13, %18
  %28 = phi i32 [ %15, %13 ], [ %26, %18 ]
  %29 = and i32 %28, -17
  store i32 %29, i32* %14, align 4, !alias.scope !10, !noalias !13
  br label %49

30:                                               ; preds = %2
  %31 = trunc i16 %4 to i8
  %32 = icmp slt i8 %31, 0
  %33 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i64 0, i32 2
  %34 = load i32, i32* %33, align 8
  %35 = and i32 %34, -2049
  %36 = or i32 %34, 2048
  %37 = select i1 %32, i32 %36, i32 %35
  %38 = and i16 %4, 2
  %39 = icmp eq i16 %38, 0
  %40 = and i32 %37, -5
  %41 = or i32 %37, 4
  %42 = select i1 %39, i32 %40, i32 %41
  store i32 %42, i32* %33, align 8
  %43 = and i16 %4, 1
  %44 = icmp eq i16 %43, 0
  br i1 %44, label %47, label %45

45:                                               ; preds = %30
  %46 = or i32 %42, 1
  store i32 %46, i32* %33, align 8
  br label %49

47:                                               ; preds = %30
  %48 = and i32 %42, -2
  store i32 %48, i32* %33, align 8
  br label %49

49:                                               ; preds = %27, %6, %45, %47
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @cr_png_colorspace_sync(%struct.png_struct_def* noalias, %struct.png_info_def* noalias) local_unnamed_addr #0 {
  %3 = icmp eq %struct.png_info_def* %1, null
  br i1 %3, label %9, label %4

4:                                                ; preds = %2
  %5 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i64 0, i32 16
  %6 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 134
  %7 = bitcast %struct.png_colorspace* %5 to i8*
  %8 = bitcast %struct.png_colorspace* %6 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %7, i8* align 8 %8, i64 76, i1 false)
  tail call void @cr_png_colorspace_sync_info(%struct.png_struct_def* %0, %struct.png_info_def* nonnull %1)
  br label %9

9:                                                ; preds = %2, %4
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @cr_png_colorspace_set_chromaticities(%struct.png_struct_def* noalias, %struct.png_colorspace* noalias nocapture, %struct.png_xy* nocapture readonly, i32) local_unnamed_addr #0 {
  %5 = alloca %struct.png_XYZ, align 4
  %6 = bitcast %struct.png_XYZ* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 36, i8* nonnull %6) #21
  call void @llvm.memset.p0i8.i64(i8* nonnull align 4 %6, i8 -86, i64 36, i1 false)
  %7 = call fastcc i32 @png_colorspace_check_xy(%struct.png_XYZ* nonnull %5, %struct.png_xy* %2)
  switch i32 %7, label %41 [
    i32 0, label %8
    i32 1, label %37
  ]

8:                                                ; preds = %4
  %9 = getelementptr inbounds %struct.png_colorspace, %struct.png_colorspace* %1, i64 0, i32 4
  %10 = load i16, i16* %9, align 2, !alias.scope !15, !noalias !18
  %11 = icmp slt i16 %10, 0
  br i1 %11, label %45, label %12

12:                                               ; preds = %8
  %13 = icmp sgt i32 %3, 1
  %14 = and i16 %10, 2
  %15 = icmp eq i16 %14, 0
  %16 = or i1 %13, %15
  br i1 %16, label %25, label %17

17:                                               ; preds = %12
  %18 = getelementptr inbounds %struct.png_colorspace, %struct.png_colorspace* %1, i64 0, i32 1
  %19 = tail call fastcc i32 @png_colorspace_endpoints_match(%struct.png_xy* %2, %struct.png_xy* %18, i32 100) #21, !noalias !18
  %20 = icmp eq i32 %19, 0
  br i1 %20, label %21, label %23

21:                                               ; preds = %17
  %22 = or i16 %10, -32768
  store i16 %22, i16* %9, align 2, !alias.scope !15, !noalias !18
  tail call void @cr_png_benign_error(%struct.png_struct_def* %0, i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.66, i64 0, i64 0)) #21, !noalias !15
  br label %45

23:                                               ; preds = %17
  %24 = icmp eq i32 %3, 0
  br i1 %24, label %45, label %25

25:                                               ; preds = %23, %12
  %26 = getelementptr inbounds %struct.png_colorspace, %struct.png_colorspace* %1, i64 0, i32 1
  %27 = bitcast %struct.png_xy* %26 to i8*
  %28 = bitcast %struct.png_xy* %2 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %27, i8* align 4 %28, i64 32, i1 false) #21, !noalias !18
  %29 = getelementptr inbounds %struct.png_colorspace, %struct.png_colorspace* %1, i64 0, i32 2
  %30 = bitcast %struct.png_XYZ* %29 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %30, i8* nonnull align 4 %6, i64 36, i1 false) #21, !noalias !18
  %31 = tail call fastcc i32 @png_colorspace_endpoints_match(%struct.png_xy* %2, %struct.png_xy* nonnull @sRGB_xy, i32 1000) #21, !noalias !15
  %32 = icmp eq i32 %31, 0
  %33 = and i16 %10, -67
  %34 = or i16 %33, 2
  %35 = or i16 %10, 66
  %36 = select i1 %32, i16 %34, i16 %35
  store i16 %36, i16* %9, align 2, !alias.scope !15, !noalias !18
  br label %45

37:                                               ; preds = %4
  %38 = getelementptr inbounds %struct.png_colorspace, %struct.png_colorspace* %1, i64 0, i32 4
  %39 = load i16, i16* %38, align 2
  %40 = or i16 %39, -32768
  store i16 %40, i16* %38, align 2
  tail call void @cr_png_benign_error(%struct.png_struct_def* %0, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.20, i64 0, i64 0)) #21
  br label %45

41:                                               ; preds = %4
  %42 = getelementptr inbounds %struct.png_colorspace, %struct.png_colorspace* %1, i64 0, i32 4
  %43 = load i16, i16* %42, align 2
  %44 = or i16 %43, -32768
  store i16 %44, i16* %42, align 2
  tail call void @cr_png_error(%struct.png_struct_def* %0, i8* getelementptr inbounds ([39 x i8], [39 x i8]* @.str.21, i64 0, i64 0)) #19
  unreachable

45:                                               ; preds = %25, %23, %21, %8, %37
  %46 = phi i32 [ 0, %37 ], [ 0, %21 ], [ 2, %25 ], [ 0, %8 ], [ 1, %23 ]
  call void @llvm.lifetime.end.p0i8(i64 36, i8* nonnull %6) #21
  ret i32 %46
}

; Function Attrs: nounwind ssp uwtable
define internal fastcc i32 @png_colorspace_check_xy(%struct.png_XYZ* nocapture, %struct.png_xy* nocapture readonly) unnamed_addr #0 {
  %3 = alloca %struct.png_xy, align 4
  %4 = bitcast %struct.png_xy* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %4) #21
  %5 = getelementptr inbounds %struct.png_xy, %struct.png_xy* %1, i64 0, i32 0
  %6 = bitcast %struct.png_xy* %3 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 4 %6, i8 -86, i64 32, i1 false)
  %7 = load i32, i32* %5, align 4
  %8 = icmp ugt i32 %7, 100000
  br i1 %8, label %391, label %9

9:                                                ; preds = %2
  %10 = getelementptr inbounds %struct.png_xy, %struct.png_xy* %1, i64 0, i32 1
  %11 = load i32, i32* %10, align 4
  %12 = icmp slt i32 %11, 0
  %13 = sub nuw nsw i32 100000, %7
  %14 = icmp sgt i32 %11, %13
  %15 = or i1 %12, %14
  br i1 %15, label %391, label %16

16:                                               ; preds = %9
  %17 = getelementptr inbounds %struct.png_xy, %struct.png_xy* %1, i64 0, i32 2
  %18 = load i32, i32* %17, align 4
  %19 = icmp ugt i32 %18, 100000
  br i1 %19, label %391, label %20

20:                                               ; preds = %16
  %21 = getelementptr inbounds %struct.png_xy, %struct.png_xy* %1, i64 0, i32 3
  %22 = load i32, i32* %21, align 4
  %23 = icmp slt i32 %22, 0
  %24 = sub nuw nsw i32 100000, %18
  %25 = icmp sgt i32 %22, %24
  %26 = or i1 %23, %25
  br i1 %26, label %391, label %27

27:                                               ; preds = %20
  %28 = getelementptr inbounds %struct.png_xy, %struct.png_xy* %1, i64 0, i32 4
  %29 = load i32, i32* %28, align 4
  %30 = icmp ugt i32 %29, 100000
  br i1 %30, label %391, label %31

31:                                               ; preds = %27
  %32 = getelementptr inbounds %struct.png_xy, %struct.png_xy* %1, i64 0, i32 5
  %33 = load i32, i32* %32, align 4
  %34 = icmp slt i32 %33, 0
  %35 = sub nuw nsw i32 100000, %29
  %36 = icmp sgt i32 %33, %35
  %37 = or i1 %34, %36
  br i1 %37, label %391, label %38

38:                                               ; preds = %31
  %39 = getelementptr inbounds %struct.png_xy, %struct.png_xy* %1, i64 0, i32 6
  %40 = load i32, i32* %39, align 4
  %41 = icmp ugt i32 %40, 100000
  br i1 %41, label %391, label %42

42:                                               ; preds = %38
  %43 = getelementptr inbounds %struct.png_xy, %struct.png_xy* %1, i64 0, i32 7
  %44 = load i32, i32* %43, align 4
  %45 = icmp slt i32 %44, 5
  %46 = sub nuw nsw i32 100000, %40
  %47 = icmp sgt i32 %44, %46
  %48 = or i1 %45, %47
  br i1 %48, label %391, label %49

49:                                               ; preds = %42
  %50 = sub nsw i32 %18, %29
  %51 = sub nsw i32 %11, %33
  %52 = icmp eq i32 %50, 0
  %53 = icmp eq i32 %51, 0
  %54 = or i1 %52, %53
  br i1 %54, label %67, label %55

55:                                               ; preds = %49
  %56 = sitofp i32 %50 to double
  %57 = sitofp i32 %51 to double
  %58 = fmul double %56, %57
  %59 = fdiv double %58, 7.000000e+00
  %60 = fadd double %59, 5.000000e-01
  %61 = tail call double @llvm.floor.f64(double %60) #21
  %62 = fcmp ole double %61, 0x41DFFFFFFFC00000
  %63 = fcmp oge double %61, 0xC1E0000000000000
  %64 = and i1 %62, %63
  br i1 %64, label %65, label %391

65:                                               ; preds = %55
  %66 = fptosi double %61 to i32
  br label %67

67:                                               ; preds = %65, %49
  %68 = phi i32 [ 0, %49 ], [ %66, %65 ]
  %69 = sub nsw i32 %22, %33
  %70 = sub nsw i32 %7, %29
  %71 = icmp eq i32 %69, 0
  %72 = icmp eq i32 %70, 0
  %73 = or i1 %72, %71
  br i1 %73, label %86, label %74

74:                                               ; preds = %67
  %75 = sitofp i32 %69 to double
  %76 = sitofp i32 %70 to double
  %77 = fmul double %76, %75
  %78 = fdiv double %77, 7.000000e+00
  %79 = fadd double %78, 5.000000e-01
  %80 = tail call double @llvm.floor.f64(double %79) #21
  %81 = fcmp ole double %80, 0x41DFFFFFFFC00000
  %82 = fcmp oge double %80, 0xC1E0000000000000
  %83 = and i1 %81, %82
  br i1 %83, label %84, label %391

84:                                               ; preds = %74
  %85 = fptosi double %80 to i32
  br label %86

86:                                               ; preds = %84, %67
  %87 = phi i32 [ 0, %67 ], [ %85, %84 ]
  %88 = sub nsw i32 %68, %87
  %89 = sub nsw i32 %44, %33
  %90 = icmp eq i32 %89, 0
  %91 = or i1 %52, %90
  br i1 %91, label %104, label %92

92:                                               ; preds = %86
  %93 = sitofp i32 %50 to double
  %94 = sitofp i32 %89 to double
  %95 = fmul double %93, %94
  %96 = fdiv double %95, 7.000000e+00
  %97 = fadd double %96, 5.000000e-01
  %98 = tail call double @llvm.floor.f64(double %97) #21
  %99 = fcmp ole double %98, 0x41DFFFFFFFC00000
  %100 = fcmp oge double %98, 0xC1E0000000000000
  %101 = and i1 %99, %100
  br i1 %101, label %102, label %391

102:                                              ; preds = %92
  %103 = fptosi double %98 to i32
  br label %104

104:                                              ; preds = %102, %86
  %105 = phi i32 [ 0, %86 ], [ %103, %102 ]
  %106 = sub nsw i32 %40, %29
  %107 = icmp eq i32 %106, 0
  %108 = or i1 %71, %107
  br i1 %108, label %121, label %109

109:                                              ; preds = %104
  %110 = sitofp i32 %69 to double
  %111 = sitofp i32 %106 to double
  %112 = fmul double %110, %111
  %113 = fdiv double %112, 7.000000e+00
  %114 = fadd double %113, 5.000000e-01
  %115 = tail call double @llvm.floor.f64(double %114) #21
  %116 = fcmp ole double %115, 0x41DFFFFFFFC00000
  %117 = fcmp oge double %115, 0xC1E0000000000000
  %118 = and i1 %116, %117
  br i1 %118, label %119, label %391

119:                                              ; preds = %109
  %120 = fptosi double %115 to i32
  br label %121

121:                                              ; preds = %119, %104
  %122 = phi i32 [ 0, %104 ], [ %120, %119 ]
  %123 = sub nsw i32 %105, %122
  %124 = icmp eq i32 %123, 0
  br i1 %124, label %391, label %125

125:                                              ; preds = %121
  %126 = icmp eq i32 %88, 0
  br i1 %126, label %140, label %127

127:                                              ; preds = %125
  %128 = sitofp i32 %44 to double
  %129 = sitofp i32 %88 to double
  %130 = fmul double %128, %129
  %131 = sitofp i32 %123 to double
  %132 = fdiv double %130, %131
  %133 = fadd double %132, 5.000000e-01
  %134 = tail call double @llvm.floor.f64(double %133) #21
  %135 = fcmp ole double %134, 0x41DFFFFFFFC00000
  %136 = fcmp oge double %134, 0xC1E0000000000000
  %137 = and i1 %135, %136
  br i1 %137, label %138, label %391

138:                                              ; preds = %127
  %139 = fptosi double %134 to i32
  br label %140

140:                                              ; preds = %138, %125
  %141 = phi i32 [ %139, %138 ], [ 0, %125 ]
  %142 = icmp sgt i32 %141, %44
  br i1 %142, label %143, label %391

143:                                              ; preds = %140
  %144 = or i1 %53, %107
  br i1 %144, label %157, label %145

145:                                              ; preds = %143
  %146 = sitofp i32 %51 to double
  %147 = sitofp i32 %106 to double
  %148 = fmul double %146, %147
  %149 = fdiv double %148, 7.000000e+00
  %150 = fadd double %149, 5.000000e-01
  %151 = tail call double @llvm.floor.f64(double %150) #21
  %152 = fcmp ole double %151, 0x41DFFFFFFFC00000
  %153 = fcmp oge double %151, 0xC1E0000000000000
  %154 = and i1 %152, %153
  br i1 %154, label %155, label %391

155:                                              ; preds = %145
  %156 = fptosi double %151 to i32
  br label %157

157:                                              ; preds = %155, %143
  %158 = phi i32 [ 0, %143 ], [ %156, %155 ]
  %159 = or i1 %72, %90
  br i1 %159, label %172, label %160

160:                                              ; preds = %157
  %161 = sitofp i32 %70 to double
  %162 = sitofp i32 %89 to double
  %163 = fmul double %161, %162
  %164 = fdiv double %163, 7.000000e+00
  %165 = fadd double %164, 5.000000e-01
  %166 = tail call double @llvm.floor.f64(double %165) #21
  %167 = fcmp ole double %166, 0x41DFFFFFFFC00000
  %168 = fcmp oge double %166, 0xC1E0000000000000
  %169 = and i1 %167, %168
  br i1 %169, label %170, label %391

170:                                              ; preds = %160
  %171 = fptosi double %166 to i32
  br label %172

172:                                              ; preds = %170, %157
  %173 = phi i32 [ 0, %157 ], [ %171, %170 ]
  %174 = sub nsw i32 %158, %173
  %175 = icmp eq i32 %174, 0
  br i1 %175, label %391, label %176

176:                                              ; preds = %172
  br i1 %126, label %190, label %177

177:                                              ; preds = %176
  %178 = sitofp i32 %44 to double
  %179 = sitofp i32 %88 to double
  %180 = fmul double %178, %179
  %181 = sitofp i32 %174 to double
  %182 = fdiv double %180, %181
  %183 = fadd double %182, 5.000000e-01
  %184 = tail call double @llvm.floor.f64(double %183) #21
  %185 = fcmp ole double %184, 0x41DFFFFFFFC00000
  %186 = fcmp oge double %184, 0xC1E0000000000000
  %187 = and i1 %185, %186
  br i1 %187, label %188, label %391

188:                                              ; preds = %177
  %189 = fptosi double %184 to i32
  br label %190

190:                                              ; preds = %188, %176
  %191 = phi i32 [ %189, %188 ], [ 0, %176 ]
  %192 = icmp sgt i32 %191, %44
  br i1 %192, label %193, label %391

193:                                              ; preds = %190
  %194 = sitofp i32 %44 to double
  %195 = fdiv double 1.000000e+10, %194
  %196 = fadd double %195, 5.000000e-01
  %197 = tail call double @llvm.floor.f64(double %196) #21
  %198 = fcmp ole double %197, 0x41DFFFFFFFC00000
  %199 = fcmp oge double %197, 0xC1E0000000000000
  %200 = and i1 %198, %199
  %201 = fptosi double %197 to i32
  %202 = select i1 %200, i32 %201, i32 0
  %203 = sitofp i32 %141 to double
  %204 = fdiv double 1.000000e+10, %203
  %205 = fadd double %204, 5.000000e-01
  %206 = tail call double @llvm.floor.f64(double %205) #21
  %207 = fcmp ole double %206, 0x41DFFFFFFFC00000
  %208 = fcmp oge double %206, 0xC1E0000000000000
  %209 = and i1 %207, %208
  %210 = fptosi double %206 to i32
  %211 = select i1 %209, i32 %210, i32 0
  %212 = sub nsw i32 %202, %211
  %213 = sitofp i32 %191 to double
  %214 = fdiv double 1.000000e+10, %213
  %215 = fadd double %214, 5.000000e-01
  %216 = tail call double @llvm.floor.f64(double %215) #21
  %217 = fcmp ole double %216, 0x41DFFFFFFFC00000
  %218 = fcmp oge double %216, 0xC1E0000000000000
  %219 = and i1 %217, %218
  %220 = fptosi double %216 to i32
  %221 = sub i32 0, %220
  %222 = select i1 %219, i32 %221, i32 0
  %223 = add i32 %222, %212
  %224 = icmp slt i32 %223, 1
  br i1 %224, label %391, label %225

225:                                              ; preds = %193
  %226 = getelementptr inbounds %struct.png_XYZ, %struct.png_XYZ* %0, i64 0, i32 0
  %227 = icmp eq i32 %141, 0
  br i1 %227, label %391, label %228

228:                                              ; preds = %225
  %229 = icmp eq i32 %7, 0
  br i1 %229, label %241, label %230

230:                                              ; preds = %228
  %231 = sitofp i32 %7 to double
  %232 = fmul double %231, 1.000000e+05
  %233 = fdiv double %232, %203
  %234 = fadd double %233, 5.000000e-01
  %235 = tail call double @llvm.floor.f64(double %234) #21
  %236 = fcmp ole double %235, 0x41DFFFFFFFC00000
  %237 = fcmp oge double %235, 0xC1E0000000000000
  %238 = and i1 %236, %237
  br i1 %238, label %239, label %391

239:                                              ; preds = %230
  %240 = fptosi double %235 to i32
  br label %241

241:                                              ; preds = %239, %228
  %242 = phi i32 [ %240, %239 ], [ 0, %228 ]
  store i32 %242, i32* %226, align 4
  %243 = getelementptr inbounds %struct.png_XYZ, %struct.png_XYZ* %0, i64 0, i32 1
  %244 = load i32, i32* %10, align 4
  %245 = icmp eq i32 %244, 0
  br i1 %245, label %257, label %246

246:                                              ; preds = %241
  %247 = sitofp i32 %244 to double
  %248 = fmul double %247, 1.000000e+05
  %249 = fdiv double %248, %203
  %250 = fadd double %249, 5.000000e-01
  %251 = tail call double @llvm.floor.f64(double %250) #21
  %252 = fcmp ole double %251, 0x41DFFFFFFFC00000
  %253 = fcmp oge double %251, 0xC1E0000000000000
  %254 = and i1 %252, %253
  br i1 %254, label %255, label %391

255:                                              ; preds = %246
  %256 = fptosi double %251 to i32
  br label %257

257:                                              ; preds = %255, %241
  %258 = phi i32 [ %256, %255 ], [ 0, %241 ]
  store i32 %258, i32* %243, align 4
  %259 = getelementptr inbounds %struct.png_XYZ, %struct.png_XYZ* %0, i64 0, i32 2
  %260 = load i32, i32* %5, align 4
  %261 = sub nsw i32 100000, %260
  %262 = load i32, i32* %10, align 4
  %263 = sub i32 %261, %262
  %264 = icmp eq i32 %263, 0
  br i1 %264, label %276, label %265

265:                                              ; preds = %257
  %266 = sitofp i32 %263 to double
  %267 = fmul double %266, 1.000000e+05
  %268 = fdiv double %267, %203
  %269 = fadd double %268, 5.000000e-01
  %270 = tail call double @llvm.floor.f64(double %269) #21
  %271 = fcmp ole double %270, 0x41DFFFFFFFC00000
  %272 = fcmp oge double %270, 0xC1E0000000000000
  %273 = and i1 %271, %272
  br i1 %273, label %274, label %391

274:                                              ; preds = %265
  %275 = fptosi double %270 to i32
  br label %276

276:                                              ; preds = %274, %257
  %277 = phi i32 [ %275, %274 ], [ 0, %257 ]
  store i32 %277, i32* %259, align 4
  %278 = getelementptr inbounds %struct.png_XYZ, %struct.png_XYZ* %0, i64 0, i32 3
  %279 = load i32, i32* %17, align 4
  %280 = icmp eq i32 %191, 0
  br i1 %280, label %391, label %281

281:                                              ; preds = %276
  %282 = icmp eq i32 %279, 0
  br i1 %282, label %294, label %283

283:                                              ; preds = %281
  %284 = sitofp i32 %279 to double
  %285 = fmul double %284, 1.000000e+05
  %286 = fdiv double %285, %213
  %287 = fadd double %286, 5.000000e-01
  %288 = tail call double @llvm.floor.f64(double %287) #21
  %289 = fcmp ole double %288, 0x41DFFFFFFFC00000
  %290 = fcmp oge double %288, 0xC1E0000000000000
  %291 = and i1 %289, %290
  br i1 %291, label %292, label %391

292:                                              ; preds = %283
  %293 = fptosi double %288 to i32
  br label %294

294:                                              ; preds = %292, %281
  %295 = phi i32 [ %293, %292 ], [ 0, %281 ]
  store i32 %295, i32* %278, align 4
  %296 = getelementptr inbounds %struct.png_XYZ, %struct.png_XYZ* %0, i64 0, i32 4
  %297 = load i32, i32* %21, align 4
  %298 = icmp eq i32 %297, 0
  br i1 %298, label %310, label %299

299:                                              ; preds = %294
  %300 = sitofp i32 %297 to double
  %301 = fmul double %300, 1.000000e+05
  %302 = fdiv double %301, %213
  %303 = fadd double %302, 5.000000e-01
  %304 = tail call double @llvm.floor.f64(double %303) #21
  %305 = fcmp ole double %304, 0x41DFFFFFFFC00000
  %306 = fcmp oge double %304, 0xC1E0000000000000
  %307 = and i1 %305, %306
  br i1 %307, label %308, label %391

308:                                              ; preds = %299
  %309 = fptosi double %304 to i32
  br label %310

310:                                              ; preds = %308, %294
  %311 = phi i32 [ %309, %308 ], [ 0, %294 ]
  store i32 %311, i32* %296, align 4
  %312 = getelementptr inbounds %struct.png_XYZ, %struct.png_XYZ* %0, i64 0, i32 5
  %313 = load i32, i32* %17, align 4
  %314 = sub nsw i32 100000, %313
  %315 = load i32, i32* %21, align 4
  %316 = sub i32 %314, %315
  %317 = icmp eq i32 %316, 0
  br i1 %317, label %329, label %318

318:                                              ; preds = %310
  %319 = sitofp i32 %316 to double
  %320 = fmul double %319, 1.000000e+05
  %321 = fdiv double %320, %213
  %322 = fadd double %321, 5.000000e-01
  %323 = tail call double @llvm.floor.f64(double %322) #21
  %324 = fcmp ole double %323, 0x41DFFFFFFFC00000
  %325 = fcmp oge double %323, 0xC1E0000000000000
  %326 = and i1 %324, %325
  br i1 %326, label %327, label %391

327:                                              ; preds = %318
  %328 = fptosi double %323 to i32
  br label %329

329:                                              ; preds = %327, %310
  %330 = phi i32 [ %328, %327 ], [ 0, %310 ]
  store i32 %330, i32* %312, align 4
  %331 = getelementptr inbounds %struct.png_XYZ, %struct.png_XYZ* %0, i64 0, i32 6
  %332 = load i32, i32* %28, align 4
  %333 = icmp eq i32 %332, 0
  br i1 %333, label %346, label %334

334:                                              ; preds = %329
  %335 = sitofp i32 %332 to double
  %336 = sitofp i32 %223 to double
  %337 = fmul double %336, %335
  %338 = fdiv double %337, 1.000000e+05
  %339 = fadd double %338, 5.000000e-01
  %340 = tail call double @llvm.floor.f64(double %339) #21
  %341 = fcmp ole double %340, 0x41DFFFFFFFC00000
  %342 = fcmp oge double %340, 0xC1E0000000000000
  %343 = and i1 %341, %342
  br i1 %343, label %344, label %391

344:                                              ; preds = %334
  %345 = fptosi double %340 to i32
  br label %346

346:                                              ; preds = %344, %329
  %347 = phi i32 [ %345, %344 ], [ 0, %329 ]
  store i32 %347, i32* %331, align 4
  %348 = getelementptr inbounds %struct.png_XYZ, %struct.png_XYZ* %0, i64 0, i32 7
  %349 = load i32, i32* %32, align 4
  %350 = icmp eq i32 %349, 0
  br i1 %350, label %363, label %351

351:                                              ; preds = %346
  %352 = sitofp i32 %349 to double
  %353 = sitofp i32 %223 to double
  %354 = fmul double %353, %352
  %355 = fdiv double %354, 1.000000e+05
  %356 = fadd double %355, 5.000000e-01
  %357 = tail call double @llvm.floor.f64(double %356) #21
  %358 = fcmp ole double %357, 0x41DFFFFFFFC00000
  %359 = fcmp oge double %357, 0xC1E0000000000000
  %360 = and i1 %358, %359
  br i1 %360, label %361, label %391

361:                                              ; preds = %351
  %362 = fptosi double %357 to i32
  br label %363

363:                                              ; preds = %361, %346
  %364 = phi i32 [ %362, %361 ], [ 0, %346 ]
  store i32 %364, i32* %348, align 4
  %365 = getelementptr inbounds %struct.png_XYZ, %struct.png_XYZ* %0, i64 0, i32 8
  %366 = load i32, i32* %28, align 4
  %367 = sub nsw i32 100000, %366
  %368 = load i32, i32* %32, align 4
  %369 = sub i32 %367, %368
  %370 = icmp eq i32 %369, 0
  br i1 %370, label %383, label %371

371:                                              ; preds = %363
  %372 = sitofp i32 %369 to double
  %373 = sitofp i32 %223 to double
  %374 = fmul double %373, %372
  %375 = fdiv double %374, 1.000000e+05
  %376 = fadd double %375, 5.000000e-01
  %377 = tail call double @llvm.floor.f64(double %376) #21
  %378 = fcmp ole double %377, 0x41DFFFFFFFC00000
  %379 = fcmp oge double %377, 0xC1E0000000000000
  %380 = and i1 %378, %379
  br i1 %380, label %381, label %391

381:                                              ; preds = %371
  %382 = fptosi double %377 to i32
  br label %383

383:                                              ; preds = %363, %381
  %384 = phi i32 [ %382, %381 ], [ 0, %363 ]
  store i32 %384, i32* %365, align 4
  %385 = call fastcc i32 @png_xy_from_XYZ(%struct.png_xy* nonnull %3, %struct.png_XYZ* %0)
  %386 = icmp eq i32 %385, 0
  br i1 %386, label %387, label %391

387:                                              ; preds = %383
  %388 = call fastcc i32 @png_colorspace_endpoints_match(%struct.png_xy* %1, %struct.png_xy* nonnull %3, i32 5)
  %389 = icmp eq i32 %388, 0
  %390 = zext i1 %389 to i32
  br label %391

391:                                              ; preds = %276, %283, %225, %230, %172, %177, %121, %127, %371, %351, %334, %318, %299, %265, %246, %160, %145, %109, %92, %74, %55, %193, %190, %140, %42, %38, %31, %27, %20, %16, %9, %2, %387, %383
  %392 = phi i32 [ %385, %383 ], [ %390, %387 ], [ 1, %276 ], [ 1, %283 ], [ 1, %225 ], [ 1, %230 ], [ 1, %172 ], [ 1, %177 ], [ 1, %121 ], [ 1, %127 ], [ 1, %371 ], [ 1, %351 ], [ 1, %334 ], [ 1, %318 ], [ 1, %299 ], [ 1, %265 ], [ 1, %246 ], [ 2, %160 ], [ 2, %145 ], [ 2, %109 ], [ 2, %92 ], [ 2, %74 ], [ 2, %55 ], [ 1, %193 ], [ 1, %190 ], [ 1, %140 ], [ 1, %42 ], [ 1, %38 ], [ 1, %31 ], [ 1, %27 ], [ 1, %20 ], [ 1, %16 ], [ 1, %9 ], [ 1, %2 ]
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %4) #21
  ret i32 %392
}

declare void @cr_png_benign_error(%struct.png_struct_def*, i8*) local_unnamed_addr #5

; Function Attrs: nounwind ssp uwtable
define hidden i32 @cr_png_colorspace_set_endpoints(%struct.png_struct_def* noalias, %struct.png_colorspace* noalias nocapture, %struct.png_XYZ* nocapture readonly, i32) local_unnamed_addr #0 {
  %5 = alloca %struct.png_XYZ, align 4
  %6 = alloca %struct.png_XYZ, align 4
  %7 = alloca %struct.png_xy, align 4
  %8 = bitcast %struct.png_XYZ* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 36, i8* nonnull %8) #21
  %9 = bitcast %struct.png_XYZ* %2 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %8, i8* align 4 %9, i64 36, i1 false)
  %10 = bitcast %struct.png_xy* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %10) #21
  %11 = bitcast %struct.png_XYZ* %5 to i8*
  %12 = bitcast %struct.png_xy* %7 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 4 %12, i8 -86, i64 32, i1 false)
  call void @llvm.lifetime.start.p0i8(i64 36, i8* nonnull %11) #21
  call void @llvm.memset.p0i8.i64(i8* nonnull align 4 %11, i8 -86, i64 36, i1 false) #21
  %13 = getelementptr inbounds %struct.png_XYZ, %struct.png_XYZ* %6, i64 0, i32 1
  %14 = load i32, i32* %13, align 4
  %15 = icmp slt i32 %14, 0
  br i1 %15, label %198, label %16

16:                                               ; preds = %4
  %17 = getelementptr inbounds %struct.png_XYZ, %struct.png_XYZ* %6, i64 0, i32 4
  %18 = load i32, i32* %17, align 4
  %19 = icmp slt i32 %18, 0
  br i1 %19, label %198, label %20

20:                                               ; preds = %16
  %21 = getelementptr inbounds %struct.png_XYZ, %struct.png_XYZ* %6, i64 0, i32 7
  %22 = load i32, i32* %21, align 4
  %23 = icmp slt i32 %22, 0
  br i1 %23, label %198, label %24

24:                                               ; preds = %20
  %25 = getelementptr inbounds %struct.png_XYZ, %struct.png_XYZ* %6, i64 0, i32 0
  %26 = load i32, i32* %25, align 4
  %27 = icmp slt i32 %26, 0
  br i1 %27, label %198, label %28

28:                                               ; preds = %24
  %29 = getelementptr inbounds %struct.png_XYZ, %struct.png_XYZ* %6, i64 0, i32 3
  %30 = load i32, i32* %29, align 4
  %31 = icmp slt i32 %30, 0
  br i1 %31, label %198, label %32

32:                                               ; preds = %28
  %33 = getelementptr inbounds %struct.png_XYZ, %struct.png_XYZ* %6, i64 0, i32 6
  %34 = load i32, i32* %33, align 4
  %35 = icmp slt i32 %34, 0
  br i1 %35, label %198, label %36

36:                                               ; preds = %32
  %37 = getelementptr inbounds %struct.png_XYZ, %struct.png_XYZ* %6, i64 0, i32 2
  %38 = load i32, i32* %37, align 4
  %39 = icmp slt i32 %38, 0
  br i1 %39, label %198, label %40

40:                                               ; preds = %36
  %41 = getelementptr inbounds %struct.png_XYZ, %struct.png_XYZ* %6, i64 0, i32 5
  %42 = load i32, i32* %41, align 4
  %43 = icmp slt i32 %42, 0
  br i1 %43, label %198, label %44

44:                                               ; preds = %40
  %45 = getelementptr inbounds %struct.png_XYZ, %struct.png_XYZ* %6, i64 0, i32 8
  %46 = load i32, i32* %45, align 4
  %47 = icmp slt i32 %46, 0
  %48 = sub nuw nsw i32 2147483647, %14
  %49 = icmp slt i32 %48, %30
  %50 = or i1 %49, %47
  br i1 %50, label %198, label %51

51:                                               ; preds = %44
  %52 = add nuw nsw i32 %18, %14
  %53 = sub nsw i32 2147483647, %52
  %54 = icmp slt i32 %53, %34
  br i1 %54, label %198, label %55

55:                                               ; preds = %51
  %56 = add nsw i32 %22, %52
  switch i32 %56, label %57 [
    i32 100000, label %193
    i32 0, label %198
  ]

57:                                               ; preds = %55
  %58 = icmp eq i32 %26, 0
  br i1 %58, label %71, label %59

59:                                               ; preds = %57
  %60 = sitofp i32 %26 to double
  %61 = fmul double %60, 1.000000e+05
  %62 = sitofp i32 %56 to double
  %63 = fdiv double %61, %62
  %64 = fadd double %63, 5.000000e-01
  %65 = tail call double @llvm.floor.f64(double %64) #21
  %66 = fcmp ole double %65, 0x41DFFFFFFFC00000
  %67 = fcmp oge double %65, 0xC1E0000000000000
  %68 = and i1 %66, %67
  br i1 %68, label %69, label %198

69:                                               ; preds = %59
  %70 = fptosi double %65 to i32
  br label %71

71:                                               ; preds = %69, %57
  %72 = phi i32 [ %70, %69 ], [ 0, %57 ]
  store i32 %72, i32* %25, align 4
  %73 = icmp eq i32 %14, 0
  br i1 %73, label %86, label %74

74:                                               ; preds = %71
  %75 = sitofp i32 %14 to double
  %76 = fmul double %75, 1.000000e+05
  %77 = sitofp i32 %56 to double
  %78 = fdiv double %76, %77
  %79 = fadd double %78, 5.000000e-01
  %80 = tail call double @llvm.floor.f64(double %79) #21
  %81 = fcmp ole double %80, 0x41DFFFFFFFC00000
  %82 = fcmp oge double %80, 0xC1E0000000000000
  %83 = and i1 %81, %82
  br i1 %83, label %84, label %198

84:                                               ; preds = %74
  %85 = fptosi double %80 to i32
  br label %86

86:                                               ; preds = %84, %71
  %87 = phi i32 [ %85, %84 ], [ 0, %71 ]
  store i32 %87, i32* %13, align 4
  %88 = icmp eq i32 %38, 0
  br i1 %88, label %101, label %89

89:                                               ; preds = %86
  %90 = sitofp i32 %38 to double
  %91 = fmul double %90, 1.000000e+05
  %92 = sitofp i32 %56 to double
  %93 = fdiv double %91, %92
  %94 = fadd double %93, 5.000000e-01
  %95 = tail call double @llvm.floor.f64(double %94) #21
  %96 = fcmp ole double %95, 0x41DFFFFFFFC00000
  %97 = fcmp oge double %95, 0xC1E0000000000000
  %98 = and i1 %96, %97
  br i1 %98, label %99, label %198

99:                                               ; preds = %89
  %100 = fptosi double %95 to i32
  br label %101

101:                                              ; preds = %99, %86
  %102 = phi i32 [ %100, %99 ], [ 0, %86 ]
  store i32 %102, i32* %37, align 4
  %103 = icmp eq i32 %30, 0
  br i1 %103, label %116, label %104

104:                                              ; preds = %101
  %105 = sitofp i32 %30 to double
  %106 = fmul double %105, 1.000000e+05
  %107 = sitofp i32 %56 to double
  %108 = fdiv double %106, %107
  %109 = fadd double %108, 5.000000e-01
  %110 = tail call double @llvm.floor.f64(double %109) #21
  %111 = fcmp ole double %110, 0x41DFFFFFFFC00000
  %112 = fcmp oge double %110, 0xC1E0000000000000
  %113 = and i1 %111, %112
  br i1 %113, label %114, label %198

114:                                              ; preds = %104
  %115 = fptosi double %110 to i32
  br label %116

116:                                              ; preds = %114, %101
  %117 = phi i32 [ %115, %114 ], [ 0, %101 ]
  store i32 %117, i32* %29, align 4
  %118 = icmp eq i32 %18, 0
  br i1 %118, label %131, label %119

119:                                              ; preds = %116
  %120 = sitofp i32 %18 to double
  %121 = fmul double %120, 1.000000e+05
  %122 = sitofp i32 %56 to double
  %123 = fdiv double %121, %122
  %124 = fadd double %123, 5.000000e-01
  %125 = tail call double @llvm.floor.f64(double %124) #21
  %126 = fcmp ole double %125, 0x41DFFFFFFFC00000
  %127 = fcmp oge double %125, 0xC1E0000000000000
  %128 = and i1 %126, %127
  br i1 %128, label %129, label %198

129:                                              ; preds = %119
  %130 = fptosi double %125 to i32
  br label %131

131:                                              ; preds = %129, %116
  %132 = phi i32 [ %130, %129 ], [ 0, %116 ]
  store i32 %132, i32* %17, align 4
  %133 = icmp eq i32 %42, 0
  br i1 %133, label %146, label %134

134:                                              ; preds = %131
  %135 = sitofp i32 %42 to double
  %136 = fmul double %135, 1.000000e+05
  %137 = sitofp i32 %56 to double
  %138 = fdiv double %136, %137
  %139 = fadd double %138, 5.000000e-01
  %140 = tail call double @llvm.floor.f64(double %139) #21
  %141 = fcmp ole double %140, 0x41DFFFFFFFC00000
  %142 = fcmp oge double %140, 0xC1E0000000000000
  %143 = and i1 %141, %142
  br i1 %143, label %144, label %198

144:                                              ; preds = %134
  %145 = fptosi double %140 to i32
  br label %146

146:                                              ; preds = %144, %131
  %147 = phi i32 [ %145, %144 ], [ 0, %131 ]
  store i32 %147, i32* %41, align 4
  %148 = icmp eq i32 %34, 0
  br i1 %148, label %161, label %149

149:                                              ; preds = %146
  %150 = sitofp i32 %34 to double
  %151 = fmul double %150, 1.000000e+05
  %152 = sitofp i32 %56 to double
  %153 = fdiv double %151, %152
  %154 = fadd double %153, 5.000000e-01
  %155 = tail call double @llvm.floor.f64(double %154) #21
  %156 = fcmp ole double %155, 0x41DFFFFFFFC00000
  %157 = fcmp oge double %155, 0xC1E0000000000000
  %158 = and i1 %156, %157
  br i1 %158, label %159, label %198

159:                                              ; preds = %149
  %160 = fptosi double %155 to i32
  br label %161

161:                                              ; preds = %159, %146
  %162 = phi i32 [ %160, %159 ], [ 0, %146 ]
  store i32 %162, i32* %33, align 4
  %163 = icmp eq i32 %22, 0
  br i1 %163, label %176, label %164

164:                                              ; preds = %161
  %165 = sitofp i32 %22 to double
  %166 = fmul double %165, 1.000000e+05
  %167 = sitofp i32 %56 to double
  %168 = fdiv double %166, %167
  %169 = fadd double %168, 5.000000e-01
  %170 = tail call double @llvm.floor.f64(double %169) #21
  %171 = fcmp ole double %170, 0x41DFFFFFFFC00000
  %172 = fcmp oge double %170, 0xC1E0000000000000
  %173 = and i1 %171, %172
  br i1 %173, label %174, label %198

174:                                              ; preds = %164
  %175 = fptosi double %170 to i32
  br label %176

176:                                              ; preds = %174, %161
  %177 = phi i32 [ %175, %174 ], [ 0, %161 ]
  store i32 %177, i32* %21, align 4
  %178 = icmp eq i32 %46, 0
  br i1 %178, label %191, label %179

179:                                              ; preds = %176
  %180 = sitofp i32 %46 to double
  %181 = fmul double %180, 1.000000e+05
  %182 = sitofp i32 %56 to double
  %183 = fdiv double %181, %182
  %184 = fadd double %183, 5.000000e-01
  %185 = tail call double @llvm.floor.f64(double %184) #21
  %186 = fcmp ole double %185, 0x41DFFFFFFFC00000
  %187 = fcmp oge double %185, 0xC1E0000000000000
  %188 = and i1 %186, %187
  br i1 %188, label %189, label %198

189:                                              ; preds = %179
  %190 = fptosi double %185 to i32
  br label %191

191:                                              ; preds = %176, %189
  %192 = phi i32 [ %190, %189 ], [ 0, %176 ]
  store i32 %192, i32* %45, align 4
  br label %193

193:                                              ; preds = %191, %55
  %194 = call fastcc i32 @png_xy_from_XYZ(%struct.png_xy* nonnull %7, %struct.png_XYZ* nonnull %6) #21
  %195 = icmp eq i32 %194, 0
  br i1 %195, label %196, label %199

196:                                              ; preds = %193
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %11, i8* nonnull align 4 %8, i64 36, i1 false) #21
  %197 = call fastcc i32 @png_colorspace_check_xy(%struct.png_XYZ* nonnull %5, %struct.png_xy* nonnull %7) #21
  br label %199

198:                                              ; preds = %44, %40, %36, %32, %28, %24, %20, %16, %4, %51, %74, %89, %104, %119, %134, %149, %164, %179, %59, %55
  call void @llvm.lifetime.end.p0i8(i64 36, i8* nonnull %11) #21
  br label %229

199:                                              ; preds = %193, %196
  %200 = phi i32 [ %197, %196 ], [ %194, %193 ]
  call void @llvm.lifetime.end.p0i8(i64 36, i8* nonnull %11) #21
  switch i32 %200, label %233 [
    i32 0, label %201
    i32 1, label %229
  ]

201:                                              ; preds = %199
  %202 = getelementptr inbounds %struct.png_colorspace, %struct.png_colorspace* %1, i64 0, i32 4
  %203 = load i16, i16* %202, align 2, !alias.scope !20, !noalias !23
  %204 = icmp slt i16 %203, 0
  br i1 %204, label %237, label %205

205:                                              ; preds = %201
  %206 = icmp sgt i32 %3, 1
  %207 = and i16 %203, 2
  %208 = icmp eq i16 %207, 0
  %209 = or i1 %206, %208
  br i1 %209, label %218, label %210

210:                                              ; preds = %205
  %211 = getelementptr inbounds %struct.png_colorspace, %struct.png_colorspace* %1, i64 0, i32 1
  %212 = call fastcc i32 @png_colorspace_endpoints_match(%struct.png_xy* nonnull %7, %struct.png_xy* %211, i32 100) #21, !noalias !23
  %213 = icmp eq i32 %212, 0
  br i1 %213, label %214, label %216

214:                                              ; preds = %210
  %215 = or i16 %203, -32768
  store i16 %215, i16* %202, align 2, !alias.scope !20, !noalias !23
  tail call void @cr_png_benign_error(%struct.png_struct_def* %0, i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.66, i64 0, i64 0)) #21, !noalias !20
  br label %237

216:                                              ; preds = %210
  %217 = icmp eq i32 %3, 0
  br i1 %217, label %237, label %218

218:                                              ; preds = %216, %205
  %219 = getelementptr inbounds %struct.png_colorspace, %struct.png_colorspace* %1, i64 0, i32 1
  %220 = bitcast %struct.png_xy* %219 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %220, i8* nonnull align 4 %10, i64 32, i1 false) #21, !noalias !23
  %221 = getelementptr inbounds %struct.png_colorspace, %struct.png_colorspace* %1, i64 0, i32 2
  %222 = bitcast %struct.png_XYZ* %221 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %222, i8* nonnull align 4 %8, i64 36, i1 false) #21, !noalias !23
  %223 = call fastcc i32 @png_colorspace_endpoints_match(%struct.png_xy* nonnull %7, %struct.png_xy* nonnull @sRGB_xy, i32 1000) #21, !noalias !20
  %224 = icmp eq i32 %223, 0
  %225 = and i16 %203, -67
  %226 = or i16 %225, 2
  %227 = or i16 %203, 66
  %228 = select i1 %224, i16 %226, i16 %227
  store i16 %228, i16* %202, align 2, !alias.scope !20, !noalias !23
  br label %237

229:                                              ; preds = %198, %199
  %230 = getelementptr inbounds %struct.png_colorspace, %struct.png_colorspace* %1, i64 0, i32 4
  %231 = load i16, i16* %230, align 2
  %232 = or i16 %231, -32768
  store i16 %232, i16* %230, align 2
  tail call void @cr_png_benign_error(%struct.png_struct_def* %0, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.22, i64 0, i64 0)) #21
  br label %237

233:                                              ; preds = %199
  %234 = getelementptr inbounds %struct.png_colorspace, %struct.png_colorspace* %1, i64 0, i32 4
  %235 = load i16, i16* %234, align 2
  %236 = or i16 %235, -32768
  store i16 %236, i16* %234, align 2
  tail call void @cr_png_error(%struct.png_struct_def* %0, i8* getelementptr inbounds ([39 x i8], [39 x i8]* @.str.21, i64 0, i64 0)) #19
  unreachable

237:                                              ; preds = %218, %216, %214, %201, %229
  %238 = phi i32 [ 0, %229 ], [ 0, %214 ], [ 2, %218 ], [ 0, %201 ], [ 1, %216 ]
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %10) #21
  call void @llvm.lifetime.end.p0i8(i64 36, i8* nonnull %8) #21
  ret i32 %238
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @cr_png_colorspace_set_sRGB(%struct.png_struct_def* noalias, %struct.png_colorspace* noalias, i32) local_unnamed_addr #0 {
  %4 = getelementptr inbounds %struct.png_colorspace, %struct.png_colorspace* %1, i64 0, i32 4
  %5 = load i16, i16* %4, align 2
  %6 = icmp slt i16 %5, 0
  br i1 %6, label %68, label %7

7:                                                ; preds = %3
  %8 = icmp ugt i32 %2, 3
  br i1 %8, label %9, label %11

9:                                                ; preds = %7
  %10 = sext i32 %2 to i64
  tail call fastcc void @png_icc_profile_error(%struct.png_struct_def* %0, %struct.png_colorspace* %1, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.23, i64 0, i64 0), i64 %10, i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.24, i64 0, i64 0))
  br label %68

11:                                               ; preds = %7
  %12 = and i16 %5, 4
  %13 = icmp eq i16 %12, 0
  br i1 %13, label %21, label %14

14:                                               ; preds = %11
  %15 = getelementptr inbounds %struct.png_colorspace, %struct.png_colorspace* %1, i64 0, i32 3
  %16 = load i16, i16* %15, align 4
  %17 = zext i16 %16 to i32
  %18 = icmp eq i32 %17, %2
  br i1 %18, label %21, label %19

19:                                               ; preds = %14
  %20 = sext i32 %2 to i64
  tail call fastcc void @png_icc_profile_error(%struct.png_struct_def* %0, %struct.png_colorspace* %1, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.23, i64 0, i64 0), i64 %20, i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str.25, i64 0, i64 0))
  br label %68

21:                                               ; preds = %14, %11
  %22 = zext i16 %5 to i32
  %23 = and i32 %22, 32
  %24 = icmp eq i32 %23, 0
  br i1 %24, label %26, label %25

25:                                               ; preds = %21
  tail call void @cr_png_benign_error(%struct.png_struct_def* %0, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.26, i64 0, i64 0)) #21
  br label %68

26:                                               ; preds = %21
  %27 = and i32 %22, 2
  %28 = icmp eq i32 %27, 0
  br i1 %28, label %35, label %29

29:                                               ; preds = %26
  %30 = getelementptr inbounds %struct.png_colorspace, %struct.png_colorspace* %1, i64 0, i32 1
  %31 = tail call fastcc i32 @png_colorspace_endpoints_match(%struct.png_xy* nonnull @sRGB_xy, %struct.png_xy* %30, i32 100)
  %32 = icmp eq i32 %31, 0
  br i1 %32, label %33, label %35

33:                                               ; preds = %29
  tail call void @cr_png_chunk_report(%struct.png_struct_def* %0, i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str.27, i64 0, i64 0), i32 2) #21
  %34 = load i16, i16* %4, align 2, !alias.scope !25, !noalias !28
  br label %35

35:                                               ; preds = %29, %26, %33
  %36 = phi i16 [ %5, %29 ], [ %5, %26 ], [ %34, %33 ]
  %37 = and i16 %36, 1
  %38 = icmp eq i16 %37, 0
  br i1 %38, label %58, label %39

39:                                               ; preds = %35
  %40 = getelementptr inbounds %struct.png_colorspace, %struct.png_colorspace* %1, i64 0, i32 0
  %41 = load i32, i32* %40, align 4, !alias.scope !25, !noalias !28
  %42 = icmp eq i32 %41, 0
  br i1 %42, label %56, label %43

43:                                               ; preds = %39
  %44 = sitofp i32 %41 to double
  %45 = fmul double %44, 1.000000e+05
  %46 = fdiv double %45, 4.545500e+04
  %47 = fadd double %46, 5.000000e-01
  %48 = tail call double @llvm.floor.f64(double %47) #21
  %49 = fcmp ole double %48, 0x41DFFFFFFFC00000
  %50 = fcmp oge double %48, 0xC1E0000000000000
  %51 = and i1 %49, %50
  br i1 %51, label %52, label %56

52:                                               ; preds = %43
  %53 = fptosi double %48 to i32
  %54 = add i32 %53, -95000
  %55 = icmp ult i32 %54, 10001
  br i1 %55, label %58, label %56

56:                                               ; preds = %52, %43, %39
  tail call void @cr_png_chunk_report(%struct.png_struct_def* %0, i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str.64, i64 0, i64 0), i32 2) #21, !noalias !25
  %57 = load i16, i16* %4, align 2
  br label %58

58:                                               ; preds = %35, %52, %56
  %59 = phi i16 [ %36, %35 ], [ %36, %52 ], [ %57, %56 ]
  %60 = trunc i32 %2 to i16
  %61 = getelementptr inbounds %struct.png_colorspace, %struct.png_colorspace* %1, i64 0, i32 3
  store i16 %60, i16* %61, align 4
  %62 = getelementptr inbounds %struct.png_colorspace, %struct.png_colorspace* %1, i64 0, i32 1
  %63 = bitcast %struct.png_xy* %62 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %63, i8* align 4 bitcast (%struct.png_xy* @sRGB_xy to i8*), i64 32, i1 false)
  %64 = getelementptr inbounds %struct.png_colorspace, %struct.png_colorspace* %1, i64 0, i32 2
  %65 = bitcast %struct.png_XYZ* %64 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %65, i8* align 4 bitcast (%struct.png_XYZ* @cr_png_colorspace_set_sRGB.sRGB_XYZ to i8*), i64 36, i1 false)
  %66 = getelementptr inbounds %struct.png_colorspace, %struct.png_colorspace* %1, i64 0, i32 0
  store i32 45455, i32* %66, align 4
  %67 = or i16 %59, 231
  store i16 %67, i16* %4, align 2
  br label %68

68:                                               ; preds = %3, %58, %25, %19, %9
  %69 = phi i32 [ 0, %9 ], [ 0, %19 ], [ 0, %25 ], [ 1, %58 ], [ 0, %3 ]
  ret i32 %69
}

; Function Attrs: nounwind ssp uwtable
define internal fastcc void @png_icc_profile_error(%struct.png_struct_def* noalias, %struct.png_colorspace* noalias, i8*, i64, i8*) unnamed_addr #0 {
  %6 = alloca [196 x i8], align 16
  %7 = alloca [24 x i8], align 16
  %8 = getelementptr inbounds [196 x i8], [196 x i8]* %6, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 196, i8* nonnull %8) #21
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %8, i8 -86, i64 196, i1 false)
  %9 = icmp ne %struct.png_colorspace* %1, null
  br i1 %9, label %10, label %14

10:                                               ; preds = %5
  %11 = getelementptr inbounds %struct.png_colorspace, %struct.png_colorspace* %1, i64 0, i32 4
  %12 = load i16, i16* %11, align 2
  %13 = or i16 %12, -32768
  store i16 %13, i16* %11, align 2
  br label %14

14:                                               ; preds = %10, %5
  %15 = call i64 @cr_png_safecat(i8* nonnull %8, i64 196, i64 0, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.67, i64 0, i64 0)) #21
  %16 = add i64 %15, 79
  %17 = call i64 @cr_png_safecat(i8* nonnull %8, i64 %16, i64 %15, i8* %2) #21
  %18 = call i64 @cr_png_safecat(i8* nonnull %8, i64 196, i64 %17, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.68, i64 0, i64 0)) #21
  %19 = lshr i64 %3, 24
  %20 = icmp eq i64 %19, 32
  %21 = add nsw i64 %19, -48
  %22 = icmp ult i64 %21, 10
  %23 = or i1 %20, %22
  %24 = add nsw i64 %19, -65
  %25 = icmp ult i64 %24, 26
  %26 = or i1 %25, %23
  %27 = xor i1 %26, true
  %28 = add nsw i64 %19, -97
  %29 = icmp ugt i64 %28, 25
  %30 = and i1 %29, %27
  br i1 %30, label %107, label %31

31:                                               ; preds = %14
  %32 = lshr i64 %3, 16
  %33 = and i64 %32, 255
  %34 = icmp eq i64 %33, 32
  %35 = add nsw i64 %33, -48
  %36 = icmp ult i64 %35, 10
  %37 = or i1 %34, %36
  %38 = add nsw i64 %33, -65
  %39 = icmp ult i64 %38, 26
  %40 = or i1 %39, %37
  %41 = xor i1 %40, true
  %42 = add nsw i64 %33, -97
  %43 = icmp ugt i64 %42, 25
  %44 = and i1 %43, %41
  br i1 %44, label %107, label %45

45:                                               ; preds = %31
  %46 = lshr i64 %3, 8
  %47 = and i64 %46, 255
  %48 = icmp eq i64 %47, 32
  %49 = add nsw i64 %47, -48
  %50 = icmp ult i64 %49, 10
  %51 = or i1 %48, %50
  %52 = add nsw i64 %47, -65
  %53 = icmp ult i64 %52, 26
  %54 = or i1 %53, %51
  %55 = xor i1 %54, true
  %56 = add nsw i64 %47, -97
  %57 = icmp ugt i64 %56, 25
  %58 = and i1 %57, %55
  br i1 %58, label %107, label %59

59:                                               ; preds = %45
  %60 = and i64 %3, 255
  %61 = icmp eq i64 %60, 32
  %62 = add nsw i64 %60, -48
  %63 = icmp ult i64 %62, 10
  %64 = or i1 %61, %63
  %65 = add nsw i64 %60, -65
  %66 = icmp ult i64 %65, 26
  %67 = or i1 %66, %64
  %68 = xor i1 %67, true
  %69 = add nsw i64 %60, -97
  %70 = icmp ugt i64 %69, 25
  %71 = and i1 %70, %68
  br i1 %71, label %107, label %72

72:                                               ; preds = %59
  %73 = getelementptr inbounds [196 x i8], [196 x i8]* %6, i64 0, i64 %18
  %74 = trunc i64 %3 to i32
  store i8 39, i8* %73, align 1
  %75 = lshr i32 %74, 24
  %76 = add nsw i32 %75, -32
  %77 = icmp ult i32 %76, 95
  %78 = trunc i32 %75 to i8
  %79 = select i1 %77, i8 %78, i8 63
  %80 = getelementptr inbounds i8, i8* %73, i64 1
  store i8 %79, i8* %80, align 1
  %81 = lshr i32 %74, 16
  %82 = and i32 %81, 255
  %83 = add nsw i32 %82, -32
  %84 = icmp ult i32 %83, 95
  %85 = trunc i32 %81 to i8
  %86 = select i1 %84, i8 %85, i8 63
  %87 = getelementptr inbounds i8, i8* %73, i64 2
  store i8 %86, i8* %87, align 1
  %88 = lshr i32 %74, 8
  %89 = and i32 %88, 255
  %90 = add nsw i32 %89, -32
  %91 = icmp ult i32 %90, 95
  %92 = trunc i32 %88 to i8
  %93 = select i1 %91, i8 %92, i8 63
  %94 = getelementptr inbounds i8, i8* %73, i64 3
  store i8 %93, i8* %94, align 1
  %95 = and i32 %74, 255
  %96 = add nsw i32 %95, -32
  %97 = icmp ult i32 %96, 95
  %98 = trunc i64 %3 to i8
  %99 = select i1 %97, i8 %98, i8 63
  %100 = getelementptr inbounds i8, i8* %73, i64 4
  store i8 %99, i8* %100, align 1
  %101 = getelementptr inbounds i8, i8* %73, i64 5
  store i8 39, i8* %101, align 1
  %102 = add i64 %18, 6
  %103 = add i64 %18, 7
  %104 = getelementptr inbounds [196 x i8], [196 x i8]* %6, i64 0, i64 %102
  store i8 58, i8* %104, align 1
  %105 = add i64 %18, 8
  %106 = getelementptr inbounds [196 x i8], [196 x i8]* %6, i64 0, i64 %103
  store i8 32, i8* %106, align 1
  br label %113

107:                                              ; preds = %59, %45, %31, %14
  %108 = getelementptr inbounds [24 x i8], [24 x i8]* %7, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %108) #21
  %109 = getelementptr inbounds [24 x i8], [24 x i8]* %7, i64 0, i64 24
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %108, i8 -86, i64 24, i1 false)
  %110 = call i8* @cr_png_format_number(i8* nonnull %108, i8* %109, i32 3, i64 %3) #21
  %111 = call i64 @cr_png_safecat(i8* nonnull %8, i64 196, i64 %18, i8* %110) #21
  %112 = call i64 @cr_png_safecat(i8* nonnull %8, i64 196, i64 %111, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.69, i64 0, i64 0)) #21
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %108) #21
  br label %113

113:                                              ; preds = %107, %72
  %114 = phi i64 [ %105, %72 ], [ %112, %107 ]
  %115 = call i64 @cr_png_safecat(i8* nonnull %8, i64 196, i64 %114, i8* %4) #21
  %116 = select i1 %9, i32 2, i32 1
  call void @cr_png_chunk_report(%struct.png_struct_def* %0, i8* nonnull %8, i32 %116) #21
  call void @llvm.lifetime.end.p0i8(i64 196, i8* nonnull %8) #21
  ret void
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define internal fastcc i32 @png_colorspace_endpoints_match(%struct.png_xy* nocapture readonly, %struct.png_xy* nocapture readonly, i32) unnamed_addr #9 {
  %4 = getelementptr inbounds %struct.png_xy, %struct.png_xy* %0, i64 0, i32 6
  %5 = load i32, i32* %4, align 4
  %6 = getelementptr inbounds %struct.png_xy, %struct.png_xy* %1, i64 0, i32 6
  %7 = load i32, i32* %6, align 4
  %8 = sub nsw i32 %7, %2
  %9 = icmp slt i32 %5, %8
  %10 = add nsw i32 %7, %2
  %11 = icmp sgt i32 %5, %10
  %12 = or i1 %9, %11
  br i1 %12, label %84, label %13

13:                                               ; preds = %3
  %14 = getelementptr inbounds %struct.png_xy, %struct.png_xy* %0, i64 0, i32 7
  %15 = load i32, i32* %14, align 4
  %16 = getelementptr inbounds %struct.png_xy, %struct.png_xy* %1, i64 0, i32 7
  %17 = load i32, i32* %16, align 4
  %18 = sub nsw i32 %17, %2
  %19 = icmp slt i32 %15, %18
  %20 = add nsw i32 %17, %2
  %21 = icmp sgt i32 %15, %20
  %22 = or i1 %19, %21
  br i1 %22, label %84, label %23

23:                                               ; preds = %13
  %24 = getelementptr inbounds %struct.png_xy, %struct.png_xy* %0, i64 0, i32 0
  %25 = load i32, i32* %24, align 4
  %26 = getelementptr inbounds %struct.png_xy, %struct.png_xy* %1, i64 0, i32 0
  %27 = load i32, i32* %26, align 4
  %28 = sub nsw i32 %27, %2
  %29 = icmp slt i32 %25, %28
  %30 = add nsw i32 %27, %2
  %31 = icmp sgt i32 %25, %30
  %32 = or i1 %29, %31
  br i1 %32, label %84, label %33

33:                                               ; preds = %23
  %34 = getelementptr inbounds %struct.png_xy, %struct.png_xy* %0, i64 0, i32 1
  %35 = load i32, i32* %34, align 4
  %36 = getelementptr inbounds %struct.png_xy, %struct.png_xy* %1, i64 0, i32 1
  %37 = load i32, i32* %36, align 4
  %38 = sub nsw i32 %37, %2
  %39 = icmp slt i32 %35, %38
  %40 = add nsw i32 %37, %2
  %41 = icmp sgt i32 %35, %40
  %42 = or i1 %39, %41
  br i1 %42, label %84, label %43

43:                                               ; preds = %33
  %44 = getelementptr inbounds %struct.png_xy, %struct.png_xy* %0, i64 0, i32 2
  %45 = load i32, i32* %44, align 4
  %46 = getelementptr inbounds %struct.png_xy, %struct.png_xy* %1, i64 0, i32 2
  %47 = load i32, i32* %46, align 4
  %48 = sub nsw i32 %47, %2
  %49 = icmp slt i32 %45, %48
  %50 = add nsw i32 %47, %2
  %51 = icmp sgt i32 %45, %50
  %52 = or i1 %49, %51
  br i1 %52, label %84, label %53

53:                                               ; preds = %43
  %54 = getelementptr inbounds %struct.png_xy, %struct.png_xy* %0, i64 0, i32 3
  %55 = load i32, i32* %54, align 4
  %56 = getelementptr inbounds %struct.png_xy, %struct.png_xy* %1, i64 0, i32 3
  %57 = load i32, i32* %56, align 4
  %58 = sub nsw i32 %57, %2
  %59 = icmp slt i32 %55, %58
  %60 = add nsw i32 %57, %2
  %61 = icmp sgt i32 %55, %60
  %62 = or i1 %59, %61
  br i1 %62, label %84, label %63

63:                                               ; preds = %53
  %64 = getelementptr inbounds %struct.png_xy, %struct.png_xy* %0, i64 0, i32 4
  %65 = load i32, i32* %64, align 4
  %66 = getelementptr inbounds %struct.png_xy, %struct.png_xy* %1, i64 0, i32 4
  %67 = load i32, i32* %66, align 4
  %68 = sub nsw i32 %67, %2
  %69 = icmp slt i32 %65, %68
  %70 = add nsw i32 %67, %2
  %71 = icmp sgt i32 %65, %70
  %72 = or i1 %69, %71
  br i1 %72, label %84, label %73

73:                                               ; preds = %63
  %74 = getelementptr inbounds %struct.png_xy, %struct.png_xy* %0, i64 0, i32 5
  %75 = load i32, i32* %74, align 4
  %76 = getelementptr inbounds %struct.png_xy, %struct.png_xy* %1, i64 0, i32 5
  %77 = load i32, i32* %76, align 4
  %78 = sub nsw i32 %77, %2
  %79 = icmp sge i32 %75, %78
  %80 = add nsw i32 %77, %2
  %81 = icmp sle i32 %75, %80
  %82 = and i1 %81, %79
  %83 = zext i1 %82 to i32
  ret i32 %83

84:                                               ; preds = %3, %13, %23, %33, %43, %53, %63
  ret i32 0
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @cr_png_icc_check_length(%struct.png_struct_def* noalias, %struct.png_colorspace* noalias, i8*, i32) local_unnamed_addr #0 {
  %5 = icmp ult i32 %3, 132
  br i1 %5, label %6, label %8

6:                                                ; preds = %4
  %7 = zext i32 %3 to i64
  tail call fastcc void @png_icc_profile_error(%struct.png_struct_def* %0, %struct.png_colorspace* %1, i8* %2, i64 %7, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.70, i64 0, i64 0)) #21
  br label %16

8:                                                ; preds = %4
  %9 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 126
  %10 = load i64, i64* %9, align 8
  %11 = icmp eq i64 %10, 0
  br i1 %11, label %16, label %12

12:                                               ; preds = %8
  %13 = zext i32 %3 to i64
  %14 = icmp ult i64 %10, %13
  br i1 %14, label %15, label %16

15:                                               ; preds = %12
  tail call fastcc void @png_icc_profile_error(%struct.png_struct_def* %0, %struct.png_colorspace* %1, i8* %2, i64 %13, i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.28, i64 0, i64 0))
  br label %16

16:                                               ; preds = %6, %12, %8, %15
  %17 = phi i32 [ 0, %15 ], [ 1, %8 ], [ 1, %12 ], [ 0, %6 ]
  ret i32 %17
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @cr_png_icc_check_header(%struct.png_struct_def* noalias, %struct.png_colorspace* noalias, i8*, i32, i8*, i32) local_unnamed_addr #0 {
  %7 = tail call i32 @cr_png_get_uint_32(i8* %4) #21
  %8 = icmp eq i32 %7, %3
  br i1 %8, label %11, label %9

9:                                                ; preds = %6
  %10 = zext i32 %7 to i64
  tail call fastcc void @png_icc_profile_error(%struct.png_struct_def* %0, %struct.png_colorspace* %1, i8* %2, i64 %10, i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.29, i64 0, i64 0))
  br label %77

11:                                               ; preds = %6
  %12 = getelementptr inbounds i8, i8* %4, i64 8
  %13 = load i8, i8* %12, align 1
  %14 = icmp ult i8 %13, 4
  %15 = and i32 %3, 3
  %16 = icmp eq i32 %15, 0
  %17 = or i1 %16, %14
  br i1 %17, label %20, label %18

18:                                               ; preds = %11
  %19 = zext i32 %3 to i64
  tail call fastcc void @png_icc_profile_error(%struct.png_struct_def* %0, %struct.png_colorspace* %1, i8* %2, i64 %19, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.30, i64 0, i64 0))
  br label %77

20:                                               ; preds = %11
  %21 = getelementptr inbounds i8, i8* %4, i64 128
  %22 = tail call i32 @cr_png_get_uint_32(i8* %21) #21
  %23 = icmp ugt i32 %22, 357913930
  br i1 %23, label %28, label %24

24:                                               ; preds = %20
  %25 = mul i32 %22, 12
  %26 = add nuw i32 %25, 132
  %27 = icmp ugt i32 %26, %3
  br i1 %27, label %28, label %30

28:                                               ; preds = %24, %20
  %29 = zext i32 %22 to i64
  tail call fastcc void @png_icc_profile_error(%struct.png_struct_def* %0, %struct.png_colorspace* %1, i8* %2, i64 %29, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.31, i64 0, i64 0))
  br label %77

30:                                               ; preds = %24
  %31 = getelementptr inbounds i8, i8* %4, i64 64
  %32 = tail call i32 @cr_png_get_uint_32(i8* %31) #21
  %33 = icmp ugt i32 %32, 65534
  br i1 %33, label %34, label %36

34:                                               ; preds = %30
  %35 = zext i32 %32 to i64
  tail call fastcc void @png_icc_profile_error(%struct.png_struct_def* %0, %struct.png_colorspace* %1, i8* %2, i64 %35, i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.32, i64 0, i64 0))
  br label %77

36:                                               ; preds = %30
  %37 = icmp ugt i32 %32, 3
  br i1 %37, label %38, label %40

38:                                               ; preds = %36
  %39 = zext i32 %32 to i64
  tail call fastcc void @png_icc_profile_error(%struct.png_struct_def* %0, %struct.png_colorspace* null, i8* %2, i64 %39, i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.33, i64 0, i64 0))
  br label %40

40:                                               ; preds = %38, %36
  %41 = getelementptr inbounds i8, i8* %4, i64 36
  %42 = tail call i32 @cr_png_get_uint_32(i8* %41) #21
  %43 = icmp eq i32 %42, 1633907568
  br i1 %43, label %46, label %44

44:                                               ; preds = %40
  %45 = zext i32 %42 to i64
  tail call fastcc void @png_icc_profile_error(%struct.png_struct_def* %0, %struct.png_colorspace* %1, i8* %2, i64 %45, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.34, i64 0, i64 0))
  br label %77

46:                                               ; preds = %40
  %47 = getelementptr inbounds i8, i8* %4, i64 68
  %48 = tail call i32 @bcmp(i8* %47, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @D50_nCIEXYZ, i64 0, i64 0), i64 12)
  %49 = icmp eq i32 %48, 0
  br i1 %49, label %51, label %50

50:                                               ; preds = %46
  tail call fastcc void @png_icc_profile_error(%struct.png_struct_def* %0, %struct.png_colorspace* null, i8* %2, i64 0, i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.35, i64 0, i64 0))
  br label %51

51:                                               ; preds = %46, %50
  %52 = getelementptr inbounds i8, i8* %4, i64 16
  %53 = tail call i32 @cr_png_get_uint_32(i8* %52) #21
  switch i32 %53, label %62 [
    i32 1380401696, label %54
    i32 1196573017, label %58
  ]

54:                                               ; preds = %51
  %55 = and i32 %5, 2
  %56 = icmp eq i32 %55, 0
  br i1 %56, label %57, label %64

57:                                               ; preds = %54
  tail call fastcc void @png_icc_profile_error(%struct.png_struct_def* %0, %struct.png_colorspace* %1, i8* %2, i64 1380401696, i8* getelementptr inbounds ([47 x i8], [47 x i8]* @.str.36, i64 0, i64 0))
  br label %77

58:                                               ; preds = %51
  %59 = and i32 %5, 2
  %60 = icmp eq i32 %59, 0
  br i1 %60, label %64, label %61

61:                                               ; preds = %58
  tail call fastcc void @png_icc_profile_error(%struct.png_struct_def* %0, %struct.png_colorspace* %1, i8* %2, i64 1196573017, i8* getelementptr inbounds ([42 x i8], [42 x i8]* @.str.37, i64 0, i64 0))
  br label %77

62:                                               ; preds = %51
  %63 = zext i32 %53 to i64
  tail call fastcc void @png_icc_profile_error(%struct.png_struct_def* %0, %struct.png_colorspace* %1, i8* %2, i64 %63, i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str.38, i64 0, i64 0))
  br label %77

64:                                               ; preds = %58, %54
  %65 = getelementptr inbounds i8, i8* %4, i64 12
  %66 = tail call i32 @cr_png_get_uint_32(i8* %65) #21
  switch i32 %66, label %70 [
    i32 1935896178, label %72
    i32 1835955314, label %72
    i32 1886549106, label %72
    i32 1936744803, label %72
    i32 1633842036, label %67
    i32 1818848875, label %68
    i32 1852662636, label %69
  ]

67:                                               ; preds = %64
  tail call fastcc void @png_icc_profile_error(%struct.png_struct_def* %0, %struct.png_colorspace* %1, i8* %2, i64 1633842036, i8* getelementptr inbounds ([38 x i8], [38 x i8]* @.str.39, i64 0, i64 0))
  br label %77

68:                                               ; preds = %64
  tail call fastcc void @png_icc_profile_error(%struct.png_struct_def* %0, %struct.png_colorspace* %1, i8* %2, i64 1818848875, i8* getelementptr inbounds ([40 x i8], [40 x i8]* @.str.40, i64 0, i64 0))
  br label %77

69:                                               ; preds = %64
  tail call fastcc void @png_icc_profile_error(%struct.png_struct_def* %0, %struct.png_colorspace* null, i8* %2, i64 1852662636, i8* getelementptr inbounds ([40 x i8], [40 x i8]* @.str.41, i64 0, i64 0))
  br label %72

70:                                               ; preds = %64
  %71 = zext i32 %66 to i64
  tail call fastcc void @png_icc_profile_error(%struct.png_struct_def* %0, %struct.png_colorspace* null, i8* %2, i64 %71, i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str.42, i64 0, i64 0))
  br label %72

72:                                               ; preds = %64, %64, %64, %64, %70, %69
  %73 = getelementptr inbounds i8, i8* %4, i64 20
  %74 = tail call i32 @cr_png_get_uint_32(i8* %73) #21
  switch i32 %74, label %75 [
    i32 1482250784, label %77
    i32 1281450528, label %77
  ]

75:                                               ; preds = %72
  %76 = zext i32 %74 to i64
  tail call fastcc void @png_icc_profile_error(%struct.png_struct_def* %0, %struct.png_colorspace* %1, i8* %2, i64 %76, i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.43, i64 0, i64 0))
  br label %77

77:                                               ; preds = %72, %72, %75, %68, %67, %62, %61, %57, %44, %34, %28, %18, %9
  %78 = phi i32 [ 0, %9 ], [ 0, %18 ], [ 0, %28 ], [ 0, %34 ], [ 0, %44 ], [ 0, %62 ], [ 0, %61 ], [ 0, %75 ], [ 0, %68 ], [ 0, %67 ], [ 0, %57 ], [ 1, %72 ], [ 1, %72 ]
  ret i32 %78
}

declare i32 @cr_png_get_uint_32(i8*) local_unnamed_addr #5

; Function Attrs: nounwind ssp uwtable
define hidden i32 @cr_png_icc_check_tag_table(%struct.png_struct_def* noalias, %struct.png_colorspace* noalias, i8*, i32, i8*) local_unnamed_addr #0 {
  %6 = getelementptr inbounds i8, i8* %4, i64 128
  %7 = tail call i32 @cr_png_get_uint_32(i8* %6) #21
  %8 = icmp eq i32 %7, 0
  br i1 %8, label %34, label %9

9:                                                ; preds = %5
  %10 = getelementptr inbounds i8, i8* %4, i64 132
  br label %11

11:                                               ; preds = %30, %9
  %12 = phi i8* [ %32, %30 ], [ %10, %9 ]
  %13 = phi i32 [ %31, %30 ], [ 0, %9 ]
  %14 = tail call i32 @cr_png_get_uint_32(i8* %12) #21
  %15 = getelementptr inbounds i8, i8* %12, i64 4
  %16 = tail call i32 @cr_png_get_uint_32(i8* %15) #21
  %17 = getelementptr inbounds i8, i8* %12, i64 8
  %18 = tail call i32 @cr_png_get_uint_32(i8* %17) #21
  %19 = icmp ugt i32 %16, %3
  %20 = sub i32 %3, %16
  %21 = icmp ugt i32 %18, %20
  %22 = or i1 %19, %21
  br i1 %22, label %23, label %25

23:                                               ; preds = %11
  %24 = zext i32 %14 to i64
  tail call fastcc void @png_icc_profile_error(%struct.png_struct_def* %0, %struct.png_colorspace* %1, i8* %2, i64 %24, i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str.44, i64 0, i64 0))
  br label %34

25:                                               ; preds = %11
  %26 = and i32 %16, 3
  %27 = icmp eq i32 %26, 0
  br i1 %27, label %30, label %28

28:                                               ; preds = %25
  %29 = zext i32 %14 to i64
  tail call fastcc void @png_icc_profile_error(%struct.png_struct_def* %0, %struct.png_colorspace* null, i8* %2, i64 %29, i8* getelementptr inbounds ([42 x i8], [42 x i8]* @.str.45, i64 0, i64 0))
  br label %30

30:                                               ; preds = %25, %28
  %31 = add nuw i32 %13, 1
  %32 = getelementptr inbounds i8, i8* %12, i64 12
  %33 = icmp eq i32 %31, %7
  br i1 %33, label %34, label %11

34:                                               ; preds = %30, %5, %23
  %35 = phi i32 [ 0, %23 ], [ 1, %5 ], [ 1, %30 ]
  ret i32 %35
}

; Function Attrs: nounwind ssp uwtable
define hidden void @cr_png_icc_set_sRGB(%struct.png_struct_def* noalias, %struct.png_colorspace* noalias, i8*, i64) local_unnamed_addr #0 {
  %5 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 107
  %6 = load i32, i32* %5, align 8, !alias.scope !30
  %7 = and i32 %6, 48
  %8 = icmp eq i32 %7, 48
  br i1 %8, label %90, label %9

9:                                                ; preds = %4
  %10 = getelementptr inbounds i8, i8* %2, i64 84
  %11 = getelementptr inbounds i8, i8* %2, i64 88
  %12 = getelementptr inbounds i8, i8* %2, i64 92
  %13 = getelementptr inbounds i8, i8* %2, i64 96
  %14 = getelementptr inbounds i8, i8* %2, i64 64
  br label %15

15:                                               ; preds = %82, %9
  %16 = phi i64 [ 0, %9 ], [ %85, %82 ]
  %17 = phi i32 [ 65536, %9 ], [ %84, %82 ]
  %18 = phi i32 [ 0, %9 ], [ %83, %82 ]
  %19 = tail call i32 @cr_png_get_uint_32(i8* %10) #21, !noalias !30
  %20 = getelementptr inbounds [7 x %struct.anon], [7 x %struct.anon]* @png_sRGB_checks, i64 0, i64 %16, i32 3, i64 0
  %21 = load i32, i32* %20, align 4, !noalias !30
  %22 = icmp eq i32 %19, %21
  br i1 %22, label %23, label %82

23:                                               ; preds = %15
  %24 = tail call i32 @cr_png_get_uint_32(i8* %11) #21, !noalias !30
  %25 = getelementptr inbounds [7 x %struct.anon], [7 x %struct.anon]* @png_sRGB_checks, i64 0, i64 %16, i32 3, i64 1
  %26 = load i32, i32* %25, align 4, !noalias !30
  %27 = icmp eq i32 %24, %26
  br i1 %27, label %28, label %82

28:                                               ; preds = %23
  %29 = tail call i32 @cr_png_get_uint_32(i8* %12) #21, !noalias !30
  %30 = getelementptr inbounds [7 x %struct.anon], [7 x %struct.anon]* @png_sRGB_checks, i64 0, i64 %16, i32 3, i64 2
  %31 = load i32, i32* %30, align 4, !noalias !30
  %32 = icmp eq i32 %29, %31
  br i1 %32, label %33, label %82

33:                                               ; preds = %28
  %34 = tail call i32 @cr_png_get_uint_32(i8* %13) #21, !noalias !30
  %35 = getelementptr inbounds [7 x %struct.anon], [7 x %struct.anon]* @png_sRGB_checks, i64 0, i64 %16, i32 3, i64 3
  %36 = load i32, i32* %35, align 4, !noalias !30
  %37 = icmp eq i32 %34, %36
  br i1 %37, label %38, label %82

38:                                               ; preds = %33
  %39 = icmp eq i32 %18, 0
  br i1 %39, label %40, label %43

40:                                               ; preds = %38
  %41 = tail call i32 @cr_png_get_uint_32(i8* %2) #21
  %42 = tail call i32 @cr_png_get_uint_32(i8* %14) #21
  br label %43

43:                                               ; preds = %40, %38
  %44 = phi i32 [ %41, %40 ], [ %18, %38 ]
  %45 = phi i32 [ %42, %40 ], [ %17, %38 ]
  %46 = getelementptr inbounds [7 x %struct.anon], [7 x %struct.anon]* @png_sRGB_checks, i64 0, i64 %16, i32 2
  %47 = load i32, i32* %46, align 8, !noalias !30
  %48 = icmp eq i32 %44, %47
  br i1 %48, label %49, label %82

49:                                               ; preds = %43
  %50 = getelementptr inbounds [7 x %struct.anon], [7 x %struct.anon]* @png_sRGB_checks, i64 0, i64 %16, i32 6
  %51 = load i16, i16* %50, align 2, !noalias !30
  %52 = zext i16 %51 to i32
  %53 = icmp eq i32 %45, %52
  br i1 %53, label %54, label %82

54:                                               ; preds = %49
  %55 = and i64 %16, 4294967295
  %56 = icmp eq i64 %3, 0
  br i1 %56, label %57, label %60

57:                                               ; preds = %54
  %58 = tail call i64 @Cr_z_adler32(i64 0, i8* null, i32 0) #21
  %59 = tail call i64 @Cr_z_adler32(i64 %58, i8* %2, i32 %44) #21
  br label %60

60:                                               ; preds = %57, %54
  %61 = phi i64 [ %59, %57 ], [ %3, %54 ]
  %62 = getelementptr inbounds [7 x %struct.anon], [7 x %struct.anon]* @png_sRGB_checks, i64 0, i64 %55, i32 0
  %63 = load i32, i32* %62, align 16, !noalias !30
  %64 = zext i32 %63 to i64
  %65 = icmp eq i64 %61, %64
  br i1 %65, label %66, label %81

66:                                               ; preds = %60
  %67 = tail call i64 @Cr_z_crc32(i64 0, i8* null, i32 0) #21
  %68 = tail call i64 @Cr_z_crc32(i64 %67, i8* %2, i32 %44) #21
  %69 = getelementptr inbounds [7 x %struct.anon], [7 x %struct.anon]* @png_sRGB_checks, i64 0, i64 %55, i32 1
  %70 = load i32, i32* %69, align 4
  %71 = zext i32 %70 to i64
  %72 = icmp eq i64 %68, %71
  br i1 %72, label %73, label %81

73:                                               ; preds = %66
  %74 = add nsw i64 %55, -5
  %75 = icmp ult i64 %74, 2
  br i1 %75, label %76, label %77

76:                                               ; preds = %73
  tail call void @cr_png_chunk_report(%struct.png_struct_def* %0, i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.71, i64 0, i64 0), i32 2) #21
  br label %87

77:                                               ; preds = %73
  %78 = add nsw i64 %55, -4
  %79 = icmp ult i64 %78, 3
  br i1 %79, label %80, label %87

80:                                               ; preds = %77
  tail call void @cr_png_chunk_report(%struct.png_struct_def* %0, i8* getelementptr inbounds ([43 x i8], [43 x i8]* @.str.72, i64 0, i64 0), i32 0) #21
  br label %87

81:                                               ; preds = %66, %60
  tail call void @cr_png_chunk_report(%struct.png_struct_def* %0, i8* getelementptr inbounds ([56 x i8], [56 x i8]* @.str.73, i64 0, i64 0), i32 0) #21
  br label %90

82:                                               ; preds = %49, %43, %33, %28, %23, %15
  %83 = phi i32 [ %44, %49 ], [ %44, %43 ], [ %18, %33 ], [ %18, %28 ], [ %18, %23 ], [ %18, %15 ]
  %84 = phi i32 [ %45, %49 ], [ %45, %43 ], [ %17, %33 ], [ %17, %28 ], [ %17, %23 ], [ %17, %15 ]
  %85 = add nuw nsw i64 %16, 1
  %86 = icmp eq i64 %85, 7
  br i1 %86, label %90, label %15

87:                                               ; preds = %80, %77, %76
  %88 = tail call i32 @cr_png_get_uint_32(i8* %14) #21
  %89 = tail call i32 @cr_png_colorspace_set_sRGB(%struct.png_struct_def* %0, %struct.png_colorspace* %1, i32 %88)
  br label %90

90:                                               ; preds = %82, %81, %4, %87
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @cr_png_colorspace_set_ICC(%struct.png_struct_def* noalias, %struct.png_colorspace* noalias, i8*, i32, i8*, i32) local_unnamed_addr #0 {
  %7 = getelementptr inbounds %struct.png_colorspace, %struct.png_colorspace* %1, i64 0, i32 4
  %8 = load i16, i16* %7, align 2
  %9 = icmp slt i16 %8, 0
  br i1 %9, label %21, label %10

10:                                               ; preds = %6
  %11 = icmp ult i32 %3, 132
  br i1 %11, label %12, label %14

12:                                               ; preds = %10
  %13 = zext i32 %3 to i64
  tail call fastcc void @png_icc_profile_error(%struct.png_struct_def* %0, %struct.png_colorspace* %1, i8* %2, i64 %13, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.70, i64 0, i64 0)) #21
  br label %21

14:                                               ; preds = %10
  %15 = tail call i32 @cr_png_icc_check_header(%struct.png_struct_def* %0, %struct.png_colorspace* %1, i8* %2, i32 %3, i8* %4, i32 %5)
  %16 = icmp eq i32 %15, 0
  br i1 %16, label %21, label %17

17:                                               ; preds = %14
  %18 = tail call i32 @cr_png_icc_check_tag_table(%struct.png_struct_def* %0, %struct.png_colorspace* %1, i8* %2, i32 %3, i8* %4)
  %19 = icmp eq i32 %18, 0
  br i1 %19, label %21, label %20

20:                                               ; preds = %17
  tail call void @cr_png_icc_set_sRGB(%struct.png_struct_def* %0, %struct.png_colorspace* %1, i8* %4, i64 0)
  br label %21

21:                                               ; preds = %12, %14, %17, %6, %20
  %22 = phi i32 [ 1, %20 ], [ 0, %6 ], [ 0, %17 ], [ 0, %14 ], [ 0, %12 ]
  ret i32 %22
}

; Function Attrs: nounwind ssp uwtable
define hidden void @cr_png_colorspace_set_rgb_coefficients(%struct.png_struct_def* noalias) local_unnamed_addr #0 {
  %2 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 115
  %3 = load i8, i8* %2, align 1
  %4 = icmp eq i8 %3, 0
  br i1 %4, label %5, label %114

5:                                                ; preds = %1
  %6 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 134, i32 4
  %7 = load i16, i16* %6, align 2
  %8 = and i16 %7, 2
  %9 = icmp eq i16 %8, 0
  br i1 %9, label %114, label %10

10:                                               ; preds = %5
  %11 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 134, i32 2, i32 1
  %12 = load i32, i32* %11, align 4
  %13 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 134, i32 2, i32 4
  %14 = load i32, i32* %13, align 4
  %15 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 134, i32 2, i32 7
  %16 = load i32, i32* %15, align 4
  %17 = add nsw i32 %14, %12
  %18 = add nsw i32 %17, %16
  %19 = icmp sgt i32 %18, 0
  %20 = icmp sgt i32 %12, -1
  %21 = and i1 %20, %19
  br i1 %21, label %22, label %113

22:                                               ; preds = %10
  %23 = icmp eq i32 %12, 0
  br i1 %23, label %36, label %24

24:                                               ; preds = %22
  %25 = sitofp i32 %12 to double
  %26 = fmul double %25, 3.276800e+04
  %27 = sitofp i32 %18 to double
  %28 = fdiv double %26, %27
  %29 = fadd double %28, 5.000000e-01
  %30 = tail call double @llvm.floor.f64(double %29) #21
  %31 = fcmp ole double %30, 0x41DFFFFFFFC00000
  %32 = fcmp oge double %30, 0xC1E0000000000000
  %33 = and i1 %31, %32
  br i1 %33, label %34, label %113

34:                                               ; preds = %24
  %35 = fptosi double %30 to i32
  br label %36

36:                                               ; preds = %22, %34
  %37 = phi i32 [ %35, %34 ], [ 0, %22 ]
  %38 = icmp ult i32 %37, 32769
  %39 = icmp sgt i32 %14, -1
  %40 = and i1 %39, %38
  br i1 %40, label %41, label %113

41:                                               ; preds = %36
  %42 = icmp eq i32 %14, 0
  br i1 %42, label %55, label %43

43:                                               ; preds = %41
  %44 = sitofp i32 %14 to double
  %45 = fmul double %44, 3.276800e+04
  %46 = sitofp i32 %18 to double
  %47 = fdiv double %45, %46
  %48 = fadd double %47, 5.000000e-01
  %49 = tail call double @llvm.floor.f64(double %48) #21
  %50 = fcmp ole double %49, 0x41DFFFFFFFC00000
  %51 = fcmp oge double %49, 0xC1E0000000000000
  %52 = and i1 %50, %51
  br i1 %52, label %53, label %113

53:                                               ; preds = %43
  %54 = fptosi double %49 to i32
  br label %55

55:                                               ; preds = %41, %53
  %56 = phi i32 [ %54, %53 ], [ 0, %41 ]
  %57 = icmp ult i32 %56, 32769
  %58 = icmp sgt i32 %16, -1
  %59 = and i1 %58, %57
  br i1 %59, label %60, label %113

60:                                               ; preds = %55
  %61 = icmp eq i32 %16, 0
  br i1 %61, label %75, label %62

62:                                               ; preds = %60
  %63 = sitofp i32 %16 to double
  %64 = fmul double %63, 3.276800e+04
  %65 = sitofp i32 %18 to double
  %66 = fdiv double %64, %65
  %67 = fadd double %66, 5.000000e-01
  %68 = tail call double @llvm.floor.f64(double %67) #21
  %69 = fcmp ole double %68, 0x41DFFFFFFFC00000
  %70 = fcmp oge double %68, 0xC1E0000000000000
  %71 = and i1 %69, %70
  br i1 %71, label %72, label %113

72:                                               ; preds = %62
  %73 = fptosi double %68 to i32
  %74 = icmp ult i32 %73, 32769
  br i1 %74, label %75, label %113

75:                                               ; preds = %60, %72
  %76 = phi i32 [ %73, %72 ], [ 0, %60 ]
  %77 = add nuw nsw i32 %56, %37
  %78 = add nuw nsw i32 %77, %76
  %79 = icmp slt i32 %78, 32770
  br i1 %79, label %80, label %113

80:                                               ; preds = %75
  %81 = icmp eq i32 %78, 32769
  %82 = icmp slt i32 %78, 32768
  %83 = zext i1 %82 to i32
  %84 = select i1 %81, i32 -1, i32 %83
  %85 = icmp eq i32 %84, 0
  br i1 %85, label %100, label %86

86:                                               ; preds = %80
  %87 = icmp slt i32 %56, %37
  %88 = icmp slt i32 %56, %76
  %89 = or i1 %87, %88
  br i1 %89, label %92, label %90

90:                                               ; preds = %86
  %91 = add nsw i32 %84, %56
  br label %100

92:                                               ; preds = %86
  %93 = icmp slt i32 %37, %56
  %94 = icmp slt i32 %37, %76
  %95 = or i1 %93, %94
  br i1 %95, label %98, label %96

96:                                               ; preds = %92
  %97 = add nsw i32 %84, %37
  br label %100

98:                                               ; preds = %92
  %99 = add nsw i32 %84, %76
  br label %100

100:                                              ; preds = %80, %90, %98, %96
  %101 = phi i32 [ %37, %80 ], [ %37, %98 ], [ %97, %96 ], [ %37, %90 ]
  %102 = phi i32 [ %56, %80 ], [ %56, %98 ], [ %56, %96 ], [ %91, %90 ]
  %103 = phi i32 [ %76, %80 ], [ %99, %98 ], [ %76, %96 ], [ %76, %90 ]
  %104 = add nsw i32 %102, %101
  %105 = add nsw i32 %104, %103
  %106 = icmp eq i32 %105, 32768
  br i1 %106, label %108, label %107

107:                                              ; preds = %100
  tail call void @cr_png_error(%struct.png_struct_def* %0, i8* getelementptr inbounds ([42 x i8], [42 x i8]* @.str.46, i64 0, i64 0)) #19
  unreachable

108:                                              ; preds = %100
  %109 = trunc i32 %101 to i16
  %110 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 116
  store i16 %109, i16* %110, align 2
  %111 = trunc i32 %102 to i16
  %112 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 117
  store i16 %111, i16* %112, align 4
  br label %114

113:                                              ; preds = %62, %43, %24, %75, %72, %55, %36, %10
  tail call void @cr_png_error(%struct.png_struct_def* %0, i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str.47, i64 0, i64 0)) #19
  unreachable

114:                                              ; preds = %5, %108, %1
  ret void
}

; Function Attrs: nofree nounwind ssp uwtable writeonly
define hidden i32 @cr_png_muldiv(i32* nocapture, i32, i32, i32) local_unnamed_addr #13 {
  %5 = icmp eq i32 %3, 0
  br i1 %5, label %24, label %6

6:                                                ; preds = %4
  %7 = icmp eq i32 %1, 0
  %8 = icmp eq i32 %2, 0
  %9 = or i1 %7, %8
  br i1 %9, label %10, label %11

10:                                               ; preds = %6
  store i32 0, i32* %0, align 4
  br label %24

11:                                               ; preds = %6
  %12 = sitofp i32 %1 to double
  %13 = sitofp i32 %2 to double
  %14 = fmul double %12, %13
  %15 = sitofp i32 %3 to double
  %16 = fdiv double %14, %15
  %17 = fadd double %16, 5.000000e-01
  %18 = tail call double @llvm.floor.f64(double %17)
  %19 = fcmp ole double %18, 0x41DFFFFFFFC00000
  %20 = fcmp oge double %18, 0xC1E0000000000000
  %21 = and i1 %19, %20
  br i1 %21, label %22, label %24

22:                                               ; preds = %11
  %23 = fptosi double %18 to i32
  store i32 %23, i32* %0, align 4
  br label %24

24:                                               ; preds = %4, %11, %22, %10
  %25 = phi i32 [ 1, %10 ], [ 1, %22 ], [ 0, %11 ], [ 0, %4 ]
  ret i32 %25
}

; Function Attrs: nounwind ssp uwtable
define hidden void @cr_png_check_IHDR(%struct.png_struct_def* noalias, i32, i32, i32, i32, i32, i32, i32) local_unnamed_addr #0 {
  %9 = icmp eq i32 %1, 0
  br i1 %9, label %12, label %10

10:                                               ; preds = %8
  %11 = icmp slt i32 %1, 0
  br i1 %11, label %12, label %14

12:                                               ; preds = %10, %8
  %13 = phi i8* [ getelementptr inbounds ([28 x i8], [28 x i8]* @.str.48, i64 0, i64 0), %8 ], [ getelementptr inbounds ([28 x i8], [28 x i8]* @.str.49, i64 0, i64 0), %10 ]
  tail call void @cr_png_warning(%struct.png_struct_def* %0, i8* %13) #21
  br label %14

14:                                               ; preds = %12, %10
  %15 = phi i32 [ 0, %10 ], [ 1, %12 ]
  %16 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 123
  %17 = load i32, i32* %16, align 4
  %18 = icmp ult i32 %17, %1
  br i1 %18, label %19, label %20

19:                                               ; preds = %14
  tail call void @cr_png_warning(%struct.png_struct_def* %0, i8* getelementptr inbounds ([39 x i8], [39 x i8]* @.str.51, i64 0, i64 0)) #21
  br label %20

20:                                               ; preds = %19, %14
  %21 = phi i32 [ 1, %19 ], [ %15, %14 ]
  %22 = icmp eq i32 %2, 0
  br i1 %22, label %25, label %23

23:                                               ; preds = %20
  %24 = icmp slt i32 %2, 0
  br i1 %24, label %25, label %27

25:                                               ; preds = %23, %20
  %26 = phi i8* [ getelementptr inbounds ([29 x i8], [29 x i8]* @.str.52, i64 0, i64 0), %20 ], [ getelementptr inbounds ([29 x i8], [29 x i8]* @.str.53, i64 0, i64 0), %23 ]
  tail call void @cr_png_warning(%struct.png_struct_def* %0, i8* %26) #21
  br label %27

27:                                               ; preds = %25, %23
  %28 = phi i32 [ %21, %23 ], [ 1, %25 ]
  %29 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 124
  %30 = load i32, i32* %29, align 8
  %31 = icmp ult i32 %30, %2
  br i1 %31, label %32, label %33

32:                                               ; preds = %27
  tail call void @cr_png_warning(%struct.png_struct_def* %0, i8* getelementptr inbounds ([40 x i8], [40 x i8]* @.str.54, i64 0, i64 0)) #21
  br label %33

33:                                               ; preds = %32, %27
  %34 = phi i32 [ 1, %32 ], [ %28, %27 ]
  switch i32 %3, label %35 [
    i32 16, label %36
    i32 8, label %36
    i32 4, label %36
    i32 2, label %36
    i32 1, label %36
  ]

35:                                               ; preds = %33
  tail call void @cr_png_warning(%struct.png_struct_def* %0, i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.55, i64 0, i64 0)) #21
  br label %36

36:                                               ; preds = %33, %33, %33, %33, %33, %35
  %37 = phi i32 [ 1, %35 ], [ %34, %33 ], [ %34, %33 ], [ %34, %33 ], [ %34, %33 ], [ %34, %33 ]
  %38 = or i32 %4, 4
  %39 = icmp eq i32 %38, 5
  %40 = icmp ugt i32 %4, 6
  %41 = or i1 %40, %39
  br i1 %41, label %42, label %43

42:                                               ; preds = %36
  tail call void @cr_png_warning(%struct.png_struct_def* %0, i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.56, i64 0, i64 0)) #21
  br label %43

43:                                               ; preds = %36, %42
  %44 = phi i32 [ 1, %42 ], [ %37, %36 ]
  %45 = icmp eq i32 %4, 3
  %46 = icmp sgt i32 %3, 8
  %47 = and i1 %46, %45
  br i1 %47, label %54, label %48

48:                                               ; preds = %43
  %49 = icmp eq i32 %4, 4
  %50 = icmp eq i32 %38, 6
  %51 = or i1 %49, %50
  %52 = icmp slt i32 %3, 8
  %53 = and i1 %52, %51
  br i1 %53, label %54, label %55

54:                                               ; preds = %48, %43
  tail call void @cr_png_warning(%struct.png_struct_def* %0, i8* getelementptr inbounds ([49 x i8], [49 x i8]* @.str.57, i64 0, i64 0)) #21
  br label %55

55:                                               ; preds = %48, %54
  %56 = phi i32 [ 1, %54 ], [ %44, %48 ]
  %57 = icmp sgt i32 %5, 1
  br i1 %57, label %58, label %59

58:                                               ; preds = %55
  tail call void @cr_png_warning(%struct.png_struct_def* %0, i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.58, i64 0, i64 0)) #21
  br label %59

59:                                               ; preds = %58, %55
  %60 = phi i32 [ 1, %58 ], [ %56, %55 ]
  %61 = icmp eq i32 %6, 0
  br i1 %61, label %63, label %62

62:                                               ; preds = %59
  tail call void @cr_png_warning(%struct.png_struct_def* %0, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.59, i64 0, i64 0)) #21
  br label %63

63:                                               ; preds = %59, %62
  %64 = phi i32 [ 1, %62 ], [ %60, %59 ]
  %65 = icmp eq i32 %7, 0
  br i1 %65, label %67, label %66

66:                                               ; preds = %63
  tail call void @cr_png_warning(%struct.png_struct_def* %0, i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.60, i64 0, i64 0)) #21
  br label %69

67:                                               ; preds = %63
  %68 = icmp eq i32 %64, 1
  br i1 %68, label %69, label %70

69:                                               ; preds = %66, %67
  tail call void @cr_png_error(%struct.png_struct_def* %0, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.61, i64 0, i64 0)) #19
  unreachable

70:                                               ; preds = %67
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @cr_png_fixed(%struct.png_struct_def* noalias, double, i8*) local_unnamed_addr #0 {
  %4 = fmul double %1, 1.000000e+05
  %5 = fadd double %4, 5.000000e-01
  %6 = tail call double @llvm.floor.f64(double %5)
  %7 = fcmp ogt double %6, 0x41DFFFFFFFC00000
  %8 = fcmp olt double %6, 0xC1E0000000000000
  %9 = or i1 %7, %8
  br i1 %9, label %10, label %11

10:                                               ; preds = %3
  tail call void @cr_png_fixed_error(%struct.png_struct_def* %0, i8* %2) #19
  unreachable

11:                                               ; preds = %3
  %12 = fptosi double %6 to i32
  ret i32 %12
}

; Function Attrs: nounwind readnone speculatable
declare double @llvm.floor.f64(double) #14

; Function Attrs: noreturn
declare void @cr_png_fixed_error(%struct.png_struct_def*, i8*) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden i32 @cr_png_muldiv_warn(%struct.png_struct_def* noalias, i32, i32, i32) local_unnamed_addr #0 {
  %5 = icmp eq i32 %3, 0
  br i1 %5, label %23, label %6

6:                                                ; preds = %4
  %7 = icmp eq i32 %1, 0
  %8 = icmp eq i32 %2, 0
  %9 = or i1 %7, %8
  br i1 %9, label %24, label %10

10:                                               ; preds = %6
  %11 = sitofp i32 %1 to double
  %12 = sitofp i32 %2 to double
  %13 = fmul double %11, %12
  %14 = sitofp i32 %3 to double
  %15 = fdiv double %13, %14
  %16 = fadd double %15, 5.000000e-01
  %17 = tail call double @llvm.floor.f64(double %16) #21
  %18 = fcmp ole double %17, 0x41DFFFFFFFC00000
  %19 = fcmp oge double %17, 0xC1E0000000000000
  %20 = and i1 %18, %19
  br i1 %20, label %21, label %23

21:                                               ; preds = %10
  %22 = fptosi double %17 to i32
  br label %24

23:                                               ; preds = %10, %4
  tail call void @cr_png_warning(%struct.png_struct_def* %0, i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.62, i64 0, i64 0)) #21
  br label %24

24:                                               ; preds = %6, %21, %23
  %25 = phi i32 [ 0, %23 ], [ %22, %21 ], [ 0, %6 ]
  ret i32 %25
}

; Function Attrs: nounwind readnone ssp uwtable
define hidden i32 @cr_png_reciprocal(i32) local_unnamed_addr #15 {
  %2 = sitofp i32 %0 to double
  %3 = fdiv double 1.000000e+10, %2
  %4 = fadd double %3, 5.000000e-01
  %5 = tail call double @llvm.floor.f64(double %4)
  %6 = fcmp ole double %5, 0x41DFFFFFFFC00000
  %7 = fcmp oge double %5, 0xC1E0000000000000
  %8 = and i1 %6, %7
  %9 = fptosi double %5 to i32
  %10 = select i1 %8, i32 %9, i32 0
  ret i32 %10
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden i32 @cr_png_gamma_significant(i32) local_unnamed_addr #11 {
  %2 = add i32 %0, -95000
  %3 = icmp ugt i32 %2, 10000
  %4 = zext i1 %3 to i32
  ret i32 %4
}

; Function Attrs: nounwind readnone ssp uwtable
define hidden i32 @cr_png_reciprocal2(i32, i32) local_unnamed_addr #15 {
  %3 = icmp ne i32 %0, 0
  %4 = icmp ne i32 %1, 0
  %5 = and i1 %3, %4
  br i1 %5, label %6, label %17

6:                                                ; preds = %2
  %7 = sitofp i32 %0 to double
  %8 = fdiv double 1.000000e+15, %7
  %9 = sitofp i32 %1 to double
  %10 = fdiv double %8, %9
  %11 = fadd double %10, 5.000000e-01
  %12 = tail call double @llvm.floor.f64(double %11)
  %13 = fcmp ugt double %12, 0x41DFFFFFFFC00000
  %14 = fcmp ult double %12, 0xC1E0000000000000
  %15 = fptosi double %12 to i32
  %16 = or i1 %14, %13
  br i1 %16, label %17, label %18

17:                                               ; preds = %6, %2
  br label %18

18:                                               ; preds = %6, %17
  %19 = phi i32 [ 0, %17 ], [ %15, %6 ]
  ret i32 %19
}

; Function Attrs: nofree nounwind ssp uwtable
define hidden zeroext i8 @cr_png_gamma_8bit_correct(i32, i32) local_unnamed_addr #16 {
  %3 = add i32 %0, -1
  %4 = icmp ult i32 %3, 254
  br i1 %4, label %5, label %15

5:                                                ; preds = %2
  %6 = sitofp i32 %0 to double
  %7 = fdiv double %6, 2.550000e+02
  %8 = sitofp i32 %1 to double
  %9 = fmul double %8, 1.000000e-05
  %10 = tail call double @pow(double %7, double %9) #21
  %11 = fmul double %10, 2.550000e+02
  %12 = fadd double %11, 5.000000e-01
  %13 = tail call double @llvm.floor.f64(double %12)
  %14 = fptoui double %13 to i8
  br label %17

15:                                               ; preds = %2
  %16 = trunc i32 %0 to i8
  br label %17

17:                                               ; preds = %15, %5
  %18 = phi i8 [ %14, %5 ], [ %16, %15 ]
  ret i8 %18
}

; Function Attrs: nofree nounwind
declare double @pow(double, double) local_unnamed_addr #17

; Function Attrs: nofree nounwind ssp uwtable
define hidden zeroext i16 @cr_png_gamma_16bit_correct(i32, i32) local_unnamed_addr #16 {
  %3 = add i32 %0, -1
  %4 = icmp ult i32 %3, 65534
  br i1 %4, label %5, label %15

5:                                                ; preds = %2
  %6 = sitofp i32 %0 to double
  %7 = fdiv double %6, 6.553500e+04
  %8 = sitofp i32 %1 to double
  %9 = fmul double %8, 1.000000e-05
  %10 = tail call double @pow(double %7, double %9) #21
  %11 = fmul double %10, 6.553500e+04
  %12 = fadd double %11, 5.000000e-01
  %13 = tail call double @llvm.floor.f64(double %12)
  %14 = fptoui double %13 to i16
  br label %17

15:                                               ; preds = %2
  %16 = trunc i32 %0 to i16
  br label %17

17:                                               ; preds = %15, %5
  %18 = phi i16 [ %14, %5 ], [ %16, %15 ]
  ret i16 %18
}

; Function Attrs: nofree nounwind ssp uwtable
define hidden zeroext i16 @cr_png_gamma_correct(%struct.png_struct_def* noalias nocapture readonly, i32, i32) local_unnamed_addr #16 {
  %4 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 61
  %5 = load i8, i8* %4, align 2
  %6 = icmp eq i8 %5, 8
  %7 = add i32 %1, -1
  br i1 %6, label %8, label %25

8:                                                ; preds = %3
  %9 = icmp ult i32 %7, 254
  br i1 %9, label %10, label %20

10:                                               ; preds = %8
  %11 = sitofp i32 %1 to double
  %12 = fdiv double %11, 2.550000e+02
  %13 = sitofp i32 %2 to double
  %14 = fmul double %13, 1.000000e-05
  %15 = tail call double @pow(double %12, double %14) #21
  %16 = fmul double %15, 2.550000e+02
  %17 = fadd double %16, 5.000000e-01
  %18 = tail call double @llvm.floor.f64(double %17) #21
  %19 = fptoui double %18 to i8
  br label %22

20:                                               ; preds = %8
  %21 = trunc i32 %1 to i8
  br label %22

22:                                               ; preds = %10, %20
  %23 = phi i8 [ %19, %10 ], [ %21, %20 ]
  %24 = zext i8 %23 to i16
  br label %39

25:                                               ; preds = %3
  %26 = icmp ult i32 %7, 65534
  br i1 %26, label %27, label %37

27:                                               ; preds = %25
  %28 = sitofp i32 %1 to double
  %29 = fdiv double %28, 6.553500e+04
  %30 = sitofp i32 %2 to double
  %31 = fmul double %30, 1.000000e-05
  %32 = tail call double @pow(double %29, double %31) #21
  %33 = fmul double %32, 6.553500e+04
  %34 = fadd double %33, 5.000000e-01
  %35 = tail call double @llvm.floor.f64(double %34) #21
  %36 = fptoui double %35 to i16
  br label %39

37:                                               ; preds = %25
  %38 = trunc i32 %1 to i16
  br label %39

39:                                               ; preds = %37, %27, %22
  %40 = phi i16 [ %24, %22 ], [ %36, %27 ], [ %38, %37 ]
  ret i16 %40
}

; Function Attrs: nounwind ssp uwtable
define hidden void @cr_png_destroy_gamma_table(%struct.png_struct_def* noalias) local_unnamed_addr #0 {
  %2 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 80
  %3 = load i8*, i8** %2, align 8
  tail call void @cr_png_free(%struct.png_struct_def* %0, i8* %3) #21
  store i8* null, i8** %2, align 8
  %4 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 81
  %5 = load i16**, i16*** %4, align 8
  %6 = icmp eq i16** %5, null
  br i1 %6, label %27, label %7

7:                                                ; preds = %1
  %8 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 78
  %9 = load i32, i32* %8, align 8
  %10 = sub nsw i32 8, %9
  %11 = icmp eq i32 %10, 31
  br i1 %11, label %24, label %12

12:                                               ; preds = %7
  %13 = shl i32 1, %10
  %14 = sext i32 %13 to i64
  br label %15

15:                                               ; preds = %12, %15
  %16 = phi i64 [ 0, %12 ], [ %21, %15 ]
  %17 = phi i16** [ %5, %12 ], [ %23, %15 ]
  %18 = getelementptr inbounds i16*, i16** %17, i64 %16
  %19 = bitcast i16** %18 to i8**
  %20 = load i8*, i8** %19, align 8
  tail call void @cr_png_free(%struct.png_struct_def* %0, i8* %20) #21
  %21 = add nuw nsw i64 %16, 1
  %22 = icmp slt i64 %21, %14
  %23 = load i16**, i16*** %4, align 8
  br i1 %22, label %15, label %24

24:                                               ; preds = %15, %7
  %25 = phi i16** [ %5, %7 ], [ %23, %15 ]
  %26 = bitcast i16** %25 to i8*
  tail call void @cr_png_free(%struct.png_struct_def* %0, i8* %26) #21
  store i16** null, i16*** %4, align 8
  br label %27

27:                                               ; preds = %1, %24
  %28 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 82
  %29 = load i8*, i8** %28, align 8
  tail call void @cr_png_free(%struct.png_struct_def* %0, i8* %29) #21
  store i8* null, i8** %28, align 8
  %30 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 83
  %31 = load i8*, i8** %30, align 8
  tail call void @cr_png_free(%struct.png_struct_def* %0, i8* %31) #21
  store i8* null, i8** %30, align 8
  %32 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 84
  %33 = load i16**, i16*** %32, align 8
  %34 = icmp eq i16** %33, null
  br i1 %34, label %55, label %35

35:                                               ; preds = %27
  %36 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 78
  %37 = load i32, i32* %36, align 8
  %38 = sub nsw i32 8, %37
  %39 = icmp eq i32 %38, 31
  br i1 %39, label %52, label %40

40:                                               ; preds = %35
  %41 = shl i32 1, %38
  %42 = sext i32 %41 to i64
  br label %43

43:                                               ; preds = %40, %43
  %44 = phi i64 [ 0, %40 ], [ %49, %43 ]
  %45 = phi i16** [ %33, %40 ], [ %51, %43 ]
  %46 = getelementptr inbounds i16*, i16** %45, i64 %44
  %47 = bitcast i16** %46 to i8**
  %48 = load i8*, i8** %47, align 8
  tail call void @cr_png_free(%struct.png_struct_def* %0, i8* %48) #21
  %49 = add nuw nsw i64 %44, 1
  %50 = icmp slt i64 %49, %42
  %51 = load i16**, i16*** %32, align 8
  br i1 %50, label %43, label %52

52:                                               ; preds = %43, %35
  %53 = phi i16** [ %33, %35 ], [ %51, %43 ]
  %54 = bitcast i16** %53 to i8*
  tail call void @cr_png_free(%struct.png_struct_def* %0, i8* %54) #21
  store i16** null, i16*** %32, align 8
  br label %55

55:                                               ; preds = %27, %52
  %56 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 85
  %57 = load i16**, i16*** %56, align 8
  %58 = icmp eq i16** %57, null
  br i1 %58, label %79, label %59

59:                                               ; preds = %55
  %60 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 78
  %61 = load i32, i32* %60, align 8
  %62 = sub nsw i32 8, %61
  %63 = icmp eq i32 %62, 31
  br i1 %63, label %76, label %64

64:                                               ; preds = %59
  %65 = shl i32 1, %62
  %66 = sext i32 %65 to i64
  br label %67

67:                                               ; preds = %64, %67
  %68 = phi i64 [ 0, %64 ], [ %73, %67 ]
  %69 = phi i16** [ %57, %64 ], [ %75, %67 ]
  %70 = getelementptr inbounds i16*, i16** %69, i64 %68
  %71 = bitcast i16** %70 to i8**
  %72 = load i8*, i8** %71, align 8
  tail call void @cr_png_free(%struct.png_struct_def* %0, i8* %72) #21
  %73 = add nuw nsw i64 %68, 1
  %74 = icmp slt i64 %73, %66
  %75 = load i16**, i16*** %56, align 8
  br i1 %74, label %67, label %76

76:                                               ; preds = %67, %59
  %77 = phi i16** [ %57, %59 ], [ %75, %67 ]
  %78 = bitcast i16** %77 to i8*
  tail call void @cr_png_free(%struct.png_struct_def* %0, i8* %78) #21
  store i16** null, i16*** %56, align 8
  br label %79

79:                                               ; preds = %55, %76
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @cr_png_build_gamma_table(%struct.png_struct_def* noalias, i32) local_unnamed_addr #0 {
  %3 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 80
  %4 = load i8*, i8** %3, align 8
  %5 = icmp eq i8* %4, null
  br i1 %5, label %6, label %10

6:                                                ; preds = %2
  %7 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 81
  %8 = load i16**, i16*** %7, align 8
  %9 = icmp eq i16** %8, null
  br i1 %9, label %11, label %10

10:                                               ; preds = %6, %2
  tail call void @cr_png_warning(%struct.png_struct_def* %0, i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.63, i64 0, i64 0)) #21
  tail call void @cr_png_destroy_gamma_table(%struct.png_struct_def* %0)
  br label %11

11:                                               ; preds = %6, %10
  %12 = icmp slt i32 %1, 9
  br i1 %12, label %13, label %251

13:                                               ; preds = %11
  %14 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 79
  %15 = load i32, i32* %14, align 4
  %16 = icmp sgt i32 %15, 0
  br i1 %16, label %17, label %33

17:                                               ; preds = %13
  %18 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 134, i32 0
  %19 = load i32, i32* %18, align 8
  %20 = icmp eq i32 %19, 0
  br i1 %20, label %32, label %21

21:                                               ; preds = %17
  %22 = sitofp i32 %19 to double
  %23 = fdiv double 1.000000e+15, %22
  %24 = sitofp i32 %15 to double
  %25 = fdiv double %23, %24
  %26 = fadd double %25, 5.000000e-01
  %27 = tail call double @llvm.floor.f64(double %26) #21
  %28 = fcmp ugt double %27, 0x41DFFFFFFFC00000
  %29 = fcmp ult double %27, 0xC1E0000000000000
  %30 = fptosi double %27 to i32
  %31 = or i1 %29, %28
  br i1 %31, label %32, label %33

32:                                               ; preds = %17, %21
  br label %33

33:                                               ; preds = %32, %21, %13
  %34 = phi i32 [ 100000, %13 ], [ 0, %32 ], [ %30, %21 ]
  %35 = tail call noalias i8* @cr_png_malloc(%struct.png_struct_def* %0, i64 256) #21
  store i8* %35, i8** %3, align 8, !noalias !33
  %36 = add i32 %34, -95000
  %37 = icmp ult i32 %36, 10001
  br i1 %37, label %38, label %70

38:                                               ; preds = %33
  %39 = bitcast i8* %35 to <16 x i8>*
  store <16 x i8> <i8 0, i8 1, i8 2, i8 3, i8 4, i8 5, i8 6, i8 7, i8 8, i8 9, i8 10, i8 11, i8 12, i8 13, i8 14, i8 15>, <16 x i8>* %39, align 1, !noalias !33
  %40 = getelementptr inbounds i8, i8* %35, i64 16
  %41 = bitcast i8* %40 to <16 x i8>*
  store <16 x i8> <i8 16, i8 17, i8 18, i8 19, i8 20, i8 21, i8 22, i8 23, i8 24, i8 25, i8 26, i8 27, i8 28, i8 29, i8 30, i8 31>, <16 x i8>* %41, align 1, !noalias !33
  %42 = getelementptr inbounds i8, i8* %35, i64 32
  %43 = bitcast i8* %42 to <16 x i8>*
  store <16 x i8> <i8 32, i8 33, i8 34, i8 35, i8 36, i8 37, i8 38, i8 39, i8 40, i8 41, i8 42, i8 43, i8 44, i8 45, i8 46, i8 47>, <16 x i8>* %43, align 1, !noalias !33
  %44 = getelementptr inbounds i8, i8* %35, i64 48
  %45 = bitcast i8* %44 to <16 x i8>*
  store <16 x i8> <i8 48, i8 49, i8 50, i8 51, i8 52, i8 53, i8 54, i8 55, i8 56, i8 57, i8 58, i8 59, i8 60, i8 61, i8 62, i8 63>, <16 x i8>* %45, align 1, !noalias !33
  %46 = getelementptr inbounds i8, i8* %35, i64 64
  %47 = bitcast i8* %46 to <16 x i8>*
  store <16 x i8> <i8 64, i8 65, i8 66, i8 67, i8 68, i8 69, i8 70, i8 71, i8 72, i8 73, i8 74, i8 75, i8 76, i8 77, i8 78, i8 79>, <16 x i8>* %47, align 1, !noalias !33
  %48 = getelementptr inbounds i8, i8* %35, i64 80
  %49 = bitcast i8* %48 to <16 x i8>*
  store <16 x i8> <i8 80, i8 81, i8 82, i8 83, i8 84, i8 85, i8 86, i8 87, i8 88, i8 89, i8 90, i8 91, i8 92, i8 93, i8 94, i8 95>, <16 x i8>* %49, align 1, !noalias !33
  %50 = getelementptr inbounds i8, i8* %35, i64 96
  %51 = bitcast i8* %50 to <16 x i8>*
  store <16 x i8> <i8 96, i8 97, i8 98, i8 99, i8 100, i8 101, i8 102, i8 103, i8 104, i8 105, i8 106, i8 107, i8 108, i8 109, i8 110, i8 111>, <16 x i8>* %51, align 1, !noalias !33
  %52 = getelementptr inbounds i8, i8* %35, i64 112
  %53 = bitcast i8* %52 to <16 x i8>*
  store <16 x i8> <i8 112, i8 113, i8 114, i8 115, i8 116, i8 117, i8 118, i8 119, i8 120, i8 121, i8 122, i8 123, i8 124, i8 125, i8 126, i8 127>, <16 x i8>* %53, align 1, !noalias !33
  %54 = getelementptr inbounds i8, i8* %35, i64 128
  %55 = bitcast i8* %54 to <16 x i8>*
  store <16 x i8> <i8 -128, i8 -127, i8 -126, i8 -125, i8 -124, i8 -123, i8 -122, i8 -121, i8 -120, i8 -119, i8 -118, i8 -117, i8 -116, i8 -115, i8 -114, i8 -113>, <16 x i8>* %55, align 1, !noalias !33
  %56 = getelementptr inbounds i8, i8* %35, i64 144
  %57 = bitcast i8* %56 to <16 x i8>*
  store <16 x i8> <i8 -112, i8 -111, i8 -110, i8 -109, i8 -108, i8 -107, i8 -106, i8 -105, i8 -104, i8 -103, i8 -102, i8 -101, i8 -100, i8 -99, i8 -98, i8 -97>, <16 x i8>* %57, align 1, !noalias !33
  %58 = getelementptr inbounds i8, i8* %35, i64 160
  %59 = bitcast i8* %58 to <16 x i8>*
  store <16 x i8> <i8 -96, i8 -95, i8 -94, i8 -93, i8 -92, i8 -91, i8 -90, i8 -89, i8 -88, i8 -87, i8 -86, i8 -85, i8 -84, i8 -83, i8 -82, i8 -81>, <16 x i8>* %59, align 1, !noalias !33
  %60 = getelementptr inbounds i8, i8* %35, i64 176
  %61 = bitcast i8* %60 to <16 x i8>*
  store <16 x i8> <i8 -80, i8 -79, i8 -78, i8 -77, i8 -76, i8 -75, i8 -74, i8 -73, i8 -72, i8 -71, i8 -70, i8 -69, i8 -68, i8 -67, i8 -66, i8 -65>, <16 x i8>* %61, align 1, !noalias !33
  %62 = getelementptr inbounds i8, i8* %35, i64 192
  %63 = bitcast i8* %62 to <16 x i8>*
  store <16 x i8> <i8 -64, i8 -63, i8 -62, i8 -61, i8 -60, i8 -59, i8 -58, i8 -57, i8 -56, i8 -55, i8 -54, i8 -53, i8 -52, i8 -51, i8 -50, i8 -49>, <16 x i8>* %63, align 1, !noalias !33
  %64 = getelementptr inbounds i8, i8* %35, i64 208
  %65 = bitcast i8* %64 to <16 x i8>*
  store <16 x i8> <i8 -48, i8 -47, i8 -46, i8 -45, i8 -44, i8 -43, i8 -42, i8 -41, i8 -40, i8 -39, i8 -38, i8 -37, i8 -36, i8 -35, i8 -34, i8 -33>, <16 x i8>* %65, align 1, !noalias !33
  %66 = getelementptr inbounds i8, i8* %35, i64 224
  %67 = bitcast i8* %66 to <16 x i8>*
  store <16 x i8> <i8 -32, i8 -31, i8 -30, i8 -29, i8 -28, i8 -27, i8 -26, i8 -25, i8 -24, i8 -23, i8 -22, i8 -21, i8 -20, i8 -19, i8 -18, i8 -17>, <16 x i8>* %67, align 1, !noalias !33
  %68 = getelementptr inbounds i8, i8* %35, i64 240
  %69 = bitcast i8* %68 to <16 x i8>*
  store <16 x i8> <i8 -16, i8 -15, i8 -14, i8 -13, i8 -12, i8 -11, i8 -10, i8 -9, i8 -8, i8 -7, i8 -6, i8 -5, i8 -4, i8 -3, i8 -2, i8 -1>, <16 x i8>* %69, align 1, !noalias !33
  br label %95

70:                                               ; preds = %33
  %71 = sitofp i32 %34 to double
  %72 = fmul double %71, 1.000000e-05
  br label %73

73:                                               ; preds = %89, %70
  %74 = phi i64 [ 0, %70 ], [ %92, %89 ]
  %75 = phi i32 [ 0, %70 ], [ %93, %89 ]
  %76 = trunc i64 %74 to i32
  %77 = add i32 %76, -1
  %78 = icmp ult i32 %77, 254
  br i1 %78, label %79, label %87

79:                                               ; preds = %73
  %80 = sitofp i32 %76 to double
  %81 = fdiv double %80, 2.550000e+02
  %82 = tail call double @pow(double %81, double %72) #21
  %83 = fmul double %82, 2.550000e+02
  %84 = fadd double %83, 5.000000e-01
  %85 = tail call double @llvm.floor.f64(double %84) #21
  %86 = fptoui double %85 to i8
  br label %89

87:                                               ; preds = %73
  %88 = trunc i32 %75 to i8
  br label %89

89:                                               ; preds = %87, %79
  %90 = phi i8 [ %86, %79 ], [ %88, %87 ]
  %91 = getelementptr inbounds i8, i8* %35, i64 %74
  store i8 %90, i8* %91, align 1, !noalias !33
  %92 = add nuw nsw i64 %74, 1
  %93 = add nuw nsw i32 %75, 1
  %94 = icmp eq i64 %92, 256
  br i1 %94, label %95, label %73

95:                                               ; preds = %89, %38
  %96 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 17
  %97 = load i32, i32* %96, align 4
  %98 = and i32 %97, 6291584
  %99 = icmp eq i32 %98, 0
  br i1 %99, label %483, label %100

100:                                              ; preds = %95
  %101 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 83
  %102 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 134, i32 0
  %103 = load i32, i32* %102, align 8
  %104 = sitofp i32 %103 to double
  %105 = fdiv double 1.000000e+10, %104
  %106 = fadd double %105, 5.000000e-01
  %107 = tail call double @llvm.floor.f64(double %106) #21
  %108 = fcmp ole double %107, 0x41DFFFFFFFC00000
  %109 = fcmp oge double %107, 0xC1E0000000000000
  %110 = and i1 %108, %109
  %111 = fptosi double %107 to i32
  %112 = select i1 %110, i32 %111, i32 0
  %113 = tail call noalias i8* @cr_png_malloc(%struct.png_struct_def* %0, i64 256) #21
  store i8* %113, i8** %101, align 8, !noalias !36
  %114 = add i32 %112, -95000
  %115 = icmp ult i32 %114, 10001
  br i1 %115, label %116, label %148

116:                                              ; preds = %100
  %117 = bitcast i8* %113 to <16 x i8>*
  store <16 x i8> <i8 0, i8 1, i8 2, i8 3, i8 4, i8 5, i8 6, i8 7, i8 8, i8 9, i8 10, i8 11, i8 12, i8 13, i8 14, i8 15>, <16 x i8>* %117, align 1, !noalias !36
  %118 = getelementptr inbounds i8, i8* %113, i64 16
  %119 = bitcast i8* %118 to <16 x i8>*
  store <16 x i8> <i8 16, i8 17, i8 18, i8 19, i8 20, i8 21, i8 22, i8 23, i8 24, i8 25, i8 26, i8 27, i8 28, i8 29, i8 30, i8 31>, <16 x i8>* %119, align 1, !noalias !36
  %120 = getelementptr inbounds i8, i8* %113, i64 32
  %121 = bitcast i8* %120 to <16 x i8>*
  store <16 x i8> <i8 32, i8 33, i8 34, i8 35, i8 36, i8 37, i8 38, i8 39, i8 40, i8 41, i8 42, i8 43, i8 44, i8 45, i8 46, i8 47>, <16 x i8>* %121, align 1, !noalias !36
  %122 = getelementptr inbounds i8, i8* %113, i64 48
  %123 = bitcast i8* %122 to <16 x i8>*
  store <16 x i8> <i8 48, i8 49, i8 50, i8 51, i8 52, i8 53, i8 54, i8 55, i8 56, i8 57, i8 58, i8 59, i8 60, i8 61, i8 62, i8 63>, <16 x i8>* %123, align 1, !noalias !36
  %124 = getelementptr inbounds i8, i8* %113, i64 64
  %125 = bitcast i8* %124 to <16 x i8>*
  store <16 x i8> <i8 64, i8 65, i8 66, i8 67, i8 68, i8 69, i8 70, i8 71, i8 72, i8 73, i8 74, i8 75, i8 76, i8 77, i8 78, i8 79>, <16 x i8>* %125, align 1, !noalias !36
  %126 = getelementptr inbounds i8, i8* %113, i64 80
  %127 = bitcast i8* %126 to <16 x i8>*
  store <16 x i8> <i8 80, i8 81, i8 82, i8 83, i8 84, i8 85, i8 86, i8 87, i8 88, i8 89, i8 90, i8 91, i8 92, i8 93, i8 94, i8 95>, <16 x i8>* %127, align 1, !noalias !36
  %128 = getelementptr inbounds i8, i8* %113, i64 96
  %129 = bitcast i8* %128 to <16 x i8>*
  store <16 x i8> <i8 96, i8 97, i8 98, i8 99, i8 100, i8 101, i8 102, i8 103, i8 104, i8 105, i8 106, i8 107, i8 108, i8 109, i8 110, i8 111>, <16 x i8>* %129, align 1, !noalias !36
  %130 = getelementptr inbounds i8, i8* %113, i64 112
  %131 = bitcast i8* %130 to <16 x i8>*
  store <16 x i8> <i8 112, i8 113, i8 114, i8 115, i8 116, i8 117, i8 118, i8 119, i8 120, i8 121, i8 122, i8 123, i8 124, i8 125, i8 126, i8 127>, <16 x i8>* %131, align 1, !noalias !36
  %132 = getelementptr inbounds i8, i8* %113, i64 128
  %133 = bitcast i8* %132 to <16 x i8>*
  store <16 x i8> <i8 -128, i8 -127, i8 -126, i8 -125, i8 -124, i8 -123, i8 -122, i8 -121, i8 -120, i8 -119, i8 -118, i8 -117, i8 -116, i8 -115, i8 -114, i8 -113>, <16 x i8>* %133, align 1, !noalias !36
  %134 = getelementptr inbounds i8, i8* %113, i64 144
  %135 = bitcast i8* %134 to <16 x i8>*
  store <16 x i8> <i8 -112, i8 -111, i8 -110, i8 -109, i8 -108, i8 -107, i8 -106, i8 -105, i8 -104, i8 -103, i8 -102, i8 -101, i8 -100, i8 -99, i8 -98, i8 -97>, <16 x i8>* %135, align 1, !noalias !36
  %136 = getelementptr inbounds i8, i8* %113, i64 160
  %137 = bitcast i8* %136 to <16 x i8>*
  store <16 x i8> <i8 -96, i8 -95, i8 -94, i8 -93, i8 -92, i8 -91, i8 -90, i8 -89, i8 -88, i8 -87, i8 -86, i8 -85, i8 -84, i8 -83, i8 -82, i8 -81>, <16 x i8>* %137, align 1, !noalias !36
  %138 = getelementptr inbounds i8, i8* %113, i64 176
  %139 = bitcast i8* %138 to <16 x i8>*
  store <16 x i8> <i8 -80, i8 -79, i8 -78, i8 -77, i8 -76, i8 -75, i8 -74, i8 -73, i8 -72, i8 -71, i8 -70, i8 -69, i8 -68, i8 -67, i8 -66, i8 -65>, <16 x i8>* %139, align 1, !noalias !36
  %140 = getelementptr inbounds i8, i8* %113, i64 192
  %141 = bitcast i8* %140 to <16 x i8>*
  store <16 x i8> <i8 -64, i8 -63, i8 -62, i8 -61, i8 -60, i8 -59, i8 -58, i8 -57, i8 -56, i8 -55, i8 -54, i8 -53, i8 -52, i8 -51, i8 -50, i8 -49>, <16 x i8>* %141, align 1, !noalias !36
  %142 = getelementptr inbounds i8, i8* %113, i64 208
  %143 = bitcast i8* %142 to <16 x i8>*
  store <16 x i8> <i8 -48, i8 -47, i8 -46, i8 -45, i8 -44, i8 -43, i8 -42, i8 -41, i8 -40, i8 -39, i8 -38, i8 -37, i8 -36, i8 -35, i8 -34, i8 -33>, <16 x i8>* %143, align 1, !noalias !36
  %144 = getelementptr inbounds i8, i8* %113, i64 224
  %145 = bitcast i8* %144 to <16 x i8>*
  store <16 x i8> <i8 -32, i8 -31, i8 -30, i8 -29, i8 -28, i8 -27, i8 -26, i8 -25, i8 -24, i8 -23, i8 -22, i8 -21, i8 -20, i8 -19, i8 -18, i8 -17>, <16 x i8>* %145, align 1, !noalias !36
  %146 = getelementptr inbounds i8, i8* %113, i64 240
  %147 = bitcast i8* %146 to <16 x i8>*
  store <16 x i8> <i8 -16, i8 -15, i8 -14, i8 -13, i8 -12, i8 -11, i8 -10, i8 -9, i8 -8, i8 -7, i8 -6, i8 -5, i8 -4, i8 -3, i8 -2, i8 -1>, <16 x i8>* %147, align 1, !noalias !36
  br label %173

148:                                              ; preds = %100
  %149 = sitofp i32 %112 to double
  %150 = fmul double %149, 1.000000e-05
  br label %151

151:                                              ; preds = %167, %148
  %152 = phi i64 [ 0, %148 ], [ %170, %167 ]
  %153 = phi i32 [ 0, %148 ], [ %171, %167 ]
  %154 = trunc i64 %152 to i32
  %155 = add i32 %154, -1
  %156 = icmp ult i32 %155, 254
  br i1 %156, label %157, label %165

157:                                              ; preds = %151
  %158 = sitofp i32 %154 to double
  %159 = fdiv double %158, 2.550000e+02
  %160 = tail call double @pow(double %159, double %150) #21
  %161 = fmul double %160, 2.550000e+02
  %162 = fadd double %161, 5.000000e-01
  %163 = tail call double @llvm.floor.f64(double %162) #21
  %164 = fptoui double %163 to i8
  br label %167

165:                                              ; preds = %151
  %166 = trunc i32 %153 to i8
  br label %167

167:                                              ; preds = %165, %157
  %168 = phi i8 [ %164, %157 ], [ %166, %165 ]
  %169 = getelementptr inbounds i8, i8* %113, i64 %152
  store i8 %168, i8* %169, align 1, !noalias !36
  %170 = add nuw nsw i64 %152, 1
  %171 = add nuw nsw i32 %153, 1
  %172 = icmp eq i64 %170, 256
  br i1 %172, label %173, label %151

173:                                              ; preds = %167, %116
  %174 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 82
  %175 = load i32, i32* %14, align 4
  %176 = icmp sgt i32 %175, 0
  br i1 %176, label %177, label %187

177:                                              ; preds = %173
  %178 = sitofp i32 %175 to double
  %179 = fdiv double 1.000000e+10, %178
  %180 = fadd double %179, 5.000000e-01
  %181 = tail call double @llvm.floor.f64(double %180) #21
  %182 = fcmp ole double %181, 0x41DFFFFFFFC00000
  %183 = fcmp oge double %181, 0xC1E0000000000000
  %184 = and i1 %182, %183
  %185 = fptosi double %181 to i32
  %186 = select i1 %184, i32 %185, i32 0
  br label %189

187:                                              ; preds = %173
  %188 = load i32, i32* %102, align 8
  br label %189

189:                                              ; preds = %187, %177
  %190 = phi i32 [ %186, %177 ], [ %188, %187 ]
  %191 = tail call noalias i8* @cr_png_malloc(%struct.png_struct_def* %0, i64 256) #21
  store i8* %191, i8** %174, align 8, !noalias !39
  %192 = add i32 %190, -95000
  %193 = icmp ult i32 %192, 10001
  br i1 %193, label %194, label %226

194:                                              ; preds = %189
  %195 = bitcast i8* %191 to <16 x i8>*
  store <16 x i8> <i8 0, i8 1, i8 2, i8 3, i8 4, i8 5, i8 6, i8 7, i8 8, i8 9, i8 10, i8 11, i8 12, i8 13, i8 14, i8 15>, <16 x i8>* %195, align 1, !noalias !39
  %196 = getelementptr inbounds i8, i8* %191, i64 16
  %197 = bitcast i8* %196 to <16 x i8>*
  store <16 x i8> <i8 16, i8 17, i8 18, i8 19, i8 20, i8 21, i8 22, i8 23, i8 24, i8 25, i8 26, i8 27, i8 28, i8 29, i8 30, i8 31>, <16 x i8>* %197, align 1, !noalias !39
  %198 = getelementptr inbounds i8, i8* %191, i64 32
  %199 = bitcast i8* %198 to <16 x i8>*
  store <16 x i8> <i8 32, i8 33, i8 34, i8 35, i8 36, i8 37, i8 38, i8 39, i8 40, i8 41, i8 42, i8 43, i8 44, i8 45, i8 46, i8 47>, <16 x i8>* %199, align 1, !noalias !39
  %200 = getelementptr inbounds i8, i8* %191, i64 48
  %201 = bitcast i8* %200 to <16 x i8>*
  store <16 x i8> <i8 48, i8 49, i8 50, i8 51, i8 52, i8 53, i8 54, i8 55, i8 56, i8 57, i8 58, i8 59, i8 60, i8 61, i8 62, i8 63>, <16 x i8>* %201, align 1, !noalias !39
  %202 = getelementptr inbounds i8, i8* %191, i64 64
  %203 = bitcast i8* %202 to <16 x i8>*
  store <16 x i8> <i8 64, i8 65, i8 66, i8 67, i8 68, i8 69, i8 70, i8 71, i8 72, i8 73, i8 74, i8 75, i8 76, i8 77, i8 78, i8 79>, <16 x i8>* %203, align 1, !noalias !39
  %204 = getelementptr inbounds i8, i8* %191, i64 80
  %205 = bitcast i8* %204 to <16 x i8>*
  store <16 x i8> <i8 80, i8 81, i8 82, i8 83, i8 84, i8 85, i8 86, i8 87, i8 88, i8 89, i8 90, i8 91, i8 92, i8 93, i8 94, i8 95>, <16 x i8>* %205, align 1, !noalias !39
  %206 = getelementptr inbounds i8, i8* %191, i64 96
  %207 = bitcast i8* %206 to <16 x i8>*
  store <16 x i8> <i8 96, i8 97, i8 98, i8 99, i8 100, i8 101, i8 102, i8 103, i8 104, i8 105, i8 106, i8 107, i8 108, i8 109, i8 110, i8 111>, <16 x i8>* %207, align 1, !noalias !39
  %208 = getelementptr inbounds i8, i8* %191, i64 112
  %209 = bitcast i8* %208 to <16 x i8>*
  store <16 x i8> <i8 112, i8 113, i8 114, i8 115, i8 116, i8 117, i8 118, i8 119, i8 120, i8 121, i8 122, i8 123, i8 124, i8 125, i8 126, i8 127>, <16 x i8>* %209, align 1, !noalias !39
  %210 = getelementptr inbounds i8, i8* %191, i64 128
  %211 = bitcast i8* %210 to <16 x i8>*
  store <16 x i8> <i8 -128, i8 -127, i8 -126, i8 -125, i8 -124, i8 -123, i8 -122, i8 -121, i8 -120, i8 -119, i8 -118, i8 -117, i8 -116, i8 -115, i8 -114, i8 -113>, <16 x i8>* %211, align 1, !noalias !39
  %212 = getelementptr inbounds i8, i8* %191, i64 144
  %213 = bitcast i8* %212 to <16 x i8>*
  store <16 x i8> <i8 -112, i8 -111, i8 -110, i8 -109, i8 -108, i8 -107, i8 -106, i8 -105, i8 -104, i8 -103, i8 -102, i8 -101, i8 -100, i8 -99, i8 -98, i8 -97>, <16 x i8>* %213, align 1, !noalias !39
  %214 = getelementptr inbounds i8, i8* %191, i64 160
  %215 = bitcast i8* %214 to <16 x i8>*
  store <16 x i8> <i8 -96, i8 -95, i8 -94, i8 -93, i8 -92, i8 -91, i8 -90, i8 -89, i8 -88, i8 -87, i8 -86, i8 -85, i8 -84, i8 -83, i8 -82, i8 -81>, <16 x i8>* %215, align 1, !noalias !39
  %216 = getelementptr inbounds i8, i8* %191, i64 176
  %217 = bitcast i8* %216 to <16 x i8>*
  store <16 x i8> <i8 -80, i8 -79, i8 -78, i8 -77, i8 -76, i8 -75, i8 -74, i8 -73, i8 -72, i8 -71, i8 -70, i8 -69, i8 -68, i8 -67, i8 -66, i8 -65>, <16 x i8>* %217, align 1, !noalias !39
  %218 = getelementptr inbounds i8, i8* %191, i64 192
  %219 = bitcast i8* %218 to <16 x i8>*
  store <16 x i8> <i8 -64, i8 -63, i8 -62, i8 -61, i8 -60, i8 -59, i8 -58, i8 -57, i8 -56, i8 -55, i8 -54, i8 -53, i8 -52, i8 -51, i8 -50, i8 -49>, <16 x i8>* %219, align 1, !noalias !39
  %220 = getelementptr inbounds i8, i8* %191, i64 208
  %221 = bitcast i8* %220 to <16 x i8>*
  store <16 x i8> <i8 -48, i8 -47, i8 -46, i8 -45, i8 -44, i8 -43, i8 -42, i8 -41, i8 -40, i8 -39, i8 -38, i8 -37, i8 -36, i8 -35, i8 -34, i8 -33>, <16 x i8>* %221, align 1, !noalias !39
  %222 = getelementptr inbounds i8, i8* %191, i64 224
  %223 = bitcast i8* %222 to <16 x i8>*
  store <16 x i8> <i8 -32, i8 -31, i8 -30, i8 -29, i8 -28, i8 -27, i8 -26, i8 -25, i8 -24, i8 -23, i8 -22, i8 -21, i8 -20, i8 -19, i8 -18, i8 -17>, <16 x i8>* %223, align 1, !noalias !39
  %224 = getelementptr inbounds i8, i8* %191, i64 240
  %225 = bitcast i8* %224 to <16 x i8>*
  store <16 x i8> <i8 -16, i8 -15, i8 -14, i8 -13, i8 -12, i8 -11, i8 -10, i8 -9, i8 -8, i8 -7, i8 -6, i8 -5, i8 -4, i8 -3, i8 -2, i8 -1>, <16 x i8>* %225, align 1, !noalias !39
  br label %483

226:                                              ; preds = %189
  %227 = sitofp i32 %190 to double
  %228 = fmul double %227, 1.000000e-05
  br label %229

229:                                              ; preds = %245, %226
  %230 = phi i64 [ 0, %226 ], [ %248, %245 ]
  %231 = phi i32 [ 0, %226 ], [ %249, %245 ]
  %232 = trunc i64 %230 to i32
  %233 = add i32 %232, -1
  %234 = icmp ult i32 %233, 254
  br i1 %234, label %235, label %243

235:                                              ; preds = %229
  %236 = sitofp i32 %232 to double
  %237 = fdiv double %236, 2.550000e+02
  %238 = tail call double @pow(double %237, double %228) #21
  %239 = fmul double %238, 2.550000e+02
  %240 = fadd double %239, 5.000000e-01
  %241 = tail call double @llvm.floor.f64(double %240) #21
  %242 = fptoui double %241 to i8
  br label %245

243:                                              ; preds = %229
  %244 = trunc i32 %231 to i8
  br label %245

245:                                              ; preds = %243, %235
  %246 = phi i8 [ %242, %235 ], [ %244, %243 ]
  %247 = getelementptr inbounds i8, i8* %191, i64 %230
  store i8 %246, i8* %247, align 1, !noalias !39
  %248 = add nuw nsw i64 %230, 1
  %249 = add nuw nsw i32 %231, 1
  %250 = icmp eq i64 %248, 256
  br i1 %250, label %483, label %229

251:                                              ; preds = %11
  %252 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 60
  %253 = load i8, i8* %252, align 1
  %254 = and i8 %253, 2
  %255 = icmp eq i8 %254, 0
  br i1 %255, label %267, label %256

256:                                              ; preds = %251
  %257 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 86, i32 0
  %258 = load i8, i8* %257, align 8
  %259 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 86, i32 1
  %260 = load i8, i8* %259, align 1
  %261 = icmp ugt i8 %260, %258
  %262 = select i1 %261, i8 %260, i8 %258
  %263 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 86, i32 2
  %264 = load i8, i8* %263, align 2
  %265 = icmp ugt i8 %264, %262
  %266 = select i1 %265, i8 %264, i8 %262
  br label %270

267:                                              ; preds = %251
  %268 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 86, i32 3
  %269 = load i8, i8* %268, align 1
  br label %270

270:                                              ; preds = %256, %267
  %271 = phi i8 [ %269, %267 ], [ %266, %256 ]
  %272 = add i8 %271, -1
  %273 = icmp ult i8 %272, 15
  %274 = sub i8 16, %271
  %275 = select i1 %273, i8 %274, i8 0
  %276 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 17
  %277 = load i32, i32* %276, align 4
  %278 = and i32 %277, 67109888
  %279 = icmp ne i32 %278, 0
  %280 = icmp ult i8 %275, 5
  %281 = and i1 %279, %280
  %282 = select i1 %281, i8 5, i8 %275
  %283 = icmp ult i8 %282, 8
  %284 = select i1 %283, i8 %282, i8 8
  %285 = zext i8 %284 to i32
  %286 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 78
  store i32 %285, i32* %286, align 8
  %287 = icmp eq i32 %278, 0
  %288 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 81
  %289 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 79
  %290 = load i32, i32* %289, align 4
  %291 = icmp sgt i32 %290, 0
  br i1 %287, label %430, label %292

292:                                              ; preds = %270
  br i1 %291, label %293, label %309

293:                                              ; preds = %292
  %294 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 134, i32 0
  %295 = load i32, i32* %294, align 8
  %296 = sitofp i32 %295 to double
  %297 = fmul double %296, 1.000000e-05
  %298 = sitofp i32 %290 to double
  %299 = fmul double %297, %298
  %300 = fadd double %299, 5.000000e-01
  %301 = tail call double @llvm.floor.f64(double %300) #21
  %302 = fcmp ole double %301, 0x41DFFFFFFFC00000
  %303 = fcmp oge double %301, 0xC1E0000000000000
  %304 = and i1 %302, %303
  %305 = fptosi double %301 to i32
  %306 = sitofp i32 %305 to double
  %307 = fmul double %306, 1.000000e-05
  %308 = select i1 %304, double %307, double 0.000000e+00
  br label %309

309:                                              ; preds = %292, %293
  %310 = phi double [ %308, %293 ], [ 1.000000e+00, %292 ]
  %311 = sub nsw i32 8, %285
  %312 = shl i32 1, %311
  %313 = sub nuw nsw i32 16, %285
  %314 = zext i32 %312 to i64
  %315 = shl nuw nsw i64 %314, 3
  %316 = tail call noalias i8* @cr_png_calloc(%struct.png_struct_def* %0, i64 %315) #21
  %317 = bitcast i8* %316 to i16**
  %318 = bitcast i16*** %288 to i8**
  store i8* %316, i8** %318, align 8, !noalias !42
  br label %323

319:                                              ; preds = %323
  %320 = shl nsw i32 -1, %313
  %321 = xor i32 %320, -1
  %322 = lshr i32 255, %285
  br label %355

323:                                              ; preds = %323, %309
  %324 = phi i64 [ 0, %309 ], [ %328, %323 ]
  %325 = tail call noalias i8* @cr_png_malloc(%struct.png_struct_def* %0, i64 512) #21
  %326 = getelementptr inbounds i16*, i16** %317, i64 %324
  %327 = bitcast i16** %326 to i8**
  store i8* %325, i8** %327, align 8, !noalias !42
  %328 = add nuw nsw i64 %324, 1
  %329 = icmp ult i64 %328, %314
  br i1 %329, label %323, label %319

330:                                              ; preds = %391
  %331 = shl i32 %312, 8
  %332 = icmp ugt i32 %331, %392
  br i1 %332, label %333, label %449

333:                                              ; preds = %330
  %334 = sub i32 0, %392
  %335 = xor i32 %392, -1
  %336 = add i32 %331, %335
  %337 = and i32 %334, 3
  %338 = icmp eq i32 %337, 0
  br i1 %338, label %352, label %339

339:                                              ; preds = %333, %339
  %340 = phi i32 [ %349, %339 ], [ %392, %333 ]
  %341 = phi i32 [ %350, %339 ], [ %337, %333 ]
  %342 = and i32 %340, %322
  %343 = zext i32 %342 to i64
  %344 = getelementptr inbounds i16*, i16** %317, i64 %343
  %345 = load i16*, i16** %344, align 8, !noalias !42
  %346 = lshr i32 %340, %311
  %347 = zext i32 %346 to i64
  %348 = getelementptr inbounds i16, i16* %345, i64 %347
  store i16 -1, i16* %348, align 2
  %349 = add nuw i32 %340, 1
  %350 = add i32 %341, -1
  %351 = icmp eq i32 %350, 0
  br i1 %351, label %352, label %339, !llvm.loop !45

352:                                              ; preds = %339, %333
  %353 = phi i32 [ %392, %333 ], [ %349, %339 ]
  %354 = icmp ult i32 %336, 3
  br i1 %354, label %449, label %395

355:                                              ; preds = %391, %319
  %356 = phi i32 [ 0, %319 ], [ %392, %391 ]
  %357 = phi i32 [ 0, %319 ], [ %393, %391 ]
  %358 = trunc i32 %357 to i16
  %359 = mul i16 %358, 257
  %360 = zext i16 %359 to i32
  %361 = add nuw nsw i32 %360, 128
  %362 = icmp ult i16 %359, -129
  br i1 %362, label %363, label %371

363:                                              ; preds = %355
  %364 = sitofp i32 %361 to double
  %365 = fdiv double %364, 6.553500e+04
  %366 = tail call double @pow(double %365, double %310) #21
  %367 = fmul double %366, 6.553500e+04
  %368 = fadd double %367, 5.000000e-01
  %369 = tail call double @llvm.floor.f64(double %368) #21
  %370 = fptoui double %369 to i16
  br label %373

371:                                              ; preds = %355
  %372 = trunc i32 %361 to i16
  br label %373

373:                                              ; preds = %371, %363
  %374 = phi i16 [ %370, %363 ], [ %372, %371 ]
  %375 = zext i16 %374 to i32
  %376 = mul i32 %375, %321
  %377 = add i32 %376, 32768
  %378 = udiv i32 %377, 65535
  %379 = icmp ugt i32 %356, %378
  br i1 %379, label %391, label %380

380:                                              ; preds = %373, %380
  %381 = phi i32 [ %389, %380 ], [ %356, %373 ]
  %382 = and i32 %381, %322
  %383 = zext i32 %382 to i64
  %384 = getelementptr inbounds i16*, i16** %317, i64 %383
  %385 = load i16*, i16** %384, align 8, !noalias !42
  %386 = lshr i32 %381, %311
  %387 = zext i32 %386 to i64
  %388 = getelementptr inbounds i16, i16* %385, i64 %387
  store i16 %359, i16* %388, align 2
  %389 = add nuw nsw i32 %381, 1
  %390 = icmp ult i32 %381, %378
  br i1 %390, label %380, label %391

391:                                              ; preds = %380, %373
  %392 = phi i32 [ %356, %373 ], [ %389, %380 ]
  %393 = add nuw nsw i32 %357, 1
  %394 = icmp eq i32 %393, 255
  br i1 %394, label %330, label %355

395:                                              ; preds = %352, %395
  %396 = phi i32 [ %428, %395 ], [ %353, %352 ]
  %397 = and i32 %396, %322
  %398 = zext i32 %397 to i64
  %399 = getelementptr inbounds i16*, i16** %317, i64 %398
  %400 = load i16*, i16** %399, align 8, !noalias !42
  %401 = lshr i32 %396, %311
  %402 = zext i32 %401 to i64
  %403 = getelementptr inbounds i16, i16* %400, i64 %402
  store i16 -1, i16* %403, align 2
  %404 = add nuw i32 %396, 1
  %405 = and i32 %404, %322
  %406 = zext i32 %405 to i64
  %407 = getelementptr inbounds i16*, i16** %317, i64 %406
  %408 = load i16*, i16** %407, align 8, !noalias !42
  %409 = lshr i32 %404, %311
  %410 = zext i32 %409 to i64
  %411 = getelementptr inbounds i16, i16* %408, i64 %410
  store i16 -1, i16* %411, align 2
  %412 = add nuw i32 %396, 2
  %413 = and i32 %412, %322
  %414 = zext i32 %413 to i64
  %415 = getelementptr inbounds i16*, i16** %317, i64 %414
  %416 = load i16*, i16** %415, align 8, !noalias !42
  %417 = lshr i32 %412, %311
  %418 = zext i32 %417 to i64
  %419 = getelementptr inbounds i16, i16* %416, i64 %418
  store i16 -1, i16* %419, align 2
  %420 = add nuw i32 %396, 3
  %421 = and i32 %420, %322
  %422 = zext i32 %421 to i64
  %423 = getelementptr inbounds i16*, i16** %317, i64 %422
  %424 = load i16*, i16** %423, align 8, !noalias !42
  %425 = lshr i32 %420, %311
  %426 = zext i32 %425 to i64
  %427 = getelementptr inbounds i16, i16* %424, i64 %426
  store i16 -1, i16* %427, align 2
  %428 = add nuw i32 %396, 4
  %429 = icmp eq i32 %428, %331
  br i1 %429, label %449, label %395

430:                                              ; preds = %270
  br i1 %291, label %431, label %447

431:                                              ; preds = %430
  %432 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 134, i32 0
  %433 = load i32, i32* %432, align 8
  %434 = icmp eq i32 %433, 0
  br i1 %434, label %446, label %435

435:                                              ; preds = %431
  %436 = sitofp i32 %433 to double
  %437 = fdiv double 1.000000e+15, %436
  %438 = sitofp i32 %290 to double
  %439 = fdiv double %437, %438
  %440 = fadd double %439, 5.000000e-01
  %441 = tail call double @llvm.floor.f64(double %440) #21
  %442 = fcmp ugt double %441, 0x41DFFFFFFFC00000
  %443 = fcmp ult double %441, 0xC1E0000000000000
  %444 = fptosi double %441 to i32
  %445 = or i1 %443, %442
  br i1 %445, label %446, label %447

446:                                              ; preds = %431, %435
  br label %447

447:                                              ; preds = %446, %435, %430
  %448 = phi i32 [ 100000, %430 ], [ 0, %446 ], [ %444, %435 ]
  tail call fastcc void @png_build_16bit_table(%struct.png_struct_def* %0, i16*** %288, i32 %285, i32 %448)
  br label %449

449:                                              ; preds = %352, %395, %330, %447
  %450 = load i32, i32* %276, align 4
  %451 = and i32 %450, 6291584
  %452 = icmp eq i32 %451, 0
  br i1 %452, label %483, label %453

453:                                              ; preds = %449
  %454 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 85
  %455 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 134, i32 0
  %456 = load i32, i32* %455, align 8
  %457 = sitofp i32 %456 to double
  %458 = fdiv double 1.000000e+10, %457
  %459 = fadd double %458, 5.000000e-01
  %460 = tail call double @llvm.floor.f64(double %459) #21
  %461 = fcmp ole double %460, 0x41DFFFFFFFC00000
  %462 = fcmp oge double %460, 0xC1E0000000000000
  %463 = and i1 %461, %462
  %464 = fptosi double %460 to i32
  %465 = select i1 %463, i32 %464, i32 0
  tail call fastcc void @png_build_16bit_table(%struct.png_struct_def* %0, i16*** %454, i32 %285, i32 %465)
  %466 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 84
  %467 = load i32, i32* %289, align 4
  %468 = icmp sgt i32 %467, 0
  br i1 %468, label %469, label %479

469:                                              ; preds = %453
  %470 = sitofp i32 %467 to double
  %471 = fdiv double 1.000000e+10, %470
  %472 = fadd double %471, 5.000000e-01
  %473 = tail call double @llvm.floor.f64(double %472) #21
  %474 = fcmp ole double %473, 0x41DFFFFFFFC00000
  %475 = fcmp oge double %473, 0xC1E0000000000000
  %476 = and i1 %474, %475
  %477 = fptosi double %473 to i32
  %478 = select i1 %476, i32 %477, i32 0
  br label %481

479:                                              ; preds = %453
  %480 = load i32, i32* %455, align 8
  br label %481

481:                                              ; preds = %479, %469
  %482 = phi i32 [ %478, %469 ], [ %480, %479 ]
  tail call fastcc void @png_build_16bit_table(%struct.png_struct_def* %0, i16*** %466, i32 %285, i32 %482)
  br label %483

483:                                              ; preds = %245, %194, %481, %449, %95
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal fastcc void @png_build_16bit_table(%struct.png_struct_def* noalias, i16*** nocapture, i32, i32) unnamed_addr #0 {
  %5 = sub i32 8, %2
  %6 = shl i32 1, %5
  %7 = sub i32 16, %2
  %8 = shl nsw i32 -1, %7
  %9 = xor i32 %8, -1
  %10 = sitofp i32 %9 to double
  %11 = fdiv double 1.000000e+00, %10
  %12 = sub i32 15, %2
  %13 = shl i32 1, %12
  %14 = zext i32 %6 to i64
  %15 = shl nuw nsw i64 %14, 3
  %16 = tail call noalias i8* @cr_png_calloc(%struct.png_struct_def* %0, i64 %15) #21
  %17 = bitcast i8* %16 to i16**
  %18 = bitcast i16*** %1 to i8**
  store i8* %16, i8** %18, align 8
  %19 = add i32 %3, -95000
  %20 = icmp ult i32 %19, 10001
  %21 = sitofp i32 %3 to double
  %22 = fmul double %21, 1.000000e-05
  %23 = icmp eq i32 %2, 0
  br label %24

24:                                               ; preds = %4, %75
  %25 = phi i64 [ 0, %4 ], [ %76, %75 ]
  %26 = tail call noalias i8* @cr_png_malloc(%struct.png_struct_def* %0, i64 512) #21
  %27 = bitcast i8* %26 to i16*
  %28 = getelementptr inbounds i16*, i16** %17, i64 %25
  %29 = bitcast i16** %28 to i8**
  store i8* %26, i8** %29, align 8
  %30 = trunc i64 %25 to i32
  br i1 %20, label %58, label %31

31:                                               ; preds = %24, %31
  %32 = phi i64 [ %56, %31 ], [ 0, %24 ]
  %33 = trunc i64 %32 to i32
  %34 = shl i32 %33, %5
  %35 = add i32 %34, %30
  %36 = uitofp i32 %35 to double
  %37 = fmul double %11, %36
  %38 = tail call double @pow(double %37, double %22) #21
  %39 = fmul double %38, 6.553500e+04
  %40 = fadd double %39, 5.000000e-01
  %41 = tail call double @llvm.floor.f64(double %40)
  %42 = fptoui double %41 to i16
  %43 = getelementptr inbounds i16, i16* %27, i64 %32
  store i16 %42, i16* %43, align 2
  %44 = or i64 %32, 1
  %45 = trunc i64 %44 to i32
  %46 = shl i32 %45, %5
  %47 = add i32 %46, %30
  %48 = uitofp i32 %47 to double
  %49 = fmul double %11, %48
  %50 = tail call double @pow(double %49, double %22) #21
  %51 = fmul double %50, 6.553500e+04
  %52 = fadd double %51, 5.000000e-01
  %53 = tail call double @llvm.floor.f64(double %52)
  %54 = fptoui double %53 to i16
  %55 = getelementptr inbounds i16, i16* %27, i64 %44
  store i16 %54, i16* %55, align 2
  %56 = add nuw nsw i64 %32, 2
  %57 = icmp eq i64 %56, 256
  br i1 %57, label %75, label %31

58:                                               ; preds = %24, %83
  %59 = phi i64 [ %87, %83 ], [ 0, %24 ]
  %60 = trunc i64 %59 to i32
  %61 = shl i32 %60, %5
  %62 = add i32 %61, %30
  br i1 %23, label %67, label %63

63:                                               ; preds = %58
  %64 = mul i32 %62, 65535
  %65 = add i32 %64, %13
  %66 = udiv i32 %65, %9
  br label %67

67:                                               ; preds = %58, %63
  %68 = phi i32 [ %66, %63 ], [ %62, %58 ]
  %69 = trunc i32 %68 to i16
  %70 = getelementptr inbounds i16, i16* %27, i64 %59
  store i16 %69, i16* %70, align 2
  %71 = or i64 %59, 1
  %72 = trunc i64 %71 to i32
  %73 = shl i32 %72, %5
  %74 = add i32 %73, %30
  br i1 %23, label %83, label %79

75:                                               ; preds = %31, %83
  %76 = add nuw nsw i64 %25, 1
  %77 = icmp ult i64 %76, %14
  br i1 %77, label %24, label %78

78:                                               ; preds = %75
  ret void

79:                                               ; preds = %67
  %80 = mul i32 %74, 65535
  %81 = add i32 %80, %13
  %82 = udiv i32 %81, %9
  br label %83

83:                                               ; preds = %79, %67
  %84 = phi i32 [ %82, %79 ], [ %74, %67 ]
  %85 = trunc i32 %84 to i16
  %86 = getelementptr inbounds i16, i16* %27, i64 %71
  store i16 %85, i16* %86, align 2
  %87 = add nuw nsw i64 %59, 2
  %88 = icmp eq i64 %87, 256
  br i1 %88, label %75, label %58
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden i32 @cr_png_set_option(%struct.png_struct_def* noalias, i32, i32) local_unnamed_addr #12 {
  %4 = icmp ne %struct.png_struct_def* %0, null
  %5 = icmp ult i32 %1, 12
  %6 = and i1 %4, %5
  %7 = and i32 %1, 1
  %8 = icmp eq i32 %7, 0
  %9 = and i1 %6, %8
  br i1 %9, label %10, label %22

10:                                               ; preds = %3
  %11 = shl i32 3, %1
  %12 = icmp eq i32 %2, 0
  %13 = select i1 %12, i32 2, i32 3
  %14 = shl i32 %13, %1
  %15 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 107
  %16 = load i32, i32* %15, align 8
  %17 = xor i32 %11, -1
  %18 = and i32 %16, %17
  %19 = or i32 %18, %14
  store i32 %19, i32* %15, align 8
  %20 = and i32 %16, %11
  %21 = ashr i32 %20, %1
  br label %22

22:                                               ; preds = %3, %10
  %23 = phi i32 [ %21, %10 ], [ 1, %3 ]
  ret i32 %23
}

; Function Attrs: nounwind ssp uwtable
define hidden void @cr_png_image_free(%struct.png_image*) local_unnamed_addr #0 {
  %2 = alloca %struct.png_control, align 8
  %3 = icmp eq %struct.png_image* %0, null
  br i1 %3, label %42, label %4

4:                                                ; preds = %1
  %5 = getelementptr inbounds %struct.png_image, %struct.png_image* %0, i64 0, i32 0
  %6 = load %struct.png_control*, %struct.png_control** %5, align 8
  %7 = icmp eq %struct.png_control* %6, null
  br i1 %7, label %42, label %8

8:                                                ; preds = %4
  %9 = getelementptr inbounds %struct.png_control, %struct.png_control* %6, i64 0, i32 2
  %10 = load i8*, i8** %9, align 8
  %11 = icmp eq i8* %10, null
  br i1 %11, label %12, label %42

12:                                               ; preds = %8
  %13 = bitcast %struct.png_control* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 48, i8* nonnull %13) #21
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %13, i8 -86, i64 48, i1 false) #21
  %14 = getelementptr inbounds %struct.png_control, %struct.png_control* %6, i64 0, i32 0
  %15 = load %struct.png_struct_def*, %struct.png_struct_def** %14, align 8
  %16 = icmp eq %struct.png_struct_def* %15, null
  br i1 %16, label %41, label %17

17:                                               ; preds = %12
  %18 = getelementptr inbounds %struct.png_control, %struct.png_control* %6, i64 0, i32 5
  %19 = load i8, i8* %18, align 8
  %20 = and i8 %19, 2
  %21 = icmp eq i8 %20, 0
  br i1 %21, label %30, label %22

22:                                               ; preds = %17
  %23 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %15, i64 0, i32 9
  %24 = bitcast i8** %23 to %struct._IO_FILE**
  %25 = load %struct._IO_FILE*, %struct._IO_FILE** %24, align 8
  %26 = and i8 %19, -3
  store i8 %26, i8* %18, align 8
  %27 = icmp eq %struct._IO_FILE* %25, null
  br i1 %27, label %30, label %28

28:                                               ; preds = %22
  store i8* null, i8** %23, align 8
  %29 = tail call i32 @fclose(%struct._IO_FILE* nonnull %25) #21
  br label %30

30:                                               ; preds = %28, %22, %17
  %31 = bitcast %struct.png_control* %6 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %13, i8* nonnull align 8 %31, i64 48, i1 false) #21
  store %struct.png_control* %2, %struct.png_control** %5, align 8
  %32 = getelementptr inbounds %struct.png_control, %struct.png_control* %2, i64 0, i32 0
  %33 = load %struct.png_struct_def*, %struct.png_struct_def** %32, align 8
  call void @cr_png_free(%struct.png_struct_def* %33, i8* nonnull %31) #21
  %34 = getelementptr inbounds %struct.png_control, %struct.png_control* %2, i64 0, i32 5
  %35 = load i8, i8* %34, align 8
  %36 = and i8 %35, 1
  %37 = icmp eq i8 %36, 0
  %38 = getelementptr inbounds %struct.png_control, %struct.png_control* %2, i64 0, i32 1
  br i1 %37, label %40, label %39

39:                                               ; preds = %30
  call void @cr_png_destroy_write_struct(%struct.png_struct_def** nonnull %32, %struct.png_info_def** %38) #21
  br label %41

40:                                               ; preds = %30
  call void @cr_png_destroy_read_struct(%struct.png_struct_def** nonnull %32, %struct.png_info_def** %38, %struct.png_info_def** null) #21
  br label %41

41:                                               ; preds = %12, %39, %40
  call void @llvm.lifetime.end.p0i8(i64 48, i8* nonnull %13) #21
  store %struct.png_control* null, %struct.png_control** %5, align 8
  br label %42

42:                                               ; preds = %4, %1, %41, %8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @cr_png_image_error(%struct.png_image*, i8*) local_unnamed_addr #0 {
  %3 = getelementptr inbounds %struct.png_image, %struct.png_image* %0, i64 0, i32 8, i64 0
  %4 = tail call i64 @cr_png_safecat(i8* %3, i64 64, i64 0, i8* %1) #21
  %5 = getelementptr inbounds %struct.png_image, %struct.png_image* %0, i64 0, i32 7
  %6 = load i32, i32* %5, align 8
  %7 = or i32 %6, 2
  store i32 %7, i32* %5, align 8
  tail call void @cr_png_image_free(%struct.png_image* %0)
  ret i32 0
}

; Function Attrs: nofree nounwind ssp uwtable
define internal fastcc i32 @png_xy_from_XYZ(%struct.png_xy* nocapture, %struct.png_XYZ* nocapture readonly) unnamed_addr #16 {
  %3 = getelementptr inbounds %struct.png_XYZ, %struct.png_XYZ* %1, i64 0, i32 0
  %4 = load i32, i32* %3, align 4
  %5 = getelementptr inbounds %struct.png_XYZ, %struct.png_XYZ* %1, i64 0, i32 1
  %6 = load i32, i32* %5, align 4
  %7 = add nsw i32 %6, %4
  %8 = getelementptr inbounds %struct.png_XYZ, %struct.png_XYZ* %1, i64 0, i32 2
  %9 = load i32, i32* %8, align 4
  %10 = add nsw i32 %7, %9
  %11 = getelementptr inbounds %struct.png_xy, %struct.png_xy* %0, i64 0, i32 0
  %12 = icmp eq i32 %10, 0
  br i1 %12, label %177, label %13

13:                                               ; preds = %2
  %14 = icmp eq i32 %4, 0
  br i1 %14, label %27, label %15

15:                                               ; preds = %13
  %16 = sitofp i32 %4 to double
  %17 = fmul double %16, 1.000000e+05
  %18 = sitofp i32 %10 to double
  %19 = fdiv double %17, %18
  %20 = fadd double %19, 5.000000e-01
  %21 = tail call double @llvm.floor.f64(double %20) #21
  %22 = fcmp ole double %21, 0x41DFFFFFFFC00000
  %23 = fcmp oge double %21, 0xC1E0000000000000
  %24 = and i1 %22, %23
  br i1 %24, label %25, label %177

25:                                               ; preds = %15
  %26 = fptosi double %21 to i32
  br label %27

27:                                               ; preds = %13, %25
  %28 = phi i32 [ %26, %25 ], [ 0, %13 ]
  store i32 %28, i32* %11, align 4
  %29 = getelementptr inbounds %struct.png_xy, %struct.png_xy* %0, i64 0, i32 1
  %30 = load i32, i32* %5, align 4
  %31 = icmp eq i32 %30, 0
  br i1 %31, label %44, label %32

32:                                               ; preds = %27
  %33 = sitofp i32 %30 to double
  %34 = fmul double %33, 1.000000e+05
  %35 = sitofp i32 %10 to double
  %36 = fdiv double %34, %35
  %37 = fadd double %36, 5.000000e-01
  %38 = tail call double @llvm.floor.f64(double %37) #21
  %39 = fcmp ole double %38, 0x41DFFFFFFFC00000
  %40 = fcmp oge double %38, 0xC1E0000000000000
  %41 = and i1 %39, %40
  br i1 %41, label %42, label %177

42:                                               ; preds = %32
  %43 = fptosi double %38 to i32
  br label %44

44:                                               ; preds = %27, %42
  %45 = phi i32 [ %43, %42 ], [ 0, %27 ]
  store i32 %45, i32* %29, align 4
  %46 = load i32, i32* %3, align 4
  %47 = load i32, i32* %5, align 4
  %48 = getelementptr inbounds %struct.png_XYZ, %struct.png_XYZ* %1, i64 0, i32 3
  %49 = load i32, i32* %48, align 4
  %50 = getelementptr inbounds %struct.png_XYZ, %struct.png_XYZ* %1, i64 0, i32 4
  %51 = load i32, i32* %50, align 4
  %52 = add nsw i32 %51, %49
  %53 = getelementptr inbounds %struct.png_XYZ, %struct.png_XYZ* %1, i64 0, i32 5
  %54 = load i32, i32* %53, align 4
  %55 = add nsw i32 %52, %54
  %56 = getelementptr inbounds %struct.png_xy, %struct.png_xy* %0, i64 0, i32 2
  %57 = icmp eq i32 %55, 0
  br i1 %57, label %177, label %58

58:                                               ; preds = %44
  %59 = icmp eq i32 %49, 0
  br i1 %59, label %72, label %60

60:                                               ; preds = %58
  %61 = sitofp i32 %49 to double
  %62 = fmul double %61, 1.000000e+05
  %63 = sitofp i32 %55 to double
  %64 = fdiv double %62, %63
  %65 = fadd double %64, 5.000000e-01
  %66 = tail call double @llvm.floor.f64(double %65) #21
  %67 = fcmp ole double %66, 0x41DFFFFFFFC00000
  %68 = fcmp oge double %66, 0xC1E0000000000000
  %69 = and i1 %67, %68
  br i1 %69, label %70, label %177

70:                                               ; preds = %60
  %71 = fptosi double %66 to i32
  br label %72

72:                                               ; preds = %58, %70
  %73 = phi i32 [ %71, %70 ], [ 0, %58 ]
  store i32 %73, i32* %56, align 4
  %74 = getelementptr inbounds %struct.png_xy, %struct.png_xy* %0, i64 0, i32 3
  %75 = load i32, i32* %50, align 4
  %76 = icmp eq i32 %75, 0
  br i1 %76, label %89, label %77

77:                                               ; preds = %72
  %78 = sitofp i32 %75 to double
  %79 = fmul double %78, 1.000000e+05
  %80 = sitofp i32 %55 to double
  %81 = fdiv double %79, %80
  %82 = fadd double %81, 5.000000e-01
  %83 = tail call double @llvm.floor.f64(double %82) #21
  %84 = fcmp ole double %83, 0x41DFFFFFFFC00000
  %85 = fcmp oge double %83, 0xC1E0000000000000
  %86 = and i1 %84, %85
  br i1 %86, label %87, label %177

87:                                               ; preds = %77
  %88 = fptosi double %83 to i32
  br label %89

89:                                               ; preds = %72, %87
  %90 = phi i32 [ %88, %87 ], [ 0, %72 ]
  store i32 %90, i32* %74, align 4
  %91 = add nsw i32 %55, %10
  %92 = load i32, i32* %48, align 4
  %93 = add nsw i32 %92, %46
  %94 = load i32, i32* %50, align 4
  %95 = add nsw i32 %94, %47
  %96 = getelementptr inbounds %struct.png_XYZ, %struct.png_XYZ* %1, i64 0, i32 6
  %97 = load i32, i32* %96, align 4
  %98 = getelementptr inbounds %struct.png_XYZ, %struct.png_XYZ* %1, i64 0, i32 7
  %99 = load i32, i32* %98, align 4
  %100 = add nsw i32 %99, %97
  %101 = getelementptr inbounds %struct.png_XYZ, %struct.png_XYZ* %1, i64 0, i32 8
  %102 = load i32, i32* %101, align 4
  %103 = add nsw i32 %100, %102
  %104 = getelementptr inbounds %struct.png_xy, %struct.png_xy* %0, i64 0, i32 4
  %105 = icmp eq i32 %103, 0
  br i1 %105, label %177, label %106

106:                                              ; preds = %89
  %107 = icmp eq i32 %97, 0
  br i1 %107, label %120, label %108

108:                                              ; preds = %106
  %109 = sitofp i32 %97 to double
  %110 = fmul double %109, 1.000000e+05
  %111 = sitofp i32 %103 to double
  %112 = fdiv double %110, %111
  %113 = fadd double %112, 5.000000e-01
  %114 = tail call double @llvm.floor.f64(double %113) #21
  %115 = fcmp ole double %114, 0x41DFFFFFFFC00000
  %116 = fcmp oge double %114, 0xC1E0000000000000
  %117 = and i1 %115, %116
  br i1 %117, label %118, label %177

118:                                              ; preds = %108
  %119 = fptosi double %114 to i32
  br label %120

120:                                              ; preds = %106, %118
  %121 = phi i32 [ %119, %118 ], [ 0, %106 ]
  store i32 %121, i32* %104, align 4
  %122 = getelementptr inbounds %struct.png_xy, %struct.png_xy* %0, i64 0, i32 5
  %123 = load i32, i32* %98, align 4
  %124 = icmp eq i32 %123, 0
  br i1 %124, label %137, label %125

125:                                              ; preds = %120
  %126 = sitofp i32 %123 to double
  %127 = fmul double %126, 1.000000e+05
  %128 = sitofp i32 %103 to double
  %129 = fdiv double %127, %128
  %130 = fadd double %129, 5.000000e-01
  %131 = tail call double @llvm.floor.f64(double %130) #21
  %132 = fcmp ole double %131, 0x41DFFFFFFFC00000
  %133 = fcmp oge double %131, 0xC1E0000000000000
  %134 = and i1 %132, %133
  br i1 %134, label %135, label %177

135:                                              ; preds = %125
  %136 = fptosi double %131 to i32
  br label %137

137:                                              ; preds = %120, %135
  %138 = phi i32 [ %136, %135 ], [ 0, %120 ]
  store i32 %138, i32* %122, align 4
  %139 = add nsw i32 %91, %103
  %140 = load i32, i32* %96, align 4
  %141 = add nsw i32 %93, %140
  %142 = load i32, i32* %98, align 4
  %143 = getelementptr inbounds %struct.png_xy, %struct.png_xy* %0, i64 0, i32 6
  %144 = icmp eq i32 %139, 0
  br i1 %144, label %177, label %145

145:                                              ; preds = %137
  %146 = icmp eq i32 %141, 0
  br i1 %146, label %159, label %147

147:                                              ; preds = %145
  %148 = sitofp i32 %141 to double
  %149 = fmul double %148, 1.000000e+05
  %150 = sitofp i32 %139 to double
  %151 = fdiv double %149, %150
  %152 = fadd double %151, 5.000000e-01
  %153 = tail call double @llvm.floor.f64(double %152) #21
  %154 = fcmp ole double %153, 0x41DFFFFFFFC00000
  %155 = fcmp oge double %153, 0xC1E0000000000000
  %156 = and i1 %154, %155
  br i1 %156, label %157, label %177

157:                                              ; preds = %147
  %158 = fptosi double %153 to i32
  br label %159

159:                                              ; preds = %145, %157
  %160 = phi i32 [ %158, %157 ], [ 0, %145 ]
  store i32 %160, i32* %143, align 4
  %161 = add nsw i32 %95, %142
  %162 = getelementptr inbounds %struct.png_xy, %struct.png_xy* %0, i64 0, i32 7
  %163 = icmp eq i32 %161, 0
  br i1 %163, label %164, label %165

164:                                              ; preds = %159
  store i32 0, i32* %162, align 4
  br label %177

165:                                              ; preds = %159
  %166 = sitofp i32 %161 to double
  %167 = fmul double %166, 1.000000e+05
  %168 = sitofp i32 %139 to double
  %169 = fdiv double %167, %168
  %170 = fadd double %169, 5.000000e-01
  %171 = tail call double @llvm.floor.f64(double %170) #21
  %172 = fcmp ole double %171, 0x41DFFFFFFFC00000
  %173 = fcmp oge double %171, 0xC1E0000000000000
  %174 = and i1 %172, %173
  br i1 %174, label %175, label %177

175:                                              ; preds = %165
  %176 = fptosi double %171 to i32
  store i32 %176, i32* %162, align 4
  br label %177

177:                                              ; preds = %175, %164, %137, %147, %89, %108, %44, %60, %2, %15, %165, %125, %77, %32
  %178 = phi i32 [ 1, %32 ], [ 1, %77 ], [ 1, %125 ], [ 1, %165 ], [ 1, %15 ], [ 1, %2 ], [ 1, %60 ], [ 1, %44 ], [ 1, %108 ], [ 1, %89 ], [ 1, %147 ], [ 1, %137 ], [ 0, %164 ], [ 0, %175 ]
  ret i32 %178
}

declare i8* @cr_png_format_number(i8*, i8*, i32, i64) local_unnamed_addr #5

declare i64 @Cr_z_adler32(i64, i8*, i32) local_unnamed_addr #5

declare noalias i8* @cr_png_malloc(%struct.png_struct_def*, i64) local_unnamed_addr #5

declare noalias i8* @cr_png_calloc(%struct.png_struct_def*, i64) local_unnamed_addr #5

; Function Attrs: nofree nounwind
declare i32 @fclose(%struct._IO_FILE* nocapture) local_unnamed_addr #17

declare void @cr_png_destroy_write_struct(%struct.png_struct_def**, %struct.png_info_def**) local_unnamed_addr #5

declare void @cr_png_destroy_read_struct(%struct.png_struct_def**, %struct.png_info_def**, %struct.png_info_def**) local_unnamed_addr #5

; Function Attrs: nofree nounwind readonly
declare i32 @bcmp(i8* nocapture, i8* nocapture, i64) local_unnamed_addr #18

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind readonly ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nofree nounwind readonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nounwind returns_twice "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { noreturn nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #9 = { norecurse nounwind readonly ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #10 = { nofree norecurse nounwind ssp uwtable writeonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #11 = { norecurse nounwind readnone ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #12 = { nofree norecurse nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #13 = { nofree nounwind ssp uwtable writeonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #14 = { nounwind readnone speculatable }
attributes #15 = { nounwind readnone ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #16 = { nofree nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #17 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #18 = { nofree nounwind readonly }
attributes #19 = { noreturn nounwind }
attributes #20 = { nounwind readonly }
attributes #21 = { nounwind }
attributes #22 = { nounwind returns_twice }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{!3}
!3 = distinct !{!3, !4, !"cr_png_handle_as_unknown: argument 0"}
!4 = distinct !{!4, !"cr_png_handle_as_unknown"}
!5 = !{!6}
!6 = distinct !{!6, !7, !"png_colorspace_check_gamma: argument 1"}
!7 = distinct !{!7, !"png_colorspace_check_gamma"}
!8 = !{!9}
!9 = distinct !{!9, !7, !"png_colorspace_check_gamma: argument 0"}
!10 = !{!11}
!11 = distinct !{!11, !12, !"cr_png_free_data: argument 1"}
!12 = distinct !{!12, !"cr_png_free_data"}
!13 = !{!14}
!14 = distinct !{!14, !12, !"cr_png_free_data: argument 0"}
!15 = !{!16}
!16 = distinct !{!16, !17, !"png_colorspace_set_xy_and_XYZ: argument 1"}
!17 = distinct !{!17, !"png_colorspace_set_xy_and_XYZ"}
!18 = !{!19}
!19 = distinct !{!19, !17, !"png_colorspace_set_xy_and_XYZ: argument 0"}
!20 = !{!21}
!21 = distinct !{!21, !22, !"png_colorspace_set_xy_and_XYZ: argument 1"}
!22 = distinct !{!22, !"png_colorspace_set_xy_and_XYZ"}
!23 = !{!24}
!24 = distinct !{!24, !22, !"png_colorspace_set_xy_and_XYZ: argument 0"}
!25 = !{!26}
!26 = distinct !{!26, !27, !"png_colorspace_check_gamma: argument 1"}
!27 = distinct !{!27, !"png_colorspace_check_gamma"}
!28 = !{!29}
!29 = distinct !{!29, !27, !"png_colorspace_check_gamma: argument 0"}
!30 = !{!31}
!31 = distinct !{!31, !32, !"png_compare_ICC_profile_with_sRGB: argument 0"}
!32 = distinct !{!32, !"png_compare_ICC_profile_with_sRGB"}
!33 = !{!34}
!34 = distinct !{!34, !35, !"png_build_8bit_table: argument 0"}
!35 = distinct !{!35, !"png_build_8bit_table"}
!36 = !{!37}
!37 = distinct !{!37, !38, !"png_build_8bit_table: argument 0"}
!38 = distinct !{!38, !"png_build_8bit_table"}
!39 = !{!40}
!40 = distinct !{!40, !41, !"png_build_8bit_table: argument 0"}
!41 = distinct !{!41, !"png_build_8bit_table"}
!42 = !{!43}
!43 = distinct !{!43, !44, !"png_build_16to8_table: argument 0"}
!44 = distinct !{!44, !"png_build_16to8_table"}
!45 = distinct !{!45, !46}
!46 = !{!"llvm.loop.unroll.disable"}
