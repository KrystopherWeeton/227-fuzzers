; ModuleID = '../../third_party/blink/renderer/core/editing/markers/suggestion_marker_properties.cc'
source_filename = "../../third_party/blink/renderer/core/editing/markers/suggestion_marker_properties.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.blink::SuggestionMarkerProperties" = type { i32, i32, %"class.WTF::Vector", %"class.blink::Color", %"class.blink::Color", %"class.blink::Color", i32, i32, %"class.blink::Color" }
%"class.WTF::Vector" = type { %"class.WTF::VectorBuffer" }
%"class.WTF::VectorBuffer" = type { %"class.WTF::VectorBufferBase" }
%"class.WTF::VectorBufferBase" = type { %"class.WTF::String"*, i32, i32 }
%"class.WTF::String" = type { %class.scoped_refptr }
%class.scoped_refptr = type { %"class.WTF::StringImpl"* }
%"class.WTF::StringImpl" = type { i32, i32, %"struct.std::__1::atomic" }
%"struct.std::__1::atomic" = type { %"struct.std::__1::__atomic_base" }
%"struct.std::__1::__atomic_base" = type { %"struct.std::__1::__atomic_base.0" }
%"struct.std::__1::__atomic_base.0" = type { %"struct.std::__1::__cxx_atomic_impl" }
%"struct.std::__1::__cxx_atomic_impl" = type { %"struct.std::__1::__cxx_atomic_base_impl" }
%"struct.std::__1::__cxx_atomic_base_impl" = type { i32 }
%"class.blink::Color" = type { i32 }
%"class.blink::SuggestionMarkerProperties::Builder" = type { %"class.blink::SuggestionMarkerProperties" }
%"class.logging::CheckOpResult" = type { i8* }
%"class.logging::CheckError" = type { %"class.logging::LogMessage"* }
%"class.logging::LogMessage" = type { i32 (...)**, i32, %"class.std::__1::basic_ostringstream", i64, i8*, i32, %"class.base::ScopedClearLastErrorBase" }
%"class.std::__1::basic_ostringstream" = type { %"class.std::__1::basic_ostream.base", %"class.std::__1::basic_stringbuf", %"class.std::__1::basic_ios.base" }
%"class.std::__1::basic_ostream.base" = type { i32 (...)** }
%"class.std::__1::basic_stringbuf" = type <{ %"class.std::__1::basic_streambuf", %"class.std::__1::basic_string", i8*, i32, [4 x i8] }>
%"class.std::__1::basic_streambuf" = type { i32 (...)**, %"class.std::__1::locale", i8*, i8*, i8*, i8*, i8*, i8* }
%"class.std::__1::locale" = type { %"class.std::__1::locale::__imp"* }
%"class.std::__1::locale::__imp" = type opaque
%"class.std::__1::basic_string" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" = type { %union.anon }
%union.anon = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" = type { i8*, i64, i64 }
%"class.std::__1::basic_ios.base" = type <{ %"class.std::__1::ios_base", %"class.std::__1::basic_ostream"*, i32 }>
%"class.std::__1::ios_base" = type { i32 (...)**, i32, i64, i64, i32, i32, i8*, i8*, void (i32, %"class.std::__1::ios_base"*, i32)**, i32*, i64, i64, i64*, i64, i64, i8**, i64, i64 }
%"class.std::__1::basic_ostream" = type { i32 (...)**, %"class.std::__1::basic_ios.base" }
%"class.base::ScopedClearLastErrorBase" = type { i32 }

$_ZN3WTF6VectorINS_6StringELj0ENS_18PartitionAllocatorEEaSERKS3_ = comdat any

$_ZN3WTF18PartitionAllocator13QuantizedSizeINS_6StringEEEmm = comdat any

@.str = private unnamed_addr constant [44 x i8] c"count <= MaxElementCountInBackingStore<T>()\00", align 1
@.str.1 = private unnamed_addr constant [78 x i8] c"../../third_party/blink/renderer/platform/wtf/allocator/partition_allocator.h\00", align 1
@__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameINS_6StringEEEPKcv = private unnamed_addr constant [59 x i8] c"const char *WTF::GetStringWithTypeName() [T = WTF::String]\00", align 1

@_ZN5blink26SuggestionMarkerPropertiesC1ERKS0_ = hidden unnamed_addr alias void (%"class.blink::SuggestionMarkerProperties"*, %"class.blink::SuggestionMarkerProperties"*), void (%"class.blink::SuggestionMarkerProperties"*, %"class.blink::SuggestionMarkerProperties"*)* @_ZN5blink26SuggestionMarkerPropertiesC2ERKS0_
@_ZN5blink26SuggestionMarkerPropertiesC1Ev = hidden unnamed_addr alias void (%"class.blink::SuggestionMarkerProperties"*), void (%"class.blink::SuggestionMarkerProperties"*)* @_ZN5blink26SuggestionMarkerPropertiesC2Ev
@_ZN5blink26SuggestionMarkerProperties7BuilderC1Ev = hidden unnamed_addr alias void (%"class.blink::SuggestionMarkerProperties::Builder"*), void (%"class.blink::SuggestionMarkerProperties::Builder"*)* @_ZN5blink26SuggestionMarkerProperties7BuilderC2Ev
@_ZN5blink26SuggestionMarkerProperties7BuilderC1ERKS0_ = hidden unnamed_addr alias void (%"class.blink::SuggestionMarkerProperties::Builder"*, %"class.blink::SuggestionMarkerProperties"*), void (%"class.blink::SuggestionMarkerProperties::Builder"*, %"class.blink::SuggestionMarkerProperties"*)* @_ZN5blink26SuggestionMarkerProperties7BuilderC2ERKS0_

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink26SuggestionMarkerPropertiesC2ERKS0_(%"class.blink::SuggestionMarkerProperties"* nocapture, %"class.blink::SuggestionMarkerProperties"* nocapture readonly dereferenceable(48)) unnamed_addr #0 align 2 {
  %3 = bitcast %"class.blink::SuggestionMarkerProperties"* %1 to i64*
  %4 = bitcast %"class.blink::SuggestionMarkerProperties"* %0 to i64*
  %5 = load i64, i64* %3, align 8
  store i64 %5, i64* %4, align 8
  %6 = getelementptr inbounds %"class.blink::SuggestionMarkerProperties", %"class.blink::SuggestionMarkerProperties"* %0, i64 0, i32 2
  %7 = getelementptr inbounds %"class.blink::SuggestionMarkerProperties", %"class.blink::SuggestionMarkerProperties"* %1, i64 0, i32 2, i32 0, i32 0, i32 1
  %8 = load i32, i32* %7, align 8
  %9 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %6, i64 0, i32 0, i32 0, i32 0
  store %"class.WTF::String"* null, %"class.WTF::String"** %9, align 8
  %10 = getelementptr inbounds %"class.blink::SuggestionMarkerProperties", %"class.blink::SuggestionMarkerProperties"* %0, i64 0, i32 2, i32 0, i32 0, i32 1
  store i32 0, i32* %10, align 8
  %11 = icmp eq i32 %8, 0
  br i1 %11, label %21, label %12

12:                                               ; preds = %2
  %13 = zext i32 %8 to i64
  %14 = tail call i64 @_ZN3WTF18PartitionAllocator13QuantizedSizeINS_6StringEEEmm(i64 %13) #7
  %15 = tail call i8* @_ZN3WTF18PartitionAllocator15AllocateBackingEmPKc(i64 %14, i8* getelementptr inbounds ([59 x i8], [59 x i8]* @__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameINS_6StringEEEPKcv, i64 0, i64 0)) #7
  %16 = ptrtoint i8* %15 to i64
  %17 = bitcast %"class.WTF::Vector"* %6 to i64*
  store atomic i64 %16, i64* %17 monotonic, align 8
  %18 = lshr i64 %14, 3
  %19 = trunc i64 %18 to i32
  store i32 %19, i32* %10, align 8
  %20 = bitcast i8* %15 to %"class.WTF::String"*
  br label %21

21:                                               ; preds = %12, %2
  %22 = phi %"class.WTF::String"* [ null, %2 ], [ %20, %12 ]
  %23 = getelementptr inbounds %"class.blink::SuggestionMarkerProperties", %"class.blink::SuggestionMarkerProperties"* %1, i64 0, i32 2, i32 0, i32 0, i32 2
  %24 = load i32, i32* %23, align 4
  %25 = getelementptr inbounds %"class.blink::SuggestionMarkerProperties", %"class.blink::SuggestionMarkerProperties"* %0, i64 0, i32 2, i32 0, i32 0, i32 2
  store i32 %24, i32* %25, align 4
  %26 = getelementptr inbounds %"class.blink::SuggestionMarkerProperties", %"class.blink::SuggestionMarkerProperties"* %1, i64 0, i32 2, i32 0, i32 0, i32 0
  %27 = load %"class.WTF::String"*, %"class.WTF::String"** %26, align 8
  %28 = load i32, i32* %23, align 4
  %29 = zext i32 %28 to i64
  %30 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %27, i64 %29
  %31 = icmp eq i32 %28, 0
  br i1 %31, label %60, label %32

32:                                               ; preds = %21, %56
  %33 = phi %"class.WTF::String"* [ %57, %56 ], [ %22, %21 ]
  %34 = phi %"class.WTF::String"* [ %58, %56 ], [ %27, %21 ]
  %35 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %34, i64 0, i32 0, i32 0
  %36 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %35, align 8
  %37 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %33, i64 0, i32 0, i32 0
  store %"class.WTF::StringImpl"* %36, %"class.WTF::StringImpl"** %37, align 8
  %38 = icmp eq %"class.WTF::StringImpl"* %36, null
  br i1 %38, label %56, label %39

39:                                               ; preds = %32
  %40 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %36, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %41 = load atomic i32, i32* %40 monotonic, align 4
  %42 = and i32 %41, 2
  %43 = icmp eq i32 %42, 0
  br i1 %43, label %44, label %56

44:                                               ; preds = %39
  %45 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %36, i64 0, i32 0
  %46 = load i32, i32* %45, align 4
  %47 = zext i32 %46 to i33
  %48 = tail call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %47, i33 1) #7
  %49 = extractvalue { i33, i1 } %48, 1
  %50 = extractvalue { i33, i1 } %48, 0
  %51 = icmp slt i33 %50, 0
  %52 = or i1 %49, %51
  br i1 %52, label %53, label %54, !prof !2

53:                                               ; preds = %44
  tail call void @llvm.trap() #7
  unreachable

54:                                               ; preds = %44
  %55 = trunc i33 %50 to i32
  store i32 %55, i32* %45, align 4
  br label %56

56:                                               ; preds = %54, %39, %32
  %57 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %33, i64 1
  %58 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %34, i64 1
  %59 = icmp eq %"class.WTF::String"* %58, %30
  br i1 %59, label %60, label %32

60:                                               ; preds = %56, %21
  %61 = getelementptr inbounds %"class.blink::SuggestionMarkerProperties", %"class.blink::SuggestionMarkerProperties"* %0, i64 0, i32 3
  %62 = getelementptr inbounds %"class.blink::SuggestionMarkerProperties", %"class.blink::SuggestionMarkerProperties"* %1, i64 0, i32 3
  %63 = bitcast %"class.blink::Color"* %61 to i8*
  %64 = bitcast %"class.blink::Color"* %62 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %63, i8* align 8 %64, i64 24, i1 false)
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #1

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink26SuggestionMarkerPropertiesC2Ev(%"class.blink::SuggestionMarkerProperties"* nocapture) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.blink::SuggestionMarkerProperties", %"class.blink::SuggestionMarkerProperties"* %0, i64 0, i32 0
  store i32 1, i32* %2, align 8
  %3 = getelementptr inbounds %"class.blink::SuggestionMarkerProperties", %"class.blink::SuggestionMarkerProperties"* %0, i64 0, i32 1
  store i32 1, i32* %3, align 4
  %4 = getelementptr inbounds %"class.blink::SuggestionMarkerProperties", %"class.blink::SuggestionMarkerProperties"* %0, i64 0, i32 2
  %5 = getelementptr inbounds %"class.blink::SuggestionMarkerProperties", %"class.blink::SuggestionMarkerProperties"* %0, i64 0, i32 6
  %6 = bitcast %"class.WTF::Vector"* %4 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %6, i8 0, i64 28, i1 false)
  store i32 1, i32* %5, align 4
  %7 = getelementptr inbounds %"class.blink::SuggestionMarkerProperties", %"class.blink::SuggestionMarkerProperties"* %0, i64 0, i32 7
  store i32 1, i32* %7, align 8
  %8 = getelementptr inbounds %"class.blink::SuggestionMarkerProperties", %"class.blink::SuggestionMarkerProperties"* %0, i64 0, i32 8, i32 0
  store i32 0, i32* %8, align 4
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink26SuggestionMarkerProperties7BuilderC2Ev(%"class.blink::SuggestionMarkerProperties::Builder"* nocapture) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.blink::SuggestionMarkerProperties::Builder", %"class.blink::SuggestionMarkerProperties::Builder"* %0, i64 0, i32 0, i32 0
  store i32 1, i32* %2, align 8
  %3 = getelementptr inbounds %"class.blink::SuggestionMarkerProperties::Builder", %"class.blink::SuggestionMarkerProperties::Builder"* %0, i64 0, i32 0, i32 1
  store i32 1, i32* %3, align 4
  %4 = getelementptr inbounds %"class.blink::SuggestionMarkerProperties::Builder", %"class.blink::SuggestionMarkerProperties::Builder"* %0, i64 0, i32 0, i32 2
  %5 = getelementptr inbounds %"class.blink::SuggestionMarkerProperties::Builder", %"class.blink::SuggestionMarkerProperties::Builder"* %0, i64 0, i32 0, i32 6
  %6 = bitcast %"class.WTF::Vector"* %4 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %6, i8 0, i64 28, i1 false) #7
  store i32 1, i32* %5, align 4
  %7 = getelementptr inbounds %"class.blink::SuggestionMarkerProperties::Builder", %"class.blink::SuggestionMarkerProperties::Builder"* %0, i64 0, i32 0, i32 7
  store i32 1, i32* %7, align 8
  %8 = getelementptr inbounds %"class.blink::SuggestionMarkerProperties::Builder", %"class.blink::SuggestionMarkerProperties::Builder"* %0, i64 0, i32 0, i32 8, i32 0
  store i32 0, i32* %8, align 4
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink26SuggestionMarkerProperties7BuilderC2ERKS0_(%"class.blink::SuggestionMarkerProperties::Builder"*, %"class.blink::SuggestionMarkerProperties"* dereferenceable(48)) unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.blink::SuggestionMarkerProperties::Builder", %"class.blink::SuggestionMarkerProperties::Builder"* %0, i64 0, i32 0, i32 0
  store i32 1, i32* %3, align 8
  %4 = getelementptr inbounds %"class.blink::SuggestionMarkerProperties::Builder", %"class.blink::SuggestionMarkerProperties::Builder"* %0, i64 0, i32 0, i32 1
  store i32 1, i32* %4, align 4
  %5 = getelementptr inbounds %"class.blink::SuggestionMarkerProperties::Builder", %"class.blink::SuggestionMarkerProperties::Builder"* %0, i64 0, i32 0, i32 2
  %6 = getelementptr inbounds %"class.blink::SuggestionMarkerProperties::Builder", %"class.blink::SuggestionMarkerProperties::Builder"* %0, i64 0, i32 0, i32 6
  %7 = bitcast %"class.WTF::Vector"* %5 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %7, i8 0, i64 28, i1 false) #7
  store i32 1, i32* %6, align 4
  %8 = getelementptr inbounds %"class.blink::SuggestionMarkerProperties::Builder", %"class.blink::SuggestionMarkerProperties::Builder"* %0, i64 0, i32 0, i32 7
  store i32 1, i32* %8, align 8
  %9 = getelementptr inbounds %"class.blink::SuggestionMarkerProperties::Builder", %"class.blink::SuggestionMarkerProperties::Builder"* %0, i64 0, i32 0, i32 8, i32 0
  store i32 0, i32* %9, align 4
  %10 = bitcast %"class.blink::SuggestionMarkerProperties"* %1 to i64*
  %11 = bitcast %"class.blink::SuggestionMarkerProperties::Builder"* %0 to i64*
  %12 = load i64, i64* %10, align 8
  store i64 %12, i64* %11, align 8
  %13 = getelementptr inbounds %"class.blink::SuggestionMarkerProperties", %"class.blink::SuggestionMarkerProperties"* %1, i64 0, i32 2
  %14 = tail call dereferenceable(16) %"class.WTF::Vector"* @_ZN3WTF6VectorINS_6StringELj0ENS_18PartitionAllocatorEEaSERKS3_(%"class.WTF::Vector"* %5, %"class.WTF::Vector"* dereferenceable(16) %13) #7
  %15 = getelementptr inbounds %"class.blink::SuggestionMarkerProperties::Builder", %"class.blink::SuggestionMarkerProperties::Builder"* %0, i64 0, i32 0, i32 3
  %16 = getelementptr inbounds %"class.blink::SuggestionMarkerProperties", %"class.blink::SuggestionMarkerProperties"* %1, i64 0, i32 3
  %17 = bitcast %"class.blink::Color"* %15 to i8*
  %18 = bitcast %"class.blink::Color"* %16 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %17, i8* align 8 %18, i64 24, i1 false) #7
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZNK5blink26SuggestionMarkerProperties7Builder5BuildEv(%"class.blink::SuggestionMarkerProperties"* noalias nocapture sret, %"class.blink::SuggestionMarkerProperties::Builder"* nocapture readonly) local_unnamed_addr #0 align 2 {
  %3 = bitcast %"class.blink::SuggestionMarkerProperties::Builder"* %1 to i64*
  %4 = bitcast %"class.blink::SuggestionMarkerProperties"* %0 to i64*
  %5 = load i64, i64* %3, align 8
  store i64 %5, i64* %4, align 8
  %6 = getelementptr inbounds %"class.blink::SuggestionMarkerProperties", %"class.blink::SuggestionMarkerProperties"* %0, i64 0, i32 2
  %7 = getelementptr inbounds %"class.blink::SuggestionMarkerProperties::Builder", %"class.blink::SuggestionMarkerProperties::Builder"* %1, i64 0, i32 0, i32 2, i32 0, i32 0, i32 1
  %8 = load i32, i32* %7, align 8
  %9 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %6, i64 0, i32 0, i32 0, i32 0
  store %"class.WTF::String"* null, %"class.WTF::String"** %9, align 8
  %10 = getelementptr inbounds %"class.blink::SuggestionMarkerProperties", %"class.blink::SuggestionMarkerProperties"* %0, i64 0, i32 2, i32 0, i32 0, i32 1
  store i32 0, i32* %10, align 8
  %11 = icmp eq i32 %8, 0
  br i1 %11, label %21, label %12

12:                                               ; preds = %2
  %13 = zext i32 %8 to i64
  %14 = tail call i64 @_ZN3WTF18PartitionAllocator13QuantizedSizeINS_6StringEEEmm(i64 %13) #7
  %15 = tail call i8* @_ZN3WTF18PartitionAllocator15AllocateBackingEmPKc(i64 %14, i8* getelementptr inbounds ([59 x i8], [59 x i8]* @__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameINS_6StringEEEPKcv, i64 0, i64 0)) #7
  %16 = ptrtoint i8* %15 to i64
  %17 = bitcast %"class.WTF::Vector"* %6 to i64*
  store atomic i64 %16, i64* %17 monotonic, align 8
  %18 = lshr i64 %14, 3
  %19 = trunc i64 %18 to i32
  store i32 %19, i32* %10, align 8
  %20 = bitcast i8* %15 to %"class.WTF::String"*
  br label %21

21:                                               ; preds = %12, %2
  %22 = phi %"class.WTF::String"* [ null, %2 ], [ %20, %12 ]
  %23 = getelementptr inbounds %"class.blink::SuggestionMarkerProperties::Builder", %"class.blink::SuggestionMarkerProperties::Builder"* %1, i64 0, i32 0, i32 2, i32 0, i32 0, i32 2
  %24 = load i32, i32* %23, align 4
  %25 = getelementptr inbounds %"class.blink::SuggestionMarkerProperties", %"class.blink::SuggestionMarkerProperties"* %0, i64 0, i32 2, i32 0, i32 0, i32 2
  store i32 %24, i32* %25, align 4
  %26 = getelementptr inbounds %"class.blink::SuggestionMarkerProperties::Builder", %"class.blink::SuggestionMarkerProperties::Builder"* %1, i64 0, i32 0, i32 2, i32 0, i32 0, i32 0
  %27 = load %"class.WTF::String"*, %"class.WTF::String"** %26, align 8
  %28 = zext i32 %24 to i64
  %29 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %27, i64 %28
  %30 = icmp eq i32 %24, 0
  br i1 %30, label %59, label %31

31:                                               ; preds = %21, %55
  %32 = phi %"class.WTF::String"* [ %56, %55 ], [ %22, %21 ]
  %33 = phi %"class.WTF::String"* [ %57, %55 ], [ %27, %21 ]
  %34 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %33, i64 0, i32 0, i32 0
  %35 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %34, align 8
  %36 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %32, i64 0, i32 0, i32 0
  store %"class.WTF::StringImpl"* %35, %"class.WTF::StringImpl"** %36, align 8
  %37 = icmp eq %"class.WTF::StringImpl"* %35, null
  br i1 %37, label %55, label %38

38:                                               ; preds = %31
  %39 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %35, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %40 = load atomic i32, i32* %39 monotonic, align 4
  %41 = and i32 %40, 2
  %42 = icmp eq i32 %41, 0
  br i1 %42, label %43, label %55

43:                                               ; preds = %38
  %44 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %35, i64 0, i32 0
  %45 = load i32, i32* %44, align 4
  %46 = zext i32 %45 to i33
  %47 = tail call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %46, i33 1) #7
  %48 = extractvalue { i33, i1 } %47, 1
  %49 = extractvalue { i33, i1 } %47, 0
  %50 = icmp slt i33 %49, 0
  %51 = or i1 %48, %50
  br i1 %51, label %52, label %53, !prof !2

52:                                               ; preds = %43
  tail call void @llvm.trap() #7
  unreachable

53:                                               ; preds = %43
  %54 = trunc i33 %49 to i32
  store i32 %54, i32* %44, align 4
  br label %55

55:                                               ; preds = %53, %38, %31
  %56 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %32, i64 1
  %57 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %33, i64 1
  %58 = icmp eq %"class.WTF::String"* %57, %29
  br i1 %58, label %59, label %31

59:                                               ; preds = %55, %21
  %60 = getelementptr inbounds %"class.blink::SuggestionMarkerProperties", %"class.blink::SuggestionMarkerProperties"* %0, i64 0, i32 3
  %61 = getelementptr inbounds %"class.blink::SuggestionMarkerProperties::Builder", %"class.blink::SuggestionMarkerProperties::Builder"* %1, i64 0, i32 0, i32 3
  %62 = bitcast %"class.blink::Color"* %60 to i8*
  %63 = bitcast %"class.blink::Color"* %61 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %62, i8* align 8 %63, i64 24, i1 false) #7
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable writeonly
define hidden dereferenceable(48) %"class.blink::SuggestionMarkerProperties::Builder"* @_ZN5blink26SuggestionMarkerProperties7Builder7SetTypeENS_16SuggestionMarker14SuggestionTypeE(%"class.blink::SuggestionMarkerProperties::Builder"* returned, i32) local_unnamed_addr #2 align 2 {
  %3 = getelementptr inbounds %"class.blink::SuggestionMarkerProperties::Builder", %"class.blink::SuggestionMarkerProperties::Builder"* %0, i64 0, i32 0, i32 0
  store i32 %1, i32* %3, align 8
  ret %"class.blink::SuggestionMarkerProperties::Builder"* %0
}

; Function Attrs: nofree norecurse nounwind ssp uwtable writeonly
define hidden dereferenceable(48) %"class.blink::SuggestionMarkerProperties::Builder"* @_ZN5blink26SuggestionMarkerProperties7Builder26SetRemoveOnFinishComposingEb(%"class.blink::SuggestionMarkerProperties::Builder"* returned, i1 zeroext) local_unnamed_addr #2 align 2 {
  %3 = xor i1 %1, true
  %4 = zext i1 %3 to i32
  %5 = getelementptr inbounds %"class.blink::SuggestionMarkerProperties::Builder", %"class.blink::SuggestionMarkerProperties::Builder"* %0, i64 0, i32 0, i32 1
  store i32 %4, i32* %5, align 4
  ret %"class.blink::SuggestionMarkerProperties::Builder"* %0
}

; Function Attrs: nounwind ssp uwtable
define hidden dereferenceable(48) %"class.blink::SuggestionMarkerProperties::Builder"* @_ZN5blink26SuggestionMarkerProperties7Builder14SetSuggestionsERKN3WTF6VectorINS2_6StringELj0ENS2_18PartitionAllocatorEEE(%"class.blink::SuggestionMarkerProperties::Builder"* returned, %"class.WTF::Vector"* dereferenceable(16)) local_unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.blink::SuggestionMarkerProperties::Builder", %"class.blink::SuggestionMarkerProperties::Builder"* %0, i64 0, i32 0, i32 2
  %4 = tail call dereferenceable(16) %"class.WTF::Vector"* @_ZN3WTF6VectorINS_6StringELj0ENS_18PartitionAllocatorEEaSERKS3_(%"class.WTF::Vector"* %3, %"class.WTF::Vector"* dereferenceable(16) %1)
  ret %"class.blink::SuggestionMarkerProperties::Builder"* %0
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden dereferenceable(16) %"class.WTF::Vector"* @_ZN3WTF6VectorINS_6StringELj0ENS_18PartitionAllocatorEEaSERKS3_(%"class.WTF::Vector"*, %"class.WTF::Vector"* dereferenceable(16)) local_unnamed_addr #0 comdat align 2 {
  %3 = icmp eq %"class.WTF::Vector"* %1, %0
  br i1 %3, label %219, label %4, !prof !2

4:                                                ; preds = %2
  %5 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %0, i64 0, i32 0, i32 0, i32 2
  %6 = load i32, i32* %5, align 4
  %7 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %1, i64 0, i32 0, i32 0, i32 2
  %8 = load i32, i32* %7, align 4
  %9 = icmp ugt i32 %6, %8
  br i1 %9, label %10, label %39

10:                                               ; preds = %4
  %11 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %0, i64 0, i32 0, i32 0, i32 0
  %12 = load %"class.WTF::String"*, %"class.WTF::String"** %11, align 8
  %13 = zext i32 %6 to i64
  %14 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %12, i64 %13
  %15 = zext i32 %8 to i64
  %16 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %12, i64 %15
  br label %17

17:                                               ; preds = %35, %10
  %18 = phi %"class.WTF::String"* [ %36, %35 ], [ %16, %10 ]
  %19 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %18, i64 0, i32 0, i32 0
  %20 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %19, align 8
  %21 = icmp eq %"class.WTF::StringImpl"* %20, null
  br i1 %21, label %35, label %22

22:                                               ; preds = %17
  %23 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %20, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %24 = load atomic i32, i32* %23 monotonic, align 4
  %25 = and i32 %24, 2
  %26 = icmp eq i32 %25, 0
  %27 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %20, i64 0, i32 0
  %28 = load i32, i32* %27, align 4
  br i1 %26, label %29, label %31

29:                                               ; preds = %22
  %30 = add i32 %28, -1
  store i32 %30, i32* %27, align 4
  br label %31

31:                                               ; preds = %29, %22
  %32 = phi i32 [ %30, %29 ], [ %28, %22 ]
  %33 = icmp eq i32 %32, 0
  br i1 %33, label %34, label %35

34:                                               ; preds = %31
  tail call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %20) #7
  br label %35

35:                                               ; preds = %34, %31, %17
  %36 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %18, i64 1
  %37 = icmp eq %"class.WTF::String"* %36, %14
  br i1 %37, label %38, label %17

38:                                               ; preds = %35
  store i32 %8, i32* %5, align 4
  br label %116

39:                                               ; preds = %4
  %40 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %0, i64 0, i32 0, i32 0, i32 1
  %41 = load i32, i32* %40, align 8
  %42 = icmp ugt i32 %8, %41
  br i1 %42, label %43, label %114

43:                                               ; preds = %39
  %44 = icmp eq i32 %41, 0
  br i1 %44, label %80, label %45

45:                                               ; preds = %43
  %46 = icmp eq i32 %6, 0
  br i1 %46, label %74, label %47

47:                                               ; preds = %45
  %48 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %0, i64 0, i32 0, i32 0, i32 0
  %49 = load %"class.WTF::String"*, %"class.WTF::String"** %48, align 8
  %50 = zext i32 %6 to i64
  %51 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %49, i64 %50
  br label %52

52:                                               ; preds = %70, %47
  %53 = phi %"class.WTF::String"* [ %71, %70 ], [ %49, %47 ]
  %54 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %53, i64 0, i32 0, i32 0
  %55 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %54, align 8
  %56 = icmp eq %"class.WTF::StringImpl"* %55, null
  br i1 %56, label %70, label %57

57:                                               ; preds = %52
  %58 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %55, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %59 = load atomic i32, i32* %58 monotonic, align 4
  %60 = and i32 %59, 2
  %61 = icmp eq i32 %60, 0
  %62 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %55, i64 0, i32 0
  %63 = load i32, i32* %62, align 4
  br i1 %61, label %64, label %66

64:                                               ; preds = %57
  %65 = add i32 %63, -1
  store i32 %65, i32* %62, align 4
  br label %66

66:                                               ; preds = %64, %57
  %67 = phi i32 [ %65, %64 ], [ %63, %57 ]
  %68 = icmp eq i32 %67, 0
  br i1 %68, label %69, label %70

69:                                               ; preds = %66
  tail call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %55) #7
  br label %70

70:                                               ; preds = %69, %66, %52
  %71 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %53, i64 1
  %72 = icmp eq %"class.WTF::String"* %71, %51
  br i1 %72, label %73, label %52

73:                                               ; preds = %70
  store i32 0, i32* %5, align 4
  br label %74

74:                                               ; preds = %73, %45
  %75 = bitcast %"class.WTF::Vector"* %0 to i8**
  %76 = load i8*, i8** %75, align 8
  %77 = bitcast %"class.WTF::Vector"* %0 to i64*
  store atomic i64 0, i64* %77 monotonic, align 8
  store i32 0, i32* %40, align 8
  tail call void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8* %76) #7
  %78 = load i32, i32* %7, align 4
  %79 = load i32, i32* %40, align 8
  br label %80

80:                                               ; preds = %43, %74
  %81 = phi i32 [ 0, %43 ], [ %79, %74 ]
  %82 = phi i32 [ %8, %43 ], [ %78, %74 ]
  %83 = icmp ult i32 %81, %82
  br i1 %83, label %84, label %114, !prof !3

84:                                               ; preds = %80
  %85 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %0, i64 0, i32 0, i32 0, i32 0
  %86 = load %"class.WTF::String"*, %"class.WTF::String"** %85, align 8
  %87 = icmp eq %"class.WTF::String"* %86, null
  %88 = zext i32 %82 to i64
  %89 = tail call i64 @_ZN3WTF18PartitionAllocator13QuantizedSizeINS_6StringEEEmm(i64 %88) #7
  %90 = tail call i8* @_ZN3WTF18PartitionAllocator15AllocateBackingEmPKc(i64 %89, i8* getelementptr inbounds ([59 x i8], [59 x i8]* @__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameINS_6StringEEEPKcv, i64 0, i64 0)) #7
  br i1 %87, label %91, label %96

91:                                               ; preds = %84
  %92 = ptrtoint i8* %90 to i64
  %93 = bitcast %"class.WTF::Vector"* %0 to i64*
  store atomic i64 %92, i64* %93 monotonic, align 8
  %94 = lshr i64 %89, 3
  %95 = trunc i64 %94 to i32
  store i32 %95, i32* %40, align 8
  br label %114

96:                                               ; preds = %84
  %97 = lshr i64 %89, 3
  %98 = ptrtoint i8* %90 to i64
  %99 = load %"class.WTF::String"*, %"class.WTF::String"** %85, align 8
  %100 = icmp ne i8* %90, null
  %101 = icmp ne %"class.WTF::String"* %99, null
  %102 = and i1 %100, %101
  %103 = bitcast %"class.WTF::String"* %99 to i8*
  br i1 %102, label %104, label %110, !prof !3

104:                                              ; preds = %96
  %105 = load i32, i32* %5, align 4
  %106 = zext i32 %105 to i64
  %107 = shl nuw nsw i64 %106, 3
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %90, i8* nonnull align 8 %103, i64 %107, i1 false) #7
  %108 = bitcast %"class.WTF::Vector"* %0 to i8**
  %109 = load i8*, i8** %108, align 8
  br label %110

110:                                              ; preds = %104, %96
  %111 = phi i8* [ %109, %104 ], [ %103, %96 ]
  tail call void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8* %111) #7
  %112 = bitcast %"class.WTF::Vector"* %0 to i64*
  store atomic i64 %98, i64* %112 monotonic, align 8
  %113 = trunc i64 %97 to i32
  store i32 %113, i32* %40, align 8
  br label %114

114:                                              ; preds = %39, %80, %91, %110
  %115 = load i32, i32* %5, align 4
  br label %116

116:                                              ; preds = %114, %38
  %117 = phi i32 [ %115, %114 ], [ %8, %38 ]
  %118 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %1, i64 0, i32 0, i32 0, i32 0
  %119 = load %"class.WTF::String"*, %"class.WTF::String"** %118, align 8
  %120 = zext i32 %117 to i64
  %121 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %119, i64 %120
  %122 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %0, i64 0, i32 0, i32 0, i32 0
  %123 = load %"class.WTF::String"*, %"class.WTF::String"** %122, align 8
  %124 = icmp eq i32 %117, 0
  br i1 %124, label %175, label %125

125:                                              ; preds = %116, %167
  %126 = phi %"class.WTF::String"* [ %169, %167 ], [ %123, %116 ]
  %127 = phi %"class.WTF::String"* [ %168, %167 ], [ %119, %116 ]
  %128 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %127, i64 0, i32 0, i32 0
  %129 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %128, align 8
  %130 = icmp eq %"class.WTF::StringImpl"* %129, null
  br i1 %130, label %148, label %131

131:                                              ; preds = %125
  %132 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %129, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %133 = load atomic i32, i32* %132 monotonic, align 4
  %134 = and i32 %133, 2
  %135 = icmp eq i32 %134, 0
  br i1 %135, label %136, label %148

136:                                              ; preds = %131
  %137 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %129, i64 0, i32 0
  %138 = load i32, i32* %137, align 4
  %139 = zext i32 %138 to i33
  %140 = tail call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %139, i33 1) #7
  %141 = extractvalue { i33, i1 } %140, 1
  %142 = extractvalue { i33, i1 } %140, 0
  %143 = icmp slt i33 %142, 0
  %144 = or i1 %141, %143
  br i1 %144, label %145, label %146, !prof !2

145:                                              ; preds = %136
  tail call void @llvm.trap() #7
  unreachable

146:                                              ; preds = %136
  %147 = trunc i33 %142 to i32
  store i32 %147, i32* %137, align 4
  br label %148

148:                                              ; preds = %146, %131, %125
  %149 = ptrtoint %"class.WTF::StringImpl"* %129 to i64
  %150 = bitcast %"class.WTF::String"* %126 to i64*
  %151 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %126, i64 0, i32 0, i32 0
  %152 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %151, align 8
  store i64 %149, i64* %150, align 8
  %153 = icmp eq %"class.WTF::StringImpl"* %152, null
  br i1 %153, label %167, label %154

154:                                              ; preds = %148
  %155 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %152, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %156 = load atomic i32, i32* %155 monotonic, align 4
  %157 = and i32 %156, 2
  %158 = icmp eq i32 %157, 0
  %159 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %152, i64 0, i32 0
  %160 = load i32, i32* %159, align 4
  br i1 %158, label %161, label %163

161:                                              ; preds = %154
  %162 = add i32 %160, -1
  store i32 %162, i32* %159, align 4
  br label %163

163:                                              ; preds = %161, %154
  %164 = phi i32 [ %162, %161 ], [ %160, %154 ]
  %165 = icmp eq i32 %164, 0
  br i1 %165, label %166, label %167

166:                                              ; preds = %163
  tail call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %152) #7
  br label %167

167:                                              ; preds = %166, %163, %148
  %168 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %127, i64 1
  %169 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %126, i64 1
  %170 = icmp eq %"class.WTF::String"* %168, %121
  br i1 %170, label %171, label %125

171:                                              ; preds = %167
  %172 = load %"class.WTF::String"*, %"class.WTF::String"** %118, align 8
  %173 = load i32, i32* %5, align 4
  %174 = load %"class.WTF::String"*, %"class.WTF::String"** %122, align 8
  br label %175

175:                                              ; preds = %171, %116
  %176 = phi %"class.WTF::String"* [ %174, %171 ], [ %123, %116 ]
  %177 = phi i32 [ %173, %171 ], [ 0, %116 ]
  %178 = phi %"class.WTF::String"* [ %172, %171 ], [ %119, %116 ]
  %179 = zext i32 %177 to i64
  %180 = load i32, i32* %7, align 4
  %181 = zext i32 %180 to i64
  %182 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %178, i64 %181
  %183 = icmp eq i32 %177, %180
  br i1 %183, label %217, label %184

184:                                              ; preds = %175
  %185 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %176, i64 %179
  %186 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %178, i64 %179
  br label %187

187:                                              ; preds = %184, %211
  %188 = phi %"class.WTF::String"* [ %212, %211 ], [ %185, %184 ]
  %189 = phi %"class.WTF::String"* [ %213, %211 ], [ %186, %184 ]
  %190 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %189, i64 0, i32 0, i32 0
  %191 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %190, align 8
  %192 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %188, i64 0, i32 0, i32 0
  store %"class.WTF::StringImpl"* %191, %"class.WTF::StringImpl"** %192, align 8
  %193 = icmp eq %"class.WTF::StringImpl"* %191, null
  br i1 %193, label %211, label %194

194:                                              ; preds = %187
  %195 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %191, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %196 = load atomic i32, i32* %195 monotonic, align 4
  %197 = and i32 %196, 2
  %198 = icmp eq i32 %197, 0
  br i1 %198, label %199, label %211

199:                                              ; preds = %194
  %200 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %191, i64 0, i32 0
  %201 = load i32, i32* %200, align 4
  %202 = zext i32 %201 to i33
  %203 = tail call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %202, i33 1) #7
  %204 = extractvalue { i33, i1 } %203, 1
  %205 = extractvalue { i33, i1 } %203, 0
  %206 = icmp slt i33 %205, 0
  %207 = or i1 %204, %206
  br i1 %207, label %208, label %209, !prof !2

208:                                              ; preds = %199
  tail call void @llvm.trap() #7
  unreachable

209:                                              ; preds = %199
  %210 = trunc i33 %205 to i32
  store i32 %210, i32* %200, align 4
  br label %211

211:                                              ; preds = %209, %194, %187
  %212 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %188, i64 1
  %213 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %189, i64 1
  %214 = icmp eq %"class.WTF::String"* %213, %182
  br i1 %214, label %215, label %187

215:                                              ; preds = %211
  %216 = load i32, i32* %7, align 4
  br label %217

217:                                              ; preds = %215, %175
  %218 = phi i32 [ %216, %215 ], [ %177, %175 ]
  store i32 %218, i32* %5, align 4
  br label %219

219:                                              ; preds = %2, %217
  ret %"class.WTF::Vector"* %0
}

; Function Attrs: nofree norecurse nounwind ssp uwtable writeonly
define hidden dereferenceable(48) %"class.blink::SuggestionMarkerProperties::Builder"* @_ZN5blink26SuggestionMarkerProperties7Builder17SetHighlightColorENS_5ColorE(%"class.blink::SuggestionMarkerProperties::Builder"* returned, i32) local_unnamed_addr #2 align 2 {
  %3 = getelementptr inbounds %"class.blink::SuggestionMarkerProperties::Builder", %"class.blink::SuggestionMarkerProperties::Builder"* %0, i64 0, i32 0, i32 3, i32 0
  store i32 %1, i32* %3, align 8
  ret %"class.blink::SuggestionMarkerProperties::Builder"* %0
}

; Function Attrs: nofree norecurse nounwind ssp uwtable writeonly
define hidden dereferenceable(48) %"class.blink::SuggestionMarkerProperties::Builder"* @_ZN5blink26SuggestionMarkerProperties7Builder17SetUnderlineColorENS_5ColorE(%"class.blink::SuggestionMarkerProperties::Builder"* returned, i32) local_unnamed_addr #2 align 2 {
  %3 = getelementptr inbounds %"class.blink::SuggestionMarkerProperties::Builder", %"class.blink::SuggestionMarkerProperties::Builder"* %0, i64 0, i32 0, i32 4, i32 0
  store i32 %1, i32* %3, align 4
  ret %"class.blink::SuggestionMarkerProperties::Builder"* %0
}

; Function Attrs: nofree norecurse nounwind ssp uwtable writeonly
define hidden dereferenceable(48) %"class.blink::SuggestionMarkerProperties::Builder"* @_ZN5blink26SuggestionMarkerProperties7Builder18SetBackgroundColorENS_5ColorE(%"class.blink::SuggestionMarkerProperties::Builder"* returned, i32) local_unnamed_addr #2 align 2 {
  %3 = getelementptr inbounds %"class.blink::SuggestionMarkerProperties::Builder", %"class.blink::SuggestionMarkerProperties::Builder"* %0, i64 0, i32 0, i32 5, i32 0
  store i32 %1, i32* %3, align 8
  ret %"class.blink::SuggestionMarkerProperties::Builder"* %0
}

; Function Attrs: nofree norecurse nounwind ssp uwtable writeonly
define hidden dereferenceable(48) %"class.blink::SuggestionMarkerProperties::Builder"* @_ZN5blink26SuggestionMarkerProperties7Builder12SetThicknessEN2ui5mojom20ImeTextSpanThicknessE(%"class.blink::SuggestionMarkerProperties::Builder"* returned, i32) local_unnamed_addr #2 align 2 {
  %3 = getelementptr inbounds %"class.blink::SuggestionMarkerProperties::Builder", %"class.blink::SuggestionMarkerProperties::Builder"* %0, i64 0, i32 0, i32 6
  store i32 %1, i32* %3, align 4
  ret %"class.blink::SuggestionMarkerProperties::Builder"* %0
}

; Function Attrs: nofree norecurse nounwind ssp uwtable writeonly
define hidden dereferenceable(48) %"class.blink::SuggestionMarkerProperties::Builder"* @_ZN5blink26SuggestionMarkerProperties7Builder17SetUnderlineStyleEN2ui5mojom25ImeTextSpanUnderlineStyleE(%"class.blink::SuggestionMarkerProperties::Builder"* returned, i32) local_unnamed_addr #2 align 2 {
  %3 = getelementptr inbounds %"class.blink::SuggestionMarkerProperties::Builder", %"class.blink::SuggestionMarkerProperties::Builder"* %0, i64 0, i32 0, i32 7
  store i32 %1, i32* %3, align 8
  ret %"class.blink::SuggestionMarkerProperties::Builder"* %0
}

; Function Attrs: nofree norecurse nounwind ssp uwtable writeonly
define hidden dereferenceable(48) %"class.blink::SuggestionMarkerProperties::Builder"* @_ZN5blink26SuggestionMarkerProperties7Builder12SetTextColorENS_5ColorE(%"class.blink::SuggestionMarkerProperties::Builder"* returned, i32) local_unnamed_addr #2 align 2 {
  %3 = getelementptr inbounds %"class.blink::SuggestionMarkerProperties::Builder", %"class.blink::SuggestionMarkerProperties::Builder"* %0, i64 0, i32 0, i32 8, i32 0
  store i32 %1, i32* %3, align 4
  ret %"class.blink::SuggestionMarkerProperties::Builder"* %0
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i64 @_ZN3WTF18PartitionAllocator13QuantizedSizeINS_6StringEEEmm(i64) local_unnamed_addr #0 comdat align 2 {
  %2 = alloca %"class.logging::CheckOpResult", align 8
  %3 = alloca %"class.logging::CheckOpResult", align 8
  %4 = alloca %"class.logging::CheckError", align 8
  %5 = bitcast %"class.logging::CheckOpResult"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %5) #7
  %6 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %3, i64 0, i32 0
  store i8* inttoptr (i64 -6148914691236517206 to i8*), i8** %6, align 8
  %7 = bitcast %"class.logging::CheckOpResult"* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %7)
  %8 = icmp ugt i64 %0, 268173312
  br i1 %8, label %10, label %9

9:                                                ; preds = %1
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %7)
  store i8* null, i8** %6, align 8
  br label %19

10:                                               ; preds = %1
  %11 = tail call i8* @_ZN7logging15CheckOpValueStrEm(i64 %0) #7
  %12 = tail call i8* @_ZN7logging15CheckOpValueStrEm(i64 268173312) #7
  call void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"* nonnull %2, i8* getelementptr inbounds ([44 x i8], [44 x i8]* @.str, i64 0, i64 0), i8* %11, i8* %12) #7
  %13 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %2, i64 0, i32 0
  %14 = load i8*, i8** %13, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %7)
  store i8* %14, i8** %6, align 8
  %15 = icmp eq i8* %14, null
  br i1 %15, label %19, label %16

16:                                               ; preds = %10
  %17 = bitcast %"class.logging::CheckError"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %17) #7
  call void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* nonnull sret %4, i8* getelementptr inbounds ([78 x i8], [78 x i8]* @.str.1, i64 0, i64 0), i32 31, %"class.logging::CheckOpResult"* nonnull %3) #7
  %18 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %4) #7
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %4) #7
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %17) #7
  br label %19

19:                                               ; preds = %9, %10, %16
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %5) #7
  %20 = shl i64 %0, 3
  %21 = call i64 @_ZN3WTF10Partitions23BufferPotentialCapacityEm(i64 %20) #7
  ret i64 %21
}

declare void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* sret, i8*, i32, %"class.logging::CheckOpResult"*) local_unnamed_addr #3

declare dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"*) local_unnamed_addr #3

; Function Attrs: nounwind
declare void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"*) unnamed_addr #4

declare i64 @_ZN3WTF10Partitions23BufferPotentialCapacityEm(i64) local_unnamed_addr #3

declare i8* @_ZN7logging15CheckOpValueStrEm(i64) local_unnamed_addr #3

declare void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"*, i8*, i8*, i8*) unnamed_addr #3

declare i8* @_ZN3WTF18PartitionAllocator15AllocateBackingEmPKc(i64, i8*) local_unnamed_addr #3

; Function Attrs: nounwind readnone speculatable
declare { i33, i1 } @llvm.sadd.with.overflow.i33(i33, i33) #5

; Function Attrs: cold noreturn nounwind
declare void @llvm.trap() #6

declare void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"*) local_unnamed_addr #3

declare void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8*) local_unnamed_addr #3

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { nofree norecurse nounwind ssp uwtable writeonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind readnone speculatable }
attributes #6 = { cold noreturn nounwind }
attributes #7 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{!"branch_weights", i32 1, i32 2000}
!3 = !{!"branch_weights", i32 2000, i32 1}
