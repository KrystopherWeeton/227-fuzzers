; ModuleID = '../../third_party/icu/source/common/ucnv_u8.cpp'
source_filename = "../../third_party/icu/source/common/ucnv_u8.cpp"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.UConverterSharedData = type { i32, i32, i8*, %struct.UConverterStaticData*, i8, i8, %struct.UConverterImpl*, i32, %struct.UConverterMBCSTable }
%struct.UConverterStaticData = type { i32, [60 x i8], i32, i8, i8, i8, i8, [4 x i8], i8, i8, i8, i8, i8, [19 x i8] }
%struct.UConverterImpl = type { i32, void (%struct.UConverterSharedData*, %struct.UConverterLoadArgs*, i8*, i32*)*, void (%struct.UConverterSharedData*)*, void (%struct.UConverter*, %struct.UConverterLoadArgs*, i32*)*, void (%struct.UConverter*)*, void (%struct.UConverter*, i32)*, void (%struct.UConverterToUnicodeArgs*, i32*)*, void (%struct.UConverterToUnicodeArgs*, i32*)*, {}*, {}*, i32 (%struct.UConverterToUnicodeArgs*, i32*)*, void (%struct.UConverter*, i8*, i32*)*, i8* (%struct.UConverter*)*, void (%struct.UConverterFromUnicodeArgs*, i32, i32*)*, %struct.UConverter* (%struct.UConverter*, i8*, i32*, i32*)*, void (%struct.UConverter*, %struct.USetAdder*, i32, i32*)*, void (%struct.UConverterFromUnicodeArgs*, %struct.UConverterToUnicodeArgs*, i32*)*, void (%struct.UConverterFromUnicodeArgs*, %struct.UConverterToUnicodeArgs*, i32*)* }
%struct.UConverterLoadArgs = type { i32, i32, i8, i8, i16, i32, i8*, i8*, i8* }
%struct.UConverter = type { void (i8*, %struct.UConverterFromUnicodeArgs*, i16*, i32, i32, i32, i32*)*, void (i8*, %struct.UConverterToUnicodeArgs*, i8*, i32, i32, i32*)*, i8*, i8*, i8*, i8*, %struct.UConverterSharedData*, i32, i8, i8, i8, i8, i8, [7 x i8], i32, i32, i32, i32, i8, i8, i8, i8, i8, i8, i8, i8, [8 x i8], [32 x i8], [2 x i16], [2 x i16], [32 x i16], i32, [19 x i16], [31 x i8], i8, i8, i8, i32 }
%struct.UConverterFromUnicodeArgs = type { i16, i8, %struct.UConverter*, i16*, i16*, i8*, i8*, i32* }
%struct.UConverterToUnicodeArgs = type { i16, i8, %struct.UConverter*, i8*, i8*, i16*, i16*, i32* }
%struct.USetAdder = type { %struct.USet*, void (%struct.USet*, i32)*, void (%struct.USet*, i32, i32)*, void (%struct.USet*, i16*, i32)*, void (%struct.USet*, i32)*, void (%struct.USet*, i32, i32)* }
%struct.USet = type opaque
%struct.UConverterMBCSTable = type { i8, i8, i8, i32, [256 x i32]*, [256 x i32]*, i16*, %struct._MBCSToUFallback*, i16*, i16*, [64 x i16], i8*, i8*, i32, i8, i8, i8, i16, i32, i8*, i8*, %struct.UConverterSharedData*, i32* }
%struct._MBCSToUFallback = type { i32, i32 }

@_UTF8Data_69 = hidden local_unnamed_addr constant %struct.UConverterSharedData { i32 296, i32 -1, i8* null, %struct.UConverterStaticData* bitcast ({ i32, <{ i8, i8, i8, i8, i8, [55 x i8] }>, i32, i8, i8, i8, i8, [4 x i8], i8, i8, i8, i8, i8, [19 x i8] }* @_ZL15_UTF8StaticData to %struct.UConverterStaticData*), i8 0, i8 0, %struct.UConverterImpl* bitcast ({ i32, void (%struct.UConverterSharedData*, %struct.UConverterLoadArgs*, i8*, i32*)*, void (%struct.UConverterSharedData*)*, void (%struct.UConverter*, %struct.UConverterLoadArgs*, i32*)*, void (%struct.UConverter*)*, void (%struct.UConverter*, i32)*, void (%struct.UConverterToUnicodeArgs*, i32*)*, void (%struct.UConverterToUnicodeArgs*, i32*)*, void (%struct.UConverterFromUnicodeArgs*, i32*)*, void (%struct.UConverterFromUnicodeArgs*, i32*)*, i32 (%struct.UConverterToUnicodeArgs*, i32*)*, void (%struct.UConverter*, i8*, i32*)*, i8* (%struct.UConverter*)*, void (%struct.UConverterFromUnicodeArgs*, i32, i32*)*, %struct.UConverter* (%struct.UConverter*, i8*, i32*, i32*)*, void (%struct.UConverter*, %struct.USetAdder*, i32, i32*)*, void (%struct.UConverterFromUnicodeArgs*, %struct.UConverterToUnicodeArgs*, i32*)*, void (%struct.UConverterFromUnicodeArgs*, %struct.UConverterToUnicodeArgs*, i32*)* }* @_ZL9_UTF8Impl to %struct.UConverterImpl*), i32 0, %struct.UConverterMBCSTable zeroinitializer }, align 8
@_CESU8Data_69 = hidden local_unnamed_addr constant %struct.UConverterSharedData { i32 296, i32 -1, i8* null, %struct.UConverterStaticData* bitcast ({ i32, <{ i8, i8, i8, i8, i8, i8, [54 x i8] }>, i32, i8, i8, i8, i8, [4 x i8], i8, i8, i8, i8, i8, [19 x i8] }* @_ZL16_CESU8StaticData to %struct.UConverterStaticData*), i8 0, i8 0, %struct.UConverterImpl* bitcast ({ i32, void (%struct.UConverterSharedData*, %struct.UConverterLoadArgs*, i8*, i32*)*, void (%struct.UConverterSharedData*)*, void (%struct.UConverter*, %struct.UConverterLoadArgs*, i32*)*, void (%struct.UConverter*)*, void (%struct.UConverter*, i32)*, void (%struct.UConverterToUnicodeArgs*, i32*)*, void (%struct.UConverterToUnicodeArgs*, i32*)*, void (%struct.UConverterFromUnicodeArgs*, i32*)*, void (%struct.UConverterFromUnicodeArgs*, i32*)*, i32 (%struct.UConverterToUnicodeArgs*, i32*)*, void (%struct.UConverter*, i8*, i32*)*, i8* (%struct.UConverter*)*, void (%struct.UConverterFromUnicodeArgs*, i32, i32*)*, %struct.UConverter* (%struct.UConverter*, i8*, i32*, i32*)*, void (%struct.UConverter*, %struct.USetAdder*, i32, i32*)*, void (%struct.UConverterFromUnicodeArgs*, %struct.UConverterToUnicodeArgs*, i32*)*, void (%struct.UConverterFromUnicodeArgs*, %struct.UConverterToUnicodeArgs*, i32*)* }* @_ZL10_CESU8Impl to %struct.UConverterImpl*), i32 0, %struct.UConverterMBCSTable zeroinitializer }, align 8
@_ZL15_UTF8StaticData = internal constant { i32, <{ i8, i8, i8, i8, i8, [55 x i8] }>, i32, i8, i8, i8, i8, [4 x i8], i8, i8, i8, i8, i8, [19 x i8] } { i32 100, <{ i8, i8, i8, i8, i8, [55 x i8] }> <{ i8 85, i8 84, i8 70, i8 45, i8 56, [55 x i8] zeroinitializer }>, i32 1208, i8 0, i8 4, i8 1, i8 3, [4 x i8] c"\EF\BF\BD\00", i8 3, i8 0, i8 0, i8 0, i8 0, [19 x i8] zeroinitializer }, align 4
@_ZL9_UTF8Impl = internal constant { i32, void (%struct.UConverterSharedData*, %struct.UConverterLoadArgs*, i8*, i32*)*, void (%struct.UConverterSharedData*)*, void (%struct.UConverter*, %struct.UConverterLoadArgs*, i32*)*, void (%struct.UConverter*)*, void (%struct.UConverter*, i32)*, void (%struct.UConverterToUnicodeArgs*, i32*)*, void (%struct.UConverterToUnicodeArgs*, i32*)*, void (%struct.UConverterFromUnicodeArgs*, i32*)*, void (%struct.UConverterFromUnicodeArgs*, i32*)*, i32 (%struct.UConverterToUnicodeArgs*, i32*)*, void (%struct.UConverter*, i8*, i32*)*, i8* (%struct.UConverter*)*, void (%struct.UConverterFromUnicodeArgs*, i32, i32*)*, %struct.UConverter* (%struct.UConverter*, i8*, i32*, i32*)*, void (%struct.UConverter*, %struct.USetAdder*, i32, i32*)*, void (%struct.UConverterFromUnicodeArgs*, %struct.UConverterToUnicodeArgs*, i32*)*, void (%struct.UConverterFromUnicodeArgs*, %struct.UConverterToUnicodeArgs*, i32*)* } { i32 4, void (%struct.UConverterSharedData*, %struct.UConverterLoadArgs*, i8*, i32*)* null, void (%struct.UConverterSharedData*)* null, void (%struct.UConverter*, %struct.UConverterLoadArgs*, i32*)* null, void (%struct.UConverter*)* null, void (%struct.UConverter*, i32)* null, void (%struct.UConverterToUnicodeArgs*, i32*)* @_ZL19ucnv_toUnicode_UTF8P23UConverterToUnicodeArgsP10UErrorCode, void (%struct.UConverterToUnicodeArgs*, i32*)* @_ZL33ucnv_toUnicode_UTF8_OFFSETS_LOGICP23UConverterToUnicodeArgsP10UErrorCode, void (%struct.UConverterFromUnicodeArgs*, i32*)* @ucnv_fromUnicode_UTF8_69, void (%struct.UConverterFromUnicodeArgs*, i32*)* @ucnv_fromUnicode_UTF8_OFFSETS_LOGIC_69, i32 (%struct.UConverterToUnicodeArgs*, i32*)* @_ZL22ucnv_getNextUChar_UTF8P23UConverterToUnicodeArgsP10UErrorCode, void (%struct.UConverter*, i8*, i32*)* null, i8* (%struct.UConverter*)* null, void (%struct.UConverterFromUnicodeArgs*, i32, i32*)* null, %struct.UConverter* (%struct.UConverter*, i8*, i32*, i32*)* null, void (%struct.UConverter*, %struct.USetAdder*, i32, i32*)* @ucnv_getNonSurrogateUnicodeSet_69, void (%struct.UConverterFromUnicodeArgs*, %struct.UConverterToUnicodeArgs*, i32*)* @_ZL17ucnv_UTF8FromUTF8P25UConverterFromUnicodeArgsP23UConverterToUnicodeArgsP10UErrorCode, void (%struct.UConverterFromUnicodeArgs*, %struct.UConverterToUnicodeArgs*, i32*)* @_ZL17ucnv_UTF8FromUTF8P25UConverterFromUnicodeArgsP23UConverterToUnicodeArgsP10UErrorCode }, align 8
@_ZL15offsetsFromUTF8 = internal unnamed_addr constant [5 x i32] [i32 0, i32 0, i32 12416, i32 925824, i32 63447168], align 16
@.str = private unnamed_addr constant [17 x i8] c" 000000000000\1000\00", align 1
@.str.3 = private unnamed_addr constant [17 x i8] c"\00\00\00\00\00\00\00\00\1E\0F\0F\0F\00\00\00\00\00", align 1
@_ZL16_CESU8StaticData = internal constant { i32, <{ i8, i8, i8, i8, i8, i8, [54 x i8] }>, i32, i8, i8, i8, i8, [4 x i8], i8, i8, i8, i8, i8, [19 x i8] } { i32 100, <{ i8, i8, i8, i8, i8, i8, [54 x i8] }> <{ i8 67, i8 69, i8 83, i8 85, i8 45, i8 56, [54 x i8] zeroinitializer }>, i32 9400, i8 -1, i8 31, i8 1, i8 3, [4 x i8] c"\EF\BF\BD\00", i8 3, i8 0, i8 0, i8 0, i8 0, [19 x i8] zeroinitializer }, align 4
@_ZL10_CESU8Impl = internal constant { i32, void (%struct.UConverterSharedData*, %struct.UConverterLoadArgs*, i8*, i32*)*, void (%struct.UConverterSharedData*)*, void (%struct.UConverter*, %struct.UConverterLoadArgs*, i32*)*, void (%struct.UConverter*)*, void (%struct.UConverter*, i32)*, void (%struct.UConverterToUnicodeArgs*, i32*)*, void (%struct.UConverterToUnicodeArgs*, i32*)*, void (%struct.UConverterFromUnicodeArgs*, i32*)*, void (%struct.UConverterFromUnicodeArgs*, i32*)*, i32 (%struct.UConverterToUnicodeArgs*, i32*)*, void (%struct.UConverter*, i8*, i32*)*, i8* (%struct.UConverter*)*, void (%struct.UConverterFromUnicodeArgs*, i32, i32*)*, %struct.UConverter* (%struct.UConverter*, i8*, i32*, i32*)*, void (%struct.UConverter*, %struct.USetAdder*, i32, i32*)*, void (%struct.UConverterFromUnicodeArgs*, %struct.UConverterToUnicodeArgs*, i32*)*, void (%struct.UConverterFromUnicodeArgs*, %struct.UConverterToUnicodeArgs*, i32*)* } { i32 31, void (%struct.UConverterSharedData*, %struct.UConverterLoadArgs*, i8*, i32*)* null, void (%struct.UConverterSharedData*)* null, void (%struct.UConverter*, %struct.UConverterLoadArgs*, i32*)* null, void (%struct.UConverter*)* null, void (%struct.UConverter*, i32)* null, void (%struct.UConverterToUnicodeArgs*, i32*)* @_ZL19ucnv_toUnicode_UTF8P23UConverterToUnicodeArgsP10UErrorCode, void (%struct.UConverterToUnicodeArgs*, i32*)* @_ZL33ucnv_toUnicode_UTF8_OFFSETS_LOGICP23UConverterToUnicodeArgsP10UErrorCode, void (%struct.UConverterFromUnicodeArgs*, i32*)* @ucnv_fromUnicode_UTF8_69, void (%struct.UConverterFromUnicodeArgs*, i32*)* @ucnv_fromUnicode_UTF8_OFFSETS_LOGIC_69, i32 (%struct.UConverterToUnicodeArgs*, i32*)* null, void (%struct.UConverter*, i8*, i32*)* null, i8* (%struct.UConverter*)* null, void (%struct.UConverterFromUnicodeArgs*, i32, i32*)* null, %struct.UConverter* (%struct.UConverter*, i8*, i32*, i32*)* null, void (%struct.UConverter*, %struct.USetAdder*, i32, i32*)* @ucnv_getCompleteUnicodeSet_69, void (%struct.UConverterFromUnicodeArgs*, %struct.UConverterToUnicodeArgs*, i32*)* null, void (%struct.UConverterFromUnicodeArgs*, %struct.UConverterToUnicodeArgs*, i32*)* null }, align 8

; Function Attrs: nounwind ssp uwtable
define hidden void @ucnv_fromUnicode_UTF8_69(%struct.UConverterFromUnicodeArgs* nocapture, i32* nocapture) #0 {
  %3 = alloca i32, align 4
  %4 = bitcast i32* %3 to [4 x i8]*
  %5 = getelementptr inbounds %struct.UConverterFromUnicodeArgs, %struct.UConverterFromUnicodeArgs* %0, i64 0, i32 2
  %6 = load %struct.UConverter*, %struct.UConverter** %5, align 8
  %7 = getelementptr inbounds %struct.UConverterFromUnicodeArgs, %struct.UConverterFromUnicodeArgs* %0, i64 0, i32 3
  %8 = load i16*, i16** %7, align 8
  %9 = getelementptr inbounds %struct.UConverterFromUnicodeArgs, %struct.UConverterFromUnicodeArgs* %0, i64 0, i32 4
  %10 = load i16*, i16** %9, align 8
  %11 = getelementptr inbounds %struct.UConverterFromUnicodeArgs, %struct.UConverterFromUnicodeArgs* %0, i64 0, i32 5
  %12 = load i8*, i8** %11, align 8
  %13 = getelementptr inbounds %struct.UConverterFromUnicodeArgs, %struct.UConverterFromUnicodeArgs* %0, i64 0, i32 6
  %14 = load i8*, i8** %13, align 8
  %15 = bitcast i32* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %15) #4
  %16 = getelementptr inbounds %struct.UConverter, %struct.UConverter* %6, i64 0, i32 17
  store i32 -1431655766, i32* %3, align 4
  %17 = load i32, i32* %16, align 4
  %18 = icmp ne i32 %17, 0
  %19 = icmp ult i8* %12, %14
  %20 = and i1 %19, %18
  br i1 %20, label %21, label %122

21:                                               ; preds = %2
  store i32 0, i32* %16, align 4
  br label %55

22:                                               ; preds = %49, %122
  %23 = phi i16* [ %123, %122 ], [ %29, %49 ]
  %24 = phi i8* [ %124, %122 ], [ %50, %49 ]
  %25 = icmp ult i16* %23, %10
  %26 = icmp ult i8* %24, %14
  %27 = and i1 %25, %26
  br i1 %27, label %28, label %143

28:                                               ; preds = %22
  %29 = getelementptr inbounds i16, i16* %23, i64 1
  %30 = load i16, i16* %23, align 2
  %31 = icmp ult i16 %30, 128
  br i1 %31, label %32, label %35

32:                                               ; preds = %28
  %33 = trunc i16 %30 to i8
  %34 = getelementptr inbounds i8, i8* %24, i64 1
  store i8 %33, i8* %24, align 1
  br label %49

35:                                               ; preds = %28
  %36 = icmp ult i16 %30, 2048
  br i1 %36, label %37, label %51

37:                                               ; preds = %35
  %38 = lshr i16 %30, 6
  %39 = trunc i16 %38 to i8
  %40 = or i8 %39, -64
  %41 = getelementptr inbounds i8, i8* %24, i64 1
  store i8 %40, i8* %24, align 1
  %42 = icmp ult i8* %41, %14
  %43 = trunc i16 %30 to i8
  %44 = and i8 %43, 63
  %45 = or i8 %44, -128
  br i1 %42, label %46, label %48

46:                                               ; preds = %37
  %47 = getelementptr inbounds i8, i8* %24, i64 2
  store i8 %45, i8* %41, align 1
  br label %49

48:                                               ; preds = %37
  store i8 %45, i8* %125, align 8
  store i8 1, i8* %126, align 1
  store i32 15, i32* %1, align 4
  br label %49

49:                                               ; preds = %48, %46, %32
  %50 = phi i8* [ %34, %32 ], [ %41, %48 ], [ %47, %46 ]
  br label %22

51:                                               ; preds = %35
  %52 = zext i16 %30 to i32
  %53 = and i32 %52, 63488
  %54 = icmp eq i32 %53, 55296
  br i1 %54, label %55, label %75

55:                                               ; preds = %51, %21
  %56 = phi i16* [ %8, %21 ], [ %29, %51 ]
  %57 = phi i8* [ %12, %21 ], [ %24, %51 ]
  %58 = phi i32 [ %17, %21 ], [ %52, %51 ]
  %59 = icmp ult i16* %56, %10
  br i1 %59, label %60, label %74

60:                                               ; preds = %55
  %61 = and i32 %58, 1024
  %62 = icmp eq i32 %61, 0
  br i1 %62, label %63, label %73

63:                                               ; preds = %60
  %64 = load i16, i16* %56, align 2
  %65 = zext i16 %64 to i32
  %66 = and i32 %65, 64512
  %67 = icmp eq i32 %66, 56320
  br i1 %67, label %68, label %73

68:                                               ; preds = %63
  %69 = shl i32 %58, 10
  %70 = add i32 %69, -56613888
  %71 = add i32 %70, %65
  %72 = getelementptr inbounds i16, i16* %56, i64 1
  br label %75

73:                                               ; preds = %63, %60
  store i32 %58, i32* %16, align 4
  store i32 12, i32* %1, align 4
  br label %143

74:                                               ; preds = %55
  store i32 %58, i32* %16, align 4
  br label %143

75:                                               ; preds = %68, %51
  %76 = phi i16* [ %72, %68 ], [ %29, %51 ]
  %77 = phi i8* [ %57, %68 ], [ %24, %51 ]
  %78 = phi i32 [ %71, %68 ], [ %52, %51 ]
  %79 = ptrtoint i8* %14 to i64
  %80 = ptrtoint i8* %77 to i64
  %81 = sub i64 %79, %80
  %82 = icmp sgt i64 %81, 3
  %83 = select i1 %82, i8* %77, i8* %15
  %84 = icmp slt i32 %78, 65536
  br i1 %84, label %85, label %89

85:                                               ; preds = %75
  %86 = lshr i32 %78, 12
  %87 = trunc i32 %86 to i8
  %88 = or i8 %87, -32
  store i8 %88, i8* %83, align 1
  br label %98

89:                                               ; preds = %75
  %90 = lshr i32 %78, 18
  %91 = trunc i32 %90 to i8
  %92 = or i8 %91, -16
  store i8 %92, i8* %83, align 1
  %93 = lshr i32 %78, 12
  %94 = trunc i32 %93 to i8
  %95 = and i8 %94, 63
  %96 = or i8 %95, -128
  %97 = getelementptr inbounds i8, i8* %83, i64 1
  store i8 %96, i8* %97, align 1
  br label %98

98:                                               ; preds = %89, %85
  %99 = phi i32 [ 2, %85 ], [ 3, %89 ]
  %100 = lshr i32 %78, 6
  %101 = trunc i32 %100 to i8
  %102 = and i8 %101, 63
  %103 = or i8 %102, -128
  %104 = add nsw i32 %99, -1
  %105 = zext i32 %104 to i64
  %106 = getelementptr inbounds i8, i8* %83, i64 %105
  store i8 %103, i8* %106, align 1
  %107 = trunc i32 %78 to i8
  %108 = and i8 %107, 63
  %109 = or i8 %108, -128
  %110 = zext i32 %99 to i64
  %111 = getelementptr inbounds i8, i8* %83, i64 %110
  store i8 %109, i8* %111, align 1
  %112 = icmp eq i8* %83, %77
  br i1 %112, label %118, label %113

113:                                              ; preds = %98
  %114 = getelementptr inbounds [4 x i8], [4 x i8]* %4, i64 0, i64 %110
  %115 = icmp ugt i8* %83, %114
  br i1 %115, label %122, label %116

116:                                              ; preds = %113
  %117 = getelementptr inbounds %struct.UConverter, %struct.UConverter* %6, i64 0, i32 21
  br label %127

118:                                              ; preds = %98
  %119 = add nuw nsw i32 %99, 1
  %120 = zext i32 %119 to i64
  %121 = getelementptr inbounds i8, i8* %77, i64 %120
  br label %122

122:                                              ; preds = %139, %2, %113, %118
  %123 = phi i16* [ %76, %113 ], [ %76, %118 ], [ %8, %2 ], [ %76, %139 ]
  %124 = phi i8* [ %77, %113 ], [ %121, %118 ], [ %12, %2 ], [ %140, %139 ]
  %125 = getelementptr inbounds %struct.UConverter, %struct.UConverter* %6, i64 0, i32 27, i64 0
  %126 = getelementptr inbounds %struct.UConverter, %struct.UConverter* %6, i64 0, i32 21
  br label %22

127:                                              ; preds = %116, %139
  %128 = phi i8* [ %83, %116 ], [ %141, %139 ]
  %129 = phi i8* [ %77, %116 ], [ %140, %139 ]
  %130 = icmp ult i8* %129, %14
  %131 = load i8, i8* %128, align 1
  br i1 %130, label %132, label %134

132:                                              ; preds = %127
  %133 = getelementptr inbounds i8, i8* %129, i64 1
  store i8 %131, i8* %129, align 1
  br label %139

134:                                              ; preds = %127
  %135 = load i8, i8* %117, align 1
  %136 = add i8 %135, 1
  store i8 %136, i8* %117, align 1
  %137 = sext i8 %135 to i64
  %138 = getelementptr inbounds %struct.UConverter, %struct.UConverter* %6, i64 0, i32 27, i64 %137
  store i8 %131, i8* %138, align 1
  store i32 15, i32* %1, align 4
  br label %139

139:                                              ; preds = %132, %134
  %140 = phi i8* [ %133, %132 ], [ %129, %134 ]
  %141 = getelementptr inbounds i8, i8* %128, i64 1
  %142 = icmp ugt i8* %141, %114
  br i1 %142, label %122, label %127

143:                                              ; preds = %22, %74, %73
  %144 = phi i16* [ %56, %73 ], [ %56, %74 ], [ %23, %22 ]
  %145 = phi i8* [ %57, %73 ], [ %57, %74 ], [ %24, %22 ]
  %146 = icmp uge i16* %144, %10
  %147 = icmp ult i8* %145, %14
  %148 = or i1 %146, %147
  br i1 %148, label %153, label %149

149:                                              ; preds = %143
  %150 = load i32, i32* %1, align 4
  %151 = icmp sgt i32 %150, 0
  br i1 %151, label %153, label %152

152:                                              ; preds = %149
  store i32 15, i32* %1, align 4
  br label %153

153:                                              ; preds = %143, %149, %152
  store i8* %145, i8** %11, align 8
  store i16* %144, i16** %7, align 8
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %15) #4
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nounwind ssp uwtable
define hidden void @ucnv_fromUnicode_UTF8_OFFSETS_LOGIC_69(%struct.UConverterFromUnicodeArgs* nocapture, i32* nocapture) #0 {
  %3 = alloca i32, align 4
  %4 = bitcast i32* %3 to [4 x i8]*
  %5 = getelementptr inbounds %struct.UConverterFromUnicodeArgs, %struct.UConverterFromUnicodeArgs* %0, i64 0, i32 2
  %6 = load %struct.UConverter*, %struct.UConverter** %5, align 8
  %7 = getelementptr inbounds %struct.UConverterFromUnicodeArgs, %struct.UConverterFromUnicodeArgs* %0, i64 0, i32 3
  %8 = load i16*, i16** %7, align 8
  %9 = getelementptr inbounds %struct.UConverterFromUnicodeArgs, %struct.UConverterFromUnicodeArgs* %0, i64 0, i32 7
  %10 = load i32*, i32** %9, align 8
  %11 = getelementptr inbounds %struct.UConverterFromUnicodeArgs, %struct.UConverterFromUnicodeArgs* %0, i64 0, i32 4
  %12 = load i16*, i16** %11, align 8
  %13 = getelementptr inbounds %struct.UConverterFromUnicodeArgs, %struct.UConverterFromUnicodeArgs* %0, i64 0, i32 5
  %14 = load i8*, i8** %13, align 8
  %15 = getelementptr inbounds %struct.UConverterFromUnicodeArgs, %struct.UConverterFromUnicodeArgs* %0, i64 0, i32 6
  %16 = load i8*, i8** %15, align 8
  %17 = bitcast i32* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %17) #4
  %18 = getelementptr inbounds %struct.UConverter, %struct.UConverter* %6, i64 0, i32 17
  store i32 -1431655766, i32* %3, align 4
  %19 = load i32, i32* %18, align 4
  %20 = icmp ne i32 %19, 0
  %21 = icmp ult i8* %14, %16
  %22 = and i1 %21, %20
  br i1 %22, label %23, label %153

23:                                               ; preds = %2
  store i32 0, i32* %18, align 4
  br label %72

24:                                               ; preds = %43, %63
  %25 = phi i16* [ %32, %63 ], [ %44, %43 ]
  %26 = phi i32* [ %51, %63 ], [ %45, %43 ]
  %27 = phi i8* [ %55, %63 ], [ %46, %43 ]
  %28 = icmp ult i16* %25, %12
  %29 = icmp ult i8* %27, %16
  %30 = and i1 %28, %29
  br i1 %30, label %31, label %180

31:                                               ; preds = %24
  %32 = getelementptr inbounds i16, i16* %25, i64 1
  %33 = load i16, i16* %25, align 2
  %34 = icmp ult i16 %33, 128
  br i1 %34, label %35, label %48

35:                                               ; preds = %31
  %36 = getelementptr inbounds i32, i32* %26, i64 1
  store i32 %47, i32* %26, align 4
  %37 = trunc i16 %33 to i8
  %38 = getelementptr inbounds i8, i8* %27, i64 1
  store i8 %37, i8* %27, align 1
  br label %39

39:                                               ; preds = %35, %57
  %40 = phi i32* [ %58, %57 ], [ %36, %35 ]
  %41 = phi i8* [ %62, %57 ], [ %38, %35 ]
  %42 = add nsw i32 %47, 1
  br label %43

43:                                               ; preds = %39, %153
  %44 = phi i16* [ %154, %153 ], [ %32, %39 ]
  %45 = phi i32* [ %155, %153 ], [ %40, %39 ]
  %46 = phi i8* [ %156, %153 ], [ %41, %39 ]
  %47 = phi i32 [ %157, %153 ], [ %42, %39 ]
  br label %24

48:                                               ; preds = %31
  %49 = icmp ult i16 %33, 2048
  br i1 %49, label %50, label %67

50:                                               ; preds = %48
  %51 = getelementptr inbounds i32, i32* %26, i64 1
  store i32 %47, i32* %26, align 4
  %52 = lshr i16 %33, 6
  %53 = trunc i16 %52 to i8
  %54 = or i8 %53, -64
  %55 = getelementptr inbounds i8, i8* %27, i64 1
  store i8 %54, i8* %27, align 1
  %56 = icmp ult i8* %55, %16
  br i1 %56, label %57, label %63

57:                                               ; preds = %50
  %58 = getelementptr inbounds i32, i32* %26, i64 2
  store i32 %47, i32* %51, align 4
  %59 = trunc i16 %33 to i8
  %60 = and i8 %59, 63
  %61 = or i8 %60, -128
  %62 = getelementptr inbounds i8, i8* %27, i64 2
  store i8 %61, i8* %55, align 1
  br label %39

63:                                               ; preds = %50
  %64 = trunc i16 %33 to i8
  %65 = and i8 %64, 63
  %66 = or i8 %65, -128
  store i8 %66, i8* %158, align 8
  store i8 1, i8* %159, align 1
  store i32 15, i32* %1, align 4
  br label %24

67:                                               ; preds = %48
  %68 = zext i16 %33 to i32
  %69 = add nsw i32 %47, 1
  %70 = and i32 %68, 63488
  %71 = icmp eq i32 %70, 55296
  br i1 %71, label %72, label %96

72:                                               ; preds = %67, %23
  %73 = phi i16* [ %8, %23 ], [ %32, %67 ]
  %74 = phi i32* [ %10, %23 ], [ %26, %67 ]
  %75 = phi i8* [ %14, %23 ], [ %27, %67 ]
  %76 = phi i32 [ %19, %23 ], [ %68, %67 ]
  %77 = phi i32 [ -1, %23 ], [ %47, %67 ]
  %78 = phi i32 [ 0, %23 ], [ %69, %67 ]
  %79 = icmp ult i16* %73, %12
  br i1 %79, label %80, label %95

80:                                               ; preds = %72
  %81 = and i32 %76, 1024
  %82 = icmp eq i32 %81, 0
  br i1 %82, label %83, label %94

83:                                               ; preds = %80
  %84 = load i16, i16* %73, align 2
  %85 = zext i16 %84 to i32
  %86 = and i32 %85, 64512
  %87 = icmp eq i32 %86, 56320
  br i1 %87, label %88, label %94

88:                                               ; preds = %83
  %89 = shl i32 %76, 10
  %90 = add i32 %89, -56613888
  %91 = add i32 %90, %85
  %92 = getelementptr inbounds i16, i16* %73, i64 1
  %93 = add nsw i32 %78, 1
  br label %96

94:                                               ; preds = %83, %80
  store i32 %76, i32* %18, align 4
  store i32 12, i32* %1, align 4
  br label %180

95:                                               ; preds = %72
  store i32 %76, i32* %18, align 4
  br label %180

96:                                               ; preds = %88, %67
  %97 = phi i16* [ %92, %88 ], [ %32, %67 ]
  %98 = phi i32* [ %74, %88 ], [ %26, %67 ]
  %99 = phi i8* [ %75, %88 ], [ %27, %67 ]
  %100 = phi i32 [ %91, %88 ], [ %68, %67 ]
  %101 = phi i32 [ %77, %88 ], [ %47, %67 ]
  %102 = phi i32 [ %93, %88 ], [ %69, %67 ]
  %103 = ptrtoint i8* %16 to i64
  %104 = ptrtoint i8* %99 to i64
  %105 = sub i64 %103, %104
  %106 = icmp sgt i64 %105, 3
  %107 = select i1 %106, i8* %99, i8* %17
  %108 = icmp slt i32 %100, 65536
  br i1 %108, label %109, label %113

109:                                              ; preds = %96
  %110 = lshr i32 %100, 12
  %111 = trunc i32 %110 to i8
  %112 = or i8 %111, -32
  store i8 %112, i8* %107, align 1
  br label %122

113:                                              ; preds = %96
  %114 = lshr i32 %100, 18
  %115 = trunc i32 %114 to i8
  %116 = or i8 %115, -16
  store i8 %116, i8* %107, align 1
  %117 = lshr i32 %100, 12
  %118 = trunc i32 %117 to i8
  %119 = and i8 %118, 63
  %120 = or i8 %119, -128
  %121 = getelementptr inbounds i8, i8* %107, i64 1
  store i8 %120, i8* %121, align 1
  br label %122

122:                                              ; preds = %113, %109
  %123 = phi i32 [ 2, %109 ], [ 3, %113 ]
  %124 = lshr i32 %100, 6
  %125 = trunc i32 %124 to i8
  %126 = and i8 %125, 63
  %127 = or i8 %126, -128
  %128 = add nsw i32 %123, -1
  %129 = zext i32 %128 to i64
  %130 = getelementptr inbounds i8, i8* %107, i64 %129
  store i8 %127, i8* %130, align 1
  %131 = trunc i32 %100 to i8
  %132 = and i8 %131, 63
  %133 = or i8 %132, -128
  %134 = zext i32 %123 to i64
  %135 = getelementptr inbounds i8, i8* %107, i64 %134
  store i8 %133, i8* %135, align 1
  %136 = icmp eq i8* %107, %99
  br i1 %136, label %142, label %137

137:                                              ; preds = %122
  %138 = getelementptr inbounds [4 x i8], [4 x i8]* %4, i64 0, i64 %134
  %139 = icmp ugt i8* %107, %138
  br i1 %139, label %153, label %140

140:                                              ; preds = %137
  %141 = getelementptr inbounds %struct.UConverter, %struct.UConverter* %6, i64 0, i32 21
  br label %160

142:                                              ; preds = %122
  %143 = add nuw nsw i32 %123, 1
  %144 = zext i32 %143 to i64
  %145 = getelementptr inbounds i8, i8* %99, i64 %144
  store i32 %101, i32* %98, align 4
  %146 = getelementptr inbounds i32, i32* %98, i64 1
  store i32 %101, i32* %146, align 4
  %147 = getelementptr inbounds i32, i32* %98, i64 2
  store i32 %101, i32* %147, align 4
  %148 = icmp eq i32 %123, 2
  br i1 %148, label %151, label %149

149:                                              ; preds = %142
  %150 = getelementptr inbounds i32, i32* %98, i64 3
  store i32 %101, i32* %150, align 4
  br label %151

151:                                              ; preds = %142, %149
  %152 = getelementptr inbounds i32, i32* %98, i64 %144
  br label %153

153:                                              ; preds = %175, %2, %137, %151
  %154 = phi i16* [ %97, %137 ], [ %97, %151 ], [ %8, %2 ], [ %97, %175 ]
  %155 = phi i32* [ %98, %137 ], [ %152, %151 ], [ %10, %2 ], [ %176, %175 ]
  %156 = phi i8* [ %99, %137 ], [ %145, %151 ], [ %14, %2 ], [ %177, %175 ]
  %157 = phi i32 [ %102, %137 ], [ %102, %151 ], [ 0, %2 ], [ %102, %175 ]
  %158 = getelementptr inbounds %struct.UConverter, %struct.UConverter* %6, i64 0, i32 27, i64 0
  %159 = getelementptr inbounds %struct.UConverter, %struct.UConverter* %6, i64 0, i32 21
  br label %43

160:                                              ; preds = %140, %175
  %161 = phi i8* [ %107, %140 ], [ %178, %175 ]
  %162 = phi i8* [ %99, %140 ], [ %177, %175 ]
  %163 = phi i32* [ %98, %140 ], [ %176, %175 ]
  %164 = icmp ult i8* %162, %16
  br i1 %164, label %165, label %169

165:                                              ; preds = %160
  %166 = getelementptr inbounds i32, i32* %163, i64 1
  store i32 %101, i32* %163, align 4
  %167 = load i8, i8* %161, align 1
  %168 = getelementptr inbounds i8, i8* %162, i64 1
  store i8 %167, i8* %162, align 1
  br label %175

169:                                              ; preds = %160
  %170 = load i8, i8* %161, align 1
  %171 = load i8, i8* %141, align 1
  %172 = add i8 %171, 1
  store i8 %172, i8* %141, align 1
  %173 = sext i8 %171 to i64
  %174 = getelementptr inbounds %struct.UConverter, %struct.UConverter* %6, i64 0, i32 27, i64 %173
  store i8 %170, i8* %174, align 1
  store i32 15, i32* %1, align 4
  br label %175

175:                                              ; preds = %165, %169
  %176 = phi i32* [ %166, %165 ], [ %163, %169 ]
  %177 = phi i8* [ %168, %165 ], [ %162, %169 ]
  %178 = getelementptr inbounds i8, i8* %161, i64 1
  %179 = icmp ugt i8* %178, %138
  br i1 %179, label %153, label %160

180:                                              ; preds = %24, %95, %94
  %181 = phi i16* [ %73, %94 ], [ %73, %95 ], [ %25, %24 ]
  %182 = phi i32* [ %74, %94 ], [ %74, %95 ], [ %26, %24 ]
  %183 = phi i8* [ %75, %94 ], [ %75, %95 ], [ %27, %24 ]
  %184 = icmp uge i16* %181, %12
  %185 = icmp ult i8* %183, %16
  %186 = or i1 %184, %185
  br i1 %186, label %191, label %187

187:                                              ; preds = %180
  %188 = load i32, i32* %1, align 4
  %189 = icmp sgt i32 %188, 0
  br i1 %189, label %191, label %190

190:                                              ; preds = %187
  store i32 15, i32* %1, align 4
  br label %191

191:                                              ; preds = %180, %187, %190
  store i8* %183, i8** %13, align 8
  store i16* %181, i16** %7, align 8
  store i32* %182, i32** %9, align 8
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %17) #4
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal void @_ZL19ucnv_toUnicode_UTF8P23UConverterToUnicodeArgsP10UErrorCode(%struct.UConverterToUnicodeArgs* nocapture, i32* nocapture) #2 {
  %3 = getelementptr inbounds %struct.UConverterToUnicodeArgs, %struct.UConverterToUnicodeArgs* %0, i64 0, i32 2
  %4 = load %struct.UConverter*, %struct.UConverter** %3, align 8
  %5 = getelementptr inbounds %struct.UConverterToUnicodeArgs, %struct.UConverterToUnicodeArgs* %0, i64 0, i32 3
  %6 = load i8*, i8** %5, align 8
  %7 = getelementptr inbounds %struct.UConverterToUnicodeArgs, %struct.UConverterToUnicodeArgs* %0, i64 0, i32 5
  %8 = load i16*, i16** %7, align 8
  %9 = getelementptr inbounds %struct.UConverterToUnicodeArgs, %struct.UConverterToUnicodeArgs* %0, i64 0, i32 4
  %10 = load i8*, i8** %9, align 8
  %11 = getelementptr inbounds %struct.UConverterToUnicodeArgs, %struct.UConverterToUnicodeArgs* %0, i64 0, i32 6
  %12 = load i16*, i16** %11, align 8
  %13 = getelementptr inbounds %struct.UConverter, %struct.UConverter* %4, i64 0, i32 13, i64 0
  %14 = getelementptr inbounds %struct.UConverter, %struct.UConverter* %4, i64 0, i32 12
  %15 = load i8, i8* %14, align 8
  %16 = icmp sgt i8 %15, 0
  %17 = icmp ult i16* %8, %12
  %18 = and i1 %17, %16
  br i1 %18, label %19, label %125

19:                                               ; preds = %2
  %20 = sext i8 %15 to i32
  %21 = getelementptr inbounds %struct.UConverter, %struct.UConverter* %4, i64 0, i32 15
  %22 = load i32, i32* %21, align 4
  store i8 0, i8* %14, align 8
  %23 = getelementptr inbounds %struct.UConverter, %struct.UConverter* %4, i64 0, i32 14
  %24 = load i32, i32* %23, align 8
  store i32 0, i32* %23, align 8
  br label %48

25:                                               ; preds = %125, %35
  %26 = phi i8* [ %32, %35 ], [ %126, %125 ]
  %27 = phi i16* [ %37, %35 ], [ %127, %125 ]
  %28 = icmp ult i8* %26, %10
  %29 = icmp ult i16* %27, %12
  %30 = and i1 %28, %29
  br i1 %30, label %31, label %144

31:                                               ; preds = %25
  %32 = getelementptr inbounds i8, i8* %26, i64 1
  %33 = load i8, i8* %26, align 1
  %34 = icmp sgt i8 %33, -1
  br i1 %34, label %35, label %38

35:                                               ; preds = %31
  %36 = zext i8 %33 to i16
  %37 = getelementptr inbounds i16, i16* %27, i64 1
  store i16 %36, i16* %27, align 2
  br label %25

38:                                               ; preds = %31
  %39 = zext i8 %33 to i32
  store i8 %33, i8* %13, align 1
  %40 = add nsw i8 %33, 62
  %41 = icmp ult i8 %40, 51
  br i1 %41, label %42, label %48

42:                                               ; preds = %38
  %43 = icmp ugt i8 %33, -33
  %44 = zext i1 %43 to i32
  %45 = icmp ugt i8 %33, -17
  %46 = select i1 %45, i32 3, i32 2
  %47 = add nuw nsw i32 %46, %44
  br label %48

48:                                               ; preds = %42, %38, %19
  %49 = phi i8* [ %6, %19 ], [ %32, %38 ], [ %32, %42 ]
  %50 = phi i16* [ %8, %19 ], [ %27, %38 ], [ %27, %42 ]
  %51 = phi i32 [ %24, %19 ], [ %39, %38 ], [ %39, %42 ]
  %52 = phi i32 [ %20, %19 ], [ 1, %38 ], [ 1, %42 ]
  %53 = phi i32 [ %22, %19 ], [ 0, %38 ], [ %47, %42 ]
  %54 = icmp slt i32 %52, %53
  br i1 %54, label %55, label %111

55:                                               ; preds = %48
  %56 = icmp slt i32 %53, 3
  %57 = icmp eq i32 %53, 3
  %58 = sext i32 %52 to i64
  br label %59

59:                                               ; preds = %96, %55
  %60 = phi i64 [ %58, %55 ], [ %101, %96 ]
  %61 = phi i32 [ %52, %55 ], [ %102, %96 ]
  %62 = phi i32 [ %51, %55 ], [ %99, %96 ]
  %63 = phi i8* [ %49, %55 ], [ %100, %96 ]
  %64 = icmp ult i8* %63, %10
  br i1 %64, label %65, label %105

65:                                               ; preds = %59
  %66 = load i8, i8* %63, align 1
  %67 = getelementptr inbounds %struct.UConverter, %struct.UConverter* %4, i64 0, i32 13, i64 %60
  store i8 %66, i8* %67, align 1
  %68 = icmp sgt i64 %60, 1
  %69 = or i1 %56, %68
  br i1 %69, label %70, label %73

70:                                               ; preds = %65
  %71 = icmp slt i8 %66, -64
  %72 = zext i1 %71 to i8
  br label %93

73:                                               ; preds = %65
  br i1 %57, label %74, label %84

74:                                               ; preds = %73
  %75 = and i32 %62, 15
  %76 = zext i32 %75 to i64
  %77 = getelementptr inbounds [17 x i8], [17 x i8]* @.str, i64 0, i64 %76
  %78 = load i8, i8* %77, align 1
  %79 = lshr i8 %66, 5
  %80 = zext i8 %79 to i32
  %81 = shl i32 1, %80
  %82 = trunc i32 %81 to i8
  %83 = and i8 %78, %82
  br label %93

84:                                               ; preds = %73
  %85 = lshr i8 %66, 4
  %86 = zext i8 %85 to i64
  %87 = getelementptr inbounds [17 x i8], [17 x i8]* @.str.3, i64 0, i64 %86
  %88 = load i8, i8* %87, align 1
  %89 = and i32 %62, 7
  %90 = shl i32 1, %89
  %91 = trunc i32 %90 to i8
  %92 = and i8 %88, %91
  br label %93

93:                                               ; preds = %70, %74, %84
  %94 = phi i8 [ %72, %70 ], [ %83, %74 ], [ %92, %84 ]
  %95 = icmp eq i8 %94, 0
  br i1 %95, label %109, label %96

96:                                               ; preds = %93
  %97 = zext i8 %66 to i32
  %98 = shl i32 %62, 6
  %99 = add i32 %98, %97
  %100 = getelementptr inbounds i8, i8* %63, i64 1
  %101 = add nsw i64 %60, 1
  %102 = add nsw i32 %61, 1
  %103 = trunc i64 %101 to i32
  %104 = icmp eq i32 %53, %103
  br i1 %104, label %111, label %59

105:                                              ; preds = %59
  %106 = getelementptr inbounds %struct.UConverter, %struct.UConverter* %4, i64 0, i32 14
  store i32 %62, i32* %106, align 8
  %107 = getelementptr inbounds %struct.UConverter, %struct.UConverter* %4, i64 0, i32 15
  store i32 %53, i32* %107, align 4
  %108 = trunc i64 %60 to i8
  store i8 %108, i8* %14, align 8
  br label %144

109:                                              ; preds = %93
  %110 = trunc i64 %60 to i32
  br label %111

111:                                              ; preds = %96, %109, %48
  %112 = phi i8* [ %49, %48 ], [ %63, %109 ], [ %100, %96 ]
  %113 = phi i32 [ %51, %48 ], [ %62, %109 ], [ %99, %96 ]
  %114 = phi i32 [ %52, %48 ], [ %110, %109 ], [ %102, %96 ]
  %115 = icmp eq i32 %114, %53
  br i1 %115, label %116, label %142

116:                                              ; preds = %111
  %117 = sext i32 %53 to i64
  %118 = getelementptr inbounds [5 x i32], [5 x i32]* @_ZL15offsetsFromUTF8, i64 0, i64 %117
  %119 = load i32, i32* %118, align 4
  %120 = sub i32 %113, %119
  %121 = icmp ult i32 %120, 65536
  br i1 %121, label %122, label %128

122:                                              ; preds = %116
  %123 = trunc i32 %120 to i16
  %124 = getelementptr inbounds i16, i16* %50, i64 1
  store i16 %123, i16* %50, align 2
  br label %125

125:                                              ; preds = %2, %137, %122
  %126 = phi i8* [ %112, %137 ], [ %112, %122 ], [ %6, %2 ]
  %127 = phi i16* [ %138, %137 ], [ %124, %122 ], [ %8, %2 ]
  br label %25

128:                                              ; preds = %116
  %129 = lshr i32 %120, 10
  %130 = trunc i32 %129 to i16
  %131 = add i16 %130, -10304
  %132 = getelementptr inbounds i16, i16* %50, i64 1
  store i16 %131, i16* %50, align 2
  %133 = trunc i32 %120 to i16
  %134 = and i16 %133, 1023
  %135 = or i16 %134, -9216
  %136 = icmp ult i16* %132, %12
  br i1 %136, label %137, label %139

137:                                              ; preds = %128
  %138 = getelementptr inbounds i16, i16* %50, i64 2
  store i16 %135, i16* %132, align 2
  br label %125

139:                                              ; preds = %128
  %140 = getelementptr inbounds %struct.UConverter, %struct.UConverter* %4, i64 0, i32 30, i64 0
  store i16 %135, i16* %140, align 8
  %141 = getelementptr inbounds %struct.UConverter, %struct.UConverter* %4, i64 0, i32 23
  store i8 1, i8* %141, align 1
  store i32 15, i32* %1, align 4
  br label %144

142:                                              ; preds = %111
  %143 = trunc i32 %114 to i8
  store i8 %143, i8* %14, align 8
  store i32 12, i32* %1, align 4
  br label %144

144:                                              ; preds = %25, %139, %142, %105
  %145 = phi i8* [ %112, %139 ], [ %112, %142 ], [ %63, %105 ], [ %26, %25 ]
  %146 = phi i16* [ %132, %139 ], [ %50, %142 ], [ %50, %105 ], [ %27, %25 ]
  %147 = icmp uge i8* %145, %10
  %148 = icmp ult i16* %146, %12
  %149 = or i1 %147, %148
  br i1 %149, label %154, label %150

150:                                              ; preds = %144
  %151 = load i32, i32* %1, align 4
  %152 = icmp sgt i32 %151, 0
  br i1 %152, label %154, label %153

153:                                              ; preds = %150
  store i32 15, i32* %1, align 4
  br label %154

154:                                              ; preds = %144, %150, %153
  store i16* %146, i16** %7, align 8
  store i8* %145, i8** %5, align 8
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal void @_ZL33ucnv_toUnicode_UTF8_OFFSETS_LOGICP23UConverterToUnicodeArgsP10UErrorCode(%struct.UConverterToUnicodeArgs* nocapture, i32* nocapture) #2 {
  %3 = getelementptr inbounds %struct.UConverterToUnicodeArgs, %struct.UConverterToUnicodeArgs* %0, i64 0, i32 2
  %4 = load %struct.UConverter*, %struct.UConverter** %3, align 8
  %5 = getelementptr inbounds %struct.UConverterToUnicodeArgs, %struct.UConverterToUnicodeArgs* %0, i64 0, i32 3
  %6 = load i8*, i8** %5, align 8
  %7 = getelementptr inbounds %struct.UConverterToUnicodeArgs, %struct.UConverterToUnicodeArgs* %0, i64 0, i32 5
  %8 = load i16*, i16** %7, align 8
  %9 = getelementptr inbounds %struct.UConverterToUnicodeArgs, %struct.UConverterToUnicodeArgs* %0, i64 0, i32 7
  %10 = load i32*, i32** %9, align 8
  %11 = getelementptr inbounds %struct.UConverterToUnicodeArgs, %struct.UConverterToUnicodeArgs* %0, i64 0, i32 4
  %12 = load i8*, i8** %11, align 8
  %13 = getelementptr inbounds %struct.UConverterToUnicodeArgs, %struct.UConverterToUnicodeArgs* %0, i64 0, i32 6
  %14 = load i16*, i16** %13, align 8
  %15 = getelementptr inbounds %struct.UConverter, %struct.UConverter* %4, i64 0, i32 13, i64 0
  %16 = getelementptr inbounds %struct.UConverter, %struct.UConverter* %4, i64 0, i32 12
  %17 = load i8, i8* %16, align 8
  %18 = icmp sgt i8 %17, 0
  %19 = icmp ult i16* %8, %14
  %20 = and i1 %19, %18
  br i1 %20, label %21, label %154

21:                                               ; preds = %2
  %22 = sext i8 %17 to i32
  %23 = getelementptr inbounds %struct.UConverter, %struct.UConverter* %4, i64 0, i32 15
  %24 = load i32, i32* %23, align 4
  store i8 0, i8* %16, align 8
  %25 = getelementptr inbounds %struct.UConverter, %struct.UConverter* %4, i64 0, i32 14
  %26 = load i32, i32* %25, align 8
  store i32 0, i32* %25, align 8
  br label %54

27:                                               ; preds = %154, %39
  %28 = phi i8* [ %36, %39 ], [ %155, %154 ]
  %29 = phi i16* [ %41, %39 ], [ %156, %154 ]
  %30 = phi i32* [ %43, %39 ], [ %157, %154 ]
  %31 = phi i32 [ %42, %39 ], [ %158, %154 ]
  %32 = icmp ult i8* %28, %12
  %33 = icmp ult i16* %29, %14
  %34 = and i1 %32, %33
  br i1 %34, label %35, label %161

35:                                               ; preds = %27
  %36 = getelementptr inbounds i8, i8* %28, i64 1
  %37 = load i8, i8* %28, align 1
  %38 = icmp sgt i8 %37, -1
  br i1 %38, label %39, label %44

39:                                               ; preds = %35
  %40 = zext i8 %37 to i16
  %41 = getelementptr inbounds i16, i16* %29, i64 1
  store i16 %40, i16* %29, align 2
  %42 = add nsw i32 %31, 1
  %43 = getelementptr inbounds i32, i32* %30, i64 1
  store i32 %31, i32* %30, align 4
  br label %27

44:                                               ; preds = %35
  %45 = zext i8 %37 to i32
  store i8 %37, i8* %15, align 1
  %46 = add nsw i8 %37, 62
  %47 = icmp ult i8 %46, 51
  br i1 %47, label %48, label %54

48:                                               ; preds = %44
  %49 = icmp ugt i8 %37, -33
  %50 = zext i1 %49 to i32
  %51 = icmp ugt i8 %37, -17
  %52 = select i1 %51, i32 3, i32 2
  %53 = add nuw nsw i32 %52, %50
  br label %54

54:                                               ; preds = %48, %44, %21
  %55 = phi i8* [ %6, %21 ], [ %36, %44 ], [ %36, %48 ]
  %56 = phi i16* [ %8, %21 ], [ %29, %44 ], [ %29, %48 ]
  %57 = phi i32* [ %10, %21 ], [ %30, %44 ], [ %30, %48 ]
  %58 = phi i32 [ 0, %21 ], [ %31, %44 ], [ %31, %48 ]
  %59 = phi i32 [ %26, %21 ], [ %45, %44 ], [ %45, %48 ]
  %60 = phi i32 [ %22, %21 ], [ 1, %44 ], [ 1, %48 ]
  %61 = phi i32 [ %24, %21 ], [ 0, %44 ], [ %53, %48 ]
  %62 = icmp slt i32 %60, %61
  br i1 %62, label %63, label %119

63:                                               ; preds = %54
  %64 = icmp slt i32 %61, 3
  %65 = icmp eq i32 %61, 3
  %66 = sext i32 %60 to i64
  br label %67

67:                                               ; preds = %104, %63
  %68 = phi i64 [ %66, %63 ], [ %109, %104 ]
  %69 = phi i32 [ %60, %63 ], [ %110, %104 ]
  %70 = phi i32 [ %59, %63 ], [ %107, %104 ]
  %71 = phi i8* [ %55, %63 ], [ %108, %104 ]
  %72 = icmp ult i8* %71, %12
  br i1 %72, label %73, label %113

73:                                               ; preds = %67
  %74 = load i8, i8* %71, align 1
  %75 = getelementptr inbounds %struct.UConverter, %struct.UConverter* %4, i64 0, i32 13, i64 %68
  store i8 %74, i8* %75, align 1
  %76 = icmp sgt i64 %68, 1
  %77 = or i1 %64, %76
  br i1 %77, label %78, label %81

78:                                               ; preds = %73
  %79 = icmp slt i8 %74, -64
  %80 = zext i1 %79 to i8
  br label %101

81:                                               ; preds = %73
  br i1 %65, label %82, label %92

82:                                               ; preds = %81
  %83 = and i32 %70, 15
  %84 = zext i32 %83 to i64
  %85 = getelementptr inbounds [17 x i8], [17 x i8]* @.str, i64 0, i64 %84
  %86 = load i8, i8* %85, align 1
  %87 = lshr i8 %74, 5
  %88 = zext i8 %87 to i32
  %89 = shl i32 1, %88
  %90 = trunc i32 %89 to i8
  %91 = and i8 %86, %90
  br label %101

92:                                               ; preds = %81
  %93 = lshr i8 %74, 4
  %94 = zext i8 %93 to i64
  %95 = getelementptr inbounds [17 x i8], [17 x i8]* @.str.3, i64 0, i64 %94
  %96 = load i8, i8* %95, align 1
  %97 = and i32 %70, 7
  %98 = shl i32 1, %97
  %99 = trunc i32 %98 to i8
  %100 = and i8 %96, %99
  br label %101

101:                                              ; preds = %78, %82, %92
  %102 = phi i8 [ %80, %78 ], [ %91, %82 ], [ %100, %92 ]
  %103 = icmp eq i8 %102, 0
  br i1 %103, label %117, label %104

104:                                              ; preds = %101
  %105 = zext i8 %74 to i32
  %106 = shl i32 %70, 6
  %107 = add i32 %106, %105
  %108 = getelementptr inbounds i8, i8* %71, i64 1
  %109 = add nsw i64 %68, 1
  %110 = add nsw i32 %69, 1
  %111 = trunc i64 %109 to i32
  %112 = icmp eq i32 %61, %111
  br i1 %112, label %119, label %67

113:                                              ; preds = %67
  %114 = getelementptr inbounds %struct.UConverter, %struct.UConverter* %4, i64 0, i32 14
  store i32 %70, i32* %114, align 8
  %115 = getelementptr inbounds %struct.UConverter, %struct.UConverter* %4, i64 0, i32 15
  store i32 %61, i32* %115, align 4
  %116 = trunc i64 %68 to i8
  store i8 %116, i8* %16, align 8
  br label %161

117:                                              ; preds = %101
  %118 = trunc i64 %68 to i32
  br label %119

119:                                              ; preds = %104, %117, %54
  %120 = phi i8* [ %55, %54 ], [ %71, %117 ], [ %108, %104 ]
  %121 = phi i32 [ %59, %54 ], [ %70, %117 ], [ %107, %104 ]
  %122 = phi i32 [ %60, %54 ], [ %118, %117 ], [ %110, %104 ]
  %123 = icmp eq i32 %122, %61
  br i1 %123, label %124, label %159

124:                                              ; preds = %119
  %125 = sext i32 %61 to i64
  %126 = getelementptr inbounds [5 x i32], [5 x i32]* @_ZL15offsetsFromUTF8, i64 0, i64 %125
  %127 = load i32, i32* %126, align 4
  %128 = sub i32 %121, %127
  %129 = icmp ult i32 %128, 65536
  br i1 %129, label %130, label %134

130:                                              ; preds = %124
  %131 = trunc i32 %128 to i16
  %132 = getelementptr inbounds i16, i16* %56, i64 1
  store i16 %131, i16* %56, align 2
  %133 = getelementptr inbounds i32, i32* %57, i64 1
  store i32 %58, i32* %57, align 4
  br label %150

134:                                              ; preds = %124
  %135 = lshr i32 %128, 10
  %136 = trunc i32 %135 to i16
  %137 = add i16 %136, -10304
  %138 = getelementptr inbounds i16, i16* %56, i64 1
  store i16 %137, i16* %56, align 2
  %139 = getelementptr inbounds i32, i32* %57, i64 1
  store i32 %58, i32* %57, align 4
  %140 = trunc i32 %128 to i16
  %141 = and i16 %140, 1023
  %142 = or i16 %141, -9216
  %143 = icmp ult i16* %138, %14
  br i1 %143, label %144, label %147

144:                                              ; preds = %134
  %145 = getelementptr inbounds i16, i16* %56, i64 2
  store i16 %142, i16* %138, align 2
  %146 = getelementptr inbounds i32, i32* %57, i64 2
  store i32 %58, i32* %139, align 4
  br label %150

147:                                              ; preds = %134
  %148 = getelementptr inbounds %struct.UConverter, %struct.UConverter* %4, i64 0, i32 30, i64 0
  store i16 %142, i16* %148, align 8
  %149 = getelementptr inbounds %struct.UConverter, %struct.UConverter* %4, i64 0, i32 23
  store i8 1, i8* %149, align 1
  store i32 15, i32* %1, align 4
  br label %150

150:                                              ; preds = %144, %147, %130
  %151 = phi i16* [ %132, %130 ], [ %145, %144 ], [ %138, %147 ]
  %152 = phi i32* [ %133, %130 ], [ %146, %144 ], [ %139, %147 ]
  %153 = add nsw i32 %61, %58
  br label %154

154:                                              ; preds = %2, %150
  %155 = phi i8* [ %120, %150 ], [ %6, %2 ]
  %156 = phi i16* [ %151, %150 ], [ %8, %2 ]
  %157 = phi i32* [ %152, %150 ], [ %10, %2 ]
  %158 = phi i32 [ %153, %150 ], [ 0, %2 ]
  br label %27

159:                                              ; preds = %119
  %160 = trunc i32 %122 to i8
  store i8 %160, i8* %16, align 8
  store i32 12, i32* %1, align 4
  br label %161

161:                                              ; preds = %27, %159, %113
  %162 = phi i8* [ %120, %159 ], [ %71, %113 ], [ %28, %27 ]
  %163 = phi i16* [ %56, %159 ], [ %56, %113 ], [ %29, %27 ]
  %164 = phi i32* [ %57, %159 ], [ %57, %113 ], [ %30, %27 ]
  %165 = icmp uge i8* %162, %12
  %166 = icmp ult i16* %163, %14
  %167 = or i1 %165, %166
  br i1 %167, label %172, label %168

168:                                              ; preds = %161
  %169 = load i32, i32* %1, align 4
  %170 = icmp sgt i32 %169, 0
  br i1 %170, label %172, label %171

171:                                              ; preds = %168
  store i32 15, i32* %1, align 4
  br label %172

172:                                              ; preds = %161, %168, %171
  store i16* %163, i16** %7, align 8
  store i8* %162, i8** %5, align 8
  store i32* %164, i32** %9, align 8
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal i32 @_ZL22ucnv_getNextUChar_UTF8P23UConverterToUnicodeArgsP10UErrorCode(%struct.UConverterToUnicodeArgs* nocapture, i32* nocapture) #2 {
  %3 = getelementptr inbounds %struct.UConverterToUnicodeArgs, %struct.UConverterToUnicodeArgs* %0, i64 0, i32 2
  %4 = load %struct.UConverter*, %struct.UConverter** %3, align 8
  %5 = bitcast %struct.UConverter* %4 to i8*
  %6 = getelementptr inbounds %struct.UConverterToUnicodeArgs, %struct.UConverterToUnicodeArgs* %0, i64 0, i32 3
  %7 = load i8*, i8** %6, align 8
  %8 = ptrtoint i8* %7 to i64
  %9 = getelementptr inbounds %struct.UConverterToUnicodeArgs, %struct.UConverterToUnicodeArgs* %0, i64 0, i32 4
  %10 = load i8*, i8** %9, align 8
  %11 = icmp ult i8* %7, %10
  br i1 %11, label %13, label %12

12:                                               ; preds = %2
  store i32 8, i32* %1, align 4
  br label %253

13:                                               ; preds = %2
  %14 = getelementptr inbounds i8, i8* %7, i64 1
  %15 = load i8, i8* %7, align 1
  %16 = zext i8 %15 to i32
  %17 = icmp sgt i8 %15, -1
  br i1 %17, label %18, label %19

18:                                               ; preds = %13
  store i8* %14, i8** %6, align 8
  br label %253

19:                                               ; preds = %13
  %20 = add nsw i8 %15, 62
  %21 = icmp ult i8 %20, 51
  br i1 %21, label %22, label %32

22:                                               ; preds = %19
  %23 = icmp ugt i8 %15, -33
  %24 = zext i1 %23 to i32
  %25 = icmp ugt i8 %15, -17
  %26 = zext i1 %25 to i32
  %27 = add nuw nsw i32 %24, %26
  %28 = add nuw nsw i32 %27, 1
  %29 = zext i32 %28 to i64
  %30 = getelementptr inbounds i8, i8* %14, i64 %29
  %31 = icmp ugt i8* %30, %10
  br i1 %31, label %35, label %87

32:                                               ; preds = %19
  %33 = getelementptr inbounds %struct.UConverter, %struct.UConverter* %4, i64 0, i32 13, i64 0
  store i8 %15, i8* %33, align 1
  %34 = getelementptr inbounds %struct.UConverter, %struct.UConverter* %4, i64 0, i32 12
  store i8 1, i8* %34, align 8
  store i32 12, i32* %1, align 4
  store i8* %14, i8** %6, align 8
  br label %253

35:                                               ; preds = %22
  %36 = add nuw nsw i32 %27, 2
  %37 = getelementptr inbounds %struct.UConverter, %struct.UConverter* %4, i64 0, i32 13, i64 0
  store i8 %15, i8* %37, align 1
  store i32 11, i32* %1, align 4
  %38 = load i8*, i8** %9, align 8
  %39 = icmp ult i8* %14, %38
  br i1 %39, label %40, label %83

40:                                               ; preds = %35
  %41 = icmp ult i32 %36, 3
  %42 = icmp eq i32 %36, 3
  %43 = and i32 %16, 7
  %44 = shl i32 1, %43
  %45 = trunc i32 %44 to i8
  %46 = and i32 %16, 15
  %47 = zext i32 %46 to i64
  %48 = getelementptr inbounds [17 x i8], [17 x i8]* @.str, i64 0, i64 %47
  br label %49

49:                                               ; preds = %40, %76
  %50 = phi i8 [ 1, %40 ], [ %77, %76 ]
  %51 = phi i8* [ %14, %40 ], [ %80, %76 ]
  %52 = load i8, i8* %51, align 1
  %53 = icmp sgt i8 %50, 1
  %54 = or i1 %41, %53
  br i1 %54, label %55, label %58

55:                                               ; preds = %49
  %56 = icmp slt i8 %52, -64
  %57 = zext i1 %56 to i8
  br label %72

58:                                               ; preds = %49
  br i1 %42, label %59, label %66

59:                                               ; preds = %58
  %60 = load i8, i8* %48, align 1
  %61 = lshr i8 %52, 5
  %62 = zext i8 %61 to i32
  %63 = shl i32 1, %62
  %64 = trunc i32 %63 to i8
  %65 = and i8 %60, %64
  br label %72

66:                                               ; preds = %58
  %67 = lshr i8 %52, 4
  %68 = zext i8 %67 to i64
  %69 = getelementptr inbounds [17 x i8], [17 x i8]* @.str.3, i64 0, i64 %68
  %70 = load i8, i8* %69, align 1
  %71 = and i8 %70, %45
  br label %72

72:                                               ; preds = %55, %59, %66
  %73 = phi i8 [ %57, %55 ], [ %65, %59 ], [ %71, %66 ]
  %74 = icmp eq i8 %73, 0
  br i1 %74, label %75, label %76

75:                                               ; preds = %72
  store i32 12, i32* %1, align 4
  br label %83

76:                                               ; preds = %72
  %77 = add i8 %50, 1
  %78 = sext i8 %50 to i64
  %79 = getelementptr inbounds %struct.UConverter, %struct.UConverter* %4, i64 0, i32 13, i64 %78
  store i8 %52, i8* %79, align 1
  %80 = getelementptr inbounds i8, i8* %51, i64 1
  %81 = load i8*, i8** %9, align 8
  %82 = icmp ult i8* %80, %81
  br i1 %82, label %49, label %83

83:                                               ; preds = %76, %35, %75
  %84 = phi i8* [ %51, %75 ], [ %14, %35 ], [ %80, %76 ]
  %85 = phi i8 [ %50, %75 ], [ 1, %35 ], [ %77, %76 ]
  %86 = getelementptr inbounds %struct.UConverter, %struct.UConverter* %4, i64 0, i32 12
  store i8 %85, i8* %86, align 8
  store i8* %84, i8** %6, align 8
  br label %253

87:                                               ; preds = %22
  %88 = shl nuw nsw i32 %16, 6
  switch i32 %27, label %120 [
    i32 1, label %89
    i32 0, label %112
  ]

89:                                               ; preds = %87
  %90 = load i8, i8* %14, align 1
  %91 = and i32 %16, 15
  %92 = zext i32 %91 to i64
  %93 = getelementptr inbounds [17 x i8], [17 x i8]* @.str, i64 0, i64 %92
  %94 = load i8, i8* %93, align 1
  %95 = sext i8 %94 to i32
  %96 = zext i8 %90 to i32
  %97 = lshr i32 %96, 5
  %98 = shl i32 1, %97
  %99 = and i32 %98, %95
  %100 = icmp eq i32 %99, 0
  br i1 %100, label %150, label %101

101:                                              ; preds = %89
  %102 = getelementptr inbounds i8, i8* %7, i64 2
  %103 = load i8, i8* %102, align 1
  %104 = icmp slt i8 %103, -64
  br i1 %104, label %105, label %150

105:                                              ; preds = %101
  %106 = getelementptr inbounds i8, i8* %7, i64 3
  store i8* %106, i8** %6, align 8
  %107 = add nuw nsw i32 %88, %96
  %108 = shl nuw nsw i32 %107, 6
  %109 = zext i8 %103 to i32
  %110 = add nsw i32 %108, -925824
  %111 = add nsw i32 %110, %109
  br label %253

112:                                              ; preds = %87
  %113 = load i8, i8* %14, align 1
  %114 = icmp slt i8 %113, -64
  br i1 %114, label %115, label %150

115:                                              ; preds = %112
  %116 = getelementptr inbounds i8, i8* %7, i64 2
  store i8* %116, i8** %6, align 8
  %117 = zext i8 %113 to i32
  %118 = add nsw i32 %88, -12416
  %119 = add nsw i32 %118, %117
  br label %253

120:                                              ; preds = %87
  %121 = load i8, i8* %14, align 1
  %122 = zext i8 %121 to i32
  %123 = lshr i32 %122, 4
  %124 = zext i32 %123 to i64
  %125 = getelementptr inbounds [17 x i8], [17 x i8]* @.str.3, i64 0, i64 %124
  %126 = load i8, i8* %125, align 1
  %127 = sext i8 %126 to i32
  %128 = and i32 %16, 7
  %129 = shl i32 1, %128
  %130 = and i32 %129, %127
  %131 = icmp eq i32 %130, 0
  br i1 %131, label %150, label %132

132:                                              ; preds = %120
  %133 = getelementptr inbounds i8, i8* %7, i64 2
  %134 = load i8, i8* %133, align 1
  %135 = icmp slt i8 %134, -64
  br i1 %135, label %136, label %150

136:                                              ; preds = %132
  %137 = getelementptr inbounds i8, i8* %7, i64 3
  %138 = load i8, i8* %137, align 1
  %139 = icmp slt i8 %138, -64
  br i1 %139, label %140, label %150

140:                                              ; preds = %136
  %141 = getelementptr inbounds i8, i8* %7, i64 4
  store i8* %141, i8** %6, align 8
  %142 = add nuw nsw i32 %88, %122
  %143 = shl nuw nsw i32 %142, 6
  %144 = zext i8 %134 to i32
  %145 = add nuw nsw i32 %143, %144
  %146 = shl nuw nsw i32 %145, 6
  %147 = zext i8 %138 to i32
  %148 = add nsw i32 %146, -63447168
  %149 = add nsw i32 %148, %147
  br label %253

150:                                              ; preds = %132, %136, %120, %112, %101, %89
  %151 = phi i8* [ %14, %89 ], [ %102, %101 ], [ %14, %112 ], [ %14, %120 ], [ %133, %132 ], [ %137, %136 ]
  store i8* %151, i8** %6, align 8
  %152 = icmp ugt i8* %151, %14
  %153 = select i1 %152, i8* %151, i8* %14
  %154 = ptrtoint i8* %153 to i64
  %155 = sub i64 %154, %8
  %156 = icmp ult i64 %155, 32
  br i1 %156, label %238, label %157

157:                                              ; preds = %150
  %158 = icmp ugt i8* %151, %14
  %159 = select i1 %158, i8* %151, i8* %14
  %160 = xor i64 %8, -1
  %161 = getelementptr i8, i8* %159, i64 %160
  %162 = ptrtoint i8* %161 to i64
  %163 = trunc i64 %162 to i8
  %164 = icmp slt i8 %163, 0
  %165 = icmp ugt i8* %161, inttoptr (i64 255 to i8*)
  %166 = or i1 %164, %165
  br i1 %166, label %238, label %167

167:                                              ; preds = %157
  %168 = icmp ugt i8* %151, %14
  %169 = select i1 %168, i8* %151, i8* %14
  %170 = getelementptr %struct.UConverter, %struct.UConverter* %4, i64 0, i32 13, i64 0
  %171 = sub i64 65, %8
  %172 = getelementptr i8, i8* %169, i64 %171
  %173 = ptrtoint i8* %172 to i64
  %174 = getelementptr i8, i8* %5, i64 %173
  %175 = icmp ult i8* %7, %174
  %176 = icmp ult i8* %170, %169
  %177 = and i1 %175, %176
  br i1 %177, label %238, label %178

178:                                              ; preds = %167
  %179 = and i64 %155, -32
  %180 = trunc i64 %179 to i8
  %181 = getelementptr i8, i8* %7, i64 %179
  %182 = add i64 %179, -32
  %183 = lshr exact i64 %182, 5
  %184 = add nuw nsw i64 %183, 1
  %185 = and i64 %184, 1
  %186 = icmp eq i64 %182, 0
  br i1 %186, label %220, label %187

187:                                              ; preds = %178
  %188 = sub nuw nsw i64 %184, %185
  br label %189

189:                                              ; preds = %189, %187
  %190 = phi i64 [ 0, %187 ], [ %217, %189 ]
  %191 = phi i64 [ %188, %187 ], [ %218, %189 ]
  %192 = getelementptr i8, i8* %7, i64 %190
  %193 = bitcast i8* %192 to <16 x i8>*
  %194 = load <16 x i8>, <16 x i8>* %193, align 1, !alias.scope !2, !noalias !5
  %195 = getelementptr i8, i8* %192, i64 16
  %196 = bitcast i8* %195 to <16 x i8>*
  %197 = load <16 x i8>, <16 x i8>* %196, align 1, !alias.scope !2, !noalias !5
  %198 = shl i64 %190, 56
  %199 = ashr exact i64 %198, 56
  %200 = getelementptr inbounds %struct.UConverter, %struct.UConverter* %4, i64 0, i32 13, i64 %199
  %201 = bitcast i8* %200 to <16 x i8>*
  store <16 x i8> %194, <16 x i8>* %201, align 1, !alias.scope !5
  %202 = getelementptr inbounds i8, i8* %200, i64 16
  %203 = bitcast i8* %202 to <16 x i8>*
  store <16 x i8> %197, <16 x i8>* %203, align 1, !alias.scope !5
  %204 = or i64 %190, 32
  %205 = getelementptr i8, i8* %7, i64 %204
  %206 = bitcast i8* %205 to <16 x i8>*
  %207 = load <16 x i8>, <16 x i8>* %206, align 1, !alias.scope !2, !noalias !5
  %208 = getelementptr i8, i8* %205, i64 16
  %209 = bitcast i8* %208 to <16 x i8>*
  %210 = load <16 x i8>, <16 x i8>* %209, align 1, !alias.scope !2, !noalias !5
  %211 = shl i64 %204, 56
  %212 = ashr exact i64 %211, 56
  %213 = getelementptr inbounds %struct.UConverter, %struct.UConverter* %4, i64 0, i32 13, i64 %212
  %214 = bitcast i8* %213 to <16 x i8>*
  store <16 x i8> %207, <16 x i8>* %214, align 1, !alias.scope !5
  %215 = getelementptr inbounds i8, i8* %213, i64 16
  %216 = bitcast i8* %215 to <16 x i8>*
  store <16 x i8> %210, <16 x i8>* %216, align 1, !alias.scope !5
  %217 = add i64 %190, 64
  %218 = add i64 %191, -2
  %219 = icmp eq i64 %218, 0
  br i1 %219, label %220, label %189, !llvm.loop !7

220:                                              ; preds = %189, %178
  %221 = phi i64 [ 0, %178 ], [ %217, %189 ]
  %222 = icmp eq i64 %185, 0
  br i1 %222, label %236, label %223

223:                                              ; preds = %220
  %224 = getelementptr i8, i8* %7, i64 %221
  %225 = bitcast i8* %224 to <16 x i8>*
  %226 = load <16 x i8>, <16 x i8>* %225, align 1, !alias.scope !2, !noalias !5
  %227 = getelementptr i8, i8* %224, i64 16
  %228 = bitcast i8* %227 to <16 x i8>*
  %229 = load <16 x i8>, <16 x i8>* %228, align 1, !alias.scope !2, !noalias !5
  %230 = shl i64 %221, 56
  %231 = ashr exact i64 %230, 56
  %232 = getelementptr inbounds %struct.UConverter, %struct.UConverter* %4, i64 0, i32 13, i64 %231
  %233 = bitcast i8* %232 to <16 x i8>*
  store <16 x i8> %226, <16 x i8>* %233, align 1, !alias.scope !5
  %234 = getelementptr inbounds i8, i8* %232, i64 16
  %235 = bitcast i8* %234 to <16 x i8>*
  store <16 x i8> %229, <16 x i8>* %235, align 1, !alias.scope !5
  br label %236

236:                                              ; preds = %220, %223
  %237 = icmp eq i64 %155, %179
  br i1 %237, label %250, label %238

238:                                              ; preds = %236, %167, %157, %150
  %239 = phi i8 [ 0, %167 ], [ 0, %157 ], [ 0, %150 ], [ %180, %236 ]
  %240 = phi i8* [ %7, %167 ], [ %7, %157 ], [ %7, %150 ], [ %181, %236 ]
  br label %241

241:                                              ; preds = %238, %241
  %242 = phi i8 [ %248, %241 ], [ %239, %238 ]
  %243 = phi i8* [ %244, %241 ], [ %240, %238 ]
  %244 = getelementptr inbounds i8, i8* %243, i64 1
  %245 = load i8, i8* %243, align 1
  %246 = sext i8 %242 to i64
  %247 = getelementptr inbounds %struct.UConverter, %struct.UConverter* %4, i64 0, i32 13, i64 %246
  store i8 %245, i8* %247, align 1
  %248 = add i8 %242, 1
  %249 = icmp ult i8* %244, %151
  br i1 %249, label %241, label %250, !llvm.loop !9

250:                                              ; preds = %241, %236
  %251 = phi i8 [ %180, %236 ], [ %248, %241 ]
  %252 = getelementptr inbounds %struct.UConverter, %struct.UConverter* %4, i64 0, i32 12
  store i8 %251, i8* %252, align 8
  store i32 12, i32* %1, align 4
  br label %253

253:                                              ; preds = %140, %115, %105, %32, %83, %250, %18, %12
  %254 = phi i32 [ 65535, %12 ], [ %16, %18 ], [ 65535, %32 ], [ 65535, %83 ], [ 65535, %250 ], [ %111, %105 ], [ %119, %115 ], [ %149, %140 ]
  ret i32 %254
}

declare void @ucnv_getNonSurrogateUnicodeSet_69(%struct.UConverter*, %struct.USetAdder*, i32, i32*) #3

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal void @_ZL17ucnv_UTF8FromUTF8P25UConverterFromUnicodeArgsP23UConverterToUnicodeArgsP10UErrorCode(%struct.UConverterFromUnicodeArgs* nocapture, %struct.UConverterToUnicodeArgs* nocapture, i32* nocapture) #2 {
  %4 = getelementptr inbounds %struct.UConverterToUnicodeArgs, %struct.UConverterToUnicodeArgs* %1, i64 0, i32 2
  %5 = load %struct.UConverter*, %struct.UConverter** %4, align 8
  %6 = bitcast %struct.UConverter* %5 to i8*
  %7 = getelementptr inbounds %struct.UConverterToUnicodeArgs, %struct.UConverterToUnicodeArgs* %1, i64 0, i32 3
  %8 = load i8*, i8** %7, align 8
  %9 = getelementptr inbounds %struct.UConverterToUnicodeArgs, %struct.UConverterToUnicodeArgs* %1, i64 0, i32 4
  %10 = load i8*, i8** %9, align 8
  %11 = getelementptr inbounds %struct.UConverterFromUnicodeArgs, %struct.UConverterFromUnicodeArgs* %0, i64 0, i32 5
  %12 = load i8*, i8** %11, align 8
  %13 = getelementptr inbounds %struct.UConverterFromUnicodeArgs, %struct.UConverterFromUnicodeArgs* %0, i64 0, i32 6
  %14 = bitcast i8** %13 to i64*
  %15 = load i64, i64* %14, align 8
  %16 = ptrtoint i8* %12 to i64
  %17 = sub i64 %15, %16
  %18 = trunc i64 %17 to i32
  %19 = getelementptr inbounds %struct.UConverter, %struct.UConverter* %5, i64 0, i32 12
  %20 = load i8, i8* %19, align 8
  %21 = icmp sgt i8 %20, 0
  br i1 %21, label %22, label %28

22:                                               ; preds = %3
  %23 = getelementptr inbounds %struct.UConverter, %struct.UConverter* %5, i64 0, i32 15
  %24 = load i32, i32* %23, align 4
  %25 = trunc i32 %24 to i8
  %26 = getelementptr inbounds %struct.UConverter, %struct.UConverter* %5, i64 0, i32 14
  %27 = load i32, i32* %26, align 8
  br label %28

28:                                               ; preds = %3, %22
  %29 = phi i8 [ %20, %22 ], [ 0, %3 ]
  %30 = phi i8 [ %25, %22 ], [ 0, %3 ]
  %31 = phi i32 [ %27, %22 ], [ 0, %3 ]
  %32 = ptrtoint i8* %10 to i64
  %33 = ptrtoint i8* %8 to i64
  %34 = sub i64 %32, %33
  %35 = trunc i64 %34 to i32
  %36 = sext i8 %29 to i32
  %37 = add nsw i32 %36, %35
  %38 = sext i8 %30 to i32
  %39 = icmp slt i32 %37, %38
  br i1 %39, label %114, label %40

40:                                               ; preds = %28
  %41 = icmp slt i32 %18, %38
  br i1 %41, label %42, label %43

42:                                               ; preds = %40
  store i32 -127, i32* %2, align 4
  br label %976

43:                                               ; preds = %40
  %44 = icmp sgt i32 %37, %18
  %45 = select i1 %44, i32 %18, i32 %37
  %46 = sub nsw i32 %45, %36
  %47 = icmp sgt i32 %46, 0
  br i1 %47, label %48, label %111

48:                                               ; preds = %43
  %49 = add nsw i32 %46, -1
  %50 = sext i32 %49 to i64
  %51 = getelementptr inbounds i8, i8* %8, i64 %50
  %52 = load i8, i8* %51, align 1
  %53 = zext i8 %52 to i32
  %54 = icmp sgt i8 %52, -1
  br i1 %54, label %111, label %55

55:                                               ; preds = %48
  %56 = add nsw i8 %52, 62
  %57 = icmp ult i8 %56, 51
  br i1 %57, label %111, label %58

58:                                               ; preds = %55
  %59 = icmp slt i8 %52, -64
  br i1 %59, label %60, label %111

60:                                               ; preds = %58
  %61 = add nsw i32 %46, -2
  %62 = icmp sgt i32 %61, -1
  br i1 %62, label %63, label %111

63:                                               ; preds = %60
  %64 = sext i32 %61 to i64
  %65 = getelementptr inbounds i8, i8* %8, i64 %64
  %66 = load i8, i8* %65, align 1
  %67 = zext i8 %66 to i32
  %68 = add i8 %66, 32
  %69 = icmp ult i8 %68, 21
  br i1 %69, label %70, label %88

70:                                               ; preds = %63
  %71 = icmp ult i8 %66, -16
  %72 = lshr i32 %53, 4
  %73 = zext i32 %72 to i64
  %74 = getelementptr inbounds [17 x i8], [17 x i8]* @.str.3, i64 0, i64 %73
  %75 = and i32 %67, 7
  %76 = and i32 %67, 15
  %77 = zext i32 %76 to i64
  %78 = getelementptr inbounds [17 x i8], [17 x i8]* @.str, i64 0, i64 %77
  %79 = lshr i32 %53, 5
  %80 = select i1 %71, i32 %79, i32 %75
  %81 = select i1 %71, i8* %78, i8* %74
  %82 = load i8, i8* %81, align 1
  %83 = sext i8 %82 to i32
  %84 = shl i32 1, %80
  %85 = and i32 %84, %83
  %86 = icmp eq i32 %85, 0
  %87 = select i1 %86, i32 %46, i32 %61
  br label %111

88:                                               ; preds = %63
  %89 = icmp slt i8 %66, -64
  br i1 %89, label %90, label %111

90:                                               ; preds = %88
  %91 = add nsw i32 %46, -3
  %92 = icmp sgt i32 %91, -1
  br i1 %92, label %93, label %111

93:                                               ; preds = %90
  %94 = sext i32 %91 to i64
  %95 = getelementptr inbounds i8, i8* %8, i64 %94
  %96 = load i8, i8* %95, align 1
  %97 = add i8 %96, 16
  %98 = icmp ult i8 %97, 5
  br i1 %98, label %99, label %111

99:                                               ; preds = %93
  %100 = lshr i32 %67, 4
  %101 = zext i32 %100 to i64
  %102 = getelementptr inbounds [17 x i8], [17 x i8]* @.str.3, i64 0, i64 %101
  %103 = load i8, i8* %102, align 1
  %104 = sext i8 %103 to i32
  %105 = and i8 %96, 7
  %106 = zext i8 %105 to i32
  %107 = shl i32 1, %106
  %108 = and i32 %107, %104
  %109 = icmp eq i32 %108, 0
  %110 = select i1 %109, i32 %46, i32 %91
  br label %111

111:                                              ; preds = %55, %99, %70, %48, %58, %60, %93, %88, %90, %43
  %112 = phi i32 [ %46, %43 ], [ %46, %48 ], [ 1, %60 ], [ %46, %58 ], [ 2, %90 ], [ %46, %88 ], [ %87, %70 ], [ %46, %93 ], [ %110, %99 ], [ %49, %55 ]
  %113 = add nsw i32 %112, %36
  br label %114

114:                                              ; preds = %28, %111
  %115 = phi i32 [ %37, %28 ], [ %113, %111 ]
  %116 = icmp eq i32 %31, 0
  br i1 %116, label %117, label %122

117:                                              ; preds = %883, %114
  %118 = phi i8* [ %8, %114 ], [ %884, %883 ]
  %119 = phi i8* [ %12, %114 ], [ %885, %883 ]
  %120 = phi i32 [ %115, %114 ], [ %886, %883 ]
  %121 = icmp sgt i32 %120, 0
  br i1 %121, label %124, label %887

122:                                              ; preds = %114
  %123 = getelementptr inbounds %struct.UConverter, %struct.UConverter* %5, i64 0, i32 14
  store i32 0, i32* %123, align 8
  store i8 0, i8* %19, align 8
  br label %182

124:                                              ; preds = %117, %133
  %125 = phi i32 [ %137, %133 ], [ %120, %117 ]
  %126 = phi i8* [ %136, %133 ], [ %119, %117 ]
  %127 = phi i8* [ %135, %133 ], [ %118, %117 ]
  %128 = getelementptr inbounds i8, i8* %127, i64 1
  %129 = load i8, i8* %127, align 1
  %130 = icmp sgt i8 %129, -1
  br i1 %130, label %131, label %139

131:                                              ; preds = %124
  %132 = getelementptr inbounds i8, i8* %126, i64 1
  store i8 %129, i8* %126, align 1
  br label %133

133:                                              ; preds = %131, %159, %169
  %134 = phi i32 [ -1, %131 ], [ -3, %159 ], [ -2, %169 ]
  %135 = phi i8* [ %128, %131 ], [ %160, %159 ], [ %170, %169 ]
  %136 = phi i8* [ %132, %131 ], [ %163, %159 ], [ %172, %169 ]
  %137 = add nsw i32 %125, %134
  %138 = icmp sgt i32 %137, 0
  br i1 %138, label %124, label %887

139:                                              ; preds = %124
  %140 = icmp ugt i8 %129, -33
  br i1 %140, label %141, label %164

141:                                              ; preds = %139
  %142 = icmp ult i8 %129, -16
  br i1 %142, label %143, label %173

143:                                              ; preds = %141
  %144 = and i8 %129, 15
  %145 = zext i8 %144 to i64
  %146 = getelementptr inbounds [17 x i8], [17 x i8]* @.str, i64 0, i64 %145
  %147 = load i8, i8* %146, align 1
  %148 = sext i8 %147 to i32
  %149 = load i8, i8* %128, align 1
  %150 = lshr i8 %149, 5
  %151 = zext i8 %150 to i32
  %152 = shl i32 1, %151
  %153 = and i32 %152, %148
  %154 = icmp eq i32 %153, 0
  br i1 %154, label %176, label %155

155:                                              ; preds = %143
  %156 = getelementptr inbounds i8, i8* %127, i64 2
  %157 = load i8, i8* %156, align 1
  %158 = icmp slt i8 %157, -64
  br i1 %158, label %159, label %176

159:                                              ; preds = %155
  %160 = getelementptr inbounds i8, i8* %127, i64 3
  %161 = getelementptr inbounds i8, i8* %126, i64 1
  store i8 %129, i8* %126, align 1
  %162 = getelementptr inbounds i8, i8* %126, i64 2
  store i8 %149, i8* %161, align 1
  %163 = getelementptr inbounds i8, i8* %126, i64 3
  store i8 %157, i8* %162, align 1
  br label %133

164:                                              ; preds = %139
  %165 = icmp ugt i8 %129, -63
  br i1 %165, label %166, label %526

166:                                              ; preds = %164
  %167 = load i8, i8* %128, align 1
  %168 = icmp slt i8 %167, -64
  br i1 %168, label %169, label %176

169:                                              ; preds = %166
  %170 = getelementptr inbounds i8, i8* %127, i64 2
  %171 = getelementptr inbounds i8, i8* %126, i64 1
  store i8 %129, i8* %126, align 1
  %172 = getelementptr inbounds i8, i8* %126, i64 2
  store i8 %167, i8* %171, align 1
  br label %133

173:                                              ; preds = %141
  %174 = add nsw i8 %129, 62
  %175 = icmp ult i8 %174, 51
  br i1 %175, label %176, label %526

176:                                              ; preds = %155, %166, %143, %173
  %177 = phi i8 [ 1, %173 ], [ 1, %155 ], [ 0, %166 ], [ 1, %143 ]
  %178 = zext i8 %129 to i32
  %179 = icmp ugt i8 %129, -17
  %180 = select i1 %179, i8 3, i8 2
  %181 = add nuw nsw i8 %180, %177
  br label %182

182:                                              ; preds = %176, %122
  %183 = phi i8* [ %8, %122 ], [ %128, %176 ]
  %184 = phi i8* [ %12, %122 ], [ %126, %176 ]
  %185 = phi i32 [ %115, %122 ], [ %125, %176 ]
  %186 = phi i8 [ %29, %122 ], [ 0, %176 ]
  %187 = phi i8 [ %29, %122 ], [ 1, %176 ]
  %188 = phi i8 [ %30, %122 ], [ %181, %176 ]
  %189 = phi i32 [ %31, %122 ], [ %178, %176 ]
  %190 = sext i8 %187 to i32
  %191 = sext i8 %188 to i32
  %192 = icmp slt i8 %187, %188
  br i1 %192, label %193, label %400

193:                                              ; preds = %182
  %194 = icmp slt i8 %188, 3
  %195 = icmp eq i8 %188, 3
  %196 = zext i8 %188 to i32
  br label %197

197:                                              ; preds = %233, %193
  %198 = phi i32 [ %190, %193 ], [ %235, %233 ]
  %199 = phi i32 [ %189, %193 ], [ %239, %233 ]
  %200 = phi i8 [ %187, %193 ], [ %236, %233 ]
  %201 = phi i8* [ %183, %193 ], [ %234, %233 ]
  %202 = icmp ult i8* %201, %10
  br i1 %202, label %203, label %241

203:                                              ; preds = %197
  %204 = load i8, i8* %201, align 1
  %205 = icmp ugt i32 %198, 1
  %206 = or i1 %194, %205
  br i1 %206, label %207, label %210

207:                                              ; preds = %203
  %208 = icmp slt i8 %204, -64
  %209 = zext i1 %208 to i8
  br label %230

210:                                              ; preds = %203
  br i1 %195, label %211, label %221

211:                                              ; preds = %210
  %212 = and i32 %199, 15
  %213 = zext i32 %212 to i64
  %214 = getelementptr inbounds [17 x i8], [17 x i8]* @.str, i64 0, i64 %213
  %215 = load i8, i8* %214, align 1
  %216 = lshr i8 %204, 5
  %217 = zext i8 %216 to i32
  %218 = shl i32 1, %217
  %219 = trunc i32 %218 to i8
  %220 = and i8 %215, %219
  br label %230

221:                                              ; preds = %210
  %222 = lshr i8 %204, 4
  %223 = zext i8 %222 to i64
  %224 = getelementptr inbounds [17 x i8], [17 x i8]* @.str.3, i64 0, i64 %223
  %225 = load i8, i8* %224, align 1
  %226 = and i32 %199, 7
  %227 = shl i32 1, %226
  %228 = trunc i32 %227 to i8
  %229 = and i8 %225, %228
  br label %230

230:                                              ; preds = %207, %211, %221
  %231 = phi i8 [ %209, %207 ], [ %220, %211 ], [ %229, %221 ]
  %232 = icmp eq i8 %231, 0
  br i1 %232, label %398, label %233

233:                                              ; preds = %230
  %234 = getelementptr inbounds i8, i8* %201, i64 1
  %235 = add nuw nsw i32 %198, 1
  %236 = add nuw nsw i8 %200, 1
  %237 = shl i32 %199, 6
  %238 = zext i8 %204 to i32
  %239 = add nsw i32 %237, %238
  %240 = icmp eq i32 %235, %196
  br i1 %240, label %400, label %197

241:                                              ; preds = %197
  %242 = trunc i32 %198 to i8
  %243 = sext i8 %186 to i32
  %244 = sub nsw i32 %243, %198
  %245 = sext i32 %244 to i64
  %246 = getelementptr inbounds i8, i8* %201, i64 %245
  %247 = icmp slt i8 %186, %242
  br i1 %247, label %248, label %394

248:                                              ; preds = %241
  %249 = zext i8 %186 to i64
  %250 = and i32 %198, 255
  %251 = zext i32 %250 to i64
  %252 = sub nsw i64 %251, %249
  %253 = icmp ult i64 %252, 32
  br i1 %253, label %351, label %254

254:                                              ; preds = %248
  %255 = add nuw nsw i64 %249, 65
  %256 = getelementptr i8, i8* %6, i64 %255
  %257 = add nuw nsw i64 %251, 65
  %258 = getelementptr i8, i8* %6, i64 %257
  %259 = zext i32 %198 to i64
  %260 = sub nsw i64 %251, %259
  %261 = getelementptr i8, i8* %201, i64 %260
  %262 = icmp ult i8* %256, %261
  %263 = icmp ult i8* %246, %258
  %264 = and i1 %262, %263
  br i1 %264, label %351, label %265

265:                                              ; preds = %254
  %266 = and i64 %252, -32
  %267 = add nsw i64 %266, %249
  %268 = getelementptr i8, i8* %246, i64 %266
  %269 = add nsw i64 %266, -32
  %270 = lshr exact i64 %269, 5
  %271 = add nuw nsw i64 %270, 1
  %272 = and i64 %271, 3
  %273 = icmp ult i64 %269, 96
  br i1 %273, label %329, label %274

274:                                              ; preds = %265
  %275 = sub nsw i64 %271, %272
  br label %276

276:                                              ; preds = %276, %274
  %277 = phi i64 [ 0, %274 ], [ %326, %276 ]
  %278 = phi i64 [ %275, %274 ], [ %327, %276 ]
  %279 = add i64 %277, %249
  %280 = getelementptr i8, i8* %246, i64 %277
  %281 = bitcast i8* %280 to <16 x i8>*
  %282 = load <16 x i8>, <16 x i8>* %281, align 1, !alias.scope !10
  %283 = getelementptr i8, i8* %280, i64 16
  %284 = bitcast i8* %283 to <16 x i8>*
  %285 = load <16 x i8>, <16 x i8>* %284, align 1, !alias.scope !10
  %286 = getelementptr inbounds %struct.UConverter, %struct.UConverter* %5, i64 0, i32 13, i64 %279
  %287 = bitcast i8* %286 to <16 x i8>*
  store <16 x i8> %282, <16 x i8>* %287, align 1, !alias.scope !13, !noalias !10
  %288 = getelementptr inbounds i8, i8* %286, i64 16
  %289 = bitcast i8* %288 to <16 x i8>*
  store <16 x i8> %285, <16 x i8>* %289, align 1, !alias.scope !13, !noalias !10
  %290 = or i64 %277, 32
  %291 = add i64 %290, %249
  %292 = getelementptr i8, i8* %246, i64 %290
  %293 = bitcast i8* %292 to <16 x i8>*
  %294 = load <16 x i8>, <16 x i8>* %293, align 1, !alias.scope !10
  %295 = getelementptr i8, i8* %292, i64 16
  %296 = bitcast i8* %295 to <16 x i8>*
  %297 = load <16 x i8>, <16 x i8>* %296, align 1, !alias.scope !10
  %298 = getelementptr inbounds %struct.UConverter, %struct.UConverter* %5, i64 0, i32 13, i64 %291
  %299 = bitcast i8* %298 to <16 x i8>*
  store <16 x i8> %294, <16 x i8>* %299, align 1, !alias.scope !13, !noalias !10
  %300 = getelementptr inbounds i8, i8* %298, i64 16
  %301 = bitcast i8* %300 to <16 x i8>*
  store <16 x i8> %297, <16 x i8>* %301, align 1, !alias.scope !13, !noalias !10
  %302 = or i64 %277, 64
  %303 = add i64 %302, %249
  %304 = getelementptr i8, i8* %246, i64 %302
  %305 = bitcast i8* %304 to <16 x i8>*
  %306 = load <16 x i8>, <16 x i8>* %305, align 1, !alias.scope !10
  %307 = getelementptr i8, i8* %304, i64 16
  %308 = bitcast i8* %307 to <16 x i8>*
  %309 = load <16 x i8>, <16 x i8>* %308, align 1, !alias.scope !10
  %310 = getelementptr inbounds %struct.UConverter, %struct.UConverter* %5, i64 0, i32 13, i64 %303
  %311 = bitcast i8* %310 to <16 x i8>*
  store <16 x i8> %306, <16 x i8>* %311, align 1, !alias.scope !13, !noalias !10
  %312 = getelementptr inbounds i8, i8* %310, i64 16
  %313 = bitcast i8* %312 to <16 x i8>*
  store <16 x i8> %309, <16 x i8>* %313, align 1, !alias.scope !13, !noalias !10
  %314 = or i64 %277, 96
  %315 = add i64 %314, %249
  %316 = getelementptr i8, i8* %246, i64 %314
  %317 = bitcast i8* %316 to <16 x i8>*
  %318 = load <16 x i8>, <16 x i8>* %317, align 1, !alias.scope !10
  %319 = getelementptr i8, i8* %316, i64 16
  %320 = bitcast i8* %319 to <16 x i8>*
  %321 = load <16 x i8>, <16 x i8>* %320, align 1, !alias.scope !10
  %322 = getelementptr inbounds %struct.UConverter, %struct.UConverter* %5, i64 0, i32 13, i64 %315
  %323 = bitcast i8* %322 to <16 x i8>*
  store <16 x i8> %318, <16 x i8>* %323, align 1, !alias.scope !13, !noalias !10
  %324 = getelementptr inbounds i8, i8* %322, i64 16
  %325 = bitcast i8* %324 to <16 x i8>*
  store <16 x i8> %321, <16 x i8>* %325, align 1, !alias.scope !13, !noalias !10
  %326 = add i64 %277, 128
  %327 = add i64 %278, -4
  %328 = icmp eq i64 %327, 0
  br i1 %328, label %329, label %276, !llvm.loop !15

329:                                              ; preds = %276, %265
  %330 = phi i64 [ 0, %265 ], [ %326, %276 ]
  %331 = icmp eq i64 %272, 0
  br i1 %331, label %349, label %332

332:                                              ; preds = %329, %332
  %333 = phi i64 [ %346, %332 ], [ %330, %329 ]
  %334 = phi i64 [ %347, %332 ], [ %272, %329 ]
  %335 = add i64 %333, %249
  %336 = getelementptr i8, i8* %246, i64 %333
  %337 = bitcast i8* %336 to <16 x i8>*
  %338 = load <16 x i8>, <16 x i8>* %337, align 1, !alias.scope !10
  %339 = getelementptr i8, i8* %336, i64 16
  %340 = bitcast i8* %339 to <16 x i8>*
  %341 = load <16 x i8>, <16 x i8>* %340, align 1, !alias.scope !10
  %342 = getelementptr inbounds %struct.UConverter, %struct.UConverter* %5, i64 0, i32 13, i64 %335
  %343 = bitcast i8* %342 to <16 x i8>*
  store <16 x i8> %338, <16 x i8>* %343, align 1, !alias.scope !13, !noalias !10
  %344 = getelementptr inbounds i8, i8* %342, i64 16
  %345 = bitcast i8* %344 to <16 x i8>*
  store <16 x i8> %341, <16 x i8>* %345, align 1, !alias.scope !13, !noalias !10
  %346 = add i64 %333, 32
  %347 = add i64 %334, -1
  %348 = icmp eq i64 %347, 0
  br i1 %348, label %349, label %332, !llvm.loop !16

349:                                              ; preds = %332, %329
  %350 = icmp eq i64 %252, %266
  br i1 %350, label %394, label %351

351:                                              ; preds = %349, %254, %248
  %352 = phi i64 [ %249, %254 ], [ %249, %248 ], [ %267, %349 ]
  %353 = phi i8* [ %246, %254 ], [ %246, %248 ], [ %268, %349 ]
  %354 = sub nsw i64 %251, %352
  %355 = xor i64 %352, -1
  %356 = add nsw i64 %355, %251
  %357 = and i64 %354, 3
  %358 = icmp eq i64 %357, 0
  br i1 %358, label %369, label %359

359:                                              ; preds = %351, %359
  %360 = phi i64 [ %365, %359 ], [ %352, %351 ]
  %361 = phi i8* [ %363, %359 ], [ %353, %351 ]
  %362 = phi i64 [ %367, %359 ], [ %357, %351 ]
  %363 = getelementptr inbounds i8, i8* %361, i64 1
  %364 = load i8, i8* %361, align 1
  %365 = add nuw nsw i64 %360, 1
  %366 = getelementptr inbounds %struct.UConverter, %struct.UConverter* %5, i64 0, i32 13, i64 %360
  store i8 %364, i8* %366, align 1
  %367 = add i64 %362, -1
  %368 = icmp eq i64 %367, 0
  br i1 %368, label %369, label %359, !llvm.loop !18

369:                                              ; preds = %359, %351
  %370 = phi i8* [ undef, %351 ], [ %363, %359 ]
  %371 = phi i64 [ %352, %351 ], [ %365, %359 ]
  %372 = phi i8* [ %353, %351 ], [ %363, %359 ]
  %373 = icmp ult i64 %356, 3
  br i1 %373, label %394, label %374

374:                                              ; preds = %369, %374
  %375 = phi i64 [ %391, %374 ], [ %371, %369 ]
  %376 = phi i8* [ %389, %374 ], [ %372, %369 ]
  %377 = getelementptr inbounds i8, i8* %376, i64 1
  %378 = load i8, i8* %376, align 1
  %379 = add nuw nsw i64 %375, 1
  %380 = getelementptr inbounds %struct.UConverter, %struct.UConverter* %5, i64 0, i32 13, i64 %375
  store i8 %378, i8* %380, align 1
  %381 = getelementptr inbounds i8, i8* %376, i64 2
  %382 = load i8, i8* %377, align 1
  %383 = add nuw nsw i64 %375, 2
  %384 = getelementptr inbounds %struct.UConverter, %struct.UConverter* %5, i64 0, i32 13, i64 %379
  store i8 %382, i8* %384, align 1
  %385 = getelementptr inbounds i8, i8* %376, i64 3
  %386 = load i8, i8* %381, align 1
  %387 = add nuw nsw i64 %375, 3
  %388 = getelementptr inbounds %struct.UConverter, %struct.UConverter* %5, i64 0, i32 13, i64 %383
  store i8 %386, i8* %388, align 1
  %389 = getelementptr inbounds i8, i8* %376, i64 4
  %390 = load i8, i8* %385, align 1
  %391 = add nuw nsw i64 %375, 4
  %392 = getelementptr inbounds %struct.UConverter, %struct.UConverter* %5, i64 0, i32 13, i64 %387
  store i8 %390, i8* %392, align 1
  %393 = icmp eq i64 %391, %251
  br i1 %393, label %394, label %374, !llvm.loop !19

394:                                              ; preds = %369, %374, %349, %241
  %395 = phi i8* [ %246, %241 ], [ %268, %349 ], [ %370, %369 ], [ %389, %374 ]
  %396 = getelementptr inbounds %struct.UConverter, %struct.UConverter* %5, i64 0, i32 14
  store i32 %199, i32* %396, align 8
  store i8 %242, i8* %19, align 8
  %397 = getelementptr inbounds %struct.UConverter, %struct.UConverter* %5, i64 0, i32 15
  store i32 %191, i32* %397, align 4
  store i8* %395, i8** %7, align 8
  store i8* %184, i8** %11, align 8
  br label %976

398:                                              ; preds = %230
  %399 = trunc i32 %198 to i8
  br label %400

400:                                              ; preds = %233, %398, %182
  %401 = phi i8* [ %183, %182 ], [ %201, %398 ], [ %234, %233 ]
  %402 = phi i8 [ %187, %182 ], [ %399, %398 ], [ %236, %233 ]
  %403 = phi i32 [ %190, %182 ], [ %198, %398 ], [ %196, %233 ]
  %404 = icmp eq i8 %402, %188
  br i1 %404, label %405, label %520

405:                                              ; preds = %400
  %406 = icmp sgt i8 %186, 0
  br i1 %406, label %407, label %714

407:                                              ; preds = %405
  %408 = zext i8 %186 to i64
  %409 = icmp ult i8 %186, 32
  br i1 %409, label %410, label %432

410:                                              ; preds = %518, %432, %407
  %411 = phi i64 [ 0, %432 ], [ 0, %407 ], [ %441, %518 ]
  %412 = phi i8* [ %184, %432 ], [ %184, %407 ], [ %442, %518 ]
  %413 = xor i64 %411, -1
  %414 = add nsw i64 %413, %408
  %415 = and i64 %408, 7
  %416 = icmp eq i64 %415, 0
  br i1 %416, label %427, label %417

417:                                              ; preds = %410, %417
  %418 = phi i64 [ %424, %417 ], [ %411, %410 ]
  %419 = phi i8* [ %423, %417 ], [ %412, %410 ]
  %420 = phi i64 [ %425, %417 ], [ %415, %410 ]
  %421 = getelementptr inbounds %struct.UConverter, %struct.UConverter* %5, i64 0, i32 13, i64 %418
  %422 = load i8, i8* %421, align 1
  %423 = getelementptr inbounds i8, i8* %419, i64 1
  store i8 %422, i8* %419, align 1
  %424 = add nuw nsw i64 %418, 1
  %425 = add i64 %420, -1
  %426 = icmp eq i64 %425, 0
  br i1 %426, label %427, label %417, !llvm.loop !20

427:                                              ; preds = %417, %410
  %428 = phi i8* [ undef, %410 ], [ %423, %417 ]
  %429 = phi i64 [ %411, %410 ], [ %424, %417 ]
  %430 = phi i8* [ %412, %410 ], [ %423, %417 ]
  %431 = icmp ult i64 %414, 7
  br i1 %431, label %714, label %678

432:                                              ; preds = %407
  %433 = getelementptr i8, i8* %184, i64 %408
  %434 = getelementptr %struct.UConverter, %struct.UConverter* %5, i64 0, i32 13, i64 0
  %435 = add nuw nsw i64 %408, 65
  %436 = getelementptr i8, i8* %6, i64 %435
  %437 = icmp ult i8* %184, %436
  %438 = icmp ult i8* %434, %433
  %439 = and i1 %437, %438
  br i1 %439, label %410, label %440

440:                                              ; preds = %432
  %441 = and i64 %408, 224
  %442 = getelementptr i8, i8* %184, i64 %441
  %443 = add nsw i64 %441, -32
  %444 = lshr exact i64 %443, 5
  %445 = add nuw nsw i64 %444, 1
  %446 = and i64 %445, 3
  %447 = icmp ult i64 %443, 96
  br i1 %447, label %499, label %448

448:                                              ; preds = %440
  %449 = sub nsw i64 %445, %446
  br label %450

450:                                              ; preds = %450, %448
  %451 = phi i64 [ 0, %448 ], [ %496, %450 ]
  %452 = phi i64 [ %449, %448 ], [ %497, %450 ]
  %453 = getelementptr i8, i8* %184, i64 %451
  %454 = getelementptr inbounds %struct.UConverter, %struct.UConverter* %5, i64 0, i32 13, i64 %451
  %455 = bitcast i8* %454 to <16 x i8>*
  %456 = load <16 x i8>, <16 x i8>* %455, align 1, !alias.scope !21
  %457 = getelementptr inbounds i8, i8* %454, i64 16
  %458 = bitcast i8* %457 to <16 x i8>*
  %459 = load <16 x i8>, <16 x i8>* %458, align 1, !alias.scope !21
  %460 = bitcast i8* %453 to <16 x i8>*
  store <16 x i8> %456, <16 x i8>* %460, align 1, !alias.scope !24, !noalias !21
  %461 = getelementptr i8, i8* %453, i64 16
  %462 = bitcast i8* %461 to <16 x i8>*
  store <16 x i8> %459, <16 x i8>* %462, align 1, !alias.scope !24, !noalias !21
  %463 = or i64 %451, 32
  %464 = getelementptr i8, i8* %184, i64 %463
  %465 = getelementptr inbounds %struct.UConverter, %struct.UConverter* %5, i64 0, i32 13, i64 %463
  %466 = bitcast i8* %465 to <16 x i8>*
  %467 = load <16 x i8>, <16 x i8>* %466, align 1, !alias.scope !21
  %468 = getelementptr inbounds i8, i8* %465, i64 16
  %469 = bitcast i8* %468 to <16 x i8>*
  %470 = load <16 x i8>, <16 x i8>* %469, align 1, !alias.scope !21
  %471 = bitcast i8* %464 to <16 x i8>*
  store <16 x i8> %467, <16 x i8>* %471, align 1, !alias.scope !24, !noalias !21
  %472 = getelementptr i8, i8* %464, i64 16
  %473 = bitcast i8* %472 to <16 x i8>*
  store <16 x i8> %470, <16 x i8>* %473, align 1, !alias.scope !24, !noalias !21
  %474 = or i64 %451, 64
  %475 = getelementptr i8, i8* %184, i64 %474
  %476 = getelementptr inbounds %struct.UConverter, %struct.UConverter* %5, i64 0, i32 13, i64 %474
  %477 = bitcast i8* %476 to <16 x i8>*
  %478 = load <16 x i8>, <16 x i8>* %477, align 1, !alias.scope !21
  %479 = getelementptr inbounds i8, i8* %476, i64 16
  %480 = bitcast i8* %479 to <16 x i8>*
  %481 = load <16 x i8>, <16 x i8>* %480, align 1, !alias.scope !21
  %482 = bitcast i8* %475 to <16 x i8>*
  store <16 x i8> %478, <16 x i8>* %482, align 1, !alias.scope !24, !noalias !21
  %483 = getelementptr i8, i8* %475, i64 16
  %484 = bitcast i8* %483 to <16 x i8>*
  store <16 x i8> %481, <16 x i8>* %484, align 1, !alias.scope !24, !noalias !21
  %485 = or i64 %451, 96
  %486 = getelementptr i8, i8* %184, i64 %485
  %487 = getelementptr inbounds %struct.UConverter, %struct.UConverter* %5, i64 0, i32 13, i64 %485
  %488 = bitcast i8* %487 to <16 x i8>*
  %489 = load <16 x i8>, <16 x i8>* %488, align 1, !alias.scope !21
  %490 = getelementptr inbounds i8, i8* %487, i64 16
  %491 = bitcast i8* %490 to <16 x i8>*
  %492 = load <16 x i8>, <16 x i8>* %491, align 1, !alias.scope !21
  %493 = bitcast i8* %486 to <16 x i8>*
  store <16 x i8> %489, <16 x i8>* %493, align 1, !alias.scope !24, !noalias !21
  %494 = getelementptr i8, i8* %486, i64 16
  %495 = bitcast i8* %494 to <16 x i8>*
  store <16 x i8> %492, <16 x i8>* %495, align 1, !alias.scope !24, !noalias !21
  %496 = add i64 %451, 128
  %497 = add i64 %452, -4
  %498 = icmp eq i64 %497, 0
  br i1 %498, label %499, label %450, !llvm.loop !26

499:                                              ; preds = %450, %440
  %500 = phi i64 [ 0, %440 ], [ %496, %450 ]
  %501 = icmp eq i64 %446, 0
  br i1 %501, label %518, label %502

502:                                              ; preds = %499, %502
  %503 = phi i64 [ %515, %502 ], [ %500, %499 ]
  %504 = phi i64 [ %516, %502 ], [ %446, %499 ]
  %505 = getelementptr i8, i8* %184, i64 %503
  %506 = getelementptr inbounds %struct.UConverter, %struct.UConverter* %5, i64 0, i32 13, i64 %503
  %507 = bitcast i8* %506 to <16 x i8>*
  %508 = load <16 x i8>, <16 x i8>* %507, align 1, !alias.scope !21
  %509 = getelementptr inbounds i8, i8* %506, i64 16
  %510 = bitcast i8* %509 to <16 x i8>*
  %511 = load <16 x i8>, <16 x i8>* %510, align 1, !alias.scope !21
  %512 = bitcast i8* %505 to <16 x i8>*
  store <16 x i8> %508, <16 x i8>* %512, align 1, !alias.scope !24, !noalias !21
  %513 = getelementptr i8, i8* %505, i64 16
  %514 = bitcast i8* %513 to <16 x i8>*
  store <16 x i8> %511, <16 x i8>* %514, align 1, !alias.scope !24, !noalias !21
  %515 = add i64 %503, 32
  %516 = add i64 %504, -1
  %517 = icmp eq i64 %516, 0
  br i1 %517, label %518, label %502, !llvm.loop !27

518:                                              ; preds = %502, %499
  %519 = icmp eq i64 %441, %408
  br i1 %519, label %714, label %410

520:                                              ; preds = %400
  %521 = sext i8 %186 to i32
  %522 = sub nsw i32 %521, %403
  %523 = sext i32 %522 to i64
  %524 = getelementptr inbounds i8, i8* %401, i64 %523
  %525 = icmp slt i8 %186, %402
  br i1 %525, label %526, label %674

526:                                              ; preds = %164, %173, %520
  %527 = phi i8* [ %524, %520 ], [ %127, %173 ], [ %127, %164 ]
  %528 = phi i8 [ %186, %520 ], [ 0, %173 ], [ 0, %164 ]
  %529 = phi i8* [ %184, %520 ], [ %126, %173 ], [ %126, %164 ]
  %530 = phi i8 [ %402, %520 ], [ 1, %173 ], [ 1, %164 ]
  %531 = zext i8 %528 to i64
  %532 = zext i8 %530 to i64
  %533 = sub nsw i64 %532, %531
  %534 = icmp ult i64 %533, 32
  br i1 %534, label %631, label %535

535:                                              ; preds = %526
  %536 = add nuw nsw i64 %531, 65
  %537 = getelementptr i8, i8* %6, i64 %536
  %538 = add nuw nsw i64 %532, 65
  %539 = getelementptr i8, i8* %6, i64 %538
  %540 = sub nsw i64 %532, %531
  %541 = getelementptr i8, i8* %527, i64 %540
  %542 = icmp ult i8* %537, %541
  %543 = icmp ult i8* %527, %539
  %544 = and i1 %542, %543
  br i1 %544, label %631, label %545

545:                                              ; preds = %535
  %546 = and i64 %533, -32
  %547 = add nsw i64 %546, %531
  %548 = getelementptr i8, i8* %527, i64 %546
  %549 = add nsw i64 %546, -32
  %550 = lshr exact i64 %549, 5
  %551 = add nuw nsw i64 %550, 1
  %552 = and i64 %551, 3
  %553 = icmp ult i64 %549, 96
  br i1 %553, label %609, label %554

554:                                              ; preds = %545
  %555 = sub nsw i64 %551, %552
  br label %556

556:                                              ; preds = %556, %554
  %557 = phi i64 [ 0, %554 ], [ %606, %556 ]
  %558 = phi i64 [ %555, %554 ], [ %607, %556 ]
  %559 = add i64 %557, %531
  %560 = getelementptr i8, i8* %527, i64 %557
  %561 = bitcast i8* %560 to <16 x i8>*
  %562 = load <16 x i8>, <16 x i8>* %561, align 1, !alias.scope !28
  %563 = getelementptr i8, i8* %560, i64 16
  %564 = bitcast i8* %563 to <16 x i8>*
  %565 = load <16 x i8>, <16 x i8>* %564, align 1, !alias.scope !28
  %566 = getelementptr inbounds %struct.UConverter, %struct.UConverter* %5, i64 0, i32 13, i64 %559
  %567 = bitcast i8* %566 to <16 x i8>*
  store <16 x i8> %562, <16 x i8>* %567, align 1, !alias.scope !31, !noalias !28
  %568 = getelementptr inbounds i8, i8* %566, i64 16
  %569 = bitcast i8* %568 to <16 x i8>*
  store <16 x i8> %565, <16 x i8>* %569, align 1, !alias.scope !31, !noalias !28
  %570 = or i64 %557, 32
  %571 = add i64 %570, %531
  %572 = getelementptr i8, i8* %527, i64 %570
  %573 = bitcast i8* %572 to <16 x i8>*
  %574 = load <16 x i8>, <16 x i8>* %573, align 1, !alias.scope !28
  %575 = getelementptr i8, i8* %572, i64 16
  %576 = bitcast i8* %575 to <16 x i8>*
  %577 = load <16 x i8>, <16 x i8>* %576, align 1, !alias.scope !28
  %578 = getelementptr inbounds %struct.UConverter, %struct.UConverter* %5, i64 0, i32 13, i64 %571
  %579 = bitcast i8* %578 to <16 x i8>*
  store <16 x i8> %574, <16 x i8>* %579, align 1, !alias.scope !31, !noalias !28
  %580 = getelementptr inbounds i8, i8* %578, i64 16
  %581 = bitcast i8* %580 to <16 x i8>*
  store <16 x i8> %577, <16 x i8>* %581, align 1, !alias.scope !31, !noalias !28
  %582 = or i64 %557, 64
  %583 = add i64 %582, %531
  %584 = getelementptr i8, i8* %527, i64 %582
  %585 = bitcast i8* %584 to <16 x i8>*
  %586 = load <16 x i8>, <16 x i8>* %585, align 1, !alias.scope !28
  %587 = getelementptr i8, i8* %584, i64 16
  %588 = bitcast i8* %587 to <16 x i8>*
  %589 = load <16 x i8>, <16 x i8>* %588, align 1, !alias.scope !28
  %590 = getelementptr inbounds %struct.UConverter, %struct.UConverter* %5, i64 0, i32 13, i64 %583
  %591 = bitcast i8* %590 to <16 x i8>*
  store <16 x i8> %586, <16 x i8>* %591, align 1, !alias.scope !31, !noalias !28
  %592 = getelementptr inbounds i8, i8* %590, i64 16
  %593 = bitcast i8* %592 to <16 x i8>*
  store <16 x i8> %589, <16 x i8>* %593, align 1, !alias.scope !31, !noalias !28
  %594 = or i64 %557, 96
  %595 = add i64 %594, %531
  %596 = getelementptr i8, i8* %527, i64 %594
  %597 = bitcast i8* %596 to <16 x i8>*
  %598 = load <16 x i8>, <16 x i8>* %597, align 1, !alias.scope !28
  %599 = getelementptr i8, i8* %596, i64 16
  %600 = bitcast i8* %599 to <16 x i8>*
  %601 = load <16 x i8>, <16 x i8>* %600, align 1, !alias.scope !28
  %602 = getelementptr inbounds %struct.UConverter, %struct.UConverter* %5, i64 0, i32 13, i64 %595
  %603 = bitcast i8* %602 to <16 x i8>*
  store <16 x i8> %598, <16 x i8>* %603, align 1, !alias.scope !31, !noalias !28
  %604 = getelementptr inbounds i8, i8* %602, i64 16
  %605 = bitcast i8* %604 to <16 x i8>*
  store <16 x i8> %601, <16 x i8>* %605, align 1, !alias.scope !31, !noalias !28
  %606 = add i64 %557, 128
  %607 = add i64 %558, -4
  %608 = icmp eq i64 %607, 0
  br i1 %608, label %609, label %556, !llvm.loop !33

609:                                              ; preds = %556, %545
  %610 = phi i64 [ 0, %545 ], [ %606, %556 ]
  %611 = icmp eq i64 %552, 0
  br i1 %611, label %629, label %612

612:                                              ; preds = %609, %612
  %613 = phi i64 [ %626, %612 ], [ %610, %609 ]
  %614 = phi i64 [ %627, %612 ], [ %552, %609 ]
  %615 = add i64 %613, %531
  %616 = getelementptr i8, i8* %527, i64 %613
  %617 = bitcast i8* %616 to <16 x i8>*
  %618 = load <16 x i8>, <16 x i8>* %617, align 1, !alias.scope !28
  %619 = getelementptr i8, i8* %616, i64 16
  %620 = bitcast i8* %619 to <16 x i8>*
  %621 = load <16 x i8>, <16 x i8>* %620, align 1, !alias.scope !28
  %622 = getelementptr inbounds %struct.UConverter, %struct.UConverter* %5, i64 0, i32 13, i64 %615
  %623 = bitcast i8* %622 to <16 x i8>*
  store <16 x i8> %618, <16 x i8>* %623, align 1, !alias.scope !31, !noalias !28
  %624 = getelementptr inbounds i8, i8* %622, i64 16
  %625 = bitcast i8* %624 to <16 x i8>*
  store <16 x i8> %621, <16 x i8>* %625, align 1, !alias.scope !31, !noalias !28
  %626 = add i64 %613, 32
  %627 = add i64 %614, -1
  %628 = icmp eq i64 %627, 0
  br i1 %628, label %629, label %612, !llvm.loop !34

629:                                              ; preds = %612, %609
  %630 = icmp eq i64 %533, %546
  br i1 %630, label %674, label %631

631:                                              ; preds = %629, %535, %526
  %632 = phi i64 [ %531, %535 ], [ %531, %526 ], [ %547, %629 ]
  %633 = phi i8* [ %527, %535 ], [ %527, %526 ], [ %548, %629 ]
  %634 = sub nsw i64 %532, %632
  %635 = xor i64 %632, -1
  %636 = add nsw i64 %635, %532
  %637 = and i64 %634, 3
  %638 = icmp eq i64 %637, 0
  br i1 %638, label %649, label %639

639:                                              ; preds = %631, %639
  %640 = phi i64 [ %645, %639 ], [ %632, %631 ]
  %641 = phi i8* [ %643, %639 ], [ %633, %631 ]
  %642 = phi i64 [ %647, %639 ], [ %637, %631 ]
  %643 = getelementptr inbounds i8, i8* %641, i64 1
  %644 = load i8, i8* %641, align 1
  %645 = add nuw nsw i64 %640, 1
  %646 = getelementptr inbounds %struct.UConverter, %struct.UConverter* %5, i64 0, i32 13, i64 %640
  store i8 %644, i8* %646, align 1
  %647 = add i64 %642, -1
  %648 = icmp eq i64 %647, 0
  br i1 %648, label %649, label %639, !llvm.loop !35

649:                                              ; preds = %639, %631
  %650 = phi i8* [ undef, %631 ], [ %643, %639 ]
  %651 = phi i64 [ %632, %631 ], [ %645, %639 ]
  %652 = phi i8* [ %633, %631 ], [ %643, %639 ]
  %653 = icmp ult i64 %636, 3
  br i1 %653, label %674, label %654

654:                                              ; preds = %649, %654
  %655 = phi i64 [ %671, %654 ], [ %651, %649 ]
  %656 = phi i8* [ %669, %654 ], [ %652, %649 ]
  %657 = getelementptr inbounds i8, i8* %656, i64 1
  %658 = load i8, i8* %656, align 1
  %659 = add nuw nsw i64 %655, 1
  %660 = getelementptr inbounds %struct.UConverter, %struct.UConverter* %5, i64 0, i32 13, i64 %655
  store i8 %658, i8* %660, align 1
  %661 = getelementptr inbounds i8, i8* %656, i64 2
  %662 = load i8, i8* %657, align 1
  %663 = add nuw nsw i64 %655, 2
  %664 = getelementptr inbounds %struct.UConverter, %struct.UConverter* %5, i64 0, i32 13, i64 %659
  store i8 %662, i8* %664, align 1
  %665 = getelementptr inbounds i8, i8* %656, i64 3
  %666 = load i8, i8* %661, align 1
  %667 = add nuw nsw i64 %655, 3
  %668 = getelementptr inbounds %struct.UConverter, %struct.UConverter* %5, i64 0, i32 13, i64 %663
  store i8 %666, i8* %668, align 1
  %669 = getelementptr inbounds i8, i8* %656, i64 4
  %670 = load i8, i8* %665, align 1
  %671 = add nuw nsw i64 %655, 4
  %672 = getelementptr inbounds %struct.UConverter, %struct.UConverter* %5, i64 0, i32 13, i64 %667
  store i8 %670, i8* %672, align 1
  %673 = icmp eq i64 %671, %532
  br i1 %673, label %674, label %654, !llvm.loop !36

674:                                              ; preds = %649, %654, %629, %520
  %675 = phi i8* [ %184, %520 ], [ %529, %629 ], [ %529, %654 ], [ %529, %649 ]
  %676 = phi i8 [ %402, %520 ], [ %530, %629 ], [ %530, %654 ], [ %530, %649 ]
  %677 = phi i8* [ %524, %520 ], [ %548, %629 ], [ %650, %649 ], [ %669, %654 ]
  store i8 %676, i8* %19, align 8
  store i8* %677, i8** %7, align 8
  store i8* %675, i8** %11, align 8
  store i32 12, i32* %2, align 4
  br label %976

678:                                              ; preds = %427, %678
  %679 = phi i64 [ %712, %678 ], [ %429, %427 ]
  %680 = phi i8* [ %711, %678 ], [ %430, %427 ]
  %681 = getelementptr inbounds %struct.UConverter, %struct.UConverter* %5, i64 0, i32 13, i64 %679
  %682 = load i8, i8* %681, align 1
  %683 = getelementptr inbounds i8, i8* %680, i64 1
  store i8 %682, i8* %680, align 1
  %684 = add nuw nsw i64 %679, 1
  %685 = getelementptr inbounds %struct.UConverter, %struct.UConverter* %5, i64 0, i32 13, i64 %684
  %686 = load i8, i8* %685, align 1
  %687 = getelementptr inbounds i8, i8* %680, i64 2
  store i8 %686, i8* %683, align 1
  %688 = add nuw nsw i64 %679, 2
  %689 = getelementptr inbounds %struct.UConverter, %struct.UConverter* %5, i64 0, i32 13, i64 %688
  %690 = load i8, i8* %689, align 1
  %691 = getelementptr inbounds i8, i8* %680, i64 3
  store i8 %690, i8* %687, align 1
  %692 = add nuw nsw i64 %679, 3
  %693 = getelementptr inbounds %struct.UConverter, %struct.UConverter* %5, i64 0, i32 13, i64 %692
  %694 = load i8, i8* %693, align 1
  %695 = getelementptr inbounds i8, i8* %680, i64 4
  store i8 %694, i8* %691, align 1
  %696 = add nuw nsw i64 %679, 4
  %697 = getelementptr inbounds %struct.UConverter, %struct.UConverter* %5, i64 0, i32 13, i64 %696
  %698 = load i8, i8* %697, align 1
  %699 = getelementptr inbounds i8, i8* %680, i64 5
  store i8 %698, i8* %695, align 1
  %700 = add nuw nsw i64 %679, 5
  %701 = getelementptr inbounds %struct.UConverter, %struct.UConverter* %5, i64 0, i32 13, i64 %700
  %702 = load i8, i8* %701, align 1
  %703 = getelementptr inbounds i8, i8* %680, i64 6
  store i8 %702, i8* %699, align 1
  %704 = add nuw nsw i64 %679, 6
  %705 = getelementptr inbounds %struct.UConverter, %struct.UConverter* %5, i64 0, i32 13, i64 %704
  %706 = load i8, i8* %705, align 1
  %707 = getelementptr inbounds i8, i8* %680, i64 7
  store i8 %706, i8* %703, align 1
  %708 = add nuw nsw i64 %679, 7
  %709 = getelementptr inbounds %struct.UConverter, %struct.UConverter* %5, i64 0, i32 13, i64 %708
  %710 = load i8, i8* %709, align 1
  %711 = getelementptr inbounds i8, i8* %680, i64 8
  store i8 %710, i8* %707, align 1
  %712 = add nuw nsw i64 %679, 8
  %713 = icmp eq i64 %712, %408
  br i1 %713, label %714, label %678, !llvm.loop !37

714:                                              ; preds = %427, %678, %518, %405
  %715 = phi i8* [ %184, %405 ], [ %442, %518 ], [ %428, %427 ], [ %711, %678 ]
  %716 = phi i8 [ 0, %405 ], [ %186, %518 ], [ %186, %678 ], [ %186, %427 ]
  %717 = sext i8 %186 to i32
  %718 = sub nsw i32 %717, %403
  %719 = sext i32 %718 to i64
  %720 = getelementptr inbounds i8, i8* %401, i64 %719
  %721 = icmp slt i8 %716, %188
  br i1 %721, label %722, label %883

722:                                              ; preds = %714
  %723 = xor i8 %186, -1
  %724 = add i8 %188, %723
  %725 = zext i8 %724 to i64
  %726 = add nuw nsw i64 %725, 1
  %727 = icmp ult i64 %726, 32
  br i1 %727, label %826, label %728

728:                                              ; preds = %722
  %729 = xor i8 %186, -1
  %730 = add i8 %188, %729
  %731 = zext i8 %730 to i64
  %732 = add nuw nsw i64 %731, 1
  %733 = getelementptr i8, i8* %715, i64 %732
  %734 = zext i8 %186 to i64
  %735 = add nuw nsw i64 %734, %731
  %736 = add nuw nsw i64 %735, 1
  %737 = zext i32 %403 to i64
  %738 = sub nsw i64 %736, %737
  %739 = getelementptr i8, i8* %401, i64 %738
  %740 = icmp ult i8* %715, %739
  %741 = icmp ult i8* %720, %733
  %742 = and i1 %740, %741
  br i1 %742, label %826, label %743

743:                                              ; preds = %728
  %744 = and i64 %726, 480
  %745 = trunc i64 %744 to i8
  %746 = add i8 %716, %745
  %747 = getelementptr i8, i8* %715, i64 %744
  %748 = getelementptr i8, i8* %720, i64 %744
  %749 = add nsw i64 %744, -32
  %750 = lshr exact i64 %749, 5
  %751 = add nuw nsw i64 %750, 1
  %752 = and i64 %751, 3
  %753 = icmp ult i64 %749, 96
  br i1 %753, label %805, label %754

754:                                              ; preds = %743
  %755 = sub nsw i64 %751, %752
  br label %756

756:                                              ; preds = %756, %754
  %757 = phi i64 [ 0, %754 ], [ %802, %756 ]
  %758 = phi i64 [ %755, %754 ], [ %803, %756 ]
  %759 = getelementptr i8, i8* %715, i64 %757
  %760 = getelementptr i8, i8* %720, i64 %757
  %761 = bitcast i8* %760 to <16 x i8>*
  %762 = load <16 x i8>, <16 x i8>* %761, align 1, !alias.scope !38
  %763 = getelementptr i8, i8* %760, i64 16
  %764 = bitcast i8* %763 to <16 x i8>*
  %765 = load <16 x i8>, <16 x i8>* %764, align 1, !alias.scope !38
  %766 = bitcast i8* %759 to <16 x i8>*
  store <16 x i8> %762, <16 x i8>* %766, align 1, !alias.scope !41, !noalias !38
  %767 = getelementptr i8, i8* %759, i64 16
  %768 = bitcast i8* %767 to <16 x i8>*
  store <16 x i8> %765, <16 x i8>* %768, align 1, !alias.scope !41, !noalias !38
  %769 = or i64 %757, 32
  %770 = getelementptr i8, i8* %715, i64 %769
  %771 = getelementptr i8, i8* %720, i64 %769
  %772 = bitcast i8* %771 to <16 x i8>*
  %773 = load <16 x i8>, <16 x i8>* %772, align 1, !alias.scope !38
  %774 = getelementptr i8, i8* %771, i64 16
  %775 = bitcast i8* %774 to <16 x i8>*
  %776 = load <16 x i8>, <16 x i8>* %775, align 1, !alias.scope !38
  %777 = bitcast i8* %770 to <16 x i8>*
  store <16 x i8> %773, <16 x i8>* %777, align 1, !alias.scope !41, !noalias !38
  %778 = getelementptr i8, i8* %770, i64 16
  %779 = bitcast i8* %778 to <16 x i8>*
  store <16 x i8> %776, <16 x i8>* %779, align 1, !alias.scope !41, !noalias !38
  %780 = or i64 %757, 64
  %781 = getelementptr i8, i8* %715, i64 %780
  %782 = getelementptr i8, i8* %720, i64 %780
  %783 = bitcast i8* %782 to <16 x i8>*
  %784 = load <16 x i8>, <16 x i8>* %783, align 1, !alias.scope !38
  %785 = getelementptr i8, i8* %782, i64 16
  %786 = bitcast i8* %785 to <16 x i8>*
  %787 = load <16 x i8>, <16 x i8>* %786, align 1, !alias.scope !38
  %788 = bitcast i8* %781 to <16 x i8>*
  store <16 x i8> %784, <16 x i8>* %788, align 1, !alias.scope !41, !noalias !38
  %789 = getelementptr i8, i8* %781, i64 16
  %790 = bitcast i8* %789 to <16 x i8>*
  store <16 x i8> %787, <16 x i8>* %790, align 1, !alias.scope !41, !noalias !38
  %791 = or i64 %757, 96
  %792 = getelementptr i8, i8* %715, i64 %791
  %793 = getelementptr i8, i8* %720, i64 %791
  %794 = bitcast i8* %793 to <16 x i8>*
  %795 = load <16 x i8>, <16 x i8>* %794, align 1, !alias.scope !38
  %796 = getelementptr i8, i8* %793, i64 16
  %797 = bitcast i8* %796 to <16 x i8>*
  %798 = load <16 x i8>, <16 x i8>* %797, align 1, !alias.scope !38
  %799 = bitcast i8* %792 to <16 x i8>*
  store <16 x i8> %795, <16 x i8>* %799, align 1, !alias.scope !41, !noalias !38
  %800 = getelementptr i8, i8* %792, i64 16
  %801 = bitcast i8* %800 to <16 x i8>*
  store <16 x i8> %798, <16 x i8>* %801, align 1, !alias.scope !41, !noalias !38
  %802 = add i64 %757, 128
  %803 = add i64 %758, -4
  %804 = icmp eq i64 %803, 0
  br i1 %804, label %805, label %756, !llvm.loop !43

805:                                              ; preds = %756, %743
  %806 = phi i64 [ 0, %743 ], [ %802, %756 ]
  %807 = icmp eq i64 %752, 0
  br i1 %807, label %824, label %808

808:                                              ; preds = %805, %808
  %809 = phi i64 [ %821, %808 ], [ %806, %805 ]
  %810 = phi i64 [ %822, %808 ], [ %752, %805 ]
  %811 = getelementptr i8, i8* %715, i64 %809
  %812 = getelementptr i8, i8* %720, i64 %809
  %813 = bitcast i8* %812 to <16 x i8>*
  %814 = load <16 x i8>, <16 x i8>* %813, align 1, !alias.scope !38
  %815 = getelementptr i8, i8* %812, i64 16
  %816 = bitcast i8* %815 to <16 x i8>*
  %817 = load <16 x i8>, <16 x i8>* %816, align 1, !alias.scope !38
  %818 = bitcast i8* %811 to <16 x i8>*
  store <16 x i8> %814, <16 x i8>* %818, align 1, !alias.scope !41, !noalias !38
  %819 = getelementptr i8, i8* %811, i64 16
  %820 = bitcast i8* %819 to <16 x i8>*
  store <16 x i8> %817, <16 x i8>* %820, align 1, !alias.scope !41, !noalias !38
  %821 = add i64 %809, 32
  %822 = add i64 %810, -1
  %823 = icmp eq i64 %822, 0
  br i1 %823, label %824, label %808, !llvm.loop !44

824:                                              ; preds = %808, %805
  %825 = icmp eq i64 %726, %744
  br i1 %825, label %883, label %826

826:                                              ; preds = %824, %728, %722
  %827 = phi i8 [ %716, %728 ], [ %716, %722 ], [ %746, %824 ]
  %828 = phi i8* [ %715, %728 ], [ %715, %722 ], [ %747, %824 ]
  %829 = phi i8* [ %720, %728 ], [ %720, %722 ], [ %748, %824 ]
  %830 = sub i8 %188, %827
  %831 = xor i8 %827, -1
  %832 = add i8 %188, %831
  %833 = and i8 %830, 7
  %834 = icmp eq i8 %833, 0
  br i1 %834, label %846, label %835

835:                                              ; preds = %826, %835
  %836 = phi i8 [ %843, %835 ], [ %827, %826 ]
  %837 = phi i8* [ %842, %835 ], [ %828, %826 ]
  %838 = phi i8* [ %840, %835 ], [ %829, %826 ]
  %839 = phi i8 [ %844, %835 ], [ %833, %826 ]
  %840 = getelementptr inbounds i8, i8* %838, i64 1
  %841 = load i8, i8* %838, align 1
  %842 = getelementptr inbounds i8, i8* %837, i64 1
  store i8 %841, i8* %837, align 1
  %843 = add nuw nsw i8 %836, 1
  %844 = add i8 %839, -1
  %845 = icmp eq i8 %844, 0
  br i1 %845, label %846, label %835, !llvm.loop !45

846:                                              ; preds = %835, %826
  %847 = phi i8* [ undef, %826 ], [ %840, %835 ]
  %848 = phi i8* [ undef, %826 ], [ %842, %835 ]
  %849 = phi i8 [ %827, %826 ], [ %843, %835 ]
  %850 = phi i8* [ %828, %826 ], [ %842, %835 ]
  %851 = phi i8* [ %829, %826 ], [ %840, %835 ]
  %852 = icmp ult i8 %832, 7
  br i1 %852, label %883, label %853

853:                                              ; preds = %846, %853
  %854 = phi i8 [ %881, %853 ], [ %849, %846 ]
  %855 = phi i8* [ %880, %853 ], [ %850, %846 ]
  %856 = phi i8* [ %878, %853 ], [ %851, %846 ]
  %857 = getelementptr inbounds i8, i8* %856, i64 1
  %858 = load i8, i8* %856, align 1
  %859 = getelementptr inbounds i8, i8* %855, i64 1
  store i8 %858, i8* %855, align 1
  %860 = getelementptr inbounds i8, i8* %856, i64 2
  %861 = load i8, i8* %857, align 1
  %862 = getelementptr inbounds i8, i8* %855, i64 2
  store i8 %861, i8* %859, align 1
  %863 = getelementptr inbounds i8, i8* %856, i64 3
  %864 = load i8, i8* %860, align 1
  %865 = getelementptr inbounds i8, i8* %855, i64 3
  store i8 %864, i8* %862, align 1
  %866 = getelementptr inbounds i8, i8* %856, i64 4
  %867 = load i8, i8* %863, align 1
  %868 = getelementptr inbounds i8, i8* %855, i64 4
  store i8 %867, i8* %865, align 1
  %869 = getelementptr inbounds i8, i8* %856, i64 5
  %870 = load i8, i8* %866, align 1
  %871 = getelementptr inbounds i8, i8* %855, i64 5
  store i8 %870, i8* %868, align 1
  %872 = getelementptr inbounds i8, i8* %856, i64 6
  %873 = load i8, i8* %869, align 1
  %874 = getelementptr inbounds i8, i8* %855, i64 6
  store i8 %873, i8* %871, align 1
  %875 = getelementptr inbounds i8, i8* %856, i64 7
  %876 = load i8, i8* %872, align 1
  %877 = getelementptr inbounds i8, i8* %855, i64 7
  store i8 %876, i8* %874, align 1
  %878 = getelementptr inbounds i8, i8* %856, i64 8
  %879 = load i8, i8* %875, align 1
  %880 = getelementptr inbounds i8, i8* %855, i64 8
  store i8 %879, i8* %877, align 1
  %881 = add nuw nsw i8 %854, 8
  %882 = icmp eq i8 %881, %188
  br i1 %882, label %883, label %853, !llvm.loop !46

883:                                              ; preds = %846, %853, %824, %714
  %884 = phi i8* [ %720, %714 ], [ %748, %824 ], [ %847, %846 ], [ %878, %853 ]
  %885 = phi i8* [ %715, %714 ], [ %747, %824 ], [ %848, %846 ], [ %880, %853 ]
  %886 = sub nsw i32 %185, %403
  br label %117

887:                                              ; preds = %133, %117
  %888 = phi i8* [ %118, %117 ], [ %135, %133 ]
  %889 = phi i8* [ %119, %117 ], [ %136, %133 ]
  %890 = load i32, i32* %2, align 4
  %891 = icmp slt i32 %890, 1
  %892 = icmp ult i8* %888, %10
  %893 = and i1 %892, %891
  br i1 %893, label %894, label %974

894:                                              ; preds = %887
  %895 = load i8*, i8** %13, align 8
  %896 = icmp eq i8* %889, %895
  br i1 %896, label %897, label %898

897:                                              ; preds = %894
  store i32 15, i32* %2, align 4
  br label %974

898:                                              ; preds = %894
  %899 = load i8, i8* %888, align 1
  %900 = zext i8 %899 to i32
  %901 = icmp sgt i8 %899, -1
  br i1 %901, label %911, label %902

902:                                              ; preds = %898
  %903 = add nsw i8 %899, 62
  %904 = icmp ult i8 %903, 51
  br i1 %904, label %905, label %911

905:                                              ; preds = %902
  %906 = icmp ugt i8 %899, -33
  %907 = zext i1 %906 to i8
  %908 = icmp ugt i8 %899, -17
  %909 = select i1 %908, i8 3, i8 2
  %910 = add nuw nsw i8 %909, %907
  br label %911

911:                                              ; preds = %905, %902, %898
  %912 = phi i8 [ 1, %898 ], [ %910, %905 ], [ 0, %902 ]
  %913 = sext i8 %912 to i64
  %914 = ptrtoint i8* %888 to i64
  %915 = sub i64 %32, %914
  %916 = icmp slt i64 %915, %913
  br i1 %916, label %917, label %973

917:                                              ; preds = %911
  %918 = getelementptr inbounds %struct.UConverter, %struct.UConverter* %5, i64 0, i32 13, i64 0
  store i8 %899, i8* %918, align 1
  %919 = getelementptr inbounds i8, i8* %888, i64 1
  %920 = icmp eq i8* %919, %10
  br i1 %920, label %924, label %921

921:                                              ; preds = %917
  %922 = icmp slt i8 %912, 3
  %923 = icmp eq i8 %912, 3
  br label %930

924:                                              ; preds = %964, %917
  %925 = phi i32 [ %900, %917 ], [ %967, %964 ]
  %926 = phi i8 [ 1, %917 ], [ %968, %964 ]
  %927 = getelementptr inbounds %struct.UConverter, %struct.UConverter* %5, i64 0, i32 14
  store i32 %925, i32* %927, align 8
  store i8 %926, i8* %19, align 8
  %928 = sext i8 %912 to i32
  %929 = getelementptr inbounds %struct.UConverter, %struct.UConverter* %5, i64 0, i32 15
  store i32 %928, i32* %929, align 4
  br label %974

930:                                              ; preds = %921, %964
  %931 = phi i8* [ %919, %921 ], [ %971, %964 ]
  %932 = phi i8 [ 1, %921 ], [ %968, %964 ]
  %933 = phi i32 [ %900, %921 ], [ %967, %964 ]
  %934 = load i8, i8* %931, align 1
  %935 = icmp sgt i8 %932, 1
  %936 = or i1 %922, %935
  br i1 %936, label %937, label %940

937:                                              ; preds = %930
  %938 = icmp slt i8 %934, -64
  %939 = zext i1 %938 to i8
  br label %960

940:                                              ; preds = %930
  br i1 %923, label %941, label %951

941:                                              ; preds = %940
  %942 = and i32 %933, 15
  %943 = zext i32 %942 to i64
  %944 = getelementptr inbounds [17 x i8], [17 x i8]* @.str, i64 0, i64 %943
  %945 = load i8, i8* %944, align 1
  %946 = lshr i8 %934, 5
  %947 = zext i8 %946 to i32
  %948 = shl i32 1, %947
  %949 = trunc i32 %948 to i8
  %950 = and i8 %945, %949
  br label %960

951:                                              ; preds = %940
  %952 = lshr i8 %934, 4
  %953 = zext i8 %952 to i64
  %954 = getelementptr inbounds [17 x i8], [17 x i8]* @.str.3, i64 0, i64 %953
  %955 = load i8, i8* %954, align 1
  %956 = and i32 %933, 7
  %957 = shl i32 1, %956
  %958 = trunc i32 %957 to i8
  %959 = and i8 %955, %958
  br label %960

960:                                              ; preds = %937, %941, %951
  %961 = phi i8 [ %939, %937 ], [ %950, %941 ], [ %959, %951 ]
  %962 = icmp eq i8 %961, 0
  br i1 %962, label %963, label %964

963:                                              ; preds = %960
  store i8 %932, i8* %19, align 8
  store i32 12, i32* %2, align 4
  br label %974

964:                                              ; preds = %960
  %965 = shl i32 %933, 6
  %966 = zext i8 %934 to i32
  %967 = add nsw i32 %965, %966
  %968 = add i8 %932, 1
  %969 = sext i8 %932 to i64
  %970 = getelementptr inbounds %struct.UConverter, %struct.UConverter* %5, i64 0, i32 13, i64 %969
  store i8 %934, i8* %970, align 1
  %971 = getelementptr inbounds i8, i8* %931, i64 1
  %972 = icmp eq i8* %971, %10
  br i1 %972, label %924, label %930

973:                                              ; preds = %911
  store i32 -127, i32* %2, align 4
  br label %974

974:                                              ; preds = %887, %897, %924, %963, %973
  %975 = phi i8* [ %888, %897 ], [ %10, %924 ], [ %931, %963 ], [ %888, %973 ], [ %888, %887 ]
  store i8* %975, i8** %7, align 8
  store i8* %889, i8** %11, align 8
  br label %976

976:                                              ; preds = %974, %674, %394, %42
  ret void
}

declare void @ucnv_getCompleteUnicodeSet_69(%struct.UConverter*, %struct.USetAdder*, i32, i32*) #3

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { nofree norecurse nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{!3}
!3 = distinct !{!3, !4}
!4 = distinct !{!4, !"LVerDomain"}
!5 = !{!6}
!6 = distinct !{!6, !4}
!7 = distinct !{!7, !8}
!8 = !{!"llvm.loop.isvectorized", i32 1}
!9 = distinct !{!9, !8}
!10 = !{!11}
!11 = distinct !{!11, !12}
!12 = distinct !{!12, !"LVerDomain"}
!13 = !{!14}
!14 = distinct !{!14, !12}
!15 = distinct !{!15, !8}
!16 = distinct !{!16, !17}
!17 = !{!"llvm.loop.unroll.disable"}
!18 = distinct !{!18, !17}
!19 = distinct !{!19, !8}
!20 = distinct !{!20, !17}
!21 = !{!22}
!22 = distinct !{!22, !23}
!23 = distinct !{!23, !"LVerDomain"}
!24 = !{!25}
!25 = distinct !{!25, !23}
!26 = distinct !{!26, !8}
!27 = distinct !{!27, !17}
!28 = !{!29}
!29 = distinct !{!29, !30}
!30 = distinct !{!30, !"LVerDomain"}
!31 = !{!32}
!32 = distinct !{!32, !30}
!33 = distinct !{!33, !8}
!34 = distinct !{!34, !17}
!35 = distinct !{!35, !17}
!36 = distinct !{!36, !8}
!37 = distinct !{!37, !8}
!38 = !{!39}
!39 = distinct !{!39, !40}
!40 = distinct !{!40, !"LVerDomain"}
!41 = !{!42}
!42 = distinct !{!42, !40}
!43 = distinct !{!43, !8}
!44 = distinct !{!44, !17}
!45 = distinct !{!45, !17}
!46 = distinct !{!46, !8}
