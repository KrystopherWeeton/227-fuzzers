; ModuleID = '../../third_party/skia/src/core/SkPixmap.cpp'
source_filename = "../../third_party/skia/src/core/SkPixmap.cpp"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%class.SkSimpleMatrixProvider = type { %class.SkMatrixProvider }
%class.SkMatrixProvider = type { i32 (...)**, %class.SkM44, %class.SkMatrix }
%class.SkM44 = type { [16 x float] }
%class.SkMatrix = type { [9 x float], i32 }
%class.SkPaint = type <{ %class.sk_sp.6, %class.sk_sp.7, %class.sk_sp.8, %class.sk_sp.9, %class.sk_sp.10, %struct.SkRGBA4f, float, float, %union.anon, [4 x i8] }>
%class.sk_sp.6 = type { %class.SkPathEffect* }
%class.SkPathEffect = type { %class.SkFlattenable.base, [4 x i8] }
%class.SkFlattenable.base = type { %class.SkRefCnt.base }
%class.SkRefCnt.base = type { %class.SkRefCntBase.base }
%class.SkRefCntBase.base = type <{ i32 (...)**, %"struct.std::__1::atomic" }>
%"struct.std::__1::atomic" = type { %"struct.std::__1::__atomic_base" }
%"struct.std::__1::__atomic_base" = type { %"struct.std::__1::__atomic_base.0" }
%"struct.std::__1::__atomic_base.0" = type { %"struct.std::__1::__cxx_atomic_impl" }
%"struct.std::__1::__cxx_atomic_impl" = type { %"struct.std::__1::__cxx_atomic_base_impl" }
%"struct.std::__1::__cxx_atomic_base_impl" = type { i32 }
%class.sk_sp.7 = type { %class.SkShader* }
%class.SkShader = type { %class.SkFlattenable.base, [4 x i8] }
%class.sk_sp.8 = type { %class.SkMaskFilter* }
%class.SkMaskFilter = type { %class.SkFlattenable.base, [4 x i8] }
%class.sk_sp.9 = type { %class.SkColorFilter* }
%class.SkColorFilter = type { %class.SkFlattenable.base, [4 x i8] }
%class.sk_sp.10 = type { %class.SkImageFilter* }
%class.SkImageFilter = type { %class.SkFlattenable.base, [4 x i8] }
%struct.SkRGBA4f = type { float, float, float, float }
%union.anon = type { %struct.anon }
%struct.anon = type { i32 }
%class.SkPixmap = type { i8*, i64, %struct.SkImageInfo }
%struct.SkImageInfo = type { %class.SkColorInfo, %struct.SkISize }
%class.SkColorInfo = type { %class.sk_sp, i32, i32 }
%class.sk_sp = type { %class.SkColorSpace* }
%class.SkColorSpace = type <{ %class.SkNVRefCnt, i32, i32, %struct.skcms_TransferFunction, %struct.skcms_Matrix3x3, %struct.skcms_TransferFunction, %struct.skcms_Matrix3x3, %class.SkOnce, [3 x i8] }>
%class.SkNVRefCnt = type { %"struct.std::__1::atomic" }
%struct.skcms_TransferFunction = type { float, float, float, float, float, float, float }
%struct.skcms_Matrix3x3 = type { [3 x [3 x float]] }
%class.SkOnce = type { %"struct.std::__1::atomic.1" }
%"struct.std::__1::atomic.1" = type { %"struct.std::__1::__atomic_base.2" }
%"struct.std::__1::__atomic_base.2" = type { %"struct.std::__1::__atomic_base.3" }
%"struct.std::__1::__atomic_base.3" = type { %"struct.std::__1::__cxx_atomic_impl.4" }
%"struct.std::__1::__cxx_atomic_impl.4" = type { %"struct.std::__1::__cxx_atomic_base_impl.5" }
%"struct.std::__1::__cxx_atomic_base_impl.5" = type { i8 }
%struct.SkISize = type { i32, i32 }
%struct.SkMask = type <{ i8*, %struct.SkIRect, i32, i8, [3 x i8] }>
%struct.SkIRect = type { i32, i32, i32, i32 }
%struct.SkReadPixelsRec = type { i8*, i64, %struct.SkImageInfo, i32, i32 }
%class.SkRasterClip = type { %class.SkRegion, %class.SkAAClip, i8, i8, i8, %struct.SkIRect*, %class.sk_sp.7 }
%class.SkRegion = type { %struct.SkIRect, %"struct.SkRegion::RunHead"* }
%"struct.SkRegion::RunHead" = type opaque
%class.SkAAClip = type { %struct.SkIRect, %"struct.SkAAClip::RunHead"* }
%"struct.SkAAClip::RunHead" = type opaque
%class.SkDraw = type { %"class.SkGlyphRunListPainter::BitmapDevicePainter", %class.SkPixmap, %class.SkMatrixProvider*, %class.SkRasterClip*, %class.SkPixmap* }
%"class.SkGlyphRunListPainter::BitmapDevicePainter" = type { i32 (...)** }
%struct.SkSamplingOptions = type { i8, %struct.SkCubicResampler, i32, i32 }
%struct.SkCubicResampler = type { float, float }
%class.SkBitmap = type { %class.sk_sp.11, %class.SkPixmap, %class.sk_sp.12 }
%class.sk_sp.11 = type { %class.SkPixelRef* }
%class.SkPixelRef = type opaque
%class.sk_sp.12 = type { %class.SkMipmap* }
%class.SkMipmap = type opaque
%struct.SkRect = type { float, float, float, float }
%class.sk_sp.13 = type { %class.SkImage* }
%class.SkImage = type <{ %class.SkRefCnt.base, [4 x i8], %struct.SkImageInfo, i32, [4 x i8] }>
%class.sk_sp.14 = type { %class.SkSurface* }
%class.SkSurface = type { %class.SkRefCnt.base, %class.SkSurfaceProps, i32, i32, i32 }
%class.SkSurfaceProps = type { i32, i32 }
%class.SkRefCntBase = type <{ i32 (...)**, %"struct.std::__1::atomic", [4 x i8] }>
%class.SkCanvas = type { i32 (...)**, %class.SkDeque, %"class.SkCanvas::MCRec"*, %class.sk_sp.15, [384 x i64], %class.sk_sp.16, %class.SkSurfaceProps, i32, %"class.std::__1::unique_ptr", %class.SkSurface_Base*, %struct.SkIRect, %struct.SkRect, %"class.std::__1::unique_ptr.18" }
%class.SkDeque = type { i8*, i8*, %"struct.SkDeque::Block"*, %"struct.SkDeque::Block"*, i64, i8*, i32, i32 }
%"struct.SkDeque::Block" = type opaque
%"class.SkCanvas::MCRec" = type opaque
%class.sk_sp.15 = type { %class.SkMarkerStack* }
%class.SkMarkerStack = type opaque
%class.sk_sp.16 = type { %class.SkBaseDevice* }
%class.SkBaseDevice = type opaque
%"class.std::__1::unique_ptr" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %class.SkRasterHandleAllocator* }
%class.SkRasterHandleAllocator = type { i32 (...)** }
%class.SkSurface_Base = type opaque
%"class.std::__1::unique_ptr.18" = type { %"class.std::__1::__compressed_pair.19" }
%"class.std::__1::__compressed_pair.19" = type { %"struct.std::__1::__compressed_pair_elem.20" }
%"struct.std::__1::__compressed_pair_elem.20" = type { %class.SkGlyphRunBuilder* }
%class.SkGlyphRunBuilder = type { i32, %class.SkAutoTMalloc, i32, %class.SkAutoTMalloc, %"class.std::__1::vector", %class.SkGlyphRunList, %"class.std::__1::vector.39" }
%class.SkAutoTMalloc = type { %"class.std::__1::unique_ptr.21" }
%"class.std::__1::unique_ptr.21" = type { %"class.std::__1::__compressed_pair.22" }
%"class.std::__1::__compressed_pair.22" = type { %"struct.std::__1::__compressed_pair_elem.23" }
%"struct.std::__1::__compressed_pair_elem.23" = type { %struct.SkPoint* }
%struct.SkPoint = type { float, float }
%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { %class.SkGlyphRun*, %class.SkGlyphRun*, %"class.std::__1::__compressed_pair.29" }
%class.SkGlyphRun = type { %class.SkZip, %class.SkSpan, %class.SkSpan.26, %class.SkSpan.27, %class.SkFont }
%class.SkZip = type { %"class.std::__1::tuple", i64 }
%"class.std::__1::tuple" = type { %"struct.std::__1::__tuple_impl" }
%"struct.std::__1::__tuple_impl" = type { %"class.std::__1::__tuple_leaf", %"class.std::__1::__tuple_leaf.25" }
%"class.std::__1::__tuple_leaf" = type { i16* }
%"class.std::__1::__tuple_leaf.25" = type { %struct.SkPoint* }
%class.SkSpan = type { i8*, i64 }
%class.SkSpan.26 = type { i32*, i64 }
%class.SkSpan.27 = type { %struct.SkPoint*, i64 }
%class.SkFont = type <{ %class.sk_sp.28, float, float, float, i8, i8, i8, i8 }>
%class.sk_sp.28 = type { %class.SkTypeface* }
%class.SkTypeface = type <{ %class.SkWeakRefCnt, i32, %class.SkFontStyle, %struct.SkRect, %class.SkOnce, i8, [6 x i8] }>
%class.SkWeakRefCnt = type { %class.SkRefCnt.base, %"struct.std::__1::atomic" }
%class.SkFontStyle = type { i32 }
%"class.std::__1::__compressed_pair.29" = type { %"struct.std::__1::__compressed_pair_elem.30" }
%"struct.std::__1::__compressed_pair_elem.30" = type { %class.SkGlyphRun* }
%class.SkGlyphRunList = type { %class.SkSpan.32, %class.SkTextBlob*, %struct.SkRect, %struct.SkPoint }
%class.SkSpan.32 = type { %class.SkGlyphRun*, i64 }
%class.SkTextBlob = type { %class.SkNVRefCnt.33, %struct.SkRect, i32, %"struct.std::__1::atomic.34" }
%class.SkNVRefCnt.33 = type { %"struct.std::__1::atomic" }
%"struct.std::__1::atomic.34" = type { %"struct.std::__1::__atomic_base.35" }
%"struct.std::__1::__atomic_base.35" = type { %"struct.std::__1::__atomic_base.36" }
%"struct.std::__1::__atomic_base.36" = type { %"struct.std::__1::__cxx_atomic_impl.37" }
%"struct.std::__1::__cxx_atomic_impl.37" = type { %"struct.std::__1::__cxx_atomic_base_impl.38" }
%"struct.std::__1::__cxx_atomic_base_impl.38" = type { i32 }
%"class.std::__1::vector.39" = type { %"class.std::__1::__vector_base.40" }
%"class.std::__1::__vector_base.40" = type { i16*, i16*, %"class.std::__1::__compressed_pair.41" }
%"class.std::__1::__compressed_pair.41" = type { %"struct.std::__1::__compressed_pair_elem.42" }
%"struct.std::__1::__compressed_pair_elem.42" = type { i16* }

$_ZN16SkMatrixProviderD2Ev = comdat any

$_ZN22SkSimpleMatrixProviderD0Ev = comdat any

$_ZNK22SkSimpleMatrixProvider16getLocalToMarkerEjP5SkM44 = comdat any

$_ZNK22SkSimpleMatrixProvider29localToDeviceHitsPixelCentersEv = comdat any

$_ZN16SkMatrixProviderD0Ev = comdat any

$_ZTV22SkSimpleMatrixProvider = comdat any

$_ZTV16SkMatrixProvider = comdat any

@__const._ZNK8SkPixmap5eraseERK8SkRGBA4fIL11SkAlphaType3EEP12SkColorSpacePK7SkIRect.matrixProvider = private unnamed_addr constant %class.SkSimpleMatrixProvider { %class.SkMatrixProvider { i32 (...)** inttoptr (i64 -6148914691236517206 to i32 (...)**), %class.SkM44 { [16 x float] [float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000] }, %class.SkMatrix { [9 x float] [float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000], i32 -1431655766 } } }, align 8
@_ZTV22SkSimpleMatrixProvider = linkonce_odr hidden unnamed_addr constant { [6 x i8*] } { [6 x i8*] [i8* null, i8* null, i8* bitcast (void (%class.SkMatrixProvider*)* @_ZN16SkMatrixProviderD2Ev to i8*), i8* bitcast (void (%class.SkSimpleMatrixProvider*)* @_ZN22SkSimpleMatrixProviderD0Ev to i8*), i8* bitcast (i1 (%class.SkSimpleMatrixProvider*, i32, %class.SkM44*)* @_ZNK22SkSimpleMatrixProvider16getLocalToMarkerEjP5SkM44 to i8*), i8* bitcast (i1 (%class.SkSimpleMatrixProvider*)* @_ZNK22SkSimpleMatrixProvider29localToDeviceHitsPixelCentersEv to i8*)] }, comdat, align 8
@_ZTV16SkMatrixProvider = linkonce_odr hidden unnamed_addr constant { [6 x i8*] } { [6 x i8*] [i8* null, i8* null, i8* bitcast (void (%class.SkMatrixProvider*)* @_ZN16SkMatrixProviderD2Ev to i8*), i8* bitcast (void (%class.SkMatrixProvider*)* @_ZN16SkMatrixProviderD0Ev to i8*), i8* bitcast (void ()* @__cxa_pure_virtual to i8*), i8* bitcast (void ()* @__cxa_pure_virtual to i8*)] }, comdat, align 8
@_ZTV6SkDraw = external unnamed_addr constant { [7 x i8*] }, align 8
@__const._ZL16draw_orientationRK8SkPixmapS1_15SkEncodedOrigin.p = private unnamed_addr constant %class.SkPaint <{ %class.sk_sp.6 { %class.SkPathEffect* inttoptr (i64 -6148914691236517206 to %class.SkPathEffect*) }, %class.sk_sp.7 { %class.SkShader* inttoptr (i64 -6148914691236517206 to %class.SkShader*) }, %class.sk_sp.8 { %class.SkMaskFilter* inttoptr (i64 -6148914691236517206 to %class.SkMaskFilter*) }, %class.sk_sp.9 { %class.SkColorFilter* inttoptr (i64 -6148914691236517206 to %class.SkColorFilter*) }, %class.sk_sp.10 { %class.SkImageFilter* inttoptr (i64 -6148914691236517206 to %class.SkImageFilter*) }, %struct.SkRGBA4f { float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000 }, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, %union.anon { %struct.anon { i32 -1431655766 } }, [4 x i8] c"\AA\AA\AA\AA" }>, align 8
@.str = private unnamed_addr constant [55 x i8] c"../../third_party/skia/include/codec/SkEncodedOrigin.h\00", align 1
@.str.1 = private unnamed_addr constant [18 x i8] c"Unexpected origin\00", align 1

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN8SkPixmap5resetEv(%class.SkPixmap* nocapture) local_unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %class.SkPixmap, %class.SkPixmap* %0, i64 0, i32 2
  %3 = getelementptr inbounds %struct.SkImageInfo, %struct.SkImageInfo* %2, i64 0, i32 0, i32 0, i32 0
  %4 = bitcast %class.SkPixmap* %0 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %4, i8 0, i64 16, i1 false)
  %5 = load %class.SkColorSpace*, %class.SkColorSpace** %3, align 8
  %6 = bitcast %struct.SkImageInfo* %2 to i64*
  store i64 0, i64* %6, align 8
  %7 = icmp eq %class.SkColorSpace* %5, null
  br i1 %7, label %14, label %8

8:                                                ; preds = %1
  %9 = getelementptr inbounds %class.SkColorSpace, %class.SkColorSpace* %5, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %10 = atomicrmw add i32* %9, i32 -1 acq_rel
  %11 = icmp eq i32 %10, 1
  br i1 %11, label %12, label %14

12:                                               ; preds = %8
  %13 = bitcast %class.SkColorSpace* %5 to i8*
  tail call void @_ZdlPv(i8* %13) #12
  br label %14

14:                                               ; preds = %12, %8, %1
  %15 = getelementptr inbounds %class.SkPixmap, %class.SkPixmap* %0, i64 0, i32 2, i32 0, i32 1
  %16 = bitcast i32* %15 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %16, i8 0, i64 16, i1 false)
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN8SkPixmap5resetERK11SkImageInfoPKvm(%class.SkPixmap*, %struct.SkImageInfo* readonly dereferenceable(24), i8*, i64) local_unnamed_addr #0 align 2 {
  %5 = getelementptr inbounds %class.SkPixmap, %class.SkPixmap* %0, i64 0, i32 0
  store i8* %2, i8** %5, align 8
  %6 = getelementptr inbounds %class.SkPixmap, %class.SkPixmap* %0, i64 0, i32 1
  store i64 %3, i64* %6, align 8
  %7 = getelementptr inbounds %class.SkPixmap, %class.SkPixmap* %0, i64 0, i32 2
  %8 = icmp eq %struct.SkImageInfo* %7, %1
  br i1 %8, label %26, label %9

9:                                                ; preds = %4
  %10 = getelementptr inbounds %struct.SkImageInfo, %struct.SkImageInfo* %1, i64 0, i32 0, i32 0, i32 0
  %11 = load %class.SkColorSpace*, %class.SkColorSpace** %10, align 8
  %12 = icmp eq %class.SkColorSpace* %11, null
  br i1 %12, label %16, label %13

13:                                               ; preds = %9
  %14 = getelementptr inbounds %class.SkColorSpace, %class.SkColorSpace* %11, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %15 = atomicrmw add i32* %14, i32 1 monotonic
  br label %16

16:                                               ; preds = %13, %9
  %17 = getelementptr inbounds %struct.SkImageInfo, %struct.SkImageInfo* %7, i64 0, i32 0, i32 0, i32 0
  %18 = load %class.SkColorSpace*, %class.SkColorSpace** %17, align 8
  store %class.SkColorSpace* %11, %class.SkColorSpace** %17, align 8
  %19 = icmp eq %class.SkColorSpace* %18, null
  br i1 %19, label %26, label %20

20:                                               ; preds = %16
  %21 = getelementptr inbounds %class.SkColorSpace, %class.SkColorSpace* %18, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %22 = atomicrmw add i32* %21, i32 -1 acq_rel
  %23 = icmp eq i32 %22, 1
  br i1 %23, label %24, label %26

24:                                               ; preds = %20
  %25 = bitcast %class.SkColorSpace* %18 to i8*
  tail call void @_ZdlPv(i8* %25) #12
  br label %26

26:                                               ; preds = %4, %16, %20, %24
  %27 = getelementptr inbounds %class.SkPixmap, %class.SkPixmap* %0, i64 0, i32 2, i32 0, i32 1
  %28 = getelementptr inbounds %struct.SkImageInfo, %struct.SkImageInfo* %1, i64 0, i32 0, i32 1
  %29 = bitcast i32* %28 to i64*
  %30 = bitcast i32* %27 to i64*
  %31 = load i64, i64* %29, align 8
  store i64 %31, i64* %30, align 8
  %32 = getelementptr inbounds %class.SkPixmap, %class.SkPixmap* %0, i64 0, i32 2, i32 1
  %33 = getelementptr inbounds %struct.SkImageInfo, %struct.SkImageInfo* %1, i64 0, i32 1
  %34 = bitcast %struct.SkISize* %33 to i64*
  %35 = bitcast %struct.SkISize* %32 to i64*
  %36 = load i64, i64* %34, align 8
  store i64 %36, i64* %35, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN8SkPixmap5resetERK6SkMask(%class.SkPixmap*, %struct.SkMask* nocapture readonly dereferenceable(32)) local_unnamed_addr #0 align 2 {
  %3 = alloca %struct.SkImageInfo, align 16
  %4 = getelementptr inbounds %struct.SkMask, %struct.SkMask* %1, i64 0, i32 3
  %5 = load i8, i8* %4, align 4
  %6 = icmp eq i8 %5, 1
  br i1 %6, label %7, label %59

7:                                                ; preds = %2
  %8 = bitcast %struct.SkImageInfo* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %8) #13
  %9 = getelementptr inbounds %struct.SkMask, %struct.SkMask* %1, i64 0, i32 1, i32 2
  %10 = load i32, i32* %9, align 4
  %11 = getelementptr inbounds %struct.SkMask, %struct.SkMask* %1, i64 0, i32 1, i32 0
  %12 = load i32, i32* %11, align 4
  %13 = sub i32 %10, %12
  %14 = getelementptr inbounds %struct.SkMask, %struct.SkMask* %1, i64 0, i32 1, i32 3
  %15 = load i32, i32* %14, align 4
  %16 = getelementptr inbounds %struct.SkMask, %struct.SkMask* %1, i64 0, i32 1, i32 1
  %17 = load i32, i32* %16, align 4
  %18 = sub i32 %15, %17
  %19 = zext i32 %18 to i64
  %20 = shl nuw i64 %19, 32
  %21 = zext i32 %13 to i64
  %22 = or i64 %20, %21
  %23 = getelementptr inbounds %struct.SkImageInfo, %struct.SkImageInfo* %3, i64 0, i32 0, i32 1
  %24 = bitcast %struct.SkImageInfo* %3 to <2 x i64>*
  store <2 x i64> <i64 0, i64 8589934593>, <2 x i64>* %24, align 16, !alias.scope !2
  %25 = getelementptr inbounds %struct.SkImageInfo, %struct.SkImageInfo* %3, i64 0, i32 1
  %26 = bitcast %struct.SkISize* %25 to i64*
  store i64 %22, i64* %26, align 16, !alias.scope !2
  %27 = bitcast %struct.SkMask* %1 to i64*
  %28 = load i64, i64* %27, align 8
  %29 = getelementptr inbounds %struct.SkMask, %struct.SkMask* %1, i64 0, i32 2
  %30 = load i32, i32* %29, align 8
  %31 = zext i32 %30 to i64
  %32 = bitcast %class.SkPixmap* %0 to i64*
  store i64 %28, i64* %32, align 8
  %33 = getelementptr inbounds %class.SkPixmap, %class.SkPixmap* %0, i64 0, i32 1
  store i64 %31, i64* %33, align 8
  %34 = getelementptr inbounds %struct.SkImageInfo, %struct.SkImageInfo* %3, i64 0, i32 0, i32 0, i32 0
  %35 = getelementptr inbounds %class.SkPixmap, %class.SkPixmap* %0, i64 0, i32 2, i32 0, i32 0, i32 0
  %36 = load %class.SkColorSpace*, %class.SkColorSpace** %35, align 8
  %37 = bitcast %class.SkColorSpace* %36 to i8*
  %38 = getelementptr inbounds %class.SkPixmap, %class.SkPixmap* %0, i64 0, i32 2, i32 0, i32 0, i32 0
  store %class.SkColorSpace* null, %class.SkColorSpace** %38, align 8
  %39 = icmp eq %class.SkColorSpace* %36, null
  br i1 %39, label %45, label %40

40:                                               ; preds = %7
  %41 = getelementptr inbounds %class.SkColorSpace, %class.SkColorSpace* %36, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %42 = atomicrmw add i32* %41, i32 -1 acq_rel
  %43 = icmp eq i32 %42, 1
  br i1 %43, label %44, label %45

44:                                               ; preds = %40
  tail call void @_ZdlPv(i8* %37) #12
  br label %45

45:                                               ; preds = %7, %40, %44
  %46 = getelementptr inbounds %class.SkPixmap, %class.SkPixmap* %0, i64 0, i32 2, i32 0, i32 1
  %47 = bitcast i32* %23 to <2 x i64>*
  %48 = load <2 x i64>, <2 x i64>* %47, align 8
  %49 = bitcast i32* %46 to <2 x i64>*
  store <2 x i64> %48, <2 x i64>* %49, align 8
  %50 = load %class.SkColorSpace*, %class.SkColorSpace** %34, align 16
  %51 = icmp eq %class.SkColorSpace* %50, null
  br i1 %51, label %58, label %52

52:                                               ; preds = %45
  %53 = getelementptr inbounds %class.SkColorSpace, %class.SkColorSpace* %50, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %54 = atomicrmw add i32* %53, i32 -1 acq_rel
  %55 = icmp eq i32 %54, 1
  br i1 %55, label %56, label %58

56:                                               ; preds = %52
  %57 = bitcast %class.SkColorSpace* %50 to i8*
  tail call void @_ZdlPv(i8* %57) #12
  br label %58

58:                                               ; preds = %45, %52, %56
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %8) #13
  br label %75

59:                                               ; preds = %2
  %60 = getelementptr inbounds %class.SkPixmap, %class.SkPixmap* %0, i64 0, i32 2
  %61 = getelementptr inbounds %struct.SkImageInfo, %struct.SkImageInfo* %60, i64 0, i32 0, i32 0, i32 0
  %62 = bitcast %class.SkPixmap* %0 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %62, i8 0, i64 16, i1 false) #13
  %63 = load %class.SkColorSpace*, %class.SkColorSpace** %61, align 8
  %64 = bitcast %struct.SkImageInfo* %60 to i64*
  store i64 0, i64* %64, align 8
  %65 = icmp eq %class.SkColorSpace* %63, null
  br i1 %65, label %72, label %66

66:                                               ; preds = %59
  %67 = getelementptr inbounds %class.SkColorSpace, %class.SkColorSpace* %63, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %68 = atomicrmw add i32* %67, i32 -1 acq_rel
  %69 = icmp eq i32 %68, 1
  br i1 %69, label %70, label %72

70:                                               ; preds = %66
  %71 = bitcast %class.SkColorSpace* %63 to i8*
  tail call void @_ZdlPv(i8* %71) #12
  br label %72

72:                                               ; preds = %59, %66, %70
  %73 = getelementptr inbounds %class.SkPixmap, %class.SkPixmap* %0, i64 0, i32 2, i32 0, i32 1
  %74 = bitcast i32* %73 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %74, i8 0, i64 16, i1 false) #13
  br label %75

75:                                               ; preds = %72, %58
  %76 = phi i1 [ true, %58 ], [ false, %72 ]
  ret i1 %76
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN8SkPixmap13setColorSpaceE5sk_spI12SkColorSpaceE(%class.SkPixmap* nocapture, %class.sk_sp* nocapture) local_unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %class.SkPixmap, %class.SkPixmap* %0, i64 0, i32 2
  %4 = getelementptr inbounds %class.sk_sp, %class.sk_sp* %1, i64 0, i32 0
  %5 = bitcast %class.sk_sp* %1 to i64*
  %6 = load i64, i64* %5, align 8
  store %class.SkColorSpace* null, %class.SkColorSpace** %4, align 8
  %7 = getelementptr inbounds %class.SkPixmap, %class.SkPixmap* %0, i64 0, i32 2, i32 1
  %8 = bitcast %struct.SkISize* %7 to i64*
  %9 = load i64, i64* %8, align 8, !noalias !7
  %10 = getelementptr inbounds %class.SkPixmap, %class.SkPixmap* %0, i64 0, i32 2, i32 0, i32 1
  %11 = load i32, i32* %10, align 8, !noalias !10
  %12 = getelementptr inbounds %class.SkPixmap, %class.SkPixmap* %0, i64 0, i32 2, i32 0, i32 2
  %13 = load i32, i32* %12, align 4, !noalias !10
  %14 = zext i32 %11 to i64
  %15 = zext i32 %13 to i64
  %16 = shl nuw i64 %15, 32
  %17 = or i64 %16, %14
  %18 = getelementptr inbounds %struct.SkImageInfo, %struct.SkImageInfo* %3, i64 0, i32 0, i32 0, i32 0
  %19 = load %class.SkColorSpace*, %class.SkColorSpace** %18, align 8
  %20 = bitcast %struct.SkImageInfo* %3 to i64*
  store i64 %6, i64* %20, align 8
  %21 = icmp eq %class.SkColorSpace* %19, null
  br i1 %21, label %28, label %22

22:                                               ; preds = %2
  %23 = getelementptr inbounds %class.SkColorSpace, %class.SkColorSpace* %19, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %24 = atomicrmw add i32* %23, i32 -1 acq_rel
  %25 = icmp eq i32 %24, 1
  br i1 %25, label %26, label %28

26:                                               ; preds = %22
  %27 = bitcast %class.SkColorSpace* %19 to i8*
  tail call void @_ZdlPv(i8* %27) #12
  br label %28

28:                                               ; preds = %2, %22, %26
  %29 = bitcast i32* %10 to i64*
  store i64 %17, i64* %29, align 8
  store i64 %9, i64* %8, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZNK8SkPixmap13extractSubsetEPS_RK7SkIRect(%class.SkPixmap*, %class.SkPixmap*, %struct.SkIRect* dereferenceable(16)) local_unnamed_addr #0 align 2 {
  %4 = alloca %struct.SkIRect, align 4
  %5 = alloca %struct.SkIRect, align 4
  %6 = alloca %struct.SkImageInfo, align 8
  %7 = bitcast %struct.SkIRect* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %7) #13
  %8 = getelementptr inbounds %struct.SkIRect, %struct.SkIRect* %4, i64 0, i32 0
  %9 = getelementptr inbounds %struct.SkIRect, %struct.SkIRect* %4, i64 0, i32 1
  %10 = getelementptr inbounds %struct.SkIRect, %struct.SkIRect* %4, i64 0, i32 2
  %11 = getelementptr inbounds %struct.SkIRect, %struct.SkIRect* %4, i64 0, i32 3
  %12 = bitcast %struct.SkIRect* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %12) #13
  %13 = getelementptr inbounds %struct.SkIRect, %struct.SkIRect* %5, i64 0, i32 0
  %14 = getelementptr inbounds %struct.SkIRect, %struct.SkIRect* %5, i64 0, i32 1
  %15 = getelementptr inbounds %struct.SkIRect, %struct.SkIRect* %5, i64 0, i32 2
  %16 = getelementptr inbounds %struct.SkIRect, %struct.SkIRect* %5, i64 0, i32 3
  %17 = getelementptr inbounds %class.SkPixmap, %class.SkPixmap* %0, i64 0, i32 2, i32 1, i32 0
  %18 = bitcast %struct.SkIRect* %5 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 4 %18, i8 -86, i64 16, i1 false)
  %19 = load i32, i32* %17, align 4
  %20 = getelementptr inbounds %class.SkPixmap, %class.SkPixmap* %0, i64 0, i32 2, i32 1, i32 1
  %21 = load i32, i32* %20, align 4
  store i32 0, i32* %8, align 4
  store i32 0, i32* %9, align 4
  store i32 %19, i32* %10, align 4
  store i32 %21, i32* %11, align 4
  %22 = call zeroext i1 @_ZN7SkIRect9intersectERKS_S1_(%struct.SkIRect* nonnull %5, %struct.SkIRect* nonnull dereferenceable(16) %4, %struct.SkIRect* dereferenceable(16) %2) #13
  br i1 %22, label %23, label %104

23:                                               ; preds = %3
  %24 = getelementptr inbounds %class.SkPixmap, %class.SkPixmap* %0, i64 0, i32 0
  %25 = load i8*, i8** %24, align 8
  %26 = icmp eq i8* %25, null
  br i1 %26, label %27, label %30

27:                                               ; preds = %23
  %28 = load i32, i32* %13, align 4
  %29 = load i32, i32* %14, align 4
  br label %45

30:                                               ; preds = %23
  %31 = getelementptr inbounds %class.SkPixmap, %class.SkPixmap* %0, i64 0, i32 2, i32 0
  %32 = call i32 @_ZNK11SkColorInfo13bytesPerPixelEv(%class.SkColorInfo* %31) #13
  %33 = sext i32 %32 to i64
  %34 = load i8*, i8** %24, align 8
  %35 = load i32, i32* %14, align 4
  %36 = sext i32 %35 to i64
  %37 = getelementptr inbounds %class.SkPixmap, %class.SkPixmap* %0, i64 0, i32 1
  %38 = load i64, i64* %37, align 8
  %39 = mul i64 %38, %36
  %40 = getelementptr inbounds i8, i8* %34, i64 %39
  %41 = load i32, i32* %13, align 4
  %42 = sext i32 %41 to i64
  %43 = mul nsw i64 %42, %33
  %44 = getelementptr inbounds i8, i8* %40, i64 %43
  br label %45

45:                                               ; preds = %27, %30
  %46 = phi i32 [ %35, %30 ], [ %29, %27 ]
  %47 = phi i32 [ %41, %30 ], [ %28, %27 ]
  %48 = phi i8* [ %44, %30 ], [ null, %27 ]
  %49 = bitcast %struct.SkImageInfo* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %49) #13
  %50 = load i32, i32* %15, align 4
  %51 = sub i32 %50, %47
  %52 = load i32, i32* %16, align 4
  %53 = sub i32 %52, %46
  %54 = zext i32 %53 to i64
  %55 = shl nuw i64 %54, 32
  %56 = zext i32 %51 to i64
  %57 = or i64 %55, %56
  %58 = getelementptr inbounds %struct.SkImageInfo, %struct.SkImageInfo* %6, i64 0, i32 0, i32 0, i32 0
  %59 = getelementptr inbounds %class.SkPixmap, %class.SkPixmap* %0, i64 0, i32 2, i32 0, i32 0, i32 0
  %60 = load %class.SkColorSpace*, %class.SkColorSpace** %59, align 8, !noalias !13
  %61 = icmp eq %class.SkColorSpace* %60, null
  br i1 %61, label %65, label %62

62:                                               ; preds = %45
  %63 = getelementptr inbounds %class.SkColorSpace, %class.SkColorSpace* %60, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %64 = atomicrmw add i32* %63, i32 1 monotonic, !noalias !13
  br label %65

65:                                               ; preds = %45, %62
  store %class.SkColorSpace* %60, %class.SkColorSpace** %58, align 8, !alias.scope !13
  %66 = getelementptr inbounds %struct.SkImageInfo, %struct.SkImageInfo* %6, i64 0, i32 0, i32 1
  %67 = getelementptr inbounds %class.SkPixmap, %class.SkPixmap* %0, i64 0, i32 2, i32 0, i32 1
  %68 = bitcast i32* %67 to i64*
  %69 = bitcast i32* %66 to i64*
  %70 = load i64, i64* %68, align 8, !noalias !13
  store i64 %70, i64* %69, align 8, !alias.scope !13
  %71 = getelementptr inbounds %struct.SkImageInfo, %struct.SkImageInfo* %6, i64 0, i32 1
  %72 = bitcast %struct.SkISize* %71 to i64*
  store i64 %57, i64* %72, align 8, !alias.scope !13
  %73 = getelementptr inbounds %class.SkPixmap, %class.SkPixmap* %0, i64 0, i32 1
  %74 = load i64, i64* %73, align 8
  %75 = getelementptr inbounds %class.SkPixmap, %class.SkPixmap* %1, i64 0, i32 0
  store i8* %48, i8** %75, align 8
  %76 = getelementptr inbounds %class.SkPixmap, %class.SkPixmap* %1, i64 0, i32 1
  store i64 %74, i64* %76, align 8
  br i1 %61, label %80, label %77

77:                                               ; preds = %65
  %78 = getelementptr inbounds %class.SkColorSpace, %class.SkColorSpace* %60, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %79 = atomicrmw add i32* %78, i32 1 monotonic
  br label %80

80:                                               ; preds = %77, %65
  %81 = getelementptr inbounds %class.SkPixmap, %class.SkPixmap* %1, i64 0, i32 2, i32 0, i32 0, i32 0
  %82 = load %class.SkColorSpace*, %class.SkColorSpace** %81, align 8
  store %class.SkColorSpace* %60, %class.SkColorSpace** %81, align 8
  %83 = icmp eq %class.SkColorSpace* %82, null
  br i1 %83, label %90, label %84

84:                                               ; preds = %80
  %85 = getelementptr inbounds %class.SkColorSpace, %class.SkColorSpace* %82, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %86 = atomicrmw add i32* %85, i32 -1 acq_rel
  %87 = icmp eq i32 %86, 1
  br i1 %87, label %88, label %90

88:                                               ; preds = %84
  %89 = bitcast %class.SkColorSpace* %82 to i8*
  call void @_ZdlPv(i8* %89) #12
  br label %90

90:                                               ; preds = %80, %84, %88
  %91 = getelementptr inbounds %class.SkPixmap, %class.SkPixmap* %1, i64 0, i32 2, i32 0, i32 1
  %92 = bitcast i32* %66 to <2 x i64>*
  %93 = load <2 x i64>, <2 x i64>* %92, align 8
  %94 = bitcast i32* %91 to <2 x i64>*
  store <2 x i64> %93, <2 x i64>* %94, align 8
  %95 = load %class.SkColorSpace*, %class.SkColorSpace** %58, align 8
  %96 = icmp eq %class.SkColorSpace* %95, null
  br i1 %96, label %103, label %97

97:                                               ; preds = %90
  %98 = getelementptr inbounds %class.SkColorSpace, %class.SkColorSpace* %95, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %99 = atomicrmw add i32* %98, i32 -1 acq_rel
  %100 = icmp eq i32 %99, 1
  br i1 %100, label %101, label %103

101:                                              ; preds = %97
  %102 = bitcast %class.SkColorSpace* %95 to i8*
  call void @_ZdlPv(i8* %102) #12
  br label %103

103:                                              ; preds = %90, %97, %101
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %49) #13
  br label %104

104:                                              ; preds = %3, %103
  %105 = phi i1 [ true, %103 ], [ false, %3 ]
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %12) #13
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %7) #13
  ret i1 %105
}

declare zeroext i1 @_ZN7SkIRect9intersectERKS_S1_(%struct.SkIRect*, %struct.SkIRect* dereferenceable(16), %struct.SkIRect* dereferenceable(16)) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden float @_ZNK8SkPixmap9getAlphafEii(%class.SkPixmap* nocapture readonly, i32, i32) local_unnamed_addr #3 align 2 {
  %4 = getelementptr inbounds %class.SkPixmap, %class.SkPixmap* %0, i64 0, i32 2, i32 0, i32 1
  %5 = load i32, i32* %4, align 8
  switch i32 %5, label %76 [
    i32 0, label %126
    i32 1, label %126
    i32 2, label %136
    i32 3, label %6
    i32 4, label %77
    i32 5, label %136
    i32 6, label %77
    i32 7, label %88
    i32 9, label %136
    i32 8, label %88
    i32 10, label %136
    i32 11, label %126
    i32 12, label %99
    i32 13, label %99
    i32 14, label %17
    i32 15, label %136
    i32 18, label %31
    i32 19, label %136
    i32 16, label %46
    i32 17, label %136
    i32 20, label %60
  ]

6:                                                ; preds = %3
  %7 = shl i32 %1, 1
  %8 = getelementptr inbounds %class.SkPixmap, %class.SkPixmap* %0, i64 0, i32 0
  %9 = load i8*, i8** %8, align 8
  %10 = sext i32 %2 to i64
  %11 = getelementptr inbounds %class.SkPixmap, %class.SkPixmap* %0, i64 0, i32 1
  %12 = load i64, i64* %11, align 8
  %13 = mul i64 %12, %10
  %14 = getelementptr inbounds i8, i8* %9, i64 %13
  %15 = sext i32 %7 to i64
  %16 = getelementptr inbounds i8, i8* %14, i64 %15
  br label %141

17:                                               ; preds = %3
  %18 = shl i32 %1, 4
  %19 = getelementptr inbounds %class.SkPixmap, %class.SkPixmap* %0, i64 0, i32 0
  %20 = load i8*, i8** %19, align 8
  %21 = sext i32 %2 to i64
  %22 = getelementptr inbounds %class.SkPixmap, %class.SkPixmap* %0, i64 0, i32 1
  %23 = load i64, i64* %22, align 8
  %24 = mul i64 %23, %21
  %25 = getelementptr inbounds i8, i8* %20, i64 %24
  %26 = sext i32 %18 to i64
  %27 = getelementptr inbounds i8, i8* %25, i64 %26
  %28 = getelementptr inbounds i8, i8* %27, i64 12
  %29 = bitcast i8* %28 to float*
  %30 = load float, float* %29, align 4
  br label %161

31:                                               ; preds = %3
  %32 = shl i32 %1, 1
  %33 = getelementptr inbounds %class.SkPixmap, %class.SkPixmap* %0, i64 0, i32 0
  %34 = load i8*, i8** %33, align 8
  %35 = sext i32 %2 to i64
  %36 = getelementptr inbounds %class.SkPixmap, %class.SkPixmap* %0, i64 0, i32 1
  %37 = load i64, i64* %36, align 8
  %38 = mul i64 %37, %35
  %39 = getelementptr inbounds i8, i8* %34, i64 %38
  %40 = sext i32 %32 to i64
  %41 = getelementptr inbounds i8, i8* %39, i64 %40
  %42 = bitcast i8* %41 to i16*
  %43 = load i16, i16* %42, align 2
  %44 = uitofp i16 %43 to float
  %45 = fmul float %44, 0x3EF0001000000000
  br label %161

46:                                               ; preds = %3
  %47 = shl i32 %1, 1
  %48 = getelementptr inbounds %class.SkPixmap, %class.SkPixmap* %0, i64 0, i32 0
  %49 = load i8*, i8** %48, align 8
  %50 = sext i32 %2 to i64
  %51 = getelementptr inbounds %class.SkPixmap, %class.SkPixmap* %0, i64 0, i32 1
  %52 = load i64, i64* %51, align 8
  %53 = mul i64 %52, %50
  %54 = getelementptr inbounds i8, i8* %49, i64 %53
  %55 = sext i32 %47 to i64
  %56 = getelementptr inbounds i8, i8* %54, i64 %55
  %57 = bitcast i8* %56 to i16*
  %58 = load i16, i16* %57, align 2
  %59 = tail call float @_Z13SkHalfToFloatt(i16 zeroext %58) #13
  br label %161

60:                                               ; preds = %3
  %61 = shl i32 %1, 3
  %62 = getelementptr inbounds %class.SkPixmap, %class.SkPixmap* %0, i64 0, i32 0
  %63 = load i8*, i8** %62, align 8
  %64 = sext i32 %2 to i64
  %65 = getelementptr inbounds %class.SkPixmap, %class.SkPixmap* %0, i64 0, i32 1
  %66 = load i64, i64* %65, align 8
  %67 = mul i64 %66, %64
  %68 = getelementptr inbounds i8, i8* %63, i64 %67
  %69 = sext i32 %61 to i64
  %70 = getelementptr inbounds i8, i8* %68, i64 %69
  %71 = bitcast i8* %70 to i64*
  %72 = load i64, i64* %71, align 8
  %73 = lshr i64 %72, 48
  %74 = uitofp i64 %73 to float
  %75 = fmul float %74, 0x3EF0001000000000
  br label %161

76:                                               ; preds = %3
  tail call void @llvm.trap() #13
  unreachable

77:                                               ; preds = %3, %3
  %78 = shl i32 %1, 2
  %79 = getelementptr inbounds %class.SkPixmap, %class.SkPixmap* %0, i64 0, i32 0
  %80 = load i8*, i8** %79, align 8
  %81 = sext i32 %2 to i64
  %82 = getelementptr inbounds %class.SkPixmap, %class.SkPixmap* %0, i64 0, i32 1
  %83 = load i64, i64* %82, align 8
  %84 = mul i64 %83, %81
  %85 = getelementptr inbounds i8, i8* %80, i64 %84
  %86 = sext i32 %78 to i64
  %87 = getelementptr inbounds i8, i8* %85, i64 %86
  br label %148

88:                                               ; preds = %3, %3
  %89 = shl i32 %1, 2
  %90 = getelementptr inbounds %class.SkPixmap, %class.SkPixmap* %0, i64 0, i32 0
  %91 = load i8*, i8** %90, align 8
  %92 = sext i32 %2 to i64
  %93 = getelementptr inbounds %class.SkPixmap, %class.SkPixmap* %0, i64 0, i32 1
  %94 = load i64, i64* %93, align 8
  %95 = mul i64 %94, %92
  %96 = getelementptr inbounds i8, i8* %91, i64 %95
  %97 = sext i32 %89 to i64
  %98 = getelementptr inbounds i8, i8* %96, i64 %97
  br label %154

99:                                               ; preds = %3, %3
  %100 = shl i32 %1, 3
  %101 = getelementptr inbounds %class.SkPixmap, %class.SkPixmap* %0, i64 0, i32 0
  %102 = load i8*, i8** %101, align 8
  %103 = sext i32 %2 to i64
  %104 = getelementptr inbounds %class.SkPixmap, %class.SkPixmap* %0, i64 0, i32 1
  %105 = load i64, i64* %104, align 8
  %106 = mul i64 %105, %103
  %107 = getelementptr inbounds i8, i8* %102, i64 %106
  %108 = sext i32 %100 to i64
  %109 = getelementptr inbounds i8, i8* %107, i64 %108
  %110 = bitcast i8* %109 to i64*
  %111 = load i64, i64* %110, align 1
  %112 = insertelement <2 x i64> undef, i64 %111, i32 0
  %113 = bitcast <2 x i64> %112 to <8 x i16>
  %114 = shufflevector <8 x i16> %113, <8 x i16> <i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef>, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %115 = bitcast <8 x i16> %114 to <4 x i32>
  %116 = and <4 x i32> %115, <i32 -32769, i32 -32769, i32 -32769, i32 -32769>
  %117 = icmp sgt <4 x i32> %116, <i32 1023, i32 1023, i32 1023, i32 1023>
  %118 = shl <4 x i32> %116, <i32 13, i32 13, i32 13, i32 13>
  %119 = add <4 x i32> %118, <i32 undef, i32 undef, i32 undef, i32 939524096>
  %120 = shl <4 x i32> %115, <i32 16, i32 16, i32 16, i32 16>
  %121 = and <4 x i32> %120, <i32 undef, i32 undef, i32 undef, i32 -2147483648>
  %122 = select <4 x i1> %117, <4 x i32> %119, <4 x i32> <i32 undef, i32 undef, i32 undef, i32 0>
  %123 = or <4 x i32> %122, %121
  %124 = bitcast <4 x i32> %123 to <4 x float>
  %125 = extractelement <4 x float> %124, i32 3
  br label %161

126:                                              ; preds = %3, %3, %3
  %127 = getelementptr inbounds %class.SkPixmap, %class.SkPixmap* %0, i64 0, i32 0
  %128 = load i8*, i8** %127, align 8
  %129 = sext i32 %2 to i64
  %130 = getelementptr inbounds %class.SkPixmap, %class.SkPixmap* %0, i64 0, i32 1
  %131 = load i64, i64* %130, align 8
  %132 = mul i64 %131, %129
  %133 = getelementptr inbounds i8, i8* %128, i64 %132
  %134 = sext i32 %1 to i64
  %135 = getelementptr inbounds i8, i8* %133, i64 %134
  switch i32 %5, label %161 [
    i32 8, label %154
    i32 11, label %136
    i32 7, label %154
    i32 6, label %148
    i32 4, label %148
    i32 2, label %136
    i32 5, label %136
    i32 9, label %136
    i32 10, label %136
    i32 1, label %137
    i32 3, label %141
  ]

136:                                              ; preds = %3, %3, %3, %3, %3, %3, %3, %126, %126, %126, %126, %126
  br label %161

137:                                              ; preds = %126
  %138 = load i8, i8* %135, align 1
  %139 = uitofp i8 %138 to float
  %140 = fmul float %139, 0x3F70101020000000
  br label %161

141:                                              ; preds = %126, %6
  %142 = phi i8* [ %16, %6 ], [ %135, %126 ]
  %143 = bitcast i8* %142 to i16*
  %144 = load i16, i16* %143, align 2
  %145 = and i16 %144, 15
  %146 = uitofp i16 %145 to float
  %147 = fmul float %146, 0x3FB1111120000000
  br label %161

148:                                              ; preds = %126, %126, %77
  %149 = phi i8* [ %87, %77 ], [ %135, %126 ], [ %135, %126 ]
  %150 = getelementptr inbounds i8, i8* %149, i64 3
  %151 = load i8, i8* %150, align 1
  %152 = uitofp i8 %151 to float
  %153 = fmul float %152, 0x3F70101020000000
  br label %161

154:                                              ; preds = %126, %126, %88
  %155 = phi i8* [ %98, %88 ], [ %135, %126 ], [ %135, %126 ]
  %156 = bitcast i8* %155 to i32*
  %157 = load i32, i32* %156, align 4
  %158 = lshr i32 %157, 30
  %159 = uitofp i32 %158 to float
  %160 = fmul float %159, 0x3FD5555560000000
  br label %161

161:                                              ; preds = %137, %31, %46, %141, %148, %154, %60, %99, %17, %126, %136
  %162 = phi float [ 1.000000e+00, %136 ], [ 0.000000e+00, %126 ], [ %30, %17 ], [ %125, %99 ], [ %75, %60 ], [ %160, %154 ], [ %153, %148 ], [ %147, %141 ], [ %59, %46 ], [ %45, %31 ], [ %140, %137 ]
  ret float %162
}

declare float @_Z13SkHalfToFloatt(i16 zeroext) local_unnamed_addr #2

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #1

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZNK8SkPixmap10readPixelsERK11SkImageInfoPvmii(%class.SkPixmap*, %struct.SkImageInfo* nocapture readonly dereferenceable(24), i8*, i64, i32, i32) local_unnamed_addr #0 align 2 {
  %7 = alloca %struct.SkReadPixelsRec, align 8
  %8 = alloca %struct.SkImageInfo, align 8
  %9 = getelementptr inbounds %class.SkPixmap, %class.SkPixmap* %0, i64 0, i32 2
  %10 = getelementptr inbounds %struct.SkImageInfo, %struct.SkImageInfo* %1, i64 0, i32 1, i32 0
  %11 = load i32, i32* %10, align 4
  %12 = icmp slt i32 %11, 1
  br i1 %12, label %125, label %13

13:                                               ; preds = %6
  %14 = getelementptr inbounds %struct.SkImageInfo, %struct.SkImageInfo* %1, i64 0, i32 1, i32 1
  %15 = load i32, i32* %14, align 4
  %16 = icmp sgt i32 %11, 536870911
  %17 = add i32 %15, -1
  %18 = icmp ugt i32 %17, 536870910
  %19 = or i1 %16, %18
  br i1 %19, label %125, label %20

20:                                               ; preds = %13
  %21 = getelementptr inbounds %struct.SkImageInfo, %struct.SkImageInfo* %1, i64 0, i32 0, i32 1
  %22 = load i32, i32* %21, align 8
  %23 = icmp ne i32 %22, 0
  %24 = getelementptr inbounds %struct.SkImageInfo, %struct.SkImageInfo* %1, i64 0, i32 0, i32 2
  %25 = load i32, i32* %24, align 4
  %26 = icmp ne i32 %25, 0
  %27 = and i1 %23, %26
  br i1 %27, label %28, label %125

28:                                               ; preds = %20
  %29 = getelementptr inbounds %class.SkPixmap, %class.SkPixmap* %0, i64 0, i32 2, i32 1, i32 0
  %30 = load i32, i32* %29, align 4
  %31 = icmp slt i32 %30, 1
  br i1 %31, label %125, label %32

32:                                               ; preds = %28
  %33 = getelementptr inbounds %class.SkPixmap, %class.SkPixmap* %0, i64 0, i32 2, i32 1, i32 1
  %34 = load i32, i32* %33, align 4
  %35 = icmp sgt i32 %30, 536870911
  %36 = add i32 %34, -1
  %37 = icmp ugt i32 %36, 536870910
  %38 = or i1 %35, %37
  br i1 %38, label %125, label %39

39:                                               ; preds = %32
  %40 = getelementptr inbounds %class.SkPixmap, %class.SkPixmap* %0, i64 0, i32 2, i32 0, i32 1
  %41 = load i32, i32* %40, align 8
  %42 = icmp ne i32 %41, 0
  %43 = getelementptr inbounds %class.SkPixmap, %class.SkPixmap* %0, i64 0, i32 2, i32 0, i32 2
  %44 = load i32, i32* %43, align 4
  %45 = icmp ne i32 %44, 0
  %46 = and i1 %42, %45
  br i1 %46, label %47, label %125

47:                                               ; preds = %39
  %48 = bitcast %struct.SkReadPixelsRec* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 48, i8* nonnull %48) #13
  %49 = getelementptr inbounds %struct.SkReadPixelsRec, %struct.SkReadPixelsRec* %7, i64 0, i32 2
  %50 = bitcast %struct.SkImageInfo* %49 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %50, i8 -86, i64 32, i1 false)
  %51 = getelementptr inbounds %struct.SkReadPixelsRec, %struct.SkReadPixelsRec* %7, i64 0, i32 0
  store i8* %2, i8** %51, align 8
  %52 = getelementptr inbounds %struct.SkReadPixelsRec, %struct.SkReadPixelsRec* %7, i64 0, i32 1
  store i64 %3, i64* %52, align 8
  %53 = getelementptr inbounds %struct.SkReadPixelsRec, %struct.SkReadPixelsRec* %7, i64 0, i32 2, i32 0, i32 0, i32 0
  %54 = getelementptr inbounds %struct.SkImageInfo, %struct.SkImageInfo* %1, i64 0, i32 0, i32 0, i32 0
  %55 = load %class.SkColorSpace*, %class.SkColorSpace** %54, align 8
  %56 = icmp eq %class.SkColorSpace* %55, null
  br i1 %56, label %62, label %57

57:                                               ; preds = %47
  %58 = getelementptr inbounds %class.SkColorSpace, %class.SkColorSpace* %55, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %59 = atomicrmw add i32* %58, i32 1 monotonic
  %60 = load i32, i32* %29, align 4
  %61 = load i32, i32* %33, align 4
  br label %62

62:                                               ; preds = %47, %57
  %63 = phi i32 [ %34, %47 ], [ %61, %57 ]
  %64 = phi i32 [ %30, %47 ], [ %60, %57 ]
  store %class.SkColorSpace* %55, %class.SkColorSpace** %53, align 8
  %65 = getelementptr inbounds %struct.SkReadPixelsRec, %struct.SkReadPixelsRec* %7, i64 0, i32 2, i32 0, i32 1
  %66 = bitcast i32* %21 to <2 x i64>*
  %67 = load <2 x i64>, <2 x i64>* %66, align 8
  %68 = bitcast i32* %65 to <2 x i64>*
  store <2 x i64> %67, <2 x i64>* %68, align 8
  %69 = getelementptr inbounds %struct.SkReadPixelsRec, %struct.SkReadPixelsRec* %7, i64 0, i32 3
  store i32 %4, i32* %69, align 8
  %70 = getelementptr inbounds %struct.SkReadPixelsRec, %struct.SkReadPixelsRec* %7, i64 0, i32 4
  store i32 %5, i32* %70, align 4
  %71 = call zeroext i1 @_ZN15SkReadPixelsRec4trimEii(%struct.SkReadPixelsRec* nonnull %7, i32 %64, i32 %63) #13
  br i1 %71, label %72, label %114

72:                                               ; preds = %62
  %73 = getelementptr inbounds %struct.SkReadPixelsRec, %struct.SkReadPixelsRec* %7, i64 0, i32 2, i32 1
  %74 = bitcast %struct.SkISize* %73 to i64*
  %75 = load i32, i32* %69, align 8
  %76 = load i32, i32* %70, align 4
  %77 = getelementptr inbounds %class.SkPixmap, %class.SkPixmap* %0, i64 0, i32 0
  %78 = load i8*, i8** %77, align 8
  %79 = getelementptr inbounds %class.SkPixmap, %class.SkPixmap* %0, i64 0, i32 1
  %80 = load i64, i64* %79, align 8
  %81 = call i64 @_ZNK11SkImageInfo13computeOffsetEiim(%struct.SkImageInfo* %9, i32 %75, i32 %76, i64 %80) #13
  %82 = getelementptr inbounds i8, i8* %78, i64 %81
  %83 = bitcast %struct.SkImageInfo* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %83) #13
  %84 = getelementptr inbounds %struct.SkImageInfo, %struct.SkImageInfo* %8, i64 0, i32 0, i32 0, i32 0
  %85 = getelementptr inbounds %struct.SkImageInfo, %struct.SkImageInfo* %8, i64 0, i32 0, i32 1
  %86 = getelementptr inbounds %struct.SkReadPixelsRec, %struct.SkReadPixelsRec* %7, i64 0, i32 2
  %87 = bitcast %struct.SkImageInfo* %8 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %87, i8 -86, i64 24, i1 false)
  %88 = load i64, i64* %74, align 8
  %89 = getelementptr inbounds %struct.SkImageInfo, %struct.SkImageInfo* %9, i64 0, i32 0, i32 0, i32 0
  %90 = load %class.SkColorSpace*, %class.SkColorSpace** %89, align 8, !noalias !18
  %91 = icmp eq %class.SkColorSpace* %90, null
  br i1 %91, label %95, label %92

92:                                               ; preds = %72
  %93 = getelementptr inbounds %class.SkColorSpace, %class.SkColorSpace* %90, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %94 = atomicrmw add i32* %93, i32 1 monotonic, !noalias !18
  br label %95

95:                                               ; preds = %72, %92
  store %class.SkColorSpace* %90, %class.SkColorSpace** %84, align 8, !alias.scope !18
  %96 = bitcast i32* %40 to i64*
  %97 = bitcast i32* %85 to i64*
  %98 = load i64, i64* %96, align 8, !noalias !18
  store i64 %98, i64* %97, align 8, !alias.scope !18
  %99 = getelementptr inbounds %struct.SkImageInfo, %struct.SkImageInfo* %8, i64 0, i32 1
  %100 = bitcast %struct.SkISize* %99 to i64*
  store i64 %88, i64* %100, align 8, !alias.scope !18
  %101 = load i8*, i8** %51, align 8
  %102 = load i64, i64* %52, align 8
  %103 = load i64, i64* %79, align 8
  %104 = call zeroext i1 @_Z15SkConvertPixelsRK11SkImageInfoPvmS1_PKvm(%struct.SkImageInfo* dereferenceable(24) %86, i8* %101, i64 %102, %struct.SkImageInfo* nonnull dereferenceable(24) %8, i8* %82, i64 %103) #13
  %105 = load %class.SkColorSpace*, %class.SkColorSpace** %84, align 8
  %106 = icmp eq %class.SkColorSpace* %105, null
  br i1 %106, label %113, label %107

107:                                              ; preds = %95
  %108 = getelementptr inbounds %class.SkColorSpace, %class.SkColorSpace* %105, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %109 = atomicrmw add i32* %108, i32 -1 acq_rel
  %110 = icmp eq i32 %109, 1
  br i1 %110, label %111, label %113

111:                                              ; preds = %107
  %112 = bitcast %class.SkColorSpace* %105 to i8*
  call void @_ZdlPv(i8* %112) #12
  br label %113

113:                                              ; preds = %95, %107, %111
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %83) #13
  br label %114

114:                                              ; preds = %62, %113
  %115 = phi i1 [ %104, %113 ], [ false, %62 ]
  %116 = load %class.SkColorSpace*, %class.SkColorSpace** %53, align 8
  %117 = icmp eq %class.SkColorSpace* %116, null
  br i1 %117, label %124, label %118

118:                                              ; preds = %114
  %119 = getelementptr inbounds %class.SkColorSpace, %class.SkColorSpace* %116, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %120 = atomicrmw add i32* %119, i32 -1 acq_rel
  %121 = icmp eq i32 %120, 1
  br i1 %121, label %122, label %124

122:                                              ; preds = %118
  %123 = bitcast %class.SkColorSpace* %116 to i8*
  call void @_ZdlPv(i8* %123) #12
  br label %124

124:                                              ; preds = %114, %118, %122
  call void @llvm.lifetime.end.p0i8(i64 48, i8* nonnull %48) #13
  br label %125

125:                                              ; preds = %6, %13, %28, %32, %20, %39, %124
  %126 = phi i1 [ %115, %124 ], [ false, %39 ], [ false, %20 ], [ false, %32 ], [ false, %28 ], [ false, %13 ], [ false, %6 ]
  ret i1 %126
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

declare zeroext i1 @_ZN15SkReadPixelsRec4trimEii(%struct.SkReadPixelsRec*, i32, i32) local_unnamed_addr #2

declare zeroext i1 @_Z15SkConvertPixelsRK11SkImageInfoPvmS1_PKvm(%struct.SkImageInfo* dereferenceable(24), i8*, i64, %struct.SkImageInfo* dereferenceable(24), i8*, i64) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZNK8SkPixmap5eraseEjRK7SkIRect(%class.SkPixmap* readonly, i32, %struct.SkIRect* dereferenceable(16)) local_unnamed_addr #0 align 2 {
  %4 = alloca { <2 x float>, <2 x float> }, align 8
  %5 = bitcast { <2 x float>, <2 x float> }* %4 to %struct.SkRGBA4f*
  %6 = bitcast { <2 x float>, <2 x float> }* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %6) #13
  %7 = tail call { <2 x float>, <2 x float> } @_ZN8SkRGBA4fIL11SkAlphaType3EE9FromColorEj(i32 %1) #13
  %8 = getelementptr inbounds { <2 x float>, <2 x float> }, { <2 x float>, <2 x float> }* %4, i64 0, i32 0
  %9 = extractvalue { <2 x float>, <2 x float> } %7, 0
  store <2 x float> %9, <2 x float>* %8, align 8
  %10 = getelementptr inbounds { <2 x float>, <2 x float> }, { <2 x float>, <2 x float> }* %4, i64 0, i32 1
  %11 = extractvalue { <2 x float>, <2 x float> } %7, 1
  store <2 x float> %11, <2 x float>* %10, align 8
  %12 = call zeroext i1 @_ZNK8SkPixmap5eraseERK8SkRGBA4fIL11SkAlphaType3EEP12SkColorSpacePK7SkIRect(%class.SkPixmap* %0, %struct.SkRGBA4f* nonnull dereferenceable(16) %5, %class.SkColorSpace* null, %struct.SkIRect* %2) #13
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %6) #13
  ret i1 %12
}

declare { <2 x float>, <2 x float> } @_ZN8SkRGBA4fIL11SkAlphaType3EE9FromColorEj(i32) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZNK8SkPixmap5eraseERK8SkRGBA4fIL11SkAlphaType3EEP12SkColorSpacePK7SkIRect(%class.SkPixmap* readonly, %struct.SkRGBA4f* dereferenceable(16), %class.SkColorSpace*, %struct.SkIRect*) local_unnamed_addr #0 align 2 {
  %5 = alloca %class.SkPaint, align 8
  %6 = alloca { i64, i64 }, align 8
  %7 = bitcast { i64, i64 }* %6 to %struct.SkIRect*
  %8 = alloca %class.SkRasterClip, align 8
  %9 = alloca %class.SkDraw, align 8
  %10 = alloca %class.SkSimpleMatrixProvider, align 8
  %11 = bitcast %class.SkPaint* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 72, i8* nonnull %11) #13
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %11, i8* align 8 bitcast (%class.SkPaint* @__const._ZL16draw_orientationRK8SkPixmapS1_15SkEncodedOrigin.p to i8*), i64 72, i1 false)
  call void @_ZN7SkPaintC1Ev(%class.SkPaint* nonnull %5) #13
  %12 = getelementptr inbounds %class.SkPaint, %class.SkPaint* %5, i64 0, i32 8, i32 0, i32 0
  %13 = load i32, i32* %12, align 8
  %14 = and i32 %13, -261121
  %15 = or i32 %14, 1024
  store i32 %15, i32* %12, align 8
  call void @_ZN7SkPaint8setColorERK8SkRGBA4fIL11SkAlphaType3EEP12SkColorSpace(%class.SkPaint* nonnull %5, %struct.SkRGBA4f* dereferenceable(16) %1, %class.SkColorSpace* %2) #13
  %16 = bitcast { i64, i64 }* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %16) #13
  %17 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %6, i64 0, i32 1
  %18 = getelementptr inbounds %class.SkPixmap, %class.SkPixmap* %0, i64 0, i32 2, i32 1, i32 0
  %19 = load i32, i32* %18, align 4
  %20 = getelementptr inbounds %class.SkPixmap, %class.SkPixmap* %0, i64 0, i32 2, i32 1, i32 1
  %21 = load i32, i32* %20, align 4
  %22 = zext i32 %21 to i64
  %23 = shl nuw i64 %22, 32
  %24 = zext i32 %19 to i64
  %25 = or i64 %23, %24
  %26 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %6, i64 0, i32 0
  store i64 0, i64* %26, align 8
  store i64 %25, i64* %17, align 8
  %27 = icmp eq %struct.SkIRect* %3, null
  br i1 %27, label %30, label %28

28:                                               ; preds = %4
  %29 = call zeroext i1 @_ZN7SkIRect9intersectERKS_S1_(%struct.SkIRect* nonnull %7, %struct.SkIRect* nonnull dereferenceable(16) %7, %struct.SkIRect* nonnull dereferenceable(16) %3) #13
  br i1 %29, label %30, label %129

30:                                               ; preds = %4, %28
  %31 = bitcast %class.SkRasterClip* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 72, i8* nonnull %31) #13
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %31, i8 -86, i64 72, i1 false)
  call void @_ZN12SkRasterClipC1ERK7SkIRect(%class.SkRasterClip* nonnull %8, %struct.SkIRect* nonnull dereferenceable(16) %7) #13
  %32 = bitcast %class.SkDraw* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 72, i8* nonnull %32) #13
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %32, i8 -86, i64 72, i1 false)
  call void @_ZN6SkDrawC1Ev(%class.SkDraw* nonnull %9) #13
  %33 = bitcast %class.SkSimpleMatrixProvider* %10 to i8*
  call void @llvm.lifetime.start.p0i8(i64 112, i8* nonnull %33) #13
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %33, i8* align 8 bitcast (%class.SkSimpleMatrixProvider* @__const._ZNK8SkPixmap5eraseERK8SkRGBA4fIL11SkAlphaType3EEP12SkColorSpacePK7SkIRect.matrixProvider to i8*), i64 112, i1 false)
  %34 = call dereferenceable(40) %class.SkMatrix* @_ZN8SkMatrix1IEv() #13
  %35 = getelementptr inbounds %class.SkSimpleMatrixProvider, %class.SkSimpleMatrixProvider* %10, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [6 x i8*] }, { [6 x i8*] }* @_ZTV16SkMatrixProvider, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %35, align 8
  %36 = getelementptr inbounds %class.SkSimpleMatrixProvider, %class.SkSimpleMatrixProvider* %10, i64 0, i32 0, i32 1
  %37 = bitcast %class.SkMatrix* %34 to i32*
  %38 = load i32, i32* %37, align 4
  %39 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %34, i64 0, i32 0, i64 1
  %40 = bitcast float* %39 to i32*
  %41 = load i32, i32* %40, align 4
  %42 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %34, i64 0, i32 0, i64 2
  %43 = bitcast float* %42 to i32*
  %44 = load i32, i32* %43, align 4
  %45 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %34, i64 0, i32 0, i64 3
  %46 = bitcast float* %45 to i32*
  %47 = load i32, i32* %46, align 4
  %48 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %34, i64 0, i32 0, i64 4
  %49 = bitcast float* %48 to i32*
  %50 = load i32, i32* %49, align 4
  %51 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %34, i64 0, i32 0, i64 5
  %52 = bitcast float* %51 to i32*
  %53 = load i32, i32* %52, align 4
  %54 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %34, i64 0, i32 0, i64 6
  %55 = bitcast float* %54 to i32*
  %56 = load i32, i32* %55, align 4
  %57 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %34, i64 0, i32 0, i64 7
  %58 = bitcast float* %57 to i32*
  %59 = load i32, i32* %58, align 4
  %60 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %34, i64 0, i32 0, i64 8
  %61 = bitcast float* %60 to i32*
  %62 = load i32, i32* %61, align 4
  %63 = bitcast %class.SkM44* %36 to i32*
  store i32 %38, i32* %63, align 8
  %64 = getelementptr inbounds %class.SkSimpleMatrixProvider, %class.SkSimpleMatrixProvider* %10, i64 0, i32 0, i32 1, i32 0, i64 1
  %65 = bitcast float* %64 to i32*
  store i32 %47, i32* %65, align 4
  %66 = getelementptr inbounds %class.SkSimpleMatrixProvider, %class.SkSimpleMatrixProvider* %10, i64 0, i32 0, i32 1, i32 0, i64 2
  store float 0.000000e+00, float* %66, align 8
  %67 = getelementptr inbounds %class.SkSimpleMatrixProvider, %class.SkSimpleMatrixProvider* %10, i64 0, i32 0, i32 1, i32 0, i64 3
  %68 = bitcast float* %67 to i32*
  store i32 %56, i32* %68, align 4
  %69 = getelementptr inbounds %class.SkSimpleMatrixProvider, %class.SkSimpleMatrixProvider* %10, i64 0, i32 0, i32 1, i32 0, i64 4
  %70 = bitcast float* %69 to i32*
  store i32 %41, i32* %70, align 8
  %71 = getelementptr inbounds %class.SkSimpleMatrixProvider, %class.SkSimpleMatrixProvider* %10, i64 0, i32 0, i32 1, i32 0, i64 5
  %72 = bitcast float* %71 to i32*
  store i32 %50, i32* %72, align 4
  %73 = getelementptr inbounds %class.SkSimpleMatrixProvider, %class.SkSimpleMatrixProvider* %10, i64 0, i32 0, i32 1, i32 0, i64 6
  store float 0.000000e+00, float* %73, align 8
  %74 = getelementptr inbounds %class.SkSimpleMatrixProvider, %class.SkSimpleMatrixProvider* %10, i64 0, i32 0, i32 1, i32 0, i64 7
  %75 = bitcast float* %74 to i32*
  store i32 %59, i32* %75, align 4
  %76 = getelementptr inbounds %class.SkSimpleMatrixProvider, %class.SkSimpleMatrixProvider* %10, i64 0, i32 0, i32 1, i32 0, i64 8
  %77 = bitcast float* %76 to <4 x float>*
  store <4 x float> <float 0.000000e+00, float 0.000000e+00, float 1.000000e+00, float 0.000000e+00>, <4 x float>* %77, align 8
  %78 = getelementptr inbounds %class.SkSimpleMatrixProvider, %class.SkSimpleMatrixProvider* %10, i64 0, i32 0, i32 1, i32 0, i64 12
  %79 = bitcast float* %78 to i32*
  store i32 %44, i32* %79, align 8
  %80 = getelementptr inbounds %class.SkSimpleMatrixProvider, %class.SkSimpleMatrixProvider* %10, i64 0, i32 0, i32 1, i32 0, i64 13
  %81 = bitcast float* %80 to i32*
  store i32 %53, i32* %81, align 4
  %82 = getelementptr inbounds %class.SkSimpleMatrixProvider, %class.SkSimpleMatrixProvider* %10, i64 0, i32 0, i32 1, i32 0, i64 14
  store float 0.000000e+00, float* %82, align 8
  %83 = getelementptr inbounds %class.SkSimpleMatrixProvider, %class.SkSimpleMatrixProvider* %10, i64 0, i32 0, i32 1, i32 0, i64 15
  %84 = bitcast float* %83 to i32*
  store i32 %62, i32* %84, align 4
  %85 = getelementptr inbounds %class.SkSimpleMatrixProvider, %class.SkSimpleMatrixProvider* %10, i64 0, i32 0, i32 2
  %86 = bitcast %class.SkMatrix* %85 to i8*
  %87 = bitcast %class.SkMatrix* %34 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %86, i8* align 4 %87, i64 40, i1 false) #13
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [6 x i8*] }, { [6 x i8*] }* @_ZTV22SkSimpleMatrixProvider, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %35, align 8
  %88 = getelementptr inbounds %class.SkDraw, %class.SkDraw* %9, i64 0, i32 1
  %89 = bitcast %class.SkPixmap* %88 to i8*
  %90 = bitcast %class.SkPixmap* %0 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %89, i8* align 8 %90, i64 16, i1 false) #13
  %91 = icmp eq %class.SkPixmap* %88, %0
  br i1 %91, label %109, label %92

92:                                               ; preds = %30
  %93 = getelementptr inbounds %class.SkPixmap, %class.SkPixmap* %0, i64 0, i32 2, i32 0, i32 0, i32 0
  %94 = load %class.SkColorSpace*, %class.SkColorSpace** %93, align 8
  %95 = icmp eq %class.SkColorSpace* %94, null
  br i1 %95, label %99, label %96

96:                                               ; preds = %92
  %97 = getelementptr inbounds %class.SkColorSpace, %class.SkColorSpace* %94, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %98 = atomicrmw add i32* %97, i32 1 monotonic
  br label %99

99:                                               ; preds = %96, %92
  %100 = getelementptr inbounds %class.SkDraw, %class.SkDraw* %9, i64 0, i32 1, i32 2, i32 0, i32 0, i32 0
  %101 = load %class.SkColorSpace*, %class.SkColorSpace** %100, align 8
  store %class.SkColorSpace* %94, %class.SkColorSpace** %100, align 8
  %102 = icmp eq %class.SkColorSpace* %101, null
  br i1 %102, label %109, label %103

103:                                              ; preds = %99
  %104 = getelementptr inbounds %class.SkColorSpace, %class.SkColorSpace* %101, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %105 = atomicrmw add i32* %104, i32 -1 acq_rel
  %106 = icmp eq i32 %105, 1
  br i1 %106, label %107, label %109

107:                                              ; preds = %103
  %108 = bitcast %class.SkColorSpace* %101 to i8*
  call void @_ZdlPv(i8* %108) #12
  br label %109

109:                                              ; preds = %30, %99, %103, %107
  %110 = getelementptr inbounds %class.SkDraw, %class.SkDraw* %9, i64 0, i32 1, i32 2, i32 0, i32 1
  %111 = getelementptr inbounds %class.SkPixmap, %class.SkPixmap* %0, i64 0, i32 2, i32 0, i32 1
  %112 = bitcast i32* %111 to <2 x i64>*
  %113 = load <2 x i64>, <2 x i64>* %112, align 8
  %114 = bitcast i32* %110 to <2 x i64>*
  store <2 x i64> %113, <2 x i64>* %114, align 8
  %115 = getelementptr inbounds %class.SkSimpleMatrixProvider, %class.SkSimpleMatrixProvider* %10, i64 0, i32 0
  %116 = getelementptr inbounds %class.SkDraw, %class.SkDraw* %9, i64 0, i32 2
  store %class.SkMatrixProvider* %115, %class.SkMatrixProvider** %116, align 8
  %117 = getelementptr inbounds %class.SkDraw, %class.SkDraw* %9, i64 0, i32 3
  store %class.SkRasterClip* %8, %class.SkRasterClip** %117, align 8
  call void @_ZNK6SkDraw9drawPaintERK7SkPaint(%class.SkDraw* nonnull %9, %class.SkPaint* nonnull dereferenceable(72) %5) #13
  call void @llvm.lifetime.end.p0i8(i64 112, i8* nonnull %33) #13
  %118 = getelementptr inbounds %class.SkDraw, %class.SkDraw* %9, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [7 x i8*] }, { [7 x i8*] }* @_ZTV6SkDraw, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %118, align 8
  %119 = getelementptr inbounds %class.SkDraw, %class.SkDraw* %9, i64 0, i32 1, i32 2, i32 0, i32 0, i32 0
  %120 = load %class.SkColorSpace*, %class.SkColorSpace** %119, align 8
  %121 = icmp eq %class.SkColorSpace* %120, null
  br i1 %121, label %128, label %122

122:                                              ; preds = %109
  %123 = getelementptr inbounds %class.SkColorSpace, %class.SkColorSpace* %120, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %124 = atomicrmw add i32* %123, i32 -1 acq_rel
  %125 = icmp eq i32 %124, 1
  br i1 %125, label %126, label %128

126:                                              ; preds = %122
  %127 = bitcast %class.SkColorSpace* %120 to i8*
  call void @_ZdlPv(i8* %127) #12
  br label %128

128:                                              ; preds = %109, %122, %126
  call void @llvm.lifetime.end.p0i8(i64 72, i8* nonnull %32) #13
  call void @_ZN12SkRasterClipD1Ev(%class.SkRasterClip* nonnull %8) #13
  call void @llvm.lifetime.end.p0i8(i64 72, i8* nonnull %31) #13
  br label %129

129:                                              ; preds = %28, %128
  %130 = phi i1 [ true, %128 ], [ false, %28 ]
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %16) #13
  call void @_ZN7SkPaintD1Ev(%class.SkPaint* nonnull %5) #13
  call void @llvm.lifetime.end.p0i8(i64 72, i8* nonnull %11) #13
  ret i1 %130
}

declare void @_ZN7SkPaintC1Ev(%class.SkPaint*) unnamed_addr #2

declare void @_ZN12SkRasterClipC1ERK7SkIRect(%class.SkRasterClip*, %struct.SkIRect* dereferenceable(16)) unnamed_addr #2

declare void @_ZN6SkDrawC1Ev(%class.SkDraw*) unnamed_addr #2

declare dereferenceable(40) %class.SkMatrix* @_ZN8SkMatrix1IEv() local_unnamed_addr #2

declare void @_ZNK6SkDraw9drawPaintERK7SkPaint(%class.SkDraw*, %class.SkPaint* dereferenceable(72)) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN16SkMatrixProviderD2Ev(%class.SkMatrixProvider*) unnamed_addr #0 comdat align 2 {
  ret void
}

; Function Attrs: nounwind
declare void @_ZN12SkRasterClipD1Ev(%class.SkRasterClip*) unnamed_addr #4

; Function Attrs: nounwind
declare void @_ZN7SkPaintD1Ev(%class.SkPaint*) unnamed_addr #4

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZNK8SkPixmap11scalePixelsERKS_RK17SkSamplingOptions(%class.SkPixmap* nocapture readonly, %class.SkPixmap* nocapture readonly dereferenceable(40), %struct.SkSamplingOptions* dereferenceable(20)) local_unnamed_addr #0 align 2 {
  %4 = alloca %class.SkPixmap, align 8
  %5 = alloca %class.SkPixmap, align 8
  %6 = alloca %class.SkBitmap, align 8
  %7 = alloca %class.SkMatrix, align 16
  %8 = alloca { <2 x float>, <2 x float> }, align 8
  %9 = bitcast { <2 x float>, <2 x float> }* %8 to %struct.SkRect*
  %10 = alloca { <2 x float>, <2 x float> }, align 8
  %11 = bitcast { <2 x float>, <2 x float> }* %10 to %struct.SkRect*
  %12 = alloca %class.sk_sp.7, align 8
  %13 = alloca %class.sk_sp.13, align 8
  %14 = alloca %class.sk_sp.14, align 8
  %15 = alloca %class.SkPaint, align 8
  %16 = alloca %class.sk_sp.7, align 8
  %17 = bitcast %class.SkPixmap* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %17) #13
  %18 = bitcast %class.SkPixmap* %0 to i8*
  %19 = getelementptr inbounds %class.SkPixmap, %class.SkPixmap* %4, i64 0, i32 2
  %20 = bitcast %struct.SkImageInfo* %19 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %20, i8 -86, i64 24, i1 false)
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %17, i8* align 8 %18, i64 16, i1 false) #13
  %21 = getelementptr inbounds %class.SkPixmap, %class.SkPixmap* %4, i64 0, i32 2, i32 0, i32 0, i32 0
  %22 = getelementptr inbounds %class.SkPixmap, %class.SkPixmap* %0, i64 0, i32 2, i32 0, i32 0, i32 0
  %23 = load %class.SkColorSpace*, %class.SkColorSpace** %22, align 8
  %24 = icmp eq %class.SkColorSpace* %23, null
  br i1 %24, label %28, label %25

25:                                               ; preds = %3
  %26 = getelementptr inbounds %class.SkColorSpace, %class.SkColorSpace* %23, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %27 = atomicrmw add i32* %26, i32 1 monotonic
  br label %28

28:                                               ; preds = %3, %25
  store %class.SkColorSpace* %23, %class.SkColorSpace** %21, align 8
  %29 = getelementptr inbounds %class.SkPixmap, %class.SkPixmap* %4, i64 0, i32 2, i32 0, i32 1
  %30 = getelementptr inbounds %class.SkPixmap, %class.SkPixmap* %0, i64 0, i32 2, i32 0, i32 1
  %31 = bitcast i32* %29 to i64*
  %32 = getelementptr inbounds %class.SkPixmap, %class.SkPixmap* %4, i64 0, i32 2, i32 1
  %33 = bitcast %struct.SkISize* %32 to i64*
  %34 = bitcast i32* %30 to <2 x i64>*
  %35 = load <2 x i64>, <2 x i64>* %34, align 8
  %36 = bitcast i32* %29 to <2 x i64>*
  store <2 x i64> %35, <2 x i64>* %36, align 8
  %37 = bitcast %class.SkPixmap* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %37) #13
  %38 = bitcast %class.SkPixmap* %1 to i8*
  %39 = getelementptr inbounds %class.SkPixmap, %class.SkPixmap* %5, i64 0, i32 2
  %40 = bitcast %struct.SkImageInfo* %39 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %40, i8 -86, i64 24, i1 false)
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %37, i8* align 8 %38, i64 16, i1 false) #13
  %41 = getelementptr inbounds %class.SkPixmap, %class.SkPixmap* %5, i64 0, i32 2, i32 0, i32 0, i32 0
  %42 = getelementptr inbounds %class.SkPixmap, %class.SkPixmap* %1, i64 0, i32 2, i32 0, i32 0, i32 0
  %43 = load %class.SkColorSpace*, %class.SkColorSpace** %42, align 8
  %44 = icmp eq %class.SkColorSpace* %43, null
  %45 = extractelement <2 x i64> %35, i32 1
  %46 = trunc i64 %45 to i32
  br i1 %44, label %52, label %47

47:                                               ; preds = %28
  %48 = getelementptr inbounds %class.SkColorSpace, %class.SkColorSpace* %43, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %49 = atomicrmw add i32* %48, i32 1 monotonic
  %50 = getelementptr inbounds %class.SkPixmap, %class.SkPixmap* %4, i64 0, i32 2, i32 1, i32 0
  %51 = load i32, i32* %50, align 8
  br label %52

52:                                               ; preds = %28, %47
  %53 = phi i32 [ %46, %28 ], [ %51, %47 ]
  store %class.SkColorSpace* %43, %class.SkColorSpace** %41, align 8
  %54 = getelementptr inbounds %class.SkPixmap, %class.SkPixmap* %5, i64 0, i32 2, i32 0, i32 1
  %55 = getelementptr inbounds %class.SkPixmap, %class.SkPixmap* %1, i64 0, i32 2, i32 0, i32 1
  %56 = bitcast i32* %55 to i64*
  %57 = bitcast i32* %54 to i64*
  %58 = load i64, i64* %56, align 8
  store i64 %58, i64* %57, align 8
  %59 = getelementptr inbounds %class.SkPixmap, %class.SkPixmap* %5, i64 0, i32 2, i32 1
  %60 = getelementptr inbounds %class.SkPixmap, %class.SkPixmap* %1, i64 0, i32 2, i32 1
  %61 = bitcast %struct.SkISize* %60 to i64*
  %62 = bitcast %struct.SkISize* %59 to i64*
  %63 = load i64, i64* %61, align 8
  store i64 %63, i64* %62, align 8
  %64 = getelementptr inbounds %class.SkPixmap, %class.SkPixmap* %4, i64 0, i32 2, i32 1, i32 0
  %65 = icmp slt i32 %53, 1
  %66 = trunc i64 %63 to i32
  %67 = lshr i64 %63, 32
  %68 = trunc i64 %67 to i32
  br i1 %65, label %272, label %69

69:                                               ; preds = %52
  %70 = getelementptr inbounds %class.SkPixmap, %class.SkPixmap* %4, i64 0, i32 2, i32 1, i32 1
  %71 = load i32, i32* %70, align 4
  %72 = icmp slt i32 %71, 1
  br i1 %72, label %272, label %73

73:                                               ; preds = %69
  %74 = getelementptr inbounds %class.SkPixmap, %class.SkPixmap* %5, i64 0, i32 2, i32 1, i32 0
  %75 = icmp slt i32 %66, 1
  br i1 %75, label %272, label %76

76:                                               ; preds = %73
  %77 = getelementptr inbounds %class.SkPixmap, %class.SkPixmap* %5, i64 0, i32 2, i32 1, i32 1
  %78 = icmp slt i32 %68, 1
  br i1 %78, label %272, label %79

79:                                               ; preds = %76
  %80 = icmp eq i32 %53, %66
  %81 = icmp eq i32 %71, %68
  %82 = and i1 %80, %81
  br i1 %82, label %83, label %90

83:                                               ; preds = %79
  %84 = getelementptr inbounds %class.SkPixmap, %class.SkPixmap* %5, i64 0, i32 2
  %85 = getelementptr inbounds %class.SkPixmap, %class.SkPixmap* %5, i64 0, i32 0
  %86 = load i8*, i8** %85, align 8
  %87 = getelementptr inbounds %class.SkPixmap, %class.SkPixmap* %5, i64 0, i32 1
  %88 = load i64, i64* %87, align 8
  %89 = call zeroext i1 @_ZNK8SkPixmap10readPixelsERK11SkImageInfoPvmii(%class.SkPixmap* nonnull %4, %struct.SkImageInfo* dereferenceable(24) %84, i8* %86, i64 %88, i32 0, i32 0) #13
  br label %272

90:                                               ; preds = %79
  %91 = getelementptr inbounds %class.SkPixmap, %class.SkPixmap* %4, i64 0, i32 2, i32 0, i32 2
  %92 = load i32, i32* %91, align 4
  %93 = icmp eq i32 %92, 3
  %94 = and i64 %58, -4294967296
  %95 = icmp eq i64 %94, 12884901888
  %96 = and i1 %93, %95
  br i1 %96, label %97, label %155

97:                                               ; preds = %90
  %98 = load i64, i64* %33, align 8, !noalias !23
  %99 = load i32, i32* %29, align 8, !noalias !26
  %100 = load %class.SkColorSpace*, %class.SkColorSpace** %21, align 8
  %101 = icmp eq %class.SkColorSpace* %100, null
  br i1 %101, label %117, label %102

102:                                              ; preds = %97
  %103 = getelementptr inbounds %class.SkColorSpace, %class.SkColorSpace* %100, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %104 = atomicrmw add i32* %103, i32 1 monotonic, !noalias !29
  %105 = zext i32 %99 to i64
  %106 = or i64 %105, 8589934592
  %107 = getelementptr inbounds %class.SkColorSpace, %class.SkColorSpace* %100, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %108 = atomicrmw add i32* %107, i32 1 monotonic
  %109 = load %class.SkColorSpace*, %class.SkColorSpace** %21, align 8
  store %class.SkColorSpace* %100, %class.SkColorSpace** %21, align 8
  %110 = icmp eq %class.SkColorSpace* %109, null
  br i1 %110, label %120, label %111

111:                                              ; preds = %102
  %112 = getelementptr inbounds %class.SkColorSpace, %class.SkColorSpace* %109, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %113 = atomicrmw add i32* %112, i32 -1 acq_rel
  %114 = icmp eq i32 %113, 1
  br i1 %114, label %115, label %120

115:                                              ; preds = %111
  %116 = bitcast %class.SkColorSpace* %109 to i8*
  tail call void @_ZdlPv(i8* %116) #12
  br label %120

117:                                              ; preds = %97
  %118 = zext i32 %99 to i64
  %119 = or i64 %118, 8589934592
  store i64 %119, i64* %31, align 8
  br label %126

120:                                              ; preds = %102, %111, %115
  store i64 %106, i64* %31, align 8
  store i64 %98, i64* %33, align 8
  %121 = getelementptr inbounds %class.SkColorSpace, %class.SkColorSpace* %100, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %122 = atomicrmw add i32* %121, i32 -1 acq_rel
  %123 = icmp eq i32 %122, 1
  br i1 %123, label %124, label %126

124:                                              ; preds = %120
  %125 = bitcast %class.SkColorSpace* %100 to i8*
  tail call void @_ZdlPv(i8* %125) #12
  br label %126

126:                                              ; preds = %117, %120, %124
  %127 = load i64, i64* %62, align 8, !noalias !32
  %128 = load i32, i32* %54, align 8, !noalias !35
  %129 = load %class.SkColorSpace*, %class.SkColorSpace** %41, align 8
  %130 = icmp eq %class.SkColorSpace* %129, null
  br i1 %130, label %146, label %131

131:                                              ; preds = %126
  %132 = getelementptr inbounds %class.SkColorSpace, %class.SkColorSpace* %129, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %133 = atomicrmw add i32* %132, i32 1 monotonic, !noalias !38
  %134 = zext i32 %128 to i64
  %135 = or i64 %134, 4294967296
  %136 = getelementptr inbounds %class.SkColorSpace, %class.SkColorSpace* %129, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %137 = atomicrmw add i32* %136, i32 1 monotonic
  %138 = load %class.SkColorSpace*, %class.SkColorSpace** %41, align 8
  store %class.SkColorSpace* %129, %class.SkColorSpace** %41, align 8
  %139 = icmp eq %class.SkColorSpace* %138, null
  br i1 %139, label %149, label %140

140:                                              ; preds = %131
  %141 = getelementptr inbounds %class.SkColorSpace, %class.SkColorSpace* %138, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %142 = atomicrmw add i32* %141, i32 -1 acq_rel
  %143 = icmp eq i32 %142, 1
  br i1 %143, label %144, label %149

144:                                              ; preds = %140
  %145 = bitcast %class.SkColorSpace* %138 to i8*
  tail call void @_ZdlPv(i8* %145) #12
  br label %149

146:                                              ; preds = %126
  %147 = zext i32 %128 to i64
  %148 = or i64 %147, 4294967296
  store i64 %148, i64* %57, align 8
  br label %155

149:                                              ; preds = %131, %140, %144
  store i64 %135, i64* %57, align 8
  store i64 %127, i64* %62, align 8
  %150 = getelementptr inbounds %class.SkColorSpace, %class.SkColorSpace* %129, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %151 = atomicrmw add i32* %150, i32 -1 acq_rel
  %152 = icmp eq i32 %151, 1
  br i1 %152, label %153, label %155

153:                                              ; preds = %149
  %154 = bitcast %class.SkColorSpace* %129 to i8*
  tail call void @_ZdlPv(i8* %154) #12
  br label %155

155:                                              ; preds = %146, %153, %149, %90
  %156 = phi i1 [ false, %90 ], [ true, %146 ], [ true, %149 ], [ true, %153 ]
  %157 = bitcast %class.SkBitmap* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 56, i8* nonnull %157) #13
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %157, i8 -86, i64 56, i1 false)
  call void @_ZN8SkBitmapC1Ev(%class.SkBitmap* nonnull %6) #13
  %158 = call zeroext i1 @_ZN8SkBitmap13installPixelsERK8SkPixmap(%class.SkBitmap* nonnull %6, %class.SkPixmap* nonnull dereferenceable(40) %4) #13
  br i1 %158, label %159, label %270

159:                                              ; preds = %155
  call void @_ZN8SkBitmap12setImmutableEv(%class.SkBitmap* nonnull %6) #13
  %160 = bitcast %class.SkMatrix* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %160) #13
  %161 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %7, i64 0, i32 1
  %162 = bitcast { <2 x float>, <2 x float> }* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %162) #13
  %163 = load i32, i32* %64, align 8
  %164 = load i32, i32* %70, align 4
  %165 = sitofp i32 %163 to float
  %166 = insertelement <2 x float> undef, float %165, i32 0
  %167 = sitofp i32 %164 to float
  %168 = insertelement <2 x float> %166, float %167, i32 1
  %169 = getelementptr inbounds { <2 x float>, <2 x float> }, { <2 x float>, <2 x float> }* %8, i64 0, i32 0
  store <2 x float> zeroinitializer, <2 x float>* %169, align 8
  %170 = getelementptr inbounds { <2 x float>, <2 x float> }, { <2 x float>, <2 x float> }* %8, i64 0, i32 1
  store <2 x float> %168, <2 x float>* %170, align 8
  %171 = bitcast { <2 x float>, <2 x float> }* %10 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %171) #13
  %172 = load i32, i32* %74, align 8
  %173 = load i32, i32* %77, align 4
  %174 = sitofp i32 %172 to float
  %175 = insertelement <2 x float> undef, float %174, i32 0
  %176 = sitofp i32 %173 to float
  %177 = insertelement <2 x float> %175, float %176, i32 1
  %178 = getelementptr inbounds { <2 x float>, <2 x float> }, { <2 x float>, <2 x float> }* %10, i64 0, i32 0
  store <2 x float> zeroinitializer, <2 x float>* %178, align 8
  %179 = getelementptr inbounds { <2 x float>, <2 x float> }, { <2 x float>, <2 x float> }* %10, i64 0, i32 1
  store <2 x float> %177, <2 x float>* %179, align 8
  %180 = bitcast %class.SkMatrix* %7 to <4 x float>*
  store <4 x float> <float 1.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00>, <4 x float>* %180, align 16, !alias.scope !41
  %181 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %7, i64 0, i32 0, i64 4
  %182 = bitcast float* %181 to <4 x float>*
  store <4 x float> <float 1.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00>, <4 x float>* %182, align 16, !alias.scope !41
  %183 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %7, i64 0, i32 0, i64 8
  store float 1.000000e+00, float* %183, align 16, !alias.scope !41
  store i32 16, i32* %161, align 4, !alias.scope !41
  %184 = call zeroext i1 @_ZN8SkMatrix13setRectToRectERK6SkRectS2_NS_10ScaleToFitE(%class.SkMatrix* nonnull %7, %struct.SkRect* nonnull dereferenceable(16) %9, %struct.SkRect* nonnull dereferenceable(16) %11, i32 0) #13
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %171) #13
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %162) #13
  %185 = bitcast %class.sk_sp.7* %12 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %185) #13
  %186 = getelementptr inbounds %class.sk_sp.7, %class.sk_sp.7* %12, i64 0, i32 0
  store %class.SkShader* inttoptr (i64 -6148914691236517206 to %class.SkShader*), %class.SkShader** %186, align 8
  call void @_ZNK8SkBitmap7asImageEv(%class.sk_sp.13* nonnull sret %13, %class.SkBitmap* nonnull %6) #13
  call void @_ZN13SkImageShader4MakeE5sk_spI7SkImageE10SkTileModeS3_RK17SkSamplingOptionsPK8SkMatrixb(%class.sk_sp.7* nonnull sret %12, %class.sk_sp.13* nonnull %13, i32 0, i32 0, %struct.SkSamplingOptions* dereferenceable(20) %2, %class.SkMatrix* nonnull %7, i1 zeroext %156) #13
  %187 = getelementptr inbounds %class.sk_sp.13, %class.sk_sp.13* %13, i64 0, i32 0
  %188 = load %class.SkImage*, %class.SkImage** %187, align 8
  %189 = icmp eq %class.SkImage* %188, null
  br i1 %189, label %200, label %190

190:                                              ; preds = %159
  %191 = getelementptr inbounds %class.SkImage, %class.SkImage* %188, i64 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0
  %192 = atomicrmw add i32* %191, i32 -1 acq_rel
  %193 = icmp eq i32 %192, 1
  br i1 %193, label %194, label %200

194:                                              ; preds = %190
  %195 = bitcast %class.SkImage* %188 to %class.SkRefCntBase*
  %196 = bitcast %class.SkImage* %188 to void (%class.SkRefCntBase*)***
  %197 = load void (%class.SkRefCntBase*)**, void (%class.SkRefCntBase*)*** %196, align 8
  %198 = getelementptr inbounds void (%class.SkRefCntBase*)*, void (%class.SkRefCntBase*)** %197, i64 2
  %199 = load void (%class.SkRefCntBase*)*, void (%class.SkRefCntBase*)** %198, align 8
  call void %199(%class.SkRefCntBase* nonnull %195) #13
  br label %200

200:                                              ; preds = %159, %190, %194
  %201 = bitcast %class.sk_sp.14* %14 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %201) #13
  %202 = getelementptr inbounds %class.sk_sp.14, %class.sk_sp.14* %14, i64 0, i32 0
  store %class.SkSurface* inttoptr (i64 -6148914691236517206 to %class.SkSurface*), %class.SkSurface** %202, align 8
  %203 = getelementptr inbounds %class.SkPixmap, %class.SkPixmap* %5, i64 0, i32 2
  %204 = getelementptr inbounds %class.SkPixmap, %class.SkPixmap* %5, i64 0, i32 0
  %205 = load i8*, i8** %204, align 8
  %206 = getelementptr inbounds %class.SkPixmap, %class.SkPixmap* %5, i64 0, i32 1
  %207 = load i64, i64* %206, align 8
  call void @_ZN9SkSurface16MakeRasterDirectERK11SkImageInfoPvmPK14SkSurfaceProps(%class.sk_sp.14* nonnull sret %14, %struct.SkImageInfo* dereferenceable(24) %203, i8* %205, i64 %207, %class.SkSurfaceProps* null) #13
  %208 = load %class.SkShader*, %class.SkShader** %186, align 8
  %209 = icmp eq %class.SkShader* %208, null
  br i1 %209, label %239, label %210

210:                                              ; preds = %200
  %211 = load %class.SkSurface*, %class.SkSurface** %202, align 8
  %212 = icmp eq %class.SkSurface* %211, null
  br i1 %212, label %213, label %214

213:                                              ; preds = %210
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %201) #13
  br label %256

214:                                              ; preds = %210
  %215 = bitcast %class.SkPaint* %15 to i8*
  call void @llvm.lifetime.start.p0i8(i64 72, i8* nonnull %215) #13
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %215, i8* align 8 bitcast (%class.SkPaint* @__const._ZL16draw_orientationRK8SkPixmapS1_15SkEncodedOrigin.p to i8*), i64 72, i1 false)
  call void @_ZN7SkPaintC1Ev(%class.SkPaint* nonnull %15) #13
  %216 = getelementptr inbounds %class.SkPaint, %class.SkPaint* %15, i64 0, i32 8, i32 0, i32 0
  %217 = load i32, i32* %216, align 8
  %218 = and i32 %217, -261121
  %219 = or i32 %218, 1024
  store i32 %219, i32* %216, align 8
  %220 = bitcast %class.sk_sp.7* %12 to i64*
  %221 = load i64, i64* %220, align 8
  store %class.SkShader* null, %class.SkShader** %186, align 8
  %222 = bitcast %class.sk_sp.7* %16 to i64*
  store i64 %221, i64* %222, align 8
  call void @_ZN7SkPaint9setShaderE5sk_spI8SkShaderE(%class.SkPaint* nonnull %15, %class.sk_sp.7* nonnull %16) #13
  %223 = getelementptr inbounds %class.sk_sp.7, %class.sk_sp.7* %16, i64 0, i32 0
  %224 = load %class.SkShader*, %class.SkShader** %223, align 8
  %225 = icmp eq %class.SkShader* %224, null
  br i1 %225, label %236, label %226

226:                                              ; preds = %214
  %227 = getelementptr inbounds %class.SkShader, %class.SkShader* %224, i64 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0
  %228 = atomicrmw add i32* %227, i32 -1 acq_rel
  %229 = icmp eq i32 %228, 1
  br i1 %229, label %230, label %236

230:                                              ; preds = %226
  %231 = bitcast %class.SkShader* %224 to %class.SkRefCntBase*
  %232 = bitcast %class.SkShader* %224 to void (%class.SkRefCntBase*)***
  %233 = load void (%class.SkRefCntBase*)**, void (%class.SkRefCntBase*)*** %232, align 8
  %234 = getelementptr inbounds void (%class.SkRefCntBase*)*, void (%class.SkRefCntBase*)** %233, i64 2
  %235 = load void (%class.SkRefCntBase*)*, void (%class.SkRefCntBase*)** %234, align 8
  call void %235(%class.SkRefCntBase* nonnull %231) #13
  br label %236

236:                                              ; preds = %214, %226, %230
  %237 = load %class.SkSurface*, %class.SkSurface** %202, align 8
  %238 = call %class.SkCanvas* @_ZN9SkSurface9getCanvasEv(%class.SkSurface* %237) #13
  call void @_ZN8SkCanvas9drawPaintERK7SkPaint(%class.SkCanvas* %238, %class.SkPaint* nonnull dereferenceable(72) %15) #13
  call void @_ZN7SkPaintD1Ev(%class.SkPaint* nonnull %15) #13
  call void @llvm.lifetime.end.p0i8(i64 72, i8* nonnull %215) #13
  br label %239

239:                                              ; preds = %200, %236
  %240 = phi i1 [ false, %200 ], [ true, %236 ]
  %241 = load %class.SkSurface*, %class.SkSurface** %202, align 8
  %242 = icmp eq %class.SkSurface* %241, null
  br i1 %242, label %253, label %243

243:                                              ; preds = %239
  %244 = getelementptr inbounds %class.SkSurface, %class.SkSurface* %241, i64 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0
  %245 = atomicrmw add i32* %244, i32 -1 acq_rel
  %246 = icmp eq i32 %245, 1
  br i1 %246, label %247, label %253

247:                                              ; preds = %243
  %248 = bitcast %class.SkSurface* %241 to %class.SkRefCntBase*
  %249 = bitcast %class.SkSurface* %241 to void (%class.SkRefCntBase*)***
  %250 = load void (%class.SkRefCntBase*)**, void (%class.SkRefCntBase*)*** %249, align 8
  %251 = getelementptr inbounds void (%class.SkRefCntBase*)*, void (%class.SkRefCntBase*)** %250, i64 2
  %252 = load void (%class.SkRefCntBase*)*, void (%class.SkRefCntBase*)** %251, align 8
  call void %252(%class.SkRefCntBase* nonnull %248) #13
  br label %253

253:                                              ; preds = %239, %243, %247
  %254 = load %class.SkShader*, %class.SkShader** %186, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %201) #13
  %255 = icmp eq %class.SkShader* %254, null
  br i1 %255, label %268, label %256

256:                                              ; preds = %213, %253
  %257 = phi i1 [ false, %213 ], [ %240, %253 ]
  %258 = phi %class.SkShader* [ %208, %213 ], [ %254, %253 ]
  %259 = getelementptr inbounds %class.SkShader, %class.SkShader* %258, i64 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0
  %260 = atomicrmw add i32* %259, i32 -1 acq_rel
  %261 = icmp eq i32 %260, 1
  br i1 %261, label %262, label %268

262:                                              ; preds = %256
  %263 = bitcast %class.SkShader* %258 to %class.SkRefCntBase*
  %264 = bitcast %class.SkShader* %258 to void (%class.SkRefCntBase*)***
  %265 = load void (%class.SkRefCntBase*)**, void (%class.SkRefCntBase*)*** %264, align 8
  %266 = getelementptr inbounds void (%class.SkRefCntBase*)*, void (%class.SkRefCntBase*)** %265, i64 2
  %267 = load void (%class.SkRefCntBase*)*, void (%class.SkRefCntBase*)** %266, align 8
  call void %267(%class.SkRefCntBase* nonnull %263) #13
  br label %268

268:                                              ; preds = %253, %256, %262
  %269 = phi i1 [ %240, %253 ], [ %257, %256 ], [ %257, %262 ]
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %185) #13
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %160) #13
  br label %270

270:                                              ; preds = %155, %268
  %271 = phi i1 [ %269, %268 ], [ false, %155 ]
  call void @_ZN8SkBitmapD1Ev(%class.SkBitmap* nonnull %6) #13
  call void @llvm.lifetime.end.p0i8(i64 56, i8* nonnull %157) #13
  br label %272

272:                                              ; preds = %52, %69, %73, %76, %270, %83
  %273 = phi i1 [ %89, %83 ], [ %271, %270 ], [ false, %76 ], [ false, %73 ], [ false, %69 ], [ false, %52 ]
  %274 = load %class.SkColorSpace*, %class.SkColorSpace** %41, align 8
  %275 = icmp eq %class.SkColorSpace* %274, null
  br i1 %275, label %282, label %276

276:                                              ; preds = %272
  %277 = getelementptr inbounds %class.SkColorSpace, %class.SkColorSpace* %274, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %278 = atomicrmw add i32* %277, i32 -1 acq_rel
  %279 = icmp eq i32 %278, 1
  br i1 %279, label %280, label %282

280:                                              ; preds = %276
  %281 = bitcast %class.SkColorSpace* %274 to i8*
  call void @_ZdlPv(i8* %281) #12
  br label %282

282:                                              ; preds = %272, %276, %280
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %37) #13
  %283 = load %class.SkColorSpace*, %class.SkColorSpace** %21, align 8
  %284 = icmp eq %class.SkColorSpace* %283, null
  br i1 %284, label %291, label %285

285:                                              ; preds = %282
  %286 = getelementptr inbounds %class.SkColorSpace, %class.SkColorSpace* %283, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %287 = atomicrmw add i32* %286, i32 -1 acq_rel
  %288 = icmp eq i32 %287, 1
  br i1 %288, label %289, label %291

289:                                              ; preds = %285
  %290 = bitcast %class.SkColorSpace* %283 to i8*
  call void @_ZdlPv(i8* %290) #12
  br label %291

291:                                              ; preds = %282, %285, %289
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %17) #13
  ret i1 %273
}

declare void @_ZN8SkBitmapC1Ev(%class.SkBitmap*) unnamed_addr #2

declare zeroext i1 @_ZN8SkBitmap13installPixelsERK8SkPixmap(%class.SkBitmap*, %class.SkPixmap* dereferenceable(40)) local_unnamed_addr #2

declare void @_ZN8SkBitmap12setImmutableEv(%class.SkBitmap*) local_unnamed_addr #2

declare void @_ZN13SkImageShader4MakeE5sk_spI7SkImageE10SkTileModeS3_RK17SkSamplingOptionsPK8SkMatrixb(%class.sk_sp.7* sret, %class.sk_sp.13*, i32, i32, %struct.SkSamplingOptions* dereferenceable(20), %class.SkMatrix*, i1 zeroext) local_unnamed_addr #2

declare void @_ZNK8SkBitmap7asImageEv(%class.sk_sp.13* sret, %class.SkBitmap*) local_unnamed_addr #2

declare void @_ZN9SkSurface16MakeRasterDirectERK11SkImageInfoPvmPK14SkSurfaceProps(%class.sk_sp.14* sret, %struct.SkImageInfo* dereferenceable(24), i8*, i64, %class.SkSurfaceProps*) local_unnamed_addr #2

declare void @_ZN7SkPaint9setShaderE5sk_spI8SkShaderE(%class.SkPaint*, %class.sk_sp.7*) local_unnamed_addr #2

declare %class.SkCanvas* @_ZN9SkSurface9getCanvasEv(%class.SkSurface*) local_unnamed_addr #2

declare void @_ZN8SkCanvas9drawPaintERK7SkPaint(%class.SkCanvas*, %class.SkPaint* dereferenceable(72)) local_unnamed_addr #2

; Function Attrs: nounwind
declare void @_ZN8SkBitmapD1Ev(%class.SkBitmap*) unnamed_addr #4

; Function Attrs: nounwind ssp uwtable
define hidden i32 @_ZNK8SkPixmap8getColorEii(%class.SkPixmap* readonly, i32, i32) local_unnamed_addr #3 align 2 {
  %4 = alloca float, align 4
  %5 = alloca float, align 4
  %6 = alloca float, align 4
  %7 = alloca float, align 4
  %8 = alloca float, align 4
  %9 = alloca float, align 4
  %10 = getelementptr inbounds %class.SkPixmap, %class.SkPixmap* %0, i64 0, i32 2, i32 0, i32 2
  %11 = load i32, i32* %10, align 4
  %12 = icmp eq i32 %11, 2
  %13 = getelementptr inbounds %class.SkPixmap, %class.SkPixmap* %0, i64 0, i32 2, i32 0, i32 1
  %14 = load i32, i32* %13, align 8
  switch i32 %14, label %563 [
    i32 11, label %15
    i32 1, label %32
    i32 18, label %45
    i32 16, label %62
    i32 2, label %79
    i32 3, label %111
    i32 15, label %139
    i32 19, label %157
    i32 17, label %182
    i32 5, label %208
    i32 6, label %228
    i32 4, label %243
    i32 9, label %265
    i32 10, label %297
    i32 7, label %329
    i32 8, label %329
    i32 20, label %414
    i32 12, label %467
    i32 13, label %467
    i32 14, label %520
  ]

15:                                               ; preds = %3
  %16 = getelementptr inbounds %class.SkPixmap, %class.SkPixmap* %0, i64 0, i32 0
  %17 = load i8*, i8** %16, align 8
  %18 = sext i32 %2 to i64
  %19 = getelementptr inbounds %class.SkPixmap, %class.SkPixmap* %0, i64 0, i32 1
  %20 = load i64, i64* %19, align 8
  %21 = mul i64 %20, %18
  %22 = getelementptr inbounds i8, i8* %17, i64 %21
  %23 = sext i32 %1 to i64
  %24 = getelementptr inbounds i8, i8* %22, i64 %23
  %25 = load i8, i8* %24, align 1
  %26 = zext i8 %25 to i32
  %27 = shl nuw nsw i32 %26, 16
  %28 = shl nuw nsw i32 %26, 8
  %29 = or i32 %28, %26
  %30 = or i32 %29, %27
  %31 = or i32 %30, -16777216
  br label %563

32:                                               ; preds = %3
  %33 = getelementptr inbounds %class.SkPixmap, %class.SkPixmap* %0, i64 0, i32 0
  %34 = load i8*, i8** %33, align 8
  %35 = sext i32 %2 to i64
  %36 = getelementptr inbounds %class.SkPixmap, %class.SkPixmap* %0, i64 0, i32 1
  %37 = load i64, i64* %36, align 8
  %38 = mul i64 %37, %35
  %39 = getelementptr inbounds i8, i8* %34, i64 %38
  %40 = sext i32 %1 to i64
  %41 = getelementptr inbounds i8, i8* %39, i64 %40
  %42 = load i8, i8* %41, align 1
  %43 = zext i8 %42 to i32
  %44 = shl nuw i32 %43, 24
  br label %563

45:                                               ; preds = %3
  %46 = getelementptr inbounds %class.SkPixmap, %class.SkPixmap* %0, i64 0, i32 0
  %47 = load i8*, i8** %46, align 8
  %48 = sext i32 %2 to i64
  %49 = getelementptr inbounds %class.SkPixmap, %class.SkPixmap* %0, i64 0, i32 1
  %50 = load i64, i64* %49, align 8
  %51 = mul i64 %50, %48
  %52 = getelementptr inbounds i8, i8* %47, i64 %51
  %53 = shl i32 %1, 1
  %54 = sext i32 %53 to i64
  %55 = getelementptr inbounds i8, i8* %52, i64 %54
  %56 = bitcast i8* %55 to i16*
  %57 = load i16, i16* %56, align 2
  %58 = uitofp i16 %57 to float
  %59 = fmul float %58, 0x3F6FE01FE0000000
  %60 = fptoui float %59 to i32
  %61 = shl i32 %60, 24
  br label %563

62:                                               ; preds = %3
  %63 = getelementptr inbounds %class.SkPixmap, %class.SkPixmap* %0, i64 0, i32 0
  %64 = load i8*, i8** %63, align 8
  %65 = sext i32 %2 to i64
  %66 = getelementptr inbounds %class.SkPixmap, %class.SkPixmap* %0, i64 0, i32 1
  %67 = load i64, i64* %66, align 8
  %68 = mul i64 %67, %65
  %69 = getelementptr inbounds i8, i8* %64, i64 %68
  %70 = shl i32 %1, 1
  %71 = sext i32 %70 to i64
  %72 = getelementptr inbounds i8, i8* %69, i64 %71
  %73 = bitcast i8* %72 to i16*
  %74 = load i16, i16* %73, align 2
  %75 = tail call float @_Z13SkHalfToFloatt(i16 zeroext %74) #13
  %76 = fmul float %75, 2.550000e+02
  %77 = fptoui float %76 to i32
  %78 = shl i32 %77, 24
  br label %563

79:                                               ; preds = %3
  %80 = getelementptr inbounds %class.SkPixmap, %class.SkPixmap* %0, i64 0, i32 0
  %81 = load i8*, i8** %80, align 8
  %82 = sext i32 %2 to i64
  %83 = getelementptr inbounds %class.SkPixmap, %class.SkPixmap* %0, i64 0, i32 1
  %84 = load i64, i64* %83, align 8
  %85 = mul i64 %84, %82
  %86 = getelementptr inbounds i8, i8* %81, i64 %85
  %87 = shl i32 %1, 1
  %88 = sext i32 %87 to i64
  %89 = getelementptr inbounds i8, i8* %86, i64 %88
  %90 = bitcast i8* %89 to i16*
  %91 = load i16, i16* %90, align 2
  %92 = zext i16 %91 to i32
  %93 = lshr i32 %92, 11
  %94 = shl nuw nsw i32 %93, 3
  %95 = lshr i32 %92, 13
  %96 = or i32 %94, %95
  %97 = lshr i32 %92, 5
  %98 = and i32 %97, 63
  %99 = shl nuw nsw i32 %98, 2
  %100 = lshr i32 %98, 4
  %101 = or i32 %99, %100
  %102 = and i32 %92, 31
  %103 = shl nuw nsw i32 %102, 3
  %104 = lshr i32 %102, 2
  %105 = shl nuw nsw i32 %96, 16
  %106 = shl nuw nsw i32 %101, 8
  %107 = or i32 %103, %104
  %108 = or i32 %107, %105
  %109 = or i32 %108, %106
  %110 = or i32 %109, -16777216
  br label %563

111:                                              ; preds = %3
  %112 = getelementptr inbounds %class.SkPixmap, %class.SkPixmap* %0, i64 0, i32 0
  %113 = load i8*, i8** %112, align 8
  %114 = sext i32 %2 to i64
  %115 = getelementptr inbounds %class.SkPixmap, %class.SkPixmap* %0, i64 0, i32 1
  %116 = load i64, i64* %115, align 8
  %117 = mul i64 %116, %114
  %118 = getelementptr inbounds i8, i8* %113, i64 %117
  %119 = shl i32 %1, 1
  %120 = sext i32 %119 to i64
  %121 = getelementptr inbounds i8, i8* %118, i64 %120
  %122 = bitcast i8* %121 to i16*
  %123 = load i16, i16* %122, align 2
  %124 = zext i16 %123 to i32
  %125 = shl i32 %124, 24
  %126 = and i32 %125, 251658240
  %127 = shl nuw nsw i32 %124, 4
  %128 = and i32 %127, 983040
  %129 = and i32 %124, 3840
  %130 = lshr i32 %124, 4
  %131 = and i32 %130, 15
  %132 = or i32 %128, %129
  %133 = or i32 %132, %126
  %134 = or i32 %133, %131
  %135 = shl nuw i32 %134, 4
  %136 = or i32 %135, %134
  br i1 %12, label %137, label %563

137:                                              ; preds = %111
  %138 = tail call i32 @_ZN15SkUnPreMultiply14PMColorToColorEj(i32 %136) #13
  br label %563

139:                                              ; preds = %3
  %140 = getelementptr inbounds %class.SkPixmap, %class.SkPixmap* %0, i64 0, i32 0
  %141 = load i8*, i8** %140, align 8
  %142 = sext i32 %2 to i64
  %143 = getelementptr inbounds %class.SkPixmap, %class.SkPixmap* %0, i64 0, i32 1
  %144 = load i64, i64* %143, align 8
  %145 = mul i64 %144, %142
  %146 = getelementptr inbounds i8, i8* %141, i64 %145
  %147 = shl i32 %1, 1
  %148 = sext i32 %147 to i64
  %149 = getelementptr inbounds i8, i8* %146, i64 %148
  %150 = bitcast i8* %149 to i16*
  %151 = load i16, i16* %150, align 2
  %152 = zext i16 %151 to i32
  %153 = shl nuw i32 %152, 16
  %154 = and i32 %152, 65280
  %155 = or i32 %154, %153
  %156 = or i32 %155, -16777216
  br label %563

157:                                              ; preds = %3
  %158 = getelementptr inbounds %class.SkPixmap, %class.SkPixmap* %0, i64 0, i32 0
  %159 = load i8*, i8** %158, align 8
  %160 = sext i32 %2 to i64
  %161 = getelementptr inbounds %class.SkPixmap, %class.SkPixmap* %0, i64 0, i32 1
  %162 = load i64, i64* %161, align 8
  %163 = mul i64 %162, %160
  %164 = getelementptr inbounds i8, i8* %159, i64 %163
  %165 = shl i32 %1, 2
  %166 = sext i32 %165 to i64
  %167 = getelementptr inbounds i8, i8* %164, i64 %166
  %168 = bitcast i8* %167 to i32*
  %169 = load i32, i32* %168, align 4
  %170 = and i32 %169, 65535
  %171 = uitofp i32 %170 to float
  %172 = fmul float %171, 0x3F6FE01FE0000000
  %173 = fptoui float %172 to i32
  %174 = shl i32 %173, 16
  %175 = lshr i32 %169, 16
  %176 = uitofp i32 %175 to float
  %177 = fmul float %176, 0x3F6FE01FE0000000
  %178 = fptoui float %177 to i32
  %179 = shl i32 %178, 8
  %180 = or i32 %179, %174
  %181 = or i32 %180, -16777216
  br label %563

182:                                              ; preds = %3
  %183 = getelementptr inbounds %class.SkPixmap, %class.SkPixmap* %0, i64 0, i32 0
  %184 = load i8*, i8** %183, align 8
  %185 = sext i32 %2 to i64
  %186 = getelementptr inbounds %class.SkPixmap, %class.SkPixmap* %0, i64 0, i32 1
  %187 = load i64, i64* %186, align 8
  %188 = mul i64 %187, %185
  %189 = getelementptr inbounds i8, i8* %184, i64 %188
  %190 = shl i32 %1, 2
  %191 = sext i32 %190 to i64
  %192 = getelementptr inbounds i8, i8* %189, i64 %191
  %193 = bitcast i8* %192 to i32*
  %194 = load i32, i32* %193, align 4
  %195 = trunc i32 %194 to i16
  %196 = tail call float @_Z13SkHalfToFloatt(i16 zeroext %195) #13
  %197 = fmul float %196, 2.550000e+02
  %198 = fptoui float %197 to i32
  %199 = lshr i32 %194, 16
  %200 = trunc i32 %199 to i16
  %201 = tail call float @_Z13SkHalfToFloatt(i16 zeroext %200) #13
  %202 = fmul float %201, 2.550000e+02
  %203 = fptoui float %202 to i32
  %204 = shl i32 %198, 16
  %205 = shl i32 %203, 8
  %206 = or i32 %204, %205
  %207 = or i32 %206, -16777216
  br label %563

208:                                              ; preds = %3
  %209 = getelementptr inbounds %class.SkPixmap, %class.SkPixmap* %0, i64 0, i32 0
  %210 = load i8*, i8** %209, align 8
  %211 = sext i32 %2 to i64
  %212 = getelementptr inbounds %class.SkPixmap, %class.SkPixmap* %0, i64 0, i32 1
  %213 = load i64, i64* %212, align 8
  %214 = mul i64 %213, %211
  %215 = getelementptr inbounds i8, i8* %210, i64 %214
  %216 = shl i32 %1, 2
  %217 = sext i32 %216 to i64
  %218 = getelementptr inbounds i8, i8* %215, i64 %217
  %219 = bitcast i8* %218 to i32*
  %220 = load i32, i32* %219, align 4
  %221 = lshr i32 %220, 16
  %222 = and i32 %221, 255
  %223 = and i32 %220, 65280
  %224 = or i32 %223, %222
  %225 = shl i32 %220, 16
  %226 = or i32 %224, %225
  %227 = or i32 %226, -16777216
  br label %563

228:                                              ; preds = %3
  %229 = getelementptr inbounds %class.SkPixmap, %class.SkPixmap* %0, i64 0, i32 0
  %230 = load i8*, i8** %229, align 8
  %231 = sext i32 %2 to i64
  %232 = getelementptr inbounds %class.SkPixmap, %class.SkPixmap* %0, i64 0, i32 1
  %233 = load i64, i64* %232, align 8
  %234 = mul i64 %233, %231
  %235 = getelementptr inbounds i8, i8* %230, i64 %234
  %236 = shl i32 %1, 2
  %237 = sext i32 %236 to i64
  %238 = getelementptr inbounds i8, i8* %235, i64 %237
  %239 = bitcast i8* %238 to i32*
  %240 = load i32, i32* %239, align 4
  br i1 %12, label %241, label %563

241:                                              ; preds = %228
  %242 = tail call i32 @_ZN15SkUnPreMultiply14PMColorToColorEj(i32 %240) #13
  br label %563

243:                                              ; preds = %3
  %244 = getelementptr inbounds %class.SkPixmap, %class.SkPixmap* %0, i64 0, i32 0
  %245 = load i8*, i8** %244, align 8
  %246 = sext i32 %2 to i64
  %247 = getelementptr inbounds %class.SkPixmap, %class.SkPixmap* %0, i64 0, i32 1
  %248 = load i64, i64* %247, align 8
  %249 = mul i64 %248, %246
  %250 = getelementptr inbounds i8, i8* %245, i64 %249
  %251 = shl i32 %1, 2
  %252 = sext i32 %251 to i64
  %253 = getelementptr inbounds i8, i8* %250, i64 %252
  %254 = bitcast i8* %253 to i32*
  %255 = load i32, i32* %254, align 4
  %256 = lshr i32 %255, 16
  %257 = and i32 %256, 255
  %258 = and i32 %255, -16711936
  %259 = or i32 %257, %258
  %260 = shl i32 %255, 16
  %261 = and i32 %260, 16711680
  %262 = or i32 %259, %261
  br i1 %12, label %263, label %563

263:                                              ; preds = %243
  %264 = tail call i32 @_ZN15SkUnPreMultiply14PMColorToColorEj(i32 %262) #13
  br label %563

265:                                              ; preds = %3
  %266 = getelementptr inbounds %class.SkPixmap, %class.SkPixmap* %0, i64 0, i32 0
  %267 = load i8*, i8** %266, align 8
  %268 = sext i32 %2 to i64
  %269 = getelementptr inbounds %class.SkPixmap, %class.SkPixmap* %0, i64 0, i32 1
  %270 = load i64, i64* %269, align 8
  %271 = mul i64 %270, %268
  %272 = getelementptr inbounds i8, i8* %267, i64 %271
  %273 = shl i32 %1, 2
  %274 = sext i32 %273 to i64
  %275 = getelementptr inbounds i8, i8* %272, i64 %274
  %276 = bitcast i8* %275 to i32*
  %277 = load i32, i32* %276, align 4
  %278 = and i32 %277, 1023
  %279 = uitofp i32 %278 to float
  %280 = fmul float %279, 0x3FCFE7FA00000000
  %281 = fptoui float %280 to i32
  %282 = shl i32 %281, 16
  %283 = lshr i32 %277, 10
  %284 = and i32 %283, 1023
  %285 = uitofp i32 %284 to float
  %286 = fmul float %285, 0x3FCFE7FA00000000
  %287 = fptoui float %286 to i32
  %288 = shl i32 %287, 8
  %289 = lshr i32 %277, 20
  %290 = and i32 %289, 1023
  %291 = uitofp i32 %290 to float
  %292 = fmul float %291, 0x3FCFE7FA00000000
  %293 = fptoui float %292 to i32
  %294 = or i32 %282, %293
  %295 = or i32 %294, %288
  %296 = or i32 %295, -16777216
  br label %563

297:                                              ; preds = %3
  %298 = getelementptr inbounds %class.SkPixmap, %class.SkPixmap* %0, i64 0, i32 0
  %299 = load i8*, i8** %298, align 8
  %300 = sext i32 %2 to i64
  %301 = getelementptr inbounds %class.SkPixmap, %class.SkPixmap* %0, i64 0, i32 1
  %302 = load i64, i64* %301, align 8
  %303 = mul i64 %302, %300
  %304 = getelementptr inbounds i8, i8* %299, i64 %303
  %305 = shl i32 %1, 2
  %306 = sext i32 %305 to i64
  %307 = getelementptr inbounds i8, i8* %304, i64 %306
  %308 = bitcast i8* %307 to i32*
  %309 = load i32, i32* %308, align 4
  %310 = and i32 %309, 1023
  %311 = uitofp i32 %310 to float
  %312 = fmul float %311, 0x3FCFE7FA00000000
  %313 = fptoui float %312 to i32
  %314 = lshr i32 %309, 10
  %315 = and i32 %314, 1023
  %316 = uitofp i32 %315 to float
  %317 = fmul float %316, 0x3FCFE7FA00000000
  %318 = fptoui float %317 to i32
  %319 = shl i32 %318, 8
  %320 = lshr i32 %309, 20
  %321 = and i32 %320, 1023
  %322 = uitofp i32 %321 to float
  %323 = fmul float %322, 0x3FCFE7FA00000000
  %324 = fptoui float %323 to i32
  %325 = shl i32 %324, 16
  %326 = or i32 %319, %313
  %327 = or i32 %326, %325
  %328 = or i32 %327, -16777216
  br label %563

329:                                              ; preds = %3, %3
  %330 = getelementptr inbounds %class.SkPixmap, %class.SkPixmap* %0, i64 0, i32 0
  %331 = load i8*, i8** %330, align 8
  %332 = sext i32 %2 to i64
  %333 = getelementptr inbounds %class.SkPixmap, %class.SkPixmap* %0, i64 0, i32 1
  %334 = load i64, i64* %333, align 8
  %335 = mul i64 %334, %332
  %336 = getelementptr inbounds i8, i8* %331, i64 %335
  %337 = shl i32 %1, 2
  %338 = sext i32 %337 to i64
  %339 = getelementptr inbounds i8, i8* %336, i64 %338
  %340 = bitcast i8* %339 to i32*
  %341 = load i32, i32* %340, align 4
  %342 = and i32 %341, 1023
  %343 = uitofp i32 %342 to float
  %344 = fmul float %343, 0x3F50040100000000
  %345 = bitcast float %344 to i32
  %346 = lshr i32 %341, 10
  %347 = and i32 %346, 1023
  %348 = uitofp i32 %347 to float
  %349 = fmul float %348, 0x3F50040100000000
  %350 = lshr i32 %341, 20
  %351 = and i32 %350, 1023
  %352 = uitofp i32 %351 to float
  %353 = fmul float %352, 0x3F50040100000000
  %354 = bitcast float %353 to i32
  %355 = lshr i32 %341, 30
  %356 = uitofp i32 %355 to float
  %357 = fmul float %356, 0x3FD5555560000000
  %358 = icmp eq i32 %14, 8
  %359 = select i1 %358, i32 %345, i32 %354
  %360 = select i1 %358, i32 %354, i32 %345
  %361 = fcmp oeq float %357, 0.000000e+00
  %362 = xor i1 %12, true
  %363 = or i1 %361, %362
  br i1 %363, label %394, label %364

364:                                              ; preds = %329
  %365 = bitcast float* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %365)
  %366 = bitcast i32 %360 to float
  %367 = fdiv float %366, %357
  store float %367, float* %4, align 4
  %368 = bitcast float* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %368)
  store float 0.000000e+00, float* %5, align 4
  %369 = bitcast float* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %369)
  store float 1.000000e+00, float* %6, align 4
  %370 = fcmp ogt float %367, 1.000000e+00
  %371 = select i1 %370, float* %6, float* %4
  %372 = load float, float* %371, align 4
  %373 = fcmp ogt float %372, 0.000000e+00
  %374 = select i1 %373, float* %371, float* %5
  %375 = bitcast float* %374 to i32*
  %376 = load i32, i32* %375, align 4
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %369)
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %368)
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %365)
  %377 = fdiv float %349, %357
  %378 = fcmp ogt float %377, 1.000000e+00
  %379 = select i1 %378, float 1.000000e+00, float %377
  %380 = fcmp ogt float %379, 0.000000e+00
  %381 = select i1 %380, float %379, float 0.000000e+00
  %382 = bitcast float* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %382)
  %383 = bitcast i32 %359 to float
  %384 = fdiv float %383, %357
  store float %384, float* %7, align 4
  %385 = bitcast float* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %385)
  store float 0.000000e+00, float* %8, align 4
  %386 = bitcast float* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %386)
  store float 1.000000e+00, float* %9, align 4
  %387 = fcmp ogt float %384, 1.000000e+00
  %388 = select i1 %387, float* %9, float* %7
  %389 = load float, float* %388, align 4
  %390 = fcmp ogt float %389, 0.000000e+00
  %391 = select i1 %390, float* %388, float* %8
  %392 = bitcast float* %391 to i32*
  %393 = load i32, i32* %392, align 4
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %386)
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %385)
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %382)
  br label %394

394:                                              ; preds = %329, %364
  %395 = phi i32 [ %359, %329 ], [ %393, %364 ]
  %396 = phi i32 [ %360, %329 ], [ %376, %364 ]
  %397 = phi float [ %349, %329 ], [ %381, %364 ]
  %398 = bitcast i32 %396 to float
  %399 = fmul float %398, 2.550000e+02
  %400 = fptoui float %399 to i32
  %401 = shl i32 %400, 16
  %402 = fmul float %397, 2.550000e+02
  %403 = fptoui float %402 to i32
  %404 = shl i32 %403, 8
  %405 = bitcast i32 %395 to float
  %406 = fmul float %405, 2.550000e+02
  %407 = fptoui float %406 to i32
  %408 = fmul float %357, 2.550000e+02
  %409 = fptoui float %408 to i32
  %410 = shl i32 %409, 24
  %411 = or i32 %410, %407
  %412 = or i32 %411, %404
  %413 = or i32 %412, %401
  br label %563

414:                                              ; preds = %3
  %415 = getelementptr inbounds %class.SkPixmap, %class.SkPixmap* %0, i64 0, i32 0
  %416 = load i8*, i8** %415, align 8
  %417 = sext i32 %2 to i64
  %418 = getelementptr inbounds %class.SkPixmap, %class.SkPixmap* %0, i64 0, i32 1
  %419 = load i64, i64* %418, align 8
  %420 = mul i64 %419, %417
  %421 = getelementptr inbounds i8, i8* %416, i64 %420
  %422 = shl i32 %1, 3
  %423 = sext i32 %422 to i64
  %424 = getelementptr inbounds i8, i8* %421, i64 %423
  %425 = bitcast i8* %424 to i64*
  %426 = load i64, i64* %425, align 8
  %427 = and i64 %426, 65535
  %428 = uitofp i64 %427 to float
  %429 = fmul float %428, 0x3EF0001000000000
  %430 = lshr i64 %426, 16
  %431 = and i64 %430, 65535
  %432 = uitofp i64 %431 to float
  %433 = fmul float %432, 0x3EF0001000000000
  %434 = lshr i64 %426, 32
  %435 = and i64 %434, 65535
  %436 = uitofp i64 %435 to float
  %437 = fmul float %436, 0x3EF0001000000000
  %438 = lshr i64 %426, 48
  %439 = uitofp i64 %438 to float
  %440 = fmul float %439, 0x3EF0001000000000
  %441 = fcmp oeq float %440, 0.000000e+00
  %442 = xor i1 %12, true
  %443 = or i1 %441, %442
  br i1 %443, label %449, label %444

444:                                              ; preds = %414
  %445 = fdiv float 1.000000e+00, %440
  %446 = fmul float %429, %445
  %447 = fmul float %433, %445
  %448 = fmul float %437, %445
  br label %449

449:                                              ; preds = %414, %444
  %450 = phi float [ %447, %444 ], [ %433, %414 ]
  %451 = phi float [ %448, %444 ], [ %437, %414 ]
  %452 = phi float [ %446, %444 ], [ %429, %414 ]
  %453 = fmul float %452, 2.550000e+02
  %454 = fptoui float %453 to i32
  %455 = shl i32 %454, 16
  %456 = fmul float %450, 2.550000e+02
  %457 = fptoui float %456 to i32
  %458 = shl i32 %457, 8
  %459 = fmul float %451, 2.550000e+02
  %460 = fptoui float %459 to i32
  %461 = fmul float %440, 2.550000e+02
  %462 = fptoui float %461 to i32
  %463 = shl i32 %462, 24
  %464 = or i32 %458, %463
  %465 = or i32 %464, %460
  %466 = or i32 %465, %455
  br label %563

467:                                              ; preds = %3, %3
  %468 = bitcast %class.SkPixmap* %0 to i64**
  %469 = load i64*, i64** %468, align 8
  %470 = sext i32 %2 to i64
  %471 = getelementptr inbounds %class.SkPixmap, %class.SkPixmap* %0, i64 0, i32 1
  %472 = load i64, i64* %471, align 8
  %473 = lshr i64 %472, 3
  %474 = mul i64 %473, %470
  %475 = getelementptr inbounds i64, i64* %469, i64 %474
  %476 = sext i32 %1 to i64
  %477 = getelementptr inbounds i64, i64* %475, i64 %476
  %478 = load i64, i64* %477, align 8
  %479 = insertelement <2 x i64> undef, i64 %478, i32 0
  %480 = bitcast <2 x i64> %479 to <8 x i16>
  %481 = shufflevector <8 x i16> %480, <8 x i16> <i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef>, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %482 = bitcast <8 x i16> %481 to <4 x i32>
  %483 = and <4 x i32> %482, <i32 -32769, i32 -32769, i32 -32769, i32 -32769>
  %484 = icmp sgt <4 x i32> %483, <i32 1023, i32 1023, i32 1023, i32 1023>
  %485 = shl <4 x i32> %483, <i32 13, i32 13, i32 13, i32 13>
  %486 = add <4 x i32> %485, <i32 939524096, i32 939524096, i32 939524096, i32 939524096>
  %487 = shl <4 x i32> %482, <i32 16, i32 16, i32 16, i32 16>
  %488 = and <4 x i32> %487, <i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648>
  %489 = select <4 x i1> %484, <4 x i32> %486, <4 x i32> zeroinitializer
  %490 = or <4 x i32> %489, %488
  %491 = bitcast <4 x i32> %490 to <4 x float>
  %492 = extractelement <4 x float> %491, i32 3
  %493 = fcmp oeq float %492, 0.000000e+00
  %494 = xor i1 %12, true
  %495 = or i1 %493, %494
  br i1 %495, label %502, label %496

496:                                              ; preds = %467
  %497 = fdiv float 1.000000e+00, %492
  %498 = insertelement <4 x float> <float undef, float undef, float undef, float 1.000000e+00>, float %497, i32 0
  %499 = insertelement <4 x float> %498, float %497, i32 1
  %500 = insertelement <4 x float> %499, float %497, i32 2
  %501 = fmul <4 x float> %500, %491
  br label %502

502:                                              ; preds = %467, %496
  %503 = phi <4 x float> [ %491, %467 ], [ %501, %496 ]
  %504 = fmul <4 x float> %503, <float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02>
  %505 = fadd <4 x float> %504, <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>
  %506 = tail call <4 x i32> @llvm.x86.sse2.cvttps2dq(<4 x float> %505) #13
  %507 = bitcast <4 x i32> %506 to <8 x i16>
  %508 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %507, <8 x i16> undef) #13
  %509 = bitcast <16 x i8> %508 to <8 x i16>
  %510 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %509, <8 x i16> undef) #13
  %511 = bitcast <16 x i8> %510 to <4 x i32>
  %512 = extractelement <4 x i32> %511, i32 0
  %513 = lshr i32 %512, 16
  %514 = and i32 %513, 255
  %515 = and i32 %512, -16711936
  %516 = or i32 %514, %515
  %517 = shl i32 %512, 16
  %518 = and i32 %517, 16711680
  %519 = or i32 %516, %518
  br label %563

520:                                              ; preds = %3
  %521 = bitcast %class.SkPixmap* %0 to float**
  %522 = load float*, float** %521, align 8
  %523 = shl nsw i32 %2, 2
  %524 = sext i32 %523 to i64
  %525 = getelementptr inbounds %class.SkPixmap, %class.SkPixmap* %0, i64 0, i32 1
  %526 = load i64, i64* %525, align 8
  %527 = lshr i64 %526, 4
  %528 = mul i64 %527, %524
  %529 = getelementptr inbounds float, float* %522, i64 %528
  %530 = shl nsw i32 %1, 2
  %531 = sext i32 %530 to i64
  %532 = getelementptr inbounds float, float* %529, i64 %531
  %533 = bitcast float* %532 to <4 x float>*
  %534 = load <4 x float>, <4 x float>* %533, align 1
  %535 = extractelement <4 x float> %534, i32 3
  %536 = fcmp oeq float %535, 0.000000e+00
  %537 = xor i1 %12, true
  %538 = or i1 %536, %537
  br i1 %538, label %545, label %539

539:                                              ; preds = %520
  %540 = fdiv float 1.000000e+00, %535
  %541 = insertelement <4 x float> <float undef, float undef, float undef, float 1.000000e+00>, float %540, i32 0
  %542 = insertelement <4 x float> %541, float %540, i32 1
  %543 = insertelement <4 x float> %542, float %540, i32 2
  %544 = fmul <4 x float> %534, %543
  br label %545

545:                                              ; preds = %520, %539
  %546 = phi <4 x float> [ %534, %520 ], [ %544, %539 ]
  %547 = fmul <4 x float> %546, <float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02>
  %548 = fadd <4 x float> %547, <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>
  %549 = tail call <4 x i32> @llvm.x86.sse2.cvttps2dq(<4 x float> %548) #13
  %550 = bitcast <4 x i32> %549 to <8 x i16>
  %551 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %550, <8 x i16> undef) #13
  %552 = bitcast <16 x i8> %551 to <8 x i16>
  %553 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %552, <8 x i16> undef) #13
  %554 = bitcast <16 x i8> %553 to <4 x i32>
  %555 = extractelement <4 x i32> %554, i32 0
  %556 = lshr i32 %555, 16
  %557 = and i32 %556, 255
  %558 = and i32 %555, -16711936
  %559 = or i32 %557, %558
  %560 = shl i32 %555, 16
  %561 = and i32 %560, 16711680
  %562 = or i32 %559, %561
  br label %563

563:                                              ; preds = %111, %228, %243, %3, %263, %241, %137, %545, %502, %449, %394, %297, %265, %208, %182, %157, %139, %79, %62, %45, %32, %15
  %564 = phi i32 [ %562, %545 ], [ %519, %502 ], [ %466, %449 ], [ %413, %394 ], [ %328, %297 ], [ %296, %265 ], [ %227, %208 ], [ %207, %182 ], [ %181, %157 ], [ %156, %139 ], [ %110, %79 ], [ %78, %62 ], [ %61, %45 ], [ %44, %32 ], [ %31, %15 ], [ %138, %137 ], [ %136, %111 ], [ %242, %241 ], [ %240, %228 ], [ %264, %263 ], [ %262, %243 ], [ 0, %3 ]
  ret i32 %564
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden zeroext i1 @_ZNK8SkPixmap15computeIsOpaqueEv(%class.SkPixmap* readonly) local_unnamed_addr #5 align 2 {
  %2 = getelementptr inbounds %class.SkPixmap, %class.SkPixmap* %0, i64 0, i32 2, i32 1, i32 1
  %3 = load i32, i32* %2, align 4
  %4 = getelementptr inbounds %class.SkPixmap, %class.SkPixmap* %0, i64 0, i32 2, i32 1, i32 0
  %5 = load i32, i32* %4, align 4
  %6 = getelementptr inbounds %class.SkPixmap, %class.SkPixmap* %0, i64 0, i32 2, i32 0, i32 1
  %7 = load i32, i32* %6, align 8
  switch i32 %7, label %747 [
    i32 1, label %81
    i32 18, label %60
    i32 16, label %50
    i32 2, label %277
    i32 11, label %277
    i32 15, label %277
    i32 19, label %277
    i32 17, label %277
    i32 5, label %277
    i32 9, label %277
    i32 10, label %277
    i32 3, label %29
    i32 6, label %362
    i32 4, label %362
    i32 12, label %484
    i32 13, label %484
    i32 14, label %512
    i32 7, label %540
    i32 8, label %540
    i32 20, label %8
  ]

8:                                                ; preds = %1
  %9 = icmp sgt i32 %3, 0
  br i1 %9, label %10, label %277

10:                                               ; preds = %8
  %11 = getelementptr inbounds %class.SkPixmap, %class.SkPixmap* %0, i64 0, i32 0
  %12 = load i8*, i8** %11, align 8
  %13 = getelementptr inbounds %class.SkPixmap, %class.SkPixmap* %0, i64 0, i32 1
  %14 = load i64, i64* %13, align 8
  %15 = icmp sgt i32 %5, 0
  %16 = zext i32 %3 to i64
  %17 = zext i32 %5 to i64
  %18 = and i64 %17, 4294967292
  %19 = add nsw i64 %18, -4
  %20 = lshr exact i64 %19, 2
  %21 = add nuw nsw i64 %20, 1
  %22 = icmp ult i32 %5, 4
  %23 = and i64 %17, 4294967292
  %24 = and i64 %21, 1
  %25 = icmp eq i64 %19, 0
  %26 = sub nuw nsw i64 %21, %24
  %27 = icmp eq i64 %24, 0
  %28 = icmp eq i64 %23, %17
  br label %665

29:                                               ; preds = %1
  %30 = icmp sgt i32 %3, 0
  br i1 %30, label %31, label %277

31:                                               ; preds = %29
  %32 = getelementptr inbounds %class.SkPixmap, %class.SkPixmap* %0, i64 0, i32 0
  %33 = load i8*, i8** %32, align 8
  %34 = getelementptr inbounds %class.SkPixmap, %class.SkPixmap* %0, i64 0, i32 1
  %35 = load i64, i64* %34, align 8
  %36 = icmp sgt i32 %5, 0
  %37 = zext i32 %3 to i64
  %38 = zext i32 %5 to i64
  %39 = and i64 %38, 4294967288
  %40 = add nsw i64 %39, -8
  %41 = lshr exact i64 %40, 3
  %42 = add nuw nsw i64 %41, 1
  %43 = icmp ult i32 %5, 8
  %44 = and i64 %38, 4294967288
  %45 = and i64 %42, 1
  %46 = icmp eq i64 %40, 0
  %47 = sub nuw nsw i64 %42, %45
  %48 = icmp eq i64 %45, 0
  %49 = icmp eq i64 %44, %38
  br label %281

50:                                               ; preds = %1
  %51 = icmp sgt i32 %3, 0
  br i1 %51, label %52, label %277

52:                                               ; preds = %50
  %53 = getelementptr inbounds %class.SkPixmap, %class.SkPixmap* %0, i64 0, i32 0
  %54 = load i8*, i8** %53, align 8
  %55 = getelementptr inbounds %class.SkPixmap, %class.SkPixmap* %0, i64 0, i32 1
  %56 = load i64, i64* %55, align 8
  %57 = icmp sgt i32 %5, 0
  %58 = zext i32 %3 to i64
  %59 = zext i32 %5 to i64
  br label %261

60:                                               ; preds = %1
  %61 = icmp sgt i32 %3, 0
  br i1 %61, label %62, label %277

62:                                               ; preds = %60
  %63 = getelementptr inbounds %class.SkPixmap, %class.SkPixmap* %0, i64 0, i32 0
  %64 = load i8*, i8** %63, align 8
  %65 = getelementptr inbounds %class.SkPixmap, %class.SkPixmap* %0, i64 0, i32 1
  %66 = load i64, i64* %65, align 8
  %67 = icmp sgt i32 %5, 0
  %68 = zext i32 %3 to i64
  %69 = zext i32 %5 to i64
  %70 = and i64 %69, 4294967288
  %71 = add nsw i64 %70, -8
  %72 = lshr exact i64 %71, 3
  %73 = add nuw nsw i64 %72, 1
  %74 = icmp ult i32 %5, 8
  %75 = and i64 %69, 4294967288
  %76 = and i64 %73, 1
  %77 = icmp eq i64 %71, 0
  %78 = sub nuw nsw i64 %73, %76
  %79 = icmp eq i64 %76, 0
  %80 = icmp eq i64 %75, %69
  br label %184

81:                                               ; preds = %1
  %82 = icmp sgt i32 %3, 0
  br i1 %82, label %83, label %277

83:                                               ; preds = %81
  %84 = getelementptr inbounds %class.SkPixmap, %class.SkPixmap* %0, i64 0, i32 0
  %85 = load i8*, i8** %84, align 8
  %86 = getelementptr inbounds %class.SkPixmap, %class.SkPixmap* %0, i64 0, i32 1
  %87 = load i64, i64* %86, align 8
  %88 = icmp sgt i32 %5, 0
  %89 = zext i32 %3 to i64
  %90 = zext i32 %5 to i64
  %91 = and i64 %90, 4294967288
  %92 = add nsw i64 %91, -8
  %93 = lshr exact i64 %92, 3
  %94 = add nuw nsw i64 %93, 1
  %95 = icmp ult i32 %5, 8
  %96 = and i64 %90, 4294967288
  %97 = and i64 %94, 1
  %98 = icmp eq i64 %92, 0
  %99 = sub nuw nsw i64 %94, %97
  %100 = icmp eq i64 %97, 0
  %101 = icmp eq i64 %96, %90
  br label %105

102:                                              ; preds = %105, %169
  %103 = add nuw nsw i64 %106, 1
  %104 = icmp eq i64 %103, %89
  br i1 %104, label %277, label %105

105:                                              ; preds = %102, %83
  %106 = phi i64 [ 0, %83 ], [ %103, %102 ]
  %107 = mul i64 %87, %106
  %108 = getelementptr inbounds i8, i8* %85, i64 %107
  br i1 %88, label %109, label %102

109:                                              ; preds = %105
  br i1 %95, label %110, label %113

110:                                              ; preds = %160, %109
  %111 = phi i64 [ 0, %109 ], [ %96, %160 ]
  %112 = phi i32 [ 255, %109 ], [ %168, %160 ]
  br label %172

113:                                              ; preds = %109
  br i1 %98, label %143, label %114

114:                                              ; preds = %113, %114
  %115 = phi i64 [ %140, %114 ], [ 0, %113 ]
  %116 = phi <4 x i32> [ %138, %114 ], [ <i32 255, i32 -1, i32 -1, i32 -1>, %113 ]
  %117 = phi <4 x i32> [ %139, %114 ], [ <i32 -1, i32 -1, i32 -1, i32 -1>, %113 ]
  %118 = phi i64 [ %141, %114 ], [ %99, %113 ]
  %119 = getelementptr inbounds i8, i8* %108, i64 %115
  %120 = bitcast i8* %119 to <4 x i8>*
  %121 = load <4 x i8>, <4 x i8>* %120, align 1
  %122 = getelementptr inbounds i8, i8* %119, i64 4
  %123 = bitcast i8* %122 to <4 x i8>*
  %124 = load <4 x i8>, <4 x i8>* %123, align 1
  %125 = zext <4 x i8> %121 to <4 x i32>
  %126 = zext <4 x i8> %124 to <4 x i32>
  %127 = and <4 x i32> %116, %125
  %128 = and <4 x i32> %117, %126
  %129 = or i64 %115, 8
  %130 = getelementptr inbounds i8, i8* %108, i64 %129
  %131 = bitcast i8* %130 to <4 x i8>*
  %132 = load <4 x i8>, <4 x i8>* %131, align 1
  %133 = getelementptr inbounds i8, i8* %130, i64 4
  %134 = bitcast i8* %133 to <4 x i8>*
  %135 = load <4 x i8>, <4 x i8>* %134, align 1
  %136 = zext <4 x i8> %132 to <4 x i32>
  %137 = zext <4 x i8> %135 to <4 x i32>
  %138 = and <4 x i32> %127, %136
  %139 = and <4 x i32> %128, %137
  %140 = add i64 %115, 16
  %141 = add i64 %118, -2
  %142 = icmp eq i64 %141, 0
  br i1 %142, label %143, label %114, !llvm.loop !46

143:                                              ; preds = %114, %113
  %144 = phi <4 x i32> [ undef, %113 ], [ %138, %114 ]
  %145 = phi <4 x i32> [ undef, %113 ], [ %139, %114 ]
  %146 = phi i64 [ 0, %113 ], [ %140, %114 ]
  %147 = phi <4 x i32> [ <i32 255, i32 -1, i32 -1, i32 -1>, %113 ], [ %138, %114 ]
  %148 = phi <4 x i32> [ <i32 -1, i32 -1, i32 -1, i32 -1>, %113 ], [ %139, %114 ]
  br i1 %100, label %160, label %149

149:                                              ; preds = %143
  %150 = getelementptr inbounds i8, i8* %108, i64 %146
  %151 = getelementptr inbounds i8, i8* %150, i64 4
  %152 = bitcast i8* %151 to <4 x i8>*
  %153 = load <4 x i8>, <4 x i8>* %152, align 1
  %154 = zext <4 x i8> %153 to <4 x i32>
  %155 = and <4 x i32> %148, %154
  %156 = bitcast i8* %150 to <4 x i8>*
  %157 = load <4 x i8>, <4 x i8>* %156, align 1
  %158 = zext <4 x i8> %157 to <4 x i32>
  %159 = and <4 x i32> %147, %158
  br label %160

160:                                              ; preds = %143, %149
  %161 = phi <4 x i32> [ %144, %143 ], [ %159, %149 ]
  %162 = phi <4 x i32> [ %145, %143 ], [ %155, %149 ]
  %163 = and <4 x i32> %162, %161
  %164 = shufflevector <4 x i32> %163, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %165 = and <4 x i32> %163, %164
  %166 = shufflevector <4 x i32> %165, <4 x i32> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %167 = and <4 x i32> %165, %166
  %168 = extractelement <4 x i32> %167, i32 0
  br i1 %101, label %169, label %110

169:                                              ; preds = %172, %160
  %170 = phi i32 [ %168, %160 ], [ %178, %172 ]
  %171 = icmp eq i32 %170, 255
  br i1 %171, label %102, label %277

172:                                              ; preds = %110, %172
  %173 = phi i64 [ %179, %172 ], [ %111, %110 ]
  %174 = phi i32 [ %178, %172 ], [ %112, %110 ]
  %175 = getelementptr inbounds i8, i8* %108, i64 %173
  %176 = load i8, i8* %175, align 1
  %177 = zext i8 %176 to i32
  %178 = and i32 %174, %177
  %179 = add nuw nsw i64 %173, 1
  %180 = icmp eq i64 %179, %90
  br i1 %180, label %169, label %172, !llvm.loop !48

181:                                              ; preds = %184, %249
  %182 = add nuw nsw i64 %185, 1
  %183 = icmp eq i64 %182, %68
  br i1 %183, label %277, label %184

184:                                              ; preds = %181, %62
  %185 = phi i64 [ 0, %62 ], [ %182, %181 ]
  %186 = mul i64 %66, %185
  %187 = getelementptr inbounds i8, i8* %64, i64 %186
  %188 = bitcast i8* %187 to i16*
  br i1 %67, label %189, label %181

189:                                              ; preds = %184
  br i1 %74, label %190, label %193

190:                                              ; preds = %240, %189
  %191 = phi i64 [ 0, %189 ], [ %75, %240 ]
  %192 = phi i32 [ 65535, %189 ], [ %248, %240 ]
  br label %252

193:                                              ; preds = %189
  br i1 %77, label %223, label %194

194:                                              ; preds = %193, %194
  %195 = phi i64 [ %220, %194 ], [ 0, %193 ]
  %196 = phi <4 x i32> [ %218, %194 ], [ <i32 65535, i32 -1, i32 -1, i32 -1>, %193 ]
  %197 = phi <4 x i32> [ %219, %194 ], [ <i32 -1, i32 -1, i32 -1, i32 -1>, %193 ]
  %198 = phi i64 [ %221, %194 ], [ %78, %193 ]
  %199 = getelementptr inbounds i16, i16* %188, i64 %195
  %200 = bitcast i16* %199 to <4 x i16>*
  %201 = load <4 x i16>, <4 x i16>* %200, align 2
  %202 = getelementptr inbounds i16, i16* %199, i64 4
  %203 = bitcast i16* %202 to <4 x i16>*
  %204 = load <4 x i16>, <4 x i16>* %203, align 2
  %205 = zext <4 x i16> %201 to <4 x i32>
  %206 = zext <4 x i16> %204 to <4 x i32>
  %207 = and <4 x i32> %196, %205
  %208 = and <4 x i32> %197, %206
  %209 = or i64 %195, 8
  %210 = getelementptr inbounds i16, i16* %188, i64 %209
  %211 = bitcast i16* %210 to <4 x i16>*
  %212 = load <4 x i16>, <4 x i16>* %211, align 2
  %213 = getelementptr inbounds i16, i16* %210, i64 4
  %214 = bitcast i16* %213 to <4 x i16>*
  %215 = load <4 x i16>, <4 x i16>* %214, align 2
  %216 = zext <4 x i16> %212 to <4 x i32>
  %217 = zext <4 x i16> %215 to <4 x i32>
  %218 = and <4 x i32> %207, %216
  %219 = and <4 x i32> %208, %217
  %220 = add i64 %195, 16
  %221 = add i64 %198, -2
  %222 = icmp eq i64 %221, 0
  br i1 %222, label %223, label %194, !llvm.loop !50

223:                                              ; preds = %194, %193
  %224 = phi <4 x i32> [ undef, %193 ], [ %218, %194 ]
  %225 = phi <4 x i32> [ undef, %193 ], [ %219, %194 ]
  %226 = phi i64 [ 0, %193 ], [ %220, %194 ]
  %227 = phi <4 x i32> [ <i32 65535, i32 -1, i32 -1, i32 -1>, %193 ], [ %218, %194 ]
  %228 = phi <4 x i32> [ <i32 -1, i32 -1, i32 -1, i32 -1>, %193 ], [ %219, %194 ]
  br i1 %79, label %240, label %229

229:                                              ; preds = %223
  %230 = getelementptr inbounds i16, i16* %188, i64 %226
  %231 = getelementptr inbounds i16, i16* %230, i64 4
  %232 = bitcast i16* %231 to <4 x i16>*
  %233 = load <4 x i16>, <4 x i16>* %232, align 2
  %234 = zext <4 x i16> %233 to <4 x i32>
  %235 = and <4 x i32> %228, %234
  %236 = bitcast i16* %230 to <4 x i16>*
  %237 = load <4 x i16>, <4 x i16>* %236, align 2
  %238 = zext <4 x i16> %237 to <4 x i32>
  %239 = and <4 x i32> %227, %238
  br label %240

240:                                              ; preds = %223, %229
  %241 = phi <4 x i32> [ %224, %223 ], [ %239, %229 ]
  %242 = phi <4 x i32> [ %225, %223 ], [ %235, %229 ]
  %243 = and <4 x i32> %242, %241
  %244 = shufflevector <4 x i32> %243, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %245 = and <4 x i32> %243, %244
  %246 = shufflevector <4 x i32> %245, <4 x i32> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %247 = and <4 x i32> %245, %246
  %248 = extractelement <4 x i32> %247, i32 0
  br i1 %80, label %249, label %190

249:                                              ; preds = %252, %240
  %250 = phi i32 [ %248, %240 ], [ %258, %252 ]
  %251 = icmp eq i32 %250, 65535
  br i1 %251, label %181, label %277

252:                                              ; preds = %190, %252
  %253 = phi i64 [ %259, %252 ], [ %191, %190 ]
  %254 = phi i32 [ %258, %252 ], [ %192, %190 ]
  %255 = getelementptr inbounds i16, i16* %188, i64 %253
  %256 = load i16, i16* %255, align 2
  %257 = zext i16 %256 to i32
  %258 = and i32 %254, %257
  %259 = add nuw nsw i64 %253, 1
  %260 = icmp eq i64 %259, %69
  br i1 %260, label %249, label %252, !llvm.loop !51

261:                                              ; preds = %274, %52
  %262 = phi i64 [ 0, %52 ], [ %275, %274 ]
  %263 = mul i64 %56, %262
  %264 = getelementptr inbounds i8, i8* %54, i64 %263
  %265 = bitcast i8* %264 to i16*
  br i1 %57, label %268, label %274

266:                                              ; preds = %268
  %267 = icmp eq i64 %273, %59
  br i1 %267, label %274, label %268

268:                                              ; preds = %261, %266
  %269 = phi i64 [ %273, %266 ], [ 0, %261 ]
  %270 = getelementptr inbounds i16, i16* %265, i64 %269
  %271 = load i16, i16* %270, align 2
  %272 = icmp ult i16 %271, 15360
  %273 = add nuw nsw i64 %269, 1
  br i1 %272, label %277, label %266

274:                                              ; preds = %266, %261
  %275 = add nuw nsw i64 %262, 1
  %276 = icmp eq i64 %275, %58
  br i1 %276, label %277, label %261

277:                                              ; preds = %734, %662, %651, %561, %534, %525, %506, %497, %473, %383, %348, %279, %274, %268, %249, %181, %169, %102, %8, %540, %512, %484, %362, %29, %50, %60, %81, %747, %1, %1, %1, %1, %1, %1, %1, %1
  %278 = phi i1 [ false, %747 ], [ true, %1 ], [ true, %1 ], [ true, %1 ], [ true, %1 ], [ true, %1 ], [ true, %1 ], [ true, %1 ], [ true, %1 ], [ true, %81 ], [ true, %60 ], [ true, %50 ], [ true, %29 ], [ true, %362 ], [ true, %484 ], [ true, %512 ], [ true, %540 ], [ true, %8 ], [ false, %169 ], [ true, %102 ], [ false, %249 ], [ true, %181 ], [ false, %268 ], [ true, %274 ], [ false, %348 ], [ true, %279 ], [ false, %473 ], [ true, %383 ], [ false, %497 ], [ true, %506 ], [ false, %525 ], [ true, %534 ], [ false, %651 ], [ true, %561 ], [ false, %734 ], [ true, %662 ]
  ret i1 %278

279:                                              ; preds = %348
  %280 = icmp eq i64 %352, %37
  br i1 %280, label %277, label %281

281:                                              ; preds = %279, %31
  %282 = phi i64 [ 0, %31 ], [ %352, %279 ]
  %283 = phi i32 [ 65535, %31 ], [ %349, %279 ]
  %284 = mul i64 %35, %282
  %285 = getelementptr inbounds i8, i8* %33, i64 %284
  %286 = bitcast i8* %285 to i16*
  br i1 %36, label %287, label %348

287:                                              ; preds = %281
  br i1 %43, label %288, label %291

288:                                              ; preds = %339, %287
  %289 = phi i64 [ 0, %287 ], [ %44, %339 ]
  %290 = phi i32 [ %283, %287 ], [ %347, %339 ]
  br label %353

291:                                              ; preds = %287
  %292 = insertelement <4 x i32> <i32 undef, i32 -1, i32 -1, i32 -1>, i32 %283, i32 0
  br i1 %46, label %322, label %293

293:                                              ; preds = %291, %293
  %294 = phi i64 [ %319, %293 ], [ 0, %291 ]
  %295 = phi <4 x i32> [ %317, %293 ], [ %292, %291 ]
  %296 = phi <4 x i32> [ %318, %293 ], [ <i32 -1, i32 -1, i32 -1, i32 -1>, %291 ]
  %297 = phi i64 [ %320, %293 ], [ %47, %291 ]
  %298 = getelementptr inbounds i16, i16* %286, i64 %294
  %299 = bitcast i16* %298 to <4 x i16>*
  %300 = load <4 x i16>, <4 x i16>* %299, align 2
  %301 = getelementptr inbounds i16, i16* %298, i64 4
  %302 = bitcast i16* %301 to <4 x i16>*
  %303 = load <4 x i16>, <4 x i16>* %302, align 2
  %304 = zext <4 x i16> %300 to <4 x i32>
  %305 = zext <4 x i16> %303 to <4 x i32>
  %306 = and <4 x i32> %295, %304
  %307 = and <4 x i32> %296, %305
  %308 = or i64 %294, 8
  %309 = getelementptr inbounds i16, i16* %286, i64 %308
  %310 = bitcast i16* %309 to <4 x i16>*
  %311 = load <4 x i16>, <4 x i16>* %310, align 2
  %312 = getelementptr inbounds i16, i16* %309, i64 4
  %313 = bitcast i16* %312 to <4 x i16>*
  %314 = load <4 x i16>, <4 x i16>* %313, align 2
  %315 = zext <4 x i16> %311 to <4 x i32>
  %316 = zext <4 x i16> %314 to <4 x i32>
  %317 = and <4 x i32> %306, %315
  %318 = and <4 x i32> %307, %316
  %319 = add i64 %294, 16
  %320 = add i64 %297, -2
  %321 = icmp eq i64 %320, 0
  br i1 %321, label %322, label %293, !llvm.loop !52

322:                                              ; preds = %293, %291
  %323 = phi <4 x i32> [ undef, %291 ], [ %317, %293 ]
  %324 = phi <4 x i32> [ undef, %291 ], [ %318, %293 ]
  %325 = phi i64 [ 0, %291 ], [ %319, %293 ]
  %326 = phi <4 x i32> [ %292, %291 ], [ %317, %293 ]
  %327 = phi <4 x i32> [ <i32 -1, i32 -1, i32 -1, i32 -1>, %291 ], [ %318, %293 ]
  br i1 %48, label %339, label %328

328:                                              ; preds = %322
  %329 = getelementptr inbounds i16, i16* %286, i64 %325
  %330 = getelementptr inbounds i16, i16* %329, i64 4
  %331 = bitcast i16* %330 to <4 x i16>*
  %332 = load <4 x i16>, <4 x i16>* %331, align 2
  %333 = zext <4 x i16> %332 to <4 x i32>
  %334 = and <4 x i32> %327, %333
  %335 = bitcast i16* %329 to <4 x i16>*
  %336 = load <4 x i16>, <4 x i16>* %335, align 2
  %337 = zext <4 x i16> %336 to <4 x i32>
  %338 = and <4 x i32> %326, %337
  br label %339

339:                                              ; preds = %322, %328
  %340 = phi <4 x i32> [ %323, %322 ], [ %338, %328 ]
  %341 = phi <4 x i32> [ %324, %322 ], [ %334, %328 ]
  %342 = and <4 x i32> %341, %340
  %343 = shufflevector <4 x i32> %342, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %344 = and <4 x i32> %342, %343
  %345 = shufflevector <4 x i32> %344, <4 x i32> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %346 = and <4 x i32> %344, %345
  %347 = extractelement <4 x i32> %346, i32 0
  br i1 %49, label %348, label %288

348:                                              ; preds = %353, %339, %281
  %349 = phi i32 [ %283, %281 ], [ %347, %339 ], [ %359, %353 ]
  %350 = and i32 %349, 15
  %351 = icmp eq i32 %350, 15
  %352 = add nuw nsw i64 %282, 1
  br i1 %351, label %279, label %277

353:                                              ; preds = %288, %353
  %354 = phi i64 [ %360, %353 ], [ %289, %288 ]
  %355 = phi i32 [ %359, %353 ], [ %290, %288 ]
  %356 = getelementptr inbounds i16, i16* %286, i64 %354
  %357 = load i16, i16* %356, align 2
  %358 = zext i16 %357 to i32
  %359 = and i32 %355, %358
  %360 = add nuw nsw i64 %354, 1
  %361 = icmp eq i64 %360, %38
  br i1 %361, label %348, label %353, !llvm.loop !53

362:                                              ; preds = %1, %1
  %363 = icmp sgt i32 %3, 0
  br i1 %363, label %364, label %277

364:                                              ; preds = %362
  %365 = getelementptr inbounds %class.SkPixmap, %class.SkPixmap* %0, i64 0, i32 0
  %366 = load i8*, i8** %365, align 8
  %367 = getelementptr inbounds %class.SkPixmap, %class.SkPixmap* %0, i64 0, i32 1
  %368 = load i64, i64* %367, align 8
  %369 = icmp sgt i32 %5, 0
  %370 = zext i32 %3 to i64
  %371 = zext i32 %5 to i64
  %372 = and i64 %371, 4294967288
  %373 = add nsw i64 %372, -8
  %374 = lshr exact i64 %373, 3
  %375 = add nuw nsw i64 %374, 1
  %376 = icmp ult i32 %5, 8
  %377 = and i64 %371, 4294967288
  %378 = and i64 %375, 3
  %379 = icmp ult i64 %373, 24
  %380 = sub nsw i64 %375, %378
  %381 = icmp eq i64 %378, 0
  %382 = icmp eq i64 %377, %371
  br label %387

383:                                              ; preds = %387, %473
  %384 = phi i32 [ %474, %473 ], [ %389, %387 ]
  %385 = add nuw nsw i64 %388, 1
  %386 = icmp eq i64 %385, %370
  br i1 %386, label %277, label %387

387:                                              ; preds = %383, %364
  %388 = phi i64 [ 0, %364 ], [ %385, %383 ]
  %389 = phi i32 [ -1, %364 ], [ %384, %383 ]
  %390 = mul i64 %368, %388
  %391 = getelementptr inbounds i8, i8* %366, i64 %390
  %392 = bitcast i8* %391 to i32*
  br i1 %369, label %393, label %383

393:                                              ; preds = %387
  br i1 %376, label %394, label %397

394:                                              ; preds = %464, %393
  %395 = phi i64 [ 0, %393 ], [ %377, %464 ]
  %396 = phi i32 [ %389, %393 ], [ %472, %464 ]
  br label %476

397:                                              ; preds = %393
  %398 = insertelement <4 x i32> <i32 undef, i32 -1, i32 -1, i32 -1>, i32 %389, i32 0
  br i1 %379, label %442, label %399

399:                                              ; preds = %397, %399
  %400 = phi i64 [ %439, %399 ], [ 0, %397 ]
  %401 = phi <4 x i32> [ %437, %399 ], [ %398, %397 ]
  %402 = phi <4 x i32> [ %438, %399 ], [ <i32 -1, i32 -1, i32 -1, i32 -1>, %397 ]
  %403 = phi i64 [ %440, %399 ], [ %380, %397 ]
  %404 = getelementptr inbounds i32, i32* %392, i64 %400
  %405 = bitcast i32* %404 to <4 x i32>*
  %406 = load <4 x i32>, <4 x i32>* %405, align 4
  %407 = getelementptr inbounds i32, i32* %404, i64 4
  %408 = bitcast i32* %407 to <4 x i32>*
  %409 = load <4 x i32>, <4 x i32>* %408, align 4
  %410 = and <4 x i32> %406, %401
  %411 = and <4 x i32> %409, %402
  %412 = or i64 %400, 8
  %413 = getelementptr inbounds i32, i32* %392, i64 %412
  %414 = bitcast i32* %413 to <4 x i32>*
  %415 = load <4 x i32>, <4 x i32>* %414, align 4
  %416 = getelementptr inbounds i32, i32* %413, i64 4
  %417 = bitcast i32* %416 to <4 x i32>*
  %418 = load <4 x i32>, <4 x i32>* %417, align 4
  %419 = and <4 x i32> %415, %410
  %420 = and <4 x i32> %418, %411
  %421 = or i64 %400, 16
  %422 = getelementptr inbounds i32, i32* %392, i64 %421
  %423 = bitcast i32* %422 to <4 x i32>*
  %424 = load <4 x i32>, <4 x i32>* %423, align 4
  %425 = getelementptr inbounds i32, i32* %422, i64 4
  %426 = bitcast i32* %425 to <4 x i32>*
  %427 = load <4 x i32>, <4 x i32>* %426, align 4
  %428 = and <4 x i32> %424, %419
  %429 = and <4 x i32> %427, %420
  %430 = or i64 %400, 24
  %431 = getelementptr inbounds i32, i32* %392, i64 %430
  %432 = bitcast i32* %431 to <4 x i32>*
  %433 = load <4 x i32>, <4 x i32>* %432, align 4
  %434 = getelementptr inbounds i32, i32* %431, i64 4
  %435 = bitcast i32* %434 to <4 x i32>*
  %436 = load <4 x i32>, <4 x i32>* %435, align 4
  %437 = and <4 x i32> %433, %428
  %438 = and <4 x i32> %436, %429
  %439 = add i64 %400, 32
  %440 = add i64 %403, -4
  %441 = icmp eq i64 %440, 0
  br i1 %441, label %442, label %399, !llvm.loop !54

442:                                              ; preds = %399, %397
  %443 = phi <4 x i32> [ undef, %397 ], [ %437, %399 ]
  %444 = phi <4 x i32> [ undef, %397 ], [ %438, %399 ]
  %445 = phi i64 [ 0, %397 ], [ %439, %399 ]
  %446 = phi <4 x i32> [ %398, %397 ], [ %437, %399 ]
  %447 = phi <4 x i32> [ <i32 -1, i32 -1, i32 -1, i32 -1>, %397 ], [ %438, %399 ]
  br i1 %381, label %464, label %448

448:                                              ; preds = %442, %448
  %449 = phi i64 [ %461, %448 ], [ %445, %442 ]
  %450 = phi <4 x i32> [ %459, %448 ], [ %446, %442 ]
  %451 = phi <4 x i32> [ %460, %448 ], [ %447, %442 ]
  %452 = phi i64 [ %462, %448 ], [ %378, %442 ]
  %453 = getelementptr inbounds i32, i32* %392, i64 %449
  %454 = bitcast i32* %453 to <4 x i32>*
  %455 = load <4 x i32>, <4 x i32>* %454, align 4
  %456 = getelementptr inbounds i32, i32* %453, i64 4
  %457 = bitcast i32* %456 to <4 x i32>*
  %458 = load <4 x i32>, <4 x i32>* %457, align 4
  %459 = and <4 x i32> %455, %450
  %460 = and <4 x i32> %458, %451
  %461 = add i64 %449, 8
  %462 = add i64 %452, -1
  %463 = icmp eq i64 %462, 0
  br i1 %463, label %464, label %448, !llvm.loop !55

464:                                              ; preds = %448, %442
  %465 = phi <4 x i32> [ %443, %442 ], [ %459, %448 ]
  %466 = phi <4 x i32> [ %444, %442 ], [ %460, %448 ]
  %467 = and <4 x i32> %466, %465
  %468 = shufflevector <4 x i32> %467, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %469 = and <4 x i32> %467, %468
  %470 = shufflevector <4 x i32> %469, <4 x i32> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %471 = and <4 x i32> %469, %470
  %472 = extractelement <4 x i32> %471, i32 0
  br i1 %382, label %473, label %394

473:                                              ; preds = %476, %464
  %474 = phi i32 [ %472, %464 ], [ %481, %476 ]
  %475 = icmp ugt i32 %474, -16777217
  br i1 %475, label %383, label %277

476:                                              ; preds = %394, %476
  %477 = phi i64 [ %482, %476 ], [ %395, %394 ]
  %478 = phi i32 [ %481, %476 ], [ %396, %394 ]
  %479 = getelementptr inbounds i32, i32* %392, i64 %477
  %480 = load i32, i32* %479, align 4
  %481 = and i32 %480, %478
  %482 = add nuw nsw i64 %477, 1
  %483 = icmp eq i64 %482, %371
  br i1 %483, label %473, label %476, !llvm.loop !57

484:                                              ; preds = %1, %1
  %485 = icmp sgt i32 %3, 0
  br i1 %485, label %486, label %277

486:                                              ; preds = %484
  %487 = bitcast %class.SkPixmap* %0 to i16**
  %488 = load i16*, i16** %487, align 8
  %489 = icmp sgt i32 %5, 0
  %490 = getelementptr inbounds %class.SkPixmap, %class.SkPixmap* %0, i64 0, i32 1
  %491 = zext i32 %5 to i64
  br label %492

492:                                              ; preds = %506, %486
  %493 = phi i32 [ 0, %486 ], [ %510, %506 ]
  %494 = phi i16* [ %488, %486 ], [ %509, %506 ]
  br i1 %489, label %497, label %506

495:                                              ; preds = %497
  %496 = icmp eq i64 %505, %491
  br i1 %496, label %506, label %497

497:                                              ; preds = %492, %495
  %498 = phi i64 [ %505, %495 ], [ 0, %492 ]
  %499 = shl i64 %498, 2
  %500 = and i64 %499, 4294967292
  %501 = or i64 %500, 3
  %502 = getelementptr inbounds i16, i16* %494, i64 %501
  %503 = load i16, i16* %502, align 2
  %504 = icmp ult i16 %503, 15360
  %505 = add nuw nsw i64 %498, 1
  br i1 %504, label %277, label %495

506:                                              ; preds = %495, %492
  %507 = load i64, i64* %490, align 8
  %508 = lshr i64 %507, 1
  %509 = getelementptr inbounds i16, i16* %494, i64 %508
  %510 = add nuw nsw i32 %493, 1
  %511 = icmp eq i32 %510, %3
  br i1 %511, label %277, label %492

512:                                              ; preds = %1
  %513 = icmp sgt i32 %3, 0
  br i1 %513, label %514, label %277

514:                                              ; preds = %512
  %515 = bitcast %class.SkPixmap* %0 to float**
  %516 = load float*, float** %515, align 8
  %517 = icmp sgt i32 %5, 0
  %518 = getelementptr inbounds %class.SkPixmap, %class.SkPixmap* %0, i64 0, i32 1
  %519 = zext i32 %5 to i64
  br label %520

520:                                              ; preds = %534, %514
  %521 = phi i32 [ 0, %514 ], [ %538, %534 ]
  %522 = phi float* [ %516, %514 ], [ %537, %534 ]
  br i1 %517, label %525, label %534

523:                                              ; preds = %525
  %524 = icmp eq i64 %533, %519
  br i1 %524, label %534, label %525

525:                                              ; preds = %520, %523
  %526 = phi i64 [ %533, %523 ], [ 0, %520 ]
  %527 = shl i64 %526, 2
  %528 = and i64 %527, 4294967292
  %529 = or i64 %528, 3
  %530 = getelementptr inbounds float, float* %522, i64 %529
  %531 = load float, float* %530, align 4
  %532 = fcmp olt float %531, 1.000000e+00
  %533 = add nuw nsw i64 %526, 1
  br i1 %532, label %277, label %523

534:                                              ; preds = %523, %520
  %535 = load i64, i64* %518, align 8
  %536 = lshr i64 %535, 2
  %537 = getelementptr inbounds float, float* %522, i64 %536
  %538 = add nuw nsw i32 %521, 1
  %539 = icmp eq i32 %538, %3
  br i1 %539, label %277, label %520

540:                                              ; preds = %1, %1
  %541 = icmp sgt i32 %3, 0
  br i1 %541, label %542, label %277

542:                                              ; preds = %540
  %543 = getelementptr inbounds %class.SkPixmap, %class.SkPixmap* %0, i64 0, i32 0
  %544 = load i8*, i8** %543, align 8
  %545 = getelementptr inbounds %class.SkPixmap, %class.SkPixmap* %0, i64 0, i32 1
  %546 = load i64, i64* %545, align 8
  %547 = icmp sgt i32 %5, 0
  %548 = zext i32 %3 to i64
  %549 = zext i32 %5 to i64
  %550 = and i64 %549, 4294967288
  %551 = add nsw i64 %550, -8
  %552 = lshr exact i64 %551, 3
  %553 = add nuw nsw i64 %552, 1
  %554 = icmp ult i32 %5, 8
  %555 = and i64 %549, 4294967288
  %556 = and i64 %553, 3
  %557 = icmp ult i64 %551, 24
  %558 = sub nsw i64 %553, %556
  %559 = icmp eq i64 %556, 0
  %560 = icmp eq i64 %555, %549
  br label %565

561:                                              ; preds = %565, %651
  %562 = phi i32 [ %652, %651 ], [ %567, %565 ]
  %563 = add nuw nsw i64 %566, 1
  %564 = icmp eq i64 %563, %548
  br i1 %564, label %277, label %565

565:                                              ; preds = %561, %542
  %566 = phi i64 [ 0, %542 ], [ %563, %561 ]
  %567 = phi i32 [ -1, %542 ], [ %562, %561 ]
  %568 = mul i64 %546, %566
  %569 = getelementptr inbounds i8, i8* %544, i64 %568
  %570 = bitcast i8* %569 to i32*
  br i1 %547, label %571, label %561

571:                                              ; preds = %565
  br i1 %554, label %572, label %575

572:                                              ; preds = %642, %571
  %573 = phi i64 [ 0, %571 ], [ %555, %642 ]
  %574 = phi i32 [ %567, %571 ], [ %650, %642 ]
  br label %654

575:                                              ; preds = %571
  %576 = insertelement <4 x i32> <i32 undef, i32 -1, i32 -1, i32 -1>, i32 %567, i32 0
  br i1 %557, label %620, label %577

577:                                              ; preds = %575, %577
  %578 = phi i64 [ %617, %577 ], [ 0, %575 ]
  %579 = phi <4 x i32> [ %615, %577 ], [ %576, %575 ]
  %580 = phi <4 x i32> [ %616, %577 ], [ <i32 -1, i32 -1, i32 -1, i32 -1>, %575 ]
  %581 = phi i64 [ %618, %577 ], [ %558, %575 ]
  %582 = getelementptr inbounds i32, i32* %570, i64 %578
  %583 = bitcast i32* %582 to <4 x i32>*
  %584 = load <4 x i32>, <4 x i32>* %583, align 4
  %585 = getelementptr inbounds i32, i32* %582, i64 4
  %586 = bitcast i32* %585 to <4 x i32>*
  %587 = load <4 x i32>, <4 x i32>* %586, align 4
  %588 = and <4 x i32> %584, %579
  %589 = and <4 x i32> %587, %580
  %590 = or i64 %578, 8
  %591 = getelementptr inbounds i32, i32* %570, i64 %590
  %592 = bitcast i32* %591 to <4 x i32>*
  %593 = load <4 x i32>, <4 x i32>* %592, align 4
  %594 = getelementptr inbounds i32, i32* %591, i64 4
  %595 = bitcast i32* %594 to <4 x i32>*
  %596 = load <4 x i32>, <4 x i32>* %595, align 4
  %597 = and <4 x i32> %593, %588
  %598 = and <4 x i32> %596, %589
  %599 = or i64 %578, 16
  %600 = getelementptr inbounds i32, i32* %570, i64 %599
  %601 = bitcast i32* %600 to <4 x i32>*
  %602 = load <4 x i32>, <4 x i32>* %601, align 4
  %603 = getelementptr inbounds i32, i32* %600, i64 4
  %604 = bitcast i32* %603 to <4 x i32>*
  %605 = load <4 x i32>, <4 x i32>* %604, align 4
  %606 = and <4 x i32> %602, %597
  %607 = and <4 x i32> %605, %598
  %608 = or i64 %578, 24
  %609 = getelementptr inbounds i32, i32* %570, i64 %608
  %610 = bitcast i32* %609 to <4 x i32>*
  %611 = load <4 x i32>, <4 x i32>* %610, align 4
  %612 = getelementptr inbounds i32, i32* %609, i64 4
  %613 = bitcast i32* %612 to <4 x i32>*
  %614 = load <4 x i32>, <4 x i32>* %613, align 4
  %615 = and <4 x i32> %611, %606
  %616 = and <4 x i32> %614, %607
  %617 = add i64 %578, 32
  %618 = add i64 %581, -4
  %619 = icmp eq i64 %618, 0
  br i1 %619, label %620, label %577, !llvm.loop !58

620:                                              ; preds = %577, %575
  %621 = phi <4 x i32> [ undef, %575 ], [ %615, %577 ]
  %622 = phi <4 x i32> [ undef, %575 ], [ %616, %577 ]
  %623 = phi i64 [ 0, %575 ], [ %617, %577 ]
  %624 = phi <4 x i32> [ %576, %575 ], [ %615, %577 ]
  %625 = phi <4 x i32> [ <i32 -1, i32 -1, i32 -1, i32 -1>, %575 ], [ %616, %577 ]
  br i1 %559, label %642, label %626

626:                                              ; preds = %620, %626
  %627 = phi i64 [ %639, %626 ], [ %623, %620 ]
  %628 = phi <4 x i32> [ %637, %626 ], [ %624, %620 ]
  %629 = phi <4 x i32> [ %638, %626 ], [ %625, %620 ]
  %630 = phi i64 [ %640, %626 ], [ %556, %620 ]
  %631 = getelementptr inbounds i32, i32* %570, i64 %627
  %632 = bitcast i32* %631 to <4 x i32>*
  %633 = load <4 x i32>, <4 x i32>* %632, align 4
  %634 = getelementptr inbounds i32, i32* %631, i64 4
  %635 = bitcast i32* %634 to <4 x i32>*
  %636 = load <4 x i32>, <4 x i32>* %635, align 4
  %637 = and <4 x i32> %633, %628
  %638 = and <4 x i32> %636, %629
  %639 = add i64 %627, 8
  %640 = add i64 %630, -1
  %641 = icmp eq i64 %640, 0
  br i1 %641, label %642, label %626, !llvm.loop !59

642:                                              ; preds = %626, %620
  %643 = phi <4 x i32> [ %621, %620 ], [ %637, %626 ]
  %644 = phi <4 x i32> [ %622, %620 ], [ %638, %626 ]
  %645 = and <4 x i32> %644, %643
  %646 = shufflevector <4 x i32> %645, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %647 = and <4 x i32> %645, %646
  %648 = shufflevector <4 x i32> %647, <4 x i32> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %649 = and <4 x i32> %647, %648
  %650 = extractelement <4 x i32> %649, i32 0
  br i1 %560, label %651, label %572

651:                                              ; preds = %654, %642
  %652 = phi i32 [ %650, %642 ], [ %659, %654 ]
  %653 = icmp ugt i32 %652, -1073741825
  br i1 %653, label %561, label %277

654:                                              ; preds = %572, %654
  %655 = phi i64 [ %660, %654 ], [ %573, %572 ]
  %656 = phi i32 [ %659, %654 ], [ %574, %572 ]
  %657 = getelementptr inbounds i32, i32* %570, i64 %655
  %658 = load i32, i32* %657, align 4
  %659 = and i32 %658, %656
  %660 = add nuw nsw i64 %655, 1
  %661 = icmp eq i64 %660, %549
  br i1 %661, label %651, label %654, !llvm.loop !60

662:                                              ; preds = %665, %734
  %663 = add nuw nsw i64 %666, 1
  %664 = icmp eq i64 %663, %16
  br i1 %664, label %277, label %665

665:                                              ; preds = %662, %10
  %666 = phi i64 [ 0, %10 ], [ %663, %662 ]
  %667 = mul i64 %14, %666
  %668 = getelementptr inbounds i8, i8* %12, i64 %667
  %669 = bitcast i8* %668 to i64*
  br i1 %15, label %670, label %662

670:                                              ; preds = %665
  br i1 %22, label %671, label %674

671:                                              ; preds = %727, %670
  %672 = phi i64 [ 0, %670 ], [ %23, %727 ]
  %673 = phi i16 [ -1, %670 ], [ %733, %727 ]
  br label %737

674:                                              ; preds = %670
  br i1 %25, label %708, label %675

675:                                              ; preds = %674, %675
  %676 = phi i64 [ %705, %675 ], [ 0, %674 ]
  %677 = phi <2 x i16> [ %703, %675 ], [ <i16 -1, i16 -1>, %674 ]
  %678 = phi <2 x i16> [ %704, %675 ], [ <i16 -1, i16 -1>, %674 ]
  %679 = phi i64 [ %706, %675 ], [ %26, %674 ]
  %680 = getelementptr inbounds i64, i64* %669, i64 %676
  %681 = bitcast i64* %680 to <2 x i64>*
  %682 = load <2 x i64>, <2 x i64>* %681, align 8
  %683 = getelementptr inbounds i64, i64* %680, i64 2
  %684 = bitcast i64* %683 to <2 x i64>*
  %685 = load <2 x i64>, <2 x i64>* %684, align 8
  %686 = lshr <2 x i64> %682, <i64 48, i64 48>
  %687 = lshr <2 x i64> %685, <i64 48, i64 48>
  %688 = trunc <2 x i64> %686 to <2 x i16>
  %689 = trunc <2 x i64> %687 to <2 x i16>
  %690 = and <2 x i16> %677, %688
  %691 = and <2 x i16> %678, %689
  %692 = or i64 %676, 4
  %693 = getelementptr inbounds i64, i64* %669, i64 %692
  %694 = bitcast i64* %693 to <2 x i64>*
  %695 = load <2 x i64>, <2 x i64>* %694, align 8
  %696 = getelementptr inbounds i64, i64* %693, i64 2
  %697 = bitcast i64* %696 to <2 x i64>*
  %698 = load <2 x i64>, <2 x i64>* %697, align 8
  %699 = lshr <2 x i64> %695, <i64 48, i64 48>
  %700 = lshr <2 x i64> %698, <i64 48, i64 48>
  %701 = trunc <2 x i64> %699 to <2 x i16>
  %702 = trunc <2 x i64> %700 to <2 x i16>
  %703 = and <2 x i16> %690, %701
  %704 = and <2 x i16> %691, %702
  %705 = add i64 %676, 8
  %706 = add i64 %679, -2
  %707 = icmp eq i64 %706, 0
  br i1 %707, label %708, label %675, !llvm.loop !61

708:                                              ; preds = %675, %674
  %709 = phi <2 x i16> [ undef, %674 ], [ %703, %675 ]
  %710 = phi <2 x i16> [ undef, %674 ], [ %704, %675 ]
  %711 = phi i64 [ 0, %674 ], [ %705, %675 ]
  %712 = phi <2 x i16> [ <i16 -1, i16 -1>, %674 ], [ %703, %675 ]
  %713 = phi <2 x i16> [ <i16 -1, i16 -1>, %674 ], [ %704, %675 ]
  br i1 %27, label %727, label %714

714:                                              ; preds = %708
  %715 = getelementptr inbounds i64, i64* %669, i64 %711
  %716 = getelementptr inbounds i64, i64* %715, i64 2
  %717 = bitcast i64* %716 to <2 x i64>*
  %718 = load <2 x i64>, <2 x i64>* %717, align 8
  %719 = lshr <2 x i64> %718, <i64 48, i64 48>
  %720 = trunc <2 x i64> %719 to <2 x i16>
  %721 = and <2 x i16> %713, %720
  %722 = bitcast i64* %715 to <2 x i64>*
  %723 = load <2 x i64>, <2 x i64>* %722, align 8
  %724 = lshr <2 x i64> %723, <i64 48, i64 48>
  %725 = trunc <2 x i64> %724 to <2 x i16>
  %726 = and <2 x i16> %712, %725
  br label %727

727:                                              ; preds = %708, %714
  %728 = phi <2 x i16> [ %709, %708 ], [ %726, %714 ]
  %729 = phi <2 x i16> [ %710, %708 ], [ %721, %714 ]
  %730 = and <2 x i16> %729, %728
  %731 = shufflevector <2 x i16> %730, <2 x i16> undef, <2 x i32> <i32 1, i32 undef>
  %732 = and <2 x i16> %730, %731
  %733 = extractelement <2 x i16> %732, i32 0
  br i1 %28, label %734, label %671

734:                                              ; preds = %737, %727
  %735 = phi i16 [ %733, %727 ], [ %744, %737 ]
  %736 = icmp eq i16 %735, -1
  br i1 %736, label %662, label %277

737:                                              ; preds = %671, %737
  %738 = phi i64 [ %745, %737 ], [ %672, %671 ]
  %739 = phi i16 [ %744, %737 ], [ %673, %671 ]
  %740 = getelementptr inbounds i64, i64* %669, i64 %738
  %741 = load i64, i64* %740, align 8
  %742 = lshr i64 %741, 48
  %743 = trunc i64 %742 to i16
  %744 = and i16 %739, %743
  %745 = add nuw nsw i64 %738, 1
  %746 = icmp eq i64 %745, %17
  br i1 %746, label %734, label %737, !llvm.loop !62

747:                                              ; preds = %1
  br label %277
}

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN12SkPixmapPriv6OrientERK8SkPixmapS2_15SkEncodedOrigin(%class.SkPixmap* dereferenceable(40), %class.SkPixmap* dereferenceable(40), i32) local_unnamed_addr #0 align 2 {
  %4 = alloca %class.sk_sp.14, align 8
  %5 = alloca %class.SkBitmap, align 8
  %6 = alloca %class.SkMatrix, align 16
  %7 = alloca %class.SkPaint, align 8
  %8 = alloca %class.sk_sp.13, align 8
  %9 = alloca %struct.SkSamplingOptions, align 4
  %10 = getelementptr inbounds %class.SkPixmap, %class.SkPixmap* %1, i64 0, i32 2, i32 0, i32 1
  %11 = load i32, i32* %10, align 8
  %12 = getelementptr inbounds %class.SkPixmap, %class.SkPixmap* %0, i64 0, i32 2, i32 0, i32 1
  %13 = load i32, i32* %12, align 8
  %14 = icmp eq i32 %11, %13
  br i1 %14, label %15, label %165

15:                                               ; preds = %3
  %16 = getelementptr inbounds %class.SkPixmap, %class.SkPixmap* %1, i64 0, i32 2, i32 1, i32 0
  %17 = load i32, i32* %16, align 4
  %18 = getelementptr inbounds %class.SkPixmap, %class.SkPixmap* %1, i64 0, i32 2, i32 1, i32 1
  %19 = load i32, i32* %18, align 4
  %20 = icmp sgt i32 %2, 4
  %21 = select i1 %20, i32 %19, i32 %17
  %22 = select i1 %20, i32 %17, i32 %19
  %23 = getelementptr inbounds %class.SkPixmap, %class.SkPixmap* %0, i64 0, i32 2, i32 1, i32 0
  %24 = load i32, i32* %23, align 4
  %25 = icmp eq i32 %24, %21
  br i1 %25, label %26, label %165

26:                                               ; preds = %15
  %27 = getelementptr inbounds %class.SkPixmap, %class.SkPixmap* %0, i64 0, i32 2, i32 1, i32 1
  %28 = load i32, i32* %27, align 4
  %29 = icmp eq i32 %28, %22
  br i1 %29, label %30, label %165

30:                                               ; preds = %26
  %31 = icmp eq i32 %21, 0
  %32 = icmp eq i32 %22, 0
  %33 = or i1 %31, %32
  br i1 %33, label %165, label %34

34:                                               ; preds = %30
  %35 = getelementptr inbounds %class.SkPixmap, %class.SkPixmap* %1, i64 0, i32 0
  %36 = load i8*, i8** %35, align 8
  %37 = getelementptr inbounds %class.SkPixmap, %class.SkPixmap* %0, i64 0, i32 0
  %38 = load i8*, i8** %37, align 8
  %39 = icmp eq i8* %36, %38
  br i1 %39, label %40, label %42

40:                                               ; preds = %34
  %41 = icmp eq i32 %2, 1
  br label %165

42:                                               ; preds = %34
  %43 = bitcast %class.sk_sp.14* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %43) #13
  %44 = getelementptr inbounds %class.sk_sp.14, %class.sk_sp.14* %4, i64 0, i32 0
  store %class.SkSurface* inttoptr (i64 -6148914691236517206 to %class.SkSurface*), %class.SkSurface** %44, align 8
  %45 = getelementptr inbounds %class.SkPixmap, %class.SkPixmap* %0, i64 0, i32 2
  %46 = getelementptr inbounds %class.SkPixmap, %class.SkPixmap* %0, i64 0, i32 1
  %47 = load i64, i64* %46, align 8
  call void @_ZN9SkSurface16MakeRasterDirectERK11SkImageInfoPvmPK14SkSurfaceProps(%class.sk_sp.14* nonnull sret %4, %struct.SkImageInfo* dereferenceable(24) %45, i8* %38, i64 %47, %class.SkSurfaceProps* null) #13
  %48 = load %class.SkSurface*, %class.SkSurface** %44, align 8
  %49 = icmp eq %class.SkSurface* %48, null
  br i1 %49, label %163, label %50

50:                                               ; preds = %42
  %51 = bitcast %class.SkBitmap* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 56, i8* nonnull %51) #13
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %51, i8 -86, i64 56, i1 false) #13
  call void @_ZN8SkBitmapC1Ev(%class.SkBitmap* nonnull %5) #13
  %52 = call zeroext i1 @_ZN8SkBitmap13installPixelsERK8SkPixmap(%class.SkBitmap* nonnull %5, %class.SkPixmap* dereferenceable(40) %1) #13
  %53 = bitcast %class.SkMatrix* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %53) #13
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %53, i8 -1, i64 36, i1 false) #13
  %54 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %6, i64 0, i32 1
  store i32 -1431655766, i32* %54, align 4
  %55 = load i32, i32* %23, align 4
  %56 = load i32, i32* %27, align 4
  switch i32 %2, label %123 [
    i32 1, label %57
    i32 2, label %60
    i32 3, label %69
    i32 4, label %81
    i32 5, label %89
    i32 6, label %94
    i32 7, label %103
    i32 8, label %115
  ]

57:                                               ; preds = %50
  %58 = call dereferenceable(40) %class.SkMatrix* @_ZN8SkMatrix1IEv() #13
  %59 = bitcast %class.SkMatrix* %58 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 16 %53, i8* align 4 %59, i64 40, i1 false) #13
  br label %124

60:                                               ; preds = %50
  %61 = sitofp i32 %55 to float
  %62 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %6, i64 0, i32 0, i64 0
  %63 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %6, i64 0, i32 0, i64 1
  %64 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %6, i64 0, i32 0, i64 2
  %65 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %6, i64 0, i32 0, i64 3
  %66 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %6, i64 0, i32 0, i64 7
  %67 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %6, i64 0, i32 0, i64 8
  store float -1.000000e+00, float* %62, align 16, !alias.scope !63
  store float 0.000000e+00, float* %63, align 4, !alias.scope !63
  store float %61, float* %64, align 8, !alias.scope !63
  %68 = bitcast float* %65 to <4 x float>*
  store <4 x float> <float 0.000000e+00, float 1.000000e+00, float 0.000000e+00, float 0.000000e+00>, <4 x float>* %68, align 4, !alias.scope !63
  store float 0.000000e+00, float* %66, align 4, !alias.scope !63
  store float 1.000000e+00, float* %67, align 16, !alias.scope !63
  store i32 128, i32* %54, align 4, !alias.scope !63
  br label %124

69:                                               ; preds = %50
  %70 = sitofp i32 %55 to float
  %71 = sitofp i32 %56 to float
  %72 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %6, i64 0, i32 0, i64 0
  %73 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %6, i64 0, i32 0, i64 1
  %74 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %6, i64 0, i32 0, i64 2
  %75 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %6, i64 0, i32 0, i64 3
  %76 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %6, i64 0, i32 0, i64 4
  %77 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %6, i64 0, i32 0, i64 5
  %78 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %6, i64 0, i32 0, i64 6
  %79 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %6, i64 0, i32 0, i64 7
  %80 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %6, i64 0, i32 0, i64 8
  store float -1.000000e+00, float* %72, align 16, !alias.scope !68
  store float 0.000000e+00, float* %73, align 4, !alias.scope !68
  store float %70, float* %74, align 8, !alias.scope !68
  store float 0.000000e+00, float* %75, align 4, !alias.scope !68
  store float -1.000000e+00, float* %76, align 16, !alias.scope !68
  store float %71, float* %77, align 4, !alias.scope !68
  store float 0.000000e+00, float* %78, align 8, !alias.scope !68
  store float 0.000000e+00, float* %79, align 4, !alias.scope !68
  store float 1.000000e+00, float* %80, align 16, !alias.scope !68
  store i32 128, i32* %54, align 4, !alias.scope !68
  br label %124

81:                                               ; preds = %50
  %82 = sitofp i32 %56 to float
  %83 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %6, i64 0, i32 0, i64 4
  %84 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %6, i64 0, i32 0, i64 5
  %85 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %6, i64 0, i32 0, i64 6
  %86 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %6, i64 0, i32 0, i64 7
  %87 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %6, i64 0, i32 0, i64 8
  %88 = bitcast %class.SkMatrix* %6 to <4 x float>*
  store <4 x float> <float 1.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00>, <4 x float>* %88, align 16, !alias.scope !71
  store float -1.000000e+00, float* %83, align 16, !alias.scope !71
  store float %82, float* %84, align 4, !alias.scope !71
  store float 0.000000e+00, float* %85, align 8, !alias.scope !71
  store float 0.000000e+00, float* %86, align 4, !alias.scope !71
  store float 1.000000e+00, float* %87, align 16, !alias.scope !71
  store i32 128, i32* %54, align 4, !alias.scope !71
  br label %124

89:                                               ; preds = %50
  %90 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %6, i64 0, i32 0, i64 4
  %91 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %6, i64 0, i32 0, i64 8
  %92 = bitcast %class.SkMatrix* %6 to <4 x float>*
  store <4 x float> <float 0.000000e+00, float 1.000000e+00, float 0.000000e+00, float 1.000000e+00>, <4 x float>* %92, align 16, !alias.scope !74
  %93 = bitcast float* %90 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 16 %93, i8 0, i64 16, i1 false) #13, !alias.scope !77
  store float 1.000000e+00, float* %91, align 16, !alias.scope !74
  store i32 128, i32* %54, align 4, !alias.scope !74
  br label %124

94:                                               ; preds = %50
  %95 = sitofp i32 %55 to float
  %96 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %6, i64 0, i32 0, i64 0
  %97 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %6, i64 0, i32 0, i64 1
  %98 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %6, i64 0, i32 0, i64 2
  %99 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %6, i64 0, i32 0, i64 3
  %100 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %6, i64 0, i32 0, i64 4
  %101 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %6, i64 0, i32 0, i64 8
  store float 0.000000e+00, float* %96, align 16, !alias.scope !78
  store float -1.000000e+00, float* %97, align 4, !alias.scope !78
  store float %95, float* %98, align 8, !alias.scope !78
  store float 1.000000e+00, float* %99, align 4, !alias.scope !78
  %102 = bitcast float* %100 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 16 %102, i8 0, i64 16, i1 false) #13, !alias.scope !77
  store float 1.000000e+00, float* %101, align 16, !alias.scope !78
  store i32 128, i32* %54, align 4, !alias.scope !78
  br label %124

103:                                              ; preds = %50
  %104 = sitofp i32 %55 to float
  %105 = sitofp i32 %56 to float
  %106 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %6, i64 0, i32 0, i64 0
  %107 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %6, i64 0, i32 0, i64 1
  %108 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %6, i64 0, i32 0, i64 2
  %109 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %6, i64 0, i32 0, i64 3
  %110 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %6, i64 0, i32 0, i64 4
  %111 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %6, i64 0, i32 0, i64 5
  %112 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %6, i64 0, i32 0, i64 6
  %113 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %6, i64 0, i32 0, i64 7
  %114 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %6, i64 0, i32 0, i64 8
  store float 0.000000e+00, float* %106, align 16, !alias.scope !81
  store float -1.000000e+00, float* %107, align 4, !alias.scope !81
  store float %104, float* %108, align 8, !alias.scope !81
  store float -1.000000e+00, float* %109, align 4, !alias.scope !81
  store float 0.000000e+00, float* %110, align 16, !alias.scope !81
  store float %105, float* %111, align 4, !alias.scope !81
  store float 0.000000e+00, float* %112, align 8, !alias.scope !81
  store float 0.000000e+00, float* %113, align 4, !alias.scope !81
  store float 1.000000e+00, float* %114, align 16, !alias.scope !81
  store i32 128, i32* %54, align 4, !alias.scope !81
  br label %124

115:                                              ; preds = %50
  %116 = sitofp i32 %56 to float
  %117 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %6, i64 0, i32 0, i64 4
  %118 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %6, i64 0, i32 0, i64 5
  %119 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %6, i64 0, i32 0, i64 6
  %120 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %6, i64 0, i32 0, i64 7
  %121 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %6, i64 0, i32 0, i64 8
  %122 = bitcast %class.SkMatrix* %6 to <4 x float>*
  store <4 x float> <float 0.000000e+00, float 1.000000e+00, float 0.000000e+00, float -1.000000e+00>, <4 x float>* %122, align 16, !alias.scope !84
  store float 0.000000e+00, float* %117, align 16, !alias.scope !84
  store float %116, float* %118, align 4, !alias.scope !84
  store float 0.000000e+00, float* %119, align 8, !alias.scope !84
  store float 0.000000e+00, float* %120, align 4, !alias.scope !84
  store float 1.000000e+00, float* %121, align 16, !alias.scope !84
  store i32 128, i32* %54, align 4, !alias.scope !84
  br label %124

123:                                              ; preds = %50
  call void (i8*, i32, i8*, ...) @_Z16SkAbort_FileLinePKciS0_z(i8* getelementptr inbounds ([55 x i8], [55 x i8]* @.str, i64 0, i64 0), i32 43, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.1, i64 0, i64 0)) #14
  unreachable

124:                                              ; preds = %115, %103, %94, %89, %81, %69, %60, %57
  %125 = bitcast %class.SkPaint* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 72, i8* nonnull %125) #13
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %125, i8* align 8 bitcast (%class.SkPaint* @__const._ZL16draw_orientationRK8SkPixmapS1_15SkEncodedOrigin.p to i8*), i64 72, i1 false) #13
  call void @_ZN7SkPaintC1Ev(%class.SkPaint* nonnull %7) #13
  %126 = getelementptr inbounds %class.SkPaint, %class.SkPaint* %7, i64 0, i32 8, i32 0, i32 0
  %127 = load i32, i32* %126, align 8
  %128 = and i32 %127, -261121
  %129 = or i32 %128, 1024
  store i32 %129, i32* %126, align 8
  %130 = load %class.SkSurface*, %class.SkSurface** %44, align 8
  %131 = call %class.SkCanvas* @_ZN9SkSurface9getCanvasEv(%class.SkSurface* %130) #13
  call void @_ZN8SkCanvas6concatERK8SkMatrix(%class.SkCanvas* %131, %class.SkMatrix* nonnull dereferenceable(40) %6) #13
  %132 = load %class.SkSurface*, %class.SkSurface** %44, align 8
  %133 = call %class.SkCanvas* @_ZN9SkSurface9getCanvasEv(%class.SkSurface* %132) #13
  %134 = bitcast %class.sk_sp.13* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %134) #13
  call void @_ZN7SkImage14MakeFromBitmapERK8SkBitmap(%class.sk_sp.13* nonnull sret %8, %class.SkBitmap* nonnull dereferenceable(56) %5) #13
  %135 = getelementptr inbounds %struct.SkSamplingOptions, %struct.SkSamplingOptions* %9, i64 0, i32 0
  call void @llvm.lifetime.start.p0i8(i64 20, i8* nonnull %135) #13
  %136 = getelementptr inbounds %class.sk_sp.13, %class.sk_sp.13* %8, i64 0, i32 0
  call void @llvm.memset.p0i8.i64(i8* nonnull align 4 %135, i8 0, i64 20, i1 false) #13
  %137 = load %class.SkImage*, %class.SkImage** %136, align 8
  call void @_ZN8SkCanvas9drawImageEPK7SkImageffRK17SkSamplingOptionsPK7SkPaint(%class.SkCanvas* %133, %class.SkImage* %137, float 0.000000e+00, float 0.000000e+00, %struct.SkSamplingOptions* nonnull dereferenceable(20) %9, %class.SkPaint* nonnull %7) #13
  call void @llvm.lifetime.end.p0i8(i64 20, i8* nonnull %135) #13
  %138 = load %class.SkImage*, %class.SkImage** %136, align 8
  %139 = icmp eq %class.SkImage* %138, null
  br i1 %139, label %150, label %140

140:                                              ; preds = %124
  %141 = getelementptr inbounds %class.SkImage, %class.SkImage* %138, i64 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0
  %142 = atomicrmw add i32* %141, i32 -1 acq_rel
  %143 = icmp eq i32 %142, 1
  br i1 %143, label %144, label %150

144:                                              ; preds = %140
  %145 = bitcast %class.SkImage* %138 to %class.SkRefCntBase*
  %146 = bitcast %class.SkImage* %138 to void (%class.SkRefCntBase*)***
  %147 = load void (%class.SkRefCntBase*)**, void (%class.SkRefCntBase*)*** %146, align 8
  %148 = getelementptr inbounds void (%class.SkRefCntBase*)*, void (%class.SkRefCntBase*)** %147, i64 2
  %149 = load void (%class.SkRefCntBase*)*, void (%class.SkRefCntBase*)** %148, align 8
  call void %149(%class.SkRefCntBase* nonnull %145) #13
  br label %150

150:                                              ; preds = %144, %140, %124
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %134) #13
  call void @_ZN7SkPaintD1Ev(%class.SkPaint* nonnull %7) #13
  call void @llvm.lifetime.end.p0i8(i64 72, i8* nonnull %125) #13
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %53) #13
  call void @_ZN8SkBitmapD1Ev(%class.SkBitmap* nonnull %5) #13
  call void @llvm.lifetime.end.p0i8(i64 56, i8* nonnull %51) #13
  %151 = load %class.SkSurface*, %class.SkSurface** %44, align 8
  %152 = icmp eq %class.SkSurface* %151, null
  br i1 %152, label %163, label %153

153:                                              ; preds = %150
  %154 = getelementptr inbounds %class.SkSurface, %class.SkSurface* %151, i64 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0
  %155 = atomicrmw add i32* %154, i32 -1 acq_rel
  %156 = icmp eq i32 %155, 1
  br i1 %156, label %157, label %163

157:                                              ; preds = %153
  %158 = bitcast %class.SkSurface* %151 to %class.SkRefCntBase*
  %159 = bitcast %class.SkSurface* %151 to void (%class.SkRefCntBase*)***
  %160 = load void (%class.SkRefCntBase*)**, void (%class.SkRefCntBase*)*** %159, align 8
  %161 = getelementptr inbounds void (%class.SkRefCntBase*)*, void (%class.SkRefCntBase*)** %160, i64 2
  %162 = load void (%class.SkRefCntBase*)*, void (%class.SkRefCntBase*)** %161, align 8
  call void %162(%class.SkRefCntBase* nonnull %158) #13
  br label %163

163:                                              ; preds = %42, %150, %153, %157
  %164 = phi i1 [ true, %150 ], [ true, %153 ], [ true, %157 ], [ false, %42 ]
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %43) #13
  br label %165

165:                                              ; preds = %40, %163, %26, %15, %30, %3
  %166 = phi i1 [ false, %3 ], [ %41, %40 ], [ %164, %163 ], [ false, %26 ], [ false, %15 ], [ true, %30 ]
  ret i1 %166
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @_ZN12SkPixmapPriv15SwapWidthHeightERK11SkImageInfo(%struct.SkImageInfo* noalias nocapture sret, %struct.SkImageInfo* nocapture readonly dereferenceable(24)) local_unnamed_addr #6 align 2 {
  %3 = getelementptr inbounds %struct.SkImageInfo, %struct.SkImageInfo* %1, i64 0, i32 1, i32 1
  %4 = load i32, i32* %3, align 4
  %5 = getelementptr inbounds %struct.SkImageInfo, %struct.SkImageInfo* %1, i64 0, i32 1, i32 0
  %6 = load i32, i32* %5, align 4
  %7 = zext i32 %6 to i64
  %8 = shl nuw i64 %7, 32
  %9 = zext i32 %4 to i64
  %10 = or i64 %8, %9
  %11 = getelementptr inbounds %struct.SkImageInfo, %struct.SkImageInfo* %0, i64 0, i32 0, i32 0, i32 0
  %12 = getelementptr inbounds %struct.SkImageInfo, %struct.SkImageInfo* %1, i64 0, i32 0, i32 0, i32 0
  %13 = load %class.SkColorSpace*, %class.SkColorSpace** %12, align 8, !noalias !87
  %14 = icmp eq %class.SkColorSpace* %13, null
  br i1 %14, label %18, label %15

15:                                               ; preds = %2
  %16 = getelementptr inbounds %class.SkColorSpace, %class.SkColorSpace* %13, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %17 = atomicrmw add i32* %16, i32 1 monotonic, !noalias !87
  br label %18

18:                                               ; preds = %2, %15
  store %class.SkColorSpace* %13, %class.SkColorSpace** %11, align 8, !alias.scope !87
  %19 = getelementptr inbounds %struct.SkImageInfo, %struct.SkImageInfo* %0, i64 0, i32 0, i32 1
  %20 = getelementptr inbounds %struct.SkImageInfo, %struct.SkImageInfo* %1, i64 0, i32 0, i32 1
  %21 = bitcast i32* %20 to i64*
  %22 = bitcast i32* %19 to i64*
  %23 = load i64, i64* %21, align 8, !noalias !87
  store i64 %23, i64* %22, align 8, !alias.scope !87
  %24 = getelementptr inbounds %struct.SkImageInfo, %struct.SkImageInfo* %0, i64 0, i32 1
  %25 = bitcast %struct.SkISize* %24 to i64*
  store i64 %10, i64* %25, align 8, !alias.scope !87
  ret void
}

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #7

declare i32 @_ZNK11SkColorInfo13bytesPerPixelEv(%class.SkColorInfo*) local_unnamed_addr #2

; Function Attrs: cold noreturn nounwind
declare void @llvm.trap() #8

declare i64 @_ZNK11SkImageInfo13computeOffsetEiim(%struct.SkImageInfo*, i32, i32, i64) local_unnamed_addr #2

declare void @_ZN7SkPaint8setColorERK8SkRGBA4fIL11SkAlphaType3EEP12SkColorSpace(%class.SkPaint*, %struct.SkRGBA4f* dereferenceable(16), %class.SkColorSpace*) local_unnamed_addr #2

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZN22SkSimpleMatrixProviderD0Ev(%class.SkSimpleMatrixProvider*) unnamed_addr #9 comdat align 2 {
  %2 = bitcast %class.SkSimpleMatrixProvider* %0 to i8*
  tail call void @_ZdlPv(i8* %2) #12
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZNK22SkSimpleMatrixProvider16getLocalToMarkerEjP5SkM44(%class.SkSimpleMatrixProvider*, i32, %class.SkM44*) unnamed_addr #0 comdat align 2 {
  ret i1 false
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZNK22SkSimpleMatrixProvider29localToDeviceHitsPixelCentersEv(%class.SkSimpleMatrixProvider*) unnamed_addr #0 comdat align 2 {
  ret i1 true
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN16SkMatrixProviderD0Ev(%class.SkMatrixProvider*) unnamed_addr #0 comdat align 2 {
  tail call void @llvm.trap() #14
  unreachable
}

declare void @__cxa_pure_virtual() unnamed_addr

declare zeroext i1 @_ZN8SkMatrix13setRectToRectERK6SkRectS2_NS_10ScaleToFitE(%class.SkMatrix*, %struct.SkRect* dereferenceable(16), %struct.SkRect* dereferenceable(16), i32) local_unnamed_addr #2

declare i32 @_ZN15SkUnPreMultiply14PMColorToColorEj(i32) local_unnamed_addr #2

; Function Attrs: nounwind readnone
declare <4 x i32> @llvm.x86.sse2.cvttps2dq(<4 x float>) #10

; Function Attrs: nounwind readnone
declare <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16>, <8 x i16>) #10

declare void @_ZN8SkCanvas6concatERK8SkMatrix(%class.SkCanvas*, %class.SkMatrix* dereferenceable(40)) local_unnamed_addr #2

declare void @_ZN7SkImage14MakeFromBitmapERK8SkBitmap(%class.sk_sp.13* sret, %class.SkBitmap* dereferenceable(56)) local_unnamed_addr #2

; Function Attrs: noreturn
declare void @_Z16SkAbort_FileLinePKciS0_z(i8*, i32, i8*, ...) local_unnamed_addr #11

declare void @_ZN8SkCanvas9drawImageEPK7SkImageffRK17SkSamplingOptionsPK7SkPaint(%class.SkCanvas*, %class.SkImage*, float, float, %struct.SkSamplingOptions* dereferenceable(20), %class.SkPaint*) local_unnamed_addr #2

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="128" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { norecurse nounwind readonly ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nofree norecurse nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { cold noreturn nounwind }
attributes #9 = { inlinehint nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #10 = { nounwind readnone }
attributes #11 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #12 = { builtin nounwind }
attributes #13 = { nounwind }
attributes #14 = { noreturn nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{!3, !5}
!3 = distinct !{!3, !4, !"_ZN11SkImageInfo4MakeE7SkISize11SkColorType11SkAlphaType5sk_spI12SkColorSpaceE: argument 0"}
!4 = distinct !{!4, !"_ZN11SkImageInfo4MakeE7SkISize11SkColorType11SkAlphaType5sk_spI12SkColorSpaceE"}
!5 = distinct !{!5, !6, !"_ZN11SkImageInfo6MakeA8Eii: argument 0"}
!6 = distinct !{!6, !"_ZN11SkImageInfo6MakeA8Eii"}
!7 = !{!8}
!8 = distinct !{!8, !9, !"_ZNK11SkImageInfo14makeColorSpaceE5sk_spI12SkColorSpaceE: argument 0"}
!9 = distinct !{!9, !"_ZNK11SkImageInfo14makeColorSpaceE5sk_spI12SkColorSpaceE"}
!10 = !{!11, !8}
!11 = distinct !{!11, !12, !"_ZNK11SkColorInfo14makeColorSpaceE5sk_spI12SkColorSpaceE: argument 0"}
!12 = distinct !{!12, !"_ZNK11SkColorInfo14makeColorSpaceE5sk_spI12SkColorSpaceE"}
!13 = !{!14, !16}
!14 = distinct !{!14, !15, !"_ZN11SkImageInfo4MakeE7SkISizeRK11SkColorInfo: argument 0"}
!15 = distinct !{!15, !"_ZN11SkImageInfo4MakeE7SkISizeRK11SkColorInfo"}
!16 = distinct !{!16, !17, !"_ZNK11SkImageInfo14makeDimensionsE7SkISize: argument 0"}
!17 = distinct !{!17, !"_ZNK11SkImageInfo14makeDimensionsE7SkISize"}
!18 = !{!19, !21}
!19 = distinct !{!19, !20, !"_ZN11SkImageInfo4MakeE7SkISizeRK11SkColorInfo: argument 0"}
!20 = distinct !{!20, !"_ZN11SkImageInfo4MakeE7SkISizeRK11SkColorInfo"}
!21 = distinct !{!21, !22, !"_ZNK11SkImageInfo14makeDimensionsE7SkISize: argument 0"}
!22 = distinct !{!22, !"_ZNK11SkImageInfo14makeDimensionsE7SkISize"}
!23 = !{!24}
!24 = distinct !{!24, !25, !"_ZNK11SkImageInfo13makeAlphaTypeE11SkAlphaType: argument 0"}
!25 = distinct !{!25, !"_ZNK11SkImageInfo13makeAlphaTypeE11SkAlphaType"}
!26 = !{!27, !24}
!27 = distinct !{!27, !28, !"_ZNK11SkColorInfo13makeAlphaTypeE11SkAlphaType: argument 0"}
!28 = distinct !{!28, !"_ZNK11SkColorInfo13makeAlphaTypeE11SkAlphaType"}
!29 = !{!30, !27, !24}
!30 = distinct !{!30, !31, !"_ZNK11SkColorInfo13refColorSpaceEv: argument 0"}
!31 = distinct !{!31, !"_ZNK11SkColorInfo13refColorSpaceEv"}
!32 = !{!33}
!33 = distinct !{!33, !34, !"_ZNK11SkImageInfo13makeAlphaTypeE11SkAlphaType: argument 0"}
!34 = distinct !{!34, !"_ZNK11SkImageInfo13makeAlphaTypeE11SkAlphaType"}
!35 = !{!36, !33}
!36 = distinct !{!36, !37, !"_ZNK11SkColorInfo13makeAlphaTypeE11SkAlphaType: argument 0"}
!37 = distinct !{!37, !"_ZNK11SkColorInfo13makeAlphaTypeE11SkAlphaType"}
!38 = !{!39, !36, !33}
!39 = distinct !{!39, !40, !"_ZNK11SkColorInfo13refColorSpaceEv: argument 0"}
!40 = distinct !{!40, !"_ZNK11SkColorInfo13refColorSpaceEv"}
!41 = !{!42, !44}
!42 = distinct !{!42, !43, !"_ZN8SkMatrix14MakeRectToRectERK6SkRectS2_NS_10ScaleToFitE: argument 0"}
!43 = distinct !{!43, !"_ZN8SkMatrix14MakeRectToRectERK6SkRectS2_NS_10ScaleToFitE"}
!44 = distinct !{!44, !45, !"_ZN8SkMatrix10RectToRectERK6SkRectS2_NS_10ScaleToFitE: argument 0"}
!45 = distinct !{!45, !"_ZN8SkMatrix10RectToRectERK6SkRectS2_NS_10ScaleToFitE"}
!46 = distinct !{!46, !47}
!47 = !{!"llvm.loop.isvectorized", i32 1}
!48 = distinct !{!48, !49, !47}
!49 = !{!"llvm.loop.unroll.runtime.disable"}
!50 = distinct !{!50, !47}
!51 = distinct !{!51, !49, !47}
!52 = distinct !{!52, !47}
!53 = distinct !{!53, !49, !47}
!54 = distinct !{!54, !47}
!55 = distinct !{!55, !56}
!56 = !{!"llvm.loop.unroll.disable"}
!57 = distinct !{!57, !49, !47}
!58 = distinct !{!58, !47}
!59 = distinct !{!59, !56}
!60 = distinct !{!60, !49, !47}
!61 = distinct !{!61, !47}
!62 = distinct !{!62, !49, !47}
!63 = !{!64, !66}
!64 = distinct !{!64, !65, !"_ZN8SkMatrix7MakeAllEfffffffff: argument 0"}
!65 = distinct !{!65, !"_ZN8SkMatrix7MakeAllEfffffffff"}
!66 = distinct !{!66, !67, !"_ZL23SkEncodedOriginToMatrix15SkEncodedOriginii: argument 0"}
!67 = distinct !{!67, !"_ZL23SkEncodedOriginToMatrix15SkEncodedOriginii"}
!68 = !{!69, !66}
!69 = distinct !{!69, !70, !"_ZN8SkMatrix7MakeAllEfffffffff: argument 0"}
!70 = distinct !{!70, !"_ZN8SkMatrix7MakeAllEfffffffff"}
!71 = !{!72, !66}
!72 = distinct !{!72, !73, !"_ZN8SkMatrix7MakeAllEfffffffff: argument 0"}
!73 = distinct !{!73, !"_ZN8SkMatrix7MakeAllEfffffffff"}
!74 = !{!75, !66}
!75 = distinct !{!75, !76, !"_ZN8SkMatrix7MakeAllEfffffffff: argument 0"}
!76 = distinct !{!76, !"_ZN8SkMatrix7MakeAllEfffffffff"}
!77 = !{!66}
!78 = !{!79, !66}
!79 = distinct !{!79, !80, !"_ZN8SkMatrix7MakeAllEfffffffff: argument 0"}
!80 = distinct !{!80, !"_ZN8SkMatrix7MakeAllEfffffffff"}
!81 = !{!82, !66}
!82 = distinct !{!82, !83, !"_ZN8SkMatrix7MakeAllEfffffffff: argument 0"}
!83 = distinct !{!83, !"_ZN8SkMatrix7MakeAllEfffffffff"}
!84 = !{!85, !66}
!85 = distinct !{!85, !86, !"_ZN8SkMatrix7MakeAllEfffffffff: argument 0"}
!86 = distinct !{!86, !"_ZN8SkMatrix7MakeAllEfffffffff"}
!87 = !{!88, !90}
!88 = distinct !{!88, !89, !"_ZN11SkImageInfo4MakeE7SkISizeRK11SkColorInfo: argument 0"}
!89 = distinct !{!89, !"_ZN11SkImageInfo4MakeE7SkISizeRK11SkColorInfo"}
!90 = distinct !{!90, !91, !"_ZNK11SkImageInfo6makeWHEii: argument 0"}
!91 = distinct !{!91, !"_ZNK11SkImageInfo6makeWHEii"}
