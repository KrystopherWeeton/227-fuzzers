; ModuleID = '../../third_party/webrtc/modules/remote_bitrate_estimator/overuse_estimator.cc'
source_filename = "../../third_party/webrtc/modules/remote_bitrate_estimator/overuse_estimator.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.std::__1::locale::id" = type <{ %"struct.std::__1::once_flag", i32, [4 x i8] }>
%"struct.std::__1::once_flag" = type { i64 }
%"class.webrtc::OveruseEstimator" = type { %"struct.webrtc::OverUseDetectorOptions", i16, double, double, double, [2 x [2 x double]], [2 x double], double, double, %"class.std::__1::deque" }
%"struct.webrtc::OverUseDetectorOptions" = type { double, double, [2 x [2 x double]], [2 x double], double, double }
%"class.std::__1::deque" = type { %"class.std::__1::__deque_base" }
%"class.std::__1::__deque_base" = type { %"struct.std::__1::__split_buffer", i64, %"class.std::__1::__compressed_pair.1" }
%"struct.std::__1::__split_buffer" = type { double**, double**, double**, %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { double** }
%"class.std::__1::__compressed_pair.1" = type { %"struct.std::__1::__compressed_pair_elem.2" }
%"struct.std::__1::__compressed_pair_elem.2" = type { i64 }
%"class.rtc::DiagnosticLogMessage" = type { i8*, i32, i32, i32, i32, i8*, i8, %"class.std::__1::basic_ostringstream" }
%"class.std::__1::basic_ostringstream" = type { %"class.std::__1::basic_ostream.base", %"class.std::__1::basic_stringbuf", %"class.std::__1::basic_ios.base" }
%"class.std::__1::basic_ostream.base" = type { i32 (...)** }
%"class.std::__1::basic_stringbuf" = type <{ %"class.std::__1::basic_streambuf", %"class.std::__1::basic_string", i8*, i32, [4 x i8] }>
%"class.std::__1::basic_streambuf" = type { i32 (...)**, %"class.std::__1::locale", i8*, i8*, i8*, i8*, i8*, i8* }
%"class.std::__1::locale" = type { %"class.std::__1::locale::__imp"* }
%"class.std::__1::locale::__imp" = type opaque
%"class.std::__1::basic_string" = type { %"class.std::__1::__compressed_pair.6" }
%"class.std::__1::__compressed_pair.6" = type { %"struct.std::__1::__compressed_pair_elem.7" }
%"struct.std::__1::__compressed_pair_elem.7" = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" = type { %union.anon }
%union.anon = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" = type { i8*, i64, i64 }
%"class.std::__1::basic_ios.base" = type <{ %"class.std::__1::ios_base", %"class.std::__1::basic_ostream"*, i32 }>
%"class.std::__1::ios_base" = type { i32 (...)**, i32, i64, i64, i32, i32, i8*, i8*, void (i32, %"class.std::__1::ios_base"*, i32)**, i32*, i64, i64, i64*, i64, i64, i8**, i64, i64 }
%"class.std::__1::basic_ostream" = type { i32 (...)**, %"class.std::__1::basic_ios.base" }
%"class.std::__1::basic_ostream<char, std::__1::char_traits<char> >::sentry" = type { i8, %"class.std::__1::basic_ostream"* }
%"class.std::__1::locale::facet" = type { %"class.std::__1::__shared_count" }
%"class.std::__1::__shared_count" = type { i32 (...)**, i64 }
%"class.std::__1::ctype" = type <{ %"class.std::__1::locale::facet", i16*, i8, [7 x i8] }>
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short" = type { [23 x i8], %struct.anon }
%struct.anon = type { i8 }
%"struct.std::__1::__split_buffer.12" = type { double**, double**, double**, %"class.std::__1::__compressed_pair.13" }
%"class.std::__1::__compressed_pair.13" = type { %"struct.std::__1::__compressed_pair_elem", %"struct.std::__1::__compressed_pair_elem.14" }
%"struct.std::__1::__compressed_pair_elem.14" = type { %"class.std::__1::allocator"* }
%"class.std::__1::allocator" = type { i8 }

$_ZNSt3__124__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_m = comdat any

$_ZNSt3__116__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_ = comdat any

$_ZNSt3__15dequeIdNS_9allocatorIdEEE19__add_back_capacityEv = comdat any

$_ZNSt3__114__split_bufferIPdNS_9allocatorIS1_EEE9push_backEOS1_ = comdat any

$_ZNSt3__114__split_bufferIPdNS_9allocatorIS1_EEE10push_frontEOS1_ = comdat any

$_ZNSt3__114__split_bufferIPdRNS_9allocatorIS1_EEE10push_frontERKS1_ = comdat any

@.str = private unnamed_addr constant [79 x i8] c"../../third_party/webrtc/modules/remote_bitrate_estimator/overuse_estimator.cc\00", align 1
@.str.1 = private unnamed_addr constant [71 x i8] c"The over-use estimator's covariance matrix is no longer semi-definite.\00", align 1
@_ZNSt3__15ctypeIcE2idE = external global %"class.std::__1::locale::id", align 8

@_ZN6webrtc16OveruseEstimatorC1ERKNS_22OverUseDetectorOptionsE = hidden unnamed_addr alias void (%"class.webrtc::OveruseEstimator"*, %"struct.webrtc::OverUseDetectorOptions"*), void (%"class.webrtc::OveruseEstimator"*, %"struct.webrtc::OverUseDetectorOptions"*)* @_ZN6webrtc16OveruseEstimatorC2ERKNS_22OverUseDetectorOptionsE
@_ZN6webrtc16OveruseEstimatorD1Ev = hidden unnamed_addr alias void (%"class.webrtc::OveruseEstimator"*), void (%"class.webrtc::OveruseEstimator"*)* @_ZN6webrtc16OveruseEstimatorD2Ev

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN6webrtc16OveruseEstimatorC2ERKNS_22OverUseDetectorOptionsE(%"class.webrtc::OveruseEstimator"* nocapture, %"struct.webrtc::OverUseDetectorOptions"* nocapture readonly dereferenceable(80)) unnamed_addr #0 align 2 {
  %3 = bitcast %"class.webrtc::OveruseEstimator"* %0 to i8*
  %4 = bitcast %"struct.webrtc::OverUseDetectorOptions"* %1 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %3, i8* align 8 %4, i64 80, i1 false)
  %5 = getelementptr inbounds %"class.webrtc::OveruseEstimator", %"class.webrtc::OveruseEstimator"* %0, i64 0, i32 1
  store i16 0, i16* %5, align 8
  %6 = getelementptr inbounds %"class.webrtc::OveruseEstimator", %"class.webrtc::OveruseEstimator"* %0, i64 0, i32 2
  %7 = bitcast %"class.webrtc::OveruseEstimator"* %0 to <2 x i64>*
  %8 = load <2 x i64>, <2 x i64>* %7, align 8
  %9 = bitcast double* %6 to <2 x i64>*
  store <2 x i64> %8, <2 x i64>* %9, align 8
  %10 = getelementptr inbounds %"class.webrtc::OveruseEstimator", %"class.webrtc::OveruseEstimator"* %0, i64 0, i32 4
  %11 = bitcast double* %10 to i64*
  %12 = extractelement <2 x i64> %8, i32 1
  store i64 %12, i64* %11, align 8
  %13 = getelementptr inbounds %"class.webrtc::OveruseEstimator", %"class.webrtc::OveruseEstimator"* %0, i64 0, i32 5
  %14 = bitcast [2 x [2 x double]]* %13 to i8*
  %15 = getelementptr inbounds %"class.webrtc::OveruseEstimator", %"class.webrtc::OveruseEstimator"* %0, i64 0, i32 6
  %16 = bitcast [2 x double]* %15 to i8*
  %17 = getelementptr inbounds %"class.webrtc::OveruseEstimator", %"class.webrtc::OveruseEstimator"* %0, i64 0, i32 7
  %18 = getelementptr inbounds %"class.webrtc::OveruseEstimator", %"class.webrtc::OveruseEstimator"* %0, i64 0, i32 0, i32 4
  %19 = bitcast double* %18 to <2 x i64>*
  %20 = load <2 x i64>, <2 x i64>* %19, align 8
  %21 = bitcast double* %17 to <2 x i64>*
  store <2 x i64> %20, <2 x i64>* %21, align 8
  %22 = getelementptr inbounds %"class.webrtc::OveruseEstimator", %"class.webrtc::OveruseEstimator"* %0, i64 0, i32 9
  %23 = bitcast %"class.std::__1::deque"* %22 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %23, i8 0, i64 48, i1 false) #10
  %24 = getelementptr inbounds %"class.webrtc::OveruseEstimator", %"class.webrtc::OveruseEstimator"* %0, i64 0, i32 0, i32 2, i64 0
  %25 = bitcast [2 x double]* %24 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %14, i8* align 8 %25, i64 32, i1 false)
  %26 = getelementptr inbounds %"class.webrtc::OveruseEstimator", %"class.webrtc::OveruseEstimator"* %0, i64 0, i32 0, i32 3, i64 0
  %27 = bitcast double* %26 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %16, i8* align 8 %27, i64 16, i1 false)
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN6webrtc16OveruseEstimatorD2Ev(%"class.webrtc::OveruseEstimator"* nocapture) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.webrtc::OveruseEstimator", %"class.webrtc::OveruseEstimator"* %0, i64 0, i32 9, i32 0, i32 0, i32 1
  %3 = load double**, double*** %2, align 8
  %4 = getelementptr inbounds %"class.webrtc::OveruseEstimator", %"class.webrtc::OveruseEstimator"* %0, i64 0, i32 9, i32 0, i32 1
  %5 = load i64, i64* %4, align 8
  %6 = lshr i64 %5, 9
  %7 = getelementptr inbounds double*, double** %3, i64 %6
  %8 = getelementptr inbounds %"class.webrtc::OveruseEstimator", %"class.webrtc::OveruseEstimator"* %0, i64 0, i32 9, i32 0, i32 0, i32 2
  %9 = load double**, double*** %8, align 8
  %10 = icmp eq double** %9, %3
  %11 = ptrtoint double** %9 to i64
  %12 = ptrtoint double** %3 to i64
  br i1 %10, label %13, label %15

13:                                               ; preds = %1
  %14 = getelementptr inbounds %"class.webrtc::OveruseEstimator", %"class.webrtc::OveruseEstimator"* %0, i64 0, i32 9, i32 0, i32 2, i32 0, i32 0
  br label %28

15:                                               ; preds = %1
  %16 = load double*, double** %7, align 8
  %17 = and i64 %5, 511
  %18 = getelementptr inbounds double, double* %16, i64 %17
  %19 = getelementptr inbounds %"class.webrtc::OveruseEstimator", %"class.webrtc::OveruseEstimator"* %0, i64 0, i32 9, i32 0, i32 2, i32 0, i32 0
  %20 = load i64, i64* %19, align 8
  %21 = add i64 %20, %5
  %22 = lshr i64 %21, 9
  %23 = getelementptr inbounds double*, double** %3, i64 %22
  %24 = load double*, double** %23, align 8
  %25 = and i64 %21, 511
  %26 = getelementptr inbounds double, double* %24, i64 %25
  %27 = icmp eq double* %26, %18
  br i1 %27, label %28, label %34

28:                                               ; preds = %47, %15, %13
  %29 = phi i64* [ %14, %13 ], [ %19, %15 ], [ %19, %47 ]
  store i64 0, i64* %29, align 8
  %30 = bitcast double*** %8 to i64*
  %31 = sub i64 %11, %12
  %32 = ashr exact i64 %31, 3
  %33 = icmp ugt i64 %32, 2
  br i1 %33, label %52, label %65

34:                                               ; preds = %15, %47
  %35 = phi double* [ %50, %47 ], [ %18, %15 ]
  %36 = phi double** [ %49, %47 ], [ %7, %15 ]
  %37 = getelementptr inbounds double, double* %35, i64 1
  %38 = ptrtoint double* %37 to i64
  %39 = bitcast double** %36 to i64*
  %40 = load i64, i64* %39, align 8
  %41 = sub i64 %38, %40
  %42 = icmp eq i64 %41, 4096
  br i1 %42, label %43, label %47

43:                                               ; preds = %34
  %44 = getelementptr inbounds double*, double** %36, i64 1
  %45 = bitcast double** %44 to i64*
  %46 = load i64, i64* %45, align 8
  br label %47

47:                                               ; preds = %43, %34
  %48 = phi i64 [ %46, %43 ], [ %38, %34 ]
  %49 = phi double** [ %44, %43 ], [ %36, %34 ]
  %50 = inttoptr i64 %48 to double*
  %51 = icmp eq double* %26, %50
  br i1 %51, label %28, label %34

52:                                               ; preds = %28, %52
  %53 = phi double** [ %57, %52 ], [ %3, %28 ]
  %54 = bitcast double** %53 to i8**
  %55 = load i8*, i8** %54, align 8
  tail call void @_ZdlPv(i8* %55) #11
  %56 = load double**, double*** %2, align 8
  %57 = getelementptr inbounds double*, double** %56, i64 1
  store double** %57, double*** %2, align 8
  %58 = load i64, i64* %30, align 8
  %59 = ptrtoint double** %57 to i64
  %60 = sub i64 %58, %59
  %61 = ashr exact i64 %60, 3
  %62 = icmp ugt i64 %61, 2
  br i1 %62, label %52, label %63

63:                                               ; preds = %52
  %64 = inttoptr i64 %58 to double**
  br label %65

65:                                               ; preds = %63, %28
  %66 = phi double** [ %9, %28 ], [ %64, %63 ]
  %67 = phi double** [ %3, %28 ], [ %57, %63 ]
  %68 = phi i64 [ %32, %28 ], [ %61, %63 ]
  switch i64 %68, label %69 [
    i64 1, label %71
    i64 2, label %72
  ]

69:                                               ; preds = %65
  %70 = load i64, i64* %4, align 8
  br label %73

71:                                               ; preds = %65
  store i64 256, i64* %4, align 8
  br label %73

72:                                               ; preds = %65
  store i64 512, i64* %4, align 8
  br label %73

73:                                               ; preds = %69, %71, %72
  %74 = phi i64 [ %70, %69 ], [ 256, %71 ], [ 512, %72 ]
  %75 = lshr i64 %74, 9
  %76 = getelementptr inbounds double*, double** %67, i64 %75
  %77 = icmp eq double** %66, %67
  %78 = ptrtoint double** %66 to i64
  %79 = ptrtoint double** %67 to i64
  br i1 %77, label %80, label %82

80:                                               ; preds = %73
  %81 = getelementptr inbounds %"class.webrtc::OveruseEstimator", %"class.webrtc::OveruseEstimator"* %0, i64 0, i32 9, i32 0, i32 2, i32 0, i32 0
  br label %95

82:                                               ; preds = %73
  %83 = load double*, double** %76, align 8
  %84 = and i64 %74, 511
  %85 = getelementptr inbounds double, double* %83, i64 %84
  %86 = getelementptr inbounds %"class.webrtc::OveruseEstimator", %"class.webrtc::OveruseEstimator"* %0, i64 0, i32 9, i32 0, i32 2, i32 0, i32 0
  %87 = load i64, i64* %86, align 8
  %88 = add i64 %87, %74
  %89 = lshr i64 %88, 9
  %90 = getelementptr inbounds double*, double** %67, i64 %89
  %91 = load double*, double** %90, align 8
  %92 = and i64 %88, 511
  %93 = getelementptr inbounds double, double* %91, i64 %92
  %94 = icmp eq double* %93, %85
  br i1 %94, label %95, label %100

95:                                               ; preds = %113, %82, %80
  %96 = phi i64* [ %81, %80 ], [ %86, %82 ], [ %86, %113 ]
  store i64 0, i64* %96, align 8
  %97 = sub i64 %78, %79
  %98 = ashr exact i64 %97, 3
  %99 = icmp ugt i64 %98, 2
  br i1 %99, label %118, label %131

100:                                              ; preds = %82, %113
  %101 = phi double* [ %116, %113 ], [ %85, %82 ]
  %102 = phi double** [ %115, %113 ], [ %76, %82 ]
  %103 = getelementptr inbounds double, double* %101, i64 1
  %104 = ptrtoint double* %103 to i64
  %105 = bitcast double** %102 to i64*
  %106 = load i64, i64* %105, align 8
  %107 = sub i64 %104, %106
  %108 = icmp eq i64 %107, 4096
  br i1 %108, label %109, label %113

109:                                              ; preds = %100
  %110 = getelementptr inbounds double*, double** %102, i64 1
  %111 = bitcast double** %110 to i64*
  %112 = load i64, i64* %111, align 8
  br label %113

113:                                              ; preds = %109, %100
  %114 = phi i64 [ %112, %109 ], [ %104, %100 ]
  %115 = phi double** [ %110, %109 ], [ %102, %100 ]
  %116 = inttoptr i64 %114 to double*
  %117 = icmp eq double* %93, %116
  br i1 %117, label %95, label %100

118:                                              ; preds = %95, %118
  %119 = phi double** [ %123, %118 ], [ %67, %95 ]
  %120 = bitcast double** %119 to i8**
  %121 = load i8*, i8** %120, align 8
  tail call void @_ZdlPv(i8* %121) #11
  %122 = load double**, double*** %2, align 8
  %123 = getelementptr inbounds double*, double** %122, i64 1
  store double** %123, double*** %2, align 8
  %124 = load i64, i64* %30, align 8
  %125 = ptrtoint double** %123 to i64
  %126 = sub i64 %124, %125
  %127 = ashr exact i64 %126, 3
  %128 = icmp ugt i64 %127, 2
  br i1 %128, label %118, label %129

129:                                              ; preds = %118
  %130 = inttoptr i64 %124 to double**
  br label %131

131:                                              ; preds = %129, %95
  %132 = phi double** [ %66, %95 ], [ %130, %129 ]
  %133 = phi double** [ %67, %95 ], [ %123, %129 ]
  %134 = phi i64 [ %98, %95 ], [ %127, %129 ]
  switch i64 %134, label %138 [
    i64 1, label %136
    i64 2, label %135
  ]

135:                                              ; preds = %131
  br label %136

136:                                              ; preds = %131, %135
  %137 = phi i64 [ 512, %135 ], [ 256, %131 ]
  store i64 %137, i64* %4, align 8
  br label %138

138:                                              ; preds = %136, %131
  %139 = icmp eq double** %133, %132
  br i1 %139, label %158, label %140

140:                                              ; preds = %138, %140
  %141 = phi double** [ %144, %140 ], [ %133, %138 ]
  %142 = bitcast double** %141 to i8**
  %143 = load i8*, i8** %142, align 8
  tail call void @_ZdlPv(i8* %143) #11
  %144 = getelementptr inbounds double*, double** %141, i64 1
  %145 = icmp eq double** %144, %132
  br i1 %145, label %146, label %140

146:                                              ; preds = %140
  %147 = load double**, double*** %2, align 8
  %148 = load double**, double*** %8, align 8
  %149 = icmp eq double** %148, %147
  br i1 %149, label %158, label %150

150:                                              ; preds = %146
  %151 = ptrtoint double** %147 to i64
  %152 = getelementptr double*, double** %148, i64 -1
  %153 = ptrtoint double** %152 to i64
  %154 = sub i64 %153, %151
  %155 = lshr i64 %154, 3
  %156 = xor i64 %155, -1
  %157 = getelementptr double*, double** %148, i64 %156
  store double** %157, double*** %8, align 8
  br label %158

158:                                              ; preds = %150, %146, %138
  %159 = getelementptr inbounds %"class.webrtc::OveruseEstimator", %"class.webrtc::OveruseEstimator"* %0, i64 0, i32 9, i32 0, i32 0, i32 0
  %160 = load double**, double*** %159, align 8
  %161 = icmp eq double** %160, null
  br i1 %161, label %164, label %162

162:                                              ; preds = %158
  %163 = bitcast double** %160 to i8*
  tail call void @_ZdlPv(i8* %163) #11
  br label %164

164:                                              ; preds = %158, %162
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN6webrtc16OveruseEstimator6UpdateEldiNS_14BandwidthUsageEl(%"class.webrtc::OveruseEstimator"*, i64, double, i32, i32, i64) local_unnamed_addr #0 align 2 {
  %7 = alloca %"class.rtc::DiagnosticLogMessage", align 8
  %8 = tail call double @_ZN6webrtc16OveruseEstimator20UpdateMinFramePeriodEd(%"class.webrtc::OveruseEstimator"* %0, double %2)
  %9 = sitofp i64 %1 to double
  %10 = fsub double %9, %2
  %11 = sitofp i32 %3 to double
  %12 = getelementptr inbounds %"class.webrtc::OveruseEstimator", %"class.webrtc::OveruseEstimator"* %0, i64 0, i32 1
  %13 = load i16, i16* %12, align 8
  %14 = add i16 %13, 1
  %15 = icmp ult i16 %14, 1000
  %16 = select i1 %15, i16 %14, i16 1000
  store i16 %16, i16* %12, align 8
  %17 = getelementptr inbounds %"class.webrtc::OveruseEstimator", %"class.webrtc::OveruseEstimator"* %0, i64 0, i32 6, i64 0
  %18 = load double, double* %17, align 8
  %19 = getelementptr inbounds %"class.webrtc::OveruseEstimator", %"class.webrtc::OveruseEstimator"* %0, i64 0, i32 5, i64 0, i64 0
  %20 = load double, double* %19, align 8
  %21 = fadd double %18, %20
  store double %21, double* %19, align 8
  %22 = getelementptr inbounds %"class.webrtc::OveruseEstimator", %"class.webrtc::OveruseEstimator"* %0, i64 0, i32 6, i64 1
  %23 = load double, double* %22, align 8
  %24 = getelementptr inbounds %"class.webrtc::OveruseEstimator", %"class.webrtc::OveruseEstimator"* %0, i64 0, i32 5, i64 1, i64 1
  %25 = load double, double* %24, align 8
  %26 = fadd double %23, %25
  store double %26, double* %24, align 8
  switch i32 %4, label %27 [
    i32 2, label %30
    i32 1, label %36
  ]

27:                                               ; preds = %6
  %28 = getelementptr inbounds %"class.webrtc::OveruseEstimator", %"class.webrtc::OveruseEstimator"* %0, i64 0, i32 3
  %29 = load double, double* %28, align 8
  br label %46

30:                                               ; preds = %6
  %31 = getelementptr inbounds %"class.webrtc::OveruseEstimator", %"class.webrtc::OveruseEstimator"* %0, i64 0, i32 3
  %32 = load double, double* %31, align 8
  %33 = getelementptr inbounds %"class.webrtc::OveruseEstimator", %"class.webrtc::OveruseEstimator"* %0, i64 0, i32 4
  %34 = load double, double* %33, align 8
  %35 = fcmp olt double %32, %34
  br i1 %35, label %42, label %46

36:                                               ; preds = %6
  %37 = getelementptr inbounds %"class.webrtc::OveruseEstimator", %"class.webrtc::OveruseEstimator"* %0, i64 0, i32 3
  %38 = load double, double* %37, align 8
  %39 = getelementptr inbounds %"class.webrtc::OveruseEstimator", %"class.webrtc::OveruseEstimator"* %0, i64 0, i32 4
  %40 = load double, double* %39, align 8
  %41 = fcmp ogt double %38, %40
  br i1 %41, label %42, label %46

42:                                               ; preds = %36, %30
  %43 = phi double [ %38, %36 ], [ %32, %30 ]
  %44 = fmul double %23, 1.000000e+01
  %45 = fadd double %44, %26
  store double %45, double* %24, align 8
  br label %46

46:                                               ; preds = %27, %30, %42, %36
  %47 = phi double [ %32, %30 ], [ %29, %27 ], [ %43, %42 ], [ %38, %36 ]
  %48 = phi double [ %26, %30 ], [ %26, %27 ], [ %45, %42 ], [ %26, %36 ]
  %49 = getelementptr inbounds %"class.webrtc::OveruseEstimator", %"class.webrtc::OveruseEstimator"* %0, i64 0, i32 5, i64 0, i64 1
  %50 = load double, double* %49, align 8
  %51 = getelementptr inbounds %"class.webrtc::OveruseEstimator", %"class.webrtc::OveruseEstimator"* %0, i64 0, i32 5, i64 1, i64 0
  %52 = load double, double* %51, align 8
  %53 = insertelement <2 x double> undef, double %21, i32 0
  %54 = insertelement <2 x double> %53, double %52, i32 1
  %55 = insertelement <2 x double> undef, double %11, i32 0
  %56 = shufflevector <2 x double> %55, <2 x double> undef, <2 x i32> zeroinitializer
  %57 = fmul <2 x double> %54, %56
  %58 = insertelement <2 x double> undef, double %50, i32 0
  %59 = insertelement <2 x double> %58, double %48, i32 1
  %60 = fadd <2 x double> %57, %59
  %61 = getelementptr inbounds %"class.webrtc::OveruseEstimator", %"class.webrtc::OveruseEstimator"* %0, i64 0, i32 2
  %62 = load double, double* %61, align 8
  %63 = fmul double %62, %11
  %64 = fsub double %10, %63
  %65 = getelementptr inbounds %"class.webrtc::OveruseEstimator", %"class.webrtc::OveruseEstimator"* %0, i64 0, i32 3
  %66 = fsub double %64, %47
  %67 = icmp eq i32 %4, 0
  %68 = getelementptr inbounds %"class.webrtc::OveruseEstimator", %"class.webrtc::OveruseEstimator"* %0, i64 0, i32 8
  %69 = load double, double* %68, align 8
  %70 = tail call double @sqrt(double %69) #10
  %71 = fmul double %70, 3.000000e+00
  %72 = tail call double @llvm.fabs.f64(double %66)
  %73 = fcmp olt double %72, %71
  br i1 %73, label %74, label %96

74:                                               ; preds = %46
  br i1 %67, label %75, label %121

75:                                               ; preds = %74
  %76 = load i16, i16* %12, align 8
  %77 = icmp ugt i16 %76, 300
  %78 = select i1 %77, double 0x3FEFEF9DB22D0E56, double 0x3FEFAE147AE147AE
  %79 = fmul double %8, 3.000000e+01
  %80 = fdiv double %79, 1.000000e+03
  %81 = tail call double @pow(double %78, double %80) #10
  %82 = getelementptr inbounds %"class.webrtc::OveruseEstimator", %"class.webrtc::OveruseEstimator"* %0, i64 0, i32 7
  %83 = load double, double* %82, align 8
  %84 = fmul double %81, %83
  %85 = fsub double 1.000000e+00, %81
  %86 = fmul double %66, %85
  %87 = fadd double %84, %86
  store double %87, double* %82, align 8
  %88 = load double, double* %68, align 8
  %89 = fmul double %81, %88
  %90 = fsub double %87, %66
  %91 = fmul double %85, %90
  %92 = fmul double %90, %91
  %93 = fadd double %89, %92
  %94 = fcmp olt double %93, 1.000000e+00
  %95 = select i1 %94, double 1.000000e+00, double %93
  store double %95, double* %68, align 8
  br label %121

96:                                               ; preds = %46
  %97 = fcmp olt double %66, 0.000000e+00
  %98 = fsub double -0.000000e+00, %71
  %99 = select i1 %97, double %98, double %71
  br i1 %67, label %100, label %121

100:                                              ; preds = %96
  %101 = load i16, i16* %12, align 8
  %102 = icmp ugt i16 %101, 300
  %103 = select i1 %102, double 0x3FEFEF9DB22D0E56, double 0x3FEFAE147AE147AE
  %104 = fmul double %8, 3.000000e+01
  %105 = fdiv double %104, 1.000000e+03
  %106 = tail call double @pow(double %103, double %105) #10
  %107 = getelementptr inbounds %"class.webrtc::OveruseEstimator", %"class.webrtc::OveruseEstimator"* %0, i64 0, i32 7
  %108 = load double, double* %107, align 8
  %109 = fmul double %106, %108
  %110 = fsub double 1.000000e+00, %106
  %111 = fmul double %99, %110
  %112 = fadd double %109, %111
  store double %112, double* %107, align 8
  %113 = load double, double* %68, align 8
  %114 = fmul double %106, %113
  %115 = fsub double %112, %99
  %116 = fmul double %110, %115
  %117 = fmul double %115, %116
  %118 = fadd double %114, %117
  %119 = fcmp olt double %118, 1.000000e+00
  %120 = select i1 %119, double 1.000000e+00, double %118
  store double %120, double* %68, align 8
  br label %121

121:                                              ; preds = %100, %96, %75, %74
  %122 = load double, double* %68, align 8
  %123 = extractelement <2 x double> %60, i32 0
  %124 = fmul double %123, %11
  %125 = fadd double %124, %122
  %126 = extractelement <2 x double> %60, i32 1
  %127 = fadd double %126, %125
  %128 = insertelement <2 x double> undef, double %127, i32 0
  %129 = shufflevector <2 x double> %128, <2 x double> undef, <2 x i32> zeroinitializer
  %130 = fdiv <2 x double> %60, %129
  %131 = extractelement <2 x double> %130, i32 0
  %132 = fmul double %131, %11
  %133 = extractelement <2 x double> %130, i32 1
  %134 = fmul double %133, %11
  %135 = insertelement <2 x double> undef, double %131, i32 0
  %136 = insertelement <2 x double> %135, double %134, i32 1
  %137 = fsub <2 x double> <double -0.000000e+00, double -0.000000e+00>, %136
  %138 = insertelement <2 x double> %130, double %132, i32 0
  %139 = fsub <2 x double> <double 1.000000e+00, double 1.000000e+00>, %138
  %140 = load double, double* %19, align 8
  %141 = load double, double* %49, align 8
  %142 = load double, double* %51, align 8
  %143 = insertelement <2 x double> undef, double %142, i32 0
  %144 = insertelement <2 x double> %143, double %140, i32 1
  %145 = fmul <2 x double> %144, %137
  %146 = insertelement <2 x double> undef, double %140, i32 0
  %147 = insertelement <2 x double> %146, double %142, i32 1
  %148 = fmul <2 x double> %147, %139
  %149 = fadd <2 x double> %145, %148
  %150 = extractelement <2 x double> %149, i32 0
  store double %150, double* %19, align 8
  %151 = load double, double* %24, align 8
  %152 = insertelement <2 x double> undef, double %141, i32 0
  %153 = shufflevector <2 x double> %152, <2 x double> undef, <2 x i32> zeroinitializer
  %154 = shufflevector <2 x double> %137, <2 x double> %139, <2 x i32> <i32 1, i32 2>
  %155 = fmul <2 x double> %153, %154
  %156 = shufflevector <2 x double> %139, <2 x double> %137, <2 x i32> <i32 1, i32 2>
  %157 = insertelement <2 x double> undef, double %151, i32 0
  %158 = shufflevector <2 x double> %157, <2 x double> undef, <2 x i32> zeroinitializer
  %159 = fmul <2 x double> %156, %158
  %160 = fadd <2 x double> %155, %159
  %161 = extractelement <2 x double> %160, i32 1
  store double %161, double* %49, align 8
  %162 = extractelement <2 x double> %149, i32 1
  store double %162, double* %51, align 8
  %163 = extractelement <2 x double> %160, i32 0
  store double %163, double* %24, align 8
  %164 = fadd double %150, %163
  %165 = fcmp ult double %164, 0.000000e+00
  br i1 %165, label %174, label %166

166:                                              ; preds = %121
  %167 = fmul <2 x double> %149, %160
  %168 = extractelement <2 x double> %167, i32 0
  %169 = extractelement <2 x double> %167, i32 1
  %170 = fsub double %168, %169
  %171 = fcmp oge double %170, 0.000000e+00
  %172 = fcmp oge double %150, 0.000000e+00
  %173 = and i1 %172, %171
  br i1 %173, label %179, label %174

174:                                              ; preds = %166, %121
  %175 = bitcast %"class.rtc::DiagnosticLogMessage"* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 304, i8* nonnull %175) #10
  call void @_ZN3rtc20DiagnosticLogMessageC1EPKciNS_15LoggingSeverityENS_15LogErrorContextEi(%"class.rtc::DiagnosticLogMessage"* nonnull %7, i8* getelementptr inbounds ([79 x i8], [79 x i8]* @.str, i64 0, i64 0), i32 115, i32 1, i32 0, i32 0) #10
  %176 = getelementptr inbounds %"class.rtc::DiagnosticLogMessage", %"class.rtc::DiagnosticLogMessage"* %7, i64 0, i32 7
  %177 = bitcast %"class.std::__1::basic_ostringstream"* %176 to %"class.std::__1::basic_ostream"*
  %178 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZNSt3__124__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_m(%"class.std::__1::basic_ostream"* dereferenceable(160) %177, i8* getelementptr inbounds ([71 x i8], [71 x i8]* @.str.1, i64 0, i64 0), i64 70) #10
  call void @_ZN3rtc20DiagnosticLogMessageD1Ev(%"class.rtc::DiagnosticLogMessage"* nonnull %7) #10
  call void @llvm.lifetime.end.p0i8(i64 304, i8* nonnull %175) #10
  br label %179

179:                                              ; preds = %166, %174
  %180 = load double, double* %61, align 8
  %181 = bitcast double* %65 to i64*
  %182 = load i64, i64* %181, align 8
  %183 = getelementptr inbounds %"class.webrtc::OveruseEstimator", %"class.webrtc::OveruseEstimator"* %0, i64 0, i32 4
  %184 = bitcast double* %183 to i64*
  store i64 %182, i64* %184, align 8
  %185 = bitcast i64 %182 to double
  %186 = insertelement <2 x double> undef, double %66, i32 0
  %187 = shufflevector <2 x double> %186, <2 x double> undef, <2 x i32> zeroinitializer
  %188 = fmul <2 x double> %187, %130
  %189 = insertelement <2 x double> undef, double %180, i32 0
  %190 = insertelement <2 x double> %189, double %185, i32 1
  %191 = fadd <2 x double> %188, %190
  %192 = bitcast double* %61 to <2 x double>*
  store <2 x double> %191, <2 x double>* %192, align 8
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nounwind ssp uwtable
define hidden double @_ZN6webrtc16OveruseEstimator20UpdateMinFramePeriodEd(%"class.webrtc::OveruseEstimator"*, double) local_unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.webrtc::OveruseEstimator", %"class.webrtc::OveruseEstimator"* %0, i64 0, i32 9
  %4 = getelementptr inbounds %"class.webrtc::OveruseEstimator", %"class.webrtc::OveruseEstimator"* %0, i64 0, i32 9, i32 0, i32 2, i32 0, i32 0
  %5 = load i64, i64* %4, align 8
  %6 = icmp ugt i64 %5, 59
  %7 = getelementptr inbounds %"class.webrtc::OveruseEstimator", %"class.webrtc::OveruseEstimator"* %0, i64 0, i32 9, i32 0, i32 1
  %8 = load i64, i64* %7, align 8
  br i1 %6, label %9, label %22

9:                                                ; preds = %2
  %10 = add i64 %5, -1
  store i64 %10, i64* %4, align 8
  %11 = add i64 %8, 1
  store i64 %11, i64* %7, align 8
  %12 = icmp ult i64 %11, 1024
  br i1 %12, label %22, label %13

13:                                               ; preds = %9
  %14 = getelementptr inbounds %"class.webrtc::OveruseEstimator", %"class.webrtc::OveruseEstimator"* %0, i64 0, i32 9, i32 0, i32 0, i32 1
  %15 = bitcast double*** %14 to i8***
  %16 = load i8**, i8*** %15, align 8
  %17 = load i8*, i8** %16, align 8
  tail call void @_ZdlPv(i8* %17) #11
  %18 = load double**, double*** %14, align 8
  %19 = getelementptr inbounds double*, double** %18, i64 1
  store double** %19, double*** %14, align 8
  %20 = load i64, i64* %7, align 8
  %21 = add i64 %20, -512
  store i64 %21, i64* %7, align 8
  br label %22

22:                                               ; preds = %2, %13, %9
  %23 = phi i64 [ %21, %13 ], [ %11, %9 ], [ %8, %2 ]
  %24 = getelementptr inbounds %"class.webrtc::OveruseEstimator", %"class.webrtc::OveruseEstimator"* %0, i64 0, i32 9, i32 0, i32 0, i32 1
  %25 = load double**, double*** %24, align 8
  %26 = getelementptr inbounds %"class.webrtc::OveruseEstimator", %"class.webrtc::OveruseEstimator"* %0, i64 0, i32 9, i32 0, i32 1
  %27 = lshr i64 %23, 9
  %28 = getelementptr inbounds double*, double** %25, i64 %27
  %29 = getelementptr inbounds %"class.webrtc::OveruseEstimator", %"class.webrtc::OveruseEstimator"* %0, i64 0, i32 9, i32 0, i32 0, i32 2
  %30 = load double**, double*** %29, align 8
  %31 = icmp eq double** %30, %25
  %32 = ptrtoint double** %30 to i64
  %33 = ptrtoint double** %25 to i64
  br i1 %31, label %34, label %37

34:                                               ; preds = %22
  %35 = load i64, i64* %4, align 8
  %36 = add i64 %35, %23
  br label %49

37:                                               ; preds = %22
  %38 = load double*, double** %28, align 8
  %39 = and i64 %23, 511
  %40 = getelementptr inbounds double, double* %38, i64 %39
  %41 = ptrtoint double* %40 to i64
  %42 = load i64, i64* %4, align 8
  %43 = add i64 %42, %23
  %44 = lshr i64 %43, 9
  %45 = getelementptr inbounds double*, double** %25, i64 %44
  %46 = load double*, double** %45, align 8
  %47 = and i64 %43, 511
  %48 = getelementptr inbounds double, double* %46, i64 %47
  br label %49

49:                                               ; preds = %34, %37
  %50 = phi i64 [ %43, %37 ], [ %36, %34 ]
  %51 = phi i64 [ %41, %37 ], [ 0, %34 ]
  %52 = phi double* [ %48, %37 ], [ null, %34 ]
  %53 = inttoptr i64 %51 to double*
  %54 = icmp eq double* %52, %53
  br i1 %54, label %55, label %84

55:                                               ; preds = %105, %49
  %56 = phi double [ %1, %49 ], [ %100, %105 ]
  %57 = sub i64 %32, %33
  %58 = icmp eq i64 %57, 0
  %59 = shl i64 %57, 6
  %60 = add i64 %59, -1
  %61 = select i1 %58, i64 0, i64 %60
  %62 = icmp eq i64 %61, %50
  br i1 %62, label %63, label %69

63:                                               ; preds = %55
  tail call void @_ZNSt3__15dequeIdNS_9allocatorIdEEE19__add_back_capacityEv(%"class.std::__1::deque"* %3) #10
  %64 = load i64, i64* %4, align 8
  %65 = load i64, i64* %26, align 8
  %66 = load double**, double*** %24, align 8
  %67 = load double**, double*** %29, align 8
  %68 = add i64 %65, %64
  br label %69

69:                                               ; preds = %63, %55
  %70 = phi i64 [ %68, %63 ], [ %50, %55 ]
  %71 = phi double** [ %67, %63 ], [ %30, %55 ]
  %72 = phi double** [ %66, %63 ], [ %25, %55 ]
  %73 = icmp eq double** %71, %72
  br i1 %73, label %80, label %74

74:                                               ; preds = %69
  %75 = lshr i64 %70, 9
  %76 = getelementptr inbounds double*, double** %72, i64 %75
  %77 = load double*, double** %76, align 8
  %78 = and i64 %70, 511
  %79 = getelementptr inbounds double, double* %77, i64 %78
  br label %80

80:                                               ; preds = %69, %74
  %81 = phi double* [ %79, %74 ], [ null, %69 ]
  store double %1, double* %81, align 8
  %82 = load i64, i64* %4, align 8
  %83 = add i64 %82, 1
  store i64 %83, i64* %4, align 8
  ret double %56

84:                                               ; preds = %49, %105
  %85 = phi double [ %100, %105 ], [ %1, %49 ]
  %86 = phi double* [ %108, %105 ], [ %53, %49 ]
  %87 = phi double** [ %107, %105 ], [ %28, %49 ]
  %88 = phi i64 [ %106, %105 ], [ %51, %49 ]
  %89 = inttoptr i64 %88 to i64*
  %90 = load i64, i64* %89, align 8
  %91 = bitcast i64 %90 to double
  %92 = fcmp olt double %85, %91
  %93 = getelementptr inbounds double, double* %86, i64 1
  %94 = ptrtoint double* %93 to i64
  %95 = bitcast double** %87 to i64*
  %96 = load i64, i64* %95, align 8
  %97 = sub i64 %94, %96
  %98 = icmp eq i64 %97, 4096
  %99 = bitcast i64 %90 to double
  %100 = select i1 %92, double %85, double %99
  br i1 %98, label %101, label %105

101:                                              ; preds = %84
  %102 = getelementptr inbounds double*, double** %87, i64 1
  %103 = bitcast double** %102 to i64*
  %104 = load i64, i64* %103, align 8
  br label %105

105:                                              ; preds = %84, %101
  %106 = phi i64 [ %104, %101 ], [ %94, %84 ]
  %107 = phi double** [ %102, %101 ], [ %87, %84 ]
  %108 = inttoptr i64 %106 to double*
  %109 = icmp eq double* %52, %108
  br i1 %109, label %55, label %84
}

; Function Attrs: nofree nounwind
declare double @sqrt(double) local_unnamed_addr #2

; Function Attrs: nounwind readnone speculatable
declare double @llvm.fabs.f64(double) #3

; Function Attrs: nofree nounwind ssp uwtable
define hidden void @_ZN6webrtc16OveruseEstimator19UpdateNoiseEstimateEddb(%"class.webrtc::OveruseEstimator"* nocapture, double, double, i1 zeroext) local_unnamed_addr #4 align 2 {
  br i1 %3, label %5, label %28

5:                                                ; preds = %4
  %6 = getelementptr inbounds %"class.webrtc::OveruseEstimator", %"class.webrtc::OveruseEstimator"* %0, i64 0, i32 1
  %7 = load i16, i16* %6, align 8
  %8 = icmp ugt i16 %7, 300
  %9 = select i1 %8, double 0x3FEFEF9DB22D0E56, double 0x3FEFAE147AE147AE
  %10 = fmul double %2, 3.000000e+01
  %11 = fdiv double %10, 1.000000e+03
  %12 = tail call double @pow(double %9, double %11) #10
  %13 = getelementptr inbounds %"class.webrtc::OveruseEstimator", %"class.webrtc::OveruseEstimator"* %0, i64 0, i32 7
  %14 = load double, double* %13, align 8
  %15 = fmul double %12, %14
  %16 = fsub double 1.000000e+00, %12
  %17 = fmul double %16, %1
  %18 = fadd double %15, %17
  store double %18, double* %13, align 8
  %19 = getelementptr inbounds %"class.webrtc::OveruseEstimator", %"class.webrtc::OveruseEstimator"* %0, i64 0, i32 8
  %20 = load double, double* %19, align 8
  %21 = fmul double %12, %20
  %22 = fsub double %18, %1
  %23 = fmul double %16, %22
  %24 = fmul double %22, %23
  %25 = fadd double %21, %24
  %26 = fcmp olt double %25, 1.000000e+00
  %27 = select i1 %26, double 1.000000e+00, double %25
  store double %27, double* %19, align 8
  br label %28

28:                                               ; preds = %4, %5
  ret void
}

declare void @_ZN3rtc20DiagnosticLogMessageC1EPKciNS_15LoggingSeverityENS_15LogErrorContextEi(%"class.rtc::DiagnosticLogMessage"*, i8*, i32, i32, i32, i32) unnamed_addr #5

; Function Attrs: nounwind
declare void @_ZN3rtc20DiagnosticLogMessageD1Ev(%"class.rtc::DiagnosticLogMessage"*) unnamed_addr #6

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nofree nounwind
declare double @pow(double, double) local_unnamed_addr #2

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #7

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZNSt3__124__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_m(%"class.std::__1::basic_ostream"* dereferenceable(160), i8*, i64) local_unnamed_addr #0 comdat {
  %4 = alloca %"class.std::__1::locale", align 8
  %5 = alloca %"class.std::__1::basic_ostream<char, std::__1::char_traits<char> >::sentry", align 8
  %6 = getelementptr inbounds %"class.std::__1::basic_ostream<char, std::__1::char_traits<char> >::sentry", %"class.std::__1::basic_ostream<char, std::__1::char_traits<char> >::sentry"* %5, i64 0, i32 0
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %6) #10
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %6, i8 -86, i64 16, i1 false)
  call void @_ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE6sentryC1ERS3_(%"class.std::__1::basic_ostream<char, std::__1::char_traits<char> >::sentry"* nonnull %5, %"class.std::__1::basic_ostream"* dereferenceable(160) %0) #10
  %7 = load i8, i8* %6, align 8, !range !2
  %8 = icmp eq i8 %7, 0
  br i1 %8, label %58, label %9

9:                                                ; preds = %3
  %10 = bitcast %"class.std::__1::basic_ostream"* %0 to i8**
  %11 = load i8*, i8** %10, align 8
  %12 = getelementptr i8, i8* %11, i64 -24
  %13 = bitcast i8* %12 to i64*
  %14 = load i64, i64* %13, align 8
  %15 = bitcast %"class.std::__1::basic_ostream"* %0 to i8*
  %16 = getelementptr inbounds i8, i8* %15, i64 %14
  %17 = getelementptr inbounds i8, i8* %16, i64 40
  %18 = bitcast i8* %17 to %"class.std::__1::basic_streambuf"**
  %19 = load %"class.std::__1::basic_streambuf"*, %"class.std::__1::basic_streambuf"** %18, align 8
  %20 = bitcast i8* %16 to %"class.std::__1::ios_base"*
  %21 = getelementptr inbounds i8, i8* %16, i64 8
  %22 = bitcast i8* %21 to i32*
  %23 = load i32, i32* %22, align 8
  %24 = and i32 %23, 176
  %25 = icmp eq i32 %24, 32
  %26 = getelementptr inbounds i8, i8* %1, i64 %2
  %27 = select i1 %25, i8* %26, i8* %1
  %28 = getelementptr inbounds i8, i8* %16, i64 144
  %29 = bitcast i8* %28 to i32*
  %30 = load i32, i32* %29, align 8
  %31 = icmp eq i32 %30, -1
  br i1 %31, label %32, label %42

32:                                               ; preds = %9
  %33 = bitcast %"class.std::__1::locale"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %33) #10
  call void @_ZNKSt3__18ios_base6getlocEv(%"class.std::__1::locale"* nonnull sret %4, %"class.std::__1::ios_base"* %20) #10
  %34 = call %"class.std::__1::locale::facet"* @_ZNKSt3__16locale9use_facetERNS0_2idE(%"class.std::__1::locale"* nonnull %4, %"class.std::__1::locale::id"* nonnull dereferenceable(16) @_ZNSt3__15ctypeIcE2idE) #10
  %35 = bitcast %"class.std::__1::locale::facet"* %34 to %"class.std::__1::ctype"*
  %36 = bitcast %"class.std::__1::locale::facet"* %34 to i8 (%"class.std::__1::ctype"*, i8)***
  %37 = load i8 (%"class.std::__1::ctype"*, i8)**, i8 (%"class.std::__1::ctype"*, i8)*** %36, align 8
  %38 = getelementptr inbounds i8 (%"class.std::__1::ctype"*, i8)*, i8 (%"class.std::__1::ctype"*, i8)** %37, i64 7
  %39 = load i8 (%"class.std::__1::ctype"*, i8)*, i8 (%"class.std::__1::ctype"*, i8)** %38, align 8
  %40 = call signext i8 %39(%"class.std::__1::ctype"* %35, i8 signext 32) #10
  call void @_ZNSt3__16localeD1Ev(%"class.std::__1::locale"* nonnull %4) #10
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %33) #10
  %41 = sext i8 %40 to i32
  store i32 %41, i32* %29, align 8
  br label %42

42:                                               ; preds = %9, %32
  %43 = phi i32 [ %41, %32 ], [ %30, %9 ]
  %44 = trunc i32 %43 to i8
  %45 = call %"class.std::__1::basic_streambuf"* @_ZNSt3__116__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_(%"class.std::__1::basic_streambuf"* %19, i8* %1, i8* %27, i8* %26, %"class.std::__1::ios_base"* dereferenceable(136) %20, i8 signext %44)
  %46 = icmp eq %"class.std::__1::basic_streambuf"* %45, null
  br i1 %46, label %47, label %58

47:                                               ; preds = %42
  %48 = load i8*, i8** %10, align 8
  %49 = getelementptr i8, i8* %48, i64 -24
  %50 = bitcast i8* %49 to i64*
  %51 = load i64, i64* %50, align 8
  %52 = getelementptr inbounds i8, i8* %15, i64 %51
  %53 = bitcast i8* %52 to %"class.std::__1::ios_base"*
  %54 = getelementptr inbounds i8, i8* %52, i64 32
  %55 = bitcast i8* %54 to i32*
  %56 = load i32, i32* %55, align 8
  %57 = or i32 %56, 5
  call void @_ZNSt3__18ios_base5clearEj(%"class.std::__1::ios_base"* %53, i32 %57) #10
  br label %58

58:                                               ; preds = %3, %42, %47
  call void @_ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE6sentryD1Ev(%"class.std::__1::basic_ostream<char, std::__1::char_traits<char> >::sentry"* nonnull %5) #10
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %6) #10
  ret %"class.std::__1::basic_ostream"* %0
}

declare void @_ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE6sentryC1ERS3_(%"class.std::__1::basic_ostream<char, std::__1::char_traits<char> >::sentry"*, %"class.std::__1::basic_ostream"* dereferenceable(160)) unnamed_addr #5

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden %"class.std::__1::basic_streambuf"* @_ZNSt3__116__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_(%"class.std::__1::basic_streambuf"*, i8*, i8*, i8*, %"class.std::__1::ios_base"* dereferenceable(136), i8 signext) local_unnamed_addr #0 comdat {
  %7 = alloca %"class.std::__1::basic_string", align 8
  %8 = icmp eq %"class.std::__1::basic_streambuf"* %0, null
  br i1 %8, label %78, label %9

9:                                                ; preds = %6
  %10 = ptrtoint i8* %3 to i64
  %11 = ptrtoint i8* %1 to i64
  %12 = sub i64 %10, %11
  %13 = getelementptr inbounds %"class.std::__1::ios_base", %"class.std::__1::ios_base"* %4, i64 0, i32 3
  %14 = load i64, i64* %13, align 8
  %15 = icmp sgt i64 %14, %12
  %16 = sub nsw i64 %14, %12
  %17 = select i1 %15, i64 %16, i64 0
  %18 = ptrtoint i8* %2 to i64
  %19 = sub i64 %18, %11
  %20 = icmp sgt i64 %19, 0
  br i1 %20, label %21, label %28

21:                                               ; preds = %9
  %22 = bitcast %"class.std::__1::basic_streambuf"* %0 to i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)***
  %23 = load i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)**, i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)*** %22, align 8
  %24 = getelementptr inbounds i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)*, i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)** %23, i64 12
  %25 = load i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)*, i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)** %24, align 8
  %26 = tail call i64 %25(%"class.std::__1::basic_streambuf"* nonnull %0, i8* %1, i64 %19) #10
  %27 = icmp eq i64 %26, %19
  br i1 %27, label %28, label %78

28:                                               ; preds = %21, %9
  %29 = icmp sgt i64 %17, 0
  br i1 %29, label %30, label %67

30:                                               ; preds = %28
  %31 = bitcast %"class.std::__1::basic_string"* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %31) #10
  %32 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %7, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %33 = icmp ult i64 %17, 23
  %34 = bitcast %"class.std::__1::basic_string"* %7 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %34, i8 -86, i64 24, i1 false)
  br i1 %33, label %43, label %35

35:                                               ; preds = %30
  %36 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %7, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 2
  %37 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %7, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %38 = add nuw i64 %17, 16
  %39 = and i64 %38, -16
  %40 = tail call i8* @_Znwm(i64 %39) #11
  store i8* %40, i8** %32, align 8
  %41 = or i64 %39, -9223372036854775808
  store i64 %41, i64* %36, align 8
  store i64 %17, i64* %37, align 8
  %42 = bitcast %"class.std::__1::basic_string"* %7 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  br label %47

43:                                               ; preds = %30
  %44 = trunc i64 %17 to i8
  %45 = bitcast %"class.std::__1::basic_string"* %7 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %46 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %45, i64 0, i32 1, i32 0
  store i8 %44, i8* %46, align 1
  br label %47

47:                                               ; preds = %35, %43
  %48 = phi %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* [ %42, %35 ], [ %45, %43 ]
  %49 = phi i8* [ %40, %35 ], [ %31, %43 ]
  call void @llvm.memset.p0i8.i64(i8* nonnull align 1 %49, i8 %5, i64 %17, i1 false) #10
  %50 = getelementptr inbounds i8, i8* %49, i64 %17
  store i8 0, i8* %50, align 1
  %51 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %48, i64 0, i32 1, i32 0
  %52 = load i8, i8* %51, align 1
  %53 = icmp slt i8 %52, 0
  %54 = load i8*, i8** %32, align 8
  %55 = select i1 %53, i8* %54, i8* %31
  %56 = bitcast %"class.std::__1::basic_streambuf"* %0 to i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)***
  %57 = load i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)**, i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)*** %56, align 8
  %58 = getelementptr inbounds i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)*, i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)** %57, i64 12
  %59 = load i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)*, i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)** %58, align 8
  %60 = call i64 %59(%"class.std::__1::basic_streambuf"* nonnull %0, i8* %55, i64 %17) #10
  %61 = icmp eq i64 %60, %17
  %62 = load i8, i8* %51, align 1
  %63 = icmp slt i8 %62, 0
  br i1 %63, label %64, label %66

64:                                               ; preds = %47
  %65 = load i8*, i8** %32, align 8
  call void @_ZdlPv(i8* %65) #11
  br label %66

66:                                               ; preds = %47, %64
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %31) #10
  br i1 %61, label %67, label %78

67:                                               ; preds = %66, %28
  %68 = sub i64 %10, %18
  %69 = icmp sgt i64 %68, 0
  br i1 %69, label %70, label %77

70:                                               ; preds = %67
  %71 = bitcast %"class.std::__1::basic_streambuf"* %0 to i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)***
  %72 = load i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)**, i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)*** %71, align 8
  %73 = getelementptr inbounds i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)*, i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)** %72, i64 12
  %74 = load i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)*, i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)** %73, align 8
  %75 = call i64 %74(%"class.std::__1::basic_streambuf"* nonnull %0, i8* %2, i64 %68) #10
  %76 = icmp eq i64 %75, %68
  br i1 %76, label %77, label %78

77:                                               ; preds = %70, %67
  store i64 0, i64* %13, align 8
  br label %78

78:                                               ; preds = %77, %66, %21, %70, %6
  %79 = phi %"class.std::__1::basic_streambuf"* [ null, %6 ], [ %0, %77 ], [ null, %66 ], [ null, %21 ], [ null, %70 ]
  ret %"class.std::__1::basic_streambuf"* %79
}

; Function Attrs: nounwind
declare void @_ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE6sentryD1Ev(%"class.std::__1::basic_ostream<char, std::__1::char_traits<char> >::sentry"*) unnamed_addr #6

; Function Attrs: noreturn nounwind
declare void @abort() local_unnamed_addr #8

; Function Attrs: nobuiltin nofree
declare noalias nonnull i8* @_Znwm(i64) local_unnamed_addr #9

declare void @_ZNKSt3__18ios_base6getlocEv(%"class.std::__1::locale"* sret, %"class.std::__1::ios_base"*) local_unnamed_addr #5

; Function Attrs: nounwind
declare void @_ZNSt3__16localeD1Ev(%"class.std::__1::locale"*) unnamed_addr #6

declare %"class.std::__1::locale::facet"* @_ZNKSt3__16locale9use_facetERNS0_2idE(%"class.std::__1::locale"*, %"class.std::__1::locale::id"* dereferenceable(16)) local_unnamed_addr #5

declare void @_ZNSt3__18ios_base5clearEj(%"class.std::__1::ios_base"*, i32) local_unnamed_addr #5

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__15dequeIdNS_9allocatorIdEEE19__add_back_capacityEv(%"class.std::__1::deque"*) local_unnamed_addr #0 comdat align 2 {
  %2 = alloca double*, align 8
  %3 = alloca double*, align 8
  %4 = alloca %"struct.std::__1::__split_buffer.12", align 8
  %5 = getelementptr inbounds %"class.std::__1::deque", %"class.std::__1::deque"* %0, i64 0, i32 0, i32 1
  %6 = load i64, i64* %5, align 8
  %7 = icmp ugt i64 %6, 511
  br i1 %7, label %8, label %162

8:                                                ; preds = %1
  %9 = add i64 %6, -512
  store i64 %9, i64* %5, align 8
  %10 = getelementptr inbounds %"class.std::__1::deque", %"class.std::__1::deque"* %0, i64 0, i32 0, i32 0, i32 1
  %11 = load double**, double*** %10, align 8
  %12 = bitcast double** %11 to i64*
  %13 = load i64, i64* %12, align 8
  %14 = getelementptr inbounds double*, double** %11, i64 1
  store double** %14, double*** %10, align 8
  %15 = getelementptr inbounds %"class.std::__1::deque", %"class.std::__1::deque"* %0, i64 0, i32 0, i32 0, i32 2
  %16 = load double**, double*** %15, align 8
  %17 = getelementptr inbounds %"class.std::__1::deque", %"class.std::__1::deque"* %0, i64 0, i32 0, i32 0, i32 3, i32 0, i32 0
  %18 = load double**, double*** %17, align 8
  %19 = icmp eq double** %16, %18
  %20 = ptrtoint double** %18 to i64
  %21 = bitcast double** %16 to i64*
  br i1 %19, label %22, label %158

22:                                               ; preds = %8
  %23 = getelementptr inbounds %"class.std::__1::deque", %"class.std::__1::deque"* %0, i64 0, i32 0, i32 0, i32 0
  %24 = load double**, double*** %23, align 8
  %25 = icmp ugt double** %14, %24
  %26 = ptrtoint double** %24 to i64
  br i1 %25, label %27, label %47

27:                                               ; preds = %22
  %28 = ptrtoint double** %14 to i64
  %29 = sub i64 %28, %26
  %30 = ashr exact i64 %29, 3
  %31 = add nsw i64 %30, 1
  %32 = sdiv i64 %31, -2
  %33 = getelementptr inbounds double*, double** %14, i64 %32
  %34 = ptrtoint double** %16 to i64
  %35 = sub i64 %34, %28
  %36 = ashr exact i64 %35, 3
  %37 = icmp eq i64 %35, 0
  br i1 %37, label %42, label %38

38:                                               ; preds = %27
  %39 = bitcast double** %33 to i8*
  %40 = bitcast double** %14 to i8*
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* align 8 %39, i8* align 8 %40, i64 %35, i1 false) #10
  %41 = load double**, double*** %10, align 8
  br label %42

42:                                               ; preds = %38, %27
  %43 = phi double** [ %14, %27 ], [ %41, %38 ]
  %44 = getelementptr inbounds double*, double** %33, i64 %36
  store double** %44, double*** %15, align 8
  %45 = getelementptr inbounds double*, double** %43, i64 %32
  store double** %45, double*** %10, align 8
  %46 = bitcast double** %44 to i64*
  br label %158

47:                                               ; preds = %22
  %48 = bitcast double*** %17 to i64*
  %49 = bitcast %"class.std::__1::deque"* %0 to i64*
  %50 = sub i64 %20, %26
  %51 = ashr exact i64 %50, 2
  %52 = icmp eq i64 %50, 0
  %53 = select i1 %52, i64 1, i64 %51
  %54 = icmp ugt i64 %53, 2305843009213693951
  br i1 %54, label %55, label %56

55:                                               ; preds = %47
  tail call void @abort() #12
  unreachable

56:                                               ; preds = %47
  %57 = lshr i64 %53, 2
  %58 = shl i64 %53, 3
  %59 = tail call i8* @_Znwm(i64 %58) #11
  %60 = bitcast i8* %59 to double**
  %61 = ptrtoint i8* %59 to i64
  %62 = getelementptr inbounds double*, double** %60, i64 %57
  %63 = ptrtoint double** %62 to i64
  %64 = getelementptr inbounds double*, double** %60, i64 %53
  %65 = ptrtoint double** %64 to i64
  %66 = ptrtoint double** %14 to i64
  %67 = ptrtoint double** %16 to i64
  %68 = sub i64 %67, %66
  %69 = ashr exact i64 %68, 3
  %70 = getelementptr inbounds double*, double** %62, i64 %69
  %71 = icmp eq i64 %68, 0
  br i1 %71, label %147, label %72

72:                                               ; preds = %56
  %73 = add i64 %68, -8
  %74 = lshr i64 %73, 3
  %75 = add nuw nsw i64 %74, 1
  %76 = and i64 %75, 7
  %77 = icmp eq i64 %76, 0
  br i1 %77, label %93, label %78

78:                                               ; preds = %72, %78
  %79 = phi double** [ %86, %78 ], [ %62, %72 ]
  %80 = phi i64 [ %87, %78 ], [ %63, %72 ]
  %81 = phi double** [ %88, %78 ], [ %14, %72 ]
  %82 = phi i64 [ %89, %78 ], [ %76, %72 ]
  %83 = bitcast double** %81 to i64*
  %84 = load i64, i64* %83, align 8
  %85 = inttoptr i64 %80 to i64*
  store i64 %84, i64* %85, align 8
  %86 = getelementptr inbounds double*, double** %79, i64 1
  %87 = ptrtoint double** %86 to i64
  %88 = getelementptr inbounds double*, double** %81, i64 1
  %89 = add i64 %82, -1
  %90 = icmp eq i64 %89, 0
  br i1 %90, label %91, label %78, !llvm.loop !3

91:                                               ; preds = %78
  %92 = ptrtoint double** %86 to i64
  br label %93

93:                                               ; preds = %72, %91
  %94 = phi double** [ %62, %72 ], [ %86, %91 ]
  %95 = phi i64 [ %63, %72 ], [ %92, %91 ]
  %96 = phi double** [ %14, %72 ], [ %88, %91 ]
  %97 = icmp ult i64 %73, 56
  br i1 %97, label %144, label %98

98:                                               ; preds = %93, %98
  %99 = phi double** [ %140, %98 ], [ %94, %93 ]
  %100 = phi i64 [ %141, %98 ], [ %95, %93 ]
  %101 = phi double** [ %142, %98 ], [ %96, %93 ]
  %102 = bitcast double** %101 to i64*
  %103 = load i64, i64* %102, align 8
  %104 = inttoptr i64 %100 to i64*
  store i64 %103, i64* %104, align 8
  %105 = getelementptr inbounds double*, double** %99, i64 1
  %106 = getelementptr inbounds double*, double** %101, i64 1
  %107 = bitcast double** %106 to i64*
  %108 = load i64, i64* %107, align 8
  %109 = bitcast double** %105 to i64*
  store i64 %108, i64* %109, align 8
  %110 = getelementptr inbounds double*, double** %99, i64 2
  %111 = getelementptr inbounds double*, double** %101, i64 2
  %112 = bitcast double** %111 to i64*
  %113 = load i64, i64* %112, align 8
  %114 = bitcast double** %110 to i64*
  store i64 %113, i64* %114, align 8
  %115 = getelementptr inbounds double*, double** %99, i64 3
  %116 = getelementptr inbounds double*, double** %101, i64 3
  %117 = bitcast double** %116 to i64*
  %118 = load i64, i64* %117, align 8
  %119 = bitcast double** %115 to i64*
  store i64 %118, i64* %119, align 8
  %120 = getelementptr inbounds double*, double** %99, i64 4
  %121 = getelementptr inbounds double*, double** %101, i64 4
  %122 = bitcast double** %121 to i64*
  %123 = load i64, i64* %122, align 8
  %124 = bitcast double** %120 to i64*
  store i64 %123, i64* %124, align 8
  %125 = getelementptr inbounds double*, double** %99, i64 5
  %126 = getelementptr inbounds double*, double** %101, i64 5
  %127 = bitcast double** %126 to i64*
  %128 = load i64, i64* %127, align 8
  %129 = bitcast double** %125 to i64*
  store i64 %128, i64* %129, align 8
  %130 = getelementptr inbounds double*, double** %99, i64 6
  %131 = getelementptr inbounds double*, double** %101, i64 6
  %132 = bitcast double** %131 to i64*
  %133 = load i64, i64* %132, align 8
  %134 = bitcast double** %130 to i64*
  store i64 %133, i64* %134, align 8
  %135 = getelementptr inbounds double*, double** %99, i64 7
  %136 = getelementptr inbounds double*, double** %101, i64 7
  %137 = bitcast double** %136 to i64*
  %138 = load i64, i64* %137, align 8
  %139 = bitcast double** %135 to i64*
  store i64 %138, i64* %139, align 8
  %140 = getelementptr inbounds double*, double** %99, i64 8
  %141 = ptrtoint double** %140 to i64
  %142 = getelementptr inbounds double*, double** %101, i64 8
  %143 = icmp eq double** %70, %140
  br i1 %143, label %144, label %98

144:                                              ; preds = %98, %93
  %145 = ptrtoint double** %70 to i64
  %146 = load double**, double*** %23, align 8
  br label %147

147:                                              ; preds = %144, %56
  %148 = phi double** [ %146, %144 ], [ %24, %56 ]
  %149 = phi i64 [ %145, %144 ], [ %63, %56 ]
  store i64 %61, i64* %49, align 8
  %150 = bitcast double*** %10 to i64*
  store i64 %63, i64* %150, align 8
  %151 = bitcast double*** %15 to i64*
  store i64 %149, i64* %151, align 8
  store i64 %65, i64* %48, align 8
  %152 = icmp eq double** %148, null
  %153 = inttoptr i64 %149 to i64*
  br i1 %152, label %158, label %154

154:                                              ; preds = %147
  %155 = bitcast double** %148 to i8*
  tail call void @_ZdlPv(i8* %155) #11
  %156 = bitcast double*** %15 to i64**
  %157 = load i64*, i64** %156, align 8
  br label %158

158:                                              ; preds = %8, %42, %147, %154
  %159 = phi i64* [ %157, %154 ], [ %153, %147 ], [ %46, %42 ], [ %21, %8 ]
  store i64 %13, i64* %159, align 8
  %160 = load double**, double*** %15, align 8
  %161 = getelementptr inbounds double*, double** %160, i64 1
  store double** %161, double*** %15, align 8
  br label %460

162:                                              ; preds = %1
  %163 = getelementptr inbounds %"class.std::__1::deque", %"class.std::__1::deque"* %0, i64 0, i32 0, i32 0
  %164 = getelementptr inbounds %"class.std::__1::deque", %"class.std::__1::deque"* %0, i64 0, i32 0, i32 0, i32 2
  %165 = bitcast double*** %164 to i64*
  %166 = load i64, i64* %165, align 8
  %167 = getelementptr inbounds %"class.std::__1::deque", %"class.std::__1::deque"* %0, i64 0, i32 0, i32 0, i32 1
  %168 = bitcast double*** %167 to i64*
  %169 = load i64, i64* %168, align 8
  %170 = sub i64 %166, %169
  %171 = ashr exact i64 %170, 3
  %172 = getelementptr inbounds %"class.std::__1::deque", %"class.std::__1::deque"* %0, i64 0, i32 0, i32 0, i32 3, i32 0, i32 0
  %173 = bitcast double*** %172 to i64*
  %174 = load i64, i64* %173, align 8
  %175 = bitcast %"class.std::__1::deque"* %0 to i64*
  %176 = load i64, i64* %175, align 8
  %177 = sub i64 %174, %176
  %178 = ashr exact i64 %177, 3
  %179 = icmp ult i64 %171, %178
  %180 = inttoptr i64 %166 to double**
  %181 = inttoptr i64 %169 to double**
  br i1 %179, label %182, label %337

182:                                              ; preds = %162
  %183 = icmp eq i64 %174, %166
  br i1 %183, label %188, label %184

184:                                              ; preds = %182
  %185 = bitcast double** %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %185) #10
  %186 = tail call i8* @_Znwm(i64 4096) #11
  %187 = bitcast double** %2 to i8**
  store i8* %186, i8** %187, align 8
  call void @_ZNSt3__114__split_bufferIPdNS_9allocatorIS1_EEE9push_backEOS1_(%"struct.std::__1::__split_buffer"* %163, double** nonnull dereferenceable(8) %2)
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %185) #10
  br label %460

188:                                              ; preds = %182
  %189 = bitcast double** %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %189) #10
  %190 = tail call i8* @_Znwm(i64 4096) #11
  %191 = bitcast double** %3 to i8**
  store i8* %190, i8** %191, align 8
  call void @_ZNSt3__114__split_bufferIPdNS_9allocatorIS1_EEE10push_frontEOS1_(%"struct.std::__1::__split_buffer"* %163, double** nonnull dereferenceable(8) %3)
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %189) #10
  %192 = load double**, double*** %167, align 8
  %193 = bitcast double** %192 to i64*
  %194 = load i64, i64* %193, align 8
  %195 = getelementptr inbounds double*, double** %192, i64 1
  store double** %195, double*** %167, align 8
  %196 = load double**, double*** %164, align 8
  %197 = load double**, double*** %172, align 8
  %198 = icmp eq double** %196, %197
  %199 = ptrtoint double** %197 to i64
  %200 = bitcast double** %196 to i64*
  br i1 %198, label %201, label %333

201:                                              ; preds = %188
  %202 = getelementptr inbounds %"class.std::__1::deque", %"class.std::__1::deque"* %0, i64 0, i32 0, i32 0, i32 0
  %203 = load double**, double*** %202, align 8
  %204 = icmp ugt double** %195, %203
  %205 = ptrtoint double** %203 to i64
  br i1 %204, label %206, label %226

206:                                              ; preds = %201
  %207 = ptrtoint double** %195 to i64
  %208 = sub i64 %207, %205
  %209 = ashr exact i64 %208, 3
  %210 = add nsw i64 %209, 1
  %211 = sdiv i64 %210, -2
  %212 = getelementptr inbounds double*, double** %195, i64 %211
  %213 = ptrtoint double** %196 to i64
  %214 = sub i64 %213, %207
  %215 = ashr exact i64 %214, 3
  %216 = icmp eq i64 %214, 0
  br i1 %216, label %221, label %217

217:                                              ; preds = %206
  %218 = bitcast double** %212 to i8*
  %219 = bitcast double** %195 to i8*
  call void @llvm.memmove.p0i8.p0i8.i64(i8* align 8 %218, i8* align 8 %219, i64 %214, i1 false) #10
  %220 = load double**, double*** %167, align 8
  br label %221

221:                                              ; preds = %217, %206
  %222 = phi double** [ %195, %206 ], [ %220, %217 ]
  %223 = getelementptr inbounds double*, double** %212, i64 %215
  store double** %223, double*** %164, align 8
  %224 = getelementptr inbounds double*, double** %222, i64 %211
  store double** %224, double*** %167, align 8
  %225 = bitcast double** %223 to i64*
  br label %333

226:                                              ; preds = %201
  %227 = sub i64 %199, %205
  %228 = ashr exact i64 %227, 2
  %229 = icmp eq i64 %227, 0
  %230 = select i1 %229, i64 1, i64 %228
  %231 = icmp ugt i64 %230, 2305843009213693951
  br i1 %231, label %232, label %233

232:                                              ; preds = %226
  call void @abort() #12
  unreachable

233:                                              ; preds = %226
  %234 = lshr i64 %230, 2
  %235 = shl i64 %230, 3
  %236 = call i8* @_Znwm(i64 %235) #11
  %237 = bitcast i8* %236 to double**
  %238 = ptrtoint i8* %236 to i64
  %239 = getelementptr inbounds double*, double** %237, i64 %234
  %240 = ptrtoint double** %239 to i64
  %241 = getelementptr inbounds double*, double** %237, i64 %230
  %242 = ptrtoint double** %241 to i64
  %243 = ptrtoint double** %195 to i64
  %244 = ptrtoint double** %196 to i64
  %245 = sub i64 %244, %243
  %246 = ashr exact i64 %245, 3
  %247 = getelementptr inbounds double*, double** %239, i64 %246
  %248 = icmp eq i64 %245, 0
  br i1 %248, label %324, label %249

249:                                              ; preds = %233
  %250 = add i64 %245, -8
  %251 = lshr i64 %250, 3
  %252 = add nuw nsw i64 %251, 1
  %253 = and i64 %252, 7
  %254 = icmp eq i64 %253, 0
  br i1 %254, label %270, label %255

255:                                              ; preds = %249, %255
  %256 = phi double** [ %263, %255 ], [ %239, %249 ]
  %257 = phi i64 [ %264, %255 ], [ %240, %249 ]
  %258 = phi double** [ %265, %255 ], [ %195, %249 ]
  %259 = phi i64 [ %266, %255 ], [ %253, %249 ]
  %260 = bitcast double** %258 to i64*
  %261 = load i64, i64* %260, align 8
  %262 = inttoptr i64 %257 to i64*
  store i64 %261, i64* %262, align 8
  %263 = getelementptr inbounds double*, double** %256, i64 1
  %264 = ptrtoint double** %263 to i64
  %265 = getelementptr inbounds double*, double** %258, i64 1
  %266 = add i64 %259, -1
  %267 = icmp eq i64 %266, 0
  br i1 %267, label %268, label %255, !llvm.loop !5

268:                                              ; preds = %255
  %269 = ptrtoint double** %263 to i64
  br label %270

270:                                              ; preds = %249, %268
  %271 = phi double** [ %239, %249 ], [ %263, %268 ]
  %272 = phi i64 [ %240, %249 ], [ %269, %268 ]
  %273 = phi double** [ %195, %249 ], [ %265, %268 ]
  %274 = icmp ult i64 %250, 56
  br i1 %274, label %321, label %275

275:                                              ; preds = %270, %275
  %276 = phi double** [ %317, %275 ], [ %271, %270 ]
  %277 = phi i64 [ %318, %275 ], [ %272, %270 ]
  %278 = phi double** [ %319, %275 ], [ %273, %270 ]
  %279 = bitcast double** %278 to i64*
  %280 = load i64, i64* %279, align 8
  %281 = inttoptr i64 %277 to i64*
  store i64 %280, i64* %281, align 8
  %282 = getelementptr inbounds double*, double** %276, i64 1
  %283 = getelementptr inbounds double*, double** %278, i64 1
  %284 = bitcast double** %283 to i64*
  %285 = load i64, i64* %284, align 8
  %286 = bitcast double** %282 to i64*
  store i64 %285, i64* %286, align 8
  %287 = getelementptr inbounds double*, double** %276, i64 2
  %288 = getelementptr inbounds double*, double** %278, i64 2
  %289 = bitcast double** %288 to i64*
  %290 = load i64, i64* %289, align 8
  %291 = bitcast double** %287 to i64*
  store i64 %290, i64* %291, align 8
  %292 = getelementptr inbounds double*, double** %276, i64 3
  %293 = getelementptr inbounds double*, double** %278, i64 3
  %294 = bitcast double** %293 to i64*
  %295 = load i64, i64* %294, align 8
  %296 = bitcast double** %292 to i64*
  store i64 %295, i64* %296, align 8
  %297 = getelementptr inbounds double*, double** %276, i64 4
  %298 = getelementptr inbounds double*, double** %278, i64 4
  %299 = bitcast double** %298 to i64*
  %300 = load i64, i64* %299, align 8
  %301 = bitcast double** %297 to i64*
  store i64 %300, i64* %301, align 8
  %302 = getelementptr inbounds double*, double** %276, i64 5
  %303 = getelementptr inbounds double*, double** %278, i64 5
  %304 = bitcast double** %303 to i64*
  %305 = load i64, i64* %304, align 8
  %306 = bitcast double** %302 to i64*
  store i64 %305, i64* %306, align 8
  %307 = getelementptr inbounds double*, double** %276, i64 6
  %308 = getelementptr inbounds double*, double** %278, i64 6
  %309 = bitcast double** %308 to i64*
  %310 = load i64, i64* %309, align 8
  %311 = bitcast double** %307 to i64*
  store i64 %310, i64* %311, align 8
  %312 = getelementptr inbounds double*, double** %276, i64 7
  %313 = getelementptr inbounds double*, double** %278, i64 7
  %314 = bitcast double** %313 to i64*
  %315 = load i64, i64* %314, align 8
  %316 = bitcast double** %312 to i64*
  store i64 %315, i64* %316, align 8
  %317 = getelementptr inbounds double*, double** %276, i64 8
  %318 = ptrtoint double** %317 to i64
  %319 = getelementptr inbounds double*, double** %278, i64 8
  %320 = icmp eq double** %247, %317
  br i1 %320, label %321, label %275

321:                                              ; preds = %275, %270
  %322 = ptrtoint double** %247 to i64
  %323 = load double**, double*** %202, align 8
  br label %324

324:                                              ; preds = %321, %233
  %325 = phi double** [ %323, %321 ], [ %203, %233 ]
  %326 = phi i64 [ %322, %321 ], [ %240, %233 ]
  store i64 %238, i64* %175, align 8
  store i64 %240, i64* %168, align 8
  store i64 %326, i64* %165, align 8
  store i64 %242, i64* %173, align 8
  %327 = icmp eq double** %325, null
  %328 = inttoptr i64 %326 to i64*
  br i1 %327, label %333, label %329

329:                                              ; preds = %324
  %330 = bitcast double** %325 to i8*
  call void @_ZdlPv(i8* %330) #11
  %331 = bitcast double*** %164 to i64**
  %332 = load i64*, i64** %331, align 8
  br label %333

333:                                              ; preds = %188, %221, %324, %329
  %334 = phi i64* [ %332, %329 ], [ %328, %324 ], [ %225, %221 ], [ %200, %188 ]
  store i64 %194, i64* %334, align 8
  %335 = load double**, double*** %164, align 8
  %336 = getelementptr inbounds double*, double** %335, i64 1
  store double** %336, double*** %164, align 8
  br label %460

337:                                              ; preds = %162
  %338 = bitcast %"struct.std::__1::__split_buffer.12"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %338) #10
  %339 = getelementptr inbounds %"struct.std::__1::__split_buffer.12", %"struct.std::__1::__split_buffer.12"* %4, i64 0, i32 1
  %340 = getelementptr inbounds %"struct.std::__1::__split_buffer.12", %"struct.std::__1::__split_buffer.12"* %4, i64 0, i32 2
  %341 = getelementptr inbounds %"struct.std::__1::__split_buffer.12", %"struct.std::__1::__split_buffer.12"* %4, i64 0, i32 3, i32 0, i32 0
  %342 = getelementptr inbounds %"struct.std::__1::__split_buffer.12", %"struct.std::__1::__split_buffer.12"* %4, i64 0, i32 3, i32 1, i32 0
  %343 = ashr exact i64 %177, 2
  %344 = icmp eq i64 %177, 0
  %345 = select i1 %344, i64 1, i64 %343
  %346 = getelementptr inbounds %"class.std::__1::deque", %"class.std::__1::deque"* %0, i64 0, i32 0, i32 0, i32 3
  %347 = bitcast %"struct.std::__1::__split_buffer.12"* %4 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %347, i8 -86, i64 24, i1 false)
  store double** null, double*** %341, align 8
  %348 = bitcast %"class.std::__1::allocator"** %342 to %"class.std::__1::__compressed_pair"**
  store %"class.std::__1::__compressed_pair"* %346, %"class.std::__1::__compressed_pair"** %348, align 8
  %349 = icmp ugt i64 %345, 2305843009213693951
  br i1 %349, label %350, label %351

350:                                              ; preds = %337
  tail call void @abort() #12
  unreachable

351:                                              ; preds = %337
  %352 = shl i64 %345, 3
  %353 = tail call i8* @_Znwm(i64 %352) #11
  %354 = bitcast i8* %353 to double**
  %355 = bitcast %"struct.std::__1::__split_buffer.12"* %4 to i8**
  store i8* %353, i8** %355, align 8
  %356 = getelementptr inbounds double*, double** %354, i64 %171
  store double** %356, double*** %340, align 8
  store double** %356, double*** %339, align 8
  %357 = getelementptr inbounds double*, double** %354, i64 %345
  store double** %357, double*** %341, align 8
  %358 = tail call i8* @_Znwm(i64 4096) #11
  %359 = ptrtoint i8* %358 to i64
  %360 = icmp eq i64 %171, %345
  %361 = ptrtoint double** %357 to i64
  %362 = ptrtoint i8* %353 to i64
  %363 = ptrtoint double** %356 to i64
  br i1 %360, label %364, label %398

364:                                              ; preds = %351
  %365 = icmp ugt double** %356, %354
  br i1 %365, label %366, label %373

366:                                              ; preds = %364
  %367 = sub i64 %363, %362
  %368 = ashr exact i64 %367, 3
  %369 = add nsw i64 %368, 1
  %370 = sdiv i64 %369, -2
  %371 = getelementptr inbounds double*, double** %356, i64 %370
  store double** %371, double*** %340, align 8
  store double** %371, double*** %339, align 8
  %372 = ptrtoint double** %371 to i64
  br label %398

373:                                              ; preds = %364
  %374 = sub i64 %361, %362
  %375 = ashr exact i64 %374, 2
  %376 = icmp eq i64 %374, 0
  %377 = select i1 %376, i64 1, i64 %375
  %378 = icmp ugt i64 %377, 2305843009213693951
  br i1 %378, label %379, label %380

379:                                              ; preds = %373
  tail call void @abort() #12
  unreachable

380:                                              ; preds = %373
  %381 = bitcast %"struct.std::__1::__split_buffer.12"* %4 to i64*
  %382 = bitcast double*** %341 to i64*
  %383 = lshr i64 %377, 2
  %384 = shl i64 %377, 3
  %385 = tail call i8* @_Znwm(i64 %384) #11
  %386 = bitcast i8* %385 to double**
  %387 = ptrtoint i8* %385 to i64
  %388 = getelementptr inbounds double*, double** %386, i64 %383
  %389 = ptrtoint double** %388 to i64
  %390 = getelementptr inbounds double*, double** %386, i64 %377
  %391 = ptrtoint double** %390 to i64
  store i64 %387, i64* %381, align 8
  %392 = bitcast double*** %339 to i64*
  store i64 %389, i64* %392, align 8
  %393 = bitcast double*** %340 to i64*
  store i64 %389, i64* %393, align 8
  store i64 %391, i64* %382, align 8
  tail call void @_ZdlPv(i8* nonnull %353) #11
  %394 = load double**, double*** %164, align 8
  %395 = load double**, double*** %167, align 8
  %396 = ptrtoint double** %395 to i64
  %397 = ptrtoint double** %394 to i64
  br label %398

398:                                              ; preds = %351, %366, %380
  %399 = phi i64 [ %391, %380 ], [ %361, %366 ], [ %361, %351 ]
  %400 = phi i64 [ %397, %380 ], [ %166, %366 ], [ %166, %351 ]
  %401 = phi i64 [ %389, %380 ], [ %372, %366 ], [ %363, %351 ]
  %402 = phi i64 [ %396, %380 ], [ %169, %366 ], [ %169, %351 ]
  %403 = phi i64 [ %387, %380 ], [ %362, %366 ], [ %362, %351 ]
  %404 = phi double** [ %395, %380 ], [ %181, %366 ], [ %181, %351 ]
  %405 = phi double** [ %394, %380 ], [ %180, %366 ], [ %180, %351 ]
  %406 = phi double** [ %388, %380 ], [ %371, %366 ], [ %356, %351 ]
  %407 = bitcast double** %406 to i64*
  store i64 %359, i64* %407, align 8
  %408 = getelementptr inbounds double*, double** %406, i64 1
  store double** %408, double*** %340, align 8
  %409 = icmp eq double** %405, %404
  br i1 %409, label %410, label %455

410:                                              ; preds = %398
  %411 = ptrtoint double** %408 to i64
  %412 = bitcast %"struct.std::__1::__split_buffer.12"* %4 to i64*
  %413 = bitcast double*** %339 to i64*
  %414 = bitcast double*** %340 to i64*
  %415 = bitcast double*** %341 to i64*
  br label %427

416:                                              ; preds = %455
  %417 = ptrtoint double** %458 to i64
  %418 = bitcast %"struct.std::__1::__split_buffer.12"* %4 to i64*
  %419 = load i64, i64* %418, align 8
  %420 = bitcast double*** %339 to i64*
  %421 = load i64, i64* %420, align 8
  %422 = load i64, i64* %165, align 8
  %423 = bitcast double*** %340 to i64*
  %424 = load i64, i64* %423, align 8
  %425 = bitcast double*** %341 to i64*
  %426 = load i64, i64* %425, align 8
  br label %427

427:                                              ; preds = %410, %416
  %428 = phi i64* [ %415, %410 ], [ %425, %416 ]
  %429 = phi i64* [ %414, %410 ], [ %423, %416 ]
  %430 = phi i64* [ %413, %410 ], [ %420, %416 ]
  %431 = phi i64* [ %412, %410 ], [ %418, %416 ]
  %432 = phi i64 [ %399, %410 ], [ %426, %416 ]
  %433 = phi i64 [ %411, %410 ], [ %424, %416 ]
  %434 = phi i64 [ %400, %410 ], [ %422, %416 ]
  %435 = phi i64 [ %401, %410 ], [ %421, %416 ]
  %436 = phi i64 [ %402, %410 ], [ %417, %416 ]
  %437 = phi i64 [ %403, %410 ], [ %419, %416 ]
  %438 = load i64, i64* %175, align 8
  store i64 %437, i64* %175, align 8
  store i64 %438, i64* %431, align 8
  store i64 %435, i64* %168, align 8
  store i64 %436, i64* %430, align 8
  store i64 %433, i64* %165, align 8
  store i64 %434, i64* %429, align 8
  %439 = load i64, i64* %173, align 8
  store i64 %432, i64* %173, align 8
  store i64 %439, i64* %428, align 8
  %440 = inttoptr i64 %436 to double**
  %441 = inttoptr i64 %434 to double**
  %442 = icmp eq double** %441, %440
  br i1 %442, label %450, label %443

443:                                              ; preds = %427
  %444 = getelementptr double*, double** %441, i64 -1
  %445 = ptrtoint double** %444 to i64
  %446 = sub i64 %445, %436
  %447 = lshr i64 %446, 3
  %448 = xor i64 %447, -1
  %449 = getelementptr double*, double** %441, i64 %448
  store double** %449, double*** %340, align 8
  br label %450

450:                                              ; preds = %443, %427
  %451 = icmp eq i64 %438, 0
  br i1 %451, label %454, label %452

452:                                              ; preds = %450
  %453 = inttoptr i64 %438 to i8*
  call void @_ZdlPv(i8* %453) #11
  br label %454

454:                                              ; preds = %450, %452
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %338) #10
  br label %460

455:                                              ; preds = %398, %455
  %456 = phi double** [ %457, %455 ], [ %405, %398 ]
  %457 = getelementptr inbounds double*, double** %456, i64 -1
  call void @_ZNSt3__114__split_bufferIPdRNS_9allocatorIS1_EEE10push_frontERKS1_(%"struct.std::__1::__split_buffer.12"* nonnull %4, double** dereferenceable(8) %457)
  %458 = load double**, double*** %167, align 8
  %459 = icmp eq double** %457, %458
  br i1 %459, label %416, label %455

460:                                              ; preds = %454, %333, %184, %158
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__114__split_bufferIPdNS_9allocatorIS1_EEE9push_backEOS1_(%"struct.std::__1::__split_buffer"*, double** dereferenceable(8)) local_unnamed_addr #0 comdat align 2 {
  %3 = getelementptr inbounds %"struct.std::__1::__split_buffer", %"struct.std::__1::__split_buffer"* %0, i64 0, i32 2
  %4 = load double**, double*** %3, align 8
  %5 = getelementptr inbounds %"struct.std::__1::__split_buffer", %"struct.std::__1::__split_buffer"* %0, i64 0, i32 3, i32 0, i32 0
  %6 = load double**, double*** %5, align 8
  %7 = icmp eq double** %4, %6
  %8 = ptrtoint double** %6 to i64
  %9 = bitcast double** %4 to i64*
  br i1 %7, label %10, label %148

10:                                               ; preds = %2
  %11 = getelementptr inbounds %"struct.std::__1::__split_buffer", %"struct.std::__1::__split_buffer"* %0, i64 0, i32 1
  %12 = load double**, double*** %11, align 8
  %13 = getelementptr inbounds %"struct.std::__1::__split_buffer", %"struct.std::__1::__split_buffer"* %0, i64 0, i32 0
  %14 = load double**, double*** %13, align 8
  %15 = icmp ugt double** %12, %14
  %16 = ptrtoint double** %14 to i64
  br i1 %15, label %17, label %37

17:                                               ; preds = %10
  %18 = ptrtoint double** %12 to i64
  %19 = sub i64 %18, %16
  %20 = ashr exact i64 %19, 3
  %21 = add nsw i64 %20, 1
  %22 = sdiv i64 %21, -2
  %23 = getelementptr inbounds double*, double** %12, i64 %22
  %24 = ptrtoint double** %4 to i64
  %25 = sub i64 %24, %18
  %26 = ashr exact i64 %25, 3
  %27 = icmp eq i64 %25, 0
  br i1 %27, label %32, label %28

28:                                               ; preds = %17
  %29 = bitcast double** %23 to i8*
  %30 = bitcast double** %12 to i8*
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* align 8 %29, i8* align 8 %30, i64 %25, i1 false) #10
  %31 = load double**, double*** %11, align 8
  br label %32

32:                                               ; preds = %17, %28
  %33 = phi double** [ %12, %17 ], [ %31, %28 ]
  %34 = getelementptr inbounds double*, double** %23, i64 %26
  store double** %34, double*** %3, align 8
  %35 = getelementptr inbounds double*, double** %33, i64 %22
  store double** %35, double*** %11, align 8
  %36 = bitcast double** %34 to i64*
  br label %148

37:                                               ; preds = %10
  %38 = bitcast double*** %5 to i64*
  %39 = bitcast %"struct.std::__1::__split_buffer"* %0 to i64*
  %40 = sub i64 %8, %16
  %41 = ashr exact i64 %40, 2
  %42 = icmp eq i64 %40, 0
  %43 = select i1 %42, i64 1, i64 %41
  %44 = icmp ugt i64 %43, 2305843009213693951
  br i1 %44, label %45, label %46

45:                                               ; preds = %37
  tail call void @abort() #12
  unreachable

46:                                               ; preds = %37
  %47 = lshr i64 %43, 2
  %48 = shl i64 %43, 3
  %49 = tail call i8* @_Znwm(i64 %48) #11
  %50 = bitcast i8* %49 to double**
  %51 = ptrtoint i8* %49 to i64
  %52 = getelementptr inbounds double*, double** %50, i64 %47
  %53 = ptrtoint double** %52 to i64
  %54 = getelementptr inbounds double*, double** %50, i64 %43
  %55 = ptrtoint double** %54 to i64
  %56 = ptrtoint double** %12 to i64
  %57 = ptrtoint double** %4 to i64
  %58 = sub i64 %57, %56
  %59 = ashr exact i64 %58, 3
  %60 = getelementptr inbounds double*, double** %52, i64 %59
  %61 = icmp eq i64 %58, 0
  br i1 %61, label %137, label %62

62:                                               ; preds = %46
  %63 = add i64 %58, -8
  %64 = lshr i64 %63, 3
  %65 = add nuw nsw i64 %64, 1
  %66 = and i64 %65, 7
  %67 = icmp eq i64 %66, 0
  br i1 %67, label %83, label %68

68:                                               ; preds = %62, %68
  %69 = phi double** [ %76, %68 ], [ %52, %62 ]
  %70 = phi i64 [ %77, %68 ], [ %53, %62 ]
  %71 = phi double** [ %78, %68 ], [ %12, %62 ]
  %72 = phi i64 [ %79, %68 ], [ %66, %62 ]
  %73 = bitcast double** %71 to i64*
  %74 = load i64, i64* %73, align 8
  %75 = inttoptr i64 %70 to i64*
  store i64 %74, i64* %75, align 8
  %76 = getelementptr inbounds double*, double** %69, i64 1
  %77 = ptrtoint double** %76 to i64
  %78 = getelementptr inbounds double*, double** %71, i64 1
  %79 = add i64 %72, -1
  %80 = icmp eq i64 %79, 0
  br i1 %80, label %81, label %68, !llvm.loop !6

81:                                               ; preds = %68
  %82 = ptrtoint double** %76 to i64
  br label %83

83:                                               ; preds = %62, %81
  %84 = phi double** [ %52, %62 ], [ %76, %81 ]
  %85 = phi i64 [ %53, %62 ], [ %82, %81 ]
  %86 = phi double** [ %12, %62 ], [ %78, %81 ]
  %87 = icmp ult i64 %63, 56
  br i1 %87, label %134, label %88

88:                                               ; preds = %83, %88
  %89 = phi double** [ %130, %88 ], [ %84, %83 ]
  %90 = phi i64 [ %131, %88 ], [ %85, %83 ]
  %91 = phi double** [ %132, %88 ], [ %86, %83 ]
  %92 = bitcast double** %91 to i64*
  %93 = load i64, i64* %92, align 8
  %94 = inttoptr i64 %90 to i64*
  store i64 %93, i64* %94, align 8
  %95 = getelementptr inbounds double*, double** %89, i64 1
  %96 = getelementptr inbounds double*, double** %91, i64 1
  %97 = bitcast double** %96 to i64*
  %98 = load i64, i64* %97, align 8
  %99 = bitcast double** %95 to i64*
  store i64 %98, i64* %99, align 8
  %100 = getelementptr inbounds double*, double** %89, i64 2
  %101 = getelementptr inbounds double*, double** %91, i64 2
  %102 = bitcast double** %101 to i64*
  %103 = load i64, i64* %102, align 8
  %104 = bitcast double** %100 to i64*
  store i64 %103, i64* %104, align 8
  %105 = getelementptr inbounds double*, double** %89, i64 3
  %106 = getelementptr inbounds double*, double** %91, i64 3
  %107 = bitcast double** %106 to i64*
  %108 = load i64, i64* %107, align 8
  %109 = bitcast double** %105 to i64*
  store i64 %108, i64* %109, align 8
  %110 = getelementptr inbounds double*, double** %89, i64 4
  %111 = getelementptr inbounds double*, double** %91, i64 4
  %112 = bitcast double** %111 to i64*
  %113 = load i64, i64* %112, align 8
  %114 = bitcast double** %110 to i64*
  store i64 %113, i64* %114, align 8
  %115 = getelementptr inbounds double*, double** %89, i64 5
  %116 = getelementptr inbounds double*, double** %91, i64 5
  %117 = bitcast double** %116 to i64*
  %118 = load i64, i64* %117, align 8
  %119 = bitcast double** %115 to i64*
  store i64 %118, i64* %119, align 8
  %120 = getelementptr inbounds double*, double** %89, i64 6
  %121 = getelementptr inbounds double*, double** %91, i64 6
  %122 = bitcast double** %121 to i64*
  %123 = load i64, i64* %122, align 8
  %124 = bitcast double** %120 to i64*
  store i64 %123, i64* %124, align 8
  %125 = getelementptr inbounds double*, double** %89, i64 7
  %126 = getelementptr inbounds double*, double** %91, i64 7
  %127 = bitcast double** %126 to i64*
  %128 = load i64, i64* %127, align 8
  %129 = bitcast double** %125 to i64*
  store i64 %128, i64* %129, align 8
  %130 = getelementptr inbounds double*, double** %89, i64 8
  %131 = ptrtoint double** %130 to i64
  %132 = getelementptr inbounds double*, double** %91, i64 8
  %133 = icmp eq double** %60, %130
  br i1 %133, label %134, label %88

134:                                              ; preds = %88, %83
  %135 = ptrtoint double** %60 to i64
  %136 = load double**, double*** %13, align 8
  br label %137

137:                                              ; preds = %46, %134
  %138 = phi double** [ %136, %134 ], [ %14, %46 ]
  %139 = phi i64 [ %135, %134 ], [ %53, %46 ]
  store i64 %51, i64* %39, align 8
  %140 = bitcast double*** %11 to i64*
  store i64 %53, i64* %140, align 8
  %141 = bitcast double*** %3 to i64*
  store i64 %139, i64* %141, align 8
  store i64 %55, i64* %38, align 8
  %142 = icmp eq double** %138, null
  %143 = inttoptr i64 %139 to i64*
  br i1 %142, label %148, label %144

144:                                              ; preds = %137
  %145 = bitcast double** %138 to i8*
  tail call void @_ZdlPv(i8* %145) #11
  %146 = bitcast double*** %3 to i64**
  %147 = load i64*, i64** %146, align 8
  br label %148

148:                                              ; preds = %144, %137, %32, %2
  %149 = phi i64* [ %147, %144 ], [ %143, %137 ], [ %36, %32 ], [ %9, %2 ]
  %150 = bitcast double** %1 to i64*
  %151 = load i64, i64* %150, align 8
  store i64 %151, i64* %149, align 8
  %152 = load double**, double*** %3, align 8
  %153 = getelementptr inbounds double*, double** %152, i64 1
  store double** %153, double*** %3, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__114__split_bufferIPdNS_9allocatorIS1_EEE10push_frontEOS1_(%"struct.std::__1::__split_buffer"*, double** dereferenceable(8)) local_unnamed_addr #0 comdat align 2 {
  %3 = getelementptr inbounds %"struct.std::__1::__split_buffer", %"struct.std::__1::__split_buffer"* %0, i64 0, i32 1
  %4 = load double**, double*** %3, align 8
  %5 = getelementptr inbounds %"struct.std::__1::__split_buffer", %"struct.std::__1::__split_buffer"* %0, i64 0, i32 0
  %6 = load double**, double*** %5, align 8
  %7 = icmp eq double** %4, %6
  %8 = ptrtoint double** %6 to i64
  br i1 %7, label %9, label %147

9:                                                ; preds = %2
  %10 = getelementptr inbounds %"struct.std::__1::__split_buffer", %"struct.std::__1::__split_buffer"* %0, i64 0, i32 2
  %11 = load double**, double*** %10, align 8
  %12 = getelementptr inbounds %"struct.std::__1::__split_buffer", %"struct.std::__1::__split_buffer"* %0, i64 0, i32 3, i32 0, i32 0
  %13 = load double**, double*** %12, align 8
  %14 = icmp ult double** %11, %13
  %15 = bitcast double*** %12 to i64*
  %16 = ptrtoint double** %13 to i64
  br i1 %14, label %17, label %38

17:                                               ; preds = %9
  %18 = ptrtoint double** %11 to i64
  %19 = sub i64 %16, %18
  %20 = ashr exact i64 %19, 3
  %21 = add nsw i64 %20, 1
  %22 = sdiv i64 %21, 2
  %23 = getelementptr inbounds double*, double** %11, i64 %22
  %24 = ptrtoint double** %4 to i64
  %25 = sub i64 %18, %24
  %26 = icmp eq i64 %25, 0
  br i1 %26, label %34, label %27

27:                                               ; preds = %17
  %28 = ashr exact i64 %25, 3
  %29 = sub nsw i64 0, %28
  %30 = getelementptr inbounds double*, double** %23, i64 %29
  %31 = bitcast double** %30 to i8*
  %32 = bitcast double** %4 to i8*
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* align 8 %31, i8* align 8 %32, i64 %25, i1 false) #10
  %33 = load double**, double*** %10, align 8
  br label %34

34:                                               ; preds = %17, %27
  %35 = phi double** [ %33, %27 ], [ %11, %17 ]
  %36 = phi double** [ %30, %27 ], [ %23, %17 ]
  store double** %36, double*** %3, align 8
  %37 = getelementptr inbounds double*, double** %35, i64 %22
  store double** %37, double*** %10, align 8
  br label %147

38:                                               ; preds = %9
  %39 = bitcast %"struct.std::__1::__split_buffer"* %0 to i64*
  %40 = sub i64 %16, %8
  %41 = ashr exact i64 %40, 2
  %42 = icmp eq i64 %40, 0
  %43 = select i1 %42, i64 1, i64 %41
  %44 = icmp ugt i64 %43, 2305843009213693951
  br i1 %44, label %45, label %46

45:                                               ; preds = %38
  tail call void @abort() #12
  unreachable

46:                                               ; preds = %38
  %47 = add nuw nsw i64 %43, 3
  %48 = lshr i64 %47, 2
  %49 = shl i64 %43, 3
  %50 = tail call i8* @_Znwm(i64 %49) #11
  %51 = bitcast i8* %50 to double**
  %52 = ptrtoint i8* %50 to i64
  %53 = getelementptr inbounds double*, double** %51, i64 %48
  %54 = ptrtoint double** %53 to i64
  %55 = getelementptr inbounds double*, double** %51, i64 %43
  %56 = ptrtoint double** %55 to i64
  %57 = ptrtoint double** %4 to i64
  %58 = ptrtoint double** %11 to i64
  %59 = sub i64 %58, %57
  %60 = ashr exact i64 %59, 3
  %61 = getelementptr inbounds double*, double** %53, i64 %60
  %62 = icmp eq i64 %59, 0
  br i1 %62, label %138, label %63

63:                                               ; preds = %46
  %64 = add i64 %59, -8
  %65 = lshr i64 %64, 3
  %66 = add nuw nsw i64 %65, 1
  %67 = and i64 %66, 7
  %68 = icmp eq i64 %67, 0
  br i1 %68, label %84, label %69

69:                                               ; preds = %63, %69
  %70 = phi double** [ %77, %69 ], [ %53, %63 ]
  %71 = phi i64 [ %78, %69 ], [ %54, %63 ]
  %72 = phi double** [ %79, %69 ], [ %4, %63 ]
  %73 = phi i64 [ %80, %69 ], [ %67, %63 ]
  %74 = bitcast double** %72 to i64*
  %75 = load i64, i64* %74, align 8
  %76 = inttoptr i64 %71 to i64*
  store i64 %75, i64* %76, align 8
  %77 = getelementptr inbounds double*, double** %70, i64 1
  %78 = ptrtoint double** %77 to i64
  %79 = getelementptr inbounds double*, double** %72, i64 1
  %80 = add i64 %73, -1
  %81 = icmp eq i64 %80, 0
  br i1 %81, label %82, label %69, !llvm.loop !7

82:                                               ; preds = %69
  %83 = ptrtoint double** %77 to i64
  br label %84

84:                                               ; preds = %63, %82
  %85 = phi double** [ %53, %63 ], [ %77, %82 ]
  %86 = phi i64 [ %54, %63 ], [ %83, %82 ]
  %87 = phi double** [ %4, %63 ], [ %79, %82 ]
  %88 = icmp ult i64 %64, 56
  br i1 %88, label %135, label %89

89:                                               ; preds = %84, %89
  %90 = phi double** [ %131, %89 ], [ %85, %84 ]
  %91 = phi i64 [ %132, %89 ], [ %86, %84 ]
  %92 = phi double** [ %133, %89 ], [ %87, %84 ]
  %93 = bitcast double** %92 to i64*
  %94 = load i64, i64* %93, align 8
  %95 = inttoptr i64 %91 to i64*
  store i64 %94, i64* %95, align 8
  %96 = getelementptr inbounds double*, double** %90, i64 1
  %97 = getelementptr inbounds double*, double** %92, i64 1
  %98 = bitcast double** %97 to i64*
  %99 = load i64, i64* %98, align 8
  %100 = bitcast double** %96 to i64*
  store i64 %99, i64* %100, align 8
  %101 = getelementptr inbounds double*, double** %90, i64 2
  %102 = getelementptr inbounds double*, double** %92, i64 2
  %103 = bitcast double** %102 to i64*
  %104 = load i64, i64* %103, align 8
  %105 = bitcast double** %101 to i64*
  store i64 %104, i64* %105, align 8
  %106 = getelementptr inbounds double*, double** %90, i64 3
  %107 = getelementptr inbounds double*, double** %92, i64 3
  %108 = bitcast double** %107 to i64*
  %109 = load i64, i64* %108, align 8
  %110 = bitcast double** %106 to i64*
  store i64 %109, i64* %110, align 8
  %111 = getelementptr inbounds double*, double** %90, i64 4
  %112 = getelementptr inbounds double*, double** %92, i64 4
  %113 = bitcast double** %112 to i64*
  %114 = load i64, i64* %113, align 8
  %115 = bitcast double** %111 to i64*
  store i64 %114, i64* %115, align 8
  %116 = getelementptr inbounds double*, double** %90, i64 5
  %117 = getelementptr inbounds double*, double** %92, i64 5
  %118 = bitcast double** %117 to i64*
  %119 = load i64, i64* %118, align 8
  %120 = bitcast double** %116 to i64*
  store i64 %119, i64* %120, align 8
  %121 = getelementptr inbounds double*, double** %90, i64 6
  %122 = getelementptr inbounds double*, double** %92, i64 6
  %123 = bitcast double** %122 to i64*
  %124 = load i64, i64* %123, align 8
  %125 = bitcast double** %121 to i64*
  store i64 %124, i64* %125, align 8
  %126 = getelementptr inbounds double*, double** %90, i64 7
  %127 = getelementptr inbounds double*, double** %92, i64 7
  %128 = bitcast double** %127 to i64*
  %129 = load i64, i64* %128, align 8
  %130 = bitcast double** %126 to i64*
  store i64 %129, i64* %130, align 8
  %131 = getelementptr inbounds double*, double** %90, i64 8
  %132 = ptrtoint double** %131 to i64
  %133 = getelementptr inbounds double*, double** %92, i64 8
  %134 = icmp eq double** %61, %131
  br i1 %134, label %135, label %89

135:                                              ; preds = %89, %84
  %136 = ptrtoint double** %61 to i64
  %137 = load double**, double*** %5, align 8
  br label %138

138:                                              ; preds = %46, %135
  %139 = phi double** [ %137, %135 ], [ %4, %46 ]
  %140 = phi i64 [ %136, %135 ], [ %54, %46 ]
  store i64 %52, i64* %39, align 8
  %141 = bitcast double*** %3 to i64*
  store i64 %54, i64* %141, align 8
  %142 = bitcast double*** %10 to i64*
  store i64 %140, i64* %142, align 8
  store i64 %56, i64* %15, align 8
  %143 = icmp eq double** %139, null
  br i1 %143, label %147, label %144

144:                                              ; preds = %138
  %145 = bitcast double** %139 to i8*
  tail call void @_ZdlPv(i8* %145) #11
  %146 = load double**, double*** %3, align 8
  br label %147

147:                                              ; preds = %144, %138, %34, %2
  %148 = phi double** [ %146, %144 ], [ %53, %138 ], [ %36, %34 ], [ %4, %2 ]
  %149 = getelementptr inbounds double*, double** %148, i64 -1
  %150 = bitcast double** %1 to i64*
  %151 = load i64, i64* %150, align 8
  %152 = bitcast double** %149 to i64*
  store i64 %151, i64* %152, align 8
  %153 = load double**, double*** %3, align 8
  %154 = getelementptr inbounds double*, double** %153, i64 -1
  store double** %154, double*** %3, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__114__split_bufferIPdRNS_9allocatorIS1_EEE10push_frontERKS1_(%"struct.std::__1::__split_buffer.12"*, double** dereferenceable(8)) local_unnamed_addr #0 comdat align 2 {
  %3 = getelementptr inbounds %"struct.std::__1::__split_buffer.12", %"struct.std::__1::__split_buffer.12"* %0, i64 0, i32 1
  %4 = load double**, double*** %3, align 8
  %5 = getelementptr inbounds %"struct.std::__1::__split_buffer.12", %"struct.std::__1::__split_buffer.12"* %0, i64 0, i32 0
  %6 = load double**, double*** %5, align 8
  %7 = icmp eq double** %4, %6
  %8 = ptrtoint double** %6 to i64
  br i1 %7, label %9, label %147

9:                                                ; preds = %2
  %10 = getelementptr inbounds %"struct.std::__1::__split_buffer.12", %"struct.std::__1::__split_buffer.12"* %0, i64 0, i32 2
  %11 = load double**, double*** %10, align 8
  %12 = getelementptr inbounds %"struct.std::__1::__split_buffer.12", %"struct.std::__1::__split_buffer.12"* %0, i64 0, i32 3, i32 0, i32 0
  %13 = load double**, double*** %12, align 8
  %14 = icmp ult double** %11, %13
  %15 = bitcast double*** %12 to i64*
  %16 = ptrtoint double** %13 to i64
  br i1 %14, label %17, label %38

17:                                               ; preds = %9
  %18 = ptrtoint double** %11 to i64
  %19 = sub i64 %16, %18
  %20 = ashr exact i64 %19, 3
  %21 = add nsw i64 %20, 1
  %22 = sdiv i64 %21, 2
  %23 = getelementptr inbounds double*, double** %11, i64 %22
  %24 = ptrtoint double** %4 to i64
  %25 = sub i64 %18, %24
  %26 = icmp eq i64 %25, 0
  br i1 %26, label %34, label %27

27:                                               ; preds = %17
  %28 = ashr exact i64 %25, 3
  %29 = sub nsw i64 0, %28
  %30 = getelementptr inbounds double*, double** %23, i64 %29
  %31 = bitcast double** %30 to i8*
  %32 = bitcast double** %4 to i8*
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* align 8 %31, i8* align 8 %32, i64 %25, i1 false) #10
  %33 = load double**, double*** %10, align 8
  br label %34

34:                                               ; preds = %17, %27
  %35 = phi double** [ %33, %27 ], [ %11, %17 ]
  %36 = phi double** [ %30, %27 ], [ %23, %17 ]
  store double** %36, double*** %3, align 8
  %37 = getelementptr inbounds double*, double** %35, i64 %22
  store double** %37, double*** %10, align 8
  br label %147

38:                                               ; preds = %9
  %39 = bitcast %"struct.std::__1::__split_buffer.12"* %0 to i64*
  %40 = sub i64 %16, %8
  %41 = ashr exact i64 %40, 2
  %42 = icmp eq i64 %40, 0
  %43 = select i1 %42, i64 1, i64 %41
  %44 = icmp ugt i64 %43, 2305843009213693951
  br i1 %44, label %45, label %46

45:                                               ; preds = %38
  tail call void @abort() #12
  unreachable

46:                                               ; preds = %38
  %47 = add nuw nsw i64 %43, 3
  %48 = lshr i64 %47, 2
  %49 = shl i64 %43, 3
  %50 = tail call i8* @_Znwm(i64 %49) #11
  %51 = bitcast i8* %50 to double**
  %52 = ptrtoint i8* %50 to i64
  %53 = getelementptr inbounds double*, double** %51, i64 %48
  %54 = ptrtoint double** %53 to i64
  %55 = getelementptr inbounds double*, double** %51, i64 %43
  %56 = ptrtoint double** %55 to i64
  %57 = ptrtoint double** %4 to i64
  %58 = ptrtoint double** %11 to i64
  %59 = sub i64 %58, %57
  %60 = ashr exact i64 %59, 3
  %61 = getelementptr inbounds double*, double** %53, i64 %60
  %62 = icmp eq i64 %59, 0
  br i1 %62, label %138, label %63

63:                                               ; preds = %46
  %64 = add i64 %59, -8
  %65 = lshr i64 %64, 3
  %66 = add nuw nsw i64 %65, 1
  %67 = and i64 %66, 7
  %68 = icmp eq i64 %67, 0
  br i1 %68, label %84, label %69

69:                                               ; preds = %63, %69
  %70 = phi double** [ %77, %69 ], [ %53, %63 ]
  %71 = phi i64 [ %78, %69 ], [ %54, %63 ]
  %72 = phi double** [ %79, %69 ], [ %4, %63 ]
  %73 = phi i64 [ %80, %69 ], [ %67, %63 ]
  %74 = bitcast double** %72 to i64*
  %75 = load i64, i64* %74, align 8
  %76 = inttoptr i64 %71 to i64*
  store i64 %75, i64* %76, align 8
  %77 = getelementptr inbounds double*, double** %70, i64 1
  %78 = ptrtoint double** %77 to i64
  %79 = getelementptr inbounds double*, double** %72, i64 1
  %80 = add i64 %73, -1
  %81 = icmp eq i64 %80, 0
  br i1 %81, label %82, label %69, !llvm.loop !8

82:                                               ; preds = %69
  %83 = ptrtoint double** %77 to i64
  br label %84

84:                                               ; preds = %63, %82
  %85 = phi double** [ %53, %63 ], [ %77, %82 ]
  %86 = phi i64 [ %54, %63 ], [ %83, %82 ]
  %87 = phi double** [ %4, %63 ], [ %79, %82 ]
  %88 = icmp ult i64 %64, 56
  br i1 %88, label %135, label %89

89:                                               ; preds = %84, %89
  %90 = phi double** [ %131, %89 ], [ %85, %84 ]
  %91 = phi i64 [ %132, %89 ], [ %86, %84 ]
  %92 = phi double** [ %133, %89 ], [ %87, %84 ]
  %93 = bitcast double** %92 to i64*
  %94 = load i64, i64* %93, align 8
  %95 = inttoptr i64 %91 to i64*
  store i64 %94, i64* %95, align 8
  %96 = getelementptr inbounds double*, double** %90, i64 1
  %97 = getelementptr inbounds double*, double** %92, i64 1
  %98 = bitcast double** %97 to i64*
  %99 = load i64, i64* %98, align 8
  %100 = bitcast double** %96 to i64*
  store i64 %99, i64* %100, align 8
  %101 = getelementptr inbounds double*, double** %90, i64 2
  %102 = getelementptr inbounds double*, double** %92, i64 2
  %103 = bitcast double** %102 to i64*
  %104 = load i64, i64* %103, align 8
  %105 = bitcast double** %101 to i64*
  store i64 %104, i64* %105, align 8
  %106 = getelementptr inbounds double*, double** %90, i64 3
  %107 = getelementptr inbounds double*, double** %92, i64 3
  %108 = bitcast double** %107 to i64*
  %109 = load i64, i64* %108, align 8
  %110 = bitcast double** %106 to i64*
  store i64 %109, i64* %110, align 8
  %111 = getelementptr inbounds double*, double** %90, i64 4
  %112 = getelementptr inbounds double*, double** %92, i64 4
  %113 = bitcast double** %112 to i64*
  %114 = load i64, i64* %113, align 8
  %115 = bitcast double** %111 to i64*
  store i64 %114, i64* %115, align 8
  %116 = getelementptr inbounds double*, double** %90, i64 5
  %117 = getelementptr inbounds double*, double** %92, i64 5
  %118 = bitcast double** %117 to i64*
  %119 = load i64, i64* %118, align 8
  %120 = bitcast double** %116 to i64*
  store i64 %119, i64* %120, align 8
  %121 = getelementptr inbounds double*, double** %90, i64 6
  %122 = getelementptr inbounds double*, double** %92, i64 6
  %123 = bitcast double** %122 to i64*
  %124 = load i64, i64* %123, align 8
  %125 = bitcast double** %121 to i64*
  store i64 %124, i64* %125, align 8
  %126 = getelementptr inbounds double*, double** %90, i64 7
  %127 = getelementptr inbounds double*, double** %92, i64 7
  %128 = bitcast double** %127 to i64*
  %129 = load i64, i64* %128, align 8
  %130 = bitcast double** %126 to i64*
  store i64 %129, i64* %130, align 8
  %131 = getelementptr inbounds double*, double** %90, i64 8
  %132 = ptrtoint double** %131 to i64
  %133 = getelementptr inbounds double*, double** %92, i64 8
  %134 = icmp eq double** %61, %131
  br i1 %134, label %135, label %89

135:                                              ; preds = %89, %84
  %136 = ptrtoint double** %61 to i64
  %137 = load double**, double*** %5, align 8
  br label %138

138:                                              ; preds = %46, %135
  %139 = phi double** [ %137, %135 ], [ %4, %46 ]
  %140 = phi i64 [ %136, %135 ], [ %54, %46 ]
  store i64 %52, i64* %39, align 8
  %141 = bitcast double*** %3 to i64*
  store i64 %54, i64* %141, align 8
  %142 = bitcast double*** %10 to i64*
  store i64 %140, i64* %142, align 8
  store i64 %56, i64* %15, align 8
  %143 = icmp eq double** %139, null
  br i1 %143, label %147, label %144

144:                                              ; preds = %138
  %145 = bitcast double** %139 to i8*
  tail call void @_ZdlPv(i8* %145) #11
  %146 = load double**, double*** %3, align 8
  br label %147

147:                                              ; preds = %144, %138, %34, %2
  %148 = phi double** [ %146, %144 ], [ %53, %138 ], [ %36, %34 ], [ %4, %2 ]
  %149 = getelementptr inbounds double*, double** %148, i64 -1
  %150 = bitcast double** %1 to i64*
  %151 = load i64, i64* %150, align 8
  %152 = bitcast double** %149 to i64*
  store i64 %151, i64* %152, align 8
  %153 = load double**, double*** %3, align 8
  %154 = getelementptr inbounds double*, double** %153, i64 -1
  store double** %154, double*** %3, align 8
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memmove.p0i8.p0i8.i64(i8* nocapture, i8* nocapture readonly, i64, i1 immarg) #1

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind readnone speculatable }
attributes #4 = { nofree nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { noreturn nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #9 = { nobuiltin nofree "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #10 = { nounwind }
attributes #11 = { builtin nounwind }
attributes #12 = { noreturn nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{i8 0, i8 2}
!3 = distinct !{!3, !4}
!4 = !{!"llvm.loop.unroll.disable"}
!5 = distinct !{!5, !4}
!6 = distinct !{!6, !4}
!7 = distinct !{!7, !4}
!8 = distinct !{!8, !4}
