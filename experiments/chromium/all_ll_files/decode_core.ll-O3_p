; ModuleID = '../../third_party/opus/src/silk/decode_core.c'
source_filename = "../../third_party/opus/src/silk/decode_core.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"
module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%struct.silk_decoder_state = type { i32, [320 x i32], [16 x i32], [480 x i16], i32, i8, i32, i32, i32, i32, i32, i32, i32, [16 x i16], i32, i8*, i8*, i32, i32, i32, i16, [3 x i32], i32, [3 x i32], %struct._silk_resampler_state_struct, %struct.silk_NLSF_CB_struct*, %struct.SideInfoIndices, %struct.silk_CNG_struct, i32, i32, i32, %struct.silk_PLC_struct }
%struct._silk_resampler_state_struct = type { [6 x i32], %union.anon, [48 x i16], i32, i32, i32, i32, i32, i32, i32, i32, i16* }
%union.anon = type { [36 x i32] }
%struct.silk_NLSF_CB_struct = type { i16, i16, i16, i16, i8*, i16*, i8*, i8*, i8*, i8*, i8*, i16* }
%struct.SideInfoIndices = type { [4 x i8], [4 x i8], [17 x i8], i16, i8, i8, i8, i8, i8, i8, i8 }
%struct.silk_CNG_struct = type { [320 x i32], [16 x i16], [16 x i32], i32, i32, i32 }
%struct.silk_PLC_struct = type { i32, [5 x i16], [16 x i16], i32, i32, i16, i32, i32, i16, [2 x i32], i32, i32, i32 }
%struct.silk_decoder_control = type { [4 x i32], [4 x i32], [2 x [16 x i16]], [20 x i16], i32 }

@silk_Quantization_Offsets_Q10 = external local_unnamed_addr constant [2 x [2 x i16]], align 2
@.str = private unnamed_addr constant [32 x i8] c"assertion failed: start_idx > 0\00", align 1
@.str.1 = private unnamed_addr constant [46 x i8] c"../../third_party/opus/src/silk/decode_core.c\00", align 1
@.str.2 = private unnamed_addr constant [67 x i8] c"assertion failed: psDec->LPC_order == 10 || psDec->LPC_order == 16\00", align 1

; Function Attrs: nounwind ssp uwtable
define hidden void @silk_decode_core(%struct.silk_decoder_state*, %struct.silk_decoder_control*, i16* nocapture, i16* nocapture readonly, i32) local_unnamed_addr #0 {
  %6 = alloca [16 x i16], align 16
  %7 = bitcast [16 x i16]* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %7)
  %8 = getelementptr inbounds [16 x i16], [16 x i16]* %6, i64 0, i64 0
  %9 = getelementptr inbounds [16 x i16], [16 x i16]* %6, i64 0, i64 1
  %10 = getelementptr inbounds [16 x i16], [16 x i16]* %6, i64 0, i64 2
  %11 = getelementptr inbounds [16 x i16], [16 x i16]* %6, i64 0, i64 3
  %12 = getelementptr inbounds [16 x i16], [16 x i16]* %6, i64 0, i64 4
  %13 = getelementptr inbounds [16 x i16], [16 x i16]* %6, i64 0, i64 5
  %14 = getelementptr inbounds [16 x i16], [16 x i16]* %6, i64 0, i64 6
  %15 = getelementptr inbounds [16 x i16], [16 x i16]* %6, i64 0, i64 7
  %16 = getelementptr inbounds [16 x i16], [16 x i16]* %6, i64 0, i64 8
  %17 = getelementptr inbounds [16 x i16], [16 x i16]* %6, i64 0, i64 9
  %18 = getelementptr inbounds [16 x i16], [16 x i16]* %6, i64 0, i64 10
  %19 = getelementptr inbounds [16 x i16], [16 x i16]* %6, i64 0, i64 11
  %20 = getelementptr inbounds [16 x i16], [16 x i16]* %6, i64 0, i64 12
  %21 = getelementptr inbounds [16 x i16], [16 x i16]* %6, i64 0, i64 13
  %22 = getelementptr inbounds [16 x i16], [16 x i16]* %6, i64 0, i64 14
  %23 = getelementptr inbounds [16 x i16], [16 x i16]* %6, i64 0, i64 15
  %24 = getelementptr inbounds %struct.silk_decoder_state, %struct.silk_decoder_state* %0, i64 0, i32 11
  %25 = bitcast [16 x i16]* %6 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %25, i8 -86, i64 32, i1 false)
  %26 = load i32, i32* %24, align 8
  %27 = sext i32 %26 to i64
  %28 = shl nsw i64 %27, 1
  %29 = alloca i16, i64 %27, align 16
  %30 = bitcast i16* %29 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %30, i8 -86, i64 %28, i1 false)
  %31 = getelementptr inbounds %struct.silk_decoder_state, %struct.silk_decoder_state* %0, i64 0, i32 9
  %32 = load i32, i32* %31, align 8
  %33 = add nsw i32 %32, %26
  %34 = sext i32 %33 to i64
  %35 = shl nsw i64 %34, 2
  %36 = alloca i32, i64 %34, align 16
  %37 = bitcast i32* %36 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %37, i8 -86, i64 %35, i1 false)
  %38 = getelementptr inbounds %struct.silk_decoder_state, %struct.silk_decoder_state* %0, i64 0, i32 10
  %39 = load i32, i32* %38, align 4
  %40 = sext i32 %39 to i64
  %41 = shl nsw i64 %40, 2
  %42 = alloca i32, i64 %40, align 16
  %43 = bitcast i32* %42 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %43, i8 -86, i64 %41, i1 false)
  %44 = add nsw i32 %39, 16
  %45 = sext i32 %44 to i64
  %46 = shl nsw i64 %45, 2
  %47 = alloca i32, i64 %45, align 16
  %48 = bitcast i32* %47 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %48, i8 -86, i64 %46, i1 false)
  %49 = getelementptr inbounds %struct.silk_decoder_state, %struct.silk_decoder_state* %0, i64 0, i32 26, i32 5
  %50 = getelementptr inbounds %struct.silk_decoder_state, %struct.silk_decoder_state* %0, i64 0, i32 26, i32 7
  %51 = load i8, i8* %50, align 1
  %52 = icmp slt i8 %51, 4
  %53 = icmp sgt i32 %32, 0
  br i1 %53, label %54, label %100

54:                                               ; preds = %5
  %55 = getelementptr inbounds %struct.silk_decoder_state, %struct.silk_decoder_state* %0, i64 0, i32 26, i32 10
  %56 = load i8, i8* %55, align 2
  %57 = sext i8 %56 to i32
  %58 = load i8, i8* %49, align 1
  %59 = ashr i8 %58, 1
  %60 = sext i8 %59 to i64
  %61 = getelementptr inbounds %struct.silk_decoder_state, %struct.silk_decoder_state* %0, i64 0, i32 26, i32 6
  %62 = load i8, i8* %61, align 2
  %63 = sext i8 %62 to i64
  %64 = getelementptr inbounds [2 x [2 x i16]], [2 x [2 x i16]]* @silk_Quantization_Offsets_Q10, i64 0, i64 %60, i64 %63
  %65 = load i16, i16* %64, align 2
  %66 = sext i16 %65 to i32
  %67 = shl nsw i32 %66, 4
  br label %68

68:                                               ; preds = %54, %87
  %69 = phi i64 [ 0, %54 ], [ %96, %87 ]
  %70 = phi i32 [ %57, %54 ], [ %95, %87 ]
  %71 = mul i32 %70, 196314165
  %72 = add i32 %71, 907633515
  %73 = getelementptr inbounds i16, i16* %3, i64 %69
  %74 = load i16, i16* %73, align 2
  %75 = sext i16 %74 to i32
  %76 = shl nsw i32 %75, 14
  %77 = getelementptr inbounds %struct.silk_decoder_state, %struct.silk_decoder_state* %0, i64 0, i32 1, i64 %69
  store i32 %76, i32* %77, align 4
  %78 = icmp sgt i16 %74, 0
  br i1 %78, label %79, label %81

79:                                               ; preds = %68
  %80 = add nsw i32 %76, -1280
  br label %85

81:                                               ; preds = %68
  %82 = icmp slt i16 %74, 0
  br i1 %82, label %83, label %87

83:                                               ; preds = %81
  %84 = or i32 %76, 1280
  br label %85

85:                                               ; preds = %79, %83
  %86 = phi i32 [ %84, %83 ], [ %80, %79 ]
  store i32 %86, i32* %77, align 4
  br label %87

87:                                               ; preds = %85, %81
  %88 = phi i32 [ %76, %81 ], [ %86, %85 ]
  %89 = add nsw i32 %88, %67
  %90 = icmp slt i32 %72, 0
  %91 = sub nsw i32 0, %89
  %92 = select i1 %90, i32 %91, i32 %89
  store i32 %92, i32* %77, align 4
  %93 = load i16, i16* %73, align 2
  %94 = sext i16 %93 to i32
  %95 = add i32 %72, %94
  %96 = add nuw nsw i64 %69, 1
  %97 = load i32, i32* %31, align 8
  %98 = sext i32 %97 to i64
  %99 = icmp slt i64 %96, %98
  br i1 %99, label %68, label %100

100:                                              ; preds = %87, %5
  %101 = getelementptr inbounds %struct.silk_decoder_state, %struct.silk_decoder_state* %0, i64 0, i32 2, i64 0
  %102 = bitcast i32* %101 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 16 %48, i8* align 4 %102, i64 64, i1 false)
  %103 = getelementptr inbounds %struct.silk_decoder_state, %struct.silk_decoder_state* %0, i64 0, i32 8
  %104 = load i32, i32* %103, align 4
  %105 = icmp sgt i32 %104, 0
  br i1 %105, label %106, label %934

106:                                              ; preds = %100
  %107 = load i32, i32* %24, align 8
  %108 = getelementptr inbounds %struct.silk_decoder_state, %struct.silk_decoder_state* %0, i64 0, i32 1, i64 0
  %109 = getelementptr inbounds %struct.silk_decoder_state, %struct.silk_decoder_state* %0, i64 0, i32 12
  %110 = getelementptr inbounds %struct.silk_decoder_state, %struct.silk_decoder_state* %0, i64 0, i32 0
  %111 = getelementptr inbounds %struct.silk_decoder_state, %struct.silk_decoder_state* %0, i64 0, i32 28
  %112 = getelementptr inbounds %struct.silk_decoder_state, %struct.silk_decoder_state* %0, i64 0, i32 29
  %113 = getelementptr inbounds %struct.silk_decoder_state, %struct.silk_decoder_state* %0, i64 0, i32 4
  %114 = bitcast i16* %2 to i8*
  %115 = getelementptr inbounds %struct.silk_decoder_control, %struct.silk_decoder_control* %1, i64 0, i32 4
  %116 = getelementptr inbounds i32, i32* %47, i64 1
  %117 = getelementptr inbounds i32, i32* %47, i64 2
  %118 = getelementptr inbounds i32, i32* %47, i64 3
  %119 = getelementptr inbounds i32, i32* %47, i64 4
  %120 = getelementptr inbounds i32, i32* %47, i64 5
  %121 = getelementptr inbounds i32, i32* %47, i64 6
  %122 = getelementptr inbounds i32, i32* %47, i64 7
  %123 = getelementptr inbounds i32, i32* %47, i64 8
  %124 = getelementptr inbounds i32, i32* %47, i64 9
  %125 = getelementptr inbounds i32, i32* %47, i64 10
  %126 = getelementptr inbounds i32, i32* %47, i64 11
  %127 = getelementptr inbounds i32, i32* %47, i64 12
  %128 = getelementptr inbounds i32, i32* %47, i64 13
  %129 = getelementptr inbounds i32, i32* %47, i64 14
  %130 = getelementptr inbounds i32, i32* %47, i64 15
  %131 = getelementptr inbounds i32, i32* %36, i64 -3
  %132 = getelementptr inbounds i32, i32* %36, i64 -3
  %133 = getelementptr inbounds i32, i32* %36, i64 -3
  %134 = getelementptr inbounds i16, i16* %29, i64 -3
  %135 = getelementptr inbounds i32, i32* %36, i64 -3
  br label %136

136:                                              ; preds = %106, %922
  %137 = phi i64 [ 0, %106 ], [ %930, %922 ]
  %138 = phi i32* [ %108, %106 ], [ %928, %922 ]
  %139 = phi i16* [ %2, %106 ], [ %929, %922 ]
  %140 = phi i32 [ %107, %106 ], [ %923, %922 ]
  %141 = trunc i64 %137 to i32
  %142 = lshr i64 %137, 1
  %143 = and i64 %142, 2147483647
  %144 = getelementptr inbounds %struct.silk_decoder_control, %struct.silk_decoder_control* %1, i64 0, i32 2, i64 %143, i64 0
  %145 = bitcast i16* %144 to i8*
  %146 = load i32, i32* %109, align 4
  %147 = sext i32 %146 to i64
  %148 = shl nsw i64 %147, 1
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 16 %7, i8* align 2 %145, i64 %148, i1 false)
  %149 = mul i64 %137, 5
  %150 = and i64 %149, 4294967295
  %151 = getelementptr inbounds %struct.silk_decoder_control, %struct.silk_decoder_control* %1, i64 0, i32 3, i64 %150
  %152 = load i8, i8* %49, align 1
  %153 = getelementptr inbounds %struct.silk_decoder_control, %struct.silk_decoder_control* %1, i64 0, i32 1, i64 %137
  %154 = load i32, i32* %153, align 4
  %155 = ashr i32 %154, 6
  %156 = icmp slt i32 %154, 0
  %157 = sub nsw i32 0, %154
  %158 = select i1 %156, i32 %157, i32 %154
  %159 = call i32 @llvm.ctlz.i32(i32 %158, i1 false) #5, !range !2
  %160 = add nsw i32 %159, -1
  %161 = shl i32 %154, %160
  %162 = ashr i32 %161, 16
  %163 = sdiv i32 536870911, %162
  %164 = shl i32 %163, 16
  %165 = sext i32 %161 to i64
  %166 = zext i32 %163 to i64
  %167 = shl i64 %166, 48
  %168 = ashr exact i64 %167, 48
  %169 = ashr exact i64 %167, 29
  %170 = mul i64 %169, %165
  %171 = and i64 %170, -34359738368
  %172 = sub i64 0, %171
  %173 = ashr exact i64 %172, 32
  %174 = sext i32 %163 to i64
  %175 = mul nsw i64 %173, %174
  %176 = lshr i64 %175, 16
  %177 = trunc i64 %176 to i32
  %178 = add i32 %164, %177
  %179 = icmp ult i32 %158, 131072
  br i1 %179, label %180, label %198

180:                                              ; preds = %136
  %181 = add nsw i32 %159, -15
  %182 = ashr i32 -2147483648, %181
  %183 = lshr i32 2147483647, %181
  %184 = icmp sgt i32 %182, %183
  br i1 %184, label %185, label %190

185:                                              ; preds = %180
  %186 = icmp sgt i32 %178, %182
  br i1 %186, label %195, label %187

187:                                              ; preds = %185
  %188 = icmp slt i32 %178, %183
  %189 = select i1 %188, i32 %183, i32 %178
  br label %195

190:                                              ; preds = %180
  %191 = icmp sgt i32 %178, %183
  br i1 %191, label %195, label %192

192:                                              ; preds = %190
  %193 = icmp slt i32 %178, %182
  %194 = select i1 %193, i32 %182, i32 %178
  br label %195

195:                                              ; preds = %192, %190, %187, %185
  %196 = phi i32 [ %182, %185 ], [ %189, %187 ], [ %183, %190 ], [ %194, %192 ]
  %197 = shl i32 %196, %181
  br label %201

198:                                              ; preds = %136
  %199 = sub nsw i32 15, %159
  %200 = ashr i32 %178, %199
  br label %201

201:                                              ; preds = %198, %195
  %202 = phi i32 [ %197, %195 ], [ %200, %198 ]
  %203 = load i32, i32* %110, align 8
  %204 = icmp eq i32 %154, %203
  br i1 %204, label %334, label %205

205:                                              ; preds = %201
  %206 = icmp slt i32 %203, 0
  %207 = sub nsw i32 0, %203
  %208 = select i1 %206, i32 %207, i32 %203
  %209 = call i32 @llvm.ctlz.i32(i32 %208, i1 false) #5, !range !2
  %210 = add nsw i32 %209, -1
  %211 = shl i32 %203, %210
  %212 = sext i32 %211 to i64
  %213 = mul nsw i64 %168, %212
  %214 = ashr i64 %213, 16
  %215 = mul nsw i64 %214, %165
  %216 = lshr i64 %215, 29
  %217 = trunc i64 %216 to i32
  %218 = and i32 %217, -8
  %219 = sub i32 %211, %218
  %220 = sext i32 %219 to i64
  %221 = mul nsw i64 %168, %220
  %222 = lshr i64 %221, 16
  %223 = add nsw i64 %222, %214
  %224 = trunc i64 %223 to i32
  %225 = sub nsw i32 29, %159
  %226 = add nsw i32 %225, %209
  %227 = add nsw i32 %226, -16
  %228 = icmp slt i32 %227, 0
  br i1 %228, label %229, label %247

229:                                              ; preds = %205
  %230 = sub nsw i32 16, %226
  %231 = ashr i32 -2147483648, %230
  %232 = lshr i32 2147483647, %230
  %233 = icmp sgt i32 %231, %232
  br i1 %233, label %234, label %239

234:                                              ; preds = %229
  %235 = icmp slt i32 %231, %224
  br i1 %235, label %244, label %236

236:                                              ; preds = %234
  %237 = icmp sgt i32 %232, %224
  %238 = select i1 %237, i32 %232, i32 %224
  br label %244

239:                                              ; preds = %229
  %240 = icmp slt i32 %232, %224
  br i1 %240, label %244, label %241

241:                                              ; preds = %239
  %242 = icmp sgt i32 %231, %224
  %243 = select i1 %242, i32 %231, i32 %224
  br label %244

244:                                              ; preds = %241, %239, %236, %234
  %245 = phi i32 [ %231, %234 ], [ %238, %236 ], [ %232, %239 ], [ %243, %241 ]
  %246 = shl i32 %245, %230
  br label %251

247:                                              ; preds = %205
  %248 = icmp slt i32 %227, 32
  %249 = ashr i32 %224, %227
  %250 = select i1 %248, i32 %249, i32 0
  br label %251

251:                                              ; preds = %247, %244
  %252 = phi i32 [ %246, %244 ], [ %250, %247 ]
  %253 = sext i32 %252 to i64
  %254 = load i32, i32* %47, align 16
  %255 = sext i32 %254 to i64
  %256 = mul nsw i64 %255, %253
  %257 = lshr i64 %256, 16
  %258 = trunc i64 %257 to i32
  store i32 %258, i32* %47, align 16
  %259 = load i32, i32* %116, align 4
  %260 = sext i32 %259 to i64
  %261 = mul nsw i64 %260, %253
  %262 = lshr i64 %261, 16
  %263 = trunc i64 %262 to i32
  store i32 %263, i32* %116, align 4
  %264 = load i32, i32* %117, align 8
  %265 = sext i32 %264 to i64
  %266 = mul nsw i64 %265, %253
  %267 = lshr i64 %266, 16
  %268 = trunc i64 %267 to i32
  store i32 %268, i32* %117, align 8
  %269 = load i32, i32* %118, align 4
  %270 = sext i32 %269 to i64
  %271 = mul nsw i64 %270, %253
  %272 = lshr i64 %271, 16
  %273 = trunc i64 %272 to i32
  store i32 %273, i32* %118, align 4
  %274 = load i32, i32* %119, align 16
  %275 = sext i32 %274 to i64
  %276 = mul nsw i64 %275, %253
  %277 = lshr i64 %276, 16
  %278 = trunc i64 %277 to i32
  store i32 %278, i32* %119, align 16
  %279 = load i32, i32* %120, align 4
  %280 = sext i32 %279 to i64
  %281 = mul nsw i64 %280, %253
  %282 = lshr i64 %281, 16
  %283 = trunc i64 %282 to i32
  store i32 %283, i32* %120, align 4
  %284 = load i32, i32* %121, align 8
  %285 = sext i32 %284 to i64
  %286 = mul nsw i64 %285, %253
  %287 = lshr i64 %286, 16
  %288 = trunc i64 %287 to i32
  store i32 %288, i32* %121, align 8
  %289 = load i32, i32* %122, align 4
  %290 = sext i32 %289 to i64
  %291 = mul nsw i64 %290, %253
  %292 = lshr i64 %291, 16
  %293 = trunc i64 %292 to i32
  store i32 %293, i32* %122, align 4
  %294 = load i32, i32* %123, align 16
  %295 = sext i32 %294 to i64
  %296 = mul nsw i64 %295, %253
  %297 = lshr i64 %296, 16
  %298 = trunc i64 %297 to i32
  store i32 %298, i32* %123, align 16
  %299 = load i32, i32* %124, align 4
  %300 = sext i32 %299 to i64
  %301 = mul nsw i64 %300, %253
  %302 = lshr i64 %301, 16
  %303 = trunc i64 %302 to i32
  store i32 %303, i32* %124, align 4
  %304 = load i32, i32* %125, align 8
  %305 = sext i32 %304 to i64
  %306 = mul nsw i64 %305, %253
  %307 = lshr i64 %306, 16
  %308 = trunc i64 %307 to i32
  store i32 %308, i32* %125, align 8
  %309 = load i32, i32* %126, align 4
  %310 = sext i32 %309 to i64
  %311 = mul nsw i64 %310, %253
  %312 = lshr i64 %311, 16
  %313 = trunc i64 %312 to i32
  store i32 %313, i32* %126, align 4
  %314 = load i32, i32* %127, align 16
  %315 = sext i32 %314 to i64
  %316 = mul nsw i64 %315, %253
  %317 = lshr i64 %316, 16
  %318 = trunc i64 %317 to i32
  store i32 %318, i32* %127, align 16
  %319 = load i32, i32* %128, align 4
  %320 = sext i32 %319 to i64
  %321 = mul nsw i64 %320, %253
  %322 = lshr i64 %321, 16
  %323 = trunc i64 %322 to i32
  store i32 %323, i32* %128, align 4
  %324 = load i32, i32* %129, align 8
  %325 = sext i32 %324 to i64
  %326 = mul nsw i64 %325, %253
  %327 = lshr i64 %326, 16
  %328 = trunc i64 %327 to i32
  store i32 %328, i32* %129, align 8
  %329 = load i32, i32* %130, align 4
  %330 = sext i32 %329 to i64
  %331 = mul nsw i64 %330, %253
  %332 = lshr i64 %331, 16
  %333 = trunc i64 %332 to i32
  store i32 %333, i32* %130, align 4
  br label %334

334:                                              ; preds = %251, %201
  %335 = phi i32 [ 65536, %201 ], [ %252, %251 ]
  store i32 %154, i32* %110, align 8
  %336 = load i32, i32* %111, align 8
  %337 = icmp eq i32 %336, 0
  br i1 %337, label %350, label %338

338:                                              ; preds = %334
  %339 = load i32, i32* %112, align 4
  %340 = icmp eq i32 %339, 2
  br i1 %340, label %341, label %350

341:                                              ; preds = %338
  %342 = icmp ne i8 %152, 2
  %343 = icmp ult i64 %137, 2
  %344 = and i1 %343, %342
  br i1 %344, label %345, label %350

345:                                              ; preds = %341
  %346 = bitcast i16* %151 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 2 %346, i8 0, i64 10, i1 false)
  %347 = getelementptr inbounds i16, i16* %151, i64 2
  store i16 4096, i16* %347, align 2
  %348 = load i32, i32* %113, align 4
  %349 = getelementptr inbounds %struct.silk_decoder_control, %struct.silk_decoder_control* %1, i64 0, i32 0, i64 %137
  store i32 %348, i32* %349, align 4
  br label %357

350:                                              ; preds = %334, %341, %338
  %351 = icmp eq i8 %152, 2
  br i1 %351, label %354, label %352

352:                                              ; preds = %350
  %353 = load i32, i32* %38, align 4
  br label %708

354:                                              ; preds = %350
  %355 = getelementptr inbounds %struct.silk_decoder_control, %struct.silk_decoder_control* %1, i64 0, i32 0, i64 %137
  %356 = load i32, i32* %355, align 4
  br label %357

357:                                              ; preds = %354, %345
  %358 = phi i32 [ %356, %354 ], [ %348, %345 ]
  %359 = icmp eq i64 %137, 0
  %360 = icmp eq i64 %137, 2
  %361 = and i1 %52, %360
  %362 = or i1 %359, %361
  br i1 %362, label %363, label %508

363:                                              ; preds = %357
  %364 = load i32, i32* %24, align 8
  %365 = load i32, i32* %109, align 4
  %366 = sub i32 -2, %358
  %367 = add i32 %366, %364
  %368 = sub i32 %367, %365
  %369 = icmp sgt i32 %368, 0
  br i1 %369, label %371, label %370

370:                                              ; preds = %363
  call void @celt_fatal(i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str, i64 0, i64 0), i8* getelementptr inbounds ([46 x i8], [46 x i8]* @.str.1, i64 0, i64 0), i32 144) #6
  unreachable

371:                                              ; preds = %363
  br i1 %360, label %372, label %382

372:                                              ; preds = %371
  %373 = sext i32 %364 to i64
  %374 = getelementptr inbounds %struct.silk_decoder_state, %struct.silk_decoder_state* %0, i64 0, i32 3, i64 %373
  %375 = bitcast i16* %374 to i8*
  %376 = load i32, i32* %38, align 4
  %377 = shl nsw i32 %376, 1
  %378 = sext i32 %377 to i64
  %379 = shl nsw i64 %378, 1
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 2 %375, i8* align 2 %114, i64 %379, i1 false)
  %380 = load i32, i32* %24, align 8
  %381 = load i32, i32* %109, align 4
  br label %382

382:                                              ; preds = %372, %371
  %383 = phi i32 [ %381, %372 ], [ %365, %371 ]
  %384 = phi i32 [ %380, %372 ], [ %364, %371 ]
  %385 = sext i32 %368 to i64
  %386 = getelementptr inbounds i16, i16* %29, i64 %385
  %387 = load i32, i32* %38, align 4
  %388 = mul nsw i32 %387, %141
  %389 = add nsw i32 %388, %368
  %390 = sext i32 %389 to i64
  %391 = getelementptr inbounds %struct.silk_decoder_state, %struct.silk_decoder_state* %0, i64 0, i32 3, i64 %390
  %392 = sub nsw i32 %384, %368
  call void @silk_LPC_analysis_filter(i16* %386, i16* %391, i16* %144, i32 %392, i32 %383, i32 %4) #5
  br i1 %359, label %393, label %403

393:                                              ; preds = %382
  %394 = sext i32 %202 to i64
  %395 = load i32, i32* %115, align 4
  %396 = zext i32 %395 to i64
  %397 = shl i64 %396, 48
  %398 = ashr exact i64 %397, 48
  %399 = mul nsw i64 %398, %394
  %400 = lshr i64 %399, 14
  %401 = trunc i64 %400 to i32
  %402 = and i32 %401, -4
  br label %403

403:                                              ; preds = %393, %382
  %404 = phi i32 [ %402, %393 ], [ %202, %382 ]
  %405 = add i32 %358, 2
  %406 = icmp sgt i32 %405, 0
  br i1 %406, label %407, label %635

407:                                              ; preds = %403
  %408 = sext i32 %404 to i64
  %409 = load i32, i32* %24, align 8
  %410 = zext i32 %405 to i64
  %411 = icmp ult i32 %405, 4
  br i1 %411, label %454, label %412

412:                                              ; preds = %407
  %413 = add nsw i64 %410, -1
  %414 = add i32 %409, -1
  %415 = trunc i64 %413 to i32
  %416 = sub i32 %414, %415
  %417 = icmp sgt i32 %416, %414
  %418 = icmp ugt i64 %413, 4294967295
  %419 = or i1 %417, %418
  %420 = add i32 %140, -1
  %421 = trunc i64 %413 to i32
  %422 = sub i32 %420, %421
  %423 = icmp sgt i32 %422, %420
  %424 = icmp ugt i64 %413, 4294967295
  %425 = or i1 %423, %424
  %426 = or i1 %419, %425
  br i1 %426, label %454, label %427

427:                                              ; preds = %412
  %428 = and i64 %410, 4294967292
  %429 = insertelement <4 x i64> undef, i64 %408, i32 0
  %430 = shufflevector <4 x i64> %429, <4 x i64> undef, <4 x i32> zeroinitializer
  br label %431

431:                                              ; preds = %431, %427
  %432 = phi i64 [ 0, %427 ], [ %450, %431 ]
  %433 = trunc i64 %432 to i32
  %434 = xor i32 %433, -1
  %435 = add i32 %409, %434
  %436 = sext i32 %435 to i64
  %437 = getelementptr inbounds i16, i16* %134, i64 %436
  %438 = bitcast i16* %437 to <4 x i16>*
  %439 = load <4 x i16>, <4 x i16>* %438, align 2
  %440 = shufflevector <4 x i16> %439, <4 x i16> undef, <4 x i32> <i32 3, i32 2, i32 1, i32 0>
  %441 = sext <4 x i16> %440 to <4 x i64>
  %442 = mul nsw <4 x i64> %430, %441
  %443 = lshr <4 x i64> %442, <i64 16, i64 16, i64 16, i64 16>
  %444 = trunc <4 x i64> %443 to <4 x i32>
  %445 = add i32 %140, %434
  %446 = sext i32 %445 to i64
  %447 = shufflevector <4 x i32> %444, <4 x i32> undef, <4 x i32> <i32 3, i32 2, i32 1, i32 0>
  %448 = getelementptr inbounds i32, i32* %135, i64 %446
  %449 = bitcast i32* %448 to <4 x i32>*
  store <4 x i32> %447, <4 x i32>* %449, align 4
  %450 = add i64 %432, 4
  %451 = icmp eq i64 %450, %428
  br i1 %451, label %452, label %431, !llvm.loop !3

452:                                              ; preds = %431
  %453 = icmp eq i64 %428, %410
  br i1 %453, label %635, label %454

454:                                              ; preds = %452, %412, %407
  %455 = phi i64 [ 0, %412 ], [ 0, %407 ], [ %428, %452 ]
  %456 = xor i64 %455, -1
  %457 = and i64 %410, 1
  %458 = icmp eq i64 %457, 0
  br i1 %458, label %474, label %459

459:                                              ; preds = %454
  %460 = trunc i64 %455 to i32
  %461 = xor i32 %460, -1
  %462 = add i32 %409, %461
  %463 = sext i32 %462 to i64
  %464 = getelementptr inbounds i16, i16* %29, i64 %463
  %465 = load i16, i16* %464, align 2
  %466 = sext i16 %465 to i64
  %467 = mul nsw i64 %466, %408
  %468 = lshr i64 %467, 16
  %469 = trunc i64 %468 to i32
  %470 = add i32 %140, %461
  %471 = sext i32 %470 to i64
  %472 = getelementptr inbounds i32, i32* %36, i64 %471
  store i32 %469, i32* %472, align 4
  %473 = or i64 %455, 1
  br label %474

474:                                              ; preds = %459, %454
  %475 = phi i64 [ %473, %459 ], [ %455, %454 ]
  %476 = sub nsw i64 0, %410
  %477 = icmp eq i64 %456, %476
  br i1 %477, label %635, label %478

478:                                              ; preds = %474, %478
  %479 = phi i64 [ %506, %478 ], [ %475, %474 ]
  %480 = trunc i64 %479 to i32
  %481 = xor i32 %480, -1
  %482 = add i32 %409, %481
  %483 = sext i32 %482 to i64
  %484 = getelementptr inbounds i16, i16* %29, i64 %483
  %485 = load i16, i16* %484, align 2
  %486 = sext i16 %485 to i64
  %487 = mul nsw i64 %486, %408
  %488 = lshr i64 %487, 16
  %489 = trunc i64 %488 to i32
  %490 = add i32 %140, %481
  %491 = sext i32 %490 to i64
  %492 = getelementptr inbounds i32, i32* %36, i64 %491
  store i32 %489, i32* %492, align 4
  %493 = trunc i64 %479 to i32
  %494 = sub i32 -2, %493
  %495 = add i32 %409, %494
  %496 = sext i32 %495 to i64
  %497 = getelementptr inbounds i16, i16* %29, i64 %496
  %498 = load i16, i16* %497, align 2
  %499 = sext i16 %498 to i64
  %500 = mul nsw i64 %499, %408
  %501 = lshr i64 %500, 16
  %502 = trunc i64 %501 to i32
  %503 = add i32 %140, %494
  %504 = sext i32 %503 to i64
  %505 = getelementptr inbounds i32, i32* %36, i64 %504
  store i32 %502, i32* %505, align 4
  %506 = add nuw nsw i64 %479, 2
  %507 = icmp eq i64 %506, %410
  br i1 %507, label %635, label %478, !llvm.loop !5

508:                                              ; preds = %357
  %509 = icmp eq i32 %335, 65536
  br i1 %509, label %635, label %510

510:                                              ; preds = %508
  %511 = add i32 %358, 2
  %512 = icmp sgt i32 %511, 0
  br i1 %512, label %513, label %635

513:                                              ; preds = %510
  %514 = sext i32 %335 to i64
  %515 = zext i32 %511 to i64
  %516 = icmp ult i32 %511, 4
  br i1 %516, label %590, label %517

517:                                              ; preds = %513
  %518 = add nsw i64 %515, -1
  %519 = add i32 %140, -1
  %520 = trunc i64 %518 to i32
  %521 = sub i32 %519, %520
  %522 = icmp sgt i32 %521, %519
  %523 = icmp ugt i64 %518, 4294967295
  %524 = or i1 %522, %523
  br i1 %524, label %590, label %525

525:                                              ; preds = %517
  %526 = and i64 %515, 4294967292
  %527 = insertelement <4 x i64> undef, i64 %514, i32 0
  %528 = shufflevector <4 x i64> %527, <4 x i64> undef, <4 x i32> zeroinitializer
  %529 = add nsw i64 %526, -4
  %530 = lshr exact i64 %529, 2
  %531 = add nuw nsw i64 %530, 1
  %532 = and i64 %531, 1
  %533 = icmp eq i64 %529, 0
  br i1 %533, label %570, label %534

534:                                              ; preds = %525
  %535 = sub nuw nsw i64 %531, %532
  br label %536

536:                                              ; preds = %536, %534
  %537 = phi i64 [ 0, %534 ], [ %567, %536 ]
  %538 = phi i64 [ %535, %534 ], [ %568, %536 ]
  %539 = trunc i64 %537 to i32
  %540 = xor i32 %539, -1
  %541 = add i32 %140, %540
  %542 = sext i32 %541 to i64
  %543 = getelementptr inbounds i32, i32* %131, i64 %542
  %544 = bitcast i32* %543 to <4 x i32>*
  %545 = load <4 x i32>, <4 x i32>* %544, align 4
  %546 = shufflevector <4 x i32> %545, <4 x i32> undef, <4 x i32> <i32 3, i32 2, i32 1, i32 0>
  %547 = sext <4 x i32> %546 to <4 x i64>
  %548 = mul nsw <4 x i64> %528, %547
  %549 = lshr <4 x i64> %548, <i64 16, i64 16, i64 16, i64 16>
  %550 = trunc <4 x i64> %549 to <4 x i32>
  %551 = shufflevector <4 x i32> %550, <4 x i32> undef, <4 x i32> <i32 3, i32 2, i32 1, i32 0>
  %552 = bitcast i32* %543 to <4 x i32>*
  store <4 x i32> %551, <4 x i32>* %552, align 4
  %553 = trunc i64 %537 to i32
  %554 = xor i32 %553, -5
  %555 = add i32 %140, %554
  %556 = sext i32 %555 to i64
  %557 = getelementptr inbounds i32, i32* %132, i64 %556
  %558 = bitcast i32* %557 to <4 x i32>*
  %559 = load <4 x i32>, <4 x i32>* %558, align 4
  %560 = shufflevector <4 x i32> %559, <4 x i32> undef, <4 x i32> <i32 3, i32 2, i32 1, i32 0>
  %561 = sext <4 x i32> %560 to <4 x i64>
  %562 = mul nsw <4 x i64> %528, %561
  %563 = lshr <4 x i64> %562, <i64 16, i64 16, i64 16, i64 16>
  %564 = trunc <4 x i64> %563 to <4 x i32>
  %565 = shufflevector <4 x i32> %564, <4 x i32> undef, <4 x i32> <i32 3, i32 2, i32 1, i32 0>
  %566 = bitcast i32* %557 to <4 x i32>*
  store <4 x i32> %565, <4 x i32>* %566, align 4
  %567 = add i64 %537, 8
  %568 = add i64 %538, -2
  %569 = icmp eq i64 %568, 0
  br i1 %569, label %570, label %536, !llvm.loop !6

570:                                              ; preds = %536, %525
  %571 = phi i64 [ 0, %525 ], [ %567, %536 ]
  %572 = icmp eq i64 %532, 0
  br i1 %572, label %588, label %573

573:                                              ; preds = %570
  %574 = trunc i64 %571 to i32
  %575 = xor i32 %574, -1
  %576 = add i32 %140, %575
  %577 = sext i32 %576 to i64
  %578 = getelementptr inbounds i32, i32* %133, i64 %577
  %579 = bitcast i32* %578 to <4 x i32>*
  %580 = load <4 x i32>, <4 x i32>* %579, align 4
  %581 = shufflevector <4 x i32> %580, <4 x i32> undef, <4 x i32> <i32 3, i32 2, i32 1, i32 0>
  %582 = sext <4 x i32> %581 to <4 x i64>
  %583 = mul nsw <4 x i64> %528, %582
  %584 = lshr <4 x i64> %583, <i64 16, i64 16, i64 16, i64 16>
  %585 = trunc <4 x i64> %584 to <4 x i32>
  %586 = shufflevector <4 x i32> %585, <4 x i32> undef, <4 x i32> <i32 3, i32 2, i32 1, i32 0>
  %587 = bitcast i32* %578 to <4 x i32>*
  store <4 x i32> %586, <4 x i32>* %587, align 4
  br label %588

588:                                              ; preds = %570, %573
  %589 = icmp eq i64 %526, %515
  br i1 %589, label %635, label %590

590:                                              ; preds = %588, %517, %513
  %591 = phi i64 [ 0, %517 ], [ 0, %513 ], [ %526, %588 ]
  %592 = xor i64 %591, -1
  %593 = and i64 %515, 1
  %594 = icmp eq i64 %593, 0
  br i1 %594, label %607, label %595

595:                                              ; preds = %590
  %596 = trunc i64 %591 to i32
  %597 = xor i32 %596, -1
  %598 = add i32 %140, %597
  %599 = sext i32 %598 to i64
  %600 = getelementptr inbounds i32, i32* %36, i64 %599
  %601 = load i32, i32* %600, align 4
  %602 = sext i32 %601 to i64
  %603 = mul nsw i64 %602, %514
  %604 = lshr i64 %603, 16
  %605 = trunc i64 %604 to i32
  store i32 %605, i32* %600, align 4
  %606 = or i64 %591, 1
  br label %607

607:                                              ; preds = %595, %590
  %608 = phi i64 [ %606, %595 ], [ %591, %590 ]
  %609 = sub nsw i64 0, %515
  %610 = icmp eq i64 %592, %609
  br i1 %610, label %635, label %611

611:                                              ; preds = %607, %611
  %612 = phi i64 [ %633, %611 ], [ %608, %607 ]
  %613 = trunc i64 %612 to i32
  %614 = xor i32 %613, -1
  %615 = add i32 %140, %614
  %616 = sext i32 %615 to i64
  %617 = getelementptr inbounds i32, i32* %36, i64 %616
  %618 = load i32, i32* %617, align 4
  %619 = sext i32 %618 to i64
  %620 = mul nsw i64 %619, %514
  %621 = lshr i64 %620, 16
  %622 = trunc i64 %621 to i32
  store i32 %622, i32* %617, align 4
  %623 = trunc i64 %612 to i32
  %624 = sub i32 -2, %623
  %625 = add i32 %140, %624
  %626 = sext i32 %625 to i64
  %627 = getelementptr inbounds i32, i32* %36, i64 %626
  %628 = load i32, i32* %627, align 4
  %629 = sext i32 %628 to i64
  %630 = mul nsw i64 %629, %514
  %631 = lshr i64 %630, 16
  %632 = trunc i64 %631 to i32
  store i32 %632, i32* %627, align 4
  %633 = add nuw nsw i64 %612, 2
  %634 = icmp eq i64 %633, %515
  br i1 %634, label %635, label %611, !llvm.loop !7

635:                                              ; preds = %607, %611, %474, %478, %588, %452, %510, %403, %508
  %636 = load i32, i32* %38, align 4
  %637 = icmp sgt i32 %636, 0
  br i1 %637, label %638, label %922

638:                                              ; preds = %635
  %639 = add i32 %140, 2
  %640 = sub i32 %639, %358
  %641 = sext i32 %640 to i64
  %642 = getelementptr inbounds i32, i32* %36, i64 %641
  %643 = getelementptr inbounds i16, i16* %151, i64 1
  %644 = getelementptr inbounds i16, i16* %151, i64 2
  %645 = getelementptr inbounds i16, i16* %151, i64 3
  %646 = getelementptr inbounds i16, i16* %151, i64 4
  %647 = sext i32 %140 to i64
  %648 = load i16, i16* %151, align 2
  %649 = load i16, i16* %643, align 2
  %650 = load i16, i16* %644, align 2
  %651 = load i16, i16* %645, align 2
  %652 = load i16, i16* %646, align 2
  %653 = sext i16 %648 to i64
  %654 = sext i16 %649 to i64
  %655 = sext i16 %650 to i64
  %656 = sext i16 %651 to i64
  %657 = sext i16 %652 to i64
  %658 = sext i32 %636 to i64
  br label %659

659:                                              ; preds = %638, %659
  %660 = phi i64 [ 0, %638 ], [ %704, %659 ]
  %661 = phi i64 [ %647, %638 ], [ %703, %659 ]
  %662 = phi i32* [ %642, %638 ], [ %695, %659 ]
  %663 = load i32, i32* %662, align 4
  %664 = sext i32 %663 to i64
  %665 = mul nsw i64 %653, %664
  %666 = lshr i64 %665, 16
  %667 = getelementptr inbounds i32, i32* %662, i64 -1
  %668 = load i32, i32* %667, align 4
  %669 = sext i32 %668 to i64
  %670 = mul nsw i64 %654, %669
  %671 = lshr i64 %670, 16
  %672 = getelementptr inbounds i32, i32* %662, i64 -2
  %673 = load i32, i32* %672, align 4
  %674 = sext i32 %673 to i64
  %675 = mul nsw i64 %655, %674
  %676 = lshr i64 %675, 16
  %677 = getelementptr inbounds i32, i32* %662, i64 -3
  %678 = load i32, i32* %677, align 4
  %679 = sext i32 %678 to i64
  %680 = mul nsw i64 %656, %679
  %681 = lshr i64 %680, 16
  %682 = add nuw nsw i64 %671, %666
  %683 = add nuw nsw i64 %682, %676
  %684 = add nuw nsw i64 %683, %681
  %685 = shl i64 %684, 32
  %686 = add i64 %685, 8589934592
  %687 = lshr exact i64 %686, 32
  %688 = getelementptr inbounds i32, i32* %662, i64 -4
  %689 = load i32, i32* %688, align 4
  %690 = sext i32 %689 to i64
  %691 = mul nsw i64 %657, %690
  %692 = lshr i64 %691, 16
  %693 = add nuw nsw i64 %687, %692
  %694 = trunc i64 %693 to i32
  %695 = getelementptr inbounds i32, i32* %662, i64 1
  %696 = getelementptr inbounds i32, i32* %138, i64 %660
  %697 = load i32, i32* %696, align 4
  %698 = shl i32 %694, 1
  %699 = add nsw i32 %698, %697
  %700 = getelementptr inbounds i32, i32* %42, i64 %660
  store i32 %699, i32* %700, align 4
  %701 = shl i32 %699, 1
  %702 = getelementptr inbounds i32, i32* %36, i64 %661
  store i32 %701, i32* %702, align 4
  %703 = add nsw i64 %661, 1
  %704 = add nuw nsw i64 %660, 1
  %705 = icmp slt i64 %704, %658
  br i1 %705, label %659, label %706

706:                                              ; preds = %659
  %707 = trunc i64 %703 to i32
  br label %708

708:                                              ; preds = %352, %706
  %709 = phi i32 [ %353, %352 ], [ %636, %706 ]
  %710 = phi i32 [ %140, %352 ], [ %707, %706 ]
  %711 = phi i32* [ %138, %352 ], [ %42, %706 ]
  %712 = icmp sgt i32 %709, 0
  br i1 %712, label %713, label %922

713:                                              ; preds = %708
  %714 = sext i32 %155 to i64
  br label %715

715:                                              ; preds = %713, %902
  %716 = phi i64 [ 0, %713 ], [ %918, %902 ]
  %717 = load i32, i32* %109, align 4
  switch i32 %717, label %718 [
    i32 10, label %719
    i32 16, label %719
  ]

718:                                              ; preds = %715
  call void @celt_fatal(i8* getelementptr inbounds ([67 x i8], [67 x i8]* @.str.2, i64 0, i64 0), i8* getelementptr inbounds ([46 x i8], [46 x i8]* @.str.1, i64 0, i64 0), i32 199) #6
  unreachable

719:                                              ; preds = %715, %715
  %720 = lshr i32 %717, 1
  %721 = add nuw nsw i64 %716, 16
  %722 = add nuw nsw i64 %716, 15
  %723 = getelementptr inbounds i32, i32* %47, i64 %722
  %724 = load i32, i32* %723, align 4
  %725 = sext i32 %724 to i64
  %726 = load i16, i16* %8, align 16
  %727 = sext i16 %726 to i64
  %728 = mul nsw i64 %727, %725
  %729 = lshr i64 %728, 16
  %730 = trunc i64 %729 to i32
  %731 = add i32 %720, %730
  %732 = add nuw nsw i64 %716, 14
  %733 = getelementptr inbounds i32, i32* %47, i64 %732
  %734 = load i32, i32* %733, align 4
  %735 = sext i32 %734 to i64
  %736 = load i16, i16* %9, align 2
  %737 = sext i16 %736 to i64
  %738 = mul nsw i64 %737, %735
  %739 = lshr i64 %738, 16
  %740 = trunc i64 %739 to i32
  %741 = add i32 %731, %740
  %742 = add nuw nsw i64 %716, 13
  %743 = getelementptr inbounds i32, i32* %47, i64 %742
  %744 = load i32, i32* %743, align 4
  %745 = sext i32 %744 to i64
  %746 = load i16, i16* %10, align 4
  %747 = sext i16 %746 to i64
  %748 = mul nsw i64 %747, %745
  %749 = lshr i64 %748, 16
  %750 = trunc i64 %749 to i32
  %751 = add i32 %741, %750
  %752 = add nuw nsw i64 %716, 12
  %753 = getelementptr inbounds i32, i32* %47, i64 %752
  %754 = load i32, i32* %753, align 4
  %755 = sext i32 %754 to i64
  %756 = load i16, i16* %11, align 2
  %757 = sext i16 %756 to i64
  %758 = mul nsw i64 %757, %755
  %759 = lshr i64 %758, 16
  %760 = trunc i64 %759 to i32
  %761 = add i32 %751, %760
  %762 = add nuw nsw i64 %716, 11
  %763 = getelementptr inbounds i32, i32* %47, i64 %762
  %764 = load i32, i32* %763, align 4
  %765 = sext i32 %764 to i64
  %766 = load i16, i16* %12, align 8
  %767 = sext i16 %766 to i64
  %768 = mul nsw i64 %767, %765
  %769 = lshr i64 %768, 16
  %770 = trunc i64 %769 to i32
  %771 = add i32 %761, %770
  %772 = add nuw nsw i64 %716, 10
  %773 = getelementptr inbounds i32, i32* %47, i64 %772
  %774 = load i32, i32* %773, align 4
  %775 = sext i32 %774 to i64
  %776 = load i16, i16* %13, align 2
  %777 = sext i16 %776 to i64
  %778 = mul nsw i64 %777, %775
  %779 = lshr i64 %778, 16
  %780 = trunc i64 %779 to i32
  %781 = add i32 %771, %780
  %782 = add nuw nsw i64 %716, 9
  %783 = getelementptr inbounds i32, i32* %47, i64 %782
  %784 = load i32, i32* %783, align 4
  %785 = sext i32 %784 to i64
  %786 = load i16, i16* %14, align 4
  %787 = sext i16 %786 to i64
  %788 = mul nsw i64 %787, %785
  %789 = lshr i64 %788, 16
  %790 = trunc i64 %789 to i32
  %791 = add i32 %781, %790
  %792 = add nuw nsw i64 %716, 8
  %793 = getelementptr inbounds i32, i32* %47, i64 %792
  %794 = load i32, i32* %793, align 4
  %795 = sext i32 %794 to i64
  %796 = load i16, i16* %15, align 2
  %797 = sext i16 %796 to i64
  %798 = mul nsw i64 %797, %795
  %799 = lshr i64 %798, 16
  %800 = trunc i64 %799 to i32
  %801 = add i32 %791, %800
  %802 = add nuw nsw i64 %716, 7
  %803 = getelementptr inbounds i32, i32* %47, i64 %802
  %804 = load i32, i32* %803, align 4
  %805 = sext i32 %804 to i64
  %806 = load i16, i16* %16, align 16
  %807 = sext i16 %806 to i64
  %808 = mul nsw i64 %807, %805
  %809 = lshr i64 %808, 16
  %810 = trunc i64 %809 to i32
  %811 = add i32 %801, %810
  %812 = add nuw nsw i64 %716, 6
  %813 = getelementptr inbounds i32, i32* %47, i64 %812
  %814 = load i32, i32* %813, align 4
  %815 = sext i32 %814 to i64
  %816 = load i16, i16* %17, align 2
  %817 = sext i16 %816 to i64
  %818 = mul nsw i64 %817, %815
  %819 = lshr i64 %818, 16
  %820 = trunc i64 %819 to i32
  %821 = add i32 %811, %820
  %822 = icmp eq i32 %717, 16
  br i1 %822, label %823, label %883

823:                                              ; preds = %719
  %824 = add nuw nsw i64 %716, 5
  %825 = getelementptr inbounds i32, i32* %47, i64 %824
  %826 = load i32, i32* %825, align 4
  %827 = sext i32 %826 to i64
  %828 = load i16, i16* %18, align 4
  %829 = sext i16 %828 to i64
  %830 = mul nsw i64 %829, %827
  %831 = lshr i64 %830, 16
  %832 = trunc i64 %831 to i32
  %833 = add i32 %821, %832
  %834 = add nuw nsw i64 %716, 4
  %835 = getelementptr inbounds i32, i32* %47, i64 %834
  %836 = load i32, i32* %835, align 4
  %837 = sext i32 %836 to i64
  %838 = load i16, i16* %19, align 2
  %839 = sext i16 %838 to i64
  %840 = mul nsw i64 %839, %837
  %841 = lshr i64 %840, 16
  %842 = trunc i64 %841 to i32
  %843 = add i32 %833, %842
  %844 = add nuw nsw i64 %716, 3
  %845 = getelementptr inbounds i32, i32* %47, i64 %844
  %846 = load i32, i32* %845, align 4
  %847 = sext i32 %846 to i64
  %848 = load i16, i16* %20, align 8
  %849 = sext i16 %848 to i64
  %850 = mul nsw i64 %849, %847
  %851 = lshr i64 %850, 16
  %852 = trunc i64 %851 to i32
  %853 = add i32 %843, %852
  %854 = add nuw nsw i64 %716, 2
  %855 = getelementptr inbounds i32, i32* %47, i64 %854
  %856 = load i32, i32* %855, align 4
  %857 = sext i32 %856 to i64
  %858 = load i16, i16* %21, align 2
  %859 = sext i16 %858 to i64
  %860 = mul nsw i64 %859, %857
  %861 = lshr i64 %860, 16
  %862 = trunc i64 %861 to i32
  %863 = add i32 %853, %862
  %864 = add nuw nsw i64 %716, 1
  %865 = getelementptr inbounds i32, i32* %47, i64 %864
  %866 = load i32, i32* %865, align 4
  %867 = sext i32 %866 to i64
  %868 = load i16, i16* %22, align 4
  %869 = sext i16 %868 to i64
  %870 = mul nsw i64 %869, %867
  %871 = lshr i64 %870, 16
  %872 = trunc i64 %871 to i32
  %873 = add i32 %863, %872
  %874 = getelementptr inbounds i32, i32* %47, i64 %716
  %875 = load i32, i32* %874, align 4
  %876 = sext i32 %875 to i64
  %877 = load i16, i16* %23, align 2
  %878 = sext i16 %877 to i64
  %879 = mul nsw i64 %878, %876
  %880 = lshr i64 %879, 16
  %881 = trunc i64 %880 to i32
  %882 = add i32 %873, %881
  br label %883

883:                                              ; preds = %823, %719
  %884 = phi i32 [ %882, %823 ], [ %821, %719 ]
  %885 = getelementptr inbounds i32, i32* %711, i64 %716
  %886 = load i32, i32* %885, align 4
  %887 = icmp sgt i32 %884, -134217728
  %888 = select i1 %887, i32 %884, i32 -134217728
  %889 = icmp slt i32 %888, 134217727
  %890 = select i1 %889, i32 %888, i32 134217727
  %891 = shl nsw i32 %890, 4
  %892 = add i32 %891, %886
  %893 = icmp sgt i32 %892, -1
  br i1 %893, label %894, label %898

894:                                              ; preds = %883
  %895 = and i32 %891, %886
  %896 = icmp slt i32 %895, 0
  %897 = select i1 %896, i32 -2147483648, i32 %892
  br label %902

898:                                              ; preds = %883
  %899 = or i32 %891, %886
  %900 = icmp sgt i32 %899, -1
  %901 = select i1 %900, i32 2147483647, i32 %892
  br label %902

902:                                              ; preds = %898, %894
  %903 = phi i32 [ %897, %894 ], [ %901, %898 ]
  %904 = getelementptr inbounds i32, i32* %47, i64 %721
  store i32 %903, i32* %904, align 4
  %905 = sext i32 %903 to i64
  %906 = mul nsw i64 %905, %714
  %907 = lshr i64 %906, 16
  %908 = trunc i64 %907 to i32
  %909 = ashr i32 %908, 7
  %910 = add nsw i32 %909, 1
  %911 = lshr i32 %910, 1
  %912 = icmp sgt i32 %908, 8388479
  %913 = icmp slt i32 %910, -65536
  %914 = select i1 %913, i32 32768, i32 %911
  %915 = select i1 %912, i32 32767, i32 %914
  %916 = trunc i32 %915 to i16
  %917 = getelementptr inbounds i16, i16* %139, i64 %716
  store i16 %916, i16* %917, align 2
  %918 = add nuw nsw i64 %716, 1
  %919 = load i32, i32* %38, align 4
  %920 = sext i32 %919 to i64
  %921 = icmp slt i64 %918, %920
  br i1 %921, label %715, label %922

922:                                              ; preds = %902, %708, %635
  %923 = phi i32 [ %710, %708 ], [ %140, %635 ], [ %710, %902 ]
  %924 = phi i32 [ %709, %708 ], [ %636, %635 ], [ %919, %902 ]
  %925 = sext i32 %924 to i64
  %926 = getelementptr inbounds i32, i32* %47, i64 %925
  %927 = bitcast i32* %926 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 16 %48, i8* align 4 %927, i64 64, i1 false)
  %928 = getelementptr inbounds i32, i32* %138, i64 %925
  %929 = getelementptr inbounds i16, i16* %139, i64 %925
  %930 = add nuw nsw i64 %137, 1
  %931 = load i32, i32* %103, align 4
  %932 = sext i32 %931 to i64
  %933 = icmp slt i64 %930, %932
  br i1 %933, label %136, label %934

934:                                              ; preds = %922, %100
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %102, i8* nonnull align 16 %48, i64 64, i1 false)
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %7)
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #1

; Function Attrs: noreturn
declare void @celt_fatal(i8*, i8*, i32) local_unnamed_addr #2

declare void @silk_LPC_analysis_filter(i16*, i16*, i16*, i32, i32, i32) local_unnamed_addr #3

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nounwind readnone speculatable
declare i32 @llvm.ctlz.i32(i32, i1 immarg) #4

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind readnone speculatable }
attributes #5 = { nounwind }
attributes #6 = { noreturn nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{i32 0, i32 33}
!3 = distinct !{!3, !4}
!4 = !{!"llvm.loop.isvectorized", i32 1}
!5 = distinct !{!5, !4}
!6 = distinct !{!6, !4}
!7 = distinct !{!7, !4}
