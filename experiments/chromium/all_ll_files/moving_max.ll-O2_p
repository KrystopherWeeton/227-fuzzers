; ModuleID = '../../third_party/webrtc/modules/audio_processing/echo_detector/moving_max.cc'
source_filename = "../../third_party/webrtc/modules/audio_processing/echo_detector/moving_max.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%"class.webrtc::MovingMax" = type { float, i64, i64 }

@_ZN6webrtc9MovingMaxC1Em = hidden unnamed_addr alias void (%"class.webrtc::MovingMax"*, i64), void (%"class.webrtc::MovingMax"*, i64)* @_ZN6webrtc9MovingMaxC2Em
@_ZN6webrtc9MovingMaxD1Ev = hidden unnamed_addr alias void (%"class.webrtc::MovingMax"*), void (%"class.webrtc::MovingMax"*)* @_ZN6webrtc9MovingMaxD2Ev

; Function Attrs: nofree norecurse nounwind ssp uwtable writeonly
define hidden void @_ZN6webrtc9MovingMaxC2Em(%"class.webrtc::MovingMax"* nocapture, i64) unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.webrtc::MovingMax", %"class.webrtc::MovingMax"* %0, i64 0, i32 0
  store float 0.000000e+00, float* %3, align 8
  %4 = getelementptr inbounds %"class.webrtc::MovingMax", %"class.webrtc::MovingMax"* %0, i64 0, i32 1
  store i64 0, i64* %4, align 8
  %5 = getelementptr inbounds %"class.webrtc::MovingMax", %"class.webrtc::MovingMax"* %0, i64 0, i32 2
  store i64 %1, i64* %5, align 8
  ret void
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden void @_ZN6webrtc9MovingMaxD2Ev(%"class.webrtc::MovingMax"* nocapture) unnamed_addr #1 align 2 {
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @_ZN6webrtc9MovingMax6UpdateEf(%"class.webrtc::MovingMax"* nocapture, float) local_unnamed_addr #2 align 2 {
  %3 = getelementptr inbounds %"class.webrtc::MovingMax", %"class.webrtc::MovingMax"* %0, i64 0, i32 1
  %4 = load i64, i64* %3, align 8
  %5 = getelementptr inbounds %"class.webrtc::MovingMax", %"class.webrtc::MovingMax"* %0, i64 0, i32 2
  %6 = load i64, i64* %5, align 8
  %7 = add i64 %6, -1
  %8 = icmp ult i64 %4, %7
  br i1 %8, label %13, label %9

9:                                                ; preds = %2
  %10 = getelementptr inbounds %"class.webrtc::MovingMax", %"class.webrtc::MovingMax"* %0, i64 0, i32 0
  %11 = load float, float* %10, align 8
  %12 = fmul float %11, 0x3FEFAE1480000000
  store float %12, float* %10, align 8
  br label %17

13:                                               ; preds = %2
  %14 = add nuw i64 %4, 1
  store i64 %14, i64* %3, align 8
  %15 = getelementptr inbounds %"class.webrtc::MovingMax", %"class.webrtc::MovingMax"* %0, i64 0, i32 0
  %16 = load float, float* %15, align 8
  br label %17

17:                                               ; preds = %13, %9
  %18 = phi float [ %16, %13 ], [ %12, %9 ]
  %19 = fcmp olt float %18, %1
  br i1 %19, label %20, label %22

20:                                               ; preds = %17
  %21 = getelementptr inbounds %"class.webrtc::MovingMax", %"class.webrtc::MovingMax"* %0, i64 0, i32 0
  store float %1, float* %21, align 8
  store i64 0, i64* %3, align 8
  br label %22

22:                                               ; preds = %20, %17
  ret void
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden float @_ZNK6webrtc9MovingMax3maxEv(%"class.webrtc::MovingMax"* nocapture readonly) local_unnamed_addr #3 align 2 {
  %2 = getelementptr inbounds %"class.webrtc::MovingMax", %"class.webrtc::MovingMax"* %0, i64 0, i32 0
  %3 = load float, float* %2, align 8
  ret float %3
}

; Function Attrs: nofree norecurse nounwind ssp uwtable writeonly
define hidden void @_ZN6webrtc9MovingMax5ClearEv(%"class.webrtc::MovingMax"* nocapture) local_unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.webrtc::MovingMax", %"class.webrtc::MovingMax"* %0, i64 0, i32 0
  store float 0.000000e+00, float* %2, align 8
  %3 = getelementptr inbounds %"class.webrtc::MovingMax", %"class.webrtc::MovingMax"* %0, i64 0, i32 1
  store i64 0, i64* %3, align 8
  ret void
}

attributes #0 = { nofree norecurse nounwind ssp uwtable writeonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { norecurse nounwind readnone ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nofree norecurse nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { norecurse nounwind readonly ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
