; ModuleID = '../../ui/gfx/overlay_transform_utils.cc'
source_filename = "../../ui/gfx/overlay_transform_utils.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.gfx::Transform" = type { %class.SkMatrix44 }
%class.SkMatrix44 = type <{ [4 x [4 x float]], i8, [3 x i8] }>
%"class.gfx::SizeF" = type { float, float }
%class.SkMatrix = type { [9 x float], i32 }

@constinit = private unnamed_addr constant [4 x [4 x float]] [[4 x float] [float 1.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00], [4 x float] [float 0.000000e+00, float 1.000000e+00, float 0.000000e+00, float 0.000000e+00], [4 x float] [float 0.000000e+00, float 0.000000e+00, float 1.000000e+00, float 0.000000e+00], [4 x float] [float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 1.000000e+00]], align 4
@switch.table._ZN3gfx22InvertOverlayTransformENS_16OverlayTransformE = private unnamed_addr constant [5 x i32] [i32 2, i32 3, i32 6, i32 5, i32 4], align 4

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN3gfx27OverlayTransformToTransformENS_16OverlayTransformERKNS_5SizeFE(%"class.gfx::Transform"* noalias nocapture sret, i32, %"class.gfx::SizeF"* nocapture readonly dereferenceable(8)) local_unnamed_addr #0 {
  %4 = alloca %class.SkMatrix44, align 4
  %5 = alloca %class.SkMatrix, align 4
  %6 = alloca %class.SkMatrix44, align 4
  %7 = alloca %class.SkMatrix, align 16
  %8 = alloca %class.SkMatrix44, align 4
  %9 = alloca %class.SkMatrix, align 4
  %10 = alloca %class.SkMatrix44, align 4
  %11 = alloca %class.SkMatrix, align 4
  %12 = alloca %class.SkMatrix44, align 4
  %13 = alloca %class.SkMatrix, align 16
  switch i32 %1, label %101 [
    i32 0, label %14
    i32 1, label %17
    i32 2, label %20
    i32 3, label %35
    i32 4, label %50
    i32 5, label %66
    i32 6, label %87
  ]

14:                                               ; preds = %3
  %15 = bitcast %"class.gfx::Transform"* %0 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %15, i8* align 4 bitcast ([4 x [4 x float]]* @constinit to i8*), i64 64, i1 false) #4
  %16 = getelementptr inbounds %"class.gfx::Transform", %"class.gfx::Transform"* %0, i64 0, i32 0, i32 1
  store i8 0, i8* %16, align 4
  br label %104

17:                                               ; preds = %3
  %18 = bitcast %"class.gfx::Transform"* %0 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %18, i8* align 4 bitcast ([4 x [4 x float]]* @constinit to i8*), i64 64, i1 false) #4
  %19 = getelementptr inbounds %"class.gfx::Transform", %"class.gfx::Transform"* %0, i64 0, i32 0, i32 1
  store i8 0, i8* %19, align 4
  br label %104

20:                                               ; preds = %3
  %21 = bitcast %class.SkMatrix44* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 68, i8* nonnull %21) #4
  %22 = bitcast %class.SkMatrix* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %22) #4
  %23 = bitcast %"class.gfx::SizeF"* %2 to i32*
  %24 = load i32, i32* %23, align 4
  %25 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %5, i64 0, i32 1
  %26 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %5, i64 0, i32 0, i64 0
  %27 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %5, i64 0, i32 0, i64 1
  %28 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %5, i64 0, i32 0, i64 2
  %29 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %5, i64 0, i32 0, i64 3
  %30 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %5, i64 0, i32 0, i64 7
  %31 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %5, i64 0, i32 0, i64 8
  store float -1.000000e+00, float* %26, align 4, !alias.scope !2
  store float 0.000000e+00, float* %27, align 4, !alias.scope !2
  %32 = bitcast float* %28 to i32*
  store i32 %24, i32* %32, align 4, !alias.scope !2
  %33 = bitcast float* %29 to <4 x float>*
  store <4 x float> <float 0.000000e+00, float 1.000000e+00, float 0.000000e+00, float 0.000000e+00>, <4 x float>* %33, align 4, !alias.scope !2
  store float 0.000000e+00, float* %30, align 4, !alias.scope !2
  store float 1.000000e+00, float* %31, align 4, !alias.scope !2
  store i32 128, i32* %25, align 4, !alias.scope !2
  call void @_ZN10SkMatrix44C1ERK8SkMatrix(%class.SkMatrix44* nonnull %4, %class.SkMatrix* nonnull dereferenceable(40) %5) #4
  %34 = bitcast %"class.gfx::Transform"* %0 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %34, i8* nonnull align 4 %21, i64 68, i1 false) #4
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %22) #4
  call void @llvm.lifetime.end.p0i8(i64 68, i8* nonnull %21) #4
  br label %104

35:                                               ; preds = %3
  %36 = bitcast %class.SkMatrix44* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 68, i8* nonnull %36) #4
  %37 = bitcast %class.SkMatrix* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %37) #4
  %38 = getelementptr inbounds %"class.gfx::SizeF", %"class.gfx::SizeF"* %2, i64 0, i32 1
  %39 = bitcast float* %38 to i32*
  %40 = load i32, i32* %39, align 4
  %41 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %7, i64 0, i32 1
  %42 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %7, i64 0, i32 0, i64 4
  %43 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %7, i64 0, i32 0, i64 5
  %44 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %7, i64 0, i32 0, i64 6
  %45 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %7, i64 0, i32 0, i64 7
  %46 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %7, i64 0, i32 0, i64 8
  %47 = bitcast %class.SkMatrix* %7 to <4 x float>*
  store <4 x float> <float 1.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00>, <4 x float>* %47, align 16, !alias.scope !5
  store float -1.000000e+00, float* %42, align 16, !alias.scope !5
  %48 = bitcast float* %43 to i32*
  store i32 %40, i32* %48, align 4, !alias.scope !5
  store float 0.000000e+00, float* %44, align 8, !alias.scope !5
  store float 0.000000e+00, float* %45, align 4, !alias.scope !5
  store float 1.000000e+00, float* %46, align 16, !alias.scope !5
  store i32 128, i32* %41, align 4, !alias.scope !5
  call void @_ZN10SkMatrix44C1ERK8SkMatrix(%class.SkMatrix44* nonnull %6, %class.SkMatrix* nonnull dereferenceable(40) %7) #4
  %49 = bitcast %"class.gfx::Transform"* %0 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %49, i8* nonnull align 4 %36, i64 68, i1 false) #4
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %37) #4
  call void @llvm.lifetime.end.p0i8(i64 68, i8* nonnull %36) #4
  br label %104

50:                                               ; preds = %3
  %51 = bitcast %class.SkMatrix44* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 68, i8* nonnull %51) #4
  %52 = bitcast %class.SkMatrix* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %52) #4
  %53 = getelementptr inbounds %"class.gfx::SizeF", %"class.gfx::SizeF"* %2, i64 0, i32 1
  %54 = bitcast float* %53 to i32*
  %55 = load i32, i32* %54, align 4
  %56 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %9, i64 0, i32 1
  %57 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %9, i64 0, i32 0, i64 0
  %58 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %9, i64 0, i32 0, i64 1
  %59 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %9, i64 0, i32 0, i64 2
  %60 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %9, i64 0, i32 0, i64 3
  %61 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %9, i64 0, i32 0, i64 4
  %62 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %9, i64 0, i32 0, i64 8
  store float 0.000000e+00, float* %57, align 4, !alias.scope !8
  store float -1.000000e+00, float* %58, align 4, !alias.scope !8
  %63 = bitcast float* %59 to i32*
  store i32 %55, i32* %63, align 4, !alias.scope !8
  store float 1.000000e+00, float* %60, align 4, !alias.scope !8
  %64 = bitcast float* %61 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 4 %64, i8 0, i64 16, i1 false)
  store float 1.000000e+00, float* %62, align 4, !alias.scope !8
  store i32 128, i32* %56, align 4, !alias.scope !8
  call void @_ZN10SkMatrix44C1ERK8SkMatrix(%class.SkMatrix44* nonnull %8, %class.SkMatrix* nonnull dereferenceable(40) %9) #4
  %65 = bitcast %"class.gfx::Transform"* %0 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %65, i8* nonnull align 4 %51, i64 68, i1 false) #4
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %52) #4
  call void @llvm.lifetime.end.p0i8(i64 68, i8* nonnull %51) #4
  br label %104

66:                                               ; preds = %3
  %67 = bitcast %class.SkMatrix44* %10 to i8*
  call void @llvm.lifetime.start.p0i8(i64 68, i8* nonnull %67) #4
  %68 = bitcast %class.SkMatrix* %11 to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %68) #4
  %69 = bitcast %"class.gfx::SizeF"* %2 to i32*
  %70 = load i32, i32* %69, align 4
  %71 = getelementptr inbounds %"class.gfx::SizeF", %"class.gfx::SizeF"* %2, i64 0, i32 1
  %72 = bitcast float* %71 to i32*
  %73 = load i32, i32* %72, align 4
  %74 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %11, i64 0, i32 1
  %75 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %11, i64 0, i32 0, i64 0
  %76 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %11, i64 0, i32 0, i64 1
  %77 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %11, i64 0, i32 0, i64 2
  %78 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %11, i64 0, i32 0, i64 3
  %79 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %11, i64 0, i32 0, i64 4
  %80 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %11, i64 0, i32 0, i64 5
  %81 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %11, i64 0, i32 0, i64 6
  %82 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %11, i64 0, i32 0, i64 7
  %83 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %11, i64 0, i32 0, i64 8
  store float -1.000000e+00, float* %75, align 4, !alias.scope !11
  store float 0.000000e+00, float* %76, align 4, !alias.scope !11
  %84 = bitcast float* %77 to i32*
  store i32 %70, i32* %84, align 4, !alias.scope !11
  store float 0.000000e+00, float* %78, align 4, !alias.scope !11
  store float -1.000000e+00, float* %79, align 4, !alias.scope !11
  %85 = bitcast float* %80 to i32*
  store i32 %73, i32* %85, align 4, !alias.scope !11
  store float 0.000000e+00, float* %81, align 4, !alias.scope !11
  store float 0.000000e+00, float* %82, align 4, !alias.scope !11
  store float 1.000000e+00, float* %83, align 4, !alias.scope !11
  store i32 128, i32* %74, align 4, !alias.scope !11
  call void @_ZN10SkMatrix44C1ERK8SkMatrix(%class.SkMatrix44* nonnull %10, %class.SkMatrix* nonnull dereferenceable(40) %11) #4
  %86 = bitcast %"class.gfx::Transform"* %0 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %86, i8* nonnull align 4 %67, i64 68, i1 false) #4
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %68) #4
  call void @llvm.lifetime.end.p0i8(i64 68, i8* nonnull %67) #4
  br label %104

87:                                               ; preds = %3
  %88 = bitcast %class.SkMatrix44* %12 to i8*
  call void @llvm.lifetime.start.p0i8(i64 68, i8* nonnull %88) #4
  %89 = bitcast %class.SkMatrix* %13 to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %89) #4
  %90 = bitcast %"class.gfx::SizeF"* %2 to i32*
  %91 = load i32, i32* %90, align 4
  %92 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %13, i64 0, i32 1
  %93 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %13, i64 0, i32 0, i64 4
  %94 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %13, i64 0, i32 0, i64 5
  %95 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %13, i64 0, i32 0, i64 6
  %96 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %13, i64 0, i32 0, i64 7
  %97 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %13, i64 0, i32 0, i64 8
  %98 = bitcast %class.SkMatrix* %13 to <4 x float>*
  store <4 x float> <float 0.000000e+00, float 1.000000e+00, float 0.000000e+00, float -1.000000e+00>, <4 x float>* %98, align 16, !alias.scope !14
  store float 0.000000e+00, float* %93, align 16, !alias.scope !14
  %99 = bitcast float* %94 to i32*
  store i32 %91, i32* %99, align 4, !alias.scope !14
  store float 0.000000e+00, float* %95, align 8, !alias.scope !14
  store float 0.000000e+00, float* %96, align 4, !alias.scope !14
  store float 1.000000e+00, float* %97, align 16, !alias.scope !14
  store i32 128, i32* %92, align 4, !alias.scope !14
  call void @_ZN10SkMatrix44C1ERK8SkMatrix(%class.SkMatrix44* nonnull %12, %class.SkMatrix* nonnull dereferenceable(40) %13) #4
  %100 = bitcast %"class.gfx::Transform"* %0 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %100, i8* nonnull align 4 %88, i64 68, i1 false) #4
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %89) #4
  call void @llvm.lifetime.end.p0i8(i64 68, i8* nonnull %88) #4
  br label %104

101:                                              ; preds = %3
  %102 = bitcast %"class.gfx::Transform"* %0 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %102, i8* align 4 bitcast ([4 x [4 x float]]* @constinit to i8*), i64 64, i1 false) #4
  %103 = getelementptr inbounds %"class.gfx::Transform", %"class.gfx::Transform"* %0, i64 0, i32 0, i32 1
  store i8 0, i8* %103, align 4
  br label %104

104:                                              ; preds = %101, %87, %66, %50, %35, %20, %17, %14
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

declare void @_ZN10SkMatrix44C1ERK8SkMatrix(%class.SkMatrix44*, %class.SkMatrix* dereferenceable(40)) unnamed_addr #2

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden i32 @_ZN3gfx22InvertOverlayTransformENS_16OverlayTransformE(i32) local_unnamed_addr #3 {
  %2 = add i32 %0, -2
  %3 = icmp ult i32 %2, 5
  br i1 %3, label %4, label %8

4:                                                ; preds = %1
  %5 = sext i32 %2 to i64
  %6 = getelementptr inbounds [5 x i32], [5 x i32]* @switch.table._ZN3gfx22InvertOverlayTransformENS_16OverlayTransformE, i64 0, i64 %5
  %7 = load i32, i32* %6, align 4
  ret i32 %7

8:                                                ; preds = %1
  ret i32 1
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { norecurse nounwind readnone ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{!3}
!3 = distinct !{!3, !4, !"_ZN8SkMatrix7MakeAllEfffffffff: argument 0"}
!4 = distinct !{!4, !"_ZN8SkMatrix7MakeAllEfffffffff"}
!5 = !{!6}
!6 = distinct !{!6, !7, !"_ZN8SkMatrix7MakeAllEfffffffff: argument 0"}
!7 = distinct !{!7, !"_ZN8SkMatrix7MakeAllEfffffffff"}
!8 = !{!9}
!9 = distinct !{!9, !10, !"_ZN8SkMatrix7MakeAllEfffffffff: argument 0"}
!10 = distinct !{!10, !"_ZN8SkMatrix7MakeAllEfffffffff"}
!11 = !{!12}
!12 = distinct !{!12, !13, !"_ZN8SkMatrix7MakeAllEfffffffff: argument 0"}
!13 = distinct !{!13, !"_ZN8SkMatrix7MakeAllEfffffffff"}
!14 = !{!15}
!15 = distinct !{!15, !16, !"_ZN8SkMatrix7MakeAllEfffffffff: argument 0"}
!16 = distinct !{!16, !"_ZN8SkMatrix7MakeAllEfffffffff"}
