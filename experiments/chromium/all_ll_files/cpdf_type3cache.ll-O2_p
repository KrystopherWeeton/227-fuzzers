; ModuleID = '../../third_party/pdfium/core/fpdfapi/render/cpdf_type3cache.cpp'
source_filename = "../../third_party/pdfium/core/fpdfapi/render/cpdf_type3cache.cpp"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"struct.std::__1::piecewise_construct_t" = type { i8 }
%class.CPDF_Type3Cache = type { %"class.fxcrt::Retainable", %"class.fxcrt::Observable", %"class.fxcrt::RetainPtr", %"class.std::__1::map.130" }
%"class.fxcrt::Retainable" = type { i32 (...)**, i64 }
%"class.fxcrt::Observable" = type { %"class.std::__1::set" }
%"class.std::__1::set" = type { %"class.std::__1::__tree" }
%"class.std::__1::__tree" = type { %"class.std::__1::__tree_end_node"*, %"class.std::__1::__compressed_pair", %"class.std::__1::__compressed_pair.1" }
%"class.std::__1::__tree_end_node" = type { %"class.std::__1::__tree_node_base"* }
%"class.std::__1::__tree_node_base" = type <{ %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_end_node"*, i8, [7 x i8] }>
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %"class.std::__1::__tree_end_node" }
%"class.std::__1::__compressed_pair.1" = type { %"struct.std::__1::__compressed_pair_elem.2" }
%"struct.std::__1::__compressed_pair_elem.2" = type { i64 }
%"class.fxcrt::RetainPtr" = type { %"class.std::__1::unique_ptr" }
%"class.std::__1::unique_ptr" = type { %"class.std::__1::__compressed_pair.4" }
%"class.std::__1::__compressed_pair.4" = type { %"struct.std::__1::__compressed_pair_elem.5" }
%"struct.std::__1::__compressed_pair_elem.5" = type { %class.CPDF_Type3Font* }
%"class.std::__1::map.130" = type { %"class.std::__1::__tree.131" }
%"class.std::__1::__tree.131" = type { %"class.std::__1::__tree_end_node"*, %"class.std::__1::__compressed_pair.132", %"class.std::__1::__compressed_pair.136" }
%"class.std::__1::__compressed_pair.132" = type { %"struct.std::__1::__compressed_pair_elem" }
%"class.std::__1::__compressed_pair.136" = type { %"struct.std::__1::__compressed_pair_elem.2" }
%class.CPDF_Type3Font = type { %class.CPDF_SimpleFont, i32, %class.CFX_Matrix, %"class.fxcrt::UnownedPtr.116", %"class.fxcrt::RetainPtr.97", %"class.fxcrt::RetainPtr.97", %"class.fxcrt::RetainPtr.97", %"class.std::__1::map.117", [256 x i32] }
%class.CPDF_SimpleFont = type { %class.CPDF_Font, %class.CPDF_FontEncoding, i32, i8, %"class.std::__1::vector.109", [256 x i16], [256 x i16], [256 x %struct.FX_RECT] }
%class.CPDF_Font = type { %"class.fxcrt::Retainable", %"class.fxcrt::Observable", %"class.fxcrt::UnownedPtr", %class.CFX_Font, %"class.std::__1::vector.50", %"class.fxcrt::RetainPtr.58", %"class.fxcrt::RetainPtr.97", %"class.fxcrt::ByteString", %"class.std::__1::unique_ptr.103", i8, i32, i32, i32, i32, i32, %struct.FX_RECT }
%"class.fxcrt::UnownedPtr" = type { %class.CPDF_Document* }
%class.CPDF_Document = type opaque
%class.CFX_Font = type <{ %"class.fxcrt::RetainPtr.6", %"class.std::__1::unique_ptr.11", %"class.fxcrt::RetainPtr.15", %"class.fxcrt::RetainPtr.31", %"class.std::__1::unique_ptr.37", %"class.std::__1::unique_ptr.43", %"class.std::__1::vector", %"class.pdfium::span", i8, i8, [6 x i8] }>
%"class.fxcrt::RetainPtr.6" = type { %"class.std::__1::unique_ptr.7" }
%"class.std::__1::unique_ptr.7" = type { %"class.std::__1::__compressed_pair.8" }
%"class.std::__1::__compressed_pair.8" = type { %"struct.std::__1::__compressed_pair_elem.9" }
%"struct.std::__1::__compressed_pair_elem.9" = type { %class.IFX_SeekableReadStream* }
%class.IFX_SeekableReadStream = type opaque
%"class.std::__1::unique_ptr.11" = type { %"class.std::__1::__compressed_pair.12" }
%"class.std::__1::__compressed_pair.12" = type { %"struct.std::__1::__compressed_pair_elem.13" }
%"struct.std::__1::__compressed_pair_elem.13" = type { %struct.FT_StreamRec_* }
%struct.FT_StreamRec_ = type { i8*, i64, i64, %union.FT_StreamDesc_, %union.FT_StreamDesc_, i64 (%struct.FT_StreamRec_*, i64, i8*, i64)*, void (%struct.FT_StreamRec_*)*, %struct.FT_MemoryRec_*, i8*, i8* }
%union.FT_StreamDesc_ = type { i64 }
%struct.FT_MemoryRec_ = type { i8*, i8* (%struct.FT_MemoryRec_*, i64)*, void (%struct.FT_MemoryRec_*, i8*)*, i8* (%struct.FT_MemoryRec_*, i64, i64, i8*)* }
%"class.fxcrt::RetainPtr.15" = type { %"class.std::__1::unique_ptr.16" }
%"class.std::__1::unique_ptr.16" = type { %"class.std::__1::__compressed_pair.17" }
%"class.std::__1::__compressed_pair.17" = type { %"struct.std::__1::__compressed_pair_elem.18" }
%"struct.std::__1::__compressed_pair_elem.18" = type { %class.CFX_Face* }
%class.CFX_Face = type { %"class.fxcrt::Retainable", %"class.fxcrt::Observable", %"class.std::__1::unique_ptr.19", %"class.fxcrt::RetainPtr.23" }
%"class.std::__1::unique_ptr.19" = type { %"class.std::__1::__compressed_pair.20" }
%"class.std::__1::__compressed_pair.20" = type { %"struct.std::__1::__compressed_pair_elem.21" }
%"struct.std::__1::__compressed_pair_elem.21" = type { %struct.FT_FaceRec_* }
%struct.FT_FaceRec_ = type { i64, i64, i64, i64, i64, i8*, i8*, i32, %struct.FT_Bitmap_Size_*, i32, %struct.FT_CharMapRec_**, %struct.FT_Generic_, %struct.FT_BBox_, i16, i16, i16, i16, i16, i16, i16, i16, %struct.FT_GlyphSlotRec_*, %struct.FT_SizeRec_*, %struct.FT_CharMapRec_*, %struct.FT_DriverRec_*, %struct.FT_MemoryRec_*, %struct.FT_StreamRec_*, %struct.FT_ListRec_, %struct.FT_Generic_, i8*, %struct.FT_Face_InternalRec_* }
%struct.FT_Bitmap_Size_ = type { i16, i16, i64, i64, i64 }
%struct.FT_BBox_ = type { i64, i64, i64, i64 }
%struct.FT_GlyphSlotRec_ = type { %struct.FT_LibraryRec_*, %struct.FT_FaceRec_*, %struct.FT_GlyphSlotRec_*, i32, %struct.FT_Generic_, %struct.FT_Glyph_Metrics_, i64, i64, %struct.FT_Vector_, i32, %struct.FT_Bitmap_, i32, i32, %struct.FT_Outline_, i32, %struct.FT_SubGlyphRec_*, i8*, i64, i64, i64, i8*, %struct.FT_Slot_InternalRec_* }
%struct.FT_LibraryRec_ = type opaque
%struct.FT_Glyph_Metrics_ = type { i64, i64, i64, i64, i64, i64, i64, i64 }
%struct.FT_Vector_ = type { i64, i64 }
%struct.FT_Bitmap_ = type { i32, i32, i32, i8*, i16, i8, i8, i8* }
%struct.FT_Outline_ = type { i16, i16, %struct.FT_Vector_*, i8*, i16*, i32 }
%struct.FT_SubGlyphRec_ = type opaque
%struct.FT_Slot_InternalRec_ = type opaque
%struct.FT_SizeRec_ = type { %struct.FT_FaceRec_*, %struct.FT_Generic_, %struct.FT_Size_Metrics_, %struct.FT_Size_InternalRec_* }
%struct.FT_Size_Metrics_ = type { i16, i16, i64, i64, i64, i64, i64, i64 }
%struct.FT_Size_InternalRec_ = type opaque
%struct.FT_CharMapRec_ = type { %struct.FT_FaceRec_*, i32, i16, i16 }
%struct.FT_DriverRec_ = type opaque
%struct.FT_ListRec_ = type { %struct.FT_ListNodeRec_*, %struct.FT_ListNodeRec_* }
%struct.FT_ListNodeRec_ = type { %struct.FT_ListNodeRec_*, %struct.FT_ListNodeRec_*, i8* }
%struct.FT_Generic_ = type { i8*, void (i8*)* }
%struct.FT_Face_InternalRec_ = type opaque
%"class.fxcrt::RetainPtr.23" = type { %"class.std::__1::unique_ptr.24" }
%"class.std::__1::unique_ptr.24" = type { %"class.std::__1::__compressed_pair.25" }
%"class.std::__1::__compressed_pair.25" = type { %"struct.std::__1::__compressed_pair_elem.26" }
%"struct.std::__1::__compressed_pair_elem.26" = type { %"class.fxcrt::Retainable"* }
%"class.fxcrt::RetainPtr.31" = type { %"class.std::__1::unique_ptr.32" }
%"class.std::__1::unique_ptr.32" = type { %"class.std::__1::__compressed_pair.33" }
%"class.std::__1::__compressed_pair.33" = type { %"struct.std::__1::__compressed_pair_elem.34" }
%"struct.std::__1::__compressed_pair_elem.34" = type { %class.CFX_GlyphCache* }
%class.CFX_GlyphCache = type opaque
%"class.std::__1::unique_ptr.37" = type { %"class.std::__1::__compressed_pair.38" }
%"class.std::__1::__compressed_pair.38" = type { %"struct.std::__1::__compressed_pair_elem.39" }
%"struct.std::__1::__compressed_pair_elem.39" = type { %class.CFX_SubstFont* }
%class.CFX_SubstFont = type opaque
%"class.std::__1::unique_ptr.43" = type { %"class.std::__1::__compressed_pair.44" }
%"class.std::__1::__compressed_pair.44" = type { %"struct.std::__1::__compressed_pair_elem.45" }
%"struct.std::__1::__compressed_pair_elem.45" = type { i8* }
%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { i8*, i8*, %"class.std::__1::__compressed_pair.47" }
%"class.std::__1::__compressed_pair.47" = type { %"struct.std::__1::__compressed_pair_elem.45" }
%"class.pdfium::span" = type { %"class.fxcrt::UnownedPtr.49", i64 }
%"class.fxcrt::UnownedPtr.49" = type { i8* }
%"class.std::__1::vector.50" = type { %"class.std::__1::__vector_base.51" }
%"class.std::__1::__vector_base.51" = type { %"class.std::__1::unique_ptr.52"*, %"class.std::__1::unique_ptr.52"*, %"class.std::__1::__compressed_pair.53" }
%"class.std::__1::unique_ptr.52" = type opaque
%"class.std::__1::__compressed_pair.53" = type { %"struct.std::__1::__compressed_pair_elem.54" }
%"struct.std::__1::__compressed_pair_elem.54" = type { %"class.std::__1::unique_ptr.52"* }
%"class.fxcrt::RetainPtr.58" = type { %"class.std::__1::unique_ptr.59" }
%"class.std::__1::unique_ptr.59" = type { %"class.std::__1::__compressed_pair.60" }
%"class.std::__1::__compressed_pair.60" = type { %"struct.std::__1::__compressed_pair_elem.61" }
%"struct.std::__1::__compressed_pair_elem.61" = type { %class.CPDF_StreamAcc* }
%class.CPDF_StreamAcc = type { %"class.fxcrt::Retainable", %"class.fxcrt::MaybeOwned", i32, %"class.fxcrt::ByteString", %"class.fxcrt::RetainPtr.68", %"class.fxcrt::RetainPtr.89" }
%"class.fxcrt::MaybeOwned" = type { %"class.std::__1::unique_ptr.43", %"class.fxcrt::UnownedPtr.49" }
%"class.fxcrt::RetainPtr.68" = type { %"class.std::__1::unique_ptr.69" }
%"class.std::__1::unique_ptr.69" = type { %"class.std::__1::__compressed_pair.70" }
%"class.std::__1::__compressed_pair.70" = type { %"struct.std::__1::__compressed_pair_elem.71" }
%"struct.std::__1::__compressed_pair_elem.71" = type { %class.CPDF_Dictionary* }
%class.CPDF_Dictionary = type { %class.CPDF_Object, i32, %"class.fxcrt::WeakPtr", %"class.std::__1::map" }
%class.CPDF_Object = type { %"class.fxcrt::Retainable", i32, i32 }
%"class.fxcrt::WeakPtr" = type { %"class.fxcrt::RetainPtr.72" }
%"class.fxcrt::RetainPtr.72" = type { %"class.std::__1::unique_ptr.73" }
%"class.std::__1::unique_ptr.73" = type { %"class.std::__1::__compressed_pair.74" }
%"class.std::__1::__compressed_pair.74" = type { %"struct.std::__1::__compressed_pair_elem.75" }
%"struct.std::__1::__compressed_pair_elem.75" = type { %"class.fxcrt::WeakPtr<fxcrt::StringPoolTemplate<fxcrt::ByteString>, std::__1::default_delete<fxcrt::StringPoolTemplate<fxcrt::ByteString> > >::Handle"* }
%"class.fxcrt::WeakPtr<fxcrt::StringPoolTemplate<fxcrt::ByteString>, std::__1::default_delete<fxcrt::StringPoolTemplate<fxcrt::ByteString> > >::Handle" = type { i64, %"class.std::__1::unique_ptr.188" }
%"class.std::__1::unique_ptr.188" = type { %"class.std::__1::__compressed_pair.189" }
%"class.std::__1::__compressed_pair.189" = type { %"struct.std::__1::__compressed_pair_elem.190" }
%"struct.std::__1::__compressed_pair_elem.190" = type { %"class.fxcrt::StringPoolTemplate"* }
%"class.fxcrt::StringPoolTemplate" = type { %"class.std::__1::unordered_set" }
%"class.std::__1::unordered_set" = type { %"class.std::__1::__hash_table" }
%"class.std::__1::__hash_table" = type <{ %"class.std::__1::unique_ptr.191", %"class.std::__1::__compressed_pair.199", %"class.std::__1::__compressed_pair.204", %"class.std::__1::__compressed_pair.206", [4 x i8] }>
%"class.std::__1::unique_ptr.191" = type { %"class.std::__1::__compressed_pair.192" }
%"class.std::__1::__compressed_pair.192" = type { %"struct.std::__1::__compressed_pair_elem.193", %"struct.std::__1::__compressed_pair_elem.194" }
%"struct.std::__1::__compressed_pair_elem.193" = type { %"struct.std::__1::__hash_node_base"** }
%"struct.std::__1::__hash_node_base" = type { %"struct.std::__1::__hash_node_base"* }
%"struct.std::__1::__compressed_pair_elem.194" = type { %"class.std::__1::__bucket_list_deallocator" }
%"class.std::__1::__bucket_list_deallocator" = type { %"class.std::__1::__compressed_pair.195" }
%"class.std::__1::__compressed_pair.195" = type { %"struct.std::__1::__compressed_pair_elem.2" }
%"class.std::__1::__compressed_pair.199" = type { %"struct.std::__1::__compressed_pair_elem.200" }
%"struct.std::__1::__compressed_pair_elem.200" = type { %"struct.std::__1::__hash_node_base" }
%"class.std::__1::__compressed_pair.204" = type { %"struct.std::__1::__compressed_pair_elem.2" }
%"class.std::__1::__compressed_pair.206" = type { %"struct.std::__1::__compressed_pair_elem.207" }
%"struct.std::__1::__compressed_pair_elem.207" = type { float }
%"class.std::__1::map" = type { %"class.std::__1::__tree.78" }
%"class.std::__1::__tree.78" = type { %"class.std::__1::__tree_end_node"*, %"class.std::__1::__compressed_pair.79", %"class.std::__1::__compressed_pair.83" }
%"class.std::__1::__compressed_pair.79" = type { %"struct.std::__1::__compressed_pair_elem" }
%"class.std::__1::__compressed_pair.83" = type { %"struct.std::__1::__compressed_pair_elem.2" }
%"class.fxcrt::RetainPtr.89" = type { %"class.std::__1::unique_ptr.90" }
%"class.std::__1::unique_ptr.90" = type { %"class.std::__1::__compressed_pair.91" }
%"class.std::__1::__compressed_pair.91" = type { %"struct.std::__1::__compressed_pair_elem.92" }
%"struct.std::__1::__compressed_pair_elem.92" = type { %class.CPDF_Stream* }
%class.CPDF_Stream = type opaque
%"class.fxcrt::ByteString" = type { %"class.fxcrt::RetainPtr.62" }
%"class.fxcrt::RetainPtr.62" = type { %"class.std::__1::unique_ptr.63" }
%"class.std::__1::unique_ptr.63" = type { %"class.std::__1::__compressed_pair.64" }
%"class.std::__1::__compressed_pair.64" = type { %"struct.std::__1::__compressed_pair_elem.65" }
%"struct.std::__1::__compressed_pair_elem.65" = type { %"class.fxcrt::StringDataTemplate"* }
%"class.fxcrt::StringDataTemplate" = type <{ i64, i64, i64, [1 x i8], [7 x i8] }>
%"class.std::__1::unique_ptr.103" = type { %"class.std::__1::__compressed_pair.104" }
%"class.std::__1::__compressed_pair.104" = type { %"struct.std::__1::__compressed_pair_elem.105" }
%"struct.std::__1::__compressed_pair_elem.105" = type { %class.CPDF_ToUnicodeMap* }
%class.CPDF_ToUnicodeMap = type opaque
%struct.FX_RECT = type { i32, i32, i32, i32 }
%class.CPDF_FontEncoding = type { [256 x i32] }
%"class.std::__1::vector.109" = type { %"class.std::__1::__vector_base.110" }
%"class.std::__1::__vector_base.110" = type { %"class.fxcrt::ByteString"*, %"class.fxcrt::ByteString"*, %"class.std::__1::__compressed_pair.111" }
%"class.std::__1::__compressed_pair.111" = type { %"struct.std::__1::__compressed_pair_elem.112" }
%"struct.std::__1::__compressed_pair_elem.112" = type { %"class.fxcrt::ByteString"* }
%class.CFX_Matrix = type { float, float, float, float, float, float }
%"class.fxcrt::UnownedPtr.116" = type { %"class.CPDF_Font::FormFactoryIface"* }
%"class.CPDF_Font::FormFactoryIface" = type { i32 (...)** }
%"class.fxcrt::RetainPtr.97" = type { %"class.std::__1::unique_ptr.98" }
%"class.std::__1::unique_ptr.98" = type { %"class.std::__1::__compressed_pair.99" }
%"class.std::__1::__compressed_pair.99" = type { %"struct.std::__1::__compressed_pair_elem.100" }
%"struct.std::__1::__compressed_pair_elem.100" = type { %class.CPDF_Dictionary* }
%"class.std::__1::map.117" = type { %"class.std::__1::__tree.118" }
%"class.std::__1::__tree.118" = type { %"class.std::__1::__tree_end_node"*, %"class.std::__1::__compressed_pair.119", %"class.std::__1::__compressed_pair.123" }
%"class.std::__1::__compressed_pair.119" = type { %"struct.std::__1::__compressed_pair_elem" }
%"class.std::__1::__compressed_pair.123" = type { %"struct.std::__1::__compressed_pair_elem.2" }
%"class.std::__1::__tree_node" = type { %"class.std::__1::__tree_node_base.base", %"struct.std::__1::__value_type" }
%"class.std::__1::__tree_node_base.base" = type <{ %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_end_node"*, i8 }>
%"struct.std::__1::__value_type" = type { %"struct.std::__1::pair" }
%"struct.std::__1::pair" = type { %"class.fxcrt::ByteString", %"class.std::__1::unique_ptr.168" }
%"class.std::__1::unique_ptr.168" = type { %"class.std::__1::__compressed_pair.169" }
%"class.std::__1::__compressed_pair.169" = type { %"struct.std::__1::__compressed_pair_elem.170" }
%"struct.std::__1::__compressed_pair_elem.170" = type { %class.CPDF_Type3GlyphMap* }
%class.CPDF_Type3GlyphMap = type { %"class.std::__1::vector.152", %"class.std::__1::vector.152", %"class.std::__1::map.159" }
%"class.std::__1::vector.152" = type { %"class.std::__1::__vector_base.153" }
%"class.std::__1::__vector_base.153" = type { i32*, i32*, %"class.std::__1::__compressed_pair.154" }
%"class.std::__1::__compressed_pair.154" = type { %"struct.std::__1::__compressed_pair_elem.155" }
%"struct.std::__1::__compressed_pair_elem.155" = type { i32* }
%"class.std::__1::map.159" = type { %"class.std::__1::__tree.160" }
%"class.std::__1::__tree.160" = type { %"class.std::__1::__tree_end_node"*, %"class.std::__1::__compressed_pair.161", %"class.std::__1::__compressed_pair.165" }
%"class.std::__1::__compressed_pair.161" = type { %"struct.std::__1::__compressed_pair_elem" }
%"class.std::__1::__compressed_pair.165" = type { %"struct.std::__1::__compressed_pair_elem.2" }
%class.CFX_GlyphBitmap = type { i32, i32, %"class.fxcrt::RetainPtr.139" }
%"class.fxcrt::RetainPtr.139" = type { %"class.std::__1::unique_ptr.140" }
%"class.std::__1::unique_ptr.140" = type { %"class.std::__1::__compressed_pair.141" }
%"class.std::__1::__compressed_pair.141" = type { %"struct.std::__1::__compressed_pair_elem.142" }
%"struct.std::__1::__compressed_pair_elem.142" = type { %class.CFX_DIBitmap* }
%class.CFX_DIBitmap = type { %class.CFX_DIBBase, %"class.fxcrt::MaybeOwned" }
%class.CFX_DIBBase = type { %"class.fxcrt::Retainable", i16, i32, i32, i32, %"class.fxcrt::RetainPtr.139", %"class.std::__1::vector.145" }
%"class.std::__1::vector.145" = type { %"class.std::__1::__vector_base.146" }
%"class.std::__1::__vector_base.146" = type { i32*, i32*, %"class.std::__1::__compressed_pair.147" }
%"class.std::__1::__compressed_pair.147" = type { %"struct.std::__1::__compressed_pair_elem.148" }
%"struct.std::__1::__compressed_pair_elem.148" = type { i32* }
%"class.std::__1::tuple.215" = type { %"struct.std::__1::__tuple_impl.216" }
%"struct.std::__1::__tuple_impl.216" = type { %"class.std::__1::__tuple_leaf.217" }
%"class.std::__1::__tuple_leaf.217" = type { %"class.fxcrt::ByteString"* }
%"class.std::__1::tuple.218" = type { i8 }
%"struct.(anonymous namespace)::UniqueKeyGen" = type { i32, [128 x i8] }
%struct.__va_list_tag = type { i32, i32, i8*, i8* }
%struct.FXDIB_ResampleOptions = type { i8, i8, i8, i8 }
%class.CPDF_Type3Char = type { %"class.std::__1::unique_ptr.180", %"class.fxcrt::RetainPtr.139", i8, i32, %class.CFX_Matrix, %struct.FX_RECT }
%"class.std::__1::unique_ptr.180" = type { %"class.std::__1::__compressed_pair.181" }
%"class.std::__1::__compressed_pair.181" = type { %"struct.std::__1::__compressed_pair_elem.182" }
%"struct.std::__1::__compressed_pair_elem.182" = type { %"class.CPDF_Font::FormIface"* }
%"class.CPDF_Font::FormIface" = type { i32 (...)** }

$_ZN5fxcrt10RetainableD2Ev = comdat any

$_ZN5fxcrt10RetainableD0Ev = comdat any

$_ZNSt3__16__treeINS_12__value_typeIN5fxcrt10ByteStringENS_10unique_ptrI18CPDF_Type3GlyphMapNS_14default_deleteIS5_EEEEEENS_19__map_value_compareIS3_S9_NS_4lessIS3_EELb1EEENS_9allocatorIS9_EEE7destroyEPNS_11__tree_nodeIS9_PvEE = comdat any

$_ZNSt3__16__treeINS_12__value_typeIN5fxcrt10ByteStringENS_10unique_ptrI18CPDF_Type3GlyphMapNS_14default_deleteIS5_EEEEEENS_19__map_value_compareIS3_S9_NS_4lessIS3_EELb1EEENS_9allocatorIS9_EEE25__emplace_unique_key_argsIS3_JRKNS_21piecewise_construct_tENS_5tupleIJRKS3_EEENSL_IJEEEEEENS_4pairINS_15__tree_iteratorIS9_PNS_11__tree_nodeIS9_PvEElEEbEERKT_DpOT0_ = comdat any

$_ZNSt3__127__tree_balance_after_insertIPNS_16__tree_node_baseIPvEEEEvT_S5_ = comdat any

$_ZTVN5fxcrt10RetainableE = comdat any

@_ZTV15CPDF_Type3Cache = hidden unnamed_addr constant { [4 x i8*] } { [4 x i8*] [i8* null, i8* null, i8* bitcast (void (%class.CPDF_Type3Cache*)* @_ZN15CPDF_Type3CacheD2Ev to i8*), i8* bitcast (void (%class.CPDF_Type3Cache*)* @_ZN15CPDF_Type3CacheD0Ev to i8*)] }, align 8
@_ZTVN5fxcrt10RetainableE = linkonce_odr hidden unnamed_addr constant { [4 x i8*] } { [4 x i8*] [i8* null, i8* null, i8* bitcast (void (%"class.fxcrt::Retainable"*)* @_ZN5fxcrt10RetainableD2Ev to i8*), i8* bitcast (void (%"class.fxcrt::Retainable"*)* @_ZN5fxcrt10RetainableD0Ev to i8*)] }, comdat, align 8
@_ZNSt3__1L19piecewise_constructE = internal constant %"struct.std::__1::piecewise_construct_t" undef, align 1

@_ZN15CPDF_Type3CacheC1EP14CPDF_Type3Font = hidden unnamed_addr alias void (%class.CPDF_Type3Cache*, %class.CPDF_Type3Font*), void (%class.CPDF_Type3Cache*, %class.CPDF_Type3Font*)* @_ZN15CPDF_Type3CacheC2EP14CPDF_Type3Font
@_ZN15CPDF_Type3CacheD1Ev = hidden unnamed_addr alias void (%class.CPDF_Type3Cache*), void (%class.CPDF_Type3Cache*)* @_ZN15CPDF_Type3CacheD2Ev

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN15CPDF_Type3CacheC2EP14CPDF_Type3Font(%class.CPDF_Type3Cache*, %class.CPDF_Type3Font*) unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %class.CPDF_Type3Cache, %class.CPDF_Type3Cache* %0, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [4 x i8*] }, { [4 x i8*] }* @_ZTVN5fxcrt10RetainableE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %3, align 8
  %4 = getelementptr inbounds %class.CPDF_Type3Cache, %class.CPDF_Type3Cache* %0, i64 0, i32 0, i32 1
  store i64 0, i64* %4, align 8
  %5 = getelementptr inbounds %class.CPDF_Type3Cache, %class.CPDF_Type3Cache* %0, i64 0, i32 1
  tail call void @_ZN5fxcrt10ObservableC2Ev(%"class.fxcrt::Observable"* %5) #5
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [4 x i8*] }, { [4 x i8*] }* @_ZTV15CPDF_Type3Cache, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %3, align 8
  %6 = getelementptr inbounds %class.CPDF_Type3Cache, %class.CPDF_Type3Cache* %0, i64 0, i32 2
  %7 = ptrtoint %class.CPDF_Type3Font* %1 to i64
  %8 = bitcast %"class.fxcrt::RetainPtr"* %6 to i64*
  store i64 %7, i64* %8, align 8
  %9 = icmp eq %class.CPDF_Type3Font* %1, null
  br i1 %9, label %14, label %10

10:                                               ; preds = %2
  %11 = getelementptr inbounds %class.CPDF_Type3Font, %class.CPDF_Type3Font* %1, i64 0, i32 0, i32 0, i32 0, i32 1
  %12 = load i64, i64* %11, align 8
  %13 = add nsw i64 %12, 1
  store i64 %13, i64* %11, align 8
  br label %14

14:                                               ; preds = %2, %10
  %15 = getelementptr inbounds %class.CPDF_Type3Cache, %class.CPDF_Type3Cache* %0, i64 0, i32 3, i32 0, i32 1, i32 0, i32 0, i32 0
  %16 = getelementptr inbounds %class.CPDF_Type3Cache, %class.CPDF_Type3Cache* %0, i64 0, i32 3, i32 0, i32 1, i32 0, i32 0
  %17 = getelementptr inbounds %class.CPDF_Type3Cache, %class.CPDF_Type3Cache* %0, i64 0, i32 3, i32 0, i32 0
  %18 = bitcast %"class.std::__1::__tree_node_base"** %15 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %18, i8 0, i64 16, i1 false) #5
  store %"class.std::__1::__tree_end_node"* %16, %"class.std::__1::__tree_end_node"** %17, align 8
  ret void
}

declare void @_ZN5fxcrt10ObservableC2Ev(%"class.fxcrt::Observable"*) unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN15CPDF_Type3CacheD2Ev(%class.CPDF_Type3Cache*) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %class.CPDF_Type3Cache, %class.CPDF_Type3Cache* %0, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [4 x i8*] }, { [4 x i8*] }* @_ZTV15CPDF_Type3Cache, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8
  %3 = getelementptr inbounds %class.CPDF_Type3Cache, %class.CPDF_Type3Cache* %0, i64 0, i32 3, i32 0
  %4 = getelementptr inbounds %class.CPDF_Type3Cache, %class.CPDF_Type3Cache* %0, i64 0, i32 3, i32 0, i32 1, i32 0, i32 0
  %5 = bitcast %"class.std::__1::__tree_end_node"* %4 to %"class.std::__1::__tree_node"**
  %6 = load %"class.std::__1::__tree_node"*, %"class.std::__1::__tree_node"** %5, align 8
  tail call void @_ZNSt3__16__treeINS_12__value_typeIN5fxcrt10ByteStringENS_10unique_ptrI18CPDF_Type3GlyphMapNS_14default_deleteIS5_EEEEEENS_19__map_value_compareIS3_S9_NS_4lessIS3_EELb1EEENS_9allocatorIS9_EEE7destroyEPNS_11__tree_nodeIS9_PvEE(%"class.std::__1::__tree.131"* %3, %"class.std::__1::__tree_node"* %6) #5
  %7 = getelementptr inbounds %class.CPDF_Type3Cache, %class.CPDF_Type3Cache* %0, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0
  %8 = load %class.CPDF_Type3Font*, %class.CPDF_Type3Font** %7, align 8
  store %class.CPDF_Type3Font* null, %class.CPDF_Type3Font** %7, align 8
  %9 = icmp eq %class.CPDF_Type3Font* %8, null
  br i1 %9, label %21, label %10

10:                                               ; preds = %1
  %11 = getelementptr inbounds %class.CPDF_Type3Font, %class.CPDF_Type3Font* %8, i64 0, i32 0, i32 0, i32 0, i32 1
  %12 = load i64, i64* %11, align 8
  %13 = add nsw i64 %12, -1
  store i64 %13, i64* %11, align 8
  %14 = icmp eq i64 %13, 0
  br i1 %14, label %15, label %21

15:                                               ; preds = %10
  %16 = getelementptr inbounds %class.CPDF_Type3Font, %class.CPDF_Type3Font* %8, i64 0, i32 0, i32 0, i32 0
  %17 = bitcast %class.CPDF_Type3Font* %8 to void (%"class.fxcrt::Retainable"*)***
  %18 = load void (%"class.fxcrt::Retainable"*)**, void (%"class.fxcrt::Retainable"*)*** %17, align 8
  %19 = getelementptr inbounds void (%"class.fxcrt::Retainable"*)*, void (%"class.fxcrt::Retainable"*)** %18, i64 1
  %20 = load void (%"class.fxcrt::Retainable"*)*, void (%"class.fxcrt::Retainable"*)** %19, align 8
  tail call void %20(%"class.fxcrt::Retainable"* nonnull %16) #5
  br label %21

21:                                               ; preds = %1, %10, %15
  %22 = getelementptr inbounds %class.CPDF_Type3Cache, %class.CPDF_Type3Cache* %0, i64 0, i32 1
  tail call void @_ZN5fxcrt10ObservableD2Ev(%"class.fxcrt::Observable"* %22) #5
  ret void
}

; Function Attrs: nounwind
declare void @_ZN5fxcrt10ObservableD2Ev(%"class.fxcrt::Observable"*) unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN15CPDF_Type3CacheD0Ev(%class.CPDF_Type3Cache*) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %class.CPDF_Type3Cache, %class.CPDF_Type3Cache* %0, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [4 x i8*] }, { [4 x i8*] }* @_ZTV15CPDF_Type3Cache, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8
  %3 = getelementptr inbounds %class.CPDF_Type3Cache, %class.CPDF_Type3Cache* %0, i64 0, i32 3, i32 0
  %4 = getelementptr inbounds %class.CPDF_Type3Cache, %class.CPDF_Type3Cache* %0, i64 0, i32 3, i32 0, i32 1, i32 0, i32 0
  %5 = bitcast %"class.std::__1::__tree_end_node"* %4 to %"class.std::__1::__tree_node"**
  %6 = load %"class.std::__1::__tree_node"*, %"class.std::__1::__tree_node"** %5, align 8
  tail call void @_ZNSt3__16__treeINS_12__value_typeIN5fxcrt10ByteStringENS_10unique_ptrI18CPDF_Type3GlyphMapNS_14default_deleteIS5_EEEEEENS_19__map_value_compareIS3_S9_NS_4lessIS3_EELb1EEENS_9allocatorIS9_EEE7destroyEPNS_11__tree_nodeIS9_PvEE(%"class.std::__1::__tree.131"* %3, %"class.std::__1::__tree_node"* %6) #5
  %7 = getelementptr inbounds %class.CPDF_Type3Cache, %class.CPDF_Type3Cache* %0, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0
  %8 = load %class.CPDF_Type3Font*, %class.CPDF_Type3Font** %7, align 8
  store %class.CPDF_Type3Font* null, %class.CPDF_Type3Font** %7, align 8
  %9 = icmp eq %class.CPDF_Type3Font* %8, null
  br i1 %9, label %21, label %10

10:                                               ; preds = %1
  %11 = getelementptr inbounds %class.CPDF_Type3Font, %class.CPDF_Type3Font* %8, i64 0, i32 0, i32 0, i32 0, i32 1
  %12 = load i64, i64* %11, align 8
  %13 = add nsw i64 %12, -1
  store i64 %13, i64* %11, align 8
  %14 = icmp eq i64 %13, 0
  br i1 %14, label %15, label %21

15:                                               ; preds = %10
  %16 = getelementptr inbounds %class.CPDF_Type3Font, %class.CPDF_Type3Font* %8, i64 0, i32 0, i32 0, i32 0
  %17 = bitcast %class.CPDF_Type3Font* %8 to void (%"class.fxcrt::Retainable"*)***
  %18 = load void (%"class.fxcrt::Retainable"*)**, void (%"class.fxcrt::Retainable"*)*** %17, align 8
  %19 = getelementptr inbounds void (%"class.fxcrt::Retainable"*)*, void (%"class.fxcrt::Retainable"*)** %18, i64 1
  %20 = load void (%"class.fxcrt::Retainable"*)*, void (%"class.fxcrt::Retainable"*)** %19, align 8
  tail call void %20(%"class.fxcrt::Retainable"* nonnull %16) #5
  br label %21

21:                                               ; preds = %1, %10, %15
  %22 = getelementptr inbounds %class.CPDF_Type3Cache, %class.CPDF_Type3Cache* %0, i64 0, i32 1
  tail call void @_ZN5fxcrt10ObservableD2Ev(%"class.fxcrt::Observable"* %22) #5
  %23 = bitcast %class.CPDF_Type3Cache* %0 to i8*
  tail call void @_ZdlPv(i8* %23) #8
  ret void
}

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define hidden %class.CFX_GlyphBitmap* @_ZN15CPDF_Type3Cache9LoadGlyphEjRK10CFX_Matrix(%class.CPDF_Type3Cache*, i32, %class.CFX_Matrix* nocapture readonly dereferenceable(24)) local_unnamed_addr #0 align 2 {
  %4 = alloca %"class.std::__1::tuple.215", align 8
  %5 = alloca %"class.std::__1::tuple.218", align 1
  %6 = alloca %"struct.(anonymous namespace)::UniqueKeyGen", align 4
  %7 = alloca %"class.fxcrt::ByteString", align 8
  %8 = bitcast %"struct.(anonymous namespace)::UniqueKeyGen"* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 132, i8* nonnull %8) #5
  call void @llvm.memset.p0i8.i64(i8* nonnull align 4 %8, i8 -86, i64 132, i1 false)
  %9 = getelementptr inbounds %class.CFX_Matrix, %class.CFX_Matrix* %2, i64 0, i32 0
  %10 = load float, float* %9, align 4
  %11 = fmul float %10, 1.000000e+04
  %12 = tail call i32 @FXSYS_roundf(float %11) #5
  %13 = getelementptr inbounds %class.CFX_Matrix, %class.CFX_Matrix* %2, i64 0, i32 1
  %14 = load float, float* %13, align 4
  %15 = fmul float %14, 1.000000e+04
  %16 = tail call i32 @FXSYS_roundf(float %15) #5
  %17 = getelementptr inbounds %class.CFX_Matrix, %class.CFX_Matrix* %2, i64 0, i32 2
  %18 = load float, float* %17, align 4
  %19 = fmul float %18, 1.000000e+04
  %20 = tail call i32 @FXSYS_roundf(float %19) #5
  %21 = getelementptr inbounds %class.CFX_Matrix, %class.CFX_Matrix* %2, i64 0, i32 3
  %22 = load float, float* %21, align 4
  %23 = fmul float %22, 1.000000e+04
  %24 = tail call i32 @FXSYS_roundf(float %23) #5
  call void (%"struct.(anonymous namespace)::UniqueKeyGen"*, i32, ...) @_ZN12_GLOBAL__N_112UniqueKeyGen8GenerateEiz(%"struct.(anonymous namespace)::UniqueKeyGen"* nonnull %6, i32 undef, i32 %12, i32 %16, i32 %20, i32 %24)
  %25 = bitcast %"class.fxcrt::ByteString"* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %25) #5
  %26 = getelementptr inbounds %"class.fxcrt::ByteString", %"class.fxcrt::ByteString"* %7, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0
  store %"class.fxcrt::StringDataTemplate"* inttoptr (i64 -6148914691236517206 to %"class.fxcrt::StringDataTemplate"*), %"class.fxcrt::StringDataTemplate"** %26, align 8
  %27 = getelementptr inbounds %"struct.(anonymous namespace)::UniqueKeyGen", %"struct.(anonymous namespace)::UniqueKeyGen"* %6, i64 0, i32 1, i64 0
  %28 = getelementptr inbounds %"struct.(anonymous namespace)::UniqueKeyGen", %"struct.(anonymous namespace)::UniqueKeyGen"* %6, i64 0, i32 0
  %29 = load i32, i32* %28, align 4
  %30 = sext i32 %29 to i64
  call void @_ZN5fxcrt10ByteStringC1EPKcm(%"class.fxcrt::ByteString"* nonnull %7, i8* %27, i64 %30) #5
  %31 = getelementptr inbounds %class.CPDF_Type3Cache, %class.CPDF_Type3Cache* %0, i64 0, i32 3, i32 0, i32 1, i32 0, i32 0
  %32 = bitcast %"class.std::__1::__tree_end_node"* %31 to %"class.std::__1::__tree_node"**
  %33 = load %"class.std::__1::__tree_node"*, %"class.std::__1::__tree_node"** %32, align 8
  %34 = icmp eq %"class.std::__1::__tree_node"* %33, null
  br i1 %34, label %54, label %35

35:                                               ; preds = %3, %35
  %36 = phi %"class.std::__1::__tree_end_node"* [ %45, %35 ], [ %31, %3 ]
  %37 = phi %"class.std::__1::__tree_node"* [ %46, %35 ], [ %33, %3 ]
  %38 = getelementptr inbounds %"class.std::__1::__tree_node", %"class.std::__1::__tree_node"* %37, i64 0, i32 1, i32 0, i32 0
  %39 = call zeroext i1 @_ZNK5fxcrt10ByteStringltERKS0_(%"class.fxcrt::ByteString"* %38, %"class.fxcrt::ByteString"* nonnull dereferenceable(8) %7) #5
  %40 = getelementptr inbounds %"class.std::__1::__tree_node", %"class.std::__1::__tree_node"* %37, i64 0, i32 0, i32 1
  %41 = bitcast %"class.std::__1::__tree_node_base"** %40 to %"class.std::__1::__tree_node"**
  %42 = getelementptr inbounds %"class.std::__1::__tree_node", %"class.std::__1::__tree_node"* %37, i64 0, i32 0, i32 0
  %43 = bitcast %"class.std::__1::__tree_node"* %37 to %"class.std::__1::__tree_node"**
  %44 = select i1 %39, %"class.std::__1::__tree_node"** %41, %"class.std::__1::__tree_node"** %43
  %45 = select i1 %39, %"class.std::__1::__tree_end_node"* %36, %"class.std::__1::__tree_end_node"* %42
  %46 = load %"class.std::__1::__tree_node"*, %"class.std::__1::__tree_node"** %44, align 8
  %47 = icmp eq %"class.std::__1::__tree_node"* %46, null
  br i1 %47, label %48, label %35

48:                                               ; preds = %35
  %49 = icmp eq %"class.std::__1::__tree_end_node"* %45, %31
  br i1 %49, label %54, label %50

50:                                               ; preds = %48
  %51 = getelementptr inbounds %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_end_node"* %45, i64 4
  %52 = bitcast %"class.std::__1::__tree_end_node"* %51 to %"class.fxcrt::ByteString"*
  %53 = call zeroext i1 @_ZNK5fxcrt10ByteStringltERKS0_(%"class.fxcrt::ByteString"* nonnull %7, %"class.fxcrt::ByteString"* dereferenceable(8) %52) #5
  br i1 %53, label %54, label %71

54:                                               ; preds = %50, %48, %3
  %55 = call i8* @_Znwm(i64 72) #8
  %56 = bitcast i8* %55 to %class.CPDF_Type3GlyphMap*
  call void @_ZN18CPDF_Type3GlyphMapC1Ev(%class.CPDF_Type3GlyphMap* nonnull %56) #5
  %57 = ptrtoint i8* %55 to i64
  %58 = getelementptr inbounds %class.CPDF_Type3Cache, %class.CPDF_Type3Cache* %0, i64 0, i32 3, i32 0
  %59 = bitcast %"class.std::__1::tuple.215"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %59) #5
  %60 = getelementptr inbounds %"class.std::__1::tuple.215", %"class.std::__1::tuple.215"* %4, i64 0, i32 0, i32 0, i32 0
  store %"class.fxcrt::ByteString"* %7, %"class.fxcrt::ByteString"** %60, align 8
  %61 = getelementptr inbounds %"class.std::__1::tuple.218", %"class.std::__1::tuple.218"* %5, i64 0, i32 0
  call void @llvm.lifetime.start.p0i8(i64 1, i8* nonnull %61) #5
  %62 = call { %"class.std::__1::__tree_end_node"*, i8 } @_ZNSt3__16__treeINS_12__value_typeIN5fxcrt10ByteStringENS_10unique_ptrI18CPDF_Type3GlyphMapNS_14default_deleteIS5_EEEEEENS_19__map_value_compareIS3_S9_NS_4lessIS3_EELb1EEENS_9allocatorIS9_EEE25__emplace_unique_key_argsIS3_JRKNS_21piecewise_construct_tENS_5tupleIJRKS3_EEENSL_IJEEEEEENS_4pairINS_15__tree_iteratorIS9_PNS_11__tree_nodeIS9_PvEElEEbEERKT_DpOT0_(%"class.std::__1::__tree.131"* %58, %"class.fxcrt::ByteString"* nonnull dereferenceable(8) %7, %"struct.std::__1::piecewise_construct_t"* nonnull dereferenceable(1) @_ZNSt3__1L19piecewise_constructE, %"class.std::__1::tuple.215"* nonnull dereferenceable(8) %4, %"class.std::__1::tuple.218"* nonnull dereferenceable(1) %5) #5
  %63 = extractvalue { %"class.std::__1::__tree_end_node"*, i8 } %62, 0
  %64 = getelementptr inbounds %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_end_node"* %63, i64 5
  call void @llvm.lifetime.end.p0i8(i64 1, i8* nonnull %61) #5
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %59) #5
  %65 = bitcast %"class.std::__1::__tree_end_node"* %64 to %class.CPDF_Type3GlyphMap**
  %66 = load %class.CPDF_Type3GlyphMap*, %class.CPDF_Type3GlyphMap** %65, align 8
  %67 = bitcast %"class.std::__1::__tree_end_node"* %64 to i64*
  store i64 %57, i64* %67, align 8
  %68 = icmp eq %class.CPDF_Type3GlyphMap* %66, null
  br i1 %68, label %75, label %69

69:                                               ; preds = %54
  call void @_ZN18CPDF_Type3GlyphMapD1Ev(%class.CPDF_Type3GlyphMap* nonnull %66) #5
  %70 = bitcast %class.CPDF_Type3GlyphMap* %66 to i8*
  call void @_ZdlPv(i8* %70) #8
  br label %75

71:                                               ; preds = %50
  %72 = getelementptr inbounds %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_end_node"* %45, i64 5
  %73 = bitcast %"class.std::__1::__tree_end_node"* %72 to %class.CPDF_Type3GlyphMap**
  %74 = load %class.CPDF_Type3GlyphMap*, %class.CPDF_Type3GlyphMap** %73, align 8
  br label %75

75:                                               ; preds = %54, %69, %71
  %76 = phi %class.CPDF_Type3GlyphMap* [ %74, %71 ], [ %56, %69 ], [ %56, %54 ]
  %77 = call %class.CFX_GlyphBitmap* @_ZNK18CPDF_Type3GlyphMap9GetBitmapEj(%class.CPDF_Type3GlyphMap* %76, i32 %1) #5
  %78 = icmp eq %class.CFX_GlyphBitmap* %77, null
  br i1 %78, label %79, label %81

79:                                               ; preds = %75
  %80 = call %class.CFX_GlyphBitmap* @_ZN15CPDF_Type3Cache11RenderGlyphEP18CPDF_Type3GlyphMapjRK10CFX_Matrix(%class.CPDF_Type3Cache* %0, %class.CPDF_Type3GlyphMap* %76, i32 %1, %class.CFX_Matrix* dereferenceable(24) %2)
  call void @_ZN18CPDF_Type3GlyphMap9SetBitmapEjNSt3__110unique_ptrI15CFX_GlyphBitmapNS0_14default_deleteIS2_EEEE(%class.CPDF_Type3GlyphMap* %76, i32 %1, %class.CFX_GlyphBitmap* %80) #5
  br label %81

81:                                               ; preds = %75, %79
  %82 = phi %class.CFX_GlyphBitmap* [ %80, %79 ], [ %77, %75 ]
  call void @_ZN5fxcrt10ByteStringD1Ev(%"class.fxcrt::ByteString"* nonnull %7) #5
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %25) #5
  call void @llvm.lifetime.end.p0i8(i64 132, i8* nonnull %8) #5
  ret %class.CFX_GlyphBitmap* %82
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #4

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #4

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN12_GLOBAL__N_112UniqueKeyGen8GenerateEiz(%"struct.(anonymous namespace)::UniqueKeyGen"* nocapture, i32, ...) unnamed_addr #0 align 2 {
  %3 = alloca [1 x %struct.__va_list_tag], align 16
  %4 = bitcast [1 x %struct.__va_list_tag]* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %4) #5
  %5 = getelementptr inbounds [1 x %struct.__va_list_tag], [1 x %struct.__va_list_tag]* %3, i64 0, i64 0, i32 0
  %6 = getelementptr inbounds [1 x %struct.__va_list_tag], [1 x %struct.__va_list_tag]* %3, i64 0, i64 0, i32 2
  %7 = getelementptr inbounds [1 x %struct.__va_list_tag], [1 x %struct.__va_list_tag]* %3, i64 0, i64 0, i32 3
  %8 = bitcast [1 x %struct.__va_list_tag]* %3 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %8, i8 -86, i64 24, i1 false)
  call void @llvm.va_start(i8* nonnull %4)
  %9 = getelementptr inbounds %"struct.(anonymous namespace)::UniqueKeyGen", %"struct.(anonymous namespace)::UniqueKeyGen"* %0, i64 0, i32 1, i64 0
  %10 = bitcast i8* %9 to i32*
  %11 = load i32, i32* %5, align 16
  %12 = icmp ult i32 %11, 41
  br i1 %12, label %18, label %13

13:                                               ; preds = %2
  %14 = load i8*, i8** %6, align 8
  %15 = getelementptr i8, i8* %14, i64 8
  store i8* %15, i8** %6, align 8
  %16 = bitcast i8* %14 to i32*
  %17 = load i32, i32* %16, align 4
  store i32 %17, i32* %10, align 4
  br label %26

18:                                               ; preds = %2
  %19 = load i8*, i8** %7, align 16
  %20 = sext i32 %11 to i64
  %21 = getelementptr i8, i8* %19, i64 %20
  %22 = add nuw nsw i32 %11, 8
  store i32 %22, i32* %5, align 16
  %23 = bitcast i8* %21 to i32*
  %24 = load i32, i32* %23, align 4
  store i32 %24, i32* %10, align 4
  %25 = icmp ult i32 %22, 41
  br i1 %25, label %33, label %26

26:                                               ; preds = %18, %13
  %27 = load i8*, i8** %6, align 8
  %28 = getelementptr i8, i8* %27, i64 8
  store i8* %28, i8** %6, align 8
  %29 = bitcast i8* %27 to i32*
  %30 = load i32, i32* %29, align 4
  %31 = getelementptr inbounds %"struct.(anonymous namespace)::UniqueKeyGen", %"struct.(anonymous namespace)::UniqueKeyGen"* %0, i64 0, i32 1, i64 4
  %32 = bitcast i8* %31 to i32*
  store i32 %30, i32* %32, align 4
  br label %43

33:                                               ; preds = %18
  %34 = load i8*, i8** %7, align 16
  %35 = sext i32 %22 to i64
  %36 = getelementptr i8, i8* %34, i64 %35
  %37 = add nuw nsw i32 %11, 16
  store i32 %37, i32* %5, align 16
  %38 = bitcast i8* %36 to i32*
  %39 = load i32, i32* %38, align 4
  %40 = getelementptr inbounds %"struct.(anonymous namespace)::UniqueKeyGen", %"struct.(anonymous namespace)::UniqueKeyGen"* %0, i64 0, i32 1, i64 4
  %41 = bitcast i8* %40 to i32*
  store i32 %39, i32* %41, align 4
  %42 = icmp ult i32 %37, 41
  br i1 %42, label %50, label %43

43:                                               ; preds = %33, %26
  %44 = load i8*, i8** %6, align 8
  %45 = getelementptr i8, i8* %44, i64 8
  store i8* %45, i8** %6, align 8
  %46 = bitcast i8* %44 to i32*
  %47 = load i32, i32* %46, align 4
  %48 = getelementptr inbounds %"struct.(anonymous namespace)::UniqueKeyGen", %"struct.(anonymous namespace)::UniqueKeyGen"* %0, i64 0, i32 1, i64 8
  %49 = bitcast i8* %48 to i32*
  store i32 %47, i32* %49, align 4
  br label %60

50:                                               ; preds = %33
  %51 = load i8*, i8** %7, align 16
  %52 = sext i32 %37 to i64
  %53 = getelementptr i8, i8* %51, i64 %52
  %54 = add nuw nsw i32 %11, 24
  store i32 %54, i32* %5, align 16
  %55 = bitcast i8* %53 to i32*
  %56 = load i32, i32* %55, align 4
  %57 = getelementptr inbounds %"struct.(anonymous namespace)::UniqueKeyGen", %"struct.(anonymous namespace)::UniqueKeyGen"* %0, i64 0, i32 1, i64 8
  %58 = bitcast i8* %57 to i32*
  store i32 %56, i32* %58, align 4
  %59 = icmp ult i32 %54, 41
  br i1 %59, label %63, label %60

60:                                               ; preds = %43, %50
  %61 = load i8*, i8** %6, align 8
  %62 = getelementptr i8, i8* %61, i64 8
  store i8* %62, i8** %6, align 8
  br label %68

63:                                               ; preds = %50
  %64 = load i8*, i8** %7, align 16
  %65 = sext i32 %54 to i64
  %66 = getelementptr i8, i8* %64, i64 %65
  %67 = add nuw nsw i32 %11, 32
  store i32 %67, i32* %5, align 16
  br label %68

68:                                               ; preds = %63, %60
  %69 = phi i8* [ %66, %63 ], [ %61, %60 ]
  %70 = bitcast i8* %69 to i32*
  %71 = load i32, i32* %70, align 4
  %72 = getelementptr inbounds %"struct.(anonymous namespace)::UniqueKeyGen", %"struct.(anonymous namespace)::UniqueKeyGen"* %0, i64 0, i32 1, i64 12
  %73 = bitcast i8* %72 to i32*
  store i32 %71, i32* %73, align 4
  call void @llvm.va_end(i8* nonnull %4)
  %74 = getelementptr inbounds %"struct.(anonymous namespace)::UniqueKeyGen", %"struct.(anonymous namespace)::UniqueKeyGen"* %0, i64 0, i32 0
  store i32 16, i32* %74, align 4
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %4) #5
  ret void
}

declare i32 @FXSYS_roundf(float) local_unnamed_addr #1

declare void @_ZN5fxcrt10ByteStringC1EPKcm(%"class.fxcrt::ByteString"*, i8*, i64) unnamed_addr #1

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #4

declare %class.CFX_GlyphBitmap* @_ZNK18CPDF_Type3GlyphMap9GetBitmapEj(%class.CPDF_Type3GlyphMap*, i32) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden %class.CFX_GlyphBitmap* @_ZN15CPDF_Type3Cache11RenderGlyphEP18CPDF_Type3GlyphMapjRK10CFX_Matrix(%class.CPDF_Type3Cache* nocapture readonly, %class.CPDF_Type3GlyphMap*, i32, %class.CFX_Matrix* nocapture readonly dereferenceable(24)) local_unnamed_addr #0 align 2 {
  %5 = alloca %class.CFX_Matrix, align 16
  %6 = alloca %"class.fxcrt::RetainPtr.139", align 8
  %7 = alloca i32, align 4
  %8 = alloca i32, align 4
  %9 = alloca %"class.fxcrt::RetainPtr.139", align 8
  %10 = alloca %struct.FXDIB_ResampleOptions, align 1
  %11 = alloca %"class.fxcrt::RetainPtr.139", align 8
  %12 = getelementptr inbounds %class.CPDF_Type3Cache, %class.CPDF_Type3Cache* %0, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0
  %13 = load %class.CPDF_Type3Font*, %class.CPDF_Type3Font** %12, align 8
  %14 = tail call %class.CPDF_Type3Char* @_ZN14CPDF_Type3Font8LoadCharEj(%class.CPDF_Type3Font* %13, i32 %2) #5
  %15 = icmp eq %class.CPDF_Type3Char* %14, null
  br i1 %15, label %392, label %16

16:                                               ; preds = %4
  %17 = tail call dereferenceable(8) %"class.fxcrt::RetainPtr.139"* @_ZNK14CPDF_Type3Char9GetBitmapEv(%class.CPDF_Type3Char* nonnull %14) #5
  %18 = getelementptr inbounds %"class.fxcrt::RetainPtr.139", %"class.fxcrt::RetainPtr.139"* %17, i64 0, i32 0, i32 0, i32 0, i32 0
  %19 = load %class.CFX_DIBitmap*, %class.CFX_DIBitmap** %18, align 8
  %20 = icmp eq %class.CFX_DIBitmap* %19, null
  br i1 %20, label %392, label %21

21:                                               ; preds = %16
  %22 = bitcast %class.CFX_Matrix* %3 to <2 x float>*
  %23 = load <2 x float>, <2 x float>* %22, align 4
  %24 = shufflevector <2 x float> %23, <2 x float> undef, <4 x i32> <i32 0, i32 1, i32 0, i32 1>
  %25 = getelementptr inbounds %class.CFX_Matrix, %class.CFX_Matrix* %3, i64 0, i32 2
  %26 = bitcast float* %25 to <2 x float>*
  %27 = load <2 x float>, <2 x float>* %26, align 4
  %28 = shufflevector <2 x float> %27, <2 x float> undef, <4 x i32> <i32 0, i32 1, i32 0, i32 1>
  %29 = bitcast %class.CFX_Matrix* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %29) #5
  %30 = getelementptr inbounds %class.CFX_Matrix, %class.CFX_Matrix* %5, i64 0, i32 0
  %31 = getelementptr inbounds %class.CFX_Matrix, %class.CFX_Matrix* %5, i64 0, i32 2
  %32 = getelementptr inbounds %class.CFX_Matrix, %class.CFX_Matrix* %5, i64 0, i32 3
  %33 = getelementptr inbounds %class.CFX_Matrix, %class.CFX_Matrix* %5, i64 0, i32 4
  %34 = getelementptr inbounds %class.CFX_Matrix, %class.CFX_Matrix* %5, i64 0, i32 5
  %35 = getelementptr inbounds %class.CPDF_Type3Char, %class.CPDF_Type3Char* %14, i64 0, i32 4, i32 0
  %36 = load float, float* %35, align 4, !noalias !2
  %37 = getelementptr inbounds %class.CPDF_Type3Char, %class.CPDF_Type3Char* %14, i64 0, i32 4, i32 1
  %38 = load float, float* %37, align 4, !noalias !2
  %39 = getelementptr inbounds %class.CPDF_Type3Char, %class.CPDF_Type3Char* %14, i64 0, i32 4, i32 2
  %40 = load float, float* %39, align 4, !noalias !2
  %41 = getelementptr inbounds %class.CPDF_Type3Char, %class.CPDF_Type3Char* %14, i64 0, i32 4, i32 3
  %42 = load float, float* %41, align 4, !noalias !2
  %43 = insertelement <2 x float> undef, float %36, i32 0
  %44 = insertelement <2 x float> %43, float %40, i32 1
  %45 = shufflevector <2 x float> %44, <2 x float> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %46 = fmul <4 x float> %24, %45
  %47 = insertelement <2 x float> undef, float %38, i32 0
  %48 = insertelement <2 x float> %47, float %42, i32 1
  %49 = shufflevector <2 x float> %48, <2 x float> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %50 = fmul <4 x float> %28, %49
  %51 = fadd <4 x float> %46, %50
  %52 = getelementptr inbounds %class.CPDF_Type3Char, %class.CPDF_Type3Char* %14, i64 0, i32 4, i32 4
  %53 = load float, float* %52, align 4, !noalias !2
  %54 = extractelement <2 x float> %23, i32 0
  %55 = fmul float %54, %53
  %56 = getelementptr inbounds %class.CPDF_Type3Char, %class.CPDF_Type3Char* %14, i64 0, i32 4, i32 5
  %57 = load float, float* %56, align 4, !noalias !2
  %58 = extractelement <2 x float> %27, i32 0
  %59 = fmul float %58, %57
  %60 = fadd float %55, %59
  %61 = fadd float %60, 0.000000e+00
  %62 = extractelement <2 x float> %23, i32 1
  %63 = fmul float %62, %53
  %64 = extractelement <2 x float> %27, i32 1
  %65 = fmul float %64, %57
  %66 = fadd float %63, %65
  %67 = fadd float %66, 0.000000e+00
  %68 = bitcast %class.CFX_Matrix* %5 to <4 x float>*
  store <4 x float> %51, <4 x float>* %68, align 16, !alias.scope !2
  store float %61, float* %33, align 16, !alias.scope !2
  store float %67, float* %34, align 4, !alias.scope !2
  %69 = tail call dereferenceable(8) %"class.fxcrt::RetainPtr.139"* @_ZNK14CPDF_Type3Char9GetBitmapEv(%class.CPDF_Type3Char* nonnull %14) #5
  %70 = getelementptr inbounds %"class.fxcrt::RetainPtr.139", %"class.fxcrt::RetainPtr.139"* %69, i64 0, i32 0, i32 0, i32 0, i32 0
  %71 = load %class.CFX_DIBitmap*, %class.CFX_DIBitmap** %70, align 8
  %72 = icmp eq %class.CFX_DIBitmap* %71, null
  br i1 %72, label %77, label %73

73:                                               ; preds = %21
  %74 = getelementptr inbounds %class.CFX_DIBitmap, %class.CFX_DIBitmap* %71, i64 0, i32 0, i32 0, i32 1
  %75 = load i64, i64* %74, align 8
  %76 = add nsw i64 %75, 1
  store i64 %76, i64* %74, align 8
  br label %77

77:                                               ; preds = %21, %73
  %78 = bitcast %"class.fxcrt::RetainPtr.139"* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %78) #5
  %79 = getelementptr inbounds %"class.fxcrt::RetainPtr.139", %"class.fxcrt::RetainPtr.139"* %6, i64 0, i32 0, i32 0, i32 0, i32 0
  %80 = bitcast %"class.fxcrt::RetainPtr.139"* %6 to i64*
  store i64 0, i64* %80, align 8
  %81 = bitcast i32* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %81) #5
  store i32 0, i32* %7, align 4
  %82 = bitcast i32* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %82) #5
  store i32 0, i32* %8, align 4
  %83 = extractelement <4 x float> %51, i32 1
  %84 = tail call float @llvm.fabs.f32(float %83) #5
  %85 = extractelement <4 x float> %51, i32 0
  %86 = tail call float @llvm.fabs.f32(float %85) #5
  %87 = fdiv float %86, 1.000000e+02
  %88 = fcmp olt float %84, %87
  br i1 %88, label %89, label %310

89:                                               ; preds = %77
  %90 = load float, float* %31, align 8
  %91 = tail call float @llvm.fabs.f32(float %90) #5
  %92 = load float, float* %32, align 4
  %93 = tail call float @llvm.fabs.f32(float %92) #5
  %94 = fdiv float %93, 1.000000e+02
  %95 = fcmp olt float %91, %94
  br i1 %95, label %96, label %310

96:                                               ; preds = %89
  %97 = getelementptr inbounds %class.CFX_DIBitmap, %class.CFX_DIBitmap* %71, i64 0, i32 0, i32 3
  %98 = load i32, i32* %97, align 8
  %99 = getelementptr inbounds %class.CFX_DIBitmap, %class.CFX_DIBitmap* %71, i64 0, i32 0, i32 4
  %100 = load i32, i32* %99, align 4
  %101 = getelementptr inbounds %class.CFX_DIBitmap, %class.CFX_DIBitmap* %71, i64 0, i32 0, i32 2
  %102 = load i32, i32* %101, align 4
  %103 = getelementptr inbounds %class.CFX_DIBitmap, %class.CFX_DIBitmap* %71, i64 0, i32 0, i32 1
  %104 = load i16, i16* %103, align 8
  %105 = and i16 %104, 255
  %106 = bitcast %class.CFX_DIBitmap* %71 to i8* (%class.CFX_DIBitmap*)***
  %107 = load i8* (%class.CFX_DIBitmap*)**, i8* (%class.CFX_DIBitmap*)*** %106, align 8
  %108 = getelementptr inbounds i8* (%class.CFX_DIBitmap*)*, i8* (%class.CFX_DIBitmap*)** %107, i64 2
  %109 = load i8* (%class.CFX_DIBitmap*)*, i8* (%class.CFX_DIBitmap*)** %108, align 8
  %110 = tail call i8* %109(%class.CFX_DIBitmap* %71) #5
  %111 = icmp sgt i32 %98, 0
  br i1 %111, label %112, label %169

112:                                              ; preds = %96
  %113 = icmp eq i16 %105, 1
  %114 = icmp ugt i16 %105, 8
  %115 = lshr i16 %105, 3
  %116 = select i1 %114, i16 %115, i16 1
  %117 = zext i16 %116 to i32
  %118 = mul nsw i32 %102, %117
  %119 = icmp sgt i32 %118, 0
  %120 = zext i32 %118 to i64
  %121 = sdiv i32 %102, 8
  %122 = icmp sgt i32 %102, 7
  %123 = zext i32 %121 to i64
  %124 = srem i32 %102, 8
  %125 = icmp eq i32 %124, 0
  %126 = sext i32 %121 to i64
  %127 = sub nsw i32 8, %124
  %128 = shl i32 255, %127
  %129 = sext i32 %100 to i64
  %130 = zext i32 %98 to i64
  br label %131

131:                                              ; preds = %160, %112
  %132 = phi i64 [ 0, %112 ], [ %161, %160 ]
  %133 = mul nsw i64 %132, %129
  %134 = getelementptr inbounds i8, i8* %110, i64 %133
  br i1 %113, label %135, label %145

135:                                              ; preds = %131
  br i1 %122, label %138, label %144

136:                                              ; preds = %138
  %137 = icmp eq i64 %143, %123
  br i1 %137, label %144, label %138

138:                                              ; preds = %135, %136
  %139 = phi i64 [ %143, %136 ], [ 0, %135 ]
  %140 = getelementptr inbounds i8, i8* %134, i64 %139
  %141 = load i8, i8* %140, align 1
  %142 = icmp eq i8 %141, 0
  %143 = add nuw nsw i64 %139, 1
  br i1 %142, label %136, label %163

144:                                              ; preds = %136, %135
  br i1 %125, label %160, label %154

145:                                              ; preds = %131
  br i1 %119, label %148, label %160

146:                                              ; preds = %148
  %147 = icmp eq i64 %153, %120
  br i1 %147, label %160, label %148

148:                                              ; preds = %145, %146
  %149 = phi i64 [ %153, %146 ], [ 0, %145 ]
  %150 = getelementptr inbounds i8, i8* %134, i64 %149
  %151 = load i8, i8* %150, align 1
  %152 = icmp ugt i8 %151, 64
  %153 = add nuw nsw i64 %149, 1
  br i1 %152, label %165, label %146

154:                                              ; preds = %144
  %155 = getelementptr inbounds i8, i8* %134, i64 %126
  %156 = load i8, i8* %155, align 1
  %157 = zext i8 %156 to i32
  %158 = and i32 %128, %157
  %159 = icmp eq i32 %158, 0
  br i1 %159, label %160, label %167

160:                                              ; preds = %146, %154, %145, %144
  %161 = add nuw nsw i64 %132, 1
  %162 = icmp eq i64 %161, %130
  br i1 %162, label %169, label %131

163:                                              ; preds = %138
  %164 = trunc i64 %132 to i32
  br label %169

165:                                              ; preds = %148
  %166 = trunc i64 %132 to i32
  br label %169

167:                                              ; preds = %154
  %168 = trunc i64 %132 to i32
  br label %169

169:                                              ; preds = %160, %96, %163, %165, %167
  %170 = phi i32 [ -1, %96 ], [ %164, %163 ], [ %166, %165 ], [ %168, %167 ], [ -1, %160 ]
  %171 = load i32, i32* %97, align 8
  %172 = load i32, i32* %99, align 4
  %173 = load i16, i16* %103, align 8
  %174 = and i16 %173, 255
  %175 = load i32, i32* %101, align 4
  %176 = load i8* (%class.CFX_DIBitmap*)**, i8* (%class.CFX_DIBitmap*)*** %106, align 8
  %177 = getelementptr inbounds i8* (%class.CFX_DIBitmap*)*, i8* (%class.CFX_DIBitmap*)** %176, i64 2
  %178 = load i8* (%class.CFX_DIBitmap*)*, i8* (%class.CFX_DIBitmap*)** %177, align 8
  %179 = tail call i8* %178(%class.CFX_DIBitmap* %71) #5
  %180 = icmp sgt i32 %171, 0
  br i1 %180, label %181, label %238

181:                                              ; preds = %169
  %182 = icmp eq i16 %174, 1
  %183 = icmp ugt i16 %174, 8
  %184 = lshr i16 %174, 3
  %185 = select i1 %183, i16 %184, i16 1
  %186 = zext i16 %185 to i32
  %187 = mul nsw i32 %175, %186
  %188 = icmp sgt i32 %187, 0
  %189 = zext i32 %187 to i64
  %190 = sdiv i32 %175, 8
  %191 = icmp sgt i32 %175, 7
  %192 = zext i32 %190 to i64
  %193 = srem i32 %175, 8
  %194 = icmp eq i32 %193, 0
  %195 = sext i32 %190 to i64
  %196 = sub nsw i32 8, %193
  %197 = shl i32 255, %196
  %198 = sext i32 %171 to i64
  %199 = sext i32 %172 to i64
  br label %200

200:                                              ; preds = %230, %181
  %201 = phi i64 [ %198, %181 ], [ %202, %230 ]
  %202 = add nsw i64 %201, -1
  %203 = mul nsw i64 %202, %199
  %204 = getelementptr inbounds i8, i8* %179, i64 %203
  br i1 %182, label %205, label %221

205:                                              ; preds = %200
  br i1 %191, label %208, label %214

206:                                              ; preds = %208
  %207 = icmp eq i64 %213, %192
  br i1 %207, label %214, label %208

208:                                              ; preds = %205, %206
  %209 = phi i64 [ %213, %206 ], [ 0, %205 ]
  %210 = getelementptr inbounds i8, i8* %204, i64 %209
  %211 = load i8, i8* %210, align 1
  %212 = icmp eq i8 %211, 0
  %213 = add nuw nsw i64 %209, 1
  br i1 %212, label %206, label %232

214:                                              ; preds = %206, %205
  br i1 %194, label %230, label %215

215:                                              ; preds = %214
  %216 = getelementptr inbounds i8, i8* %204, i64 %195
  %217 = load i8, i8* %216, align 1
  %218 = zext i8 %217 to i32
  %219 = and i32 %197, %218
  %220 = icmp eq i32 %219, 0
  br i1 %220, label %230, label %236

221:                                              ; preds = %200
  br i1 %188, label %224, label %230

222:                                              ; preds = %224
  %223 = icmp eq i64 %229, %189
  br i1 %223, label %230, label %224

224:                                              ; preds = %221, %222
  %225 = phi i64 [ %229, %222 ], [ 0, %221 ]
  %226 = getelementptr inbounds i8, i8* %204, i64 %225
  %227 = load i8, i8* %226, align 1
  %228 = icmp ugt i8 %227, 64
  %229 = add nuw nsw i64 %225, 1
  br i1 %228, label %234, label %222

230:                                              ; preds = %222, %221, %215, %214
  %231 = icmp sgt i64 %202, 0
  br i1 %231, label %200, label %238

232:                                              ; preds = %208
  %233 = trunc i64 %202 to i32
  br label %238

234:                                              ; preds = %224
  %235 = trunc i64 %202 to i32
  br label %238

236:                                              ; preds = %215
  %237 = trunc i64 %202 to i32
  br label %238

238:                                              ; preds = %230, %169, %232, %234, %236
  %239 = phi i32 [ -1, %169 ], [ %233, %232 ], [ %235, %234 ], [ %237, %236 ], [ -1, %230 ]
  %240 = icmp eq i32 %170, 0
  br i1 %240, label %241, label %310

241:                                              ; preds = %238
  %242 = getelementptr inbounds %class.CFX_DIBitmap, %class.CFX_DIBitmap* %71, i64 0, i32 0
  %243 = load i32, i32* %97, align 8
  %244 = add nsw i32 %243, -1
  %245 = icmp eq i32 %239, %244
  br i1 %245, label %246, label %310

246:                                              ; preds = %241
  %247 = load float, float* %34, align 4
  %248 = fadd float %92, %247
  %249 = bitcast float %248 to i32
  %250 = bitcast float %247 to i32
  %251 = fcmp ogt float %248, %247
  %252 = select i1 %251, i32 %249, i32 %250
  %253 = select i1 %251, i32 %250, i32 %249
  %254 = bitcast i32 %253 to float
  %255 = bitcast i32 %252 to float
  %256 = tail call i64 @_ZN18CPDF_Type3GlyphMap10AdjustBlueEff(%class.CPDF_Type3GlyphMap* %1, float %254, float %255) #5
  %257 = trunc i64 %256 to i32
  %258 = lshr i64 %256, 32
  %259 = trunc i64 %258 to i32
  %260 = select i1 %251, i32 %257, i32 %259
  %261 = select i1 %251, i32 %259, i32 %257
  %262 = tail call { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %260, i32 %261) #5
  %263 = extractvalue { i32, i1 } %262, 1
  br i1 %263, label %264, label %265

264:                                              ; preds = %246
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %82) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %81) #5
  store %class.CFX_DIBitmap* null, %class.CFX_DIBitmap** %79, align 8
  br label %378

265:                                              ; preds = %246
  %266 = extractvalue { i32, i1 } %262, 0
  %267 = bitcast %"class.fxcrt::RetainPtr.139"* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %267) #5
  %268 = fptosi float %85 to i32
  %269 = getelementptr inbounds %struct.FXDIB_ResampleOptions, %struct.FXDIB_ResampleOptions* %10, i64 0, i32 0
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %269) #5
  call void @_ZN21FXDIB_ResampleOptionsC1Ev(%struct.FXDIB_ResampleOptions* nonnull %10) #5
  call void @_ZN11CFX_DIBBase9StretchToEiiRK21FXDIB_ResampleOptionsPK7FX_RECT(%"class.fxcrt::RetainPtr.139"* nonnull sret %9, %class.CFX_DIBBase* %242, i32 %268, i32 %266, %struct.FXDIB_ResampleOptions* nonnull dereferenceable(4) %10, %struct.FX_RECT* null) #5
  %270 = getelementptr inbounds %"class.fxcrt::RetainPtr.139", %"class.fxcrt::RetainPtr.139"* %9, i64 0, i32 0, i32 0, i32 0, i32 0
  %271 = bitcast %"class.fxcrt::RetainPtr.139"* %9 to i64*
  %272 = load i64, i64* %271, align 8
  store %class.CFX_DIBitmap* null, %class.CFX_DIBitmap** %270, align 8
  %273 = load %class.CFX_DIBitmap*, %class.CFX_DIBitmap** %79, align 8
  store i64 %272, i64* %80, align 8
  %274 = icmp eq %class.CFX_DIBitmap* %273, null
  br i1 %274, label %275, label %276

275:                                              ; preds = %265
  store %class.CFX_DIBitmap* null, %class.CFX_DIBitmap** %270, align 8
  br label %301

276:                                              ; preds = %265
  %277 = getelementptr inbounds %class.CFX_DIBitmap, %class.CFX_DIBitmap* %273, i64 0, i32 0, i32 0, i32 1
  %278 = load i64, i64* %277, align 8
  %279 = add nsw i64 %278, -1
  store i64 %279, i64* %277, align 8
  %280 = icmp eq i64 %279, 0
  br i1 %280, label %282, label %281

281:                                              ; preds = %276
  store %class.CFX_DIBitmap* null, %class.CFX_DIBitmap** %270, align 8
  br label %301

282:                                              ; preds = %276
  %283 = getelementptr inbounds %class.CFX_DIBitmap, %class.CFX_DIBitmap* %273, i64 0, i32 0, i32 0
  %284 = bitcast %class.CFX_DIBitmap* %273 to void (%"class.fxcrt::Retainable"*)***
  %285 = load void (%"class.fxcrt::Retainable"*)**, void (%"class.fxcrt::Retainable"*)*** %284, align 8
  %286 = getelementptr inbounds void (%"class.fxcrt::Retainable"*)*, void (%"class.fxcrt::Retainable"*)** %285, i64 1
  %287 = load void (%"class.fxcrt::Retainable"*)*, void (%"class.fxcrt::Retainable"*)** %286, align 8
  call void %287(%"class.fxcrt::Retainable"* nonnull %283) #5
  %288 = load %class.CFX_DIBitmap*, %class.CFX_DIBitmap** %270, align 8
  %289 = bitcast %class.CFX_DIBitmap* %288 to void (%"class.fxcrt::Retainable"*)***
  store %class.CFX_DIBitmap* null, %class.CFX_DIBitmap** %270, align 8
  %290 = icmp eq %class.CFX_DIBitmap* %288, null
  br i1 %290, label %301, label %291

291:                                              ; preds = %282
  %292 = getelementptr inbounds %class.CFX_DIBitmap, %class.CFX_DIBitmap* %288, i64 0, i32 0, i32 0, i32 1
  %293 = load i64, i64* %292, align 8
  %294 = add nsw i64 %293, -1
  store i64 %294, i64* %292, align 8
  %295 = icmp eq i64 %294, 0
  br i1 %295, label %296, label %301

296:                                              ; preds = %291
  %297 = getelementptr inbounds %class.CFX_DIBitmap, %class.CFX_DIBitmap* %288, i64 0, i32 0, i32 0
  %298 = load void (%"class.fxcrt::Retainable"*)**, void (%"class.fxcrt::Retainable"*)*** %289, align 8
  %299 = getelementptr inbounds void (%"class.fxcrt::Retainable"*)*, void (%"class.fxcrt::Retainable"*)** %298, i64 1
  %300 = load void (%"class.fxcrt::Retainable"*)*, void (%"class.fxcrt::Retainable"*)** %299, align 8
  call void %300(%"class.fxcrt::Retainable"* nonnull %297) #5
  br label %301

301:                                              ; preds = %281, %275, %282, %291, %296
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %269) #5
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %267) #5
  store i32 %257, i32* %8, align 4
  %302 = load float, float* %30, align 16
  %303 = fcmp olt float %302, 0.000000e+00
  %304 = load float, float* %33, align 16
  %305 = fadd float %302, %304
  %306 = select i1 %303, float %305, float %304
  %307 = call i32 @FXSYS_roundf(float %306) #5
  store i32 %307, i32* %7, align 4
  %308 = load %class.CFX_DIBitmap*, %class.CFX_DIBitmap** %79, align 8
  %309 = icmp eq %class.CFX_DIBitmap* %308, null
  br i1 %309, label %310, label %352

310:                                              ; preds = %238, %241, %77, %89, %301
  %311 = bitcast %"class.fxcrt::RetainPtr.139"* %11 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %311) #5
  %312 = getelementptr inbounds %class.CFX_DIBitmap, %class.CFX_DIBitmap* %71, i64 0, i32 0
  call void @_ZN11CFX_DIBBase11TransformToERK10CFX_MatrixPiS3_(%"class.fxcrt::RetainPtr.139"* nonnull sret %11, %class.CFX_DIBBase* %312, %class.CFX_Matrix* nonnull dereferenceable(24) %5, i32* nonnull %7, i32* nonnull %8) #5
  %313 = getelementptr inbounds %"class.fxcrt::RetainPtr.139", %"class.fxcrt::RetainPtr.139"* %11, i64 0, i32 0, i32 0, i32 0, i32 0
  %314 = bitcast %"class.fxcrt::RetainPtr.139"* %11 to i64*
  %315 = load i64, i64* %314, align 8
  store %class.CFX_DIBitmap* null, %class.CFX_DIBitmap** %313, align 8
  %316 = load %class.CFX_DIBitmap*, %class.CFX_DIBitmap** %79, align 8
  store i64 %315, i64* %80, align 8
  %317 = icmp eq %class.CFX_DIBitmap* %316, null
  br i1 %317, label %318, label %320

318:                                              ; preds = %310
  %319 = inttoptr i64 %315 to %class.CFX_DIBitmap*
  store %class.CFX_DIBitmap* null, %class.CFX_DIBitmap** %313, align 8
  br label %347

320:                                              ; preds = %310
  %321 = getelementptr inbounds %class.CFX_DIBitmap, %class.CFX_DIBitmap* %316, i64 0, i32 0, i32 0, i32 1
  %322 = load i64, i64* %321, align 8
  %323 = add nsw i64 %322, -1
  store i64 %323, i64* %321, align 8
  %324 = icmp eq i64 %323, 0
  br i1 %324, label %326, label %325

325:                                              ; preds = %320
  store %class.CFX_DIBitmap* null, %class.CFX_DIBitmap** %313, align 8
  br label %345

326:                                              ; preds = %320
  %327 = getelementptr inbounds %class.CFX_DIBitmap, %class.CFX_DIBitmap* %316, i64 0, i32 0, i32 0
  %328 = bitcast %class.CFX_DIBitmap* %316 to void (%"class.fxcrt::Retainable"*)***
  %329 = load void (%"class.fxcrt::Retainable"*)**, void (%"class.fxcrt::Retainable"*)*** %328, align 8
  %330 = getelementptr inbounds void (%"class.fxcrt::Retainable"*)*, void (%"class.fxcrt::Retainable"*)** %329, i64 1
  %331 = load void (%"class.fxcrt::Retainable"*)*, void (%"class.fxcrt::Retainable"*)** %330, align 8
  call void %331(%"class.fxcrt::Retainable"* nonnull %327) #5
  %332 = load %class.CFX_DIBitmap*, %class.CFX_DIBitmap** %313, align 8
  %333 = bitcast %class.CFX_DIBitmap* %332 to void (%"class.fxcrt::Retainable"*)***
  store %class.CFX_DIBitmap* null, %class.CFX_DIBitmap** %313, align 8
  %334 = icmp eq %class.CFX_DIBitmap* %332, null
  br i1 %334, label %345, label %335

335:                                              ; preds = %326
  %336 = getelementptr inbounds %class.CFX_DIBitmap, %class.CFX_DIBitmap* %332, i64 0, i32 0, i32 0, i32 1
  %337 = load i64, i64* %336, align 8
  %338 = add nsw i64 %337, -1
  store i64 %338, i64* %336, align 8
  %339 = icmp eq i64 %338, 0
  br i1 %339, label %340, label %345

340:                                              ; preds = %335
  %341 = getelementptr inbounds %class.CFX_DIBitmap, %class.CFX_DIBitmap* %332, i64 0, i32 0, i32 0
  %342 = load void (%"class.fxcrt::Retainable"*)**, void (%"class.fxcrt::Retainable"*)*** %333, align 8
  %343 = getelementptr inbounds void (%"class.fxcrt::Retainable"*)*, void (%"class.fxcrt::Retainable"*)** %342, i64 1
  %344 = load void (%"class.fxcrt::Retainable"*)*, void (%"class.fxcrt::Retainable"*)** %343, align 8
  call void %344(%"class.fxcrt::Retainable"* nonnull %341) #5
  br label %345

345:                                              ; preds = %325, %326, %335, %340
  %346 = load %class.CFX_DIBitmap*, %class.CFX_DIBitmap** %79, align 8
  br label %347

347:                                              ; preds = %345, %318
  %348 = phi %class.CFX_DIBitmap* [ %346, %345 ], [ %319, %318 ]
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %311) #5
  %349 = icmp eq %class.CFX_DIBitmap* %348, null
  br i1 %349, label %363, label %350

350:                                              ; preds = %347
  %351 = load i32, i32* %7, align 4
  br label %352

352:                                              ; preds = %350, %301
  %353 = phi i32 [ %351, %350 ], [ %307, %301 ]
  %354 = load i32, i32* %8, align 4
  %355 = sub nsw i32 0, %354
  %356 = call i8* @_Znwm(i64 16) #8
  %357 = bitcast i8* %356 to %class.CFX_GlyphBitmap*
  call void @_ZN15CFX_GlyphBitmapC1Eii(%class.CFX_GlyphBitmap* nonnull %357, i32 %353, i32 %355) #5
  %358 = ptrtoint i8* %356 to i64
  %359 = getelementptr inbounds i8, i8* %356, i64 8
  %360 = bitcast i8* %359 to %class.CFX_DIBitmap**
  %361 = load %class.CFX_DIBitmap*, %class.CFX_DIBitmap** %360, align 8
  call void @_ZN12CFX_DIBitmap8TakeOverEON5fxcrt9RetainPtrIS_EE(%class.CFX_DIBitmap* %361, %"class.fxcrt::RetainPtr.139"* nonnull dereferenceable(8) %6) #5
  %362 = load %class.CFX_DIBitmap*, %class.CFX_DIBitmap** %79, align 8
  br label %363

363:                                              ; preds = %347, %352
  %364 = phi %class.CFX_DIBitmap* [ %362, %352 ], [ %348, %347 ]
  %365 = phi i64 [ %358, %352 ], [ 0, %347 ]
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %82) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %81) #5
  store %class.CFX_DIBitmap* null, %class.CFX_DIBitmap** %79, align 8
  %366 = icmp eq %class.CFX_DIBitmap* %364, null
  br i1 %366, label %378, label %367

367:                                              ; preds = %363
  %368 = getelementptr inbounds %class.CFX_DIBitmap, %class.CFX_DIBitmap* %364, i64 0, i32 0, i32 0, i32 1
  %369 = load i64, i64* %368, align 8
  %370 = add nsw i64 %369, -1
  store i64 %370, i64* %368, align 8
  %371 = icmp eq i64 %370, 0
  br i1 %371, label %372, label %378

372:                                              ; preds = %367
  %373 = getelementptr inbounds %class.CFX_DIBitmap, %class.CFX_DIBitmap* %364, i64 0, i32 0, i32 0
  %374 = bitcast %class.CFX_DIBitmap* %364 to void (%"class.fxcrt::Retainable"*)***
  %375 = load void (%"class.fxcrt::Retainable"*)**, void (%"class.fxcrt::Retainable"*)*** %374, align 8
  %376 = getelementptr inbounds void (%"class.fxcrt::Retainable"*)*, void (%"class.fxcrt::Retainable"*)** %375, i64 1
  %377 = load void (%"class.fxcrt::Retainable"*)*, void (%"class.fxcrt::Retainable"*)** %376, align 8
  call void %377(%"class.fxcrt::Retainable"* nonnull %373) #5
  br label %378

378:                                              ; preds = %264, %363, %367, %372
  %379 = phi i64 [ 0, %264 ], [ %365, %363 ], [ %365, %367 ], [ %365, %372 ]
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %78) #5
  br i1 %72, label %391, label %380

380:                                              ; preds = %378
  %381 = getelementptr inbounds %class.CFX_DIBitmap, %class.CFX_DIBitmap* %71, i64 0, i32 0, i32 0, i32 1
  %382 = load i64, i64* %381, align 8
  %383 = add nsw i64 %382, -1
  store i64 %383, i64* %381, align 8
  %384 = icmp eq i64 %383, 0
  br i1 %384, label %385, label %391

385:                                              ; preds = %380
  %386 = getelementptr inbounds %class.CFX_DIBitmap, %class.CFX_DIBitmap* %71, i64 0, i32 0, i32 0
  %387 = bitcast %class.CFX_DIBitmap* %71 to void (%"class.fxcrt::Retainable"*)***
  %388 = load void (%"class.fxcrt::Retainable"*)**, void (%"class.fxcrt::Retainable"*)*** %387, align 8
  %389 = getelementptr inbounds void (%"class.fxcrt::Retainable"*)*, void (%"class.fxcrt::Retainable"*)** %388, i64 1
  %390 = load void (%"class.fxcrt::Retainable"*)*, void (%"class.fxcrt::Retainable"*)** %389, align 8
  call void %390(%"class.fxcrt::Retainable"* nonnull %386) #5
  br label %391

391:                                              ; preds = %378, %380, %385
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %29) #5
  br label %392

392:                                              ; preds = %16, %4, %391
  %393 = phi i64 [ %379, %391 ], [ 0, %4 ], [ 0, %16 ]
  %394 = inttoptr i64 %393 to %class.CFX_GlyphBitmap*
  ret %class.CFX_GlyphBitmap* %394
}

declare void @_ZN18CPDF_Type3GlyphMap9SetBitmapEjNSt3__110unique_ptrI15CFX_GlyphBitmapNS0_14default_deleteIS2_EEEE(%class.CPDF_Type3GlyphMap*, i32, %class.CFX_GlyphBitmap*) local_unnamed_addr #1

; Function Attrs: nounwind
declare void @_ZN5fxcrt10ByteStringD1Ev(%"class.fxcrt::ByteString"*) unnamed_addr #2

declare %class.CPDF_Type3Char* @_ZN14CPDF_Type3Font8LoadCharEj(%class.CPDF_Type3Font*, i32) local_unnamed_addr #1

declare dereferenceable(8) %"class.fxcrt::RetainPtr.139"* @_ZNK14CPDF_Type3Char9GetBitmapEv(%class.CPDF_Type3Char*) local_unnamed_addr #1

declare i64 @_ZN18CPDF_Type3GlyphMap10AdjustBlueEff(%class.CPDF_Type3GlyphMap*, float, float) local_unnamed_addr #1

declare void @_ZN11CFX_DIBBase9StretchToEiiRK21FXDIB_ResampleOptionsPK7FX_RECT(%"class.fxcrt::RetainPtr.139"* sret, %class.CFX_DIBBase*, i32, i32, %struct.FXDIB_ResampleOptions* dereferenceable(4), %struct.FX_RECT*) local_unnamed_addr #1

declare void @_ZN21FXDIB_ResampleOptionsC1Ev(%struct.FXDIB_ResampleOptions*) unnamed_addr #1

declare void @_ZN11CFX_DIBBase11TransformToERK10CFX_MatrixPiS3_(%"class.fxcrt::RetainPtr.139"* sret, %class.CFX_DIBBase*, %class.CFX_Matrix* dereferenceable(24), i32*, i32*) local_unnamed_addr #1

declare void @_ZN12CFX_DIBitmap8TakeOverEON5fxcrt9RetainPtrIS_EE(%class.CFX_DIBitmap*, %"class.fxcrt::RetainPtr.139"* dereferenceable(8)) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN5fxcrt10RetainableD2Ev(%"class.fxcrt::Retainable"*) unnamed_addr #0 comdat align 2 {
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN5fxcrt10RetainableD0Ev(%"class.fxcrt::Retainable"*) unnamed_addr #0 comdat align 2 {
  %2 = bitcast %"class.fxcrt::Retainable"* %0 to i8*
  tail call void @_ZdlPv(i8* %2) #8
  ret void
}

; Function Attrs: nounwind
declare void @llvm.va_start(i8*) #5

; Function Attrs: nounwind
declare void @llvm.va_end(i8*) #5

; Function Attrs: nounwind readnone speculatable
declare float @llvm.fabs.f32(float) #6

; Function Attrs: nounwind readnone speculatable
declare { i32, i1 } @llvm.ssub.with.overflow.i32(i32, i32) #6

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__16__treeINS_12__value_typeIN5fxcrt10ByteStringENS_10unique_ptrI18CPDF_Type3GlyphMapNS_14default_deleteIS5_EEEEEENS_19__map_value_compareIS3_S9_NS_4lessIS3_EELb1EEENS_9allocatorIS9_EEE7destroyEPNS_11__tree_nodeIS9_PvEE(%"class.std::__1::__tree.131"*, %"class.std::__1::__tree_node"*) local_unnamed_addr #0 comdat align 2 {
  %3 = icmp eq %"class.std::__1::__tree_node"* %1, null
  br i1 %3, label %18, label %4

4:                                                ; preds = %2
  %5 = bitcast %"class.std::__1::__tree_node"* %1 to %"class.std::__1::__tree_node"**
  %6 = load %"class.std::__1::__tree_node"*, %"class.std::__1::__tree_node"** %5, align 8
  tail call void @_ZNSt3__16__treeINS_12__value_typeIN5fxcrt10ByteStringENS_10unique_ptrI18CPDF_Type3GlyphMapNS_14default_deleteIS5_EEEEEENS_19__map_value_compareIS3_S9_NS_4lessIS3_EELb1EEENS_9allocatorIS9_EEE7destroyEPNS_11__tree_nodeIS9_PvEE(%"class.std::__1::__tree.131"* %0, %"class.std::__1::__tree_node"* %6) #5
  %7 = getelementptr inbounds %"class.std::__1::__tree_node", %"class.std::__1::__tree_node"* %1, i64 0, i32 0, i32 1
  %8 = bitcast %"class.std::__1::__tree_node_base"** %7 to %"class.std::__1::__tree_node"**
  %9 = load %"class.std::__1::__tree_node"*, %"class.std::__1::__tree_node"** %8, align 8
  tail call void @_ZNSt3__16__treeINS_12__value_typeIN5fxcrt10ByteStringENS_10unique_ptrI18CPDF_Type3GlyphMapNS_14default_deleteIS5_EEEEEENS_19__map_value_compareIS3_S9_NS_4lessIS3_EELb1EEENS_9allocatorIS9_EEE7destroyEPNS_11__tree_nodeIS9_PvEE(%"class.std::__1::__tree.131"* %0, %"class.std::__1::__tree_node"* %9) #5
  %10 = getelementptr inbounds %"class.std::__1::__tree_node", %"class.std::__1::__tree_node"* %1, i64 0, i32 1, i32 0, i32 1, i32 0, i32 0, i32 0
  %11 = load %class.CPDF_Type3GlyphMap*, %class.CPDF_Type3GlyphMap** %10, align 8
  store %class.CPDF_Type3GlyphMap* null, %class.CPDF_Type3GlyphMap** %10, align 8
  %12 = icmp eq %class.CPDF_Type3GlyphMap* %11, null
  br i1 %12, label %15, label %13

13:                                               ; preds = %4
  tail call void @_ZN18CPDF_Type3GlyphMapD1Ev(%class.CPDF_Type3GlyphMap* nonnull %11) #5
  %14 = bitcast %class.CPDF_Type3GlyphMap* %11 to i8*
  tail call void @_ZdlPv(i8* %14) #8
  br label %15

15:                                               ; preds = %4, %13
  %16 = getelementptr inbounds %"class.std::__1::__tree_node", %"class.std::__1::__tree_node"* %1, i64 0, i32 1, i32 0, i32 0
  tail call void @_ZN5fxcrt10ByteStringD1Ev(%"class.fxcrt::ByteString"* %16) #5
  %17 = bitcast %"class.std::__1::__tree_node"* %1 to i8*
  tail call void @_ZdlPv(i8* %17) #8
  br label %18

18:                                               ; preds = %2, %15
  ret void
}

declare zeroext i1 @_ZNK5fxcrt10ByteStringltERKS0_(%"class.fxcrt::ByteString"*, %"class.fxcrt::ByteString"* dereferenceable(8)) local_unnamed_addr #1

; Function Attrs: nobuiltin nofree
declare noalias nonnull i8* @_Znwm(i64) local_unnamed_addr #7

declare void @_ZN18CPDF_Type3GlyphMapC1Ev(%class.CPDF_Type3GlyphMap*) unnamed_addr #1

; Function Attrs: nounwind
declare void @_ZN18CPDF_Type3GlyphMapD1Ev(%class.CPDF_Type3GlyphMap*) unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden { %"class.std::__1::__tree_end_node"*, i8 } @_ZNSt3__16__treeINS_12__value_typeIN5fxcrt10ByteStringENS_10unique_ptrI18CPDF_Type3GlyphMapNS_14default_deleteIS5_EEEEEENS_19__map_value_compareIS3_S9_NS_4lessIS3_EELb1EEENS_9allocatorIS9_EEE25__emplace_unique_key_argsIS3_JRKNS_21piecewise_construct_tENS_5tupleIJRKS3_EEENSL_IJEEEEEENS_4pairINS_15__tree_iteratorIS9_PNS_11__tree_nodeIS9_PvEElEEbEERKT_DpOT0_(%"class.std::__1::__tree.131"*, %"class.fxcrt::ByteString"* dereferenceable(8), %"struct.std::__1::piecewise_construct_t"* dereferenceable(1), %"class.std::__1::tuple.215"* dereferenceable(8), %"class.std::__1::tuple.218"* dereferenceable(1)) local_unnamed_addr #0 comdat align 2 {
  %6 = getelementptr inbounds %"class.std::__1::__tree.131", %"class.std::__1::__tree.131"* %0, i64 0, i32 1, i32 0, i32 0
  %7 = bitcast %"class.std::__1::__tree_end_node"* %6 to %"class.std::__1::__tree_node"**
  %8 = load %"class.std::__1::__tree_node"*, %"class.std::__1::__tree_node"** %7, align 8
  %9 = icmp eq %"class.std::__1::__tree_node"* %8, null
  br i1 %9, label %37, label %10

10:                                               ; preds = %5
  %11 = getelementptr inbounds %"class.std::__1::__tree.131", %"class.std::__1::__tree.131"* %0, i64 0, i32 1, i32 0, i32 0, i32 0
  br label %12

12:                                               ; preds = %33, %10
  %13 = phi %"class.std::__1::__tree_node"* [ %36, %33 ], [ %8, %10 ]
  %14 = phi %"class.std::__1::__tree_node_base"** [ %35, %33 ], [ %11, %10 ]
  %15 = getelementptr inbounds %"class.std::__1::__tree_node", %"class.std::__1::__tree_node"* %13, i64 0, i32 1, i32 0, i32 0
  %16 = tail call zeroext i1 @_ZNK5fxcrt10ByteStringltERKS0_(%"class.fxcrt::ByteString"* %1, %"class.fxcrt::ByteString"* dereferenceable(8) %15) #5
  br i1 %16, label %17, label %23

17:                                               ; preds = %12
  %18 = getelementptr inbounds %"class.std::__1::__tree_node", %"class.std::__1::__tree_node"* %13, i64 0, i32 0, i32 0, i32 0
  %19 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %18, align 8
  %20 = icmp eq %"class.std::__1::__tree_node_base"* %19, null
  br i1 %20, label %21, label %33

21:                                               ; preds = %17
  %22 = getelementptr inbounds %"class.std::__1::__tree_node", %"class.std::__1::__tree_node"* %13, i64 0, i32 0, i32 0
  br label %39

23:                                               ; preds = %12
  %24 = tail call zeroext i1 @_ZNK5fxcrt10ByteStringltERKS0_(%"class.fxcrt::ByteString"* %15, %"class.fxcrt::ByteString"* dereferenceable(8) %1) #5
  br i1 %24, label %25, label %31

25:                                               ; preds = %23
  %26 = getelementptr inbounds %"class.std::__1::__tree_node", %"class.std::__1::__tree_node"* %13, i64 0, i32 0, i32 1
  %27 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %26, align 8
  %28 = icmp eq %"class.std::__1::__tree_node_base"* %27, null
  br i1 %28, label %29, label %33

29:                                               ; preds = %25
  %30 = getelementptr inbounds %"class.std::__1::__tree_node", %"class.std::__1::__tree_node"* %13, i64 0, i32 0, i32 0
  br label %39

31:                                               ; preds = %23
  %32 = getelementptr inbounds %"class.std::__1::__tree_node", %"class.std::__1::__tree_node"* %13, i64 0, i32 0, i32 0
  br label %39

33:                                               ; preds = %25, %17
  %34 = phi %"class.std::__1::__tree_node_base"* [ %19, %17 ], [ %27, %25 ]
  %35 = phi %"class.std::__1::__tree_node_base"** [ %18, %17 ], [ %26, %25 ]
  %36 = bitcast %"class.std::__1::__tree_node_base"* %34 to %"class.std::__1::__tree_node"*
  br label %12

37:                                               ; preds = %5
  %38 = getelementptr inbounds %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_end_node"* %6, i64 0, i32 0
  br label %39

39:                                               ; preds = %21, %29, %31, %37
  %40 = phi %"class.std::__1::__tree_end_node"* [ %6, %37 ], [ %22, %21 ], [ %30, %29 ], [ %32, %31 ]
  %41 = phi %"class.std::__1::__tree_node_base"** [ %38, %37 ], [ %18, %21 ], [ %26, %29 ], [ %14, %31 ]
  %42 = bitcast %"class.std::__1::__tree_node_base"** %41 to %"class.std::__1::__tree_node"**
  %43 = load %"class.std::__1::__tree_node"*, %"class.std::__1::__tree_node"** %42, align 8
  %44 = icmp eq %"class.std::__1::__tree_node"* %43, null
  br i1 %44, label %45, label %74

45:                                               ; preds = %39
  %46 = tail call i8* @_Znwm(i64 48) #8, !noalias !5
  %47 = getelementptr inbounds i8, i8* %46, i64 32
  %48 = getelementptr inbounds %"class.std::__1::tuple.215", %"class.std::__1::tuple.215"* %3, i64 0, i32 0, i32 0, i32 0
  %49 = load %"class.fxcrt::ByteString"*, %"class.fxcrt::ByteString"** %48, align 8, !noalias !5
  %50 = bitcast i8* %47 to %"class.fxcrt::ByteString"*
  tail call void @_ZN5fxcrt10ByteStringC1ERKS0_(%"class.fxcrt::ByteString"* %50, %"class.fxcrt::ByteString"* dereferenceable(8) %49) #5, !noalias !5
  %51 = getelementptr inbounds i8, i8* %46, i64 40
  %52 = bitcast i8* %51 to i64*
  store i64 0, i64* %52, align 8, !noalias !5
  %53 = bitcast i8* %46 to %"class.std::__1::__tree_node"*
  %54 = bitcast i8* %46 to %"class.std::__1::__tree_node_base"*
  %55 = getelementptr inbounds i8, i8* %46, i64 16
  %56 = bitcast i8* %55 to %"class.std::__1::__tree_end_node"**
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %46, i8 0, i64 16, i1 false) #5
  store %"class.std::__1::__tree_end_node"* %40, %"class.std::__1::__tree_end_node"** %56, align 8
  %57 = bitcast %"class.std::__1::__tree_node_base"** %41 to i8**
  store i8* %46, i8** %57, align 8
  %58 = getelementptr inbounds %"class.std::__1::__tree.131", %"class.std::__1::__tree.131"* %0, i64 0, i32 0
  %59 = load %"class.std::__1::__tree_end_node"*, %"class.std::__1::__tree_end_node"** %58, align 8
  %60 = getelementptr inbounds %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_end_node"* %59, i64 0, i32 0
  %61 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %60, align 8
  %62 = icmp eq %"class.std::__1::__tree_node_base"* %61, null
  br i1 %62, label %67, label %63

63:                                               ; preds = %45
  %64 = ptrtoint %"class.std::__1::__tree_node_base"* %61 to i64
  %65 = bitcast %"class.std::__1::__tree.131"* %0 to i64*
  store i64 %64, i64* %65, align 8
  %66 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %41, align 8
  br label %67

67:                                               ; preds = %63, %45
  %68 = phi %"class.std::__1::__tree_node_base"* [ %54, %45 ], [ %66, %63 ]
  %69 = getelementptr inbounds %"class.std::__1::__tree.131", %"class.std::__1::__tree.131"* %0, i64 0, i32 1, i32 0, i32 0, i32 0
  %70 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %69, align 8
  tail call void @_ZNSt3__127__tree_balance_after_insertIPNS_16__tree_node_baseIPvEEEEvT_S5_(%"class.std::__1::__tree_node_base"* %70, %"class.std::__1::__tree_node_base"* %68) #5
  %71 = getelementptr inbounds %"class.std::__1::__tree.131", %"class.std::__1::__tree.131"* %0, i64 0, i32 2, i32 0, i32 0
  %72 = load i64, i64* %71, align 8
  %73 = add i64 %72, 1
  store i64 %73, i64* %71, align 8
  br label %74

74:                                               ; preds = %67, %39
  %75 = phi i8 [ 1, %67 ], [ 0, %39 ]
  %76 = phi %"class.std::__1::__tree_node"* [ %53, %67 ], [ %43, %39 ]
  %77 = getelementptr inbounds %"class.std::__1::__tree_node", %"class.std::__1::__tree_node"* %76, i64 0, i32 0, i32 0
  %78 = insertvalue { %"class.std::__1::__tree_end_node"*, i8 } undef, %"class.std::__1::__tree_end_node"* %77, 0
  %79 = insertvalue { %"class.std::__1::__tree_end_node"*, i8 } %78, i8 %75, 1
  ret { %"class.std::__1::__tree_end_node"*, i8 } %79
}

declare void @_ZN5fxcrt10ByteStringC1ERKS0_(%"class.fxcrt::ByteString"*, %"class.fxcrt::ByteString"* dereferenceable(8)) unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__127__tree_balance_after_insertIPNS_16__tree_node_baseIPvEEEEvT_S5_(%"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"*) local_unnamed_addr #0 comdat {
  %3 = icmp eq %"class.std::__1::__tree_node_base"* %1, %0
  %4 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %1, i64 0, i32 3
  %5 = zext i1 %3 to i8
  store i8 %5, i8* %4, align 8
  br i1 %3, label %156, label %6

6:                                                ; preds = %2, %149
  %7 = phi %"class.std::__1::__tree_node_base"* [ %20, %149 ], [ %1, %2 ]
  %8 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %7, i64 0, i32 2
  %9 = bitcast %"class.std::__1::__tree_end_node"** %8 to %"class.std::__1::__tree_node_base"**
  %10 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %9, align 8
  %11 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %10, i64 0, i32 3
  %12 = load i8, i8* %11, align 8, !range !8
  %13 = icmp eq i8 %12, 0
  br i1 %13, label %14, label %156

14:                                               ; preds = %6
  %15 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %10, i64 0, i32 2
  %16 = load %"class.std::__1::__tree_end_node"*, %"class.std::__1::__tree_end_node"** %15, align 8
  %17 = getelementptr inbounds %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_end_node"* %16, i64 0, i32 0
  %18 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %17, align 8
  %19 = icmp eq %"class.std::__1::__tree_node_base"* %18, %10
  %20 = bitcast %"class.std::__1::__tree_end_node"* %16 to %"class.std::__1::__tree_node_base"*
  br i1 %19, label %21, label %87

21:                                               ; preds = %14
  %22 = getelementptr inbounds %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_end_node"* %16, i64 1, i32 0
  %23 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %22, align 8
  %24 = icmp eq %"class.std::__1::__tree_node_base"* %23, null
  br i1 %24, label %29, label %25

25:                                               ; preds = %21
  %26 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %23, i64 0, i32 3
  %27 = load i8, i8* %26, align 8, !range !8
  %28 = icmp eq i8 %27, 0
  br i1 %28, label %149, label %29

29:                                               ; preds = %25, %21
  %30 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %10, i64 0, i32 2
  %31 = bitcast %"class.std::__1::__tree_end_node"* %16 to %"class.std::__1::__tree_node_base"*
  %32 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %10, i64 0, i32 0, i32 0
  %33 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %32, align 8
  %34 = icmp eq %"class.std::__1::__tree_node_base"* %33, %7
  br i1 %34, label %61, label %35

35:                                               ; preds = %29
  %36 = ptrtoint %"class.std::__1::__tree_end_node"* %16 to i64
  %37 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %10, i64 0, i32 1
  %38 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %37, align 8
  %39 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %38, i64 0, i32 0, i32 0
  %40 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %39, align 8
  store %"class.std::__1::__tree_node_base"* %40, %"class.std::__1::__tree_node_base"** %37, align 8
  %41 = icmp eq %"class.std::__1::__tree_node_base"* %40, null
  br i1 %41, label %47, label %42

42:                                               ; preds = %35
  %43 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %10, i64 0, i32 0
  %44 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %40, i64 0, i32 2
  store %"class.std::__1::__tree_end_node"* %43, %"class.std::__1::__tree_end_node"** %44, align 8
  %45 = bitcast %"class.std::__1::__tree_end_node"** %30 to i64*
  %46 = load i64, i64* %45, align 8
  br label %47

47:                                               ; preds = %35, %42
  %48 = phi i64 [ %46, %42 ], [ %36, %35 ]
  %49 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %38, i64 0, i32 2
  %50 = bitcast %"class.std::__1::__tree_end_node"** %49 to i64*
  store i64 %48, i64* %50, align 8
  %51 = load %"class.std::__1::__tree_end_node"*, %"class.std::__1::__tree_end_node"** %30, align 8
  %52 = getelementptr inbounds %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_end_node"* %51, i64 0, i32 0
  %53 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %52, align 8
  %54 = icmp eq %"class.std::__1::__tree_node_base"* %53, %10
  %55 = getelementptr inbounds %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_end_node"* %51, i64 1, i32 0
  %56 = select i1 %54, %"class.std::__1::__tree_node_base"** %52, %"class.std::__1::__tree_node_base"** %55
  store %"class.std::__1::__tree_node_base"* %38, %"class.std::__1::__tree_node_base"** %56, align 8
  store %"class.std::__1::__tree_node_base"* %10, %"class.std::__1::__tree_node_base"** %39, align 8
  %57 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %38, i64 0, i32 0
  store %"class.std::__1::__tree_end_node"* %57, %"class.std::__1::__tree_end_node"** %30, align 8
  %58 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %38, i64 0, i32 2
  %59 = bitcast %"class.std::__1::__tree_end_node"** %58 to %"class.std::__1::__tree_node_base"**
  %60 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %59, align 8
  br label %61

61:                                               ; preds = %47, %29
  %62 = phi %"class.std::__1::__tree_node_base"* [ %31, %29 ], [ %60, %47 ]
  %63 = phi %"class.std::__1::__tree_node_base"* [ %10, %29 ], [ %38, %47 ]
  %64 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %63, i64 0, i32 3
  store i8 1, i8* %64, align 8
  %65 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %62, i64 0, i32 3
  store i8 0, i8* %65, align 8
  %66 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %62, i64 0, i32 0, i32 0
  %67 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %66, align 8
  %68 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %67, i64 0, i32 1
  %69 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %68, align 8
  store %"class.std::__1::__tree_node_base"* %69, %"class.std::__1::__tree_node_base"** %66, align 8
  %70 = icmp eq %"class.std::__1::__tree_node_base"* %69, null
  br i1 %70, label %74, label %71

71:                                               ; preds = %61
  %72 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %62, i64 0, i32 0
  %73 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %69, i64 0, i32 2
  store %"class.std::__1::__tree_end_node"* %72, %"class.std::__1::__tree_end_node"** %73, align 8
  br label %74

74:                                               ; preds = %71, %61
  %75 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %62, i64 0, i32 2
  %76 = bitcast %"class.std::__1::__tree_end_node"** %75 to i64*
  %77 = load i64, i64* %76, align 8
  %78 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %67, i64 0, i32 2
  %79 = bitcast %"class.std::__1::__tree_end_node"** %78 to i64*
  store i64 %77, i64* %79, align 8
  %80 = load %"class.std::__1::__tree_end_node"*, %"class.std::__1::__tree_end_node"** %75, align 8
  %81 = getelementptr inbounds %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_end_node"* %80, i64 0, i32 0
  %82 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %81, align 8
  %83 = icmp eq %"class.std::__1::__tree_node_base"* %82, %62
  %84 = getelementptr inbounds %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_end_node"* %80, i64 1, i32 0
  %85 = select i1 %83, %"class.std::__1::__tree_node_base"** %81, %"class.std::__1::__tree_node_base"** %84
  store %"class.std::__1::__tree_node_base"* %67, %"class.std::__1::__tree_node_base"** %85, align 8
  store %"class.std::__1::__tree_node_base"* %62, %"class.std::__1::__tree_node_base"** %68, align 8
  %86 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %67, i64 0, i32 0
  store %"class.std::__1::__tree_end_node"* %86, %"class.std::__1::__tree_end_node"** %75, align 8
  br label %156

87:                                               ; preds = %14
  %88 = icmp eq %"class.std::__1::__tree_node_base"* %18, null
  br i1 %88, label %93, label %89

89:                                               ; preds = %87
  %90 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %18, i64 0, i32 3
  %91 = load i8, i8* %90, align 8, !range !8
  %92 = icmp eq i8 %91, 0
  br i1 %92, label %149, label %93

93:                                               ; preds = %89, %87
  %94 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %10, i64 0, i32 2
  %95 = bitcast %"class.std::__1::__tree_end_node"* %16 to %"class.std::__1::__tree_node_base"*
  %96 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %10, i64 0, i32 0, i32 0
  %97 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %96, align 8
  %98 = icmp eq %"class.std::__1::__tree_node_base"* %97, %7
  br i1 %98, label %99, label %123

99:                                               ; preds = %93
  %100 = ptrtoint %"class.std::__1::__tree_end_node"* %16 to i64
  %101 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %10, i64 0, i32 0, i32 0
  %102 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %7, i64 0, i32 1
  %103 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %102, align 8
  store %"class.std::__1::__tree_node_base"* %103, %"class.std::__1::__tree_node_base"** %101, align 8
  %104 = icmp eq %"class.std::__1::__tree_node_base"* %103, null
  br i1 %104, label %110, label %105

105:                                              ; preds = %99
  %106 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %10, i64 0, i32 0
  %107 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %103, i64 0, i32 2
  store %"class.std::__1::__tree_end_node"* %106, %"class.std::__1::__tree_end_node"** %107, align 8
  %108 = bitcast %"class.std::__1::__tree_end_node"** %94 to i64*
  %109 = load i64, i64* %108, align 8
  br label %110

110:                                              ; preds = %99, %105
  %111 = phi i64 [ %109, %105 ], [ %100, %99 ]
  %112 = bitcast %"class.std::__1::__tree_end_node"** %8 to i64*
  store i64 %111, i64* %112, align 8
  %113 = load %"class.std::__1::__tree_end_node"*, %"class.std::__1::__tree_end_node"** %94, align 8
  %114 = getelementptr inbounds %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_end_node"* %113, i64 0, i32 0
  %115 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %114, align 8
  %116 = icmp eq %"class.std::__1::__tree_node_base"* %115, %10
  %117 = getelementptr inbounds %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_end_node"* %113, i64 1, i32 0
  %118 = select i1 %116, %"class.std::__1::__tree_node_base"** %114, %"class.std::__1::__tree_node_base"** %117
  store %"class.std::__1::__tree_node_base"* %7, %"class.std::__1::__tree_node_base"** %118, align 8
  store %"class.std::__1::__tree_node_base"* %10, %"class.std::__1::__tree_node_base"** %102, align 8
  %119 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %7, i64 0, i32 0
  store %"class.std::__1::__tree_end_node"* %119, %"class.std::__1::__tree_end_node"** %94, align 8
  %120 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %7, i64 0, i32 2
  %121 = bitcast %"class.std::__1::__tree_end_node"** %120 to %"class.std::__1::__tree_node_base"**
  %122 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %121, align 8
  br label %123

123:                                              ; preds = %93, %110
  %124 = phi %"class.std::__1::__tree_node_base"* [ %122, %110 ], [ %95, %93 ]
  %125 = phi %"class.std::__1::__tree_node_base"* [ %7, %110 ], [ %10, %93 ]
  %126 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %125, i64 0, i32 3
  store i8 1, i8* %126, align 8
  %127 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %124, i64 0, i32 3
  store i8 0, i8* %127, align 8
  %128 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %124, i64 0, i32 1
  %129 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %128, align 8
  %130 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %129, i64 0, i32 0, i32 0
  %131 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %130, align 8
  store %"class.std::__1::__tree_node_base"* %131, %"class.std::__1::__tree_node_base"** %128, align 8
  %132 = icmp eq %"class.std::__1::__tree_node_base"* %131, null
  br i1 %132, label %136, label %133

133:                                              ; preds = %123
  %134 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %124, i64 0, i32 0
  %135 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %131, i64 0, i32 2
  store %"class.std::__1::__tree_end_node"* %134, %"class.std::__1::__tree_end_node"** %135, align 8
  br label %136

136:                                              ; preds = %133, %123
  %137 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %124, i64 0, i32 2
  %138 = bitcast %"class.std::__1::__tree_end_node"** %137 to i64*
  %139 = load i64, i64* %138, align 8
  %140 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %129, i64 0, i32 2
  %141 = bitcast %"class.std::__1::__tree_end_node"** %140 to i64*
  store i64 %139, i64* %141, align 8
  %142 = load %"class.std::__1::__tree_end_node"*, %"class.std::__1::__tree_end_node"** %137, align 8
  %143 = getelementptr inbounds %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_end_node"* %142, i64 0, i32 0
  %144 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %143, align 8
  %145 = icmp eq %"class.std::__1::__tree_node_base"* %144, %124
  %146 = getelementptr inbounds %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_end_node"* %142, i64 1, i32 0
  %147 = select i1 %145, %"class.std::__1::__tree_node_base"** %143, %"class.std::__1::__tree_node_base"** %146
  store %"class.std::__1::__tree_node_base"* %129, %"class.std::__1::__tree_node_base"** %147, align 8
  store %"class.std::__1::__tree_node_base"* %124, %"class.std::__1::__tree_node_base"** %130, align 8
  %148 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %129, i64 0, i32 0
  store %"class.std::__1::__tree_end_node"* %148, %"class.std::__1::__tree_end_node"** %137, align 8
  br label %156

149:                                              ; preds = %89, %25
  %150 = phi i8* [ %26, %25 ], [ %90, %89 ]
  store i8 1, i8* %11, align 8
  %151 = icmp eq %"class.std::__1::__tree_node_base"* %20, %0
  %152 = getelementptr inbounds %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_end_node"* %16, i64 3
  %153 = bitcast %"class.std::__1::__tree_end_node"* %152 to i8*
  %154 = zext i1 %151 to i8
  store i8 %154, i8* %153, align 8
  store i8 1, i8* %150, align 8
  %155 = icmp eq %"class.std::__1::__tree_node_base"* %20, %0
  br i1 %155, label %156, label %6

156:                                              ; preds = %6, %149, %2, %136, %74
  ret void
}

declare void @_ZN15CFX_GlyphBitmapC1Eii(%class.CFX_GlyphBitmap*, i32, i32) unnamed_addr #1

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { argmemonly nounwind }
attributes #5 = { nounwind }
attributes #6 = { nounwind readnone speculatable }
attributes #7 = { nobuiltin nofree "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { builtin nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{!3}
!3 = distinct !{!3, !4, !"_ZNK10CFX_MatrixmlERKS_: argument 0"}
!4 = distinct !{!4, !"_ZNK10CFX_MatrixmlERKS_"}
!5 = !{!6}
!6 = distinct !{!6, !7, !"_ZNSt3__16__treeINS_12__value_typeIN5fxcrt10ByteStringENS_10unique_ptrI18CPDF_Type3GlyphMapNS_14default_deleteIS5_EEEEEENS_19__map_value_compareIS3_S9_NS_4lessIS3_EELb1EEENS_9allocatorIS9_EEE16__construct_nodeIJRKNS_21piecewise_construct_tENS_5tupleIJRKS3_EEENSL_IJEEEEEENS4_INS_11__tree_nodeIS9_PvEENS_22__tree_node_destructorINSE_ISS_EEEEEEDpOT_: argument 0"}
!7 = distinct !{!7, !"_ZNSt3__16__treeINS_12__value_typeIN5fxcrt10ByteStringENS_10unique_ptrI18CPDF_Type3GlyphMapNS_14default_deleteIS5_EEEEEENS_19__map_value_compareIS3_S9_NS_4lessIS3_EELb1EEENS_9allocatorIS9_EEE16__construct_nodeIJRKNS_21piecewise_construct_tENS_5tupleIJRKS3_EEENSL_IJEEEEEENS4_INS_11__tree_nodeIS9_PvEENS_22__tree_node_destructorINSE_ISS_EEEEEEDpOT_"}
!8 = !{i8 0, i8 2}
