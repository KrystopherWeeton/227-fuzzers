; ModuleID = '../../third_party/skia/src/core/SkScan_Hairline.cpp'
source_filename = "../../third_party/skia/src/core/SkScan_Hairline.cpp"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%struct.SkRect = type { float, float, float, float }
%struct.SkPoint = type { float, float }
%class.SkRegion = type { %struct.SkIRect, %"struct.SkRegion::RunHead"* }
%struct.SkIRect = type { i32, i32, i32, i32 }
%"struct.SkRegion::RunHead" = type opaque
%class.SkBlitter = type { i32 (...)**, %class.SkAutoMalloc }
%class.SkAutoMalloc = type { %"class.std::__1::unique_ptr", i64 }
%"class.std::__1::unique_ptr" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { i8* }
%class.SkBlitterClipper = type { %class.SkNullBlitter, %class.SkRectClipBlitter, %class.SkRgnClipBlitter }
%class.SkNullBlitter = type { %class.SkBlitter }
%class.SkRectClipBlitter = type { %class.SkBlitter, %class.SkBlitter*, %struct.SkIRect }
%class.SkRgnClipBlitter = type { %class.SkBlitter, %class.SkBlitter*, %class.SkRegion* }
%class.SkRasterClip = type { %class.SkRegion, %class.SkAAClip, i8, i8, i8, %struct.SkIRect*, %class.sk_sp }
%class.SkAAClip = type { %struct.SkIRect, %"struct.SkAAClip::RunHead"* }
%"struct.SkAAClip::RunHead" = type opaque
%class.sk_sp = type { %class.SkShader* }
%class.SkShader = type { %class.SkFlattenable.base, [4 x i8] }
%class.SkFlattenable.base = type { %class.SkRefCnt.base }
%class.SkRefCnt.base = type { %class.SkRefCntBase.base }
%class.SkRefCntBase.base = type <{ i32 (...)**, %"struct.std::__1::atomic" }>
%"struct.std::__1::atomic" = type { %"struct.std::__1::__atomic_base" }
%"struct.std::__1::__atomic_base" = type { %"struct.std::__1::__atomic_base.1" }
%"struct.std::__1::__atomic_base.1" = type { %"struct.std::__1::__cxx_atomic_impl" }
%"struct.std::__1::__cxx_atomic_impl" = type { %"struct.std::__1::__cxx_atomic_base_impl" }
%"struct.std::__1::__cxx_atomic_base_impl" = type { i32 }
%class.SkAAClipBlitterWrapper = type { %class.SkRegion, %class.SkAAClipBlitter, %class.SkRegion*, %class.SkBlitter* }
%class.SkAAClipBlitter = type { %class.SkBlitter, %class.SkBlitter*, %class.SkAAClip*, %struct.SkIRect, i16*, i8*, %class.SkAutoSMalloc, i8* }
%class.SkAutoSMalloc = type { i8*, i64, [256 x i32] }
%class.SkPath = type <{ %class.sk_sp.2, i32, %"struct.std::__1::atomic.5", %"struct.std::__1::atomic.5", i8, i8 }>
%class.sk_sp.2 = type { %class.SkPathRef* }
%class.SkPathRef = type <{ %class.SkNVRefCnt, %struct.SkRect, [4 x i8], %class.SkTDArray, %class.SkTDArray.3, %class.SkTDArray.4, i32, [4 x i8], %"class.SkIDChangeListener::List", i8, i8, i8, i8, i8, i8, i8, i8 }>
%class.SkNVRefCnt = type { %"struct.std::__1::atomic" }
%class.SkTDArray = type { %struct.SkPoint*, i32, i32 }
%class.SkTDArray.3 = type { i8*, i32, i32 }
%class.SkTDArray.4 = type { float*, i32, i32 }
%"class.SkIDChangeListener::List" = type { %class.SkMutex, %class.SkTDArray.10 }
%class.SkMutex = type { %class.SkSemaphore }
%class.SkSemaphore = type { %"struct.std::__1::atomic", %class.SkOnce, %"struct.SkSemaphore::OSSemaphore"* }
%class.SkOnce = type { %"struct.std::__1::atomic.5" }
%"struct.SkSemaphore::OSSemaphore" = type opaque
%class.SkTDArray.10 = type { %class.SkIDChangeListener**, i32, i32 }
%class.SkIDChangeListener = type { %class.SkRefCnt.base, %"struct.std::__1::atomic.11", [3 x i8] }
%"struct.std::__1::atomic.11" = type { %"struct.std::__1::__atomic_base.12" }
%"struct.std::__1::__atomic_base.12" = type { %"struct.std::__1::__cxx_atomic_impl.13" }
%"struct.std::__1::__cxx_atomic_impl.13" = type { %"struct.std::__1::__cxx_atomic_base_impl.14" }
%"struct.std::__1::__cxx_atomic_base_impl.14" = type { i8 }
%"struct.std::__1::atomic.5" = type { %"struct.std::__1::__atomic_base.6" }
%"struct.std::__1::__atomic_base.6" = type { %"struct.std::__1::__atomic_base.7" }
%"struct.std::__1::__atomic_base.7" = type { %"struct.std::__1::__cxx_atomic_impl.8" }
%"struct.std::__1::__cxx_atomic_impl.8" = type { %"struct.std::__1::__cxx_atomic_base_impl.9" }
%"struct.std::__1::__cxx_atomic_base_impl.9" = type { i8 }
%struct.SkConic = type { [3 x %struct.SkPoint], float }
%class.SkAutoConicToQuads = type <{ %class.SkAutoSTMalloc, i32, [4 x i8] }>
%class.SkAutoSTMalloc = type { %struct.SkPoint*, %union.anon }
%union.anon = type { [34 x i32] }

$_Z9hair_pathILN7SkPaint3CapE0EEvRK6SkPathRK12SkRasterClipP9SkBlitterPFvPK7SkPointiPK8SkRegionS9_E = comdat any

$_Z9hair_pathILN7SkPaint3CapE2EEvRK6SkPathRK12SkRasterClipP9SkBlitterPFvPK7SkPointiPK8SkRegionS9_E = comdat any

$_Z9hair_pathILN7SkPaint3CapE1EEvRK6SkPathRK12SkRasterClipP9SkBlitterPFvPK7SkPointiPK8SkRegionS9_E = comdat any

$_Z10extend_ptsILN7SkPaint3CapE2EEvN6SkPath4VerbES3_P7SkPointi = comdat any

$_Z10extend_ptsILN7SkPaint3CapE1EEvN6SkPath4VerbES3_P7SkPointi = comdat any

$_ZZN10SkPathPriv9PtsInIterEjE10gPtsInVerb = comdat any

@_ZZN6SkScan11HairLineRgnEPK7SkPointiPK8SkRegionP9SkBlitterE11fixedBounds = internal constant %struct.SkRect { float -3.276700e+04, float -3.276700e+04, float 3.276700e+04, float 3.276700e+04 }, align 4
@_ZTV13SkNullBlitter = external unnamed_addr constant { [16 x i8*] }, align 8
@_ZTV17SkRectClipBlitter = external unnamed_addr constant { [16 x i8*] }, align 8
@_ZTV16SkRgnClipBlitter = external unnamed_addr constant { [16 x i8*] }, align 8
@_ZZN10SkPathPriv9PtsInIterEjE10gPtsInVerb = linkonce_odr hidden local_unnamed_addr constant [7 x i8] c"\01\02\03\03\04\00\00", comdat, align 1

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN6SkScan11HairLineRgnEPK7SkPointiPK8SkRegionP9SkBlitter(%struct.SkPoint*, i32, %class.SkRegion*, %class.SkBlitter*) #0 align 2 {
  %5 = alloca %struct.SkIRect, align 4
  %6 = alloca %class.SkBlitterClipper, align 8
  %7 = alloca <4 x i32>, align 16
  %8 = bitcast <4 x i32>* %7 to %struct.SkIRect*
  %9 = alloca <4 x i32>, align 16
  %10 = bitcast <4 x i32>* %9 to %struct.SkIRect*
  %11 = alloca <4 x float>, align 16
  %12 = bitcast <4 x float>* %11 to %struct.SkRect*
  %13 = alloca <4 x float>, align 16
  %14 = bitcast %class.SkBlitterClipper* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 112, i8* nonnull %14) #10
  %15 = getelementptr inbounds %class.SkBlitterClipper, %class.SkBlitterClipper* %6, i64 0, i32 1, i32 1
  %16 = bitcast %class.SkBlitter** %15 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %16, i8 -86, i64 64, i1 false)
  %17 = getelementptr inbounds %class.SkBlitterClipper, %class.SkBlitterClipper* %6, i64 0, i32 0, i32 0, i32 0
  %18 = getelementptr inbounds %class.SkBlitterClipper, %class.SkBlitterClipper* %6, i64 0, i32 0, i32 0, i32 1
  %19 = bitcast %class.SkAutoMalloc* %18 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %19, i8 0, i64 16, i1 false) #10
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [16 x i8*] }, { [16 x i8*] }* @_ZTV13SkNullBlitter, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %17, align 8
  %20 = getelementptr inbounds %class.SkBlitterClipper, %class.SkBlitterClipper* %6, i64 0, i32 1, i32 0, i32 0
  %21 = getelementptr inbounds %class.SkBlitterClipper, %class.SkBlitterClipper* %6, i64 0, i32 1, i32 0, i32 1
  %22 = bitcast %class.SkAutoMalloc* %21 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %22, i8 0, i64 16, i1 false) #10
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [16 x i8*] }, { [16 x i8*] }* @_ZTV17SkRectClipBlitter, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %20, align 8
  %23 = getelementptr inbounds %class.SkBlitterClipper, %class.SkBlitterClipper* %6, i64 0, i32 2, i32 0, i32 0
  %24 = getelementptr inbounds %class.SkBlitterClipper, %class.SkBlitterClipper* %6, i64 0, i32 2, i32 0, i32 1
  %25 = bitcast %class.SkAutoMalloc* %24 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %25, i8 0, i64 16, i1 false) #10
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [16 x i8*] }, { [16 x i8*] }* @_ZTV16SkRgnClipBlitter, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %23, align 8
  %26 = bitcast <4 x i32>* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %26) #10
  %27 = getelementptr inbounds <4 x i32>, <4 x i32>* %7, i64 0, i64 0
  %28 = getelementptr inbounds %struct.SkIRect, %struct.SkIRect* %8, i64 0, i32 1
  %29 = getelementptr inbounds %struct.SkIRect, %struct.SkIRect* %8, i64 0, i32 2
  %30 = getelementptr inbounds %struct.SkIRect, %struct.SkIRect* %8, i64 0, i32 3
  %31 = bitcast <4 x i32>* %9 to i8*
  %32 = bitcast <4 x i32>* %7 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %32, i8 -86, i64 16, i1 false)
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %31) #10
  %33 = getelementptr inbounds <4 x i32>, <4 x i32>* %9, i64 0, i64 0
  %34 = getelementptr inbounds %struct.SkIRect, %struct.SkIRect* %10, i64 0, i32 1
  %35 = getelementptr inbounds %struct.SkIRect, %struct.SkIRect* %10, i64 0, i32 2
  %36 = getelementptr inbounds %struct.SkIRect, %struct.SkIRect* %10, i64 0, i32 3
  %37 = bitcast <4 x float>* %11 to i8*
  %38 = bitcast <4 x i32>* %9 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %38, i8 -86, i64 16, i1 false)
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %37) #10
  %39 = icmp ne %class.SkRegion* %2, null
  %40 = bitcast <4 x float>* %11 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %40, i8 -1, i64 16, i1 false)
  br i1 %39, label %41, label %45

41:                                               ; preds = %4
  %42 = bitcast %class.SkRegion* %2 to <4 x i32>*
  %43 = load <4 x i32>, <4 x i32>* %42, align 4
  %44 = sitofp <4 x i32> %43 to <4 x float>
  store <4 x float> %44, <4 x float>* %11, align 16
  br label %45

45:                                               ; preds = %41, %4
  %46 = add i32 %1, -1
  %47 = icmp sgt i32 %46, 0
  br i1 %47, label %48, label %56

48:                                               ; preds = %45
  %49 = bitcast <4 x float>* %13 to i8*
  %50 = bitcast <4 x float>* %13 to %struct.SkPoint*
  %51 = bitcast %struct.SkIRect* %5 to i8*
  %52 = getelementptr inbounds %class.SkRegion, %class.SkRegion* %2, i64 0, i32 1
  %53 = zext i32 %46 to i64
  %54 = bitcast <4 x float>* %13 to i8*
  %55 = bitcast %class.SkRegion* %2 to <4 x i32>*
  br label %60

56:                                               ; preds = %228, %45
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %37) #10
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %31) #10
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %26) #10
  %57 = getelementptr inbounds %class.SkBlitterClipper, %class.SkBlitterClipper* %6, i64 0, i32 2, i32 0
  call void @_ZN9SkBlitterD2Ev(%class.SkBlitter* %57) #10
  %58 = getelementptr inbounds %class.SkBlitterClipper, %class.SkBlitterClipper* %6, i64 0, i32 1, i32 0
  call void @_ZN9SkBlitterD2Ev(%class.SkBlitter* %58) #10
  %59 = getelementptr inbounds %class.SkBlitterClipper, %class.SkBlitterClipper* %6, i64 0, i32 0, i32 0
  call void @_ZN9SkBlitterD2Ev(%class.SkBlitter* nonnull %59) #10
  call void @llvm.lifetime.end.p0i8(i64 112, i8* nonnull %14) #10
  ret void

60:                                               ; preds = %228, %48
  %61 = phi i64 [ 0, %48 ], [ %229, %228 ]
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %49) #10
  %62 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %0, i64 %61
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %54, i8 -1, i64 16, i1 false)
  %63 = call zeroext i1 @_ZN13SkLineClipper13IntersectLineEPK7SkPointRK6SkRectPS0_(%struct.SkPoint* %62, %struct.SkRect* nonnull dereferenceable(16) @_ZZN6SkScan11HairLineRgnEPK7SkPointiPK8SkRegionP9SkBlitterE11fixedBounds, %struct.SkPoint* nonnull %50) #10
  br i1 %63, label %64, label %228

64:                                               ; preds = %60
  br i1 %39, label %65, label %67

65:                                               ; preds = %64
  %66 = call zeroext i1 @_ZN13SkLineClipper13IntersectLineEPK7SkPointRK6SkRectPS0_(%struct.SkPoint* nonnull %50, %struct.SkRect* nonnull dereferenceable(16) %12, %struct.SkPoint* nonnull %50) #10
  br i1 %66, label %67, label %228

67:                                               ; preds = %65, %64
  %68 = load <4 x float>, <4 x float>* %13, align 16
  %69 = fmul <4 x float> %68, <float 6.400000e+01, float 6.400000e+01, float 6.400000e+01, float 6.400000e+01>
  %70 = fptosi <4 x float> %69 to <4 x i32>
  br i1 %39, label %71, label %139

71:                                               ; preds = %67
  %72 = load <4 x i32>, <4 x i32>* %55, align 4
  %73 = shl <4 x i32> %72, <i32 6, i32 6, i32 6, i32 6>
  store <4 x i32> %73, <4 x i32>* %7, align 16
  store <4 x i32> %70, <4 x i32>* %9, align 16
  %74 = extractelement <4 x i32> %70, i32 0
  %75 = extractelement <4 x i32> %70, i32 2
  %76 = icmp slt i32 %75, %74
  br i1 %76, label %77, label %78

77:                                               ; preds = %71
  store i32 %75, i32* %33, align 16
  store i32 %74, i32* %35, align 8
  br label %78

78:                                               ; preds = %77, %71
  %79 = phi i32 [ %74, %77 ], [ %75, %71 ]
  %80 = extractelement <4 x i32> %70, i32 1
  %81 = extractelement <4 x i32> %70, i32 3
  %82 = icmp slt i32 %81, %80
  br i1 %82, label %83, label %84

83:                                               ; preds = %78
  store i32 %81, i32* %34, align 4
  store i32 %80, i32* %36, align 4
  br label %84

84:                                               ; preds = %78, %83
  %85 = phi i32 [ %81, %78 ], [ %80, %83 ]
  %86 = add nsw i32 %79, 64
  store i32 %86, i32* %35, align 8
  %87 = add nsw i32 %85, 64
  store i32 %87, i32* %36, align 4
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %51) #10
  call void @llvm.memset.p0i8.i64(i8* nonnull align 4 %51, i8 -86, i64 16, i1 false) #10
  %88 = call zeroext i1 @_ZN7SkIRect9intersectERKS_S1_(%struct.SkIRect* nonnull %5, %struct.SkIRect* nonnull dereferenceable(16) %10, %struct.SkIRect* nonnull dereferenceable(16) %8) #10
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %51) #10
  br i1 %88, label %89, label %228

89:                                               ; preds = %84
  %90 = load %"struct.SkRegion::RunHead"*, %"struct.SkRegion::RunHead"** %52, align 8
  %91 = icmp eq %"struct.SkRegion::RunHead"* %90, null
  br i1 %91, label %92, label %137

92:                                               ; preds = %89
  %93 = load i32, i32* %35, align 8
  %94 = sext i32 %93 to i64
  %95 = load i32, i32* %33, align 16
  %96 = sext i32 %95 to i64
  %97 = sub nsw i64 %94, %96
  %98 = load i32, i32* %36, align 4
  %99 = sext i32 %98 to i64
  %100 = load i32, i32* %34, align 4
  %101 = sext i32 %100 to i64
  %102 = sub nsw i64 %99, %101
  %103 = icmp slt i64 %97, 1
  %104 = icmp slt i64 %102, 1
  %105 = or i1 %103, %104
  br i1 %105, label %137, label %106

106:                                              ; preds = %92
  %107 = or i64 %102, %97
  %108 = add nsw i64 %107, 2147483648
  %109 = icmp ugt i64 %108, 4294967295
  br i1 %109, label %137, label %110

110:                                              ; preds = %106
  %111 = load i32, i32* %29, align 8
  %112 = sext i32 %111 to i64
  %113 = load i32, i32* %27, align 16
  %114 = sext i32 %113 to i64
  %115 = sub nsw i64 %112, %114
  %116 = load i32, i32* %30, align 4
  %117 = sext i32 %116 to i64
  %118 = load i32, i32* %28, align 4
  %119 = sext i32 %118 to i64
  %120 = sub nsw i64 %117, %119
  %121 = icmp slt i64 %115, 1
  %122 = icmp slt i64 %120, 1
  %123 = or i1 %121, %122
  br i1 %123, label %137, label %124

124:                                              ; preds = %110
  %125 = or i64 %120, %115
  %126 = add nsw i64 %125, 2147483648
  %127 = icmp ugt i64 %126, 4294967295
  %128 = icmp sgt i32 %113, %95
  %129 = or i1 %128, %127
  %130 = icmp sgt i32 %118, %100
  %131 = or i1 %130, %129
  %132 = icmp slt i32 %111, %93
  %133 = or i1 %132, %131
  %134 = icmp sge i32 %116, %98
  %135 = xor i1 %133, true
  %136 = and i1 %134, %135
  br i1 %136, label %139, label %137

137:                                              ; preds = %92, %106, %110, %124, %89
  %138 = call %class.SkBlitter* @_ZN16SkBlitterClipper5applyEP9SkBlitterPK8SkRegionPK7SkIRect(%class.SkBlitterClipper* nonnull %6, %class.SkBlitter* %3, %class.SkRegion* nonnull %2, %struct.SkIRect* null) #10
  br label %139

139:                                              ; preds = %124, %137, %67
  %140 = phi %class.SkBlitter* [ %3, %67 ], [ %138, %137 ], [ %3, %124 ]
  %141 = extractelement <4 x i32> %70, i32 0
  %142 = extractelement <4 x i32> %70, i32 2
  %143 = sub nsw i32 %142, %141
  %144 = extractelement <4 x i32> %70, i32 1
  %145 = extractelement <4 x i32> %70, i32 3
  %146 = sub nsw i32 %145, %144
  %147 = icmp slt i32 %143, 0
  %148 = sub nsw i32 0, %143
  %149 = select i1 %147, i32 %148, i32 %143
  %150 = icmp slt i32 %146, 0
  %151 = sub nsw i32 0, %146
  %152 = select i1 %150, i32 %151, i32 %146
  %153 = icmp sgt i32 %149, %152
  br i1 %153, label %154, label %191

154:                                              ; preds = %139
  %155 = icmp slt i32 %142, %141
  %156 = select i1 %155, i32 %141, i32 %142
  %157 = select i1 %155, i32 %142, i32 %141
  %158 = add nsw i32 %157, 32
  %159 = ashr i32 %158, 6
  %160 = add nsw i32 %156, 32
  %161 = ashr i32 %160, 6
  %162 = icmp eq i32 %159, %161
  br i1 %162, label %228, label %163

163:                                              ; preds = %154
  %164 = select i1 %155, i32 %145, i32 %144
  %165 = sext i32 %146 to i64
  %166 = shl nsw i64 %165, 16
  %167 = sext i32 %143 to i64
  %168 = sdiv i64 %166, %167
  %169 = icmp slt i64 %168, 2147483647
  %170 = select i1 %169, i64 %168, i64 2147483647
  %171 = icmp sgt i64 %170, -2147483647
  %172 = select i1 %171, i64 %170, i64 -2147483647
  %173 = trunc i64 %172 to i32
  %174 = shl i32 %164, 10
  %175 = sub nsw i32 32, %157
  %176 = and i32 %175, 63
  %177 = mul nsw i32 %176, %173
  %178 = ashr i32 %177, 6
  %179 = add nsw i32 %178, %174
  %180 = bitcast %class.SkBlitter* %140 to void (%class.SkBlitter*, i32, i32, i32)***
  br label %181

181:                                              ; preds = %181, %163
  %182 = phi i32 [ %179, %163 ], [ %188, %181 ]
  %183 = phi i32 [ %159, %163 ], [ %189, %181 ]
  %184 = ashr i32 %182, 16
  %185 = load void (%class.SkBlitter*, i32, i32, i32)**, void (%class.SkBlitter*, i32, i32, i32)*** %180, align 8
  %186 = getelementptr inbounds void (%class.SkBlitter*, i32, i32, i32)*, void (%class.SkBlitter*, i32, i32, i32)** %185, i64 2
  %187 = load void (%class.SkBlitter*, i32, i32, i32)*, void (%class.SkBlitter*, i32, i32, i32)** %186, align 8
  call void %187(%class.SkBlitter* %140, i32 %183, i32 %184, i32 1) #10
  %188 = add nsw i32 %182, %173
  %189 = add nsw i32 %183, 1
  %190 = icmp slt i32 %189, %161
  br i1 %190, label %181, label %228

191:                                              ; preds = %139
  %192 = icmp slt i32 %145, %144
  %193 = select i1 %192, i32 %144, i32 %145
  %194 = select i1 %192, i32 %145, i32 %144
  %195 = add nsw i32 %194, 32
  %196 = ashr i32 %195, 6
  %197 = add nsw i32 %193, 32
  %198 = ashr i32 %197, 6
  %199 = icmp eq i32 %196, %198
  br i1 %199, label %228, label %200

200:                                              ; preds = %191
  %201 = select i1 %192, i32 %142, i32 %141
  %202 = sext i32 %143 to i64
  %203 = shl nsw i64 %202, 16
  %204 = sext i32 %146 to i64
  %205 = sdiv i64 %203, %204
  %206 = icmp slt i64 %205, 2147483647
  %207 = select i1 %206, i64 %205, i64 2147483647
  %208 = icmp sgt i64 %207, -2147483647
  %209 = select i1 %208, i64 %207, i64 -2147483647
  %210 = trunc i64 %209 to i32
  %211 = shl i32 %201, 10
  %212 = sub nsw i32 32, %194
  %213 = and i32 %212, 63
  %214 = mul nsw i32 %213, %210
  %215 = ashr i32 %214, 6
  %216 = add nsw i32 %215, %211
  %217 = bitcast %class.SkBlitter* %140 to void (%class.SkBlitter*, i32, i32, i32)***
  br label %218

218:                                              ; preds = %218, %200
  %219 = phi i32 [ %216, %200 ], [ %225, %218 ]
  %220 = phi i32 [ %196, %200 ], [ %226, %218 ]
  %221 = ashr i32 %219, 16
  %222 = load void (%class.SkBlitter*, i32, i32, i32)**, void (%class.SkBlitter*, i32, i32, i32)*** %217, align 8
  %223 = getelementptr inbounds void (%class.SkBlitter*, i32, i32, i32)*, void (%class.SkBlitter*, i32, i32, i32)** %222, i64 2
  %224 = load void (%class.SkBlitter*, i32, i32, i32)*, void (%class.SkBlitter*, i32, i32, i32)** %223, align 8
  call void %224(%class.SkBlitter* %140, i32 %221, i32 %220, i32 1) #10
  %225 = add nsw i32 %219, %210
  %226 = add nsw i32 %220, 1
  %227 = icmp slt i32 %226, %198
  br i1 %227, label %218, label %228

228:                                              ; preds = %218, %181, %191, %154, %84, %65, %60
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %49) #10
  %229 = add nuw nsw i64 %61, 1
  %230 = icmp eq i64 %229, %53
  br i1 %230, label %56, label %60
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

declare zeroext i1 @_ZN13SkLineClipper13IntersectLineEPK7SkPointRK6SkRectPS0_(%struct.SkPoint*, %struct.SkRect* dereferenceable(16), %struct.SkPoint*) local_unnamed_addr #2

declare %class.SkBlitter* @_ZN16SkBlitterClipper5applyEP9SkBlitterPK8SkRegionPK7SkIRect(%class.SkBlitterClipper*, %class.SkBlitter*, %class.SkRegion*, %struct.SkIRect*) local_unnamed_addr #2

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN6SkScan8HairRectERK6SkRectRK12SkRasterClipP9SkBlitter(%struct.SkRect* nocapture readonly dereferenceable(16), %class.SkRasterClip* dereferenceable(72), %class.SkBlitter*) local_unnamed_addr #0 align 2 {
  %4 = alloca %struct.SkIRect, align 4
  %5 = alloca %class.SkAAClipBlitterWrapper, align 8
  %6 = alloca %class.SkBlitterClipper, align 8
  %7 = alloca { i64, i64 }, align 8
  %8 = bitcast { i64, i64 }* %7 to %struct.SkIRect*
  %9 = alloca { i64, i64 }, align 8
  %10 = bitcast { i64, i64 }* %9 to %struct.SkIRect*
  %11 = bitcast %class.SkAAClipBlitterWrapper* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 1160, i8* nonnull %11) #10
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %11, i8 -86, i64 1160, i1 false)
  call void @_ZN22SkAAClipBlitterWrapperC1Ev(%class.SkAAClipBlitterWrapper* nonnull %5) #10
  %12 = bitcast %class.SkBlitterClipper* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 112, i8* nonnull %12) #10
  %13 = getelementptr inbounds %class.SkBlitterClipper, %class.SkBlitterClipper* %6, i64 0, i32 1, i32 1
  %14 = bitcast %class.SkBlitter** %13 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %14, i8 -86, i64 64, i1 false)
  %15 = getelementptr inbounds %class.SkBlitterClipper, %class.SkBlitterClipper* %6, i64 0, i32 0, i32 0, i32 0
  %16 = getelementptr inbounds %class.SkBlitterClipper, %class.SkBlitterClipper* %6, i64 0, i32 0, i32 0, i32 1
  %17 = bitcast %class.SkAutoMalloc* %16 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %17, i8 0, i64 16, i1 false) #10
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [16 x i8*] }, { [16 x i8*] }* @_ZTV13SkNullBlitter, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %15, align 8
  %18 = getelementptr inbounds %class.SkBlitterClipper, %class.SkBlitterClipper* %6, i64 0, i32 1, i32 0, i32 0
  %19 = getelementptr inbounds %class.SkBlitterClipper, %class.SkBlitterClipper* %6, i64 0, i32 1, i32 0, i32 1
  %20 = bitcast %class.SkAutoMalloc* %19 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %20, i8 0, i64 16, i1 false) #10
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [16 x i8*] }, { [16 x i8*] }* @_ZTV17SkRectClipBlitter, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %18, align 8
  %21 = getelementptr inbounds %class.SkBlitterClipper, %class.SkBlitterClipper* %6, i64 0, i32 2, i32 0, i32 0
  %22 = getelementptr inbounds %class.SkBlitterClipper, %class.SkBlitterClipper* %6, i64 0, i32 2, i32 0, i32 1
  %23 = bitcast %class.SkAutoMalloc* %22 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %23, i8 0, i64 16, i1 false) #10
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [16 x i8*] }, { [16 x i8*] }* @_ZTV16SkRgnClipBlitter, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %21, align 8
  %24 = bitcast { i64, i64 }* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %24) #10
  %25 = bitcast { i64, i64 }* %7 to i32*
  %26 = getelementptr inbounds %struct.SkIRect, %struct.SkIRect* %8, i64 0, i32 1
  %27 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %7, i64 0, i32 1
  %28 = bitcast i64* %27 to i32*
  %29 = getelementptr inbounds %struct.SkIRect, %struct.SkIRect* %8, i64 0, i32 3
  %30 = getelementptr inbounds %struct.SkRect, %struct.SkRect* %0, i64 0, i32 0
  %31 = load float, float* %30, align 4
  %32 = call float @llvm.floor.f32(float %31)
  %33 = fcmp olt float %32, 0x41DFFFFFE0000000
  %34 = select i1 %33, float %32, float 0x41DFFFFFE0000000
  %35 = fcmp ogt float %34, 0xC1DFFFFFE0000000
  %36 = select i1 %35, float %34, float 0xC1DFFFFFE0000000
  %37 = fptosi float %36 to i32
  %38 = getelementptr inbounds %struct.SkRect, %struct.SkRect* %0, i64 0, i32 1
  %39 = load float, float* %38, align 4
  %40 = call float @llvm.floor.f32(float %39)
  %41 = fcmp olt float %40, 0x41DFFFFFE0000000
  %42 = select i1 %41, float %40, float 0x41DFFFFFE0000000
  %43 = fcmp ogt float %42, 0xC1DFFFFFE0000000
  %44 = select i1 %43, float %42, float 0xC1DFFFFFE0000000
  %45 = fptosi float %44 to i32
  %46 = getelementptr inbounds %struct.SkRect, %struct.SkRect* %0, i64 0, i32 2
  %47 = load float, float* %46, align 4
  %48 = fadd float %47, 1.000000e+00
  %49 = call float @llvm.floor.f32(float %48)
  %50 = fcmp olt float %49, 0x41DFFFFFE0000000
  %51 = select i1 %50, float %49, float 0x41DFFFFFE0000000
  %52 = fcmp ogt float %51, 0xC1DFFFFFE0000000
  %53 = select i1 %52, float %51, float 0xC1DFFFFFE0000000
  %54 = fptosi float %53 to i32
  %55 = getelementptr inbounds %struct.SkRect, %struct.SkRect* %0, i64 0, i32 3
  %56 = load float, float* %55, align 4
  %57 = fadd float %56, 1.000000e+00
  %58 = call float @llvm.floor.f32(float %57)
  %59 = fcmp olt float %58, 0x41DFFFFFE0000000
  %60 = select i1 %59, float %58, float 0x41DFFFFFE0000000
  %61 = fcmp ogt float %60, 0xC1DFFFFFE0000000
  %62 = select i1 %61, float %60, float 0xC1DFFFFFE0000000
  %63 = fptosi float %62 to i32
  %64 = zext i32 %45 to i64
  %65 = shl nuw i64 %64, 32
  %66 = zext i32 %37 to i64
  %67 = or i64 %65, %66
  %68 = zext i32 %63 to i64
  %69 = shl nuw i64 %68, 32
  %70 = zext i32 %54 to i64
  %71 = or i64 %69, %70
  %72 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %7, i64 0, i32 0
  store i64 %67, i64* %72, align 8
  store i64 %71, i64* %27, align 8
  %73 = bitcast { i64, i64 }* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %73) #10
  %74 = call dereferenceable(16) %struct.SkIRect* @_ZNK12SkRasterClip9getBoundsEv(%class.SkRasterClip* %1) #10
  %75 = getelementptr inbounds %struct.SkIRect, %struct.SkIRect* %74, i64 0, i32 0
  %76 = load i32, i32* %75, align 4
  %77 = sext i32 %76 to i64
  %78 = icmp sgt i64 %77, -2147483646
  %79 = select i1 %78, i64 %77, i64 -2147483646
  %80 = add nsw i64 %79, 4294967295
  %81 = getelementptr inbounds %struct.SkIRect, %struct.SkIRect* %74, i64 0, i32 1
  %82 = load i32, i32* %81, align 4
  %83 = sext i32 %82 to i64
  %84 = icmp sgt i64 %83, -2147483646
  %85 = select i1 %84, i64 %83, i64 -2147483646
  %86 = getelementptr inbounds %struct.SkIRect, %struct.SkIRect* %74, i64 0, i32 2
  %87 = load i32, i32* %86, align 4
  %88 = sext i32 %87 to i64
  %89 = icmp slt i64 %88, 2147483646
  %90 = select i1 %89, i64 %88, i64 2147483646
  %91 = icmp sgt i64 %90, -2147483648
  %92 = select i1 %91, i64 %90, i64 -2147483648
  %93 = add nsw i64 %92, 1
  %94 = getelementptr inbounds %struct.SkIRect, %struct.SkIRect* %74, i64 0, i32 3
  %95 = load i32, i32* %94, align 4
  %96 = sext i32 %95 to i64
  %97 = icmp slt i64 %96, 2147483646
  %98 = select i1 %97, i64 %96, i64 2147483646
  %99 = icmp sgt i64 %98, -2147483648
  %100 = select i1 %99, i64 %98, i64 -2147483648
  %101 = shl nsw i64 %85, 32
  %102 = add i64 %101, -4294967296
  %103 = and i64 %80, 4294967295
  %104 = or i64 %102, %103
  %105 = shl nsw i64 %100, 32
  %106 = add i64 %105, 4294967296
  %107 = and i64 %93, 4294967295
  %108 = or i64 %106, %107
  %109 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %9, i64 0, i32 0
  store i64 %104, i64* %109, align 8
  %110 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %9, i64 0, i32 1
  store i64 %108, i64* %110, align 8
  %111 = call zeroext i1 @_ZN7SkIRect9intersectERKS_S1_(%struct.SkIRect* nonnull %8, %struct.SkIRect* nonnull dereferenceable(16) %8, %struct.SkIRect* nonnull dereferenceable(16) %10) #10
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %73) #10
  br i1 %111, label %112, label %178

112:                                              ; preds = %3
  %113 = call dereferenceable(16) %struct.SkIRect* @_ZNK12SkRasterClip9getBoundsEv(%class.SkRasterClip* %1) #10
  %114 = bitcast %struct.SkIRect* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %114) #10
  call void @llvm.memset.p0i8.i64(i8* nonnull align 4 %114, i8 -86, i64 16, i1 false) #10
  %115 = call zeroext i1 @_ZN7SkIRect9intersectERKS_S1_(%struct.SkIRect* nonnull %4, %struct.SkIRect* dereferenceable(16) %113, %struct.SkIRect* nonnull dereferenceable(16) %8) #10
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %114) #10
  br i1 %115, label %116, label %178

116:                                              ; preds = %112
  %117 = call zeroext i1 @_ZNK12SkRasterClip13quickContainsERK7SkIRect(%class.SkRasterClip* %1, %struct.SkIRect* nonnull dereferenceable(16) %8) #10
  br i1 %117, label %133, label %118

118:                                              ; preds = %116
  %119 = getelementptr inbounds %class.SkRasterClip, %class.SkRasterClip* %1, i64 0, i32 2
  %120 = load i8, i8* %119, align 8, !range !2
  %121 = icmp eq i8 %120, 0
  br i1 %121, label %124, label %122

122:                                              ; preds = %118
  %123 = getelementptr inbounds %class.SkRasterClip, %class.SkRasterClip* %1, i64 0, i32 0
  br label %129

124:                                              ; preds = %118
  call void @_ZN22SkAAClipBlitterWrapper4initERK12SkRasterClipP9SkBlitter(%class.SkAAClipBlitterWrapper* nonnull %5, %class.SkRasterClip* dereferenceable(72) %1, %class.SkBlitter* %2) #10
  %125 = getelementptr inbounds %class.SkAAClipBlitterWrapper, %class.SkAAClipBlitterWrapper* %5, i64 0, i32 2
  %126 = load %class.SkRegion*, %class.SkRegion** %125, align 8
  %127 = getelementptr inbounds %class.SkAAClipBlitterWrapper, %class.SkAAClipBlitterWrapper* %5, i64 0, i32 3
  %128 = load %class.SkBlitter*, %class.SkBlitter** %127, align 8
  br label %129

129:                                              ; preds = %124, %122
  %130 = phi %class.SkBlitter* [ %2, %122 ], [ %128, %124 ]
  %131 = phi %class.SkRegion* [ %123, %122 ], [ %126, %124 ]
  %132 = call %class.SkBlitter* @_ZN16SkBlitterClipper5applyEP9SkBlitterPK8SkRegionPK7SkIRect(%class.SkBlitterClipper* nonnull %6, %class.SkBlitter* %130, %class.SkRegion* %131, %struct.SkIRect* null) #10
  br label %133

133:                                              ; preds = %129, %116
  %134 = phi %class.SkBlitter* [ %2, %116 ], [ %132, %129 ]
  %135 = load i32, i32* %28, align 8
  %136 = load i32, i32* %25, align 8
  %137 = sub i32 %135, %136
  %138 = load i32, i32* %29, align 4
  %139 = load i32, i32* %26, align 4
  %140 = sub i32 %138, %139
  %141 = or i32 %140, %137
  %142 = icmp eq i32 %141, 0
  br i1 %142, label %178, label %143

143:                                              ; preds = %133
  %144 = icmp slt i32 %137, 3
  %145 = icmp slt i32 %140, 3
  %146 = or i1 %144, %145
  br i1 %146, label %147, label %152

147:                                              ; preds = %143
  %148 = bitcast %class.SkBlitter* %134 to void (%class.SkBlitter*, i32, i32, i32, i32)***
  %149 = load void (%class.SkBlitter*, i32, i32, i32, i32)**, void (%class.SkBlitter*, i32, i32, i32, i32)*** %148, align 8
  %150 = getelementptr inbounds void (%class.SkBlitter*, i32, i32, i32, i32)*, void (%class.SkBlitter*, i32, i32, i32, i32)** %149, i64 5
  %151 = load void (%class.SkBlitter*, i32, i32, i32, i32)*, void (%class.SkBlitter*, i32, i32, i32, i32)** %150, align 8
  call void %151(%class.SkBlitter* %134, i32 %136, i32 %139, i32 %137, i32 %140) #10
  br label %178

152:                                              ; preds = %143
  %153 = bitcast %class.SkBlitter* %134 to void (%class.SkBlitter*, i32, i32, i32)***
  %154 = load void (%class.SkBlitter*, i32, i32, i32)**, void (%class.SkBlitter*, i32, i32, i32)*** %153, align 8
  %155 = getelementptr inbounds void (%class.SkBlitter*, i32, i32, i32)*, void (%class.SkBlitter*, i32, i32, i32)** %154, i64 2
  %156 = load void (%class.SkBlitter*, i32, i32, i32)*, void (%class.SkBlitter*, i32, i32, i32)** %155, align 8
  call void %156(%class.SkBlitter* %134, i32 %136, i32 %139, i32 %137) #10
  %157 = load i32, i32* %25, align 8
  %158 = load i32, i32* %26, align 4
  %159 = add nsw i32 %158, 1
  %160 = add nsw i32 %140, -2
  %161 = bitcast %class.SkBlitter* %134 to void (%class.SkBlitter*, i32, i32, i32, i32)***
  %162 = load void (%class.SkBlitter*, i32, i32, i32, i32)**, void (%class.SkBlitter*, i32, i32, i32, i32)*** %161, align 8
  %163 = getelementptr inbounds void (%class.SkBlitter*, i32, i32, i32, i32)*, void (%class.SkBlitter*, i32, i32, i32, i32)** %162, i64 5
  %164 = load void (%class.SkBlitter*, i32, i32, i32, i32)*, void (%class.SkBlitter*, i32, i32, i32, i32)** %163, align 8
  call void %164(%class.SkBlitter* %134, i32 %157, i32 %159, i32 1, i32 %160) #10
  %165 = load i32, i32* %28, align 8
  %166 = add nsw i32 %165, -1
  %167 = load i32, i32* %26, align 4
  %168 = add nsw i32 %167, 1
  %169 = load void (%class.SkBlitter*, i32, i32, i32, i32)**, void (%class.SkBlitter*, i32, i32, i32, i32)*** %161, align 8
  %170 = getelementptr inbounds void (%class.SkBlitter*, i32, i32, i32, i32)*, void (%class.SkBlitter*, i32, i32, i32, i32)** %169, i64 5
  %171 = load void (%class.SkBlitter*, i32, i32, i32, i32)*, void (%class.SkBlitter*, i32, i32, i32, i32)** %170, align 8
  call void %171(%class.SkBlitter* %134, i32 %166, i32 %168, i32 1, i32 %160) #10
  %172 = load i32, i32* %25, align 8
  %173 = load i32, i32* %29, align 4
  %174 = add nsw i32 %173, -1
  %175 = load void (%class.SkBlitter*, i32, i32, i32)**, void (%class.SkBlitter*, i32, i32, i32)*** %153, align 8
  %176 = getelementptr inbounds void (%class.SkBlitter*, i32, i32, i32)*, void (%class.SkBlitter*, i32, i32, i32)** %175, i64 2
  %177 = load void (%class.SkBlitter*, i32, i32, i32)*, void (%class.SkBlitter*, i32, i32, i32)** %176, align 8
  call void %177(%class.SkBlitter* %134, i32 %172, i32 %174, i32 %137) #10
  br label %178

178:                                              ; preds = %112, %147, %152, %133, %3
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %24) #10
  %179 = getelementptr inbounds %class.SkBlitterClipper, %class.SkBlitterClipper* %6, i64 0, i32 2, i32 0
  call void @_ZN9SkBlitterD2Ev(%class.SkBlitter* %179) #10
  %180 = getelementptr inbounds %class.SkBlitterClipper, %class.SkBlitterClipper* %6, i64 0, i32 1, i32 0
  call void @_ZN9SkBlitterD2Ev(%class.SkBlitter* %180) #10
  %181 = getelementptr inbounds %class.SkBlitterClipper, %class.SkBlitterClipper* %6, i64 0, i32 0, i32 0
  call void @_ZN9SkBlitterD2Ev(%class.SkBlitter* nonnull %181) #10
  call void @llvm.lifetime.end.p0i8(i64 112, i8* nonnull %12) #10
  %182 = getelementptr inbounds %class.SkAAClipBlitterWrapper, %class.SkAAClipBlitterWrapper* %5, i64 0, i32 1
  call void @_ZN15SkAAClipBlitterD1Ev(%class.SkAAClipBlitter* %182) #10
  %183 = getelementptr inbounds %class.SkAAClipBlitterWrapper, %class.SkAAClipBlitterWrapper* %5, i64 0, i32 0
  call void @_ZN8SkRegionD1Ev(%class.SkRegion* nonnull %183) #10
  call void @llvm.lifetime.end.p0i8(i64 1160, i8* nonnull %11) #10
  ret void
}

declare void @_ZN22SkAAClipBlitterWrapperC1Ev(%class.SkAAClipBlitterWrapper*) unnamed_addr #2

; Function Attrs: nounwind readnone speculatable
declare float @llvm.floor.f32(float) #3

declare dereferenceable(16) %struct.SkIRect* @_ZNK12SkRasterClip9getBoundsEv(%class.SkRasterClip*) local_unnamed_addr #2

declare zeroext i1 @_ZNK12SkRasterClip13quickContainsERK7SkIRect(%class.SkRasterClip*, %struct.SkIRect* dereferenceable(16)) local_unnamed_addr #2

declare void @_ZN22SkAAClipBlitterWrapper4initERK12SkRasterClipP9SkBlitter(%class.SkAAClipBlitterWrapper*, %class.SkRasterClip* dereferenceable(72), %class.SkBlitter*) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN6SkScan8HairPathERK6SkPathRK12SkRasterClipP9SkBlitter(%class.SkPath* dereferenceable(16), %class.SkRasterClip* dereferenceable(72), %class.SkBlitter*) local_unnamed_addr #0 align 2 {
  tail call void @_Z9hair_pathILN7SkPaint3CapE0EEvRK6SkPathRK12SkRasterClipP9SkBlitterPFvPK7SkPointiPK8SkRegionS9_E(%class.SkPath* dereferenceable(16) %0, %class.SkRasterClip* dereferenceable(72) %1, %class.SkBlitter* %2, void (%struct.SkPoint*, i32, %class.SkRegion*, %class.SkBlitter*)* nonnull @_ZN6SkScan11HairLineRgnEPK7SkPointiPK8SkRegionP9SkBlitter)
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_Z9hair_pathILN7SkPaint3CapE0EEvRK6SkPathRK12SkRasterClipP9SkBlitterPFvPK7SkPointiPK8SkRegionS9_E(%class.SkPath* dereferenceable(16), %class.SkRasterClip* dereferenceable(72), %class.SkBlitter*, void (%struct.SkPoint*, i32, %class.SkRegion*, %class.SkBlitter*)*) local_unnamed_addr #4 comdat {
  %5 = alloca %struct.SkConic, align 4
  %6 = alloca [33 x %struct.SkPoint], align 16
  %7 = alloca %struct.SkIRect, align 4
  %8 = alloca %class.SkAAClipBlitterWrapper, align 8
  %9 = alloca <4 x float>, align 16
  %10 = bitcast <4 x float>* %9 to %struct.SkRect*
  %11 = alloca %struct.SkRect, align 8
  %12 = alloca { i64, i64 }, align 8
  %13 = bitcast { i64, i64 }* %12 to %struct.SkIRect*
  %14 = alloca [4 x %struct.SkPoint], align 16
  %15 = alloca %class.SkAutoConicToQuads, align 8
  %16 = getelementptr inbounds %class.SkPath, %class.SkPath* %0, i64 0, i32 0, i32 0
  %17 = load %class.SkPathRef*, %class.SkPathRef** %16, align 8
  %18 = getelementptr inbounds %class.SkPathRef, %class.SkPathRef* %17, i64 0, i32 4, i32 2
  %19 = load i32, i32* %18, align 4
  %20 = icmp eq i32 %19, 0
  br i1 %20, label %673, label %21

21:                                               ; preds = %4
  %22 = bitcast %class.SkAAClipBlitterWrapper* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 1160, i8* nonnull %22) #10
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %22, i8 -86, i64 1160, i1 false)
  call void @_ZN22SkAAClipBlitterWrapperC1Ev(%class.SkAAClipBlitterWrapper* nonnull %8) #10
  %23 = bitcast <4 x float>* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %23) #10
  %24 = bitcast %struct.SkRect* %11 to i8*
  %25 = bitcast <4 x float>* %9 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %25, i8 -1, i64 16, i1 false)
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %24) #10
  %26 = getelementptr inbounds %struct.SkRect, %struct.SkRect* %11, i64 0, i32 2
  %27 = bitcast { i64, i64 }* %12 to i8*
  %28 = bitcast %struct.SkRect* %11 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %28, i8 -1, i64 16, i1 false)
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %27) #10
  %29 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %12, i64 0, i32 1
  %30 = bitcast { i64, i64 }* %12 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %30, i8 -86, i64 16, i1 false)
  %31 = load %class.SkPathRef*, %class.SkPathRef** %16, align 8
  %32 = getelementptr inbounds %class.SkPathRef, %class.SkPathRef* %31, i64 0, i32 9
  %33 = load i8, i8* %32, align 8
  %34 = icmp eq i8 %33, 0
  br i1 %34, label %44, label %35

35:                                               ; preds = %21
  %36 = getelementptr inbounds %class.SkPathRef, %class.SkPathRef* %31, i64 0, i32 1
  %37 = getelementptr inbounds %class.SkPathRef, %class.SkPathRef* %31, i64 0, i32 3, i32 0
  %38 = load %struct.SkPoint*, %struct.SkPoint** %37, align 8
  %39 = getelementptr inbounds %class.SkPathRef, %class.SkPathRef* %31, i64 0, i32 3, i32 2
  %40 = load i32, i32* %39, align 4
  %41 = call zeroext i1 @_ZN6SkRect14setBoundsCheckEPK7SkPointi(%struct.SkRect* %36, %struct.SkPoint* %38, i32 %40) #10
  %42 = getelementptr inbounds %class.SkPathRef, %class.SkPathRef* %31, i64 0, i32 10
  %43 = zext i1 %41 to i8
  store i8 %43, i8* %42, align 1
  store i8 0, i8* %32, align 8
  br label %44

44:                                               ; preds = %21, %35
  %45 = getelementptr inbounds %class.SkPathRef, %class.SkPathRef* %31, i64 0, i32 1, i32 0
  %46 = load float, float* %45, align 4
  %47 = call float @llvm.floor.f32(float %46) #10
  %48 = fcmp olt float %47, 0x41DFFFFFE0000000
  %49 = select i1 %48, float %47, float 0x41DFFFFFE0000000
  %50 = fcmp ogt float %49, 0xC1DFFFFFE0000000
  %51 = select i1 %50, float %49, float 0xC1DFFFFFE0000000
  %52 = fptosi float %51 to i32
  %53 = getelementptr inbounds %class.SkPathRef, %class.SkPathRef* %31, i64 0, i32 1, i32 1
  %54 = load float, float* %53, align 4
  %55 = call float @llvm.floor.f32(float %54) #10
  %56 = fcmp olt float %55, 0x41DFFFFFE0000000
  %57 = select i1 %56, float %55, float 0x41DFFFFFE0000000
  %58 = fcmp ogt float %57, 0xC1DFFFFFE0000000
  %59 = select i1 %58, float %57, float 0xC1DFFFFFE0000000
  %60 = fptosi float %59 to i32
  %61 = getelementptr inbounds %class.SkPathRef, %class.SkPathRef* %31, i64 0, i32 1, i32 2
  %62 = load float, float* %61, align 4
  %63 = call float @llvm.ceil.f32(float %62) #10
  %64 = fcmp olt float %63, 0x41DFFFFFE0000000
  %65 = select i1 %64, float %63, float 0x41DFFFFFE0000000
  %66 = fcmp ogt float %65, 0xC1DFFFFFE0000000
  %67 = select i1 %66, float %65, float 0xC1DFFFFFE0000000
  %68 = fptosi float %67 to i32
  %69 = getelementptr inbounds %class.SkPathRef, %class.SkPathRef* %31, i64 0, i32 1, i32 3
  %70 = load float, float* %69, align 4
  %71 = call float @llvm.ceil.f32(float %70) #10
  %72 = fcmp olt float %71, 0x41DFFFFFE0000000
  %73 = select i1 %72, float %71, float 0x41DFFFFFE0000000
  %74 = fcmp ogt float %73, 0xC1DFFFFFE0000000
  %75 = select i1 %74, float %73, float 0xC1DFFFFFE0000000
  %76 = fptosi float %75 to i32
  %77 = sext i32 %52 to i64
  %78 = icmp sgt i64 %77, -2147483646
  %79 = select i1 %78, i64 %77, i64 -2147483646
  %80 = add nsw i64 %79, 4294967295
  %81 = sext i32 %60 to i64
  %82 = icmp sgt i64 %81, -2147483646
  %83 = select i1 %82, i64 %81, i64 -2147483646
  %84 = sext i32 %68 to i64
  %85 = icmp slt i64 %84, 2147483646
  %86 = select i1 %85, i64 %84, i64 2147483646
  %87 = icmp sgt i64 %86, -2147483648
  %88 = select i1 %87, i64 %86, i64 -2147483648
  %89 = add nsw i64 %88, 1
  %90 = sext i32 %76 to i64
  %91 = icmp slt i64 %90, 2147483646
  %92 = select i1 %91, i64 %90, i64 2147483646
  %93 = icmp sgt i64 %92, -2147483648
  %94 = select i1 %93, i64 %92, i64 -2147483648
  %95 = shl nsw i64 %83, 32
  %96 = add i64 %95, -4294967296
  %97 = and i64 %80, 4294967295
  %98 = or i64 %96, %97
  %99 = shl nsw i64 %94, 32
  %100 = add i64 %99, 4294967296
  %101 = and i64 %89, 4294967295
  %102 = or i64 %100, %101
  %103 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %12, i64 0, i32 0
  store i64 %98, i64* %103, align 8
  store i64 %102, i64* %29, align 8
  %104 = call dereferenceable(16) %struct.SkIRect* @_ZNK12SkRasterClip9getBoundsEv(%class.SkRasterClip* %1) #10
  %105 = bitcast %struct.SkIRect* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %105) #10
  call void @llvm.memset.p0i8.i64(i8* nonnull align 4 %105, i8 -86, i64 16, i1 false) #10
  %106 = call zeroext i1 @_ZN7SkIRect9intersectERKS_S1_(%struct.SkIRect* nonnull %7, %struct.SkIRect* dereferenceable(16) %104, %struct.SkIRect* nonnull dereferenceable(16) %13) #10
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %105) #10
  br i1 %106, label %107, label %146

107:                                              ; preds = %44
  %108 = call zeroext i1 @_ZNK12SkRasterClip13quickContainsERK7SkIRect(%class.SkRasterClip* %1, %struct.SkIRect* nonnull dereferenceable(16) %13) #10
  br i1 %108, label %147, label %109

109:                                              ; preds = %107
  %110 = getelementptr inbounds %class.SkRasterClip, %class.SkRasterClip* %1, i64 0, i32 2
  %111 = load i8, i8* %110, align 8, !range !2
  %112 = icmp eq i8 %111, 0
  br i1 %112, label %115, label %113

113:                                              ; preds = %109
  %114 = getelementptr inbounds %class.SkRasterClip, %class.SkRasterClip* %1, i64 0, i32 0
  br label %120

115:                                              ; preds = %109
  call void @_ZN22SkAAClipBlitterWrapper4initERK12SkRasterClipP9SkBlitter(%class.SkAAClipBlitterWrapper* nonnull %8, %class.SkRasterClip* dereferenceable(72) %1, %class.SkBlitter* %2) #10
  %116 = getelementptr inbounds %class.SkAAClipBlitterWrapper, %class.SkAAClipBlitterWrapper* %8, i64 0, i32 3
  %117 = load %class.SkBlitter*, %class.SkBlitter** %116, align 8
  %118 = getelementptr inbounds %class.SkAAClipBlitterWrapper, %class.SkAAClipBlitterWrapper* %8, i64 0, i32 2
  %119 = load %class.SkRegion*, %class.SkRegion** %118, align 8
  br label %120

120:                                              ; preds = %115, %113
  %121 = phi %class.SkRegion* [ %114, %113 ], [ %119, %115 ]
  %122 = phi %class.SkBlitter* [ %2, %113 ], [ %117, %115 ]
  %123 = bitcast %class.SkRegion* %121 to <4 x i32>*
  %124 = load <4 x i32>, <4 x i32>* %123, align 4
  %125 = sitofp <4 x i32> %124 to <4 x float>
  %126 = shufflevector <4 x float> %125, <4 x float> undef, <2 x i32> <i32 0, i32 1>
  %127 = fadd <2 x float> %126, <float -1.000000e+00, float -1.000000e+00>
  %128 = shufflevector <4 x float> %125, <4 x float> undef, <2 x i32> <i32 2, i32 3>
  %129 = fadd <2 x float> %128, <float 1.000000e+00, float 1.000000e+00>
  %130 = bitcast %struct.SkRect* %11 to <2 x float>*
  store <2 x float> %127, <2 x float>* %130, align 8
  %131 = bitcast float* %26 to <2 x float>*
  store <2 x float> %129, <2 x float>* %131, align 8
  %132 = fadd <4 x float> %125, <float 1.000000e+00, float 1.000000e+00, float -1.000000e+00, float -1.000000e+00>
  store <4 x float> %132, <4 x float>* %9, align 16
  %133 = extractelement <4 x float> %132, i32 0
  %134 = extractelement <4 x float> %132, i32 2
  %135 = fcmp ogt float %133, %134
  %136 = extractelement <4 x float> %132, i32 1
  %137 = extractelement <4 x float> %132, i32 3
  %138 = fcmp ogt float %136, %137
  %139 = or i1 %135, %138
  br i1 %139, label %140, label %141

140:                                              ; preds = %120
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %23, i8 0, i64 16, i1 false) #10
  br label %141

141:                                              ; preds = %120, %140
  %142 = getelementptr inbounds %class.SkRasterClip, %class.SkRasterClip* %1, i64 0, i32 4
  %143 = load i8, i8* %142, align 2, !range !2
  %144 = icmp eq i8 %143, 0
  %145 = select i1 %144, %struct.SkRect* null, %struct.SkRect* %10
  br label %147

146:                                              ; preds = %44
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %27) #10
  br label %670

147:                                              ; preds = %141, %107
  %148 = phi %struct.SkRect* [ %11, %141 ], [ null, %107 ]
  %149 = phi %struct.SkRect* [ %145, %141 ], [ null, %107 ]
  %150 = phi %class.SkRegion* [ %121, %141 ], [ null, %107 ]
  %151 = phi %class.SkBlitter* [ %122, %141 ], [ %2, %107 ]
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %27) #10
  %152 = load %class.SkPathRef*, %class.SkPathRef** %16, align 8
  %153 = getelementptr inbounds %class.SkPathRef, %class.SkPathRef* %152, i64 0, i32 4, i32 0
  %154 = load i8*, i8** %153, align 8
  %155 = getelementptr inbounds %class.SkPathRef, %class.SkPathRef* %152, i64 0, i32 9
  %156 = load i8, i8* %155, align 8
  %157 = icmp eq i8 %156, 0
  br i1 %157, label %158, label %165

158:                                              ; preds = %147
  %159 = getelementptr inbounds %class.SkPathRef, %class.SkPathRef* %152, i64 0, i32 3, i32 0
  %160 = bitcast %struct.SkPoint** %159 to i64*
  %161 = load i64, i64* %160, align 8
  %162 = getelementptr inbounds %class.SkPathRef, %class.SkPathRef* %152, i64 0, i32 5, i32 0
  %163 = bitcast float** %162 to i64*
  %164 = load i64, i64* %163, align 8
  br label %184

165:                                              ; preds = %147
  %166 = getelementptr inbounds %class.SkPathRef, %class.SkPathRef* %152, i64 0, i32 1
  %167 = getelementptr inbounds %class.SkPathRef, %class.SkPathRef* %152, i64 0, i32 3, i32 0
  %168 = load %struct.SkPoint*, %struct.SkPoint** %167, align 8
  %169 = getelementptr inbounds %class.SkPathRef, %class.SkPathRef* %152, i64 0, i32 3, i32 2
  %170 = load i32, i32* %169, align 4
  %171 = call zeroext i1 @_ZN6SkRect14setBoundsCheckEPK7SkPointi(%struct.SkRect* %166, %struct.SkPoint* %168, i32 %170) #10
  %172 = getelementptr inbounds %class.SkPathRef, %class.SkPathRef* %152, i64 0, i32 10
  %173 = zext i1 %171 to i8
  store i8 %173, i8* %172, align 1
  store i8 0, i8* %155, align 8
  %174 = load %class.SkPathRef*, %class.SkPathRef** %16, align 8
  %175 = getelementptr inbounds %class.SkPathRef, %class.SkPathRef* %174, i64 0, i32 9
  %176 = load i8, i8* %175, align 8
  %177 = icmp eq i8 %176, 0
  %178 = getelementptr inbounds %class.SkPathRef, %class.SkPathRef* %174, i64 0, i32 3, i32 0
  %179 = bitcast %struct.SkPoint** %178 to i64*
  %180 = load i64, i64* %179, align 8
  %181 = getelementptr inbounds %class.SkPathRef, %class.SkPathRef* %174, i64 0, i32 5, i32 0
  %182 = bitcast float** %181 to i64*
  %183 = load i64, i64* %182, align 8
  br i1 %177, label %184, label %190

184:                                              ; preds = %158, %165
  %185 = phi i64 [ %164, %158 ], [ %183, %165 ]
  %186 = phi i64 [ %161, %158 ], [ %180, %165 ]
  %187 = phi %class.SkPathRef* [ %152, %158 ], [ %174, %165 ]
  %188 = getelementptr inbounds %class.SkPathRef, %class.SkPathRef* %187, i64 0, i32 10
  %189 = load i8, i8* %188, align 1, !range !2
  br label %200

190:                                              ; preds = %165
  %191 = inttoptr i64 %180 to %struct.SkPoint*
  %192 = getelementptr inbounds %class.SkPathRef, %class.SkPathRef* %174, i64 0, i32 9
  %193 = getelementptr inbounds %class.SkPathRef, %class.SkPathRef* %174, i64 0, i32 1
  %194 = getelementptr inbounds %class.SkPathRef, %class.SkPathRef* %174, i64 0, i32 3, i32 2
  %195 = load i32, i32* %194, align 4
  %196 = call zeroext i1 @_ZN6SkRect14setBoundsCheckEPK7SkPointi(%struct.SkRect* %193, %struct.SkPoint* %191, i32 %195) #10
  %197 = getelementptr inbounds %class.SkPathRef, %class.SkPathRef* %174, i64 0, i32 10
  %198 = zext i1 %196 to i8
  store i8 %198, i8* %197, align 1
  store i8 0, i8* %192, align 8
  %199 = load %class.SkPathRef*, %class.SkPathRef** %16, align 8
  br label %200

200:                                              ; preds = %190, %184
  %201 = phi i64 [ %185, %184 ], [ %183, %190 ]
  %202 = phi i64 [ %186, %184 ], [ %180, %190 ]
  %203 = phi %class.SkPathRef* [ %187, %184 ], [ %199, %190 ]
  %204 = phi i8 [ %189, %184 ], [ %198, %190 ]
  %205 = getelementptr inbounds %class.SkPathRef, %class.SkPathRef* %203, i64 0, i32 4, i32 0
  %206 = load i8*, i8** %205, align 8
  %207 = icmp eq i8 %204, 0
  br i1 %207, label %215, label %208

208:                                              ; preds = %200
  %209 = icmp eq i8* %206, null
  br i1 %209, label %215, label %210

210:                                              ; preds = %208
  %211 = getelementptr inbounds %class.SkPathRef, %class.SkPathRef* %203, i64 0, i32 4, i32 2
  %212 = load i32, i32* %211, align 4
  %213 = sext i32 %212 to i64
  %214 = getelementptr inbounds i8, i8* %206, i64 %213
  br label %215

215:                                              ; preds = %200, %208, %210
  %216 = phi i8* [ %214, %210 ], [ null, %208 ], [ %206, %200 ]
  %217 = bitcast [4 x %struct.SkPoint]* %14 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %217) #10
  %218 = getelementptr inbounds [4 x %struct.SkPoint], [4 x %struct.SkPoint]* %14, i64 0, i64 0
  %219 = getelementptr inbounds [4 x %struct.SkPoint], [4 x %struct.SkPoint]* %14, i64 0, i64 0, i32 0
  %220 = getelementptr inbounds [4 x %struct.SkPoint], [4 x %struct.SkPoint]* %14, i64 0, i64 0, i32 1
  %221 = getelementptr inbounds [4 x %struct.SkPoint], [4 x %struct.SkPoint]* %14, i64 0, i64 1, i32 0
  %222 = getelementptr inbounds [4 x %struct.SkPoint], [4 x %struct.SkPoint]* %14, i64 0, i64 1, i32 1
  %223 = getelementptr inbounds [4 x %struct.SkPoint], [4 x %struct.SkPoint]* %14, i64 0, i64 2, i32 0
  %224 = getelementptr inbounds [4 x %struct.SkPoint], [4 x %struct.SkPoint]* %14, i64 0, i64 2, i32 1
  %225 = getelementptr inbounds [4 x %struct.SkPoint], [4 x %struct.SkPoint]* %14, i64 0, i64 3, i32 0
  %226 = bitcast %class.SkAutoConicToQuads* %15 to i8*
  %227 = bitcast [4 x %struct.SkPoint]* %14 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %227, i8 -1, i64 32, i1 false)
  call void @llvm.lifetime.start.p0i8(i64 152, i8* nonnull %226) #10
  %228 = getelementptr inbounds %class.SkAutoConicToQuads, %class.SkAutoConicToQuads* %15, i64 0, i32 0, i32 1
  %229 = bitcast %union.anon* %228 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %229, i8 -86, i64 144, i1 false)
  %230 = getelementptr inbounds %class.SkAutoConicToQuads, %class.SkAutoConicToQuads* %15, i64 0, i32 0, i32 1
  %231 = bitcast %class.SkAutoConicToQuads* %15 to %union.anon**
  store %union.anon* %230, %union.anon** %231, align 8
  %232 = getelementptr inbounds %class.SkAutoConicToQuads, %class.SkAutoConicToQuads* %15, i64 0, i32 1
  store i32 0, i32* %232, align 8
  %233 = icmp eq i8* %216, %154
  %234 = bitcast %union.anon* %230 to %struct.SkPoint*
  br i1 %233, label %669, label %235

235:                                              ; preds = %215
  %236 = bitcast %struct.SkConic* %5 to i8*
  %237 = getelementptr inbounds %struct.SkConic, %struct.SkConic* %5, i64 0, i32 1
  %238 = bitcast float* %237 to i32*
  %239 = getelementptr inbounds %class.SkAutoConicToQuads, %class.SkAutoConicToQuads* %15, i64 0, i32 0, i32 0
  %240 = bitcast %class.SkAutoConicToQuads* %15 to i8**
  %241 = icmp eq %struct.SkRect* %149, null
  %242 = getelementptr inbounds %struct.SkRect, %struct.SkRect* %148, i64 0, i32 0
  %243 = getelementptr inbounds %struct.SkRect, %struct.SkRect* %148, i64 0, i32 2
  %244 = getelementptr inbounds %struct.SkRect, %struct.SkRect* %148, i64 0, i32 1
  %245 = getelementptr inbounds %struct.SkRect, %struct.SkRect* %148, i64 0, i32 3
  %246 = getelementptr inbounds %struct.SkRect, %struct.SkRect* %149, i64 0, i32 2
  %247 = getelementptr inbounds %struct.SkRect, %struct.SkRect* %149, i64 0, i32 0
  %248 = getelementptr inbounds %struct.SkRect, %struct.SkRect* %149, i64 0, i32 3
  %249 = getelementptr inbounds %struct.SkRect, %struct.SkRect* %149, i64 0, i32 1
  %250 = bitcast [33 x %struct.SkPoint]* %6 to i8*
  %251 = getelementptr inbounds [33 x %struct.SkPoint], [33 x %struct.SkPoint]* %6, i64 0, i64 0
  %252 = bitcast [33 x %struct.SkPoint]* %6 to i64*
  %253 = bitcast [4 x %struct.SkPoint]* %14 to i64*
  %254 = getelementptr inbounds [4 x %struct.SkPoint], [4 x %struct.SkPoint]* %14, i64 0, i64 1
  %255 = bitcast %struct.SkPoint* %254 to i64*
  %256 = getelementptr inbounds [4 x %struct.SkPoint], [4 x %struct.SkPoint]* %14, i64 0, i64 2
  %257 = bitcast %struct.SkPoint* %256 to i64*
  %258 = bitcast float* %225 to <2 x float>*
  %259 = bitcast float* %223 to <2 x float>*
  %260 = bitcast float* %223 to <2 x float>*
  %261 = bitcast float* %221 to <2 x float>*
  %262 = bitcast [4 x %struct.SkPoint]* %14 to i64*
  br label %263

263:                                              ; preds = %235, %657
  %264 = phi i8* [ %154, %235 ], [ %271, %657 ]
  %265 = phi float [ 0xFFFFFFFFE0000000, %235 ], [ %661, %657 ]
  %266 = phi float [ 0xFFFFFFFFE0000000, %235 ], [ %660, %657 ]
  %267 = phi i64 [ %201, %235 ], [ %659, %657 ]
  %268 = phi i64 [ %202, %235 ], [ %658, %657 ]
  %269 = phi <2 x float> [ <float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000>, %235 ], [ %662, %657 ]
  %270 = inttoptr i64 %268 to %struct.SkPoint*
  %271 = getelementptr inbounds i8, i8* %264, i64 1
  %272 = load i8, i8* %264, align 1, !noalias !3
  switch i8 %272, label %273 [
    i8 0, label %274
    i8 1, label %274
    i8 2, label %288
    i8 3, label %451
    i8 4, label %648
    i8 5, label %654
  ]

273:                                              ; preds = %263
  call void @llvm.trap() #10, !noalias !3
  unreachable

274:                                              ; preds = %263, %263
  %275 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %270, i64 1
  %276 = ptrtoint %struct.SkPoint* %275 to i64
  switch i8 %272, label %277 [
    i8 0, label %278
    i8 1, label %284
  ]

277:                                              ; preds = %274
  call void @llvm.trap() #10, !noalias !6
  unreachable

278:                                              ; preds = %274
  %279 = inttoptr i64 %268 to i64*
  %280 = load i64, i64* %279, align 4
  store i64 %280, i64* %262, align 16
  %281 = bitcast i64 %280 to <2 x float>
  %282 = extractelement <2 x float> %281, i32 0
  %283 = extractelement <2 x float> %281, i32 1
  br label %657

284:                                              ; preds = %274
  %285 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %270, i64 -1
  %286 = bitcast %struct.SkPoint* %285 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 16 %217, i8* align 4 %286, i64 16, i1 false)
  call void %3(%struct.SkPoint* nonnull %218, i32 2, %class.SkRegion* %150, %class.SkBlitter* %151) #10
  %287 = load <2 x float>, <2 x float>* %261, align 8
  br label %657

288:                                              ; preds = %263
  %289 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %270, i64 2
  %290 = ptrtoint %struct.SkPoint* %289 to i64
  %291 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %270, i64 -1
  %292 = bitcast %struct.SkPoint* %291 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 16 %217, i8* align 4 %292, i64 24, i1 false)
  %293 = load float, float* %219, align 16
  %294 = load float, float* %223, align 16
  %295 = fadd float %293, %294
  %296 = fmul float %295, 5.000000e-01
  %297 = load float, float* %221, align 8
  %298 = fsub float %296, %297
  %299 = load float, float* %220, align 4
  %300 = load float, float* %224, align 4
  %301 = fadd float %299, %300
  %302 = fmul float %301, 5.000000e-01
  %303 = load float, float* %222, align 4
  %304 = fsub float %302, %303
  %305 = call float @llvm.fabs.f32(float %298) #10
  %306 = call float @llvm.fabs.f32(float %304) #10
  %307 = call float @llvm.ceil.f32(float %305) #10
  %308 = fcmp olt float %307, 0x41DFFFFFE0000000
  %309 = select i1 %308, float %307, float 0x41DFFFFFE0000000
  %310 = fcmp ogt float %309, 0xC1DFFFFFE0000000
  %311 = select i1 %310, float %309, float 0xC1DFFFFFE0000000
  %312 = fptosi float %311 to i32
  %313 = call float @llvm.ceil.f32(float %306) #10
  %314 = fcmp olt float %313, 0x41DFFFFFE0000000
  %315 = select i1 %314, float %313, float 0x41DFFFFFE0000000
  %316 = fcmp ogt float %315, 0xC1DFFFFFE0000000
  %317 = select i1 %316, float %315, float 0xC1DFFFFFE0000000
  %318 = fptosi float %317 to i32
  %319 = icmp ugt i32 %312, %318
  %320 = lshr i32 %318, 1
  %321 = add i32 %320, %312
  %322 = lshr i32 %312, 1
  %323 = add i32 %322, %318
  %324 = select i1 %319, i32 %321, i32 %323
  %325 = call i32 @llvm.ctlz.i32(i32 %324, i1 false) #10, !range !9
  %326 = sub nuw nsw i32 33, %325
  %327 = ashr i32 %326, 1
  %328 = icmp slt i32 %327, 5
  %329 = select i1 %328, i32 %327, i32 5
  %330 = load i64, i64* %253, align 16
  br i1 %241, label %331, label %338

331:                                              ; preds = %288
  %332 = load i64, i64* %255, align 8
  %333 = load i64, i64* %257, align 16
  %334 = insertelement <2 x i64> <i64 undef, i64 0>, i64 %330, i32 0
  %335 = insertelement <2 x i64> <i64 undef, i64 0>, i64 %332, i32 0
  %336 = bitcast <2 x i64> %335 to <4 x float>
  %337 = bitcast <2 x i64> %334 to <4 x float>
  br label %383

338:                                              ; preds = %288
  %339 = insertelement <2 x i64> <i64 undef, i64 0>, i64 %330, i32 0
  %340 = bitcast <2 x i64> %339 to <4 x float>
  %341 = load i64, i64* %255, align 8
  %342 = insertelement <2 x i64> <i64 undef, i64 0>, i64 %341, i32 0
  %343 = bitcast <2 x i64> %342 to <4 x float>
  %344 = call <4 x float> @llvm.x86.sse.min.ps(<4 x float> %340, <4 x float> %343) #10
  %345 = call <4 x float> @llvm.x86.sse.max.ps(<4 x float> %340, <4 x float> %343) #10
  %346 = load i64, i64* %257, align 16
  %347 = insertelement <2 x i64> <i64 undef, i64 0>, i64 %346, i32 0
  %348 = bitcast <2 x i64> %347 to <4 x float>
  %349 = call <4 x float> @llvm.x86.sse.min.ps(<4 x float> %344, <4 x float> %348) #10
  %350 = call <4 x float> @llvm.x86.sse.max.ps(<4 x float> %345, <4 x float> %348) #10
  %351 = load float, float* %242, align 8
  %352 = extractelement <4 x float> %350, i32 0
  %353 = fcmp olt float %351, %352
  %354 = trunc i64 %346 to i32
  %355 = bitcast i32 %354 to float
  %356 = insertelement <2 x float> undef, float %355, i32 0
  %357 = insertelement <2 x float> %356, float %300, i32 1
  br i1 %353, label %358, label %657

358:                                              ; preds = %338
  %359 = extractelement <4 x float> %349, i32 0
  %360 = load float, float* %243, align 8
  %361 = fcmp olt float %359, %360
  br i1 %361, label %362, label %657

362:                                              ; preds = %358
  %363 = load float, float* %244, align 4
  %364 = extractelement <4 x float> %350, i32 1
  %365 = fcmp olt float %363, %364
  br i1 %365, label %366, label %657

366:                                              ; preds = %362
  %367 = extractelement <4 x float> %349, i32 1
  %368 = load float, float* %245, align 4
  %369 = fcmp olt float %367, %368
  br i1 %369, label %370, label %657

370:                                              ; preds = %366
  %371 = load float, float* %246, align 4
  %372 = fcmp ugt float %352, %371
  br i1 %372, label %383, label %373

373:                                              ; preds = %370
  %374 = load float, float* %247, align 4
  %375 = fcmp ult float %359, %374
  br i1 %375, label %383, label %376

376:                                              ; preds = %373
  %377 = load float, float* %248, align 4
  %378 = fcmp ugt float %364, %377
  br i1 %378, label %383, label %379

379:                                              ; preds = %376
  %380 = load float, float* %249, align 4
  %381 = fcmp ult float %367, %380
  br i1 %381, label %383, label %382

382:                                              ; preds = %379
  br label %383

383:                                              ; preds = %382, %379, %376, %373, %370, %331
  %384 = phi <4 x float> [ %337, %331 ], [ %340, %379 ], [ %340, %370 ], [ %340, %373 ], [ %340, %376 ], [ %340, %382 ]
  %385 = phi <4 x float> [ %336, %331 ], [ %343, %379 ], [ %343, %370 ], [ %343, %373 ], [ %343, %376 ], [ %343, %382 ]
  %386 = phi i64 [ %333, %331 ], [ %346, %379 ], [ %346, %370 ], [ %346, %373 ], [ %346, %376 ], [ %346, %382 ]
  %387 = phi %class.SkRegion* [ %150, %331 ], [ %150, %379 ], [ %150, %370 ], [ %150, %373 ], [ %150, %376 ], [ null, %382 ]
  %388 = insertelement <2 x i64> undef, i64 %386, i32 0
  %389 = bitcast <2 x i64> %388 to <4 x float>
  %390 = fsub <4 x float> %385, %384
  %391 = fadd <4 x float> %390, %390
  %392 = fadd <4 x float> %385, %385
  %393 = fsub <4 x float> %389, %392
  %394 = fadd <4 x float> %384, %393
  %395 = shl i32 1, %329
  %396 = sitofp i32 %395 to float
  %397 = fdiv float 1.000000e+00, %396
  %398 = insertelement <4 x float> undef, float %397, i32 0
  %399 = shufflevector <4 x float> %398, <4 x float> undef, <4 x i32> zeroinitializer
  call void @llvm.lifetime.start.p0i8(i64 264, i8* nonnull %250) #10
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %250, i8 -1, i64 264, i1 false) #10
  store i64 %330, i64* %252, align 16
  %400 = icmp sgt i32 %395, 1
  br i1 %400, label %401, label %445

401:                                              ; preds = %383
  %402 = zext i32 %395 to i64
  %403 = add nsw i64 %402, -1
  %404 = and i64 %403, 1
  %405 = icmp eq i32 %329, 1
  br i1 %405, label %432, label %406

406:                                              ; preds = %401
  %407 = sub nsw i64 %403, %404
  br label %408

408:                                              ; preds = %408, %406
  %409 = phi i64 [ 1, %406 ], [ %429, %408 ]
  %410 = phi <4 x float> [ zeroinitializer, %406 ], [ %421, %408 ]
  %411 = phi i64 [ %407, %406 ], [ %430, %408 ]
  %412 = fadd <4 x float> %399, %410
  %413 = fmul <4 x float> %394, %412
  %414 = fadd <4 x float> %391, %413
  %415 = fmul <4 x float> %412, %414
  %416 = fadd <4 x float> %384, %415
  %417 = getelementptr inbounds [33 x %struct.SkPoint], [33 x %struct.SkPoint]* %6, i64 0, i64 %409
  %418 = shufflevector <4 x float> %416, <4 x float> undef, <2 x i32> <i32 0, i32 1>
  %419 = bitcast %struct.SkPoint* %417 to <2 x float>*
  store <2 x float> %418, <2 x float>* %419, align 8
  %420 = add nuw nsw i64 %409, 1
  %421 = fadd <4 x float> %399, %412
  %422 = fmul <4 x float> %394, %421
  %423 = fadd <4 x float> %391, %422
  %424 = fmul <4 x float> %421, %423
  %425 = fadd <4 x float> %384, %424
  %426 = getelementptr inbounds [33 x %struct.SkPoint], [33 x %struct.SkPoint]* %6, i64 0, i64 %420
  %427 = shufflevector <4 x float> %425, <4 x float> undef, <2 x i32> <i32 0, i32 1>
  %428 = bitcast %struct.SkPoint* %426 to <2 x float>*
  store <2 x float> %427, <2 x float>* %428, align 8
  %429 = add nuw nsw i64 %409, 2
  %430 = add i64 %411, -2
  %431 = icmp eq i64 %430, 0
  br i1 %431, label %432, label %408

432:                                              ; preds = %408, %401
  %433 = phi i64 [ 1, %401 ], [ %429, %408 ]
  %434 = phi <4 x float> [ zeroinitializer, %401 ], [ %421, %408 ]
  %435 = icmp eq i64 %404, 0
  br i1 %435, label %445, label %436

436:                                              ; preds = %432
  %437 = fadd <4 x float> %399, %434
  %438 = fmul <4 x float> %394, %437
  %439 = fadd <4 x float> %391, %438
  %440 = fmul <4 x float> %437, %439
  %441 = fadd <4 x float> %384, %440
  %442 = getelementptr inbounds [33 x %struct.SkPoint], [33 x %struct.SkPoint]* %6, i64 0, i64 %433
  %443 = shufflevector <4 x float> %441, <4 x float> undef, <2 x i32> <i32 0, i32 1>
  %444 = bitcast %struct.SkPoint* %442 to <2 x float>*
  store <2 x float> %443, <2 x float>* %444, align 8
  br label %445

445:                                              ; preds = %436, %432, %383
  %446 = sext i32 %395 to i64
  %447 = getelementptr inbounds [33 x %struct.SkPoint], [33 x %struct.SkPoint]* %6, i64 0, i64 %446
  %448 = bitcast %struct.SkPoint* %447 to i64*
  store i64 %386, i64* %448, align 8
  %449 = add nsw i32 %395, 1
  call void %3(%struct.SkPoint* nonnull %251, i32 %449, %class.SkRegion* %387, %class.SkBlitter* %151) #10
  call void @llvm.lifetime.end.p0i8(i64 264, i8* nonnull %250) #10
  %450 = load <2 x float>, <2 x float>* %260, align 16
  br label %657

451:                                              ; preds = %263
  %452 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %270, i64 2
  %453 = ptrtoint %struct.SkPoint* %452 to i64
  %454 = inttoptr i64 %267 to float*
  %455 = getelementptr inbounds float, float* %454, i64 1
  %456 = ptrtoint float* %455 to i64
  %457 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %270, i64 -1
  %458 = bitcast %struct.SkPoint* %457 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 16 %217, i8* align 4 %458, i64 24, i1 false)
  %459 = inttoptr i64 %267 to i32*
  %460 = load i32, i32* %459, align 4
  call void @llvm.lifetime.start.p0i8(i64 28, i8* nonnull %236) #10
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %236, i8* nonnull align 16 %217, i64 24, i1 false) #10
  store i32 %460, i32* %238, align 4
  %461 = call i32 @_ZNK7SkConic15computeQuadPOW2Ef(%struct.SkConic* nonnull %5, float 2.500000e-01) #10
  %462 = shl i32 1, %461
  store i32 %462, i32* %232, align 8
  %463 = shl nsw i32 %462, 1
  %464 = or i32 %463, 1
  %465 = sext i32 %464 to i64
  %466 = load %struct.SkPoint*, %struct.SkPoint** %239, align 8
  %467 = icmp eq %struct.SkPoint* %466, %234
  br i1 %467, label %470, label %468

468:                                              ; preds = %451
  %469 = bitcast %struct.SkPoint* %466 to i8*
  call void @_Z7sk_freePv(i8* %469) #10
  br label %470

470:                                              ; preds = %468, %451
  %471 = icmp ugt i32 %464, 17
  br i1 %471, label %472, label %475

472:                                              ; preds = %470
  %473 = call i8* @_Z15sk_malloc_throwmm(i64 %465, i64 8) #10
  store i8* %473, i8** %240, align 8
  %474 = bitcast i8* %473 to %struct.SkPoint*
  br label %476

475:                                              ; preds = %470
  store %union.anon* %230, %union.anon** %231, align 8
  br label %476

476:                                              ; preds = %472, %475
  %477 = phi %struct.SkPoint* [ %234, %475 ], [ %474, %472 ]
  %478 = call i32 @_ZNK7SkConic17chopIntoQuadsPOW2EP7SkPointi(%struct.SkConic* nonnull %5, %struct.SkPoint* %477, i32 %461) #10
  store i32 %478, i32* %232, align 8
  call void @llvm.lifetime.end.p0i8(i64 28, i8* nonnull %236) #10
  %479 = icmp sgt i32 %478, 0
  br i1 %479, label %482, label %480

480:                                              ; preds = %643, %476
  %481 = load <2 x float>, <2 x float>* %259, align 16
  br label %657

482:                                              ; preds = %476, %643
  %483 = phi i32 [ %644, %643 ], [ %478, %476 ]
  %484 = phi i32 [ %646, %643 ], [ 0, %476 ]
  %485 = phi %struct.SkPoint* [ %645, %643 ], [ %477, %476 ]
  %486 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %485, i64 2, i32 0
  %487 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %485, i64 1, i32 0
  %488 = bitcast %struct.SkPoint* %485 to <2 x float>*
  %489 = load <2 x float>, <2 x float>* %488, align 4
  %490 = bitcast float* %486 to <2 x float>*
  %491 = load <2 x float>, <2 x float>* %490, align 4
  %492 = fadd <2 x float> %489, %491
  %493 = fmul <2 x float> %492, <float 5.000000e-01, float 5.000000e-01>
  %494 = bitcast float* %487 to <2 x float>*
  %495 = load <2 x float>, <2 x float>* %494, align 4
  %496 = fsub <2 x float> %493, %495
  %497 = call <2 x float> @llvm.fabs.v2f32(<2 x float> %496)
  %498 = call <2 x float> @llvm.ceil.v2f32(<2 x float> %497)
  %499 = fcmp olt <2 x float> %498, <float 0x41DFFFFFE0000000, float 0x41DFFFFFE0000000>
  %500 = select <2 x i1> %499, <2 x float> %498, <2 x float> <float 0x41DFFFFFE0000000, float 0x41DFFFFFE0000000>
  %501 = fcmp ogt <2 x float> %500, <float 0xC1DFFFFFE0000000, float 0xC1DFFFFFE0000000>
  %502 = select <2 x i1> %501, <2 x float> %500, <2 x float> <float 0xC1DFFFFFE0000000, float 0xC1DFFFFFE0000000>
  %503 = fptosi <2 x float> %502 to <2 x i32>
  %504 = extractelement <2 x i32> %503, i32 0
  %505 = extractelement <2 x i32> %503, i32 1
  %506 = icmp ugt i32 %504, %505
  %507 = lshr i32 %505, 1
  %508 = add i32 %507, %504
  %509 = lshr i32 %504, 1
  %510 = add i32 %509, %505
  %511 = select i1 %506, i32 %508, i32 %510
  %512 = call i32 @llvm.ctlz.i32(i32 %511, i1 false) #10, !range !9
  %513 = sub nuw nsw i32 33, %512
  %514 = ashr i32 %513, 1
  %515 = icmp slt i32 %514, 5
  %516 = select i1 %515, i32 %514, i32 5
  %517 = bitcast %struct.SkPoint* %485 to i64*
  %518 = load i64, i64* %517, align 1
  br i1 %241, label %519, label %530

519:                                              ; preds = %482
  %520 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %485, i64 1
  %521 = bitcast %struct.SkPoint* %520 to i64*
  %522 = load i64, i64* %521, align 1
  %523 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %485, i64 2
  %524 = bitcast %struct.SkPoint* %523 to i64*
  %525 = load i64, i64* %524, align 1
  %526 = insertelement <2 x i64> <i64 undef, i64 0>, i64 %518, i32 0
  %527 = insertelement <2 x i64> <i64 undef, i64 0>, i64 %522, i32 0
  %528 = bitcast <2 x i64> %527 to <4 x float>
  %529 = bitcast <2 x i64> %526 to <4 x float>
  br label %575

530:                                              ; preds = %482
  %531 = insertelement <2 x i64> <i64 undef, i64 0>, i64 %518, i32 0
  %532 = bitcast <2 x i64> %531 to <4 x float>
  %533 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %485, i64 1
  %534 = bitcast %struct.SkPoint* %533 to i64*
  %535 = load i64, i64* %534, align 1
  %536 = insertelement <2 x i64> <i64 undef, i64 0>, i64 %535, i32 0
  %537 = bitcast <2 x i64> %536 to <4 x float>
  %538 = call <4 x float> @llvm.x86.sse.min.ps(<4 x float> %532, <4 x float> %537) #10
  %539 = call <4 x float> @llvm.x86.sse.max.ps(<4 x float> %532, <4 x float> %537) #10
  %540 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %485, i64 2
  %541 = bitcast %struct.SkPoint* %540 to i64*
  %542 = load i64, i64* %541, align 1
  %543 = insertelement <2 x i64> <i64 undef, i64 0>, i64 %542, i32 0
  %544 = bitcast <2 x i64> %543 to <4 x float>
  %545 = call <4 x float> @llvm.x86.sse.min.ps(<4 x float> %538, <4 x float> %544) #10
  %546 = call <4 x float> @llvm.x86.sse.max.ps(<4 x float> %539, <4 x float> %544) #10
  %547 = load float, float* %242, align 8
  %548 = extractelement <4 x float> %546, i32 0
  %549 = fcmp olt float %547, %548
  br i1 %549, label %550, label %643

550:                                              ; preds = %530
  %551 = extractelement <4 x float> %545, i32 0
  %552 = load float, float* %243, align 8
  %553 = fcmp olt float %551, %552
  br i1 %553, label %554, label %643

554:                                              ; preds = %550
  %555 = load float, float* %244, align 4
  %556 = extractelement <4 x float> %546, i32 1
  %557 = fcmp olt float %555, %556
  br i1 %557, label %558, label %643

558:                                              ; preds = %554
  %559 = extractelement <4 x float> %545, i32 1
  %560 = load float, float* %245, align 4
  %561 = fcmp olt float %559, %560
  br i1 %561, label %562, label %643

562:                                              ; preds = %558
  %563 = load float, float* %246, align 4
  %564 = fcmp ugt float %548, %563
  br i1 %564, label %575, label %565

565:                                              ; preds = %562
  %566 = load float, float* %247, align 4
  %567 = fcmp ult float %551, %566
  br i1 %567, label %575, label %568

568:                                              ; preds = %565
  %569 = load float, float* %248, align 4
  %570 = fcmp ugt float %556, %569
  br i1 %570, label %575, label %571

571:                                              ; preds = %568
  %572 = load float, float* %249, align 4
  %573 = fcmp ult float %559, %572
  br i1 %573, label %575, label %574

574:                                              ; preds = %571
  br label %575

575:                                              ; preds = %574, %571, %568, %565, %562, %519
  %576 = phi <4 x float> [ %529, %519 ], [ %532, %571 ], [ %532, %562 ], [ %532, %565 ], [ %532, %568 ], [ %532, %574 ]
  %577 = phi <4 x float> [ %528, %519 ], [ %537, %571 ], [ %537, %562 ], [ %537, %565 ], [ %537, %568 ], [ %537, %574 ]
  %578 = phi i64 [ %525, %519 ], [ %542, %571 ], [ %542, %562 ], [ %542, %565 ], [ %542, %568 ], [ %542, %574 ]
  %579 = phi %class.SkRegion* [ %150, %519 ], [ %150, %571 ], [ %150, %562 ], [ %150, %565 ], [ %150, %568 ], [ null, %574 ]
  %580 = insertelement <2 x i64> undef, i64 %578, i32 0
  %581 = bitcast <2 x i64> %580 to <4 x float>
  %582 = fsub <4 x float> %577, %576
  %583 = fadd <4 x float> %582, %582
  %584 = fadd <4 x float> %577, %577
  %585 = fsub <4 x float> %581, %584
  %586 = fadd <4 x float> %576, %585
  %587 = shl i32 1, %516
  %588 = sitofp i32 %587 to float
  %589 = fdiv float 1.000000e+00, %588
  %590 = insertelement <4 x float> undef, float %589, i32 0
  %591 = shufflevector <4 x float> %590, <4 x float> undef, <4 x i32> zeroinitializer
  call void @llvm.lifetime.start.p0i8(i64 264, i8* nonnull %250) #10
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %250, i8 -1, i64 264, i1 false) #10
  store i64 %518, i64* %252, align 16
  %592 = icmp sgt i32 %587, 1
  br i1 %592, label %593, label %637

593:                                              ; preds = %575
  %594 = zext i32 %587 to i64
  %595 = add nsw i64 %594, -1
  %596 = and i64 %595, 1
  %597 = icmp eq i32 %516, 1
  br i1 %597, label %624, label %598

598:                                              ; preds = %593
  %599 = sub nsw i64 %595, %596
  br label %600

600:                                              ; preds = %600, %598
  %601 = phi i64 [ 1, %598 ], [ %621, %600 ]
  %602 = phi <4 x float> [ zeroinitializer, %598 ], [ %613, %600 ]
  %603 = phi i64 [ %599, %598 ], [ %622, %600 ]
  %604 = fadd <4 x float> %591, %602
  %605 = fmul <4 x float> %586, %604
  %606 = fadd <4 x float> %583, %605
  %607 = fmul <4 x float> %604, %606
  %608 = fadd <4 x float> %576, %607
  %609 = getelementptr inbounds [33 x %struct.SkPoint], [33 x %struct.SkPoint]* %6, i64 0, i64 %601
  %610 = shufflevector <4 x float> %608, <4 x float> undef, <2 x i32> <i32 0, i32 1>
  %611 = bitcast %struct.SkPoint* %609 to <2 x float>*
  store <2 x float> %610, <2 x float>* %611, align 8
  %612 = add nuw nsw i64 %601, 1
  %613 = fadd <4 x float> %591, %604
  %614 = fmul <4 x float> %586, %613
  %615 = fadd <4 x float> %583, %614
  %616 = fmul <4 x float> %613, %615
  %617 = fadd <4 x float> %576, %616
  %618 = getelementptr inbounds [33 x %struct.SkPoint], [33 x %struct.SkPoint]* %6, i64 0, i64 %612
  %619 = shufflevector <4 x float> %617, <4 x float> undef, <2 x i32> <i32 0, i32 1>
  %620 = bitcast %struct.SkPoint* %618 to <2 x float>*
  store <2 x float> %619, <2 x float>* %620, align 8
  %621 = add nuw nsw i64 %601, 2
  %622 = add i64 %603, -2
  %623 = icmp eq i64 %622, 0
  br i1 %623, label %624, label %600

624:                                              ; preds = %600, %593
  %625 = phi i64 [ 1, %593 ], [ %621, %600 ]
  %626 = phi <4 x float> [ zeroinitializer, %593 ], [ %613, %600 ]
  %627 = icmp eq i64 %596, 0
  br i1 %627, label %637, label %628

628:                                              ; preds = %624
  %629 = fadd <4 x float> %591, %626
  %630 = fmul <4 x float> %586, %629
  %631 = fadd <4 x float> %583, %630
  %632 = fmul <4 x float> %629, %631
  %633 = fadd <4 x float> %576, %632
  %634 = getelementptr inbounds [33 x %struct.SkPoint], [33 x %struct.SkPoint]* %6, i64 0, i64 %625
  %635 = shufflevector <4 x float> %633, <4 x float> undef, <2 x i32> <i32 0, i32 1>
  %636 = bitcast %struct.SkPoint* %634 to <2 x float>*
  store <2 x float> %635, <2 x float>* %636, align 8
  br label %637

637:                                              ; preds = %628, %624, %575
  %638 = sext i32 %587 to i64
  %639 = getelementptr inbounds [33 x %struct.SkPoint], [33 x %struct.SkPoint]* %6, i64 0, i64 %638
  %640 = bitcast %struct.SkPoint* %639 to i64*
  store i64 %578, i64* %640, align 8
  %641 = add nsw i32 %587, 1
  call void %3(%struct.SkPoint* nonnull %251, i32 %641, %class.SkRegion* %579, %class.SkBlitter* %151) #10
  call void @llvm.lifetime.end.p0i8(i64 264, i8* nonnull %250) #10
  %642 = load i32, i32* %232, align 8
  br label %643

643:                                              ; preds = %530, %550, %554, %558, %637
  %644 = phi i32 [ %483, %530 ], [ %483, %550 ], [ %483, %554 ], [ %483, %558 ], [ %642, %637 ]
  %645 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %485, i64 2
  %646 = add nuw nsw i32 %484, 1
  %647 = icmp slt i32 %646, %644
  br i1 %647, label %482, label %480

648:                                              ; preds = %263
  %649 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %270, i64 3
  %650 = ptrtoint %struct.SkPoint* %649 to i64
  %651 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %270, i64 -1
  %652 = bitcast %struct.SkPoint* %651 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 16 %217, i8* align 4 %652, i64 32, i1 false)
  call fastcc void @_ZL9haircubicPK7SkPointPK8SkRegionPK6SkRectS7_P9SkBlitteriPFvS1_iS4_S9_E(%struct.SkPoint* nonnull %218, %class.SkRegion* %150, %struct.SkRect* %149, %struct.SkRect* %148, %class.SkBlitter* %151, void (%struct.SkPoint*, i32, %class.SkRegion*, %class.SkBlitter*)* %3)
  %653 = load <2 x float>, <2 x float>* %258, align 8
  br label %657

654:                                              ; preds = %263
  %655 = extractelement <2 x float> %269, i32 0
  store float %655, float* %219, align 16
  %656 = extractelement <2 x float> %269, i32 1
  store float %656, float* %220, align 4
  store float %265, float* %221, align 8
  store float %266, float* %222, align 4
  call void %3(%struct.SkPoint* nonnull %218, i32 2, %class.SkRegion* %150, %class.SkBlitter* %151) #10
  br label %657

657:                                              ; preds = %445, %366, %362, %358, %338, %654, %648, %480, %284, %278
  %658 = phi i64 [ %268, %654 ], [ %650, %648 ], [ %453, %480 ], [ %276, %284 ], [ %276, %278 ], [ %290, %338 ], [ %290, %358 ], [ %290, %362 ], [ %290, %366 ], [ %290, %445 ]
  %659 = phi i64 [ %267, %654 ], [ %267, %648 ], [ %456, %480 ], [ %267, %284 ], [ %267, %278 ], [ %267, %338 ], [ %267, %358 ], [ %267, %362 ], [ %267, %366 ], [ %267, %445 ]
  %660 = phi float [ %266, %654 ], [ %266, %648 ], [ %266, %480 ], [ %266, %284 ], [ %283, %278 ], [ %266, %338 ], [ %266, %358 ], [ %266, %362 ], [ %266, %366 ], [ %266, %445 ]
  %661 = phi float [ %265, %654 ], [ %265, %648 ], [ %265, %480 ], [ %265, %284 ], [ %282, %278 ], [ %265, %338 ], [ %265, %358 ], [ %265, %362 ], [ %265, %366 ], [ %265, %445 ]
  %662 = phi <2 x float> [ %269, %654 ], [ %653, %648 ], [ %481, %480 ], [ %287, %284 ], [ %281, %278 ], [ %357, %338 ], [ %357, %358 ], [ %357, %362 ], [ %357, %366 ], [ %450, %445 ]
  %663 = icmp eq i8* %216, %271
  br i1 %663, label %664, label %263

664:                                              ; preds = %657
  %665 = load %struct.SkPoint*, %struct.SkPoint** %239, align 8
  %666 = icmp eq %struct.SkPoint* %665, %234
  br i1 %666, label %669, label %667

667:                                              ; preds = %664
  %668 = bitcast %struct.SkPoint* %665 to i8*
  call void @_Z7sk_freePv(i8* %668) #10
  br label %669

669:                                              ; preds = %215, %664, %667
  call void @llvm.lifetime.end.p0i8(i64 152, i8* nonnull %226) #10
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %217) #10
  br label %670

670:                                              ; preds = %146, %669
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %24) #10
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %23) #10
  %671 = getelementptr inbounds %class.SkAAClipBlitterWrapper, %class.SkAAClipBlitterWrapper* %8, i64 0, i32 1
  call void @_ZN15SkAAClipBlitterD1Ev(%class.SkAAClipBlitter* %671) #10
  %672 = getelementptr inbounds %class.SkAAClipBlitterWrapper, %class.SkAAClipBlitterWrapper* %8, i64 0, i32 0
  call void @_ZN8SkRegionD1Ev(%class.SkRegion* nonnull %672) #10
  call void @llvm.lifetime.end.p0i8(i64 1160, i8* nonnull %22) #10
  br label %673

673:                                              ; preds = %4, %670
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN6SkScan12AntiHairPathERK6SkPathRK12SkRasterClipP9SkBlitter(%class.SkPath* dereferenceable(16), %class.SkRasterClip* dereferenceable(72), %class.SkBlitter*) local_unnamed_addr #0 align 2 {
  tail call void @_Z9hair_pathILN7SkPaint3CapE0EEvRK6SkPathRK12SkRasterClipP9SkBlitterPFvPK7SkPointiPK8SkRegionS9_E(%class.SkPath* dereferenceable(16) %0, %class.SkRasterClip* dereferenceable(72) %1, %class.SkBlitter* %2, void (%struct.SkPoint*, i32, %class.SkRegion*, %class.SkBlitter*)* nonnull @_ZN6SkScan15AntiHairLineRgnEPK7SkPointiPK8SkRegionP9SkBlitter)
  ret void
}

declare void @_ZN6SkScan15AntiHairLineRgnEPK7SkPointiPK8SkRegionP9SkBlitter(%struct.SkPoint*, i32, %class.SkRegion*, %class.SkBlitter*) #2

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN6SkScan14HairSquarePathERK6SkPathRK12SkRasterClipP9SkBlitter(%class.SkPath* dereferenceable(16), %class.SkRasterClip* dereferenceable(72), %class.SkBlitter*) local_unnamed_addr #0 align 2 {
  tail call void @_Z9hair_pathILN7SkPaint3CapE2EEvRK6SkPathRK12SkRasterClipP9SkBlitterPFvPK7SkPointiPK8SkRegionS9_E(%class.SkPath* dereferenceable(16) %0, %class.SkRasterClip* dereferenceable(72) %1, %class.SkBlitter* %2, void (%struct.SkPoint*, i32, %class.SkRegion*, %class.SkBlitter*)* nonnull @_ZN6SkScan11HairLineRgnEPK7SkPointiPK8SkRegionP9SkBlitter)
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_Z9hair_pathILN7SkPaint3CapE2EEvRK6SkPathRK12SkRasterClipP9SkBlitterPFvPK7SkPointiPK8SkRegionS9_E(%class.SkPath* dereferenceable(16), %class.SkRasterClip* dereferenceable(72), %class.SkBlitter*, void (%struct.SkPoint*, i32, %class.SkRegion*, %class.SkBlitter*)*) local_unnamed_addr #4 comdat {
  %5 = alloca %struct.SkConic, align 4
  %6 = alloca [33 x %struct.SkPoint], align 16
  %7 = alloca %struct.SkIRect, align 4
  %8 = alloca %class.SkAAClipBlitterWrapper, align 8
  %9 = alloca <4 x float>, align 16
  %10 = bitcast <4 x float>* %9 to %struct.SkRect*
  %11 = alloca %struct.SkRect, align 8
  %12 = alloca { i64, i64 }, align 8
  %13 = bitcast { i64, i64 }* %12 to %struct.SkIRect*
  %14 = alloca [4 x %struct.SkPoint], align 16
  %15 = alloca %class.SkAutoConicToQuads, align 8
  %16 = getelementptr inbounds %class.SkPath, %class.SkPath* %0, i64 0, i32 0, i32 0
  %17 = load %class.SkPathRef*, %class.SkPathRef** %16, align 8
  %18 = getelementptr inbounds %class.SkPathRef, %class.SkPathRef* %17, i64 0, i32 4, i32 2
  %19 = load i32, i32* %18, align 4
  %20 = icmp eq i32 %19, 0
  br i1 %20, label %690, label %21

21:                                               ; preds = %4
  %22 = bitcast %class.SkAAClipBlitterWrapper* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 1160, i8* nonnull %22) #10
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %22, i8 -86, i64 1160, i1 false)
  call void @_ZN22SkAAClipBlitterWrapperC1Ev(%class.SkAAClipBlitterWrapper* nonnull %8) #10
  %23 = bitcast <4 x float>* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %23) #10
  %24 = bitcast %struct.SkRect* %11 to i8*
  %25 = bitcast <4 x float>* %9 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %25, i8 -1, i64 16, i1 false)
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %24) #10
  %26 = getelementptr inbounds %struct.SkRect, %struct.SkRect* %11, i64 0, i32 2
  %27 = bitcast { i64, i64 }* %12 to i8*
  %28 = bitcast %struct.SkRect* %11 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %28, i8 -1, i64 16, i1 false)
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %27) #10
  %29 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %12, i64 0, i32 1
  %30 = bitcast { i64, i64 }* %12 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %30, i8 -86, i64 16, i1 false)
  %31 = load %class.SkPathRef*, %class.SkPathRef** %16, align 8
  %32 = getelementptr inbounds %class.SkPathRef, %class.SkPathRef* %31, i64 0, i32 9
  %33 = load i8, i8* %32, align 8
  %34 = icmp eq i8 %33, 0
  br i1 %34, label %44, label %35

35:                                               ; preds = %21
  %36 = getelementptr inbounds %class.SkPathRef, %class.SkPathRef* %31, i64 0, i32 1
  %37 = getelementptr inbounds %class.SkPathRef, %class.SkPathRef* %31, i64 0, i32 3, i32 0
  %38 = load %struct.SkPoint*, %struct.SkPoint** %37, align 8
  %39 = getelementptr inbounds %class.SkPathRef, %class.SkPathRef* %31, i64 0, i32 3, i32 2
  %40 = load i32, i32* %39, align 4
  %41 = call zeroext i1 @_ZN6SkRect14setBoundsCheckEPK7SkPointi(%struct.SkRect* %36, %struct.SkPoint* %38, i32 %40) #10
  %42 = getelementptr inbounds %class.SkPathRef, %class.SkPathRef* %31, i64 0, i32 10
  %43 = zext i1 %41 to i8
  store i8 %43, i8* %42, align 1
  store i8 0, i8* %32, align 8
  br label %44

44:                                               ; preds = %21, %35
  %45 = getelementptr inbounds %class.SkPathRef, %class.SkPathRef* %31, i64 0, i32 1, i32 0
  %46 = load float, float* %45, align 4
  %47 = call float @llvm.floor.f32(float %46) #10
  %48 = fcmp olt float %47, 0x41DFFFFFE0000000
  %49 = select i1 %48, float %47, float 0x41DFFFFFE0000000
  %50 = fcmp ogt float %49, 0xC1DFFFFFE0000000
  %51 = select i1 %50, float %49, float 0xC1DFFFFFE0000000
  %52 = fptosi float %51 to i32
  %53 = getelementptr inbounds %class.SkPathRef, %class.SkPathRef* %31, i64 0, i32 1, i32 1
  %54 = load float, float* %53, align 4
  %55 = call float @llvm.floor.f32(float %54) #10
  %56 = fcmp olt float %55, 0x41DFFFFFE0000000
  %57 = select i1 %56, float %55, float 0x41DFFFFFE0000000
  %58 = fcmp ogt float %57, 0xC1DFFFFFE0000000
  %59 = select i1 %58, float %57, float 0xC1DFFFFFE0000000
  %60 = fptosi float %59 to i32
  %61 = getelementptr inbounds %class.SkPathRef, %class.SkPathRef* %31, i64 0, i32 1, i32 2
  %62 = load float, float* %61, align 4
  %63 = call float @llvm.ceil.f32(float %62) #10
  %64 = fcmp olt float %63, 0x41DFFFFFE0000000
  %65 = select i1 %64, float %63, float 0x41DFFFFFE0000000
  %66 = fcmp ogt float %65, 0xC1DFFFFFE0000000
  %67 = select i1 %66, float %65, float 0xC1DFFFFFE0000000
  %68 = fptosi float %67 to i32
  %69 = getelementptr inbounds %class.SkPathRef, %class.SkPathRef* %31, i64 0, i32 1, i32 3
  %70 = load float, float* %69, align 4
  %71 = call float @llvm.ceil.f32(float %70) #10
  %72 = fcmp olt float %71, 0x41DFFFFFE0000000
  %73 = select i1 %72, float %71, float 0x41DFFFFFE0000000
  %74 = fcmp ogt float %73, 0xC1DFFFFFE0000000
  %75 = select i1 %74, float %73, float 0xC1DFFFFFE0000000
  %76 = fptosi float %75 to i32
  %77 = sext i32 %52 to i64
  %78 = icmp sgt i64 %77, -2147483645
  %79 = select i1 %78, i64 %77, i64 -2147483645
  %80 = add nsw i64 %79, 4294967294
  %81 = sext i32 %60 to i64
  %82 = icmp sgt i64 %81, -2147483645
  %83 = select i1 %82, i64 %81, i64 -2147483645
  %84 = sext i32 %68 to i64
  %85 = icmp slt i64 %84, 2147483645
  %86 = select i1 %85, i64 %84, i64 2147483645
  %87 = add nsw i64 %86, 2
  %88 = sext i32 %76 to i64
  %89 = icmp slt i64 %88, 2147483645
  %90 = select i1 %89, i64 %88, i64 2147483645
  %91 = shl nsw i64 %83, 32
  %92 = add i64 %91, -8589934592
  %93 = and i64 %80, 4294967295
  %94 = or i64 %92, %93
  %95 = shl nsw i64 %90, 32
  %96 = add i64 %95, 8589934592
  %97 = and i64 %87, 4294967295
  %98 = or i64 %96, %97
  %99 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %12, i64 0, i32 0
  store i64 %94, i64* %99, align 8
  store i64 %98, i64* %29, align 8
  %100 = call dereferenceable(16) %struct.SkIRect* @_ZNK12SkRasterClip9getBoundsEv(%class.SkRasterClip* %1) #10
  %101 = bitcast %struct.SkIRect* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %101) #10
  call void @llvm.memset.p0i8.i64(i8* nonnull align 4 %101, i8 -86, i64 16, i1 false) #10
  %102 = call zeroext i1 @_ZN7SkIRect9intersectERKS_S1_(%struct.SkIRect* nonnull %7, %struct.SkIRect* dereferenceable(16) %100, %struct.SkIRect* nonnull dereferenceable(16) %13) #10
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %101) #10
  br i1 %102, label %103, label %142

103:                                              ; preds = %44
  %104 = call zeroext i1 @_ZNK12SkRasterClip13quickContainsERK7SkIRect(%class.SkRasterClip* %1, %struct.SkIRect* nonnull dereferenceable(16) %13) #10
  br i1 %104, label %143, label %105

105:                                              ; preds = %103
  %106 = getelementptr inbounds %class.SkRasterClip, %class.SkRasterClip* %1, i64 0, i32 2
  %107 = load i8, i8* %106, align 8, !range !2
  %108 = icmp eq i8 %107, 0
  br i1 %108, label %111, label %109

109:                                              ; preds = %105
  %110 = getelementptr inbounds %class.SkRasterClip, %class.SkRasterClip* %1, i64 0, i32 0
  br label %116

111:                                              ; preds = %105
  call void @_ZN22SkAAClipBlitterWrapper4initERK12SkRasterClipP9SkBlitter(%class.SkAAClipBlitterWrapper* nonnull %8, %class.SkRasterClip* dereferenceable(72) %1, %class.SkBlitter* %2) #10
  %112 = getelementptr inbounds %class.SkAAClipBlitterWrapper, %class.SkAAClipBlitterWrapper* %8, i64 0, i32 3
  %113 = load %class.SkBlitter*, %class.SkBlitter** %112, align 8
  %114 = getelementptr inbounds %class.SkAAClipBlitterWrapper, %class.SkAAClipBlitterWrapper* %8, i64 0, i32 2
  %115 = load %class.SkRegion*, %class.SkRegion** %114, align 8
  br label %116

116:                                              ; preds = %111, %109
  %117 = phi %class.SkRegion* [ %110, %109 ], [ %115, %111 ]
  %118 = phi %class.SkBlitter* [ %2, %109 ], [ %113, %111 ]
  %119 = bitcast %class.SkRegion* %117 to <4 x i32>*
  %120 = load <4 x i32>, <4 x i32>* %119, align 4
  %121 = sitofp <4 x i32> %120 to <4 x float>
  %122 = shufflevector <4 x float> %121, <4 x float> undef, <2 x i32> <i32 0, i32 1>
  %123 = fadd <2 x float> %122, <float -1.000000e+00, float -1.000000e+00>
  %124 = shufflevector <4 x float> %121, <4 x float> undef, <2 x i32> <i32 2, i32 3>
  %125 = fadd <2 x float> %124, <float 1.000000e+00, float 1.000000e+00>
  %126 = bitcast %struct.SkRect* %11 to <2 x float>*
  store <2 x float> %123, <2 x float>* %126, align 8
  %127 = bitcast float* %26 to <2 x float>*
  store <2 x float> %125, <2 x float>* %127, align 8
  %128 = fadd <4 x float> %121, <float 1.000000e+00, float 1.000000e+00, float -1.000000e+00, float -1.000000e+00>
  store <4 x float> %128, <4 x float>* %9, align 16
  %129 = extractelement <4 x float> %128, i32 0
  %130 = extractelement <4 x float> %128, i32 2
  %131 = fcmp ogt float %129, %130
  %132 = extractelement <4 x float> %128, i32 1
  %133 = extractelement <4 x float> %128, i32 3
  %134 = fcmp ogt float %132, %133
  %135 = or i1 %131, %134
  br i1 %135, label %136, label %137

136:                                              ; preds = %116
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %23, i8 0, i64 16, i1 false) #10
  br label %137

137:                                              ; preds = %116, %136
  %138 = getelementptr inbounds %class.SkRasterClip, %class.SkRasterClip* %1, i64 0, i32 4
  %139 = load i8, i8* %138, align 2, !range !2
  %140 = icmp eq i8 %139, 0
  %141 = select i1 %140, %struct.SkRect* null, %struct.SkRect* %10
  br label %143

142:                                              ; preds = %44
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %27) #10
  br label %687

143:                                              ; preds = %137, %103
  %144 = phi %struct.SkRect* [ %11, %137 ], [ null, %103 ]
  %145 = phi %struct.SkRect* [ %141, %137 ], [ null, %103 ]
  %146 = phi %class.SkRegion* [ %117, %137 ], [ null, %103 ]
  %147 = phi %class.SkBlitter* [ %118, %137 ], [ %2, %103 ]
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %27) #10
  %148 = load %class.SkPathRef*, %class.SkPathRef** %16, align 8
  %149 = getelementptr inbounds %class.SkPathRef, %class.SkPathRef* %148, i64 0, i32 4, i32 0
  %150 = load i8*, i8** %149, align 8
  %151 = getelementptr inbounds %class.SkPathRef, %class.SkPathRef* %148, i64 0, i32 9
  %152 = load i8, i8* %151, align 8
  %153 = icmp eq i8 %152, 0
  br i1 %153, label %154, label %161

154:                                              ; preds = %143
  %155 = getelementptr inbounds %class.SkPathRef, %class.SkPathRef* %148, i64 0, i32 3, i32 0
  %156 = bitcast %struct.SkPoint** %155 to i64*
  %157 = load i64, i64* %156, align 8
  %158 = getelementptr inbounds %class.SkPathRef, %class.SkPathRef* %148, i64 0, i32 5, i32 0
  %159 = bitcast float** %158 to i64*
  %160 = load i64, i64* %159, align 8
  br label %180

161:                                              ; preds = %143
  %162 = getelementptr inbounds %class.SkPathRef, %class.SkPathRef* %148, i64 0, i32 1
  %163 = getelementptr inbounds %class.SkPathRef, %class.SkPathRef* %148, i64 0, i32 3, i32 0
  %164 = load %struct.SkPoint*, %struct.SkPoint** %163, align 8
  %165 = getelementptr inbounds %class.SkPathRef, %class.SkPathRef* %148, i64 0, i32 3, i32 2
  %166 = load i32, i32* %165, align 4
  %167 = call zeroext i1 @_ZN6SkRect14setBoundsCheckEPK7SkPointi(%struct.SkRect* %162, %struct.SkPoint* %164, i32 %166) #10
  %168 = getelementptr inbounds %class.SkPathRef, %class.SkPathRef* %148, i64 0, i32 10
  %169 = zext i1 %167 to i8
  store i8 %169, i8* %168, align 1
  store i8 0, i8* %151, align 8
  %170 = load %class.SkPathRef*, %class.SkPathRef** %16, align 8
  %171 = getelementptr inbounds %class.SkPathRef, %class.SkPathRef* %170, i64 0, i32 9
  %172 = load i8, i8* %171, align 8
  %173 = icmp eq i8 %172, 0
  %174 = getelementptr inbounds %class.SkPathRef, %class.SkPathRef* %170, i64 0, i32 3, i32 0
  %175 = bitcast %struct.SkPoint** %174 to i64*
  %176 = load i64, i64* %175, align 8
  %177 = getelementptr inbounds %class.SkPathRef, %class.SkPathRef* %170, i64 0, i32 5, i32 0
  %178 = bitcast float** %177 to i64*
  %179 = load i64, i64* %178, align 8
  br i1 %173, label %180, label %186

180:                                              ; preds = %154, %161
  %181 = phi i64 [ %160, %154 ], [ %179, %161 ]
  %182 = phi i64 [ %157, %154 ], [ %176, %161 ]
  %183 = phi %class.SkPathRef* [ %148, %154 ], [ %170, %161 ]
  %184 = getelementptr inbounds %class.SkPathRef, %class.SkPathRef* %183, i64 0, i32 10
  %185 = load i8, i8* %184, align 1, !range !2
  br label %196

186:                                              ; preds = %161
  %187 = inttoptr i64 %176 to %struct.SkPoint*
  %188 = getelementptr inbounds %class.SkPathRef, %class.SkPathRef* %170, i64 0, i32 9
  %189 = getelementptr inbounds %class.SkPathRef, %class.SkPathRef* %170, i64 0, i32 1
  %190 = getelementptr inbounds %class.SkPathRef, %class.SkPathRef* %170, i64 0, i32 3, i32 2
  %191 = load i32, i32* %190, align 4
  %192 = call zeroext i1 @_ZN6SkRect14setBoundsCheckEPK7SkPointi(%struct.SkRect* %189, %struct.SkPoint* %187, i32 %191) #10
  %193 = getelementptr inbounds %class.SkPathRef, %class.SkPathRef* %170, i64 0, i32 10
  %194 = zext i1 %192 to i8
  store i8 %194, i8* %193, align 1
  store i8 0, i8* %188, align 8
  %195 = load %class.SkPathRef*, %class.SkPathRef** %16, align 8
  br label %196

196:                                              ; preds = %186, %180
  %197 = phi i64 [ %181, %180 ], [ %179, %186 ]
  %198 = phi i64 [ %182, %180 ], [ %176, %186 ]
  %199 = phi %class.SkPathRef* [ %183, %180 ], [ %195, %186 ]
  %200 = phi i8 [ %185, %180 ], [ %194, %186 ]
  %201 = getelementptr inbounds %class.SkPathRef, %class.SkPathRef* %199, i64 0, i32 4, i32 0
  %202 = load i8*, i8** %201, align 8
  %203 = icmp eq i8 %200, 0
  br i1 %203, label %211, label %204

204:                                              ; preds = %196
  %205 = icmp eq i8* %202, null
  br i1 %205, label %211, label %206

206:                                              ; preds = %204
  %207 = getelementptr inbounds %class.SkPathRef, %class.SkPathRef* %199, i64 0, i32 4, i32 2
  %208 = load i32, i32* %207, align 4
  %209 = sext i32 %208 to i64
  %210 = getelementptr inbounds i8, i8* %202, i64 %209
  br label %211

211:                                              ; preds = %196, %204, %206
  %212 = phi i8* [ %210, %206 ], [ null, %204 ], [ %202, %196 ]
  %213 = bitcast [4 x %struct.SkPoint]* %14 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %213) #10
  %214 = getelementptr inbounds [4 x %struct.SkPoint], [4 x %struct.SkPoint]* %14, i64 0, i64 0
  %215 = getelementptr inbounds [4 x %struct.SkPoint], [4 x %struct.SkPoint]* %14, i64 0, i64 0, i32 0
  %216 = getelementptr inbounds [4 x %struct.SkPoint], [4 x %struct.SkPoint]* %14, i64 0, i64 0, i32 1
  %217 = getelementptr inbounds [4 x %struct.SkPoint], [4 x %struct.SkPoint]* %14, i64 0, i64 1, i32 0
  %218 = getelementptr inbounds [4 x %struct.SkPoint], [4 x %struct.SkPoint]* %14, i64 0, i64 1, i32 1
  %219 = getelementptr inbounds [4 x %struct.SkPoint], [4 x %struct.SkPoint]* %14, i64 0, i64 2, i32 0
  %220 = getelementptr inbounds [4 x %struct.SkPoint], [4 x %struct.SkPoint]* %14, i64 0, i64 2, i32 1
  %221 = getelementptr inbounds [4 x %struct.SkPoint], [4 x %struct.SkPoint]* %14, i64 0, i64 3, i32 0
  %222 = bitcast %class.SkAutoConicToQuads* %15 to i8*
  %223 = bitcast [4 x %struct.SkPoint]* %14 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %223, i8 -1, i64 32, i1 false)
  call void @llvm.lifetime.start.p0i8(i64 152, i8* nonnull %222) #10
  %224 = getelementptr inbounds %class.SkAutoConicToQuads, %class.SkAutoConicToQuads* %15, i64 0, i32 0, i32 1
  %225 = bitcast %union.anon* %224 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %225, i8 -86, i64 144, i1 false)
  %226 = getelementptr inbounds %class.SkAutoConicToQuads, %class.SkAutoConicToQuads* %15, i64 0, i32 0, i32 1
  %227 = bitcast %class.SkAutoConicToQuads* %15 to %union.anon**
  store %union.anon* %226, %union.anon** %227, align 8
  %228 = getelementptr inbounds %class.SkAutoConicToQuads, %class.SkAutoConicToQuads* %15, i64 0, i32 1
  store i32 0, i32* %228, align 8
  %229 = icmp eq i8* %212, %150
  %230 = bitcast %union.anon* %226 to %struct.SkPoint*
  br i1 %229, label %686, label %231

231:                                              ; preds = %211
  %232 = bitcast %struct.SkConic* %5 to i8*
  %233 = getelementptr inbounds %struct.SkConic, %struct.SkConic* %5, i64 0, i32 1
  %234 = bitcast float* %233 to i32*
  %235 = getelementptr inbounds %class.SkAutoConicToQuads, %class.SkAutoConicToQuads* %15, i64 0, i32 0, i32 0
  %236 = bitcast %class.SkAutoConicToQuads* %15 to i8**
  %237 = icmp eq %struct.SkRect* %145, null
  %238 = getelementptr inbounds %struct.SkRect, %struct.SkRect* %144, i64 0, i32 0
  %239 = getelementptr inbounds %struct.SkRect, %struct.SkRect* %144, i64 0, i32 2
  %240 = getelementptr inbounds %struct.SkRect, %struct.SkRect* %144, i64 0, i32 1
  %241 = getelementptr inbounds %struct.SkRect, %struct.SkRect* %144, i64 0, i32 3
  %242 = getelementptr inbounds %struct.SkRect, %struct.SkRect* %145, i64 0, i32 2
  %243 = getelementptr inbounds %struct.SkRect, %struct.SkRect* %145, i64 0, i32 0
  %244 = getelementptr inbounds %struct.SkRect, %struct.SkRect* %145, i64 0, i32 3
  %245 = getelementptr inbounds %struct.SkRect, %struct.SkRect* %145, i64 0, i32 1
  %246 = bitcast [33 x %struct.SkPoint]* %6 to i8*
  %247 = getelementptr inbounds [33 x %struct.SkPoint], [33 x %struct.SkPoint]* %6, i64 0, i64 0
  %248 = bitcast [33 x %struct.SkPoint]* %6 to i64*
  %249 = bitcast [4 x %struct.SkPoint]* %14 to i64*
  %250 = getelementptr inbounds [4 x %struct.SkPoint], [4 x %struct.SkPoint]* %14, i64 0, i64 1
  %251 = bitcast %struct.SkPoint* %250 to i64*
  %252 = getelementptr inbounds [4 x %struct.SkPoint], [4 x %struct.SkPoint]* %14, i64 0, i64 2
  %253 = bitcast %struct.SkPoint* %252 to i64*
  %254 = bitcast float* %221 to <2 x float>*
  %255 = bitcast float* %219 to <2 x float>*
  %256 = bitcast float* %219 to <2 x float>*
  %257 = bitcast float* %217 to <2 x float>*
  %258 = bitcast [4 x %struct.SkPoint]* %14 to <2 x float>*
  br label %259

259:                                              ; preds = %231, %669
  %260 = phi i8* [ %150, %231 ], [ %268, %669 ]
  %261 = phi i32 [ 6, %231 ], [ %289, %669 ]
  %262 = phi float [ 0xFFFFFFFFE0000000, %231 ], [ %680, %669 ]
  %263 = phi float [ 0xFFFFFFFFE0000000, %231 ], [ %679, %669 ]
  %264 = phi i64 [ %197, %231 ], [ %290, %669 ]
  %265 = phi i64 [ %198, %231 ], [ %291, %669 ]
  %266 = phi <2 x float> [ <float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000>, %231 ], [ %672, %669 ]
  %267 = inttoptr i64 %265 to %struct.SkPoint*
  %268 = getelementptr inbounds i8, i8* %260, i64 1
  %269 = load i8, i8* %260, align 1, !noalias !10
  switch i8 %269, label %276 [
    i8 0, label %283
    i8 1, label %283
    i8 2, label %270
    i8 3, label %277
    i8 4, label %273
    i8 5, label %288
  ]

270:                                              ; preds = %259
  %271 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %267, i64 2
  %272 = ptrtoint %struct.SkPoint* %271 to i64
  br label %288

273:                                              ; preds = %259
  %274 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %267, i64 3
  %275 = ptrtoint %struct.SkPoint* %274 to i64
  br label %288

276:                                              ; preds = %259
  call void @llvm.trap() #10, !noalias !10
  unreachable

277:                                              ; preds = %259
  %278 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %267, i64 2
  %279 = ptrtoint %struct.SkPoint* %278 to i64
  %280 = inttoptr i64 %264 to float*
  %281 = getelementptr inbounds float, float* %280, i64 1
  %282 = ptrtoint float* %281 to i64
  br label %288

283:                                              ; preds = %259, %259
  %284 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %267, i64 1
  %285 = ptrtoint %struct.SkPoint* %284 to i64
  switch i8 %269, label %287 [
    i8 0, label %288
    i8 1, label %286
  ]

286:                                              ; preds = %283
  br label %288

287:                                              ; preds = %283
  call void @llvm.trap() #10, !noalias !13
  unreachable

288:                                              ; preds = %259, %283, %286, %270, %277, %273
  %289 = phi i32 [ 4, %273 ], [ 3, %277 ], [ 2, %270 ], [ 1, %286 ], [ 0, %283 ], [ 5, %259 ]
  %290 = phi i64 [ %264, %273 ], [ %282, %277 ], [ %264, %270 ], [ %264, %286 ], [ %264, %283 ], [ %264, %259 ]
  %291 = phi i64 [ %275, %273 ], [ %279, %277 ], [ %272, %270 ], [ %285, %286 ], [ %285, %283 ], [ %265, %259 ]
  %292 = phi i64 [ -1, %273 ], [ -1, %277 ], [ -1, %270 ], [ -1, %286 ], [ 0, %283 ], [ -1, %259 ]
  %293 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %267, i64 %292
  %294 = icmp eq i8* %268, %212
  br i1 %294, label %298, label %295

295:                                              ; preds = %288
  %296 = load i8, i8* %268, align 1
  %297 = zext i8 %296 to i32
  br label %298

298:                                              ; preds = %288, %295
  %299 = phi i32 [ %297, %295 ], [ 6, %288 ]
  %300 = bitcast %struct.SkPoint* %293 to i8*
  %301 = zext i32 %289 to i64
  %302 = getelementptr inbounds [7 x i8], [7 x i8]* @_ZZN10SkPathPriv9PtsInIterEjE10gPtsInVerb, i64 0, i64 %301
  %303 = load i8, i8* %302, align 1
  %304 = zext i8 %303 to i64
  %305 = shl nuw nsw i64 %304, 3
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 16 %213, i8* align 4 %300, i64 %305, i1 false)
  switch i32 %289, label %669 [
    i32 0, label %306
    i32 1, label %310
    i32 2, label %312
    i32 3, label %471
    i32 4, label %661
    i32 5, label %663
  ]

306:                                              ; preds = %298
  %307 = load <2 x float>, <2 x float>* %258, align 16
  %308 = extractelement <2 x float> %307, i32 0
  %309 = extractelement <2 x float> %307, i32 1
  br label %669

310:                                              ; preds = %298
  call void @_Z10extend_ptsILN7SkPaint3CapE2EEvN6SkPath4VerbES3_P7SkPointi(i32 %261, i32 %299, %struct.SkPoint* nonnull %214, i32 2)
  call void %3(%struct.SkPoint* nonnull %214, i32 2, %class.SkRegion* %146, %class.SkBlitter* %147) #10
  %311 = load <2 x float>, <2 x float>* %257, align 8
  br label %669

312:                                              ; preds = %298
  call void @_Z10extend_ptsILN7SkPaint3CapE2EEvN6SkPath4VerbES3_P7SkPointi(i32 %261, i32 %299, %struct.SkPoint* nonnull %214, i32 3)
  %313 = load float, float* %215, align 16
  %314 = load float, float* %219, align 16
  %315 = fadd float %313, %314
  %316 = fmul float %315, 5.000000e-01
  %317 = load float, float* %217, align 8
  %318 = fsub float %316, %317
  %319 = load float, float* %216, align 4
  %320 = load float, float* %220, align 4
  %321 = fadd float %319, %320
  %322 = fmul float %321, 5.000000e-01
  %323 = load float, float* %218, align 4
  %324 = fsub float %322, %323
  %325 = call float @llvm.fabs.f32(float %318) #10
  %326 = call float @llvm.fabs.f32(float %324) #10
  %327 = call float @llvm.ceil.f32(float %325) #10
  %328 = fcmp olt float %327, 0x41DFFFFFE0000000
  %329 = select i1 %328, float %327, float 0x41DFFFFFE0000000
  %330 = fcmp ogt float %329, 0xC1DFFFFFE0000000
  %331 = select i1 %330, float %329, float 0xC1DFFFFFE0000000
  %332 = fptosi float %331 to i32
  %333 = call float @llvm.ceil.f32(float %326) #10
  %334 = fcmp olt float %333, 0x41DFFFFFE0000000
  %335 = select i1 %334, float %333, float 0x41DFFFFFE0000000
  %336 = fcmp ogt float %335, 0xC1DFFFFFE0000000
  %337 = select i1 %336, float %335, float 0xC1DFFFFFE0000000
  %338 = fptosi float %337 to i32
  %339 = icmp ugt i32 %332, %338
  %340 = lshr i32 %338, 1
  %341 = add i32 %340, %332
  %342 = lshr i32 %332, 1
  %343 = add i32 %342, %338
  %344 = select i1 %339, i32 %341, i32 %343
  %345 = call i32 @llvm.ctlz.i32(i32 %344, i1 false) #10, !range !9
  %346 = sub nuw nsw i32 33, %345
  %347 = ashr i32 %346, 1
  %348 = icmp slt i32 %347, 5
  %349 = select i1 %348, i32 %347, i32 5
  %350 = load i64, i64* %249, align 16
  br i1 %237, label %351, label %358

351:                                              ; preds = %312
  %352 = load i64, i64* %251, align 8
  %353 = load i64, i64* %253, align 16
  %354 = insertelement <2 x i64> <i64 undef, i64 0>, i64 %350, i32 0
  %355 = insertelement <2 x i64> <i64 undef, i64 0>, i64 %352, i32 0
  %356 = bitcast <2 x i64> %355 to <4 x float>
  %357 = bitcast <2 x i64> %354 to <4 x float>
  br label %403

358:                                              ; preds = %312
  %359 = insertelement <2 x i64> <i64 undef, i64 0>, i64 %350, i32 0
  %360 = bitcast <2 x i64> %359 to <4 x float>
  %361 = load i64, i64* %251, align 8
  %362 = insertelement <2 x i64> <i64 undef, i64 0>, i64 %361, i32 0
  %363 = bitcast <2 x i64> %362 to <4 x float>
  %364 = call <4 x float> @llvm.x86.sse.min.ps(<4 x float> %360, <4 x float> %363) #10
  %365 = call <4 x float> @llvm.x86.sse.max.ps(<4 x float> %360, <4 x float> %363) #10
  %366 = load i64, i64* %253, align 16
  %367 = insertelement <2 x i64> <i64 undef, i64 0>, i64 %366, i32 0
  %368 = bitcast <2 x i64> %367 to <4 x float>
  %369 = call <4 x float> @llvm.x86.sse.min.ps(<4 x float> %364, <4 x float> %368) #10
  %370 = call <4 x float> @llvm.x86.sse.max.ps(<4 x float> %365, <4 x float> %368) #10
  %371 = load float, float* %238, align 8
  %372 = extractelement <4 x float> %370, i32 0
  %373 = fcmp olt float %371, %372
  %374 = trunc i64 %366 to i32
  %375 = bitcast i32 %374 to float
  %376 = insertelement <2 x float> undef, float %375, i32 0
  %377 = insertelement <2 x float> %376, float %320, i32 1
  br i1 %373, label %378, label %669

378:                                              ; preds = %358
  %379 = extractelement <4 x float> %369, i32 0
  %380 = load float, float* %239, align 8
  %381 = fcmp olt float %379, %380
  br i1 %381, label %382, label %669

382:                                              ; preds = %378
  %383 = load float, float* %240, align 4
  %384 = extractelement <4 x float> %370, i32 1
  %385 = fcmp olt float %383, %384
  br i1 %385, label %386, label %669

386:                                              ; preds = %382
  %387 = extractelement <4 x float> %369, i32 1
  %388 = load float, float* %241, align 4
  %389 = fcmp olt float %387, %388
  br i1 %389, label %390, label %669

390:                                              ; preds = %386
  %391 = load float, float* %242, align 4
  %392 = fcmp ugt float %372, %391
  br i1 %392, label %403, label %393

393:                                              ; preds = %390
  %394 = load float, float* %243, align 4
  %395 = fcmp ult float %379, %394
  br i1 %395, label %403, label %396

396:                                              ; preds = %393
  %397 = load float, float* %244, align 4
  %398 = fcmp ugt float %384, %397
  br i1 %398, label %403, label %399

399:                                              ; preds = %396
  %400 = load float, float* %245, align 4
  %401 = fcmp ult float %387, %400
  br i1 %401, label %403, label %402

402:                                              ; preds = %399
  br label %403

403:                                              ; preds = %402, %399, %396, %393, %390, %351
  %404 = phi <4 x float> [ %357, %351 ], [ %360, %399 ], [ %360, %390 ], [ %360, %393 ], [ %360, %396 ], [ %360, %402 ]
  %405 = phi <4 x float> [ %356, %351 ], [ %363, %399 ], [ %363, %390 ], [ %363, %393 ], [ %363, %396 ], [ %363, %402 ]
  %406 = phi i64 [ %353, %351 ], [ %366, %399 ], [ %366, %390 ], [ %366, %393 ], [ %366, %396 ], [ %366, %402 ]
  %407 = phi %class.SkRegion* [ %146, %351 ], [ %146, %399 ], [ %146, %390 ], [ %146, %393 ], [ %146, %396 ], [ null, %402 ]
  %408 = insertelement <2 x i64> undef, i64 %406, i32 0
  %409 = bitcast <2 x i64> %408 to <4 x float>
  %410 = fsub <4 x float> %405, %404
  %411 = fadd <4 x float> %410, %410
  %412 = fadd <4 x float> %405, %405
  %413 = fsub <4 x float> %409, %412
  %414 = fadd <4 x float> %404, %413
  %415 = shl i32 1, %349
  %416 = sitofp i32 %415 to float
  %417 = fdiv float 1.000000e+00, %416
  %418 = insertelement <4 x float> undef, float %417, i32 0
  %419 = shufflevector <4 x float> %418, <4 x float> undef, <4 x i32> zeroinitializer
  call void @llvm.lifetime.start.p0i8(i64 264, i8* nonnull %246) #10
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %246, i8 -1, i64 264, i1 false) #10
  store i64 %350, i64* %248, align 16
  %420 = icmp sgt i32 %415, 1
  br i1 %420, label %421, label %465

421:                                              ; preds = %403
  %422 = zext i32 %415 to i64
  %423 = add nsw i64 %422, -1
  %424 = and i64 %423, 1
  %425 = icmp eq i32 %349, 1
  br i1 %425, label %452, label %426

426:                                              ; preds = %421
  %427 = sub nsw i64 %423, %424
  br label %428

428:                                              ; preds = %428, %426
  %429 = phi i64 [ 1, %426 ], [ %449, %428 ]
  %430 = phi <4 x float> [ zeroinitializer, %426 ], [ %441, %428 ]
  %431 = phi i64 [ %427, %426 ], [ %450, %428 ]
  %432 = fadd <4 x float> %419, %430
  %433 = fmul <4 x float> %414, %432
  %434 = fadd <4 x float> %411, %433
  %435 = fmul <4 x float> %432, %434
  %436 = fadd <4 x float> %404, %435
  %437 = getelementptr inbounds [33 x %struct.SkPoint], [33 x %struct.SkPoint]* %6, i64 0, i64 %429
  %438 = shufflevector <4 x float> %436, <4 x float> undef, <2 x i32> <i32 0, i32 1>
  %439 = bitcast %struct.SkPoint* %437 to <2 x float>*
  store <2 x float> %438, <2 x float>* %439, align 8
  %440 = add nuw nsw i64 %429, 1
  %441 = fadd <4 x float> %419, %432
  %442 = fmul <4 x float> %414, %441
  %443 = fadd <4 x float> %411, %442
  %444 = fmul <4 x float> %441, %443
  %445 = fadd <4 x float> %404, %444
  %446 = getelementptr inbounds [33 x %struct.SkPoint], [33 x %struct.SkPoint]* %6, i64 0, i64 %440
  %447 = shufflevector <4 x float> %445, <4 x float> undef, <2 x i32> <i32 0, i32 1>
  %448 = bitcast %struct.SkPoint* %446 to <2 x float>*
  store <2 x float> %447, <2 x float>* %448, align 8
  %449 = add nuw nsw i64 %429, 2
  %450 = add i64 %431, -2
  %451 = icmp eq i64 %450, 0
  br i1 %451, label %452, label %428

452:                                              ; preds = %428, %421
  %453 = phi i64 [ 1, %421 ], [ %449, %428 ]
  %454 = phi <4 x float> [ zeroinitializer, %421 ], [ %441, %428 ]
  %455 = icmp eq i64 %424, 0
  br i1 %455, label %465, label %456

456:                                              ; preds = %452
  %457 = fadd <4 x float> %419, %454
  %458 = fmul <4 x float> %414, %457
  %459 = fadd <4 x float> %411, %458
  %460 = fmul <4 x float> %457, %459
  %461 = fadd <4 x float> %404, %460
  %462 = getelementptr inbounds [33 x %struct.SkPoint], [33 x %struct.SkPoint]* %6, i64 0, i64 %453
  %463 = shufflevector <4 x float> %461, <4 x float> undef, <2 x i32> <i32 0, i32 1>
  %464 = bitcast %struct.SkPoint* %462 to <2 x float>*
  store <2 x float> %463, <2 x float>* %464, align 8
  br label %465

465:                                              ; preds = %456, %452, %403
  %466 = sext i32 %415 to i64
  %467 = getelementptr inbounds [33 x %struct.SkPoint], [33 x %struct.SkPoint]* %6, i64 0, i64 %466
  %468 = bitcast %struct.SkPoint* %467 to i64*
  store i64 %406, i64* %468, align 8
  %469 = add nsw i32 %415, 1
  call void %3(%struct.SkPoint* nonnull %247, i32 %469, %class.SkRegion* %407, %class.SkBlitter* %147) #10
  call void @llvm.lifetime.end.p0i8(i64 264, i8* nonnull %246) #10
  %470 = load <2 x float>, <2 x float>* %256, align 16
  br label %669

471:                                              ; preds = %298
  call void @_Z10extend_ptsILN7SkPaint3CapE2EEvN6SkPath4VerbES3_P7SkPointi(i32 %261, i32 %299, %struct.SkPoint* nonnull %214, i32 3)
  %472 = inttoptr i64 %264 to i32*
  %473 = load i32, i32* %472, align 4
  call void @llvm.lifetime.start.p0i8(i64 28, i8* nonnull %232) #10
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %232, i8* nonnull align 16 %213, i64 24, i1 false) #10
  store i32 %473, i32* %234, align 4
  %474 = call i32 @_ZNK7SkConic15computeQuadPOW2Ef(%struct.SkConic* nonnull %5, float 2.500000e-01) #10
  %475 = shl i32 1, %474
  store i32 %475, i32* %228, align 8
  %476 = shl nsw i32 %475, 1
  %477 = or i32 %476, 1
  %478 = sext i32 %477 to i64
  %479 = load %struct.SkPoint*, %struct.SkPoint** %235, align 8
  %480 = icmp eq %struct.SkPoint* %479, %230
  br i1 %480, label %483, label %481

481:                                              ; preds = %471
  %482 = bitcast %struct.SkPoint* %479 to i8*
  call void @_Z7sk_freePv(i8* %482) #10
  br label %483

483:                                              ; preds = %481, %471
  %484 = icmp ugt i32 %477, 17
  br i1 %484, label %485, label %488

485:                                              ; preds = %483
  %486 = call i8* @_Z15sk_malloc_throwmm(i64 %478, i64 8) #10
  store i8* %486, i8** %236, align 8
  %487 = bitcast i8* %486 to %struct.SkPoint*
  br label %489

488:                                              ; preds = %483
  store %union.anon* %226, %union.anon** %227, align 8
  br label %489

489:                                              ; preds = %485, %488
  %490 = phi %struct.SkPoint* [ %230, %488 ], [ %487, %485 ]
  %491 = call i32 @_ZNK7SkConic17chopIntoQuadsPOW2EP7SkPointi(%struct.SkConic* nonnull %5, %struct.SkPoint* %490, i32 %474) #10
  store i32 %491, i32* %228, align 8
  call void @llvm.lifetime.end.p0i8(i64 28, i8* nonnull %232) #10
  %492 = icmp sgt i32 %491, 0
  br i1 %492, label %495, label %493

493:                                              ; preds = %656, %489
  %494 = load <2 x float>, <2 x float>* %255, align 16
  br label %669

495:                                              ; preds = %489, %656
  %496 = phi i32 [ %657, %656 ], [ %491, %489 ]
  %497 = phi i32 [ %659, %656 ], [ 0, %489 ]
  %498 = phi %struct.SkPoint* [ %658, %656 ], [ %490, %489 ]
  %499 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %498, i64 2, i32 0
  %500 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %498, i64 1, i32 0
  %501 = bitcast %struct.SkPoint* %498 to <2 x float>*
  %502 = load <2 x float>, <2 x float>* %501, align 4
  %503 = bitcast float* %499 to <2 x float>*
  %504 = load <2 x float>, <2 x float>* %503, align 4
  %505 = fadd <2 x float> %502, %504
  %506 = fmul <2 x float> %505, <float 5.000000e-01, float 5.000000e-01>
  %507 = bitcast float* %500 to <2 x float>*
  %508 = load <2 x float>, <2 x float>* %507, align 4
  %509 = fsub <2 x float> %506, %508
  %510 = call <2 x float> @llvm.fabs.v2f32(<2 x float> %509)
  %511 = call <2 x float> @llvm.ceil.v2f32(<2 x float> %510)
  %512 = fcmp olt <2 x float> %511, <float 0x41DFFFFFE0000000, float 0x41DFFFFFE0000000>
  %513 = select <2 x i1> %512, <2 x float> %511, <2 x float> <float 0x41DFFFFFE0000000, float 0x41DFFFFFE0000000>
  %514 = fcmp ogt <2 x float> %513, <float 0xC1DFFFFFE0000000, float 0xC1DFFFFFE0000000>
  %515 = select <2 x i1> %514, <2 x float> %513, <2 x float> <float 0xC1DFFFFFE0000000, float 0xC1DFFFFFE0000000>
  %516 = fptosi <2 x float> %515 to <2 x i32>
  %517 = extractelement <2 x i32> %516, i32 0
  %518 = extractelement <2 x i32> %516, i32 1
  %519 = icmp ugt i32 %517, %518
  %520 = lshr i32 %518, 1
  %521 = add i32 %520, %517
  %522 = lshr i32 %517, 1
  %523 = add i32 %522, %518
  %524 = select i1 %519, i32 %521, i32 %523
  %525 = call i32 @llvm.ctlz.i32(i32 %524, i1 false) #10, !range !9
  %526 = sub nuw nsw i32 33, %525
  %527 = ashr i32 %526, 1
  %528 = icmp slt i32 %527, 5
  %529 = select i1 %528, i32 %527, i32 5
  %530 = bitcast %struct.SkPoint* %498 to i64*
  %531 = load i64, i64* %530, align 1
  br i1 %237, label %532, label %543

532:                                              ; preds = %495
  %533 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %498, i64 1
  %534 = bitcast %struct.SkPoint* %533 to i64*
  %535 = load i64, i64* %534, align 1
  %536 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %498, i64 2
  %537 = bitcast %struct.SkPoint* %536 to i64*
  %538 = load i64, i64* %537, align 1
  %539 = insertelement <2 x i64> <i64 undef, i64 0>, i64 %531, i32 0
  %540 = insertelement <2 x i64> <i64 undef, i64 0>, i64 %535, i32 0
  %541 = bitcast <2 x i64> %540 to <4 x float>
  %542 = bitcast <2 x i64> %539 to <4 x float>
  br label %588

543:                                              ; preds = %495
  %544 = insertelement <2 x i64> <i64 undef, i64 0>, i64 %531, i32 0
  %545 = bitcast <2 x i64> %544 to <4 x float>
  %546 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %498, i64 1
  %547 = bitcast %struct.SkPoint* %546 to i64*
  %548 = load i64, i64* %547, align 1
  %549 = insertelement <2 x i64> <i64 undef, i64 0>, i64 %548, i32 0
  %550 = bitcast <2 x i64> %549 to <4 x float>
  %551 = call <4 x float> @llvm.x86.sse.min.ps(<4 x float> %545, <4 x float> %550) #10
  %552 = call <4 x float> @llvm.x86.sse.max.ps(<4 x float> %545, <4 x float> %550) #10
  %553 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %498, i64 2
  %554 = bitcast %struct.SkPoint* %553 to i64*
  %555 = load i64, i64* %554, align 1
  %556 = insertelement <2 x i64> <i64 undef, i64 0>, i64 %555, i32 0
  %557 = bitcast <2 x i64> %556 to <4 x float>
  %558 = call <4 x float> @llvm.x86.sse.min.ps(<4 x float> %551, <4 x float> %557) #10
  %559 = call <4 x float> @llvm.x86.sse.max.ps(<4 x float> %552, <4 x float> %557) #10
  %560 = load float, float* %238, align 8
  %561 = extractelement <4 x float> %559, i32 0
  %562 = fcmp olt float %560, %561
  br i1 %562, label %563, label %656

563:                                              ; preds = %543
  %564 = extractelement <4 x float> %558, i32 0
  %565 = load float, float* %239, align 8
  %566 = fcmp olt float %564, %565
  br i1 %566, label %567, label %656

567:                                              ; preds = %563
  %568 = load float, float* %240, align 4
  %569 = extractelement <4 x float> %559, i32 1
  %570 = fcmp olt float %568, %569
  br i1 %570, label %571, label %656

571:                                              ; preds = %567
  %572 = extractelement <4 x float> %558, i32 1
  %573 = load float, float* %241, align 4
  %574 = fcmp olt float %572, %573
  br i1 %574, label %575, label %656

575:                                              ; preds = %571
  %576 = load float, float* %242, align 4
  %577 = fcmp ugt float %561, %576
  br i1 %577, label %588, label %578

578:                                              ; preds = %575
  %579 = load float, float* %243, align 4
  %580 = fcmp ult float %564, %579
  br i1 %580, label %588, label %581

581:                                              ; preds = %578
  %582 = load float, float* %244, align 4
  %583 = fcmp ugt float %569, %582
  br i1 %583, label %588, label %584

584:                                              ; preds = %581
  %585 = load float, float* %245, align 4
  %586 = fcmp ult float %572, %585
  br i1 %586, label %588, label %587

587:                                              ; preds = %584
  br label %588

588:                                              ; preds = %587, %584, %581, %578, %575, %532
  %589 = phi <4 x float> [ %542, %532 ], [ %545, %584 ], [ %545, %575 ], [ %545, %578 ], [ %545, %581 ], [ %545, %587 ]
  %590 = phi <4 x float> [ %541, %532 ], [ %550, %584 ], [ %550, %575 ], [ %550, %578 ], [ %550, %581 ], [ %550, %587 ]
  %591 = phi i64 [ %538, %532 ], [ %555, %584 ], [ %555, %575 ], [ %555, %578 ], [ %555, %581 ], [ %555, %587 ]
  %592 = phi %class.SkRegion* [ %146, %532 ], [ %146, %584 ], [ %146, %575 ], [ %146, %578 ], [ %146, %581 ], [ null, %587 ]
  %593 = insertelement <2 x i64> undef, i64 %591, i32 0
  %594 = bitcast <2 x i64> %593 to <4 x float>
  %595 = fsub <4 x float> %590, %589
  %596 = fadd <4 x float> %595, %595
  %597 = fadd <4 x float> %590, %590
  %598 = fsub <4 x float> %594, %597
  %599 = fadd <4 x float> %589, %598
  %600 = shl i32 1, %529
  %601 = sitofp i32 %600 to float
  %602 = fdiv float 1.000000e+00, %601
  %603 = insertelement <4 x float> undef, float %602, i32 0
  %604 = shufflevector <4 x float> %603, <4 x float> undef, <4 x i32> zeroinitializer
  call void @llvm.lifetime.start.p0i8(i64 264, i8* nonnull %246) #10
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %246, i8 -1, i64 264, i1 false) #10
  store i64 %531, i64* %248, align 16
  %605 = icmp sgt i32 %600, 1
  br i1 %605, label %606, label %650

606:                                              ; preds = %588
  %607 = zext i32 %600 to i64
  %608 = add nsw i64 %607, -1
  %609 = and i64 %608, 1
  %610 = icmp eq i32 %529, 1
  br i1 %610, label %637, label %611

611:                                              ; preds = %606
  %612 = sub nsw i64 %608, %609
  br label %613

613:                                              ; preds = %613, %611
  %614 = phi i64 [ 1, %611 ], [ %634, %613 ]
  %615 = phi <4 x float> [ zeroinitializer, %611 ], [ %626, %613 ]
  %616 = phi i64 [ %612, %611 ], [ %635, %613 ]
  %617 = fadd <4 x float> %604, %615
  %618 = fmul <4 x float> %599, %617
  %619 = fadd <4 x float> %596, %618
  %620 = fmul <4 x float> %617, %619
  %621 = fadd <4 x float> %589, %620
  %622 = getelementptr inbounds [33 x %struct.SkPoint], [33 x %struct.SkPoint]* %6, i64 0, i64 %614
  %623 = shufflevector <4 x float> %621, <4 x float> undef, <2 x i32> <i32 0, i32 1>
  %624 = bitcast %struct.SkPoint* %622 to <2 x float>*
  store <2 x float> %623, <2 x float>* %624, align 8
  %625 = add nuw nsw i64 %614, 1
  %626 = fadd <4 x float> %604, %617
  %627 = fmul <4 x float> %599, %626
  %628 = fadd <4 x float> %596, %627
  %629 = fmul <4 x float> %626, %628
  %630 = fadd <4 x float> %589, %629
  %631 = getelementptr inbounds [33 x %struct.SkPoint], [33 x %struct.SkPoint]* %6, i64 0, i64 %625
  %632 = shufflevector <4 x float> %630, <4 x float> undef, <2 x i32> <i32 0, i32 1>
  %633 = bitcast %struct.SkPoint* %631 to <2 x float>*
  store <2 x float> %632, <2 x float>* %633, align 8
  %634 = add nuw nsw i64 %614, 2
  %635 = add i64 %616, -2
  %636 = icmp eq i64 %635, 0
  br i1 %636, label %637, label %613

637:                                              ; preds = %613, %606
  %638 = phi i64 [ 1, %606 ], [ %634, %613 ]
  %639 = phi <4 x float> [ zeroinitializer, %606 ], [ %626, %613 ]
  %640 = icmp eq i64 %609, 0
  br i1 %640, label %650, label %641

641:                                              ; preds = %637
  %642 = fadd <4 x float> %604, %639
  %643 = fmul <4 x float> %599, %642
  %644 = fadd <4 x float> %596, %643
  %645 = fmul <4 x float> %642, %644
  %646 = fadd <4 x float> %589, %645
  %647 = getelementptr inbounds [33 x %struct.SkPoint], [33 x %struct.SkPoint]* %6, i64 0, i64 %638
  %648 = shufflevector <4 x float> %646, <4 x float> undef, <2 x i32> <i32 0, i32 1>
  %649 = bitcast %struct.SkPoint* %647 to <2 x float>*
  store <2 x float> %648, <2 x float>* %649, align 8
  br label %650

650:                                              ; preds = %641, %637, %588
  %651 = sext i32 %600 to i64
  %652 = getelementptr inbounds [33 x %struct.SkPoint], [33 x %struct.SkPoint]* %6, i64 0, i64 %651
  %653 = bitcast %struct.SkPoint* %652 to i64*
  store i64 %591, i64* %653, align 8
  %654 = add nsw i32 %600, 1
  call void %3(%struct.SkPoint* nonnull %247, i32 %654, %class.SkRegion* %592, %class.SkBlitter* %147) #10
  call void @llvm.lifetime.end.p0i8(i64 264, i8* nonnull %246) #10
  %655 = load i32, i32* %228, align 8
  br label %656

656:                                              ; preds = %543, %563, %567, %571, %650
  %657 = phi i32 [ %496, %543 ], [ %496, %563 ], [ %496, %567 ], [ %496, %571 ], [ %655, %650 ]
  %658 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %498, i64 2
  %659 = add nuw nsw i32 %497, 1
  %660 = icmp slt i32 %659, %657
  br i1 %660, label %495, label %493

661:                                              ; preds = %298
  call void @_Z10extend_ptsILN7SkPaint3CapE2EEvN6SkPath4VerbES3_P7SkPointi(i32 %261, i32 %299, %struct.SkPoint* nonnull %214, i32 4)
  call fastcc void @_ZL9haircubicPK7SkPointPK8SkRegionPK6SkRectS7_P9SkBlitteriPFvS1_iS4_S9_E(%struct.SkPoint* nonnull %214, %class.SkRegion* %146, %struct.SkRect* %145, %struct.SkRect* %144, %class.SkBlitter* %147, void (%struct.SkPoint*, i32, %class.SkRegion*, %class.SkBlitter*)* %3)
  %662 = load <2 x float>, <2 x float>* %254, align 8
  br label %669

663:                                              ; preds = %298
  %664 = extractelement <2 x float> %266, i32 0
  store float %664, float* %215, align 16
  %665 = extractelement <2 x float> %266, i32 1
  store float %665, float* %216, align 4
  store float %262, float* %217, align 8
  store float %263, float* %218, align 4
  %666 = icmp eq i32 %261, 0
  br i1 %666, label %667, label %668

667:                                              ; preds = %663
  call void @_Z10extend_ptsILN7SkPaint3CapE2EEvN6SkPath4VerbES3_P7SkPointi(i32 0, i32 %299, %struct.SkPoint* nonnull %214, i32 2)
  br label %668

668:                                              ; preds = %667, %663
  call void %3(%struct.SkPoint* nonnull %214, i32 2, %class.SkRegion* %146, %class.SkBlitter* %147) #10
  br label %669

669:                                              ; preds = %465, %386, %382, %378, %358, %298, %668, %661, %493, %310, %306
  %670 = phi float [ %263, %298 ], [ %263, %668 ], [ %263, %661 ], [ %263, %493 ], [ %263, %310 ], [ %309, %306 ], [ %263, %358 ], [ %263, %378 ], [ %263, %382 ], [ %263, %386 ], [ %263, %465 ]
  %671 = phi float [ %262, %298 ], [ %262, %668 ], [ %262, %661 ], [ %262, %493 ], [ %262, %310 ], [ %308, %306 ], [ %262, %358 ], [ %262, %378 ], [ %262, %382 ], [ %262, %386 ], [ %262, %465 ]
  %672 = phi <2 x float> [ %266, %298 ], [ %266, %668 ], [ %662, %661 ], [ %494, %493 ], [ %311, %310 ], [ %307, %306 ], [ %377, %358 ], [ %377, %378 ], [ %377, %382 ], [ %377, %386 ], [ %470, %465 ]
  %673 = icmp eq i32 %261, 0
  %674 = add nsw i32 %289, -1
  %675 = icmp ult i32 %674, 4
  %676 = and i1 %673, %675
  %677 = load float, float* %215, align 16
  %678 = load float, float* %216, align 4
  %679 = select i1 %676, float %678, float %670
  %680 = select i1 %676, float %677, float %671
  br i1 %294, label %681, label %259

681:                                              ; preds = %669
  %682 = load %struct.SkPoint*, %struct.SkPoint** %235, align 8
  %683 = icmp eq %struct.SkPoint* %682, %230
  br i1 %683, label %686, label %684

684:                                              ; preds = %681
  %685 = bitcast %struct.SkPoint* %682 to i8*
  call void @_Z7sk_freePv(i8* %685) #10
  br label %686

686:                                              ; preds = %211, %681, %684
  call void @llvm.lifetime.end.p0i8(i64 152, i8* nonnull %222) #10
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %213) #10
  br label %687

687:                                              ; preds = %142, %686
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %24) #10
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %23) #10
  %688 = getelementptr inbounds %class.SkAAClipBlitterWrapper, %class.SkAAClipBlitterWrapper* %8, i64 0, i32 1
  call void @_ZN15SkAAClipBlitterD1Ev(%class.SkAAClipBlitter* %688) #10
  %689 = getelementptr inbounds %class.SkAAClipBlitterWrapper, %class.SkAAClipBlitterWrapper* %8, i64 0, i32 0
  call void @_ZN8SkRegionD1Ev(%class.SkRegion* nonnull %689) #10
  call void @llvm.lifetime.end.p0i8(i64 1160, i8* nonnull %22) #10
  br label %690

690:                                              ; preds = %4, %687
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN6SkScan18AntiHairSquarePathERK6SkPathRK12SkRasterClipP9SkBlitter(%class.SkPath* dereferenceable(16), %class.SkRasterClip* dereferenceable(72), %class.SkBlitter*) local_unnamed_addr #0 align 2 {
  tail call void @_Z9hair_pathILN7SkPaint3CapE2EEvRK6SkPathRK12SkRasterClipP9SkBlitterPFvPK7SkPointiPK8SkRegionS9_E(%class.SkPath* dereferenceable(16) %0, %class.SkRasterClip* dereferenceable(72) %1, %class.SkBlitter* %2, void (%struct.SkPoint*, i32, %class.SkRegion*, %class.SkBlitter*)* nonnull @_ZN6SkScan15AntiHairLineRgnEPK7SkPointiPK8SkRegionP9SkBlitter)
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN6SkScan13HairRoundPathERK6SkPathRK12SkRasterClipP9SkBlitter(%class.SkPath* dereferenceable(16), %class.SkRasterClip* dereferenceable(72), %class.SkBlitter*) local_unnamed_addr #0 align 2 {
  tail call void @_Z9hair_pathILN7SkPaint3CapE1EEvRK6SkPathRK12SkRasterClipP9SkBlitterPFvPK7SkPointiPK8SkRegionS9_E(%class.SkPath* dereferenceable(16) %0, %class.SkRasterClip* dereferenceable(72) %1, %class.SkBlitter* %2, void (%struct.SkPoint*, i32, %class.SkRegion*, %class.SkBlitter*)* nonnull @_ZN6SkScan11HairLineRgnEPK7SkPointiPK8SkRegionP9SkBlitter)
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_Z9hair_pathILN7SkPaint3CapE1EEvRK6SkPathRK12SkRasterClipP9SkBlitterPFvPK7SkPointiPK8SkRegionS9_E(%class.SkPath* dereferenceable(16), %class.SkRasterClip* dereferenceable(72), %class.SkBlitter*, void (%struct.SkPoint*, i32, %class.SkRegion*, %class.SkBlitter*)*) local_unnamed_addr #4 comdat {
  %5 = alloca %struct.SkConic, align 4
  %6 = alloca [33 x %struct.SkPoint], align 16
  %7 = alloca %struct.SkIRect, align 4
  %8 = alloca %class.SkAAClipBlitterWrapper, align 8
  %9 = alloca <4 x float>, align 16
  %10 = bitcast <4 x float>* %9 to %struct.SkRect*
  %11 = alloca %struct.SkRect, align 8
  %12 = alloca { i64, i64 }, align 8
  %13 = bitcast { i64, i64 }* %12 to %struct.SkIRect*
  %14 = alloca [4 x %struct.SkPoint], align 16
  %15 = alloca %class.SkAutoConicToQuads, align 8
  %16 = getelementptr inbounds %class.SkPath, %class.SkPath* %0, i64 0, i32 0, i32 0
  %17 = load %class.SkPathRef*, %class.SkPathRef** %16, align 8
  %18 = getelementptr inbounds %class.SkPathRef, %class.SkPathRef* %17, i64 0, i32 4, i32 2
  %19 = load i32, i32* %18, align 4
  %20 = icmp eq i32 %19, 0
  br i1 %20, label %690, label %21

21:                                               ; preds = %4
  %22 = bitcast %class.SkAAClipBlitterWrapper* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 1160, i8* nonnull %22) #10
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %22, i8 -86, i64 1160, i1 false)
  call void @_ZN22SkAAClipBlitterWrapperC1Ev(%class.SkAAClipBlitterWrapper* nonnull %8) #10
  %23 = bitcast <4 x float>* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %23) #10
  %24 = bitcast %struct.SkRect* %11 to i8*
  %25 = bitcast <4 x float>* %9 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %25, i8 -1, i64 16, i1 false)
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %24) #10
  %26 = getelementptr inbounds %struct.SkRect, %struct.SkRect* %11, i64 0, i32 2
  %27 = bitcast { i64, i64 }* %12 to i8*
  %28 = bitcast %struct.SkRect* %11 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %28, i8 -1, i64 16, i1 false)
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %27) #10
  %29 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %12, i64 0, i32 1
  %30 = bitcast { i64, i64 }* %12 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %30, i8 -86, i64 16, i1 false)
  %31 = load %class.SkPathRef*, %class.SkPathRef** %16, align 8
  %32 = getelementptr inbounds %class.SkPathRef, %class.SkPathRef* %31, i64 0, i32 9
  %33 = load i8, i8* %32, align 8
  %34 = icmp eq i8 %33, 0
  br i1 %34, label %44, label %35

35:                                               ; preds = %21
  %36 = getelementptr inbounds %class.SkPathRef, %class.SkPathRef* %31, i64 0, i32 1
  %37 = getelementptr inbounds %class.SkPathRef, %class.SkPathRef* %31, i64 0, i32 3, i32 0
  %38 = load %struct.SkPoint*, %struct.SkPoint** %37, align 8
  %39 = getelementptr inbounds %class.SkPathRef, %class.SkPathRef* %31, i64 0, i32 3, i32 2
  %40 = load i32, i32* %39, align 4
  %41 = call zeroext i1 @_ZN6SkRect14setBoundsCheckEPK7SkPointi(%struct.SkRect* %36, %struct.SkPoint* %38, i32 %40) #10
  %42 = getelementptr inbounds %class.SkPathRef, %class.SkPathRef* %31, i64 0, i32 10
  %43 = zext i1 %41 to i8
  store i8 %43, i8* %42, align 1
  store i8 0, i8* %32, align 8
  br label %44

44:                                               ; preds = %21, %35
  %45 = getelementptr inbounds %class.SkPathRef, %class.SkPathRef* %31, i64 0, i32 1, i32 0
  %46 = load float, float* %45, align 4
  %47 = call float @llvm.floor.f32(float %46) #10
  %48 = fcmp olt float %47, 0x41DFFFFFE0000000
  %49 = select i1 %48, float %47, float 0x41DFFFFFE0000000
  %50 = fcmp ogt float %49, 0xC1DFFFFFE0000000
  %51 = select i1 %50, float %49, float 0xC1DFFFFFE0000000
  %52 = fptosi float %51 to i32
  %53 = getelementptr inbounds %class.SkPathRef, %class.SkPathRef* %31, i64 0, i32 1, i32 1
  %54 = load float, float* %53, align 4
  %55 = call float @llvm.floor.f32(float %54) #10
  %56 = fcmp olt float %55, 0x41DFFFFFE0000000
  %57 = select i1 %56, float %55, float 0x41DFFFFFE0000000
  %58 = fcmp ogt float %57, 0xC1DFFFFFE0000000
  %59 = select i1 %58, float %57, float 0xC1DFFFFFE0000000
  %60 = fptosi float %59 to i32
  %61 = getelementptr inbounds %class.SkPathRef, %class.SkPathRef* %31, i64 0, i32 1, i32 2
  %62 = load float, float* %61, align 4
  %63 = call float @llvm.ceil.f32(float %62) #10
  %64 = fcmp olt float %63, 0x41DFFFFFE0000000
  %65 = select i1 %64, float %63, float 0x41DFFFFFE0000000
  %66 = fcmp ogt float %65, 0xC1DFFFFFE0000000
  %67 = select i1 %66, float %65, float 0xC1DFFFFFE0000000
  %68 = fptosi float %67 to i32
  %69 = getelementptr inbounds %class.SkPathRef, %class.SkPathRef* %31, i64 0, i32 1, i32 3
  %70 = load float, float* %69, align 4
  %71 = call float @llvm.ceil.f32(float %70) #10
  %72 = fcmp olt float %71, 0x41DFFFFFE0000000
  %73 = select i1 %72, float %71, float 0x41DFFFFFE0000000
  %74 = fcmp ogt float %73, 0xC1DFFFFFE0000000
  %75 = select i1 %74, float %73, float 0xC1DFFFFFE0000000
  %76 = fptosi float %75 to i32
  %77 = sext i32 %52 to i64
  %78 = icmp sgt i64 %77, -2147483645
  %79 = select i1 %78, i64 %77, i64 -2147483645
  %80 = add nsw i64 %79, 4294967294
  %81 = sext i32 %60 to i64
  %82 = icmp sgt i64 %81, -2147483645
  %83 = select i1 %82, i64 %81, i64 -2147483645
  %84 = sext i32 %68 to i64
  %85 = icmp slt i64 %84, 2147483645
  %86 = select i1 %85, i64 %84, i64 2147483645
  %87 = add nsw i64 %86, 2
  %88 = sext i32 %76 to i64
  %89 = icmp slt i64 %88, 2147483645
  %90 = select i1 %89, i64 %88, i64 2147483645
  %91 = shl nsw i64 %83, 32
  %92 = add i64 %91, -8589934592
  %93 = and i64 %80, 4294967295
  %94 = or i64 %92, %93
  %95 = shl nsw i64 %90, 32
  %96 = add i64 %95, 8589934592
  %97 = and i64 %87, 4294967295
  %98 = or i64 %96, %97
  %99 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %12, i64 0, i32 0
  store i64 %94, i64* %99, align 8
  store i64 %98, i64* %29, align 8
  %100 = call dereferenceable(16) %struct.SkIRect* @_ZNK12SkRasterClip9getBoundsEv(%class.SkRasterClip* %1) #10
  %101 = bitcast %struct.SkIRect* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %101) #10
  call void @llvm.memset.p0i8.i64(i8* nonnull align 4 %101, i8 -86, i64 16, i1 false) #10
  %102 = call zeroext i1 @_ZN7SkIRect9intersectERKS_S1_(%struct.SkIRect* nonnull %7, %struct.SkIRect* dereferenceable(16) %100, %struct.SkIRect* nonnull dereferenceable(16) %13) #10
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %101) #10
  br i1 %102, label %103, label %142

103:                                              ; preds = %44
  %104 = call zeroext i1 @_ZNK12SkRasterClip13quickContainsERK7SkIRect(%class.SkRasterClip* %1, %struct.SkIRect* nonnull dereferenceable(16) %13) #10
  br i1 %104, label %143, label %105

105:                                              ; preds = %103
  %106 = getelementptr inbounds %class.SkRasterClip, %class.SkRasterClip* %1, i64 0, i32 2
  %107 = load i8, i8* %106, align 8, !range !2
  %108 = icmp eq i8 %107, 0
  br i1 %108, label %111, label %109

109:                                              ; preds = %105
  %110 = getelementptr inbounds %class.SkRasterClip, %class.SkRasterClip* %1, i64 0, i32 0
  br label %116

111:                                              ; preds = %105
  call void @_ZN22SkAAClipBlitterWrapper4initERK12SkRasterClipP9SkBlitter(%class.SkAAClipBlitterWrapper* nonnull %8, %class.SkRasterClip* dereferenceable(72) %1, %class.SkBlitter* %2) #10
  %112 = getelementptr inbounds %class.SkAAClipBlitterWrapper, %class.SkAAClipBlitterWrapper* %8, i64 0, i32 3
  %113 = load %class.SkBlitter*, %class.SkBlitter** %112, align 8
  %114 = getelementptr inbounds %class.SkAAClipBlitterWrapper, %class.SkAAClipBlitterWrapper* %8, i64 0, i32 2
  %115 = load %class.SkRegion*, %class.SkRegion** %114, align 8
  br label %116

116:                                              ; preds = %111, %109
  %117 = phi %class.SkRegion* [ %110, %109 ], [ %115, %111 ]
  %118 = phi %class.SkBlitter* [ %2, %109 ], [ %113, %111 ]
  %119 = bitcast %class.SkRegion* %117 to <4 x i32>*
  %120 = load <4 x i32>, <4 x i32>* %119, align 4
  %121 = sitofp <4 x i32> %120 to <4 x float>
  %122 = shufflevector <4 x float> %121, <4 x float> undef, <2 x i32> <i32 0, i32 1>
  %123 = fadd <2 x float> %122, <float -1.000000e+00, float -1.000000e+00>
  %124 = shufflevector <4 x float> %121, <4 x float> undef, <2 x i32> <i32 2, i32 3>
  %125 = fadd <2 x float> %124, <float 1.000000e+00, float 1.000000e+00>
  %126 = bitcast %struct.SkRect* %11 to <2 x float>*
  store <2 x float> %123, <2 x float>* %126, align 8
  %127 = bitcast float* %26 to <2 x float>*
  store <2 x float> %125, <2 x float>* %127, align 8
  %128 = fadd <4 x float> %121, <float 1.000000e+00, float 1.000000e+00, float -1.000000e+00, float -1.000000e+00>
  store <4 x float> %128, <4 x float>* %9, align 16
  %129 = extractelement <4 x float> %128, i32 0
  %130 = extractelement <4 x float> %128, i32 2
  %131 = fcmp ogt float %129, %130
  %132 = extractelement <4 x float> %128, i32 1
  %133 = extractelement <4 x float> %128, i32 3
  %134 = fcmp ogt float %132, %133
  %135 = or i1 %131, %134
  br i1 %135, label %136, label %137

136:                                              ; preds = %116
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %23, i8 0, i64 16, i1 false) #10
  br label %137

137:                                              ; preds = %116, %136
  %138 = getelementptr inbounds %class.SkRasterClip, %class.SkRasterClip* %1, i64 0, i32 4
  %139 = load i8, i8* %138, align 2, !range !2
  %140 = icmp eq i8 %139, 0
  %141 = select i1 %140, %struct.SkRect* null, %struct.SkRect* %10
  br label %143

142:                                              ; preds = %44
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %27) #10
  br label %687

143:                                              ; preds = %137, %103
  %144 = phi %struct.SkRect* [ %11, %137 ], [ null, %103 ]
  %145 = phi %struct.SkRect* [ %141, %137 ], [ null, %103 ]
  %146 = phi %class.SkRegion* [ %117, %137 ], [ null, %103 ]
  %147 = phi %class.SkBlitter* [ %118, %137 ], [ %2, %103 ]
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %27) #10
  %148 = load %class.SkPathRef*, %class.SkPathRef** %16, align 8
  %149 = getelementptr inbounds %class.SkPathRef, %class.SkPathRef* %148, i64 0, i32 4, i32 0
  %150 = load i8*, i8** %149, align 8
  %151 = getelementptr inbounds %class.SkPathRef, %class.SkPathRef* %148, i64 0, i32 9
  %152 = load i8, i8* %151, align 8
  %153 = icmp eq i8 %152, 0
  br i1 %153, label %154, label %161

154:                                              ; preds = %143
  %155 = getelementptr inbounds %class.SkPathRef, %class.SkPathRef* %148, i64 0, i32 3, i32 0
  %156 = bitcast %struct.SkPoint** %155 to i64*
  %157 = load i64, i64* %156, align 8
  %158 = getelementptr inbounds %class.SkPathRef, %class.SkPathRef* %148, i64 0, i32 5, i32 0
  %159 = bitcast float** %158 to i64*
  %160 = load i64, i64* %159, align 8
  br label %180

161:                                              ; preds = %143
  %162 = getelementptr inbounds %class.SkPathRef, %class.SkPathRef* %148, i64 0, i32 1
  %163 = getelementptr inbounds %class.SkPathRef, %class.SkPathRef* %148, i64 0, i32 3, i32 0
  %164 = load %struct.SkPoint*, %struct.SkPoint** %163, align 8
  %165 = getelementptr inbounds %class.SkPathRef, %class.SkPathRef* %148, i64 0, i32 3, i32 2
  %166 = load i32, i32* %165, align 4
  %167 = call zeroext i1 @_ZN6SkRect14setBoundsCheckEPK7SkPointi(%struct.SkRect* %162, %struct.SkPoint* %164, i32 %166) #10
  %168 = getelementptr inbounds %class.SkPathRef, %class.SkPathRef* %148, i64 0, i32 10
  %169 = zext i1 %167 to i8
  store i8 %169, i8* %168, align 1
  store i8 0, i8* %151, align 8
  %170 = load %class.SkPathRef*, %class.SkPathRef** %16, align 8
  %171 = getelementptr inbounds %class.SkPathRef, %class.SkPathRef* %170, i64 0, i32 9
  %172 = load i8, i8* %171, align 8
  %173 = icmp eq i8 %172, 0
  %174 = getelementptr inbounds %class.SkPathRef, %class.SkPathRef* %170, i64 0, i32 3, i32 0
  %175 = bitcast %struct.SkPoint** %174 to i64*
  %176 = load i64, i64* %175, align 8
  %177 = getelementptr inbounds %class.SkPathRef, %class.SkPathRef* %170, i64 0, i32 5, i32 0
  %178 = bitcast float** %177 to i64*
  %179 = load i64, i64* %178, align 8
  br i1 %173, label %180, label %186

180:                                              ; preds = %154, %161
  %181 = phi i64 [ %160, %154 ], [ %179, %161 ]
  %182 = phi i64 [ %157, %154 ], [ %176, %161 ]
  %183 = phi %class.SkPathRef* [ %148, %154 ], [ %170, %161 ]
  %184 = getelementptr inbounds %class.SkPathRef, %class.SkPathRef* %183, i64 0, i32 10
  %185 = load i8, i8* %184, align 1, !range !2
  br label %196

186:                                              ; preds = %161
  %187 = inttoptr i64 %176 to %struct.SkPoint*
  %188 = getelementptr inbounds %class.SkPathRef, %class.SkPathRef* %170, i64 0, i32 9
  %189 = getelementptr inbounds %class.SkPathRef, %class.SkPathRef* %170, i64 0, i32 1
  %190 = getelementptr inbounds %class.SkPathRef, %class.SkPathRef* %170, i64 0, i32 3, i32 2
  %191 = load i32, i32* %190, align 4
  %192 = call zeroext i1 @_ZN6SkRect14setBoundsCheckEPK7SkPointi(%struct.SkRect* %189, %struct.SkPoint* %187, i32 %191) #10
  %193 = getelementptr inbounds %class.SkPathRef, %class.SkPathRef* %170, i64 0, i32 10
  %194 = zext i1 %192 to i8
  store i8 %194, i8* %193, align 1
  store i8 0, i8* %188, align 8
  %195 = load %class.SkPathRef*, %class.SkPathRef** %16, align 8
  br label %196

196:                                              ; preds = %186, %180
  %197 = phi i64 [ %181, %180 ], [ %179, %186 ]
  %198 = phi i64 [ %182, %180 ], [ %176, %186 ]
  %199 = phi %class.SkPathRef* [ %183, %180 ], [ %195, %186 ]
  %200 = phi i8 [ %185, %180 ], [ %194, %186 ]
  %201 = getelementptr inbounds %class.SkPathRef, %class.SkPathRef* %199, i64 0, i32 4, i32 0
  %202 = load i8*, i8** %201, align 8
  %203 = icmp eq i8 %200, 0
  br i1 %203, label %211, label %204

204:                                              ; preds = %196
  %205 = icmp eq i8* %202, null
  br i1 %205, label %211, label %206

206:                                              ; preds = %204
  %207 = getelementptr inbounds %class.SkPathRef, %class.SkPathRef* %199, i64 0, i32 4, i32 2
  %208 = load i32, i32* %207, align 4
  %209 = sext i32 %208 to i64
  %210 = getelementptr inbounds i8, i8* %202, i64 %209
  br label %211

211:                                              ; preds = %196, %204, %206
  %212 = phi i8* [ %210, %206 ], [ null, %204 ], [ %202, %196 ]
  %213 = bitcast [4 x %struct.SkPoint]* %14 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %213) #10
  %214 = getelementptr inbounds [4 x %struct.SkPoint], [4 x %struct.SkPoint]* %14, i64 0, i64 0
  %215 = getelementptr inbounds [4 x %struct.SkPoint], [4 x %struct.SkPoint]* %14, i64 0, i64 0, i32 0
  %216 = getelementptr inbounds [4 x %struct.SkPoint], [4 x %struct.SkPoint]* %14, i64 0, i64 0, i32 1
  %217 = getelementptr inbounds [4 x %struct.SkPoint], [4 x %struct.SkPoint]* %14, i64 0, i64 1, i32 0
  %218 = getelementptr inbounds [4 x %struct.SkPoint], [4 x %struct.SkPoint]* %14, i64 0, i64 1, i32 1
  %219 = getelementptr inbounds [4 x %struct.SkPoint], [4 x %struct.SkPoint]* %14, i64 0, i64 2, i32 0
  %220 = getelementptr inbounds [4 x %struct.SkPoint], [4 x %struct.SkPoint]* %14, i64 0, i64 2, i32 1
  %221 = getelementptr inbounds [4 x %struct.SkPoint], [4 x %struct.SkPoint]* %14, i64 0, i64 3, i32 0
  %222 = bitcast %class.SkAutoConicToQuads* %15 to i8*
  %223 = bitcast [4 x %struct.SkPoint]* %14 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %223, i8 -1, i64 32, i1 false)
  call void @llvm.lifetime.start.p0i8(i64 152, i8* nonnull %222) #10
  %224 = getelementptr inbounds %class.SkAutoConicToQuads, %class.SkAutoConicToQuads* %15, i64 0, i32 0, i32 1
  %225 = bitcast %union.anon* %224 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %225, i8 -86, i64 144, i1 false)
  %226 = getelementptr inbounds %class.SkAutoConicToQuads, %class.SkAutoConicToQuads* %15, i64 0, i32 0, i32 1
  %227 = bitcast %class.SkAutoConicToQuads* %15 to %union.anon**
  store %union.anon* %226, %union.anon** %227, align 8
  %228 = getelementptr inbounds %class.SkAutoConicToQuads, %class.SkAutoConicToQuads* %15, i64 0, i32 1
  store i32 0, i32* %228, align 8
  %229 = icmp eq i8* %212, %150
  %230 = bitcast %union.anon* %226 to %struct.SkPoint*
  br i1 %229, label %686, label %231

231:                                              ; preds = %211
  %232 = bitcast %struct.SkConic* %5 to i8*
  %233 = getelementptr inbounds %struct.SkConic, %struct.SkConic* %5, i64 0, i32 1
  %234 = bitcast float* %233 to i32*
  %235 = getelementptr inbounds %class.SkAutoConicToQuads, %class.SkAutoConicToQuads* %15, i64 0, i32 0, i32 0
  %236 = bitcast %class.SkAutoConicToQuads* %15 to i8**
  %237 = icmp eq %struct.SkRect* %145, null
  %238 = getelementptr inbounds %struct.SkRect, %struct.SkRect* %144, i64 0, i32 0
  %239 = getelementptr inbounds %struct.SkRect, %struct.SkRect* %144, i64 0, i32 2
  %240 = getelementptr inbounds %struct.SkRect, %struct.SkRect* %144, i64 0, i32 1
  %241 = getelementptr inbounds %struct.SkRect, %struct.SkRect* %144, i64 0, i32 3
  %242 = getelementptr inbounds %struct.SkRect, %struct.SkRect* %145, i64 0, i32 2
  %243 = getelementptr inbounds %struct.SkRect, %struct.SkRect* %145, i64 0, i32 0
  %244 = getelementptr inbounds %struct.SkRect, %struct.SkRect* %145, i64 0, i32 3
  %245 = getelementptr inbounds %struct.SkRect, %struct.SkRect* %145, i64 0, i32 1
  %246 = bitcast [33 x %struct.SkPoint]* %6 to i8*
  %247 = getelementptr inbounds [33 x %struct.SkPoint], [33 x %struct.SkPoint]* %6, i64 0, i64 0
  %248 = bitcast [33 x %struct.SkPoint]* %6 to i64*
  %249 = bitcast [4 x %struct.SkPoint]* %14 to i64*
  %250 = getelementptr inbounds [4 x %struct.SkPoint], [4 x %struct.SkPoint]* %14, i64 0, i64 1
  %251 = bitcast %struct.SkPoint* %250 to i64*
  %252 = getelementptr inbounds [4 x %struct.SkPoint], [4 x %struct.SkPoint]* %14, i64 0, i64 2
  %253 = bitcast %struct.SkPoint* %252 to i64*
  %254 = bitcast float* %221 to <2 x float>*
  %255 = bitcast float* %219 to <2 x float>*
  %256 = bitcast float* %219 to <2 x float>*
  %257 = bitcast float* %217 to <2 x float>*
  %258 = bitcast [4 x %struct.SkPoint]* %14 to <2 x float>*
  br label %259

259:                                              ; preds = %231, %669
  %260 = phi i8* [ %150, %231 ], [ %268, %669 ]
  %261 = phi i32 [ 6, %231 ], [ %289, %669 ]
  %262 = phi float [ 0xFFFFFFFFE0000000, %231 ], [ %680, %669 ]
  %263 = phi float [ 0xFFFFFFFFE0000000, %231 ], [ %679, %669 ]
  %264 = phi i64 [ %197, %231 ], [ %290, %669 ]
  %265 = phi i64 [ %198, %231 ], [ %291, %669 ]
  %266 = phi <2 x float> [ <float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000>, %231 ], [ %672, %669 ]
  %267 = inttoptr i64 %265 to %struct.SkPoint*
  %268 = getelementptr inbounds i8, i8* %260, i64 1
  %269 = load i8, i8* %260, align 1, !noalias !16
  switch i8 %269, label %276 [
    i8 0, label %283
    i8 1, label %283
    i8 2, label %270
    i8 3, label %277
    i8 4, label %273
    i8 5, label %288
  ]

270:                                              ; preds = %259
  %271 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %267, i64 2
  %272 = ptrtoint %struct.SkPoint* %271 to i64
  br label %288

273:                                              ; preds = %259
  %274 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %267, i64 3
  %275 = ptrtoint %struct.SkPoint* %274 to i64
  br label %288

276:                                              ; preds = %259
  call void @llvm.trap() #10, !noalias !16
  unreachable

277:                                              ; preds = %259
  %278 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %267, i64 2
  %279 = ptrtoint %struct.SkPoint* %278 to i64
  %280 = inttoptr i64 %264 to float*
  %281 = getelementptr inbounds float, float* %280, i64 1
  %282 = ptrtoint float* %281 to i64
  br label %288

283:                                              ; preds = %259, %259
  %284 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %267, i64 1
  %285 = ptrtoint %struct.SkPoint* %284 to i64
  switch i8 %269, label %287 [
    i8 0, label %288
    i8 1, label %286
  ]

286:                                              ; preds = %283
  br label %288

287:                                              ; preds = %283
  call void @llvm.trap() #10, !noalias !19
  unreachable

288:                                              ; preds = %259, %283, %286, %270, %277, %273
  %289 = phi i32 [ 4, %273 ], [ 3, %277 ], [ 2, %270 ], [ 1, %286 ], [ 0, %283 ], [ 5, %259 ]
  %290 = phi i64 [ %264, %273 ], [ %282, %277 ], [ %264, %270 ], [ %264, %286 ], [ %264, %283 ], [ %264, %259 ]
  %291 = phi i64 [ %275, %273 ], [ %279, %277 ], [ %272, %270 ], [ %285, %286 ], [ %285, %283 ], [ %265, %259 ]
  %292 = phi i64 [ -1, %273 ], [ -1, %277 ], [ -1, %270 ], [ -1, %286 ], [ 0, %283 ], [ -1, %259 ]
  %293 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %267, i64 %292
  %294 = icmp eq i8* %268, %212
  br i1 %294, label %298, label %295

295:                                              ; preds = %288
  %296 = load i8, i8* %268, align 1
  %297 = zext i8 %296 to i32
  br label %298

298:                                              ; preds = %288, %295
  %299 = phi i32 [ %297, %295 ], [ 6, %288 ]
  %300 = bitcast %struct.SkPoint* %293 to i8*
  %301 = zext i32 %289 to i64
  %302 = getelementptr inbounds [7 x i8], [7 x i8]* @_ZZN10SkPathPriv9PtsInIterEjE10gPtsInVerb, i64 0, i64 %301
  %303 = load i8, i8* %302, align 1
  %304 = zext i8 %303 to i64
  %305 = shl nuw nsw i64 %304, 3
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 16 %213, i8* align 4 %300, i64 %305, i1 false)
  switch i32 %289, label %669 [
    i32 0, label %306
    i32 1, label %310
    i32 2, label %312
    i32 3, label %471
    i32 4, label %661
    i32 5, label %663
  ]

306:                                              ; preds = %298
  %307 = load <2 x float>, <2 x float>* %258, align 16
  %308 = extractelement <2 x float> %307, i32 0
  %309 = extractelement <2 x float> %307, i32 1
  br label %669

310:                                              ; preds = %298
  call void @_Z10extend_ptsILN7SkPaint3CapE1EEvN6SkPath4VerbES3_P7SkPointi(i32 %261, i32 %299, %struct.SkPoint* nonnull %214, i32 2)
  call void %3(%struct.SkPoint* nonnull %214, i32 2, %class.SkRegion* %146, %class.SkBlitter* %147) #10
  %311 = load <2 x float>, <2 x float>* %257, align 8
  br label %669

312:                                              ; preds = %298
  call void @_Z10extend_ptsILN7SkPaint3CapE1EEvN6SkPath4VerbES3_P7SkPointi(i32 %261, i32 %299, %struct.SkPoint* nonnull %214, i32 3)
  %313 = load float, float* %215, align 16
  %314 = load float, float* %219, align 16
  %315 = fadd float %313, %314
  %316 = fmul float %315, 5.000000e-01
  %317 = load float, float* %217, align 8
  %318 = fsub float %316, %317
  %319 = load float, float* %216, align 4
  %320 = load float, float* %220, align 4
  %321 = fadd float %319, %320
  %322 = fmul float %321, 5.000000e-01
  %323 = load float, float* %218, align 4
  %324 = fsub float %322, %323
  %325 = call float @llvm.fabs.f32(float %318) #10
  %326 = call float @llvm.fabs.f32(float %324) #10
  %327 = call float @llvm.ceil.f32(float %325) #10
  %328 = fcmp olt float %327, 0x41DFFFFFE0000000
  %329 = select i1 %328, float %327, float 0x41DFFFFFE0000000
  %330 = fcmp ogt float %329, 0xC1DFFFFFE0000000
  %331 = select i1 %330, float %329, float 0xC1DFFFFFE0000000
  %332 = fptosi float %331 to i32
  %333 = call float @llvm.ceil.f32(float %326) #10
  %334 = fcmp olt float %333, 0x41DFFFFFE0000000
  %335 = select i1 %334, float %333, float 0x41DFFFFFE0000000
  %336 = fcmp ogt float %335, 0xC1DFFFFFE0000000
  %337 = select i1 %336, float %335, float 0xC1DFFFFFE0000000
  %338 = fptosi float %337 to i32
  %339 = icmp ugt i32 %332, %338
  %340 = lshr i32 %338, 1
  %341 = add i32 %340, %332
  %342 = lshr i32 %332, 1
  %343 = add i32 %342, %338
  %344 = select i1 %339, i32 %341, i32 %343
  %345 = call i32 @llvm.ctlz.i32(i32 %344, i1 false) #10, !range !9
  %346 = sub nuw nsw i32 33, %345
  %347 = ashr i32 %346, 1
  %348 = icmp slt i32 %347, 5
  %349 = select i1 %348, i32 %347, i32 5
  %350 = load i64, i64* %249, align 16
  br i1 %237, label %351, label %358

351:                                              ; preds = %312
  %352 = load i64, i64* %251, align 8
  %353 = load i64, i64* %253, align 16
  %354 = insertelement <2 x i64> <i64 undef, i64 0>, i64 %350, i32 0
  %355 = insertelement <2 x i64> <i64 undef, i64 0>, i64 %352, i32 0
  %356 = bitcast <2 x i64> %355 to <4 x float>
  %357 = bitcast <2 x i64> %354 to <4 x float>
  br label %403

358:                                              ; preds = %312
  %359 = insertelement <2 x i64> <i64 undef, i64 0>, i64 %350, i32 0
  %360 = bitcast <2 x i64> %359 to <4 x float>
  %361 = load i64, i64* %251, align 8
  %362 = insertelement <2 x i64> <i64 undef, i64 0>, i64 %361, i32 0
  %363 = bitcast <2 x i64> %362 to <4 x float>
  %364 = call <4 x float> @llvm.x86.sse.min.ps(<4 x float> %360, <4 x float> %363) #10
  %365 = call <4 x float> @llvm.x86.sse.max.ps(<4 x float> %360, <4 x float> %363) #10
  %366 = load i64, i64* %253, align 16
  %367 = insertelement <2 x i64> <i64 undef, i64 0>, i64 %366, i32 0
  %368 = bitcast <2 x i64> %367 to <4 x float>
  %369 = call <4 x float> @llvm.x86.sse.min.ps(<4 x float> %364, <4 x float> %368) #10
  %370 = call <4 x float> @llvm.x86.sse.max.ps(<4 x float> %365, <4 x float> %368) #10
  %371 = load float, float* %238, align 8
  %372 = extractelement <4 x float> %370, i32 0
  %373 = fcmp olt float %371, %372
  %374 = trunc i64 %366 to i32
  %375 = bitcast i32 %374 to float
  %376 = insertelement <2 x float> undef, float %375, i32 0
  %377 = insertelement <2 x float> %376, float %320, i32 1
  br i1 %373, label %378, label %669

378:                                              ; preds = %358
  %379 = extractelement <4 x float> %369, i32 0
  %380 = load float, float* %239, align 8
  %381 = fcmp olt float %379, %380
  br i1 %381, label %382, label %669

382:                                              ; preds = %378
  %383 = load float, float* %240, align 4
  %384 = extractelement <4 x float> %370, i32 1
  %385 = fcmp olt float %383, %384
  br i1 %385, label %386, label %669

386:                                              ; preds = %382
  %387 = extractelement <4 x float> %369, i32 1
  %388 = load float, float* %241, align 4
  %389 = fcmp olt float %387, %388
  br i1 %389, label %390, label %669

390:                                              ; preds = %386
  %391 = load float, float* %242, align 4
  %392 = fcmp ugt float %372, %391
  br i1 %392, label %403, label %393

393:                                              ; preds = %390
  %394 = load float, float* %243, align 4
  %395 = fcmp ult float %379, %394
  br i1 %395, label %403, label %396

396:                                              ; preds = %393
  %397 = load float, float* %244, align 4
  %398 = fcmp ugt float %384, %397
  br i1 %398, label %403, label %399

399:                                              ; preds = %396
  %400 = load float, float* %245, align 4
  %401 = fcmp ult float %387, %400
  br i1 %401, label %403, label %402

402:                                              ; preds = %399
  br label %403

403:                                              ; preds = %402, %399, %396, %393, %390, %351
  %404 = phi <4 x float> [ %357, %351 ], [ %360, %399 ], [ %360, %390 ], [ %360, %393 ], [ %360, %396 ], [ %360, %402 ]
  %405 = phi <4 x float> [ %356, %351 ], [ %363, %399 ], [ %363, %390 ], [ %363, %393 ], [ %363, %396 ], [ %363, %402 ]
  %406 = phi i64 [ %353, %351 ], [ %366, %399 ], [ %366, %390 ], [ %366, %393 ], [ %366, %396 ], [ %366, %402 ]
  %407 = phi %class.SkRegion* [ %146, %351 ], [ %146, %399 ], [ %146, %390 ], [ %146, %393 ], [ %146, %396 ], [ null, %402 ]
  %408 = insertelement <2 x i64> undef, i64 %406, i32 0
  %409 = bitcast <2 x i64> %408 to <4 x float>
  %410 = fsub <4 x float> %405, %404
  %411 = fadd <4 x float> %410, %410
  %412 = fadd <4 x float> %405, %405
  %413 = fsub <4 x float> %409, %412
  %414 = fadd <4 x float> %404, %413
  %415 = shl i32 1, %349
  %416 = sitofp i32 %415 to float
  %417 = fdiv float 1.000000e+00, %416
  %418 = insertelement <4 x float> undef, float %417, i32 0
  %419 = shufflevector <4 x float> %418, <4 x float> undef, <4 x i32> zeroinitializer
  call void @llvm.lifetime.start.p0i8(i64 264, i8* nonnull %246) #10
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %246, i8 -1, i64 264, i1 false) #10
  store i64 %350, i64* %248, align 16
  %420 = icmp sgt i32 %415, 1
  br i1 %420, label %421, label %465

421:                                              ; preds = %403
  %422 = zext i32 %415 to i64
  %423 = add nsw i64 %422, -1
  %424 = and i64 %423, 1
  %425 = icmp eq i32 %349, 1
  br i1 %425, label %452, label %426

426:                                              ; preds = %421
  %427 = sub nsw i64 %423, %424
  br label %428

428:                                              ; preds = %428, %426
  %429 = phi i64 [ 1, %426 ], [ %449, %428 ]
  %430 = phi <4 x float> [ zeroinitializer, %426 ], [ %441, %428 ]
  %431 = phi i64 [ %427, %426 ], [ %450, %428 ]
  %432 = fadd <4 x float> %419, %430
  %433 = fmul <4 x float> %414, %432
  %434 = fadd <4 x float> %411, %433
  %435 = fmul <4 x float> %432, %434
  %436 = fadd <4 x float> %404, %435
  %437 = getelementptr inbounds [33 x %struct.SkPoint], [33 x %struct.SkPoint]* %6, i64 0, i64 %429
  %438 = shufflevector <4 x float> %436, <4 x float> undef, <2 x i32> <i32 0, i32 1>
  %439 = bitcast %struct.SkPoint* %437 to <2 x float>*
  store <2 x float> %438, <2 x float>* %439, align 8
  %440 = add nuw nsw i64 %429, 1
  %441 = fadd <4 x float> %419, %432
  %442 = fmul <4 x float> %414, %441
  %443 = fadd <4 x float> %411, %442
  %444 = fmul <4 x float> %441, %443
  %445 = fadd <4 x float> %404, %444
  %446 = getelementptr inbounds [33 x %struct.SkPoint], [33 x %struct.SkPoint]* %6, i64 0, i64 %440
  %447 = shufflevector <4 x float> %445, <4 x float> undef, <2 x i32> <i32 0, i32 1>
  %448 = bitcast %struct.SkPoint* %446 to <2 x float>*
  store <2 x float> %447, <2 x float>* %448, align 8
  %449 = add nuw nsw i64 %429, 2
  %450 = add i64 %431, -2
  %451 = icmp eq i64 %450, 0
  br i1 %451, label %452, label %428

452:                                              ; preds = %428, %421
  %453 = phi i64 [ 1, %421 ], [ %449, %428 ]
  %454 = phi <4 x float> [ zeroinitializer, %421 ], [ %441, %428 ]
  %455 = icmp eq i64 %424, 0
  br i1 %455, label %465, label %456

456:                                              ; preds = %452
  %457 = fadd <4 x float> %419, %454
  %458 = fmul <4 x float> %414, %457
  %459 = fadd <4 x float> %411, %458
  %460 = fmul <4 x float> %457, %459
  %461 = fadd <4 x float> %404, %460
  %462 = getelementptr inbounds [33 x %struct.SkPoint], [33 x %struct.SkPoint]* %6, i64 0, i64 %453
  %463 = shufflevector <4 x float> %461, <4 x float> undef, <2 x i32> <i32 0, i32 1>
  %464 = bitcast %struct.SkPoint* %462 to <2 x float>*
  store <2 x float> %463, <2 x float>* %464, align 8
  br label %465

465:                                              ; preds = %456, %452, %403
  %466 = sext i32 %415 to i64
  %467 = getelementptr inbounds [33 x %struct.SkPoint], [33 x %struct.SkPoint]* %6, i64 0, i64 %466
  %468 = bitcast %struct.SkPoint* %467 to i64*
  store i64 %406, i64* %468, align 8
  %469 = add nsw i32 %415, 1
  call void %3(%struct.SkPoint* nonnull %247, i32 %469, %class.SkRegion* %407, %class.SkBlitter* %147) #10
  call void @llvm.lifetime.end.p0i8(i64 264, i8* nonnull %246) #10
  %470 = load <2 x float>, <2 x float>* %256, align 16
  br label %669

471:                                              ; preds = %298
  call void @_Z10extend_ptsILN7SkPaint3CapE1EEvN6SkPath4VerbES3_P7SkPointi(i32 %261, i32 %299, %struct.SkPoint* nonnull %214, i32 3)
  %472 = inttoptr i64 %264 to i32*
  %473 = load i32, i32* %472, align 4
  call void @llvm.lifetime.start.p0i8(i64 28, i8* nonnull %232) #10
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %232, i8* nonnull align 16 %213, i64 24, i1 false) #10
  store i32 %473, i32* %234, align 4
  %474 = call i32 @_ZNK7SkConic15computeQuadPOW2Ef(%struct.SkConic* nonnull %5, float 2.500000e-01) #10
  %475 = shl i32 1, %474
  store i32 %475, i32* %228, align 8
  %476 = shl nsw i32 %475, 1
  %477 = or i32 %476, 1
  %478 = sext i32 %477 to i64
  %479 = load %struct.SkPoint*, %struct.SkPoint** %235, align 8
  %480 = icmp eq %struct.SkPoint* %479, %230
  br i1 %480, label %483, label %481

481:                                              ; preds = %471
  %482 = bitcast %struct.SkPoint* %479 to i8*
  call void @_Z7sk_freePv(i8* %482) #10
  br label %483

483:                                              ; preds = %481, %471
  %484 = icmp ugt i32 %477, 17
  br i1 %484, label %485, label %488

485:                                              ; preds = %483
  %486 = call i8* @_Z15sk_malloc_throwmm(i64 %478, i64 8) #10
  store i8* %486, i8** %236, align 8
  %487 = bitcast i8* %486 to %struct.SkPoint*
  br label %489

488:                                              ; preds = %483
  store %union.anon* %226, %union.anon** %227, align 8
  br label %489

489:                                              ; preds = %485, %488
  %490 = phi %struct.SkPoint* [ %230, %488 ], [ %487, %485 ]
  %491 = call i32 @_ZNK7SkConic17chopIntoQuadsPOW2EP7SkPointi(%struct.SkConic* nonnull %5, %struct.SkPoint* %490, i32 %474) #10
  store i32 %491, i32* %228, align 8
  call void @llvm.lifetime.end.p0i8(i64 28, i8* nonnull %232) #10
  %492 = icmp sgt i32 %491, 0
  br i1 %492, label %495, label %493

493:                                              ; preds = %656, %489
  %494 = load <2 x float>, <2 x float>* %255, align 16
  br label %669

495:                                              ; preds = %489, %656
  %496 = phi i32 [ %657, %656 ], [ %491, %489 ]
  %497 = phi i32 [ %659, %656 ], [ 0, %489 ]
  %498 = phi %struct.SkPoint* [ %658, %656 ], [ %490, %489 ]
  %499 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %498, i64 2, i32 0
  %500 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %498, i64 1, i32 0
  %501 = bitcast %struct.SkPoint* %498 to <2 x float>*
  %502 = load <2 x float>, <2 x float>* %501, align 4
  %503 = bitcast float* %499 to <2 x float>*
  %504 = load <2 x float>, <2 x float>* %503, align 4
  %505 = fadd <2 x float> %502, %504
  %506 = fmul <2 x float> %505, <float 5.000000e-01, float 5.000000e-01>
  %507 = bitcast float* %500 to <2 x float>*
  %508 = load <2 x float>, <2 x float>* %507, align 4
  %509 = fsub <2 x float> %506, %508
  %510 = call <2 x float> @llvm.fabs.v2f32(<2 x float> %509)
  %511 = call <2 x float> @llvm.ceil.v2f32(<2 x float> %510)
  %512 = fcmp olt <2 x float> %511, <float 0x41DFFFFFE0000000, float 0x41DFFFFFE0000000>
  %513 = select <2 x i1> %512, <2 x float> %511, <2 x float> <float 0x41DFFFFFE0000000, float 0x41DFFFFFE0000000>
  %514 = fcmp ogt <2 x float> %513, <float 0xC1DFFFFFE0000000, float 0xC1DFFFFFE0000000>
  %515 = select <2 x i1> %514, <2 x float> %513, <2 x float> <float 0xC1DFFFFFE0000000, float 0xC1DFFFFFE0000000>
  %516 = fptosi <2 x float> %515 to <2 x i32>
  %517 = extractelement <2 x i32> %516, i32 0
  %518 = extractelement <2 x i32> %516, i32 1
  %519 = icmp ugt i32 %517, %518
  %520 = lshr i32 %518, 1
  %521 = add i32 %520, %517
  %522 = lshr i32 %517, 1
  %523 = add i32 %522, %518
  %524 = select i1 %519, i32 %521, i32 %523
  %525 = call i32 @llvm.ctlz.i32(i32 %524, i1 false) #10, !range !9
  %526 = sub nuw nsw i32 33, %525
  %527 = ashr i32 %526, 1
  %528 = icmp slt i32 %527, 5
  %529 = select i1 %528, i32 %527, i32 5
  %530 = bitcast %struct.SkPoint* %498 to i64*
  %531 = load i64, i64* %530, align 1
  br i1 %237, label %532, label %543

532:                                              ; preds = %495
  %533 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %498, i64 1
  %534 = bitcast %struct.SkPoint* %533 to i64*
  %535 = load i64, i64* %534, align 1
  %536 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %498, i64 2
  %537 = bitcast %struct.SkPoint* %536 to i64*
  %538 = load i64, i64* %537, align 1
  %539 = insertelement <2 x i64> <i64 undef, i64 0>, i64 %531, i32 0
  %540 = insertelement <2 x i64> <i64 undef, i64 0>, i64 %535, i32 0
  %541 = bitcast <2 x i64> %540 to <4 x float>
  %542 = bitcast <2 x i64> %539 to <4 x float>
  br label %588

543:                                              ; preds = %495
  %544 = insertelement <2 x i64> <i64 undef, i64 0>, i64 %531, i32 0
  %545 = bitcast <2 x i64> %544 to <4 x float>
  %546 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %498, i64 1
  %547 = bitcast %struct.SkPoint* %546 to i64*
  %548 = load i64, i64* %547, align 1
  %549 = insertelement <2 x i64> <i64 undef, i64 0>, i64 %548, i32 0
  %550 = bitcast <2 x i64> %549 to <4 x float>
  %551 = call <4 x float> @llvm.x86.sse.min.ps(<4 x float> %545, <4 x float> %550) #10
  %552 = call <4 x float> @llvm.x86.sse.max.ps(<4 x float> %545, <4 x float> %550) #10
  %553 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %498, i64 2
  %554 = bitcast %struct.SkPoint* %553 to i64*
  %555 = load i64, i64* %554, align 1
  %556 = insertelement <2 x i64> <i64 undef, i64 0>, i64 %555, i32 0
  %557 = bitcast <2 x i64> %556 to <4 x float>
  %558 = call <4 x float> @llvm.x86.sse.min.ps(<4 x float> %551, <4 x float> %557) #10
  %559 = call <4 x float> @llvm.x86.sse.max.ps(<4 x float> %552, <4 x float> %557) #10
  %560 = load float, float* %238, align 8
  %561 = extractelement <4 x float> %559, i32 0
  %562 = fcmp olt float %560, %561
  br i1 %562, label %563, label %656

563:                                              ; preds = %543
  %564 = extractelement <4 x float> %558, i32 0
  %565 = load float, float* %239, align 8
  %566 = fcmp olt float %564, %565
  br i1 %566, label %567, label %656

567:                                              ; preds = %563
  %568 = load float, float* %240, align 4
  %569 = extractelement <4 x float> %559, i32 1
  %570 = fcmp olt float %568, %569
  br i1 %570, label %571, label %656

571:                                              ; preds = %567
  %572 = extractelement <4 x float> %558, i32 1
  %573 = load float, float* %241, align 4
  %574 = fcmp olt float %572, %573
  br i1 %574, label %575, label %656

575:                                              ; preds = %571
  %576 = load float, float* %242, align 4
  %577 = fcmp ugt float %561, %576
  br i1 %577, label %588, label %578

578:                                              ; preds = %575
  %579 = load float, float* %243, align 4
  %580 = fcmp ult float %564, %579
  br i1 %580, label %588, label %581

581:                                              ; preds = %578
  %582 = load float, float* %244, align 4
  %583 = fcmp ugt float %569, %582
  br i1 %583, label %588, label %584

584:                                              ; preds = %581
  %585 = load float, float* %245, align 4
  %586 = fcmp ult float %572, %585
  br i1 %586, label %588, label %587

587:                                              ; preds = %584
  br label %588

588:                                              ; preds = %587, %584, %581, %578, %575, %532
  %589 = phi <4 x float> [ %542, %532 ], [ %545, %584 ], [ %545, %575 ], [ %545, %578 ], [ %545, %581 ], [ %545, %587 ]
  %590 = phi <4 x float> [ %541, %532 ], [ %550, %584 ], [ %550, %575 ], [ %550, %578 ], [ %550, %581 ], [ %550, %587 ]
  %591 = phi i64 [ %538, %532 ], [ %555, %584 ], [ %555, %575 ], [ %555, %578 ], [ %555, %581 ], [ %555, %587 ]
  %592 = phi %class.SkRegion* [ %146, %532 ], [ %146, %584 ], [ %146, %575 ], [ %146, %578 ], [ %146, %581 ], [ null, %587 ]
  %593 = insertelement <2 x i64> undef, i64 %591, i32 0
  %594 = bitcast <2 x i64> %593 to <4 x float>
  %595 = fsub <4 x float> %590, %589
  %596 = fadd <4 x float> %595, %595
  %597 = fadd <4 x float> %590, %590
  %598 = fsub <4 x float> %594, %597
  %599 = fadd <4 x float> %589, %598
  %600 = shl i32 1, %529
  %601 = sitofp i32 %600 to float
  %602 = fdiv float 1.000000e+00, %601
  %603 = insertelement <4 x float> undef, float %602, i32 0
  %604 = shufflevector <4 x float> %603, <4 x float> undef, <4 x i32> zeroinitializer
  call void @llvm.lifetime.start.p0i8(i64 264, i8* nonnull %246) #10
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %246, i8 -1, i64 264, i1 false) #10
  store i64 %531, i64* %248, align 16
  %605 = icmp sgt i32 %600, 1
  br i1 %605, label %606, label %650

606:                                              ; preds = %588
  %607 = zext i32 %600 to i64
  %608 = add nsw i64 %607, -1
  %609 = and i64 %608, 1
  %610 = icmp eq i32 %529, 1
  br i1 %610, label %637, label %611

611:                                              ; preds = %606
  %612 = sub nsw i64 %608, %609
  br label %613

613:                                              ; preds = %613, %611
  %614 = phi i64 [ 1, %611 ], [ %634, %613 ]
  %615 = phi <4 x float> [ zeroinitializer, %611 ], [ %626, %613 ]
  %616 = phi i64 [ %612, %611 ], [ %635, %613 ]
  %617 = fadd <4 x float> %604, %615
  %618 = fmul <4 x float> %599, %617
  %619 = fadd <4 x float> %596, %618
  %620 = fmul <4 x float> %617, %619
  %621 = fadd <4 x float> %589, %620
  %622 = getelementptr inbounds [33 x %struct.SkPoint], [33 x %struct.SkPoint]* %6, i64 0, i64 %614
  %623 = shufflevector <4 x float> %621, <4 x float> undef, <2 x i32> <i32 0, i32 1>
  %624 = bitcast %struct.SkPoint* %622 to <2 x float>*
  store <2 x float> %623, <2 x float>* %624, align 8
  %625 = add nuw nsw i64 %614, 1
  %626 = fadd <4 x float> %604, %617
  %627 = fmul <4 x float> %599, %626
  %628 = fadd <4 x float> %596, %627
  %629 = fmul <4 x float> %626, %628
  %630 = fadd <4 x float> %589, %629
  %631 = getelementptr inbounds [33 x %struct.SkPoint], [33 x %struct.SkPoint]* %6, i64 0, i64 %625
  %632 = shufflevector <4 x float> %630, <4 x float> undef, <2 x i32> <i32 0, i32 1>
  %633 = bitcast %struct.SkPoint* %631 to <2 x float>*
  store <2 x float> %632, <2 x float>* %633, align 8
  %634 = add nuw nsw i64 %614, 2
  %635 = add i64 %616, -2
  %636 = icmp eq i64 %635, 0
  br i1 %636, label %637, label %613

637:                                              ; preds = %613, %606
  %638 = phi i64 [ 1, %606 ], [ %634, %613 ]
  %639 = phi <4 x float> [ zeroinitializer, %606 ], [ %626, %613 ]
  %640 = icmp eq i64 %609, 0
  br i1 %640, label %650, label %641

641:                                              ; preds = %637
  %642 = fadd <4 x float> %604, %639
  %643 = fmul <4 x float> %599, %642
  %644 = fadd <4 x float> %596, %643
  %645 = fmul <4 x float> %642, %644
  %646 = fadd <4 x float> %589, %645
  %647 = getelementptr inbounds [33 x %struct.SkPoint], [33 x %struct.SkPoint]* %6, i64 0, i64 %638
  %648 = shufflevector <4 x float> %646, <4 x float> undef, <2 x i32> <i32 0, i32 1>
  %649 = bitcast %struct.SkPoint* %647 to <2 x float>*
  store <2 x float> %648, <2 x float>* %649, align 8
  br label %650

650:                                              ; preds = %641, %637, %588
  %651 = sext i32 %600 to i64
  %652 = getelementptr inbounds [33 x %struct.SkPoint], [33 x %struct.SkPoint]* %6, i64 0, i64 %651
  %653 = bitcast %struct.SkPoint* %652 to i64*
  store i64 %591, i64* %653, align 8
  %654 = add nsw i32 %600, 1
  call void %3(%struct.SkPoint* nonnull %247, i32 %654, %class.SkRegion* %592, %class.SkBlitter* %147) #10
  call void @llvm.lifetime.end.p0i8(i64 264, i8* nonnull %246) #10
  %655 = load i32, i32* %228, align 8
  br label %656

656:                                              ; preds = %543, %563, %567, %571, %650
  %657 = phi i32 [ %496, %543 ], [ %496, %563 ], [ %496, %567 ], [ %496, %571 ], [ %655, %650 ]
  %658 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %498, i64 2
  %659 = add nuw nsw i32 %497, 1
  %660 = icmp slt i32 %659, %657
  br i1 %660, label %495, label %493

661:                                              ; preds = %298
  call void @_Z10extend_ptsILN7SkPaint3CapE1EEvN6SkPath4VerbES3_P7SkPointi(i32 %261, i32 %299, %struct.SkPoint* nonnull %214, i32 4)
  call fastcc void @_ZL9haircubicPK7SkPointPK8SkRegionPK6SkRectS7_P9SkBlitteriPFvS1_iS4_S9_E(%struct.SkPoint* nonnull %214, %class.SkRegion* %146, %struct.SkRect* %145, %struct.SkRect* %144, %class.SkBlitter* %147, void (%struct.SkPoint*, i32, %class.SkRegion*, %class.SkBlitter*)* %3)
  %662 = load <2 x float>, <2 x float>* %254, align 8
  br label %669

663:                                              ; preds = %298
  %664 = extractelement <2 x float> %266, i32 0
  store float %664, float* %215, align 16
  %665 = extractelement <2 x float> %266, i32 1
  store float %665, float* %216, align 4
  store float %262, float* %217, align 8
  store float %263, float* %218, align 4
  %666 = icmp eq i32 %261, 0
  br i1 %666, label %667, label %668

667:                                              ; preds = %663
  call void @_Z10extend_ptsILN7SkPaint3CapE1EEvN6SkPath4VerbES3_P7SkPointi(i32 0, i32 %299, %struct.SkPoint* nonnull %214, i32 2)
  br label %668

668:                                              ; preds = %667, %663
  call void %3(%struct.SkPoint* nonnull %214, i32 2, %class.SkRegion* %146, %class.SkBlitter* %147) #10
  br label %669

669:                                              ; preds = %465, %386, %382, %378, %358, %298, %668, %661, %493, %310, %306
  %670 = phi float [ %263, %298 ], [ %263, %668 ], [ %263, %661 ], [ %263, %493 ], [ %263, %310 ], [ %309, %306 ], [ %263, %358 ], [ %263, %378 ], [ %263, %382 ], [ %263, %386 ], [ %263, %465 ]
  %671 = phi float [ %262, %298 ], [ %262, %668 ], [ %262, %661 ], [ %262, %493 ], [ %262, %310 ], [ %308, %306 ], [ %262, %358 ], [ %262, %378 ], [ %262, %382 ], [ %262, %386 ], [ %262, %465 ]
  %672 = phi <2 x float> [ %266, %298 ], [ %266, %668 ], [ %662, %661 ], [ %494, %493 ], [ %311, %310 ], [ %307, %306 ], [ %377, %358 ], [ %377, %378 ], [ %377, %382 ], [ %377, %386 ], [ %470, %465 ]
  %673 = icmp eq i32 %261, 0
  %674 = add nsw i32 %289, -1
  %675 = icmp ult i32 %674, 4
  %676 = and i1 %673, %675
  %677 = load float, float* %215, align 16
  %678 = load float, float* %216, align 4
  %679 = select i1 %676, float %678, float %670
  %680 = select i1 %676, float %677, float %671
  br i1 %294, label %681, label %259

681:                                              ; preds = %669
  %682 = load %struct.SkPoint*, %struct.SkPoint** %235, align 8
  %683 = icmp eq %struct.SkPoint* %682, %230
  br i1 %683, label %686, label %684

684:                                              ; preds = %681
  %685 = bitcast %struct.SkPoint* %682 to i8*
  call void @_Z7sk_freePv(i8* %685) #10
  br label %686

686:                                              ; preds = %211, %681, %684
  call void @llvm.lifetime.end.p0i8(i64 152, i8* nonnull %222) #10
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %213) #10
  br label %687

687:                                              ; preds = %142, %686
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %24) #10
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %23) #10
  %688 = getelementptr inbounds %class.SkAAClipBlitterWrapper, %class.SkAAClipBlitterWrapper* %8, i64 0, i32 1
  call void @_ZN15SkAAClipBlitterD1Ev(%class.SkAAClipBlitter* %688) #10
  %689 = getelementptr inbounds %class.SkAAClipBlitterWrapper, %class.SkAAClipBlitterWrapper* %8, i64 0, i32 0
  call void @_ZN8SkRegionD1Ev(%class.SkRegion* nonnull %689) #10
  call void @llvm.lifetime.end.p0i8(i64 1160, i8* nonnull %22) #10
  br label %690

690:                                              ; preds = %4, %687
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN6SkScan17AntiHairRoundPathERK6SkPathRK12SkRasterClipP9SkBlitter(%class.SkPath* dereferenceable(16), %class.SkRasterClip* dereferenceable(72), %class.SkBlitter*) local_unnamed_addr #0 align 2 {
  tail call void @_Z9hair_pathILN7SkPaint3CapE1EEvRK6SkPathRK12SkRasterClipP9SkBlitterPFvPK7SkPointiPK8SkRegionS9_E(%class.SkPath* dereferenceable(16) %0, %class.SkRasterClip* dereferenceable(72) %1, %class.SkBlitter* %2, void (%struct.SkPoint*, i32, %class.SkRegion*, %class.SkBlitter*)* nonnull @_ZN6SkScan15AntiHairLineRgnEPK7SkPointiPK8SkRegionP9SkBlitter)
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN6SkScan9FrameRectERK6SkRectRK7SkPointRK12SkRasterClipP9SkBlitter(%struct.SkRect* nocapture readonly dereferenceable(16), %struct.SkPoint* nocapture readonly dereferenceable(8), %class.SkRasterClip* dereferenceable(72), %class.SkBlitter*) local_unnamed_addr #0 align 2 {
  %5 = alloca <4 x float>, align 16
  %6 = bitcast <4 x float>* %5 to %struct.SkRect*
  %7 = alloca %struct.SkRect, align 4
  %8 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %1, i64 0, i32 0
  %9 = load float, float* %8, align 4
  %10 = fcmp olt float %9, 0.000000e+00
  br i1 %10, label %62, label %11

11:                                               ; preds = %4
  %12 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %1, i64 0, i32 1
  %13 = load float, float* %12, align 4
  %14 = fcmp olt float %13, 0.000000e+00
  br i1 %14, label %62, label %15

15:                                               ; preds = %11
  %16 = insertelement <2 x float> undef, float %9, i32 0
  %17 = insertelement <2 x float> %16, float %13, i32 1
  %18 = fmul <2 x float> %17, <float 5.000000e-01, float 5.000000e-01>
  %19 = shufflevector <2 x float> %18, <2 x float> undef, <4 x i32> <i32 0, i32 1, i32 0, i32 1>
  %20 = bitcast <4 x float>* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %20) #10
  %21 = getelementptr inbounds %struct.SkRect, %struct.SkRect* %6, i64 0, i32 3
  %22 = bitcast %struct.SkRect* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %22) #10
  %23 = getelementptr inbounds %struct.SkRect, %struct.SkRect* %7, i64 0, i32 0
  %24 = getelementptr inbounds %struct.SkRect, %struct.SkRect* %7, i64 0, i32 1
  %25 = getelementptr inbounds %struct.SkRect, %struct.SkRect* %7, i64 0, i32 2
  %26 = getelementptr inbounds %struct.SkRect, %struct.SkRect* %7, i64 0, i32 3
  %27 = bitcast %struct.SkRect* %7 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 4 %27, i8 -1, i64 16, i1 false)
  %28 = bitcast %struct.SkRect* %0 to <4 x float>*
  %29 = load <4 x float>, <4 x float>* %28, align 4
  %30 = fsub <4 x float> %29, %19
  %31 = fadd <4 x float> %29, %19
  %32 = shufflevector <4 x float> %30, <4 x float> %31, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  store <4 x float> %32, <4 x float>* %5, align 16
  %33 = extractelement <4 x float> %29, i32 0
  %34 = extractelement <4 x float> %29, i32 2
  %35 = fsub float %34, %33
  %36 = fcmp ugt float %35, %9
  %37 = extractelement <4 x float> %29, i32 1
  %38 = extractelement <4 x float> %29, i32 3
  %39 = fsub float %38, %37
  %40 = fcmp ugt float %39, %13
  %41 = and i1 %36, %40
  br i1 %41, label %42, label %60

42:                                               ; preds = %15
  %43 = getelementptr inbounds <4 x float>, <4 x float>* %5, i64 0, i64 0
  %44 = getelementptr inbounds %struct.SkRect, %struct.SkRect* %6, i64 0, i32 2
  %45 = getelementptr inbounds %struct.SkRect, %struct.SkRect* %6, i64 0, i32 1
  %46 = extractelement <4 x float> %30, i32 1
  %47 = fadd float %13, %46
  %48 = extractelement <4 x float> %30, i32 0
  store float %48, float* %23, align 4
  store float %46, float* %24, align 4
  %49 = extractelement <4 x float> %31, i32 2
  store float %49, float* %25, align 4
  store float %47, float* %26, align 4
  call void @_ZN6SkScan8FillRectERK6SkRectRK12SkRasterClipP9SkBlitter(%struct.SkRect* nonnull dereferenceable(16) %7, %class.SkRasterClip* dereferenceable(72) %2, %class.SkBlitter* %3) #10
  %50 = load float, float* %21, align 4
  %51 = fsub float %50, %13
  store float %51, float* %24, align 4
  store float %50, float* %26, align 4
  call void @_ZN6SkScan8FillRectERK6SkRectRK12SkRasterClipP9SkBlitter(%struct.SkRect* nonnull dereferenceable(16) %7, %class.SkRasterClip* dereferenceable(72) %2, %class.SkBlitter* %3) #10
  %52 = load float, float* %43, align 16
  %53 = load float, float* %45, align 4
  %54 = fadd float %13, %53
  %55 = fadd float %9, %52
  %56 = load float, float* %21, align 4
  %57 = fsub float %56, %13
  store float %52, float* %23, align 4
  store float %54, float* %24, align 4
  store float %55, float* %25, align 4
  store float %57, float* %26, align 4
  call void @_ZN6SkScan8FillRectERK6SkRectRK12SkRasterClipP9SkBlitter(%struct.SkRect* nonnull dereferenceable(16) %7, %class.SkRasterClip* dereferenceable(72) %2, %class.SkBlitter* %3) #10
  %58 = load float, float* %44, align 8
  %59 = fsub float %58, %9
  store float %59, float* %23, align 4
  store float %58, float* %25, align 4
  br label %60

60:                                               ; preds = %15, %42
  %61 = phi %struct.SkRect* [ %7, %42 ], [ %6, %15 ]
  call void @_ZN6SkScan8FillRectERK6SkRectRK12SkRasterClipP9SkBlitter(%struct.SkRect* nonnull dereferenceable(16) %61, %class.SkRasterClip* dereferenceable(72) %2, %class.SkBlitter* %3) #10
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %22) #10
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %20) #10
  br label %62

62:                                               ; preds = %4, %11, %60
  ret void
}

declare void @_ZN6SkScan8FillRectERK6SkRectRK12SkRasterClipP9SkBlitter(%struct.SkRect* dereferenceable(16), %class.SkRasterClip* dereferenceable(72), %class.SkBlitter*) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN6SkScan8HairLineEPK7SkPointiRK12SkRasterClipP9SkBlitter(%struct.SkPoint*, i32, %class.SkRasterClip* dereferenceable(72), %class.SkBlitter*) local_unnamed_addr #0 align 2 {
  %5 = alloca <4 x float>, align 16
  %6 = bitcast <4 x float>* %5 to %struct.SkRect*
  %7 = alloca %class.SkAAClipBlitterWrapper, align 8
  %8 = alloca { i64, i64 }, align 8
  %9 = getelementptr inbounds %class.SkRasterClip, %class.SkRasterClip* %2, i64 0, i32 2
  %10 = load i8, i8* %9, align 8, !range !2
  %11 = icmp eq i8 %10, 0
  br i1 %11, label %14, label %12

12:                                               ; preds = %4
  %13 = getelementptr inbounds %class.SkRasterClip, %class.SkRasterClip* %2, i64 0, i32 0
  tail call void @_ZN6SkScan11HairLineRgnEPK7SkPointiPK8SkRegionP9SkBlitter(%struct.SkPoint* %0, i32 %1, %class.SkRegion* %13, %class.SkBlitter* %3)
  br label %76

14:                                               ; preds = %4
  %15 = bitcast { i64, i64 }* %8 to %struct.SkIRect*
  %16 = bitcast <4 x float>* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %16) #10
  %17 = getelementptr inbounds <4 x float>, <4 x float>* %5, i64 0, i64 0
  %18 = getelementptr inbounds %struct.SkRect, %struct.SkRect* %6, i64 0, i32 1
  %19 = getelementptr inbounds %struct.SkRect, %struct.SkRect* %6, i64 0, i32 2
  %20 = getelementptr inbounds %struct.SkRect, %struct.SkRect* %6, i64 0, i32 3
  %21 = bitcast <4 x float>* %5 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %21, i8 -1, i64 16, i1 false)
  %22 = call zeroext i1 @_ZN6SkRect14setBoundsCheckEPK7SkPointi(%struct.SkRect* nonnull %6, %struct.SkPoint* %0, i32 %1) #10
  %23 = load <4 x float>, <4 x float>* %5, align 16
  %24 = fadd <4 x float> %23, <float -5.000000e-01, float -5.000000e-01, float 5.000000e-01, float 5.000000e-01>
  store <4 x float> %24, <4 x float>* %5, align 16
  %25 = bitcast %class.SkAAClipBlitterWrapper* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 1160, i8* nonnull %25) #10
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %25, i8 -86, i64 1160, i1 false)
  call void @_ZN22SkAAClipBlitterWrapperC1Ev(%class.SkAAClipBlitterWrapper* nonnull %7) #10
  %26 = bitcast { i64, i64 }* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %26) #10
  %27 = load float, float* %17, align 16
  %28 = call float @llvm.floor.f32(float %27) #10
  %29 = fcmp olt float %28, 0x41DFFFFFE0000000
  %30 = select i1 %29, float %28, float 0x41DFFFFFE0000000
  %31 = fcmp ogt float %30, 0xC1DFFFFFE0000000
  %32 = select i1 %31, float %30, float 0xC1DFFFFFE0000000
  %33 = fptosi float %32 to i32
  %34 = load float, float* %18, align 4
  %35 = call float @llvm.floor.f32(float %34) #10
  %36 = fcmp olt float %35, 0x41DFFFFFE0000000
  %37 = select i1 %36, float %35, float 0x41DFFFFFE0000000
  %38 = fcmp ogt float %37, 0xC1DFFFFFE0000000
  %39 = select i1 %38, float %37, float 0xC1DFFFFFE0000000
  %40 = fptosi float %39 to i32
  %41 = load float, float* %19, align 8
  %42 = call float @llvm.ceil.f32(float %41) #10
  %43 = fcmp olt float %42, 0x41DFFFFFE0000000
  %44 = select i1 %43, float %42, float 0x41DFFFFFE0000000
  %45 = fcmp ogt float %44, 0xC1DFFFFFE0000000
  %46 = select i1 %45, float %44, float 0xC1DFFFFFE0000000
  %47 = fptosi float %46 to i32
  %48 = load float, float* %20, align 4
  %49 = call float @llvm.ceil.f32(float %48) #10
  %50 = fcmp olt float %49, 0x41DFFFFFE0000000
  %51 = select i1 %50, float %49, float 0x41DFFFFFE0000000
  %52 = fcmp ogt float %51, 0xC1DFFFFFE0000000
  %53 = select i1 %52, float %51, float 0xC1DFFFFFE0000000
  %54 = fptosi float %53 to i32
  %55 = zext i32 %40 to i64
  %56 = shl nuw i64 %55, 32
  %57 = zext i32 %33 to i64
  %58 = or i64 %56, %57
  %59 = zext i32 %54 to i64
  %60 = shl nuw i64 %59, 32
  %61 = zext i32 %47 to i64
  %62 = or i64 %60, %61
  %63 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %8, i64 0, i32 0
  store i64 %58, i64* %63, align 8
  %64 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %8, i64 0, i32 1
  store i64 %62, i64* %64, align 8
  %65 = call zeroext i1 @_ZNK12SkRasterClip13quickContainsERK7SkIRect(%class.SkRasterClip* %2, %struct.SkIRect* nonnull dereferenceable(16) %15) #10
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %26) #10
  br i1 %65, label %71, label %66

66:                                               ; preds = %14
  call void @_ZN22SkAAClipBlitterWrapper4initERK12SkRasterClipP9SkBlitter(%class.SkAAClipBlitterWrapper* nonnull %7, %class.SkRasterClip* dereferenceable(72) %2, %class.SkBlitter* %3) #10
  %67 = getelementptr inbounds %class.SkAAClipBlitterWrapper, %class.SkAAClipBlitterWrapper* %7, i64 0, i32 3
  %68 = load %class.SkBlitter*, %class.SkBlitter** %67, align 8
  %69 = getelementptr inbounds %class.SkAAClipBlitterWrapper, %class.SkAAClipBlitterWrapper* %7, i64 0, i32 2
  %70 = load %class.SkRegion*, %class.SkRegion** %69, align 8
  br label %71

71:                                               ; preds = %14, %66
  %72 = phi %class.SkBlitter* [ %68, %66 ], [ %3, %14 ]
  %73 = phi %class.SkRegion* [ %70, %66 ], [ null, %14 ]
  call void @_ZN6SkScan11HairLineRgnEPK7SkPointiPK8SkRegionP9SkBlitter(%struct.SkPoint* %0, i32 %1, %class.SkRegion* %73, %class.SkBlitter* %72)
  %74 = getelementptr inbounds %class.SkAAClipBlitterWrapper, %class.SkAAClipBlitterWrapper* %7, i64 0, i32 1
  call void @_ZN15SkAAClipBlitterD1Ev(%class.SkAAClipBlitter* %74) #10
  %75 = getelementptr inbounds %class.SkAAClipBlitterWrapper, %class.SkAAClipBlitterWrapper* %7, i64 0, i32 0
  call void @_ZN8SkRegionD1Ev(%class.SkRegion* nonnull %75) #10
  call void @llvm.lifetime.end.p0i8(i64 1160, i8* nonnull %25) #10
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %16) #10
  br label %76

76:                                               ; preds = %71, %12
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN6SkScan12AntiHairLineEPK7SkPointiRK12SkRasterClipP9SkBlitter(%struct.SkPoint*, i32, %class.SkRasterClip* dereferenceable(72), %class.SkBlitter*) local_unnamed_addr #0 align 2 {
  %5 = alloca %struct.SkRect, align 4
  %6 = alloca %class.SkAAClipBlitterWrapper, align 8
  %7 = alloca { i64, i64 }, align 8
  %8 = getelementptr inbounds %class.SkRasterClip, %class.SkRasterClip* %2, i64 0, i32 2
  %9 = load i8, i8* %8, align 8, !range !2
  %10 = icmp eq i8 %9, 0
  br i1 %10, label %13, label %11

11:                                               ; preds = %4
  %12 = getelementptr inbounds %class.SkRasterClip, %class.SkRasterClip* %2, i64 0, i32 0
  tail call void @_ZN6SkScan15AntiHairLineRgnEPK7SkPointiPK8SkRegionP9SkBlitter(%struct.SkPoint* %0, i32 %1, %class.SkRegion* %12, %class.SkBlitter* %3) #10
  br label %91

13:                                               ; preds = %4
  %14 = bitcast { i64, i64 }* %7 to %struct.SkIRect*
  %15 = bitcast %struct.SkRect* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %15) #10
  %16 = getelementptr inbounds %struct.SkRect, %struct.SkRect* %5, i64 0, i32 0
  %17 = getelementptr inbounds %struct.SkRect, %struct.SkRect* %5, i64 0, i32 1
  %18 = getelementptr inbounds %struct.SkRect, %struct.SkRect* %5, i64 0, i32 2
  %19 = getelementptr inbounds %struct.SkRect, %struct.SkRect* %5, i64 0, i32 3
  %20 = bitcast %struct.SkRect* %5 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 4 %20, i8 -1, i64 16, i1 false)
  %21 = call zeroext i1 @_ZN6SkRect14setBoundsCheckEPK7SkPointi(%struct.SkRect* nonnull %5, %struct.SkPoint* %0, i32 %1) #10
  %22 = bitcast %class.SkAAClipBlitterWrapper* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 1160, i8* nonnull %22) #10
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %22, i8 -86, i64 1160, i1 false)
  call void @_ZN22SkAAClipBlitterWrapperC1Ev(%class.SkAAClipBlitterWrapper* nonnull %6) #10
  %23 = bitcast { i64, i64 }* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %23) #10
  %24 = load float, float* %16, align 4
  %25 = call float @llvm.floor.f32(float %24) #10
  %26 = fcmp olt float %25, 0x41DFFFFFE0000000
  %27 = select i1 %26, float %25, float 0x41DFFFFFE0000000
  %28 = fcmp ogt float %27, 0xC1DFFFFFE0000000
  %29 = select i1 %28, float %27, float 0xC1DFFFFFE0000000
  %30 = fptosi float %29 to i32
  %31 = load float, float* %17, align 4
  %32 = call float @llvm.floor.f32(float %31) #10
  %33 = fcmp olt float %32, 0x41DFFFFFE0000000
  %34 = select i1 %33, float %32, float 0x41DFFFFFE0000000
  %35 = fcmp ogt float %34, 0xC1DFFFFFE0000000
  %36 = select i1 %35, float %34, float 0xC1DFFFFFE0000000
  %37 = fptosi float %36 to i32
  %38 = load float, float* %18, align 4
  %39 = call float @llvm.ceil.f32(float %38) #10
  %40 = fcmp olt float %39, 0x41DFFFFFE0000000
  %41 = select i1 %40, float %39, float 0x41DFFFFFE0000000
  %42 = fcmp ogt float %41, 0xC1DFFFFFE0000000
  %43 = select i1 %42, float %41, float 0xC1DFFFFFE0000000
  %44 = fptosi float %43 to i32
  %45 = load float, float* %19, align 4
  %46 = call float @llvm.ceil.f32(float %45) #10
  %47 = fcmp olt float %46, 0x41DFFFFFE0000000
  %48 = select i1 %47, float %46, float 0x41DFFFFFE0000000
  %49 = fcmp ogt float %48, 0xC1DFFFFFE0000000
  %50 = select i1 %49, float %48, float 0xC1DFFFFFE0000000
  %51 = fptosi float %50 to i32
  %52 = sext i32 %30 to i64
  %53 = icmp sgt i64 %52, -2147483646
  %54 = select i1 %53, i64 %52, i64 -2147483646
  %55 = add nsw i64 %54, 4294967295
  %56 = sext i32 %37 to i64
  %57 = icmp sgt i64 %56, -2147483646
  %58 = select i1 %57, i64 %56, i64 -2147483646
  %59 = sext i32 %44 to i64
  %60 = icmp slt i64 %59, 2147483646
  %61 = select i1 %60, i64 %59, i64 2147483646
  %62 = icmp sgt i64 %61, -2147483648
  %63 = select i1 %62, i64 %61, i64 -2147483648
  %64 = add nsw i64 %63, 1
  %65 = sext i32 %51 to i64
  %66 = icmp slt i64 %65, 2147483646
  %67 = select i1 %66, i64 %65, i64 2147483646
  %68 = icmp sgt i64 %67, -2147483648
  %69 = select i1 %68, i64 %67, i64 -2147483648
  %70 = shl nsw i64 %58, 32
  %71 = add i64 %70, -4294967296
  %72 = and i64 %55, 4294967295
  %73 = or i64 %71, %72
  %74 = shl nsw i64 %69, 32
  %75 = add i64 %74, 4294967296
  %76 = and i64 %64, 4294967295
  %77 = or i64 %75, %76
  %78 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %7, i64 0, i32 0
  store i64 %73, i64* %78, align 8
  %79 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %7, i64 0, i32 1
  store i64 %77, i64* %79, align 8
  %80 = call zeroext i1 @_ZNK12SkRasterClip13quickContainsERK7SkIRect(%class.SkRasterClip* %2, %struct.SkIRect* nonnull dereferenceable(16) %14) #10
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %23) #10
  br i1 %80, label %86, label %81

81:                                               ; preds = %13
  call void @_ZN22SkAAClipBlitterWrapper4initERK12SkRasterClipP9SkBlitter(%class.SkAAClipBlitterWrapper* nonnull %6, %class.SkRasterClip* dereferenceable(72) %2, %class.SkBlitter* %3) #10
  %82 = getelementptr inbounds %class.SkAAClipBlitterWrapper, %class.SkAAClipBlitterWrapper* %6, i64 0, i32 3
  %83 = load %class.SkBlitter*, %class.SkBlitter** %82, align 8
  %84 = getelementptr inbounds %class.SkAAClipBlitterWrapper, %class.SkAAClipBlitterWrapper* %6, i64 0, i32 2
  %85 = load %class.SkRegion*, %class.SkRegion** %84, align 8
  br label %86

86:                                               ; preds = %13, %81
  %87 = phi %class.SkBlitter* [ %83, %81 ], [ %3, %13 ]
  %88 = phi %class.SkRegion* [ %85, %81 ], [ null, %13 ]
  call void @_ZN6SkScan15AntiHairLineRgnEPK7SkPointiPK8SkRegionP9SkBlitter(%struct.SkPoint* %0, i32 %1, %class.SkRegion* %88, %class.SkBlitter* %87) #10
  %89 = getelementptr inbounds %class.SkAAClipBlitterWrapper, %class.SkAAClipBlitterWrapper* %6, i64 0, i32 1
  call void @_ZN15SkAAClipBlitterD1Ev(%class.SkAAClipBlitter* %89) #10
  %90 = getelementptr inbounds %class.SkAAClipBlitterWrapper, %class.SkAAClipBlitterWrapper* %6, i64 0, i32 0
  call void @_ZN8SkRegionD1Ev(%class.SkRegion* nonnull %90) #10
  call void @llvm.lifetime.end.p0i8(i64 1160, i8* nonnull %22) #10
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %15) #10
  br label %91

91:                                               ; preds = %86, %11
  ret void
}

declare zeroext i1 @_ZN7SkIRect9intersectERKS_S1_(%struct.SkIRect*, %struct.SkIRect* dereferenceable(16), %struct.SkIRect* dereferenceable(16)) local_unnamed_addr #2

; Function Attrs: nounwind
declare void @_ZN9SkBlitterD2Ev(%class.SkBlitter*) unnamed_addr #5

; Function Attrs: nounwind
declare void @_ZN15SkAAClipBlitterD1Ev(%class.SkAAClipBlitter*) unnamed_addr #5

; Function Attrs: nounwind
declare void @_ZN8SkRegionD1Ev(%class.SkRegion*) unnamed_addr #5

declare zeroext i1 @_ZN6SkRect14setBoundsCheckEPK7SkPointi(%struct.SkRect*, %struct.SkPoint*, i32) local_unnamed_addr #2

; Function Attrs: nounwind readnone speculatable
declare float @llvm.ceil.f32(float) #3

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #1

; Function Attrs: inlinehint nounwind ssp uwtable
define internal fastcc void @_ZL9haircubicPK7SkPointPK8SkRegionPK6SkRectS7_P9SkBlitteriPFvS1_iS4_S9_E(%struct.SkPoint*, %class.SkRegion*, %struct.SkRect* readonly, %struct.SkRect* nocapture readonly, %class.SkBlitter*, void (%struct.SkPoint*, i32, %class.SkRegion*, %class.SkBlitter*)* nocapture) unnamed_addr #6 {
  %7 = alloca [13 x %struct.SkPoint], align 16
  %8 = alloca [3 x float], align 4
  %9 = icmp eq %struct.SkRect* %2, null
  br i1 %9, label %10, label %19

10:                                               ; preds = %6
  %11 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %0, i64 1
  %12 = bitcast %struct.SkPoint* %11 to <2 x float>*
  %13 = load <2 x float>, <2 x float>* %12, align 4
  %14 = bitcast %struct.SkPoint* %0 to <2 x float>*
  %15 = load <2 x float>, <2 x float>* %14, align 4
  %16 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %0, i64 3
  %17 = bitcast %struct.SkPoint* %16 to <2 x float>*
  %18 = load <2 x float>, <2 x float>* %17, align 4
  br label %84

19:                                               ; preds = %6
  %20 = bitcast %struct.SkPoint* %0 to i64*
  %21 = load i64, i64* %20, align 1
  %22 = insertelement <2 x i64> <i64 undef, i64 0>, i64 %21, i32 0
  %23 = bitcast <2 x i64> %22 to <4 x float>
  %24 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %0, i64 1
  %25 = bitcast %struct.SkPoint* %24 to i64*
  %26 = load i64, i64* %25, align 1
  %27 = insertelement <2 x i64> <i64 undef, i64 0>, i64 %26, i32 0
  %28 = bitcast <2 x i64> %27 to <4 x float>
  %29 = tail call <4 x float> @llvm.x86.sse.min.ps(<4 x float> %23, <4 x float> %28) #10
  %30 = tail call <4 x float> @llvm.x86.sse.max.ps(<4 x float> %23, <4 x float> %28) #10
  %31 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %0, i64 2
  %32 = bitcast %struct.SkPoint* %31 to i64*
  %33 = load i64, i64* %32, align 1
  %34 = insertelement <2 x i64> <i64 undef, i64 0>, i64 %33, i32 0
  %35 = bitcast <2 x i64> %34 to <4 x float>
  %36 = tail call <4 x float> @llvm.x86.sse.min.ps(<4 x float> %29, <4 x float> %35) #10
  %37 = tail call <4 x float> @llvm.x86.sse.max.ps(<4 x float> %30, <4 x float> %35) #10
  %38 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %0, i64 3
  %39 = bitcast %struct.SkPoint* %38 to i64*
  %40 = load i64, i64* %39, align 1
  %41 = insertelement <2 x i64> <i64 undef, i64 0>, i64 %40, i32 0
  %42 = bitcast <2 x i64> %41 to <4 x float>
  %43 = tail call <4 x float> @llvm.x86.sse.min.ps(<4 x float> %36, <4 x float> %42) #10
  %44 = tail call <4 x float> @llvm.x86.sse.max.ps(<4 x float> %37, <4 x float> %42) #10
  %45 = getelementptr inbounds %struct.SkRect, %struct.SkRect* %3, i64 0, i32 0
  %46 = load float, float* %45, align 4
  %47 = extractelement <4 x float> %44, i32 0
  %48 = fcmp olt float %46, %47
  %49 = bitcast i64 %26 to <2 x float>
  %50 = bitcast i64 %21 to <2 x float>
  %51 = bitcast i64 %40 to <2 x float>
  br i1 %48, label %52, label %147

52:                                               ; preds = %19
  %53 = extractelement <4 x float> %43, i32 0
  %54 = getelementptr inbounds %struct.SkRect, %struct.SkRect* %3, i64 0, i32 2
  %55 = load float, float* %54, align 4
  %56 = fcmp olt float %53, %55
  br i1 %56, label %57, label %147

57:                                               ; preds = %52
  %58 = getelementptr inbounds %struct.SkRect, %struct.SkRect* %3, i64 0, i32 1
  %59 = load float, float* %58, align 4
  %60 = extractelement <4 x float> %44, i32 1
  %61 = fcmp olt float %59, %60
  br i1 %61, label %62, label %147

62:                                               ; preds = %57
  %63 = extractelement <4 x float> %43, i32 1
  %64 = getelementptr inbounds %struct.SkRect, %struct.SkRect* %3, i64 0, i32 3
  %65 = load float, float* %64, align 4
  %66 = fcmp olt float %63, %65
  br i1 %66, label %67, label %147

67:                                               ; preds = %62
  %68 = getelementptr inbounds %struct.SkRect, %struct.SkRect* %2, i64 0, i32 2
  %69 = load float, float* %68, align 4
  %70 = fcmp ugt float %47, %69
  br i1 %70, label %84, label %71

71:                                               ; preds = %67
  %72 = getelementptr inbounds %struct.SkRect, %struct.SkRect* %2, i64 0, i32 0
  %73 = load float, float* %72, align 4
  %74 = fcmp ult float %53, %73
  br i1 %74, label %84, label %75

75:                                               ; preds = %71
  %76 = getelementptr inbounds %struct.SkRect, %struct.SkRect* %2, i64 0, i32 3
  %77 = load float, float* %76, align 4
  %78 = fcmp ugt float %60, %77
  br i1 %78, label %84, label %79

79:                                               ; preds = %75
  %80 = getelementptr inbounds %struct.SkRect, %struct.SkRect* %2, i64 0, i32 1
  %81 = load float, float* %80, align 4
  %82 = fcmp ult float %63, %81
  br i1 %82, label %84, label %83

83:                                               ; preds = %79
  br label %84

84:                                               ; preds = %10, %79, %67, %71, %75, %83
  %85 = phi <2 x float> [ %18, %10 ], [ %51, %79 ], [ %51, %83 ], [ %51, %75 ], [ %51, %71 ], [ %51, %67 ]
  %86 = phi <2 x float> [ %15, %10 ], [ %50, %79 ], [ %50, %83 ], [ %50, %75 ], [ %50, %71 ], [ %50, %67 ]
  %87 = phi <2 x float> [ %13, %10 ], [ %49, %79 ], [ %49, %83 ], [ %49, %75 ], [ %49, %71 ], [ %49, %67 ]
  %88 = phi %class.SkRegion* [ %1, %10 ], [ %1, %79 ], [ null, %83 ], [ %1, %75 ], [ %1, %71 ], [ %1, %67 ]
  %89 = extractelement <2 x float> %86, i32 0
  %90 = extractelement <2 x float> %87, i32 0
  %91 = fsub float %90, %89
  %92 = extractelement <2 x float> %86, i32 1
  %93 = extractelement <2 x float> %87, i32 1
  %94 = fsub float %93, %92
  %95 = fsub <2 x float> %85, %86
  %96 = extractelement <2 x float> %95, i32 0
  %97 = fmul float %91, %96
  %98 = extractelement <2 x float> %95, i32 1
  %99 = fmul float %94, %98
  %100 = fadd float %97, %99
  %101 = fcmp ult float %100, 0.000000e+00
  br i1 %101, label %128, label %102

102:                                              ; preds = %84
  %103 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %0, i64 2
  %104 = bitcast %struct.SkPoint* %103 to <2 x float>*
  %105 = load <2 x float>, <2 x float>* %104, align 4
  %106 = fsub <2 x float> %105, %86
  %107 = fmul <2 x float> %95, %106
  %108 = extractelement <2 x float> %107, i32 0
  %109 = extractelement <2 x float> %107, i32 1
  %110 = fadd float %108, %109
  %111 = fcmp ult float %110, 0.000000e+00
  br i1 %111, label %128, label %112

112:                                              ; preds = %102
  %113 = fsub <2 x float> %87, %85
  %114 = fsub <2 x float> %86, %85
  %115 = fmul <2 x float> %113, %114
  %116 = extractelement <2 x float> %115, i32 0
  %117 = extractelement <2 x float> %115, i32 1
  %118 = fadd float %116, %117
  %119 = fcmp ult float %118, 0.000000e+00
  br i1 %119, label %128, label %120

120:                                              ; preds = %112
  %121 = fsub <2 x float> %105, %85
  %122 = fmul <2 x float> %114, %121
  %123 = extractelement <2 x float> %122, i32 0
  %124 = extractelement <2 x float> %122, i32 1
  %125 = fadd float %123, %124
  %126 = fcmp ult float %125, 0.000000e+00
  br i1 %126, label %128, label %127

127:                                              ; preds = %120
  tail call fastcc void @_ZL10hair_cubicPK7SkPointPK8SkRegionP9SkBlitterPFvS1_iS4_S6_E(%struct.SkPoint* %0, %class.SkRegion* %88, %class.SkBlitter* %4, void (%struct.SkPoint*, i32, %class.SkRegion*, %class.SkBlitter*)* %5)
  br label %147

128:                                              ; preds = %120, %84, %102, %112
  %129 = bitcast [13 x %struct.SkPoint]* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 104, i8* nonnull %129) #10
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %129, i8 -1, i64 104, i1 false)
  %130 = bitcast [3 x float]* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 12, i8* nonnull %130) #10
  %131 = getelementptr inbounds [3 x float], [3 x float]* %8, i64 0, i64 0
  store float 0xFFFFFFFFE0000000, float* %131, align 4
  %132 = getelementptr inbounds [3 x float], [3 x float]* %8, i64 0, i64 1
  store float 0xFFFFFFFFE0000000, float* %132, align 4
  %133 = getelementptr inbounds [3 x float], [3 x float]* %8, i64 0, i64 2
  store float 0xFFFFFFFFE0000000, float* %133, align 4
  %134 = getelementptr inbounds [13 x %struct.SkPoint], [13 x %struct.SkPoint]* %7, i64 0, i64 0
  %135 = call i32 @_Z25SkChopCubicAtMaxCurvaturePK7SkPointPS_Pf(%struct.SkPoint* %0, %struct.SkPoint* nonnull %134, float* nonnull %131) #10
  %136 = icmp sgt i32 %135, 0
  br i1 %136, label %137, label %139

137:                                              ; preds = %128
  %138 = zext i32 %135 to i64
  br label %140

139:                                              ; preds = %140, %128
  call void @llvm.lifetime.end.p0i8(i64 12, i8* nonnull %130) #10
  call void @llvm.lifetime.end.p0i8(i64 104, i8* nonnull %129) #10
  br label %147

140:                                              ; preds = %140, %137
  %141 = phi i64 [ 0, %137 ], [ %145, %140 ]
  %142 = mul i64 %141, 3
  %143 = and i64 %142, 4294967295
  %144 = getelementptr inbounds [13 x %struct.SkPoint], [13 x %struct.SkPoint]* %7, i64 0, i64 %143
  call fastcc void @_ZL10hair_cubicPK7SkPointPK8SkRegionP9SkBlitterPFvS1_iS4_S6_E(%struct.SkPoint* %144, %class.SkRegion* %88, %class.SkBlitter* %4, void (%struct.SkPoint*, i32, %class.SkRegion*, %class.SkBlitter*)* %5)
  %145 = add nuw nsw i64 %141, 1
  %146 = icmp eq i64 %145, %138
  br i1 %146, label %139, label %140

147:                                              ; preds = %19, %52, %57, %62, %139, %127
  ret void
}

; Function Attrs: cold noreturn nounwind
declare void @llvm.trap() #7

; Function Attrs: nounwind readnone
declare <4 x float> @llvm.x86.sse.min.ps(<4 x float>, <4 x float>) #8

; Function Attrs: nounwind readnone
declare <4 x float> @llvm.x86.sse.max.ps(<4 x float>, <4 x float>) #8

; Function Attrs: nounwind readnone speculatable
declare float @llvm.fabs.f32(float) #3

; Function Attrs: nounwind readnone speculatable
declare i32 @llvm.ctlz.i32(i32, i1 immarg) #3

declare i32 @_ZNK7SkConic15computeQuadPOW2Ef(%struct.SkConic*, float) local_unnamed_addr #2

declare i32 @_ZNK7SkConic17chopIntoQuadsPOW2EP7SkPointi(%struct.SkConic*, %struct.SkPoint*, i32) local_unnamed_addr #2

declare void @_Z7sk_freePv(i8*) local_unnamed_addr #2

declare i8* @_Z15sk_malloc_throwmm(i64, i64) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define internal fastcc void @_ZL10hair_cubicPK7SkPointPK8SkRegionP9SkBlitterPFvS1_iS4_S6_E(%struct.SkPoint* nocapture readonly, %class.SkRegion*, %class.SkBlitter*, void (%struct.SkPoint*, i32, %class.SkRegion*, %class.SkBlitter*)* nocapture) unnamed_addr #4 {
  %5 = alloca [2 x %struct.SkPoint], align 16
  %6 = alloca [513 x %struct.SkPoint], align 16
  %7 = bitcast %struct.SkPoint* %0 to i64*
  %8 = load i64, i64* %7, align 1
  %9 = insertelement <2 x i64> <i64 undef, i64 0>, i64 %8, i32 0
  %10 = bitcast <2 x i64> %9 to <4 x float>
  %11 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %0, i64 1
  %12 = bitcast %struct.SkPoint* %11 to i64*
  %13 = load i64, i64* %12, align 1
  %14 = insertelement <2 x i64> <i64 undef, i64 0>, i64 %13, i32 0
  %15 = bitcast <2 x i64> %14 to <4 x float>
  %16 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %0, i64 2
  %17 = bitcast %struct.SkPoint* %16 to i64*
  %18 = load i64, i64* %17, align 1
  %19 = insertelement <2 x i64> <i64 undef, i64 0>, i64 %18, i32 0
  %20 = bitcast <2 x i64> %19 to <4 x float>
  %21 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %0, i64 3
  %22 = bitcast %struct.SkPoint* %21 to i64*
  %23 = load i64, i64* %22, align 1
  %24 = insertelement <2 x i64> <i64 undef, i64 0>, i64 %23, i32 0
  %25 = bitcast <2 x i64> %24 to <4 x float>
  %26 = fmul <4 x float> %25, <float 0x3FD5555560000000, float 0x3FD5555560000000, float 0x3FD5555560000000, float 0x3FD5555560000000>
  %27 = fmul <4 x float> %10, <float 0x3FE5555560000000, float 0x3FE5555560000000, float 0x3FE5555560000000, float 0x3FE5555560000000>
  %28 = fadd <4 x float> %27, %26
  %29 = fmul <4 x float> %10, <float 0x3FD5555560000000, float 0x3FD5555560000000, float 0x3FD5555560000000, float 0x3FD5555560000000>
  %30 = fmul <4 x float> %25, <float 0x3FE5555560000000, float 0x3FE5555560000000, float 0x3FE5555560000000, float 0x3FE5555560000000>
  %31 = fadd <4 x float> %29, %30
  %32 = fsub <4 x float> %15, %28
  %33 = fsub <4 x float> zeroinitializer, %32
  %34 = tail call <4 x float> @llvm.x86.sse.max.ps(<4 x float> %32, <4 x float> %33) #10
  %35 = fsub <4 x float> %20, %31
  %36 = fsub <4 x float> zeroinitializer, %35
  %37 = tail call <4 x float> @llvm.x86.sse.max.ps(<4 x float> %35, <4 x float> %36) #10
  %38 = tail call <4 x float> @llvm.x86.sse.max.ps(<4 x float> %34, <4 x float> %37) #10
  %39 = bitcast <4 x float> %38 to <2 x i64>
  %40 = extractelement <2 x i64> %39, i32 0
  %41 = trunc i64 %40 to i32
  %42 = bitcast i32 %41 to float
  %43 = lshr i64 %40, 32
  %44 = trunc i64 %43 to i32
  %45 = bitcast i32 %44 to float
  %46 = fcmp olt float %42, %45
  %47 = select i1 %46, float %45, float %42
  %48 = fcmp olt float %47, 1.250000e-01
  br i1 %48, label %68, label %49

49:                                               ; preds = %4
  %50 = fcmp olt float %47, 5.000000e-01
  br i1 %50, label %65, label %51

51:                                               ; preds = %49
  %52 = fcmp olt float %47, 2.000000e+00
  br i1 %52, label %65, label %53

53:                                               ; preds = %51
  %54 = fcmp olt float %47, 8.000000e+00
  br i1 %54, label %65, label %55

55:                                               ; preds = %53
  %56 = fcmp olt float %47, 3.200000e+01
  br i1 %56, label %65, label %57

57:                                               ; preds = %55
  %58 = fcmp olt float %47, 1.280000e+02
  br i1 %58, label %65, label %59

59:                                               ; preds = %57
  %60 = fcmp olt float %47, 5.120000e+02
  br i1 %60, label %65, label %61

61:                                               ; preds = %59
  %62 = fcmp olt float %47, 2.048000e+03
  br i1 %62, label %65, label %63

63:                                               ; preds = %61
  %64 = fcmp olt float %47, 8.192000e+03
  br i1 %64, label %65, label %74

65:                                               ; preds = %49, %51, %53, %55, %57, %59, %61, %63
  %66 = phi i32 [ 8, %63 ], [ 7, %61 ], [ 6, %59 ], [ 5, %57 ], [ 4, %55 ], [ 3, %53 ], [ 2, %51 ], [ 1, %49 ]
  %67 = shl i32 1, %66
  br label %74

68:                                               ; preds = %4
  %69 = bitcast [2 x %struct.SkPoint]* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %69) #10
  %70 = getelementptr inbounds [2 x %struct.SkPoint], [2 x %struct.SkPoint]* %5, i64 0, i64 0
  %71 = bitcast [2 x %struct.SkPoint]* %5 to i64*
  store i64 %8, i64* %71, align 16
  %72 = getelementptr inbounds [2 x %struct.SkPoint], [2 x %struct.SkPoint]* %5, i64 0, i64 1
  %73 = bitcast %struct.SkPoint* %72 to i64*
  store i64 %23, i64* %73, align 8
  call void %3(%struct.SkPoint* nonnull %70, i32 2, %class.SkRegion* %1, %class.SkBlitter* %2) #10
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %69) #10
  br label %131

74:                                               ; preds = %63, %65
  %75 = phi i32 [ 512, %63 ], [ %67, %65 ]
  %76 = fsub <4 x float> %15, %20
  %77 = fmul <4 x float> %76, <float 3.000000e+00, float 3.000000e+00, float undef, float undef>
  %78 = fadd <4 x float> %77, %25
  %79 = fsub <4 x float> %78, %10
  %80 = fadd <4 x float> %15, %15
  %81 = fsub <4 x float> %20, %80
  %82 = fadd <4 x float> %81, %10
  %83 = fmul <4 x float> %82, <float 3.000000e+00, float 3.000000e+00, float undef, float undef>
  %84 = fsub <4 x float> %15, %10
  %85 = fmul <4 x float> %84, <float 3.000000e+00, float 3.000000e+00, float undef, float undef>
  %86 = sitofp i32 %75 to float
  %87 = fdiv float 1.000000e+00, %86
  %88 = insertelement <4 x float> undef, float %87, i32 0
  %89 = shufflevector <4 x float> %88, <4 x float> undef, <4 x i32> zeroinitializer
  %90 = bitcast [513 x %struct.SkPoint]* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4104, i8* nonnull %90) #10
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %90, i8 -1, i64 4104, i1 false)
  %91 = getelementptr inbounds [513 x %struct.SkPoint], [513 x %struct.SkPoint]* %6, i64 0, i64 0
  %92 = bitcast [513 x %struct.SkPoint]* %6 to i64*
  store i64 %8, i64* %92, align 16
  %93 = zext i32 %75 to i64
  br label %100

94:                                               ; preds = %100
  %95 = bitcast <2 x i64> %120 to <16 x i8>
  %96 = icmp slt <16 x i8> %95, zeroinitializer
  %97 = bitcast <16 x i1> %96 to i16
  %98 = and i16 %97, 255
  %99 = icmp eq i16 %98, 255
  br i1 %99, label %125, label %130

100:                                              ; preds = %100, %74
  %101 = phi i64 [ 1, %74 ], [ %123, %100 ]
  %102 = phi <4 x float> [ zeroinitializer, %74 ], [ %104, %100 ]
  %103 = phi <2 x i64> [ <i64 -1, i64 -1>, %74 ], [ %120, %100 ]
  %104 = fadd <4 x float> %89, %102
  %105 = fmul <4 x float> %79, %104
  %106 = fadd <4 x float> %83, %105
  %107 = fmul <4 x float> %104, %106
  %108 = fadd <4 x float> %85, %107
  %109 = fmul <4 x float> %104, %108
  %110 = fadd <4 x float> %109, %10
  %111 = bitcast <4 x float> %110 to <2 x i64>
  %112 = shufflevector <4 x float> %110, <4 x float> undef, <2 x i32> <i32 0, i32 1>
  %113 = insertelement <2 x i64> %111, i64 0, i32 1
  %114 = bitcast <2 x i64> %113 to <4 x i32>
  %115 = and <4 x i32> %114, <i32 2139095040, i32 2139095040, i32 2139095040, i32 2139095040>
  %116 = icmp eq <4 x i32> %115, <i32 2139095040, i32 2139095040, i32 2139095040, i32 2139095040>
  %117 = sext <4 x i1> %116 to <4 x i32>
  %118 = bitcast <4 x i32> %117 to <2 x i64>
  %119 = xor <2 x i64> %118, <i64 -1, i64 -1>
  %120 = and <2 x i64> %103, %119
  %121 = getelementptr inbounds [513 x %struct.SkPoint], [513 x %struct.SkPoint]* %6, i64 0, i64 %101
  %122 = bitcast %struct.SkPoint* %121 to <2 x float>*
  store <2 x float> %112, <2 x float>* %122, align 8
  %123 = add nuw nsw i64 %101, 1
  %124 = icmp eq i64 %123, %93
  br i1 %124, label %94, label %100

125:                                              ; preds = %94
  %126 = sext i32 %75 to i64
  %127 = getelementptr inbounds [513 x %struct.SkPoint], [513 x %struct.SkPoint]* %6, i64 0, i64 %126
  %128 = bitcast %struct.SkPoint* %127 to i64*
  store i64 %23, i64* %128, align 8
  %129 = add nsw i32 %75, 1
  call void %3(%struct.SkPoint* nonnull %91, i32 %129, %class.SkRegion* %1, %class.SkBlitter* %2) #10
  br label %130

130:                                              ; preds = %125, %94
  call void @llvm.lifetime.end.p0i8(i64 4104, i8* nonnull %90) #10
  br label %131

131:                                              ; preds = %130, %68
  ret void
}

declare i32 @_Z25SkChopCubicAtMaxCurvaturePK7SkPointPS_Pf(%struct.SkPoint*, %struct.SkPoint*, float*) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_Z10extend_ptsILN7SkPaint3CapE2EEvN6SkPath4VerbES3_P7SkPointi(i32, i32, %struct.SkPoint*, i32) local_unnamed_addr #9 comdat {
  %5 = alloca <2 x float>, align 8
  %6 = bitcast <2 x float>* %5 to %struct.SkPoint*
  %7 = alloca <2 x float>, align 8
  %8 = bitcast <2 x float>* %7 to i8*
  %9 = bitcast <2 x float>* %7 to %struct.SkPoint*
  %10 = icmp eq i32 %0, 0
  br i1 %10, label %11, label %126

11:                                               ; preds = %4
  %12 = add nsw i32 %3, -1
  %13 = bitcast <2 x float>* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %13) #10
  %14 = getelementptr inbounds <2 x float>, <2 x float>* %5, i64 0, i64 0
  store float 0xFFFFFFFFE0000000, float* %14, align 8
  %15 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %6, i64 0, i32 1
  store float 0xFFFFFFFFE0000000, float* %15, align 4
  %16 = bitcast %struct.SkPoint* %2 to <2 x float>*
  %17 = load <2 x float>, <2 x float>* %16, align 4
  br label %18

18:                                               ; preds = %29, %11
  %19 = phi i32 [ %12, %11 ], [ %30, %29 ]
  %20 = phi %struct.SkPoint* [ %2, %11 ], [ %21, %29 ]
  %21 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %20, i64 1
  %22 = bitcast %struct.SkPoint* %21 to <2 x float>*
  %23 = load <2 x float>, <2 x float>* %22, align 4
  %24 = fsub <2 x float> %17, %23
  %25 = fcmp oeq <2 x float> %24, zeroinitializer
  %26 = extractelement <2 x i1> %25, i32 0
  %27 = extractelement <2 x i1> %25, i32 1
  %28 = and i1 %26, %27
  br i1 %28, label %29, label %33

29:                                               ; preds = %18
  %30 = add nsw i32 %19, -1
  %31 = icmp sgt i32 %30, 0
  br i1 %31, label %18, label %32

32:                                               ; preds = %29
  store <2 x float> %24, <2 x float>* %5, align 8
  store float 1.000000e+00, float* %14, align 8
  store float 0.000000e+00, float* %15, align 4
  br label %37

33:                                               ; preds = %18
  store <2 x float> %24, <2 x float>* %5, align 8
  %34 = call zeroext i1 @_ZN7SkPoint9normalizeEv(%struct.SkPoint* nonnull %6) #10
  %35 = load <2 x float>, <2 x float>* %5, align 8
  %36 = fmul <2 x float> %35, <float 5.000000e-01, float 5.000000e-01>
  br label %37

37:                                               ; preds = %33, %32
  %38 = phi i32 [ %12, %32 ], [ %19, %33 ]
  %39 = phi <2 x float> [ <float 5.000000e-01, float 0.000000e+00>, %32 ], [ %36, %33 ]
  %40 = add nsw i32 %38, 1
  %41 = icmp slt i32 %40, %3
  %42 = select i1 %41, i32 %3, i32 %40
  %43 = xor i32 %38, -1
  %44 = add i32 %42, %43
  %45 = zext i32 %44 to i64
  %46 = add nuw nsw i64 %45, 1
  %47 = icmp ult i64 %46, 4
  br i1 %47, label %108, label %48

48:                                               ; preds = %37
  %49 = and i64 %46, 8589934588
  %50 = trunc i64 %49 to i32
  %51 = add i32 %38, %50
  %52 = getelementptr %struct.SkPoint, %struct.SkPoint* %2, i64 %49
  %53 = shufflevector <2 x float> %39, <2 x float> undef, <4 x i32> zeroinitializer
  %54 = shufflevector <2 x float> %39, <2 x float> undef, <4 x i32> <i32 1, i32 1, i32 1, i32 1>
  %55 = add nsw i64 %49, -4
  %56 = lshr exact i64 %55, 2
  %57 = add nuw nsw i64 %56, 1
  %58 = and i64 %57, 1
  %59 = icmp eq i64 %55, 0
  br i1 %59, label %91, label %60

60:                                               ; preds = %48
  %61 = sub nuw nsw i64 %57, %58
  br label %62

62:                                               ; preds = %62, %60
  %63 = phi i64 [ 0, %60 ], [ %88, %62 ]
  %64 = phi i64 [ %61, %60 ], [ %89, %62 ]
  %65 = getelementptr %struct.SkPoint, %struct.SkPoint* %2, i64 %63
  %66 = bitcast %struct.SkPoint* %65 to <8 x float>*
  %67 = load <8 x float>, <8 x float>* %66, align 4
  %68 = shufflevector <8 x float> %67, <8 x float> undef, <4 x i32> <i32 0, i32 2, i32 4, i32 6>
  %69 = shufflevector <8 x float> %67, <8 x float> undef, <4 x i32> <i32 1, i32 3, i32 5, i32 7>
  %70 = fadd <4 x float> %68, %53
  %71 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %2, i64 %63, i32 1
  %72 = fadd <4 x float> %69, %54
  %73 = getelementptr inbounds float, float* %71, i64 -1
  %74 = bitcast float* %73 to <8 x float>*
  %75 = shufflevector <4 x float> %70, <4 x float> %72, <8 x i32> <i32 0, i32 4, i32 1, i32 5, i32 2, i32 6, i32 3, i32 7>
  store <8 x float> %75, <8 x float>* %74, align 4
  %76 = or i64 %63, 4
  %77 = getelementptr %struct.SkPoint, %struct.SkPoint* %2, i64 %76
  %78 = bitcast %struct.SkPoint* %77 to <8 x float>*
  %79 = load <8 x float>, <8 x float>* %78, align 4
  %80 = shufflevector <8 x float> %79, <8 x float> undef, <4 x i32> <i32 0, i32 2, i32 4, i32 6>
  %81 = shufflevector <8 x float> %79, <8 x float> undef, <4 x i32> <i32 1, i32 3, i32 5, i32 7>
  %82 = fadd <4 x float> %80, %53
  %83 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %2, i64 %76, i32 1
  %84 = fadd <4 x float> %81, %54
  %85 = getelementptr inbounds float, float* %83, i64 -1
  %86 = bitcast float* %85 to <8 x float>*
  %87 = shufflevector <4 x float> %82, <4 x float> %84, <8 x i32> <i32 0, i32 4, i32 1, i32 5, i32 2, i32 6, i32 3, i32 7>
  store <8 x float> %87, <8 x float>* %86, align 4
  %88 = add i64 %63, 8
  %89 = add i64 %64, -2
  %90 = icmp eq i64 %89, 0
  br i1 %90, label %91, label %62, !llvm.loop !22

91:                                               ; preds = %62, %48
  %92 = phi i64 [ 0, %48 ], [ %88, %62 ]
  %93 = icmp eq i64 %58, 0
  br i1 %93, label %106, label %94

94:                                               ; preds = %91
  %95 = getelementptr %struct.SkPoint, %struct.SkPoint* %2, i64 %92
  %96 = bitcast %struct.SkPoint* %95 to <8 x float>*
  %97 = load <8 x float>, <8 x float>* %96, align 4
  %98 = shufflevector <8 x float> %97, <8 x float> undef, <4 x i32> <i32 0, i32 2, i32 4, i32 6>
  %99 = shufflevector <8 x float> %97, <8 x float> undef, <4 x i32> <i32 1, i32 3, i32 5, i32 7>
  %100 = fadd <4 x float> %98, %53
  %101 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %2, i64 %92, i32 1
  %102 = fadd <4 x float> %99, %54
  %103 = getelementptr inbounds float, float* %101, i64 -1
  %104 = bitcast float* %103 to <8 x float>*
  %105 = shufflevector <4 x float> %100, <4 x float> %102, <8 x i32> <i32 0, i32 4, i32 1, i32 5, i32 2, i32 6, i32 3, i32 7>
  store <8 x float> %105, <8 x float>* %104, align 4
  br label %106

106:                                              ; preds = %91, %94
  %107 = icmp eq i64 %46, %49
  br i1 %107, label %125, label %108

108:                                              ; preds = %106, %37
  %109 = phi i32 [ %38, %37 ], [ %51, %106 ]
  %110 = phi %struct.SkPoint* [ %2, %37 ], [ %52, %106 ]
  %111 = extractelement <2 x float> %39, i32 0
  %112 = extractelement <2 x float> %39, i32 1
  br label %113

113:                                              ; preds = %108, %113
  %114 = phi i32 [ %123, %113 ], [ %109, %108 ]
  %115 = phi %struct.SkPoint* [ %122, %113 ], [ %110, %108 ]
  %116 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %115, i64 0, i32 0
  %117 = load float, float* %116, align 4
  %118 = fadd float %117, %111
  store float %118, float* %116, align 4
  %119 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %115, i64 0, i32 1
  %120 = load float, float* %119, align 4
  %121 = fadd float %120, %112
  store float %121, float* %119, align 4
  %122 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %115, i64 1
  %123 = add nsw i32 %114, 1
  %124 = icmp slt i32 %123, %3
  br i1 %124, label %113, label %125, !llvm.loop !24

125:                                              ; preds = %113, %106
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %13) #10
  br label %126

126:                                              ; preds = %125, %4
  switch i32 %1, label %236 [
    i32 6, label %127
    i32 5, label %127
    i32 0, label %127
  ]

127:                                              ; preds = %126, %126, %126
  %128 = add nsw i32 %3, -1
  %129 = sext i32 %128 to i64
  %130 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %2, i64 %129
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %8) #10
  %131 = getelementptr inbounds <2 x float>, <2 x float>* %7, i64 0, i64 0
  store float 0xFFFFFFFFE0000000, float* %131, align 8
  %132 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %9, i64 0, i32 1
  store float 0xFFFFFFFFE0000000, float* %132, align 4
  %133 = bitcast %struct.SkPoint* %130 to <2 x float>*
  %134 = load <2 x float>, <2 x float>* %133, align 4
  br label %135

135:                                              ; preds = %147, %127
  %136 = phi %struct.SkPoint* [ %130, %127 ], [ %138, %147 ]
  %137 = phi i32 [ %128, %127 ], [ %148, %147 ]
  %138 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %136, i64 -1
  %139 = bitcast %struct.SkPoint* %138 to <2 x float>*
  %140 = load <2 x float>, <2 x float>* %139, align 4
  %141 = fsub <2 x float> %134, %140
  %142 = extractelement <2 x float> %141, i32 0
  %143 = extractelement <2 x float> %141, i32 1
  store <2 x float> %141, <2 x float>* %7, align 8
  %144 = fcmp oeq float %142, 0.000000e+00
  %145 = fcmp oeq float %143, 0.000000e+00
  %146 = and i1 %144, %145
  br i1 %146, label %147, label %151

147:                                              ; preds = %135
  %148 = add nsw i32 %137, -1
  %149 = icmp sgt i32 %148, 0
  br i1 %149, label %135, label %150

150:                                              ; preds = %147
  store float -1.000000e+00, float* %131, align 8
  store float 0.000000e+00, float* %132, align 4
  br label %153

151:                                              ; preds = %135
  %152 = call zeroext i1 @_ZN7SkPoint9normalizeEv(%struct.SkPoint* nonnull %9) #10
  br label %153

153:                                              ; preds = %151, %150
  %154 = phi i32 [ %128, %150 ], [ %137, %151 ]
  %155 = add nsw i32 %154, 1
  %156 = icmp slt i32 %155, %3
  %157 = select i1 %156, i32 %3, i32 %155
  %158 = xor i32 %154, -1
  %159 = add i32 %157, %158
  %160 = zext i32 %159 to i64
  %161 = add nuw nsw i64 %160, 1
  %162 = icmp ult i64 %161, 4
  br i1 %162, label %216, label %163

163:                                              ; preds = %153
  %164 = add nsw i32 %154, 1
  %165 = icmp slt i32 %164, %3
  %166 = select i1 %165, i32 %3, i32 %164
  %167 = xor i32 %154, -1
  %168 = add i32 %166, %167
  %169 = zext i32 %168 to i64
  %170 = sub nsw i64 %129, %169
  %171 = getelementptr %struct.SkPoint, %struct.SkPoint* %2, i64 %170
  %172 = bitcast %struct.SkPoint* %171 to i8*
  %173 = add nsw i64 %129, 1
  %174 = getelementptr inbounds i8, i8* %8, i64 5
  %175 = icmp ugt i8* %174, %172
  %176 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %2, i64 %173, i32 0
  %177 = icmp ult float* %132, %176
  %178 = and i1 %175, %177
  br i1 %178, label %216, label %179

179:                                              ; preds = %163
  %180 = and i64 %161, 8589934588
  %181 = sub nsw i64 0, %180
  %182 = getelementptr %struct.SkPoint, %struct.SkPoint* %130, i64 %181
  %183 = trunc i64 %180 to i32
  %184 = add i32 %154, %183
  %185 = load float, float* %131, align 8, !alias.scope !26
  %186 = insertelement <4 x float> undef, float %185, i32 0
  %187 = fmul <4 x float> %186, <float 5.000000e-01, float undef, float undef, float undef>
  %188 = shufflevector <4 x float> %187, <4 x float> undef, <4 x i32> zeroinitializer
  %189 = load float, float* %132, align 4, !alias.scope !26
  %190 = insertelement <4 x float> undef, float %189, i32 0
  %191 = fmul <4 x float> %190, <float 5.000000e-01, float undef, float undef, float undef>
  %192 = shufflevector <4 x float> %191, <4 x float> undef, <4 x i32> zeroinitializer
  br label %193

193:                                              ; preds = %193, %179
  %194 = phi i64 [ 0, %179 ], [ %212, %193 ]
  %195 = sub i64 0, %194
  %196 = getelementptr %struct.SkPoint, %struct.SkPoint* %130, i64 %195
  %197 = getelementptr %struct.SkPoint, %struct.SkPoint* %196, i64 -3
  %198 = bitcast %struct.SkPoint* %197 to <8 x float>*
  %199 = load <8 x float>, <8 x float>* %198, align 4
  %200 = shufflevector <8 x float> %199, <8 x float> undef, <4 x i32> <i32 0, i32 2, i32 4, i32 6>
  %201 = shufflevector <4 x float> %200, <4 x float> undef, <4 x i32> <i32 3, i32 2, i32 1, i32 0>
  %202 = shufflevector <8 x float> %199, <8 x float> undef, <4 x i32> <i32 1, i32 3, i32 5, i32 7>
  %203 = shufflevector <4 x float> %202, <4 x float> undef, <4 x i32> <i32 3, i32 2, i32 1, i32 0>
  %204 = fadd <4 x float> %201, %188
  %205 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %196, i64 0, i32 1
  %206 = fadd <4 x float> %203, %192
  %207 = getelementptr inbounds float, float* %205, i64 -7
  %208 = bitcast float* %207 to <8 x float>*
  %209 = shufflevector <4 x float> %204, <4 x float> undef, <4 x i32> <i32 3, i32 2, i32 1, i32 0>
  %210 = shufflevector <4 x float> %206, <4 x float> undef, <4 x i32> <i32 3, i32 2, i32 1, i32 0>
  %211 = shufflevector <4 x float> %209, <4 x float> %210, <8 x i32> <i32 0, i32 4, i32 1, i32 5, i32 2, i32 6, i32 3, i32 7>
  store <8 x float> %211, <8 x float>* %208, align 4
  %212 = add i64 %194, 4
  %213 = icmp eq i64 %212, %180
  br i1 %213, label %214, label %193, !llvm.loop !29

214:                                              ; preds = %193
  %215 = icmp eq i64 %161, %180
  br i1 %215, label %235, label %216

216:                                              ; preds = %214, %163, %153
  %217 = phi %struct.SkPoint* [ %130, %163 ], [ %130, %153 ], [ %182, %214 ]
  %218 = phi i32 [ %154, %163 ], [ %154, %153 ], [ %184, %214 ]
  br label %219

219:                                              ; preds = %216, %219
  %220 = phi %struct.SkPoint* [ %232, %219 ], [ %217, %216 ]
  %221 = phi i32 [ %233, %219 ], [ %218, %216 ]
  %222 = load float, float* %131, align 8
  %223 = fmul float %222, 5.000000e-01
  %224 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %220, i64 0, i32 0
  %225 = load float, float* %224, align 4
  %226 = fadd float %225, %223
  store float %226, float* %224, align 4
  %227 = load float, float* %132, align 4
  %228 = fmul float %227, 5.000000e-01
  %229 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %220, i64 0, i32 1
  %230 = load float, float* %229, align 4
  %231 = fadd float %230, %228
  store float %231, float* %229, align 4
  %232 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %220, i64 -1
  %233 = add nsw i32 %221, 1
  %234 = icmp slt i32 %233, %3
  br i1 %234, label %219, label %235, !llvm.loop !30

235:                                              ; preds = %219, %214
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %8) #10
  br label %236

236:                                              ; preds = %126, %235
  ret void
}

declare zeroext i1 @_ZN7SkPoint9normalizeEv(%struct.SkPoint*) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_Z10extend_ptsILN7SkPaint3CapE1EEvN6SkPath4VerbES3_P7SkPointi(i32, i32, %struct.SkPoint*, i32) local_unnamed_addr #9 comdat {
  %5 = alloca <2 x float>, align 8
  %6 = bitcast <2 x float>* %5 to %struct.SkPoint*
  %7 = alloca <2 x float>, align 8
  %8 = bitcast <2 x float>* %7 to i8*
  %9 = bitcast <2 x float>* %7 to %struct.SkPoint*
  %10 = icmp eq i32 %0, 0
  br i1 %10, label %11, label %126

11:                                               ; preds = %4
  %12 = add nsw i32 %3, -1
  %13 = bitcast <2 x float>* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %13) #10
  %14 = getelementptr inbounds <2 x float>, <2 x float>* %5, i64 0, i64 0
  store float 0xFFFFFFFFE0000000, float* %14, align 8
  %15 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %6, i64 0, i32 1
  store float 0xFFFFFFFFE0000000, float* %15, align 4
  %16 = bitcast %struct.SkPoint* %2 to <2 x float>*
  %17 = load <2 x float>, <2 x float>* %16, align 4
  br label %18

18:                                               ; preds = %29, %11
  %19 = phi i32 [ %12, %11 ], [ %30, %29 ]
  %20 = phi %struct.SkPoint* [ %2, %11 ], [ %21, %29 ]
  %21 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %20, i64 1
  %22 = bitcast %struct.SkPoint* %21 to <2 x float>*
  %23 = load <2 x float>, <2 x float>* %22, align 4
  %24 = fsub <2 x float> %17, %23
  %25 = fcmp oeq <2 x float> %24, zeroinitializer
  %26 = extractelement <2 x i1> %25, i32 0
  %27 = extractelement <2 x i1> %25, i32 1
  %28 = and i1 %26, %27
  br i1 %28, label %29, label %33

29:                                               ; preds = %18
  %30 = add nsw i32 %19, -1
  %31 = icmp sgt i32 %30, 0
  br i1 %31, label %18, label %32

32:                                               ; preds = %29
  store <2 x float> %24, <2 x float>* %5, align 8
  store float 1.000000e+00, float* %14, align 8
  store float 0.000000e+00, float* %15, align 4
  br label %37

33:                                               ; preds = %18
  store <2 x float> %24, <2 x float>* %5, align 8
  %34 = call zeroext i1 @_ZN7SkPoint9normalizeEv(%struct.SkPoint* nonnull %6) #10
  %35 = load <2 x float>, <2 x float>* %5, align 8
  %36 = fmul <2 x float> %35, <float 0x3FD921FB60000000, float 0x3FD921FB60000000>
  br label %37

37:                                               ; preds = %33, %32
  %38 = phi i32 [ %12, %32 ], [ %19, %33 ]
  %39 = phi <2 x float> [ <float 0x3FD921FB60000000, float 0.000000e+00>, %32 ], [ %36, %33 ]
  %40 = add nsw i32 %38, 1
  %41 = icmp slt i32 %40, %3
  %42 = select i1 %41, i32 %3, i32 %40
  %43 = xor i32 %38, -1
  %44 = add i32 %42, %43
  %45 = zext i32 %44 to i64
  %46 = add nuw nsw i64 %45, 1
  %47 = icmp ult i64 %46, 4
  br i1 %47, label %108, label %48

48:                                               ; preds = %37
  %49 = and i64 %46, 8589934588
  %50 = trunc i64 %49 to i32
  %51 = add i32 %38, %50
  %52 = getelementptr %struct.SkPoint, %struct.SkPoint* %2, i64 %49
  %53 = shufflevector <2 x float> %39, <2 x float> undef, <4 x i32> zeroinitializer
  %54 = shufflevector <2 x float> %39, <2 x float> undef, <4 x i32> <i32 1, i32 1, i32 1, i32 1>
  %55 = add nsw i64 %49, -4
  %56 = lshr exact i64 %55, 2
  %57 = add nuw nsw i64 %56, 1
  %58 = and i64 %57, 1
  %59 = icmp eq i64 %55, 0
  br i1 %59, label %91, label %60

60:                                               ; preds = %48
  %61 = sub nuw nsw i64 %57, %58
  br label %62

62:                                               ; preds = %62, %60
  %63 = phi i64 [ 0, %60 ], [ %88, %62 ]
  %64 = phi i64 [ %61, %60 ], [ %89, %62 ]
  %65 = getelementptr %struct.SkPoint, %struct.SkPoint* %2, i64 %63
  %66 = bitcast %struct.SkPoint* %65 to <8 x float>*
  %67 = load <8 x float>, <8 x float>* %66, align 4
  %68 = shufflevector <8 x float> %67, <8 x float> undef, <4 x i32> <i32 0, i32 2, i32 4, i32 6>
  %69 = shufflevector <8 x float> %67, <8 x float> undef, <4 x i32> <i32 1, i32 3, i32 5, i32 7>
  %70 = fadd <4 x float> %68, %53
  %71 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %2, i64 %63, i32 1
  %72 = fadd <4 x float> %69, %54
  %73 = getelementptr inbounds float, float* %71, i64 -1
  %74 = bitcast float* %73 to <8 x float>*
  %75 = shufflevector <4 x float> %70, <4 x float> %72, <8 x i32> <i32 0, i32 4, i32 1, i32 5, i32 2, i32 6, i32 3, i32 7>
  store <8 x float> %75, <8 x float>* %74, align 4
  %76 = or i64 %63, 4
  %77 = getelementptr %struct.SkPoint, %struct.SkPoint* %2, i64 %76
  %78 = bitcast %struct.SkPoint* %77 to <8 x float>*
  %79 = load <8 x float>, <8 x float>* %78, align 4
  %80 = shufflevector <8 x float> %79, <8 x float> undef, <4 x i32> <i32 0, i32 2, i32 4, i32 6>
  %81 = shufflevector <8 x float> %79, <8 x float> undef, <4 x i32> <i32 1, i32 3, i32 5, i32 7>
  %82 = fadd <4 x float> %80, %53
  %83 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %2, i64 %76, i32 1
  %84 = fadd <4 x float> %81, %54
  %85 = getelementptr inbounds float, float* %83, i64 -1
  %86 = bitcast float* %85 to <8 x float>*
  %87 = shufflevector <4 x float> %82, <4 x float> %84, <8 x i32> <i32 0, i32 4, i32 1, i32 5, i32 2, i32 6, i32 3, i32 7>
  store <8 x float> %87, <8 x float>* %86, align 4
  %88 = add i64 %63, 8
  %89 = add i64 %64, -2
  %90 = icmp eq i64 %89, 0
  br i1 %90, label %91, label %62, !llvm.loop !31

91:                                               ; preds = %62, %48
  %92 = phi i64 [ 0, %48 ], [ %88, %62 ]
  %93 = icmp eq i64 %58, 0
  br i1 %93, label %106, label %94

94:                                               ; preds = %91
  %95 = getelementptr %struct.SkPoint, %struct.SkPoint* %2, i64 %92
  %96 = bitcast %struct.SkPoint* %95 to <8 x float>*
  %97 = load <8 x float>, <8 x float>* %96, align 4
  %98 = shufflevector <8 x float> %97, <8 x float> undef, <4 x i32> <i32 0, i32 2, i32 4, i32 6>
  %99 = shufflevector <8 x float> %97, <8 x float> undef, <4 x i32> <i32 1, i32 3, i32 5, i32 7>
  %100 = fadd <4 x float> %98, %53
  %101 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %2, i64 %92, i32 1
  %102 = fadd <4 x float> %99, %54
  %103 = getelementptr inbounds float, float* %101, i64 -1
  %104 = bitcast float* %103 to <8 x float>*
  %105 = shufflevector <4 x float> %100, <4 x float> %102, <8 x i32> <i32 0, i32 4, i32 1, i32 5, i32 2, i32 6, i32 3, i32 7>
  store <8 x float> %105, <8 x float>* %104, align 4
  br label %106

106:                                              ; preds = %91, %94
  %107 = icmp eq i64 %46, %49
  br i1 %107, label %125, label %108

108:                                              ; preds = %106, %37
  %109 = phi i32 [ %38, %37 ], [ %51, %106 ]
  %110 = phi %struct.SkPoint* [ %2, %37 ], [ %52, %106 ]
  %111 = extractelement <2 x float> %39, i32 0
  %112 = extractelement <2 x float> %39, i32 1
  br label %113

113:                                              ; preds = %108, %113
  %114 = phi i32 [ %123, %113 ], [ %109, %108 ]
  %115 = phi %struct.SkPoint* [ %122, %113 ], [ %110, %108 ]
  %116 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %115, i64 0, i32 0
  %117 = load float, float* %116, align 4
  %118 = fadd float %117, %111
  store float %118, float* %116, align 4
  %119 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %115, i64 0, i32 1
  %120 = load float, float* %119, align 4
  %121 = fadd float %120, %112
  store float %121, float* %119, align 4
  %122 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %115, i64 1
  %123 = add nsw i32 %114, 1
  %124 = icmp slt i32 %123, %3
  br i1 %124, label %113, label %125, !llvm.loop !32

125:                                              ; preds = %113, %106
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %13) #10
  br label %126

126:                                              ; preds = %125, %4
  switch i32 %1, label %236 [
    i32 6, label %127
    i32 5, label %127
    i32 0, label %127
  ]

127:                                              ; preds = %126, %126, %126
  %128 = add nsw i32 %3, -1
  %129 = sext i32 %128 to i64
  %130 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %2, i64 %129
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %8) #10
  %131 = getelementptr inbounds <2 x float>, <2 x float>* %7, i64 0, i64 0
  store float 0xFFFFFFFFE0000000, float* %131, align 8
  %132 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %9, i64 0, i32 1
  store float 0xFFFFFFFFE0000000, float* %132, align 4
  %133 = bitcast %struct.SkPoint* %130 to <2 x float>*
  %134 = load <2 x float>, <2 x float>* %133, align 4
  br label %135

135:                                              ; preds = %147, %127
  %136 = phi %struct.SkPoint* [ %130, %127 ], [ %138, %147 ]
  %137 = phi i32 [ %128, %127 ], [ %148, %147 ]
  %138 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %136, i64 -1
  %139 = bitcast %struct.SkPoint* %138 to <2 x float>*
  %140 = load <2 x float>, <2 x float>* %139, align 4
  %141 = fsub <2 x float> %134, %140
  %142 = extractelement <2 x float> %141, i32 0
  %143 = extractelement <2 x float> %141, i32 1
  store <2 x float> %141, <2 x float>* %7, align 8
  %144 = fcmp oeq float %142, 0.000000e+00
  %145 = fcmp oeq float %143, 0.000000e+00
  %146 = and i1 %144, %145
  br i1 %146, label %147, label %151

147:                                              ; preds = %135
  %148 = add nsw i32 %137, -1
  %149 = icmp sgt i32 %148, 0
  br i1 %149, label %135, label %150

150:                                              ; preds = %147
  store float -1.000000e+00, float* %131, align 8
  store float 0.000000e+00, float* %132, align 4
  br label %153

151:                                              ; preds = %135
  %152 = call zeroext i1 @_ZN7SkPoint9normalizeEv(%struct.SkPoint* nonnull %9) #10
  br label %153

153:                                              ; preds = %151, %150
  %154 = phi i32 [ %128, %150 ], [ %137, %151 ]
  %155 = add nsw i32 %154, 1
  %156 = icmp slt i32 %155, %3
  %157 = select i1 %156, i32 %3, i32 %155
  %158 = xor i32 %154, -1
  %159 = add i32 %157, %158
  %160 = zext i32 %159 to i64
  %161 = add nuw nsw i64 %160, 1
  %162 = icmp ult i64 %161, 4
  br i1 %162, label %216, label %163

163:                                              ; preds = %153
  %164 = add nsw i32 %154, 1
  %165 = icmp slt i32 %164, %3
  %166 = select i1 %165, i32 %3, i32 %164
  %167 = xor i32 %154, -1
  %168 = add i32 %166, %167
  %169 = zext i32 %168 to i64
  %170 = sub nsw i64 %129, %169
  %171 = getelementptr %struct.SkPoint, %struct.SkPoint* %2, i64 %170
  %172 = bitcast %struct.SkPoint* %171 to i8*
  %173 = add nsw i64 %129, 1
  %174 = getelementptr inbounds i8, i8* %8, i64 5
  %175 = icmp ugt i8* %174, %172
  %176 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %2, i64 %173, i32 0
  %177 = icmp ult float* %132, %176
  %178 = and i1 %175, %177
  br i1 %178, label %216, label %179

179:                                              ; preds = %163
  %180 = and i64 %161, 8589934588
  %181 = sub nsw i64 0, %180
  %182 = getelementptr %struct.SkPoint, %struct.SkPoint* %130, i64 %181
  %183 = trunc i64 %180 to i32
  %184 = add i32 %154, %183
  %185 = load float, float* %131, align 8, !alias.scope !33
  %186 = insertelement <4 x float> undef, float %185, i32 0
  %187 = fmul <4 x float> %186, <float 0x3FD921FB60000000, float undef, float undef, float undef>
  %188 = shufflevector <4 x float> %187, <4 x float> undef, <4 x i32> zeroinitializer
  %189 = load float, float* %132, align 4, !alias.scope !33
  %190 = insertelement <4 x float> undef, float %189, i32 0
  %191 = fmul <4 x float> %190, <float 0x3FD921FB60000000, float undef, float undef, float undef>
  %192 = shufflevector <4 x float> %191, <4 x float> undef, <4 x i32> zeroinitializer
  br label %193

193:                                              ; preds = %193, %179
  %194 = phi i64 [ 0, %179 ], [ %212, %193 ]
  %195 = sub i64 0, %194
  %196 = getelementptr %struct.SkPoint, %struct.SkPoint* %130, i64 %195
  %197 = getelementptr %struct.SkPoint, %struct.SkPoint* %196, i64 -3
  %198 = bitcast %struct.SkPoint* %197 to <8 x float>*
  %199 = load <8 x float>, <8 x float>* %198, align 4
  %200 = shufflevector <8 x float> %199, <8 x float> undef, <4 x i32> <i32 0, i32 2, i32 4, i32 6>
  %201 = shufflevector <4 x float> %200, <4 x float> undef, <4 x i32> <i32 3, i32 2, i32 1, i32 0>
  %202 = shufflevector <8 x float> %199, <8 x float> undef, <4 x i32> <i32 1, i32 3, i32 5, i32 7>
  %203 = shufflevector <4 x float> %202, <4 x float> undef, <4 x i32> <i32 3, i32 2, i32 1, i32 0>
  %204 = fadd <4 x float> %201, %188
  %205 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %196, i64 0, i32 1
  %206 = fadd <4 x float> %203, %192
  %207 = getelementptr inbounds float, float* %205, i64 -7
  %208 = bitcast float* %207 to <8 x float>*
  %209 = shufflevector <4 x float> %204, <4 x float> undef, <4 x i32> <i32 3, i32 2, i32 1, i32 0>
  %210 = shufflevector <4 x float> %206, <4 x float> undef, <4 x i32> <i32 3, i32 2, i32 1, i32 0>
  %211 = shufflevector <4 x float> %209, <4 x float> %210, <8 x i32> <i32 0, i32 4, i32 1, i32 5, i32 2, i32 6, i32 3, i32 7>
  store <8 x float> %211, <8 x float>* %208, align 4
  %212 = add i64 %194, 4
  %213 = icmp eq i64 %212, %180
  br i1 %213, label %214, label %193, !llvm.loop !36

214:                                              ; preds = %193
  %215 = icmp eq i64 %161, %180
  br i1 %215, label %235, label %216

216:                                              ; preds = %214, %163, %153
  %217 = phi %struct.SkPoint* [ %130, %163 ], [ %130, %153 ], [ %182, %214 ]
  %218 = phi i32 [ %154, %163 ], [ %154, %153 ], [ %184, %214 ]
  br label %219

219:                                              ; preds = %216, %219
  %220 = phi %struct.SkPoint* [ %232, %219 ], [ %217, %216 ]
  %221 = phi i32 [ %233, %219 ], [ %218, %216 ]
  %222 = load float, float* %131, align 8
  %223 = fmul float %222, 0x3FD921FB60000000
  %224 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %220, i64 0, i32 0
  %225 = load float, float* %224, align 4
  %226 = fadd float %225, %223
  store float %226, float* %224, align 4
  %227 = load float, float* %132, align 4
  %228 = fmul float %227, 0x3FD921FB60000000
  %229 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %220, i64 0, i32 1
  %230 = load float, float* %229, align 4
  %231 = fadd float %230, %228
  store float %231, float* %229, align 4
  %232 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %220, i64 -1
  %233 = add nsw i32 %221, 1
  %234 = icmp slt i32 %233, %3
  br i1 %234, label %219, label %235, !llvm.loop !37

235:                                              ; preds = %219, %214
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %8) #10
  br label %236

236:                                              ; preds = %126, %235
  ret void
}

; Function Attrs: nounwind readnone speculatable
declare <2 x float> @llvm.fabs.v2f32(<2 x float>) #3

; Function Attrs: nounwind readnone speculatable
declare <2 x float> @llvm.ceil.v2f32(<2 x float>) #3

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind readnone speculatable }
attributes #4 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="128" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { inlinehint nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="128" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { cold noreturn nounwind }
attributes #8 = { nounwind readnone }
attributes #9 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="64" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #10 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{i8 0, i8 2}
!3 = !{!4}
!4 = distinct !{!4, !5, !"_ZN6SkPath9RangeIterppEi: argument 0"}
!5 = distinct !{!5, !"_ZN6SkPath9RangeIterppEi"}
!6 = !{!7}
!7 = distinct !{!7, !8, !"_ZNK6SkPath9RangeIterdeEv: argument 0"}
!8 = distinct !{!8, !"_ZNK6SkPath9RangeIterdeEv"}
!9 = !{i32 0, i32 33}
!10 = !{!11}
!11 = distinct !{!11, !12, !"_ZN6SkPath9RangeIterppEi: argument 0"}
!12 = distinct !{!12, !"_ZN6SkPath9RangeIterppEi"}
!13 = !{!14}
!14 = distinct !{!14, !15, !"_ZNK6SkPath9RangeIterdeEv: argument 0"}
!15 = distinct !{!15, !"_ZNK6SkPath9RangeIterdeEv"}
!16 = !{!17}
!17 = distinct !{!17, !18, !"_ZN6SkPath9RangeIterppEi: argument 0"}
!18 = distinct !{!18, !"_ZN6SkPath9RangeIterppEi"}
!19 = !{!20}
!20 = distinct !{!20, !21, !"_ZNK6SkPath9RangeIterdeEv: argument 0"}
!21 = distinct !{!21, !"_ZNK6SkPath9RangeIterdeEv"}
!22 = distinct !{!22, !23}
!23 = !{!"llvm.loop.isvectorized", i32 1}
!24 = distinct !{!24, !25, !23}
!25 = !{!"llvm.loop.unroll.runtime.disable"}
!26 = !{!27}
!27 = distinct !{!27, !28}
!28 = distinct !{!28, !"LVerDomain"}
!29 = distinct !{!29, !23}
!30 = distinct !{!30, !23}
!31 = distinct !{!31, !23}
!32 = distinct !{!32, !25, !23}
!33 = !{!34}
!34 = distinct !{!34, !35}
!35 = distinct !{!35, !"LVerDomain"}
!36 = distinct !{!36, !23}
!37 = distinct !{!37, !23}
