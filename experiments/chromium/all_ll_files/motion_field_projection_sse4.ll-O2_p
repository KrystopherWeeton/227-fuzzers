; ModuleID = '../../third_party/libgav1/src/src/dsp/x86/motion_field_projection_sse4.cc'
source_filename = "../../third_party/libgav1/src/src/dsp/x86/motion_field_projection_sse4.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%"struct.libgav1::dsp::Dsp" = type { void (i8*, i8*, i32, i32, i8*, i64)*, void (i8*, i64, i8*, i32*)*, [2 x [3 x void (i16*, i64, i32, i32, i32, i32, i32, i8*, i64)*]], [19 x void (i8*, i64, [32 x i16]*, i32)*], [19 x [3 x void ([32 x i16]*, i32, i32, i8*, i64)*]], [2 x [2 x [2 x [2 x void (i8*, i64, i32, i32, i32, i32, i32, i32, i8*, i64)*]]]], [2 x void (i8*, i64, i32, i32, i32, i32, i32, i32, i32, i32, i8*, i64)*], void (i8*, i64, i8*, i32, i32, i32, i1)*, void (i8*, i64, i8*, i8*, i32, i32, i32, i32, i1, i1)*, void (i8*, i64, i8*, i32, i32, i32, i1)*, void (i8*, i8*, i8, i8, i32, i32, i8*, i64)*, %"struct.libgav1::dsp::FilmGrainFuncs", void (i8*, i64, i8*, i8*, i8, i32, i32)*, [3 x void (i8*, i8*, i64, i8*, i64, i32, i32)*], void (i8*, i32, i32)*, void (i8*, i32)*, [19 x [10 x void (i8*, i64, i8*, i8*)*]], [4 x [5 x [2 x void (i8, i8, i32, i8*, i32, i32, i8*)*]]], [4 x [2 x void (i8*, i64, i32, i32, i32)*]], [2 x void (%"struct.libgav1::RestorationUnitInfo"*, i8*, i64, i8*, i64, i8*, i64, i32, i32, %"union.libgav1::RestorationBuffer"*, i8*)*], [3 x [2 x void (i8*, i8*, i64, i8*, i64, i32, i32, i8*, i64)*]], void (%"struct.libgav1::ReferenceInfo"*, i32, i32, i32, i32, i32, i32, %"struct.libgav1::TemporalMotionField"*)*, [3 x void (%"struct.libgav1::MotionVector"*, i8*, i32*, i32, %"union.libgav1::CompoundMotionVector"*)*], [3 x void (%"struct.libgav1::MotionVector"*, i8*, i32, i32, %"struct.libgav1::MotionVector"*)*], [2 x void (i8*, i64, i32, i32, i8*, i64)*], void (i32, i32, i32, i8*)*, void (i8*, i8*, i64, i32, i32, i32, i32, i32, i8*, i64)*, void (i8*, i64, i32, i32, i32*, i32, i32, i32, i32, i32, i32, i16, i16, i16, i16, i8*, i64)*, void (i8*, i64, i32, i32, i32*, i32, i32, i32, i32, i32, i32, i16, i16, i16, i16, i8*, i64)*, [6 x [6 x [2 x void (i8*, i8*, i8*, i64)*]]] }
%"struct.libgav1::dsp::FilmGrainFuncs" = type { [3 x void (%"struct.libgav1::FilmGrainParams"*, i8*)*], [2 x [4 x void (%"struct.libgav1::FilmGrainParams"*, i8*, i32, i32, i8*, i8*)*]], [2 x void (i8*, i32, i32, i32, i32, i32, i8*)*], void (i8*, i32, i32, i32, i32, i8*)*, void (i32, i8*, i8*, i8*)*, void (i8*, i32, i32, i32, i32, i32, i32, i8*, i8*, i64, i8*, i64)*, [2 x void (i8, %"struct.libgav1::FilmGrainParams"*, i8*, i32, i32, i32, i32, i32, i32, i32, i8*, i8*, i64, i8*, i64, i8*, i64)*] }
%"struct.libgav1::FilmGrainParams" = type { i8, i8, i8, i8, i8, i8, i8, i8, [14 x i8], [14 x i8], [10 x i8], [10 x i8], [10 x i8], [10 x i8], i8, i8, [24 x i8], [25 x i8], [25 x i8], i8, i16, i32, i32, i8, i8, i16, i8, i8, i16 }
%"struct.libgav1::RestorationUnitInfo" = type { i8, %"struct.libgav1::SgrProjInfo", [16 x i8], %"struct.libgav1::WienerInfo" }
%"struct.libgav1::SgrProjInfo" = type { i32, [2 x i32] }
%"struct.libgav1::WienerInfo" = type { [2 x i16], [28 x i8], [2 x [4 x i16]], [16 x i8] }
%"union.libgav1::RestorationBuffer" = type { %"struct.libgav1::SgrBuffer", [5024 x i8] }
%"struct.libgav1::SgrBuffer" = type { [1152 x i16], [1440 x i16], [1152 x i32], [1440 x i32], [1024 x i16], [768 x i16], [512 x i16], [1024 x i32], [768 x i32], [512 x i32], [288 x i8], [288 x i32] }
%"struct.libgav1::ReferenceInfo" = type { %"struct.std::__1::array", %"struct.std::__1::array.0", %"struct.std::__1::array.0", %"struct.std::__1::array.1", %"struct.std::__1::array.2", %"class.libgav1::Array2D", %"class.libgav1::Array2D.4" }
%"struct.std::__1::array" = type { [8 x i8] }
%"struct.std::__1::array.0" = type { [8 x i8] }
%"struct.std::__1::array.1" = type { [8 x i8] }
%"struct.std::__1::array.2" = type { [8 x i16] }
%"class.libgav1::Array2D" = type { %"class.std::__1::unique_ptr", i64, i64, %"class.libgav1::Array2DView" }
%"class.std::__1::unique_ptr" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { i8* }
%"class.libgav1::Array2DView" = type { i32, i32, i8* }
%"class.libgav1::Array2D.4" = type { %"class.std::__1::unique_ptr.5", i64, i64, %"class.libgav1::Array2DView.11" }
%"class.std::__1::unique_ptr.5" = type { %"class.std::__1::__compressed_pair.6" }
%"class.std::__1::__compressed_pair.6" = type { %"struct.std::__1::__compressed_pair_elem.7" }
%"struct.std::__1::__compressed_pair_elem.7" = type { %"struct.libgav1::MotionVector"* }
%"struct.libgav1::MotionVector" = type { %union.anon }
%union.anon = type { i32 }
%"class.libgav1::Array2DView.11" = type { i32, i32, %"struct.libgav1::MotionVector"* }
%"struct.libgav1::TemporalMotionField" = type { %"class.libgav1::Array2D.4", %"class.libgav1::Array2D.12" }
%"class.libgav1::Array2D.12" = type { %"class.std::__1::unique_ptr.13", i64, i64, %"class.libgav1::Array2DView.19" }
%"class.std::__1::unique_ptr.13" = type { %"class.std::__1::__compressed_pair.14" }
%"class.std::__1::__compressed_pair.14" = type { %"struct.std::__1::__compressed_pair_elem.15" }
%"struct.std::__1::__compressed_pair_elem.15" = type { i8* }
%"class.libgav1::Array2DView.19" = type { i32, i32, i8* }
%"union.libgav1::CompoundMotionVector" = type { i64 }

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN7libgav13dsp32MotionFieldProjectionInit_SSE4_1Ev() local_unnamed_addr #0 {
  %1 = tail call %"struct.libgav1::dsp::Dsp"* @_ZN7libgav112dsp_internal19GetWritableDspTableEi(i32 8) #4
  %2 = getelementptr inbounds %"struct.libgav1::dsp::Dsp", %"struct.libgav1::dsp::Dsp"* %1, i64 0, i32 21
  store void (%"struct.libgav1::ReferenceInfo"*, i32, i32, i32, i32, i32, i32, %"struct.libgav1::TemporalMotionField"*)* @_ZN7libgav13dsp12_GLOBAL__N_134MotionFieldProjectionKernel_SSE4_1ERKNS_13ReferenceInfoEiiiiiiPNS_19TemporalMotionFieldE, void (%"struct.libgav1::ReferenceInfo"*, i32, i32, i32, i32, i32, i32, %"struct.libgav1::TemporalMotionField"*)** %2, align 8
  %3 = tail call %"struct.libgav1::dsp::Dsp"* @_ZN7libgav112dsp_internal19GetWritableDspTableEi(i32 10) #4
  %4 = getelementptr inbounds %"struct.libgav1::dsp::Dsp", %"struct.libgav1::dsp::Dsp"* %3, i64 0, i32 21
  store void (%"struct.libgav1::ReferenceInfo"*, i32, i32, i32, i32, i32, i32, %"struct.libgav1::TemporalMotionField"*)* @_ZN7libgav13dsp12_GLOBAL__N_134MotionFieldProjectionKernel_SSE4_1ERKNS_13ReferenceInfoEiiiiiiPNS_19TemporalMotionFieldE, void (%"struct.libgav1::ReferenceInfo"*, i32, i32, i32, i32, i32, i32, %"struct.libgav1::TemporalMotionField"*)** %4, align 8
  ret void
}

declare %"struct.libgav1::dsp::Dsp"* @_ZN7libgav112dsp_internal19GetWritableDspTableEi(i32) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN7libgav13dsp12_GLOBAL__N_134MotionFieldProjectionKernel_SSE4_1ERKNS_13ReferenceInfoEiiiiiiPNS_19TemporalMotionFieldE(%"struct.libgav1::ReferenceInfo"* nocapture readonly dereferenceable(128), i32, i32, i32, i32, i32, i32, %"struct.libgav1::TemporalMotionField"* nocapture readonly) #2 {
  %9 = getelementptr inbounds %"struct.libgav1::TemporalMotionField", %"struct.libgav1::TemporalMotionField"* %7, i64 0, i32 0, i32 3, i32 1
  %10 = load i32, i32* %9, align 4
  %11 = sext i32 %10 to i64
  %12 = icmp sgt i32 %5, 8
  %13 = select i1 %12, i32 %5, i32 8
  %14 = add nsw i32 %13, -8
  %15 = add nsw i32 %6, 8
  %16 = icmp slt i32 %10, %15
  %17 = select i1 %16, i32 %10, i32 %15
  %18 = and i32 %17, -8
  %19 = sub nsw i32 %17, %18
  %20 = getelementptr inbounds %"struct.libgav1::ReferenceInfo", %"struct.libgav1::ReferenceInfo"* %0, i64 0, i32 2, i32 0, i64 0
  %21 = getelementptr inbounds %"struct.libgav1::ReferenceInfo", %"struct.libgav1::ReferenceInfo"* %0, i64 0, i32 3, i32 0, i64 0
  %22 = getelementptr inbounds %"struct.libgav1::ReferenceInfo", %"struct.libgav1::ReferenceInfo"* %0, i64 0, i32 4, i32 0, i64 0
  %23 = sext i32 %3 to i64
  %24 = getelementptr inbounds %"struct.libgav1::ReferenceInfo", %"struct.libgav1::ReferenceInfo"* %0, i64 0, i32 5, i32 3, i32 1
  %25 = load i32, i32* %24, align 4
  %26 = sext i32 %25 to i64
  %27 = mul nsw i64 %26, %23
  %28 = getelementptr inbounds %"struct.libgav1::ReferenceInfo", %"struct.libgav1::ReferenceInfo"* %0, i64 0, i32 5, i32 3, i32 2
  %29 = load i8*, i8** %28, align 8
  %30 = getelementptr inbounds i8, i8* %29, i64 %27
  %31 = getelementptr inbounds %"struct.libgav1::ReferenceInfo", %"struct.libgav1::ReferenceInfo"* %0, i64 0, i32 6, i32 3, i32 1
  %32 = load i32, i32* %31, align 4
  %33 = sext i32 %32 to i64
  %34 = mul nsw i64 %33, %23
  %35 = getelementptr inbounds %"struct.libgav1::ReferenceInfo", %"struct.libgav1::ReferenceInfo"* %0, i64 0, i32 6, i32 3, i32 2
  %36 = load %"struct.libgav1::MotionVector"*, %"struct.libgav1::MotionVector"** %35, align 8
  %37 = getelementptr inbounds %"struct.libgav1::MotionVector", %"struct.libgav1::MotionVector"* %36, i64 %34
  %38 = getelementptr inbounds %"struct.libgav1::TemporalMotionField", %"struct.libgav1::TemporalMotionField"* %7, i64 0, i32 1, i32 3, i32 1
  %39 = load i32, i32* %38, align 4
  %40 = sext i32 %39 to i64
  %41 = mul nsw i64 %40, %23
  %42 = getelementptr inbounds %"struct.libgav1::TemporalMotionField", %"struct.libgav1::TemporalMotionField"* %7, i64 0, i32 1, i32 3, i32 2
  %43 = load i8*, i8** %42, align 8
  %44 = getelementptr inbounds i8, i8* %43, i64 %41
  %45 = mul nsw i64 %11, %23
  %46 = getelementptr inbounds %"struct.libgav1::TemporalMotionField", %"struct.libgav1::TemporalMotionField"* %7, i64 0, i32 0, i32 3, i32 2
  %47 = load %"struct.libgav1::MotionVector"*, %"struct.libgav1::MotionVector"** %46, align 8
  %48 = getelementptr inbounds %"struct.libgav1::MotionVector", %"struct.libgav1::MotionVector"* %47, i64 %45
  %49 = trunc i32 %2 to i16
  %50 = insertelement <8 x i16> undef, i16 %49, i32 0
  %51 = shufflevector <8 x i16> %50, <8 x i16> undef, <8 x i32> zeroinitializer
  %52 = bitcast i8* %21 to i64*
  %53 = load i64, i64* %52, align 1
  %54 = insertelement <2 x i64> <i64 undef, i64 0>, i64 %53, i32 0
  %55 = bitcast i8* %20 to i64*
  %56 = load i64, i64* %55, align 1
  %57 = insertelement <2 x i64> <i64 undef, i64 0>, i64 %56, i32 0
  %58 = bitcast i16* %22 to <16 x i8>*
  %59 = load <16 x i8>, <16 x i8>* %58, align 1
  %60 = icmp slt i32 %14, %18
  %61 = bitcast <2 x i64> %54 to <16 x i8>
  %62 = bitcast <2 x i64> %57 to <16 x i8>
  %63 = insertelement <4 x i32> undef, i32 %1, i32 0
  %64 = shufflevector <4 x i32> %63, <4 x i32> undef, <4 x i32> zeroinitializer
  %65 = trunc i32 %10 to i16
  %66 = insertelement <8 x i16> undef, i16 %65, i32 0
  %67 = shufflevector <8 x i16> %66, <8 x i16> undef, <8 x i32> zeroinitializer
  %68 = icmp sgt i32 %19, 0
  %69 = icmp sgt i32 %19, 3
  %70 = and i1 %60, %69
  %71 = add nsw i32 %17, -8
  %72 = sext i32 %71 to i64
  %73 = sub nsw i32 %5, %71
  %74 = sub i32 0, %19
  %75 = icmp slt i32 %73, %74
  %76 = select i1 %75, i32 %74, i32 %73
  %77 = sub nsw i32 %6, %71
  %78 = sub i32 24, %19
  %79 = icmp slt i32 %78, %77
  %80 = select i1 %79, i32 %78, i32 %77
  %81 = trunc i32 %76 to i8
  %82 = insertelement <16 x i8> undef, i8 %81, i32 0
  %83 = shufflevector <16 x i8> %82, <16 x i8> undef, <16 x i32> <i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %84 = bitcast <16 x i8> %83 to <2 x i64>
  %85 = trunc i32 %80 to i8
  %86 = add i8 %85, -1
  %87 = insertelement <16 x i8> undef, i8 %86, i32 0
  %88 = shufflevector <16 x i8> %87, <16 x i8> undef, <16 x i32> <i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %89 = bitcast <16 x i8> %88 to <2 x i64>
  %90 = trunc i32 %71 to i16
  %91 = insertelement <8 x i16> undef, i16 %90, i32 0
  %92 = shufflevector <8 x i16> %91, <8 x i16> undef, <8 x i32> zeroinitializer
  %93 = zext i32 %14 to i64
  %94 = sext i32 %18 to i64
  br label %95

95:                                               ; preds = %700, %8
  %96 = phi i8* [ %44, %8 ], [ %703, %700 ]
  %97 = phi %"struct.libgav1::MotionVector"* [ %48, %8 ], [ %704, %700 ]
  %98 = phi i32 [ %3, %8 ], [ %705, %700 ]
  %99 = phi %"struct.libgav1::MotionVector"* [ %37, %8 ], [ %702, %700 ]
  %100 = phi i8* [ %30, %8 ], [ %701, %700 ]
  %101 = and i32 %98, -8
  %102 = sub nsw i32 %101, %98
  %103 = sub nsw i32 %4, %98
  %104 = add nsw i32 %102, 8
  %105 = icmp slt i32 %104, %103
  %106 = select i1 %105, i32 %104, i32 %103
  %107 = trunc i32 %102 to i8
  %108 = insertelement <16 x i8> undef, i8 %107, i32 0
  %109 = shufflevector <16 x i8> %108, <16 x i8> undef, <16 x i32> zeroinitializer
  %110 = bitcast <16 x i8> %109 to <2 x i64>
  %111 = trunc i32 %106 to i8
  %112 = add i8 %111, -1
  %113 = insertelement <16 x i8> undef, i8 %112, i32 0
  %114 = shufflevector <16 x i8> %113, <16 x i8> undef, <16 x i32> zeroinitializer
  %115 = bitcast <16 x i8> %114 to <2 x i64>
  br i1 %60, label %116, label %384

116:                                              ; preds = %95, %379
  %117 = phi i64 [ %380, %379 ], [ %93, %95 ]
  %118 = getelementptr inbounds i8, i8* %100, i64 %117
  %119 = bitcast i8* %118 to i64*
  %120 = load i64, i64* %119, align 1
  %121 = insertelement <2 x i64> <i64 undef, i64 0>, i64 %120, i32 0
  %122 = bitcast <2 x i64> %121 to <16 x i8>
  %123 = tail call <16 x i8> @llvm.x86.ssse3.pshuf.b.128(<16 x i8> %61, <16 x i8> %122) #4
  %124 = bitcast <16 x i8> %123 to <2 x i64>
  %125 = extractelement <2 x i64> %124, i32 0
  %126 = icmp eq i64 %125, -1
  br i1 %126, label %379, label %127

127:                                              ; preds = %116
  %128 = getelementptr inbounds %"struct.libgav1::MotionVector", %"struct.libgav1::MotionVector"* %99, i64 %117, i32 0, i32 0
  %129 = tail call <16 x i8> @llvm.x86.ssse3.pshuf.b.128(<16 x i8> %62, <16 x i8> %122) #4
  %130 = shl <16 x i8> %122, <i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1>
  %131 = shufflevector <16 x i8> %130, <16 x i8> undef, <16 x i32> <i32 0, i32 0, i32 1, i32 1, i32 2, i32 2, i32 3, i32 3, i32 4, i32 4, i32 5, i32 5, i32 6, i32 6, i32 7, i32 7>
  %132 = add <16 x i8> %131, <i8 0, i8 1, i8 0, i8 1, i8 0, i8 1, i8 0, i8 1, i8 0, i8 1, i8 0, i8 1, i8 0, i8 1, i8 0, i8 1>
  %133 = tail call <16 x i8> @llvm.x86.ssse3.pshuf.b.128(<16 x i8> %59, <16 x i8> %132) #4
  %134 = bitcast i32* %128 to <2 x i64>*
  %135 = load <2 x i64>, <2 x i64>* %134, align 1
  %136 = getelementptr inbounds i32, i32* %128, i64 4
  %137 = bitcast i32* %136 to <2 x i64>*
  %138 = load <2 x i64>, <2 x i64>* %137, align 1
  %139 = bitcast <2 x i64> %135 to <16 x i8>
  %140 = shufflevector <16 x i8> %139, <16 x i8> undef, <16 x i32> <i32 0, i32 1, i32 4, i32 5, i32 8, i32 9, i32 12, i32 13, i32 2, i32 3, i32 6, i32 7, i32 10, i32 11, i32 14, i32 15>
  %141 = bitcast <16 x i8> %140 to <2 x i64>
  %142 = bitcast <2 x i64> %138 to <16 x i8>
  %143 = shufflevector <16 x i8> %142, <16 x i8> undef, <16 x i32> <i32 0, i32 1, i32 4, i32 5, i32 8, i32 9, i32 12, i32 13, i32 2, i32 3, i32 6, i32 7, i32 10, i32 11, i32 14, i32 15>
  %144 = bitcast <16 x i8> %143 to <2 x i64>
  %145 = shufflevector <2 x i64> %141, <2 x i64> %144, <2 x i32> <i32 0, i32 2>
  %146 = shufflevector <2 x i64> %141, <2 x i64> %144, <2 x i32> <i32 1, i32 3>
  %147 = bitcast <2 x i64> %145 to <8 x i16>
  %148 = shufflevector <8 x i16> %147, <8 x i16> <i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef>, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %149 = shufflevector <8 x i16> %147, <8 x i16> <i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0>, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %150 = bitcast <16 x i8> %133 to <8 x i16>
  %151 = shufflevector <8 x i16> %150, <8 x i16> <i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef>, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %152 = shufflevector <8 x i16> %150, <8 x i16> <i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0>, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %153 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %148, <8 x i16> %151) #4
  %154 = mul <4 x i32> %153, %64
  %155 = ashr <4 x i32> %154, <i32 31, i32 31, i32 31, i32 31>
  %156 = add <4 x i32> %154, <i32 8192, i32 8192, i32 8192, i32 8192>
  %157 = add <4 x i32> %156, %155
  %158 = ashr <4 x i32> %157, <i32 14, i32 14, i32 14, i32 14>
  %159 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %149, <8 x i16> %152) #4
  %160 = mul <4 x i32> %159, %64
  %161 = ashr <4 x i32> %160, <i32 31, i32 31, i32 31, i32 31>
  %162 = add <4 x i32> %160, <i32 8192, i32 8192, i32 8192, i32 8192>
  %163 = add <4 x i32> %162, %161
  %164 = ashr <4 x i32> %163, <i32 14, i32 14, i32 14, i32 14>
  %165 = tail call <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32> %158, <4 x i32> %164) #4
  %166 = icmp slt <8 x i16> %165, <i16 16383, i16 16383, i16 16383, i16 16383, i16 16383, i16 16383, i16 16383, i16 16383>
  %167 = select <8 x i1> %166, <8 x i16> %165, <8 x i16> <i16 16383, i16 16383, i16 16383, i16 16383, i16 16383, i16 16383, i16 16383, i16 16383>
  %168 = icmp sgt <8 x i16> %167, <i16 -16383, i16 -16383, i16 -16383, i16 -16383, i16 -16383, i16 -16383, i16 -16383, i16 -16383>
  %169 = select <8 x i1> %168, <8 x i16> %167, <8 x i16> <i16 -16383, i16 -16383, i16 -16383, i16 -16383, i16 -16383, i16 -16383, i16 -16383, i16 -16383>
  %170 = bitcast <2 x i64> %146 to <8 x i16>
  %171 = shufflevector <8 x i16> %170, <8 x i16> <i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef>, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %172 = shufflevector <8 x i16> %170, <8 x i16> <i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0>, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %173 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %171, <8 x i16> %151) #4
  %174 = mul <4 x i32> %173, %64
  %175 = ashr <4 x i32> %174, <i32 31, i32 31, i32 31, i32 31>
  %176 = add <4 x i32> %174, <i32 8192, i32 8192, i32 8192, i32 8192>
  %177 = add <4 x i32> %176, %175
  %178 = ashr <4 x i32> %177, <i32 14, i32 14, i32 14, i32 14>
  %179 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %172, <8 x i16> %152) #4
  %180 = mul <4 x i32> %179, %64
  %181 = ashr <4 x i32> %180, <i32 31, i32 31, i32 31, i32 31>
  %182 = add <4 x i32> %180, <i32 8192, i32 8192, i32 8192, i32 8192>
  %183 = add <4 x i32> %182, %181
  %184 = ashr <4 x i32> %183, <i32 14, i32 14, i32 14, i32 14>
  %185 = tail call <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32> %178, <4 x i32> %184) #4
  %186 = icmp slt <8 x i16> %185, <i16 16383, i16 16383, i16 16383, i16 16383, i16 16383, i16 16383, i16 16383, i16 16383>
  %187 = select <8 x i1> %186, <8 x i16> %185, <8 x i16> <i16 16383, i16 16383, i16 16383, i16 16383, i16 16383, i16 16383, i16 16383, i16 16383>
  %188 = icmp sgt <8 x i16> %187, <i16 -16383, i16 -16383, i16 -16383, i16 -16383, i16 -16383, i16 -16383, i16 -16383, i16 -16383>
  %189 = select <8 x i1> %188, <8 x i16> %187, <8 x i16> <i16 -16383, i16 -16383, i16 -16383, i16 -16383, i16 -16383, i16 -16383, i16 -16383, i16 -16383>
  %190 = ashr <8 x i16> %169, <i16 15, i16 15, i16 15, i16 15, i16 15, i16 15, i16 15, i16 15>
  %191 = lshr <8 x i16> %190, <i16 10, i16 10, i16 10, i16 10, i16 10, i16 10, i16 10, i16 10>
  %192 = add nsw <8 x i16> %191, %169
  %193 = ashr <8 x i16> %192, <i16 6, i16 6, i16 6, i16 6, i16 6, i16 6, i16 6, i16 6>
  %194 = xor <8 x i16> %193, %51
  %195 = sub <8 x i16> %194, %51
  %196 = ashr <8 x i16> %189, <i16 15, i16 15, i16 15, i16 15, i16 15, i16 15, i16 15, i16 15>
  %197 = lshr <8 x i16> %196, <i16 10, i16 10, i16 10, i16 10, i16 10, i16 10, i16 10, i16 10>
  %198 = add nsw <8 x i16> %197, %189
  %199 = ashr <8 x i16> %198, <i16 6, i16 6, i16 6, i16 6, i16 6, i16 6, i16 6, i16 6>
  %200 = xor <8 x i16> %199, %51
  %201 = sub <8 x i16> %200, %51
  %202 = tail call <16 x i8> @llvm.x86.sse2.packsswb.128(<8 x i16> %201, <8 x i16> %195) #4
  %203 = add <16 x i8> %202, <i8 0, i8 1, i8 2, i8 3, i8 4, i8 5, i8 6, i8 7, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>
  %204 = trunc i64 %117 to i32
  %205 = sub nsw i32 %5, %204
  %206 = icmp sgt i32 %205, -8
  %207 = select i1 %206, i32 %205, i32 -8
  %208 = sub nsw i32 %6, %204
  %209 = icmp slt i32 %208, 16
  %210 = select i1 %209, i32 %208, i32 16
  %211 = trunc i32 %207 to i8
  %212 = insertelement <16 x i8> undef, i8 %211, i32 0
  %213 = shufflevector <16 x i8> %212, <16 x i8> undef, <16 x i32> <i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %214 = bitcast <16 x i8> %213 to <2 x i64>
  %215 = trunc i32 %210 to i8
  %216 = add i8 %215, -1
  %217 = insertelement <16 x i8> undef, i8 %216, i32 0
  %218 = shufflevector <16 x i8> %217, <16 x i8> undef, <16 x i32> <i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %219 = bitcast <16 x i8> %218 to <2 x i64>
  %220 = shufflevector <2 x i64> %214, <2 x i64> %110, <2 x i32> <i32 0, i32 2>
  %221 = shufflevector <2 x i64> %219, <2 x i64> %115, <2 x i32> <i32 0, i32 2>
  %222 = bitcast <2 x i64> %220 to <16 x i8>
  %223 = icmp slt <16 x i8> %203, %222
  %224 = bitcast <2 x i64> %221 to <16 x i8>
  %225 = icmp sgt <16 x i8> %203, %224
  %226 = or <16 x i1> %225, %223
  %227 = sext <16 x i1> %226 to <16 x i8>
  %228 = bitcast <16 x i8> %227 to <2 x i64>
  %229 = shufflevector <16 x i8> %227, <16 x i8> undef, <16 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %230 = bitcast <16 x i8> %229 to <2 x i64>
  %231 = extractelement <2 x i64> %228, i32 0
  %232 = or i64 %231, %125
  %233 = extractelement <2 x i64> %230, i32 0
  %234 = or i64 %232, %233
  %235 = icmp eq i64 %234, -1
  br i1 %235, label %379, label %236

236:                                              ; preds = %127
  %237 = shufflevector <16 x i8> %203, <16 x i8> undef, <8 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %238 = sext <8 x i8> %237 to <8 x i16>
  %239 = shufflevector <16 x i8> %203, <16 x i8> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %240 = sext <8 x i8> %239 to <8 x i16>
  %241 = mul <8 x i16> %67, %238
  %242 = trunc i64 %117 to i16
  %243 = insertelement <8 x i16> undef, i16 %242, i32 0
  %244 = shufflevector <8 x i16> %243, <8 x i16> undef, <8 x i32> zeroinitializer
  %245 = add <8 x i16> %244, %240
  %246 = add <8 x i16> %245, %241
  %247 = icmp eq i64 %234, 0
  br i1 %247, label %248, label %292

248:                                              ; preds = %236
  %249 = bitcast <2 x i64> %135 to <4 x i32>
  %250 = extractelement <4 x i32> %249, i32 0
  %251 = sext <8 x i16> %246 to <8 x i64>
  %252 = extractelement <8 x i64> %251, i32 0
  %253 = getelementptr inbounds %"struct.libgav1::MotionVector", %"struct.libgav1::MotionVector"* %97, i64 %252, i32 0, i32 0
  store i32 %250, i32* %253, align 4
  %254 = extractelement <16 x i8> %129, i64 0
  %255 = getelementptr inbounds i8, i8* %96, i64 %252
  store i8 %254, i8* %255, align 1
  %256 = extractelement <4 x i32> %249, i64 1
  %257 = extractelement <8 x i64> %251, i32 1
  %258 = getelementptr inbounds %"struct.libgav1::MotionVector", %"struct.libgav1::MotionVector"* %97, i64 %257, i32 0, i32 0
  store i32 %256, i32* %258, align 4
  %259 = extractelement <16 x i8> %129, i64 1
  %260 = getelementptr inbounds i8, i8* %96, i64 %257
  store i8 %259, i8* %260, align 1
  %261 = extractelement <4 x i32> %249, i64 2
  %262 = extractelement <8 x i64> %251, i32 2
  %263 = getelementptr inbounds %"struct.libgav1::MotionVector", %"struct.libgav1::MotionVector"* %97, i64 %262, i32 0, i32 0
  store i32 %261, i32* %263, align 4
  %264 = extractelement <16 x i8> %129, i64 2
  %265 = getelementptr inbounds i8, i8* %96, i64 %262
  store i8 %264, i8* %265, align 1
  %266 = extractelement <4 x i32> %249, i64 3
  %267 = extractelement <8 x i64> %251, i32 3
  %268 = getelementptr inbounds %"struct.libgav1::MotionVector", %"struct.libgav1::MotionVector"* %97, i64 %267, i32 0, i32 0
  store i32 %266, i32* %268, align 4
  %269 = extractelement <16 x i8> %129, i64 3
  %270 = getelementptr inbounds i8, i8* %96, i64 %267
  store i8 %269, i8* %270, align 1
  %271 = bitcast <2 x i64> %138 to <4 x i32>
  %272 = extractelement <4 x i32> %271, i32 0
  %273 = extractelement <8 x i64> %251, i32 4
  %274 = getelementptr inbounds %"struct.libgav1::MotionVector", %"struct.libgav1::MotionVector"* %97, i64 %273, i32 0, i32 0
  store i32 %272, i32* %274, align 4
  %275 = extractelement <16 x i8> %129, i64 4
  %276 = getelementptr inbounds i8, i8* %96, i64 %273
  store i8 %275, i8* %276, align 1
  %277 = extractelement <4 x i32> %271, i64 1
  %278 = extractelement <8 x i64> %251, i32 5
  %279 = getelementptr inbounds %"struct.libgav1::MotionVector", %"struct.libgav1::MotionVector"* %97, i64 %278, i32 0, i32 0
  store i32 %277, i32* %279, align 4
  %280 = extractelement <16 x i8> %129, i64 5
  %281 = getelementptr inbounds i8, i8* %96, i64 %278
  store i8 %280, i8* %281, align 1
  %282 = extractelement <4 x i32> %271, i64 2
  %283 = extractelement <8 x i64> %251, i32 6
  %284 = getelementptr inbounds %"struct.libgav1::MotionVector", %"struct.libgav1::MotionVector"* %97, i64 %283, i32 0, i32 0
  store i32 %282, i32* %284, align 4
  %285 = extractelement <16 x i8> %129, i64 6
  %286 = getelementptr inbounds i8, i8* %96, i64 %283
  store i8 %285, i8* %286, align 1
  %287 = extractelement <4 x i32> %271, i64 3
  %288 = extractelement <8 x i64> %251, i32 7
  %289 = getelementptr inbounds %"struct.libgav1::MotionVector", %"struct.libgav1::MotionVector"* %97, i64 %288, i32 0, i32 0
  store i32 %287, i32* %289, align 4
  %290 = extractelement <16 x i8> %129, i64 7
  %291 = getelementptr inbounds i8, i8* %96, i64 %288
  store i8 %290, i8* %291, align 1
  br label %379

292:                                              ; preds = %236
  %293 = trunc i64 %234 to i8
  %294 = icmp eq i8 %293, 0
  br i1 %294, label %295, label %303

295:                                              ; preds = %292
  %296 = extractelement <8 x i16> %246, i64 0
  %297 = sext i16 %296 to i64
  %298 = bitcast <2 x i64> %135 to <4 x i32>
  %299 = extractelement <4 x i32> %298, i32 0
  %300 = getelementptr inbounds %"struct.libgav1::MotionVector", %"struct.libgav1::MotionVector"* %97, i64 %297, i32 0, i32 0
  store i32 %299, i32* %300, align 4
  %301 = extractelement <16 x i8> %129, i64 0
  %302 = getelementptr inbounds i8, i8* %96, i64 %297
  store i8 %301, i8* %302, align 1
  br label %303

303:                                              ; preds = %292, %295
  %304 = and i64 %234, 65280
  %305 = icmp eq i64 %304, 0
  br i1 %305, label %306, label %314

306:                                              ; preds = %303
  %307 = extractelement <8 x i16> %246, i64 1
  %308 = sext i16 %307 to i64
  %309 = bitcast <2 x i64> %135 to <4 x i32>
  %310 = extractelement <4 x i32> %309, i64 1
  %311 = getelementptr inbounds %"struct.libgav1::MotionVector", %"struct.libgav1::MotionVector"* %97, i64 %308, i32 0, i32 0
  store i32 %310, i32* %311, align 4
  %312 = extractelement <16 x i8> %129, i64 1
  %313 = getelementptr inbounds i8, i8* %96, i64 %308
  store i8 %312, i8* %313, align 1
  br label %314

314:                                              ; preds = %303, %306
  %315 = and i64 %234, 16711680
  %316 = icmp eq i64 %315, 0
  br i1 %316, label %317, label %325

317:                                              ; preds = %314
  %318 = extractelement <8 x i16> %246, i64 2
  %319 = sext i16 %318 to i64
  %320 = bitcast <2 x i64> %135 to <4 x i32>
  %321 = extractelement <4 x i32> %320, i64 2
  %322 = getelementptr inbounds %"struct.libgav1::MotionVector", %"struct.libgav1::MotionVector"* %97, i64 %319, i32 0, i32 0
  store i32 %321, i32* %322, align 4
  %323 = extractelement <16 x i8> %129, i64 2
  %324 = getelementptr inbounds i8, i8* %96, i64 %319
  store i8 %323, i8* %324, align 1
  br label %325

325:                                              ; preds = %314, %317
  %326 = and i64 %234, 4278190080
  %327 = icmp eq i64 %326, 0
  br i1 %327, label %328, label %336

328:                                              ; preds = %325
  %329 = extractelement <8 x i16> %246, i64 3
  %330 = sext i16 %329 to i64
  %331 = bitcast <2 x i64> %135 to <4 x i32>
  %332 = extractelement <4 x i32> %331, i64 3
  %333 = getelementptr inbounds %"struct.libgav1::MotionVector", %"struct.libgav1::MotionVector"* %97, i64 %330, i32 0, i32 0
  store i32 %332, i32* %333, align 4
  %334 = extractelement <16 x i8> %129, i64 3
  %335 = getelementptr inbounds i8, i8* %96, i64 %330
  store i8 %334, i8* %335, align 1
  br label %336

336:                                              ; preds = %325, %328
  %337 = and i64 %234, 1095216660480
  %338 = icmp eq i64 %337, 0
  br i1 %338, label %339, label %347

339:                                              ; preds = %336
  %340 = extractelement <8 x i16> %246, i64 4
  %341 = sext i16 %340 to i64
  %342 = bitcast <2 x i64> %138 to <4 x i32>
  %343 = extractelement <4 x i32> %342, i32 0
  %344 = getelementptr inbounds %"struct.libgav1::MotionVector", %"struct.libgav1::MotionVector"* %97, i64 %341, i32 0, i32 0
  store i32 %343, i32* %344, align 4
  %345 = extractelement <16 x i8> %129, i64 4
  %346 = getelementptr inbounds i8, i8* %96, i64 %341
  store i8 %345, i8* %346, align 1
  br label %347

347:                                              ; preds = %336, %339
  %348 = and i64 %234, 280375465082880
  %349 = icmp eq i64 %348, 0
  br i1 %349, label %350, label %358

350:                                              ; preds = %347
  %351 = extractelement <8 x i16> %246, i64 5
  %352 = sext i16 %351 to i64
  %353 = bitcast <2 x i64> %138 to <4 x i32>
  %354 = extractelement <4 x i32> %353, i64 1
  %355 = getelementptr inbounds %"struct.libgav1::MotionVector", %"struct.libgav1::MotionVector"* %97, i64 %352, i32 0, i32 0
  store i32 %354, i32* %355, align 4
  %356 = extractelement <16 x i8> %129, i64 5
  %357 = getelementptr inbounds i8, i8* %96, i64 %352
  store i8 %356, i8* %357, align 1
  br label %358

358:                                              ; preds = %347, %350
  %359 = and i64 %234, 71776119061217280
  %360 = icmp eq i64 %359, 0
  br i1 %360, label %361, label %369

361:                                              ; preds = %358
  %362 = extractelement <8 x i16> %246, i64 6
  %363 = sext i16 %362 to i64
  %364 = bitcast <2 x i64> %138 to <4 x i32>
  %365 = extractelement <4 x i32> %364, i64 2
  %366 = getelementptr inbounds %"struct.libgav1::MotionVector", %"struct.libgav1::MotionVector"* %97, i64 %363, i32 0, i32 0
  store i32 %365, i32* %366, align 4
  %367 = extractelement <16 x i8> %129, i64 6
  %368 = getelementptr inbounds i8, i8* %96, i64 %363
  store i8 %367, i8* %368, align 1
  br label %369

369:                                              ; preds = %358, %361
  %370 = icmp ult i64 %234, 72057594037927936
  br i1 %370, label %371, label %379

371:                                              ; preds = %369
  %372 = extractelement <8 x i16> %246, i64 7
  %373 = sext i16 %372 to i64
  %374 = bitcast <2 x i64> %138 to <4 x i32>
  %375 = extractelement <4 x i32> %374, i64 3
  %376 = getelementptr inbounds %"struct.libgav1::MotionVector", %"struct.libgav1::MotionVector"* %97, i64 %373, i32 0, i32 0
  store i32 %375, i32* %376, align 4
  %377 = extractelement <16 x i8> %129, i64 7
  %378 = getelementptr inbounds i8, i8* %96, i64 %373
  store i8 %377, i8* %378, align 1
  br label %379

379:                                              ; preds = %127, %248, %369, %371, %116
  %380 = add nuw nsw i64 %117, 8
  %381 = icmp slt i64 %380, %94
  br i1 %381, label %116, label %382

382:                                              ; preds = %379
  %383 = trunc i64 %380 to i32
  br label %384

384:                                              ; preds = %382, %95
  %385 = phi i32 [ %14, %95 ], [ %383, %382 ]
  br i1 %68, label %386, label %700

386:                                              ; preds = %384
  br i1 %70, label %391, label %387

387:                                              ; preds = %386
  %388 = icmp slt i32 %385, %17
  br i1 %388, label %389, label %700

389:                                              ; preds = %387
  %390 = zext i32 %385 to i64
  br label %624

391:                                              ; preds = %386
  %392 = getelementptr inbounds i8, i8* %100, i64 %72
  %393 = bitcast i8* %392 to i64*
  %394 = load i64, i64* %393, align 1
  %395 = insertelement <2 x i64> <i64 undef, i64 0>, i64 %394, i32 0
  %396 = bitcast <2 x i64> %395 to <16 x i8>
  %397 = tail call <16 x i8> @llvm.x86.ssse3.pshuf.b.128(<16 x i8> %61, <16 x i8> %396) #4
  %398 = bitcast <16 x i8> %397 to <2 x i64>
  %399 = extractelement <2 x i64> %398, i32 0
  %400 = icmp eq i64 %399, -1
  br i1 %400, label %700, label %401

401:                                              ; preds = %391
  %402 = getelementptr inbounds %"struct.libgav1::MotionVector", %"struct.libgav1::MotionVector"* %99, i64 %72, i32 0, i32 0
  %403 = tail call <16 x i8> @llvm.x86.ssse3.pshuf.b.128(<16 x i8> %62, <16 x i8> %396) #4
  %404 = shl <16 x i8> %396, <i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1>
  %405 = shufflevector <16 x i8> %404, <16 x i8> undef, <16 x i32> <i32 0, i32 0, i32 1, i32 1, i32 2, i32 2, i32 3, i32 3, i32 4, i32 4, i32 5, i32 5, i32 6, i32 6, i32 7, i32 7>
  %406 = add <16 x i8> %405, <i8 0, i8 1, i8 0, i8 1, i8 0, i8 1, i8 0, i8 1, i8 0, i8 1, i8 0, i8 1, i8 0, i8 1, i8 0, i8 1>
  %407 = tail call <16 x i8> @llvm.x86.ssse3.pshuf.b.128(<16 x i8> %59, <16 x i8> %406) #4
  %408 = bitcast i32* %402 to <2 x i64>*
  %409 = load <2 x i64>, <2 x i64>* %408, align 1
  %410 = getelementptr inbounds i32, i32* %402, i64 4
  %411 = bitcast i32* %410 to <2 x i64>*
  %412 = load <2 x i64>, <2 x i64>* %411, align 1
  %413 = bitcast <2 x i64> %409 to <16 x i8>
  %414 = shufflevector <16 x i8> %413, <16 x i8> undef, <16 x i32> <i32 0, i32 1, i32 4, i32 5, i32 8, i32 9, i32 12, i32 13, i32 2, i32 3, i32 6, i32 7, i32 10, i32 11, i32 14, i32 15>
  %415 = bitcast <16 x i8> %414 to <2 x i64>
  %416 = bitcast <2 x i64> %412 to <16 x i8>
  %417 = shufflevector <16 x i8> %416, <16 x i8> undef, <16 x i32> <i32 0, i32 1, i32 4, i32 5, i32 8, i32 9, i32 12, i32 13, i32 2, i32 3, i32 6, i32 7, i32 10, i32 11, i32 14, i32 15>
  %418 = bitcast <16 x i8> %417 to <2 x i64>
  %419 = shufflevector <2 x i64> %415, <2 x i64> %418, <2 x i32> <i32 0, i32 2>
  %420 = shufflevector <2 x i64> %415, <2 x i64> %418, <2 x i32> <i32 1, i32 3>
  %421 = bitcast <2 x i64> %419 to <8 x i16>
  %422 = shufflevector <8 x i16> %421, <8 x i16> <i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef>, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %423 = shufflevector <8 x i16> %421, <8 x i16> <i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0>, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %424 = bitcast <16 x i8> %407 to <8 x i16>
  %425 = shufflevector <8 x i16> %424, <8 x i16> <i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef>, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %426 = shufflevector <8 x i16> %424, <8 x i16> <i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0>, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %427 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %422, <8 x i16> %425) #4
  %428 = mul <4 x i32> %427, %64
  %429 = ashr <4 x i32> %428, <i32 31, i32 31, i32 31, i32 31>
  %430 = add <4 x i32> %428, <i32 8192, i32 8192, i32 8192, i32 8192>
  %431 = add <4 x i32> %430, %429
  %432 = ashr <4 x i32> %431, <i32 14, i32 14, i32 14, i32 14>
  %433 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %423, <8 x i16> %426) #4
  %434 = mul <4 x i32> %433, %64
  %435 = ashr <4 x i32> %434, <i32 31, i32 31, i32 31, i32 31>
  %436 = add <4 x i32> %434, <i32 8192, i32 8192, i32 8192, i32 8192>
  %437 = add <4 x i32> %436, %435
  %438 = ashr <4 x i32> %437, <i32 14, i32 14, i32 14, i32 14>
  %439 = tail call <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32> %432, <4 x i32> %438) #4
  %440 = icmp slt <8 x i16> %439, <i16 16383, i16 16383, i16 16383, i16 16383, i16 16383, i16 16383, i16 16383, i16 16383>
  %441 = select <8 x i1> %440, <8 x i16> %439, <8 x i16> <i16 16383, i16 16383, i16 16383, i16 16383, i16 16383, i16 16383, i16 16383, i16 16383>
  %442 = icmp sgt <8 x i16> %441, <i16 -16383, i16 -16383, i16 -16383, i16 -16383, i16 -16383, i16 -16383, i16 -16383, i16 -16383>
  %443 = select <8 x i1> %442, <8 x i16> %441, <8 x i16> <i16 -16383, i16 -16383, i16 -16383, i16 -16383, i16 -16383, i16 -16383, i16 -16383, i16 -16383>
  %444 = bitcast <2 x i64> %420 to <8 x i16>
  %445 = shufflevector <8 x i16> %444, <8 x i16> <i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef>, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %446 = shufflevector <8 x i16> %444, <8 x i16> <i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0>, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %447 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %445, <8 x i16> %425) #4
  %448 = mul <4 x i32> %447, %64
  %449 = ashr <4 x i32> %448, <i32 31, i32 31, i32 31, i32 31>
  %450 = add <4 x i32> %448, <i32 8192, i32 8192, i32 8192, i32 8192>
  %451 = add <4 x i32> %450, %449
  %452 = ashr <4 x i32> %451, <i32 14, i32 14, i32 14, i32 14>
  %453 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %446, <8 x i16> %426) #4
  %454 = mul <4 x i32> %453, %64
  %455 = ashr <4 x i32> %454, <i32 31, i32 31, i32 31, i32 31>
  %456 = add <4 x i32> %454, <i32 8192, i32 8192, i32 8192, i32 8192>
  %457 = add <4 x i32> %456, %455
  %458 = ashr <4 x i32> %457, <i32 14, i32 14, i32 14, i32 14>
  %459 = tail call <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32> %452, <4 x i32> %458) #4
  %460 = icmp slt <8 x i16> %459, <i16 16383, i16 16383, i16 16383, i16 16383, i16 16383, i16 16383, i16 16383, i16 16383>
  %461 = select <8 x i1> %460, <8 x i16> %459, <8 x i16> <i16 16383, i16 16383, i16 16383, i16 16383, i16 16383, i16 16383, i16 16383, i16 16383>
  %462 = icmp sgt <8 x i16> %461, <i16 -16383, i16 -16383, i16 -16383, i16 -16383, i16 -16383, i16 -16383, i16 -16383, i16 -16383>
  %463 = select <8 x i1> %462, <8 x i16> %461, <8 x i16> <i16 -16383, i16 -16383, i16 -16383, i16 -16383, i16 -16383, i16 -16383, i16 -16383, i16 -16383>
  %464 = ashr <8 x i16> %443, <i16 15, i16 15, i16 15, i16 15, i16 15, i16 15, i16 15, i16 15>
  %465 = lshr <8 x i16> %464, <i16 10, i16 10, i16 10, i16 10, i16 10, i16 10, i16 10, i16 10>
  %466 = add nsw <8 x i16> %465, %443
  %467 = ashr <8 x i16> %466, <i16 6, i16 6, i16 6, i16 6, i16 6, i16 6, i16 6, i16 6>
  %468 = xor <8 x i16> %467, %51
  %469 = sub <8 x i16> %468, %51
  %470 = ashr <8 x i16> %463, <i16 15, i16 15, i16 15, i16 15, i16 15, i16 15, i16 15, i16 15>
  %471 = lshr <8 x i16> %470, <i16 10, i16 10, i16 10, i16 10, i16 10, i16 10, i16 10, i16 10>
  %472 = add nsw <8 x i16> %471, %463
  %473 = ashr <8 x i16> %472, <i16 6, i16 6, i16 6, i16 6, i16 6, i16 6, i16 6, i16 6>
  %474 = xor <8 x i16> %473, %51
  %475 = sub <8 x i16> %474, %51
  %476 = tail call <16 x i8> @llvm.x86.sse2.packsswb.128(<8 x i16> %475, <8 x i16> %469) #4
  %477 = add <16 x i8> %476, <i8 0, i8 1, i8 2, i8 3, i8 4, i8 5, i8 6, i8 7, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>
  %478 = shufflevector <2 x i64> %84, <2 x i64> %110, <2 x i32> <i32 0, i32 2>
  %479 = shufflevector <2 x i64> %89, <2 x i64> %115, <2 x i32> <i32 0, i32 2>
  %480 = bitcast <2 x i64> %478 to <16 x i8>
  %481 = icmp slt <16 x i8> %477, %480
  %482 = bitcast <2 x i64> %479 to <16 x i8>
  %483 = icmp sgt <16 x i8> %477, %482
  %484 = or <16 x i1> %483, %481
  %485 = sext <16 x i1> %484 to <16 x i8>
  %486 = bitcast <16 x i8> %485 to <2 x i64>
  %487 = shufflevector <16 x i8> %485, <16 x i8> undef, <16 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %488 = bitcast <16 x i8> %487 to <2 x i64>
  %489 = extractelement <2 x i64> %486, i32 0
  %490 = or i64 %489, %399
  %491 = extractelement <2 x i64> %488, i32 0
  %492 = or i64 %490, %491
  %493 = icmp eq i64 %492, -1
  br i1 %493, label %700, label %494

494:                                              ; preds = %401
  %495 = shufflevector <16 x i8> %477, <16 x i8> undef, <8 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %496 = sext <8 x i8> %495 to <8 x i16>
  %497 = shufflevector <16 x i8> %477, <16 x i8> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %498 = sext <8 x i8> %497 to <8 x i16>
  %499 = mul <8 x i16> %67, %496
  %500 = add <8 x i16> %92, %498
  %501 = add <8 x i16> %500, %499
  %502 = icmp eq i64 %492, 0
  br i1 %502, label %503, label %548

503:                                              ; preds = %494
  %504 = extractelement <8 x i16> %501, i64 1
  %505 = sext i16 %504 to i64
  %506 = bitcast <2 x i64> %409 to <4 x i32>
  %507 = extractelement <4 x i32> %506, i64 1
  %508 = getelementptr inbounds %"struct.libgav1::MotionVector", %"struct.libgav1::MotionVector"* %97, i64 %505, i32 0, i32 0
  store i32 %507, i32* %508, align 4
  %509 = extractelement <16 x i8> %403, i64 1
  %510 = getelementptr inbounds i8, i8* %96, i64 %505
  store i8 %509, i8* %510, align 1
  %511 = extractelement <8 x i16> %501, i64 2
  %512 = sext i16 %511 to i64
  %513 = extractelement <4 x i32> %506, i64 2
  %514 = getelementptr inbounds %"struct.libgav1::MotionVector", %"struct.libgav1::MotionVector"* %97, i64 %512, i32 0, i32 0
  store i32 %513, i32* %514, align 4
  %515 = extractelement <16 x i8> %403, i64 2
  %516 = getelementptr inbounds i8, i8* %96, i64 %512
  store i8 %515, i8* %516, align 1
  %517 = extractelement <8 x i16> %501, i64 3
  %518 = sext i16 %517 to i64
  %519 = extractelement <4 x i32> %506, i64 3
  %520 = getelementptr inbounds %"struct.libgav1::MotionVector", %"struct.libgav1::MotionVector"* %97, i64 %518, i32 0, i32 0
  store i32 %519, i32* %520, align 4
  %521 = extractelement <16 x i8> %403, i64 3
  %522 = getelementptr inbounds i8, i8* %96, i64 %518
  store i8 %521, i8* %522, align 1
  %523 = extractelement <8 x i16> %501, i64 4
  %524 = sext i16 %523 to i64
  %525 = bitcast <2 x i64> %412 to <4 x i32>
  %526 = extractelement <4 x i32> %525, i32 0
  %527 = getelementptr inbounds %"struct.libgav1::MotionVector", %"struct.libgav1::MotionVector"* %97, i64 %524, i32 0, i32 0
  store i32 %526, i32* %527, align 4
  %528 = extractelement <16 x i8> %403, i64 4
  %529 = getelementptr inbounds i8, i8* %96, i64 %524
  store i8 %528, i8* %529, align 1
  %530 = extractelement <8 x i16> %501, i64 5
  %531 = sext i16 %530 to i64
  %532 = extractelement <4 x i32> %525, i64 1
  %533 = getelementptr inbounds %"struct.libgav1::MotionVector", %"struct.libgav1::MotionVector"* %97, i64 %531, i32 0, i32 0
  store i32 %532, i32* %533, align 4
  %534 = extractelement <16 x i8> %403, i64 5
  %535 = getelementptr inbounds i8, i8* %96, i64 %531
  store i8 %534, i8* %535, align 1
  %536 = extractelement <8 x i16> %501, i64 6
  %537 = sext i16 %536 to i64
  %538 = extractelement <4 x i32> %525, i64 2
  %539 = getelementptr inbounds %"struct.libgav1::MotionVector", %"struct.libgav1::MotionVector"* %97, i64 %537, i32 0, i32 0
  store i32 %538, i32* %539, align 4
  %540 = extractelement <16 x i8> %403, i64 6
  %541 = getelementptr inbounds i8, i8* %96, i64 %537
  store i8 %540, i8* %541, align 1
  %542 = extractelement <8 x i16> %501, i64 7
  %543 = sext i16 %542 to i64
  %544 = extractelement <4 x i32> %525, i64 3
  %545 = getelementptr inbounds %"struct.libgav1::MotionVector", %"struct.libgav1::MotionVector"* %97, i64 %543, i32 0, i32 0
  store i32 %544, i32* %545, align 4
  %546 = extractelement <16 x i8> %403, i64 7
  %547 = getelementptr inbounds i8, i8* %96, i64 %543
  store i8 %546, i8* %547, align 1
  br label %700

548:                                              ; preds = %494
  %549 = and i64 %492, 65280
  %550 = icmp eq i64 %549, 0
  br i1 %550, label %551, label %559

551:                                              ; preds = %548
  %552 = extractelement <8 x i16> %501, i64 1
  %553 = sext i16 %552 to i64
  %554 = bitcast <2 x i64> %409 to <4 x i32>
  %555 = extractelement <4 x i32> %554, i64 1
  %556 = getelementptr inbounds %"struct.libgav1::MotionVector", %"struct.libgav1::MotionVector"* %97, i64 %553, i32 0, i32 0
  store i32 %555, i32* %556, align 4
  %557 = extractelement <16 x i8> %403, i64 1
  %558 = getelementptr inbounds i8, i8* %96, i64 %553
  store i8 %557, i8* %558, align 1
  br label %559

559:                                              ; preds = %548, %551
  %560 = and i64 %492, 16711680
  %561 = icmp eq i64 %560, 0
  br i1 %561, label %562, label %570

562:                                              ; preds = %559
  %563 = extractelement <8 x i16> %501, i64 2
  %564 = sext i16 %563 to i64
  %565 = bitcast <2 x i64> %409 to <4 x i32>
  %566 = extractelement <4 x i32> %565, i64 2
  %567 = getelementptr inbounds %"struct.libgav1::MotionVector", %"struct.libgav1::MotionVector"* %97, i64 %564, i32 0, i32 0
  store i32 %566, i32* %567, align 4
  %568 = extractelement <16 x i8> %403, i64 2
  %569 = getelementptr inbounds i8, i8* %96, i64 %564
  store i8 %568, i8* %569, align 1
  br label %570

570:                                              ; preds = %559, %562
  %571 = and i64 %492, 4278190080
  %572 = icmp eq i64 %571, 0
  br i1 %572, label %573, label %581

573:                                              ; preds = %570
  %574 = extractelement <8 x i16> %501, i64 3
  %575 = sext i16 %574 to i64
  %576 = bitcast <2 x i64> %409 to <4 x i32>
  %577 = extractelement <4 x i32> %576, i64 3
  %578 = getelementptr inbounds %"struct.libgav1::MotionVector", %"struct.libgav1::MotionVector"* %97, i64 %575, i32 0, i32 0
  store i32 %577, i32* %578, align 4
  %579 = extractelement <16 x i8> %403, i64 3
  %580 = getelementptr inbounds i8, i8* %96, i64 %575
  store i8 %579, i8* %580, align 1
  br label %581

581:                                              ; preds = %570, %573
  %582 = and i64 %492, 1095216660480
  %583 = icmp eq i64 %582, 0
  br i1 %583, label %584, label %592

584:                                              ; preds = %581
  %585 = extractelement <8 x i16> %501, i64 4
  %586 = sext i16 %585 to i64
  %587 = bitcast <2 x i64> %412 to <4 x i32>
  %588 = extractelement <4 x i32> %587, i32 0
  %589 = getelementptr inbounds %"struct.libgav1::MotionVector", %"struct.libgav1::MotionVector"* %97, i64 %586, i32 0, i32 0
  store i32 %588, i32* %589, align 4
  %590 = extractelement <16 x i8> %403, i64 4
  %591 = getelementptr inbounds i8, i8* %96, i64 %586
  store i8 %590, i8* %591, align 1
  br label %592

592:                                              ; preds = %581, %584
  %593 = and i64 %492, 280375465082880
  %594 = icmp eq i64 %593, 0
  br i1 %594, label %595, label %603

595:                                              ; preds = %592
  %596 = extractelement <8 x i16> %501, i64 5
  %597 = sext i16 %596 to i64
  %598 = bitcast <2 x i64> %412 to <4 x i32>
  %599 = extractelement <4 x i32> %598, i64 1
  %600 = getelementptr inbounds %"struct.libgav1::MotionVector", %"struct.libgav1::MotionVector"* %97, i64 %597, i32 0, i32 0
  store i32 %599, i32* %600, align 4
  %601 = extractelement <16 x i8> %403, i64 5
  %602 = getelementptr inbounds i8, i8* %96, i64 %597
  store i8 %601, i8* %602, align 1
  br label %603

603:                                              ; preds = %592, %595
  %604 = and i64 %492, 71776119061217280
  %605 = icmp eq i64 %604, 0
  br i1 %605, label %606, label %614

606:                                              ; preds = %603
  %607 = extractelement <8 x i16> %501, i64 6
  %608 = sext i16 %607 to i64
  %609 = bitcast <2 x i64> %412 to <4 x i32>
  %610 = extractelement <4 x i32> %609, i64 2
  %611 = getelementptr inbounds %"struct.libgav1::MotionVector", %"struct.libgav1::MotionVector"* %97, i64 %608, i32 0, i32 0
  store i32 %610, i32* %611, align 4
  %612 = extractelement <16 x i8> %403, i64 6
  %613 = getelementptr inbounds i8, i8* %96, i64 %608
  store i8 %612, i8* %613, align 1
  br label %614

614:                                              ; preds = %603, %606
  %615 = icmp ult i64 %492, 72057594037927936
  br i1 %615, label %616, label %700

616:                                              ; preds = %614
  %617 = extractelement <8 x i16> %501, i64 7
  %618 = sext i16 %617 to i64
  %619 = bitcast <2 x i64> %412 to <4 x i32>
  %620 = extractelement <4 x i32> %619, i64 3
  %621 = getelementptr inbounds %"struct.libgav1::MotionVector", %"struct.libgav1::MotionVector"* %97, i64 %618, i32 0, i32 0
  store i32 %620, i32* %621, align 4
  %622 = extractelement <16 x i8> %403, i64 7
  %623 = getelementptr inbounds i8, i8* %96, i64 %618
  store i8 %622, i8* %623, align 1
  br label %700

624:                                              ; preds = %389, %696
  %625 = phi i64 [ %390, %389 ], [ %697, %696 ]
  %626 = getelementptr inbounds i8, i8* %100, i64 %625
  %627 = load i8, i8* %626, align 1
  %628 = sext i8 %627 to i64
  %629 = getelementptr inbounds %"struct.libgav1::ReferenceInfo", %"struct.libgav1::ReferenceInfo"* %0, i64 0, i32 3, i32 0, i64 %628
  %630 = load i8, i8* %629, align 1, !range !2
  %631 = icmp eq i8 %630, 0
  br i1 %631, label %632, label %696

632:                                              ; preds = %624
  %633 = getelementptr inbounds %"struct.libgav1::MotionVector", %"struct.libgav1::MotionVector"* %99, i64 %625
  %634 = getelementptr inbounds %"struct.libgav1::ReferenceInfo", %"struct.libgav1::ReferenceInfo"* %0, i64 0, i32 4, i32 0, i64 %628
  %635 = load i16, i16* %634, align 2
  %636 = sext i16 %635 to i32
  %637 = bitcast %"struct.libgav1::MotionVector"* %633 to [2 x i16]*
  %638 = mul i32 %636, %1
  %639 = bitcast %"struct.libgav1::MotionVector"* %633 to i16*
  %640 = load i16, i16* %639, align 2
  %641 = sext i16 %640 to i32
  %642 = mul i32 %638, %641
  %643 = ashr i32 %642, 31
  %644 = add i32 %642, 8192
  %645 = add i32 %644, %643
  %646 = ashr i32 %645, 14
  %647 = icmp slt i32 %646, 16383
  %648 = select i1 %647, i32 %646, i32 16383
  %649 = icmp sgt i32 %648, -16383
  %650 = select i1 %649, i32 %648, i32 -16383
  %651 = getelementptr inbounds [2 x i16], [2 x i16]* %637, i64 0, i64 1
  %652 = load i16, i16* %651, align 2
  %653 = sext i16 %652 to i32
  %654 = mul i32 %638, %653
  %655 = ashr i32 %654, 31
  %656 = add i32 %654, 8192
  %657 = add i32 %656, %655
  %658 = ashr i32 %657, 14
  %659 = icmp slt i32 %658, 16383
  %660 = select i1 %659, i32 %658, i32 16383
  %661 = sdiv i32 %650, 64
  %662 = xor i32 %661, %2
  %663 = sub i32 %662, %2
  %664 = icmp sge i32 %663, %102
  %665 = icmp slt i32 %663, %106
  %666 = and i1 %664, %665
  br i1 %666, label %667, label %696

667:                                              ; preds = %632
  %668 = icmp sgt i32 %660, -16383
  %669 = select i1 %668, i32 %660, i32 -16383
  %670 = trunc i64 %625 to i32
  %671 = and i32 %670, 2147483640
  %672 = add nsw i32 %671, -8
  %673 = icmp sgt i32 %672, %5
  %674 = select i1 %673, i32 %672, i32 %5
  %675 = add nuw nsw i32 %671, 16
  %676 = icmp slt i32 %675, %6
  %677 = select i1 %676, i32 %675, i32 %6
  %678 = sdiv i32 %669, 64
  %679 = xor i32 %678, %2
  %680 = sub i32 %670, %2
  %681 = add i32 %679, %680
  %682 = icmp sge i32 %681, %674
  %683 = icmp slt i32 %681, %677
  %684 = and i1 %682, %683
  br i1 %684, label %685, label %696

685:                                              ; preds = %667
  %686 = sext i32 %663 to i64
  %687 = mul nsw i64 %686, %11
  %688 = sext i32 %681 to i64
  %689 = add nsw i64 %687, %688
  %690 = getelementptr inbounds %"struct.libgav1::MotionVector", %"struct.libgav1::MotionVector"* %633, i64 0, i32 0, i32 0
  %691 = load i32, i32* %690, align 4
  %692 = getelementptr inbounds %"struct.libgav1::MotionVector", %"struct.libgav1::MotionVector"* %97, i64 %689, i32 0, i32 0
  store i32 %691, i32* %692, align 4
  %693 = getelementptr inbounds %"struct.libgav1::ReferenceInfo", %"struct.libgav1::ReferenceInfo"* %0, i64 0, i32 2, i32 0, i64 %628
  %694 = load i8, i8* %693, align 1
  %695 = getelementptr inbounds i8, i8* %96, i64 %689
  store i8 %694, i8* %695, align 1
  br label %696

696:                                              ; preds = %632, %667, %685, %624
  %697 = add nuw nsw i64 %625, 1
  %698 = trunc i64 %697 to i32
  %699 = icmp sgt i32 %17, %698
  br i1 %699, label %624, label %700

700:                                              ; preds = %696, %387, %391, %616, %614, %503, %401, %384
  %701 = getelementptr inbounds i8, i8* %100, i64 %11
  %702 = getelementptr inbounds %"struct.libgav1::MotionVector", %"struct.libgav1::MotionVector"* %99, i64 %11
  %703 = getelementptr inbounds i8, i8* %96, i64 %11
  %704 = getelementptr inbounds %"struct.libgav1::MotionVector", %"struct.libgav1::MotionVector"* %97, i64 %11
  %705 = add nsw i32 %98, 1
  %706 = icmp slt i32 %705, %4
  br i1 %706, label %95, label %707

707:                                              ; preds = %700
  ret void
}

; Function Attrs: nounwind readnone
declare <16 x i8> @llvm.x86.ssse3.pshuf.b.128(<16 x i8>, <16 x i8>) #3

; Function Attrs: nounwind readnone
declare <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16>, <8 x i16>) #3

; Function Attrs: nounwind readnone
declare <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32>, <4 x i32>) #3

; Function Attrs: nounwind readnone
declare <16 x i8> @llvm.x86.sse2.packsswb.128(<8 x i16>, <8 x i16>) #3

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+sse4.1,+ssse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+sse4.1,+ssse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="128" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+sse4.1,+ssse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind readnone }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{i8 0, i8 2}
