; ModuleID = '../../third_party/webrtc/net/dcsctp/packet/parameter/parameter.cc'
source_filename = "../../third_party/webrtc/net/dcsctp/packet/parameter/parameter.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.dcsctp::Parameters::Builder" = type { %"class.std::__1::vector" }
%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { i8*, i8*, %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { i8* }
%"class.dcsctp::Parameter" = type { i32 (...)** }
%"class.std::__1::vector.1" = type { %"class.std::__1::__vector_base.2" }
%"class.std::__1::__vector_base.2" = type { %"struct.dcsctp::ParameterDescriptor"*, %"struct.dcsctp::ParameterDescriptor"*, %"class.std::__1::__compressed_pair.3" }
%"struct.dcsctp::ParameterDescriptor" = type { i16, %"class.rtc::ArrayView" }
%"class.rtc::ArrayView" = type { %"class.rtc::impl::ArrayViewBase" }
%"class.rtc::impl::ArrayViewBase" = type { i8*, i64 }
%"class.std::__1::__compressed_pair.3" = type { %"struct.std::__1::__compressed_pair_elem.4" }
%"struct.std::__1::__compressed_pair_elem.4" = type { %"struct.dcsctp::ParameterDescriptor"* }
%"class.dcsctp::Parameters" = type { %"class.std::__1::vector" }
%"class.std::__1::__vector_base_common" = type { i8 }
%"class.absl::optional" = type { %"class.absl::optional_internal::optional_data" }
%"class.absl::optional_internal::optional_data" = type { %"class.absl::optional_internal::optional_data_base" }
%"class.absl::optional_internal::optional_data_base" = type { %"class.absl::optional_internal::optional_data_dtor_base" }
%"class.absl::optional_internal::optional_data_dtor_base" = type { i8, %union.anon }
%union.anon = type { %"class.dcsctp::Parameters" }

$_ZNSt3__16vectorIhNS_9allocatorIhEEE8__appendEm = comdat any

; Function Attrs: nounwind ssp uwtable
define hidden dereferenceable(24) %"class.dcsctp::Parameters::Builder"* @_ZN6dcsctp10Parameters7Builder3AddERKNS_9ParameterE(%"class.dcsctp::Parameters::Builder"* returned, %"class.dcsctp::Parameter"* dereferenceable(8)) local_unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.dcsctp::Parameters::Builder", %"class.dcsctp::Parameters::Builder"* %0, i64 0, i32 0
  %4 = getelementptr inbounds %"class.dcsctp::Parameters::Builder", %"class.dcsctp::Parameters::Builder"* %0, i64 0, i32 0, i32 0, i32 1
  %5 = bitcast i8** %4 to i64*
  %6 = load i64, i64* %5, align 8
  %7 = bitcast %"class.dcsctp::Parameters::Builder"* %0 to i64*
  %8 = load i64, i64* %7, align 8
  %9 = sub i64 %6, %8
  %10 = and i64 %9, 3
  %11 = icmp eq i64 %10, 0
  br i1 %11, label %23, label %12

12:                                               ; preds = %2
  %13 = add i64 %9, 3
  %14 = and i64 %13, -4
  %15 = icmp ugt i64 %14, %9
  %16 = inttoptr i64 %8 to i8*
  br i1 %15, label %17, label %19

17:                                               ; preds = %12
  %18 = sub i64 %14, %9
  tail call void @_ZNSt3__16vectorIhNS_9allocatorIhEEE8__appendEm(%"class.std::__1::vector"* %3, i64 %18) #5
  br label %23

19:                                               ; preds = %12
  %20 = icmp ult i64 %14, %9
  br i1 %20, label %21, label %23

21:                                               ; preds = %19
  %22 = getelementptr inbounds i8, i8* %16, i64 %14
  store i8* %22, i8** %4, align 8
  br label %23

23:                                               ; preds = %21, %19, %17, %2
  %24 = bitcast %"class.dcsctp::Parameter"* %1 to void (%"class.dcsctp::Parameter"*, %"class.std::__1::vector"*)***
  %25 = load void (%"class.dcsctp::Parameter"*, %"class.std::__1::vector"*)**, void (%"class.dcsctp::Parameter"*, %"class.std::__1::vector"*)*** %24, align 8
  %26 = getelementptr inbounds void (%"class.dcsctp::Parameter"*, %"class.std::__1::vector"*)*, void (%"class.dcsctp::Parameter"*, %"class.std::__1::vector"*)** %25, i64 2
  %27 = load void (%"class.dcsctp::Parameter"*, %"class.std::__1::vector"*)*, void (%"class.dcsctp::Parameter"*, %"class.std::__1::vector"*)** %26, align 8
  tail call void %27(%"class.dcsctp::Parameter"* %1, %"class.std::__1::vector"* dereferenceable(24) %3) #5
  ret %"class.dcsctp::Parameters::Builder"* %0
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZNK6dcsctp10Parameters11descriptorsEv(%"class.std::__1::vector.1"* noalias sret, %"class.dcsctp::Parameters"* nocapture readonly) local_unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.dcsctp::Parameters", %"class.dcsctp::Parameters"* %1, i64 0, i32 0, i32 0, i32 0
  %4 = load i8*, i8** %3, align 8
  %5 = getelementptr inbounds %"class.dcsctp::Parameters", %"class.dcsctp::Parameters"* %1, i64 0, i32 0, i32 0, i32 1
  %6 = bitcast i8** %5 to i64*
  %7 = load i64, i64* %6, align 8
  %8 = ptrtoint i8* %4 to i64
  %9 = sub i64 %7, %8
  %10 = getelementptr inbounds %"class.std::__1::vector.1", %"class.std::__1::vector.1"* %0, i64 0, i32 0, i32 1
  %11 = getelementptr inbounds %"class.std::__1::vector.1", %"class.std::__1::vector.1"* %0, i64 0, i32 0, i32 2, i32 0, i32 0
  %12 = bitcast %"class.std::__1::vector.1"* %0 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %12, i8 0, i64 24, i1 false) #5
  %13 = icmp eq i64 %9, 0
  br i1 %13, label %113, label %14

14:                                               ; preds = %2
  %15 = bitcast %"struct.dcsctp::ParameterDescriptor"** %10 to i64*
  %16 = bitcast %"class.std::__1::vector.1"* %0 to i64*
  %17 = bitcast %"struct.dcsctp::ParameterDescriptor"** %11 to i64*
  br label %18

18:                                               ; preds = %107, %14
  %19 = phi i64 [ 0, %14 ], [ %112, %107 ]
  %20 = phi i64 [ 0, %14 ], [ %111, %107 ]
  %21 = phi %"struct.dcsctp::ParameterDescriptor"* [ null, %14 ], [ %110, %107 ]
  %22 = phi %"struct.dcsctp::ParameterDescriptor"* [ null, %14 ], [ %109, %107 ]
  %23 = phi i64 [ %9, %14 ], [ %105, %107 ]
  %24 = phi i8* [ %4, %14 ], [ %108, %107 ]
  %25 = load i8, i8* %24, align 1
  %26 = zext i8 %25 to i16
  %27 = shl nuw i16 %26, 8
  %28 = getelementptr inbounds i8, i8* %24, i64 1
  %29 = load i8, i8* %28, align 1
  %30 = zext i8 %29 to i16
  %31 = or i16 %27, %30
  %32 = getelementptr inbounds i8, i8* %24, i64 2
  %33 = load i8, i8* %32, align 1
  %34 = zext i8 %33 to i16
  %35 = shl nuw i16 %34, 8
  %36 = getelementptr inbounds i8, i8* %24, i64 3
  %37 = load i8, i8* %36, align 1
  %38 = zext i8 %37 to i16
  %39 = or i16 %35, %38
  %40 = zext i16 %39 to i64
  %41 = icmp ult i64 %23, %40
  %42 = select i1 %41, i64 %23, i64 %40
  %43 = icmp eq i64 %42, 0
  %44 = icmp ult %"struct.dcsctp::ParameterDescriptor"* %22, %21
  br i1 %44, label %45, label %52

45:                                               ; preds = %18
  %46 = getelementptr inbounds %"struct.dcsctp::ParameterDescriptor", %"struct.dcsctp::ParameterDescriptor"* %22, i64 0, i32 0
  store i16 %31, i16* %46, align 8
  %47 = getelementptr inbounds %"struct.dcsctp::ParameterDescriptor", %"struct.dcsctp::ParameterDescriptor"* %22, i64 0, i32 1, i32 0, i32 0
  %48 = select i1 %43, i8* null, i8* %24
  store i8* %48, i8** %47, align 8
  %49 = getelementptr inbounds %"struct.dcsctp::ParameterDescriptor", %"struct.dcsctp::ParameterDescriptor"* %22, i64 0, i32 1, i32 0, i32 1
  store i64 %42, i64* %49, align 8
  %50 = getelementptr inbounds %"struct.dcsctp::ParameterDescriptor", %"struct.dcsctp::ParameterDescriptor"* %22, i64 1
  %51 = ptrtoint %"struct.dcsctp::ParameterDescriptor"* %50 to i64
  store i64 %51, i64* %15, align 8
  br label %97

52:                                               ; preds = %18
  %53 = load i64, i64* %16, align 8
  %54 = sub i64 %20, %53
  %55 = sdiv exact i64 %54, 24
  %56 = add nsw i64 %55, 1
  %57 = icmp ugt i64 %56, 768614336404564650
  br i1 %57, label %58, label %60

58:                                               ; preds = %52
  %59 = bitcast %"class.std::__1::vector.1"* %0 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %59) #6
  unreachable

60:                                               ; preds = %52
  %61 = sub i64 %19, %53
  %62 = sdiv exact i64 %61, 24
  %63 = icmp ult i64 %62, 384307168202282325
  br i1 %63, label %64, label %69

64:                                               ; preds = %60
  %65 = shl nsw i64 %62, 1
  %66 = icmp ult i64 %65, %56
  %67 = select i1 %66, i64 %56, i64 %65
  %68 = icmp eq i64 %67, 0
  br i1 %68, label %74, label %69

69:                                               ; preds = %64, %60
  %70 = phi i64 [ %67, %64 ], [ 768614336404564650, %60 ]
  %71 = mul i64 %70, 24
  %72 = tail call i8* @_Znwm(i64 %71) #7
  %73 = bitcast i8* %72 to %"struct.dcsctp::ParameterDescriptor"*
  br label %74

74:                                               ; preds = %69, %64
  %75 = phi i64 [ %70, %69 ], [ 0, %64 ]
  %76 = phi %"struct.dcsctp::ParameterDescriptor"* [ %73, %69 ], [ null, %64 ]
  %77 = getelementptr inbounds %"struct.dcsctp::ParameterDescriptor", %"struct.dcsctp::ParameterDescriptor"* %76, i64 %55
  %78 = getelementptr inbounds %"struct.dcsctp::ParameterDescriptor", %"struct.dcsctp::ParameterDescriptor"* %76, i64 %75
  %79 = ptrtoint %"struct.dcsctp::ParameterDescriptor"* %78 to i64
  %80 = getelementptr inbounds %"struct.dcsctp::ParameterDescriptor", %"struct.dcsctp::ParameterDescriptor"* %77, i64 0, i32 0
  store i16 %31, i16* %80, align 8
  %81 = getelementptr inbounds %"struct.dcsctp::ParameterDescriptor", %"struct.dcsctp::ParameterDescriptor"* %76, i64 %55, i32 1, i32 0, i32 0
  %82 = select i1 %43, i8* null, i8* %24
  store i8* %82, i8** %81, align 8
  %83 = getelementptr inbounds %"struct.dcsctp::ParameterDescriptor", %"struct.dcsctp::ParameterDescriptor"* %76, i64 %55, i32 1, i32 0, i32 1
  store i64 %42, i64* %83, align 8
  %84 = getelementptr inbounds %"struct.dcsctp::ParameterDescriptor", %"struct.dcsctp::ParameterDescriptor"* %77, i64 1
  %85 = ptrtoint %"struct.dcsctp::ParameterDescriptor"* %84 to i64
  %86 = sdiv exact i64 %54, -24
  %87 = getelementptr inbounds %"struct.dcsctp::ParameterDescriptor", %"struct.dcsctp::ParameterDescriptor"* %77, i64 %86
  %88 = ptrtoint %"struct.dcsctp::ParameterDescriptor"* %87 to i64
  %89 = icmp sgt i64 %54, 0
  br i1 %89, label %90, label %93

90:                                               ; preds = %74
  %91 = bitcast %"struct.dcsctp::ParameterDescriptor"* %87 to i8*
  %92 = inttoptr i64 %53 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %91, i8* align 8 %92, i64 %54, i1 false) #5
  br label %93

93:                                               ; preds = %90, %74
  store i64 %88, i64* %16, align 8
  store i64 %85, i64* %15, align 8
  store i64 %79, i64* %17, align 8
  %94 = icmp eq i64 %53, 0
  br i1 %94, label %97, label %95

95:                                               ; preds = %93
  %96 = inttoptr i64 %53 to i8*
  tail call void @_ZdlPv(i8* %96) #7
  br label %97

97:                                               ; preds = %95, %93, %45
  %98 = add i16 %39, 3
  %99 = and i16 %98, -4
  %100 = zext i16 %99 to i64
  %101 = icmp ugt i64 %23, %100
  br i1 %101, label %102, label %113

102:                                              ; preds = %97
  %103 = sub i64 %23, %100
  %104 = icmp ult i64 %103, %23
  %105 = select i1 %104, i64 %103, i64 %23
  %106 = icmp eq i64 %105, 0
  br i1 %106, label %113, label %107

107:                                              ; preds = %102
  %108 = getelementptr inbounds i8, i8* %24, i64 %100
  %109 = load %"struct.dcsctp::ParameterDescriptor"*, %"struct.dcsctp::ParameterDescriptor"** %10, align 8
  %110 = load %"struct.dcsctp::ParameterDescriptor"*, %"struct.dcsctp::ParameterDescriptor"** %11, align 8
  %111 = ptrtoint %"struct.dcsctp::ParameterDescriptor"* %109 to i64
  %112 = ptrtoint %"struct.dcsctp::ParameterDescriptor"* %110 to i64
  br label %18

113:                                              ; preds = %102, %97, %2
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #1

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN6dcsctp10Parameters5ParseEN3rtc9ArrayViewIKhLln4711EEE(%"class.absl::optional"* noalias nocapture sret, i8*, i64) local_unnamed_addr #0 align 2 {
  %4 = alloca %"class.std::__1::vector", align 8
  %5 = icmp eq i64 %2, 0
  br i1 %5, label %6, label %8

6:                                                ; preds = %3
  %7 = bitcast %"class.std::__1::vector"* %4 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %7, i8 0, i64 24, i1 false) #5
  br label %61

8:                                                ; preds = %3, %38
  %9 = phi i64 [ %42, %38 ], [ %2, %3 ]
  %10 = phi i8* [ %44, %38 ], [ %1, %3 ]
  %11 = icmp ult i64 %9, 4
  br i1 %11, label %12, label %16

12:                                               ; preds = %8
  %13 = getelementptr inbounds %"class.absl::optional", %"class.absl::optional"* %0, i64 0, i32 0, i32 0, i32 0, i32 0
  store i8 0, i8* %13, align 8
  %14 = getelementptr inbounds %"class.absl::optional", %"class.absl::optional"* %0, i64 0, i32 0, i32 0, i32 0, i32 1
  %15 = bitcast %union.anon* %14 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %15, i8 0, i64 24, i1 false) #5
  br label %72

16:                                               ; preds = %8
  %17 = getelementptr inbounds i8, i8* %10, i64 2
  %18 = load i8, i8* %17, align 1
  %19 = zext i8 %18 to i16
  %20 = shl nuw i16 %19, 8
  %21 = getelementptr inbounds i8, i8* %10, i64 3
  %22 = load i8, i8* %21, align 1
  %23 = zext i8 %22 to i16
  %24 = or i16 %20, %23
  %25 = icmp ult i16 %24, 4
  %26 = zext i16 %24 to i64
  %27 = icmp ult i64 %9, %26
  %28 = or i1 %25, %27
  br i1 %28, label %29, label %33

29:                                               ; preds = %16
  %30 = getelementptr inbounds %"class.absl::optional", %"class.absl::optional"* %0, i64 0, i32 0, i32 0, i32 0, i32 0
  store i8 0, i8* %30, align 8
  %31 = getelementptr inbounds %"class.absl::optional", %"class.absl::optional"* %0, i64 0, i32 0, i32 0, i32 0, i32 1
  %32 = bitcast %union.anon* %31 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %32, i8 0, i64 24, i1 false) #5
  br label %72

33:                                               ; preds = %16
  %34 = add i16 %24, 3
  %35 = and i16 %34, -4
  %36 = zext i16 %35 to i64
  %37 = icmp ugt i64 %9, %36
  br i1 %37, label %38, label %46

38:                                               ; preds = %33
  %39 = getelementptr inbounds i8, i8* %10, i64 %36
  %40 = sub i64 %9, %36
  %41 = icmp ult i64 %40, %9
  %42 = select i1 %41, i64 %40, i64 %9
  %43 = icmp eq i64 %42, 0
  %44 = select i1 %43, i8* null, i8* %39
  %45 = icmp eq i64 %42, 0
  br i1 %45, label %46, label %8

46:                                               ; preds = %33, %38
  %47 = bitcast %"class.std::__1::vector"* %4 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %47, i8 0, i64 24, i1 false) #5
  br i1 %5, label %61, label %48

48:                                               ; preds = %46
  %49 = icmp slt i64 %2, 0
  br i1 %49, label %50, label %52

50:                                               ; preds = %48
  %51 = bitcast %"class.std::__1::vector"* %4 to %"class.std::__1::__vector_base_common"*
  call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* nonnull %51) #6
  unreachable

52:                                               ; preds = %48
  %53 = tail call i8* @_Znwm(i64 %2) #7
  %54 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %4, i64 0, i32 0, i32 1
  %55 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %4, i64 0, i32 0, i32 0
  store i8* %53, i8** %55, align 8
  %56 = getelementptr inbounds i8, i8* %53, i64 %2
  %57 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %4, i64 0, i32 0, i32 2, i32 0, i32 0
  store i8* %56, i8** %57, align 8
  %58 = bitcast i8** %54 to i64*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 1 %53, i8* align 1 %1, i64 %2, i1 false) #5
  %59 = ptrtoint i8* %56 to i64
  store i64 %59, i64* %58, align 8
  %60 = ptrtoint i8* %53 to i64
  br label %61

61:                                               ; preds = %46, %6, %52
  %62 = phi i8* [ %47, %52 ], [ %7, %6 ], [ %47, %46 ]
  %63 = phi i64 [ %59, %52 ], [ 0, %6 ], [ 0, %46 ]
  %64 = phi i64 [ %60, %52 ], [ 0, %6 ], [ 0, %46 ]
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %62, i8 0, i64 24, i1 false) #5
  %65 = getelementptr inbounds %"class.absl::optional", %"class.absl::optional"* %0, i64 0, i32 0, i32 0, i32 0, i32 0
  store i8 1, i8* %65, align 8
  %66 = getelementptr inbounds %"class.absl::optional", %"class.absl::optional"* %0, i64 0, i32 0, i32 0, i32 0, i32 1, i32 0
  %67 = bitcast %"class.dcsctp::Parameters"* %66 to i64*
  store i64 %64, i64* %67, align 8
  %68 = getelementptr inbounds %"class.absl::optional", %"class.absl::optional"* %0, i64 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 0, i32 1
  %69 = bitcast i8** %68 to i64*
  store i64 %63, i64* %69, align 8
  %70 = getelementptr inbounds %"class.absl::optional", %"class.absl::optional"* %0, i64 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 0, i32 2, i32 0, i32 0
  %71 = bitcast i8** %70 to i64*
  store i64 %63, i64* %71, align 8
  br label %72

72:                                               ; preds = %61, %29, %12
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #2

; Function Attrs: noreturn
declare void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"*) local_unnamed_addr #3

; Function Attrs: nobuiltin nofree
declare noalias nonnull i8* @_Znwm(i64) local_unnamed_addr #4

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__16vectorIhNS_9allocatorIhEEE8__appendEm(%"class.std::__1::vector"*, i64) local_unnamed_addr #0 comdat align 2 {
  %3 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 0, i32 2, i32 0, i32 0
  %4 = bitcast i8** %3 to i64*
  %5 = load i64, i64* %4, align 8
  %6 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 0, i32 1
  %7 = bitcast i8** %6 to i64*
  %8 = load i64, i64* %7, align 8
  %9 = sub i64 %5, %8
  %10 = icmp ult i64 %9, %1
  br i1 %10, label %22, label %11

11:                                               ; preds = %2
  %12 = inttoptr i64 %8 to i8*
  %13 = icmp eq i64 %1, 0
  br i1 %13, label %20, label %14

14:                                               ; preds = %11
  %15 = getelementptr inbounds i8, i8* %12, i64 %1
  %16 = sub i64 %1, %8
  %17 = getelementptr i8, i8* %12, i64 %16
  %18 = ptrtoint i8* %17 to i64
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %12, i8 0, i64 %18, i1 false) #5
  %19 = ptrtoint i8* %15 to i64
  br label %20

20:                                               ; preds = %11, %14
  %21 = phi i64 [ %19, %14 ], [ %8, %11 ]
  store i64 %21, i64* %7, align 8
  br label %68

22:                                               ; preds = %2
  %23 = bitcast %"class.std::__1::vector"* %0 to i64*
  %24 = load i64, i64* %23, align 8
  %25 = sub i64 %8, %24
  %26 = add i64 %25, %1
  %27 = icmp slt i64 %26, 0
  br i1 %27, label %28, label %30

28:                                               ; preds = %22
  %29 = bitcast %"class.std::__1::vector"* %0 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %29) #6
  unreachable

30:                                               ; preds = %22
  %31 = sub i64 %5, %24
  %32 = icmp ult i64 %31, 4611686018427387903
  br i1 %32, label %33, label %38

33:                                               ; preds = %30
  %34 = shl i64 %31, 1
  %35 = icmp ult i64 %34, %26
  %36 = select i1 %35, i64 %26, i64 %34
  %37 = icmp eq i64 %36, 0
  br i1 %37, label %41, label %38

38:                                               ; preds = %30, %33
  %39 = phi i64 [ %36, %33 ], [ 9223372036854775807, %30 ]
  %40 = tail call i8* @_Znwm(i64 %39) #7
  br label %41

41:                                               ; preds = %38, %33
  %42 = phi i64 [ %39, %38 ], [ 0, %33 ]
  %43 = phi i8* [ %40, %38 ], [ null, %33 ]
  %44 = getelementptr inbounds i8, i8* %43, i64 %25
  %45 = ptrtoint i8* %44 to i64
  %46 = getelementptr inbounds i8, i8* %43, i64 %42
  %47 = getelementptr inbounds i8, i8* %44, i64 %1
  %48 = sub i64 %1, %45
  %49 = getelementptr i8, i8* %44, i64 %48
  %50 = ptrtoint i8* %49 to i64
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %44, i8 0, i64 %50, i1 false) #5
  %51 = ptrtoint i8* %46 to i64
  %52 = ptrtoint i8* %47 to i64
  %53 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 0, i32 0
  %54 = load i8*, i8** %53, align 8
  %55 = load i64, i64* %7, align 8
  %56 = ptrtoint i8* %54 to i64
  %57 = sub i64 %55, %56
  %58 = sub i64 0, %57
  %59 = getelementptr inbounds i8, i8* %44, i64 %58
  %60 = ptrtoint i8* %59 to i64
  %61 = icmp sgt i64 %57, 0
  br i1 %61, label %62, label %64

62:                                               ; preds = %41
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %59, i8* align 1 %54, i64 %57, i1 false) #5
  %63 = load i8*, i8** %53, align 8
  br label %64

64:                                               ; preds = %41, %62
  %65 = phi i8* [ %54, %41 ], [ %63, %62 ]
  store i64 %60, i64* %23, align 8
  store i64 %52, i64* %7, align 8
  store i64 %51, i64* %4, align 8
  %66 = icmp eq i8* %65, null
  br i1 %66, label %68, label %67

67:                                               ; preds = %64
  tail call void @_ZdlPv(i8* nonnull %65) #7
  br label %68

68:                                               ; preds = %67, %64, %20
  ret void
}

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nobuiltin nofree "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind }
attributes #6 = { noreturn nounwind }
attributes #7 = { builtin nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
