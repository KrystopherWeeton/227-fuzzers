; ModuleID = '../../third_party/libaom/source/libaom/aom_dsp/x86/aom_subpixel_8t_intrin_avx2.c'
source_filename = "../../third_party/libaom/source/libaom/aom_dsp/x86/aom_subpixel_8t_intrin_avx2.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

; Function Attrs: nounwind ssp uwtable
define hidden void @aom_convolve8_horiz_avx2(i8*, i64, i8*, i64, i16*, i32, i16*, i32, i32, i32) local_unnamed_addr #0 {
  %11 = load i16, i16* %4, align 2
  %12 = getelementptr inbounds i16, i16* %4, i64 1
  %13 = load i16, i16* %12, align 2
  %14 = or i16 %13, %11
  %15 = getelementptr inbounds i16, i16* %4, i64 6
  %16 = load i16, i16* %15, align 2
  %17 = or i16 %14, %16
  %18 = getelementptr inbounds i16, i16* %4, i64 7
  %19 = load i16, i16* %18, align 2
  %20 = or i16 %17, %19
  %21 = icmp eq i16 %20, 0
  %22 = getelementptr inbounds i16, i16* %4, i64 2
  %23 = load i16, i16* %22, align 2
  br i1 %21, label %24, label %290

24:                                               ; preds = %10
  %25 = getelementptr inbounds i16, i16* %4, i64 5
  %26 = load i16, i16* %25, align 2
  %27 = or i16 %26, %23
  %28 = icmp eq i16 %27, 0
  br i1 %28, label %290, label %29

29:                                               ; preds = %24
  %30 = icmp sgt i32 %8, 15
  br i1 %30, label %31, label %39

31:                                               ; preds = %29
  %32 = bitcast i16* %4 to <8 x i16>*
  %33 = shl i64 %1, 1
  %34 = shl i64 %3, 1
  %35 = icmp ugt i32 %9, 1
  %36 = and i32 %9, 1
  br label %50

37:                                               ; preds = %129
  %38 = and i32 %8, 15
  br label %39

39:                                               ; preds = %37, %29
  %40 = phi i8* [ %2, %29 ], [ %131, %37 ]
  %41 = phi i32 [ %8, %29 ], [ %38, %37 ]
  %42 = phi i8* [ %0, %29 ], [ %130, %37 ]
  %43 = icmp sgt i32 %41, 7
  br i1 %43, label %44, label %136

44:                                               ; preds = %39
  %45 = bitcast i16* %4 to <8 x i16>*
  %46 = shl i64 %1, 1
  %47 = shl i64 %3, 1
  %48 = icmp ugt i32 %9, 1
  %49 = and i32 %9, 1
  br label %147

50:                                               ; preds = %31, %129
  %51 = phi i8* [ %0, %31 ], [ %130, %129 ]
  %52 = phi i32 [ %8, %31 ], [ %132, %129 ]
  %53 = phi i8* [ %2, %31 ], [ %131, %129 ]
  %54 = getelementptr inbounds i8, i8* %51, i64 -3
  %55 = load <8 x i16>, <8 x i16>* %32, align 1
  %56 = ashr <8 x i16> %55, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %57 = tail call <16 x i8> @llvm.x86.sse2.packsswb.128(<8 x i16> %56, <8 x i16> %56) #4
  %58 = bitcast <16 x i8> %57 to <2 x i64>
  %59 = shufflevector <2 x i64> %58, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 0, i32 1>
  %60 = bitcast <4 x i64> %59 to <32 x i8>
  %61 = shufflevector <32 x i8> %60, <32 x i8> undef, <32 x i32> <i32 2, i32 3, i32 2, i32 3, i32 2, i32 3, i32 2, i32 3, i32 2, i32 3, i32 2, i32 3, i32 2, i32 3, i32 2, i32 3, i32 18, i32 19, i32 18, i32 19, i32 18, i32 19, i32 18, i32 19, i32 18, i32 19, i32 18, i32 19, i32 18, i32 19, i32 18, i32 19>
  %62 = shufflevector <32 x i8> %60, <32 x i8> undef, <32 x i32> <i32 4, i32 5, i32 4, i32 5, i32 4, i32 5, i32 4, i32 5, i32 4, i32 5, i32 4, i32 5, i32 4, i32 5, i32 4, i32 5, i32 20, i32 21, i32 20, i32 21, i32 20, i32 21, i32 20, i32 21, i32 20, i32 21, i32 20, i32 21, i32 20, i32 21, i32 20, i32 21>
  br i1 %35, label %63, label %108

63:                                               ; preds = %50, %63
  %64 = phi i8* [ %98, %63 ], [ %54, %50 ]
  %65 = phi i8* [ %105, %63 ], [ %53, %50 ]
  %66 = phi i32 [ %106, %63 ], [ %9, %50 ]
  %67 = getelementptr inbounds i8, i8* %64, i64 %1
  %68 = bitcast i8* %64 to <2 x i64>*
  %69 = load <2 x i64>, <2 x i64>* %68, align 1
  %70 = bitcast i8* %67 to <2 x i64>*
  %71 = load <2 x i64>, <2 x i64>* %70, align 1
  %72 = shufflevector <2 x i64> %69, <2 x i64> %71, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %73 = bitcast <4 x i64> %72 to <32 x i8>
  %74 = shufflevector <32 x i8> %73, <32 x i8> undef, <32 x i32> <i32 2, i32 3, i32 3, i32 4, i32 4, i32 5, i32 5, i32 6, i32 6, i32 7, i32 7, i32 8, i32 8, i32 9, i32 9, i32 10, i32 18, i32 19, i32 19, i32 20, i32 20, i32 21, i32 21, i32 22, i32 22, i32 23, i32 23, i32 24, i32 24, i32 25, i32 25, i32 26>
  %75 = shufflevector <32 x i8> %73, <32 x i8> undef, <32 x i32> <i32 4, i32 5, i32 5, i32 6, i32 6, i32 7, i32 7, i32 8, i32 8, i32 9, i32 9, i32 10, i32 10, i32 11, i32 11, i32 12, i32 20, i32 21, i32 21, i32 22, i32 22, i32 23, i32 23, i32 24, i32 24, i32 25, i32 25, i32 26, i32 26, i32 27, i32 27, i32 28>
  %76 = tail call <16 x i16> @llvm.x86.avx2.pmadd.ub.sw(<32 x i8> %74, <32 x i8> %61) #4
  %77 = tail call <16 x i16> @llvm.x86.avx2.pmadd.ub.sw(<32 x i8> %75, <32 x i8> %62) #4
  %78 = tail call <16 x i16> @llvm.sadd.sat.v16i16(<16 x i16> %76, <16 x i16> %77) #4
  %79 = getelementptr inbounds i8, i8* %67, i64 8
  %80 = getelementptr inbounds i8, i8* %64, i64 8
  %81 = bitcast i8* %80 to <2 x i64>*
  %82 = load <2 x i64>, <2 x i64>* %81, align 1
  %83 = bitcast i8* %79 to <2 x i64>*
  %84 = load <2 x i64>, <2 x i64>* %83, align 1
  %85 = shufflevector <2 x i64> %82, <2 x i64> %84, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %86 = bitcast <4 x i64> %85 to <32 x i8>
  %87 = shufflevector <32 x i8> %86, <32 x i8> undef, <32 x i32> <i32 2, i32 3, i32 3, i32 4, i32 4, i32 5, i32 5, i32 6, i32 6, i32 7, i32 7, i32 8, i32 8, i32 9, i32 9, i32 10, i32 18, i32 19, i32 19, i32 20, i32 20, i32 21, i32 21, i32 22, i32 22, i32 23, i32 23, i32 24, i32 24, i32 25, i32 25, i32 26>
  %88 = shufflevector <32 x i8> %86, <32 x i8> undef, <32 x i32> <i32 4, i32 5, i32 5, i32 6, i32 6, i32 7, i32 7, i32 8, i32 8, i32 9, i32 9, i32 10, i32 10, i32 11, i32 11, i32 12, i32 20, i32 21, i32 21, i32 22, i32 22, i32 23, i32 23, i32 24, i32 24, i32 25, i32 25, i32 26, i32 26, i32 27, i32 27, i32 28>
  %89 = tail call <16 x i16> @llvm.x86.avx2.pmadd.ub.sw(<32 x i8> %87, <32 x i8> %61) #4
  %90 = tail call <16 x i16> @llvm.x86.avx2.pmadd.ub.sw(<32 x i8> %88, <32 x i8> %62) #4
  %91 = tail call <16 x i16> @llvm.sadd.sat.v16i16(<16 x i16> %89, <16 x i16> %90) #4
  %92 = tail call <16 x i16> @llvm.sadd.sat.v16i16(<16 x i16> %78, <16 x i16> <i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32>) #4
  %93 = tail call <16 x i16> @llvm.sadd.sat.v16i16(<16 x i16> %91, <16 x i16> <i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32>) #4
  %94 = ashr <16 x i16> %92, <i16 6, i16 6, i16 6, i16 6, i16 6, i16 6, i16 6, i16 6, i16 6, i16 6, i16 6, i16 6, i16 6, i16 6, i16 6, i16 6>
  %95 = ashr <16 x i16> %93, <i16 6, i16 6, i16 6, i16 6, i16 6, i16 6, i16 6, i16 6, i16 6, i16 6, i16 6, i16 6, i16 6, i16 6, i16 6, i16 6>
  %96 = tail call <32 x i8> @llvm.x86.avx2.packuswb(<16 x i16> %94, <16 x i16> %95) #4
  %97 = bitcast <32 x i8> %96 to <4 x i64>
  %98 = getelementptr inbounds i8, i8* %64, i64 %33
  %99 = bitcast i8* %65 to <2 x i64>*
  %100 = shufflevector <4 x i64> %97, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  store <2 x i64> %100, <2 x i64>* %99, align 16
  %101 = getelementptr inbounds i8, i8* %65, i64 %3
  %102 = bitcast <32 x i8> %96 to <8 x i32>
  %103 = shufflevector <8 x i32> %102, <8 x i32> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %104 = bitcast i8* %101 to <4 x i32>*
  store <4 x i32> %103, <4 x i32>* %104, align 16
  %105 = getelementptr inbounds i8, i8* %65, i64 %34
  %106 = add i32 %66, -2
  %107 = icmp ugt i32 %106, 1
  br i1 %107, label %63, label %108

108:                                              ; preds = %63, %50
  %109 = phi i32 [ %9, %50 ], [ %36, %63 ]
  %110 = phi i8* [ %53, %50 ], [ %105, %63 ]
  %111 = phi i8* [ %54, %50 ], [ %98, %63 ]
  %112 = icmp eq i32 %109, 1
  br i1 %112, label %113, label %129

113:                                              ; preds = %108
  %114 = bitcast i8* %111 to <4 x i64>*
  %115 = load <4 x i64>, <4 x i64>* %114, align 1
  %116 = shufflevector <4 x i64> %115, <4 x i64> undef, <4 x i32> <i32 0, i32 1, i32 1, i32 2>
  %117 = bitcast <4 x i64> %116 to <32 x i8>
  %118 = shufflevector <32 x i8> %117, <32 x i8> undef, <32 x i32> <i32 2, i32 3, i32 3, i32 4, i32 4, i32 5, i32 5, i32 6, i32 6, i32 7, i32 7, i32 8, i32 8, i32 9, i32 9, i32 10, i32 18, i32 19, i32 19, i32 20, i32 20, i32 21, i32 21, i32 22, i32 22, i32 23, i32 23, i32 24, i32 24, i32 25, i32 25, i32 26>
  %119 = shufflevector <32 x i8> %117, <32 x i8> undef, <32 x i32> <i32 4, i32 5, i32 5, i32 6, i32 6, i32 7, i32 7, i32 8, i32 8, i32 9, i32 9, i32 10, i32 10, i32 11, i32 11, i32 12, i32 20, i32 21, i32 21, i32 22, i32 22, i32 23, i32 23, i32 24, i32 24, i32 25, i32 25, i32 26, i32 26, i32 27, i32 27, i32 28>
  %120 = tail call <16 x i16> @llvm.x86.avx2.pmadd.ub.sw(<32 x i8> %118, <32 x i8> %61) #4
  %121 = tail call <16 x i16> @llvm.x86.avx2.pmadd.ub.sw(<32 x i8> %119, <32 x i8> %62) #4
  %122 = tail call <16 x i16> @llvm.sadd.sat.v16i16(<16 x i16> %120, <16 x i16> %121) #4
  %123 = tail call <16 x i16> @llvm.sadd.sat.v16i16(<16 x i16> %122, <16 x i16> <i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32>) #4
  %124 = ashr <16 x i16> %123, <i16 6, i16 6, i16 6, i16 6, i16 6, i16 6, i16 6, i16 6, i16 6, i16 6, i16 6, i16 6, i16 6, i16 6, i16 6, i16 6>
  %125 = tail call <32 x i8> @llvm.x86.avx2.packuswb(<16 x i16> %124, <16 x i16> undef) #4
  %126 = bitcast <32 x i8> %125 to <4 x i64>
  %127 = bitcast i8* %110 to <2 x i64>*
  %128 = shufflevector <4 x i64> %126, <4 x i64> undef, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %128, <2 x i64>* %127, align 16
  br label %129

129:                                              ; preds = %108, %113
  %130 = getelementptr inbounds i8, i8* %51, i64 16
  %131 = getelementptr inbounds i8, i8* %53, i64 16
  %132 = add nsw i32 %52, -16
  %133 = icmp sgt i32 %132, 15
  br i1 %133, label %50, label %37

134:                                              ; preds = %217
  %135 = and i32 %41, 7
  br label %136

136:                                              ; preds = %134, %39
  %137 = phi i8* [ %40, %39 ], [ %219, %134 ]
  %138 = phi i32 [ %41, %39 ], [ %135, %134 ]
  %139 = phi i8* [ %42, %39 ], [ %218, %134 ]
  %140 = icmp sgt i32 %138, 3
  br i1 %140, label %141, label %676

141:                                              ; preds = %136
  %142 = bitcast i16* %4 to <8 x i16>*
  %143 = shl i64 %1, 1
  %144 = shl i64 %3, 1
  %145 = icmp ugt i32 %9, 1
  %146 = and i32 %9, 1
  br label %222

147:                                              ; preds = %44, %217
  %148 = phi i8* [ %42, %44 ], [ %218, %217 ]
  %149 = phi i32 [ %41, %44 ], [ %220, %217 ]
  %150 = phi i8* [ %40, %44 ], [ %219, %217 ]
  %151 = getelementptr inbounds i8, i8* %148, i64 -3
  %152 = load <8 x i16>, <8 x i16>* %45, align 1
  %153 = ashr <8 x i16> %152, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %154 = tail call <16 x i8> @llvm.x86.sse2.packsswb.128(<8 x i16> %153, <8 x i16> %153) #4
  %155 = bitcast <16 x i8> %154 to <2 x i64>
  %156 = shufflevector <2 x i64> %155, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 0, i32 1>
  %157 = bitcast <4 x i64> %156 to <32 x i8>
  %158 = shufflevector <32 x i8> %157, <32 x i8> undef, <32 x i32> <i32 2, i32 3, i32 2, i32 3, i32 2, i32 3, i32 2, i32 3, i32 2, i32 3, i32 2, i32 3, i32 2, i32 3, i32 2, i32 3, i32 18, i32 19, i32 18, i32 19, i32 18, i32 19, i32 18, i32 19, i32 18, i32 19, i32 18, i32 19, i32 18, i32 19, i32 18, i32 19>
  %159 = bitcast <32 x i8> %158 to <4 x i64>
  %160 = shufflevector <32 x i8> %157, <32 x i8> undef, <32 x i32> <i32 4, i32 5, i32 4, i32 5, i32 4, i32 5, i32 4, i32 5, i32 4, i32 5, i32 4, i32 5, i32 4, i32 5, i32 4, i32 5, i32 20, i32 21, i32 20, i32 21, i32 20, i32 21, i32 20, i32 21, i32 20, i32 21, i32 20, i32 21, i32 20, i32 21, i32 20, i32 21>
  %161 = bitcast <32 x i8> %160 to <4 x i64>
  br i1 %48, label %162, label %194

162:                                              ; preds = %147, %162
  %163 = phi i8* [ %182, %162 ], [ %151, %147 ]
  %164 = phi i8* [ %191, %162 ], [ %150, %147 ]
  %165 = phi i32 [ %192, %162 ], [ %9, %147 ]
  %166 = getelementptr inbounds i8, i8* %163, i64 %1
  %167 = bitcast i8* %163 to <2 x i64>*
  %168 = load <2 x i64>, <2 x i64>* %167, align 1
  %169 = bitcast i8* %166 to <2 x i64>*
  %170 = load <2 x i64>, <2 x i64>* %169, align 1
  %171 = shufflevector <2 x i64> %168, <2 x i64> %170, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %172 = bitcast <4 x i64> %171 to <32 x i8>
  %173 = shufflevector <32 x i8> %172, <32 x i8> undef, <32 x i32> <i32 2, i32 3, i32 3, i32 4, i32 4, i32 5, i32 5, i32 6, i32 6, i32 7, i32 7, i32 8, i32 8, i32 9, i32 9, i32 10, i32 18, i32 19, i32 19, i32 20, i32 20, i32 21, i32 21, i32 22, i32 22, i32 23, i32 23, i32 24, i32 24, i32 25, i32 25, i32 26>
  %174 = shufflevector <32 x i8> %172, <32 x i8> undef, <32 x i32> <i32 4, i32 5, i32 5, i32 6, i32 6, i32 7, i32 7, i32 8, i32 8, i32 9, i32 9, i32 10, i32 10, i32 11, i32 11, i32 12, i32 20, i32 21, i32 21, i32 22, i32 22, i32 23, i32 23, i32 24, i32 24, i32 25, i32 25, i32 26, i32 26, i32 27, i32 27, i32 28>
  %175 = tail call <16 x i16> @llvm.x86.avx2.pmadd.ub.sw(<32 x i8> %173, <32 x i8> %158) #4
  %176 = tail call <16 x i16> @llvm.x86.avx2.pmadd.ub.sw(<32 x i8> %174, <32 x i8> %160) #4
  %177 = tail call <16 x i16> @llvm.sadd.sat.v16i16(<16 x i16> %175, <16 x i16> %176) #4
  %178 = tail call <16 x i16> @llvm.sadd.sat.v16i16(<16 x i16> %177, <16 x i16> <i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32>) #4
  %179 = ashr <16 x i16> %178, <i16 6, i16 6, i16 6, i16 6, i16 6, i16 6, i16 6, i16 6, i16 6, i16 6, i16 6, i16 6, i16 6, i16 6, i16 6, i16 6>
  %180 = tail call <32 x i8> @llvm.x86.avx2.packuswb(<16 x i16> %179, <16 x i16> %179) #4
  %181 = bitcast <32 x i8> %180 to <4 x i64>
  %182 = getelementptr inbounds i8, i8* %163, i64 %46
  %183 = extractelement <4 x i64> %181, i32 0
  %184 = bitcast i8* %164 to i64*
  store i64 %183, i64* %184, align 1
  %185 = getelementptr inbounds i8, i8* %164, i64 %3
  %186 = bitcast <32 x i8> %180 to <8 x i32>
  %187 = shufflevector <8 x i32> %186, <8 x i32> undef, <4 x i32> <i32 4, i32 5, i32 undef, i32 undef>
  %188 = bitcast <4 x i32> %187 to <2 x i64>
  %189 = extractelement <2 x i64> %188, i32 0
  %190 = bitcast i8* %185 to i64*
  store i64 %189, i64* %190, align 1
  %191 = getelementptr inbounds i8, i8* %164, i64 %47
  %192 = add i32 %165, -2
  %193 = icmp ugt i32 %192, 1
  br i1 %193, label %162, label %194

194:                                              ; preds = %162, %147
  %195 = phi i32 [ %9, %147 ], [ %49, %162 ]
  %196 = phi i8* [ %150, %147 ], [ %191, %162 ]
  %197 = phi i8* [ %151, %147 ], [ %182, %162 ]
  %198 = icmp eq i32 %195, 1
  br i1 %198, label %199, label %217

199:                                              ; preds = %194
  %200 = bitcast i8* %197 to <16 x i8>*
  %201 = load <16 x i8>, <16 x i8>* %200, align 1
  %202 = shufflevector <16 x i8> %201, <16 x i8> undef, <16 x i32> <i32 2, i32 3, i32 3, i32 4, i32 4, i32 5, i32 5, i32 6, i32 6, i32 7, i32 7, i32 8, i32 8, i32 9, i32 9, i32 10>
  %203 = shufflevector <16 x i8> %201, <16 x i8> undef, <16 x i32> <i32 4, i32 5, i32 5, i32 6, i32 6, i32 7, i32 7, i32 8, i32 8, i32 9, i32 9, i32 10, i32 10, i32 11, i32 11, i32 12>
  %204 = shufflevector <4 x i64> %159, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %205 = bitcast <2 x i64> %204 to <16 x i8>
  %206 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %202, <16 x i8> %205) #4
  %207 = shufflevector <4 x i64> %161, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %208 = bitcast <2 x i64> %207 to <16 x i8>
  %209 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %203, <16 x i8> %208) #4
  %210 = tail call <8 x i16> @llvm.sadd.sat.v8i16(<8 x i16> %206, <8 x i16> %209) #4
  %211 = tail call <8 x i16> @llvm.sadd.sat.v8i16(<8 x i16> %210, <8 x i16> <i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32>) #4
  %212 = ashr <8 x i16> %211, <i16 6, i16 6, i16 6, i16 6, i16 6, i16 6, i16 6, i16 6>
  %213 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %212, <8 x i16> undef) #4
  %214 = bitcast <16 x i8> %213 to <2 x i64>
  %215 = extractelement <2 x i64> %214, i32 0
  %216 = bitcast i8* %196 to i64*
  store i64 %215, i64* %216, align 1
  br label %217

217:                                              ; preds = %194, %199
  %218 = getelementptr inbounds i8, i8* %148, i64 8
  %219 = getelementptr inbounds i8, i8* %150, i64 8
  %220 = add nsw i32 %149, -8
  %221 = icmp sgt i32 %220, 7
  br i1 %221, label %147, label %134

222:                                              ; preds = %141, %285
  %223 = phi i8* [ %139, %141 ], [ %286, %285 ]
  %224 = phi i32 [ %138, %141 ], [ %288, %285 ]
  %225 = phi i8* [ %137, %141 ], [ %287, %285 ]
  %226 = getelementptr inbounds i8, i8* %223, i64 -3
  %227 = load <8 x i16>, <8 x i16>* %142, align 1
  %228 = ashr <8 x i16> %227, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %229 = tail call <16 x i8> @llvm.x86.sse2.packsswb.128(<8 x i16> %228, <8 x i16> undef) #4
  %230 = bitcast <16 x i8> %229 to <2 x i64>
  %231 = shufflevector <2 x i64> %230, <2 x i64> undef, <4 x i32> <i32 0, i32 undef, i32 0, i32 undef>
  %232 = bitcast <4 x i64> %231 to <32 x i8>
  %233 = shufflevector <32 x i8> %232, <32 x i8> undef, <32 x i32> <i32 2, i32 3, i32 4, i32 5, i32 2, i32 3, i32 4, i32 5, i32 2, i32 3, i32 4, i32 5, i32 2, i32 3, i32 4, i32 5, i32 18, i32 19, i32 20, i32 21, i32 18, i32 19, i32 20, i32 21, i32 18, i32 19, i32 20, i32 21, i32 18, i32 19, i32 20, i32 21>
  %234 = bitcast <32 x i8> %233 to <4 x i64>
  br i1 %145, label %235, label %266

235:                                              ; preds = %222, %235
  %236 = phi i8* [ %253, %235 ], [ %226, %222 ]
  %237 = phi i8* [ %263, %235 ], [ %225, %222 ]
  %238 = phi i32 [ %264, %235 ], [ %9, %222 ]
  %239 = getelementptr inbounds i8, i8* %236, i64 %1
  %240 = bitcast i8* %236 to <2 x i64>*
  %241 = load <2 x i64>, <2 x i64>* %240, align 1
  %242 = bitcast i8* %239 to <2 x i64>*
  %243 = load <2 x i64>, <2 x i64>* %242, align 1
  %244 = shufflevector <2 x i64> %241, <2 x i64> %243, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %245 = bitcast <4 x i64> %244 to <32 x i8>
  %246 = shufflevector <32 x i8> %245, <32 x i8> undef, <32 x i32> <i32 2, i32 3, i32 4, i32 5, i32 3, i32 4, i32 5, i32 6, i32 4, i32 5, i32 6, i32 7, i32 5, i32 6, i32 7, i32 8, i32 18, i32 19, i32 20, i32 21, i32 19, i32 20, i32 21, i32 22, i32 20, i32 21, i32 22, i32 23, i32 21, i32 22, i32 23, i32 24>
  %247 = tail call <16 x i16> @llvm.x86.avx2.pmadd.ub.sw(<32 x i8> %246, <32 x i8> %233) #4
  %248 = tail call <16 x i16> @llvm.x86.avx2.phadd.sw(<16 x i16> %247, <16 x i16> zeroinitializer) #4
  %249 = tail call <16 x i16> @llvm.sadd.sat.v16i16(<16 x i16> %248, <16 x i16> <i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32>) #4
  %250 = ashr <16 x i16> %249, <i16 6, i16 6, i16 6, i16 6, i16 6, i16 6, i16 6, i16 6, i16 6, i16 6, i16 6, i16 6, i16 6, i16 6, i16 6, i16 6>
  %251 = tail call <32 x i8> @llvm.x86.avx2.packuswb(<16 x i16> %250, <16 x i16> zeroinitializer) #4
  %252 = bitcast <32 x i8> %251 to <4 x i64>
  %253 = getelementptr inbounds i8, i8* %236, i64 %143
  %254 = shufflevector <4 x i64> %252, <4 x i64> undef, <2 x i32> <i32 0, i32 undef>
  %255 = bitcast <2 x i64> %254 to <4 x i32>
  %256 = extractelement <4 x i32> %255, i32 0
  %257 = bitcast i8* %237 to i32*
  store i32 %256, i32* %257, align 4
  %258 = shufflevector <4 x i64> %252, <4 x i64> undef, <2 x i32> <i32 2, i32 undef>
  %259 = bitcast <2 x i64> %258 to <4 x i32>
  %260 = extractelement <4 x i32> %259, i32 0
  %261 = getelementptr inbounds i8, i8* %237, i64 %3
  %262 = bitcast i8* %261 to i32*
  store i32 %260, i32* %262, align 4
  %263 = getelementptr inbounds i8, i8* %237, i64 %144
  %264 = add i32 %238, -2
  %265 = icmp ugt i32 %264, 1
  br i1 %265, label %235, label %266

266:                                              ; preds = %235, %222
  %267 = phi i32 [ %9, %222 ], [ %146, %235 ]
  %268 = phi i8* [ %225, %222 ], [ %263, %235 ]
  %269 = phi i8* [ %226, %222 ], [ %253, %235 ]
  %270 = icmp eq i32 %267, 1
  br i1 %270, label %271, label %285

271:                                              ; preds = %266
  %272 = bitcast i8* %269 to <16 x i8>*
  %273 = load <16 x i8>, <16 x i8>* %272, align 1
  %274 = shufflevector <16 x i8> %273, <16 x i8> undef, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 3, i32 4, i32 5, i32 6, i32 4, i32 5, i32 6, i32 7, i32 5, i32 6, i32 7, i32 8>
  %275 = shufflevector <4 x i64> %234, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %276 = bitcast <2 x i64> %275 to <16 x i8>
  %277 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %274, <16 x i8> %276) #4
  %278 = tail call <8 x i16> @llvm.x86.ssse3.phadd.sw.128(<8 x i16> %277, <8 x i16> zeroinitializer) #4
  %279 = tail call <8 x i16> @llvm.sadd.sat.v8i16(<8 x i16> %278, <8 x i16> <i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32>) #4
  %280 = ashr <8 x i16> %279, <i16 6, i16 6, i16 6, i16 6, i16 6, i16 6, i16 6, i16 6>
  %281 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %280, <8 x i16> undef) #4
  %282 = bitcast <16 x i8> %281 to <4 x i32>
  %283 = extractelement <4 x i32> %282, i32 0
  %284 = bitcast i8* %268 to i32*
  store i32 %283, i32* %284, align 4
  br label %285

285:                                              ; preds = %266, %271
  %286 = getelementptr inbounds i8, i8* %223, i64 4
  %287 = getelementptr inbounds i8, i8* %225, i64 4
  %288 = add nsw i32 %224, -4
  %289 = icmp sgt i32 %288, 3
  br i1 %289, label %222, label %674

290:                                              ; preds = %10, %24
  %291 = or i16 %23, %14
  %292 = icmp eq i16 %291, 0
  %293 = icmp sgt i32 %8, 15
  br i1 %292, label %301, label %294

294:                                              ; preds = %290
  br i1 %293, label %295, label %304

295:                                              ; preds = %294
  %296 = bitcast i16* %4 to <8 x i16>*
  %297 = shl i64 %1, 1
  %298 = shl i64 %3, 1
  %299 = icmp ugt i32 %9, 1
  %300 = and i32 %9, 1
  br label %315

301:                                              ; preds = %290
  br i1 %293, label %639, label %634

302:                                              ; preds = %438
  %303 = and i32 %8, 15
  br label %304

304:                                              ; preds = %302, %294
  %305 = phi i8* [ %2, %294 ], [ %440, %302 ]
  %306 = phi i32 [ %8, %294 ], [ %303, %302 ]
  %307 = phi i8* [ %0, %294 ], [ %439, %302 ]
  %308 = icmp sgt i32 %306, 7
  br i1 %308, label %309, label %445

309:                                              ; preds = %304
  %310 = bitcast i16* %4 to <8 x i16>*
  %311 = shl i64 %1, 1
  %312 = shl i64 %3, 1
  %313 = icmp ugt i32 %9, 1
  %314 = and i32 %9, 1
  br label %456

315:                                              ; preds = %295, %438
  %316 = phi i8* [ %0, %295 ], [ %439, %438 ]
  %317 = phi i32 [ %8, %295 ], [ %441, %438 ]
  %318 = phi i8* [ %2, %295 ], [ %440, %438 ]
  %319 = getelementptr inbounds i8, i8* %316, i64 -3
  %320 = load <8 x i16>, <8 x i16>* %296, align 1
  %321 = ashr <8 x i16> %320, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %322 = tail call <16 x i8> @llvm.x86.sse2.packsswb.128(<8 x i16> %321, <8 x i16> %321) #4
  %323 = bitcast <16 x i8> %322 to <2 x i64>
  %324 = shufflevector <2 x i64> %323, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 0, i32 1>
  %325 = bitcast <4 x i64> %324 to <32 x i8>
  %326 = shufflevector <32 x i8> %325, <32 x i8> undef, <32 x i32> <i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 16, i32 17, i32 16, i32 17, i32 16, i32 17, i32 16, i32 17, i32 16, i32 17, i32 16, i32 17, i32 16, i32 17, i32 16, i32 17>
  %327 = bitcast <32 x i8> %326 to <4 x i64>
  %328 = shufflevector <32 x i8> %325, <32 x i8> undef, <32 x i32> <i32 2, i32 3, i32 2, i32 3, i32 2, i32 3, i32 2, i32 3, i32 2, i32 3, i32 2, i32 3, i32 2, i32 3, i32 2, i32 3, i32 18, i32 19, i32 18, i32 19, i32 18, i32 19, i32 18, i32 19, i32 18, i32 19, i32 18, i32 19, i32 18, i32 19, i32 18, i32 19>
  %329 = bitcast <32 x i8> %328 to <4 x i64>
  %330 = shufflevector <32 x i8> %325, <32 x i8> undef, <32 x i32> <i32 4, i32 5, i32 4, i32 5, i32 4, i32 5, i32 4, i32 5, i32 4, i32 5, i32 4, i32 5, i32 4, i32 5, i32 4, i32 5, i32 20, i32 21, i32 20, i32 21, i32 20, i32 21, i32 20, i32 21, i32 20, i32 21, i32 20, i32 21, i32 20, i32 21, i32 20, i32 21>
  %331 = bitcast <32 x i8> %330 to <4 x i64>
  %332 = shufflevector <32 x i8> %325, <32 x i8> undef, <32 x i32> <i32 6, i32 7, i32 6, i32 7, i32 6, i32 7, i32 6, i32 7, i32 6, i32 7, i32 6, i32 7, i32 6, i32 7, i32 6, i32 7, i32 22, i32 23, i32 22, i32 23, i32 22, i32 23, i32 22, i32 23, i32 22, i32 23, i32 22, i32 23, i32 22, i32 23, i32 22, i32 23>
  %333 = bitcast <32 x i8> %332 to <4 x i64>
  br i1 %299, label %334, label %391

334:                                              ; preds = %315, %334
  %335 = phi i8* [ %381, %334 ], [ %319, %315 ]
  %336 = phi i8* [ %388, %334 ], [ %318, %315 ]
  %337 = phi i32 [ %389, %334 ], [ %9, %315 ]
  %338 = getelementptr inbounds i8, i8* %335, i64 %1
  %339 = bitcast i8* %335 to <2 x i64>*
  %340 = load <2 x i64>, <2 x i64>* %339, align 1
  %341 = bitcast i8* %338 to <2 x i64>*
  %342 = load <2 x i64>, <2 x i64>* %341, align 1
  %343 = shufflevector <2 x i64> %340, <2 x i64> %342, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %344 = bitcast <4 x i64> %343 to <32 x i8>
  %345 = shufflevector <32 x i8> %344, <32 x i8> undef, <32 x i32> <i32 0, i32 1, i32 1, i32 2, i32 2, i32 3, i32 3, i32 4, i32 4, i32 5, i32 5, i32 6, i32 6, i32 7, i32 7, i32 8, i32 16, i32 17, i32 17, i32 18, i32 18, i32 19, i32 19, i32 20, i32 20, i32 21, i32 21, i32 22, i32 22, i32 23, i32 23, i32 24>
  %346 = shufflevector <32 x i8> %344, <32 x i8> undef, <32 x i32> <i32 6, i32 7, i32 7, i32 8, i32 8, i32 9, i32 9, i32 10, i32 10, i32 11, i32 11, i32 12, i32 12, i32 13, i32 13, i32 14, i32 22, i32 23, i32 23, i32 24, i32 24, i32 25, i32 25, i32 26, i32 26, i32 27, i32 27, i32 28, i32 28, i32 29, i32 29, i32 30>
  %347 = tail call <16 x i16> @llvm.x86.avx2.pmadd.ub.sw(<32 x i8> %345, <32 x i8> %326) #4
  %348 = tail call <16 x i16> @llvm.x86.avx2.pmadd.ub.sw(<32 x i8> %346, <32 x i8> %332) #4
  %349 = tail call <16 x i16> @llvm.sadd.sat.v16i16(<16 x i16> %347, <16 x i16> %348) #4
  %350 = shufflevector <32 x i8> %344, <32 x i8> undef, <32 x i32> <i32 2, i32 3, i32 3, i32 4, i32 4, i32 5, i32 5, i32 6, i32 6, i32 7, i32 7, i32 8, i32 8, i32 9, i32 9, i32 10, i32 18, i32 19, i32 19, i32 20, i32 20, i32 21, i32 21, i32 22, i32 22, i32 23, i32 23, i32 24, i32 24, i32 25, i32 25, i32 26>
  %351 = shufflevector <32 x i8> %344, <32 x i8> undef, <32 x i32> <i32 4, i32 5, i32 5, i32 6, i32 6, i32 7, i32 7, i32 8, i32 8, i32 9, i32 9, i32 10, i32 10, i32 11, i32 11, i32 12, i32 20, i32 21, i32 21, i32 22, i32 22, i32 23, i32 23, i32 24, i32 24, i32 25, i32 25, i32 26, i32 26, i32 27, i32 27, i32 28>
  %352 = tail call <16 x i16> @llvm.x86.avx2.pmadd.ub.sw(<32 x i8> %350, <32 x i8> %328) #4
  %353 = tail call <16 x i16> @llvm.x86.avx2.pmadd.ub.sw(<32 x i8> %351, <32 x i8> %330) #4
  %354 = tail call <16 x i16> @llvm.sadd.sat.v16i16(<16 x i16> %352, <16 x i16> %353) #4
  %355 = tail call <16 x i16> @llvm.sadd.sat.v16i16(<16 x i16> %349, <16 x i16> %354) #4
  %356 = getelementptr inbounds i8, i8* %338, i64 8
  %357 = getelementptr inbounds i8, i8* %335, i64 8
  %358 = bitcast i8* %357 to <2 x i64>*
  %359 = load <2 x i64>, <2 x i64>* %358, align 1
  %360 = bitcast i8* %356 to <2 x i64>*
  %361 = load <2 x i64>, <2 x i64>* %360, align 1
  %362 = shufflevector <2 x i64> %359, <2 x i64> %361, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %363 = bitcast <4 x i64> %362 to <32 x i8>
  %364 = shufflevector <32 x i8> %363, <32 x i8> undef, <32 x i32> <i32 0, i32 1, i32 1, i32 2, i32 2, i32 3, i32 3, i32 4, i32 4, i32 5, i32 5, i32 6, i32 6, i32 7, i32 7, i32 8, i32 16, i32 17, i32 17, i32 18, i32 18, i32 19, i32 19, i32 20, i32 20, i32 21, i32 21, i32 22, i32 22, i32 23, i32 23, i32 24>
  %365 = shufflevector <32 x i8> %363, <32 x i8> undef, <32 x i32> <i32 6, i32 7, i32 7, i32 8, i32 8, i32 9, i32 9, i32 10, i32 10, i32 11, i32 11, i32 12, i32 12, i32 13, i32 13, i32 14, i32 22, i32 23, i32 23, i32 24, i32 24, i32 25, i32 25, i32 26, i32 26, i32 27, i32 27, i32 28, i32 28, i32 29, i32 29, i32 30>
  %366 = tail call <16 x i16> @llvm.x86.avx2.pmadd.ub.sw(<32 x i8> %364, <32 x i8> %326) #4
  %367 = tail call <16 x i16> @llvm.x86.avx2.pmadd.ub.sw(<32 x i8> %365, <32 x i8> %332) #4
  %368 = tail call <16 x i16> @llvm.sadd.sat.v16i16(<16 x i16> %366, <16 x i16> %367) #4
  %369 = shufflevector <32 x i8> %363, <32 x i8> undef, <32 x i32> <i32 2, i32 3, i32 3, i32 4, i32 4, i32 5, i32 5, i32 6, i32 6, i32 7, i32 7, i32 8, i32 8, i32 9, i32 9, i32 10, i32 18, i32 19, i32 19, i32 20, i32 20, i32 21, i32 21, i32 22, i32 22, i32 23, i32 23, i32 24, i32 24, i32 25, i32 25, i32 26>
  %370 = shufflevector <32 x i8> %363, <32 x i8> undef, <32 x i32> <i32 4, i32 5, i32 5, i32 6, i32 6, i32 7, i32 7, i32 8, i32 8, i32 9, i32 9, i32 10, i32 10, i32 11, i32 11, i32 12, i32 20, i32 21, i32 21, i32 22, i32 22, i32 23, i32 23, i32 24, i32 24, i32 25, i32 25, i32 26, i32 26, i32 27, i32 27, i32 28>
  %371 = tail call <16 x i16> @llvm.x86.avx2.pmadd.ub.sw(<32 x i8> %369, <32 x i8> %328) #4
  %372 = tail call <16 x i16> @llvm.x86.avx2.pmadd.ub.sw(<32 x i8> %370, <32 x i8> %330) #4
  %373 = tail call <16 x i16> @llvm.sadd.sat.v16i16(<16 x i16> %371, <16 x i16> %372) #4
  %374 = tail call <16 x i16> @llvm.sadd.sat.v16i16(<16 x i16> %368, <16 x i16> %373) #4
  %375 = tail call <16 x i16> @llvm.sadd.sat.v16i16(<16 x i16> %355, <16 x i16> <i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32>) #4
  %376 = tail call <16 x i16> @llvm.sadd.sat.v16i16(<16 x i16> %374, <16 x i16> <i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32>) #4
  %377 = ashr <16 x i16> %375, <i16 6, i16 6, i16 6, i16 6, i16 6, i16 6, i16 6, i16 6, i16 6, i16 6, i16 6, i16 6, i16 6, i16 6, i16 6, i16 6>
  %378 = ashr <16 x i16> %376, <i16 6, i16 6, i16 6, i16 6, i16 6, i16 6, i16 6, i16 6, i16 6, i16 6, i16 6, i16 6, i16 6, i16 6, i16 6, i16 6>
  %379 = tail call <32 x i8> @llvm.x86.avx2.packuswb(<16 x i16> %377, <16 x i16> %378) #4
  %380 = bitcast <32 x i8> %379 to <4 x i64>
  %381 = getelementptr inbounds i8, i8* %335, i64 %297
  %382 = bitcast i8* %336 to <2 x i64>*
  %383 = shufflevector <4 x i64> %380, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  store <2 x i64> %383, <2 x i64>* %382, align 16
  %384 = getelementptr inbounds i8, i8* %336, i64 %3
  %385 = bitcast <32 x i8> %379 to <8 x i32>
  %386 = shufflevector <8 x i32> %385, <8 x i32> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %387 = bitcast i8* %384 to <4 x i32>*
  store <4 x i32> %386, <4 x i32>* %387, align 16
  %388 = getelementptr inbounds i8, i8* %336, i64 %298
  %389 = add i32 %337, -2
  %390 = icmp ugt i32 %389, 1
  br i1 %390, label %334, label %391

391:                                              ; preds = %334, %315
  %392 = phi i32 [ %9, %315 ], [ %300, %334 ]
  %393 = phi i8* [ %318, %315 ], [ %388, %334 ]
  %394 = phi i8* [ %319, %315 ], [ %381, %334 ]
  %395 = icmp eq i32 %392, 1
  br i1 %395, label %396, label %438

396:                                              ; preds = %391
  %397 = bitcast i8* %394 to <16 x i8>*
  %398 = load <16 x i8>, <16 x i8>* %397, align 1
  %399 = shufflevector <16 x i8> %398, <16 x i8> undef, <16 x i32> <i32 0, i32 1, i32 1, i32 2, i32 2, i32 3, i32 3, i32 4, i32 4, i32 5, i32 5, i32 6, i32 6, i32 7, i32 7, i32 8>
  %400 = shufflevector <16 x i8> %398, <16 x i8> undef, <16 x i32> <i32 6, i32 7, i32 7, i32 8, i32 8, i32 9, i32 9, i32 10, i32 10, i32 11, i32 11, i32 12, i32 12, i32 13, i32 13, i32 14>
  %401 = shufflevector <4 x i64> %327, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %402 = bitcast <2 x i64> %401 to <16 x i8>
  %403 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %399, <16 x i8> %402) #4
  %404 = shufflevector <4 x i64> %333, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %405 = bitcast <2 x i64> %404 to <16 x i8>
  %406 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %400, <16 x i8> %405) #4
  %407 = tail call <8 x i16> @llvm.sadd.sat.v8i16(<8 x i16> %403, <8 x i16> %406) #4
  %408 = shufflevector <16 x i8> %398, <16 x i8> undef, <16 x i32> <i32 2, i32 3, i32 3, i32 4, i32 4, i32 5, i32 5, i32 6, i32 6, i32 7, i32 7, i32 8, i32 8, i32 9, i32 9, i32 10>
  %409 = shufflevector <16 x i8> %398, <16 x i8> undef, <16 x i32> <i32 4, i32 5, i32 5, i32 6, i32 6, i32 7, i32 7, i32 8, i32 8, i32 9, i32 9, i32 10, i32 10, i32 11, i32 11, i32 12>
  %410 = shufflevector <4 x i64> %329, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %411 = bitcast <2 x i64> %410 to <16 x i8>
  %412 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %408, <16 x i8> %411) #4
  %413 = shufflevector <4 x i64> %331, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %414 = bitcast <2 x i64> %413 to <16 x i8>
  %415 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %409, <16 x i8> %414) #4
  %416 = tail call <8 x i16> @llvm.sadd.sat.v8i16(<8 x i16> %412, <8 x i16> %415) #4
  %417 = tail call <8 x i16> @llvm.sadd.sat.v8i16(<8 x i16> %407, <8 x i16> %416) #4
  %418 = getelementptr inbounds i8, i8* %394, i64 8
  %419 = bitcast i8* %418 to <16 x i8>*
  %420 = load <16 x i8>, <16 x i8>* %419, align 1
  %421 = shufflevector <16 x i8> %420, <16 x i8> undef, <16 x i32> <i32 0, i32 1, i32 1, i32 2, i32 2, i32 3, i32 3, i32 4, i32 4, i32 5, i32 5, i32 6, i32 6, i32 7, i32 7, i32 8>
  %422 = shufflevector <16 x i8> %420, <16 x i8> undef, <16 x i32> <i32 6, i32 7, i32 7, i32 8, i32 8, i32 9, i32 9, i32 10, i32 10, i32 11, i32 11, i32 12, i32 12, i32 13, i32 13, i32 14>
  %423 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %421, <16 x i8> %402) #4
  %424 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %422, <16 x i8> %405) #4
  %425 = tail call <8 x i16> @llvm.sadd.sat.v8i16(<8 x i16> %423, <8 x i16> %424) #4
  %426 = shufflevector <16 x i8> %420, <16 x i8> undef, <16 x i32> <i32 2, i32 3, i32 3, i32 4, i32 4, i32 5, i32 5, i32 6, i32 6, i32 7, i32 7, i32 8, i32 8, i32 9, i32 9, i32 10>
  %427 = shufflevector <16 x i8> %420, <16 x i8> undef, <16 x i32> <i32 4, i32 5, i32 5, i32 6, i32 6, i32 7, i32 7, i32 8, i32 8, i32 9, i32 9, i32 10, i32 10, i32 11, i32 11, i32 12>
  %428 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %426, <16 x i8> %411) #4
  %429 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %427, <16 x i8> %414) #4
  %430 = tail call <8 x i16> @llvm.sadd.sat.v8i16(<8 x i16> %428, <8 x i16> %429) #4
  %431 = tail call <8 x i16> @llvm.sadd.sat.v8i16(<8 x i16> %425, <8 x i16> %430) #4
  %432 = tail call <8 x i16> @llvm.sadd.sat.v8i16(<8 x i16> %417, <8 x i16> <i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32>) #4
  %433 = ashr <8 x i16> %432, <i16 6, i16 6, i16 6, i16 6, i16 6, i16 6, i16 6, i16 6>
  %434 = tail call <8 x i16> @llvm.sadd.sat.v8i16(<8 x i16> %431, <8 x i16> <i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32>) #4
  %435 = ashr <8 x i16> %434, <i16 6, i16 6, i16 6, i16 6, i16 6, i16 6, i16 6, i16 6>
  %436 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %433, <8 x i16> %435) #4
  %437 = bitcast i8* %393 to <16 x i8>*
  store <16 x i8> %436, <16 x i8>* %437, align 16
  br label %438

438:                                              ; preds = %391, %396
  %439 = getelementptr inbounds i8, i8* %316, i64 16
  %440 = getelementptr inbounds i8, i8* %318, i64 16
  %441 = add nsw i32 %317, -16
  %442 = icmp sgt i32 %441, 15
  br i1 %442, label %315, label %302

443:                                              ; preds = %546
  %444 = and i32 %306, 7
  br label %445

445:                                              ; preds = %443, %304
  %446 = phi i8* [ %305, %304 ], [ %548, %443 ]
  %447 = phi i32 [ %306, %304 ], [ %444, %443 ]
  %448 = phi i8* [ %307, %304 ], [ %547, %443 ]
  %449 = icmp sgt i32 %447, 3
  br i1 %449, label %450, label %676

450:                                              ; preds = %445
  %451 = bitcast i16* %4 to <8 x i16>*
  %452 = shl i64 %1, 1
  %453 = shl i64 %3, 1
  %454 = icmp ugt i32 %9, 1
  %455 = and i32 %9, 1
  br label %551

456:                                              ; preds = %309, %546
  %457 = phi i8* [ %307, %309 ], [ %547, %546 ]
  %458 = phi i32 [ %306, %309 ], [ %549, %546 ]
  %459 = phi i8* [ %305, %309 ], [ %548, %546 ]
  %460 = getelementptr inbounds i8, i8* %457, i64 -3
  %461 = load <8 x i16>, <8 x i16>* %310, align 1
  %462 = ashr <8 x i16> %461, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %463 = tail call <16 x i8> @llvm.x86.sse2.packsswb.128(<8 x i16> %462, <8 x i16> %462) #4
  %464 = bitcast <16 x i8> %463 to <2 x i64>
  %465 = shufflevector <2 x i64> %464, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 0, i32 1>
  %466 = bitcast <4 x i64> %465 to <32 x i8>
  %467 = shufflevector <32 x i8> %466, <32 x i8> undef, <32 x i32> <i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 16, i32 17, i32 16, i32 17, i32 16, i32 17, i32 16, i32 17, i32 16, i32 17, i32 16, i32 17, i32 16, i32 17, i32 16, i32 17>
  %468 = bitcast <32 x i8> %467 to <4 x i64>
  %469 = shufflevector <32 x i8> %466, <32 x i8> undef, <32 x i32> <i32 2, i32 3, i32 2, i32 3, i32 2, i32 3, i32 2, i32 3, i32 2, i32 3, i32 2, i32 3, i32 2, i32 3, i32 2, i32 3, i32 18, i32 19, i32 18, i32 19, i32 18, i32 19, i32 18, i32 19, i32 18, i32 19, i32 18, i32 19, i32 18, i32 19, i32 18, i32 19>
  %470 = bitcast <32 x i8> %469 to <4 x i64>
  %471 = shufflevector <32 x i8> %466, <32 x i8> undef, <32 x i32> <i32 4, i32 5, i32 4, i32 5, i32 4, i32 5, i32 4, i32 5, i32 4, i32 5, i32 4, i32 5, i32 4, i32 5, i32 4, i32 5, i32 20, i32 21, i32 20, i32 21, i32 20, i32 21, i32 20, i32 21, i32 20, i32 21, i32 20, i32 21, i32 20, i32 21, i32 20, i32 21>
  %472 = bitcast <32 x i8> %471 to <4 x i64>
  %473 = shufflevector <32 x i8> %466, <32 x i8> undef, <32 x i32> <i32 6, i32 7, i32 6, i32 7, i32 6, i32 7, i32 6, i32 7, i32 6, i32 7, i32 6, i32 7, i32 6, i32 7, i32 6, i32 7, i32 22, i32 23, i32 22, i32 23, i32 22, i32 23, i32 22, i32 23, i32 22, i32 23, i32 22, i32 23, i32 22, i32 23, i32 22, i32 23>
  %474 = bitcast <32 x i8> %473 to <4 x i64>
  br i1 %313, label %475, label %513

475:                                              ; preds = %456, %475
  %476 = phi i8* [ %501, %475 ], [ %460, %456 ]
  %477 = phi i8* [ %510, %475 ], [ %459, %456 ]
  %478 = phi i32 [ %511, %475 ], [ %9, %456 ]
  %479 = getelementptr inbounds i8, i8* %476, i64 %1
  %480 = bitcast i8* %476 to <2 x i64>*
  %481 = load <2 x i64>, <2 x i64>* %480, align 1
  %482 = bitcast i8* %479 to <2 x i64>*
  %483 = load <2 x i64>, <2 x i64>* %482, align 1
  %484 = shufflevector <2 x i64> %481, <2 x i64> %483, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %485 = bitcast <4 x i64> %484 to <32 x i8>
  %486 = shufflevector <32 x i8> %485, <32 x i8> undef, <32 x i32> <i32 0, i32 1, i32 1, i32 2, i32 2, i32 3, i32 3, i32 4, i32 4, i32 5, i32 5, i32 6, i32 6, i32 7, i32 7, i32 8, i32 16, i32 17, i32 17, i32 18, i32 18, i32 19, i32 19, i32 20, i32 20, i32 21, i32 21, i32 22, i32 22, i32 23, i32 23, i32 24>
  %487 = shufflevector <32 x i8> %485, <32 x i8> undef, <32 x i32> <i32 6, i32 7, i32 7, i32 8, i32 8, i32 9, i32 9, i32 10, i32 10, i32 11, i32 11, i32 12, i32 12, i32 13, i32 13, i32 14, i32 22, i32 23, i32 23, i32 24, i32 24, i32 25, i32 25, i32 26, i32 26, i32 27, i32 27, i32 28, i32 28, i32 29, i32 29, i32 30>
  %488 = tail call <16 x i16> @llvm.x86.avx2.pmadd.ub.sw(<32 x i8> %486, <32 x i8> %467) #4
  %489 = tail call <16 x i16> @llvm.x86.avx2.pmadd.ub.sw(<32 x i8> %487, <32 x i8> %473) #4
  %490 = tail call <16 x i16> @llvm.sadd.sat.v16i16(<16 x i16> %488, <16 x i16> %489) #4
  %491 = shufflevector <32 x i8> %485, <32 x i8> undef, <32 x i32> <i32 2, i32 3, i32 3, i32 4, i32 4, i32 5, i32 5, i32 6, i32 6, i32 7, i32 7, i32 8, i32 8, i32 9, i32 9, i32 10, i32 18, i32 19, i32 19, i32 20, i32 20, i32 21, i32 21, i32 22, i32 22, i32 23, i32 23, i32 24, i32 24, i32 25, i32 25, i32 26>
  %492 = shufflevector <32 x i8> %485, <32 x i8> undef, <32 x i32> <i32 4, i32 5, i32 5, i32 6, i32 6, i32 7, i32 7, i32 8, i32 8, i32 9, i32 9, i32 10, i32 10, i32 11, i32 11, i32 12, i32 20, i32 21, i32 21, i32 22, i32 22, i32 23, i32 23, i32 24, i32 24, i32 25, i32 25, i32 26, i32 26, i32 27, i32 27, i32 28>
  %493 = tail call <16 x i16> @llvm.x86.avx2.pmadd.ub.sw(<32 x i8> %491, <32 x i8> %469) #4
  %494 = tail call <16 x i16> @llvm.x86.avx2.pmadd.ub.sw(<32 x i8> %492, <32 x i8> %471) #4
  %495 = tail call <16 x i16> @llvm.sadd.sat.v16i16(<16 x i16> %493, <16 x i16> %494) #4
  %496 = tail call <16 x i16> @llvm.sadd.sat.v16i16(<16 x i16> %490, <16 x i16> %495) #4
  %497 = tail call <16 x i16> @llvm.sadd.sat.v16i16(<16 x i16> %496, <16 x i16> <i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32>) #4
  %498 = ashr <16 x i16> %497, <i16 6, i16 6, i16 6, i16 6, i16 6, i16 6, i16 6, i16 6, i16 6, i16 6, i16 6, i16 6, i16 6, i16 6, i16 6, i16 6>
  %499 = tail call <32 x i8> @llvm.x86.avx2.packuswb(<16 x i16> %498, <16 x i16> zeroinitializer) #4
  %500 = bitcast <32 x i8> %499 to <4 x i64>
  %501 = getelementptr inbounds i8, i8* %476, i64 %311
  %502 = extractelement <4 x i64> %500, i32 0
  %503 = bitcast i8* %477 to i64*
  store i64 %502, i64* %503, align 1
  %504 = getelementptr inbounds i8, i8* %477, i64 %3
  %505 = bitcast <32 x i8> %499 to <8 x i32>
  %506 = shufflevector <8 x i32> %505, <8 x i32> undef, <4 x i32> <i32 4, i32 5, i32 undef, i32 undef>
  %507 = bitcast <4 x i32> %506 to <2 x i64>
  %508 = extractelement <2 x i64> %507, i32 0
  %509 = bitcast i8* %504 to i64*
  store i64 %508, i64* %509, align 1
  %510 = getelementptr inbounds i8, i8* %477, i64 %312
  %511 = add i32 %478, -2
  %512 = icmp ugt i32 %511, 1
  br i1 %512, label %475, label %513

513:                                              ; preds = %475, %456
  %514 = phi i32 [ %9, %456 ], [ %314, %475 ]
  %515 = phi i8* [ %459, %456 ], [ %510, %475 ]
  %516 = phi i8* [ %460, %456 ], [ %501, %475 ]
  %517 = icmp eq i32 %514, 1
  br i1 %517, label %518, label %546

518:                                              ; preds = %513
  %519 = bitcast i8* %516 to <16 x i8>*
  %520 = load <16 x i8>, <16 x i8>* %519, align 1
  %521 = shufflevector <16 x i8> %520, <16 x i8> undef, <16 x i32> <i32 0, i32 1, i32 1, i32 2, i32 2, i32 3, i32 3, i32 4, i32 4, i32 5, i32 5, i32 6, i32 6, i32 7, i32 7, i32 8>
  %522 = shufflevector <16 x i8> %520, <16 x i8> undef, <16 x i32> <i32 6, i32 7, i32 7, i32 8, i32 8, i32 9, i32 9, i32 10, i32 10, i32 11, i32 11, i32 12, i32 12, i32 13, i32 13, i32 14>
  %523 = shufflevector <4 x i64> %468, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %524 = bitcast <2 x i64> %523 to <16 x i8>
  %525 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %521, <16 x i8> %524) #4
  %526 = shufflevector <4 x i64> %474, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %527 = bitcast <2 x i64> %526 to <16 x i8>
  %528 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %522, <16 x i8> %527) #4
  %529 = tail call <8 x i16> @llvm.sadd.sat.v8i16(<8 x i16> %525, <8 x i16> %528) #4
  %530 = shufflevector <16 x i8> %520, <16 x i8> undef, <16 x i32> <i32 2, i32 3, i32 3, i32 4, i32 4, i32 5, i32 5, i32 6, i32 6, i32 7, i32 7, i32 8, i32 8, i32 9, i32 9, i32 10>
  %531 = shufflevector <16 x i8> %520, <16 x i8> undef, <16 x i32> <i32 4, i32 5, i32 5, i32 6, i32 6, i32 7, i32 7, i32 8, i32 8, i32 9, i32 9, i32 10, i32 10, i32 11, i32 11, i32 12>
  %532 = shufflevector <4 x i64> %470, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %533 = bitcast <2 x i64> %532 to <16 x i8>
  %534 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %530, <16 x i8> %533) #4
  %535 = shufflevector <4 x i64> %472, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %536 = bitcast <2 x i64> %535 to <16 x i8>
  %537 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %531, <16 x i8> %536) #4
  %538 = tail call <8 x i16> @llvm.sadd.sat.v8i16(<8 x i16> %534, <8 x i16> %537) #4
  %539 = tail call <8 x i16> @llvm.sadd.sat.v8i16(<8 x i16> %529, <8 x i16> %538) #4
  %540 = tail call <8 x i16> @llvm.sadd.sat.v8i16(<8 x i16> %539, <8 x i16> <i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32>) #4
  %541 = ashr <8 x i16> %540, <i16 6, i16 6, i16 6, i16 6, i16 6, i16 6, i16 6, i16 6>
  %542 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %541, <8 x i16> undef) #4
  %543 = bitcast <16 x i8> %542 to <2 x i64>
  %544 = extractelement <2 x i64> %543, i32 0
  %545 = bitcast i8* %515 to i64*
  store i64 %544, i64* %545, align 1
  br label %546

546:                                              ; preds = %513, %518
  %547 = getelementptr inbounds i8, i8* %457, i64 8
  %548 = getelementptr inbounds i8, i8* %459, i64 8
  %549 = add nsw i32 %458, -8
  %550 = icmp sgt i32 %549, 7
  br i1 %550, label %456, label %443

551:                                              ; preds = %450, %627
  %552 = phi i8* [ %448, %450 ], [ %628, %627 ]
  %553 = phi i32 [ %447, %450 ], [ %630, %627 ]
  %554 = phi i8* [ %446, %450 ], [ %629, %627 ]
  %555 = getelementptr inbounds i8, i8* %552, i64 -3
  %556 = load <8 x i16>, <8 x i16>* %451, align 1
  %557 = ashr <8 x i16> %556, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %558 = tail call <16 x i8> @llvm.x86.sse2.packsswb.128(<8 x i16> %557, <8 x i16> %557) #4
  %559 = bitcast <16 x i8> %558 to <2 x i64>
  %560 = shufflevector <2 x i64> %559, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 0, i32 1>
  %561 = bitcast <4 x i64> %560 to <8 x i32>
  %562 = shufflevector <8 x i32> %561, <8 x i32> undef, <8 x i32> <i32 0, i32 0, i32 0, i32 0, i32 4, i32 4, i32 4, i32 4>
  %563 = bitcast <8 x i32> %562 to <4 x i64>
  %564 = shufflevector <8 x i32> %561, <8 x i32> undef, <8 x i32> <i32 1, i32 1, i32 1, i32 1, i32 5, i32 5, i32 5, i32 5>
  %565 = bitcast <8 x i32> %564 to <4 x i64>
  br i1 %454, label %566, label %603

566:                                              ; preds = %551
  %567 = bitcast <8 x i32> %562 to <32 x i8>
  %568 = bitcast <8 x i32> %564 to <32 x i8>
  br label %569

569:                                              ; preds = %569, %566
  %570 = phi i8* [ %555, %566 ], [ %590, %569 ]
  %571 = phi i8* [ %554, %566 ], [ %600, %569 ]
  %572 = phi i32 [ %9, %566 ], [ %601, %569 ]
  %573 = getelementptr inbounds i8, i8* %570, i64 %1
  %574 = bitcast i8* %570 to <2 x i64>*
  %575 = load <2 x i64>, <2 x i64>* %574, align 1
  %576 = bitcast i8* %573 to <2 x i64>*
  %577 = load <2 x i64>, <2 x i64>* %576, align 1
  %578 = shufflevector <2 x i64> %575, <2 x i64> %577, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %579 = bitcast <4 x i64> %578 to <32 x i8>
  %580 = shufflevector <32 x i8> %579, <32 x i8> undef, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 1, i32 2, i32 3, i32 4, i32 2, i32 3, i32 4, i32 5, i32 3, i32 4, i32 5, i32 6, i32 16, i32 17, i32 18, i32 19, i32 17, i32 18, i32 19, i32 20, i32 18, i32 19, i32 20, i32 21, i32 19, i32 20, i32 21, i32 22>
  %581 = tail call <16 x i16> @llvm.x86.avx2.pmadd.ub.sw(<32 x i8> %580, <32 x i8> %567) #4
  %582 = shufflevector <32 x i8> %579, <32 x i8> undef, <32 x i32> <i32 4, i32 5, i32 6, i32 7, i32 5, i32 6, i32 7, i32 8, i32 6, i32 7, i32 8, i32 9, i32 7, i32 8, i32 9, i32 10, i32 20, i32 21, i32 22, i32 23, i32 21, i32 22, i32 23, i32 24, i32 22, i32 23, i32 24, i32 25, i32 23, i32 24, i32 25, i32 26>
  %583 = tail call <16 x i16> @llvm.x86.avx2.pmadd.ub.sw(<32 x i8> %582, <32 x i8> %568) #4
  %584 = tail call <16 x i16> @llvm.sadd.sat.v16i16(<16 x i16> %581, <16 x i16> %583) #4
  %585 = tail call <16 x i16> @llvm.x86.avx2.phadd.sw(<16 x i16> %584, <16 x i16> zeroinitializer) #4
  %586 = tail call <16 x i16> @llvm.sadd.sat.v16i16(<16 x i16> %585, <16 x i16> <i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32>) #4
  %587 = ashr <16 x i16> %586, <i16 6, i16 6, i16 6, i16 6, i16 6, i16 6, i16 6, i16 6, i16 6, i16 6, i16 6, i16 6, i16 6, i16 6, i16 6, i16 6>
  %588 = tail call <32 x i8> @llvm.x86.avx2.packuswb(<16 x i16> %587, <16 x i16> zeroinitializer) #4
  %589 = bitcast <32 x i8> %588 to <4 x i64>
  %590 = getelementptr inbounds i8, i8* %570, i64 %452
  %591 = shufflevector <4 x i64> %589, <4 x i64> undef, <2 x i32> <i32 0, i32 undef>
  %592 = bitcast <2 x i64> %591 to <4 x i32>
  %593 = extractelement <4 x i32> %592, i32 0
  %594 = bitcast i8* %571 to i32*
  store i32 %593, i32* %594, align 4
  %595 = shufflevector <4 x i64> %589, <4 x i64> undef, <2 x i32> <i32 2, i32 undef>
  %596 = bitcast <2 x i64> %595 to <4 x i32>
  %597 = extractelement <4 x i32> %596, i32 0
  %598 = getelementptr inbounds i8, i8* %571, i64 %3
  %599 = bitcast i8* %598 to i32*
  store i32 %597, i32* %599, align 4
  %600 = getelementptr inbounds i8, i8* %571, i64 %453
  %601 = add i32 %572, -2
  %602 = icmp ugt i32 %601, 1
  br i1 %602, label %569, label %603

603:                                              ; preds = %569, %551
  %604 = phi i32 [ %9, %551 ], [ %455, %569 ]
  %605 = phi i8* [ %554, %551 ], [ %600, %569 ]
  %606 = phi i8* [ %555, %551 ], [ %590, %569 ]
  %607 = icmp eq i32 %604, 1
  br i1 %607, label %608, label %627

608:                                              ; preds = %603
  %609 = bitcast i8* %606 to <16 x i8>*
  %610 = load <16 x i8>, <16 x i8>* %609, align 1
  %611 = shufflevector <16 x i8> %610, <16 x i8> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 1, i32 2, i32 3, i32 4, i32 2, i32 3, i32 4, i32 5, i32 3, i32 4, i32 5, i32 6>
  %612 = shufflevector <4 x i64> %563, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %613 = bitcast <2 x i64> %612 to <16 x i8>
  %614 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %611, <16 x i8> %613) #4
  %615 = shufflevector <16 x i8> %610, <16 x i8> undef, <16 x i32> <i32 4, i32 5, i32 6, i32 7, i32 5, i32 6, i32 7, i32 8, i32 6, i32 7, i32 8, i32 9, i32 7, i32 8, i32 9, i32 10>
  %616 = shufflevector <4 x i64> %565, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %617 = bitcast <2 x i64> %616 to <16 x i8>
  %618 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %615, <16 x i8> %617) #4
  %619 = tail call <8 x i16> @llvm.sadd.sat.v8i16(<8 x i16> %614, <8 x i16> %618) #4
  %620 = tail call <8 x i16> @llvm.x86.ssse3.phadd.sw.128(<8 x i16> %619, <8 x i16> zeroinitializer) #4
  %621 = tail call <8 x i16> @llvm.sadd.sat.v8i16(<8 x i16> %620, <8 x i16> <i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32>) #4
  %622 = ashr <8 x i16> %621, <i16 6, i16 6, i16 6, i16 6, i16 6, i16 6, i16 6, i16 6>
  %623 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %622, <8 x i16> undef) #4
  %624 = bitcast <16 x i8> %623 to <4 x i32>
  %625 = extractelement <4 x i32> %624, i32 0
  %626 = bitcast i8* %605 to i32*
  store i32 %625, i32* %626, align 4
  br label %627

627:                                              ; preds = %603, %608
  %628 = getelementptr inbounds i8, i8* %552, i64 4
  %629 = getelementptr inbounds i8, i8* %554, i64 4
  %630 = add nsw i32 %553, -4
  %631 = icmp sgt i32 %630, 3
  br i1 %631, label %551, label %672

632:                                              ; preds = %639
  %633 = and i32 %8, 15
  br label %634

634:                                              ; preds = %632, %301
  %635 = phi i8* [ %2, %301 ], [ %644, %632 ]
  %636 = phi i32 [ %8, %301 ], [ %633, %632 ]
  %637 = phi i8* [ %0, %301 ], [ %643, %632 ]
  %638 = icmp sgt i32 %636, 7
  br i1 %638, label %654, label %649

639:                                              ; preds = %301, %639
  %640 = phi i8* [ %643, %639 ], [ %0, %301 ]
  %641 = phi i32 [ %645, %639 ], [ %8, %301 ]
  %642 = phi i8* [ %644, %639 ], [ %2, %301 ]
  tail call void @aom_filter_block1d16_h2_ssse3(i8* %640, i64 %1, i8* %642, i64 %3, i32 %9, i16* %4) #4
  %643 = getelementptr inbounds i8, i8* %640, i64 16
  %644 = getelementptr inbounds i8, i8* %642, i64 16
  %645 = add nsw i32 %641, -16
  %646 = icmp sgt i32 %645, 15
  br i1 %646, label %639, label %632

647:                                              ; preds = %654
  %648 = and i32 %636, 7
  br label %649

649:                                              ; preds = %647, %634
  %650 = phi i8* [ %635, %634 ], [ %659, %647 ]
  %651 = phi i32 [ %636, %634 ], [ %648, %647 ]
  %652 = phi i8* [ %637, %634 ], [ %658, %647 ]
  %653 = icmp sgt i32 %651, 3
  br i1 %653, label %662, label %676

654:                                              ; preds = %634, %654
  %655 = phi i8* [ %658, %654 ], [ %637, %634 ]
  %656 = phi i32 [ %660, %654 ], [ %636, %634 ]
  %657 = phi i8* [ %659, %654 ], [ %635, %634 ]
  tail call void @aom_filter_block1d8_h2_ssse3(i8* %655, i64 %1, i8* %657, i64 %3, i32 %9, i16* %4) #4
  %658 = getelementptr inbounds i8, i8* %655, i64 8
  %659 = getelementptr inbounds i8, i8* %657, i64 8
  %660 = add nsw i32 %656, -8
  %661 = icmp sgt i32 %660, 7
  br i1 %661, label %654, label %647

662:                                              ; preds = %649, %662
  %663 = phi i8* [ %666, %662 ], [ %652, %649 ]
  %664 = phi i32 [ %668, %662 ], [ %651, %649 ]
  %665 = phi i8* [ %667, %662 ], [ %650, %649 ]
  tail call void @aom_filter_block1d4_h2_ssse3(i8* %663, i64 %1, i8* %665, i64 %3, i32 %9, i16* %4) #4
  %666 = getelementptr inbounds i8, i8* %663, i64 4
  %667 = getelementptr inbounds i8, i8* %665, i64 4
  %668 = add nsw i32 %664, -4
  %669 = icmp sgt i32 %668, 3
  br i1 %669, label %662, label %670

670:                                              ; preds = %662
  %671 = and i32 %651, 3
  br label %676

672:                                              ; preds = %627
  %673 = and i32 %447, 3
  br label %676

674:                                              ; preds = %285
  %675 = and i32 %138, 3
  br label %676

676:                                              ; preds = %674, %672, %670, %136, %445, %649
  %677 = phi i8* [ %650, %649 ], [ %446, %445 ], [ %137, %136 ], [ %667, %670 ], [ %629, %672 ], [ %287, %674 ]
  %678 = phi i32 [ %651, %649 ], [ %447, %445 ], [ %138, %136 ], [ %671, %670 ], [ %673, %672 ], [ %675, %674 ]
  %679 = phi i8* [ %652, %649 ], [ %448, %445 ], [ %139, %136 ], [ %666, %670 ], [ %628, %672 ], [ %286, %674 ]
  %680 = icmp eq i32 %678, 0
  br i1 %680, label %682, label %681

681:                                              ; preds = %676
  tail call void @aom_convolve8_horiz_c(i8* %679, i64 %1, i8* %677, i64 %3, i16* %4, i32 %5, i16* %6, i32 %7, i32 %678, i32 %9) #4
  br label %682

682:                                              ; preds = %676, %681
  ret void
}

declare void @aom_filter_block1d16_h2_ssse3(i8*, i64, i8*, i64, i32, i16*) local_unnamed_addr #1

declare void @aom_filter_block1d8_h2_ssse3(i8*, i64, i8*, i64, i32, i16*) local_unnamed_addr #1

declare void @aom_filter_block1d4_h2_ssse3(i8*, i64, i8*, i64, i32, i16*) local_unnamed_addr #1

declare void @aom_convolve8_horiz_c(i8*, i64, i8*, i64, i16*, i32, i16*, i32, i32, i32) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden void @aom_convolve8_vert_avx2(i8*, i64, i8*, i64, i16*, i32, i16*, i32, i32, i32) local_unnamed_addr #0 {
  %11 = load i16, i16* %6, align 2
  %12 = getelementptr inbounds i16, i16* %6, i64 1
  %13 = load i16, i16* %12, align 2
  %14 = or i16 %13, %11
  %15 = getelementptr inbounds i16, i16* %6, i64 6
  %16 = load i16, i16* %15, align 2
  %17 = or i16 %14, %16
  %18 = getelementptr inbounds i16, i16* %6, i64 7
  %19 = load i16, i16* %18, align 2
  %20 = or i16 %17, %19
  %21 = icmp eq i16 %20, 0
  %22 = getelementptr inbounds i16, i16* %6, i64 2
  %23 = load i16, i16* %22, align 2
  br i1 %21, label %24, label %304

24:                                               ; preds = %10
  %25 = getelementptr inbounds i16, i16* %6, i64 5
  %26 = load i16, i16* %25, align 2
  %27 = or i16 %26, %23
  %28 = icmp eq i16 %27, 0
  br i1 %28, label %304, label %29

29:                                               ; preds = %24
  %30 = icmp sgt i32 %8, 15
  br i1 %30, label %31, label %43

31:                                               ; preds = %29
  %32 = mul i64 %1, -3
  %33 = bitcast i16* %6 to <8 x i16>*
  %34 = shl i64 %1, 1
  %35 = shl i64 %3, 1
  %36 = mul nsw i64 %1, 3
  %37 = shl nsw i64 %1, 2
  %38 = icmp ugt i32 %9, 1
  %39 = mul nsw i64 %1, 5
  %40 = mul nsw i64 %1, 6
  br label %58

41:                                               ; preds = %131
  %42 = and i32 %8, 15
  br label %43

43:                                               ; preds = %41, %29
  %44 = phi i8* [ %2, %29 ], [ %133, %41 ]
  %45 = phi i32 [ %8, %29 ], [ %42, %41 ]
  %46 = phi i8* [ %0, %29 ], [ %132, %41 ]
  %47 = icmp sgt i32 %45, 7
  br i1 %47, label %48, label %138

48:                                               ; preds = %43
  %49 = mul i64 %1, -3
  %50 = bitcast i16* %6 to <8 x i16>*
  %51 = shl i64 %1, 1
  %52 = shl i64 %3, 1
  %53 = mul nsw i64 %1, 3
  %54 = shl nsw i64 %1, 2
  %55 = icmp ugt i32 %9, 1
  %56 = mul nsw i64 %1, 5
  %57 = mul nsw i64 %1, 6
  br label %153

58:                                               ; preds = %31, %131
  %59 = phi i8* [ %0, %31 ], [ %132, %131 ]
  %60 = phi i32 [ %8, %31 ], [ %134, %131 ]
  %61 = phi i8* [ %2, %31 ], [ %133, %131 ]
  %62 = getelementptr inbounds i8, i8* %59, i64 %32
  %63 = load <8 x i16>, <8 x i16>* %33, align 1
  %64 = ashr <8 x i16> %63, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %65 = tail call <16 x i8> @llvm.x86.sse2.packsswb.128(<8 x i16> %64, <8 x i16> %64) #4
  %66 = bitcast <16 x i8> %65 to <2 x i64>
  %67 = shufflevector <2 x i64> %66, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 0, i32 1>
  %68 = bitcast <4 x i64> %67 to <32 x i8>
  %69 = shufflevector <32 x i8> %68, <32 x i8> undef, <32 x i32> <i32 2, i32 3, i32 2, i32 3, i32 2, i32 3, i32 2, i32 3, i32 2, i32 3, i32 2, i32 3, i32 2, i32 3, i32 2, i32 3, i32 18, i32 19, i32 18, i32 19, i32 18, i32 19, i32 18, i32 19, i32 18, i32 19, i32 18, i32 19, i32 18, i32 19, i32 18, i32 19>
  %70 = shufflevector <32 x i8> %68, <32 x i8> undef, <32 x i32> <i32 4, i32 5, i32 4, i32 5, i32 4, i32 5, i32 4, i32 5, i32 4, i32 5, i32 4, i32 5, i32 4, i32 5, i32 4, i32 5, i32 20, i32 21, i32 20, i32 21, i32 20, i32 21, i32 20, i32 21, i32 20, i32 21, i32 20, i32 21, i32 20, i32 21, i32 20, i32 21>
  %71 = getelementptr inbounds i8, i8* %62, i64 %36
  %72 = getelementptr inbounds i8, i8* %62, i64 %34
  %73 = bitcast i8* %72 to <2 x i64>*
  %74 = load <2 x i64>, <2 x i64>* %73, align 1
  %75 = bitcast i8* %71 to <2 x i64>*
  %76 = load <2 x i64>, <2 x i64>* %75, align 1
  %77 = shufflevector <2 x i64> %74, <2 x i64> %76, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %78 = getelementptr inbounds i8, i8* %62, i64 %37
  %79 = bitcast i8* %78 to <2 x i64>*
  %80 = load <2 x i64>, <2 x i64>* %79, align 1
  %81 = shufflevector <2 x i64> %80, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %82 = shufflevector <4 x i64> %77, <4 x i64> %81, <4 x i32> <i32 2, i32 3, i32 4, i32 5>
  %83 = bitcast <4 x i64> %77 to <32 x i8>
  %84 = bitcast <4 x i64> %82 to <32 x i8>
  br i1 %38, label %85, label %131

85:                                               ; preds = %58
  %86 = shufflevector <32 x i8> %83, <32 x i8> %84, <32 x i32> <i32 8, i32 40, i32 9, i32 41, i32 10, i32 42, i32 11, i32 43, i32 12, i32 44, i32 13, i32 45, i32 14, i32 46, i32 15, i32 47, i32 24, i32 56, i32 25, i32 57, i32 26, i32 58, i32 27, i32 59, i32 28, i32 60, i32 29, i32 61, i32 30, i32 62, i32 31, i32 63>
  %87 = shufflevector <32 x i8> %83, <32 x i8> %84, <32 x i32> <i32 0, i32 32, i32 1, i32 33, i32 2, i32 34, i32 3, i32 35, i32 4, i32 36, i32 5, i32 37, i32 6, i32 38, i32 7, i32 39, i32 16, i32 48, i32 17, i32 49, i32 18, i32 50, i32 19, i32 51, i32 20, i32 52, i32 21, i32 53, i32 22, i32 54, i32 23, i32 55>
  br label %88

88:                                               ; preds = %88, %85
  %89 = phi i32 [ %9, %85 ], [ %129, %88 ]
  %90 = phi <32 x i8> [ %86, %85 ], [ %108, %88 ]
  %91 = phi <32 x i8> [ %87, %85 ], [ %107, %88 ]
  %92 = phi i8* [ %62, %85 ], [ %121, %88 ]
  %93 = phi <4 x i64> [ %81, %85 ], [ %103, %88 ]
  %94 = phi i8* [ %61, %85 ], [ %128, %88 ]
  %95 = getelementptr inbounds i8, i8* %92, i64 %39
  %96 = bitcast i8* %95 to <2 x i64>*
  %97 = load <2 x i64>, <2 x i64>* %96, align 1
  %98 = shufflevector <2 x i64> %97, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %99 = shufflevector <4 x i64> %93, <4 x i64> %98, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %100 = getelementptr inbounds i8, i8* %92, i64 %40
  %101 = bitcast i8* %100 to <2 x i64>*
  %102 = load <2 x i64>, <2 x i64>* %101, align 1
  %103 = shufflevector <2 x i64> %102, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %104 = shufflevector <2 x i64> %97, <2 x i64> %102, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %105 = bitcast <4 x i64> %99 to <32 x i8>
  %106 = bitcast <4 x i64> %104 to <32 x i8>
  %107 = shufflevector <32 x i8> %105, <32 x i8> %106, <32 x i32> <i32 0, i32 32, i32 1, i32 33, i32 2, i32 34, i32 3, i32 35, i32 4, i32 36, i32 5, i32 37, i32 6, i32 38, i32 7, i32 39, i32 16, i32 48, i32 17, i32 49, i32 18, i32 50, i32 19, i32 51, i32 20, i32 52, i32 21, i32 53, i32 22, i32 54, i32 23, i32 55>
  %108 = shufflevector <32 x i8> %105, <32 x i8> %106, <32 x i32> <i32 8, i32 40, i32 9, i32 41, i32 10, i32 42, i32 11, i32 43, i32 12, i32 44, i32 13, i32 45, i32 14, i32 46, i32 15, i32 47, i32 24, i32 56, i32 25, i32 57, i32 26, i32 58, i32 27, i32 59, i32 28, i32 60, i32 29, i32 61, i32 30, i32 62, i32 31, i32 63>
  %109 = tail call <16 x i16> @llvm.x86.avx2.pmadd.ub.sw(<32 x i8> %91, <32 x i8> %69) #4
  %110 = tail call <16 x i16> @llvm.x86.avx2.pmadd.ub.sw(<32 x i8> %107, <32 x i8> %70) #4
  %111 = tail call <16 x i16> @llvm.sadd.sat.v16i16(<16 x i16> %109, <16 x i16> %110) #4
  %112 = tail call <16 x i16> @llvm.x86.avx2.pmadd.ub.sw(<32 x i8> %90, <32 x i8> %69) #4
  %113 = tail call <16 x i16> @llvm.x86.avx2.pmadd.ub.sw(<32 x i8> %108, <32 x i8> %70) #4
  %114 = tail call <16 x i16> @llvm.sadd.sat.v16i16(<16 x i16> %112, <16 x i16> %113) #4
  %115 = tail call <16 x i16> @llvm.sadd.sat.v16i16(<16 x i16> %111, <16 x i16> <i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32>) #4
  %116 = tail call <16 x i16> @llvm.sadd.sat.v16i16(<16 x i16> %114, <16 x i16> <i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32>) #4
  %117 = ashr <16 x i16> %115, <i16 6, i16 6, i16 6, i16 6, i16 6, i16 6, i16 6, i16 6, i16 6, i16 6, i16 6, i16 6, i16 6, i16 6, i16 6, i16 6>
  %118 = ashr <16 x i16> %116, <i16 6, i16 6, i16 6, i16 6, i16 6, i16 6, i16 6, i16 6, i16 6, i16 6, i16 6, i16 6, i16 6, i16 6, i16 6, i16 6>
  %119 = tail call <32 x i8> @llvm.x86.avx2.packuswb(<16 x i16> %117, <16 x i16> %118) #4
  %120 = bitcast <32 x i8> %119 to <4 x i64>
  %121 = getelementptr inbounds i8, i8* %92, i64 %34
  %122 = bitcast i8* %94 to <2 x i64>*
  %123 = shufflevector <4 x i64> %120, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  store <2 x i64> %123, <2 x i64>* %122, align 16
  %124 = getelementptr inbounds i8, i8* %94, i64 %3
  %125 = bitcast <32 x i8> %119 to <8 x i32>
  %126 = shufflevector <8 x i32> %125, <8 x i32> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %127 = bitcast i8* %124 to <4 x i32>*
  store <4 x i32> %126, <4 x i32>* %127, align 16
  %128 = getelementptr inbounds i8, i8* %94, i64 %35
  %129 = add i32 %89, -2
  %130 = icmp ugt i32 %129, 1
  br i1 %130, label %88, label %131

131:                                              ; preds = %88, %58
  %132 = getelementptr inbounds i8, i8* %59, i64 16
  %133 = getelementptr inbounds i8, i8* %61, i64 16
  %134 = add nsw i32 %60, -16
  %135 = icmp sgt i32 %134, 15
  br i1 %135, label %58, label %41

136:                                              ; preds = %222
  %137 = and i32 %45, 7
  br label %138

138:                                              ; preds = %136, %43
  %139 = phi i8* [ %44, %43 ], [ %224, %136 ]
  %140 = phi i32 [ %45, %43 ], [ %137, %136 ]
  %141 = phi i8* [ %46, %43 ], [ %223, %136 ]
  %142 = icmp sgt i32 %140, 3
  br i1 %142, label %143, label %756

143:                                              ; preds = %138
  %144 = mul i64 %1, -3
  %145 = bitcast i16* %6 to <8 x i16>*
  %146 = shl i64 %1, 1
  %147 = shl i64 %3, 1
  %148 = mul nsw i64 %1, 3
  %149 = shl nsw i64 %1, 2
  %150 = icmp ugt i32 %9, 1
  %151 = mul nsw i64 %1, 5
  %152 = mul nsw i64 %1, 6
  br label %227

153:                                              ; preds = %48, %222
  %154 = phi i8* [ %46, %48 ], [ %223, %222 ]
  %155 = phi i32 [ %45, %48 ], [ %225, %222 ]
  %156 = phi i8* [ %44, %48 ], [ %224, %222 ]
  %157 = getelementptr inbounds i8, i8* %154, i64 %49
  %158 = load <8 x i16>, <8 x i16>* %50, align 1
  %159 = ashr <8 x i16> %158, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %160 = tail call <16 x i8> @llvm.x86.sse2.packsswb.128(<8 x i16> %159, <8 x i16> %159) #4
  %161 = bitcast <16 x i8> %160 to <2 x i64>
  %162 = shufflevector <2 x i64> %161, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 0, i32 1>
  %163 = bitcast <4 x i64> %162 to <32 x i8>
  %164 = shufflevector <32 x i8> %163, <32 x i8> undef, <32 x i32> <i32 2, i32 3, i32 2, i32 3, i32 2, i32 3, i32 2, i32 3, i32 2, i32 3, i32 2, i32 3, i32 2, i32 3, i32 2, i32 3, i32 18, i32 19, i32 18, i32 19, i32 18, i32 19, i32 18, i32 19, i32 18, i32 19, i32 18, i32 19, i32 18, i32 19, i32 18, i32 19>
  %165 = shufflevector <32 x i8> %163, <32 x i8> undef, <32 x i32> <i32 4, i32 5, i32 4, i32 5, i32 4, i32 5, i32 4, i32 5, i32 4, i32 5, i32 4, i32 5, i32 4, i32 5, i32 4, i32 5, i32 20, i32 21, i32 20, i32 21, i32 20, i32 21, i32 20, i32 21, i32 20, i32 21, i32 20, i32 21, i32 20, i32 21, i32 20, i32 21>
  %166 = getelementptr inbounds i8, i8* %157, i64 %53
  %167 = getelementptr inbounds i8, i8* %157, i64 %51
  %168 = bitcast i8* %167 to i64*
  %169 = load i64, i64* %168, align 1
  %170 = insertelement <4 x i64> <i64 undef, i64 0, i64 undef, i64 undef>, i64 %169, i32 0
  %171 = bitcast i8* %166 to i64*
  %172 = load i64, i64* %171, align 1
  %173 = insertelement <4 x i64> <i64 undef, i64 0, i64 undef, i64 undef>, i64 %172, i32 0
  %174 = shufflevector <4 x i64> %170, <4 x i64> %173, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %175 = getelementptr inbounds i8, i8* %157, i64 %54
  %176 = bitcast i8* %175 to i64*
  %177 = load i64, i64* %176, align 1
  %178 = insertelement <4 x i64> <i64 undef, i64 0, i64 undef, i64 undef>, i64 %177, i32 0
  br i1 %55, label %179, label %222

179:                                              ; preds = %153
  %180 = bitcast <4 x i64> %174 to <32 x i8>
  %181 = shufflevector <4 x i64> %174, <4 x i64> %178, <4 x i32> <i32 2, i32 undef, i32 4, i32 undef>
  %182 = bitcast <4 x i64> %181 to <32 x i8>
  %183 = shufflevector <32 x i8> %180, <32 x i8> %182, <32 x i32> <i32 0, i32 32, i32 1, i32 33, i32 2, i32 34, i32 3, i32 35, i32 4, i32 36, i32 5, i32 37, i32 6, i32 38, i32 7, i32 39, i32 16, i32 48, i32 17, i32 49, i32 18, i32 50, i32 19, i32 51, i32 20, i32 52, i32 21, i32 53, i32 22, i32 54, i32 23, i32 55>
  br label %184

184:                                              ; preds = %184, %179
  %185 = phi i32 [ %9, %179 ], [ %220, %184 ]
  %186 = phi <32 x i8> [ %183, %179 ], [ %202, %184 ]
  %187 = phi i8* [ %157, %179 ], [ %210, %184 ]
  %188 = phi <4 x i64> [ %178, %179 ], [ %198, %184 ]
  %189 = phi i8* [ %156, %179 ], [ %219, %184 ]
  %190 = getelementptr inbounds i8, i8* %187, i64 %56
  %191 = bitcast i8* %190 to i64*
  %192 = load i64, i64* %191, align 1
  %193 = insertelement <4 x i64> undef, i64 %192, i32 0
  %194 = insertelement <4 x i64> %188, i64 %192, i32 2
  %195 = getelementptr inbounds i8, i8* %187, i64 %57
  %196 = bitcast i8* %195 to i64*
  %197 = load i64, i64* %196, align 1
  %198 = insertelement <4 x i64> <i64 undef, i64 0, i64 undef, i64 undef>, i64 %197, i32 0
  %199 = insertelement <4 x i64> %193, i64 %197, i32 2
  %200 = bitcast <4 x i64> %194 to <32 x i8>
  %201 = bitcast <4 x i64> %199 to <32 x i8>
  %202 = shufflevector <32 x i8> %200, <32 x i8> %201, <32 x i32> <i32 0, i32 32, i32 1, i32 33, i32 2, i32 34, i32 3, i32 35, i32 4, i32 36, i32 5, i32 37, i32 6, i32 38, i32 7, i32 39, i32 16, i32 48, i32 17, i32 49, i32 18, i32 50, i32 19, i32 51, i32 20, i32 52, i32 21, i32 53, i32 22, i32 54, i32 23, i32 55>
  %203 = tail call <16 x i16> @llvm.x86.avx2.pmadd.ub.sw(<32 x i8> %186, <32 x i8> %164) #4
  %204 = tail call <16 x i16> @llvm.x86.avx2.pmadd.ub.sw(<32 x i8> %202, <32 x i8> %165) #4
  %205 = tail call <16 x i16> @llvm.sadd.sat.v16i16(<16 x i16> %203, <16 x i16> %204) #4
  %206 = tail call <16 x i16> @llvm.sadd.sat.v16i16(<16 x i16> %205, <16 x i16> <i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32>) #4
  %207 = ashr <16 x i16> %206, <i16 6, i16 6, i16 6, i16 6, i16 6, i16 6, i16 6, i16 6, i16 6, i16 6, i16 6, i16 6, i16 6, i16 6, i16 6, i16 6>
  %208 = tail call <32 x i8> @llvm.x86.avx2.packuswb(<16 x i16> %207, <16 x i16> %207) #4
  %209 = bitcast <32 x i8> %208 to <4 x i64>
  %210 = getelementptr inbounds i8, i8* %187, i64 %51
  %211 = extractelement <4 x i64> %209, i32 0
  %212 = bitcast i8* %189 to i64*
  store i64 %211, i64* %212, align 1
  %213 = getelementptr inbounds i8, i8* %189, i64 %3
  %214 = bitcast <32 x i8> %208 to <8 x i32>
  %215 = shufflevector <8 x i32> %214, <8 x i32> undef, <4 x i32> <i32 4, i32 5, i32 undef, i32 undef>
  %216 = bitcast <4 x i32> %215 to <2 x i64>
  %217 = extractelement <2 x i64> %216, i32 0
  %218 = bitcast i8* %213 to i64*
  store i64 %217, i64* %218, align 1
  %219 = getelementptr inbounds i8, i8* %189, i64 %52
  %220 = add i32 %185, -2
  %221 = icmp ugt i32 %220, 1
  br i1 %221, label %184, label %222

222:                                              ; preds = %184, %153
  %223 = getelementptr inbounds i8, i8* %154, i64 8
  %224 = getelementptr inbounds i8, i8* %156, i64 8
  %225 = add nsw i32 %155, -8
  %226 = icmp sgt i32 %225, 7
  br i1 %226, label %153, label %136

227:                                              ; preds = %143, %299
  %228 = phi i8* [ %141, %143 ], [ %300, %299 ]
  %229 = phi i32 [ %140, %143 ], [ %302, %299 ]
  %230 = phi i8* [ %139, %143 ], [ %301, %299 ]
  %231 = getelementptr inbounds i8, i8* %228, i64 %144
  %232 = load <8 x i16>, <8 x i16>* %145, align 1
  %233 = ashr <8 x i16> %232, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %234 = tail call <16 x i8> @llvm.x86.sse2.packsswb.128(<8 x i16> %233, <8 x i16> undef) #4
  %235 = bitcast <16 x i8> %234 to <2 x i64>
  %236 = shufflevector <2 x i64> %235, <2 x i64> undef, <4 x i32> <i32 0, i32 undef, i32 0, i32 undef>
  %237 = bitcast <4 x i64> %236 to <32 x i8>
  %238 = shufflevector <32 x i8> %237, <32 x i8> undef, <32 x i32> <i32 2, i32 3, i32 4, i32 5, i32 2, i32 3, i32 4, i32 5, i32 2, i32 3, i32 4, i32 5, i32 2, i32 3, i32 4, i32 5, i32 18, i32 19, i32 20, i32 21, i32 18, i32 19, i32 20, i32 21, i32 18, i32 19, i32 20, i32 21, i32 18, i32 19, i32 20, i32 21>
  %239 = getelementptr inbounds i8, i8* %231, i64 %148
  %240 = getelementptr inbounds i8, i8* %231, i64 %146
  %241 = bitcast i8* %240 to i64*
  %242 = load i64, i64* %241, align 1
  %243 = insertelement <4 x i64> <i64 undef, i64 0, i64 undef, i64 undef>, i64 %242, i32 0
  %244 = bitcast i8* %239 to i64*
  %245 = load i64, i64* %244, align 1
  %246 = insertelement <4 x i64> <i64 undef, i64 0, i64 undef, i64 undef>, i64 %245, i32 0
  %247 = shufflevector <4 x i64> %243, <4 x i64> %246, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %248 = getelementptr inbounds i8, i8* %231, i64 %149
  %249 = bitcast i8* %248 to i64*
  %250 = load i64, i64* %249, align 1
  %251 = insertelement <4 x i64> <i64 undef, i64 0, i64 undef, i64 undef>, i64 %250, i32 0
  br i1 %150, label %252, label %299

252:                                              ; preds = %227
  %253 = bitcast <4 x i64> %247 to <32 x i8>
  %254 = shufflevector <4 x i64> %247, <4 x i64> %251, <4 x i32> <i32 2, i32 undef, i32 4, i32 undef>
  %255 = bitcast <4 x i64> %254 to <32 x i8>
  %256 = shufflevector <32 x i8> %253, <32 x i8> %255, <32 x i32> <i32 0, i32 32, i32 1, i32 33, i32 2, i32 34, i32 3, i32 35, i32 4, i32 36, i32 5, i32 37, i32 6, i32 38, i32 7, i32 39, i32 16, i32 48, i32 17, i32 49, i32 18, i32 50, i32 19, i32 51, i32 20, i32 52, i32 21, i32 53, i32 22, i32 54, i32 23, i32 55>
  br label %257

257:                                              ; preds = %257, %252
  %258 = phi i32 [ %9, %252 ], [ %297, %257 ]
  %259 = phi <32 x i8> [ %256, %252 ], [ %275, %257 ]
  %260 = phi i8* [ %231, %252 ], [ %286, %257 ]
  %261 = phi <4 x i64> [ %251, %252 ], [ %271, %257 ]
  %262 = phi i8* [ %230, %252 ], [ %296, %257 ]
  %263 = getelementptr inbounds i8, i8* %260, i64 %151
  %264 = bitcast i8* %263 to i64*
  %265 = load i64, i64* %264, align 1
  %266 = insertelement <4 x i64> undef, i64 %265, i32 0
  %267 = insertelement <4 x i64> %261, i64 %265, i32 2
  %268 = getelementptr inbounds i8, i8* %260, i64 %152
  %269 = bitcast i8* %268 to i64*
  %270 = load i64, i64* %269, align 1
  %271 = insertelement <4 x i64> <i64 undef, i64 0, i64 undef, i64 undef>, i64 %270, i32 0
  %272 = insertelement <4 x i64> %266, i64 %270, i32 2
  %273 = bitcast <4 x i64> %267 to <32 x i8>
  %274 = bitcast <4 x i64> %272 to <32 x i8>
  %275 = shufflevector <32 x i8> %273, <32 x i8> %274, <32 x i32> <i32 0, i32 32, i32 1, i32 33, i32 2, i32 34, i32 3, i32 35, i32 4, i32 36, i32 5, i32 37, i32 6, i32 38, i32 7, i32 39, i32 16, i32 48, i32 17, i32 49, i32 18, i32 50, i32 19, i32 51, i32 20, i32 52, i32 21, i32 53, i32 22, i32 54, i32 23, i32 55>
  %276 = bitcast <32 x i8> %259 to <16 x i16>
  %277 = bitcast <32 x i8> %275 to <16 x i16>
  %278 = shufflevector <16 x i16> %276, <16 x i16> %277, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27>
  %279 = bitcast <16 x i16> %278 to <32 x i8>
  %280 = tail call <16 x i16> @llvm.x86.avx2.pmadd.ub.sw(<32 x i8> %279, <32 x i8> %238) #4
  %281 = tail call <16 x i16> @llvm.x86.avx2.phadd.sw(<16 x i16> %280, <16 x i16> zeroinitializer) #4
  %282 = tail call <16 x i16> @llvm.sadd.sat.v16i16(<16 x i16> %281, <16 x i16> <i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32>) #4
  %283 = ashr <16 x i16> %282, <i16 6, i16 6, i16 6, i16 6, i16 6, i16 6, i16 6, i16 6, i16 6, i16 6, i16 6, i16 6, i16 6, i16 6, i16 6, i16 6>
  %284 = tail call <32 x i8> @llvm.x86.avx2.packuswb(<16 x i16> %283, <16 x i16> %283) #4
  %285 = bitcast <32 x i8> %284 to <4 x i64>
  %286 = getelementptr inbounds i8, i8* %260, i64 %146
  %287 = shufflevector <4 x i64> %285, <4 x i64> undef, <2 x i32> <i32 0, i32 undef>
  %288 = bitcast <2 x i64> %287 to <4 x i32>
  %289 = extractelement <4 x i32> %288, i32 0
  %290 = bitcast i8* %262 to i32*
  store i32 %289, i32* %290, align 4
  %291 = shufflevector <4 x i64> %285, <4 x i64> undef, <2 x i32> <i32 2, i32 undef>
  %292 = bitcast <2 x i64> %291 to <4 x i32>
  %293 = extractelement <4 x i32> %292, i32 0
  %294 = getelementptr inbounds i8, i8* %262, i64 %3
  %295 = bitcast i8* %294 to i32*
  store i32 %293, i32* %295, align 4
  %296 = getelementptr inbounds i8, i8* %262, i64 %147
  %297 = add i32 %258, -2
  %298 = icmp ugt i32 %297, 1
  br i1 %298, label %257, label %299

299:                                              ; preds = %257, %227
  %300 = getelementptr inbounds i8, i8* %228, i64 4
  %301 = getelementptr inbounds i8, i8* %230, i64 4
  %302 = add nsw i32 %229, -4
  %303 = icmp sgt i32 %302, 3
  br i1 %303, label %227, label %754

304:                                              ; preds = %10, %24
  %305 = or i16 %23, %14
  %306 = icmp eq i16 %305, 0
  %307 = icmp sgt i32 %8, 15
  br i1 %306, label %322, label %308

308:                                              ; preds = %304
  br i1 %307, label %309, label %325

309:                                              ; preds = %308
  %310 = mul i64 %1, -3
  %311 = bitcast i16* %6 to <8 x i16>*
  %312 = shl i64 %1, 1
  %313 = shl i64 %3, 1
  %314 = mul nsw i64 %1, 3
  %315 = mul nsw i64 %1, 5
  %316 = shl nsw i64 %1, 2
  %317 = mul nsw i64 %1, 6
  %318 = icmp ugt i32 %9, 1
  %319 = mul nsw i64 %1, 7
  %320 = shl nsw i64 %1, 3
  %321 = and i32 %9, 1
  br label %343

322:                                              ; preds = %304
  br i1 %307, label %719, label %714

323:                                              ; preds = %528
  %324 = and i32 %8, 15
  br label %325

325:                                              ; preds = %323, %308
  %326 = phi i8* [ %2, %308 ], [ %530, %323 ]
  %327 = phi i32 [ %8, %308 ], [ %324, %323 ]
  %328 = phi i8* [ %0, %308 ], [ %529, %323 ]
  %329 = icmp sgt i32 %327, 7
  br i1 %329, label %330, label %535

330:                                              ; preds = %325
  %331 = mul i64 %1, -3
  %332 = bitcast i16* %6 to <8 x i16>*
  %333 = shl i64 %1, 1
  %334 = shl i64 %3, 1
  %335 = mul nsw i64 %1, 3
  %336 = mul nsw i64 %1, 5
  %337 = shl nsw i64 %1, 2
  %338 = mul nsw i64 %1, 6
  %339 = icmp ugt i32 %9, 1
  %340 = mul nsw i64 %1, 7
  %341 = shl nsw i64 %1, 3
  %342 = and i32 %9, 1
  br label %542

343:                                              ; preds = %309, %528
  %344 = phi i8* [ %0, %309 ], [ %529, %528 ]
  %345 = phi i32 [ %8, %309 ], [ %531, %528 ]
  %346 = phi i8* [ %2, %309 ], [ %530, %528 ]
  %347 = getelementptr inbounds i8, i8* %344, i64 %310
  %348 = load <8 x i16>, <8 x i16>* %311, align 1
  %349 = ashr <8 x i16> %348, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %350 = tail call <16 x i8> @llvm.x86.sse2.packsswb.128(<8 x i16> %349, <8 x i16> %349) #4
  %351 = bitcast <16 x i8> %350 to <2 x i64>
  %352 = shufflevector <2 x i64> %351, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 0, i32 1>
  %353 = bitcast <4 x i64> %352 to <32 x i8>
  %354 = shufflevector <32 x i8> %353, <32 x i8> undef, <32 x i32> <i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 16, i32 17, i32 16, i32 17, i32 16, i32 17, i32 16, i32 17, i32 16, i32 17, i32 16, i32 17, i32 16, i32 17, i32 16, i32 17>
  %355 = bitcast <32 x i8> %354 to <4 x i64>
  %356 = shufflevector <32 x i8> %353, <32 x i8> undef, <32 x i32> <i32 2, i32 3, i32 2, i32 3, i32 2, i32 3, i32 2, i32 3, i32 2, i32 3, i32 2, i32 3, i32 2, i32 3, i32 2, i32 3, i32 18, i32 19, i32 18, i32 19, i32 18, i32 19, i32 18, i32 19, i32 18, i32 19, i32 18, i32 19, i32 18, i32 19, i32 18, i32 19>
  %357 = bitcast <32 x i8> %356 to <4 x i64>
  %358 = shufflevector <32 x i8> %353, <32 x i8> undef, <32 x i32> <i32 4, i32 5, i32 4, i32 5, i32 4, i32 5, i32 4, i32 5, i32 4, i32 5, i32 4, i32 5, i32 4, i32 5, i32 4, i32 5, i32 20, i32 21, i32 20, i32 21, i32 20, i32 21, i32 20, i32 21, i32 20, i32 21, i32 20, i32 21, i32 20, i32 21, i32 20, i32 21>
  %359 = bitcast <32 x i8> %358 to <4 x i64>
  %360 = shufflevector <32 x i8> %353, <32 x i8> undef, <32 x i32> <i32 6, i32 7, i32 6, i32 7, i32 6, i32 7, i32 6, i32 7, i32 6, i32 7, i32 6, i32 7, i32 6, i32 7, i32 6, i32 7, i32 22, i32 23, i32 22, i32 23, i32 22, i32 23, i32 22, i32 23, i32 22, i32 23, i32 22, i32 23, i32 22, i32 23, i32 22, i32 23>
  %361 = bitcast <32 x i8> %360 to <4 x i64>
  %362 = getelementptr inbounds i8, i8* %347, i64 %1
  %363 = bitcast i8* %347 to <2 x i64>*
  %364 = load <2 x i64>, <2 x i64>* %363, align 1
  %365 = bitcast i8* %362 to <2 x i64>*
  %366 = load <2 x i64>, <2 x i64>* %365, align 1
  %367 = shufflevector <2 x i64> %364, <2 x i64> %366, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %368 = getelementptr inbounds i8, i8* %347, i64 %314
  %369 = getelementptr inbounds i8, i8* %347, i64 %312
  %370 = bitcast i8* %369 to <2 x i64>*
  %371 = load <2 x i64>, <2 x i64>* %370, align 1
  %372 = bitcast i8* %368 to <2 x i64>*
  %373 = load <2 x i64>, <2 x i64>* %372, align 1
  %374 = shufflevector <2 x i64> %371, <2 x i64> %373, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %375 = getelementptr inbounds i8, i8* %347, i64 %315
  %376 = getelementptr inbounds i8, i8* %347, i64 %316
  %377 = bitcast i8* %376 to <2 x i64>*
  %378 = load <2 x i64>, <2 x i64>* %377, align 1
  %379 = bitcast i8* %375 to <2 x i64>*
  %380 = load <2 x i64>, <2 x i64>* %379, align 1
  %381 = shufflevector <2 x i64> %378, <2 x i64> %380, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %382 = getelementptr inbounds i8, i8* %347, i64 %317
  %383 = bitcast i8* %382 to <2 x i64>*
  %384 = load <2 x i64>, <2 x i64>* %383, align 1
  %385 = shufflevector <2 x i64> %384, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %386 = shufflevector <4 x i64> %367, <4 x i64> %374, <4 x i32> <i32 2, i32 3, i32 4, i32 5>
  %387 = shufflevector <4 x i64> %374, <4 x i64> %381, <4 x i32> <i32 2, i32 3, i32 4, i32 5>
  %388 = shufflevector <4 x i64> %381, <4 x i64> %385, <4 x i32> <i32 2, i32 3, i32 4, i32 5>
  %389 = bitcast <4 x i64> %367 to <32 x i8>
  %390 = bitcast <4 x i64> %386 to <32 x i8>
  %391 = shufflevector <32 x i8> %389, <32 x i8> %390, <32 x i32> <i32 0, i32 32, i32 1, i32 33, i32 2, i32 34, i32 3, i32 35, i32 4, i32 36, i32 5, i32 37, i32 6, i32 38, i32 7, i32 39, i32 16, i32 48, i32 17, i32 49, i32 18, i32 50, i32 19, i32 51, i32 20, i32 52, i32 21, i32 53, i32 22, i32 54, i32 23, i32 55>
  %392 = bitcast <32 x i8> %391 to <4 x i64>
  %393 = shufflevector <32 x i8> %389, <32 x i8> %390, <32 x i32> <i32 8, i32 40, i32 9, i32 41, i32 10, i32 42, i32 11, i32 43, i32 12, i32 44, i32 13, i32 45, i32 14, i32 46, i32 15, i32 47, i32 24, i32 56, i32 25, i32 57, i32 26, i32 58, i32 27, i32 59, i32 28, i32 60, i32 29, i32 61, i32 30, i32 62, i32 31, i32 63>
  %394 = bitcast <32 x i8> %393 to <4 x i64>
  %395 = bitcast <4 x i64> %374 to <32 x i8>
  %396 = bitcast <4 x i64> %387 to <32 x i8>
  %397 = shufflevector <32 x i8> %395, <32 x i8> %396, <32 x i32> <i32 0, i32 32, i32 1, i32 33, i32 2, i32 34, i32 3, i32 35, i32 4, i32 36, i32 5, i32 37, i32 6, i32 38, i32 7, i32 39, i32 16, i32 48, i32 17, i32 49, i32 18, i32 50, i32 19, i32 51, i32 20, i32 52, i32 21, i32 53, i32 22, i32 54, i32 23, i32 55>
  %398 = bitcast <32 x i8> %397 to <4 x i64>
  %399 = shufflevector <32 x i8> %395, <32 x i8> %396, <32 x i32> <i32 8, i32 40, i32 9, i32 41, i32 10, i32 42, i32 11, i32 43, i32 12, i32 44, i32 13, i32 45, i32 14, i32 46, i32 15, i32 47, i32 24, i32 56, i32 25, i32 57, i32 26, i32 58, i32 27, i32 59, i32 28, i32 60, i32 29, i32 61, i32 30, i32 62, i32 31, i32 63>
  %400 = bitcast <32 x i8> %399 to <4 x i64>
  %401 = bitcast <4 x i64> %381 to <32 x i8>
  %402 = bitcast <4 x i64> %388 to <32 x i8>
  %403 = shufflevector <32 x i8> %401, <32 x i8> %402, <32 x i32> <i32 0, i32 32, i32 1, i32 33, i32 2, i32 34, i32 3, i32 35, i32 4, i32 36, i32 5, i32 37, i32 6, i32 38, i32 7, i32 39, i32 16, i32 48, i32 17, i32 49, i32 18, i32 50, i32 19, i32 51, i32 20, i32 52, i32 21, i32 53, i32 22, i32 54, i32 23, i32 55>
  %404 = shufflevector <32 x i8> %401, <32 x i8> %402, <32 x i32> <i32 8, i32 40, i32 9, i32 41, i32 10, i32 42, i32 11, i32 43, i32 12, i32 44, i32 13, i32 45, i32 14, i32 46, i32 15, i32 47, i32 24, i32 56, i32 25, i32 57, i32 26, i32 58, i32 27, i32 59, i32 28, i32 60, i32 29, i32 61, i32 30, i32 62, i32 31, i32 63>
  %405 = bitcast <32 x i8> %403 to <4 x i64>
  %406 = bitcast <32 x i8> %404 to <4 x i64>
  br i1 %318, label %407, label %468

407:                                              ; preds = %343, %407
  %408 = phi <4 x i64> [ %466, %407 ], [ %406, %343 ]
  %409 = phi <4 x i64> [ %465, %407 ], [ %405, %343 ]
  %410 = phi i8* [ %456, %407 ], [ %347, %343 ]
  %411 = phi i8* [ %463, %407 ], [ %346, %343 ]
  %412 = phi <32 x i8> [ %434, %407 ], [ %403, %343 ]
  %413 = phi <4 x i64> [ %408, %407 ], [ %400, %343 ]
  %414 = phi <32 x i8> [ %415, %407 ], [ %399, %343 ]
  %415 = phi <32 x i8> [ %435, %407 ], [ %404, %343 ]
  %416 = phi i32 [ %464, %407 ], [ %9, %343 ]
  %417 = phi <4 x i64> [ %409, %407 ], [ %398, %343 ]
  %418 = phi <32 x i8> [ %412, %407 ], [ %397, %343 ]
  %419 = phi <32 x i8> [ %418, %407 ], [ %391, %343 ]
  %420 = phi <4 x i64> [ %430, %407 ], [ %385, %343 ]
  %421 = phi <32 x i8> [ %414, %407 ], [ %393, %343 ]
  %422 = getelementptr inbounds i8, i8* %410, i64 %319
  %423 = bitcast i8* %422 to <2 x i64>*
  %424 = load <2 x i64>, <2 x i64>* %423, align 1
  %425 = shufflevector <2 x i64> %424, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %426 = shufflevector <4 x i64> %420, <4 x i64> %425, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %427 = getelementptr inbounds i8, i8* %410, i64 %320
  %428 = bitcast i8* %427 to <2 x i64>*
  %429 = load <2 x i64>, <2 x i64>* %428, align 1
  %430 = shufflevector <2 x i64> %429, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %431 = shufflevector <2 x i64> %424, <2 x i64> %429, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %432 = bitcast <4 x i64> %426 to <32 x i8>
  %433 = bitcast <4 x i64> %431 to <32 x i8>
  %434 = shufflevector <32 x i8> %432, <32 x i8> %433, <32 x i32> <i32 0, i32 32, i32 1, i32 33, i32 2, i32 34, i32 3, i32 35, i32 4, i32 36, i32 5, i32 37, i32 6, i32 38, i32 7, i32 39, i32 16, i32 48, i32 17, i32 49, i32 18, i32 50, i32 19, i32 51, i32 20, i32 52, i32 21, i32 53, i32 22, i32 54, i32 23, i32 55>
  %435 = shufflevector <32 x i8> %432, <32 x i8> %433, <32 x i32> <i32 8, i32 40, i32 9, i32 41, i32 10, i32 42, i32 11, i32 43, i32 12, i32 44, i32 13, i32 45, i32 14, i32 46, i32 15, i32 47, i32 24, i32 56, i32 25, i32 57, i32 26, i32 58, i32 27, i32 59, i32 28, i32 60, i32 29, i32 61, i32 30, i32 62, i32 31, i32 63>
  %436 = tail call <16 x i16> @llvm.x86.avx2.pmadd.ub.sw(<32 x i8> %419, <32 x i8> %354) #4
  %437 = tail call <16 x i16> @llvm.x86.avx2.pmadd.ub.sw(<32 x i8> %434, <32 x i8> %360) #4
  %438 = tail call <16 x i16> @llvm.sadd.sat.v16i16(<16 x i16> %436, <16 x i16> %437) #4
  %439 = tail call <16 x i16> @llvm.x86.avx2.pmadd.ub.sw(<32 x i8> %418, <32 x i8> %356) #4
  %440 = tail call <16 x i16> @llvm.x86.avx2.pmadd.ub.sw(<32 x i8> %412, <32 x i8> %358) #4
  %441 = tail call <16 x i16> @llvm.sadd.sat.v16i16(<16 x i16> %439, <16 x i16> %440) #4
  %442 = tail call <16 x i16> @llvm.sadd.sat.v16i16(<16 x i16> %438, <16 x i16> %441) #4
  %443 = tail call <16 x i16> @llvm.x86.avx2.pmadd.ub.sw(<32 x i8> %421, <32 x i8> %354) #4
  %444 = tail call <16 x i16> @llvm.x86.avx2.pmadd.ub.sw(<32 x i8> %435, <32 x i8> %360) #4
  %445 = tail call <16 x i16> @llvm.sadd.sat.v16i16(<16 x i16> %443, <16 x i16> %444) #4
  %446 = tail call <16 x i16> @llvm.x86.avx2.pmadd.ub.sw(<32 x i8> %414, <32 x i8> %356) #4
  %447 = tail call <16 x i16> @llvm.x86.avx2.pmadd.ub.sw(<32 x i8> %415, <32 x i8> %358) #4
  %448 = tail call <16 x i16> @llvm.sadd.sat.v16i16(<16 x i16> %446, <16 x i16> %447) #4
  %449 = tail call <16 x i16> @llvm.sadd.sat.v16i16(<16 x i16> %445, <16 x i16> %448) #4
  %450 = tail call <16 x i16> @llvm.sadd.sat.v16i16(<16 x i16> %442, <16 x i16> <i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32>) #4
  %451 = tail call <16 x i16> @llvm.sadd.sat.v16i16(<16 x i16> %449, <16 x i16> <i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32>) #4
  %452 = ashr <16 x i16> %450, <i16 6, i16 6, i16 6, i16 6, i16 6, i16 6, i16 6, i16 6, i16 6, i16 6, i16 6, i16 6, i16 6, i16 6, i16 6, i16 6>
  %453 = ashr <16 x i16> %451, <i16 6, i16 6, i16 6, i16 6, i16 6, i16 6, i16 6, i16 6, i16 6, i16 6, i16 6, i16 6, i16 6, i16 6, i16 6, i16 6>
  %454 = tail call <32 x i8> @llvm.x86.avx2.packuswb(<16 x i16> %452, <16 x i16> %453) #4
  %455 = bitcast <32 x i8> %454 to <4 x i64>
  %456 = getelementptr inbounds i8, i8* %410, i64 %312
  %457 = bitcast i8* %411 to <2 x i64>*
  %458 = shufflevector <4 x i64> %455, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  store <2 x i64> %458, <2 x i64>* %457, align 16
  %459 = getelementptr inbounds i8, i8* %411, i64 %3
  %460 = bitcast <32 x i8> %454 to <8 x i32>
  %461 = shufflevector <8 x i32> %460, <8 x i32> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %462 = bitcast i8* %459 to <4 x i32>*
  store <4 x i32> %461, <4 x i32>* %462, align 16
  %463 = getelementptr inbounds i8, i8* %411, i64 %313
  %464 = add i32 %416, -2
  %465 = bitcast <32 x i8> %434 to <4 x i64>
  %466 = bitcast <32 x i8> %435 to <4 x i64>
  %467 = icmp ugt i32 %464, 1
  br i1 %467, label %407, label %468

468:                                              ; preds = %407, %343
  %469 = phi <4 x i64> [ %394, %343 ], [ %413, %407 ]
  %470 = phi <4 x i64> [ %385, %343 ], [ %430, %407 ]
  %471 = phi <4 x i64> [ %392, %343 ], [ %417, %407 ]
  %472 = phi <4 x i64> [ %398, %343 ], [ %409, %407 ]
  %473 = phi i32 [ %9, %343 ], [ %321, %407 ]
  %474 = phi <4 x i64> [ %400, %343 ], [ %408, %407 ]
  %475 = phi i8* [ %346, %343 ], [ %463, %407 ]
  %476 = phi i8* [ %347, %343 ], [ %456, %407 ]
  %477 = phi <4 x i64> [ %405, %343 ], [ %465, %407 ]
  %478 = phi <4 x i64> [ %406, %343 ], [ %466, %407 ]
  %479 = icmp eq i32 %473, 1
  br i1 %479, label %480, label %528

480:                                              ; preds = %468
  %481 = getelementptr inbounds i8, i8* %476, i64 %319
  %482 = bitcast i8* %481 to <16 x i8>*
  %483 = load <16 x i8>, <16 x i8>* %482, align 1
  %484 = shufflevector <4 x i64> %470, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %485 = bitcast <2 x i64> %484 to <16 x i8>
  %486 = shufflevector <16 x i8> %485, <16 x i8> %483, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %487 = shufflevector <16 x i8> %485, <16 x i8> %483, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %488 = shufflevector <4 x i64> %471, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %489 = shufflevector <4 x i64> %355, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %490 = bitcast <2 x i64> %488 to <16 x i8>
  %491 = bitcast <2 x i64> %489 to <16 x i8>
  %492 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %490, <16 x i8> %491) #4
  %493 = shufflevector <4 x i64> %361, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %494 = bitcast <2 x i64> %493 to <16 x i8>
  %495 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %486, <16 x i8> %494) #4
  %496 = shufflevector <4 x i64> %469, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %497 = bitcast <2 x i64> %496 to <16 x i8>
  %498 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %497, <16 x i8> %491) #4
  %499 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %487, <16 x i8> %494) #4
  %500 = tail call <8 x i16> @llvm.sadd.sat.v8i16(<8 x i16> %492, <8 x i16> %495) #4
  %501 = tail call <8 x i16> @llvm.sadd.sat.v8i16(<8 x i16> %498, <8 x i16> %499) #4
  %502 = shufflevector <4 x i64> %472, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %503 = shufflevector <4 x i64> %357, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %504 = bitcast <2 x i64> %502 to <16 x i8>
  %505 = bitcast <2 x i64> %503 to <16 x i8>
  %506 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %504, <16 x i8> %505) #4
  %507 = shufflevector <4 x i64> %474, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %508 = bitcast <2 x i64> %507 to <16 x i8>
  %509 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %508, <16 x i8> %505) #4
  %510 = shufflevector <4 x i64> %477, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %511 = shufflevector <4 x i64> %359, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %512 = bitcast <2 x i64> %510 to <16 x i8>
  %513 = bitcast <2 x i64> %511 to <16 x i8>
  %514 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %512, <16 x i8> %513) #4
  %515 = shufflevector <4 x i64> %478, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %516 = bitcast <2 x i64> %515 to <16 x i8>
  %517 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %516, <16 x i8> %513) #4
  %518 = tail call <8 x i16> @llvm.sadd.sat.v8i16(<8 x i16> %506, <8 x i16> %514) #4
  %519 = tail call <8 x i16> @llvm.sadd.sat.v8i16(<8 x i16> %500, <8 x i16> %518) #4
  %520 = tail call <8 x i16> @llvm.sadd.sat.v8i16(<8 x i16> %509, <8 x i16> %517) #4
  %521 = tail call <8 x i16> @llvm.sadd.sat.v8i16(<8 x i16> %501, <8 x i16> %520) #4
  %522 = tail call <8 x i16> @llvm.sadd.sat.v8i16(<8 x i16> %519, <8 x i16> <i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32>) #4
  %523 = tail call <8 x i16> @llvm.sadd.sat.v8i16(<8 x i16> %521, <8 x i16> <i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32>) #4
  %524 = ashr <8 x i16> %522, <i16 6, i16 6, i16 6, i16 6, i16 6, i16 6, i16 6, i16 6>
  %525 = ashr <8 x i16> %523, <i16 6, i16 6, i16 6, i16 6, i16 6, i16 6, i16 6, i16 6>
  %526 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %524, <8 x i16> %525) #4
  %527 = bitcast i8* %475 to <16 x i8>*
  store <16 x i8> %526, <16 x i8>* %527, align 16
  br label %528

528:                                              ; preds = %468, %480
  %529 = getelementptr inbounds i8, i8* %344, i64 16
  %530 = getelementptr inbounds i8, i8* %346, i64 16
  %531 = add nsw i32 %345, -16
  %532 = icmp sgt i32 %531, 15
  br i1 %532, label %343, label %323

533:                                              ; preds = %698
  %534 = and i32 %327, 7
  br label %535

535:                                              ; preds = %533, %325
  %536 = phi i8* [ %326, %325 ], [ %700, %533 ]
  %537 = phi i32 [ %327, %325 ], [ %534, %533 ]
  %538 = phi i8* [ %328, %325 ], [ %699, %533 ]
  %539 = icmp sgt i32 %537, 3
  br i1 %539, label %540, label %756

540:                                              ; preds = %535
  %541 = mul i64 %1, -3
  br label %703

542:                                              ; preds = %330, %698
  %543 = phi i8* [ %328, %330 ], [ %699, %698 ]
  %544 = phi i32 [ %327, %330 ], [ %701, %698 ]
  %545 = phi i8* [ %326, %330 ], [ %700, %698 ]
  %546 = getelementptr inbounds i8, i8* %543, i64 %331
  %547 = load <8 x i16>, <8 x i16>* %332, align 1
  %548 = ashr <8 x i16> %547, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %549 = tail call <16 x i8> @llvm.x86.sse2.packsswb.128(<8 x i16> %548, <8 x i16> %548) #4
  %550 = bitcast <16 x i8> %549 to <2 x i64>
  %551 = shufflevector <2 x i64> %550, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 0, i32 1>
  %552 = bitcast <4 x i64> %551 to <32 x i8>
  %553 = shufflevector <32 x i8> %552, <32 x i8> undef, <32 x i32> <i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 16, i32 17, i32 16, i32 17, i32 16, i32 17, i32 16, i32 17, i32 16, i32 17, i32 16, i32 17, i32 16, i32 17, i32 16, i32 17>
  %554 = bitcast <32 x i8> %553 to <4 x i64>
  %555 = shufflevector <32 x i8> %552, <32 x i8> undef, <32 x i32> <i32 2, i32 3, i32 2, i32 3, i32 2, i32 3, i32 2, i32 3, i32 2, i32 3, i32 2, i32 3, i32 2, i32 3, i32 2, i32 3, i32 18, i32 19, i32 18, i32 19, i32 18, i32 19, i32 18, i32 19, i32 18, i32 19, i32 18, i32 19, i32 18, i32 19, i32 18, i32 19>
  %556 = bitcast <32 x i8> %555 to <4 x i64>
  %557 = shufflevector <32 x i8> %552, <32 x i8> undef, <32 x i32> <i32 4, i32 5, i32 4, i32 5, i32 4, i32 5, i32 4, i32 5, i32 4, i32 5, i32 4, i32 5, i32 4, i32 5, i32 4, i32 5, i32 20, i32 21, i32 20, i32 21, i32 20, i32 21, i32 20, i32 21, i32 20, i32 21, i32 20, i32 21, i32 20, i32 21, i32 20, i32 21>
  %558 = bitcast <32 x i8> %557 to <4 x i64>
  %559 = shufflevector <32 x i8> %552, <32 x i8> undef, <32 x i32> <i32 6, i32 7, i32 6, i32 7, i32 6, i32 7, i32 6, i32 7, i32 6, i32 7, i32 6, i32 7, i32 6, i32 7, i32 6, i32 7, i32 22, i32 23, i32 22, i32 23, i32 22, i32 23, i32 22, i32 23, i32 22, i32 23, i32 22, i32 23, i32 22, i32 23, i32 22, i32 23>
  %560 = bitcast <32 x i8> %559 to <4 x i64>
  %561 = getelementptr inbounds i8, i8* %546, i64 %1
  %562 = bitcast i8* %546 to i64*
  %563 = load i64, i64* %562, align 1
  %564 = insertelement <4 x i64> <i64 undef, i64 0, i64 undef, i64 undef>, i64 %563, i32 0
  %565 = bitcast i8* %561 to i64*
  %566 = load i64, i64* %565, align 1
  %567 = insertelement <4 x i64> <i64 undef, i64 0, i64 undef, i64 undef>, i64 %566, i32 0
  %568 = shufflevector <4 x i64> %564, <4 x i64> %567, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %569 = getelementptr inbounds i8, i8* %546, i64 %335
  %570 = getelementptr inbounds i8, i8* %546, i64 %333
  %571 = bitcast i8* %570 to i64*
  %572 = load i64, i64* %571, align 1
  %573 = insertelement <4 x i64> <i64 undef, i64 0, i64 undef, i64 undef>, i64 %572, i32 0
  %574 = bitcast i8* %569 to i64*
  %575 = load i64, i64* %574, align 1
  %576 = insertelement <4 x i64> <i64 undef, i64 0, i64 undef, i64 undef>, i64 %575, i32 0
  %577 = shufflevector <4 x i64> %573, <4 x i64> %576, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %578 = getelementptr inbounds i8, i8* %546, i64 %336
  %579 = getelementptr inbounds i8, i8* %546, i64 %337
  %580 = bitcast i8* %579 to i64*
  %581 = load i64, i64* %580, align 1
  %582 = insertelement <4 x i64> <i64 undef, i64 0, i64 undef, i64 undef>, i64 %581, i32 0
  %583 = bitcast i8* %578 to i64*
  %584 = load i64, i64* %583, align 1
  %585 = insertelement <4 x i64> <i64 undef, i64 0, i64 undef, i64 undef>, i64 %584, i32 0
  %586 = shufflevector <4 x i64> %582, <4 x i64> %585, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %587 = getelementptr inbounds i8, i8* %546, i64 %338
  %588 = bitcast i8* %587 to i64*
  %589 = load i64, i64* %588, align 1
  %590 = insertelement <4 x i64> <i64 undef, i64 0, i64 undef, i64 undef>, i64 %589, i32 0
  %591 = shufflevector <4 x i64> %568, <4 x i64> %577, <4 x i32> <i32 2, i32 undef, i32 4, i32 undef>
  %592 = shufflevector <4 x i64> %577, <4 x i64> %586, <4 x i32> <i32 2, i32 undef, i32 4, i32 undef>
  %593 = shufflevector <4 x i64> %586, <4 x i64> %590, <4 x i32> <i32 2, i32 undef, i32 4, i32 undef>
  %594 = bitcast <4 x i64> %568 to <32 x i8>
  %595 = bitcast <4 x i64> %591 to <32 x i8>
  %596 = shufflevector <32 x i8> %594, <32 x i8> %595, <32 x i32> <i32 0, i32 32, i32 1, i32 33, i32 2, i32 34, i32 3, i32 35, i32 4, i32 36, i32 5, i32 37, i32 6, i32 38, i32 7, i32 39, i32 16, i32 48, i32 17, i32 49, i32 18, i32 50, i32 19, i32 51, i32 20, i32 52, i32 21, i32 53, i32 22, i32 54, i32 23, i32 55>
  %597 = bitcast <32 x i8> %596 to <4 x i64>
  %598 = bitcast <4 x i64> %577 to <32 x i8>
  %599 = bitcast <4 x i64> %592 to <32 x i8>
  %600 = shufflevector <32 x i8> %598, <32 x i8> %599, <32 x i32> <i32 0, i32 32, i32 1, i32 33, i32 2, i32 34, i32 3, i32 35, i32 4, i32 36, i32 5, i32 37, i32 6, i32 38, i32 7, i32 39, i32 16, i32 48, i32 17, i32 49, i32 18, i32 50, i32 19, i32 51, i32 20, i32 52, i32 21, i32 53, i32 22, i32 54, i32 23, i32 55>
  %601 = bitcast <32 x i8> %600 to <4 x i64>
  %602 = bitcast <4 x i64> %586 to <32 x i8>
  %603 = bitcast <4 x i64> %593 to <32 x i8>
  %604 = shufflevector <32 x i8> %602, <32 x i8> %603, <32 x i32> <i32 0, i32 32, i32 1, i32 33, i32 2, i32 34, i32 3, i32 35, i32 4, i32 36, i32 5, i32 37, i32 6, i32 38, i32 7, i32 39, i32 16, i32 48, i32 17, i32 49, i32 18, i32 50, i32 19, i32 51, i32 20, i32 52, i32 21, i32 53, i32 22, i32 54, i32 23, i32 55>
  %605 = bitcast <32 x i8> %604 to <4 x i64>
  br i1 %339, label %606, label %653

606:                                              ; preds = %542, %606
  %607 = phi <4 x i64> [ %651, %606 ], [ %605, %542 ]
  %608 = phi i8* [ %640, %606 ], [ %546, %542 ]
  %609 = phi i8* [ %649, %606 ], [ %545, %542 ]
  %610 = phi <32 x i8> [ %628, %606 ], [ %604, %542 ]
  %611 = phi i32 [ %650, %606 ], [ %9, %542 ]
  %612 = phi <4 x i64> [ %607, %606 ], [ %601, %542 ]
  %613 = phi <32 x i8> [ %610, %606 ], [ %600, %542 ]
  %614 = phi <32 x i8> [ %613, %606 ], [ %596, %542 ]
  %615 = phi <4 x i64> [ %624, %606 ], [ %590, %542 ]
  %616 = getelementptr inbounds i8, i8* %608, i64 %340
  %617 = bitcast i8* %616 to i64*
  %618 = load i64, i64* %617, align 1
  %619 = insertelement <4 x i64> undef, i64 %618, i32 0
  %620 = insertelement <4 x i64> %615, i64 %618, i32 2
  %621 = getelementptr inbounds i8, i8* %608, i64 %341
  %622 = bitcast i8* %621 to i64*
  %623 = load i64, i64* %622, align 1
  %624 = insertelement <4 x i64> <i64 undef, i64 0, i64 undef, i64 undef>, i64 %623, i32 0
  %625 = insertelement <4 x i64> %619, i64 %623, i32 2
  %626 = bitcast <4 x i64> %620 to <32 x i8>
  %627 = bitcast <4 x i64> %625 to <32 x i8>
  %628 = shufflevector <32 x i8> %626, <32 x i8> %627, <32 x i32> <i32 0, i32 32, i32 1, i32 33, i32 2, i32 34, i32 3, i32 35, i32 4, i32 36, i32 5, i32 37, i32 6, i32 38, i32 7, i32 39, i32 16, i32 48, i32 17, i32 49, i32 18, i32 50, i32 19, i32 51, i32 20, i32 52, i32 21, i32 53, i32 22, i32 54, i32 23, i32 55>
  %629 = tail call <16 x i16> @llvm.x86.avx2.pmadd.ub.sw(<32 x i8> %614, <32 x i8> %553) #4
  %630 = tail call <16 x i16> @llvm.x86.avx2.pmadd.ub.sw(<32 x i8> %628, <32 x i8> %559) #4
  %631 = tail call <16 x i16> @llvm.sadd.sat.v16i16(<16 x i16> %629, <16 x i16> %630) #4
  %632 = tail call <16 x i16> @llvm.x86.avx2.pmadd.ub.sw(<32 x i8> %613, <32 x i8> %555) #4
  %633 = tail call <16 x i16> @llvm.x86.avx2.pmadd.ub.sw(<32 x i8> %610, <32 x i8> %557) #4
  %634 = tail call <16 x i16> @llvm.sadd.sat.v16i16(<16 x i16> %632, <16 x i16> %633) #4
  %635 = tail call <16 x i16> @llvm.sadd.sat.v16i16(<16 x i16> %631, <16 x i16> %634) #4
  %636 = tail call <16 x i16> @llvm.sadd.sat.v16i16(<16 x i16> %635, <16 x i16> <i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32>) #4
  %637 = ashr <16 x i16> %636, <i16 6, i16 6, i16 6, i16 6, i16 6, i16 6, i16 6, i16 6, i16 6, i16 6, i16 6, i16 6, i16 6, i16 6, i16 6, i16 6>
  %638 = tail call <32 x i8> @llvm.x86.avx2.packuswb(<16 x i16> %637, <16 x i16> zeroinitializer) #4
  %639 = bitcast <32 x i8> %638 to <4 x i64>
  %640 = getelementptr inbounds i8, i8* %608, i64 %333
  %641 = extractelement <4 x i64> %639, i32 0
  %642 = bitcast i8* %609 to i64*
  store i64 %641, i64* %642, align 1
  %643 = getelementptr inbounds i8, i8* %609, i64 %3
  %644 = bitcast <32 x i8> %638 to <8 x i32>
  %645 = shufflevector <8 x i32> %644, <8 x i32> undef, <4 x i32> <i32 4, i32 5, i32 undef, i32 undef>
  %646 = bitcast <4 x i32> %645 to <2 x i64>
  %647 = extractelement <2 x i64> %646, i32 0
  %648 = bitcast i8* %643 to i64*
  store i64 %647, i64* %648, align 1
  %649 = getelementptr inbounds i8, i8* %609, i64 %334
  %650 = add i32 %611, -2
  %651 = bitcast <32 x i8> %628 to <4 x i64>
  %652 = icmp ugt i32 %650, 1
  br i1 %652, label %606, label %653

653:                                              ; preds = %606, %542
  %654 = phi <4 x i64> [ %590, %542 ], [ %624, %606 ]
  %655 = phi <4 x i64> [ %597, %542 ], [ %612, %606 ]
  %656 = phi <4 x i64> [ %601, %542 ], [ %607, %606 ]
  %657 = phi i32 [ %9, %542 ], [ %342, %606 ]
  %658 = phi i8* [ %545, %542 ], [ %649, %606 ]
  %659 = phi i8* [ %546, %542 ], [ %640, %606 ]
  %660 = phi <4 x i64> [ %605, %542 ], [ %651, %606 ]
  %661 = icmp eq i32 %657, 1
  br i1 %661, label %662, label %698

662:                                              ; preds = %653
  %663 = getelementptr inbounds i8, i8* %659, i64 %340
  %664 = bitcast i8* %663 to i64*
  %665 = load i64, i64* %664, align 1
  %666 = insertelement <2 x i64> undef, i64 %665, i32 0
  %667 = shufflevector <4 x i64> %654, <4 x i64> undef, <2 x i32> <i32 0, i32 undef>
  %668 = bitcast <2 x i64> %667 to <16 x i8>
  %669 = bitcast <2 x i64> %666 to <16 x i8>
  %670 = shufflevector <16 x i8> %668, <16 x i8> %669, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %671 = shufflevector <4 x i64> %655, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %672 = shufflevector <4 x i64> %554, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %673 = bitcast <2 x i64> %671 to <16 x i8>
  %674 = bitcast <2 x i64> %672 to <16 x i8>
  %675 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %673, <16 x i8> %674) #4
  %676 = shufflevector <4 x i64> %560, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %677 = bitcast <2 x i64> %676 to <16 x i8>
  %678 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %670, <16 x i8> %677) #4
  %679 = tail call <8 x i16> @llvm.sadd.sat.v8i16(<8 x i16> %675, <8 x i16> %678) #4
  %680 = shufflevector <4 x i64> %656, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %681 = shufflevector <4 x i64> %556, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %682 = bitcast <2 x i64> %680 to <16 x i8>
  %683 = bitcast <2 x i64> %681 to <16 x i8>
  %684 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %682, <16 x i8> %683) #4
  %685 = shufflevector <4 x i64> %660, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %686 = shufflevector <4 x i64> %558, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %687 = bitcast <2 x i64> %685 to <16 x i8>
  %688 = bitcast <2 x i64> %686 to <16 x i8>
  %689 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %687, <16 x i8> %688) #4
  %690 = tail call <8 x i16> @llvm.sadd.sat.v8i16(<8 x i16> %684, <8 x i16> %689) #4
  %691 = tail call <8 x i16> @llvm.sadd.sat.v8i16(<8 x i16> %679, <8 x i16> %690) #4
  %692 = tail call <8 x i16> @llvm.sadd.sat.v8i16(<8 x i16> %691, <8 x i16> <i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32>) #4
  %693 = ashr <8 x i16> %692, <i16 6, i16 6, i16 6, i16 6, i16 6, i16 6, i16 6, i16 6>
  %694 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %693, <8 x i16> undef) #4
  %695 = bitcast <16 x i8> %694 to <2 x i64>
  %696 = extractelement <2 x i64> %695, i32 0
  %697 = bitcast i8* %658 to i64*
  store i64 %696, i64* %697, align 1
  br label %698

698:                                              ; preds = %653, %662
  %699 = getelementptr inbounds i8, i8* %543, i64 8
  %700 = getelementptr inbounds i8, i8* %545, i64 8
  %701 = add nsw i32 %544, -8
  %702 = icmp sgt i32 %701, 7
  br i1 %702, label %542, label %533

703:                                              ; preds = %540, %703
  %704 = phi i8* [ %538, %540 ], [ %708, %703 ]
  %705 = phi i32 [ %537, %540 ], [ %710, %703 ]
  %706 = phi i8* [ %536, %540 ], [ %709, %703 ]
  %707 = getelementptr inbounds i8, i8* %704, i64 %541
  tail call void @aom_filter_block1d4_v8_ssse3(i8* %707, i64 %1, i8* %706, i64 %3, i32 %9, i16* %6) #4
  %708 = getelementptr inbounds i8, i8* %704, i64 4
  %709 = getelementptr inbounds i8, i8* %706, i64 4
  %710 = add nsw i32 %705, -4
  %711 = icmp sgt i32 %710, 3
  br i1 %711, label %703, label %752

712:                                              ; preds = %719
  %713 = and i32 %8, 15
  br label %714

714:                                              ; preds = %712, %322
  %715 = phi i8* [ %2, %322 ], [ %724, %712 ]
  %716 = phi i32 [ %8, %322 ], [ %713, %712 ]
  %717 = phi i8* [ %0, %322 ], [ %723, %712 ]
  %718 = icmp sgt i32 %716, 7
  br i1 %718, label %734, label %729

719:                                              ; preds = %322, %719
  %720 = phi i8* [ %723, %719 ], [ %0, %322 ]
  %721 = phi i32 [ %725, %719 ], [ %8, %322 ]
  %722 = phi i8* [ %724, %719 ], [ %2, %322 ]
  tail call void @aom_filter_block1d16_v2_ssse3(i8* %720, i64 %1, i8* %722, i64 %3, i32 %9, i16* %6) #4
  %723 = getelementptr inbounds i8, i8* %720, i64 16
  %724 = getelementptr inbounds i8, i8* %722, i64 16
  %725 = add nsw i32 %721, -16
  %726 = icmp sgt i32 %725, 15
  br i1 %726, label %719, label %712

727:                                              ; preds = %734
  %728 = and i32 %716, 7
  br label %729

729:                                              ; preds = %727, %714
  %730 = phi i8* [ %715, %714 ], [ %739, %727 ]
  %731 = phi i32 [ %716, %714 ], [ %728, %727 ]
  %732 = phi i8* [ %717, %714 ], [ %738, %727 ]
  %733 = icmp sgt i32 %731, 3
  br i1 %733, label %742, label %756

734:                                              ; preds = %714, %734
  %735 = phi i8* [ %738, %734 ], [ %717, %714 ]
  %736 = phi i32 [ %740, %734 ], [ %716, %714 ]
  %737 = phi i8* [ %739, %734 ], [ %715, %714 ]
  tail call void @aom_filter_block1d8_v2_ssse3(i8* %735, i64 %1, i8* %737, i64 %3, i32 %9, i16* %6) #4
  %738 = getelementptr inbounds i8, i8* %735, i64 8
  %739 = getelementptr inbounds i8, i8* %737, i64 8
  %740 = add nsw i32 %736, -8
  %741 = icmp sgt i32 %740, 7
  br i1 %741, label %734, label %727

742:                                              ; preds = %729, %742
  %743 = phi i8* [ %746, %742 ], [ %732, %729 ]
  %744 = phi i32 [ %748, %742 ], [ %731, %729 ]
  %745 = phi i8* [ %747, %742 ], [ %730, %729 ]
  tail call void @aom_filter_block1d4_v2_ssse3(i8* %743, i64 %1, i8* %745, i64 %3, i32 %9, i16* %6) #4
  %746 = getelementptr inbounds i8, i8* %743, i64 4
  %747 = getelementptr inbounds i8, i8* %745, i64 4
  %748 = add nsw i32 %744, -4
  %749 = icmp sgt i32 %748, 3
  br i1 %749, label %742, label %750

750:                                              ; preds = %742
  %751 = and i32 %731, 3
  br label %756

752:                                              ; preds = %703
  %753 = and i32 %537, 3
  br label %756

754:                                              ; preds = %299
  %755 = and i32 %140, 3
  br label %756

756:                                              ; preds = %754, %752, %750, %138, %535, %729
  %757 = phi i8* [ %730, %729 ], [ %536, %535 ], [ %139, %138 ], [ %747, %750 ], [ %709, %752 ], [ %301, %754 ]
  %758 = phi i32 [ %731, %729 ], [ %537, %535 ], [ %140, %138 ], [ %751, %750 ], [ %753, %752 ], [ %755, %754 ]
  %759 = phi i8* [ %732, %729 ], [ %538, %535 ], [ %141, %138 ], [ %746, %750 ], [ %708, %752 ], [ %300, %754 ]
  %760 = icmp eq i32 %758, 0
  br i1 %760, label %762, label %761

761:                                              ; preds = %756
  tail call void @aom_convolve8_vert_c(i8* %759, i64 %1, i8* %757, i64 %3, i16* %4, i32 %5, i16* %6, i32 %7, i32 %758, i32 %9) #4
  br label %762

762:                                              ; preds = %756, %761
  ret void
}

declare void @aom_filter_block1d4_v8_ssse3(i8*, i64, i8*, i64, i32, i16*) local_unnamed_addr #1

declare void @aom_filter_block1d16_v2_ssse3(i8*, i64, i8*, i64, i32, i16*) local_unnamed_addr #1

declare void @aom_filter_block1d8_v2_ssse3(i8*, i64, i8*, i64, i32, i16*) local_unnamed_addr #1

declare void @aom_filter_block1d4_v2_ssse3(i8*, i64, i8*, i64, i32, i16*) local_unnamed_addr #1

declare void @aom_convolve8_vert_c(i8*, i64, i8*, i64, i16*, i32, i16*, i32, i32, i32) local_unnamed_addr #1

; Function Attrs: nounwind readnone
declare <16 x i8> @llvm.x86.sse2.packsswb.128(<8 x i16>, <8 x i16>) #2

; Function Attrs: nounwind readnone
declare <16 x i16> @llvm.x86.avx2.pmadd.ub.sw(<32 x i8>, <32 x i8>) #2

; Function Attrs: nounwind readnone speculatable
declare <16 x i16> @llvm.sadd.sat.v16i16(<16 x i16>, <16 x i16>) #3

; Function Attrs: nounwind readnone
declare <32 x i8> @llvm.x86.avx2.packuswb(<16 x i16>, <16 x i16>) #2

; Function Attrs: nounwind readnone
declare <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8>, <16 x i8>) #2

; Function Attrs: nounwind readnone speculatable
declare <8 x i16> @llvm.sadd.sat.v8i16(<8 x i16>, <8 x i16>) #3

; Function Attrs: nounwind readnone
declare <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16>, <8 x i16>) #2

; Function Attrs: nounwind readnone
declare <16 x i16> @llvm.x86.avx2.phadd.sw(<16 x i16>, <16 x i16>) #2

; Function Attrs: nounwind readnone
declare <8 x i16> @llvm.x86.ssse3.phadd.sw.128(<8 x i16>, <8 x i16>) #2

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="256" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+avx,+avx2,+cx8,+fxsr,+mmx,+popcnt,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+ssse3,+x87,+xsave" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+avx,+avx2,+cx8,+fxsr,+mmx,+popcnt,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+ssse3,+x87,+xsave" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind readnone }
attributes #3 = { nounwind readnone speculatable }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
