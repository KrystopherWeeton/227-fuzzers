; ModuleID = '../../third_party/boringssl/src/crypto/x509/x_pkey.c'
source_filename = "../../third_party/boringssl/src/crypto/x509/x_pkey.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.private_key_st = type { i32, %struct.X509_algor_st*, %struct.asn1_string_st*, %struct.evp_pkey_st*, i32, i8*, i32, %struct.evp_cipher_info_st }
%struct.X509_algor_st = type { %struct.asn1_object_st*, %struct.asn1_type_st* }
%struct.asn1_object_st = type { i8*, i8*, i32, i32, i8*, i32 }
%struct.asn1_type_st = type { i32, %union.anon }
%union.anon = type { i8* }
%struct.asn1_string_st = type { i32, i32, i8*, i64 }
%struct.evp_pkey_st = type { i32, i32, %union.anon.0, %struct.evp_pkey_asn1_method_st* }
%union.anon.0 = type { i8* }
%struct.evp_pkey_asn1_method_st = type opaque
%struct.evp_cipher_info_st = type { %struct.evp_cipher_st*, [16 x i8] }
%struct.evp_cipher_st = type { i32, i32, i32, i32, i32, i32, i8*, i32 (%struct.evp_cipher_ctx_st*, i8*, i8*, i32)*, i32 (%struct.evp_cipher_ctx_st*, i8*, i8*, i64)*, void (%struct.evp_cipher_ctx_st*)*, i32 (%struct.evp_cipher_ctx_st*, i32, i32, i8*)* }
%struct.evp_cipher_ctx_st = type { %struct.evp_cipher_st*, i8*, i8*, i32, i32, i32, [16 x i8], [16 x i8], [32 x i8], i32, i32, i32, [32 x i8] }

@.str = private unnamed_addr constant [53 x i8] c"../../third_party/boringssl/src/crypto/x509/x_pkey.c\00", align 1

; Function Attrs: nounwind ssp uwtable
define hidden %struct.private_key_st* @X509_PKEY_new() local_unnamed_addr #0 {
  %1 = tail call i8* @OPENSSL_malloc(i64 80) #3
  %2 = bitcast i8* %1 to %struct.private_key_st*
  %3 = icmp eq i8* %1, null
  br i1 %3, label %14, label %4

4:                                                ; preds = %0
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 1 %1, i8 0, i64 80, i1 false) #3
  %5 = tail call %struct.X509_algor_st* @X509_ALGOR_new() #3
  %6 = getelementptr inbounds i8, i8* %1, i64 8
  %7 = bitcast i8* %6 to %struct.X509_algor_st**
  store %struct.X509_algor_st* %5, %struct.X509_algor_st** %7, align 8
  %8 = icmp eq %struct.X509_algor_st* %5, null
  br i1 %8, label %19, label %9

9:                                                ; preds = %4
  %10 = tail call %struct.asn1_string_st* @ASN1_OCTET_STRING_new() #3
  %11 = getelementptr inbounds i8, i8* %1, i64 16
  %12 = bitcast i8* %11 to %struct.asn1_string_st**
  store %struct.asn1_string_st* %10, %struct.asn1_string_st** %12, align 8
  %13 = icmp eq %struct.asn1_string_st* %10, null
  br i1 %13, label %15, label %43

14:                                               ; preds = %0
  tail call void @ERR_put_error(i32 11, i32 0, i32 65, i8* getelementptr inbounds ([53 x i8], [53 x i8]* @.str, i64 0, i64 0), i32 73) #3
  br label %43

15:                                               ; preds = %9
  %16 = load %struct.X509_algor_st*, %struct.X509_algor_st** %7, align 8
  %17 = icmp eq %struct.X509_algor_st* %16, null
  br i1 %17, label %19, label %18

18:                                               ; preds = %15
  tail call void @X509_ALGOR_free(%struct.X509_algor_st* nonnull %16) #3
  br label %19

19:                                               ; preds = %4, %18, %15
  %20 = getelementptr inbounds i8, i8* %1, i64 16
  %21 = bitcast i8* %20 to %struct.asn1_string_st**
  %22 = load %struct.asn1_string_st*, %struct.asn1_string_st** %21, align 8
  %23 = icmp eq %struct.asn1_string_st* %22, null
  br i1 %23, label %25, label %24

24:                                               ; preds = %19
  tail call void @ASN1_OCTET_STRING_free(%struct.asn1_string_st* nonnull %22) #3
  br label %25

25:                                               ; preds = %24, %19
  %26 = getelementptr inbounds i8, i8* %1, i64 24
  %27 = bitcast i8* %26 to %struct.evp_pkey_st**
  %28 = load %struct.evp_pkey_st*, %struct.evp_pkey_st** %27, align 8
  %29 = icmp eq %struct.evp_pkey_st* %28, null
  br i1 %29, label %31, label %30

30:                                               ; preds = %25
  tail call void @EVP_PKEY_free(%struct.evp_pkey_st* nonnull %28) #3
  br label %31

31:                                               ; preds = %30, %25
  %32 = getelementptr inbounds i8, i8* %1, i64 40
  %33 = bitcast i8* %32 to i8**
  %34 = load i8*, i8** %33, align 8
  %35 = icmp eq i8* %34, null
  br i1 %35, label %42, label %36

36:                                               ; preds = %31
  %37 = getelementptr inbounds i8, i8* %1, i64 48
  %38 = bitcast i8* %37 to i32*
  %39 = load i32, i32* %38, align 8
  %40 = icmp eq i32 %39, 0
  br i1 %40, label %42, label %41

41:                                               ; preds = %36
  tail call void @OPENSSL_free(i8* nonnull %34) #3
  br label %42

42:                                               ; preds = %31, %36, %41
  tail call void @OPENSSL_free(i8* nonnull %1) #3
  br label %43

43:                                               ; preds = %14, %42, %9
  %44 = phi %struct.private_key_st* [ %2, %9 ], [ null, %14 ], [ null, %42 ]
  ret %struct.private_key_st* %44
}

declare i8* @OPENSSL_malloc(i64) local_unnamed_addr #1

declare void @ERR_put_error(i32, i32, i32, i8*, i32) local_unnamed_addr #1

declare %struct.X509_algor_st* @X509_ALGOR_new() local_unnamed_addr #1

declare %struct.asn1_string_st* @ASN1_OCTET_STRING_new() local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden void @X509_PKEY_free(%struct.private_key_st*) local_unnamed_addr #0 {
  %2 = icmp eq %struct.private_key_st* %0, null
  br i1 %2, label %29, label %3

3:                                                ; preds = %1
  %4 = getelementptr inbounds %struct.private_key_st, %struct.private_key_st* %0, i64 0, i32 1
  %5 = load %struct.X509_algor_st*, %struct.X509_algor_st** %4, align 8
  %6 = icmp eq %struct.X509_algor_st* %5, null
  br i1 %6, label %8, label %7

7:                                                ; preds = %3
  tail call void @X509_ALGOR_free(%struct.X509_algor_st* nonnull %5) #3
  br label %8

8:                                                ; preds = %3, %7
  %9 = getelementptr inbounds %struct.private_key_st, %struct.private_key_st* %0, i64 0, i32 2
  %10 = load %struct.asn1_string_st*, %struct.asn1_string_st** %9, align 8
  %11 = icmp eq %struct.asn1_string_st* %10, null
  br i1 %11, label %13, label %12

12:                                               ; preds = %8
  tail call void @ASN1_OCTET_STRING_free(%struct.asn1_string_st* nonnull %10) #3
  br label %13

13:                                               ; preds = %8, %12
  %14 = getelementptr inbounds %struct.private_key_st, %struct.private_key_st* %0, i64 0, i32 3
  %15 = load %struct.evp_pkey_st*, %struct.evp_pkey_st** %14, align 8
  %16 = icmp eq %struct.evp_pkey_st* %15, null
  br i1 %16, label %18, label %17

17:                                               ; preds = %13
  tail call void @EVP_PKEY_free(%struct.evp_pkey_st* nonnull %15) #3
  br label %18

18:                                               ; preds = %13, %17
  %19 = getelementptr inbounds %struct.private_key_st, %struct.private_key_st* %0, i64 0, i32 5
  %20 = load i8*, i8** %19, align 8
  %21 = icmp eq i8* %20, null
  br i1 %21, label %27, label %22

22:                                               ; preds = %18
  %23 = getelementptr inbounds %struct.private_key_st, %struct.private_key_st* %0, i64 0, i32 6
  %24 = load i32, i32* %23, align 8
  %25 = icmp eq i32 %24, 0
  br i1 %25, label %27, label %26

26:                                               ; preds = %22
  tail call void @OPENSSL_free(i8* nonnull %20) #3
  br label %27

27:                                               ; preds = %22, %18, %26
  %28 = bitcast %struct.private_key_st* %0 to i8*
  tail call void @OPENSSL_free(i8* nonnull %28) #3
  br label %29

29:                                               ; preds = %1, %27
  ret void
}

declare void @X509_ALGOR_free(%struct.X509_algor_st*) local_unnamed_addr #1

declare void @ASN1_OCTET_STRING_free(%struct.asn1_string_st*) local_unnamed_addr #1

declare void @EVP_PKEY_free(%struct.evp_pkey_st*) local_unnamed_addr #1

declare void @OPENSSL_free(i8*) local_unnamed_addr #1

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #2

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
